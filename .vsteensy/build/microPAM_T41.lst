
.vsteensy/build/microPAM_T41.elf:     file format elf32-littlearm

SYMBOL TABLE:
60000000 l    d  .text.headers	00000000 .text.headers
60001400 l    d  .text.code	00000000 .text.code
60002404 l    d  .text.progmem	00000000 .text.progmem
00000000 l    d  .text.itcm	00000000 .text.itcm
00010510 l    d  .fini	00000000 .fini
00010514 l    d  .ARM.exidx	00000000 .ARM.exidx
20000000 l    d  .data	00000000 .data
200026c0 l    d  .bss	00000000 .bss
20200000 l    d  .bss.dma	00000000 .bss.dma
70000000 l    d  .bss.extram	00000000 .bss.extram
600153c8 l    d  .text.csf	00000000 .text.csf
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_loclists	00000000 .debug_loclists
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_rnglists	00000000 .debug_rnglists
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 l    df *ABS*	00000000 bootdata.c
00000000 l    df *ABS*	00000000 startup.c
600017b4 l     F .text.code	00000024 flexspi2_command
600017d8 l     F .text.code	0000002c flexspi2_psram_id
60001400 l     F .text.code	00000016 memory_copy
60001416 l     F .text.code	00000010 memory_clear
00000000 l    df *ABS*	00000000 main.cpp
00000262 l     F .text.itcm	00000024 Print::println(char const*) [clone .isra.0]
000005c4 l     F .text.itcm	0000011c _GLOBAL__sub_I__Z9I2S_startv
20200000 l     O .bss.dma	00003cf0 setup::data
20006498 l     O .bss	00000400 i2s_rx_buffer_32
2000699c l     O .bss	00000004 loop::ic
200069a0 l     O .bss	00000004 loop::t0
200069a4 l     O .bss	00000004 loop::m_seco
2000713c l     O .bss	00000002 loop::status
00000000 l    df *ABS*	00000000 usb.c
00007fa8 l     F .text.itcm	000000a0 endpoint0_receive
00008048 l     F .text.itcm	0000007c schedule_transfer
000080c4 l     F .text.itcm	00000034 run_callbacks
000080f8 l     F .text.itcm	0000001c usb_endpoint_config
00008114 l     F .text.itcm	00000094 endpoint0_transmit.constprop.0
20007c02 l     O .bss	00000008 endpoint0_buffer
20006cd4 l     O .bss	00000004 endpoint0_notify_mask
20005b00 l     O .bss	00000008 endpoint0_setupdata
20006cd8 l     O .bss	00000004 endpointN_notify_mask
20007c0b l     O .bss	00000008 reply_buffer
20007c27 l     O .bss	00000001 sof_usage
20007c35 l     O .bss	00000001 usb_reboot_timer
00000000 l    df *ABS*	00000000 tempmon.c
200070d0 l     O .bss	00000004 s_hotCount
200070d4 l     O .bss	00000004 s_hotTemp
200070d8 l     O .bss	00000004 s_hot_ROOM
200070dc l     O .bss	00000004 s_roomC_hotC
00000000 l    df *ABS*	00000000 crashreport.cpp
60001cf8 l     F .text.code	00000054 isvalid(arm_fault_info_struct const*) [clone .constprop.0]
60001d4c l     F .text.code	0000004c cleardata(arm_fault_info_struct*) [clone .constprop.0]
00000000 l    df *ABS*	00000000 audiostream.cpp
00000000 l    df *ABS*	00000000 analog.c
20007201 l     O .bss	00000001 calibrating
00000000 l    df *ABS*	00000000 crti.o
00000000 l    df *ABS*	00000000 crtn.o
00000000 l    df *ABS*	00000000 crtstuff.c
00000020 l     F .text.itcm	00000000 register_tm_clones
00000044 l     F .text.itcm	00000000 frame_dummy
20006d0c l     O .bss	00000000 object.0
600023f0 l     O .text.code	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 wireimxrt.cpp
00000c54 l     F .text.itcm	00000044 _GLOBAL__sub_I__ZN7TwoWire5beginEv
00000000 l    df *ABS*	00000000 spi.cpp
00000c98 l     F .text.itcm	00000026 DMAChanneltransferCount(DMAChannel*, unsigned int) [clone .isra.0]
00001040 l     F .text.itcm	00000048 _GLOBAL__sub_I__ZN8SPIClass5beginEv
00000000 l    df *ABS*	00000000 sd.cpp
0000110c l     F .text.itcm	00000018 SdBase<FsVolume, FsFormatter>::begin(SdioConfig) [clone .part.0]
0000110c l     F .text.itcm	00000018 SdBase<FsVolume, FsFormatter>::begin(SdSpiConfig) [clone .part.0]
00001ba8 l     F .text.itcm	00000084 _GLOBAL__sub_I_SD
00000000 l    df *ABS*	00000000 usb_desc.c
200021a1 l     O .data	00000012 device_descriptor
600027de l     O .text.progmem	0000000a qualifier_descriptor
00000000 l    df *ABS*	00000000 serialevent.cpp
00000000 l    df *ABS*	00000000 record_queue.cpp
00000000 l    df *ABS*	00000000 time.cpp
2000648c l     O .bss	00000004 prevMillis
20006494 l     O .bss	00000004 nextSyncTime
20007188 l     O .bss	00000007 tm
200071f7 l     O .bss	00000001 Status
200068a0 l     O .bss	00000004 sysTime
20005af8 l     O .bss	00000008 cacheTime
20001bd4 l     O .data	00000004 syncInterval
20001138 l     O .data	0000000c monthDays
00000000 l    df *ABS*	00000000 fsstructs.cpp
00000000 l    df *ABS*	00000000 fscache.cpp
00000000 l    df *ABS*	00000000 upcase.cpp
20000f38 l     O .data	0000012c lookupTable
20001064 l     O .data	000000d4 mapTable
00000000 l    df *ABS*	00000000 fsdatetime.cpp
00001e00 l     F .text.itcm	00000010 dateTimeMs10(unsigned short*, unsigned short*, unsigned char*)
00000000 l    df *ABS*	00000000 exfatformatter.cpp
00001e28 l     F .text.itcm	0000001e Print::write(char const*) [clone .isra.0]
00000000 l    df *ABS*	00000000 exfatname.cpp
00000000 l    df *ABS*	00000000 exfatfile.cpp
00000000 l    df *ABS*	00000000 exfatpartition.cpp
00000000 l    df *ABS*	00000000 exfatfilewrite.cpp
000030e0 l     F .text.itcm	0000002e exFatDirChecksum(unsigned char const*, unsigned short)
00000000 l    df *ABS*	00000000 fatformatter.cpp
000039f8 l     F .text.itcm	0000001e Print::write(char const*) [clone .isra.0]
00000000 l    df *ABS*	00000000 fatname.cpp
00000000 l    df *ABS*	00000000 fatfile.cpp
0000401e l     F .text.itcm	0000002c FatFile::openRoot(FatVolume*) [clone .part.0]
00000000 l    df *ABS*	00000000 fatpartition.cpp
00000000 l    df *ABS*	00000000 fatfilelfn.cpp
0000504e l     F .text.itcm	0000001e FatFile::lfnChecksum(unsigned char const*) [clone .isra.0]
00000000 l    df *ABS*	00000000 fsfile.cpp
00000000 l    df *ABS*	00000000 fsvolume.cpp
00000000 l    df *ABS*	00000000 fsnew.cpp
00000000 l    df *ABS*	00000000 sdspicard.cpp
00000000 l    df *ABS*	00000000 sdioteensy.cpp
00006298 l     F .text.itcm	0000002c sdIrs()
000062c4 l     F .text.itcm	00000020 gpioMux(unsigned char)
000062e4 l     F .text.itcm	00000018 isBusyCommandComplete()
000062fc l     F .text.itcm	00000010 isBusyCommandInhibit()
0000630c l     F .text.itcm	00000014 isBusyDat()
00006320 l     F .text.itcm	0000000c isBusyDMA()
0000632c l     F .text.itcm	00000014 isBusyFifoRead()
00006340 l     F .text.itcm	00000014 isBusyFifoWrite()
00006354 l     F .text.itcm	00000018 isBusyTransferComplete()
0000636c l     F .text.itcm	000000a4 setSdclk(unsigned long)
000064a4 l     F .text.itcm	00000024 waitTimeout(bool (*)())
000064c8 l     F .text.itcm	0000003c yieldTimeout(bool (*)())
00006514 l     F .text.itcm	00000030 enableGPIO(bool) [clone .part.0]
00006560 l     F .text.itcm	00000068 cardCommand(unsigned long, unsigned long)
000065c8 l     F .text.itcm	00000020 statusCMD13()
000065e8 l     F .text.itcm	00000010 isBusyCMD13()
000066d8 l     F .text.itcm	00000058 readReg16(unsigned long, void*)
00006730 l     F .text.itcm	00000024 cardAcmd(unsigned long, unsigned long, unsigned long)
00006754 l     F .text.itcm	00000030 waitDmaStatus()
00006850 l     F .text.itcm	0000005c waitTransferComplete()
00006a70 l     F .text.itcm	00000098 rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)
20007184 l     O .bss	00000001 m_initDone
20006488 l     O .bss	00000004 m_sdClkKhz
20007185 l     O .bss	00000001 m_version2
20006490 l     O .bss	00000004 m_errorLine
20007186 l     O .bss	00000001 m_highCapacity
20007187 l     O .bss	00000001 m_transferActive
2000718f l     O .bss	00000010 m_cid
2000719f l     O .bss	00000010 m_csd
20006898 l     O .bss	00000004 m_ocr
2000689c l     O .bss	00000004 m_rca
200071af l     O .bss	00000008 m_scr
200071b7 l     O .bss	00000040 m_sds
200068a4 l     O .bss	00000004 m_busyFcn
200071f8 l     O .bss	00000001 m_dmaBusy
200068a8 l     O .bss	00000004 m_irqstat
2000219c l     O .data	00000001 m_errorCode
00000000 l    df *ABS*	00000000 sdspiteensy3.cpp
00007310 l     F .text.itcm	00000010 SPIClass::transfer(unsigned char) [clone .isra.0]
00000000 l    df *ABS*	00000000 sdspichipselect.cpp
00000000 l    df *ABS*	00000000 memset.o
00000000 l    df *ABS*	00000000 memcpy-armv7m.o
00000000 l    df *ABS*	00000000 usb_serial.c
000076a0 l     F .text.itcm	00000060 rx_queue_transfer
20002720 l     O .bss	00001000 rx_buffer
00007700 l     F .text.itcm	000000ac rx_event
000077ac l     F .text.itcm	0000008c usb_serial_flush_callback
20003a40 l     O .bss	00002000 txbuffer
200070c8 l     O .bss	00000004 rx_available
20007140 l     O .bss	00000010 rx_count
20007c13 l     O .bss	00000001 rx_head
2000715c l     O .bss	00000010 rx_index
20007c15 l     O .bss	00000009 rx_list
20007178 l     O .bss	00000002 rx_packet_size
20007c25 l     O .bss	00000001 rx_tail
20003720 l     O .bss	00000100 rx_transfer
20007c28 l     O .bss	00000001 transmit_previous_timeout
2000717c l     O .bss	00000002 tx_available
20007c2a l     O .bss	00000001 tx_head
20007c2c l     O .bss	00000001 tx_noautoflush
20007180 l     O .bss	00000002 tx_packet_size
20003920 l     O .bss	00000080 tx_transfer
00000000 l    df *ABS*	00000000 clockspeed.c
00000000 l    df *ABS*	00000000 delay.c
00000000 l    df *ABS*	00000000 rtc.c
00000000 l    df *ABS*	00000000 sm_pool.c
00000000 l    df *ABS*	00000000 digital.c
00000000 l    df *ABS*	00000000 pwm.c
00000000 l    df *ABS*	00000000 usb_midi.c
00008e24 l     F .text.itcm	00000060 rx_queue_transfer
00008e84 l     F .text.itcm	00000064 rx_event
200070cc l     O .bss	00000004 rx_available
20007150 l     O .bss	0000000c rx_count
20007c14 l     O .bss	00000001 rx_head
2000716c l     O .bss	0000000c rx_index
20007c1e l     O .bss	00000007 rx_list
2000717a l     O .bss	00000002 rx_packet_size
20007c26 l     O .bss	00000001 rx_tail
20003820 l     O .bss	000000c0 rx_transfer
20007c29 l     O .bss	00000001 transmit_previous_timeout
2000717e l     O .bss	00000002 tx_available
20007c2b l     O .bss	00000001 tx_head
20007c2d l     O .bss	00000001 tx_noautoflush
20007182 l     O .bss	00000002 tx_packet_size
200039a0 l     O .bss	00000080 tx_transfer
20203d00 l     O .bss.dma	00000c00 rx_buffer
20204900 l     O .bss.dma	00000800 txbuffer
00000000 l    df *ABS*	00000000 yield.cpp
200071ff l     O .bss	00000001 yield::running
00000000 l    df *ABS*	00000000 eventresponder.cpp
00000000 l    df *ABS*	00000000 dmachannel.cpp
00000000 l    df *ABS*	00000000 usb_inst.cpp
00000000 l    df *ABS*	00000000 time.cpp
20001144 l     O .data	0000000c monthDays
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 usb_audio.cpp
000097dc l     F .text.itcm	00000094 copy_to_buffers(unsigned long const*, short*, short*, unsigned int)
00009870 l     F .text.itcm	0000005c sync_event(transfer_struct*)
00009b00 l     F .text.itcm	00000054 rx_event(transfer_struct*)
00009c54 l     F .text.itcm	00000060 tx_event(transfer_struct*)
20001be4 l     O .data	00000004 usb_audio_transmit_callback::count
20205280 l     O .bss.dma	000000b4 rx_buffer
20205340 l     O .bss.dma	000000b4 tx_buffer
00000000 l    df *ABS*	00000000 print.cpp
00009e24 l     F .text.itcm	00000064 Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]
00000000 l    df *ABS*	00000000 new.cpp
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 intervaltimer.cpp
0000a06c l     F .text.itcm	00000054 pit_isr()
200026c0 l     O .bss	00000010 funct_table
00000000 l    df *ABS*	00000000 atexit_arm.o
00000000 l    df *ABS*	00000000 libc_a-malloc.o
00000000 l    df *ABS*	00000000 libc_a-mallocr.o
00000000 l    df *ABS*	00000000 libc_a-mlock.o
00000000 l    df *ABS*	00000000 libc_a-reallocr.o
00000000 l    df *ABS*	00000000 libc_a-cxa_atexit.o
00000000 l    df *ABS*	00000000 libc_a-findfp.o
0000aafc l     F .text.itcm	00000018 stdio_exit_handler
0000ab14 l     F .text.itcm	00000040 cleanup_stdio
0000ab54 l     F .text.itcm	000000d4 global_stdio_init.part.0
00000000 l    df *ABS*	00000000 libc_a-fwalk.o
00000000 l    df *ABS*	00000000 libc_a-stdio.o
00000000 l    df *ABS*	00000000 libc_a-vdprintf.o
00000000 l    df *ABS*	00000000 libc_a-vasnprintf.o
00000000 l    df *ABS*	00000000 libc_a-memcmp.o
00000000 l    df *ABS*	00000000 libc_a-memmove.o
00000000 l    df *ABS*	00000000 libc_a-strncmp.o
00000000 l    df *ABS*	00000000 libc_a-strncpy.o
00000000 l    df *ABS*	00000000 libc_a-locale.o
00000000 l    df *ABS*	00000000 libc_a-closer.o
00000000 l    df *ABS*	00000000 libc_a-lseekr.o
00000000 l    df *ABS*	00000000 libc_a-readr.o
00000000 l    df *ABS*	00000000 libc_a-sbrkr.o
00000000 l    df *ABS*	00000000 libc_a-writer.o
00000000 l    df *ABS*	00000000 libc_a-errno.o
00000000 l    df *ABS*	00000000 libc_a-init.o
00000000 l    df *ABS*	00000000 libc_a-lock.o
00000000 l    df *ABS*	00000000 libc_a-memchr.o
00000000 l    df *ABS*	00000000 libc_a-strlen.o
00000000 l    df *ABS*	00000000 libc_a-__atexit.o
00000000 l    df *ABS*	00000000 libc_a-freer.o
00000000 l    df *ABS*	00000000 libc_a-mbtowc_r.o
00000000 l    df *ABS*	00000000 libc_a-mprec.o
00000000 l    df *ABS*	00000000 libc_a-wctomb_r.o
00000000 l    df *ABS*	00000000 libc_a-svfprintf.o
00000000 l    df *ABS*	00000000 libc_a-fclose.o
00000000 l    df *ABS*	00000000 libc_a-fflush.o
00000000 l    df *ABS*	00000000 libc_a-localeconv.o
00000000 l    df *ABS*	00000000 libm_a-s_frexp.o
00000000 l    df *ABS*	00000000 libc_a-assert.o
00000000 l    df *ABS*	00000000 libc_a-callocr.o
00000000 l    df *ABS*	00000000 libc_a-dtoa.o
0000dcd8 l     F .text.itcm	00000126 quorem
00000000 l    df *ABS*	00000000 libc_a-wcrtomb.o
00000000 l    df *ABS*	00000000 libc_a-wcsrtombs.o
00000000 l    df *ABS*	00000000 libc_a-fiprintf.o
00000000 l    df *ABS*	00000000 libc_a-svfiprintf.o
00000000 l    df *ABS*	00000000 libc_a-vfiprintf.o
0000ec78 l     F .text.itcm	00000076 __sprint_r.part.0
0000fc7c l     F .text.itcm	00000080 __sbprintf
00000000 l    df *ABS*	00000000 libc_a-fvwrite.o
00000000 l    df *ABS*	00000000 libc_a-wsetup.o
00000000 l    df *ABS*	00000000 libc_a-fputwc.o
00000000 l    df *ABS*	00000000 libc_a-wcsnrtombs.o
00000000 l    df *ABS*	00000000 libc_a-makebuf.o
00000000 l    df *ABS*	00000000 libc_a-wbuf.o
00000000 l    df *ABS*	00000000 libc_a-fstatr.o
00000000 l    df *ABS*	00000000 libc_a-isattyr.o
00000000 l    df *ABS*	00000000 libc_a-ctype_.o
00000000 l    df *ABS*	00000000 libc_a-impure.o
00000000 l    df *ABS*	00000000 libc_a-__call_atexit.o
00000000 l    df *ABS*	00000000 exfatvolume.cpp
00000000 l    df *ABS*	00000000 fatvolume.cpp
00000000 l    df *ABS*	00000000 hardwareserial.cpp
000104d8 l     F .text.itcm	00000008 ___init_veneer
000104e0 l     F .text.itcm	00000008 ___ZN16CrashReportClasscvbEv_veneer
000104e8 l     F .text.itcm	00000008 ___ZNK16CrashReportClass7printToER5Print_veneer
000104f0 l     F .text.itcm	00000008 ___Z14set_audioClockilm_veneer
000104f8 l     F .text.itcm	00000008 ___ZN11AudioStream17initialize_memoryEP18audio_block_structj_veneer
00010500 l     F .text.itcm	00000008 ___reboot_Teensyduino__veneer
60002350 l     F .text.code	00000008 __delay_veneer
60002358 l     F .text.code	00000008 ___Znwj_veneer
60002360 l     F .text.code	00000008 ___ZN5Print7printlnEmi_veneer
60002368 l     F .text.code	00000008 __memset_veneer
60002370 l     F .text.code	00000008 ____libc_init_array_veneer
60002378 l     F .text.code	00000008 ___ZN5Print7printlnEv_veneer
60002380 l     F .text.code	00000008 __sm_set_pool_veneer
60002388 l     F .text.code	00000008 ___ZN5Print5printEmi_veneer
60002390 l     F .text.code	00000008 ___ZN11AudioStream12update_setupEv_veneer
60002398 l     F .text.code	00000008 ___ZN5Print5printEh_veneer
600023a0 l     F .text.code	00000008 ___ZN5Print11printNumberEmhh_veneer
600023a8 l     F .text.code	00000008 __usb_init_serialnumber_veneer
600023b0 l     F .text.code	00000008 __set_arm_clock_veneer
600023b8 l     F .text.code	00000008 __pwm_init_veneer
600023c0 l     F .text.code	00000008 ___ZN5Print10printFloatEdh_veneer
600023c8 l     F .text.code	00000008 ___ZN13IntervalTimer11beginCyclesEPFvvEm_veneer
600023d0 l     F .text.code	00000008 ___ZN5Print5printEPKc_veneer
600023d8 l     F .text.code	00000008 ___ZN5Print5printEl_veneer
600023e0 l     F .text.code	00000008 ___ZN5Print7printlnEPKc_veneer
600023e8 l     F .text.code	00000008 __main_veneer
0000404a  w    F .text.itcm	00000026 FatPartition::cacheSync()
60001634 g     F .text.code	00000048 set_audioClock(int, long, unsigned long)
0000119e  w    F .text.itcm	00000068 SDFile::getModifyTime(DateTimeFields&)
20006940 g     O .bss	00000004 AudioInputUSB::incoming_right
00001d58 g     F .text.itcm	000000a8 toUpcase(unsigned short)
000007ce g     F .text.itcm	00000016 AudioRecordQueue::available()
00007a40 g     F .text.itcm	00000014 usb_serial_available
20006948 g     O .bss	00000004 AudioOutputUSB::left_2nd
2000698c g     O .bss	00000008 I2S_32::dma
000104b0 g     F .text.itcm	00000024 _isatty_r
20007136 g     O .bss	00000002 AudioInputUSB::incoming_count
60001808 g     F .text.code	00000002 startup_default_late_hook
0000b094 g     F .text.itcm	0000002c _lseek_r
200068b4 g     O .bss	00000004 AudioStream::memory_pool
00006b08 g     F .text.itcm	0000007c SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)
000090ec  w    F .text.itcm	0000008c yield
000067c4 g     F .text.itcm	0000008c SdioCard::cardCMD6(unsigned long, unsigned char*)
00005a22  w    F .text.itcm	0000000e DedicatedSpiCard::~DedicatedSpiCard()
20007128 g     O .bss	00000004 usb_timer1_callback
00004ba0 g     F .text.itcm	000001a4 FatFile::write(void const*, unsigned int)
20005a40 g     O .bss	000000b4 usb_audio_transmit_buffer
60002518 g     O .text.progmem	00000018 usb_string_manufacturer_name_default
600018fc g     F .text.code	00000274 configure_external_ram
000059fa  w    F .text.itcm	00000004 DedicatedSpiCard::isDedicatedSpi()
00004b36 g     F .text.itcm	00000068 FatFile::truncate()
20006208 g     O .bss	00000140 Wire1
00000a6c g     F .text.itcm	0000001c setSyncProvider(long long (*)())
000051e4 g     F .text.itcm	00000124 FatFile::makeSFN(FatLfn_t*)
200071f9 g     O .bss	00000001 AudioStream::update_scheduled
200068ac g     O .bss	00000004 FsDateTime::callback
20006b3c g     O .bss	00000001 __lock___atexit_recursive_mutex
00000fac  w    F .text.itcm	00000074 SPIClass::dma_rxisr()
0000eaec g     F .text.itcm	0000004c _wcrtomb_r
20007c31 g     O .bss	00000001 usb_audio_transmit_setting
00005308 g     F .text.itcm	00000098 FatFile::makeUniqueSfn(FatLfn_t*)
0000605a g     F .text.itcm	00000036 SharedSpiCard::writeStart(unsigned long)
00003ad0 g     F .text.itcm	00000054 FatFormatter::initPbs()
00009e9a g     F .text.itcm	0000001a Print::println()
00006264 g     F .text.itcm	00000024 DedicatedSpiCard::begin(SdSpiConfig)
00000b94 g     F .text.itcm	0000009a TwoWire::isr()
20000614 g     O .data	00000074 vtable for DedicatedSpiCard
2000712c g     O .bss	00000002 AudioStream::memory_used
0000ad28 g     F .text.itcm	00000020 __sseek
0000ac28 g     F .text.itcm	0000003c __sinit
000027a0 g     F .text.itcm	000000de ExFatFile::seekSet(unsigned long long)
000103d4 g     F .text.itcm	000000b0 __swbuf_r
00000094  w    F .text.itcm	0000000c File::flush()
00001206  w    F .text.itcm	00000068 SDFile::getCreateTime(DateTimeFields&)
20007110 g     O .bss	00000004 usb_audio_overrun_count
0000a70c g     F .text.itcm	0000000c __malloc_unlock
00001848  w    F .text.itcm	00000084 SDFile::openNextFile(unsigned char)
20006994 g     O .bss	00000004 FsVolume::m_cwv
00004644 g     F .text.itcm	0000009a FatFile::open(FatFile*, char const*, int)
000059ee  w    F .text.itcm	00000004 SharedSpiCard::errorData() const
600022f8 g     F .text.code	0000004c analog_init
0000ad50 g     F .text.itcm	0000004a _vdprintf_r
00004722 g     F .text.itcm	00000020 FatFile::getCreateDateTime(unsigned short*, unsigned short*)
00005f10 g     F .text.itcm	0000003a SharedSpiCard::readOCR(unsigned long*)
000004e0 g     F .text.itcm	00000044 saveData(short)
20001bc0 g     O .data	00000004 F_CPU_ACTUAL
2000070c  w    O .data	0000005c vtable for SDFile
20006938 g     O .bss	00000004 AudioInputUSB::ready_right
0000ae7c g     F .text.itcm	000000f8 memmove
00000238 g     F .text.itcm	0000000a getTime()
00007290 g     F .text.itcm	00000064 SdioCard::stopTransmission(bool)
0000b67c g     F .text.itcm	0000004c _Balloc
0001051c g       .ARM.exidx	00000000 __exidx_end
20006cf0 g     O .bss	00000004 feedback_accumulator
00004e84 g     F .text.itcm	0000003a FatPartition::freeChain(unsigned long)
200071fc g     O .bss	00000001 EventResponder::runningFromYield
00009b54 g     F .text.itcm	0000001c AudioOutputUSB::begin()
000074a8 g     F .text.itcm	0000000a SdSpiArduinoDriver::receive()
00008bf4 g     F .text.itcm	00000060 tempmonGetTemp
00003f82 g     F .text.itcm	00000098 FatFile::getName7(char*, unsigned int)
00008b34 g     F .text.itcm	0000001e smalloc_verify_pool
00009dfc g     F .text.itcm	00000028 Print::write(unsigned char const*, unsigned int)
20001be8 g     O .data	00000004 __atexit_recursive_mutex
0000b13c g     F .text.itcm	0000000c __errno
000014d6  w    F .text.itcm	0000000a SDFile::isDirectory()
00003610 g     F .text.itcm	00000110 ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
0000006c  w    F .text.itcm	0000000c File::write(unsigned char const*, unsigned int)
20003a20 g     O .bss	00000020 tx_transfer
60001000 g     O .text.headers	00000020 ImageVectorTable
00000cbe  w    F .text.itcm	00000034 SPIClass::SPIClass(unsigned int, unsigned int)
000000e4  w    F .text.itcm	0000002c File::~File()
2000695c g     O .bss	00000004 EventResponder::firstInterrupt
000088c8 g     F .text.itcm	00000004 usb_transfer_status
20006d38 g     O .bss	00000014 patchCord2
00008b86 g     F .text.itcm	0000006a sm_set_pool
00001ebc g     F .text.itcm	0000001c ExFatFormatter::writeUpcaseUnicode(unsigned short)
000098cc g     F .text.itcm	00000108 AudioOutputUSB::update()
20006cb4 g     O .bss	00000004 __stdio_exit_handler
000018cc  w    F .text.itcm	00000076 SdBase<FsVolume, FsFormatter>::freeClusterCount()
00005770 g     F .text.itcm	0000005c FsBaseFile::FsBaseFile(FsBaseFile const&)
000030c8 g     F .text.itcm	00000018 ExFatPartition::rootLength()
0000170e  w    F .text.itcm	00000036 SDFile::setCreateTime(DateTimeFields const&)
00009316  w    F .text.itcm	00000008 usb_serial_class::write(unsigned char const*, unsigned int)
00010484 g     F .text.itcm	0000002c _fstat_r
20000ae8 g     O .data	00000370 digital_pin_to_info_PGM
20006cdc g     O .bss	00000004 errno
000074b2 g     F .text.itcm	00000022 SdSpiArduinoDriver::receive(unsigned char*, unsigned int)
00002e48 g     F .text.itcm	00000040 ExFatPartition::fatGet(unsigned long, unsigned long*)
60002454 g     O .text.progmem	00000050 TwoWire::i2c3_hardware
00010518 g       .text.itcm	00000000 _etext
00001020 g     F .text.itcm	00000010 _spi_dma_rxISR0()
00005624 g     F .text.itcm	00000094 FatFile::parsePathName(char const*, FatLfn_t*, char const**)
200026c0 g       .bss	00000000 _sbss
00003b24 g     F .text.itcm	0000005c FatFormatter::writeMbr()
0000751c g     F .text.itcm	00000006 sdCsInit(unsigned char)
00005ccc  w    F .text.itcm	0000001e SharedSpiCard::cardAcmd(unsigned char, unsigned long)
00001aa8 g     F .text.itcm	00000094 SDClass::mediaPresent()
0000641c g     F .text.itcm	0000000c SdioCard::errorData() const
00001584  w    F .text.itcm	00000018 FsBaseFile::peek()
00006b84 g     F .text.itcm	000000a4 SdioCard::writeSector(unsigned long, unsigned char const*)
00001f5c g     F .text.itcm	00000458 ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)
00008c94 g     F .text.itcm	00000024 digitalRead
600027ec g       *ABS*	00000000 _stextload
000095ac g     F .text.itcm	00000018 AudioStream::receiveReadOnly(unsigned int)
00000524 g     F .text.itcm	000000a0 loop
00008d1c g     F .text.itcm	00000072 flexpwm_init
00009dc4 g     F .text.itcm	00000038 usb_audio_set_feature
00008fa8 g     F .text.itcm	0000009c usb_midi_flush_output
0000875c g     F .text.itcm	00000040 usb_config_rx
0000256c g     F .text.itcm	00000084 ExFatFile::parsePathName(char const*, ExName_t*, char const**)
20006d4c g     O .bss	00000014 patchCord3
000070c8 g     F .text.itcm	000000b4 SdioCard::readData(unsigned char*)
20006958 g     O .bss	00000004 EventResponder::lastInterrupt
000057cc g     F .text.itcm	00000022 FsBaseFile::close()
00000f62 g     F .text.itcm	00000048 SPIClass::end()
0000756c g     F .text.itcm	00000134 memcpy
00000078  w    F .text.itcm	0000000c File::available()
00006122 g     F .text.itcm	00000032 SharedSpiCard::writeStop()
200026c0 g     O .data	00000000 .hidden __TMC_END__
00002f28 g     F .text.itcm	0000005a ExFatPartition::freeChain(unsigned long)
000042f6 g     F .text.itcm	00000026 FatFile::peek()
0000be10 g     F .text.itcm	00001b44 _svfprintf_r
20007200  w    O .bss	00000001 SDFile::name()::zeroterm
200070e8 g     O .bss	00000004 systick_millis_count
0000357c g     F .text.itcm	00000094 ExFatFile::rename(ExFatFile*, char const*)
00001168  w    F .text.itcm	00000036 SDFile::truncate(unsigned long long)
20006944 g     O .bss	00000004 AudioOutputUSB::left_1st
20007c33 g     O .bss	00000001 usb_configuration
000059e4  w    F .text.itcm	00000006 SdCardInterface::status()
60000000 g     O .text.headers	00000200 FlexSPI_NOR_Config
00008b52 g     F .text.itcm	00000034 sm_align_pool
000072f4 g     F .text.itcm	0000001c SdioCard::syncDevice()
00006920 g     F .text.itcm	00000088 SdioCard::writeData(unsigned char const*)
000014a0  w    F .text.itcm	0000000a StreamFile<FsBaseFile, unsigned long long>::available()
0000431c g     F .text.itcm	0000003e FatFile::readDirCache(bool)
00005aac g     F .text.itcm	00000078 SharedSpiCard::sectorCount()
200068bc g     O .bss	00000070 AudioStream::memory_pool_available_mask
60002518  w    O .text.progmem	00000018 usb_string_manufacturer_name
0000a180 g     F .text.itcm	00000010 malloc
60002404 g     O .text.progmem	00000050 TwoWire::i2c1_hardware
00001a3e g     F .text.itcm	00000068 SDClass::format(int, char, Print&)
200006dc  w    O .data	00000024 vtable for FsFile
00008af2  w    F .text.itcm	0000000a _fstat
00000a94  w    F .text.itcm	0000001e TwoWire::read()
0000dc20 g     F .text.itcm	00000040 __assert_func
20007138 g     O .bss	00000002 AudioOutputUSB::offset_1st
200003a8 g     O .data	000000c8 __mprec_tens
6000167c g     F .text.code	000000e4 usb_init
20007134 g     O .bss	00000002 AudioStream::memory_pool_first_mask
20205260 g     O .bss.dma	00000004 usb_audio_sync_feedback
000059ea  w    F .text.itcm	00000004 SharedSpiCard::errorCode() const
00001614  w    F .text.itcm	0000005a SDFile::seek(unsigned long long, int)
20006b78 g     O .bss	00000004 __malloc_top_pad
20006028 g     O .bss	00000050 SPI1
200070ec g     O .bss	00000004 systick_safe_read
aaaaaabf g       *ABS*	00000000 _flexram_bank_config
00003720 g     F .text.itcm	000000ca ExFatFile::truncate()
20001bf0 g     O .data	00000000 .hidden __dso_handle
00000288  w    F .text.itcm	00000044 AudioStream::AudioStream(unsigned char, audio_block_struct**)
0000dba0 g     F .text.itcm	00000008 _localeconv_r
00007454 g     F .text.itcm	0000004e SdSpiArduinoDriver::deactivate()
0000fcfc g     F .text.itcm	000002f4 __sfvwrite_r
0000b820 g     F .text.itcm	0000005c __i2b
20000000 g       .data	00000000 _sdata
00003c7c g     F .text.itcm	000001a0 FatFormatter::makeFat32()
60002689 g     O .text.progmem	00000155 usb_config_descriptor_480
000074a2 g     F .text.itcm	00000006 SdSpiArduinoDriver::end()
00004070 g     F .text.itcm	00000036 FatFile::addCluster()
0000b0ec g     F .text.itcm	00000024 _sbrk_r
00006544 g     F .text.itcm	0000001c SdioCard::type() const
60001804 g     F .text.code	00000002 startup_default_early_hook
60001426 g     F .text.code	0000020e ResetHandler
00007ab4 g     F .text.itcm	0000001e usb_serial_getchar
00001124  w    F .text.itcm	00000044 SDFile::name()
20007118 g     O .bss	00000008 usb_cdc_line_coding
00008c54 g     F .text.itcm	00000040 digitalWrite
20006960 g     O .bss	00000004 EventResponder::lastYield
00002544 g     F .text.itcm	00000026 ExFatFile::openRoot(ExFatVolume*)
0000b0c0 g     F .text.itcm	0000002c _read_r
000092a0  w    F .text.itcm	0000001e Print::write(char const*)
00008ee8 g     F .text.itcm	000000c0 usb_midi_configure
000015c8  w    F .text.itcm	00000020 StreamFile<FsBaseFile, unsigned long long>::read()
00005a20  w    F .text.itcm	00000002 DedicatedSpiCard::~DedicatedSpiCard()
00001e46 g     F .text.itcm	00000034 ExFatFormatter::syncUpcase()
000016d8  w    F .text.itcm	00000036 SDFile::setModifyTime(DateTimeFields const&)
0000d954 g     F .text.itcm	000000c6 _fclose_r
00006428 g     F .text.itcm	0000001c SdioCard::readCID(cid_t*)
20006ce0 g     O .bss	00000010 extmem_smalloc_pool
20006b70 g     O .bss	00000004 __malloc_max_sbrked_mem
00006006 g     F .text.itcm	00000054 DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)
200071fb g     O .bss	00000001 AudioOutputUSB::update_responsibility
0000126e  w    F .text.itcm	00000018 SDFile::position()
00008cb8 g     F .text.itcm	00000064 pinMode
00009ef0 g     F .text.itcm	0000012c Print::printFloat(double, unsigned char)
000015b0  w    F .text.itcm	00000018 FsBaseFile::read(void*, unsigned int)
20006934 g     O .bss	00000004 AudioInputUSB::ready_left
20006348 g     O .bss	00000140 Wire2
60015400 g     O .text.csf	00000c00 hab_csf
00000084  w    F .text.itcm	00000010 File::peek()
00004ebe g     F .text.itcm	0000007e FatPartition::freeClusterCount()
20280000 g       .text.csf	00000000 _heap_end
000017d0  w    F .text.itcm	00000078 SDClass::open(char const*, unsigned char)
00010514 g       .ARM.exidx	00000000 __exidx_start
70000000 g       .bss.extram	00000000 _extram_end
00000256  w    F .text.itcm	0000000c DMAChannel::~DMAChannel()
000092c6  w    F .text.itcm	00000008 Print::print(unsigned char)
00008afc  w    F .text.itcm	00000004 _isatty
20006954 g     O .bss	00000004 EventResponder::firstYield
00001762  w    F .text.itcm	00000018 StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)
00001784  w    F .text.itcm	0000004c SDFile::SDFile(FsFile const&)
0000a718 g     F .text.itcm	000003d8 _realloc_r
000015e8  w    F .text.itcm	0000000a SDFile::read(void*, unsigned int)
0000b148 g     F .text.itcm	00000048 __libc_init_array
000014e0  w    F .text.itcm	00000028 SDFile::rewindDirectory()
00000a88  w    F .text.itcm	0000000c TwoWire::available()
00002c92 g     F .text.itcm	0000000e ExFatFile::open(ExFatVolume*, char const*, int)
0000108c g     F .text.itcm	00000080 SDClass::dateTime(unsigned short*, unsigned short*)
000033ca g     F .text.itcm	000000b0 ExFatFile::addDirCluster()
00009d6c g     F .text.itcm	00000058 usb_audio_get_feature
00010168 g     F .text.itcm	00000066 _fputwc_r
00000cbe  w    F .text.itcm	00000034 SPIClass::SPIClass(unsigned int, unsigned int)
20000380 g     O .data	00000028 __mprec_bigtens
00008b0a  w    F .text.itcm	00000004 abort
000092fe  w    F .text.itcm	00000004 usb_serial_class::clear()
00008abc g     F .text.itcm	0000002c _sbrk
60012d08 g       *ABS*	00000000 _sdataload
00000110 g     F .text.itcm	0000009c I2S_32::isr32()
0000bb88 g     F .text.itcm	00000042 __mcmp
2000078c g     O .data	00000030 vtable for SDClass
20001bec g     O .data	00000004 __brkval
20007c32 g     O .bss	00000001 usb_cdc_line_rtsdtr
60002344 g     F .text.code	00000000 _init
00007838 g     F .text.itcm	00000002 usb_serial_reset
00004118 g     F .text.itcm	0000001e FatFile::cacheDirEntry(unsigned char)
20000470 g     O .data	00000070 SPIClass::spiclass_lpspi1_hardware
20007c2f g     O .bss	00000001 usb_audio_sync_nbytes
60002260 g     F .text.code	00000098 AudioStream::initialize_memory(audio_block_struct*, unsigned int)
00001330  w    F .text.itcm	0000004c SDClass::remove(char const*)
00001524  w    F .text.itcm	00000026 SDFile::close()
0000154c  w    F .text.itcm	00000024 SDFile::~SDFile()
60002534 g     O .text.progmem	00000155 usb_config_descriptor_12
200007bc g     O .data	00000024 vtable for TwoWire
00007434 g     F .text.itcm	00000020 SdSpiArduinoDriver::begin(SdSpiConfig)
20006cb8 g     O .bss	00000018 acq
20007c60 g       .bss	00000000 _ebss
00006c28 g     F .text.itcm	0000007c SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)
00001682  w    F .text.itcm	0000000a StreamFile<FsBaseFile, unsigned long long>::flush()
0000b780 g     F .text.itcm	00000040 __hi0bits
000024b8 g     F .text.itcm	00000038 ExFatFile::dirCache(unsigned char, unsigned char)
60002250 g     F .text.code	00000002 CrashReportClass::clear()
000009a0 g     F .text.itcm	00000038 setTime(long long)
00000c3c g     F .text.itcm	0000000c lpi2c3_isr()
00001b3c g     F .text.itcm	0000006c SDClass::begin(unsigned char)
0000347a g     F .text.itcm	00000048 ExFatFile::mkdir(ExFatFile*, ExName_t*)
20205400 g       .bss.dma	00000000 _heap_start
00001784  w    F .text.itcm	0000004c SDFile::SDFile(FsFile const&)
20006b40 g     O .bss	00000001 __lock___malloc_recursive_mutex
200070f0 g     O .bss	00000020 usb1
0000108a  w    F .text.itcm	00000002 SDClass::~SDClass()
600024a4 g     O .text.progmem	00000050 TwoWire::i2c4_hardware
00000256  w    F .text.itcm	0000000c DMAChannel::~DMAChannel()
20006b7c g     O .bss	00000138 __sf
20001bb8 g     O .data	00000004 CrashReport
20007202 g     O .bss	00000a00 diskBuffer
2000694c g     O .bss	00000004 AudioOutputUSB::right_1st
00005f88  w    F .text.itcm	00000008 SharedSpiCard::readCID(cid_t*)
00005c44 g     F .text.itcm	00000088 SharedSpiCard::cardCommand(unsigned char, unsigned long)
000000e4  w    F .text.itcm	0000002c File::~File()
00000003 g       *ABS*	00000000 _itcm_block_count
20002700 g     O .bss	00000020 endpoint0_transfer_data
00003eda g     F .text.itcm	00000028 FatFile::getLfnChar(DirLfn_t*, unsigned char)
00001d0a g     F .text.itcm	0000004c FsCache::prepare(unsigned long, unsigned char)
0000a022 g     F .text.itcm	00000004 operator delete(void*, unsigned int)
00008dc4 g     F .text.itcm	00000060 pwm_init
000099d4 g     F .text.itcm	0000012c usb_audio_receive_callback
20006cf4 g     O .bss	00000014 file
00000b2c  w    F .text.itcm	00000068 TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)
00000414 g     F .text.itcm	000000cc I2S_32::begin()
60016000 g       .text.csf	00000000 __text_csf_end
60001b70 g     F .text.code	0000005c usb_pll_start
0000b9d8 g     F .text.itcm	000000c0 __pow5mult
00004560 g     F .text.itcm	0000004c FatFile::rmdir()
20000608 g     O .data	0000000c vtable for CrashReportClass
200005fc g     O .data	0000000c vtable for AudioRecordQueue
00000c48 g     F .text.itcm	0000000c lpi2c4_isr()
00004e0e g     F .text.itcm	00000076 FatPartition::allocateCluster(unsigned long, unsigned long*)
00000b2c  w    F .text.itcm	00000068 TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)
00006294  w    F .text.itcm	00000002 SdioCard::end()
000013b6  w    F .text.itcm	00000032 SDClass::exists(char const*)
2000692c g     O .bss	00000004 AudioStream::unused
200026e0 g     O .bss	00000020 endpoint0_transfer_ack
20007120 g     O .bss	00000004 usb_cdc_line_rtsdtr_millis
00008888 g     F .text.itcm	00000024 usb_transmit
000092d6  w    F .text.itcm	00000014 Print::println(char const*)
00009440 g     F .text.itcm	00000064 software_isr()
000091b4 g     F .text.itcm	00000020 systick_isr
00002402 g     F .text.itcm	00000068 ExFatFile::getName7(char*, unsigned int)
0000b19c g     F .text.itcm	00000002 __retarget_lock_release_recursive
200068b8 g     O .bss	00000004 AudioStream::first_update
20001bc4 g     O .data	00000010 Serial
2000712e g     O .bss	00000002 AudioStream::memory_used_max
00009778 g     F .text.itcm	00000028 AudioConnection::~AudioConnection()
0000931e  w    F .text.itcm	00000006 usb_serial_class::write(unsigned char)
00005864 g     F .text.itcm	0000005e FsBaseFile::openNext(FsBaseFile*, int)
60001804  w    F .text.code	00000002 startup_early_hook
20007c2e g     O .bss	00000001 usb_audio_receive_setting
00003134 g     F .text.itcm	00000094 ExFatFile::addCluster()
200068b0 g     O .bss	00000004 FsDateTime::callback2
200006b0  w    O .data	0000002c vtable for File
00005ba8 g     F .text.itcm	00000068 SharedSpiCard::readData(unsigned char*, unsigned int)
00001942  w    F .text.itcm	0000003c SDClass::usedSize()
000079fc g     F .text.itcm	00000044 usb_serial_peekchar
0000ac64 g     F .text.itcm	0000000c __sfp_lock_acquire
0000b1a0 g     F .text.itcm	00000000 memchr
00004db0 g     F .text.itcm	0000005e FatPartition::fatPut(unsigned long, unsigned long)
00007d58 g     F .text.itcm	00000250 set_arm_clock
200070e4 g     O .bss	00000004 systick_cycle_count
20002186 g     O .data	00000016 usb_string_serial_number_default
0000b444 g     F .text.itcm	0000020c _free_r
00006090 g     F .text.itcm	00000092 SharedSpiCard::erase(unsigned long, unsigned long)
00006154 g     F .text.itcm	0000004e SharedSpiCard::writeData(unsigned char, unsigned char const*)
000068ac g     F .text.itcm	00000074 SdioCard::readStop()
000059f2  w    F .text.itcm	00000004 SharedSpiCard::type() const
0000b064 g     F .text.itcm	0000000c __locale_mb_cur_max
0000eb38 g     F .text.itcm	00000016 _wcsrtombs_r
200069ac g     O .bss	00000190 __atexit0
0000930e  w    F .text.itcm	00000004 usb_serial_class::flush()
00005cea g     F .text.itcm	00000038 SharedSpiCard::readSCR(scr_t*)
00001ed8 g     F .text.itcm	00000082 ExFatFormatter::writeUpcase(unsigned long)
20002168 g     O .data	00000004 __malloc_sbrk_base
00009306  w    F .text.itcm	00000004 usb_serial_class::read()
2000713a g     O .bss	00000002 I2S_32::block_offset
000056b8 g     F .text.itcm	000000b8 FatFile::remove()
00008b00  w    F .text.itcm	00000006 _lseek
00008b06  w    F .text.itcm	00000004 __cxa_pure_virtual
0000ba98 g     F .text.itcm	000000f0 __lshift
0000485c g     F .text.itcm	000000a0 FatFile::mkdir(FatFile*, char const*, bool)
0000885c g     F .text.itcm	0000002c usb_prepare_transfer
000059f6  w    F .text.itcm	00000004 DedicatedSpiCard::hasDedicatedSpi()
00008944 g     F .text.itcm	00000178 unused_interrupt_vector
2000693c g     O .bss	00000004 AudioInputUSB::incoming_left
0000eb78 g     F .text.itcm	00000100 __ssprint_r
60001bcc g     F .text.code	0000012c tempmon_init
20007124 g     O .bss	00000004 usb_timer0_callback
0000510c g     F .text.itcm	000000d8 FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)
0000adb8 g     F .text.itcm	00000062 _vasnprintf_r
0000a01c  w    F .text.itcm	00000002 serialEvent()
0000b31c g     F .text.itcm	00000088 __register_exitproc
000095c4 g     F .text.itcm	00000042 AudioStream::receiveWritable(unsigned int)
00002bd0 g     F .text.itcm	000000c2 ExFatFile::open(ExFatFile*, char const*, int)
0000af74 g     F .text.itcm	0000008a strncmp
00001696  w    F .text.itcm	00000042 FsBaseFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
0000506c g     F .text.itcm	000000a0 FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)
000034c2 g     F .text.itcm	000000ba ExFatFile::mkdir(ExFatFile*, char const*, bool)
000058c4 g     F .text.itcm	000000f4 FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)
00003b80 g     F .text.itcm	000000fc FatFormatter::makeFat16()
000096bc g     F .text.itcm	00000028 AudioConnection::AudioConnection(AudioStream&, unsigned char, AudioStream&, unsigned char)
00000288  w    F .text.itcm	00000044 AudioStream::AudioStream(unsigned char, audio_block_struct**)
00007a54 g     F .text.itcm	00000060 usb_serial_flush_input
00002f82 g     F .text.itcm	00000066 ExFatPartition::freeClusterCount()
20000700 g     O .data	0000000c vtable for I2S_32
0000b87c g     F .text.itcm	0000015c __multiply
00007c60 g     F .text.itcm	00000016 usb_serial_putchar
00000025 g       *ABS*	00000000 _teensy_model_identifier
00005d64 g     F .text.itcm	00000174 SharedSpiCard::begin(SdSpiConfig)
0000b000 g     F .text.itcm	00000064 strncpy
20006b48 g     O .bss	00000028 __malloc_current_mallinfo
20000550 g     O .data	00000070 SPIClass::spiclass_lpspi4_hardware
0000bd20 g     F .text.itcm	000000d4 __d2b
000061a2 g     F .text.itcm	00000030 SharedSpiCard::writeData(unsigned char const*)
20006964 g     O .bss	00000020 HardwareSerial::s_serials_with_serial_events
0000628c  w    F .text.itcm	00000004 SdCardInterface::isDedicatedSpi()
60001760 g     F .text.code	00000054 _reboot_Teensyduino_
0000a0c0 g     F .text.itcm	000000b4 IntervalTimer::beginCycles(void (*)(), unsigned long)
00006504  w    F .text.itcm	0000000e SdioCard::~SdioCard()
000096bc g     F .text.itcm	00000028 AudioConnection::AudioConnection(AudioStream&, unsigned char, AudioStream&, unsigned char)
00000390 g     F .text.itcm	00000084 I2S_32::config_i2s()
60001806 g     F .text.code	00000002 startup_default_middle_hook
00005a30 g     F .text.itcm	0000005e DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)
00005f4a g     F .text.itcm	00000036 SharedSpiCard::readRegister(unsigned char, void*)
000069a8 g     F .text.itcm	0000006c SdioCard::writeStart(unsigned long)
00008208 g     F .text.itcm	00000554 usb_isr
0000aaf0 g     F .text.itcm	0000000c __cxa_atexit
000025f0 g     F .text.itcm	00000186 ExFatFile::read(void*, unsigned int)
000097a0 g     F .text.itcm	0000003c AudioStream::update_setup()
0000b070 g     F .text.itcm	00000024 _close_r
00005fc4 g     F .text.itcm	0000002a SharedSpiCard::readStop()
000015a6  w    F .text.itcm	0000000a SDFile::peek()
00001cba g     F .text.itcm	00000050 FsCache::sync()
20005fd8 g     O .bss	00000050 SPI
0000ae1c g     F .text.itcm	00000060 memcmp
20006988 g     O .bss	00000004 I2S_32::block_right
20000688  w    O .data	00000028 vtable for usb_serial_class
000074d4 g     F .text.itcm	00000008 SdSpiArduinoDriver::send(unsigned char)
0000b194 g     F .text.itcm	00000002 __retarget_lock_close_recursive
00007522 g     F .text.itcm	00000004 sdCsWrite(unsigned char, bool)
200070e0 g     O .bss	00000004 scale_cpu_cycles_to_microseconds
20006078 g     O .bss	00000050 SPI2
0000fff0 g     F .text.itcm	000000cc __swsetup_r
00003254 g     F .text.itcm	00000056 ExFatFile::rmdir()
00001400  w    F .text.itcm	0000001e FsVolume::bytesPerCluster() const
00005f90 g     F .text.itcm	00000034 SharedSpiCard::readStart(unsigned long)
20001d60 g     O .data	00000408 __malloc_av_
200069a8 g     O .bss	00000004 __atexit
0000168c  w    F .text.itcm	0000000a SDFile::flush()
0000acc4 g     F .text.itcm	00000022 __sread
200038e0 g     O .bss	00000020 rx_transfer
00007cc4 g     F .text.itcm	00000094 usb_serial_flush_output
0000a700 g     F .text.itcm	0000000c __malloc_lock
00001e10 g     F .text.itcm	00000018 FsDateTime::setCallback(void (*)(unsigned short*, unsigned short*))
200005f0 g     O .data	0000000c vtable for AudioOutputUSB
20002400 g     O .data	000002c0 _VectorsRam
20006d60 g     O .bss	00000368 queue1
000074dc g     F .text.itcm	00000040 SdSpiArduinoDriver::send(unsigned char const*, unsigned int)
00005c18 g     F .text.itcm	0000002c SharedSpiCard::waitReady(unsigned short)
00003a18 g     F .text.itcm	000000b8 FatFormatter::initFatDir(unsigned char, unsigned long)
0000db4c g     F .text.itcm	00000054 _fflush_r
00000790 g     F .text.itcm	0000003e AudioRecordQueue::update()
0000dc60 g     F .text.itcm	00000078 _calloc_r
00000cf4 g     F .text.itcm	00000218 SPIClass::begin()
20006d08 g     O .bss	00000004 getTimePtr
000053a0 g     F .text.itcm	00000284 FatFile::open(FatFile*, FatLfn_t*, int)
200021b3 g     O .data	00000001 yield_active_check_flags
00003388 g     F .text.itcm	00000042 ExFatFile::sync()
0000b198 g     F .text.itcm	00000002 __retarget_lock_acquire_recursive
20007c34 g     O .bss	00000001 usb_high_speed
000048fc g     F .text.itcm	00000190 FatFile::rename(FatFile*, char const*)
00006784 g     F .text.itcm	00000040 SdioCard::isBusy()
20002180 g     O .data	00000004 data
00007528 g     F .text.itcm	00000000 memset
00009424 g     F .text.itcm	00000010 main
20006b74 g     O .bss	00000004 __malloc_max_total_mem
00002ccc g     F .text.itcm	000000a8 ExFatPartition::bitmapFind(unsigned long, unsigned long)
0000b190 g     F .text.itcm	00000002 __retarget_lock_init_recursive
20205100 g     O .bss.dma	00000155 usb_descriptor_buffer
000061d2 g     F .text.itcm	00000076 SharedSpiCard::writeSector(unsigned long, unsigned char const*)
20006984 g     O .bss	00000004 I2S_32::block_left
000009d8 g     F .text.itcm	00000080 now()
000037ec g     F .text.itcm	0000020c ExFatFile::write(void const*, unsigned int)
00001c2c g     F .text.itcm	0000008e lbaToMbrChs(unsigned char*, unsigned long, unsigned long)
000046ec g     F .text.itcm	00000036 FatFile::dirEntry(DirFat_t*)
000014aa  w    F .text.itcm	0000000a SDFile::available()
0000ad48 g     F .text.itcm	00000008 __sclose
00009044 g     F .text.itcm	00000054 usb_init_serialnumber
60002404 g       .text.code	00000000 __init_array_end
0000de00 g     F .text.itcm	00000cec _dtoa_r
0000a1a0 g     F .text.itcm	00000560 _malloc_r
000059fe g     F .text.itcm	00000010 DedicatedSpiCard::readSector(unsigned long, unsigned char*)
200071fd g     O .bss	00000001 HardwareSerial::s_count_serials_with_serial_events
0000bdf4 g     F .text.itcm	0000001a __ascii_wctomb
20007c30 g     O .bss	00000001 usb_audio_sync_rshift
0000151a  w    F .text.itcm	0000000a SDFile::isOpen()
00005770 g     F .text.itcm	0000005c FsBaseFile::FsBaseFile(FsBaseFile const&)
20006998 g     O .bss	00000004 FatVolume::m_cwv
000092be  w    F .text.itcm	00000008 Print::print(char const*)
00000978 g     F .text.itcm	00000028 refreshCache(long long)
20000854  w    O .data	00000010 SPIClass::beginTransaction(SPISettings)::clk_sel
00000f0c g     F .text.itcm	00000056 SPIClass::transfer(void const*, void*, unsigned int)
000088cc g     F .text.itcm	0000004c micros
000032ac g     F .text.itcm	000000dc ExFatFile::syncDir()
00005d22 g     F .text.itcm	00000042 SharedSpiCard::readSDS(sds_t*)
0000b3a4 g     F .text.itcm	000000a0 _malloc_trim_r
000101d0 g     F .text.itcm	00000106 _wcsnrtombs_l
60002530 g     O .text.progmem	00000004 string0
00007ad4 g     F .text.itcm	0000018c usb_serial_write
60001808  w    F .text.code	00000002 startup_late_hook
000081a8 g     F .text.itcm	00000034 usb_start_sof_interrupts
00001450  w    F .text.itcm	00000050 FsBaseFile::available() const
00006248 g     F .text.itcm	0000001c DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)
0000930a  w    F .text.itcm	00000004 usb_serial_class::available()
600027e8 g     O .text.progmem	00000001 _serialEvent_default
000045ac g     F .text.itcm	00000088 FatFile::sync()
00003e1c g     F .text.itcm	000000a4 FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)
0000137c  w    F .text.itcm	0000003a SDClass::mkdir(char const*)
20000000 g     O .data	00000380 endpoint_queue_head
0000310e  w    F .text.itcm	00000026 ExFatPartition::cacheSync()
600024f4  w    O .text.progmem	00000024 usb_string_product_name
00008918 g     F .text.itcm	0000002a delay
2000713e g     O .bss	00000002 dma_channel_allocated_mask
00002524 g     F .text.itcm	00000020 ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)
000015f2  w    F .text.itcm	00000022 FsBaseFile::seekSet(unsigned long long)
00010510 g     F .fini	00000000 _fini
0000166e  w    F .text.itcm	00000014 FsBaseFile::sync()
00000aca g     F .text.itcm	00000026 TwoWire::write(unsigned char)
00005b76 g     F .text.itcm	00000030 SharedSpiCard::isBusy()
60001020 g     O .text.headers	0000000c BootData
20007114 g     O .bss	00000004 usb_audio_underrun_count
00002ca0 g     F .text.itcm	0000002c ExFatFile::openNext(ExFatFile*, int)
00009ec2 g     F .text.itcm	0000001a Print::printf(char const*, ...)
000007e4 g     F .text.itcm	00000040 AudioRecordQueue::clear()
00009e88 g     F .text.itcm	00000012 Print::print(long)
00004634 g     F .text.itcm	00000010 FatFile::close()
00008bf0 g     F .text.itcm	00000004 Panic_Temp_isr
0000197e  w    F .text.itcm	00000032 SdBase<FsVolume, FsFormatter>::begin(SdioConfig)
000002d0 g     F .text.itcm	000000c0 setAudioFrequency(int)
00001570  w    F .text.itcm	00000014 SDFile::~SDFile()
00004762 g     F .text.itcm	000000fa FatFile::mkdir(FatFile*, FatLfn_t*)
000102d8 g     F .text.itcm	00000024 _wcsnrtombs_r
000064a0  w    F .text.itcm	00000002 SdioCard::~SdioCard()
0000159c  w    F .text.itcm	0000000a StreamFile<FsBaseFile, unsigned long long>::peek()
000000c6  w    F .text.itcm	0000001c File::write(unsigned char)
0000b110 g     F .text.itcm	0000002c _write_r
00009cb4 g     F .text.itcm	000000b8 usb_audio_configure
000001ac g     F .text.itcm	0000008c I2S_32::update()
20005b08 g     O .bss	000004d0 SD
000065fc g     F .text.itcm	000000dc SdioCard::erase(unsigned long, unsigned long)
200071fe g     O .bss	00000001 I2S_32::update_responsibility
00009534 g     F .text.itcm	00000050 AudioStream::release(audio_block_struct*)
20003900 g     O .bss	00000020 sync_transfer
2000217c g     O .data	00000004 _impure_ptr
20000768  w    O .data	00000024 vtable for Stream
00002776 g     F .text.itcm	0000002a ExFatFile::peek()
0000da1c g     F .text.itcm	00000130 __sflush_r
200005c0  w    O .data	00000024 vtable for StreamFile<FsBaseFile, unsigned long long>
00009098  w    F .text.itcm	00000054 EventResponder::runFromYield()
200060c8 g     O .bss	00000140 Wire
0000177a  w    F .text.itcm	0000000a SDFile::write(void const*, unsigned int)
00009584 g     F .text.itcm	00000028 AudioStream::transmit(audio_block_struct*, unsigned char)
000059b8 g     F .text.itcm	00000028 FsVolume::open(char const*, int)
0000ac7c g     F .text.itcm	00000046 _fwalk_sglue
00006410 g     F .text.itcm	0000000c SdioCard::errorCode() const
000046de g     F .text.itcm	0000000e FatFile::open(FatVolume*, char const*, int)
00001758  w    F .text.itcm	0000000a StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)
600023f0 g       .text.code	00000000 __preinit_array_end
60001d98 g     F .text.code	000004b8 CrashReportClass::printTo(Print&) const
00002e14 g     F .text.itcm	00000034 ExFatPartition::dirCache(DirPos_t*, unsigned char)
00005b24 g     F .text.itcm	0000002a SharedSpiCard::spiStart()
0000b650 g     F .text.itcm	0000002a __ascii_mbtowc
000094a4 g     F .text.itcm	00000090 AudioStream::allocate()
00004f3c g     F .text.itcm	00000112 FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)
000081dc g     F .text.itcm	0000002c usb_stop_sof_interrupts
000092ce  w    F .text.itcm	00000008 Print::print(unsigned long, int)
00000ab2  w    F .text.itcm	00000016 TwoWire::peek()
00000ac8  w    F .text.itcm	00000002 TwoWire::flush()
000006e0 g     F .text.itcm	000000b0 setup
20000eac g     O .data	0000006c usb_descriptor_list
000065f8 g     F .text.itcm	00000004 SdioCard::status()
00004742 g     F .text.itcm	00000020 FatFile::getModifyDateTime(unsigned short*, unsigned short*)
000087dc g     F .text.itcm	00000040 usb_config_rx_iso
00001088  w    F .text.itcm	00000002 Print::flush()
00001508  w    F .text.itcm	00000012 FsBaseFile::isOpen() const
00000824 g     F .text.itcm	0000003a AudioRecordQueue::readBuffer()
20006d24 g     O .bss	00000014 patchCord1
000014b4  w    F .text.itcm	00000022 FsBaseFile::isDir() const
00001286  w    F .text.itcm	0000004a SDClass::rmdir(char const*)
00004170 g     F .text.itcm	00000186 FatFile::read(void*, unsigned int)
00004136 g     F .text.itcm	0000000c FatFile::openRoot(FatVolume*)
20006930 g     O .bss	00000004 ExFatVolume::m_cwv
20068000 g       .text.csf	00000000 _estack
000059e0 g     F .text.itcm	00000004 operator new(unsigned int, unsigned long*)
00009270 g     F .text.itcm	00000030 DMAChannel::release()
000000a0  w    F .text.itcm	00000026 File::read()
0000085e g     F .text.itcm	00000016 AudioRecordQueue::freeBuffer()
00007c78 g     F .text.itcm	0000004c usb_serial_write_buffer_free
00009608 g     F .text.itcm	000000b4 AudioConnection::connect()
20002170 g     O .data	0000000c __sglue
0000783c g     F .text.itcm	000000ec usb_serial_configure
00000af0 g     F .text.itcm	0000003c TwoWire::write(unsigned char const*, unsigned int)
200071fa g     O .bss	00000001 AudioInputUSB::receive_flag
00000242  w    F .text.itcm	00000014 File::~File()
00009eb4  w    F .text.itcm	0000000e _write
200026c0 g       .data	00000000 _edata
00002eee g     F .text.itcm	0000003a ExFatPartition::fatPut(unsigned long, unsigned long)
20007c0a g     O .bss	00000001 external_psram_size
000064a0  w    F .text.itcm	00000002 SdioCard::~SdioCard()
00002fe8 g     F .text.itcm	000000e0 ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)
00005a20  w    F .text.itcm	00000002 DedicatedSpiCard::~DedicatedSpiCard()
00005a0e g     F .text.itcm	00000012 DedicatedSpiCard::setDedicatedSpi(bool)
0000246a g     F .text.itcm	0000004e ExFatFile::hashName(ExName_t*)
20001bd8 g     O .data	0000000c AudioInputUSB::features
000040a8 g     F .text.itcm	00000070 FatFile::addDirCluster()
000100bc g     F .text.itcm	000000aa __fputwc
00009312  w    F .text.itcm	00000004 usb_serial_class::availableForWrite()
20002184 g     O .data	00000002 I2S_32::shift
00000c30 g     F .text.itcm	0000000c lpi2c1_isr()
0000a026 g     F .text.itcm	00000046 ultoa
0000108a  w    F .text.itcm	00000002 SDClass::~SDClass()
00000a58 g     F .text.itcm	00000014 second()
000057ee g     F .text.itcm	00000076 FsBaseFile::open(FsVolume*, char const*, int)
000019b0  w    F .text.itcm	00000056 SdBase<FsVolume, FsFormatter>::begin(SdSpiConfig)
0000ace8 g     F .text.itcm	0000003e __swrite
0000a01e g     F .text.itcm	00000004 operator new(unsigned int)
00009178 g     F .text.itcm	00000038 EventResponder::runFromInterrupt()
2000216c g     O .data	00000004 __malloc_trim_threshold
000096e4 g     F .text.itcm	00000094 AudioConnection::disconnect()
00009302  w    F .text.itcm	00000004 usb_serial_class::peek()
00006290  w    F .text.itcm	00000004 SdCardInterface::setDedicatedSpi(bool)
00005b4e g     F .text.itcm	00000028 SharedSpiCard::spiStop()
00005ed8 g     F .text.itcm	00000038 SharedSpiCard::cardCMD6(unsigned long, unsigned char*)
0000eb50 g     F .text.itcm	00000028 fiprintf
00009b70 g     F .text.itcm	000000e4 usb_audio_transmit_callback
0000ecf0 g     F .text.itcm	00000f8c _vfiprintf_r
00007320  w    F .text.itcm	00000104 SPIClass::beginTransaction(SPISettings)
0000bbcc g     F .text.itcm	00000154 __mdiff
00006460 g     F .text.itcm	00000010 SdioCard::readOCR(unsigned long*)
200004e0 g     O .data	00000070 SPIClass::spiclass_lpspi3_hardware
00002eae g     F .text.itcm	00000040 ExFatPartition::dirSeek(DirPos_t*, unsigned long)
00001030 g     F .text.itcm	00000010 _spi_dma_rxISR1()
20001a98 g     O .data	00000120 _impure_data
00002880 g     F .text.itcm	00000350 ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)
20007130 g     O .bss	00000002 AudioStream::cpu_cycles_total
0000ac70 g     F .text.itcm	0000000c __sfp_lock_release
000092ea  w    F .text.itcm	00000014 Print::println(unsigned long, int)
000068ac g     F .text.itcm	00000074 SdioCard::writeStop()
00005c10 g     F .text.itcm	00000008 SharedSpiCard::readData(unsigned char*)
000024f0 g     F .text.itcm	00000014 ExFatFile::close()
20000914 g     O .data	00000101 _ctype_
00008ae8  w    F .text.itcm	00000004 _read
600023f0 g       .text.code	00000000 __init_array_start
60002252 g     F .text.code	0000000e CrashReportClass::operator bool()
20001bbc g     O .data	00000004 F_BUS_ACTUAL
00008d8e g     F .text.itcm	00000036 quadtimer_init
20006cd0 g     O .bss	00000004 disk_count
00001e7a g     F .text.itcm	00000042 ExFatFormatter::writeUpcaseByte(unsigned char)
000012d0  w    F .text.itcm	00000060 SDClass::rename(char const*, char const*)
00006470 g     F .text.itcm	00000014 SdioCard::readSCR(scr_t*)
00009434  w    F .text.itcm	0000000c AudioStream::update_all()
000102fc g     F .text.itcm	000000d8 __smakebuf_r
00000000 g       .text.itcm	00000000 _stext
000091d4 g     F .text.itcm	0000009c DMAChannel::begin(bool)
2000219d g     O .data	00000004 IntervalTimer::nvic_priorites
00005a8e g     F .text.itcm	0000001e SharedSpiCard::end()
0000b240 g     F .text.itcm	000000dc strlen
00004142 g     F .text.itcm	0000002e FatFile::openCluster(FatFile*)
0000435a g     F .text.itcm	000000a0 FatFile::seekSet(unsigned long)
600024f4 g     O .text.progmem	00000024 usb_string_product_name_default
0000ad9c g     F .text.itcm	0000001c vdprintf
00006a14 g     F .text.itcm	0000005c SdioCard::sectorCount()
00006484 g     F .text.itcm	0000001c SdioCard::readSDS(sds_t*)
000044c4 g     F .text.itcm	0000009c FatFile::openNext(FatFile*, int)
20006950 g     O .bss	00000004 AudioOutputUSB::right_2nd
60001806  w    F .text.code	00000002 startup_middle_hook
200007e0 g     O .data	00000074 vtable for SdioCard
0000401a g     F .text.itcm	00000004 FatFile::getName(char*, unsigned int)
6000180a g     F .text.code	000000f2 configure_cache
00006288  w    F .text.itcm	00000004 SdCardInterface::hasDedicatedSpi()
00009324 g     F .text.itcm	00000100 breakTime(unsigned long, DateTimeFields&)
00005f80  w    F .text.itcm	00000008 SharedSpiCard::readCSD(csd_t*)
00001a06  w    F .text.itcm	00000038 SdBase<FsVolume, FsFormatter>::restart()
0000717c g     F .text.itcm	0000006c SdioCard::readStart(unsigned long)
0000881c g     F .text.itcm	00000040 usb_config_tx_iso
20007132 g     O .bss	00000002 AudioStream::cpu_cycles_total_max
00007424 g     F .text.itcm	0000000e SdSpiArduinoDriver::activate()
00003ec0  w    F .text.itcm	0000001a FatFile::cacheDir(unsigned short)
600023f0 g       .text.code	00000000 __preinit_array_start
000088ac g     F .text.itcm	0000001c usb_receive
200005e4  w    O .data	0000000c vtable for AudioStream
00002d74 g     F .text.itcm	000000a0 ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)
00001744  w    F .text.itcm	00000014 FsBaseFile::write(void const*, unsigned int)
0000b7c0 g     F .text.itcm	00000060 __lo0bits
00002e88 g     F .text.itcm	00000026 ExFatPartition::chainSize(unsigned long)
000043fa g     F .text.itcm	000000ca FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)
00016000 g       *ABS*	00000000 _flashimagelen
00004a8c g     F .text.itcm	000000aa FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
00005fee g     F .text.itcm	00000018 SharedSpiCard::syncDevice()
0000a174 g     F .text.itcm	0000000a __aeabi_atexit
00008b10 g     F .text.itcm	00000024 rtc_get
000031c8 g     F .text.itcm	0000008c ExFatFile::remove()
0000dba8 g     F .text.itcm	00000078 frexp
70000000 g       .bss.extram	00000000 _extram_start
000091b0 g     F .text.itcm	00000004 pendablesrvreq_isr
0000141e  w    F .text.itcm	00000032 SDClass::totalSize()
00009778 g     F .text.itcm	00000028 AudioConnection::~AudioConnection()
00000068  w    F .text.itcm	00000004 Print::availableForWrite()
20001bf4 g     O .data	0000016c __global_locale
00006ca4 g     F .text.itcm	00000424 SdioCard::begin(SdioConfig)
00000874 g     F .text.itcm	00000104 breakTime(long long, tmElements_t&)
00002504 g     F .text.itcm	00000020 ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)
00007928 g     F .text.itcm	000000d4 usb_serial_read
20006b44 g     O .bss	00000001 __lock___sfp_recursive_mutex
00009edc g     F .text.itcm	00000014 Print::printNumber(unsigned long, unsigned char, unsigned char)
0000879c g     F .text.itcm	00000040 usb_config_tx
00008aec  w    F .text.itcm	00000006 _close
00004d44 g     F .text.itcm	0000006c FatPartition::fatGet(unsigned long, unsigned long*)
0000a190 g     F .text.itcm	00000010 free
000023b4 g     F .text.itcm	0000004e ExFatFile::cmpName(DirName_t const*, ExName_t*)
0000b6dc g     F .text.itcm	000000a4 __multadd
0000b6c8 g     F .text.itcm	00000012 _Bfree
000013e8  w    F .text.itcm	00000018 SDFile::size()
00003f02 g     F .text.itcm	00000080 FatFile::getSFN(char*, unsigned int)
0000154c  w    F .text.itcm	00000024 SDFile::~SDFile()
20002186  w    O .data	00000016 usb_string_serial_number
000071e8 g     F .text.itcm	000000a8 SdioCard::readSector(unsigned long, unsigned char*)
00006444 g     F .text.itcm	0000001c SdioCard::readCSD(csd_t*)



Disassembly of section .text.code:

60001400 <memory_copy>:
}

__attribute__((section(".startup"), optimize("O1")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001400:	cmp	r0, r1
60001402:	beq.n	60001414 <memory_copy+0x14>
	while (dest < dest_end) {
60001404:	cmp	r0, r2
60001406:	bcs.n	60001414 <memory_copy+0x14>
		*dest++ = *src++;
60001408:	ldr.w	r3, [r1], #4
6000140c:	str.w	r3, [r0], #4
	while (dest < dest_end) {
60001410:	cmp	r2, r0
60001412:	bhi.n	60001408 <memory_copy+0x8>
	}
}
60001414:	bx	lr

60001416 <memory_clear>:

__attribute__((section(".startup"), optimize("O1")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
60001416:	cmp	r0, r1
60001418:	bcs.n	60001424 <memory_clear+0xe>
		*dest++ = 0;
6000141a:	movs	r3, #0
6000141c:	str.w	r3, [r0], #4
	while (dest < dest_end) {
60001420:	cmp	r1, r0
60001422:	bhi.n	6000141c <memory_clear+0x6>
	}
}
60001424:	bx	lr

60001426 <ResetHandler>:
{
60001426:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000142a:	ldr	r2, [pc, #404]	; (600015c0 <ResetHandler+0x19a>)
6000142c:	ldr	r3, [pc, #404]	; (600015c4 <ResetHandler+0x19e>)
6000142e:	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001430:	ldr	r2, [pc, #404]	; (600015c8 <ResetHandler+0x1a2>)
60001432:	str	r2, [r3, #64]	; 0x40
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001434:	mov.w	r2, #11141120	; 0xaa0000
60001438:	str	r2, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
6000143a:	ldr	r3, [pc, #400]	; (600015cc <ResetHandler+0x1a6>)
6000143c:	mov	sp, r3
	__asm__ volatile("dsb":::"memory");
6000143e:	dsb	sy
	__asm__ volatile("isb":::"memory");
60001442:	isb	sy
	startup_early_hook(); // must be in FLASHMEM, as ITCM is not yet initialized!
60001446:	bl	60001804 <startup_default_early_hook>
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
6000144a:	ldr	r3, [pc, #388]	; (600015d0 <ResetHandler+0x1aa>)
6000144c:	movs	r2, #8
	memory_copy(&_stext, &_stextload, &_etext);
6000144e:	ldr	r1, [pc, #388]	; (600015d4 <ResetHandler+0x1ae>)
60001450:	ldr	r0, [pc, #388]	; (600015d8 <ResetHandler+0x1b2>)
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001452:	str.w	r2, [r3, #340]	; 0x154
	memory_copy(&_stext, &_stextload, &_etext);
60001456:	ldr	r2, [pc, #388]	; (600015dc <ResetHandler+0x1b6>)
60001458:	bl	60001400 <memory_copy>
	memory_copy(&_sdata, &_sdataload, &_edata);
6000145c:	ldr	r2, [pc, #384]	; (600015e0 <ResetHandler+0x1ba>)
6000145e:	ldr	r1, [pc, #388]	; (600015e4 <ResetHandler+0x1be>)
60001460:	ldr	r0, [pc, #388]	; (600015e8 <ResetHandler+0x1c2>)
60001462:	bl	60001400 <memory_copy>
	memory_clear(&_sbss, &_ebss);
60001466:	ldr	r1, [pc, #388]	; (600015ec <ResetHandler+0x1c6>)
60001468:	ldr	r0, [pc, #388]	; (600015f0 <ResetHandler+0x1ca>)
6000146a:	bl	60001416 <memory_clear>
	SCB_CPACR = 0x00F00000;
6000146e:	mov.w	r3, #3758153728	; 0xe000e000
60001472:	mov.w	r2, #15728640	; 0xf00000
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
60001476:	ldr	r5, [pc, #380]	; (600015f4 <ResetHandler+0x1ce>)
	SCB_CPACR = 0x00F00000;
60001478:	str.w	r2, [r3, #3464]	; 0xd88
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
6000147c:	movs	r3, #0
6000147e:	ldr	r2, [pc, #376]	; (600015f8 <ResetHandler+0x1d2>)
60001480:	str.w	r2, [r5, r3, lsl #2]
60001484:	adds	r3, #1
60001486:	cmp	r3, #176	; 0xb0
60001488:	bne.n	60001480 <ResetHandler+0x5a>
6000148a:	ldr	r3, [pc, #368]	; (600015fc <ResetHandler+0x1d6>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
6000148c:	movs	r1, #128	; 0x80
6000148e:	ldr	r2, [pc, #368]	; (60001600 <ResetHandler+0x1da>)
60001490:	strb.w	r1, [r3], #1
60001494:	cmp	r3, r2
60001496:	bne.n	60001490 <ResetHandler+0x6a>
	SCB_VTOR = (uint32_t)_VectorsRam;
60001498:	mov.w	r0, #3758153728	; 0xe000e000
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
6000149c:	ldr	r4, [pc, #304]	; (600015d0 <ResetHandler+0x1aa>)
6000149e:	mov.w	r7, #2155905152	; 0x80808080
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014a2:	ldr.w	r9, [pc, #392]	; 6000162c <ResetHandler+0x206>
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014a6:	ldr.w	r8, [pc, #392]	; 60001630 <ResetHandler+0x20a>
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014aa:	mov.w	r2, #4294967295
	SCB_VTOR = (uint32_t)_VectorsRam;
600014ae:	str.w	r5, [r0, #3336]	; 0xd08
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014b2:	str.w	r7, [r4, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014b6:	str.w	r9, [r4, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
600014ba:	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014be:	str.w	r8, [r4, #240]	; 0xf0
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014c2:	ldr.w	r3, [r0, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014c6:	ldr	r6, [pc, #316]	; (60001604 <ResetHandler+0x1de>)
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014c8:	orr.w	r3, r3, #458752	; 0x70000
600014cc:	str.w	r3, [r0, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014d0:	ldr	r3, [r6, #28]
600014d2:	bic.w	r3, r3, #127	; 0x7f
600014d6:	orr.w	r3, r3, #64	; 0x40
600014da:	str	r3, [r6, #28]
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
600014dc:	ldr	r3, [r6, #36]	; 0x24
600014de:	bic.w	r3, r3, #127	; 0x7f
600014e2:	orr.w	r3, r3, #64	; 0x40
600014e6:	str	r3, [r6, #36]	; 0x24
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014e8:	ldr	r3, [pc, #216]	; (600015c4 <ResetHandler+0x19e>)
600014ea:	str	r2, [r3, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
600014ec:	str	r2, [r3, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
600014ee:	str	r2, [r3, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
600014f0:	str	r2, [r3, #116]	; 0x74
	configure_cache();
600014f2:	bl	6000180a <configure_cache>
	_VectorsRam[14] = pendablesrvreq_isr;
600014f6:	ldr	r3, [pc, #272]	; (60001608 <ResetHandler+0x1e2>)
600014f8:	str	r3, [r5, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
600014fa:	ldr	r3, [pc, #272]	; (6000160c <ResetHandler+0x1e6>)
600014fc:	str	r3, [r5, #60]	; 0x3c
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
600014fe:	movs	r3, #99	; 0x63
	SYST_CVR = 0;
60001500:	movs	r5, #0
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001502:	str	r3, [r0, #20]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001504:	movs	r3, #3
	SYST_CVR = 0;
60001506:	str	r5, [r0, #24]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001508:	str	r3, [r0, #16]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
6000150a:	ldr	r3, [pc, #260]	; (60001610 <ResetHandler+0x1ea>)
6000150c:	str.w	r3, [r0, #3360]	; 0xd20
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001510:	ldr.w	r3, [r0, #3580]	; 0xdfc
60001514:	orr.w	r3, r3, #16777216	; 0x1000000
60001518:	str.w	r3, [r0, #3580]	; 0xdfc
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000151c:	ldr	r3, [pc, #244]	; (60001614 <ResetHandler+0x1ee>)
6000151e:	ldr	r2, [r3, #0]
60001520:	orr.w	r2, r2, #1
60001524:	str	r2, [r3, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001526:	ldr	r2, [r3, #4]
60001528:	ldr	r3, [pc, #236]	; (60001618 <ResetHandler+0x1f2>)
6000152a:	str	r2, [r3, #0]
	usb_pll_start();	
6000152c:	bl	60001b70 <usb_pll_start>
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001530:	str.w	r7, [r4, #260]	; 0x104
	set_arm_clock(F_CPU);
60001534:	ldr	r0, [pc, #228]	; (6000161c <ResetHandler+0x1f6>)
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001536:	str.w	r9, [r4, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000153a:	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000153e:	str.w	r8, [r4, #240]	; 0xf0
	set_arm_clock(F_CPU);
60001542:	bl	600023b0 <__set_arm_clock_veneer>
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001546:	ldr	r3, [r6, #108]	; 0x6c
60001548:	orr.w	r3, r3, #12288	; 0x3000
6000154c:	str	r3, [r6, #108]	; 0x6c
	PIT_MCR = 0;
6000154e:	ldr	r3, [pc, #208]	; (60001620 <ResetHandler+0x1fa>)
60001550:	str	r5, [r3, #0]
	PIT_TCTRL0 = 0;
60001552:	str.w	r5, [r3, #264]	; 0x108
	PIT_TCTRL1 = 0;
60001556:	str.w	r5, [r3, #280]	; 0x118
	PIT_TCTRL2 = 0;
6000155a:	str.w	r5, [r3, #296]	; 0x128
	PIT_TCTRL3 = 0;
6000155e:	str.w	r5, [r3, #312]	; 0x138
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
60001562:	add.w	r3, r3, #327680	; 0x50000
60001566:	ldr	r2, [r3, #56]	; 0x38
60001568:	lsls	r2, r2, #31
6000156a:	bmi.n	6000157e <ResetHandler+0x158>
		SNVS_LPSRTCLR = 1546300800u << 15;
6000156c:	ldr	r2, [pc, #180]	; (60001624 <ResetHandler+0x1fe>)
6000156e:	str	r2, [r3, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
60001570:	movw	r2, #11797	; 0x2e15
60001574:	str	r2, [r3, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
60001576:	ldr	r2, [r3, #56]	; 0x38
60001578:	orr.w	r2, r2, #1
6000157c:	str	r2, [r3, #56]	; 0x38
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
6000157e:	ldr	r2, [r3, #8]
// Returns the number of milliseconds since your program started running.
// This 32 bit number will roll back to zero after about 49.7 days.  For a
// simpler way to build delays or timeouts, consider using elapsedMillis.
static inline uint32_t millis(void)
{
	return systick_millis_count;
60001580:	ldr	r4, [pc, #164]	; (60001628 <ResetHandler+0x202>)
60001582:	orr.w	r2, r2, #65537	; 0x10001
60001586:	str	r2, [r3, #8]
	configure_external_ram();
60001588:	bl	600018fc <configure_external_ram>
	analog_init();
6000158c:	bl	600022f8 <analog_init>
	pwm_init();
60001590:	bl	600023b8 <__pwm_init_veneer>
	tempmon_init();
60001594:	bl	60001bcc <tempmon_init>
	startup_middle_hook();
60001598:	bl	60001806 <startup_default_middle_hook>
6000159c:	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
6000159e:	cmp	r3, #19
600015a0:	bls.n	6000159c <ResetHandler+0x176>
	usb_init();
600015a2:	bl	6000167c <usb_init>
600015a6:	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_AFTER + TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015a8:	cmp.w	r3, #300	; 0x12c
600015ac:	bcc.n	600015a6 <ResetHandler+0x180>
	startup_late_hook();
600015ae:	bl	60001808 <startup_default_late_hook>
	__libc_init_array();
600015b2:	bl	60002370 <____libc_init_array_veneer>
	main();
600015b6:	bl	600023e8 <__main_veneer>
	while (1) asm("WFI");
600015ba:	wfi
600015bc:	b.n	600015ba <ResetHandler+0x194>
600015be:	nop
600015c0:	.word	0xaaaaaabf
600015c4:	.word	0x400ac000
600015c8:	.word	0x00200007
600015cc:	.word	0x20068000
600015d0:	.word	0x400d8000
600015d4:	.word	0x600027ec
600015d8:	.word	0x00000000
600015dc:	.word	0x00010518
600015e0:	.word	0x200026c0
600015e4:	.word	0x60012d08
600015e8:	.word	0x20000000
600015ec:	.word	0x20007c60
600015f0:	.word	0x200026c0
600015f4:	.word	0x20002400
600015f8:	.word	0x00008945
600015fc:	.word	0xe000e400
60001600:	.word	0xe000e4a0
60001604:	.word	0x400fc000
60001608:	.word	0x000091b1
6000160c:	.word	0x000091b5
60001610:	.word	0x20200000
60001614:	.word	0xe0001000
60001618:	.word	0x200070e4
6000161c:	.word	0x016e3600
60001620:	.word	0x40084000
60001624:	.word	0x56c00000
60001628:	.word	0x200070e8
6000162c:	.word	0x2018101b
60001630:	.word	0x13110d0c

60001634 <set_audioClock(int, long, unsigned long)>:
  FLASHMEM
  void set_audioClock(int nfact, int32_t nmult, uint32_t ndiv) // sets PLL4
  {
    CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
            | CCM_ANALOG_PLL_AUDIO_POST_DIV_SELECT(2) // 2: 1/4; 1: 1/2; 0: 1/1
            | CCM_ANALOG_PLL_AUDIO_DIV_SELECT(nfact);
60001634:	and.w	r0, r0, #63	; 0x3f
    CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
60001638:	ldr	r3, [pc, #60]	; (60001678 <set_audioClock(int, long, unsigned long)+0x44>)

    CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
    CCM_ANALOG_PLL_AUDIO_DENOM = ndiv & CCM_ANALOG_PLL_AUDIO_DENOM_MASK;
6000163a:	bic.w	r2, r2, #3758096384	; 0xe0000000
    CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
6000163e:	bic.w	r1, r1, #3758096384	; 0xe0000000
            | CCM_ANALOG_PLL_AUDIO_DIV_SELECT(nfact);
60001642:	orr.w	r0, r0, #1122304	; 0x112000
    CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
60001646:	str	r0, [r3, #112]	; 0x70
    CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
60001648:	str.w	r1, [r3, #128]	; 0x80
    CCM_ANALOG_PLL_AUDIO_DENOM = ndiv & CCM_ANALOG_PLL_AUDIO_DENOM_MASK;
6000164c:	str.w	r2, [r3, #144]	; 0x90
    
    CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_POWERDOWN;//Switch on PLL
60001650:	ldr	r2, [r3, #112]	; 0x70
60001652:	bic.w	r2, r2, #4096	; 0x1000
60001656:	str	r2, [r3, #112]	; 0x70
    while (!(CCM_ANALOG_PLL_AUDIO & CCM_ANALOG_PLL_AUDIO_LOCK)) {}; //Wait for pll-lock
60001658:	ldr	r2, [r3, #112]	; 0x70
6000165a:	cmp	r2, #0
6000165c:	bge.n	60001658 <set_audioClock(int, long, unsigned long)+0x24>
    
    const int div_post_pll = 1; // other values: 2,4
    CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
6000165e:	ldr.w	r2, [r3, #368]	; 0x170
60001662:	bic.w	r2, r2, #8388608	; 0x800000
60001666:	bic.w	r2, r2, #32768	; 0x8000
6000166a:	str.w	r2, [r3, #368]	; 0x170
    if(div_post_pll>1) CCM_ANALOG_MISC2 |= CCM_ANALOG_MISC2_DIV_LSB;
    if(div_post_pll>3) CCM_ANALOG_MISC2 |= CCM_ANALOG_MISC2_DIV_MSB;
    
    CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_BYPASS;//Disable Bypass
6000166e:	ldr	r2, [r3, #112]	; 0x70
60001670:	bic.w	r2, r2, #65536	; 0x10000
60001674:	str	r2, [r3, #112]	; 0x70
  }
60001676:	bx	lr
60001678:	.word	0x400d8000

6000167c <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
6000167c:	ldr	r3, [pc, #192]	; (60001740 <usb_init+0xc4>)
6000167e:	movw	r2, #3937	; 0xf61
{
60001682:	push	{r4, lr}
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001684:	str.w	r2, [r3, #288]	; 0x120
		| PMU_REG_3P0_ENABLE_LINREG;

	usb_init_serialnumber();
60001688:	bl	600023a8 <__usb_init_serialnumber_veneer>

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
6000168c:	ldr	r2, [pc, #180]	; (60001744 <usb_init+0xc8>)
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
6000168e:	ldr	r1, [pc, #184]	; (60001748 <usb_init+0xcc>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001690:	ldr.w	r3, [r2, #128]	; 0x80
60001694:	orr.w	r3, r3, #3
60001698:	str.w	r3, [r2, #128]	; 0x80
	USB1_BURSTSIZE = 0x0404;
6000169c:	movw	r2, #1028	; 0x404
600016a0:	ldr	r3, [pc, #168]	; (6000174c <usb_init+0xd0>)
600016a2:	str.w	r2, [r3, #352]	; 0x160
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600016a6:	ldr	r2, [pc, #168]	; (60001750 <usb_init+0xd4>)
600016a8:	ldr	r0, [r2, #0]
600016aa:	tst	r0, r1
600016ac:	bne.n	600016b6 <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
600016ae:	ldr.w	r1, [r3, #424]	; 0x1a8
600016b2:	lsls	r4, r1, #30
600016b4:	beq.n	600016ec <usb_init+0x70>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
600016b6:	mov.w	r1, #2147483648	; 0x80000000
600016ba:	str	r1, [r2, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600016bc:	ldr.w	r2, [r3, #320]	; 0x140
600016c0:	orr.w	r2, r2, #2
600016c4:	str.w	r2, [r3, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
600016c8:	ldr	r2, [pc, #128]	; (6000174c <usb_init+0xd0>)
600016ca:	ldr.w	r3, [r2, #320]	; 0x140
600016ce:	lsls	r0, r3, #30
600016d0:	bmi.n	600016ca <usb_init+0x4e>
		NVIC_CLEAR_PENDING(IRQ_USB1);
600016d2:	mov.w	r3, #3758153728	; 0xe000e000
600016d6:	mov.w	r2, #131072	; 0x20000
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
600016da:	movs	r0, #25
		NVIC_CLEAR_PENDING(IRQ_USB1);
600016dc:	str.w	r2, [r3, #652]	; 0x28c
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
600016e0:	mov.w	r2, #2147483648	; 0x80000000
600016e4:	ldr	r3, [pc, #104]	; (60001750 <usb_init+0xd4>)
600016e6:	str	r2, [r3, #56]	; 0x38
		delay(25);
600016e8:	bl	60002350 <__delay_veneer>
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
600016ec:	ldr	r3, [pc, #96]	; (60001750 <usb_init+0xd4>)
	USBPHY1_PWD = 0;
600016ee:	movs	r1, #0
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
600016f0:	mov.w	r2, #1073741824	; 0x40000000
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600016f4:	ldr	r4, [pc, #84]	; (6000174c <usb_init+0xd0>)
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
600016f6:	str	r2, [r3, #56]	; 0x38
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600016f8:	mov.w	r2, #896	; 0x380
	USBPHY1_PWD = 0;
600016fc:	str	r1, [r3, #0]
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600016fe:	movs	r3, #10
60001700:	str.w	r3, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001704:	ldr	r3, [pc, #76]	; (60001754 <usb_init+0xd8>)
60001706:	mov	r0, r3
60001708:	bl	60002368 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
6000170c:	mov.w	r2, #4227072	; 0x408000
	endpoint_queue_head[1].config = (64 << 16);
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001710:	movw	r3, #323	; 0x143
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001714:	str	r2, [r0, #0]
	endpoint_queue_head[1].config = (64 << 16);
60001716:	mov.w	r2, #4194304	; 0x400000
6000171a:	str	r2, [r0, #64]	; 0x40
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
6000171c:	str.w	r0, [r4, #344]	; 0x158
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* volatile _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
60001720:	ldr	r2, [pc, #52]	; (60001758 <usb_init+0xdc>)
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001722:	str.w	r3, [r4, #328]	; 0x148
60001726:	ldr	r3, [pc, #52]	; (6000175c <usb_init+0xe0>)
60001728:	str.w	r2, [r3, #516]	; 0x204
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &usb_isr;
	attachInterruptVector(IRQ_USB1, &usb_isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
6000172c:	mov.w	r3, #3758153728	; 0xe000e000
60001730:	mov.w	r2, #131072	; 0x20000
60001734:	str.w	r2, [r3, #268]	; 0x10c
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001738:	movs	r3, #1
6000173a:	str.w	r3, [r4, #320]	; 0x140
	//transfer_log_head = 0;
	//transfer_log_count = 0;
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}
6000173e:	pop	{r4, pc}
60001740:	.word	0x400d8000
60001744:	.word	0x400fc000
60001748:	.word	0x001e1c00
6000174c:	.word	0x402e0000
60001750:	.word	0x400d9000
60001754:	.word	0x20000000
60001758:	.word	0x00008209
6000175c:	.word	0x20002400

60001760 <_reboot_Teensyduino_>:


FLASHMEM void _reboot_Teensyduino_(void)
{
60001760:	push	{r3, lr}
	if (!(HW_OCOTP_CFG5 & 0x02)) {
60001762:	ldr	r3, [pc, #60]	; (600017a0 <_reboot_Teensyduino_+0x40>)
60001764:	ldr	r3, [r3, #96]	; 0x60
60001766:	lsls	r3, r3, #30
60001768:	bmi.n	6000176c <_reboot_Teensyduino_+0xc>
		asm("bkpt #251"); // run bootloader
6000176a:	bkpt	0x00fb
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
6000176c:	cpsid	i
		USB1_USBCMD = 0;
6000176e:	ldr	r3, [pc, #52]	; (600017a4 <_reboot_Teensyduino_+0x44>)
60001770:	movs	r2, #0
60001772:	str.w	r2, [r3, #320]	; 0x140
		IOMUXC_GPR_GPR16 = 0x00200003;
60001776:	sub.w	r3, r3, #2310144	; 0x234000
6000177a:	ldr	r2, [pc, #44]	; (600017a8 <_reboot_Teensyduino_+0x48>)
6000177c:	str	r2, [r3, #64]	; 0x40
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
6000177e:	sub.w	r3, r3, #534773760	; 0x1fe00000
60001782:	sub.w	r3, r3, #700416	; 0xab000
60001786:	mov	sp, r3
		__asm__ volatile("dsb":::"memory");
60001788:	dsb	sy
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
6000178c:	ldr	r0, [pc, #28]	; (600017ac <_reboot_Teensyduino_+0x4c>)
6000178e:	ldr	r3, [pc, #32]	; (600017b0 <_reboot_Teensyduino_+0x50>)
60001790:	str	r3, [r0, #0]
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001792:	mov.w	r3, #2097152	; 0x200000
60001796:	ldr	r3, [r3, #28]
60001798:	ldr	r3, [r3, #8]
6000179a:	blx	r3
6000179c:	b.n	6000176c <_reboot_Teensyduino_+0xc>
6000179e:	nop
600017a0:	.word	0x401f4400
600017a4:	.word	0x402e0000
600017a8:	.word	0x00200003
600017ac:	.word	0x20208000
600017b0:	.word	0xeb120000

600017b4 <flexspi2_command>:
	FLEXSPI2_IPCR0 = addr;
600017b4:	ldr	r3, [pc, #28]	; (600017d4 <flexspi2_command+0x20>)
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600017b6:	lsls	r0, r0, #16
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600017b8:	movs	r2, #1
	FLEXSPI2_IPCR0 = addr;
600017ba:	str.w	r1, [r3, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600017be:	str.w	r0, [r3, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600017c2:	str.w	r2, [r3, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600017c6:	ldr	r2, [r3, #20]
600017c8:	lsls	r2, r2, #31
600017ca:	bpl.n	600017c6 <flexspi2_command+0x12>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600017cc:	movs	r2, #1
600017ce:	str	r2, [r3, #20]
}
600017d0:	bx	lr
600017d2:	nop
600017d4:	.word	0x402a4000

600017d8 <flexspi2_psram_id>:
	FLEXSPI2_IPCR0 = addr;
600017d8:	ldr	r3, [pc, #32]	; (600017fc <flexspi2_psram_id+0x24>)
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
600017da:	ldr	r2, [pc, #36]	; (60001800 <flexspi2_psram_id+0x28>)
	FLEXSPI2_IPCR0 = addr;
600017dc:	str.w	r0, [r3, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
600017e0:	str.w	r2, [r3, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600017e4:	movs	r2, #1
600017e6:	str.w	r2, [r3, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600017ea:	ldr	r2, [r3, #20]
600017ec:	lsls	r2, r2, #31
600017ee:	bpl.n	600017ea <flexspi2_psram_id+0x12>
	uint32_t id = FLEXSPI2_RFDR0;
600017f0:	ldr.w	r0, [r3, #256]	; 0x100
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
600017f4:	movs	r2, #33	; 0x21
}
600017f6:	uxth	r0, r0
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
600017f8:	str	r2, [r3, #20]
}
600017fa:	bx	lr
600017fc:	.word	0x402a4000
60001800:	.word	0x00030004

60001804 <startup_default_early_hook>:
FLASHMEM void startup_default_early_hook(void) {}
60001804:	bx	lr

60001806 <startup_default_middle_hook>:
60001806:	bx	lr

60001808 <startup_default_late_hook>:
60001808:	bx	lr

6000180a <configure_cache>:
	SCB_MPU_CTRL = 0; // turn off MPU
6000180a:	mov.w	r3, #3758153728	; 0xe000e000
6000180e:	movs	r1, #0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001810:	movs	r2, #16
	SCB_MPU_CTRL = 0; // turn off MPU
60001812:	str.w	r1, [r3, #3476]	; 0xd94
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001816:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
6000181a:	ldr	r2, [pc, #160]	; (600018bc <configure_cache+0xb2>)
6000181c:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
60001820:	movs	r2, #17
60001822:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
60001826:	ldr	r2, [pc, #152]	; (600018c0 <configure_cache+0xb6>)
60001828:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
6000182c:	movs	r2, #18
6000182e:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
60001832:	ldr	r2, [pc, #144]	; (600018c4 <configure_cache+0xba>)
60001834:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
60001838:	ldr	r2, [pc, #140]	; (600018c8 <configure_cache+0xbe>)
6000183a:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
6000183e:	ldr	r2, [pc, #140]	; (600018cc <configure_cache+0xc2>)
60001840:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
60001844:	ldr	r2, [pc, #136]	; (600018d0 <configure_cache+0xc6>)
60001846:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
6000184a:	ldr	r2, [pc, #136]	; (600018d4 <configure_cache+0xca>)
6000184c:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001850:	ldr	r2, [pc, #132]	; (600018d8 <configure_cache+0xce>)
60001852:	orr.w	r2, r2, #21
60001856:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
6000185a:	ldr	r2, [pc, #128]	; (600018dc <configure_cache+0xd2>)
6000185c:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
60001860:	add.w	r2, r2, #270532608	; 0x10200000
60001864:	adds	r2, #13
60001866:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
6000186a:	ldr	r2, [pc, #116]	; (600018e0 <configure_cache+0xd6>)
6000186c:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
60001870:	ldr	r2, [pc, #112]	; (600018e4 <configure_cache+0xda>)
60001872:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001876:	ldr	r2, [pc, #112]	; (600018e8 <configure_cache+0xde>)
60001878:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
6000187c:	ldr	r2, [pc, #108]	; (600018ec <configure_cache+0xe2>)
6000187e:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001882:	ldr	r2, [pc, #108]	; (600018f0 <configure_cache+0xe6>)
60001884:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001888:	ldr	r2, [pc, #104]	; (600018f4 <configure_cache+0xea>)
6000188a:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
6000188e:	ldr	r2, [pc, #104]	; (600018f8 <configure_cache+0xee>)
60001890:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
60001894:	movs	r2, #1
60001896:	str.w	r2, [r3, #3476]	; 0xd94
	asm("dsb");
6000189a:	dsb	sy
	asm("isb");
6000189e:	isb	sy
	SCB_CACHE_ICIALLU = 0;
600018a2:	str.w	r1, [r3, #3920]	; 0xf50
	asm("dsb");
600018a6:	dsb	sy
	asm("isb");
600018aa:	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
600018ae:	ldr.w	r2, [r3, #3348]	; 0xd14
600018b2:	orr.w	r2, r2, #196608	; 0x30000
600018b6:	str.w	r2, [r3, #3348]	; 0xd14
}
600018ba:	bx	lr
600018bc:	.word	0x1000003f
600018c0:	.word	0x03080025
600018c4:	.word	0x00100009
600018c8:	.word	0x00200013
600018cc:	.word	0x07020021
600018d0:	.word	0x20000014
600018d4:	.word	0x13080025
600018d8:	.word	0x20007c60
600018dc:	.word	0x10000009
600018e0:	.word	0x130b0027
600018e4:	.word	0x40000017
600018e8:	.word	0x13100033
600018ec:	.word	0x60000018
600018f0:	.word	0x070b002f
600018f4:	.word	0x70000019
600018f8:	.word	0x130b002f

600018fc <configure_external_ram>:
{
600018fc:	push	{r0, r1, r4, r5, r6, lr}
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600018fe:	ldr	r3, [pc, #536]	; (60001b18 <configure_external_ram+0x21c>)
60001900:	ldr	r2, [pc, #536]	; (60001b1c <configure_external_ram+0x220>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
60001902:	ldr	r1, [pc, #540]	; (60001b20 <configure_external_ram+0x224>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001904:	str.w	r2, [r3, #604]	; 0x25c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
60001908:	str.w	r1, [r3, #608]	; 0x260
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
6000190c:	str.w	r2, [r3, #612]	; 0x264
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
60001910:	sub.w	r2, r2, #45056	; 0xb000
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001914:	ldr	r4, [pc, #524]	; (60001b24 <configure_external_ram+0x228>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
60001916:	str.w	r2, [r3, #616]	; 0x268
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
6000191a:	add.w	r2, r2, #28672	; 0x7000
6000191e:	str.w	r2, [r3, #620]	; 0x26c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001922:	str.w	r2, [r3, #624]	; 0x270
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001926:	str.w	r2, [r3, #628]	; 0x274
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
6000192a:	str.w	r2, [r3, #632]	; 0x278
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
6000192e:	movs	r2, #24
60001930:	str	r2, [r3, #108]	; 0x6c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_23 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DQS
60001932:	str	r2, [r3, #112]	; 0x70
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_24 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS0_B (RAM)
60001934:	str	r2, [r3, #116]	; 0x74
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_25 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SCLK
60001936:	str	r2, [r3, #120]	; 0x78
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
60001938:	str	r2, [r3, #124]	; 0x7c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
6000193a:	str.w	r2, [r3, #128]	; 0x80
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
6000193e:	str.w	r2, [r3, #132]	; 0x84
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3
60001942:	str.w	r2, [r3, #136]	; 0x88
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
60001946:	movs	r2, #1
60001948:	str.w	r2, [r3, #1836]	; 0x72c
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT = 1; // GPIO_EMC_26 for Mode: ALT8
6000194c:	str.w	r2, [r3, #1840]	; 0x730
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT = 1; // GPIO_EMC_27 for Mode: ALT8
60001950:	str.w	r2, [r3, #1844]	; 0x734
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
60001954:	str.w	r2, [r3, #1848]	; 0x738
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
60001958:	str.w	r2, [r3, #1852]	; 0x73c
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8
6000195c:	str.w	r2, [r3, #1872]	; 0x750
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001960:	ldr	r2, [pc, #452]	; (60001b28 <configure_external_ram+0x22c>)
60001962:	ldr	r3, [r2, #24]
60001964:	bic.w	r3, r3, #3758096384	; 0xe0000000
60001968:	bic.w	r3, r3, #768	; 0x300
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
6000196c:	orr.w	r3, r3, #2684354560	; 0xa0000000
60001970:	orr.w	r3, r3, #768	; 0x300
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001974:	str	r3, [r2, #24]
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);
60001976:	ldr.w	r3, [r2, #132]	; 0x84
6000197a:	orr.w	r3, r3, #12
6000197e:	str.w	r3, [r2, #132]	; 0x84
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
60001982:	ldr	r3, [pc, #424]	; (60001b2c <configure_external_ram+0x230>)
60001984:	ldr	r2, [r3, #0]
60001986:	orr.w	r2, r2, #2
6000198a:	str	r2, [r3, #0]
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
6000198c:	ldr	r1, [r3, #0]
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
6000198e:	ldr	r2, [pc, #416]	; (60001b30 <configure_external_ram+0x234>)
60001990:	bic.w	r1, r1, #30848	; 0x7880
60001994:	bic.w	r1, r1, #115	; 0x73
60001998:	lsls	r1, r1, #16
6000199a:	lsrs	r1, r1, #16
6000199c:	orrs	r2, r1
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
6000199e:	ldr	r1, [pc, #404]	; (60001b34 <configure_external_ram+0x238>)
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
600019a0:	str	r2, [r3, #0]
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
600019a2:	mov.w	r2, #4294967295
600019a6:	str	r2, [r3, #4]
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
600019a8:	add.w	r2, r2, #16187392	; 0xf70000
600019ac:	ldr	r0, [r1, #8]
600019ae:	add.w	r2, r2, #14336	; 0x3800
600019b2:	ands	r2, r0
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
600019b4:	ldr	r0, [pc, #384]	; (60001b38 <configure_external_ram+0x23c>)
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
600019b6:	orr.w	r2, r2, #536870912	; 0x20000000
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
600019ba:	str	r2, [r3, #8]
	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
600019bc:	ldr	r2, [r3, #12]
600019be:	bic.w	r2, r2, #120	; 0x78
600019c2:	str	r2, [r3, #12]
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
600019c4:	ldr	r2, [r3, #32]
600019c6:	ands	r2, r4
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
600019c8:	orrs	r2, r0
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
600019ca:	str	r2, [r3, #32]
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
600019cc:	ldr	r2, [r3, #32]
600019ce:	ands	r2, r4
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
600019d0:	mov.w	r4, #8192	; 0x2000
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
600019d4:	orrs	r2, r0
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
600019d6:	ldr	r0, [pc, #356]	; (60001b3c <configure_external_ram+0x240>)
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
600019d8:	str	r2, [r3, #36]	; 0x24
	FLEXSPI2_AHBRXBUF2CR0 = mask;
600019da:	ldr	r2, [pc, #356]	; (60001b40 <configure_external_ram+0x244>)
600019dc:	str	r2, [r3, #40]	; 0x28
	FLEXSPI2_AHBRXBUF3CR0 = mask;
600019de:	str	r2, [r3, #44]	; 0x2c
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
600019e0:	ldr.w	r2, [r1, #184]	; 0xb8
600019e4:	bic.w	r2, r2, #63	; 0x3f
600019e8:	orr.w	r2, r2, #1
600019ec:	str.w	r2, [r3, #184]	; 0xb8
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
600019f0:	ldr.w	r2, [r1, #188]	; 0xbc
	FLEXSPI2_INTEN = 0;
600019f4:	movs	r1, #0
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
600019f6:	bic.w	r2, r2, #63	; 0x3f
600019fa:	orr.w	r2, r2, #1
600019fe:	str.w	r2, [r3, #188]	; 0xbc
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001a02:	movw	r2, #1541	; 0x605
	FLEXSPI2_INTEN = 0;
60001a06:	str	r1, [r3, #16]
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
60001a08:	str	r4, [r3, #96]	; 0x60
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001a0a:	str	r0, [r3, #112]	; 0x70
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001a0c:	str.w	r2, [r3, #128]	; 0x80
	FLEXSPI2_FLSHA2CR0 = 0x2000; // 8 MByte
60001a10:	str	r4, [r3, #100]	; 0x64
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001a12:	str	r0, [r3, #116]	; 0x74
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001a14:	str.w	r2, [r3, #132]	; 0x84
	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
60001a18:	ldr	r2, [r3, #0]
	for (int i=0; i < 64; i++) luttable[i] = 0;
60001a1a:	ldr	r0, [pc, #296]	; (60001b44 <configure_external_ram+0x248>)
	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
60001a1c:	bic.w	r2, r2, #2
60001a20:	str	r2, [r3, #0]
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001a22:	ldr	r2, [pc, #292]	; (60001b48 <configure_external_ram+0x24c>)
60001a24:	str	r2, [r3, #24]
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001a26:	movs	r2, #2
60001a28:	str	r2, [r3, #28]
60001a2a:	ldr	r2, [pc, #288]	; (60001b4c <configure_external_ram+0x250>)
	for (int i=0; i < 64; i++) luttable[i] = 0;
60001a2c:	str.w	r1, [r2], #4
60001a30:	cmp	r2, r0
60001a32:	bne.n	60001a2c <configure_external_ram+0x130>
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
60001a34:	ldr	r2, [r3, #0]
60001a36:	orr.w	r2, r2, #1
60001a3a:	str	r2, [r3, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
60001a3c:	ldr	r3, [pc, #236]	; (60001b2c <configure_external_ram+0x230>)
60001a3e:	ldr	r4, [r3, #0]
60001a40:	ands.w	r4, r4, #1
60001a44:	bne.n	60001a3e <configure_external_ram+0x142>
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001a46:	ldr	r2, [pc, #256]	; (60001b48 <configure_external_ram+0x24c>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001a48:	movs	r6, #2
	flexspi2_command(0, 0); // exit quad mode
60001a4a:	mov	r1, r4
60001a4c:	mov	r0, r4
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001a4e:	str	r2, [r3, #24]
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
60001a50:	movw	r2, #1781	; 0x6f5
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001a54:	str	r6, [r3, #28]
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
60001a56:	str.w	r2, [r3, #512]	; 0x200
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
60001a5a:	movw	r2, #1126	; 0x466
60001a5e:	str.w	r2, [r3, #528]	; 0x210
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
60001a62:	movw	r2, #1177	; 0x499
60001a66:	str.w	r2, [r3, #544]	; 0x220
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
60001a6a:	ldr	r2, [pc, #228]	; (60001b50 <configure_external_ram+0x254>)
60001a6c:	str.w	r2, [r3, #560]	; 0x230
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
60001a70:	movw	r2, #9217	; 0x2401
60001a74:	str.w	r2, [r3, #564]	; 0x234
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
60001a78:	movw	r2, #1077	; 0x435
60001a7c:	str.w	r2, [r3, #576]	; 0x240
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
60001a80:	ldr	r2, [pc, #208]	; (60001b54 <configure_external_ram+0x258>)
60001a82:	str.w	r2, [r3, #592]	; 0x250
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
60001a86:	ldr	r2, [pc, #208]	; (60001b58 <configure_external_ram+0x25c>)
60001a88:	str.w	r2, [r3, #596]	; 0x254
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
60001a8c:	ldr	r2, [pc, #204]	; (60001b5c <configure_external_ram+0x260>)
60001a8e:	str.w	r2, [r3, #608]	; 0x260
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
60001a92:	movw	r2, #8705	; 0x2201
60001a96:	str.w	r2, [r3, #612]	; 0x264
	flexspi2_command(0, 0); // exit quad mode
60001a9a:	bl	600017b4 <flexspi2_command>
	flexspi2_command(1, 0); // reset enable
60001a9e:	movs	r0, #1
60001aa0:	bl	600017b4 <flexspi2_command>
	flexspi2_command(2, 0); // reset (is this really necessary?)
60001aa4:	mov	r0, r6
60001aa6:	bl	600017b4 <flexspi2_command>
	if (flexspi2_psram_id(0) == 0x5D0D) {
60001aaa:	mov	r0, r4
60001aac:	bl	600017d8 <flexspi2_psram_id>
60001ab0:	movw	r3, #23821	; 0x5d0d
60001ab4:	mov	r5, r0
60001ab6:	cmp	r0, r3
60001ab8:	bne.n	60001b0a <configure_external_ram+0x20e>
		flexspi2_command(4, 0);
60001aba:	movs	r0, #4
60001abc:	bl	600017b4 <flexspi2_command>
		flexspi2_command(0, 0x800000); // exit quad mode
60001ac0:	mov.w	r1, #8388608	; 0x800000
60001ac4:	mov	r0, r4
60001ac6:	bl	600017b4 <flexspi2_command>
		flexspi2_command(1, 0x800000); // reset enable
60001aca:	movs	r0, #1
60001acc:	bl	600017b4 <flexspi2_command>
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
60001ad0:	mov	r0, r6
60001ad2:	bl	600017b4 <flexspi2_command>
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001ad6:	mov	r0, r1
60001ad8:	bl	600017d8 <flexspi2_psram_id>
60001adc:	cmp	r0, r5
60001ade:	bne.n	60001b06 <configure_external_ram+0x20a>
			flexspi2_command(4, 0x800000);
60001ae0:	movs	r0, #4
60001ae2:	bl	600017b4 <flexspi2_command>
			external_psram_size = 16;
60001ae6:	movs	r0, #16
			external_psram_size * 0x100000 -
60001ae8:	ldr	r1, [pc, #116]	; (60001b60 <configure_external_ram+0x264>)
			external_psram_size = 16;
60001aea:	ldr	r3, [pc, #120]	; (60001b64 <configure_external_ram+0x268>)
			external_psram_size * 0x100000 -
60001aec:	ldr	r2, [pc, #120]	; (60001b68 <configure_external_ram+0x26c>)
			external_psram_size = 16;
60001aee:	strb	r0, [r3, #0]
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001af0:	movs	r3, #0
			external_psram_size * 0x100000 -
60001af2:	subs	r2, r2, r1
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001af4:	str	r3, [sp, #0]
60001af6:	movs	r3, #1
60001af8:	add.w	r2, r2, r0, lsl #20
60001afc:	ldr	r0, [pc, #108]	; (60001b6c <configure_external_ram+0x270>)
60001afe:	bl	60002380 <__sm_set_pool_veneer>
}
60001b02:	add	sp, #8
60001b04:	pop	{r4, r5, r6, pc}
60001b06:	movs	r0, #8
60001b08:	b.n	60001ae8 <configure_external_ram+0x1ec>
		memset(&extmem_smalloc_pool, 0, sizeof(extmem_smalloc_pool));
60001b0a:	movs	r2, #16
60001b0c:	ldr	r0, [pc, #92]	; (60001b6c <configure_external_ram+0x270>)
}
60001b0e:	add	sp, #8
60001b10:	ldmia.w	sp!, {r4, r5, r6, lr}
		memset(&extmem_smalloc_pool, 0, sizeof(extmem_smalloc_pool));
60001b14:	b.w	60002368 <__memset_veneer>
60001b18:	.word	0x401f8000
60001b1c:	.word	0x0001b0f9
60001b20:	.word	0x000110f9
60001b24:	.word	0x7cf0ff00
60001b28:	.word	0x400fc000
60001b2c:	.word	0x402a4000
60001b30:	.word	0xffff0012
60001b34:	.word	0x402a8000
60001b38:	.word	0x80000040
60001b3c:	.word	0x00020063
60001b40:	.word	0x830f00ff
60001b44:	.word	0x402a4300
60001b48:	.word	0x5af05af0
60001b4c:	.word	0x402a4200
60001b50:	.word	0x3018049f
60001b54:	.word	0x0a1806eb
60001b58:	.word	0x26013206
60001b5c:	.word	0x0a180638
60001b60:	.word	0x70000000
60001b64:	.word	0x20007c0a
60001b68:	.word	0x70000000
60001b6c:	.word	0x20006ce0

60001b70 <usb_pll_start>:
{
60001b70:	push	{r4, r5, r6, r7, lr}
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001b72:	ldr	r3, [pc, #84]	; (60001bc8 <usb_pll_start+0x58>)
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001b74:	movs	r0, #64	; 0x40
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001b76:	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001b7a:	mov.w	r4, #4096	; 0x1000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001b7e:	mov.w	r5, #8192	; 0x2000
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001b82:	mov.w	r6, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001b86:	movw	r7, #12354	; 0x3042
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001b8a:	ldr	r2, [r3, #16]
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001b8c:	tst.w	r2, #2
60001b90:	beq.n	60001b9a <usb_pll_start+0x2a>
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001b92:	str	r6, [r3, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60001b94:	str	r1, [r3, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001b96:	str	r7, [r3, #24]
			continue;
60001b98:	b.n	60001b8a <usb_pll_start+0x1a>
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
60001b9a:	tst.w	r2, #8192	; 0x2000
60001b9e:	bne.n	60001ba4 <usb_pll_start+0x34>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001ba0:	str	r5, [r3, #20]
			continue;
60001ba2:	b.n	60001b8a <usb_pll_start+0x1a>
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
60001ba4:	tst.w	r2, #4096	; 0x1000
60001ba8:	bne.n	60001bae <usb_pll_start+0x3e>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001baa:	str	r4, [r3, #20]
			continue;
60001bac:	b.n	60001b8a <usb_pll_start+0x1a>
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
60001bae:	cmp	r2, #0
60001bb0:	bge.n	60001b8a <usb_pll_start+0x1a>
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
60001bb2:	tst.w	r2, #65536	; 0x10000
60001bb6:	beq.n	60001bbc <usb_pll_start+0x4c>
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001bb8:	str	r1, [r3, #24]
			continue;
60001bba:	b.n	60001b8a <usb_pll_start+0x1a>
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
60001bbc:	lsls	r2, r2, #25
60001bbe:	bmi.n	60001bc4 <usb_pll_start+0x54>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001bc0:	str	r0, [r3, #20]
			continue;
60001bc2:	b.n	60001b8a <usb_pll_start+0x1a>
}
60001bc4:	pop	{r4, r5, r6, r7, pc}
60001bc6:	nop
60001bc8:	.word	0x400d8000

60001bcc <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001bcc:	ldr	r2, [pc, #248]	; (60001cc8 <tempmon_init+0xfc>)
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001bce:	vmov.f32	s12, #57	; 0x41c80000  25.0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001bd2:	ldr	r0, [pc, #248]	; (60001ccc <tempmon_init+0x100>)
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001bd4:	ldr.w	r3, [r2, #128]	; 0x80
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bd8:	vldr	s10, [pc, #244]	; 60001cd0 <tempmon_init+0x104>
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001bdc:	bic.w	r3, r3, #1
{
60001be0:	push	{r4, lr}
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001be2:	str.w	r3, [r2, #128]	; 0x80
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001be6:	movs	r3, #3
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001be8:	ldr	r4, [pc, #232]	; (60001cd4 <tempmon_init+0x108>)
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001bea:	str.w	r3, [r2, #144]	; 0x90
  calibrationData = HW_OCOTP_ANA1;
60001bee:	ldr	r3, [pc, #232]	; (60001cd8 <tempmon_init+0x10c>)
60001bf0:	ldr.w	r3, [r3, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001bf4:	uxtb	r1, r3
60001bf6:	str	r1, [r0, #0]
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001bf8:	vmov	s15, r1
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001bfc:	ubfx	r0, r3, #8, #12
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001c00:	lsrs	r3, r3, #20
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001c02:	vcvt.f32.s32	s14, s15
60001c06:	ldr	r1, [pc, #212]	; (60001cdc <tempmon_init+0x110>)
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001c08:	vmov	s15, r0
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001c0c:	str	r0, [r4, #0]
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001c0e:	vcvt.f32.s32	s13, s15
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001c12:	vmov	s15, r3
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c16:	vsub.f32	s10, s14, s10
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001c1a:	ldr	r3, [pc, #196]	; (60001ce0 <tempmon_init+0x114>)
60001c1c:	vcvt.f32.s32	s15, s15
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001c20:	vsub.f32	s12, s14, s12
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001c24:	vsub.f32	s15, s15, s13
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001c28:	vstr	s12, [r1]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c2c:	vmul.f32	s10, s10, s15
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001c30:	vstr	s15, [r3]
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001c34:	ldr.w	r3, [r2, #128]	; 0x80
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c38:	vdiv.f32	s11, s10, s12
60001c3c:	vadd.f32	s11, s11, s13
60001c40:	vcvt.u32.f32	s11, s11
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001c44:	vmov	r1, s11
  
  //Set Panic Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c48:	vldr	s11, [pc, #152]	; 60001ce4 <tempmon_init+0x118>
60001c4c:	vsub.f32	s14, s14, s11
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001c50:	orr.w	r3, r3, r1, lsl #20
60001c54:	str.w	r3, [r2, #128]	; 0x80
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c58:	vmul.f32	s14, s14, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001c5c:	ldr	r3, [pc, #136]	; (60001ce8 <tempmon_init+0x11c>)
  
  // Set Low Temp Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c5e:	vmul.f32	s15, s12, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001c62:	ldr.w	r1, [r2, #400]	; 0x190
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c66:	vdiv.f32	s11, s14, s12
60001c6a:	vadd.f32	s14, s11, s13
60001c6e:	vcvt.u32.f32	s14, s14
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001c72:	vmov	r0, s14
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c76:	vdiv.f32	s14, s15, s12
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001c7a:	and.w	r3, r3, r0, lsl #16
60001c7e:	orrs	r3, r1
60001c80:	str.w	r3, [r2, #400]	; 0x190
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001c84:	ldr.w	r1, [r2, #400]	; 0x190
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c88:	vadd.f32	s15, s14, s13
60001c8c:	vcvt.u32.f32	s15, s15
60001c90:	vmov	r3, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001c94:	ubfx	r3, r3, #0, #12
60001c98:	orrs	r3, r1
60001c9a:	str.w	r3, [r2, #400]	; 0x190
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
60001c9e:	ldr.w	r3, [r2, #128]	; 0x80
60001ca2:	orr.w	r3, r3, #2
60001ca6:	str.w	r3, [r2, #128]	; 0x80

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001caa:	movs	r2, #0
60001cac:	ldr	r3, [pc, #60]	; (60001cec <tempmon_init+0x120>)
60001cae:	strb.w	r2, [r3, #64]	; 0x40
60001cb2:	ldr	r3, [pc, #60]	; (60001cf0 <tempmon_init+0x124>)
60001cb4:	ldr	r2, [pc, #60]	; (60001cf4 <tempmon_init+0x128>)
60001cb6:	str.w	r2, [r3, #320]	; 0x140
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001cba:	mov.w	r3, #3758153728	; 0xe000e000
60001cbe:	movs	r2, #1
60001cc0:	str.w	r2, [r3, #264]	; 0x108
}
60001cc4:	pop	{r4, pc}
60001cc6:	nop
60001cc8:	.word	0x400d8100
60001ccc:	.word	0x200070d4
60001cd0:	.word	0x42aa0000
60001cd4:	.word	0x200070d0
60001cd8:	.word	0x401f4400
60001cdc:	.word	0x200070d8
60001ce0:	.word	0x200070dc
60001ce4:	.word	0x42b40000
60001ce8:	.word	0x0fff0000
60001cec:	.word	0xe000e400
60001cf0:	.word	0x20002400
60001cf4:	.word	0x00008bf1

60001cf8 <isvalid(arm_fault_info_struct const*) [clone .constprop.0]>:
	if (isvalid(info)) return true;
	return false;
}

FLASHMEM
static int isvalid(const struct arm_fault_info_struct *info)
60001cf8:	push	{r4, r5, r6, lr}
{
	uint32_t i, crc;
	const uint32_t *data, *end;

	if (info->len != sizeof(*info) / 4) return 0;
60001cfa:	ldr	r4, [pc, #64]	; (60001d3c <isvalid(arm_fault_info_struct const*) [clone .constprop.0]+0x44>)
60001cfc:	ldr.w	r3, [r4, #128]	; 0x80
60001d00:	cmp	r3, #11
60001d02:	bne.n	60001d36 <isvalid(arm_fault_info_struct const*) [clone .constprop.0]+0x3e>
	data = (uint32_t *)info;
	end = data + (sizeof(*info) / 4 - 1);
	crc = 0xFFFFFFFF;
60001d04:	mov.w	r3, #4294967295
	data = (uint32_t *)info;
60001d08:	ldr	r2, [pc, #52]	; (60001d40 <isvalid(arm_fault_info_struct const*) [clone .constprop.0]+0x48>)
	while (data < end) {
		crc ^= *data++;
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
60001d0a:	ldr	r6, [pc, #56]	; (60001d44 <isvalid(arm_fault_info_struct const*) [clone .constprop.0]+0x4c>)
	while (data < end) {
60001d0c:	ldr	r5, [pc, #56]	; (60001d48 <isvalid(arm_fault_info_struct const*) [clone .constprop.0]+0x50>)
		crc ^= *data++;
60001d0e:	ldr	r1, [r2, #0]
60001d10:	adds	r2, #4
60001d12:	eors	r3, r1
60001d14:	movs	r1, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
60001d16:	and.w	r0, r3, #1
60001d1a:	subs	r1, #1
60001d1c:	mul.w	r0, r6, r0
60001d20:	eor.w	r3, r0, r3, lsr #1
60001d24:	bne.n	60001d16 <isvalid(arm_fault_info_struct const*) [clone .constprop.0]+0x1e>
	while (data < end) {
60001d26:	cmp	r2, r5
60001d28:	bne.n	60001d0e <isvalid(arm_fault_info_struct const*) [clone .constprop.0]+0x16>
	}
	if (crc != info->crc) return 0;
60001d2a:	ldr.w	r0, [r4, #168]	; 0xa8
60001d2e:	subs	r3, r0, r3
60001d30:	negs	r0, r3
60001d32:	adcs	r0, r3
	return 1;
}
60001d34:	pop	{r4, r5, r6, pc}
	if (info->len != sizeof(*info) / 4) return 0;
60001d36:	movs	r0, #0
60001d38:	b.n	60001d34 <isvalid(arm_fault_info_struct const*) [clone .constprop.0]+0x3c>
60001d3a:	nop
60001d3c:	.word	0x2027ff00
60001d40:	.word	0x2027ff80
60001d44:	.word	0xedb88320
60001d48:	.word	0x2027ffa8

60001d4c <cleardata(arm_fault_info_struct*) [clone .constprop.0]>:

FLASHMEM
static void cleardata(struct arm_fault_info_struct *info)
{
	info->len = 0;
60001d4c:	ldr	r2, [pc, #60]	; (60001d8c <cleardata(arm_fault_info_struct*) [clone .constprop.0]+0x40>)
60001d4e:	movs	r3, #0
	info->ipsr  = 0;
60001d50:	strd	r3, r3, [r2, #128]	; 0x80
	info->cfsr  = 0;
	info->hfsr  = 0;
60001d54:	strd	r3, r3, [r2, #136]	; 0x88
	info->mmfar = 0;
	info->bfar  = 0;
60001d58:	strd	r3, r3, [r2, #144]	; 0x90
	info->ret = 0;
	info->xpsr  = 0;
60001d5c:	strd	r3, r3, [r2, #152]	; 0x98
	info->crc = 0;
60001d60:	str.w	r3, [r2, #168]	; 0xa8
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
60001d64:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
60001d68:	mov.w	r2, #3758153728	; 0xe000e000
60001d6c:	ldr	r1, [pc, #32]	; (60001d90 <cleardata(arm_fault_info_struct*) [clone .constprop.0]+0x44>)
60001d6e:	str.w	r1, [r2, #3952]	; 0xf70
60001d72:	adds	r1, #32
60001d74:	str.w	r1, [r2, #3952]	; 0xf70
		location += 32;
	} while (location < end_addr);
	asm("dsb");
60001d78:	dsb	sy
	asm("isb");
60001d7c:	isb	sy
	arm_dcache_flush_delete(info, sizeof(*info));
	SRC_SRSR = SRC_SRSR; // zeros all write-1-to-clear bits
60001d80:	ldr	r2, [pc, #16]	; (60001d94 <cleardata(arm_fault_info_struct*) [clone .constprop.0]+0x48>)
60001d82:	ldr	r1, [r2, #8]
60001d84:	str	r1, [r2, #8]
	SRC_GPR5 = 0;
60001d86:	str	r3, [r2, #48]	; 0x30
}
60001d88:	bx	lr
60001d8a:	nop
60001d8c:	.word	0x2027ff00
60001d90:	.word	0x2027ff80
60001d94:	.word	0x400f8000

60001d98 <CrashReportClass::printTo(Print&) const>:
{
60001d98:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
60001d9c:	mov	r4, r1
  if (isvalid(info)) {
60001d9e:	bl	60001cf8 <isvalid(arm_fault_info_struct const*) [clone .constprop.0]>
60001da2:	cmp	r0, #0
60001da4:	beq.w	60002148 <CrashReportClass::printTo(Print&) const+0x3b0>
    uint8_t ss = info->time % 60;
60001da8:	ldr	r6, [pc, #692]	; (60002060 <CrashReportClass::printTo(Print&) const+0x2c8>)
    p.println("CrashReport:");
60001daa:	mov	r0, r4
60001dac:	ldr	r1, [pc, #692]	; (60002064 <CrashReportClass::printTo(Print&) const+0x2cc>)
    info->time /= 60;
60001dae:	mov.w	r8, #60	; 0x3c
    p.println("CrashReport:");
60001db2:	bl	600023e0 <___ZN5Print7printlnEPKc_veneer>
    uint8_t ss = info->time % 60;
60001db6:	ldr.w	r7, [r6, #164]	; 0xa4
    p.print("  A problem occurred at (system time) ");
60001dba:	ldr	r1, [pc, #684]	; (60002068 <CrashReportClass::printTo(Print&) const+0x2d0>)
60001dbc:	mov	r0, r4
    info->time /= 60;
60001dbe:	udiv	r9, r7, r8
    info->time /= 60;
60001dc2:	udiv	r5, r9, r8
60001dc6:	str.w	r5, [r6, #164]	; 0xa4
    p.print("  A problem occurred at (system time) ");
60001dca:	bl	600023d0 <___ZN5Print5printEPKc_veneer>
    uint8_t hh = info->time % 24;
60001dce:	movs	r3, #24
    p.print(hh);
60001dd0:	mov	r0, r4
    uint8_t hh = info->time % 24;
60001dd2:	udiv	r1, r5, r3
60001dd6:	mls	r1, r3, r1, r5
    p.print(hh);
60001dda:	uxtb	r1, r1
60001ddc:	bl	60002398 <___ZN5Print5printEh_veneer>
    p.print(":");
60001de0:	ldr	r1, [pc, #648]	; (6000206c <CrashReportClass::printTo(Print&) const+0x2d4>)
60001de2:	mov	r0, r4
60001de4:	bl	600023d0 <___ZN5Print5printEPKc_veneer>
    uint8_t mm = info->time % 60;
60001de8:	mls	r1, r8, r5, r9
    p.print(mm);
60001dec:	mov	r0, r4
60001dee:	uxtb	r1, r1
60001df0:	bl	60002398 <___ZN5Print5printEh_veneer>
    p.print(":");
60001df4:	ldr	r1, [pc, #628]	; (6000206c <CrashReportClass::printTo(Print&) const+0x2d4>)
60001df6:	mov	r0, r4
60001df8:	bl	600023d0 <___ZN5Print5printEPKc_veneer>
    uint8_t ss = info->time % 60;
60001dfc:	mls	r1, r8, r9, r7
	size_t println(const char s[])			{ return print(s) + println(); }
	// Print a string and newline
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	// Print an unsigned number and newline
	size_t println(uint8_t b)			{ return print(b) + println(); }
60001e00:	mov	r0, r4
60001e02:	uxtb	r1, r1
60001e04:	bl	60002398 <___ZN5Print5printEh_veneer>
60001e08:	mov	r0, r4
60001e0a:	bl	60002378 <___ZN5Print7printlnEv_veneer>
    p.print("  Code was executing from address 0x");
60001e0e:	ldr	r1, [pc, #608]	; (60002070 <CrashReportClass::printTo(Print&) const+0x2d8>)
60001e10:	mov	r0, r4
60001e12:	bl	600023d0 <___ZN5Print5printEPKc_veneer>
    p.println(info->ret, HEX);
60001e16:	movs	r2, #16
60001e18:	ldr.w	r1, [r6, #152]	; 0x98
60001e1c:	mov	r0, r4
60001e1e:	bl	60002360 <___ZN5Print7printlnEmi_veneer>
    uint32_t _CFSR = info->cfsr;
60001e22:	ldr.w	r5, [r6, #136]	; 0x88
    if (_CFSR > 0) {
60001e26:	cmp	r5, #0
60001e28:	beq.n	60001ed8 <CrashReportClass::printTo(Print&) const+0x140>
      p.print("  CFSR: ");
60001e2a:	ldr	r1, [pc, #584]	; (60002074 <CrashReportClass::printTo(Print&) const+0x2dc>)
60001e2c:	mov	r0, r4
60001e2e:	bl	600023d0 <___ZN5Print5printEPKc_veneer>
      p.println(info->cfsr, HEX);
60001e32:	movs	r2, #16
60001e34:	ldr.w	r1, [r6, #136]	; 0x88
60001e38:	mov	r0, r4
60001e3a:	bl	60002360 <___ZN5Print7printlnEmi_veneer>
      if ((_CFSR & 1) == 1) {
60001e3e:	lsls	r2, r5, #31
60001e40:	bpl.w	60001fe8 <CrashReportClass::printTo(Print&) const+0x250>
        p.println("\t(IACCVIOL) Instruction Access Violation");
60001e44:	ldr	r1, [pc, #560]	; (60002078 <CrashReportClass::printTo(Print&) const+0x2e0>)
        p.println("\t(MLSPERR) MemMange Fault on FP Lazy State");
60001e46:	mov	r0, r4
60001e48:	bl	600023e0 <___ZN5Print7printlnEPKc_veneer>
      if (((_CFSR & (0x80)) >> 7) == 1) {
60001e4c:	lsls	r2, r5, #24
60001e4e:	bpl.n	60001ea4 <CrashReportClass::printTo(Print&) const+0x10c>
        p.print("\t(MMARVALID) Accessed Address: 0x");
60001e50:	ldr	r1, [pc, #552]	; (6000207c <CrashReportClass::printTo(Print&) const+0x2e4>)
60001e52:	mov	r0, r4
60001e54:	bl	600023d0 <___ZN5Print5printEPKc_veneer>
        p.print(info->mmfar, HEX);
60001e58:	movs	r2, #16
60001e5a:	ldr.w	r1, [r6, #144]	; 0x90
60001e5e:	mov	r0, r4
60001e60:	bl	60002388 <___ZN5Print5printEmi_veneer>
        if (info->mmfar < 32) {
60001e64:	ldr.w	r2, [r6, #144]	; 0x90
60001e68:	cmp	r2, #31
60001e6a:	bhi.w	6000200a <CrashReportClass::printTo(Print&) const+0x272>
          p.print(" (nullptr)\n\t  Check code at 0x");
60001e6e:	ldr	r1, [pc, #528]	; (60002080 <CrashReportClass::printTo(Print&) const+0x2e8>)
60001e70:	mov	r0, r4
60001e72:	bl	600023d0 <___ZN5Print5printEPKc_veneer>
          p.print(info->ret, HEX);
60001e76:	movs	r2, #16
60001e78:	ldr.w	r1, [r6, #152]	; 0x98
60001e7c:	mov	r0, r4
60001e7e:	bl	60002388 <___ZN5Print5printEmi_veneer>
          p.print(" - very likely a bug!\n\t  Run \"addr2line -e mysketch.ino.elf 0x");
60001e82:	ldr	r1, [pc, #512]	; (60002084 <CrashReportClass::printTo(Print&) const+0x2ec>)
60001e84:	mov	r0, r4
60001e86:	bl	600023d0 <___ZN5Print5printEPKc_veneer>
          p.print(info->ret, HEX);
60001e8a:	ldr.w	r1, [r6, #152]	; 0x98
60001e8e:	movs	r2, #16
60001e90:	mov	r0, r4
60001e92:	bl	60002388 <___ZN5Print5printEmi_veneer>
          p.print("\" for filename & line number.");
60001e96:	ldr	r1, [pc, #496]	; (60002088 <CrashReportClass::printTo(Print&) const+0x2f0>)
          p.print(" (Stack problem)\n\t  Check for stack overflows, array bounds, etc.");
60001e98:	mov	r0, r4
60001e9a:	bl	600023d0 <___ZN5Print5printEPKc_veneer>
        p.println();
60001e9e:	mov	r0, r4
60001ea0:	bl	60002378 <___ZN5Print7printlnEv_veneer>
      if (((_CFSR & 0x100) >> 8) == 1) {
60001ea4:	lsls	r3, r5, #23
60001ea6:	bpl.w	6000201e <CrashReportClass::printTo(Print&) const+0x286>
        p.println("\t(IBUSERR) Instruction Bus Error");
60001eaa:	ldr	r1, [pc, #480]	; (6000208c <CrashReportClass::printTo(Print&) const+0x2f4>)
        p.println("\t(LSPERR) Bus Fault on FP lazy state preservation");
60001eac:	mov	r0, r4
60001eae:	bl	600023e0 <___ZN5Print7printlnEPKc_veneer>
      if (((_CFSR & (0x8000)) >> 15) == 1) {
60001eb2:	lsls	r7, r5, #16
60001eb4:	bpl.n	60001eca <CrashReportClass::printTo(Print&) const+0x132>
        p.print("\t(BFARVALID) Accessed Address: 0x");
60001eb6:	ldr	r1, [pc, #472]	; (60002090 <CrashReportClass::printTo(Print&) const+0x2f8>)
60001eb8:	mov	r0, r4
60001eba:	bl	600023d0 <___ZN5Print5printEPKc_veneer>
        p.println(info->bfar, HEX);
60001ebe:	movs	r2, #16
60001ec0:	ldr.w	r1, [r6, #148]	; 0x94
60001ec4:	mov	r0, r4
60001ec6:	bl	60002360 <___ZN5Print7printlnEmi_veneer>
      if (((_CFSR & 0x10000) >> 16) == 1) {
60001eca:	lsls	r0, r5, #15
60001ecc:	bpl.w	60002048 <CrashReportClass::printTo(Print&) const+0x2b0>
        p.println("\t(UNDEFINSTR) Undefined instruction");
60001ed0:	ldr	r1, [pc, #448]	; (60002094 <CrashReportClass::printTo(Print&) const+0x2fc>)
        p.println("\t(DIVBYZERO) Divide by zero");
60001ed2:	mov	r0, r4
60001ed4:	bl	600023e0 <___ZN5Print7printlnEPKc_veneer>
    uint32_t _HFSR = info->hfsr;
60001ed8:	ldr.w	r5, [r6, #140]	; 0x8c
    if (_HFSR > 0) {
60001edc:	cbz	r5, 60001f00 <CrashReportClass::printTo(Print&) const+0x168>
      p.print("  HTSR: ");
60001ede:	ldr	r1, [pc, #440]	; (60002098 <CrashReportClass::printTo(Print&) const+0x300>)
60001ee0:	mov	r0, r4
60001ee2:	bl	600023d0 <___ZN5Print5printEPKc_veneer>
      p.println(info->hfsr, HEX);
60001ee6:	movs	r2, #16
60001ee8:	ldr.w	r1, [r6, #140]	; 0x8c
60001eec:	mov	r0, r4
60001eee:	bl	60002360 <___ZN5Print7printlnEmi_veneer>
      if (((_HFSR & (0x02)) >> 1) == 1) {
60001ef2:	lsls	r0, r5, #30
60001ef4:	bpl.w	6000213e <CrashReportClass::printTo(Print&) const+0x3a6>
      p.println("\t(VECTTBL) Bus Fault on Vec Table Read");
60001ef8:	ldr	r1, [pc, #416]	; (6000209c <CrashReportClass::printTo(Print&) const+0x304>)
       p.println("\t(FORCED) Forced Hard Fault");
60001efa:	mov	r0, r4
60001efc:	bl	600023e0 <___ZN5Print7printlnEPKc_veneer>
    p.print("  Temperature inside the chip was ");
60001f00:	ldr	r1, [pc, #412]	; (600020a0 <CrashReportClass::printTo(Print&) const+0x308>)
60001f02:	mov	r0, r4
60001f04:	bl	600023d0 <___ZN5Print5printEPKc_veneer>
    p.print(info->temp);
60001f08:	vldr	s0, [r6, #160]	; 0xa0
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
60001f0c:	movs	r1, #2
60001f0e:	mov	r0, r4
60001f10:	vcvt.f64.f32	d0, s0
60001f14:	bl	600023c0 <___ZN5Print10printFloatEdh_veneer>
    p.print(" ┬░C\n");
60001f18:	ldr	r1, [pc, #392]	; (600020a4 <CrashReportClass::printTo(Print&) const+0x30c>)
60001f1a:	mov	r0, r4
60001f1c:	bl	600023d0 <___ZN5Print5printEPKc_veneer>
    p.print("  Startup CPU clock speed is ");
60001f20:	ldr	r1, [pc, #388]	; (600020a8 <CrashReportClass::printTo(Print&) const+0x310>)
60001f22:	mov	r0, r4
60001f24:	bl	600023d0 <___ZN5Print5printEPKc_veneer>
    p.print( F_CPU_ACTUAL/1000000);
60001f28:	ldr	r3, [pc, #384]	; (600020ac <CrashReportClass::printTo(Print&) const+0x314>)
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
60001f2a:	ldr	r1, [pc, #388]	; (600020b0 <CrashReportClass::printTo(Print&) const+0x318>)
60001f2c:	movs	r2, #10
60001f2e:	ldr	r0, [r3, #0]
60001f30:	movs	r3, #0
60001f32:	udiv	r1, r0, r1
60001f36:	mov	r0, r4
60001f38:	bl	600023a0 <___ZN5Print11printNumberEmhh_veneer>
    p.print( "MHz\n");
60001f3c:	ldr	r1, [pc, #372]	; (600020b4 <CrashReportClass::printTo(Print&) const+0x31c>)
60001f3e:	mov	r0, r4
60001f40:	bl	600023d0 <___ZN5Print5printEPKc_veneer>
  uint32_t SRSR = SRC_SRSR;
60001f44:	ldr	r3, [pc, #368]	; (600020b8 <CrashReportClass::printTo(Print&) const+0x320>)
60001f46:	ldr	r5, [r3, #8]
  if (SRSR & SRC_SRSR_LOCKUP_SYSRESETREQ) {
60001f48:	lsls	r2, r5, #30
60001f4a:	bpl.n	60001f5e <CrashReportClass::printTo(Print&) const+0x1c6>
    uint32_t gpr5 = SRC_GPR5;
60001f4c:	ldr	r2, [r3, #48]	; 0x30
      p.println("  Reboot was caused by software write to SCB_AIRCR or CPU lockup");
60001f4e:	mov	r0, r4
    if (gpr5 == 0x0BAD00F1) {
60001f50:	ldr	r3, [pc, #360]	; (600020bc <CrashReportClass::printTo(Print&) const+0x324>)
60001f52:	cmp	r2, r3
      p.println("  Reboot was caused by auto reboot after fault or bad interrupt detected");
60001f54:	ite	eq
60001f56:	ldreq	r1, [pc, #360]	; (600020c0 <CrashReportClass::printTo(Print&) const+0x328>)
      p.println("  Reboot was caused by software write to SCB_AIRCR or CPU lockup");
60001f58:	ldrne	r1, [pc, #360]	; (600020c4 <CrashReportClass::printTo(Print&) const+0x32c>)
60001f5a:	bl	600023e0 <___ZN5Print7printlnEPKc_veneer>
  if (SRSR & SRC_SRSR_CSU_RESET_B) {
60001f5e:	lsls	r7, r5, #29
60001f60:	bpl.n	60001f6a <CrashReportClass::printTo(Print&) const+0x1d2>
    p.println("  Reboot was caused by security monitor");
60001f62:	ldr	r1, [pc, #356]	; (600020c8 <CrashReportClass::printTo(Print&) const+0x330>)
60001f64:	mov	r0, r4
60001f66:	bl	600023e0 <___ZN5Print7printlnEPKc_veneer>
  if (SRSR & SRC_SRSR_IPP_USER_RESET_B) {
60001f6a:	lsls	r6, r5, #28
60001f6c:	bpl.n	60001f76 <CrashReportClass::printTo(Print&) const+0x1de>
    p.println("  Reboot was caused by power on/off button");
60001f6e:	ldr	r1, [pc, #348]	; (600020cc <CrashReportClass::printTo(Print&) const+0x334>)
60001f70:	mov	r0, r4
60001f72:	bl	600023e0 <___ZN5Print7printlnEPKc_veneer>
  if (SRSR & SRC_SRSR_WDOG_RST_B) {
60001f76:	lsls	r0, r5, #27
60001f78:	bpl.n	60001f82 <CrashReportClass::printTo(Print&) const+0x1ea>
    p.println("  Reboot was caused by watchdog 1 or 2");
60001f7a:	ldr	r1, [pc, #340]	; (600020d0 <CrashReportClass::printTo(Print&) const+0x338>)
60001f7c:	mov	r0, r4
60001f7e:	bl	600023e0 <___ZN5Print7printlnEPKc_veneer>
  if (SRSR & SRC_SRSR_JTAG_RST_B) {
60001f82:	lsls	r1, r5, #26
60001f84:	bpl.n	60001f8e <CrashReportClass::printTo(Print&) const+0x1f6>
    p.println("  Reboot was caused by JTAG boundary scan");
60001f86:	ldr	r1, [pc, #332]	; (600020d4 <CrashReportClass::printTo(Print&) const+0x33c>)
60001f88:	mov	r0, r4
60001f8a:	bl	600023e0 <___ZN5Print7printlnEPKc_veneer>
  if (SRSR & SRC_SRSR_JTAG_SW_RST) {
60001f8e:	lsls	r2, r5, #25
60001f90:	bpl.n	60001f9a <CrashReportClass::printTo(Print&) const+0x202>
    p.println("  Reboot was caused by JTAG debug");
60001f92:	ldr	r1, [pc, #324]	; (600020d8 <CrashReportClass::printTo(Print&) const+0x340>)
60001f94:	mov	r0, r4
60001f96:	bl	600023e0 <___ZN5Print7printlnEPKc_veneer>
  if (SRSR & SRC_SRSR_WDOG3_RST_B) {
60001f9a:	lsls	r3, r5, #24
60001f9c:	bpl.n	60001fa6 <CrashReportClass::printTo(Print&) const+0x20e>
    p.println("  Reboot was caused by watchdog 3");
60001f9e:	ldr	r1, [pc, #316]	; (600020dc <CrashReportClass::printTo(Print&) const+0x344>)
60001fa0:	mov	r0, r4
60001fa2:	bl	600023e0 <___ZN5Print7printlnEPKc_veneer>
  if (SRSR & SRC_SRSR_TEMPSENSE_RST_B) {
60001fa6:	ands.w	r5, r5, #256	; 0x100
60001faa:	beq.w	6000217a <CrashReportClass::printTo(Print&) const+0x3e2>
    p.println("  Reboot was caused by temperature sensor");
60001fae:	ldr	r1, [pc, #304]	; (600020e0 <CrashReportClass::printTo(Print&) const+0x348>)
60001fb0:	mov	r0, r4
60001fb2:	bl	600023e0 <___ZN5Print7printlnEPKc_veneer>
	  SRC_SRSR &= ~0x100u; /* Write 0 to clear. */
60001fb6:	ldr	r2, [pc, #256]	; (600020b8 <CrashReportClass::printTo(Print&) const+0x320>)
	  p.println("Panic Temp Exceeded Shutting Down");
60001fb8:	ldr	r1, [pc, #296]	; (600020e4 <CrashReportClass::printTo(Print&) const+0x34c>)
60001fba:	mov	r0, r4
	  SRC_SRSR &= ~0x100u; /* Write 0 to clear. */
60001fbc:	ldr	r3, [r2, #8]
60001fbe:	bic.w	r3, r3, #256	; 0x100
60001fc2:	str	r3, [r2, #8]
	  p.println("Panic Temp Exceeded Shutting Down");
60001fc4:	bl	600023e0 <___ZN5Print7printlnEPKc_veneer>
	  p.println("Can be caused by Overclocking w/o Heatsink or other unknown reason");
60001fc8:	ldr	r1, [pc, #284]	; (600020e8 <CrashReportClass::printTo(Print&) const+0x350>)
60001fca:	mov	r0, r4
60001fcc:	bl	600023e0 <___ZN5Print7printlnEPKc_veneer>
	  IOMUXC_GPR_GPR16 = 0x00000007;
60001fd0:	ldr	r3, [pc, #280]	; (600020ec <CrashReportClass::printTo(Print&) const+0x354>)
60001fd2:	movs	r2, #7
60001fd4:	str	r2, [r3, #64]	; 0x40
	  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
60001fd6:	ldr	r2, [pc, #280]	; (600020f0 <CrashReportClass::printTo(Print&) const+0x358>)
60001fd8:	ldr	r3, [r2, #56]	; 0x38
60001fda:	orr.w	r3, r3, #64	; 0x40
60001fde:	str	r3, [r2, #56]	; 0x38
	  asm volatile ("dsb":::"memory");
60001fe0:	dsb	sy
	  while (1) asm ("wfi");
60001fe4:	wfi
60001fe6:	b.n	60001fe4 <CrashReportClass::printTo(Print&) const+0x24c>
      } else  if (((_CFSR & (0x02)) >> 1) == 1) {
60001fe8:	lsls	r3, r5, #30
60001fea:	bpl.n	60001ff0 <CrashReportClass::printTo(Print&) const+0x258>
        p.println("\t(DACCVIOL) Data Access Violation");
60001fec:	ldr	r1, [pc, #260]	; (600020f4 <CrashReportClass::printTo(Print&) const+0x35c>)
60001fee:	b.n	60001e46 <CrashReportClass::printTo(Print&) const+0xae>
      } else if (((_CFSR & (0x08)) >> 3) == 1) {
60001ff0:	lsls	r7, r5, #28
60001ff2:	bpl.n	60001ff8 <CrashReportClass::printTo(Print&) const+0x260>
        p.println("\t(MUNSTKERR) MemMange Fault on Unstacking");
60001ff4:	ldr	r1, [pc, #256]	; (600020f8 <CrashReportClass::printTo(Print&) const+0x360>)
60001ff6:	b.n	60001e46 <CrashReportClass::printTo(Print&) const+0xae>
      } else if (((_CFSR & (0x10)) >> 4) == 1) {
60001ff8:	lsls	r0, r5, #27
60001ffa:	bpl.n	60002000 <CrashReportClass::printTo(Print&) const+0x268>
        p.println("\t(MSTKERR) MemMange Fault on stacking");
60001ffc:	ldr	r1, [pc, #252]	; (600020fc <CrashReportClass::printTo(Print&) const+0x364>)
60001ffe:	b.n	60001e46 <CrashReportClass::printTo(Print&) const+0xae>
      } else if (((_CFSR & (0x20)) >> 5) == 1) {
60002000:	lsls	r1, r5, #26
60002002:	bpl.w	60001e4c <CrashReportClass::printTo(Print&) const+0xb4>
        p.println("\t(MLSPERR) MemMange Fault on FP Lazy State");
60002006:	ldr	r1, [pc, #248]	; (60002100 <CrashReportClass::printTo(Print&) const+0x368>)
60002008:	b.n	60001e46 <CrashReportClass::printTo(Print&) const+0xae>
        } else if ((info->mmfar >= (uint32_t)&_ebss) && (info->mmfar < (uint32_t)&_ebss + 32)) {
6000200a:	ldr	r3, [pc, #248]	; (60002104 <CrashReportClass::printTo(Print&) const+0x36c>)
6000200c:	cmp	r2, r3
6000200e:	bcc.w	60001e9e <CrashReportClass::printTo(Print&) const+0x106>
60002012:	adds	r3, #32
60002014:	cmp	r2, r3
60002016:	bcs.w	60001e9e <CrashReportClass::printTo(Print&) const+0x106>
          p.print(" (Stack problem)\n\t  Check for stack overflows, array bounds, etc.");
6000201a:	ldr	r1, [pc, #236]	; (60002108 <CrashReportClass::printTo(Print&) const+0x370>)
6000201c:	b.n	60001e98 <CrashReportClass::printTo(Print&) const+0x100>
      } else  if (((_CFSR & (0x200)) >> 9) == 1) {
6000201e:	lsls	r7, r5, #22
60002020:	bpl.n	60002026 <CrashReportClass::printTo(Print&) const+0x28e>
        p.println("\t(PRECISERR) Data bus error(address in BFAR)");
60002022:	ldr	r1, [pc, #232]	; (6000210c <CrashReportClass::printTo(Print&) const+0x374>)
60002024:	b.n	60001eac <CrashReportClass::printTo(Print&) const+0x114>
      } else if (((_CFSR & (0x400)) >> 10) == 1) {
60002026:	lsls	r0, r5, #21
60002028:	bpl.n	6000202e <CrashReportClass::printTo(Print&) const+0x296>
        p.println("\t(IMPRECISERR) Data bus error but address not related to instruction");
6000202a:	ldr	r1, [pc, #228]	; (60002110 <CrashReportClass::printTo(Print&) const+0x378>)
6000202c:	b.n	60001eac <CrashReportClass::printTo(Print&) const+0x114>
      } else if (((_CFSR & (0x800)) >> 11) == 1) {
6000202e:	lsls	r1, r5, #20
60002030:	bpl.n	60002036 <CrashReportClass::printTo(Print&) const+0x29e>
        p.println("\t(UNSTKERR) Bus Fault on unstacking for a return from exception");
60002032:	ldr	r1, [pc, #224]	; (60002114 <CrashReportClass::printTo(Print&) const+0x37c>)
60002034:	b.n	60001eac <CrashReportClass::printTo(Print&) const+0x114>
      } else if (((_CFSR & (0x1000)) >> 12) == 1) {
60002036:	lsls	r2, r5, #19
60002038:	bpl.n	6000203e <CrashReportClass::printTo(Print&) const+0x2a6>
        p.println("\t(STKERR) Bus Fault on stacking for exception entry");
6000203a:	ldr	r1, [pc, #220]	; (60002118 <CrashReportClass::printTo(Print&) const+0x380>)
6000203c:	b.n	60001eac <CrashReportClass::printTo(Print&) const+0x114>
      } else if (((_CFSR & (0x2000)) >> 13) == 1) {
6000203e:	lsls	r3, r5, #18
60002040:	bpl.w	60001eb2 <CrashReportClass::printTo(Print&) const+0x11a>
        p.println("\t(LSPERR) Bus Fault on FP lazy state preservation");
60002044:	ldr	r1, [pc, #212]	; (6000211c <CrashReportClass::printTo(Print&) const+0x384>)
60002046:	b.n	60001eac <CrashReportClass::printTo(Print&) const+0x114>
      } else  if (((_CFSR & (0x20000)) >> 17) == 1) {
60002048:	lsls	r1, r5, #14
6000204a:	bpl.n	60002050 <CrashReportClass::printTo(Print&) const+0x2b8>
        p.println("\t(INVSTATE) Instruction makes illegal use of EPSR)");
6000204c:	ldr	r1, [pc, #208]	; (60002120 <CrashReportClass::printTo(Print&) const+0x388>)
6000204e:	b.n	60001ed2 <CrashReportClass::printTo(Print&) const+0x13a>
      } else if (((_CFSR & (0x40000)) >> 18) == 1) {
60002050:	lsls	r2, r5, #13
60002052:	bpl.n	60002058 <CrashReportClass::printTo(Print&) const+0x2c0>
        p.println("\t(INVPC) Usage fault: invalid EXC_RETURN");
60002054:	ldr	r1, [pc, #204]	; (60002124 <CrashReportClass::printTo(Print&) const+0x38c>)
60002056:	b.n	60001ed2 <CrashReportClass::printTo(Print&) const+0x13a>
      } else if (((_CFSR & (0x80000)) >> 19) == 1) {
60002058:	lsls	r3, r5, #12
6000205a:	bpl.n	6000212c <CrashReportClass::printTo(Print&) const+0x394>
        p.println("\t(NOCP) No Coprocessor");
6000205c:	ldr	r1, [pc, #200]	; (60002128 <CrashReportClass::printTo(Print&) const+0x390>)
6000205e:	b.n	60001ed2 <CrashReportClass::printTo(Print&) const+0x13a>
60002060:	.word	0x2027ff00
60002064:	.word	0x20001253
60002068:	.word	0x20001260
6000206c:	.word	0x20001789
60002070:	.word	0x20001287
60002074:	.word	0x200012ac
60002078:	.word	0x200012b5
6000207c:	.word	0x2000137b
60002080:	.word	0x2000139d
60002084:	.word	0x200013bc
60002088:	.word	0x200013fb
6000208c:	.word	0x2000145b
60002090:	.word	0x20001594
60002094:	.word	0x200015b6
60002098:	.word	0x20001692
6000209c:	.word	0x2000169b
600020a0:	.word	0x200016de
600020a4:	.word	0x20001701
600020a8:	.word	0x20001707
600020ac:	.word	0x20001bc0
600020b0:	.word	0x000f4240
600020b4:	.word	0x20001725
600020b8:	.word	0x400f8000
600020bc:	.word	0x0bad00f1
600020c0:	.word	0x20001882
600020c4:	.word	0x200018cb
600020c8:	.word	0x2000190c
600020cc:	.word	0x20001934
600020d0:	.word	0x2000195f
600020d4:	.word	0x20001986
600020d8:	.word	0x200019b0
600020dc:	.word	0x200019d2
600020e0:	.word	0x200019f4
600020e4:	.word	0x20001a1e
600020e8:	.word	0x20001a40
600020ec:	.word	0x400ac000
600020f0:	.word	0x400d4000
600020f4:	.word	0x200012de
600020f8:	.word	0x20001300
600020fc:	.word	0x2000132a
60002100:	.word	0x20001350
60002104:	.word	0x20007c60
60002108:	.word	0x20001419
6000210c:	.word	0x2000147c
60002110:	.word	0x200014a9
60002114:	.word	0x200014ee
60002118:	.word	0x2000152e
6000211c:	.word	0x20001562
60002120:	.word	0x200015da
60002124:	.word	0x2000160d
60002128:	.word	0x20001636
      } else if (((_CFSR & (0x1000000)) >> 24) == 1) {
6000212c:	lsls	r7, r5, #7
6000212e:	bpl.n	60002134 <CrashReportClass::printTo(Print&) const+0x39c>
        p.println("\t(UNALIGNED) Unaligned access UsageFault");
60002130:	ldr	r1, [pc, #220]	; (60002210 <CrashReportClass::printTo(Print&) const+0x478>)
60002132:	b.n	60001ed2 <CrashReportClass::printTo(Print&) const+0x13a>
      } else if (((_CFSR & (0x2000000)) >> 25) == 1) {
60002134:	lsls	r5, r5, #6
60002136:	bpl.w	60001ed8 <CrashReportClass::printTo(Print&) const+0x140>
        p.println("\t(DIVBYZERO) Divide by zero");
6000213a:	ldr	r1, [pc, #216]	; (60002214 <CrashReportClass::printTo(Print&) const+0x47c>)
6000213c:	b.n	60001ed2 <CrashReportClass::printTo(Print&) const+0x13a>
      } else if (((_HFSR & (0x40000000)) >> 30) == 1) {
6000213e:	lsls	r1, r5, #1
60002140:	bpl.w	60001f00 <CrashReportClass::printTo(Print&) const+0x168>
       p.println("\t(FORCED) Forced Hard Fault");
60002144:	ldr	r1, [pc, #208]	; (60002218 <CrashReportClass::printTo(Print&) const+0x480>)
60002146:	b.n	60001efa <CrashReportClass::printTo(Print&) const+0x162>
    p.println("No Crash Data To Report");
60002148:	ldr	r1, [pc, #208]	; (6000221c <CrashReportClass::printTo(Print&) const+0x484>)
6000214a:	mov	r0, r4
6000214c:	bl	600023e0 <___ZN5Print7printlnEPKc_veneer>
    p.println("  Hopefully all is well, but certain types of crashes can't be reported:");
60002150:	ldr	r1, [pc, #204]	; (60002220 <CrashReportClass::printTo(Print&) const+0x488>)
60002152:	mov	r0, r4
60002154:	bl	600023e0 <___ZN5Print7printlnEPKc_veneer>
    p.println("\tstuck in an infinite loop (technically, hardware still running properly)");
60002158:	ldr	r1, [pc, #200]	; (60002224 <CrashReportClass::printTo(Print&) const+0x48c>)
6000215a:	mov	r0, r4
6000215c:	bl	600023e0 <___ZN5Print7printlnEPKc_veneer>
    p.println("\tremaining in a low power sleep mode");
60002160:	ldr	r1, [pc, #196]	; (60002228 <CrashReportClass::printTo(Print&) const+0x490>)
60002162:	mov	r0, r4
60002164:	bl	600023e0 <___ZN5Print7printlnEPKc_veneer>
    p.println("\taccess to certain peripherals without their clock enabled (eg, FlexIO)");
60002168:	ldr	r1, [pc, #192]	; (6000222c <CrashReportClass::printTo(Print&) const+0x494>)
6000216a:	mov	r0, r4
6000216c:	bl	600023e0 <___ZN5Print7printlnEPKc_veneer>
    p.println("\tchange of CPU or bus clock speed without use of glitchless mux");
60002170:	ldr	r1, [pc, #188]	; (60002230 <CrashReportClass::printTo(Print&) const+0x498>)
60002172:	mov	r0, r4
60002174:	bl	600023e0 <___ZN5Print7printlnEPKc_veneer>
60002178:	b.n	60001f44 <CrashReportClass::printTo(Print&) const+0x1ac>
  if (bc->bitmask) {
6000217a:	ldr	r7, [pc, #184]	; (60002234 <CrashReportClass::printTo(Print&) const+0x49c>)
6000217c:	ldr.w	r3, [r7, #192]	; 0xc0
60002180:	cmp	r3, #0
60002182:	beq.n	60002204 <CrashReportClass::printTo(Print&) const+0x46c>
        p.print("  Breadcrumb #");
60002184:	ldr.w	r8, [pc, #192]	; 60002248 <CrashReportClass::printTo(Print&) const+0x4b0>
        p.print(" was ");
60002188:	ldr.w	r9, [pc, #192]	; 6000224c <CrashReportClass::printTo(Print&) const+0x4b4>
6000218c:	ldr.w	sl, [pc, #180]	; 60002244 <CrashReportClass::printTo(Print&) const+0x4ac>
      if (bc->bitmask & (1 << i)) {
60002190:	movs	r3, #1
60002192:	ldr.w	r2, [r7, #192]	; 0xc0
60002196:	mov	r6, r5
60002198:	lsls	r3, r5
6000219a:	adds	r5, #1
6000219c:	tst	r3, r2
6000219e:	beq.n	600021e2 <CrashReportClass::printTo(Print&) const+0x44a>
        p.print("  Breadcrumb #");
600021a0:	mov	r1, r8
600021a2:	mov	r0, r4
600021a4:	bl	600023d0 <___ZN5Print5printEPKc_veneer>
	size_t print(int n)				{ return print((long)n); }
600021a8:	mov	r1, r5
600021aa:	add.w	r6, sl, r6, lsl #2
600021ae:	mov	r0, r4
600021b0:	bl	600023d8 <___ZN5Print5printEl_veneer>
        p.print(" was ");
600021b4:	mov	r1, r9
600021b6:	mov	r0, r4
600021b8:	bl	600023d0 <___ZN5Print5printEPKc_veneer>
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
600021bc:	movs	r3, #0
600021be:	movs	r2, #10
600021c0:	ldr	r1, [r6, #4]
600021c2:	mov	r0, r4
600021c4:	bl	600023a0 <___ZN5Print11printNumberEmhh_veneer>
        p.print(" (0x");
600021c8:	ldr	r1, [pc, #108]	; (60002238 <CrashReportClass::printTo(Print&) const+0x4a0>)
600021ca:	mov	r0, r4
600021cc:	bl	600023d0 <___ZN5Print5printEPKc_veneer>
        p.print(bc->value[i], HEX);
600021d0:	ldr	r1, [r6, #4]
600021d2:	movs	r2, #16
600021d4:	mov	r0, r4
600021d6:	bl	60002388 <___ZN5Print5printEmi_veneer>
        p.println(")");
600021da:	ldr	r1, [pc, #96]	; (6000223c <CrashReportClass::printTo(Print&) const+0x4a4>)
600021dc:	mov	r0, r4
600021de:	bl	600023e0 <___ZN5Print7printlnEPKc_veneer>
    for (int i=0; i < 6; i++) {
600021e2:	cmp	r5, #6
600021e4:	bne.n	60002190 <CrashReportClass::printTo(Print&) const+0x3f8>
    *(volatile uint32_t *)(&bc->bitmask) = 0;
600021e6:	ldr	r3, [pc, #88]	; (60002240 <CrashReportClass::printTo(Print&) const+0x4a8>)
600021e8:	movs	r2, #0
600021ea:	str.w	r2, [r3, #4032]	; 0xfc0
	asm("dsb");
600021ee:	dsb	sy
		SCB_CACHE_DCCMVAC = location;
600021f2:	mov.w	r3, #3758153728	; 0xe000e000
600021f6:	ldr	r2, [pc, #76]	; (60002244 <CrashReportClass::printTo(Print&) const+0x4ac>)
600021f8:	str.w	r2, [r3, #3944]	; 0xf68
	asm("dsb");
600021fc:	dsb	sy
	asm("isb");
60002200:	isb	sy
}
60002204:	movs	r0, #1
  cleardata(info);
60002206:	bl	60001d4c <cleardata(arm_fault_info_struct*) [clone .constprop.0]>
}
6000220a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
6000220e:	nop
60002210:	.word	0x2000164d
60002214:	.word	0x20001676
60002218:	.word	0x200016c2
6000221c:	.word	0x2000172a
60002220:	.word	0x20001742
60002224:	.word	0x2000178b
60002228:	.word	0x200017d5
6000222c:	.word	0x200017fa
60002230:	.word	0x20001842
60002234:	.word	0x2027ff00
60002238:	.word	0x20001a92
6000223c:	.word	0x20001840
60002240:	.word	0x2027f000
60002244:	.word	0x2027ffc0
60002248:	.word	0x20001a83
6000224c:	.word	0x200016fb

60002250 <CrashReportClass::clear()>:
  cleardata(info);
60002250:	b.n	60001d4c <cleardata(arm_fault_info_struct*) [clone .constprop.0]>

60002252 <CrashReportClass::operator bool()>:
{
60002252:	push	{r3, lr}
	if (isvalid(info)) return true;
60002254:	bl	60001cf8 <isvalid(arm_fault_info_struct const*) [clone .constprop.0]>
}
60002258:	subs	r0, #0
6000225a:	it	ne
6000225c:	movne	r0, #1
6000225e:	pop	{r3, pc}

60002260 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)>:
	unsigned int i;
	unsigned int maxnum = MAX_AUDIO_MEMORY / AUDIO_BLOCK_SAMPLES / 2;

	//Serial.println("AudioStream initialize_memory");
	//delay(10);
	if (num > maxnum) num = maxnum;
60002260:	cmp.w	r1, #896	; 0x380
60002264:	it	cs
60002266:	movcs.w	r1, #896	; 0x380
{
6000226a:	push	{r3, r4, r5, r6, r7, lr}
6000226c:	mov	r5, r0
6000226e:	mov	r6, r1
	__disable_irq();
60002270:	cpsid	i
	memory_pool = data;
60002272:	ldr	r3, [pc, #108]	; (600022e0 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x80>)
	memory_pool_first_mask = 0;
60002274:	movs	r4, #0
	for (i=0; i < NUM_MASKS; i++) {
		memory_pool_available_mask[i] = 0;
60002276:	movs	r2, #112	; 0x70
	memory_pool = data;
60002278:	str	r0, [r3, #0]
		memory_pool_available_mask[i] = 0;
6000227a:	mov	r1, r4
	memory_pool_first_mask = 0;
6000227c:	ldr	r3, [pc, #100]	; (600022e4 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x84>)
		memory_pool_available_mask[i] = 0;
6000227e:	ldr	r0, [pc, #104]	; (600022e8 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x88>)
	memory_pool_first_mask = 0;
60002280:	strh	r4, [r3, #0]
		memory_pool_available_mask[i] = 0;
60002282:	bl	60002368 <__memset_veneer>
	}
	for (i=0; i < num; i++) {
60002286:	mov	r3, r4
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
60002288:	ldr	r1, [pc, #92]	; (600022e8 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x88>)
6000228a:	movs	r4, #1
	for (i=0; i < num; i++) {
6000228c:	cmp	r6, r3
6000228e:	bne.n	600022be <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x5e>
	}
	for (i=0; i < num; i++) {
60002290:	movs	r2, #0
		data[i].memory_pool_index = i;
60002292:	adds	r5, #2
60002294:	mov.w	r1, #260	; 0x104
	for (i=0; i < num; i++) {
60002298:	cmp	r3, r2
6000229a:	bne.n	600022d6 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x76>
	}
	if (update_scheduled == false) {
6000229c:	ldr	r3, [pc, #76]	; (600022ec <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x8c>)
6000229e:	ldrb	r4, [r3, #0]
600022a0:	cbnz	r4, 600022ba <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x5a>
		// if no hardware I/O has taken responsibility for update,
		// start a timer which will call update_all() at the correct rate
		IntervalTimer *timer = new IntervalTimer();
600022a2:	movs	r0, #8
600022a4:	bl	60002358 <___Znwj_veneer>
// some of these 4 possible instances may be in use by libraries.
class IntervalTimer {
private:
	static const uint32_t MAX_PERIOD = UINT32_MAX / (24000000 / 1000000);
public:
	constexpr IntervalTimer() {
600022a8:	movs	r2, #128	; 0x80
	// or false if all hardware timers are already in use.
	bool begin(void (*funct)(), float microseconds) {
		if (microseconds <= 0 || microseconds > MAX_PERIOD) return false;
		uint32_t cycles = (float)(24000000 / 1000000) * microseconds - 0.5f;
		if (cycles < 17) return false;
		return beginCycles(funct, cycles);
600022aa:	ldr	r1, [pc, #68]	; (600022f0 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x90>)
	constexpr IntervalTimer() {
600022ac:	strb	r2, [r0, #4]
600022ae:	str	r4, [r0, #0]
		return beginCycles(funct, cycles);
600022b0:	ldr	r2, [pc, #64]	; (600022f4 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x94>)
600022b2:	bl	600023c8 <___ZN13IntervalTimer11beginCyclesEPFvvEm_veneer>
		if (timer) {
			float usec = 1e6 * AUDIO_BLOCK_SAMPLES / AUDIO_SAMPLE_RATE_EXACT;
			timer->begin(update_all, usec);
			update_setup();
600022b6:	bl	60002390 <___ZN11AudioStream12update_setupEv_veneer>
		}
	}
	__enable_irq();
600022ba:	cpsie	i
}
600022bc:	pop	{r3, r4, r5, r6, r7, pc}
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
600022be:	lsrs	r0, r3, #5
600022c0:	and.w	r2, r3, #31
	for (i=0; i < num; i++) {
600022c4:	adds	r3, #1
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
600022c6:	ldr.w	r7, [r1, r0, lsl #2]
600022ca:	lsl.w	r2, r4, r2
600022ce:	orrs	r2, r7
600022d0:	str.w	r2, [r1, r0, lsl #2]
	for (i=0; i < num; i++) {
600022d4:	b.n	6000228c <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x2c>
		data[i].memory_pool_index = i;
600022d6:	mul.w	r0, r1, r2
600022da:	strh	r2, [r5, r0]
	for (i=0; i < num; i++) {
600022dc:	adds	r2, #1
600022de:	b.n	60002298 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x38>
600022e0:	.word	0x200068b4
600022e4:	.word	0x20007134
600022e8:	.word	0x200068bc
600022ec:	.word	0x200071f9
600022f0:	.word	0x00009435
600022f4:	.word	0x0001101b

600022f8 <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600022f8:	ldr	r3, [pc, #60]	; (60002338 <analog_init+0x40>)
600022fa:	ldr	r2, [r3, #108]	; 0x6c
600022fc:	orr.w	r2, r2, #196608	; 0x30000
60002300:	str	r2, [r3, #108]	; 0x6c
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
60002302:	ldr	r2, [r3, #108]	; 0x6c
60002304:	orr.w	r2, r2, #768	; 0x300
60002308:	str	r2, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
6000230a:	sub.w	r3, r3, #229376	; 0x38000
6000230e:	movw	r2, #1591	; 0x637
60002312:	str	r2, [r3, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60002314:	movs	r2, #160	; 0xa0
60002316:	str	r2, [r3, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) {
60002318:	ldr	r2, [r3, #72]	; 0x48
6000231a:	lsls	r2, r2, #24
6000231c:	bmi.n	60002318 <analog_init+0x20>
		//yield();
	}
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
6000231e:	ldr	r2, [pc, #28]	; (6000233c <analog_init+0x44>)
60002320:	movw	r3, #1591	; 0x637
60002324:	str	r3, [r2, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60002326:	movs	r3, #160	; 0xa0
60002328:	str	r3, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) {
6000232a:	ldr	r3, [r2, #72]	; 0x48
6000232c:	ands.w	r3, r3, #128	; 0x80
60002330:	bne.n	6000232a <analog_init+0x32>
		//yield();
	}
	calibrating = 0;
60002332:	ldr	r2, [pc, #12]	; (60002340 <analog_init+0x48>)
60002334:	strb	r3, [r2, #0]
}
60002336:	bx	lr
60002338:	.word	0x400fc000
6000233c:	.word	0x400c8000
60002340:	.word	0x20007201

60002344 <_init>:
60002344:	push	{r3, r4, r5, r6, r7, lr}
60002346:	nop
60002348:	pop	{r3, r4, r5, r6, r7}
6000234a:	pop	{r3}
6000234c:	mov	lr, r3
6000234e:	bx	lr

60002350 <__delay_veneer>:
60002350:	ldr.w	pc, [pc]	; 60002354 <__delay_veneer+0x4>
60002354:	.word	0x00008919

60002358 <___Znwj_veneer>:
60002358:	ldr.w	pc, [pc]	; 6000235c <___Znwj_veneer+0x4>
6000235c:	.word	0x0000a01f

60002360 <___ZN5Print7printlnEmi_veneer>:
60002360:	ldr.w	pc, [pc]	; 60002364 <___ZN5Print7printlnEmi_veneer+0x4>
60002364:	.word	0x000092eb

60002368 <__memset_veneer>:
60002368:	ldr.w	pc, [pc]	; 6000236c <__memset_veneer+0x4>
6000236c:	.word	0x00007529

60002370 <____libc_init_array_veneer>:
60002370:	ldr.w	pc, [pc]	; 60002374 <____libc_init_array_veneer+0x4>
60002374:	.word	0x0000b149

60002378 <___ZN5Print7printlnEv_veneer>:
60002378:	ldr.w	pc, [pc]	; 6000237c <___ZN5Print7printlnEv_veneer+0x4>
6000237c:	.word	0x00009e9b

60002380 <__sm_set_pool_veneer>:
60002380:	ldr.w	pc, [pc]	; 60002384 <__sm_set_pool_veneer+0x4>
60002384:	.word	0x00008b87

60002388 <___ZN5Print5printEmi_veneer>:
60002388:	ldr.w	pc, [pc]	; 6000238c <___ZN5Print5printEmi_veneer+0x4>
6000238c:	.word	0x000092cf

60002390 <___ZN11AudioStream12update_setupEv_veneer>:
60002390:	ldr.w	pc, [pc]	; 60002394 <___ZN11AudioStream12update_setupEv_veneer+0x4>
60002394:	.word	0x000097a1

60002398 <___ZN5Print5printEh_veneer>:
60002398:	ldr.w	pc, [pc]	; 6000239c <___ZN5Print5printEh_veneer+0x4>
6000239c:	.word	0x000092c7

600023a0 <___ZN5Print11printNumberEmhh_veneer>:
600023a0:	ldr.w	pc, [pc]	; 600023a4 <___ZN5Print11printNumberEmhh_veneer+0x4>
600023a4:	.word	0x00009edd

600023a8 <__usb_init_serialnumber_veneer>:
600023a8:	ldr.w	pc, [pc]	; 600023ac <__usb_init_serialnumber_veneer+0x4>
600023ac:	.word	0x00009045

600023b0 <__set_arm_clock_veneer>:
600023b0:	ldr.w	pc, [pc]	; 600023b4 <__set_arm_clock_veneer+0x4>
600023b4:	.word	0x00007d59

600023b8 <__pwm_init_veneer>:
600023b8:	ldr.w	pc, [pc]	; 600023bc <__pwm_init_veneer+0x4>
600023bc:	.word	0x00008dc5

600023c0 <___ZN5Print10printFloatEdh_veneer>:
600023c0:	ldr.w	pc, [pc]	; 600023c4 <___ZN5Print10printFloatEdh_veneer+0x4>
600023c4:	.word	0x00009ef1

600023c8 <___ZN13IntervalTimer11beginCyclesEPFvvEm_veneer>:
600023c8:	ldr.w	pc, [pc]	; 600023cc <___ZN13IntervalTimer11beginCyclesEPFvvEm_veneer+0x4>
600023cc:	.word	0x0000a0c1

600023d0 <___ZN5Print5printEPKc_veneer>:
600023d0:	ldr.w	pc, [pc]	; 600023d4 <___ZN5Print5printEPKc_veneer+0x4>
600023d4:	.word	0x000092bf

600023d8 <___ZN5Print5printEl_veneer>:
600023d8:	ldr.w	pc, [pc]	; 600023dc <___ZN5Print5printEl_veneer+0x4>
600023dc:	.word	0x00009e89

600023e0 <___ZN5Print7printlnEPKc_veneer>:
600023e0:	ldr.w	pc, [pc]	; 600023e4 <___ZN5Print7printlnEPKc_veneer+0x4>
600023e4:	.word	0x000092d7

600023e8 <__main_veneer>:
600023e8:	ldr.w	pc, [pc]	; 600023ec <__main_veneer+0x4>
600023ec:	.word	0x00009425

600023f0 <__frame_dummy_init_array_entry>:
600023f0:	E.......U...A...
60002400:	....

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <register_tm_clones>:
{   uint32_t tx=rtc_get();
    int32_t h_ = (int32_t) tx/SECS_PER_HOUR;  // use hours since 1970 as measures
    if(hour_== h_) return 0;
    hour_ = h_;
    return 1;
}
      20:	ldr	r0, [pc, #20]	; (38 <_teensy_model_identifier+0x13>)
      22:	ldr	r3, [pc, #24]	; (3c <_teensy_model_identifier+0x17>)
  }
  if (!dir.isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_vwd = dir;
      24:	subs	r3, r3, r0
  return true;

fail:
  return false;
      26:	lsrs	r1, r3, #31
  m_vwd = dir;
      28:	add.w	r1, r1, r3, asr #2
      2c:	asrs	r1, r1, #1
      2e:	beq.n	36 <_teensy_model_identifier+0x11>
      30:	ldr	r3, [pc, #12]	; (40 <_teensy_model_identifier+0x1b>)
      32:	cbz	r3, 36 <_teensy_model_identifier+0x11>
      34:	bx	r3
}
      36:	bx	lr
      38:	.word	0x200026c0
	SNVS_LPSRTCMR = t >> 17;
	// start the SRTC
	SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
	while (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)); // wait
	// start the RTC and sync it to the SRTC
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
      3c:	.word	0x200026c0
}
      40:	.word	0x00000000

00000044 <frame_dummy>:
  m_vwd = dir;
  return true;

fail:
  return false;
}
      44:	push	{r3, lr}
      46:	ldr	r3, [pc, #20]	; (5c <frame_dummy+0x18>)
  return false;
      48:	cbz	r3, 52 <frame_dummy+0xe>
      4a:	ldr	r1, [pc, #20]	; (60 <frame_dummy+0x1c>)
	} else {
		cdPin_ = 0xff;
		return false;
	}
	return true;
}
      4c:	ldr	r0, [pc, #20]	; (64 <frame_dummy+0x20>)
      4e:	nop.w
      str = fsFmtField(str, 15 * (tz % 4), 0);
      str = fsFmtField(str, tz / 4, ':');
      *--str = sign;
    }
    *--str = 'C';
    *--str = 'T';
      52:	ldmia.w	sp!, {r3, lr}
    *--str = 'U';
      56:	b.w	20 <register_tm_clones>
    if (tz) {
      5a:	nop
      5c:	.word	0x00000000
      sign = '+';
      60:	.word	0x20006d0c
  } else if (dir->m_xFile) {
    m_xFile = new (m_fileMem) ExFatFile;
    if (m_xFile->open(dir->m_xFile, path, oflag)) {
      return true;
    }
    m_xFile = nullptr;
      64:	.word	0x60016000

00000068 <Print::availableForWrite()>:
	virtual int availableForWrite(void)		{ return 0; }
      68:	movs	r0, #0
      6a:	bx	lr

0000006c <File::write(unsigned char const*, unsigned int)>:
		return (f) ? f->read(buf, nbyte) : 0;
	}
	// Write bytes to a file
	virtual size_t write(const uint8_t *buf, size_t size) {
		// override print version
		return (f) ? f->write((void*)buf, size) : 0;
      6c:	ldr	r0, [r0, #16]
      6e:	cbz	r0, 76 <File::write(unsigned char const*, unsigned int)+0xa>
      70:	ldr	r3, [r0, #0]
      72:	ldr	r3, [r3, #12]
      74:	bx	r3
	}
      76:	bx	lr

00000078 <File::available()>:
	size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
	}
	// Returns the number of bytes which may be read from a file
	int available() {
		return (f) ? f->available() : 0;
      78:	ldr	r0, [r0, #16]
      7a:	cbz	r0, 82 <File::available()+0xa>
      7c:	ldr	r3, [r0, #0]
      7e:	ldr	r3, [r3, #16]
      80:	bx	r3
	}
      82:	bx	lr

00000084 <File::peek()>:
	int peek() {
		return (f) ? f->peek() : -1;
      84:	ldr	r0, [r0, #16]
      86:	cbz	r0, 8e <File::peek()+0xa>
      88:	ldr	r3, [r0, #0]
      8a:	ldr	r3, [r3, #20]
      8c:	bx	r3
	}
      8e:	mov.w	r0, #4294967295
      92:	bx	lr

00000094 <File::flush()>:
	void flush() {
		if (f) f->flush();
      94:	ldr	r0, [r0, #16]
      96:	cbz	r0, 9e <File::flush()+0xa>
      98:	ldr	r3, [r0, #0]
      9a:	ldr	r3, [r3, #24]
      9c:	bx	r3
	}
      9e:	bx	lr

000000a0 <File::read()>:
		return (f) ? f->setModifyTime(tm) : false;
	}
	bool seek(uint64_t pos) {
		return seek(pos, SeekSet);
	}
	int read() {
      a0:	push	{r0, r1, r2, lr}
		if (!f) return -1;
      a2:	ldr	r0, [r0, #16]
      a4:	cbnz	r0, b0 <File::read()+0x10>
      a6:	mov.w	r0, #4294967295
		unsigned char b;
		if (f->read(&b, 1) < 1) return -1;
		return b;
	}
      aa:	add	sp, #12
      ac:	ldr.w	pc, [sp], #4
		if (f->read(&b, 1) < 1) return -1;
      b0:	ldr	r3, [r0, #0]
      b2:	movs	r2, #1
      b4:	add.w	r1, sp, #7
      b8:	ldr	r3, [r3, #8]
      ba:	blx	r3
      bc:	cmp	r0, #0
      be:	beq.n	a6 <File::read()+0x6>
		return b;
      c0:	ldrb.w	r0, [sp, #7]
      c4:	b.n	aa <File::read()+0xa>

000000c6 <File::write(unsigned char)>:
	size_t write(uint8_t b) {
      c6:	push	{r0, r1, r2, lr}
		return (f) ? f->write(&b, 1) : 0;
      c8:	ldr	r0, [r0, #16]
	size_t write(uint8_t b) {
      ca:	strb.w	r1, [sp, #7]
		return (f) ? f->write(&b, 1) : 0;
      ce:	cbz	r0, dc <File::write(unsigned char)+0x16>
      d0:	ldr	r3, [r0, #0]
      d2:	movs	r2, #1
      d4:	add.w	r1, sp, #7
      d8:	ldr	r3, [r3, #12]
      da:	blx	r3
	}
      dc:	add	sp, #12
      de:	ldr.w	pc, [sp], #4
	...

000000e4 <File::~File()>:
	virtual ~File() {
      e4:	ldr	r3, [pc, #36]	; (10c <File::~File()+0x28>)
      e6:	push	{r4, lr}
      e8:	mov	r4, r0
      ea:	str	r3, [r0, #0]
		if (f) dec_refcount();
      ec:	ldr	r0, [r0, #16]
      ee:	cbz	r0, 108 <File::~File()+0x24>
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	using Print::write;
private:
	void dec_refcount() {
		if (--(f->refcount) == 0) {
      f0:	ldr	r3, [r0, #4]
      f2:	subs	r3, #1
      f4:	str	r3, [r0, #4]
      f6:	cbnz	r3, 108 <File::~File()+0x24>
			f->close();
      f8:	ldr	r3, [r0, #0]
      fa:	ldr	r3, [r3, #44]	; 0x2c
      fc:	blx	r3
			delete f;
      fe:	ldr	r0, [r4, #16]
     100:	cbz	r0, 108 <File::~File()+0x24>
     102:	ldr	r3, [r0, #0]
     104:	ldr	r3, [r3, #4]
     106:	blx	r3
	}
     108:	mov	r0, r4
     10a:	pop	{r4, pc}
     10c:	.word	0x200006b8

00000110 <I2S_32::isr32()>:
//  char * dest_left, *dest_right;
  
  int16_t *dest_left, *dest_right; 
  audio_block_t *left, *right;

  daddr = (uint32_t)(dma.TCD->DADDR);
     110:	ldr	r3, [pc, #120]	; (18c <I2S_32::isr32()+0x7c>)
{
     112:	push	{r4, r5, r6, lr}
  daddr = (uint32_t)(dma.TCD->DADDR);
     114:	ldr	r2, [r3, #0]
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
     116:	ldrb	r1, [r3, #4]
     118:	ldr	r3, [pc, #116]	; (190 <I2S_32::isr32()+0x80>)
     11a:	ldr	r2, [r2, #16]
     11c:	strb	r1, [r3, #31]

  dma.clearInterrupt();
  
  if (daddr < (uint32_t)i2s_rx_buffer_32 + sizeof(i2s_rx_buffer_32) / 2) {
     11e:	ldr	r3, [pc, #116]	; (194 <I2S_32::isr32()+0x84>)
     120:	cmp	r2, r3
     122:	bcs.n	13a <I2S_32::isr32()+0x2a>
    // DMA is receiving to the first half of the buffer
    // need to remove data from the second half
    src = (int32_t *)&i2s_rx_buffer_32[AUDIO_BLOCK_SAMPLES];
    end = (int32_t *)&i2s_rx_buffer_32[AUDIO_BLOCK_SAMPLES*2];
    if (I2S_32::update_responsibility) AudioStream::update_all();
     124:	ldr	r2, [pc, #112]	; (198 <I2S_32::isr32()+0x88>)
     126:	ldrb	r2, [r2, #0]
     128:	cbz	r2, 134 <I2S_32::isr32()+0x24>
	void transmit(audio_block_t *block, unsigned char index = 0);
	audio_block_t * receiveReadOnly(unsigned int index = 0);
	audio_block_t * receiveWritable(unsigned int index = 0);
	static bool update_setup(void);
	static void update_stop(void);
	static void update_all(void) { NVIC_SET_PENDING(IRQ_SOFTWARE); }
     12a:	mov.w	r2, #3758153728	; 0xe000e000
     12e:	movs	r1, #64	; 0x40
     130:	str.w	r1, [r2, #520]	; 0x208
    end = (int32_t *)&i2s_rx_buffer_32[AUDIO_BLOCK_SAMPLES*2];
     134:	add.w	r4, r3, #512	; 0x200
     138:	b.n	140 <I2S_32::isr32()+0x30>
  } else {
    // DMA is receiving to the second half of the buffer
    // need to remove data from the first half
    src = (int32_t *)&i2s_rx_buffer_32[0];
    end = (int32_t *)&i2s_rx_buffer_32[AUDIO_BLOCK_SAMPLES];
     13a:	mov	r4, r3
    src = (int32_t *)&i2s_rx_buffer_32[0];
     13c:	sub.w	r3, r3, #512	; 0x200
  }
  
   // extract 16/32 bit from 32 bit I2S buffer but shift to right first
   // there will be two buffers with each having "AUDIO_BLOCK_SAMPLES_NCH" samples
  left  = I2S_32::block_left;
     140:	ldr	r2, [pc, #88]	; (19c <I2S_32::isr32()+0x8c>)
     142:	ldr	r1, [r2, #0]
  right = I2S_32::block_right;
  if (left != NULL && right != NULL) {
     144:	cbz	r1, 188 <I2S_32::isr32()+0x78>
  right = I2S_32::block_right;
     146:	ldr	r2, [pc, #88]	; (1a0 <I2S_32::isr32()+0x90>)
     148:	ldr	r2, [r2, #0]
  if (left != NULL && right != NULL) {
     14a:	cbz	r2, 188 <I2S_32::isr32()+0x78>
    offset = I2S_32::block_offset;
     14c:	ldr	r5, [pc, #84]	; (1a4 <I2S_32::isr32()+0x94>)
     14e:	ldrh	r0, [r5, #0]
    if (offset <= AUDIO_BLOCK_SAMPLES/2) {
     150:	cmp	r0, #64	; 0x40
     152:	bhi.n	188 <I2S_32::isr32()+0x78>
      dest_left  = &(left->data[offset]);
     154:	adds	r6, r0, #2
      dest_right = &(right->data[offset]);
      I2S_32::block_offset = offset + AUDIO_BLOCK_SAMPLES/2; 
     156:	adds	r0, #64	; 0x40
      dest_left  = &(left->data[offset]);
     158:	add.w	r1, r1, r6, lsl #1
      I2S_32::block_offset = offset + AUDIO_BLOCK_SAMPLES/2; 
     15c:	strh	r0, [r5, #0]
      dest_right = &(right->data[offset]);
     15e:	add.w	r2, r2, r6, lsl #1

      do {
        *dest_left++  = (*src++)>>I2S_32::shift; // left side may be 16 or 32 bit
     162:	ldr	r5, [pc, #68]	; (1a8 <I2S_32::isr32()+0x98>)
     164:	ldr.w	r0, [r3], #8
     168:	ldrsh.w	r6, [r5]
        *dest_right++ = (*src++)>>I2S_32::shift;
      } while (src < end);
     16c:	cmp	r4, r3
        *dest_left++  = (*src++)>>I2S_32::shift; // left side may be 16 or 32 bit
     16e:	asr.w	r0, r0, r6
     172:	strh.w	r0, [r1], #2
        *dest_right++ = (*src++)>>I2S_32::shift;
     176:	ldr.w	r0, [r3, #-4]
     17a:	ldrsh.w	r6, [r5]
     17e:	asr.w	r0, r0, r6
     182:	strh.w	r0, [r2], #2
      } while (src < end);
     186:	bhi.n	164 <I2S_32::isr32()+0x54>
    }
  }
}
     188:	pop	{r4, r5, r6, pc}
     18a:	nop
     18c:	.word	0x2000698c
     190:	.word	0x400e8000
     194:	.word	0x20006698
     198:	.word	0x200071fe
     19c:	.word	0x20006984
     1a0:	.word	0x20006988
     1a4:	.word	0x2000713a
     1a8:	.word	0x20002184

000001ac <I2S_32::update()>:

void I2S_32::update(void)
{
     1ac:	push	{r3, r4, r5, r6, r7, lr}
     1ae:	mov	r6, r0
  audio_block_t *new_left=NULL, *new_right=NULL, *out_left=NULL, *out_right=NULL;

  // allocate 2 new blocks, but if one fails, allocate neither
  new_left = allocate();
     1b0:	bl	94a4 <AudioStream::allocate()>
  if (new_left != NULL) {
     1b4:	mov	r4, r0
     1b6:	cbz	r0, 206 <I2S_32::update()+0x5a>
    new_right = allocate();
     1b8:	bl	94a4 <AudioStream::allocate()>
    if (new_right == NULL) {
     1bc:	mov	r5, r0
     1be:	cbnz	r0, 1c8 <I2S_32::update()+0x1c>
      release(new_left);
     1c0:	mov	r0, r4
      new_left = NULL;
     1c2:	mov	r4, r5
      release(new_left);
     1c4:	bl	9534 <AudioStream::release(audio_block_struct*)>
    }
  }
  __disable_irq();
     1c8:	cpsid	i
  if (block_offset >= AUDIO_BLOCK_SAMPLES) {
     1ca:	ldr	r3, [pc, #96]	; (22c <I2S_32::update()+0x80>)
     1cc:	ldrh	r2, [r3, #0]
     1ce:	cmp	r2, #127	; 0x7f
     1d0:	bls.n	20a <I2S_32::update()+0x5e>
    // the DMA filled 2 blocks, so grab them and get the
    // 2 new blocks to the DMA, as quickly as possible

    out_left = block_left;
     1d2:	ldr	r2, [pc, #92]	; (230 <I2S_32::update()+0x84>)
     1d4:	ldr	r7, [r2, #0]
    block_left = new_left;
     1d6:	str	r4, [r2, #0]
    out_right = block_right;
     1d8:	ldr	r2, [pc, #88]	; (234 <I2S_32::update()+0x88>)
     1da:	ldr	r4, [r2, #0]
    block_right = new_right;
     1dc:	str	r5, [r2, #0]
    block_offset = 0;
     1de:	movs	r2, #0
     1e0:	strh	r2, [r3, #0]
    __enable_irq();
     1e2:	cpsie	i
    
    // then transmit the DMA's former blocks
    transmit(out_left, 0);
     1e4:	mov	r1, r7
     1e6:	mov	r0, r6
     1e8:	bl	9584 <AudioStream::transmit(audio_block_struct*, unsigned char)>
    release(out_left);
     1ec:	mov	r0, r7
     1ee:	bl	9534 <AudioStream::release(audio_block_struct*)>
    transmit(out_right, 1);
     1f2:	mov	r0, r6
     1f4:	movs	r2, #1
     1f6:	mov	r1, r4
     1f8:	bl	9584 <AudioStream::transmit(audio_block_struct*, unsigned char)>
    release(out_right);
     1fc:	mov	r0, r4
    // The DMA didn't fill blocks, and we could not allocate
    // memory... the system is likely starving for memory!
    // Sadly, there's nothing we can do.
    __enable_irq();
  }
}
     1fe:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      release(new_right);
     202:	b.w	9534 <AudioStream::release(audio_block_struct*)>
  audio_block_t *new_left=NULL, *new_right=NULL, *out_left=NULL, *out_right=NULL;
     206:	mov	r5, r0
     208:	b.n	1c8 <I2S_32::update()+0x1c>
  } else if (new_left != NULL) {
     20a:	cbz	r4, 21a <I2S_32::update()+0x6e>
    if (block_left == NULL) {
     20c:	ldr	r1, [pc, #32]	; (230 <I2S_32::update()+0x84>)
     20e:	ldr	r2, [r1, #0]
     210:	cbnz	r2, 21e <I2S_32::update()+0x72>
      block_left = new_left;
     212:	str	r4, [r1, #0]
      block_right = new_right;
     214:	ldr	r1, [pc, #28]	; (234 <I2S_32::update()+0x88>)
      block_offset = 0;
     216:	strh	r2, [r3, #0]
      block_right = new_right;
     218:	str	r5, [r1, #0]
    __enable_irq();
     21a:	cpsie	i
}
     21c:	pop	{r3, r4, r5, r6, r7, pc}
      __enable_irq();
     21e:	cpsie	i
      release(new_left);
     220:	mov	r0, r4
     222:	bl	9534 <AudioStream::release(audio_block_struct*)>
      release(new_right);
     226:	mov	r0, r5
     228:	b.n	1fe <I2S_32::update()+0x52>
     22a:	nop
     22c:	.word	0x2000713a
     230:	.word	0x20006984
     234:	.word	0x20006988

00000238 <getTime()>:
  static EXTMEM audio_block_t data[num]; \
  AudioStream::initialize_memory(data, num); \
  })

#define SDCARD_CS_PIN    BUILTIN_SDCARD
time_t getTime() { return Teensy3Clock.get(); }
     238:	push	{r3, lr}
uint32_t makeTime(const DateTimeFields &tm); // convert DateTimeFields to 32 bit time

class teensy3_clock_class
{
public:
        static unsigned long get(void) __attribute__((always_inline)) { return rtc_get(); }
     23a:	bl	8b10 <rtc_get>
     23e:	movs	r1, #0
     240:	pop	{r3, pc}

00000242 <File::~File()>:
	virtual ~File() {
     242:	push	{r4, lr}
     244:	mov	r4, r0
	}
     246:	bl	e4 <File::~File()>
     24a:	movs	r1, #20
     24c:	mov	r0, r4
     24e:	bl	a022 <operator delete(void*, unsigned int)>
     252:	mov	r0, r4
     254:	pop	{r4, pc}

00000256 <DMAChannel::~DMAChannel()>:
	~DMAChannel() {
     256:	push	{r4, lr}
     258:	mov	r4, r0
		release();
     25a:	bl	9270 <DMAChannel::release()>
	}
     25e:	mov	r0, r4
     260:	pop	{r4, pc}

00000262 <Print::println(char const*) [clone .isra.0]>:
	size_t println(const char s[])			{ return print(s) + println(); }
     262:	push	{r0, r1, r4, lr}
     264:	mov	r4, r0
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     266:	mov	r0, r1
     268:	str	r1, [sp, #4]
     26a:	bl	b240 <strlen>
     26e:	ldr	r3, [r4, #0]
     270:	mov	r2, r0
     272:	ldr	r1, [sp, #4]
     274:	mov	r0, r4
     276:	ldr	r3, [r3, #4]
     278:	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
     27a:	mov	r0, r4
     27c:	add	sp, #8
     27e:	ldmia.w	sp!, {r4, lr}
     282:	b.w	9e9a <Print::println()>
	...

00000288 <AudioStream::AudioStream(unsigned char, audio_block_struct**)>:
		num_inputs(ninput), inputQueue(iqueue) {
     288:	ldr	r3, [pc, #56]	; (2c4 <AudioStream::AudioStream(unsigned char, audio_block_struct**)+0x3c>)
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
     28a:	push	{r4, lr}
     28c:	mov	r4, r0
     28e:	mov	r0, r2
		num_inputs(ninput), inputQueue(iqueue) {
     290:	str	r3, [r4, #0]
			active = false;
     292:	movs	r3, #0
		num_inputs(ninput), inputQueue(iqueue) {
     294:	strb	r1, [r4, #9]
     296:	str	r2, [r4, #16]
				inputQueue[i] = NULL;
     298:	lsls	r2, r1, #2
			active = false;
     29a:	strb	r3, [r4, #8]
				inputQueue[i] = NULL;
     29c:	mov	r1, r3
			destination_list = NULL;
     29e:	str	r3, [r4, #12]
				inputQueue[i] = NULL;
     2a0:	bl	7528 <memset>
			if (first_update == NULL) {
     2a4:	ldr	r2, [pc, #32]	; (2c8 <AudioStream::AudioStream(unsigned char, audio_block_struct**)+0x40>)
     2a6:	ldr	r3, [r2, #0]
     2a8:	cbnz	r3, 2b8 <AudioStream::AudioStream(unsigned char, audio_block_struct**)+0x30>
				first_update = this;
     2aa:	str	r4, [r2, #0]
			next_update = NULL;
     2ac:	movs	r3, #0
		}
     2ae:	mov	r0, r4
			next_update = NULL;
     2b0:	str	r3, [r4, #20]
			cpu_cycles = 0;
     2b2:	str	r3, [r4, #4]
			numConnections = 0;
     2b4:	strb	r3, [r4, #10]
		}
     2b6:	pop	{r4, pc}
				for (p=first_update; p->next_update; p = p->next_update) ;
     2b8:	mov	r2, r3
     2ba:	ldr	r3, [r3, #20]
     2bc:	cmp	r3, #0
     2be:	bne.n	2b8 <AudioStream::AudioStream(unsigned char, audio_block_struct**)+0x30>
				p->next_update = this;
     2c0:	str	r4, [r2, #20]
     2c2:	b.n	2ac <AudioStream::AudioStream(unsigned char, audio_block_struct**)+0x24>
     2c4:	.word	0x200005ec
     2c8:	.word	0x200068b8
		usb_midi_msg_data1 = len;
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
		if (usb_midi_handleSysExPartial) {
			(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, len, 1);
     2cc:	.word	0x00000000

000002d0 <setAudioFrequency(int)>:
  {
      // PLL between 27*24 = 648MHz und 54*24=1296MHz
    int n1 = 4; //SAI prescaler 4 => (n1*n2) = multiple of 4
    int n2 = 1 + (24000000 * 27) / (fs * 256 * n1);

    double C = ((double)fs * 256 * n1 * n2) / 24000000;
     2d0:	vmov	s15, r0
    int n2 = 1 + (24000000 * 27) / (fs * 256 * n1);
     2d4:	lsls	r3, r0, #10
    int c0 = C;
    int c2 = 10000;
    int c1 = C * c2 - (c0 * c2);
     2d6:	movw	r2, #10000	; 0x2710
    double C = ((double)fs * 256 * n1 * n2) / 24000000;
     2da:	vcvt.f64.s32	d7, s15
     2de:	vldr	d6, [pc, #144]	; 370 <setAudioFrequency(int)+0xa0>
  {
     2e2:	push	{r4, lr}
    int n2 = 1 + (24000000 * 27) / (fs * 256 * n1);
     2e4:	ldr	r4, [pc, #160]	; (388 <setAudioFrequency(int)+0xb8>)
    double C = ((double)fs * 256 * n1 * n2) / 24000000;
     2e6:	vmul.f64	d7, d7, d6
     2ea:	vmov.f64	d6, #16	; 0x40800000  4.0
    int n2 = 1 + (24000000 * 27) / (fs * 256 * n1);
     2ee:	sdiv	r4, r4, r3
     2f2:	adds	r3, r4, #1
    double C = ((double)fs * 256 * n1 * n2) / 24000000;
     2f4:	vmul.f64	d7, d7, d6
      // clear SAI1_CLK register locations
    CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
        | CCM_CSCMR1_SAI1_CLK_SEL(2); // &0x03 // (0,1,2): PLL3PFD0, PLL5, PLL4
    CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
        | CCM_CS1CDR_SAI1_CLK_PRED(n1-1) // &0x07
        | CCM_CS1CDR_SAI1_CLK_PODF(n2-1); // &0x3f
     2f8:	and.w	r4, r4, #63	; 0x3f
    int n2 = 1 + (24000000 * 27) / (fs * 256 * n1);
     2fc:	vmov	s12, r3
    double C = ((double)fs * 256 * n1 * n2) / 24000000;
     300:	vcvt.f64.s32	d6, s12
     304:	vldr	d5, [pc, #112]	; 378 <setAudioFrequency(int)+0xa8>
     308:	vmul.f64	d7, d7, d6
     30c:	vdiv.f64	d6, d7, d5
    int c1 = C * c2 - (c0 * c2);
     310:	vldr	d5, [pc, #108]	; 380 <setAudioFrequency(int)+0xb0>
    int c0 = C;
     314:	vcvt.s32.f64	s15, d6
     318:	vmov	r0, s15
    int c1 = C * c2 - (c0 * c2);
     31c:	mul.w	r3, r2, r0
     320:	vmov	s14, r3
     324:	vcvt.f64.s32	d7, s14
     328:	vfnms.f64	d7, d6, d5
    set_audioClock(c0, c1, c2);
     32c:	vcvt.s32.f64	s15, d7
     330:	vmov	r1, s15
     334:	bl	104f0 <___Z14set_audioClockilm_veneer>
    CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
     338:	ldr	r2, [pc, #80]	; (38c <setAudioFrequency(int)+0xbc>)
     33a:	ldr	r3, [r2, #28]
     33c:	bic.w	r3, r3, #3072	; 0xc00
        | CCM_CSCMR1_SAI1_CLK_SEL(2); // &0x03 // (0,1,2): PLL3PFD0, PLL5, PLL4
     340:	orr.w	r3, r3, #2048	; 0x800
    CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
     344:	str	r3, [r2, #28]
    CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
     346:	ldr	r3, [r2, #40]	; 0x28
     348:	bic.w	r3, r3, #510	; 0x1fe
     34c:	bic.w	r3, r3, #1
        | CCM_CS1CDR_SAI1_CLK_PODF(n2-1); // &0x3f
     350:	orrs	r3, r4
     352:	orr.w	r3, r3, #192	; 0xc0
    CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
     356:	str	r3, [r2, #40]	; 0x28
    // Select MCLK
    IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
     358:	sub.w	r2, r2, #327680	; 0x50000
     35c:	ldr	r3, [r2, #4]
      & ~(IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL_MASK))
      | (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));
     35e:	bic.w	r3, r3, #524288	; 0x80000
     362:	bic.w	r3, r3, #7
     366:	orr.w	r3, r3, #524288	; 0x80000
    IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
     36a:	str	r3, [r2, #4]

  }
     36c:	pop	{r4, pc}
     36e:	nop
     370:	.word	0x00000000
     374:	.word	0x40700000
     378:	.word	0x00000000
     37c:	.word	0x4176e360
     380:	.word	0x00000000
     384:	.word	0x40c38800
     388:	.word	0x269fb200
     38c:	.word	0x400fc000

00000390 <I2S_32::config_i2s()>:

//#define AUDIO_SAMPLE_RATE_EXACT 44100 // used for initialization

void I2S_32::config_i2s(void)
{
	CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
     390:	ldr	r2, [pc, #104]	; (3fc <I2S_32::config_i2s()+0x6c>)
{
     392:	push	{r3, r4, r5, lr}
	CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
     394:	ldr	r3, [r2, #124]	; 0x7c

	// if either transmitter or receiver is enabled, do nothing
	if (I2S1_TCSR & I2S_TCSR_TE) return;
     396:	ldr	r4, [pc, #104]	; (400 <I2S_32::config_i2s()+0x70>)
	CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
     398:	orr.w	r3, r3, #786432	; 0xc0000
     39c:	str	r3, [r2, #124]	; 0x7c
	if (I2S1_TCSR & I2S_TCSR_TE) return;
     39e:	ldr	r3, [r4, #8]
     3a0:	cmp	r3, #0
     3a2:	blt.n	3fa <I2S_32::config_i2s()+0x6a>
	if (I2S1_RCSR & I2S_RCSR_RE) return;
     3a4:	ldr.w	r3, [r4, #136]	; 0x88
     3a8:	cmp	r3, #0
     3aa:	blt.n	3fa <I2S_32::config_i2s()+0x6a>
//PLL:
	int fs = AUDIO_SAMPLE_RATE_EXACT;
 
  setAudioFrequency(fs);
     3ac:	movw	r0, #44100	; 0xac44
	CORE_PIN20_CONFIG = 3;  //1:RX_SYNC

	int rsync = 0;
	int tsync = 1;

	I2S1_TMR = 0;
     3b0:	movs	r5, #0
  setAudioFrequency(fs);
     3b2:	bl	2d0 <setAudioFrequency(int)>
	CORE_PIN23_CONFIG = 3;  //1:MCLK
     3b6:	ldr	r3, [pc, #76]	; (404 <I2S_32::config_i2s()+0x74>)
     3b8:	movs	r2, #3
	//I2S1_TCSR = (1<<25); //Reset
	I2S1_TCR1 = I2S_TCR1_RFW(1);
     3ba:	movs	r0, #1
	I2S1_TCR2 = I2S_TCR2_SYNC(tsync) | I2S_TCR2_BCP // sync=0; tx is async;
		    | (I2S_TCR2_BCD | I2S_TCR2_DIV((1)) | I2S_TCR2_MSEL(1));
	I2S1_TCR3 = I2S_TCR3_TCE;
     3bc:	mov.w	r1, #65536	; 0x10000
	CORE_PIN23_CONFIG = 3;  //1:MCLK
     3c0:	str.w	r2, [r3, #288]	; 0x120
	CORE_PIN21_CONFIG = 3;  //1:RX_BCLK
     3c4:	str.w	r2, [r3, #296]	; 0x128
	CORE_PIN20_CONFIG = 3;  //1:RX_SYNC
     3c8:	str.w	r2, [r3, #292]	; 0x124
	I2S1_TCR2 = I2S_TCR2_SYNC(tsync) | I2S_TCR2_BCP // sync=0; tx is async;
     3cc:	ldr	r3, [pc, #56]	; (408 <I2S_32::config_i2s()+0x78>)
	I2S1_TMR = 0;
     3ce:	str	r5, [r4, #96]	; 0x60
	I2S1_TCR4 = I2S_TCR4_FRSZ((2-1)) | I2S_TCR4_SYWD((32-1)) | I2S_TCR4_MF
     3d0:	ldr	r2, [pc, #56]	; (40c <I2S_32::config_i2s()+0x7c>)
	I2S1_TCR1 = I2S_TCR1_RFW(1);
     3d2:	str	r0, [r4, #12]
	I2S1_TCR2 = I2S_TCR2_SYNC(tsync) | I2S_TCR2_BCP // sync=0; tx is async;
     3d4:	str	r3, [r4, #16]
		    | I2S_TCR4_FSE | I2S_TCR4_FSP | I2S_TCR4_FSD;
	I2S1_TCR5 = I2S_TCR5_WNW((32-1)) | I2S_TCR5_W0W((32-1)) | I2S_TCR5_FBT((32-1));
     3d6:	ldr	r3, [pc, #56]	; (410 <I2S_32::config_i2s()+0x80>)
	I2S1_TCR3 = I2S_TCR3_TCE;
     3d8:	str	r1, [r4, #20]
	I2S1_TCR4 = I2S_TCR4_FRSZ((2-1)) | I2S_TCR4_SYWD((32-1)) | I2S_TCR4_MF
     3da:	str	r2, [r4, #24]
	I2S1_TCR5 = I2S_TCR5_WNW((32-1)) | I2S_TCR5_W0W((32-1)) | I2S_TCR5_FBT((32-1));
     3dc:	str	r3, [r4, #28]

	I2S1_RMR = 0;
     3de:	str.w	r5, [r4, #224]	; 0xe0
	//I2S1_RCSR = (1<<25); //Reset
	I2S1_RCR1 = I2S_RCR1_RFW(1);
     3e2:	str.w	r0, [r4, #140]	; 0x8c
	I2S1_RCR2 = I2S_RCR2_SYNC(rsync) | I2S_RCR2_BCP  // sync=0; rx is async;
     3e6:	add.w	r0, r0, #117440512	; 0x7000000
     3ea:	str.w	r0, [r4, #144]	; 0x90
  	    | (I2S_RCR2_BCD | I2S_RCR2_DIV((1)) | I2S_RCR2_MSEL(1));
	I2S1_RCR3 = I2S_RCR3_RCE;
     3ee:	str.w	r1, [r4, #148]	; 0x94
	I2S1_RCR4 = I2S_RCR4_FRSZ((2-1)) | I2S_RCR4_SYWD((32-1)) | I2S_RCR4_MF
     3f2:	str.w	r2, [r4, #152]	; 0x98
		    | I2S_RCR4_FSE | I2S_RCR4_FSP | I2S_RCR4_FSD;
	I2S1_RCR5 = I2S_RCR5_WNW((32-1)) | I2S_RCR5_W0W((32-1)) | I2S_RCR5_FBT((32-1));
     3f6:	str.w	r3, [r4, #156]	; 0x9c
}
     3fa:	pop	{r3, r4, r5, pc}
     3fc:	.word	0x400fc000
     400:	.word	0x40384000
     404:	.word	0x401f8000
     408:	.word	0x47000001
     40c:	.word	0x00011f1b
     410:	.word	0x1f1f1f00

00000414 <I2S_32::begin()>:
{ 
     414:	push	{r3, r4, r5, lr}
  dma.begin(true); // Allocate the DMA channel first
     416:	ldr	r4, [pc, #148]	; (4ac <I2S_32::begin()+0x98>)
{ 
     418:	mov	r5, r0
  dma.begin(true); // Allocate the DMA channel first
     41a:	movs	r1, #1
     41c:	mov	r0, r4
     41e:	bl	91d4 <DMAChannel::begin(bool)>
  config_i2s();
     422:	mov	r0, r5
     424:	bl	390 <I2S_32::config_i2s()>
	CORE_PIN8_CONFIG  = 3;  //1:RX_DATA0
     428:	ldr	r3, [pc, #132]	; (4b0 <I2S_32::begin()+0x9c>)
     42a:	movs	r2, #3
  dma.TCD->NBYTES_MLNO = 4;
     42c:	movs	r1, #4
  dma.TCD->DADDR = i2s_rx_buffer_32;
     42e:	ldr	r0, [pc, #132]	; (4b4 <I2S_32::begin()+0xa0>)
	CORE_PIN8_CONFIG  = 3;  //1:RX_DATA0
     430:	str.w	r2, [r3, #380]	; 0x17c
	IOMUXC_SAI1_RX_DATA0_SELECT_INPUT = 2;
     434:	movs	r2, #2
     436:	str.w	r2, [r3, #1428]	; 0x594
	dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0);
     43a:	ldr	r3, [r4, #0]
     43c:	ldr	r2, [pc, #120]	; (4b8 <I2S_32::begin()+0xa4>)
  dma.TCD->DOFF = 4;
     43e:	strh	r1, [r3, #20]
	dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0);
     440:	str	r2, [r3, #0]
  dma.TCD->NBYTES_MLNO = 4;
     442:	ldr	r2, [pc, #120]	; (4bc <I2S_32::begin()+0xa8>)
  dma.TCD->DADDR = i2s_rx_buffer_32;
     444:	str	r0, [r3, #16]
  dma.TCD->DLASTSGA = -sizeof(i2s_rx_buffer_32);
     446:	ldr	r0, [pc, #120]	; (4c0 <I2S_32::begin()+0xac>)
  dma.TCD->NBYTES_MLNO = 4;
     448:	strd	r2, r1, [r3, #4]
  dma.TCD->CITER_ELINKNO = sizeof(i2s_rx_buffer_32) / 4;
     44c:	mov.w	r1, #256	; 0x100
  dma.TCD->SLAST = 0;
     450:	movs	r2, #0
  dma.TCD->DLASTSGA = -sizeof(i2s_rx_buffer_32);
     452:	str	r0, [r3, #24]
  dma.TCD->CITER_ELINKNO = sizeof(i2s_rx_buffer_32) / 4;
     454:	strh	r1, [r3, #22]
  dma.TCD->BITER_ELINKNO = sizeof(i2s_rx_buffer_32) / 4;
     456:	strh	r1, [r3, #30]
  dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
     458:	movs	r1, #6
  dma.TCD->SLAST = 0;
     45a:	str	r2, [r3, #12]
  dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
     45c:	strh	r1, [r3, #28]
		volatile uint32_t *mux = &DMAMUX_CHCFG0 + channel;
     45e:	ldrb	r3, [r4, #4]
     460:	lsls	r3, r3, #2
     462:	add.w	r3, r3, #1073741824	; 0x40000000
     466:	add.w	r3, r3, #966656	; 0xec000
		*mux = 0;
     46a:	str	r2, [r3, #0]
		*mux = (source & 0x7F) | DMAMUX_CHCFG_ENBL;
     46c:	ldr	r2, [pc, #84]	; (4c4 <I2S_32::begin()+0xb0>)
     46e:	str	r2, [r3, #0]
  I2S1_RCSR = I2S_RCSR_RE | I2S_RCSR_BCE | I2S_RCSR_FRDE | I2S_RCSR_FR;
     470:	ldr	r3, [pc, #84]	; (4c8 <I2S_32::begin()+0xb4>)
     472:	ldr	r2, [pc, #88]	; (4cc <I2S_32::begin()+0xb8>)
     474:	str.w	r2, [r3, #136]	; 0x88
  update_responsibility = update_setup();
     478:	bl	97a0 <AudioStream::update_setup()>
     47c:	ldr	r3, [pc, #80]	; (4d0 <I2S_32::begin()+0xbc>)
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
     47e:	ldrb	r2, [r4, #4]
     480:	strb	r0, [r3, #0]
     482:	ldr	r3, [pc, #80]	; (4d4 <I2S_32::begin()+0xc0>)
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
     484:	add.w	r1, r2, #16
     488:	ldr	r0, [pc, #76]	; (4d8 <I2S_32::begin()+0xc4>)
		DMA_SERQ = channel;
     48a:	strb	r2, [r3, #27]
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
     48c:	ldr	r3, [pc, #76]	; (4dc <I2S_32::begin()+0xc8>)
     48e:	str.w	r0, [r3, r1, lsl #2]
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     492:	asrs	r3, r2, #5
     494:	movs	r1, #1
     496:	and.w	r2, r2, #31
     49a:	add.w	r3, r3, #939538432	; 0x38003800
     49e:	lsl.w	r2, r1, r2
     4a2:	adds	r3, #64	; 0x40
     4a4:	lsls	r3, r3, #2
     4a6:	str	r2, [r3, #0]
}
     4a8:	pop	{r3, r4, r5, pc}
     4aa:	nop
     4ac:	.word	0x2000698c
     4b0:	.word	0x401f8000
     4b4:	.word	0x20006498
     4b8:	.word	0x403840a0
     4bc:	.word	0x02020000
     4c0:	.word	0xfffffc00
     4c4:	.word	0x80000013
     4c8:	.word	0x40384000
     4cc:	.word	0x92000001
     4d0:	.word	0x200071fe
     4d4:	.word	0x400e8000
     4d8:	.word	0x00000111
     4dc:	.word	0x20002400

000004e0 <saveData(short)>:
    //
    return 1;
}

int16_t saveData(int16_t status)
{   static char dirName[80];
     4e0:	push	{r3, r4, r5, r6, r7, lr}
    static char fileName[80];
    static char header[512];

    if(status<CLOSED) return status; // we are stopped: don't do anything
     4e2:	subs	r4, r0, #0
     4e4:	blt.n	518 <saveData(short)+0x38>

    if(queue1.available() <NBUF) return status; // must wait for data
     4e6:	ldr	r0, [pc, #52]	; (51c <saveData(short)+0x3c>)
     4e8:	bl	7ce <AudioRecordQueue::available()>
     4ec:	cmp	r0, #9
     4ee:	ble.n	518 <saveData(short)+0x38>
     4f0:	ldr	r6, [pc, #44]	; (520 <saveData(short)+0x40>)

    for(int ii=0; ii<NBUF; ii++)
     4f2:	movs	r5, #0
    {
      memcpy(diskBuffer+ii*256, queue1.readBuffer(), 256);
     4f4:	ldr	r7, [pc, #36]	; (51c <saveData(short)+0x3c>)
     4f6:	mov	r0, r7
    for(int ii=0; ii<NBUF; ii++)
     4f8:	adds	r5, #1
      memcpy(diskBuffer+ii*256, queue1.readBuffer(), 256);
     4fa:	bl	824 <AudioRecordQueue::readBuffer()>
     4fe:	mov.w	r2, #256	; 0x100
     502:	mov	r1, r0
     504:	mov	r0, r6
     506:	bl	756c <memcpy>
      queue1.freeBuffer();
     50a:	mov	r0, r7
     50c:	bl	85e <AudioRecordQueue::freeBuffer()>
    for(int ii=0; ii<NBUF; ii++)
     510:	cmp	r5, #10
     512:	add.w	r6, r6, #256	; 0x100
     516:	bne.n	4f6 <saveData(short)+0x16>
        file.flush();
        file.close();
        status = STOPPED;
    }
    return status;
}
     518:	mov	r0, r4
     51a:	pop	{r3, r4, r5, r6, r7, pc}
     51c:	.word	0x20006d60
     520:	.word	0x20007202

00000524 <loop>:

extern uint32_t disk_count;
extern char diskBuffer[];
int16_t *data=(int16_t *) diskBuffer;
//
void loop() {
     524:	push	{r4, r5, lr}
     526:	sub	sp, #20
     528:	ldr	r4, [pc, #116]	; (5a0 <loop+0x7c>)
  // put your main code here, to run repeatedly:
  static int16_t status=0;

  int m_sec=(second() % 60); // close file every 60 seconds (on the minute)
     52a:	bl	a58 <second()>
     52e:	movs	r3, #60	; 0x3c
     530:	sdiv	r2, r0, r3
     534:	mls	r0, r2, r3, r0
  static int m_seco=0;
  if( (m_seco>0) && (m_sec<m_seco)) status=DOCLOSE;
     538:	ldr	r3, [pc, #104]	; (5a4 <loop+0x80>)
     53a:	ldr	r2, [r3, #0]
     53c:	cmp	r2, #0
     53e:	ble.n	548 <loop+0x24>
     540:	cmp	r2, r0
     542:	itt	gt
     544:	movgt	r2, #3
     546:	strhgt	r2, [r4, #0]
  m_seco=m_sec; 
     548:	str	r0, [r3, #0]

  status=saveData(status);
     54a:	ldrsh.w	r0, [r4]
     54e:	bl	4e0 <saveData(short)>
	return systick_millis_count;
     552:	ldr	r1, [pc, #84]	; (5a8 <loop+0x84>)
  
  static uint32_t t0=0;
  static uint32_t ic=0;
  if(millis()-t0>1000)
     554:	ldr	r2, [pc, #84]	; (5ac <loop+0x88>)
     556:	ldr	r3, [r1, #0]
  status=saveData(status);
     558:	strh	r0, [r4, #0]
  if(millis()-t0>1000)
     55a:	ldr	r0, [r2, #0]
     55c:	subs	r3, r3, r0
     55e:	cmp.w	r3, #1000	; 0x3e8
     562:	bls.n	59a <loop+0x76>
     564:	ldr	r3, [r1, #0]
  {
    t0=millis();
    Serial.printf("\n%10d %2d %2d %10d %10d",ic++, second(), disk_count, data[0],data[1]);
     566:	ldr	r4, [pc, #72]	; (5b0 <loop+0x8c>)
    t0=millis();
     568:	str	r3, [r2, #0]
    Serial.printf("\n%10d %2d %2d %10d %10d",ic++, second(), disk_count, data[0],data[1]);
     56a:	ldr	r3, [pc, #72]	; (5b4 <loop+0x90>)
     56c:	ldr	r5, [r3, #0]
     56e:	adds	r2, r5, #1
     570:	str	r2, [r3, #0]
     572:	bl	a58 <second()>
     576:	ldr	r2, [pc, #64]	; (5b8 <loop+0x94>)
     578:	mov	r3, r0
     57a:	ldr	r0, [pc, #64]	; (5bc <loop+0x98>)
     57c:	ldr	r2, [r2, #0]
     57e:	ldrsh.w	r1, [r2, #2]
     582:	str	r1, [sp, #8]
     584:	ldrsh.w	r2, [r2]
     588:	ldr	r1, [pc, #52]	; (5c0 <loop+0x9c>)
     58a:	str	r2, [sp, #4]
     58c:	ldr	r2, [r4, #0]
     58e:	str	r2, [sp, #0]
     590:	mov	r2, r5
     592:	bl	9ec2 <Print::printf(char const*, ...)>
    disk_count=0;
     596:	movs	r3, #0
     598:	str	r3, [r4, #0]
  }
//  asm ("WFI");
}
     59a:	add	sp, #20
     59c:	pop	{r4, r5, pc}
     59e:	nop
     5a0:	.word	0x2000713c
     5a4:	.word	0x200069a4
     5a8:	.word	0x200070e8
     5ac:	.word	0x200069a0
     5b0:	.word	0x20006cd0
     5b4:	.word	0x2000699c
     5b8:	.word	0x20002180
     5bc:	.word	0x20001bc4
     5c0:	.word	0x20001210

000005c4 <_GLOBAL__sub_I__Z9I2S_startv>:
     5c4:	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
DMAChannel I2S_32::dma(false);
     5c8:	ldr.w	r8, [pc, #260]	; 6d0 <_GLOBAL__sub_I__Z9I2S_startv+0x10c>
#else
	static const int max_buffers = 53;
#endif
public:
	AudioRecordQueue(void) : AudioStream(1, inputQueueArray),
		userblock(NULL), head(0), tail(0), enabled(0) { }
     5cc:	movs	r4, #0
     5ce:	ldr	r1, [pc, #208]	; (6a0 <_GLOBAL__sub_I__Z9I2S_startv+0xdc>)
     5d0:	mov	r2, r8
     5d2:	ldr	r0, [pc, #208]	; (6a4 <_GLOBAL__sub_I__Z9I2S_startv+0xe0>)
	I2S_32(void) : AudioStream(0, NULL) {begin();}
     5d4:	ldr	r6, [pc, #208]	; (6a8 <_GLOBAL__sub_I__Z9I2S_startv+0xe4>)
DMAChannel I2S_32::dma(false);
     5d6:	bl	a174 <__aeabi_atexit>
	I2S_32(void) : AudioStream(0, NULL) {begin();}
     5da:	movs	r2, #0
};

class AudioOutputUSB : public AudioStream
{
public:
	AudioOutputUSB(void) : AudioStream(2, inputQueueArray) { begin(); }
     5dc:	ldr	r7, [pc, #204]	; (6ac <_GLOBAL__sub_I__Z9I2S_startv+0xe8>)
     5de:	mov	r0, r6
     5e0:	ldr	r5, [pc, #204]	; (6b0 <_GLOBAL__sub_I__Z9I2S_startv+0xec>)
     5e2:	mov	r1, r2
AudioConnection          patchCord1(acq, 0, queue1, 0);
     5e4:	ldr.w	r9, [pc, #236]	; 6d4 <_GLOBAL__sub_I__Z9I2S_startv+0x110>
     5e8:	bl	288 <AudioStream::AudioStream(unsigned char, audio_block_struct**)>
     5ec:	ldr	r3, [pc, #196]	; (6b4 <_GLOBAL__sub_I__Z9I2S_startv+0xf0>)
     5ee:	mov	r0, r6
     5f0:	str	r3, [r6, #0]
     5f2:	bl	414 <I2S_32::begin()>
     5f6:	add.w	r2, r7, #24
     5fa:	movs	r1, #2
     5fc:	mov	r0, r7
     5fe:	bl	288 <AudioStream::AudioStream(unsigned char, audio_block_struct**)>
     602:	ldr	r3, [pc, #180]	; (6b8 <_GLOBAL__sub_I__Z9I2S_startv+0xf4>)
     604:	mov	r0, r7
     606:	str	r3, [r7, #0]
     608:	bl	9b54 <AudioOutputUSB::begin()>
     60c:	add.w	r2, r5, #24
     610:	movs	r1, #1
     612:	mov	r0, r5
     614:	bl	288 <AudioStream::AudioStream(unsigned char, audio_block_struct**)>
     618:	ldr	r3, [pc, #160]	; (6bc <_GLOBAL__sub_I__Z9I2S_startv+0xf8>)
     61a:	strb.w	r4, [r5, #868]	; 0x364
     61e:	mov	r2, r4
     620:	strb.w	r4, [r5, #869]	; 0x365
     624:	mov	r1, r6
     626:	str	r3, [r5, #0]
     628:	mov	r0, r9
     62a:	mov	r3, r5
     62c:	str.w	r4, [r5, #864]	; 0x360
     630:	strb.w	r4, [r5, #870]	; 0x366
     634:	ldr	r5, [pc, #136]	; (6c0 <_GLOBAL__sub_I__Z9I2S_startv+0xfc>)
     636:	str	r4, [sp, #0]
     638:	bl	96bc <AudioConnection::AudioConnection(AudioStream&, unsigned char, AudioStream&, unsigned char)>
     63c:	mov	r0, r9
AudioConnection          patchCord2(acq, 0, usb1, 0);
     63e:	ldr.w	r9, [pc, #152]	; 6d8 <_GLOBAL__sub_I__Z9I2S_startv+0x114>
AudioConnection          patchCord1(acq, 0, queue1, 0);
     642:	mov	r2, r8
     644:	mov	r1, r5
     646:	bl	a174 <__aeabi_atexit>
AudioConnection          patchCord2(acq, 0, usb1, 0);
     64a:	mov	r3, r7
     64c:	mov	r2, r4
     64e:	mov	r1, r6
     650:	mov	r0, r9
     652:	str	r4, [sp, #0]
     654:	bl	96bc <AudioConnection::AudioConnection(AudioStream&, unsigned char, AudioStream&, unsigned char)>
     658:	mov	r2, r8
     65a:	mov	r1, r5
     65c:	mov	r0, r9
     65e:	bl	a174 <__aeabi_atexit>
AudioConnection          patchCord3(acq, 1, usb1, 1);
     662:	ldr.w	r9, [pc, #120]	; 6dc <_GLOBAL__sub_I__Z9I2S_startv+0x118>
     666:	movs	r2, #1
     668:	mov	r3, r7
     66a:	mov	r1, r6
     66c:	mov	r0, r9
     66e:	str	r2, [sp, #0]
     670:	bl	96bc <AudioConnection::AudioConnection(AudioStream&, unsigned char, AudioStream&, unsigned char)>
     674:	mov	r2, r8
     676:	mov	r1, r5
     678:	mov	r0, r9
     67a:	bl	a174 <__aeabi_atexit>
	constexpr Print() : write_error(0) {}
     67e:	ldr	r0, [pc, #68]	; (6c4 <_GLOBAL__sub_I__Z9I2S_startv+0x100>)
#include "Print.h"

class Stream : public Print
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     680:	mov.w	r3, #1000	; 0x3e8
File file=NULL; 
     684:	mov	r2, r8
     686:	ldr	r1, [pc, #64]	; (6c8 <_GLOBAL__sub_I__Z9I2S_startv+0x104>)
     688:	str	r3, [r0, #8]
	File(FileImpl *file) {
     68a:	ldr	r3, [pc, #64]	; (6cc <_GLOBAL__sub_I__Z9I2S_startv+0x108>)
     68c:	strb	r4, [r0, #4]
     68e:	strb	r4, [r0, #12]
     690:	str	r3, [r0, #0]
		f = file;
     692:	str	r4, [r0, #16]
}
     694:	add	sp, #12
     696:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
     69a:	b.w	a174 <__aeabi_atexit>
     69e:	nop
     6a0:	.word	0x00000257
     6a4:	.word	0x2000698c
     6a8:	.word	0x20006cb8
     6ac:	.word	0x200070f0
     6b0:	.word	0x20006d60
     6b4:	.word	0x20000708
     6b8:	.word	0x200005f8
     6bc:	.word	0x20000604
     6c0:	.word	0x00009779
     6c4:	.word	0x20006cf4
     6c8:	.word	0x000000e5
     6cc:	.word	0x200006b8
     6d0:	.word	0x20001bf0
     6d4:	.word	0x20006d24
     6d8:	.word	0x20006d38
     6dc:	.word	0x20006d4c

000006e0 <setup>:
void setup() {
     6e0:	push	{r4, r5, r6, lr}
  setSyncProvider(getTime);
     6e2:	ldr	r0, [pc, #120]	; (75c <setup+0x7c>)
     6e4:	bl	a6c <setSyncProvider(long long (*)())>
	// Testing Serial as a boolean indicates whether USB is active and a program
	// running on your PC has raised the DTR signal, which typically means it has
	// opened the port and is ready to communicate.
        operator bool() {
		yield();
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     6e8:	ldr	r5, [pc, #116]	; (760 <setup+0x80>)
  set_arm_clock(24000000);
     6ea:	ldr	r0, [pc, #120]	; (764 <setup+0x84>)
     6ec:	ldr	r6, [pc, #120]	; (768 <setup+0x88>)
     6ee:	bl	7d58 <set_arm_clock>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     6f2:	ldr	r4, [pc, #120]	; (76c <setup+0x8c>)
  AudioMemory(60);
     6f4:	movs	r1, #60	; 0x3c
     6f6:	ldr	r0, [pc, #120]	; (770 <setup+0x90>)
     6f8:	bl	104f8 <___ZN11AudioStream17initialize_memoryEP18audio_block_structj_veneer>
		yield();
     6fc:	bl	90ec <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     700:	ldrb	r3, [r5, #0]
     702:	cmp	r3, #0
     704:	beq.n	6fc <setup+0x1c>
     706:	ldrb	r3, [r6, #0]
     708:	lsls	r3, r3, #31
     70a:	bpl.n	6fc <setup+0x1c>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     70c:	ldr	r2, [pc, #100]	; (774 <setup+0x94>)
     70e:	ldr	r3, [r4, #0]
     710:	ldr	r2, [r2, #0]
     712:	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     714:	cmp	r3, #14
     716:	bls.n	6fc <setup+0x1c>
  if(CrashReport) Serial.print(CrashReport);
     718:	ldr	r0, [pc, #92]	; (778 <setup+0x98>)
     71a:	bl	104e0 <___ZN16CrashReportClasscvbEv_veneer>
     71e:	cbz	r0, 728 <setup+0x48>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
     720:	ldr	r1, [pc, #88]	; (77c <setup+0x9c>)
     722:	ldr	r0, [pc, #84]	; (778 <setup+0x98>)
     724:	bl	104e8 <___ZNK16CrashReportClass7printToER5Print_veneer>
  if (!(SD.begin(SDCARD_CS_PIN)) && !(SD.begin(SDCARD_CS_PIN))) 
     728:	movs	r1, #254	; 0xfe
     72a:	ldr	r0, [pc, #84]	; (780 <setup+0xa0>)
     72c:	bl	1b3c <SDClass::begin(unsigned char)>
     730:	cbnz	r0, 744 <setup+0x64>
     732:	movs	r1, #254	; 0xfe
     734:	ldr	r0, [pc, #72]	; (780 <setup+0xa0>)
     736:	bl	1b3c <SDClass::begin(unsigned char)>
     73a:	cbnz	r0, 744 <setup+0x64>
    Serial.println("Unable to access the SD card");
     73c:	ldr	r1, [pc, #68]	; (784 <setup+0xa4>)
     73e:	ldr	r0, [pc, #60]	; (77c <setup+0x9c>)
     740:	bl	262 <Print::println(char const*) [clone .isra.0]>
	void begin(void) {
		clear();
     744:	ldr	r4, [pc, #64]	; (788 <setup+0xa8>)
  Serial.println("SD card found");
     746:	ldr	r1, [pc, #68]	; (78c <setup+0xac>)
     748:	ldr	r0, [pc, #48]	; (77c <setup+0x9c>)
     74a:	bl	262 <Print::println(char const*) [clone .isra.0]>
     74e:	mov	r0, r4
     750:	bl	7e4 <AudioRecordQueue::clear()>
		enabled = 1;
     754:	movs	r3, #1
     756:	strb.w	r3, [r4, #870]	; 0x366
}
     75a:	pop	{r4, r5, r6, pc}
     75c:	.word	0x00000239
     760:	.word	0x20007c33
     764:	.word	0x016e3600
     768:	.word	0x20007c32
     76c:	.word	0x200070e8
     770:	.word	0x20200000
     774:	.word	0x20007120
     778:	.word	0x20001bb8
     77c:	.word	0x20001bc4
     780:	.word	0x20005b08
     784:	.word	0x20001228
     788:	.word	0x20006d60
     78c:	.word	0x20001245

00000790 <AudioRecordQueue::update()>:
	release(userblock);
	userblock = NULL;
}

void AudioRecordQueue::update(void)
{
     790:	push	{r4, lr}
	audio_block_t *block;
	uint32_t h;

	block = receiveReadOnly();
     792:	movs	r1, #0
{
     794:	mov	r4, r0
	block = receiveReadOnly();
     796:	bl	95ac <AudioStream::receiveReadOnly(unsigned int)>
	if (!block) return;
     79a:	cbz	r0, 7cc <AudioRecordQueue::update()+0x3c>
	if (!enabled) {
     79c:	ldrb.w	r3, [r4, #870]	; 0x366
     7a0:	cbnz	r3, 7aa <AudioRecordQueue::update()+0x1a>
		release(block);
	} else {
		queue[h] = block;
		head = h;
	}
}
     7a2:	ldmia.w	sp!, {r4, lr}
		release(block);
     7a6:	b.w	9534 <AudioStream::release(audio_block_struct*)>
	h = head + 1;
     7aa:	ldrb.w	r3, [r4, #868]	; 0x364
	if (h == tail) {
     7ae:	ldrb.w	r1, [r4, #869]	; 0x365
	h = head + 1;
     7b2:	adds	r3, #1
	if (h >= max_buffers) h = 0;
     7b4:	cmp	r3, #209	; 0xd1
     7b6:	it	ge
     7b8:	movge	r3, #0
	if (h == tail) {
     7ba:	cmp	r1, r3
     7bc:	beq.n	7a2 <AudioRecordQueue::update()+0x12>
		queue[h] = block;
     7be:	adds	r1, r3, #6
		head = h;
     7c0:	uxtb	r3, r3
		queue[h] = block;
     7c2:	add.w	r1, r4, r1, lsl #2
     7c6:	str	r0, [r1, #4]
		head = h;
     7c8:	strb.w	r3, [r4, #868]	; 0x364
}
     7cc:	pop	{r4, pc}

000007ce <AudioRecordQueue::available()>:
	h = head;
     7ce:	ldrb.w	r1, [r0, #868]	; 0x364
	t = tail;
     7d2:	ldrb.w	r2, [r0, #869]	; 0x365
	h = head;
     7d6:	uxtb	r3, r1
	if (h >= t) return h - t;
     7d8:	cmp	r1, r2
	t = tail;
     7da:	uxtb	r0, r2
	return max_buffers + h - t;
     7dc:	it	cc
     7de:	addcc	r3, #209	; 0xd1
     7e0:	subs	r0, r3, r0
}
     7e2:	bx	lr

000007e4 <AudioRecordQueue::clear()>:
{
     7e4:	push	{r3, r4, r5, lr}
     7e6:	mov	r5, r0
	if (userblock) {
     7e8:	ldr.w	r0, [r0, #864]	; 0x360
     7ec:	cbz	r0, 7f8 <AudioRecordQueue::clear()+0x14>
		release(userblock);
     7ee:	bl	9534 <AudioStream::release(audio_block_struct*)>
		userblock = NULL;
     7f2:	movs	r3, #0
     7f4:	str.w	r3, [r5, #864]	; 0x360
	t = tail;
     7f8:	ldrb.w	r4, [r5, #869]	; 0x365
     7fc:	uxtb	r4, r4
	while (t != head) {
     7fe:	ldrb.w	r3, [r5, #868]	; 0x364
     802:	cmp	r3, r4
     804:	bne.n	80e <AudioRecordQueue::clear()+0x2a>
	tail = t;
     806:	uxtb	r4, r4
     808:	strb.w	r4, [r5, #869]	; 0x365
}
     80c:	pop	{r3, r4, r5, pc}
		if (++t >= max_buffers) t = 0;
     80e:	adds	r4, #1
     810:	cmp	r4, #209	; 0xd1
     812:	it	cs
     814:	movcs	r4, #0
		release(queue[t]);
     816:	adds	r3, r4, #6
     818:	add.w	r3, r5, r3, lsl #2
     81c:	ldr	r0, [r3, #4]
     81e:	bl	9534 <AudioStream::release(audio_block_struct*)>
     822:	b.n	7fe <AudioRecordQueue::clear()+0x1a>

00000824 <AudioRecordQueue::readBuffer()>:
	if (userblock) return NULL;
     824:	ldr.w	r2, [r0, #864]	; 0x360
{
     828:	push	{r4, lr}
	if (userblock) return NULL;
     82a:	cbnz	r2, 85a <AudioRecordQueue::readBuffer()+0x36>
	t = tail;
     82c:	ldrb.w	r1, [r0, #869]	; 0x365
	if (t == head) return NULL;
     830:	ldrb.w	r4, [r0, #868]	; 0x364
	t = tail;
     834:	uxtb	r3, r1
	if (t == head) return NULL;
     836:	cmp	r1, r4
     838:	beq.n	856 <AudioRecordQueue::readBuffer()+0x32>
	if (++t >= max_buffers) t = 0;
     83a:	adds	r3, #1
     83c:	cmp	r3, #209	; 0xd1
     83e:	it	cs
     840:	movcs	r3, #0
	userblock = queue[t];
     842:	adds	r2, r3, #6
	tail = t;
     844:	uxtb	r3, r3
	userblock = queue[t];
     846:	add.w	r2, r0, r2, lsl #2
     84a:	ldr	r2, [r2, #4]
	tail = t;
     84c:	strb.w	r3, [r0, #869]	; 0x365
	userblock = queue[t];
     850:	str.w	r2, [r0, #864]	; 0x360
	return userblock->data;
     854:	adds	r2, #4
}
     856:	mov	r0, r2
     858:	pop	{r4, pc}
	if (userblock) return NULL;
     85a:	movs	r2, #0
     85c:	b.n	856 <AudioRecordQueue::readBuffer()+0x32>

0000085e <AudioRecordQueue::freeBuffer()>:
{
     85e:	push	{r4, lr}
     860:	mov	r4, r0
	if (userblock == NULL) return;
     862:	ldr.w	r0, [r0, #864]	; 0x360
     866:	cbz	r0, 872 <AudioRecordQueue::freeBuffer()+0x14>
	release(userblock);
     868:	bl	9534 <AudioStream::release(audio_block_struct*)>
	userblock = NULL;
     86c:	movs	r3, #0
     86e:	str.w	r3, [r4, #864]	; 0x360
}
     872:	pop	{r4, pc}

00000874 <breakTime(long long, tmElements_t&)>:
// leap year calculator expects year argument as years offset from 1970
#define LEAP_YEAR(Y)     ( ((1970+(Y))>0) && !((1970+(Y))%4) && ( ((1970+(Y))%100) || !((1970+(Y))%400) ) )

static  const uint8_t monthDays[]={31,28,31,30,31,30,31,31,30,31,30,31}; // API starts months from 1, this array starts from 0
 
void breakTime(time_t timeInput, tmElements_t &tm){
     874:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
     878:	movs	r4, #60	; 0x3c
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
  
  year = 0;  
  days = 0;
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
     87a:	movw	r8, #365	; 0x16d
     87e:	mov.w	ip, #100	; 0x64
     882:	mov.w	lr, #400	; 0x190
  tm.Second = time % 60;
     886:	udiv	r3, r0, r4
  tm.Minute = time % 60;
     88a:	udiv	r1, r3, r4
  tm.Second = time % 60;
     88e:	mls	r0, r4, r3, r0
  tm.Minute = time % 60;
     892:	mls	r3, r4, r1, r3
  tm.Second = time % 60;
     896:	strb	r0, [r2, #0]
  tm.Hour = time % 24;
     898:	movs	r0, #24
  tm.Minute = time % 60;
     89a:	strb	r3, [r2, #1]
  tm.Hour = time % 24;
     89c:	udiv	r3, r1, r0
     8a0:	mls	r1, r0, r3, r1
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
     8a4:	movs	r0, #7
  tm.Hour = time % 24;
     8a6:	strb	r1, [r2, #2]
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
     8a8:	adds	r1, r3, #4
     8aa:	udiv	r0, r1, r0
     8ae:	rsb	r0, r0, r0, lsl #3
     8b2:	subs	r1, r1, r0
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
     8b4:	movs	r0, #0
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
     8b6:	adds	r1, #1
  days = 0;
     8b8:	mov	r4, r0
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
     8ba:	strb	r1, [r2, #3]
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
     8bc:	uxtb	r6, r0
     8be:	addw	r1, r6, #1970	; 0x7b2
     8c2:	ands.w	r7, r1, #3
     8c6:	bne.n	94c <breakTime(long long, tmElements_t&)+0xd8>
     8c8:	sdiv	r5, r1, ip
     8cc:	mls	r5, ip, r5, r1
     8d0:	cmp	r5, #0
     8d2:	bne.n	952 <breakTime(long long, tmElements_t&)+0xde>
     8d4:	sdiv	r5, r1, lr
     8d8:	mls	r5, lr, r5, r1
     8dc:	cmp	r5, #0
     8de:	ite	ne
     8e0:	movne	r5, r8
     8e2:	moveq.w	r5, #366	; 0x16e
     8e6:	add	r4, r5
     8e8:	adds	r0, #1
     8ea:	cmp	r3, r4
     8ec:	bcs.n	8bc <breakTime(long long, tmElements_t&)+0x48>
     8ee:	movs	r0, #100	; 0x64
    year++;
  }
  tm.Year = year; // year is offset from 1970 
     8f0:	strb	r6, [r2, #6]
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
     8f2:	udiv	r6, r1, r0
     8f6:	mls	r6, r0, r6, r1
     8fa:	mov.w	r0, #400	; 0x190
     8fe:	udiv	r5, r1, r0
     902:	mls	r1, r0, r5, r1
  
  days -= LEAP_YEAR(year) ? 366 : 365;
     906:	cbnz	r7, 958 <breakTime(long long, tmElements_t&)+0xe4>
     908:	cbnz	r6, 95e <breakTime(long long, tmElements_t&)+0xea>
     90a:	cmp	r1, #0
     90c:	movw	r0, #365	; 0x16d
     910:	it	eq
     912:	moveq.w	r0, #366	; 0x16e
  time  -= days; // now it is days in this year, starting at 0
     916:	subs	r3, r3, r4
        monthLength=29;
      } else {
        monthLength=28;
      }
    } else {
      monthLength = monthDays[month];
     918:	ldr.w	ip, [pc, #88]	; 974 <breakTime(long long, tmElements_t&)+0x100>
  time  -= days; // now it is days in this year, starting at 0
     91c:	add	r3, r0
     91e:	movs	r0, #0
    if (month==1) { // february
     920:	cmp	r0, #1
     922:	uxtb	r5, r0
     924:	bne.n	964 <breakTime(long long, tmElements_t&)+0xf0>
      if (LEAP_YEAR(year)) {
     926:	cbnz	r7, 96a <breakTime(long long, tmElements_t&)+0xf6>
     928:	cbnz	r6, 96e <breakTime(long long, tmElements_t&)+0xfa>
        monthLength=29;
     92a:	cmp	r1, #0
     92c:	ite	ne
     92e:	movne	r4, #28
     930:	moveq	r4, #29
    }
    
    if (time >= monthLength) {
     932:	cmp	r4, r3
     934:	bhi.n	940 <breakTime(long long, tmElements_t&)+0xcc>
  for (month=0; month<12; month++) {
     936:	adds	r0, #1
      time -= monthLength;
     938:	subs	r3, r3, r4
  for (month=0; month<12; month++) {
     93a:	cmp	r0, #12
     93c:	bne.n	920 <breakTime(long long, tmElements_t&)+0xac>
     93e:	mov	r5, r0
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
     940:	adds	r5, #1
  tm.Day = time + 1;     // day of month
     942:	adds	r3, #1
  tm.Month = month + 1;  // jan is month 1  
     944:	strb	r5, [r2, #5]
  tm.Day = time + 1;     // day of month
     946:	strb	r3, [r2, #4]
}
     948:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
     94c:	movw	r5, #365	; 0x16d
     950:	b.n	8e6 <breakTime(long long, tmElements_t&)+0x72>
     952:	mov.w	r5, #366	; 0x16e
     956:	b.n	8e6 <breakTime(long long, tmElements_t&)+0x72>
  days -= LEAP_YEAR(year) ? 366 : 365;
     958:	movw	r0, #365	; 0x16d
     95c:	b.n	916 <breakTime(long long, tmElements_t&)+0xa2>
     95e:	mov.w	r0, #366	; 0x16e
     962:	b.n	916 <breakTime(long long, tmElements_t&)+0xa2>
      monthLength = monthDays[month];
     964:	ldrb.w	r4, [r0, ip]
     968:	b.n	932 <breakTime(long long, tmElements_t&)+0xbe>
        monthLength=28;
     96a:	movs	r4, #28
     96c:	b.n	932 <breakTime(long long, tmElements_t&)+0xbe>
        monthLength=29;
     96e:	movs	r4, #29
     970:	b.n	932 <breakTime(long long, tmElements_t&)+0xbe>
     972:	nop
     974:	.word	0x20001138

00000978 <refreshCache(long long)>:
void refreshCache(time_t t) {
     978:	push	{r4, r5, r6, lr}
  if (t != cacheTime) {
     97a:	ldr	r4, [pc, #28]	; (998 <refreshCache(long long)+0x20>)
void refreshCache(time_t t) {
     97c:	mov	r6, r0
     97e:	mov	r5, r1
  if (t != cacheTime) {
     980:	ldrd	r2, r3, [r4]
     984:	cmp	r3, r1
     986:	it	eq
     988:	cmpeq	r2, r0
     98a:	beq.n	996 <refreshCache(long long)+0x1e>
    breakTime(t, tm); 
     98c:	ldr	r2, [pc, #12]	; (99c <refreshCache(long long)+0x24>)
     98e:	bl	874 <breakTime(long long, tmElements_t&)>
    cacheTime = t; 
     992:	strd	r6, r5, [r4]
}
     996:	pop	{r4, r5, r6, pc}
     998:	.word	0x20005af8
     99c:	.word	0x20007188

000009a0 <setTime(long long)>:
#ifdef TIME_DRIFT_INFO
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
     9a0:	ldr	r3, [pc, #28]	; (9c0 <setTime(long long)+0x20>)
  nextSyncTime = (uint32_t)t + syncInterval;
     9a2:	ldr	r2, [pc, #32]	; (9c4 <setTime(long long)+0x24>)
  sysTime = (uint32_t)t;  
     9a4:	str	r0, [r3, #0]
  nextSyncTime = (uint32_t)t + syncInterval;
     9a6:	ldr	r3, [pc, #32]	; (9c8 <setTime(long long)+0x28>)
     9a8:	ldr	r3, [r3, #0]
     9aa:	add	r3, r0
     9ac:	str	r3, [r2, #0]
  Status = timeSet;
     9ae:	movs	r2, #2
     9b0:	ldr	r3, [pc, #24]	; (9cc <setTime(long long)+0x2c>)
     9b2:	strb	r2, [r3, #0]
     9b4:	ldr	r3, [pc, #24]	; (9d0 <setTime(long long)+0x30>)
     9b6:	ldr	r2, [r3, #0]
  prevMillis = millis();  // restart counting from now (thanks to Korman for this fix)
     9b8:	ldr	r3, [pc, #24]	; (9d4 <setTime(long long)+0x34>)
     9ba:	str	r2, [r3, #0]
} 
     9bc:	bx	lr
     9be:	nop
     9c0:	.word	0x200068a0
     9c4:	.word	0x20006494
     9c8:	.word	0x20001bd4
     9cc:	.word	0x200071f7
     9d0:	.word	0x200070e8
     9d4:	.word	0x2000648c

000009d8 <now()>:
time_t now() {
     9d8:	push	{r3, r4, r5, r6, r7, lr}
     9da:	ldr	r0, [pc, #96]	; (a3c <now()+0x64>)
  while (millis() - prevMillis >= 1000) {
     9dc:	movs	r5, #0
     9de:	ldr	r4, [pc, #96]	; (a40 <now()+0x68>)
     9e0:	ldr	r3, [r0, #0]
     9e2:	ldr	r2, [r4, #0]
     9e4:	ldr	r7, [pc, #92]	; (a44 <now()+0x6c>)
     9e6:	ldr	r1, [r7, #0]
     9e8:	adds	r6, r2, #1
     9ea:	subs	r1, r1, r3
     9ec:	cmp.w	r1, #1000	; 0x3e8
     9f0:	bcs.n	a1a <now()+0x42>
     9f2:	cbz	r5, 9f8 <now()+0x20>
     9f4:	str	r3, [r0, #0]
     9f6:	str	r2, [r4, #0]
  if (nextSyncTime <= sysTime) {
     9f8:	ldr	r5, [pc, #76]	; (a48 <now()+0x70>)
     9fa:	ldr	r3, [r4, #0]
     9fc:	ldr	r2, [r5, #0]
     9fe:	cmp	r2, r3
     a00:	bhi.n	a14 <now()+0x3c>
    if (getTimePtr != 0) {
     a02:	ldr	r3, [pc, #72]	; (a4c <now()+0x74>)
     a04:	ldr	r3, [r3, #0]
     a06:	cbz	r3, a14 <now()+0x3c>
      time_t t = getTimePtr();
     a08:	blx	r3
      if (t != 0) {
     a0a:	orrs.w	r3, r0, r1
     a0e:	beq.n	a24 <now()+0x4c>
        setTime(t);
     a10:	bl	9a0 <setTime(long long)>
}
     a14:	ldr	r0, [r4, #0]
     a16:	movs	r1, #0
     a18:	pop	{r3, r4, r5, r6, r7, pc}
    prevMillis += 1000;	
     a1a:	add.w	r3, r3, #1000	; 0x3e8
     a1e:	mov	r2, r6
     a20:	movs	r5, #1
     a22:	b.n	9e6 <now()+0xe>
        nextSyncTime = sysTime + syncInterval;
     a24:	ldr	r2, [pc, #40]	; (a50 <now()+0x78>)
     a26:	ldr	r3, [r4, #0]
     a28:	ldr	r2, [r2, #0]
     a2a:	add	r3, r2
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
     a2c:	ldr	r2, [pc, #36]	; (a54 <now()+0x7c>)
        nextSyncTime = sysTime + syncInterval;
     a2e:	str	r3, [r5, #0]
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
     a30:	ldrb	r3, [r2, #0]
     a32:	subs	r3, #0
     a34:	it	ne
     a36:	movne	r3, #1
     a38:	strb	r3, [r2, #0]
     a3a:	b.n	a14 <now()+0x3c>
     a3c:	.word	0x2000648c
     a40:	.word	0x200068a0
     a44:	.word	0x200070e8
     a48:	.word	0x20006494
     a4c:	.word	0x20006d08
     a50:	.word	0x20001bd4
     a54:	.word	0x200071f7

00000a58 <second()>:
int second() {
     a58:	push	{r3, lr}
  return second(now()); 
     a5a:	bl	9d8 <now()>
  refreshCache(t);
     a5e:	bl	978 <refreshCache(long long)>
}
     a62:	ldr	r3, [pc, #4]	; (a68 <second()+0x10>)
     a64:	ldrb	r0, [r3, #0]
     a66:	pop	{r3, pc}
     a68:	.word	0x20007188

00000a6c <setSyncProvider(long long (*)())>:
  now(); // required to actually update the status
  return Status;
}

void setSyncProvider( getExternalTime getTimeFunction){
  getTimePtr = getTimeFunction;  
     a6c:	ldr	r3, [pc, #12]	; (a7c <setSyncProvider(long long (*)())+0x10>)
     a6e:	str	r0, [r3, #0]
  nextSyncTime = sysTime;
     a70:	ldr	r3, [pc, #12]	; (a80 <setSyncProvider(long long (*)())+0x14>)
     a72:	ldr	r2, [r3, #0]
     a74:	ldr	r3, [pc, #12]	; (a84 <setSyncProvider(long long (*)())+0x18>)
     a76:	str	r2, [r3, #0]
  now(); // this will sync the clock
     a78:	b.w	9d8 <now()>
     a7c:	.word	0x20006d08
     a80:	.word	0x200068a0
     a84:	.word	0x20006494

00000a88 <TwoWire::available()>:
	}
	uint8_t requestFrom(uint8_t addr, uint8_t qty, uint32_t iaddr, uint8_t n, uint8_t stop);
	virtual size_t write(uint8_t data);
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
     a88:	ldrb.w	r2, [r0, #163]	; 0xa3
     a8c:	ldrb.w	r0, [r0, #162]	; 0xa2
	}
     a90:	subs	r0, r2, r0
     a92:	bx	lr

00000a94 <TwoWire::read()>:
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
     a94:	ldrb.w	r3, [r0, #162]	; 0xa2
     a98:	ldrb.w	r2, [r0, #163]	; 0xa3
     a9c:	cmp	r2, r3
		return rxBuffer[rxBufferIndex++];
     a9e:	itttt	hi
     aa0:	addhi	r2, r3, #1
     aa2:	strbhi.w	r2, [r0, #162]	; 0xa2
     aa6:	addhi	r0, r0, r3
     aa8:	ldrbhi	r0, [r0, #26]
		if (rxBufferIndex >= rxBufferLength) return -1;
     aaa:	it	ls
     aac:	movls.w	r0, #4294967295
	}
     ab0:	bx	lr

00000ab2 <TwoWire::peek()>:
	virtual int peek(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
     ab2:	ldrb.w	r3, [r0, #162]	; 0xa2
     ab6:	ldrb.w	r2, [r0, #163]	; 0xa3
     aba:	cmp	r2, r3
		return rxBuffer[rxBufferIndex];
     abc:	itte	hi
     abe:	addhi	r0, r0, r3
     ac0:	ldrbhi	r0, [r0, #26]
		if (rxBufferIndex >= rxBufferLength) return -1;
     ac2:	movls.w	r0, #4294967295
	}
     ac6:	bx	lr

00000ac8 <TwoWire::flush()>:
	virtual void flush(void) {
	}
     ac8:	bx	lr

00000aca <TwoWire::write(unsigned char)>:
}


size_t TwoWire::write(uint8_t data)
{
	if (transmitting || slave_mode) {
     aca:	ldrh.w	r3, [r0, #304]	; 0x130
     ace:	cbz	r3, adc <TwoWire::write(unsigned char)+0x12>
		if (txBufferLength >= BUFFER_LENGTH+1) {
     ad0:	ldrb.w	r3, [r0, #303]	; 0x12f
     ad4:	cmp	r3, #136	; 0x88
     ad6:	bls.n	ae0 <TwoWire::write(unsigned char)+0x16>
	// format warnings are too pedantic - disable until newer toolchain offers better...
	// https://forum.pjrc.com/threads/62473?p=256873&viewfull=1#post256873
	// int printf(const char *format, ...) __attribute__ ((format (printf, 2, 3)));

  protected:
	void setWriteError(int err = 1) { write_error = err; }
     ad8:	movs	r3, #1
     ada:	strb	r3, [r0, #4]
			setWriteError();
			return 0;
     adc:	movs	r0, #0
     ade:	bx	lr
		}
		txBuffer[txBufferLength++] = data;
     ae0:	adds	r2, r3, #1
     ae2:	strb.w	r2, [r0, #303]	; 0x12f
     ae6:	add	r0, r3
     ae8:	strb.w	r1, [r0, #165]	; 0xa5
		return 1;
     aec:	movs	r0, #1
     aee:	bx	lr

00000af0 <TwoWire::write(unsigned char const*, unsigned int)>:
	}
	return 0;
}

size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
     af0:	push	{r3, r4, r5, lr}
	if (transmitting || slave_mode) {
     af2:	ldrh.w	r3, [r0, #304]	; 0x130
{
     af6:	mov	r5, r0
     af8:	mov	r4, r2
	if (transmitting || slave_mode) {
     afa:	cbz	r3, b28 <TwoWire::write(unsigned char const*, unsigned int)+0x38>
		size_t avail = BUFFER_LENGTH+1 - txBufferLength;
     afc:	ldrb.w	r3, [r0, #303]	; 0x12f
     b00:	rsb	r2, r3, #137	; 0x89
		if (quantity > avail) {
     b04:	cmp	r4, r2
     b06:	ittt	hi
     b08:	movhi	r0, #1
     b0a:	movhi	r4, r2
     b0c:	strbhi	r0, [r5, #4]
			quantity = avail;
			setWriteError();
		}
		memcpy(txBuffer + txBufferLength, data, quantity);
     b0e:	add.w	r0, r5, #165	; 0xa5
     b12:	mov	r2, r4
     b14:	add	r0, r3
     b16:	bl	756c <memcpy>
		txBufferLength += quantity;
     b1a:	ldrb.w	r3, [r5, #303]	; 0x12f
     b1e:	add	r3, r4
     b20:	strb.w	r3, [r5, #303]	; 0x12f
		return quantity;
	}
	return 0;
}
     b24:	mov	r0, r4
     b26:	pop	{r3, r4, r5, pc}
	return 0;
     b28:	mov	r4, r3
     b2a:	b.n	b24 <TwoWire::write(unsigned char const*, unsigned int)+0x34>

00000b2c <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)>:
	constexpr TwoWire(IMXRT_LPI2C_t *myport, const I2C_Hardware_t &myhardware)
     b2c:	push	{r3, r4, r5, lr}
     b2e:	mov.w	r3, #1000	; 0x3e8
	constexpr Print() : write_error(0) {}
     b32:	movs	r5, #0
     b34:	mov	r4, r0
     b36:	str	r3, [r0, #8]
		: port(myport), hardware(myhardware) {
     b38:	ldr	r3, [pc, #84]	; (b90 <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)+0x64>)
     b3a:	strb	r5, [r0, #4]
     b3c:	str	r3, [r0, #0]
     b3e:	strb	r5, [r0, #12]
     b40:	strb	r5, [r0, #24]
     b42:	strb	r5, [r0, #25]
     b44:	strd	r1, r2, [r0, #16]
     b48:	mov	r1, r5
     b4a:	movs	r2, #136	; 0x88
     b4c:	adds	r0, #26
     b4e:	bl	7528 <memset>
     b52:	movs	r2, #137	; 0x89
     b54:	mov	r1, r5
     b56:	add.w	r0, r4, #165	; 0xa5
     b5a:	strb.w	r5, [r4, #162]	; 0xa2
     b5e:	strb.w	r5, [r4, #163]	; 0xa3
     b62:	strb.w	r5, [r4, #164]	; 0xa4
     b66:	bl	7528 <memset>
	}
     b6a:	mov	r0, r4
		: port(myport), hardware(myhardware) {
     b6c:	strb.w	r5, [r4, #302]	; 0x12e
     b70:	strb.w	r5, [r4, #303]	; 0x12f
     b74:	strb.w	r5, [r4, #304]	; 0x130
     b78:	strb.w	r5, [r4, #305]	; 0x131
     b7c:	strb.w	r5, [r4, #306]	; 0x132
     b80:	strb.w	r5, [r4, #307]	; 0x133
     b84:	strb.w	r5, [r4, #308]	; 0x134
     b88:	strd	r5, r5, [r4, #312]	; 0x138
	}
     b8c:	pop	{r3, r4, r5, pc}
     b8e:	nop
     b90:	.word	0x200007c4

00000b94 <TwoWire::isr()>:
	port->SCR = LPI2C_SCR_SEN;
}


void TwoWire::isr(void)
{
     b94:	push	{r3, r4, r5, lr}
	uint32_t status = port->SSR;
     b96:	ldr	r3, [r0, #16]
{
     b98:	mov	r4, r0
	uint32_t status = port->SSR;
     b9a:	ldr.w	r5, [r3, #276]	; 0x114
	uint32_t w1c_bits = status & 0xF00;
	if (w1c_bits) port->SSR = w1c_bits;
     b9e:	ands.w	r2, r5, #3840	; 0xf00
     ba2:	beq.n	ba8 <TwoWire::isr()+0x14>
     ba4:	str.w	r2, [r3, #276]	; 0x114

	//Serial.print("isr ");
	//Serial.println(status, HEX);

	if (status & LPI2C_SSR_RDF) { // Receive Data Flag
     ba8:	lsls	r0, r5, #30
     baa:	bpl.n	bcc <TwoWire::isr()+0x38>
		int rx = port->SRDR;
     bac:	ldr.w	r2, [r3, #368]	; 0x170
		if (rx & 0x8000) {
     bb0:	lsls	r1, r2, #16
			rxBufferIndex = 0;
     bb2:	itt	mi
     bb4:	movmi	r3, #0
     bb6:	strhmi.w	r3, [r4, #162]	; 0xa2
			rxBufferLength = 0;
		}
		if (rxBufferLength < BUFFER_LENGTH) {
     bba:	ldrb.w	r3, [r4, #163]	; 0xa3
     bbe:	cmp	r3, #135	; 0x87
			rxBuffer[rxBufferLength++] = rx & 255;
     bc0:	itttt	ls
     bc2:	addls	r1, r3, #1
     bc4:	addls	r3, r3, r4
     bc6:	strbls.w	r1, [r4, #163]	; 0xa3
     bca:	strbls	r2, [r3, #26]
		}
		//Serial.print("rx = ");
		//Serial.println(rx, HEX);
	}
	if (status & LPI2C_SSR_TDF) { // Transmit Data Flag
     bcc:	lsls	r2, r5, #31
     bce:	bpl.n	c0c <TwoWire::isr()+0x78>
		if (!transmitting) {
     bd0:	ldrb.w	r3, [r4, #304]	; 0x130
     bd4:	cbnz	r3, bea <TwoWire::isr()+0x56>
			if (user_onRequest != nullptr) {
     bd6:	ldr.w	r3, [r4, #312]	; 0x138
     bda:	cbz	r3, bde <TwoWire::isr()+0x4a>
				(*user_onRequest)();
     bdc:	blx	r3
			}
			txBufferIndex = 0;
     bde:	movs	r3, #0
     be0:	strb.w	r3, [r4, #302]	; 0x12e
			transmitting = 1;
     be4:	movs	r3, #1
     be6:	strb.w	r3, [r4, #304]	; 0x130
		}
		if (txBufferIndex < txBufferLength) {
     bea:	ldrb.w	r3, [r4, #302]	; 0x12e
     bee:	ldrb.w	r1, [r4, #303]	; 0x12f
			port->STDR = txBuffer[txBufferIndex++];
     bf2:	ldr	r2, [r4, #16]
		if (txBufferIndex < txBufferLength) {
     bf4:	cmp	r1, r3
			port->STDR = txBuffer[txBufferIndex++];
     bf6:	ittet	hi
     bf8:	addhi	r1, r3, #1
     bfa:	addhi	r3, r3, r4
		} else {
			port->STDR = 0;
     bfc:	movls	r3, #0
			port->STDR = txBuffer[txBufferIndex++];
     bfe:	strbhi.w	r1, [r4, #302]	; 0x12e
     c02:	it	hi
     c04:	ldrbhi.w	r3, [r3, #165]	; 0xa5
			port->STDR = 0;
     c08:	str.w	r3, [r2, #352]	; 0x160
		}
		//Serial.println("tx");
	}

	if (status & LPI2C_SSR_SDF) { // Stop
     c0c:	lsls	r3, r5, #22
     c0e:	bpl.n	c2c <TwoWire::isr()+0x98>
		//Serial.println("Stop");
		if (rxBufferLength > 0 && user_onReceive != nullptr) {
     c10:	ldrb.w	r0, [r4, #163]	; 0xa3
     c14:	cbz	r0, c1e <TwoWire::isr()+0x8a>
     c16:	ldr.w	r3, [r4, #316]	; 0x13c
     c1a:	cbz	r3, c1e <TwoWire::isr()+0x8a>
			(*user_onReceive)(rxBufferLength);
     c1c:	blx	r3
		}
		rxBufferIndex = 0;
     c1e:	movs	r3, #0
     c20:	strh.w	r3, [r4, #162]	; 0xa2
		rxBufferLength = 0;
		txBufferIndex = 0;
     c24:	strh.w	r3, [r4, #302]	; 0x12e
		txBufferLength = 0;
		transmitting = 0;
     c28:	strb.w	r3, [r4, #304]	; 0x130
	}
}
     c2c:	pop	{r3, r4, r5, pc}
	...

00000c30 <lpi2c1_isr()>:
void lpi2c1_isr(void) { Wire.isr(); }
void lpi2c3_isr(void) { Wire2.isr(); }
void lpi2c4_isr(void) { Wire1.isr(); }
void lpi2c2_isr(void) { Wire3.isr(); }
#else
void lpi2c1_isr(void) { Wire.isr(); }
     c30:	ldr	r0, [pc, #4]	; (c38 <lpi2c1_isr()+0x8>)
     c32:	b.w	b94 <TwoWire::isr()>
     c36:	nop
     c38:	.word	0x200060c8

00000c3c <lpi2c3_isr()>:
void lpi2c3_isr(void) { Wire1.isr(); }
     c3c:	ldr	r0, [pc, #4]	; (c44 <lpi2c3_isr()+0x8>)
     c3e:	b.w	b94 <TwoWire::isr()>
     c42:	nop
     c44:	.word	0x20006208

00000c48 <lpi2c4_isr()>:
void lpi2c4_isr(void) { Wire2.isr(); }
     c48:	ldr	r0, [pc, #4]	; (c50 <lpi2c4_isr()+0x8>)
     c4a:	b.w	b94 <TwoWire::isr()>
     c4e:	nop
     c50:	.word	0x20006348

00000c54 <_GLOBAL__sub_I__ZN7TwoWire5beginEv>:
	}
	port->MCCR1 = port->MCCR0;
	port->MCFGR0 = 0;
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
	port->MCR = LPI2C_MCR_MEN;
}
     c54:	push	{r4, lr}
TwoWire Wire(&IMXRT_LPI2C1, TwoWire::i2c1_hardware);
     c56:	ldr	r4, [pc, #36]	; (c7c <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x28>)
     c58:	ldr	r1, [pc, #36]	; (c80 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x2c>)
     c5a:	mov	r2, r4
     c5c:	ldr	r0, [pc, #36]	; (c84 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x30>)
     c5e:	bl	b2c <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)>
	TwoWire Wire1(&IMXRT_LPI2C3, TwoWire::i2c3_hardware);
     c62:	add.w	r2, r4, #80	; 0x50
     c66:	ldr	r1, [pc, #32]	; (c88 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x34>)
     c68:	ldr	r0, [pc, #32]	; (c8c <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x38>)
     c6a:	bl	b2c <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)>
	TwoWire Wire2(&IMXRT_LPI2C4, TwoWire::i2c4_hardware);
     c6e:	add.w	r2, r4, #160	; 0xa0
     c72:	ldr	r1, [pc, #28]	; (c90 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x3c>)
     c74:	ldr	r0, [pc, #28]	; (c94 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x40>)
     c76:	bl	b2c <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)>
}
     c7a:	pop	{r4, pc}
     c7c:	.word	0x60002404
     c80:	.word	0x403f0000
     c84:	.word	0x200060c8
     c88:	.word	0x403f8000
     c8c:	.word	0x20006208
     c90:	.word	0x403fc000
     c94:	.word	0x20006348

00000c98 <DMAChanneltransferCount(DMAChannel*, unsigned int) [clone .isra.0]>:
//=========================================================================
#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
     c98:	ldrh	r3, [r0, #30]
		tcd->BITER = len & 0x7fff;
     c9a:	uxth	r1, r1
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
     c9c:	lsls	r3, r3, #16
     c9e:	bmi.n	cae <DMAChanneltransferCount(DMAChannel*, unsigned int) [clone .isra.0]+0x16>
		tcd->BITER = len & 0x7fff;
     ca0:	ubfx	r1, r1, #0, #15
     ca4:	strh	r1, [r0, #30]
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
     ca6:	ldrh	r3, [r0, #30]
     ca8:	uxth	r3, r3
     caa:	strh	r3, [r0, #22]
}
     cac:	bx	lr
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
     cae:	ldrh	r3, [r0, #30]
     cb0:	ubfx	r1, r1, #0, #9
     cb4:	and.w	r3, r3, #65024	; 0xfe00
     cb8:	orrs	r3, r1
     cba:	strh	r3, [r0, #30]
     cbc:	b.n	ca6 <DMAChanneltransferCount(DMAChannel*, unsigned int) [clone .isra.0]+0xe>

00000cbe <SPIClass::SPIClass(unsigned int, unsigned int)>:
#if defined(__IMXRT1062__)
	static const SPI_Hardware_t spiclass_lpspi3_hardware;
	static const SPI_Hardware_t spiclass_lpspi1_hardware;
#endif	
public:
	constexpr SPIClass(uintptr_t myport, uintptr_t myhardware)
     cbe:	push	{r3, r4, r5, lr}
		: port_addr(myport), hardware_addr(myhardware) {
     cc0:	movs	r5, #0
	constexpr SPIClass(uintptr_t myport, uintptr_t myhardware)
     cc2:	mov	r4, r0
		: port_addr(myport), hardware_addr(myhardware) {
     cc4:	strd	r1, r2, [r0]
     cc8:	movs	r2, #20
     cca:	mov	r1, r5
     ccc:	str	r5, [r0, #16]
     cce:	strd	r5, r5, [r0, #8]
     cd2:	add	r0, r2
     cd4:	bl	7528 <memset>
     cd8:	movs	r2, #20
     cda:	mov	r1, r5
     cdc:	add.w	r0, r4, #40	; 0x28
     ce0:	bl	7528 <memset>
	}
     ce4:	mov	r0, r4
		: port_addr(myport), hardware_addr(myhardware) {
     ce6:	strh	r5, [r4, #60]	; 0x3c
     ce8:	strd	r5, r5, [r4, #64]	; 0x40
     cec:	strd	r5, r5, [r4, #72]	; 0x48
	}
     cf0:	pop	{r3, r4, r5, pc}
	...

00000cf4 <SPIClass::begin()>:
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
	const SPI_Hardware_t & hardware() { return *(const SPI_Hardware_t *)hardware_addr; }
     cf4:	ldr	r3, [r0, #4]
{
     cf6:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
     cfa:	ldr.w	r8, [r3]
	*(portControlRegister(hardware().miso_pin[miso_pin_index])) = fastio;
     cfe:	movs	r7, #184	; 0xb8
	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
     d00:	ldr	r1, [r3, #4]
     d02:	ldr.w	r2, [r8]
     d06:	bic.w	r2, r2, r1
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
     d0a:	ldr	r1, [pc, #492]	; (ef8 <SPIClass::begin()+0x204>)
	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
     d0c:	str.w	r2, [r8]
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
     d10:	ldr	r2, [r1, #24]
     d12:	bic.w	r2, r2, #469762048	; 0x1c000000
     d16:	bic.w	r2, r2, #48	; 0x30
		CCM_CBCMR_LPSPI_PODF(2) | CCM_CBCMR_LPSPI_CLK_SEL(1); // pg 714
     d1a:	orr.w	r2, r2, #134217728	; 0x8000000
     d1e:	orr.w	r2, r2, #16
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
     d22:	str	r2, [r1, #24]
	*(portControlRegister(hardware().miso_pin[miso_pin_index])) = fastio;
     d24:	ldrb	r5, [r0, #16]
     d26:	ldr	r2, [pc, #468]	; (efc <SPIClass::begin()+0x208>)
     d28:	add.w	ip, r3, r5
	*(portConfigRegister(hardware().miso_pin[miso_pin_index])) = hardware().miso_mux[miso_pin_index];
     d2c:	add.w	r5, r3, r5, lsl #2
	*(portControlRegister(hardware().miso_pin[miso_pin_index])) = fastio;
     d30:	ldrb.w	r1, [ip, #16]
     d34:	add.w	r1, r2, r1, lsl #4
     d38:	ldr	r1, [r1, #8]
     d3a:	str	r7, [r1, #0]
	*(portControlRegister(hardware().mosi_pin[mosi_pin_index])) = fastio;
     d3c:	ldrb	r4, [r0, #17]
     d3e:	adds	r6, r3, r4
	*(portConfigRegister(hardware().mosi_pin [mosi_pin_index])) = hardware().mosi_mux[mosi_pin_index];
     d40:	adds	r4, #10
	*(portControlRegister(hardware().mosi_pin[mosi_pin_index])) = fastio;
     d42:	ldrb.w	r1, [r6, #36]	; 0x24
     d46:	add.w	r1, r2, r1, lsl #4
     d4a:	ldr	r1, [r1, #8]
     d4c:	str	r7, [r1, #0]
	*(portControlRegister(hardware().sck_pin[sck_pin_index])) = fastio;
     d4e:	ldrb.w	sl, [r0, #18]
     d52:	add.w	lr, r3, sl
     d56:	ldrb.w	r9, [lr, #56]	; 0x38
     d5a:	add.w	r9, r2, r9, lsl #4
     d5e:	ldr.w	r9, [r9, #8]
     d62:	str.w	r7, [r9]
	hardware().clock_gate_register |= hardware().clock_gate_mask;
     d66:	ldr	r1, [r3, #4]
     d68:	ldr.w	r7, [r8]
     d6c:	orrs	r7, r1
	*(portConfigRegister(hardware().sck_pin [sck_pin_index])) = hardware().sck_mux[sck_pin_index];
     d6e:	add.w	r1, r3, sl, lsl #2
	hardware().clock_gate_register |= hardware().clock_gate_mask;
     d72:	str.w	r7, [r8]
	*(portConfigRegister(hardware().miso_pin[miso_pin_index])) = hardware().miso_mux[miso_pin_index];
     d76:	ldrb.w	r7, [ip, #16]
     d7a:	ldr	r5, [r5, #20]
     d7c:	add.w	r7, r2, r7, lsl #4
     d80:	ldr	r7, [r7, #4]
     d82:	str	r5, [r7, #0]
	*(portConfigRegister(hardware().mosi_pin [mosi_pin_index])) = hardware().mosi_mux[mosi_pin_index];
     d84:	ldrb.w	r5, [r6, #36]	; 0x24
     d88:	ldr.w	r4, [r3, r4, lsl #2]
     d8c:	add.w	r5, r2, r5, lsl #4
     d90:	ldr	r5, [r5, #4]
     d92:	str	r4, [r5, #0]
	*(portConfigRegister(hardware().sck_pin [sck_pin_index])) = hardware().sck_mux[sck_pin_index];
     d94:	ldrb.w	r4, [lr, #56]	; 0x38
     d98:	add.w	r2, r2, r4, lsl #4
     d9c:	ldr	r2, [r2, #4]
     d9e:	ldr	r1, [r1, #60]	; 0x3c
     da0:	str	r1, [r2, #0]
	hardware().sck_select_input_register = hardware().sck_select_val[sck_pin_index];
     da2:	ldr	r2, [r3, #72]	; 0x48
     da4:	ldrb.w	r1, [lr, #68]	; 0x44
     da8:	str	r1, [r2, #0]
	hardware().miso_select_input_register = hardware().miso_select_val[miso_pin_index];
     daa:	ldr	r2, [r3, #32]
     dac:	ldrb.w	r1, [ip, #28]
	hardware().mosi_select_input_register = hardware().mosi_select_val[mosi_pin_index];
     db0:	ldr	r3, [r3, #52]	; 0x34
	hardware().miso_select_input_register = hardware().miso_select_val[miso_pin_index];
     db2:	str	r1, [r2, #0]
	hardware().mosi_select_input_register = hardware().mosi_select_val[mosi_pin_index];
     db4:	ldrb.w	r2, [r6, #48]	; 0x30
     db8:	str	r2, [r3, #0]
	port().CR = LPSPI_CR_RST;
     dba:	movs	r2, #2
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
     dbc:	ldr	r3, [r0, #0]
     dbe:	str	r2, [r3, #16]
	port().FCR = LPSPI_FCR_TXWATER(15);
     dc0:	movs	r2, #15
     dc2:	str	r2, [r3, #88]	; 0x58
		if (interruptMasksUsed) {
     dc4:	ldrb	r3, [r0, #19]
     dc6:	cmp	r3, #0
     dc8:	beq.n	e3e <SPIClass::begin()+0x14a>
			__disable_irq();
     dca:	cpsid	i
			if (interruptMasksUsed & 0x01) {
     dcc:	ldrb	r3, [r0, #19]
     dce:	lsls	r4, r3, #31
     dd0:	bpl.n	de4 <SPIClass::begin()+0xf0>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
     dd2:	mov.w	r1, #3758153728	; 0xe000e000
     dd6:	ldr	r4, [r0, #20]
     dd8:	ldr.w	r2, [r1, #384]	; 0x180
     ddc:	ands	r2, r4
     dde:	str	r2, [r0, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
     de0:	str.w	r2, [r1, #384]	; 0x180
			if (interruptMasksUsed & 0x02) {
     de4:	lsls	r1, r3, #30
     de6:	bpl.n	dfa <SPIClass::begin()+0x106>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
     de8:	mov.w	r1, #3758153728	; 0xe000e000
     dec:	ldr	r4, [r0, #24]
     dee:	ldr.w	r2, [r1, #388]	; 0x184
     df2:	ands	r2, r4
     df4:	str	r2, [r0, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
     df6:	str.w	r2, [r1, #388]	; 0x184
			if (interruptMasksUsed & 0x04) {
     dfa:	lsls	r2, r3, #29
     dfc:	bpl.n	e10 <SPIClass::begin()+0x11c>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
     dfe:	mov.w	r1, #3758153728	; 0xe000e000
     e02:	ldr	r4, [r0, #28]
     e04:	ldr.w	r2, [r1, #392]	; 0x188
     e08:	ands	r2, r4
     e0a:	str	r2, [r0, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
     e0c:	str.w	r2, [r1, #392]	; 0x188
			if (interruptMasksUsed & 0x08) {
     e10:	lsls	r7, r3, #28
     e12:	bpl.n	e26 <SPIClass::begin()+0x132>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
     e14:	mov.w	r1, #3758153728	; 0xe000e000
     e18:	ldr	r4, [r0, #32]
     e1a:	ldr.w	r2, [r1, #396]	; 0x18c
     e1e:	ands	r2, r4
     e20:	str	r2, [r0, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
     e22:	str.w	r2, [r1, #396]	; 0x18c
			if (interruptMasksUsed & 0x10) {
     e26:	lsls	r6, r3, #27
     e28:	bpl.n	e3c <SPIClass::begin()+0x148>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
     e2a:	mov.w	r2, #3758153728	; 0xe000e000
     e2e:	ldr	r1, [r0, #36]	; 0x24
     e30:	ldr.w	r3, [r2, #400]	; 0x190
     e34:	ands	r3, r1
     e36:	str	r3, [r0, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
     e38:	str.w	r3, [r2, #400]	; 0x190
			__enable_irq();
     e3c:	cpsie	i
		if (settings.clock() != _clock) {
     e3e:	ldr	r1, [pc, #192]	; (f00 <SPIClass::begin()+0x20c>)
     e40:	ldr	r3, [r0, #8]
     e42:	cmp	r3, r1
     e44:	beq.n	e94 <SPIClass::begin()+0x1a0>
			uint32_t cbcmr = CCM_CBCMR;
     e46:	ldr	r3, [pc, #176]	; (ef8 <SPIClass::begin()+0x204>)
		    _clock = settings.clock();
     e48:	str	r1, [r0, #8]
			uint32_t cbcmr = CCM_CBCMR;
     e4a:	ldr	r3, [r3, #24]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
     e4c:	ldr	r2, [pc, #180]	; (f04 <SPIClass::begin()+0x210>)
     e4e:	ubfx	r4, r3, #4, #2
     e52:	ubfx	r3, r3, #26, #3
     e56:	ldr.w	r2, [r2, r4, lsl #2]
     e5a:	adds	r3, #1
     e5c:	udiv	r2, r2, r3
			if (d && clkhz/d > _clock) d++;
     e60:	ldr	r3, [pc, #164]	; (f08 <SPIClass::begin()+0x214>)
     e62:	cmp	r2, r3
     e64:	bls.n	e7e <SPIClass::begin()+0x18a>
			d = _clock ? clkhz/_clock : clkhz;
     e66:	udiv	r3, r2, r1
			if (d && clkhz/d > _clock) d++;
     e6a:	udiv	r2, r2, r3
     e6e:	cmp	r2, r1
     e70:	it	hi
     e72:	addhi	r3, #1
			if (d > 257) d= 257;  // max div
     e74:	cmp.w	r3, #258	; 0x102
     e78:	bcs.n	e82 <SPIClass::begin()+0x18e>
			if (d > 2) {
     e7a:	cmp	r3, #2
     e7c:	bhi.n	e86 <SPIClass::begin()+0x192>
				div =0;
     e7e:	movs	r3, #0
     e80:	b.n	e88 <SPIClass::begin()+0x194>
			if (d > 257) d= 257;  // max div
     e82:	movw	r3, #257	; 0x101
				div = d-2;
     e86:	subs	r3, #2
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
     e88:	lsrs	r1, r3, #1
     e8a:	lsls	r2, r1, #16
     e8c:	orr.w	r2, r2, r1, lsl #8
     e90:	orrs	r3, r2
     e92:	str	r3, [r0, #12]
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
     e94:	ldr	r3, [r0, #0]
		port().CR = 0;
     e96:	movs	r2, #0
     e98:	str	r2, [r3, #16]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
     e9a:	movs	r2, #3
     e9c:	str	r2, [r3, #36]	; 0x24
		port().CCR = _ccr;
     e9e:	ldr	r2, [r0, #12]
     ea0:	str	r2, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
     ea2:	movs	r2, #7
     ea4:	str	r2, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
     ea6:	movs	r2, #1
     ea8:	str	r2, [r3, #16]
		if (interruptMasksUsed) {
     eaa:	ldrb	r3, [r0, #19]
     eac:	cbz	r3, ef4 <SPIClass::begin()+0x200>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
     eae:	lsls	r5, r3, #31
     eb0:	bpl.n	ebc <SPIClass::begin()+0x1c8>
     eb2:	ldr	r1, [r0, #40]	; 0x28
     eb4:	mov.w	r2, #3758153728	; 0xe000e000
     eb8:	str.w	r1, [r2, #256]	; 0x100
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
     ebc:	lsls	r4, r3, #30
     ebe:	bpl.n	eca <SPIClass::begin()+0x1d6>
     ec0:	ldr	r1, [r0, #44]	; 0x2c
     ec2:	mov.w	r2, #3758153728	; 0xe000e000
     ec6:	str.w	r1, [r2, #260]	; 0x104
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
     eca:	lsls	r1, r3, #29
     ecc:	bpl.n	ed8 <SPIClass::begin()+0x1e4>
     ece:	ldr	r1, [r0, #48]	; 0x30
     ed0:	mov.w	r2, #3758153728	; 0xe000e000
     ed4:	str.w	r1, [r2, #264]	; 0x108
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
     ed8:	lsls	r2, r3, #28
     eda:	bpl.n	ee6 <SPIClass::begin()+0x1f2>
     edc:	ldr	r1, [r0, #52]	; 0x34
     ede:	mov.w	r2, #3758153728	; 0xe000e000
     ee2:	str.w	r1, [r2, #268]	; 0x10c
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
     ee6:	lsls	r3, r3, #27
     ee8:	bpl.n	ef4 <SPIClass::begin()+0x200>
     eea:	ldr	r2, [r0, #56]	; 0x38
     eec:	mov.w	r3, #3758153728	; 0xe000e000
     ef0:	str.w	r2, [r3, #272]	; 0x110
}
     ef4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     ef8:	.word	0x400fc000
     efc:	.word	0x20000ae8
     f00:	.word	0x003d0900
     f04:	.word	0x20000854
     f08:	.word	0x003d08ff

00000f0c <SPIClass::transfer(void const*, void*, unsigned int)>:
{
     f0c:	push	{r4, r5, r6, lr}
	if (count == 0) return;
     f0e:	cbz	r3, f46 <SPIClass::transfer(void const*, void*, unsigned int)+0x3a>
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
     f10:	ldr	r4, [r0, #0]
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 
     f12:	movw	r5, #513	; 0x201
     f16:	str	r5, [r4, #16]
     f18:	mov	r4, r3
		port().TDR = p_write? *p_write++ : _transferWriteFill;
     f1a:	cbz	r1, f48 <SPIClass::transfer(void const*, void*, unsigned int)+0x3c>
     f1c:	ldrb.w	r5, [r1], #1
     f20:	ldr	r6, [r0, #0]
		count--; // how many bytes left to output.
     f22:	subs	r3, #1
		port().TDR = p_write? *p_write++ : _transferWriteFill;
     f24:	str	r5, [r6, #100]	; 0x64
     f26:	ldr	r5, [r0, #0]
			if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
     f28:	ldr	r6, [r5, #112]	; 0x70
     f2a:	lsls	r6, r6, #30
     f2c:	bmi.n	f38 <SPIClass::transfer(void const*, void*, unsigned int)+0x2c>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
     f2e:	ldr	r5, [r5, #116]	; 0x74
				if (p_read) *p_read++ = b; 
     f30:	cbz	r2, f36 <SPIClass::transfer(void const*, void*, unsigned int)+0x2a>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
     f32:	strb.w	r5, [r2], #1
				count_read--;
     f36:	subs	r4, #1
     f38:	ldr	r5, [r0, #0]
		} while ((port().SR & LPSPI_SR_TDF) == 0) ;
     f3a:	ldr	r5, [r5, #20]
     f3c:	lsls	r5, r5, #31
     f3e:	bpl.n	f26 <SPIClass::transfer(void const*, void*, unsigned int)+0x1a>
	while (count > 0) {
     f40:	cmp	r3, #0
     f42:	bne.n	f1a <SPIClass::transfer(void const*, void*, unsigned int)+0xe>
	while (count_read) {
     f44:	cbnz	r4, f4e <SPIClass::transfer(void const*, void*, unsigned int)+0x42>
}
     f46:	pop	{r4, r5, r6, pc}
		port().TDR = p_write? *p_write++ : _transferWriteFill;
     f48:	ldrb.w	r5, [r0, #60]	; 0x3c
     f4c:	b.n	f20 <SPIClass::transfer(void const*, void*, unsigned int)+0x14>
     f4e:	ldr	r3, [r0, #0]
		if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
     f50:	ldr	r1, [r3, #112]	; 0x70
     f52:	lsls	r1, r1, #30
     f54:	bmi.n	f44 <SPIClass::transfer(void const*, void*, unsigned int)+0x38>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
     f56:	ldr	r3, [r3, #116]	; 0x74
			if (p_read) *p_read++ = b; 
     f58:	cbz	r2, f5e <SPIClass::transfer(void const*, void*, unsigned int)+0x52>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
     f5a:	strb.w	r3, [r2], #1
			count_read--;
     f5e:	subs	r4, #1
     f60:	b.n	f44 <SPIClass::transfer(void const*, void*, unsigned int)+0x38>

00000f62 <SPIClass::end()>:
	const SPI_Hardware_t & hardware() { return *(const SPI_Hardware_t *)hardware_addr; }
     f62:	ldr	r3, [r0, #4]
	if (hardware().clock_gate_register & hardware().clock_gate_mask) {
     f64:	ldr	r2, [r3, #0]
     f66:	ldr	r1, [r2, #0]
     f68:	ldr	r2, [r3, #4]
     f6a:	tst	r1, r2
void SPIClass::end() {
     f6c:	push	{r4, lr}
     f6e:	mov	r4, r0
	if (hardware().clock_gate_register & hardware().clock_gate_mask) {
     f70:	beq.n	fa8 <SPIClass::end()+0x46>
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
     f72:	ldr	r2, [r0, #0]
		port().CR = 0;  // turn off the enable
     f74:	movs	r1, #0
     f76:	str	r1, [r2, #16]
		pinMode(hardware().miso_pin[miso_pin_index], INPUT_DISABLE);
     f78:	movs	r1, #5
     f7a:	ldrb	r2, [r0, #16]
     f7c:	add	r3, r2
     f7e:	ldrb	r0, [r3, #16]
     f80:	bl	8cb8 <pinMode>
		pinMode(hardware().mosi_pin[mosi_pin_index], INPUT_DISABLE);
     f84:	ldrb	r2, [r4, #17]
     f86:	ldr	r3, [r4, #4]
     f88:	movs	r1, #5
     f8a:	add	r3, r2
     f8c:	ldrb.w	r0, [r3, #36]	; 0x24
     f90:	bl	8cb8 <pinMode>
		pinMode(hardware().sck_pin[sck_pin_index], INPUT_DISABLE);
     f94:	ldr	r3, [r4, #4]
     f96:	ldrb	r2, [r4, #18]
     f98:	movs	r1, #5
     f9a:	add	r3, r2
}
     f9c:	ldmia.w	sp!, {r4, lr}
		pinMode(hardware().sck_pin[sck_pin_index], INPUT_DISABLE);
     fa0:	ldrb.w	r0, [r3, #56]	; 0x38
     fa4:	b.w	8cb8 <pinMode>
}
     fa8:	pop	{r4, pc}
	...

00000fac <SPIClass::dma_rxisr()>:


//-------------------------------------------------------------------------
// DMA RX ISR
//-------------------------------------------------------------------------
void SPIClass::dma_rxisr(void) {
     fac:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	_dmaRX->clearInterrupt();
     fb0:	ldr	r7, [r0, #72]	; 0x48
void SPIClass::dma_rxisr(void) {
     fb2:	mov	r4, r0
		DMA_CINT = channel;
     fb4:	ldr	r3, [pc, #100]	; (101c <SPIClass::dma_rxisr()+0x70>)
     fb6:	ldrb	r5, [r7, #4]
     fb8:	strb	r5, [r3, #31]
	_dmaTX->clearComplete();
     fba:	ldr	r0, [r0, #68]	; 0x44
	bool complete(void) {
		if (TCD->CSR & DMA_TCD_CSR_DONE) return true;
		return false;
	}
	void clearComplete(void) {
		DMA_CDNE = channel;
     fbc:	ldrb	r6, [r0, #4]
     fbe:	strb	r6, [r3, #28]
     fc0:	strb	r5, [r3, #28]
	_dmaRX->clearComplete();

	if (_dma_count_remaining) {
     fc2:	ldr	r2, [r4, #64]	; 0x40
     fc4:	cbz	r2, ff2 <SPIClass::dma_rxisr()+0x46>
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > MAX_DMA_COUNT) {
     fc6:	cmp.w	r2, #32768	; 0x8000
     fca:	bcc.n	fde <SPIClass::dma_rxisr()+0x32>
			_dma_count_remaining -= MAX_DMA_COUNT;
     fcc:	sub.w	r2, r2, #32640	; 0x7f80
     fd0:	subs	r2, #127	; 0x7f
		DMA_SERQ = channel;
     fd2:	ldr	r3, [pc, #72]	; (101c <SPIClass::dma_rxisr()+0x70>)
     fd4:	str	r2, [r4, #64]	; 0x40
     fd6:	strb	r5, [r3, #27]
     fd8:	strb	r6, [r3, #27]

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();

	}
}
     fda:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining);
     fde:	mov	r1, r2
     fe0:	ldr	r0, [r0, #0]
     fe2:	bl	c98 <DMAChanneltransferCount(DMAChannel*, unsigned int) [clone .isra.0]>
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);
     fe6:	mov	r1, r2
     fe8:	ldr	r0, [r7, #0]
     fea:	movs	r2, #0
     fec:	bl	c98 <DMAChanneltransferCount(DMAChannel*, unsigned int) [clone .isra.0]>
			_dma_count_remaining = 0;
     ff0:	b.n	fd2 <SPIClass::dma_rxisr()+0x26>
     ff2:	ldr	r3, [r4, #0]
		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
     ff4:	movs	r1, #15
		_dma_event_responder->triggerEvent();
     ff6:	ldr	r0, [r4, #76]	; 0x4c
		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
     ff8:	str	r1, [r3, #88]	; 0x58
		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
     ffa:	movw	r1, #769	; 0x301
 		port().DER = 0;		// DMA no longer doing TX (or RX)
     ffe:	str	r2, [r3, #28]
		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    1000:	str	r1, [r3, #16]
		port().SR = 0x3f00;	// clear out all of the other status...
    1002:	mov.w	r1, #16128	; 0x3f00
    1006:	str	r1, [r3, #20]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    1008:	movs	r3, #3
		_dma_event_responder->triggerEvent();
    100a:	mov	r1, r2
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    100c:	strb.w	r3, [r4, #61]	; 0x3d
		_dma_event_responder->triggerEvent();
    1010:	ldr	r3, [r0, #0]
}
    1012:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		_dma_event_responder->triggerEvent();
    1016:	ldr	r3, [r3, #0]
    1018:	bx	r3
    101a:	nop
    101c:	.word	0x400e8000

00001020 <_spi_dma_rxISR0()>:
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    1020:	ldr	r0, [pc, #8]	; (102c <_spi_dma_rxISR0()+0xc>)
    1022:	push	{r3, lr}
    1024:	bl	fac <SPIClass::dma_rxisr()>
    1028:	pop	{r3, pc}
    102a:	nop
    102c:	.word	0x20005fd8

00001030 <_spi_dma_rxISR1()>:
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    1030:	ldr	r0, [pc, #8]	; (103c <_spi_dma_rxISR1()+0xc>)
    1032:	push	{r3, lr}
    1034:	bl	fac <SPIClass::dma_rxisr()>
    1038:	pop	{r3, pc}
    103a:	nop
    103c:	.word	0x20006028

00001040 <_GLOBAL__sub_I__ZN8SPIClass5beginEv>:
}
    1040:	push	{r3, lr}
SPIClass SPI((uintptr_t)&IMXRT_LPSPI4_S, (uintptr_t)&SPIClass::spiclass_lpspi4_hardware);
    1042:	ldr	r2, [pc, #32]	; (1064 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x24>)
    1044:	ldr	r1, [pc, #32]	; (1068 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x28>)
    1046:	ldr	r0, [pc, #36]	; (106c <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x2c>)
    1048:	bl	cbe <SPIClass::SPIClass(unsigned int, unsigned int)>
SPIClass SPI1((uintptr_t)&IMXRT_LPSPI3_S, (uintptr_t)&SPIClass::spiclass_lpspi3_hardware);
    104c:	ldr	r2, [pc, #32]	; (1070 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x30>)
    104e:	ldr	r1, [pc, #36]	; (1074 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x34>)
    1050:	ldr	r0, [pc, #36]	; (1078 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x38>)
    1052:	bl	cbe <SPIClass::SPIClass(unsigned int, unsigned int)>
SPIClass SPI2((uintptr_t)&IMXRT_LPSPI1_S, (uintptr_t)&SPIClass::spiclass_lpspi1_hardware);
    1056:	ldr	r2, [pc, #36]	; (107c <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x3c>)
    1058:	ldr	r1, [pc, #36]	; (1080 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x40>)
    105a:	ldr	r0, [pc, #40]	; (1084 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x44>)
    105c:	bl	cbe <SPIClass::SPIClass(unsigned int, unsigned int)>
}
    1060:	pop	{r3, pc}
    1062:	nop
    1064:	.word	0x20000550
    1068:	.word	0x403a0000
    106c:	.word	0x20005fd8
    1070:	.word	0x200004e0
    1074:	.word	0x4039c000
    1078:	.word	0x20006028
    107c:	.word	0x20000470
    1080:	.word	0x40394000
    1084:	.word	0x20006078

00001088 <Print::flush()>:
	virtual void flush()				{ }
    1088:	bx	lr

0000108a <SDClass::~SDClass()>:
	char *filename;
};



class SDClass : public FS
    108a:	bx	lr

0000108c <SDClass::dateTime(unsigned short*, unsigned short*)>:
{
    108c:	push	{r0, r1, r2, r4, r5, lr}
    108e:	mov	r5, r0
    1090:	mov	r4, r1
        static unsigned long get(void) __attribute__((always_inline)) { return rtc_get(); }
    1092:	bl	8b10 <rtc_get>
	if (now < 315532800) { // before 1980
    1096:	ldr	r3, [pc, #112]	; (1108 <SDClass::dateTime(unsigned short*, unsigned short*)+0x7c>)
    1098:	cmp	r0, r3
    109a:	bhi.n	10a6 <SDClass::dateTime(unsigned short*, unsigned short*)+0x1a>
		*date = 0;
    109c:	movs	r3, #0
    109e:	strh	r3, [r5, #0]
		*time = FS_TIME(datetime.hour, datetime.min, datetime.sec);
    10a0:	strh	r3, [r4, #0]
}
    10a2:	add	sp, #12
    10a4:	pop	{r4, r5, pc}
		breakTime(now, datetime);
    10a6:	mov	r1, sp
    10a8:	bl	9324 <breakTime(unsigned long, DateTimeFields&)>
		*date = FS_DATE(datetime.year + 1900, datetime.mon + 1, datetime.mday);
    10ac:	ldrb.w	r2, [sp, #6]
    10b0:	ldrb.w	r1, [sp, #5]
 * \param[in] day [1,31]
 *
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
    10b4:	subs	r2, #80	; 0x50
    10b6:	ldrb.w	r3, [sp, #4]
    10ba:	uxth	r2, r2
  return year > 127 || month > 12 || day > 31 ? 0
                                              : year << 9 | month << 5 | day;
    10bc:	cmp	r2, #127	; 0x7f
    10be:	bhi.n	10fe <SDClass::dateTime(unsigned short*, unsigned short*)+0x72>
    10c0:	adds	r1, #1
    10c2:	uxtb	r1, r1
  return year > 127 || month > 12 || day > 31 ? 0
    10c4:	cmp	r1, #12
    10c6:	bhi.n	10fe <SDClass::dateTime(unsigned short*, unsigned short*)+0x72>
    10c8:	cmp	r3, #31
    10ca:	bhi.n	10fe <SDClass::dateTime(unsigned short*, unsigned short*)+0x72>
                                              : year << 9 | month << 5 | day;
    10cc:	orr.w	r3, r3, r1, lsl #5
    10d0:	orr.w	r3, r3, r2, lsl #9
    10d4:	uxth	r3, r3
		*time = FS_TIME(datetime.hour, datetime.min, datetime.sec);
    10d6:	ldrb.w	r1, [sp, #2]
		*date = FS_DATE(datetime.year + 1900, datetime.mon + 1, datetime.mday);
    10da:	strh	r3, [r5, #0]
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59
             ? 0
             : hour << 11 | minute << 5 | second >> 1;
    10dc:	cmp	r1, #23
		*time = FS_TIME(datetime.hour, datetime.min, datetime.sec);
    10de:	ldrb.w	r3, [sp, #1]
    10e2:	ldrb.w	r2, [sp]
    10e6:	bhi.n	1102 <SDClass::dateTime(unsigned short*, unsigned short*)+0x76>
  return hour > 23 || minute > 59 || second > 59
    10e8:	cmp	r3, #59	; 0x3b
    10ea:	bhi.n	1102 <SDClass::dateTime(unsigned short*, unsigned short*)+0x76>
    10ec:	cmp	r2, #59	; 0x3b
    10ee:	bhi.n	1102 <SDClass::dateTime(unsigned short*, unsigned short*)+0x76>
             : hour << 11 | minute << 5 | second >> 1;
    10f0:	lsls	r3, r3, #5
    10f2:	orr.w	r3, r3, r1, lsl #11
    10f6:	orr.w	r3, r3, r2, lsr #1
    10fa:	uxth	r3, r3
    10fc:	b.n	10a0 <SDClass::dateTime(unsigned short*, unsigned short*)+0x14>
                                              : year << 9 | month << 5 | day;
    10fe:	movs	r3, #0
    1100:	b.n	10d6 <SDClass::dateTime(unsigned short*, unsigned short*)+0x4a>
             : hour << 11 | minute << 5 | second >> 1;
    1102:	movs	r3, #0
    1104:	b.n	10a0 <SDClass::dateTime(unsigned short*, unsigned short*)+0x14>
    1106:	nop
    1108:	.word	0x12cea5ff

0000110c <SdBase<FsVolume, FsFormatter>::begin(SdioConfig) [clone .part.0]>:
  bool begin(SdioConfig sdioConfig) {
    // Teensy mod <<
    spiConfigBackupPin = 255; // Teensy
    sdioConfigBackup = sdioConfig;
    // <<
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    110c:	movs	r3, #0
  bool begin(SdioConfig sdioConfig) {
    110e:	push	{r0, r1, r2, lr}
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    1110:	str	r3, [sp, #0]
    1112:	movs	r3, #1
    1114:	ldr.w	r1, [r0, #1160]	; 0x488
    1118:	mov	r2, r3
    111a:	bl	58c4 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)>
  }
    111e:	add	sp, #12
    1120:	ldr.w	pc, [sp], #4

00001124 <SDFile::name()>:
	virtual const char * name() {
    1124:	push	{r3, r4, r5, lr}
		if (!filename) {
    1126:	ldr	r5, [r0, #88]	; 0x58
	virtual const char * name() {
    1128:	mov	r4, r0
		if (!filename) {
    112a:	cbnz	r5, 1148 <SDFile::name()+0x24>
			filename = (char *)malloc(MAX_FILENAME_LEN);
    112c:	mov.w	r0, #256	; 0x100
    1130:	bl	a180 <malloc>
    1134:	mov	r1, r0
    1136:	str	r0, [r4, #88]	; 0x58
			if (filename) {
    1138:	cbz	r0, 115c <SDFile::name()+0x38>
   *             must be at least 13 bytes long.  The file's name will be
   *             truncated if the file's name is too long.
   * \return The length of the returned string.
   */
  size_t getName(char* name, size_t len) {
    *name = 0;
    113a:	strb	r5, [r0, #0]
    return m_fFile   ? m_fFile->getName(name, len)
    113c:	ldr	r0, [r4, #80]	; 0x50
    113e:	cbz	r0, 114c <SDFile::name()+0x28>
    1140:	mov.w	r2, #256	; 0x100
    1144:	bl	401a <FatFile::getName(char*, unsigned int)>
	}
    1148:	ldr	r0, [r4, #88]	; 0x58
    114a:	pop	{r3, r4, r5, pc}
    114c:	ldr	r0, [r4, #84]	; 0x54
           : m_xFile ? m_xFile->getName(name, len)
    114e:	cmp	r0, #0
    1150:	beq.n	1148 <SDFile::name()+0x24>
   */
  size_t getName(char* name, size_t size) {
#if USE_UTF8_LONG_NAMES
    return getName8(name, size);
#else   // USE_UTF8_LONG_NAMES
    return getName7(name, size);
    1152:	mov.w	r2, #256	; 0x100
    1156:	bl	2402 <ExFatFile::getName7(char*, unsigned int)>
    115a:	b.n	1148 <SDFile::name()+0x24>
				filename = &zeroterm;
    115c:	ldr	r3, [pc, #4]	; (1164 <SDFile::name()+0x40>)
    115e:	str	r3, [r4, #88]	; 0x58
    1160:	b.n	1148 <SDFile::name()+0x24>
    1162:	nop
    1164:	.word	0x20007200

00001168 <SDFile::truncate(unsigned long long)>:
	virtual bool truncate(uint64_t size=0) {
    1168:	push	{r3, r4, r5, lr}
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint64_t length) {
    return m_fFile   ? length < (1ULL << 32) && m_fFile->truncate(length)
    116a:	ldr	r4, [r0, #80]	; 0x50
    116c:	mov	r1, r2
    116e:	cbz	r4, 1184 <SDFile::truncate(unsigned long long)+0x1c>
    1170:	cbnz	r3, 119a <SDFile::truncate(unsigned long long)+0x32>
   *
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint32_t length) { return seekSet(length) && truncate(); }
    1172:	mov	r0, r4
    1174:	bl	435a <FatFile::seekSet(unsigned long)>
    1178:	cbz	r0, 119a <SDFile::truncate(unsigned long long)+0x32>
    117a:	mov	r0, r4
	}
    117c:	ldmia.w	sp!, {r3, r4, r5, lr}
    1180:	b.w	4b36 <FatFile::truncate()>
    1184:	ldr	r4, [r0, #84]	; 0x54
           : m_xFile ? m_xFile->truncate(length)
    1186:	cbz	r4, 119a <SDFile::truncate(unsigned long long)+0x32>
   *
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint64_t length) { return seekSet(length) && truncate(); }
    1188:	mov	r0, r4
    118a:	bl	27a0 <ExFatFile::seekSet(unsigned long long)>
    118e:	cbz	r0, 119a <SDFile::truncate(unsigned long long)+0x32>
    1190:	mov	r0, r4
    1192:	ldmia.w	sp!, {r3, r4, r5, lr}
    1196:	b.w	3720 <ExFatFile::truncate()>
    119a:	movs	r0, #0
    119c:	pop	{r3, r4, r5, pc}

0000119e <SDFile::getModifyTime(DateTimeFields&)>:
    return m_fFile   ? m_fFile->getModifyDateTime(pdate, ptime)
    119e:	ldr	r3, [r0, #80]	; 0x50
	virtual bool getModifyTime(DateTimeFields &tm) {
    11a0:	push	{r0, r1, r4, lr}
    11a2:	mov	r4, r1
    11a4:	cbz	r3, 11c8 <SDFile::getModifyTime(DateTimeFields&)+0x2a>
    11a6:	add.w	r2, sp, #6
    11aa:	add	r1, sp, #4
    11ac:	mov	r0, r3
    11ae:	bl	4742 <FatFile::getModifyDateTime(unsigned short*, unsigned short*)>
		if (!sdfatfile.getModifyDateTime(&fat_date, &fat_time)) return false;
    11b2:	cbz	r0, 11c2 <SDFile::getModifyTime(DateTimeFields&)+0x24>
		if ((fat_date == 0) && (fat_time == 0)) return false;
    11b4:	ldrh.w	r3, [sp, #4]
    11b8:	ldrh.w	r2, [sp, #6]
    11bc:	orrs.w	r1, r3, r2
    11c0:	bne.n	11da <SDFile::getModifyTime(DateTimeFields&)+0x3c>
		if (!sdfatfile.getModifyDateTime(&fat_date, &fat_time)) return false;
    11c2:	movs	r0, #0
	}
    11c4:	add	sp, #8
    11c6:	pop	{r4, pc}
    11c8:	ldr	r0, [r0, #84]	; 0x54
           : m_xFile ? m_xFile->getModifyDateTime(pdate, ptime)
    11ca:	cmp	r0, #0
    11cc:	beq.n	11c2 <SDFile::getModifyTime(DateTimeFields&)+0x24>
    11ce:	add.w	r2, sp, #6
    11d2:	add	r1, sp, #4
    11d4:	bl	2524 <ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)>
    11d8:	b.n	11b2 <SDFile::getModifyTime(DateTimeFields&)+0x14>
 * \param[in] fatTime Time in packed dir format.
 *
 * \return Extracted second [0,58]
 */
static inline uint8_t FS_SECOND(uint16_t fatTime) {
  return 2 * (fatTime & 0X1F);
    11da:	and.w	r1, r2, #31
		return true;
    11de:	movs	r0, #1
    11e0:	lsls	r1, r1, #1
		tm.sec = FS_SECOND(fat_time);
    11e2:	strb	r1, [r4, #0]
  return (fatTime >> 5) & 0X3F;
    11e4:	ubfx	r1, r2, #5, #6
static inline uint8_t FS_HOUR(uint16_t fatTime) { return fatTime >> 11; }
    11e8:	lsrs	r2, r2, #11
		tm.min = FS_MINUTE(fat_time);
    11ea:	strb	r1, [r4, #1]
    11ec:	strb	r2, [r4, #2]
static inline uint8_t FS_DAY(uint16_t fatDate) { return fatDate & 0X1F; }
    11ee:	and.w	r2, r3, #31
		tm.mday = FS_DAY(fat_date);
    11f2:	strb	r2, [r4, #4]
  return (fatDate >> 5) & 0XF;
    11f4:	ubfx	r2, r3, #5, #4
  return 1980 + (fatDate >> 9);
    11f8:	lsrs	r3, r3, #9
		tm.mon = FS_MONTH(fat_date) - 1;
    11fa:	subs	r2, #1
		tm.year = FS_YEAR(fat_date) - 1900;
    11fc:	add.w	r3, r3, #1872	; 0x750
		tm.mon = FS_MONTH(fat_date) - 1;
    1200:	strb	r2, [r4, #5]
		tm.year = FS_YEAR(fat_date) - 1900;
    1202:	strb	r3, [r4, #6]
		return true;
    1204:	b.n	11c4 <SDFile::getModifyTime(DateTimeFields&)+0x26>

00001206 <SDFile::getCreateTime(DateTimeFields&)>:
    return m_fFile   ? m_fFile->getCreateDateTime(pdate, ptime)
    1206:	ldr	r3, [r0, #80]	; 0x50
	virtual bool getCreateTime(DateTimeFields &tm) {
    1208:	push	{r0, r1, r4, lr}
    120a:	mov	r4, r1
    120c:	cbz	r3, 1230 <SDFile::getCreateTime(DateTimeFields&)+0x2a>
    120e:	add.w	r2, sp, #6
    1212:	add	r1, sp, #4
    1214:	mov	r0, r3
    1216:	bl	4722 <FatFile::getCreateDateTime(unsigned short*, unsigned short*)>
		if (!sdfatfile.getCreateDateTime(&fat_date, &fat_time)) return false;
    121a:	cbz	r0, 122a <SDFile::getCreateTime(DateTimeFields&)+0x24>
		if ((fat_date == 0) && (fat_time == 0)) return false;
    121c:	ldrh.w	r3, [sp, #4]
    1220:	ldrh.w	r2, [sp, #6]
    1224:	orrs.w	r1, r3, r2
    1228:	bne.n	1242 <SDFile::getCreateTime(DateTimeFields&)+0x3c>
		if (!sdfatfile.getCreateDateTime(&fat_date, &fat_time)) return false;
    122a:	movs	r0, #0
	}
    122c:	add	sp, #8
    122e:	pop	{r4, pc}
    1230:	ldr	r0, [r0, #84]	; 0x54
           : m_xFile ? m_xFile->getCreateDateTime(pdate, ptime)
    1232:	cmp	r0, #0
    1234:	beq.n	122a <SDFile::getCreateTime(DateTimeFields&)+0x24>
    1236:	add.w	r2, sp, #6
    123a:	add	r1, sp, #4
    123c:	bl	2504 <ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)>
    1240:	b.n	121a <SDFile::getCreateTime(DateTimeFields&)+0x14>
  return 2 * (fatTime & 0X1F);
    1242:	and.w	r1, r2, #31
		return true;
    1246:	movs	r0, #1
    1248:	lsls	r1, r1, #1
		tm.sec = FS_SECOND(fat_time);
    124a:	strb	r1, [r4, #0]
  return (fatTime >> 5) & 0X3F;
    124c:	ubfx	r1, r2, #5, #6
static inline uint8_t FS_HOUR(uint16_t fatTime) { return fatTime >> 11; }
    1250:	lsrs	r2, r2, #11
		tm.min = FS_MINUTE(fat_time);
    1252:	strb	r1, [r4, #1]
    1254:	strb	r2, [r4, #2]
static inline uint8_t FS_DAY(uint16_t fatDate) { return fatDate & 0X1F; }
    1256:	and.w	r2, r3, #31
		tm.mday = FS_DAY(fat_date);
    125a:	strb	r2, [r4, #4]
  return (fatDate >> 5) & 0XF;
    125c:	ubfx	r2, r3, #5, #4
  return 1980 + (fatDate >> 9);
    1260:	lsrs	r3, r3, #9
		tm.mon = FS_MONTH(fat_date) - 1;
    1262:	subs	r2, #1
		tm.year = FS_YEAR(fat_date) - 1900;
    1264:	add.w	r3, r3, #1872	; 0x750
		tm.mon = FS_MONTH(fat_date) - 1;
    1268:	strb	r2, [r4, #5]
		tm.year = FS_YEAR(fat_date) - 1900;
    126a:	strb	r3, [r4, #6]
		return true;
    126c:	b.n	122c <SDFile::getCreateTime(DateTimeFields&)+0x26>

0000126e <SDFile::position()>:
    return m_fFile   ? m_fFile->curPosition()
    126e:	ldr	r3, [r0, #80]	; 0x50
    1270:	cbz	r3, 1278 <SDFile::position()+0xa>
    1272:	ldr	r0, [r3, #20]
    1274:	movs	r1, #0
    1276:	bx	lr
    1278:	ldr	r3, [r0, #84]	; 0x54
           : m_xFile ? m_xFile->curPosition()
    127a:	cbz	r3, 1282 <SDFile::position()+0x14>
  uint64_t curPosition() const { return m_curPosition; }
    127c:	ldrd	r0, r1, [r3]
    1280:	bx	lr
    1282:	mov	r0, r3
    1284:	b.n	1274 <SDFile::position()+0x6>

00001286 <SDClass::rmdir(char const*)>:
		return sdfs.rename(oldfilepath, newfilepath);
	}
	bool remove(const char *filepath) {
		return sdfs.remove(filepath);
	}
	bool rmdir(const char *filepath) {
    1286:	mov	r2, r1
   * The subdirectory file will be removed only if it is empty.
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char* path) {
    return m_fVol ? m_fVol->rmdir(path) : m_xVol ? m_xVol->rmdir(path) : false;
    1288:	ldr.w	r1, [r0, #1156]	; 0x484
    128c:	push	{lr}
    128e:	sub	sp, #60	; 0x3c
    1290:	cbz	r1, 12aa <SDClass::rmdir(char const*)+0x24>
  FatFile() {}
    1292:	movs	r3, #0
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char* path) {
    FatFile sub;
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    1294:	mov	r0, sp
    1296:	str	r3, [sp, #0]
    1298:	bl	46de <FatFile::open(FatVolume*, char const*, int)>
    129c:	cbz	r0, 12a4 <SDClass::rmdir(char const*)+0x1e>
    129e:	mov	r0, sp
    12a0:	bl	4560 <FatFile::rmdir()>
		return sdfs.rmdir(filepath);
	}
    12a4:	add	sp, #60	; 0x3c
    12a6:	ldr.w	pc, [sp], #4
    12aa:	ldr.w	r0, [r0, #1160]	; 0x488
    12ae:	cmp	r0, #0
    12b0:	beq.n	12a4 <SDClass::rmdir(char const*)+0x1e>
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char* path) {
    ExFatFile sub;
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    12b2:	mov	r3, r1
  ExFatFile() {}
    12b4:	str	r1, [sp, #48]	; 0x30
    12b6:	mov	r1, r0
    12b8:	mov	r0, sp
    12ba:	bl	2c92 <ExFatFile::open(ExFatVolume*, char const*, int)>
    12be:	cbnz	r0, 12c4 <SDClass::rmdir(char const*)+0x3e>
    12c0:	movs	r0, #0
    12c2:	b.n	12a4 <SDClass::rmdir(char const*)+0x1e>
    12c4:	mov	r0, sp
    12c6:	bl	3254 <ExFatFile::rmdir()>
    12ca:	cmp	r0, #0
    12cc:	beq.n	12c0 <SDClass::rmdir(char const*)+0x3a>
    12ce:	b.n	12a4 <SDClass::rmdir(char const*)+0x1e>

000012d0 <SDClass::rename(char const*, char const*)>:
    return m_fVol   ? m_fVol->rename(oldPath, newPath)
    12d0:	ldr.w	r3, [r0, #1156]	; 0x484
	bool rename(const char *oldfilepath, const char *newfilepath) {
    12d4:	push	{r4, r5, lr}
    12d6:	mov	r5, r1
    12d8:	sub	sp, #68	; 0x44
    12da:	mov	r4, r2
    12dc:	cbz	r3, 1302 <SDClass::rename(char const*, char const*)+0x32>
    12de:	movs	r2, #0
#endif  // ENABLE_ARDUINO_STRING

 private:
  friend FatFile;
  static FatVolume* cwv() { return m_cwv; }
  FatFile* vwd() { return &m_vwd; }
    12e0:	addw	r1, r3, #1092	; 0x444
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
    12e4:	add	r0, sp, #8
    12e6:	mov	r3, r2
    12e8:	str	r2, [sp, #8]
    12ea:	mov	r2, r5
    12ec:	str	r1, [sp, #4]
    12ee:	bl	4644 <FatFile::open(FatFile*, char const*, int)>
    12f2:	ldr	r1, [sp, #4]
    12f4:	cbz	r0, 12fe <SDClass::rename(char const*, char const*)+0x2e>
    12f6:	mov	r2, r4
    12f8:	add	r0, sp, #8
    12fa:	bl	48fc <FatFile::rename(FatFile*, char const*)>
	}
    12fe:	add	sp, #68	; 0x44
    1300:	pop	{r4, r5, pc}
    1302:	ldr.w	r0, [r0, #1160]	; 0x488
           : m_xVol ? m_xVol->rename(oldPath, newPath)
    1306:	cmp	r0, #0
    1308:	beq.n	12fe <SDClass::rename(char const*, char const*)+0x2e>
#endif  // ENABLE_ARDUINO_STRING

 private:
  friend ExFatFile;
  static ExFatVolume* cwv() { return m_cwv; }
  ExFatFile* vwd() { return &m_vwd; }
    130a:	add.w	r1, r0, #1096	; 0x448
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
    130e:	mov	r2, r5
    1310:	add	r0, sp, #8
    1312:	str	r3, [sp, #56]	; 0x38
    1314:	str	r1, [sp, #4]
    1316:	bl	2bd0 <ExFatFile::open(ExFatFile*, char const*, int)>
    131a:	ldr	r1, [sp, #4]
    131c:	cbnz	r0, 1322 <SDClass::rename(char const*, char const*)+0x52>
    131e:	movs	r0, #0
    1320:	b.n	12fe <SDClass::rename(char const*, char const*)+0x2e>
    1322:	mov	r2, r4
    1324:	add	r0, sp, #8
    1326:	bl	357c <ExFatFile::rename(ExFatFile*, char const*)>
    132a:	cmp	r0, #0
    132c:	beq.n	131e <SDClass::rename(char const*, char const*)+0x4e>
    132e:	b.n	12fe <SDClass::rename(char const*, char const*)+0x2e>

00001330 <SDClass::remove(char const*)>:
	bool remove(const char *filepath) {
    1330:	mov	r2, r1
    return m_fVol   ? m_fVol->remove(path)
    1332:	ldr.w	r1, [r0, #1156]	; 0x484
    1336:	push	{lr}
    1338:	sub	sp, #60	; 0x3c
    133a:	cbz	r1, 1356 <SDClass::remove(char const*)+0x26>
    133c:	movs	r3, #0
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    133e:	mov	r0, sp
    1340:	str	r3, [sp, #0]
    1342:	movs	r3, #1
    1344:	bl	46de <FatFile::open(FatVolume*, char const*, int)>
    1348:	cbz	r0, 1350 <SDClass::remove(char const*)+0x20>
    134a:	mov	r0, sp
    134c:	bl	56b8 <FatFile::remove()>
	}
    1350:	add	sp, #60	; 0x3c
    1352:	ldr.w	pc, [sp], #4
    1356:	ldr.w	r0, [r0, #1160]	; 0x488
           : m_xVol ? m_xVol->remove(path)
    135a:	cmp	r0, #0
    135c:	beq.n	1350 <SDClass::remove(char const*)+0x20>
    135e:	str	r1, [sp, #48]	; 0x30
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    1360:	movs	r3, #1
    1362:	mov	r1, r0
    1364:	mov	r0, sp
    1366:	bl	2c92 <ExFatFile::open(ExFatVolume*, char const*, int)>
    136a:	cbnz	r0, 1370 <SDClass::remove(char const*)+0x40>
    136c:	movs	r0, #0
    136e:	b.n	1350 <SDClass::remove(char const*)+0x20>
    1370:	mov	r0, sp
    1372:	bl	31c8 <ExFatFile::remove()>
    1376:	cmp	r0, #0
    1378:	beq.n	136c <SDClass::remove(char const*)+0x3c>
    137a:	b.n	1350 <SDClass::remove(char const*)+0x20>

0000137c <SDClass::mkdir(char const*)>:
	bool mkdir(const char *filepath) {
    137c:	mov	r2, r1
    return m_fVol   ? m_fVol->mkdir(path, pFlag)
    137e:	ldr.w	r1, [r0, #1156]	; 0x484
    1382:	push	{lr}
    1384:	sub	sp, #60	; 0x3c
    1386:	cbz	r1, 139e <SDClass::mkdir(char const*)+0x22>
    1388:	movs	r3, #0
    return sub.mkdir(vwd(), path, pFlag);
    138a:	addw	r1, r1, #1092	; 0x444
    138e:	mov	r0, sp
    1390:	str	r3, [sp, #0]
    1392:	movs	r3, #1
    1394:	bl	485c <FatFile::mkdir(FatFile*, char const*, bool)>
	}
    1398:	add	sp, #60	; 0x3c
    139a:	ldr.w	pc, [sp], #4
    139e:	ldr.w	r0, [r0, #1160]	; 0x488
           : m_xVol ? m_xVol->mkdir(path, pFlag)
    13a2:	cmp	r0, #0
    13a4:	beq.n	1398 <SDClass::mkdir(char const*)+0x1c>
    13a6:	str	r1, [sp, #48]	; 0x30
    return sub.mkdir(vwd(), path, pFlag);
    13a8:	movs	r3, #1
    13aa:	add.w	r1, r0, #1096	; 0x448
    13ae:	mov	r0, sp
    13b0:	bl	34c2 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
    13b4:	b.n	1398 <SDClass::mkdir(char const*)+0x1c>

000013b6 <SDClass::exists(char const*)>:
	bool exists(const char *filepath) {
    13b6:	mov	r2, r1
    return m_fVol   ? m_fVol->exists(path)
    13b8:	ldr.w	r1, [r0, #1156]	; 0x484
    13bc:	push	{lr}
    13be:	sub	sp, #60	; 0x3c
    13c0:	cbz	r1, 13d2 <SDClass::exists(char const*)+0x1c>
    13c2:	movs	r3, #0
    return tmp.open(this, path, O_RDONLY);
    13c4:	mov	r0, sp
    13c6:	str	r3, [sp, #0]
    13c8:	bl	46de <FatFile::open(FatVolume*, char const*, int)>
	}
    13cc:	add	sp, #60	; 0x3c
    13ce:	ldr.w	pc, [sp], #4
    13d2:	ldr.w	r0, [r0, #1160]	; 0x488
           : m_xVol ? m_xVol->exists(path)
    13d6:	cmp	r0, #0
    13d8:	beq.n	13cc <SDClass::exists(char const*)+0x16>
    return tmp.open(this, path, O_RDONLY);
    13da:	mov	r3, r1
    13dc:	str	r1, [sp, #48]	; 0x30
    13de:	mov	r1, r0
    13e0:	mov	r0, sp
    13e2:	bl	2c92 <ExFatFile::open(ExFatVolume*, char const*, int)>
    13e6:	b.n	13cc <SDClass::exists(char const*)+0x16>

000013e8 <SDFile::size()>:
    return m_fFile ? m_fFile->fileSize() : m_xFile ? m_xFile->fileSize() : 0;
    13e8:	ldr	r3, [r0, #80]	; 0x50
    13ea:	cbz	r3, 13f2 <SDFile::size()+0xa>
    13ec:	ldr	r0, [r3, #28]
    13ee:	movs	r1, #0
    13f0:	bx	lr
    13f2:	ldr	r3, [r0, #84]	; 0x54
    13f4:	cbz	r3, 13fc <SDFile::size()+0x14>
  uint64_t fileSize() const { return m_validLength; }
    13f6:	ldrd	r0, r1, [r3, #16]
    13fa:	bx	lr
    13fc:	mov	r0, r3
    13fe:	b.n	13ee <SDFile::size()+0x6>

00001400 <FsVolume::bytesPerCluster() const>:
    return m_fVol   ? m_fVol->bytesPerCluster()
    1400:	ldr.w	r3, [r0, #1152]	; 0x480
    1404:	cbz	r3, 1412 <FsVolume::bytesPerCluster() const+0x12>
  uint8_t bytesPerClusterShift() const {
    return m_sectorsPerClusterShift + m_bytesPerSectorShift;
  }
  /** \return Number of bytes in a cluster. */
  uint16_t bytesPerCluster() const {
    return m_bytesPerSector << m_sectorsPerClusterShift;
    1406:	ldrb	r3, [r3, #6]
    1408:	mov.w	r0, #512	; 0x200
    140c:	lsls	r0, r3
    140e:	uxth	r0, r0
    1410:	bx	lr
    1412:	ldr.w	r0, [r0, #1156]	; 0x484
           : m_xVol ? m_xVol->bytesPerCluster()
    1416:	cbz	r0, 141c <FsVolume::bytesPerCluster() const+0x1c>
 */
class ExFatPartition {
 public:
  ExFatPartition() = default;
  /** \return the number of bytes in a cluster. */
  uint32_t bytesPerCluster() const { return m_bytesPerCluster; }
    1418:	ldr.w	r0, [r0, #1084]	; 0x43c
  }
    141c:	bx	lr

0000141e <SDClass::totalSize()>:
	uint64_t usedSize() {
		if (!cardPreviouslyPresent) return (uint64_t)0;
		return (uint64_t)(sdfs.clusterCount() - sdfs.freeClusterCount())
		  * (uint64_t)sdfs.bytesPerCluster();
	}
	uint64_t totalSize() {
    141e:	mov	r3, r0
		if (!cardPreviouslyPresent) return (uint64_t)0;
    1420:	ldrb.w	r0, [r0, #1228]	; 0x4cc
	uint64_t totalSize() {
    1424:	push	{r4, lr}
		if (!cardPreviouslyPresent) return (uint64_t)0;
    1426:	cbz	r0, 144c <SDClass::totalSize()+0x2e>
    return m_fVol   ? m_fVol->clusterCount()
    1428:	ldr.w	r2, [r3, #1156]	; 0x484
		return (uint64_t)sdfs.clusterCount() * (uint64_t)sdfs.bytesPerCluster();
    142c:	adds	r0, r3, #4
    142e:	cbz	r2, 143e <SDClass::totalSize()+0x20>
  /** Clear the cache and returns a pointer to the cache.  Not for normal apps.
   * \return A pointer to the cache buffer or zero if an error occurs.
   */
  uint8_t* cacheClear() { return m_cache.clear(); }
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const { return m_lastCluster - 1; }
    1430:	ldr	r4, [r2, #28]
    1432:	subs	r4, #1
    1434:	bl	1400 <FsVolume::bytesPerCluster() const>
    1438:	umull	r0, r1, r4, r0
	}
    143c:	pop	{r4, pc}
    143e:	ldr.w	r4, [r3, #1160]	; 0x488
           : m_xVol ? m_xVol->clusterCount()
    1442:	cmp	r4, #0
    1444:	beq.n	1434 <SDClass::totalSize()+0x16>
  /** Clear the cache and returns a pointer to the cache.  Not for normal apps.
   * \return A pointer to the cache buffer or zero if an error occurs.
   */
  uint8_t* cacheClear() { return m_dataCache.clear(); }
  /** \return the cluster count for the partition. */
  uint32_t clusterCount() const { return m_clusterCount; }
    1446:	ldr.w	r4, [r4, #1072]	; 0x430
    144a:	b.n	1434 <SDClass::totalSize()+0x16>
		if (!cardPreviouslyPresent) return (uint64_t)0;
    144c:	mov	r1, r0
    144e:	b.n	143c <SDClass::totalSize()+0x1e>

00001450 <FsBaseFile::available() const>:
    return m_fFile ? m_fFile->available() : m_xFile ? m_xFile->available() : 0;
    1450:	ldr	r3, [r0, #56]	; 0x38
  int available() const {
    1452:	push	{r4, lr}
    return m_fFile ? m_fFile->available() : m_xFile ? m_xFile->available() : 0;
    1454:	cbz	r3, 146e <FsBaseFile::available() const+0x1e>
    return isFile() ? fileSize() - curPosition() : 0;
    1456:	ldrb	r0, [r3, #0]
    1458:	ands.w	r0, r0, #8
    145c:	ittt	ne
    145e:	ldrne	r0, [r3, #28]
    1460:	ldrne	r3, [r3, #20]
    1462:	subne	r0, r0, r3
    return n > INT_MAX ? INT_MAX : n;
    1464:	cmp	r0, #0
    1466:	it	lt
    1468:	mvnlt.w	r0, #2147483648	; 0x80000000
  }
    146c:	pop	{r4, pc}
    146e:	ldr	r0, [r0, #60]	; 0x3c
    return m_fFile ? m_fFile->available() : m_xFile ? m_xFile->available() : 0;
    1470:	cmp	r0, #0
    1472:	beq.n	146c <FsBaseFile::available() const+0x1c>
  uint64_t available64() { return isFile() ? fileSize() - curPosition() : 0; }
    1474:	ldrb.w	r3, [r0, #49]	; 0x31
    1478:	ands.w	r3, r3, #8
    147c:	beq.n	149c <FsBaseFile::available() const+0x4c>
    147e:	ldrd	r1, r3, [r0, #16]
    1482:	ldrd	r2, r4, [r0]
    1486:	subs	r0, r1, r2
    1488:	sbc.w	r3, r3, r4
    return n > INT_MAX ? INT_MAX : n;
    148c:	cmp.w	r0, #2147483648	; 0x80000000
    1490:	sbcs.w	r3, r3, #0
    1494:	it	cs
    1496:	mvncs.w	r0, #2147483648	; 0x80000000
    149a:	b.n	146c <FsBaseFile::available() const+0x1c>
  uint64_t available64() { return isFile() ? fileSize() - curPosition() : 0; }
    149c:	mov	r0, r3
    149e:	b.n	148c <FsBaseFile::available() const+0x3c>

000014a0 <StreamFile<FsBaseFile, unsigned long long>::available()>:
  StreamFile() {}

  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() { return BaseFile::available(); }
    14a0:	push	{r3, lr}
    14a2:	adds	r0, #16
    14a4:	bl	1450 <FsBaseFile::available() const>
    14a8:	pop	{r3, pc}

000014aa <SDFile::available()>:
	virtual int available() {
    14aa:	push	{r3, lr}
    14ac:	adds	r0, #24
    14ae:	bl	1450 <FsBaseFile::available() const>
	}
    14b2:	pop	{r3, pc}

000014b4 <FsBaseFile::isDir() const>:
    return m_fFile ? m_fFile->isDir() : m_xFile ? m_xFile->isDir() : false;
    14b4:	ldr	r3, [r0, #56]	; 0x38
    14b6:	cbz	r3, 14c6 <FsBaseFile::isDir() const+0x12>
  bool isDir() const { return m_attributes & FILE_ATTR_DIR; }
    14b8:	ldrb	r3, [r3, #0]
    14ba:	tst.w	r3, #208	; 0xd0
    14be:	ite	ne
    14c0:	movne	r0, #1
    14c2:	moveq	r0, #0
  }
    14c4:	bx	lr
    14c6:	ldr	r0, [r0, #60]	; 0x3c
    return m_fFile ? m_fFile->isDir() : m_xFile ? m_xFile->isDir() : false;
    14c8:	cmp	r0, #0
    14ca:	beq.n	14c4 <FsBaseFile::isDir() const+0x10>
    14cc:	ldrb.w	r3, [r0, #49]	; 0x31
    14d0:	tst.w	r3, #80	; 0x50
    14d4:	b.n	14be <FsBaseFile::isDir() const+0xa>

000014d6 <SDFile::isDirectory()>:
	virtual boolean isDirectory(void) {
    14d6:	push	{r3, lr}
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() { BaseFile::sync(); }
  /** This function reports if the current file is a directory or not.
   * \return true if the file is a directory.
   */
  bool isDirectory() { return BaseFile::isDir(); }
    14d8:	adds	r0, #24
    14da:	bl	14b4 <FsBaseFile::isDir() const>
	}
    14de:	pop	{r3, pc}

000014e0 <SDFile::rewindDirectory()>:
	virtual void rewindDirectory(void) {
    14e0:	push	{r4, lr}
    14e2:	mov	r4, r0
   * If an error occurs or end of file is reached return -1.
   */
  int read() { return BaseFile::read(); }
  /** Rewind a file if it is a directory */
  void rewindDirectory() {
    if (BaseFile::isDir()) {
    14e4:	adds	r0, #24
    14e6:	bl	14b4 <FsBaseFile::isDir() const>
    14ea:	cbz	r0, 1506 <SDFile::rewindDirectory()+0x26>
    if (m_fFile) m_fFile->rewind();
    14ec:	ldr	r0, [r4, #80]	; 0x50
    14ee:	cbz	r0, 14f6 <SDFile::rewindDirectory()+0x16>
  void rewind() { seekSet(0); }
    14f0:	movs	r1, #0
    14f2:	bl	435a <FatFile::seekSet(unsigned long)>
    if (m_xFile) m_xFile->rewind();
    14f6:	ldr	r0, [r4, #84]	; 0x54
    14f8:	cbz	r0, 1506 <SDFile::rewindDirectory()+0x26>
  void rewind() { seekSet(0); }
    14fa:	movs	r2, #0
    14fc:	movs	r3, #0
	}
    14fe:	ldmia.w	sp!, {r4, lr}
    1502:	b.w	27a0 <ExFatFile::seekSet(unsigned long long)>
    1506:	pop	{r4, pc}

00001508 <FsBaseFile::isOpen() const>:
  bool isOpen() const { return m_fFile || m_xFile; }
    1508:	ldr	r3, [r0, #56]	; 0x38
    150a:	cbnz	r3, 1516 <FsBaseFile::isOpen() const+0xe>
    150c:	ldr	r0, [r0, #60]	; 0x3c
    150e:	subs	r0, #0
    1510:	it	ne
    1512:	movne	r0, #1
    1514:	bx	lr
    1516:	movs	r0, #1
    1518:	bx	lr

0000151a <SDFile::isOpen()>:
	virtual bool isOpen() {
    151a:	push	{r3, lr}
		return sdfatfile.isOpen();
    151c:	adds	r0, #24
    151e:	bl	1508 <FsBaseFile::isOpen() const>
	}
    1522:	pop	{r3, pc}

00001524 <SDFile::close()>:
	virtual void close() {
    1524:	push	{r4, lr}
    1526:	mov	r4, r0
		if (filename) {
    1528:	ldr	r0, [r0, #88]	; 0x58
    152a:	cbz	r0, 1534 <SDFile::close()+0x10>
			free(filename);
    152c:	bl	a190 <free>
			filename = nullptr;
    1530:	movs	r3, #0
    1532:	str	r3, [r4, #88]	; 0x58
		if (sdfatfile.isOpen()) {
    1534:	adds	r4, #24
    1536:	mov	r0, r4
    1538:	bl	1508 <FsBaseFile::isOpen() const>
    153c:	cbz	r0, 1548 <SDFile::close()+0x24>
			sdfatfile.close();
    153e:	mov	r0, r4
	}
    1540:	ldmia.w	sp!, {r4, lr}
			sdfatfile.close();
    1544:	b.w	57cc <FsBaseFile::close()>
	}
    1548:	pop	{r4, pc}
	...

0000154c <SDFile::~SDFile()>:
	virtual ~SDFile(void) {
    154c:	ldr	r3, [pc, #24]	; (1568 <SDFile::~SDFile()+0x1c>)
    154e:	push	{r4, lr}
    1550:	str	r3, [r0, #0]
    1552:	mov	r4, r0
		close();
    1554:	bl	1524 <SDFile::close()>
class StreamFile : public stream_t, public BaseFile {
    1558:	ldr	r3, [pc, #16]	; (156c <SDFile::~SDFile()+0x20>)
  ~FsBaseFile() { close(); }
    155a:	add.w	r0, r4, #24
    155e:	str	r3, [r4, #8]
    1560:	bl	57cc <FsBaseFile::close()>
	}
    1564:	mov	r0, r4
    1566:	pop	{r4, pc}
    1568:	.word	0x20000714
    156c:	.word	0x200005c8

00001570 <SDFile::~SDFile()>:
	virtual ~SDFile(void) {
    1570:	push	{r4, lr}
    1572:	mov	r4, r0
	}
    1574:	bl	154c <SDFile::~SDFile()>
    1578:	movs	r1, #92	; 0x5c
    157a:	mov	r0, r4
    157c:	bl	a022 <operator delete(void*, unsigned int)>
    1580:	mov	r0, r4
    1582:	pop	{r4, pc}

00001584 <FsBaseFile::peek()>:
    return m_fFile ? m_fFile->peek() : m_xFile ? m_xFile->peek() : -1;
    1584:	ldr	r3, [r0, #56]	; 0x38
    1586:	cbz	r3, 158e <FsBaseFile::peek()+0xa>
    1588:	mov	r0, r3
    158a:	b.w	42f6 <FatFile::peek()>
    158e:	ldr	r0, [r0, #60]	; 0x3c
    1590:	cbz	r0, 1596 <FsBaseFile::peek()+0x12>
    1592:	b.w	2776 <ExFatFile::peek()>
  }
    1596:	mov.w	r0, #4294967295
    159a:	bx	lr

0000159c <StreamFile<FsBaseFile, unsigned long long>::peek()>:
  int peek() { return BaseFile::peek(); }
    159c:	push	{r3, lr}
    159e:	adds	r0, #16
    15a0:	bl	1584 <FsBaseFile::peek()>
    15a4:	pop	{r3, pc}

000015a6 <SDFile::peek()>:
	virtual int peek() {
    15a6:	push	{r3, lr}
    15a8:	adds	r0, #24
    15aa:	bl	1584 <FsBaseFile::peek()>
	}
    15ae:	pop	{r3, pc}

000015b0 <FsBaseFile::read(void*, unsigned int)>:
    return m_fFile   ? m_fFile->read(buf, count)
    15b0:	ldr	r3, [r0, #56]	; 0x38
    15b2:	cbz	r3, 15ba <FsBaseFile::read(void*, unsigned int)+0xa>
    15b4:	mov	r0, r3
    15b6:	b.w	4170 <FatFile::read(void*, unsigned int)>
    15ba:	ldr	r0, [r0, #60]	; 0x3c
           : m_xFile ? m_xFile->read(buf, count)
    15bc:	cbz	r0, 15c2 <FsBaseFile::read(void*, unsigned int)+0x12>
    15be:	b.w	25f0 <ExFatFile::read(void*, unsigned int)>
  }
    15c2:	mov.w	r0, #4294967295
    15c6:	bx	lr

000015c8 <StreamFile<FsBaseFile, unsigned long long>::read()>:
  int read() { return BaseFile::read(); }
    15c8:	push	{r0, r1, r2, lr}
    return read(&b, 1) == 1 ? b : -1;
    15ca:	movs	r2, #1
    15cc:	add.w	r1, sp, #7
    15d0:	adds	r0, #16
    15d2:	bl	15b0 <FsBaseFile::read(void*, unsigned int)>
    15d6:	cmp	r0, #1
    15d8:	ite	eq
    15da:	ldrbeq.w	r0, [sp, #7]
    15de:	movne.w	r0, #4294967295
    15e2:	add	sp, #12
    15e4:	ldr.w	pc, [sp], #4

000015e8 <SDFile::read(void*, unsigned int)>:
	virtual size_t read(void *buf, size_t nbyte) {
    15e8:	push	{r3, lr}
		return sdfatfile.read(buf, nbyte);
    15ea:	adds	r0, #24
    15ec:	bl	15b0 <FsBaseFile::read(void*, unsigned int)>
	}
    15f0:	pop	{r3, pc}

000015f2 <FsBaseFile::seekSet(unsigned long long)>:
  bool seekSet(uint64_t pos) {
    15f2:	push	{r4, r5}
    return m_fFile   ? pos < (1ULL << 32) && m_fFile->seekSet(pos)
    15f4:	ldr	r5, [r0, #56]	; 0x38
  bool seekSet(uint64_t pos) {
    15f6:	mov	r1, r2
    return m_fFile   ? pos < (1ULL << 32) && m_fFile->seekSet(pos)
    15f8:	cbz	r5, 1604 <FsBaseFile::seekSet(unsigned long long)+0x12>
    15fa:	cbnz	r3, 160e <FsBaseFile::seekSet(unsigned long long)+0x1c>
    15fc:	mov	r0, r5
  }
    15fe:	pop	{r4, r5}
    return m_fFile   ? pos < (1ULL << 32) && m_fFile->seekSet(pos)
    1600:	b.w	435a <FatFile::seekSet(unsigned long)>
    1604:	ldr	r0, [r0, #60]	; 0x3c
           : m_xFile ? m_xFile->seekSet(pos)
    1606:	cbz	r0, 160e <FsBaseFile::seekSet(unsigned long long)+0x1c>
  }
    1608:	pop	{r4, r5}
           : m_xFile ? m_xFile->seekSet(pos)
    160a:	b.w	27a0 <ExFatFile::seekSet(unsigned long long)>
  }
    160e:	movs	r0, #0
    1610:	pop	{r4, r5}
    1612:	bx	lr

00001614 <SDFile::seek(unsigned long long, int)>:
	virtual bool seek(uint64_t pos, int mode = SeekSet) {
    1614:	push	{r3, r4, r5, lr}
    1616:	mov	r4, r0
    1618:	ldr	r0, [sp, #16]
    161a:	mov	r1, r2
    161c:	mov	r5, r3
		if (mode == SeekSet) return sdfatfile.seekSet(pos);
    161e:	cbnz	r0, 162a <SDFile::seek(unsigned long long, int)+0x16>
    1620:	add.w	r0, r4, #24
  bool seekEnd(int64_t offset = 0) { return seekSet(fileSize() + offset); }
    1624:	bl	15f2 <FsBaseFile::seekSet(unsigned long long)>
	}
    1628:	pop	{r3, r4, r5, pc}
		if (mode == SeekCur) return sdfatfile.seekCur(pos);
    162a:	cmp	r0, #1
    162c:	bne.n	164c <SDFile::seek(unsigned long long, int)+0x38>
    return m_fFile   ? m_fFile->curPosition()
    162e:	ldr	r3, [r4, #80]	; 0x50
    1630:	add.w	r0, r4, #24
    1634:	cbz	r3, 163c <SDFile::seek(unsigned long long, int)+0x28>
    1636:	ldr	r2, [r3, #20]
    return m_fFile ? m_fFile->fileSize() : m_xFile ? m_xFile->fileSize() : 0;
    1638:	movs	r3, #0
    163a:	b.n	1644 <SDFile::seek(unsigned long long, int)+0x30>
    163c:	ldr	r3, [r4, #84]	; 0x54
           : m_xFile ? m_xFile->curPosition()
    163e:	cbz	r3, 1666 <SDFile::seek(unsigned long long, int)+0x52>
  uint64_t curPosition() const { return m_curPosition; }
    1640:	ldrd	r2, r3, [r3]
  bool seekEnd(int64_t offset = 0) { return seekSet(fileSize() + offset); }
    1644:	adds	r2, r1, r2
    1646:	adc.w	r3, r3, r5
    164a:	b.n	1624 <SDFile::seek(unsigned long long, int)+0x10>
		if (mode == SeekEnd) return sdfatfile.seekEnd(pos);
    164c:	cmp	r0, #2
    164e:	bne.n	166a <SDFile::seek(unsigned long long, int)+0x56>
    return m_fFile ? m_fFile->fileSize() : m_xFile ? m_xFile->fileSize() : 0;
    1650:	ldr	r3, [r4, #80]	; 0x50
    1652:	add.w	r0, r4, #24
    1656:	cbz	r3, 165c <SDFile::seek(unsigned long long, int)+0x48>
    1658:	ldr	r2, [r3, #28]
    165a:	b.n	1638 <SDFile::seek(unsigned long long, int)+0x24>
    165c:	ldr	r3, [r4, #84]	; 0x54
    165e:	cbz	r3, 1666 <SDFile::seek(unsigned long long, int)+0x52>
  uint64_t fileSize() const { return m_validLength; }
    1660:	ldrd	r2, r3, [r3, #16]
    1664:	b.n	1644 <SDFile::seek(unsigned long long, int)+0x30>
    1666:	mov	r2, r3
    1668:	b.n	1644 <SDFile::seek(unsigned long long, int)+0x30>
		return false;
    166a:	movs	r0, #0
    166c:	b.n	1628 <SDFile::seek(unsigned long long, int)+0x14>

0000166e <FsBaseFile::sync()>:
    return m_fFile ? m_fFile->sync() : m_xFile ? m_xFile->sync() : false;
    166e:	ldr	r3, [r0, #56]	; 0x38
    1670:	cbz	r3, 1678 <FsBaseFile::sync()+0xa>
    1672:	mov	r0, r3
    1674:	b.w	45ac <FatFile::sync()>
    1678:	ldr	r0, [r0, #60]	; 0x3c
    167a:	cbz	r0, 1680 <FsBaseFile::sync()+0x12>
    167c:	b.w	3388 <ExFatFile::sync()>
  }
    1680:	bx	lr

00001682 <StreamFile<FsBaseFile, unsigned long long>::flush()>:
  void flush() { BaseFile::sync(); }
    1682:	push	{r3, lr}
    1684:	adds	r0, #16
    1686:	bl	166e <FsBaseFile::sync()>
    168a:	pop	{r3, pc}

0000168c <SDFile::flush()>:
	virtual void flush() {
    168c:	push	{r3, lr}
    168e:	adds	r0, #24
    1690:	bl	166e <FsBaseFile::sync()>
	}
    1694:	pop	{r3, pc}

00001696 <FsBaseFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>:
    return m_fFile   ? m_fFile->timestamp(flags, year, month, day, hour, minute,
    1696:	ldr.w	ip, [r0, #56]	; 0x38
  bool timestamp(uint8_t flags, uint16_t year, uint8_t month, uint8_t day,
    169a:	push	{r4, r5, r6, r7}
    169c:	ldrb.w	r4, [sp, #16]
    16a0:	ldrb.w	r5, [sp, #20]
    16a4:	ldrb.w	r6, [sp, #24]
    16a8:	ldrb.w	r7, [sp, #28]
    return m_fFile   ? m_fFile->timestamp(flags, year, month, day, hour, minute,
    16ac:	cmp.w	ip, #0
    16b0:	beq.n	16c2 <FsBaseFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x2c>
    16b2:	mov	r0, ip
    16b4:	strd	r6, r7, [sp, #24]
    16b8:	strd	r4, r5, [sp, #16]
  }
    16bc:	pop	{r4, r5, r6, r7}
    return m_fFile   ? m_fFile->timestamp(flags, year, month, day, hour, minute,
    16be:	b.w	4a8c <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
    16c2:	ldr	r0, [r0, #60]	; 0x3c
           : m_xFile ? m_xFile->timestamp(flags, year, month, day, hour, minute,
    16c4:	cbz	r0, 16d4 <FsBaseFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x3e>
    16c6:	strd	r6, r7, [sp, #24]
    16ca:	strd	r4, r5, [sp, #16]
  }
    16ce:	pop	{r4, r5, r6, r7}
           : m_xFile ? m_xFile->timestamp(flags, year, month, day, hour, minute,
    16d0:	b.w	3610 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
  }
    16d4:	pop	{r4, r5, r6, r7}
    16d6:	bx	lr

000016d8 <SDFile::setModifyTime(DateTimeFields const&)>:
	virtual bool setModifyTime(const DateTimeFields &tm) {
    16d8:	push	{r0, r1, r2, r3, r4, lr}
		if (tm.year < 80 || tm.year > 207) return false;
    16da:	ldrb	r2, [r1, #6]
    16dc:	sub.w	r3, r2, #80	; 0x50
    16e0:	lsls	r3, r3, #24
    16e2:	bmi.n	170a <SDFile::setModifyTime(DateTimeFields const&)+0x32>
		return sdfatfile.timestamp(T_WRITE, tm.year + 1900, tm.mon + 1,
    16e4:	ldrb	r4, [r1, #0]
    16e6:	addw	r2, r2, #1900	; 0x76c
    16ea:	ldrb	r3, [r1, #5]
    16ec:	adds	r0, #24
    16ee:	str	r4, [sp, #12]
    16f0:	ldrb	r4, [r1, #1]
    16f2:	adds	r3, #1
    16f4:	str	r4, [sp, #8]
    16f6:	uxtb	r3, r3
    16f8:	ldrb	r4, [r1, #2]
    16fa:	str	r4, [sp, #4]
    16fc:	ldrb	r1, [r1, #4]
    16fe:	str	r1, [sp, #0]
    1700:	movs	r1, #4
    1702:	bl	1696 <FsBaseFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
	}
    1706:	add	sp, #16
    1708:	pop	{r4, pc}
		if (tm.year < 80 || tm.year > 207) return false;
    170a:	movs	r0, #0
    170c:	b.n	1706 <SDFile::setModifyTime(DateTimeFields const&)+0x2e>

0000170e <SDFile::setCreateTime(DateTimeFields const&)>:
	virtual bool setCreateTime(const DateTimeFields &tm) {
    170e:	push	{r0, r1, r2, r3, r4, lr}
		if (tm.year < 80 || tm.year > 207) return false;
    1710:	ldrb	r2, [r1, #6]
    1712:	sub.w	r3, r2, #80	; 0x50
    1716:	lsls	r3, r3, #24
    1718:	bmi.n	1740 <SDFile::setCreateTime(DateTimeFields const&)+0x32>
		return sdfatfile.timestamp(T_CREATE, tm.year + 1900, tm.mon + 1,
    171a:	ldrb	r4, [r1, #0]
    171c:	addw	r2, r2, #1900	; 0x76c
    1720:	ldrb	r3, [r1, #5]
    1722:	adds	r0, #24
    1724:	str	r4, [sp, #12]
    1726:	ldrb	r4, [r1, #1]
    1728:	adds	r3, #1
    172a:	str	r4, [sp, #8]
    172c:	uxtb	r3, r3
    172e:	ldrb	r4, [r1, #2]
    1730:	str	r4, [sp, #4]
    1732:	ldrb	r1, [r1, #4]
    1734:	str	r1, [sp, #0]
    1736:	movs	r1, #2
    1738:	bl	1696 <FsBaseFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
	}
    173c:	add	sp, #16
    173e:	pop	{r4, pc}
		if (tm.year < 80 || tm.year > 207) return false;
    1740:	movs	r0, #0
    1742:	b.n	173c <SDFile::setCreateTime(DateTimeFields const&)+0x2e>

00001744 <FsBaseFile::write(void const*, unsigned int)>:
   *
   * \return For success write() returns the number of bytes written, always
   * \a nbyte.  If an error occurs, write() returns zero and writeError is set.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile   ? m_fFile->write(buf, count)
    1744:	ldr	r3, [r0, #56]	; 0x38
    1746:	cbz	r3, 174e <FsBaseFile::write(void const*, unsigned int)+0xa>
    1748:	mov	r0, r3
    174a:	b.w	4ba0 <FatFile::write(void const*, unsigned int)>
    174e:	ldr	r0, [r0, #60]	; 0x3c
           : m_xFile ? m_xFile->write(buf, count)
    1750:	cbz	r0, 1756 <FsBaseFile::write(void const*, unsigned int)+0x12>
    1752:	b.w	37ec <ExFatFile::write(void const*, unsigned int)>
                     : 0;
  }
    1756:	bx	lr

00001758 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)>:
   * \param[in] size Number of bytes to write.
   *
   * \return For success write() returns the number of bytes written, always
   * \a size.
   */
  size_t write(const uint8_t* buffer, size_t size) {
    1758:	push	{r3, lr}
    return BaseFile::write(buffer, size);
    175a:	adds	r0, #16
    175c:	bl	1744 <FsBaseFile::write(void const*, unsigned int)>
  }
    1760:	pop	{r3, pc}

00001762 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)>:
  size_t write(uint8_t b) { return BaseFile::write(b); }
    1762:	push	{r0, r1, r2, lr}
  size_t write(uint8_t b) { return write(&b, 1); }
    1764:	movs	r2, #1
    1766:	strb.w	r1, [sp, #7]
    176a:	add.w	r1, sp, #7
    176e:	adds	r0, #16
    1770:	bl	1744 <FsBaseFile::write(void const*, unsigned int)>
    1774:	add	sp, #12
    1776:	ldr.w	pc, [sp], #4

0000177a <SDFile::write(void const*, unsigned int)>:
	virtual size_t write(const void *buf, size_t size) {
    177a:	push	{r3, lr}
		return sdfatfile.write(buf, size);
    177c:	adds	r0, #24
    177e:	bl	1744 <FsBaseFile::write(void const*, unsigned int)>
	}
    1782:	pop	{r3, pc}

00001784 <SDFile::SDFile(FsFile const&)>:
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
    1784:	push	{r3, r4, r5, lr}
class FileImpl {
    1786:	movs	r5, #0
    1788:	ldr	r3, [pc, #56]	; (17c4 <SDFile::SDFile(FsFile const&)+0x40>)
    178a:	mov	r4, r0
class StreamFile : public stream_t, public BaseFile {
    178c:	adds	r1, #16
    178e:	str	r5, [r0, #4]
    1790:	adds	r0, #24
    1792:	str.w	r3, [r0, #-24]
class Print
    1796:	ldrb.w	r3, [r1, #-12]
    179a:	strb.w	r3, [r0, #-12]
class Stream : public Print
    179e:	ldr	r3, [pc, #40]	; (17c8 <SDFile::SDFile(FsFile const&)+0x44>)
    17a0:	str.w	r3, [r0, #-16]
    17a4:	ldr.w	r3, [r1, #-8]
    17a8:	str.w	r3, [r0, #-8]
    17ac:	ldrb.w	r3, [r1, #-4]
    17b0:	strb.w	r3, [r0, #-4]
    17b4:	bl	5770 <FsBaseFile::FsBaseFile(FsBaseFile const&)>
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    17b8:	ldr	r3, [pc, #16]	; (17cc <SDFile::SDFile(FsFile const&)+0x48>)
    17ba:	mov	r0, r4
    17bc:	str	r5, [r4, #88]	; 0x58
    17be:	str	r3, [r4, #8]
    17c0:	pop	{r3, r4, r5, pc}
    17c2:	nop
    17c4:	.word	0x20000714
    17c8:	.word	0x20000770
    17cc:	.word	0x200006e4

000017d0 <SDClass::open(char const*, unsigned char)>:
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
    17d0:	cmp	r3, #1
	File open(const char *filepath, uint8_t mode = FILE_READ) {
    17d2:	push	{r4, r5, r6, lr}
    17d4:	mov	r4, r0
    17d6:	sub	sp, #80	; 0x50
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
    17d8:	beq.n	182a <SDClass::open(char const*, unsigned char)+0x5a>
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
    17da:	cmp	r3, #2
    17dc:	movw	r3, #514	; 0x202
    17e0:	it	ne
    17e2:	movne	r3, #0
		SDFAT_FILE file = sdfs.open(filepath, flags);
    17e4:	adds	r1, #4
    17e6:	mov	r0, sp
    17e8:	bl	59b8 <FsVolume::open(char const*, int)>
  operator bool() const { return isOpen(); }
    17ec:	add	r0, sp, #16
    17ee:	ldr	r6, [pc, #80]	; (1840 <SDClass::open(char const*, unsigned char)+0x70>)
    17f0:	bl	1508 <FsBaseFile::isOpen() const>
		if (file) return File(new SDFile(file));
    17f4:	cbz	r0, 1830 <SDClass::open(char const*, unsigned char)+0x60>
    17f6:	movs	r0, #92	; 0x5c
    17f8:	bl	a01e <operator new(unsigned int)>
    17fc:	mov	r1, sp
    17fe:	mov	r5, r0
    1800:	bl	1784 <SDFile::SDFile(FsFile const&)>
	constexpr Print() : write_error(0) {}
    1804:	movs	r3, #0
	constexpr Stream() : _timeout(1000), read_error(0) {}
    1806:	mov.w	r2, #1000	; 0x3e8
	File(FileImpl *file) {
    180a:	str	r6, [r4, #0]
    180c:	strb	r3, [r4, #4]
    180e:	strb	r3, [r4, #12]
		if (f) f->refcount++;
    1810:	ldr	r3, [r5, #4]
    1812:	str	r2, [r4, #8]
    1814:	adds	r3, #1
		f = file;
    1816:	str	r5, [r4, #16]
		if (f) f->refcount++;
    1818:	str	r3, [r5, #4]
    181a:	ldr	r3, [pc, #40]	; (1844 <SDClass::open(char const*, unsigned char)+0x74>)
  ~FsBaseFile() { close(); }
    181c:	add	r0, sp, #16
    181e:	str	r3, [sp, #0]
    1820:	bl	57cc <FsBaseFile::close()>
	}
    1824:	mov	r0, r4
    1826:	add	sp, #80	; 0x50
    1828:	pop	{r4, r5, r6, pc}
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
    182a:	movw	r3, #16898	; 0x4202
    182e:	b.n	17e4 <SDClass::open(char const*, unsigned char)+0x14>
    1830:	mov.w	r3, #1000	; 0x3e8
    1834:	strb	r0, [r4, #4]
    1836:	strb	r0, [r4, #12]
    1838:	str	r3, [r4, #8]
	constexpr File() : f(nullptr) { }
    183a:	str	r6, [r4, #0]
    183c:	str	r0, [r4, #16]
    183e:	b.n	181a <SDClass::open(char const*, unsigned char)+0x4a>
    1840:	.word	0x200006b8
    1844:	.word	0x200005c8

00001848 <SDFile::openNextFile(unsigned char)>:
	virtual File openNextFile(uint8_t mode=0) {
    1848:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    184c:	movs	r5, #0
    184e:	sub	sp, #80	; 0x50
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    1850:	ldr	r3, [pc, #108]	; (18c0 <SDFile::openNextFile(unsigned char)+0x78>)
    1852:	mov.w	r7, #1000	; 0x3e8
   * \param[in] oflag open flags.
   * \return a FatStream object.
   */
  FsFile openNextFile(oflag_t oflag = O_RDONLY) {
    FsFile tmpFile;
    tmpFile.openNext(this, oflag);
    1856:	mov	r2, r5
    1858:	adds	r1, #24
    185a:	mov	r4, r0
    185c:	add	r0, sp, #16
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    185e:	str	r3, [sp, #0]
    1860:	strb.w	r5, [sp, #4]
    1864:	str	r7, [sp, #8]
    1866:	strb.w	r5, [sp, #12]
  FsBaseFile() = default;
    186a:	ldr.w	r8, [pc, #92]	; 18c8 <SDFile::openNextFile(unsigned char)+0x80>
    186e:	strd	r5, r5, [sp, #72]	; 0x48
    tmpFile.openNext(this, oflag);
    1872:	bl	5864 <FsBaseFile::openNext(FsBaseFile*, int)>
  operator bool() const { return isOpen(); }
    1876:	add	r0, sp, #16
    1878:	bl	1508 <FsBaseFile::isOpen() const>
		if (file) return File(new SDFile(file));
    187c:	cbz	r0, 18b0 <SDFile::openNextFile(unsigned char)+0x68>
    187e:	movs	r0, #92	; 0x5c
    1880:	bl	a01e <operator new(unsigned int)>
    1884:	mov	r6, r0
    1886:	mov	r1, sp
    1888:	bl	1784 <SDFile::SDFile(FsFile const&)>
		if (f) f->refcount++;
    188c:	ldr	r3, [r6, #4]
    188e:	strb	r5, [r4, #4]
    1890:	adds	r3, #1
    1892:	str	r7, [r4, #8]
    1894:	strb	r5, [r4, #12]
	File(FileImpl *file) {
    1896:	str.w	r8, [r4]
		f = file;
    189a:	str	r6, [r4, #16]
		if (f) f->refcount++;
    189c:	str	r3, [r6, #4]
    189e:	ldr	r3, [pc, #36]	; (18c4 <SDFile::openNextFile(unsigned char)+0x7c>)
  ~FsBaseFile() { close(); }
    18a0:	add	r0, sp, #16
    18a2:	str	r3, [sp, #0]
    18a4:	bl	57cc <FsBaseFile::close()>
	}
    18a8:	mov	r0, r4
    18aa:	add	sp, #80	; 0x50
    18ac:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    18b0:	strb	r0, [r4, #4]
    18b2:	str	r7, [r4, #8]
    18b4:	strb	r0, [r4, #12]
	constexpr File() : f(nullptr) { }
    18b6:	str.w	r8, [r4]
    18ba:	str	r0, [r4, #16]
    18bc:	b.n	189e <SDFile::openNextFile(unsigned char)+0x56>
    18be:	nop
    18c0:	.word	0x200006e4
    18c4:	.word	0x200005c8
    18c8:	.word	0x200006b8

000018cc <SdBase<FsVolume, FsFormatter>::freeClusterCount()>:
    }
    return rtn;
  }
  //----------------------------------------------------------------------------
  /** \return the free cluster count. */
  uint32_t freeClusterCount() {
    18cc:	push	{r4, r5, r6, lr}
    18ce:	mov	r5, r0
    18d0:	ldr.w	r0, [r0, #1160]	; 0x488
    }
    return rtn;
  }
  //----------------------------------------------------------------------------
  /** \return true if can be in dedicated SPI state */
  bool hasDedicatedSpi() { return m_card ? m_card->hasDedicatedSpi() : false; }
    18d4:	cbnz	r0, 18fa <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x2e>
    bool switchSpi = hasDedicatedSpi() && !isDedicatedSpi();
    18d6:	movs	r6, #0
    return m_fVol   ? m_fVol->freeClusterCount()
    18d8:	ldr.w	r0, [r5, #1152]	; 0x480
    18dc:	cbz	r0, 1930 <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x64>
    18de:	bl	4ebe <FatPartition::freeClusterCount()>
    uint32_t rtn = Vol::freeClusterCount();
    18e2:	mov	r4, r0
    if (switchSpi && !setDedicatedSpi(false)) {
    18e4:	cbz	r6, 18f6 <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x2a>
    18e6:	ldr.w	r0, [r5, #1160]	; 0x488
  /** Set SPI sharing state
   * \param[in] value desired state.
   * \return true for success else false;
   */
  bool setDedicatedSpi(bool value) {
    if (m_card) {
    18ea:	cbz	r0, 1910 <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x44>
      return m_card->setDedicatedSpi(value);
    18ec:	ldr	r3, [r0, #0]
    18ee:	movs	r1, #0
    18f0:	ldr	r3, [r3, #64]	; 0x40
    18f2:	blx	r3
    if (switchSpi && !setDedicatedSpi(false)) {
    18f4:	cbz	r0, 1910 <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x44>
  }
    18f6:	mov	r0, r4
    18f8:	pop	{r4, r5, r6, pc}
  bool hasDedicatedSpi() { return m_card ? m_card->hasDedicatedSpi() : false; }
    18fa:	ldr	r3, [r0, #0]
    18fc:	ldr	r3, [r3, #56]	; 0x38
    18fe:	blx	r3
    1900:	cmp	r0, #0
    1902:	beq.n	18d6 <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0xa>
    1904:	ldr.w	r0, [r5, #1160]	; 0x488
  bool isDedicatedSpi() { return m_card ? m_card->isDedicatedSpi() : false; }
    1908:	cbnz	r0, 1914 <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x48>
    190a:	ldr.w	r0, [r5, #1160]	; 0x488
    if (m_card) {
    190e:	cbnz	r0, 1920 <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x54>
      return 0;
    1910:	movs	r4, #0
    1912:	b.n	18f6 <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x2a>
  bool isDedicatedSpi() { return m_card ? m_card->isDedicatedSpi() : false; }
    1914:	ldr	r3, [r0, #0]
    1916:	ldr	r3, [r3, #60]	; 0x3c
    1918:	blx	r3
    191a:	cmp	r0, #0
    191c:	bne.n	18d6 <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0xa>
    191e:	b.n	190a <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x3e>
      return m_card->setDedicatedSpi(value);
    1920:	ldr	r3, [r0, #0]
    1922:	movs	r1, #1
    1924:	ldr	r3, [r3, #64]	; 0x40
    1926:	blx	r3
    if (switchSpi && !setDedicatedSpi(true)) {
    1928:	mov	r6, r0
    192a:	cmp	r0, #0
    192c:	bne.n	18d8 <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0xc>
    192e:	b.n	1910 <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x44>
    1930:	ldr.w	r0, [r5, #1156]	; 0x484
           : m_xVol ? m_xVol->freeClusterCount()
    1934:	cbz	r0, 193c <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x70>
    1936:	bl	2f82 <ExFatPartition::freeClusterCount()>
    193a:	b.n	18e2 <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x16>
    193c:	mov.w	r0, #4294967295
    1940:	b.n	18e2 <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x16>

00001942 <SDClass::usedSize()>:
	uint64_t usedSize() {
    1942:	push	{r3, r4, r5, lr}
		if (!cardPreviouslyPresent) return (uint64_t)0;
    1944:	ldrb.w	r4, [r0, #1228]	; 0x4cc
    1948:	cbz	r4, 1978 <SDClass::usedSize()+0x36>
    return m_fVol   ? m_fVol->clusterCount()
    194a:	ldr.w	r3, [r0, #1156]	; 0x484
		return (uint64_t)(sdfs.clusterCount() - sdfs.freeClusterCount())
    194e:	adds	r5, r0, #4
    1950:	cbz	r3, 196a <SDClass::usedSize()+0x28>
    1952:	ldr	r4, [r3, #28]
    1954:	subs	r4, #1
    1956:	mov	r0, r5
    1958:	bl	18cc <SdBase<FsVolume, FsFormatter>::freeClusterCount()>
    195c:	subs	r4, r4, r0
		  * (uint64_t)sdfs.bytesPerCluster();
    195e:	mov	r0, r5
    1960:	bl	1400 <FsVolume::bytesPerCluster() const>
    1964:	umull	r0, r1, r4, r0
	}
    1968:	pop	{r3, r4, r5, pc}
    196a:	ldr.w	r4, [r0, #1160]	; 0x488
           : m_xVol ? m_xVol->clusterCount()
    196e:	cmp	r4, #0
    1970:	beq.n	1956 <SDClass::usedSize()+0x14>
    1972:	ldr.w	r4, [r4, #1072]	; 0x430
    1976:	b.n	1956 <SDClass::usedSize()+0x14>
		if (!cardPreviouslyPresent) return (uint64_t)0;
    1978:	mov	r0, r4
    197a:	mov	r1, r4
    197c:	b.n	1968 <SDClass::usedSize()+0x26>

0000197e <SdBase<FsVolume, FsFormatter>::begin(SdioConfig)>:
  bool begin(SdioConfig sdioConfig) {
    197e:	push	{r3, r4, r5, lr}
   * \param[in] config SDIO configuration.
   * \return generic card pointer or nullptr if SDIO is not supported.
   */
  SdCard* newCard(SdioConfig config) {
#if HAS_SDIO_CLASS
    m_sdioCard.begin(config);
    1980:	addw	r5, r0, #1164	; 0x48c
    spiConfigBackupPin = 255; // Teensy
    1984:	movs	r3, #255	; 0xff
  bool begin(SdioConfig sdioConfig) {
    1986:	mov	r4, r0
    sdioConfigBackup = sdioConfig;
    1988:	strb.w	r1, [r0, #1220]	; 0x4c4
    spiConfigBackupPin = 255; // Teensy
    198c:	strb.w	r3, [r0, #1208]	; 0x4b8
    1990:	mov	r0, r5
    1992:	bl	6ca4 <SdioCard::begin(SdioConfig)>
    return m_card && !m_card->errorCode();
    1996:	mov	r0, r5
    m_card = m_cardFactory.newCard(sdioConfig);
    1998:	str.w	r5, [r4, #1160]	; 0x488
    return m_card && !m_card->errorCode();
    199c:	bl	6410 <SdioCard::errorCode() const>
    19a0:	cbnz	r0, 19ac <SdBase<FsVolume, FsFormatter>::begin(SdioConfig)+0x2e>
    19a2:	mov	r0, r4
  }
    19a4:	ldmia.w	sp!, {r3, r4, r5, lr}
    19a8:	b.w	110c <SdBase<FsVolume, FsFormatter>::begin(SdioConfig) [clone .part.0]>
    19ac:	movs	r0, #0
    19ae:	pop	{r3, r4, r5, pc}

000019b0 <SdBase<FsVolume, FsFormatter>::begin(SdSpiConfig)>:
  bool begin(SdSpiConfig spiConfig) {
    19b0:	push	{r4, r5, r6, lr}
    19b2:	sub	sp, #40	; 0x28
    19b4:	mov	r4, r0
    19b6:	add	r0, sp, #4
    19b8:	add	r6, sp, #16
    19ba:	add	r5, sp, #28
    spiConfigBackupPort = spiConfig.spiPort;
    19bc:	str.w	r3, [r4, #1216]	; 0x4c0
  bool begin(SdSpiConfig spiConfig) {
    19c0:	stmia.w	r0, {r1, r2, r3}
    spiConfigBackupPin = spiConfig.csPin; 
    19c4:	ldrh.w	r2, [sp, #4]
    19c8:	strh.w	r2, [r4, #1208]	; 0x4b8
    spiConfigBackupClock = spiConfig.maxSck;
    19cc:	ldr	r2, [sp, #8]
    19ce:	str.w	r2, [r4, #1212]	; 0x4bc
    19d2:	ldmia	r0, {r0, r1, r2}
    19d4:	stmia.w	r6, {r0, r1, r3}
    m_spiCard.begin(config);
    19d8:	add.w	r6, r4, #1176	; 0x498
    19dc:	stmia.w	r5, {r0, r1, r3}
    19e0:	mov	r0, r6
    19e2:	ldmia.w	r5, {r1, r2, r3}
    19e6:	bl	6264 <DedicatedSpiCard::begin(SdSpiConfig)>
    return m_card && !m_card->errorCode();
    19ea:	ldrb.w	r3, [r4, #1194]	; 0x4aa
    m_card = m_cardFactory.newCard(spiConfig);
    19ee:	str.w	r6, [r4, #1160]	; 0x488
    return m_card && !m_card->errorCode();
    19f2:	cbnz	r3, 1a00 <SdBase<FsVolume, FsFormatter>::begin(SdSpiConfig)+0x50>
    19f4:	mov	r0, r4
  }
    19f6:	add	sp, #40	; 0x28
    19f8:	ldmia.w	sp!, {r4, r5, r6, lr}
    19fc:	b.w	110c <SdBase<FsVolume, FsFormatter>::begin(SdioConfig) [clone .part.0]>
    1a00:	movs	r0, #0
    1a02:	add	sp, #40	; 0x28
    1a04:	pop	{r4, r5, r6, pc}

00001a06 <SdBase<FsVolume, FsFormatter>::restart()>:
  bool restart() {
    1a06:	push	{r0, r1, r2, r3, r4, lr}
    if (spiConfigBackupPin == 255) {
    1a08:	ldrb.w	r2, [r0, #1208]	; 0x4b8
    1a0c:	cmp	r2, #255	; 0xff
    1a0e:	bne.n	1a1e <SdBase<FsVolume, FsFormatter>::restart()+0x18>
      return begin(sdioConfigBackup);
    1a10:	ldrb.w	r1, [r0, #1220]	; 0x4c4
    1a14:	bl	197e <SdBase<FsVolume, FsFormatter>::begin(SdioConfig)>
  } 
    1a18:	add	sp, #20
    1a1a:	ldr.w	pc, [sp], #4
      SdSpiConfig spiConfig(spiConfigBackupPin, spiConfigBackupOptions,
    1a1e:	ldr.w	r2, [r0, #1212]	; 0x4bc
    1a22:	ldr.w	r3, [r0, #1216]	; 0x4c0
    if (spiConfigBackupPin == 255) {
    1a26:	ldrh.w	r1, [r0, #1208]	; 0x4b8
   * \param[in] opt Options.
   * \param[in] maxSpeed Maximum SCK frequency.
   * \param[in] port The SPI port to use.
   */
  SdSpiConfig(SdCsPin_t cs, uint8_t opt, uint32_t maxSpeed, SpiPort_t* port)
      : csPin(cs), options(opt), maxSck(maxSpeed), spiPort(port) {}
    1a2a:	strd	r2, r3, [sp, #8]
      return begin(spiConfig);
    1a2e:	add	r3, sp, #16
    1a30:	strh.w	r1, [sp, #4]
    1a34:	ldmdb	r3, {r1, r2, r3}
    1a38:	bl	19b0 <SdBase<FsVolume, FsFormatter>::begin(SdSpiConfig)>
    1a3c:	b.n	1a18 <SdBase<FsVolume, FsFormatter>::restart()+0x12>

00001a3e <SDClass::format(int, char, Print&)>:
{
    1a3e:	push	{r4, r5, r6, r7, lr}
  SdCard* card() { return m_card; }
    1a40:	ldr.w	r5, [r0, #1164]	; 0x48c
    1a44:	sub	sp, #60	; 0x3c
    1a46:	mov	r7, r0
	if (!card) return false; // no SD card
    1a48:	cbnz	r5, 1a52 <SDClass::format(int, char, Print&)+0x14>
    1a4a:	movs	r4, #0
}
    1a4c:	mov	r0, r4
    1a4e:	add	sp, #60	; 0x3c
    1a50:	pop	{r4, r5, r6, r7, pc}
	uint32_t sectors = card->sectorCount();
    1a52:	ldr	r2, [r5, #0]
    1a54:	mov	r0, r5
    1a56:	str	r3, [sp, #4]
    1a58:	ldr	r2, [r2, #24]
    1a5a:	blx	r2
	if (sectors <= 12288) return false; // card too small
    1a5c:	cmp.w	r0, #12288	; 0x3000
	uint32_t sectors = card->sectorCount();
    1a60:	mov	r4, r0
	if (sectors <= 12288) return false; // card too small
    1a62:	bls.n	1a4a <SDClass::format(int, char, Print&)+0xc>
	uint8_t *buf = (uint8_t *)malloc(512);
    1a64:	mov.w	r0, #512	; 0x200
    1a68:	bl	a180 <malloc>
	if (!buf) return false; // unable to allocate memory
    1a6c:	mov	r6, r0
    1a6e:	cmp	r0, #0
    1a70:	beq.n	1a4a <SDClass::format(int, char, Print&)+0xc>
	if (sectors > 67108864) {
    1a72:	cmp.w	r4, #67108864	; 0x4000000
		ret = exFatFormatter.format(card, buf, &pr);
    1a76:	mov	r2, r0
    1a78:	mov	r1, r5
    1a7a:	add	r0, sp, #12
	if (sectors > 67108864) {
    1a7c:	ldr	r3, [sp, #4]
    1a7e:	bls.n	1aa0 <SDClass::format(int, char, Print&)+0x62>
		ret = exFatFormatter.format(card, buf, &pr);
    1a80:	bl	1f5c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)>
		ret = fatFormatter.format(card, buf, &pr);
    1a84:	mov	r4, r0
	free(buf);
    1a86:	mov	r0, r6
    1a88:	bl	a190 <free>
	if (ret) {
    1a8c:	cmp	r4, #0
    1a8e:	beq.n	1a4a <SDClass::format(int, char, Print&)+0xc>
		card->syncDevice();
    1a90:	ldr	r3, [r5, #0]
    1a92:	mov	r0, r5
    1a94:	ldr	r3, [r3, #28]
    1a96:	blx	r3
		sdfs.restart(); // TODO: is sdfs.volumeBegin() enough??
    1a98:	adds	r0, r7, #4
    1a9a:	bl	1a06 <SdBase<FsVolume, FsFormatter>::restart()>
    1a9e:	b.n	1a4c <SDClass::format(int, char, Print&)+0xe>
		ret = fatFormatter.format(card, buf, &pr);
    1aa0:	bl	3e1c <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)>
    1aa4:	b.n	1a84 <SDClass::format(int, char, Print&)+0x46>
	...

00001aa8 <SDClass::mediaPresent()>:
{
    1aa8:	push	{r4, r5, r6, r7, lr}
    1aaa:	ldr.w	r7, [r0, #1164]	; 0x48c
    1aae:	sub	sp, #20
    1ab0:	mov	r5, r0
	if (card) {
    1ab2:	cbnz	r7, 1ac0 <SDClass::mediaPresent()+0x18>
		ret = false;
    1ab4:	movs	r4, #0
}
    1ab6:	mov	r0, r4
	cardPreviouslyPresent = ret;
    1ab8:	strb.w	r4, [r5, #1228]	; 0x4cc
}
    1abc:	add	sp, #20
    1abe:	pop	{r4, r5, r6, r7, pc}
		if (cardPreviouslyPresent) {
    1ac0:	ldrb.w	r4, [r0, #1228]	; 0x4cc
			if (csPin_ == BUILTIN_SDCARD) {
    1ac4:	ldrb.w	r3, [r0, #1229]	; 0x4cd
		if (cardPreviouslyPresent) {
    1ac8:	cbz	r4, 1b12 <SDClass::mediaPresent()+0x6a>
			if (csPin_ == BUILTIN_SDCARD) {
    1aca:	cmp	r3, #254	; 0xfe
    1acc:	beq.n	1ae2 <SDClass::mediaPresent()+0x3a>
				if (cdPin_ < NUM_DIGITAL_PINS) ret = digitalRead(cdPin_);
    1ace:	ldrb.w	r0, [r5, #1230]	; 0x4ce
    1ad2:	cmp	r0, #54	; 0x36
    1ad4:	bhi.n	1b04 <SDClass::mediaPresent()+0x5c>
    1ad6:	bl	8c94 <digitalRead>
    1ada:	subs	r4, r0, #0
    1adc:	it	ne
    1ade:	movne	r4, #1
    1ae0:	b.n	1ab6 <SDClass::mediaPresent()+0xe>
				s = card->status();
    1ae2:	ldr	r3, [r7, #0]
    1ae4:	mov	r0, r7
    1ae6:	ldr	r3, [r3, #88]	; 0x58
    1ae8:	blx	r3
			if (s == 0xFFFFFFFF) {
    1aea:	adds	r2, r0, #1
    1aec:	beq.n	1ace <SDClass::mediaPresent()+0x26>
			} else if (s == 0) {
    1aee:	cmp	r0, #0
    1af0:	bne.n	1ab6 <SDClass::mediaPresent()+0xe>
				if (csPin_ == BUILTIN_SDCARD) 
    1af2:	ldrb.w	r3, [r5, #1229]	; 0x4cd
    1af6:	cmp	r3, #254	; 0xfe
    1af8:	bne.n	1ab4 <SDClass::mediaPresent()+0xc>
					pinMode(_SD_DAT3, INPUT_PULLDOWN);
    1afa:	movs	r1, #3
    1afc:	movs	r0, #46	; 0x2e
    1afe:	bl	8cb8 <pinMode>
    1b02:	b.n	1ab4 <SDClass::mediaPresent()+0xc>
					ret = card->readCID(&cid);
    1b04:	ldr	r3, [r7, #0]
    1b06:	mov	r1, sp
    1b08:	mov	r0, r7
    1b0a:	ldr	r3, [r3, #68]	; 0x44
    1b0c:	blx	r3
				ret = sdfs.restart();
    1b0e:	mov	r4, r0
    1b10:	b.n	1ab6 <SDClass::mediaPresent()+0xe>
			if (csPin_ == BUILTIN_SDCARD) ret = digitalReadFast(_SD_DAT3);
    1b12:	cmp	r3, #254	; 0xfe
    1b14:	bne.n	1b26 <SDClass::mediaPresent()+0x7e>
			return (CORE_PIN46_PINREG & CORE_PIN46_BITMASK) ? 1 : 0;
    1b16:	ldr	r3, [pc, #32]	; (1b38 <SDClass::mediaPresent()+0x90>)
    1b18:	ldr	r3, [r3, #8]
			if (ret)
    1b1a:	lsls	r3, r3, #14
    1b1c:	bpl.n	1ab4 <SDClass::mediaPresent()+0xc>
				ret = sdfs.restart();
    1b1e:	adds	r0, r5, #4
    1b20:	bl	1a06 <SdBase<FsVolume, FsFormatter>::restart()>
    1b24:	b.n	1b0e <SDClass::mediaPresent()+0x66>
				if (cdPin_ < NUM_DIGITAL_PINS) ret = digitalRead(cdPin_);
    1b26:	ldrb.w	r0, [r0, #1230]	; 0x4ce
    1b2a:	cmp	r0, #54	; 0x36
    1b2c:	bhi.n	1b1e <SDClass::mediaPresent()+0x76>
    1b2e:	bl	8c94 <digitalRead>
			if (ret)
    1b32:	cmp	r0, #0
    1b34:	bne.n	1b1e <SDClass::mediaPresent()+0x76>
    1b36:	b.n	1ab4 <SDClass::mediaPresent()+0xc>
    1b38:	.word	0x42008000

00001b3c <SDClass::begin(unsigned char)>:
bool SDClass::begin(uint8_t csPin) {
    1b3c:	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    1b3e:	mov	r6, r1
    1b40:	mov	r5, r0
	FsDateTime::setCallback(dateTime);
    1b42:	ldr	r0, [pc, #92]	; (1ba0 <SDClass::begin(unsigned char)+0x64>)
    1b44:	bl	1e10 <FsDateTime::setCallback(void (*)(unsigned short*, unsigned short*))>
	if (csPin == BUILTIN_SDCARD) {
    1b48:	cmp	r6, #254	; 0xfe
	csPin_ = csPin; // remember which one passed in. 
    1b4a:	strb.w	r6, [r5, #1229]	; 0x4cd
	if (csPin == BUILTIN_SDCARD) {
    1b4e:	bne.n	1b74 <SDClass::begin(unsigned char)+0x38>
		bool ret = sdfs.begin(SdioConfig(FIFO_SDIO));
    1b50:	mov.w	r1, #0
    1b54:	adds	r0, r5, #4
    1b56:	bl	197e <SdBase<FsVolume, FsFormatter>::begin(SdioConfig)>
    1b5a:	mov	r4, r0
		cardPreviouslyPresent = ret;
    1b5c:	strb.w	r0, [r5, #1228]	; 0x4cc
		cdPin_ = _SD_DAT3;
    1b60:	movs	r0, #46	; 0x2e
    1b62:	strb.w	r0, [r5, #1230]	; 0x4ce
		if (!ret) pinMode(_SD_DAT3, INPUT_PULLDOWN);
    1b66:	cbnz	r4, 1b6e <SDClass::begin(unsigned char)+0x32>
    1b68:	movs	r1, #3
    1b6a:	bl	8cb8 <pinMode>
}
    1b6e:	mov	r0, r4
    1b70:	add	sp, #16
    1b72:	pop	{r4, r5, r6, pc}
	if (csPin < NUM_DIGITAL_PINS) {
    1b74:	cmp	r6, #54	; 0x36
    1b76:	mov.w	r4, #0
    1b7a:	bhi.n	1b6e <SDClass::begin(unsigned char)+0x32>
   * \param[in] cs Chip select pin.
   * \param[in] opt Options.
   * \param[in] maxSpeed Maximum SCK frequency.
   */
  SdSpiConfig(SdCsPin_t cs, uint8_t opt, uint32_t maxSpeed)
      : csPin(cs), options(opt), maxSck(maxSpeed) {}
    1b7c:	ldr	r3, [pc, #36]	; (1ba4 <SDClass::begin(unsigned char)+0x68>)
		bool ret = sdfs.begin(SdSpiConfig(csPin, SHARED_SPI, SD_SCK_MHZ(25)));
    1b7e:	adds	r0, r5, #4
    1b80:	strb.w	r4, [sp, #5]
    1b84:	strb.w	r6, [sp, #4]
    1b88:	strd	r3, r4, [sp, #8]
    1b8c:	add	r3, sp, #16
    1b8e:	ldmdb	r3, {r1, r2, r3}
    1b92:	bl	19b0 <SdBase<FsVolume, FsFormatter>::begin(SdSpiConfig)>
    1b96:	mov	r4, r0
		cardPreviouslyPresent = ret;
    1b98:	strb.w	r0, [r5, #1228]	; 0x4cc
		return ret;
    1b9c:	b.n	1b6e <SDClass::begin(unsigned char)+0x32>
    1b9e:	nop
    1ba0:	.word	0x0000108d
    1ba4:	.word	0x017d7840

00001ba8 <_GLOBAL__sub_I_SD>:
	SDClass() { }
    1ba8:	ldr	r0, [pc, #100]	; (1c10 <_GLOBAL__sub_I_SD+0x68>)
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
    1baa:	ldr	r2, [pc, #104]	; (1c14 <_GLOBAL__sub_I_SD+0x6c>)
    1bac:	ldr	r3, [pc, #104]	; (1c18 <_GLOBAL__sub_I_SD+0x70>)
    1bae:	str.w	r2, [r0, #1168]	; 0x490
	SPISettings() : _clock(4000000) {
    1bb2:	ldr	r2, [pc, #104]	; (1c1c <_GLOBAL__sub_I_SD+0x74>)
    1bb4:	str	r3, [r0, #0]
  FsVolume() = default;
    1bb6:	movs	r3, #0
    1bb8:	str.w	r2, [r0, #1188]	; 0x4a4
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
    1bbc:	movs	r2, #7
    1bbe:	str.w	r3, [r0, #1156]	; 0x484
    1bc2:	str.w	r3, [r0, #1160]	; 0x488
class SdBase : public Vol {
    1bc6:	str.w	r3, [r0, #1164]	; 0x48c
  SdioConfig() {}
    1bca:	strh.w	r3, [r0, #1176]	; 0x498
 * \brief Optimized SPI class for access to SD and SDHC flash memory cards.
 */
class SdSpiArduinoDriver {
 public:
  /** Constructor. */
  SdSpiArduinoDriver() = default;
    1bce:	str.w	r3, [r0, #1184]	; 0x4a0
    1bd2:	str.w	r2, [r0, #1192]	; 0x4a8
  /** SD is in multi-sector read state. */
  static const uint8_t READ_STATE = 1;
  /** SD is in multi-sector write state. */
  static const uint8_t WRITE_STATE = 2;
  /** Construct an instance of SharedSpiCard. */
  SharedSpiCard() { initSharedSpiCard(); }
    1bd6:	mov.w	r2, #2752512	; 0x2a0000
    1bda:	strh.w	r3, [r0, #1200]	; 0x4b0
    m_csPin = 0;
    m_errorCode = SD_CARD_ERROR_INIT_NOT_CALLED;
    m_spiActive = false;
    m_state = IDLE_STATE;
    m_status = 0;
    m_type = 0;
    1bde:	strb.w	r3, [r0, #1202]	; 0x4b2
 * \brief Raw access to SD and SDHC flash memory cards via dedicate SPI port.
 */
class DedicatedSpiCard : public SharedSpiCard {
 public:
  /** Construct an instance of DedicatedSpiCard. */
  DedicatedSpiCard() = default;
    1be2:	str.w	r3, [r0, #1204]	; 0x4b4
    1be6:	strb.w	r3, [r0, #1208]	; 0x4b8
    1bea:	strb.w	r3, [r0, #1224]	; 0x4c8
    1bee:	mov.w	r3, #65280	; 0xff00
  SharedSpiCard() { initSharedSpiCard(); }
    1bf2:	str.w	r2, [r0, #1196]	; 0x4ac
    1bf6:	strh.w	r3, [r0, #1228]	; 0x4cc
    1bfa:	movs	r3, #255	; 0xff
  DedicatedSpiCard() = default;
    1bfc:	ldr	r2, [pc, #32]	; (1c20 <_GLOBAL__sub_I_SD+0x78>)
SDClass SD;
    1bfe:	ldr	r1, [pc, #36]	; (1c24 <_GLOBAL__sub_I_SD+0x7c>)
    1c00:	str.w	r2, [r0, #1180]	; 0x49c
    1c04:	strb.w	r3, [r0, #1230]	; 0x4ce
    1c08:	ldr	r2, [pc, #28]	; (1c28 <_GLOBAL__sub_I_SD+0x80>)
    1c0a:	b.w	a174 <__aeabi_atexit>
    1c0e:	nop
    1c10:	.word	0x20005b08
    1c14:	.word	0x200007e8
    1c18:	.word	0x20000794
    1c1c:	.word	0x003d0900
    1c20:	.word	0x2000061c
    1c24:	.word	0x0000108b
    1c28:	.word	0x20001bf0

00001c2c <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)>:
  uint32_t c;
  uint8_t h;
  uint8_t s;

  uint8_t numberOfHeads;
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
    1c2c:	cmp.w	r1, #256	; 0x100
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba) {
    1c30:	push	{r4, r5, lr}
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
    1c32:	bhi.n	1c94 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x68>
  if (capacityMB <= 16) {
    1c34:	cmp	r1, #16
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
    1c36:	mov.w	r4, #32
  if (capacityMB <= 16) {
    1c3a:	bls.n	1c98 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x6c>
    numberOfHeads = 2;
  } else if (capacityMB <= 32) {
    1c3c:	cmp	r1, #32
    1c3e:	bls.n	1c9c <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x70>
    numberOfHeads = 4;
  } else if (capacityMB <= 128) {
    1c40:	cmp	r1, #128	; 0x80
    1c42:	bls.n	1ca0 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x74>
    numberOfHeads = 8;
  } else if (capacityMB <= 504) {
    1c44:	cmp.w	r1, #504	; 0x1f8
    1c48:	bls.n	1ca4 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x78>
    numberOfHeads = 16;
  } else if (capacityMB <= 1008) {
    1c4a:	cmp.w	r1, #1008	; 0x3f0
    1c4e:	bls.n	1ca8 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x7c>
    numberOfHeads = 32;
  } else if (capacityMB <= 2016) {
    1c50:	cmp.w	r1, #2016	; 0x7e0
    1c54:	bls.n	1cac <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x80>
    numberOfHeads = 64;
  } else if (capacityMB <= 4032) {
    numberOfHeads = 128;
  } else {
    numberOfHeads = 255;
    1c56:	cmp.w	r1, #4032	; 0xfc0
    1c5a:	ite	ls
    1c5c:	movls	r3, #128	; 0x80
    1c5e:	movhi	r3, #255	; 0xff
  }
  c = lba / (numberOfHeads * sectorsPerTrack);
    1c60:	smulbb	r3, r3, r4
    1c64:	udiv	r1, r2, r3
  if (c <= 1023) {
    1c68:	cmp.w	r1, #1024	; 0x400
    1c6c:	bcs.n	1cb0 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x84>
    h = (lba % (numberOfHeads * sectorsPerTrack)) / sectorsPerTrack;
    1c6e:	mls	r3, r3, r1, r2
    s = (lba % sectorsPerTrack) + 1;
    1c72:	udiv	r5, r2, r4
    h = (lba % (numberOfHeads * sectorsPerTrack)) / sectorsPerTrack;
    1c76:	udiv	r3, r3, r4
    s = (lba % sectorsPerTrack) + 1;
    1c7a:	mls	r2, r4, r5, r2
    h = (lba % (numberOfHeads * sectorsPerTrack)) / sectorsPerTrack;
    1c7e:	uxtb	r3, r3
    s = (lba % sectorsPerTrack) + 1;
    1c80:	adds	r2, #1
    1c82:	uxtb	r2, r2
  } else {
    c = 1023;
    h = 254;
    s = 63;
  }
  chs[0] = h;
    1c84:	strb	r3, [r0, #0]
  chs[1] = ((c >> 2) & 0XC0) | s;
    1c86:	lsrs	r3, r1, #2
  chs[2] = c;
    1c88:	strb	r1, [r0, #2]
  chs[1] = ((c >> 2) & 0XC0) | s;
    1c8a:	bic.w	r3, r3, #63	; 0x3f
    1c8e:	orrs	r2, r3
    1c90:	strb	r2, [r0, #1]
}
    1c92:	pop	{r4, r5, pc}
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
    1c94:	movs	r4, #63	; 0x3f
    1c96:	b.n	1c40 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x14>
    numberOfHeads = 2;
    1c98:	movs	r3, #2
    1c9a:	b.n	1c60 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x34>
    numberOfHeads = 4;
    1c9c:	movs	r3, #4
    1c9e:	b.n	1c60 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x34>
    numberOfHeads = 8;
    1ca0:	movs	r3, #8
    1ca2:	b.n	1c60 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x34>
    numberOfHeads = 16;
    1ca4:	movs	r3, #16
    1ca6:	b.n	1c60 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x34>
    numberOfHeads = 32;
    1ca8:	movs	r3, #32
    1caa:	b.n	1c60 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x34>
    numberOfHeads = 64;
    1cac:	movs	r3, #64	; 0x40
    1cae:	b.n	1c60 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x34>
    s = 63;
    1cb0:	movs	r2, #63	; 0x3f
    h = 254;
    1cb2:	movs	r3, #254	; 0xfe
    c = 1023;
    1cb4:	movw	r1, #1023	; 0x3ff
    1cb8:	b.n	1c84 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x58>

00001cba <FsCache::sync()>:

fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
    1cba:	push	{r0, r1, r4, r5, r6, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
    1cbc:	ldrb	r3, [r0, #0]
bool FsCache::sync() {
    1cbe:	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
    1cc0:	lsls	r2, r3, #31
    1cc2:	bpl.n	1d06 <FsCache::sync()+0x4c>
    if (!m_blockDev->writeSector(m_sector, m_buffer)) {
    1cc4:	ldr	r0, [r0, #4]
    1cc6:	add.w	r2, r4, #16
    1cca:	ldr	r1, [r4, #8]
    1ccc:	ldr	r3, [r0, #0]
    1cce:	str	r2, [sp, #4]
    1cd0:	ldr	r3, [r3, #32]
    1cd2:	blx	r3
    1cd4:	ldr	r2, [sp, #4]
    1cd6:	mov	r5, r0
    1cd8:	cbnz	r0, 1ce2 <FsCache::sync()+0x28>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
    1cda:	movs	r5, #0
}
    1cdc:	mov	r0, r5
    1cde:	add	sp, #8
    1ce0:	pop	{r4, r5, r6, pc}
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    1ce2:	ldrb	r3, [r4, #0]
    1ce4:	lsls	r3, r3, #30
    1ce6:	bmi.n	1cf2 <FsCache::sync()+0x38>
    m_status &= ~CACHE_STATUS_DIRTY;
    1ce8:	ldrb	r3, [r4, #0]
    1cea:	bic.w	r3, r3, #1
    1cee:	strb	r3, [r4, #0]
    1cf0:	b.n	1cdc <FsCache::sync()+0x22>
      if (!m_blockDev->writeSector(m_sector + m_mirrorOffset, m_buffer)) {
    1cf2:	ldrd	r0, r6, [r4, #4]
    1cf6:	ldr	r1, [r4, #12]
    1cf8:	ldr	r3, [r0, #0]
    1cfa:	add	r1, r6
    1cfc:	ldr	r3, [r3, #32]
    1cfe:	blx	r3
    1d00:	cmp	r0, #0
    1d02:	bne.n	1ce8 <FsCache::sync()+0x2e>
    1d04:	b.n	1cda <FsCache::sync()+0x20>
  return true;
    1d06:	movs	r5, #1
    1d08:	b.n	1cdc <FsCache::sync()+0x22>

00001d0a <FsCache::prepare(unsigned long, unsigned char)>:
  if (!m_blockDev) {
    1d0a:	ldr	r3, [r0, #4]
uint8_t* FsCache::prepare(uint32_t sector, uint8_t option) {
    1d0c:	push	{r4, r5, r6, lr}
    1d0e:	mov	r4, r0
    1d10:	mov	r6, r1
    1d12:	mov	r5, r2
  if (!m_blockDev) {
    1d14:	cbnz	r3, 1d1a <FsCache::prepare(unsigned long, unsigned char)+0x10>
  return nullptr;
    1d16:	movs	r0, #0
}
    1d18:	pop	{r4, r5, r6, pc}
  if (m_sector != sector) {
    1d1a:	ldr	r3, [r0, #8]
    1d1c:	cmp	r3, r1
    1d1e:	beq.n	1d32 <FsCache::prepare(unsigned long, unsigned char)+0x28>
    if (!sync()) {
    1d20:	bl	1cba <FsCache::sync()>
    1d24:	cmp	r0, #0
    1d26:	beq.n	1d16 <FsCache::prepare(unsigned long, unsigned char)+0xc>
    if (!(option & CACHE_OPTION_NO_READ)) {
    1d28:	lsls	r3, r5, #29
    1d2a:	bpl.n	1d42 <FsCache::prepare(unsigned long, unsigned char)+0x38>
    m_status = 0;
    1d2c:	movs	r3, #0
    m_sector = sector;
    1d2e:	str	r6, [r4, #8]
    m_status = 0;
    1d30:	strb	r3, [r4, #0]
  m_status |= option & CACHE_STATUS_MASK;
    1d32:	ldrb	r3, [r4, #0]
    1d34:	and.w	r5, r5, #3
    1d38:	mov	r0, r4
    1d3a:	orrs	r3, r5
    1d3c:	strb.w	r3, [r0], #16
  return m_buffer;
    1d40:	b.n	1d18 <FsCache::prepare(unsigned long, unsigned char)+0xe>
      if (!m_blockDev->readSector(sector, m_buffer)) {
    1d42:	ldr	r0, [r4, #4]
    1d44:	add.w	r2, r4, #16
    1d48:	mov	r1, r6
    1d4a:	ldr	r3, [r0, #0]
    1d4c:	ldr	r3, [r3, #16]
    1d4e:	blx	r3
    1d50:	cmp	r0, #0
    1d52:	bne.n	1d2c <FsCache::prepare(unsigned long, unsigned char)+0x22>
    1d54:	b.n	1d16 <FsCache::prepare(unsigned long, unsigned char)+0xc>
	...

00001d58 <toUpcase(unsigned short)>:
}
//------------------------------------------------------------------------------
uint16_t toUpcase(uint16_t chr) {
  uint16_t i, first;
  // Optimize for simple ASCII.
  if (chr < 127) {
    1d58:	cmp	r0, #126	; 0x7e
uint16_t toUpcase(uint16_t chr) {
    1d5a:	push	{r4, r5, lr}
  if (chr < 127) {
    1d5c:	bhi.n	1dae <toUpcase(unsigned short)+0x56>
    return chr - ('a' <= chr && chr <= 'z' ? 'a' - 'A' : 0);
    1d5e:	sub.w	r3, r0, #97	; 0x61
    1d62:	cmp	r3, #25
    1d64:	ite	hi
    1d66:	movhi	r3, #0
    1d68:	movls	r3, #1
    1d6a:	sub.w	r3, r0, r3, lsl #5
  i = searchPair16(reinterpret_cast<const pair16_t*>(mapTable), MAP_DIM, chr);
  first = readTable16(mapTable[i].base);
  if (first <= chr && (chr - first) < readTable8(mapTable[i].count)) {
    int8_t off = readTable8(mapTable[i].off);
    if (off == 1) {
      return chr - ((chr - first) & 1);
    1d6e:	uxth	r0, r3
  i = searchPair16(lookupTable, LOOKUP_DIM, chr);
  if (readTable16(lookupTable[i].key) == chr) {
    return readTable16(lookupTable[i].val);
  }
  return chr;
}
    1d70:	pop	{r4, r5, pc}
    size_t mid = left + (right - left) / 2;
    1d72:	add.w	r2, r3, r2, lsr #1
    if (readTable16(table[mid].key) <= key) {
    1d76:	ldrh.w	r5, [r1, r2, lsl #2]
    1d7a:	cmp	r5, r0
    size_t mid = left + (right - left) / 2;
    1d7c:	ite	hi
    1d7e:	movhi	r4, r2
    1d80:	movls	r3, r2
  while (right - left > 1) {
    1d82:	subs	r2, r4, r3
    1d84:	cmp	r2, #1
    1d86:	bhi.n	1d72 <toUpcase(unsigned short)+0x1a>
  first = readTable16(mapTable[i].base);
    1d88:	uxth	r2, r3
    1d8a:	ldrh.w	r3, [r1, r2, lsl #2]
  if (first <= chr && (chr - first) < readTable8(mapTable[i].count)) {
    1d8e:	cmp	r0, r3
    1d90:	bcc.n	1dee <toUpcase(unsigned short)+0x96>
    1d92:	add.w	r1, r1, r2, lsl #2
    1d96:	subs	r3, r0, r3
    1d98:	ldrb	r2, [r1, #3]
    1d9a:	cmp	r3, r2
    1d9c:	bge.n	1dee <toUpcase(unsigned short)+0x96>
    int8_t off = readTable8(mapTable[i].off);
    1d9e:	ldrsb.w	r2, [r1, #2]
    if (off == 1) {
    1da2:	cmp	r2, #1
    1da4:	bne.n	1db6 <toUpcase(unsigned short)+0x5e>
      return chr - ((chr - first) & 1);
    1da6:	and.w	r3, r3, #1
    1daa:	subs	r3, r0, r3
    1dac:	b.n	1d6e <toUpcase(unsigned short)+0x16>
  size_t right = size;
    1dae:	movs	r4, #53	; 0x35
  size_t left = 0;
    1db0:	movs	r3, #0
    1db2:	ldr	r1, [pc, #68]	; (1df8 <toUpcase(unsigned short)+0xa0>)
    1db4:	b.n	1d82 <toUpcase(unsigned short)+0x2a>
    return chr + (off ? off : -0x1C60);
    1db6:	cbz	r2, 1dc0 <toUpcase(unsigned short)+0x68>
    1db8:	uxth	r2, r2
    1dba:	add	r2, r0
    1dbc:	uxth	r0, r2
    1dbe:	b.n	1d70 <toUpcase(unsigned short)+0x18>
    1dc0:	movw	r2, #58272	; 0xe3a0
    1dc4:	b.n	1dba <toUpcase(unsigned short)+0x62>
    size_t mid = left + (right - left) / 2;
    1dc6:	add.w	r2, r3, r2, lsr #1
    if (readTable16(table[mid].key) <= key) {
    1dca:	ldrh.w	r5, [r1, r2, lsl #2]
    1dce:	cmp	r5, r0
    size_t mid = left + (right - left) / 2;
    1dd0:	ite	hi
    1dd2:	movhi	r4, r2
    1dd4:	movls	r3, r2
  while (right - left > 1) {
    1dd6:	subs	r2, r4, r3
    1dd8:	cmp	r2, #1
    1dda:	bhi.n	1dc6 <toUpcase(unsigned short)+0x6e>
  if (readTable16(lookupTable[i].key) == chr) {
    1ddc:	uxth	r3, r3
    1dde:	ldrh.w	r2, [r1, r3, lsl #2]
    1de2:	cmp	r2, r0
    return readTable16(lookupTable[i].val);
    1de4:	itt	eq
    1de6:	addeq.w	r1, r1, r3, lsl #2
    1dea:	ldrheq	r0, [r1, #2]
    1dec:	b.n	1d70 <toUpcase(unsigned short)+0x18>
    1dee:	movs	r4, #75	; 0x4b
    1df0:	movs	r3, #0
    1df2:	ldr	r1, [pc, #8]	; (1dfc <toUpcase(unsigned short)+0xa4>)
    1df4:	b.n	1dd6 <toUpcase(unsigned short)+0x7e>
    1df6:	nop
    1df8:	.word	0x20001064
    1dfc:	.word	0x20000f38

00001e00 <dateTimeMs10(unsigned short*, unsigned short*, unsigned char*)>:
  *ms10 = 0;
    1e00:	movs	r3, #0
    1e02:	strb	r3, [r2, #0]
  FsDateTime::callback2(date, time);
    1e04:	ldr	r3, [pc, #4]	; (1e0c <dateTimeMs10(unsigned short*, unsigned short*, unsigned char*)+0xc>)
    1e06:	ldr	r3, [r3, #0]
    1e08:	bx	r3
    1e0a:	nop
    1e0c:	.word	0x200068b0

00001e10 <FsDateTime::setCallback(void (*)(unsigned short*, unsigned short*))>:
  callback = dateTimeMs10;
    1e10:	ldr	r3, [pc, #8]	; (1e1c <FsDateTime::setCallback(void (*)(unsigned short*, unsigned short*))+0xc>)
    1e12:	ldr	r2, [pc, #12]	; (1e20 <FsDateTime::setCallback(void (*)(unsigned short*, unsigned short*))+0x10>)
    1e14:	str	r2, [r3, #0]
  callback2 = dateTime;
    1e16:	ldr	r3, [pc, #12]	; (1e24 <FsDateTime::setCallback(void (*)(unsigned short*, unsigned short*))+0x14>)
    1e18:	str	r0, [r3, #0]
}
    1e1a:	bx	lr
    1e1c:	.word	0x200068ac
    1e20:	.word	0x00001e01
    1e24:	.word	0x200068b0

00001e28 <Print::write(char const*) [clone .isra.0]>:
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    1e28:	push	{r0, r1, r4, lr}
    1e2a:	mov	r4, r0
    1e2c:	mov	r0, r1
    1e2e:	str	r1, [sp, #4]
    1e30:	bl	b240 <strlen>
    1e34:	ldr	r3, [r4, #0]
    1e36:	mov	r2, r0
    1e38:	ldr	r1, [sp, #4]
    1e3a:	mov	r0, r4
    1e3c:	ldr	r3, [r3, #4]
    1e3e:	add	sp, #8
    1e40:	ldmia.w	sp!, {r4, lr}
    1e44:	bx	r3

00001e46 <ExFatFormatter::syncUpcase()>:
  writeMsg(pr, "Format failed\r\n");
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFormatter::syncUpcase() {
  uint16_t index = m_upcaseSize & SECTOR_MASK;
    1e46:	ldr	r3, [r0, #8]
    1e48:	ubfx	r3, r3, #0, #9
bool ExFatFormatter::syncUpcase() {
    1e4c:	push	{r4}
  if (!index) {
    1e4e:	cbz	r3, 1e72 <ExFatFormatter::syncUpcase()+0x2c>
    return true;
  }
  for (size_t i = index; i < BYTES_PER_SECTOR; i++) {
    m_secBuf[i] = 0;
    1e50:	movs	r1, #0
    1e52:	ldr	r2, [r0, #16]
    1e54:	strb	r1, [r2, r3]
  for (size_t i = index; i < BYTES_PER_SECTOR; i++) {
    1e56:	adds	r3, #1
    1e58:	cmp.w	r3, #512	; 0x200
    1e5c:	bne.n	1e52 <ExFatFormatter::syncUpcase()+0xc>
  }
  return m_dev->writeSector(m_upcaseSector, m_secBuf);
    1e5e:	ldr	r3, [r0, #12]
    1e60:	ldr	r1, [r0, #0]
    1e62:	ldr	r2, [r3, #0]
    1e64:	ldr	r4, [r2, #32]
    1e66:	ldr	r2, [r0, #16]
    1e68:	mov	r0, r3
    1e6a:	mov	r3, r4
}
    1e6c:	ldr.w	r4, [sp], #4
  return m_dev->writeSector(m_upcaseSector, m_secBuf);
    1e70:	bx	r3
}
    1e72:	movs	r0, #1
    1e74:	ldr.w	r4, [sp], #4
    1e78:	bx	lr

00001e7a <ExFatFormatter::writeUpcaseByte(unsigned char)>:
//------------------------------------------------------------------------------
bool ExFatFormatter::writeUpcaseByte(uint8_t b) {
  uint16_t index = m_upcaseSize & SECTOR_MASK;
    1e7a:	ldr	r2, [r0, #8]
bool ExFatFormatter::writeUpcaseByte(uint8_t b) {
    1e7c:	mov	r3, r0
  m_secBuf[index] = b;
    1e7e:	ldr	r0, [r0, #16]
  uint16_t index = m_upcaseSize & SECTOR_MASK;
    1e80:	ubfx	r2, r2, #0, #9
bool ExFatFormatter::writeUpcaseByte(uint8_t b) {
    1e84:	push	{r4}
  m_secBuf[index] = b;
    1e86:	strb	r1, [r0, r2]
  uint8_t mustBeZero2[2];
  uint8_t unicode3[4];
} DirLfn_t;
//==============================================================================
inline uint32_t exFatChecksum(uint32_t sum, uint8_t data) {
  return (sum << 31) + (sum >> 1) + data;
    1e88:	ldr	r0, [r3, #4]
    1e8a:	add.w	r1, r1, r0, ror #1
  m_upcaseChecksum = exFatChecksum(m_upcaseChecksum, b);
    1e8e:	str	r1, [r3, #4]
  m_upcaseSize++;
    1e90:	ldr	r1, [r3, #8]
    1e92:	adds	r1, #1
    1e94:	str	r1, [r3, #8]
  if (index == SECTOR_MASK) {
    1e96:	movw	r1, #511	; 0x1ff
    1e9a:	cmp	r2, r1
    1e9c:	bne.n	1eb4 <ExFatFormatter::writeUpcaseByte(unsigned char)+0x3a>
    return m_dev->writeSector(m_upcaseSector++, m_secBuf);
    1e9e:	ldr	r0, [r3, #12]
    1ea0:	ldr	r1, [r3, #0]
    1ea2:	ldr	r2, [r0, #0]
    1ea4:	ldr	r4, [r2, #32]
    1ea6:	adds	r2, r1, #1
    1ea8:	str	r2, [r3, #0]
    1eaa:	ldr	r2, [r3, #16]
    1eac:	mov	r3, r4
  }
  return true;
}
    1eae:	ldr.w	r4, [sp], #4
    return m_dev->writeSector(m_upcaseSector++, m_secBuf);
    1eb2:	bx	r3
}
    1eb4:	movs	r0, #1
    1eb6:	ldr.w	r4, [sp], #4
    1eba:	bx	lr

00001ebc <ExFatFormatter::writeUpcaseUnicode(unsigned short)>:
//------------------------------------------------------------------------------
bool ExFatFormatter::writeUpcaseUnicode(uint16_t unicode) {
    1ebc:	push	{r3, r4, r5, lr}
    1ebe:	mov	r4, r1
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    1ec0:	uxtb	r1, r1
bool ExFatFormatter::writeUpcaseUnicode(uint16_t unicode) {
    1ec2:	mov	r5, r0
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    1ec4:	bl	1e7a <ExFatFormatter::writeUpcaseByte(unsigned char)>
    1ec8:	cbz	r0, 1ed6 <ExFatFormatter::writeUpcaseUnicode(unsigned short)+0x1a>
    1eca:	lsrs	r1, r4, #8
    1ecc:	mov	r0, r5
}
    1ece:	ldmia.w	sp!, {r3, r4, r5, lr}
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    1ed2:	b.w	1e7a <ExFatFormatter::writeUpcaseByte(unsigned char)>
}
    1ed6:	pop	{r3, r4, r5, pc}

00001ed8 <ExFatFormatter::writeUpcase(unsigned long)>:
//------------------------------------------------------------------------------
bool ExFatFormatter::writeUpcase(uint32_t sector) {
    1ed8:	push	{r3, r4, r5, r6, r7, lr}
  uint32_t n;
  uint32_t ns;
  uint32_t ch = 0;
  uint16_t uc;

  m_upcaseSize = 0;
    1eda:	movs	r4, #0
bool ExFatFormatter::writeUpcase(uint32_t sector) {
    1edc:	mov	r5, r0
  m_upcaseChecksum = 0;
  m_upcaseSector = sector;
    1ede:	str	r1, [r0, #0]
  m_upcaseChecksum = 0;
    1ee0:	strd	r4, r4, [r0, #4]

  while (ch < 0X10000) {
    uc = toUpcase(ch);
    1ee4:	uxth	r0, r4
    1ee6:	bl	1d58 <toUpcase(unsigned short)>
    if (uc != ch) {
    1eea:	cmp	r0, r4
    uc = toUpcase(ch);
    1eec:	mov	r1, r0
    if (uc != ch) {
    1eee:	beq.n	1f0a <ExFatFormatter::writeUpcase(unsigned long)+0x32>
      if (!writeUpcaseUnicode(uc)) {
    1ef0:	mov	r0, r5
    1ef2:	bl	1ebc <ExFatFormatter::writeUpcaseUnicode(unsigned short)>
    1ef6:	cbz	r0, 1f3e <ExFatFormatter::writeUpcase(unsigned long)+0x66>
        DBG_FAIL_MACRO;
        goto fail;
      }
      ch++;
    1ef8:	adds	r4, #1
  while (ch < 0X10000) {
    1efa:	cmp.w	r4, #65536	; 0x10000
    1efe:	bne.n	1ee4 <ExFatFormatter::writeUpcase(unsigned long)+0xc>
          }
        }
      }
    }
  }
  if (!syncUpcase()) {
    1f00:	mov	r0, r5
  }
  return true;

fail:
  return false;
}
    1f02:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  if (!syncUpcase()) {
    1f06:	b.w	1e46 <ExFatFormatter::syncUpcase()>
      for (n = ch + 1; n < 0X10000 && n == toUpcase(n); n++) {
    1f0a:	adds	r6, r4, #1
    1f0c:	cmp.w	r6, #65536	; 0x10000
    1f10:	beq.n	1f20 <ExFatFormatter::writeUpcase(unsigned long)+0x48>
    1f12:	uxth	r0, r6
    1f14:	bl	1d58 <toUpcase(unsigned short)>
    1f18:	cmp	r0, r6
    1f1a:	bne.n	1f20 <ExFatFormatter::writeUpcase(unsigned long)+0x48>
    1f1c:	adds	r6, #1
    1f1e:	b.n	1f0c <ExFatFormatter::writeUpcase(unsigned long)+0x34>
      ns = n - ch;
    1f20:	subs	r7, r6, r4
      if (ns >= MINIMUM_UPCASE_SKIP) {
    1f22:	cmp.w	r7, #512	; 0x200
    1f26:	bcc.n	1f50 <ExFatFormatter::writeUpcase(unsigned long)+0x78>
        if (!writeUpcaseUnicode(0XFFFF) || !writeUpcaseUnicode(ns)) {
    1f28:	movw	r1, #65535	; 0xffff
    1f2c:	mov	r0, r5
    1f2e:	bl	1ebc <ExFatFormatter::writeUpcaseUnicode(unsigned short)>
    1f32:	cbz	r0, 1f3e <ExFatFormatter::writeUpcase(unsigned long)+0x66>
    1f34:	uxth	r1, r7
    1f36:	mov	r0, r5
    1f38:	bl	1ebc <ExFatFormatter::writeUpcaseUnicode(unsigned short)>
    1f3c:	cbnz	r0, 1f56 <ExFatFormatter::writeUpcase(unsigned long)+0x7e>
}
    1f3e:	movs	r0, #0
    1f40:	pop	{r3, r4, r5, r6, r7, pc}
          if (!writeUpcaseUnicode(ch++)) {
    1f42:	uxth	r1, r4
    1f44:	mov	r0, r5
    1f46:	adds	r4, #1
    1f48:	bl	1ebc <ExFatFormatter::writeUpcaseUnicode(unsigned short)>
    1f4c:	cmp	r0, #0
    1f4e:	beq.n	1f3e <ExFatFormatter::writeUpcase(unsigned long)+0x66>
        while (ch < n) {
    1f50:	cmp	r6, r4
    1f52:	bhi.n	1f42 <ExFatFormatter::writeUpcase(unsigned long)+0x6a>
    1f54:	b.n	1efa <ExFatFormatter::writeUpcase(unsigned long)+0x22>
    1f56:	mov	r4, r6
    1f58:	b.n	1efa <ExFatFormatter::writeUpcase(unsigned long)+0x22>
	...

00001f5c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)>:
bool ExFatFormatter::format(FsBlockDevice* dev, uint8_t* secBuf, print_t* pr) {
    1f5c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1f60:	mov	r6, r3
    1f62:	sub	sp, #36	; 0x24
  sectorCount = dev->sectorCount();
    1f64:	ldr	r3, [r1, #0]
bool ExFatFormatter::format(FsBlockDevice* dev, uint8_t* secBuf, print_t* pr) {
    1f66:	mov	r5, r1
    1f68:	str	r0, [sp, #8]
    1f6a:	mov	r4, r2
  sectorCount = dev->sectorCount();
    1f6c:	ldr	r3, [r3, #24]
  m_secBuf = secBuf;
    1f6e:	strd	r1, r2, [r0, #12]
  sectorCount = dev->sectorCount();
    1f72:	mov	r0, r1
    1f74:	blx	r3
  if (sectorCount < 0X100000) {
    1f76:	cmp.w	r0, #1048576	; 0x100000
  sectorCount = dev->sectorCount();
    1f7a:	mov	r7, r0
  if (sectorCount < 0X100000) {
    1f7c:	bcs.n	1f98 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x3c>
    writeMsg(pr, "Device is too small\r\n");
    1f7e:	cbnz	r6, 1f86 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x2a>
  return false;
    1f80:	mov.w	sl, #0
    1f84:	b.n	238a <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x42e>
    writeMsg(pr, "Device is too small\r\n");
    1f86:	ldr	r1, [pc, #580]	; (21cc <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x270>)
    1f88:	mov	r0, r6
    1f8a:	bl	1e28 <Print::write(char const*) [clone .isra.0]>
  writeMsg(pr, "Format failed\r\n");
    1f8e:	ldr	r1, [pc, #576]	; (21d0 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x274>)
    1f90:	mov	r0, r6
    1f92:	bl	1e28 <Print::write(char const*) [clone .isra.0]>
    1f96:	b.n	1f80 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x24>
  for (m = 1, vs = 0; m && sectorCount > m; m <<= 1, vs++) {
    1f98:	movs	r3, #0
    1f9a:	movs	r2, #1
    1f9c:	adds	r3, #1
    1f9e:	lsls	r2, r2, #1
    1fa0:	uxtb	r3, r3
    1fa2:	cmp	r3, #32
    1fa4:	beq.n	1fb0 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x54>
    1fa6:	cmp	r7, r2
    1fa8:	bhi.n	1f9c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x40>
  sectorsPerClusterShift = vs < 29 ? 8 : (vs - 11) / 2;
    1faa:	cmp	r3, #28
    1fac:	bls.w	2176 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x21a>
    1fb0:	sub.w	r2, r3, #11
    1fb4:	ubfx	r2, r2, #1, #8
  fatLength = 1UL << (vs < 27 ? 13 : (vs + 1) / 2);
    1fb8:	cmp	r3, #26
  sectorsPerClusterShift = vs < 29 ? 8 : (vs - 11) / 2;
    1fba:	str	r2, [sp, #4]
  memset(secBuf, 0, BYTES_PER_SECTOR);
    1fbc:	mov.w	r1, #0
    1fc0:	mov	r0, r4
  fatLength = 1UL << (vs < 27 ? 13 : (vs + 1) / 2);
    1fc2:	itte	hi
    1fc4:	addhi	r3, #1
    1fc6:	movhi	r2, #1
    1fc8:	movls.w	sl, #8192	; 0x2000
  mbr->part->beginCHS[0] = 1;
    1fcc:	mov.w	r9, #1
  fatLength = 1UL << (vs < 27 ? 13 : (vs + 1) / 2);
    1fd0:	itt	hi
    1fd2:	ubfxhi	r3, r3, #1, #7
    1fd6:	lslhi.w	sl, r2, r3
  clusterCount = (sectorCount - 4 * fatLength) >> sectorsPerClusterShift;
    1fda:	ldr	r2, [sp, #4]
    1fdc:	mov.w	r3, sl, lsl #2
  partitionOffset = 2 * fatLength;
    1fe0:	mov.w	fp, sl, lsl #1
  clusterCount = (sectorCount - 4 * fatLength) >> sectorsPerClusterShift;
    1fe4:	str	r3, [sp, #16]
    1fe6:	sub.w	r3, r7, sl, lsl #2
    1fea:	lsrs	r3, r2
  volumeLength = clusterHeapOffset + (clusterCount << sectorsPerClusterShift);
    1fec:	lsl.w	r8, r3, r2
  clusterCount = (sectorCount - 4 * fatLength) >> sectorsPerClusterShift;
    1ff0:	str	r3, [sp, #12]
  memset(secBuf, 0, BYTES_PER_SECTOR);
    1ff2:	mov.w	r2, #512	; 0x200
  volumeLength = clusterHeapOffset + (clusterCount << sectorsPerClusterShift);
    1ff6:	add.w	r3, r8, sl, lsl #1
  *reinterpret_cast<uint16_t*>(dst) = src;
    1ffa:	movw	r8, #43605	; 0xaa55
    1ffe:	str	r3, [sp, #20]
  memset(secBuf, 0, BYTES_PER_SECTOR);
    2000:	bl	7528 <memset>
  mbr->part->type = 7;
    2004:	movs	r3, #7
  mbr->part->beginCHS[0] = 1;
    2006:	strb.w	r9, [r4, #447]	; 0x1bf
  mbr->part->beginCHS[1] = 1;
    200a:	strb.w	r9, [r4, #448]	; 0x1c0
  if (!dev->writeSector(0, secBuf)) {
    200e:	mov	r2, r4
  mbr->part->type = 7;
    2010:	strb.w	r3, [r4, #450]	; 0x1c2
  mbr->part->endCHS[0] = 0XFE;
    2014:	movs	r3, #254	; 0xfe
  if (!dev->writeSector(0, secBuf)) {
    2016:	movs	r1, #0
    2018:	mov	r0, r5
  mbr->part->endCHS[0] = 0XFE;
    201a:	strb.w	r3, [r4, #451]	; 0x1c3
  mbr->part->endCHS[1] = 0XFF;
    201e:	movs	r3, #255	; 0xff
  *reinterpret_cast<uint32_t*>(dst) = src;
    2020:	str.w	fp, [r4, #454]	; 0x1c6
    2024:	strb.w	r3, [r4, #452]	; 0x1c4
  mbr->part->endCHS[2] = 0XFF;
    2028:	strb.w	r3, [r4, #453]	; 0x1c5
    202c:	ldr	r3, [sp, #20]
  *reinterpret_cast<uint16_t*>(dst) = src;
    202e:	strh.w	r8, [r4, #510]	; 0x1fe
  *reinterpret_cast<uint32_t*>(dst) = src;
    2032:	str.w	r3, [r4, #458]	; 0x1ca
  if (!dev->writeSector(0, secBuf)) {
    2036:	ldr	r3, [r5, #0]
    2038:	ldr	r3, [r3, #32]
    203a:	blx	r3
    203c:	cmp	r0, #0
    203e:	beq.w	2392 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x436>
  memset(secBuf, 0, BYTES_PER_SECTOR);
    2042:	mov.w	r2, #512	; 0x200
    2046:	movs	r1, #0
    2048:	mov	r0, r4
    204a:	bl	7528 <memset>
  pbs->jmpInstruction[0] = 0XEB;
    204e:	movs	r3, #235	; 0xeb
  pbs->bpb.numberOfFats = 1;
    2050:	strb.w	r9, [r4, #110]	; 0x6e
  for (size_t i = 0; i < BYTES_PER_SECTOR; i++) {
    2054:	mov.w	r9, #0
  pbs->jmpInstruction[0] = 0XEB;
    2058:	strb	r3, [r4, #0]
  pbs->jmpInstruction[1] = 0X76;
    205a:	movs	r3, #118	; 0x76
    pbs->bootCode[i] = 0XF4;
    205c:	mov.w	r2, #390	; 0x186
    2060:	movs	r1, #244	; 0xf4
  pbs->jmpInstruction[1] = 0X76;
    2062:	strb	r3, [r4, #1]
  pbs->jmpInstruction[2] = 0X90;
    2064:	movs	r3, #144	; 0x90
    pbs->bootCode[i] = 0XF4;
    2066:	add.w	r0, r4, #120	; 0x78
  setLe64(pbs->bpb.partitionOffset, partitionOffset);
    206a:	str.w	fp, [r4, #64]	; 0x40
  pbs->jmpInstruction[2] = 0X90;
    206e:	strb	r3, [r4, #2]
  pbs->oemName[0] = 'E';
    2070:	movs	r3, #69	; 0x45
    2072:	str.w	fp, [r4, #88]	; 0x58
    2076:	strb	r3, [r4, #3]
  pbs->oemName[1] = 'X';
    2078:	movs	r3, #88	; 0x58
    207a:	strb	r3, [r4, #4]
  pbs->oemName[2] = 'F';
    207c:	movs	r3, #70	; 0x46
    207e:	strb	r3, [r4, #5]
  pbs->oemName[3] = 'A';
    2080:	movs	r3, #65	; 0x41
    2082:	strb	r3, [r4, #6]
  pbs->oemName[4] = 'T';
    2084:	movs	r3, #84	; 0x54
    2086:	strb	r3, [r4, #7]
  pbs->oemName[5] = ' ';
    2088:	movs	r3, #32
    208a:	strb	r3, [r4, #8]
  pbs->oemName[6] = ' ';
    208c:	strb	r3, [r4, #9]
  pbs->oemName[7] = ' ';
    208e:	strb	r3, [r4, #10]
  setLe64(pbs->bpb.volumeLength, volumeLength);
    2090:	ldr	r3, [sp, #20]
    2092:	str	r3, [r4, #72]	; 0x48
    2094:	ldr	r3, [sp, #12]
    2096:	str	r3, [r4, #92]	; 0x5c
    2098:	movs	r3, #4
    209a:	strd	r3, r7, [r4, #96]	; 0x60
  *reinterpret_cast<uint16_t*>(dst) = src;
    209e:	mov.w	r3, #256	; 0x100
  uint32_t checksum = 0;
    20a2:	mov	r7, r9
    20a4:	strh.w	r3, [r4, #104]	; 0x68
  pbs->bpb.bytesPerSectorShift = BYTES_PER_SECTOR_SHIFT;
    20a8:	movs	r3, #9
    20aa:	strb.w	r3, [r4, #108]	; 0x6c
  pbs->bpb.sectorsPerClusterShift = sectorsPerClusterShift;
    20ae:	ldr	r3, [sp, #4]
    20b0:	strb.w	r3, [r4, #109]	; 0x6d
  pbs->bpb.driveSelect = 0X80;
    20b4:	movs	r3, #128	; 0x80
  *reinterpret_cast<uint32_t*>(dst) = src;
    20b6:	strd	sl, sl, [r4, #80]	; 0x50
    20ba:	strb.w	r3, [r4, #111]	; 0x6f
    pbs->bootCode[i] = 0XF4;
    20be:	bl	7528 <memset>
  *reinterpret_cast<uint16_t*>(dst) = src;
    20c2:	strh.w	r8, [r4, #510]	; 0x1fe
    if (i == offsetof(ExFatPbs_t, bpb.volumeFlags[0]) ||
    20c6:	sub.w	r3, r9, #106	; 0x6a
    20ca:	cmp	r3, #1
    20cc:	bls.n	20dc <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x180>
        i == offsetof(ExFatPbs_t, bpb.volumeFlags[1]) ||
    20ce:	cmp.w	r9, #112	; 0x70
  return (sum << 31) + (sum >> 1) + data;
    20d2:	itt	ne
    20d4:	ldrbne.w	r3, [r4, r9]
    20d8:	addne.w	r7, r3, r7, ror #1
  for (size_t i = 0; i < BYTES_PER_SECTOR; i++) {
    20dc:	add.w	r9, r9, #1
    20e0:	cmp.w	r9, #512	; 0x200
    20e4:	bne.n	20c6 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x16a>
  if (!dev->writeSector(sector, secBuf) ||
    20e6:	ldr	r3, [r5, #0]
    20e8:	mov	r2, r4
    20ea:	mov	r1, fp
    20ec:	mov	r0, r5
    20ee:	ldr	r3, [r3, #32]
    20f0:	blx	r3
    20f2:	cmp	r0, #0
    20f4:	beq.w	2392 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x436>
      !dev->writeSector(sector + BOOT_BACKUP_OFFSET, secBuf)) {
    20f8:	ldr	r3, [r5, #0]
    20fa:	mov	r2, r4
    20fc:	add.w	r1, fp, #12
    2100:	mov	r0, r5
    2102:	ldr	r3, [r3, #32]
    2104:	blx	r3
  if (!dev->writeSector(sector, secBuf) ||
    2106:	cmp	r0, #0
    2108:	beq.w	2392 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x436>
  memset(secBuf, 0, BYTES_PER_SECTOR);
    210c:	mov	r2, r9
    210e:	movs	r1, #0
    2110:	mov	r0, r4
  sector++;
    2112:	add.w	r8, fp, #1
  memset(secBuf, 0, BYTES_PER_SECTOR);
    2116:	bl	7528 <memset>
  *reinterpret_cast<uint16_t*>(dst) = src;
    211a:	movw	r3, #43605	; 0xaa55
    211e:	strh.w	r3, [r4, #510]	; 0x1fe
  for (int j = 0; j < 8; j++) {
    2122:	add.w	r3, fp, #9
    2126:	str	r3, [sp, #28]
    2128:	subs	r3, r4, #1
    212a:	str	r3, [sp, #20]
    212c:	addw	r3, r4, #511	; 0x1ff
    2130:	str	r3, [sp, #24]
  uint32_t checksum = 0;
    2132:	ldr	r3, [sp, #20]
  return (sum << 31) + (sum >> 1) + data;
    2134:	ldrb.w	r2, [r3, #1]!
    2138:	add.w	r7, r2, r7, ror #1
    for (size_t i = 0; i < BYTES_PER_SECTOR; i++) {
    213c:	ldr	r2, [sp, #24]
    213e:	cmp	r3, r2
    2140:	bne.n	2134 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1d8>
    if (!dev->writeSector(sector, secBuf) ||
    2142:	ldr	r3, [r5, #0]
    2144:	mov	r2, r4
    2146:	mov	r1, r8
    2148:	mov	r0, r5
    214a:	ldr	r3, [r3, #32]
    214c:	blx	r3
    214e:	cmp	r0, #0
    2150:	beq.w	2392 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x436>
        !dev->writeSector(sector + BOOT_BACKUP_OFFSET, secBuf)) {
    2154:	ldr	r3, [r5, #0]
    2156:	mov	r2, r4
    2158:	add.w	r1, r8, #12
    215c:	mov	r0, r5
    215e:	ldr	r3, [r3, #32]
    2160:	blx	r3
    if (!dev->writeSector(sector, secBuf) ||
    2162:	cmp	r0, #0
    2164:	beq.w	2392 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x436>
    sector++;
    2168:	add.w	r9, r8, #1
  for (int j = 0; j < 8; j++) {
    216c:	ldr	r3, [sp, #28]
    216e:	cmp	r9, r3
    2170:	beq.n	217a <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x21e>
    2172:	mov	r8, r9
    2174:	b.n	2132 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1d6>
  sectorsPerClusterShift = vs < 29 ? 8 : (vs - 11) / 2;
    2176:	movs	r2, #8
    2178:	b.n	1fb8 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x5c>
  memset(secBuf, 0, BYTES_PER_SECTOR);
    217a:	add.w	r8, r8, #3
    217e:	mov.w	r2, #512	; 0x200
    2182:	movs	r1, #0
    2184:	mov	r0, r4
    2186:	bl	7528 <memset>
    for (size_t i = 0; i < BYTES_PER_SECTOR; i++) {
    218a:	ldr	r3, [sp, #20]
    218c:	ldrb.w	r2, [r3, #1]!
    2190:	add.w	r7, r2, r7, ror #1
    2194:	ldr	r2, [sp, #24]
    2196:	cmp	r2, r3
    2198:	bne.n	218c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x230>
    if (!dev->writeSector(sector, secBuf) ||
    219a:	ldr	r3, [r5, #0]
    219c:	mov	r2, r4
    219e:	mov	r1, r9
    21a0:	mov	r0, r5
    21a2:	ldr	r3, [r3, #32]
    21a4:	blx	r3
    21a6:	cmp	r0, #0
    21a8:	beq.w	2392 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x436>
        !dev->writeSector(sector + BOOT_BACKUP_OFFSET, secBuf)) {
    21ac:	ldr	r3, [r5, #0]
    21ae:	mov	r2, r4
    21b0:	add.w	r1, r9, #12
    21b4:	mov	r0, r5
    21b6:	ldr	r3, [r3, #32]
    21b8:	blx	r3
    if (!dev->writeSector(sector, secBuf) ||
    21ba:	cmp	r0, #0
    21bc:	beq.w	2392 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x436>
    sector++;
    21c0:	add.w	r1, r9, #1
  for (int j = 0; j < 2; j++) {
    21c4:	cmp	r8, r1
    21c6:	beq.n	21d4 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x278>
    21c8:	mov	r9, r1
    21ca:	b.n	218a <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x22e>
    21cc:	.word	0x20001197
    21d0:	.word	0x200011ee
    21d4:	subs	r3, r4, #4
    21d6:	add.w	r2, r4, #508	; 0x1fc
  *reinterpret_cast<uint32_t*>(dst) = src;
    21da:	str.w	r7, [r3, #4]!
  for (size_t i = 0; i < BYTES_PER_SECTOR; i += 4) {
    21de:	cmp	r2, r3
    21e0:	bne.n	21da <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x27e>
  if (!dev->writeSector(sector, secBuf) ||
    21e2:	ldr	r3, [r5, #0]
    21e4:	mov	r2, r4
    21e6:	mov	r0, r5
    21e8:	ldr	r3, [r3, #32]
    21ea:	blx	r3
    21ec:	cmp	r0, #0
    21ee:	beq.w	2392 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x436>
      !dev->writeSector(sector + BOOT_BACKUP_OFFSET, secBuf)) {
    21f2:	ldr	r3, [r5, #0]
    21f4:	mov	r2, r4
    21f6:	add.w	r1, r9, #13
    21fa:	mov	r0, r5
    21fc:	ldr	r3, [r3, #32]
    21fe:	blx	r3
  if (!dev->writeSector(sector, secBuf) ||
    2200:	cmp	r0, #0
    2202:	beq.w	2392 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x436>
  writeMsg(pr, "Writing FAT ");
    2206:	cbz	r6, 2210 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x2b4>
    2208:	ldr	r1, [pc, #400]	; (239c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x440>)
    220a:	mov	r0, r6
    220c:	bl	1e28 <Print::write(char const*) [clone .isra.0]>
  ns = ((clusterCount + 2) * 4 + BYTES_PER_SECTOR - 1) / BYTES_PER_SECTOR;
    2210:	ldr	r3, [sp, #12]
  memset(secBuf, 0, BYTES_PER_SECTOR);
    2212:	mov.w	r2, #512	; 0x200
    2216:	movs	r1, #0
    2218:	mov	r0, r4
  ns = ((clusterCount + 2) * 4 + BYTES_PER_SECTOR - 1) / BYTES_PER_SECTOR;
    221a:	mov.w	r8, r3, lsl #2
  sector = partitionOffset + fatOffset;
    221e:	add	sl, fp
  memset(secBuf, 0, BYTES_PER_SECTOR);
    2220:	bl	7528 <memset>
  secBuf[0] = 0XF8;
    2224:	mov	r0, r4
  ns = ((clusterCount + 2) * 4 + BYTES_PER_SECTOR - 1) / BYTES_PER_SECTOR;
    2226:	addw	r8, r8, #519	; 0x207
  secBuf[0] = 0XF8;
    222a:	movs	r3, #248	; 0xf8
  for (uint32_t i = 0; i < ns; i++) {
    222c:	movs	r7, #0
      writeMsg(pr, ".");
    222e:	ldr.w	fp, [pc, #384]	; 23b0 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x454>
  ns = ((clusterCount + 2) * 4 + BYTES_PER_SECTOR - 1) / BYTES_PER_SECTOR;
    2232:	mov.w	r9, r8, lsr #9
    secBuf[i] = 0XFF;
    2236:	movs	r2, #19
    if (i % (ns / 32) == 0) {
    2238:	mov.w	r8, r8, lsr #14
    secBuf[i] = 0XFF;
    223c:	movs	r1, #255	; 0xff
  secBuf[0] = 0XF8;
    223e:	strb.w	r3, [r0], #1
    secBuf[i] = 0XFF;
    2242:	bl	7528 <memset>
    if (i % (ns / 32) == 0) {
    2246:	udiv	r3, r7, r8
    224a:	mls	r3, r8, r3, r7
    224e:	cbnz	r3, 225a <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x2fe>
      writeMsg(pr, ".");
    2250:	cbz	r6, 225a <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x2fe>
    2252:	mov	r1, fp
    2254:	mov	r0, r6
    2256:	bl	1e28 <Print::write(char const*) [clone .isra.0]>
    if (!dev->writeSector(sector + i, secBuf)) {
    225a:	ldr	r3, [r5, #0]
    225c:	mov	r2, r4
    225e:	add.w	r1, sl, r7
    2262:	mov	r0, r5
    2264:	ldr	r3, [r3, #32]
    2266:	blx	r3
    2268:	cmp	r0, #0
    226a:	beq.w	2392 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x436>
    if (i == 0) {
    226e:	cbnz	r7, 227c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x320>
      memset(secBuf, 0, BYTES_PER_SECTOR);
    2270:	mov.w	r2, #512	; 0x200
    2274:	mov	r1, r7
    2276:	mov	r0, r4
    2278:	bl	7528 <memset>
  for (uint32_t i = 0; i < ns; i++) {
    227c:	adds	r7, #1
    227e:	cmp	r9, r7
    2280:	bne.n	2246 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x2ea>
  writeMsg(pr, "\r\n");
    2282:	cbz	r6, 228c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x330>
    2284:	ldr	r1, [pc, #280]	; (23a0 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x444>)
    2286:	mov	r0, r6
    2288:	bl	1e28 <Print::write(char const*) [clone .isra.0]>
  bitmapSize = (clusterCount + 7) / 8;
    228c:	ldr	r7, [sp, #12]
  sectorsPerCluster = 1UL << sectorsPerClusterShift;
    228e:	mov.w	r9, #1
    2292:	ldr	r3, [sp, #4]
  bitmapSize = (clusterCount + 7) / 8;
    2294:	adds	r7, #7
  sectorsPerCluster = 1UL << sectorsPerClusterShift;
    2296:	lsl.w	r9, r9, r3
  bitmapSize = (clusterCount + 7) / 8;
    229a:	lsrs	r7, r7, #3
  ns = (bitmapSize + BYTES_PER_SECTOR - 1) / BYTES_PER_SECTOR;
    229c:	addw	r3, r7, #511	; 0x1ff
  if (ns > sectorsPerCluster) {
    22a0:	cmp.w	r9, r3, lsr #9
  ns = (bitmapSize + BYTES_PER_SECTOR - 1) / BYTES_PER_SECTOR;
    22a4:	mov.w	sl, r3, lsr #9
  if (ns > sectorsPerCluster) {
    22a8:	bcc.n	2392 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x436>
  memset(secBuf, 0, BYTES_PER_SECTOR);
    22aa:	mov.w	r2, #512	; 0x200
    22ae:	movs	r1, #0
    22b0:	mov	r0, r4
  for (uint32_t i = 0; i < ns; i++) {
    22b2:	mov.w	r8, #0
  memset(secBuf, 0, BYTES_PER_SECTOR);
    22b6:	bl	7528 <memset>
  secBuf[0] = 0X7;
    22ba:	movs	r3, #7
    22bc:	strb	r3, [r4, #0]
    if (!dev->writeSector(sector + i, secBuf)) {
    22be:	ldr	r3, [r5, #0]
    22c0:	mov	r2, r4
    22c2:	ldr	r1, [sp, #16]
    22c4:	mov	r0, r5
    22c6:	ldr	r3, [r3, #32]
    22c8:	add	r1, r8
    22ca:	blx	r3
    22cc:	cmp	r0, #0
    22ce:	beq.n	2392 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x436>
    if (i == 0) {
    22d0:	cmp.w	r8, #0
    22d4:	bne.n	22da <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x37e>
      secBuf[0] = 0;
    22d6:	strb.w	r8, [r4]
  for (uint32_t i = 0; i < ns; i++) {
    22da:	add.w	r8, r8, #1
    22de:	cmp	sl, r8
    22e0:	bne.n	22be <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x362>
  writeMsg(pr, "Writing upcase table\r\n");
    22e2:	cbz	r6, 22ec <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x390>
    22e4:	ldr	r1, [pc, #188]	; (23a4 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x448>)
    22e6:	mov	r0, r6
    22e8:	bl	1e28 <Print::write(char const*) [clone .isra.0]>
  if (!writeUpcase(partitionOffset + clusterHeapOffset + sectorsPerCluster)) {
    22ec:	ldr	r3, [sp, #16]
    22ee:	ldr	r0, [sp, #8]
    22f0:	add.w	r1, r3, r9
    22f4:	bl	1ed8 <ExFatFormatter::writeUpcase(unsigned long)>
    22f8:	cmp	r0, #0
    22fa:	beq.n	2392 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x436>
  if (m_upcaseSize > BYTES_PER_SECTOR * sectorsPerCluster) {
    22fc:	ldr	r2, [sp, #4]
    22fe:	mov.w	r3, #512	; 0x200
    2302:	lsls	r3, r2
    2304:	ldr	r2, [sp, #8]
    2306:	ldr	r2, [r2, #8]
    2308:	cmp	r2, r3
    230a:	bhi.n	2392 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x436>
  writeMsg(pr, "Writing root\r\n");
    230c:	cbz	r6, 2316 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x3ba>
    230e:	ldr	r1, [pc, #152]	; (23a8 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x44c>)
    2310:	mov	r0, r6
    2312:	bl	1e28 <Print::write(char const*) [clone .isra.0]>
  sector = partitionOffset + clusterHeapOffset + 2 * sectorsPerCluster;
    2316:	ldr	r3, [sp, #4]
    2318:	mov.w	sl, #2
  memset(secBuf, 0, BYTES_PER_SECTOR);
    231c:	mov.w	r2, #512	; 0x200
    2320:	movs	r1, #0
  sector = partitionOffset + clusterHeapOffset + 2 * sectorsPerCluster;
    2322:	lsl.w	r8, sl, r3
    2326:	ldr	r3, [sp, #16]
  memset(secBuf, 0, BYTES_PER_SECTOR);
    2328:	mov	r0, r4
  sector = partitionOffset + clusterHeapOffset + 2 * sectorsPerCluster;
    232a:	add	r8, r3
  memset(secBuf, 0, BYTES_PER_SECTOR);
    232c:	bl	7528 <memset>
  dup->type = EXFAT_TYPE_UPCASE;
    2330:	movs	r1, #130	; 0x82
  label->type = EXFAT_TYPE_LABEL & 0X7F;
    2332:	movs	r2, #3
  dbm->type = EXFAT_TYPE_BITMAP;
    2334:	movs	r3, #129	; 0x81
    2336:	str.w	sl, [r4, #52]	; 0x34
  dup->type = EXFAT_TYPE_UPCASE;
    233a:	strb.w	r1, [r4, #64]	; 0x40
  setLe32(dup->checksum, m_upcaseChecksum);
    233e:	ldr	r1, [sp, #8]
  label->type = EXFAT_TYPE_LABEL & 0X7F;
    2340:	strb	r2, [r4, #0]
  dbm->type = EXFAT_TYPE_BITMAP;
    2342:	strb.w	r3, [r4, #32]
  setLe64(dbm->size, bitmapSize);
    2346:	movs	r3, #0
  setLe32(dup->checksum, m_upcaseChecksum);
    2348:	ldr	r1, [r1, #4]
    234a:	str	r2, [r4, #84]	; 0x54
  setLe64(dup->size, m_upcaseSize);
    234c:	ldr	r2, [sp, #8]
  setLe64(dbm->size, bitmapSize);
    234e:	str	r7, [r4, #56]	; 0x38
  for (uint32_t i = 0; i < ns; i++) {
    2350:	mov	r7, r3
    2352:	str	r1, [r4, #68]	; 0x44
  setLe64(dup->size, m_upcaseSize);
    2354:	ldr	r2, [r2, #8]
    2356:	strd	r2, r3, [r4, #88]	; 0x58
    if (!dev->writeSector(sector + i, secBuf)) {
    235a:	ldr	r3, [r5, #0]
    235c:	mov	r2, r4
    235e:	add.w	r1, r8, r7
    2362:	mov	r0, r5
    2364:	ldr	r3, [r3, #32]
    2366:	blx	r3
    2368:	mov	sl, r0
    236a:	cbz	r0, 2392 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x436>
    if (i == 0) {
    236c:	cbnz	r7, 237a <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x41e>
      memset(secBuf, 0, BYTES_PER_SECTOR);
    236e:	mov.w	r2, #512	; 0x200
    2372:	mov	r1, r7
    2374:	mov	r0, r4
    2376:	bl	7528 <memset>
  for (uint32_t i = 0; i < ns; i++) {
    237a:	adds	r7, #1
    237c:	cmp	r9, r7
    237e:	bne.n	235a <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x3fe>
  writeMsg(pr, "Format done\r\n");
    2380:	cbz	r6, 238a <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x42e>
    2382:	ldr	r1, [pc, #40]	; (23ac <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x450>)
    2384:	mov	r0, r6
    2386:	bl	1e28 <Print::write(char const*) [clone .isra.0]>
}
    238a:	mov	r0, sl
    238c:	add	sp, #36	; 0x24
    238e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  writeMsg(pr, "Format failed\r\n");
    2392:	cmp	r6, #0
    2394:	bne.w	1f8e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x32>
    2398:	b.n	1f80 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x24>
    239a:	nop
    239c:	.word	0x200011ad
    23a0:	.word	0x20001162
    23a4:	.word	0x200011ba
    23a8:	.word	0x200011d1
    23ac:	.word	0x200011e0
    23b0:	.word	0x20001459

000023b4 <ExFatFile::cmpName(DirName_t const*, ExName_t*)>:
  hash = ((hash << 15) | (hash >> 1)) + (c & 0XFF);
  hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
  return hash;
}
//------------------------------------------------------------------------------
bool ExFatFile::cmpName(const DirName_t* dirName, ExName_t* fname) {
    23b4:	push	{r4, r5, r6, lr}
  const char* next;
  /** Position one beyond last LFN character. */
  const char* end;
#if !USE_UTF8_LONG_NAMES
  /** \return true if at end. */
  bool atEnd() { return next == end; }
    23b6:	ldr	r5, [r2, #8]
    23b8:	add.w	r4, r1, #30
    23bc:	ldr	r3, [r2, #4]
  return *reinterpret_cast<const uint16_t*>(src);
    23be:	ldrh.w	r0, [r1, #2]!
  for (uint8_t i = 0; i < 15; i++) {
    uint16_t u = getLe16(dirName->unicode + 2 * i);
    if (fname->atEnd()) {
    23c2:	cmp	r5, r3
    23c4:	bne.n	23ce <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x1a>
      return u == 0;
    23c6:	clz	r0, r0
    23ca:	lsrs	r0, r0, #5
      return false;
    }
#endif  // USE_UTF8_LONG_NAMES
  }
  return true;
}
    23cc:	pop	{r4, r5, r6, pc}
  /** Reset to start of LFN. */
  void reset() { next = begin; }
  /** \return next char of LFN. */
  char getch() { return atEnd() ? 0 : *next++; }
    23ce:	adds	r6, r3, #1
    if (u >= 0x7F || toUpper(c) != toUpper(u)) {
    23d0:	cmp	r0, #126	; 0x7e
    23d2:	str	r6, [r2, #4]
    23d4:	ldrb	r3, [r3, #0]
    23d6:	bhi.n	23fe <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x4a>
static char toUpper(char c) { return 'a' <= c && c <= 'z' ? c - 'a' + 'A' : c; }
    23d8:	sub.w	r6, r3, #97	; 0x61
    if (u >= 0x7F || toUpper(c) != toUpper(u)) {
    23dc:	uxtb	r0, r0
static char toUpper(char c) { return 'a' <= c && c <= 'z' ? c - 'a' + 'A' : c; }
    23de:	cmp	r6, #25
    23e0:	sub.w	r6, r0, #97	; 0x61
    23e4:	itt	ls
    23e6:	subls	r3, #32
    23e8:	uxtbls	r3, r3
    23ea:	cmp	r6, #25
    23ec:	itt	ls
    23ee:	subls	r0, #32
    23f0:	uxtbls	r0, r0
    if (u >= 0x7F || toUpper(c) != toUpper(u)) {
    23f2:	cmp	r0, r3
    23f4:	bne.n	23fe <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x4a>
  for (uint8_t i = 0; i < 15; i++) {
    23f6:	cmp	r1, r4
    23f8:	bne.n	23bc <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x8>
  return true;
    23fa:	movs	r0, #1
    23fc:	b.n	23cc <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x18>
      return false;
    23fe:	movs	r0, #0
    2400:	b.n	23cc <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x18>

00002402 <ExFatFile::getName7(char*, unsigned int)>:
//------------------------------------------------------------------------------
size_t ExFatFile::getName7(char* name, size_t count) {
    2402:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  DirName_t* dn;
  size_t n = 0;
  if (!isOpen()) {
    2406:	ldrb.w	r3, [r0, #49]	; 0x31
size_t ExFatFile::getName7(char* name, size_t count) {
    240a:	mov	r8, r0
    240c:	mov	r7, r1
    240e:	mov	r9, r2
  if (!isOpen()) {
    2410:	cbz	r3, 2464 <ExFatFile::getName7(char*, unsigned int)+0x62>
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t is = 2; is <= m_setCount; is++) {
    2412:	movs	r5, #2
  size_t n = 0;
    2414:	movs	r4, #0
  for (uint8_t is = 2; is <= m_setCount; is++) {
    2416:	ldrb.w	r3, [r8, #48]	; 0x30
    241a:	cmp	r3, r5
    241c:	bcs.n	2428 <ExFatFile::getName7(char*, unsigned int)+0x26>
      }
      name[n++] = c < 0X7F ? c : '?';
    }
  }
done:
  name[n] = 0;
    241e:	movs	r3, #0
    2420:	strb	r3, [r7, r4]
  return n;

fail:
  *name = 0;
  return 0;
}
    2422:	mov	r0, r4
    2424:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    dn = reinterpret_cast<DirName_t*>(dirCache(is, FsCache::CACHE_FOR_READ));
    2428:	movs	r2, #0
    242a:	mov	r1, r5
    242c:	mov	r0, r8
    242e:	bl	24b8 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
    2432:	mov	r3, r0
    2434:	cbz	r0, 2464 <ExFatFile::getName7(char*, unsigned int)+0x62>
    2436:	ldrb	r2, [r0, #0]
    2438:	cmp	r2, #193	; 0xc1
    243a:	bne.n	2464 <ExFatFile::getName7(char*, unsigned int)+0x62>
    243c:	adds	r2, r7, r4
    243e:	add.w	r1, r0, #30
    2442:	ldrh.w	r6, [r3, #2]!
      if (c == 0) {
    2446:	cmp	r6, #0
    2448:	beq.n	241e <ExFatFile::getName7(char*, unsigned int)+0x1c>
      if ((n + 1) >= count) {
    244a:	adds	r4, #1
    244c:	cmp	r4, r9
    244e:	bcs.n	2464 <ExFatFile::getName7(char*, unsigned int)+0x62>
      name[n++] = c < 0X7F ? c : '?';
    2450:	cmp	r6, #127	; 0x7f
    2452:	it	cs
    2454:	movcs	r6, #63	; 0x3f
    for (uint8_t in = 0; in < 15; in++) {
    2456:	cmp	r3, r1
      name[n++] = c < 0X7F ? c : '?';
    2458:	strb.w	r6, [r2], #1
    for (uint8_t in = 0; in < 15; in++) {
    245c:	bne.n	2442 <ExFatFile::getName7(char*, unsigned int)+0x40>
  for (uint8_t is = 2; is <= m_setCount; is++) {
    245e:	adds	r5, #1
    2460:	uxtb	r5, r5
    2462:	b.n	2416 <ExFatFile::getName7(char*, unsigned int)+0x14>
  *name = 0;
    2464:	movs	r4, #0
    2466:	strb	r4, [r7, #0]
  return 0;
    2468:	b.n	2422 <ExFatFile::getName7(char*, unsigned int)+0x20>

0000246a <ExFatFile::hashName(ExName_t*)>:
fail:
  *name = 0;
  return 0;
}
//------------------------------------------------------------------------------
bool ExFatFile::hashName(ExName_t* fname) {
    246a:	push	{r4, r5, lr}
  bool atEnd() { return next == end; }
    246c:	ldr	r0, [r1, #8]
  uint16_t hash = 0;
    246e:	movs	r2, #0
  void reset() { next = begin; }
    2470:	ldr	r5, [r1, #0]
    2472:	str	r5, [r1, #4]
  bool atEnd() { return next == end; }
    2474:	ldr	r3, [r1, #4]
    }
    hash = exFatHash(u, hash);
    fname->nameLength++;
  }
#else   // USE_UTF8_LONG_NAMES
  while (!fname->atEnd()) {
    2476:	cmp	r3, r0
    2478:	bne.n	248c <ExFatFile::hashName(ExName_t*)+0x22>
    // Convert to byte for smaller exFatHash.
    char c = fname->getch();
    hash = exFatHash(c, hash);
  }
  fname->nameLength = fname->end - fname->begin;
    247a:	subs	r0, r0, r5
#endif  // USE_UTF8_LONG_NAMES
  fname->nameHash = hash;
    247c:	strh	r2, [r1, #16]
  fname->nameLength = fname->end - fname->begin;
    247e:	str	r0, [r1, #12]
  if (!fname->nameLength || fname->nameLength > EXFAT_MAX_NAME_LENGTH) {
    2480:	subs	r0, #1
  }
  return true;

fail:
  return false;
}
    2482:	cmp	r0, #254	; 0xfe
    2484:	ite	hi
    2486:	movhi	r0, #0
    2488:	movls	r0, #1
    248a:	pop	{r4, r5, pc}
  char getch() { return atEnd() ? 0 : *next++; }
    248c:	adds	r4, r3, #1
    248e:	str	r4, [r1, #4]
    2490:	ldrb	r4, [r3, #0]
static char toUpper(char c) { return 'a' <= c && c <= 'z' ? c - 'a' + 'A' : c; }
    2492:	sub.w	r3, r4, #97	; 0x61
    2496:	cmp	r3, #25
  hash = ((hash << 15) | (hash >> 1)) + u;
    2498:	mov.w	r3, r2, lsl #15
static char toUpper(char c) { return 'a' <= c && c <= 'z' ? c - 'a' + 'A' : c; }
    249c:	it	ls
    249e:	subls	r4, #32
  hash = ((hash << 15) | (hash >> 1)) + u;
    24a0:	orr.w	r3, r3, r2, lsr #1
static char toUpper(char c) { return 'a' <= c && c <= 'z' ? c - 'a' + 'A' : c; }
    24a4:	it	ls
    24a6:	uxtbls	r4, r4
  hash = ((hash << 15) | (hash >> 1)) + u;
    24a8:	add	r3, r4
  hash = ((hash << 15) | (hash >> 1));
    24aa:	ubfx	r2, r3, #1, #15
    24ae:	lsls	r3, r3, #15
    24b0:	and.w	r3, r3, #32768	; 0x8000
    24b4:	orrs	r2, r3
  return hash;
    24b6:	b.n	2474 <ExFatFile::hashName(ExName_t*)+0xa>

000024b8 <ExFatFile::dirCache(unsigned char, unsigned char)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    24b8:	push	{r4, r5, r6, r7, lr}
  DirPos_t pos = m_dirPos;
    24ba:	add.w	r3, r0, #36	; 0x24
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    24be:	sub	sp, #20
    24c0:	mov	r4, r0
    24c2:	mov	r7, r1
  DirPos_t pos = m_dirPos;
    24c4:	add	r5, sp, #4
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    24c6:	mov	r6, r2
  DirPos_t pos = m_dirPos;
    24c8:	ldmia.w	r3, {r0, r1, r2}
    24cc:	stmia.w	r5, {r0, r1, r2}
  if (m_vol->dirSeek(&pos, FS_DIR_SIZE * set) != 1) {
    24d0:	lsls	r2, r7, #5
    24d2:	mov	r1, r5
    24d4:	ldr	r0, [r4, #32]
    24d6:	bl	2eae <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    24da:	cmp	r0, #1
    24dc:	bne.n	24ec <ExFatFile::dirCache(unsigned char, unsigned char)+0x34>
    return nullptr;
  }
  return m_vol->dirCache(&pos, options);
    24de:	mov	r2, r6
    24e0:	mov	r1, r5
    24e2:	ldr	r0, [r4, #32]
    24e4:	bl	2e14 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
}
    24e8:	add	sp, #20
    24ea:	pop	{r4, r5, r6, r7, pc}
    return nullptr;
    24ec:	movs	r0, #0
    24ee:	b.n	24e8 <ExFatFile::dirCache(unsigned char, unsigned char)+0x30>

000024f0 <ExFatFile::close()>:
//------------------------------------------------------------------------------
bool ExFatFile::close() {
    24f0:	push	{r4, lr}
    24f2:	mov	r4, r0
  bool rtn = sync();
    24f4:	bl	3388 <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    24f8:	movs	r3, #0
    24fa:	strb.w	r3, [r4, #49]	; 0x31
  m_flags = 0;
    24fe:	strb.w	r3, [r4, #51]	; 0x33
  return rtn;
}
    2502:	pop	{r4, pc}

00002504 <ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::getCreateDateTime(uint16_t* pdate, uint16_t* ptime) {
    2504:	push	{r3, r4, r5, lr}
    2506:	mov	r5, r1
    2508:	mov	r4, r2
  DirFile_t* df = reinterpret_cast<DirFile_t*>(
      m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_READ));
    250a:	add.w	r1, r0, #36	; 0x24
    250e:	movs	r2, #0
    2510:	ldr	r0, [r0, #32]
    2512:	bl	2e14 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    2516:	cbz	r0, 2522 <ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)+0x1e>
    2518:	ldrh	r3, [r0, #10]
    DBG_FAIL_MACRO;
    goto fail;
  }
  *pdate = getLe16(df->createDate);
    251a:	strh	r3, [r5, #0]
    251c:	ldrh	r3, [r0, #8]
  *ptime = getLe16(df->createTime);
  return true;
    251e:	movs	r0, #1
  *ptime = getLe16(df->createTime);
    2520:	strh	r3, [r4, #0]

fail:
  return false;
}
    2522:	pop	{r3, r4, r5, pc}

00002524 <ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)>:
//------------------------------------------------------------------------------
bool ExFatFile::getModifyDateTime(uint16_t* pdate, uint16_t* ptime) {
    2524:	push	{r3, r4, r5, lr}
    2526:	mov	r5, r1
    2528:	mov	r4, r2
  DirFile_t* df = reinterpret_cast<DirFile_t*>(
      m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_READ));
    252a:	add.w	r1, r0, #36	; 0x24
    252e:	movs	r2, #0
    2530:	ldr	r0, [r0, #32]
    2532:	bl	2e14 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    2536:	cbz	r0, 2542 <ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)+0x1e>
    2538:	ldrh	r3, [r0, #14]
    DBG_FAIL_MACRO;
    goto fail;
  }
  *pdate = getLe16(df->modifyDate);
    253a:	strh	r3, [r5, #0]
    253c:	ldrh	r3, [r0, #12]
  *ptime = getLe16(df->modifyTime);
  return true;
    253e:	movs	r0, #1
  *ptime = getLe16(df->modifyTime);
    2540:	strh	r3, [r4, #0]

fail:
  return false;
}
    2542:	pop	{r3, r4, r5, pc}

00002544 <ExFatFile::openRoot(ExFatVolume*)>:
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRoot(ExFatVolume* vol) {
    2544:	push	{r3, r4, r5, lr}
    2546:	mov	r5, r1
  if (isOpen()) {
    2548:	ldrb.w	r1, [r0, #49]	; 0x31
bool ExFatFile::openRoot(ExFatVolume* vol) {
    254c:	mov	r4, r0
  if (isOpen()) {
    254e:	cbnz	r1, 2566 <ExFatFile::openRoot(ExFatVolume*)+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    2550:	movs	r2, #56	; 0x38
    2552:	bl	7528 <memset>
  m_attributes = FILE_ATTR_ROOT;
    2556:	movs	r3, #64	; 0x40
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    2558:	movs	r0, #1
  m_vol = vol;
    255a:	str	r5, [r4, #32]
  m_attributes = FILE_ATTR_ROOT;
    255c:	strb.w	r3, [r4, #49]	; 0x31
  m_flags = FILE_FLAG_READ;
    2560:	strb.w	r0, [r4, #51]	; 0x33
  return true;

fail:
  return false;
}
    2564:	pop	{r3, r4, r5, pc}
  return false;
    2566:	movs	r0, #0
    2568:	b.n	2564 <ExFatFile::openRoot(ExFatVolume*)+0x20>
	...

0000256c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>:
//------------------------------------------------------------------------------
bool ExFatFile::parsePathName(const char* path, ExName_t* fname,
                              const char** ptr) {
    256c:	push	{r4, r5, r6, r7}
  // Skip leading spaces.
  while (*path == ' ') {
    256e:	mov	r5, r1
    2570:	ldrb.w	r4, [r1], #1
    2574:	cmp	r4, #32
    2576:	beq.n	256e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x2>
    path++;
  }
  fname->begin = path;
    2578:	ldr	r7, [pc, #112]	; (25ec <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x80>)
    257a:	str	r5, [r2, #0]
  fname->end = path;
    257c:	str	r5, [r2, #8]
  while (*path && !isDirSeparator(*path)) {
    257e:	mov	r6, r5
    2580:	ldrb.w	r4, [r6], #1
    2584:	cbz	r4, 258a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x1e>
    2586:	cmp	r4, #47	; 0x2f
    2588:	bne.n	25a2 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x36>
    258a:	mov	r4, r5
      // Need to trim trailing dots spaces.
      fname->end = path;
    }
  }
  // Advance to next path component.
  for (; *path == ' ' || isDirSeparator(*path); path++) {
    258c:	ldrb.w	r1, [r5], #1
    2590:	cmp	r1, #32
    2592:	beq.n	258a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x1e>
    2594:	cmp	r1, #47	; 0x2f
    2596:	beq.n	258a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x1e>
  }
  *ptr = path;
    2598:	str	r4, [r3, #0]
  return hashName(fname);
    259a:	mov	r1, r2

fail:
  return false;
}
    259c:	pop	{r4, r5, r6, r7}
  return hashName(fname);
    259e:	b.w	246a <ExFatFile::hashName(ExName_t*)>
  return !(lfnReservedChar(c) || c & 0X80);
    25a2:	cmp	r4, #60	; 0x3c
    25a4:	bhi.n	25d6 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x6a>
    25a6:	cmp	r4, #33	; 0x21
    25a8:	bhi.n	25c2 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x56>
    25aa:	subs	r1, r4, #1
    25ac:	cmp	r1, #30
    25ae:	bls.n	25d0 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x64>
    25b0:	lsls	r1, r4, #24
    25b2:	bmi.n	25d0 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x64>
    if (c != '.' && c != ' ') {
    25b4:	cmp	r4, #46	; 0x2e
    25b6:	beq.n	25be <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x52>
    25b8:	cmp	r4, #32
      fname->end = path;
    25ba:	it	ne
    25bc:	strne	r6, [r2, #8]
                              const char** ptr) {
    25be:	mov	r5, r6
    25c0:	b.n	257e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x12>
    25c2:	sub.w	r1, r4, #34	; 0x22
    25c6:	uxtb	r1, r1
    25c8:	lsr.w	r1, r7, r1
    25cc:	lsls	r5, r1, #31
    25ce:	bpl.n	25b0 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x44>
}
    25d0:	movs	r0, #0
    25d2:	pop	{r4, r5, r6, r7}
    25d4:	bx	lr
    25d6:	cmp	r4, #92	; 0x5c
    25d8:	beq.n	25d0 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x64>
    25da:	bhi.n	25e4 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x78>
    25dc:	sub.w	r1, r4, #62	; 0x3e
    25e0:	cmp	r1, #1
    25e2:	b.n	25ae <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x42>
    25e4:	cmp	r4, #124	; 0x7c
    25e6:	beq.n	25d0 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x64>
    25e8:	b.n	25b0 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x44>
    25ea:	nop
    25ec:	.word	0x05002101

000025f0 <ExFatFile::read(void*, unsigned int)>:
  m_curPosition = saveCurPosition;
  m_curCluster = saveCurCluster;
  return c;
}
//------------------------------------------------------------------------------
int ExFatFile::read(void* buf, size_t count) {
    25f0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    25f4:	vpush	{d8}
  bool isReadable() const { return m_flags & FILE_FLAG_READ; }
    25f8:	ldrb.w	r3, [r0, #51]	; 0x33
    25fc:	sub	sp, #12
    25fe:	mov	r4, r0
    2600:	mov	r9, r1
  uint8_t* cache;
  uint16_t sectorOffset;
  uint32_t sector;
  uint32_t clusterOffset;

  if (!isReadable()) {
    2602:	lsls	r5, r3, #31
int ExFatFile::read(void* buf, size_t count) {
    2604:	mov	r6, r2
  if (!isReadable()) {
    2606:	bpl.n	26d0 <ExFatFile::read(void*, unsigned int)+0xe0>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isContiguous() || isFile()) {
    2608:	lsls	r0, r3, #25
    260a:	bmi.n	2614 <ExFatFile::read(void*, unsigned int)+0x24>
    260c:	ldrb.w	r3, [r4, #49]	; 0x31
    2610:	lsls	r1, r3, #28
    2612:	bpl.n	262c <ExFatFile::read(void*, unsigned int)+0x3c>
    if ((m_curPosition + count) > m_validLength) {
    2614:	ldrd	r2, r3, [r4]
    2618:	ldrd	r1, r0, [r4, #16]
    261c:	adds	r5, r6, r2
    261e:	adc.w	r3, r3, #0
    2622:	cmp	r1, r5
    2624:	sbcs.w	r3, r0, r3
    2628:	bcs.n	262c <ExFatFile::read(void*, unsigned int)+0x3c>
      count = toRead = m_validLength - m_curPosition;
    262a:	subs	r6, r1, r2
        m_curCluster =
            isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
      } else if (isContiguous()) {
        m_curCluster++;
      } else {
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    262c:	add.w	r3, r4, #24
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    2630:	mov	r8, r6
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    2632:	vmov	s16, r3
    2636:	b.n	271c <ExFatFile::read(void*, unsigned int)+0x12c>
    clusterOffset = m_curPosition & m_vol->clusterMask();
    2638:	ldr	r0, [r4, #32]
    263a:	ldrd	r3, r2, [r4]
    263e:	ldr.w	r7, [r0, #1080]	; 0x438
    2642:	ands	r7, r3
    sectorOffset = clusterOffset & m_vol->sectorMask();
    2644:	ubfx	sl, r7, #0, #9
    if (clusterOffset == 0) {
    2648:	cbnz	r7, 265e <ExFatFile::read(void*, unsigned int)+0x6e>
      if (m_curPosition == 0) {
    264a:	orrs	r3, r2
    264c:	bne.n	26a8 <ExFatFile::read(void*, unsigned int)+0xb8>
            isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
    264e:	ldrb.w	r3, [r4, #49]	; 0x31
    2652:	lsls	r2, r3, #25
   *
   * \return true if busy else false.
   */
  bool isBusy() { return m_blockDev->isBusy(); }
  /** \return the root directory start cluster number. */
  uint32_t rootDirectoryCluster() const { return m_rootDirectoryCluster; }
    2654:	ite	mi
    2656:	ldrmi.w	r3, [r0, #1076]	; 0x434
    265a:	ldrpl	r3, [r4, #28]
        m_curCluster =
    265c:	str	r3, [r4, #24]
    sector = m_vol->clusterStartSector(m_curCluster) +
    265e:	ldr.w	fp, [r4, #32]
             (clusterOffset >> m_vol->bytesPerSectorShift());
    2662:	lsrs	r0, r7, #9
  bool dataCacheSync() { return m_dataCache.sync(); }
  //----------------------------------------------------------------------------
  uint32_t clusterMask() const { return m_clusterMask; }
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    2664:	ldr	r2, [r4, #24]
    2666:	ldrb.w	r1, [fp, #1093]	; 0x445
    266a:	subs	r5, r2, #2
    sector = m_vol->clusterStartSector(m_curCluster) +
    266c:	ldr.w	r2, [fp, #1068]	; 0x42c
    2670:	lsls	r5, r1
    2672:	add.w	r5, r5, r7, lsr #9
    2676:	add	r5, r2
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector() ||
    2678:	cmp.w	sl, #0
    267c:	bne.n	26e2 <ExFatFile::read(void*, unsigned int)+0xf2>
    267e:	cmp.w	r8, #512	; 0x200
    2682:	bcc.n	26e2 <ExFatFile::read(void*, unsigned int)+0xf2>
   * \param[in] option mode for cached sector.
   * \return Address of cached sector.
   */
  uint8_t* prepare(uint32_t sector, uint8_t option);
  /** \return Logical sector number for cached sector. */
  uint32_t sector() { return m_sector; }
    2684:	ldr.w	r2, [fp, #536]	; 0x218
    2688:	cmp	r5, r2
    268a:	beq.n	26e2 <ExFatFile::read(void*, unsigned int)+0xf2>
    } else if (toRead >= 2 * m_vol->bytesPerSector()) {
    268c:	cmp.w	r8, #1024	; 0x400
    2690:	bcs.n	2730 <ExFatFile::read(void*, unsigned int)+0x140>
    return m_blockDev->readSector(sector, dst);
    2692:	ldr.w	r0, [fp, #532]	; 0x214
    2696:	mov	r2, r9
    2698:	mov	r1, r5
    269a:	ldr	r3, [r0, #0]
    269c:	ldr	r3, [r3, #16]
    269e:	blx	r3
      if (!m_vol->cacheSafeRead(sector, dst)) {
    26a0:	cbz	r0, 26d0 <ExFatFile::read(void*, unsigned int)+0xe0>
      n = m_vol->bytesPerSector();
    26a2:	mov.w	r7, #512	; 0x200
    26a6:	b.n	2708 <ExFatFile::read(void*, unsigned int)+0x118>
      } else if (isContiguous()) {
    26a8:	ldrb.w	r3, [r4, #51]	; 0x33
        m_curCluster++;
    26ac:	ldr	r1, [r4, #24]
      } else if (isContiguous()) {
    26ae:	lsls	r3, r3, #25
    26b0:	bpl.n	26b8 <ExFatFile::read(void*, unsigned int)+0xc8>
        m_curCluster++;
    26b2:	adds	r1, #1
    26b4:	str	r1, [r4, #24]
    26b6:	b.n	265e <ExFatFile::read(void*, unsigned int)+0x6e>
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    26b8:	vmov	r2, s16
    26bc:	bl	2e48 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
        if (fg < 0) {
    26c0:	cmp	r0, #0
    26c2:	blt.n	26d0 <ExFatFile::read(void*, unsigned int)+0xe0>
        if (fg == 0) {
    26c4:	bne.n	265e <ExFatFile::read(void*, unsigned int)+0x6e>
          if (isDir()) {
    26c6:	ldrb.w	r3, [r4, #49]	; 0x31
    26ca:	tst.w	r3, #80	; 0x50
    26ce:	bne.n	2722 <ExFatFile::read(void*, unsigned int)+0x132>
    toRead -= n;
  }
  return count - toRead;

fail:
  m_error |= READ_ERROR;
    26d0:	ldrb.w	r3, [r4, #50]	; 0x32
  return -1;
    26d4:	mov.w	r0, #4294967295
  m_error |= READ_ERROR;
    26d8:	orr.w	r3, r3, #2
    26dc:	strb.w	r3, [r4, #50]	; 0x32
  return -1;
    26e0:	b.n	2726 <ExFatFile::read(void*, unsigned int)+0x136>
      n = m_vol->bytesPerSector() - sectorOffset;
    26e2:	rsb	r7, sl, #512	; 0x200
    return m_dataCache.prepare(sector, option);
    26e6:	movs	r2, #0
    26e8:	mov	r1, r5
    26ea:	add.w	r0, fp, #528	; 0x210
    26ee:	cmp	r7, r8
    26f0:	it	cs
    26f2:	movcs	r7, r8
    26f4:	bl	1d0a <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    26f8:	cmp	r0, #0
    26fa:	beq.n	26d0 <ExFatFile::read(void*, unsigned int)+0xe0>
      memcpy(dst, src, n);
    26fc:	add.w	r1, r0, sl
    2700:	mov	r2, r7
    2702:	mov	r0, r9
    2704:	bl	756c <memcpy>
    dst += n;
    2708:	add	r9, r7
    toRead -= n;
    270a:	sub.w	r8, r8, r7
    m_curPosition += n;
    270e:	ldrd	r3, r2, [r4]
    2712:	adds	r3, r3, r7
    2714:	adc.w	r2, r2, #0
    2718:	strd	r3, r2, [r4]
  while (toRead) {
    271c:	cmp.w	r8, #0
    2720:	bne.n	2638 <ExFatFile::read(void*, unsigned int)+0x48>
  return count - toRead;
    2722:	sub.w	r0, r6, r8
}
    2726:	add	sp, #12
    2728:	vpop	{d8}
    272c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint32_t sectorsPerCluster() const { return 1UL << m_sectorsPerClusterShift; }
    2730:	movs	r3, #1
    2732:	lsls	r3, r1
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    2734:	mov.w	r1, r8, lsr #9
                       (clusterOffset >> m_vol->bytesPerSectorShift());
    2738:	subs	r3, r3, r0
    273a:	cmp	r3, r1
    273c:	it	cs
    273e:	movcs	r3, r1
    return sector <= m_sector && m_sector < (sector + count);
    2740:	cmp	r5, r2
      n = ns << m_vol->bytesPerSectorShift();
    2742:	mov.w	r7, r3, lsl #9
    2746:	bls.n	275e <ExFatFile::read(void*, unsigned int)+0x16e>
    return m_blockDev->readSectors(sector, dst, count);
    2748:	ldr.w	r0, [fp, #532]	; 0x214
    274c:	mov	r1, r5
    274e:	ldr	r2, [r0, #0]
    2750:	ldr.w	fp, [r2, #20]
    2754:	mov	r2, r9
    2756:	blx	fp
      if (!m_vol->cacheSafeRead(sector, dst, ns)) {
    2758:	cmp	r0, #0
    275a:	bne.n	2708 <ExFatFile::read(void*, unsigned int)+0x118>
    275c:	b.n	26d0 <ExFatFile::read(void*, unsigned int)+0xe0>
    return sector <= m_sector && m_sector < (sector + count);
    275e:	adds	r1, r5, r3
    2760:	cmp	r2, r1
    2762:	bcs.n	2748 <ExFatFile::read(void*, unsigned int)+0x158>
    if (isCached(sector, count) && !sync()) {
    2764:	add.w	r0, fp, #528	; 0x210
    2768:	str	r3, [sp, #4]
    276a:	bl	1cba <FsCache::sync()>
    276e:	ldr	r3, [sp, #4]
    2770:	cmp	r0, #0
    2772:	bne.n	2748 <ExFatFile::read(void*, unsigned int)+0x158>
    2774:	b.n	26d0 <ExFatFile::read(void*, unsigned int)+0xe0>

00002776 <ExFatFile::peek()>:
int ExFatFile::peek() {
    2776:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    return read(&b, 1) == 1 ? b : -1;
    2778:	movs	r2, #1
    277a:	add.w	r1, sp, #7
    277e:	mov	r4, r0
  uint32_t saveCurCluster = m_curCluster;
    2780:	ldr	r5, [r0, #24]
  uint64_t saveCurPosition = m_curPosition;
    2782:	ldrd	r6, r7, [r0]
    2786:	bl	25f0 <ExFatFile::read(void*, unsigned int)>
    278a:	cmp	r0, #1
  m_curCluster = saveCurCluster;
    278c:	str	r5, [r4, #24]
    278e:	ite	eq
    2790:	ldrbeq.w	r0, [sp, #7]
    2794:	movne.w	r0, #4294967295
  m_curPosition = saveCurPosition;
    2798:	strd	r6, r7, [r4]
}
    279c:	add	sp, #12
    279e:	pop	{r4, r5, r6, r7, pc}

000027a0 <ExFatFile::seekSet(unsigned long long)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
    27a0:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  bool isOpen() const { return m_attributes; }
    27a4:	ldrb.w	ip, [r0, #49]	; 0x31
    27a8:	mov	r4, r0
    27aa:	mov	r6, r2
    27ac:	mov	r7, r3
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    27ae:	ldr.w	r8, [r0, #24]
  // error if file not open
  if (!isOpen()) {
    27b2:	cmp.w	ip, #0
    27b6:	beq.n	2870 <ExFatFile::seekSet(unsigned long long)+0xd0>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    27b8:	ldrd	r0, r3, [r0]
    27bc:	cmp	r3, r7
    27be:	it	eq
    27c0:	cmpeq	r0, r2
    27c2:	beq.n	27d2 <ExFatFile::seekSet(unsigned long long)+0x32>
    return true;
  }
  if (pos == 0) {
    27c4:	orrs.w	r2, r6, r7
    27c8:	bne.n	27d6 <ExFatFile::seekSet(unsigned long long)+0x36>
    // set position to start of file
    m_curCluster = 0;
    27ca:	movs	r3, #0
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
  if (isContiguous()) {
    m_curCluster = m_firstCluster + nNew;
    27cc:	str	r3, [r4, #24]
      goto fail;
    }
  }

done:
  m_curPosition = pos;
    27ce:	strd	r6, r7, [r4]
    return true;
    27d2:	movs	r0, #1
    27d4:	b.n	2876 <ExFatFile::seekSet(unsigned long long)+0xd6>
  if (isFile()) {
    27d6:	tst.w	ip, #8
    27da:	beq.n	27e6 <ExFatFile::seekSet(unsigned long long)+0x46>
    if (pos > m_validLength) {
    27dc:	ldrd	r1, r2, [r4, #16]
    27e0:	cmp	r1, r6
    27e2:	sbcs	r2, r7
    27e4:	bcc.n	2870 <ExFatFile::seekSet(unsigned long long)+0xd0>
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    27e6:	ldr.w	lr, [r4, #32]
    27ea:	subs	r5, r6, #1
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    27ec:	ldrb.w	r1, [lr, #1093]	; 0x445
    27f0:	adc.w	sl, r7, #4294967295
    27f4:	adds	r1, #9
    27f6:	uxtb	r1, r1
    27f8:	rsb	r9, r1, #32
    27fc:	sub.w	r2, r1, #32
    2800:	lsrs	r5, r1
    2802:	lsl.w	r9, sl, r9
    2806:	lsr.w	r2, sl, r2
    280a:	sub.w	sl, r1, #32
    280e:	orr.w	r5, r5, r9
    2812:	rsb	r9, r1, #32
    2816:	orrs	r5, r2
  if (isContiguous()) {
    2818:	ldrb.w	r2, [r4, #51]	; 0x33
    281c:	tst.w	r2, #64	; 0x40
    2820:	beq.n	2828 <ExFatFile::seekSet(unsigned long long)+0x88>
    m_curCluster = m_firstCluster + nNew;
    2822:	ldr	r3, [r4, #28]
    2824:	add	r3, r5
    2826:	b.n	27cc <ExFatFile::seekSet(unsigned long long)+0x2c>
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    2828:	adds.w	fp, r0, #4294967295
    282c:	adc.w	r2, r3, #4294967295
    2830:	lsr.w	r1, fp, r1
    2834:	lsl.w	r9, r2, r9
    2838:	lsr.w	r2, r2, sl
    283c:	orr.w	r1, r1, r9
    2840:	orrs	r1, r2
  if (nNew < nCur || m_curPosition == 0) {
    2842:	cmp	r5, r1
    2844:	bcc.n	284a <ExFatFile::seekSet(unsigned long long)+0xaa>
    2846:	orrs	r3, r0
    2848:	bne.n	287a <ExFatFile::seekSet(unsigned long long)+0xda>
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
    284a:	tst.w	ip, #64	; 0x40
  uint32_t rootDirectoryCluster() const { return m_rootDirectoryCluster; }
    284e:	ite	ne
    2850:	ldrne.w	r3, [lr, #1076]	; 0x434
    2854:	ldreq	r3, [r4, #28]
    2856:	str	r3, [r4, #24]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    2858:	add.w	r9, r4, #24
  while (nNew--) {
    285c:	cmp	r5, #0
    285e:	beq.n	27ce <ExFatFile::seekSet(unsigned long long)+0x2e>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    2860:	mov	r2, r9
    2862:	ldr	r1, [r4, #24]
    2864:	ldr	r0, [r4, #32]
    2866:	subs	r5, #1
    2868:	bl	2e48 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    286c:	cmp	r0, #0
    286e:	bgt.n	285c <ExFatFile::seekSet(unsigned long long)+0xbc>
  return true;

fail:
  m_curCluster = tmp;
  return false;
    2870:	movs	r0, #0
  m_curCluster = tmp;
    2872:	str.w	r8, [r4, #24]
}
    2876:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    nNew -= nCur;
    287a:	subs	r5, r5, r1
    287c:	b.n	2858 <ExFatFile::seekSet(unsigned long long)+0xb8>
	...

00002880 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>:
bool ExFatFile::openPrivate(ExFatFile* dir, ExName_t* fname, oflag_t oflag) {
    2880:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2884:	mov	sl, r3
    2886:	ldrb.w	r3, [r0, #49]	; 0x31
    288a:	sub	sp, #52	; 0x34
    288c:	mov	r4, r0
    288e:	mov	r6, r1
    2890:	mov	r5, r2
  if (isOpen() || !dir->isDir()) {
    2892:	cmp	r3, #0
    2894:	bne.n	291e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    2896:	ldrb.w	r3, [r1, #49]	; 0x31
    289a:	tst.w	r3, #80	; 0x50
    289e:	beq.n	291e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
  switch (oflag & O_ACCMODE) {
    28a0:	and.w	r9, sl, #3
    28a4:	cmp.w	r9, #3
    28a8:	beq.n	291e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
    28aa:	add.w	r9, r9, #1
    28ae:	and.w	r3, sl, #8
    28b2:	orr.w	r9, r9, r3
  if (fname) {
    28b6:	cmp	r2, #0
    28b8:	beq.n	292c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xac>
    freeNeed = 2 + (fname->nameLength + 14) / 15;
    28ba:	ldr	r7, [r2, #12]
    28bc:	movs	r3, #15
  void rewind() { seekSet(0); }
    28be:	movs	r2, #0
    28c0:	mov	r0, r1
    28c2:	adds	r7, #14
    28c4:	udiv	r7, r7, r3
    28c8:	adds	r7, #2
    28ca:	movs	r3, #0
    28cc:	uxtb	r7, r7
    28ce:	bl	27a0 <ExFatFile::seekSet(unsigned long long)>
      inSet = false;
    28d2:	mov.w	fp, #0
    28d6:	mov	r8, fp
    n = dir->read(buf, FS_DIR_SIZE);
    28d8:	movs	r2, #32
    28da:	add	r1, sp, #16
    28dc:	mov	r0, r6
    28de:	bl	25f0 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    28e2:	cmp	r0, #0
    28e4:	beq.w	2a76 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1f6>
    if (n != FS_DIR_SIZE) {
    28e8:	cmp	r0, #32
    28ea:	bne.n	291e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    if (!(buf[0] & EXFAT_TYPE_USED)) {
    28ec:	ldrsb.w	r1, [sp, #16]
    28f0:	ldrb.w	r2, [sp, #16]
    28f4:	cmp	r1, #0
    28f6:	blt.n	2936 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb6>
      if (freeCount == 0) {
    28f8:	cmp.w	fp, #0
    28fc:	bne.n	290a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x8a>
        freePos.position = dir->curPosition() - FS_DIR_SIZE;
    28fe:	ldr	r1, [r6, #0]
    2900:	sub.w	r3, r1, #32
    2904:	str	r3, [sp, #4]
  uint32_t curCluster() const { return m_curCluster; }
    2906:	ldr	r3, [r6, #24]
    2908:	str	r3, [sp, #0]
      if (freeCount < freeNeed) {
    290a:	cmp	fp, r7
        freeCount++;
    290c:	itt	cc
    290e:	addcc.w	r3, fp, #1
    2912:	uxtbcc.w	fp, r3
      if (buf[0] == EXFAT_TYPE_END_DIR) {
    2916:	cbnz	r2, 2930 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb0>
        if (fname) {
    2918:	cmp	r5, #0
    291a:	bne.w	2a76 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1f6>
  m_attributes = FILE_ATTR_CLOSED;
    291e:	mov.w	r8, #0
    2922:	strb.w	r8, [r4, #49]	; 0x31
  m_flags = 0;
    2926:	strb.w	r8, [r4, #51]	; 0x33
  return false;
    292a:	b.n	2a0a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x18a>
  uint8_t freeNeed = 3;
    292c:	movs	r7, #3
    292e:	b.n	28d2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x52>
      inSet = false;
    2930:	movs	r0, #0
    2932:	mov	r8, r0
    2934:	b.n	28d8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x58>
    } else if (!inSet) {
    2936:	cmp.w	r8, #0
    293a:	bne.n	298c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x10c>
        freeCount = 0;
    293c:	cmp	fp, r7
    293e:	it	cc
    2940:	movcc.w	fp, #0
      if (buf[0] != EXFAT_TYPE_FILE) {
    2944:	cmp	r2, #133	; 0x85
    2946:	bne.n	2930 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb0>
      memset(this, 0, sizeof(ExFatFile));
    2948:	movs	r2, #56	; 0x38
    294a:	mov	r1, r8
    294c:	mov	r0, r4
    294e:	bl	7528 <memset>
      m_setCount = dirFile->setCount;
    2952:	ldrb.w	r2, [sp, #17]
      m_attributes = getLe16(dirFile->attributes) & FS_ATTRIB_COPY;
    2956:	ldrb.w	r1, [sp, #20]
      inSet = true;
    295a:	movs	r0, #1
      m_setCount = dirFile->setCount;
    295c:	strb.w	r2, [r4, #48]	; 0x30
      m_attributes = getLe16(dirFile->attributes) & FS_ATTRIB_COPY;
    2960:	and.w	r2, r1, #55	; 0x37
      if (!(m_attributes & FS_ATTRIB_DIRECTORY)) {
    2964:	lsls	r1, r1, #27
        m_attributes |= FILE_ATTR_FILE;
    2966:	it	pl
    2968:	orrpl.w	r2, r2, #8
    296c:	strb.w	r2, [r4, #49]	; 0x31
  bool hashName(ExName_t* fname);
  bool mkdir(ExFatFile* parent, ExName_t* fname);

  bool openPrivate(ExFatFile* dir, ExName_t* fname, oflag_t oflag);
  bool parsePathName(const char* path, ExName_t* fname, const char** ptr);
  ExFatVolume* volume() const { return m_vol; }
    2970:	ldr	r2, [r6, #32]
      m_vol = dir->volume();
    2972:	str	r2, [r4, #32]
      m_dirPos.cluster = dir->curCluster();
    2974:	ldr	r2, [r6, #24]
    2976:	str	r2, [r4, #36]	; 0x24
      m_dirPos.position = dir->curPosition() - FS_DIR_SIZE;
    2978:	ldr	r2, [r6, #0]
    297a:	subs	r2, #32
    297c:	str	r2, [r4, #40]	; 0x28
  bool isContiguous() const { return m_flags & FILE_FLAG_CONTIGUOUS; }
    297e:	ldrb.w	r2, [r6, #51]	; 0x33
    2982:	ubfx	r2, r2, #6, #1
      m_dirPos.isContiguous = dir->isContiguous();
    2986:	strb.w	r2, [r4, #44]	; 0x2c
    298a:	b.n	2932 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb2>
    } else if (buf[0] == EXFAT_TYPE_STREAM) {
    298c:	cmp	r2, #192	; 0xc0
    298e:	bne.n	2a34 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1b4>
      if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    2990:	ldrb.w	r2, [sp, #17]
      m_flags = modeFlags;
    2994:	strb.w	r9, [r4, #51]	; 0x33
      if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    2998:	lsls	r3, r2, #30
      m_validLength = getLe64(dirStream->validLength);
    299a:	ldrd	r0, r1, [sp, #24]
        m_flags |= FILE_FLAG_CONTIGUOUS;
    299e:	it	mi
    29a0:	orrmi.w	r2, r9, #64	; 0x40
      m_validLength = getLe64(dirStream->validLength);
    29a4:	strd	r0, r1, [r4, #16]
        m_flags |= FILE_FLAG_CONTIGUOUS;
    29a8:	it	mi
    29aa:	strbmi.w	r2, [r4, #51]	; 0x33
      m_firstCluster = getLe32(dirStream->firstCluster);
    29ae:	ldr	r2, [sp, #36]	; 0x24
      m_dataLength = getLe64(dirStream->dataLength);
    29b0:	ldrd	r0, r1, [sp, #40]	; 0x28
      m_firstCluster = getLe32(dirStream->firstCluster);
    29b4:	str	r2, [r4, #28]
      m_dataLength = getLe64(dirStream->dataLength);
    29b6:	strd	r0, r1, [r4, #8]
      if (!fname) {
    29ba:	cbnz	r5, 2a12 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x192>
  if (oflag & O_EXCL) {
    29bc:	tst.w	sl, #2048	; 0x800
    29c0:	bne.n	291e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
  if ((oflag & (O_TRUNC | O_AT_END)) || (m_flags & FILE_FLAG_WRITE)) {
    29c2:	tst.w	sl, #17408	; 0x4400
    29c6:	bne.n	29d0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x150>
    29c8:	ldrb.w	r3, [r4, #51]	; 0x33
    29cc:	lsls	r5, r3, #30
    29ce:	bpl.n	29dc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x15c>
  bool isSubDir() const { return m_attributes & FILE_ATTR_SUBDIR; }
    29d0:	ldrb.w	r3, [r4, #49]	; 0x31
    if (isSubDir() || isReadOnly() || EXFAT_READ_ONLY) {
    29d4:	lsls	r0, r3, #27
    29d6:	bmi.n	291e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    29d8:	lsls	r1, r3, #31
    29da:	bmi.n	291e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
  if (oflag & O_TRUNC) {
    29dc:	tst.w	sl, #1024	; 0x400
    29e0:	beq.n	2a56 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1d6>
    if (!(m_flags & FILE_FLAG_WRITE)) {
    29e2:	ldrb.w	r3, [r4, #51]	; 0x33
    29e6:	lsls	r2, r3, #30
    29e8:	bpl.n	291e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
  bool truncate(uint64_t length) { return seekSet(length) && truncate(); }
    29ea:	movs	r2, #0
    29ec:	movs	r3, #0
    29ee:	mov	r0, r4
    29f0:	bl	27a0 <ExFatFile::seekSet(unsigned long long)>
    29f4:	cmp	r0, #0
    29f6:	beq.n	291e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    29f8:	mov	r0, r4
    29fa:	bl	3720 <ExFatFile::truncate()>
    29fe:	cmp	r0, #0
    2a00:	beq.n	291e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
  if (isWritable()) {
    2a02:	ldrb.w	r3, [r4, #51]	; 0x33
    2a06:	lsls	r3, r3, #30
    2a08:	bmi.n	2a68 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1e8>
}
    2a0a:	mov	r0, r8
    2a0c:	add	sp, #52	; 0x34
    2a0e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  void reset() { next = begin; }
    2a12:	ldr	r2, [r5, #0]
      if (fname->nameLength != dirStream->nameLength ||
    2a14:	ldr	r1, [r5, #12]
    2a16:	str	r2, [r5, #4]
    2a18:	ldrb.w	r2, [sp, #19]
    2a1c:	cmp	r1, r2
    2a1e:	bne.n	2930 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb0>
    2a20:	ldrh	r0, [r5, #16]
    2a22:	ldrh.w	r2, [sp, #20]
    2a26:	sub.w	ip, r0, r2
    2a2a:	rsbs	r0, ip, #0
    2a2e:	adc.w	r0, r0, ip
    2a32:	b.n	2932 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb2>
    } else if (buf[0] == EXFAT_TYPE_NAME) {
    2a34:	cmp	r2, #193	; 0xc1
    2a36:	bne.w	2930 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb0>
      if (!cmpName(dirName, fname)) {
    2a3a:	mov	r2, r5
    2a3c:	add	r1, sp, #16
    2a3e:	mov	r0, r4
    2a40:	bl	23b4 <ExFatFile::cmpName(DirName_t const*, ExName_t*)>
    2a44:	cmp	r0, #0
    2a46:	beq.w	2932 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb2>
      if (fname->atEnd()) {
    2a4a:	ldrd	r2, r1, [r5, #4]
    2a4e:	cmp	r1, r2
    2a50:	bne.w	2932 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb2>
    2a54:	b.n	29bc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x13c>
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    2a56:	tst.w	sl, #16384	; 0x4000
    2a5a:	beq.n	2a02 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x182>
    2a5c:	mov	r0, r4
    2a5e:	ldrd	r2, r3, [r4, #16]
    2a62:	bl	27a0 <ExFatFile::seekSet(unsigned long long)>
    2a66:	b.n	29fe <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x17e>
    m_attributes |= FS_ATTRIB_ARCHIVE;
    2a68:	ldrb.w	r3, [r4, #49]	; 0x31
    2a6c:	orr.w	r3, r3, #32
    2a70:	strb.w	r3, [r4, #49]	; 0x31
    2a74:	b.n	2a0a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x18a>
  if (!(oflag & O_CREAT) || !(modeFlags & FILE_FLAG_WRITE) || !fname) {
    2a76:	tst.w	sl, #512	; 0x200
    2a7a:	beq.w	291e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    2a7e:	tst.w	r9, #2
    2a82:	beq.w	291e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    2a86:	cmp	r5, #0
    2a88:	beq.w	291e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
  while (freeCount < freeNeed) {
    2a8c:	cmp	fp, r7
    2a8e:	bcc.n	2ada <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x25a>
  memset(this, 0, sizeof(ExFatFile));
    2a90:	movs	r2, #56	; 0x38
    2a92:	movs	r1, #0
    2a94:	mov	r0, r4
  bool isContiguous() const { return m_flags & FILE_FLAG_CONTIGUOUS; }
    2a96:	ldrb.w	r8, [r6, #51]	; 0x33
    2a9a:	bl	7528 <memset>
  ExFatVolume* volume() const { return m_vol; }
    2a9e:	ldr	r3, [r6, #32]
  freePos.isContiguous = dir->isContiguous();
    2aa0:	ubfx	r8, r8, #6, #1
  for (uint8_t i = 0; i < freeNeed; i++) {
    2aa4:	mov.w	sl, #0
  m_vol = dir->volume();
    2aa8:	str	r3, [r4, #32]
  m_attributes = FILE_ATTR_FILE | FS_ATTRIB_ARCHIVE;
    2aaa:	movs	r3, #40	; 0x28
  m_dirPos = freePos;
    2aac:	strb.w	r8, [r4, #44]	; 0x2c
      m_setCount = freeNeed - 1;
    2ab0:	add.w	r8, r7, #4294967295
  m_attributes = FILE_ATTR_FILE | FS_ATTRIB_ARCHIVE;
    2ab4:	strb.w	r3, [r4, #49]	; 0x31
  m_dirPos = freePos;
    2ab8:	ldr	r3, [sp, #0]
      m_setCount = freeNeed - 1;
    2aba:	uxtb.w	r8, r8
  m_dirPos = freePos;
    2abe:	str	r3, [r4, #36]	; 0x24
    2ac0:	ldr	r3, [sp, #4]
    2ac2:	str	r3, [r4, #40]	; 0x28
    2ac4:	ldr	r3, [r5, #0]
    2ac6:	str	r3, [r5, #4]
  for (uint8_t i = 0; i < freeNeed; i++) {
    2ac8:	uxtb.w	fp, sl
    2acc:	cmp	fp, r7
    2ace:	bcc.n	2b1e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x29e>
  return sync();
    2ad0:	mov	r0, r4
    2ad2:	bl	3388 <ExFatFile::sync()>
    2ad6:	mov	r8, r0
    2ad8:	b.n	2a0a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x18a>
    n = dir->read(buf, FS_DIR_SIZE);
    2ada:	movs	r2, #32
    2adc:	add	r1, sp, #16
    2ade:	mov	r0, r6
    2ae0:	bl	25f0 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    2ae4:	cbnz	r0, 2afc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x27c>
      if (!dir->addDirCluster()) {
    2ae6:	mov	r0, r6
      uint32_t saveCurCluster = dir->m_curCluster;
    2ae8:	ldr.w	r8, [r6, #24]
      if (!dir->addDirCluster()) {
    2aec:	bl	33ca <ExFatFile::addDirCluster()>
    2af0:	cmp	r0, #0
    2af2:	beq.w	291e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
      dir->m_curCluster = saveCurCluster;
    2af6:	str.w	r8, [r6, #24]
      continue;
    2afa:	b.n	2a8c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x20c>
    if (n != FS_DIR_SIZE) {
    2afc:	cmp	r0, #32
    2afe:	bne.w	291e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    if (freeCount == 0) {
    2b02:	cmp.w	fp, #0
    2b06:	bne.n	2b14 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x294>
      freePos.position = dir->curPosition() - FS_DIR_SIZE;
    2b08:	ldr	r2, [r6, #0]
    2b0a:	sub.w	r3, r2, #32
    2b0e:	str	r3, [sp, #4]
  uint32_t curCluster() const { return m_curCluster; }
    2b10:	ldr	r3, [r6, #24]
    2b12:	str	r3, [sp, #0]
    freeCount++;
    2b14:	add.w	r3, fp, #1
    2b18:	uxtb.w	fp, r3
    2b1c:	b.n	2a8c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x20c>
    cache = dirCache(i, FsCache::CACHE_FOR_WRITE);
    2b1e:	movs	r2, #1
    2b20:	mov	r1, fp
    2b22:	mov	r0, r4
    2b24:	bl	24b8 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache || (cache[0] & 0x80)) {
    2b28:	mov	r6, r0
    2b2a:	cmp	r0, #0
    2b2c:	beq.w	291e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    2b30:	ldrsb.w	r2, [r0]
    2b34:	cmp	r2, #0
    2b36:	blt.w	291e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    memset(cache, 0, FS_DIR_SIZE);
    2b3a:	movs	r2, #32
    2b3c:	movs	r1, #0
    2b3e:	bl	7528 <memset>
    if (i == 0) {
    2b42:	cmp.w	fp, #0
    2b46:	bne.n	2b8a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x30a>
      dirFile->type = EXFAT_TYPE_FILE;
    2b48:	movs	r3, #133	; 0x85
    2b4a:	strb	r3, [r6, #0]
      if (FsDateTime::callback) {
    2b4c:	ldr	r3, [pc, #124]	; (2bcc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x34c>)
      m_setCount = freeNeed - 1;
    2b4e:	strb.w	r8, [r4, #48]	; 0x30
      dirFile->setCount = m_setCount;
    2b52:	strb.w	r8, [r6, #1]
      if (FsDateTime::callback) {
    2b56:	ldr	r3, [r3, #0]
    2b58:	cbz	r3, 2b7e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2fe>
        FsDateTime::callback(&date, &time, &ms10);
    2b5a:	add.w	r2, sp, #11
    2b5e:	add.w	r1, sp, #14
    2b62:	add	r0, sp, #12
    2b64:	blx	r3
  *reinterpret_cast<uint16_t*>(dst) = src;
    2b66:	ldrh.w	r3, [sp, #12]
    2b6a:	strh	r3, [r6, #10]
    2b6c:	ldrh.w	r3, [sp, #14]
    2b70:	strh	r3, [r6, #8]
        dirFile->createTimeMs = ms10;
    2b72:	ldrb.w	r3, [sp, #11]
    2b76:	strb	r3, [r6, #20]
  for (uint8_t i = 0; i < freeNeed; i++) {
    2b78:	add.w	sl, sl, #1
    2b7c:	b.n	2ac8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x248>
    2b7e:	movw	r3, #22049	; 0x5621
    2b82:	strh	r3, [r6, #10]
    2b84:	strh	r3, [r6, #14]
    2b86:	strh	r3, [r6, #18]
        if (FS_DEFAULT_TIME) {
    2b88:	b.n	2b78 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2f8>
    } else if (i == 1) {
    2b8a:	cmp.w	fp, #1
    2b8e:	bne.n	2baa <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32a>
      m_flags = modeFlags | FILE_FLAG_DIR_DIRTY;
    2b90:	orn	r3, r9, #127	; 0x7f
      dirStream->type = EXFAT_TYPE_STREAM;
    2b94:	movs	r2, #192	; 0xc0
      dirStream->flags = EXFAT_FLAG_ALWAYS1;
    2b96:	strb.w	fp, [r6, #1]
      dirStream->type = EXFAT_TYPE_STREAM;
    2b9a:	strb	r2, [r6, #0]
      m_flags = modeFlags | FILE_FLAG_DIR_DIRTY;
    2b9c:	strb.w	r3, [r4, #51]	; 0x33
      dirStream->nameLength = fname->nameLength;
    2ba0:	ldr	r3, [r5, #12]
    2ba2:	strb	r3, [r6, #3]
      setLe16(dirStream->nameHash, fname->nameHash);
    2ba4:	ldrh	r3, [r5, #16]
    2ba6:	strh	r3, [r6, #4]
}
    2ba8:	b.n	2b78 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2f8>
      dirName->type = EXFAT_TYPE_NAME;
    2baa:	movs	r3, #193	; 0xc1
    2bac:	add.w	r2, r6, #30
    2bb0:	strb	r3, [r6, #0]
  bool atEnd() { return next == end; }
    2bb2:	ldr	r0, [r5, #8]
    2bb4:	ldr	r3, [r5, #4]
        if (fname->atEnd()) {
    2bb6:	cmp	r3, r0
    2bb8:	beq.n	2b78 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2f8>
  /** \return next UTF-16 unit of LFN. */
  uint16_t get16() { return atEnd() ? 0 : *next++; }
    2bba:	adds	r1, r3, #1
    2bbc:	str	r1, [r5, #4]
    2bbe:	ldrb	r3, [r3, #0]
    2bc0:	strh.w	r3, [r6, #2]!
      for (size_t k = 0; k < 15; k++) {
    2bc4:	cmp	r2, r6
    2bc6:	bne.n	2bb4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x334>
    2bc8:	b.n	2b78 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2f8>
    2bca:	nop
    2bcc:	.word	0x200068ac

00002bd0 <ExFatFile::open(ExFatFile*, char const*, int)>:
bool ExFatFile::open(ExFatFile* dirFile, const char* path, oflag_t oflag) {
    2bd0:	push	{r4, r5, r6, r7, lr}
    2bd2:	mov	r7, r3
    2bd4:	sub	sp, #92	; 0x5c
  ExFatFile() {}
    2bd6:	movs	r3, #0
    2bd8:	mov	r5, r0
    2bda:	mov	r4, r1
    2bdc:	str	r2, [sp, #4]
    2bde:	str	r3, [sp, #80]	; 0x50
  if (isOpen() || !dirFile->isDir()) {
    2be0:	ldrb.w	r3, [r0, #49]	; 0x31
    2be4:	cbz	r3, 2bec <ExFatFile::open(ExFatFile*, char const*, int)+0x1c>
  return false;
    2be6:	movs	r0, #0
}
    2be8:	add	sp, #92	; 0x5c
    2bea:	pop	{r4, r5, r6, r7, pc}
  if (isOpen() || !dirFile->isDir()) {
    2bec:	ldrb.w	r1, [r1, #49]	; 0x31
    2bf0:	tst.w	r1, #80	; 0x50
    2bf4:	beq.n	2be6 <ExFatFile::open(ExFatFile*, char const*, int)+0x16>
  if (isDirSeparator(*path)) {
    2bf6:	ldrb	r1, [r2, #0]
    2bf8:	cmp	r1, #47	; 0x2f
    2bfa:	bne.n	2c36 <ExFatFile::open(ExFatFile*, char const*, int)+0x66>
    2bfc:	mov	r0, r2
    while (isDirSeparator(*path)) {
    2bfe:	ldrb.w	r1, [r2], #1
    2c02:	cmp	r1, #47	; 0x2f
    2c04:	beq.n	2c18 <ExFatFile::open(ExFatFile*, char const*, int)+0x48>
    2c06:	cbz	r3, 2c0a <ExFatFile::open(ExFatFile*, char const*, int)+0x3a>
    2c08:	str	r0, [sp, #4]
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    2c0a:	ldr	r4, [r4, #32]
    if (*path == 0) {
    2c0c:	cbnz	r1, 2c1c <ExFatFile::open(ExFatFile*, char const*, int)+0x4c>
      return openRoot(dirFile->m_vol);
    2c0e:	mov	r1, r4
    2c10:	mov	r0, r5
    2c12:	bl	2544 <ExFatFile::openRoot(ExFatVolume*)>
    2c16:	b.n	2be8 <ExFatFile::open(ExFatFile*, char const*, int)+0x18>
    2c18:	movs	r3, #1
    2c1a:	b.n	2bfc <ExFatFile::open(ExFatFile*, char const*, int)+0x2c>
  memset(this, 0, sizeof(ExFatFile));
    2c1c:	movs	r2, #56	; 0x38
    2c1e:	movs	r1, #0
    2c20:	add	r0, sp, #32
    2c22:	bl	7528 <memset>
  m_attributes = FILE_ATTR_ROOT;
    2c26:	movs	r3, #64	; 0x40
  m_vol = vol;
    2c28:	str	r4, [sp, #64]	; 0x40
    dirFile = &tmpDir;
    2c2a:	add	r4, sp, #32
  m_attributes = FILE_ATTR_ROOT;
    2c2c:	strb.w	r3, [sp, #81]	; 0x51
  m_flags = FILE_FLAG_READ;
    2c30:	movs	r3, #1
    2c32:	strb.w	r3, [sp, #83]	; 0x53
    if (!parsePathName(path, &fname, &path)) {
    2c36:	add	r3, sp, #4
    2c38:	add	r2, sp, #12
    2c3a:	ldr	r1, [sp, #4]
    2c3c:	mov	r0, r5
    2c3e:	bl	256c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    2c42:	cmp	r0, #0
    2c44:	beq.n	2be6 <ExFatFile::open(ExFatFile*, char const*, int)+0x16>
    if (*path == 0) {
    2c46:	ldr	r3, [sp, #4]
    2c48:	ldrb	r3, [r3, #0]
    2c4a:	cbz	r3, 2c84 <ExFatFile::open(ExFatFile*, char const*, int)+0xb4>
    if (!openPrivate(dirFile, &fname, O_RDONLY)) {
    2c4c:	movs	r3, #0
    2c4e:	add	r2, sp, #12
    2c50:	mov	r1, r4
    2c52:	mov	r0, r5
    2c54:	bl	2880 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    2c58:	cmp	r0, #0
    2c5a:	beq.n	2be6 <ExFatFile::open(ExFatFile*, char const*, int)+0x16>
    tmpDir = *this;
    2c5c:	add	r6, sp, #32
    2c5e:	mov	r2, r5
    2c60:	add.w	ip, r5, #48	; 0x30
    2c64:	mov	r4, r6
    2c66:	ldr	r0, [r2, #0]
    2c68:	adds	r2, #8
    2c6a:	ldr.w	r1, [r2, #-4]
    2c6e:	mov	r3, r6
    2c70:	cmp	r2, ip
    2c72:	stmia	r3!, {r0, r1}
    2c74:	mov	r6, r3
    2c76:	bne.n	2c66 <ExFatFile::open(ExFatFile*, char const*, int)+0x96>
    2c78:	ldr	r0, [r2, #0]
    2c7a:	str	r0, [r3, #0]
    close();
    2c7c:	mov	r0, r5
    2c7e:	bl	24f0 <ExFatFile::close()>
    if (!parsePathName(path, &fname, &path)) {
    2c82:	b.n	2c36 <ExFatFile::open(ExFatFile*, char const*, int)+0x66>
  return openPrivate(dirFile, &fname, oflag);
    2c84:	mov	r3, r7
    2c86:	add	r2, sp, #12
    2c88:	mov	r1, r4
    2c8a:	mov	r0, r5
    2c8c:	bl	2880 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    2c90:	b.n	2be8 <ExFatFile::open(ExFatFile*, char const*, int)+0x18>

00002c92 <ExFatFile::open(ExFatVolume*, char const*, int)>:
  return vol && open(vol->vwd(), path, oflag);
    2c92:	cbz	r1, 2c9c <ExFatFile::open(ExFatVolume*, char const*, int)+0xa>
    2c94:	add.w	r1, r1, #1096	; 0x448
    2c98:	b.w	2bd0 <ExFatFile::open(ExFatFile*, char const*, int)>
}
    2c9c:	mov	r0, r1
    2c9e:	bx	lr

00002ca0 <ExFatFile::openNext(ExFatFile*, int)>:
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
    2ca0:	mov	r3, r2
    2ca2:	push	{r4}
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    2ca4:	ldrb.w	r2, [r0, #49]	; 0x31
    2ca8:	cbnz	r2, 2cc4 <ExFatFile::openNext(ExFatFile*, int)+0x24>
    2caa:	ldrb.w	r2, [r1, #49]	; 0x31
    2cae:	tst.w	r2, #80	; 0x50
    2cb2:	beq.n	2cc4 <ExFatFile::openNext(ExFatFile*, int)+0x24>
    2cb4:	ldr	r2, [r1, #0]
    2cb6:	ands.w	r2, r2, #31
    2cba:	bne.n	2cc4 <ExFatFile::openNext(ExFatFile*, int)+0x24>
}
    2cbc:	ldr.w	r4, [sp], #4
  return openPrivate(dir, nullptr, oflag);
    2cc0:	b.w	2880 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
}
    2cc4:	movs	r0, #0
    2cc6:	ldr.w	r4, [sp], #4
    2cca:	bx	lr

00002ccc <ExFatPartition::bitmapFind(unsigned long, unsigned long)>:
#define DBG_FILE "ExFatPartition.cpp"
#include "../common/DebugMacros.h"
#include "ExFatLib.h"
//------------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
    2ccc:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2cd0:	mov	r7, r0
    2cd2:	mov	fp, r2
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    2cd4:	mov	sl, r1
    2cd6:	cbz	r1, 2d0c <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x40>
    2cd8:	subs	r5, r1, #2
  if (start >= m_clusterCount) {
    2cda:	ldr.w	r3, [r7, #1072]	; 0x430
  uint32_t endAlloc = start;
  uint32_t bgnAlloc = start;
  uint16_t sectorSize = 1 << m_bytesPerSectorShift;
  size_t i = (start >> 3) & (sectorSize - 1);
  uint8_t* cache;
  uint8_t mask = 1 << (start & 7);
    2cde:	movs	r4, #1
    start = 0;
    2ce0:	cmp	r3, r5
    2ce2:	it	ls
    2ce4:	movls	r5, #0
  uint8_t mask = 1 << (start & 7);
    2ce6:	and.w	r3, r5, #7
  size_t i = (start >> 3) & (sectorSize - 1);
    2cea:	ubfx	r9, r5, #3, #9
  uint32_t bgnAlloc = start;
    2cee:	mov	r8, r5
  uint32_t endAlloc = start;
    2cf0:	mov	r6, r5
  uint8_t mask = 1 << (start & 7);
    2cf2:	lsls	r4, r3
    2cf4:	uxtb	r4, r4
  while (true) {
    uint32_t sector =
    2cf6:	ldr.w	r1, [r7, #1068]	; 0x42c
    return m_bitmapCache.prepare(sector, option);
    2cfa:	movs	r2, #0
    2cfc:	mov	r0, r7
    2cfe:	add.w	r1, r1, r6, lsr #12
    2d02:	bl	1d0a <FsCache::prepare(unsigned long, unsigned char)>
        m_clusterHeapStartSector + (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCachePrepare(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
    2d06:	cbnz	r0, 2d3a <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x6e>
      mask = 1;
    }
    i = 0;
  }
  return 0;
}
    2d08:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    2d0c:	ldr.w	r5, [r0, #1056]	; 0x420
    2d10:	b.n	2cda <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xe>
        endAlloc++;
    2d12:	mov	r8, r6
        if (endAlloc == start) {
    2d14:	cmp	r5, r6
    2d16:	beq.n	2d70 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xa4>
        if (endAlloc >= m_clusterCount) {
    2d18:	ldr.w	r2, [r7, #1072]	; 0x430
    2d1c:	cmp	r2, r6
    2d1e:	bls.n	2d64 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x98>
      for (; mask; mask <<= 1) {
    2d20:	lsls	r4, r4, #1
    2d22:	ands.w	r4, r4, #255	; 0xff
    2d26:	bne.n	2d3e <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x72>
    for (; i < sectorSize; i++) {
    2d28:	add.w	r3, r9, #1
    2d2c:	movs	r4, #1
    i = 0;
    2d2e:	mov.w	r9, #0
    for (; i < sectorSize; i++) {
    2d32:	cmp.w	r3, #512	; 0x200
    2d36:	bcs.n	2cf6 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x2a>
    2d38:	mov	r9, r3
        if (!(mask & cache[i])) {
    2d3a:	ldrb.w	r3, [r0, r9]
    2d3e:	tst	r3, r4
        endAlloc++;
    2d40:	add.w	r6, r6, #1
        if (!(mask & cache[i])) {
    2d44:	bne.n	2d12 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x46>
          if ((endAlloc - bgnAlloc) == count) {
    2d46:	sub.w	r2, r6, r8
    2d4a:	cmp	r2, fp
    2d4c:	bne.n	2d14 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x48>
            if (cluster == 0 && count == 1) {
    2d4e:	cmp.w	sl, #0
    2d52:	bne.n	2d5e <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x92>
    2d54:	cmp.w	fp, #1
              m_bitmapStart = bgnAlloc;
    2d58:	it	eq
    2d5a:	streq.w	r8, [r7, #1056]	; 0x420
            return bgnAlloc + 2;
    2d5e:	add.w	r0, r8, #2
    2d62:	b.n	2d08 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x3c>
          endAlloc = bgnAlloc = 0;
    2d64:	mov.w	r8, #0
          i = sectorSize;
    2d68:	mov.w	r9, #512	; 0x200
          endAlloc = bgnAlloc = 0;
    2d6c:	mov	r6, r8
    2d6e:	b.n	2d28 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x5c>
          return 1;
    2d70:	movs	r0, #1
    2d72:	b.n	2d08 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x3c>

00002d74 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>:
//------------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster, uint32_t count,
                                  bool value) {
  uint32_t sector;
  uint32_t start = cluster - 2;
    2d74:	subs	r1, #2
                                  bool value) {
    2d76:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2d7a:	mov	r5, r0
    2d7c:	mov	r7, r3
  size_t i;
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    2d7e:	ldr.w	r0, [r0, #1072]	; 0x430
    2d82:	adds	r3, r1, r2
                                  bool value) {
    2d84:	mov	r6, r2
  if ((start + count) > m_clusterCount) {
    2d86:	cmp	r3, r0
    2d88:	bhi.n	2e0a <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x96>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    if (start <= m_bitmapStart && m_bitmapStart < (start + count)) {
    2d8a:	ldr.w	r2, [r5, #1056]	; 0x420
  if (value) {
    2d8e:	cbz	r7, 2e00 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x8c>
    if (start <= m_bitmapStart && m_bitmapStart < (start + count)) {
    2d90:	cmp	r1, r2
    2d92:	bhi.n	2da2 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x2e>
    2d94:	cmp	r3, r2
    2d96:	bls.n	2da2 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x2e>
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    2d98:	cmp	r3, r0
    2d9a:	it	cs
    2d9c:	movcs	r3, #0
    2d9e:	str.w	r3, [r5, #1056]	; 0x420
  } else {
    if (start < m_bitmapStart) {
      m_bitmapStart = start;
    }
  }
  mask = 1 << (start & 7);
    2da2:	and.w	r3, r1, #7
    2da6:	mov.w	r9, #1
  sector = m_clusterHeapStartSector + (start >> (m_bytesPerSectorShift + 3));
  i = (start >> 3) & m_sectorMask;
    2daa:	ubfx	r4, r1, #3, #9
  mask = 1 << (start & 7);
    2dae:	lsl.w	r9, r9, r3
  sector = m_clusterHeapStartSector + (start >> (m_bytesPerSectorShift + 3));
    2db2:	ldr.w	r3, [r5, #1068]	; 0x42c
  mask = 1 << (start & 7);
    2db6:	uxtb.w	r9, r9
  sector = m_clusterHeapStartSector + (start >> (m_bytesPerSectorShift + 3));
    2dba:	add.w	r8, r3, r1, lsr #12
    2dbe:	movs	r2, #1
    2dc0:	mov	r1, r8
    2dc2:	mov	r0, r5
    2dc4:	add	r8, r2
    2dc6:	bl	1d0a <FsCache::prepare(unsigned long, unsigned char)>
  while (true) {
    cache = bitmapCachePrepare(sector++, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
    2dca:	cbz	r0, 2e0a <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x96>
    2dcc:	adds	r3, r0, r4
    2dce:	mov	r1, r9
    2dd0:	add.w	r0, r0, #512	; 0x200
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
    2dd4:	ldrb	r2, [r3, #0]
    2dd6:	tst	r2, r1
    2dd8:	ite	ne
    2dda:	movne	r4, #1
    2ddc:	moveq	r4, #0
    2dde:	cmp	r4, r7
    2de0:	beq.n	2e0a <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x96>
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
    2de2:	eors	r2, r1
        if (--count == 0) {
    2de4:	subs	r6, #1
        cache[i] ^= mask;
    2de6:	strb	r2, [r3, #0]
        if (--count == 0) {
    2de8:	beq.n	2e10 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x9c>
      for (; mask; mask <<= 1) {
    2dea:	lsls	r1, r1, #1
    2dec:	ands.w	r1, r1, #255	; 0xff
    2df0:	bne.n	2dd4 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x60>
    for (; i < m_bytesPerSector; i++) {
    2df2:	adds	r3, #1
          return true;
        }
      }
      mask = 1;
    }
    i = 0;
    2df4:	mov	r4, r1
    2df6:	movs	r1, #1
    for (; i < m_bytesPerSector; i++) {
    2df8:	cmp	r0, r3
      mask = 1;
    2dfa:	mov	r9, r1
    for (; i < m_bytesPerSector; i++) {
    2dfc:	bne.n	2dd4 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x60>
    2dfe:	b.n	2dbe <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x4a>
    if (start < m_bitmapStart) {
    2e00:	cmp	r1, r2
      m_bitmapStart = start;
    2e02:	it	cc
    2e04:	strcc.w	r1, [r5, #1056]	; 0x420
    2e08:	b.n	2da2 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x2e>
  }

fail:
  return false;
    2e0a:	movs	r0, #0
}
    2e0c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          return true;
    2e10:	movs	r0, #1
    2e12:	b.n	2e0c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x98>

00002e14 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>:
    n++;
  } while (status);
  return n;
}
//------------------------------------------------------------------------------
uint8_t* ExFatPartition::dirCache(DirPos_t* pos, uint8_t options) {
    2e14:	push	{r3, r4, r5, lr}
  uint32_t sector = clusterStartSector(pos->cluster);
  sector += (m_clusterMask & pos->position) >> m_bytesPerSectorShift;
    2e16:	ldr.w	r3, [r0, #1080]	; 0x438
uint8_t* ExFatPartition::dirCache(DirPos_t* pos, uint8_t options) {
    2e1a:	mov	r4, r1
  sector += (m_clusterMask & pos->position) >> m_bytesPerSectorShift;
    2e1c:	ldr	r1, [r1, #4]
    return m_dataCache.prepare(sector, option);
    2e1e:	add.w	r0, r0, #528	; 0x210
           ((cluster - 2) << m_sectorsPerClusterShift);
    2e22:	ldrb.w	r5, [r0, #565]	; 0x235
    2e26:	ands	r1, r3
    2e28:	ldr	r3, [r4, #0]
    2e2a:	subs	r3, #2
    2e2c:	lsls	r3, r5
    2e2e:	add.w	r3, r3, r1, lsr #9
    2e32:	ldr.w	r1, [r0, #540]	; 0x21c
    return m_dataCache.prepare(sector, option);
    2e36:	add	r1, r3
    2e38:	bl	1d0a <FsCache::prepare(unsigned long, unsigned char)>
  uint8_t* cache = dataCachePrepare(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
    2e3c:	cbz	r0, 2e46 <ExFatPartition::dirCache(DirPos_t*, unsigned char)+0x32>
    2e3e:	ldr	r3, [r4, #4]
    2e40:	ubfx	r3, r3, #0, #9
    2e44:	add	r0, r3
}
    2e46:	pop	{r3, r4, r5, pc}

00002e48 <ExFatPartition::fatGet(unsigned long, unsigned long*)>:
  }
  return 1;
}
//------------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    2e48:	push	{r3, r4, r5, lr}
  uint8_t* cache;
  uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    2e4a:	ldr.w	r3, [r0, #1072]	; 0x430
int8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    2e4e:	mov	r4, r1
    2e50:	mov	r5, r2
  if (cluster > (m_clusterCount + 1)) {
    2e52:	adds	r3, #1
    2e54:	cmp	r3, r1
    2e56:	bcs.n	2e5e <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x16>
    DBG_FAIL_MACRO;
    return -1;
    2e58:	mov.w	r0, #4294967295
  if (next == EXFAT_EOC) {
    return 0;
  }
  *value = next;
  return 1;
}
    2e5c:	pop	{r3, r4, r5, pc}
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    2e5e:	ldr.w	r1, [r0, #1060]	; 0x424
    2e62:	movs	r2, #0
    2e64:	add.w	r0, r0, #528	; 0x210
    2e68:	add.w	r1, r1, r4, lsr #7
    2e6c:	bl	1d0a <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    2e70:	cmp	r0, #0
    2e72:	beq.n	2e58 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x10>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    2e74:	lsls	r4, r4, #2
    2e76:	ubfx	r4, r4, #0, #9
  return *reinterpret_cast<const uint32_t*>(src);
    2e7a:	ldr	r3, [r0, r4]
  if (next == EXFAT_EOC) {
    2e7c:	adds	r2, r3, #1
  return 1;
    2e7e:	itet	ne
    2e80:	movne	r0, #1
    return 0;
    2e82:	moveq	r0, #0
  *value = next;
    2e84:	strne	r3, [r5, #0]
  return 1;
    2e86:	b.n	2e5c <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x14>

00002e88 <ExFatPartition::chainSize(unsigned long)>:
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
    2e88:	push	{r0, r1, r2, r4, r5, lr}
    2e8a:	mov	r5, r0
  uint32_t n = 0;
    2e8c:	movs	r4, #0
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
    2e8e:	str	r1, [sp, #4]
    status = fatGet(cluster, &cluster);
    2e90:	add	r2, sp, #4
    2e92:	ldr	r1, [sp, #4]
    2e94:	mov	r0, r5
    2e96:	bl	2e48 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    if (status < 0) return 0;
    2e9a:	cmp	r0, #0
    2e9c:	blt.n	2eaa <ExFatPartition::chainSize(unsigned long)+0x22>
    n++;
    2e9e:	add.w	r4, r4, #1
  } while (status);
    2ea2:	bne.n	2e90 <ExFatPartition::chainSize(unsigned long)+0x8>
}
    2ea4:	mov	r0, r4
    2ea6:	add	sp, #12
    2ea8:	pop	{r4, r5, pc}
    if (status < 0) return 0;
    2eaa:	movs	r4, #0
    2eac:	b.n	2ea4 <ExFatPartition::chainSize(unsigned long)+0x1c>

00002eae <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>:
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    2eae:	push	{r4, r5, r6, lr}
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    2eb0:	ldr	r3, [r1, #4]
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    2eb2:	mov	r6, r0
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    2eb4:	ldr.w	r4, [r0, #1080]	; 0x438
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    2eb8:	mov	r5, r1
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    2eba:	ands	r4, r3
    2ebc:	add	r4, r2
  pos->position += offset;
    2ebe:	add	r2, r3
    2ec0:	str	r2, [r1, #4]
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    2ec2:	ldrb.w	r3, [r0, #1093]	; 0x445
    2ec6:	adds	r3, #9
  tmp >>= bytesPerClusterShift();
    2ec8:	uxtb	r3, r3
    2eca:	lsrs	r4, r3
  while (tmp--) {
    2ecc:	cbnz	r4, 2ed2 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x24>
  return 1;
    2ece:	movs	r0, #1
    2ed0:	b.n	2eec <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x3e>
    if (pos->isContiguous) {
    2ed2:	ldrb	r3, [r5, #8]
      pos->cluster++;
    2ed4:	ldr	r1, [r5, #0]
    if (pos->isContiguous) {
    2ed6:	cbz	r3, 2ee0 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x32>
      pos->cluster++;
    2ed8:	adds	r1, #1
    2eda:	str	r1, [r5, #0]
    2edc:	subs	r4, #1
    2ede:	b.n	2ecc <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x1e>
      status = fatGet(pos->cluster, &pos->cluster);
    2ee0:	mov	r2, r5
    2ee2:	mov	r0, r6
    2ee4:	bl	2e48 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
      if (status != 1) {
    2ee8:	cmp	r0, #1
    2eea:	beq.n	2edc <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x2e>
}
    2eec:	pop	{r4, r5, r6, pc}

00002eee <ExFatPartition::fatPut(unsigned long, unsigned long)>:
//------------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    2eee:	cmp	r1, #1
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
    2ef0:	push	{r3, r4, r5, lr}
    2ef2:	mov	r4, r1
    2ef4:	mov	r5, r2
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    2ef6:	bhi.n	2efc <ExFatPartition::fatPut(unsigned long, unsigned long)+0xe>
  }
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;

fail:
  return false;
    2ef8:	movs	r0, #0
}
    2efa:	pop	{r3, r4, r5, pc}
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    2efc:	ldr.w	r3, [r0, #1072]	; 0x430
    2f00:	adds	r3, #1
    2f02:	cmp	r3, r1
    2f04:	bcc.n	2ef8 <ExFatPartition::fatPut(unsigned long, unsigned long)+0xa>
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    2f06:	ldr.w	r1, [r0, #1060]	; 0x424
    return m_dataCache.prepare(sector, option);
    2f0a:	movs	r2, #1
    2f0c:	add.w	r0, r0, #528	; 0x210
    2f10:	add.w	r1, r1, r4, lsr #7
    2f14:	bl	1d0a <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    2f18:	cmp	r0, #0
    2f1a:	beq.n	2ef8 <ExFatPartition::fatPut(unsigned long, unsigned long)+0xa>
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
    2f1c:	lsls	r4, r4, #2
    2f1e:	ubfx	r4, r4, #0, #9
  *reinterpret_cast<uint32_t*>(dst) = src;
    2f22:	str	r5, [r0, r4]
  return true;
    2f24:	movs	r0, #1
    2f26:	b.n	2efa <ExFatPartition::fatPut(unsigned long, unsigned long)+0xc>

00002f28 <ExFatPartition::freeChain(unsigned long)>:
//------------------------------------------------------------------------------
bool ExFatPartition::freeChain(uint32_t cluster) {
    2f28:	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    2f2c:	mov	r7, r0
    2f2e:	mov	r4, r1
  uint32_t next;
  uint32_t start = cluster;
    2f30:	mov	r8, r1
  int8_t status;
  do {
    status = fatGet(cluster, &next);
    2f32:	add	r2, sp, #4
    2f34:	mov	r1, r4
    2f36:	mov	r0, r7
    2f38:	bl	2e48 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    if (status < 0) {
    2f3c:	subs	r6, r0, #0
    2f3e:	bge.n	2f4a <ExFatPartition::freeChain(unsigned long)+0x22>
  } while (status);

  return true;

fail:
  return false;
    2f40:	movs	r5, #0
}
    2f42:	mov	r0, r5
    2f44:	add	sp, #8
    2f46:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!fatPut(cluster, 0)) {
    2f4a:	movs	r2, #0
    2f4c:	mov	r1, r4
    2f4e:	mov	r0, r7
    2f50:	bl	2eee <ExFatPartition::fatPut(unsigned long, unsigned long)>
    2f54:	mov	r5, r0
    2f56:	cmp	r0, #0
    2f58:	beq.n	2f40 <ExFatPartition::freeChain(unsigned long)+0x18>
    if (status == 0 || (cluster + 1) != next) {
    2f5a:	adds	r2, r4, #1
    2f5c:	cbz	r6, 2f64 <ExFatPartition::freeChain(unsigned long)+0x3c>
    2f5e:	ldr	r3, [sp, #4]
    2f60:	cmp	r3, r2
    2f62:	beq.n	2f7a <ExFatPartition::freeChain(unsigned long)+0x52>
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    2f64:	movs	r3, #0
    2f66:	sub.w	r2, r2, r8
    2f6a:	mov	r1, r8
    2f6c:	mov	r0, r7
    2f6e:	bl	2d74 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    2f72:	cmp	r0, #0
    2f74:	beq.n	2f40 <ExFatPartition::freeChain(unsigned long)+0x18>
      start = next;
    2f76:	ldr.w	r8, [sp, #4]
    cluster = next;
    2f7a:	ldr	r4, [sp, #4]
  } while (status);
    2f7c:	cmp	r6, #0
    2f7e:	bne.n	2f32 <ExFatPartition::freeChain(unsigned long)+0xa>
    2f80:	b.n	2f42 <ExFatPartition::freeChain(unsigned long)+0x1a>

00002f82 <ExFatPartition::freeClusterCount()>:
//------------------------------------------------------------------------------
int32_t ExFatPartition::freeClusterCount() {
    2f82:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t nc = 0;
  uint32_t sector = m_clusterHeapStartSector;
  uint32_t usedCount = 0;
    2f86:	movs	r4, #0
int32_t ExFatPartition::freeClusterCount() {
    2f88:	mov	r6, r0
  uint32_t sector = m_clusterHeapStartSector;
    2f8a:	ldr.w	r7, [r0, #1068]	; 0x42c
    2f8e:	add.w	r8, r0, #528	; 0x210
  uint32_t nc = 0;
    2f92:	mov	r5, r4
    2f94:	mov	r1, r7
    2f96:	movs	r2, #0
    2f98:	mov	r0, r8
    2f9a:	adds	r7, #1
    2f9c:	bl	1d0a <FsCache::prepare(unsigned long, unsigned char)>
  uint8_t* cache;

  while (true) {
    cache = dataCachePrepare(sector++, FsCache::CACHE_FOR_READ);
    if (!cache) {
    2fa0:	cbz	r0, 2fe2 <ExFatPartition::freeClusterCount()+0x60>
    2fa2:	subs	r3, r0, #1
    2fa4:	add.w	ip, r5, #4096	; 0x1000
      return -1;
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
      if (cache[i] == 0XFF) {
    2fa8:	ldrb.w	r0, [r3, #1]!
    2fac:	cmp	r0, #255	; 0xff
    2fae:	bne.n	2fc2 <ExFatPartition::freeClusterCount()+0x40>
        usedCount += 8;
    2fb0:	adds	r4, #8
          if ((mask & cache[i])) {
            usedCount++;
          }
        }
      }
      nc += 8;
    2fb2:	adds	r5, #8
      if (nc >= m_clusterCount) {
    2fb4:	ldr.w	r0, [r6, #1072]	; 0x430
    2fb8:	cmp	r0, r5
    2fba:	bhi.n	2fdc <ExFatPartition::freeClusterCount()+0x5a>
        return m_clusterCount - usedCount;
    2fbc:	subs	r0, r0, r4
      }
    }
  }
}
    2fbe:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      } else if (cache[i]) {
    2fc2:	cmp	r0, #0
    2fc4:	beq.n	2fb2 <ExFatPartition::freeClusterCount()+0x30>
    2fc6:	movs	r1, #8
        for (uint8_t mask = 1; mask; mask <<= 1) {
    2fc8:	movs	r2, #1
          if ((mask & cache[i])) {
    2fca:	tst	r0, r2
        for (uint8_t mask = 1; mask; mask <<= 1) {
    2fcc:	mov.w	r2, r2, lsl #1
            usedCount++;
    2fd0:	it	ne
    2fd2:	addne	r4, #1
        for (uint8_t mask = 1; mask; mask <<= 1) {
    2fd4:	subs	r1, #1
    2fd6:	uxtb	r2, r2
    2fd8:	bne.n	2fca <ExFatPartition::freeClusterCount()+0x48>
    2fda:	b.n	2fb2 <ExFatPartition::freeClusterCount()+0x30>
    for (size_t i = 0; i < m_bytesPerSector; i++) {
    2fdc:	cmp	r5, ip
    2fde:	bne.n	2fa8 <ExFatPartition::freeClusterCount()+0x26>
    2fe0:	b.n	2f94 <ExFatPartition::freeClusterCount()+0x12>
      return -1;
    2fe2:	mov.w	r0, #4294967295
    2fe6:	b.n	2fbe <ExFatPartition::freeClusterCount()+0x3c>

00002fe8 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)>:
//------------------------------------------------------------------------------
bool ExFatPartition::init(FsBlockDevice* dev, uint8_t part, uint32_t volStart) {
    2fe8:	push	{r4, r5, r6, lr}
    2fea:	mov	r6, r3
  pbs_t* pbs;
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  m_fatType = 0;
    2fec:	movs	r3, #0
bool ExFatPartition::init(FsBlockDevice* dev, uint8_t part, uint32_t volStart) {
    2fee:	mov	r4, r0
  m_blockDev = dev;
    2ff0:	str.w	r1, [r0, #1088]	; 0x440
  m_fatType = 0;
    2ff4:	strb.w	r3, [r0, #1092]	; 0x444
  cacheInit(m_blockDev);
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    2ff8:	mov	r5, r2
    m_blockDev = blockDev;
    2ffa:	str	r1, [r0, #4]
    m_status = 0;
    2ffc:	strb	r3, [r0, #0]
    m_sector = 0XFFFFFFFF;
    2ffe:	mov.w	r0, #4294967295
    m_blockDev = blockDev;
    3002:	str.w	r1, [r4, #532]	; 0x214
    m_sector = 0XFFFFFFFF;
    3006:	str	r0, [r4, #8]
    m_status = 0;
    3008:	strb.w	r3, [r4, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    300c:	str.w	r0, [r4, #536]	; 0x218
    3010:	cbz	r2, 3048 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x60>
    if (part > 4) {
    3012:	cmp	r2, #4
    3014:	bls.n	301a <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x32>
  bitmapFind(0, 1);
  m_fatType = FAT_TYPE_EXFAT;
  return true;

fail:
  return false;
    3016:	movs	r0, #0
}
    3018:	pop	{r4, r5, r6, pc}
    301a:	mov	r2, r3
    301c:	mov	r1, r3
    301e:	add.w	r0, r4, #528	; 0x210
    3022:	bl	1d0a <FsCache::prepare(unsigned long, unsigned char)>
    if (!mbr) {
    3026:	cmp	r0, #0
    3028:	beq.n	3016 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x2e>
    MbrPart_t* mp = mbr->part + part - 1;
    302a:	add.w	r2, r5, #268435456	; 0x10000000
    302e:	add.w	r0, r0, #446	; 0x1be
    3032:	subs	r2, #1
    3034:	lsls	r3, r2, #4
    3036:	add.w	r2, r0, r2, lsl #4
    if (mp->type == 0 || (mp->boot != 0 && mp->boot != 0X80)) {
    303a:	ldrb	r1, [r2, #4]
    303c:	cmp	r1, #0
    303e:	beq.n	3016 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x2e>
    3040:	ldrb	r3, [r0, r3]
    3042:	lsls	r3, r3, #25
    3044:	bne.n	3016 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x2e>
  return *reinterpret_cast<const uint32_t*>(src);
    3046:	ldr	r6, [r2, #8]
    3048:	movs	r2, #0
    304a:	mov	r1, r6
    304c:	add.w	r0, r4, #528	; 0x210
    3050:	bl	1d0a <FsCache::prepare(unsigned long, unsigned char)>
  if (!pbs) {
    3054:	mov	r5, r0
    3056:	cmp	r0, #0
    3058:	beq.n	3016 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x2e>
  if (strncmp(pbs->oemName, "EXFAT", 5)) {
    305a:	ldr	r1, [pc, #104]	; (30c4 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0xdc>)
    305c:	movs	r2, #5
    305e:	adds	r0, #3
    3060:	bl	af74 <strncmp>
    3064:	mov	r1, r0
    3066:	cmp	r0, #0
    3068:	bne.n	3016 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x2e>
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    306a:	ldrb.w	r3, [r5, #108]	; 0x6c
    306e:	cmp	r3, #9
    3070:	bne.n	3016 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x2e>
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    3072:	ldr	r3, [r5, #80]	; 0x50
    3074:	add	r3, r6
    3076:	str.w	r3, [r4, #1060]	; 0x424
    307a:	ldr	r3, [r5, #84]	; 0x54
  m_fatLength = getLe32(bpb->fatLength);
    307c:	str.w	r3, [r4, #1064]	; 0x428
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
    3080:	ldr	r3, [r5, #88]	; 0x58
    3082:	add	r3, r6
    3084:	str.w	r3, [r4, #1068]	; 0x42c
    3088:	ldr	r3, [r5, #92]	; 0x5c
  m_clusterCount = getLe32(bpb->clusterCount);
    308a:	str.w	r3, [r4, #1072]	; 0x430
    308e:	ldr	r3, [r5, #96]	; 0x60
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
    3090:	str.w	r3, [r4, #1076]	; 0x434
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    3094:	ldrb.w	r3, [r5, #109]	; 0x6d
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    3098:	movs	r5, #1
  m_bitmapStart = 0;
    309a:	str.w	r0, [r4, #1056]	; 0x420
  bitmapFind(0, 1);
    309e:	mov	r0, r4
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    30a0:	strb.w	r3, [r4, #1093]	; 0x445
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    30a4:	adds	r3, #9
  bitmapFind(0, 1);
    30a6:	mov	r2, r5
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    30a8:	lsl.w	r3, r5, r3
    30ac:	str.w	r3, [r4, #1084]	; 0x43c
  m_clusterMask = m_bytesPerCluster - 1;
    30b0:	subs	r3, #1
    30b2:	str.w	r3, [r4, #1080]	; 0x438
  bitmapFind(0, 1);
    30b6:	bl	2ccc <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  m_fatType = FAT_TYPE_EXFAT;
    30ba:	movs	r3, #64	; 0x40
  return true;
    30bc:	mov	r0, r5
  m_fatType = FAT_TYPE_EXFAT;
    30be:	strb.w	r3, [r4, #1092]	; 0x444
  return true;
    30c2:	b.n	3018 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x30>
    30c4:	.word	0x200011fe

000030c8 <ExFatPartition::rootLength()>:
//------------------------------------------------------------------------------
uint32_t ExFatPartition::rootLength() {
    30c8:	push	{r4, lr}
    30ca:	mov	r4, r0
  uint32_t nc = chainSize(m_rootDirectoryCluster);
    30cc:	ldr.w	r1, [r0, #1076]	; 0x434
    30d0:	bl	2e88 <ExFatPartition::chainSize(unsigned long)>
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    30d4:	ldrb.w	r3, [r4, #1093]	; 0x445
    30d8:	adds	r3, #9
  return nc << bytesPerClusterShift();
    30da:	uxtb	r3, r3
}
    30dc:	lsls	r0, r3
    30de:	pop	{r4, pc}

000030e0 <exFatDirChecksum(unsigned char const*, unsigned short)>:
  return false;
}
//==============================================================================
#else  // EXFAT_READ_ONLY
//------------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
    30e0:	push	{r4, lr}
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    30e2:	movs	r3, #0
  bool skip = data[0] == EXFAT_TYPE_FILE;
    30e4:	ldrb	r4, [r0, #0]
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    30e6:	lsls	r2, r1, #15
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    30e8:	cmp	r3, #1
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    30ea:	orr.w	r2, r2, r1, lsr #1
    30ee:	ldrb	r1, [r0, r3]
    30f0:	uxtah	r2, r1, r2
    30f4:	uxth	r1, r2
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    30f6:	bne.n	310a <exFatDirChecksum(unsigned char const*, unsigned short)+0x2a>
    30f8:	cmp	r4, #133	; 0x85
    30fa:	ite	ne
    30fc:	movne	r2, #1
    30fe:	moveq	r2, #3
    3100:	add	r3, r2
    3102:	cmp	r3, #31
    3104:	bls.n	30e6 <exFatDirChecksum(unsigned char const*, unsigned short)+0x6>
  }
  return checksum;
}
    3106:	mov	r0, r1
    3108:	pop	{r4, pc}
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    310a:	movs	r2, #1
    310c:	b.n	3100 <exFatDirChecksum(unsigned char const*, unsigned short)+0x20>

0000310e <ExFatPartition::cacheSync()>:
  bool cacheSync() {
    310e:	push	{r4, lr}
    3110:	mov	r4, r0
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    3112:	bl	1cba <FsCache::sync()>
    3116:	cbz	r0, 3130 <ExFatPartition::cacheSync()+0x22>
    3118:	add.w	r0, r4, #528	; 0x210
    311c:	bl	1cba <FsCache::sync()>
    3120:	cbz	r0, 3130 <ExFatPartition::cacheSync()+0x22>
  bool cacheSync() {
    3122:	ldr.w	r0, [r4, #1088]	; 0x440
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() const { return m_sectorMask; }
  bool syncDevice() { return m_blockDev->syncDevice(); }
    3126:	ldr	r3, [r0, #0]
  }
    3128:	ldmia.w	sp!, {r4, lr}
  bool syncDevice() { return m_blockDev->syncDevice(); }
    312c:	ldr	r3, [r3, #28]
    312e:	bx	r3
  }
    3130:	movs	r0, #0
    3132:	pop	{r4, pc}

00003134 <ExFatFile::addCluster()>:
//------------------------------------------------------------------------------
bool ExFatFile::addCluster() {
    3134:	push	{r3, r4, r5, r6, r7, lr}
    3136:	mov	r4, r0
  uint32_t find = m_vol->bitmapFind(m_curCluster ? m_curCluster + 1 : 0, 1);
    3138:	ldr	r0, [r0, #32]
    313a:	ldr	r1, [r4, #24]
    313c:	cbz	r1, 3140 <ExFatFile::addCluster()+0xc>
    313e:	adds	r1, #1
    3140:	movs	r2, #1
    3142:	bl	2ccc <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  if (find < 2) {
    3146:	cmp	r0, #1
  uint32_t find = m_vol->bitmapFind(m_curCluster ? m_curCluster + 1 : 0, 1);
    3148:	mov	r5, r0
  if (find < 2) {
    314a:	bhi.n	3152 <ExFatFile::addCluster()+0x1e>
done:
  m_curCluster = find;
  return true;

fail:
  return false;
    314c:	movs	r6, #0
}
    314e:	mov	r0, r6
    3150:	pop	{r3, r4, r5, r6, r7, pc}
  if (!m_vol->bitmapModify(find, 1, 1)) {
    3152:	movs	r3, #1
    3154:	mov	r1, r0
    3156:	ldr	r0, [r4, #32]
    3158:	mov	r2, r3
    315a:	bl	2d74 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    315e:	mov	r6, r0
    3160:	cmp	r0, #0
    3162:	beq.n	314c <ExFatFile::addCluster()+0x18>
  if (m_curCluster == 0) {
    3164:	ldr	r2, [r4, #24]
    m_flags |= FILE_FLAG_CONTIGUOUS;
    3166:	ldrb.w	r3, [r4, #51]	; 0x33
  if (m_curCluster == 0) {
    316a:	cbnz	r2, 3178 <ExFatFile::addCluster()+0x44>
    m_flags |= FILE_FLAG_CONTIGUOUS;
    316c:	orr.w	r3, r3, #64	; 0x40
    3170:	strb.w	r3, [r4, #51]	; 0x33
  m_curCluster = find;
    3174:	str	r5, [r4, #24]
  return true;
    3176:	b.n	314e <ExFatFile::addCluster()+0x1a>
  if (isContiguous()) {
    3178:	lsls	r1, r3, #25
    317a:	bmi.n	31a0 <ExFatFile::addCluster()+0x6c>
  if (!m_vol->fatPut(find, EXFAT_EOC)) {
    317c:	mov.w	r2, #4294967295
    3180:	mov	r1, r5
    3182:	ldr	r0, [r4, #32]
    3184:	bl	2eee <ExFatPartition::fatPut(unsigned long, unsigned long)>
    3188:	cmp	r0, #0
    318a:	beq.n	314c <ExFatFile::addCluster()+0x18>
  if (m_curCluster) {
    318c:	ldr	r1, [r4, #24]
    318e:	cmp	r1, #0
    3190:	beq.n	3174 <ExFatFile::addCluster()+0x40>
    if (!m_vol->fatPut(m_curCluster, find)) {
    3192:	mov	r2, r5
    3194:	ldr	r0, [r4, #32]
    3196:	bl	2eee <ExFatPartition::fatPut(unsigned long, unsigned long)>
    319a:	cmp	r0, #0
    319c:	bne.n	3174 <ExFatFile::addCluster()+0x40>
    319e:	b.n	314c <ExFatFile::addCluster()+0x18>
    if (find == (m_curCluster + 1)) {
    31a0:	adds	r2, #1
    31a2:	cmp	r2, r5
    31a4:	beq.n	3174 <ExFatFile::addCluster()+0x40>
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    31a6:	bic.w	r3, r3, #64	; 0x40
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    31aa:	ldr	r1, [r4, #28]
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    31ac:	strb.w	r3, [r4, #51]	; 0x33
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    31b0:	ldr	r3, [r4, #24]
      if (!m_vol->fatPut(c, c + 1)) {
    31b2:	ldr	r0, [r4, #32]
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    31b4:	cmp	r3, r1
    31b6:	bls.n	317c <ExFatFile::addCluster()+0x48>
      if (!m_vol->fatPut(c, c + 1)) {
    31b8:	adds	r7, r1, #1
    31ba:	mov	r2, r7
    31bc:	bl	2eee <ExFatPartition::fatPut(unsigned long, unsigned long)>
    31c0:	cmp	r0, #0
    31c2:	beq.n	314c <ExFatFile::addCluster()+0x18>
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    31c4:	mov	r1, r7
    31c6:	b.n	31b0 <ExFatFile::addCluster()+0x7c>

000031c8 <ExFatFile::remove()>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
    31c8:	push	{r3, r4, r5, r6, r7, lr}
  bool isWritable() const { return m_flags & FILE_FLAG_WRITE; }
    31ca:	ldrb.w	r3, [r0, #51]	; 0x33
    31ce:	mov	r4, r0
  uint8_t* cache;
  if (!isWritable()) {
    31d0:	lsls	r2, r3, #30
    31d2:	bmi.n	31d8 <ExFatFile::remove()+0x10>

  // Write entry to device.
  return m_vol->cacheSync();

fail:
  return false;
    31d4:	movs	r0, #0
}
    31d6:	pop	{r3, r4, r5, r6, r7, pc}
  if (m_firstCluster) {
    31d8:	ldr	r1, [r0, #28]
    31da:	cbnz	r1, 3212 <ExFatFile::remove()+0x4a>
bool ExFatFile::remove() {
    31dc:	movs	r5, #0
    cache = dirCache(is, FsCache::CACHE_FOR_WRITE);
    31de:	movs	r2, #1
    31e0:	uxtb	r1, r5
    31e2:	mov	r0, r4
    31e4:	bl	24b8 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache) {
    31e8:	cmp	r0, #0
    31ea:	beq.n	31d4 <ExFatFile::remove()+0xc>
    cache[0] &= 0x7F;
    31ec:	ldrb	r3, [r0, #0]
  for (uint8_t is = 0; is <= m_setCount; is++) {
    31ee:	adds	r5, #1
    cache[0] &= 0x7F;
    31f0:	and.w	r3, r3, #127	; 0x7f
    31f4:	strb	r3, [r0, #0]
  for (uint8_t is = 0; is <= m_setCount; is++) {
    31f6:	uxtb	r3, r5
    31f8:	ldrb.w	r2, [r4, #48]	; 0x30
    31fc:	cmp	r2, r3
    31fe:	bcs.n	31de <ExFatFile::remove()+0x16>
  m_attributes = FILE_ATTR_CLOSED;
    3200:	movs	r3, #0
  return m_vol->cacheSync();
    3202:	ldr	r0, [r4, #32]
  m_attributes = FILE_ATTR_CLOSED;
    3204:	strb.w	r3, [r4, #49]	; 0x31
  m_flags = 0;
    3208:	strb.w	r3, [r4, #51]	; 0x33
  return m_vol->cacheSync();
    320c:	bl	310e <ExFatPartition::cacheSync()>
    3210:	b.n	31d6 <ExFatFile::remove()+0xe>
    if (isContiguous()) {
    3212:	lsls	r3, r3, #25
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    3214:	ldr	r0, [r0, #32]
    if (isContiguous()) {
    3216:	bpl.n	324e <ExFatFile::remove()+0x86>
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    3218:	ldrb.w	r3, [r0, #1093]	; 0x445
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    321c:	ldrd	r2, r5, [r4, #8]
    3220:	adds	r3, #9
    3222:	subs	r2, #1
    3224:	uxtb	r3, r3
    3226:	adc.w	r5, r5, #4294967295
    322a:	rsb	r7, r3, #32
    322e:	sub.w	r6, r3, #32
    3232:	lsrs	r2, r3
      if (!m_vol->bitmapModify(m_firstCluster, nc, 0)) {
    3234:	movs	r3, #0
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    3236:	lsl.w	r7, r5, r7
    323a:	lsr.w	r6, r5, r6
    323e:	orrs	r2, r7
    3240:	orrs	r2, r6
      if (!m_vol->bitmapModify(m_firstCluster, nc, 0)) {
    3242:	adds	r2, #1
    3244:	bl	2d74 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
      if (!m_vol->freeChain(m_firstCluster)) {
    3248:	cmp	r0, #0
    324a:	bne.n	31dc <ExFatFile::remove()+0x14>
    324c:	b.n	31d4 <ExFatFile::remove()+0xc>
    324e:	bl	2f28 <ExFatPartition::freeChain(unsigned long)>
    3252:	b.n	3248 <ExFatFile::remove()+0x80>

00003254 <ExFatFile::rmdir()>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::rmdir() {
    3254:	push	{r4, lr}
  int n;
  uint8_t dir[FS_DIR_SIZE];
  // must be open subdirectory
  if (!isSubDir()) {
    3256:	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::rmdir() {
    325a:	sub	sp, #32
    325c:	mov	r4, r0
  if (!isSubDir()) {
    325e:	lsls	r3, r3, #27
    3260:	bmi.n	3268 <ExFatFile::rmdir()+0x14>
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
  return remove();

fail:
  return false;
    3262:	movs	r0, #0
}
    3264:	add	sp, #32
    3266:	pop	{r4, pc}
  void rewind() { seekSet(0); }
    3268:	movs	r2, #0
    326a:	movs	r3, #0
    326c:	bl	27a0 <ExFatFile::seekSet(unsigned long long)>
    n = read(dir, FS_DIR_SIZE);
    3270:	movs	r2, #32
    3272:	mov	r1, sp
    3274:	mov	r0, r4
    3276:	bl	25f0 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    327a:	cbz	r0, 3290 <ExFatFile::rmdir()+0x3c>
    if (n != FS_DIR_SIZE || dir[0] & 0X80) {
    327c:	cmp	r0, #32
    327e:	bne.n	3262 <ExFatFile::rmdir()+0xe>
    3280:	ldrsb.w	r2, [sp]
    3284:	ldrb.w	r3, [sp]
    3288:	cmp	r2, #0
    328a:	blt.n	3262 <ExFatFile::rmdir()+0xe>
    if (dir[0] == 0) {
    328c:	cmp	r3, #0
    328e:	bne.n	3270 <ExFatFile::rmdir()+0x1c>
  m_attributes = FILE_ATTR_FILE;
    3290:	movs	r3, #8
  return remove();
    3292:	mov	r0, r4
  m_attributes = FILE_ATTR_FILE;
    3294:	strb.w	r3, [r4, #49]	; 0x31
  m_flags |= FILE_FLAG_WRITE;
    3298:	ldrb.w	r3, [r4, #51]	; 0x33
    329c:	orr.w	r3, r3, #2
    32a0:	strb.w	r3, [r4, #51]	; 0x33
  return remove();
    32a4:	bl	31c8 <ExFatFile::remove()>
    32a8:	b.n	3264 <ExFatFile::rmdir()+0x10>
	...

000032ac <ExFatFile::syncDir()>:
fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    32ac:	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    32b0:	movs	r7, #0
    32b2:	mov	r4, r0
    }
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setLe16(df->attributes, m_attributes & FS_ATTRIB_COPY);
        if (FsDateTime::callback) {
    32b4:	ldr.w	r8, [pc, #204]	; 3384 <ExFatFile::syncDir()+0xd8>
  uint16_t checksum = 0;
    32b8:	mov	r6, r7
    cache = dirCache(is, FsCache::CACHE_FOR_READ);
    32ba:	movs	r2, #0
    32bc:	uxtb	r1, r7
    32be:	mov	r0, r4
    32c0:	bl	24b8 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache) {
    32c4:	mov	r5, r0
    32c6:	cmp	r0, #0
    32c8:	beq.n	3346 <ExFatFile::syncDir()+0x9a>
    switch (cache[0]) {
    32ca:	ldrb	r3, [r0, #0]
    32cc:	cmp	r3, #192	; 0xc0
    32ce:	beq.n	335a <ExFatFile::syncDir()+0xae>
    32d0:	cmp	r3, #193	; 0xc1
    32d2:	beq.n	3318 <ExFatFile::syncDir()+0x6c>
    32d4:	cmp	r3, #133	; 0x85
    32d6:	bne.n	3346 <ExFatFile::syncDir()+0x9a>
        setLe16(df->attributes, m_attributes & FS_ATTRIB_COPY);
    32d8:	ldrb.w	r3, [r4, #49]	; 0x31
    32dc:	and.w	r3, r3, #55	; 0x37
    32e0:	strh	r3, [r0, #4]
        if (FsDateTime::callback) {
    32e2:	ldr.w	r3, [r8]
    32e6:	cbz	r3, 330a <ExFatFile::syncDir()+0x5e>
          uint16_t date, time;
          uint8_t ms10;
          FsDateTime::callback(&date, &time, &ms10);
    32e8:	add.w	r2, sp, #3
    32ec:	add.w	r1, sp, #6
    32f0:	add	r0, sp, #4
    32f2:	blx	r3
          df->modifyTimeMs = ms10;
    32f4:	ldrb.w	r3, [sp, #3]
          setLe16(df->modifyTime, time);
    32f8:	ldrh.w	r2, [sp, #6]
          df->modifyTimeMs = ms10;
    32fc:	strb	r3, [r5, #21]
          setLe16(df->modifyDate, date);
    32fe:	ldrh.w	r3, [sp, #4]
  *reinterpret_cast<uint16_t*>(dst) = src;
    3302:	strh	r2, [r5, #12]
    3304:	strh	r3, [r5, #14]
    3306:	strh	r2, [r5, #16]
    3308:	strh	r3, [r5, #18]
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
        }
        setLe64(ds->validLength, m_validLength);
        setLe32(ds->firstCluster, m_firstCluster);
        setLe64(ds->dataLength, m_dataLength);
        m_vol->dataCacheDirty();
    330a:	ldr	r2, [r4, #32]
  void dirty() { m_status |= CACHE_STATUS_DIRTY; }
    330c:	ldrb.w	r3, [r2, #528]	; 0x210
    3310:	orr.w	r3, r3, #1
    3314:	strb.w	r3, [r2, #528]	; 0x210
  for (uint8_t is = 0; is <= m_setCount; is++) {
    3318:	adds	r7, #1
      default:
        DBG_FAIL_MACRO;
        goto fail;
        break;
    }
    checksum = exFatDirChecksum(cache, checksum);
    331a:	mov	r1, r6
    331c:	mov	r0, r5
    331e:	bl	30e0 <exFatDirChecksum(unsigned char const*, unsigned short)>
  for (uint8_t is = 0; is <= m_setCount; is++) {
    3322:	ldrb.w	r2, [r4, #48]	; 0x30
    3326:	uxtb	r3, r7
    checksum = exFatDirChecksum(cache, checksum);
    3328:	mov	r6, r0
  for (uint8_t is = 0; is <= m_setCount; is++) {
    332a:	cmp	r2, r3
    332c:	bcs.n	32ba <ExFatFile::syncDir()+0xe>
  }
  df = reinterpret_cast<DirFile_t*>(
      m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_WRITE));
    332e:	movs	r2, #1
    3330:	add.w	r1, r4, #36	; 0x24
    3334:	ldr	r0, [r4, #32]
    3336:	bl	2e14 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    333a:	cbz	r0, 3346 <ExFatFile::syncDir()+0x9a>
    333c:	strh	r6, [r0, #2]
    DBG_FAIL_MACRO;
    goto fail;
  }
  setLe16(df->setChecksum, checksum);
  if (!m_vol->cacheSync()) {
    333e:	ldr	r0, [r4, #32]
    3340:	bl	310e <ExFatPartition::cacheSync()>
    3344:	cbnz	r0, 3354 <ExFatFile::syncDir()+0xa8>
    goto fail;
  }
  return true;

fail:
  m_error |= WRITE_ERROR;
    3346:	ldrb.w	r3, [r4, #50]	; 0x32
  return false;
    334a:	movs	r0, #0
  m_error |= WRITE_ERROR;
    334c:	orr.w	r3, r3, #1
    3350:	strb.w	r3, [r4, #50]	; 0x32
}
    3354:	add	sp, #8
    3356:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (isContiguous()) {
    335a:	ldrb.w	r2, [r4, #51]	; 0x33
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
    335e:	ldrb	r3, [r0, #1]
        if (isContiguous()) {
    3360:	lsls	r2, r2, #25
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
    3362:	ite	mi
    3364:	orrmi.w	r3, r3, #2
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
    3368:	andpl.w	r3, r3, #253	; 0xfd
    336c:	strb	r3, [r0, #1]
        setLe64(ds->validLength, m_validLength);
    336e:	ldrd	r2, r3, [r4, #16]
  *reinterpret_cast<uint64_t*>(dst) = src;
    3372:	strd	r2, r3, [r0, #8]
        setLe32(ds->firstCluster, m_firstCluster);
    3376:	ldr	r3, [r4, #28]
  *reinterpret_cast<uint32_t*>(dst) = src;
    3378:	str	r3, [r0, #20]
        setLe64(ds->dataLength, m_dataLength);
    337a:	ldrd	r2, r3, [r4, #8]
  *reinterpret_cast<uint64_t*>(dst) = src;
    337e:	strd	r2, r3, [r0, #24]
    3382:	b.n	330a <ExFatFile::syncDir()+0x5e>
    3384:	.word	0x200068ac

00003388 <ExFatFile::sync()>:
bool ExFatFile::sync() {
    3388:	push	{r4, lr}
  if (!isOpen()) {
    338a:	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::sync() {
    338e:	mov	r4, r0
  if (!isOpen()) {
    3390:	cbnz	r3, 3396 <ExFatFile::sync()+0xe>
    return true;
    3392:	movs	r0, #1
}
    3394:	pop	{r4, pc}
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    3396:	ldrsb.w	r2, [r0, #51]	; 0x33
    339a:	ldrb.w	r3, [r0, #51]	; 0x33
    339e:	cmp	r2, #0
    33a0:	bge.n	33b2 <ExFatFile::sync()+0x2a>
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    33a2:	and.w	r3, r3, #127	; 0x7f
    33a6:	strb.w	r3, [r0, #51]	; 0x33
}
    33aa:	ldmia.w	sp!, {r4, lr}
    return syncDir();
    33ae:	b.w	32ac <ExFatFile::syncDir()>
  if (!m_vol->cacheSync()) {
    33b2:	ldr	r0, [r0, #32]
    33b4:	bl	310e <ExFatPartition::cacheSync()>
    33b8:	cmp	r0, #0
    33ba:	bne.n	3392 <ExFatFile::sync()+0xa>
  m_error |= WRITE_ERROR;
    33bc:	ldrb.w	r3, [r4, #50]	; 0x32
    33c0:	orr.w	r3, r3, #1
    33c4:	strb.w	r3, [r4, #50]	; 0x32
  return false;
    33c8:	b.n	3394 <ExFatFile::sync()+0xc>

000033ca <ExFatFile::addDirCluster()>:
bool ExFatFile::addDirCluster() {
    33ca:	push	{r3, r4, r5, r6, r7, lr}
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    33cc:	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::addDirCluster() {
    33d0:	mov	r4, r0
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    33d2:	lsls	r2, r3, #25
    33d4:	bpl.n	3456 <ExFatFile::addDirCluster()+0x8c>
    33d6:	ldr	r0, [r0, #32]
    33d8:	bl	30c8 <ExFatPartition::rootLength()>
  uint32_t bytesPerCluster() const { return m_bytesPerCluster; }
    33dc:	ldr	r3, [r4, #32]
  dl += m_vol->bytesPerCluster();
    33de:	ldr.w	r3, [r3, #1084]	; 0x43c
    33e2:	add	r0, r3
  if (dl >= 0X4000000) {
    33e4:	cmp.w	r0, #67108864	; 0x4000000
    33e8:	bcs.n	3476 <ExFatFile::addDirCluster()+0xac>
  if (!addCluster()) {
    33ea:	mov	r0, r4
    33ec:	bl	3134 <ExFatFile::addCluster()>
    33f0:	cmp	r0, #0
    33f2:	beq.n	3476 <ExFatFile::addDirCluster()+0xac>
  sector = m_vol->clusterStartSector(m_curCluster);
    33f4:	ldr	r3, [r4, #32]
  for (uint32_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    33f6:	movs	r6, #0
           ((cluster - 2) << m_sectorsPerClusterShift);
    33f8:	ldr	r5, [r4, #24]
  uint32_t sectorsPerCluster() const { return 1UL << m_sectorsPerClusterShift; }
    33fa:	movs	r7, #1
           ((cluster - 2) << m_sectorsPerClusterShift);
    33fc:	ldrb.w	r2, [r3, #1093]	; 0x445
    3400:	subs	r5, #2
    3402:	ldr.w	r3, [r3, #1068]	; 0x42c
    3406:	lsls	r5, r2
    3408:	add	r5, r3
    340a:	ldr	r0, [r4, #32]
  uint32_t sectorsPerCluster() const { return 1UL << m_sectorsPerClusterShift; }
    340c:	ldrb.w	r3, [r0, #1093]	; 0x445
    3410:	lsl.w	r3, r7, r3
    3414:	cmp	r6, r3
    3416:	bcc.n	345a <ExFatFile::addDirCluster()+0x90>
  if (!isRoot()) {
    3418:	ldrb.w	r3, [r4, #49]	; 0x31
    341c:	lsls	r3, r3, #25
    341e:	bmi.n	344c <ExFatFile::addDirCluster()+0x82>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    3420:	ldrb.w	r3, [r4, #51]	; 0x33
    3424:	orn	r3, r3, #127	; 0x7f
    3428:	strb.w	r3, [r4, #51]	; 0x33
    m_dataLength += m_vol->bytesPerCluster();
    342c:	ldr.w	r2, [r0, #1084]	; 0x43c
    3430:	ldrd	r3, r1, [r4, #8]
    3434:	adds	r3, r3, r2
    3436:	adc.w	r1, r1, #0
    343a:	strd	r3, r1, [r4, #8]
    m_validLength += m_vol->bytesPerCluster();
    343e:	ldrd	r3, r1, [r4, #16]
    3442:	adds	r3, r3, r2
    3444:	adc.w	r1, r1, #0
    3448:	strd	r3, r1, [r4, #16]
  return sync();
    344c:	mov	r0, r4
}
    344e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return sync();
    3452:	b.w	3388 <ExFatFile::sync()>
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    3456:	ldr	r0, [r0, #8]
    3458:	b.n	33dc <ExFatFile::addDirCluster()+0x12>
    return m_dataCache.prepare(sector, option);
    345a:	movs	r2, #5
    345c:	adds	r1, r5, r6
    345e:	add.w	r0, r0, #528	; 0x210
    3462:	bl	1d0a <FsCache::prepare(unsigned long, unsigned char)>
    if (!cache) {
    3466:	cbz	r0, 3476 <ExFatFile::addDirCluster()+0xac>
    memset(cache, 0, m_vol->bytesPerSector());
    3468:	mov.w	r2, #512	; 0x200
    346c:	movs	r1, #0
  for (uint32_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    346e:	adds	r6, #1
    memset(cache, 0, m_vol->bytesPerSector());
    3470:	bl	7528 <memset>
  for (uint32_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    3474:	b.n	340a <ExFatFile::addDirCluster()+0x40>
}
    3476:	movs	r0, #0
    3478:	pop	{r3, r4, r5, r6, r7, pc}

0000347a <ExFatFile::mkdir(ExFatFile*, ExName_t*)>:
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
    347a:	push	{r4, lr}
  if (!parent->isDir()) {
    347c:	ldrb.w	r3, [r1, #49]	; 0x31
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
    3480:	mov	r4, r0
  if (!parent->isDir()) {
    3482:	tst.w	r3, #80	; 0x50
    3486:	beq.n	34be <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x44>
  if (!openPrivate(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    3488:	movw	r3, #2562	; 0xa02
    348c:	bl	2880 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    3490:	cbz	r0, 34be <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x44>
  m_attributes = FILE_ATTR_SUBDIR | FS_ATTRIB_ARCHIVE;
    3492:	movs	r3, #48	; 0x30
  if (!addDirCluster()) {
    3494:	mov	r0, r4
  m_attributes = FILE_ATTR_SUBDIR | FS_ATTRIB_ARCHIVE;
    3496:	strb.w	r3, [r4, #49]	; 0x31
  if (!addDirCluster()) {
    349a:	bl	33ca <ExFatFile::addDirCluster()>
    349e:	cbz	r0, 34be <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x44>
  m_firstCluster = m_curCluster;
    34a0:	ldr	r3, [r4, #24]
    34a2:	mov	r0, r4
    34a4:	movs	r2, #0
    34a6:	str	r3, [r4, #28]
    34a8:	movs	r3, #0
    34aa:	bl	27a0 <ExFatFile::seekSet(unsigned long long)>
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    34ae:	movs	r3, #193	; 0xc1
  return sync();
    34b0:	mov	r0, r4
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    34b2:	strb.w	r3, [r4, #51]	; 0x33
}
    34b6:	ldmia.w	sp!, {r4, lr}
  return sync();
    34ba:	b.w	3388 <ExFatFile::sync()>
}
    34be:	movs	r0, #0
    34c0:	pop	{r4, pc}

000034c2 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>:
bool ExFatFile::mkdir(ExFatFile* parent, const char* path, bool pFlag) {
    34c2:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    34c6:	mov	r8, r3
    34c8:	sub	sp, #88	; 0x58
  ExFatFile() {}
    34ca:	movs	r3, #0
    34cc:	mov	r5, r0
    34ce:	mov	r4, r1
    34d0:	str	r2, [sp, #4]
    34d2:	str	r3, [sp, #80]	; 0x50
  if (isOpen() || !parent->isDir()) {
    34d4:	ldrb.w	r3, [r0, #49]	; 0x31
    34d8:	cbz	r3, 34e2 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x20>
  return false;
    34da:	movs	r0, #0
}
    34dc:	add	sp, #88	; 0x58
    34de:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (isOpen() || !parent->isDir()) {
    34e2:	ldrb.w	r3, [r1, #49]	; 0x31
    34e6:	tst.w	r3, #80	; 0x50
    34ea:	beq.n	34da <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x18>
  if (isDirSeparator(*path)) {
    34ec:	ldrb	r3, [r2, #0]
    34ee:	cmp	r3, #47	; 0x2f
    34f0:	bne.n	3508 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x46>
    while (isDirSeparator(*path)) {
    34f2:	ldr	r2, [sp, #4]
    34f4:	ldrb	r3, [r2, #0]
    34f6:	cmp	r3, #47	; 0x2f
    34f8:	beq.n	3554 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x92>
    if (!tmpDir.openRoot(parent->m_vol)) {
    34fa:	ldr	r1, [r4, #32]
    34fc:	add	r0, sp, #32
    34fe:	bl	2544 <ExFatFile::openRoot(ExFatVolume*)>
    3502:	cmp	r0, #0
    3504:	beq.n	34da <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x18>
    parent = &tmpDir;
    3506:	add	r4, sp, #32
    if (!parsePathName(path, &fname, &path)) {
    3508:	add	r3, sp, #4
    350a:	add	r2, sp, #12
    350c:	ldr	r1, [sp, #4]
    350e:	mov	r0, r5
    3510:	bl	256c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    3514:	cmp	r0, #0
    3516:	beq.n	34da <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x18>
    if (!*path) {
    3518:	ldr	r3, [sp, #4]
    351a:	ldrb	r3, [r3, #0]
    351c:	cbz	r3, 3570 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xae>
    if (!openPrivate(parent, &fname, O_RDONLY)) {
    351e:	movs	r3, #0
    3520:	add	r2, sp, #12
    3522:	mov	r1, r4
    3524:	mov	r0, r5
    3526:	bl	2880 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    352a:	cbz	r0, 355a <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x98>
    tmpDir = *this;
    352c:	add	r6, sp, #32
    352e:	mov	r2, r5
    3530:	add.w	r3, r5, #48	; 0x30
    3534:	mov	r4, r6
    3536:	ldr	r0, [r2, #0]
    3538:	adds	r2, #8
    353a:	ldr.w	r1, [r2, #-4]
    353e:	mov	r7, r6
    3540:	cmp	r2, r3
    3542:	stmia	r7!, {r0, r1}
    3544:	mov	r6, r7
    3546:	bne.n	3536 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x74>
    3548:	ldr	r0, [r2, #0]
    354a:	str	r0, [r7, #0]
    close();
    354c:	mov	r0, r5
    354e:	bl	24f0 <ExFatFile::close()>
    if (!parsePathName(path, &fname, &path)) {
    3552:	b.n	3508 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x46>
      path++;
    3554:	adds	r2, #1
    3556:	str	r2, [sp, #4]
    3558:	b.n	34f2 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x30>
      if (!pFlag || !mkdir(parent, &fname)) {
    355a:	cmp.w	r8, #0
    355e:	beq.n	34da <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x18>
    3560:	add	r2, sp, #12
    3562:	mov	r1, r4
    3564:	mov	r0, r5
    3566:	bl	347a <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
    356a:	cmp	r0, #0
    356c:	bne.n	352c <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x6a>
    356e:	b.n	34da <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x18>
  return mkdir(parent, &fname);
    3570:	add	r2, sp, #12
    3572:	mov	r1, r4
    3574:	mov	r0, r5
    3576:	bl	347a <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
    357a:	b.n	34dc <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x1a>

0000357c <ExFatFile::rename(ExFatFile*, char const*)>:
bool ExFatFile::rename(ExFatFile* dirFile, const char* newPath) {
    357c:	push	{r4, r5, r6, r7, lr}
    357e:	mov	r4, r0
    3580:	sub	sp, #116	; 0x74
    3582:	movs	r0, #0
    3584:	str	r0, [sp, #48]	; 0x30
    3586:	str	r0, [sp, #104]	; 0x68
  if (!(isFile() || isSubDir())) {
    3588:	ldrb.w	r0, [r4, #49]	; 0x31
    358c:	tst.w	r0, #24
    3590:	bne.n	3598 <ExFatFile::rename(ExFatFile*, char const*)+0x1c>
  return false;
    3592:	movs	r0, #0
}
    3594:	add	sp, #116	; 0x74
    3596:	pop	{r4, r5, r6, r7, pc}
  if (m_vol != dirFile->m_vol) {
    3598:	ldr	r0, [r4, #32]
    359a:	ldr	r3, [r1, #32]
    359c:	cmp	r0, r3
    359e:	bne.n	3592 <ExFatFile::rename(ExFatFile*, char const*)+0x16>
  if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    35a0:	movw	r3, #2561	; 0xa01
    35a4:	mov	r0, sp
    35a6:	bl	2bd0 <ExFatFile::open(ExFatFile*, char const*, int)>
    35aa:	cmp	r0, #0
    35ac:	beq.n	3592 <ExFatFile::rename(ExFatFile*, char const*)+0x16>
  oldFile = *this;
    35ae:	add	r2, sp, #56	; 0x38
    35b0:	mov	r3, r4
    35b2:	add.w	r7, r4, #48	; 0x30
    35b6:	mov	r6, r2
    35b8:	ldr	r0, [r3, #0]
    35ba:	adds	r3, #8
    35bc:	ldr.w	r1, [r3, #-4]
    35c0:	mov	r5, r2
    35c2:	cmp	r3, r7
    35c4:	stmia	r5!, {r0, r1}
    35c6:	mov	r2, r5
    35c8:	bne.n	35b8 <ExFatFile::rename(ExFatFile*, char const*)+0x3c>
    35ca:	ldr	r0, [r3, #0]
  m_dirPos = file.m_dirPos;
    35cc:	add	r2, sp, #36	; 0x24
    35ce:	add.w	r3, r4, #36	; 0x24
  oldFile = *this;
    35d2:	str	r0, [r5, #0]
  m_dirPos = file.m_dirPos;
    35d4:	ldmia	r2, {r0, r1, r2}
    35d6:	stmia.w	r3, {r0, r1, r2}
  m_setCount = file.m_setCount;
    35da:	ldrb.w	r3, [sp, #48]	; 0x30
  if (!sync()) {
    35de:	mov	r0, r4
  m_setCount = file.m_setCount;
    35e0:	strb.w	r3, [r4, #48]	; 0x30
  m_flags |= FILE_FLAG_DIR_DIRTY;
    35e4:	ldrb.w	r3, [r4, #51]	; 0x33
    35e8:	orn	r3, r3, #127	; 0x7f
    35ec:	strb.w	r3, [r4, #51]	; 0x33
  if (!sync()) {
    35f0:	bl	3388 <ExFatFile::sync()>
    35f4:	cmp	r0, #0
    35f6:	beq.n	3592 <ExFatFile::rename(ExFatFile*, char const*)+0x16>
  oldFile.m_firstCluster = 0;
    35f8:	movs	r3, #0
  return oldFile.remove();
    35fa:	mov	r0, r6
  oldFile.m_firstCluster = 0;
    35fc:	str	r3, [sp, #84]	; 0x54
  oldFile.m_flags = FILE_FLAG_WRITE;
    35fe:	movs	r3, #2
    3600:	strb.w	r3, [sp, #107]	; 0x6b
  oldFile.m_attributes = FILE_ATTR_FILE;
    3604:	movs	r3, #8
    3606:	strb.w	r3, [sp, #105]	; 0x69
  return oldFile.remove();
    360a:	bl	31c8 <ExFatFile::remove()>
    360e:	b.n	3594 <ExFatFile::rename(ExFatFile*, char const*)+0x18>

00003610 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>:
//------------------------------------------------------------------------------
bool ExFatFile::timestamp(uint8_t flags, uint16_t year, uint8_t month,
                          uint8_t day, uint8_t hour, uint8_t minute,
                          uint8_t second) {
    3610:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3614:	mov	r7, r3
  uint16_t date;
  uint16_t time;
  uint8_t ms10;

  if (!isFile() || year < 1980 || year > 2107 || month < 1 || month > 12 ||
      day < 1 || day > 31 || hour > 23 || minute > 59 || second > 59) {
    3616:	ldrb.w	r3, [r0, #49]	; 0x31
                          uint8_t second) {
    361a:	mov	r4, r0
    361c:	mov	r9, r1
      day < 1 || day > 31 || hour > 23 || minute > 59 || second > 59) {
    361e:	lsls	r3, r3, #28
                          uint8_t second) {
    3620:	ldrb.w	r5, [sp, #40]	; 0x28
    3624:	ldrb.w	sl, [sp, #44]	; 0x2c
    3628:	ldrb.w	fp, [sp, #48]	; 0x30
    362c:	ldrb.w	r6, [sp, #52]	; 0x34
      day < 1 || day > 31 || hour > 23 || minute > 59 || second > 59) {
    3630:	bmi.n	3636 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x26>
    cache = dirCache(is, FsCache::CACHE_FOR_READ);
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    switch (cache[0]) {
    3632:	movs	r0, #0
    3634:	b.n	36e0 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xd0>
  if (!isFile() || year < 1980 || year > 2107 || month < 1 || month > 12 ||
    3636:	subw	r2, r2, #1980	; 0x7bc
    363a:	uxth.w	r8, r2
    363e:	cmp.w	r8, #127	; 0x7f
    3642:	bhi.n	3632 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x22>
    3644:	subs	r3, r7, #1
    3646:	cmp	r3, #11
    3648:	bhi.n	3632 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x22>
    364a:	subs	r3, r5, #1
    364c:	cmp	r3, #30
    364e:	bhi.n	3632 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x22>
      day < 1 || day > 31 || hour > 23 || minute > 59 || second > 59) {
    3650:	cmp.w	sl, #23
    3654:	bhi.n	3632 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x22>
    3656:	cmp.w	fp, #59	; 0x3b
    365a:	bhi.n	3632 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x22>
    365c:	cmp	r6, #59	; 0x3b
    365e:	bhi.n	3632 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x22>
  if (!sync()) {
    3660:	bl	3388 <ExFatFile::sync()>
    3664:	cmp	r0, #0
    3666:	beq.n	3632 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x22>
                                              : year << 9 | month << 5 | day;
    3668:	orr.w	r3, r5, r7, lsl #5
             : hour << 11 | minute << 5 | second >> 1;
    366c:	lsrs	r7, r6, #1
  ms10 = second & 1 ? 100 : 0;
    366e:	ands.w	r6, r6, #1
                                              : year << 9 | month << 5 | day;
    3672:	orr.w	r5, r3, r8, lsl #9
             : hour << 11 | minute << 5 | second >> 1;
    3676:	orr.w	r7, r7, fp, lsl #5
    367a:	mov.w	fp, #0
                                              : year << 9 | month << 5 | day;
    367e:	uxth	r5, r5
    3680:	it	ne
    3682:	movne	r6, #100	; 0x64
             : hour << 11 | minute << 5 | second >> 1;
    3684:	orr.w	r7, r7, sl, lsl #11
  uint16_t checksum = 0;
    3688:	mov	r8, fp
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setLe16(df->attributes, m_attributes & FS_ATTRIB_COPY);
        m_vol->dataCacheDirty();
        if (flags & T_ACCESS) {
    368a:	and.w	sl, r9, #1
    368e:	uxth	r7, r7
    cache = dirCache(is, FsCache::CACHE_FOR_READ);
    3690:	movs	r2, #0
    3692:	uxtb.w	r1, fp
    3696:	mov	r0, r4
    3698:	bl	24b8 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache) {
    369c:	cmp	r0, #0
    369e:	beq.n	3632 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x22>
    switch (cache[0]) {
    36a0:	ldrb	r3, [r0, #0]
    36a2:	cmp	r3, #133	; 0x85
    36a4:	beq.n	36e4 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xd4>
    36a6:	adds	r3, #64	; 0x40
    36a8:	uxtb	r3, r3
    36aa:	cmp	r3, #1
    36ac:	bhi.n	3632 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x22>
  for (uint8_t is = 0; is <= m_setCount; is++) {
    36ae:	add.w	fp, fp, #1
      default:
        DBG_FAIL_MACRO;
        goto fail;
        break;
    }
    checksum = exFatDirChecksum(cache, checksum);
    36b2:	mov	r1, r8
    36b4:	bl	30e0 <exFatDirChecksum(unsigned char const*, unsigned short)>
  for (uint8_t is = 0; is <= m_setCount; is++) {
    36b8:	ldrb.w	r2, [r4, #48]	; 0x30
    36bc:	uxtb.w	r3, fp
    checksum = exFatDirChecksum(cache, checksum);
    36c0:	mov	r8, r0
  for (uint8_t is = 0; is <= m_setCount; is++) {
    36c2:	cmp	r2, r3
    36c4:	bcs.n	3690 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x80>
  }
  df = reinterpret_cast<DirFile_t*>(
      m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_WRITE));
    36c6:	movs	r2, #1
    36c8:	add.w	r1, r4, #36	; 0x24
    36cc:	ldr	r0, [r4, #32]
    36ce:	bl	2e14 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    36d2:	cmp	r0, #0
    36d4:	beq.n	3632 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x22>
  *reinterpret_cast<uint16_t*>(dst) = src;
    36d6:	strh.w	r8, [r0, #2]
    DBG_FAIL_MACRO;
    goto fail;
  }
  setLe16(df->setChecksum, checksum);
  if (!m_vol->cacheSync()) {
    36da:	ldr	r0, [r4, #32]
    36dc:	bl	310e <ExFatPartition::cacheSync()>
  }
  return true;

fail:
  return false;
}
    36e0:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        setLe16(df->attributes, m_attributes & FS_ATTRIB_COPY);
    36e4:	ldrb.w	r3, [r4, #49]	; 0x31
        m_vol->dataCacheDirty();
    36e8:	ldr	r2, [r4, #32]
        setLe16(df->attributes, m_attributes & FS_ATTRIB_COPY);
    36ea:	and.w	r3, r3, #55	; 0x37
    36ee:	strh	r3, [r0, #4]
    36f0:	ldrb.w	r3, [r2, #528]	; 0x210
    36f4:	orr.w	r3, r3, #1
    36f8:	strb.w	r3, [r2, #528]	; 0x210
        if (flags & T_ACCESS) {
    36fc:	cmp.w	sl, #0
    3700:	beq.n	3706 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xf6>
    3702:	strh	r7, [r0, #16]
    3704:	strh	r5, [r0, #18]
        if (flags & T_CREATE) {
    3706:	tst.w	r9, #2
          df->createTimeMs = ms10;
    370a:	ittt	ne
    370c:	strbne	r6, [r0, #20]
    370e:	strhne	r7, [r0, #8]
    3710:	strhne	r5, [r0, #10]
        if (flags & T_WRITE) {
    3712:	tst.w	r9, #4
          df->modifyTimeMs = ms10;
    3716:	ittt	ne
    3718:	strbne	r6, [r0, #21]
    371a:	strhne	r7, [r0, #12]
    371c:	strhne	r5, [r0, #14]
}
    371e:	b.n	36ae <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x9e>

00003720 <ExFatFile::truncate()>:
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
    3720:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  bool isWritable() const { return m_flags & FILE_FLAG_WRITE; }
    3722:	ldrb.w	r2, [r0, #51]	; 0x33
    3726:	mov	r4, r0
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    3728:	lsls	r3, r2, #30
    372a:	bmi.n	3732 <ExFatFile::truncate()+0x12>
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

fail:
  return false;
    372c:	movs	r0, #0
}
    372e:	add	sp, #12
    3730:	pop	{r4, r5, r6, r7, pc}
  if (m_firstCluster == 0) {
    3732:	ldr	r3, [r0, #28]
    3734:	cmp	r3, #0
    3736:	beq.n	37e6 <ExFatFile::truncate()+0xc6>
  if (isContiguous()) {
    3738:	ands.w	r2, r2, #64	; 0x40
    if (m_curCluster) {
    373c:	ldr	r1, [r0, #24]
  if (isContiguous()) {
    373e:	beq.n	37b0 <ExFatFile::truncate()+0x90>
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    3740:	ldr	r0, [r0, #32]
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    3742:	ldrb.w	r5, [r0, #1093]	; 0x445
    3746:	ldrd	r2, r6, [r4, #8]
    374a:	adds	r5, #9
    374c:	subs	r2, #1
    374e:	uxtb	r5, r5
    3750:	adc.w	r6, r6, #4294967295
    3754:	rsb	ip, r5, #32
    3758:	sub.w	r7, r5, #32
    375c:	lsrs	r2, r5
    375e:	lsl.w	ip, r6, ip
    3762:	lsr.w	r7, r6, r7
    3766:	orr.w	r2, r2, ip
    376a:	orrs	r2, r7
    376c:	adds	r2, #1
    if (m_curCluster) {
    376e:	cbz	r1, 379c <ExFatFile::truncate()+0x7c>
      nc -= 1 + m_curCluster - m_firstCluster;
    3770:	subs	r3, #1
      toFree = m_curCluster + 1;
    3772:	adds	r5, r1, #1
      nc -= 1 + m_curCluster - m_firstCluster;
    3774:	subs	r3, r3, r1
      toFree = m_curCluster + 1;
    3776:	str	r5, [sp, #4]
      nc -= 1 + m_curCluster - m_firstCluster;
    3778:	add	r2, r3
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    377a:	cbnz	r2, 37a2 <ExFatFile::truncate()+0x82>
  return sync();
    377c:	mov	r0, r4
  m_dataLength = m_curPosition;
    377e:	ldrd	r2, r3, [r4]
    3782:	strd	r2, r3, [r4, #8]
  m_validLength = m_curPosition;
    3786:	strd	r2, r3, [r4, #16]
  m_flags |= FILE_FLAG_DIR_DIRTY;
    378a:	ldrb.w	r3, [r4, #51]	; 0x33
    378e:	orn	r3, r3, #127	; 0x7f
    3792:	strb.w	r3, [r4, #51]	; 0x33
  return sync();
    3796:	bl	3388 <ExFatFile::sync()>
    379a:	b.n	372e <ExFatFile::truncate()+0xe>
      toFree = m_firstCluster;
    379c:	str	r3, [sp, #4]
      m_firstCluster = 0;
    379e:	str	r1, [r4, #28]
    37a0:	b.n	377a <ExFatFile::truncate()+0x5a>
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    37a2:	movs	r3, #0
    37a4:	ldr	r1, [sp, #4]
    37a6:	bl	2d74 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
      if (!m_vol->freeChain(toFree)) {
    37aa:	cmp	r0, #0
    37ac:	bne.n	377c <ExFatFile::truncate()+0x5c>
    37ae:	b.n	372c <ExFatFile::truncate()+0xc>
    if (m_curCluster) {
    37b0:	cbz	r1, 37e0 <ExFatFile::truncate()+0xc0>
      toFree = 0;
    37b2:	str	r2, [sp, #4]
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    37b4:	add	r2, sp, #4
    37b6:	ldr	r0, [r0, #32]
    37b8:	bl	2e48 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
      if (fg < 0) {
    37bc:	cmp	r0, #0
    37be:	blt.n	372c <ExFatFile::truncate()+0xc>
      if (fg) {
    37c0:	beq.n	37d2 <ExFatFile::truncate()+0xb2>
        if (!m_vol->fatPut(m_curCluster, EXFAT_EOC)) {
    37c2:	mov.w	r2, #4294967295
    37c6:	ldr	r1, [r4, #24]
    37c8:	ldr	r0, [r4, #32]
    37ca:	bl	2eee <ExFatPartition::fatPut(unsigned long, unsigned long)>
    37ce:	cmp	r0, #0
    37d0:	beq.n	372c <ExFatFile::truncate()+0xc>
    if (toFree) {
    37d2:	ldr	r1, [sp, #4]
    37d4:	cmp	r1, #0
    37d6:	beq.n	377c <ExFatFile::truncate()+0x5c>
      if (!m_vol->freeChain(toFree)) {
    37d8:	ldr	r0, [r4, #32]
    37da:	bl	2f28 <ExFatPartition::freeChain(unsigned long)>
    37de:	b.n	37aa <ExFatFile::truncate()+0x8a>
      toFree = m_firstCluster;
    37e0:	str	r3, [sp, #4]
      m_firstCluster = 0;
    37e2:	str	r1, [r0, #28]
    37e4:	b.n	37d2 <ExFatFile::truncate()+0xb2>
    return true;
    37e6:	movs	r0, #1
    37e8:	b.n	372e <ExFatFile::truncate()+0xe>
	...

000037ec <ExFatFile::write(void const*, unsigned int)>:
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
    37ec:	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    37f0:	ldrb.w	r3, [r0, #51]	; 0x33
    37f4:	mov	r8, r1
    37f6:	mov	r4, r0
    37f8:	mov	r9, r2

  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    37fa:	lsls	r1, r3, #30
    37fc:	bpl.n	383c <ExFatFile::write(void const*, unsigned int)+0x50>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    37fe:	lsls	r2, r3, #28
    3800:	bmi.n	3830 <ExFatFile::write(void const*, unsigned int)+0x44>
        DBG_FAIL_MACRO;
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      n = m_vol->bytesPerSector();
    3802:	mov	r7, r9
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    3804:	add.w	sl, r4, #24
        cacheOption = FsCache::CACHE_FOR_WRITE;
    3808:	mov.w	fp, #1
    clusterOffset = m_curPosition & m_vol->clusterMask();
    380c:	ldrd	r5, r3, [r4]
  while (toWrite) {
    3810:	cbnz	r7, 384e <ExFatFile::write(void const*, unsigned int)+0x62>
    if (m_curPosition > m_validLength) {
      m_flags |= FILE_FLAG_DIR_DIRTY;
      m_validLength = m_curPosition;
    }
  }
  if (m_curPosition > m_dataLength) {
    3812:	ldrd	r1, r2, [r4, #8]
    3816:	cmp	r1, r5
    3818:	sbcs	r2, r3
    381a:	bcs.w	39e0 <ExFatFile::write(void const*, unsigned int)+0x1f4>
    m_dataLength = m_curPosition;
    381e:	strd	r5, r3, [r4, #8]
    // update fileSize and insure sync will update dir entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    3822:	ldrb.w	r3, [r4, #51]	; 0x33
    3826:	orn	r3, r3, #127	; 0x7f
    382a:	strb.w	r3, [r4, #51]	; 0x33
    382e:	b.n	39ea <ExFatFile::write(void const*, unsigned int)+0x1fe>
    if (!seekSet(m_validLength)) {
    3830:	ldrd	r2, r3, [r0, #16]
    3834:	bl	27a0 <ExFatFile::seekSet(unsigned long long)>
    3838:	cmp	r0, #0
    383a:	bne.n	3802 <ExFatFile::write(void const*, unsigned int)+0x16>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
    383c:	ldrb.w	r3, [r4, #50]	; 0x32
  return 0;
    3840:	mov.w	r9, #0
  m_error |= WRITE_ERROR;
    3844:	orr.w	r3, r3, #1
    3848:	strb.w	r3, [r4, #50]	; 0x32
  return 0;
    384c:	b.n	39ea <ExFatFile::write(void const*, unsigned int)+0x1fe>
    clusterOffset = m_curPosition & m_vol->clusterMask();
    384e:	ldr	r0, [r4, #32]
      if (m_curCluster != 0) {
    3850:	ldr	r1, [r4, #24]
    clusterOffset = m_curPosition & m_vol->clusterMask();
    3852:	ldr.w	r3, [r0, #1080]	; 0x438
    3856:	ands	r5, r3
    sectorOffset = clusterOffset & m_vol->sectorMask();
    3858:	ubfx	r6, r5, #0, #9
    if (clusterOffset == 0) {
    385c:	cbnz	r5, 38a8 <ExFatFile::write(void const*, unsigned int)+0xbc>
      if (m_curCluster != 0) {
    385e:	cmp	r1, #0
    3860:	beq.n	390e <ExFatFile::write(void const*, unsigned int)+0x122>
        if (isContiguous()) {
    3862:	ldrb.w	r3, [r4, #51]	; 0x33
    3866:	lsls	r3, r3, #25
    3868:	bpl.n	3900 <ExFatFile::write(void const*, unsigned int)+0x114>
    386a:	ldrb.w	r0, [r0, #1093]	; 0x445
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
    386e:	ldrd	r3, r2, [r4, #8]
    3872:	adds	r0, #9
    3874:	subs	r3, #1
    3876:	uxtb	r0, r0
    3878:	adc.w	r2, r2, #4294967295
    387c:	rsb	lr, r0, #32
    3880:	sub.w	ip, r0, #32
    3884:	lsrs	r3, r0
    3886:	lsl.w	lr, r2, lr
    388a:	lsr.w	ip, r2, ip
    388e:	ldr	r2, [r4, #28]
    3890:	orr.w	r3, r3, lr
    3894:	orr.w	r3, r3, ip
    3898:	add	r3, r2
          if (m_curCluster < lc) {
    389a:	cmp	r3, r1
    389c:	bhi.n	38fa <ExFatFile::write(void const*, unsigned int)+0x10e>
          if (!addCluster()) {
    389e:	mov	r0, r4
    38a0:	bl	3134 <ExFatFile::addCluster()>
    38a4:	cmp	r0, #0
    38a6:	beq.n	383c <ExFatFile::write(void const*, unsigned int)+0x50>
    sector = m_vol->clusterStartSector(m_curCluster) +
    38a8:	ldr.w	ip, [r4, #32]
             (clusterOffset >> m_vol->bytesPerSectorShift());
    38ac:	lsrs	r3, r5, #9
           ((cluster - 2) << m_sectorsPerClusterShift);
    38ae:	ldr	r1, [r4, #24]
    38b0:	ldrb.w	r2, [ip, #1093]	; 0x445
    38b4:	subs	r1, #2
    sector = m_vol->clusterStartSector(m_curCluster) +
    38b6:	ldr.w	r0, [ip, #1068]	; 0x42c
    38ba:	lsls	r1, r2
    38bc:	add.w	r1, r1, r5, lsr #9
    38c0:	add	r1, r0
    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
    38c2:	cbnz	r6, 3926 <ExFatFile::write(void const*, unsigned int)+0x13a>
    38c4:	cmp.w	r7, #512	; 0x200
    38c8:	bcc.n	3926 <ExFatFile::write(void const*, unsigned int)+0x13a>
    } else if (toWrite >= 2 * m_vol->bytesPerSector()) {
    38ca:	cmp.w	r7, #1024	; 0x400
    38ce:	ldr.w	lr, [ip, #536]	; 0x218
    38d2:	ldr.w	r0, [ip, #532]	; 0x214
    38d6:	bcs.n	39ae <ExFatFile::write(void const*, unsigned int)+0x1c2>
    if (isCached(sector)) {
    38d8:	cmp	r1, lr
    return m_blockDev->writeSector(sector, src);
    38da:	mov	r2, r8
    m_sector = 0XFFFFFFFF;
    38dc:	ittt	eq
    38de:	moveq.w	r3, #4294967295
    m_status = 0;
    38e2:	strbeq.w	r6, [ip, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    38e6:	streq.w	r3, [ip, #536]	; 0x218
    return m_blockDev->writeSector(sector, src);
    38ea:	ldr	r3, [r0, #0]
    38ec:	ldr	r3, [r3, #32]
    38ee:	blx	r3
      if (!m_vol->cacheSafeWrite(sector, src)) {
    38f0:	cmp	r0, #0
    38f2:	beq.n	383c <ExFatFile::write(void const*, unsigned int)+0x50>
      n = m_vol->bytesPerSector();
    38f4:	mov.w	r5, #512	; 0x200
    38f8:	b.n	397a <ExFatFile::write(void const*, unsigned int)+0x18e>
            m_curCluster++;
    38fa:	adds	r1, #1
    38fc:	str	r1, [r4, #24]
        if (fg == 0) {
    38fe:	b.n	38a8 <ExFatFile::write(void const*, unsigned int)+0xbc>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    3900:	mov	r2, sl
    3902:	bl	2e48 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    3906:	cmp	r0, #0
    3908:	blt.n	383c <ExFatFile::write(void const*, unsigned int)+0x50>
        if (fg == 0) {
    390a:	beq.n	389e <ExFatFile::write(void const*, unsigned int)+0xb2>
    390c:	b.n	38a8 <ExFatFile::write(void const*, unsigned int)+0xbc>
        if (m_firstCluster == 0) {
    390e:	ldr	r3, [r4, #28]
    3910:	cbnz	r3, 3922 <ExFatFile::write(void const*, unsigned int)+0x136>
          if (!addCluster()) {
    3912:	mov	r0, r4
    3914:	bl	3134 <ExFatFile::addCluster()>
    3918:	cmp	r0, #0
    391a:	beq.n	383c <ExFatFile::write(void const*, unsigned int)+0x50>
          m_firstCluster = m_curCluster;
    391c:	ldr	r3, [r4, #24]
    391e:	str	r3, [r4, #28]
    3920:	b.n	38a8 <ExFatFile::write(void const*, unsigned int)+0xbc>
          m_curCluster = m_firstCluster;
    3922:	str	r3, [r4, #24]
    3924:	b.n	38a8 <ExFatFile::write(void const*, unsigned int)+0xbc>
      n = m_vol->bytesPerSector() - sectorOffset;
    3926:	rsb	r5, r6, #512	; 0x200
    392a:	cmp	r5, r7
    392c:	it	cs
    392e:	movcs	r5, r7
      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
    3930:	cmp	r6, #0
    3932:	bne.n	39aa <ExFatFile::write(void const*, unsigned int)+0x1be>
    3934:	ldr	r3, [r4, #20]
    3936:	ldr	r0, [r4, #0]
    3938:	str	r3, [sp, #4]
    393a:	ldr	r3, [r4, #16]
    393c:	ldr	r2, [r4, #4]
    393e:	cmp	r0, r3
    3940:	ldr	r3, [sp, #4]
    3942:	sbcs.w	r3, r2, r3
    3946:	bcc.n	39aa <ExFatFile::write(void const*, unsigned int)+0x1be>
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    3948:	movs	r2, #5
    return m_dataCache.prepare(sector, option);
    394a:	add.w	r0, ip, #528	; 0x210
    394e:	bl	1d0a <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    3952:	cmp	r0, #0
    3954:	beq.w	383c <ExFatFile::write(void const*, unsigned int)+0x50>
      memcpy(dst, src, n);
    3958:	add	r0, r6
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    395a:	add	r6, r5
      memcpy(dst, src, n);
    395c:	mov	r2, r5
    395e:	mov	r1, r8
    3960:	bl	756c <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    3964:	cmp.w	r6, #512	; 0x200
    3968:	ldr	r0, [r4, #32]
    396a:	bne.n	397a <ExFatFile::write(void const*, unsigned int)+0x18e>
  bool dataCacheSync() { return m_dataCache.sync(); }
    396c:	add.w	r0, r0, #528	; 0x210
    3970:	bl	1cba <FsCache::sync()>
      if (!m_vol->cacheSafeWrite(sector, src, ns)) {
    3974:	cmp	r0, #0
    3976:	beq.w	383c <ExFatFile::write(void const*, unsigned int)+0x50>
    src += n;
    397a:	add	r8, r5
    toWrite -= n;
    397c:	subs	r7, r7, r5
    m_curPosition += n;
    397e:	ldrd	r3, r2, [r4]
    if (m_curPosition > m_validLength) {
    3982:	ldrd	r0, r1, [r4, #16]
    m_curPosition += n;
    3986:	adds	r3, r5, r3
    3988:	adc.w	r2, r2, #0
    if (m_curPosition > m_validLength) {
    398c:	cmp	r0, r3
    398e:	sbcs	r1, r2
      m_flags |= FILE_FLAG_DIR_DIRTY;
    3990:	itt	cc
    3992:	ldrbcc.w	r1, [r4, #51]	; 0x33
    3996:	orncc	r1, r1, #127	; 0x7f
    m_curPosition += n;
    399a:	strd	r3, r2, [r4]
      m_flags |= FILE_FLAG_DIR_DIRTY;
    399e:	itt	cc
    39a0:	strbcc.w	r1, [r4, #51]	; 0x33
      m_validLength = m_curPosition;
    39a4:	strdcc	r3, r2, [r4, #16]
    39a8:	b.n	380c <ExFatFile::write(void const*, unsigned int)+0x20>
        cacheOption = FsCache::CACHE_FOR_WRITE;
    39aa:	movs	r2, #1
    39ac:	b.n	394a <ExFatFile::write(void const*, unsigned int)+0x15e>
  uint32_t sectorsPerCluster() const { return 1UL << m_sectorsPerClusterShift; }
    39ae:	lsl.w	r2, fp, r2
                       (clusterOffset >> m_vol->bytesPerSectorShift());
    39b2:	subs	r3, r2, r3
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
    39b4:	lsrs	r2, r7, #9
    39b6:	cmp	r3, r2
    39b8:	it	cs
    39ba:	movcs	r3, r2
    return sector <= m_sector && m_sector < (sector + count);
    39bc:	cmp	r1, lr
      n = ns << m_vol->bytesPerSectorShift();
    39be:	mov.w	r5, r3, lsl #9
    39c2:	bhi.n	39d6 <ExFatFile::write(void const*, unsigned int)+0x1ea>
    39c4:	adds	r2, r1, r3
    39c6:	cmp	r2, lr
    m_sector = 0XFFFFFFFF;
    39c8:	ittt	hi
    39ca:	movhi.w	r2, #4294967295
    m_status = 0;
    39ce:	strbhi.w	r6, [ip, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    39d2:	strhi.w	r2, [ip, #536]	; 0x218
    return m_blockDev->writeSectors(sector, src, count);
    39d6:	ldr	r2, [r0, #0]
    39d8:	ldr	r6, [r2, #36]	; 0x24
    39da:	mov	r2, r8
    39dc:	blx	r6
    39de:	b.n	3974 <ExFatFile::write(void const*, unsigned int)+0x188>
  } else if (FsDateTime::callback) {
    39e0:	ldr	r3, [pc, #16]	; (39f4 <ExFatFile::write(void const*, unsigned int)+0x208>)
    39e2:	ldr	r3, [r3, #0]
    39e4:	cmp	r3, #0
    39e6:	bne.w	3822 <ExFatFile::write(void const*, unsigned int)+0x36>
}
    39ea:	mov	r0, r9
    39ec:	add	sp, #12
    39ee:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    39f2:	nop
    39f4:	.word	0x200068ac

000039f8 <Print::write(char const*) [clone .isra.0]>:
    39f8:	push	{r0, r1, r4, lr}
    39fa:	mov	r4, r0
    39fc:	mov	r0, r1
    39fe:	str	r1, [sp, #4]
    3a00:	bl	b240 <strlen>
    3a04:	ldr	r3, [r4, #0]
    3a06:	mov	r2, r0
    3a08:	ldr	r1, [sp, #4]
    3a0a:	mov	r0, r4
    3a0c:	ldr	r3, [r3, #4]
    3a0e:	add	sp, #8
    3a10:	ldmia.w	sp!, {r4, lr}
    3a14:	bx	r3
	...

00003a18 <FatFormatter::initFatDir(unsigned char, unsigned long)>:
    writeMsg("Format Failed\r\n");
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool FatFormatter::initFatDir(uint8_t fatType, uint32_t sectorCount) {
    3a18:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3a1c:	mov	r4, r0
    3a1e:	mov	r7, r1
    3a20:	mov	r6, r2
  size_t n;
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
    3a22:	movs	r1, #0
    3a24:	mov.w	r2, #512	; 0x200
    3a28:	ldr	r0, [r0, #36]	; 0x24
    3a2a:	bl	7528 <memset>
  writeMsg("Writing FAT ");
    3a2e:	ldr	r0, [r4, #32]
    3a30:	cbz	r0, 3a38 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x20>
    3a32:	ldr	r1, [pc, #144]	; (3ac4 <FatFormatter::initFatDir(unsigned char, unsigned long)+0xac>)
    3a34:	bl	39f8 <Print::write(char const*) [clone .isra.0]>
  for (uint32_t i = 1; i < sectorCount; i++) {
    if (!m_dev->writeSector(m_fatStart + i, m_secBuf)) {
      return false;
    }
    if ((i % (sectorCount / 32)) == 0) {
    3a38:	mov.w	r8, r6, lsr #5
    3a3c:	movs	r5, #1
      writeMsg(".");
    3a3e:	ldr.w	r9, [pc, #140]	; 3acc <FatFormatter::initFatDir(unsigned char, unsigned long)+0xb4>
    3a42:	b.n	3a6c <FatFormatter::initFatDir(unsigned char, unsigned long)+0x54>
    if (!m_dev->writeSector(m_fatStart + i, m_secBuf)) {
    3a44:	ldr	r0, [r4, #28]
    3a46:	ldr	r1, [r4, #12]
    3a48:	ldr	r3, [r0, #0]
    3a4a:	ldr	r2, [r4, #36]	; 0x24
    3a4c:	add	r1, r5
    3a4e:	ldr	r3, [r3, #32]
    3a50:	blx	r3
    3a52:	cmp	r0, #0
    3a54:	beq.n	3abc <FatFormatter::initFatDir(unsigned char, unsigned long)+0xa4>
    if ((i % (sectorCount / 32)) == 0) {
    3a56:	udiv	r3, r5, r8
    3a5a:	mls	r3, r8, r3, r5
    3a5e:	cbnz	r3, 3a6a <FatFormatter::initFatDir(unsigned char, unsigned long)+0x52>
      writeMsg(".");
    3a60:	ldr	r0, [r4, #32]
    3a62:	cbz	r0, 3a6a <FatFormatter::initFatDir(unsigned char, unsigned long)+0x52>
    3a64:	mov	r1, r9
    3a66:	bl	39f8 <Print::write(char const*) [clone .isra.0]>
  for (uint32_t i = 1; i < sectorCount; i++) {
    3a6a:	adds	r5, #1
    3a6c:	cmp	r5, r6
    3a6e:	bcc.n	3a44 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x2c>
    }
  }
  writeMsg("\r\n");
    3a70:	ldr	r0, [r4, #32]
    3a72:	cbz	r0, 3a7a <FatFormatter::initFatDir(unsigned char, unsigned long)+0x62>
    3a74:	ldr	r1, [pc, #80]	; (3ac8 <FatFormatter::initFatDir(unsigned char, unsigned long)+0xb0>)
    3a76:	bl	39f8 <Print::write(char const*) [clone .isra.0]>
  // Allocate reserved clusters and root for FAT32.
  m_secBuf[0] = 0XF8;
    3a7a:	movs	r2, #248	; 0xf8
    3a7c:	ldr	r3, [r4, #36]	; 0x24
  n = fatType == 16 ? 4 : 12;
    3a7e:	cmp	r7, #16
  for (size_t i = 1; i < n; i++) {
    m_secBuf[i] = 0XFF;
    3a80:	mov.w	r0, #255	; 0xff
  m_secBuf[0] = 0XF8;
    3a84:	strb	r2, [r3, #0]
  for (size_t i = 1; i < n; i++) {
    3a86:	mov.w	r3, #1
  n = fatType == 16 ? 4 : 12;
    3a8a:	ite	eq
    3a8c:	moveq	r2, #4
    3a8e:	movne	r2, #12
    m_secBuf[i] = 0XFF;
    3a90:	ldr	r1, [r4, #36]	; 0x24
    3a92:	strb	r0, [r1, r3]
  for (size_t i = 1; i < n; i++) {
    3a94:	adds	r3, #1
    3a96:	cmp	r2, r3
    3a98:	bne.n	3a90 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x78>
  }
  return m_dev->writeSector(m_fatStart, m_secBuf) &&
    3a9a:	ldr	r0, [r4, #28]
    3a9c:	ldr	r2, [r4, #36]	; 0x24
    3a9e:	ldr	r3, [r0, #0]
    3aa0:	ldr	r1, [r4, #12]
    3aa2:	ldr	r3, [r3, #32]
    3aa4:	blx	r3
    3aa6:	cbz	r0, 3abc <FatFormatter::initFatDir(unsigned char, unsigned long)+0xa4>
         m_dev->writeSector(m_fatStart + m_fatSize, m_secBuf);
    3aa8:	ldr	r0, [r4, #28]
    3aaa:	ldr	r2, [r4, #36]	; 0x24
    3aac:	ldr	r3, [r0, #0]
    3aae:	ldrd	r1, r5, [r4, #8]
    3ab2:	ldr	r3, [r3, #32]
    3ab4:	add	r1, r5
}
    3ab6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
         m_dev->writeSector(m_fatStart + m_fatSize, m_secBuf);
    3aba:	bx	r3
}
    3abc:	movs	r0, #0
    3abe:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3ac2:	nop
    3ac4:	.word	0x200011ad
    3ac8:	.word	0x20001162
    3acc:	.word	0x20001459

00003ad0 <FatFormatter::initPbs()>:
//------------------------------------------------------------------------------
void FatFormatter::initPbs() {
    3ad0:	push	{r3, r4, r5, lr}
  PbsFat_t* pbs = reinterpret_cast<PbsFat_t*>(m_secBuf);
    3ad2:	ldr	r3, [r0, #36]	; 0x24
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
    3ad4:	mov.w	r5, #512	; 0x200
void FatFormatter::initPbs() {
    3ad8:	mov	r4, r0
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
    3ada:	movs	r1, #0
    3adc:	mov	r2, r5
    3ade:	mov	r0, r3
    3ae0:	bl	7528 <memset>
  pbs->jmpInstruction[0] = 0XEB;
    3ae4:	movs	r2, #235	; 0xeb
  *reinterpret_cast<uint16_t*>(dst) = src;
    3ae6:	strh.w	r5, [r0, #11]
    3aea:	strb	r2, [r0, #0]
  pbs->jmpInstruction[1] = 0X76;
    3aec:	movs	r2, #118	; 0x76
    3aee:	strb	r2, [r0, #1]
  pbs->jmpInstruction[2] = 0X90;
    3af0:	movs	r2, #144	; 0x90
    3af2:	strb	r2, [r0, #2]
  for (uint8_t i = 0; i < sizeof(pbs->oemName); i++) {
    pbs->oemName[i] = ' ';
    3af4:	mov.w	r2, #538976288	; 0x20202020
    3af8:	str.w	r2, [r0, #3]
    3afc:	str.w	r2, [r0, #7]
  }
  setLe16(pbs->bpb.bpb16.bytesPerSector, BYTES_PER_SECTOR);
  pbs->bpb.bpb16.sectorsPerCluster = m_sectorsPerCluster;
    3b00:	ldrb.w	r2, [r4, #43]	; 0x2b
    3b04:	strb	r2, [r0, #13]
  setLe16(pbs->bpb.bpb16.reservedSectorCount, m_reservedSectorCount);
    3b06:	ldrh	r2, [r4, #40]	; 0x28
    3b08:	strh	r2, [r0, #14]
  pbs->bpb.bpb16.fatCount = 2;
    3b0a:	movs	r2, #2
    3b0c:	strb	r2, [r0, #16]
  // skip rootDirEntryCount
  // skip totalSectors16
  pbs->bpb.bpb16.mediaType = 0XF8;
    3b0e:	movs	r2, #248	; 0xf8
    3b10:	strb	r2, [r0, #21]
  // skip sectorsPerFat16
  // skip sectorsPerTrack
  // skip headCount
  setLe32(pbs->bpb.bpb16.hidddenSectors, m_relativeSectors);
    3b12:	ldr	r2, [r4, #16]
  *reinterpret_cast<uint32_t*>(dst) = src;
    3b14:	str	r2, [r0, #28]
  setLe32(pbs->bpb.bpb16.totalSectors32, m_totalSectors);
    3b16:	ldr	r2, [r4, #24]
    3b18:	str	r2, [r0, #32]
  *reinterpret_cast<uint16_t*>(dst) = src;
    3b1a:	movw	r2, #43605	; 0xaa55
    3b1e:	strh.w	r2, [r0, #510]	; 0x1fe
  // skip rest of bpb
  setLe16(pbs->signature, PBR_SIGNATURE);
}
    3b22:	pop	{r3, r4, r5, pc}

00003b24 <FatFormatter::writeMbr()>:
    return false;
  }
  return initFatDir(32, 2 * m_fatSize + m_sectorsPerCluster);
}
//------------------------------------------------------------------------------
bool FatFormatter::writeMbr() {
    3b24:	push	{r4, r5, r6, lr}
    3b26:	mov	r4, r0
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
    3b28:	mov.w	r2, #512	; 0x200
    3b2c:	movs	r1, #0
    3b2e:	ldr	r0, [r0, #36]	; 0x24
    3b30:	bl	7528 <memset>
  MbrSector_t* mbr = reinterpret_cast<MbrSector_t*>(m_secBuf);
    3b34:	ldr	r5, [r4, #36]	; 0x24

#if USE_LBA_TO_CHS
  lbaToMbrChs(mbr->part->beginCHS, m_capacityMB, m_relativeSectors);
    3b36:	ldr	r2, [r4, #16]
    3b38:	ldr	r1, [r4, #0]
    3b3a:	addw	r0, r5, #447	; 0x1bf
    3b3e:	bl	1c2c <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)>
  lbaToMbrChs(mbr->part->endCHS, m_capacityMB,
              m_relativeSectors + m_totalSectors - 1);
    3b42:	ldr	r3, [r4, #24]
    3b44:	ldr	r2, [r4, #16]
  lbaToMbrChs(mbr->part->endCHS, m_capacityMB,
    3b46:	addw	r0, r5, #451	; 0x1c3
    3b4a:	ldr	r1, [r4, #0]
              m_relativeSectors + m_totalSectors - 1);
    3b4c:	add	r2, r3
  lbaToMbrChs(mbr->part->endCHS, m_capacityMB,
    3b4e:	subs	r2, #1
    3b50:	bl	1c2c <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)>
  mbr->part->endCHS[0] = 0XFE;
  mbr->part->endCHS[1] = 0XFF;
  mbr->part->endCHS[2] = 0XFF;
#endif  // USE_LBA_TO_CHS

  mbr->part->type = m_partType;
    3b54:	ldrb.w	r3, [r4, #42]	; 0x2a
  setLe32(mbr->part->relativeSectors, m_relativeSectors);
  setLe32(mbr->part->totalSectors, m_totalSectors);
  setLe16(mbr->signature, MBR_SIGNATURE);
  return m_dev->writeSector(0, m_secBuf);
    3b58:	movs	r1, #0
  mbr->part->type = m_partType;
    3b5a:	strb.w	r3, [r5, #450]	; 0x1c2
  setLe32(mbr->part->relativeSectors, m_relativeSectors);
    3b5e:	ldr	r3, [r4, #16]
  return m_dev->writeSector(0, m_secBuf);
    3b60:	ldr	r0, [r4, #28]
  *reinterpret_cast<uint32_t*>(dst) = src;
    3b62:	str.w	r3, [r5, #454]	; 0x1c6
  setLe32(mbr->part->totalSectors, m_totalSectors);
    3b66:	ldr	r3, [r4, #24]
  return m_dev->writeSector(0, m_secBuf);
    3b68:	ldr	r2, [r4, #36]	; 0x24
    3b6a:	str.w	r3, [r5, #458]	; 0x1ca
  *reinterpret_cast<uint16_t*>(dst) = src;
    3b6e:	movw	r3, #43605	; 0xaa55
    3b72:	strh.w	r3, [r5, #510]	; 0x1fe
    3b76:	ldr	r3, [r0, #0]
}
    3b78:	ldmia.w	sp!, {r4, r5, r6, lr}
  return m_dev->writeSector(0, m_secBuf);
    3b7c:	ldr	r3, [r3, #32]
    3b7e:	bx	r3

00003b80 <FatFormatter::makeFat16()>:
bool FatFormatter::makeFat16() {
    3b80:	push	{r3, r4, r5, r6, r7, lr}
    nc = (m_sectorCount - m_dataStart) / m_sectorsPerCluster;
    3b82:	ldr.w	ip, [r0, #20]
  for (m_dataStart = 2 * BU16;; m_dataStart += BU16) {
    3b86:	mov.w	r3, #256	; 0x100
bool FatFormatter::makeFat16() {
    3b8a:	mov	r4, r0
  PbsFat_t* pbs = reinterpret_cast<PbsFat_t*>(m_secBuf);
    3b8c:	ldr	r5, [r0, #36]	; 0x24
    nc = (m_sectorCount - m_dataStart) / m_sectorsPerCluster;
    3b8e:	ldrb.w	r6, [r0, #43]	; 0x2b
  for (m_dataStart = 2 * BU16;; m_dataStart += BU16) {
    3b92:	str	r3, [r0, #4]
    nc = (m_sectorCount - m_dataStart) / m_sectorsPerCluster;
    3b94:	ldr	r3, [r4, #4]
    3b96:	sub.w	r1, ip, r3
    3b9a:	udiv	r1, r1, r6
    m_fatSize = (nc + 2 + (BYTES_PER_SECTOR / 2) - 1) / (BYTES_PER_SECTOR / 2);
    3b9e:	addw	r0, r1, #257	; 0x101
    3ba2:	lsrs	r0, r0, #8
    uint32_t r = BU16 + 1 + 2 * m_fatSize + FAT16_ROOT_SECTOR_COUNT;
    3ba4:	lsls	r2, r0, #1
    3ba6:	add.w	r7, r2, #161	; 0xa1
    if (m_dataStart >= r) {
    3baa:	cmp	r3, r7
    3bac:	bcc.n	3bd0 <FatFormatter::makeFat16()+0x50>
      m_relativeSectors = m_dataStart - r + BU16;
    3bae:	subs	r3, r3, r7
    3bb0:	str	r0, [r4, #8]
    3bb2:	add.w	r0, r3, #128	; 0x80
    3bb6:	str	r0, [r4, #16]
  if (nc < 4085 || nc >= 65525) {
    3bb8:	subw	r0, r1, #4085	; 0xff5
    3bbc:	cmp.w	r0, #61440	; 0xf000
    3bc0:	bcc.n	3bd6 <FatFormatter::makeFat16()+0x56>
    writeMsg("Bad cluster count\r\n");
    3bc2:	ldr	r0, [r4, #32]
    3bc4:	cbz	r0, 3bcc <FatFormatter::makeFat16()+0x4c>
    3bc6:	ldr	r1, [pc, #172]	; (3c74 <FatFormatter::makeFat16()+0xf4>)
    3bc8:	bl	39f8 <Print::write(char const*) [clone .isra.0]>
}
    3bcc:	movs	r0, #0
    3bce:	pop	{r3, r4, r5, r6, r7, pc}
  for (m_dataStart = 2 * BU16;; m_dataStart += BU16) {
    3bd0:	adds	r3, #128	; 0x80
    3bd2:	str	r3, [r4, #4]
  }
    3bd4:	b.n	3b94 <FatFormatter::makeFat16()+0x14>
  m_fatStart = m_relativeSectors + m_reservedSectorCount;
    3bd6:	adds	r3, #129	; 0x81
  m_reservedSectorCount = 1;
    3bd8:	movs	r0, #1
  m_fatStart = m_relativeSectors + m_reservedSectorCount;
    3bda:	str	r3, [r4, #12]
      nc * m_sectorsPerCluster + 2 * m_fatSize + m_reservedSectorCount + 32;
    3bdc:	mla	r3, r1, r6, r2
  m_reservedSectorCount = 1;
    3be0:	strh	r0, [r4, #40]	; 0x28
  if (!writeMbr()) {
    3be2:	mov	r0, r4
      nc * m_sectorsPerCluster + 2 * m_fatSize + m_reservedSectorCount + 32;
    3be4:	adds	r3, #33	; 0x21
    m_partType = 0X06;
    3be6:	cmp.w	r3, #65536	; 0x10000
  m_totalSectors =
    3bea:	str	r3, [r4, #24]
    m_partType = 0X06;
    3bec:	ite	cc
    3bee:	movcc	r3, #4
    3bf0:	movcs	r3, #6
    3bf2:	strb.w	r3, [r4, #42]	; 0x2a
  if (!writeMbr()) {
    3bf6:	bl	3b24 <FatFormatter::writeMbr()>
    3bfa:	cmp	r0, #0
    3bfc:	beq.n	3bcc <FatFormatter::makeFat16()+0x4c>
  initPbs();
    3bfe:	mov	r0, r4
    3c00:	bl	3ad0 <FatFormatter::initPbs()>
    3c04:	mov.w	r3, #512	; 0x200
    3c08:	strh.w	r3, [r5, #17]
  setLe16(pbs->bpb.bpb16.sectorsPerFat16, m_fatSize);
    3c0c:	ldr	r3, [r4, #8]
    3c0e:	strh	r3, [r5, #22]
  pbs->bpb.bpb16.physicalDriveNumber = 0X80;
    3c10:	movs	r3, #128	; 0x80
    3c12:	strb.w	r3, [r5, #36]	; 0x24
  pbs->bpb.bpb16.extSignature = EXTENDED_BOOT_SIGNATURE;
    3c16:	movs	r3, #41	; 0x29
    3c18:	strb.w	r3, [r5, #38]	; 0x26
  *reinterpret_cast<uint32_t*>(dst) = src;
    3c1c:	ldr	r3, [pc, #88]	; (3c78 <FatFormatter::makeFat16()+0xf8>)
    3c1e:	str.w	r3, [r5, #39]	; 0x27
    pbs->bpb.bpb16.volumeLabel[i] = ' ';
    3c22:	mov.w	r3, #538976288	; 0x20202020
    3c26:	str.w	r3, [r5, #47]	; 0x2f
    3c2a:	str.w	r3, [r5, #43]	; 0x2b
    3c2e:	str.w	r3, [r5, #50]	; 0x32
  pbs->bpb.bpb16.volumeType[0] = 'F';
    3c32:	movs	r3, #70	; 0x46
    3c34:	strb.w	r3, [r5, #54]	; 0x36
  pbs->bpb.bpb16.volumeType[1] = 'A';
    3c38:	movs	r3, #65	; 0x41
    3c3a:	strb.w	r3, [r5, #55]	; 0x37
  pbs->bpb.bpb16.volumeType[2] = 'T';
    3c3e:	movs	r3, #84	; 0x54
    3c40:	strb.w	r3, [r5, #56]	; 0x38
  pbs->bpb.bpb16.volumeType[3] = '1';
    3c44:	movs	r3, #49	; 0x31
    3c46:	strb.w	r3, [r5, #57]	; 0x39
  pbs->bpb.bpb16.volumeType[4] = '6';
    3c4a:	movs	r3, #54	; 0x36
    3c4c:	strb.w	r3, [r5, #58]	; 0x3a
  if (!m_dev->writeSector(m_relativeSectors, m_secBuf)) {
    3c50:	ldr	r0, [r4, #28]
    3c52:	ldr	r2, [r4, #36]	; 0x24
    3c54:	ldr	r3, [r0, #0]
    3c56:	ldr	r1, [r4, #16]
    3c58:	ldr	r3, [r3, #32]
    3c5a:	blx	r3
    3c5c:	cmp	r0, #0
    3c5e:	beq.n	3bcc <FatFormatter::makeFat16()+0x4c>
  return initFatDir(16, m_dataStart - m_fatStart);
    3c60:	ldr	r2, [r4, #4]
    3c62:	mov	r0, r4
    3c64:	ldr	r3, [r4, #12]
    3c66:	movs	r1, #16
    3c68:	subs	r2, r2, r3
}
    3c6a:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return initFatDir(16, m_dataStart - m_fatStart);
    3c6e:	b.w	3a18 <FatFormatter::initFatDir(unsigned char, unsigned long)>
    3c72:	nop
    3c74:	.word	0x20001183
    3c78:	.word	0x0012d687

00003c7c <FatFormatter::makeFat32()>:
bool FatFormatter::makeFat32() {
    3c7c:	push	{r3, r4, r5, r6, r7, lr}
  m_relativeSectors = BU32;
    3c7e:	mov.w	r3, #8192	; 0x2000
bool FatFormatter::makeFat32() {
    3c82:	mov	r4, r0
  PbsFat_t* pbs = reinterpret_cast<PbsFat_t*>(m_secBuf);
    3c84:	ldr	r5, [r0, #36]	; 0x24
    uint32_t r = m_relativeSectors + 9 + 2 * m_fatSize;
    3c86:	movw	ip, #8201	; 0x2009
  m_relativeSectors = BU32;
    3c8a:	str	r3, [r0, #16]
  for (m_dataStart = 2 * BU32;; m_dataStart += BU32) {
    3c8c:	mov.w	r3, #16384	; 0x4000
    nc = (m_sectorCount - m_dataStart) / m_sectorsPerCluster;
    3c90:	ldr	r7, [r0, #20]
    3c92:	ldrb.w	r6, [r0, #43]	; 0x2b
  for (m_dataStart = 2 * BU32;; m_dataStart += BU32) {
    3c96:	str	r3, [r0, #4]
    nc = (m_sectorCount - m_dataStart) / m_sectorsPerCluster;
    3c98:	ldr	r3, [r4, #4]
    3c9a:	subs	r1, r7, r3
    3c9c:	udiv	r1, r1, r6
    m_fatSize = (nc + 2 + (BYTES_PER_SECTOR / 4) - 1) / (BYTES_PER_SECTOR / 4);
    3ca0:	add.w	r2, r1, #129	; 0x81
    3ca4:	lsrs	r2, r2, #7
    uint32_t r = m_relativeSectors + 9 + 2 * m_fatSize;
    3ca6:	add.w	lr, ip, r2, lsl #1
    3caa:	lsls	r0, r2, #1
    if (m_dataStart >= r) {
    3cac:	cmp	r3, lr
    3cae:	bcs.n	3cb8 <FatFormatter::makeFat32()+0x3c>
  for (m_dataStart = 2 * BU32;; m_dataStart += BU32) {
    3cb0:	add.w	r3, r3, #8192	; 0x2000
    3cb4:	str	r3, [r4, #4]
  }
    3cb6:	b.n	3c98 <FatFormatter::makeFat32()+0x1c>
    3cb8:	str	r2, [r4, #8]
  if (nc < 65525) {
    3cba:	movw	r2, #65524	; 0xfff4
    3cbe:	cmp	r1, r2
    3cc0:	bhi.n	3cd0 <FatFormatter::makeFat32()+0x54>
    writeMsg("Bad cluster count\r\n");
    3cc2:	ldr	r0, [r4, #32]
    3cc4:	cbz	r0, 3ccc <FatFormatter::makeFat32()+0x50>
    3cc6:	ldr	r1, [pc, #316]	; (3e04 <FatFormatter::makeFat32()+0x188>)
    3cc8:	bl	39f8 <Print::write(char const*) [clone .isra.0]>
}
    3ccc:	movs	r0, #0
    3cce:	pop	{r3, r4, r5, r6, r7, pc}
  m_reservedSectorCount = m_dataStart - m_relativeSectors - 2 * m_fatSize;
    3cd0:	sub.w	r2, r3, #8192	; 0x2000
  m_totalSectors = nc * m_sectorsPerCluster + m_dataStart - m_relativeSectors;
    3cd4:	mla	r3, r1, r6, r3
  m_reservedSectorCount = m_dataStart - m_relativeSectors - 2 * m_fatSize;
    3cd8:	subs	r2, r2, r0
  if (!writeMbr()) {
    3cda:	mov	r0, r4
  m_reservedSectorCount = m_dataStart - m_relativeSectors - 2 * m_fatSize;
    3cdc:	uxth	r2, r2
    3cde:	strh	r2, [r4, #40]	; 0x28
  m_fatStart = m_relativeSectors + m_reservedSectorCount;
    3ce0:	add.w	r2, r2, #8192	; 0x2000
    3ce4:	str	r2, [r4, #12]
  m_totalSectors = nc * m_sectorsPerCluster + m_dataStart - m_relativeSectors;
    3ce6:	sub.w	r2, r3, #8192	; 0x2000
    3cea:	str	r2, [r4, #24]
    m_partType = 0X0C;
    3cec:	ldr	r2, [pc, #280]	; (3e08 <FatFormatter::makeFat32()+0x18c>)
    3cee:	cmp	r3, r2
    3cf0:	ite	ls
    3cf2:	movls	r3, #11
    3cf4:	movhi	r3, #12
    3cf6:	strb.w	r3, [r4, #42]	; 0x2a
  if (!writeMbr()) {
    3cfa:	bl	3b24 <FatFormatter::writeMbr()>
    3cfe:	cmp	r0, #0
    3d00:	beq.n	3ccc <FatFormatter::makeFat32()+0x50>
  initPbs();
    3d02:	mov	r0, r4
    3d04:	bl	3ad0 <FatFormatter::initPbs()>
  setLe32(pbs->bpb.bpb32.sectorsPerFat32, m_fatSize);
    3d08:	ldr	r3, [r4, #8]
  *reinterpret_cast<uint16_t*>(dst) = src;
    3d0a:	movs	r2, #2
  *reinterpret_cast<uint32_t*>(dst) = src;
    3d0c:	str	r3, [r5, #36]	; 0x24
  *reinterpret_cast<uint16_t*>(dst) = src;
    3d0e:	ldr	r3, [pc, #252]	; (3e0c <FatFormatter::makeFat32()+0x190>)
    3d10:	strd	r2, r3, [r5, #44]	; 0x2c
  pbs->bpb.bpb32.physicalDriveNumber = 0X80;
    3d14:	movs	r3, #128	; 0x80
    3d16:	strb.w	r3, [r5, #64]	; 0x40
  pbs->bpb.bpb32.extSignature = EXTENDED_BOOT_SIGNATURE;
    3d1a:	movs	r3, #41	; 0x29
    3d1c:	strb.w	r3, [r5, #66]	; 0x42
  *reinterpret_cast<uint32_t*>(dst) = src;
    3d20:	ldr	r3, [pc, #236]	; (3e10 <FatFormatter::makeFat32()+0x194>)
    3d22:	str.w	r3, [r5, #67]	; 0x43
    pbs->bpb.bpb32.volumeLabel[i] = ' ';
    3d26:	mov.w	r3, #538976288	; 0x20202020
    3d2a:	str.w	r3, [r5, #75]	; 0x4b
    3d2e:	str.w	r3, [r5, #71]	; 0x47
    3d32:	str.w	r3, [r5, #78]	; 0x4e
  pbs->bpb.bpb32.volumeType[0] = 'F';
    3d36:	movs	r3, #70	; 0x46
    3d38:	strb.w	r3, [r5, #82]	; 0x52
  pbs->bpb.bpb32.volumeType[1] = 'A';
    3d3c:	movs	r3, #65	; 0x41
    3d3e:	strb.w	r3, [r5, #83]	; 0x53
  pbs->bpb.bpb32.volumeType[2] = 'T';
    3d42:	movs	r3, #84	; 0x54
    3d44:	strb.w	r3, [r5, #84]	; 0x54
  pbs->bpb.bpb32.volumeType[3] = '3';
    3d48:	movs	r3, #51	; 0x33
    3d4a:	strb.w	r3, [r5, #85]	; 0x55
  pbs->bpb.bpb32.volumeType[4] = '2';
    3d4e:	movs	r3, #50	; 0x32
    3d50:	strb.w	r3, [r5, #86]	; 0x56
  if (!m_dev->writeSector(m_relativeSectors, m_secBuf) ||
    3d54:	ldr	r0, [r4, #28]
    3d56:	ldr	r2, [r4, #36]	; 0x24
    3d58:	ldr	r3, [r0, #0]
    3d5a:	ldr	r1, [r4, #16]
    3d5c:	ldr	r3, [r3, #32]
    3d5e:	blx	r3
    3d60:	cmp	r0, #0
    3d62:	beq.n	3ccc <FatFormatter::makeFat32()+0x50>
      !m_dev->writeSector(m_relativeSectors + 6, m_secBuf)) {
    3d64:	ldr	r0, [r4, #28]
    3d66:	ldr	r1, [r4, #16]
    3d68:	ldr	r3, [r0, #0]
    3d6a:	ldr	r2, [r4, #36]	; 0x24
    3d6c:	adds	r1, #6
    3d6e:	ldr	r3, [r3, #32]
    3d70:	blx	r3
  if (!m_dev->writeSector(m_relativeSectors, m_secBuf) ||
    3d72:	cmp	r0, #0
    3d74:	beq.n	3ccc <FatFormatter::makeFat32()+0x50>
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
    3d76:	mov.w	r2, #512	; 0x200
    3d7a:	movs	r1, #0
    3d7c:	ldr	r0, [r4, #36]	; 0x24
    3d7e:	bl	7528 <memset>
    3d82:	ldr	r3, [pc, #144]	; (3e14 <FatFormatter::makeFat32()+0x198>)
  if (!m_dev->writeSector(m_relativeSectors + 2, m_secBuf) ||
    3d84:	ldr	r0, [r4, #28]
    3d86:	str.w	r3, [r5, #508]	; 0x1fc
    3d8a:	ldr	r3, [r0, #0]
    3d8c:	ldr	r1, [r4, #16]
    3d8e:	ldr	r3, [r3, #32]
    3d90:	ldr	r2, [r4, #36]	; 0x24
    3d92:	adds	r1, #2
    3d94:	blx	r3
    3d96:	cmp	r0, #0
    3d98:	beq.n	3ccc <FatFormatter::makeFat32()+0x50>
      !m_dev->writeSector(m_relativeSectors + 8, m_secBuf)) {
    3d9a:	ldr	r0, [r4, #28]
    3d9c:	ldr	r1, [r4, #16]
    3d9e:	ldr	r3, [r0, #0]
    3da0:	ldr	r2, [r4, #36]	; 0x24
    3da2:	adds	r1, #8
    3da4:	ldr	r3, [r3, #32]
    3da6:	blx	r3
  if (!m_dev->writeSector(m_relativeSectors + 2, m_secBuf) ||
    3da8:	cmp	r0, #0
    3daa:	beq.n	3ccc <FatFormatter::makeFat32()+0x50>
    3dac:	ldr	r3, [pc, #104]	; (3e18 <FatFormatter::makeFat32()+0x19c>)
  if (!m_dev->writeSector(m_relativeSectors + 1, m_secBuf) ||
    3dae:	ldr	r0, [r4, #28]
    3db0:	str	r3, [r5, #0]
    3db2:	add.w	r3, r3, #534773760	; 0x1fe00000
    3db6:	ldr	r2, [r4, #36]	; 0x24
    3db8:	add.w	r3, r3, #8192	; 0x2000
    3dbc:	adds	r3, #32
    3dbe:	str.w	r3, [r5, #484]	; 0x1e4
    3dc2:	mov.w	r3, #4294967295
    3dc6:	strd	r3, r3, [r5, #488]	; 0x1e8
    3dca:	ldr	r3, [r0, #0]
    3dcc:	ldr	r1, [r4, #16]
    3dce:	ldr	r3, [r3, #32]
    3dd0:	adds	r1, #1
    3dd2:	blx	r3
    3dd4:	cmp	r0, #0
    3dd6:	beq.w	3ccc <FatFormatter::makeFat32()+0x50>
      !m_dev->writeSector(m_relativeSectors + 7, m_secBuf)) {
    3dda:	ldr	r0, [r4, #28]
    3ddc:	ldr	r1, [r4, #16]
    3dde:	ldr	r3, [r0, #0]
    3de0:	ldr	r2, [r4, #36]	; 0x24
    3de2:	adds	r1, #7
    3de4:	ldr	r3, [r3, #32]
    3de6:	blx	r3
  if (!m_dev->writeSector(m_relativeSectors + 1, m_secBuf) ||
    3de8:	cmp	r0, #0
    3dea:	beq.w	3ccc <FatFormatter::makeFat32()+0x50>
  return initFatDir(32, 2 * m_fatSize + m_sectorsPerCluster);
    3dee:	ldr	r2, [r4, #8]
    3df0:	mov	r0, r4
    3df2:	ldrb.w	r3, [r4, #43]	; 0x2b
    3df6:	movs	r1, #32
    3df8:	add.w	r2, r3, r2, lsl #1
}
    3dfc:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return initFatDir(32, 2 * m_fatSize + m_sectorsPerCluster);
    3e00:	b.w	3a18 <FatFormatter::initFatDir(unsigned char, unsigned long)>
    3e04:	.word	0x20001183
    3e08:	.word	0x00fb0400
    3e0c:	.word	0x00060001
    3e10:	.word	0x0012d687
    3e14:	.word	0xaa550000
    3e18:	.word	0x41615252

00003e1c <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)>:
bool FatFormatter::format(FsBlockDevice* dev, uint8_t* secBuf, print_t* pr) {
    3e1c:	push	{r3, r4, r5, lr}
    3e1e:	mov	r4, r0
    3e20:	mov	r0, r1
  m_pr = pr;
    3e22:	strd	r3, r2, [r4, #32]
  m_sectorCount = m_dev->sectorCount();
    3e26:	ldr	r3, [r1, #0]
  m_dev = dev;
    3e28:	str	r1, [r4, #28]
  m_sectorCount = m_dev->sectorCount();
    3e2a:	ldr	r3, [r3, #24]
    3e2c:	blx	r3
  m_capacityMB = (m_sectorCount + SECTORS_PER_MB - 1) / SECTORS_PER_MB;
    3e2e:	addw	r3, r0, #2047	; 0x7ff
  m_sectorCount = m_dev->sectorCount();
    3e32:	str	r0, [r4, #20]
  m_capacityMB = (m_sectorCount + SECTORS_PER_MB - 1) / SECTORS_PER_MB;
    3e34:	lsrs	r3, r3, #11
  if (m_capacityMB <= 6) {
    3e36:	cmp	r3, #6
  m_capacityMB = (m_sectorCount + SECTORS_PER_MB - 1) / SECTORS_PER_MB;
    3e38:	str	r3, [r4, #0]
  if (m_capacityMB <= 6) {
    3e3a:	bhi.n	3e4e <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x32>
    writeMsg("Card is too small.\r\n");
    3e3c:	ldr	r0, [r4, #32]
    3e3e:	cbnz	r0, 3e46 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x2a>
    return false;
    3e40:	movs	r5, #0
}
    3e42:	mov	r0, r5
    3e44:	pop	{r3, r4, r5, pc}
    writeMsg("Card is too small.\r\n");
    3e46:	ldr	r1, [pc, #108]	; (3eb4 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x98>)
    3e48:	bl	39f8 <Print::write(char const*) [clone .isra.0]>
    3e4c:	b.n	3e40 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x24>
  } else if (m_capacityMB <= 16) {
    3e4e:	cmp	r3, #16
    3e50:	bls.n	3e90 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x74>
  } else if (m_capacityMB <= 32) {
    3e52:	cmp	r3, #32
    3e54:	bls.n	3e94 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x78>
  } else if (m_capacityMB <= 64) {
    3e56:	cmp	r3, #64	; 0x40
    3e58:	bls.n	3e98 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x7c>
  } else if (m_capacityMB <= 128) {
    3e5a:	cmp	r3, #128	; 0x80
    3e5c:	bls.n	3e9c <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x80>
  } else if (m_capacityMB <= 1024) {
    3e5e:	cmp.w	r3, #1024	; 0x400
    3e62:	bls.n	3ea0 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x84>
  } else if (m_capacityMB <= 32768) {
    3e64:	cmp.w	r3, #32768	; 0x8000
    3e68:	ite	hi
    3e6a:	movhi	r3, #128	; 0x80
    3e6c:	movls	r3, #64	; 0x40
  rtn = m_sectorCount < 0X400000 ? makeFat16() : makeFat32();
    3e6e:	cmp.w	r0, #4194304	; 0x400000
    m_sectorsPerCluster = 2;
    3e72:	strb.w	r3, [r4, #43]	; 0x2b
  rtn = m_sectorCount < 0X400000 ? makeFat16() : makeFat32();
    3e76:	mov	r0, r4
    3e78:	bcs.n	3ea4 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x88>
    3e7a:	bl	3b80 <FatFormatter::makeFat16()>
    3e7e:	mov	r5, r0
    writeMsg("Format Done\r\n");
    3e80:	ldr	r0, [r4, #32]
  if (rtn) {
    3e82:	cbz	r5, 3eaa <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x8e>
    writeMsg("Format Done\r\n");
    3e84:	cmp	r0, #0
    3e86:	beq.n	3e42 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x26>
    3e88:	ldr	r1, [pc, #44]	; (3eb8 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x9c>)
    writeMsg("Format Failed\r\n");
    3e8a:	bl	39f8 <Print::write(char const*) [clone .isra.0]>
    3e8e:	b.n	3e42 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x26>
    3e90:	movs	r3, #2
    3e92:	b.n	3e6e <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x52>
    3e94:	movs	r3, #4
    3e96:	b.n	3e6e <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x52>
    3e98:	movs	r3, #8
    3e9a:	b.n	3e6e <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x52>
    3e9c:	movs	r3, #16
    3e9e:	b.n	3e6e <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x52>
    3ea0:	movs	r3, #32
    3ea2:	b.n	3e6e <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x52>
  rtn = m_sectorCount < 0X400000 ? makeFat16() : makeFat32();
    3ea4:	bl	3c7c <FatFormatter::makeFat32()>
    3ea8:	b.n	3e7e <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x62>
    writeMsg("Format Failed\r\n");
    3eaa:	cmp	r0, #0
    3eac:	beq.n	3e40 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x24>
    3eae:	ldr	r1, [pc, #12]	; (3ebc <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xa0>)
    3eb0:	b.n	3e8a <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x6e>
    3eb2:	nop
    3eb4:	.word	0x20001150
    3eb8:	.word	0x20001165
    3ebc:	.word	0x20001173

00003ec0 <FatFile::cacheDir(unsigned short)>:

  // private functions

  bool addCluster();
  bool addDirCluster();
  DirFat_t* cacheDir(uint16_t index) {
    3ec0:	push	{r4, lr}
    return seekSet(32UL * index) ? readDirCache() : nullptr;
    3ec2:	lsls	r1, r1, #5
  DirFat_t* cacheDir(uint16_t index) {
    3ec4:	mov	r4, r0
    return seekSet(32UL * index) ? readDirCache() : nullptr;
    3ec6:	bl	435a <FatFile::seekSet(unsigned long)>
    3eca:	cbz	r0, 3ed8 <FatFile::cacheDir(unsigned short)+0x18>
    3ecc:	mov	r0, r4
    3ece:	movs	r1, #0
  }
    3ed0:	ldmia.w	sp!, {r4, lr}
    return seekSet(32UL * index) ? readDirCache() : nullptr;
    3ed4:	b.w	431c <FatFile::readDirCache(bool)>
  }
    3ed8:	pop	{r4, pc}

00003eda <FatFile::getLfnChar(DirLfn_t*, unsigned char)>:
#include "../common/DebugMacros.h"
#include "../common/FsUtf.h"
#include "FatLib.h"
//------------------------------------------------------------------------------
uint16_t FatFile::getLfnChar(DirLfn_t* ldir, uint8_t i) {
  if (i < 5) {
    3eda:	cmp	r2, #4
    3edc:	bhi.n	3ee8 <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0xe>
  return *reinterpret_cast<const uint16_t*>(src);
    3ede:	add.w	r2, r1, r2, lsl #1
    3ee2:	ldrh.w	r0, [r2, #1]
    return getLe16(ldir->unicode1 + 2 * i);
    3ee6:	bx	lr
  } else if (i < 11) {
    3ee8:	cmp	r2, #10
    3eea:	bhi.n	3ef4 <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0x1a>
    3eec:	add.w	r2, r1, r2, lsl #1
    3ef0:	ldrh	r0, [r2, #4]
    return getLe16(ldir->unicode2 + 2 * (i - 5));
    3ef2:	bx	lr
  } else if (i < 13) {
    3ef4:	cmp	r2, #12
    3ef6:	itte	ls
    3ef8:	addls.w	r2, r1, r2, lsl #1
    3efc:	ldrhls	r0, [r2, #6]
    return getLe16(ldir->unicode3 + 2 * (i - 11));
  }
  DBG_HALT_IF(i >= 13);
  return 0;
    3efe:	movhi	r0, #0
}
    3f00:	bx	lr

00003f02 <FatFile::getSFN(char*, unsigned int)>:
fail:
  *name = 0;
  return 0;
}
//------------------------------------------------------------------------------
size_t FatFile::getSFN(char* name, size_t size) {
    3f02:	push	{r3, r4, r5, r6, r7, lr}
  bool isOpen() const { return m_attributes; }
    3f04:	ldrb	r4, [r0, #0]
    3f06:	mov	r5, r1
    3f08:	mov	r7, r2
  char c;
  uint8_t j = 0;
  uint8_t lcBit = FAT_CASE_LC_BASE;
  uint8_t* ptr;
  DirFat_t* dir;
  if (!isOpen()) {
    3f0a:	cbz	r4, 3f7c <FatFile::getSFN(char*, unsigned int)+0x7a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isRoot()) {
    3f0c:	ands.w	r4, r4, #192	; 0xc0
    3f10:	beq.n	3f22 <FatFile::getSFN(char*, unsigned int)+0x20>
    if (size < 2) {
    3f12:	cmp	r2, #1
    3f14:	bls.n	3f7c <FatFile::getSFN(char*, unsigned int)+0x7a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    name[0] = '/';
    3f16:	movs	r3, #47	; 0x2f
    name[1] = '\0';
    return 1;
    3f18:	movs	r0, #1
    name[0] = '/';
    3f1a:	strb	r3, [r1, #0]
    name[1] = '\0';
    3f1c:	movs	r3, #0
    3f1e:	strb	r3, [r1, #1]
  return j;

fail:
  name[0] = '\0';
  return 0;
}
    3f20:	pop	{r3, r4, r5, r6, r7, pc}
  dir = cacheDirEntry(FsCache::CACHE_FOR_READ);
    3f22:	mov	r1, r4
    3f24:	bl	4118 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    3f28:	cbz	r0, 3f7c <FatFile::getSFN(char*, unsigned int)+0x7a>
  ptr = dir->name;
    3f2a:	mov	r6, r0
    3f2c:	mov	r1, r4
  uint8_t lcBit = FAT_CASE_LC_BASE;
    3f2e:	movs	r2, #8
    if (i == 8) {
    3f30:	cmp	r1, #8
      if (*ptr == ' ') {
    3f32:	ldrb	r3, [r6, #0]
    if (i == 8) {
    3f34:	bne.n	3f4e <FatFile::getSFN(char*, unsigned int)+0x4c>
      if (*ptr == ' ') {
    3f36:	cmp	r3, #32
    3f38:	beq.n	3f74 <FatFile::getSFN(char*, unsigned int)+0x72>
      lcBit = FAT_CASE_LC_EXT;
    3f3a:	movs	r2, #16
      c = '.';
    3f3c:	movs	r3, #46	; 0x2e
    if ((j + 1u) >= size) {
    3f3e:	mov	ip, r4
    3f40:	adds	r4, #1
    3f42:	cmp	r4, r7
    3f44:	bcs.n	3f7c <FatFile::getSFN(char*, unsigned int)+0x7a>
    name[j++] = c;
    3f46:	uxtb	r4, r4
    3f48:	strb.w	r3, [r5, ip]
    3f4c:	b.n	3f6e <FatFile::getSFN(char*, unsigned int)+0x6c>
      if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
    3f4e:	sub.w	ip, r3, #65	; 0x41
      c = *ptr++;
    3f52:	adds	r6, #1
      if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
    3f54:	cmp.w	ip, #25
    3f58:	bhi.n	3f6a <FatFile::getSFN(char*, unsigned int)+0x68>
    3f5a:	ldrb.w	ip, [r0, #12]
    3f5e:	tst.w	r2, ip
    3f62:	beq.n	3f3e <FatFile::getSFN(char*, unsigned int)+0x3c>
        c += 'a' - 'A';
    3f64:	adds	r3, #32
    3f66:	uxtb	r3, r3
    3f68:	b.n	3f3e <FatFile::getSFN(char*, unsigned int)+0x3c>
      if (c == ' ') {
    3f6a:	cmp	r3, #32
    3f6c:	bne.n	3f3e <FatFile::getSFN(char*, unsigned int)+0x3c>
  for (uint8_t i = 0; i < 12; i++) {
    3f6e:	adds	r1, #1
    3f70:	cmp	r1, #12
    3f72:	bne.n	3f30 <FatFile::getSFN(char*, unsigned int)+0x2e>
  name[j] = '\0';
    3f74:	movs	r3, #0
    3f76:	mov	r0, r4
    3f78:	strb	r3, [r5, r4]
  return j;
    3f7a:	b.n	3f20 <FatFile::getSFN(char*, unsigned int)+0x1e>
  name[0] = '\0';
    3f7c:	movs	r0, #0
    3f7e:	strb	r0, [r5, #0]
  return 0;
    3f80:	b.n	3f20 <FatFile::getSFN(char*, unsigned int)+0x1e>

00003f82 <FatFile::getName7(char*, unsigned int)>:
size_t FatFile::getName7(char* name, size_t size) {
    3f82:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  FatFile() {}
    3f86:	movs	r4, #0
    3f88:	sub	sp, #44	; 0x2c
  if (!isOpen()) {
    3f8a:	ldrb	r3, [r0, #0]
size_t FatFile::getName7(char* name, size_t size) {
    3f8c:	mov	r5, r0
    3f8e:	mov	r7, r1
    3f90:	mov	r8, r2
    3f92:	str	r4, [sp, #4]
  if (!isOpen()) {
    3f94:	cbz	r3, 3fb2 <FatFile::getName7(char*, unsigned int)+0x30>
  if (!isLFN()) {
    3f96:	ldrb	r3, [r0, #3]
    3f98:	cbnz	r3, 3fa8 <FatFile::getName7(char*, unsigned int)+0x26>
    return getSFN(name, size);
    3f9a:	bl	3f02 <FatFile::getSFN(char*, unsigned int)>
    3f9e:	mov	r4, r0
}
    3fa0:	mov	r0, r4
    3fa2:	add	sp, #44	; 0x2c
    3fa4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (!dir.openCluster(this)) {
    3fa8:	mov	r1, r0
    3faa:	add	r0, sp, #4
    3fac:	bl	4142 <FatFile::openCluster(FatFile*)>
    3fb0:	cbnz	r0, 4016 <FatFile::getName7(char*, unsigned int)+0x94>
  name[0] = '\0';
    3fb2:	movs	r4, #0
    3fb4:	strb	r4, [r7, #0]
  return 0;
    3fb6:	b.n	3fa0 <FatFile::getName7(char*, unsigned int)+0x1e>
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(m_dirIndex - order));
    3fb8:	ldrh	r1, [r5, #4]
    3fba:	add	r0, sp, #4
    3fbc:	subs	r1, r1, r6
    3fbe:	uxth	r1, r1
    3fc0:	bl	3ec0 <FatFile::cacheDir(unsigned short)>
    if (!ldir) {
    3fc4:	mov	r1, r0
    3fc6:	cmp	r0, #0
    3fc8:	beq.n	3fb2 <FatFile::getName7(char*, unsigned int)+0x30>
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    3fca:	ldrb	r3, [r0, #11]
    3fcc:	cmp	r3, #15
    3fce:	bne.n	3fb2 <FatFile::getName7(char*, unsigned int)+0x30>
    3fd0:	ldrb	r3, [r0, #0]
    3fd2:	and.w	r3, r3, #31
    3fd6:	cmp	r3, r9
    3fd8:	bne.n	3fb2 <FatFile::getName7(char*, unsigned int)+0x30>
    3fda:	add.w	r9, r7, r4
    for (uint8_t i = 0; i < 13; i++) {
    3fde:	movs	r3, #0
      uint16_t c = getLfnChar(ldir, i);
    3fe0:	mov	r2, r3
    3fe2:	mov	r0, r5
    3fe4:	bl	3eda <FatFile::getLfnChar(DirLfn_t*, unsigned char)>
      if (c == 0) {
    3fe8:	cbz	r0, 4010 <FatFile::getName7(char*, unsigned int)+0x8e>
      if ((n + 1) >= size) {
    3fea:	adds	r4, #1
    3fec:	cmp	r4, r8
    3fee:	bcs.n	3fb2 <FatFile::getName7(char*, unsigned int)+0x30>
    for (uint8_t i = 0; i < 13; i++) {
    3ff0:	adds	r3, #1
    3ff2:	cmp	r0, #127	; 0x7f
    3ff4:	uxtb	r3, r3
    3ff6:	it	cs
    3ff8:	movcs	r0, #63	; 0x3f
    3ffa:	cmp	r3, #13
      name[n++] = c >= 0X7F ? '?' : c;
    3ffc:	strb.w	r0, [r9], #1
    for (uint8_t i = 0; i < 13; i++) {
    4000:	bne.n	3fe0 <FatFile::getName7(char*, unsigned int)+0x5e>
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    4002:	adds	r6, #1
    4004:	uxth	r6, r6
    4006:	uxtb.w	r9, r6
    400a:	ldrb	r3, [r5, #3]
    400c:	cmp	r3, r9
    400e:	bcs.n	3fb8 <FatFile::getName7(char*, unsigned int)+0x36>
  name[n] = 0;
    4010:	movs	r3, #0
    4012:	strb	r3, [r7, r4]
  return n;
    4014:	b.n	3fa0 <FatFile::getName7(char*, unsigned int)+0x1e>
    4016:	movs	r6, #1
    4018:	b.n	4006 <FatFile::getName7(char*, unsigned int)+0x84>

0000401a <FatFile::getName(char*, unsigned int)>:
  return getName7(name, size);
    401a:	b.w	3f82 <FatFile::getName7(char*, unsigned int)>

0000401e <FatFile::openRoot(FatVolume*) [clone .part.0]>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
    401e:	push	{r3, r4, r5, lr}
    4020:	mov	r5, r1
    4022:	mov	r4, r0
  // error if file is already open
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
    4024:	movs	r2, #36	; 0x24
    4026:	movs	r1, #0
    4028:	bl	7528 <memset>

  m_vol = vol;
    402c:	str	r5, [r4, #8]
  /** \return The number of File Allocation Tables. */
  uint8_t fatCount() const { return 2; }
  /** \return The logical sector number for the start of the first FAT. */
  uint32_t fatStartSector() const { return m_fatStartSector; }
  /** \return The FAT type of the volume. Values are 12, 16 or 32. */
  uint8_t fatType() const { return m_fatType; }
    402e:	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
    4030:	cmp	r3, #16
    4032:	beq.n	4042 <FatFile::openRoot(FatVolume*) [clone .part.0]+0x24>
    4034:	cmp	r3, #32
    4036:	bne.n	4046 <FatFile::openRoot(FatVolume*) [clone .part.0]+0x28>
    4038:	movs	r3, #128	; 0x80
    default:
      DBG_FAIL_MACRO;
      goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    403a:	movs	r0, #1
      m_attributes = FILE_ATTR_ROOT_FIXED;
    403c:	strb	r3, [r4, #0]
  m_flags = FILE_FLAG_READ;
    403e:	strb	r0, [r4, #2]
  return true;

fail:
  return false;
}
    4040:	pop	{r3, r4, r5, pc}
  switch (vol->fatType()) {
    4042:	movs	r3, #64	; 0x40
    4044:	b.n	403a <FatFile::openRoot(FatVolume*) [clone .part.0]+0x1c>
    4046:	movs	r0, #0
    4048:	b.n	4040 <FatFile::openRoot(FatVolume*) [clone .part.0]+0x22>

0000404a <FatPartition::cacheSync()>:
  FsCache m_fatCache;
  uint8_t* fatCachePrepare(uint32_t sector, uint8_t options) {
    options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return m_fatCache.prepare(sector, options);
  }
  bool cacheSync() {
    404a:	push	{r4, lr}
    404c:	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    404e:	adds	r0, #36	; 0x24
    4050:	bl	1cba <FsCache::sync()>
    4054:	cbz	r0, 406c <FatPartition::cacheSync()+0x22>
    4056:	add.w	r0, r4, #564	; 0x234
    405a:	bl	1cba <FsCache::sync()>
    405e:	cbz	r0, 406c <FatPartition::cacheSync()+0x22>
  bool cacheSync() {
    4060:	ldr	r0, [r4, #0]
  bool syncDevice() { return m_blockDev->syncDevice(); }
    4062:	ldr	r3, [r0, #0]
  }
    4064:	ldmia.w	sp!, {r4, lr}
  bool syncDevice() { return m_blockDev->syncDevice(); }
    4068:	ldr	r3, [r3, #28]
    406a:	bx	r3
  }
    406c:	movs	r0, #0
    406e:	pop	{r4, pc}

00004070 <FatFile::addCluster()>:
  uint32_t cc = m_curCluster;
    4070:	mov	r2, r0
bool FatFile::addCluster() {
    4072:	push	{r3, r4, r5, lr}
  uint32_t cc = m_curCluster;
    4074:	ldr.w	r5, [r2, #16]!
bool FatFile::addCluster() {
    4078:	mov	r4, r0
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    407a:	ldr	r0, [r0, #8]
    407c:	mov	r1, r5
    407e:	bl	4e0e <FatPartition::allocateCluster(unsigned long, unsigned long*)>
    4082:	cbz	r0, 4096 <FatFile::addCluster()+0x26>
    m_flags |= FILE_FLAG_CONTIGUOUS;
    4084:	ldrb	r3, [r4, #2]
  if (cc == 0) {
    4086:	cbnz	r5, 4098 <FatFile::addCluster()+0x28>
    m_flags |= FILE_FLAG_CONTIGUOUS;
    4088:	orr.w	r3, r3, #64	; 0x40
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    408c:	strb	r3, [r4, #2]
  m_flags |= FILE_FLAG_DIR_DIRTY;
    408e:	ldrb	r3, [r4, #2]
    4090:	orn	r3, r3, #127	; 0x7f
    4094:	strb	r3, [r4, #2]
}
    4096:	pop	{r3, r4, r5, pc}
  } else if (m_curCluster != (cc + 1)) {
    4098:	adds	r5, #1
    409a:	ldr	r2, [r4, #16]
    409c:	cmp	r2, r5
    409e:	beq.n	408e <FatFile::addCluster()+0x1e>
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    40a0:	bic.w	r3, r3, #64	; 0x40
    40a4:	b.n	408c <FatFile::addCluster()+0x1c>
	...

000040a8 <FatFile::addDirCluster()>:
bool FatFile::addDirCluster() {
    40a8:	push	{r3, r4, r5, r6, r7, lr}
  if (isRootFixed()) {
    40aa:	ldrb	r5, [r0, #0]
bool FatFile::addDirCluster() {
    40ac:	mov	r4, r0
  if (isRootFixed()) {
    40ae:	ands.w	r5, r5, #64	; 0x40
    40b2:	beq.n	40ba <FatFile::addDirCluster()+0x12>
  return false;
    40b4:	movs	r6, #0
}
    40b6:	mov	r0, r6
    40b8:	pop	{r3, r4, r5, r6, r7, pc}
  if (m_curPosition >= 512UL * 4095) {
    40ba:	ldr	r2, [r0, #20]
    40bc:	ldr	r3, [pc, #84]	; (4114 <FatFile::addDirCluster()+0x6c>)
    40be:	cmp	r2, r3
    40c0:	bcs.n	40b4 <FatFile::addDirCluster()+0xc>
  if (!addCluster()) {
    40c2:	bl	4070 <FatFile::addCluster()>
    40c6:	mov	r6, r0
    40c8:	cmp	r0, #0
    40ca:	beq.n	40b4 <FatFile::addDirCluster()+0xc>
  sector = m_vol->clusterStartSector(m_curCluster);
    40cc:	ldr	r2, [r4, #8]
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
  }
  uint32_t clusterStartSector(uint32_t cluster) const {
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    40ce:	ldr	r3, [r4, #16]
    40d0:	ldrb	r1, [r2, #6]
    40d2:	subs	r3, #2
    40d4:	ldr	r7, [r2, #20]
    40d6:	lsls	r3, r1
    40d8:	add	r7, r3
  for (uint8_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    40da:	ldr	r0, [r4, #8]
    40dc:	uxtb	r1, r5
    40de:	ldrb	r3, [r0, #4]
    40e0:	cmp	r3, r1
    40e2:	bhi.n	40f6 <FatFile::addDirCluster()+0x4e>
    return m_bytesPerSector << m_sectorsPerClusterShift;
    40e4:	ldrb	r2, [r0, #6]
    40e6:	mov.w	r3, #512	; 0x200
    40ea:	lsls	r3, r2
  m_curPosition += m_vol->bytesPerCluster();
    40ec:	ldr	r2, [r4, #20]
    40ee:	uxtah	r3, r2, r3
    40f2:	str	r3, [r4, #20]
  return true;
    40f4:	b.n	40b6 <FatFile::addDirCluster()+0xe>
    return m_cache.prepare(sector, options);
    40f6:	movs	r2, #5
    40f8:	add	r1, r7
    40fa:	adds	r0, #36	; 0x24
    if (!pc) {
    40fc:	adds	r5, #1
    40fe:	bl	1d0a <FsCache::prepare(unsigned long, unsigned char)>
    4102:	cmp	r0, #0
    4104:	beq.n	40b4 <FatFile::addDirCluster()+0xc>
    memset(pc, 0, m_vol->bytesPerSector());
    4106:	mov.w	r2, #512	; 0x200
    410a:	movs	r1, #0
    410c:	bl	7528 <memset>
  for (uint8_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    4110:	b.n	40da <FatFile::addDirCluster()+0x32>
    4112:	nop
    4114:	.word	0x001ffe00

00004118 <FatFile::cacheDirEntry(unsigned char)>:
DirFat_t* FatFile::cacheDirEntry(uint8_t action) {
    4118:	push	{r4, lr}
    411a:	mov	r4, r0
    411c:	ldr	r0, [r0, #8]
    411e:	mov	r2, r1
    4120:	adds	r0, #36	; 0x24
    4122:	ldr	r1, [r4, #24]
    4124:	bl	1d0a <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    4128:	cbz	r0, 4134 <FatFile::cacheDirEntry(unsigned char)+0x1c>
  return dir + (m_dirIndex & 0XF);
    412a:	ldrh	r3, [r4, #4]
    412c:	and.w	r3, r3, #15
    4130:	add.w	r0, r0, r3, lsl #5
}
    4134:	pop	{r4, pc}

00004136 <FatFile::openRoot(FatVolume*)>:
  if (isOpen()) {
    4136:	ldrb	r3, [r0, #0]
    4138:	cbnz	r3, 413e <FatFile::openRoot(FatVolume*)+0x8>
    413a:	b.w	401e <FatFile::openRoot(FatVolume*) [clone .part.0]>
}
    413e:	movs	r0, #0
    4140:	bx	lr

00004142 <FatFile::openCluster(FatFile*)>:
bool FatFile::openCluster(FatFile* file) {
    4142:	push	{r3, r4, r5, lr}
  if (file->m_dirCluster == 0) {
    4144:	ldr	r3, [r1, #12]
bool FatFile::openCluster(FatFile* file) {
    4146:	mov	r4, r0
    4148:	mov	r5, r1
  if (file->m_dirCluster == 0) {
    414a:	cbnz	r3, 4156 <FatFile::openCluster(FatFile*)+0x14>
    return openRoot(file->m_vol);
    414c:	ldr	r1, [r1, #8]
}
    414e:	ldmia.w	sp!, {r3, r4, r5, lr}
    return openRoot(file->m_vol);
    4152:	b.w	4136 <FatFile::openRoot(FatVolume*)>
  memset(this, 0, sizeof(FatFile));
    4156:	movs	r2, #36	; 0x24
    4158:	movs	r1, #0
    415a:	bl	7528 <memset>
  m_attributes = FILE_ATTR_SUBDIR;
    415e:	movs	r3, #16
  m_flags = FILE_FLAG_READ;
    4160:	movs	r0, #1
  m_attributes = FILE_ATTR_SUBDIR;
    4162:	strb	r3, [r4, #0]
  m_flags = FILE_FLAG_READ;
    4164:	strb	r0, [r4, #2]
  m_vol = file->m_vol;
    4166:	ldr	r3, [r5, #8]
    4168:	str	r3, [r4, #8]
  m_firstCluster = file->m_dirCluster;
    416a:	ldr	r3, [r5, #12]
    416c:	str	r3, [r4, #32]
}
    416e:	pop	{r3, r4, r5, pc}

00004170 <FatFile::read(void*, unsigned int)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
    4170:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4174:	vpush	{d8}
  bool isReadable() const { return m_flags & FILE_FLAG_READ; }
    4178:	ldrb	r3, [r0, #2]
    417a:	mov	r4, r0
    417c:	sub	sp, #12
    417e:	mov	r8, r1
  uint16_t offset;
  size_t toRead;
  uint32_t sector;  // raw device sector number
  uint8_t* pc;
  // error if not open for read
  if (!isReadable()) {
    4180:	lsls	r0, r3, #31
int FatFile::read(void* buf, size_t nbyte) {
    4182:	mov	r5, r2
  if (!isReadable()) {
    4184:	bpl.n	426a <FatFile::read(void*, unsigned int)+0xfa>
  bool isFile() const { return m_attributes & FILE_ATTR_FILE; }
    4186:	ldrb	r3, [r4, #0]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
    4188:	lsls	r1, r3, #28
    418a:	bpl.n	41b4 <FatFile::read(void*, unsigned int)+0x44>
    uint32_t tmp32 = m_fileSize - m_curPosition;
    418c:	ldr	r3, [r4, #28]
    418e:	ldr	r2, [r4, #20]
    4190:	subs	r3, r3, r2
    4192:	cmp	r5, r3
    4194:	it	cs
    4196:	movcs	r5, r3
        } else if (isFile() && isContiguous()) {
          m_curCluster++;
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    4198:	add.w	r3, r4, #16
  toRead = nbyte;
    419c:	mov	r6, r5
  uint8_t sectorOfCluster = 0;
    419e:	mov.w	r9, #0
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    41a2:	vmov	s16, r3
  while (toRead) {
    41a6:	cbnz	r6, 41c6 <FatFile::read(void*, unsigned int)+0x56>
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
    41a8:	subs	r0, r5, r6

fail:
  m_error |= READ_ERROR;
  return -1;
}
    41aa:	add	sp, #12
    41ac:	vpop	{d8}
    41b0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  } else if (isRootFixed()) {
    41b4:	lsls	r2, r3, #25
    41b6:	bpl.n	4198 <FatFile::read(void*, unsigned int)+0x28>
        FS_DIR_SIZE * m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    41b8:	ldr	r3, [r4, #8]
    41ba:	ldrh	r2, [r3, #8]
    41bc:	ldr	r3, [r4, #20]
    uint16_t tmp16 =
    41be:	rsb	r3, r3, r2, lsl #5
    if (nbyte > tmp16) {
    41c2:	uxth	r3, r3
    41c4:	b.n	4192 <FatFile::read(void*, unsigned int)+0x22>
  bool isRootFixed() const { return m_attributes & FILE_ATTR_ROOT_FIXED; }
    41c6:	ldrb	r2, [r4, #0]
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    41c8:	ldr	r7, [r4, #20]
    if (isRootFixed()) {
    41ca:	lsls	r3, r2, #25
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    41cc:	ldr	r0, [r4, #8]
    41ce:	ubfx	fp, r7, #0, #9
               (m_curPosition >> m_vol->bytesPerSectorShift());
    41d2:	mov.w	r1, r7, lsr #9
    if (isRootFixed()) {
    41d6:	bpl.n	4210 <FatFile::read(void*, unsigned int)+0xa0>
      sector = m_vol->rootDirStart() +
    41d8:	ldr	r2, [r0, #32]
    41da:	add	r1, r2
    if (offset != 0 || toRead < m_vol->bytesPerSector() ||
    41dc:	ldr.w	sl, [r4, #8]
    41e0:	cmp.w	fp, #0
    41e4:	bne.n	4278 <FatFile::read(void*, unsigned int)+0x108>
    41e6:	cmp.w	r6, #512	; 0x200
    41ea:	bcc.n	4278 <FatFile::read(void*, unsigned int)+0x108>
  uint32_t sector() { return m_sector; }
    41ec:	ldr.w	r2, [sl, #44]	; 0x2c
    41f0:	cmp	r1, r2
    41f2:	beq.n	4278 <FatFile::read(void*, unsigned int)+0x108>
    } else if (toRead >= 2 * m_vol->bytesPerSector()) {
    41f4:	cmp.w	r6, #1024	; 0x400
    41f8:	bcs.n	42a8 <FatFile::read(void*, unsigned int)+0x138>
    return m_blockDev->readSector(sector, dst);
    41fa:	ldr.w	r0, [sl, #40]	; 0x28
    41fe:	mov	r2, r8
    4200:	ldr	r3, [r0, #0]
    4202:	ldr	r3, [r3, #16]
    4204:	blx	r3
      if (!m_vol->cacheSafeRead(sector, dst)) {
    4206:	cmp	r0, #0
    4208:	beq.n	426a <FatFile::read(void*, unsigned int)+0xfa>
      n = m_vol->bytesPerSector();
    420a:	mov.w	r7, #512	; 0x200
    420e:	b.n	429c <FatFile::read(void*, unsigned int)+0x12c>
    return (position >> 9) & m_clusterSectorMask;
    4210:	ldrb.w	r9, [r0, #5]
    4214:	and.w	r9, r9, r1
      if (offset == 0 && sectorOfCluster == 0) {
    4218:	cmp.w	fp, #0
    421c:	bne.n	4230 <FatFile::read(void*, unsigned int)+0xc0>
    421e:	cmp.w	r9, #0
    4222:	bne.n	4230 <FatFile::read(void*, unsigned int)+0xc0>
        if (m_curPosition == 0) {
    4224:	cbnz	r7, 4242 <FatFile::read(void*, unsigned int)+0xd2>
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    4226:	lsls	r2, r2, #24
  uint32_t rootDirStart() const { return m_rootDirStart; }
    4228:	ite	mi
    422a:	ldrmi	r2, [r0, #32]
    422c:	ldrpl	r2, [r4, #32]
    422e:	str	r2, [r4, #16]
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    4230:	ldr	r2, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    4232:	ldr	r1, [r4, #16]
    4234:	ldrb	r0, [r2, #6]
    4236:	subs	r1, #2
    4238:	ldr	r2, [r2, #20]
    423a:	lsls	r1, r0
    423c:	add	r1, r2
    423e:	add	r1, r9
    4240:	b.n	41dc <FatFile::read(void*, unsigned int)+0x6c>
        } else if (isFile() && isContiguous()) {
    4242:	lsls	r3, r2, #28
          m_curCluster++;
    4244:	ldr	r1, [r4, #16]
        } else if (isFile() && isContiguous()) {
    4246:	bpl.n	4254 <FatFile::read(void*, unsigned int)+0xe4>
    4248:	ldrb	r2, [r4, #2]
    424a:	lsls	r7, r2, #25
    424c:	bpl.n	4254 <FatFile::read(void*, unsigned int)+0xe4>
          m_curCluster++;
    424e:	adds	r1, #1
    4250:	str	r1, [r4, #16]
    4252:	b.n	4230 <FatFile::read(void*, unsigned int)+0xc0>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    4254:	vmov	r2, s16
    4258:	bl	4d44 <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    425c:	cmp	r0, #0
    425e:	blt.n	426a <FatFile::read(void*, unsigned int)+0xfa>
          if (fg == 0) {
    4260:	bne.n	4230 <FatFile::read(void*, unsigned int)+0xc0>
            if (isDir()) {
    4262:	ldrb	r3, [r4, #0]
    4264:	tst.w	r3, #208	; 0xd0
    4268:	bne.n	41a8 <FatFile::read(void*, unsigned int)+0x38>
  m_error |= READ_ERROR;
    426a:	ldrb	r3, [r4, #1]
  return -1;
    426c:	mov.w	r0, #4294967295
  m_error |= READ_ERROR;
    4270:	orr.w	r3, r3, #2
    4274:	strb	r3, [r4, #1]
  return -1;
    4276:	b.n	41aa <FatFile::read(void*, unsigned int)+0x3a>
      n = m_vol->bytesPerSector() - offset;
    4278:	rsb	r7, fp, #512	; 0x200
    return m_cache.prepare(sector, options);
    427c:	movs	r2, #0
    427e:	add.w	r0, sl, #36	; 0x24
    4282:	cmp	r7, r6
    4284:	it	cs
    4286:	movcs	r7, r6
    4288:	bl	1d0a <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    428c:	cmp	r0, #0
    428e:	beq.n	426a <FatFile::read(void*, unsigned int)+0xfa>
      memcpy(dst, src, n);
    4290:	add.w	r1, r0, fp
    4294:	mov	r2, r7
    4296:	mov	r0, r8
    4298:	bl	756c <memcpy>
    m_curPosition += n;
    429c:	ldr	r3, [r4, #20]
    dst += n;
    429e:	add	r8, r7
    toRead -= n;
    42a0:	subs	r6, r6, r7
    m_curPosition += n;
    42a2:	add	r3, r7
    42a4:	str	r3, [r4, #20]
    toRead -= n;
    42a6:	b.n	41a6 <FatFile::read(void*, unsigned int)+0x36>
      if (!isRootFixed()) {
    42a8:	ldrb	r0, [r4, #0]
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    42aa:	lsrs	r3, r6, #9
      if (!isRootFixed()) {
    42ac:	lsls	r0, r0, #25
    42ae:	bmi.n	42be <FatFile::read(void*, unsigned int)+0x14e>
        uint32_t mb = m_vol->sectorsPerCluster() - sectorOfCluster;
    42b0:	ldrb.w	r0, [sl, #4]
    42b4:	sub.w	r0, r0, r9
    42b8:	cmp	r3, r0
    42ba:	it	cs
    42bc:	movcs	r3, r0
    return sector <= m_sector && m_sector < (sector + count);
    42be:	cmp	r1, r2
      n = ns << m_vol->bytesPerSectorShift();
    42c0:	mov.w	r7, r3, lsl #9
    42c4:	bls.n	42da <FatFile::read(void*, unsigned int)+0x16a>
    return m_blockDev->readSectors(sector, dst, count);
    42c6:	ldr.w	r0, [sl, #40]	; 0x28
    42ca:	ldr	r2, [r0, #0]
    42cc:	ldr.w	sl, [r2, #20]
    42d0:	mov	r2, r8
    42d2:	blx	sl
      if (!m_vol->cacheSafeRead(sector, dst, ns)) {
    42d4:	cmp	r0, #0
    42d6:	bne.n	429c <FatFile::read(void*, unsigned int)+0x12c>
    42d8:	b.n	426a <FatFile::read(void*, unsigned int)+0xfa>
    return sector <= m_sector && m_sector < (sector + count);
    42da:	adds	r0, r1, r3
    42dc:	cmp	r2, r0
    42de:	bcs.n	42c6 <FatFile::read(void*, unsigned int)+0x156>
    if (isCached(sector, count) && !sync()) {
    42e0:	add.w	r0, sl, #36	; 0x24
    42e4:	strd	r1, r3, [sp]
    42e8:	bl	1cba <FsCache::sync()>
    42ec:	ldrd	r1, r3, [sp]
    42f0:	cmp	r0, #0
    42f2:	bne.n	42c6 <FatFile::read(void*, unsigned int)+0x156>
    42f4:	b.n	426a <FatFile::read(void*, unsigned int)+0xfa>

000042f6 <FatFile::peek()>:
int FatFile::peek() {
    42f6:	push	{r0, r1, r4, r5, r6, lr}
    return read(&b, 1) == 1 ? b : -1;
    42f8:	movs	r2, #1
    42fa:	add.w	r1, sp, #7
    42fe:	mov	r4, r0
  uint32_t saveCurCluster = m_curCluster;
    4300:	ldrd	r5, r6, [r0, #16]
    4304:	bl	4170 <FatFile::read(void*, unsigned int)>
    4308:	cmp	r0, #1
    430a:	ite	eq
    430c:	ldrbeq.w	r0, [sp, #7]
    4310:	movne.w	r0, #4294967295
  m_curCluster = saveCurCluster;
    4314:	strd	r5, r6, [r4, #16]
}
    4318:	add	sp, #8
    431a:	pop	{r4, r5, r6, pc}

0000431c <FatFile::readDirCache(bool)>:
//------------------------------------------------------------------------------
// Read next directory entry into the cache.
// Assumes file is correctly positioned.
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
  DBG_HALT_IF(m_curPosition & 0X1F);
  uint8_t i = (m_curPosition >> 5) & 0XF;
    431c:	ldr	r3, [r0, #20]

  if (i == 0 || !skipReadOk) {
    431e:	tst.w	r3, #480	; 0x1e0
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
    4322:	push	{r0, r1, r2, r4, r5, lr}
    4324:	mov	r4, r0
  uint8_t i = (m_curPosition >> 5) & 0XF;
    4326:	ubfx	r5, r3, #5, #4
  if (i == 0 || !skipReadOk) {
    432a:	beq.n	432e <FatFile::readDirCache(bool)+0x12>
    432c:	cbnz	r1, 4356 <FatFile::readDirCache(bool)+0x3a>
    int8_t n = read(&n, 1);
    432e:	movs	r2, #1
    4330:	add.w	r1, sp, #7
    4334:	mov	r0, r4
    4336:	bl	4170 <FatFile::read(void*, unsigned int)>
    if (n != 1) {
    433a:	sxtb	r0, r0
    433c:	cmp	r0, #1
    433e:	beq.n	4346 <FatFile::readDirCache(bool)+0x2a>
  }
  // return pointer to entry
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;

fail:
  return nullptr;
    4340:	movs	r0, #0
}
    4342:	add	sp, #12
    4344:	pop	{r4, r5, pc}
    m_curPosition += FS_DIR_SIZE - 1;
    4346:	ldr	r3, [r4, #20]
    4348:	adds	r3, #31
  uint8_t* cacheBuffer() { return m_buffer; }
    434a:	ldr	r0, [r4, #8]
    m_curPosition += FS_DIR_SIZE;
    434c:	str	r3, [r4, #20]
    434e:	adds	r0, #52	; 0x34
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    4350:	add.w	r0, r0, r5, lsl #5
    4354:	b.n	4342 <FatFile::readDirCache(bool)+0x26>
    m_curPosition += FS_DIR_SIZE;
    4356:	adds	r3, #32
    4358:	b.n	434a <FatFile::readDirCache(bool)+0x2e>

0000435a <FatFile::seekSet(unsigned long)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
    435a:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    435e:	mov	r5, r1
  bool isOpen() const { return m_attributes; }
    4360:	ldrb	r1, [r0, #0]
    4362:	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    4364:	ldr	r7, [r0, #16]
  // error if file not open
  if (!isOpen()) {
    4366:	cbz	r1, 438a <FatFile::seekSet(unsigned long)+0x30>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    4368:	ldr	r0, [r0, #20]
    436a:	cmp	r0, r5
    436c:	beq.n	437c <FatFile::seekSet(unsigned long)+0x22>
    return true;
  }
  if (pos == 0) {
    436e:	cbnz	r5, 4380 <FatFile::seekSet(unsigned long)+0x26>
    // set position to start of file
    m_curCluster = 0;
    4370:	str	r5, [r4, #16]
    }
  }

done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    4372:	ldrb	r3, [r4, #2]
  m_curPosition = pos;
    4374:	str	r5, [r4, #20]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    4376:	bic.w	r3, r3, #32
    437a:	strb	r3, [r4, #2]
    return true;
    437c:	movs	r0, #1
    437e:	b.n	438e <FatFile::seekSet(unsigned long)+0x34>
  if (isFile()) {
    4380:	lsls	r3, r1, #28
    4382:	bpl.n	4392 <FatFile::seekSet(unsigned long)+0x38>
    if (pos > m_fileSize) {
    4384:	ldr	r3, [r4, #28]
    4386:	cmp	r3, r5
    4388:	bcs.n	43a2 <FatFile::seekSet(unsigned long)+0x48>
  return true;

fail:
  m_curCluster = tmp;
  return false;
    438a:	movs	r0, #0
  m_curCluster = tmp;
    438c:	str	r7, [r4, #16]
}
    438e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (isRootFixed()) {
    4392:	lsls	r6, r1, #25
    4394:	bpl.n	43a2 <FatFile::seekSet(unsigned long)+0x48>
  uint16_t rootDirEntryCount() const { return m_rootDirEntryCount; }
    4396:	ldr	r3, [r4, #8]
    if (pos <= FS_DIR_SIZE * m_vol->rootDirEntryCount()) {
    4398:	ldrh	r3, [r3, #8]
    439a:	cmp.w	r5, r3, lsl #5
    439e:	bhi.n	438a <FatFile::seekSet(unsigned long)+0x30>
    43a0:	b.n	4372 <FatFile::seekSet(unsigned long)+0x18>
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    43a2:	ldr.w	ip, [r4, #8]
    43a6:	subs	r6, r5, #1
  if (isContiguous()) {
    43a8:	ldrb	r2, [r4, #2]
    return m_sectorsPerClusterShift + m_bytesPerSectorShift;
    43aa:	ldrb.w	r3, [ip, #6]
    43ae:	lsls	r2, r2, #25
    43b0:	add.w	r3, r3, #9
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    43b4:	uxtb	r3, r3
    43b6:	lsr.w	r6, r6, r3
  if (isContiguous()) {
    43ba:	bpl.n	43c4 <FatFile::seekSet(unsigned long)+0x6a>
    m_curCluster = m_firstCluster + nNew;
    43bc:	ldr	r3, [r4, #32]
    43be:	add	r3, r6
    43c0:	str	r3, [r4, #16]
    goto done;
    43c2:	b.n	4372 <FatFile::seekSet(unsigned long)+0x18>
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());
    43c4:	subs	r2, r0, #1
    43c6:	lsr.w	r3, r2, r3
  if (nNew < nCur || m_curPosition == 0) {
    43ca:	cmp	r6, r3
    43cc:	bcc.n	43d0 <FatFile::seekSet(unsigned long)+0x76>
    43ce:	cbnz	r0, 43f6 <FatFile::seekSet(unsigned long)+0x9c>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    43d0:	lsls	r3, r1, #24
  uint32_t rootDirStart() const { return m_rootDirStart; }
    43d2:	ite	mi
    43d4:	ldrmi.w	r3, [ip, #32]
    43d8:	ldrpl	r3, [r4, #32]
    43da:	str	r3, [r4, #16]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    43dc:	add.w	r8, r4, #16
  while (nNew--) {
    43e0:	cmp	r6, #0
    43e2:	beq.n	4372 <FatFile::seekSet(unsigned long)+0x18>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    43e4:	mov	r2, r8
    43e6:	ldr	r1, [r4, #16]
    43e8:	ldr	r0, [r4, #8]
    43ea:	subs	r6, #1
    43ec:	bl	4d44 <FatPartition::fatGet(unsigned long, unsigned long*)>
    43f0:	cmp	r0, #0
    43f2:	bgt.n	43e0 <FatFile::seekSet(unsigned long)+0x86>
    43f4:	b.n	438a <FatFile::seekSet(unsigned long)+0x30>
    nNew -= nCur;
    43f6:	subs	r6, r6, r3
    43f8:	b.n	43dc <FatFile::seekSet(unsigned long)+0x82>

000043fa <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>:
                              oflag_t oflag, uint8_t lfnOrd) {
    43fa:	push	{r3, r4, r5, r6, r7, lr}
    43fc:	mov	r7, r1
    43fe:	mov	r6, r2
  memset(this, 0, sizeof(FatFile));
    4400:	movs	r1, #0
    4402:	movs	r2, #36	; 0x24
                              oflag_t oflag, uint8_t lfnOrd) {
    4404:	mov	r4, r0
    4406:	mov	r5, r3
  memset(this, 0, sizeof(FatFile));
    4408:	bl	7528 <memset>
  m_vol = dirFile->m_vol;
    440c:	ldr	r0, [r7, #8]
  m_dirCluster = dirFile->m_firstCluster;
    440e:	ldr	r3, [r7, #32]
  m_dirIndex = dirIndex;
    4410:	strh	r6, [r4, #4]
  dir += 0XF & dirIndex;
    4412:	and.w	r6, r6, #15
  m_dirCluster = dirFile->m_firstCluster;
    4416:	str	r3, [r4, #12]
    4418:	add.w	r3, r0, #52	; 0x34
  m_vol = dirFile->m_vol;
    441c:	str	r0, [r4, #8]
  dir += 0XF & dirIndex;
    441e:	add.w	r3, r3, r6, lsl #5
  return (dir->attributes & FAT_ATTRIB_LABEL) == 0;
    4422:	ldrb	r2, [r3, #11]
  if (!isFatFileOrSubdir(dir)) {
    4424:	lsls	r7, r2, #28
    4426:	bmi.n	44a6 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xac>
  m_attributes = dir->attributes & FS_ATTRIB_COPY;
    4428:	and.w	r2, r2, #55	; 0x37
    442c:	strb	r2, [r4, #0]
  if (isFatFile(dir)) {
    442e:	ldrb	r1, [r3, #11]
    4430:	tst.w	r1, #24
    m_attributes |= FILE_ATTR_FILE;
    4434:	itt	eq
    4436:	orreq.w	r2, r2, #8
    443a:	strbeq	r2, [r4, #0]
  m_lfnOrd = lfnOrd;
    443c:	ldrb.w	r2, [sp, #24]
    4440:	strb	r2, [r4, #3]
  switch (oflag & O_ACCMODE) {
    4442:	and.w	r2, r5, #3
    4446:	cmp	r2, #1
    4448:	beq.n	4496 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x9c>
    444a:	cmp	r2, #2
    444c:	beq.n	449a <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa0>
    444e:	cbnz	r2, 44a6 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xac>
      if (oflag & O_TRUNC) {
    4450:	lsls	r6, r5, #21
    4452:	bmi.n	44a6 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xac>
    4454:	movs	r2, #1
  if (m_flags & FILE_FLAG_WRITE) {
    4456:	lsls	r1, r2, #30
      m_flags = FILE_FLAG_READ;
    4458:	strb	r2, [r4, #2]
  if (m_flags & FILE_FLAG_WRITE) {
    445a:	bpl.n	446c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x72>
  bool isSubDir() const { return m_attributes & FILE_ATTR_SUBDIR; }
    445c:	ldrb	r1, [r4, #0]
    if (isSubDir() || isReadOnly()) {
    445e:	lsls	r7, r1, #27
    4460:	bmi.n	44a6 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xac>
    4462:	lsls	r6, r1, #31
    4464:	bmi.n	44a6 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xac>
    m_attributes |= FS_ATTRIB_ARCHIVE;
    4466:	orr.w	r1, r1, #32
    446a:	strb	r1, [r4, #0]
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    446c:	and.w	r1, r5, #8
    4470:	orrs	r2, r1
    4472:	strb	r2, [r4, #2]
  uint32_t sector() { return m_sector; }
    4474:	ldr	r2, [r0, #44]	; 0x2c
                 getLe16(dir->firstClusterLow);
    4476:	ldrh	r1, [r3, #26]
  m_dirSector = m_vol->cacheSectorNumber();
    4478:	str	r2, [r4, #24]
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16) |
    447a:	ldrh	r2, [r3, #20]
    447c:	orr.w	r1, r1, r2, lsl #16
  if (oflag & O_TRUNC) {
    4480:	lsls	r2, r5, #21
    4482:	bpl.n	44ae <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xb4>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    4484:	cbnz	r1, 449e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa4>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    4486:	ldrb	r3, [r4, #2]
    4488:	orn	r3, r3, #127	; 0x7f
    448c:	strb	r3, [r4, #2]
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    448e:	lsls	r3, r5, #17
    4490:	bmi.n	44b6 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xbc>
  return true;
    4492:	movs	r0, #1
}
    4494:	pop	{r3, r4, r5, r6, r7, pc}
  switch (oflag & O_ACCMODE) {
    4496:	movs	r2, #2
    4498:	b.n	4456 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5c>
    449a:	movs	r2, #3
    449c:	b.n	4456 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5c>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    449e:	bl	4e84 <FatPartition::freeChain(unsigned long)>
    44a2:	cmp	r0, #0
    44a4:	bne.n	4486 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x8c>
  m_attributes = FILE_ATTR_CLOSED;
    44a6:	movs	r0, #0
    44a8:	strb	r0, [r4, #0]
  m_flags = 0;
    44aa:	strb	r0, [r4, #2]
  return false;
    44ac:	b.n	4494 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x9a>
    m_firstCluster = firstCluster;
    44ae:	str	r1, [r4, #32]
  return *reinterpret_cast<const uint32_t*>(src);
    44b0:	ldr	r3, [r3, #28]
    m_fileSize = getLe32(dir->fileSize);
    44b2:	str	r3, [r4, #28]
    44b4:	b.n	448e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x94>
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    44b6:	ldr	r1, [r4, #28]
    44b8:	mov	r0, r4
    44ba:	bl	435a <FatFile::seekSet(unsigned long)>
    44be:	cmp	r0, #0
    44c0:	bne.n	4492 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x98>
    44c2:	b.n	44a6 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xac>

000044c4 <FatFile::openNext(FatFile*, int)>:
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
    44c4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    44c8:	mov	r3, r2
  bool isOpen() const { return m_attributes; }
    44ca:	ldrb	r2, [r0, #0]
    44cc:	sub	sp, #20
    44ce:	mov	r7, r0
    44d0:	mov	r6, r1
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    44d2:	cmp	r2, #0
    44d4:	bne.n	455c <FatFile::openNext(FatFile*, int)+0x98>
    44d6:	ldrb	r2, [r1, #0]
    44d8:	tst.w	r2, #208	; 0xd0
    44dc:	beq.n	455c <FatFile::openNext(FatFile*, int)+0x98>
    44de:	ldr	r4, [r1, #20]
    44e0:	ands.w	r4, r4, #31
    44e4:	bne.n	455c <FatFile::openNext(FatFile*, int)+0x98>
    44e6:	mov	r9, r4
    DirFat_t* dir = dirFile->readDirCache();
    44e8:	movs	r1, #0
    44ea:	mov	r0, r6
  uint32_t curPosition() const { return m_curPosition; }
    44ec:	ldr.w	r8, [r6, #20]
    44f0:	str	r3, [sp, #12]
    44f2:	bl	431c <FatFile::readDirCache(bool)>
    if (!dir) {
    44f6:	cbz	r0, 455c <FatFile::openNext(FatFile*, int)+0x98>
    if (dir->name[0] == FAT_NAME_FREE) {
    44f8:	ldrb	r1, [r0, #0]
    44fa:	cbz	r1, 455c <FatFile::openNext(FatFile*, int)+0x98>
    if (dir->name[0] == '.' || dir->name[0] == FAT_NAME_DELETED) {
    44fc:	cmp	r1, #46	; 0x2e
    44fe:	ldr	r3, [sp, #12]
    4500:	beq.n	4546 <FatFile::openNext(FatFile*, int)+0x82>
    4502:	cmp	r1, #229	; 0xe5
    4504:	beq.n	4546 <FatFile::openNext(FatFile*, int)+0x82>
  return (dir->attributes & FAT_ATTRIB_LABEL) == 0;
    4506:	ldrb	r2, [r0, #11]
    } else if (isFatFileOrSubdir(dir)) {
    4508:	ands.w	ip, r2, #8
    450c:	bne.n	454a <FatFile::openNext(FatFile*, int)+0x86>
      if (lfnOrd && checksum != lfnChecksum(dir->name)) {
    450e:	cbz	r4, 4532 <FatFile::openNext(FatFile*, int)+0x6e>
  bool cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  bool createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  uint16_t getLfnChar(DirLfn_t* ldir, uint8_t i);
  uint8_t lfnChecksum(const uint8_t* name) {
    uint8_t sum = 0;
    for (uint8_t i = 0; i < 11; i++) {
    4510:	subs	r1, r0, #1
    4512:	add.w	r5, r0, #10
      sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    4516:	mov.w	r2, ip, lsl #7
    451a:	ldrb.w	r0, [r1, #1]!
    451e:	orr.w	r2, r2, ip, lsr #1
    for (uint8_t i = 0; i < 11; i++) {
    4522:	cmp	r1, r5
      sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    4524:	uxtab	r2, r0, r2
    4528:	uxtb.w	ip, r2
    for (uint8_t i = 0; i < 11; i++) {
    452c:	bne.n	4516 <FatFile::openNext(FatFile*, int)+0x52>
    452e:	cmp	r9, ip
    4530:	bne.n	455c <FatFile::openNext(FatFile*, int)+0x98>
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
    4532:	ubfx	r2, r8, #5, #16
    4536:	mov	r1, r6
    4538:	mov	r0, r7
    453a:	str	r4, [sp, #0]
    453c:	bl	43fa <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
}
    4540:	add	sp, #20
    4542:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      lfnOrd = 0;
    4546:	movs	r4, #0
    4548:	b.n	44e8 <FatFile::openNext(FatFile*, int)+0x24>
    } else if (isFatLongName(dir)) {
    454a:	cmp	r2, #15
    454c:	bne.n	4546 <FatFile::openNext(FatFile*, int)+0x82>
      if (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) {
    454e:	lsls	r2, r1, #25
    4550:	bpl.n	44e8 <FatFile::openNext(FatFile*, int)+0x24>
        lfnOrd = ldir->order & 0X1F;
    4552:	and.w	r4, r1, #31
        checksum = ldir->checksum;
    4556:	ldrb.w	r9, [r0, #13]
    455a:	b.n	44e8 <FatFile::openNext(FatFile*, int)+0x24>
  return false;
    455c:	movs	r0, #0
    455e:	b.n	4540 <FatFile::openNext(FatFile*, int)+0x7c>

00004560 <FatFile::rmdir()>:
bool FatFile::rmdir() {
    4560:	push	{r4, lr}
  if (!isSubDir() || (!USE_LONG_FILE_NAMES && isLFN())) {
    4562:	ldrb	r3, [r0, #0]
bool FatFile::rmdir() {
    4564:	mov	r4, r0
  if (!isSubDir() || (!USE_LONG_FILE_NAMES && isLFN())) {
    4566:	lsls	r2, r3, #27
    4568:	bpl.n	457e <FatFile::rmdir()+0x1e>
  void rewind() { seekSet(0); }
    456a:	movs	r1, #0
    456c:	bl	435a <FatFile::seekSet(unsigned long)>
    DirFat_t* dir = readDirCache(true);
    4570:	movs	r1, #1
    4572:	mov	r0, r4
    4574:	bl	431c <FatFile::readDirCache(bool)>
    if (!dir) {
    4578:	cbnz	r0, 4582 <FatFile::rmdir()+0x22>
      if (!getError()) {
    457a:	ldrb	r3, [r4, #1]
    457c:	cbz	r3, 4596 <FatFile::rmdir()+0x36>
}
    457e:	movs	r0, #0
    4580:	pop	{r4, pc}
    if (dir->name[0] == FAT_NAME_FREE) {
    4582:	ldrb	r3, [r0, #0]
    4584:	cbz	r3, 4596 <FatFile::rmdir()+0x36>
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    4586:	cmp	r3, #229	; 0xe5
    4588:	beq.n	4570 <FatFile::rmdir()+0x10>
    458a:	cmp	r3, #46	; 0x2e
    458c:	beq.n	4570 <FatFile::rmdir()+0x10>
    if (isFatFileOrSubdir(dir)) {
    458e:	ldrb	r3, [r0, #11]
    4590:	lsls	r3, r3, #28
    4592:	bmi.n	4570 <FatFile::rmdir()+0x10>
    4594:	b.n	457e <FatFile::rmdir()+0x1e>
  m_attributes = FILE_ATTR_FILE;
    4596:	movs	r3, #8
  return remove();
    4598:	mov	r0, r4
  m_attributes = FILE_ATTR_FILE;
    459a:	strb	r3, [r4, #0]
  m_flags |= FILE_FLAG_WRITE;
    459c:	ldrb	r3, [r4, #2]
    459e:	orr.w	r3, r3, #2
    45a2:	strb	r3, [r4, #2]
}
    45a4:	ldmia.w	sp!, {r4, lr}
  return remove();
    45a8:	b.w	56b8 <FatFile::remove()>

000045ac <FatFile::sync()>:
//------------------------------------------------------------------------------
bool FatFile::sync() {
    45ac:	push	{r0, r1, r2, r4, r5, lr}
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    45ae:	ldrb	r3, [r0, #0]
bool FatFile::sync() {
    45b0:	mov	r4, r0
  if (!isOpen()) {
    45b2:	cmp	r3, #0
    45b4:	beq.n	462a <FatFile::sync()+0x7e>
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    45b6:	ldrsb.w	r3, [r0, #2]
    45ba:	cmp	r3, #0
    45bc:	bge.n	461e <FatFile::sync()+0x72>
    DirFat_t* dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    45be:	movs	r1, #1
    45c0:	bl	4118 <FatFile::cacheDirEntry(unsigned char)>
    // check for deleted by another open file object
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
    45c4:	mov	r5, r0
    45c6:	cbnz	r0, 45d6 <FatFile::sync()+0x2a>
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
    45c8:	ldrb	r3, [r4, #1]
  return false;
    45ca:	movs	r0, #0
  m_error |= WRITE_ERROR;
    45cc:	orr.w	r3, r3, #1
    45d0:	strb	r3, [r4, #1]
}
    45d2:	add	sp, #12
    45d4:	pop	{r4, r5, pc}
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
    45d6:	ldrb	r3, [r0, #0]
    45d8:	cmp	r3, #229	; 0xe5
    45da:	beq.n	45c8 <FatFile::sync()+0x1c>
    dir->attributes = m_attributes & FS_ATTRIB_COPY;
    45dc:	ldrb	r3, [r4, #0]
    45de:	and.w	r3, r3, #55	; 0x37
    45e2:	strb	r3, [r0, #11]
    if (isFile()) {
    45e4:	ldrb	r3, [r4, #0]
    45e6:	lsls	r3, r3, #28
      setLe32(dir->fileSize, m_fileSize);
    45e8:	itt	mi
    45ea:	ldrmi	r3, [r4, #28]
  *reinterpret_cast<uint32_t*>(dst) = src;
    45ec:	strmi	r3, [r0, #28]
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    45ee:	ldr	r3, [r4, #32]
    45f0:	strh	r3, [r0, #26]
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);
    45f2:	lsrs	r3, r3, #16
    45f4:	strh	r3, [r0, #20]
    if (FsDateTime::callback) {
    45f6:	ldr	r3, [pc, #56]	; (4630 <FatFile::sync()+0x84>)
    45f8:	ldr	r3, [r3, #0]
    45fa:	cbz	r3, 4616 <FatFile::sync()+0x6a>
      FsDateTime::callback(&date, &time, &ms10);
    45fc:	add.w	r2, sp, #3
    4600:	add.w	r1, sp, #6
    4604:	add	r0, sp, #4
    4606:	blx	r3
      setLe16(dir->modifyDate, date);
    4608:	ldrh.w	r3, [sp, #4]
  *reinterpret_cast<uint16_t*>(dst) = src;
    460c:	strh	r3, [r5, #24]
    460e:	strh	r3, [r5, #18]
    4610:	ldrh.w	r3, [sp, #6]
    4614:	strh	r3, [r5, #22]
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    4616:	ldrb	r3, [r4, #2]
    4618:	and.w	r3, r3, #127	; 0x7f
    461c:	strb	r3, [r4, #2]
  if (m_vol->cacheSync()) {
    461e:	ldr	r0, [r4, #8]
    4620:	bl	404a <FatPartition::cacheSync()>
    4624:	cmp	r0, #0
    4626:	beq.n	45c8 <FatFile::sync()+0x1c>
    4628:	b.n	45d2 <FatFile::sync()+0x26>
    return true;
    462a:	movs	r0, #1
    462c:	b.n	45d2 <FatFile::sync()+0x26>
    462e:	nop
    4630:	.word	0x200068ac

00004634 <FatFile::close()>:
bool FatFile::close() {
    4634:	push	{r4, lr}
    4636:	mov	r4, r0
  bool rtn = sync();
    4638:	bl	45ac <FatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    463c:	movs	r3, #0
    463e:	strb	r3, [r4, #0]
  m_flags = 0;
    4640:	strb	r3, [r4, #2]
}
    4642:	pop	{r4, pc}

00004644 <FatFile::open(FatFile*, char const*, int)>:
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    4644:	push	{r4, r5, r6, r7, lr}
    4646:	mov	r7, r3
    4648:	sub	sp, #84	; 0x54
  FatFile() {}
    464a:	movs	r3, #0
    464c:	mov	r6, r0
    464e:	mov	r4, r1
    4650:	str	r2, [sp, #4]
    4652:	str	r3, [sp, #44]	; 0x2c
  if (isOpen() || !dirFile->isDir()) {
    4654:	ldrb	r3, [r0, #0]
    4656:	cbz	r3, 465e <FatFile::open(FatFile*, char const*, int)+0x1a>
  return false;
    4658:	movs	r0, #0
}
    465a:	add	sp, #84	; 0x54
    465c:	pop	{r4, r5, r6, r7, pc}
  if (isOpen() || !dirFile->isDir()) {
    465e:	ldrb	r3, [r1, #0]
    4660:	tst.w	r3, #208	; 0xd0
    4664:	beq.n	4658 <FatFile::open(FatFile*, char const*, int)+0x14>
  if (isDirSeparator(*path)) {
    4666:	ldrb	r3, [r2, #0]
    4668:	cmp	r3, #47	; 0x2f
    466a:	bne.n	4692 <FatFile::open(FatFile*, char const*, int)+0x4e>
    while (isDirSeparator(*path)) {
    466c:	ldr	r2, [sp, #4]
    466e:	ldrb	r3, [r2, #0]
    4670:	cmp	r3, #47	; 0x2f
    4672:	beq.n	4680 <FatFile::open(FatFile*, char const*, int)+0x3c>
      return openRoot(dirFile->m_vol);
    4674:	ldr	r1, [r4, #8]
    if (*path == 0) {
    4676:	cbnz	r3, 4686 <FatFile::open(FatFile*, char const*, int)+0x42>
      return openRoot(dirFile->m_vol);
    4678:	mov	r0, r6
    467a:	bl	4136 <FatFile::openRoot(FatVolume*)>
    467e:	b.n	465a <FatFile::open(FatFile*, char const*, int)+0x16>
      path++;
    4680:	adds	r2, #1
    4682:	str	r2, [sp, #4]
    4684:	b.n	466c <FatFile::open(FatFile*, char const*, int)+0x28>
  if (isOpen()) {
    4686:	add	r0, sp, #44	; 0x2c
    4688:	bl	401e <FatFile::openRoot(FatVolume*) [clone .part.0]>
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    468c:	cmp	r0, #0
    468e:	beq.n	4658 <FatFile::open(FatFile*, char const*, int)+0x14>
    dirFile = &tmpDir;
    4690:	add	r4, sp, #44	; 0x2c
    if (!parsePathName(path, &fname, &path)) {
    4692:	add	r3, sp, #4
    4694:	add	r2, sp, #12
    4696:	ldr	r1, [sp, #4]
    4698:	mov	r0, r6
    469a:	bl	5624 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>
    469e:	cmp	r0, #0
    46a0:	beq.n	4658 <FatFile::open(FatFile*, char const*, int)+0x14>
    if (*path == 0) {
    46a2:	ldr	r3, [sp, #4]
    46a4:	ldrb	r3, [r3, #0]
    46a6:	cbz	r3, 46d0 <FatFile::open(FatFile*, char const*, int)+0x8c>
    if (!open(dirFile, &fname, O_RDONLY)) {
    46a8:	movs	r3, #0
    46aa:	add	r2, sp, #12
    46ac:	mov	r1, r4
    46ae:	mov	r0, r6
    46b0:	bl	53a0 <FatFile::open(FatFile*, FatLfn_t*, int)>
    46b4:	cmp	r0, #0
    46b6:	beq.n	4658 <FatFile::open(FatFile*, char const*, int)+0x14>
    tmpDir = *this;
    46b8:	mov	r5, r6
    46ba:	add	r4, sp, #44	; 0x2c
    46bc:	ldmia	r5!, {r0, r1, r2, r3}
    46be:	stmia	r4!, {r0, r1, r2, r3}
    46c0:	ldmia	r5!, {r0, r1, r2, r3}
    46c2:	stmia	r4!, {r0, r1, r2, r3}
    46c4:	ldr	r3, [r5, #0]
    close();
    46c6:	mov	r0, r6
    tmpDir = *this;
    46c8:	str	r3, [r4, #0]
    close();
    46ca:	bl	4634 <FatFile::close()>
  while (1) {
    46ce:	b.n	4690 <FatFile::open(FatFile*, char const*, int)+0x4c>
  return open(dirFile, &fname, oflag);
    46d0:	mov	r3, r7
    46d2:	add	r2, sp, #12
    46d4:	mov	r1, r4
    46d6:	mov	r0, r6
    46d8:	bl	53a0 <FatFile::open(FatFile*, FatLfn_t*, int)>
    46dc:	b.n	465a <FatFile::open(FatFile*, char const*, int)+0x16>

000046de <FatFile::open(FatVolume*, char const*, int)>:
  return vol && open(vol->vwd(), path, oflag);
    46de:	cbz	r1, 46e8 <FatFile::open(FatVolume*, char const*, int)+0xa>
    46e0:	addw	r1, r1, #1092	; 0x444
    46e4:	b.w	4644 <FatFile::open(FatFile*, char const*, int)>
}
    46e8:	mov	r0, r1
    46ea:	bx	lr

000046ec <FatFile::dirEntry(DirFat_t*)>:
bool FatFile::dirEntry(DirFat_t* dst) {
    46ec:	push	{r4, r5, r6, lr}
    46ee:	mov	r6, r0
    46f0:	mov	r4, r1
  if (!sync()) {
    46f2:	bl	45ac <FatFile::sync()>
    46f6:	mov	r5, r0
    46f8:	cbnz	r0, 4700 <FatFile::dirEntry(DirFat_t*)+0x14>
  return false;
    46fa:	movs	r5, #0
}
    46fc:	mov	r0, r5
    46fe:	pop	{r4, r5, r6, pc}
  dir = cacheDirEntry(FsCache::CACHE_FOR_READ);
    4700:	movs	r1, #0
    4702:	mov	r0, r6
    4704:	bl	4118 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    4708:	mov	r3, r0
    470a:	cmp	r0, #0
    470c:	beq.n	46fa <FatFile::dirEntry(DirFat_t*)+0xe>
  memcpy(dst, dir, sizeof(DirFat_t));
    470e:	mov	r1, r4
    4710:	add.w	r2, r0, #32
    4714:	ldr.w	r0, [r3], #4
    4718:	cmp	r3, r2
    471a:	str.w	r0, [r1], #4
    471e:	bne.n	4714 <FatFile::dirEntry(DirFat_t*)+0x28>
    4720:	b.n	46fc <FatFile::dirEntry(DirFat_t*)+0x10>

00004722 <FatFile::getCreateDateTime(unsigned short*, unsigned short*)>:
bool FatFile::getCreateDateTime(uint16_t* pdate, uint16_t* ptime) {
    4722:	push	{r4, r5, lr}
    4724:	sub	sp, #36	; 0x24
    4726:	mov	r5, r1
    4728:	mov	r4, r2
  if (!dirEntry(&dir)) {
    472a:	mov	r1, sp
    472c:	bl	46ec <FatFile::dirEntry(DirFat_t*)>
    4730:	cbz	r0, 473e <FatFile::getCreateDateTime(unsigned short*, unsigned short*)+0x1c>
  *pdate = getLe16(dir.createDate);
    4732:	ldrh.w	r3, [sp, #16]
    4736:	strh	r3, [r5, #0]
  *ptime = getLe16(dir.createTime);
    4738:	ldrh.w	r3, [sp, #14]
    473c:	strh	r3, [r4, #0]
}
    473e:	add	sp, #36	; 0x24
    4740:	pop	{r4, r5, pc}

00004742 <FatFile::getModifyDateTime(unsigned short*, unsigned short*)>:
bool FatFile::getModifyDateTime(uint16_t* pdate, uint16_t* ptime) {
    4742:	push	{r4, r5, lr}
    4744:	sub	sp, #36	; 0x24
    4746:	mov	r5, r1
    4748:	mov	r4, r2
  if (!dirEntry(&dir)) {
    474a:	mov	r1, sp
    474c:	bl	46ec <FatFile::dirEntry(DirFat_t*)>
    4750:	cbz	r0, 475e <FatFile::getModifyDateTime(unsigned short*, unsigned short*)+0x1c>
  *pdate = getLe16(dir.modifyDate);
    4752:	ldrh.w	r3, [sp, #24]
    4756:	strh	r3, [r5, #0]
  *ptime = getLe16(dir.modifyTime);
    4758:	ldrh.w	r3, [sp, #22]
    475c:	strh	r3, [r4, #0]
}
    475e:	add	sp, #36	; 0x24
    4760:	pop	{r4, r5, pc}

00004762 <FatFile::mkdir(FatFile*, FatLfn_t*)>:
bool FatFile::mkdir(FatFile* parent, FatName_t* fname) {
    4762:	push	{r4, r5, r6, r7, lr}
  if (!parent->isDir()) {
    4764:	ldrb	r3, [r1, #0]
bool FatFile::mkdir(FatFile* parent, FatName_t* fname) {
    4766:	sub	sp, #36	; 0x24
    4768:	mov	r4, r0
    476a:	mov	r6, r1
  if (!parent->isDir()) {
    476c:	tst.w	r3, #208	; 0xd0
    4770:	bne.n	4778 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x16>
  return false;
    4772:	movs	r0, #0
}
    4774:	add	sp, #36	; 0x24
    4776:	pop	{r4, r5, r6, r7, pc}
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    4778:	movw	r3, #2562	; 0xa02
    477c:	bl	53a0 <FatFile::open(FatFile*, FatLfn_t*, int)>
    4780:	cmp	r0, #0
    4782:	beq.n	4772 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x10>
  m_flags = FILE_FLAG_READ;
    4784:	movs	r7, #1
  m_attributes = FILE_ATTR_SUBDIR;
    4786:	movs	r5, #16
  if (!addDirCluster()) {
    4788:	mov	r0, r4
  m_flags = FILE_FLAG_READ;
    478a:	strb	r7, [r4, #2]
  m_attributes = FILE_ATTR_SUBDIR;
    478c:	strb	r5, [r4, #0]
  if (!addDirCluster()) {
    478e:	bl	40a8 <FatFile::addDirCluster()>
    4792:	cmp	r0, #0
    4794:	beq.n	4772 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x10>
  m_firstCluster = m_curCluster;
    4796:	ldr	r3, [r4, #16]
  void rewind() { seekSet(0); }
    4798:	movs	r1, #0
    479a:	mov	r0, r4
    479c:	str	r3, [r4, #32]
    479e:	bl	435a <FatFile::seekSet(unsigned long)>
  if (!sync()) {
    47a2:	mov	r0, r4
    47a4:	bl	45ac <FatFile::sync()>
    47a8:	cmp	r0, #0
    47aa:	beq.n	4772 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x10>
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    47ac:	mov	r1, r7
    47ae:	mov	r0, r4
    47b0:	bl	4118 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    47b4:	cmp	r0, #0
    47b6:	beq.n	4772 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x10>
  memcpy(&dot, dir, sizeof(dot));
    47b8:	mov	r2, sp
  dir->attributes = FS_ATTRIB_DIRECTORY;
    47ba:	strb	r5, [r0, #11]
  memcpy(&dot, dir, sizeof(dot));
    47bc:	mov	r3, r0
    47be:	add.w	ip, r0, #32
    47c2:	mov	r5, r2
    47c4:	ldr	r0, [r3, #0]
    47c6:	adds	r3, #8
    47c8:	ldr.w	r1, [r3, #-4]
    47cc:	mov	r7, r2
    47ce:	cmp	r3, ip
    47d0:	stmia	r7!, {r0, r1}
    47d2:	mov	r2, r7
    47d4:	bne.n	47c4 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x62>
    dot.name[i] = ' ';
    47d6:	mov.w	r3, #538976288	; 0x20202020
  sector = m_vol->clusterStartSector(m_firstCluster);
    47da:	ldr	r0, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    47dc:	ldr	r1, [r4, #32]
    return m_cache.prepare(sector, options);
    47de:	movs	r2, #1
    dot.name[i] = ' ';
    47e0:	str.w	r3, [sp, #1]
    47e4:	adds	r0, #36	; 0x24
    47e6:	str.w	r3, [sp, #5]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    47ea:	subs	r1, #2
    47ec:	strh.w	r3, [sp, #9]
    47f0:	ldrb.w	r3, [r0, #-30]
    47f4:	lsls	r1, r3
    47f6:	ldr.w	r3, [r0, #-16]
    return m_cache.prepare(sector, options);
    47fa:	add	r1, r3
    47fc:	bl	1d0a <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    4800:	mov	r3, r0
    4802:	cmp	r0, #0
    4804:	beq.n	4772 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x10>
  memcpy(&dir[0], &dot, sizeof(dot));
    4806:	movs	r2, #46	; 0x2e
    4808:	mov	ip, r5
    480a:	mov	r7, r0
    480c:	add.w	lr, sp, #32
    4810:	strb.w	r2, [sp]
    4814:	mov	r2, ip
    4816:	adds	r7, #8
    4818:	ldmia	r2!, {r0, r1}
    481a:	cmp	r2, lr
    481c:	str.w	r0, [r7, #-8]
    4820:	str.w	r1, [r7, #-4]
    4824:	mov	ip, r2
    4826:	bne.n	4814 <FatFile::mkdir(FatFile*, FatLfn_t*)+0xb2>
  dot.name[1] = '.';
    4828:	movs	r2, #46	; 0x2e
  memcpy(&dir[1], &dot, sizeof(dot));
    482a:	adds	r3, #32
  dot.name[1] = '.';
    482c:	strb.w	r2, [sp, #1]
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
    4830:	ldr	r2, [r6, #32]
  memcpy(&dir[1], &dot, sizeof(dot));
    4832:	add	r6, sp, #32
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
    4834:	lsrs	r1, r2, #16
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
    4836:	strh.w	r2, [sp, #26]
  memcpy(&dir[1], &dot, sizeof(dot));
    483a:	mov	r2, r5
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
    483c:	strh.w	r1, [sp, #20]
  memcpy(&dir[1], &dot, sizeof(dot));
    4840:	mov	r5, r2
    4842:	adds	r3, #8
    4844:	ldmia	r5!, {r0, r1}
    4846:	cmp	r5, r6
    4848:	str.w	r0, [r3, #-8]
    484c:	str.w	r1, [r3, #-4]
    4850:	mov	r2, r5
    4852:	bne.n	4840 <FatFile::mkdir(FatFile*, FatLfn_t*)+0xde>
  return m_vol->cacheSync();
    4854:	ldr	r0, [r4, #8]
    4856:	bl	404a <FatPartition::cacheSync()>
    485a:	b.n	4774 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x12>

0000485c <FatFile::mkdir(FatFile*, char const*, bool)>:
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    485c:	push	{r4, r5, r6, r7, lr}
    485e:	mov	r7, r3
    4860:	sub	sp, #84	; 0x54
  FatFile() {}
    4862:	movs	r3, #0
    4864:	mov	r6, r0
    4866:	mov	r4, r1
    4868:	str	r2, [sp, #4]
    486a:	str	r3, [sp, #44]	; 0x2c
  if (isOpen() || !parent->isDir()) {
    486c:	ldrb	r3, [r0, #0]
    486e:	cbz	r3, 4876 <FatFile::mkdir(FatFile*, char const*, bool)+0x1a>
  return false;
    4870:	movs	r0, #0
}
    4872:	add	sp, #84	; 0x54
    4874:	pop	{r4, r5, r6, r7, pc}
  if (isOpen() || !parent->isDir()) {
    4876:	ldrb	r3, [r1, #0]
    4878:	tst.w	r3, #208	; 0xd0
    487c:	beq.n	4870 <FatFile::mkdir(FatFile*, char const*, bool)+0x14>
  if (isDirSeparator(*path)) {
    487e:	ldrb	r3, [r2, #0]
    4880:	cmp	r3, #47	; 0x2f
    4882:	bne.n	489a <FatFile::mkdir(FatFile*, char const*, bool)+0x3e>
    while (isDirSeparator(*path)) {
    4884:	ldr	r2, [sp, #4]
    4886:	ldrb	r3, [r2, #0]
    4888:	cmp	r3, #47	; 0x2f
    488a:	beq.n	48d6 <FatFile::mkdir(FatFile*, char const*, bool)+0x7a>
  if (isOpen()) {
    488c:	ldr	r1, [r4, #8]
    488e:	add	r0, sp, #44	; 0x2c
    4890:	bl	401e <FatFile::openRoot(FatVolume*) [clone .part.0]>
    if (!tmpDir.openRoot(parent->m_vol)) {
    4894:	cmp	r0, #0
    4896:	beq.n	4870 <FatFile::mkdir(FatFile*, char const*, bool)+0x14>
    parent = &tmpDir;
    4898:	add	r4, sp, #44	; 0x2c
    if (!parsePathName(path, &fname, &path)) {
    489a:	add	r3, sp, #4
    489c:	add	r2, sp, #12
    489e:	ldr	r1, [sp, #4]
    48a0:	mov	r0, r6
    48a2:	bl	5624 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>
    48a6:	cmp	r0, #0
    48a8:	beq.n	4870 <FatFile::mkdir(FatFile*, char const*, bool)+0x14>
    if (!*path) {
    48aa:	ldr	r3, [sp, #4]
    48ac:	ldrb	r3, [r3, #0]
    48ae:	cbz	r3, 48f0 <FatFile::mkdir(FatFile*, char const*, bool)+0x94>
    if (!open(parent, &fname, O_RDONLY)) {
    48b0:	movs	r3, #0
    48b2:	add	r2, sp, #12
    48b4:	mov	r1, r4
    48b6:	mov	r0, r6
    48b8:	bl	53a0 <FatFile::open(FatFile*, FatLfn_t*, int)>
    48bc:	cbz	r0, 48dc <FatFile::mkdir(FatFile*, char const*, bool)+0x80>
    tmpDir = *this;
    48be:	mov	r5, r6
    48c0:	add	r4, sp, #44	; 0x2c
    48c2:	ldmia	r5!, {r0, r1, r2, r3}
    48c4:	stmia	r4!, {r0, r1, r2, r3}
    48c6:	ldmia	r5!, {r0, r1, r2, r3}
    48c8:	stmia	r4!, {r0, r1, r2, r3}
    48ca:	ldr	r3, [r5, #0]
    close();
    48cc:	mov	r0, r6
    tmpDir = *this;
    48ce:	str	r3, [r4, #0]
    close();
    48d0:	bl	4634 <FatFile::close()>
  while (1) {
    48d4:	b.n	4898 <FatFile::mkdir(FatFile*, char const*, bool)+0x3c>
      path++;
    48d6:	adds	r2, #1
    48d8:	str	r2, [sp, #4]
    48da:	b.n	4884 <FatFile::mkdir(FatFile*, char const*, bool)+0x28>
      if (!pFlag || !mkdir(parent, &fname)) {
    48dc:	cmp	r7, #0
    48de:	beq.n	4870 <FatFile::mkdir(FatFile*, char const*, bool)+0x14>
    48e0:	add	r2, sp, #12
    48e2:	mov	r1, r4
    48e4:	mov	r0, r6
    48e6:	bl	4762 <FatFile::mkdir(FatFile*, FatLfn_t*)>
    48ea:	cmp	r0, #0
    48ec:	bne.n	48be <FatFile::mkdir(FatFile*, char const*, bool)+0x62>
    48ee:	b.n	4870 <FatFile::mkdir(FatFile*, char const*, bool)+0x14>
  return mkdir(parent, &fname);
    48f0:	add	r2, sp, #12
    48f2:	mov	r1, r4
    48f4:	mov	r0, r6
    48f6:	bl	4762 <FatFile::mkdir(FatFile*, FatLfn_t*)>
    48fa:	b.n	4872 <FatFile::mkdir(FatFile*, char const*, bool)+0x16>

000048fc <FatFile::rename(FatFile*, char const*)>:
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    48fc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (!(isFile() || isSubDir())) {
    4900:	ldrb	r3, [r0, #0]
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    4902:	sub	sp, #108	; 0x6c
    4904:	mov.w	r9, #0
    4908:	mov	r4, r0
  if (!(isFile() || isSubDir())) {
    490a:	tst.w	r3, #24
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    490e:	mov	r7, r1
    4910:	mov	r8, r2
    4912:	str.w	r9, [sp, #32]
    4916:	str.w	r9, [sp, #68]	; 0x44
  if (!(isFile() || isSubDir())) {
    491a:	bne.n	4924 <FatFile::rename(FatFile*, char const*)+0x28>
  return false;
    491c:	movs	r0, #0
}
    491e:	add	sp, #108	; 0x6c
    4920:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (m_vol != dirFile->m_vol) {
    4924:	ldr	r2, [r0, #8]
    4926:	ldr	r3, [r1, #8]
    4928:	cmp	r2, r3
    492a:	bne.n	491c <FatFile::rename(FatFile*, char const*)+0x20>
  oldFile = *this;
    492c:	mov	r6, r4
  sync();
    492e:	bl	45ac <FatFile::sync()>
  oldFile = *this;
    4932:	add	r5, sp, #68	; 0x44
    4934:	ldmia	r6!, {r0, r1, r2, r3}
    4936:	stmia	r5!, {r0, r1, r2, r3}
    4938:	ldmia	r6!, {r0, r1, r2, r3}
    493a:	stmia	r5!, {r0, r1, r2, r3}
    493c:	ldr	r3, [r6, #0]
  dir = cacheDirEntry(FsCache::CACHE_FOR_READ);
    493e:	mov	r1, r9
    4940:	mov	r0, r4
  oldFile = *this;
    4942:	str	r3, [r5, #0]
  dir = cacheDirEntry(FsCache::CACHE_FOR_READ);
    4944:	bl	4118 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    4948:	cmp	r0, #0
    494a:	beq.n	491c <FatFile::rename(FatFile*, char const*)+0x20>
  memcpy(&entry, dir, sizeof(entry));
    494c:	mov	r2, sp
    494e:	mov	r3, r0
    4950:	add.w	ip, r0, #32
    4954:	mov	r5, r2
    4956:	ldr	r0, [r3, #0]
    4958:	adds	r3, #8
    495a:	ldr.w	r1, [r3, #-4]
    495e:	mov	r6, r2
    4960:	cmp	r3, ip
    4962:	stmia	r6!, {r0, r1}
    4964:	mov	r2, r6
    4966:	bne.n	4956 <FatFile::rename(FatFile*, char const*)+0x5a>
  if (isFile()) {
    4968:	ldrb	r3, [r4, #0]
    496a:	add	r6, sp, #32
    496c:	ands.w	r3, r3, #8
    4970:	beq.n	4988 <FatFile::rename(FatFile*, char const*)+0x8c>
    if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    4972:	movw	r3, #2561	; 0xa01
    4976:	mov	r2, r8
    4978:	mov	r1, r7
    497a:	mov	r0, r6
    497c:	bl	4644 <FatFile::open(FatFile*, char const*, int)>
    4980:	cmp	r0, #0
    4982:	beq.n	491c <FatFile::rename(FatFile*, char const*)+0x20>
  uint32_t dirCluster = 0;
    4984:	movs	r7, #0
    4986:	b.n	4998 <FatFile::rename(FatFile*, char const*)+0x9c>
    if (!file.mkdir(dirFile, newPath, false)) {
    4988:	mov	r2, r8
    498a:	mov	r1, r7
    498c:	mov	r0, r6
    498e:	bl	485c <FatFile::mkdir(FatFile*, char const*, bool)>
    4992:	cmp	r0, #0
    4994:	beq.n	491c <FatFile::rename(FatFile*, char const*)+0x20>
    dirCluster = file.m_firstCluster;
    4996:	ldr	r7, [sp, #64]	; 0x40
  m_dirSector = file.m_dirSector;
    4998:	ldr	r3, [sp, #56]	; 0x38
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    499a:	movs	r1, #1
    499c:	mov	r0, r4
  m_dirSector = file.m_dirSector;
    499e:	str	r3, [r4, #24]
  m_dirIndex = file.m_dirIndex;
    49a0:	ldrh.w	r3, [sp, #36]	; 0x24
    49a4:	strh	r3, [r4, #4]
  m_lfnOrd = file.m_lfnOrd;
    49a6:	ldrb.w	r3, [sp, #35]	; 0x23
    49aa:	strb	r3, [r4, #3]
  m_dirCluster = file.m_dirCluster;
    49ac:	ldr	r3, [sp, #44]	; 0x2c
    49ae:	str	r3, [r4, #12]
  file.m_attributes = FILE_ATTR_CLOSED;
    49b0:	movs	r3, #0
    49b2:	strb.w	r3, [sp, #32]
  file.m_flags = 0;
    49b6:	strb.w	r3, [sp, #34]	; 0x22
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    49ba:	bl	4118 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    49be:	cmp	r0, #0
    49c0:	beq.n	491c <FatFile::rename(FatFile*, char const*)+0x20>
  memcpy(&dir->createTimeMs, &entry.createTimeMs,
    49c2:	add.w	r3, sp, #13
    49c6:	add.w	r2, r0, #13
    49ca:	add.w	r1, sp, #29
    49ce:	ldr.w	ip, [r3], #4
    49d2:	cmp	r3, r1
    49d4:	str.w	ip, [r2], #4
    49d8:	bne.n	49ce <FatFile::rename(FatFile*, char const*)+0xd2>
    49da:	ldrh	r1, [r3, #0]
    49dc:	strh	r1, [r2, #0]
    49de:	ldrb	r3, [r3, #2]
    49e0:	strb	r3, [r2, #2]
  dir->attributes = entry.attributes;
    49e2:	ldrb.w	r3, [sp, #11]
    49e6:	strb	r3, [r0, #11]
  if (dirCluster) {
    49e8:	cmp	r7, #0
    49ea:	beq.n	4a68 <FatFile::rename(FatFile*, char const*)+0x16c>
    uint32_t sector = m_vol->clusterStartSector(dirCluster);
    49ec:	ldr	r0, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    49ee:	subs	r3, r7, #2
    49f0:	ldrb	r2, [r0, #6]
    return m_cache.prepare(sector, options);
    49f2:	adds	r0, #36	; 0x24
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    49f4:	ldr.w	r1, [r0, #-16]
    49f8:	lsls	r3, r2
    return m_cache.prepare(sector, options);
    49fa:	movs	r2, #0
    49fc:	add	r1, r3
    49fe:	bl	1d0a <FsCache::prepare(unsigned long, unsigned char)>
    if (!dir) {
    4a02:	cmp	r0, #0
    4a04:	beq.n	491c <FatFile::rename(FatFile*, char const*)+0x20>
    memcpy(&entry, &dir[1], sizeof(entry));
    4a06:	add.w	r2, r0, #32
    4a0a:	mov	lr, r5
    4a0c:	add.w	r3, r0, #64	; 0x40
    4a10:	ldr	r0, [r2, #0]
    4a12:	adds	r2, #8
    4a14:	ldr.w	r1, [r2, #-4]
    4a18:	mov	ip, lr
    4a1a:	cmp	r2, r3
    4a1c:	stmia.w	ip!, {r0, r1}
    4a20:	mov	lr, ip
    4a22:	bne.n	4a10 <FatFile::rename(FatFile*, char const*)+0x114>
    if (!m_vol->freeChain(dirCluster)) {
    4a24:	mov	r1, r7
    4a26:	ldr	r0, [r4, #8]
    4a28:	bl	4e84 <FatPartition::freeChain(unsigned long)>
    4a2c:	cmp	r0, #0
    4a2e:	beq.w	491c <FatFile::rename(FatFile*, char const*)+0x20>
    sector = m_vol->clusterStartSector(m_firstCluster);
    4a32:	ldr	r0, [r4, #8]
    4a34:	movs	r2, #1
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    4a36:	ldr	r1, [r4, #32]
    4a38:	ldrb	r3, [r0, #6]
    return m_cache.prepare(sector, options);
    4a3a:	adds	r0, #36	; 0x24
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    4a3c:	subs	r1, #2
    4a3e:	lsls	r1, r3
    4a40:	ldr.w	r3, [r0, #-16]
    return m_cache.prepare(sector, options);
    4a44:	add	r1, r3
    4a46:	bl	1d0a <FsCache::prepare(unsigned long, unsigned char)>
    if (!dir) {
    4a4a:	cmp	r0, #0
    4a4c:	beq.w	491c <FatFile::rename(FatFile*, char const*)+0x20>
    memcpy(&dir[1], &entry, sizeof(entry));
    4a50:	add.w	r3, r0, #32
    4a54:	mov	r2, r5
    4a56:	adds	r3, #8
    4a58:	ldmia	r2!, {r0, r1}
    4a5a:	cmp	r2, r6
    4a5c:	str.w	r0, [r3, #-8]
    4a60:	str.w	r1, [r3, #-4]
    4a64:	mov	r5, r2
    4a66:	bne.n	4a54 <FatFile::rename(FatFile*, char const*)+0x158>
  oldFile.m_firstCluster = 0;
    4a68:	movs	r3, #0
  if (!oldFile.remove()) {
    4a6a:	add	r0, sp, #68	; 0x44
  oldFile.m_firstCluster = 0;
    4a6c:	str	r3, [sp, #100]	; 0x64
  oldFile.m_flags = FILE_FLAG_WRITE;
    4a6e:	movs	r3, #2
    4a70:	strb.w	r3, [sp, #70]	; 0x46
  oldFile.m_attributes = FILE_ATTR_FILE;
    4a74:	movs	r3, #8
    4a76:	strb.w	r3, [sp, #68]	; 0x44
  if (!oldFile.remove()) {
    4a7a:	bl	56b8 <FatFile::remove()>
    4a7e:	cmp	r0, #0
    4a80:	beq.w	491c <FatFile::rename(FatFile*, char const*)+0x20>
  return m_vol->cacheSync();
    4a84:	ldr	r0, [r4, #8]
    4a86:	bl	404a <FatPartition::cacheSync()>
    4a8a:	b.n	491e <FatFile::rename(FatFile*, char const*)+0x22>

00004a8c <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>:
//------------------------------------------------------------------------------
bool FatFile::timestamp(uint8_t flags, uint16_t year, uint8_t month,
                        uint8_t day, uint8_t hour, uint8_t minute,
                        uint8_t second) {
    4a8c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4a90:	mov	fp, r3
  uint16_t dirDate;
  uint16_t dirTime;
  DirFat_t* dir;

  if (!isFile() || year < 1980 || year > 2107 || month < 1 || month > 12 ||
      day < 1 || day > 31 || hour > 23 || minute > 59 || second > 59) {
    4a92:	ldrb	r3, [r0, #0]
                        uint8_t second) {
    4a94:	mov	r5, r0
    4a96:	mov	r6, r1
      day < 1 || day > 31 || hour > 23 || minute > 59 || second > 59) {
    4a98:	lsls	r3, r3, #28
                        uint8_t second) {
    4a9a:	ldrb.w	r4, [sp, #40]	; 0x28
    4a9e:	ldrb.w	r7, [sp, #44]	; 0x2c
    4aa2:	ldrb.w	r8, [sp, #48]	; 0x30
    4aa6:	ldrb.w	r9, [sp, #52]	; 0x34
      day < 1 || day > 31 || hour > 23 || minute > 59 || second > 59) {
    4aaa:	bmi.n	4ab2 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x26>
    setLe16(dir->modifyTime, dirTime);
  }
  return m_vol->cacheSync();

fail:
  return false;
    4aac:	movs	r0, #0
}
    4aae:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!isFile() || year < 1980 || year > 2107 || month < 1 || month > 12 ||
    4ab2:	subw	r2, r2, #1980	; 0x7bc
    4ab6:	uxth.w	sl, r2
    4aba:	cmp.w	sl, #127	; 0x7f
    4abe:	bhi.n	4aac <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x20>
    4ac0:	add.w	r3, fp, #4294967295
    4ac4:	cmp	r3, #11
    4ac6:	bhi.n	4aac <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x20>
    4ac8:	subs	r3, r4, #1
    4aca:	cmp	r3, #30
    4acc:	bhi.n	4aac <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x20>
      day < 1 || day > 31 || hour > 23 || minute > 59 || second > 59) {
    4ace:	cmp	r7, #23
    4ad0:	bhi.n	4aac <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x20>
    4ad2:	cmp.w	r8, #59	; 0x3b
    4ad6:	bhi.n	4aac <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x20>
    4ad8:	cmp.w	r9, #59	; 0x3b
    4adc:	bhi.n	4aac <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x20>
  if (!sync()) {
    4ade:	bl	45ac <FatFile::sync()>
    4ae2:	cmp	r0, #0
    4ae4:	beq.n	4aac <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x20>
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    4ae6:	movs	r1, #1
    4ae8:	mov	r0, r5
    4aea:	bl	4118 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    4aee:	cmp	r0, #0
    4af0:	beq.n	4aac <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x20>
                                              : year << 9 | month << 5 | day;
    4af2:	orr.w	r3, r4, fp, lsl #5
             : hour << 11 | minute << 5 | second >> 1;
    4af6:	mov.w	r2, r9, lsr #1
                                              : year << 9 | month << 5 | day;
    4afa:	orr.w	r3, r3, sl, lsl #9
             : hour << 11 | minute << 5 | second >> 1;
    4afe:	orr.w	r2, r2, r8, lsl #5
                                              : year << 9 | month << 5 | day;
    4b02:	uxth	r3, r3
             : hour << 11 | minute << 5 | second >> 1;
    4b04:	orr.w	r2, r2, r7, lsl #11
  if (flags & T_ACCESS) {
    4b08:	lsls	r7, r6, #31
    4b0a:	it	mi
    4b0c:	strhmi	r3, [r0, #18]
  if (flags & T_CREATE) {
    4b0e:	lsls	r4, r6, #30
    4b10:	uxth	r2, r2
    4b12:	bpl.n	4b26 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x9a>
    dir->createTimeMs = second & 1 ? 100 : 0;
    4b14:	ands.w	r9, r9, #1
    4b18:	strh	r3, [r0, #16]
    4b1a:	strh	r2, [r0, #14]
    4b1c:	it	ne
    4b1e:	movne.w	r9, #100	; 0x64
    4b22:	strb.w	r9, [r0, #13]
  if (flags & T_WRITE) {
    4b26:	lsls	r1, r6, #29
    4b28:	itt	mi
    4b2a:	strhmi	r3, [r0, #24]
    4b2c:	strhmi	r2, [r0, #22]
  return m_vol->cacheSync();
    4b2e:	ldr	r0, [r5, #8]
    4b30:	bl	404a <FatPartition::cacheSync()>
    4b34:	b.n	4aae <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x22>

00004b36 <FatFile::truncate()>:
//------------------------------------------------------------------------------
bool FatFile::truncate() {
    4b36:	push	{r0, r1, r4, lr}
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    4b38:	ldrb	r3, [r0, #2]
bool FatFile::truncate() {
    4b3a:	mov	r4, r0
  if (!isWritable()) {
    4b3c:	lsls	r3, r3, #30
    4b3e:	bmi.n	4b46 <FatFile::truncate()+0x10>
  // need to update directory entry
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

fail:
  return false;
    4b40:	movs	r0, #0
}
    4b42:	add	sp, #8
    4b44:	pop	{r4, pc}
  if (m_firstCluster == 0) {
    4b46:	ldr	r3, [r0, #32]
    4b48:	cbz	r3, 4b9a <FatFile::truncate()+0x64>
  if (m_curCluster) {
    4b4a:	ldr	r1, [r0, #16]
    4b4c:	cbz	r1, 4b88 <FatFile::truncate()+0x52>
    toFree = 0;
    4b4e:	movs	r3, #0
    int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    4b50:	add	r2, sp, #4
    4b52:	ldr	r0, [r0, #8]
    toFree = 0;
    4b54:	str	r3, [sp, #4]
    int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    4b56:	bl	4d44 <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    4b5a:	cmp	r0, #0
    4b5c:	blt.n	4b40 <FatFile::truncate()+0xa>
    if (fg) {
    4b5e:	beq.n	4b70 <FatFile::truncate()+0x3a>
  }
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) { return fatPut(cluster, 0x0FFFFFFF); }
    4b60:	mvn.w	r2, #4026531840	; 0xf0000000
    4b64:	ldr	r1, [r4, #16]
    4b66:	ldr	r0, [r4, #8]
    4b68:	bl	4db0 <FatPartition::fatPut(unsigned long, unsigned long)>
      if (!m_vol->fatPutEOC(m_curCluster)) {
    4b6c:	cmp	r0, #0
    4b6e:	beq.n	4b40 <FatFile::truncate()+0xa>
  if (toFree) {
    4b70:	ldr	r1, [sp, #4]
    4b72:	cbnz	r1, 4b8e <FatFile::truncate()+0x58>
  m_fileSize = m_curPosition;
    4b74:	ldr	r3, [r4, #20]
  return sync();
    4b76:	mov	r0, r4
  m_fileSize = m_curPosition;
    4b78:	str	r3, [r4, #28]
  m_flags |= FILE_FLAG_DIR_DIRTY;
    4b7a:	ldrb	r3, [r4, #2]
    4b7c:	orn	r3, r3, #127	; 0x7f
    4b80:	strb	r3, [r4, #2]
  return sync();
    4b82:	bl	45ac <FatFile::sync()>
    4b86:	b.n	4b42 <FatFile::truncate()+0xc>
    toFree = m_firstCluster;
    4b88:	str	r3, [sp, #4]
    m_firstCluster = 0;
    4b8a:	str	r1, [r0, #32]
    4b8c:	b.n	4b70 <FatFile::truncate()+0x3a>
    if (!m_vol->freeChain(toFree)) {
    4b8e:	ldr	r0, [r4, #8]
    4b90:	bl	4e84 <FatPartition::freeChain(unsigned long)>
    4b94:	cmp	r0, #0
    4b96:	bne.n	4b74 <FatFile::truncate()+0x3e>
    4b98:	b.n	4b40 <FatFile::truncate()+0xa>
    return true;
    4b9a:	movs	r0, #1
    4b9c:	b.n	4b42 <FatFile::truncate()+0xc>
	...

00004ba0 <FatFile::write(void const*, unsigned int)>:
//------------------------------------------------------------------------------
size_t FatFile::write(const void* buf, size_t nbyte) {
    4ba0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  bool isWritable() const { return m_flags & FILE_FLAG_WRITE; }
    4ba4:	ldrb	r3, [r0, #2]
    4ba6:	mov	r4, r0
    4ba8:	mov	r9, r1
    4baa:	mov	r7, r2
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isWritable()) {
    4bac:	lsls	r5, r3, #30
    4bae:	bpl.n	4be6 <FatFile::write(void const*, unsigned int)+0x46>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    4bb0:	lsls	r1, r3, #28
    4bb2:	bmi.n	4bdc <FatFile::write(void const*, unsigned int)+0x3c>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    4bb4:	ldr	r3, [r4, #20]
    4bb6:	adds	r3, r3, r7
    4bb8:	bcs.n	4be6 <FatFile::write(void const*, unsigned int)+0x46>
    4bba:	mov	r8, r7
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
          m_curCluster++;
          fg = 1;
        } else {
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    4bbc:	add.w	sl, r4, #16
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    4bc0:	ldr	r3, [r4, #20]
  while (nToWrite) {
    4bc2:	cmp.w	r8, #0
    4bc6:	bne.n	4bf2 <FatFile::write(void const*, unsigned int)+0x52>
    }
    m_curPosition += n;
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    4bc8:	ldr	r2, [r4, #28]
    4bca:	cmp	r2, r3
    4bcc:	bcs.w	4d2e <FatFile::write(void const*, unsigned int)+0x18e>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    4bd0:	str	r3, [r4, #28]
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    4bd2:	ldrb	r3, [r4, #2]
    4bd4:	orn	r3, r3, #127	; 0x7f
    4bd8:	strb	r3, [r4, #2]
    4bda:	b.n	4d38 <FatFile::write(void const*, unsigned int)+0x198>
    if (!seekSet(m_fileSize)) {
    4bdc:	ldr	r1, [r0, #28]
    4bde:	bl	435a <FatFile::seekSet(unsigned long)>
    4be2:	cmp	r0, #0
    4be4:	bne.n	4bb4 <FatFile::write(void const*, unsigned int)+0x14>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
    4be6:	ldrb	r3, [r4, #1]
  return 0;
    4be8:	movs	r7, #0
  m_error |= WRITE_ERROR;
    4bea:	orr.w	r3, r3, #1
    4bee:	strb	r3, [r4, #1]
  return 0;
    4bf0:	b.n	4d38 <FatFile::write(void const*, unsigned int)+0x198>
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    4bf2:	ldr	r0, [r4, #8]
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    4bf4:	ubfx	r5, r3, #0, #9
      if (m_curCluster != 0) {
    4bf8:	ldr	r1, [r4, #16]
    return (position >> 9) & m_clusterSectorMask;
    4bfa:	ldrb	r6, [r0, #5]
    if (sectorOfCluster == 0 && sectorOffset == 0) {
    4bfc:	ands.w	r6, r6, r3, lsr #9
    4c00:	bne.n	4c18 <FatFile::write(void const*, unsigned int)+0x78>
    4c02:	cbnz	r5, 4c18 <FatFile::write(void const*, unsigned int)+0x78>
      if (m_curCluster != 0) {
    4c04:	cmp	r1, #0
    4c06:	beq.n	4c80 <FatFile::write(void const*, unsigned int)+0xe0>
        if (isContiguous() && m_fileSize > m_curPosition) {
    4c08:	ldrb	r2, [r4, #2]
    4c0a:	lsls	r2, r2, #25
    4c0c:	bpl.n	4c68 <FatFile::write(void const*, unsigned int)+0xc8>
    4c0e:	ldr	r2, [r4, #28]
    4c10:	cmp	r2, r3
    4c12:	bls.n	4c68 <FatFile::write(void const*, unsigned int)+0xc8>
          m_curCluster++;
    4c14:	adds	r1, #1
    4c16:	str	r1, [r4, #16]
    uint32_t sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    4c18:	ldr.w	ip, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    4c1c:	ldr	r1, [r4, #16]
    4c1e:	ldrb.w	r3, [ip, #6]
    4c22:	subs	r1, #2
    4c24:	lsls	r1, r3
    4c26:	ldr.w	r3, [ip, #20]
    4c2a:	add	r1, r3
    4c2c:	add	r1, r6
    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    4c2e:	cmp	r5, #0
    4c30:	bne.n	4c98 <FatFile::write(void const*, unsigned int)+0xf8>
    4c32:	cmp.w	r8, #512	; 0x200
    4c36:	bcc.n	4c98 <FatFile::write(void const*, unsigned int)+0xf8>
    } else if (nToWrite >= 2 * m_vol->bytesPerSector()) {
    4c38:	cmp.w	r8, #1024	; 0x400
    4c3c:	ldr.w	r2, [ip, #44]	; 0x2c
    4c40:	ldr.w	r0, [ip, #40]	; 0x28
    4c44:	bcs.n	4cf8 <FatFile::write(void const*, unsigned int)+0x158>
    if (isCached(sector)) {
    4c46:	cmp	r1, r2
    return m_blockDev->writeSector(sector, src);
    4c48:	mov	r2, r9
    m_sector = 0XFFFFFFFF;
    4c4a:	ittt	eq
    4c4c:	moveq.w	r3, #4294967295
    m_status = 0;
    4c50:	strbeq.w	r5, [ip, #36]	; 0x24
    m_sector = 0XFFFFFFFF;
    4c54:	streq.w	r3, [ip, #44]	; 0x2c
    return m_blockDev->writeSector(sector, src);
    4c58:	ldr	r3, [r0, #0]
    4c5a:	ldr	r3, [r3, #32]
    4c5c:	blx	r3
      if (!m_vol->cacheSafeWrite(sector, src)) {
    4c5e:	cmp	r0, #0
    4c60:	beq.n	4be6 <FatFile::write(void const*, unsigned int)+0x46>
      n = m_vol->bytesPerSector();
    4c62:	mov.w	r6, #512	; 0x200
    4c66:	b.n	4ce2 <FatFile::write(void const*, unsigned int)+0x142>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    4c68:	mov	r2, sl
    4c6a:	bl	4d44 <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    4c6e:	cmp	r0, #0
    4c70:	blt.n	4be6 <FatFile::write(void const*, unsigned int)+0x46>
        if (fg == 0) {
    4c72:	bne.n	4c18 <FatFile::write(void const*, unsigned int)+0x78>
          if (!addCluster()) {
    4c74:	mov	r0, r4
    4c76:	bl	4070 <FatFile::addCluster()>
    4c7a:	cmp	r0, #0
    4c7c:	bne.n	4c18 <FatFile::write(void const*, unsigned int)+0x78>
    4c7e:	b.n	4be6 <FatFile::write(void const*, unsigned int)+0x46>
        if (m_firstCluster == 0) {
    4c80:	ldr	r3, [r4, #32]
    4c82:	cbnz	r3, 4c94 <FatFile::write(void const*, unsigned int)+0xf4>
          if (!addCluster()) {
    4c84:	mov	r0, r4
    4c86:	bl	4070 <FatFile::addCluster()>
    4c8a:	cmp	r0, #0
    4c8c:	beq.n	4be6 <FatFile::write(void const*, unsigned int)+0x46>
          m_firstCluster = m_curCluster;
    4c8e:	ldr	r3, [r4, #16]
    4c90:	str	r3, [r4, #32]
    4c92:	b.n	4c18 <FatFile::write(void const*, unsigned int)+0x78>
          m_curCluster = m_firstCluster;
    4c94:	str	r3, [r4, #16]
    4c96:	b.n	4c18 <FatFile::write(void const*, unsigned int)+0x78>
      n = m_vol->bytesPerSector() - sectorOffset;
    4c98:	rsb	r6, r5, #512	; 0x200
    4c9c:	cmp	r6, r8
    4c9e:	it	cs
    4ca0:	movcs	r6, r8
      if (sectorOffset == 0 &&
    4ca2:	cbnz	r5, 4cf0 <FatFile::write(void const*, unsigned int)+0x150>
    4ca4:	ldr	r2, [r4, #20]
    4ca6:	ldr	r3, [r4, #28]
    4ca8:	cmp	r2, r3
    4caa:	bcs.n	4cf4 <FatFile::write(void const*, unsigned int)+0x154>
          (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
    4cac:	ldrb	r3, [r4, #2]
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    4cae:	tst.w	r3, #32
    4cb2:	ite	eq
    4cb4:	moveq	r2, #1
    4cb6:	movne	r2, #5
    return m_cache.prepare(sector, options);
    4cb8:	add.w	r0, ip, #36	; 0x24
    4cbc:	bl	1d0a <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    4cc0:	cmp	r0, #0
    4cc2:	beq.n	4be6 <FatFile::write(void const*, unsigned int)+0x46>
      memcpy(dst, src, n);
    4cc4:	add	r0, r5
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    4cc6:	add	r5, r6
      memcpy(dst, src, n);
    4cc8:	mov	r2, r6
    4cca:	mov	r1, r9
    4ccc:	bl	756c <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    4cd0:	cmp.w	r5, #512	; 0x200
    4cd4:	ldr	r0, [r4, #8]
    4cd6:	bne.n	4ce2 <FatFile::write(void const*, unsigned int)+0x142>
  bool cacheSyncData() { return m_cache.sync(); }
    4cd8:	adds	r0, #36	; 0x24
    4cda:	bl	1cba <FsCache::sync()>
      if (!m_vol->cacheSafeWrite(sector, src, nSector)) {
    4cde:	cmp	r0, #0
    4ce0:	beq.n	4be6 <FatFile::write(void const*, unsigned int)+0x46>
    m_curPosition += n;
    4ce2:	ldr	r3, [r4, #20]
    src += n;
    4ce4:	add	r9, r6
    nToWrite -= n;
    4ce6:	sub.w	r8, r8, r6
    m_curPosition += n;
    4cea:	add	r3, r6
    4cec:	str	r3, [r4, #20]
    nToWrite -= n;
    4cee:	b.n	4bc0 <FatFile::write(void const*, unsigned int)+0x20>
        cacheOption = FsCache::CACHE_FOR_WRITE;
    4cf0:	movs	r2, #1
    4cf2:	b.n	4cb8 <FatFile::write(void const*, unsigned int)+0x118>
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    4cf4:	movs	r2, #5
    4cf6:	b.n	4cb8 <FatFile::write(void const*, unsigned int)+0x118>
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
    4cf8:	ldrb.w	r3, [ip, #4]
    4cfc:	subs	r3, r3, r6
      uint32_t nSector = nToWrite >> m_vol->bytesPerSectorShift();
    4cfe:	mov.w	r6, r8, lsr #9
    4d02:	cmp	r3, r6
    4d04:	it	cs
    4d06:	movcs	r3, r6
    return sector <= m_sector && m_sector < (sector + count);
    4d08:	cmp	r1, r2
      n = nSector << m_vol->bytesPerSectorShift();
    4d0a:	mov.w	r6, r3, lsl #9
    4d0e:	bhi.n	4d24 <FatFile::write(void const*, unsigned int)+0x184>
    4d10:	add.w	lr, r1, r3
    4d14:	cmp	lr, r2
    m_sector = 0XFFFFFFFF;
    4d16:	ittt	hi
    4d18:	movhi.w	r2, #4294967295
    m_status = 0;
    4d1c:	strbhi.w	r5, [ip, #36]	; 0x24
    m_sector = 0XFFFFFFFF;
    4d20:	strhi.w	r2, [ip, #44]	; 0x2c
    return m_blockDev->writeSectors(sector, src, count);
    4d24:	ldr	r2, [r0, #0]
    4d26:	ldr	r5, [r2, #36]	; 0x24
    4d28:	mov	r2, r9
    4d2a:	blx	r5
    4d2c:	b.n	4cde <FatFile::write(void const*, unsigned int)+0x13e>
  } else if (FsDateTime::callback) {
    4d2e:	ldr	r3, [pc, #16]	; (4d40 <FatFile::write(void const*, unsigned int)+0x1a0>)
    4d30:	ldr	r3, [r3, #0]
    4d32:	cmp	r3, #0
    4d34:	bne.w	4bd2 <FatFile::write(void const*, unsigned int)+0x32>
}
    4d38:	mov	r0, r7
    4d3a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4d3e:	nop
    4d40:	.word	0x200068ac

00004d44 <FatPartition::fatGet(unsigned long, unsigned long*)>:
  uint32_t sector;
  uint32_t next;
  uint8_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    4d44:	cmp	r1, #1
int8_t FatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    4d46:	push	{r4, r5, r6, lr}
    4d48:	mov	r5, r0
    4d4a:	mov	r4, r1
    4d4c:	mov	r6, r2
  if (cluster < 2 || cluster > m_lastCluster) {
    4d4e:	bhi.n	4d56 <FatPartition::fatGet(unsigned long, unsigned long*)+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
    4d50:	mov.w	r0, #4294967295
}
    4d54:	pop	{r4, r5, r6, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
    4d56:	ldr	r3, [r0, #28]
    4d58:	cmp	r3, r1
    4d5a:	bcc.n	4d50 <FatPartition::fatGet(unsigned long, unsigned long*)+0xc>
  uint8_t fatType() const { return m_fatType; }
    4d5c:	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
    4d5e:	cmp	r3, #32
    4d60:	bne.n	4d8c <FatPartition::fatGet(unsigned long, unsigned long*)+0x48>
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    4d62:	ldr	r1, [r0, #24]
    return m_fatCache.prepare(sector, options);
    4d64:	movs	r2, #2
    4d66:	add.w	r0, r0, #564	; 0x234
    4d6a:	add.w	r1, r1, r4, lsr #7
    4d6e:	bl	1d0a <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    4d72:	cmp	r0, #0
    4d74:	beq.n	4d50 <FatPartition::fatGet(unsigned long, unsigned long*)+0xc>
    uint16_t offset = (cluster << 2) & m_sectorMask;
    4d76:	lsls	r4, r4, #2
    next = getLe32(pc + offset);
    4d78:	and.w	r4, r4, #508	; 0x1fc
  return *reinterpret_cast<const uint32_t*>(src);
    4d7c:	ldr	r3, [r0, r4]
  if (isEOC(next)) {
    4d7e:	ldr	r2, [r5, #28]
    4d80:	cmp	r2, r3
  return 1;
    4d82:	itet	cs
    4d84:	movcs	r0, #1
    return 0;
    4d86:	movcc	r0, #0
  *value = next;
    4d88:	strcs	r3, [r6, #0]
  return 1;
    4d8a:	b.n	4d54 <FatPartition::fatGet(unsigned long, unsigned long*)+0x10>
  } else if (fatType() == 16) {
    4d8c:	cmp	r3, #16
    4d8e:	bne.n	4d50 <FatPartition::fatGet(unsigned long, unsigned long*)+0xc>
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1));
    4d90:	ldr	r3, [r0, #24]
    4d92:	ubfx	r1, r1, #8, #8
    4d96:	movs	r2, #2
    4d98:	add.w	r0, r0, #564	; 0x234
    4d9c:	add	r1, r3
    4d9e:	bl	1d0a <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    4da2:	cmp	r0, #0
    4da4:	beq.n	4d50 <FatPartition::fatGet(unsigned long, unsigned long*)+0xc>
    uint16_t offset = (cluster << 1) & m_sectorMask;
    4da6:	lsls	r4, r4, #1
    next = getLe16(pc + offset);
    4da8:	and.w	r4, r4, #510	; 0x1fe
    4dac:	ldrh	r3, [r0, r4]
    4dae:	b.n	4d7e <FatPartition::fatGet(unsigned long, unsigned long*)+0x3a>

00004db0 <FatPartition::fatPut(unsigned long, unsigned long)>:
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    4db0:	cmp	r1, #1
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
    4db2:	push	{r3, r4, r5, lr}
    4db4:	mov	r4, r1
    4db6:	mov	r5, r2
  if (cluster < 2 || cluster > m_lastCluster) {
    4db8:	bhi.n	4dbe <FatPartition::fatPut(unsigned long, unsigned long)+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
    4dba:	movs	r0, #0
}
    4dbc:	pop	{r3, r4, r5, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
    4dbe:	ldr	r3, [r0, #28]
    4dc0:	cmp	r3, r1
    4dc2:	bcc.n	4dba <FatPartition::fatPut(unsigned long, unsigned long)+0xa>
  uint8_t fatType() const { return m_fatType; }
    4dc4:	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
    4dc6:	cmp	r3, #32
    4dc8:	bne.n	4dea <FatPartition::fatPut(unsigned long, unsigned long)+0x3a>
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    4dca:	ldr	r1, [r0, #24]
    return m_fatCache.prepare(sector, options);
    4dcc:	movs	r2, #3
    4dce:	add.w	r0, r0, #564	; 0x234
    4dd2:	add.w	r1, r1, r4, lsr #7
    4dd6:	bl	1d0a <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    4dda:	cmp	r0, #0
    4ddc:	beq.n	4dba <FatPartition::fatPut(unsigned long, unsigned long)+0xa>
    uint16_t offset = (cluster << 2) & m_sectorMask;
    4dde:	lsls	r4, r4, #2
    setLe32(pc + offset, value);
    4de0:	and.w	r4, r4, #508	; 0x1fc
  *reinterpret_cast<uint32_t*>(dst) = src;
    4de4:	str	r5, [r0, r4]
    return true;
    4de6:	movs	r0, #1
    4de8:	b.n	4dbc <FatPartition::fatPut(unsigned long, unsigned long)+0xc>
  if (fatType() == 16) {
    4dea:	cmp	r3, #16
    4dec:	bne.n	4dba <FatPartition::fatPut(unsigned long, unsigned long)+0xa>
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1));
    4dee:	ldr	r3, [r0, #24]
    4df0:	ubfx	r1, r1, #8, #8
    4df4:	movs	r2, #3
    4df6:	add.w	r0, r0, #564	; 0x234
    4dfa:	add	r1, r3
    4dfc:	bl	1d0a <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    4e00:	cmp	r0, #0
    4e02:	beq.n	4dba <FatPartition::fatPut(unsigned long, unsigned long)+0xa>
    uint16_t offset = (cluster << 1) & m_sectorMask;
    4e04:	lsls	r4, r4, #1
    setLe16(pc + offset, value);
    4e06:	and.w	r4, r4, #510	; 0x1fe
    4e0a:	strh	r5, [r0, r4]
    4e0c:	b.n	4de6 <FatPartition::fatPut(unsigned long, unsigned long)+0x36>

00004e0e <FatPartition::allocateCluster(unsigned long, unsigned long*)>:
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    4e0e:	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (m_allocSearchStart < current) {
    4e12:	ldr	r4, [r0, #12]
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    4e14:	mov	r5, r0
    4e16:	mov	r6, r1
    4e18:	mov	r8, r2
  if (m_allocSearchStart < current) {
    4e1a:	cmp	r4, r1
    4e1c:	bcc.n	4e22 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x14>
      setStart = true;
    4e1e:	movs	r7, #1
    4e20:	b.n	4e26 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x18>
    4e22:	mov	r4, r1
    setStart = false;
    4e24:	movs	r7, #0
    find++;
    4e26:	adds	r4, #1
    if (find > m_lastCluster) {
    4e28:	ldr	r3, [r5, #28]
    4e2a:	cmp	r3, r4
    4e2c:	bcs.n	4e34 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x26>
      if (setStart) {
    4e2e:	cbnz	r7, 4e62 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x54>
      find = m_allocSearchStart;
    4e30:	ldr	r4, [r5, #12]
    4e32:	b.n	4e1e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x10>
    if (find == current) {
    4e34:	cmp	r6, r4
    4e36:	beq.n	4e62 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x54>
    int8_t fg = fatGet(find, &f);
    4e38:	add	r2, sp, #4
    4e3a:	mov	r1, r4
    4e3c:	mov	r0, r5
    4e3e:	bl	4d44 <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    4e42:	cmp	r0, #0
    4e44:	blt.n	4e62 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x54>
    if (fg && f == 0) {
    4e46:	beq.n	4e26 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x18>
    4e48:	ldr	r3, [sp, #4]
    4e4a:	cmp	r3, #0
    4e4c:	bne.n	4e26 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x18>
  if (setStart) {
    4e4e:	cbz	r7, 4e52 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x44>
    m_allocSearchStart = find;
    4e50:	str	r4, [r5, #12]
  bool fatPutEOC(uint32_t cluster) { return fatPut(cluster, 0x0FFFFFFF); }
    4e52:	mvn.w	r2, #4026531840	; 0xf0000000
    4e56:	mov	r1, r4
    4e58:	mov	r0, r5
    4e5a:	bl	4db0 <FatPartition::fatPut(unsigned long, unsigned long)>
  if (!fatPutEOC(find)) {
    4e5e:	mov	r7, r0
    4e60:	cbnz	r0, 4e6c <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x5e>
  return false;
    4e62:	movs	r7, #0
}
    4e64:	mov	r0, r7
    4e66:	add	sp, #8
    4e68:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (current) {
    4e6c:	cbnz	r6, 4e74 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x66>
  *next = find;
    4e6e:	str.w	r4, [r8]
  return true;
    4e72:	b.n	4e64 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x56>
    if (!fatPut(current, find)) {
    4e74:	mov	r2, r4
    4e76:	mov	r1, r6
    4e78:	mov	r0, r5
    4e7a:	bl	4db0 <FatPartition::fatPut(unsigned long, unsigned long)>
    4e7e:	cmp	r0, #0
    4e80:	bne.n	4e6e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x60>
    4e82:	b.n	4e62 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x54>

00004e84 <FatPartition::freeChain(unsigned long)>:
//------------------------------------------------------------------------------
// free a cluster chain
bool FatPartition::freeChain(uint32_t cluster) {
    4e84:	push	{r0, r1, r4, r5, r6, lr}
    4e86:	mov	r5, r0
    4e88:	mov	r4, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
    4e8a:	add	r2, sp, #4
    4e8c:	mov	r1, r4
    4e8e:	mov	r0, r5
    4e90:	bl	4d44 <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    4e94:	subs	r6, r0, #0
    4e96:	blt.n	4eba <FatPartition::freeChain(unsigned long)+0x36>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
    4e98:	movs	r2, #0
    4e9a:	mov	r1, r4
    4e9c:	mov	r0, r5
    4e9e:	bl	4db0 <FatPartition::fatPut(unsigned long, unsigned long)>
    4ea2:	cbz	r0, 4eba <FatPartition::freeChain(unsigned long)+0x36>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);
    if (cluster < m_allocSearchStart) {
    4ea4:	ldr	r3, [r5, #12]
    4ea6:	cmp	r3, r4
      m_allocSearchStart = cluster - 1;
    4ea8:	itt	hi
    4eaa:	addhi.w	r4, r4, #4294967295
    4eae:	strhi	r4, [r5, #12]
    }
    cluster = next;
    4eb0:	ldr	r4, [sp, #4]
  } while (fg);
    4eb2:	cmp	r6, #0
    4eb4:	bne.n	4e8a <FatPartition::freeChain(unsigned long)+0x6>

  return true;

fail:
  return false;
}
    4eb6:	add	sp, #8
    4eb8:	pop	{r4, r5, r6, pc}
  return false;
    4eba:	movs	r0, #0
    4ebc:	b.n	4eb6 <FatPartition::freeChain(unsigned long)+0x32>

00004ebe <FatPartition::freeClusterCount()>:
//------------------------------------------------------------------------------
int32_t FatPartition::freeClusterCount() {
    4ebe:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint8_t fatType() const { return m_fatType; }
    4ec2:	ldrb	r3, [r0, #7]
    4ec4:	mov	r6, r0
    return m_freeClusterCount;
  }
#endif  // MAINTAIN_FREE_CLUSTER_COUNT
  uint32_t free = 0;
  uint32_t sector;
  uint32_t todo = m_lastCluster + 1;
    4ec6:	ldr	r5, [r0, #28]
      }
      if (fg && c == 0) {
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    4ec8:	cmp	r3, #16
  uint32_t todo = m_lastCluster + 1;
    4eca:	add.w	r5, r5, #1
  } else if (fatType() == 16 || fatType() == 32) {
    4ece:	beq.n	4edc <FatPartition::freeClusterCount()+0x1e>
    4ed0:	cmp	r3, #32
    4ed2:	beq.n	4edc <FatPartition::freeClusterCount()+0x1e>
  }
  setFreeClusterCount(free);
  return free;

fail:
  return -1;
    4ed4:	mov.w	r0, #4294967295
}
    4ed8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    sector = m_fatStartSector;
    4edc:	ldr	r1, [r6, #24]
  uint32_t free = 0;
    4ede:	movs	r4, #0
    return m_fatCache.prepare(sector, options);
    4ee0:	add.w	r7, r6, #564	; 0x234
    while (todo) {
    4ee4:	cbnz	r5, 4eea <FatPartition::freeClusterCount()+0x2c>
  setFreeClusterCount(free);
    4ee6:	mov	r0, r4
  return free;
    4ee8:	b.n	4ed8 <FatPartition::freeClusterCount()+0x1a>
    4eea:	movs	r2, #2
    4eec:	mov	r0, r7
      uint8_t* pc = fatCachePrepare(sector++, FsCache::CACHE_FOR_READ);
    4eee:	add.w	r8, r1, #1
    4ef2:	bl	1d0a <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    4ef6:	cmp	r0, #0
    4ef8:	beq.n	4ed4 <FatPartition::freeClusterCount()+0x16>
  uint8_t fatType() const { return m_fatType; }
    4efa:	ldrb	r2, [r6, #7]
      n = fatType() == 16 ? m_bytesPerSector / 2 : m_bytesPerSector / 4;
    4efc:	cmp	r2, #16
    4efe:	ite	eq
    4f00:	moveq.w	r3, #256	; 0x100
    4f04:	movne	r3, #128	; 0x80
      if (todo < n) {
    4f06:	cmp	r3, r5
        n = todo;
    4f08:	it	hi
    4f0a:	uxthhi	r3, r5
      if (fatType() == 16) {
    4f0c:	cmp	r2, #16
    4f0e:	bne.n	4f28 <FatPartition::freeClusterCount()+0x6a>
    4f10:	movs	r2, #0
          if (p16[i] == 0) {
    4f12:	ldrh.w	r1, [r0, r2, lsl #1]
    4f16:	cbnz	r1, 4f1a <FatPartition::freeClusterCount()+0x5c>
            free++;
    4f18:	adds	r4, #1
        for (uint16_t i = 0; i < n; i++) {
    4f1a:	adds	r2, #1
    4f1c:	uxth	r1, r2
    4f1e:	cmp	r3, r1
    4f20:	bhi.n	4f12 <FatPartition::freeClusterCount()+0x54>
      todo -= n;
    4f22:	subs	r5, r5, r3
      uint8_t* pc = fatCachePrepare(sector++, FsCache::CACHE_FOR_READ);
    4f24:	mov	r1, r8
    4f26:	b.n	4ee4 <FatPartition::freeClusterCount()+0x26>
    4f28:	movs	r1, #0
          if (p32[i] == 0) {
    4f2a:	ldr.w	r2, [r0, r1, lsl #2]
    4f2e:	cbnz	r2, 4f32 <FatPartition::freeClusterCount()+0x74>
            free++;
    4f30:	adds	r4, #1
        for (uint16_t i = 0; i < n; i++) {
    4f32:	adds	r1, #1
    4f34:	uxth	r2, r1
    4f36:	cmp	r3, r2
    4f38:	bhi.n	4f2a <FatPartition::freeClusterCount()+0x6c>
    4f3a:	b.n	4f22 <FatPartition::freeClusterCount()+0x64>

00004f3c <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)>:
//------------------------------------------------------------------------------
bool FatPartition::init(FsBlockDevice* dev, uint8_t part, uint32_t volStart) {
    4f3c:	push	{r3, r4, r5, r6, r7, lr}
    4f3e:	mov	r5, r3
  m_blockDev = dev;
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
    4f40:	movs	r3, #0
bool FatPartition::init(FsBlockDevice* dev, uint8_t part, uint32_t volStart) {
    4f42:	mov	r4, r0
  m_blockDev = dev;
    4f44:	str	r1, [r0, #0]
  m_fatType = 0;
    4f46:	strb	r3, [r0, #7]
  m_allocSearchStart = 1;
    4f48:	movs	r0, #1
  m_cache.init(dev);
    4f4a:	add.w	r7, r4, #36	; 0x24
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(dev);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    4f4e:	mov	r6, r2
  m_allocSearchStart = 1;
    4f50:	str	r0, [r4, #12]
    m_sector = 0XFFFFFFFF;
    4f52:	mov.w	r0, #4294967295
    m_blockDev = blockDev;
    4f56:	str	r1, [r4, #40]	; 0x28
    m_status = 0;
    4f58:	strb.w	r3, [r4, #36]	; 0x24
    m_sector = 0XFFFFFFFF;
    4f5c:	str	r0, [r4, #44]	; 0x2c
    m_blockDev = blockDev;
    4f5e:	str.w	r1, [r4, #568]	; 0x238
    m_status = 0;
    4f62:	strb.w	r3, [r4, #564]	; 0x234
    m_sector = 0XFFFFFFFF;
    4f66:	str.w	r0, [r4, #572]	; 0x23c
  if (part) {
    4f6a:	cbz	r2, 4fa0 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x64>
    if (part > 4) {
    4f6c:	cmp	r2, #4
    4f6e:	bls.n	4f74 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x38>
  m_fatCache.setMirrorOffset(m_sectorsPerFat);
#endif  // USE_SEPARATE_FAT_CACHE
  return true;

fail:
  return false;
    4f70:	movs	r0, #0
}
    4f72:	pop	{r3, r4, r5, r6, r7, pc}
    return m_cache.prepare(sector, options);
    4f74:	mov	r2, r3
    4f76:	mov	r1, r3
    4f78:	mov	r0, r7
    4f7a:	bl	1d0a <FsCache::prepare(unsigned long, unsigned char)>
    if (!mbr) {
    4f7e:	cmp	r0, #0
    4f80:	beq.n	4f70 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x34>
    MbrPart_t* mp = mbr->part + part - 1;
    4f82:	add.w	r2, r6, #268435456	; 0x10000000
    4f86:	add.w	r0, r0, #446	; 0x1be
    4f8a:	subs	r2, #1
    4f8c:	lsls	r3, r2, #4
    4f8e:	add.w	r2, r0, r2, lsl #4
    if (mp->type == 0 || (mp->boot != 0 && mp->boot != 0X80)) {
    4f92:	ldrb	r1, [r2, #4]
    4f94:	cmp	r1, #0
    4f96:	beq.n	4f70 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x34>
    4f98:	ldrb	r3, [r0, r3]
    4f9a:	lsls	r3, r3, #25
    4f9c:	bne.n	4f70 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x34>
  return *reinterpret_cast<const uint32_t*>(src);
    4f9e:	ldr	r5, [r2, #8]
    4fa0:	movs	r2, #0
    4fa2:	mov	r1, r5
    4fa4:	mov	r0, r7
    4fa6:	bl	1d0a <FsCache::prepare(unsigned long, unsigned char)>
  if (!pbs) {
    4faa:	cmp	r0, #0
    4fac:	beq.n	4f70 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x34>
  if (bpb->fatCount != 2 || getLe16(bpb->bytesPerSector) != m_bytesPerSector) {
    4fae:	ldrb	r3, [r0, #16]
    4fb0:	cmp	r3, #2
    4fb2:	bne.n	4f70 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x34>
    4fb4:	ldrh.w	r3, [r0, #11]
    4fb8:	cmp.w	r3, #512	; 0x200
    4fbc:	bne.n	4f70 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x34>
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    4fbe:	ldrb	r1, [r0, #13]
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    4fc0:	movs	r6, #9
    4fc2:	movs	r2, #0
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    4fc4:	subs	r3, r1, #1
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    4fc6:	strb	r1, [r4, #4]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    4fc8:	strb	r3, [r4, #5]
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    4fca:	movs	r3, #1
    4fcc:	cmp	r1, r3
    4fce:	bne.n	501c <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0xe0>
    4fd0:	strb	r2, [r4, #6]
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
    4fd2:	ldrh	r3, [r0, #22]
    4fd4:	str	r3, [r4, #16]
  if (m_sectorsPerFat == 0) {
    4fd6:	cbnz	r3, 4fdc <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0xa0>
    4fd8:	ldr	r3, [r0, #36]	; 0x24
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
    4fda:	str	r3, [r4, #16]
  m_fatStartSector = volStart + getLe16(bpb->reservedSectorCount);
    4fdc:	ldrh	r3, [r0, #14]
  return *reinterpret_cast<const uint16_t*>(src);
    4fde:	ldrh.w	r1, [r0, #17]
    4fe2:	add	r3, r5
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
    4fe4:	ldr	r6, [r4, #16]
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);
    4fe6:	strh	r1, [r4, #8]
      ((FS_DIR_SIZE * m_rootDirEntryCount + m_bytesPerSector - 1) /
    4fe8:	lsls	r1, r1, #5
  m_fatStartSector = volStart + getLe16(bpb->reservedSectorCount);
    4fea:	str	r3, [r4, #24]
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
    4fec:	add.w	r3, r3, r6, lsl #1
      ((FS_DIR_SIZE * m_rootDirEntryCount + m_bytesPerSector - 1) /
    4ff0:	addw	r1, r1, #511	; 0x1ff
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
    4ff4:	str	r3, [r4, #32]
      m_rootDirStart +
    4ff6:	add.w	r3, r3, r1, lsr #9
  totalSectors = getLe16(bpb->totalSectors16);
    4ffa:	ldrh.w	r1, [r0, #19]
  m_dataStartSector =
    4ffe:	str	r3, [r4, #20]
  if (totalSectors == 0) {
    5000:	cbnz	r1, 5004 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0xc8>
  return *reinterpret_cast<const uint32_t*>(src);
    5002:	ldr	r1, [r0, #32]
  countOfClusters = totalSectors - (m_dataStartSector - volStart);
    5004:	subs	r5, r5, r3
    5006:	add	r5, r1
  countOfClusters >>= m_sectorsPerClusterShift;
    5008:	lsrs	r5, r2
  m_lastCluster = countOfClusters + 1;
    500a:	adds	r3, r5, #1
    500c:	str	r3, [r4, #28]
  if (countOfClusters < 4085) {
    500e:	movw	r3, #4084	; 0xff4
    5012:	cmp	r5, r3
    5014:	bhi.n	502e <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0xf2>
    m_fatType = 12;
    5016:	movs	r3, #12
    5018:	strb	r3, [r4, #7]
    501a:	b.n	4f70 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x34>
    if (tmp == 0) {
    501c:	subs	r6, #1
    501e:	bne.n	5024 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0xe8>
    5020:	strb	r2, [r4, #6]
    5022:	b.n	4f70 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x34>
    m_sectorsPerClusterShift++;
    5024:	adds	r2, #1
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    5026:	lsls	r3, r3, #1
    m_sectorsPerClusterShift++;
    5028:	uxtb	r2, r2
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    502a:	uxtb	r3, r3
    502c:	b.n	4fcc <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x90>
  } else if (countOfClusters < 65525) {
    502e:	movw	r3, #65524	; 0xfff4
    5032:	cmp	r5, r3
    5034:	ite	hi
    5036:	ldrhi	r3, [r0, #44]	; 0x2c
    5038:	movls	r3, #16
  return true;
    503a:	mov.w	r0, #1
  /** Set the offset to the second FAT for mirroring.
   * \param[in] offset Sector offset to second FAT.
   */
  void setMirrorOffset(uint32_t offset) { m_mirrorOffset = offset; }
    503e:	str	r6, [r4, #48]	; 0x30
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
    5040:	itt	hi
    5042:	strhi	r3, [r4, #32]
    5044:	movhi	r3, #32
    5046:	str.w	r6, [r4, #576]	; 0x240
    m_fatType = 16;
    504a:	strb	r3, [r4, #7]
  return true;
    504c:	b.n	4f72 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x36>

0000504e <FatFile::lfnChecksum(unsigned char const*) [clone .isra.0]>:
    for (uint8_t i = 0; i < 11; i++) {
    504e:	subs	r1, r0, #1
    5050:	add.w	r3, r0, #10
    uint8_t sum = 0;
    5054:	movs	r0, #0
      sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    5056:	lsls	r2, r0, #7
    5058:	orr.w	r2, r2, r0, lsr #1
    505c:	ldrb.w	r0, [r1, #1]!
    5060:	uxtab	r2, r0, r2
    for (uint8_t i = 0; i < 11; i++) {
    5064:	cmp	r1, r3
      sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    5066:	uxtb	r0, r2
    for (uint8_t i = 0; i < 11; i++) {
    5068:	bne.n	5056 <FatFile::lfnChecksum(unsigned char const*) [clone .isra.0]+0x8>
    }
    return sum;
  }
    506a:	bx	lr

0000506c <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)>:
  } else if (i < 13) {
    setLe16(ldir->unicode3 + 2 * (i - 11), c);
  }
}
//==============================================================================
bool FatFile::cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    506c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  FatFile dir = *this;
    5070:	mov	r6, r0
bool FatFile::cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    5072:	sub	sp, #44	; 0x2c
    5074:	mov	r5, r2
    5076:	mov	r7, r0
    5078:	mov	sl, r1
    507a:	mov	r9, r3
  FatFile dir = *this;
    507c:	add	r4, sp, #4
    507e:	ldmia	r6!, {r0, r1, r2, r3}
    5080:	stmia	r4!, {r0, r1, r2, r3}
    5082:	ldmia	r6!, {r0, r1, r2, r3}
    5084:	stmia	r4!, {r0, r1, r2, r3}
    5086:	ldr	r3, [r6, #0]
  DirLfn_t* ldir;
  fname->reset();
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    5088:	movs	r6, #1
  FatFile dir = *this;
    508a:	str	r3, [r4, #0]
  void reset() { next = begin; }
    508c:	ldr	r3, [r5, #0]
    508e:	str	r3, [r5, #4]
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    5090:	cmp	r6, r9
    5092:	bls.n	5098 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x2c>
        return false;
      }
#endif  // USE_UTF8_LONG_NAMES
    }
  }
  return true;
    5094:	movs	r0, #1
    5096:	b.n	50aa <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x3e>
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(index - order));
    5098:	sub.w	r1, sl, r6
    509c:	add	r0, sp, #4
    509e:	uxth	r1, r1
    50a0:	bl	3ec0 <FatFile::cacheDir(unsigned short)>
    if (!ldir) {
    50a4:	mov	fp, r0
    50a6:	cbnz	r0, 50b0 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x44>

fail:
  return false;
    50a8:	movs	r0, #0
}
    50aa:	add	sp, #44	; 0x2c
    50ac:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    50b0:	mov.w	r8, #0
      uint16_t u = getLfnChar(ldir, i);
    50b4:	uxtb.w	r2, r8
    50b8:	mov	r1, fp
    50ba:	mov	r0, r7
    50bc:	bl	3eda <FatFile::getLfnChar(DirLfn_t*, unsigned char)>
      if (fname->atEnd()) {
    50c0:	ldrd	r2, r3, [r5, #4]
    50c4:	cmp	r3, r2
    50c6:	bne.n	50d0 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x64>
        return u == 0;
    50c8:	clz	r0, r0
    50cc:	lsrs	r0, r0, #5
    50ce:	b.n	50aa <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x3e>
      if (u > 0X7F || toUpper(u) != toUpper(fname->getch())) {
    50d0:	cmp	r0, #127	; 0x7f
    50d2:	bhi.n	50a8 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x3c>
    50d4:	uxtb	r4, r0
inline char toUpper(char c) { return isLower(c) ? c - 'a' + 'A' : c; }
    50d6:	sub.w	r3, r4, #97	; 0x61
    50da:	cmp	r3, #25
  char getch() { return atEnd() ? 0 : *next++; }
    50dc:	add.w	r3, r2, #1
    50e0:	str	r3, [r5, #4]
    50e2:	it	ls
    50e4:	subls	r4, #32
    50e6:	ldrb	r3, [r2, #0]
    50e8:	it	ls
    50ea:	uxtbls	r4, r4
    50ec:	sub.w	r2, r3, #97	; 0x61
    50f0:	cmp	r2, #25
    50f2:	itt	ls
    50f4:	subls	r3, #32
    50f6:	uxtbls	r3, r3
      if (u > 0X7F || toUpper(u) != toUpper(fname->getch())) {
    50f8:	cmp	r3, r4
    50fa:	bne.n	50a8 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x3c>
    for (uint8_t i = 0; i < 13; i++) {
    50fc:	add.w	r8, r8, #1
    5100:	cmp.w	r8, #13
    5104:	bne.n	50b4 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x48>
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    5106:	adds	r6, #1
    5108:	uxtb	r6, r6
    510a:	b.n	5090 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x24>

0000510c <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)>:
//------------------------------------------------------------------------------
bool FatFile::createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    510c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  FatFile dir = *this;
    5110:	mov	r4, r0
bool FatFile::createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    5112:	sub	sp, #44	; 0x2c
    5114:	mov	r5, r2
    5116:	mov	r7, r1
    5118:	mov	r6, r3
  FatFile dir = *this;
    511a:	add.w	ip, sp, #4
  DirLfn_t* ldir;
  uint8_t checksum = lfnChecksum(fname->sfn);
  uint8_t fc = 0;
  fname->reset();

  for (uint8_t order = 1; order <= lfnOrd; order++) {
    511e:	mov.w	r8, #1
  uint8_t fc = 0;
    5122:	mov.w	r9, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
    dir.m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    5126:	mov.w	fp, #15
  FatFile dir = *this;
    512a:	ldmia	r4!, {r0, r1, r2, r3}
    512c:	stmia.w	ip!, {r0, r1, r2, r3}
    5130:	ldmia	r4!, {r0, r1, r2, r3}
    5132:	stmia.w	ip!, {r0, r1, r2, r3}
    5136:	ldr	r3, [r4, #0]
  uint8_t checksum = lfnChecksum(fname->sfn);
    5138:	add.w	r0, r5, #18
  FatFile dir = *this;
    513c:	str.w	r3, [ip]
  uint8_t checksum = lfnChecksum(fname->sfn);
    5140:	bl	504e <FatFile::lfnChecksum(unsigned char const*) [clone .isra.0]>
  void reset() { next = begin; }
    5144:	ldr	r3, [r5, #0]
    5146:	mov	sl, r0
    5148:	str	r3, [r5, #4]
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    514a:	cmp	r8, r6
    514c:	bls.n	5156 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x4a>
        DBG_HALT_IF(cp == 0XFFFF);
      }
      putLfnChar(ldir, i, cp);
    }
  }
  return true;
    514e:	movs	r0, #1

fail:
  return false;
}
    5150:	add	sp, #44	; 0x2c
    5152:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(index - order));
    5156:	sub.w	r1, r7, r8
    515a:	add	r0, sp, #4
    515c:	uxth	r1, r1
    515e:	bl	3ec0 <FatFile::cacheDir(unsigned short)>
    if (!ldir) {
    5162:	cmp	r0, #0
    5164:	beq.n	5150 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x44>
    dir.m_vol->cacheDirty();
    5166:	ldr	r2, [sp, #12]
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    5168:	cmp	r8, r6
    516a:	add.w	r4, r0, #1
  void dirty() { m_status |= CACHE_STATUS_DIRTY; }
    516e:	ldrb.w	r3, [r2, #36]	; 0x24
    5172:	orr.w	r3, r3, #1
    5176:	strb.w	r3, [r2, #36]	; 0x24
    517a:	ite	eq
    517c:	orreq.w	r3, r8, #64	; 0x40
    5180:	movne	r3, r8
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    5182:	strb.w	fp, [r0, #11]
    ldir->checksum = checksum;
    5186:	strb.w	sl, [r0, #13]
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    518a:	strb	r3, [r0, #0]
    ldir->mustBeZero1 = 0;
    518c:	movs	r3, #0
    518e:	strb	r3, [r0, #12]
  bool atEnd() { return next == end; }
    5190:	ldr	r1, [r5, #8]
  *reinterpret_cast<uint16_t*>(dst) = src;
    5192:	strh	r3, [r0, #26]
    5194:	ldr	r2, [r5, #4]
      if (fname->atEnd()) {
    5196:	cmp	r2, r1
    5198:	bne.n	51c6 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xba>
        cp = fc++ ? 0XFFFF : 0;
    519a:	cmp.w	r9, #0
    519e:	beq.n	51ce <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xc2>
    51a0:	add.w	r9, r9, #1
    51a4:	movw	r2, #65535	; 0xffff
    51a8:	uxtb.w	r9, r9
  if (i < 5) {
    51ac:	cmp	r3, #4
    51ae:	uxtb	r0, r3
    51b0:	bhi.n	51d6 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xca>
    51b2:	strh	r2, [r4, #0]
    for (uint8_t i = 0; i < 13; i++) {
    51b4:	adds	r3, #1
    51b6:	adds	r4, #2
    51b8:	cmp	r3, #13
    51ba:	bne.n	5194 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x88>
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    51bc:	add.w	r8, r8, #1
    51c0:	uxtb.w	r8, r8
    51c4:	b.n	514a <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x3e>
  uint16_t get16() { return atEnd() ? 0 : *next++; }
    51c6:	adds	r0, r2, #1
    51c8:	str	r0, [r5, #4]
    51ca:	ldrb	r2, [r2, #0]
    51cc:	b.n	51ac <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xa0>
        cp = fc++ ? 0XFFFF : 0;
    51ce:	mov	r2, r9
    51d0:	mov.w	r9, #1
    51d4:	b.n	51ac <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xa0>
  } else if (i < 11) {
    51d6:	cmp	r0, #10
    51d8:	ite	ls
    51da:	strhls.w	r2, [r4, #3]
    51de:	strhhi.w	r2, [r4, #5]
}
    51e2:	b.n	51b4 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xa8>

000051e4 <FatFile::makeSFN(FatLfn_t*)>:
  uint8_t uc = 0;
  uint8_t i = 0;
  uint8_t in = 7;
  const char* dot;
  const char* end = fname->end;
  const char* ptr = fname->begin;
    51e4:	mov	r2, r0
  // Assume blanks removed from start and end.
  DBG_HALT_IF(*ptr == ' ' || *(end - 1) == ' ' || *(end - 1) == '.');

  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
    51e6:	mov.w	r1, #538976288	; 0x20202020
  const char* ptr = fname->begin;
    51ea:	ldr.w	r3, [r2], #18
bool FatFile::makeSFN(FatLfn_t* fname) {
    51ee:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  const char* end = fname->end;
    51f2:	ldr	r6, [r0, #8]
bool FatFile::makeSFN(FatLfn_t* fname) {
    51f4:	mov	r5, r0
    fname->sfn[k] = ' ';
    51f6:	str.w	r1, [r0, #18]
    51fa:	str	r1, [r2, #4]
    51fc:	str.w	r1, [r2, #7]
  }
  // Not 8.3 if starts with dot.
  is83 = *ptr == '.' ? false : true;
    5200:	ldrb	r0, [r3, #0]
    5202:	subs	r0, #46	; 0x2e
    5204:	it	ne
    5206:	movne	r0, #1
  // Skip leading dots.
  for (; *ptr == '.'; ptr++) {
    5208:	mov	r7, r3
    520a:	ldrb.w	r2, [r3], #1
    520e:	cmp	r2, #46	; 0x2e
    5210:	beq.n	5208 <FatFile::makeSFN(FatLfn_t*)+0x24>
  }
  // Find last dot.
  for (dot = end - 1; dot > ptr && *dot != '.'; dot--) {
    5212:	subs	r3, r6, #1
    5214:	cmp	r3, r7
    5216:	mov	lr, r3
    5218:	bls.n	5222 <FatFile::makeSFN(FatLfn_t*)+0x3e>
    521a:	ldrb.w	r2, [r3], #-1
    521e:	cmp	r2, #46	; 0x2e
    5220:	bne.n	5214 <FatFile::makeSFN(FatLfn_t*)+0x30>
    5222:	movs	r2, #0
    5224:	mov.w	ip, #7
    5228:	mov.w	r9, #8
    522c:	mov	r1, r2
    522e:	mov	r8, r2
    5230:	b.n	5248 <FatFile::makeSFN(FatLfn_t*)+0x64>
  }

  for (; ptr < end; ptr++) {
    c = *ptr;
    5232:	ldrb	r3, [r7, #0]
    if (c == '.' && ptr == dot) {
    5234:	cmp	r3, #46	; 0x2e
    5236:	bne.n	5264 <FatFile::makeSFN(FatLfn_t*)+0x80>
    5238:	cmp	lr, r7
    523a:	bne.n	5280 <FatFile::makeSFN(FatLfn_t*)+0x9c>
      in = 10;                // Max index for full 8.3 name.
    523c:	mov.w	ip, #10
      i = 8;                  // Place for extension.
    5240:	movs	r1, #8
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    5242:	mov.w	r9, #16
  for (; ptr < end; ptr++) {
    5246:	adds	r7, #1
    5248:	cmp	r7, r6
    524a:	bcc.n	5232 <FatFile::makeSFN(FatLfn_t*)+0x4e>
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
    524c:	ldrb	r3, [r5, #18]
    524e:	cmp	r3, #32
    5250:	beq.n	5304 <FatFile::makeSFN(FatLfn_t*)+0x120>
    DBG_HALT_MACRO;
    goto fail;
  }
  if (is83) {
    5252:	cmp	r0, #0
    5254:	beq.n	52f0 <FatFile::makeSFN(FatLfn_t*)+0x10c>
    fname->flags = (lc & uc) ? FNAME_FLAG_MIXED_CASE : lc;
    5256:	tst.w	r8, r2
    525a:	it	ne
    525c:	movne	r2, #2
    525e:	strb	r2, [r5, #17]
  }
  return true;

fail:
  return false;
}
    5260:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (c == '"' || c == '|' || c == '[' || c == '\\' || c == ']') {
    5264:	cmp	r3, #34	; 0x22
    5266:	beq.n	5280 <FatFile::makeSFN(FatLfn_t*)+0x9c>
    5268:	cmp	r3, #124	; 0x7c
    526a:	beq.n	5280 <FatFile::makeSFN(FatLfn_t*)+0x9c>
    526c:	sub.w	r4, r3, #91	; 0x5b
    5270:	cmp	r4, #2
    5272:	bls.n	5280 <FatFile::makeSFN(FatLfn_t*)+0x9c>
  if ((0X2A <= c && c <= 0X2F && c != 0X2D) || (0X3A <= c && c <= 0X3F)) {
    5274:	sub.w	r4, r3, #42	; 0x2a
    5278:	cmp	r4, #5
    527a:	bhi.n	528a <FatFile::makeSFN(FatLfn_t*)+0xa6>
    527c:	cmp	r3, #45	; 0x2d
    527e:	beq.n	52a6 <FatFile::makeSFN(FatLfn_t*)+0xc2>
      if (i > in) {
    5280:	cmp	r1, ip
    5282:	bhi.n	52aa <FatFile::makeSFN(FatLfn_t*)+0xc6>
        is83 = false;
    5284:	movs	r0, #0
        c = '_';
    5286:	movs	r3, #95	; 0x5f
    5288:	b.n	52cc <FatFile::makeSFN(FatLfn_t*)+0xe8>
    528a:	sub.w	r4, r3, #58	; 0x3a
    528e:	cmp	r4, #5
    5290:	bls.n	529a <FatFile::makeSFN(FatLfn_t*)+0xb6>
      if (sfnReservedChar(c)) {
    5292:	sub.w	r4, r3, #33	; 0x21
    5296:	cmp	r4, #93	; 0x5d
    5298:	bls.n	52a6 <FatFile::makeSFN(FatLfn_t*)+0xc2>
        if ((c & 0XC0) == 0X80) {
    529a:	and.w	r3, r3, #192	; 0xc0
    529e:	cmp	r3, #128	; 0x80
    52a0:	bne.n	5280 <FatFile::makeSFN(FatLfn_t*)+0x9c>
        is83 = false;
    52a2:	movs	r0, #0
    52a4:	b.n	5246 <FatFile::makeSFN(FatLfn_t*)+0x62>
      if (i > in) {
    52a6:	cmp	r1, ip
    52a8:	bls.n	52ba <FatFile::makeSFN(FatLfn_t*)+0xd6>
        if (in == 10 || ptr > dot) {
    52aa:	cmp.w	ip, #10
    52ae:	beq.n	52ec <FatFile::makeSFN(FatLfn_t*)+0x108>
    52b0:	cmp	lr, r7
    52b2:	bcc.n	52ec <FatFile::makeSFN(FatLfn_t*)+0x108>
        ptr = dot - 1;
    52b4:	add.w	r7, lr, #4294967295
        continue;
    52b8:	b.n	52a2 <FatFile::makeSFN(FatLfn_t*)+0xbe>
      if (isLower(c)) {
    52ba:	sub.w	r4, r3, #97	; 0x61
    52be:	cmp	r4, #25
    52c0:	bhi.n	52de <FatFile::makeSFN(FatLfn_t*)+0xfa>
        c += 'A' - 'a';
    52c2:	subs	r3, #32
        lc |= bit;
    52c4:	orr.w	r2, r9, r2
        c += 'A' - 'a';
    52c8:	uxtb	r3, r3
        lc |= bit;
    52ca:	uxtb	r2, r2
      fname->sfn[i++] = c;
    52cc:	adds	r4, r1, #1
    52ce:	add	r1, r5
    52d0:	uxtb	r4, r4
    52d2:	strb	r3, [r1, #18]
      if (i < 7) {
    52d4:	cmp	r4, #6
    52d6:	bhi.n	52da <FatFile::makeSFN(FatLfn_t*)+0xf6>
        fname->seqPos = i;
    52d8:	strb	r4, [r5, #16]
    52da:	mov	r1, r4
    52dc:	b.n	5246 <FatFile::makeSFN(FatLfn_t*)+0x62>
      } else if (isUpper(c)) {
    52de:	sub.w	r4, r3, #65	; 0x41
    52e2:	cmp	r4, #25
        uc |= bit;
    52e4:	it	ls
    52e6:	orrls.w	r8, r9, r8
    52ea:	b.n	52cc <FatFile::makeSFN(FatLfn_t*)+0xe8>
        is83 = false;
    52ec:	movs	r0, #0
    52ee:	b.n	524c <FatFile::makeSFN(FatLfn_t*)+0x68>
    fname->sfn[fname->seqPos] = '~';
    52f0:	ldrb	r3, [r5, #16]
    fname->flags = FNAME_FLAG_LOST_CHARS;
    52f2:	movs	r2, #1
    fname->sfn[fname->seqPos] = '~';
    52f4:	movs	r1, #126	; 0x7e
    52f6:	add	r3, r5
    fname->flags = FNAME_FLAG_LOST_CHARS;
    52f8:	strb	r2, [r5, #17]
  return true;
    52fa:	mov	r0, r2
    fname->sfn[fname->seqPos] = '~';
    52fc:	strb	r1, [r3, #18]
    fname->sfn[fname->seqPos + 1] = '1';
    52fe:	movs	r1, #49	; 0x31
    5300:	strb	r1, [r3, #19]
    5302:	b.n	5260 <FatFile::makeSFN(FatLfn_t*)+0x7c>
  return false;
    5304:	movs	r0, #0
    5306:	b.n	5260 <FatFile::makeSFN(FatLfn_t*)+0x7c>

00005308 <FatFile::makeUniqueSfn(FatLfn_t*)>:
//------------------------------------------------------------------------------
bool FatFile::makeUniqueSfn(FatLfn_t* fname) {
    5308:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    530c:	mov	r7, r0
    530e:	mov	r5, r1
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;
    5310:	ldrb	r6, [r1, #16]
    5312:	movs	r4, #98	; 0x62
  DirFat_t* dir;
  uint16_t hex = 0;
    5314:	mov.w	sl, #0
	return systick_millis_count;
    5318:	ldr.w	r8, [pc, #128]	; 539c <FatFile::makeUniqueSfn(FatLfn_t*)+0x94>
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFatFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    531c:	add.w	r9, r1, #18
    5320:	ldr.w	r3, [r8]
    5324:	cmp	r6, #3
    hex += millis();
    5326:	add	r3, sl
    5328:	it	cs
    532a:	movcs	r6, #3
    532c:	uxth.w	sl, r3
    for (uint8_t i = pos + 4; i > pos; i--) {
    5330:	adds	r3, r6, #4
    5332:	uxtb	r3, r3
      uint8_t h = hex & 0XF;
    5334:	and.w	r2, sl, #15
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    5338:	adds	r1, r5, r3
    for (uint8_t i = pos + 4; i > pos; i--) {
    533a:	subs	r3, #1
      hex >>= 4;
    533c:	mov.w	sl, sl, lsr #4
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    5340:	cmp	r2, #9
    for (uint8_t i = pos + 4; i > pos; i--) {
    5342:	uxtb	r3, r3
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    5344:	ite	ls
    5346:	addls	r2, #48	; 0x30
    5348:	addhi	r2, #55	; 0x37
    for (uint8_t i = pos + 4; i > pos; i--) {
    534a:	cmp	r6, r3
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    534c:	strb	r2, [r1, #18]
    for (uint8_t i = pos + 4; i > pos; i--) {
    534e:	bne.n	5334 <FatFile::makeUniqueSfn(FatLfn_t*)+0x2c>
    fname->sfn[pos] = '~';
    5350:	adds	r3, r5, r6
    5352:	movs	r2, #126	; 0x7e
  void rewind() { seekSet(0); }
    5354:	movs	r1, #0
    5356:	mov	r0, r7
    5358:	strb	r2, [r3, #18]
    535a:	bl	435a <FatFile::seekSet(unsigned long)>
      dir = readDirCache(true);
    535e:	movs	r1, #1
    5360:	mov	r0, r7
    5362:	bl	431c <FatFile::readDirCache(bool)>
      if (!dir) {
    5366:	mov	r1, r0
    5368:	cbnz	r0, 5376 <FatFile::makeUniqueSfn(FatLfn_t*)+0x6e>
        if (!getError()) {
    536a:	ldrb	r0, [r7, #1]
    536c:	clz	r0, r0
    5370:	lsrs	r0, r0, #5
fail:
  return false;

done:
  return true;
}
    5372:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (dir->name[0] == FAT_NAME_FREE) {
    5376:	ldrb	r3, [r0, #0]
    5378:	cbz	r3, 5398 <FatFile::makeUniqueSfn(FatLfn_t*)+0x90>
      if (isFatFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    537a:	ldrb	r3, [r0, #11]
    537c:	lsls	r3, r3, #28
    537e:	bmi.n	535e <FatFile::makeUniqueSfn(FatLfn_t*)+0x56>
    5380:	movs	r2, #11
    5382:	mov	r0, r9
    5384:	bl	ae1c <memcmp>
    5388:	cmp	r0, #0
    538a:	bne.n	535e <FatFile::makeUniqueSfn(FatLfn_t*)+0x56>
  for (uint8_t seq = FIRST_HASH_SEQ; seq < 100; seq++) {
    538c:	subs	r0, r4, #1
    538e:	ands.w	r4, r0, #255	; 0xff
    5392:	bne.n	5320 <FatFile::makeUniqueSfn(FatLfn_t*)+0x18>
  return false;
    5394:	mov	r0, r4
fail:
    5396:	b.n	5372 <FatFile::makeUniqueSfn(FatLfn_t*)+0x6a>
  return true;
    5398:	movs	r0, #1
    539a:	b.n	5372 <FatFile::makeUniqueSfn(FatLfn_t*)+0x6a>
    539c:	.word	0x200070e8

000053a0 <FatFile::open(FatFile*, FatLfn_t*, int)>:
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, FatLfn_t* fname, oflag_t oflag) {
    53a0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    53a4:	vpush	{d8}
    53a8:	sub	sp, #44	; 0x2c
    53aa:	mov	r5, r1
    53ac:	mov	r7, r2
    53ae:	str	r3, [sp, #16]
  uint16_t curIndex;
  uint16_t date;
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  auto vol = dirFile->m_vol;
    53b0:	ldr	r3, [r1, #8]
bool FatFile::open(FatFile* dirFile, FatLfn_t* fname, oflag_t oflag) {
    53b2:	str	r0, [sp, #28]
  auto vol = dirFile->m_vol;
    53b4:	str	r3, [sp, #20]

  if (!dirFile->isDir() || isOpen()) {
    53b6:	ldrb	r3, [r1, #0]
    53b8:	tst.w	r3, #208	; 0xd0
    53bc:	bne.n	53ca <FatFile::open(FatFile*, FatLfn_t*, int)+0x2a>
    goto fail;
  }
  return true;

fail:
  return false;
    53be:	movs	r0, #0
}
    53c0:	add	sp, #44	; 0x2c
    53c2:	vpop	{d8}
    53c6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  bool isOpen() const { return m_attributes; }
    53ca:	ldr	r3, [sp, #28]
    53cc:	ldrb	r3, [r3, #0]
  if (!dirFile->isDir() || isOpen()) {
    53ce:	cmp	r3, #0
    53d0:	bne.n	53be <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
  nameOrd = (fname->len + 12) / 13;
    53d2:	ldr	r3, [r2, #12]
    53d4:	movs	r2, #13
  void rewind() { seekSet(0); }
    53d6:	movs	r1, #0
    53d8:	mov	r0, r5
    53da:	adds	r3, #12
  uint8_t checksum = 0;
    53dc:	mov.w	sl, #0
  nameOrd = (fname->len + 12) / 13;
    53e0:	udiv	r3, r3, r2
    53e4:	uxtb	r3, r3
  uint8_t order = 0;
    53e6:	mov	r8, sl
  uint8_t freeFound = 0;
    53e8:	mov	r4, sl
  bool fnameFound = false;
    53ea:	mov	fp, sl
  nameOrd = (fname->len + 12) / 13;
    53ec:	str	r3, [sp, #24]
  freeNeed = (fname->flags & FNAME_FLAG_NEED_LFN) ? 1 + nameOrd : 1;
    53ee:	ldrb	r3, [r7, #17]
    53f0:	lsls	r2, r3, #30
    53f2:	itett	ne
    53f4:	ldrne	r3, [sp, #24]
    53f6:	moveq	r3, #1
    53f8:	addne.w	r9, r3, #1
    53fc:	uxtbne.w	r3, r9
  uint8_t lfnOrd = 0;
    5400:	mov	r9, sl
  freeNeed = (fname->flags & FNAME_FLAG_NEED_LFN) ? 1 + nameOrd : 1;
    5402:	str	r3, [sp, #8]
    5404:	bl	435a <FatFile::seekSet(unsigned long)>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    5408:	add.w	r3, r7, #18
  uint16_t freeIndex = 0;
    540c:	str.w	sl, [sp, #12]
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    5410:	vmov	s16, r3
    curIndex = dirFile->m_curPosition / FS_DIR_SIZE;
    5414:	ldr	r6, [r5, #20]
    dir = dirFile->readDirCache();
    5416:	movs	r1, #0
    5418:	mov	r0, r5
    curIndex = dirFile->m_curPosition / FS_DIR_SIZE;
    541a:	ubfx	r6, r6, #5, #16
    dir = dirFile->readDirCache();
    541e:	bl	431c <FatFile::readDirCache(bool)>
    if (!dir) {
    5422:	cmp	r0, #0
    5424:	bne.n	54e8 <FatFile::open(FatFile*, FatLfn_t*, int)+0x148>
      if (dirFile->getError()) {
    5426:	ldrb	r3, [r5, #1]
    5428:	cmp	r3, #0
    542a:	bne.n	53be <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
    542c:	ldr	r3, [sp, #16]
    542e:	lsls	r2, r3, #22
    5430:	bpl.n	53be <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>

#define O_READ O_RDONLY
#define O_WRITE O_WRONLY

inline bool isWriteMode(oflag_t oflag) {
  oflag &= O_ACCMODE;
    5432:	and.w	r3, r3, #3
  return oflag == O_WRONLY || oflag == O_RDWR;
    5436:	subs	r3, #1
    5438:	cmp	r3, #1
    543a:	bhi.n	53be <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
  if (freeFound == 0) {
    543c:	ldr	r3, [sp, #12]
    543e:	cmp	r4, #0
    5440:	it	eq
    5442:	moveq	r3, r6
    5444:	str	r3, [sp, #12]
  while (freeFound < freeNeed) {
    5446:	ldr	r3, [sp, #8]
    5448:	cmp	r4, r3
    544a:	bcc.w	55cc <FatFile::open(FatFile*, FatLfn_t*, int)+0x22c>
  if (fnameFound) {
    544e:	cmp.w	fp, #0
    5452:	bne.w	5602 <FatFile::open(FatFile*, FatLfn_t*, int)+0x262>
  lfnOrd = freeNeed - 1;
    5456:	ldr	r3, [sp, #8]
  if (!dirFile->createLFN(curIndex, fname, lfnOrd)) {
    5458:	mov	r2, r7
    545a:	mov	r0, r5
  lfnOrd = freeNeed - 1;
    545c:	subs	r6, r3, #1
  curIndex = freeIndex + lfnOrd;
    545e:	ldr	r3, [sp, #12]
  lfnOrd = freeNeed - 1;
    5460:	uxtb.w	fp, r6
  curIndex = freeIndex + lfnOrd;
    5464:	uxtab	r6, r3, r6
    5468:	uxth	r6, r6
  if (!dirFile->createLFN(curIndex, fname, lfnOrd)) {
    546a:	mov	r3, fp
    546c:	mov	r1, r6
    546e:	bl	510c <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)>
    5472:	cmp	r0, #0
    5474:	beq.n	53be <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
  dir = dirFile->cacheDir(curIndex);
    5476:	mov	r1, r6
    5478:	mov	r0, r5
    547a:	bl	3ec0 <FatFile::cacheDir(unsigned short)>
  if (!dir) {
    547e:	mov	r4, r0
    5480:	cmp	r0, #0
    5482:	beq.n	53be <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
  memset(dir, 0, sizeof(DirFat_t));
    5484:	movs	r2, #32
    5486:	movs	r1, #0
    5488:	bl	7528 <memset>
  memcpy(dir->name, fname->sfn, 11);
    548c:	ldr.w	r3, [r7, #18]
    5490:	str	r3, [r4, #0]
    5492:	ldr.w	r3, [r7, #22]
    5496:	str	r3, [r4, #4]
    5498:	ldrh	r3, [r7, #26]
    549a:	strh	r3, [r4, #8]
    549c:	ldrb	r3, [r7, #28]
    549e:	strb	r3, [r4, #10]
  dir->caseFlags = (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;
    54a0:	ldrb	r3, [r7, #17]
    54a2:	and.w	r3, r3, #24
    54a6:	strb	r3, [r4, #12]
  if (FsDateTime::callback) {
    54a8:	ldr	r3, [pc, #372]	; (5620 <FatFile::open(FatFile*, FatLfn_t*, int)+0x280>)
    54aa:	ldr	r3, [r3, #0]
    54ac:	cmp	r3, #0
    54ae:	beq.w	5612 <FatFile::open(FatFile*, FatLfn_t*, int)+0x272>
    FsDateTime::callback(&date, &time, &ms10);
    54b2:	add.w	r2, sp, #35	; 0x23
    54b6:	add.w	r1, sp, #38	; 0x26
    54ba:	add	r0, sp, #36	; 0x24
    54bc:	blx	r3
  *reinterpret_cast<uint16_t*>(dst) = src;
    54be:	ldrh.w	r3, [sp, #36]	; 0x24
    54c2:	strh	r3, [r4, #16]
    54c4:	ldrh.w	r3, [sp, #38]	; 0x26
    54c8:	strh	r3, [r4, #14]
    dir->createTimeMs = ms10;
    54ca:	ldrb.w	r3, [sp, #35]	; 0x23
    54ce:	strb	r3, [r4, #13]
    54d0:	ldr	r3, [sp, #20]
    54d2:	ldr	r2, [sp, #20]
    54d4:	ldrb.w	r3, [r3, #36]	; 0x24
    54d8:	orr.w	r3, r3, #1
    54dc:	strb.w	r3, [r2, #36]	; 0x24
  void cacheDirty() { m_cache.dirty(); }
    54e0:	b.n	55ba <FatFile::open(FatFile*, FatLfn_t*, int)+0x21a>
        fnameFound = true;
    54e2:	mov.w	fp, #1
    54e6:	b.n	5414 <FatFile::open(FatFile*, FatLfn_t*, int)+0x74>
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
    54e8:	ldrb	r2, [r0, #0]
    54ea:	cmp	r2, #229	; 0xe5
    54ec:	beq.n	54f0 <FatFile::open(FatFile*, FatLfn_t*, int)+0x150>
    54ee:	cbnz	r2, 5512 <FatFile::open(FatFile*, FatLfn_t*, int)+0x172>
    curIndex = dirFile->m_curPosition / FS_DIR_SIZE;
    54f0:	ldr	r3, [sp, #12]
    54f2:	cmp	r4, #0
    54f4:	it	eq
    54f6:	moveq	r3, r6
    54f8:	str	r3, [sp, #12]
      if (freeFound < freeNeed) {
    54fa:	ldr	r3, [sp, #8]
    54fc:	cmp	r4, r3
        freeFound++;
    54fe:	itt	cc
    5500:	addcc	r4, #1
    5502:	uxtbcc	r4, r4
      if (dir->name[0] == FAT_NAME_FREE) {
    5504:	cmp	r2, #0
    5506:	beq.n	542c <FatFile::open(FatFile*, FatLfn_t*, int)+0x8c>
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    5508:	cmp	r2, #229	; 0xe5
    550a:	bne.n	551a <FatFile::open(FatFile*, FatLfn_t*, int)+0x17a>
      lfnOrd = 0;
    550c:	mov.w	r9, #0
    5510:	b.n	5414 <FatFile::open(FatFile*, FatLfn_t*, int)+0x74>
        freeFound = 0;
    5512:	ldr	r3, [sp, #8]
    5514:	cmp	r4, r3
    5516:	it	cc
    5518:	movcc	r4, #0
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    551a:	cmp	r2, #46	; 0x2e
    551c:	beq.n	550c <FatFile::open(FatFile*, FatLfn_t*, int)+0x16c>
  return dir->attributes == FAT_ATTRIB_LONG_NAME;
    551e:	ldrb	r1, [r0, #11]
    } else if (isFatLongName(dir)) {
    5520:	cmp	r1, #15
    5522:	bne.n	5578 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1d8>
      if (!lfnOrd) {
    5524:	cmp.w	r9, #0
    5528:	bne.n	5564 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1c4>
        order = ldir->order & 0X1F;
    552a:	and.w	r8, r2, #31
        if (order != nameOrd ||
    552e:	ldr	r3, [sp, #24]
    5530:	cmp	r3, r8
    5532:	bne.w	5414 <FatFile::open(FatFile*, FatLfn_t*, int)+0x74>
    5536:	ands.w	r9, r2, #64	; 0x40
    553a:	beq.w	5414 <FatFile::open(FatFile*, FatLfn_t*, int)+0x74>
        checksum = ldir->checksum;
    553e:	ldrb.w	sl, [r0, #13]
    5542:	mov	r9, r3
      if (order == 1) {
    5544:	cmp.w	r8, #1
    5548:	bne.w	5414 <FatFile::open(FatFile*, FatLfn_t*, int)+0x74>
        if (!dirFile->cmpName(curIndex + 1, fname, lfnOrd)) {
    554c:	adds	r1, r6, #1
    554e:	mov	r3, r9
    5550:	mov	r2, r7
    5552:	mov	r0, r5
    5554:	uxth	r1, r1
    5556:	bl	506c <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)>
          lfnOrd = 0;
    555a:	cmp	r0, #0
    555c:	it	eq
    555e:	moveq.w	r9, #0
    5562:	b.n	5414 <FatFile::open(FatFile*, FatLfn_t*, int)+0x74>
      } else if (ldir->order != --order || checksum != ldir->checksum) {
    5564:	add.w	r8, r8, #4294967295
    5568:	uxtb.w	r8, r8
    556c:	cmp	r2, r8
    556e:	bne.n	550c <FatFile::open(FatFile*, FatLfn_t*, int)+0x16c>
    5570:	ldrb	r2, [r0, #13]
    5572:	cmp	r2, sl
    5574:	beq.n	5544 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1a4>
    5576:	b.n	550c <FatFile::open(FatFile*, FatLfn_t*, int)+0x16c>
    } else if (isFatFileOrSubdir(dir)) {
    5578:	lsls	r3, r1, #28
    557a:	bmi.n	550c <FatFile::open(FatFile*, FatLfn_t*, int)+0x16c>
      if (lfnOrd) {
    557c:	cmp.w	r9, #0
    5580:	beq.n	5598 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1f8>
        if (1 == order && lfnChecksum(dir->name) == checksum) {
    5582:	cmp.w	r8, #1
    5586:	bne.w	53be <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
    558a:	bl	504e <FatFile::lfnChecksum(unsigned char const*) [clone .isra.0]>
    558e:	cmp	r0, sl
    5590:	bne.w	53be <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
    5594:	mov	fp, r9
    5596:	b.n	55b2 <FatFile::open(FatFile*, FatLfn_t*, int)+0x212>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    5598:	movs	r2, #11
    559a:	vmov	r1, s16
    559e:	bl	ae1c <memcmp>
    55a2:	cmp	r0, #0
    55a4:	bne.w	5414 <FatFile::open(FatFile*, FatLfn_t*, int)+0x74>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
    55a8:	ldrb.w	fp, [r7, #17]
    55ac:	ands.w	fp, fp, #1
    55b0:	bne.n	54e2 <FatFile::open(FatFile*, FatLfn_t*, int)+0x142>
  if (oflag & O_EXCL) {
    55b2:	ldr	r3, [sp, #16]
    55b4:	lsls	r1, r3, #20
    55b6:	bmi.w	53be <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
    55ba:	ldr	r3, [sp, #16]
    55bc:	mov	r2, r6
    55be:	mov	r1, r5
    55c0:	ldr	r0, [sp, #28]
    55c2:	str.w	fp, [sp]
    55c6:	bl	43fa <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    55ca:	b.n	53c0 <FatFile::open(FatFile*, FatLfn_t*, int)+0x20>
    dir = dirFile->readDirCache();
    55cc:	movs	r1, #0
    55ce:	mov	r0, r5
    55d0:	bl	431c <FatFile::readDirCache(bool)>
    if (!dir) {
    55d4:	cbnz	r0, 55fc <FatFile::open(FatFile*, FatLfn_t*, int)+0x25c>
      if (dirFile->getError()) {
    55d6:	ldrb	r3, [r5, #1]
    55d8:	cmp	r3, #0
    55da:	bne.w	53be <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
    if (!dirFile->addDirCluster()) {
    55de:	mov	r0, r5
    55e0:	bl	40a8 <FatFile::addDirCluster()>
    55e4:	cmp	r0, #0
    55e6:	beq.w	53be <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
    return m_sectorsPerCluster * (m_bytesPerSector / FS_DIR_SIZE);
    55ea:	ldr	r3, [sp, #20]
    55ec:	ldrb	r3, [r3, #4]
    freeFound += vol->dirEntriesPerCluster();
    55ee:	add.w	r3, r4, r3, lsl #4
    55f2:	uxtb	r4, r3
  while (freeFound < freeNeed) {
    55f4:	ldr	r3, [sp, #8]
    55f6:	cmp	r3, r4
    55f8:	bhi.n	55de <FatFile::open(FatFile*, FatLfn_t*, int)+0x23e>
    55fa:	b.n	544e <FatFile::open(FatFile*, FatLfn_t*, int)+0xae>
    freeFound++;
    55fc:	adds	r4, #1
    55fe:	uxtb	r4, r4
    5600:	b.n	5446 <FatFile::open(FatFile*, FatLfn_t*, int)+0xa6>
    if (!dirFile->makeUniqueSfn(fname)) {
    5602:	mov	r1, r7
    5604:	mov	r0, r5
    5606:	bl	5308 <FatFile::makeUniqueSfn(FatLfn_t*)>
    560a:	cmp	r0, #0
    560c:	bne.w	5456 <FatFile::open(FatFile*, FatLfn_t*, int)+0xb6>
    5610:	b.n	53be <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
  *reinterpret_cast<uint16_t*>(dst) = src;
    5612:	movw	r3, #22049	; 0x5621
    5616:	strh	r3, [r4, #16]
    5618:	strh	r3, [r4, #24]
    561a:	strh	r3, [r4, #18]
    if (FS_DEFAULT_TIME) {
    561c:	b.n	54d0 <FatFile::open(FatFile*, FatLfn_t*, int)+0x130>
    561e:	nop
    5620:	.word	0x200068ac

00005624 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>:
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path, FatLfn_t* fname,
                            const char** ptr) {
    5624:	mov	r0, r2
    5626:	push	{r4, r5, r6}
  size_t len = 0;
  // Skip leading spaces.
  while (*path == ' ') {
    5628:	mov	r5, r1
    562a:	ldrb.w	r2, [r1], #1
    562e:	cmp	r2, #32
    5630:	beq.n	5628 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x4>
    path++;
  }
  fname->begin = path;
  fname->len = 0;
    5632:	movs	r2, #0
    5634:	ldr	r6, [pc, #124]	; (56b4 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x90>)
  fname->begin = path;
    5636:	str	r5, [r0, #0]
  fname->len = 0;
    5638:	str	r2, [r0, #12]
  while (*path && !isDirSeparator(*path)) {
    563a:	mov	r2, r5
    563c:	mov	r4, r2
    563e:	ldrb.w	r1, [r4], #1
    5642:	cbnz	r1, 568a <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x66>
      // Need to trim trailing dots spaces.
      fname->len = len;
      fname->end = path;
    }
  }
  if (!fname->len || fname->len > FAT_MAX_LFN_LENGTH) {
    5644:	ldr	r1, [r0, #12]
    5646:	subs	r1, #1
    5648:	cmp	r1, #254	; 0xfe
    564a:	bhi.n	5670 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x4c>
    564c:	mov	r4, r2
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Advance to next path component.
  for (; *path == ' ' || isDirSeparator(*path); path++) {
    564e:	ldrb.w	r1, [r2], #1
    5652:	cmp	r1, #32
    5654:	beq.n	564c <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x28>
    5656:	cmp	r1, #47	; 0x2f
    5658:	beq.n	564c <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x28>
  }
  *ptr = path;
    565a:	str	r4, [r3, #0]
  return makeSFN(fname);

fail:
  return false;
}
    565c:	pop	{r4, r5, r6}
  return makeSFN(fname);
    565e:	b.w	51e4 <FatFile::makeSFN(FatLfn_t*)>
    5662:	sub.w	r2, r1, #34	; 0x22
    5666:	uxtb	r2, r2
    5668:	lsr.w	r2, r6, r2
    566c:	lsls	r2, r2, #31
    566e:	bpl.n	56a0 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x7c>
}
    5670:	movs	r0, #0
    5672:	pop	{r4, r5, r6}
    5674:	bx	lr
    5676:	cmp	r1, #92	; 0x5c
    5678:	beq.n	5670 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x4c>
    567a:	bhi.n	5684 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x60>
    567c:	sub.w	r2, r1, #62	; 0x3e
    5680:	cmp	r2, #1
    5682:	b.n	569e <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x7a>
    5684:	cmp	r1, #124	; 0x7c
    5686:	beq.n	5670 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x4c>
    5688:	b.n	56a0 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x7c>
  while (*path && !isDirSeparator(*path)) {
    568a:	cmp	r1, #47	; 0x2f
    568c:	beq.n	5644 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x20>
    if (cp >= 0X80 || lfnReservedChar(cp)) {
    568e:	lsls	r2, r1, #24
    5690:	bmi.n	5670 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x4c>
    5692:	cmp	r1, #60	; 0x3c
    5694:	bhi.n	5676 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x52>
    5696:	cmp	r1, #33	; 0x21
    5698:	bhi.n	5662 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x3e>
    569a:	subs	r2, r1, #1
    569c:	cmp	r2, #30
    569e:	bls.n	5670 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x4c>
    if (cp != '.' && cp != ' ') {
    56a0:	cmp	r1, #46	; 0x2e
    56a2:	sub.w	r2, r4, r5
    56a6:	beq.n	56b0 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x8c>
    56a8:	cmp	r1, #32
      fname->end = path;
    56aa:	it	ne
    56ac:	strdne	r4, r2, [r0, #8]
                            const char** ptr) {
    56b0:	mov	r2, r4
    56b2:	b.n	563c <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x18>
    56b4:	.word	0x05002101

000056b8 <FatFile::remove()>:
//------------------------------------------------------------------------------
bool FatFile::remove() {
    56b8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  FatFile() {}
    56bc:	movs	r3, #0
    56be:	sub	sp, #40	; 0x28
    56c0:	mov	r4, r0
    56c2:	str	r3, [sp, #4]
  FatFile dirFile;
  DirFat_t* dir;
  DirLfn_t* ldir;

  // Cant' remove not open for write.
  if (!isWritable()) {
    56c4:	ldrb	r3, [r0, #2]
    56c6:	lsls	r2, r3, #30
    56c8:	bmi.n	56d2 <FatFile::remove()+0x1a>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
    56ca:	movs	r0, #0
}
    56cc:	add	sp, #40	; 0x28
    56ce:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
    56d2:	ldr	r1, [r0, #32]
    56d4:	cmp	r1, #0
    56d6:	bne.n	5764 <FatFile::remove()+0xac>
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    56d8:	movs	r1, #1
    56da:	mov	r0, r4
    56dc:	bl	4118 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    56e0:	mov	r5, r0
    56e2:	cmp	r0, #0
    56e4:	beq.n	56ca <FatFile::remove()+0x12>
  checksum = lfnChecksum(dir->name);
    56e6:	bl	504e <FatFile::lfnChecksum(unsigned char const*) [clone .isra.0]>
  dir->name[0] = FAT_NAME_DELETED;
    56ea:	movs	r7, #229	; 0xe5
  m_attributes = FILE_ATTR_CLOSED;
    56ec:	movs	r3, #0
  checksum = lfnChecksum(dir->name);
    56ee:	mov	r6, r0
  dir->name[0] = FAT_NAME_DELETED;
    56f0:	strb	r7, [r5, #0]
  m_attributes = FILE_ATTR_CLOSED;
    56f2:	strb	r3, [r4, #0]
  if (!m_vol->cacheSync()) {
    56f4:	ldr	r0, [r4, #8]
  m_flags = 0;
    56f6:	strb	r3, [r4, #2]
  if (!m_vol->cacheSync()) {
    56f8:	bl	404a <FatPartition::cacheSync()>
    56fc:	cmp	r0, #0
    56fe:	beq.n	56ca <FatFile::remove()+0x12>
  if (!isLFN()) {
    5700:	ldrb	r3, [r4, #3]
    5702:	cmp	r3, #0
    5704:	beq.n	56cc <FatFile::remove()+0x14>
  if (!dirFile.openCluster(this)) {
    5706:	mov	r1, r4
    5708:	add	r0, sp, #4
    570a:	bl	4142 <FatFile::openCluster(FatFile*)>
    570e:	cmp	r0, #0
    5710:	beq.n	56ca <FatFile::remove()+0x12>
    5712:	movs	r5, #1
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    5714:	uxtb.w	r8, r5
    5718:	ldrb	r3, [r4, #3]
    571a:	cmp	r3, r8
    571c:	bcc.n	56ca <FatFile::remove()+0x12>
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.cacheDir(m_dirIndex - order));
    571e:	ldrh	r1, [r4, #4]
    5720:	add	r0, sp, #4
    5722:	subs	r1, r1, r5
    5724:	uxth	r1, r1
    5726:	bl	3ec0 <FatFile::cacheDir(unsigned short)>
    if (!ldir) {
    572a:	cmp	r0, #0
    572c:	beq.n	56ca <FatFile::remove()+0x12>
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    572e:	ldrb	r3, [r0, #11]
    5730:	cmp	r3, #15
    5732:	bne.n	56ca <FatFile::remove()+0x12>
        order != (ldir->order & 0X1F) || checksum != ldir->checksum) {
    5734:	ldrb	r2, [r0, #0]
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    5736:	and.w	r3, r2, #31
    573a:	cmp	r3, r8
    573c:	bne.n	56ca <FatFile::remove()+0x12>
        order != (ldir->order & 0X1F) || checksum != ldir->checksum) {
    573e:	ldrb	r3, [r0, #13]
    5740:	cmp	r3, r6
    5742:	bne.n	56ca <FatFile::remove()+0x12>
    ldir->order = FAT_NAME_DELETED;
    5744:	strb	r7, [r0, #0]
    if (last) {
    5746:	adds	r5, #1
    m_vol->cacheDirty();
    5748:	ldr	r1, [r4, #8]
    if (last) {
    574a:	uxth	r5, r5
    574c:	ldrb.w	r3, [r1, #36]	; 0x24
    5750:	orr.w	r3, r3, #1
    5754:	strb.w	r3, [r1, #36]	; 0x24
    5758:	lsls	r3, r2, #25
    575a:	bpl.n	5714 <FatFile::remove()+0x5c>
      if (!m_vol->cacheSync()) {
    575c:	ldr	r0, [r4, #8]
    575e:	bl	404a <FatPartition::cacheSync()>
    5762:	b.n	56cc <FatFile::remove()+0x14>
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
    5764:	ldr	r0, [r0, #8]
    5766:	bl	4e84 <FatPartition::freeChain(unsigned long)>
    576a:	cmp	r0, #0
    576c:	bne.n	56d8 <FatFile::remove()+0x20>
    576e:	b.n	56ca <FatFile::remove()+0x12>

00005770 <FsBaseFile::FsBaseFile(FsBaseFile const&)>:
FsBaseFile::FsBaseFile(const FsBaseFile& from) {
    5770:	push	{r3, r4, r5, r6, r7, lr}
    5772:	movs	r7, #0
  if (from.m_fFile) {
    5774:	ldr	r4, [r1, #56]	; 0x38
FsBaseFile::FsBaseFile(const FsBaseFile& from) {
    5776:	mov	r6, r0
    5778:	mov	r5, r1
    577a:	strd	r7, r7, [r0, #56]	; 0x38
  if (from.m_fFile) {
    577e:	cbz	r4, 57a2 <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x32>
    m_fFile = new (m_fileMem) FatFile;
    5780:	mov	r1, r0
    5782:	movs	r0, #36	; 0x24
    5784:	bl	59e0 <operator new(unsigned int, unsigned long*)>
    5788:	strh	r7, [r0, #0]
    578a:	strb	r7, [r0, #2]
    578c:	mov	r4, r0
    *m_fFile = *from.m_fFile;
    578e:	ldr	r5, [r5, #56]	; 0x38
    m_fFile = new (m_fileMem) FatFile;
    5790:	str	r0, [r6, #56]	; 0x38
    *m_fFile = *from.m_fFile;
    5792:	ldmia	r5!, {r0, r1, r2, r3}
    5794:	stmia	r4!, {r0, r1, r2, r3}
    5796:	ldmia	r5!, {r0, r1, r2, r3}
    5798:	stmia	r4!, {r0, r1, r2, r3}
    579a:	ldr	r3, [r5, #0]
    579c:	str	r3, [r4, #0]
}
    579e:	mov	r0, r6
    57a0:	pop	{r3, r4, r5, r6, r7, pc}
  } else if (from.m_xFile) {
    57a2:	ldr	r3, [r1, #60]	; 0x3c
    57a4:	cmp	r3, #0
    57a6:	beq.n	579e <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x2e>
    m_xFile = new (m_fileMem) ExFatFile;
    57a8:	mov	r1, r0
    57aa:	movs	r0, #56	; 0x38
    57ac:	bl	59e0 <operator new(unsigned int, unsigned long*)>
  ExFatFile() {}
    57b0:	strb.w	r4, [r0, #49]	; 0x31
    57b4:	strh	r4, [r0, #50]	; 0x32
    *m_xFile = *from.m_xFile;
    57b6:	ldr	r3, [r5, #60]	; 0x3c
    m_xFile = new (m_fileMem) ExFatFile;
    57b8:	str	r0, [r6, #60]	; 0x3c
    *m_xFile = *from.m_xFile;
    57ba:	add.w	r2, r3, #52	; 0x34
    57be:	ldr.w	r1, [r3], #4
    57c2:	cmp	r3, r2
    57c4:	str.w	r1, [r0], #4
    57c8:	bne.n	57be <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x4e>
    57ca:	b.n	579e <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x2e>

000057cc <FsBaseFile::close()>:
bool FsBaseFile::close() {
    57cc:	push	{r4, lr}
    57ce:	mov	r4, r0
  bool rtn = m_fFile ? m_fFile->close() : m_xFile ? m_xFile->close() : true;
    57d0:	ldr	r0, [r0, #56]	; 0x38
    57d2:	cbz	r0, 57e0 <FsBaseFile::close()+0x14>
    57d4:	bl	4634 <FatFile::close()>
  m_fFile = nullptr;
    57d8:	movs	r3, #0
  m_xFile = nullptr;
    57da:	strd	r3, r3, [r4, #56]	; 0x38
}
    57de:	pop	{r4, pc}
  bool rtn = m_fFile ? m_fFile->close() : m_xFile ? m_xFile->close() : true;
    57e0:	ldr	r0, [r4, #60]	; 0x3c
    57e2:	cbz	r0, 57ea <FsBaseFile::close()+0x1e>
    57e4:	bl	24f0 <ExFatFile::close()>
    57e8:	b.n	57d8 <FsBaseFile::close()+0xc>
    57ea:	movs	r0, #1
    57ec:	b.n	57d8 <FsBaseFile::close()+0xc>

000057ee <FsBaseFile::open(FsVolume*, char const*, int)>:
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
    57ee:	push	{r0, r1, r4, r5, r6, lr}
    57f0:	mov	r4, r0
  if (!vol) {
    57f2:	mov	r5, r1
    57f4:	cbnz	r1, 57fc <FsBaseFile::open(FsVolume*, char const*, int)+0xe>
    return false;
    57f6:	movs	r0, #0
}
    57f8:	add	sp, #8
    57fa:	pop	{r4, r5, r6, pc}
    57fc:	strd	r2, r3, [sp]
  close();
    5800:	bl	57cc <FsBaseFile::close()>
  if (vol->m_fVol) {
    5804:	ldr.w	r6, [r5, #1152]	; 0x480
    5808:	ldrd	r2, r3, [sp]
    580c:	cbz	r6, 5834 <FsBaseFile::open(FsVolume*, char const*, int)+0x46>
    580e:	movs	r6, #0
    m_fFile = new (m_fileMem) FatFile;
    5810:	mov	r1, r4
    5812:	movs	r0, #36	; 0x24
    5814:	bl	59e0 <operator new(unsigned int, unsigned long*)>
    5818:	strh	r6, [r0, #0]
    581a:	strb	r6, [r0, #2]
    581c:	str	r0, [r4, #56]	; 0x38
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    581e:	ldr.w	r1, [r5, #1152]	; 0x480
    5822:	ldrd	r2, r3, [sp]
    5826:	bl	46de <FatFile::open(FatVolume*, char const*, int)>
    582a:	cbz	r0, 5830 <FsBaseFile::open(FsVolume*, char const*, int)+0x42>
      return true;
    582c:	movs	r0, #1
    582e:	b.n	57f8 <FsBaseFile::open(FsVolume*, char const*, int)+0xa>
    m_fFile = nullptr;
    5830:	str	r0, [r4, #56]	; 0x38
    5832:	b.n	57f8 <FsBaseFile::open(FsVolume*, char const*, int)+0xa>
  } else if (vol->m_xVol) {
    5834:	ldr.w	r1, [r5, #1156]	; 0x484
    5838:	strd	r2, r3, [sp]
    583c:	cmp	r1, #0
    583e:	beq.n	57f6 <FsBaseFile::open(FsVolume*, char const*, int)+0x8>
    m_xFile = new (m_fileMem) ExFatFile;
    5840:	mov	r1, r4
    5842:	movs	r0, #56	; 0x38
    5844:	bl	59e0 <operator new(unsigned int, unsigned long*)>
    5848:	strb.w	r6, [r0, #49]	; 0x31
    584c:	strh	r6, [r0, #50]	; 0x32
    584e:	str	r0, [r4, #60]	; 0x3c
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    5850:	ldr.w	r1, [r5, #1156]	; 0x484
    5854:	ldrd	r2, r3, [sp]
    5858:	bl	2c92 <ExFatFile::open(ExFatVolume*, char const*, int)>
    585c:	cmp	r0, #0
    585e:	bne.n	582c <FsBaseFile::open(FsVolume*, char const*, int)+0x3e>
    m_xFile = nullptr;
    5860:	str	r0, [r4, #60]	; 0x3c
    5862:	b.n	57f8 <FsBaseFile::open(FsVolume*, char const*, int)+0xa>

00005864 <FsBaseFile::openNext(FsBaseFile*, int)>:
    m_xFile = nullptr;
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::openNext(FsBaseFile* dir, oflag_t oflag) {
    5864:	push	{r0, r1, r4, r5, r6, lr}
    5866:	mov	r5, r1
    5868:	str	r2, [sp, #4]
    586a:	mov	r4, r0
  close();
    586c:	bl	57cc <FsBaseFile::close()>
  if (dir->m_fFile) {
    5870:	ldr	r6, [r5, #56]	; 0x38
    5872:	ldr	r2, [sp, #4]
    5874:	cbz	r6, 589a <FsBaseFile::openNext(FsBaseFile*, int)+0x36>
    m_fFile = new (m_fileMem) FatFile;
    5876:	mov	r1, r4
    5878:	movs	r0, #36	; 0x24
    587a:	bl	59e0 <operator new(unsigned int, unsigned long*)>
    587e:	movs	r1, #0
    if (m_fFile->openNext(dir->m_fFile, oflag)) {
    5880:	ldr	r2, [sp, #4]
    5882:	strh	r1, [r0, #0]
    5884:	strb	r1, [r0, #2]
    m_fFile = new (m_fileMem) FatFile;
    5886:	str	r0, [r4, #56]	; 0x38
    if (m_fFile->openNext(dir->m_fFile, oflag)) {
    5888:	ldr	r1, [r5, #56]	; 0x38
    588a:	bl	44c4 <FatFile::openNext(FatFile*, int)>
    588e:	cbz	r0, 5896 <FsBaseFile::openNext(FsBaseFile*, int)+0x32>
      return true;
    5890:	movs	r0, #1
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
    5892:	add	sp, #8
    5894:	pop	{r4, r5, r6, pc}
    m_fFile = nullptr;
    5896:	str	r0, [r4, #56]	; 0x38
    5898:	b.n	5892 <FsBaseFile::openNext(FsBaseFile*, int)+0x2e>
  } else if (dir->m_xFile) {
    589a:	ldr	r0, [r5, #60]	; 0x3c
    589c:	str	r2, [sp, #4]
    589e:	cmp	r0, #0
    58a0:	beq.n	5892 <FsBaseFile::openNext(FsBaseFile*, int)+0x2e>
    m_xFile = new (m_fileMem) ExFatFile;
    58a2:	mov	r1, r4
    58a4:	movs	r0, #56	; 0x38
    58a6:	bl	59e0 <operator new(unsigned int, unsigned long*)>
    if (m_xFile->openNext(dir->m_xFile, oflag)) {
    58aa:	ldr	r2, [sp, #4]
    58ac:	strb.w	r6, [r0, #49]	; 0x31
    58b0:	strh	r6, [r0, #50]	; 0x32
    m_xFile = new (m_fileMem) ExFatFile;
    58b2:	str	r0, [r4, #60]	; 0x3c
    if (m_xFile->openNext(dir->m_xFile, oflag)) {
    58b4:	ldr	r1, [r5, #60]	; 0x3c
    58b6:	bl	2ca0 <ExFatFile::openNext(ExFatFile*, int)>
    58ba:	cmp	r0, #0
    58bc:	bne.n	5890 <FsBaseFile::openNext(FsBaseFile*, int)+0x2c>
    m_xFile = nullptr;
    58be:	str	r0, [r4, #60]	; 0x3c
    58c0:	b.n	5892 <FsBaseFile::openNext(FsBaseFile*, int)+0x2e>
	...

000058c4 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)>:
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part,
                     uint32_t volStart) {
    58c4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  m_fVol = nullptr;
    58c8:	movs	r6, #0
                     uint32_t volStart) {
    58ca:	mov	r5, r0
    58cc:	mov	r7, r1
  m_xVol = new (m_volMem) ExFatVolume;
    58ce:	mov	r1, r0
  m_fVol = nullptr;
    58d0:	str.w	r6, [r0, #1152]	; 0x480
  m_xVol = new (m_volMem) ExFatVolume;
    58d4:	mov.w	r0, #1152	; 0x480
                     uint32_t volStart) {
    58d8:	mov	sl, r3
    58da:	mov	r8, r2
    58dc:	ldr.w	r9, [sp, #32]
  m_xVol = new (m_volMem) ExFatVolume;
    58e0:	bl	59e0 <operator new(unsigned int, unsigned long*)>
    m_sector = 0XFFFFFFFF;
    58e4:	mov.w	r3, #4294967295
    m_blockDev = blockDev;
    58e8:	str	r6, [r0, #4]
    m_status = 0;
    58ea:	strb	r6, [r0, #0]
    if (!init(dev, part, volStart)) {
    58ec:	mov	r2, sl
    m_sector = 0XFFFFFFFF;
    58ee:	str	r3, [r0, #8]
    58f0:	mov	r1, r7
    58f2:	str.w	r3, [r0, #536]	; 0x218
    58f6:	mov	r3, r9
    m_blockDev = blockDev;
    58f8:	str.w	r6, [r0, #532]	; 0x214
    58fc:	mov	r4, r0
    m_status = 0;
    58fe:	strb.w	r6, [r0, #528]	; 0x210
  ExFatPartition() = default;
    5902:	strb.w	r6, [r0, #1092]	; 0x444
    5906:	strb.w	r6, [r0, #1145]	; 0x479
    590a:	strh.w	r6, [r0, #1146]	; 0x47a
    590e:	str.w	r0, [r5, #1156]	; 0x484
    5912:	bl	2fe8 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)>
    5916:	cbz	r0, 5946 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0x82>
    m_vwd.close();
    5918:	add.w	r6, r4, #1096	; 0x448
    591c:	mov	r0, r6
    591e:	bl	24f0 <ExFatFile::close()>
    return m_vwd.openRoot(this);
    5922:	mov	r1, r4
    5924:	mov	r0, r6
    5926:	bl	2544 <ExFatFile::openRoot(ExFatVolume*)>
    if (!chdir()) {
    592a:	cbz	r0, 5946 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0x82>
    if (setCwv || !m_cwv) {
    592c:	ldr	r3, [pc, #124]	; (59ac <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0xe8>)
    if (setCwv || !m_cwv) {
    592e:	ldr	r2, [r3, #0]
    5930:	cbnz	r2, 5934 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0x70>
      m_cwv = this;
    5932:	str	r4, [r3, #0]
  }
  m_fVol = nullptr;
  return false;

done:
  if (setCwv || !m_cwv) {
    5934:	ldr	r3, [pc, #120]	; (59b0 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0xec>)
    5936:	cmp.w	r8, #0
    593a:	bne.n	5940 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0x7c>
    593c:	ldr	r2, [r3, #0]
    593e:	cbnz	r2, 5942 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0x7e>
    m_cwv = this;
    5940:	str	r5, [r3, #0]
  }
  return true;
    5942:	movs	r0, #1
    5944:	b.n	59a8 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0xe4>
  m_xVol = nullptr;
    5946:	movs	r6, #0
  m_fVol = new (m_volMem) FatVolume;
    5948:	mov	r1, r5
    594a:	mov.w	r0, #1128	; 0x468
  m_xVol = nullptr;
    594e:	str.w	r6, [r5, #1156]	; 0x484
  m_fVol = new (m_volMem) FatVolume;
    5952:	bl	59e0 <operator new(unsigned int, unsigned long*)>
    m_sector = 0XFFFFFFFF;
    5956:	mov.w	r3, #4294967295
  FatPartition() = default;
    595a:	strb	r6, [r0, #7]
    if (!init(dev, part, volStart)) {
    595c:	mov	r2, sl
    595e:	str	r3, [r0, #44]	; 0x2c
    5960:	mov	r1, r7
    5962:	str.w	r3, [r0, #572]	; 0x23c
    5966:	mov	r3, r9
    m_blockDev = blockDev;
    5968:	str	r6, [r0, #40]	; 0x28
    596a:	mov	r4, r0
    m_status = 0;
    596c:	strb.w	r6, [r0, #36]	; 0x24
    m_blockDev = blockDev;
    5970:	str.w	r6, [r0, #568]	; 0x238
    m_status = 0;
    5974:	strb.w	r6, [r0, #564]	; 0x234
    5978:	strh.w	r6, [r0, #1092]	; 0x444
    597c:	strb.w	r6, [r0, #1094]	; 0x446
    5980:	str.w	r0, [r5, #1152]	; 0x480
    5984:	bl	4f3c <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)>
    5988:	cbz	r0, 59a2 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0xde>
    m_vwd.close();
    598a:	addw	r6, r4, #1092	; 0x444
    598e:	mov	r0, r6
    5990:	bl	4634 <FatFile::close()>
    return m_vwd.openRoot(this);
    5994:	mov	r1, r4
    5996:	mov	r0, r6
    5998:	bl	4136 <FatFile::openRoot(FatVolume*)>
    if (!chdir()) {
    599c:	cbz	r0, 59a2 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0xde>
    if (setCwv || !m_cwv) {
    599e:	ldr	r3, [pc, #20]	; (59b4 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0xf0>)
    59a0:	b.n	592e <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0x6a>
  m_fVol = nullptr;
    59a2:	movs	r0, #0
    59a4:	str.w	r0, [r5, #1152]	; 0x480
}
    59a8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    59ac:	.word	0x20006930
    59b0:	.word	0x20006994
    59b4:	.word	0x20006998

000059b8 <FsVolume::open(char const*, int)>:
bool FsVolume::ls(print_t* pr, const char* path, uint8_t flags) {
  FsBaseFile dir;
  return dir.open(this, path, O_RDONLY) && dir.ls(pr, flags);
}
//------------------------------------------------------------------------------
FsFile FsVolume::open(const char* path, oflag_t oflag) {
    59b8:	push	{r3, r4, r5, lr}
    59ba:	mov	r4, r0
    59bc:	mov.w	r5, #1000	; 0x3e8
	constexpr Print() : write_error(0) {}
    59c0:	movs	r0, #0
    59c2:	str	r5, [r4, #8]
    59c4:	strb	r0, [r4, #4]
    59c6:	strb	r0, [r4, #12]
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    59c8:	ldr	r5, [pc, #16]	; (59dc <FsVolume::open(char const*, int)+0x24>)
  FsBaseFile() = default;
    59ca:	strd	r0, r0, [r4, #72]	; 0x48
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    59ce:	mov	r0, r4
    59d0:	str.w	r5, [r0], #16
  FsFile tmpFile;
  tmpFile.open(this, path, oflag);
    59d4:	bl	57ee <FsBaseFile::open(FsVolume*, char const*, int)>
  return tmpFile;
}
    59d8:	mov	r0, r4
    59da:	pop	{r3, r4, r5, pc}
    59dc:	.word	0x200006e4

000059e0 <operator new(unsigned int, unsigned long*)>:
 */
#include "FsNew.h"
void* operator new(size_t size, newalign_t* ptr) {
  (void)size;
  return ptr;
}
    59e0:	mov	r0, r1
    59e2:	bx	lr

000059e4 <SdCardInterface::status()>:
   * \param[out] sds location for 64 status bytes.
   * \return true for success or false for failure.
   */
  virtual bool readSDS(sds_t* sds) = 0;
  /** \return card status. */
  virtual uint32_t status() { return 0XFFFFFFFF; }
    59e4:	mov.w	r0, #4294967295
    59e8:	bx	lr

000059ea <SharedSpiCard::errorCode() const>:
  uint8_t errorCode() const { return m_errorCode; }
    59ea:	ldrb	r0, [r0, #18]
    59ec:	bx	lr

000059ee <SharedSpiCard::errorData() const>:
  uint32_t errorData() const { return m_status; }
    59ee:	ldrb	r0, [r0, #21]
    59f0:	bx	lr

000059f2 <SharedSpiCard::type() const>:
  uint8_t type() const { return m_type; }
    59f2:	ldrb	r0, [r0, #22]
    59f4:	bx	lr

000059f6 <DedicatedSpiCard::hasDedicatedSpi()>:
   * \param[in] spiConfig SPI card configuration.
   * \return true for success or false for failure.
   */
  bool begin(SdSpiConfig spiConfig);
  /** \return true, can be in dedicaded state. */
  bool hasDedicatedSpi() { return true; }
    59f6:	movs	r0, #1
    59f8:	bx	lr

000059fa <DedicatedSpiCard::isDedicatedSpi()>:
  /** \return true if in dedicated SPI state. */
  bool isDedicatedSpi() { return m_dedicatedSpi; }
    59fa:	ldrb	r0, [r0, #28]
    59fc:	bx	lr

000059fe <DedicatedSpiCard::readSector(unsigned long, unsigned char*)>:
  m_dedicatedSpi = spiOptionDedicated(spiConfig.options);
  return true;
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::readSector(uint32_t sector, uint8_t* dst) {
  return readSectors(sector, dst, 1);
    59fe:	ldr	r3, [r0, #0]
bool DedicatedSpiCard::readSector(uint32_t sector, uint8_t* dst) {
    5a00:	push	{r4}
  return readSectors(sector, dst, 1);
    5a02:	ldr	r4, [r3, #20]
    5a04:	movs	r3, #1
    5a06:	mov	ip, r4
}
    5a08:	ldr.w	r4, [sp], #4
  return readSectors(sector, dst, 1);
    5a0c:	bx	ip

00005a0e <DedicatedSpiCard::setDedicatedSpi(bool)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::setDedicatedSpi(bool value) {
    5a0e:	push	{r3, r4, r5, lr}
  if (!syncDevice()) {
    5a10:	ldr	r3, [r0, #0]
bool DedicatedSpiCard::setDedicatedSpi(bool value) {
    5a12:	mov	r4, r0
    5a14:	mov	r5, r1
  if (!syncDevice()) {
    5a16:	ldr	r3, [r3, #28]
    5a18:	blx	r3
    5a1a:	cbz	r0, 5a1e <DedicatedSpiCard::setDedicatedSpi(bool)+0x10>
    return false;
  }
  m_dedicatedSpi = value;
    5a1c:	strb	r5, [r4, #28]
  return true;
}
    5a1e:	pop	{r3, r4, r5, pc}

00005a20 <DedicatedSpiCard::~DedicatedSpiCard()>:
class DedicatedSpiCard : public SharedSpiCard {
    5a20:	bx	lr

00005a22 <DedicatedSpiCard::~DedicatedSpiCard()>:
    5a22:	push	{r4, lr}
    5a24:	mov	r4, r0
    5a26:	movs	r1, #32
    5a28:	bl	a022 <operator delete(void*, unsigned int)>
    5a2c:	mov	r0, r4
    5a2e:	pop	{r4, pc}

00005a30 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
  }
  return SharedSpiCard::writeSector(sector, src);
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::writeSectors(uint32_t sector, const uint8_t* src,
                                    size_t ns) {
    5a30:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5a34:	mov	r6, r3
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    5a36:	ldrb	r3, [r0, #20]
                                    size_t ns) {
    5a38:	mov	r4, r0
    5a3a:	mov	r5, r1
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    5a3c:	cmp	r3, #2
                                    size_t ns) {
    5a3e:	mov	r7, r2
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    5a40:	bne.n	5a48 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x18>
    5a42:	ldr	r3, [r0, #24]
    5a44:	cmp	r3, r1
    5a46:	beq.n	5a5c <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2c>
    if (!writeStart(sector)) {
    5a48:	ldr	r3, [r4, #0]
    5a4a:	mov	r1, r5
    5a4c:	mov	r0, r4
    5a4e:	ldr	r3, [r3, #100]	; 0x64
    5a50:	blx	r3
    5a52:	cbnz	r0, 5a5a <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2a>
  }
  m_curSector += ns;
  return m_dedicatedSpi ? true : writeStop();

fail:
  return false;
    5a54:	movs	r0, #0
}
    5a56:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_curSector = sector;
    5a5a:	str	r5, [r4, #24]
                                    size_t ns) {
    5a5c:	movs	r5, #0
  for (size_t i = 0; i < ns; i++, src += 512) {
    5a5e:	cmp	r6, r5
    5a60:	add.w	r1, r7, r5, lsl #9
    5a64:	bne.n	5a7e <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x4e>
  m_curSector += ns;
    5a66:	ldr	r3, [r4, #24]
  return m_dedicatedSpi ? true : writeStop();
    5a68:	ldrb	r0, [r4, #28]
  m_curSector += ns;
    5a6a:	add	r3, r6
    5a6c:	str	r3, [r4, #24]
  return m_dedicatedSpi ? true : writeStop();
    5a6e:	cmp	r0, #0
    5a70:	bne.n	5a56 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x26>
    5a72:	ldr	r3, [r4, #0]
    5a74:	mov	r0, r4
    5a76:	ldr	r3, [r3, #104]	; 0x68
}
    5a78:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return m_dedicatedSpi ? true : writeStop();
    5a7c:	bx	r3
    if (!writeData(src)) {
    5a7e:	ldr	r3, [r4, #0]
    5a80:	mov	r0, r4
    5a82:	ldr	r3, [r3, #96]	; 0x60
    5a84:	blx	r3
    5a86:	cmp	r0, #0
    5a88:	beq.n	5a54 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x24>
  for (size_t i = 0; i < ns; i++, src += 512) {
    5a8a:	adds	r5, #1
    5a8c:	b.n	5a5e <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2e>

00005a8e <SharedSpiCard::end()>:
void SharedSpiCard::end() {
    5a8e:	push	{r3, r4, r5, lr}
  if (m_beginCalled) {
    5a90:	ldrb	r3, [r0, #16]
void SharedSpiCard::end() {
    5a92:	mov	r4, r0
  if (m_beginCalled) {
    5a94:	cbz	r3, 5aaa <SharedSpiCard::end()+0x1c>
    syncDevice();
    5a96:	mov	r5, r0
    5a98:	ldr.w	r3, [r5], #4
    5a9c:	ldr	r3, [r3, #28]
    5a9e:	blx	r3
  void spiEnd() { m_spiDriver.end(); }
    5aa0:	mov	r0, r5
    5aa2:	bl	74a2 <SdSpiArduinoDriver::end()>
    m_beginCalled = false;
    5aa6:	movs	r3, #0
    5aa8:	strb	r3, [r4, #16]
}
    5aaa:	pop	{r3, r4, r5, pc}

00005aac <SharedSpiCard::sectorCount()>:
uint32_t SharedSpiCard::sectorCount() {
    5aac:	push	{r0, r1, r2, r3, r4, lr}
  return readCSD(&csd) ? csd.capacity() : 0;
    5aae:	ldr	r3, [r0, #0]
    5ab0:	mov	r1, sp
    5ab2:	ldr	r3, [r3, #72]	; 0x48
    5ab4:	blx	r3
    5ab6:	cbz	r0, 5afc <SharedSpiCard::sectorCount()+0x50>
  uint8_t csd[16];
  // Extract big endian fields.
  /** \return Capacity in sectors */
  uint32_t capacity() const {
    uint32_t c_size;
    uint8_t ver = csd[0] >> 6;
    5ab8:	ldrb.w	r3, [sp]
    if (ver == 0) {
    5abc:	lsrs	r3, r3, #6
    5abe:	bne.n	5b02 <SharedSpiCard::sectorCount()+0x56>
      c_size = (uint32_t)(csd[6] & 3) << 10;
    5ac0:	ldrb.w	r3, [sp, #6]
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
    5ac4:	ldrb.w	r0, [sp, #8]
    5ac8:	ldrb.w	r2, [sp, #7]
      c_size = (uint32_t)(csd[6] & 3) << 10;
    5acc:	lsls	r3, r3, #10
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
    5ace:	lsrs	r0, r0, #6
      c_size = (uint32_t)(csd[6] & 3) << 10;
    5ad0:	and.w	r3, r3, #3072	; 0xc00
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
    5ad4:	orr.w	r0, r0, r2, lsl #2
      uint8_t c_size_mult = (csd[9] & 3) << 1 | csd[10] >> 7;
    5ad8:	ldrb.w	r2, [sp, #10]
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
    5adc:	orrs	r0, r3
      uint8_t c_size_mult = (csd[9] & 3) << 1 | csd[10] >> 7;
    5ade:	ldrb.w	r3, [sp, #9]
    5ae2:	lsls	r3, r3, #1
      uint8_t read_bl_len = csd[5] & 15;
      return (c_size + 1) << (c_size_mult + read_bl_len + 2 - 9);
    5ae4:	adds	r0, #1
      uint8_t c_size_mult = (csd[9] & 3) << 1 | csd[10] >> 7;
    5ae6:	and.w	r3, r3, #6
      return (c_size + 1) << (c_size_mult + read_bl_len + 2 - 9);
    5aea:	orr.w	r3, r3, r2, lsr #7
      uint8_t read_bl_len = csd[5] & 15;
    5aee:	ldrb.w	r2, [sp, #5]
      return (c_size + 1) << (c_size_mult + read_bl_len + 2 - 9);
    5af2:	and.w	r2, r2, #15
    5af6:	add	r3, r2
    5af8:	subs	r3, #7
    5afa:	lsls	r0, r3
}
    5afc:	add	sp, #20
    5afe:	ldr.w	pc, [sp], #4
    } else if (ver == 1) {
    5b02:	cmp	r3, #1
    5b04:	bne.n	5b20 <SharedSpiCard::sectorCount()+0x74>
      c_size = (uint32_t)(csd[7] & 63) << 16;
    5b06:	ldrb.w	r3, [sp, #7]
      c_size |= (uint32_t)csd[8] << 8;
      c_size |= csd[9];
    5b0a:	ldrh.w	r0, [sp, #8]
      c_size = (uint32_t)(csd[7] & 63) << 16;
    5b0e:	lsls	r3, r3, #16
      c_size |= csd[9];
    5b10:	rev16	r0, r0
      c_size = (uint32_t)(csd[7] & 63) << 16;
    5b12:	and.w	r3, r3, #4128768	; 0x3f0000
      c_size |= csd[9];
    5b16:	uxth	r0, r0
    5b18:	orrs	r0, r3
      return (c_size + 1) << 10;
    5b1a:	adds	r0, #1
    5b1c:	lsls	r0, r0, #10
    5b1e:	b.n	5afc <SharedSpiCard::sectorCount()+0x50>
  return readCSD(&csd) ? csd.capacity() : 0;
    5b20:	movs	r0, #0
    5b22:	b.n	5afc <SharedSpiCard::sectorCount()+0x50>

00005b24 <SharedSpiCard::spiStart()>:
void SharedSpiCard::spiStart() {
    5b24:	push	{r4, r5, r6, lr}
  if (!m_spiActive) {
    5b26:	ldrb	r6, [r0, #19]
void SharedSpiCard::spiStart() {
    5b28:	mov	r4, r0
  if (!m_spiActive) {
    5b2a:	cbnz	r6, 5b4c <SharedSpiCard::spiStart()+0x28>
  void spiActivate() { m_spiDriver.activate(); }
    5b2c:	adds	r5, r0, #4
    5b2e:	mov	r0, r5
    5b30:	bl	7424 <SdSpiArduinoDriver::activate()>
    m_spiActive = true;
    5b34:	movs	r3, #1
  void spiSelect() { sdCsWrite(m_csPin, false); }
    5b36:	mov	r1, r6
    5b38:	ldrb	r0, [r4, #17]
    5b3a:	strb	r3, [r4, #19]
    5b3c:	bl	7522 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    5b40:	mov	r0, r5
    5b42:	movs	r1, #255	; 0xff
}
    5b44:	ldmia.w	sp!, {r4, r5, r6, lr}
    5b48:	b.w	74d4 <SdSpiArduinoDriver::send(unsigned char)>
    5b4c:	pop	{r4, r5, r6, pc}

00005b4e <SharedSpiCard::spiStop()>:
  if (m_spiActive) {
    5b4e:	ldrb	r3, [r0, #19]
void SharedSpiCard::spiStop() {
    5b50:	push	{r0, r1, r4, lr}
    5b52:	mov	r4, r0
  if (m_spiActive) {
    5b54:	cbz	r3, 5b72 <SharedSpiCard::spiStop()+0x24>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    5b56:	movs	r1, #1
    5b58:	ldrb	r0, [r0, #17]
    5b5a:	bl	7522 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    5b5e:	adds	r0, r4, #4
    5b60:	movs	r1, #255	; 0xff
    5b62:	str	r0, [sp, #4]
    5b64:	bl	74d4 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    5b68:	ldr	r0, [sp, #4]
    5b6a:	bl	7454 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    5b6e:	movs	r3, #0
    5b70:	strb	r3, [r4, #19]
}
    5b72:	add	sp, #8
    5b74:	pop	{r4, pc}

00005b76 <SharedSpiCard::isBusy()>:
bool SharedSpiCard::isBusy() {
    5b76:	push	{r4, r5, r6, lr}
  if (m_state == READ_STATE) {
    5b78:	ldrb	r3, [r0, #20]
bool SharedSpiCard::isBusy() {
    5b7a:	mov	r4, r0
  if (m_state == READ_STATE) {
    5b7c:	cmp	r3, #1
    5b7e:	beq.n	5ba2 <SharedSpiCard::isBusy()+0x2c>
  bool spiActive = m_spiActive;
    5b80:	ldrb	r6, [r0, #19]
  if (!spiActive) {
    5b82:	cbnz	r6, 5b88 <SharedSpiCard::isBusy()+0x12>
    spiStart();
    5b84:	bl	5b24 <SharedSpiCard::spiStart()>
    return m_spiDriver.receive();
    5b88:	adds	r0, r4, #4
    5b8a:	bl	74a8 <SdSpiArduinoDriver::receive()>
  bool rtn = 0XFF != spiReceive();
    5b8e:	subs.w	r5, r0, #255	; 0xff
    5b92:	it	ne
    5b94:	movne	r5, #1
  if (!spiActive) {
    5b96:	cbnz	r6, 5b9e <SharedSpiCard::isBusy()+0x28>
    spiStop();
    5b98:	mov	r0, r4
    5b9a:	bl	5b4e <SharedSpiCard::spiStop()>
}
    5b9e:	mov	r0, r5
    5ba0:	pop	{r4, r5, r6, pc}
    return false;
    5ba2:	movs	r5, #0
    5ba4:	b.n	5b9e <SharedSpiCard::isBusy()+0x28>
	...

00005ba8 <SharedSpiCard::readData(unsigned char*, unsigned int)>:
bool SharedSpiCard::readData(uint8_t* dst, size_t count) {
    5ba8:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5baa:	ldr	r7, [pc, #96]	; (5c0c <SharedSpiCard::readData(unsigned char*, unsigned int)+0x64>)
    5bac:	mov	r4, r0
    5bae:	adds	r6, r0, #4
    5bb0:	ldr	r5, [r7, #0]
  void set(uint16_t ms) { m_endTime = ms + millis16(); }
    5bb2:	add.w	r5, r5, #300	; 0x12c
    5bb6:	uxth	r5, r5
    5bb8:	mov	r0, r6
    5bba:	strd	r1, r2, [sp]
    5bbe:	bl	74a8 <SdSpiArduinoDriver::receive()>
  while ((m_status = spiReceive()) == 0XFF) {
    5bc2:	cmp	r0, #255	; 0xff
    5bc4:	strb	r0, [r4, #21]
    5bc6:	ldrd	r1, r2, [sp]
    5bca:	beq.n	5bec <SharedSpiCard::readData(unsigned char*, unsigned int)+0x44>
  if (m_status != DATA_START_SECTOR) {
    5bcc:	cmp	r0, #254	; 0xfe
    5bce:	bne.n	5c02 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x5a>
    return m_spiDriver.receive(buf, n);
    5bd0:	mov	r0, r6
    5bd2:	bl	74b2 <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>
  if ((m_status = spiReceive(dst, count))) {
    5bd6:	strb	r0, [r4, #21]
    5bd8:	cbnz	r0, 5c06 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x5e>
    return m_spiDriver.receive();
    5bda:	mov	r0, r6
    5bdc:	bl	74a8 <SdSpiArduinoDriver::receive()>
    5be0:	mov	r0, r6
    5be2:	bl	74a8 <SdSpiArduinoDriver::receive()>
  return true;
    5be6:	movs	r0, #1
}
    5be8:	add	sp, #12
    5bea:	pop	{r4, r5, r6, r7, pc}
    5bec:	ldr	r3, [r7, #0]
  bool timedOut() { return (int16_t)(m_endTime - millis16()) < 0; }
    5bee:	subs	r3, r5, r3
    if (timeout.timedOut()) {
    5bf0:	lsls	r3, r3, #16
    5bf2:	bpl.n	5bb8 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x10>
    5bf4:	movs	r3, #30
  spiStop();
    5bf6:	mov	r0, r4
    m_errorCode = code;
    5bf8:	strb	r3, [r4, #18]
    5bfa:	bl	5b4e <SharedSpiCard::spiStop()>
  return false;
    5bfe:	movs	r0, #0
    5c00:	b.n	5be8 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x40>
    5c02:	movs	r3, #25
    5c04:	b.n	5bf6 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x4e>
    5c06:	movs	r3, #38	; 0x26
    5c08:	b.n	5bf6 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x4e>
    5c0a:	nop
    5c0c:	.word	0x200070e8

00005c10 <SharedSpiCard::readData(unsigned char*)>:
bool SharedSpiCard::readData(uint8_t* dst) { return readData(dst, 512); }
    5c10:	mov.w	r2, #512	; 0x200
    5c14:	b.w	5ba8 <SharedSpiCard::readData(unsigned char*, unsigned int)>

00005c18 <SharedSpiCard::waitReady(unsigned short)>:
bool SharedSpiCard::waitReady(uint16_t ms) {
    5c18:	push	{r4, r5, r6, lr}
    5c1a:	ldr	r6, [pc, #36]	; (5c40 <SharedSpiCard::waitReady(unsigned short)+0x28>)
    return m_spiDriver.receive();
    5c1c:	adds	r5, r0, #4
    5c1e:	ldr	r3, [r6, #0]
  void set(uint16_t ms) { m_endTime = ms + millis16(); }
    5c20:	add	r1, r3
    5c22:	uxth	r4, r1
    5c24:	mov	r0, r5
    5c26:	bl	74a8 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    5c2a:	cmp	r0, #255	; 0xff
    5c2c:	bne.n	5c32 <SharedSpiCard::waitReady(unsigned short)+0x1a>
  return true;
    5c2e:	movs	r0, #1
}
    5c30:	pop	{r4, r5, r6, pc}
    5c32:	ldr	r3, [r6, #0]
  bool timedOut() { return (int16_t)(m_endTime - millis16()) < 0; }
    5c34:	subs	r3, r4, r3
    if (timeout.timedOut()) {
    5c36:	lsls	r3, r3, #16
    5c38:	bpl.n	5c24 <SharedSpiCard::waitReady(unsigned short)+0xc>
      return false;
    5c3a:	movs	r0, #0
    5c3c:	b.n	5c30 <SharedSpiCard::waitReady(unsigned short)+0x18>
    5c3e:	nop
    5c40:	.word	0x200070e8

00005c44 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>:
  if (!syncDevice()) {
    5c44:	ldr	r3, [r0, #0]
uint8_t SharedSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    5c46:	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (!syncDevice()) {
    5c4a:	ldr	r3, [r3, #28]
uint8_t SharedSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    5c4c:	mov	r4, r0
    5c4e:	str	r2, [sp, #4]
    5c50:	mov	r5, r1
  if (!syncDevice()) {
    5c52:	blx	r3
    5c54:	cmp	r0, #0
    5c56:	beq.n	5cc8 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x84>
  if (!m_spiActive) {
    5c58:	ldrb	r3, [r4, #19]
    5c5a:	cbnz	r3, 5c62 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x1e>
    spiStart();
    5c5c:	mov	r0, r4
    5c5e:	bl	5b24 <SharedSpiCard::spiStart()>
  if (cmd != CMD0 && cmd != CMD12 && !waitReady(SD_CMD_TIMEOUT)) {
    5c62:	cbnz	r5, 5cb6 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x72>
    m_spiDriver.send(data);
    5c64:	adds	r6, r4, #4
    5c66:	movs	r7, #3
    spiSend(pa[i]);
    5c68:	add.w	r8, sp, #4
    5c6c:	orr.w	r1, r5, #64	; 0x40
    5c70:	mov	r0, r6
    5c72:	bl	74d4 <SdSpiArduinoDriver::send(unsigned char)>
    5c76:	ldrb.w	r1, [r8, r7]
    5c7a:	mov	r0, r6
    5c7c:	bl	74d4 <SdSpiArduinoDriver::send(unsigned char)>
  for (int8_t i = 3; i >= 0; i--) {
    5c80:	subs	r7, #1
    5c82:	bcs.n	5c76 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x32>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
    5c84:	cmp	r5, #0
    5c86:	mov	r0, r6
    return m_spiDriver.receive();
    5c88:	mov.w	r5, #10
    m_spiDriver.send(data);
    5c8c:	ite	eq
    5c8e:	moveq	r1, #149	; 0x95
    5c90:	movne	r1, #135	; 0x87
    5c92:	bl	74d4 <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
    5c96:	mov	r0, r6
    5c98:	bl	74a8 <SdSpiArduinoDriver::receive()>
    5c9c:	mov	r0, r6
    5c9e:	bl	74a8 <SdSpiArduinoDriver::receive()>
  } while (m_status & 0X80 && ++n < 10);
    5ca2:	lsls	r3, r0, #24
    m_status = spiReceive();
    5ca4:	strb	r0, [r4, #21]
  } while (m_status & 0X80 && ++n < 10);
    5ca6:	bpl.n	5cb0 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x6c>
    5ca8:	subs	r5, #1
    5caa:	ands.w	r5, r5, #255	; 0xff
    5cae:	bne.n	5c9c <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x58>
}
    5cb0:	add	sp, #8
    5cb2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (cmd != CMD0 && cmd != CMD12 && !waitReady(SD_CMD_TIMEOUT)) {
    5cb6:	cmp	r5, #12
    5cb8:	beq.n	5c64 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x20>
    5cba:	mov.w	r1, #300	; 0x12c
    5cbe:	mov	r0, r4
    5cc0:	bl	5c18 <SharedSpiCard::waitReady(unsigned short)>
    5cc4:	cmp	r0, #0
    5cc6:	bne.n	5c64 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x20>
    return 0XFF;
    5cc8:	movs	r0, #255	; 0xff
    5cca:	b.n	5cb0 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x6c>

00005ccc <SharedSpiCard::cardAcmd(unsigned char, unsigned long)>:
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    5ccc:	push	{r4, r5, r6, lr}
    5cce:	mov	r4, r0
    5cd0:	mov	r5, r1
    5cd2:	mov	r6, r2
    cardCommand(CMD55, 0);
    5cd4:	movs	r1, #55	; 0x37
    5cd6:	movs	r2, #0
    5cd8:	bl	5c44 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    return cardCommand(cmd, arg);
    5cdc:	mov	r2, r6
    5cde:	mov	r1, r5
    5ce0:	mov	r0, r4
  }
    5ce2:	ldmia.w	sp!, {r4, r5, r6, lr}
    return cardCommand(cmd, arg);
    5ce6:	b.w	5c44 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>

00005cea <SharedSpiCard::readSCR(scr_t*)>:
bool SharedSpiCard::readSCR(scr_t* scr) {
    5cea:	push	{r3, r4, r5, lr}
  if (cardAcmd(ACMD51, 0)) {
    5cec:	movs	r2, #0
bool SharedSpiCard::readSCR(scr_t* scr) {
    5cee:	mov	r5, r1
  if (cardAcmd(ACMD51, 0)) {
    5cf0:	movs	r1, #51	; 0x33
bool SharedSpiCard::readSCR(scr_t* scr) {
    5cf2:	mov	r4, r0
  if (cardAcmd(ACMD51, 0)) {
    5cf4:	bl	5ccc <SharedSpiCard::cardAcmd(unsigned char, unsigned long)>
    5cf8:	cbz	r0, 5d08 <SharedSpiCard::readSCR(scr_t*)+0x1e>
    m_errorCode = code;
    5cfa:	movs	r3, #24
    5cfc:	strb	r3, [r4, #18]
  spiStop();
    5cfe:	mov	r0, r4
  return false;
    5d00:	movs	r5, #0
  spiStop();
    5d02:	bl	5b4e <SharedSpiCard::spiStop()>
  return false;
    5d06:	b.n	5d1e <SharedSpiCard::readSCR(scr_t*)+0x34>
  if (!readData(dst, sizeof(scr_t))) {
    5d08:	mov	r1, r5
    5d0a:	movs	r2, #8
    5d0c:	mov	r0, r4
    5d0e:	bl	5ba8 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    5d12:	mov	r5, r0
    5d14:	cmp	r0, #0
    5d16:	beq.n	5cfe <SharedSpiCard::readSCR(scr_t*)+0x14>
  spiStop();
    5d18:	mov	r0, r4
    5d1a:	bl	5b4e <SharedSpiCard::spiStop()>
}
    5d1e:	mov	r0, r5
    5d20:	pop	{r3, r4, r5, pc}

00005d22 <SharedSpiCard::readSDS(sds_t*)>:
bool SharedSpiCard::readSDS(sds_t* sds) {
    5d22:	push	{r3, r4, r5, lr}
  if (cardAcmd(ACMD13, 0) || spiReceive()) {
    5d24:	movs	r2, #0
bool SharedSpiCard::readSDS(sds_t* sds) {
    5d26:	mov	r5, r1
  if (cardAcmd(ACMD13, 0) || spiReceive()) {
    5d28:	movs	r1, #13
bool SharedSpiCard::readSDS(sds_t* sds) {
    5d2a:	mov	r4, r0
  if (cardAcmd(ACMD13, 0) || spiReceive()) {
    5d2c:	bl	5ccc <SharedSpiCard::cardAcmd(unsigned char, unsigned long)>
    5d30:	cbz	r0, 5d40 <SharedSpiCard::readSDS(sds_t*)+0x1e>
    5d32:	movs	r3, #21
    5d34:	strb	r3, [r4, #18]
  spiStop();
    5d36:	mov	r0, r4
  return false;
    5d38:	movs	r5, #0
  spiStop();
    5d3a:	bl	5b4e <SharedSpiCard::spiStop()>
  return false;
    5d3e:	b.n	5d60 <SharedSpiCard::readSDS(sds_t*)+0x3e>
    return m_spiDriver.receive();
    5d40:	adds	r0, r4, #4
    5d42:	bl	74a8 <SdSpiArduinoDriver::receive()>
  if (cardAcmd(ACMD13, 0) || spiReceive()) {
    5d46:	cmp	r0, #0
    5d48:	bne.n	5d32 <SharedSpiCard::readSDS(sds_t*)+0x10>
  if (!readData(dst, sizeof(sds_t))) {
    5d4a:	mov	r1, r5
    5d4c:	movs	r2, #64	; 0x40
    5d4e:	mov	r0, r4
    5d50:	bl	5ba8 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    5d54:	mov	r5, r0
    5d56:	cmp	r0, #0
    5d58:	beq.n	5d36 <SharedSpiCard::readSDS(sds_t*)+0x14>
  spiStop();
    5d5a:	mov	r0, r4
    5d5c:	bl	5b4e <SharedSpiCard::spiStop()>
}
    5d60:	mov	r0, r5
    5d62:	pop	{r3, r4, r5, pc}

00005d64 <SharedSpiCard::begin(SdSpiConfig)>:
bool SharedSpiCard::begin(SdSpiConfig spiConfig) {
    5d64:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5d68:	sub	sp, #32
    5d6a:	mov	r4, r0
    5d6c:	mov	r7, r2
  m_beginCalled = true;
    5d6e:	movs	r6, #1
bool SharedSpiCard::begin(SdSpiConfig spiConfig) {
    5d70:	add	r5, sp, #4
    5d72:	stmia.w	r5, {r1, r2, r3}
    m_beginCalled = false;
    5d76:	movs	r3, #0
    5d78:	ldrb.w	r0, [sp, #4]
    5d7c:	strb	r3, [r4, #16]
  m_errorCode = SD_CARD_ERROR_NONE;
    5d7e:	strh	r3, [r4, #18]
    m_state = IDLE_STATE;
    5d80:	strh	r3, [r4, #20]
    m_type = 0;
    5d82:	strb	r3, [r4, #22]
  m_csPin = spiConfig.csPin;
    5d84:	strb	r0, [r4, #17]
  sdCsInit(m_csPin);
    5d86:	bl	751c <sdCsInit(unsigned char)>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    5d8a:	movs	r1, #1
    5d8c:	ldrb	r0, [r4, #17]
    5d8e:	bl	7522 <sdCsWrite(unsigned char, bool)>
  /** Save high speed SPISettings after SD initialization.
   *
   * \param[in] maxSck Maximum SCK frequency.
   */
  void setSckSpeed(uint32_t maxSck) {
    m_spiSettings = SPISettings(maxSck, MSBFIRST, SPI_MODE0);
    5d92:	ldr	r2, [pc, #316]	; (5ed0 <SharedSpiCard::begin(SdSpiConfig)+0x16c>)
    5d94:	movs	r3, #7
    5d96:	strd	r2, r3, [r4, #8]
  spiBegin(spiConfig);
    5d9a:	ldmia.w	r5, {r0, r1, r2}
    5d9e:	add	r3, sp, #20
  void spiBegin(SdSpiConfig spiConfig) { m_spiDriver.begin(spiConfig); }
    5da0:	adds	r5, r4, #4
    5da2:	stmia.w	r3, {r0, r1, r2}
    5da6:	mov	r0, r5
    5da8:	ldmia	r3, {r1, r2, r3}
    5daa:	bl	7434 <SdSpiArduinoDriver::begin(SdSpiConfig)>
  spiStart();
    5dae:	mov	r0, r4
  m_beginCalled = true;
    5db0:	strb	r6, [r4, #16]
  spiStart();
    5db2:	bl	5b24 <SharedSpiCard::spiStart()>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    5db6:	mov	r1, r6
    5db8:	movs	r6, #10
    5dba:	ldrb	r0, [r4, #17]
    5dbc:	bl	7522 <sdCsWrite(unsigned char, bool)>
  for (uint8_t i = 0; i < 10; i++) {
    5dc0:	subs	r6, #1
    return m_spiDriver.receive();
    5dc2:	mov	r0, r5
    5dc4:	bl	74a8 <SdSpiArduinoDriver::receive()>
    5dc8:	ands.w	r6, r6, #255	; 0xff
    5dcc:	bne.n	5dc0 <SharedSpiCard::begin(SdSpiConfig)+0x5c>
    5dce:	ldr.w	r9, [pc, #260]	; 5ed4 <SharedSpiCard::begin(SdSpiConfig)+0x170>
  void spiSelect() { sdCsWrite(m_csPin, false); }
    5dd2:	mov	r1, r6
    5dd4:	ldrb	r0, [r4, #17]
    5dd6:	bl	7522 <sdCsWrite(unsigned char, bool)>
    5dda:	ldr.w	r6, [r9]
  void set(uint16_t ms) { m_endTime = ms + millis16(); }
    5dde:	add.w	r6, r6, #2000	; 0x7d0
    5de2:	uxth	r6, r6
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
    5de4:	movs	r2, #0
    5de6:	mov	r0, r4
    5de8:	mov	r1, r2
    5dea:	bl	5c44 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    5dee:	cmp	r0, #1
    5df0:	mov	r8, r0
    5df2:	beq.n	5e0c <SharedSpiCard::begin(SdSpiConfig)+0xa8>
    5df4:	ldr.w	r3, [r9]
  bool timedOut() { return (int16_t)(m_endTime - millis16()) < 0; }
    5df8:	subs	r3, r6, r3
    if (timeout.timedOut()) {
    5dfa:	lsls	r3, r3, #16
    5dfc:	bpl.n	5de4 <SharedSpiCard::begin(SdSpiConfig)+0x80>
    5dfe:	movs	r3, #1
  spiStop();
    5e00:	mov	r0, r4
    m_errorCode = code;
    5e02:	strb	r3, [r4, #18]
    5e04:	bl	5b4e <SharedSpiCard::spiStop()>
  return false;
    5e08:	movs	r0, #0
    5e0a:	b.n	5eb6 <SharedSpiCard::begin(SdSpiConfig)+0x152>
    if (cardCommand(CMD8, 0x1AA) & R1_ILLEGAL_COMMAND) {
    5e0c:	mov.w	r2, #426	; 0x1aa
    5e10:	movs	r1, #8
    5e12:	mov	r0, r4
    5e14:	bl	5c44 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    5e18:	lsls	r0, r0, #29
    5e1a:	bmi.n	5e48 <SharedSpiCard::begin(SdSpiConfig)+0xe4>
    5e1c:	mov.w	sl, #4
    for (uint8_t i = 0; i < 4; i++) {
    5e20:	add.w	sl, sl, #4294967295
    return m_spiDriver.receive();
    5e24:	mov	r0, r5
    5e26:	bl	74a8 <SdSpiArduinoDriver::receive()>
      m_status = spiReceive();
    5e2a:	strb	r0, [r4, #21]
    for (uint8_t i = 0; i < 4; i++) {
    5e2c:	ands.w	sl, sl, #255	; 0xff
    5e30:	bne.n	5e20 <SharedSpiCard::begin(SdSpiConfig)+0xbc>
    if (m_status == 0XAA) {
    5e32:	cmp	r0, #170	; 0xaa
    5e34:	beq.n	5e44 <SharedSpiCard::begin(SdSpiConfig)+0xe0>
    5e36:	ldr.w	r3, [r9]
  bool timedOut() { return (int16_t)(m_endTime - millis16()) < 0; }
    5e3a:	subs	r3, r6, r3
    if (timeout.timedOut()) {
    5e3c:	lsls	r1, r3, #16
    5e3e:	bpl.n	5e0c <SharedSpiCard::begin(SdSpiConfig)+0xa8>
    5e40:	movs	r3, #6
    5e42:	b.n	5e00 <SharedSpiCard::begin(SdSpiConfig)+0x9c>
    5e44:	mov.w	r8, #2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
    5e48:	ldr	r3, [r4, #0]
    5e4a:	mov	r0, r4
  void type(uint8_t value) { m_type = value; }
    5e4c:	strb.w	r8, [r4, #22]
    5e50:	ldr	r3, [r3, #92]	; 0x5c
    5e52:	blx	r3
    5e54:	subs	r2, r0, #2
    5e56:	negs	r0, r2
    5e58:	adcs	r0, r2
    5e5a:	mov.w	r8, r0, lsl #30
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
    5e5e:	mov	r2, r8
    5e60:	movs	r1, #41	; 0x29
    5e62:	mov	r0, r4
    5e64:	bl	5ccc <SharedSpiCard::cardAcmd(unsigned char, unsigned long)>
    5e68:	mov	sl, r0
    5e6a:	cbnz	r0, 5ebc <SharedSpiCard::begin(SdSpiConfig)+0x158>
  if (type() == SD_CARD_TYPE_SD2) {
    5e6c:	ldr	r3, [r4, #0]
    5e6e:	mov	r0, r4
    5e70:	ldr	r3, [r3, #92]	; 0x5c
    5e72:	blx	r3
    5e74:	cmp	r0, #2
    5e76:	bne.n	5ea8 <SharedSpiCard::begin(SdSpiConfig)+0x144>
    if (cardCommand(CMD58, 0)) {
    5e78:	mov	r2, sl
    5e7a:	movs	r1, #58	; 0x3a
    5e7c:	mov	r0, r4
    5e7e:	bl	5c44 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    5e82:	cbnz	r0, 5eca <SharedSpiCard::begin(SdSpiConfig)+0x166>
    return m_spiDriver.receive();
    5e84:	mov	r0, r5
    5e86:	bl	74a8 <SdSpiArduinoDriver::receive()>
    if ((spiReceive() & 0XC0) == 0XC0) {
    5e8a:	and.w	r0, r0, #192	; 0xc0
    5e8e:	cmp	r0, #192	; 0xc0
    5e90:	mov	r0, r5
  void type(uint8_t value) { m_type = value; }
    5e92:	itt	eq
    5e94:	moveq	r3, #3
    5e96:	strbeq	r3, [r4, #22]
    return m_spiDriver.receive();
    5e98:	bl	74a8 <SdSpiArduinoDriver::receive()>
    5e9c:	mov	r0, r5
    5e9e:	bl	74a8 <SdSpiArduinoDriver::receive()>
    5ea2:	mov	r0, r5
    5ea4:	bl	74a8 <SdSpiArduinoDriver::receive()>
  spiStop();
    5ea8:	mov	r0, r4
    5eaa:	bl	5b4e <SharedSpiCard::spiStop()>
    5eae:	movs	r3, #7
  return true;
    5eb0:	movs	r0, #1
    5eb2:	str	r7, [r4, #8]
    5eb4:	str	r3, [r4, #12]
}
    5eb6:	add	sp, #32
    5eb8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5ebc:	ldr.w	r3, [r9]
  bool timedOut() { return (int16_t)(m_endTime - millis16()) < 0; }
    5ec0:	subs	r3, r6, r3
    if (timeout.timedOut()) {
    5ec2:	lsls	r3, r3, #16
    5ec4:	bpl.n	5e5e <SharedSpiCard::begin(SdSpiConfig)+0xfa>
    5ec6:	movs	r3, #23
    5ec8:	b.n	5e00 <SharedSpiCard::begin(SdSpiConfig)+0x9c>
    5eca:	movs	r3, #18
    5ecc:	b.n	5e00 <SharedSpiCard::begin(SdSpiConfig)+0x9c>
    5ece:	nop
    5ed0:	.word	0x00061a80
    5ed4:	.word	0x200070e8

00005ed8 <SharedSpiCard::cardCMD6(unsigned long, unsigned char*)>:
bool SharedSpiCard::cardCMD6(uint32_t arg, uint8_t* status) {
    5ed8:	push	{r3, r4, r5, lr}
    5eda:	mov	r5, r2
  if (cardCommand(CMD6, arg)) {
    5edc:	mov	r2, r1
    5ede:	movs	r1, #6
bool SharedSpiCard::cardCMD6(uint32_t arg, uint8_t* status) {
    5ee0:	mov	r4, r0
  if (cardCommand(CMD6, arg)) {
    5ee2:	bl	5c44 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    5ee6:	cbz	r0, 5ef6 <SharedSpiCard::cardCMD6(unsigned long, unsigned char*)+0x1e>
    m_errorCode = code;
    5ee8:	movs	r3, #4
    5eea:	strb	r3, [r4, #18]
  spiStop();
    5eec:	mov	r0, r4
  return false;
    5eee:	movs	r5, #0
  spiStop();
    5ef0:	bl	5b4e <SharedSpiCard::spiStop()>
  return false;
    5ef4:	b.n	5f0c <SharedSpiCard::cardCMD6(unsigned long, unsigned char*)+0x34>
  if (!readData(status, 64)) {
    5ef6:	mov	r1, r5
    5ef8:	movs	r2, #64	; 0x40
    5efa:	mov	r0, r4
    5efc:	bl	5ba8 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    5f00:	mov	r5, r0
    5f02:	cmp	r0, #0
    5f04:	beq.n	5eec <SharedSpiCard::cardCMD6(unsigned long, unsigned char*)+0x14>
  spiStop();
    5f06:	mov	r0, r4
    5f08:	bl	5b4e <SharedSpiCard::spiStop()>
}
    5f0c:	mov	r0, r5
    5f0e:	pop	{r3, r4, r5, pc}

00005f10 <SharedSpiCard::readOCR(unsigned long*)>:
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    5f10:	push	{r3, r4, r5, r6, r7, lr}
  if (cardCommand(CMD58, 0)) {
    5f12:	movs	r2, #0
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    5f14:	mov	r5, r1
  if (cardCommand(CMD58, 0)) {
    5f16:	movs	r1, #58	; 0x3a
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    5f18:	mov	r4, r0
  if (cardCommand(CMD58, 0)) {
    5f1a:	bl	5c44 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    5f1e:	cbz	r0, 5f2e <SharedSpiCard::readOCR(unsigned long*)+0x1e>
    5f20:	movs	r3, #18
  spiStop();
    5f22:	mov	r0, r4
    5f24:	strb	r3, [r4, #18]
    5f26:	bl	5b4e <SharedSpiCard::spiStop()>
  return false;
    5f2a:	movs	r0, #0
}
    5f2c:	pop	{r3, r4, r5, r6, r7, pc}
    5f2e:	adds	r6, r5, #4
    return m_spiDriver.receive();
    5f30:	adds	r7, r4, #4
    5f32:	mov	r0, r7
    5f34:	bl	74a8 <SdSpiArduinoDriver::receive()>
    p[3 - i] = spiReceive();
    5f38:	strb.w	r0, [r6, #-1]!
  for (uint8_t i = 0; i < 4; i++) {
    5f3c:	cmp	r6, r5
    5f3e:	bne.n	5f32 <SharedSpiCard::readOCR(unsigned long*)+0x22>
  spiStop();
    5f40:	mov	r0, r4
    5f42:	bl	5b4e <SharedSpiCard::spiStop()>
    5f46:	movs	r0, #1
    5f48:	b.n	5f2c <SharedSpiCard::readOCR(unsigned long*)+0x1c>

00005f4a <SharedSpiCard::readRegister(unsigned char, void*)>:
bool SharedSpiCard::readRegister(uint8_t cmd, void* buf) {
    5f4a:	push	{r3, r4, r5, lr}
    5f4c:	mov	r5, r2
  if (cardCommand(cmd, 0)) {
    5f4e:	movs	r2, #0
bool SharedSpiCard::readRegister(uint8_t cmd, void* buf) {
    5f50:	mov	r4, r0
  if (cardCommand(cmd, 0)) {
    5f52:	bl	5c44 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    5f56:	cbz	r0, 5f66 <SharedSpiCard::readRegister(unsigned char, void*)+0x1c>
    m_errorCode = code;
    5f58:	movs	r3, #28
    5f5a:	strb	r3, [r4, #18]
  spiStop();
    5f5c:	mov	r0, r4
  return false;
    5f5e:	movs	r5, #0
  spiStop();
    5f60:	bl	5b4e <SharedSpiCard::spiStop()>
  return false;
    5f64:	b.n	5f7c <SharedSpiCard::readRegister(unsigned char, void*)+0x32>
  if (!readData(dst, 16)) {
    5f66:	mov	r1, r5
    5f68:	movs	r2, #16
    5f6a:	mov	r0, r4
    5f6c:	bl	5ba8 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    5f70:	mov	r5, r0
    5f72:	cmp	r0, #0
    5f74:	beq.n	5f5c <SharedSpiCard::readRegister(unsigned char, void*)+0x12>
  spiStop();
    5f76:	mov	r0, r4
    5f78:	bl	5b4e <SharedSpiCard::spiStop()>
}
    5f7c:	mov	r0, r5
    5f7e:	pop	{r3, r4, r5, pc}

00005f80 <SharedSpiCard::readCSD(csd_t*)>:
  bool readCSD(csd_t* csd) { return readRegister(CMD9, csd); }
    5f80:	mov	r2, r1
    5f82:	movs	r1, #9
    5f84:	b.w	5f4a <SharedSpiCard::readRegister(unsigned char, void*)>

00005f88 <SharedSpiCard::readCID(cid_t*)>:
  bool readCID(cid_t* cid) { return readRegister(CMD10, cid); }
    5f88:	mov	r2, r1
    5f8a:	movs	r1, #10
    5f8c:	b.w	5f4a <SharedSpiCard::readRegister(unsigned char, void*)>

00005f90 <SharedSpiCard::readStart(unsigned long)>:
bool SharedSpiCard::readStart(uint32_t sector) {
    5f90:	push	{r3, r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    5f92:	ldr	r3, [r0, #0]
bool SharedSpiCard::readStart(uint32_t sector) {
    5f94:	mov	r5, r1
    5f96:	mov	r4, r0
  if (type() != SD_CARD_TYPE_SDHC) {
    5f98:	ldr	r3, [r3, #92]	; 0x5c
    5f9a:	blx	r3
    5f9c:	cmp	r0, #3
  if (cardCommand(CMD18, sector)) {
    5f9e:	mov.w	r1, #18
    5fa2:	mov	r0, r4
    sector <<= 9;
    5fa4:	it	ne
    5fa6:	lslne	r5, r5, #9
  if (cardCommand(CMD18, sector)) {
    5fa8:	mov	r2, r5
    5faa:	bl	5c44 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    5fae:	cbz	r0, 5fbe <SharedSpiCard::readStart(unsigned long)+0x2e>
    m_errorCode = code;
    5fb0:	movs	r3, #12
  spiStop();
    5fb2:	mov	r0, r4
    5fb4:	strb	r3, [r4, #18]
    5fb6:	bl	5b4e <SharedSpiCard::spiStop()>
  return false;
    5fba:	movs	r0, #0
}
    5fbc:	pop	{r3, r4, r5, pc}
  m_state = READ_STATE;
    5fbe:	movs	r0, #1
    5fc0:	strb	r0, [r4, #20]
  return true;
    5fc2:	b.n	5fbc <SharedSpiCard::readStart(unsigned long)+0x2c>

00005fc4 <SharedSpiCard::readStop()>:
bool SharedSpiCard::readStop() {
    5fc4:	push	{r3, r4, r5, lr}
  m_state = IDLE_STATE;
    5fc6:	movs	r4, #0
  if (cardCommand(CMD12, 0)) {
    5fc8:	movs	r1, #12
bool SharedSpiCard::readStop() {
    5fca:	mov	r5, r0
  if (cardCommand(CMD12, 0)) {
    5fcc:	mov	r2, r4
  m_state = IDLE_STATE;
    5fce:	strb	r4, [r0, #20]
  if (cardCommand(CMD12, 0)) {
    5fd0:	bl	5c44 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    5fd4:	cbz	r0, 5fe4 <SharedSpiCard::readStop()+0x20>
    5fd6:	movs	r3, #9
  spiStop();
    5fd8:	mov	r0, r5
    5fda:	strb	r3, [r5, #18]
    5fdc:	bl	5b4e <SharedSpiCard::spiStop()>
  return false;
    5fe0:	mov	r0, r4
}
    5fe2:	pop	{r3, r4, r5, pc}
  spiStop();
    5fe4:	mov	r0, r5
    5fe6:	bl	5b4e <SharedSpiCard::spiStop()>
  return true;
    5fea:	movs	r0, #1
    5fec:	b.n	5fe2 <SharedSpiCard::readStop()+0x1e>

00005fee <SharedSpiCard::syncDevice()>:
  if (m_state == WRITE_STATE) {
    5fee:	ldrb	r2, [r0, #20]
    5ff0:	cmp	r2, #2
    5ff2:	bne.n	5ffa <SharedSpiCard::syncDevice()+0xc>
    return writeStop();
    5ff4:	ldr	r3, [r0, #0]
    5ff6:	ldr	r3, [r3, #104]	; 0x68
    5ff8:	bx	r3
  if (m_state == READ_STATE) {
    5ffa:	cmp	r2, #1
    5ffc:	bne.n	6002 <SharedSpiCard::syncDevice()+0x14>
    return readStop();
    5ffe:	b.w	5fc4 <SharedSpiCard::readStop()>
}
    6002:	movs	r0, #1
    6004:	bx	lr

00006006 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
bool DedicatedSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    6006:	push	{r3, r4, r5, r6, r7, lr}
    6008:	mov	r6, r3
  if (sdState() != READ_STATE || sector != m_curSector) {
    600a:	ldrb	r3, [r0, #20]
bool DedicatedSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    600c:	mov	r4, r0
    600e:	mov	r5, r1
  if (sdState() != READ_STATE || sector != m_curSector) {
    6010:	cmp	r3, #1
bool DedicatedSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    6012:	mov	r7, r2
  if (sdState() != READ_STATE || sector != m_curSector) {
    6014:	bne.n	601c <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x16>
    6016:	ldr	r3, [r0, #24]
    6018:	cmp	r3, r1
    601a:	beq.n	602c <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x26>
    if (!readStart(sector)) {
    601c:	mov	r1, r5
    601e:	mov	r0, r4
    6020:	bl	5f90 <SharedSpiCard::readStart(unsigned long)>
    6024:	cbnz	r0, 602a <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x24>
  return false;
    6026:	movs	r0, #0
}
    6028:	pop	{r3, r4, r5, r6, r7, pc}
    m_curSector = sector;
    602a:	str	r5, [r4, #24]
bool DedicatedSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    602c:	movs	r5, #0
  for (size_t i = 0; i < ns; i++, dst += 512) {
    602e:	cmp	r5, r6
    6030:	add.w	r1, r7, r5, lsl #9
    6034:	bne.n	604c <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x46>
  m_curSector += ns;
    6036:	ldr	r3, [r4, #24]
  return m_dedicatedSpi ? true : readStop();
    6038:	ldrb	r0, [r4, #28]
  m_curSector += ns;
    603a:	add	r3, r5
    603c:	str	r3, [r4, #24]
  return m_dedicatedSpi ? true : readStop();
    603e:	cmp	r0, #0
    6040:	bne.n	6028 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x22>
    6042:	mov	r0, r4
}
    6044:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return m_dedicatedSpi ? true : readStop();
    6048:	b.w	5fc4 <SharedSpiCard::readStop()>
    if (!readData(dst)) {
    604c:	mov	r0, r4
    604e:	bl	5c10 <SharedSpiCard::readData(unsigned char*)>
    6052:	cmp	r0, #0
    6054:	beq.n	6026 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x20>
  for (size_t i = 0; i < ns; i++, dst += 512) {
    6056:	adds	r5, #1
    6058:	b.n	602e <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x28>

0000605a <SharedSpiCard::writeStart(unsigned long)>:
bool SharedSpiCard::writeStart(uint32_t sector) {
    605a:	push	{r3, r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    605c:	ldr	r3, [r0, #0]
bool SharedSpiCard::writeStart(uint32_t sector) {
    605e:	mov	r5, r1
    6060:	mov	r4, r0
  if (type() != SD_CARD_TYPE_SDHC) {
    6062:	ldr	r3, [r3, #92]	; 0x5c
    6064:	blx	r3
    6066:	cmp	r0, #3
  if (cardCommand(CMD25, sector)) {
    6068:	mov.w	r1, #25
    606c:	mov	r0, r4
    sector <<= 9;
    606e:	it	ne
    6070:	lslne	r5, r5, #9
  if (cardCommand(CMD25, sector)) {
    6072:	mov	r2, r5
    6074:	bl	5c44 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    6078:	cbz	r0, 6088 <SharedSpiCard::writeStart(unsigned long)+0x2e>
    607a:	movs	r3, #14
  spiStop();
    607c:	mov	r0, r4
    607e:	strb	r3, [r4, #18]
    6080:	bl	5b4e <SharedSpiCard::spiStop()>
  return false;
    6084:	movs	r0, #0
}
    6086:	pop	{r3, r4, r5, pc}
  m_state = WRITE_STATE;
    6088:	movs	r3, #2
  return true;
    608a:	movs	r0, #1
  m_state = WRITE_STATE;
    608c:	strb	r3, [r4, #20]
  return true;
    608e:	b.n	6086 <SharedSpiCard::writeStart(unsigned long)+0x2c>

00006090 <SharedSpiCard::erase(unsigned long, unsigned long)>:
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    6090:	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  if (!readCSD(&csd)) {
    6092:	ldr	r3, [r0, #0]
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    6094:	mov	r6, r1
  if (!readCSD(&csd)) {
    6096:	mov	r1, sp
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    6098:	mov	r4, r0
  if (!readCSD(&csd)) {
    609a:	ldr	r3, [r3, #72]	; 0x48
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    609c:	mov	r5, r2
  if (!readCSD(&csd)) {
    609e:	blx	r3
    60a0:	cbz	r0, 60c4 <SharedSpiCard::erase(unsigned long, unsigned long)+0x34>
    } else {
      return 0;
    }
  }
  /** \return true if erase granularity is single block. */
  bool eraseSingleBlock() const { return csd[10] & 0X40; }
    60a2:	ldrb.w	r3, [sp, #10]
  if (!csd.eraseSingleBlock()) {
    60a6:	lsls	r2, r3, #25
    60a8:	bmi.n	60ce <SharedSpiCard::erase(unsigned long, unsigned long)+0x3e>
  /** \return erase size in 512 byte blocks if eraseSingleBlock is false. */
  int eraseSize() const { return ((csd[10] & 0X3F) << 1 | csd[11] >> 7) + 1; }
    60aa:	lsls	r3, r3, #1
    60ac:	ldrb.w	r2, [sp, #11]
    60b0:	and.w	r3, r3, #126	; 0x7e
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    60b4:	orr.w	r3, r3, r2, lsr #7
    60b8:	adds	r2, r5, #1
    60ba:	orrs	r2, r6
    60bc:	tst	r3, r2
    60be:	beq.n	60ce <SharedSpiCard::erase(unsigned long, unsigned long)+0x3e>
    60c0:	movs	r3, #40	; 0x28
    60c2:	strb	r3, [r4, #18]
  spiStop();
    60c4:	mov	r0, r4
  return false;
    60c6:	movs	r5, #0
  spiStop();
    60c8:	bl	5b4e <SharedSpiCard::spiStop()>
  return false;
    60cc:	b.n	611c <SharedSpiCard::erase(unsigned long, unsigned long)+0x8c>
  if (m_type != SD_CARD_TYPE_SDHC) {
    60ce:	ldrb	r3, [r4, #22]
  if (cardCommand(CMD32, firstSector) || cardCommand(CMD33, lastSector) ||
    60d0:	movs	r1, #32
    60d2:	mov	r0, r4
  if (m_type != SD_CARD_TYPE_SDHC) {
    60d4:	cmp	r3, #3
    firstSector <<= 9;
    60d6:	itt	ne
    60d8:	lslne	r6, r6, #9
    lastSector <<= 9;
    60da:	lslne	r5, r5, #9
  if (cardCommand(CMD32, firstSector) || cardCommand(CMD33, lastSector) ||
    60dc:	mov	r2, r6
    60de:	bl	5c44 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    60e2:	cbz	r0, 60e8 <SharedSpiCard::erase(unsigned long, unsigned long)+0x58>
    60e4:	movs	r3, #39	; 0x27
    60e6:	b.n	60c2 <SharedSpiCard::erase(unsigned long, unsigned long)+0x32>
    60e8:	mov	r2, r5
    60ea:	movs	r1, #33	; 0x21
    60ec:	mov	r0, r4
    60ee:	bl	5c44 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    60f2:	mov	r2, r0
    60f4:	cmp	r0, #0
    60f6:	bne.n	60e4 <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
      cardCommand(CMD38, 0)) {
    60f8:	movs	r1, #38	; 0x26
    60fa:	mov	r0, r4
    60fc:	bl	5c44 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
  if (cardCommand(CMD32, firstSector) || cardCommand(CMD33, lastSector) ||
    6100:	cmp	r0, #0
    6102:	bne.n	60e4 <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
  if (!waitReady(SD_ERASE_TIMEOUT)) {
    6104:	movw	r1, #10000	; 0x2710
    6108:	mov	r0, r4
    610a:	bl	5c18 <SharedSpiCard::waitReady(unsigned short)>
    610e:	mov	r5, r0
    6110:	cbnz	r0, 6116 <SharedSpiCard::erase(unsigned long, unsigned long)+0x86>
    6112:	movs	r3, #41	; 0x29
    6114:	b.n	60c2 <SharedSpiCard::erase(unsigned long, unsigned long)+0x32>
  spiStop();
    6116:	mov	r0, r4
    6118:	bl	5b4e <SharedSpiCard::spiStop()>
}
    611c:	mov	r0, r5
    611e:	add	sp, #16
    6120:	pop	{r4, r5, r6, pc}

00006122 <SharedSpiCard::writeStop()>:
bool SharedSpiCard::writeStop() {
    6122:	push	{r3, r4, r5, lr}
  if (!waitReady(SD_WRITE_TIMEOUT)) {
    6124:	mov.w	r1, #600	; 0x258
bool SharedSpiCard::writeStop() {
    6128:	mov	r4, r0
  if (!waitReady(SD_WRITE_TIMEOUT)) {
    612a:	bl	5c18 <SharedSpiCard::waitReady(unsigned short)>
    612e:	mov	r5, r0
    6130:	cbnz	r0, 6140 <SharedSpiCard::writeStop()+0x1e>
    6132:	movs	r3, #31
  spiStop();
    6134:	mov	r0, r4
    6136:	strb	r3, [r4, #18]
    6138:	bl	5b4e <SharedSpiCard::spiStop()>
}
    613c:	mov	r0, r5
    613e:	pop	{r3, r4, r5, pc}
    m_spiDriver.send(data);
    6140:	movs	r1, #253	; 0xfd
    6142:	adds	r0, r4, #4
    6144:	bl	74d4 <SdSpiArduinoDriver::send(unsigned char)>
  spiStop();
    6148:	mov	r0, r4
    614a:	bl	5b4e <SharedSpiCard::spiStop()>
  m_state = IDLE_STATE;
    614e:	movs	r3, #0
    6150:	strb	r3, [r4, #20]
  return true;
    6152:	b.n	613c <SharedSpiCard::writeStop()+0x1a>

00006154 <SharedSpiCard::writeData(unsigned char, unsigned char const*)>:
bool SharedSpiCard::writeData(uint8_t token, const uint8_t* src) {
    6154:	push	{r0, r1, r2, r4, r5, lr}
    6156:	mov	r5, r2
    6158:	mov	r4, r0
    615a:	adds	r0, #4
    615c:	str	r0, [sp, #4]
    615e:	bl	74d4 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.send(buf, n);
    6162:	mov.w	r2, #512	; 0x200
    6166:	mov	r1, r5
    6168:	ldr	r0, [sp, #4]
    616a:	bl	74dc <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>
    m_spiDriver.send(data);
    616e:	movs	r1, #255	; 0xff
    6170:	ldr	r0, [sp, #4]
    6172:	bl	74d4 <SdSpiArduinoDriver::send(unsigned char)>
    6176:	movs	r1, #255	; 0xff
    6178:	ldr	r0, [sp, #4]
    617a:	bl	74d4 <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
    617e:	ldr	r0, [sp, #4]
    6180:	bl	74a8 <SdSpiArduinoDriver::receive()>
  m_status = spiReceive();
    6184:	strb	r0, [r4, #21]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    6186:	and.w	r0, r0, #31
    618a:	cmp	r0, #5
    618c:	beq.n	619e <SharedSpiCard::writeData(unsigned char, unsigned char const*)+0x4a>
    m_errorCode = code;
    618e:	movs	r3, #33	; 0x21
  spiStop();
    6190:	mov	r0, r4
    6192:	strb	r3, [r4, #18]
    6194:	bl	5b4e <SharedSpiCard::spiStop()>
  return false;
    6198:	movs	r0, #0
}
    619a:	add	sp, #12
    619c:	pop	{r4, r5, pc}
  return true;
    619e:	movs	r0, #1
    61a0:	b.n	619a <SharedSpiCard::writeData(unsigned char, unsigned char const*)+0x46>

000061a2 <SharedSpiCard::writeData(unsigned char const*)>:
bool SharedSpiCard::writeData(const uint8_t* src) {
    61a2:	push	{r0, r1, r4, lr}
    61a4:	str	r1, [sp, #4]
  if (!waitReady(SD_WRITE_TIMEOUT)) {
    61a6:	mov.w	r1, #600	; 0x258
bool SharedSpiCard::writeData(const uint8_t* src) {
    61aa:	mov	r4, r0
  if (!waitReady(SD_WRITE_TIMEOUT)) {
    61ac:	bl	5c18 <SharedSpiCard::waitReady(unsigned short)>
    61b0:	ldr	r2, [sp, #4]
    61b2:	cbnz	r0, 61c2 <SharedSpiCard::writeData(unsigned char const*)+0x20>
    61b4:	movs	r3, #37	; 0x25
    61b6:	strb	r3, [r4, #18]
  spiStop();
    61b8:	mov	r0, r4
    61ba:	bl	5b4e <SharedSpiCard::spiStop()>
  return false;
    61be:	movs	r0, #0
    61c0:	b.n	61ce <SharedSpiCard::writeData(unsigned char const*)+0x2c>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
    61c2:	movs	r1, #252	; 0xfc
    61c4:	mov	r0, r4
    61c6:	bl	6154 <SharedSpiCard::writeData(unsigned char, unsigned char const*)>
    61ca:	cmp	r0, #0
    61cc:	beq.n	61b8 <SharedSpiCard::writeData(unsigned char const*)+0x16>
}
    61ce:	add	sp, #8
    61d0:	pop	{r4, pc}

000061d2 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)>:
bool SharedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    61d2:	push	{r3, r4, r5, r6, r7, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    61d4:	ldr	r3, [r0, #0]
bool SharedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    61d6:	mov	r5, r1
    61d8:	mov	r4, r0
    61da:	mov	r7, r2
  if (type() != SD_CARD_TYPE_SDHC) {
    61dc:	ldr	r3, [r3, #92]	; 0x5c
    61de:	blx	r3
    61e0:	cmp	r0, #3
  if (cardCommand(CMD24, sector)) {
    61e2:	mov.w	r1, #24
    61e6:	mov	r0, r4
    sector <<= 9;
    61e8:	it	ne
    61ea:	lslne	r5, r5, #9
  if (cardCommand(CMD24, sector)) {
    61ec:	mov	r2, r5
    61ee:	bl	5c44 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    61f2:	mov	r6, r0
    61f4:	cbz	r0, 6204 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x32>
    61f6:	movs	r3, #13
    61f8:	strb	r3, [r4, #18]
  spiStop();
    61fa:	mov	r0, r4
  return false;
    61fc:	movs	r5, #0
  spiStop();
    61fe:	bl	5b4e <SharedSpiCard::spiStop()>
  return false;
    6202:	b.n	6244 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x72>
  if (!writeData(DATA_START_SECTOR, src)) {
    6204:	mov	r2, r7
    6206:	movs	r1, #254	; 0xfe
    6208:	mov	r0, r4
    620a:	bl	6154 <SharedSpiCard::writeData(unsigned char, unsigned char const*)>
    620e:	cmp	r0, #0
    6210:	beq.n	61fa <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x28>
  if (!waitReady(SD_WRITE_TIMEOUT)) {
    6212:	mov.w	r1, #600	; 0x258
    6216:	mov	r0, r4
    6218:	bl	5c18 <SharedSpiCard::waitReady(unsigned short)>
    621c:	mov	r5, r0
    621e:	cbnz	r0, 6224 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x52>
    6220:	movs	r3, #36	; 0x24
    6222:	b.n	61f8 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x26>
  if (cardCommand(CMD13, 0) || spiReceive()) {
    6224:	mov	r2, r6
    6226:	movs	r1, #13
    6228:	mov	r0, r4
    622a:	bl	5c44 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    622e:	cbz	r0, 6234 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x62>
    6230:	movs	r3, #10
    6232:	b.n	61f8 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x26>
    return m_spiDriver.receive();
    6234:	adds	r0, r4, #4
    6236:	bl	74a8 <SdSpiArduinoDriver::receive()>
    623a:	cmp	r0, #0
    623c:	bne.n	6230 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x5e>
  spiStop();
    623e:	mov	r0, r4
    6240:	bl	5b4e <SharedSpiCard::spiStop()>
}
    6244:	mov	r0, r5
    6246:	pop	{r3, r4, r5, r6, r7, pc}

00006248 <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)>:
bool DedicatedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    6248:	push	{r4}
  if (m_dedicatedSpi) {
    624a:	ldrb	r4, [r0, #28]
    624c:	cbz	r4, 625c <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)+0x14>
    return writeSectors(sector, src, 1);
    624e:	ldr	r3, [r0, #0]
    6250:	ldr	r4, [r3, #36]	; 0x24
    6252:	movs	r3, #1
    6254:	mov	ip, r4
}
    6256:	ldr.w	r4, [sp], #4
    return writeSectors(sector, src, 1);
    625a:	bx	ip
}
    625c:	ldr.w	r4, [sp], #4
  return SharedSpiCard::writeSector(sector, src);
    6260:	b.w	61d2 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)>

00006264 <DedicatedSpiCard::begin(SdSpiConfig)>:
bool DedicatedSpiCard::begin(SdSpiConfig spiConfig) {
    6264:	push	{r4, r5, lr}
    6266:	sub	sp, #20
    6268:	mov	r5, r0
    626a:	add	r4, sp, #4
    626c:	stmia.w	r4, {r1, r2, r3}
  if (!SharedSpiCard::begin(spiConfig)) {
    6270:	ldmia.w	r4, {r1, r2, r3}
    6274:	bl	5d64 <SharedSpiCard::begin(SdSpiConfig)>
    6278:	cbz	r0, 6284 <DedicatedSpiCard::begin(SdSpiConfig)+0x20>
inline bool spiOptionDedicated(uint8_t opt) { return opt & DEDICATED_SPI; }
    627a:	ldrb.w	r3, [sp, #5]
    627e:	and.w	r3, r3, #1
    6282:	strb	r3, [r5, #28]
}
    6284:	add	sp, #20
    6286:	pop	{r4, r5, pc}

00006288 <SdCardInterface::hasDedicatedSpi()>:
  virtual bool hasDedicatedSpi() { return false; }
    6288:	movs	r0, #0
    628a:	bx	lr

0000628c <SdCardInterface::isDedicatedSpi()>:
  bool virtual isDedicatedSpi() { return false; }
    628c:	movs	r0, #0
    628e:	bx	lr

00006290 <SdCardInterface::setDedicatedSpi(bool)>:
  }
    6290:	movs	r0, #0
    6292:	bx	lr

00006294 <SdioCard::end()>:
   */
  bool cardCMD6(uint32_t arg, uint8_t* status);
  /** Disable an SDIO card.
   * not implemented.
   */
  void end() {}
    6294:	bx	lr
	...

00006298 <sdIrs()>:
  return false;
}
//==============================================================================
// ISR
static void sdIrs() {
  SDHC_IRQSIGEN = 0;
    6298:	ldr	r3, [pc, #28]	; (62b8 <sdIrs()+0x20>)
    629a:	movs	r1, #0
  m_irqstat = SDHC_IRQSTAT;
    629c:	ldr	r2, [pc, #28]	; (62bc <sdIrs()+0x24>)
  SDHC_IRQSIGEN = 0;
    629e:	str	r1, [r3, #56]	; 0x38
  m_irqstat = SDHC_IRQSTAT;
    62a0:	ldr	r0, [r3, #48]	; 0x30
    62a2:	str	r0, [r2, #0]
  SDHC_IRQSTAT = m_irqstat;
    62a4:	ldr	r2, [r2, #0]
    62a6:	str	r2, [r3, #48]	; 0x30
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
    62a8:	ldr	r2, [r3, #72]	; 0x48
    62aa:	bic.w	r2, r2, #129	; 0x81
    62ae:	str	r2, [r3, #72]	; 0x48
#endif
  m_dmaBusy = false;
    62b0:	ldr	r3, [pc, #12]	; (62c0 <sdIrs()+0x28>)
    62b2:	strb	r1, [r3, #0]
}
    62b4:	bx	lr
    62b6:	nop
    62b8:	.word	0x402c0000
    62bc:	.word	0x200068a8
    62c0:	.word	0x200071f8

000062c4 <gpioMux(unsigned char)>:
static uint32_t baseClock() { return F_CPU; }

#elif defined(__IMXRT1062__)
//------------------------------------------------------------------------------
static void gpioMux(uint8_t mode) {
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    62c4:	ldr	r3, [pc, #24]	; (62e0 <gpioMux(unsigned char)+0x1c>)
    62c6:	str.w	r0, [r3, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    62ca:	str.w	r0, [r3, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    62ce:	str.w	r0, [r3, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    62d2:	str.w	r0, [r3, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    62d6:	str.w	r0, [r3, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    62da:	str.w	r0, [r3, #456]	; 0x1c8
}
    62de:	bx	lr
    62e0:	.word	0x401f8000

000062e4 <isBusyCommandComplete()>:
static bool isBusyCMD13() {
  return !(statusCMD13() & CARD_STATUS_READY_FOR_DATA);
}
//------------------------------------------------------------------------------
static bool isBusyCommandComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
    62e4:	ldr	r3, [pc, #12]	; (62f4 <isBusyCommandComplete()+0x10>)
    62e6:	ldr	r0, [pc, #16]	; (62f8 <isBusyCommandComplete()+0x14>)
    62e8:	ldr	r3, [r3, #48]	; 0x30
    62ea:	ands	r0, r3
}
    62ec:	clz	r0, r0
    62f0:	lsrs	r0, r0, #5
    62f2:	bx	lr
    62f4:	.word	0x402c0000
    62f8:	.word	0x000f0001

000062fc <isBusyCommandInhibit()>:
//------------------------------------------------------------------------------
static bool isBusyCommandInhibit() { return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB; }
    62fc:	ldr	r3, [pc, #8]	; (6308 <isBusyCommandInhibit()+0xc>)
    62fe:	ldr	r0, [r3, #36]	; 0x24
    6300:	and.w	r0, r0, #1
    6304:	bx	lr
    6306:	nop
    6308:	.word	0x402c0000

0000630c <isBusyDat()>:
//------------------------------------------------------------------------------
static bool isBusyDat() { return SDHC_PRSSTAT & (1 << 24) ? false : true; }
    630c:	ldr	r3, [pc, #12]	; (631c <isBusyDat()+0x10>)
    630e:	ldr	r0, [r3, #36]	; 0x24
    6310:	eor.w	r0, r0, #16777216	; 0x1000000
    6314:	ubfx	r0, r0, #24, #1
    6318:	bx	lr
    631a:	nop
    631c:	.word	0x402c0000

00006320 <isBusyDMA()>:
//------------------------------------------------------------------------------
static bool isBusyDMA() { return m_dmaBusy; }
    6320:	ldr	r3, [pc, #4]	; (6328 <isBusyDMA()+0x8>)
    6322:	ldrb	r0, [r3, #0]
    6324:	bx	lr
    6326:	nop
    6328:	.word	0x200071f8

0000632c <isBusyFifoRead()>:
//------------------------------------------------------------------------------
static bool isBusyFifoRead() { return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN); }
    632c:	ldr	r3, [pc, #12]	; (633c <isBusyFifoRead()+0x10>)
    632e:	ldr	r0, [r3, #36]	; 0x24
    6330:	eor.w	r0, r0, #2048	; 0x800
    6334:	ubfx	r0, r0, #11, #1
    6338:	bx	lr
    633a:	nop
    633c:	.word	0x402c0000

00006340 <isBusyFifoWrite()>:
//------------------------------------------------------------------------------
static bool isBusyFifoWrite() { return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN); }
    6340:	ldr	r3, [pc, #12]	; (6350 <isBusyFifoWrite()+0x10>)
    6342:	ldr	r0, [r3, #36]	; 0x24
    6344:	eor.w	r0, r0, #1024	; 0x400
    6348:	ubfx	r0, r0, #10, #1
    634c:	bx	lr
    634e:	nop
    6350:	.word	0x402c0000

00006354 <isBusyTransferComplete()>:
//------------------------------------------------------------------------------
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    6354:	ldr	r3, [pc, #12]	; (6364 <isBusyTransferComplete()+0x10>)
    6356:	ldr	r0, [pc, #16]	; (6368 <isBusyTransferComplete()+0x14>)
    6358:	ldr	r3, [r3, #48]	; 0x30
    635a:	ands	r0, r3
}
    635c:	clz	r0, r0
    6360:	lsrs	r0, r0, #5
    6362:	bx	lr
    6364:	.word	0x402c0000
    6368:	.word	0x117f0002

0000636c <setSdclk(unsigned long)>:
static void setSdclk(uint32_t kHzMax) {
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000 * kHzMax;
    636c:	mov.w	r3, #1000	; 0x3e8
    6370:	muls	r0, r3
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    6372:	ldr	r3, [pc, #140]	; (6400 <setSdclk(unsigned long)+0x94>)
    6374:	ldr	r2, [r3, #36]	; 0x24
  return (528000000U * 3) / ((CCM_ANALOG_PFD_528 & 0x3F) / 6) / divider;
    6376:	sub.w	r3, r3, #147456	; 0x24000
    637a:	ldr.w	r1, [r3, #256]	; 0x100
    637e:	movs	r3, #6
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    6380:	ubfx	r2, r2, #11, #3
  return (528000000U * 3) / ((CCM_ANALOG_PFD_528 & 0x3F) / 6) / divider;
    6384:	and.w	r1, r1, #63	; 0x3f
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    6388:	adds	r2, #1
  return (528000000U * 3) / ((CCM_ANALOG_PFD_528 & 0x3F) / 6) / divider;
    638a:	udiv	r1, r1, r3
    638e:	ldr	r3, [pc, #116]	; (6404 <setSdclk(unsigned long)+0x98>)
    6390:	udiv	r3, r3, r1
  uint32_t base = baseClock();

  while ((base / (sdclkfs * DVS_LIMIT) > maxSdclk) &&
    6394:	movs	r1, #9
  return (528000000U * 3) / ((CCM_ANALOG_PFD_528 & 0x3F) / 6) / divider;
    6396:	udiv	r3, r3, r2
  uint32_t sdclkfs = 1;
    639a:	movs	r2, #1
static void setSdclk(uint32_t kHzMax) {
    639c:	push	{r4, r5, lr}
  while ((base / (sdclkfs * DVS_LIMIT) > maxSdclk) &&
    639e:	lsls	r4, r2, #4
    63a0:	udiv	r4, r3, r4
    63a4:	cmp	r4, r0
    63a6:	bls.n	63ac <setSdclk(unsigned long)+0x40>
    63a8:	subs	r1, #1
    63aa:	bne.n	63b2 <setSdclk(unsigned long)+0x46>
    63ac:	mov	r4, r2
    63ae:	movs	r1, #1
    63b0:	b.n	63ba <setSdclk(unsigned long)+0x4e>
         (sdclkfs < SDCLKFS_LIMIT)) {
    sdclkfs <<= 1;
    63b2:	lsls	r2, r2, #1
    63b4:	b.n	639e <setSdclk(unsigned long)+0x32>
  }
  while ((base / (sdclkfs * dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    dvs++;
    63b6:	adds	r1, #1
    63b8:	mov	r4, r5
  while ((base / (sdclkfs * dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    63ba:	udiv	r5, r3, r4
    63be:	cmp	r5, r0
    63c0:	bls.n	63ca <setSdclk(unsigned long)+0x5e>
    63c2:	cmp	r1, #16
    63c4:	add.w	r5, r2, r4
    63c8:	bne.n	63b6 <setSdclk(unsigned long)+0x4a>
  }
  m_sdClkKhz = base / (1000 * sdclkfs * dvs);
    63ca:	mov.w	r0, #1000	; 0x3e8
  sdclkfs >>= 1;
  dvs--;
    63ce:	subs	r1, #1
  sdclkfs >>= 1;
    63d0:	lsrs	r2, r2, #1
  m_sdClkKhz = base / (1000 * sdclkfs * dvs);
    63d2:	muls	r4, r0
    63d4:	ldr	r0, [pc, #48]	; (6408 <setSdclk(unsigned long)+0x9c>)
    63d6:	udiv	r3, r3, r4
    63da:	str	r3, [r0, #0]
  SDHC_SYSCTL &= ~SDHC_SYSCTL_SDCLKEN;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)

  // Change dividers.
  uint32_t sysctl =
      SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK | SDHC_SYSCTL_DVS_MASK |
    63dc:	ldr	r0, [pc, #44]	; (640c <setSdclk(unsigned long)+0xa0>)
    63de:	ldr	r3, [r0, #44]	; 0x2c
                      SDHC_SYSCTL_SDCLKFS_MASK);
    63e0:	bic.w	r3, r3, #1044480	; 0xff000
    63e4:	bic.w	r3, r3, #4080	; 0xff0

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs) |
    63e8:	orr.w	r3, r3, r1, lsl #4
    63ec:	orr.w	r3, r3, r2, lsl #8
    63f0:	orr.w	r3, r3, #917504	; 0xe0000
    63f4:	str	r3, [r0, #44]	; 0x2c
                SDHC_SYSCTL_SDCLKFS(sdclkfs);

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
    63f6:	ldr	r3, [r0, #36]	; 0x24
    63f8:	lsls	r3, r3, #28
    63fa:	bpl.n	63f6 <setSdclk(unsigned long)+0x8a>

#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
  // Enable the SDHC clock.
  SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
}
    63fc:	pop	{r4, r5, pc}
    63fe:	nop
    6400:	.word	0x400fc000
    6404:	.word	0x5e69ec00
    6408:	.word	0x20006488
    640c:	.word	0x402c0000

00006410 <SdioCard::errorCode() const>:
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::errorCode() const { return m_errorCode; }
    6410:	ldr	r3, [pc, #4]	; (6418 <SdioCard::errorCode() const+0x8>)
    6412:	ldrb	r0, [r3, #0]
    6414:	bx	lr
    6416:	nop
    6418:	.word	0x2000219c

0000641c <SdioCard::errorData() const>:
//------------------------------------------------------------------------------
uint32_t SdioCard::errorData() const { return m_irqstat; }
    641c:	ldr	r3, [pc, #4]	; (6424 <SdioCard::errorData() const+0x8>)
    641e:	ldr	r0, [r3, #0]
    6420:	bx	lr
    6422:	nop
    6424:	.word	0x200068a8

00006428 <SdioCard::readCID(cid_t*)>:
}
//------------------------------------------------------------------------------
uint32_t SdioCard::kHzSdClk() { return m_sdClkKhz; }
//------------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
  memcpy(cid, &m_cid, sizeof(cid_t));
    6428:	ldr	r3, [pc, #20]	; (6440 <SdioCard::readCID(cid_t*)+0x18>)
    642a:	add.w	r2, r3, #16
    642e:	ldr.w	r0, [r3], #4
    6432:	cmp	r3, r2
    6434:	str.w	r0, [r1], #4
    6438:	bne.n	642e <SdioCard::readCID(cid_t*)+0x6>
  return true;
}
    643a:	movs	r0, #1
    643c:	bx	lr
    643e:	nop
    6440:	.word	0x2000718f

00006444 <SdioCard::readCSD(csd_t*)>:
//------------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
  memcpy(csd, &m_csd, sizeof(csd_t));
    6444:	ldr	r3, [pc, #20]	; (645c <SdioCard::readCSD(csd_t*)+0x18>)
    6446:	add.w	r2, r3, #16
    644a:	ldr.w	r0, [r3], #4
    644e:	cmp	r3, r2
    6450:	str.w	r0, [r1], #4
    6454:	bne.n	644a <SdioCard::readCSD(csd_t*)+0x6>
  return true;
}
    6456:	movs	r0, #1
    6458:	bx	lr
    645a:	nop
    645c:	.word	0x2000719f

00006460 <SdioCard::readOCR(unsigned long*)>:
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
    6460:	ldr	r3, [pc, #8]	; (646c <SdioCard::readOCR(unsigned long*)+0xc>)
  return true;
}
    6462:	movs	r0, #1
  *ocr = m_ocr;
    6464:	ldr	r3, [r3, #0]
    6466:	str	r3, [r1, #0]
}
    6468:	bx	lr
    646a:	nop
    646c:	.word	0x20006898

00006470 <SdioCard::readSCR(scr_t*)>:
//------------------------------------------------------------------------------
bool SdioCard::readSCR(scr_t* scr) {
  memcpy(scr, &m_scr, sizeof(scr_t));
    6470:	ldr	r2, [pc, #12]	; (6480 <SdioCard::readSCR(scr_t*)+0x10>)
  return true;
}
    6472:	movs	r0, #1
  memcpy(scr, &m_scr, sizeof(scr_t));
    6474:	ldr	r3, [r2, #0]
    6476:	str	r3, [r1, #0]
    6478:	ldr	r3, [r2, #4]
    647a:	str	r3, [r1, #4]
}
    647c:	bx	lr
    647e:	nop
    6480:	.word	0x200071af

00006484 <SdioCard::readSDS(sds_t*)>:
//------------------------------------------------------------------------------
bool SdioCard::readSDS(sds_t* sds) {
  memcpy(sds, &m_sds, sizeof(sds_t));
    6484:	ldr	r3, [pc, #20]	; (649c <SdioCard::readSDS(sds_t*)+0x18>)
    6486:	add.w	r2, r3, #64	; 0x40
    648a:	ldr.w	r0, [r3], #4
    648e:	cmp	r3, r2
    6490:	str.w	r0, [r1], #4
    6494:	bne.n	648a <SdioCard::readSDS(sds_t*)+0x6>
  return true;
}
    6496:	movs	r0, #1
    6498:	bx	lr
    649a:	nop
    649c:	.word	0x200071b7

000064a0 <SdioCard::~SdioCard()>:
class SdioCard : public SdCardInterface {
    64a0:	bx	lr
	...

000064a4 <waitTimeout(bool (*)())>:
static bool waitTimeout(bool (*fcn)()) {
    64a4:	push	{r3, r4, r5, r6, r7, lr}
    64a6:	mov	r5, r0
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    64a8:	ldr	r7, [pc, #24]	; (64c4 <waitTimeout(bool (*)())+0x20>)
  uint32_t m = micros();
    64aa:	bl	88cc <micros>
    64ae:	mov	r6, r0
  while (fcn()) {
    64b0:	blx	r5
    64b2:	mov	r4, r0
    64b4:	cbz	r0, 64c0 <waitTimeout(bool (*)())+0x1c>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    64b6:	bl	88cc <micros>
    64ba:	subs	r0, r0, r6
    64bc:	cmp	r0, r7
    64be:	bls.n	64b0 <waitTimeout(bool (*)())+0xc>
}
    64c0:	mov	r0, r4
    64c2:	pop	{r3, r4, r5, r6, r7, pc}
    64c4:	.word	0x000f4240

000064c8 <yieldTimeout(bool (*)())>:
static bool yieldTimeout(bool (*fcn)()) {
    64c8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_busyFcn = fcn;
    64cc:	ldr	r7, [pc, #44]	; (64fc <yieldTimeout(bool (*)())+0x34>)
static bool yieldTimeout(bool (*fcn)()) {
    64ce:	mov	r5, r0
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    64d0:	ldr.w	r8, [pc, #44]	; 6500 <yieldTimeout(bool (*)())+0x38>
  m_busyFcn = fcn;
    64d4:	str	r0, [r7, #0]
  uint32_t m = micros();
    64d6:	bl	88cc <micros>
    64da:	mov	r6, r0
  while (fcn()) {
    64dc:	blx	r5
    64de:	mov	r4, r0
    64e0:	cbnz	r0, 64ec <yieldTimeout(bool (*)())+0x24>
      m_busyFcn = 0;
    64e2:	movs	r3, #0
}
    64e4:	mov	r0, r4
      m_busyFcn = 0;
    64e6:	str	r3, [r7, #0]
}
    64e8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    64ec:	bl	88cc <micros>
    64f0:	subs	r0, r0, r6
    64f2:	cmp	r0, r8
    64f4:	bhi.n	64e2 <yieldTimeout(bool (*)())+0x1a>
    yield();
    64f6:	bl	90ec <yield>
    64fa:	b.n	64dc <yieldTimeout(bool (*)())+0x14>
    64fc:	.word	0x200068a4
    6500:	.word	0x000f4240

00006504 <SdioCard::~SdioCard()>:
    6504:	push	{r4, lr}
    6506:	mov	r4, r0
    6508:	movs	r1, #12
    650a:	bl	a022 <operator delete(void*, unsigned int)>
    650e:	mov	r0, r4
    6510:	pop	{r4, pc}
	...

00006514 <enableGPIO(bool) [clone .part.0]>:
static void enableGPIO(bool enable) {
    6514:	push	{r3, lr}
    gpioMux(0);
    6516:	movs	r0, #0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    6518:	movw	r2, #28856	; 0x70b8
    gpioMux(0);
    651c:	bl	62c4 <gpioMux(unsigned char)>
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    6520:	movw	r1, #4280	; 0x10b8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    6524:	ldr	r3, [pc, #24]	; (6540 <enableGPIO(bool) [clone .part.0]+0x2c>)
    6526:	str.w	r2, [r3, #956]	; 0x3bc
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;   // DAT3
    652a:	str.w	r2, [r3, #960]	; 0x3c0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;   // CMD
    652e:	str.w	r2, [r3, #940]	; 0x3ac
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    6532:	str.w	r1, [r3, #944]	; 0x3b0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02 = DATA_MASK;   // DAT0
    6536:	str.w	r2, [r3, #948]	; 0x3b4
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;   // DAT1
    653a:	str.w	r2, [r3, #952]	; 0x3b8
}
    653e:	pop	{r3, pc}
    6540:	.word	0x401f8000

00006544 <SdioCard::type() const>:
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::type() const {
  return m_version2 ? m_highCapacity ? SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2
    6544:	ldr	r3, [pc, #16]	; (6558 <SdioCard::type() const+0x14>)
    6546:	ldrb	r3, [r3, #0]
    6548:	cbz	r3, 6554 <SdioCard::type() const+0x10>
    654a:	ldr	r3, [pc, #16]	; (655c <SdioCard::type() const+0x18>)
    654c:	ldrb	r0, [r3, #0]
    654e:	adds	r0, #2
    6550:	uxtb	r0, r0
    6552:	bx	lr
    6554:	movs	r0, #1
                    : SD_CARD_TYPE_SD1;
}
    6556:	bx	lr
    6558:	.word	0x20007185
    655c:	.word	0x20007186

00006560 <cardCommand(unsigned long, unsigned long)>:
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    6560:	push	{r3, r4, r5, lr}
    6562:	mov	r4, r0
  if (waitTimeout(isBusyCommandInhibit)) {
    6564:	ldr	r0, [pc, #80]	; (65b8 <cardCommand(unsigned long, unsigned long)+0x58>)
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    6566:	mov	r5, r1
  if (waitTimeout(isBusyCommandInhibit)) {
    6568:	bl	64a4 <waitTimeout(bool (*)())>
    656c:	cbnz	r0, 65ae <cardCommand(unsigned long, unsigned long)+0x4e>
  SDHC_CMDARG = arg;
    656e:	ldr	r3, [pc, #76]	; (65bc <cardCommand(unsigned long, unsigned long)+0x5c>)
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
    6570:	lsls	r1, r4, #10
  SDHC_CMDARG = arg;
    6572:	str	r5, [r3, #8]
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
    6574:	bpl.n	6586 <cardCommand(unsigned long, unsigned long)+0x26>
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    6576:	ldr	r2, [r3, #72]	; 0x48
    6578:	bic.w	r2, r2, #255	; 0xff
    657c:	str	r2, [r3, #72]	; 0x48
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
    657e:	uxtb	r2, r4
    6580:	ldr	r1, [r3, #72]	; 0x48
    6582:	orrs	r2, r1
    6584:	str	r2, [r3, #72]	; 0x48
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
    6586:	bic.w	r4, r4, #255	; 0xff
  SDHC_XFERTYP = xfertyp;
    658a:	ldr	r5, [pc, #48]	; (65bc <cardCommand(unsigned long, unsigned long)+0x5c>)
  if (waitTimeout(isBusyCommandComplete)) {
    658c:	ldr	r0, [pc, #48]	; (65c0 <cardCommand(unsigned long, unsigned long)+0x60>)
  SDHC_XFERTYP = xfertyp;
    658e:	str	r4, [r5, #12]
  if (waitTimeout(isBusyCommandComplete)) {
    6590:	bl	64a4 <waitTimeout(bool (*)())>
    6594:	cbnz	r0, 65ae <cardCommand(unsigned long, unsigned long)+0x4e>
  m_irqstat = SDHC_IRQSTAT;
    6596:	ldr	r2, [r5, #48]	; 0x30
    6598:	ldr	r3, [pc, #40]	; (65c4 <cardCommand(unsigned long, unsigned long)+0x64>)
    659a:	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    659c:	ldr	r2, [r3, #0]
    659e:	str	r2, [r5, #48]	; 0x30
  return (m_irqstat & SDHC_IRQSTAT_CC) && !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
    65a0:	ldr	r2, [r3, #0]
    65a2:	lsls	r2, r2, #31
    65a4:	bpl.n	65ae <cardCommand(unsigned long, unsigned long)+0x4e>
    65a6:	ldr	r3, [r3, #0]
    65a8:	tst.w	r3, #983040	; 0xf0000
    65ac:	beq.n	65b2 <cardCommand(unsigned long, unsigned long)+0x52>
    65ae:	movs	r0, #0
}
    65b0:	pop	{r3, r4, r5, pc}
  return (m_irqstat & SDHC_IRQSTAT_CC) && !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
    65b2:	movs	r0, #1
    65b4:	b.n	65b0 <cardCommand(unsigned long, unsigned long)+0x50>
    65b6:	nop
    65b8:	.word	0x000062fd
    65bc:	.word	0x402c0000
    65c0:	.word	0x000062e5
    65c4:	.word	0x200068a8

000065c8 <statusCMD13()>:
static uint32_t statusCMD13() {
    65c8:	push	{r3, lr}
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    65ca:	ldr	r3, [pc, #16]	; (65dc <statusCMD13()+0x14>)
    65cc:	ldr	r0, [pc, #16]	; (65e0 <statusCMD13()+0x18>)
    65ce:	ldr	r1, [r3, #0]
    65d0:	bl	6560 <cardCommand(unsigned long, unsigned long)>
    65d4:	cbz	r0, 65da <statusCMD13()+0x12>
    65d6:	ldr	r3, [pc, #12]	; (65e4 <statusCMD13()+0x1c>)
    65d8:	ldr	r0, [r3, #16]
}
    65da:	pop	{r3, pc}
    65dc:	.word	0x2000689c
    65e0:	.word	0x0d1a0000
    65e4:	.word	0x402c0000

000065e8 <isBusyCMD13()>:
static bool isBusyCMD13() {
    65e8:	push	{r3, lr}
  return !(statusCMD13() & CARD_STATUS_READY_FOR_DATA);
    65ea:	bl	65c8 <statusCMD13()>
    65ee:	eor.w	r0, r0, #256	; 0x100
}
    65f2:	ubfx	r0, r0, #8, #1
    65f6:	pop	{r3, pc}

000065f8 <SdioCard::status()>:
uint32_t SdioCard::status() { return statusCMD13(); }
    65f8:	b.w	65c8 <statusCMD13()>

000065fc <SdioCard::erase(unsigned long, unsigned long)>:
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    65fc:	push	{r4, r5, r6, lr}
    65fe:	mov	r5, r2
  if (m_curState != IDLE_STATE && !syncDevice()) {
    6600:	ldrb	r2, [r0, #9]
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    6602:	mov	r6, r1
  if (m_curState != IDLE_STATE && !syncDevice()) {
    6604:	cbnz	r2, 6634 <SdioCard::erase(unsigned long, unsigned long)+0x38>
  bool eraseSingleBlock() const { return csd[10] & 0X40; }
    6606:	ldr	r2, [pc, #176]	; (66b8 <SdioCard::erase(unsigned long, unsigned long)+0xbc>)
    6608:	ldrb	r3, [r2, #10]
  if (!m_csd.eraseSingleBlock()) {
    660a:	ands.w	r4, r3, #64	; 0x40
    660e:	beq.n	6644 <SdioCard::erase(unsigned long, unsigned long)+0x48>
  if (!m_highCapacity) {
    6610:	ldr	r3, [pc, #168]	; (66bc <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
    6612:	ldrb	r3, [r3, #0]
    6614:	cbnz	r3, 661a <SdioCard::erase(unsigned long, unsigned long)+0x1e>
    firstSector <<= 9;
    6616:	lsls	r6, r6, #9
    lastSector <<= 9;
    6618:	lsls	r5, r5, #9
  if (!cardCommand(CMD32_XFERTYP, firstSector)) {
    661a:	mov	r1, r6
    661c:	ldr	r0, [pc, #160]	; (66c0 <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
    661e:	bl	6560 <cardCommand(unsigned long, unsigned long)>
    6622:	mov	r4, r0
    6624:	cbnz	r0, 6668 <SdioCard::erase(unsigned long, unsigned long)+0x6c>
  m_errorCode = code;
    6626:	ldr	r3, [pc, #156]	; (66c4 <SdioCard::erase(unsigned long, unsigned long)+0xc8>)
    6628:	movs	r2, #15
    662a:	strb	r2, [r3, #0]
  m_errorLine = line;
    662c:	movw	r2, #821	; 0x335
    6630:	ldr	r3, [pc, #148]	; (66c8 <SdioCard::erase(unsigned long, unsigned long)+0xcc>)
    6632:	b.n	6664 <SdioCard::erase(unsigned long, unsigned long)+0x68>
  if (m_curState != IDLE_STATE && !syncDevice()) {
    6634:	ldr	r3, [r0, #0]
    6636:	ldr	r3, [r3, #28]
    6638:	blx	r3
    663a:	mov	r4, r0
    663c:	cmp	r0, #0
    663e:	bne.n	6606 <SdioCard::erase(unsigned long, unsigned long)+0xa>
}
    6640:	mov	r0, r4
    6642:	pop	{r4, r5, r6, pc}
  int eraseSize() const { return ((csd[10] & 0X3F) << 1 | csd[11] >> 7) + 1; }
    6644:	lsls	r3, r3, #1
    6646:	ldrb	r2, [r2, #11]
    6648:	and.w	r3, r3, #126	; 0x7e
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    664c:	orr.w	r3, r3, r2, lsr #7
    6650:	adds	r2, r5, #1
    6652:	orrs	r2, r6
    6654:	tst	r3, r2
    6656:	beq.n	6610 <SdioCard::erase(unsigned long, unsigned long)+0x14>
  m_errorCode = code;
    6658:	ldr	r3, [pc, #104]	; (66c4 <SdioCard::erase(unsigned long, unsigned long)+0xc8>)
    665a:	movs	r2, #40	; 0x28
    665c:	strb	r2, [r3, #0]
  m_errorLine = line;
    665e:	movw	r2, #813	; 0x32d
    6662:	ldr	r3, [pc, #100]	; (66c8 <SdioCard::erase(unsigned long, unsigned long)+0xcc>)
    6664:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD32);
    6666:	b.n	6640 <SdioCard::erase(unsigned long, unsigned long)+0x44>
  if (!cardCommand(CMD33_XFERTYP, lastSector)) {
    6668:	mov	r1, r5
    666a:	ldr	r0, [pc, #96]	; (66cc <SdioCard::erase(unsigned long, unsigned long)+0xd0>)
    666c:	bl	6560 <cardCommand(unsigned long, unsigned long)>
    6670:	mov	r4, r0
    6672:	cbnz	r0, 6682 <SdioCard::erase(unsigned long, unsigned long)+0x86>
  m_errorCode = code;
    6674:	ldr	r3, [pc, #76]	; (66c4 <SdioCard::erase(unsigned long, unsigned long)+0xc8>)
    6676:	movs	r2, #16
    6678:	strb	r2, [r3, #0]
  m_errorLine = line;
    667a:	mov.w	r2, #824	; 0x338
    667e:	ldr	r3, [pc, #72]	; (66c8 <SdioCard::erase(unsigned long, unsigned long)+0xcc>)
    6680:	b.n	6664 <SdioCard::erase(unsigned long, unsigned long)+0x68>
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    6682:	movs	r1, #0
    6684:	ldr	r0, [pc, #72]	; (66d0 <SdioCard::erase(unsigned long, unsigned long)+0xd4>)
    6686:	bl	6560 <cardCommand(unsigned long, unsigned long)>
    668a:	mov	r4, r0
    668c:	cbnz	r0, 669c <SdioCard::erase(unsigned long, unsigned long)+0xa0>
  m_errorCode = code;
    668e:	ldr	r3, [pc, #52]	; (66c4 <SdioCard::erase(unsigned long, unsigned long)+0xc8>)
    6690:	movs	r2, #17
    6692:	strb	r2, [r3, #0]
  m_errorLine = line;
    6694:	movw	r2, #827	; 0x33b
    6698:	ldr	r3, [pc, #44]	; (66c8 <SdioCard::erase(unsigned long, unsigned long)+0xcc>)
    669a:	b.n	6664 <SdioCard::erase(unsigned long, unsigned long)+0x68>
  if (waitTimeout(isBusyCMD13)) {
    669c:	ldr	r0, [pc, #52]	; (66d4 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
    669e:	bl	64a4 <waitTimeout(bool (*)())>
    66a2:	cmp	r0, #0
    66a4:	beq.n	6640 <SdioCard::erase(unsigned long, unsigned long)+0x44>
  m_errorCode = code;
    66a6:	ldr	r3, [pc, #28]	; (66c4 <SdioCard::erase(unsigned long, unsigned long)+0xc8>)
    66a8:	movs	r2, #41	; 0x29
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
    66aa:	movs	r4, #0
  m_errorCode = code;
    66ac:	strb	r2, [r3, #0]
  m_errorLine = line;
    66ae:	movw	r2, #830	; 0x33e
    66b2:	ldr	r3, [pc, #20]	; (66c8 <SdioCard::erase(unsigned long, unsigned long)+0xcc>)
    66b4:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
    66b6:	b.n	6640 <SdioCard::erase(unsigned long, unsigned long)+0x44>
    66b8:	.word	0x2000719f
    66bc:	.word	0x20007186
    66c0:	.word	0x201a0000
    66c4:	.word	0x2000219c
    66c8:	.word	0x20006490
    66cc:	.word	0x211a0000
    66d0:	.word	0x261b0000
    66d4:	.word	0x000065e9

000066d8 <readReg16(unsigned long, void*)>:
  if (!cardCommand(xfertyp, m_rca)) {
    66d8:	ldr	r3, [pc, #76]	; (6728 <readReg16(unsigned long, void*)+0x50>)
static bool readReg16(uint32_t xfertyp, void* data) {
    66da:	push	{r4, r5, lr}
    66dc:	mov	r4, r1
    66de:	sub	sp, #20
  if (!cardCommand(xfertyp, m_rca)) {
    66e0:	ldr	r1, [r3, #0]
    66e2:	bl	6560 <cardCommand(unsigned long, unsigned long)>
    66e6:	cbz	r0, 6724 <readReg16(unsigned long, void*)+0x4c>
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
    66e8:	ldr	r3, [pc, #64]	; (672c <readReg16(unsigned long, void*)+0x54>)
    66ea:	add.w	r5, r4, #15
    66ee:	ldr	r2, [r3, #16]
    66f0:	str	r2, [sp, #0]
    66f2:	ldr	r2, [r3, #20]
    66f4:	str	r2, [sp, #4]
    66f6:	ldr	r2, [r3, #24]
    66f8:	str	r2, [sp, #8]
    66fa:	ldr	r3, [r3, #28]
    66fc:	str	r3, [sp, #12]
  for (int i = 0; i < 15; i++) {
    66fe:	movs	r3, #0
    d[14 - i] = sr[i / 4] >> 8 * (i % 4);
    6700:	bic.w	r2, r3, #3
    6704:	and.w	r1, r3, #3
  for (int i = 0; i < 15; i++) {
    6708:	adds	r3, #1
    d[14 - i] = sr[i / 4] >> 8 * (i % 4);
    670a:	adds	r2, #16
    670c:	lsls	r1, r1, #3
  for (int i = 0; i < 15; i++) {
    670e:	cmp	r3, #15
    d[14 - i] = sr[i / 4] >> 8 * (i % 4);
    6710:	add	r2, sp
    6712:	ldr.w	r2, [r2, #-16]
    6716:	lsr.w	r2, r2, r1
    671a:	strb.w	r2, [r5, #-1]!
  for (int i = 0; i < 15; i++) {
    671e:	bne.n	6700 <readReg16(unsigned long, void*)+0x28>
  d[15] = 0;
    6720:	movs	r3, #0
    6722:	strb	r3, [r4, #15]
}
    6724:	add	sp, #20
    6726:	pop	{r4, r5, pc}
    6728:	.word	0x2000689c
    672c:	.word	0x402c0000

00006730 <cardAcmd(unsigned long, unsigned long, unsigned long)>:
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
    6730:	push	{r3, r4, r5, lr}
    6732:	mov	r4, r1
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    6734:	mov	r1, r0
    6736:	ldr	r0, [pc, #24]	; (6750 <cardAcmd(unsigned long, unsigned long, unsigned long)+0x20>)
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
    6738:	mov	r5, r2
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    673a:	bl	6560 <cardCommand(unsigned long, unsigned long)>
    673e:	cbz	r0, 674c <cardAcmd(unsigned long, unsigned long, unsigned long)+0x1c>
    6740:	mov	r1, r5
    6742:	mov	r0, r4
}
    6744:	ldmia.w	sp!, {r3, r4, r5, lr}
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    6748:	b.w	6560 <cardCommand(unsigned long, unsigned long)>
}
    674c:	pop	{r3, r4, r5, pc}
    674e:	nop
    6750:	.word	0x371a0000

00006754 <waitDmaStatus()>:
static bool waitDmaStatus() {
    6754:	push	{r3, lr}
  if (yieldTimeout(isBusyDMA)) {
    6756:	ldr	r0, [pc, #32]	; (6778 <waitDmaStatus()+0x24>)
    6758:	bl	64c8 <yieldTimeout(bool (*)())>
    675c:	cbnz	r0, 6774 <waitDmaStatus()+0x20>
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    675e:	ldr	r3, [pc, #28]	; (677c <waitDmaStatus()+0x28>)
    6760:	ldr	r2, [r3, #0]
    6762:	lsls	r2, r2, #30
    6764:	bpl.n	6772 <waitDmaStatus()+0x1e>
    6766:	ldr	r2, [r3, #0]
    6768:	ldr	r3, [pc, #20]	; (6780 <waitDmaStatus()+0x2c>)
    676a:	tst	r2, r3
    676c:	ite	eq
    676e:	moveq	r0, #1
    6770:	movne	r0, #0
}
    6772:	pop	{r3, pc}
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    6774:	movs	r0, #0
    6776:	b.n	6772 <waitDmaStatus()+0x1e>
    6778:	.word	0x00006321
    677c:	.word	0x200068a8
    6780:	.word	0x117f0000

00006784 <SdioCard::isBusy()>:
  bool useDma() { return m_options & DMA_SDIO; }
    6784:	ldrb	r3, [r0, #8]
  if (m_sdioConfig.useDma()) {
    6786:	lsls	r3, r3, #31
    6788:	bpl.n	679c <SdioCard::isBusy()+0x18>
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    678a:	ldr	r3, [pc, #40]	; (67b4 <SdioCard::isBusy()+0x30>)
    678c:	ldr	r3, [r3, #0]
    678e:	cbz	r3, 6792 <SdioCard::isBusy()+0xe>
    6790:	bx	r3
    6792:	ldr	r3, [pc, #36]	; (67b8 <SdioCard::isBusy()+0x34>)
    6794:	ldrb	r0, [r3, #0]
    6796:	cbz	r0, 67b2 <SdioCard::isBusy()+0x2e>
    6798:	b.w	65e8 <isBusyCMD13()>
    if (m_transferActive) {
    679c:	ldr	r3, [pc, #28]	; (67bc <SdioCard::isBusy()+0x38>)
    679e:	ldrb	r3, [r3, #0]
    67a0:	cbz	r3, 67a6 <SdioCard::isBusy()+0x22>
      if (isBusyTransferComplete()) {
    67a2:	b.w	6354 <isBusyTransferComplete()>
    return SDHC_PRSSTAT & (1 << 24) ? false : true;
    67a6:	ldr	r3, [pc, #24]	; (67c0 <SdioCard::isBusy()+0x3c>)
    67a8:	ldr	r0, [r3, #36]	; 0x24
    67aa:	eor.w	r0, r0, #16777216	; 0x1000000
    67ae:	ubfx	r0, r0, #24, #1
}
    67b2:	bx	lr
    67b4:	.word	0x200068a4
    67b8:	.word	0x20007184
    67bc:	.word	0x20007187
    67c0:	.word	0x402c0000

000067c4 <SdioCard::cardCMD6(unsigned long, unsigned char*)>:
bool SdioCard::cardCMD6(uint32_t arg, uint8_t* status) {
    67c4:	push	{r0, r1, r4, lr}
  if (waitTimeout(isBusyCMD13)) {
    67c6:	ldr	r0, [pc, #100]	; (682c <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x68>)
bool SdioCard::cardCMD6(uint32_t arg, uint8_t* status) {
    67c8:	mov	r4, r2
    67ca:	str	r1, [sp, #4]
  if (waitTimeout(isBusyCMD13)) {
    67cc:	bl	64a4 <waitTimeout(bool (*)())>
    67d0:	ldr	r1, [sp, #4]
    67d2:	cbz	r0, 67e8 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x24>
  m_errorCode = code;
    67d4:	ldr	r3, [pc, #88]	; (6830 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x6c>)
    67d6:	movs	r2, #10
    return sdError(SD_CARD_ERROR_CMD13);
    67d8:	movs	r0, #0
  m_errorCode = code;
    67da:	strb	r2, [r3, #0]
  m_errorLine = line;
    67dc:	mov.w	r2, #788	; 0x314
    67e0:	ldr	r3, [pc, #80]	; (6834 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x70>)
    67e2:	str	r2, [r3, #0]
}
    67e4:	add	sp, #8
    67e6:	pop	{r4, pc}
  m_dmaBusy = true;
    67e8:	ldr	r3, [pc, #76]	; (6838 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x74>)
    67ea:	movs	r2, #1
    67ec:	strb	r2, [r3, #0]
  m_irqstat = 0;
    67ee:	ldr	r3, [pc, #76]	; (683c <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x78>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    67f0:	ldr	r2, [pc, #76]	; (6840 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x7c>)
  m_irqstat = 0;
    67f2:	str	r0, [r3, #0]
  SDHC_DSADDR = (uint32_t)status;
    67f4:	ldr	r3, [pc, #76]	; (6844 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x80>)
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    67f6:	ldr	r0, [pc, #80]	; (6848 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x84>)
  SDHC_DSADDR = (uint32_t)status;
    67f8:	str	r4, [r3, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    67fa:	str	r2, [r3, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    67fc:	ldr	r2, [pc, #76]	; (684c <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x88>)
    67fe:	str	r2, [r3, #56]	; 0x38
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    6800:	bl	6560 <cardCommand(unsigned long, unsigned long)>
    6804:	cbnz	r0, 6816 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x52>
  m_errorCode = code;
    6806:	ldr	r3, [pc, #40]	; (6830 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x6c>)
    6808:	movs	r2, #4
    680a:	strb	r2, [r3, #0]
  m_errorLine = line;
    680c:	movw	r2, #795	; 0x31b
    6810:	ldr	r3, [pc, #32]	; (6834 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x70>)
    6812:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_DMA);
    6814:	b.n	67e4 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x20>
  if (!waitDmaStatus()) {
    6816:	bl	6754 <waitDmaStatus()>
    681a:	cmp	r0, #0
    681c:	bne.n	67e4 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x20>
  m_errorCode = code;
    681e:	ldr	r3, [pc, #16]	; (6830 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x6c>)
    6820:	movs	r2, #38	; 0x26
    6822:	strb	r2, [r3, #0]
  m_errorLine = line;
    6824:	movw	r2, #798	; 0x31e
    6828:	ldr	r3, [pc, #8]	; (6834 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x70>)
    682a:	b.n	6812 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x4e>
    682c:	.word	0x000065e9
    6830:	.word	0x2000219c
    6834:	.word	0x20006490
    6838:	.word	0x200071f8
    683c:	.word	0x200068a8
    6840:	.word	0x00010040
    6844:	.word	0x402c0000
    6848:	.word	0x063a0011
    684c:	.word	0x117f0002

00006850 <waitTransferComplete()>:
static bool waitTransferComplete() {
    6850:	push	{r4, lr}
  if (!m_transferActive) {
    6852:	ldr	r4, [pc, #60]	; (6890 <waitTransferComplete()+0x40>)
    6854:	ldrb	r3, [r4, #0]
    6856:	cbnz	r3, 685c <waitTransferComplete()+0xc>
    return true;
    6858:	movs	r0, #1
}
    685a:	pop	{r4, pc}
  bool timeOut = waitTimeout(isBusyTransferComplete);
    685c:	ldr	r0, [pc, #52]	; (6894 <waitTransferComplete()+0x44>)
    685e:	bl	64a4 <waitTimeout(bool (*)())>
  m_transferActive = false;
    6862:	movs	r3, #0
  m_irqstat = SDHC_IRQSTAT;
    6864:	ldr	r2, [pc, #48]	; (6898 <waitTransferComplete()+0x48>)
  m_transferActive = false;
    6866:	strb	r3, [r4, #0]
  m_irqstat = SDHC_IRQSTAT;
    6868:	ldr	r1, [r2, #48]	; 0x30
    686a:	ldr	r3, [pc, #48]	; (689c <waitTransferComplete()+0x4c>)
    686c:	str	r1, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    686e:	ldr	r1, [r3, #0]
    6870:	str	r1, [r2, #48]	; 0x30
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    6872:	cbnz	r0, 687c <waitTransferComplete()+0x2c>
    6874:	ldr	r2, [r3, #0]
    6876:	ldr	r3, [pc, #40]	; (68a0 <waitTransferComplete()+0x50>)
    6878:	tst	r2, r3
    687a:	beq.n	6858 <waitTransferComplete()+0x8>
  m_errorCode = code;
    687c:	ldr	r3, [pc, #36]	; (68a4 <waitTransferComplete()+0x54>)
    687e:	movs	r2, #32
    return sdError(SD_CARD_ERROR_TRANSFER_COMPLETE);
    6880:	movs	r0, #0
  m_errorCode = code;
    6882:	strb	r2, [r3, #0]
  m_errorLine = line;
    6884:	movw	r2, #682	; 0x2aa
    6888:	ldr	r3, [pc, #28]	; (68a8 <waitTransferComplete()+0x58>)
    688a:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_TRANSFER_COMPLETE);
    688c:	b.n	685a <waitTransferComplete()+0xa>
    688e:	nop
    6890:	.word	0x20007187
    6894:	.word	0x00006355
    6898:	.word	0x402c0000
    689c:	.word	0x200068a8
    68a0:	.word	0x117f0000
    68a4:	.word	0x2000219c
    68a8:	.word	0x20006490

000068ac <SdioCard::readStop()>:
bool SdioCard::readStop() { return transferStop(); }
    68ac:	push	{r3, r4, r5, lr}
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    68ae:	ldr	r4, [pc, #92]	; (690c <SdioCard::readStop()+0x60>)
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    68b0:	movs	r1, #0
    68b2:	ldr	r0, [pc, #92]	; (6910 <SdioCard::readStop()+0x64>)
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    68b4:	ldr	r3, [r4, #40]	; 0x28
    68b6:	bic.w	r3, r3, #65536	; 0x10000
    68ba:	str	r3, [r4, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    68bc:	bl	6560 <cardCommand(unsigned long, unsigned long)>
    68c0:	mov	r5, r0
    68c2:	cbnz	r0, 68d6 <SdioCard::readStop()+0x2a>
  m_errorCode = code;
    68c4:	ldr	r3, [pc, #76]	; (6914 <SdioCard::readStop()+0x68>)
    68c6:	movs	r2, #9
    68c8:	strb	r2, [r3, #0]
  m_errorLine = line;
    68ca:	movw	r2, #621	; 0x26d
    68ce:	ldr	r3, [pc, #72]	; (6918 <SdioCard::readStop()+0x6c>)
    68d0:	str	r2, [r3, #0]
bool SdioCard::readStop() { return transferStop(); }
    68d2:	mov	r0, r5
    68d4:	pop	{r3, r4, r5, pc}
  if (yieldTimeout(isBusyDat)) {
    68d6:	ldr	r0, [pc, #68]	; (691c <SdioCard::readStop()+0x70>)
    68d8:	bl	64c8 <yieldTimeout(bool (*)())>
    68dc:	cbz	r0, 68f0 <SdioCard::readStop()+0x44>
  m_errorCode = code;
    68de:	ldr	r3, [pc, #52]	; (6914 <SdioCard::readStop()+0x68>)
    68e0:	movs	r2, #10
    return sdError(SD_CARD_ERROR_CMD13);
    68e2:	movs	r5, #0
  m_errorCode = code;
    68e4:	strb	r2, [r3, #0]
  m_errorLine = line;
    68e6:	mov.w	r2, #624	; 0x270
    68ea:	ldr	r3, [pc, #44]	; (6918 <SdioCard::readStop()+0x6c>)
    68ec:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD13);
    68ee:	b.n	68d2 <SdioCard::readStop()+0x26>
  if (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB) {
    68f0:	ldr	r3, [r4, #36]	; 0x24
    68f2:	lsls	r3, r3, #30
    68f4:	bpl.n	68d2 <SdioCard::readStop()+0x26>
    uint32_t irqsststen = SDHC_IRQSTATEN;
    68f6:	ldr	r1, [r4, #52]	; 0x34
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    68f8:	ldr	r3, [r4, #40]	; 0x28
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    68fa:	ldr	r2, [r4, #44]	; 0x2c
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    68fc:	bic.w	r3, r3, #65536	; 0x10000
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    6900:	orr.w	r2, r2, #67108864	; 0x4000000
    6904:	str	r2, [r4, #44]	; 0x2c
    SDHC_IRQSTATEN = irqsststen;
    6906:	str	r1, [r4, #52]	; 0x34
    SDHC_PROCTL = proctl;
    6908:	str	r3, [r4, #40]	; 0x28
    690a:	b.n	68d2 <SdioCard::readStop()+0x26>
    690c:	.word	0x402c0000
    6910:	.word	0x0cdb0000
    6914:	.word	0x2000219c
    6918:	.word	0x20006490
    691c:	.word	0x0000630d

00006920 <SdioCard::writeData(unsigned char const*)>:
//------------------------------------------------------------------------------
bool SdioCard::writeData(const uint8_t* src) {
    6920:	push	{r4, r5, r6, lr}
    6922:	mov	r4, r1
  DBG_IRQSTAT();
  if (!waitTransferComplete()) {
    6924:	bl	6850 <waitTransferComplete()>
    6928:	mov	r5, r0
    692a:	cbz	r0, 6964 <SdioCard::writeData(unsigned char const*)+0x44>
    return false;
  }
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    692c:	ldr	r3, [pc, #100]	; (6994 <SdioCard::writeData(unsigned char const*)+0x74>)
    692e:	ldr	r2, [r3, #36]	; 0x24
    6930:	lsls	r2, r2, #23
    6932:	bmi.n	6944 <SdioCard::writeData(unsigned char const*)+0x24>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    6934:	ldr	r2, [r3, #40]	; 0x28
    6936:	bic.w	r2, r2, #65536	; 0x10000
    693a:	str	r2, [r3, #40]	; 0x28
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    693c:	ldr	r2, [r3, #40]	; 0x28
    693e:	orr.w	r2, r2, #131072	; 0x20000
    6942:	str	r2, [r3, #40]	; 0x28
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    6944:	ldr	r2, [r3, #40]	; 0x28
  if (waitTimeout(isBusyFifoWrite)) {
    6946:	ldr	r0, [pc, #80]	; (6998 <SdioCard::writeData(unsigned char const*)+0x78>)
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    6948:	orr.w	r2, r2, #65536	; 0x10000
    694c:	str	r2, [r3, #40]	; 0x28
  if (waitTimeout(isBusyFifoWrite)) {
    694e:	bl	64a4 <waitTimeout(bool (*)())>
    6952:	cbz	r0, 6968 <SdioCard::writeData(unsigned char const*)+0x48>
  m_errorCode = code;
    6954:	ldr	r3, [pc, #68]	; (699c <SdioCard::writeData(unsigned char const*)+0x7c>)
    6956:	movs	r2, #34	; 0x22
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
    6958:	movs	r5, #0
  m_errorCode = code;
    695a:	strb	r2, [r3, #0]
  m_errorLine = line;
    695c:	movw	r2, #1055	; 0x41f
    6960:	ldr	r3, [pc, #60]	; (69a0 <SdioCard::writeData(unsigned char const*)+0x80>)
    6962:	str	r2, [r3, #0]
    }
    p32 += FIFO_WML;
  }
  m_transferActive = true;
  return true;
}
    6964:	mov	r0, r5
    6966:	pop	{r4, r5, r6, pc}
    6968:	add.w	r1, r4, #512	; 0x200
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    696c:	ldr	r2, [pc, #36]	; (6994 <SdioCard::writeData(unsigned char const*)+0x74>)
    696e:	ldr	r3, [r2, #36]	; 0x24
    6970:	lsls	r3, r3, #21
    6972:	bpl.n	696e <SdioCard::writeData(unsigned char const*)+0x4e>
    6974:	subs	r3, r4, #4
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    6976:	add.w	r0, r4, #60	; 0x3c
      SDHC_DATPORT = p32[i];
    697a:	ldr.w	r6, [r3, #4]!
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    697e:	cmp	r3, r0
      SDHC_DATPORT = p32[i];
    6980:	str	r6, [r2, #32]
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    6982:	bne.n	697a <SdioCard::writeData(unsigned char const*)+0x5a>
    p32 += FIFO_WML;
    6984:	adds	r4, #64	; 0x40
  for (uint32_t iw = 0; iw < 512 / (4 * FIFO_WML); iw++) {
    6986:	cmp	r4, r1
    6988:	bne.n	696e <SdioCard::writeData(unsigned char const*)+0x4e>
  m_transferActive = true;
    698a:	ldr	r3, [pc, #24]	; (69a4 <SdioCard::writeData(unsigned char const*)+0x84>)
    698c:	movs	r2, #1
    698e:	strb	r2, [r3, #0]
  return true;
    6990:	b.n	6964 <SdioCard::writeData(unsigned char const*)+0x44>
    6992:	nop
    6994:	.word	0x402c0000
    6998:	.word	0x00006341
    699c:	.word	0x2000219c
    69a0:	.word	0x20006490
    69a4:	.word	0x20007187

000069a8 <SdioCard::writeStart(unsigned long)>:
    }
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
    69a8:	push	{r4, lr}
  if (yieldTimeout(isBusyCMD13)) {
    69aa:	ldr	r0, [pc, #80]	; (69fc <SdioCard::writeStart(unsigned long)+0x54>)
bool SdioCard::writeStart(uint32_t sector) {
    69ac:	mov	r4, r1
  if (yieldTimeout(isBusyCMD13)) {
    69ae:	bl	64c8 <yieldTimeout(bool (*)())>
    69b2:	cbz	r0, 69c6 <SdioCard::writeStart(unsigned long)+0x1e>
  m_errorCode = code;
    69b4:	ldr	r3, [pc, #72]	; (6a00 <SdioCard::writeStart(unsigned long)+0x58>)
    69b6:	movs	r2, #10
    return sdError(SD_CARD_ERROR_CMD13);
    69b8:	movs	r0, #0
  m_errorCode = code;
    69ba:	strb	r2, [r3, #0]
  m_errorLine = line;
    69bc:	movw	r2, #1138	; 0x472
    69c0:	ldr	r3, [pc, #64]	; (6a04 <SdioCard::writeStart(unsigned long)+0x5c>)
    69c2:	str	r2, [r3, #0]
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512 * sector)) {
    return sdError(SD_CARD_ERROR_CMD25);
  }
  return true;
}
    69c4:	pop	{r4, pc}
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    69c6:	ldr	r3, [pc, #64]	; (6a08 <SdioCard::writeStart(unsigned long)+0x60>)
    69c8:	ldr	r2, [r3, #40]	; 0x28
    69ca:	bic.w	r2, r2, #65536	; 0x10000
    69ce:	str	r2, [r3, #40]	; 0x28
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    69d0:	mov.w	r2, #512	; 0x200
    69d4:	str	r2, [r3, #4]
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512 * sector)) {
    69d6:	ldr	r3, [pc, #52]	; (6a0c <SdioCard::writeStart(unsigned long)+0x64>)
    69d8:	ldrb	r3, [r3, #0]
    69da:	cbnz	r3, 69de <SdioCard::writeStart(unsigned long)+0x36>
    69dc:	lsls	r4, r4, #9
    69de:	mov	r1, r4
    69e0:	ldr	r0, [pc, #44]	; (6a10 <SdioCard::writeStart(unsigned long)+0x68>)
    69e2:	bl	6560 <cardCommand(unsigned long, unsigned long)>
    69e6:	cmp	r0, #0
    69e8:	bne.n	69c4 <SdioCard::writeStart(unsigned long)+0x1c>
  m_errorCode = code;
    69ea:	ldr	r3, [pc, #20]	; (6a00 <SdioCard::writeStart(unsigned long)+0x58>)
    69ec:	movs	r2, #14
    69ee:	strb	r2, [r3, #0]
  m_errorLine = line;
    69f0:	movw	r2, #1150	; 0x47e
    69f4:	ldr	r3, [pc, #12]	; (6a04 <SdioCard::writeStart(unsigned long)+0x5c>)
    69f6:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD25);
    69f8:	b.n	69c4 <SdioCard::writeStart(unsigned long)+0x1c>
    69fa:	nop
    69fc:	.word	0x000065e9
    6a00:	.word	0x2000219c
    6a04:	.word	0x20006490
    6a08:	.word	0x402c0000
    6a0c:	.word	0x20007186
    6a10:	.word	0x193a0020

00006a14 <SdioCard::sectorCount()>:
    uint8_t ver = csd[0] >> 6;
    6a14:	ldr	r2, [pc, #84]	; (6a6c <SdioCard::sectorCount()+0x58>)
    6a16:	ldrb	r3, [r2, #0]
    if (ver == 0) {
    6a18:	lsrs	r3, r3, #6
    6a1a:	bne.n	6a4e <SdioCard::sectorCount()+0x3a>
      c_size = (uint32_t)(csd[6] & 3) << 10;
    6a1c:	ldrb	r3, [r2, #6]
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
    6a1e:	ldrb	r0, [r2, #8]
    6a20:	ldrb	r1, [r2, #7]
      c_size = (uint32_t)(csd[6] & 3) << 10;
    6a22:	lsls	r3, r3, #10
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
    6a24:	lsrs	r0, r0, #6
      c_size = (uint32_t)(csd[6] & 3) << 10;
    6a26:	and.w	r3, r3, #3072	; 0xc00
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
    6a2a:	orr.w	r0, r0, r1, lsl #2
      uint8_t c_size_mult = (csd[9] & 3) << 1 | csd[10] >> 7;
    6a2e:	ldrb	r1, [r2, #10]
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
    6a30:	orrs	r0, r3
      uint8_t c_size_mult = (csd[9] & 3) << 1 | csd[10] >> 7;
    6a32:	ldrb	r3, [r2, #9]
      uint8_t read_bl_len = csd[5] & 15;
    6a34:	ldrb	r2, [r2, #5]
      uint8_t c_size_mult = (csd[9] & 3) << 1 | csd[10] >> 7;
    6a36:	lsls	r3, r3, #1
      return (c_size + 1) << (c_size_mult + read_bl_len + 2 - 9);
    6a38:	adds	r0, #1
    6a3a:	and.w	r2, r2, #15
      uint8_t c_size_mult = (csd[9] & 3) << 1 | csd[10] >> 7;
    6a3e:	and.w	r3, r3, #6
      return (c_size + 1) << (c_size_mult + read_bl_len + 2 - 9);
    6a42:	orr.w	r3, r3, r1, lsr #7
    6a46:	add	r3, r2
    6a48:	subs	r3, #7
    6a4a:	lsls	r0, r3
    6a4c:	bx	lr
    } else if (ver == 1) {
    6a4e:	cmp	r3, #1
    6a50:	bne.n	6a68 <SdioCard::sectorCount()+0x54>
      c_size = (uint32_t)(csd[7] & 63) << 16;
    6a52:	ldrb	r3, [r2, #7]
      c_size |= csd[9];
    6a54:	ldrh	r0, [r2, #8]
      c_size = (uint32_t)(csd[7] & 63) << 16;
    6a56:	lsls	r3, r3, #16
      c_size |= csd[9];
    6a58:	rev16	r0, r0
      c_size = (uint32_t)(csd[7] & 63) << 16;
    6a5a:	and.w	r3, r3, #4128768	; 0x3f0000
      c_size |= csd[9];
    6a5e:	uxth	r0, r0
    6a60:	orrs	r0, r3
      return (c_size + 1) << 10;
    6a62:	adds	r0, #1
    6a64:	lsls	r0, r0, #10
    6a66:	bx	lr
      return 0;
    6a68:	movs	r0, #0
uint32_t SdioCard::sectorCount() { return m_csd.capacity(); }
    6a6a:	bx	lr
    6a6c:	.word	0x2000719f

00006a70 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>:
                        size_t n) {
    6a70:	push	{r3, r4, r5, r6, r7, lr}
    6a72:	mov	r5, r3
  if ((3 & (uint32_t)buf) || n == 0) {
    6a74:	lsls	r3, r2, #30
                        size_t n) {
    6a76:	mov	r7, r0
    6a78:	mov	r4, r1
    6a7a:	mov	r6, r2
  if ((3 & (uint32_t)buf) || n == 0) {
    6a7c:	bne.n	6a80 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x10>
    6a7e:	cbnz	r5, 6a92 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x22>
  m_errorCode = code;
    6a80:	ldr	r3, [pc, #96]	; (6ae4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x74>)
    6a82:	movs	r2, #38	; 0x26
    6a84:	strb	r2, [r3, #0]
  m_errorLine = line;
    6a86:	movw	r2, #547	; 0x223
    6a8a:	ldr	r3, [pc, #92]	; (6ae8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x78>)
    6a8c:	str	r2, [r3, #0]
}
    6a8e:	movs	r0, #0
    6a90:	pop	{r3, r4, r5, r6, r7, pc}
  if (yieldTimeout(isBusyCMD13)) {
    6a92:	ldr	r0, [pc, #88]	; (6aec <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x7c>)
    6a94:	bl	64c8 <yieldTimeout(bool (*)())>
    6a98:	cbz	r0, 6aa8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x38>
  m_errorCode = code;
    6a9a:	ldr	r3, [pc, #72]	; (6ae4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x74>)
    6a9c:	movs	r2, #10
    6a9e:	strb	r2, [r3, #0]
  m_errorLine = line;
    6aa0:	movw	r2, #550	; 0x226
    6aa4:	ldr	r3, [pc, #64]	; (6ae8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x78>)
    6aa6:	b.n	6a8c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x1c>
  m_dmaBusy = true;
    6aa8:	ldr	r3, [pc, #68]	; (6af0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x80>)
    6aaa:	movs	r2, #1
  SDHC_DSADDR = (uint32_t)buf;
    6aac:	ldr	r1, [pc, #68]	; (6af4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x84>)
  m_dmaBusy = true;
    6aae:	strb	r2, [r3, #0]
  m_irqstat = 0;
    6ab0:	ldr	r3, [pc, #68]	; (6af8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x88>)
    6ab2:	str	r0, [r3, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    6ab4:	ldr	r3, [pc, #68]	; (6afc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x8c>)
  SDHC_DSADDR = (uint32_t)buf;
    6ab6:	str	r6, [r1, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    6ab8:	and.w	r3, r3, r5, lsl #16
    6abc:	orr.w	r3, r3, #512	; 0x200
    6ac0:	str	r3, [r1, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    6ac2:	ldr	r3, [pc, #60]	; (6b00 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x90>)
    6ac4:	str	r3, [r1, #56]	; 0x38
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512 * sector)) {
    6ac6:	ldr	r3, [pc, #60]	; (6b04 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x94>)
    6ac8:	ldrb	r3, [r3, #0]
    6aca:	cbnz	r3, 6ace <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x5e>
    6acc:	lsls	r4, r4, #9
    6ace:	mov	r1, r4
    6ad0:	mov	r0, r7
    6ad2:	bl	6560 <cardCommand(unsigned long, unsigned long)>
    6ad6:	cmp	r0, #0
    6ad8:	beq.n	6a8e <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x1e>
}
    6ada:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return waitDmaStatus();
    6ade:	b.w	6754 <waitDmaStatus()>
    6ae2:	nop
    6ae4:	.word	0x2000219c
    6ae8:	.word	0x20006490
    6aec:	.word	0x000065e9
    6af0:	.word	0x200071f8
    6af4:	.word	0x402c0000
    6af8:	.word	0x200068a8
    6afc:	.word	0x1fff0000
    6b00:	.word	0x117f0002
    6b04:	.word	0x20007186

00006b08 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    6b08:	push	{r3, r4, r5, r6, r7, lr}
    6b0a:	mov	r7, r0
    6b0c:	ldrb	r0, [r0, #8]
    6b0e:	mov	r4, r1
    6b10:	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    6b12:	lsls	r0, r0, #31
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    6b14:	mov	r6, r3
  if (m_sdioConfig.useDma()) {
    6b16:	bmi.n	6b36 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2e>
    6b18:	add	r6, r1
    for (size_t i = 0; i < n; i++) {
    6b1a:	cmp	r4, r6
    6b1c:	beq.n	6b40 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x38>
      if (!readSector(sector + i, dst + i * 512UL)) {
    6b1e:	ldr	r3, [r7, #0]
    6b20:	mov	r2, r5
    6b22:	mov	r1, r4
    6b24:	mov	r0, r7
    6b26:	ldr	r3, [r3, #16]
    6b28:	adds	r4, #1
    6b2a:	add.w	r5, r5, #512	; 0x200
    6b2e:	blx	r3
    6b30:	cmp	r0, #0
    6b32:	bne.n	6b1a <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x12>
    6b34:	b.n	6b52 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x4a>
    if ((uint32_t)dst & 3) {
    6b36:	lsls	r0, r2, #30
    6b38:	beq.n	6b5e <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x56>
    6b3a:	add	r6, r1
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    6b3c:	cmp	r4, r6
    6b3e:	bne.n	6b44 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x3c>
      return true;
    6b40:	movs	r0, #1
    6b42:	b.n	6b54 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x4c>
        if (!readSector(sector, dst)) {
    6b44:	ldr	r3, [r7, #0]
    6b46:	mov	r2, r5
    6b48:	mov	r1, r4
    6b4a:	mov	r0, r7
    6b4c:	ldr	r3, [r3, #16]
    6b4e:	blx	r3
    6b50:	cbnz	r0, 6b56 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x4e>
          return false;  // readSector will set errorCode.
    6b52:	movs	r0, #0
}
    6b54:	pop	{r3, r4, r5, r6, r7, pc}
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    6b56:	adds	r4, #1
    6b58:	add.w	r5, r5, #512	; 0x200
    6b5c:	b.n	6b3c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    if (!rdWrSectors(CMD18_DMA_XFERTYP, sector, dst, n)) {
    6b5e:	ldr	r0, [pc, #24]	; (6b78 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x70>)
    6b60:	bl	6a70 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    6b64:	cmp	r0, #0
    6b66:	bne.n	6b40 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x38>
  m_errorCode = code;
    6b68:	ldr	r3, [pc, #16]	; (6b7c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x74>)
    6b6a:	movs	r2, #12
    6b6c:	strb	r2, [r3, #0]
  m_errorLine = line;
    6b6e:	movw	r2, #974	; 0x3ce
    6b72:	ldr	r3, [pc, #12]	; (6b80 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x78>)
    6b74:	str	r2, [r3, #0]
      return sdError(SD_CARD_ERROR_CMD18);
    6b76:	b.n	6b54 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x4c>
    6b78:	.word	0x123a0037
    6b7c:	.word	0x2000219c
    6b80:	.word	0x20006490

00006b84 <SdioCard::writeSector(unsigned long, unsigned char const*)>:
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    6b84:	push	{r4, r5, r6, r7, lr}
    6b86:	ldrb	r5, [r0, #8]
    6b88:	sub.w	sp, sp, #516	; 0x204
    6b8c:	mov	r4, r0
    6b8e:	mov	r7, r1
  if (m_sdioConfig.useDma()) {
    6b90:	ands.w	r5, r5, #1
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    6b94:	mov	r6, r2
  if (m_sdioConfig.useDma()) {
    6b96:	beq.n	6bd0 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x4c>
    if (3 & (uint32_t)src) {
    6b98:	lsls	r3, r2, #30
    6b9a:	beq.n	6baa <SdioCard::writeSector(unsigned long, unsigned char const*)+0x26>
      memcpy(aligned, src, 512);
    6b9c:	mov	r1, r6
      ptr = aligned;
    6b9e:	mov	r6, sp
      memcpy(aligned, src, 512);
    6ba0:	mov.w	r2, #512	; 0x200
    6ba4:	mov	r0, sp
    6ba6:	bl	756c <memcpy>
    if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
    6baa:	movs	r3, #1
    6bac:	mov	r2, r6
    6bae:	mov	r1, r7
    6bb0:	ldr	r0, [pc, #104]	; (6c1c <SdioCard::writeSector(unsigned long, unsigned char const*)+0x98>)
    6bb2:	bl	6a70 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    6bb6:	mov	r5, r0
    6bb8:	cbnz	r0, 6bc8 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
  m_errorCode = code;
    6bba:	ldr	r3, [pc, #100]	; (6c20 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x9c>)
    6bbc:	movs	r2, #13
    6bbe:	strb	r2, [r3, #0]
  m_errorLine = line;
    6bc0:	mov.w	r2, #1080	; 0x438
    6bc4:	ldr	r3, [pc, #92]	; (6c24 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xa0>)
    6bc6:	str	r2, [r3, #0]
}
    6bc8:	mov	r0, r5
    6bca:	add.w	sp, sp, #516	; 0x204
    6bce:	pop	{r4, r5, r6, r7, pc}
    if (!waitTransferComplete()) {
    6bd0:	bl	6850 <waitTransferComplete()>
    6bd4:	cmp	r0, #0
    6bd6:	beq.n	6bc8 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    6bd8:	ldrb	r3, [r4, #9]
    6bda:	cmp	r3, #2
    6bdc:	bne.n	6be4 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x60>
    6bde:	ldr	r3, [r4, #4]
    6be0:	cmp	r3, r7
    6be2:	beq.n	6c04 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x80>
      if (!syncDevice()) {
    6be4:	ldr	r3, [r4, #0]
    6be6:	mov	r0, r4
    6be8:	ldr	r3, [r3, #28]
    6bea:	blx	r3
    6bec:	cmp	r0, #0
    6bee:	beq.n	6bc8 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
      if (!writeStart(sector)) {
    6bf0:	ldr	r3, [r4, #0]
    6bf2:	mov	r1, r7
    6bf4:	mov	r0, r4
    6bf6:	ldr	r3, [r3, #100]	; 0x64
    6bf8:	blx	r3
    6bfa:	cmp	r0, #0
    6bfc:	beq.n	6bc8 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
      m_curState = WRITE_STATE;
    6bfe:	movs	r3, #2
      m_curSector = sector;
    6c00:	str	r7, [r4, #4]
      m_curState = WRITE_STATE;
    6c02:	strb	r3, [r4, #9]
    if (!writeData(src)) {
    6c04:	ldr	r3, [r4, #0]
    6c06:	mov	r1, r6
    6c08:	mov	r0, r4
    6c0a:	ldr	r3, [r3, #96]	; 0x60
    6c0c:	blx	r3
    6c0e:	cmp	r0, #0
    6c10:	beq.n	6bc8 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
    m_curSector++;
    6c12:	ldr	r3, [r4, #4]
  return true;
    6c14:	mov	r5, r0
    m_curSector++;
    6c16:	adds	r3, #1
    6c18:	str	r3, [r4, #4]
    6c1a:	b.n	6bc8 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
    6c1c:	.word	0x183a0001
    6c20:	.word	0x2000219c
    6c24:	.word	0x20006490

00006c28 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    6c28:	push	{r3, r4, r5, r6, r7, lr}
    6c2a:	mov	r7, r0
    6c2c:	ldrb	r0, [r0, #8]
    6c2e:	mov	r4, r1
    6c30:	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    6c32:	lsls	r0, r0, #31
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    6c34:	mov	r6, r3
  if (m_sdioConfig.useDma()) {
    6c36:	bmi.n	6c56 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2e>
    6c38:	add	r6, r1
    for (size_t i = 0; i < n; i++) {
    6c3a:	cmp	r4, r6
    6c3c:	beq.n	6c60 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x38>
      if (!writeSector(sector + i, src + i * 512UL)) {
    6c3e:	ldr	r3, [r7, #0]
    6c40:	mov	r2, r5
    6c42:	mov	r1, r4
    6c44:	mov	r0, r7
    6c46:	ldr	r3, [r3, #32]
    6c48:	adds	r4, #1
    6c4a:	add.w	r5, r5, #512	; 0x200
    6c4e:	blx	r3
    6c50:	cmp	r0, #0
    6c52:	bne.n	6c3a <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x12>
    6c54:	b.n	6c72 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x4a>
    if (3 & (uint32_t)ptr) {
    6c56:	lsls	r0, r2, #30
    6c58:	beq.n	6c7e <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x56>
    6c5a:	add	r6, r1
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    6c5c:	cmp	r4, r6
    6c5e:	bne.n	6c64 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x3c>
      return true;
    6c60:	movs	r0, #1
    6c62:	b.n	6c74 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x4c>
        if (!writeSector(sector, ptr)) {
    6c64:	ldr	r3, [r7, #0]
    6c66:	mov	r2, r5
    6c68:	mov	r1, r4
    6c6a:	mov	r0, r7
    6c6c:	ldr	r3, [r3, #32]
    6c6e:	blx	r3
    6c70:	cbnz	r0, 6c76 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x4e>
          return false;  // writeSector will set errorCode.
    6c72:	movs	r0, #0
}
    6c74:	pop	{r3, r4, r5, r6, r7, pc}
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    6c76:	adds	r4, #1
    6c78:	add.w	r5, r5, #512	; 0x200
    6c7c:	b.n	6c5c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
    6c7e:	ldr	r0, [pc, #24]	; (6c98 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x70>)
    6c80:	bl	6a70 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    6c84:	cmp	r0, #0
    6c86:	bne.n	6c60 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x38>
  m_errorCode = code;
    6c88:	ldr	r3, [pc, #16]	; (6c9c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x74>)
    6c8a:	movs	r2, #14
    6c8c:	strb	r2, [r3, #0]
  m_errorLine = line;
    6c8e:	movw	r2, #1124	; 0x464
    6c92:	ldr	r3, [pc, #12]	; (6ca0 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x78>)
    6c94:	str	r2, [r3, #0]
      return sdError(SD_CARD_ERROR_CMD25);
    6c96:	b.n	6c74 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x4c>
    6c98:	.word	0x193a0027
    6c9c:	.word	0x2000219c
    6ca0:	.word	0x20006490

00006ca4 <SdioCard::begin(SdioConfig)>:
bool SdioCard::begin(SdioConfig sdioConfig) {
    6ca4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  m_curState = IDLE_STATE;
    6ca8:	movs	r3, #0
  m_initDone = false;
    6caa:	ldr	r2, [pc, #728]	; (6f84 <SdioCard::begin(SdioConfig)+0x2e0>)
  m_errorCode = SD_CARD_ERROR_NONE;
    6cac:	ldr	r5, [pc, #728]	; (6f88 <SdioCard::begin(SdioConfig)+0x2e4>)
bool SdioCard::begin(SdioConfig sdioConfig) {
    6cae:	sub	sp, #68	; 0x44
  m_highCapacity = false;
    6cb0:	ldr.w	r8, [pc, #820]	; 6fe8 <SdioCard::begin(SdioConfig)+0x344>
bool SdioCard::begin(SdioConfig sdioConfig) {
    6cb4:	mov	r6, r0
  m_version2 = false;
    6cb6:	ldr	r7, [pc, #724]	; (6f8c <SdioCard::begin(SdioConfig)+0x2e8>)
  m_curState = IDLE_STATE;
    6cb8:	strb	r3, [r0, #9]
  m_errorCode = SD_CARD_ERROR_NONE;
    6cba:	strb	r3, [r5, #0]
  m_initDone = false;
    6cbc:	strb	r3, [r2, #0]
  m_highCapacity = false;
    6cbe:	strb.w	r3, [r8]
  m_version2 = false;
    6cc2:	strb	r3, [r7, #0]
  CCM_ANALOG_PFD_528 |= (1 << 7);
    6cc4:	ldr	r3, [pc, #712]	; (6f90 <SdioCard::begin(SdioConfig)+0x2ec>)
  m_sdioConfig = sdioConfig;
    6cc6:	strb	r1, [r0, #8]
    gpioMux(5);
    6cc8:	movs	r0, #5
  CCM_ANALOG_PFD_528 |= (1 << 7);
    6cca:	ldr.w	r2, [r3, #256]	; 0x100
  SDHC_MIX_CTRL |= 0x80000000;
    6cce:	ldr	r4, [pc, #708]	; (6f94 <SdioCard::begin(SdioConfig)+0x2f0>)
  CCM_ANALOG_PFD_528 |= (1 << 7);
    6cd0:	orr.w	r2, r2, #128	; 0x80
    6cd4:	str.w	r2, [r3, #256]	; 0x100
  CCM_ANALOG_PFD_528 &= ~(0x3F << 0);
    6cd8:	ldr.w	r2, [r3, #256]	; 0x100
    6cdc:	bic.w	r2, r2, #63	; 0x3f
    6ce0:	str.w	r2, [r3, #256]	; 0x100
  CCM_ANALOG_PFD_528 |= ((24) & 0x3F << 0);  // 12 - 35
    6ce4:	ldr.w	r2, [r3, #256]	; 0x100
    6ce8:	orr.w	r2, r2, #24
    6cec:	str.w	r2, [r3, #256]	; 0x100
  CCM_ANALOG_PFD_528 &= ~(1 << 7);
    6cf0:	ldr.w	r2, [r3, #256]	; 0x100
    6cf4:	bic.w	r2, r2, #128	; 0x80
    6cf8:	str.w	r2, [r3, #256]	; 0x100
  CCM_CCGR6 |= CCM_CCGR6_USDHC1(CCM_CCGR_ON);
    6cfc:	add.w	r3, r3, #147456	; 0x24000
    6d00:	ldr.w	r2, [r3, #128]	; 0x80
    6d04:	orr.w	r2, r2, #12
    6d08:	str.w	r2, [r3, #128]	; 0x80
  CCM_CSCDR1 &= ~(CCM_CSCDR1_USDHC1_CLK_PODF_MASK);
    6d0c:	ldr	r2, [r3, #36]	; 0x24
    6d0e:	bic.w	r2, r2, #14336	; 0x3800
    6d12:	str	r2, [r3, #36]	; 0x24
  CCM_CSCMR1 |= CCM_CSCMR1_USDHC1_CLK_SEL;  // PLL2PFD0
    6d14:	ldr	r2, [r3, #28]
    6d16:	orr.w	r2, r2, #65536	; 0x10000
    6d1a:	str	r2, [r3, #28]
  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((1));
    6d1c:	ldr	r2, [r3, #36]	; 0x24
    6d1e:	orr.w	r2, r2, #2048	; 0x800
    6d22:	str	r2, [r3, #36]	; 0x24
    gpioMux(5);
    6d24:	bl	62c4 <gpioMux(unsigned char)>
  SDHC_MIX_CTRL |= 0x80000000;
    6d28:	ldr	r3, [r4, #72]	; 0x48
    6d2a:	orr.w	r3, r3, #2147483648	; 0x80000000
    6d2e:	str	r3, [r4, #72]	; 0x48
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    6d30:	ldr	r3, [r4, #44]	; 0x2c
    6d32:	orr.w	r3, r3, #16777216	; 0x1000000
    6d36:	orr.w	r3, r3, #32768	; 0x8000
    6d3a:	str	r3, [r4, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) {
    6d3c:	ldr	r3, [r4, #44]	; 0x2c
    6d3e:	lsls	r3, r3, #7
    6d40:	bmi.n	6d3c <SdioCard::begin(SdioConfig)+0x98>
  setSdclk(SD_MAX_INIT_RATE_KHZ);
    6d42:	mov.w	r0, #400	; 0x190
    6d46:	bl	636c <setSdclk(unsigned long)>
  if (enable) {
    6d4a:	bl	6514 <enableGPIO(bool) [clone .part.0]>
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    6d4e:	ldr	r3, [pc, #584]	; (6f98 <SdioCard::begin(SdioConfig)+0x2f4>)
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
    6d50:	ldr	r2, [pc, #584]	; (6f9c <SdioCard::begin(SdioConfig)+0x2f8>)
    6d52:	str	r3, [r4, #52]	; 0x34
    6d54:	ldr	r3, [pc, #584]	; (6fa0 <SdioCard::begin(SdioConfig)+0x2fc>)
    6d56:	str.w	r2, [r3, #504]	; 0x1f8
  NVIC_SET_PRIORITY(IRQ_SDHC, 6 * 16);
    6d5a:	ldr	r3, [pc, #584]	; (6fa4 <SdioCard::begin(SdioConfig)+0x300>)
    6d5c:	movs	r2, #96	; 0x60
    6d5e:	strb.w	r2, [r3, #110]	; 0x6e
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    6d62:	mov.w	r3, #3758153728	; 0xe000e000
    6d66:	mov.w	r2, #16384	; 0x4000
    6d6a:	str.w	r2, [r3, #268]	; 0x10c
  SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    6d6e:	ldr	r3, [r4, #44]	; 0x2c
    6d70:	orr.w	r3, r3, #134217728	; 0x8000000
    6d74:	str	r3, [r4, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
    6d76:	ldr	r3, [pc, #540]	; (6f94 <SdioCard::begin(SdioConfig)+0x2f0>)
    6d78:	ldr	r1, [r3, #44]	; 0x2c
    6d7a:	ands.w	r1, r1, #134217728	; 0x8000000
    6d7e:	bne.n	6d78 <SdioCard::begin(SdioConfig)+0xd4>
  if (!cardCommand(CMD0_XFERTYP, 0)) {
    6d80:	mov	r0, r1
    6d82:	bl	6560 <cardCommand(unsigned long, unsigned long)>
    6d86:	mov	r4, r0
    6d88:	cbnz	r0, 6d9e <SdioCard::begin(SdioConfig)+0xfa>
  m_errorCode = code;
    6d8a:	movs	r3, #1
  m_errorLine = line;
    6d8c:	movw	r2, #702	; 0x2be
  m_errorCode = code;
    6d90:	strb	r3, [r5, #0]
  m_errorLine = line;
    6d92:	ldr	r3, [pc, #532]	; (6fa8 <SdioCard::begin(SdioConfig)+0x304>)
    6d94:	str	r2, [r3, #0]
}
    6d96:	mov	r0, r4
    6d98:	add	sp, #68	; 0x44
    6d9a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6d9e:	mov.w	r9, #3
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
    6da2:	ldr.w	sl, [pc, #584]	; 6fec <SdioCard::begin(SdioConfig)+0x348>
    6da6:	ldr	r4, [pc, #492]	; (6f94 <SdioCard::begin(SdioConfig)+0x2f0>)
    6da8:	mov.w	r1, #426	; 0x1aa
    6dac:	mov	r0, sl
    6dae:	bl	6560 <cardCommand(unsigned long, unsigned long)>
    6db2:	cbz	r0, 6dfa <SdioCard::begin(SdioConfig)+0x156>
      if (SDHC_CMDRSP0 != 0X1AA) {
    6db4:	ldr	r3, [r4, #16]
    6db6:	cmp.w	r3, #426	; 0x1aa
    6dba:	beq.n	6dcc <SdioCard::begin(SdioConfig)+0x128>
  m_errorCode = code;
    6dbc:	movs	r3, #6
  m_errorLine = line;
    6dbe:	mov.w	r2, #708	; 0x2c4
  m_errorCode = code;
    6dc2:	strb	r3, [r5, #0]
  m_errorLine = line;
    6dc4:	ldr	r3, [pc, #480]	; (6fa8 <SdioCard::begin(SdioConfig)+0x304>)
    return false;
    6dc6:	movs	r4, #0
  m_errorLine = line;
    6dc8:	str	r2, [r3, #0]
  return false;
    6dca:	b.n	6d96 <SdioCard::begin(SdioConfig)+0xf2>
      m_version2 = true;
    6dcc:	movs	r3, #1
  arg = m_version2 ? 0X40300000 : 0x00300000;
    6dce:	ldr	r4, [pc, #476]	; (6fac <SdioCard::begin(SdioConfig)+0x308>)
      m_version2 = true;
    6dd0:	strb	r3, [r7, #0]
  int m = micros();
    6dd2:	bl	88cc <micros>
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    6dd6:	ldr.w	fp, [pc, #536]	; 6ff0 <SdioCard::begin(SdioConfig)+0x34c>
  int m = micros();
    6dda:	mov	r9, r0
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    6ddc:	ldr.w	sl, [pc, #532]	; 6ff4 <SdioCard::begin(SdioConfig)+0x350>
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    6de0:	ldr	r7, [pc, #432]	; (6f94 <SdioCard::begin(SdioConfig)+0x2f0>)
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    6de2:	mov	r2, r4
    6de4:	mov	r1, fp
    6de6:	movs	r0, #0
    6de8:	bl	6730 <cardAcmd(unsigned long, unsigned long, unsigned long)>
    6dec:	cbnz	r0, 6e1c <SdioCard::begin(SdioConfig)+0x178>
  m_errorCode = code;
    6dee:	movs	r3, #23
  m_errorLine = line;
    6df0:	movw	r2, #723	; 0x2d3
  m_errorCode = code;
    6df4:	strb	r3, [r5, #0]
  m_errorLine = line;
    6df6:	ldr	r3, [pc, #432]	; (6fa8 <SdioCard::begin(SdioConfig)+0x304>)
    6df8:	b.n	6dc6 <SdioCard::begin(SdioConfig)+0x122>
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTA;
    6dfa:	ldr	r3, [r4, #44]	; 0x2c
    6dfc:	orr.w	r3, r3, #16777216	; 0x1000000
    6e00:	str	r3, [r4, #44]	; 0x2c
    while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) {
    6e02:	ldr	r3, [r4, #44]	; 0x2c
    6e04:	lsls	r0, r3, #7
    6e06:	bmi.n	6e02 <SdioCard::begin(SdioConfig)+0x15e>
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    6e08:	subs.w	r9, r9, #1
    6e0c:	bne.n	6da8 <SdioCard::begin(SdioConfig)+0x104>
  arg = m_version2 ? 0X40300000 : 0x00300000;
    6e0e:	ldrb	r3, [r7, #0]
    6e10:	ldr	r4, [pc, #408]	; (6fac <SdioCard::begin(SdioConfig)+0x308>)
    6e12:	cmp	r3, #0
    6e14:	it	eq
    6e16:	moveq.w	r4, #3145728	; 0x300000
    6e1a:	b.n	6dd2 <SdioCard::begin(SdioConfig)+0x12e>
        ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
    6e1c:	bl	88cc <micros>
    6e20:	sub.w	r0, r0, r9
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    6e24:	cmp	r0, sl
    6e26:	bhi.n	6dee <SdioCard::begin(SdioConfig)+0x14a>
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    6e28:	ldr	r3, [r7, #16]
    6e2a:	cmp	r3, #0
    6e2c:	bge.n	6de2 <SdioCard::begin(SdioConfig)+0x13e>
  m_ocr = SDHC_CMDRSP0;
    6e2e:	ldr	r2, [r7, #16]
    6e30:	ldr	r3, [pc, #380]	; (6fb0 <SdioCard::begin(SdioConfig)+0x30c>)
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    6e32:	ldr	r0, [pc, #384]	; (6fb4 <SdioCard::begin(SdioConfig)+0x310>)
  m_ocr = SDHC_CMDRSP0;
    6e34:	str	r2, [r3, #0]
  if (SDHC_CMDRSP0 & 0x40000000) {
    6e36:	ldr	r3, [r7, #16]
    6e38:	lsls	r1, r3, #1
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    6e3a:	mov.w	r1, #0
    m_highCapacity = true;
    6e3e:	itt	mi
    6e40:	movmi	r3, #1
    6e42:	strbmi.w	r3, [r8]
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    6e46:	bl	6560 <cardCommand(unsigned long, unsigned long)>
    6e4a:	mov	r4, r0
    6e4c:	cbnz	r0, 6e5a <SdioCard::begin(SdioConfig)+0x1b6>
  m_errorCode = code;
    6e4e:	movs	r3, #2
  m_errorLine = line;
    6e50:	mov.w	r2, #732	; 0x2dc
  m_errorCode = code;
    6e54:	strb	r3, [r5, #0]
  m_errorLine = line;
    6e56:	ldr	r3, [pc, #336]	; (6fa8 <SdioCard::begin(SdioConfig)+0x304>)
    6e58:	b.n	6d94 <SdioCard::begin(SdioConfig)+0xf0>
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    6e5a:	movs	r1, #0
    6e5c:	ldr	r0, [pc, #344]	; (6fb8 <SdioCard::begin(SdioConfig)+0x314>)
    6e5e:	bl	6560 <cardCommand(unsigned long, unsigned long)>
    6e62:	mov	r4, r0
    6e64:	cbnz	r0, 6e72 <SdioCard::begin(SdioConfig)+0x1ce>
  m_errorCode = code;
    6e66:	movs	r3, #3
  m_errorLine = line;
    6e68:	movw	r2, #735	; 0x2df
  m_errorCode = code;
    6e6c:	strb	r3, [r5, #0]
  m_errorLine = line;
    6e6e:	ldr	r3, [pc, #312]	; (6fa8 <SdioCard::begin(SdioConfig)+0x304>)
    6e70:	b.n	6d94 <SdioCard::begin(SdioConfig)+0xf0>
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    6e72:	ldr.w	r9, [pc, #288]	; 6f94 <SdioCard::begin(SdioConfig)+0x2f0>
    6e76:	ldr	r7, [pc, #324]	; (6fbc <SdioCard::begin(SdioConfig)+0x318>)
    6e78:	ldr.w	r2, [r9, #16]
  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    6e7c:	ldr	r1, [pc, #320]	; (6fc0 <SdioCard::begin(SdioConfig)+0x31c>)
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    6e7e:	lsrs	r2, r2, #16
  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    6e80:	ldr	r0, [pc, #320]	; (6fc4 <SdioCard::begin(SdioConfig)+0x320>)
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    6e82:	lsls	r2, r2, #16
    6e84:	str	r2, [r7, #0]
  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    6e86:	bl	66d8 <readReg16(unsigned long, void*)>
    6e8a:	mov	r4, r0
    6e8c:	cbnz	r0, 6e9a <SdioCard::begin(SdioConfig)+0x1f6>
  m_errorCode = code;
    6e8e:	movs	r3, #7
  m_errorLine = line;
    6e90:	mov.w	r2, #740	; 0x2e4
  m_errorCode = code;
    6e94:	strb	r3, [r5, #0]
  m_errorLine = line;
    6e96:	ldr	r3, [pc, #272]	; (6fa8 <SdioCard::begin(SdioConfig)+0x304>)
    6e98:	b.n	6d94 <SdioCard::begin(SdioConfig)+0xf0>
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    6e9a:	ldr	r1, [pc, #300]	; (6fc8 <SdioCard::begin(SdioConfig)+0x324>)
    6e9c:	ldr	r0, [pc, #300]	; (6fcc <SdioCard::begin(SdioConfig)+0x328>)
    6e9e:	bl	66d8 <readReg16(unsigned long, void*)>
    6ea2:	mov	r4, r0
    6ea4:	cbnz	r0, 6eb2 <SdioCard::begin(SdioConfig)+0x20e>
  m_errorCode = code;
    6ea6:	movs	r3, #8
  m_errorLine = line;
    6ea8:	movw	r2, #743	; 0x2e7
  m_errorCode = code;
    6eac:	strb	r3, [r5, #0]
  m_errorLine = line;
    6eae:	ldr	r3, [pc, #248]	; (6fa8 <SdioCard::begin(SdioConfig)+0x304>)
    6eb0:	b.n	6d94 <SdioCard::begin(SdioConfig)+0xf0>
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    6eb2:	ldr	r1, [r7, #0]
    6eb4:	ldr	r0, [pc, #280]	; (6fd0 <SdioCard::begin(SdioConfig)+0x32c>)
    6eb6:	bl	6560 <cardCommand(unsigned long, unsigned long)>
    6eba:	mov	r4, r0
    6ebc:	cbnz	r0, 6eca <SdioCard::begin(SdioConfig)+0x226>
  m_errorCode = code;
    6ebe:	movs	r3, #5
  m_errorLine = line;
    6ec0:	movw	r2, #746	; 0x2ea
  m_errorCode = code;
    6ec4:	strb	r3, [r5, #0]
  m_errorLine = line;
    6ec6:	ldr	r3, [pc, #224]	; (6fa8 <SdioCard::begin(SdioConfig)+0x304>)
    6ec8:	b.n	6d94 <SdioCard::begin(SdioConfig)+0xf0>
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    6eca:	movs	r2, #2
    6ecc:	ldr	r1, [pc, #260]	; (6fd4 <SdioCard::begin(SdioConfig)+0x330>)
    6ece:	ldr	r0, [r7, #0]
    6ed0:	bl	6730 <cardAcmd(unsigned long, unsigned long, unsigned long)>
    6ed4:	mov	r4, r0
    6ed6:	cbnz	r0, 6ee4 <SdioCard::begin(SdioConfig)+0x240>
  m_errorCode = code;
    6ed8:	movs	r3, #20
  m_errorLine = line;
    6eda:	movw	r2, #750	; 0x2ee
  m_errorCode = code;
    6ede:	strb	r3, [r5, #0]
  m_errorLine = line;
    6ee0:	ldr	r3, [pc, #196]	; (6fa8 <SdioCard::begin(SdioConfig)+0x304>)
    6ee2:	b.n	6d94 <SdioCard::begin(SdioConfig)+0xf0>
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    6ee4:	ldr.w	r2, [r9, #40]	; 0x28
  if (waitTimeout(isBusyCMD13)) {
    6ee8:	ldr	r0, [pc, #236]	; (6fd8 <SdioCard::begin(SdioConfig)+0x334>)
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    6eea:	bic.w	r2, r2, #6
    6eee:	str.w	r2, [r9, #40]	; 0x28
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);
    6ef2:	ldr.w	r2, [r9, #40]	; 0x28
    6ef6:	orr.w	r2, r2, #2
    6efa:	str.w	r2, [r9, #40]	; 0x28
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
    6efe:	mov.w	r2, #1048592	; 0x100010
    6f02:	str.w	r2, [r9, #68]	; 0x44
  if (waitTimeout(isBusyCMD13)) {
    6f06:	bl	64a4 <waitTimeout(bool (*)())>
    6f0a:	mov	r2, r0
    6f0c:	cbz	r0, 6f1a <SdioCard::begin(SdioConfig)+0x276>
  m_errorCode = code;
    6f0e:	movs	r3, #10
  m_errorLine = line;
    6f10:	mov.w	r2, #464	; 0x1d0
  m_errorCode = code;
    6f14:	strb	r3, [r5, #0]
  m_errorLine = line;
    6f16:	ldr	r3, [pc, #144]	; (6fa8 <SdioCard::begin(SdioConfig)+0x304>)
    6f18:	b.n	6dc6 <SdioCard::begin(SdioConfig)+0x122>
  m_dmaBusy = true;
    6f1a:	movs	r1, #1
    6f1c:	ldr.w	fp, [pc, #216]	; 6ff8 <SdioCard::begin(SdioConfig)+0x354>
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    6f20:	ldr	r3, [pc, #184]	; (6fdc <SdioCard::begin(SdioConfig)+0x338>)
  m_dmaBusy = true;
    6f22:	strb.w	r1, [fp]
  m_irqstat = 0;
    6f26:	ldr.w	sl, [pc, #212]	; 6ffc <SdioCard::begin(SdioConfig)+0x358>
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(8);
    6f2a:	ldr	r1, [pc, #180]	; (6fe0 <SdioCard::begin(SdioConfig)+0x33c>)
  SDHC_DSADDR = (uint32_t)scr;
    6f2c:	ldr.w	r8, [pc, #208]	; 7000 <SdioCard::begin(SdioConfig)+0x35c>
  m_irqstat = 0;
    6f30:	str.w	r0, [sl]
  SDHC_DSADDR = (uint32_t)scr;
    6f34:	str.w	r8, [r9]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(8);
    6f38:	str.w	r1, [r9, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    6f3c:	str.w	r3, [r9, #56]	; 0x38
  if (!cardAcmd(m_rca, ACMD51_XFERTYP, 0)) {
    6f40:	ldr	r1, [pc, #160]	; (6fe4 <SdioCard::begin(SdioConfig)+0x340>)
    6f42:	ldr	r0, [r7, #0]
    6f44:	bl	6730 <cardAcmd(unsigned long, unsigned long, unsigned long)>
    6f48:	mov	r4, r0
    6f4a:	cbnz	r0, 6f58 <SdioCard::begin(SdioConfig)+0x2b4>
  m_errorCode = code;
    6f4c:	movs	r3, #24
  m_errorLine = line;
    6f4e:	movw	r2, #471	; 0x1d7
  m_errorCode = code;
    6f52:	strb	r3, [r5, #0]
  m_errorLine = line;
    6f54:	ldr	r3, [pc, #80]	; (6fa8 <SdioCard::begin(SdioConfig)+0x304>)
    6f56:	b.n	6d94 <SdioCard::begin(SdioConfig)+0xf0>
  if (!waitDmaStatus()) {
    6f58:	bl	6754 <waitDmaStatus()>
    6f5c:	mov	r4, r0
    6f5e:	cbnz	r0, 6f6c <SdioCard::begin(SdioConfig)+0x2c8>
  m_errorCode = code;
    6f60:	movs	r3, #38	; 0x26
  m_errorLine = line;
    6f62:	mov.w	r2, #474	; 0x1da
  m_errorCode = code;
    6f66:	strb	r3, [r5, #0]
  m_errorLine = line;
    6f68:	ldr	r3, [pc, #60]	; (6fa8 <SdioCard::begin(SdioConfig)+0x304>)
    6f6a:	b.n	6d94 <SdioCard::begin(SdioConfig)+0xf0>
  if (waitTimeout(isBusyCMD13)) {
    6f6c:	ldr	r0, [pc, #104]	; (6fd8 <SdioCard::begin(SdioConfig)+0x334>)
    6f6e:	bl	64a4 <waitTimeout(bool (*)())>
    6f72:	cmp	r0, #0
    6f74:	beq.n	7004 <SdioCard::begin(SdioConfig)+0x360>
  m_errorCode = code;
    6f76:	movs	r3, #10
  m_errorLine = line;
    6f78:	mov.w	r2, #446	; 0x1be
  m_errorCode = code;
    6f7c:	strb	r3, [r5, #0]
  m_errorLine = line;
    6f7e:	ldr	r3, [pc, #40]	; (6fa8 <SdioCard::begin(SdioConfig)+0x304>)
    6f80:	b.n	6dc6 <SdioCard::begin(SdioConfig)+0x122>
    6f82:	nop
    6f84:	.word	0x20007184
    6f88:	.word	0x2000219c
    6f8c:	.word	0x20007185
    6f90:	.word	0x400d8000
    6f94:	.word	0x402c0000
    6f98:	.word	0x117f000b
    6f9c:	.word	0x00006299
    6fa0:	.word	0x20002400
    6fa4:	.word	0xe000e400
    6fa8:	.word	0x20006490
    6fac:	.word	0x40300000
    6fb0:	.word	0x20006898
    6fb4:	.word	0x02090000
    6fb8:	.word	0x031a0000
    6fbc:	.word	0x2000689c
    6fc0:	.word	0x2000719f
    6fc4:	.word	0x09090000
    6fc8:	.word	0x2000718f
    6fcc:	.word	0x0a090000
    6fd0:	.word	0x071b0000
    6fd4:	.word	0x061a0000
    6fd8:	.word	0x000065e9
    6fdc:	.word	0x117f0002
    6fe0:	.word	0x00010008
    6fe4:	.word	0x333a0011
    6fe8:	.word	0x20007186
    6fec:	.word	0x081a0000
    6ff0:	.word	0x29020000
    6ff4:	.word	0x000f4240
    6ff8:	.word	0x200071f8
    6ffc:	.word	0x200068a8
    7000:	.word	0x200071af
  m_dmaBusy = true;
    7004:	movs	r3, #1
  m_irqstat = 0;
    7006:	movs	r2, #0
  SDHC_DSADDR = (uint32_t)scr;
    7008:	ldr	r1, [pc, #156]	; (70a8 <SdioCard::begin(SdioConfig)+0x404>)
  m_dmaBusy = true;
    700a:	strb.w	r3, [fp]
  SDHC_DSADDR = (uint32_t)scr;
    700e:	ldr	r3, [pc, #156]	; (70ac <SdioCard::begin(SdioConfig)+0x408>)
  m_irqstat = 0;
    7010:	str.w	r2, [sl]
  SDHC_DSADDR = (uint32_t)scr;
    7014:	str	r1, [r3, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    7016:	ldr	r1, [pc, #152]	; (70b0 <SdioCard::begin(SdioConfig)+0x40c>)
    7018:	str	r1, [r3, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    701a:	ldr	r1, [pc, #152]	; (70b4 <SdioCard::begin(SdioConfig)+0x410>)
    701c:	str	r1, [r3, #56]	; 0x38
  if (!cardAcmd(m_rca, ACMD13_XFERTYP, 0)) {
    701e:	ldr	r0, [r7, #0]
    7020:	ldr	r1, [pc, #148]	; (70b8 <SdioCard::begin(SdioConfig)+0x414>)
    7022:	bl	6730 <cardAcmd(unsigned long, unsigned long, unsigned long)>
    7026:	mov	r4, r0
    7028:	cbnz	r0, 7036 <SdioCard::begin(SdioConfig)+0x392>
  m_errorCode = code;
    702a:	movs	r3, #21
  m_errorLine = line;
    702c:	movw	r2, #453	; 0x1c5
  m_errorCode = code;
    7030:	strb	r3, [r5, #0]
  m_errorLine = line;
    7032:	ldr	r3, [pc, #136]	; (70bc <SdioCard::begin(SdioConfig)+0x418>)
    7034:	b.n	6d94 <SdioCard::begin(SdioConfig)+0xf0>
  if (!waitDmaStatus()) {
    7036:	bl	6754 <waitDmaStatus()>
    703a:	mov	r4, r0
    703c:	cbnz	r0, 704a <SdioCard::begin(SdioConfig)+0x3a6>
  m_errorCode = code;
    703e:	movs	r3, #38	; 0x26
  m_errorLine = line;
    7040:	mov.w	r2, #456	; 0x1c8
  m_errorCode = code;
    7044:	strb	r3, [r5, #0]
  m_errorLine = line;
    7046:	ldr	r3, [pc, #116]	; (70bc <SdioCard::begin(SdioConfig)+0x418>)
    7048:	b.n	6d94 <SdioCard::begin(SdioConfig)+0xf0>
  /** Bytes 0-3 SD Association, bytes 4-7 reserved for manufacturer. */
  uint8_t scr[8];
  /** \return SCR_STRUCTURE field  - must be zero.*/
  uint8_t srcStructure() const { return scr[0] >> 4; }
  /** \return SD_SPEC field 0 - v1.0 or V1.01, 1 - 1.10, 2 - V2.00 or greater */
  uint8_t sdSpec() const { return scr[0] & 0XF; }
    704a:	ldrb.w	r3, [r8]
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    704e:	lsls	r2, r3, #28
    7050:	beq.n	7084 <SdioCard::begin(SdioConfig)+0x3e0>
  if (m_scr.sdSpec() > 0 && cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    7052:	ldr	r3, [r6, #0]
    7054:	mov	r2, sp
    7056:	mvn.w	r1, #4278190080	; 0xff000000
    705a:	mov	r0, r6
    705c:	ldr	r3, [r3, #40]	; 0x28
    705e:	blx	r3
    7060:	cbz	r0, 7084 <SdioCard::begin(SdioConfig)+0x3e0>
    7062:	ldrb.w	r3, [sp, #13]
    7066:	lsls	r3, r3, #30
    7068:	bpl.n	7084 <SdioCard::begin(SdioConfig)+0x3e0>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    706a:	ldr	r3, [r6, #0]
    706c:	mov	r2, sp
    706e:	ldr	r1, [pc, #80]	; (70c0 <SdioCard::begin(SdioConfig)+0x41c>)
    7070:	mov	r0, r6
    7072:	ldr	r3, [r3, #40]	; 0x28
    7074:	blx	r3
  if (m_scr.sdSpec() > 0 && cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    7076:	cbz	r0, 7084 <SdioCard::begin(SdioConfig)+0x3e0>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    7078:	ldrb.w	r3, [sp, #16]
    707c:	and.w	r3, r3, #15
    7080:	cmp	r3, #1
    7082:	beq.n	70a0 <SdioCard::begin(SdioConfig)+0x3fc>
    kHzSdClk = 25000;
    7084:	movw	r2, #25000	; 0x61a8
    gpioMux(5);
    7088:	movs	r0, #5
    708a:	bl	62c4 <gpioMux(unsigned char)>
  setSdclk(kHzSdClk);
    708e:	mov	r0, r2
    7090:	bl	636c <setSdclk(unsigned long)>
  if (enable) {
    7094:	bl	6514 <enableGPIO(bool) [clone .part.0]>
  m_initDone = true;
    7098:	movs	r3, #1
    709a:	ldr	r2, [pc, #40]	; (70c4 <SdioCard::begin(SdioConfig)+0x420>)
    709c:	strb	r3, [r2, #0]
  return true;
    709e:	b.n	6d96 <SdioCard::begin(SdioConfig)+0xf2>
    kHzSdClk = 50000;
    70a0:	movw	r2, #50000	; 0xc350
    70a4:	b.n	7088 <SdioCard::begin(SdioConfig)+0x3e4>
    70a6:	nop
    70a8:	.word	0x200071b7
    70ac:	.word	0x402c0000
    70b0:	.word	0x00010040
    70b4:	.word	0x117f0002
    70b8:	.word	0x0d3a0011
    70bc:	.word	0x20006490
    70c0:	.word	0x80fffff1
    70c4:	.word	0x20007184

000070c8 <SdioCard::readData(unsigned char*)>:
bool SdioCard::readData(uint8_t* dst) {
    70c8:	push	{r3, r4, r5, lr}
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    70ca:	ldr	r3, [pc, #148]	; (7160 <SdioCard::readData(unsigned char*)+0x98>)
bool SdioCard::readData(uint8_t* dst) {
    70cc:	mov	r4, r1
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    70ce:	ldr	r2, [r3, #36]	; 0x24
    70d0:	lsls	r0, r2, #22
    70d2:	bmi.n	70f0 <SdioCard::readData(unsigned char*)+0x28>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    70d4:	ldr	r2, [r3, #40]	; 0x28
    70d6:	bic.w	r2, r2, #65536	; 0x10000
    70da:	str	r2, [r3, #40]	; 0x28
    noInterrupts();
    70dc:	cpsid	i
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    70de:	ldr	r2, [r3, #40]	; 0x28
    70e0:	orr.w	r2, r2, #131072	; 0x20000
    70e4:	str	r2, [r3, #40]	; 0x28
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    70e6:	ldr	r2, [r3, #40]	; 0x28
    70e8:	orr.w	r2, r2, #65536	; 0x10000
    70ec:	str	r2, [r3, #40]	; 0x28
    interrupts();
    70ee:	cpsie	i
  if (waitTimeout(isBusyFifoRead)) {
    70f0:	ldr	r0, [pc, #112]	; (7164 <SdioCard::readData(unsigned char*)+0x9c>)
    70f2:	bl	64a4 <waitTimeout(bool (*)())>
    70f6:	cbz	r0, 710a <SdioCard::readData(unsigned char*)+0x42>
  m_errorCode = code;
    70f8:	ldr	r3, [pc, #108]	; (7168 <SdioCard::readData(unsigned char*)+0xa0>)
    70fa:	movs	r2, #27
    70fc:	strb	r2, [r3, #0]
  m_errorLine = line;
    70fe:	movw	r2, #889	; 0x379
    7102:	ldr	r3, [pc, #104]	; (716c <SdioCard::readData(unsigned char*)+0xa4>)
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
    7104:	movs	r0, #0
  m_errorLine = line;
    7106:	str	r2, [r3, #0]
}
    7108:	pop	{r3, r4, r5, pc}
    710a:	add.w	r2, r4, #512	; 0x200
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    710e:	ldr	r5, [pc, #80]	; (7160 <SdioCard::readData(unsigned char*)+0x98>)
    7110:	ldr	r3, [r5, #36]	; 0x24
    7112:	lsls	r1, r3, #20
    7114:	bpl.n	7110 <SdioCard::readData(unsigned char*)+0x48>
    7116:	subs	r3, r4, #4
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    7118:	add.w	r1, r4, #60	; 0x3c
      p32[i] = SDHC_DATPORT;
    711c:	ldr	r0, [r5, #32]
    711e:	str.w	r0, [r3, #4]!
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    7122:	cmp	r3, r1
    7124:	bne.n	711c <SdioCard::readData(unsigned char*)+0x54>
    p32 += FIFO_WML;
    7126:	adds	r4, #64	; 0x40
  for (uint32_t iw = 0; iw < 512 / (4 * FIFO_WML); iw++) {
    7128:	cmp	r4, r2
    712a:	bne.n	7110 <SdioCard::readData(unsigned char*)+0x48>
  if (waitTimeout(isBusyTransferComplete)) {
    712c:	ldr	r0, [pc, #64]	; (7170 <SdioCard::readData(unsigned char*)+0xa8>)
    712e:	bl	64a4 <waitTimeout(bool (*)())>
    7132:	cbz	r0, 7142 <SdioCard::readData(unsigned char*)+0x7a>
  m_errorCode = code;
    7134:	ldr	r3, [pc, #48]	; (7168 <SdioCard::readData(unsigned char*)+0xa0>)
    7136:	movs	r2, #30
    7138:	strb	r2, [r3, #0]
  m_errorLine = line;
    713a:	mov.w	r2, #900	; 0x384
    713e:	ldr	r3, [pc, #44]	; (716c <SdioCard::readData(unsigned char*)+0xa4>)
    7140:	b.n	7104 <SdioCard::readData(unsigned char*)+0x3c>
  m_irqstat = SDHC_IRQSTAT;
    7142:	ldr	r2, [r5, #48]	; 0x30
    7144:	ldr	r3, [pc, #44]	; (7174 <SdioCard::readData(unsigned char*)+0xac>)
    7146:	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    7148:	ldr	r2, [r3, #0]
    714a:	str	r2, [r5, #48]	; 0x30
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    714c:	ldr	r2, [r3, #0]
    714e:	lsls	r2, r2, #30
    7150:	bpl.n	7108 <SdioCard::readData(unsigned char*)+0x40>
    7152:	ldr	r2, [r3, #0]
    7154:	ldr	r3, [pc, #32]	; (7178 <SdioCard::readData(unsigned char*)+0xb0>)
    7156:	tst	r2, r3
    7158:	ite	eq
    715a:	moveq	r0, #1
    715c:	movne	r0, #0
    715e:	b.n	7108 <SdioCard::readData(unsigned char*)+0x40>
    7160:	.word	0x402c0000
    7164:	.word	0x0000632d
    7168:	.word	0x2000219c
    716c:	.word	0x20006490
    7170:	.word	0x00006355
    7174:	.word	0x200068a8
    7178:	.word	0x117f0000

0000717c <SdioCard::readStart(unsigned long)>:
bool SdioCard::readStart(uint32_t sector) {
    717c:	push	{r4, lr}
  if (yieldTimeout(isBusyCMD13)) {
    717e:	ldr	r0, [pc, #80]	; (71d0 <SdioCard::readStart(unsigned long)+0x54>)
bool SdioCard::readStart(uint32_t sector) {
    7180:	mov	r4, r1
  if (yieldTimeout(isBusyCMD13)) {
    7182:	bl	64c8 <yieldTimeout(bool (*)())>
    7186:	cbz	r0, 719a <SdioCard::readStart(unsigned long)+0x1e>
  m_errorCode = code;
    7188:	ldr	r3, [pc, #72]	; (71d4 <SdioCard::readStart(unsigned long)+0x58>)
    718a:	movs	r2, #10
    return sdError(SD_CARD_ERROR_CMD13);
    718c:	movs	r0, #0
  m_errorCode = code;
    718e:	strb	r2, [r3, #0]
  m_errorLine = line;
    7190:	movw	r2, #990	; 0x3de
    7194:	ldr	r3, [pc, #64]	; (71d8 <SdioCard::readStart(unsigned long)+0x5c>)
    7196:	str	r2, [r3, #0]
}
    7198:	pop	{r4, pc}
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    719a:	ldr	r3, [pc, #64]	; (71dc <SdioCard::readStart(unsigned long)+0x60>)
    719c:	ldr	r2, [r3, #40]	; 0x28
    719e:	orr.w	r2, r2, #65536	; 0x10000
    71a2:	str	r2, [r3, #40]	; 0x28
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    71a4:	mov.w	r2, #512	; 0x200
    71a8:	str	r2, [r3, #4]
  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512 * sector)) {
    71aa:	ldr	r3, [pc, #52]	; (71e0 <SdioCard::readStart(unsigned long)+0x64>)
    71ac:	ldrb	r3, [r3, #0]
    71ae:	cbnz	r3, 71b2 <SdioCard::readStart(unsigned long)+0x36>
    71b0:	lsls	r4, r4, #9
    71b2:	mov	r1, r4
    71b4:	ldr	r0, [pc, #44]	; (71e4 <SdioCard::readStart(unsigned long)+0x68>)
    71b6:	bl	6560 <cardCommand(unsigned long, unsigned long)>
    71ba:	cmp	r0, #0
    71bc:	bne.n	7198 <SdioCard::readStart(unsigned long)+0x1c>
  m_errorCode = code;
    71be:	ldr	r3, [pc, #20]	; (71d4 <SdioCard::readStart(unsigned long)+0x58>)
    71c0:	movs	r2, #12
    71c2:	strb	r2, [r3, #0]
  m_errorLine = line;
    71c4:	movw	r2, #1002	; 0x3ea
    71c8:	ldr	r3, [pc, #12]	; (71d8 <SdioCard::readStart(unsigned long)+0x5c>)
    71ca:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD18);
    71cc:	b.n	7198 <SdioCard::readStart(unsigned long)+0x1c>
    71ce:	nop
    71d0:	.word	0x000065e9
    71d4:	.word	0x2000219c
    71d8:	.word	0x20006490
    71dc:	.word	0x402c0000
    71e0:	.word	0x20007186
    71e4:	.word	0x123a0030

000071e8 <SdioCard::readSector(unsigned long, unsigned char*)>:
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    71e8:	push	{r4, r5, r6, r7, lr}
    71ea:	ldrb	r5, [r0, #8]
    71ec:	sub.w	sp, sp, #516	; 0x204
    71f0:	mov	r4, r0
    71f2:	mov	r7, r1
  if (m_sdioConfig.useDma()) {
    71f4:	ands.w	r5, r5, #1
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    71f8:	mov	r6, r2
  if (m_sdioConfig.useDma()) {
    71fa:	beq.n	723c <SdioCard::readSector(unsigned long, unsigned char*)+0x54>
    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;
    71fc:	lsls	r3, r2, #30
    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    71fe:	ldr	r0, [pc, #132]	; (7284 <SdioCard::readSector(unsigned long, unsigned char*)+0x9c>)
    7200:	mov.w	r3, #1
    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;
    7204:	ite	eq
    7206:	moveq	r4, r2
    7208:	movne	r4, sp
    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    720a:	mov	r2, r4
    720c:	bl	6a70 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    7210:	mov	r5, r0
    7212:	cbnz	r0, 722a <SdioCard::readSector(unsigned long, unsigned char*)+0x42>
  m_errorCode = code;
    7214:	ldr	r3, [pc, #112]	; (7288 <SdioCard::readSector(unsigned long, unsigned char*)+0xa0>)
    7216:	movs	r2, #11
    7218:	strb	r2, [r3, #0]
  m_errorLine = line;
    721a:	movw	r2, #929	; 0x3a1
    721e:	ldr	r3, [pc, #108]	; (728c <SdioCard::readSector(unsigned long, unsigned char*)+0xa4>)
    7220:	str	r2, [r3, #0]
}
    7222:	mov	r0, r5
    7224:	add.w	sp, sp, #516	; 0x204
    7228:	pop	{r4, r5, r6, r7, pc}
    if (ptr != dst) {
    722a:	cmp	r4, r6
    722c:	beq.n	7222 <SdioCard::readSector(unsigned long, unsigned char*)+0x3a>
      memcpy(dst, aligned, 512);
    722e:	mov.w	r2, #512	; 0x200
    7232:	mov	r1, sp
    7234:	mov	r0, r6
    7236:	bl	756c <memcpy>
    723a:	b.n	7222 <SdioCard::readSector(unsigned long, unsigned char*)+0x3a>
    if (!waitTransferComplete()) {
    723c:	bl	6850 <waitTransferComplete()>
    7240:	cmp	r0, #0
    7242:	beq.n	7222 <SdioCard::readSector(unsigned long, unsigned char*)+0x3a>
    if (m_curState != READ_STATE || sector != m_curSector) {
    7244:	ldrb	r3, [r4, #9]
    7246:	cmp	r3, #1
    7248:	bne.n	7250 <SdioCard::readSector(unsigned long, unsigned char*)+0x68>
    724a:	ldr	r3, [r4, #4]
    724c:	cmp	r3, r7
    724e:	beq.n	726e <SdioCard::readSector(unsigned long, unsigned char*)+0x86>
      if (!syncDevice()) {
    7250:	ldr	r3, [r4, #0]
    7252:	mov	r0, r4
    7254:	ldr	r3, [r3, #28]
    7256:	blx	r3
    7258:	cmp	r0, #0
    725a:	beq.n	7222 <SdioCard::readSector(unsigned long, unsigned char*)+0x3a>
      if (!readStart(sector)) {
    725c:	mov	r1, r7
    725e:	mov	r0, r4
    7260:	bl	717c <SdioCard::readStart(unsigned long)>
    7264:	cmp	r0, #0
    7266:	beq.n	7222 <SdioCard::readSector(unsigned long, unsigned char*)+0x3a>
      m_curState = READ_STATE;
    7268:	movs	r3, #1
      m_curSector = sector;
    726a:	str	r7, [r4, #4]
      m_curState = READ_STATE;
    726c:	strb	r3, [r4, #9]
    if (!readData(dst)) {
    726e:	mov	r1, r6
    7270:	mov	r0, r4
    7272:	bl	70c8 <SdioCard::readData(unsigned char*)>
    7276:	cmp	r0, #0
    7278:	beq.n	7222 <SdioCard::readSector(unsigned long, unsigned char*)+0x3a>
    m_curSector++;
    727a:	ldr	r3, [r4, #4]
  return true;
    727c:	mov	r5, r0
    m_curSector++;
    727e:	adds	r3, #1
    7280:	str	r3, [r4, #4]
    7282:	b.n	7222 <SdioCard::readSector(unsigned long, unsigned char*)+0x3a>
    7284:	.word	0x113a0011
    7288:	.word	0x2000219c
    728c:	.word	0x20006490

00007290 <SdioCard::stopTransmission(bool)>:
bool SdioCard::stopTransmission(bool blocking) {
    7290:	push	{r4, r5, r6, lr}
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    7292:	ldr	r2, [pc, #76]	; (72e0 <SdioCard::stopTransmission(bool)+0x50>)
  m_curState = IDLE_STATE;
    7294:	movs	r5, #0
bool SdioCard::stopTransmission(bool blocking) {
    7296:	mov	r6, r1
  m_curState = IDLE_STATE;
    7298:	strb	r5, [r0, #9]
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    729a:	mov	r1, r5
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    729c:	ldr	r3, [r2, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    729e:	ldr	r0, [pc, #68]	; (72e4 <SdioCard::stopTransmission(bool)+0x54>)
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    72a0:	bic.w	r3, r3, #65536	; 0x10000
    72a4:	str	r3, [r2, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    72a6:	bl	6560 <cardCommand(unsigned long, unsigned long)>
    72aa:	mov	r4, r0
    72ac:	cbnz	r0, 72c0 <SdioCard::stopTransmission(bool)+0x30>
  m_errorCode = code;
    72ae:	ldr	r3, [pc, #56]	; (72e8 <SdioCard::stopTransmission(bool)+0x58>)
    72b0:	movs	r2, #9
    72b2:	strb	r2, [r3, #0]
  m_errorLine = line;
    72b4:	movw	r2, #1018	; 0x3fa
    72b8:	ldr	r3, [pc, #48]	; (72ec <SdioCard::stopTransmission(bool)+0x5c>)
    72ba:	str	r2, [r3, #0]
}
    72bc:	mov	r0, r4
    72be:	pop	{r4, r5, r6, pc}
  if (blocking) {
    72c0:	cmp	r6, #0
    72c2:	beq.n	72bc <SdioCard::stopTransmission(bool)+0x2c>
    if (yieldTimeout(isBusyDat)) {
    72c4:	ldr	r0, [pc, #40]	; (72f0 <SdioCard::stopTransmission(bool)+0x60>)
    72c6:	bl	64c8 <yieldTimeout(bool (*)())>
    72ca:	cmp	r0, #0
    72cc:	beq.n	72bc <SdioCard::stopTransmission(bool)+0x2c>
  m_errorCode = code;
    72ce:	ldr	r3, [pc, #24]	; (72e8 <SdioCard::stopTransmission(bool)+0x58>)
    72d0:	movs	r2, #10
      return sdError(SD_CARD_ERROR_CMD13);
    72d2:	mov	r4, r5
  m_errorCode = code;
    72d4:	strb	r2, [r3, #0]
  m_errorLine = line;
    72d6:	movw	r2, #1022	; 0x3fe
    72da:	ldr	r3, [pc, #16]	; (72ec <SdioCard::stopTransmission(bool)+0x5c>)
    72dc:	str	r2, [r3, #0]
      return sdError(SD_CARD_ERROR_CMD13);
    72de:	b.n	72bc <SdioCard::stopTransmission(bool)+0x2c>
    72e0:	.word	0x402c0000
    72e4:	.word	0x0cdb0000
    72e8:	.word	0x2000219c
    72ec:	.word	0x20006490
    72f0:	.word	0x0000630d

000072f4 <SdioCard::syncDevice()>:
bool SdioCard::syncDevice() {
    72f4:	push	{r4, lr}
    72f6:	mov	r4, r0
  if (!waitTransferComplete()) {
    72f8:	bl	6850 <waitTransferComplete()>
    72fc:	cbz	r0, 730e <SdioCard::syncDevice()+0x1a>
  if (m_curState != IDLE_STATE) {
    72fe:	ldrb	r3, [r4, #9]
    7300:	cbz	r3, 730e <SdioCard::syncDevice()+0x1a>
    return stopTransmission(true);
    7302:	mov	r0, r4
    7304:	movs	r1, #1
}
    7306:	ldmia.w	sp!, {r4, lr}
    return stopTransmission(true);
    730a:	b.w	7290 <SdioCard::stopTransmission(bool)>
}
    730e:	pop	{r4, pc}

00007310 <SPIClass::transfer(unsigned char) [clone .isra.0]>:
		port().TDR = data;
    7310:	str	r1, [r0, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    7312:	ldr	r3, [r0, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    7314:	tst.w	r3, #2031616	; 0x1f0000
    7318:	beq.n	7312 <SPIClass::transfer(unsigned char) [clone .isra.0]+0x2>
    731a:	ldr	r0, [r0, #116]	; 0x74
	}
    731c:	uxtb	r0, r0
    731e:	bx	lr

00007320 <SPIClass::beginTransaction(SPISettings)>:
	void beginTransaction(SPISettings settings) {
    7320:	push	{r0, r1, r2, r4, r5, lr}
    7322:	add	r3, sp, #8
    7324:	stmdb	r3, {r1, r2}
		if (interruptMasksUsed) {
    7328:	ldrb	r2, [r0, #19]
    732a:	mov	r3, r1
    732c:	cmp	r2, #0
    732e:	beq.n	73a4 <SPIClass::beginTransaction(SPISettings)+0x84>
			__disable_irq();
    7330:	cpsid	i
			if (interruptMasksUsed & 0x01) {
    7332:	ldrb	r2, [r0, #19]
    7334:	lsls	r1, r2, #31
    7336:	bpl.n	734a <SPIClass::beginTransaction(SPISettings)+0x2a>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    7338:	mov.w	r4, #3758153728	; 0xe000e000
    733c:	ldr	r5, [r0, #20]
    733e:	ldr.w	r1, [r4, #384]	; 0x180
    7342:	ands	r1, r5
    7344:	str	r1, [r0, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    7346:	str.w	r1, [r4, #384]	; 0x180
			if (interruptMasksUsed & 0x02) {
    734a:	lsls	r5, r2, #30
    734c:	bpl.n	7360 <SPIClass::beginTransaction(SPISettings)+0x40>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    734e:	mov.w	r4, #3758153728	; 0xe000e000
    7352:	ldr	r5, [r0, #24]
    7354:	ldr.w	r1, [r4, #388]	; 0x184
    7358:	ands	r1, r5
    735a:	str	r1, [r0, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    735c:	str.w	r1, [r4, #388]	; 0x184
			if (interruptMasksUsed & 0x04) {
    7360:	lsls	r4, r2, #29
    7362:	bpl.n	7376 <SPIClass::beginTransaction(SPISettings)+0x56>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    7364:	mov.w	r4, #3758153728	; 0xe000e000
    7368:	ldr	r5, [r0, #28]
    736a:	ldr.w	r1, [r4, #392]	; 0x188
    736e:	ands	r1, r5
    7370:	str	r1, [r0, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    7372:	str.w	r1, [r4, #392]	; 0x188
			if (interruptMasksUsed & 0x08) {
    7376:	lsls	r1, r2, #28
    7378:	bpl.n	738c <SPIClass::beginTransaction(SPISettings)+0x6c>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    737a:	mov.w	r4, #3758153728	; 0xe000e000
    737e:	ldr	r5, [r0, #32]
    7380:	ldr.w	r1, [r4, #396]	; 0x18c
    7384:	ands	r1, r5
    7386:	str	r1, [r0, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    7388:	str.w	r1, [r4, #396]	; 0x18c
			if (interruptMasksUsed & 0x10) {
    738c:	lsls	r2, r2, #27
    738e:	bpl.n	73a2 <SPIClass::beginTransaction(SPISettings)+0x82>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    7390:	mov.w	r1, #3758153728	; 0xe000e000
    7394:	ldr	r4, [r0, #36]	; 0x24
    7396:	ldr.w	r2, [r1, #400]	; 0x190
    739a:	ands	r2, r4
    739c:	str	r2, [r0, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    739e:	str.w	r2, [r1, #400]	; 0x190
			__enable_irq();
    73a2:	cpsie	i
		if (settings.clock() != _clock) {
    73a4:	ldr	r2, [r0, #8]
    73a6:	cmp	r3, r2
    73a8:	beq.n	73f8 <SPIClass::beginTransaction(SPISettings)+0xd8>
			uint32_t cbcmr = CCM_CBCMR;
    73aa:	ldr	r2, [pc, #112]	; (741c <SPIClass::beginTransaction(SPISettings)+0xfc>)
		    _clock = settings.clock();
    73ac:	str	r3, [r0, #8]
			uint32_t cbcmr = CCM_CBCMR;
    73ae:	ldr	r2, [r2, #24]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    73b0:	ldr	r1, [pc, #108]	; (7420 <SPIClass::beginTransaction(SPISettings)+0x100>)
    73b2:	ubfx	r4, r2, #4, #2
    73b6:	ubfx	r2, r2, #26, #3
    73ba:	ldr.w	r4, [r1, r4, lsl #2]
    73be:	adds	r2, #1
    73c0:	udiv	r1, r4, r2
			d = _clock ? clkhz/_clock : clkhz;
    73c4:	cbz	r3, 7412 <SPIClass::beginTransaction(SPISettings)+0xf2>
			if (d && clkhz/d > _clock) d++;
    73c6:	cmp	r3, r1
    73c8:	bhi.n	73e2 <SPIClass::beginTransaction(SPISettings)+0xc2>
			d = _clock ? clkhz/_clock : clkhz;
    73ca:	udiv	r2, r1, r3
			if (d && clkhz/d > _clock) d++;
    73ce:	udiv	r1, r1, r2
    73d2:	cmp	r3, r1
    73d4:	bcs.n	73d8 <SPIClass::beginTransaction(SPISettings)+0xb8>
    73d6:	adds	r2, #1
			if (d > 257) d= 257;  // max div
    73d8:	cmp.w	r2, #258	; 0x102
    73dc:	bcs.n	73e6 <SPIClass::beginTransaction(SPISettings)+0xc6>
			if (d > 2) {
    73de:	cmp	r2, #2
    73e0:	bhi.n	73ea <SPIClass::beginTransaction(SPISettings)+0xca>
				div =0;
    73e2:	movs	r3, #0
    73e4:	b.n	73ec <SPIClass::beginTransaction(SPISettings)+0xcc>
			if (d > 257) d= 257;  // max div
    73e6:	movw	r2, #257	; 0x101
				div = d-2;
    73ea:	subs	r3, r2, #2
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    73ec:	lsrs	r1, r3, #1
    73ee:	lsls	r2, r1, #16
    73f0:	orr.w	r2, r2, r1, lsl #8
    73f4:	orrs	r3, r2
    73f6:	str	r3, [r0, #12]
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    73f8:	ldr	r3, [r0, #0]
		port().CR = 0;
    73fa:	movs	r2, #0
    73fc:	str	r2, [r3, #16]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    73fe:	movs	r2, #3
    7400:	str	r2, [r3, #36]	; 0x24
		port().CCR = _ccr;
    7402:	ldr	r2, [r0, #12]
    7404:	str	r2, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
    7406:	ldr	r2, [sp, #4]
    7408:	str	r2, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    740a:	movs	r2, #1
    740c:	str	r2, [r3, #16]
	}
    740e:	add	sp, #12
    7410:	pop	{r4, r5, pc}
			if (d && clkhz/d > _clock) d++;
    7412:	cmp	r4, r2
    7414:	bcc.n	73ec <SPIClass::beginTransaction(SPISettings)+0xcc>
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    7416:	mov	r2, r1
    7418:	b.n	73d6 <SPIClass::beginTransaction(SPISettings)+0xb6>
    741a:	nop
    741c:	.word	0x400fc000
    7420:	.word	0x20000854

00007424 <SdSpiArduinoDriver::activate()>:
 */
#include "SdSpiDriver.h"
#if defined(SD_USE_CUSTOM_SPI) && defined(__arm__) && defined(CORE_TEENSY)
#define USE_BLOCK_TRANSFER 1
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::activate() { m_spi->beginTransaction(m_spiSettings); }
    7424:	ldrd	r1, r2, [r0, #4]
    7428:	push	{r3, lr}
    742a:	ldr	r0, [r0, #0]
    742c:	bl	7320 <SPIClass::beginTransaction(SPISettings)>
    7430:	pop	{r3, pc}
	...

00007434 <SdSpiArduinoDriver::begin(SdSpiConfig)>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::begin(SdSpiConfig spiConfig) {
    7434:	sub	sp, #16
    7436:	add.w	ip, sp, #16
    743a:	stmdb	ip, {r1, r2, r3}
    m_spi->setMISO(SDCARD_MISO_PIN);
    m_spi->setMOSI(SDCARD_MOSI_PIN);
    m_spi->setSCK(SDCARD_SCK_PIN);
#endif  // defined(SDCARD_SPI) && defined(SDCARD_SS_PIN)
  } else {
    m_spi = &SPI;
    743e:	ldr	r2, [pc, #16]	; (7450 <SdSpiArduinoDriver::begin(SdSpiConfig)+0x1c>)
    7440:	cmp	r3, #0
    7442:	it	eq
    7444:	moveq	r3, r2
    7446:	str	r3, [r0, #0]
  }
  m_spi->begin();
    7448:	mov	r0, r3
}
    744a:	add	sp, #16
  m_spi->begin();
    744c:	b.w	cf4 <SPIClass::begin()>
    7450:	.word	0x20005fd8

00007454 <SdSpiArduinoDriver::deactivate()>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::deactivate() { m_spi->endTransaction(); }
    7454:	ldr	r3, [r0, #0]
		if (interruptMasksUsed) {
    7456:	ldrb	r2, [r3, #19]
    7458:	cbz	r2, 74a0 <SdSpiArduinoDriver::deactivate()+0x4c>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    745a:	lsls	r0, r2, #31
    745c:	bpl.n	7468 <SdSpiArduinoDriver::deactivate()+0x14>
    745e:	ldr	r0, [r3, #40]	; 0x28
    7460:	mov.w	r1, #3758153728	; 0xe000e000
    7464:	str.w	r0, [r1, #256]	; 0x100
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    7468:	lsls	r1, r2, #30
    746a:	bpl.n	7476 <SdSpiArduinoDriver::deactivate()+0x22>
    746c:	ldr	r0, [r3, #44]	; 0x2c
    746e:	mov.w	r1, #3758153728	; 0xe000e000
    7472:	str.w	r0, [r1, #260]	; 0x104
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    7476:	lsls	r0, r2, #29
    7478:	bpl.n	7484 <SdSpiArduinoDriver::deactivate()+0x30>
    747a:	ldr	r0, [r3, #48]	; 0x30
    747c:	mov.w	r1, #3758153728	; 0xe000e000
    7480:	str.w	r0, [r1, #264]	; 0x108
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    7484:	lsls	r1, r2, #28
    7486:	bpl.n	7492 <SdSpiArduinoDriver::deactivate()+0x3e>
    7488:	ldr	r0, [r3, #52]	; 0x34
    748a:	mov.w	r1, #3758153728	; 0xe000e000
    748e:	str.w	r0, [r1, #268]	; 0x10c
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    7492:	lsls	r2, r2, #27
    7494:	bpl.n	74a0 <SdSpiArduinoDriver::deactivate()+0x4c>
    7496:	ldr	r2, [r3, #56]	; 0x38
    7498:	mov.w	r3, #3758153728	; 0xe000e000
    749c:	str.w	r2, [r3, #272]	; 0x110
    74a0:	bx	lr

000074a2 <SdSpiArduinoDriver::end()>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::end() { m_spi->end(); }
    74a2:	ldr	r0, [r0, #0]
    74a4:	b.w	f62 <SPIClass::end()>

000074a8 <SdSpiArduinoDriver::receive()>:
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive() { return m_spi->transfer(0XFF); }
    74a8:	ldr	r3, [r0, #0]
    74aa:	movs	r1, #255	; 0xff
    74ac:	ldr	r0, [r3, #0]
    74ae:	b.w	7310 <SPIClass::transfer(unsigned char) [clone .isra.0]>

000074b2 <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>:
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
    74b2:	push	{r0, r1, r2, r4, r5, lr}
    74b4:	mov	r4, r1
    74b6:	mov	r5, r0
#if USE_BLOCK_TRANSFER
  memset(buf, 0XFF, count);
    74b8:	movs	r1, #255	; 0xff
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
    74ba:	str	r2, [sp, #4]
  memset(buf, 0XFF, count);
    74bc:	mov	r0, r4
    74be:	bl	7528 <memset>
		transfer(buf, buf, count);
    74c2:	ldr	r0, [r5, #0]
    74c4:	ldr	r3, [sp, #4]
    74c6:	mov	r2, r4
    74c8:	mov	r1, r4
    74ca:	bl	f0c <SPIClass::transfer(void const*, void*, unsigned int)>
  for (size_t i = 0; i < count; i++) {
    buf[i] = m_spi->transfer(0XFF);
  }
#endif  // USE_BLOCK_TRANSFER
  return 0;
}
    74ce:	movs	r0, #0
    74d0:	add	sp, #12
    74d2:	pop	{r4, r5, pc}

000074d4 <SdSpiArduinoDriver::send(unsigned char)>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(uint8_t data) { m_spi->transfer(data); }
    74d4:	ldr	r3, [r0, #0]
    74d6:	ldr	r0, [r3, #0]
    74d8:	b.w	7310 <SPIClass::transfer(unsigned char) [clone .isra.0]>

000074dc <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf, size_t count) {
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    74dc:	subs	r3, r2, #1
    74de:	cmp.w	r3, #512	; 0x200
void SdSpiArduinoDriver::send(const uint8_t* buf, size_t count) {
    74e2:	push	{r4, r5, r6, lr}
    74e4:	mov	r6, r0
    74e6:	sub.w	sp, sp, #512	; 0x200
    74ea:	mov	r4, r1
    74ec:	mov	r5, r2
  if (0 < count && count <= 512) {
    74ee:	bcc.n	7504 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x28>
    74f0:	add	r5, r1
    memcpy(tmp, buf, count);
    m_spi->transfer(tmp, count);
    return;
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    74f2:	cmp	r4, r5
    74f4:	beq.n	7516 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x3a>
    m_spi->transfer(buf[i]);
    74f6:	ldr	r3, [r6, #0]
    74f8:	ldrb.w	r1, [r4], #1
    74fc:	ldr	r0, [r3, #0]
    74fe:	bl	7310 <SPIClass::transfer(unsigned char) [clone .isra.0]>
  for (size_t i = 0; i < count; i++) {
    7502:	b.n	74f2 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x16>
    memcpy(tmp, buf, count);
    7504:	mov	r0, sp
    7506:	bl	756c <memcpy>
    750a:	mov	r2, sp
    750c:	mov	r3, r5
    750e:	ldr	r0, [r6, #0]
    7510:	mov	r1, r2
    7512:	bl	f0c <SPIClass::transfer(void const*, void*, unsigned int)>
  }
}
    7516:	add.w	sp, sp, #512	; 0x200
    751a:	pop	{r4, r5, r6, pc}

0000751c <sdCsInit(unsigned char)>:
 */
#include "SdSpiDriver.h"
#if ENABLE_ARDUINO_FEATURES
#if SD_CHIP_SELECT_MODE == 0
//------------------------------------------------------------------------------
void sdCsInit(SdCsPin_t pin) { pinMode(pin, OUTPUT); }
    751c:	movs	r1, #1
    751e:	b.w	8cb8 <pinMode>

00007522 <sdCsWrite(unsigned char, bool)>:
//------------------------------------------------------------------------------
void sdCsWrite(SdCsPin_t pin, bool level) { digitalWrite(pin, level); }
    7522:	b.w	8c54 <digitalWrite>
	...

00007528 <memset>:
	.type	memset, %function
	.thumb_func
	memset:
//FUNCTION(memset)
    // save the original pointer
    push    { r0, lr }
    7528:	push	{r0, lr}

    // check for zero length
    cbz     r2, .L_done
    752a:	cbz	r2, 7568 <memset+0x40>

    // short memsets aren't worth optimizing and make sure we have
    // enough headroom to try to do dwordwise move optimization
    cmp     r2, #16
    752c:	cmp	r2, #16
    blt     .L_bytewise
    752e:	blt.n	7560 <memset+0x38>

    // see how many bytes we need to move to align to dword boundaries
    and     r3, r0, #7
    7530:	and.w	r3, r0, #7
    cbz     r3, .L_prepare_dwordwise
    7534:	cbz	r3, 7544 <memset+0x1c>
    rsb     r3, #8
    7536:	rsb	r3, r3, #8
    subs    r2, r3
    753a:	subs	r2, r2, r3

.L_bytewise_align:
    // bytewise to align memset
    subs    r3, r3, #1
    753c:	subs	r3, #1
    strb    r1, [r0], #1
    753e:	strb.w	r1, [r0], #1
    bgt     .L_bytewise_align
    7542:	bgt.n	753c <memset+0x14>

.L_prepare_dwordwise:
    // fill a pair of 32 bit registers with the 8 bit value
    uxtb    r1, r1
    7544:	uxtb	r1, r1
    orr     r1, r1, r1, lsl #8
    7546:	orr.w	r1, r1, r1, lsl #8
    orr     r1, r1, r1, lsl #16
    754a:	orr.w	r1, r1, r1, lsl #16
    mov     r12, r1
    754e:	mov	ip, r1

    // load the number of dwords left
    lsrs    r3, r2, #3
    7550:	lsrs	r3, r2, #3

.L_dwordwise:
    // dwordwise memset
		
    subs    r3, r3, #1
    7552:	subs	r3, #1
    strd    r1, r12, [r0], #8
    7554:	strd	r1, ip, [r0], #8
    bgt     .L_dwordwise
    7558:	bgt.n	7552 <memset+0x2a>

    // remaining bytes
    ands     r2, #7
    755a:	ands.w	r2, r2, #7
    beq     .L_done
    755e:	beq.n	7568 <memset+0x40>

.L_bytewise:
    // bytewise memset
    subs    r2, r2, #1
    7560:	subs	r2, #1
    strb    r1, [r0], #1
    7562:	strb.w	r1, [r0], #1
    bgt     .L_bytewise
    7566:	bgt.n	7560 <memset+0x38>

.L_done:
    // restore the base pointer as return value
    pop     { r0, pc }
    7568:	pop	{r0, pc}
    756a:	nop

0000756c <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    756c:	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    756e:	orr.w	r3, r1, r0
	ands	r3, r3, #3
    7572:	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    7576:	bne.n	7654 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    7578:	subs	r2, #64	; 0x40
	blo	.Lmid_block
    757a:	bcc.n	7600 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    757c:	ldr.w	r3, [r1], #4
    7580:	str.w	r3, [r0], #4
    7584:	ldr.w	r3, [r1], #4
    7588:	str.w	r3, [r0], #4
    758c:	ldr.w	r3, [r1], #4
    7590:	str.w	r3, [r0], #4
    7594:	ldr.w	r3, [r1], #4
    7598:	str.w	r3, [r0], #4
    759c:	ldr.w	r3, [r1], #4
    75a0:	str.w	r3, [r0], #4
    75a4:	ldr.w	r3, [r1], #4
    75a8:	str.w	r3, [r0], #4
    75ac:	ldr.w	r3, [r1], #4
    75b0:	str.w	r3, [r0], #4
    75b4:	ldr.w	r3, [r1], #4
    75b8:	str.w	r3, [r0], #4
    75bc:	ldr.w	r3, [r1], #4
    75c0:	str.w	r3, [r0], #4
    75c4:	ldr.w	r3, [r1], #4
    75c8:	str.w	r3, [r0], #4
    75cc:	ldr.w	r3, [r1], #4
    75d0:	str.w	r3, [r0], #4
    75d4:	ldr.w	r3, [r1], #4
    75d8:	str.w	r3, [r0], #4
    75dc:	ldr.w	r3, [r1], #4
    75e0:	str.w	r3, [r0], #4
    75e4:	ldr.w	r3, [r1], #4
    75e8:	str.w	r3, [r0], #4
    75ec:	ldr.w	r3, [r1], #4
    75f0:	str.w	r3, [r0], #4
    75f4:	ldr.w	r3, [r1], #4
    75f8:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    75fc:	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    75fe:	bcs.n	757c <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    7600:	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    7602:	bcc.n	7628 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    7604:	ldr.w	r3, [r1], #4
    7608:	str.w	r3, [r0], #4
    760c:	ldr.w	r3, [r1], #4
    7610:	str.w	r3, [r0], #4
    7614:	ldr.w	r3, [r1], #4
    7618:	str.w	r3, [r0], #4
    761c:	ldr.w	r3, [r1], #4
    7620:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    7624:	subs	r2, #16
	bhs	.Lmid_block_loop
    7626:	bcs.n	7604 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    7628:	adds	r2, #12
	blo	.Lcopy_less_than_4
    762a:	bcc.n	7638 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    762c:	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    7630:	str.w	r3, [r0], #4
	subs	r2, #4
    7634:	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    7636:	bcs.n	762c <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    7638:	adds	r2, #4
	beq	.Ldone
    763a:	beq.n	764e <memcpy+0xe2>

	lsls	r2, r2, #31
    763c:	lsls	r2, r2, #31
	itt ne
    763e:	itt	ne
	ldrbne  r3, [r1], #1
    7640:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    7644:	strbne.w	r3, [r0], #1

	bcc	.Ldone
    7648:	bcc.n	764e <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    764a:	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    764c:	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    764e:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    7650:	bx	lr
    7652:	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    7654:	cmp	r2, #8
	blo	.Lbyte_copy
    7656:	bcc.n	7680 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    7658:	lsls	r3, r1, #30
	beq	.Ldst_aligned
    765a:	beq.n	7578 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    765c:	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    7660:	beq.n	7578 <memcpy+0xc>

	rsb	r3, #4
    7662:	rsb	r3, r3, #4
	subs	r2, r3
    7666:	subs	r2, r2, r3

	lsls    r3, r3, #31
    7668:	lsls	r3, r3, #31
	itt ne
    766a:	itt	ne
	ldrbne  r3, [r1], #1
    766c:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    7670:	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    7674:	bcc.n	7578 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    7676:	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    767a:	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    767e:	b.n	7578 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    7680:	subs	r2, #4
	blo	.Lcopy_less_than_4
    7682:	bcc.n	7638 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    7684:	subs	r2, #1
	ldrb    r3, [r1], #1
    7686:	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    768a:	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    768e:	bcs.n	7684 <memcpy+0x118>

	ldrb	r3, [r1]
    7690:	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    7692:	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    7694:	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    7696:	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    7698:	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    769a:	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    769c:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    769e:	bx	lr

000076a0 <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    76a0:	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    76a2:	ldr	r4, [pc, #80]	; (76f4 <rx_queue_transfer+0x54>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    76a4:	mov.w	r6, #3758153728	; 0xe000e000
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    76a8:	ldr	r5, [pc, #76]	; (76f8 <rx_queue_transfer+0x58>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    76aa:	mov.w	r2, #131072	; 0x20000
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    76ae:	add.w	r4, r4, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    76b2:	ldr	r7, [pc, #72]	; (76fc <rx_queue_transfer+0x5c>)
    76b4:	add.w	r5, r5, r0, lsl #5
{
    76b8:	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
    76ba:	str.w	r2, [r6, #396]	; 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    76be:	mov	r1, r4
    76c0:	ldrh	r2, [r7, #0]
    76c2:	mov	r0, r5
    76c4:	bl	885c <usb_prepare_transfer>
	arm_dcache_delete(buffer, rx_packet_size);
    76c8:	ldrh	r3, [r7, #0]
	uint32_t end_addr = (uint32_t)addr + size;
    76ca:	add	r3, r4
	asm("dsb");
    76cc:	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    76d0:	str.w	r4, [r6, #3932]	; 0xf5c
		location += 32;
    76d4:	adds	r4, #32
	} while (location < end_addr);
    76d6:	cmp	r3, r4
    76d8:	bhi.n	76d0 <rx_queue_transfer+0x30>
	asm("dsb");
    76da:	dsb	sy
	asm("isb");
    76de:	isb	sy
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    76e2:	movs	r0, #3
    76e4:	mov	r1, r5
    76e6:	bl	88ac <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    76ea:	mov.w	r3, #131072	; 0x20000
    76ee:	str.w	r3, [r6, #268]	; 0x10c
}
    76f2:	pop	{r3, r4, r5, r6, r7, pc}
    76f4:	.word	0x20002720
    76f8:	.word	0x20003720
    76fc:	.word	0x20007178

00007700 <rx_event>:

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    7700:	ldr	r3, [r0, #4]
    7702:	ldr	r2, [pc, #136]	; (778c <rx_event+0x8c>)
    7704:	ubfx	r3, r3, #16, #15
{
    7708:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    770c:	ldrh	r4, [r2, #0]
	int i = t->callback_param;
    770e:	ldr	r5, [r0, #28]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    7710:	subs	r4, r4, r3
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    7712:	cmp	r4, #0
    7714:	ble.n	775e <rx_event+0x5e>
		// received a packet with data
		uint32_t head = rx_head;
    7716:	ldr	r2, [pc, #120]	; (7790 <rx_event+0x90>)
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
    7718:	uxth.w	sl, r4
		if (head != rx_tail) {
    771c:	ldr	r0, [pc, #116]	; (7794 <rx_event+0x94>)
		uint32_t head = rx_head;
    771e:	ldrb	r1, [r2, #0]
		if (head != rx_tail) {
    7720:	ldrb	r0, [r0, #0]
		uint32_t head = rx_head;
    7722:	uxtb	r3, r1
		if (head != rx_tail) {
    7724:	ldr.w	r8, [pc, #128]	; 77a8 <rx_event+0xa8>
    7728:	cmp	r1, r0
    772a:	ldr	r7, [pc, #108]	; (7798 <rx_event+0x98>)
    772c:	ldr	r1, [pc, #108]	; (779c <rx_event+0x9c>)
    772e:	beq.n	7768 <rx_event+0x68>
			uint32_t ii = rx_list[head];
    7730:	ldrb.w	r9, [r1, r3]
			uint32_t count = rx_count[ii];
    7734:	ldrh.w	r6, [r8, r9, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    7738:	rsb	r0, r6, #512	; 0x200
    773c:	cmp	r4, r0
    773e:	bhi.n	7768 <rx_event+0x68>
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    7740:	ldr	r3, [pc, #92]	; (77a0 <rx_event+0xa0>)
    7742:	add.w	r0, r6, r9, lsl #9
    7746:	mov	r2, r4
				rx_count[ii] = count + len;
    7748:	add	r6, sl
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    774a:	add.w	r1, r3, r5, lsl #9
    774e:	add	r0, r3
    7750:	bl	756c <memcpy>
				rx_available += len;
    7754:	ldr	r3, [r7, #0]
				rx_count[ii] = count + len;
    7756:	strh.w	r6, [r8, r9, lsl #1]
				rx_available += len;
    775a:	add	r3, r4
    775c:	str	r3, [r7, #0]
		rx_head = head;
		rx_available += len;
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
    775e:	mov	r0, r5
	}
}
    7760:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		rx_queue_transfer(i);
    7764:	b.w	76a0 <rx_queue_transfer>
		if (++head > RX_NUM) head = 0;
    7768:	adds	r3, #1
		rx_index[i] = 0;
    776a:	movs	r6, #0
    776c:	ldr	r0, [pc, #52]	; (77a4 <rx_event+0xa4>)
		if (++head > RX_NUM) head = 0;
    776e:	cmp	r3, #9
		rx_count[i] = len;
    7770:	strh.w	sl, [r8, r5, lsl #1]
		rx_index[i] = 0;
    7774:	strh.w	r6, [r0, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
    7778:	it	cs
    777a:	movcs	r3, r6
		rx_list[head] = i;
    777c:	strb	r5, [r1, r3]
		rx_head = head;
    777e:	uxtb	r3, r3
    7780:	strb	r3, [r2, #0]
		rx_available += len;
    7782:	ldr	r3, [r7, #0]
    7784:	add	r4, r3
    7786:	str	r4, [r7, #0]
}
    7788:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    778c:	.word	0x20007178
    7790:	.word	0x20007c13
    7794:	.word	0x20007c25
    7798:	.word	0x200070c8
    779c:	.word	0x20007c15
    77a0:	.word	0x20002720
    77a4:	.word	0x2000715c
    77a8:	.word	0x20007140

000077ac <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    77ac:	ldr	r3, [pc, #112]	; (7820 <usb_serial_flush_callback+0x74>)
{
    77ae:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_noautoflush) return;
    77b2:	ldrb	r2, [r3, #0]
    77b4:	and.w	r3, r2, #255	; 0xff
    77b8:	cbnz	r2, 781a <usb_serial_flush_callback+0x6e>
	if (!usb_configuration) return;
    77ba:	ldr	r2, [pc, #104]	; (7824 <usb_serial_flush_callback+0x78>)
    77bc:	ldrb	r2, [r2, #0]
    77be:	cbz	r2, 781a <usb_serial_flush_callback+0x6e>
	if (tx_available == 0) return;
    77c0:	ldr	r7, [pc, #100]	; (7828 <usb_serial_flush_callback+0x7c>)
    77c2:	ldrh	r5, [r7, #0]
    77c4:	cbz	r5, 781a <usb_serial_flush_callback+0x6e>
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    77c6:	ldr	r6, [pc, #100]	; (782c <usb_serial_flush_callback+0x80>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    77c8:	rsb	r5, r5, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    77cc:	ldr	r1, [pc, #96]	; (7830 <usb_serial_flush_callback+0x84>)
    77ce:	ldrb	r2, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    77d0:	ldr	r4, [pc, #96]	; (7834 <usb_serial_flush_callback+0x88>)
	transfer_t *xfer = tx_transfer + tx_head;
    77d2:	add.w	r8, r1, r2, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    77d6:	add.w	r4, r4, r2, lsl #11
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    77da:	mov	r2, r5
    77dc:	mov	r0, r8
    77de:	mov	r1, r4
	uint32_t end_addr = (uint32_t)addr + size;
    77e0:	add	r5, r4
    77e2:	bl	885c <usb_prepare_transfer>
	asm("dsb");
    77e6:	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    77ea:	mov.w	r3, #3758153728	; 0xe000e000
    77ee:	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    77f2:	adds	r4, #32
	} while (location < end_addr);
    77f4:	cmp	r5, r4
    77f6:	bhi.n	77ee <usb_serial_flush_callback+0x42>
	asm("dsb");
    77f8:	dsb	sy
	asm("isb");
    77fc:	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    7800:	movs	r0, #3
    7802:	mov	r1, r8
    7804:	bl	8888 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    7808:	ldrb	r3, [r6, #0]
    780a:	movs	r2, #0
    780c:	adds	r3, #1
	tx_available = 0;
    780e:	strh	r2, [r7, #0]
	if (++tx_head >= TX_NUM) tx_head = 0;
    7810:	uxtb	r3, r3
    7812:	cmp	r3, #3
    7814:	ite	ls
    7816:	strbls	r3, [r6, #0]
    7818:	strbhi	r2, [r6, #0]
}
    781a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    781e:	nop
    7820:	.word	0x20007c2c
    7824:	.word	0x20007c33
    7828:	.word	0x2000717c
    782c:	.word	0x20007c2a
    7830:	.word	0x20003920
    7834:	.word	0x20003a40

00007838 <usb_serial_reset>:
}
    7838:	bx	lr
	...

0000783c <usb_serial_configure>:
	if (usb_high_speed) {
    783c:	ldr	r3, [pc, #168]	; (78e8 <usb_serial_configure+0xac>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
    783e:	movs	r2, #128	; 0x80
    7840:	movs	r1, #0
    7842:	ldr	r0, [pc, #168]	; (78ec <usb_serial_configure+0xb0>)
{
    7844:	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
    7846:	ldrb	r3, [r3, #0]
	tx_head = 0;
    7848:	movs	r4, #0
		tx_packet_size = CDC_TX_SIZE_480;
    784a:	ldr	r5, [pc, #164]	; (78f0 <usb_serial_configure+0xb4>)
	if (usb_high_speed) {
    784c:	cmp	r3, #0
		rx_packet_size = CDC_RX_SIZE_480;
    784e:	ldr	r6, [pc, #164]	; (78f4 <usb_serial_configure+0xb8>)
	if (usb_high_speed) {
    7850:	ite	eq
    7852:	moveq	r3, #64	; 0x40
    7854:	movne.w	r3, #512	; 0x200
		tx_packet_size = CDC_TX_SIZE_480;
    7858:	strh	r3, [r5, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    785a:	strh	r3, [r6, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    785c:	bl	7528 <memset>
	tx_head = 0;
    7860:	ldr	r3, [pc, #148]	; (78f8 <usb_serial_configure+0xbc>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    7862:	mov.w	r2, #256	; 0x100
    7866:	mov	r1, r4
    7868:	ldr	r0, [pc, #144]	; (78fc <usb_serial_configure+0xc0>)
	tx_head = 0;
    786a:	strb	r4, [r3, #0]
	tx_available = 0;
    786c:	ldr	r3, [pc, #144]	; (7900 <usb_serial_configure+0xc4>)
    786e:	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    7870:	bl	7528 <memset>
	memset(rx_count, 0, sizeof(rx_count));
    7874:	movs	r2, #16
    7876:	mov	r1, r4
    7878:	ldr	r0, [pc, #136]	; (7904 <usb_serial_configure+0xc8>)
    787a:	bl	7528 <memset>
	memset(rx_index, 0, sizeof(rx_index));
    787e:	movs	r2, #16
    7880:	mov	r1, r4
    7882:	ldr	r0, [pc, #132]	; (7908 <usb_serial_configure+0xcc>)
    7884:	bl	7528 <memset>
	rx_head = 0;
    7888:	ldr	r3, [pc, #128]	; (790c <usb_serial_configure+0xd0>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    788a:	mov	r2, r4
    788c:	movs	r1, #16
	rx_head = 0;
    788e:	strb	r4, [r3, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    7890:	movs	r0, #2
	rx_tail = 0;
    7892:	ldr	r3, [pc, #124]	; (7910 <usb_serial_configure+0xd4>)
    7894:	strb	r4, [r3, #0]
	rx_available = 0;
    7896:	ldr	r3, [pc, #124]	; (7914 <usb_serial_configure+0xd8>)
    7898:	str	r4, [r3, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    789a:	mov	r3, r4
    789c:	bl	879c <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    78a0:	ldr	r3, [pc, #116]	; (7918 <usb_serial_configure+0xdc>)
    78a2:	mov	r2, r4
    78a4:	ldrh	r1, [r6, #0]
    78a6:	movs	r0, #3
    78a8:	bl	875c <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    78ac:	mov	r3, r4
    78ae:	movs	r2, #1
    78b0:	ldrh	r1, [r5, #0]
    78b2:	movs	r0, #3
    78b4:	bl	879c <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    78b8:	mov	r0, r4
    78ba:	adds	r4, #1
    78bc:	bl	76a0 <rx_queue_transfer>
    78c0:	cmp	r4, #8
    78c2:	bne.n	78b8 <usb_serial_configure+0x7c>
	usb_timer0_callback = callback;
    78c4:	ldr	r3, [pc, #84]	; (791c <usb_serial_configure+0xe0>)
    78c6:	ldr	r2, [pc, #88]	; (7920 <usb_serial_configure+0xe4>)
    78c8:	str	r2, [r3, #0]
	USB1_GPTIMER0CTRL = 0;
    78ca:	movs	r2, #0
    78cc:	ldr	r3, [pc, #84]	; (7924 <usb_serial_configure+0xe8>)
    78ce:	str.w	r2, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    78d2:	movs	r2, #74	; 0x4a
    78d4:	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    78d8:	ldr.w	r2, [r3, #328]	; 0x148
    78dc:	orr.w	r2, r2, #16777216	; 0x1000000
    78e0:	str.w	r2, [r3, #328]	; 0x148
}
    78e4:	pop	{r4, r5, r6, pc}
    78e6:	nop
    78e8:	.word	0x20007c34
    78ec:	.word	0x20003920
    78f0:	.word	0x20007180
    78f4:	.word	0x20007178
    78f8:	.word	0x20007c2a
    78fc:	.word	0x20003720
    7900:	.word	0x2000717c
    7904:	.word	0x20007140
    7908:	.word	0x2000715c
    790c:	.word	0x20007c13
    7910:	.word	0x20007c25
    7914:	.word	0x200070c8
    7918:	.word	0x00007701
    791c:	.word	0x20007124
    7920:	.word	0x000077ad
    7924:	.word	0x402e0000

00007928 <usb_serial_read>:
{
    7928:	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
    792c:	mov.w	r3, #3758153728	; 0xe000e000
    7930:	mov.w	r2, #131072	; 0x20000
{
    7934:	mov	r7, r0
    7936:	mov	r8, r1
	NVIC_DISABLE_IRQ(IRQ_USB1);
    7938:	str.w	r2, [r3, #396]	; 0x18c
	uint32_t count=0;
    793c:	movs	r5, #0
	uint32_t tail = rx_tail;
    793e:	ldr	r3, [pc, #160]	; (79e0 <usb_serial_read+0xb8>)
		uint32_t avail = rx_count[i] - rx_index[i];
    7940:	ldr.w	fp, [pc, #176]	; 79f4 <usb_serial_read+0xcc>
	uint32_t tail = rx_tail;
    7944:	ldrb	r4, [r3, #0]
    7946:	uxtb	r4, r4
	while (count < size && tail != rx_head) {
    7948:	cmp	r5, r8
    794a:	bcs.n	7954 <usb_serial_read+0x2c>
    794c:	ldr	r3, [pc, #148]	; (79e4 <usb_serial_read+0xbc>)
    794e:	ldrb	r2, [r3, #0]
    7950:	cmp	r2, r4
    7952:	bne.n	7968 <usb_serial_read+0x40>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    7954:	mov.w	r3, #3758153728	; 0xe000e000
    7958:	mov.w	r2, #131072	; 0x20000
}
    795c:	mov	r0, r5
	NVIC_ENABLE_IRQ(IRQ_USB1);
    795e:	str.w	r2, [r3, #268]	; 0x10c
}
    7962:	add	sp, #12
    7964:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (++tail > RX_NUM) tail = 0;
    7968:	adds	r4, #1
		uint32_t i = rx_list[tail];
    796a:	ldr	r3, [pc, #124]	; (79e8 <usb_serial_read+0xc0>)
		uint32_t avail = rx_count[i] - rx_index[i];
    796c:	ldr	r0, [pc, #124]	; (79ec <usb_serial_read+0xc4>)
		uint32_t len = size - count;
    796e:	sub.w	r2, r8, r5
		if (++tail > RX_NUM) tail = 0;
    7972:	cmp	r4, #9
    7974:	ldr.w	sl, [pc, #128]	; 79f8 <usb_serial_read+0xd0>
    7978:	it	cs
    797a:	movcs	r4, #0
		uint32_t i = rx_list[tail];
    797c:	ldrb.w	r9, [r3, r4]
		uint32_t avail = rx_count[i] - rx_index[i];
    7980:	ldrh.w	r1, [fp, r9, lsl #1]
    7984:	ldrh.w	r6, [r0, r9, lsl #1]
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    7988:	ldr	r0, [pc, #100]	; (79f0 <usb_serial_read+0xc8>)
		uint32_t avail = rx_count[i] - rx_index[i];
    798a:	subs	r6, r6, r1
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    798c:	add.w	r1, r1, r9, lsl #9
		if (avail > len) {
    7990:	cmp	r2, r6
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    7992:	add	r1, r0
		if (avail > len) {
    7994:	bcs.n	79bc <usb_serial_read+0x94>
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    7996:	mov	r0, r7
    7998:	str	r2, [sp, #4]
    799a:	bl	756c <memcpy>
			rx_available -= len;
    799e:	ldr.w	r1, [sl]
			rx_index[i] += len;
    79a2:	ldr	r2, [sp, #4]
			rx_available -= len;
    79a4:	sub.w	r1, r1, r8
    79a8:	add	r1, r5
    79aa:	mov	r5, r8
    79ac:	str.w	r1, [sl]
			rx_index[i] += len;
    79b0:	ldrh.w	r1, [fp, r9, lsl #1]
    79b4:	add	r2, r1
    79b6:	strh.w	r2, [fp, r9, lsl #1]
			count += len;
    79ba:	b.n	7948 <usb_serial_read+0x20>
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    79bc:	mov	r2, r6
    79be:	mov	r0, r7
    79c0:	bl	756c <memcpy>
			rx_available -= avail;
    79c4:	ldr.w	r2, [sl]
			rx_tail = tail;
    79c8:	ldr	r3, [pc, #20]	; (79e0 <usb_serial_read+0xb8>)
			rx_queue_transfer(i);
    79ca:	mov	r0, r9
			rx_available -= avail;
    79cc:	subs	r2, r2, r6
			p += avail;
    79ce:	add	r7, r6
			count += avail;
    79d0:	add	r5, r6
			rx_available -= avail;
    79d2:	str.w	r2, [sl]
			rx_tail = tail;
    79d6:	uxtb	r2, r4
    79d8:	strb	r2, [r3, #0]
			rx_queue_transfer(i);
    79da:	bl	76a0 <rx_queue_transfer>
    79de:	b.n	7948 <usb_serial_read+0x20>
    79e0:	.word	0x20007c25
    79e4:	.word	0x20007c13
    79e8:	.word	0x20007c15
    79ec:	.word	0x20007140
    79f0:	.word	0x20002720
    79f4:	.word	0x2000715c
    79f8:	.word	0x200070c8

000079fc <usb_serial_peekchar>:
	uint32_t tail = rx_tail;
    79fc:	ldr	r3, [pc, #44]	; (7a2c <usb_serial_peekchar+0x30>)
	if (tail == rx_head) return -1;
    79fe:	ldr	r1, [pc, #48]	; (7a30 <usb_serial_peekchar+0x34>)
	uint32_t tail = rx_tail;
    7a00:	ldrb	r2, [r3, #0]
	if (tail == rx_head) return -1;
    7a02:	ldrb	r1, [r1, #0]
	uint32_t tail = rx_tail;
    7a04:	uxtb	r3, r2
	if (tail == rx_head) return -1;
    7a06:	cmp	r2, r1
    7a08:	beq.n	7a26 <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
    7a0a:	adds	r3, #1
	uint32_t i = rx_list[tail];
    7a0c:	ldr	r2, [pc, #36]	; (7a34 <usb_serial_peekchar+0x38>)
	if (++tail > RX_NUM) tail = 0;
    7a0e:	cmp	r3, #9
    7a10:	it	cs
    7a12:	movcs	r3, #0
	uint32_t i = rx_list[tail];
    7a14:	ldrb	r2, [r2, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    7a16:	ldr	r3, [pc, #32]	; (7a38 <usb_serial_peekchar+0x3c>)
    7a18:	ldrh.w	r1, [r3, r2, lsl #1]
    7a1c:	ldr	r3, [pc, #28]	; (7a3c <usb_serial_peekchar+0x40>)
    7a1e:	add.w	r3, r3, r2, lsl #9
    7a22:	ldrb	r0, [r3, r1]
    7a24:	bx	lr
	if (tail == rx_head) return -1;
    7a26:	mov.w	r0, #4294967295
}
    7a2a:	bx	lr
    7a2c:	.word	0x20007c25
    7a30:	.word	0x20007c13
    7a34:	.word	0x20007c15
    7a38:	.word	0x2000715c
    7a3c:	.word	0x20002720

00007a40 <usb_serial_available>:
	uint32_t n = rx_available;
    7a40:	ldr	r3, [pc, #12]	; (7a50 <usb_serial_available+0x10>)
{
    7a42:	push	{r4, lr}
	uint32_t n = rx_available;
    7a44:	ldr	r4, [r3, #0]
	if (n == 0) yield();
    7a46:	cbnz	r4, 7a4c <usb_serial_available+0xc>
    7a48:	bl	90ec <yield>
}
    7a4c:	mov	r0, r4
    7a4e:	pop	{r4, pc}
    7a50:	.word	0x200070c8

00007a54 <usb_serial_flush_input>:
{
    7a54:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t tail = rx_tail;
    7a58:	ldr	r5, [pc, #64]	; (7a9c <usb_serial_flush_input+0x48>)
	while (tail != rx_head) {
    7a5a:	ldr	r7, [pc, #68]	; (7aa0 <usb_serial_flush_input+0x4c>)
	uint32_t tail = rx_tail;
    7a5c:	ldrb	r4, [r5, #0]
		uint32_t i = rx_list[tail];
    7a5e:	ldr.w	r8, [pc, #80]	; 7ab0 <usb_serial_flush_input+0x5c>
	uint32_t tail = rx_tail;
    7a62:	uxtb	r4, r4
		rx_available -= rx_count[i] - rx_index[i];
    7a64:	ldr	r6, [pc, #60]	; (7aa4 <usb_serial_flush_input+0x50>)
	while (tail != rx_head) {
    7a66:	ldrb	r3, [r7, #0]
    7a68:	cmp	r3, r4
    7a6a:	bne.n	7a70 <usb_serial_flush_input+0x1c>
}
    7a6c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (++tail > RX_NUM) tail = 0;
    7a70:	adds	r4, #1
		rx_available -= rx_count[i] - rx_index[i];
    7a72:	ldr	r2, [pc, #52]	; (7aa8 <usb_serial_flush_input+0x54>)
    7a74:	ldr	r1, [pc, #52]	; (7aac <usb_serial_flush_input+0x58>)
		if (++tail > RX_NUM) tail = 0;
    7a76:	cmp	r4, #9
		rx_available -= rx_count[i] - rx_index[i];
    7a78:	ldr	r3, [r6, #0]
		if (++tail > RX_NUM) tail = 0;
    7a7a:	it	cs
    7a7c:	movcs	r4, #0
		uint32_t i = rx_list[tail];
    7a7e:	ldrb.w	r0, [r8, r4]
		rx_available -= rx_count[i] - rx_index[i];
    7a82:	ldrh.w	r2, [r2, r0, lsl #1]
    7a86:	ldrh.w	r1, [r1, r0, lsl #1]
    7a8a:	subs	r2, r2, r1
    7a8c:	subs	r3, r3, r2
    7a8e:	str	r3, [r6, #0]
		rx_queue_transfer(i);
    7a90:	bl	76a0 <rx_queue_transfer>
		rx_tail = tail;
    7a94:	uxtb	r3, r4
    7a96:	strb	r3, [r5, #0]
    7a98:	b.n	7a66 <usb_serial_flush_input+0x12>
    7a9a:	nop
    7a9c:	.word	0x20007c25
    7aa0:	.word	0x20007c13
    7aa4:	.word	0x200070c8
    7aa8:	.word	0x20007140
    7aac:	.word	0x2000715c
    7ab0:	.word	0x20007c15

00007ab4 <usb_serial_getchar>:
{
    7ab4:	push	{r0, r1, r2, lr}
	if (usb_serial_read(&c, 1)) return c;
    7ab6:	movs	r1, #1
    7ab8:	add.w	r0, sp, #7
    7abc:	bl	7928 <usb_serial_read>
    7ac0:	cbz	r0, 7acc <usb_serial_getchar+0x18>
    7ac2:	ldrb.w	r0, [sp, #7]
}
    7ac6:	add	sp, #12
    7ac8:	ldr.w	pc, [sp], #4
	return -1;
    7acc:	mov.w	r0, #4294967295
    7ad0:	b.n	7ac6 <usb_serial_getchar+0x12>
	...

00007ad4 <usb_serial_write>:
	if (!usb_configuration) return 0;
    7ad4:	ldr	r3, [pc, #356]	; (7c3c <usb_serial_write+0x168>)
{
    7ad6:	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!usb_configuration) return 0;
    7ada:	ldrb	r3, [r3, #0]
{
    7adc:	mov	r6, r0
    7ade:	mov	r5, r1
	if (!usb_configuration) return 0;
    7ae0:	and.w	r4, r3, #255	; 0xff
    7ae4:	cmp	r3, #0
    7ae6:	beq.w	7bfa <usb_serial_write+0x126>
	uint32_t sent=0;
    7aea:	movs	r4, #0
		tx_noautoflush = 1;
    7aec:	ldr.w	fp, [pc, #360]	; 7c58 <usb_serial_write+0x184>
	while (size > 0) {
    7af0:	cmp	r5, #0
    7af2:	beq.w	7bfa <usb_serial_write+0x126>
		tx_noautoflush = 1;
    7af6:	movs	r3, #1
		transfer_t *xfer = tx_transfer + tx_head;
    7af8:	ldr.w	r9, [pc, #352]	; 7c5c <usb_serial_write+0x188>
		while (!tx_available) {
    7afc:	ldr	r7, [pc, #320]	; (7c40 <usb_serial_write+0x16c>)
		transfer_t *xfer = tx_transfer + tx_head;
    7afe:	ldrb.w	sl, [r9]
		tx_noautoflush = 1;
    7b02:	strb.w	r3, [fp]
		transfer_t *xfer = tx_transfer + tx_head;
    7b06:	ldr	r3, [pc, #316]	; (7c44 <usb_serial_write+0x170>)
    7b08:	add.w	sl, r3, sl, lsl #5
		uint32_t wait_begin_at=0;
    7b0c:	movs	r3, #0
		int waiting=0;
    7b0e:	mov	r8, r3
		while (!tx_available) {
    7b10:	ldrh	r1, [r7, #0]
    7b12:	cbnz	r1, 7b32 <usb_serial_write+0x5e>
			uint32_t status = usb_transfer_status(xfer);
    7b14:	mov	r0, sl
    7b16:	strd	r3, r1, [sp]
    7b1a:	bl	88c8 <usb_transfer_status>
			if (!(status & 0x80)) {
    7b1e:	ands.w	r0, r0, #128	; 0x80
    7b22:	ldr	r2, [pc, #292]	; (7c48 <usb_serial_write+0x174>)
    7b24:	ldrd	r3, r1, [sp]
    7b28:	bne.n	7bd6 <usb_serial_write+0x102>
				tx_available = TX_SIZE;
    7b2a:	mov.w	r3, #2048	; 0x800
				transmit_previous_timeout = 0;
    7b2e:	strb	r0, [r2, #0]
				tx_available = TX_SIZE;
    7b30:	strh	r3, [r7, #0]
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    7b32:	ldrh.w	r8, [r7]
    7b36:	ldrb.w	r3, [r9]
    7b3a:	rsb	r0, r8, #2048	; 0x800
		if (size >= tx_available) {
    7b3e:	cmp	r8, r5
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    7b40:	mov.w	r2, r3, lsl #11
    7b44:	add.w	r0, r0, r3, lsl #11
    7b48:	ldr	r3, [pc, #256]	; (7c4c <usb_serial_write+0x178>)
    7b4a:	str	r2, [sp, #0]
    7b4c:	add	r0, r3
		if (size >= tx_available) {
    7b4e:	bhi.n	7c1c <usb_serial_write+0x148>
			memcpy(txdata, data, tx_available);
    7b50:	mov	r2, r8
    7b52:	mov	r1, r6
    7b54:	bl	756c <memcpy>
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    7b58:	ldr	r2, [sp, #0]
    7b5a:	ldr	r3, [pc, #240]	; (7c4c <usb_serial_write+0x178>)
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    7b5c:	mov	r0, sl
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    7b5e:	add	r2, r3
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    7b60:	movs	r3, #0
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    7b62:	mov	r8, r2
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    7b64:	mov.w	r2, #2048	; 0x800
    7b68:	mov	r1, r8
    7b6a:	bl	885c <usb_prepare_transfer>
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    7b6e:	mov	r1, r8
	asm("dsb");
    7b70:	dsb	sy
	uint32_t end_addr = (uint32_t)addr + size;
    7b74:	add.w	r2, r8, #2048	; 0x800
    7b78:	add.w	r3, r8, #32
    7b7c:	cmp	r3, r2
    7b7e:	ite	hi
    7b80:	movhi	r3, #1
    7b82:	movls	r3, #64	; 0x40
		SCB_CACHE_DCCIMVAC = location;
    7b84:	mov.w	r2, #3758153728	; 0xe000e000
    7b88:	add.w	r3, r8, r3, lsl #5
    7b8c:	str.w	r1, [r2, #3952]	; 0xf70
		location += 32;
    7b90:	adds	r1, #32
	} while (location < end_addr);
    7b92:	cmp	r1, r3
    7b94:	bne.n	7b8c <usb_serial_write+0xb8>
	asm("dsb");
    7b96:	dsb	sy
	asm("isb");
    7b9a:	isb	sy
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    7b9e:	movs	r0, #3
    7ba0:	mov	r1, sl
    7ba2:	bl	8888 <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    7ba6:	ldrb.w	r3, [r9]
	USB1_GPTIMER0CTRL = 0;
    7baa:	ldr	r2, [pc, #164]	; (7c50 <usb_serial_write+0x17c>)
			if (++tx_head >= TX_NUM) tx_head = 0;
    7bac:	adds	r3, #1
    7bae:	uxtb	r3, r3
    7bb0:	cmp	r3, #3
    7bb2:	it	hi
    7bb4:	movhi	r3, #0
    7bb6:	strb.w	r3, [r9]
			size -= tx_available;
    7bba:	ldrh	r3, [r7, #0]
    7bbc:	subs	r5, r5, r3
			sent += tx_available;
    7bbe:	add	r4, r3
			data += tx_available;
    7bc0:	add	r6, r3
			tx_available = 0;
    7bc2:	movs	r3, #0
    7bc4:	strh	r3, [r7, #0]
	USB1_GPTIMER0CTRL = 0;
    7bc6:	str.w	r3, [r2, #132]	; 0x84
		asm("dsb" ::: "memory");
    7bca:	dsb	sy
		tx_noautoflush = 0;
    7bce:	movs	r3, #0
    7bd0:	strb.w	r3, [fp]
    7bd4:	b.n	7af0 <usb_serial_write+0x1c>
			asm("dsb" ::: "memory");
    7bd6:	dsb	sy
			tx_noautoflush = 0;
    7bda:	strb.w	r1, [fp]
			if (!waiting) {
    7bde:	cmp.w	r8, #0
    7be2:	bne.n	7be8 <usb_serial_write+0x114>
				wait_begin_at = systick_millis_count;
    7be4:	ldr	r3, [pc, #108]	; (7c54 <usb_serial_write+0x180>)
    7be6:	ldr	r3, [r3, #0]
			if (transmit_previous_timeout) return sent;
    7be8:	ldrb	r1, [r2, #0]
    7bea:	cbnz	r1, 7bfa <usb_serial_write+0x126>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    7bec:	ldr	r1, [pc, #100]	; (7c54 <usb_serial_write+0x180>)
    7bee:	ldr	r1, [r1, #0]
    7bf0:	subs	r1, r1, r3
    7bf2:	cmp	r1, #120	; 0x78
    7bf4:	bls.n	7c02 <usb_serial_write+0x12e>
				transmit_previous_timeout = 1;
    7bf6:	movs	r3, #1
    7bf8:	strb	r3, [r2, #0]
}
    7bfa:	mov	r0, r4
    7bfc:	add	sp, #12
    7bfe:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (!usb_configuration) return sent;
    7c02:	ldr	r1, [pc, #56]	; (7c3c <usb_serial_write+0x168>)
    7c04:	ldrb	r1, [r1, #0]
    7c06:	cmp	r1, #0
    7c08:	beq.n	7bfa <usb_serial_write+0x126>
			tx_noautoflush = 1;
    7c0a:	mov.w	r8, #1
    7c0e:	str	r3, [sp, #0]
			yield();
    7c10:	bl	90ec <yield>
			tx_noautoflush = 1;
    7c14:	ldr	r3, [sp, #0]
    7c16:	strb.w	r8, [fp]
    7c1a:	b.n	7b10 <usb_serial_write+0x3c>
			memcpy(txdata, data, size);
    7c1c:	mov	r2, r5
    7c1e:	mov	r1, r6
    7c20:	bl	756c <memcpy>
			tx_available -= size;
    7c24:	sub.w	r8, r8, r5
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    7c28:	ldr	r3, [pc, #36]	; (7c50 <usb_serial_write+0x17c>)
    7c2a:	mov.w	r2, #3221225472	; 0xc0000000
			sent += size;
    7c2e:	add	r4, r5
			tx_available -= size;
    7c30:	strh.w	r8, [r7]
			size = 0;
    7c34:	movs	r5, #0
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    7c36:	str.w	r2, [r3, #132]	; 0x84
}
    7c3a:	b.n	7bca <usb_serial_write+0xf6>
    7c3c:	.word	0x20007c33
    7c40:	.word	0x2000717c
    7c44:	.word	0x20003920
    7c48:	.word	0x20007c28
    7c4c:	.word	0x20003a40
    7c50:	.word	0x402e0000
    7c54:	.word	0x200070e8
    7c58:	.word	0x20007c2c
    7c5c:	.word	0x20007c2a

00007c60 <usb_serial_putchar>:
{
    7c60:	push	{r0, r1, r2, lr}
	return usb_serial_write(&c, 1);
    7c62:	movs	r1, #1
{
    7c64:	strb.w	r0, [sp, #7]
	return usb_serial_write(&c, 1);
    7c68:	add.w	r0, sp, #7
    7c6c:	bl	7ad4 <usb_serial_write>
}
    7c70:	add	sp, #12
    7c72:	ldr.w	pc, [sp], #4
	...

00007c78 <usb_serial_write_buffer_free>:
{
    7c78:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (uint32_t i=0; i < TX_NUM; i++) {
    7c7c:	movs	r4, #0
	tx_noautoflush = 1;
    7c7e:	ldr	r7, [pc, #56]	; (7cb8 <usb_serial_write_buffer_free+0x40>)
    7c80:	movs	r3, #1
    7c82:	ldr	r6, [pc, #56]	; (7cbc <usb_serial_write_buffer_free+0x44>)
	uint32_t sum = 0;
    7c84:	mov	r5, r4
		if (i == tx_head) continue;
    7c86:	ldr.w	r8, [pc, #56]	; 7cc0 <usb_serial_write_buffer_free+0x48>
	tx_noautoflush = 1;
    7c8a:	strb	r3, [r7, #0]
		if (i == tx_head) continue;
    7c8c:	ldrb.w	r3, [r8]
    7c90:	cmp	r3, r4
    7c92:	beq.n	7ca2 <usb_serial_write_buffer_free+0x2a>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    7c94:	mov	r0, r6
    7c96:	bl	88c8 <usb_transfer_status>
    7c9a:	lsls	r3, r0, #24
    7c9c:	it	pl
    7c9e:	addpl.w	r5, r5, #2048	; 0x800
	for (uint32_t i=0; i < TX_NUM; i++) {
    7ca2:	adds	r4, #1
    7ca4:	adds	r6, #32
    7ca6:	cmp	r4, #4
    7ca8:	bne.n	7c8c <usb_serial_write_buffer_free+0x14>
	asm("dsb" ::: "memory");
    7caa:	dsb	sy
	tx_noautoflush = 0;
    7cae:	movs	r3, #0
}
    7cb0:	mov	r0, r5
	tx_noautoflush = 0;
    7cb2:	strb	r3, [r7, #0]
}
    7cb4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7cb8:	.word	0x20007c2c
    7cbc:	.word	0x20003920
    7cc0:	.word	0x20007c2a

00007cc4 <usb_serial_flush_output>:
{
    7cc4:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!usb_configuration) return;
    7cc8:	ldr	r3, [pc, #116]	; (7d40 <usb_serial_flush_output+0x7c>)
    7cca:	ldrb	r3, [r3, #0]
    7ccc:	cbz	r3, 7d3c <usb_serial_flush_output+0x78>
	if (tx_available == 0) return;
    7cce:	ldr.w	r8, [pc, #132]	; 7d54 <usb_serial_flush_output+0x90>
    7cd2:	ldrh.w	r5, [r8]
    7cd6:	cbz	r5, 7d3c <usb_serial_flush_output+0x78>
	tx_noautoflush = 1;
    7cd8:	ldr	r7, [pc, #104]	; (7d44 <usb_serial_flush_output+0x80>)
    7cda:	movs	r3, #1
	transfer_t *xfer = tx_transfer + tx_head;
    7cdc:	ldr	r6, [pc, #104]	; (7d48 <usb_serial_flush_output+0x84>)
	uint32_t txnum = TX_SIZE - tx_available;
    7cde:	rsb	r5, r5, #2048	; 0x800
	tx_noautoflush = 1;
    7ce2:	strb	r3, [r7, #0]
	transfer_t *xfer = tx_transfer + tx_head;
    7ce4:	ldr	r2, [pc, #100]	; (7d4c <usb_serial_flush_output+0x88>)
    7ce6:	ldrb	r3, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    7ce8:	ldr	r4, [pc, #100]	; (7d50 <usb_serial_flush_output+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    7cea:	add.w	r9, r2, r3, lsl #5
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    7cee:	mov	r2, r5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    7cf0:	add.w	r4, r4, r3, lsl #11
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    7cf4:	movs	r3, #0
    7cf6:	mov	r0, r9
    7cf8:	mov	r1, r4
	uint32_t end_addr = (uint32_t)addr + size;
    7cfa:	add	r5, r4
    7cfc:	bl	885c <usb_prepare_transfer>
	asm("dsb");
    7d00:	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    7d04:	mov.w	r3, #3758153728	; 0xe000e000
    7d08:	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    7d0c:	adds	r4, #32
	} while (location < end_addr);
    7d0e:	cmp	r5, r4
    7d10:	bhi.n	7d08 <usb_serial_flush_output+0x44>
	asm("dsb");
    7d12:	dsb	sy
	asm("isb");
    7d16:	isb	sy
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    7d1a:	movs	r0, #3
    7d1c:	mov	r1, r9
    7d1e:	bl	8888 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    7d22:	ldrb	r3, [r6, #0]
    7d24:	movs	r2, #0
    7d26:	adds	r3, #1
	tx_available = 0;
    7d28:	strh.w	r2, [r8]
	if (++tx_head >= TX_NUM) tx_head = 0;
    7d2c:	uxtb	r3, r3
    7d2e:	cmp	r3, #3
    7d30:	ite	ls
    7d32:	strbls	r3, [r6, #0]
    7d34:	strbhi	r2, [r6, #0]
	asm("dsb" ::: "memory");
    7d36:	dsb	sy
	tx_noautoflush = 0;
    7d3a:	strb	r2, [r7, #0]
}
    7d3c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    7d40:	.word	0x20007c33
    7d44:	.word	0x20007c2c
    7d48:	.word	0x20007c2a
    7d4c:	.word	0x20003920
    7d50:	.word	0x20003a40
    7d54:	.word	0x2000717c

00007d58 <set_arm_clock>:
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    7d58:	ldr	r3, [pc, #512]	; (7f5c <set_arm_clock+0x204>)
{
    7d5a:	push	{r4, r5, r6, r7, lr}
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    7d5c:	ldr	r1, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    7d5e:	ldr	r5, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    7d60:	sub.w	r3, r3, #507904	; 0x7c000
    7d64:	ldr	r4, [r3, #12]

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    7d66:	ldr	r3, [pc, #504]	; (7f60 <set_arm_clock+0x208>)
    7d68:	cmp	r0, r3
    7d6a:	bls.w	7f2c <set_arm_clock+0x1d4>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    7d6e:	ldr	r3, [pc, #500]	; (7f64 <set_arm_clock+0x20c>)
    7d70:	cmp	r0, r3
    7d72:	bls.w	7f3e <set_arm_clock+0x1e6>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    7d76:	ldr	r2, [pc, #496]	; (7f68 <set_arm_clock+0x210>)
    7d78:	subs	r3, r0, r3
    7d7a:	udiv	r3, r3, r2
    7d7e:	movs	r2, #25
    7d80:	muls	r3, r2
    7d82:	movw	r2, #1575	; 0x627
    7d86:	addw	r3, r3, #1250	; 0x4e2
    7d8a:	cmp	r3, r2
    7d8c:	it	cs
    7d8e:	movcs	r3, r2
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    7d90:	ldr	r6, [pc, #456]	; (7f5c <set_arm_clock+0x204>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    7d92:	sub.w	r3, r3, #800	; 0x320
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    7d96:	ldr.w	r2, [r6, #128]	; 0x80
    7d9a:	orr.w	r2, r2, #192	; 0xc0
    7d9e:	str.w	r2, [r6, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    7da2:	movs	r2, #25
    7da4:	udiv	r2, r3, r2
    7da8:	and.w	r3, r4, #31
    7dac:	cmp	r3, r2
    7dae:	bcs.n	7dc0 <set_arm_clock+0x68>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    7db0:	bic.w	r4, r4, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    7db4:	ldr	r3, [pc, #436]	; (7f6c <set_arm_clock+0x214>)
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    7db6:	orrs	r4, r2
		DCDC_REG3 = dcdc;
    7db8:	str	r4, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    7dba:	ldr	r6, [r3, #0]
    7dbc:	cmp	r6, #0
    7dbe:	bge.n	7dba <set_arm_clock+0x62>
	}

	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    7dc0:	ands.w	r3, r1, #33554432	; 0x2000000
    7dc4:	bne.n	7e18 <set_arm_clock+0xc0>
		printf("need to switch to alternate clock during reconfigure of ARM PLL\n");
		const uint32_t need1s = CCM_ANALOG_PLL_USB1_ENABLE | CCM_ANALOG_PLL_USB1_POWER |
			CCM_ANALOG_PLL_USB1_LOCK | CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
		uint32_t sel, div;
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    7dc6:	ldr	r6, [pc, #424]	; (7f70 <set_arm_clock+0x218>)
    7dc8:	ldr	r7, [pc, #424]	; (7f74 <set_arm_clock+0x21c>)
    7dca:	ldr	r6, [r6, #16]
    7dcc:	ands	r6, r7
			sel = 0;
			div = 3; // divide down to 120 MHz, so IPG is ok even if IPG_PODF=0
		} else {
			printf("USB PLL is off, use 24 MHz crystal\n");
			sel = 1;
			div = 0;
    7dce:	cmp	r6, r7
    7dd0:	itee	eq
    7dd2:	moveq	r6, #3
    7dd4:	movne	r6, #0
    7dd6:	movne	r3, #1
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    7dd8:	lsls	r7, r6, #27
    7dda:	eor.w	r6, r1, r6, lsl #27
    7dde:	tst.w	r6, #939524096	; 0x38000000
    7de2:	beq.n	7dee <set_arm_clock+0x96>
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    7de4:	bic.w	r1, r1, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
			CCM_CBCDR = cbcdr;
    7de8:	ldr	r6, [pc, #368]	; (7f5c <set_arm_clock+0x204>)
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    7dea:	orrs	r1, r7
			CCM_CBCDR = cbcdr;
    7dec:	str	r1, [r6, #20]
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    7dee:	lsls	r6, r3, #12
    7df0:	eor.w	r3, r5, r3, lsl #12
    7df4:	tst.w	r3, #12288	; 0x3000
    7df8:	beq.n	7e0a <set_arm_clock+0xb2>
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    7dfa:	bic.w	r5, r5, #12288	; 0x3000
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    7dfe:	orrs	r6, r5
			CCM_CBCMR = cbcmr;
    7e00:	ldr	r5, [pc, #344]	; (7f5c <set_arm_clock+0x204>)
    7e02:	str	r6, [r5, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    7e04:	ldr	r3, [r5, #72]	; 0x48
    7e06:	lsls	r6, r3, #28
    7e08:	bmi.n	7e04 <set_arm_clock+0xac>
		}
		// switch over to PERIPH_CLK2
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    7e0a:	orr.w	r1, r1, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    7e0e:	ldr	r3, [pc, #332]	; (7f5c <set_arm_clock+0x204>)
    7e10:	str	r1, [r3, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    7e12:	ldr	r5, [r3, #72]	; 0x48
    7e14:	lsls	r5, r5, #26
    7e16:	bmi.n	7e12 <set_arm_clock+0xba>

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
    7e18:	movs	r6, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    7e1a:	ldr	r7, [pc, #348]	; (7f78 <set_arm_clock+0x220>)
	uint32_t div_arm = 1;
    7e1c:	mov	r5, r6
	while (frequency * div_arm * div_ahb < 648000000) {
    7e1e:	mul.w	r3, r6, r5
    7e22:	muls	r3, r0
    7e24:	cmp	r3, r7
    7e26:	bls.w	7f44 <set_arm_clock+0x1ec>
			} else {
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    7e2a:	add.w	r3, r3, #5996544	; 0x5b8000
	if (mult > 108) mult = 108;
    7e2e:	ldr	r0, [pc, #332]	; (7f7c <set_arm_clock+0x224>)
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    7e30:	add.w	r3, r3, #3456	; 0xd80
	if (mult > 108) mult = 108;
    7e34:	cmp	r3, r0
    7e36:	ldr	r0, [pc, #328]	; (7f80 <set_arm_clock+0x228>)
    7e38:	bhi.w	7f58 <set_arm_clock+0x200>
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    7e3c:	udiv	r3, r3, r0
    7e40:	cmp	r3, #54	; 0x36
    7e42:	it	cc
    7e44:	movcc	r3, #54	; 0x36

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    7e46:	ldr	r7, [pc, #296]	; (7f70 <set_arm_clock+0x218>)
	frequency = mult * 12000000 / div_arm / div_ahb;
    7e48:	muls	r0, r3
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    7e4a:	ldr.w	lr, [pc, #344]	; 7fa4 <set_arm_clock+0x24c>
    7e4e:	ldr.w	ip, [r7]
    7e52:	and.w	lr, ip, lr
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    7e56:	orr.w	ip, r3, #2147483648	; 0x80000000
	frequency = mult * 12000000 / div_arm / div_ahb;
    7e5a:	udiv	r0, r0, r5
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    7e5e:	orr.w	ip, ip, #8192	; 0x2000
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    7e62:	cmp	lr, ip
	frequency = mult * 12000000 / div_arm / div_ahb;
    7e64:	udiv	r0, r0, r6
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    7e68:	beq.n	7e7e <set_arm_clock+0x126>
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    7e6a:	mov.w	ip, #4096	; 0x1000
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    7e6e:	orr.w	r3, r3, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    7e72:	str.w	ip, [r7]
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    7e76:	str	r3, [r7, #0]
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    7e78:	ldr	r3, [r7, #0]
    7e7a:	cmp	r3, #0
    7e7c:	bge.n	7e78 <set_arm_clock+0x120>
		printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    7e7e:	ldr	r3, [pc, #220]	; (7f5c <set_arm_clock+0x204>)
    7e80:	subs	r5, #1
    7e82:	ldr	r7, [r3, #16]
    7e84:	and.w	r7, r7, #7
    7e88:	cmp	r7, r5
    7e8a:	beq.n	7e94 <set_arm_clock+0x13c>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    7e8c:	str	r5, [r3, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    7e8e:	ldr	r5, [r3, #72]	; 0x48
    7e90:	lsls	r7, r5, #15
    7e92:	bmi.n	7e8e <set_arm_clock+0x136>
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    7e94:	subs	r3, r6, #1
    7e96:	lsls	r5, r3, #10
    7e98:	eor.w	r3, r1, r3, lsl #10
    7e9c:	tst.w	r3, #7168	; 0x1c00
    7ea0:	beq.n	7eb6 <set_arm_clock+0x15e>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    7ea2:	and.w	r3, r5, #7168	; 0x1c00
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    7ea6:	bic.w	r1, r1, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    7eaa:	orrs	r1, r3
		CCM_CBCDR = cbcdr;
    7eac:	ldr	r3, [pc, #172]	; (7f5c <set_arm_clock+0x204>)
    7eae:	str	r1, [r3, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    7eb0:	ldr	r5, [r3, #72]	; 0x48
    7eb2:	lsls	r5, r5, #30
    7eb4:	bmi.n	7eb0 <set_arm_clock+0x158>
	}

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    7eb6:	ldr	r3, [pc, #204]	; (7f84 <set_arm_clock+0x22c>)
	if (div_ipg > 4) div_ipg = 4;
    7eb8:	ldr	r5, [pc, #204]	; (7f88 <set_arm_clock+0x230>)
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    7eba:	add	r3, r0
	if (div_ipg > 4) div_ipg = 4;
    7ebc:	cmp	r3, r5
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    7ebe:	itet	ls
    7ec0:	ldrls	r5, [pc, #200]	; (7f8c <set_arm_clock+0x234>)
	if (div_ipg > 4) div_ipg = 4;
    7ec2:	movhi	r3, #4
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    7ec4:	udivls	r3, r3, r5
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    7ec8:	subs	r6, r3, #1
    7eca:	lsls	r5, r6, #8
    7ecc:	eor.w	r6, r1, r6, lsl #8
    7ed0:	tst.w	r6, #768	; 0x300
    7ed4:	ldr	r6, [pc, #132]	; (7f5c <set_arm_clock+0x204>)
    7ed6:	beq.n	7ee4 <set_arm_clock+0x18c>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    7ed8:	bic.w	r1, r1, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    7edc:	and.w	r5, r5, #768	; 0x300
    7ee0:	orrs	r1, r5
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    7ee2:	str	r1, [r6, #20]
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    7ee4:	ldr	r1, [r6, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    7ee6:	ldr	r5, [pc, #116]	; (7f5c <set_arm_clock+0x204>)
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    7ee8:	bic.w	r1, r1, #33554432	; 0x2000000
    7eec:	str	r1, [r6, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    7eee:	ldr	r1, [r5, #72]	; 0x48
    7ef0:	lsls	r1, r1, #26
    7ef2:	bmi.n	7eee <set_arm_clock+0x196>

	F_CPU_ACTUAL = frequency;
    7ef4:	ldr	r1, [pc, #152]	; (7f90 <set_arm_clock+0x238>)
	F_BUS_ACTUAL = frequency / div_ipg;
    7ef6:	udiv	r3, r0, r3
	F_CPU_ACTUAL = frequency;
    7efa:	str	r0, [r1, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
    7efc:	ldr	r1, [pc, #148]	; (7f94 <set_arm_clock+0x23c>)
    7efe:	str	r3, [r1, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    7f00:	mov.w	r3, #4294967295
    7f04:	ldr	r1, [pc, #144]	; (7f98 <set_arm_clock+0x240>)
    7f06:	udiv	r1, r0, r1
    7f0a:	udiv	r3, r3, r1
    7f0e:	ldr	r1, [pc, #140]	; (7f9c <set_arm_clock+0x244>)
    7f10:	str	r3, [r1, #0]

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    7f12:	and.w	r3, r4, #31
    7f16:	cmp	r2, r3
    7f18:	bcs.n	7f2a <set_arm_clock+0x1d2>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    7f1a:	bic.w	r4, r4, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    7f1e:	ldr	r3, [pc, #76]	; (7f6c <set_arm_clock+0x214>)
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    7f20:	orrs	r2, r4
		DCDC_REG3 = dcdc;
    7f22:	str	r2, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    7f24:	ldr	r2, [r3, #0]
    7f26:	cmp	r2, #0
    7f28:	bge.n	7f24 <set_arm_clock+0x1cc>
	}

	return frequency;
}
    7f2a:	pop	{r4, r5, r6, r7, pc}
		voltage = 950; // 0.95
    7f2c:	ldr	r6, [pc, #112]	; (7fa0 <set_arm_clock+0x248>)
    7f2e:	movw	r3, #1150	; 0x47e
    7f32:	movw	r2, #950	; 0x3b6
    7f36:	cmp	r0, r6
    7f38:	it	ls
    7f3a:	movls	r3, r2
    7f3c:	b.n	7d90 <set_arm_clock+0x38>
		voltage = 1250; // 1.25V
    7f3e:	movw	r3, #1250	; 0x4e2
    7f42:	b.n	7d90 <set_arm_clock+0x38>
		if (div_arm < 8) {
    7f44:	cmp	r5, #8
    7f46:	beq.n	7f4c <set_arm_clock+0x1f4>
			div_arm = div_arm + 1;
    7f48:	adds	r5, #1
    7f4a:	b.n	7e1e <set_arm_clock+0xc6>
			if (div_ahb < 5) {
    7f4c:	cmp	r6, #4
    7f4e:	bhi.w	7e2a <set_arm_clock+0xd2>
				div_ahb = div_ahb + 1;
    7f52:	adds	r6, #1
				div_arm = 1;
    7f54:	movs	r5, #1
    7f56:	b.n	7e1e <set_arm_clock+0xc6>
	if (mult > 108) mult = 108;
    7f58:	movs	r3, #108	; 0x6c
    7f5a:	b.n	7e46 <set_arm_clock+0xee>
    7f5c:	.word	0x400fc000
    7f60:	.word	0x1f78a400
    7f64:	.word	0x23c34600
    7f68:	.word	0x01ab3f00
    7f6c:	.word	0x40080000
    7f70:	.word	0x400d8000
    7f74:	.word	0x80003040
    7f78:	.word	0x269fb1ff
    7f7c:	.word	0x4df67eff
    7f80:	.word	0x00b71b00
    7f84:	.word	0x08f0d17f
    7f88:	.word	0x2cb4177f
    7f8c:	.word	0x08f0d180
    7f90:	.word	0x20001bc0
    7f94:	.word	0x20001bbc
    7f98:	.word	0x000f4240
    7f9c:	.word	0x200070e0
    7fa0:	.word	0x016e3600
    7fa4:	.word	0x8001307f

00007fa8 <endpoint0_receive>:
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
	while (USB1_ENDPTPRIME) ;
}

static void endpoint0_receive(void *data, uint32_t len, int notify)
{
    7fa8:	push	{r4, r5, lr}
    7faa:	ldr	r4, [pc, #136]	; (8034 <endpoint0_receive+0x8c>)
	//printf("rx %lu\n", len);
	if (len > 0) {
    7fac:	cbz	r1, 7ff0 <endpoint0_receive+0x48>
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    7fae:	lsls	r1, r1, #16
		endpoint0_transfer_data.next = 1;
    7fb0:	ldr	r3, [pc, #132]	; (8038 <endpoint0_receive+0x90>)
    7fb2:	movs	r5, #1
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    7fb4:	orr.w	r1, r1, #128	; 0x80
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    7fb8:	str	r0, [r3, #8]
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    7fba:	str	r3, [r4, #8]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    7fbc:	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    7fbe:	add.w	r1, r0, #4096	; 0x1000
		endpoint0_transfer_data.next = 1;
    7fc2:	str	r5, [r3, #0]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    7fc4:	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    7fc6:	add.w	r1, r0, #8192	; 0x2000
    7fca:	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    7fcc:	add.w	r1, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    7fd0:	add.w	r0, r0, #16384	; 0x4000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    7fd4:	str	r1, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    7fd6:	str	r0, [r3, #24]
		endpoint_queue_head[0].status = 0;
    7fd8:	movs	r3, #0
    7fda:	str	r3, [r4, #12]
		USB1_ENDPTPRIME |= (1<<0);
    7fdc:	ldr	r3, [pc, #92]	; (803c <endpoint0_receive+0x94>)
    7fde:	ldr.w	r1, [r3, #432]	; 0x1b0
    7fe2:	orrs	r1, r5
    7fe4:	str.w	r1, [r3, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    7fe8:	ldr.w	r1, [r3, #432]	; 0x1b0
    7fec:	cmp	r1, #0
    7fee:	bne.n	7fe8 <endpoint0_receive+0x40>
	}
	endpoint0_transfer_ack.next = 1;
    7ff0:	ldr	r3, [pc, #76]	; (8040 <endpoint0_receive+0x98>)
    7ff2:	movs	r1, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    7ff4:	cmp	r2, #0
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    7ff6:	mov.w	r2, r2, lsl #16
	endpoint0_transfer_ack.next = 1;
    7ffa:	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    7ffc:	movw	r1, #32896	; 0x8080
    8000:	it	eq
    8002:	moveq	r1, #128	; 0x80
    8004:	str	r1, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
    8006:	movs	r1, #0
	endpoint_queue_head[1].status = 0;
    8008:	strd	r3, r1, [r4, #72]	; 0x48
	endpoint0_transfer_ack.pointer0 = 0;
    800c:	str	r1, [r3, #8]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    800e:	mov.w	r1, #65537	; 0x10001
    8012:	ldr	r3, [pc, #40]	; (803c <endpoint0_receive+0x94>)
    8014:	str.w	r1, [r3, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    8018:	ldr.w	r1, [r3, #432]	; 0x1b0
    801c:	orr.w	r1, r1, #65536	; 0x10000
    8020:	str.w	r1, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    8024:	ldr	r1, [pc, #28]	; (8044 <endpoint0_receive+0x9c>)
    8026:	str	r2, [r1, #0]
	while (USB1_ENDPTPRIME) ;
    8028:	ldr.w	r2, [r3, #432]	; 0x1b0
    802c:	cmp	r2, #0
    802e:	bne.n	8028 <endpoint0_receive+0x80>
}
    8030:	pop	{r4, r5, pc}
    8032:	nop
    8034:	.word	0x20000000
    8038:	.word	0x20002700
    803c:	.word	0x402e0000
    8040:	.word	0x200026e0
    8044:	.word	0x20006cd4

00008048 <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    8048:	ldr	r3, [r0, #56]	; 0x38
{
    804a:	push	{r4, r5, r6, r7, lr}
	if (endpoint->callback_function) {
    804c:	cbz	r3, 8056 <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    804e:	ldr	r3, [r2, #4]
    8050:	orr.w	r3, r3, #32768	; 0x8000
    8054:	str	r3, [r2, #4]
	}
	__disable_irq();
    8056:	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    8058:	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    805a:	ldr	r3, [pc, #96]	; (80bc <schedule_transfer+0x74>)
    805c:	cbz	r4, 80a8 <schedule_transfer+0x60>
		last->next = (uint32_t)transfer;
    805e:	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    8060:	ldr.w	r4, [r3, #432]	; 0x1b0
    8064:	tst	r4, r1
    8066:	bne.n	80a2 <schedule_transfer+0x5a>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    8068:	ldr	r6, [pc, #84]	; (80c0 <schedule_transfer+0x78>)
    806a:	ldr	r7, [r6, #4]
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    806c:	ldr.w	r4, [r3, #320]	; 0x140
    8070:	orr.w	r4, r4, #16384	; 0x4000
    8074:	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    8078:	ldr.w	r4, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    807c:	ldr.w	r5, [r3, #320]	; 0x140
    8080:	lsls	r5, r5, #17
    8082:	bmi.n	808e <schedule_transfer+0x46>
    8084:	ldr	r5, [r6, #4]
    8086:	subs	r5, r5, r7
    8088:	cmp.w	r5, #2400	; 0x960
    808c:	bcc.n	806c <schedule_transfer+0x24>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    808e:	ands	r4, r1
    8090:	bne.n	80a2 <schedule_transfer+0x5a>
		//ret |= 0x02;
		endpoint->next = (uint32_t)transfer;
		endpoint->status = 0;
    8092:	strd	r2, r4, [r0, #8]
		USB1_ENDPTPRIME |= epmask;
    8096:	ldr	r4, [pc, #36]	; (80bc <schedule_transfer+0x74>)
    8098:	ldr.w	r3, [r4, #432]	; 0x1b0
    809c:	orrs	r3, r1
    809e:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
	USB1_ENDPTPRIME |= epmask;
	endpoint->first_transfer = transfer;
end:
	endpoint->last_transfer = transfer;
    80a2:	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    80a4:	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    80a6:	pop	{r4, r5, r6, r7, pc}
	endpoint->status = 0;
    80a8:	strd	r2, r4, [r0, #8]
	USB1_ENDPTPRIME |= epmask;
    80ac:	ldr.w	r4, [r3, #432]	; 0x1b0
    80b0:	orrs	r1, r4
    80b2:	str.w	r1, [r3, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    80b6:	str	r2, [r0, #48]	; 0x30
    80b8:	b.n	80a2 <schedule_transfer+0x5a>
    80ba:	nop
    80bc:	.word	0x402e0000
    80c0:	.word	0xe0001000

000080c4 <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    80c4:	push	{r4, r5, r6, lr}
    80c6:	mov	r4, r0
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    80c8:	ldr	r0, [r0, #48]	; 0x30
	if (first == NULL) return;
    80ca:	cbz	r0, 80dc <run_callbacks+0x18>
    80cc:	mov	r2, r0

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
    80ce:	movs	r5, #0
	transfer_t *t = first;
	while (1) {
		if (t->status & (1<<7)) {
    80d0:	ldr	r3, [r2, #4]
    80d2:	ands.w	r3, r3, #128	; 0x80
    80d6:	beq.n	80de <run_callbacks+0x1a>
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
    80d8:	str	r2, [r4, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    80da:	cbnz	r5, 80ec <run_callbacks+0x28>
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
		first = next;
		count--;
	}
}
    80dc:	pop	{r4, r5, r6, pc}
		t = (transfer_t *)t->next;
    80de:	ldr	r2, [r2, #0]
		count++;
    80e0:	adds	r5, #1
		if ((uint32_t)t == 1) {
    80e2:	cmp	r2, #1
    80e4:	bne.n	80d0 <run_callbacks+0xc>
			ep->last_transfer = NULL;
    80e6:	strd	r3, r3, [r4, #48]	; 0x30
			break;
    80ea:	b.n	80da <run_callbacks+0x16>
		transfer_t *next = (transfer_t *)first->next;
    80ec:	ldr	r6, [r0, #0]
		count--;
    80ee:	subs	r5, #1
		ep->callback_function(first);
    80f0:	ldr	r3, [r4, #56]	; 0x38
    80f2:	blx	r3
		first = next;
    80f4:	mov	r0, r6
    80f6:	b.n	80da <run_callbacks+0x16>

000080f8 <usb_endpoint_config>:
{
    80f8:	push	{r4, r5, r6, lr}
    80fa:	mov	r4, r0
    80fc:	mov	r6, r1
    80fe:	mov	r5, r2
	memset(qh, 0, sizeof(endpoint_t));
    8100:	movs	r1, #0
    8102:	movs	r2, #60	; 0x3c
    8104:	adds	r0, #4
    8106:	bl	7528 <memset>
	qh->next = 1; // Terminate bit = 1
    810a:	movs	r3, #1
	qh->config = config;
    810c:	str	r6, [r4, #0]
	qh->next = 1; // Terminate bit = 1
    810e:	str	r3, [r4, #8]
	qh->callback_function = callback;
    8110:	str	r5, [r4, #56]	; 0x38
}
    8112:	pop	{r4, r5, r6, pc}

00008114 <endpoint0_transmit.constprop.0>:
	if (len > 0) {
    8114:	ldr	r2, [pc, #124]	; (8194 <endpoint0_transmit.constprop.0+0x80>)
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    8116:	push	{r4, lr}
	if (len > 0) {
    8118:	cbz	r1, 815e <endpoint0_transmit.constprop.0+0x4a>
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    811a:	lsls	r1, r1, #16
		endpoint0_transfer_data.next = 1;
    811c:	ldr	r3, [pc, #120]	; (8198 <endpoint0_transmit.constprop.0+0x84>)
    811e:	movs	r4, #1
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    8120:	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    8124:	str	r0, [r3, #8]
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    8126:	str	r3, [r2, #72]	; 0x48
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    8128:	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    812a:	add.w	r1, r0, #4096	; 0x1000
		endpoint0_transfer_data.next = 1;
    812e:	str	r4, [r3, #0]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    8130:	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    8132:	add.w	r1, r0, #8192	; 0x2000
    8136:	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    8138:	add.w	r1, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    813c:	add.w	r0, r0, #16384	; 0x4000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    8140:	str	r1, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    8142:	str	r0, [r3, #24]
		endpoint_queue_head[1].status = 0;
    8144:	movs	r3, #0
    8146:	str	r3, [r2, #76]	; 0x4c
		USB1_ENDPTPRIME |= (1<<16);
    8148:	ldr	r3, [pc, #80]	; (819c <endpoint0_transmit.constprop.0+0x88>)
    814a:	ldr.w	r1, [r3, #432]	; 0x1b0
    814e:	orr.w	r1, r1, #65536	; 0x10000
    8152:	str.w	r1, [r3, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    8156:	ldr.w	r1, [r3, #432]	; 0x1b0
    815a:	cmp	r1, #0
    815c:	bne.n	8156 <endpoint0_transmit.constprop.0+0x42>
	endpoint0_transfer_ack.next = 1;
    815e:	ldr	r3, [pc, #64]	; (81a0 <endpoint0_transmit.constprop.0+0x8c>)
    8160:	movs	r1, #1
    8162:	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    8164:	movs	r1, #128	; 0x80
    8166:	str	r1, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
    8168:	movs	r1, #0
	endpoint_queue_head[0].status = 0;
    816a:	strd	r3, r1, [r2, #8]
	endpoint0_transfer_ack.pointer0 = 0;
    816e:	str	r1, [r3, #8]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    8170:	mov.w	r2, #65537	; 0x10001
    8174:	ldr	r3, [pc, #36]	; (819c <endpoint0_transmit.constprop.0+0x88>)
    8176:	str.w	r2, [r3, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    817a:	ldr.w	r2, [r3, #432]	; 0x1b0
    817e:	orr.w	r2, r2, #1
    8182:	str.w	r2, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    8186:	ldr	r2, [pc, #28]	; (81a4 <endpoint0_transmit.constprop.0+0x90>)
    8188:	str	r1, [r2, #0]
	while (USB1_ENDPTPRIME) ;
    818a:	ldr.w	r2, [r3, #432]	; 0x1b0
    818e:	cmp	r2, #0
    8190:	bne.n	818a <endpoint0_transmit.constprop.0+0x76>
}
    8192:	pop	{r4, pc}
    8194:	.word	0x20000000
    8198:	.word	0x20002700
    819c:	.word	0x402e0000
    81a0:	.word	0x200026e0
    81a4:	.word	0x20006cd4

000081a8 <usb_start_sof_interrupts>:
	__disable_irq();
    81a8:	cpsid	i
	sof_usage |= (1 << interface);
    81aa:	ldr	r2, [pc, #40]	; (81d4 <usb_start_sof_interrupts+0x2c>)
    81ac:	movs	r3, #1
    81ae:	lsl.w	r0, r3, r0
    81b2:	ldrb	r3, [r2, #0]
    81b4:	orrs	r0, r3
    81b6:	strb	r0, [r2, #0]
	uint32_t intr = USB1_USBINTR;
    81b8:	ldr	r2, [pc, #28]	; (81d8 <usb_start_sof_interrupts+0x30>)
    81ba:	ldr.w	r3, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    81be:	lsls	r1, r3, #24
    81c0:	bmi.n	81ce <usb_start_sof_interrupts+0x26>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    81c2:	movs	r1, #128	; 0x80
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    81c4:	orrs	r3, r1
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    81c6:	str.w	r1, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    81ca:	str.w	r3, [r2, #328]	; 0x148
	__enable_irq();
    81ce:	cpsie	i
}
    81d0:	bx	lr
    81d2:	nop
    81d4:	.word	0x20007c27
    81d8:	.word	0x402e0000

000081dc <usb_stop_sof_interrupts>:
	sof_usage &= ~(1 << interface);
    81dc:	movs	r3, #1
    81de:	ldr	r2, [pc, #32]	; (8200 <usb_stop_sof_interrupts+0x24>)
    81e0:	lsl.w	r0, r3, r0
    81e4:	ldrb	r3, [r2, #0]
    81e6:	bic.w	r0, r3, r0
    81ea:	strb	r0, [r2, #0]
	if (sof_usage == 0) {
    81ec:	cbnz	r0, 81fc <usb_stop_sof_interrupts+0x20>
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    81ee:	ldr	r2, [pc, #20]	; (8204 <usb_stop_sof_interrupts+0x28>)
    81f0:	ldr.w	r3, [r2, #328]	; 0x148
    81f4:	bic.w	r3, r3, #128	; 0x80
    81f8:	str.w	r3, [r2, #328]	; 0x148
}
    81fc:	bx	lr
    81fe:	nop
    8200:	.word	0x20007c27
    8204:	.word	0x402e0000

00008208 <usb_isr>:
{
    8208:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t status = USB1_USBSTS;
    820c:	ldr	r4, [pc, #648]	; (8498 <usb_isr+0x290>)
{
    820e:	sub	sp, #20
	uint32_t status = USB1_USBSTS;
    8210:	ldr.w	r6, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    8214:	lsls	r0, r6, #31
	USB1_USBSTS = status;
    8216:	str.w	r6, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    821a:	bmi.n	8282 <usb_isr+0x7a>
	if (status & USB_USBSTS_URI) { // page 3164
    821c:	lsls	r1, r6, #25
    821e:	bmi.w	86d6 <usb_isr+0x4ce>
	if (status & USB_USBSTS_TI0) {
    8222:	lsls	r4, r6, #7
    8224:	bpl.n	822e <usb_isr+0x26>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    8226:	ldr	r3, [pc, #628]	; (849c <usb_isr+0x294>)
    8228:	ldr	r3, [r3, #0]
    822a:	cbz	r3, 822e <usb_isr+0x26>
    822c:	blx	r3
	if (status & USB_USBSTS_TI1) {
    822e:	lsls	r0, r6, #6
    8230:	bpl.n	823a <usb_isr+0x32>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    8232:	ldr	r3, [pc, #620]	; (84a0 <usb_isr+0x298>)
    8234:	ldr	r3, [r3, #0]
    8236:	cbz	r3, 823a <usb_isr+0x32>
    8238:	blx	r3
	if (status & USB_USBSTS_PCI) {
    823a:	lsls	r1, r6, #29
    823c:	bpl.n	8250 <usb_isr+0x48>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    823e:	ldr	r3, [pc, #600]	; (8498 <usb_isr+0x290>)
    8240:	ldr	r2, [pc, #608]	; (84a4 <usb_isr+0x29c>)
    8242:	ldr.w	r3, [r3, #388]	; 0x184
    8246:	ands.w	r3, r3, #512	; 0x200
			usb_high_speed = 1;
    824a:	it	ne
    824c:	movne	r3, #1
			usb_high_speed = 0;
    824e:	strb	r3, [r2, #0]
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    8250:	ldr	r3, [pc, #580]	; (8498 <usb_isr+0x290>)
    8252:	ldr.w	r3, [r3, #328]	; 0x148
    8256:	lsls	r2, r3, #24
    8258:	bpl.w	8710 <usb_isr+0x508>
    825c:	lsls	r3, r6, #24
    825e:	bpl.w	8710 <usb_isr+0x508>
		if (usb_reboot_timer) {
    8262:	ldr	r2, [pc, #580]	; (84a8 <usb_isr+0x2a0>)
    8264:	ldrb	r3, [r2, #0]
    8266:	cmp	r3, #0
    8268:	beq.w	8706 <usb_isr+0x4fe>
			if (--usb_reboot_timer == 0) {
    826c:	subs	r3, #1
    826e:	uxtb	r3, r3
    8270:	strb	r3, [r2, #0]
    8272:	cmp	r3, #0
    8274:	bne.w	8706 <usb_isr+0x4fe>
				usb_stop_sof_interrupts(NUM_INTERFACE);
    8278:	movs	r0, #6
    827a:	bl	81dc <usb_stop_sof_interrupts>
				_reboot_Teensyduino_();
    827e:	bl	10500 <___reboot_Teensyduino__veneer>
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    8282:	ldr.w	r3, [r4, #428]	; 0x1ac
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    8286:	ldr	r7, [pc, #548]	; (84ac <usb_isr+0x2a4>)
		while (setupstatus) {
    8288:	cmp	r3, #0
    828a:	bne.n	8328 <usb_isr+0x120>
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    828c:	ldr.w	r5, [r4, #444]	; 0x1bc
		if (completestatus) {
    8290:	cmp	r5, #0
    8292:	beq.n	821c <usb_isr+0x14>
			if (completestatus & endpoint0_notify_mask) {
    8294:	ldr	r2, [pc, #536]	; (84b0 <usb_isr+0x2a8>)
			USB1_ENDPTCOMPLETE = completestatus;
    8296:	str.w	r5, [r4, #444]	; 0x1bc
			if (completestatus & endpoint0_notify_mask) {
    829a:	ldr	r1, [r2, #0]
    829c:	tst	r5, r1
    829e:	beq.n	82ea <usb_isr+0xe2>
				endpoint0_notify_mask = 0;
    82a0:	str	r3, [r2, #0]
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    82a2:	movw	r2, #8225	; 0x2021
	setup.bothwords = endpoint0_setupdata.bothwords;
    82a6:	ldr	r3, [pc, #524]	; (84b4 <usb_isr+0x2ac>)
    82a8:	ldrd	r4, r3, [r3]
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    82ac:	uxth	r1, r4
    82ae:	cmp	r1, r2
    82b0:	bne.n	82d6 <usb_isr+0xce>
    82b2:	uxth	r3, r3
    82b4:	cbnz	r3, 82d6 <usb_isr+0xce>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    82b6:	ldr	r2, [pc, #512]	; (84b8 <usb_isr+0x2b0>)
    82b8:	ldr	r3, [pc, #512]	; (84bc <usb_isr+0x2b4>)
    82ba:	ldr	r0, [r2, #0]
    82bc:	ldrh	r1, [r2, #4]
		if (usb_cdc_line_coding[0] == 134) {
    82be:	cmp	r0, #134	; 0x86
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    82c0:	ldrb	r2, [r2, #6]
    82c2:	str	r0, [r3, #0]
    82c4:	strh	r1, [r3, #4]
    82c6:	strb	r2, [r3, #6]
		if (usb_cdc_line_coding[0] == 134) {
    82c8:	bne.n	82d6 <usb_isr+0xce>
			usb_start_sof_interrupts(NUM_INTERFACE);
    82ca:	movs	r0, #6
    82cc:	bl	81a8 <usb_start_sof_interrupts>
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    82d0:	ldr	r3, [pc, #468]	; (84a8 <usb_isr+0x2a0>)
    82d2:	movs	r2, #80	; 0x50
    82d4:	strb	r2, [r3, #0]
	if (setup.word1 == 0x02010121 || setup.word1 == 0x01000121 /* TODO: check setup.word2 */) {
    82d6:	ldr	r3, [pc, #488]	; (84c0 <usb_isr+0x2b8>)
    82d8:	cmp	r4, r3
    82da:	beq.n	82e2 <usb_isr+0xda>
    82dc:	ldr	r3, [pc, #484]	; (84c4 <usb_isr+0x2bc>)
    82de:	cmp	r4, r3
    82e0:	bne.n	82ea <usb_isr+0xe2>
		usb_audio_set_feature(&endpoint0_setupdata, endpoint0_buffer);
    82e2:	ldr	r1, [pc, #468]	; (84b8 <usb_isr+0x2b0>)
    82e4:	ldr	r0, [pc, #460]	; (84b4 <usb_isr+0x2ac>)
    82e6:	bl	9dc4 <usb_audio_set_feature>
			completestatus &= endpointN_notify_mask;
    82ea:	ldr	r3, [pc, #476]	; (84c8 <usb_isr+0x2c0>)
    82ec:	ldr	r3, [r3, #0]
			if (completestatus) {
    82ee:	ands	r5, r3
    82f0:	beq.n	821c <usb_isr+0x14>
				uint32_t tx = completestatus >> 16;
    82f2:	lsrs	r4, r5, #16
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    82f4:	ldr.w	r8, [pc, #468]	; 84cc <usb_isr+0x2c4>
					tx &= ~(1<<p);
    82f8:	mov.w	r9, #1
				while (tx) {
    82fc:	cmp	r4, #0
    82fe:	bne.w	86ba <usb_isr+0x4b2>
				uint32_t rx = completestatus & 0xffff;
    8302:	uxth	r5, r5
					run_callbacks(endpoint_queue_head + p * 2);
    8304:	ldr	r7, [pc, #452]	; (84cc <usb_isr+0x2c4>)
					rx &= ~(1<<p);
    8306:	mov.w	r8, #1
				while(rx) {
    830a:	cmp	r5, #0
    830c:	beq.n	821c <usb_isr+0x14>
					int p=__builtin_ctz(rx);
    830e:	rbit	r4, r5
    8312:	clz	r4, r4
					run_callbacks(endpoint_queue_head + p * 2);
    8316:	add.w	r0, r7, r4, lsl #7
					rx &= ~(1<<p);
    831a:	lsl.w	r4, r8, r4
					run_callbacks(endpoint_queue_head + p * 2);
    831e:	bl	80c4 <run_callbacks>
					rx &= ~(1<<p);
    8322:	bic.w	r5, r5, r4
    8326:	b.n	830a <usb_isr+0x102>
			USB1_ENDPTSETUPSTAT = setupstatus;
    8328:	str.w	r3, [r4, #428]	; 0x1ac
				s.word1 = endpoint_queue_head[0].setup0;
    832c:	ldr	r3, [pc, #412]	; (84cc <usb_isr+0x2c4>)
				s.word2 = endpoint_queue_head[0].setup1;
    832e:	ldrd	r0, r3, [r3, #40]	; 0x28
				USB1_USBCMD |= USB_USBCMD_SUTW;
    8332:	ldr.w	r2, [r4, #320]	; 0x140
    8336:	orr.w	r2, r2, #8192	; 0x2000
    833a:	str.w	r2, [r4, #320]	; 0x140
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    833e:	ldr.w	r2, [r4, #320]	; 0x140
    8342:	lsls	r2, r2, #18
    8344:	bpl.n	8332 <usb_isr+0x12a>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    8346:	ldr.w	r2, [r4, #320]	; 0x140
    834a:	bic.w	r2, r2, #8192	; 0x2000
    834e:	str.w	r2, [r4, #320]	; 0x140
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    8352:	mov.w	r2, #65537	; 0x10001
    8356:	str.w	r2, [r4, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    835a:	ldr.w	r5, [r4, #436]	; 0x1b4
    835e:	ands.w	r5, r5, #65537	; 0x10001
    8362:	bne.n	835a <usb_isr+0x152>
			endpoint0_notify_mask = 0;
    8364:	uxth	r1, r0
    8366:	ldr	r2, [pc, #328]	; (84b0 <usb_isr+0x2a8>)
	switch (setup.wRequestAndType) {
    8368:	cmp.w	r1, #2304	; 0x900
			endpoint0_notify_mask = 0;
    836c:	str	r5, [r2, #0]
	setup.bothwords = setupdata;
    836e:	strd	r0, r3, [sp, #8]
	switch (setup.wRequestAndType) {
    8372:	beq.w	84dc <usb_isr+0x2d4>
    8376:	bhi.n	83fa <usb_isr+0x1f2>
    8378:	movw	r2, #770	; 0x302
    837c:	cmp	r1, r2
    837e:	beq.w	8560 <usb_isr+0x358>
    8382:	bhi.n	83c2 <usb_isr+0x1ba>
    8384:	cmp	r1, #130	; 0x82
    8386:	beq.w	852a <usb_isr+0x322>
    838a:	bhi.n	839c <usb_isr+0x194>
    838c:	cmp	r1, #128	; 0x80
    838e:	beq.w	851c <usb_isr+0x314>
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    8392:	mov.w	r3, #65537	; 0x10001
    8396:	str.w	r3, [r4, #448]	; 0x1c0
    839a:	b.n	8492 <usb_isr+0x28a>
	switch (setup.wRequestAndType) {
    839c:	cmp.w	r1, #258	; 0x102
    83a0:	beq.w	8586 <usb_isr+0x37e>
    83a4:	bcc.n	8392 <usb_isr+0x18a>
    83a6:	movw	r2, #289	; 0x121
    83aa:	cmp	r1, r2
    83ac:	beq.n	83b6 <usb_isr+0x1ae>
    83ae:	movw	r2, #545	; 0x221
    83b2:	cmp	r1, r2
    83b4:	bne.n	8392 <usb_isr+0x18a>
		if (setup.wLength <= sizeof(endpoint0_buffer)) {
    83b6:	cmp.w	r3, #589824	; 0x90000
    83ba:	mov.w	r1, r3, lsr #16
    83be:	bcs.n	8392 <usb_isr+0x18a>
    83c0:	b.n	866e <usb_isr+0x466>
	switch (setup.wRequestAndType) {
    83c2:	movw	r2, #1665	; 0x681
    83c6:	cmp	r1, r2
    83c8:	bhi.n	83e8 <usb_isr+0x1e0>
    83ca:	cmp.w	r1, #1664	; 0x680
    83ce:	bcs.w	8642 <usb_isr+0x43a>
    83d2:	cmp.w	r1, #1280	; 0x500
    83d6:	beq.n	847a <usb_isr+0x272>
    83d8:	bhi.n	8392 <usb_isr+0x18a>
    83da:	movw	r2, #801	; 0x321
    83de:	cmp	r1, r2
    83e0:	beq.n	83b6 <usb_isr+0x1ae>
    83e2:	movw	r2, #1057	; 0x421
    83e6:	b.n	83b2 <usb_isr+0x1aa>
    83e8:	cmp.w	r1, #2176	; 0x880
    83ec:	bne.n	8392 <usb_isr+0x18a>
		reply_buffer[0] = usb_configuration;
    83ee:	ldr	r3, [pc, #224]	; (84d0 <usb_isr+0x2c8>)
    83f0:	ldr	r0, [pc, #224]	; (84d4 <usb_isr+0x2cc>)
    83f2:	ldrb	r3, [r3, #0]
			endpoint0_transmit(endpoint0_buffer, 1, 0);
    83f4:	movs	r1, #1
			endpoint0_buffer[0] = usb_audio_receive_setting;
    83f6:	strb	r3, [r0, #0]
			endpoint0_transmit(endpoint0_buffer, 1, 0);
    83f8:	b.n	8524 <usb_isr+0x31c>
	switch (setup.wRequestAndType) {
    83fa:	movw	r2, #8737	; 0x2221
    83fe:	cmp	r1, r2
    8400:	beq.w	864c <usb_isr+0x444>
    8404:	bhi.n	8432 <usb_isr+0x22a>
    8406:	movw	r2, #2817	; 0xb01
    840a:	cmp	r1, r2
    840c:	beq.w	867a <usb_isr+0x472>
    8410:	movw	r2, #8225	; 0x2021
    8414:	cmp	r1, r2
    8416:	beq.w	8666 <usb_isr+0x45e>
    841a:	movw	r2, #2689	; 0xa81
    841e:	cmp	r1, r2
    8420:	bne.n	8392 <usb_isr+0x18a>
		if (setup.wIndex == AUDIO_INTERFACE+1) {
    8422:	uxth	r3, r3
    8424:	cmp	r3, #4
    8426:	bne.w	8696 <usb_isr+0x48e>
			endpoint0_buffer[0] = usb_audio_transmit_setting;
    842a:	ldr	r0, [pc, #140]	; (84b8 <usb_isr+0x2b0>)
    842c:	ldr	r3, [pc, #168]	; (84d8 <usb_isr+0x2d0>)
			endpoint0_buffer[0] = usb_audio_receive_setting;
    842e:	ldrb	r3, [r3, #0]
    8430:	b.n	83f4 <usb_isr+0x1ec>
	switch (setup.wRequestAndType) {
    8432:	movw	r2, #33186	; 0x81a2
    8436:	cmp	r1, r2
    8438:	beq.w	86a2 <usb_isr+0x49a>
    843c:	bhi.n	8468 <usb_isr+0x260>
    843e:	movw	r2, #8993	; 0x2321
    8442:	cmp	r1, r2
    8444:	beq.n	8510 <usb_isr+0x308>
    8446:	movw	r2, #33185	; 0x81a1
    844a:	cmp	r1, r2
    844c:	bne.n	8392 <usb_isr+0x18a>
		if (setup.wLength <= sizeof(endpoint0_buffer)) {
    844e:	cmp.w	r3, #589824	; 0x90000
    8452:	bcs.n	8392 <usb_isr+0x18a>
			if (usb_audio_get_feature(&setup, endpoint0_buffer, &len)) {
    8454:	add	r2, sp, #4
    8456:	ldr	r1, [pc, #96]	; (84b8 <usb_isr+0x2b0>)
    8458:	add	r0, sp, #8
    845a:	bl	9d6c <usb_audio_get_feature>
    845e:	cmp	r0, #0
    8460:	beq.n	8392 <usb_isr+0x18a>
				endpoint0_transmit(endpoint0_buffer, len, 0);
    8462:	ldr	r1, [sp, #4]
    8464:	ldr	r0, [pc, #80]	; (84b8 <usb_isr+0x2b0>)
    8466:	b.n	8524 <usb_isr+0x31c>
	switch (setup.wRequestAndType) {
    8468:	movw	r2, #33953	; 0x84a1
    846c:	cmp	r1, r2
    846e:	beq.n	844e <usb_isr+0x246>
    8470:	bic.w	r1, r1, #256	; 0x100
    8474:	movw	r2, #33441	; 0x82a1
    8478:	b.n	844a <usb_isr+0x242>
		endpoint0_receive(NULL, 0, 0);
    847a:	mov	r2, r5
    847c:	mov	r1, r5
    847e:	mov	r0, r5
    8480:	bl	7fa8 <endpoint0_receive>
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    8484:	ldrh.w	r3, [sp, #10]
    8488:	lsls	r3, r3, #25
    848a:	orr.w	r3, r3, #16777216	; 0x1000000
    848e:	str.w	r3, [r4, #340]	; 0x154
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    8492:	ldr.w	r3, [r4, #428]	; 0x1ac
    8496:	b.n	8288 <usb_isr+0x80>
    8498:	.word	0x402e0000
    849c:	.word	0x20007124
    84a0:	.word	0x20007128
    84a4:	.word	0x20007c34
    84a8:	.word	0x20007c35
    84ac:	.word	0x402e01c0
    84b0:	.word	0x20006cd4
    84b4:	.word	0x20005b00
    84b8:	.word	0x20007c02
    84bc:	.word	0x20007118
    84c0:	.word	0x02010121
    84c4:	.word	0x01000121
    84c8:	.word	0x20006cd8
    84cc:	.word	0x20000000
    84d0:	.word	0x20007c33
    84d4:	.word	0x20007c0b
    84d8:	.word	0x20007c31
		usb_configuration = setup.wValue;
    84dc:	ubfx	r0, r0, #16, #8
    84e0:	ldr	r3, [pc, #564]	; (8718 <usb_isr+0x510>)
    84e2:	strb	r0, [r3, #0]
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    84e4:	ldr	r3, [pc, #564]	; (871c <usb_isr+0x514>)
    84e6:	str.w	r3, [r4, #456]	; 0x1c8
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    84ea:	mov.w	r3, #13107400	; 0xc800c8
    84ee:	str.w	r3, [r4, #460]	; 0x1cc
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    84f2:	str.w	r3, [r4, #464]	; 0x1d0
		USB1_ENDPTCTRL5 = ENDPOINT5_CONFIG;
    84f6:	mov.w	r3, #12845252	; 0xc400c4
    84fa:	str.w	r3, [r4, #468]	; 0x1d4
		USB1_ENDPTCTRL6 = ENDPOINT6_CONFIG;
    84fe:	subs	r3, #194	; 0xc2
    8500:	str.w	r3, [r4, #472]	; 0x1d8
		usb_serial_configure();
    8504:	bl	783c <usb_serial_configure>
		usb_midi_configure();
    8508:	bl	8ee8 <usb_midi_configure>
		usb_audio_configure();
    850c:	bl	9cb4 <usb_audio_configure>
		endpoint0_receive(NULL, 0, 0);
    8510:	movs	r2, #0
    8512:	mov	r1, r2
    8514:	mov	r0, r2
			endpoint0_receive(endpoint0_buffer, setup.wLength, 1);
    8516:	bl	7fa8 <endpoint0_receive>
			return; // handle these after ACK
    851a:	b.n	8492 <usb_isr+0x28a>
		reply_buffer[0] = 0;
    851c:	ldr	r0, [pc, #512]	; (8720 <usb_isr+0x518>)
		endpoint0_transmit(reply_buffer, 2, 0);
    851e:	movs	r1, #2
		reply_buffer[0] = 0;
    8520:	strb	r5, [r0, #0]
		reply_buffer[1] = 0;
    8522:	strb	r5, [r0, #1]
			endpoint0_transmit(endpoint0_buffer, 3, 0);
    8524:	bl	8114 <endpoint0_transmit.constprop.0>
			return;
    8528:	b.n	8492 <usb_isr+0x28a>
		endpoint = setup.wIndex & 0x7F;
    852a:	uxth	r0, r3
		if (endpoint > 7) break;
    852c:	ands.w	r3, r3, #120	; 0x78
    8530:	bne.w	8392 <usb_isr+0x18a>
		endpoint = setup.wIndex & 0x7F;
    8534:	and.w	r2, r0, #127	; 0x7f
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    8538:	lsls	r5, r0, #24
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    853a:	ldr.w	r1, [r7, r2, lsl #2]
		reply_buffer[0] = 0;
    853e:	ldr	r2, [pc, #480]	; (8720 <usb_isr+0x518>)
    8540:	strb	r3, [r2, #0]
		reply_buffer[1] = 0;
    8542:	strb	r3, [r2, #1]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    8544:	bpl.n	855a <usb_isr+0x352>
    8546:	tst.w	r1, #65536	; 0x10000
			reply_buffer[0] = 1;
    854a:	it	ne
    854c:	movne	r3, #1
		endpoint0_transmit(reply_buffer, 2, 0);
    854e:	mov.w	r1, #2
    8552:	ldr	r0, [pc, #460]	; (8720 <usb_isr+0x518>)
			reply_buffer[0] = 1;
    8554:	it	ne
    8556:	strbne	r3, [r2, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    8558:	b.n	8524 <usb_isr+0x31c>
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    855a:	tst.w	r1, #1
    855e:	b.n	854a <usb_isr+0x342>
		if (endpoint > 7) break;
    8560:	tst.w	r3, #120	; 0x78
    8564:	uxth	r2, r3
    8566:	bne.w	8392 <usb_isr+0x18a>
		endpoint = setup.wIndex & 0x7F;
    856a:	and.w	r3, r2, #127	; 0x7f
		if (dir) {
    856e:	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    8572:	ldr.w	r2, [r7, r3, lsl #2]
    8576:	ite	ne
    8578:	orrne.w	r2, r2, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    857c:	orreq.w	r2, r2, #1
    8580:	str.w	r2, [r7, r3, lsl #2]
    8584:	b.n	8510 <usb_isr+0x308>
		if (endpoint > 7) break;
    8586:	tst.w	r3, #120	; 0x78
    858a:	uxth	r2, r3
    858c:	bne.w	8392 <usb_isr+0x18a>
		endpoint = setup.wIndex & 0x7F;
    8590:	and.w	r3, r2, #127	; 0x7f
		if (dir) {
    8594:	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    8598:	ldr.w	r2, [r7, r3, lsl #2]
    859c:	ite	ne
    859e:	bicne.w	r2, r2, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    85a2:	biceq.w	r2, r2, #1
    85a6:	b.n	8580 <usb_isr+0x378>
				} else if (setup.wValue == 0x700) {
    85a8:	cmp.w	ip, #1792	; 0x700
    85ac:	bne.n	85ee <usb_isr+0x3e6>
					if (usb_high_speed) src = usb_config_descriptor_12;
    85ae:	ldr	r3, [pc, #372]	; (8724 <usb_isr+0x51c>)
					memcpy(usb_descriptor_buffer, src, datalen);
    85b0:	mov	r2, r8
    85b2:	ldr	r1, [pc, #372]	; (8728 <usb_isr+0x520>)
					if (usb_high_speed) src = usb_config_descriptor_12;
    85b4:	ldrb	r0, [r3, #0]
					memcpy(usb_descriptor_buffer, src, datalen);
    85b6:	ldr	r3, [pc, #372]	; (872c <usb_isr+0x524>)
    85b8:	cmp	r0, #0
    85ba:	it	ne
    85bc:	movne	r1, r3
    85be:	mov	r0, r5
    85c0:	bl	756c <memcpy>
					usb_descriptor_buffer[1] = 7;
    85c4:	movs	r3, #7
    85c6:	strb	r3, [r5, #1]
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    85c8:	bic.w	r3, r5, #31
	uint32_t end_addr = (uint32_t)addr + size;
    85cc:	add	r5, r8
	asm("dsb");
    85ce:	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    85d2:	mov.w	r2, #3758153728	; 0xe000e000
    85d6:	str.w	r3, [r2, #3952]	; 0xf70
		location += 32;
    85da:	adds	r3, #32
	} while (location < end_addr);
    85dc:	cmp	r5, r3
    85de:	bhi.n	85d6 <usb_isr+0x3ce>
	asm("dsb");
    85e0:	dsb	sy
	asm("isb");
    85e4:	isb	sy
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    85e8:	ldr	r0, [pc, #324]	; (8730 <usb_isr+0x528>)
    85ea:	mov	r1, r8
    85ec:	b.n	8524 <usb_isr+0x31c>
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    85ee:	mov	r2, r8
    85f0:	b.n	863a <usb_isr+0x432>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    85f2:	adds	r2, #12
    85f4:	ldr	r1, [r2, #4]
    85f6:	cmp	r1, #0
    85f8:	beq.w	8392 <usb_isr+0x18a>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    85fc:	ldrh.w	lr, [r2]
    8600:	mov	ip, r0
    8602:	cmp	lr, r0
    8604:	bne.n	85f2 <usb_isr+0x3ea>
    8606:	ldrh.w	lr, [r2, #2]
    860a:	cmp	lr, r5
    860c:	bne.n	85f2 <usb_isr+0x3ea>
				if ((setup.wValue >> 8) == 3) {
    860e:	lsrs	r0, r0, #8
    8610:	ldr	r5, [pc, #284]	; (8730 <usb_isr+0x528>)
				if (datalen > setup.wLength) datalen = setup.wLength;
    8612:	mov.w	r8, r3, lsr #16
				if ((setup.wValue >> 8) == 3) {
    8616:	cmp	r0, #3
					datalen = *(list->addr);
    8618:	ite	eq
    861a:	ldrbeq	r2, [r1, #0]
					datalen = list->length;
    861c:	ldrhne	r2, [r2, #8]
				if (datalen > setup.wLength) datalen = setup.wLength;
    861e:	cmp	r8, r2
    8620:	it	cs
    8622:	movcs	r8, r2
				if (setup.wValue == 0x200) {
    8624:	cmp.w	ip, #512	; 0x200
    8628:	bne.n	85a8 <usb_isr+0x3a0>
					if (usb_high_speed) src = usb_config_descriptor_480;
    862a:	ldr	r3, [pc, #248]	; (8724 <usb_isr+0x51c>)
					memcpy(usb_descriptor_buffer, src, datalen);
    862c:	mov	r2, r8
    862e:	ldr	r1, [pc, #252]	; (872c <usb_isr+0x524>)
					if (usb_high_speed) src = usb_config_descriptor_480;
    8630:	ldrb	r0, [r3, #0]
					memcpy(usb_descriptor_buffer, src, datalen);
    8632:	ldr	r3, [pc, #244]	; (8728 <usb_isr+0x520>)
    8634:	cmp	r0, #0
    8636:	it	ne
    8638:	movne	r1, r3
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    863a:	mov	r0, r5
    863c:	bl	756c <memcpy>
    8640:	b.n	85c8 <usb_isr+0x3c0>
	switch (setup.wRequestAndType) {
    8642:	ldr	r2, [pc, #240]	; (8734 <usb_isr+0x52c>)
    8644:	ubfx	r0, r0, #16, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    8648:	uxth	r5, r3
    864a:	b.n	85f4 <usb_isr+0x3ec>
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
    864c:	uxth	r3, r3
    864e:	cmp	r3, #0
    8650:	bne.w	8510 <usb_isr+0x308>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    8654:	ldr	r3, [pc, #224]	; (8738 <usb_isr+0x530>)
			usb_cdc_line_rtsdtr = setup.wValue;
    8656:	ubfx	r0, r0, #16, #8
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    865a:	ldr	r2, [r3, #0]
    865c:	ldr	r3, [pc, #220]	; (873c <usb_isr+0x534>)
    865e:	str	r2, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    8660:	ldr	r3, [pc, #220]	; (8740 <usb_isr+0x538>)
    8662:	strb	r0, [r3, #0]
		endpoint0_receive(NULL, 0, 0);
    8664:	b.n	8510 <usb_isr+0x308>
		if (setup.wLength != 7) break;
    8666:	lsrs	r1, r3, #16
    8668:	cmp	r1, #7
    866a:	bne.w	8392 <usb_isr+0x18a>
			endpoint0_setupdata.bothwords = setupdata;
    866e:	ldr	r2, [pc, #212]	; (8744 <usb_isr+0x53c>)
    8670:	strd	r0, r3, [r2]
			endpoint0_receive(endpoint0_buffer, setup.wLength, 1);
    8674:	movs	r2, #1
    8676:	ldr	r0, [pc, #208]	; (8748 <usb_isr+0x540>)
    8678:	b.n	8516 <usb_isr+0x30e>
		if (setup.wIndex == AUDIO_INTERFACE+1) {
    867a:	uxth	r3, r3
    867c:	cmp	r3, #4
    867e:	bne.n	8688 <usb_isr+0x480>
			usb_audio_transmit_setting = setup.wValue;
    8680:	ubfx	r0, r0, #16, #16
    8684:	ldr	r3, [pc, #196]	; (874c <usb_isr+0x544>)
    8686:	b.n	8662 <usb_isr+0x45a>
		} else if (setup.wIndex == AUDIO_INTERFACE+2) {
    8688:	cmp	r3, #5
    868a:	bne.w	8392 <usb_isr+0x18a>
			usb_audio_receive_setting = setup.wValue;
    868e:	ubfx	r0, r0, #16, #16
    8692:	ldr	r3, [pc, #188]	; (8750 <usb_isr+0x548>)
    8694:	b.n	8662 <usb_isr+0x45a>
		} else if (setup.wIndex == AUDIO_INTERFACE+2) {
    8696:	cmp	r3, #5
    8698:	bne.w	8392 <usb_isr+0x18a>
			endpoint0_buffer[0] = usb_audio_receive_setting;
    869c:	ldr	r0, [pc, #168]	; (8748 <usb_isr+0x540>)
    869e:	ldr	r3, [pc, #176]	; (8750 <usb_isr+0x548>)
    86a0:	b.n	842e <usb_isr+0x226>
		if (setup.wLength >= 3) {
    86a2:	cmp.w	r3, #196608	; 0x30000
    86a6:	bcc.w	8392 <usb_isr+0x18a>
			endpoint0_buffer[0] = 44100 & 255;
    86aa:	ldr	r0, [pc, #156]	; (8748 <usb_isr+0x540>)
    86ac:	movs	r3, #68	; 0x44
			endpoint0_transmit(endpoint0_buffer, 3, 0);
    86ae:	movs	r1, #3
			endpoint0_buffer[0] = 44100 & 255;
    86b0:	strb	r3, [r0, #0]
			endpoint0_buffer[1] = 44100 >> 8;
    86b2:	movs	r3, #172	; 0xac
			endpoint0_buffer[2] = 0;
    86b4:	strb	r5, [r0, #2]
			endpoint0_buffer[1] = 44100 >> 8;
    86b6:	strb	r3, [r0, #1]
			endpoint0_transmit(endpoint0_buffer, 3, 0);
    86b8:	b.n	8524 <usb_isr+0x31c>
					int p=__builtin_ctz(tx);
    86ba:	rbit	r7, r4
    86be:	clz	r7, r7
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    86c2:	add.w	r0, r8, r7, lsl #7
					tx &= ~(1<<p);
    86c6:	lsl.w	r7, r9, r7
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    86ca:	adds	r0, #64	; 0x40
					tx &= ~(1<<p);
    86cc:	bic.w	r4, r4, r7
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    86d0:	bl	80c4 <run_callbacks>
					tx &= ~(1<<p);
    86d4:	b.n	82fc <usb_isr+0xf4>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    86d6:	ldr	r3, [pc, #124]	; (8754 <usb_isr+0x54c>)
    86d8:	ldr.w	r2, [r3, #428]	; 0x1ac
    86dc:	str.w	r2, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    86e0:	ldr.w	r2, [r3, #444]	; 0x1bc
    86e4:	str.w	r2, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    86e8:	ldr.w	r4, [r3, #432]	; 0x1b0
    86ec:	cmp	r4, #0
    86ee:	bne.n	86e8 <usb_isr+0x4e0>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    86f0:	mov.w	r2, #4294967295
    86f4:	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    86f8:	ldr.w	r3, [r3, #388]	; 0x184
		usb_serial_reset();
    86fc:	bl	7838 <usb_serial_reset>
		endpointN_notify_mask = 0;
    8700:	ldr	r3, [pc, #84]	; (8758 <usb_isr+0x550>)
    8702:	str	r4, [r3, #0]
    8704:	b.n	8222 <usb_isr+0x1a>
}
    8706:	add	sp, #20
    8708:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		usb_midi_flush_output();
    870c:	b.w	8fa8 <usb_midi_flush_output>
}
    8710:	add	sp, #20
    8712:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    8716:	nop
    8718:	.word	0x20007c33
    871c:	.word	0x00cc0002
    8720:	.word	0x20007c0b
    8724:	.word	0x20007c34
    8728:	.word	0x60002689
    872c:	.word	0x60002534
    8730:	.word	0x20205100
    8734:	.word	0x20000eac
    8738:	.word	0x200070e8
    873c:	.word	0x20007120
    8740:	.word	0x20007c32
    8744:	.word	0x20005b00
    8748:	.word	0x20007c02
    874c:	.word	0x20007c31
    8750:	.word	0x20007c2e
    8754:	.word	0x402e0000
    8758:	.word	0x20006cd8

0000875c <usb_config_rx>:
{
    875c:	push	{r4, r5, r6, lr}
    875e:	mov	r6, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    8760:	subs	r3, r0, #2
{
    8762:	mov	r5, r0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    8764:	cmp	r3, #4
    8766:	bhi.n	8790 <usb_config_rx+0x34>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    8768:	clz	r4, r2
    876c:	lsls	r1, r1, #16
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    876e:	ldr	r0, [pc, #36]	; (8794 <usb_config_rx+0x38>)
    8770:	mov	r2, r6
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    8772:	lsrs	r4, r4, #5
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    8774:	add.w	r0, r0, r5, lsl #7
    8778:	orr.w	r1, r1, r4, lsl #29
    877c:	bl	80f8 <usb_endpoint_config>
	if (cb) endpointN_notify_mask |= (1 << ep);
    8780:	cbz	r6, 8790 <usb_config_rx+0x34>
    8782:	ldr	r2, [pc, #20]	; (8798 <usb_config_rx+0x3c>)
    8784:	movs	r3, #1
    8786:	lsl.w	r0, r3, r5
    878a:	ldr	r3, [r2, #0]
    878c:	orrs	r0, r3
    878e:	str	r0, [r2, #0]
}
    8790:	pop	{r4, r5, r6, pc}
    8792:	nop
    8794:	.word	0x20000000
    8798:	.word	0x20006cd8

0000879c <usb_config_tx>:
{
    879c:	push	{r4, r5, r6, lr}
    879e:	mov	r6, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    87a0:	subs	r3, r0, #2
{
    87a2:	mov	r4, r0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    87a4:	cmp	r3, #4
    87a6:	bhi.n	87d2 <usb_config_tx+0x36>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    87a8:	clz	r5, r2
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    87ac:	ldr	r0, [pc, #36]	; (87d4 <usb_config_tx+0x38>)
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    87ae:	lsls	r1, r1, #16
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    87b0:	mov	r2, r6
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    87b2:	lsrs	r5, r5, #5
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    87b4:	add.w	r0, r0, r4, lsl #7
    87b8:	orr.w	r1, r1, r5, lsl #29
    87bc:	adds	r0, #64	; 0x40
    87be:	bl	80f8 <usb_endpoint_config>
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    87c2:	cbz	r6, 87d2 <usb_config_tx+0x36>
    87c4:	ldr	r2, [pc, #16]	; (87d8 <usb_config_tx+0x3c>)
    87c6:	adds	r4, #16
    87c8:	movs	r3, #1
    87ca:	ldr	r1, [r2, #0]
    87cc:	lsls	r3, r4
    87ce:	orrs	r3, r1
    87d0:	str	r3, [r2, #0]
}
    87d2:	pop	{r4, r5, r6, pc}
    87d4:	.word	0x20000000
    87d8:	.word	0x20006cd8

000087dc <usb_config_rx_iso>:
{
    87dc:	push	{r4, r5, r6, lr}
    87de:	mov	r6, r3
	if (mult < 1 || mult > 3) return;
    87e0:	subs	r3, r2, #1
{
    87e2:	mov	r5, r0
	if (mult < 1 || mult > 3) return;
    87e4:	cmp	r3, #2
    87e6:	bhi.n	8810 <usb_config_rx_iso+0x34>
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    87e8:	subs	r3, r0, #2
    87ea:	cmp	r3, #4
    87ec:	bhi.n	8810 <usb_config_rx_iso+0x34>
	uint32_t config = (packet_size << 16) | (mult << 30);
    87ee:	lsls	r4, r2, #30
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    87f0:	ldr	r0, [pc, #32]	; (8814 <usb_config_rx_iso+0x38>)
    87f2:	mov	r2, r6
    87f4:	orr.w	r1, r4, r1, lsl #16
    87f8:	add.w	r0, r0, r5, lsl #7
    87fc:	bl	80f8 <usb_endpoint_config>
	if (cb) endpointN_notify_mask |= (1 << ep);
    8800:	cbz	r6, 8810 <usb_config_rx_iso+0x34>
    8802:	ldr	r2, [pc, #20]	; (8818 <usb_config_rx_iso+0x3c>)
    8804:	movs	r3, #1
    8806:	lsl.w	r0, r3, r5
    880a:	ldr	r3, [r2, #0]
    880c:	orrs	r0, r3
    880e:	str	r0, [r2, #0]
}
    8810:	pop	{r4, r5, r6, pc}
    8812:	nop
    8814:	.word	0x20000000
    8818:	.word	0x20006cd8

0000881c <usb_config_tx_iso>:
{
    881c:	push	{r4, r5, r6, lr}
    881e:	mov	r6, r3
	if (mult < 1 || mult > 3) return;
    8820:	subs	r3, r2, #1
{
    8822:	mov	r4, r0
	if (mult < 1 || mult > 3) return;
    8824:	cmp	r3, #2
    8826:	bhi.n	8852 <usb_config_tx_iso+0x36>
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    8828:	subs	r3, r4, #2
    882a:	cmp	r3, #4
    882c:	bhi.n	8852 <usb_config_tx_iso+0x36>
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    882e:	ldr	r0, [pc, #36]	; (8854 <usb_config_tx_iso+0x38>)
	uint32_t config = (packet_size << 16) | (mult << 30);
    8830:	lsls	r5, r2, #30
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    8832:	mov	r2, r6
    8834:	add.w	r0, r0, r4, lsl #7
    8838:	orr.w	r1, r5, r1, lsl #16
    883c:	adds	r0, #64	; 0x40
    883e:	bl	80f8 <usb_endpoint_config>
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    8842:	cbz	r6, 8852 <usb_config_tx_iso+0x36>
    8844:	ldr	r2, [pc, #16]	; (8858 <usb_config_tx_iso+0x3c>)
    8846:	adds	r4, #16
    8848:	movs	r3, #1
    884a:	ldr	r1, [r2, #0]
    884c:	lsls	r3, r4
    884e:	orrs	r3, r1
    8850:	str	r3, [r2, #0]
}
    8852:	pop	{r4, r5, r6, pc}
    8854:	.word	0x20000000
    8858:	.word	0x20006cd8

0000885c <usb_prepare_transfer>:
	transfer->status = (len << 16) | (1<<7);
    885c:	lsls	r2, r2, #16
	transfer->pointer0 = addr;
    885e:	str	r1, [r0, #8]
	transfer->status = (len << 16) | (1<<7);
    8860:	orr.w	r2, r2, #128	; 0x80
    8864:	str	r2, [r0, #4]
	transfer->pointer1 = addr + 4096;
    8866:	add.w	r2, r1, #4096	; 0x1000
    886a:	str	r2, [r0, #12]
	transfer->pointer2 = addr + 8192;
    886c:	add.w	r2, r1, #8192	; 0x2000
{
    8870:	push	{r4, lr}
	transfer->pointer2 = addr + 8192;
    8872:	str	r2, [r0, #16]
	transfer->next = 1;
    8874:	movs	r4, #1
	transfer->pointer3 = addr + 12288;
    8876:	add.w	r2, r1, #12288	; 0x3000
	transfer->pointer4 = addr + 16384;
    887a:	add.w	r1, r1, #16384	; 0x4000
	transfer->next = 1;
    887e:	str	r4, [r0, #0]
	transfer->pointer3 = addr + 12288;
    8880:	str	r2, [r0, #20]
	transfer->callback_param = param;
    8882:	strd	r1, r3, [r0, #24]
}
    8886:	pop	{r4, pc}

00008888 <usb_transmit>:

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    8888:	subs	r3, r0, #2
{
    888a:	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    888c:	cmp	r3, #4
    888e:	bhi.n	88a6 <usb_transmit+0x1e>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    8890:	ldr	r3, [pc, #20]	; (88a8 <usb_transmit+0x20>)
	uint32_t mask = 1 << (endpoint_number + 16);
    8892:	add.w	r1, r0, #16
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    8896:	add.w	r0, r3, r0, lsl #7
	schedule_transfer(endpoint, mask, transfer);
    889a:	movs	r3, #1
    889c:	adds	r0, #64	; 0x40
    889e:	lsl.w	r1, r3, r1
    88a2:	b.w	8048 <schedule_transfer>
}
    88a6:	bx	lr
    88a8:	.word	0x20000000

000088ac <usb_receive>:

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    88ac:	subs	r3, r0, #2
{
    88ae:	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    88b0:	cmp	r3, #4
    88b2:	bhi.n	88c2 <usb_receive+0x16>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    88b4:	movs	r1, #1
    88b6:	ldr	r3, [pc, #12]	; (88c4 <usb_receive+0x18>)
    88b8:	lsls	r1, r0
    88ba:	add.w	r0, r3, r0, lsl #7
    88be:	b.w	8048 <schedule_transfer>
}
    88c2:	bx	lr
    88c4:	.word	0x20000000

000088c8 <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
    88c8:	ldr	r0, [r0, #4]
#endif
}
    88ca:	bx	lr

000088cc <micros>:
// Returns the number of microseconds since your program started running.
// This 32 bit number will roll back to zero after about 71 minutes and
// 35 seconds.  For a simpler way to build delays or timeouts, consider
// using elapsedMicros.
uint32_t micros(void)
{
    88cc:	push	{r4, r5, r6, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    88ce:	ldr	r3, [pc, #52]	; (8904 <micros+0x38>)
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    88d0:	movs	r4, #1
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    88d2:	ldr	r6, [pc, #52]	; (8908 <micros+0x3c>)
		scc = systick_cycle_count;
    88d4:	ldr	r5, [pc, #52]	; (890c <micros+0x40>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    88d6:	ldrex	r2, [r3]
		smc = systick_millis_count;
    88da:	ldr	r0, [r6, #0]
		scc = systick_cycle_count;
    88dc:	ldr	r1, [r5, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    88de:	strex	r2, r4, [r3]
	} while ( __STREXW(1, &systick_safe_read));
    88e2:	cmp	r2, #0
    88e4:	bne.n	88d6 <micros+0xa>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    88e6:	ldr	r3, [pc, #40]	; (8910 <micros+0x44>)
    88e8:	ldr	r3, [r3, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    88ea:	ldr	r2, [pc, #40]	; (8914 <micros+0x48>)
	uint32_t ccdelta = cyccnt - scc;
    88ec:	subs	r3, r3, r1
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    88ee:	ldr	r2, [r2, #0]
    88f0:	umull	r3, r2, r3, r2
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    88f4:	mov.w	r3, #1000	; 0x3e8
    88f8:	muls	r0, r3
	return usec;
}
    88fa:	cmp	r2, r3
    88fc:	ite	ls
    88fe:	addls	r0, r0, r2
    8900:	addhi	r0, r0, r3
    8902:	pop	{r4, r5, r6, pc}
    8904:	.word	0x200070ec
    8908:	.word	0x200070e8
    890c:	.word	0x200070e4
    8910:	.word	0xe0001000
    8914:	.word	0x200070e0

00008918 <delay>:
{
    8918:	push	{r3, r4, r5, lr}
	if (msec == 0) return;
    891a:	mov	r4, r0
    891c:	cbz	r0, 8940 <delay+0x28>
	start = micros();
    891e:	bl	88cc <micros>
    8922:	mov	r5, r0
		while ((micros() - start) >= 1000) {
    8924:	bl	88cc <micros>
    8928:	subs	r0, r0, r5
    892a:	cmp.w	r0, #1000	; 0x3e8
    892e:	bcs.n	8936 <delay+0x1e>
		yield();
    8930:	bl	90ec <yield>
		while ((micros() - start) >= 1000) {
    8934:	b.n	8924 <delay+0xc>
			if (--msec == 0) return;
    8936:	subs	r4, #1
    8938:	beq.n	8940 <delay+0x28>
			start += 1000;
    893a:	add.w	r5, r5, #1000	; 0x3e8
    893e:	b.n	8924 <delay+0xc>
}
    8940:	pop	{r3, r4, r5, pc}
	...

00008944 <unused_interrupt_vector>:
	__disable_irq();
    8944:	cpsid	i
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
    8946:	mrs	r3, IPSR
	info->ipsr = ipsr;
    894a:	ldr	r4, [pc, #308]	; (8a80 <unused_interrupt_vector+0x13c>)
    894c:	str.w	r3, [r4, #132]	; 0x84
	asm volatile("mrs %0, msp\n" : "=r" (stack) :: "memory");
    8950:	mrs	r2, MSP
	info->cfsr = SCB_CFSR;
    8954:	mov.w	r3, #3758153728	; 0xe000e000
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    8958:	ldr	r7, [pc, #296]	; (8a84 <unused_interrupt_vector+0x140>)
	while (p < end) {
    895a:	ldr	r6, [pc, #300]	; (8a88 <unused_interrupt_vector+0x144>)
	info->cfsr = SCB_CFSR;
    895c:	ldr.w	r1, [r3, #3368]	; 0xd28
    8960:	str.w	r1, [r4, #136]	; 0x88
	info->hfsr = SCB_HFSR;
    8964:	ldr.w	r1, [r3, #3372]	; 0xd2c
    8968:	str.w	r1, [r4, #140]	; 0x8c
	info->mmfar = SCB_MMFAR;
    896c:	ldr.w	r1, [r3, #3380]	; 0xd34
    8970:	str.w	r1, [r4, #144]	; 0x90
	info->bfar = SCB_BFAR;
    8974:	ldr.w	r3, [r3, #3384]	; 0xd38
    8978:	str.w	r3, [r4, #148]	; 0x94
	info->ret = stack[6];
    897c:	ldr	r3, [r2, #24]
    897e:	str.w	r3, [r4, #152]	; 0x98
	info->xpsr = stack[7];
    8982:	ldr	r3, [r2, #28]
    8984:	str.w	r3, [r4, #156]	; 0x9c
	info->temp = tempmonGetTemp();
    8988:	bl	8bf4 <tempmonGetTemp>
    898c:	vstr	s0, [r4, #160]	; 0xa0
	info->time = rtc_get();
    8990:	bl	8b10 <rtc_get>
	info->len = sizeof(*info) / 4;
    8994:	movs	r3, #11
	p = (uint32_t *)info;
    8996:	ldr	r2, [pc, #244]	; (8a8c <unused_interrupt_vector+0x148>)
	info->time = rtc_get();
    8998:	str.w	r0, [r4, #164]	; 0xa4
	info->len = sizeof(*info) / 4;
    899c:	str.w	r3, [r4, #128]	; 0x80
	while (p < end) {
    89a0:	mov	r0, r2
	crc = 0xFFFFFFFF;
    89a2:	mov.w	r3, #4294967295
		crc ^= *p++;
    89a6:	ldr	r1, [r2, #0]
    89a8:	movs	r5, #32
    89aa:	adds	r2, #4
    89ac:	eors	r3, r1
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    89ae:	and.w	r1, r3, #1
    89b2:	subs	r5, #1
    89b4:	mul.w	r1, r7, r1
    89b8:	eor.w	r3, r1, r3, lsr #1
    89bc:	bne.n	89ae <unused_interrupt_vector+0x6a>
	while (p < end) {
    89be:	cmp	r2, r6
    89c0:	bne.n	89a6 <unused_interrupt_vector+0x62>
	info->crc = crc;
    89c2:	str.w	r3, [r4, #168]	; 0xa8
	asm("dsb");
    89c6:	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    89ca:	mov.w	r3, #3758153728	; 0xe000e000
    89ce:	ldr	r2, [pc, #192]	; (8a90 <unused_interrupt_vector+0x14c>)
    89d0:	str.w	r0, [r3, #3952]	; 0xf70
    89d4:	str.w	r2, [r3, #3952]	; 0xf70
	asm("dsb");
    89d8:	dsb	sy
	asm("isb");
    89dc:	isb	sy
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    89e0:	ldr	r2, [pc, #176]	; (8a94 <unused_interrupt_vector+0x150>)
	PIT_MCR = PIT_MCR_MDIS;
    89e2:	ldr	r4, [pc, #180]	; (8a98 <unused_interrupt_vector+0x154>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    89e4:	ldr	r3, [r2, #108]	; 0x6c
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    89e6:	ldr	r0, [pc, #180]	; (8a9c <unused_interrupt_vector+0x158>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    89e8:	orr.w	r3, r3, #12288	; 0x3000
    89ec:	str	r3, [r2, #108]	; 0x6c
	PIT_MCR = PIT_MCR_MDIS;
    89ee:	movs	r3, #2
    89f0:	str	r3, [r4, #0]
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    89f2:	ldr	r3, [r2, #28]
    89f4:	bic.w	r3, r3, #127	; 0x7f
    89f8:	orr.w	r3, r3, #64	; 0x40
    89fc:	str	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    89fe:	ldr	r3, [pc, #160]	; (8aa0 <unused_interrupt_vector+0x15c>)
    8a00:	ldr	r3, [r3, #0]
    8a02:	cmp	r3, r0
    8a04:	bls.n	8a0a <unused_interrupt_vector+0xc6>
    8a06:	bl	7d58 <set_arm_clock>
	PIT_MCR = 0;
    8a0a:	movs	r3, #0
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    8a0c:	movs	r6, #1
	NVIC_ICER0 = 0xFFFFFFFF;
    8a0e:	mov.w	r2, #4294967295
	PIT_MCR = 0;
    8a12:	str	r3, [r4, #0]
	PIT_TCTRL0 = 0;
    8a14:	str.w	r3, [r4, #264]	; 0x108
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
    8a18:	ldr	r3, [pc, #136]	; (8aa4 <unused_interrupt_vector+0x160>)
    8a1a:	str.w	r3, [r4, #256]	; 0x100
	NVIC_ICER0 = 0xFFFFFFFF;
    8a1e:	mov.w	r3, #3758153728	; 0xe000e000
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    8a22:	str.w	r6, [r4, #264]	; 0x108
		if (PIT_TFLG0) {
    8a26:	ldr	r4, [pc, #112]	; (8a98 <unused_interrupt_vector+0x154>)
	NVIC_ICER0 = 0xFFFFFFFF;
    8a28:	str.w	r2, [r3, #384]	; 0x180
	NVIC_ICER1 = 0xFFFFFFFF;
    8a2c:	str.w	r2, [r3, #388]	; 0x184
	NVIC_ICER2 = 0xFFFFFFFF;
    8a30:	str.w	r2, [r3, #392]	; 0x188
	NVIC_ICER3 = 0xFFFFFFFF;
    8a34:	str.w	r2, [r3, #396]	; 0x18c
	NVIC_ICER4 = 0xFFFFFFFF;
    8a38:	str.w	r2, [r3, #400]	; 0x190
		if (PIT_TFLG0) {
    8a3c:	ldr.w	r3, [r4, #268]	; 0x10c
    8a40:	cbz	r3, 8a4c <unused_interrupt_vector+0x108>
			if (++count >= 80) break;  // reboot after 8 seconds
    8a42:	adds	r5, #1
			PIT_TFLG0 = 1;
    8a44:	str.w	r6, [r4, #268]	; 0x10c
			if (++count >= 80) break;  // reboot after 8 seconds
    8a48:	cmp	r5, #79	; 0x4f
    8a4a:	bhi.n	8a52 <unused_interrupt_vector+0x10e>
		usb_isr();
    8a4c:	bl	8208 <usb_isr>
		if (PIT_TFLG0) {
    8a50:	b.n	8a3c <unused_interrupt_vector+0xf8>
	USB1_USBCMD = USB_USBCMD_RST;
    8a52:	ldr	r3, [pc, #84]	; (8aa8 <unused_interrupt_vector+0x164>)
    8a54:	movs	r2, #2
	SRC_GPR5 = 0x0BAD00F1;
    8a56:	ldr	r1, [pc, #84]	; (8aac <unused_interrupt_vector+0x168>)
	USB1_USBCMD = USB_USBCMD_RST;
    8a58:	str.w	r2, [r3, #320]	; 0x140
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    8a5c:	mov.w	r2, #2147483648	; 0x80000000
    8a60:	ldr	r3, [pc, #76]	; (8ab0 <unused_interrupt_vector+0x16c>)
	SRC_GPR5 = 0x0BAD00F1;
    8a62:	ldr	r0, [pc, #80]	; (8ab4 <unused_interrupt_vector+0x170>)
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    8a64:	str	r2, [r3, #52]	; 0x34
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    8a66:	ldr	r2, [pc, #48]	; (8a98 <unused_interrupt_vector+0x154>)
    8a68:	ldr.w	r3, [r2, #268]	; 0x10c
    8a6c:	cbz	r3, 8a7a <unused_interrupt_vector+0x136>
	SCB_AIRCR = 0x05FA0004;
    8a6e:	mov.w	r3, #3758153728	; 0xe000e000
    8a72:	ldr	r2, [pc, #68]	; (8ab8 <unused_interrupt_vector+0x174>)
    8a74:	str.w	r2, [r3, #3340]	; 0xd0c
	while (1) ;
    8a78:	b.n	8a78 <unused_interrupt_vector+0x134>
	SRC_GPR5 = 0x0BAD00F1;
    8a7a:	str	r0, [r1, #48]	; 0x30
    8a7c:	b.n	8a68 <unused_interrupt_vector+0x124>
    8a7e:	nop
    8a80:	.word	0x2027ff00
    8a84:	.word	0xedb88320
    8a88:	.word	0x2027ffa8
    8a8c:	.word	0x2027ff80
    8a90:	.word	0x2027ffa0
    8a94:	.word	0x400fc000
    8a98:	.word	0x40084000
    8a9c:	.word	0x0bcd3d80
    8aa0:	.word	0x20001bc0
    8aa4:	.word	0x00249f00
    8aa8:	.word	0x402e0000
    8aac:	.word	0x400f8000
    8ab0:	.word	0x400d9000
    8ab4:	.word	0x0bad00f1
    8ab8:	.word	0x05fa0004

00008abc <_sbrk>:

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
        char *prev = __brkval;
    8abc:	ldr	r2, [pc, #32]	; (8ae0 <_sbrk+0x24>)
{
    8abe:	push	{r3, lr}
    8ac0:	mov	r3, r0
        char *prev = __brkval;
    8ac2:	ldr	r0, [r2, #0]
        if (incr != 0) {
    8ac4:	cbz	r3, 8ada <_sbrk+0x1e>
                if (prev + incr > (char *)&_heap_end) {
    8ac6:	add	r3, r0
    8ac8:	ldr	r1, [pc, #24]	; (8ae4 <_sbrk+0x28>)
    8aca:	cmp	r3, r1
    8acc:	bls.n	8adc <_sbrk+0x20>
                        errno = ENOMEM;
    8ace:	bl	b13c <__errno>
    8ad2:	movs	r3, #12
    8ad4:	str	r3, [r0, #0]
                        return (void *)-1;
    8ad6:	mov.w	r0, #4294967295
                }
                __brkval = prev + incr;
        }
        return prev;
}
    8ada:	pop	{r3, pc}
                __brkval = prev + incr;
    8adc:	str	r3, [r2, #0]
    8ade:	b.n	8ada <_sbrk+0x1e>
    8ae0:	.word	0x20001bec
    8ae4:	.word	0x20280000

00008ae8 <_read>:

__attribute__((weak))
int _read(int file, char *ptr, int len)
{
	return 0;
}
    8ae8:	movs	r0, #0
    8aea:	bx	lr

00008aec <_close>:

__attribute__((weak))
int _close(int fd)
{
	return -1;
}
    8aec:	mov.w	r0, #4294967295
    8af0:	bx	lr

00008af2 <_fstat>:
#include <sys/stat.h>

__attribute__((weak))
int _fstat(int fd, struct stat *st)
{
	st->st_mode = S_IFCHR;
    8af2:	mov.w	r3, #8192	; 0x2000
	return 0;
}
    8af6:	movs	r0, #0
	st->st_mode = S_IFCHR;
    8af8:	str	r3, [r1, #4]
}
    8afa:	bx	lr

00008afc <_isatty>:

__attribute__((weak))
int _isatty(int fd)
{
	return 1;
}
    8afc:	movs	r0, #1
    8afe:	bx	lr

00008b00 <_lseek>:

__attribute__((weak))
int _lseek(int fd, long long offset, int whence)
{
	return -1;
}
    8b00:	mov.w	r0, #4294967295
    8b04:	bx	lr

00008b06 <__cxa_pure_virtual>:
}

__attribute__((weak))
void __cxa_pure_virtual()
{
	while (1) asm ("WFI");
    8b06:	wfi
    8b08:	b.n	8b06 <__cxa_pure_virtual>

00008b0a <abort>:
}

__attribute__((weak))
void abort(void)
{
	while (1) asm ("WFI");
    8b0a:	wfi
    8b0c:	b.n	8b0a <abort>
	...

00008b10 <rtc_get>:
	uint32_t hi1 = SNVS_HPRTCMR;
    8b10:	ldr	r2, [pc, #28]	; (8b30 <rtc_get+0x20>)
    8b12:	ldr	r0, [r2, #36]	; 0x24
	uint32_t lo1 = SNVS_HPRTCLR;
    8b14:	ldr	r3, [r2, #40]	; 0x28
{
    8b16:	push	{r4, lr}
		uint32_t hi2 = SNVS_HPRTCMR;
    8b18:	mov	r4, r3
    8b1a:	mov	r1, r0
    8b1c:	ldr	r0, [r2, #36]	; 0x24
		uint32_t lo2 = SNVS_HPRTCLR;
    8b1e:	ldr	r3, [r2, #40]	; 0x28
		if (lo1 == lo2 && hi1 == hi2) {
    8b20:	cmp	r4, r3
    8b22:	bne.n	8b18 <rtc_get+0x8>
    8b24:	cmp	r1, r0
    8b26:	bne.n	8b18 <rtc_get+0x8>
			return (hi2 << 17) | (lo2 >> 15);
    8b28:	lsrs	r3, r3, #15
}
    8b2a:	orr.w	r0, r3, r0, lsl #17
    8b2e:	pop	{r4, pc}
    8b30:	.word	0x400d4000

00008b34 <smalloc_verify_pool>:

struct smalloc_pool smalloc_curr_pool;

int smalloc_verify_pool(struct smalloc_pool *spool)
{
	if (!spool->pool || !spool->pool_size) return 0;
    8b34:	ldr	r3, [r0, #0]
    8b36:	cbz	r3, 8b4e <smalloc_verify_pool+0x1a>
    8b38:	ldr	r0, [r0, #4]
    8b3a:	cbz	r0, 8b50 <smalloc_verify_pool+0x1c>
	if (spool->pool_size % HEADER_SZ) return 0;
    8b3c:	movs	r3, #12
    8b3e:	udiv	r2, r0, r3
    8b42:	mls	r0, r3, r2, r0
    8b46:	clz	r0, r0
    8b4a:	lsrs	r0, r0, #5
    8b4c:	bx	lr
	if (!spool->pool || !spool->pool_size) return 0;
    8b4e:	mov	r0, r3
	return 1;
}
    8b50:	bx	lr

00008b52 <sm_align_pool>:

int sm_align_pool(struct smalloc_pool *spool)
{
    8b52:	push	{r4, lr}
    8b54:	mov	r1, r0
	size_t x;

	if (smalloc_verify_pool(spool)) return 1;
    8b56:	bl	8b34 <smalloc_verify_pool>
    8b5a:	mov	r4, r0
    8b5c:	cbz	r0, 8b64 <sm_align_pool+0x12>
    8b5e:	movs	r4, #1
		errno = ENOSPC;
		return 0;
	}

	return 1;
}
    8b60:	mov	r0, r4
    8b62:	pop	{r4, pc}
	x = spool->pool_size % HEADER_SZ;
    8b64:	ldr	r3, [r1, #4]
    8b66:	movs	r0, #12
    8b68:	udiv	r2, r3, r0
    8b6c:	mls	r2, r0, r2, r3
	if (x) spool->pool_size -= x;
    8b70:	cbz	r2, 8b76 <sm_align_pool+0x24>
    8b72:	subs	r3, r3, r2
    8b74:	str	r3, [r1, #4]
	if (spool->pool_size <= MIN_POOL_SZ) {
    8b76:	ldr	r3, [r1, #4]
    8b78:	cmp	r3, #240	; 0xf0
    8b7a:	bhi.n	8b5e <sm_align_pool+0xc>
		errno = ENOSPC;
    8b7c:	bl	b13c <__errno>
    8b80:	movs	r3, #28
    8b82:	str	r3, [r0, #0]
		return 0;
    8b84:	b.n	8b60 <sm_align_pool+0xe>

00008b86 <sm_set_pool>:

int sm_set_pool(struct smalloc_pool *spool, void *new_pool, size_t new_pool_size, int do_zero, smalloc_oom_handler oom_handler)
{
    8b86:	push	{r4, r5, r6, lr}
    8b88:	mov	r6, r3
	if (!spool) {
    8b8a:	mov	r4, r0
    8b8c:	cbnz	r0, 8b9c <sm_set_pool+0x16>
		errno = EINVAL;
    8b8e:	bl	b13c <__errno>
		return 0;
    8b92:	mov	r5, r4
		errno = EINVAL;
    8b94:	movs	r3, #22
    8b96:	str	r3, [r0, #0]
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
}
    8b98:	mov	r0, r5
    8b9a:	pop	{r4, r5, r6, pc}
	if (!new_pool || !new_pool_size) {
    8b9c:	cbz	r1, 8ba0 <sm_set_pool+0x1a>
    8b9e:	cbnz	r2, 8bd0 <sm_set_pool+0x4a>
		if (smalloc_verify_pool(spool)) {
    8ba0:	mov	r0, r4
    8ba2:	bl	8b34 <smalloc_verify_pool>
    8ba6:	mov	r5, r0
    8ba8:	cbz	r0, 8bc6 <sm_set_pool+0x40>
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    8baa:	ldr	r3, [r4, #8]
    8bac:	cbz	r3, 8bb8 <sm_set_pool+0x32>
    8bae:	ldr	r2, [r4, #4]
    8bb0:	movs	r1, #0
    8bb2:	ldr	r0, [r4, #0]
    8bb4:	bl	7528 <memset>
			memset(spool, 0, sizeof(struct smalloc_pool));
    8bb8:	movs	r2, #16
    8bba:	movs	r1, #0
    8bbc:	mov	r0, r4
		memset(spool->pool, 0, spool->pool_size);
    8bbe:	bl	7528 <memset>
	return 1;
    8bc2:	movs	r5, #1
    8bc4:	b.n	8b98 <sm_set_pool+0x12>
		errno = EINVAL;
    8bc6:	bl	b13c <__errno>
    8bca:	movs	r3, #22
    8bcc:	str	r3, [r0, #0]
		return 0;
    8bce:	b.n	8b98 <sm_set_pool+0x12>
	spool->oomfn = oom_handler;
    8bd0:	ldr	r3, [sp, #16]
	spool->pool_size = new_pool_size;
    8bd2:	strd	r1, r2, [r0]
	spool->oomfn = oom_handler;
    8bd6:	str	r3, [r0, #12]
	if (!sm_align_pool(spool)) return 0;
    8bd8:	bl	8b52 <sm_align_pool>
    8bdc:	mov	r5, r0
    8bde:	cmp	r0, #0
    8be0:	beq.n	8b98 <sm_set_pool+0x12>
	if (do_zero) {
    8be2:	cmp	r6, #0
    8be4:	beq.n	8bc2 <sm_set_pool+0x3c>
		memset(spool->pool, 0, spool->pool_size);
    8be6:	ldr	r2, [r4, #4]
    8be8:	movs	r1, #0
    8bea:	ldr	r0, [r4, #0]
		spool->do_zero = do_zero;
    8bec:	str	r6, [r4, #8]
		memset(spool->pool, 0, spool->pool_size);
    8bee:	b.n	8bbe <sm_set_pool+0x38>

00008bf0 <Panic_Temp_isr>:
  unused_interrupt_vector();
    8bf0:	b.w	8944 <unused_interrupt_vector>

00008bf4 <tempmonGetTemp>:
float tempmonGetTemp(void)
{
    uint32_t nmeas;
    float tmeas;

    while (!(TEMPMON_TEMPSENSE0 & 0x4U))
    8bf4:	ldr	r3, [pc, #72]	; (8c40 <tempmonGetTemp+0x4c>)
    8bf6:	ldr.w	r2, [r3, #128]	; 0x80
    8bfa:	lsls	r2, r2, #29
    8bfc:	bpl.n	8bf6 <tempmonGetTemp+0x2>
    {
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    8bfe:	ldr.w	r3, [r3, #128]	; 0x80
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    8c02:	ldr	r2, [pc, #64]	; (8c44 <tempmonGetTemp+0x50>)
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    8c04:	ubfx	r3, r3, #8, #12
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    8c08:	vldr	s0, [r2]
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    8c0c:	vmov	s15, r3
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    8c10:	ldr	r3, [pc, #52]	; (8c48 <tempmonGetTemp+0x54>)
    8c12:	vcvt.f32.u32	s0, s0
    8c16:	vldr	s14, [r3]
    8c1a:	vcvt.f32.s32	s15, s15
    8c1e:	ldr	r3, [pc, #44]	; (8c4c <tempmonGetTemp+0x58>)
    8c20:	vcvt.f32.u32	s14, s14
    8c24:	vsub.f32	s15, s15, s14
    8c28:	vldr	s14, [r3]
    8c2c:	ldr	r3, [pc, #32]	; (8c50 <tempmonGetTemp+0x5c>)
    8c2e:	vmul.f32	s15, s15, s14
    8c32:	vldr	s13, [r3]
    8c36:	vdiv.f32	s14, s15, s13

    return tmeas;
}
    8c3a:	vsub.f32	s0, s0, s14
    8c3e:	bx	lr
    8c40:	.word	0x400d8100
    8c44:	.word	0x200070d4
    8c48:	.word	0x200070d0
    8c4c:	.word	0x200070d8
    8c50:	.word	0x200070dc

00008c54 <digitalWrite>:
void digitalWrite(uint8_t pin, uint8_t val)
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
    8c54:	cmp	r0, #54	; 0x36
{
    8c56:	push	{r4, lr}
	if (pin >= CORE_NUM_DIGITAL) return;
    8c58:	bhi.n	8c72 <digitalWrite+0x1e>
	p = digital_pin_to_info_PGM + pin;
    8c5a:	lsls	r2, r0, #4
    8c5c:	ldr	r3, [pc, #40]	; (8c88 <digitalWrite+0x34>)
    8c5e:	add.w	r0, r3, r0, lsl #4
	pinmode = *(p->reg + 1);
    8c62:	ldr	r3, [r3, r2]
	mask = p->mask;
    8c64:	ldr	r2, [r0, #12]
	pinmode = *(p->reg + 1);
    8c66:	ldr	r4, [r3, #4]
	if (pinmode & mask) {
    8c68:	tst	r4, r2
    8c6a:	beq.n	8c7a <digitalWrite+0x26>
		// pin is configured for output mode
		if (val) {
    8c6c:	cbz	r1, 8c74 <digitalWrite+0x20>
			*(p->reg + 0x21) = mask; // set register
    8c6e:	str.w	r2, [r3, #132]	; 0x84
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
    8c72:	pop	{r4, pc}
			*(p->reg + 0x22) = mask; // clear register
    8c74:	str.w	r2, [r3, #136]	; 0x88
    8c78:	b.n	8c72 <digitalWrite+0x1e>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    8c7a:	ldr	r3, [r0, #8]
		if (val) {
    8c7c:	cbz	r1, 8c84 <digitalWrite+0x30>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    8c7e:	ldr	r2, [pc, #12]	; (8c8c <digitalWrite+0x38>)
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    8c80:	str	r2, [r3, #0]
    8c82:	b.n	8c72 <digitalWrite+0x1e>
    8c84:	ldr	r2, [pc, #8]	; (8c90 <digitalWrite+0x3c>)
    8c86:	b.n	8c80 <digitalWrite+0x2c>
    8c88:	.word	0x20000ae8
    8c8c:	.word	0x0001f038
    8c90:	.word	0x00013038

00008c94 <digitalRead>:

uint8_t digitalRead(uint8_t pin)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return 0;
    8c94:	cmp	r0, #54	; 0x36
    8c96:	bhi.n	8cb0 <digitalRead+0x1c>
	p = digital_pin_to_info_PGM + pin;
    8c98:	lsls	r2, r0, #4
    8c9a:	ldr	r3, [pc, #24]	; (8cb4 <digitalRead+0x20>)
    8c9c:	add.w	r0, r3, r0, lsl #4
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
    8ca0:	ldr	r3, [r3, r2]
    8ca2:	ldr	r2, [r3, #8]
    8ca4:	ldr	r3, [r0, #12]
    8ca6:	tst	r2, r3
    8ca8:	ite	ne
    8caa:	movne	r0, #1
    8cac:	moveq	r0, #0
    8cae:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return 0;
    8cb0:	movs	r0, #0
}
    8cb2:	bx	lr
    8cb4:	.word	0x20000ae8

00008cb8 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    8cb8:	cmp	r0, #54	; 0x36
{
    8cba:	push	{r4, r5, lr}
	if (pin >= CORE_NUM_DIGITAL) return;
    8cbc:	bhi.n	8cee <pinMode+0x36>
	p = digital_pin_to_info_PGM + pin;
    8cbe:	ldr	r3, [pc, #76]	; (8d0c <pinMode+0x54>)
    8cc0:	lsls	r2, r0, #4
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    8cc2:	cmp	r1, #1
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    8cc4:	ldr	r2, [r3, r2]
	p = digital_pin_to_info_PGM + pin;
    8cc6:	add.w	r0, r3, r0, lsl #4
		*(p->reg + 1) |= p->mask; // TODO: atomic
    8cca:	ldr	r4, [r2, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    8ccc:	ldrd	r3, r5, [r0, #8]
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    8cd0:	beq.n	8cd6 <pinMode+0x1e>
    8cd2:	cmp	r1, #4
    8cd4:	bne.n	8cf0 <pinMode+0x38>
		*(p->reg + 1) |= p->mask; // TODO: atomic
    8cd6:	orrs	r4, r5
		if (mode == OUTPUT) {
    8cd8:	cmp	r1, #1
		*(p->reg + 1) |= p->mask; // TODO: atomic
    8cda:	str	r4, [r2, #4]
		if (mode == OUTPUT) {
    8cdc:	bne.n	8ce2 <pinMode+0x2a>
			*(p->pad) = IOMUXC_PAD_DSE(7);
    8cde:	movs	r2, #56	; 0x38
    8ce0:	b.n	8ce6 <pinMode+0x2e>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    8ce2:	movw	r2, #2104	; 0x838
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    8ce6:	str	r2, [r3, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    8ce8:	movs	r2, #21
    8cea:	ldr	r3, [r0, #4]
    8cec:	str	r2, [r3, #0]
}
    8cee:	pop	{r4, r5, pc}
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    8cf0:	bic.w	r4, r4, r5
    8cf4:	str	r4, [r2, #4]
		if (mode == INPUT) {
    8cf6:	cmp	r1, #0
    8cf8:	beq.n	8cde <pinMode+0x26>
		} else if (mode == INPUT_PULLUP) {
    8cfa:	cmp	r1, #2
    8cfc:	bne.n	8d02 <pinMode+0x4a>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    8cfe:	ldr	r2, [pc, #16]	; (8d10 <pinMode+0x58>)
    8d00:	b.n	8ce6 <pinMode+0x2e>
		} else if (mode == INPUT_PULLDOWN) {
    8d02:	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    8d04:	ite	eq
    8d06:	ldreq	r2, [pc, #12]	; (8d14 <pinMode+0x5c>)
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    8d08:	ldrne	r2, [pc, #12]	; (8d18 <pinMode+0x60>)
    8d0a:	b.n	8ce6 <pinMode+0x2e>
    8d0c:	.word	0x20000ae8
    8d10:	.word	0x0001f038
    8d14:	.word	0x00013038
    8d18:	.word	0x00010038

00008d1c <flexpwm_init>:

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    8d1c:	mov.w	r3, #61440	; 0xf000
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    8d20:	movs	r2, #0
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    8d22:	strh.w	r3, [r0, #396]	; 0x18c
	p->FSTS0 = 0x000F; // clear fault status
    8d26:	movs	r3, #15
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    8d28:	mov	r1, r2
	p->FSTS0 = 0x000F; // clear fault status
    8d2a:	strh.w	r3, [r0, #398]	; 0x18e
	p->FFILT0 = 0;
    8d2e:	strh.w	r2, [r0, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    8d32:	ldrh.w	r3, [r0, #392]	; 0x188
    8d36:	uxth	r3, r3
{
    8d38:	push	{r4, r5, r6, r7, lr}
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    8d3a:	orr.w	r3, r3, #240	; 0xf0
    8d3e:	movs	r7, #96	; 0x60
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    8d40:	mov.w	r6, #57344	; 0xe000
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    8d44:	mov.w	r5, #1024	; 0x400
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    8d48:	movw	r4, #33464	; 0x82b8
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    8d4c:	strh.w	r3, [r0, #392]	; 0x188
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    8d50:	mla	r3, r7, r2, r0
	for (i=0; i < 4; i++) {
    8d54:	adds	r2, #1
    8d56:	cmp	r2, #4
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    8d58:	strh	r6, [r3, #4]
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    8d5a:	strh	r5, [r3, #6]
		p->SM[i].OCTRL = 0;
    8d5c:	strh	r1, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    8d5e:	strh	r1, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    8d60:	strh	r1, [r3, #2]
		p->SM[i].VAL0 = 0;
    8d62:	strh	r1, [r3, #10]
		p->SM[i].VAL1 = 33464;
    8d64:	strh	r4, [r3, #14]
		p->SM[i].VAL2 = 0;
    8d66:	strh	r1, [r3, #18]
		p->SM[i].VAL3 = 0;
    8d68:	strh	r1, [r3, #22]
		p->SM[i].VAL4 = 0;
    8d6a:	strh	r1, [r3, #26]
		p->SM[i].VAL5 = 0;
    8d6c:	strh	r1, [r3, #30]
	for (i=0; i < 4; i++) {
    8d6e:	bne.n	8d50 <flexpwm_init+0x34>
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    8d70:	ldrh.w	r3, [r0, #392]	; 0x188
    8d74:	uxth	r3, r3
    8d76:	orr.w	r3, r3, #15
    8d7a:	strh.w	r3, [r0, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    8d7e:	ldrh.w	r3, [r0, #392]	; 0x188
    8d82:	uxth	r3, r3
    8d84:	orr.w	r3, r3, #3840	; 0xf00
    8d88:	strh.w	r3, [r0, #392]	; 0x188
}
    8d8c:	pop	{r4, r5, r6, r7, pc}

00008d8e <quadtimer_init>:

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    8d8e:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    8d90:	mov.w	ip, #15
{
    8d94:	push	{r4, r5, r6, r7, lr}
		p->CH[i].CTRL = 0; // stop timer
    8d96:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    8d98:	movw	r7, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    8d9c:	movw	r6, #24000	; 0x5dc0
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    8da0:	movw	r4, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    8da4:	add.w	r3, r0, r2, lsl #5
    8da8:	lsls	r5, r2, #5
	for (i=0; i < 4; i++) {
    8daa:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    8dac:	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    8dae:	cmp	r2, #4
		p->CH[i].CNTR = 0;
    8db0:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    8db2:	strh.w	ip, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    8db6:	strh	r7, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    8db8:	strh	r6, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    8dba:	strh	r1, [r0, r5]
		p->CH[i].CMPLD1 = 0;
    8dbc:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    8dbe:	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    8dc0:	bne.n	8da4 <quadtimer_init+0x16>
			TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
	}
}
    8dc2:	pop	{r4, r5, r6, r7, pc}

00008dc4 <pwm_init>:

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    8dc4:	ldr	r2, [pc, #84]	; (8e1c <pwm_init+0x58>)
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
		CCM_CCGR6_QTIMER3(CCM_CCGR_ON) | CCM_CCGR6_QTIMER4(CCM_CCGR_ON);
	flexpwm_init(&IMXRT_FLEXPWM1);
    8dc6:	ldr	r0, [pc, #88]	; (8e20 <pwm_init+0x5c>)
{
    8dc8:	push	{r3, lr}
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    8dca:	ldr	r3, [r2, #120]	; 0x78
    8dcc:	orr.w	r3, r3, #16711680	; 0xff0000
    8dd0:	str	r3, [r2, #120]	; 0x78
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    8dd2:	ldr.w	r3, [r2, #128]	; 0x80
    8dd6:	orr.w	r3, r3, #4227858432	; 0xfc000000
    8dda:	orr.w	r3, r3, #196608	; 0x30000
    8dde:	str.w	r3, [r2, #128]	; 0x80
	flexpwm_init(&IMXRT_FLEXPWM1);
    8de2:	bl	8d1c <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM2);
    8de6:	add.w	r0, r0, #16384	; 0x4000
    8dea:	bl	8d1c <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM3);
    8dee:	add.w	r0, r0, #16384	; 0x4000
    8df2:	bl	8d1c <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM4);
    8df6:	add.w	r0, r0, #16384	; 0x4000
    8dfa:	bl	8d1c <flexpwm_init>
	quadtimer_init(&IMXRT_TMR1);
    8dfe:	sub.w	r0, r0, #2146304	; 0x20c000
    8e02:	bl	8d8e <quadtimer_init>
	quadtimer_init(&IMXRT_TMR2);
    8e06:	add.w	r0, r0, #16384	; 0x4000
    8e0a:	bl	8d8e <quadtimer_init>
	quadtimer_init(&IMXRT_TMR3);
    8e0e:	add.w	r0, r0, #16384	; 0x4000
}
    8e12:	ldmia.w	sp!, {r3, lr}
	quadtimer_init(&IMXRT_TMR3);
    8e16:	b.w	8d8e <quadtimer_init>
    8e1a:	nop
    8e1c:	.word	0x400fc000
    8e20:	.word	0x403dc000

00008e24 <rx_queue_transfer>:
{
    8e24:	push	{r3, r4, r5, r6, r7, lr}
	void *buffer = rx_buffer + i * MIDI_RX_SIZE_480;
    8e26:	ldr	r4, [pc, #80]	; (8e78 <rx_queue_transfer+0x54>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    8e28:	mov.w	r6, #3758153728	; 0xe000e000
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    8e2c:	ldr	r5, [pc, #76]	; (8e7c <rx_queue_transfer+0x58>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    8e2e:	mov.w	r2, #131072	; 0x20000
	void *buffer = rx_buffer + i * MIDI_RX_SIZE_480;
    8e32:	add.w	r4, r4, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    8e36:	ldr	r7, [pc, #72]	; (8e80 <rx_queue_transfer+0x5c>)
    8e38:	add.w	r5, r5, r0, lsl #5
{
    8e3c:	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
    8e3e:	str.w	r2, [r6, #396]	; 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    8e42:	mov	r1, r4
    8e44:	ldrh	r2, [r7, #0]
    8e46:	mov	r0, r5
    8e48:	bl	885c <usb_prepare_transfer>
	arm_dcache_delete(buffer, rx_packet_size);
    8e4c:	ldrh	r3, [r7, #0]
	uint32_t end_addr = (uint32_t)addr + size;
    8e4e:	add	r3, r4
	asm("dsb");
    8e50:	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    8e54:	str.w	r4, [r6, #3932]	; 0xf5c
		location += 32;
    8e58:	adds	r4, #32
	} while (location < end_addr);
    8e5a:	cmp	r3, r4
    8e5c:	bhi.n	8e54 <rx_queue_transfer+0x30>
	asm("dsb");
    8e5e:	dsb	sy
	asm("isb");
    8e62:	isb	sy
	usb_receive(MIDI_RX_ENDPOINT, rx_transfer + i);
    8e66:	movs	r0, #4
    8e68:	mov	r1, r5
    8e6a:	bl	88ac <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    8e6e:	mov.w	r3, #131072	; 0x20000
    8e72:	str.w	r3, [r6, #268]	; 0x10c
}
    8e76:	pop	{r3, r4, r5, r6, r7, pc}
    8e78:	.word	0x20203d00
    8e7c:	.word	0x20003820
    8e80:	.word	0x2000717a

00008e84 <rx_event>:
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    8e84:	ldr	r2, [r0, #4]
    8e86:	ldr	r3, [pc, #72]	; (8ed0 <rx_event+0x4c>)
    8e88:	ubfx	r2, r2, #16, #15
	int i = t->callback_param;
    8e8c:	ldr	r0, [r0, #28]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    8e8e:	ldrh	r3, [r3, #0]
    8e90:	subs	r3, r3, r2
	len &= 0xFFFC; // MIDI packets must be multiple of 4 bytes
    8e92:	movw	r2, #65532	; 0xfffc
	if (len > 0) {
    8e96:	ands	r3, r2
{
    8e98:	push	{r4, r5}
	if (len > 0) {
    8e9a:	beq.n	8eca <rx_event+0x46>
		uint32_t head = rx_head;
    8e9c:	ldr	r1, [pc, #52]	; (8ed4 <rx_event+0x50>)
		rx_index[i] = 0;
    8e9e:	movs	r5, #0
		rx_count[i] = len;
    8ea0:	ldr	r4, [pc, #52]	; (8ed8 <rx_event+0x54>)
		uint32_t head = rx_head;
    8ea2:	ldrb	r2, [r1, #0]
		rx_count[i] = len;
    8ea4:	strh.w	r3, [r4, r0, lsl #1]
		if (++head > RX_NUM) head = 0;
    8ea8:	adds	r2, #1
		rx_index[i] = 0;
    8eaa:	ldr	r4, [pc, #48]	; (8edc <rx_event+0x58>)
		if (++head > RX_NUM) head = 0;
    8eac:	cmp	r2, #7
		rx_index[i] = 0;
    8eae:	strh.w	r5, [r4, r0, lsl #1]
		rx_list[head] = i;
    8eb2:	ldr	r4, [pc, #44]	; (8ee0 <rx_event+0x5c>)
		if (++head > RX_NUM) head = 0;
    8eb4:	it	cs
    8eb6:	movcs	r2, r5
		rx_list[head] = i;
    8eb8:	strb	r0, [r4, r2]
		rx_head = head;
    8eba:	uxtb	r2, r2
    8ebc:	strb	r2, [r1, #0]
		rx_available += len;
    8ebe:	ldr	r2, [pc, #36]	; (8ee4 <rx_event+0x60>)
    8ec0:	ldr	r1, [r2, #0]
    8ec2:	add	r3, r1
}
    8ec4:	pop	{r4, r5}
		rx_available += len;
    8ec6:	str	r3, [r2, #0]
}
    8ec8:	bx	lr
    8eca:	pop	{r4, r5}
		rx_queue_transfer(i);
    8ecc:	b.w	8e24 <rx_queue_transfer>
    8ed0:	.word	0x2000717a
    8ed4:	.word	0x20007c14
    8ed8:	.word	0x20007150
    8edc:	.word	0x2000716c
    8ee0:	.word	0x20007c1e
    8ee4:	.word	0x200070cc

00008ee8 <usb_midi_configure>:
	if (usb_high_speed) {
    8ee8:	ldr	r3, [pc, #128]	; (8f6c <usb_midi_configure+0x84>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
    8eea:	movs	r2, #128	; 0x80
    8eec:	movs	r1, #0
    8eee:	ldr	r0, [pc, #128]	; (8f70 <usb_midi_configure+0x88>)
{
    8ef0:	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
    8ef2:	ldrb	r3, [r3, #0]
	tx_head = 0;
    8ef4:	movs	r4, #0
		tx_packet_size = MIDI_TX_SIZE_480;
    8ef6:	ldr	r6, [pc, #124]	; (8f74 <usb_midi_configure+0x8c>)
	if (usb_high_speed) {
    8ef8:	cmp	r3, #0
		rx_packet_size = MIDI_RX_SIZE_480;
    8efa:	ldr	r3, [pc, #124]	; (8f78 <usb_midi_configure+0x90>)
	if (usb_high_speed) {
    8efc:	ite	eq
    8efe:	moveq	r5, #64	; 0x40
    8f00:	movne.w	r5, #512	; 0x200
		rx_packet_size = MIDI_RX_SIZE_480;
    8f04:	strh	r5, [r3, #0]
		tx_packet_size = MIDI_TX_SIZE_480;
    8f06:	strh	r5, [r6, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    8f08:	bl	7528 <memset>
	tx_head = 0;
    8f0c:	ldr	r3, [pc, #108]	; (8f7c <usb_midi_configure+0x94>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    8f0e:	movs	r2, #192	; 0xc0
    8f10:	mov	r1, r4
    8f12:	ldr	r0, [pc, #108]	; (8f80 <usb_midi_configure+0x98>)
	tx_head = 0;
    8f14:	strb	r4, [r3, #0]
	tx_available = 0;
    8f16:	ldr	r3, [pc, #108]	; (8f84 <usb_midi_configure+0x9c>)
    8f18:	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    8f1a:	bl	7528 <memset>
	memset(rx_count, 0, sizeof(rx_count));
    8f1e:	ldr	r3, [pc, #104]	; (8f88 <usb_midi_configure+0xa0>)
	usb_config_rx(MIDI_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    8f20:	mov	r2, r4
    8f22:	mov	r1, r5
    8f24:	movs	r0, #4
	memset(rx_count, 0, sizeof(rx_count));
    8f26:	str	r4, [r3, #0]
    8f28:	str	r4, [r3, #4]
    8f2a:	str	r4, [r3, #8]
	memset(rx_index, 0, sizeof(rx_index));
    8f2c:	ldr	r3, [pc, #92]	; (8f8c <usb_midi_configure+0xa4>)
    8f2e:	str	r4, [r3, #0]
    8f30:	str	r4, [r3, #4]
    8f32:	str	r4, [r3, #8]
	rx_head = 0;
    8f34:	ldr	r3, [pc, #88]	; (8f90 <usb_midi_configure+0xa8>)
    8f36:	strb	r4, [r3, #0]
	rx_tail = 0;
    8f38:	ldr	r3, [pc, #88]	; (8f94 <usb_midi_configure+0xac>)
    8f3a:	strb	r4, [r3, #0]
	rx_available = 0;
    8f3c:	ldr	r3, [pc, #88]	; (8f98 <usb_midi_configure+0xb0>)
    8f3e:	str	r4, [r3, #0]
	usb_config_rx(MIDI_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    8f40:	ldr	r3, [pc, #88]	; (8f9c <usb_midi_configure+0xb4>)
    8f42:	bl	875c <usb_config_rx>
	usb_config_tx(MIDI_TX_ENDPOINT, tx_packet_size, 0, NULL); // TODO: is ZLP needed?
    8f46:	mov	r3, r4
    8f48:	mov	r2, r4
    8f4a:	ldrh	r1, [r6, #0]
    8f4c:	movs	r0, #4
    8f4e:	bl	879c <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    8f52:	mov	r0, r4
    8f54:	adds	r4, #1
    8f56:	bl	8e24 <rx_queue_transfer>
    8f5a:	cmp	r4, #6
    8f5c:	bne.n	8f52 <usb_midi_configure+0x6a>
	transmit_previous_timeout = 0;
    8f5e:	movs	r3, #0
    8f60:	ldr	r2, [pc, #60]	; (8fa0 <usb_midi_configure+0xb8>)
    8f62:	strb	r3, [r2, #0]
	tx_noautoflush = 0;
    8f64:	ldr	r2, [pc, #60]	; (8fa4 <usb_midi_configure+0xbc>)
    8f66:	strb	r3, [r2, #0]
}
    8f68:	pop	{r4, r5, r6, pc}
    8f6a:	nop
    8f6c:	.word	0x20007c34
    8f70:	.word	0x200039a0
    8f74:	.word	0x20007182
    8f78:	.word	0x2000717a
    8f7c:	.word	0x20007c2b
    8f80:	.word	0x20003820
    8f84:	.word	0x2000717e
    8f88:	.word	0x20007150
    8f8c:	.word	0x2000716c
    8f90:	.word	0x20007c14
    8f94:	.word	0x20007c26
    8f98:	.word	0x200070cc
    8f9c:	.word	0x00008e85
    8fa0:	.word	0x20007c29
    8fa4:	.word	0x20007c2d

00008fa8 <usb_midi_flush_output>:
	if (tx_noautoflush == 0 && tx_available > 0) {
    8fa8:	ldr	r3, [pc, #128]	; (902c <usb_midi_flush_output+0x84>)
{
    8faa:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_noautoflush == 0 && tx_available > 0) {
    8fae:	ldrb	r3, [r3, #0]
    8fb0:	cmp	r3, #0
    8fb2:	bne.n	9028 <usb_midi_flush_output+0x80>
    8fb4:	ldr	r7, [pc, #120]	; (9030 <usb_midi_flush_output+0x88>)
    8fb6:	ldrh	r2, [r7, #0]
    8fb8:	cmp	r2, #0
    8fba:	beq.n	9028 <usb_midi_flush_output+0x80>
		uint32_t head = tx_head;
    8fbc:	ldr	r6, [pc, #116]	; (9034 <usb_midi_flush_output+0x8c>)
		transfer_t *xfer = tx_transfer + head;
    8fbe:	ldr	r1, [pc, #120]	; (9038 <usb_midi_flush_output+0x90>)
		uint32_t head = tx_head;
    8fc0:	ldrb	r5, [r6, #0]
		uint8_t *txbuf = txbuffer + (head * TX_SIZE);
    8fc2:	ldr	r4, [pc, #120]	; (903c <usb_midi_flush_output+0x94>)
		transfer_t *xfer = tx_transfer + head;
    8fc4:	add.w	r8, r1, r5, lsl #5
		uint32_t len = tx_packet_size - tx_available;
    8fc8:	ldr	r1, [pc, #116]	; (9040 <usb_midi_flush_output+0x98>)
		uint8_t *txbuf = txbuffer + (head * TX_SIZE);
    8fca:	add.w	r4, r4, r5, lsl #9
		uint32_t len = tx_packet_size - tx_available;
    8fce:	ldrh	r1, [r1, #0]
		usb_prepare_transfer(xfer, txbuf, len, 0);
    8fd0:	mov	r0, r8
    8fd2:	subs	r2, r1, r2
    8fd4:	mov	r1, r4
    8fd6:	bl	885c <usb_prepare_transfer>
	asm("dsb");
    8fda:	dsb	sy
    8fde:	add.w	r2, r4, #32
	uint32_t end_addr = (uint32_t)addr + size;
    8fe2:	add.w	r3, r4, #512	; 0x200
    8fe6:	cmp	r3, r2
    8fe8:	ite	cc
    8fea:	movcc	r3, #1
    8fec:	movcs	r3, #16
		SCB_CACHE_DCCIMVAC = location;
    8fee:	mov.w	r2, #3758153728	; 0xe000e000
    8ff2:	add.w	r3, r4, r3, lsl #5
    8ff6:	str.w	r4, [r2, #3952]	; 0xf70
		location += 32;
    8ffa:	adds	r4, #32
	} while (location < end_addr);
    8ffc:	cmp	r4, r3
    8ffe:	bne.n	8ff6 <usb_midi_flush_output+0x4e>
	asm("dsb");
    9000:	dsb	sy
	asm("isb");
    9004:	isb	sy
		usb_transmit(MIDI_TX_ENDPOINT, xfer);
    9008:	movs	r0, #4
    900a:	mov	r1, r8
    900c:	bl	8888 <usb_transmit>
		if (++head >= TX_NUM) head = 0;
    9010:	adds	r3, r5, #1
		usb_stop_sof_interrupts(MIDI_INTERFACE);
    9012:	movs	r0, #2
		if (++head >= TX_NUM) head = 0;
    9014:	cmp	r3, #4
    9016:	it	cs
    9018:	movcs	r3, #0
		tx_head = head;
    901a:	strb	r3, [r6, #0]
		tx_available = 0;
    901c:	movs	r3, #0
    901e:	strh	r3, [r7, #0]
}
    9020:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		usb_stop_sof_interrupts(MIDI_INTERFACE);
    9024:	b.w	81dc <usb_stop_sof_interrupts>
}
    9028:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    902c:	.word	0x20007c2d
    9030:	.word	0x2000717e
    9034:	.word	0x20007c2b
    9038:	.word	0x200039a0
    903c:	.word	0x20204900
    9040:	.word	0x20007182

00009044 <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    9044:	ldr	r3, [pc, #68]	; (908c <usb_init_serialnumber+0x48>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
    9046:	movs	r2, #10
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    9048:	ldr.w	r0, [r3, #544]	; 0x220
	if (num < 10000000) num = num * 10;
    904c:	ldr	r3, [pc, #64]	; (9090 <usb_init_serialnumber+0x4c>)
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    904e:	bic.w	r0, r0, #4278190080	; 0xff000000
	if (num < 10000000) num = num * 10;
    9052:	cmp	r0, r3
{
    9054:	push	{r4, r5, lr}
	if (num < 10000000) num = num * 10;
    9056:	it	cc
    9058:	movcc	r3, #10
{
    905a:	sub	sp, #20
	if (num < 10000000) num = num * 10;
    905c:	it	cc
    905e:	mulcc	r0, r3
	ultoa(num, buf, 10);
    9060:	add	r1, sp, #4
    9062:	bl	a026 <ultoa>
	for (i=0; i<10; i++) {
    9066:	ldr	r0, [pc, #44]	; (9094 <usb_init_serialnumber+0x50>)
    9068:	add	r2, sp, #4
    906a:	movs	r1, #0
    906c:	mov	r5, r0
		char c = buf[i];
    906e:	ldrb.w	r4, [r2], #1
		if (!c) break;
    9072:	mov	r3, r1
	for (i=0; i<10; i++) {
    9074:	adds	r1, #1
		if (!c) break;
    9076:	cbz	r4, 9082 <usb_init_serialnumber+0x3e>
	for (i=0; i<10; i++) {
    9078:	cmp	r1, #10
		usb_string_serial_number_default.wString[i] = c;
    907a:	strh.w	r4, [r0, #2]!
	for (i=0; i<10; i++) {
    907e:	bne.n	906e <usb_init_serialnumber+0x2a>
    9080:	mov	r3, r1
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    9082:	adds	r3, #1
    9084:	lsls	r3, r3, #1
    9086:	strb	r3, [r5, #0]
}
    9088:	add	sp, #20
    908a:	pop	{r4, r5, pc}
    908c:	.word	0x401f4400
    9090:	.word	0x00989680
    9094:	.word	0x20002186

00009098 <EventResponder::runFromYield()>:
	// Wait for event(s) to occur.  These are most likely to be useful when
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);
	static void runFromYield() {
		if (!firstYield) return;  
    9098:	ldr	r1, [pc, #68]	; (90e0 <EventResponder::runFromYield()+0x48>)
	static void runFromYield() {
    909a:	push	{r3, r4, r5, lr}
		if (!firstYield) return;  
    909c:	ldr	r3, [r1, #0]
    909e:	cbz	r3, 90b4 <EventResponder::runFromYield()+0x1c>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    90a0:	mrs	r3, IPSR
		if (ipsr != 0) return;
    90a4:	cbnz	r3, 90b4 <EventResponder::runFromYield()+0x1c>
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    90a6:	mrs	r2, PRIMASK
		__disable_irq();
    90aa:	cpsid	i
		EventResponder *first = firstYield;
    90ac:	ldr	r0, [r1, #0]
		if (first == nullptr) {
    90ae:	cbnz	r0, 90b6 <EventResponder::runFromYield()+0x1e>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    90b0:	cbnz	r2, 90b4 <EventResponder::runFromYield()+0x1c>
    90b2:	cpsie	i
	}
    90b4:	pop	{r3, r4, r5, pc}
		if (runningFromYield) {
    90b6:	ldr	r4, [pc, #44]	; (90e4 <EventResponder::runFromYield()+0x4c>)
    90b8:	ldrb	r5, [r4, #0]
    90ba:	cmp	r5, #0
    90bc:	bne.n	90b0 <EventResponder::runFromYield()+0x18>
		runningFromYield = true;
    90be:	movs	r3, #1
    90c0:	strb	r3, [r4, #0]
		firstYield = first->_next;
    90c2:	ldr	r3, [r0, #20]
    90c4:	str	r3, [r1, #0]
		if (firstYield) {
    90c6:	cbz	r3, 90da <EventResponder::runFromYield()+0x42>
			firstYield->_prev = nullptr;
    90c8:	str	r5, [r3, #24]
		if (doit) __enable_irq();
    90ca:	cbnz	r2, 90ce <EventResponder::runFromYield()+0x36>
    90cc:	cpsie	i
		first->_triggered = false;
    90ce:	movs	r5, #0
		(*(first->_function))(*first);
    90d0:	ldr	r3, [r0, #8]
		first->_triggered = false;
    90d2:	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    90d4:	blx	r3
		runningFromYield = false;
    90d6:	strb	r5, [r4, #0]
    90d8:	b.n	90b4 <EventResponder::runFromYield()+0x1c>
			lastYield = nullptr;
    90da:	ldr	r1, [pc, #12]	; (90e8 <EventResponder::runFromYield()+0x50>)
    90dc:	str	r3, [r1, #0]
    90de:	b.n	90ca <EventResponder::runFromYield()+0x32>
    90e0:	.word	0x20006954
    90e4:	.word	0x200071fc
    90e8:	.word	0x20006960

000090ec <yield>:

extern const uint8_t _serialEvent_default;	

void yield(void) __attribute__ ((weak));
void yield(void)
{
    90ec:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
    90f0:	ldr	r4, [pc, #112]	; (9164 <yield+0x78>)
    90f2:	ldrb	r3, [r4, #0]
    90f4:	cbz	r3, 9130 <yield+0x44>
	if (running) return; // TODO: does this need to be atomic?
    90f6:	ldr	r5, [pc, #112]	; (9168 <yield+0x7c>)
    90f8:	ldrb	r2, [r5, #0]
    90fa:	cbnz	r2, 9130 <yield+0x44>
	running = 1;
    90fc:	movs	r2, #1


	// USB Serial - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    90fe:	lsls	r1, r3, #31
	running = 1;
    9100:	strb	r2, [r5, #0]
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    9102:	bpl.n	911c <yield+0x30>
        virtual int available() { return usb_serial_available(); }
    9104:	bl	7a40 <usb_serial_available>
		if (Serial.available()) serialEvent();
    9108:	cbz	r0, 910e <yield+0x22>
    910a:	bl	a01c <serialEvent()>
		if (_serialEvent_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIAL;
    910e:	ldr	r2, [pc, #92]	; (916c <yield+0x80>)
    9110:	ldrb	r3, [r4, #0]
    9112:	ldrb	r2, [r2, #0]
    9114:	cbz	r2, 911c <yield+0x30>
    9116:	bic.w	r3, r3, #1
    911a:	strb	r3, [r4, #0]
		if (_serialEventUSB2_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIALUSB2;
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) HardwareSerial::processSerialEventsList();
    911c:	ldrb	r3, [r4, #0]
    911e:	lsls	r2, r3, #30
    9120:	bmi.n	9156 <yield+0x6a>

	running = 0;
    9122:	movs	r3, #0
    9124:	strb	r3, [r5, #0]
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    9126:	ldrb	r3, [r4, #0]
    9128:	lsls	r3, r3, #29
    912a:	bpl.n	9130 <yield+0x44>
    912c:	bl	9098 <EventResponder::runFromYield()>
	
};
    9130:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
			s_serials_with_serial_events[i]->doYieldCode();
    9134:	ldr.w	r7, [r9, r3, lsl #2]
	static HardwareSerial 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
    9138:	ldr	r3, [r7, #0]
    913a:	mov	r0, r7
    913c:	ldr	r3, [r3, #16]
    913e:	blx	r3
    9140:	cbz	r0, 9148 <yield+0x5c>
    9142:	ldr	r3, [r7, #20]
    9144:	ldr	r3, [r3, #8]
    9146:	blx	r3
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    9148:	adds	r6, #1
    914a:	ldrb.w	r2, [r8]
    914e:	uxtb	r3, r6
    9150:	cmp	r2, r3
    9152:	bhi.n	9134 <yield+0x48>
    9154:	b.n	9122 <yield+0x36>
    9156:	movs	r6, #0
    9158:	ldr.w	r8, [pc, #20]	; 9170 <yield+0x84>
			s_serials_with_serial_events[i]->doYieldCode();
    915c:	ldr.w	r9, [pc, #20]	; 9174 <yield+0x88>
    9160:	b.n	914a <yield+0x5e>
    9162:	nop
    9164:	.word	0x200021b3
    9168:	.word	0x200071ff
    916c:	.word	0x600027e8
    9170:	.word	0x200071fd
    9174:	.word	0x20006964

00009178 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    9178:	push	{r4, r5, r6, lr}
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    917a:	ldr	r5, [pc, #44]	; (91a8 <EventResponder::runFromInterrupt()+0x30>)
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    917c:	movs	r4, #0
			} else {
				lastInterrupt = nullptr;
    917e:	ldr	r6, [pc, #44]	; (91ac <EventResponder::runFromInterrupt()+0x34>)
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    9180:	mrs	r2, PRIMASK
		__disable_irq();
    9184:	cpsid	i
		EventResponder *first = firstInterrupt;
    9186:	ldr	r0, [r5, #0]
		if (first) {
    9188:	cbz	r0, 91a2 <EventResponder::runFromInterrupt()+0x2a>
			firstInterrupt = first->_next;
    918a:	ldr	r3, [r0, #20]
    918c:	str	r3, [r5, #0]
			if (firstInterrupt) {
    918e:	cbz	r3, 919e <EventResponder::runFromInterrupt()+0x26>
				firstInterrupt->_prev = nullptr;
    9190:	str	r4, [r3, #24]
		if (doit) __enable_irq();
    9192:	cbnz	r2, 9196 <EventResponder::runFromInterrupt()+0x1e>
    9194:	cpsie	i
			}
			enableInterrupts(irq);
			first->_triggered = false;
			(*(first->_function))(*first);
    9196:	ldr	r3, [r0, #8]
			first->_triggered = false;
    9198:	strb	r4, [r0, #29]
			(*(first->_function))(*first);
    919a:	blx	r3
		} else {
			enableInterrupts(irq);
			break;
		}
	}
    919c:	b.n	9180 <EventResponder::runFromInterrupt()+0x8>
				lastInterrupt = nullptr;
    919e:	str	r3, [r6, #0]
    91a0:	b.n	9192 <EventResponder::runFromInterrupt()+0x1a>
    91a2:	cbnz	r2, 91a6 <EventResponder::runFromInterrupt()+0x2e>
    91a4:	cpsie	i
}
    91a6:	pop	{r4, r5, r6, pc}
    91a8:	.word	0x2000695c
    91ac:	.word	0x20006958

000091b0 <pendablesrvreq_isr>:
	EventResponder::runFromInterrupt();
    91b0:	b.w	9178 <EventResponder::runFromInterrupt()>

000091b4 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    91b4:	ldr	r3, [pc, #16]	; (91c8 <systick_isr+0x14>)
    91b6:	ldr	r2, [r3, #4]
    91b8:	ldr	r3, [pc, #16]	; (91cc <systick_isr+0x18>)
    91ba:	str	r2, [r3, #0]
	systick_millis_count++;
    91bc:	ldr	r2, [pc, #16]	; (91d0 <systick_isr+0x1c>)
    91be:	ldr	r3, [r2, #0]
    91c0:	adds	r3, #1
    91c2:	str	r3, [r2, #0]
}
    91c4:	bx	lr
    91c6:	nop
    91c8:	.word	0xe0001000
    91cc:	.word	0x200070e4
    91d0:	.word	0x200070e8

000091d4 <DMAChannel::begin(bool)>:
#warning "CR is defined as something?"
#endif


void DMAChannel::begin(bool force_initialization)
{
    91d4:	push	{r4, r5, lr}
	uint32_t ch = 0;

	__disable_irq();
    91d6:	cpsid	i
	if (!force_initialization && TCD && channel < DMA_MAX_CHANNELS
    91d8:	ldr	r4, [pc, #136]	; (9264 <DMAChannel::begin(bool)+0x90>)
    91da:	cbnz	r1, 9200 <DMAChannel::begin(bool)+0x2c>
    91dc:	ldr	r1, [r0, #0]
    91de:	cbz	r1, 9200 <DMAChannel::begin(bool)+0x2c>
    91e0:	ldrb	r3, [r0, #4]
    91e2:	cmp	r3, #15
    91e4:	bhi.n	9200 <DMAChannel::begin(bool)+0x2c>
	  && (dma_channel_allocated_mask & (1 << channel))
    91e6:	ldrh	r2, [r4, #0]
    91e8:	asrs	r2, r3
    91ea:	lsls	r2, r2, #31
    91ec:	bpl.n	9200 <DMAChannel::begin(bool)+0x2c>
	  && (uint32_t)TCD == (uint32_t)(0x400E9000 + channel * 32)) {
    91ee:	add.w	r3, r3, #33554432	; 0x2000000
    91f2:	add.w	r3, r3, #29824	; 0x7480
    91f6:	cmp.w	r1, r3, lsl #5
    91fa:	bne.n	9200 <DMAChannel::begin(bool)+0x2c>
		// DMA channel already allocated
		__enable_irq();
    91fc:	cpsie	i
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
}
    91fe:	pop	{r4, r5, pc}
		if (!(dma_channel_allocated_mask & (1 << ch))) {
    9200:	ldrh	r1, [r4, #0]
    9202:	movs	r3, #0
    9204:	asr.w	r2, r1, r3
    9208:	ands.w	r2, r2, #1
    920c:	bne.n	9254 <DMAChannel::begin(bool)+0x80>
			dma_channel_allocated_mask |= (1 << ch);
    920e:	movs	r5, #1
    9210:	lsls	r5, r3
    9212:	orrs	r1, r5
    9214:	strh	r1, [r4, #0]
			__enable_irq();
    9216:	cpsie	i
	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    9218:	ldr	r5, [pc, #76]	; (9268 <DMAChannel::begin(bool)+0x94>)
	channel = ch;
    921a:	uxtb	r4, r3
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    921c:	add.w	r3, r3, #33554432	; 0x2000000
	channel = ch;
    9220:	strb	r4, [r0, #4]
	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    9222:	ldr	r1, [r5, #124]	; 0x7c
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    9224:	add.w	r3, r3, #29824	; 0x7480
	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    9228:	orr.w	r1, r1, #192	; 0xc0
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    922c:	lsls	r3, r3, #5
	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    922e:	str	r1, [r5, #124]	; 0x7c
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
    9230:	movw	r5, #1154	; 0x482
    9234:	ldr	r1, [pc, #52]	; (926c <DMAChannel::begin(bool)+0x98>)
    9236:	str	r5, [r1, #0]
	DMA_CERQ = ch;
    9238:	strb	r4, [r1, #26]
	DMA_CERR = ch;
    923a:	strb	r4, [r1, #30]
	DMA_CEEI = ch;
    923c:	strb	r4, [r1, #24]
	DMA_CINT = ch;
    923e:	strb	r4, [r1, #31]
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    9240:	str	r3, [r0, #0]
	*p++ = 0;
    9242:	strd	r2, r2, [r3]
	*p++ = 0;
    9246:	strd	r2, r2, [r3, #8]
	*p++ = 0;
    924a:	strd	r2, r2, [r3, #16]
	*p++ = 0;
    924e:	strd	r2, r2, [r3, #24]
    9252:	b.n	91fe <DMAChannel::begin(bool)+0x2a>
		if (++ch >= DMA_MAX_CHANNELS) {
    9254:	adds	r3, #1
    9256:	cmp	r3, #16
    9258:	bne.n	9204 <DMAChannel::begin(bool)+0x30>
			__enable_irq();
    925a:	cpsie	i
			TCD = (TCD_t *)0;
    925c:	movs	r2, #0
			channel = DMA_MAX_CHANNELS;
    925e:	strb	r3, [r0, #4]
			TCD = (TCD_t *)0;
    9260:	str	r2, [r0, #0]
			return; // no more channels available
    9262:	b.n	91fe <DMAChannel::begin(bool)+0x2a>
    9264:	.word	0x2000713e
    9268:	.word	0x400fc000
    926c:	.word	0x400e8000

00009270 <DMAChannel::release()>:

void DMAChannel::release(void)
{
	if (channel >= DMA_MAX_CHANNELS) return;
    9270:	ldrb	r3, [r0, #4]
    9272:	cmp	r3, #15
    9274:	bhi.n	9296 <DMAChannel::release()+0x26>
	DMA_CERQ = channel;
    9276:	ldr	r2, [pc, #32]	; (9298 <DMAChannel::release()+0x28>)
    9278:	strb	r3, [r2, #26]
	__disable_irq();
    927a:	cpsid	i
	dma_channel_allocated_mask &= ~(1 << channel);
    927c:	ldr	r1, [pc, #28]	; (929c <DMAChannel::release()+0x2c>)
    927e:	movs	r2, #1
    9280:	ldrb	r3, [r0, #4]
    9282:	lsls	r2, r3
    9284:	ldrh	r3, [r1, #0]
    9286:	bic.w	r3, r3, r2
    928a:	strh	r3, [r1, #0]
	__enable_irq();
    928c:	cpsie	i
	channel = DMA_MAX_CHANNELS;
    928e:	movs	r3, #16
    9290:	strb	r3, [r0, #4]
	TCD = (TCD_t *)0;
    9292:	movs	r3, #0
    9294:	str	r3, [r0, #0]
}
    9296:	bx	lr
    9298:	.word	0x400e8000
    929c:	.word	0x2000713e

000092a0 <Print::write(char const*)>:
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    92a0:	push	{r0, r1, r4, lr}
    92a2:	mov	r4, r0
    92a4:	mov	r0, r1
    92a6:	str	r1, [sp, #4]
    92a8:	bl	b240 <strlen>
    92ac:	ldr	r3, [r4, #0]
    92ae:	mov	r2, r0
    92b0:	ldr	r1, [sp, #4]
    92b2:	mov	r0, r4
    92b4:	ldr	r3, [r3, #4]
    92b6:	add	sp, #8
    92b8:	ldmia.w	sp!, {r4, lr}
    92bc:	bx	r3

000092be <Print::print(char const*)>:
	size_t print(const char s[])			{ return write(s); }
    92be:	push	{r3, lr}
    92c0:	bl	92a0 <Print::write(char const*)>
    92c4:	pop	{r3, pc}

000092c6 <Print::print(unsigned char)>:
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    92c6:	movs	r3, #0
    92c8:	movs	r2, #10
    92ca:	b.w	9edc <Print::printNumber(unsigned long, unsigned char, unsigned char)>

000092ce <Print::print(unsigned long, int)>:
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
    92ce:	movs	r3, #0
    92d0:	uxtb	r2, r2
    92d2:	b.w	9edc <Print::printNumber(unsigned long, unsigned char, unsigned char)>

000092d6 <Print::println(char const*)>:
	size_t println(const char s[])			{ return print(s) + println(); }
    92d6:	push	{r3, r4, r5, lr}
    92d8:	mov	r5, r0
	size_t print(const char s[])			{ return write(s); }
    92da:	bl	92a0 <Print::write(char const*)>
    92de:	mov	r4, r0
	size_t println(const char s[])			{ return print(s) + println(); }
    92e0:	mov	r0, r5
    92e2:	bl	9e9a <Print::println()>
    92e6:	add	r0, r4
    92e8:	pop	{r3, r4, r5, pc}

000092ea <Print::println(unsigned long, int)>:
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
    92ea:	push	{r3, r4, r5, lr}
    92ec:	mov	r5, r0
    92ee:	bl	92ce <Print::print(unsigned long, int)>
    92f2:	mov	r4, r0
    92f4:	mov	r0, r5
    92f6:	bl	9e9a <Print::println()>
    92fa:	add	r0, r4
    92fc:	pop	{r3, r4, r5, pc}

000092fe <usb_serial_class::clear()>:
        virtual void clear(void) { usb_serial_flush_input(); }
    92fe:	b.w	7a54 <usb_serial_flush_input>

00009302 <usb_serial_class::peek()>:
        virtual int peek() { return usb_serial_peekchar(); }
    9302:	b.w	79fc <usb_serial_peekchar>

00009306 <usb_serial_class::read()>:
        virtual int read() { return usb_serial_getchar(); }
    9306:	b.w	7ab4 <usb_serial_getchar>

0000930a <usb_serial_class::available()>:
        virtual int available() { return usb_serial_available(); }
    930a:	b.w	7a40 <usb_serial_available>

0000930e <usb_serial_class::flush()>:
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    930e:	b.w	7cc4 <usb_serial_flush_output>

00009312 <usb_serial_class::availableForWrite()>:
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    9312:	b.w	7c78 <usb_serial_write_buffer_free>

00009316 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    9316:	mov	r0, r1
    9318:	mov	r1, r2
    931a:	b.w	7ad4 <usb_serial_write>

0000931e <usb_serial_class::write(unsigned char)>:
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    931e:	mov	r0, r1
    9320:	b.w	7c60 <usb_serial_putchar>

00009324 <breakTime(unsigned long, DateTimeFields&)>:
#define SECS_PER_HOUR 3600
#define SECS_PER_DAY  86400


void breakTime(uint32_t time, DateTimeFields &tm)
{
    9324:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  uint8_t year;
  uint8_t month, monthLength;
  unsigned long days;

  tm.sec = time % 60;
    9328:	movs	r4, #60	; 0x3c
  time /= 24; // now it is days
  tm.wday = ((time + 4) % 7);  // Sunday is day 0

  year = 0;
  days = 0;
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    932a:	movs	r5, #0
    932c:	movw	r8, #365	; 0x16d
    9330:	mov.w	ip, #100	; 0x64
    9334:	mov.w	lr, #400	; 0x190
  tm.sec = time % 60;
    9338:	udiv	r3, r0, r4
  tm.min = time % 60;
    933c:	udiv	r2, r3, r4
  tm.sec = time % 60;
    9340:	mls	r0, r4, r3, r0
  tm.min = time % 60;
    9344:	mls	r3, r4, r2, r3
  days = 0;
    9348:	mov	r4, r5
  tm.sec = time % 60;
    934a:	strb	r0, [r1, #0]
  tm.hour = time % 24;
    934c:	movs	r0, #24
  tm.min = time % 60;
    934e:	strb	r3, [r1, #1]
  tm.hour = time % 24;
    9350:	udiv	r3, r2, r0
    9354:	mls	r2, r0, r3, r2
  tm.wday = ((time + 4) % 7);  // Sunday is day 0
    9358:	adds	r0, r3, #4
  tm.hour = time % 24;
    935a:	strb	r2, [r1, #2]
  tm.wday = ((time + 4) % 7);  // Sunday is day 0
    935c:	movs	r2, #7
    935e:	udiv	r2, r0, r2
    9362:	rsb	r2, r2, r2, lsl #3
    9366:	subs	r0, r0, r2
    9368:	strb	r0, [r1, #3]
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    936a:	uxtb	r0, r5
    936c:	addw	r2, r0, #1970	; 0x7b2
    9370:	ands.w	r6, r2, #3
    9374:	bne.n	93fa <breakTime(unsigned long, DateTimeFields&)+0xd6>
    9376:	sdiv	r7, r2, ip
    937a:	mls	r7, ip, r7, r2
    937e:	cmp	r7, #0
    9380:	bne.n	9400 <breakTime(unsigned long, DateTimeFields&)+0xdc>
    9382:	sdiv	r7, r2, lr
    9386:	mls	r7, lr, r7, r2
    938a:	cmp	r7, #0
    938c:	ite	ne
    938e:	movne	r7, r8
    9390:	moveq.w	r7, #366	; 0x16e
    9394:	add	r4, r7
    9396:	adds	r5, #1
    9398:	cmp	r3, r4
    939a:	bcs.n	936a <breakTime(unsigned long, DateTimeFields&)+0x46>
    year++;
  }
  tm.year = year + 70; // year is offset from 1970
    939c:	adds	r0, #70	; 0x46
    939e:	strb	r0, [r1, #6]
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    93a0:	movs	r0, #100	; 0x64
    93a2:	udiv	r5, r2, r0
    93a6:	mls	r5, r0, r5, r2
    93aa:	mov.w	r0, #400	; 0x190
    93ae:	udiv	r7, r2, r0
    93b2:	mls	r2, r0, r7, r2

  days -= LEAP_YEAR(year) ? 366 : 365;
    93b6:	cbnz	r6, 9406 <breakTime(unsigned long, DateTimeFields&)+0xe2>
    93b8:	cbnz	r5, 940c <breakTime(unsigned long, DateTimeFields&)+0xe8>
    93ba:	cmp	r2, #0
    93bc:	movw	r0, #365	; 0x16d
    93c0:	it	eq
    93c2:	moveq.w	r0, #366	; 0x16e
  time  -= days; // now it is days in this year, starting at 0
    93c6:	subs	r3, r3, r4
        monthLength=29;
      } else {
        monthLength=28;
      }
    } else {
      monthLength = monthDays[month];
    93c8:	ldr.w	ip, [pc, #84]	; 9420 <breakTime(unsigned long, DateTimeFields&)+0xfc>
  time  -= days; // now it is days in this year, starting at 0
    93cc:	add	r3, r0
    93ce:	movs	r0, #0
    if (month==1) { // february
    93d0:	cmp	r0, #1
    93d2:	uxtb	r7, r0
    93d4:	bne.n	9412 <breakTime(unsigned long, DateTimeFields&)+0xee>
      if (LEAP_YEAR(year)) {
    93d6:	cbnz	r6, 9418 <breakTime(unsigned long, DateTimeFields&)+0xf4>
    93d8:	cbnz	r5, 941c <breakTime(unsigned long, DateTimeFields&)+0xf8>
        monthLength=29;
    93da:	cmp	r2, #0
    93dc:	ite	ne
    93de:	movne	r4, #28
    93e0:	moveq	r4, #29
    }

    if (time >= monthLength) {
    93e2:	cmp	r4, r3
    93e4:	bhi.n	93f0 <breakTime(unsigned long, DateTimeFields&)+0xcc>
  for (month=0; month<12; month++) {
    93e6:	adds	r0, #1
      time -= monthLength;
    93e8:	subs	r3, r3, r4
  for (month=0; month<12; month++) {
    93ea:	cmp	r0, #12
    93ec:	bne.n	93d0 <breakTime(unsigned long, DateTimeFields&)+0xac>
    93ee:	mov	r7, r0
    } else {
        break;
    }
  }
  tm.mon = month;  // jan is month 0
  tm.mday = time + 1;     // day of month
    93f0:	adds	r3, #1
  tm.mon = month;  // jan is month 0
    93f2:	strb	r7, [r1, #5]
  tm.mday = time + 1;     // day of month
    93f4:	strb	r3, [r1, #4]
}
    93f6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    93fa:	movw	r7, #365	; 0x16d
    93fe:	b.n	9394 <breakTime(unsigned long, DateTimeFields&)+0x70>
    9400:	mov.w	r7, #366	; 0x16e
    9404:	b.n	9394 <breakTime(unsigned long, DateTimeFields&)+0x70>
  days -= LEAP_YEAR(year) ? 366 : 365;
    9406:	movw	r0, #365	; 0x16d
    940a:	b.n	93c6 <breakTime(unsigned long, DateTimeFields&)+0xa2>
    940c:	mov.w	r0, #366	; 0x16e
    9410:	b.n	93c6 <breakTime(unsigned long, DateTimeFields&)+0xa2>
      monthLength = monthDays[month];
    9412:	ldrb.w	r4, [r0, ip]
    9416:	b.n	93e2 <breakTime(unsigned long, DateTimeFields&)+0xbe>
        monthLength=28;
    9418:	movs	r4, #28
    941a:	b.n	93e2 <breakTime(unsigned long, DateTimeFields&)+0xbe>
        monthLength=29;
    941c:	movs	r4, #29
    941e:	b.n	93e2 <breakTime(unsigned long, DateTimeFields&)+0xbe>
    9420:	.word	0x20001144

00009424 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    9424:	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    9426:	bl	6e0 <setup>
	while (1) {
		loop();
    942a:	bl	524 <loop>
		yield();
    942e:	bl	90ec <yield>
	while (1) {
    9432:	b.n	942a <main+0x6>

00009434 <AudioStream::update_all()>:
	static void update_all(void) { NVIC_SET_PENDING(IRQ_SOFTWARE); }
    9434:	mov.w	r3, #3758153728	; 0xe000e000
    9438:	movs	r2, #64	; 0x40
    943a:	str.w	r2, [r3, #520]	; 0x208
    943e:	bx	lr

00009440 <software_isr()>:
}

AudioStream * AudioStream::first_update = NULL;

void software_isr(void) // AudioStream::update_all()
{
    9440:	push	{r3, r4, r5, r6, r7, lr}
	AudioStream *p;

	uint32_t totalcycles = ARM_DWT_CYCCNT;
    9442:	ldr	r5, [pc, #80]	; (9494 <software_isr()+0x54>)
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
    9444:	ldr	r3, [pc, #80]	; (9498 <software_isr()+0x58>)
	uint32_t totalcycles = ARM_DWT_CYCCNT;
    9446:	ldr	r6, [r5, #4]
	for (p = AudioStream::first_update; p; p = p->next_update) {
    9448:	ldr	r4, [r3, #0]
    944a:	cbnz	r4, 946c <software_isr()+0x2c>
			p->cpu_cycles = cycles;
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
		}
	}
	//digitalWriteFast(2, LOW);
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 6;
    944c:	ldr	r3, [pc, #68]	; (9494 <software_isr()+0x54>)
	AudioStream::cpu_cycles_total = totalcycles;
    944e:	ldr	r2, [pc, #76]	; (949c <software_isr()+0x5c>)
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 6;
    9450:	ldr	r3, [r3, #4]
    9452:	subs	r3, r3, r6
	AudioStream::cpu_cycles_total = totalcycles;
    9454:	ubfx	r1, r3, #6, #16
    9458:	strh	r1, [r2, #0]
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    945a:	ldr	r2, [pc, #68]	; (94a0 <software_isr()+0x60>)
    945c:	ldrh	r0, [r2, #0]
    945e:	cmp.w	r0, r3, lsr #6
		AudioStream::cpu_cycles_total_max = totalcycles;
    9462:	it	cc
    9464:	strhcc	r1, [r2, #0]

	asm("DSB");
    9466:	dsb	sy
}
    946a:	pop	{r3, r4, r5, r6, r7, pc}
		if (p->active) {
    946c:	ldrb	r3, [r4, #8]
    946e:	cbz	r3, 948e <software_isr()+0x4e>
			p->update();
    9470:	ldr	r3, [r4, #0]
    9472:	mov	r0, r4
			uint32_t cycles = ARM_DWT_CYCCNT;
    9474:	ldr	r7, [r5, #4]
			p->update();
    9476:	ldr	r3, [r3, #0]
    9478:	blx	r3
			cycles = (ARM_DWT_CYCCNT - cycles) >> 6;
    947a:	ldr	r3, [r5, #4]
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
    947c:	ldrh	r1, [r4, #6]
			cycles = (ARM_DWT_CYCCNT - cycles) >> 6;
    947e:	subs	r3, r3, r7
			p->cpu_cycles = cycles;
    9480:	ubfx	r2, r3, #6, #16
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
    9484:	cmp.w	r1, r3, lsr #6
			p->cpu_cycles = cycles;
    9488:	strh	r2, [r4, #4]
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
    948a:	it	cc
    948c:	strhcc	r2, [r4, #6]
	for (p = AudioStream::first_update; p; p = p->next_update) {
    948e:	ldr	r4, [r4, #20]
    9490:	b.n	944a <software_isr()+0xa>
    9492:	nop
    9494:	.word	0xe0001000
    9498:	.word	0x200068b8
    949c:	.word	0x20007130
    94a0:	.word	0x20007132

000094a4 <AudioStream::allocate()>:
{
    94a4:	push	{r4, r5, r6, lr}
	__disable_irq();
    94a6:	cpsid	i
	index = memory_pool_first_mask;
    94a8:	ldr	r5, [pc, #112]	; (951c <AudioStream::allocate()+0x78>)
	p += index;
    94aa:	ldr	r4, [pc, #116]	; (9520 <AudioStream::allocate()+0x7c>)
	index = memory_pool_first_mask;
    94ac:	ldrh	r2, [r5, #0]
		if (p >= end) {
    94ae:	add.w	r6, r4, #112	; 0x70
	p += index;
    94b2:	add.w	r0, r4, r2, lsl #2
		if (p >= end) {
    94b6:	cmp	r0, r6
    94b8:	mov	r3, r0
    94ba:	bcc.n	94c2 <AudioStream::allocate()+0x1e>
			__enable_irq();
    94bc:	cpsie	i
			return NULL;
    94be:	movs	r0, #0
}
    94c0:	pop	{r4, r5, r6, pc}
		avail = *p;
    94c2:	ldr.w	r1, [r0], #4
		if (avail) break;
    94c6:	cbnz	r1, 94cc <AudioStream::allocate()+0x28>
		index++;
    94c8:	adds	r2, #1
		if (p >= end) {
    94ca:	b.n	94b6 <AudioStream::allocate()+0x12>
	n = __builtin_clz(avail);
    94cc:	clz	r6, r1
	avail &= ~(0x80000000 >> n);
    94d0:	mov.w	r0, #2147483648	; 0x80000000
    94d4:	lsrs	r0, r6
    94d6:	bic.w	r1, r1, r0
	*p = avail;
    94da:	str	r1, [r3, #0]
	if (!avail) index++;
    94dc:	cbnz	r1, 94e0 <AudioStream::allocate()+0x3c>
    94de:	adds	r2, #1
	memory_pool_first_mask = index;
    94e0:	strh	r2, [r5, #0]
	used = memory_used + 1;
    94e2:	ldr	r2, [pc, #64]	; (9524 <AudioStream::allocate()+0x80>)
    94e4:	ldrh	r1, [r2, #0]
	memory_used = used;
    94e6:	adds	r1, #1
    94e8:	uxth	r5, r1
    94ea:	strh	r5, [r2, #0]
	__enable_irq();
    94ec:	cpsie	i
	index = p - memory_pool_available_mask;
    94ee:	subs	r3, r3, r4
	block = memory_pool + ((index << 5) + (31 - n));
    94f0:	mov.w	r0, #8320	; 0x2080
	block->ref_count = 1;
    94f4:	movs	r4, #1
	index = p - memory_pool_available_mask;
    94f6:	asrs	r2, r3, #2
	block = memory_pool + ((index << 5) + (31 - n));
    94f8:	movw	r3, #8060	; 0x1f7c
    94fc:	mla	r3, r0, r2, r3
    9500:	ldr	r2, [pc, #36]	; (9528 <AudioStream::allocate()+0x84>)
    9502:	mla	r3, r2, r6, r3
    9506:	ldr	r2, [pc, #36]	; (952c <AudioStream::allocate()+0x88>)
    9508:	ldr	r2, [r2, #0]
	block->ref_count = 1;
    950a:	strb	r4, [r2, r3]
	block = memory_pool + ((index << 5) + (31 - n));
    950c:	adds	r0, r2, r3
	if (used > memory_used_max) memory_used_max = used;
    950e:	ldr	r3, [pc, #32]	; (9530 <AudioStream::allocate()+0x8c>)
    9510:	ldrh	r2, [r3, #0]
    9512:	cmp	r2, r1
    9514:	it	cc
    9516:	strhcc	r5, [r3, #0]
    9518:	b.n	94c0 <AudioStream::allocate()+0x1c>
    951a:	nop
    951c:	.word	0x20007134
    9520:	.word	0x200068bc
    9524:	.word	0x2000712c
    9528:	.word	0xfffffefc
    952c:	.word	0x200068b4
    9530:	.word	0x2000712e

00009534 <AudioStream::release(audio_block_struct*)>:
	uint32_t mask = (0x80000000 >> (31 - (block->memory_pool_index & 0x1F)));
    9534:	ldrh	r3, [r0, #2]
	__disable_irq();
    9536:	cpsid	i
	if (block->ref_count > 1) {
    9538:	ldrb	r2, [r0, #0]
    953a:	cmp	r2, #1
    953c:	bls.n	9546 <AudioStream::release(audio_block_struct*)+0x12>
		block->ref_count--;
    953e:	subs	r2, #1
    9540:	strb	r2, [r0, #0]
	__enable_irq();
    9542:	cpsie	i
}
    9544:	bx	lr
	uint32_t index = block->memory_pool_index >> 5;
    9546:	lsrs	r1, r3, #5
	uint32_t mask = (0x80000000 >> (31 - (block->memory_pool_index & 0x1F)));
    9548:	mvns	r3, r3
		memory_pool_available_mask[index] |= mask;
    954a:	ldr	r0, [pc, #44]	; (9578 <AudioStream::release(audio_block_struct*)+0x44>)
	uint32_t mask = (0x80000000 >> (31 - (block->memory_pool_index & 0x1F)));
    954c:	mov.w	r2, #2147483648	; 0x80000000
    9550:	and.w	r3, r3, #31
    9554:	lsr.w	r3, r2, r3
		memory_pool_available_mask[index] |= mask;
    9558:	ldr.w	r2, [r0, r1, lsl #2]
    955c:	orrs	r3, r2
    955e:	str.w	r3, [r0, r1, lsl #2]
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
    9562:	ldr	r3, [pc, #24]	; (957c <AudioStream::release(audio_block_struct*)+0x48>)
    9564:	ldrh	r2, [r3, #0]
    9566:	cmp	r2, r1
		memory_used--;
    9568:	ldr	r2, [pc, #20]	; (9580 <AudioStream::release(audio_block_struct*)+0x4c>)
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
    956a:	it	hi
    956c:	strhhi	r1, [r3, #0]
		memory_used--;
    956e:	ldrh	r3, [r2, #0]
    9570:	subs	r3, #1
    9572:	strh	r3, [r2, #0]
    9574:	b.n	9542 <AudioStream::release(audio_block_struct*)+0xe>
    9576:	nop
    9578:	.word	0x200068bc
    957c:	.word	0x20007134
    9580:	.word	0x2000712c

00009584 <AudioStream::transmit(audio_block_struct*, unsigned char)>:
	for (AudioConnection *c = destination_list; c != NULL; c = c->next_dest) {
    9584:	ldr	r3, [r0, #12]
{
    9586:	push	{r4, r5, lr}
	for (AudioConnection *c = destination_list; c != NULL; c = c->next_dest) {
    9588:	cbnz	r3, 958c <AudioStream::transmit(audio_block_struct*, unsigned char)+0x8>
}
    958a:	pop	{r4, r5, pc}
		if (c->src_index == index) {
    958c:	ldrb	r0, [r3, #8]
    958e:	cmp	r0, r2
    9590:	bne.n	95a8 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x24>
			if (c->dst->inputQueue[c->dest_index] == NULL) {
    9592:	ldr	r0, [r3, #4]
    9594:	ldrb	r4, [r3, #9]
    9596:	ldr	r0, [r0, #16]
    9598:	ldr.w	r5, [r0, r4, lsl #2]
    959c:	cbnz	r5, 95a8 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x24>
				c->dst->inputQueue[c->dest_index] = block;
    959e:	str.w	r1, [r0, r4, lsl #2]
				block->ref_count++;
    95a2:	ldrb	r0, [r1, #0]
    95a4:	adds	r0, #1
    95a6:	strb	r0, [r1, #0]
	for (AudioConnection *c = destination_list; c != NULL; c = c->next_dest) {
    95a8:	ldr	r3, [r3, #12]
    95aa:	b.n	9588 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x4>

000095ac <AudioStream::receiveReadOnly(unsigned int)>:
	if (index >= num_inputs) return NULL;
    95ac:	ldrb	r3, [r0, #9]
    95ae:	cmp	r3, r1
    95b0:	mov.w	r3, #0
	in = inputQueue[index];
    95b4:	ittet	hi
    95b6:	ldrhi	r2, [r0, #16]
    95b8:	ldrhi.w	r0, [r2, r1, lsl #2]
	if (index >= num_inputs) return NULL;
    95bc:	movls	r0, r3
	inputQueue[index] = NULL;
    95be:	strhi.w	r3, [r2, r1, lsl #2]
}
    95c2:	bx	lr

000095c4 <AudioStream::receiveWritable(unsigned int)>:
{
    95c4:	push	{r3, r4, r5, lr}
	if (index >= num_inputs) return NULL;
    95c6:	ldrb	r3, [r0, #9]
    95c8:	cmp	r3, r1
    95ca:	bhi.n	95d2 <AudioStream::receiveWritable(unsigned int)+0xe>
    95cc:	movs	r4, #0
}
    95ce:	mov	r0, r4
    95d0:	pop	{r3, r4, r5, pc}
	in = inputQueue[index];
    95d2:	ldr	r3, [r0, #16]
	inputQueue[index] = NULL;
    95d4:	movs	r2, #0
	in = inputQueue[index];
    95d6:	ldr.w	r4, [r3, r1, lsl #2]
	inputQueue[index] = NULL;
    95da:	str.w	r2, [r3, r1, lsl #2]
	if (in && in->ref_count > 1) {
    95de:	cmp	r4, #0
    95e0:	beq.n	95cc <AudioStream::receiveWritable(unsigned int)+0x8>
    95e2:	ldrb	r3, [r4, #0]
    95e4:	cmp	r3, #1
    95e6:	bls.n	95ce <AudioStream::receiveWritable(unsigned int)+0xa>
		p = allocate();
    95e8:	bl	94a4 <AudioStream::allocate()>
		if (p) memcpy(p->data, in->data, sizeof(p->data));
    95ec:	mov	r5, r0
    95ee:	cbz	r0, 95fc <AudioStream::receiveWritable(unsigned int)+0x38>
    95f0:	mov.w	r2, #256	; 0x100
    95f4:	adds	r1, r4, #4
    95f6:	adds	r0, #4
    95f8:	bl	756c <memcpy>
		in->ref_count--;
    95fc:	ldrb	r3, [r4, #0]
    95fe:	subs	r3, #1
    9600:	strb	r3, [r4, #0]
		p = allocate();
    9602:	mov	r4, r5
    9604:	b.n	95ce <AudioStream::receiveWritable(unsigned int)+0xa>
	...

00009608 <AudioConnection::connect()>:
		if (isConnected) // already connected
    9608:	ldrb	r3, [r0, #16]
{
    960a:	push	{r4, lr}
		if (isConnected) // already connected
    960c:	cmp	r3, #0
    960e:	bne.n	96a4 <AudioConnection::connect()+0x9c>
		if (!src || !dst) // NULL src or dst - [old] Stream object destroyed
    9610:	ldr	r3, [r0, #0]
    9612:	cmp	r3, #0
    9614:	beq.n	96a8 <AudioConnection::connect()+0xa0>
    9616:	ldr	r3, [r0, #4]
    9618:	cmp	r3, #0
    961a:	beq.n	96a8 <AudioConnection::connect()+0xa0>
		if (dest_index >= dst->num_inputs) // input number too high
    961c:	ldrb	r2, [r0, #9]
    961e:	ldrb	r3, [r3, #9]
    9620:	cmp	r2, r3
    9622:	bcs.n	96ac <AudioConnection::connect()+0xa4>
		__disable_irq();
    9624:	cpsid	i
		s = AudioStream::first_update; // first AudioStream in the stream list
    9626:	ldr	r3, [pc, #140]	; (96b4 <AudioConnection::connect()+0xac>)
    9628:	ldr	r2, [r3, #0]
		while (s) // go through all AudioStream objects
    962a:	cbnz	r2, 9664 <AudioConnection::connect()+0x5c>
		pp = &AudioStream::unused;
    962c:	ldr	r3, [pc, #136]	; (96b8 <AudioConnection::connect()+0xb0>)
    962e:	ldr	r2, [r3, #0]
		while (*pp && *pp != this)
    9630:	cmp	r2, #0
    9632:	beq.n	96b0 <AudioConnection::connect()+0xa8>
    9634:	cmp	r2, r0
    9636:	bne.n	9686 <AudioConnection::connect()+0x7e>
		p = src->destination_list; // first AudioConnection
    9638:	ldr	r2, [r0, #0]
    963a:	ldr	r1, [r2, #12]
		if (p == NULL) 
    963c:	cbnz	r1, 9698 <AudioConnection::connect()+0x90>
			src->destination_list = this;
    963e:	str	r0, [r2, #12]
		*pp = next_dest;  // remove ourselves from the unused list
    9640:	ldr	r1, [r0, #12]
    9642:	str	r1, [r3, #0]
		next_dest = NULL; // we're last in the source's destination list
    9644:	movs	r3, #0
    9646:	str	r3, [r0, #12]
		src->numConnections++;
    9648:	ldrb	r1, [r2, #10]
    964a:	adds	r1, #1
    964c:	strb	r1, [r2, #10]
		src->active = true;
    964e:	movs	r1, #1
    9650:	strb	r1, [r2, #8]
		dst->numConnections++;
    9652:	ldr	r2, [r0, #4]
    9654:	ldrb	r4, [r2, #10]
		dst->active = true;
    9656:	strb	r1, [r2, #8]
		dst->numConnections++;
    9658:	add	r4, r1
    965a:	strb	r4, [r2, #10]
		isConnected = true;
    965c:	strb	r1, [r0, #16]
		result = 0;
    965e:	mov	r0, r3
	__enable_irq();
    9660:	cpsie	i
	return result;
    9662:	b.n	9680 <AudioConnection::connect()+0x78>
			p = s->destination_list;	// first patchCord in this stream's list
    9664:	ldr	r3, [r2, #12]
			while (p)
    9666:	cbnz	r3, 966c <AudioConnection::connect()+0x64>
			s = s->next_update;
    9668:	ldr	r2, [r2, #20]
    966a:	b.n	962a <AudioConnection::connect()+0x22>
				if (p->dst == dst && p->dest_index == dest_index) // same destination - it's in use!
    966c:	ldr	r4, [r3, #4]
    966e:	ldr	r1, [r0, #4]
    9670:	cmp	r4, r1
    9672:	bne.n	9682 <AudioConnection::connect()+0x7a>
    9674:	ldrb	r4, [r3, #9]
    9676:	ldrb	r1, [r0, #9]
    9678:	cmp	r4, r1
    967a:	bne.n	9682 <AudioConnection::connect()+0x7a>
					__enable_irq();
    967c:	cpsie	i
					return 4;
    967e:	movs	r0, #4
}
    9680:	pop	{r4, pc}
				p = p->next_dest;
    9682:	ldr	r3, [r3, #12]
    9684:	b.n	9666 <AudioConnection::connect()+0x5e>
			pp = &((*pp)->next_dest);
    9686:	add.w	r3, r2, #12
    968a:	ldr	r2, [r2, #12]
    968c:	b.n	9630 <AudioConnection::connect()+0x28>
				if (&p->src == &this->src && &p->dst == &this->dst
    968e:	cmp	r4, r0
    9690:	bne.n	9698 <AudioConnection::connect()+0x90>
					__enable_irq();
    9692:	cpsie	i
					return 6;
    9694:	movs	r0, #6
    9696:	b.n	9680 <AudioConnection::connect()+0x78>
			while (p->next_dest)  // scan source Stream's connection list for duplicates
    9698:	mov	r4, r1
    969a:	ldr	r1, [r1, #12]
    969c:	cmp	r1, #0
    969e:	bne.n	968e <AudioConnection::connect()+0x86>
			p->next_dest = this; // end of list, can link ourselves in
    96a0:	str	r0, [r4, #12]
    96a2:	b.n	9640 <AudioConnection::connect()+0x38>
	int result = 1;
    96a4:	movs	r0, #1
    96a6:	b.n	9660 <AudioConnection::connect()+0x58>
			result = 3;
    96a8:	movs	r0, #3
    96aa:	b.n	9660 <AudioConnection::connect()+0x58>
			result = 2;
    96ac:	movs	r0, #2
    96ae:	b.n	9660 <AudioConnection::connect()+0x58>
			result = 5;
    96b0:	movs	r0, #5
    96b2:	b.n	9660 <AudioConnection::connect()+0x58>
    96b4:	.word	0x200068b8
    96b8:	.word	0x2000692c

000096bc <AudioConnection::AudioConnection(AudioStream&, unsigned char, AudioStream&, unsigned char)>:
AudioConnection::AudioConnection(AudioStream &source, unsigned char sourceOutput,
    96bc:	push	{r4, r5, r6, lr}
	next_dest = AudioStream::unused;
    96be:	ldr	r5, [pc, #32]	; (96e0 <AudioConnection::AudioConnection(AudioStream&, unsigned char, AudioStream&, unsigned char)+0x24>)
AudioConnection::AudioConnection(AudioStream &source, unsigned char sourceOutput,
    96c0:	mov	r4, r0
		src_index = sourceOutput;
    96c2:	strb	r2, [r0, #8]
	next_dest = AudioStream::unused;
    96c4:	ldr	r6, [r5, #0]
	AudioStream::unused = this;
    96c6:	str	r0, [r5, #0]
	isConnected = false;	  
    96c8:	movs	r5, #0
	next_dest = AudioStream::unused;
    96ca:	str	r6, [r0, #12]
	isConnected = false;	  
    96cc:	strb	r5, [r0, #16]
		dst = &destination;
    96ce:	strd	r1, r3, [r0]
		dest_index = destinationInput;
    96d2:	ldrb.w	r3, [sp, #16]
    96d6:	strb	r3, [r0, #9]
		result = connect();
    96d8:	bl	9608 <AudioConnection::connect()>
}
    96dc:	mov	r0, r4
    96de:	pop	{r4, r5, r6, pc}
    96e0:	.word	0x2000692c

000096e4 <AudioConnection::disconnect()>:
	if (!isConnected) return 1;
    96e4:	ldrb	r3, [r0, #16]
{
    96e6:	push	{r4, lr}
    96e8:	mov	r4, r0
	if (!isConnected) return 1;
    96ea:	cmp	r3, #0
    96ec:	beq.n	976a <AudioConnection::disconnect()+0x86>
	if (dest_index >= dst->num_inputs) return 2; // should never happen!
    96ee:	ldr	r3, [r0, #4]
    96f0:	ldrb	r2, [r0, #9]
    96f2:	ldrb	r3, [r3, #9]
    96f4:	cmp	r2, r3
    96f6:	bcs.n	976e <AudioConnection::disconnect()+0x8a>
	__disable_irq();
    96f8:	cpsid	i
	p = src->destination_list;
    96fa:	ldr	r2, [r0, #0]
    96fc:	ldr	r3, [r2, #12]
	if (p == NULL) {
    96fe:	cbnz	r3, 9706 <AudioConnection::disconnect()+0x22>
		__enable_irq();
    9700:	cpsie	i
		return 3;
    9702:	movs	r0, #3
}
    9704:	pop	{r4, pc}
	} else if (p == this) {
    9706:	cmp	r0, r3
		if (p->next_dest) {
    9708:	ldr	r1, [r3, #12]
	} else if (p == this) {
    970a:	bne.n	975c <AudioConnection::disconnect()+0x78>
			src->destination_list = NULL;
    970c:	str	r1, [r2, #12]
	if(dst->inputQueue[dest_index] != NULL) {
    970e:	ldr	r3, [r4, #4]
    9710:	ldrb	r2, [r4, #9]
    9712:	ldr	r3, [r3, #16]
    9714:	ldr.w	r0, [r3, r2, lsl #2]
    9718:	cbz	r0, 972c <AudioConnection::disconnect()+0x48>
		AudioStream::release(dst->inputQueue[dest_index]);
    971a:	bl	9534 <AudioStream::release(audio_block_struct*)>
		__disable_irq();
    971e:	cpsid	i
		dst->inputQueue[dest_index] = NULL;
    9720:	ldr	r3, [r4, #4]
    9722:	movs	r1, #0
    9724:	ldrb	r2, [r4, #9]
    9726:	ldr	r3, [r3, #16]
    9728:	str.w	r1, [r3, r2, lsl #2]
	src->numConnections--;
    972c:	ldr	r2, [r4, #0]
    972e:	ldrb	r3, [r2, #10]
    9730:	subs	r3, #1
    9732:	uxtb	r3, r3
    9734:	strb	r3, [r2, #10]
	if (src->numConnections == 0) {
    9736:	cbnz	r3, 973a <AudioConnection::disconnect()+0x56>
		src->active = false;
    9738:	strb	r3, [r2, #8]
	dst->numConnections--;
    973a:	ldr	r2, [r4, #4]
    973c:	ldrb	r3, [r2, #10]
    973e:	subs	r3, #1
    9740:	uxtb	r3, r3
    9742:	strb	r3, [r2, #10]
	if (dst->numConnections == 0) {
    9744:	cbnz	r3, 9748 <AudioConnection::disconnect()+0x64>
		dst->active = false;
    9746:	strb	r3, [r2, #8]
	next_dest = dst->unused;
    9748:	ldr	r3, [pc, #40]	; (9774 <AudioConnection::disconnect()+0x90>)
	isConnected = false;
    974a:	movs	r0, #0
	next_dest = dst->unused;
    974c:	ldr	r2, [r3, #0]
	isConnected = false;
    974e:	strb	r0, [r4, #16]
	next_dest = dst->unused;
    9750:	str	r2, [r4, #12]
	dst->unused = this;
    9752:	str	r4, [r3, #0]
	__enable_irq();
    9754:	cpsie	i
	return 0;
    9756:	b.n	9704 <AudioConnection::disconnect()+0x20>
		while (p)
    9758:	cmp	r3, #0
    975a:	beq.n	970e <AudioConnection::disconnect()+0x2a>
			if (p->next_dest == this) // found the parent of the disconnecting object
    975c:	mov	r2, r3
    975e:	ldr	r3, [r3, #12]
    9760:	cmp	r4, r3
    9762:	bne.n	9758 <AudioConnection::disconnect()+0x74>
				p-> next_dest = this->next_dest; // skip parent's link past us
    9764:	ldr	r3, [r4, #12]
    9766:	str	r3, [r2, #12]
				break;
    9768:	b.n	970e <AudioConnection::disconnect()+0x2a>
	if (!isConnected) return 1;
    976a:	movs	r0, #1
    976c:	b.n	9704 <AudioConnection::disconnect()+0x20>
	if (dest_index >= dst->num_inputs) return 2; // should never happen!
    976e:	movs	r0, #2
    9770:	b.n	9704 <AudioConnection::disconnect()+0x20>
    9772:	nop
    9774:	.word	0x2000692c

00009778 <AudioConnection::~AudioConnection()>:
AudioConnection::~AudioConnection()
    9778:	push	{r4, lr}
    977a:	mov	r4, r0
	disconnect(); // disconnect ourselves: puts us on the unused list
    977c:	bl	96e4 <AudioConnection::disconnect()>
	pp = &AudioStream::unused;
    9780:	ldr	r3, [pc, #24]	; (979c <AudioConnection::~AudioConnection()+0x24>)
    9782:	ldr	r2, [r3, #0]
	while (*pp && *pp != this)
    9784:	cbz	r2, 978e <AudioConnection::~AudioConnection()+0x16>
    9786:	cmp	r2, r4
    9788:	bne.n	9792 <AudioConnection::~AudioConnection()+0x1a>
		*pp = next_dest; // remove ourselves from the unused list
    978a:	ldr	r2, [r4, #12]
    978c:	str	r2, [r3, #0]
}
    978e:	mov	r0, r4
    9790:	pop	{r4, pc}
		pp = &((*pp)->next_dest);
    9792:	add.w	r3, r2, #12
    9796:	ldr	r2, [r2, #12]
    9798:	b.n	9784 <AudioConnection::~AudioConnection()+0xc>
    979a:	nop
    979c:	.word	0x2000692c

000097a0 <AudioStream::update_setup()>:
	if (update_scheduled) return false;
    97a0:	ldr	r3, [pc, #40]	; (97cc <AudioStream::update_setup()+0x2c>)
    97a2:	ldrb	r2, [r3, #0]
    97a4:	cbnz	r2, 97c6 <AudioStream::update_setup()+0x26>
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
    97a6:	ldr	r2, [pc, #40]	; (97d0 <AudioStream::update_setup()+0x30>)
    97a8:	ldr	r1, [pc, #40]	; (97d4 <AudioStream::update_setup()+0x34>)
    97aa:	str.w	r1, [r2, #344]	; 0x158
	NVIC_SET_PRIORITY(IRQ_SOFTWARE, 208); // 255 = lowest priority
    97ae:	ldr	r2, [pc, #40]	; (97d8 <AudioStream::update_setup()+0x38>)
    97b0:	movs	r1, #208	; 0xd0
	update_scheduled = true;
    97b2:	movs	r0, #1
	NVIC_SET_PRIORITY(IRQ_SOFTWARE, 208); // 255 = lowest priority
    97b4:	strb.w	r1, [r2, #70]	; 0x46
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
    97b8:	mov.w	r2, #3758153728	; 0xe000e000
    97bc:	movs	r1, #64	; 0x40
    97be:	str.w	r1, [r2, #264]	; 0x108
	update_scheduled = true;
    97c2:	strb	r0, [r3, #0]
	return true;
    97c4:	bx	lr
	if (update_scheduled) return false;
    97c6:	movs	r0, #0
}
    97c8:	bx	lr
    97ca:	nop
    97cc:	.word	0x200071f9
    97d0:	.word	0x20002400
    97d4:	.word	0x00009441
    97d8:	.word	0xe000e400

000097dc <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)>:
	update_responsibility = false;
}

static void copy_to_buffers(const uint32_t *src, int16_t *left, int16_t *right, unsigned int len)
{
	uint32_t *target = (uint32_t*) src + len; 
    97dc:	add.w	r3, r0, r3, lsl #2
{
    97e0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	while ((src < target) && (((uintptr_t) left & 0x02) != 0)) {
    97e4:	cmp	r0, r3
    97e6:	bcs.n	97ec <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)+0x10>
    97e8:	lsls	r4, r1, #30
    97ea:	bmi.n	97fc <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)+0x20>
    97ec:	mov	ip, r2
    97ee:	mov	r6, r1
    97f0:	mov	r5, r0
		uint32_t n = *src++;
		*left++ = n & 0xFFFF;
		*right++ = n >> 16;
	}

	while ((src < target - 2)) {
    97f2:	sub.w	r7, r3, #8
		uint32_t n1 = *src++;
		uint32_t n = *src++;
		*(uint32_t *)left = (n1 & 0xFFFF) | ((n & 0xFFFF) << 16);
		left+=2;
		*(uint32_t *)right = (n1 >> 16) | ((n & 0xFFFF0000)) ;
    97f6:	ldr.w	r8, [pc, #116]	; 986c <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)+0x90>
    97fa:	b.n	982c <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)+0x50>
		uint32_t n = *src++;
    97fc:	ldr.w	r4, [r0], #4
		*left++ = n & 0xFFFF;
    9800:	strh.w	r4, [r1], #2
		*right++ = n >> 16;
    9804:	lsrs	r4, r4, #16
    9806:	strh.w	r4, [r2], #2
    980a:	b.n	97e4 <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)+0x8>
		uint32_t n1 = *src++;
    980c:	ldr.w	r9, [r5], #8
		uint32_t n = *src++;
    9810:	ldr.w	r4, [r5, #-4]
		*(uint32_t *)left = (n1 & 0xFFFF) | ((n & 0xFFFF) << 16);
    9814:	uxth.w	lr, r9
    9818:	orr.w	lr, lr, r4, lsl #16
		*(uint32_t *)right = (n1 >> 16) | ((n & 0xFFFF0000)) ;
    981c:	and.w	r4, r4, r8
    9820:	orr.w	r4, r4, r9, lsr #16
		*(uint32_t *)left = (n1 & 0xFFFF) | ((n & 0xFFFF) << 16);
    9824:	str.w	lr, [r6], #4
		*(uint32_t *)right = (n1 >> 16) | ((n & 0xFFFF0000)) ;
    9828:	str.w	r4, [ip], #4
	while ((src < target - 2)) {
    982c:	cmp	r7, r5
    982e:	bhi.n	980c <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)+0x30>
    9830:	subs	r6, r0, #7
    9832:	subs	r4, r3, #1
    9834:	cmp	r7, r6
    9836:	sub.w	r4, r4, r0
    983a:	mov.w	r5, r4, lsr #3
    983e:	bic.w	r4, r4, #7
    9842:	it	cc
    9844:	movcc	r4, #0
    9846:	add	r0, r4
    9848:	mov.w	r4, r5, lsl #2
    984c:	it	cc
    984e:	movcc	r4, #0
    9850:	add	r1, r4
    9852:	add	r2, r4
		right+=2;
	}

	while ((src < target)) {
    9854:	cmp	r0, r3
    9856:	bcc.n	985c <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)+0x80>
		uint32_t n = *src++;
		*left++ = n & 0xFFFF;
		*right++ = n >> 16;
	}
}
    9858:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		uint32_t n = *src++;
    985c:	ldr.w	r4, [r0], #4
		*left++ = n & 0xFFFF;
    9860:	strh.w	r4, [r1], #2
		*right++ = n >> 16;
    9864:	lsrs	r4, r4, #16
    9866:	strh.w	r4, [r2], #2
    986a:	b.n	9854 <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)+0x78>
    986c:	.word	0xffff0000

00009870 <sync_event(transfer_struct*)>:
{
    9870:	push	{r3, r4, r5, lr}
	usb_audio_sync_feedback = feedback_accumulator >> usb_audio_sync_rshift;
    9872:	ldr	r3, [pc, #68]	; (98b8 <sync_event(transfer_struct*)+0x48>)
    9874:	ldr	r4, [pc, #68]	; (98bc <sync_event(transfer_struct*)+0x4c>)
    9876:	ldrb	r2, [r3, #0]
    9878:	ldr	r3, [pc, #68]	; (98c0 <sync_event(transfer_struct*)+0x50>)
	usb_prepare_transfer(&sync_transfer, &usb_audio_sync_feedback, usb_audio_sync_nbytes, 0);
    987a:	mov	r1, r4
    987c:	ldr	r5, [pc, #68]	; (98c4 <sync_event(transfer_struct*)+0x54>)
	usb_audio_sync_feedback = feedback_accumulator >> usb_audio_sync_rshift;
    987e:	ldr	r3, [r3, #0]
	usb_prepare_transfer(&sync_transfer, &usb_audio_sync_feedback, usb_audio_sync_nbytes, 0);
    9880:	ldr	r0, [pc, #68]	; (98c8 <sync_event(transfer_struct*)+0x58>)
	usb_audio_sync_feedback = feedback_accumulator >> usb_audio_sync_rshift;
    9882:	lsrs	r3, r2
	usb_prepare_transfer(&sync_transfer, &usb_audio_sync_feedback, usb_audio_sync_nbytes, 0);
    9884:	ldrb	r2, [r5, #0]
	usb_audio_sync_feedback = feedback_accumulator >> usb_audio_sync_rshift;
    9886:	str	r3, [r4, #0]
	usb_prepare_transfer(&sync_transfer, &usb_audio_sync_feedback, usb_audio_sync_nbytes, 0);
    9888:	movs	r3, #0
    988a:	bl	885c <usb_prepare_transfer>
	arm_dcache_flush(&usb_audio_sync_feedback, usb_audio_sync_nbytes);
    988e:	ldrb	r3, [r5, #0]
	uint32_t end_addr = (uint32_t)addr + size;
    9890:	add	r3, r4
	asm("dsb");
    9892:	dsb	sy
		SCB_CACHE_DCCMVAC = location;
    9896:	mov.w	r2, #3758153728	; 0xe000e000
    989a:	str.w	r4, [r2, #3944]	; 0xf68
		location += 32;
    989e:	adds	r4, #32
	} while (location < end_addr);
    98a0:	cmp	r3, r4
    98a2:	bhi.n	989a <sync_event(transfer_struct*)+0x2a>
	asm("dsb");
    98a4:	dsb	sy
	asm("isb");
    98a8:	isb	sy
	usb_transmit(AUDIO_SYNC_ENDPOINT, &sync_transfer);
    98ac:	ldr	r1, [pc, #24]	; (98c8 <sync_event(transfer_struct*)+0x58>)
    98ae:	movs	r0, #6
}
    98b0:	ldmia.w	sp!, {r3, r4, r5, lr}
	usb_transmit(AUDIO_SYNC_ENDPOINT, &sync_transfer);
    98b4:	b.w	8888 <usb_transmit>
    98b8:	.word	0x20007c30
    98bc:	.word	0x20205260
    98c0:	.word	0x20006cf0
    98c4:	.word	0x20007c2f
    98c8:	.word	0x20003900

000098cc <AudioOutputUSB::update()>:
		len--;
	}
}

void AudioOutputUSB::update(void)
{
    98cc:	push	{r4, r5, r6, lr}
    98ce:	mov	r4, r0
	audio_block_t *left, *right;

	// TODO: we shouldn't be writing to these......
	//left = receiveReadOnly(0); // input 0 = left channel
	//right = receiveReadOnly(1); // input 1 = right channel
	left = receiveWritable(0); // input 0 = left channel
    98d0:	movs	r1, #0
    98d2:	bl	95c4 <AudioStream::receiveWritable(unsigned int)>
	right = receiveWritable(1); // input 1 = right channel
    98d6:	movs	r1, #1
	left = receiveWritable(0); // input 0 = left channel
    98d8:	mov	r5, r0
	right = receiveWritable(1); // input 1 = right channel
    98da:	mov	r0, r4
    98dc:	bl	95c4 <AudioStream::receiveWritable(unsigned int)>
	if (usb_audio_transmit_setting == 0) {
    98e0:	ldr	r3, [pc, #216]	; (99bc <AudioOutputUSB::update()+0xf0>)
	right = receiveWritable(1); // input 1 = right channel
    98e2:	mov	r4, r0
	if (usb_audio_transmit_setting == 0) {
    98e4:	ldrb	r3, [r3, #0]
    98e6:	cbnz	r3, 9938 <AudioOutputUSB::update()+0x6c>
		if (left) release(left);
    98e8:	cbz	r5, 98f0 <AudioOutputUSB::update()+0x24>
    98ea:	mov	r0, r5
    98ec:	bl	9534 <AudioStream::release(audio_block_struct*)>
		if (right) release(right);
    98f0:	cbz	r4, 98f8 <AudioOutputUSB::update()+0x2c>
    98f2:	mov	r0, r4
    98f4:	bl	9534 <AudioStream::release(audio_block_struct*)>
		if (left_1st) { release(left_1st); left_1st = NULL; }
    98f8:	ldr	r4, [pc, #196]	; (99c0 <AudioOutputUSB::update()+0xf4>)
    98fa:	ldr	r0, [r4, #0]
    98fc:	cbz	r0, 9906 <AudioOutputUSB::update()+0x3a>
    98fe:	bl	9534 <AudioStream::release(audio_block_struct*)>
    9902:	movs	r3, #0
    9904:	str	r3, [r4, #0]
		if (left_2nd) { release(left_2nd); left_2nd = NULL; }
    9906:	ldr	r4, [pc, #188]	; (99c4 <AudioOutputUSB::update()+0xf8>)
    9908:	ldr	r0, [r4, #0]
    990a:	cbz	r0, 9914 <AudioOutputUSB::update()+0x48>
    990c:	bl	9534 <AudioStream::release(audio_block_struct*)>
    9910:	movs	r3, #0
    9912:	str	r3, [r4, #0]
		if (right_1st) { release(right_1st); right_1st = NULL; }
    9914:	ldr	r4, [pc, #176]	; (99c8 <AudioOutputUSB::update()+0xfc>)
    9916:	ldr	r0, [r4, #0]
    9918:	cbz	r0, 9922 <AudioOutputUSB::update()+0x56>
    991a:	bl	9534 <AudioStream::release(audio_block_struct*)>
    991e:	movs	r3, #0
    9920:	str	r3, [r4, #0]
		if (right_2nd) { release(right_2nd); right_2nd = NULL; }
    9922:	ldr	r4, [pc, #168]	; (99cc <AudioOutputUSB::update()+0x100>)
    9924:	ldr	r0, [r4, #0]
    9926:	cbz	r0, 9930 <AudioOutputUSB::update()+0x64>
    9928:	bl	9534 <AudioStream::release(audio_block_struct*)>
    992c:	movs	r3, #0
    992e:	str	r3, [r4, #0]
		offset_1st = 0;
    9930:	ldr	r3, [pc, #156]	; (99d0 <AudioOutputUSB::update()+0x104>)
    9932:	movs	r2, #0
    9934:	strh	r2, [r3, #0]
		//serial_print("*");
		release(discard1);
		release(discard2);
	}
	__enable_irq();
}
    9936:	pop	{r4, r5, r6, pc}
	if (left == NULL) {
    9938:	cbnz	r5, 995c <AudioOutputUSB::update()+0x90>
		left = allocate();
    993a:	bl	94a4 <AudioStream::allocate()>
		if (left == NULL) {
    993e:	mov	r5, r0
    9940:	cbnz	r0, 9950 <AudioOutputUSB::update()+0x84>
			if (right) release(right);
    9942:	cmp	r4, #0
    9944:	beq.n	9936 <AudioOutputUSB::update()+0x6a>
    9946:	mov	r0, r4
}
    9948:	ldmia.w	sp!, {r4, r5, r6, lr}
			release(left);
    994c:	b.w	9534 <AudioStream::release(audio_block_struct*)>
		memset(left->data, 0, sizeof(left->data));
    9950:	mov.w	r2, #256	; 0x100
    9954:	movs	r1, #0
    9956:	adds	r0, #4
    9958:	bl	7528 <memset>
	if (right == NULL) {
    995c:	cbnz	r4, 9976 <AudioOutputUSB::update()+0xaa>
		right = allocate();
    995e:	bl	94a4 <AudioStream::allocate()>
		if (right == NULL) {
    9962:	mov	r4, r0
    9964:	cbnz	r0, 996a <AudioOutputUSB::update()+0x9e>
			release(left);
    9966:	mov	r0, r5
    9968:	b.n	9948 <AudioOutputUSB::update()+0x7c>
		memset(right->data, 0, sizeof(right->data));
    996a:	mov.w	r2, #256	; 0x100
    996e:	movs	r1, #0
    9970:	adds	r0, #4
    9972:	bl	7528 <memset>
	__disable_irq();
    9976:	cpsid	i
	if (left_1st == NULL) {
    9978:	ldr	r1, [pc, #68]	; (99c0 <AudioOutputUSB::update()+0xf4>)
    997a:	ldr	r0, [r1, #0]
    997c:	cbnz	r0, 998c <AudioOutputUSB::update()+0xc0>
		right_1st = right;
    997e:	ldr	r3, [pc, #72]	; (99c8 <AudioOutputUSB::update()+0xfc>)
		left_1st = left;
    9980:	str	r5, [r1, #0]
		right_1st = right;
    9982:	str	r4, [r3, #0]
		offset_1st = 0;
    9984:	ldr	r3, [pc, #72]	; (99d0 <AudioOutputUSB::update()+0x104>)
    9986:	strh	r0, [r3, #0]
	__enable_irq();
    9988:	cpsie	i
    998a:	b.n	9936 <AudioOutputUSB::update()+0x6a>
	} else if (left_2nd == NULL) {
    998c:	ldr	r2, [pc, #52]	; (99c4 <AudioOutputUSB::update()+0xf8>)
    998e:	ldr	r3, [pc, #60]	; (99cc <AudioOutputUSB::update()+0x100>)
    9990:	ldr	r6, [r2, #0]
    9992:	cbnz	r6, 999a <AudioOutputUSB::update()+0xce>
		left_2nd = left;
    9994:	str	r5, [r2, #0]
		right_2nd = right;
    9996:	str	r4, [r3, #0]
    9998:	b.n	9988 <AudioOutputUSB::update()+0xbc>
		left_2nd = left;
    999a:	str	r5, [r2, #0]
		left_1st = left_2nd;
    999c:	str	r6, [r1, #0]
		audio_block_t *discard2 = right_1st;
    999e:	ldr	r2, [pc, #40]	; (99c8 <AudioOutputUSB::update()+0xfc>)
		right_1st = right_2nd;
    99a0:	ldr	r1, [r3, #0]
		audio_block_t *discard2 = right_1st;
    99a2:	ldr	r5, [r2, #0]
		right_2nd = right;
    99a4:	str	r4, [r3, #0]
		right_1st = right_2nd;
    99a6:	str	r1, [r2, #0]
		offset_1st = 0; // TODO: discard part of this data?
    99a8:	movs	r2, #0
    99aa:	ldr	r3, [pc, #36]	; (99d0 <AudioOutputUSB::update()+0x104>)
    99ac:	strh	r2, [r3, #0]
		release(discard1);
    99ae:	bl	9534 <AudioStream::release(audio_block_struct*)>
		release(discard2);
    99b2:	mov	r0, r5
    99b4:	bl	9534 <AudioStream::release(audio_block_struct*)>
    99b8:	b.n	9988 <AudioOutputUSB::update()+0xbc>
    99ba:	nop
    99bc:	.word	0x20007c31
    99c0:	.word	0x20006944
    99c4:	.word	0x20006948
    99c8:	.word	0x2000694c
    99cc:	.word	0x20006950
    99d0:	.word	0x20007138

000099d4 <usb_audio_receive_callback>:
{
    99d4:	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	AudioInputUSB::receive_flag = 1;
    99d8:	ldr	r3, [pc, #260]	; (9ae0 <usb_audio_receive_callback+0x10c>)
    99da:	movs	r2, #1
	count = AudioInputUSB::incoming_count;
    99dc:	ldr.w	r8, [pc, #272]	; 9af0 <usb_audio_receive_callback+0x11c>
	len >>= 2; // 1 sample = 4 bytes: 2 left, 2 right
    99e0:	lsrs	r7, r0, #2
	AudioInputUSB::receive_flag = 1;
    99e2:	strb	r2, [r3, #0]
	left = AudioInputUSB::incoming_left;
    99e4:	ldr	r3, [pc, #252]	; (9ae4 <usb_audio_receive_callback+0x110>)
	right = AudioInputUSB::incoming_right;
    99e6:	ldr.w	r9, [pc, #268]	; 9af4 <usb_audio_receive_callback+0x120>
	left = AudioInputUSB::incoming_left;
    99ea:	ldr	r4, [r3, #0]
	count = AudioInputUSB::incoming_count;
    99ec:	ldrh.w	r6, [r8]
	right = AudioInputUSB::incoming_right;
    99f0:	ldr.w	r5, [r9]
	if (left == NULL) {
    99f4:	cbnz	r4, 9a04 <usb_audio_receive_callback+0x30>
		left = AudioStream::allocate();
    99f6:	bl	94a4 <AudioStream::allocate()>
		if (left == NULL) return;
    99fa:	mov	r4, r0
    99fc:	cmp	r0, #0
    99fe:	beq.n	9a84 <usb_audio_receive_callback+0xb0>
		AudioInputUSB::incoming_left = left;
    9a00:	ldr	r3, [pc, #224]	; (9ae4 <usb_audio_receive_callback+0x110>)
    9a02:	str	r0, [r3, #0]
	if (right == NULL) {
    9a04:	cbnz	r5, 9a14 <usb_audio_receive_callback+0x40>
		right = AudioStream::allocate();
    9a06:	bl	94a4 <AudioStream::allocate()>
		if (right == NULL) return;
    9a0a:	mov	r5, r0
    9a0c:	cmp	r0, #0
    9a0e:	beq.n	9a84 <usb_audio_receive_callback+0xb0>
		AudioInputUSB::incoming_right = right;
    9a10:	str.w	r0, [r9]
{
    9a14:	ldr.w	sl, [pc, #224]	; 9af8 <usb_audio_receive_callback+0x124>
			if (AudioInputUSB::ready_left || AudioInputUSB::ready_right) return;
    9a18:	ldr.w	fp, [pc, #224]	; 9afc <usb_audio_receive_callback+0x128>
	while (len > 0) {
    9a1c:	cbz	r7, 9a3c <usb_audio_receive_callback+0x68>
		avail = AUDIO_BLOCK_SAMPLES - count;
    9a1e:	rsb	r3, r6, #128	; 0x80
		if (len < avail) {
    9a22:	cmp	r7, r3
    9a24:	bcs.n	9a42 <usb_audio_receive_callback+0x6e>
			copy_to_buffers(data, left->data + count, right->data + count, len);
    9a26:	adds	r2, r5, #4
    9a28:	adds	r1, r4, #4
    9a2a:	mov	r3, r7
    9a2c:	mov	r0, sl
    9a2e:	add.w	r2, r2, r6, lsl #1
    9a32:	add.w	r1, r1, r6, lsl #1
			AudioInputUSB::incoming_count = count + len;
    9a36:	add	r6, r7
			copy_to_buffers(data, left->data + count, right->data + count, len);
    9a38:	bl	97dc <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)>
	AudioInputUSB::incoming_count = count;
    9a3c:	strh.w	r6, [r8]
    9a40:	b.n	9a84 <usb_audio_receive_callback+0xb0>
			if (AudioInputUSB::ready_left || AudioInputUSB::ready_right) {
    9a42:	ldr	r2, [pc, #164]	; (9ae8 <usb_audio_receive_callback+0x114>)
    9a44:	ldr	r2, [r2, #0]
    9a46:	str	r2, [sp, #0]
		} else if (avail > 0) {
    9a48:	cbz	r3, 9ab2 <usb_audio_receive_callback+0xde>
			copy_to_buffers(data, left->data + count, right->data + count, avail);
    9a4a:	adds	r2, r5, #4
    9a4c:	adds	r1, r4, #4
    9a4e:	mov	r0, sl
    9a50:	str	r3, [sp, #4]
    9a52:	add.w	r2, r2, r6, lsl #1
    9a56:	add.w	r1, r1, r6, lsl #1
    9a5a:	add	r6, r7
    9a5c:	bl	97dc <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)>
			data += avail;
    9a60:	ldr	r3, [sp, #4]
			len -= avail;
    9a62:	sub.w	r7, r6, #128	; 0x80
			data += avail;
    9a66:	add.w	sl, sl, r3, lsl #2
			if (AudioInputUSB::ready_left || AudioInputUSB::ready_right) {
    9a6a:	ldr	r3, [sp, #0]
    9a6c:	cbnz	r3, 9a74 <usb_audio_receive_callback+0xa0>
    9a6e:	ldr.w	r3, [fp]
    9a72:	cbz	r3, 9ac0 <usb_audio_receive_callback+0xec>
				AudioInputUSB::incoming_count = count + avail;
    9a74:	movs	r3, #128	; 0x80
    9a76:	strh.w	r3, [r8]
				if (len > 0) {
    9a7a:	cbz	r7, 9a84 <usb_audio_receive_callback+0xb0>
					usb_audio_overrun_count++;
    9a7c:	ldr	r2, [pc, #108]	; (9aec <usb_audio_receive_callback+0x118>)
    9a7e:	ldr	r3, [r2, #0]
    9a80:	adds	r3, #1
    9a82:	str	r3, [r2, #0]
}
    9a84:	add	sp, #12
    9a86:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			right = AudioStream::allocate();
    9a8a:	bl	94a4 <AudioStream::allocate()>
			if (right == NULL) {
    9a8e:	mov	r5, r0
    9a90:	cbnz	r0, 9aa6 <usb_audio_receive_callback+0xd2>
				AudioStream::release(left);
    9a92:	mov	r0, r4
    9a94:	bl	9534 <AudioStream::release(audio_block_struct*)>
				AudioInputUSB::incoming_left = NULL;
    9a98:	ldr	r3, [pc, #72]	; (9ae4 <usb_audio_receive_callback+0x110>)
				AudioInputUSB::incoming_right = NULL;
    9a9a:	str.w	r5, [r9]
				AudioInputUSB::incoming_left = NULL;
    9a9e:	str	r5, [r3, #0]
				AudioInputUSB::incoming_count = 0;
    9aa0:	strh.w	r5, [r8]
				return;
    9aa4:	b.n	9a84 <usb_audio_receive_callback+0xb0>
			AudioInputUSB::incoming_left = left;
    9aa6:	ldr	r3, [pc, #60]	; (9ae4 <usb_audio_receive_callback+0x110>)
			count = 0;
    9aa8:	movs	r6, #0
			AudioInputUSB::incoming_right = right;
    9aaa:	str.w	r0, [r9]
			AudioInputUSB::incoming_left = left;
    9aae:	str	r4, [r3, #0]
			count = 0;
    9ab0:	b.n	9a1c <usb_audio_receive_callback+0x48>
			if (AudioInputUSB::ready_left || AudioInputUSB::ready_right) return;
    9ab2:	ldr	r3, [sp, #0]
    9ab4:	cmp	r3, #0
    9ab6:	bne.n	9a84 <usb_audio_receive_callback+0xb0>
    9ab8:	ldr.w	r3, [fp]
    9abc:	cmp	r3, #0
    9abe:	bne.n	9a84 <usb_audio_receive_callback+0xb0>
			AudioInputUSB::ready_left = left;
    9ac0:	ldr	r3, [pc, #36]	; (9ae8 <usb_audio_receive_callback+0x114>)
			AudioInputUSB::ready_right = right;
    9ac2:	str.w	r5, [fp]
			AudioInputUSB::ready_left = left;
    9ac6:	str	r4, [r3, #0]
			left = AudioStream::allocate();
    9ac8:	bl	94a4 <AudioStream::allocate()>
			if (left == NULL) {
    9acc:	mov	r4, r0
    9ace:	cmp	r0, #0
    9ad0:	bne.n	9a8a <usb_audio_receive_callback+0xb6>
				AudioInputUSB::incoming_left = NULL;
    9ad2:	ldr	r3, [pc, #16]	; (9ae4 <usb_audio_receive_callback+0x110>)
				AudioInputUSB::incoming_right = NULL;
    9ad4:	str.w	r0, [r9]
				AudioInputUSB::incoming_left = NULL;
    9ad8:	str	r0, [r3, #0]
				AudioInputUSB::incoming_count = 0;
    9ada:	strh.w	r0, [r8]
				return;
    9ade:	b.n	9a84 <usb_audio_receive_callback+0xb0>
    9ae0:	.word	0x200071fa
    9ae4:	.word	0x2000693c
    9ae8:	.word	0x20006934
    9aec:	.word	0x20007110
    9af0:	.word	0x20007136
    9af4:	.word	0x20006940
    9af8:	.word	0x20205280
    9afc:	.word	0x20006938

00009b00 <rx_event(transfer_struct*)>:
{
    9b00:	push	{r3, lr}
	if (t) {
    9b02:	cbz	r0, 9b14 <rx_event(transfer_struct*)+0x14>
		int len = AUDIO_RX_SIZE - ((rx_transfer.status >> 16) & 0x7FFF);
    9b04:	ldr	r3, [pc, #68]	; (9b4c <rx_event(transfer_struct*)+0x4c>)
    9b06:	ldr	r0, [r3, #4]
    9b08:	ubfx	r0, r0, #16, #15
		usb_audio_receive_callback(len);
    9b0c:	rsb	r0, r0, #180	; 0xb4
    9b10:	bl	99d4 <usb_audio_receive_callback>
	usb_prepare_transfer(&rx_transfer, rx_buffer, AUDIO_RX_SIZE, 0);
    9b14:	movs	r3, #0
    9b16:	movs	r2, #180	; 0xb4
    9b18:	ldr	r1, [pc, #52]	; (9b50 <rx_event(transfer_struct*)+0x50>)
    9b1a:	ldr	r0, [pc, #48]	; (9b4c <rx_event(transfer_struct*)+0x4c>)
    9b1c:	bl	885c <usb_prepare_transfer>
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    9b20:	ldr	r3, [pc, #44]	; (9b50 <rx_event(transfer_struct*)+0x50>)
	uint32_t end_addr = (uint32_t)addr + size;
    9b22:	add.w	r2, r3, #180	; 0xb4
	asm("dsb");
    9b26:	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    9b2a:	mov.w	r1, #3758153728	; 0xe000e000
    9b2e:	str.w	r3, [r1, #3932]	; 0xf5c
		location += 32;
    9b32:	adds	r3, #32
	} while (location < end_addr);
    9b34:	cmp	r2, r3
    9b36:	bhi.n	9b2e <rx_event(transfer_struct*)+0x2e>
	asm("dsb");
    9b38:	dsb	sy
	asm("isb");
    9b3c:	isb	sy
	usb_receive(AUDIO_RX_ENDPOINT, &rx_transfer);
    9b40:	ldr	r1, [pc, #8]	; (9b4c <rx_event(transfer_struct*)+0x4c>)
    9b42:	movs	r0, #5
}
    9b44:	ldmia.w	sp!, {r3, lr}
	usb_receive(AUDIO_RX_ENDPOINT, &rx_transfer);
    9b48:	b.w	88ac <usb_receive>
    9b4c:	.word	0x200038e0
    9b50:	.word	0x20205280

00009b54 <AudioOutputUSB::begin()>:
	update_responsibility = false;
    9b54:	movs	r3, #0
    9b56:	ldr	r2, [pc, #12]	; (9b64 <AudioOutputUSB::begin()+0x10>)
    9b58:	strb	r3, [r2, #0]
	left_1st = NULL;
    9b5a:	ldr	r2, [pc, #12]	; (9b68 <AudioOutputUSB::begin()+0x14>)
    9b5c:	str	r3, [r2, #0]
	right_1st = NULL;
    9b5e:	ldr	r2, [pc, #12]	; (9b6c <AudioOutputUSB::begin()+0x18>)
    9b60:	str	r3, [r2, #0]
}
    9b62:	bx	lr
    9b64:	.word	0x200071fb
    9b68:	.word	0x20006944
    9b6c:	.word	0x2000694c

00009b70 <usb_audio_transmit_callback>:
{
	static uint32_t count=5;
	uint32_t avail, num, target, offset, len=0;
	audio_block_t *left, *right;

	if (++count < 10) {   // TODO: dynamic adjust to match USB rate
    9b70:	ldr	r2, [pc, #196]	; (9c38 <usb_audio_transmit_callback+0xc8>)
    9b72:	ldr	r3, [r2, #0]
    9b74:	adds	r3, #1
    9b76:	cmp	r3, #9
{
    9b78:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9b7c:	sub	sp, #20
	if (++count < 10) {   // TODO: dynamic adjust to match USB rate
    9b7e:	bls.n	9c30 <usb_audio_transmit_callback+0xc0>
		target = 44;
	} else {
		count = 0;
    9b80:	movs	r3, #0
		target = 45;
    9b82:	movs	r5, #45	; 0x2d
		count = 0;
    9b84:	str	r3, [r2, #0]
{
    9b86:	movs	r4, #0
	}
	while (len < target) {
		num = target - len;
		left = AudioOutputUSB::left_1st;
    9b88:	ldr	r7, [pc, #176]	; (9c3c <usb_audio_transmit_callback+0xcc>)
    9b8a:	ldr.w	r8, [pc, #188]	; 9c48 <usb_audio_transmit_callback+0xd8>
    9b8e:	ldr	r1, [r7, #0]
		num = target - len;
    9b90:	subs	r3, r5, r4
		if (left == NULL) {
    9b92:	cbnz	r1, 9ba6 <usb_audio_transmit_callback+0x36>
			// buffer underrun - PC is consuming too quickly
			memset(usb_audio_transmit_buffer + len, 0, num * 4);
    9b94:	lsls	r2, r3, #2
    9b96:	add.w	r0, r8, r4, lsl #1
    9b9a:	bl	7528 <memset>
		} else {
			AudioOutputUSB::offset_1st = offset;
		}
	}
	return target * 4;
}
    9b9e:	lsls	r0, r5, #2
    9ba0:	add	sp, #20
    9ba2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		offset = AudioOutputUSB::offset_1st;
    9ba6:	ldr.w	fp, [pc, #164]	; 9c4c <usb_audio_transmit_callback+0xdc>
			left->data + offset, right->data + offset, num);
    9baa:	adds	r6, r1, #4
		right = AudioOutputUSB::right_1st;
    9bac:	ldr.w	r9, [pc, #160]	; 9c50 <usb_audio_transmit_callback+0xe0>
		copy_from_buffers((uint32_t *)usb_audio_transmit_buffer + len,
    9bb0:	add.w	lr, r8, r4, lsl #2
		offset = AudioOutputUSB::offset_1st;
    9bb4:	ldrh.w	r0, [fp]
		right = AudioOutputUSB::right_1st;
    9bb8:	ldr.w	sl, [r9]
		avail = AUDIO_BLOCK_SAMPLES - offset;
    9bbc:	rsb	r2, r0, #128	; 0x80
    9bc0:	cmp	r2, r3
    9bc2:	it	cs
    9bc4:	movcs	r2, r3
		copy_from_buffers((uint32_t *)usb_audio_transmit_buffer + len,
    9bc6:	add.w	r3, r6, r0, lsl #1
    9bca:	str	r3, [sp, #4]
			left->data + offset, right->data + offset, num);
    9bcc:	add.w	r3, sl, #4
		copy_from_buffers((uint32_t *)usb_audio_transmit_buffer + len,
    9bd0:	add.w	r3, r3, r0, lsl #1
	while (len > 0) {
    9bd4:	add.w	r6, r3, r2, lsl #1
    9bd8:	str	r6, [sp, #8]
    9bda:	ldr	r6, [sp, #8]
    9bdc:	cmp	r6, r3
    9bde:	bne.n	9c12 <usb_audio_transmit_callback+0xa2>
		len += num;
    9be0:	add	r4, r2
		offset += num;
    9be2:	add	r2, r0
		if (offset >= AUDIO_BLOCK_SAMPLES) {
    9be4:	cmp	r2, #127	; 0x7f
    9be6:	bls.n	9c2c <usb_audio_transmit_callback+0xbc>
			AudioStream::release(left);
    9be8:	mov	r0, r1
    9bea:	bl	9534 <AudioStream::release(audio_block_struct*)>
			AudioStream::release(right);
    9bee:	mov	r0, sl
    9bf0:	bl	9534 <AudioStream::release(audio_block_struct*)>
			AudioOutputUSB::left_1st = AudioOutputUSB::left_2nd;
    9bf4:	ldr	r3, [pc, #72]	; (9c40 <usb_audio_transmit_callback+0xd0>)
			AudioOutputUSB::right_1st = AudioOutputUSB::right_2nd;
    9bf6:	ldr	r1, [pc, #76]	; (9c44 <usb_audio_transmit_callback+0xd4>)
			AudioOutputUSB::left_1st = AudioOutputUSB::left_2nd;
    9bf8:	ldr	r2, [r3, #0]
    9bfa:	str	r2, [r7, #0]
			AudioOutputUSB::left_2nd = NULL;
    9bfc:	movs	r2, #0
    9bfe:	str	r2, [r3, #0]
			AudioOutputUSB::right_1st = AudioOutputUSB::right_2nd;
    9c00:	ldr	r3, [r1, #0]
			AudioOutputUSB::right_2nd = NULL;
    9c02:	str	r2, [r1, #0]
			AudioOutputUSB::right_1st = AudioOutputUSB::right_2nd;
    9c04:	str.w	r3, [r9]
	while (len < target) {
    9c08:	cmp	r4, r5
			AudioOutputUSB::offset_1st = offset;
    9c0a:	strh.w	r2, [fp]
	while (len < target) {
    9c0e:	bcc.n	9b8e <usb_audio_transmit_callback+0x1e>
    9c10:	b.n	9b9e <usb_audio_transmit_callback+0x2e>
		*dst++ = (*right++ << 16) | (*left++ & 0xFFFF);
    9c12:	ldrsh.w	r6, [r3], #2
    9c16:	str	r6, [sp, #12]
    9c18:	ldr	r6, [sp, #4]
    9c1a:	ldrh.w	ip, [r6], #2
    9c1e:	str	r6, [sp, #4]
    9c20:	ldr	r6, [sp, #12]
    9c22:	orr.w	ip, ip, r6, lsl #16
    9c26:	str.w	ip, [lr], #4
		len--;
    9c2a:	b.n	9bda <usb_audio_transmit_callback+0x6a>
			AudioOutputUSB::offset_1st = offset;
    9c2c:	uxth	r2, r2
    9c2e:	b.n	9c08 <usb_audio_transmit_callback+0x98>
		target = 44;
    9c30:	movs	r5, #44	; 0x2c
	if (++count < 10) {   // TODO: dynamic adjust to match USB rate
    9c32:	str	r3, [r2, #0]
    9c34:	b.n	9b86 <usb_audio_transmit_callback+0x16>
    9c36:	nop
    9c38:	.word	0x20001be4
    9c3c:	.word	0x20006944
    9c40:	.word	0x20006948
    9c44:	.word	0x20006950
    9c48:	.word	0x20005a40
    9c4c:	.word	0x20007138
    9c50:	.word	0x2000694c

00009c54 <tx_event(transfer_struct*)>:
{
    9c54:	push	{r3, r4, r5, lr}
	int len = usb_audio_transmit_callback();
    9c56:	bl	9b70 <usb_audio_transmit_callback>
	usb_audio_sync_feedback = feedback_accumulator >> usb_audio_sync_rshift;
    9c5a:	ldr	r3, [pc, #68]	; (9ca0 <tx_event(transfer_struct*)+0x4c>)
	usb_prepare_transfer(&tx_transfer, usb_audio_transmit_buffer, len, 0);
    9c5c:	ldr	r4, [pc, #68]	; (9ca4 <tx_event(transfer_struct*)+0x50>)
	int len = usb_audio_transmit_callback();
    9c5e:	mov	r5, r0
	usb_audio_sync_feedback = feedback_accumulator >> usb_audio_sync_rshift;
    9c60:	ldrb	r2, [r3, #0]
    9c62:	ldr	r3, [pc, #68]	; (9ca8 <tx_event(transfer_struct*)+0x54>)
	usb_prepare_transfer(&tx_transfer, usb_audio_transmit_buffer, len, 0);
    9c64:	mov	r1, r4
	uint32_t end_addr = (uint32_t)addr + size;
    9c66:	add	r5, r4
	usb_audio_sync_feedback = feedback_accumulator >> usb_audio_sync_rshift;
    9c68:	ldr	r3, [r3, #0]
    9c6a:	lsrs	r3, r2
    9c6c:	ldr	r2, [pc, #60]	; (9cac <tx_event(transfer_struct*)+0x58>)
    9c6e:	str	r3, [r2, #0]
	usb_prepare_transfer(&tx_transfer, usb_audio_transmit_buffer, len, 0);
    9c70:	mov	r2, r0
    9c72:	movs	r3, #0
    9c74:	ldr	r0, [pc, #56]	; (9cb0 <tx_event(transfer_struct*)+0x5c>)
    9c76:	bl	885c <usb_prepare_transfer>
	asm("dsb");
    9c7a:	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    9c7e:	mov.w	r3, #3758153728	; 0xe000e000
    9c82:	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    9c86:	adds	r4, #32
	} while (location < end_addr);
    9c88:	cmp	r5, r4
    9c8a:	bhi.n	9c82 <tx_event(transfer_struct*)+0x2e>
	asm("dsb");
    9c8c:	dsb	sy
	asm("isb");
    9c90:	isb	sy
	usb_transmit(AUDIO_TX_ENDPOINT, &tx_transfer);
    9c94:	ldr	r1, [pc, #24]	; (9cb0 <tx_event(transfer_struct*)+0x5c>)
    9c96:	movs	r0, #5
}
    9c98:	ldmia.w	sp!, {r3, r4, r5, lr}
	usb_transmit(AUDIO_TX_ENDPOINT, &tx_transfer);
    9c9c:	b.w	8888 <usb_transmit>
    9ca0:	.word	0x20007c30
    9ca4:	.word	0x20005a40
    9ca8:	.word	0x20006cf0
    9cac:	.word	0x20205260
    9cb0:	.word	0x20003a20

00009cb4 <usb_audio_configure>:
{
    9cb4:	push	{r3, r4, r5, lr}
	usb_audio_underrun_count = 0;
    9cb6:	movs	r4, #0
    9cb8:	ldr	r3, [pc, #124]	; (9d38 <usb_audio_configure+0x84>)
	feedback_accumulator = 739875226; // 44.1 * 2^24
    9cba:	ldr	r2, [pc, #128]	; (9d3c <usb_audio_configure+0x88>)
	usb_audio_underrun_count = 0;
    9cbc:	str	r4, [r3, #0]
	memset(&rx_transfer, 0, sizeof(rx_transfer));
    9cbe:	mov	r1, r4
	usb_audio_overrun_count = 0;
    9cc0:	ldr	r3, [pc, #124]	; (9d40 <usb_audio_configure+0x8c>)
		usb_audio_sync_nbytes = 4;
    9cc2:	ldr	r5, [pc, #128]	; (9d44 <usb_audio_configure+0x90>)
	usb_audio_overrun_count = 0;
    9cc4:	str	r4, [r3, #0]
	feedback_accumulator = 739875226; // 44.1 * 2^24
    9cc6:	ldr	r3, [pc, #128]	; (9d48 <usb_audio_configure+0x94>)
	memset(&rx_transfer, 0, sizeof(rx_transfer));
    9cc8:	ldr	r0, [pc, #128]	; (9d4c <usb_audio_configure+0x98>)
	feedback_accumulator = 739875226; // 44.1 * 2^24
    9cca:	str	r2, [r3, #0]
	if (usb_high_speed) {
    9ccc:	ldr	r3, [pc, #128]	; (9d50 <usb_audio_configure+0x9c>)
    9cce:	ldrb	r3, [r3, #0]
    9cd0:	cmp	r3, r4
    9cd2:	itete	eq
    9cd4:	moveq	r3, #3
    9cd6:	movne	r3, #4
    9cd8:	moveq	r2, #10
    9cda:	movne	r2, #8
		usb_audio_sync_nbytes = 4;
    9cdc:	strb	r3, [r5, #0]
		usb_audio_sync_rshift = 8;
    9cde:	ldr	r3, [pc, #116]	; (9d54 <usb_audio_configure+0xa0>)
    9ce0:	strb	r2, [r3, #0]
	memset(&rx_transfer, 0, sizeof(rx_transfer));
    9ce2:	movs	r2, #32
    9ce4:	bl	7528 <memset>
	usb_config_rx_iso(AUDIO_RX_ENDPOINT, AUDIO_RX_SIZE, 1, rx_event);
    9ce8:	ldr	r3, [pc, #108]	; (9d58 <usb_audio_configure+0xa4>)
    9cea:	movs	r2, #1
    9cec:	movs	r1, #180	; 0xb4
    9cee:	movs	r0, #5
    9cf0:	bl	87dc <usb_config_rx_iso>
	rx_event(NULL);
    9cf4:	mov	r0, r4
    9cf6:	bl	9b00 <rx_event(transfer_struct*)>
	memset(&sync_transfer, 0, sizeof(sync_transfer));
    9cfa:	mov	r1, r4
    9cfc:	movs	r2, #32
    9cfe:	ldr	r0, [pc, #92]	; (9d5c <usb_audio_configure+0xa8>)
    9d00:	bl	7528 <memset>
	usb_config_tx_iso(AUDIO_SYNC_ENDPOINT, usb_audio_sync_nbytes, 1, sync_event);
    9d04:	ldr	r3, [pc, #88]	; (9d60 <usb_audio_configure+0xac>)
    9d06:	ldrb	r1, [r5, #0]
    9d08:	movs	r2, #1
    9d0a:	movs	r0, #6
    9d0c:	bl	881c <usb_config_tx_iso>
	sync_event(NULL);
    9d10:	mov	r0, r4
    9d12:	bl	9870 <sync_event(transfer_struct*)>
	memset(&tx_transfer, 0, sizeof(tx_transfer));
    9d16:	mov	r1, r4
    9d18:	movs	r2, #32
    9d1a:	ldr	r0, [pc, #72]	; (9d64 <usb_audio_configure+0xb0>)
    9d1c:	bl	7528 <memset>
	usb_config_tx_iso(AUDIO_TX_ENDPOINT, AUDIO_TX_SIZE, 1, tx_event);
    9d20:	ldr	r3, [pc, #68]	; (9d68 <usb_audio_configure+0xb4>)
    9d22:	movs	r0, #5
    9d24:	movs	r2, #1
    9d26:	movs	r1, #180	; 0xb4
    9d28:	bl	881c <usb_config_tx_iso>
	tx_event(NULL);
    9d2c:	mov	r0, r4
}
    9d2e:	ldmia.w	sp!, {r3, r4, r5, lr}
	tx_event(NULL);
    9d32:	b.w	9c54 <tx_event(transfer_struct*)>
    9d36:	nop
    9d38:	.word	0x20007114
    9d3c:	.word	0x2c19999a
    9d40:	.word	0x20007110
    9d44:	.word	0x20007c2f
    9d48:	.word	0x20006cf0
    9d4c:	.word	0x200038e0
    9d50:	.word	0x20007c34
    9d54:	.word	0x20007c30
    9d58:	.word	0x00009b01
    9d5c:	.word	0x20003900
    9d60:	.word	0x00009871
    9d64:	.word	0x20003a20
    9d68:	.word	0x00009c55

00009d6c <usb_audio_get_feature>:
};

int usb_audio_get_feature(void *stp, uint8_t *data, uint32_t *datalen)
{
	struct setup_struct setup = *((struct setup_struct *)stp);
	if (setup.bmRequestType==0xA1) { // should check bRequest, bChannel, and UnitID
    9d6c:	ldrb	r3, [r0, #0]
    9d6e:	cmp	r3, #161	; 0xa1
    9d70:	bne.n	9dba <usb_audio_get_feature+0x4e>
	struct setup_struct setup = *((struct setup_struct *)stp);
    9d72:	ldrb	r3, [r0, #1]
    9d74:	ldrb	r0, [r0, #3]
			if (setup.bCS==0x01) { // mute
    9d76:	cmp	r0, #1
    9d78:	bne.n	9d84 <usb_audio_get_feature+0x18>
				data[0] = AudioInputUSB::features.mute;  // 1=mute, 0=unmute
    9d7a:	ldr	r3, [pc, #68]	; (9dc0 <usb_audio_get_feature+0x54>)
    9d7c:	ldr	r3, [r3, #4]
    9d7e:	strb	r3, [r1, #0]
				*datalen = 1;
    9d80:	str	r0, [r2, #0]
				return 1;
    9d82:	bx	lr
			}
			else if (setup.bCS==0x02) { // volume
    9d84:	cmp	r0, #2
    9d86:	bne.n	9dba <usb_audio_get_feature+0x4e>
				if (setup.bRequest==0x81) { // GET_CURR
    9d88:	subs	r3, #129	; 0x81
    9d8a:	cmp	r3, #3
    9d8c:	bhi.n	9dba <usb_audio_get_feature+0x4e>
    9d8e:	tbb	[pc, r3]
    9d92:	.short	0x0b02
    9d94:	.short	0x120e
					data[0] = AudioInputUSB::features.volume & 0xFF;
    9d96:	ldr	r3, [pc, #40]	; (9dc0 <usb_audio_get_feature+0x54>)
    9d98:	ldr	r0, [r3, #8]
    9d9a:	strb	r0, [r1, #0]
					data[1] = (AudioInputUSB::features.volume>>8) & 0xFF;
    9d9c:	ldrb	r3, [r3, #9]
    9d9e:	strb	r3, [r1, #1]
					data[1] = 0;
				}
				else { // pass over SET_MEM, etc.
					return 0;
				}
				*datalen = 2;
    9da0:	movs	r3, #2
				return 1;
    9da2:	movs	r0, #1
				*datalen = 2;
    9da4:	str	r3, [r2, #0]
				return 1;
    9da6:	bx	lr
					data[0] = 0;     // min level is 0
    9da8:	movs	r3, #0
    9daa:	strb	r3, [r1, #0]
					data[1] = 0;
    9dac:	b.n	9d9e <usb_audio_get_feature+0x32>
					data[0] = FEATURE_MAX_VOLUME;  // max level, for range of 0 to MAX
    9dae:	movs	r3, #255	; 0xff
					data[0] = 1; // increment vol by by 1
    9db0:	strb	r3, [r1, #0]
					data[1] = 0;
    9db2:	movs	r3, #0
    9db4:	b.n	9d9e <usb_audio_get_feature+0x32>
					data[0] = 1; // increment vol by by 1
    9db6:	movs	r3, #1
    9db8:	b.n	9db0 <usb_audio_get_feature+0x44>
			else if (setup.bCS==0x02) { // volume
    9dba:	movs	r0, #0
			}
	}
	return 0;
}
    9dbc:	bx	lr
    9dbe:	nop
    9dc0:	.word	0x20001bd8

00009dc4 <usb_audio_set_feature>:

int usb_audio_set_feature(void *stp, uint8_t *buf) 
{
	struct setup_struct setup = *((struct setup_struct *)stp);
	if (setup.bmRequestType==0x21) { // should check bRequest, bChannel and UnitID
    9dc4:	ldrb	r2, [r0, #0]
{
    9dc6:	mov	r3, r0
	if (setup.bmRequestType==0x21) { // should check bRequest, bChannel and UnitID
    9dc8:	cmp	r2, #33	; 0x21
    9dca:	bne.n	9df2 <usb_audio_set_feature+0x2e>
	struct setup_struct setup = *((struct setup_struct *)stp);
    9dcc:	ldrb	r3, [r3, #3]
    9dce:	ldrb	r0, [r0, #1]
			if (setup.bCS==0x01) { // mute
    9dd0:	cmp	r3, #1
    9dd2:	bne.n	9de2 <usb_audio_set_feature+0x1e>
				if (setup.bRequest==0x01) { // SET_CUR
    9dd4:	cmp	r0, #1
    9dd6:	bne.n	9df2 <usb_audio_set_feature+0x2e>
					AudioInputUSB::features.mute = buf[0]; // 1=mute,0=unmute
    9dd8:	ldr	r3, [pc, #28]	; (9df8 <usb_audio_set_feature+0x34>)
    9dda:	ldrb	r2, [r1, #0]
    9ddc:	str	r2, [r3, #4]
				}
			}
			else if (setup.bCS==0x02) { // volume
				if (setup.bRequest==0x01) { // SET_CUR
					AudioInputUSB::features.volume = buf[0];
					AudioInputUSB::features.change = 1;
    9dde:	str	r0, [r3, #0]
					return 1;
    9de0:	bx	lr
			else if (setup.bCS==0x02) { // volume
    9de2:	cmp	r3, #2
    9de4:	bne.n	9df2 <usb_audio_set_feature+0x2e>
				if (setup.bRequest==0x01) { // SET_CUR
    9de6:	cmp	r0, #1
    9de8:	bne.n	9df2 <usb_audio_set_feature+0x2e>
					AudioInputUSB::features.volume = buf[0];
    9dea:	ldr	r3, [pc, #12]	; (9df8 <usb_audio_set_feature+0x34>)
    9dec:	ldrb	r2, [r1, #0]
    9dee:	str	r2, [r3, #8]
    9df0:	b.n	9dde <usb_audio_set_feature+0x1a>
				}
			}
	}
	return 0;
    9df2:	movs	r0, #0
}
    9df4:	bx	lr
    9df6:	nop
    9df8:	.word	0x20001bd8

00009dfc <Print::write(unsigned char const*, unsigned int)>:

#include "debug/printf.h"
#undef printf

size_t Print::write(const uint8_t *buffer, size_t size)
{
    9dfc:	push	{r3, r4, r5, r6, r7, lr}
    9dfe:	mov	r7, r0
	if (buffer == nullptr) return 0;
    9e00:	mov	r4, r1
    9e02:	cbz	r1, 9e20 <Print::write(unsigned char const*, unsigned int)+0x24>
    9e04:	adds	r5, r1, r2
	size_t count = 0;
    9e06:	movs	r6, #0
	while (size--) count += write(*buffer++);
    9e08:	cmp	r4, r5
    9e0a:	bne.n	9e10 <Print::write(unsigned char const*, unsigned int)+0x14>
	return count;
}
    9e0c:	mov	r0, r6
    9e0e:	pop	{r3, r4, r5, r6, r7, pc}
	while (size--) count += write(*buffer++);
    9e10:	ldr	r3, [r7, #0]
    9e12:	mov	r0, r7
    9e14:	ldrb.w	r1, [r4], #1
    9e18:	ldr	r3, [r3, #0]
    9e1a:	blx	r3
    9e1c:	add	r6, r0
    9e1e:	b.n	9e08 <Print::write(unsigned char const*, unsigned int)+0xc>
	if (buffer == nullptr) return 0;
    9e20:	mov	r6, r1
    9e22:	b.n	9e0c <Print::write(unsigned char const*, unsigned int)+0x10>

00009e24 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>:
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    9e24:	cmp	r2, #1
size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
    9e26:	push	{r4, r5, r6, r7, lr}
		base = 10;
    9e28:	it	eq
    9e2a:	moveq	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
    9e2c:	sub	sp, #44	; 0x2c
	}


	if (n == 0) {
    9e2e:	cbnz	r1, 9e5c <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x38>
		buf[sizeof(buf) - 1] = '0';
    9e30:	movs	r2, #48	; 0x30
		i = sizeof(buf) - 1;
    9e32:	movs	r4, #33	; 0x21
		buf[sizeof(buf) - 1] = '0';
    9e34:	strb.w	r2, [sp, #37]	; 0x25
			n /= base;
			if (n == 0) break;
			i--;
		}
	}
	if (sign) {
    9e38:	cbz	r3, 9e4a <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x26>
		i--;
    9e3a:	subs	r3, r4, #1
		buf[i] = '-';
    9e3c:	add	r2, sp, #40	; 0x28
		i--;
    9e3e:	uxtb	r4, r3
		buf[i] = '-';
    9e40:	uxtab	r3, r2, r3
    9e44:	movs	r2, #45	; 0x2d
    9e46:	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    9e4a:	ldr	r3, [r0, #0]
    9e4c:	add	r1, sp, #4
    9e4e:	rsb	r2, r4, #34	; 0x22
    9e52:	ldr	r3, [r3, #4]
    9e54:	add	r1, r4
    9e56:	blx	r3
}
    9e58:	add	sp, #44	; 0x2c
    9e5a:	pop	{r4, r5, r6, r7, pc}
		i = sizeof(buf) - 1;
    9e5c:	movs	r4, #33	; 0x21
			digit = n % base;
    9e5e:	udiv	r6, r1, r2
    9e62:	mls	r7, r2, r6, r1
    9e66:	uxtb	r5, r7
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    9e68:	cmp	r7, #9
    9e6a:	add.w	r7, r4, #40	; 0x28
    9e6e:	ite	ls
    9e70:	addls	r5, #48	; 0x30
    9e72:	addhi	r5, #55	; 0x37
    9e74:	add	r7, sp
			if (n == 0) break;
    9e76:	cmp	r2, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    9e78:	uxtb	r5, r5
    9e7a:	strb.w	r5, [r7, #-36]
			if (n == 0) break;
    9e7e:	bhi.n	9e38 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x14>
			i--;
    9e80:	subs	r4, #1
			n /= base;
    9e82:	mov	r1, r6
			i--;
    9e84:	uxtb	r4, r4
			digit = n % base;
    9e86:	b.n	9e5e <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x3a>

00009e88 <Print::print(long)>:
	if (n < 0) {
    9e88:	cmp	r1, #0
		n = -n;
    9e8a:	mov.w	r2, #10
    9e8e:	itte	lt
    9e90:	neglt	r1, r1
		sign = '-';
    9e92:	movlt	r3, #45	; 0x2d
	uint8_t sign=0;
    9e94:	movge	r3, #0
	if (base == 0) {
    9e96:	b.w	9e24 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>

00009e9a <Print::println()>:
	uint8_t buf[2]={'\r', '\n'};
    9e9a:	movw	r3, #2573	; 0xa0d
{
    9e9e:	push	{r0, r1, r2, lr}
	uint8_t buf[2]={'\r', '\n'};
    9ea0:	strh.w	r3, [sp, #4]
	return write(buf, 2);
    9ea4:	movs	r2, #2
    9ea6:	ldr	r3, [r0, #0]
    9ea8:	add	r1, sp, #4
    9eaa:	ldr	r3, [r3, #4]
    9eac:	blx	r3
}
    9eae:	add	sp, #12
    9eb0:	ldr.w	pc, [sp], #4

00009eb4 <_write>:
	((class Print *)file)->write((uint8_t *)ptr, len);
    9eb4:	ldr	r3, [r0, #0]
{
    9eb6:	push	{r4, lr}
    9eb8:	mov	r4, r2
	((class Print *)file)->write((uint8_t *)ptr, len);
    9eba:	ldr	r3, [r3, #4]
    9ebc:	blx	r3
}
    9ebe:	mov	r0, r4
    9ec0:	pop	{r4, pc}

00009ec2 <Print::printf(char const*, ...)>:
{
    9ec2:	push	{r1, r2, r3}
    9ec4:	push	{r0, r1, lr}
    9ec6:	add	r2, sp, #12
    9ec8:	ldr.w	r1, [r2], #4
	va_start(ap, format);
    9ecc:	str	r2, [sp, #4]
	int retval = vdprintf((int)this, format, ap);
    9ece:	bl	ad9c <vdprintf>
}
    9ed2:	add	sp, #8
    9ed4:	ldr.w	lr, [sp], #4
    9ed8:	add	sp, #12
    9eda:	bx	lr

00009edc <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
{
    9edc:	push	{r4, r5}
	if (base == 0) {
    9ede:	cbnz	r2, 9eea <Print::printNumber(unsigned long, unsigned char, unsigned char)+0xe>
		return write((uint8_t)n);
    9ee0:	ldr	r3, [r0, #0]
    9ee2:	uxtb	r1, r1
    9ee4:	ldr	r3, [r3, #0]
}
    9ee6:	pop	{r4, r5}
		return write((uint8_t)n);
    9ee8:	bx	r3
}
    9eea:	pop	{r4, r5}
    9eec:	b.w	9e24 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>

00009ef0 <Print::printFloat(double, unsigned char)>:
size_t Print::printFloat(double number, uint8_t digits) 
{
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    9ef0:	vcmp.f64	d0, d0
{
    9ef4:	push	{r4, r5, r6, r7, lr}
	if (isnan(number)) return print("nan");
    9ef6:	vmrs	APSR_nzcv, fpscr
{
    9efa:	mov	r6, r0
    9efc:	mov	r5, r1
    9efe:	vpush	{d8-d9}
    9f02:	sub	sp, #28
	if (isnan(number)) return print("nan");
    9f04:	bvc.n	9f18 <Print::printFloat(double, unsigned char)+0x28>
	size_t print(const char s[])			{ return write(s); }
    9f06:	ldr	r1, [pc, #264]	; (a010 <Print::printFloat(double, unsigned char)+0x120>)
    9f08:	bl	92a0 <Print::write(char const*)>
    9f0c:	mov	r4, r0
			remainder -= n; 
		}
		count += write(buf, count);
	}
	return count;
}
    9f0e:	mov	r0, r4
    9f10:	add	sp, #28
    9f12:	vpop	{d8-d9}
    9f16:	pop	{r4, r5, r6, r7, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
    9f18:	vabs.f64	d7, d0
    	if (isinf(number)) return print("inf");
    9f1c:	vldr	d6, [pc, #208]	; 9ff0 <Print::printFloat(double, unsigned char)+0x100>
    9f20:	vcmp.f64	d7, d6
    9f24:	vmrs	APSR_nzcv, fpscr
    9f28:	ble.n	9f2e <Print::printFloat(double, unsigned char)+0x3e>
    9f2a:	ldr	r1, [pc, #232]	; (a014 <Print::printFloat(double, unsigned char)+0x124>)
    9f2c:	b.n	9f08 <Print::printFloat(double, unsigned char)+0x18>
    	if (number > 4294967040.0f) return print("ovf");  // constant determined empirically
    9f2e:	vldr	d7, [pc, #200]	; 9ff8 <Print::printFloat(double, unsigned char)+0x108>
    9f32:	vcmpe.f64	d0, d7
    9f36:	vmrs	APSR_nzcv, fpscr
    9f3a:	ble.n	9f42 <Print::printFloat(double, unsigned char)+0x52>
    9f3c:	ldr	r1, [pc, #216]	; (a018 <Print::printFloat(double, unsigned char)+0x128>)
    9f3e:	mov	r0, r6
    9f40:	b.n	9f08 <Print::printFloat(double, unsigned char)+0x18>
    	if (number <-4294967040.0f) return print("ovf");  // constant determined empirically
    9f42:	vldr	d7, [pc, #188]	; a000 <Print::printFloat(double, unsigned char)+0x110>
    9f46:	vcmpe.f64	d0, d7
    9f4a:	vmrs	APSR_nzcv, fpscr
    9f4e:	bmi.n	9f3c <Print::printFloat(double, unsigned char)+0x4c>
	if (number < 0.0) {
    9f50:	vcmpe.f64	d0, #0.0
	for (uint8_t i=0; i<digits; ++i) {
    9f54:	movs	r2, #0
	double rounding = 0.5;
    9f56:	vmov.f64	d8, #96	; 0x3f000000  0.5
	if (number < 0.0) {
    9f5a:	vmrs	APSR_nzcv, fpscr
		rounding *= 0.1;
    9f5e:	vldr	d6, [pc, #168]	; a008 <Print::printFloat(double, unsigned char)+0x118>
		number = -number;
    9f62:	itte	mi
    9f64:	vnegmi.f64	d0, d0
		sign = 1;
    9f68:	movmi	r3, #1
	uint8_t sign=0;
    9f6a:	movpl	r3, #0
	for (uint8_t i=0; i<digits; ++i) {
    9f6c:	uxtb	r1, r2
    9f6e:	cmp	r5, r1
    9f70:	bhi.n	9fc0 <Print::printFloat(double, unsigned char)+0xd0>
	number += rounding;
    9f72:	vadd.f64	d8, d0, d8
	unsigned long int_part = (unsigned long)number;
    9f76:	movs	r2, #10
    9f78:	mov	r0, r6
    9f7a:	vcvt.u32.f64	s18, d8
	if (base == 0) {
    9f7e:	vmov	r1, s18
    9f82:	bl	9e24 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    9f86:	mov	r4, r0
	if (digits > 0) {
    9f88:	cmp	r5, #0
    9f8a:	beq.n	9f0e <Print::printFloat(double, unsigned char)+0x1e>
	double remainder = number - (double)int_part;
    9f8c:	vcvt.f64.u32	d0, s18
    9f90:	cmp	r5, #15
    9f92:	add	r0, sp, #8
			remainder *= 10.0;
    9f94:	vmov.f64	d6, #36	; 0x41200000  10.0
    9f98:	it	cs
    9f9a:	movcs	r5, #15
		buf[0] = '.';
    9f9c:	movs	r3, #46	; 0x2e
	double remainder = number - (double)int_part;
    9f9e:	vsub.f64	d0, d8, d0
		buf[0] = '.';
    9fa2:	mov	r1, r0
    9fa4:	mov	r2, r5
    9fa6:	strb.w	r3, [sp, #8]
		while (digits-- > 0) {
    9faa:	subs	r2, #1
    9fac:	uxtb	r2, r2
    9fae:	cmp	r2, #255	; 0xff
    9fb0:	bne.n	9fc8 <Print::printFloat(double, unsigned char)+0xd8>
		count += write(buf, count);
    9fb2:	adds	r5, #1
    9fb4:	ldr	r3, [r6, #0]
    9fb6:	mov	r0, r6
    9fb8:	ldr	r3, [r3, #4]
    9fba:	uxtb	r2, r5
    9fbc:	blx	r3
    9fbe:	b.n	9f0e <Print::printFloat(double, unsigned char)+0x1e>
		rounding *= 0.1;
    9fc0:	vmul.f64	d8, d8, d6
	for (uint8_t i=0; i<digits; ++i) {
    9fc4:	adds	r2, #1
    9fc6:	b.n	9f6c <Print::printFloat(double, unsigned char)+0x7c>
			remainder *= 10.0;
    9fc8:	vmul.f64	d0, d0, d6
			n = (uint8_t)(remainder);
    9fcc:	vcvt.u32.f64	s15, d0
    9fd0:	vstr	s15, [sp, #4]
    9fd4:	ldrb.w	r3, [sp, #4]
			remainder -= n; 
    9fd8:	vmov	s15, r3
			buf[count++] = '0' + n;
    9fdc:	add.w	r7, r3, #48	; 0x30
			remainder -= n; 
    9fe0:	vcvt.f64.s32	d7, s15
			buf[count++] = '0' + n;
    9fe4:	strb.w	r7, [r0, #1]!
			remainder -= n; 
    9fe8:	vsub.f64	d0, d0, d7
    9fec:	b.n	9faa <Print::printFloat(double, unsigned char)+0xba>
    9fee:	nop
    9ff0:	.word	0xffffffff
    9ff4:	.word	0x7fefffff
    9ff8:	.word	0xe0000000
    9ffc:	.word	0x41efffff
    a000:	.word	0xe0000000
    a004:	.word	0xc1efffff
    a008:	.word	0xa0000000
    a00c:	.word	0x3fb99999
    a010:	.word	0x20001204
    a014:	.word	0x20001208
    a018:	.word	0x2000120c

0000a01c <serialEvent()>:

#include <Arduino.h>
void serialEvent() __attribute__((weak));
void serialEvent() {
}
    a01c:	bx	lr

0000a01e <operator new(unsigned int)>:

#include <stdlib.h>

void * operator new(size_t size)
{
	return malloc(size);
    a01e:	b.w	a180 <malloc>

0000a022 <operator delete(void*, unsigned int)>:
	free(ptr);
}

void operator delete(void * ptr, size_t size)
{
	free(ptr);
    a022:	b.w	a190 <free>

0000a026 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    a026:	push	{r4, r5, r6, lr}
	unsigned digit;
	int i=0, j;
    a028:	movs	r4, #0
	char t;

	while (1) {
		digit = val % radix;
    a02a:	udiv	r5, r0, r2
    a02e:	mls	r6, r2, r5, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    a032:	uxtb	r3, r6
    a034:	cmp	r6, #9
    a036:	ite	ls
    a038:	addls	r3, #48	; 0x30
    a03a:	addhi	r3, #55	; 0x37
		val /= radix;
		if (val == 0) break;
    a03c:	cmp	r2, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    a03e:	uxtb	r3, r3
    a040:	strb	r3, [r1, r4]
		if (val == 0) break;
    a042:	bhi.n	a04a <ultoa+0x24>
		i++;
    a044:	adds	r4, #1
		val /= radix;
    a046:	mov	r0, r5
		digit = val % radix;
    a048:	b.n	a02a <ultoa+0x4>
	}
	buf[i + 1] = 0;
    a04a:	adds	r3, r1, r4
    a04c:	movs	r2, #0
    a04e:	subs	r0, r1, #1
    a050:	strb	r2, [r3, #1]
	for (j=0; j < i; j++, i--) {
    a052:	subs	r5, r4, r2
    a054:	cmp	r2, r5
    a056:	blt.n	a05c <ultoa+0x36>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    a058:	mov	r0, r1
    a05a:	pop	{r4, r5, r6, pc}
		t = buf[j];
    a05c:	ldrb.w	r5, [r0, #1]!
	for (j=0; j < i; j++, i--) {
    a060:	adds	r2, #1
		buf[j] = buf[i];
    a062:	ldrb	r6, [r3, #0]
    a064:	strb	r6, [r0, #0]
		buf[i] = t;
    a066:	strb.w	r5, [r3], #-1
	for (j=0; j < i; j++, i--) {
    a06a:	b.n	a052 <ultoa+0x2c>

0000a06c <pit_isr()>:
#endif
}

//FASTRUN
static void pit_isr()
{
    a06c:	push	{r4, lr}

		}
	}
#else
	IMXRT_PIT_CHANNEL_t *channel= IMXRT_PIT_CHANNELS;
	if (funct_table[0] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[0]();}
    a06e:	ldr	r4, [pc, #72]	; (a0b8 <pit_isr()+0x4c>)
    a070:	ldr	r3, [r4, #0]
    a072:	cbz	r3, a080 <pit_isr()+0x14>
    a074:	ldr	r2, [pc, #68]	; (a0bc <pit_isr()+0x50>)
    a076:	ldr	r1, [r2, #12]
    a078:	cbz	r1, a080 <pit_isr()+0x14>
    a07a:	movs	r1, #1
    a07c:	str	r1, [r2, #12]
    a07e:	blx	r3
	channel++;
	if (funct_table[1] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[1]();}
    a080:	ldr	r3, [r4, #4]
    a082:	cbz	r3, a090 <pit_isr()+0x24>
    a084:	ldr	r2, [pc, #52]	; (a0bc <pit_isr()+0x50>)
    a086:	ldr	r1, [r2, #28]
    a088:	cbz	r1, a090 <pit_isr()+0x24>
    a08a:	movs	r1, #1
    a08c:	str	r1, [r2, #28]
    a08e:	blx	r3
	channel++;
	if (funct_table[2] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[2]();}
    a090:	ldr	r3, [r4, #8]
    a092:	cbz	r3, a0a0 <pit_isr()+0x34>
    a094:	ldr	r2, [pc, #36]	; (a0bc <pit_isr()+0x50>)
    a096:	ldr	r1, [r2, #44]	; 0x2c
    a098:	cbz	r1, a0a0 <pit_isr()+0x34>
    a09a:	movs	r1, #1
    a09c:	str	r1, [r2, #44]	; 0x2c
    a09e:	blx	r3
	channel++;
	if (funct_table[3] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[3]();}
    a0a0:	ldr	r3, [r4, #12]
    a0a2:	cbz	r3, a0b4 <pit_isr()+0x48>
    a0a4:	ldr	r2, [pc, #20]	; (a0bc <pit_isr()+0x50>)
    a0a6:	ldr	r1, [r2, #60]	; 0x3c
    a0a8:	cbz	r1, a0b4 <pit_isr()+0x48>
    a0aa:	movs	r1, #1
#endif
}
    a0ac:	ldmia.w	sp!, {r4, lr}
	if (funct_table[3] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[3]();}
    a0b0:	str	r1, [r2, #60]	; 0x3c
    a0b2:	bx	r3
}
    a0b4:	pop	{r4, pc}
    a0b6:	nop
    a0b8:	.word	0x200026c0
    a0bc:	.word	0x40084100

0000a0c0 <IntervalTimer::beginCycles(void (*)(), unsigned long)>:
	if (channel) {
    a0c0:	ldr	r3, [r0, #0]
{
    a0c2:	push	{r4, r5, lr}
	if (channel) {
    a0c4:	cbz	r3, a124 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0x64>
		channel->TCTRL = 0;
    a0c6:	movs	r4, #0
    a0c8:	str	r4, [r3, #8]
		channel->TFLG = 1;
    a0ca:	movs	r4, #1
    a0cc:	str	r4, [r3, #12]
	int index = channel - IMXRT_PIT_CHANNELS;
    a0ce:	ldr	r4, [r0, #0]
	funct_table[index] = funct;
    a0d0:	ldr	r5, [pc, #128]	; (a154 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0x94>)
	int index = channel - IMXRT_PIT_CHANNELS;
    a0d2:	add.w	r3, r4, #3204497152	; 0xbf00bf00
	channel->LDVAL = cycles;
    a0d6:	str	r2, [r4, #0]
	channel->TCTRL = 3;
    a0d8:	movs	r2, #3
	int index = channel - IMXRT_PIT_CHANNELS;
    a0da:	add.w	r3, r3, #16187392	; 0xf70000
	channel->TCTRL = 3;
    a0de:	str	r2, [r4, #8]
	int index = channel - IMXRT_PIT_CHANNELS;
    a0e0:	asrs	r3, r3, #4
	nvic_priorites[index] = nvic_priority;
    a0e2:	ldr	r2, [pc, #116]	; (a158 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0x98>)
	funct_table[index] = funct;
    a0e4:	str.w	r1, [r5, r3, lsl #2]
	nvic_priorites[index] = nvic_priority;
    a0e8:	ldrb	r1, [r0, #4]
    a0ea:	strb	r1, [r2, r3]
		if (top_priority > nvic_priorites[i]) top_priority = nvic_priorites[i];
    a0ec:	ldrb	r3, [r2, #0]
    a0ee:	ldrb	r1, [r2, #1]
    a0f0:	cmp	r3, r1
    a0f2:	it	cs
    a0f4:	movcs	r3, r1
    a0f6:	ldrb	r1, [r2, #2]
    a0f8:	ldrb	r2, [r2, #3]
    a0fa:	cmp	r3, r1
    a0fc:	it	cs
    a0fe:	movcs	r3, r1
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
    a100:	ldr	r1, [pc, #88]	; (a15c <IntervalTimer::beginCycles(void (*)(), unsigned long)+0x9c>)
    a102:	cmp	r3, r2
    a104:	it	cs
    a106:	movcs	r3, r2
    a108:	ldr	r2, [pc, #84]	; (a160 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xa0>)
    a10a:	str.w	r1, [r2, #552]	; 0x228
	NVIC_SET_PRIORITY(IRQ_PIT, top_priority);
    a10e:	ldr	r2, [pc, #84]	; (a164 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xa4>)
	return true;
    a110:	movs	r0, #1
	NVIC_SET_PRIORITY(IRQ_PIT, top_priority);
    a112:	strb.w	r3, [r2, #122]	; 0x7a
	NVIC_ENABLE_IRQ(IRQ_PIT);
    a116:	mov.w	r3, #3758153728	; 0xe000e000
    a11a:	mov.w	r2, #67108864	; 0x4000000
    a11e:	str.w	r2, [r3, #268]	; 0x10c
	return true;
    a122:	b.n	a152 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0x92>
		CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    a124:	ldr	r4, [pc, #64]	; (a168 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xa8>)
    a126:	ldr	r3, [r4, #108]	; 0x6c
    a128:	orr.w	r3, r3, #12288	; 0x3000
    a12c:	str	r3, [r4, #108]	; 0x6c
		PIT_MCR = 1;
    a12e:	movs	r4, #1
    a130:	ldr	r3, [pc, #56]	; (a16c <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xac>)
    a132:	str	r4, [r3, #0]
		channel = IMXRT_PIT_CHANNELS;
    a134:	add.w	r3, r3, #256	; 0x100
			if (++channel >= IMXRT_PIT_CHANNELS + NUM_CHANNELS) {
    a138:	ldr	r4, [pc, #52]	; (a170 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xb0>)
		channel = IMXRT_PIT_CHANNELS;
    a13a:	str	r3, [r0, #0]
			if (channel->TCTRL == 0) break;
    a13c:	ldr	r3, [r0, #0]
    a13e:	ldr	r5, [r3, #8]
    a140:	cmp	r5, #0
    a142:	beq.n	a0ce <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xe>
			if (++channel >= IMXRT_PIT_CHANNELS + NUM_CHANNELS) {
    a144:	adds	r3, #16
    a146:	cmp	r3, r4
    a148:	str	r3, [r0, #0]
    a14a:	bls.n	a13c <IntervalTimer::beginCycles(void (*)(), unsigned long)+0x7c>
				channel = NULL;
    a14c:	movs	r3, #0
    a14e:	str	r3, [r0, #0]
				return false;
    a150:	mov	r0, r3
}
    a152:	pop	{r4, r5, pc}
    a154:	.word	0x200026c0
    a158:	.word	0x2000219d
    a15c:	.word	0x0000a06d
    a160:	.word	0x20002400
    a164:	.word	0xe000e400
    a168:	.word	0x400fc000
    a16c:	.word	0x40084000
    a170:	.word	0x4008413f

0000a174 <__aeabi_atexit>:
    a174:	mov	r3, r0
    a176:	mov	r0, r1
    a178:	mov	r1, r3
    a17a:	b.w	aaf0 <__cxa_atexit>
    a17e:	nop

0000a180 <malloc>:
    a180:	ldr	r3, [pc, #8]	; (a18c <malloc+0xc>)
    a182:	mov	r1, r0
    a184:	ldr	r0, [r3, #0]
    a186:	b.w	a1a0 <_malloc_r>
    a18a:	nop
    a18c:	.word	0x2000217c

0000a190 <free>:
    a190:	ldr	r3, [pc, #8]	; (a19c <free+0xc>)
    a192:	mov	r1, r0
    a194:	ldr	r0, [r3, #0]
    a196:	b.w	b444 <_free_r>
    a19a:	nop
    a19c:	.word	0x2000217c

0000a1a0 <_malloc_r>:
    a1a0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a1a4:	add.w	r6, r1, #11
    a1a8:	cmp	r6, #22
    a1aa:	sub	sp, #12
    a1ac:	mov	r4, r0
    a1ae:	bhi.n	a1fa <_malloc_r+0x5a>
    a1b0:	cmp	r1, #16
    a1b2:	bhi.w	a32a <_malloc_r+0x18a>
    a1b6:	bl	a700 <__malloc_lock>
    a1ba:	movs	r6, #16
    a1bc:	movs	r2, #24
    a1be:	movs	r0, #2
    a1c0:	ldr	r7, [pc, #724]	; (a498 <_malloc_r+0x2f8>)
    a1c2:	add	r2, r7
    a1c4:	sub.w	r1, r2, #8
    a1c8:	ldr	r3, [r2, #4]
    a1ca:	cmp	r3, r1
    a1cc:	beq.w	a344 <_malloc_r+0x1a4>
    a1d0:	ldr	r2, [r3, #4]
    a1d2:	ldr	r1, [r3, #12]
    a1d4:	bic.w	r2, r2, #3
    a1d8:	add	r2, r3
    a1da:	ldr	r5, [r3, #8]
    a1dc:	str	r1, [r5, #12]
    a1de:	str	r5, [r1, #8]
    a1e0:	ldr	r1, [r2, #4]
    a1e2:	orr.w	r1, r1, #1
    a1e6:	mov	r0, r4
    a1e8:	str	r1, [r2, #4]
    a1ea:	add.w	r5, r3, #8
    a1ee:	bl	a70c <__malloc_unlock>
    a1f2:	mov	r0, r5
    a1f4:	add	sp, #12
    a1f6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a1fa:	bics.w	r6, r6, #7
    a1fe:	bmi.w	a32a <_malloc_r+0x18a>
    a202:	cmp	r1, r6
    a204:	bhi.w	a32a <_malloc_r+0x18a>
    a208:	bl	a700 <__malloc_lock>
    a20c:	cmp.w	r6, #504	; 0x1f8
    a210:	bcc.w	a548 <_malloc_r+0x3a8>
    a214:	lsrs	r3, r6, #9
    a216:	beq.w	a338 <_malloc_r+0x198>
    a21a:	cmp	r3, #4
    a21c:	bhi.w	a4fe <_malloc_r+0x35e>
    a220:	lsrs	r3, r6, #6
    a222:	add.w	r0, r3, #57	; 0x39
    a226:	add.w	ip, r3, #56	; 0x38
    a22a:	lsls	r3, r0, #3
    a22c:	ldr	r7, [pc, #616]	; (a498 <_malloc_r+0x2f8>)
    a22e:	add	r3, r7
    a230:	sub.w	r5, r3, #8
    a234:	ldr	r3, [r3, #4]
    a236:	cmp	r5, r3
    a238:	bne.n	a248 <_malloc_r+0xa8>
    a23a:	b.n	a256 <_malloc_r+0xb6>
    a23c:	cmp	r1, #0
    a23e:	bge.w	a490 <_malloc_r+0x2f0>
    a242:	ldr	r3, [r3, #12]
    a244:	cmp	r5, r3
    a246:	beq.n	a256 <_malloc_r+0xb6>
    a248:	ldr	r2, [r3, #4]
    a24a:	bic.w	r2, r2, #3
    a24e:	subs	r1, r2, r6
    a250:	cmp	r1, #15
    a252:	ble.n	a23c <_malloc_r+0x9c>
    a254:	mov	r0, ip
    a256:	ldr	r5, [r7, #16]
    a258:	ldr.w	ip, [pc, #592]	; a4ac <_malloc_r+0x30c>
    a25c:	cmp	r5, ip
    a25e:	beq.n	a35a <_malloc_r+0x1ba>
    a260:	ldr	r2, [r5, #4]
    a262:	bic.w	r2, r2, #3
    a266:	subs	r3, r2, r6
    a268:	cmp	r3, #15
    a26a:	bgt.w	a564 <_malloc_r+0x3c4>
    a26e:	cmp	r3, #0
    a270:	strd	ip, ip, [r7, #16]
    a274:	bge.w	a550 <_malloc_r+0x3b0>
    a278:	cmp.w	r2, #512	; 0x200
    a27c:	bcs.w	a4b4 <_malloc_r+0x314>
    a280:	lsrs	r3, r2, #3
    a282:	ldr	r1, [r7, #4]
    a284:	adds	r3, #1
    a286:	mov.w	lr, r2, lsr #5
    a28a:	movs	r2, #1
    a28c:	lsl.w	r2, r2, lr
    a290:	orrs	r2, r1
    a292:	ldr.w	lr, [r7, r3, lsl #3]
    a296:	str.w	lr, [r5, #8]
    a29a:	add.w	r1, r7, r3, lsl #3
    a29e:	subs	r1, #8
    a2a0:	str	r1, [r5, #12]
    a2a2:	str	r2, [r7, #4]
    a2a4:	str.w	r5, [r7, r3, lsl #3]
    a2a8:	str.w	r5, [lr, #12]
    a2ac:	asrs	r3, r0, #2
    a2ae:	movs	r1, #1
    a2b0:	lsls	r1, r3
    a2b2:	cmp	r1, r2
    a2b4:	bhi.n	a366 <_malloc_r+0x1c6>
    a2b6:	tst	r1, r2
    a2b8:	bne.n	a2c8 <_malloc_r+0x128>
    a2ba:	bic.w	r0, r0, #3
    a2be:	lsls	r1, r1, #1
    a2c0:	tst	r1, r2
    a2c2:	add.w	r0, r0, #4
    a2c6:	beq.n	a2be <_malloc_r+0x11e>
    a2c8:	add.w	r9, r7, r0, lsl #3
    a2cc:	mov	r5, r9
    a2ce:	mov	lr, r0
    a2d0:	ldr.w	r8, [r5, #12]
    a2d4:	cmp	r5, r8
    a2d6:	bne.n	a2ea <_malloc_r+0x14a>
    a2d8:	b.n	a516 <_malloc_r+0x376>
    a2da:	cmp	r3, #0
    a2dc:	bge.w	a528 <_malloc_r+0x388>
    a2e0:	ldr.w	r8, [r8, #12]
    a2e4:	cmp	r5, r8
    a2e6:	beq.w	a516 <_malloc_r+0x376>
    a2ea:	ldr.w	r2, [r8, #4]
    a2ee:	bic.w	r2, r2, #3
    a2f2:	subs	r3, r2, r6
    a2f4:	cmp	r3, #15
    a2f6:	ble.n	a2da <_malloc_r+0x13a>
    a2f8:	mov	r0, r4
    a2fa:	ldrd	r5, r4, [r8, #8]
    a2fe:	add.w	r1, r8, r6
    a302:	orr.w	r6, r6, #1
    a306:	str.w	r6, [r8, #4]
    a30a:	str	r4, [r5, #12]
    a30c:	str	r5, [r4, #8]
    a30e:	orr.w	r4, r3, #1
    a312:	strd	r1, r1, [r7, #16]
    a316:	strd	ip, ip, [r1, #8]
    a31a:	str	r4, [r1, #4]
    a31c:	str.w	r3, [r8, r2]
    a320:	bl	a70c <__malloc_unlock>
    a324:	add.w	r5, r8, #8
    a328:	b.n	a330 <_malloc_r+0x190>
    a32a:	movs	r3, #12
    a32c:	str	r3, [r4, #0]
    a32e:	movs	r5, #0
    a330:	mov	r0, r5
    a332:	add	sp, #12
    a334:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a338:	mov.w	r3, #512	; 0x200
    a33c:	movs	r0, #64	; 0x40
    a33e:	mov.w	ip, #63	; 0x3f
    a342:	b.n	a22c <_malloc_r+0x8c>
    a344:	ldr	r3, [r2, #12]
    a346:	cmp	r2, r3
    a348:	it	eq
    a34a:	addeq	r0, #2
    a34c:	bne.w	a1d0 <_malloc_r+0x30>
    a350:	ldr	r5, [r7, #16]
    a352:	ldr.w	ip, [pc, #344]	; a4ac <_malloc_r+0x30c>
    a356:	cmp	r5, ip
    a358:	bne.n	a260 <_malloc_r+0xc0>
    a35a:	ldr	r2, [r7, #4]
    a35c:	asrs	r3, r0, #2
    a35e:	movs	r1, #1
    a360:	lsls	r1, r3
    a362:	cmp	r1, r2
    a364:	bls.n	a2b6 <_malloc_r+0x116>
    a366:	ldr	r5, [r7, #8]
    a368:	ldr	r3, [r5, #4]
    a36a:	bic.w	r9, r3, #3
    a36e:	cmp	r6, r9
    a370:	bhi.n	a37a <_malloc_r+0x1da>
    a372:	sub.w	r3, r9, r6
    a376:	cmp	r3, #15
    a378:	bgt.n	a470 <_malloc_r+0x2d0>
    a37a:	ldr.w	fp, [pc, #308]	; a4b0 <_malloc_r+0x310>
    a37e:	ldr	r3, [pc, #284]	; (a49c <_malloc_r+0x2fc>)
    a380:	ldr.w	r2, [fp]
    a384:	ldr	r3, [r3, #0]
    a386:	adds	r2, #1
    a388:	add	r3, r6
    a38a:	add.w	sl, r5, r9
    a38e:	beq.w	a5f8 <_malloc_r+0x458>
    a392:	add.w	r3, r3, #4096	; 0x1000
    a396:	adds	r3, #15
    a398:	bic.w	r8, r3, #4080	; 0xff0
    a39c:	bic.w	r8, r8, #15
    a3a0:	mov	r1, r8
    a3a2:	mov	r0, r4
    a3a4:	bl	b0ec <_sbrk_r>
    a3a8:	adds	r1, r0, #1
    a3aa:	mov	r2, r0
    a3ac:	beq.w	a596 <_malloc_r+0x3f6>
    a3b0:	cmp	sl, r0
    a3b2:	bhi.w	a592 <_malloc_r+0x3f2>
    a3b6:	ldr	r3, [pc, #232]	; (a4a0 <_malloc_r+0x300>)
    a3b8:	ldr	r1, [r3, #0]
    a3ba:	add	r1, r8
    a3bc:	str	r1, [r3, #0]
    a3be:	mov	r0, r1
    a3c0:	beq.w	a660 <_malloc_r+0x4c0>
    a3c4:	ldr.w	r1, [fp]
    a3c8:	str	r3, [sp, #4]
    a3ca:	adds	r1, #1
    a3cc:	ittet	ne
    a3ce:	subne.w	r1, r2, sl
    a3d2:	addne	r1, r1, r0
    a3d4:	streq.w	r2, [fp]
    a3d8:	strne	r1, [r3, #0]
    a3da:	ands.w	fp, r2, #7
    a3de:	beq.w	a610 <_malloc_r+0x470>
    a3e2:	rsb	r1, fp, #8
    a3e6:	add	r2, r1
    a3e8:	rsb	r1, fp, #4096	; 0x1000
    a3ec:	add	r8, r2
    a3ee:	adds	r1, #8
    a3f0:	sub.w	r1, r1, r8
    a3f4:	ubfx	sl, r1, #0, #12
    a3f8:	mov	r1, sl
    a3fa:	mov	r0, r4
    a3fc:	str	r2, [sp, #0]
    a3fe:	bl	b0ec <_sbrk_r>
    a402:	adds	r2, r0, #1
    a404:	ldrd	r2, r3, [sp]
    a408:	beq.w	a6aa <_malloc_r+0x50a>
    a40c:	subs	r0, r0, r2
    a40e:	add.w	r8, r0, sl
    a412:	ldr	r1, [r3, #0]
    a414:	str	r2, [r7, #8]
    a416:	orr.w	r0, r8, #1
    a41a:	add	r1, sl
    a41c:	cmp	r5, r7
    a41e:	str	r0, [r2, #4]
    a420:	str	r1, [r3, #0]
    a422:	beq.w	a678 <_malloc_r+0x4d8>
    a426:	cmp.w	r9, #15
    a42a:	bls.w	a67c <_malloc_r+0x4dc>
    a42e:	ldr	r0, [r5, #4]
    a430:	sub.w	ip, r9, #12
    a434:	bic.w	ip, ip, #7
    a438:	and.w	r0, r0, #1
    a43c:	orr.w	r0, r0, ip
    a440:	str	r0, [r5, #4]
    a442:	mov.w	lr, #5
    a446:	add.w	r0, r5, ip
    a44a:	cmp.w	ip, #15
    a44e:	strd	lr, lr, [r0, #4]
    a452:	bhi.w	a6ba <_malloc_r+0x51a>
    a456:	ldr	r0, [r2, #4]
    a458:	mov	r5, r2
    a45a:	ldr	r3, [pc, #72]	; (a4a4 <_malloc_r+0x304>)
    a45c:	ldr	r2, [r3, #0]
    a45e:	cmp	r2, r1
    a460:	it	cc
    a462:	strcc	r1, [r3, #0]
    a464:	ldr	r3, [pc, #64]	; (a4a8 <_malloc_r+0x308>)
    a466:	ldr	r2, [r3, #0]
    a468:	cmp	r2, r1
    a46a:	it	cc
    a46c:	strcc	r1, [r3, #0]
    a46e:	b.n	a59a <_malloc_r+0x3fa>
    a470:	adds	r2, r5, r6
    a472:	orr.w	r3, r3, #1
    a476:	orr.w	r6, r6, #1
    a47a:	str	r6, [r5, #4]
    a47c:	mov	r0, r4
    a47e:	str	r2, [r7, #8]
    a480:	str	r3, [r2, #4]
    a482:	bl	a70c <__malloc_unlock>
    a486:	adds	r5, #8
    a488:	mov	r0, r5
    a48a:	add	sp, #12
    a48c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a490:	ldr	r1, [r3, #12]
    a492:	add	r2, r3
    a494:	b.n	a1da <_malloc_r+0x3a>
    a496:	nop
    a498:	.word	0x20001d60
    a49c:	.word	0x20006b78
    a4a0:	.word	0x20006b48
    a4a4:	.word	0x20006b70
    a4a8:	.word	0x20006b74
    a4ac:	.word	0x20001d68
    a4b0:	.word	0x20002168
    a4b4:	cmp.w	r2, #2560	; 0xa00
    a4b8:	mov.w	r3, r2, lsr #9
    a4bc:	bcc.n	a586 <_malloc_r+0x3e6>
    a4be:	cmp	r3, #20
    a4c0:	bhi.w	a632 <_malloc_r+0x492>
    a4c4:	add.w	r1, r3, #92	; 0x5c
    a4c8:	lsls	r1, r1, #3
    a4ca:	adds	r3, #91	; 0x5b
    a4cc:	add.w	lr, r7, r1
    a4d0:	ldr	r1, [r7, r1]
    a4d2:	sub.w	lr, lr, #8
    a4d6:	cmp	lr, r1
    a4d8:	beq.w	a5fe <_malloc_r+0x45e>
    a4dc:	ldr	r3, [r1, #4]
    a4de:	bic.w	r3, r3, #3
    a4e2:	cmp	r3, r2
    a4e4:	bls.n	a4ec <_malloc_r+0x34c>
    a4e6:	ldr	r1, [r1, #8]
    a4e8:	cmp	lr, r1
    a4ea:	bne.n	a4dc <_malloc_r+0x33c>
    a4ec:	ldr.w	lr, [r1, #12]
    a4f0:	ldr	r2, [r7, #4]
    a4f2:	strd	r1, lr, [r5, #8]
    a4f6:	str.w	r5, [lr, #8]
    a4fa:	str	r5, [r1, #12]
    a4fc:	b.n	a2ac <_malloc_r+0x10c>
    a4fe:	cmp	r3, #20
    a500:	bls.n	a5b6 <_malloc_r+0x416>
    a502:	cmp	r3, #84	; 0x54
    a504:	bhi.w	a642 <_malloc_r+0x4a2>
    a508:	lsrs	r3, r6, #12
    a50a:	add.w	r0, r3, #111	; 0x6f
    a50e:	add.w	ip, r3, #110	; 0x6e
    a512:	lsls	r3, r0, #3
    a514:	b.n	a22c <_malloc_r+0x8c>
    a516:	add.w	lr, lr, #1
    a51a:	tst.w	lr, #3
    a51e:	add.w	r5, r5, #8
    a522:	bne.w	a2d0 <_malloc_r+0x130>
    a526:	b.n	a5cc <_malloc_r+0x42c>
    a528:	add	r2, r8
    a52a:	mov	r5, r8
    a52c:	ldr	r3, [r2, #4]
    a52e:	ldr.w	r1, [r8, #12]
    a532:	orr.w	r3, r3, #1
    a536:	str	r3, [r2, #4]
    a538:	ldr.w	r3, [r5, #8]!
    a53c:	mov	r0, r4
    a53e:	str	r1, [r3, #12]
    a540:	str	r3, [r1, #8]
    a542:	bl	a70c <__malloc_unlock>
    a546:	b.n	a330 <_malloc_r+0x190>
    a548:	lsrs	r0, r6, #3
    a54a:	add.w	r2, r6, #8
    a54e:	b.n	a1c0 <_malloc_r+0x20>
    a550:	add	r2, r5
    a552:	mov	r0, r4
    a554:	ldr	r3, [r2, #4]
    a556:	orr.w	r3, r3, #1
    a55a:	str	r3, [r2, #4]
    a55c:	adds	r5, #8
    a55e:	bl	a70c <__malloc_unlock>
    a562:	b.n	a330 <_malloc_r+0x190>
    a564:	adds	r1, r5, r6
    a566:	mov	r0, r4
    a568:	orr.w	r6, r6, #1
    a56c:	orr.w	r4, r3, #1
    a570:	str	r6, [r5, #4]
    a572:	strd	r1, r1, [r7, #16]
    a576:	strd	ip, ip, [r1, #8]
    a57a:	str	r4, [r1, #4]
    a57c:	str	r3, [r5, r2]
    a57e:	bl	a70c <__malloc_unlock>
    a582:	adds	r5, #8
    a584:	b.n	a330 <_malloc_r+0x190>
    a586:	lsrs	r3, r2, #6
    a588:	add.w	r1, r3, #57	; 0x39
    a58c:	lsls	r1, r1, #3
    a58e:	adds	r3, #56	; 0x38
    a590:	b.n	a4cc <_malloc_r+0x32c>
    a592:	cmp	r5, r7
    a594:	beq.n	a656 <_malloc_r+0x4b6>
    a596:	ldr	r5, [r7, #8]
    a598:	ldr	r0, [r5, #4]
    a59a:	bic.w	r8, r0, #3
    a59e:	cmp	r6, r8
    a5a0:	sub.w	r3, r8, r6
    a5a4:	bhi.n	a5ac <_malloc_r+0x40c>
    a5a6:	cmp	r3, #15
    a5a8:	bgt.w	a470 <_malloc_r+0x2d0>
    a5ac:	mov	r0, r4
    a5ae:	bl	a70c <__malloc_unlock>
    a5b2:	movs	r5, #0
    a5b4:	b.n	a330 <_malloc_r+0x190>
    a5b6:	add.w	r0, r3, #92	; 0x5c
    a5ba:	add.w	ip, r3, #91	; 0x5b
    a5be:	lsls	r3, r0, #3
    a5c0:	b.n	a22c <_malloc_r+0x8c>
    a5c2:	ldr.w	r3, [r9], #-8
    a5c6:	cmp	r3, r9
    a5c8:	bne.w	a6f8 <_malloc_r+0x558>
    a5cc:	tst.w	r0, #3
    a5d0:	add.w	r0, r0, #4294967295
    a5d4:	bne.n	a5c2 <_malloc_r+0x422>
    a5d6:	ldr	r3, [r7, #4]
    a5d8:	bic.w	r3, r3, r1
    a5dc:	str	r3, [r7, #4]
    a5de:	lsls	r1, r1, #1
    a5e0:	cmp	r1, r3
    a5e2:	bhi.w	a366 <_malloc_r+0x1c6>
    a5e6:	cbnz	r1, a5f0 <_malloc_r+0x450>
    a5e8:	b.n	a366 <_malloc_r+0x1c6>
    a5ea:	lsls	r1, r1, #1
    a5ec:	add.w	lr, lr, #4
    a5f0:	tst	r1, r3
    a5f2:	beq.n	a5ea <_malloc_r+0x44a>
    a5f4:	mov	r0, lr
    a5f6:	b.n	a2c8 <_malloc_r+0x128>
    a5f8:	add.w	r8, r3, #16
    a5fc:	b.n	a3a0 <_malloc_r+0x200>
    a5fe:	asrs	r2, r3, #2
    a600:	mov.w	r8, #1
    a604:	ldr	r3, [r7, #4]
    a606:	lsl.w	r2, r8, r2
    a60a:	orrs	r2, r3
    a60c:	str	r2, [r7, #4]
    a60e:	b.n	a4f2 <_malloc_r+0x352>
    a610:	add.w	r1, r2, r8
    a614:	negs	r1, r1
    a616:	ubfx	sl, r1, #0, #12
    a61a:	mov	r1, sl
    a61c:	mov	r0, r4
    a61e:	str	r2, [sp, #0]
    a620:	bl	b0ec <_sbrk_r>
    a624:	adds	r3, r0, #1
    a626:	ldrd	r2, r3, [sp]
    a62a:	bne.w	a40c <_malloc_r+0x26c>
    a62e:	mov	sl, fp
    a630:	b.n	a412 <_malloc_r+0x272>
    a632:	cmp	r3, #84	; 0x54
    a634:	bhi.n	a682 <_malloc_r+0x4e2>
    a636:	lsrs	r3, r2, #12
    a638:	add.w	r1, r3, #111	; 0x6f
    a63c:	lsls	r1, r1, #3
    a63e:	adds	r3, #110	; 0x6e
    a640:	b.n	a4cc <_malloc_r+0x32c>
    a642:	cmp.w	r3, #340	; 0x154
    a646:	bhi.n	a694 <_malloc_r+0x4f4>
    a648:	lsrs	r3, r6, #15
    a64a:	add.w	r0, r3, #120	; 0x78
    a64e:	add.w	ip, r3, #119	; 0x77
    a652:	lsls	r3, r0, #3
    a654:	b.n	a22c <_malloc_r+0x8c>
    a656:	ldr	r3, [pc, #164]	; (a6fc <_malloc_r+0x55c>)
    a658:	ldr	r0, [r3, #0]
    a65a:	add	r0, r8
    a65c:	str	r0, [r3, #0]
    a65e:	b.n	a3c4 <_malloc_r+0x224>
    a660:	ubfx	ip, sl, #0, #12
    a664:	cmp.w	ip, #0
    a668:	bne.w	a3c4 <_malloc_r+0x224>
    a66c:	ldr	r5, [r7, #8]
    a66e:	add	r8, r9
    a670:	orr.w	r0, r8, #1
    a674:	str	r0, [r5, #4]
    a676:	b.n	a45a <_malloc_r+0x2ba>
    a678:	mov	r5, r2
    a67a:	b.n	a45a <_malloc_r+0x2ba>
    a67c:	movs	r3, #1
    a67e:	str	r3, [r2, #4]
    a680:	b.n	a5ac <_malloc_r+0x40c>
    a682:	cmp.w	r3, #340	; 0x154
    a686:	bhi.n	a6d0 <_malloc_r+0x530>
    a688:	lsrs	r3, r2, #15
    a68a:	add.w	r1, r3, #120	; 0x78
    a68e:	lsls	r1, r1, #3
    a690:	adds	r3, #119	; 0x77
    a692:	b.n	a4cc <_malloc_r+0x32c>
    a694:	movw	r2, #1364	; 0x554
    a698:	cmp	r3, r2
    a69a:	bhi.n	a6e4 <_malloc_r+0x544>
    a69c:	lsrs	r3, r6, #18
    a69e:	add.w	r0, r3, #125	; 0x7d
    a6a2:	add.w	ip, r3, #124	; 0x7c
    a6a6:	lsls	r3, r0, #3
    a6a8:	b.n	a22c <_malloc_r+0x8c>
    a6aa:	sub.w	fp, fp, #8
    a6ae:	add	r8, fp
    a6b0:	sub.w	r8, r8, r2
    a6b4:	mov.w	sl, #0
    a6b8:	b.n	a412 <_malloc_r+0x272>
    a6ba:	add.w	r1, r5, #8
    a6be:	mov	r0, r4
    a6c0:	str	r3, [sp, #0]
    a6c2:	bl	b444 <_free_r>
    a6c6:	ldr	r5, [r7, #8]
    a6c8:	ldr	r3, [sp, #0]
    a6ca:	ldr	r0, [r5, #4]
    a6cc:	ldr	r1, [r3, #0]
    a6ce:	b.n	a45a <_malloc_r+0x2ba>
    a6d0:	movw	r1, #1364	; 0x554
    a6d4:	cmp	r3, r1
    a6d6:	bhi.n	a6f0 <_malloc_r+0x550>
    a6d8:	lsrs	r3, r2, #18
    a6da:	add.w	r1, r3, #125	; 0x7d
    a6de:	lsls	r1, r1, #3
    a6e0:	adds	r3, #124	; 0x7c
    a6e2:	b.n	a4cc <_malloc_r+0x32c>
    a6e4:	mov.w	r3, #1016	; 0x3f8
    a6e8:	movs	r0, #127	; 0x7f
    a6ea:	mov.w	ip, #126	; 0x7e
    a6ee:	b.n	a22c <_malloc_r+0x8c>
    a6f0:	mov.w	r1, #1016	; 0x3f8
    a6f4:	movs	r3, #126	; 0x7e
    a6f6:	b.n	a4cc <_malloc_r+0x32c>
    a6f8:	ldr	r3, [r7, #4]
    a6fa:	b.n	a5de <_malloc_r+0x43e>
    a6fc:	.word	0x20006b48

0000a700 <__malloc_lock>:
    a700:	ldr	r0, [pc, #4]	; (a708 <__malloc_lock+0x8>)
    a702:	b.w	b198 <__retarget_lock_acquire_recursive>
    a706:	nop
    a708:	.word	0x20006b40

0000a70c <__malloc_unlock>:
    a70c:	ldr	r0, [pc, #4]	; (a714 <__malloc_unlock+0x8>)
    a70e:	b.w	b19c <__retarget_lock_release_recursive>
    a712:	nop
    a714:	.word	0x20006b40

0000a718 <_realloc_r>:
    a718:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a71c:	mov	r7, r2
    a71e:	cmp	r1, #0
    a720:	beq.w	a854 <_realloc_r+0x13c>
    a724:	mov	r4, r1
    a726:	add.w	r5, r7, #11
    a72a:	mov	r8, r0
    a72c:	bl	a700 <__malloc_lock>
    a730:	cmp	r5, #22
    a732:	ldr.w	r1, [r4, #-4]
    a736:	bhi.n	a7f0 <_realloc_r+0xd8>
    a738:	movs	r5, #16
    a73a:	mov	r2, r5
    a73c:	cmp	r7, r5
    a73e:	bhi.n	a7fa <_realloc_r+0xe2>
    a740:	bic.w	r6, r1, #3
    a744:	cmp	r6, r2
    a746:	sub.w	r9, r4, #8
    a74a:	bge.n	a812 <_realloc_r+0xfa>
    a74c:	ldr	r3, [pc, #752]	; (aa40 <_realloc_r+0x328>)
    a74e:	ldr.w	ip, [r3, #8]
    a752:	add.w	r0, r9, r6
    a756:	cmp	ip, r0
    a758:	beq.w	a88a <_realloc_r+0x172>
    a75c:	ldr.w	ip, [r0, #4]
    a760:	bic.w	r3, ip, #1
    a764:	add	r3, r0
    a766:	ldr	r3, [r3, #4]
    a768:	lsls	r3, r3, #31
    a76a:	bmi.n	a83e <_realloc_r+0x126>
    a76c:	bic.w	ip, ip, #3
    a770:	add.w	r3, r6, ip
    a774:	cmp	r3, r2
    a776:	bge.n	a808 <_realloc_r+0xf0>
    a778:	lsls	r3, r1, #31
    a77a:	bmi.n	a79e <_realloc_r+0x86>
    a77c:	ldr.w	r3, [r4, #-8]
    a780:	sub.w	sl, r9, r3
    a784:	ldr.w	r3, [sl, #4]
    a788:	bic.w	r1, r3, #3
    a78c:	add	ip, r1
    a78e:	add	ip, r6
    a790:	cmp	ip, r2
    a792:	bge.w	a9b8 <_realloc_r+0x2a0>
    a796:	adds	r3, r6, r1
    a798:	cmp	r3, r2
    a79a:	bge.w	a96e <_realloc_r+0x256>
    a79e:	mov	r1, r7
    a7a0:	mov	r0, r8
    a7a2:	bl	a1a0 <_malloc_r>
    a7a6:	mov	r7, r0
    a7a8:	cbz	r0, a7e4 <_realloc_r+0xcc>
    a7aa:	ldr.w	r3, [r4, #-4]
    a7ae:	bic.w	r3, r3, #1
    a7b2:	add	r3, r9
    a7b4:	sub.w	r2, r0, #8
    a7b8:	cmp	r3, r2
    a7ba:	beq.w	a962 <_realloc_r+0x24a>
    a7be:	subs	r2, r6, #4
    a7c0:	cmp	r2, #36	; 0x24
    a7c2:	bhi.w	a9b0 <_realloc_r+0x298>
    a7c6:	cmp	r2, #19
    a7c8:	bhi.w	a924 <_realloc_r+0x20c>
    a7cc:	mov	r3, r0
    a7ce:	mov	r2, r4
    a7d0:	ldr	r1, [r2, #0]
    a7d2:	str	r1, [r3, #0]
    a7d4:	ldr	r1, [r2, #4]
    a7d6:	str	r1, [r3, #4]
    a7d8:	ldr	r2, [r2, #8]
    a7da:	str	r2, [r3, #8]
    a7dc:	mov	r1, r4
    a7de:	mov	r0, r8
    a7e0:	bl	b444 <_free_r>
    a7e4:	mov	r0, r8
    a7e6:	bl	a70c <__malloc_unlock>
    a7ea:	mov	r0, r7
    a7ec:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a7f0:	bic.w	r5, r5, #7
    a7f4:	cmp	r5, #0
    a7f6:	mov	r2, r5
    a7f8:	bge.n	a73c <_realloc_r+0x24>
    a7fa:	movs	r3, #12
    a7fc:	str.w	r3, [r8]
    a800:	movs	r7, #0
    a802:	mov	r0, r7
    a804:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a808:	mov	r6, r3
    a80a:	ldrd	r2, r3, [r0, #8]
    a80e:	str	r3, [r2, #12]
    a810:	str	r2, [r3, #8]
    a812:	subs	r3, r6, r5
    a814:	cmp	r3, #15
    a816:	bhi.n	a85e <_realloc_r+0x146>
    a818:	ldr.w	r3, [r9, #4]
    a81c:	and.w	r3, r3, #1
    a820:	orrs	r3, r6
    a822:	add	r6, r9
    a824:	str.w	r3, [r9, #4]
    a828:	ldr	r3, [r6, #4]
    a82a:	orr.w	r3, r3, #1
    a82e:	str	r3, [r6, #4]
    a830:	mov	r0, r8
    a832:	mov	r7, r4
    a834:	bl	a70c <__malloc_unlock>
    a838:	mov	r0, r7
    a83a:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a83e:	lsls	r1, r1, #31
    a840:	bmi.n	a79e <_realloc_r+0x86>
    a842:	ldr.w	r3, [r4, #-8]
    a846:	sub.w	sl, r9, r3
    a84a:	ldr.w	r1, [sl, #4]
    a84e:	bic.w	r1, r1, #3
    a852:	b.n	a796 <_realloc_r+0x7e>
    a854:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a858:	mov	r1, r2
    a85a:	b.w	a1a0 <_malloc_r>
    a85e:	ldr.w	r2, [r9, #4]
    a862:	add.w	r1, r9, r5
    a866:	and.w	r2, r2, #1
    a86a:	add	r6, r9
    a86c:	orr.w	r3, r3, #1
    a870:	orrs	r2, r5
    a872:	str.w	r2, [r9, #4]
    a876:	str	r3, [r1, #4]
    a878:	ldr	r3, [r6, #4]
    a87a:	orr.w	r3, r3, #1
    a87e:	adds	r1, #8
    a880:	str	r3, [r6, #4]
    a882:	mov	r0, r8
    a884:	bl	b444 <_free_r>
    a888:	b.n	a830 <_realloc_r+0x118>
    a88a:	ldr.w	r0, [ip, #4]
    a88e:	bic.w	fp, r0, #3
    a892:	add.w	ip, r6, fp
    a896:	add.w	r0, r5, #16
    a89a:	cmp	ip, r0
    a89c:	bge.n	a93a <_realloc_r+0x222>
    a89e:	lsls	r1, r1, #31
    a8a0:	bmi.w	a79e <_realloc_r+0x86>
    a8a4:	ldr.w	r1, [r4, #-8]
    a8a8:	sub.w	sl, r9, r1
    a8ac:	ldr.w	r1, [sl, #4]
    a8b0:	bic.w	r1, r1, #3
    a8b4:	add	fp, r1
    a8b6:	add	fp, r6
    a8b8:	cmp	r0, fp
    a8ba:	bgt.w	a796 <_realloc_r+0x7e>
    a8be:	mov	r7, sl
    a8c0:	ldr.w	r1, [sl, #12]
    a8c4:	ldr.w	r0, [r7, #8]!
    a8c8:	subs	r2, r6, #4
    a8ca:	cmp	r2, #36	; 0x24
    a8cc:	str	r1, [r0, #12]
    a8ce:	str	r0, [r1, #8]
    a8d0:	bhi.w	aa8a <_realloc_r+0x372>
    a8d4:	cmp	r2, #19
    a8d6:	bls.w	aa86 <_realloc_r+0x36e>
    a8da:	ldr	r1, [r4, #0]
    a8dc:	str.w	r1, [sl, #8]
    a8e0:	ldr	r1, [r4, #4]
    a8e2:	str.w	r1, [sl, #12]
    a8e6:	cmp	r2, #27
    a8e8:	bhi.w	aaaa <_realloc_r+0x392>
    a8ec:	adds	r4, #8
    a8ee:	add.w	r2, sl, #16
    a8f2:	ldr	r1, [r4, #0]
    a8f4:	str	r1, [r2, #0]
    a8f6:	ldr	r1, [r4, #4]
    a8f8:	str	r1, [r2, #4]
    a8fa:	ldr	r1, [r4, #8]
    a8fc:	str	r1, [r2, #8]
    a8fe:	add.w	r1, sl, r5
    a902:	sub.w	r2, fp, r5
    a906:	orr.w	r2, r2, #1
    a90a:	str	r1, [r3, #8]
    a90c:	str	r2, [r1, #4]
    a90e:	ldr.w	r3, [sl, #4]
    a912:	and.w	r3, r3, #1
    a916:	orrs	r3, r5
    a918:	mov	r0, r8
    a91a:	str.w	r3, [sl, #4]
    a91e:	bl	a70c <__malloc_unlock>
    a922:	b.n	a802 <_realloc_r+0xea>
    a924:	ldr	r3, [r4, #0]
    a926:	str	r3, [r0, #0]
    a928:	ldr	r3, [r4, #4]
    a92a:	str	r3, [r0, #4]
    a92c:	cmp	r2, #27
    a92e:	bhi.n	aa02 <_realloc_r+0x2ea>
    a930:	add.w	r2, r4, #8
    a934:	add.w	r3, r0, #8
    a938:	b.n	a7d0 <_realloc_r+0xb8>
    a93a:	add.w	r2, r9, r5
    a93e:	str	r2, [r3, #8]
    a940:	sub.w	r3, ip, r5
    a944:	orr.w	r3, r3, #1
    a948:	str	r3, [r2, #4]
    a94a:	ldr.w	r3, [r4, #-4]
    a94e:	and.w	r3, r3, #1
    a952:	orrs	r3, r5
    a954:	mov	r0, r8
    a956:	str.w	r3, [r4, #-4]
    a95a:	bl	a70c <__malloc_unlock>
    a95e:	mov	r7, r4
    a960:	b.n	a802 <_realloc_r+0xea>
    a962:	ldr.w	r3, [r0, #-4]
    a966:	bic.w	r3, r3, #3
    a96a:	add	r6, r3
    a96c:	b.n	a812 <_realloc_r+0xfa>
    a96e:	mov	r7, sl
    a970:	ldr.w	r1, [sl, #12]
    a974:	ldr.w	r0, [r7, #8]!
    a978:	subs	r2, r6, #4
    a97a:	cmp	r2, #36	; 0x24
    a97c:	str	r1, [r0, #12]
    a97e:	str	r0, [r1, #8]
    a980:	bhi.n	aa1c <_realloc_r+0x304>
    a982:	cmp	r2, #19
    a984:	bls.n	aa18 <_realloc_r+0x300>
    a986:	ldr	r1, [r4, #0]
    a988:	str.w	r1, [sl, #8]
    a98c:	ldr	r1, [r4, #4]
    a98e:	str.w	r1, [sl, #12]
    a992:	cmp	r2, #27
    a994:	bhi.n	aa44 <_realloc_r+0x32c>
    a996:	adds	r4, #8
    a998:	add.w	r2, sl, #16
    a99c:	mov	r6, r3
    a99e:	ldr	r3, [r4, #0]
    a9a0:	str	r3, [r2, #0]
    a9a2:	ldr	r3, [r4, #4]
    a9a4:	str	r3, [r2, #4]
    a9a6:	ldr	r3, [r4, #8]
    a9a8:	str	r3, [r2, #8]
    a9aa:	mov	r9, sl
    a9ac:	mov	r4, r7
    a9ae:	b.n	a812 <_realloc_r+0xfa>
    a9b0:	mov	r1, r4
    a9b2:	bl	ae7c <memmove>
    a9b6:	b.n	a7dc <_realloc_r+0xc4>
    a9b8:	ldrd	r1, r3, [r0, #8]
    a9bc:	mov	r7, sl
    a9be:	str	r3, [r1, #12]
    a9c0:	str	r1, [r3, #8]
    a9c2:	ldr.w	r1, [r7, #8]!
    a9c6:	ldr.w	r3, [sl, #12]
    a9ca:	str	r3, [r1, #12]
    a9cc:	subs	r2, r6, #4
    a9ce:	cmp	r2, #36	; 0x24
    a9d0:	str	r1, [r3, #8]
    a9d2:	bhi.n	aa30 <_realloc_r+0x318>
    a9d4:	cmp	r2, #19
    a9d6:	bls.n	aa2c <_realloc_r+0x314>
    a9d8:	ldr	r3, [r4, #0]
    a9da:	str.w	r3, [sl, #8]
    a9de:	ldr	r3, [r4, #4]
    a9e0:	str.w	r3, [sl, #12]
    a9e4:	cmp	r2, #27
    a9e6:	bhi.n	aa6e <_realloc_r+0x356>
    a9e8:	adds	r4, #8
    a9ea:	add.w	r3, sl, #16
    a9ee:	ldr	r2, [r4, #0]
    a9f0:	str	r2, [r3, #0]
    a9f2:	ldr	r2, [r4, #4]
    a9f4:	str	r2, [r3, #4]
    a9f6:	ldr	r2, [r4, #8]
    a9f8:	str	r2, [r3, #8]
    a9fa:	mov	r6, ip
    a9fc:	mov	r9, sl
    a9fe:	mov	r4, r7
    aa00:	b.n	a812 <_realloc_r+0xfa>
    aa02:	ldr	r3, [r4, #8]
    aa04:	str	r3, [r0, #8]
    aa06:	ldr	r3, [r4, #12]
    aa08:	str	r3, [r0, #12]
    aa0a:	cmp	r2, #36	; 0x24
    aa0c:	beq.n	aa5c <_realloc_r+0x344>
    aa0e:	add.w	r2, r4, #16
    aa12:	add.w	r3, r0, #16
    aa16:	b.n	a7d0 <_realloc_r+0xb8>
    aa18:	mov	r2, r7
    aa1a:	b.n	a99c <_realloc_r+0x284>
    aa1c:	mov	r1, r4
    aa1e:	mov	r0, r7
    aa20:	mov	r6, r3
    aa22:	mov	r9, sl
    aa24:	bl	ae7c <memmove>
    aa28:	mov	r4, r7
    aa2a:	b.n	a812 <_realloc_r+0xfa>
    aa2c:	mov	r3, r7
    aa2e:	b.n	a9ee <_realloc_r+0x2d6>
    aa30:	mov	r1, r4
    aa32:	mov	r0, r7
    aa34:	mov	r6, ip
    aa36:	mov	r9, sl
    aa38:	bl	ae7c <memmove>
    aa3c:	mov	r4, r7
    aa3e:	b.n	a812 <_realloc_r+0xfa>
    aa40:	.word	0x20001d60
    aa44:	ldr	r1, [r4, #8]
    aa46:	str.w	r1, [sl, #16]
    aa4a:	ldr	r1, [r4, #12]
    aa4c:	str.w	r1, [sl, #20]
    aa50:	cmp	r2, #36	; 0x24
    aa52:	beq.n	aa96 <_realloc_r+0x37e>
    aa54:	adds	r4, #16
    aa56:	add.w	r2, sl, #24
    aa5a:	b.n	a99c <_realloc_r+0x284>
    aa5c:	ldr	r3, [r4, #16]
    aa5e:	str	r3, [r0, #16]
    aa60:	ldr	r1, [r4, #20]
    aa62:	str	r1, [r0, #20]
    aa64:	add.w	r2, r4, #24
    aa68:	add.w	r3, r0, #24
    aa6c:	b.n	a7d0 <_realloc_r+0xb8>
    aa6e:	ldr	r3, [r4, #8]
    aa70:	str.w	r3, [sl, #16]
    aa74:	ldr	r3, [r4, #12]
    aa76:	str.w	r3, [sl, #20]
    aa7a:	cmp	r2, #36	; 0x24
    aa7c:	beq.n	aac2 <_realloc_r+0x3aa>
    aa7e:	adds	r4, #16
    aa80:	add.w	r3, sl, #24
    aa84:	b.n	a9ee <_realloc_r+0x2d6>
    aa86:	mov	r2, r7
    aa88:	b.n	a8f2 <_realloc_r+0x1da>
    aa8a:	mov	r1, r4
    aa8c:	mov	r0, r7
    aa8e:	bl	ae7c <memmove>
    aa92:	ldr	r3, [pc, #88]	; (aaec <_realloc_r+0x3d4>)
    aa94:	b.n	a8fe <_realloc_r+0x1e6>
    aa96:	ldr	r2, [r4, #16]
    aa98:	str.w	r2, [sl, #24]
    aa9c:	ldr	r2, [r4, #20]
    aa9e:	str.w	r2, [sl, #28]
    aaa2:	adds	r4, #24
    aaa4:	add.w	r2, sl, #32
    aaa8:	b.n	a99c <_realloc_r+0x284>
    aaaa:	ldr	r1, [r4, #8]
    aaac:	str.w	r1, [sl, #16]
    aab0:	ldr	r1, [r4, #12]
    aab2:	str.w	r1, [sl, #20]
    aab6:	cmp	r2, #36	; 0x24
    aab8:	beq.n	aad6 <_realloc_r+0x3be>
    aaba:	adds	r4, #16
    aabc:	add.w	r2, sl, #24
    aac0:	b.n	a8f2 <_realloc_r+0x1da>
    aac2:	ldr	r3, [r4, #16]
    aac4:	str.w	r3, [sl, #24]
    aac8:	ldr	r3, [r4, #20]
    aaca:	str.w	r3, [sl, #28]
    aace:	adds	r4, #24
    aad0:	add.w	r3, sl, #32
    aad4:	b.n	a9ee <_realloc_r+0x2d6>
    aad6:	ldr	r2, [r4, #16]
    aad8:	str.w	r2, [sl, #24]
    aadc:	ldr	r2, [r4, #20]
    aade:	str.w	r2, [sl, #28]
    aae2:	adds	r4, #24
    aae4:	add.w	r2, sl, #32
    aae8:	b.n	a8f2 <_realloc_r+0x1da>
    aaea:	nop
    aaec:	.word	0x20001d60

0000aaf0 <__cxa_atexit>:
    aaf0:	mov	r3, r2
    aaf2:	mov	r2, r1
    aaf4:	mov	r1, r0
    aaf6:	movs	r0, #2
    aaf8:	b.w	b31c <__register_exitproc>

0000aafc <stdio_exit_handler>:
    aafc:	ldr	r2, [pc, #8]	; (ab08 <stdio_exit_handler+0xc>)
    aafe:	ldr	r1, [pc, #12]	; (ab0c <stdio_exit_handler+0x10>)
    ab00:	ldr	r0, [pc, #12]	; (ab10 <stdio_exit_handler+0x14>)
    ab02:	b.w	ac7c <_fwalk_sglue>
    ab06:	nop
    ab08:	.word	0x20002170
    ab0c:	.word	0x0000d955
    ab10:	.word	0x20001a98

0000ab14 <cleanup_stdio>:
    ab14:	ldr	r3, [pc, #48]	; (ab48 <cleanup_stdio+0x34>)
    ab16:	ldr	r1, [r0, #4]
    ab18:	cmp	r1, r3
    ab1a:	push	{r4, lr}
    ab1c:	mov	r4, r0
    ab1e:	beq.n	ab24 <cleanup_stdio+0x10>
    ab20:	bl	d954 <_fclose_r>
    ab24:	ldr	r1, [r4, #8]
    ab26:	ldr	r3, [pc, #36]	; (ab4c <cleanup_stdio+0x38>)
    ab28:	cmp	r1, r3
    ab2a:	beq.n	ab32 <cleanup_stdio+0x1e>
    ab2c:	mov	r0, r4
    ab2e:	bl	d954 <_fclose_r>
    ab32:	ldr	r1, [r4, #12]
    ab34:	ldr	r3, [pc, #24]	; (ab50 <cleanup_stdio+0x3c>)
    ab36:	cmp	r1, r3
    ab38:	beq.n	ab44 <cleanup_stdio+0x30>
    ab3a:	mov	r0, r4
    ab3c:	ldmia.w	sp!, {r4, lr}
    ab40:	b.w	d954 <_fclose_r>
    ab44:	pop	{r4, pc}
    ab46:	nop
    ab48:	.word	0x20006b7c
    ab4c:	.word	0x20006be4
    ab50:	.word	0x20006c4c

0000ab54 <global_stdio_init.part.0>:
    ab54:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ab58:	ldr	r4, [pc, #168]	; (ac04 <global_stdio_init.part.0+0xb0>)
    ab5a:	ldr	r3, [pc, #172]	; (ac08 <global_stdio_init.part.0+0xb4>)
    ab5c:	ldr	r0, [pc, #172]	; (ac0c <global_stdio_init.part.0+0xb8>)
    ab5e:	ldr.w	r9, [pc, #192]	; ac20 <global_stdio_init.part.0+0xcc>
    ab62:	ldr.w	r8, [pc, #192]	; ac24 <global_stdio_init.part.0+0xd0>
    ab66:	ldr	r7, [pc, #168]	; (ac10 <global_stdio_init.part.0+0xbc>)
    ab68:	str	r0, [r3, #0]
    ab6a:	movs	r5, #0
    ab6c:	movs	r3, #4
    ab6e:	movs	r2, #8
    ab70:	mov	r1, r5
    ab72:	add.w	r0, r4, #92	; 0x5c
    ab76:	ldr	r6, [pc, #156]	; (ac14 <global_stdio_init.part.0+0xc0>)
    ab78:	str	r5, [r4, #100]	; 0x64
    ab7a:	strd	r5, r3, [r4, #8]
    ab7e:	strd	r5, r5, [r4]
    ab82:	strd	r5, r5, [r4, #16]
    ab86:	str	r5, [r4, #24]
    ab88:	bl	7528 <memset>
    ab8c:	ldr	r3, [pc, #136]	; (ac18 <global_stdio_init.part.0+0xc4>)
    ab8e:	str	r3, [r4, #116]	; 0x74
    ab90:	movs	r2, #8
    ab92:	mov	r1, r5
    ab94:	add.w	r0, r4, #196	; 0xc4
    ab98:	strd	r4, r9, [r4, #28]
    ab9c:	strd	r8, r7, [r4, #36]	; 0x24
    aba0:	strd	r5, r5, [r4, #104]	; 0x68
    aba4:	strd	r5, r5, [r4, #120]	; 0x78
    aba8:	str.w	r5, [r4, #204]	; 0xcc
    abac:	str	r5, [r4, #112]	; 0x70
    abae:	str.w	r5, [r4, #128]	; 0x80
    abb2:	str	r6, [r4, #44]	; 0x2c
    abb4:	bl	7528 <memset>
    abb8:	ldr	r3, [pc, #96]	; (ac1c <global_stdio_init.part.0+0xc8>)
    abba:	str.w	r3, [r4, #220]	; 0xdc
    abbe:	mov	r1, r5
    abc0:	add.w	r3, r4, #104	; 0x68
    abc4:	movs	r2, #8
    abc6:	add.w	r0, r4, #300	; 0x12c
    abca:	str.w	r3, [r4, #132]	; 0x84
    abce:	strd	r9, r8, [r4, #136]	; 0x88
    abd2:	strd	r7, r6, [r4, #144]	; 0x90
    abd6:	strd	r5, r5, [r4, #208]	; 0xd0
    abda:	strd	r5, r5, [r4, #224]	; 0xe0
    abde:	str.w	r5, [r4, #308]	; 0x134
    abe2:	str.w	r5, [r4, #216]	; 0xd8
    abe6:	str.w	r5, [r4, #232]	; 0xe8
    abea:	bl	7528 <memset>
    abee:	add.w	r3, r4, #208	; 0xd0
    abf2:	strd	r9, r8, [r4, #240]	; 0xf0
    abf6:	strd	r7, r6, [r4, #248]	; 0xf8
    abfa:	str.w	r3, [r4, #236]	; 0xec
    abfe:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ac02:	nop
    ac04:	.word	0x20006b7c
    ac08:	.word	0x20006cb4
    ac0c:	.word	0x0000aafd
    ac10:	.word	0x0000ad29
    ac14:	.word	0x0000ad49
    ac18:	.word	0x00010009
    ac1c:	.word	0x00020012
    ac20:	.word	0x0000acc5
    ac24:	.word	0x0000ace9

0000ac28 <__sinit>:
    ac28:	push	{r4, lr}
    ac2a:	mov	r4, r0
    ac2c:	ldr	r0, [pc, #40]	; (ac58 <__sinit+0x30>)
    ac2e:	bl	b198 <__retarget_lock_acquire_recursive>
    ac32:	ldr	r3, [r4, #52]	; 0x34
    ac34:	cbnz	r3, ac40 <__sinit+0x18>
    ac36:	ldr	r3, [pc, #36]	; (ac5c <__sinit+0x34>)
    ac38:	ldr	r2, [pc, #36]	; (ac60 <__sinit+0x38>)
    ac3a:	ldr	r3, [r3, #0]
    ac3c:	str	r2, [r4, #52]	; 0x34
    ac3e:	cbz	r3, ac4a <__sinit+0x22>
    ac40:	ldmia.w	sp!, {r4, lr}
    ac44:	ldr	r0, [pc, #16]	; (ac58 <__sinit+0x30>)
    ac46:	b.w	b19c <__retarget_lock_release_recursive>
    ac4a:	bl	ab54 <global_stdio_init.part.0>
    ac4e:	ldmia.w	sp!, {r4, lr}
    ac52:	ldr	r0, [pc, #4]	; (ac58 <__sinit+0x30>)
    ac54:	b.w	b19c <__retarget_lock_release_recursive>
    ac58:	.word	0x20006b44
    ac5c:	.word	0x20006cb4
    ac60:	.word	0x0000ab15

0000ac64 <__sfp_lock_acquire>:
    ac64:	ldr	r0, [pc, #4]	; (ac6c <__sfp_lock_acquire+0x8>)
    ac66:	b.w	b198 <__retarget_lock_acquire_recursive>
    ac6a:	nop
    ac6c:	.word	0x20006b44

0000ac70 <__sfp_lock_release>:
    ac70:	ldr	r0, [pc, #4]	; (ac78 <__sfp_lock_release+0x8>)
    ac72:	b.w	b19c <__retarget_lock_release_recursive>
    ac76:	nop
    ac78:	.word	0x20006b44

0000ac7c <_fwalk_sglue>:
    ac7c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ac80:	mov	r8, r0
    ac82:	mov	r7, r1
    ac84:	mov	r6, r2
    ac86:	mov.w	r9, #0
    ac8a:	ldrd	r5, r4, [r6, #4]
    ac8e:	subs	r5, #1
    ac90:	bmi.n	acb6 <_fwalk_sglue+0x3a>
    ac92:	ldrh	r3, [r4, #12]
    ac94:	cmp	r3, #1
    ac96:	add.w	r5, r5, #4294967295
    ac9a:	bls.n	acae <_fwalk_sglue+0x32>
    ac9c:	ldrsh.w	r3, [r4, #14]
    aca0:	adds	r3, #1
    aca2:	mov	r1, r4
    aca4:	beq.n	acae <_fwalk_sglue+0x32>
    aca6:	mov	r0, r8
    aca8:	blx	r7
    acaa:	orr.w	r9, r9, r0
    acae:	adds	r3, r5, #1
    acb0:	add.w	r4, r4, #104	; 0x68
    acb4:	bne.n	ac92 <_fwalk_sglue+0x16>
    acb6:	ldr	r6, [r6, #0]
    acb8:	cmp	r6, #0
    acba:	bne.n	ac8a <_fwalk_sglue+0xe>
    acbc:	mov	r0, r9
    acbe:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    acc2:	nop

0000acc4 <__sread>:
    acc4:	push	{r4, lr}
    acc6:	mov	r4, r1
    acc8:	ldrsh.w	r1, [r1, #14]
    accc:	bl	b0c0 <_read_r>
    acd0:	cmp	r0, #0
    acd2:	blt.n	acdc <__sread+0x18>
    acd4:	ldr	r3, [r4, #80]	; 0x50
    acd6:	add	r3, r0
    acd8:	str	r3, [r4, #80]	; 0x50
    acda:	pop	{r4, pc}
    acdc:	ldrh	r3, [r4, #12]
    acde:	bic.w	r3, r3, #4096	; 0x1000
    ace2:	strh	r3, [r4, #12]
    ace4:	pop	{r4, pc}
    ace6:	nop

0000ace8 <__swrite>:
    ace8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    acec:	mov	r4, r1
    acee:	ldrsh.w	r1, [r1, #12]
    acf2:	mov	r7, r3
    acf4:	lsls	r3, r1, #23
    acf6:	mov	r5, r0
    acf8:	mov	r6, r2
    acfa:	bmi.n	ad14 <__swrite+0x2c>
    acfc:	bic.w	r1, r1, #4096	; 0x1000
    ad00:	strh	r1, [r4, #12]
    ad02:	mov	r3, r7
    ad04:	ldrsh.w	r1, [r4, #14]
    ad08:	mov	r2, r6
    ad0a:	mov	r0, r5
    ad0c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ad10:	b.w	b110 <_write_r>
    ad14:	ldrsh.w	r1, [r4, #14]
    ad18:	movs	r3, #2
    ad1a:	movs	r2, #0
    ad1c:	bl	b094 <_lseek_r>
    ad20:	ldrsh.w	r1, [r4, #12]
    ad24:	b.n	acfc <__swrite+0x14>
    ad26:	nop

0000ad28 <__sseek>:
    ad28:	push	{r4, lr}
    ad2a:	mov	r4, r1
    ad2c:	ldrsh.w	r1, [r1, #14]
    ad30:	bl	b094 <_lseek_r>
    ad34:	ldrh	r3, [r4, #12]
    ad36:	adds	r2, r0, #1
    ad38:	itee	eq
    ad3a:	biceq.w	r3, r3, #4096	; 0x1000
    ad3e:	orrne.w	r3, r3, #4096	; 0x1000
    ad42:	strne	r0, [r4, #80]	; 0x50
    ad44:	strh	r3, [r4, #12]
    ad46:	pop	{r4, pc}

0000ad48 <__sclose>:
    ad48:	ldrsh.w	r1, [r1, #14]
    ad4c:	b.w	b070 <_close_r>

0000ad50 <_vdprintf_r>:
    ad50:	push	{r4, r5, r6, r7, lr}
    ad52:	sub.w	sp, sp, #532	; 0x214
    ad56:	add	r7, sp, #16
    ad58:	str	r3, [sp, #0]
    ad5a:	mov	r3, r2
    ad5c:	mov.w	r2, #512	; 0x200
    ad60:	mov	r6, r1
    ad62:	str	r2, [sp, #12]
    ad64:	mov	r1, r7
    ad66:	add	r2, sp, #12
    ad68:	mov	r5, r0
    ad6a:	bl	adb8 <_vasnprintf_r>
    ad6e:	cbz	r0, ad94 <_vdprintf_r+0x44>
    ad70:	mov	r4, r0
    ad72:	mov	r2, r0
    ad74:	ldr	r3, [sp, #12]
    ad76:	mov	r1, r6
    ad78:	mov	r0, r5
    ad7a:	bl	b110 <_write_r>
    ad7e:	cmp	r4, r7
    ad80:	str	r0, [sp, #12]
    ad82:	beq.n	ad8e <_vdprintf_r+0x3e>
    ad84:	mov	r0, r5
    ad86:	mov	r1, r4
    ad88:	bl	b444 <_free_r>
    ad8c:	ldr	r0, [sp, #12]
    ad8e:	add.w	sp, sp, #532	; 0x214
    ad92:	pop	{r4, r5, r6, r7, pc}
    ad94:	mov.w	r0, #4294967295
    ad98:	b.n	ad8e <_vdprintf_r+0x3e>
    ad9a:	nop

0000ad9c <vdprintf>:
    ad9c:	push	{r4}
    ad9e:	ldr	r4, [pc, #20]	; (adb4 <vdprintf+0x18>)
    ada0:	mov	ip, r0
    ada2:	mov	r3, r2
    ada4:	ldr	r0, [r4, #0]
    ada6:	ldr.w	r4, [sp], #4
    adaa:	mov	r2, r1
    adac:	mov	r1, ip
    adae:	b.w	ad50 <_vdprintf_r>
    adb2:	nop
    adb4:	.word	0x2000217c

0000adb8 <_vasnprintf_r>:
    adb8:	push	{r4, r5, lr}
    adba:	ldr	r4, [r2, #0]
    adbc:	mov	r5, r2
    adbe:	sub	sp, #108	; 0x6c
    adc0:	mov	r2, r3
    adc2:	cbz	r1, adc8 <_vasnprintf_r+0x10>
    adc4:	cmp	r4, #0
    adc6:	bne.n	adfc <_vasnprintf_r+0x44>
    adc8:	movs	r1, #0
    adca:	mov.w	r3, #648	; 0x288
    adce:	strh.w	r3, [sp, #12]
    add2:	str	r1, [sp, #0]
    add4:	str	r1, [sp, #16]
    add6:	movw	r3, #65535	; 0xffff
    adda:	str	r1, [sp, #8]
    addc:	str	r1, [sp, #20]
    adde:	strh.w	r3, [sp, #14]
    ade2:	mov	r1, sp
    ade4:	ldr	r3, [sp, #120]	; 0x78
    ade6:	bl	be10 <_svfprintf_r>
    adea:	cmp	r0, #0
    adec:	blt.n	ae16 <_vasnprintf_r+0x5e>
    adee:	ldr	r3, [sp, #0]
    adf0:	str	r0, [r5, #0]
    adf2:	movs	r2, #0
    adf4:	strb	r2, [r3, #0]
    adf6:	ldr	r0, [sp, #16]
    adf8:	add	sp, #108	; 0x6c
    adfa:	pop	{r4, r5, pc}
    adfc:	mov.w	r3, #1544	; 0x608
    ae00:	str	r1, [sp, #0]
    ae02:	str	r1, [sp, #16]
    ae04:	strh.w	r3, [sp, #12]
    ae08:	mov	r1, r4
    ae0a:	bge.n	add6 <_vasnprintf_r+0x1e>
    ae0c:	movs	r3, #139	; 0x8b
    ae0e:	str	r3, [r0, #0]
    ae10:	movs	r0, #0
    ae12:	add	sp, #108	; 0x6c
    ae14:	pop	{r4, r5, pc}
    ae16:	movs	r0, #0
    ae18:	b.n	adf8 <_vasnprintf_r+0x40>
    ae1a:	nop

0000ae1c <memcmp>:
    ae1c:	cmp	r2, #3
    ae1e:	push	{r4, r5, r6, lr}
    ae20:	bls.n	ae4c <memcmp+0x30>
    ae22:	orr.w	r3, r0, r1
    ae26:	lsls	r3, r3, #30
    ae28:	bne.n	ae70 <memcmp+0x54>
    ae2a:	mov	r4, r0
    ae2c:	mov	r3, r1
    ae2e:	mov	r1, r3
    ae30:	mov	r0, r4
    ae32:	ldr	r6, [r1, #0]
    ae34:	ldr	r5, [r0, #0]
    ae36:	cmp	r5, r6
    ae38:	add.w	r4, r4, #4
    ae3c:	add.w	r3, r3, #4
    ae40:	bne.n	ae70 <memcmp+0x54>
    ae42:	subs	r2, #4
    ae44:	cmp	r2, #3
    ae46:	mov	r0, r4
    ae48:	mov	r1, r3
    ae4a:	bhi.n	ae2e <memcmp+0x12>
    ae4c:	subs	r4, r2, #1
    ae4e:	cbz	r2, ae78 <memcmp+0x5c>
    ae50:	subs	r2, r0, #1
    ae52:	subs	r1, #1
    ae54:	b.n	ae5a <memcmp+0x3e>
    ae56:	adds	r3, r0, r3
    ae58:	beq.n	ae74 <memcmp+0x58>
    ae5a:	ldrb.w	lr, [r2, #1]!
    ae5e:	ldrb.w	ip, [r1, #1]!
    ae62:	cmp	lr, ip
    ae64:	sub.w	r3, r4, r2
    ae68:	beq.n	ae56 <memcmp+0x3a>
    ae6a:	sub.w	r0, lr, ip
    ae6e:	pop	{r4, r5, r6, pc}
    ae70:	subs	r4, r2, #1
    ae72:	b.n	ae50 <memcmp+0x34>
    ae74:	mov	r0, r3
    ae76:	pop	{r4, r5, r6, pc}
    ae78:	mov	r0, r2
    ae7a:	pop	{r4, r5, r6, pc}

0000ae7c <memmove>:
    ae7c:	cmp	r0, r1
    ae7e:	bls.n	ae9c <memmove+0x20>
    ae80:	adds	r3, r1, r2
    ae82:	cmp	r3, r0
    ae84:	bls.n	ae9c <memmove+0x20>
    ae86:	add.w	ip, r0, r2
    ae8a:	cbz	r2, aebc <memmove+0x40>
    ae8c:	mov	r2, ip
    ae8e:	ldrb.w	ip, [r3, #-1]!
    ae92:	strb.w	ip, [r2, #-1]!
    ae96:	cmp	r1, r3
    ae98:	bne.n	ae8e <memmove+0x12>
    ae9a:	bx	lr
    ae9c:	cmp	r2, #15
    ae9e:	bhi.n	aebe <memmove+0x42>
    aea0:	mov	r3, r0
    aea2:	add.w	ip, r2, #4294967295
    aea6:	cbz	r2, aebc <memmove+0x40>
    aea8:	add.w	ip, ip, #1
    aeac:	subs	r3, #1
    aeae:	add	ip, r1
    aeb0:	ldrb.w	r2, [r1], #1
    aeb4:	strb.w	r2, [r3, #1]!
    aeb8:	cmp	r1, ip
    aeba:	bne.n	aeb0 <memmove+0x34>
    aebc:	bx	lr
    aebe:	orr.w	r3, r0, r1
    aec2:	lsls	r3, r3, #30
    aec4:	bne.n	af68 <memmove+0xec>
    aec6:	sub.w	r3, r2, #16
    aeca:	push	{r4, r5, r6, lr}
    aecc:	add.w	ip, r1, #32
    aed0:	bic.w	r5, r3, #15
    aed4:	add.w	lr, r1, #16
    aed8:	add.w	r4, r0, #16
    aedc:	add	ip, r5
    aede:	lsrs	r3, r3, #4
    aee0:	ldr.w	r5, [lr, #-16]
    aee4:	str.w	r5, [r4, #-16]
    aee8:	ldr.w	r5, [lr, #-12]
    aeec:	str.w	r5, [r4, #-12]
    aef0:	ldr.w	r5, [lr, #-8]
    aef4:	str.w	r5, [r4, #-8]
    aef8:	ldr.w	r5, [lr, #-4]
    aefc:	str.w	r5, [r4, #-4]
    af00:	add.w	lr, lr, #16
    af04:	cmp	lr, ip
    af06:	add.w	r4, r4, #16
    af0a:	bne.n	aee0 <memmove+0x64>
    af0c:	adds	r3, #1
    af0e:	tst.w	r2, #12
    af12:	add.w	r1, r1, r3, lsl #4
    af16:	and.w	r4, r2, #15
    af1a:	add.w	r3, r0, r3, lsl #4
    af1e:	beq.n	af70 <memmove+0xf4>
    af20:	subs	r4, #4
    af22:	bic.w	r6, r4, #3
    af26:	mov.w	ip, r4, lsr #2
    af2a:	add	r6, r3
    af2c:	subs	r4, r3, #4
    af2e:	mov	lr, r1
    af30:	ldr.w	r5, [lr], #4
    af34:	str.w	r5, [r4, #4]!
    af38:	cmp	r4, r6
    af3a:	bne.n	af30 <memmove+0xb4>
    af3c:	add.w	r4, ip, #1
    af40:	and.w	r2, r2, #3
    af44:	add.w	r3, r3, r4, lsl #2
    af48:	add.w	r1, r1, r4, lsl #2
    af4c:	add.w	ip, r2, #4294967295
    af50:	cbz	r2, af66 <memmove+0xea>
    af52:	add.w	ip, ip, #1
    af56:	subs	r3, #1
    af58:	add	ip, r1
    af5a:	ldrb.w	r2, [r1], #1
    af5e:	strb.w	r2, [r3, #1]!
    af62:	cmp	r1, ip
    af64:	bne.n	af5a <memmove+0xde>
    af66:	pop	{r4, r5, r6, pc}
    af68:	add.w	ip, r2, #4294967295
    af6c:	mov	r3, r0
    af6e:	b.n	aea8 <memmove+0x2c>
    af70:	mov	r2, r4
    af72:	b.n	af4c <memmove+0xd0>

0000af74 <strncmp>:
    af74:	cmp	r2, #0
    af76:	beq.n	aff6 <strncmp+0x82>
    af78:	orr.w	r3, r0, r1
    af7c:	lsls	r3, r3, #30
    af7e:	push	{r4, r5, lr}
    af80:	mov	ip, r0
    af82:	bne.n	afe4 <strncmp+0x70>
    af84:	cmp	r2, #3
    af86:	bls.n	afe4 <strncmp+0x70>
    af88:	mov	r3, r1
    af8a:	b.n	af9e <strncmp+0x2a>
    af8c:	subs	r2, #4
    af8e:	mov	ip, r0
    af90:	mov	r1, r3
    af92:	beq.n	afe0 <strncmp+0x6c>
    af94:	tst.w	lr, #2155905152	; 0x80808080
    af98:	bne.n	afe0 <strncmp+0x6c>
    af9a:	cmp	r2, #3
    af9c:	bls.n	afe4 <strncmp+0x70>
    af9e:	ldr	r4, [r0, #0]
    afa0:	mov	r1, r3
    afa2:	ldr.w	r5, [r3], #4
    afa6:	sub.w	lr, r4, #16843009	; 0x1010101
    afaa:	cmp	r4, r5
    afac:	mov	ip, r0
    afae:	bic.w	lr, lr, r4
    afb2:	add.w	r0, r0, #4
    afb6:	beq.n	af8c <strncmp+0x18>
    afb8:	ldrb.w	r0, [ip]
    afbc:	ldrb	r4, [r1, #0]
    afbe:	cmp	r0, r4
    afc0:	bne.n	affa <strncmp+0x86>
    afc2:	mov	lr, ip
    afc4:	cbz	r0, afe2 <strncmp+0x6e>
    afc6:	ldrb.w	r0, [lr, #1]!
    afca:	ldrb.w	r4, [r1, #1]!
    afce:	sub.w	r3, r2, lr
    afd2:	cmp	r0, r4
    afd4:	add.w	r3, r3, #4294967295
    afd8:	bne.n	affa <strncmp+0x86>
    afda:	adds.w	r3, ip, r3
    afde:	bne.n	afc4 <strncmp+0x50>
    afe0:	movs	r0, #0
    afe2:	pop	{r4, r5, pc}
    afe4:	ldrb.w	r0, [ip]
    afe8:	ldrb	r4, [r1, #0]
    afea:	cmp	r4, r0
    afec:	bne.n	affa <strncmp+0x86>
    afee:	cmp	r2, #1
    aff0:	beq.n	afe0 <strncmp+0x6c>
    aff2:	mov	lr, ip
    aff4:	b.n	afc4 <strncmp+0x50>
    aff6:	mov	r0, r2
    aff8:	bx	lr
    affa:	subs	r0, r0, r4
    affc:	pop	{r4, r5, pc}
    affe:	nop

0000b000 <strncpy>:
    b000:	orr.w	r3, r0, r1
    b004:	lsls	r3, r3, #30
    b006:	push	{r4, r5, lr}
    b008:	bne.n	b00e <strncpy+0xe>
    b00a:	cmp	r2, #3
    b00c:	bhi.n	b02e <strncpy+0x2e>
    b00e:	mov	ip, r0
    b010:	add.w	lr, r1, #4294967295
    b014:	b.n	b026 <strncpy+0x26>
    b016:	ldrb.w	r1, [lr, #1]!
    b01a:	strb.w	r1, [r3], #1
    b01e:	subs	r4, r2, #1
    b020:	cbz	r1, b054 <strncpy+0x54>
    b022:	mov	ip, r3
    b024:	mov	r2, r4
    b026:	mov	r3, ip
    b028:	cmp	r2, #0
    b02a:	bne.n	b016 <strncpy+0x16>
    b02c:	pop	{r4, r5, pc}
    b02e:	mov	r3, r1
    b030:	mov	ip, r0
    b032:	mov	r1, r3
    b034:	ldr.w	r5, [r3], #4
    b038:	sub.w	r4, r5, #16843009	; 0x1010101
    b03c:	bic.w	r4, r4, r5
    b040:	tst.w	r4, #2155905152	; 0x80808080
    b044:	bne.n	b010 <strncpy+0x10>
    b046:	subs	r2, #4
    b048:	cmp	r2, #3
    b04a:	str.w	r5, [ip], #4
    b04e:	mov	r1, r3
    b050:	bhi.n	b032 <strncpy+0x32>
    b052:	b.n	b010 <strncpy+0x10>
    b054:	add	ip, r2
    b056:	cmp	r4, #0
    b058:	beq.n	b02c <strncpy+0x2c>
    b05a:	strb.w	r1, [r3], #1
    b05e:	cmp	r3, ip
    b060:	bne.n	b05a <strncpy+0x5a>
    b062:	pop	{r4, r5, pc}

0000b064 <__locale_mb_cur_max>:
    b064:	ldr	r3, [pc, #4]	; (b06c <__locale_mb_cur_max+0x8>)
    b066:	ldrb.w	r0, [r3, #296]	; 0x128
    b06a:	bx	lr
    b06c:	.word	0x20001bf4

0000b070 <_close_r>:
    b070:	push	{r3, r4, r5, lr}
    b072:	ldr	r5, [pc, #28]	; (b090 <_close_r+0x20>)
    b074:	movs	r2, #0
    b076:	mov	r4, r0
    b078:	mov	r0, r1
    b07a:	str	r2, [r5, #0]
    b07c:	bl	8aec <_close>
    b080:	adds	r3, r0, #1
    b082:	beq.n	b086 <_close_r+0x16>
    b084:	pop	{r3, r4, r5, pc}
    b086:	ldr	r3, [r5, #0]
    b088:	cmp	r3, #0
    b08a:	beq.n	b084 <_close_r+0x14>
    b08c:	str	r3, [r4, #0]
    b08e:	pop	{r3, r4, r5, pc}
    b090:	.word	0x20006cdc

0000b094 <_lseek_r>:
    b094:	push	{r3, r4, r5, lr}
    b096:	mov	r4, r1
    b098:	ldr	r5, [pc, #32]	; (b0bc <_lseek_r+0x28>)
    b09a:	mov	ip, r0
    b09c:	mov	r1, r2
    b09e:	mov	r0, r4
    b0a0:	mov	r2, r3
    b0a2:	movs	r3, #0
    b0a4:	str	r3, [r5, #0]
    b0a6:	mov	r4, ip
    b0a8:	bl	8b00 <_lseek>
    b0ac:	adds	r3, r0, #1
    b0ae:	beq.n	b0b2 <_lseek_r+0x1e>
    b0b0:	pop	{r3, r4, r5, pc}
    b0b2:	ldr	r3, [r5, #0]
    b0b4:	cmp	r3, #0
    b0b6:	beq.n	b0b0 <_lseek_r+0x1c>
    b0b8:	str	r3, [r4, #0]
    b0ba:	pop	{r3, r4, r5, pc}
    b0bc:	.word	0x20006cdc

0000b0c0 <_read_r>:
    b0c0:	push	{r3, r4, r5, lr}
    b0c2:	mov	r4, r1
    b0c4:	ldr	r5, [pc, #32]	; (b0e8 <_read_r+0x28>)
    b0c6:	mov	ip, r0
    b0c8:	mov	r1, r2
    b0ca:	mov	r0, r4
    b0cc:	mov	r2, r3
    b0ce:	movs	r3, #0
    b0d0:	str	r3, [r5, #0]
    b0d2:	mov	r4, ip
    b0d4:	bl	8ae8 <_read>
    b0d8:	adds	r3, r0, #1
    b0da:	beq.n	b0de <_read_r+0x1e>
    b0dc:	pop	{r3, r4, r5, pc}
    b0de:	ldr	r3, [r5, #0]
    b0e0:	cmp	r3, #0
    b0e2:	beq.n	b0dc <_read_r+0x1c>
    b0e4:	str	r3, [r4, #0]
    b0e6:	pop	{r3, r4, r5, pc}
    b0e8:	.word	0x20006cdc

0000b0ec <_sbrk_r>:
    b0ec:	push	{r3, r4, r5, lr}
    b0ee:	ldr	r5, [pc, #28]	; (b10c <_sbrk_r+0x20>)
    b0f0:	movs	r2, #0
    b0f2:	mov	r4, r0
    b0f4:	mov	r0, r1
    b0f6:	str	r2, [r5, #0]
    b0f8:	bl	8abc <_sbrk>
    b0fc:	adds	r3, r0, #1
    b0fe:	beq.n	b102 <_sbrk_r+0x16>
    b100:	pop	{r3, r4, r5, pc}
    b102:	ldr	r3, [r5, #0]
    b104:	cmp	r3, #0
    b106:	beq.n	b100 <_sbrk_r+0x14>
    b108:	str	r3, [r4, #0]
    b10a:	pop	{r3, r4, r5, pc}
    b10c:	.word	0x20006cdc

0000b110 <_write_r>:
    b110:	push	{r3, r4, r5, lr}
    b112:	mov	r4, r1
    b114:	ldr	r5, [pc, #32]	; (b138 <_write_r+0x28>)
    b116:	mov	ip, r0
    b118:	mov	r1, r2
    b11a:	mov	r0, r4
    b11c:	mov	r2, r3
    b11e:	movs	r3, #0
    b120:	str	r3, [r5, #0]
    b122:	mov	r4, ip
    b124:	bl	9eb4 <_write>
    b128:	adds	r3, r0, #1
    b12a:	beq.n	b12e <_write_r+0x1e>
    b12c:	pop	{r3, r4, r5, pc}
    b12e:	ldr	r3, [r5, #0]
    b130:	cmp	r3, #0
    b132:	beq.n	b12c <_write_r+0x1c>
    b134:	str	r3, [r4, #0]
    b136:	pop	{r3, r4, r5, pc}
    b138:	.word	0x20006cdc

0000b13c <__errno>:
    b13c:	ldr	r3, [pc, #4]	; (b144 <__errno+0x8>)
    b13e:	ldr	r0, [r3, #0]
    b140:	bx	lr
    b142:	nop
    b144:	.word	0x2000217c

0000b148 <__libc_init_array>:
    b148:	push	{r4, r5, r6, lr}
    b14a:	ldr	r6, [pc, #52]	; (b180 <__libc_init_array+0x38>)
    b14c:	ldr	r5, [pc, #52]	; (b184 <__libc_init_array+0x3c>)
    b14e:	subs	r6, r6, r5
    b150:	asrs	r6, r6, #2
    b152:	beq.n	b162 <__libc_init_array+0x1a>
    b154:	movs	r4, #0
    b156:	ldr.w	r3, [r5], #4
    b15a:	adds	r4, #1
    b15c:	blx	r3
    b15e:	cmp	r6, r4
    b160:	bne.n	b156 <__libc_init_array+0xe>
    b162:	ldr	r6, [pc, #36]	; (b188 <__libc_init_array+0x40>)
    b164:	ldr	r5, [pc, #36]	; (b18c <__libc_init_array+0x44>)
    b166:	subs	r6, r6, r5
    b168:	bl	104d8 <___init_veneer>
    b16c:	asrs	r6, r6, #2
    b16e:	beq.n	b17e <__libc_init_array+0x36>
    b170:	movs	r4, #0
    b172:	ldr.w	r3, [r5], #4
    b176:	adds	r4, #1
    b178:	blx	r3
    b17a:	cmp	r6, r4
    b17c:	bne.n	b172 <__libc_init_array+0x2a>
    b17e:	pop	{r4, r5, r6, pc}
    b180:	.word	0x600023f0
    b184:	.word	0x600023f0
    b188:	.word	0x60002404
    b18c:	.word	0x600023f0

0000b190 <__retarget_lock_init_recursive>:
    b190:	bx	lr
    b192:	nop

0000b194 <__retarget_lock_close_recursive>:
    b194:	bx	lr
    b196:	nop

0000b198 <__retarget_lock_acquire_recursive>:
    b198:	bx	lr
    b19a:	nop

0000b19c <__retarget_lock_release_recursive>:
    b19c:	bx	lr
    b19e:	nop

0000b1a0 <memchr>:
    b1a0:	and.w	r1, r1, #255	; 0xff
    b1a4:	cmp	r2, #16
    b1a6:	blt.n	b200 <memchr+0x60>
    b1a8:	tst.w	r0, #7
    b1ac:	beq.n	b1c0 <memchr+0x20>
    b1ae:	ldrb.w	r3, [r0], #1
    b1b2:	subs	r2, #1
    b1b4:	cmp	r3, r1
    b1b6:	beq.n	b214 <memchr+0x74>
    b1b8:	tst.w	r0, #7
    b1bc:	cbz	r2, b210 <memchr+0x70>
    b1be:	bne.n	b1ae <memchr+0xe>
    b1c0:	push	{r4, r5, r6, r7}
    b1c2:	orr.w	r1, r1, r1, lsl #8
    b1c6:	orr.w	r1, r1, r1, lsl #16
    b1ca:	bic.w	r4, r2, #7
    b1ce:	mvns.w	r7, #0
    b1d2:	movs	r3, #0
    b1d4:	ldrd	r5, r6, [r0], #8
    b1d8:	subs	r4, #8
    b1da:	eor.w	r5, r5, r1
    b1de:	eor.w	r6, r6, r1
    b1e2:	uadd8	r5, r5, r7
    b1e6:	sel	r5, r3, r7
    b1ea:	uadd8	r6, r6, r7
    b1ee:	sel	r6, r5, r7
    b1f2:	cbnz	r6, b218 <memchr+0x78>
    b1f4:	bne.n	b1d4 <memchr+0x34>
    b1f6:	pop	{r4, r5, r6, r7}
    b1f8:	and.w	r1, r1, #255	; 0xff
    b1fc:	and.w	r2, r2, #7
    b200:	cbz	r2, b210 <memchr+0x70>
    b202:	ldrb.w	r3, [r0], #1
    b206:	subs	r2, #1
    b208:	eor.w	r3, r3, r1
    b20c:	cbz	r3, b214 <memchr+0x74>
    b20e:	bne.n	b202 <memchr+0x62>
    b210:	movs	r0, #0
    b212:	bx	lr
    b214:	subs	r0, #1
    b216:	bx	lr
    b218:	cmp	r5, #0
    b21a:	itte	eq
    b21c:	moveq	r5, r6
    b21e:	subeq	r0, #3
    b220:	subne	r0, #7
    b222:	tst.w	r5, #1
    b226:	bne.n	b238 <memchr+0x98>
    b228:	adds	r0, #1
    b22a:	tst.w	r5, #256	; 0x100
    b22e:	ittt	eq
    b230:	addeq	r0, #1
    b232:	tsteq.w	r5, #98304	; 0x18000
    b236:	addeq	r0, #1
    b238:	pop	{r4, r5, r6, r7}
    b23a:	subs	r0, #1
    b23c:	bx	lr
    b23e:	nop

0000b240 <strlen>:
    b240:	pld	[r0]
    b244:	strd	r4, r5, [sp, #-8]!
    b248:	bic.w	r1, r0, #7
    b24c:	mvn.w	ip, #0
    b250:	ands.w	r4, r0, #7
    b254:	pld	[r1, #32]
    b258:	bne.w	b2ee <strlen+0xae>
    b25c:	mov.w	r4, #0
    b260:	mvn.w	r0, #7
    b264:	ldrd	r2, r3, [r1]
    b268:	pld	[r1, #64]	; 0x40
    b26c:	add.w	r0, r0, #8
    b270:	uadd8	r2, r2, ip
    b274:	sel	r2, r4, ip
    b278:	uadd8	r3, r3, ip
    b27c:	sel	r3, r2, ip
    b280:	cbnz	r3, b2d6 <strlen+0x96>
    b282:	ldrd	r2, r3, [r1, #8]
    b286:	uadd8	r2, r2, ip
    b28a:	add.w	r0, r0, #8
    b28e:	sel	r2, r4, ip
    b292:	uadd8	r3, r3, ip
    b296:	sel	r3, r2, ip
    b29a:	cbnz	r3, b2d6 <strlen+0x96>
    b29c:	ldrd	r2, r3, [r1, #16]
    b2a0:	uadd8	r2, r2, ip
    b2a4:	add.w	r0, r0, #8
    b2a8:	sel	r2, r4, ip
    b2ac:	uadd8	r3, r3, ip
    b2b0:	sel	r3, r2, ip
    b2b4:	cbnz	r3, b2d6 <strlen+0x96>
    b2b6:	ldrd	r2, r3, [r1, #24]
    b2ba:	add.w	r1, r1, #32
    b2be:	uadd8	r2, r2, ip
    b2c2:	add.w	r0, r0, #8
    b2c6:	sel	r2, r4, ip
    b2ca:	uadd8	r3, r3, ip
    b2ce:	sel	r3, r2, ip
    b2d2:	cmp	r3, #0
    b2d4:	beq.n	b264 <strlen+0x24>
    b2d6:	cmp	r2, #0
    b2d8:	itt	eq
    b2da:	addeq	r0, #4
    b2dc:	moveq	r2, r3
    b2de:	rev	r2, r2
    b2e0:	clz	r2, r2
    b2e4:	ldrd	r4, r5, [sp], #8
    b2e8:	add.w	r0, r0, r2, lsr #3
    b2ec:	bx	lr
    b2ee:	ldrd	r2, r3, [r1]
    b2f2:	and.w	r5, r4, #3
    b2f6:	rsb	r0, r4, #0
    b2fa:	mov.w	r5, r5, lsl #3
    b2fe:	tst.w	r4, #4
    b302:	pld	[r1, #64]	; 0x40
    b306:	lsl.w	r5, ip, r5
    b30a:	orn	r2, r2, r5
    b30e:	itt	ne
    b310:	ornne	r3, r3, r5
    b314:	movne	r2, ip
    b316:	mov.w	r4, #0
    b31a:	b.n	b270 <strlen+0x30>

0000b31c <__register_exitproc>:
    b31c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b320:	ldr.w	sl, [pc, #124]	; b3a0 <__register_exitproc+0x84>
    b324:	mov	r6, r0
    b326:	ldr.w	r0, [sl]
    b32a:	mov	r8, r3
    b32c:	mov	r7, r1
    b32e:	mov	r9, r2
    b330:	bl	b198 <__retarget_lock_acquire_recursive>
    b334:	ldr	r3, [pc, #96]	; (b398 <__register_exitproc+0x7c>)
    b336:	ldr	r4, [r3, #0]
    b338:	cbz	r4, b384 <__register_exitproc+0x68>
    b33a:	ldr	r5, [r4, #4]
    b33c:	cmp	r5, #31
    b33e:	bgt.n	b38a <__register_exitproc+0x6e>
    b340:	cbnz	r6, b35a <__register_exitproc+0x3e>
    b342:	adds	r3, r5, #1
    b344:	adds	r5, #2
    b346:	ldr.w	r0, [sl]
    b34a:	str	r3, [r4, #4]
    b34c:	str.w	r7, [r4, r5, lsl #2]
    b350:	bl	b19c <__retarget_lock_release_recursive>
    b354:	movs	r0, #0
    b356:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b35a:	add.w	r1, r4, r5, lsl #2
    b35e:	movs	r3, #1
    b360:	str.w	r9, [r1, #136]	; 0x88
    b364:	ldr.w	r2, [r4, #392]	; 0x188
    b368:	lsls	r3, r5
    b36a:	orrs	r2, r3
    b36c:	cmp	r6, #2
    b36e:	str.w	r2, [r4, #392]	; 0x188
    b372:	str.w	r8, [r1, #264]	; 0x108
    b376:	bne.n	b342 <__register_exitproc+0x26>
    b378:	ldr.w	r2, [r4, #396]	; 0x18c
    b37c:	orrs	r2, r3
    b37e:	str.w	r2, [r4, #396]	; 0x18c
    b382:	b.n	b342 <__register_exitproc+0x26>
    b384:	ldr	r4, [pc, #20]	; (b39c <__register_exitproc+0x80>)
    b386:	str	r4, [r3, #0]
    b388:	b.n	b33a <__register_exitproc+0x1e>
    b38a:	ldr.w	r0, [sl]
    b38e:	bl	b19c <__retarget_lock_release_recursive>
    b392:	mov.w	r0, #4294967295
    b396:	b.n	b356 <__register_exitproc+0x3a>
    b398:	.word	0x200069a8
    b39c:	.word	0x200069ac
    b3a0:	.word	0x20001be8

0000b3a4 <_malloc_trim_r>:
    b3a4:	push	{r3, r4, r5, r6, r7, lr}
    b3a6:	ldr	r7, [pc, #144]	; (b438 <_malloc_trim_r+0x94>)
    b3a8:	mov	r4, r1
    b3aa:	mov	r6, r0
    b3ac:	bl	a700 <__malloc_lock>
    b3b0:	ldr	r3, [r7, #8]
    b3b2:	ldr	r5, [r3, #4]
    b3b4:	rsb	r1, r4, #4064	; 0xfe0
    b3b8:	adds	r1, #15
    b3ba:	bic.w	r5, r5, #3
    b3be:	adds	r3, r1, r5
    b3c0:	bic.w	r3, r3, #4080	; 0xff0
    b3c4:	bic.w	r3, r3, #15
    b3c8:	sub.w	r4, r3, #4096	; 0x1000
    b3cc:	cmp.w	r4, #4096	; 0x1000
    b3d0:	blt.n	b3e2 <_malloc_trim_r+0x3e>
    b3d2:	movs	r1, #0
    b3d4:	mov	r0, r6
    b3d6:	bl	b0ec <_sbrk_r>
    b3da:	ldr	r3, [r7, #8]
    b3dc:	add	r3, r5
    b3de:	cmp	r0, r3
    b3e0:	beq.n	b3ec <_malloc_trim_r+0x48>
    b3e2:	mov	r0, r6
    b3e4:	bl	a70c <__malloc_unlock>
    b3e8:	movs	r0, #0
    b3ea:	pop	{r3, r4, r5, r6, r7, pc}
    b3ec:	negs	r1, r4
    b3ee:	mov	r0, r6
    b3f0:	bl	b0ec <_sbrk_r>
    b3f4:	adds	r0, #1
    b3f6:	beq.n	b414 <_malloc_trim_r+0x70>
    b3f8:	ldr	r2, [pc, #64]	; (b43c <_malloc_trim_r+0x98>)
    b3fa:	ldr	r3, [r7, #8]
    b3fc:	subs	r5, r5, r4
    b3fe:	orr.w	r5, r5, #1
    b402:	str	r5, [r3, #4]
    b404:	ldr	r3, [r2, #0]
    b406:	mov	r0, r6
    b408:	subs	r3, r3, r4
    b40a:	str	r3, [r2, #0]
    b40c:	bl	a70c <__malloc_unlock>
    b410:	movs	r0, #1
    b412:	pop	{r3, r4, r5, r6, r7, pc}
    b414:	movs	r1, #0
    b416:	mov	r0, r6
    b418:	bl	b0ec <_sbrk_r>
    b41c:	ldr	r2, [r7, #8]
    b41e:	subs	r3, r0, r2
    b420:	cmp	r3, #15
    b422:	ble.n	b3e2 <_malloc_trim_r+0x3e>
    b424:	orr.w	r3, r3, #1
    b428:	str	r3, [r2, #4]
    b42a:	ldr	r3, [pc, #20]	; (b440 <_malloc_trim_r+0x9c>)
    b42c:	ldr	r1, [pc, #12]	; (b43c <_malloc_trim_r+0x98>)
    b42e:	ldr	r3, [r3, #0]
    b430:	subs	r0, r0, r3
    b432:	str	r0, [r1, #0]
    b434:	b.n	b3e2 <_malloc_trim_r+0x3e>
    b436:	nop
    b438:	.word	0x20001d60
    b43c:	.word	0x20006b48
    b440:	.word	0x20002168

0000b444 <_free_r>:
    b444:	cmp	r1, #0
    b446:	beq.n	b50c <_free_r+0xc8>
    b448:	push	{r3, r4, r5, r6, r7, lr}
    b44a:	mov	r4, r1
    b44c:	mov	r6, r0
    b44e:	bl	a700 <__malloc_lock>
    b452:	ldr.w	r2, [r4, #-4]
    b456:	ldr	r7, [pc, #492]	; (b644 <_free_r+0x200>)
    b458:	sub.w	r5, r4, #8
    b45c:	bic.w	r1, r2, #1
    b460:	add.w	ip, r5, r1
    b464:	ldr	r0, [r7, #8]
    b466:	ldr.w	r3, [ip, #4]
    b46a:	cmp	r0, ip
    b46c:	bic.w	r3, r3, #3
    b470:	beq.w	b58a <_free_r+0x146>
    b474:	lsls	r2, r2, #31
    b476:	str.w	r3, [ip, #4]
    b47a:	bmi.n	b4e2 <_free_r+0x9e>
    b47c:	ldr.w	r2, [r4, #-8]
    b480:	subs	r5, r5, r2
    b482:	add	r1, r2
    b484:	ldr	r2, [r5, #8]
    b486:	add.w	r0, r7, #8
    b48a:	cmp	r2, r0
    b48c:	beq.n	b564 <_free_r+0x120>
    b48e:	add.w	r4, ip, r3
    b492:	ldr.w	lr, [r4, #4]
    b496:	ldr	r4, [r5, #12]
    b498:	str	r4, [r2, #12]
    b49a:	tst.w	lr, #1
    b49e:	str	r2, [r4, #8]
    b4a0:	beq.w	b5d2 <_free_r+0x18e>
    b4a4:	orr.w	r3, r1, #1
    b4a8:	str	r3, [r5, #4]
    b4aa:	str.w	r1, [ip]
    b4ae:	cmp.w	r1, #512	; 0x200
    b4b2:	bcs.n	b520 <_free_r+0xdc>
    b4b4:	ldr	r0, [r7, #4]
    b4b6:	lsrs	r3, r1, #3
    b4b8:	movs	r2, #1
    b4ba:	lsrs	r1, r1, #5
    b4bc:	adds	r3, #1
    b4be:	lsls	r2, r1
    b4c0:	orrs	r2, r0
    b4c2:	ldr.w	r1, [r7, r3, lsl #3]
    b4c6:	str	r2, [r7, #4]
    b4c8:	add.w	r2, r7, r3, lsl #3
    b4cc:	subs	r2, #8
    b4ce:	strd	r1, r2, [r5, #8]
    b4d2:	str.w	r5, [r7, r3, lsl #3]
    b4d6:	str	r5, [r1, #12]
    b4d8:	mov	r0, r6
    b4da:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    b4de:	b.w	a70c <__malloc_unlock>
    b4e2:	add.w	r2, ip, r3
    b4e6:	ldr	r2, [r2, #4]
    b4e8:	lsls	r0, r2, #31
    b4ea:	bmi.n	b50e <_free_r+0xca>
    b4ec:	add	r1, r3
    b4ee:	add.w	r0, r7, #8
    b4f2:	ldr.w	r3, [ip, #8]
    b4f6:	cmp	r3, r0
    b4f8:	beq.n	b5e2 <_free_r+0x19e>
    b4fa:	ldr.w	r2, [ip, #12]
    b4fe:	str	r2, [r3, #12]
    b500:	str	r3, [r2, #8]
    b502:	orr.w	r3, r1, #1
    b506:	str	r3, [r5, #4]
    b508:	str	r1, [r5, r1]
    b50a:	b.n	b4ae <_free_r+0x6a>
    b50c:	bx	lr
    b50e:	orr.w	r3, r1, #1
    b512:	cmp.w	r1, #512	; 0x200
    b516:	str.w	r3, [r4, #-4]
    b51a:	str.w	r1, [ip]
    b51e:	bcc.n	b4b4 <_free_r+0x70>
    b520:	cmp.w	r1, #2560	; 0xa00
    b524:	mov.w	r3, r1, lsr #9
    b528:	bcs.n	b5bc <_free_r+0x178>
    b52a:	lsrs	r3, r1, #6
    b52c:	add.w	r0, r3, #57	; 0x39
    b530:	add.w	r2, r3, #56	; 0x38
    b534:	lsls	r3, r0, #3
    b536:	adds	r0, r7, r3
    b538:	ldr	r3, [r7, r3]
    b53a:	subs	r0, #8
    b53c:	cmp	r0, r3
    b53e:	beq.n	b5f4 <_free_r+0x1b0>
    b540:	ldr	r2, [r3, #4]
    b542:	bic.w	r2, r2, #3
    b546:	cmp	r2, r1
    b548:	bls.n	b550 <_free_r+0x10c>
    b54a:	ldr	r3, [r3, #8]
    b54c:	cmp	r0, r3
    b54e:	bne.n	b540 <_free_r+0xfc>
    b550:	ldr	r0, [r3, #12]
    b552:	strd	r3, r0, [r5, #8]
    b556:	str	r5, [r0, #8]
    b558:	str	r5, [r3, #12]
    b55a:	mov	r0, r6
    b55c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    b560:	b.w	a70c <__malloc_unlock>
    b564:	add.w	r2, ip, r3
    b568:	ldr	r2, [r2, #4]
    b56a:	lsls	r2, r2, #31
    b56c:	bmi.n	b636 <_free_r+0x1f2>
    b56e:	add	r3, r1
    b570:	ldrd	r1, r2, [ip, #8]
    b574:	str	r2, [r1, #12]
    b576:	str	r1, [r2, #8]
    b578:	orr.w	r2, r3, #1
    b57c:	str	r2, [r5, #4]
    b57e:	mov	r0, r6
    b580:	str	r3, [r5, r3]
    b582:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    b586:	b.w	a70c <__malloc_unlock>
    b58a:	add	r3, r1
    b58c:	lsls	r1, r2, #31
    b58e:	bmi.n	b5a0 <_free_r+0x15c>
    b590:	ldr.w	r2, [r4, #-8]
    b594:	subs	r5, r5, r2
    b596:	add	r3, r2
    b598:	ldrd	r1, r2, [r5, #8]
    b59c:	str	r2, [r1, #12]
    b59e:	str	r1, [r2, #8]
    b5a0:	orr.w	r2, r3, #1
    b5a4:	str	r2, [r5, #4]
    b5a6:	ldr	r2, [pc, #160]	; (b648 <_free_r+0x204>)
    b5a8:	str	r5, [r7, #8]
    b5aa:	ldr	r2, [r2, #0]
    b5ac:	cmp	r2, r3
    b5ae:	bhi.n	b4d8 <_free_r+0x94>
    b5b0:	ldr	r3, [pc, #152]	; (b64c <_free_r+0x208>)
    b5b2:	mov	r0, r6
    b5b4:	ldr	r1, [r3, #0]
    b5b6:	bl	b3a4 <_malloc_trim_r>
    b5ba:	b.n	b4d8 <_free_r+0x94>
    b5bc:	cmp	r3, #20
    b5be:	bls.n	b5d6 <_free_r+0x192>
    b5c0:	cmp	r3, #84	; 0x54
    b5c2:	bhi.n	b604 <_free_r+0x1c0>
    b5c4:	lsrs	r3, r1, #12
    b5c6:	add.w	r0, r3, #111	; 0x6f
    b5ca:	add.w	r2, r3, #110	; 0x6e
    b5ce:	lsls	r3, r0, #3
    b5d0:	b.n	b536 <_free_r+0xf2>
    b5d2:	add	r1, r3
    b5d4:	b.n	b4f2 <_free_r+0xae>
    b5d6:	add.w	r0, r3, #92	; 0x5c
    b5da:	add.w	r2, r3, #91	; 0x5b
    b5de:	lsls	r3, r0, #3
    b5e0:	b.n	b536 <_free_r+0xf2>
    b5e2:	orr.w	r3, r1, #1
    b5e6:	strd	r5, r5, [r7, #16]
    b5ea:	strd	r0, r0, [r5, #8]
    b5ee:	str	r3, [r5, #4]
    b5f0:	str	r1, [r5, r1]
    b5f2:	b.n	b4d8 <_free_r+0x94>
    b5f4:	ldr	r1, [r7, #4]
    b5f6:	asrs	r2, r2, #2
    b5f8:	movs	r4, #1
    b5fa:	lsl.w	r2, r4, r2
    b5fe:	orrs	r2, r1
    b600:	str	r2, [r7, #4]
    b602:	b.n	b552 <_free_r+0x10e>
    b604:	cmp.w	r3, #340	; 0x154
    b608:	bhi.n	b618 <_free_r+0x1d4>
    b60a:	lsrs	r3, r1, #15
    b60c:	add.w	r0, r3, #120	; 0x78
    b610:	add.w	r2, r3, #119	; 0x77
    b614:	lsls	r3, r0, #3
    b616:	b.n	b536 <_free_r+0xf2>
    b618:	movw	r2, #1364	; 0x554
    b61c:	cmp	r3, r2
    b61e:	bhi.n	b62e <_free_r+0x1ea>
    b620:	lsrs	r3, r1, #18
    b622:	add.w	r0, r3, #125	; 0x7d
    b626:	add.w	r2, r3, #124	; 0x7c
    b62a:	lsls	r3, r0, #3
    b62c:	b.n	b536 <_free_r+0xf2>
    b62e:	mov.w	r3, #1016	; 0x3f8
    b632:	movs	r2, #126	; 0x7e
    b634:	b.n	b536 <_free_r+0xf2>
    b636:	orr.w	r3, r1, #1
    b63a:	str	r3, [r5, #4]
    b63c:	str.w	r1, [ip]
    b640:	b.n	b4d8 <_free_r+0x94>
    b642:	nop
    b644:	.word	0x20001d60
    b648:	.word	0x2000216c
    b64c:	.word	0x20006b78

0000b650 <__ascii_mbtowc>:
    b650:	sub	sp, #8
    b652:	cbz	r1, b668 <__ascii_mbtowc+0x18>
    b654:	cbz	r2, b66e <__ascii_mbtowc+0x1e>
    b656:	cbz	r3, b674 <__ascii_mbtowc+0x24>
    b658:	ldrb	r3, [r2, #0]
    b65a:	str	r3, [r1, #0]
    b65c:	ldrb	r2, [r2, #0]
    b65e:	subs	r0, r2, #0
    b660:	it	ne
    b662:	movne	r0, #1
    b664:	add	sp, #8
    b666:	bx	lr
    b668:	add	r1, sp, #4
    b66a:	cmp	r2, #0
    b66c:	bne.n	b656 <__ascii_mbtowc+0x6>
    b66e:	mov	r0, r2
    b670:	add	sp, #8
    b672:	bx	lr
    b674:	mvn.w	r0, #1
    b678:	b.n	b664 <__ascii_mbtowc+0x14>
    b67a:	nop

0000b67c <_Balloc>:
    b67c:	ldr	r3, [r0, #68]	; 0x44
    b67e:	push	{r4, r5, r6, lr}
    b680:	mov	r5, r0
    b682:	mov	r4, r1
    b684:	cbz	r3, b69a <_Balloc+0x1e>
    b686:	ldr.w	r0, [r3, r4, lsl #2]
    b68a:	cbz	r0, b6ae <_Balloc+0x32>
    b68c:	ldr	r2, [r0, #0]
    b68e:	str.w	r2, [r3, r4, lsl #2]
    b692:	movs	r3, #0
    b694:	strd	r3, r3, [r0, #12]
    b698:	pop	{r4, r5, r6, pc}
    b69a:	movs	r2, #33	; 0x21
    b69c:	movs	r1, #4
    b69e:	bl	dc60 <_calloc_r>
    b6a2:	mov	r3, r0
    b6a4:	str	r0, [r5, #68]	; 0x44
    b6a6:	cmp	r0, #0
    b6a8:	bne.n	b686 <_Balloc+0xa>
    b6aa:	movs	r0, #0
    b6ac:	pop	{r4, r5, r6, pc}
    b6ae:	movs	r1, #1
    b6b0:	lsl.w	r6, r1, r4
    b6b4:	adds	r2, r6, #5
    b6b6:	lsls	r2, r2, #2
    b6b8:	mov	r0, r5
    b6ba:	bl	dc60 <_calloc_r>
    b6be:	cmp	r0, #0
    b6c0:	beq.n	b6aa <_Balloc+0x2e>
    b6c2:	strd	r4, r6, [r0, #4]
    b6c6:	b.n	b692 <_Balloc+0x16>

0000b6c8 <_Bfree>:
    b6c8:	cbz	r1, b6d8 <_Bfree+0x10>
    b6ca:	ldr	r3, [r0, #68]	; 0x44
    b6cc:	ldr	r2, [r1, #4]
    b6ce:	ldr.w	r0, [r3, r2, lsl #2]
    b6d2:	str	r0, [r1, #0]
    b6d4:	str.w	r1, [r3, r2, lsl #2]
    b6d8:	bx	lr
    b6da:	nop

0000b6dc <__multadd>:
    b6dc:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b6e0:	ldr	r6, [r1, #16]
    b6e2:	mov	r8, r0
    b6e4:	mov	r7, r1
    b6e6:	mov	r5, r3
    b6e8:	add.w	lr, r1, #20
    b6ec:	movs	r0, #0
    b6ee:	ldr.w	r1, [lr]
    b6f2:	uxth	r4, r1
    b6f4:	mla	r3, r2, r4, r5
    b6f8:	lsrs	r1, r1, #16
    b6fa:	mov.w	ip, r3, lsr #16
    b6fe:	mla	ip, r2, r1, ip
    b702:	adds	r0, #1
    b704:	uxth	r4, r3
    b706:	add.w	r4, r4, ip, lsl #16
    b70a:	cmp	r6, r0
    b70c:	str.w	r4, [lr], #4
    b710:	mov.w	r5, ip, lsr #16
    b714:	bgt.n	b6ee <__multadd+0x12>
    b716:	cbz	r5, b728 <__multadd+0x4c>
    b718:	ldr	r3, [r7, #8]
    b71a:	cmp	r3, r6
    b71c:	ble.n	b72e <__multadd+0x52>
    b71e:	add.w	r3, r7, r6, lsl #2
    b722:	adds	r6, #1
    b724:	str	r5, [r3, #20]
    b726:	str	r6, [r7, #16]
    b728:	mov	r0, r7
    b72a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b72e:	ldr	r1, [r7, #4]
    b730:	mov	r0, r8
    b732:	adds	r1, #1
    b734:	bl	b67c <_Balloc>
    b738:	mov	r4, r0
    b73a:	cbz	r0, b76a <__multadd+0x8e>
    b73c:	ldr	r2, [r7, #16]
    b73e:	adds	r2, #2
    b740:	add.w	r1, r7, #12
    b744:	lsls	r2, r2, #2
    b746:	adds	r0, #12
    b748:	bl	756c <memcpy>
    b74c:	ldr.w	r3, [r8, #68]	; 0x44
    b750:	ldr	r2, [r7, #4]
    b752:	ldr.w	r1, [r3, r2, lsl #2]
    b756:	str	r1, [r7, #0]
    b758:	str.w	r7, [r3, r2, lsl #2]
    b75c:	mov	r7, r4
    b75e:	add.w	r3, r7, r6, lsl #2
    b762:	adds	r6, #1
    b764:	str	r5, [r3, #20]
    b766:	str	r6, [r7, #16]
    b768:	b.n	b728 <__multadd+0x4c>
    b76a:	ldr	r3, [pc, #12]	; (b778 <__multadd+0x9c>)
    b76c:	ldr	r0, [pc, #12]	; (b77c <__multadd+0xa0>)
    b76e:	mov	r2, r4
    b770:	movs	r1, #186	; 0xba
    b772:	bl	dc20 <__assert_func>
    b776:	nop
    b778:	.word	0x200008a4
    b77c:	.word	0x200008b8

0000b780 <__hi0bits>:
    b780:	lsrs	r3, r0, #16
    b782:	lsls	r3, r3, #16
    b784:	cbnz	r3, b7bc <__hi0bits+0x3c>
    b786:	lsls	r0, r0, #16
    b788:	movs	r3, #16
    b78a:	tst.w	r0, #4278190080	; 0xff000000
    b78e:	itt	eq
    b790:	lsleq	r0, r0, #8
    b792:	addeq	r3, #8
    b794:	tst.w	r0, #4026531840	; 0xf0000000
    b798:	itt	eq
    b79a:	lsleq	r0, r0, #4
    b79c:	addeq	r3, #4
    b79e:	tst.w	r0, #3221225472	; 0xc0000000
    b7a2:	itt	eq
    b7a4:	lsleq	r0, r0, #2
    b7a6:	addeq	r3, #2
    b7a8:	cmp	r0, #0
    b7aa:	blt.n	b7b8 <__hi0bits+0x38>
    b7ac:	tst.w	r0, #1073741824	; 0x40000000
    b7b0:	add.w	r3, r3, #1
    b7b4:	it	eq
    b7b6:	moveq	r3, #32
    b7b8:	mov	r0, r3
    b7ba:	bx	lr
    b7bc:	movs	r3, #0
    b7be:	b.n	b78a <__hi0bits+0xa>

0000b7c0 <__lo0bits>:
    b7c0:	ldr	r3, [r0, #0]
    b7c2:	ands.w	r2, r3, #7
    b7c6:	beq.n	b7da <__lo0bits+0x1a>
    b7c8:	lsls	r1, r3, #31
    b7ca:	bmi.n	b80c <__lo0bits+0x4c>
    b7cc:	lsls	r2, r3, #30
    b7ce:	bpl.n	b816 <__lo0bits+0x56>
    b7d0:	lsrs	r3, r3, #1
    b7d2:	str	r3, [r0, #0]
    b7d4:	movs	r2, #1
    b7d6:	mov	r0, r2
    b7d8:	bx	lr
    b7da:	uxth	r1, r3
    b7dc:	cbnz	r1, b7e2 <__lo0bits+0x22>
    b7de:	lsrs	r3, r3, #16
    b7e0:	movs	r2, #16
    b7e2:	uxtb	r1, r3
    b7e4:	cbnz	r1, b7ea <__lo0bits+0x2a>
    b7e6:	adds	r2, #8
    b7e8:	lsrs	r3, r3, #8
    b7ea:	lsls	r1, r3, #28
    b7ec:	itt	eq
    b7ee:	lsreq	r3, r3, #4
    b7f0:	addeq	r2, #4
    b7f2:	lsls	r1, r3, #30
    b7f4:	itt	eq
    b7f6:	lsreq	r3, r3, #2
    b7f8:	addeq	r2, #2
    b7fa:	lsls	r1, r3, #31
    b7fc:	bmi.n	b806 <__lo0bits+0x46>
    b7fe:	lsrs	r3, r3, #1
    b800:	add.w	r2, r2, #1
    b804:	beq.n	b812 <__lo0bits+0x52>
    b806:	str	r3, [r0, #0]
    b808:	mov	r0, r2
    b80a:	bx	lr
    b80c:	movs	r2, #0
    b80e:	mov	r0, r2
    b810:	bx	lr
    b812:	movs	r2, #32
    b814:	b.n	b7d6 <__lo0bits+0x16>
    b816:	lsrs	r3, r3, #2
    b818:	movs	r2, #2
    b81a:	str	r3, [r0, #0]
    b81c:	mov	r0, r2
    b81e:	bx	lr

0000b820 <__i2b>:
    b820:	push	{r3, r4, r5, lr}
    b822:	ldr	r3, [r0, #68]	; 0x44
    b824:	mov	r4, r0
    b826:	mov	r5, r1
    b828:	cbz	r3, b83e <__i2b+0x1e>
    b82a:	ldr	r0, [r3, #4]
    b82c:	cbz	r0, b85c <__i2b+0x3c>
    b82e:	ldr	r2, [r0, #0]
    b830:	str	r2, [r3, #4]
    b832:	movs	r2, #0
    b834:	movs	r3, #1
    b836:	strd	r3, r5, [r0, #16]
    b83a:	str	r2, [r0, #12]
    b83c:	pop	{r3, r4, r5, pc}
    b83e:	movs	r2, #33	; 0x21
    b840:	movs	r1, #4
    b842:	bl	dc60 <_calloc_r>
    b846:	mov	r3, r0
    b848:	str	r0, [r4, #68]	; 0x44
    b84a:	cmp	r0, #0
    b84c:	bne.n	b82a <__i2b+0xa>
    b84e:	ldr	r3, [pc, #36]	; (b874 <__i2b+0x54>)
    b850:	ldr	r0, [pc, #36]	; (b878 <__i2b+0x58>)
    b852:	movs	r2, #0
    b854:	movw	r1, #325	; 0x145
    b858:	bl	dc20 <__assert_func>
    b85c:	movs	r2, #28
    b85e:	movs	r1, #1
    b860:	mov	r0, r4
    b862:	bl	dc60 <_calloc_r>
    b866:	cmp	r0, #0
    b868:	beq.n	b84e <__i2b+0x2e>
    b86a:	movs	r2, #1
    b86c:	movs	r3, #2
    b86e:	strd	r2, r3, [r0, #4]
    b872:	b.n	b832 <__i2b+0x12>
    b874:	.word	0x200008a4
    b878:	.word	0x200008b8

0000b87c <__multiply>:
    b87c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b880:	ldr	r6, [r1, #16]
    b882:	ldr	r5, [r2, #16]
    b884:	cmp	r6, r5
    b886:	sub	sp, #20
    b888:	mov	r8, r1
    b88a:	mov	r4, r2
    b88c:	blt.n	b89a <__multiply+0x1e>
    b88e:	mov	r2, r5
    b890:	mov	r3, r4
    b892:	mov	r5, r6
    b894:	mov	r4, r1
    b896:	mov	r6, r2
    b898:	mov	r8, r3
    b89a:	ldr	r3, [r4, #8]
    b89c:	ldr	r1, [r4, #4]
    b89e:	adds	r7, r5, r6
    b8a0:	cmp	r3, r7
    b8a2:	it	lt
    b8a4:	addlt	r1, #1
    b8a6:	bl	b67c <_Balloc>
    b8aa:	str	r0, [sp, #4]
    b8ac:	cmp	r0, #0
    b8ae:	beq.w	b9c0 <__multiply+0x144>
    b8b2:	ldr	r3, [sp, #4]
    b8b4:	add.w	r9, r3, #20
    b8b8:	add.w	sl, r9, r7, lsl #2
    b8bc:	cmp	r9, sl
    b8be:	bcs.n	b8cc <__multiply+0x50>
    b8c0:	mov	r3, r9
    b8c2:	movs	r2, #0
    b8c4:	str.w	r2, [r3], #4
    b8c8:	cmp	sl, r3
    b8ca:	bhi.n	b8c4 <__multiply+0x48>
    b8cc:	add.w	r8, r8, #20
    b8d0:	add.w	fp, r8, r6, lsl #2
    b8d4:	add.w	r3, r4, #20
    b8d8:	cmp	r8, fp
    b8da:	mov	r2, r3
    b8dc:	add.w	r5, r3, r5, lsl #2
    b8e0:	bcs.n	b9a2 <__multiply+0x126>
    b8e2:	subs	r3, r5, r4
    b8e4:	subs	r3, #21
    b8e6:	bic.w	r3, r3, #3
    b8ea:	adds	r3, #4
    b8ec:	adds	r4, #21
    b8ee:	cmp	r5, r4
    b8f0:	it	cc
    b8f2:	movcc	r3, #4
    b8f4:	strd	sl, r7, [sp, #8]
    b8f8:	mov	ip, r5
    b8fa:	mov	r7, r3
    b8fc:	mov	sl, r2
    b8fe:	b.n	b90c <__multiply+0x90>
    b900:	lsrs	r1, r1, #16
    b902:	bne.n	b958 <__multiply+0xdc>
    b904:	cmp	fp, r8
    b906:	add.w	r9, r9, #4
    b90a:	bls.n	b99e <__multiply+0x122>
    b90c:	ldr.w	r1, [r8], #4
    b910:	uxth	r5, r1
    b912:	cmp	r5, #0
    b914:	beq.n	b900 <__multiply+0x84>
    b916:	mov	r6, sl
    b918:	mov	r4, r9
    b91a:	movs	r3, #0
    b91c:	ldr.w	r1, [r6], #4
    b920:	ldr	r2, [r4, #0]
    b922:	uxth.w	lr, r1
    b926:	uxth	r0, r2
    b928:	lsrs	r1, r1, #16
    b92a:	mla	r0, r5, lr, r0
    b92e:	lsrs	r2, r2, #16
    b930:	add	r3, r0
    b932:	mla	r2, r5, r1, r2
    b936:	add.w	r2, r2, r3, lsr #16
    b93a:	uxth	r3, r3
    b93c:	orr.w	r3, r3, r2, lsl #16
    b940:	cmp	ip, r6
    b942:	str.w	r3, [r4], #4
    b946:	mov.w	r3, r2, lsr #16
    b94a:	bhi.n	b91c <__multiply+0xa0>
    b94c:	str.w	r3, [r9, r7]
    b950:	ldr.w	r1, [r8, #-4]
    b954:	lsrs	r1, r1, #16
    b956:	beq.n	b904 <__multiply+0x88>
    b958:	ldr.w	r3, [r9]
    b95c:	mov	r0, sl
    b95e:	mov	r2, r3
    b960:	mov	r4, r9
    b962:	movs	r6, #0
    b964:	ldrh	r5, [r0, #0]
    b966:	lsrs	r2, r2, #16
    b968:	mla	r2, r1, r5, r2
    b96c:	add	r6, r2
    b96e:	uxth	r3, r3
    b970:	orr.w	r3, r3, r6, lsl #16
    b974:	str.w	r3, [r4], #4
    b978:	ldr.w	r5, [r0], #4
    b97c:	ldr	r2, [r4, #0]
    b97e:	lsrs	r5, r5, #16
    b980:	uxth	r3, r2
    b982:	mla	r3, r1, r5, r3
    b986:	add.w	r3, r3, r6, lsr #16
    b98a:	cmp	ip, r0
    b98c:	mov.w	r6, r3, lsr #16
    b990:	bhi.n	b964 <__multiply+0xe8>
    b992:	cmp	fp, r8
    b994:	str.w	r3, [r9, r7]
    b998:	add.w	r9, r9, #4
    b99c:	bhi.n	b90c <__multiply+0x90>
    b99e:	ldrd	sl, r7, [sp, #8]
    b9a2:	cmp	r7, #0
    b9a4:	bgt.n	b9ac <__multiply+0x130>
    b9a6:	b.n	b9b4 <__multiply+0x138>
    b9a8:	subs	r7, #1
    b9aa:	beq.n	b9b4 <__multiply+0x138>
    b9ac:	ldr.w	r3, [sl, #-4]!
    b9b0:	cmp	r3, #0
    b9b2:	beq.n	b9a8 <__multiply+0x12c>
    b9b4:	ldr	r3, [sp, #4]
    b9b6:	mov	r0, r3
    b9b8:	str	r7, [r3, #16]
    b9ba:	add	sp, #20
    b9bc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b9c0:	ldr	r3, [pc, #12]	; (b9d0 <__multiply+0x154>)
    b9c2:	ldr	r0, [pc, #16]	; (b9d4 <__multiply+0x158>)
    b9c4:	ldr	r2, [sp, #4]
    b9c6:	mov.w	r1, #354	; 0x162
    b9ca:	bl	dc20 <__assert_func>
    b9ce:	nop
    b9d0:	.word	0x200008a4
    b9d4:	.word	0x200008b8

0000b9d8 <__pow5mult>:
    b9d8:	ands.w	r3, r2, #3
    b9dc:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b9e0:	mov	r4, r2
    b9e2:	mov	r6, r0
    b9e4:	bne.n	ba4c <__pow5mult+0x74>
    b9e6:	mov	r5, r1
    b9e8:	asrs	r4, r4, #2
    b9ea:	beq.n	ba2e <__pow5mult+0x56>
    b9ec:	ldr.w	r8, [r6, #64]	; 0x40
    b9f0:	cmp.w	r8, #0
    b9f4:	beq.n	ba5e <__pow5mult+0x86>
    b9f6:	lsls	r3, r4, #31
    b9f8:	mov.w	r7, #0
    b9fc:	bmi.n	ba0e <__pow5mult+0x36>
    b9fe:	asrs	r4, r4, #1
    ba00:	beq.n	ba2e <__pow5mult+0x56>
    ba02:	ldr.w	r0, [r8]
    ba06:	cbz	r0, ba34 <__pow5mult+0x5c>
    ba08:	mov	r8, r0
    ba0a:	lsls	r3, r4, #31
    ba0c:	bpl.n	b9fe <__pow5mult+0x26>
    ba0e:	mov	r2, r8
    ba10:	mov	r1, r5
    ba12:	mov	r0, r6
    ba14:	bl	b87c <__multiply>
    ba18:	cbz	r5, ba48 <__pow5mult+0x70>
    ba1a:	ldr	r1, [r5, #4]
    ba1c:	ldr	r3, [r6, #68]	; 0x44
    ba1e:	asrs	r4, r4, #1
    ba20:	ldr.w	r2, [r3, r1, lsl #2]
    ba24:	str	r2, [r5, #0]
    ba26:	str.w	r5, [r3, r1, lsl #2]
    ba2a:	mov	r5, r0
    ba2c:	bne.n	ba02 <__pow5mult+0x2a>
    ba2e:	mov	r0, r5
    ba30:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ba34:	mov	r2, r8
    ba36:	mov	r1, r8
    ba38:	mov	r0, r6
    ba3a:	bl	b87c <__multiply>
    ba3e:	str.w	r0, [r8]
    ba42:	str	r7, [r0, #0]
    ba44:	mov	r8, r0
    ba46:	b.n	ba0a <__pow5mult+0x32>
    ba48:	mov	r5, r0
    ba4a:	b.n	b9fe <__pow5mult+0x26>
    ba4c:	subs	r3, #1
    ba4e:	ldr	r2, [pc, #60]	; (ba8c <__pow5mult+0xb4>)
    ba50:	ldr.w	r2, [r2, r3, lsl #2]
    ba54:	movs	r3, #0
    ba56:	bl	b6dc <__multadd>
    ba5a:	mov	r5, r0
    ba5c:	b.n	b9e8 <__pow5mult+0x10>
    ba5e:	movs	r1, #1
    ba60:	mov	r0, r6
    ba62:	bl	b67c <_Balloc>
    ba66:	mov	r8, r0
    ba68:	cbz	r0, ba7c <__pow5mult+0xa4>
    ba6a:	movs	r3, #1
    ba6c:	movw	r2, #625	; 0x271
    ba70:	strd	r3, r2, [r0, #16]
    ba74:	movs	r3, #0
    ba76:	str	r0, [r6, #64]	; 0x40
    ba78:	str	r3, [r0, #0]
    ba7a:	b.n	b9f6 <__pow5mult+0x1e>
    ba7c:	ldr	r3, [pc, #16]	; (ba90 <__pow5mult+0xb8>)
    ba7e:	ldr	r0, [pc, #20]	; (ba94 <__pow5mult+0xbc>)
    ba80:	mov	r2, r8
    ba82:	movw	r1, #325	; 0x145
    ba86:	bl	dc20 <__assert_func>
    ba8a:	nop
    ba8c:	.word	0x20000e58
    ba90:	.word	0x200008a4
    ba94:	.word	0x200008b8

0000ba98 <__lshift>:
    ba98:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ba9c:	mov	r5, r1
    ba9e:	mov	r4, r2
    baa0:	ldr	r7, [r5, #16]
    baa2:	ldr	r3, [r5, #8]
    baa4:	ldr	r1, [r1, #4]
    baa6:	add.w	r7, r7, r2, asr #5
    baaa:	adds	r6, r7, #1
    baac:	cmp	r6, r3
    baae:	mov	r8, r0
    bab0:	mov.w	r9, r2, asr #5
    bab4:	ble.n	bac0 <__lshift+0x28>
    bab6:	lsls	r3, r3, #1
    bab8:	cmp	r6, r3
    baba:	add.w	r1, r1, #1
    babe:	bgt.n	bab6 <__lshift+0x1e>
    bac0:	mov	r0, r8
    bac2:	bl	b67c <_Balloc>
    bac6:	mov	ip, r0
    bac8:	cmp	r0, #0
    baca:	beq.n	bb72 <__lshift+0xda>
    bacc:	cmp.w	r9, #0
    bad0:	add.w	r2, r0, #20
    bad4:	ble.n	baf4 <__lshift+0x5c>
    bad6:	add.w	r1, r9, #5
    bada:	mov.w	lr, r1, lsl #2
    bade:	mov	r3, r2
    bae0:	add.w	r1, r0, r1, lsl #2
    bae4:	movs	r0, #0
    bae6:	str.w	r0, [r3], #4
    baea:	cmp	r3, r1
    baec:	bne.n	bae6 <__lshift+0x4e>
    baee:	sub.w	r3, lr, #20
    baf2:	add	r2, r3
    baf4:	ldr	r1, [r5, #16]
    baf6:	add.w	r3, r5, #20
    bafa:	ands.w	lr, r4, #31
    bafe:	add.w	r1, r3, r1, lsl #2
    bb02:	beq.n	bb62 <__lshift+0xca>
    bb04:	rsb	r9, lr, #32
    bb08:	mov	r0, r2
    bb0a:	mov.w	sl, #0
    bb0e:	ldr	r4, [r3, #0]
    bb10:	lsl.w	r4, r4, lr
    bb14:	orr.w	r4, r4, sl
    bb18:	str.w	r4, [r0], #4
    bb1c:	ldr.w	r4, [r3], #4
    bb20:	cmp	r1, r3
    bb22:	lsr.w	sl, r4, r9
    bb26:	bhi.n	bb0e <__lshift+0x76>
    bb28:	subs	r3, r1, r5
    bb2a:	subs	r3, #21
    bb2c:	bic.w	r3, r3, #3
    bb30:	adds	r3, #4
    bb32:	add.w	r0, r5, #21
    bb36:	cmp	r1, r0
    bb38:	it	cc
    bb3a:	movcc	r3, #4
    bb3c:	cmp.w	sl, #0
    bb40:	it	ne
    bb42:	movne	r7, r6
    bb44:	str.w	sl, [r2, r3]
    bb48:	ldr.w	r3, [r8, #68]	; 0x44
    bb4c:	ldr	r2, [r5, #4]
    bb4e:	str.w	r7, [ip, #16]
    bb52:	ldr.w	r1, [r3, r2, lsl #2]
    bb56:	str	r1, [r5, #0]
    bb58:	mov	r0, ip
    bb5a:	str.w	r5, [r3, r2, lsl #2]
    bb5e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    bb62:	subs	r2, #4
    bb64:	ldr.w	r0, [r3], #4
    bb68:	str.w	r0, [r2, #4]!
    bb6c:	cmp	r1, r3
    bb6e:	bhi.n	bb64 <__lshift+0xcc>
    bb70:	b.n	bb48 <__lshift+0xb0>
    bb72:	ldr	r3, [pc, #12]	; (bb80 <__lshift+0xe8>)
    bb74:	ldr	r0, [pc, #12]	; (bb84 <__lshift+0xec>)
    bb76:	mov	r2, ip
    bb78:	mov.w	r1, #478	; 0x1de
    bb7c:	bl	dc20 <__assert_func>
    bb80:	.word	0x200008a4
    bb84:	.word	0x200008b8

0000bb88 <__mcmp>:
    bb88:	ldr	r3, [r1, #16]
    bb8a:	mov	ip, r0
    bb8c:	ldr	r0, [r0, #16]
    bb8e:	subs	r0, r0, r3
    bb90:	bne.n	bbc0 <__mcmp+0x38>
    bb92:	add.w	ip, ip, #20
    bb96:	adds	r1, #20
    bb98:	add.w	r2, ip, r3, lsl #2
    bb9c:	push	{r4}
    bb9e:	add.w	r3, r1, r3, lsl #2
    bba2:	b.n	bba8 <__mcmp+0x20>
    bba4:	cmp	ip, r2
    bba6:	bcs.n	bbba <__mcmp+0x32>
    bba8:	ldr.w	r4, [r2, #-4]!
    bbac:	ldr.w	r1, [r3, #-4]!
    bbb0:	cmp	r4, r1
    bbb2:	beq.n	bba4 <__mcmp+0x1c>
    bbb4:	bcs.n	bbc2 <__mcmp+0x3a>
    bbb6:	mov.w	r0, #4294967295
    bbba:	ldr.w	r4, [sp], #4
    bbbe:	bx	lr
    bbc0:	bx	lr
    bbc2:	movs	r0, #1
    bbc4:	ldr.w	r4, [sp], #4
    bbc8:	bx	lr
    bbca:	nop

0000bbcc <__mdiff>:
    bbcc:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bbd0:	ldr	r7, [r1, #16]
    bbd2:	ldr	r3, [r2, #16]
    bbd4:	subs	r7, r7, r3
    bbd6:	cmp	r7, #0
    bbd8:	mov	r6, r1
    bbda:	mov	r8, r2
    bbdc:	bne.n	bcde <__mdiff+0x112>
    bbde:	add.w	r5, r1, #20
    bbe2:	adds	r2, #20
    bbe4:	add.w	r2, r2, r3, lsl #2
    bbe8:	add.w	r3, r5, r3, lsl #2
    bbec:	b.n	bbf2 <__mdiff+0x26>
    bbee:	cmp	r5, r3
    bbf0:	bcs.n	bce4 <__mdiff+0x118>
    bbf2:	ldr.w	r1, [r3, #-4]!
    bbf6:	ldr.w	r4, [r2, #-4]!
    bbfa:	cmp	r1, r4
    bbfc:	beq.n	bbee <__mdiff+0x22>
    bbfe:	bcc.n	bcd4 <__mdiff+0x108>
    bc00:	ldr	r1, [r6, #4]
    bc02:	bl	b67c <_Balloc>
    bc06:	mov	r9, r0
    bc08:	cmp	r0, #0
    bc0a:	beq.n	bcfc <__mdiff+0x130>
    bc0c:	ldr	r5, [r6, #16]
    bc0e:	ldr.w	r2, [r8, #16]
    bc12:	str	r7, [r0, #12]
    bc14:	add.w	lr, r8, #20
    bc18:	add.w	r0, r6, #20
    bc1c:	add.w	sl, r9, #20
    bc20:	add.w	r1, r6, #16
    bc24:	add.w	r2, lr, r2, lsl #2
    bc28:	add.w	r7, r0, r5, lsl #2
    bc2c:	mov	r6, sl
    bc2e:	mov.w	ip, #0
    bc32:	ldr.w	r4, [lr], #4
    bc36:	ldr.w	fp, [r1, #4]!
    bc3a:	uxth	r3, r4
    bc3c:	uxtah	ip, ip, fp
    bc40:	sub.w	r3, ip, r3
    bc44:	mov.w	ip, r4, lsr #16
    bc48:	rsb	ip, ip, fp, lsr #16
    bc4c:	add.w	ip, ip, r3, asr #16
    bc50:	uxth	r3, r3
    bc52:	orr.w	r3, r3, ip, lsl #16
    bc56:	cmp	r2, lr
    bc58:	str.w	r3, [r6], #4
    bc5c:	mov.w	ip, ip, asr #16
    bc60:	bhi.n	bc32 <__mdiff+0x66>
    bc62:	sub.w	r1, r2, r8
    bc66:	subs	r1, #21
    bc68:	add.w	r8, r8, #21
    bc6c:	cmp	r2, r8
    bc6e:	bic.w	r4, r1, #3
    bc72:	add.w	r4, r4, #4
    bc76:	it	cc
    bc78:	movcc	r4, #4
    bc7a:	add	r0, r4
    bc7c:	bic.w	r2, r1, #3
    bc80:	it	cc
    bc82:	movcc	r2, #0
    bc84:	cmp	r7, r0
    bc86:	add	r2, sl
    bc88:	add	r4, sl
    bc8a:	bls.n	bcbe <__mdiff+0xf2>
    bc8c:	mov	r6, r4
    bc8e:	mov	r1, r0
    bc90:	ldr.w	r3, [r1], #4
    bc94:	uxtah	ip, ip, r3
    bc98:	mov.w	r2, ip, asr #16
    bc9c:	add.w	r2, r2, r3, lsr #16
    bca0:	uxth.w	ip, ip
    bca4:	orr.w	r3, ip, r2, lsl #16
    bca8:	cmp	r7, r1
    bcaa:	str.w	r3, [r6], #4
    bcae:	mov.w	ip, r2, asr #16
    bcb2:	bhi.n	bc90 <__mdiff+0xc4>
    bcb4:	subs	r7, #1
    bcb6:	subs	r7, r7, r0
    bcb8:	bic.w	r7, r7, #3
    bcbc:	adds	r2, r4, r7
    bcbe:	cbnz	r3, bcca <__mdiff+0xfe>
    bcc0:	ldr.w	r3, [r2, #-4]!
    bcc4:	subs	r5, #1
    bcc6:	cmp	r3, #0
    bcc8:	beq.n	bcc0 <__mdiff+0xf4>
    bcca:	str.w	r5, [r9, #16]
    bcce:	mov	r0, r9
    bcd0:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bcd4:	mov	r3, r6
    bcd6:	movs	r7, #1
    bcd8:	mov	r6, r8
    bcda:	mov	r8, r3
    bcdc:	b.n	bc00 <__mdiff+0x34>
    bcde:	blt.n	bcd4 <__mdiff+0x108>
    bce0:	movs	r7, #0
    bce2:	b.n	bc00 <__mdiff+0x34>
    bce4:	movs	r1, #0
    bce6:	bl	b67c <_Balloc>
    bcea:	mov	r9, r0
    bcec:	cbz	r0, bd0a <__mdiff+0x13e>
    bcee:	movs	r2, #1
    bcf0:	movs	r3, #0
    bcf2:	strd	r2, r3, [r9, #16]
    bcf6:	mov	r0, r9
    bcf8:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bcfc:	ldr	r3, [pc, #24]	; (bd18 <__mdiff+0x14c>)
    bcfe:	ldr	r0, [pc, #28]	; (bd1c <__mdiff+0x150>)
    bd00:	mov	r2, r9
    bd02:	movw	r1, #581	; 0x245
    bd06:	bl	dc20 <__assert_func>
    bd0a:	ldr	r3, [pc, #12]	; (bd18 <__mdiff+0x14c>)
    bd0c:	ldr	r0, [pc, #12]	; (bd1c <__mdiff+0x150>)
    bd0e:	mov	r2, r9
    bd10:	movw	r1, #567	; 0x237
    bd14:	bl	dc20 <__assert_func>
    bd18:	.word	0x200008a4
    bd1c:	.word	0x200008b8

0000bd20 <__d2b>:
    bd20:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    bd24:	mov	r8, r1
    bd26:	sub	sp, #12
    bd28:	movs	r1, #1
    bd2a:	vmov	r6, r7, d0
    bd2e:	mov	r5, r2
    bd30:	bl	b67c <_Balloc>
    bd34:	mov	r4, r0
    bd36:	cmp	r0, #0
    bd38:	beq.n	bdde <__d2b+0xbe>
    bd3a:	ubfx	r9, r7, #20, #11
    bd3e:	ubfx	r3, r7, #0, #20
    bd42:	cmp.w	r9, #0
    bd46:	beq.n	bd4c <__d2b+0x2c>
    bd48:	orr.w	r3, r3, #1048576	; 0x100000
    bd4c:	cmp	r6, #0
    bd4e:	str	r3, [sp, #4]
    bd50:	bne.n	bd84 <__d2b+0x64>
    bd52:	add	r0, sp, #4
    bd54:	bl	b7c0 <__lo0bits>
    bd58:	ldr	r2, [sp, #4]
    bd5a:	str	r2, [r4, #20]
    bd5c:	movs	r2, #1
    bd5e:	add.w	r3, r0, #32
    bd62:	str	r2, [r4, #16]
    bd64:	cmp.w	r9, #0
    bd68:	beq.n	bdb6 <__d2b+0x96>
    bd6a:	subw	r9, r9, #1075	; 0x433
    bd6e:	add.w	r2, r9, r3
    bd72:	mov	r0, r4
    bd74:	rsb	r3, r3, #53	; 0x35
    bd78:	str.w	r2, [r8]
    bd7c:	str	r3, [r5, #0]
    bd7e:	add	sp, #12
    bd80:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    bd84:	mov	r0, sp
    bd86:	str	r6, [sp, #0]
    bd88:	bl	b7c0 <__lo0bits>
    bd8c:	mov	r3, r0
    bd8e:	cbz	r0, bdd6 <__d2b+0xb6>
    bd90:	ldrd	r0, r2, [sp]
    bd94:	rsb	r1, r3, #32
    bd98:	lsl.w	r1, r2, r1
    bd9c:	orrs	r1, r0
    bd9e:	lsrs	r2, r3
    bda0:	str	r1, [r4, #20]
    bda2:	str	r2, [sp, #4]
    bda4:	cmp	r2, #0
    bda6:	str	r2, [r4, #24]
    bda8:	ite	ne
    bdaa:	movne	r2, #2
    bdac:	moveq	r2, #1
    bdae:	str	r2, [r4, #16]
    bdb0:	cmp.w	r9, #0
    bdb4:	bne.n	bd6a <__d2b+0x4a>
    bdb6:	subw	r3, r3, #1074	; 0x432
    bdba:	str.w	r3, [r8]
    bdbe:	add.w	r3, r4, r2, lsl #2
    bdc2:	ldr	r0, [r3, #16]
    bdc4:	bl	b780 <__hi0bits>
    bdc8:	rsb	r3, r0, r2, lsl #5
    bdcc:	mov	r0, r4
    bdce:	str	r3, [r5, #0]
    bdd0:	add	sp, #12
    bdd2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    bdd6:	ldr	r2, [sp, #0]
    bdd8:	str	r2, [r4, #20]
    bdda:	ldr	r2, [sp, #4]
    bddc:	b.n	bda4 <__d2b+0x84>
    bdde:	ldr	r3, [pc, #12]	; (bdec <__d2b+0xcc>)
    bde0:	ldr	r0, [pc, #12]	; (bdf0 <__d2b+0xd0>)
    bde2:	mov	r2, r4
    bde4:	movw	r1, #783	; 0x30f
    bde8:	bl	dc20 <__assert_func>
    bdec:	.word	0x200008a4
    bdf0:	.word	0x200008b8

0000bdf4 <__ascii_wctomb>:
    bdf4:	cbz	r1, be0a <__ascii_wctomb+0x16>
    bdf6:	cmp	r2, #255	; 0xff
    bdf8:	bhi.n	be00 <__ascii_wctomb+0xc>
    bdfa:	strb	r2, [r1, #0]
    bdfc:	movs	r0, #1
    bdfe:	bx	lr
    be00:	movs	r3, #138	; 0x8a
    be02:	str	r3, [r0, #0]
    be04:	mov.w	r0, #4294967295
    be08:	bx	lr
    be0a:	mov	r0, r1
    be0c:	bx	lr
    be0e:	nop

0000be10 <_svfprintf_r>:
    be10:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    be14:	vpush	{d8-d11}
    be18:	sub	sp, #324	; 0x144
    be1a:	mov	r4, r1
    be1c:	vmov	s22, r1
    be20:	mov	r8, r2
    be22:	str	r3, [sp, #32]
    be24:	mov	fp, r0
    be26:	bl	dba0 <_localeconv_r>
    be2a:	ldr	r3, [r0, #0]
    be2c:	str	r3, [sp, #72]	; 0x48
    be2e:	mov	r0, r3
    be30:	bl	b240 <strlen>
    be34:	add	r7, sp, #128	; 0x80
    be36:	str	r0, [sp, #64]	; 0x40
    be38:	movs	r2, #8
    be3a:	movs	r1, #0
    be3c:	mov	r0, r7
    be3e:	bl	7528 <memset>
    be42:	ldrh	r3, [r4, #12]
    be44:	lsls	r3, r3, #24
    be46:	bpl.n	be50 <_svfprintf_r+0x40>
    be48:	ldr	r3, [r4, #16]
    be4a:	cmp	r3, #0
    be4c:	beq.w	ccfa <_svfprintf_r+0xeea>
    be50:	movs	r3, #0
    be52:	vldr	d8, [pc, #524]	; c060 <_svfprintf_r+0x250>
    be56:	vldr	d9, [pc, #528]	; c068 <_svfprintf_r+0x258>
    be5a:	strd	r3, r3, [sp, #148]	; 0x94
    be5e:	strd	r3, r3, [sp, #76]	; 0x4c
    be62:	strd	r3, r3, [sp, #84]	; 0x54
    be66:	add	r2, sp, #156	; 0x9c
    be68:	str	r3, [sp, #56]	; 0x38
    be6a:	str	r2, [sp, #144]	; 0x90
    be6c:	mov	sl, r2
    be6e:	str	r3, [sp, #68]	; 0x44
    be70:	str	r3, [sp, #16]
    be72:	mov	r4, r8
    be74:	mov	r9, r4
    be76:	ldr	r3, [pc, #504]	; (c070 <_svfprintf_r+0x260>)
    be78:	ldr.w	r5, [r3, #228]	; 0xe4
    be7c:	bl	b064 <__locale_mb_cur_max>
    be80:	mov	r2, r9
    be82:	mov	r3, r0
    be84:	add	r1, sp, #112	; 0x70
    be86:	str	r7, [sp, #0]
    be88:	mov	r0, fp
    be8a:	blx	r5
    be8c:	cmp	r0, #0
    be8e:	beq.w	bff2 <_svfprintf_r+0x1e2>
    be92:	blt.w	bfe2 <_svfprintf_r+0x1d2>
    be96:	ldr	r2, [sp, #112]	; 0x70
    be98:	cmp	r2, #37	; 0x25
    be9a:	mov	r3, r0
    be9c:	beq.n	bea2 <_svfprintf_r+0x92>
    be9e:	add	r9, r3
    bea0:	b.n	be76 <_svfprintf_r+0x66>
    bea2:	subs.w	r5, r9, r4
    bea6:	mov	r6, r0
    bea8:	bne.w	bffa <_svfprintf_r+0x1ea>
    beac:	movs	r3, #0
    beae:	mov.w	r2, #4294967295
    beb2:	strb.w	r3, [sp, #103]	; 0x67
    beb6:	mov	r8, r3
    beb8:	str	r3, [sp, #24]
    beba:	add.w	r9, r9, #1
    bebe:	ldrb.w	r3, [r9]
    bec2:	str	r2, [sp, #12]
    bec4:	movs	r5, #43	; 0x2b
    bec6:	movs	r6, #32
    bec8:	add.w	r9, r9, #1
    becc:	sub.w	r2, r3, #32
    bed0:	cmp	r2, #90	; 0x5a
    bed2:	bhi.w	c074 <_svfprintf_r+0x264>
    bed6:	tbh	[pc, r2, lsl #1]
    beda:	.short	0x02e8
    bedc:	.word	0x00cd00cd
    bee0:	.word	0x00cd02e3
    bee4:	.word	0x00cd00cd
    bee8:	.word	0x00cd006a
    beec:	.word	0x020500cd
    bef0:	.word	0x00cd0284
    bef4:	.word	0x02c90210
    bef8:	.word	0x02bd00cd
    befc:	.word	0x005b005b
    bf00:	.word	0x005b005b
    bf04:	.word	0x005b005b
    bf08:	.word	0x005b005b
    bf0c:	.word	0x00cd005b
    bf10:	.word	0x00cd00cd
    bf14:	.word	0x00cd00cd
    bf18:	.word	0x00cd00cd
    bf1c:	.word	0x00cd0153
    bf20:	.word	0x021a0183
    bf24:	.word	0x01530153
    bf28:	.word	0x00cd0153
    bf2c:	.word	0x00cd00cd
    bf30:	.word	0x021500cd
    bf34:	.word	0x00cd00cd
    bf38:	.word	0x00cd0296
    bf3c:	.word	0x00cd00cd
    bf40:	.word	0x00cd01ab
    bf44:	.word	0x00cd02aa
    bf48:	.word	0x06e300cd
    bf4c:	.word	0x00cd00cd
    bf50:	.word	0x00cd00cd
    bf54:	.word	0x00cd00cd
    bf58:	.word	0x00cd00cd
    bf5c:	.word	0x00cd0153
    bf60:	.word	0x01de0183
    bf64:	.word	0x01530153
    bf68:	.word	0x02770153
    bf6c:	.word	0x007f01de
    bf70:	.word	0x028900cd
    bf74:	.word	0x025f00cd
    bf78:	.word	0x022f06e0
    bf7c:	.word	0x00cd007f
    bf80:	.word	0x007c01ab
    bf84:	.word	0x00cd06b8
    bf88:	.word	0x06bd00cd
    bf8c:	.word	0x007c00cd
    bf90:	sub.w	r2, r3, #48	; 0x30
    bf94:	movs	r1, #0
    bf96:	ldrb.w	r3, [r9], #1
    bf9a:	add.w	r1, r1, r1, lsl #2
    bf9e:	add.w	r1, r2, r1, lsl #1
    bfa2:	sub.w	r2, r3, #48	; 0x30
    bfa6:	cmp	r2, #9
    bfa8:	bls.n	bf96 <_svfprintf_r+0x186>
    bfaa:	str	r1, [sp, #24]
    bfac:	b.n	becc <_svfprintf_r+0xbc>
    bfae:	mov	r0, fp
    bfb0:	bl	dba0 <_localeconv_r>
    bfb4:	ldr	r3, [r0, #4]
    bfb6:	str	r3, [sp, #84]	; 0x54
    bfb8:	mov	r0, r3
    bfba:	bl	b240 <strlen>
    bfbe:	str	r0, [sp, #88]	; 0x58
    bfc0:	mov	r0, fp
    bfc2:	bl	dba0 <_localeconv_r>
    bfc6:	ldr	r3, [r0, #8]
    bfc8:	str	r3, [sp, #76]	; 0x4c
    bfca:	ldr	r3, [sp, #88]	; 0x58
    bfcc:	cmp	r3, #0
    bfce:	bne.w	cc2c <_svfprintf_r+0xe1c>
    bfd2:	ldrb.w	r3, [r9]
    bfd6:	b.n	bec8 <_svfprintf_r+0xb8>
    bfd8:	ldrb.w	r3, [r9]
    bfdc:	orr.w	r8, r8, #32
    bfe0:	b.n	bec8 <_svfprintf_r+0xb8>
    bfe2:	movs	r2, #8
    bfe4:	movs	r1, #0
    bfe6:	mov	r0, r7
    bfe8:	bl	7528 <memset>
    bfec:	movs	r3, #1
    bfee:	add	r9, r3
    bff0:	b.n	be76 <_svfprintf_r+0x66>
    bff2:	subs.w	r5, r9, r4
    bff6:	mov	r6, r0
    bff8:	beq.n	c01e <_svfprintf_r+0x20e>
    bffa:	ldr	r3, [sp, #152]	; 0x98
    bffc:	add	r3, r5
    bffe:	str	r3, [sp, #152]	; 0x98
    c000:	ldr	r3, [sp, #148]	; 0x94
    c002:	adds	r3, #1
    c004:	cmp	r3, #7
    c006:	strd	r4, r5, [sl]
    c00a:	str	r3, [sp, #148]	; 0x94
    c00c:	bgt.n	c048 <_svfprintf_r+0x238>
    c00e:	add.w	sl, sl, #8
    c012:	ldr	r3, [sp, #16]
    c014:	add	r3, r5
    c016:	str	r3, [sp, #16]
    c018:	cmp	r6, #0
    c01a:	bne.w	beac <_svfprintf_r+0x9c>
    c01e:	ldr	r3, [sp, #152]	; 0x98
    c020:	cmp	r3, #0
    c022:	bne.w	d43c <_svfprintf_r+0x162c>
    c026:	vmov	r3, s22
    c02a:	ldrsh.w	r3, [r3, #12]
    c02e:	tst.w	r3, #64	; 0x40
    c032:	ldr	r3, [sp, #16]
    c034:	it	ne
    c036:	movne.w	r3, #4294967295
    c03a:	str	r3, [sp, #16]
    c03c:	ldr	r0, [sp, #16]
    c03e:	add	sp, #324	; 0x144
    c040:	vpop	{d8-d11}
    c044:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c048:	vmov	r1, s22
    c04c:	add	r2, sp, #144	; 0x90
    c04e:	mov	r0, fp
    c050:	bl	eb78 <__ssprint_r>
    c054:	cmp	r0, #0
    c056:	bne.n	c026 <_svfprintf_r+0x216>
    c058:	add.w	sl, sp, #156	; 0x9c
    c05c:	b.n	c012 <_svfprintf_r+0x202>
    c05e:	nop
	...
    c068:	.word	0xffffffff
    c06c:	.word	0x7fefffff
    c070:	.word	0x20001bf4
    c074:	str	r3, [sp, #44]	; 0x2c
    c076:	cmp	r3, #0
    c078:	beq.n	c01e <_svfprintf_r+0x20e>
    c07a:	movs	r1, #0
    c07c:	strd	r1, r1, [sp, #48]	; 0x30
    c080:	strb.w	r3, [sp, #220]	; 0xdc
    c084:	movs	r3, #1
    c086:	strb.w	r1, [sp, #103]	; 0x67
    c08a:	str	r3, [sp, #8]
    c08c:	str	r1, [sp, #28]
    c08e:	str	r3, [sp, #20]
    c090:	str	r1, [sp, #12]
    c092:	str	r1, [sp, #60]	; 0x3c
    c094:	add	r4, sp, #220	; 0xdc
    c096:	ands.w	r3, r8, #2
    c09a:	str	r3, [sp, #36]	; 0x24
    c09c:	beq.n	c0a4 <_svfprintf_r+0x294>
    c09e:	ldr	r3, [sp, #8]
    c0a0:	adds	r3, #2
    c0a2:	str	r3, [sp, #8]
    c0a4:	ands.w	r3, r8, #132	; 0x84
    c0a8:	str	r3, [sp, #40]	; 0x28
    c0aa:	bne.n	c0b8 <_svfprintf_r+0x2a8>
    c0ac:	ldr	r3, [sp, #24]
    c0ae:	ldr	r2, [sp, #8]
    c0b0:	subs	r5, r3, r2
    c0b2:	cmp	r5, #0
    c0b4:	bgt.w	c78a <_svfprintf_r+0x97a>
    c0b8:	ldr	r2, [sp, #152]	; 0x98
    c0ba:	cbz	r1, c0e0 <_svfprintf_r+0x2d0>
    c0bc:	ldr	r1, [sp, #148]	; 0x94
    c0be:	add.w	r0, sp, #103	; 0x67
    c0c2:	adds	r1, #1
    c0c4:	adds	r2, #1
    c0c6:	str.w	r0, [sl]
    c0ca:	cmp	r1, #7
    c0cc:	mov.w	r0, #1
    c0d0:	str	r2, [sp, #152]	; 0x98
    c0d2:	str	r1, [sp, #148]	; 0x94
    c0d4:	str.w	r0, [sl, #4]
    c0d8:	bgt.w	c820 <_svfprintf_r+0xa10>
    c0dc:	add.w	sl, sl, #8
    c0e0:	ldr	r3, [sp, #36]	; 0x24
    c0e2:	cbz	r3, c106 <_svfprintf_r+0x2f6>
    c0e4:	ldr	r3, [sp, #148]	; 0x94
    c0e6:	add	r1, sp, #104	; 0x68
    c0e8:	adds	r3, #1
    c0ea:	adds	r2, #2
    c0ec:	str.w	r1, [sl]
    c0f0:	cmp	r3, #7
    c0f2:	mov.w	r1, #2
    c0f6:	str	r2, [sp, #152]	; 0x98
    c0f8:	str	r3, [sp, #148]	; 0x94
    c0fa:	str.w	r1, [sl, #4]
    c0fe:	bgt.w	c848 <_svfprintf_r+0xa38>
    c102:	add.w	sl, sl, #8
    c106:	ldr	r3, [sp, #40]	; 0x28
    c108:	cmp	r3, #128	; 0x80
    c10a:	beq.w	c5e6 <_svfprintf_r+0x7d6>
    c10e:	ldr	r3, [sp, #12]
    c110:	ldr	r1, [sp, #20]
    c112:	subs	r5, r3, r1
    c114:	cmp	r5, #0
    c116:	bgt.w	c664 <_svfprintf_r+0x854>
    c11a:	tst.w	r8, #256	; 0x100
    c11e:	bne.w	c53c <_svfprintf_r+0x72c>
    c122:	ldr	r3, [sp, #20]
    c124:	str.w	r3, [sl, #4]
    c128:	add	r2, r3
    c12a:	ldr	r3, [sp, #148]	; 0x94
    c12c:	str.w	r4, [sl]
    c130:	adds	r3, #1
    c132:	cmp	r3, #7
    c134:	str	r2, [sp, #152]	; 0x98
    c136:	str	r3, [sp, #148]	; 0x94
    c138:	bgt.w	c772 <_svfprintf_r+0x962>
    c13c:	add.w	sl, sl, #8
    c140:	tst.w	r8, #4
    c144:	beq.n	c152 <_svfprintf_r+0x342>
    c146:	ldr	r3, [sp, #24]
    c148:	ldr	r1, [sp, #8]
    c14a:	subs	r4, r3, r1
    c14c:	cmp	r4, #0
    c14e:	bgt.w	c862 <_svfprintf_r+0xa52>
    c152:	ldr	r3, [sp, #16]
    c154:	ldr	r1, [sp, #24]
    c156:	ldr	r0, [sp, #8]
    c158:	cmp	r1, r0
    c15a:	ite	ge
    c15c:	addge	r3, r3, r1
    c15e:	addlt	r3, r3, r0
    c160:	str	r3, [sp, #16]
    c162:	cmp	r2, #0
    c164:	bne.w	c6c8 <_svfprintf_r+0x8b8>
    c168:	movs	r3, #0
    c16a:	str	r3, [sp, #148]	; 0x94
    c16c:	ldr	r3, [sp, #28]
    c16e:	cbz	r3, c178 <_svfprintf_r+0x368>
    c170:	ldr	r1, [sp, #28]
    c172:	mov	r0, fp
    c174:	bl	b444 <_free_r>
    c178:	add.w	sl, sp, #156	; 0x9c
    c17c:	mov	r4, r9
    c17e:	b.n	be74 <_svfprintf_r+0x64>
    c180:	str	r3, [sp, #44]	; 0x2c
    c182:	ldr	r3, [sp, #32]
    c184:	adds	r3, #7
    c186:	bic.w	r3, r3, #7
    c18a:	vldmia	r3!, {d8}
    c18e:	vabs.f64	d7, d8
    c192:	vcmp.f64	d7, d9
    c196:	vmrs	APSR_nzcv, fpscr
    c19a:	str	r3, [sp, #32]
    c19c:	ble.w	cb72 <_svfprintf_r+0xd62>
    c1a0:	vcmpe.f64	d8, #0.0
    c1a4:	vmrs	APSR_nzcv, fpscr
    c1a8:	bmi.w	d25e <_svfprintf_r+0x144e>
    c1ac:	ldrb.w	r1, [sp, #103]	; 0x67
    c1b0:	ldr	r4, [pc, #684]	; (c460 <_svfprintf_r+0x650>)
    c1b2:	ldr	r3, [pc, #688]	; (c464 <_svfprintf_r+0x654>)
    c1b4:	bic.w	r8, r8, #128	; 0x80
    c1b8:	ldr	r2, [sp, #44]	; 0x2c
    c1ba:	cmp	r2, #71	; 0x47
    c1bc:	it	gt
    c1be:	movgt	r4, r3
    c1c0:	movs	r3, #0
    c1c2:	strd	r3, r3, [sp, #48]	; 0x30
    c1c6:	movs	r2, #3
    c1c8:	str	r3, [sp, #28]
    c1ca:	str	r2, [sp, #8]
    c1cc:	str	r2, [sp, #20]
    c1ce:	str	r3, [sp, #12]
    c1d0:	str	r3, [sp, #60]	; 0x3c
    c1d2:	cmp	r1, #0
    c1d4:	beq.w	c096 <_svfprintf_r+0x286>
    c1d8:	ldr	r3, [sp, #8]
    c1da:	adds	r3, #1
    c1dc:	str	r3, [sp, #8]
    c1de:	b.n	c096 <_svfprintf_r+0x286>
    c1e0:	cmp	r3, #67	; 0x43
    c1e2:	str	r3, [sp, #44]	; 0x2c
    c1e4:	beq.n	c1ee <_svfprintf_r+0x3de>
    c1e6:	tst.w	r8, #16
    c1ea:	beq.w	cca8 <_svfprintf_r+0xe98>
    c1ee:	ldr	r5, [sp, #32]
    c1f0:	movs	r2, #8
    c1f2:	movs	r1, #0
    c1f4:	add	r0, sp, #136	; 0x88
    c1f6:	add	r4, sp, #220	; 0xdc
    c1f8:	bl	7528 <memset>
    c1fc:	add	r3, sp, #136	; 0x88
    c1fe:	ldr.w	r2, [r5], #4
    c202:	mov	r1, r4
    c204:	mov	r0, fp
    c206:	bl	eaec <_wcrtomb_r>
    c20a:	mov	r3, r0
    c20c:	adds	r3, #1
    c20e:	str	r0, [sp, #20]
    c210:	beq.w	d7f0 <_svfprintf_r+0x19e0>
    c214:	ldr	r3, [sp, #20]
    c216:	str	r5, [sp, #32]
    c218:	bic.w	r3, r3, r3, asr #31
    c21c:	str	r3, [sp, #8]
    c21e:	movs	r1, #0
    c220:	strd	r1, r1, [sp, #48]	; 0x30
    c224:	strb.w	r1, [sp, #103]	; 0x67
    c228:	str	r1, [sp, #28]
    c22a:	str	r1, [sp, #12]
    c22c:	str	r1, [sp, #60]	; 0x3c
    c22e:	b.n	c096 <_svfprintf_r+0x286>
    c230:	str	r3, [sp, #44]	; 0x2c
    c232:	ldr	r3, [sp, #32]
    c234:	mov	r2, r3
    c236:	movs	r3, #0
    c238:	strb.w	r3, [sp, #103]	; 0x67
    c23c:	mov	r3, r2
    c23e:	ldr.w	r4, [r3], #4
    c242:	str	r3, [sp, #32]
    c244:	cmp	r4, #0
    c246:	beq.w	ccda <_svfprintf_r+0xeca>
    c24a:	ldr	r3, [sp, #44]	; 0x2c
    c24c:	cmp	r3, #83	; 0x53
    c24e:	beq.w	d02a <_svfprintf_r+0x121a>
    c252:	ands.w	r3, r8, #16
    c256:	str	r3, [sp, #48]	; 0x30
    c258:	bne.w	d02a <_svfprintf_r+0x121a>
    c25c:	ldr	r3, [sp, #12]
    c25e:	adds	r5, r3, #1
    c260:	beq.w	d42e <_svfprintf_r+0x161e>
    c264:	ldr	r1, [sp, #48]	; 0x30
    c266:	mov	r2, r3
    c268:	mov	r0, r4
    c26a:	bl	b1a0 <memchr>
    c26e:	str	r0, [sp, #28]
    c270:	cmp	r0, #0
    c272:	beq.w	d8c6 <_svfprintf_r+0x1ab6>
    c276:	ldr	r3, [sp, #28]
    c278:	subs	r2, r3, r4
    c27a:	str	r2, [sp, #20]
    c27c:	ldr	r3, [sp, #48]	; 0x30
    c27e:	str	r3, [sp, #12]
    c280:	bic.w	r2, r2, r2, asr #31
    c284:	str	r3, [sp, #60]	; 0x3c
    c286:	str	r3, [sp, #52]	; 0x34
    c288:	str	r3, [sp, #28]
    c28a:	movs	r3, #115	; 0x73
    c28c:	ldrb.w	r1, [sp, #103]	; 0x67
    c290:	str	r2, [sp, #8]
    c292:	str	r3, [sp, #44]	; 0x2c
    c294:	b.n	c1d2 <_svfprintf_r+0x3c2>
    c296:	tst.w	r8, #32
    c29a:	str	r3, [sp, #44]	; 0x2c
    c29c:	ldr	r3, [sp, #32]
    c29e:	beq.n	c31c <_svfprintf_r+0x50c>
    c2a0:	adds	r3, #7
    c2a2:	bic.w	r3, r3, #7
    c2a6:	mov	r2, r3
    c2a8:	mov	r1, r2
    c2aa:	ldr	r3, [r3, #4]
    c2ac:	ldr.w	r2, [r1], #8
    c2b0:	str	r1, [sp, #32]
    c2b2:	mov	r1, r3
    c2b4:	cmp	r3, #0
    c2b6:	blt.w	cad2 <_svfprintf_r+0xcc2>
    c2ba:	ldr	r3, [sp, #12]
    c2bc:	adds	r3, #1
    c2be:	beq.w	c7fe <_svfprintf_r+0x9ee>
    c2c2:	bic.w	r0, r8, #128	; 0x80
    c2c6:	orrs.w	r3, r2, r1
    c2ca:	str	r0, [sp, #8]
    c2cc:	bne.w	c802 <_svfprintf_r+0x9f2>
    c2d0:	ldr	r3, [sp, #12]
    c2d2:	cmp	r3, #0
    c2d4:	bne.w	c80c <_svfprintf_r+0x9fc>
    c2d8:	mov	r8, r0
    c2da:	movs	r3, #0
    c2dc:	str	r3, [sp, #12]
    c2de:	str	r3, [sp, #20]
    c2e0:	add	r4, sp, #320	; 0x140
    c2e2:	b.n	c4f2 <_svfprintf_r+0x6e2>
    c2e4:	ldr	r3, [sp, #32]
    c2e6:	ldr.w	r2, [r3], #4
    c2ea:	str	r2, [sp, #24]
    c2ec:	cmp	r2, #0
    c2ee:	bge.w	cb24 <_svfprintf_r+0xd14>
    c2f2:	ldr	r2, [sp, #24]
    c2f4:	str	r3, [sp, #32]
    c2f6:	negs	r2, r2
    c2f8:	str	r2, [sp, #24]
    c2fa:	ldrb.w	r3, [r9]
    c2fe:	orr.w	r8, r8, #4
    c302:	b.n	bec8 <_svfprintf_r+0xb8>
    c304:	ldrb.w	r3, [r9]
    c308:	orr.w	r8, r8, #8
    c30c:	b.n	bec8 <_svfprintf_r+0xb8>
    c30e:	orr.w	r8, r8, #16
    c312:	tst.w	r8, #32
    c316:	str	r3, [sp, #44]	; 0x2c
    c318:	ldr	r3, [sp, #32]
    c31a:	bne.n	c2a0 <_svfprintf_r+0x490>
    c31c:	tst.w	r8, #16
    c320:	bne.w	cb3a <_svfprintf_r+0xd2a>
    c324:	tst.w	r8, #64	; 0x40
    c328:	beq.w	cb32 <_svfprintf_r+0xd22>
    c32c:	ldrsh.w	r2, [r3], #4
    c330:	str	r3, [sp, #32]
    c332:	asrs	r1, r2, #31
    c334:	mov	r3, r1
    c336:	b.n	c2b4 <_svfprintf_r+0x4a4>
    c338:	ldr	r3, [sp, #32]
    c33a:	orr.w	r2, r8, #2
    c33e:	str	r2, [sp, #8]
    c340:	ldr.w	r2, [r3], #4
    c344:	str	r3, [sp, #32]
    c346:	movw	r3, #30768	; 0x7830
    c34a:	strh.w	r3, [sp, #104]	; 0x68
    c34e:	movs	r0, #120	; 0x78
    c350:	ldr	r3, [pc, #276]	; (c468 <_svfprintf_r+0x658>)
    c352:	str	r3, [sp, #68]	; 0x44
    c354:	movs	r1, #0
    c356:	movs	r3, #2
    c358:	str	r0, [sp, #44]	; 0x2c
    c35a:	movs	r0, #0
    c35c:	ldr	r4, [sp, #12]
    c35e:	strb.w	r0, [sp, #103]	; 0x67
    c362:	adds	r0, r4, #1
    c364:	beq.w	c4c2 <_svfprintf_r+0x6b2>
    c368:	ldr	r0, [sp, #8]
    c36a:	bic.w	r8, r0, #128	; 0x80
    c36e:	orrs.w	r0, r2, r1
    c372:	bne.w	c4be <_svfprintf_r+0x6ae>
    c376:	cmp	r4, #0
    c378:	bne.w	d0d8 <_svfprintf_r+0x12c8>
    c37c:	cmp	r3, #0
    c37e:	bne.n	c2da <_svfprintf_r+0x4ca>
    c380:	ldr	r3, [sp, #8]
    c382:	ands.w	r3, r3, #1
    c386:	str	r3, [sp, #20]
    c388:	beq.w	cb2e <_svfprintf_r+0xd1e>
    c38c:	movs	r3, #48	; 0x30
    c38e:	strb.w	r3, [sp, #319]	; 0x13f
    c392:	addw	r4, sp, #319	; 0x13f
    c396:	b.n	c4f2 <_svfprintf_r+0x6e2>
    c398:	tst.w	r8, #32
    c39c:	bne.w	cb48 <_svfprintf_r+0xd38>
    c3a0:	tst.w	r8, #16
    c3a4:	bne.w	d0e6 <_svfprintf_r+0x12d6>
    c3a8:	tst.w	r8, #64	; 0x40
    c3ac:	bne.w	d2de <_svfprintf_r+0x14ce>
    c3b0:	tst.w	r8, #512	; 0x200
    c3b4:	beq.w	d0e6 <_svfprintf_r+0x12d6>
    c3b8:	ldr	r3, [sp, #32]
    c3ba:	ldr	r1, [sp, #16]
    c3bc:	ldr.w	r2, [r3], #4
    c3c0:	str	r3, [sp, #32]
    c3c2:	strb	r1, [r2, #0]
    c3c4:	mov	r4, r9
    c3c6:	b.n	be74 <_svfprintf_r+0x64>
    c3c8:	ldrb.w	r3, [r9]
    c3cc:	cmp	r3, #104	; 0x68
    c3ce:	ittte	eq
    c3d0:	ldrbeq.w	r3, [r9, #1]
    c3d4:	orreq.w	r8, r8, #512	; 0x200
    c3d8:	addeq.w	r9, r9, #1
    c3dc:	orrne.w	r8, r8, #64	; 0x40
    c3e0:	b.n	bec8 <_svfprintf_r+0xb8>
    c3e2:	ldrb.w	r3, [r9]
    c3e6:	strb.w	r5, [sp, #103]	; 0x67
    c3ea:	b.n	bec8 <_svfprintf_r+0xb8>
    c3ec:	ldrb.w	r3, [r9]
    c3f0:	cmp	r3, #108	; 0x6c
    c3f2:	ittte	eq
    c3f4:	ldrbeq.w	r3, [r9, #1]
    c3f8:	orreq.w	r8, r8, #32
    c3fc:	addeq.w	r9, r9, #1
    c400:	orrne.w	r8, r8, #16
    c404:	b.n	bec8 <_svfprintf_r+0xb8>
    c406:	str	r3, [sp, #44]	; 0x2c
    c408:	orr.w	r8, r8, #16
    c40c:	ands.w	r1, r8, #32
    c410:	beq.w	cab6 <_svfprintf_r+0xca6>
    c414:	ldr	r3, [sp, #32]
    c416:	adds	r3, #7
    c418:	bic.w	r3, r3, #7
    c41c:	ldr	r1, [r3, #4]
    c41e:	ldr.w	r2, [r3], #8
    c422:	str	r3, [sp, #32]
    c424:	bic.w	r3, r8, #1024	; 0x400
    c428:	str	r3, [sp, #8]
    c42a:	movs	r3, #0
    c42c:	b.n	c35a <_svfprintf_r+0x54a>
    c42e:	str	r3, [sp, #44]	; 0x2c
    c430:	orr.w	r3, r8, #16
    c434:	str	r3, [sp, #8]
    c436:	ldr	r3, [sp, #8]
    c438:	ands.w	r1, r3, #32
    c43c:	beq.w	ca92 <_svfprintf_r+0xc82>
    c440:	ldr	r3, [sp, #32]
    c442:	adds	r3, #7
    c444:	bic.w	r3, r3, #7
    c448:	ldr	r1, [r3, #4]
    c44a:	ldr.w	r2, [r3], #8
    c44e:	str	r3, [sp, #32]
    c450:	movs	r3, #1
    c452:	b.n	c35a <_svfprintf_r+0x54a>
    c454:	ldrb.w	r3, [r9]
    c458:	orr.w	r8, r8, #128	; 0x80
    c45c:	b.n	bec8 <_svfprintf_r+0xb8>
    c45e:	nop
    c460:	.word	0x20000a84
    c464:	.word	0x20000a88
    c468:	.word	0x20000a94
    c46c:	mov	r1, r9
    c46e:	ldrb.w	r3, [r1], #1
    c472:	cmp	r3, #42	; 0x2a
    c474:	beq.w	d90a <_svfprintf_r+0x1afa>
    c478:	sub.w	r2, r3, #48	; 0x30
    c47c:	cmp	r2, #9
    c47e:	mov	r9, r1
    c480:	it	ls
    c482:	movls	r1, #0
    c484:	bhi.w	d710 <_svfprintf_r+0x1900>
    c488:	ldrb.w	r3, [r9], #1
    c48c:	add.w	r1, r1, r1, lsl #2
    c490:	add.w	r1, r2, r1, lsl #1
    c494:	sub.w	r2, r3, #48	; 0x30
    c498:	cmp	r2, #9
    c49a:	bls.n	c488 <_svfprintf_r+0x678>
    c49c:	str	r1, [sp, #12]
    c49e:	b.n	becc <_svfprintf_r+0xbc>
    c4a0:	ldrb.w	r3, [r9]
    c4a4:	orr.w	r8, r8, #1
    c4a8:	b.n	bec8 <_svfprintf_r+0xb8>
    c4aa:	ldrb.w	r3, [sp, #103]	; 0x67
    c4ae:	cmp	r3, #0
    c4b0:	bne.w	bfd2 <_svfprintf_r+0x1c2>
    c4b4:	ldrb.w	r3, [r9]
    c4b8:	strb.w	r6, [sp, #103]	; 0x67
    c4bc:	b.n	bec8 <_svfprintf_r+0xb8>
    c4be:	str.w	r8, [sp, #8]
    c4c2:	cmp	r3, #1
    c4c4:	beq.w	c802 <_svfprintf_r+0x9f2>
    c4c8:	cmp	r3, #2
    c4ca:	add	r4, sp, #320	; 0x140
    c4cc:	bne.n	c510 <_svfprintf_r+0x700>
    c4ce:	ldr	r0, [sp, #68]	; 0x44
    c4d0:	and.w	r3, r2, #15
    c4d4:	lsrs	r2, r2, #4
    c4d6:	ldrb	r3, [r0, r3]
    c4d8:	strb.w	r3, [r4, #-1]!
    c4dc:	orr.w	r2, r2, r1, lsl #28
    c4e0:	lsrs	r1, r1, #4
    c4e2:	orrs.w	r3, r2, r1
    c4e6:	bne.n	c4d0 <_svfprintf_r+0x6c0>
    c4e8:	add	r3, sp, #320	; 0x140
    c4ea:	subs	r3, r3, r4
    c4ec:	ldr.w	r8, [sp, #8]
    c4f0:	str	r3, [sp, #20]
    c4f2:	ldr	r2, [sp, #20]
    c4f4:	ldr	r0, [sp, #12]
    c4f6:	ldrb.w	r1, [sp, #103]	; 0x67
    c4fa:	cmp	r2, r0
    c4fc:	mov.w	r3, #0
    c500:	it	lt
    c502:	movlt	r2, r0
    c504:	strd	r3, r3, [sp, #48]	; 0x30
    c508:	str	r3, [sp, #28]
    c50a:	str	r2, [sp, #8]
    c50c:	str	r3, [sp, #60]	; 0x3c
    c50e:	b.n	c1d2 <_svfprintf_r+0x3c2>
    c510:	and.w	r3, r2, #7
    c514:	lsrs	r2, r2, #3
    c516:	orr.w	r2, r2, r1, lsl #29
    c51a:	lsrs	r1, r1, #3
    c51c:	adds	r3, #48	; 0x30
    c51e:	orrs.w	r5, r2, r1
    c522:	mov	r0, r4
    c524:	strb.w	r3, [r4, #-1]!
    c528:	bne.n	c510 <_svfprintf_r+0x700>
    c52a:	ldr	r2, [sp, #8]
    c52c:	lsls	r1, r2, #31
    c52e:	bmi.w	c9cc <_svfprintf_r+0xbbc>
    c532:	add	r3, sp, #320	; 0x140
    c534:	subs	r3, r3, r4
    c536:	mov	r8, r2
    c538:	str	r3, [sp, #20]
    c53a:	b.n	c4f2 <_svfprintf_r+0x6e2>
    c53c:	ldr	r3, [sp, #44]	; 0x2c
    c53e:	cmp	r3, #101	; 0x65
    c540:	ble.w	c6ec <_svfprintf_r+0x8dc>
    c544:	vcmp.f64	d8, #0.0
    c548:	vmrs	APSR_nzcv, fpscr
    c54c:	bne.w	c8d2 <_svfprintf_r+0xac2>
    c550:	ldr	r3, [sp, #148]	; 0x94
    c552:	ldr	r1, [pc, #744]	; (c83c <_svfprintf_r+0xa2c>)
    c554:	str.w	r1, [sl]
    c558:	adds	r3, #1
    c55a:	adds	r2, #1
    c55c:	movs	r1, #1
    c55e:	cmp	r3, #7
    c560:	str	r2, [sp, #152]	; 0x98
    c562:	str	r3, [sp, #148]	; 0x94
    c564:	str.w	r1, [sl, #4]
    c568:	bgt.w	d00e <_svfprintf_r+0x11fe>
    c56c:	add.w	sl, sl, #8
    c570:	ldr	r3, [sp, #108]	; 0x6c
    c572:	ldr	r1, [sp, #56]	; 0x38
    c574:	cmp	r3, r1
    c576:	bge.w	cb1a <_svfprintf_r+0xd0a>
    c57a:	ldr	r3, [sp, #64]	; 0x40
    c57c:	ldr	r1, [sp, #72]	; 0x48
    c57e:	add	r2, r3
    c580:	strd	r1, r3, [sl]
    c584:	ldr	r3, [sp, #148]	; 0x94
    c586:	str	r2, [sp, #152]	; 0x98
    c588:	adds	r3, #1
    c58a:	cmp	r3, #7
    c58c:	str	r3, [sp, #148]	; 0x94
    c58e:	bgt.w	ccc0 <_svfprintf_r+0xeb0>
    c592:	add.w	sl, sl, #8
    c596:	ldr	r3, [sp, #56]	; 0x38
    c598:	subs	r4, r3, #1
    c59a:	cmp	r4, #0
    c59c:	ble.w	c140 <_svfprintf_r+0x330>
    c5a0:	cmp	r4, #16
    c5a2:	ldr	r3, [sp, #148]	; 0x94
    c5a4:	ble.w	d084 <_svfprintf_r+0x1274>
    c5a8:	vmov	r6, s22
    c5ac:	movs	r5, #16
    c5ae:	b.n	c5bc <_svfprintf_r+0x7ac>
    c5b0:	add.w	sl, sl, #8
    c5b4:	subs	r4, #16
    c5b6:	cmp	r4, #16
    c5b8:	ble.w	d084 <_svfprintf_r+0x1274>
    c5bc:	adds	r3, #1
    c5be:	ldr	r1, [pc, #640]	; (c840 <_svfprintf_r+0xa30>)
    c5c0:	adds	r2, #16
    c5c2:	cmp	r3, #7
    c5c4:	strd	r1, r5, [sl]
    c5c8:	strd	r3, r2, [sp, #148]	; 0x94
    c5cc:	ble.n	c5b0 <_svfprintf_r+0x7a0>
    c5ce:	add	r2, sp, #144	; 0x90
    c5d0:	mov	r1, r6
    c5d2:	mov	r0, fp
    c5d4:	bl	eb78 <__ssprint_r>
    c5d8:	cmp	r0, #0
    c5da:	bne.n	c6da <_svfprintf_r+0x8ca>
    c5dc:	ldrd	r3, r2, [sp, #148]	; 0x94
    c5e0:	add.w	sl, sp, #156	; 0x9c
    c5e4:	b.n	c5b4 <_svfprintf_r+0x7a4>
    c5e6:	ldr	r3, [sp, #24]
    c5e8:	ldr	r1, [sp, #8]
    c5ea:	subs	r5, r3, r1
    c5ec:	cmp	r5, #0
    c5ee:	ble.w	c10e <_svfprintf_r+0x2fe>
    c5f2:	cmp	r5, #16
    c5f4:	ldr	r3, [sp, #148]	; 0x94
    c5f6:	ble.n	c63c <_svfprintf_r+0x82c>
    c5f8:	str	r4, [sp, #36]	; 0x24
    c5fa:	movs	r6, #16
    c5fc:	vmov	r4, s22
    c600:	b.n	c60c <_svfprintf_r+0x7fc>
    c602:	subs	r5, #16
    c604:	cmp	r5, #16
    c606:	add.w	sl, sl, #8
    c60a:	ble.n	c63a <_svfprintf_r+0x82a>
    c60c:	adds	r3, #1
    c60e:	ldr	r1, [pc, #560]	; (c840 <_svfprintf_r+0xa30>)
    c610:	adds	r2, #16
    c612:	cmp	r3, #7
    c614:	strd	r1, r6, [sl]
    c618:	strd	r3, r2, [sp, #148]	; 0x94
    c61c:	ble.n	c602 <_svfprintf_r+0x7f2>
    c61e:	add	r2, sp, #144	; 0x90
    c620:	mov	r1, r4
    c622:	mov	r0, fp
    c624:	add.w	sl, sp, #156	; 0x9c
    c628:	bl	eb78 <__ssprint_r>
    c62c:	cmp	r0, #0
    c62e:	bne.n	c6da <_svfprintf_r+0x8ca>
    c630:	subs	r5, #16
    c632:	cmp	r5, #16
    c634:	ldrd	r3, r2, [sp, #148]	; 0x94
    c638:	bgt.n	c60c <_svfprintf_r+0x7fc>
    c63a:	ldr	r4, [sp, #36]	; 0x24
    c63c:	ldr	r1, [pc, #512]	; (c840 <_svfprintf_r+0xa30>)
    c63e:	str.w	r5, [sl, #4]
    c642:	adds	r3, #1
    c644:	add	r2, r5
    c646:	cmp	r3, #7
    c648:	strd	r3, r2, [sp, #148]	; 0x94
    c64c:	str.w	r1, [sl]
    c650:	bgt.w	d0a0 <_svfprintf_r+0x1290>
    c654:	ldr	r3, [sp, #12]
    c656:	ldr	r1, [sp, #20]
    c658:	subs	r5, r3, r1
    c65a:	cmp	r5, #0
    c65c:	add.w	sl, sl, #8
    c660:	ble.w	c11a <_svfprintf_r+0x30a>
    c664:	cmp	r5, #16
    c666:	ldr	r3, [sp, #148]	; 0x94
    c668:	ble.n	c6aa <_svfprintf_r+0x89a>
    c66a:	mov	r1, sl
    c66c:	movs	r6, #16
    c66e:	vmov	sl, s22
    c672:	b.n	c67e <_svfprintf_r+0x86e>
    c674:	subs	r5, #16
    c676:	cmp	r5, #16
    c678:	add.w	r1, r1, #8
    c67c:	ble.n	c6a8 <_svfprintf_r+0x898>
    c67e:	adds	r3, #1
    c680:	ldr	r0, [pc, #444]	; (c840 <_svfprintf_r+0xa30>)
    c682:	adds	r2, #16
    c684:	cmp	r3, #7
    c686:	strd	r0, r6, [r1]
    c68a:	strd	r3, r2, [sp, #148]	; 0x94
    c68e:	ble.n	c674 <_svfprintf_r+0x864>
    c690:	add	r2, sp, #144	; 0x90
    c692:	mov	r1, sl
    c694:	mov	r0, fp
    c696:	bl	eb78 <__ssprint_r>
    c69a:	cbnz	r0, c6da <_svfprintf_r+0x8ca>
    c69c:	subs	r5, #16
    c69e:	cmp	r5, #16
    c6a0:	ldrd	r3, r2, [sp, #148]	; 0x94
    c6a4:	add	r1, sp, #156	; 0x9c
    c6a6:	bgt.n	c67e <_svfprintf_r+0x86e>
    c6a8:	mov	sl, r1
    c6aa:	adds	r3, #1
    c6ac:	ldr	r1, [pc, #400]	; (c840 <_svfprintf_r+0xa30>)
    c6ae:	str.w	r5, [sl, #4]
    c6b2:	add	r2, r5
    c6b4:	cmp	r3, #7
    c6b6:	strd	r3, r2, [sp, #148]	; 0x94
    c6ba:	str.w	r1, [sl]
    c6be:	bgt.w	ca76 <_svfprintf_r+0xc66>
    c6c2:	add.w	sl, sl, #8
    c6c6:	b.n	c11a <_svfprintf_r+0x30a>
    c6c8:	vmov	r1, s22
    c6cc:	add	r2, sp, #144	; 0x90
    c6ce:	mov	r0, fp
    c6d0:	bl	eb78 <__ssprint_r>
    c6d4:	cmp	r0, #0
    c6d6:	beq.w	c168 <_svfprintf_r+0x358>
    c6da:	ldr	r3, [sp, #28]
    c6dc:	cmp	r3, #0
    c6de:	beq.w	c026 <_svfprintf_r+0x216>
    c6e2:	ldr	r1, [sp, #28]
    c6e4:	mov	r0, fp
    c6e6:	bl	b444 <_free_r>
    c6ea:	b.n	c026 <_svfprintf_r+0x216>
    c6ec:	ldr	r3, [sp, #56]	; 0x38
    c6ee:	cmp	r3, #1
    c6f0:	ble.w	c9e8 <_svfprintf_r+0xbd8>
    c6f4:	ldr	r3, [sp, #148]	; 0x94
    c6f6:	str.w	r4, [sl]
    c6fa:	adds	r3, #1
    c6fc:	adds	r2, #1
    c6fe:	movs	r1, #1
    c700:	cmp	r3, #7
    c702:	str	r2, [sp, #152]	; 0x98
    c704:	str	r3, [sp, #148]	; 0x94
    c706:	str.w	r1, [sl, #4]
    c70a:	bgt.w	cafe <_svfprintf_r+0xcee>
    c70e:	add.w	sl, sl, #8
    c712:	ldr	r1, [sp, #64]	; 0x40
    c714:	ldr	r0, [sp, #72]	; 0x48
    c716:	adds	r3, #1
    c718:	add	r2, r1
    c71a:	cmp	r3, #7
    c71c:	strd	r0, r1, [sl]
    c720:	strd	r3, r2, [sp, #148]	; 0x94
    c724:	bgt.w	cae2 <_svfprintf_r+0xcd2>
    c728:	add.w	sl, sl, #8
    c72c:	vcmp.f64	d8, #0.0
    c730:	vmrs	APSR_nzcv, fpscr
    c734:	beq.w	ca26 <_svfprintf_r+0xc16>
    c738:	ldr	r1, [sp, #56]	; 0x38
    c73a:	adds	r3, #1
    c73c:	subs	r1, #1
    c73e:	adds	r4, #1
    c740:	add	r2, r1
    c742:	cmp	r3, #7
    c744:	str.w	r4, [sl]
    c748:	str	r3, [sp, #148]	; 0x94
    c74a:	str.w	r1, [sl, #4]
    c74e:	str	r2, [sp, #152]	; 0x98
    c750:	bgt.w	ca0a <_svfprintf_r+0xbfa>
    c754:	add.w	sl, sl, #8
    c758:	ldr	r1, [sp, #80]	; 0x50
    c75a:	str.w	r1, [sl, #4]
    c75e:	adds	r3, #1
    c760:	add	r2, r1
    c762:	cmp	r3, #7
    c764:	add	r1, sp, #120	; 0x78
    c766:	strd	r3, r2, [sp, #148]	; 0x94
    c76a:	str.w	r1, [sl]
    c76e:	ble.w	c13c <_svfprintf_r+0x32c>
    c772:	vmov	r1, s22
    c776:	add	r2, sp, #144	; 0x90
    c778:	mov	r0, fp
    c77a:	bl	eb78 <__ssprint_r>
    c77e:	cmp	r0, #0
    c780:	bne.n	c6da <_svfprintf_r+0x8ca>
    c782:	ldr	r2, [sp, #152]	; 0x98
    c784:	add.w	sl, sp, #156	; 0x9c
    c788:	b.n	c140 <_svfprintf_r+0x330>
    c78a:	cmp	r5, #16
    c78c:	ldrd	r1, r2, [sp, #148]	; 0x94
    c790:	ldr	r6, [pc, #176]	; (c844 <_svfprintf_r+0xa34>)
    c792:	ble.n	c7de <_svfprintf_r+0x9ce>
    c794:	str	r4, [sp, #92]	; 0x5c
    c796:	movs	r3, #16
    c798:	vmov	r4, s22
    c79c:	mov	r0, r1
    c79e:	b.n	c7aa <_svfprintf_r+0x99a>
    c7a0:	subs	r5, #16
    c7a2:	cmp	r5, #16
    c7a4:	add.w	sl, sl, #8
    c7a8:	ble.n	c7da <_svfprintf_r+0x9ca>
    c7aa:	adds	r0, #1
    c7ac:	adds	r2, #16
    c7ae:	cmp	r0, #7
    c7b0:	strd	r6, r3, [sl]
    c7b4:	strd	r0, r2, [sp, #148]	; 0x94
    c7b8:	ble.n	c7a0 <_svfprintf_r+0x990>
    c7ba:	add	r2, sp, #144	; 0x90
    c7bc:	mov	r1, r4
    c7be:	mov	r0, fp
    c7c0:	add.w	sl, sp, #156	; 0x9c
    c7c4:	bl	eb78 <__ssprint_r>
    c7c8:	cmp	r0, #0
    c7ca:	bne.n	c6da <_svfprintf_r+0x8ca>
    c7cc:	subs	r5, #16
    c7ce:	cmp	r5, #16
    c7d0:	ldrd	r0, r2, [sp, #148]	; 0x94
    c7d4:	mov.w	r3, #16
    c7d8:	bgt.n	c7aa <_svfprintf_r+0x99a>
    c7da:	ldr	r4, [sp, #92]	; 0x5c
    c7dc:	mov	r1, r0
    c7de:	adds	r1, #1
    c7e0:	add	r2, r5
    c7e2:	cmp	r1, #7
    c7e4:	strd	r1, r2, [sp, #148]	; 0x94
    c7e8:	str.w	r6, [sl]
    c7ec:	str.w	r5, [sl, #4]
    c7f0:	bgt.w	cf6e <_svfprintf_r+0x115e>
    c7f4:	ldrb.w	r1, [sp, #103]	; 0x67
    c7f8:	add.w	sl, sl, #8
    c7fc:	b.n	c0ba <_svfprintf_r+0x2aa>
    c7fe:	str.w	r8, [sp, #8]
    c802:	cmp	r2, #10
    c804:	sbcs.w	r3, r1, #0
    c808:	bcs.w	ce96 <_svfprintf_r+0x1086>
    c80c:	adds	r2, #48	; 0x30
    c80e:	movs	r3, #1
    c810:	ldr.w	r8, [sp, #8]
    c814:	strb.w	r2, [sp, #319]	; 0x13f
    c818:	str	r3, [sp, #20]
    c81a:	addw	r4, sp, #319	; 0x13f
    c81e:	b.n	c4f2 <_svfprintf_r+0x6e2>
    c820:	vmov	r1, s22
    c824:	add	r2, sp, #144	; 0x90
    c826:	mov	r0, fp
    c828:	bl	eb78 <__ssprint_r>
    c82c:	cmp	r0, #0
    c82e:	bne.w	c6da <_svfprintf_r+0x8ca>
    c832:	ldr	r2, [sp, #152]	; 0x98
    c834:	add.w	sl, sp, #156	; 0x9c
    c838:	b.n	c0e0 <_svfprintf_r+0x2d0>
    c83a:	nop
    c83c:	.word	0x20000ac4
    c840:	.word	0x20000f18
    c844:	.word	0x20000ac8
    c848:	vmov	r1, s22
    c84c:	add	r2, sp, #144	; 0x90
    c84e:	mov	r0, fp
    c850:	bl	eb78 <__ssprint_r>
    c854:	cmp	r0, #0
    c856:	bne.w	c6da <_svfprintf_r+0x8ca>
    c85a:	ldr	r2, [sp, #152]	; 0x98
    c85c:	add.w	sl, sp, #156	; 0x9c
    c860:	b.n	c106 <_svfprintf_r+0x2f6>
    c862:	cmp	r4, #16
    c864:	ldr	r3, [sp, #148]	; 0x94
    c866:	ldr	r6, [pc, #760]	; (cb60 <_svfprintf_r+0xd50>)
    c868:	ble.n	c8aa <_svfprintf_r+0xa9a>
    c86a:	vmov	r8, s22
    c86e:	movs	r5, #16
    c870:	b.n	c87c <_svfprintf_r+0xa6c>
    c872:	subs	r4, #16
    c874:	cmp	r4, #16
    c876:	add.w	sl, sl, #8
    c87a:	ble.n	c8aa <_svfprintf_r+0xa9a>
    c87c:	adds	r3, #1
    c87e:	adds	r2, #16
    c880:	cmp	r3, #7
    c882:	strd	r6, r5, [sl]
    c886:	strd	r3, r2, [sp, #148]	; 0x94
    c88a:	ble.n	c872 <_svfprintf_r+0xa62>
    c88c:	add	r2, sp, #144	; 0x90
    c88e:	mov	r1, r8
    c890:	mov	r0, fp
    c892:	add.w	sl, sp, #156	; 0x9c
    c896:	bl	eb78 <__ssprint_r>
    c89a:	cmp	r0, #0
    c89c:	bne.w	c6da <_svfprintf_r+0x8ca>
    c8a0:	subs	r4, #16
    c8a2:	cmp	r4, #16
    c8a4:	ldrd	r3, r2, [sp, #148]	; 0x94
    c8a8:	bgt.n	c87c <_svfprintf_r+0xa6c>
    c8aa:	adds	r3, #1
    c8ac:	add	r2, r4
    c8ae:	cmp	r3, #7
    c8b0:	strd	r6, r4, [sl]
    c8b4:	strd	r3, r2, [sp, #148]	; 0x94
    c8b8:	ble.w	c152 <_svfprintf_r+0x342>
    c8bc:	vmov	r1, s22
    c8c0:	add	r2, sp, #144	; 0x90
    c8c2:	mov	r0, fp
    c8c4:	bl	eb78 <__ssprint_r>
    c8c8:	cmp	r0, #0
    c8ca:	bne.w	c6da <_svfprintf_r+0x8ca>
    c8ce:	ldr	r2, [sp, #152]	; 0x98
    c8d0:	b.n	c152 <_svfprintf_r+0x342>
    c8d2:	ldr	r1, [sp, #108]	; 0x6c
    c8d4:	cmp	r1, #0
    c8d6:	ble.w	cf8e <_svfprintf_r+0x117e>
    c8da:	ldr	r6, [sp, #48]	; 0x30
    c8dc:	ldr	r3, [sp, #56]	; 0x38
    c8de:	cmp	r6, r3
    c8e0:	it	ge
    c8e2:	movge	r6, r3
    c8e4:	cmp	r6, #0
    c8e6:	ble.n	c900 <_svfprintf_r+0xaf0>
    c8e8:	ldr	r3, [sp, #148]	; 0x94
    c8ea:	adds	r3, #1
    c8ec:	add	r2, r6
    c8ee:	cmp	r3, #7
    c8f0:	strd	r4, r6, [sl]
    c8f4:	str	r2, [sp, #152]	; 0x98
    c8f6:	str	r3, [sp, #148]	; 0x94
    c8f8:	bgt.w	d60e <_svfprintf_r+0x17fe>
    c8fc:	add.w	sl, sl, #8
    c900:	ldr	r5, [sp, #48]	; 0x30
    c902:	cmp	r6, #0
    c904:	it	ge
    c906:	subge	r5, r5, r6
    c908:	cmp	r5, #0
    c90a:	bgt.w	cd14 <_svfprintf_r+0xf04>
    c90e:	ldr	r3, [sp, #48]	; 0x30
    c910:	tst.w	r8, #1024	; 0x400
    c914:	add	r3, r4
    c916:	str	r3, [sp, #20]
    c918:	bne.w	cd5a <_svfprintf_r+0xf4a>
    c91c:	ldr	r3, [sp, #108]	; 0x6c
    c91e:	ldr	r1, [sp, #56]	; 0x38
    c920:	cmp	r3, r1
    c922:	blt.n	c92c <_svfprintf_r+0xb1c>
    c924:	tst.w	r8, #1
    c928:	beq.w	d2ca <_svfprintf_r+0x14ba>
    c92c:	ldr	r1, [sp, #64]	; 0x40
    c92e:	ldr	r0, [sp, #72]	; 0x48
    c930:	add	r2, r1
    c932:	strd	r0, r1, [sl]
    c936:	ldr	r1, [sp, #148]	; 0x94
    c938:	str	r2, [sp, #152]	; 0x98
    c93a:	adds	r1, #1
    c93c:	cmp	r1, #7
    c93e:	str	r1, [sp, #148]	; 0x94
    c940:	bgt.w	d68e <_svfprintf_r+0x187e>
    c944:	add.w	sl, sl, #8
    c948:	ldr	r1, [sp, #56]	; 0x38
    c94a:	adds	r5, r4, r1
    c94c:	subs	r4, r1, r3
    c94e:	ldr	r3, [sp, #20]
    c950:	subs	r5, r5, r3
    c952:	cmp	r5, r4
    c954:	it	ge
    c956:	movge	r5, r4
    c958:	cmp	r5, #0
    c95a:	ble.n	c978 <_svfprintf_r+0xb68>
    c95c:	str.w	r3, [sl]
    c960:	ldr	r3, [sp, #148]	; 0x94
    c962:	str.w	r5, [sl, #4]
    c966:	adds	r3, #1
    c968:	add	r2, r5
    c96a:	cmp	r3, #7
    c96c:	str	r2, [sp, #152]	; 0x98
    c96e:	str	r3, [sp, #148]	; 0x94
    c970:	bgt.w	d6ea <_svfprintf_r+0x18da>
    c974:	add.w	sl, sl, #8
    c978:	cmp	r5, #0
    c97a:	it	ge
    c97c:	subge	r4, r4, r5
    c97e:	cmp	r4, #0
    c980:	ble.w	c140 <_svfprintf_r+0x330>
    c984:	cmp	r4, #16
    c986:	ldr	r3, [sp, #148]	; 0x94
    c988:	ble.w	d084 <_svfprintf_r+0x1274>
    c98c:	vmov	r6, s22
    c990:	movs	r5, #16
    c992:	b.n	c9a0 <_svfprintf_r+0xb90>
    c994:	add.w	sl, sl, #8
    c998:	subs	r4, #16
    c99a:	cmp	r4, #16
    c99c:	ble.w	d084 <_svfprintf_r+0x1274>
    c9a0:	adds	r3, #1
    c9a2:	ldr	r1, [pc, #448]	; (cb64 <_svfprintf_r+0xd54>)
    c9a4:	adds	r2, #16
    c9a6:	cmp	r3, #7
    c9a8:	strd	r1, r5, [sl]
    c9ac:	strd	r3, r2, [sp, #148]	; 0x94
    c9b0:	ble.n	c994 <_svfprintf_r+0xb84>
    c9b2:	add	r2, sp, #144	; 0x90
    c9b4:	mov	r1, r6
    c9b6:	mov	r0, fp
    c9b8:	bl	eb78 <__ssprint_r>
    c9bc:	cmp	r0, #0
    c9be:	bne.w	c6da <_svfprintf_r+0x8ca>
    c9c2:	ldrd	r3, r2, [sp, #148]	; 0x94
    c9c6:	add.w	sl, sp, #156	; 0x9c
    c9ca:	b.n	c998 <_svfprintf_r+0xb88>
    c9cc:	cmp	r3, #48	; 0x30
    c9ce:	beq.w	c4e8 <_svfprintf_r+0x6d8>
    c9d2:	movs	r3, #48	; 0x30
    c9d4:	subs	r0, #2
    c9d6:	strb.w	r3, [r4, #-1]
    c9da:	add	r3, sp, #320	; 0x140
    c9dc:	subs	r3, r3, r0
    c9de:	ldr.w	r8, [sp, #8]
    c9e2:	str	r3, [sp, #20]
    c9e4:	mov	r4, r0
    c9e6:	b.n	c4f2 <_svfprintf_r+0x6e2>
    c9e8:	tst.w	r8, #1
    c9ec:	bne.w	c6f4 <_svfprintf_r+0x8e4>
    c9f0:	ldr	r3, [sp, #148]	; 0x94
    c9f2:	str.w	r4, [sl]
    c9f6:	adds	r3, #1
    c9f8:	adds	r2, #1
    c9fa:	movs	r1, #1
    c9fc:	cmp	r3, #7
    c9fe:	str	r2, [sp, #152]	; 0x98
    ca00:	str	r3, [sp, #148]	; 0x94
    ca02:	str.w	r1, [sl, #4]
    ca06:	ble.w	c754 <_svfprintf_r+0x944>
    ca0a:	vmov	r1, s22
    ca0e:	add	r2, sp, #144	; 0x90
    ca10:	mov	r0, fp
    ca12:	bl	eb78 <__ssprint_r>
    ca16:	cmp	r0, #0
    ca18:	bne.w	c6da <_svfprintf_r+0x8ca>
    ca1c:	ldrd	r3, r2, [sp, #148]	; 0x94
    ca20:	add.w	sl, sp, #156	; 0x9c
    ca24:	b.n	c758 <_svfprintf_r+0x948>
    ca26:	ldr	r1, [sp, #56]	; 0x38
    ca28:	subs	r4, r1, #1
    ca2a:	cmp	r4, #0
    ca2c:	ble.w	c758 <_svfprintf_r+0x948>
    ca30:	cmp	r4, #16
    ca32:	ble.w	d0f8 <_svfprintf_r+0x12e8>
    ca36:	vmov	r6, s22
    ca3a:	movs	r5, #16
    ca3c:	b.n	ca4a <_svfprintf_r+0xc3a>
    ca3e:	add.w	sl, sl, #8
    ca42:	subs	r4, #16
    ca44:	cmp	r4, #16
    ca46:	ble.w	d0f8 <_svfprintf_r+0x12e8>
    ca4a:	adds	r3, #1
    ca4c:	ldr	r1, [pc, #276]	; (cb64 <_svfprintf_r+0xd54>)
    ca4e:	adds	r2, #16
    ca50:	cmp	r3, #7
    ca52:	strd	r1, r5, [sl]
    ca56:	strd	r3, r2, [sp, #148]	; 0x94
    ca5a:	ble.n	ca3e <_svfprintf_r+0xc2e>
    ca5c:	add	r2, sp, #144	; 0x90
    ca5e:	mov	r1, r6
    ca60:	mov	r0, fp
    ca62:	bl	eb78 <__ssprint_r>
    ca66:	cmp	r0, #0
    ca68:	bne.w	c6da <_svfprintf_r+0x8ca>
    ca6c:	ldrd	r3, r2, [sp, #148]	; 0x94
    ca70:	add.w	sl, sp, #156	; 0x9c
    ca74:	b.n	ca42 <_svfprintf_r+0xc32>
    ca76:	vmov	r1, s22
    ca7a:	add	r2, sp, #144	; 0x90
    ca7c:	mov	r0, fp
    ca7e:	bl	eb78 <__ssprint_r>
    ca82:	cmp	r0, #0
    ca84:	bne.w	c6da <_svfprintf_r+0x8ca>
    ca88:	ldr	r2, [sp, #152]	; 0x98
    ca8a:	add.w	sl, sp, #156	; 0x9c
    ca8e:	b.w	c11a <_svfprintf_r+0x30a>
    ca92:	ldr	r3, [sp, #8]
    ca94:	ands.w	r3, r3, #16
    ca98:	bne.w	cc1e <_svfprintf_r+0xe0e>
    ca9c:	ldr	r2, [sp, #8]
    ca9e:	ands.w	r2, r2, #64	; 0x40
    caa2:	beq.w	d19a <_svfprintf_r+0x138a>
    caa6:	ldr	r0, [sp, #32]
    caa8:	ldr.w	r2, [r0], #4
    caac:	str	r0, [sp, #32]
    caae:	mov	r1, r3
    cab0:	uxth	r2, r2
    cab2:	movs	r3, #1
    cab4:	b.n	c35a <_svfprintf_r+0x54a>
    cab6:	ands.w	r3, r8, #16
    caba:	bne.n	cb68 <_svfprintf_r+0xd58>
    cabc:	ands.w	r2, r8, #64	; 0x40
    cac0:	beq.w	d17e <_svfprintf_r+0x136e>
    cac4:	ldr	r0, [sp, #32]
    cac6:	ldr.w	r2, [r0], #4
    caca:	str	r0, [sp, #32]
    cacc:	mov	r1, r3
    cace:	uxth	r2, r2
    cad0:	b.n	c424 <_svfprintf_r+0x614>
    cad2:	negs	r2, r2
    cad4:	sbc.w	r1, r1, r1, lsl #1
    cad8:	str.w	r8, [sp, #8]
    cadc:	movs	r0, #45	; 0x2d
    cade:	movs	r3, #1
    cae0:	b.n	c35c <_svfprintf_r+0x54c>
    cae2:	vmov	r1, s22
    cae6:	add	r2, sp, #144	; 0x90
    cae8:	mov	r0, fp
    caea:	bl	eb78 <__ssprint_r>
    caee:	cmp	r0, #0
    caf0:	bne.w	c6da <_svfprintf_r+0x8ca>
    caf4:	ldrd	r3, r2, [sp, #148]	; 0x94
    caf8:	add.w	sl, sp, #156	; 0x9c
    cafc:	b.n	c72c <_svfprintf_r+0x91c>
    cafe:	vmov	r1, s22
    cb02:	add	r2, sp, #144	; 0x90
    cb04:	mov	r0, fp
    cb06:	bl	eb78 <__ssprint_r>
    cb0a:	cmp	r0, #0
    cb0c:	bne.w	c6da <_svfprintf_r+0x8ca>
    cb10:	ldrd	r3, r2, [sp, #148]	; 0x94
    cb14:	add.w	sl, sp, #156	; 0x9c
    cb18:	b.n	c712 <_svfprintf_r+0x902>
    cb1a:	tst.w	r8, #1
    cb1e:	beq.w	c140 <_svfprintf_r+0x330>
    cb22:	b.n	c57a <_svfprintf_r+0x76a>
    cb24:	str	r3, [sp, #32]
    cb26:	ldrb.w	r3, [r9]
    cb2a:	b.w	bec8 <_svfprintf_r+0xb8>
    cb2e:	add	r4, sp, #320	; 0x140
    cb30:	b.n	c4f2 <_svfprintf_r+0x6e2>
    cb32:	tst.w	r8, #512	; 0x200
    cb36:	bne.w	d2f0 <_svfprintf_r+0x14e0>
    cb3a:	ldr.w	r2, [r3], #4
    cb3e:	str	r3, [sp, #32]
    cb40:	asrs	r1, r2, #31
    cb42:	mov	r3, r1
    cb44:	b.w	c2b4 <_svfprintf_r+0x4a4>
    cb48:	ldr	r3, [sp, #32]
    cb4a:	ldr	r0, [sp, #16]
    cb4c:	ldr.w	r1, [r3], #4
    cb50:	str	r3, [sp, #32]
    cb52:	asrs	r2, r0, #31
    cb54:	strd	r0, r2, [r1]
    cb58:	mov	r4, r9
    cb5a:	b.w	be74 <_svfprintf_r+0x64>
    cb5e:	nop
    cb60:	.word	0x20000ac8
    cb64:	.word	0x20000f18
    cb68:	ldr	r3, [sp, #32]
    cb6a:	ldr.w	r2, [r3], #4
    cb6e:	str	r3, [sp, #32]
    cb70:	b.n	c424 <_svfprintf_r+0x614>
    cb72:	vcmp.f64	d8, d8
    cb76:	vmrs	APSR_nzcv, fpscr
    cb7a:	bvs.w	d8a6 <_svfprintf_r+0x1a96>
    cb7e:	ldr	r3, [sp, #44]	; 0x2c
    cb80:	cmp	r3, #97	; 0x61
    cb82:	beq.w	d62a <_svfprintf_r+0x181a>
    cb86:	cmp	r3, #65	; 0x41
    cb88:	beq.w	d70c <_svfprintf_r+0x18fc>
    cb8c:	ldr	r3, [sp, #12]
    cb8e:	adds	r3, #1
    cb90:	ldr	r3, [sp, #44]	; 0x2c
    cb92:	bic.w	r5, r3, #32
    cb96:	beq.w	d49a <_svfprintf_r+0x168a>
    cb9a:	cmp	r5, #71	; 0x47
    cb9c:	bne.n	cba8 <_svfprintf_r+0xd98>
    cb9e:	ldr	r3, [sp, #12]
    cba0:	cmp	r3, #0
    cba2:	it	eq
    cba4:	moveq	r3, #1
    cba6:	str	r3, [sp, #12]
    cba8:	vmov	r3, s17
    cbac:	cmp	r3, #0
    cbae:	orr.w	r2, r8, #256	; 0x100
    cbb2:	mov	r6, r8
    cbb4:	blt.w	d7e8 <_svfprintf_r+0x19d8>
    cbb8:	vmov.f64	d10, d8
    cbbc:	movs	r3, #0
    cbbe:	mov	r8, r2
    cbc0:	str	r3, [sp, #36]	; 0x24
    cbc2:	str	r3, [sp, #28]
    cbc4:	ldr	r3, [sp, #44]	; 0x2c
    cbc6:	subs	r3, #65	; 0x41
    cbc8:	cmp	r3, #37	; 0x25
    cbca:	bhi.w	d2fe <_svfprintf_r+0x14ee>
    cbce:	tbh	[pc, r3, lsl #1]
    cbd2:	.short	0x046f
    cbd4:	.word	0x03960396
    cbd8:	.word	0x04680396
    cbdc:	.word	0x0396046c
    cbe0:	.word	0x03960396
    cbe4:	.word	0x03960396
    cbe8:	.word	0x03960396
    cbec:	.word	0x03960396
    cbf0:	.word	0x03960396
    cbf4:	.word	0x03960396
    cbf8:	.word	0x03960396
    cbfc:	.word	0x03960396
    cc00:	.word	0x03960396
    cc04:	.word	0x03960396
    cc08:	.word	0x03960396
    cc0c:	.word	0x03960396
    cc10:	.word	0x03960396
    cc14:	.word	0x03960396
    cc18:	.word	0x04680396
    cc1c:	.short	0x046c
    cc1e:	ldr	r3, [sp, #32]
    cc20:	ldr.w	r2, [r3], #4
    cc24:	str	r3, [sp, #32]
    cc26:	movs	r3, #1
    cc28:	b.w	c35a <_svfprintf_r+0x54a>
    cc2c:	ldr	r3, [sp, #76]	; 0x4c
    cc2e:	cmp	r3, #0
    cc30:	beq.w	bfd2 <_svfprintf_r+0x1c2>
    cc34:	ldr	r3, [sp, #76]	; 0x4c
    cc36:	ldrb	r3, [r3, #0]
    cc38:	cmp	r3, #0
    cc3a:	beq.w	bfd2 <_svfprintf_r+0x1c2>
    cc3e:	ldrb.w	r3, [r9]
    cc42:	orr.w	r8, r8, #1024	; 0x400
    cc46:	b.w	bec8 <_svfprintf_r+0xb8>
    cc4a:	str	r3, [sp, #44]	; 0x2c
    cc4c:	str.w	r8, [sp, #8]
    cc50:	b.w	c436 <_svfprintf_r+0x626>
    cc54:	str	r3, [sp, #44]	; 0x2c
    cc56:	ldr	r3, [pc, #616]	; (cec0 <_svfprintf_r+0x10b0>)
    cc58:	str	r3, [sp, #68]	; 0x44
    cc5a:	ands.w	r1, r8, #32
    cc5e:	beq.w	ce6c <_svfprintf_r+0x105c>
    cc62:	ldr	r3, [sp, #32]
    cc64:	adds	r3, #7
    cc66:	bic.w	r3, r3, #7
    cc6a:	ldr	r1, [r3, #4]
    cc6c:	ldr.w	r2, [r3], #8
    cc70:	str	r3, [sp, #32]
    cc72:	tst.w	r8, #1
    cc76:	beq.n	cc8e <_svfprintf_r+0xe7e>
    cc78:	orrs.w	r3, r2, r1
    cc7c:	beq.n	cc8e <_svfprintf_r+0xe7e>
    cc7e:	ldr	r3, [sp, #44]	; 0x2c
    cc80:	strb.w	r3, [sp, #105]	; 0x69
    cc84:	movs	r3, #48	; 0x30
    cc86:	orr.w	r8, r8, #2
    cc8a:	strb.w	r3, [sp, #104]	; 0x68
    cc8e:	bic.w	r3, r8, #1024	; 0x400
    cc92:	str	r3, [sp, #8]
    cc94:	movs	r3, #2
    cc96:	b.w	c35a <_svfprintf_r+0x54a>
    cc9a:	str	r3, [sp, #44]	; 0x2c
    cc9c:	b.w	c40c <_svfprintf_r+0x5fc>
    cca0:	str	r3, [sp, #44]	; 0x2c
    cca2:	ldr	r3, [pc, #544]	; (cec4 <_svfprintf_r+0x10b4>)
    cca4:	str	r3, [sp, #68]	; 0x44
    cca6:	b.n	cc5a <_svfprintf_r+0xe4a>
    cca8:	ldr	r3, [sp, #32]
    ccaa:	movs	r1, #1
    ccac:	ldr.w	r2, [r3], #4
    ccb0:	str	r1, [sp, #8]
    ccb2:	strb.w	r2, [sp, #220]	; 0xdc
    ccb6:	str	r3, [sp, #32]
    ccb8:	str	r1, [sp, #20]
    ccba:	add	r4, sp, #220	; 0xdc
    ccbc:	b.w	c21e <_svfprintf_r+0x40e>
    ccc0:	vmov	r1, s22
    ccc4:	add	r2, sp, #144	; 0x90
    ccc6:	mov	r0, fp
    ccc8:	bl	eb78 <__ssprint_r>
    cccc:	cmp	r0, #0
    ccce:	bne.w	c6da <_svfprintf_r+0x8ca>
    ccd2:	ldr	r2, [sp, #152]	; 0x98
    ccd4:	add.w	sl, sp, #156	; 0x9c
    ccd8:	b.n	c596 <_svfprintf_r+0x786>
    ccda:	ldr	r3, [sp, #12]
    ccdc:	str	r4, [sp, #28]
    ccde:	cmp	r3, #6
    cce0:	mov	r2, r4
    cce2:	it	cs
    cce4:	movcs	r3, #6
    cce6:	str	r4, [sp, #12]
    cce8:	mov	r1, r4
    ccea:	strd	r2, r2, [sp, #48]	; 0x30
    ccee:	ldr	r4, [pc, #472]	; (cec8 <_svfprintf_r+0x10b8>)
    ccf0:	str	r3, [sp, #8]
    ccf2:	str	r3, [sp, #20]
    ccf4:	str	r2, [sp, #60]	; 0x3c
    ccf6:	b.w	c1d2 <_svfprintf_r+0x3c2>
    ccfa:	movs	r1, #64	; 0x40
    ccfc:	mov	r0, fp
    ccfe:	bl	a1a0 <_malloc_r>
    cd02:	str	r0, [r4, #0]
    cd04:	str	r0, [r4, #16]
    cd06:	cmp	r0, #0
    cd08:	beq.w	d92a <_svfprintf_r+0x1b1a>
    cd0c:	movs	r3, #64	; 0x40
    cd0e:	str	r3, [r4, #20]
    cd10:	b.w	be50 <_svfprintf_r+0x40>
    cd14:	cmp	r5, #16
    cd16:	ldr	r3, [sp, #148]	; 0x94
    cd18:	ble.w	d1d6 <_svfprintf_r+0x13c6>
    cd1c:	mov	r1, sl
    cd1e:	movs	r6, #16
    cd20:	vmov	sl, s22
    cd24:	b.n	cd30 <_svfprintf_r+0xf20>
    cd26:	adds	r1, #8
    cd28:	subs	r5, #16
    cd2a:	cmp	r5, #16
    cd2c:	ble.w	d1d4 <_svfprintf_r+0x13c4>
    cd30:	adds	r3, #1
    cd32:	ldr	r0, [pc, #408]	; (cecc <_svfprintf_r+0x10bc>)
    cd34:	adds	r2, #16
    cd36:	cmp	r3, #7
    cd38:	strd	r0, r6, [r1]
    cd3c:	strd	r3, r2, [sp, #148]	; 0x94
    cd40:	ble.n	cd26 <_svfprintf_r+0xf16>
    cd42:	add	r2, sp, #144	; 0x90
    cd44:	mov	r1, sl
    cd46:	mov	r0, fp
    cd48:	bl	eb78 <__ssprint_r>
    cd4c:	cmp	r0, #0
    cd4e:	bne.w	c6da <_svfprintf_r+0x8ca>
    cd52:	ldrd	r3, r2, [sp, #148]	; 0x94
    cd56:	add	r1, sp, #156	; 0x9c
    cd58:	b.n	cd28 <_svfprintf_r+0xf18>
    cd5a:	ldr	r3, [sp, #56]	; 0x38
    cd5c:	str.w	r9, [sp, #36]	; 0x24
    cd60:	adds	r3, r4, r3
    cd62:	str	r3, [sp, #12]
    cd64:	ldr	r3, [sp, #52]	; 0x34
    cd66:	str.w	r8, [sp, #40]	; 0x28
    cd6a:	ldr	r6, [sp, #76]	; 0x4c
    cd6c:	ldr	r5, [sp, #20]
    cd6e:	ldr.w	r9, [sp, #88]	; 0x58
    cd72:	ldr.w	r8, [sp, #60]	; 0x3c
    cd76:	str	r4, [sp, #44]	; 0x2c
    cd78:	vmov	r1, s22
    cd7c:	mov	r0, sl
    cd7e:	cmp	r3, #0
    cd80:	beq.n	cdec <_svfprintf_r+0xfdc>
    cd82:	cmp.w	r8, #0
    cd86:	bne.n	cdf4 <_svfprintf_r+0xfe4>
    cd88:	ldr	r3, [sp, #52]	; 0x34
    cd8a:	subs	r3, #1
    cd8c:	subs	r6, #1
    cd8e:	str	r3, [sp, #52]	; 0x34
    cd90:	ldr	r3, [sp, #84]	; 0x54
    cd92:	strd	r3, r9, [r0]
    cd96:	ldr	r3, [sp, #148]	; 0x94
    cd98:	adds	r3, #1
    cd9a:	add	r2, r9
    cd9c:	cmp	r3, #7
    cd9e:	str	r2, [sp, #152]	; 0x98
    cda0:	str	r3, [sp, #148]	; 0x94
    cda2:	bgt.n	ce7e <_svfprintf_r+0x106e>
    cda4:	adds	r0, #8
    cda6:	ldr	r3, [sp, #12]
    cda8:	ldrb.w	ip, [r6]
    cdac:	subs	r3, r3, r5
    cdae:	cmp	r3, ip
    cdb0:	it	ge
    cdb2:	movge	r3, ip
    cdb4:	cmp	r3, #0
    cdb6:	mov	sl, r3
    cdb8:	ble.n	cdd4 <_svfprintf_r+0xfc4>
    cdba:	ldr	r4, [sp, #148]	; 0x94
    cdbc:	adds	r4, #1
    cdbe:	add	r2, r3
    cdc0:	cmp	r4, #7
    cdc2:	strd	r5, r3, [r0]
    cdc6:	str	r2, [sp, #152]	; 0x98
    cdc8:	str	r4, [sp, #148]	; 0x94
    cdca:	bgt.w	d0bc <_svfprintf_r+0x12ac>
    cdce:	ldrb.w	ip, [r6]
    cdd2:	adds	r0, #8
    cdd4:	cmp.w	sl, #0
    cdd8:	ite	ge
    cdda:	subge.w	r4, ip, sl
    cdde:	movlt	r4, ip
    cde0:	cmp	r4, #0
    cde2:	bgt.n	cdfa <_svfprintf_r+0xfea>
    cde4:	add	r5, ip
    cde6:	ldr	r3, [sp, #52]	; 0x34
    cde8:	cmp	r3, #0
    cdea:	bne.n	cd82 <_svfprintf_r+0xf72>
    cdec:	cmp.w	r8, #0
    cdf0:	beq.w	d54c <_svfprintf_r+0x173c>
    cdf4:	add.w	r8, r8, #4294967295
    cdf8:	b.n	cd90 <_svfprintf_r+0xf80>
    cdfa:	cmp	r4, #16
    cdfc:	ldr.w	ip, [sp, #148]	; 0x94
    ce00:	ble.n	ce4c <_svfprintf_r+0x103c>
    ce02:	str	r5, [sp, #20]
    ce04:	mov.w	sl, #16
    ce08:	mov	r3, ip
    ce0a:	mov	r5, r1
    ce0c:	b.n	ce18 <_svfprintf_r+0x1008>
    ce0e:	subs	r4, #16
    ce10:	cmp	r4, #16
    ce12:	add.w	r0, r0, #8
    ce16:	ble.n	ce46 <_svfprintf_r+0x1036>
    ce18:	adds	r3, #1
    ce1a:	ldr	r1, [pc, #176]	; (cecc <_svfprintf_r+0x10bc>)
    ce1c:	adds	r2, #16
    ce1e:	cmp	r3, #7
    ce20:	strd	r1, sl, [r0]
    ce24:	strd	r3, r2, [sp, #148]	; 0x94
    ce28:	ble.n	ce0e <_svfprintf_r+0xffe>
    ce2a:	add	r2, sp, #144	; 0x90
    ce2c:	mov	r1, r5
    ce2e:	mov	r0, fp
    ce30:	bl	eb78 <__ssprint_r>
    ce34:	cmp	r0, #0
    ce36:	bne.w	c6da <_svfprintf_r+0x8ca>
    ce3a:	subs	r4, #16
    ce3c:	cmp	r4, #16
    ce3e:	ldrd	r3, r2, [sp, #148]	; 0x94
    ce42:	add	r0, sp, #156	; 0x9c
    ce44:	bgt.n	ce18 <_svfprintf_r+0x1008>
    ce46:	mov	r1, r5
    ce48:	ldr	r5, [sp, #20]
    ce4a:	mov	ip, r3
    ce4c:	add.w	r3, ip, #1
    ce50:	add	r2, r4
    ce52:	str	r4, [r0, #4]
    ce54:	cmp	r3, #7
    ce56:	ldr	r4, [pc, #116]	; (cecc <_svfprintf_r+0x10bc>)
    ce58:	str	r4, [r0, #0]
    ce5a:	strd	r3, r2, [sp, #148]	; 0x94
    ce5e:	bgt.w	d5ee <_svfprintf_r+0x17de>
    ce62:	ldrb.w	ip, [r6]
    ce66:	adds	r0, #8
    ce68:	add	r5, ip
    ce6a:	b.n	cde6 <_svfprintf_r+0xfd6>
    ce6c:	ands.w	r3, r8, #16
    ce70:	beq.w	cff8 <_svfprintf_r+0x11e8>
    ce74:	ldr	r3, [sp, #32]
    ce76:	ldr.w	r2, [r3], #4
    ce7a:	str	r3, [sp, #32]
    ce7c:	b.n	cc72 <_svfprintf_r+0xe62>
    ce7e:	add	r2, sp, #144	; 0x90
    ce80:	mov	r0, fp
    ce82:	str	r1, [sp, #20]
    ce84:	bl	eb78 <__ssprint_r>
    ce88:	cmp	r0, #0
    ce8a:	bne.w	c6da <_svfprintf_r+0x8ca>
    ce8e:	ldr	r2, [sp, #152]	; 0x98
    ce90:	ldr	r1, [sp, #20]
    ce92:	add	r0, sp, #156	; 0x9c
    ce94:	b.n	cda6 <_svfprintf_r+0xf96>
    ce96:	ldr	r0, [sp, #8]
    ce98:	str.w	sl, [sp, #28]
    ce9c:	add	r4, sp, #320	; 0x140
    ce9e:	and.w	r0, r0, #1024	; 0x400
    cea2:	movs	r5, #0
    cea4:	vmov	s20, fp
    cea8:	ldr	r3, [pc, #36]	; (ced0 <_svfprintf_r+0x10c0>)
    ceaa:	ldr.w	sl, [sp, #76]	; 0x4c
    ceae:	str.w	r9, [sp, #20]
    ceb2:	mov	fp, r4
    ceb4:	mov.w	r8, #5
    ceb8:	mov	ip, r5
    ceba:	mov	r4, r0
    cebc:	b.n	cee0 <_svfprintf_r+0x10d0>
    cebe:	nop
    cec0:	.word	0x20000a94
    cec4:	.word	0x20000aa8
    cec8:	.word	0x20000abc
    cecc:	.word	0x20000f18
    ced0:	.word	0xcccccccd
    ced4:	cmp	r2, #10
    ced6:	sbcs.w	r1, r1, #0
    ceda:	bcc.n	cf4a <_svfprintf_r+0x113a>
    cedc:	mov	r2, r9
    cede:	mov	r1, r6
    cee0:	adds	r0, r2, r1
    cee2:	adc.w	r0, r0, #0
    cee6:	umull	r5, r6, r3, r0
    ceea:	bic.w	r5, r6, #3
    ceee:	add.w	r5, r5, r6, lsr #2
    cef2:	subs	r0, r0, r5
    cef4:	subs	r5, r2, r0
    cef6:	mov.w	r6, #3435973836	; 0xcccccccc
    cefa:	sbc.w	lr, r1, #0
    cefe:	mul.w	r6, r6, r5
    cf02:	umull	r9, r5, r5, r3
    cf06:	mla	r6, r3, lr, r6
    cf0a:	and.w	lr, r9, #1
    cf0e:	add	r6, r5
    cf10:	umull	r5, lr, lr, r8
    cf14:	adds	r5, r5, r0
    cf16:	mov.w	r9, r9, lsr #1
    cf1a:	adds	r5, #48	; 0x30
    cf1c:	strb.w	r5, [fp, #-1]
    cf20:	orr.w	r9, r9, r6, lsl #31
    cf24:	add.w	ip, ip, #1
    cf28:	add.w	fp, fp, #4294967295
    cf2c:	lsrs	r6, r6, #1
    cf2e:	cmp	r4, #0
    cf30:	beq.n	ced4 <_svfprintf_r+0x10c4>
    cf32:	ldrb.w	r0, [sl]
    cf36:	cmp	ip, r0
    cf38:	bne.n	ced4 <_svfprintf_r+0x10c4>
    cf3a:	cmp.w	ip, #255	; 0xff
    cf3e:	beq.n	ced4 <_svfprintf_r+0x10c4>
    cf40:	cmp	r2, #10
    cf42:	sbcs.w	r1, r1, #0
    cf46:	bcs.w	d268 <_svfprintf_r+0x1458>
    cf4a:	mov	r4, fp
    cf4c:	add	r3, sp, #320	; 0x140
    cf4e:	subs	r3, r3, r4
    cf50:	ldr.w	r9, [sp, #20]
    cf54:	str.w	sl, [sp, #76]	; 0x4c
    cf58:	vmov	fp, s20
    cf5c:	ldr.w	sl, [sp, #28]
    cf60:	ldr.w	r8, [sp, #8]
    cf64:	str.w	ip, [sp, #56]	; 0x38
    cf68:	str	r3, [sp, #20]
    cf6a:	b.w	c4f2 <_svfprintf_r+0x6e2>
    cf6e:	vmov	r1, s22
    cf72:	add	r2, sp, #144	; 0x90
    cf74:	mov	r0, fp
    cf76:	bl	eb78 <__ssprint_r>
    cf7a:	cmp	r0, #0
    cf7c:	bne.w	c6da <_svfprintf_r+0x8ca>
    cf80:	ldrb.w	r1, [sp, #103]	; 0x67
    cf84:	ldr	r2, [sp, #152]	; 0x98
    cf86:	add.w	sl, sp, #156	; 0x9c
    cf8a:	b.w	c0ba <_svfprintf_r+0x2aa>
    cf8e:	ldr	r3, [sp, #148]	; 0x94
    cf90:	ldr	r0, [pc, #760]	; (d28c <_svfprintf_r+0x147c>)
    cf92:	str.w	r0, [sl]
    cf96:	adds	r3, #1
    cf98:	adds	r2, #1
    cf9a:	movs	r0, #1
    cf9c:	cmp	r3, #7
    cf9e:	str	r2, [sp, #152]	; 0x98
    cfa0:	str	r3, [sp, #148]	; 0x94
    cfa2:	str.w	r0, [sl, #4]
    cfa6:	bgt.w	d298 <_svfprintf_r+0x1488>
    cfaa:	add.w	sl, sl, #8
    cfae:	cmp	r1, #0
    cfb0:	bne.w	d112 <_svfprintf_r+0x1302>
    cfb4:	ldr	r1, [sp, #56]	; 0x38
    cfb6:	and.w	r3, r8, #1
    cfba:	orrs	r3, r1
    cfbc:	beq.w	c140 <_svfprintf_r+0x330>
    cfc0:	ldr	r3, [sp, #64]	; 0x40
    cfc2:	ldr	r1, [sp, #72]	; 0x48
    cfc4:	add	r2, r3
    cfc6:	strd	r1, r3, [sl]
    cfca:	ldr	r3, [sp, #148]	; 0x94
    cfcc:	str	r2, [sp, #152]	; 0x98
    cfce:	adds	r3, #1
    cfd0:	cmp	r3, #7
    cfd2:	str	r3, [sp, #148]	; 0x94
    cfd4:	bgt.w	d47c <_svfprintf_r+0x166c>
    cfd8:	add.w	sl, sl, #8
    cfdc:	ldr	r1, [sp, #56]	; 0x38
    cfde:	str.w	r4, [sl]
    cfe2:	adds	r3, #1
    cfe4:	add	r2, r1
    cfe6:	cmp	r3, #7
    cfe8:	strd	r3, r2, [sp, #148]	; 0x94
    cfec:	str.w	r1, [sl, #4]
    cff0:	ble.w	c13c <_svfprintf_r+0x32c>
    cff4:	b.w	c772 <_svfprintf_r+0x962>
    cff8:	ands.w	r2, r8, #64	; 0x40
    cffc:	beq.w	d1ba <_svfprintf_r+0x13aa>
    d000:	ldr	r0, [sp, #32]
    d002:	ldr.w	r2, [r0], #4
    d006:	str	r0, [sp, #32]
    d008:	mov	r1, r3
    d00a:	uxth	r2, r2
    d00c:	b.n	cc72 <_svfprintf_r+0xe62>
    d00e:	vmov	r1, s22
    d012:	add	r2, sp, #144	; 0x90
    d014:	mov	r0, fp
    d016:	bl	eb78 <__ssprint_r>
    d01a:	cmp	r0, #0
    d01c:	bne.w	c6da <_svfprintf_r+0x8ca>
    d020:	ldr	r2, [sp, #152]	; 0x98
    d022:	add.w	sl, sp, #156	; 0x9c
    d026:	b.w	c570 <_svfprintf_r+0x760>
    d02a:	add	r6, sp, #136	; 0x88
    d02c:	movs	r2, #8
    d02e:	movs	r1, #0
    d030:	mov	r0, r6
    d032:	str	r4, [sp, #116]	; 0x74
    d034:	bl	7528 <memset>
    d038:	ldr	r3, [sp, #12]
    d03a:	adds	r2, r3, #1
    d03c:	beq.w	d1f6 <_svfprintf_r+0x13e6>
    d040:	movs	r5, #0
    d042:	str.w	r9, [sp, #8]
    d046:	str.w	r8, [sp, #28]
    d04a:	mov	r9, r3
    d04c:	mov	r8, r5
    d04e:	b.n	d06a <_svfprintf_r+0x125a>
    d050:	add	r1, sp, #220	; 0xdc
    d052:	mov	r0, fp
    d054:	bl	eaec <_wcrtomb_r>
    d058:	adds	r3, r0, #1
    d05a:	add	r0, r8
    d05c:	beq.w	d7f0 <_svfprintf_r+0x19e0>
    d060:	cmp	r0, r9
    d062:	bgt.n	d076 <_svfprintf_r+0x1266>
    d064:	beq.w	d898 <_svfprintf_r+0x1a88>
    d068:	mov	r8, r0
    d06a:	ldr	r2, [sp, #116]	; 0x74
    d06c:	ldr	r2, [r2, r5]
    d06e:	mov	r3, r6
    d070:	adds	r5, #4
    d072:	cmp	r2, #0
    d074:	bne.n	d050 <_svfprintf_r+0x1240>
    d076:	str.w	r8, [sp, #20]
    d07a:	ldr.w	r9, [sp, #8]
    d07e:	ldr.w	r8, [sp, #28]
    d082:	b.n	d210 <_svfprintf_r+0x1400>
    d084:	adds	r3, #1
    d086:	ldr	r1, [pc, #520]	; (d290 <_svfprintf_r+0x1480>)
    d088:	str.w	r4, [sl, #4]
    d08c:	add	r2, r4
    d08e:	cmp	r3, #7
    d090:	str.w	r1, [sl]
    d094:	strd	r3, r2, [sp, #148]	; 0x94
    d098:	ble.w	c13c <_svfprintf_r+0x32c>
    d09c:	b.w	c772 <_svfprintf_r+0x962>
    d0a0:	vmov	r1, s22
    d0a4:	add	r2, sp, #144	; 0x90
    d0a6:	mov	r0, fp
    d0a8:	bl	eb78 <__ssprint_r>
    d0ac:	cmp	r0, #0
    d0ae:	bne.w	c6da <_svfprintf_r+0x8ca>
    d0b2:	ldr	r2, [sp, #152]	; 0x98
    d0b4:	add.w	sl, sp, #156	; 0x9c
    d0b8:	b.w	c10e <_svfprintf_r+0x2fe>
    d0bc:	add	r2, sp, #144	; 0x90
    d0be:	mov	r0, fp
    d0c0:	str	r1, [sp, #20]
    d0c2:	bl	eb78 <__ssprint_r>
    d0c6:	cmp	r0, #0
    d0c8:	bne.w	c6da <_svfprintf_r+0x8ca>
    d0cc:	ldrb.w	ip, [r6]
    d0d0:	ldr	r2, [sp, #152]	; 0x98
    d0d2:	ldr	r1, [sp, #20]
    d0d4:	add	r0, sp, #156	; 0x9c
    d0d6:	b.n	cdd4 <_svfprintf_r+0xfc4>
    d0d8:	cmp	r3, #1
    d0da:	str.w	r8, [sp, #8]
    d0de:	bne.w	c4c8 <_svfprintf_r+0x6b8>
    d0e2:	b.w	c80c <_svfprintf_r+0x9fc>
    d0e6:	ldr	r3, [sp, #32]
    d0e8:	ldr	r1, [sp, #16]
    d0ea:	ldr.w	r2, [r3], #4
    d0ee:	mov	r4, r9
    d0f0:	str	r1, [r2, #0]
    d0f2:	str	r3, [sp, #32]
    d0f4:	b.w	be74 <_svfprintf_r+0x64>
    d0f8:	adds	r3, #1
    d0fa:	ldr	r1, [pc, #404]	; (d290 <_svfprintf_r+0x1480>)
    d0fc:	str.w	r4, [sl, #4]
    d100:	add	r2, r4
    d102:	cmp	r3, #7
    d104:	strd	r3, r2, [sp, #148]	; 0x94
    d108:	str.w	r1, [sl]
    d10c:	ble.w	c754 <_svfprintf_r+0x944>
    d110:	b.n	ca0a <_svfprintf_r+0xbfa>
    d112:	ldr	r3, [sp, #64]	; 0x40
    d114:	ldr	r0, [sp, #72]	; 0x48
    d116:	add	r2, r3
    d118:	strd	r0, r3, [sl]
    d11c:	ldr	r3, [sp, #148]	; 0x94
    d11e:	str	r2, [sp, #152]	; 0x98
    d120:	adds	r3, #1
    d122:	cmp	r3, #7
    d124:	str	r3, [sp, #148]	; 0x94
    d126:	bgt.w	d47c <_svfprintf_r+0x166c>
    d12a:	add.w	sl, sl, #8
    d12e:	cmp	r1, #0
    d130:	bge.w	cfdc <_svfprintf_r+0x11cc>
    d134:	negs	r5, r1
    d136:	adds	r1, #16
    d138:	bge.w	d75a <_svfprintf_r+0x194a>
    d13c:	vmov	r1, s22
    d140:	movs	r6, #16
    d142:	b.n	d150 <_svfprintf_r+0x1340>
    d144:	add.w	sl, sl, #8
    d148:	subs	r5, #16
    d14a:	cmp	r5, #16
    d14c:	ble.w	d75a <_svfprintf_r+0x194a>
    d150:	adds	r3, #1
    d152:	ldr	r0, [pc, #316]	; (d290 <_svfprintf_r+0x1480>)
    d154:	adds	r2, #16
    d156:	cmp	r3, #7
    d158:	strd	r0, r6, [sl]
    d15c:	strd	r3, r2, [sp, #148]	; 0x94
    d160:	ble.n	d144 <_svfprintf_r+0x1334>
    d162:	add	r2, sp, #144	; 0x90
    d164:	mov	r0, fp
    d166:	str	r1, [sp, #12]
    d168:	bl	eb78 <__ssprint_r>
    d16c:	cmp	r0, #0
    d16e:	bne.w	c6da <_svfprintf_r+0x8ca>
    d172:	ldrd	r3, r2, [sp, #148]	; 0x94
    d176:	ldr	r1, [sp, #12]
    d178:	add.w	sl, sp, #156	; 0x9c
    d17c:	b.n	d148 <_svfprintf_r+0x1338>
    d17e:	ldr	r3, [sp, #32]
    d180:	ands.w	r1, r8, #512	; 0x200
    d184:	itte	ne
    d186:	movne	r1, r2
    d188:	ldrne.w	r2, [r3], #4
    d18c:	ldreq.w	r2, [r3], #4
    d190:	str	r3, [sp, #32]
    d192:	it	ne
    d194:	uxtbne	r2, r2
    d196:	b.w	c424 <_svfprintf_r+0x614>
    d19a:	ldr	r3, [sp, #8]
    d19c:	ands.w	r1, r3, #512	; 0x200
    d1a0:	ldr	r3, [sp, #32]
    d1a2:	itte	ne
    d1a4:	movne	r1, r2
    d1a6:	ldrne.w	r2, [r3], #4
    d1aa:	ldreq.w	r2, [r3], #4
    d1ae:	str	r3, [sp, #32]
    d1b0:	it	ne
    d1b2:	uxtbne	r2, r2
    d1b4:	movs	r3, #1
    d1b6:	b.w	c35a <_svfprintf_r+0x54a>
    d1ba:	ldr	r3, [sp, #32]
    d1bc:	ands.w	r1, r8, #512	; 0x200
    d1c0:	itte	ne
    d1c2:	movne	r1, r2
    d1c4:	ldrne.w	r2, [r3], #4
    d1c8:	ldreq.w	r2, [r3], #4
    d1cc:	str	r3, [sp, #32]
    d1ce:	it	ne
    d1d0:	uxtbne	r2, r2
    d1d2:	b.n	cc72 <_svfprintf_r+0xe62>
    d1d4:	mov	sl, r1
    d1d6:	adds	r3, #1
    d1d8:	ldr	r1, [pc, #180]	; (d290 <_svfprintf_r+0x1480>)
    d1da:	str.w	r5, [sl, #4]
    d1de:	add	r2, r5
    d1e0:	cmp	r3, #7
    d1e2:	strd	r3, r2, [sp, #148]	; 0x94
    d1e6:	str.w	r1, [sl]
    d1ea:	bgt.w	d460 <_svfprintf_r+0x1650>
    d1ee:	add.w	sl, sl, #8
    d1f2:	b.w	c90e <_svfprintf_r+0xafe>
    d1f6:	movs	r3, #0
    d1f8:	mov	r1, r3
    d1fa:	str	r6, [sp, #0]
    d1fc:	add	r2, sp, #116	; 0x74
    d1fe:	mov	r0, fp
    d200:	bl	eb38 <_wcsrtombs_r>
    d204:	mov	r3, r0
    d206:	adds	r3, #1
    d208:	str	r0, [sp, #20]
    d20a:	beq.w	d7f0 <_svfprintf_r+0x19e0>
    d20e:	str	r4, [sp, #116]	; 0x74
    d210:	ldr	r3, [sp, #20]
    d212:	cmp	r3, #0
    d214:	beq.n	d2b4 <_svfprintf_r+0x14a4>
    d216:	cmp	r3, #99	; 0x63
    d218:	bgt.w	d44c <_svfprintf_r+0x163c>
    d21c:	movs	r3, #0
    d21e:	str	r3, [sp, #28]
    d220:	add	r4, sp, #220	; 0xdc
    d222:	movs	r2, #8
    d224:	movs	r1, #0
    d226:	mov	r0, r6
    d228:	bl	7528 <memset>
    d22c:	ldr	r5, [sp, #20]
    d22e:	str	r6, [sp, #0]
    d230:	mov	r3, r5
    d232:	add	r2, sp, #116	; 0x74
    d234:	mov	r1, r4
    d236:	mov	r0, fp
    d238:	bl	eb38 <_wcsrtombs_r>
    d23c:	cmp	r5, r0
    d23e:	bne.w	d93a <_svfprintf_r+0x1b2a>
    d242:	ldr	r2, [sp, #20]
    d244:	movs	r3, #0
    d246:	strb	r3, [r4, r2]
    d248:	bic.w	r2, r2, r2, asr #31
    d24c:	strd	r3, r3, [sp, #48]	; 0x30
    d250:	ldrb.w	r1, [sp, #103]	; 0x67
    d254:	str	r3, [sp, #12]
    d256:	str	r2, [sp, #8]
    d258:	str	r3, [sp, #60]	; 0x3c
    d25a:	b.w	c1d2 <_svfprintf_r+0x3c2>
    d25e:	movs	r1, #45	; 0x2d
    d260:	strb.w	r1, [sp, #103]	; 0x67
    d264:	b.w	c1b0 <_svfprintf_r+0x3a0>
    d268:	ldr	r3, [sp, #88]	; 0x58
    d26a:	ldr	r1, [sp, #84]	; 0x54
    d26c:	sub.w	fp, fp, r3
    d270:	mov	r2, r3
    d272:	mov	r0, fp
    d274:	bl	b000 <strncpy>
    d278:	ldrb.w	r2, [sl, #1]
    d27c:	ldr	r3, [pc, #20]	; (d294 <_svfprintf_r+0x1484>)
    d27e:	cbz	r2, d284 <_svfprintf_r+0x1474>
    d280:	add.w	sl, sl, #1
    d284:	mov.w	ip, #0
    d288:	b.n	cedc <_svfprintf_r+0x10cc>
    d28a:	nop
    d28c:	.word	0x20000ac4
    d290:	.word	0x20000f18
    d294:	.word	0xcccccccd
    d298:	vmov	r1, s22
    d29c:	add	r2, sp, #144	; 0x90
    d29e:	mov	r0, fp
    d2a0:	bl	eb78 <__ssprint_r>
    d2a4:	cmp	r0, #0
    d2a6:	bne.w	c6da <_svfprintf_r+0x8ca>
    d2aa:	ldr	r1, [sp, #108]	; 0x6c
    d2ac:	ldr	r2, [sp, #152]	; 0x98
    d2ae:	add.w	sl, sp, #156	; 0x9c
    d2b2:	b.n	cfae <_svfprintf_r+0x119e>
    d2b4:	ldr	r3, [sp, #20]
    d2b6:	ldrb.w	r1, [sp, #103]	; 0x67
    d2ba:	str	r3, [sp, #60]	; 0x3c
    d2bc:	strd	r3, r3, [sp, #8]
    d2c0:	strd	r3, r3, [sp, #48]	; 0x30
    d2c4:	str	r3, [sp, #28]
    d2c6:	b.w	c1d2 <_svfprintf_r+0x3c2>
    d2ca:	ldr	r1, [sp, #56]	; 0x38
    d2cc:	ldr	r0, [sp, #20]
    d2ce:	adds	r5, r4, r1
    d2d0:	subs	r5, r5, r0
    d2d2:	subs	r4, r1, r3
    d2d4:	cmp	r5, r4
    d2d6:	it	ge
    d2d8:	movge	r5, r4
    d2da:	b.w	c978 <_svfprintf_r+0xb68>
    d2de:	ldr	r3, [sp, #32]
    d2e0:	ldr	r1, [sp, #16]
    d2e2:	ldr.w	r2, [r3], #4
    d2e6:	str	r3, [sp, #32]
    d2e8:	strh	r1, [r2, #0]
    d2ea:	mov	r4, r9
    d2ec:	b.w	be74 <_svfprintf_r+0x64>
    d2f0:	ldrsb.w	r2, [r3], #4
    d2f4:	str	r3, [sp, #32]
    d2f6:	asrs	r1, r2, #31
    d2f8:	mov	r3, r1
    d2fa:	b.w	c2b4 <_svfprintf_r+0x4a4>
    d2fe:	ldr	r2, [sp, #12]
    d300:	movs	r1, #2
    d302:	add	r3, sp, #136	; 0x88
    d304:	str	r3, [sp, #4]
    d306:	add	r3, sp, #116	; 0x74
    d308:	str	r3, [sp, #0]
    d30a:	mov	r0, fp
    d30c:	add	r3, sp, #108	; 0x6c
    d30e:	vmov.f64	d0, d10
    d312:	str	r2, [sp, #8]
    d314:	bl	de00 <_dtoa_r>
    d318:	cmp	r5, #71	; 0x47
    d31a:	ldr	r2, [sp, #8]
    d31c:	mov	r4, r0
    d31e:	beq.w	d5e4 <_svfprintf_r+0x17d4>
    d322:	cmp	r5, #70	; 0x46
    d324:	add	r0, r2
    d326:	bne.n	d334 <_svfprintf_r+0x1524>
    d328:	ldrb	r3, [r4, #0]
    d32a:	cmp	r3, #48	; 0x30
    d32c:	beq.w	d80e <_svfprintf_r+0x19fe>
    d330:	ldr	r2, [sp, #108]	; 0x6c
    d332:	add	r0, r2
    d334:	vcmp.f64	d10, #0.0
    d338:	vmrs	APSR_nzcv, fpscr
    d33c:	bne.w	d5cc <_svfprintf_r+0x17bc>
    d340:	mov	r3, r0
    d342:	subs	r3, r3, r4
    d344:	str	r3, [sp, #56]	; 0x38
    d346:	cmp	r5, #71	; 0x47
    d348:	beq.w	d56c <_svfprintf_r+0x175c>
    d34c:	cmp	r5, #70	; 0x46
    d34e:	beq.w	d6bc <_svfprintf_r+0x18ac>
    d352:	ldr	r3, [sp, #108]	; 0x6c
    d354:	str	r3, [sp, #48]	; 0x30
    d356:	ldr	r3, [sp, #48]	; 0x30
    d358:	cmp	r5, #65	; 0x41
    d35a:	add.w	r3, r3, #4294967295
    d35e:	str	r3, [sp, #108]	; 0x6c
    d360:	beq.w	d72e <_svfprintf_r+0x191e>
    d364:	ldrb.w	r2, [sp, #44]	; 0x2c
    d368:	movs	r1, #0
    d36a:	cmp	r3, #0
    d36c:	it	lt
    d36e:	ldrlt	r3, [sp, #48]	; 0x30
    d370:	strb.w	r2, [sp, #120]	; 0x78
    d374:	itte	lt
    d376:	rsblt	r3, r3, #1
    d37a:	movlt	r2, #45	; 0x2d
    d37c:	movge	r2, #43	; 0x2b
    d37e:	cmp	r3, #9
    d380:	strb.w	r2, [sp, #121]	; 0x79
    d384:	ble.w	d73c <_svfprintf_r+0x192c>
    d388:	add.w	r5, sp, #143	; 0x8f
    d38c:	ldr.w	ip, [pc, #1052]	; d7ac <_svfprintf_r+0x199c>
    d390:	mov	r2, r5
    d392:	mov	r0, r2
    d394:	smull	r2, r1, ip, r3
    d398:	asrs	r2, r3, #31
    d39a:	rsb	r2, r2, r1, asr #2
    d39e:	add.w	r1, r2, r2, lsl #2
    d3a2:	sub.w	r1, r3, r1, lsl #1
    d3a6:	adds	r1, #48	; 0x30
    d3a8:	strb.w	r1, [r0, #-1]
    d3ac:	mov	r1, r3
    d3ae:	cmp	r1, #99	; 0x63
    d3b0:	mov	r3, r2
    d3b2:	add.w	r2, r0, #4294967295
    d3b6:	bgt.n	d392 <_svfprintf_r+0x1582>
    d3b8:	adds	r3, #48	; 0x30
    d3ba:	uxtb	r1, r3
    d3bc:	subs	r3, r0, #2
    d3be:	cmp	r5, r3
    d3c0:	strb.w	r1, [r2, #-1]
    d3c4:	bls.w	d8de <_svfprintf_r+0x1ace>
    d3c8:	mov	r3, r2
    d3ca:	add.w	r2, sp, #122	; 0x7a
    d3ce:	b.n	d3d4 <_svfprintf_r+0x15c4>
    d3d0:	ldrb.w	r1, [r3], #1
    d3d4:	strb.w	r1, [r2], #1
    d3d8:	cmp	r5, r3
    d3da:	bne.n	d3d0 <_svfprintf_r+0x15c0>
    d3dc:	add.w	r3, sp, #145	; 0x91
    d3e0:	add.w	r2, sp, #122	; 0x7a
    d3e4:	subs	r3, r3, r0
    d3e6:	add	r3, r2
    d3e8:	add	r2, sp, #120	; 0x78
    d3ea:	subs	r3, r3, r2
    d3ec:	str	r3, [sp, #80]	; 0x50
    d3ee:	ldr	r3, [sp, #56]	; 0x38
    d3f0:	ldr	r2, [sp, #80]	; 0x50
    d3f2:	cmp	r3, #1
    d3f4:	add	r2, r3
    d3f6:	str	r2, [sp, #20]
    d3f8:	ble.w	d802 <_svfprintf_r+0x19f2>
    d3fc:	ldr	r3, [sp, #20]
    d3fe:	ldr	r2, [sp, #64]	; 0x40
    d400:	add	r3, r2
    d402:	str	r3, [sp, #20]
    d404:	bic.w	r3, r6, #1024	; 0x400
    d408:	ldr	r2, [sp, #20]
    d40a:	orr.w	r8, r3, #256	; 0x100
    d40e:	movs	r3, #0
    d410:	strd	r3, r3, [sp, #48]	; 0x30
    d414:	bic.w	r2, r2, r2, asr #31
    d418:	str	r3, [sp, #60]	; 0x3c
    d41a:	str	r2, [sp, #8]
    d41c:	ldr	r3, [sp, #36]	; 0x24
    d41e:	cmp	r3, #0
    d420:	bne.w	d586 <_svfprintf_r+0x1776>
    d424:	ldrb.w	r1, [sp, #103]	; 0x67
    d428:	str	r3, [sp, #12]
    d42a:	b.w	c1d2 <_svfprintf_r+0x3c2>
    d42e:	mov	r0, r4
    d430:	bl	b240 <strlen>
    d434:	mov	r2, r0
    d436:	str	r0, [sp, #20]
    d438:	b.w	c27c <_svfprintf_r+0x46c>
    d43c:	vmov	r1, s22
    d440:	add	r2, sp, #144	; 0x90
    d442:	mov	r0, fp
    d444:	bl	eb78 <__ssprint_r>
    d448:	b.w	c026 <_svfprintf_r+0x216>
    d44c:	adds	r1, r3, #1
    d44e:	mov	r0, fp
    d450:	bl	a1a0 <_malloc_r>
    d454:	mov	r4, r0
    d456:	cmp	r0, #0
    d458:	beq.w	d7f0 <_svfprintf_r+0x19e0>
    d45c:	str	r0, [sp, #28]
    d45e:	b.n	d222 <_svfprintf_r+0x1412>
    d460:	vmov	r1, s22
    d464:	add	r2, sp, #144	; 0x90
    d466:	mov	r0, fp
    d468:	bl	eb78 <__ssprint_r>
    d46c:	cmp	r0, #0
    d46e:	bne.w	c6da <_svfprintf_r+0x8ca>
    d472:	ldr	r2, [sp, #152]	; 0x98
    d474:	add.w	sl, sp, #156	; 0x9c
    d478:	b.w	c90e <_svfprintf_r+0xafe>
    d47c:	vmov	r1, s22
    d480:	add	r2, sp, #144	; 0x90
    d482:	mov	r0, fp
    d484:	bl	eb78 <__ssprint_r>
    d488:	cmp	r0, #0
    d48a:	bne.w	c6da <_svfprintf_r+0x8ca>
    d48e:	ldrd	r3, r2, [sp, #148]	; 0x94
    d492:	ldr	r1, [sp, #108]	; 0x6c
    d494:	add.w	sl, sp, #156	; 0x9c
    d498:	b.n	d12e <_svfprintf_r+0x131e>
    d49a:	movs	r3, #6
    d49c:	str	r3, [sp, #12]
    d49e:	b.w	cba8 <_svfprintf_r+0xd98>
    d4a2:	ldr	r3, [sp, #12]
    d4a4:	movs	r1, #2
    d4a6:	adds	r2, r3, #1
    d4a8:	b.n	d302 <_svfprintf_r+0x14f2>
    d4aa:	ldr	r2, [sp, #12]
    d4ac:	movs	r1, #3
    d4ae:	b.n	d302 <_svfprintf_r+0x14f2>
    d4b0:	add	r0, sp, #108	; 0x6c
    d4b2:	vmov.f64	d0, d10
    d4b6:	bl	dba8 <frexp>
    d4ba:	vmov.f64	d7, #64	; 0x3e000000  0.125
    d4be:	vmul.f64	d0, d0, d7
    d4c2:	vcmp.f64	d0, #0.0
    d4c6:	vmrs	APSR_nzcv, fpscr
    d4ca:	bne.n	d4d0 <_svfprintf_r+0x16c0>
    d4cc:	movs	r3, #1
    d4ce:	str	r3, [sp, #108]	; 0x6c
    d4d0:	ldr	r0, [pc, #716]	; (d7a0 <_svfprintf_r+0x1990>)
    d4d2:	ldr	r3, [sp, #12]
    d4d4:	vmov.f64	d5, #48	; 0x41800000  16.0
    d4d8:	subs	r3, #1
    d4da:	mov	r2, r4
    d4dc:	b.n	d4e8 <_svfprintf_r+0x16d8>
    d4de:	vcmp.f64	d0, #0.0
    d4e2:	vmrs	APSR_nzcv, fpscr
    d4e6:	beq.n	d510 <_svfprintf_r+0x1700>
    d4e8:	vmul.f64	d0, d0, d5
    d4ec:	vcvt.s32.f64	s15, d0
    d4f0:	cmp.w	r3, #4294967295
    d4f4:	vmov	r1, s15
    d4f8:	ldrb	r1, [r0, r1]
    d4fa:	vcvt.f64.s32	d6, s15
    d4fe:	mov	ip, r2
    d500:	vsub.f64	d0, d0, d6
    d504:	strb.w	r1, [r2], #1
    d508:	mov	r1, r3
    d50a:	add.w	r3, r3, #4294967295
    d50e:	bne.n	d4de <_svfprintf_r+0x16ce>
    d510:	vmov.f64	d6, #96	; 0x3f000000  0.5
    d514:	vcmpe.f64	d0, d6
    d518:	vmrs	APSR_nzcv, fpscr
    d51c:	bgt.w	d7b0 <_svfprintf_r+0x19a0>
    d520:	vcmp.f64	d0, d6
    d524:	vmrs	APSR_nzcv, fpscr
    d528:	bne.n	d534 <_svfprintf_r+0x1724>
    d52a:	vmov	r3, s15
    d52e:	lsls	r3, r3, #31
    d530:	bmi.w	d7b0 <_svfprintf_r+0x19a0>
    d534:	cmp	r1, #0
    d536:	blt.n	d546 <_svfprintf_r+0x1736>
    d538:	adds	r3, r1, #1
    d53a:	add	r3, r2
    d53c:	movs	r1, #48	; 0x30
    d53e:	strb.w	r1, [r2], #1
    d542:	cmp	r3, r2
    d544:	bne.n	d53e <_svfprintf_r+0x172e>
    d546:	subs	r3, r2, r4
    d548:	str	r3, [sp, #56]	; 0x38
    d54a:	b.n	d346 <_svfprintf_r+0x1536>
    d54c:	ldr	r4, [sp, #44]	; 0x2c
    d54e:	ldr	r3, [sp, #56]	; 0x38
    d550:	ldr.w	r9, [sp, #36]	; 0x24
    d554:	ldr.w	r8, [sp, #40]	; 0x28
    d558:	str	r6, [sp, #76]	; 0x4c
    d55a:	adds	r3, r4, r3
    d55c:	cmp	r5, r3
    d55e:	mov	r1, r5
    d560:	it	cs
    d562:	movcs	r1, r3
    d564:	mov	sl, r0
    d566:	str	r1, [sp, #20]
    d568:	b.w	c91c <_svfprintf_r+0xb0c>
    d56c:	ldr	r3, [sp, #108]	; 0x6c
    d56e:	str	r3, [sp, #48]	; 0x30
    d570:	adds	r2, r3, #3
    d572:	blt.n	d57a <_svfprintf_r+0x176a>
    d574:	ldr	r2, [sp, #12]
    d576:	cmp	r3, r2
    d578:	ble.n	d594 <_svfprintf_r+0x1784>
    d57a:	ldr	r3, [sp, #44]	; 0x2c
    d57c:	subs	r3, #2
    d57e:	str	r3, [sp, #44]	; 0x2c
    d580:	bic.w	r5, r3, #32
    d584:	b.n	d356 <_svfprintf_r+0x1546>
    d586:	movs	r1, #45	; 0x2d
    d588:	movs	r3, #0
    d58a:	strb.w	r1, [sp, #103]	; 0x67
    d58e:	str	r3, [sp, #12]
    d590:	b.w	c1d8 <_svfprintf_r+0x3c8>
    d594:	ldr	r3, [sp, #48]	; 0x30
    d596:	ldr	r2, [sp, #56]	; 0x38
    d598:	cmp	r3, r2
    d59a:	blt.w	d718 <_svfprintf_r+0x1908>
    d59e:	lsls	r0, r6, #31
    d5a0:	ldr	r3, [sp, #48]	; 0x30
    d5a2:	bpl.w	d80a <_svfprintf_r+0x19fa>
    d5a6:	ldr	r2, [sp, #64]	; 0x40
    d5a8:	add	r3, r2
    d5aa:	str	r3, [sp, #20]
    d5ac:	lsls	r1, r6, #21
    d5ae:	bpl.n	d5b8 <_svfprintf_r+0x17a8>
    d5b0:	ldr	r3, [sp, #48]	; 0x30
    d5b2:	cmp	r3, #0
    d5b4:	bgt.w	d822 <_svfprintf_r+0x1a12>
    d5b8:	ldr	r3, [sp, #20]
    d5ba:	bic.w	r3, r3, r3, asr #31
    d5be:	str	r3, [sp, #8]
    d5c0:	movs	r3, #103	; 0x67
    d5c2:	str	r3, [sp, #44]	; 0x2c
    d5c4:	movs	r3, #0
    d5c6:	str	r3, [sp, #60]	; 0x3c
    d5c8:	str	r3, [sp, #52]	; 0x34
    d5ca:	b.n	d41c <_svfprintf_r+0x160c>
    d5cc:	ldr	r3, [sp, #136]	; 0x88
    d5ce:	cmp	r3, r0
    d5d0:	bcs.w	d342 <_svfprintf_r+0x1532>
    d5d4:	movs	r1, #48	; 0x30
    d5d6:	adds	r2, r3, #1
    d5d8:	str	r2, [sp, #136]	; 0x88
    d5da:	strb	r1, [r3, #0]
    d5dc:	ldr	r3, [sp, #136]	; 0x88
    d5de:	cmp	r0, r3
    d5e0:	bhi.n	d5d6 <_svfprintf_r+0x17c6>
    d5e2:	b.n	d342 <_svfprintf_r+0x1532>
    d5e4:	lsls	r3, r6, #31
    d5e6:	bmi.w	d738 <_svfprintf_r+0x1928>
    d5ea:	ldr	r3, [sp, #136]	; 0x88
    d5ec:	b.n	d342 <_svfprintf_r+0x1532>
    d5ee:	add	r2, sp, #144	; 0x90
    d5f0:	mov	r0, fp
    d5f2:	str	r1, [sp, #20]
    d5f4:	bl	eb78 <__ssprint_r>
    d5f8:	cmp	r0, #0
    d5fa:	bne.w	c6da <_svfprintf_r+0x8ca>
    d5fe:	ldrb.w	ip, [r6]
    d602:	ldr	r2, [sp, #152]	; 0x98
    d604:	ldr	r1, [sp, #20]
    d606:	add	r0, sp, #156	; 0x9c
    d608:	add	r5, ip
    d60a:	b.w	cde6 <_svfprintf_r+0xfd6>
    d60e:	vmov	r1, s22
    d612:	add	r2, sp, #144	; 0x90
    d614:	mov	r0, fp
    d616:	bl	eb78 <__ssprint_r>
    d61a:	cmp	r0, #0
    d61c:	bne.w	c6da <_svfprintf_r+0x8ca>
    d620:	ldr	r2, [sp, #152]	; 0x98
    d622:	add.w	sl, sp, #156	; 0x9c
    d626:	b.w	c900 <_svfprintf_r+0xaf0>
    d62a:	movs	r3, #120	; 0x78
    d62c:	strb.w	r3, [sp, #105]	; 0x69
    d630:	movs	r3, #48	; 0x30
    d632:	strb.w	r3, [sp, #104]	; 0x68
    d636:	ldr	r3, [sp, #12]
    d638:	cmp	r3, #99	; 0x63
    d63a:	orr.w	r6, r8, #2
    d63e:	bgt.w	d78e <_svfprintf_r+0x197e>
    d642:	movs	r3, #0
    d644:	str	r3, [sp, #28]
    d646:	add	r4, sp, #220	; 0xdc
    d648:	vmov	r3, s17
    d64c:	cmp	r3, #0
    d64e:	orr.w	r8, r8, #258	; 0x102
    d652:	blt.n	d6ac <_svfprintf_r+0x189c>
    d654:	vmov.f64	d10, d8
    d658:	ldr	r3, [sp, #44]	; 0x2c
    d65a:	bic.w	r5, r3, #32
    d65e:	movs	r3, #0
    d660:	str	r3, [sp, #36]	; 0x24
    d662:	ldr	r3, [sp, #44]	; 0x2c
    d664:	cmp	r3, #97	; 0x61
    d666:	bne.w	cbc4 <_svfprintf_r+0xdb4>
    d66a:	vmov.f64	d0, d10
    d66e:	add	r0, sp, #108	; 0x6c
    d670:	bl	dba8 <frexp>
    d674:	vmov.f64	d7, #64	; 0x3e000000  0.125
    d678:	vmul.f64	d0, d0, d7
    d67c:	vcmp.f64	d0, #0.0
    d680:	vmrs	APSR_nzcv, fpscr
    d684:	bne.n	d68a <_svfprintf_r+0x187a>
    d686:	movs	r3, #1
    d688:	str	r3, [sp, #108]	; 0x6c
    d68a:	ldr	r0, [pc, #280]	; (d7a4 <_svfprintf_r+0x1994>)
    d68c:	b.n	d4d2 <_svfprintf_r+0x16c2>
    d68e:	vmov	r1, s22
    d692:	add	r2, sp, #144	; 0x90
    d694:	mov	r0, fp
    d696:	bl	eb78 <__ssprint_r>
    d69a:	cmp	r0, #0
    d69c:	bne.w	c6da <_svfprintf_r+0x8ca>
    d6a0:	ldr	r3, [sp, #108]	; 0x6c
    d6a2:	ldr	r2, [sp, #152]	; 0x98
    d6a4:	add.w	sl, sp, #156	; 0x9c
    d6a8:	b.w	c948 <_svfprintf_r+0xb38>
    d6ac:	ldr	r3, [sp, #44]	; 0x2c
    d6ae:	bic.w	r5, r3, #32
    d6b2:	movs	r3, #45	; 0x2d
    d6b4:	str	r3, [sp, #36]	; 0x24
    d6b6:	vneg.f64	d10, d8
    d6ba:	b.n	d662 <_svfprintf_r+0x1852>
    d6bc:	ldr	r2, [sp, #108]	; 0x6c
    d6be:	str	r2, [sp, #48]	; 0x30
    d6c0:	cmp	r2, #0
    d6c2:	and.w	r3, r6, #1
    d6c6:	ble.w	d8e4 <_svfprintf_r+0x1ad4>
    d6ca:	ldr	r1, [sp, #12]
    d6cc:	orrs	r3, r1
    d6ce:	bne.w	d870 <_svfprintf_r+0x1a60>
    d6d2:	ldr	r3, [sp, #48]	; 0x30
    d6d4:	str	r3, [sp, #20]
    d6d6:	movs	r3, #102	; 0x66
    d6d8:	str	r3, [sp, #44]	; 0x2c
    d6da:	lsls	r2, r6, #21
    d6dc:	bmi.w	d826 <_svfprintf_r+0x1a16>
    d6e0:	ldr	r3, [sp, #20]
    d6e2:	bic.w	r3, r3, r3, asr #31
    d6e6:	str	r3, [sp, #8]
    d6e8:	b.n	d5c4 <_svfprintf_r+0x17b4>
    d6ea:	vmov	r1, s22
    d6ee:	add	r2, sp, #144	; 0x90
    d6f0:	mov	r0, fp
    d6f2:	bl	eb78 <__ssprint_r>
    d6f6:	cmp	r0, #0
    d6f8:	bne.w	c6da <_svfprintf_r+0x8ca>
    d6fc:	ldr	r4, [sp, #108]	; 0x6c
    d6fe:	ldr	r3, [sp, #56]	; 0x38
    d700:	ldr	r2, [sp, #152]	; 0x98
    d702:	subs	r4, r3, r4
    d704:	add.w	sl, sp, #156	; 0x9c
    d708:	b.w	c978 <_svfprintf_r+0xb68>
    d70c:	movs	r3, #88	; 0x58
    d70e:	b.n	d62c <_svfprintf_r+0x181c>
    d710:	movs	r2, #0
    d712:	str	r2, [sp, #12]
    d714:	b.w	becc <_svfprintf_r+0xbc>
    d718:	ldr	r3, [sp, #56]	; 0x38
    d71a:	ldr	r2, [sp, #64]	; 0x40
    d71c:	adds	r2, r3, r2
    d71e:	ldr	r3, [sp, #48]	; 0x30
    d720:	str	r2, [sp, #20]
    d722:	cmp	r3, #0
    d724:	ble.w	d87e <_svfprintf_r+0x1a6e>
    d728:	movs	r3, #103	; 0x67
    d72a:	str	r3, [sp, #44]	; 0x2c
    d72c:	b.n	d6da <_svfprintf_r+0x18ca>
    d72e:	ldr	r2, [sp, #44]	; 0x2c
    d730:	adds	r2, #15
    d732:	uxtb	r2, r2
    d734:	movs	r1, #1
    d736:	b.n	d36a <_svfprintf_r+0x155a>
    d738:	adds	r0, r4, r2
    d73a:	b.n	d334 <_svfprintf_r+0x1524>
    d73c:	cmp	r1, #0
    d73e:	bne.w	d892 <_svfprintf_r+0x1a82>
    d742:	movs	r2, #48	; 0x30
    d744:	strb.w	r2, [sp, #122]	; 0x7a
    d748:	add.w	r2, sp, #123	; 0x7b
    d74c:	adds	r3, #48	; 0x30
    d74e:	strb.w	r3, [r2], #1
    d752:	add	r3, sp, #120	; 0x78
    d754:	subs	r3, r2, r3
    d756:	str	r3, [sp, #80]	; 0x50
    d758:	b.n	d3ee <_svfprintf_r+0x15de>
    d75a:	adds	r3, #1
    d75c:	ldr	r1, [pc, #72]	; (d7a8 <_svfprintf_r+0x1998>)
    d75e:	str.w	r5, [sl, #4]
    d762:	add	r2, r5
    d764:	cmp	r3, #7
    d766:	strd	r3, r2, [sp, #148]	; 0x94
    d76a:	str.w	r1, [sl]
    d76e:	ble.w	cfd8 <_svfprintf_r+0x11c8>
    d772:	vmov	r1, s22
    d776:	add	r2, sp, #144	; 0x90
    d778:	mov	r0, fp
    d77a:	bl	eb78 <__ssprint_r>
    d77e:	cmp	r0, #0
    d780:	bne.w	c6da <_svfprintf_r+0x8ca>
    d784:	ldrd	r3, r2, [sp, #148]	; 0x94
    d788:	add.w	sl, sp, #156	; 0x9c
    d78c:	b.n	cfdc <_svfprintf_r+0x11cc>
    d78e:	adds	r1, r3, #1
    d790:	mov	r0, fp
    d792:	bl	a1a0 <_malloc_r>
    d796:	mov	r4, r0
    d798:	cbz	r0, d7f0 <_svfprintf_r+0x19e0>
    d79a:	str	r0, [sp, #28]
    d79c:	b.n	d648 <_svfprintf_r+0x1838>
    d79e:	nop
    d7a0:	.word	0x20000aa8
    d7a4:	.word	0x20000a94
    d7a8:	.word	0x20000f18
    d7ac:	.word	0x66666667
    d7b0:	str.w	ip, [sp, #136]	; 0x88
    d7b4:	ldrb.w	r1, [r2, #-1]
    d7b8:	ldrb.w	ip, [r0, #15]
    d7bc:	cmp	r1, ip
    d7be:	mov	r3, r2
    d7c0:	bne.n	d7d8 <_svfprintf_r+0x19c8>
    d7c2:	mov.w	lr, #48	; 0x30
    d7c6:	strb.w	lr, [r3, #-1]
    d7ca:	ldr	r3, [sp, #136]	; 0x88
    d7cc:	subs	r1, r3, #1
    d7ce:	str	r1, [sp, #136]	; 0x88
    d7d0:	ldrb.w	r1, [r3, #-1]
    d7d4:	cmp	ip, r1
    d7d6:	beq.n	d7c6 <_svfprintf_r+0x19b6>
    d7d8:	cmp	r1, #57	; 0x39
    d7da:	itet	ne
    d7dc:	addne	r1, #1
    d7de:	ldrbeq	r1, [r0, #10]
    d7e0:	uxtbne	r1, r1
    d7e2:	strb.w	r1, [r3, #-1]
    d7e6:	b.n	d546 <_svfprintf_r+0x1736>
    d7e8:	movs	r3, #0
    d7ea:	mov	r8, r2
    d7ec:	str	r3, [sp, #28]
    d7ee:	b.n	d6b2 <_svfprintf_r+0x18a2>
    d7f0:	vmov	r2, s22
    d7f4:	ldrsh.w	r3, [r2, #12]
    d7f8:	orr.w	r3, r3, #64	; 0x40
    d7fc:	strh	r3, [r2, #12]
    d7fe:	b.w	c02e <_svfprintf_r+0x21e>
    d802:	lsls	r5, r6, #31
    d804:	bpl.w	d404 <_svfprintf_r+0x15f4>
    d808:	b.n	d3fc <_svfprintf_r+0x15ec>
    d80a:	str	r3, [sp, #20]
    d80c:	b.n	d5ac <_svfprintf_r+0x179c>
    d80e:	vcmp.f64	d10, #0.0
    d812:	vmrs	APSR_nzcv, fpscr
    d816:	beq.w	d330 <_svfprintf_r+0x1520>
    d81a:	rsb	r2, r2, #1
    d81e:	str	r2, [sp, #108]	; 0x6c
    d820:	b.n	d332 <_svfprintf_r+0x1522>
    d822:	movs	r3, #103	; 0x67
    d824:	str	r3, [sp, #44]	; 0x2c
    d826:	ldr	r1, [sp, #76]	; 0x4c
    d828:	ldrb	r3, [r1, #0]
    d82a:	cmp	r3, #255	; 0xff
    d82c:	beq.n	d922 <_svfprintf_r+0x1b12>
    d82e:	movs	r5, #0
    d830:	ldr	r2, [sp, #48]	; 0x30
    d832:	mov	r0, r5
    d834:	b.n	d83e <_svfprintf_r+0x1a2e>
    d836:	adds	r0, #1
    d838:	adds	r1, #1
    d83a:	cmp	r3, #255	; 0xff
    d83c:	beq.n	d850 <_svfprintf_r+0x1a40>
    d83e:	cmp	r3, r2
    d840:	bge.n	d850 <_svfprintf_r+0x1a40>
    d842:	subs	r2, r2, r3
    d844:	ldrb	r3, [r1, #1]
    d846:	cmp	r3, #0
    d848:	bne.n	d836 <_svfprintf_r+0x1a26>
    d84a:	ldrb	r3, [r1, #0]
    d84c:	adds	r5, #1
    d84e:	b.n	d83a <_svfprintf_r+0x1a2a>
    d850:	str	r2, [sp, #48]	; 0x30
    d852:	str	r1, [sp, #76]	; 0x4c
    d854:	str	r0, [sp, #52]	; 0x34
    d856:	str	r5, [sp, #60]	; 0x3c
    d858:	ldr	r2, [sp, #60]	; 0x3c
    d85a:	ldr	r3, [sp, #52]	; 0x34
    d85c:	ldr	r1, [sp, #88]	; 0x58
    d85e:	add	r3, r2
    d860:	ldr	r2, [sp, #20]
    d862:	mla	r3, r1, r3, r2
    d866:	str	r3, [sp, #20]
    d868:	bic.w	r3, r3, r3, asr #31
    d86c:	str	r3, [sp, #8]
    d86e:	b.n	d41c <_svfprintf_r+0x160c>
    d870:	ldr	r3, [sp, #64]	; 0x40
    d872:	adds	r3, r2, r3
    d874:	add	r1, r3
    d876:	movs	r3, #102	; 0x66
    d878:	str	r1, [sp, #20]
    d87a:	str	r3, [sp, #44]	; 0x2c
    d87c:	b.n	d6da <_svfprintf_r+0x18ca>
    d87e:	rsb	r3, r3, #1
    d882:	add	r2, r3
    d884:	bic.w	r3, r2, r2, asr #31
    d888:	str	r3, [sp, #8]
    d88a:	movs	r3, #103	; 0x67
    d88c:	str	r2, [sp, #20]
    d88e:	str	r3, [sp, #44]	; 0x2c
    d890:	b.n	d5c4 <_svfprintf_r+0x17b4>
    d892:	add.w	r2, sp, #122	; 0x7a
    d896:	b.n	d74c <_svfprintf_r+0x193c>
    d898:	ldr	r3, [sp, #12]
    d89a:	ldr.w	r9, [sp, #8]
    d89e:	ldr.w	r8, [sp, #28]
    d8a2:	str	r3, [sp, #20]
    d8a4:	b.n	d210 <_svfprintf_r+0x1400>
    d8a6:	vmov	r3, s17
    d8aa:	cmp	r3, #0
    d8ac:	ite	lt
    d8ae:	movlt	r1, #45	; 0x2d
    d8b0:	ldrbge.w	r1, [sp, #103]	; 0x67
    d8b4:	ldr	r4, [pc, #148]	; (d94c <_svfprintf_r+0x1b3c>)
    d8b6:	ldr	r3, [pc, #152]	; (d950 <_svfprintf_r+0x1b40>)
    d8b8:	it	lt
    d8ba:	strblt.w	r1, [sp, #103]	; 0x67
    d8be:	bic.w	r8, r8, #128	; 0x80
    d8c2:	b.w	c1b8 <_svfprintf_r+0x3a8>
    d8c6:	ldr	r3, [sp, #12]
    d8c8:	str	r3, [sp, #8]
    d8ca:	str	r3, [sp, #20]
    d8cc:	movs	r3, #115	; 0x73
    d8ce:	ldrb.w	r1, [sp, #103]	; 0x67
    d8d2:	str	r0, [sp, #12]
    d8d4:	str	r0, [sp, #60]	; 0x3c
    d8d6:	str	r0, [sp, #52]	; 0x34
    d8d8:	str	r3, [sp, #44]	; 0x2c
    d8da:	b.w	c1d2 <_svfprintf_r+0x3c2>
    d8de:	movs	r3, #2
    d8e0:	str	r3, [sp, #80]	; 0x50
    d8e2:	b.n	d3ee <_svfprintf_r+0x15de>
    d8e4:	ldr	r2, [sp, #12]
    d8e6:	orrs	r3, r2
    d8e8:	bne.n	d8f6 <_svfprintf_r+0x1ae6>
    d8ea:	movs	r3, #1
    d8ec:	movs	r2, #102	; 0x66
    d8ee:	str	r3, [sp, #8]
    d8f0:	str	r2, [sp, #44]	; 0x2c
    d8f2:	str	r3, [sp, #20]
    d8f4:	b.n	d5c4 <_svfprintf_r+0x17b4>
    d8f6:	ldr	r3, [sp, #64]	; 0x40
    d8f8:	adds	r3, #1
    d8fa:	add	r2, r3
    d8fc:	bic.w	r3, r2, r2, asr #31
    d900:	str	r3, [sp, #8]
    d902:	movs	r3, #102	; 0x66
    d904:	str	r2, [sp, #20]
    d906:	str	r3, [sp, #44]	; 0x2c
    d908:	b.n	d5c4 <_svfprintf_r+0x17b4>
    d90a:	ldr	r2, [sp, #32]
    d90c:	ldrb.w	r3, [r9, #1]
    d910:	mov	r9, r1
    d912:	ldr.w	r1, [r2], #4
    d916:	str	r2, [sp, #32]
    d918:	orr.w	r1, r1, r1, asr #31
    d91c:	str	r1, [sp, #12]
    d91e:	b.w	bec8 <_svfprintf_r+0xb8>
    d922:	movs	r3, #0
    d924:	str	r3, [sp, #60]	; 0x3c
    d926:	str	r3, [sp, #52]	; 0x34
    d928:	b.n	d858 <_svfprintf_r+0x1a48>
    d92a:	movs	r3, #12
    d92c:	str.w	r3, [fp]
    d930:	mov.w	r3, #4294967295
    d934:	str	r3, [sp, #16]
    d936:	b.w	c03c <_svfprintf_r+0x22c>
    d93a:	vmov	r2, s22
    d93e:	ldrh	r3, [r2, #12]
    d940:	orr.w	r3, r3, #64	; 0x40
    d944:	strh	r3, [r2, #12]
    d946:	b.w	c6da <_svfprintf_r+0x8ca>
    d94a:	nop
    d94c:	.word	0x20000a8c
    d950:	.word	0x20000a90

0000d954 <_fclose_r>:
    d954:	push	{r4, r5, r6, lr}
    d956:	cmp	r1, #0
    d958:	beq.n	d9f2 <_fclose_r+0x9e>
    d95a:	mov	r6, r0
    d95c:	mov	r4, r1
    d95e:	cbz	r0, d966 <_fclose_r+0x12>
    d960:	ldr	r3, [r0, #52]	; 0x34
    d962:	cmp	r3, #0
    d964:	beq.n	d9f8 <_fclose_r+0xa4>
    d966:	ldr	r3, [r4, #100]	; 0x64
    d968:	lsls	r0, r3, #31
    d96a:	bpl.n	d9d6 <_fclose_r+0x82>
    d96c:	ldrsh.w	r3, [r4, #12]
    d970:	cmp	r3, #0
    d972:	beq.n	d9f2 <_fclose_r+0x9e>
    d974:	mov	r1, r4
    d976:	mov	r0, r6
    d978:	bl	da1c <__sflush_r>
    d97c:	ldr	r3, [r4, #44]	; 0x2c
    d97e:	mov	r5, r0
    d980:	cbz	r3, d990 <_fclose_r+0x3c>
    d982:	ldr	r1, [r4, #28]
    d984:	mov	r0, r6
    d986:	blx	r3
    d988:	cmp	r0, #0
    d98a:	it	lt
    d98c:	movlt.w	r5, #4294967295
    d990:	ldrh	r3, [r4, #12]
    d992:	lsls	r2, r3, #24
    d994:	bmi.n	da10 <_fclose_r+0xbc>
    d996:	ldr	r1, [r4, #48]	; 0x30
    d998:	cbz	r1, d9ac <_fclose_r+0x58>
    d99a:	add.w	r3, r4, #64	; 0x40
    d99e:	cmp	r1, r3
    d9a0:	beq.n	d9a8 <_fclose_r+0x54>
    d9a2:	mov	r0, r6
    d9a4:	bl	b444 <_free_r>
    d9a8:	movs	r3, #0
    d9aa:	str	r3, [r4, #48]	; 0x30
    d9ac:	ldr	r1, [r4, #68]	; 0x44
    d9ae:	cbz	r1, d9ba <_fclose_r+0x66>
    d9b0:	mov	r0, r6
    d9b2:	bl	b444 <_free_r>
    d9b6:	movs	r3, #0
    d9b8:	str	r3, [r4, #68]	; 0x44
    d9ba:	bl	ac64 <__sfp_lock_acquire>
    d9be:	ldr	r3, [r4, #100]	; 0x64
    d9c0:	movs	r2, #0
    d9c2:	lsls	r3, r3, #31
    d9c4:	strh	r2, [r4, #12]
    d9c6:	bpl.n	da08 <_fclose_r+0xb4>
    d9c8:	ldr	r0, [r4, #88]	; 0x58
    d9ca:	bl	b194 <__retarget_lock_close_recursive>
    d9ce:	bl	ac70 <__sfp_lock_release>
    d9d2:	mov	r0, r5
    d9d4:	pop	{r4, r5, r6, pc}
    d9d6:	ldrh	r3, [r4, #12]
    d9d8:	lsls	r1, r3, #22
    d9da:	bmi.n	d974 <_fclose_r+0x20>
    d9dc:	ldr	r0, [r4, #88]	; 0x58
    d9de:	bl	b198 <__retarget_lock_acquire_recursive>
    d9e2:	ldrsh.w	r3, [r4, #12]
    d9e6:	cmp	r3, #0
    d9e8:	bne.n	d974 <_fclose_r+0x20>
    d9ea:	ldr	r5, [r4, #100]	; 0x64
    d9ec:	ands.w	r5, r5, #1
    d9f0:	beq.n	d9fe <_fclose_r+0xaa>
    d9f2:	movs	r5, #0
    d9f4:	mov	r0, r5
    d9f6:	pop	{r4, r5, r6, pc}
    d9f8:	bl	ac28 <__sinit>
    d9fc:	b.n	d966 <_fclose_r+0x12>
    d9fe:	ldr	r0, [r4, #88]	; 0x58
    da00:	bl	b19c <__retarget_lock_release_recursive>
    da04:	mov	r0, r5
    da06:	pop	{r4, r5, r6, pc}
    da08:	ldr	r0, [r4, #88]	; 0x58
    da0a:	bl	b19c <__retarget_lock_release_recursive>
    da0e:	b.n	d9c8 <_fclose_r+0x74>
    da10:	ldr	r1, [r4, #16]
    da12:	mov	r0, r6
    da14:	bl	b444 <_free_r>
    da18:	b.n	d996 <_fclose_r+0x42>
    da1a:	nop

0000da1c <__sflush_r>:
    da1c:	ldrsh.w	r2, [r1, #12]
    da20:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    da24:	mov	r4, r1
    da26:	lsls	r1, r2, #28
    da28:	mov	r8, r0
    da2a:	bmi.n	dabc <__sflush_r+0xa0>
    da2c:	ldr	r3, [r4, #4]
    da2e:	orr.w	r2, r2, #2048	; 0x800
    da32:	cmp	r3, #0
    da34:	strh	r2, [r4, #12]
    da36:	ble.n	daf6 <__sflush_r+0xda>
    da38:	ldr	r5, [r4, #40]	; 0x28
    da3a:	cmp	r5, #0
    da3c:	beq.n	daf0 <__sflush_r+0xd4>
    da3e:	movs	r3, #0
    da40:	ldr.w	r6, [r8]
    da44:	str.w	r3, [r8]
    da48:	uxth	r3, r2
    da4a:	ands.w	r2, r2, #4096	; 0x1000
    da4e:	bne.n	dafe <__sflush_r+0xe2>
    da50:	movs	r3, #1
    da52:	ldr	r1, [r4, #28]
    da54:	mov	r0, r8
    da56:	blx	r5
    da58:	adds	r3, r0, #1
    da5a:	beq.n	db2c <__sflush_r+0x110>
    da5c:	ldrh	r3, [r4, #12]
    da5e:	ldr	r5, [r4, #40]	; 0x28
    da60:	lsls	r7, r3, #29
    da62:	bpl.n	da70 <__sflush_r+0x54>
    da64:	ldr	r3, [r4, #4]
    da66:	subs	r0, r0, r3
    da68:	ldr	r3, [r4, #48]	; 0x30
    da6a:	cbz	r3, da70 <__sflush_r+0x54>
    da6c:	ldr	r3, [r4, #60]	; 0x3c
    da6e:	subs	r0, r0, r3
    da70:	ldr	r1, [r4, #28]
    da72:	mov	r2, r0
    da74:	movs	r3, #0
    da76:	mov	r0, r8
    da78:	blx	r5
    da7a:	adds	r1, r0, #1
    da7c:	bne.n	db02 <__sflush_r+0xe6>
    da7e:	ldr.w	r3, [r8]
    da82:	cmp	r3, #0
    da84:	beq.n	db02 <__sflush_r+0xe6>
    da86:	cmp	r3, #29
    da88:	beq.n	da8e <__sflush_r+0x72>
    da8a:	cmp	r3, #22
    da8c:	bne.n	db3c <__sflush_r+0x120>
    da8e:	ldrh	r3, [r4, #12]
    da90:	ldr	r2, [r4, #16]
    da92:	str	r2, [r4, #0]
    da94:	bic.w	r3, r3, #2048	; 0x800
    da98:	movs	r1, #0
    da9a:	str	r1, [r4, #4]
    da9c:	strh	r3, [r4, #12]
    da9e:	ldr	r1, [r4, #48]	; 0x30
    daa0:	str.w	r6, [r8]
    daa4:	cbz	r1, daf0 <__sflush_r+0xd4>
    daa6:	add.w	r3, r4, #64	; 0x40
    daaa:	cmp	r1, r3
    daac:	beq.n	dab4 <__sflush_r+0x98>
    daae:	mov	r0, r8
    dab0:	bl	b444 <_free_r>
    dab4:	movs	r0, #0
    dab6:	str	r0, [r4, #48]	; 0x30
    dab8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dabc:	ldr	r6, [r4, #16]
    dabe:	cbz	r6, daf0 <__sflush_r+0xd4>
    dac0:	uxth	r3, r2
    dac2:	ldr	r5, [r4, #0]
    dac4:	str	r6, [r4, #0]
    dac6:	lsls	r2, r3, #30
    dac8:	ite	eq
    daca:	ldreq	r3, [r4, #20]
    dacc:	movne	r3, #0
    dace:	subs	r5, r5, r6
    dad0:	str	r3, [r4, #8]
    dad2:	b.n	daec <__sflush_r+0xd0>
    dad4:	mov	r3, r5
    dad6:	mov	r2, r6
    dad8:	ldr	r1, [r4, #28]
    dada:	ldr	r7, [r4, #36]	; 0x24
    dadc:	mov	r0, r8
    dade:	blx	r7
    dae0:	subs.w	ip, r0, #0
    dae4:	sub.w	r5, r5, ip
    dae8:	add	r6, ip
    daea:	ble.n	db1c <__sflush_r+0x100>
    daec:	cmp	r5, #0
    daee:	bgt.n	dad4 <__sflush_r+0xb8>
    daf0:	movs	r0, #0
    daf2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    daf6:	ldr	r3, [r4, #60]	; 0x3c
    daf8:	cmp	r3, #0
    dafa:	bgt.n	da38 <__sflush_r+0x1c>
    dafc:	b.n	daf0 <__sflush_r+0xd4>
    dafe:	ldr	r0, [r4, #80]	; 0x50
    db00:	b.n	da60 <__sflush_r+0x44>
    db02:	ldrsh.w	r3, [r4, #12]
    db06:	ldr	r2, [r4, #16]
    db08:	str	r2, [r4, #0]
    db0a:	bic.w	r3, r3, #2048	; 0x800
    db0e:	strh	r3, [r4, #12]
    db10:	movs	r2, #0
    db12:	lsls	r3, r3, #19
    db14:	str	r2, [r4, #4]
    db16:	bpl.n	da9e <__sflush_r+0x82>
    db18:	str	r0, [r4, #80]	; 0x50
    db1a:	b.n	da9e <__sflush_r+0x82>
    db1c:	ldrh	r3, [r4, #12]
    db1e:	orr.w	r3, r3, #64	; 0x40
    db22:	mov.w	r0, #4294967295
    db26:	strh	r3, [r4, #12]
    db28:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    db2c:	ldr.w	r3, [r8]
    db30:	cmp	r3, #0
    db32:	beq.n	da5c <__sflush_r+0x40>
    db34:	cmp	r3, #29
    db36:	beq.n	db46 <__sflush_r+0x12a>
    db38:	cmp	r3, #22
    db3a:	beq.n	db46 <__sflush_r+0x12a>
    db3c:	ldrh	r3, [r4, #12]
    db3e:	orr.w	r3, r3, #64	; 0x40
    db42:	strh	r3, [r4, #12]
    db44:	b.n	daf2 <__sflush_r+0xd6>
    db46:	str.w	r6, [r8]
    db4a:	b.n	daf0 <__sflush_r+0xd4>

0000db4c <_fflush_r>:
    db4c:	push	{r3, r4, r5, lr}
    db4e:	mov	r4, r1
    db50:	mov	r5, r0
    db52:	cbz	r0, db58 <_fflush_r+0xc>
    db54:	ldr	r3, [r0, #52]	; 0x34
    db56:	cbz	r3, db9a <_fflush_r+0x4e>
    db58:	ldrsh.w	r0, [r4, #12]
    db5c:	cbz	r0, db82 <_fflush_r+0x36>
    db5e:	ldr	r3, [r4, #100]	; 0x64
    db60:	lsls	r3, r3, #31
    db62:	bmi.n	db68 <_fflush_r+0x1c>
    db64:	lsls	r1, r0, #22
    db66:	bpl.n	db88 <_fflush_r+0x3c>
    db68:	mov	r0, r5
    db6a:	mov	r1, r4
    db6c:	bl	da1c <__sflush_r>
    db70:	ldr	r3, [r4, #100]	; 0x64
    db72:	lsls	r2, r3, #31
    db74:	mov	r5, r0
    db76:	bmi.n	db7e <_fflush_r+0x32>
    db78:	ldrh	r3, [r4, #12]
    db7a:	lsls	r3, r3, #22
    db7c:	bpl.n	db90 <_fflush_r+0x44>
    db7e:	mov	r0, r5
    db80:	pop	{r3, r4, r5, pc}
    db82:	mov	r5, r0
    db84:	mov	r0, r5
    db86:	pop	{r3, r4, r5, pc}
    db88:	ldr	r0, [r4, #88]	; 0x58
    db8a:	bl	b198 <__retarget_lock_acquire_recursive>
    db8e:	b.n	db68 <_fflush_r+0x1c>
    db90:	ldr	r0, [r4, #88]	; 0x58
    db92:	bl	b19c <__retarget_lock_release_recursive>
    db96:	mov	r0, r5
    db98:	pop	{r3, r4, r5, pc}
    db9a:	bl	ac28 <__sinit>
    db9e:	b.n	db58 <_fflush_r+0xc>

0000dba0 <_localeconv_r>:
    dba0:	ldr	r0, [pc, #0]	; (dba4 <_localeconv_r+0x4>)
    dba2:	bx	lr
    dba4:	.word	0x20001ce4

0000dba8 <frexp>:
    dba8:	push	{r4, r5}
    dbaa:	sub	sp, #8
    dbac:	vstr	d0, [sp]
    dbb0:	ldr	r2, [sp, #4]
    dbb2:	ldr	r4, [pc, #100]	; (dc18 <frexp+0x70>)
    dbb4:	bic.w	r3, r2, #2147483648	; 0x80000000
    dbb8:	movs	r1, #0
    dbba:	cmp	r3, r4
    dbbc:	str	r1, [r0, #0]
    dbbe:	bgt.n	dc04 <frexp+0x5c>
    dbc0:	ldr	r4, [sp, #0]
    dbc2:	orrs	r4, r3
    dbc4:	beq.n	dc04 <frexp+0x5c>
    dbc6:	ldr	r4, [pc, #84]	; (dc1c <frexp+0x74>)
    dbc8:	ands	r4, r2
    dbca:	cbnz	r4, dbe2 <frexp+0x3a>
    dbcc:	vldr	d7, [pc, #64]	; dc10 <frexp+0x68>
    dbd0:	vmul.f64	d7, d0, d7
    dbd4:	vstr	d7, [sp]
    dbd8:	ldr	r2, [sp, #4]
    dbda:	mvn.w	r1, #53	; 0x35
    dbde:	bic.w	r3, r2, #2147483648	; 0x80000000
    dbe2:	bic.w	r2, r2, #2139095040	; 0x7f800000
    dbe6:	ldrd	r4, r5, [sp]
    dbea:	bic.w	r2, r2, #7340032	; 0x700000
    dbee:	orr.w	r5, r2, #1069547520	; 0x3fc00000
    dbf2:	asrs	r3, r3, #20
    dbf4:	orr.w	r5, r5, #2097152	; 0x200000
    dbf8:	subw	r3, r3, #1022	; 0x3fe
    dbfc:	strd	r4, r5, [sp]
    dc00:	add	r3, r1
    dc02:	str	r3, [r0, #0]
    dc04:	vldr	d0, [sp]
    dc08:	add	sp, #8
    dc0a:	pop	{r4, r5}
    dc0c:	bx	lr
    dc0e:	nop
    dc10:	.word	0x00000000
    dc14:	.word	0x43500000
    dc18:	.word	0x7fefffff
    dc1c:	.word	0x7ff00000

0000dc20 <__assert_func>:
    dc20:	push	{lr}
    dc22:	ldr	r4, [pc, #44]	; (dc50 <__assert_func+0x30>)
    dc24:	ldr	r5, [r4, #0]
    dc26:	mov	r4, r2
    dc28:	ldr	r6, [r5, #12]
    dc2a:	mov	r2, r3
    dc2c:	sub	sp, #20
    dc2e:	mov	r3, r0
    dc30:	mov	r5, r1
    dc32:	cbz	r4, dc48 <__assert_func+0x28>
    dc34:	ldr	r1, [pc, #28]	; (dc54 <__assert_func+0x34>)
    dc36:	str	r5, [sp, #0]
    dc38:	strd	r1, r4, [sp, #4]
    dc3c:	mov	r0, r6
    dc3e:	ldr	r1, [pc, #24]	; (dc58 <__assert_func+0x38>)
    dc40:	bl	eb50 <fiprintf>
    dc44:	bl	8b0a <abort>
    dc48:	ldr	r1, [pc, #16]	; (dc5c <__assert_func+0x3c>)
    dc4a:	mov	r4, r1
    dc4c:	b.n	dc36 <__assert_func+0x16>
    dc4e:	nop
    dc50:	.word	0x2000217c
    dc54:	.word	0x20000864
    dc58:	.word	0x20000874
    dc5c:	.word	0x20000870

0000dc60 <_calloc_r>:
    dc60:	push	{r3, r4, r5, lr}
    dc62:	umull	r1, r4, r1, r2
    dc66:	cbnz	r4, dccc <_calloc_r+0x6c>
    dc68:	bl	a1a0 <_malloc_r>
    dc6c:	mov	r5, r0
    dc6e:	cbz	r0, dcaa <_calloc_r+0x4a>
    dc70:	ldr.w	r2, [r0, #-4]
    dc74:	bic.w	r2, r2, #3
    dc78:	subs	r2, #4
    dc7a:	cmp	r2, #36	; 0x24
    dc7c:	bhi.n	dcae <_calloc_r+0x4e>
    dc7e:	cmp	r2, #19
    dc80:	bls.n	dcb8 <_calloc_r+0x58>
    dc82:	cmp	r2, #27
    dc84:	strd	r4, r4, [r0]
    dc88:	bls.n	dcc6 <_calloc_r+0x66>
    dc8a:	cmp	r2, #36	; 0x24
    dc8c:	ite	ne
    dc8e:	addne.w	r2, r0, #16
    dc92:	addeq.w	r2, r0, #24
    dc96:	mov.w	r3, #0
    dc9a:	strd	r4, r4, [r0, #8]
    dc9e:	itt	eq
    dca0:	streq	r4, [r0, #16]
    dca2:	streq	r4, [r0, #20]
    dca4:	strd	r3, r3, [r2]
    dca8:	str	r3, [r2, #8]
    dcaa:	mov	r0, r5
    dcac:	pop	{r3, r4, r5, pc}
    dcae:	mov	r1, r4
    dcb0:	bl	7528 <memset>
    dcb4:	mov	r0, r5
    dcb6:	pop	{r3, r4, r5, pc}
    dcb8:	mov	r2, r0
    dcba:	movs	r3, #0
    dcbc:	strd	r3, r3, [r2]
    dcc0:	str	r3, [r2, #8]
    dcc2:	mov	r0, r5
    dcc4:	pop	{r3, r4, r5, pc}
    dcc6:	add.w	r2, r0, #8
    dcca:	b.n	dcba <_calloc_r+0x5a>
    dccc:	bl	b13c <__errno>
    dcd0:	movs	r3, #12
    dcd2:	movs	r5, #0
    dcd4:	str	r3, [r0, #0]
    dcd6:	b.n	dcaa <_calloc_r+0x4a>

0000dcd8 <quorem>:
    dcd8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dcdc:	ldr	r3, [r0, #16]
    dcde:	ldr	r4, [r1, #16]
    dce0:	cmp	r3, r4
    dce2:	sub	sp, #12
    dce4:	blt.w	ddf6 <quorem+0x11e>
    dce8:	subs	r4, #1
    dcea:	add.w	r5, r1, #20
    dcee:	lsls	r3, r4, #2
    dcf0:	add.w	r8, r0, #20
    dcf4:	str	r3, [sp, #0]
    dcf6:	ldr.w	r3, [r5, r4, lsl #2]
    dcfa:	ldr.w	r2, [r8, r4, lsl #2]
    dcfe:	adds	r3, #1
    dd00:	mov	r9, r0
    dd02:	cmp	r2, r3
    dd04:	add.w	r0, r8, r4, lsl #2
    dd08:	add.w	r7, r5, r4, lsl #2
    dd0c:	str	r0, [sp, #4]
    dd0e:	udiv	r6, r2, r3
    dd12:	bcc.n	dd8c <quorem+0xb4>
    dd14:	mov.w	ip, #0
    dd18:	mov	lr, r5
    dd1a:	mov	r0, r8
    dd1c:	mov	sl, ip
    dd1e:	mov	r3, ip
    dd20:	ldr.w	fp, [lr], #4
    dd24:	ldr	r2, [r0, #0]
    dd26:	uxth.w	ip, fp
    dd2a:	mla	r3, r6, ip, r3
    dd2e:	mov.w	ip, r3, lsr #16
    dd32:	mov.w	fp, fp, lsr #16
    dd36:	mla	ip, r6, fp, ip
    dd3a:	uxth	r3, r3
    dd3c:	sub.w	r3, sl, r3
    dd40:	uxth.w	sl, ip
    dd44:	uxtah	r3, r3, r2
    dd48:	rsb	r2, sl, r2, lsr #16
    dd4c:	add.w	r2, r2, r3, asr #16
    dd50:	uxth	r3, r3
    dd52:	orr.w	r3, r3, r2, lsl #16
    dd56:	cmp	r7, lr
    dd58:	str.w	r3, [r0], #4
    dd5c:	mov.w	sl, r2, asr #16
    dd60:	mov.w	r3, ip, lsr #16
    dd64:	bcs.n	dd20 <quorem+0x48>
    dd66:	ldr	r3, [sp, #0]
    dd68:	ldr.w	r3, [r8, r3]
    dd6c:	cbnz	r3, dd8c <quorem+0xb4>
    dd6e:	ldr	r3, [sp, #4]
    dd70:	subs	r3, #4
    dd72:	cmp	r8, r3
    dd74:	bcc.n	dd80 <quorem+0xa8>
    dd76:	b.n	dd88 <quorem+0xb0>
    dd78:	cmp	r8, r3
    dd7a:	add.w	r4, r4, #4294967295
    dd7e:	bcs.n	dd88 <quorem+0xb0>
    dd80:	ldr.w	r2, [r3], #-4
    dd84:	cmp	r2, #0
    dd86:	beq.n	dd78 <quorem+0xa0>
    dd88:	str.w	r4, [r9, #16]
    dd8c:	mov	r0, r9
    dd8e:	bl	bb88 <__mcmp>
    dd92:	cmp	r0, #0
    dd94:	blt.n	ddee <quorem+0x116>
    dd96:	adds	r6, #1
    dd98:	mov	r1, r8
    dd9a:	movs	r3, #0
    dd9c:	ldr.w	r0, [r5], #4
    dda0:	ldr.w	ip, [r1]
    dda4:	uxth	r2, r0
    dda6:	subs	r2, r3, r2
    dda8:	lsrs	r3, r0, #16
    ddaa:	uxtah	r2, r2, ip
    ddae:	rsb	r3, r3, ip, lsr #16
    ddb2:	add.w	r3, r3, r2, asr #16
    ddb6:	uxth	r2, r2
    ddb8:	orr.w	r2, r2, r3, lsl #16
    ddbc:	cmp	r7, r5
    ddbe:	str.w	r2, [r1], #4
    ddc2:	mov.w	r3, r3, asr #16
    ddc6:	bcs.n	dd9c <quorem+0xc4>
    ddc8:	ldr.w	r2, [r8, r4, lsl #2]
    ddcc:	add.w	r3, r8, r4, lsl #2
    ddd0:	cbnz	r2, ddee <quorem+0x116>
    ddd2:	subs	r3, #4
    ddd4:	cmp	r8, r3
    ddd6:	bcc.n	dde2 <quorem+0x10a>
    ddd8:	b.n	ddea <quorem+0x112>
    ddda:	cmp	r8, r3
    dddc:	add.w	r4, r4, #4294967295
    dde0:	bcs.n	ddea <quorem+0x112>
    dde2:	ldr.w	r2, [r3], #-4
    dde6:	cmp	r2, #0
    dde8:	beq.n	ddda <quorem+0x102>
    ddea:	str.w	r4, [r9, #16]
    ddee:	mov	r0, r6
    ddf0:	add	sp, #12
    ddf2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ddf6:	movs	r0, #0
    ddf8:	add	sp, #12
    ddfa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ddfe:	nop

0000de00 <_dtoa_r>:
    de00:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    de04:	vpush	{d8}
    de08:	sub	sp, #60	; 0x3c
    de0a:	vstr	d0, [sp, #8]
    de0e:	str	r1, [sp, #4]
    de10:	ldr	r1, [r0, #56]	; 0x38
    de12:	ldr	r5, [sp, #104]	; 0x68
    de14:	str	r3, [sp, #20]
    de16:	vmov	r6, r7, d0
    de1a:	mov	r4, r0
    de1c:	mov	fp, r2
    de1e:	cbz	r1, de32 <_dtoa_r+0x32>
    de20:	ldr	r2, [r0, #60]	; 0x3c
    de22:	str	r2, [r1, #4]
    de24:	movs	r3, #1
    de26:	lsls	r3, r2
    de28:	str	r3, [r1, #8]
    de2a:	bl	b6c8 <_Bfree>
    de2e:	movs	r3, #0
    de30:	str	r3, [r4, #56]	; 0x38
    de32:	subs.w	r8, r7, #0
    de36:	ite	lt
    de38:	movlt	r3, #1
    de3a:	movge	r3, #0
    de3c:	str	r3, [r5, #0]
    de3e:	ldr	r3, [pc, #760]	; (e138 <_dtoa_r+0x338>)
    de40:	itt	lt
    de42:	biclt.w	r8, r8, #2147483648	; 0x80000000
    de46:	strlt.w	r8, [sp, #12]
    de4a:	bics.w	r3, r3, r8
    de4e:	beq.w	df90 <_dtoa_r+0x190>
    de52:	vldr	d8, [sp, #8]
    de56:	vcmp.f64	d8, #0.0
    de5a:	vmrs	APSR_nzcv, fpscr
    de5e:	bne.n	de84 <_dtoa_r+0x84>
    de60:	ldr	r2, [sp, #20]
    de62:	movs	r3, #1
    de64:	str	r3, [r2, #0]
    de66:	ldr	r3, [sp, #108]	; 0x6c
    de68:	cmp	r3, #0
    de6a:	beq.w	e2ec <_dtoa_r+0x4ec>
    de6e:	ldr	r3, [pc, #716]	; (e13c <_dtoa_r+0x33c>)
    de70:	ldr	r2, [sp, #108]	; 0x6c
    de72:	str	r3, [r2, #0]
    de74:	subs	r3, #1
    de76:	str	r3, [sp, #0]
    de78:	ldr	r0, [sp, #0]
    de7a:	add	sp, #60	; 0x3c
    de7c:	vpop	{d8}
    de80:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    de84:	add	r2, sp, #48	; 0x30
    de86:	add	r1, sp, #52	; 0x34
    de88:	mov	r0, r4
    de8a:	vmov.f64	d0, d8
    de8e:	bl	bd20 <__d2b>
    de92:	movs.w	r3, r8, lsr #20
    de96:	mov	r5, r0
    de98:	bne.w	dfc0 <_dtoa_r+0x1c0>
    de9c:	ldrd	r1, r3, [sp, #48]	; 0x30
    dea0:	add	r3, r1
    dea2:	addw	r2, r3, #1074	; 0x432
    dea6:	cmp	r2, #32
    dea8:	ble.w	e4a0 <_dtoa_r+0x6a0>
    deac:	rsb	r2, r2, #64	; 0x40
    deb0:	lsl.w	r8, r8, r2
    deb4:	addw	r2, r3, #1042	; 0x412
    deb8:	lsrs	r6, r2
    deba:	orr.w	r2, r8, r6
    debe:	vmov	s14, r2
    dec2:	vcvt.f64.u32	d7, s14
    dec6:	subs	r0, r3, #1
    dec8:	vmov	r6, s15
    decc:	vmov	r2, r3, d7
    ded0:	mov.w	sl, #1
    ded4:	sub.w	r3, r6, #32505856	; 0x1f00000
    ded8:	vldr	d3, [pc, #580]	; e120 <_dtoa_r+0x320>
    dedc:	vldr	d7, [pc, #584]	; e128 <_dtoa_r+0x328>
    dee0:	vldr	d5, [pc, #588]	; e130 <_dtoa_r+0x330>
    dee4:	vmov	s13, r0
    dee8:	vmov	d2, r2, r3
    deec:	vcvt.f64.s32	d4, s13
    def0:	vmov.f64	d6, #120	; 0x3fc00000  1.5
    def4:	vsub.f64	d6, d2, d6
    def8:	vfma.f64	d7, d6, d3
    defc:	vfma.f64	d7, d4, d5
    df00:	vcvt.s32.f64	s13, d7
    df04:	vcmpe.f64	d7, #0.0
    df08:	vmrs	APSR_nzcv, fpscr
    df0c:	vmov	r7, s13
    df10:	bpl.n	df24 <_dtoa_r+0x124>
    df12:	vcvt.f64.s32	d6, s13
    df16:	vcmp.f64	d6, d7
    df1a:	vmrs	APSR_nzcv, fpscr
    df1e:	it	ne
    df20:	addne.w	r7, r7, #4294967295
    df24:	cmp	r7, #22
    df26:	bhi.w	e1b4 <_dtoa_r+0x3b4>
    df2a:	ldr	r3, [pc, #532]	; (e140 <_dtoa_r+0x340>)
    df2c:	add.w	r3, r3, r7, lsl #3
    df30:	vldr	d7, [r3]
    df34:	vcmpe.f64	d8, d7
    df38:	vmrs	APSR_nzcv, fpscr
    df3c:	bpl.n	dfee <_dtoa_r+0x1ee>
    df3e:	subs	r1, r1, r0
    df40:	movs	r3, #0
    df42:	subs.w	r8, r1, #1
    df46:	add.w	r7, r7, #4294967295
    df4a:	str	r3, [sp, #40]	; 0x28
    df4c:	bmi.w	e1c2 <_dtoa_r+0x3c2>
    df50:	movs	r3, #0
    df52:	str	r3, [sp, #24]
    df54:	cmp	r7, #0
    df56:	bge.n	dffe <_dtoa_r+0x1fe>
    df58:	ldr	r3, [sp, #24]
    df5a:	str	r7, [sp, #16]
    df5c:	subs	r3, r3, r7
    df5e:	str	r3, [sp, #24]
    df60:	negs	r3, r7
    df62:	str	r3, [sp, #32]
    df64:	ldr	r3, [sp, #4]
    df66:	cmp	r3, #9
    df68:	mov.w	r7, #0
    df6c:	bhi.n	e00c <_dtoa_r+0x20c>
    df6e:	cmp	r3, #5
    df70:	ble.w	e4ae <_dtoa_r+0x6ae>
    df74:	subs	r3, #4
    df76:	str	r3, [sp, #4]
    df78:	movs	r6, #0
    df7a:	ldr	r3, [sp, #4]
    df7c:	subs	r2, r3, #2
    df7e:	cmp	r2, #3
    df80:	bhi.w	e1ce <_dtoa_r+0x3ce>
    df84:	tbh	[pc, r2, lsl #1]
    df88:	.word	0x03a703aa
    df8c:	.word	0x037e039d
    df90:	ldr	r2, [sp, #20]
    df92:	ubfx	r8, r8, #0, #20
    df96:	movw	r3, #9999	; 0x270f
    df9a:	orrs.w	r8, r8, r6
    df9e:	str	r3, [r2, #0]
    dfa0:	bne.n	dfe0 <_dtoa_r+0x1e0>
    dfa2:	ldr	r3, [sp, #108]	; 0x6c
    dfa4:	cmp	r3, #0
    dfa6:	beq.w	eacc <_dtoa_r+0xccc>
    dfaa:	ldr	r3, [pc, #408]	; (e144 <_dtoa_r+0x344>)
    dfac:	str	r3, [sp, #0]
    dfae:	adds	r3, #8
    dfb0:	ldr	r2, [sp, #108]	; 0x6c
    dfb2:	ldr	r0, [sp, #0]
    dfb4:	str	r3, [r2, #0]
    dfb6:	add	sp, #60	; 0x3c
    dfb8:	vpop	{d8}
    dfbc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dfc0:	vmov	r6, s17
    dfc4:	ubfx	r6, r6, #0, #20
    dfc8:	subw	r0, r3, #1023	; 0x3ff
    dfcc:	vmov	r2, r3, d8
    dfd0:	orr.w	r3, r6, #1069547520	; 0x3fc00000
    dfd4:	ldr	r1, [sp, #48]	; 0x30
    dfd6:	mov.w	sl, #0
    dfda:	orr.w	r3, r3, #3145728	; 0x300000
    dfde:	b.n	ded8 <_dtoa_r+0xd8>
    dfe0:	ldr	r3, [sp, #108]	; 0x6c
    dfe2:	cmp	r3, #0
    dfe4:	bne.w	e65e <_dtoa_r+0x85e>
    dfe8:	ldr	r3, [pc, #348]	; (e148 <_dtoa_r+0x348>)
    dfea:	str	r3, [sp, #0]
    dfec:	b.n	de78 <_dtoa_r+0x78>
    dfee:	subs	r1, r1, r0
    dff0:	movs	r3, #0
    dff2:	subs.w	r8, r1, #1
    dff6:	str	r3, [sp, #40]	; 0x28
    dff8:	bmi.w	e1c2 <_dtoa_r+0x3c2>
    dffc:	str	r3, [sp, #24]
    dffe:	movs	r3, #0
    e000:	str	r3, [sp, #32]
    e002:	ldr	r3, [sp, #4]
    e004:	str	r7, [sp, #16]
    e006:	cmp	r3, #9
    e008:	add	r8, r7
    e00a:	bls.n	df6e <_dtoa_r+0x16e>
    e00c:	movs	r3, #0
    e00e:	movs	r6, #1
    e010:	str	r3, [sp, #4]
    e012:	str	r6, [sp, #28]
    e014:	mov.w	r9, #4294967295
    e018:	mov	fp, r3
    e01a:	movs	r1, #0
    e01c:	str	r1, [r4, #60]	; 0x3c
    e01e:	str.w	r9, [sp, #44]	; 0x2c
    e022:	mov	r0, r4
    e024:	bl	b67c <_Balloc>
    e028:	str	r0, [sp, #0]
    e02a:	cmp	r0, #0
    e02c:	beq.w	eab0 <_dtoa_r+0xcb0>
    e030:	ldr	r3, [sp, #0]
    e032:	str	r3, [r4, #56]	; 0x38
    e034:	cmp.w	r9, #14
    e038:	bhi.w	e1f4 <_dtoa_r+0x3f4>
    e03c:	cmp	r6, #0
    e03e:	beq.w	e1f4 <_dtoa_r+0x3f4>
    e042:	ldr	r3, [sp, #16]
    e044:	cmp	r3, #0
    e046:	ble.w	e806 <_dtoa_r+0xa06>
    e04a:	ldr	r2, [pc, #244]	; (e140 <_dtoa_r+0x340>)
    e04c:	and.w	r1, r3, #15
    e050:	add.w	r2, r2, r1, lsl #3
    e054:	vldr	d7, [r2]
    e058:	asrs	r2, r3, #4
    e05a:	lsls	r3, r3, #23
    e05c:	bpl.w	e764 <_dtoa_r+0x964>
    e060:	ldr	r1, [pc, #232]	; (e14c <_dtoa_r+0x34c>)
    e062:	vldr	d6, [r1, #32]
    e066:	and.w	r2, r2, #15
    e06a:	movs	r0, #3
    e06c:	vdiv.f64	d5, d8, d6
    e070:	cbz	r2, e08a <_dtoa_r+0x28a>
    e072:	ldr	r1, [pc, #216]	; (e14c <_dtoa_r+0x34c>)
    e074:	lsls	r6, r2, #31
    e076:	bpl.n	e082 <_dtoa_r+0x282>
    e078:	vldr	d6, [r1]
    e07c:	adds	r0, #1
    e07e:	vmul.f64	d7, d7, d6
    e082:	asrs	r2, r2, #1
    e084:	add.w	r1, r1, #8
    e088:	bne.n	e074 <_dtoa_r+0x274>
    e08a:	vdiv.f64	d6, d5, d7
    e08e:	ldr	r3, [sp, #40]	; 0x28
    e090:	cbz	r3, e0a2 <_dtoa_r+0x2a2>
    e092:	vmov.f64	d7, #112	; 0x3f800000  1.0
    e096:	vcmpe.f64	d6, d7
    e09a:	vmrs	APSR_nzcv, fpscr
    e09e:	bmi.w	e9fe <_dtoa_r+0xbfe>
    e0a2:	vmov	s15, r0
    e0a6:	vcvt.f64.s32	d5, s15
    e0aa:	vmov.f64	d7, #28	; 0x40e00000  7.0
    e0ae:	vfma.f64	d7, d5, d6
    e0b2:	vmov	r2, s15
    e0b6:	vmov	r0, r1, d7
    e0ba:	sub.w	r1, r2, #54525952	; 0x3400000
    e0be:	cmp.w	r9, #0
    e0c2:	beq.w	e7d6 <_dtoa_r+0x9d6>
    e0c6:	ldr	r6, [sp, #16]
    e0c8:	mov	r2, r9
    e0ca:	ldr	r3, [sp, #28]
    e0cc:	cmp	r3, #0
    e0ce:	beq.w	e960 <_dtoa_r+0xb60>
    e0d2:	vmov.f64	d3, #96	; 0x3f000000  0.5
    e0d6:	ldr	r3, [pc, #104]	; (e140 <_dtoa_r+0x340>)
    e0d8:	vcvt.s32.f64	s9, d6
    e0dc:	add.w	ip, r3, r2, lsl #3
    e0e0:	vcvt.f64.s32	d7, s9
    e0e4:	vsub.f64	d7, d6, d7
    e0e8:	vldr	d6, [ip, #-8]
    e0ec:	vdiv.f64	d5, d3, d6
    e0f0:	vmov	d6, r0, r1
    e0f4:	vmov	r0, s9
    e0f8:	vsub.f64	d5, d5, d6
    e0fc:	ldr	r1, [sp, #0]
    e0fe:	vcmpe.f64	d5, d7
    e102:	adds	r0, #48	; 0x30
    e104:	vmrs	APSR_nzcv, fpscr
    e108:	strb.w	r0, [r1], #1
    e10c:	bgt.w	ea68 <_dtoa_r+0xc68>
    e110:	vmov.f64	d2, #112	; 0x3f800000  1.0
    e114:	vmov.f64	d4, #36	; 0x41200000  10.0
    e118:	mov.w	ip, #0
    e11c:	b.n	e182 <_dtoa_r+0x382>
    e11e:	nop
    e120:	.word	0x636f4361
    e124:	.word	0x3fd287a7
    e128:	.word	0x8b60c8b3
    e12c:	.word	0x3fc68a28
    e130:	.word	0x509f79fb
    e134:	.word	0x3fd34413
    e138:	.word	0x7ff00000
    e13c:	.word	0x20000ac5
    e140:	.word	0x200003a8
    e144:	.word	0x20000a18
    e148:	.word	0x20000a24
    e14c:	.word	0x20000380
    e150:	add.w	ip, ip, #1
    e154:	cmp	ip, r2
    e156:	bge.n	e1f4 <_dtoa_r+0x3f4>
    e158:	vmul.f64	d7, d7, d4
    e15c:	vmul.f64	d5, d5, d4
    e160:	vcvt.s32.f64	s13, d7
    e164:	vmov	r3, s13
    e168:	vcvt.f64.s32	d3, s13
    e16c:	adds	r3, #48	; 0x30
    e16e:	vsub.f64	d7, d7, d3
    e172:	vcmpe.f64	d7, d5
    e176:	vmrs	APSR_nzcv, fpscr
    e17a:	strb.w	r3, [r1], #1
    e17e:	bmi.w	ea68 <_dtoa_r+0xc68>
    e182:	vsub.f64	d6, d2, d7
    e186:	vcmpe.f64	d6, d5
    e18a:	vmrs	APSR_nzcv, fpscr
    e18e:	bpl.n	e150 <_dtoa_r+0x350>
    e190:	ldr	r2, [sp, #0]
    e192:	str	r6, [sp, #16]
    e194:	b.n	e19c <_dtoa_r+0x39c>
    e196:	cmp	r2, r1
    e198:	beq.w	ea3c <_dtoa_r+0xc3c>
    e19c:	mov	r9, r1
    e19e:	ldrb.w	r3, [r1, #-1]!
    e1a2:	cmp	r3, #57	; 0x39
    e1a4:	beq.n	e196 <_dtoa_r+0x396>
    e1a6:	adds	r3, #1
    e1a8:	uxtb	r3, r3
    e1aa:	strb	r3, [r1, #0]
    e1ac:	ldr	r3, [sp, #16]
    e1ae:	adds	r3, #1
    e1b0:	str	r3, [sp, #16]
    e1b2:	b.n	e460 <_dtoa_r+0x660>
    e1b4:	subs	r1, r1, r0
    e1b6:	movs	r3, #1
    e1b8:	subs.w	r8, r1, #1
    e1bc:	str	r3, [sp, #40]	; 0x28
    e1be:	bpl.w	df50 <_dtoa_r+0x150>
    e1c2:	rsb	r3, r1, #1
    e1c6:	str	r3, [sp, #24]
    e1c8:	mov.w	r8, #0
    e1cc:	b.n	df54 <_dtoa_r+0x154>
    e1ce:	movs	r6, #0
    e1d0:	str	r6, [r4, #60]	; 0x3c
    e1d2:	mov	r1, r6
    e1d4:	mov	r0, r4
    e1d6:	bl	b67c <_Balloc>
    e1da:	str	r0, [sp, #0]
    e1dc:	cmp	r0, #0
    e1de:	beq.w	eab0 <_dtoa_r+0xcb0>
    e1e2:	ldr	r3, [sp, #0]
    e1e4:	str	r3, [r4, #56]	; 0x38
    e1e6:	mov.w	r3, #4294967295
    e1ea:	str	r3, [sp, #44]	; 0x2c
    e1ec:	mov	r9, r3
    e1ee:	movs	r3, #1
    e1f0:	mov	fp, r6
    e1f2:	str	r3, [sp, #28]
    e1f4:	ldr	r2, [sp, #52]	; 0x34
    e1f6:	cmp	r2, #0
    e1f8:	blt.n	e2a6 <_dtoa_r+0x4a6>
    e1fa:	ldr	r1, [sp, #16]
    e1fc:	cmp	r1, #14
    e1fe:	bgt.n	e2a6 <_dtoa_r+0x4a6>
    e200:	ldr	r3, [pc, #732]	; (e4e0 <_dtoa_r+0x6e0>)
    e202:	cmp.w	fp, #0
    e206:	add.w	r3, r3, r1, lsl #3
    e20a:	vldr	d6, [r3]
    e20e:	bge.n	e23c <_dtoa_r+0x43c>
    e210:	cmp.w	r9, #0
    e214:	bgt.n	e23c <_dtoa_r+0x43c>
    e216:	bne.w	e7fe <_dtoa_r+0x9fe>
    e21a:	vmov.f64	d7, #20	; 0x40a00000  5.0
    e21e:	vmul.f64	d7, d6, d7
    e222:	vcmpe.f64	d8, d7
    e226:	vmrs	APSR_nzcv, fpscr
    e22a:	mov	sl, r9
    e22c:	mov	r6, r9
    e22e:	bhi.w	e70c <_dtoa_r+0x90c>
    e232:	ldr.w	r8, [sp]
    e236:	mvn.w	fp, fp
    e23a:	b.n	e71e <_dtoa_r+0x91e>
    e23c:	vdiv.f64	d7, d8, d6
    e240:	vcvt.s32.f64	s14, d7
    e244:	ldr	r1, [sp, #0]
    e246:	vmov	r3, s14
    e24a:	cmp.w	r9, #1
    e24e:	add.w	r3, r3, #48	; 0x30
    e252:	vcvt.f64.s32	d5, s14
    e256:	strb.w	r3, [r1], #1
    e25a:	vfms.f64	d8, d5, d6
    e25e:	beq.w	e8ca <_dtoa_r+0xaca>
    e262:	vmov.f64	d4, #36	; 0x41200000  10.0
    e266:	movs	r3, #1
    e268:	b.n	e28e <_dtoa_r+0x48e>
    e26a:	vdiv.f64	d7, d8, d6
    e26e:	vcvt.s32.f64	s14, d7
    e272:	adds	r3, #1
    e274:	vmov	r2, s14
    e278:	cmp	r3, r9
    e27a:	add.w	r2, r2, #48	; 0x30
    e27e:	vcvt.f64.s32	d5, s14
    e282:	strb.w	r2, [r1], #1
    e286:	vfms.f64	d8, d5, d6
    e28a:	beq.w	e8ca <_dtoa_r+0xaca>
    e28e:	vmul.f64	d8, d8, d4
    e292:	vcmp.f64	d8, #0.0
    e296:	vmrs	APSR_nzcv, fpscr
    e29a:	bne.n	e26a <_dtoa_r+0x46a>
    e29c:	ldr	r3, [sp, #16]
    e29e:	adds	r3, #1
    e2a0:	str	r3, [sp, #16]
    e2a2:	mov	r9, r1
    e2a4:	b.n	e460 <_dtoa_r+0x660>
    e2a6:	ldr	r3, [sp, #28]
    e2a8:	cbz	r3, e2fc <_dtoa_r+0x4fc>
    e2aa:	ldr	r3, [sp, #4]
    e2ac:	cmp	r3, #1
    e2ae:	ble.w	e79e <_dtoa_r+0x99e>
    e2b2:	ldr	r3, [sp, #32]
    e2b4:	add.w	sl, r9, #4294967295
    e2b8:	cmp	r3, sl
    e2ba:	bge.w	e73c <_dtoa_r+0x93c>
    e2be:	ldr	r3, [sp, #32]
    e2c0:	str.w	sl, [sp, #32]
    e2c4:	sub.w	r2, sl, r3
    e2c8:	add	r7, r2
    e2ca:	mov.w	sl, #0
    e2ce:	cmp.w	r9, #0
    e2d2:	blt.w	e920 <_dtoa_r+0xb20>
    e2d6:	ldr	r3, [sp, #24]
    e2d8:	str	r3, [sp, #36]	; 0x24
    e2da:	add	r3, r9
    e2dc:	add	r8, r9
    e2de:	str	r3, [sp, #24]
    e2e0:	movs	r1, #1
    e2e2:	mov	r0, r4
    e2e4:	bl	b820 <__i2b>
    e2e8:	mov	r6, r0
    e2ea:	b.n	e306 <_dtoa_r+0x506>
    e2ec:	ldr	r3, [pc, #500]	; (e4e4 <_dtoa_r+0x6e4>)
    e2ee:	str	r3, [sp, #0]
    e2f0:	ldr	r0, [sp, #0]
    e2f2:	add	sp, #60	; 0x3c
    e2f4:	vpop	{d8}
    e2f8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e2fc:	ldr	r3, [sp, #24]
    e2fe:	ldr.w	sl, [sp, #32]
    e302:	ldr	r6, [sp, #28]
    e304:	str	r3, [sp, #36]	; 0x24
    e306:	ldr	r3, [sp, #36]	; 0x24
    e308:	cbz	r3, e326 <_dtoa_r+0x526>
    e30a:	cmp.w	r8, #0
    e30e:	ble.n	e326 <_dtoa_r+0x526>
    e310:	cmp	r3, r8
    e312:	ldr	r1, [sp, #24]
    e314:	mov	r2, r3
    e316:	it	ge
    e318:	movge	r2, r8
    e31a:	subs	r1, r1, r2
    e31c:	subs	r3, r3, r2
    e31e:	str	r1, [sp, #24]
    e320:	str	r3, [sp, #36]	; 0x24
    e322:	sub.w	r8, r8, r2
    e326:	ldr	r3, [sp, #32]
    e328:	cbz	r3, e344 <_dtoa_r+0x544>
    e32a:	ldr	r3, [sp, #28]
    e32c:	cmp	r3, #0
    e32e:	beq.w	e880 <_dtoa_r+0xa80>
    e332:	cmp.w	sl, #0
    e336:	bgt.w	e742 <_dtoa_r+0x942>
    e33a:	ldr	r3, [sp, #32]
    e33c:	subs.w	r2, r3, sl
    e340:	bne.w	e942 <_dtoa_r+0xb42>
    e344:	movs	r1, #1
    e346:	mov	r0, r4
    e348:	bl	b820 <__i2b>
    e34c:	cmp	r7, #0
    e34e:	mov	sl, r0
    e350:	bgt.w	e4b2 <_dtoa_r+0x6b2>
    e354:	ldr	r3, [sp, #4]
    e356:	cmp	r3, #1
    e358:	ble.w	e66a <_dtoa_r+0x86a>
    e35c:	movs	r3, #0
    e35e:	str	r3, [sp, #32]
    e360:	movs	r0, #1
    e362:	cmp	r7, #0
    e364:	bne.w	e4ca <_dtoa_r+0x6ca>
    e368:	add	r0, r8
    e36a:	ands.w	r0, r0, #31
    e36e:	beq.w	e666 <_dtoa_r+0x866>
    e372:	rsb	r2, r0, #32
    e376:	cmp	r2, #4
    e378:	bgt.w	e48c <_dtoa_r+0x68c>
    e37c:	bne.w	e76c <_dtoa_r+0x96c>
    e380:	ldr	r3, [sp, #24]
    e382:	cmp	r3, #0
    e384:	ble.n	e392 <_dtoa_r+0x592>
    e386:	mov	r1, r5
    e388:	mov	r2, r3
    e38a:	mov	r0, r4
    e38c:	bl	ba98 <__lshift>
    e390:	mov	r5, r0
    e392:	cmp.w	r8, #0
    e396:	ble.n	e3a4 <_dtoa_r+0x5a4>
    e398:	mov	r1, sl
    e39a:	mov	r2, r8
    e39c:	mov	r0, r4
    e39e:	bl	ba98 <__lshift>
    e3a2:	mov	sl, r0
    e3a4:	ldr	r3, [sp, #40]	; 0x28
    e3a6:	cmp	r3, #0
    e3a8:	bne.w	e62a <_dtoa_r+0x82a>
    e3ac:	cmp.w	r9, #0
    e3b0:	ble.w	e5fe <_dtoa_r+0x7fe>
    e3b4:	ldr	r3, [sp, #28]
    e3b6:	cmp	r3, #0
    e3b8:	bne.w	e502 <_dtoa_r+0x702>
    e3bc:	ldr	r3, [sp, #16]
    e3be:	adds	r3, #1
    e3c0:	str	r3, [sp, #16]
    e3c2:	ldr.w	r8, [sp]
    e3c6:	movs	r7, #1
    e3c8:	b.n	e3da <_dtoa_r+0x5da>
    e3ca:	mov	r1, r5
    e3cc:	movs	r3, #0
    e3ce:	movs	r2, #10
    e3d0:	mov	r0, r4
    e3d2:	bl	b6dc <__multadd>
    e3d6:	adds	r7, #1
    e3d8:	mov	r5, r0
    e3da:	mov	r1, sl
    e3dc:	mov	r0, r5
    e3de:	bl	dcd8 <quorem>
    e3e2:	cmp	r9, r7
    e3e4:	add.w	r0, r0, #48	; 0x30
    e3e8:	strb.w	r0, [r8], #1
    e3ec:	bgt.n	e3ca <_dtoa_r+0x5ca>
    e3ee:	cmp.w	r9, #0
    e3f2:	ldr	r2, [sp, #0]
    e3f4:	ite	gt
    e3f6:	movgt	fp, r9
    e3f8:	movle.w	fp, #1
    e3fc:	mov	r3, r0
    e3fe:	add	fp, r2
    e400:	movs	r7, #0
    e402:	mov	r1, r5
    e404:	movs	r2, #1
    e406:	mov	r0, r4
    e408:	str	r3, [sp, #4]
    e40a:	bl	ba98 <__lshift>
    e40e:	mov	r1, sl
    e410:	mov	r5, r0
    e412:	bl	bb88 <__mcmp>
    e416:	cmp	r0, #0
    e418:	ble.w	e77a <_dtoa_r+0x97a>
    e41c:	ldrb.w	r3, [fp, #-1]
    e420:	ldr	r2, [sp, #0]
    e422:	add.w	fp, fp, #4294967295
    e426:	b.n	e432 <_dtoa_r+0x632>
    e428:	cmp	r2, fp
    e42a:	beq.w	e790 <_dtoa_r+0x990>
    e42e:	ldrb.w	r3, [fp, #-1]!
    e432:	cmp	r3, #57	; 0x39
    e434:	add.w	r9, fp, #1
    e438:	beq.n	e428 <_dtoa_r+0x628>
    e43a:	adds	r3, #1
    e43c:	strb.w	r3, [fp]
    e440:	mov	r1, sl
    e442:	mov	r0, r4
    e444:	bl	b6c8 <_Bfree>
    e448:	cbz	r6, e460 <_dtoa_r+0x660>
    e44a:	cbz	r7, e458 <_dtoa_r+0x658>
    e44c:	cmp	r7, r6
    e44e:	beq.n	e458 <_dtoa_r+0x658>
    e450:	mov	r1, r7
    e452:	mov	r0, r4
    e454:	bl	b6c8 <_Bfree>
    e458:	mov	r1, r6
    e45a:	mov	r0, r4
    e45c:	bl	b6c8 <_Bfree>
    e460:	mov	r1, r5
    e462:	mov	r0, r4
    e464:	bl	b6c8 <_Bfree>
    e468:	movs	r3, #0
    e46a:	strb.w	r3, [r9]
    e46e:	ldrd	r2, r3, [sp, #16]
    e472:	str	r2, [r3, #0]
    e474:	ldr	r3, [sp, #108]	; 0x6c
    e476:	cmp	r3, #0
    e478:	beq.w	de78 <_dtoa_r+0x78>
    e47c:	ldr	r0, [sp, #0]
    e47e:	str.w	r9, [r3]
    e482:	add	sp, #60	; 0x3c
    e484:	vpop	{d8}
    e488:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e48c:	rsb	r0, r0, #28
    e490:	ldr	r3, [sp, #24]
    e492:	add	r3, r0
    e494:	str	r3, [sp, #24]
    e496:	ldr	r3, [sp, #36]	; 0x24
    e498:	add	r3, r0
    e49a:	str	r3, [sp, #36]	; 0x24
    e49c:	add	r8, r0
    e49e:	b.n	e380 <_dtoa_r+0x580>
    e4a0:	rsb	r2, r2, #32
    e4a4:	lsl.w	r2, r6, r2
    e4a8:	vmov	s14, r2
    e4ac:	b.n	dec2 <_dtoa_r+0xc2>
    e4ae:	movs	r6, #1
    e4b0:	b.n	df7a <_dtoa_r+0x17a>
    e4b2:	mov	r1, r0
    e4b4:	mov	r2, r7
    e4b6:	mov	r0, r4
    e4b8:	bl	b9d8 <__pow5mult>
    e4bc:	ldr	r3, [sp, #4]
    e4be:	cmp	r3, #1
    e4c0:	mov	sl, r0
    e4c2:	ble.w	e850 <_dtoa_r+0xa50>
    e4c6:	movs	r3, #0
    e4c8:	str	r3, [sp, #32]
    e4ca:	ldr.w	r2, [sl, #16]
    e4ce:	add.w	r2, sl, r2, lsl #2
    e4d2:	ldr	r0, [r2, #16]
    e4d4:	bl	b780 <__hi0bits>
    e4d8:	rsb	r0, r0, #32
    e4dc:	b.n	e368 <_dtoa_r+0x568>
    e4de:	nop
    e4e0:	.word	0x200003a8
    e4e4:	.word	0x20000ac4
    e4e8:	mov	r1, r6
    e4ea:	movs	r3, #0
    e4ec:	movs	r2, #10
    e4ee:	mov	r0, r4
    e4f0:	bl	b6dc <__multadd>
    e4f4:	ldr	r3, [sp, #44]	; 0x2c
    e4f6:	cmp	r3, #0
    e4f8:	mov	r6, r0
    e4fa:	ble.w	ea9a <_dtoa_r+0xc9a>
    e4fe:	str	r7, [sp, #16]
    e500:	mov	r9, r3
    e502:	ldr	r3, [sp, #36]	; 0x24
    e504:	cmp	r3, #0
    e506:	ble.n	e514 <_dtoa_r+0x714>
    e508:	mov	r1, r6
    e50a:	mov	r2, r3
    e50c:	mov	r0, r4
    e50e:	bl	ba98 <__lshift>
    e512:	mov	r6, r0
    e514:	ldr	r3, [sp, #32]
    e516:	cmp	r3, #0
    e518:	bne.w	e8f2 <_dtoa_r+0xaf2>
    e51c:	mov	r8, r6
    e51e:	ldr	r3, [sp, #8]
    e520:	ldr	r7, [sp, #0]
    e522:	and.w	r2, r3, #1
    e526:	subs	r3, r7, #1
    e528:	add	r3, r9
    e52a:	str	r3, [sp, #32]
    e52c:	ldr	r3, [sp, #4]
    e52e:	str	r2, [sp, #40]	; 0x28
    e530:	orrs	r3, r2
    e532:	str	r3, [sp, #36]	; 0x24
    e534:	mov	r1, sl
    e536:	mov	r0, r5
    e538:	bl	dcd8 <quorem>
    e53c:	mov	r1, r6
    e53e:	mov	fp, r0
    e540:	mov	r0, r5
    e542:	bl	bb88 <__mcmp>
    e546:	mov	r2, r8
    e548:	mov	r1, sl
    e54a:	mov	r9, r0
    e54c:	mov	r0, r4
    e54e:	bl	bbcc <__mdiff>
    e552:	ldr	r2, [r0, #12]
    e554:	mov	r1, r0
    e556:	add.w	r3, fp, #48	; 0x30
    e55a:	cmp	r2, #0
    e55c:	bne.n	e5e4 <_dtoa_r+0x7e4>
    e55e:	strd	r0, r3, [sp, #24]
    e562:	mov	r0, r5
    e564:	bl	bb88 <__mcmp>
    e568:	ldr	r1, [sp, #24]
    e56a:	str	r0, [sp, #8]
    e56c:	mov	r0, r4
    e56e:	bl	b6c8 <_Bfree>
    e572:	ldr	r2, [sp, #8]
    e574:	ldr	r3, [sp, #28]
    e576:	cbnz	r2, e580 <_dtoa_r+0x780>
    e578:	ldr	r1, [sp, #36]	; 0x24
    e57a:	cmp	r1, #0
    e57c:	beq.w	ea7c <_dtoa_r+0xc7c>
    e580:	cmp.w	r9, #0
    e584:	blt.w	e88e <_dtoa_r+0xa8e>
    e588:	ldr	r1, [sp, #4]
    e58a:	orr.w	r9, r9, r1
    e58e:	ldr	r1, [sp, #40]	; 0x28
    e590:	orrs.w	r9, r1, r9
    e594:	beq.w	e88e <_dtoa_r+0xa8e>
    e598:	cmp	r2, #0
    e59a:	bgt.w	e92a <_dtoa_r+0xb2a>
    e59e:	ldr	r2, [sp, #32]
    e5a0:	strb	r3, [r7, #0]
    e5a2:	add.w	r9, r7, #1
    e5a6:	cmp	r7, r2
    e5a8:	mov	fp, r9
    e5aa:	beq.w	e936 <_dtoa_r+0xb36>
    e5ae:	mov	r1, r5
    e5b0:	movs	r3, #0
    e5b2:	movs	r2, #10
    e5b4:	mov	r0, r4
    e5b6:	bl	b6dc <__multadd>
    e5ba:	cmp	r6, r8
    e5bc:	mov	r5, r0
    e5be:	mov	r1, r6
    e5c0:	mov.w	r3, #0
    e5c4:	mov.w	r2, #10
    e5c8:	mov	r0, r4
    e5ca:	beq.n	e5f2 <_dtoa_r+0x7f2>
    e5cc:	bl	b6dc <__multadd>
    e5d0:	mov	r1, r8
    e5d2:	mov	r6, r0
    e5d4:	movs	r3, #0
    e5d6:	movs	r2, #10
    e5d8:	mov	r0, r4
    e5da:	bl	b6dc <__multadd>
    e5de:	mov	r7, r9
    e5e0:	mov	r8, r0
    e5e2:	b.n	e534 <_dtoa_r+0x734>
    e5e4:	mov	r0, r4
    e5e6:	str	r3, [sp, #8]
    e5e8:	bl	b6c8 <_Bfree>
    e5ec:	ldr	r3, [sp, #8]
    e5ee:	movs	r2, #1
    e5f0:	b.n	e580 <_dtoa_r+0x780>
    e5f2:	bl	b6dc <__multadd>
    e5f6:	mov	r7, r9
    e5f8:	mov	r6, r0
    e5fa:	mov	r8, r0
    e5fc:	b.n	e534 <_dtoa_r+0x734>
    e5fe:	ldr	r3, [sp, #4]
    e600:	cmp	r3, #2
    e602:	bgt.n	e6e8 <_dtoa_r+0x8e8>
    e604:	ldr	r3, [sp, #28]
    e606:	cmp	r3, #0
    e608:	bne.w	e502 <_dtoa_r+0x702>
    e60c:	ldr	r3, [sp, #16]
    e60e:	mov	r1, sl
    e610:	adds	r3, #1
    e612:	mov	r0, r5
    e614:	str	r3, [sp, #16]
    e616:	bl	dcd8 <quorem>
    e61a:	ldr.w	fp, [sp]
    e61e:	add.w	r3, r0, #48	; 0x30
    e622:	strb.w	r3, [fp], #1
    e626:	movs	r7, #0
    e628:	b.n	e402 <_dtoa_r+0x602>
    e62a:	mov	r1, sl
    e62c:	mov	r0, r5
    e62e:	bl	bb88 <__mcmp>
    e632:	cmp	r0, #0
    e634:	bge.w	e3ac <_dtoa_r+0x5ac>
    e638:	mov	r1, r5
    e63a:	movs	r3, #0
    e63c:	movs	r2, #10
    e63e:	mov	r0, r4
    e640:	bl	b6dc <__multadd>
    e644:	ldr	r3, [sp, #16]
    e646:	subs	r7, r3, #1
    e648:	ldr	r3, [sp, #28]
    e64a:	mov	r5, r0
    e64c:	cmp	r3, #0
    e64e:	bne.w	e4e8 <_dtoa_r+0x6e8>
    e652:	ldr	r3, [sp, #44]	; 0x2c
    e654:	cmp	r3, #0
    e656:	ble.w	ea8a <_dtoa_r+0xc8a>
    e65a:	mov	r9, r3
    e65c:	b.n	e3c2 <_dtoa_r+0x5c2>
    e65e:	ldr	r3, [pc, #752]	; (e950 <_dtoa_r+0xb50>)
    e660:	str	r3, [sp, #0]
    e662:	adds	r3, #3
    e664:	b.n	dfb0 <_dtoa_r+0x1b0>
    e666:	movs	r0, #28
    e668:	b.n	e490 <_dtoa_r+0x690>
    e66a:	ldrd	r0, r1, [sp, #8]
    e66e:	cmp	r0, #0
    e670:	bne.w	e35c <_dtoa_r+0x55c>
    e674:	ubfx	r2, r1, #0, #20
    e678:	cmp	r2, #0
    e67a:	beq.w	e866 <_dtoa_r+0xa66>
    e67e:	ldr	r3, [sp, #8]
    e680:	str	r3, [sp, #32]
    e682:	b.n	e360 <_dtoa_r+0x560>
    e684:	movs	r3, #1
    e686:	str	r3, [sp, #28]
    e688:	ldr	r3, [sp, #16]
    e68a:	add	r3, fp
    e68c:	add.w	r9, r3, #1
    e690:	cmp.w	r9, #1
    e694:	mov	ip, r9
    e696:	str	r3, [sp, #44]	; 0x2c
    e698:	it	lt
    e69a:	movlt.w	ip, #1
    e69e:	movs	r1, #0
    e6a0:	cmp.w	ip, #23
    e6a4:	str	r1, [r4, #60]	; 0x3c
    e6a6:	ble.w	e022 <_dtoa_r+0x222>
    e6aa:	movs	r0, #1
    e6ac:	movs	r2, #4
    e6ae:	lsls	r2, r2, #1
    e6b0:	add.w	r3, r2, #20
    e6b4:	cmp	r3, ip
    e6b6:	mov	r1, r0
    e6b8:	add.w	r0, r0, #1
    e6bc:	bls.n	e6ae <_dtoa_r+0x8ae>
    e6be:	str	r1, [r4, #60]	; 0x3c
    e6c0:	b.n	e022 <_dtoa_r+0x222>
    e6c2:	movs	r3, #1
    e6c4:	str	r3, [sp, #28]
    e6c6:	cmp.w	fp, #0
    e6ca:	ble.n	e772 <_dtoa_r+0x972>
    e6cc:	str.w	fp, [sp, #44]	; 0x2c
    e6d0:	mov	r9, fp
    e6d2:	mov	ip, fp
    e6d4:	b.n	e69e <_dtoa_r+0x89e>
    e6d6:	movs	r3, #0
    e6d8:	str	r3, [sp, #28]
    e6da:	b.n	e688 <_dtoa_r+0x888>
    e6dc:	movs	r3, #0
    e6de:	str	r3, [sp, #28]
    e6e0:	b.n	e6c6 <_dtoa_r+0x8c6>
    e6e2:	ldr.w	r9, [sp, #44]	; 0x2c
    e6e6:	str	r7, [sp, #16]
    e6e8:	cmp.w	r9, #0
    e6ec:	bne.w	e232 <_dtoa_r+0x432>
    e6f0:	mov	r1, sl
    e6f2:	mov	r3, r9
    e6f4:	movs	r2, #5
    e6f6:	mov	r0, r4
    e6f8:	bl	b6dc <__multadd>
    e6fc:	mov	r1, r0
    e6fe:	mov	sl, r0
    e700:	mov	r0, r5
    e702:	bl	bb88 <__mcmp>
    e706:	cmp	r0, #0
    e708:	ble.w	e232 <_dtoa_r+0x432>
    e70c:	ldr	r3, [sp, #16]
    e70e:	add.w	fp, r3, #1
    e712:	ldr	r3, [sp, #0]
    e714:	movs	r2, #49	; 0x31
    e716:	mov	r8, r3
    e718:	strb.w	r2, [r3], #1
    e71c:	str	r3, [sp, #0]
    e71e:	mov	r1, sl
    e720:	mov	r0, r4
    e722:	bl	b6c8 <_Bfree>
    e726:	add.w	r3, fp, #1
    e72a:	ldr.w	r9, [sp]
    e72e:	str	r3, [sp, #16]
    e730:	str.w	r8, [sp]
    e734:	cmp	r6, #0
    e736:	bne.w	e458 <_dtoa_r+0x658>
    e73a:	b.n	e460 <_dtoa_r+0x660>
    e73c:	sub.w	sl, r3, sl
    e740:	b.n	e2ce <_dtoa_r+0x4ce>
    e742:	mov	r1, r6
    e744:	mov	r2, sl
    e746:	mov	r0, r4
    e748:	bl	b9d8 <__pow5mult>
    e74c:	mov	r2, r5
    e74e:	mov	r1, r0
    e750:	mov	r6, r0
    e752:	mov	r0, r4
    e754:	bl	b87c <__multiply>
    e758:	mov	r1, r5
    e75a:	mov	r5, r0
    e75c:	mov	r0, r4
    e75e:	bl	b6c8 <_Bfree>
    e762:	b.n	e33a <_dtoa_r+0x53a>
    e764:	movs	r0, #2
    e766:	vmov.f64	d5, d8
    e76a:	b.n	e070 <_dtoa_r+0x270>
    e76c:	rsb	r0, r0, #60	; 0x3c
    e770:	b.n	e490 <_dtoa_r+0x690>
    e772:	mov.w	fp, #1
    e776:	mov	r9, fp
    e778:	b.n	e01a <_dtoa_r+0x21a>
    e77a:	bne.n	e784 <_dtoa_r+0x984>
    e77c:	ldr	r3, [sp, #4]
    e77e:	lsls	r3, r3, #31
    e780:	bmi.w	e41c <_dtoa_r+0x61c>
    e784:	mov	r9, fp
    e786:	ldrb.w	r3, [fp, #-1]!
    e78a:	cmp	r3, #48	; 0x30
    e78c:	beq.n	e784 <_dtoa_r+0x984>
    e78e:	b.n	e440 <_dtoa_r+0x640>
    e790:	ldr	r3, [sp, #16]
    e792:	ldr	r2, [sp, #0]
    e794:	adds	r3, #1
    e796:	str	r3, [sp, #16]
    e798:	movs	r3, #49	; 0x31
    e79a:	strb	r3, [r2, #0]
    e79c:	b.n	e440 <_dtoa_r+0x640>
    e79e:	cmp.w	sl, #0
    e7a2:	beq.w	e9ec <_dtoa_r+0xbec>
    e7a6:	addw	r2, r2, #1075	; 0x433
    e7aa:	ldr	r3, [sp, #24]
    e7ac:	str	r3, [sp, #36]	; 0x24
    e7ae:	add	r3, r2
    e7b0:	ldr.w	sl, [sp, #32]
    e7b4:	str	r3, [sp, #24]
    e7b6:	add	r8, r2
    e7b8:	b.n	e2e0 <_dtoa_r+0x4e0>
    e7ba:	vmov	s15, r0
    e7be:	vmov.f64	d5, #28	; 0x40e00000  7.0
    e7c2:	vcvt.f64.s32	d7, s15
    e7c6:	vfma.f64	d5, d6, d7
    e7ca:	vmov	r2, s11
    e7ce:	vmov	r0, r1, d5
    e7d2:	sub.w	r1, r2, #54525952	; 0x3400000
    e7d6:	vmov	d5, r0, r1
    e7da:	vmov.f64	d7, #20	; 0x40a00000  5.0
    e7de:	vsub.f64	d7, d6, d7
    e7e2:	vcmpe.f64	d7, d5
    e7e6:	vmrs	APSR_nzcv, fpscr
    e7ea:	bgt.w	ea5c <_dtoa_r+0xc5c>
    e7ee:	vneg.f64	d5, d5
    e7f2:	vcmpe.f64	d7, d5
    e7f6:	vmrs	APSR_nzcv, fpscr
    e7fa:	bpl.w	e1f4 <_dtoa_r+0x3f4>
    e7fe:	mov.w	sl, #0
    e802:	mov	r6, sl
    e804:	b.n	e232 <_dtoa_r+0x432>
    e806:	beq.w	e9f4 <_dtoa_r+0xbf4>
    e80a:	ldr	r3, [sp, #16]
    e80c:	ldr	r1, [pc, #324]	; (e954 <_dtoa_r+0xb54>)
    e80e:	negs	r2, r3
    e810:	and.w	r0, r2, #15
    e814:	add.w	r1, r1, r0, lsl #3
    e818:	vldr	d6, [r1]
    e81c:	asrs	r2, r2, #4
    e81e:	vmul.f64	d6, d8, d6
    e822:	beq.w	eaaa <_dtoa_r+0xcaa>
    e826:	vmov.f64	d7, d6
    e82a:	ldr	r1, [pc, #300]	; (e958 <_dtoa_r+0xb58>)
    e82c:	movs	r6, #0
    e82e:	movs	r0, #2
    e830:	lsls	r3, r2, #31
    e832:	bpl.n	e840 <_dtoa_r+0xa40>
    e834:	vldr	d5, [r1]
    e838:	adds	r0, #1
    e83a:	movs	r6, #1
    e83c:	vmul.f64	d7, d7, d5
    e840:	asrs	r2, r2, #1
    e842:	add.w	r1, r1, #8
    e846:	bne.n	e830 <_dtoa_r+0xa30>
    e848:	cmp	r6, #0
    e84a:	vseleq.f64	d6, d6, d7
    e84e:	b.n	e08e <_dtoa_r+0x28e>
    e850:	ldr	r3, [sp, #8]
    e852:	cmp	r3, #0
    e854:	bne.w	e4c6 <_dtoa_r+0x6c6>
    e858:	ldrd	r0, r1, [sp, #8]
    e85c:	ubfx	r2, r1, #0, #20
    e860:	cmp	r2, #0
    e862:	bne.w	ead4 <_dtoa_r+0xcd4>
    e866:	ldr	r2, [pc, #244]	; (e95c <_dtoa_r+0xb5c>)
    e868:	ands	r2, r1
    e86a:	cmp	r2, #0
    e86c:	beq.w	ea64 <_dtoa_r+0xc64>
    e870:	ldr	r3, [sp, #24]
    e872:	adds	r3, #1
    e874:	str	r3, [sp, #24]
    e876:	movs	r3, #1
    e878:	add.w	r8, r8, #1
    e87c:	str	r3, [sp, #32]
    e87e:	b.n	e360 <_dtoa_r+0x560>
    e880:	mov	r1, r5
    e882:	ldr	r2, [sp, #32]
    e884:	mov	r0, r4
    e886:	bl	b9d8 <__pow5mult>
    e88a:	mov	r5, r0
    e88c:	b.n	e344 <_dtoa_r+0x544>
    e88e:	cmp	r2, #0
    e890:	ble.n	e8b8 <_dtoa_r+0xab8>
    e892:	mov	r1, r5
    e894:	movs	r2, #1
    e896:	mov	r0, r4
    e898:	str	r3, [sp, #4]
    e89a:	bl	ba98 <__lshift>
    e89e:	mov	r1, sl
    e8a0:	mov	r5, r0
    e8a2:	bl	bb88 <__mcmp>
    e8a6:	cmp	r0, #0
    e8a8:	ldr	r3, [sp, #4]
    e8aa:	ble.w	ea70 <_dtoa_r+0xc70>
    e8ae:	cmp	r3, #57	; 0x39
    e8b0:	beq.w	ea48 <_dtoa_r+0xc48>
    e8b4:	add.w	r3, fp, #49	; 0x31
    e8b8:	mov	r9, r7
    e8ba:	strb.w	r3, [r9], #1
    e8be:	ldr	r3, [sp, #16]
    e8c0:	adds	r3, #1
    e8c2:	mov	r7, r6
    e8c4:	str	r3, [sp, #16]
    e8c6:	mov	r6, r8
    e8c8:	b.n	e440 <_dtoa_r+0x640>
    e8ca:	vadd.f64	d8, d8, d8
    e8ce:	vcmpe.f64	d8, d6
    e8d2:	vmrs	APSR_nzcv, fpscr
    e8d6:	bgt.n	e8ee <_dtoa_r+0xaee>
    e8d8:	vcmp.f64	d8, d6
    e8dc:	vmrs	APSR_nzcv, fpscr
    e8e0:	bne.w	e29c <_dtoa_r+0x49c>
    e8e4:	vmov	r3, s14
    e8e8:	lsls	r0, r3, #31
    e8ea:	bpl.w	e29c <_dtoa_r+0x49c>
    e8ee:	ldr	r2, [sp, #0]
    e8f0:	b.n	e19c <_dtoa_r+0x39c>
    e8f2:	ldr	r1, [r6, #4]
    e8f4:	mov	r0, r4
    e8f6:	bl	b67c <_Balloc>
    e8fa:	mov	r7, r0
    e8fc:	cmp	r0, #0
    e8fe:	beq.w	eabe <_dtoa_r+0xcbe>
    e902:	ldr	r3, [r6, #16]
    e904:	adds	r3, #2
    e906:	lsls	r2, r3, #2
    e908:	add.w	r1, r6, #12
    e90c:	adds	r0, #12
    e90e:	bl	756c <memcpy>
    e912:	mov	r1, r7
    e914:	movs	r2, #1
    e916:	mov	r0, r4
    e918:	bl	ba98 <__lshift>
    e91c:	mov	r8, r0
    e91e:	b.n	e51e <_dtoa_r+0x71e>
    e920:	ldr	r3, [sp, #24]
    e922:	sub.w	r3, r3, r9
    e926:	str	r3, [sp, #36]	; 0x24
    e928:	b.n	e2e0 <_dtoa_r+0x4e0>
    e92a:	cmp	r3, #57	; 0x39
    e92c:	beq.w	ea48 <_dtoa_r+0xc48>
    e930:	mov	r9, r7
    e932:	adds	r3, #1
    e934:	b.n	e8ba <_dtoa_r+0xaba>
    e936:	ldr	r2, [sp, #16]
    e938:	adds	r2, #1
    e93a:	mov	r7, r6
    e93c:	str	r2, [sp, #16]
    e93e:	mov	r6, r8
    e940:	b.n	e402 <_dtoa_r+0x602>
    e942:	mov	r1, r5
    e944:	mov	r0, r4
    e946:	bl	b9d8 <__pow5mult>
    e94a:	mov	r5, r0
    e94c:	b.n	e344 <_dtoa_r+0x544>
    e94e:	nop
    e950:	.word	0x20000a24
    e954:	.word	0x200003a8
    e958:	.word	0x20000380
    e95c:	.word	0x7ff00000
    e960:	ldr	r3, [pc, #376]	; (eadc <_dtoa_r+0xcdc>)
    e962:	vcvt.s32.f64	s11, d6
    e966:	add.w	ip, r3, r2, lsl #3
    e96a:	vldr	d3, [ip, #-8]
    e96e:	vcvt.f64.s32	d7, s11
    e972:	vsub.f64	d7, d6, d7
    e976:	vmov	d6, r0, r1
    e97a:	vmov	r1, s11
    e97e:	vmul.f64	d3, d3, d6
    e982:	ldr	r0, [sp, #0]
    e984:	adds	r1, #48	; 0x30
    e986:	cmp	r2, #1
    e988:	strb.w	r1, [r0], #1
    e98c:	beq.w	ea96 <_dtoa_r+0xc96>
    e990:	vmov.f64	d4, #36	; 0x41200000  10.0
    e994:	ldr	r3, [sp, #0]
    e996:	adds	r1, r3, r2
    e998:	vmul.f64	d7, d7, d4
    e99c:	vcvt.s32.f64	s13, d7
    e9a0:	vmov	r3, s13
    e9a4:	adds	r3, #48	; 0x30
    e9a6:	strb.w	r3, [r0], #1
    e9aa:	cmp	r1, r0
    e9ac:	vcvt.f64.s32	d5, s13
    e9b0:	vsub.f64	d7, d7, d5
    e9b4:	bne.n	e998 <_dtoa_r+0xb98>
    e9b6:	vmov.f64	d6, #96	; 0x3f000000  0.5
    e9ba:	vadd.f64	d5, d3, d6
    e9be:	vcmpe.f64	d5, d7
    e9c2:	vmrs	APSR_nzcv, fpscr
    e9c6:	bmi.w	e190 <_dtoa_r+0x390>
    e9ca:	vsub.f64	d6, d6, d3
    e9ce:	vcmpe.f64	d6, d7
    e9d2:	vmrs	APSR_nzcv, fpscr
    e9d6:	ble.w	e1f4 <_dtoa_r+0x3f4>
    e9da:	mov	r9, r1
    e9dc:	subs	r1, #1
    e9de:	ldrb.w	r3, [r9, #-1]
    e9e2:	cmp	r3, #48	; 0x30
    e9e4:	beq.n	e9da <_dtoa_r+0xbda>
    e9e6:	adds	r3, r6, #1
    e9e8:	str	r3, [sp, #16]
    e9ea:	b.n	e460 <_dtoa_r+0x660>
    e9ec:	ldr	r2, [sp, #48]	; 0x30
    e9ee:	rsb	r2, r2, #54	; 0x36
    e9f2:	b.n	e7aa <_dtoa_r+0x9aa>
    e9f4:	movs	r0, #2
    e9f6:	vmov.f64	d6, d8
    e9fa:	b.w	e08e <_dtoa_r+0x28e>
    e9fe:	cmp.w	r9, #0
    ea02:	beq.w	e7ba <_dtoa_r+0x9ba>
    ea06:	ldr	r2, [sp, #44]	; 0x2c
    ea08:	cmp	r2, #0
    ea0a:	ble.w	e1f4 <_dtoa_r+0x3f4>
    ea0e:	vmov.f64	d4, #36	; 0x41200000  10.0
    ea12:	vmul.f64	d6, d6, d4
    ea16:	adds	r0, #1
    ea18:	vmov	s15, r0
    ea1c:	ldr	r3, [sp, #16]
    ea1e:	vcvt.f64.s32	d5, s15
    ea22:	vmov.f64	d7, #28	; 0x40e00000  7.0
    ea26:	vfma.f64	d7, d6, d5
    ea2a:	vmov	ip, s15
    ea2e:	vmov	r0, r1, d7
    ea32:	subs	r6, r3, #1
    ea34:	sub.w	r1, ip, #54525952	; 0x3400000
    ea38:	b.w	e0ca <_dtoa_r+0x2ca>
    ea3c:	ldr	r3, [sp, #16]
    ea3e:	adds	r3, #1
    ea40:	str	r3, [sp, #16]
    ea42:	movs	r3, #49	; 0x31
    ea44:	b.w	e1aa <_dtoa_r+0x3aa>
    ea48:	ldr	r3, [sp, #16]
    ea4a:	mov	fp, r7
    ea4c:	adds	r3, #1
    ea4e:	str	r3, [sp, #16]
    ea50:	movs	r3, #57	; 0x39
    ea52:	mov	r7, r6
    ea54:	strb.w	r3, [fp], #1
    ea58:	mov	r6, r8
    ea5a:	b.n	e420 <_dtoa_r+0x620>
    ea5c:	mov.w	sl, #0
    ea60:	mov	r6, sl
    ea62:	b.n	e70c <_dtoa_r+0x90c>
    ea64:	str	r2, [sp, #32]
    ea66:	b.n	e360 <_dtoa_r+0x560>
    ea68:	adds	r3, r6, #1
    ea6a:	str	r3, [sp, #16]
    ea6c:	mov	r9, r1
    ea6e:	b.n	e460 <_dtoa_r+0x660>
    ea70:	bne.w	e8b8 <_dtoa_r+0xab8>
    ea74:	lsls	r2, r3, #31
    ea76:	bpl.w	e8b8 <_dtoa_r+0xab8>
    ea7a:	b.n	e8ae <_dtoa_r+0xaae>
    ea7c:	cmp	r3, #57	; 0x39
    ea7e:	beq.n	ea48 <_dtoa_r+0xc48>
    ea80:	cmp.w	r9, #0
    ea84:	bgt.w	e8b4 <_dtoa_r+0xab4>
    ea88:	b.n	e8b8 <_dtoa_r+0xab8>
    ea8a:	ldr	r3, [sp, #4]
    ea8c:	cmp	r3, #2
    ea8e:	bgt.w	e6e2 <_dtoa_r+0x8e2>
    ea92:	str	r7, [sp, #16]
    ea94:	b.n	e60c <_dtoa_r+0x80c>
    ea96:	mov	r1, r0
    ea98:	b.n	e9b6 <_dtoa_r+0xbb6>
    ea9a:	ldr	r3, [sp, #4]
    ea9c:	cmp	r3, #2
    ea9e:	bgt.w	e6e2 <_dtoa_r+0x8e2>
    eaa2:	ldr.w	r9, [sp, #44]	; 0x2c
    eaa6:	str	r7, [sp, #16]
    eaa8:	b.n	e502 <_dtoa_r+0x702>
    eaaa:	movs	r0, #2
    eaac:	b.w	e08e <_dtoa_r+0x28e>
    eab0:	ldr	r3, [pc, #44]	; (eae0 <_dtoa_r+0xce0>)
    eab2:	ldr	r0, [pc, #48]	; (eae4 <_dtoa_r+0xce4>)
    eab4:	movs	r2, #0
    eab6:	movw	r1, #431	; 0x1af
    eaba:	bl	dc20 <__assert_func>
    eabe:	ldr	r3, [pc, #32]	; (eae0 <_dtoa_r+0xce0>)
    eac0:	ldr	r0, [pc, #32]	; (eae4 <_dtoa_r+0xce4>)
    eac2:	mov	r2, r7
    eac4:	movw	r1, #751	; 0x2ef
    eac8:	bl	dc20 <__assert_func>
    eacc:	ldr	r3, [pc, #24]	; (eae8 <_dtoa_r+0xce8>)
    eace:	str	r3, [sp, #0]
    ead0:	b.w	de78 <_dtoa_r+0x78>
    ead4:	ldr	r3, [sp, #8]
    ead6:	str	r3, [sp, #32]
    ead8:	b.n	e4ca <_dtoa_r+0x6ca>
    eada:	nop
    eadc:	.word	0x200003a8
    eae0:	.word	0x200008a4
    eae4:	.word	0x20000a28
    eae8:	.word	0x20000a18

0000eaec <_wcrtomb_r>:
    eaec:	push	{r4, r5, r6, lr}
    eaee:	mov	r5, r0
    eaf0:	sub	sp, #16
    eaf2:	cbz	r3, eb0c <_wcrtomb_r+0x20>
    eaf4:	mov	r4, r3
    eaf6:	cbz	r1, eb14 <_wcrtomb_r+0x28>
    eaf8:	ldr	r3, [pc, #56]	; (eb34 <_wcrtomb_r+0x48>)
    eafa:	mov	r0, r5
    eafc:	ldr.w	r6, [r3, #224]	; 0xe0
    eb00:	mov	r3, r4
    eb02:	blx	r6
    eb04:	adds	r3, r0, #1
    eb06:	beq.n	eb28 <_wcrtomb_r+0x3c>
    eb08:	add	sp, #16
    eb0a:	pop	{r4, r5, r6, pc}
    eb0c:	add.w	r4, r0, #260	; 0x104
    eb10:	cmp	r1, #0
    eb12:	bne.n	eaf8 <_wcrtomb_r+0xc>
    eb14:	ldr	r2, [pc, #28]	; (eb34 <_wcrtomb_r+0x48>)
    eb16:	mov	r3, r4
    eb18:	ldr.w	r6, [r2, #224]	; 0xe0
    eb1c:	mov	r0, r5
    eb1e:	mov	r2, r1
    eb20:	add	r1, sp, #4
    eb22:	blx	r6
    eb24:	adds	r3, r0, #1
    eb26:	bne.n	eb08 <_wcrtomb_r+0x1c>
    eb28:	movs	r2, #0
    eb2a:	movs	r3, #138	; 0x8a
    eb2c:	str	r2, [r4, #0]
    eb2e:	str	r3, [r5, #0]
    eb30:	add	sp, #16
    eb32:	pop	{r4, r5, r6, pc}
    eb34:	.word	0x20001bf4

0000eb38 <_wcsrtombs_r>:
    eb38:	push	{r4, lr}
    eb3a:	sub	sp, #8
    eb3c:	ldr	r4, [sp, #16]
    eb3e:	strd	r3, r4, [sp]
    eb42:	mov.w	r3, #4294967295
    eb46:	bl	102d8 <_wcsnrtombs_r>
    eb4a:	add	sp, #8
    eb4c:	pop	{r4, pc}
    eb4e:	nop

0000eb50 <fiprintf>:
    eb50:	push	{r1, r2, r3}
    eb52:	push	{r4, lr}
    eb54:	sub	sp, #12
    eb56:	add	r3, sp, #20
    eb58:	ldr	r4, [pc, #24]	; (eb74 <fiprintf+0x24>)
    eb5a:	ldr.w	r2, [r3], #4
    eb5e:	str	r3, [sp, #4]
    eb60:	mov	r1, r0
    eb62:	ldr	r0, [r4, #0]
    eb64:	bl	ecf0 <_vfiprintf_r>
    eb68:	add	sp, #12
    eb6a:	ldmia.w	sp!, {r4, lr}
    eb6e:	add	sp, #12
    eb70:	bx	lr
    eb72:	nop
    eb74:	.word	0x2000217c

0000eb78 <__ssprint_r>:
    eb78:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    eb7c:	ldr	r3, [r2, #8]
    eb7e:	ldr	r7, [r2, #0]
    eb80:	sub	sp, #12
    eb82:	mov	sl, r2
    eb84:	cmp	r3, #0
    eb86:	beq.n	ec6a <__ssprint_r+0xf2>
    eb88:	mov	r9, r0
    eb8a:	ldr	r2, [r1, #8]
    eb8c:	ldr	r0, [r1, #0]
    eb8e:	mov	r4, r1
    eb90:	adds	r7, #8
    eb92:	b.n	ec1c <__ssprint_r+0xa4>
    eb94:	ldrh	r3, [r4, #12]
    eb96:	tst.w	r3, #1152	; 0x480
    eb9a:	beq.n	ebfa <__ssprint_r+0x82>
    eb9c:	ldrd	r1, r6, [r4, #16]
    eba0:	sub.w	r8, r0, r1
    eba4:	add.w	r6, r6, r6, lsl #1
    eba8:	add.w	r6, r6, r6, lsr #31
    ebac:	add.w	r0, r8, #1
    ebb0:	asrs	r6, r6, #1
    ebb2:	add	r0, r5
    ebb4:	cmp	r0, r6
    ebb6:	mov	r2, r6
    ebb8:	itt	hi
    ebba:	movhi	r6, r0
    ebbc:	movhi	r2, r6
    ebbe:	lsls	r3, r3, #21
    ebc0:	bpl.n	ec32 <__ssprint_r+0xba>
    ebc2:	mov	r1, r2
    ebc4:	mov	r0, r9
    ebc6:	bl	a1a0 <_malloc_r>
    ebca:	str	r0, [sp, #4]
    ebcc:	cmp	r0, #0
    ebce:	beq.n	ec46 <__ssprint_r+0xce>
    ebd0:	mov	r2, r8
    ebd2:	ldr	r1, [r4, #16]
    ebd4:	bl	756c <memcpy>
    ebd8:	ldrh	r2, [r4, #12]
    ebda:	ldr	r3, [sp, #4]
    ebdc:	bic.w	r2, r2, #1152	; 0x480
    ebe0:	orr.w	r2, r2, #128	; 0x80
    ebe4:	strh	r2, [r4, #12]
    ebe6:	sub.w	r2, r6, r8
    ebea:	add.w	r0, r3, r8
    ebee:	str	r6, [r4, #20]
    ebf0:	str	r2, [r4, #8]
    ebf2:	str	r3, [r4, #16]
    ebf4:	str	r0, [r4, #0]
    ebf6:	mov	r6, r5
    ebf8:	mov	r8, r5
    ebfa:	mov	r2, r8
    ebfc:	mov	r1, fp
    ebfe:	bl	ae7c <memmove>
    ec02:	ldr.w	r3, [sl, #8]
    ec06:	ldr	r2, [r4, #8]
    ec08:	ldr	r0, [r4, #0]
    ec0a:	subs	r2, r2, r6
    ec0c:	add	r0, r8
    ec0e:	subs	r3, r3, r5
    ec10:	str	r2, [r4, #8]
    ec12:	str	r0, [r4, #0]
    ec14:	str.w	r3, [sl, #8]
    ec18:	cbz	r3, ec6a <__ssprint_r+0xf2>
    ec1a:	adds	r7, #8
    ec1c:	ldrd	fp, r5, [r7, #-8]
    ec20:	cmp	r5, #0
    ec22:	beq.n	ec1a <__ssprint_r+0xa2>
    ec24:	cmp	r2, r5
    ec26:	mov	r6, r2
    ec28:	mov	r8, r2
    ec2a:	bls.n	eb94 <__ssprint_r+0x1c>
    ec2c:	mov	r6, r5
    ec2e:	mov	r8, r5
    ec30:	b.n	ebfa <__ssprint_r+0x82>
    ec32:	mov	r0, r9
    ec34:	bl	a718 <_realloc_r>
    ec38:	mov	r3, r0
    ec3a:	cmp	r0, #0
    ec3c:	bne.n	ebe6 <__ssprint_r+0x6e>
    ec3e:	ldr	r1, [r4, #16]
    ec40:	mov	r0, r9
    ec42:	bl	b444 <_free_r>
    ec46:	ldrh	r3, [r4, #12]
    ec48:	movs	r2, #12
    ec4a:	orr.w	r3, r3, #64	; 0x40
    ec4e:	str.w	r2, [r9]
    ec52:	mov.w	r0, #4294967295
    ec56:	strh	r3, [r4, #12]
    ec58:	movs	r2, #0
    ec5a:	movs	r3, #0
    ec5c:	str.w	r2, [sl, #8]
    ec60:	str.w	r3, [sl, #4]
    ec64:	add	sp, #12
    ec66:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ec6a:	movs	r0, #0
    ec6c:	movs	r3, #0
    ec6e:	str.w	r3, [sl, #4]
    ec72:	add	sp, #12
    ec74:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000ec78 <__sprint_r.part.0>:
    ec78:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ec7c:	ldr	r3, [r1, #100]	; 0x64
    ec7e:	lsls	r4, r3, #18
    ec80:	mov	r8, r2
    ec82:	bpl.n	ece0 <__sprint_r.part.0+0x68>
    ec84:	ldr	r3, [r2, #8]
    ec86:	ldr	r2, [r2, #0]
    ec88:	cbz	r3, ecdc <__sprint_r.part.0+0x64>
    ec8a:	mov	fp, r1
    ec8c:	mov	r6, r0
    ec8e:	add.w	r9, r2, #8
    ec92:	ldrd	r5, sl, [r9, #-8]
    ec96:	movs.w	r7, sl, lsr #2
    ec9a:	beq.n	ecc8 <__sprint_r.part.0+0x50>
    ec9c:	subs	r5, #4
    ec9e:	movs	r4, #0
    eca0:	b.n	eca6 <__sprint_r.part.0+0x2e>
    eca2:	cmp	r7, r4
    eca4:	beq.n	ecc4 <__sprint_r.part.0+0x4c>
    eca6:	ldr.w	r1, [r5, #4]!
    ecaa:	mov	r2, fp
    ecac:	mov	r0, r6
    ecae:	bl	10168 <_fputwc_r>
    ecb2:	adds	r3, r0, #1
    ecb4:	add.w	r4, r4, #1
    ecb8:	bne.n	eca2 <__sprint_r.part.0+0x2a>
    ecba:	movs	r3, #0
    ecbc:	strd	r3, r3, [r8, #4]
    ecc0:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ecc4:	ldr.w	r3, [r8, #8]
    ecc8:	bic.w	sl, sl, #3
    eccc:	sub.w	r3, r3, sl
    ecd0:	str.w	r3, [r8, #8]
    ecd4:	add.w	r9, r9, #8
    ecd8:	cmp	r3, #0
    ecda:	bne.n	ec92 <__sprint_r.part.0+0x1a>
    ecdc:	movs	r0, #0
    ecde:	b.n	ecba <__sprint_r.part.0+0x42>
    ece0:	bl	fcfc <__sfvwrite_r>
    ece4:	movs	r3, #0
    ece6:	strd	r3, r3, [r8, #4]
    ecea:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ecee:	nop

0000ecf0 <_vfiprintf_r>:
    ecf0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ecf4:	vpush	{d8}
    ecf8:	sub	sp, #276	; 0x114
    ecfa:	add.w	sl, sp, #80	; 0x50
    ecfe:	mov	fp, r0
    ed00:	vmov	s16, r1
    ed04:	mov	r6, r2
    ed06:	movs	r1, #0
    ed08:	movs	r2, #8
    ed0a:	mov	r0, sl
    ed0c:	mov	r4, r3
    ed0e:	str	r3, [sp, #28]
    ed10:	bl	7528 <memset>
    ed14:	cmp.w	fp, #0
    ed18:	beq.n	ed24 <_vfiprintf_r+0x34>
    ed1a:	ldr.w	r3, [fp, #52]	; 0x34
    ed1e:	cmp	r3, #0
    ed20:	beq.w	fa64 <_vfiprintf_r+0xd74>
    ed24:	vmov	r2, s16
    ed28:	ldr	r3, [r2, #100]	; 0x64
    ed2a:	lsls	r3, r3, #31
    ed2c:	bpl.w	f756 <_vfiprintf_r+0xa66>
    ed30:	ldrsh.w	r1, [r2, #12]
    ed34:	uxth	r2, r1
    ed36:	lsls	r5, r2, #18
    ed38:	bmi.n	ed52 <_vfiprintf_r+0x62>
    ed3a:	vmov	r3, s16
    ed3e:	orr.w	r1, r1, #8192	; 0x2000
    ed42:	strh	r1, [r3, #12]
    ed44:	ldr	r3, [r3, #100]	; 0x64
    ed46:	uxth	r2, r1
    ed48:	vmov	r1, s16
    ed4c:	bic.w	r3, r3, #8192	; 0x2000
    ed50:	str	r3, [r1, #100]	; 0x64
    ed52:	lsls	r0, r2, #28
    ed54:	bpl.w	ef62 <_vfiprintf_r+0x272>
    ed58:	vmov	r3, s16
    ed5c:	ldr	r3, [r3, #16]
    ed5e:	cmp	r3, #0
    ed60:	beq.w	ef62 <_vfiprintf_r+0x272>
    ed64:	and.w	r3, r2, #26
    ed68:	cmp	r3, #10
    ed6a:	beq.w	ef82 <_vfiprintf_r+0x292>
    ed6e:	movs	r3, #0
    ed70:	strd	r3, r3, [sp, #100]	; 0x64
    ed74:	strd	r3, r3, [sp, #52]	; 0x34
    ed78:	add	r2, sp, #108	; 0x6c
    ed7a:	str	r3, [sp, #48]	; 0x30
    ed7c:	str	r2, [sp, #96]	; 0x60
    ed7e:	mov	r9, r2
    ed80:	str	r3, [sp, #44]	; 0x2c
    ed82:	str	r3, [sp, #20]
    ed84:	mov	r8, r6
    ed86:	mov	r4, r8
    ed88:	ldr	r3, [pc, #672]	; (f02c <_vfiprintf_r+0x33c>)
    ed8a:	ldr.w	r5, [r3, #228]	; 0xe4
    ed8e:	bl	b064 <__locale_mb_cur_max>
    ed92:	mov	r2, r4
    ed94:	mov	r3, r0
    ed96:	add	r1, sp, #72	; 0x48
    ed98:	str.w	sl, [sp]
    ed9c:	mov	r0, fp
    ed9e:	blx	r5
    eda0:	cmp	r0, #0
    eda2:	beq.w	f030 <_vfiprintf_r+0x340>
    eda6:	blt.w	f01c <_vfiprintf_r+0x32c>
    edaa:	ldr	r2, [sp, #72]	; 0x48
    edac:	cmp	r2, #37	; 0x25
    edae:	mov	r3, r0
    edb0:	beq.n	edb6 <_vfiprintf_r+0xc6>
    edb2:	add	r4, r3
    edb4:	b.n	ed88 <_vfiprintf_r+0x98>
    edb6:	subs.w	r6, r4, r8
    edba:	mov	r5, r0
    edbc:	bne.w	f038 <_vfiprintf_r+0x348>
    edc0:	movs	r3, #0
    edc2:	ldrb	r1, [r4, #1]
    edc4:	strb.w	r3, [sp, #67]	; 0x43
    edc8:	add.w	r8, r4, #1
    edcc:	str	r3, [sp, #24]
    edce:	mov.w	r7, #4294967295
    edd2:	mov	r6, r3
    edd4:	movs	r4, #43	; 0x2b
    edd6:	add.w	r8, r8, #1
    edda:	sub.w	r3, r1, #32
    edde:	cmp	r3, #90	; 0x5a
    ede0:	bhi.w	f0d4 <_vfiprintf_r+0x3e4>
    ede4:	tbh	[pc, r3, lsl #1]
    ede8:	.word	0x017602b5
    edec:	.word	0x02b00176
    edf0:	.word	0x01760176
    edf4:	.word	0x006a0176
    edf8:	.word	0x01760176
    edfc:	.word	0x028d027d
    ee00:	.word	0x02880176
    ee04:	.word	0x01760297
    ee08:	.word	0x005b0292
    ee0c:	.word	0x005b005b
    ee10:	.word	0x005b005b
    ee14:	.word	0x005b005b
    ee18:	.word	0x005b005b
    ee1c:	.word	0x01760176
    ee20:	.word	0x01760176
    ee24:	.word	0x01760176
    ee28:	.word	0x01760176
    ee2c:	.word	0x025c0176
    ee30:	.word	0x01760084
    ee34:	.word	0x01760176
    ee38:	.word	0x01760176
    ee3c:	.word	0x01760176
    ee40:	.word	0x01760176
    ee44:	.word	0x00e80176
    ee48:	.word	0x01760176
    ee4c:	.word	0x02330176
    ee50:	.word	0x02da0176
    ee54:	.word	0x01760176
    ee58:	.word	0x0176058b
    ee5c:	.word	0x01760176
    ee60:	.word	0x01760176
    ee64:	.word	0x01760176
    ee68:	.word	0x01760176
    ee6c:	.word	0x025c0176
    ee70:	.word	0x01760086
    ee74:	.word	0x01760176
    ee78:	.word	0x008602cd
    ee7c:	.word	0x0176007f
    ee80:	.word	0x017602c0
    ee84:	.word	0x00ea02fd
    ee88:	.word	0x007f02ed
    ee8c:	.word	0x02330176
    ee90:	.word	0x0569007c
    ee94:	.word	0x01760176
    ee98:	.word	0x0176056b
    ee9c:	.short	0x007c
    ee9e:	sub.w	r3, r1, #48	; 0x30
    eea2:	movs	r2, #0
    eea4:	ldrb.w	r1, [r8], #1
    eea8:	add.w	r2, r2, r2, lsl #2
    eeac:	add.w	r2, r3, r2, lsl #1
    eeb0:	sub.w	r3, r1, #48	; 0x30
    eeb4:	cmp	r3, #9
    eeb6:	bls.n	eea4 <_vfiprintf_r+0x1b4>
    eeb8:	str	r2, [sp, #24]
    eeba:	b.n	edda <_vfiprintf_r+0xea>
    eebc:	mov	r0, fp
    eebe:	bl	dba0 <_localeconv_r>
    eec2:	ldr	r3, [r0, #4]
    eec4:	str	r3, [sp, #52]	; 0x34
    eec6:	mov	r0, r3
    eec8:	bl	b240 <strlen>
    eecc:	str	r0, [sp, #56]	; 0x38
    eece:	mov	r5, r0
    eed0:	mov	r0, fp
    eed2:	bl	dba0 <_localeconv_r>
    eed6:	ldr	r3, [r0, #8]
    eed8:	str	r3, [sp, #44]	; 0x2c
    eeda:	cmp	r5, #0
    eedc:	bne.w	f88c <_vfiprintf_r+0xb9c>
    eee0:	ldrb.w	r1, [r8]
    eee4:	b.n	edd6 <_vfiprintf_r+0xe6>
    eee6:	ldrb.w	r1, [r8]
    eeea:	orr.w	r6, r6, #32
    eeee:	b.n	edd6 <_vfiprintf_r+0xe6>
    eef0:	orr.w	r6, r6, #16
    eef4:	lsls	r4, r6, #26
    eef6:	bpl.w	f216 <_vfiprintf_r+0x526>
    eefa:	ldr	r3, [sp, #28]
    eefc:	adds	r3, #7
    eefe:	bic.w	r3, r3, #7
    ef02:	mov	r2, r3
    ef04:	ldr	r1, [r3, #4]
    ef06:	ldr.w	r3, [r2], #8
    ef0a:	str	r2, [sp, #28]
    ef0c:	mov	r2, r1
    ef0e:	cmp	r1, #0
    ef10:	blt.w	f7f4 <_vfiprintf_r+0xb04>
    ef14:	adds	r1, r7, #1
    ef16:	beq.w	fa5e <_vfiprintf_r+0xd6e>
    ef1a:	bic.w	r1, r6, #128	; 0x80
    ef1e:	str	r1, [sp, #12]
    ef20:	orrs.w	r1, r3, r2
    ef24:	beq.w	f7a6 <_vfiprintf_r+0xab6>
    ef28:	cmp	r3, #10
    ef2a:	sbcs.w	r1, r2, #0
    ef2e:	bcs.w	f9b4 <_vfiprintf_r+0xcc4>
    ef32:	adds	r3, #48	; 0x30
    ef34:	strb.w	r3, [sp, #271]	; 0x10f
    ef38:	ldr	r6, [sp, #12]
    ef3a:	movs	r3, #1
    ef3c:	str	r3, [sp, #16]
    ef3e:	addw	r4, sp, #271	; 0x10f
    ef42:	ldr	r3, [sp, #16]
    ef44:	cmp	r3, r7
    ef46:	it	lt
    ef48:	movlt	r3, r7
    ef4a:	str	r3, [sp, #12]
    ef4c:	movs	r3, #0
    ef4e:	str	r3, [sp, #32]
    ef50:	ldrb.w	r3, [sp, #67]	; 0x43
    ef54:	cmp	r3, #0
    ef56:	beq.w	f0f0 <_vfiprintf_r+0x400>
    ef5a:	ldr	r3, [sp, #12]
    ef5c:	adds	r3, #1
    ef5e:	str	r3, [sp, #12]
    ef60:	b.n	f0f0 <_vfiprintf_r+0x400>
    ef62:	vmov	r1, s16
    ef66:	mov	r0, fp
    ef68:	vmov	r5, s16
    ef6c:	bl	fff0 <__swsetup_r>
    ef70:	cmp	r0, #0
    ef72:	bne.w	fc1a <_vfiprintf_r+0xf2a>
    ef76:	ldrh	r2, [r5, #12]
    ef78:	and.w	r3, r2, #26
    ef7c:	cmp	r3, #10
    ef7e:	bne.w	ed6e <_vfiprintf_r+0x7e>
    ef82:	vmov	r1, s16
    ef86:	ldrsh.w	r3, [r1, #14]
    ef8a:	cmp	r3, #0
    ef8c:	blt.w	ed6e <_vfiprintf_r+0x7e>
    ef90:	ldr	r3, [r1, #100]	; 0x64
    ef92:	lsls	r3, r3, #31
    ef94:	bmi.n	ef9c <_vfiprintf_r+0x2ac>
    ef96:	lsls	r7, r2, #22
    ef98:	bpl.w	fbc0 <_vfiprintf_r+0xed0>
    ef9c:	vmov	r1, s16
    efa0:	mov	r3, r4
    efa2:	mov	r2, r6
    efa4:	mov	r0, fp
    efa6:	bl	fc7c <__sbprintf>
    efaa:	str	r0, [sp, #20]
    efac:	ldr	r0, [sp, #20]
    efae:	add	sp, #276	; 0x114
    efb0:	vpop	{d8}
    efb4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    efb8:	orr.w	r6, r6, #16
    efbc:	ands.w	r2, r6, #32
    efc0:	beq.w	f230 <_vfiprintf_r+0x540>
    efc4:	ldr	r3, [sp, #28]
    efc6:	adds	r3, #7
    efc8:	bic.w	r3, r3, #7
    efcc:	mov	r1, r3
    efce:	ldr	r2, [r3, #4]
    efd0:	ldr.w	r3, [r1], #8
    efd4:	str	r1, [sp, #28]
    efd6:	bic.w	r1, r6, #1024	; 0x400
    efda:	str	r1, [sp, #12]
    efdc:	movs	r1, #0
    efde:	movs	r0, #0
    efe0:	strb.w	r0, [sp, #67]	; 0x43
    efe4:	adds	r0, r7, #1
    efe6:	beq.w	f40a <_vfiprintf_r+0x71a>
    efea:	ldr	r0, [sp, #12]
    efec:	bic.w	r6, r0, #128	; 0x80
    eff0:	orrs.w	r0, r3, r2
    eff4:	bne.w	f408 <_vfiprintf_r+0x718>
    eff8:	cmp	r7, #0
    effa:	bne.w	fa6e <_vfiprintf_r+0xd7e>
    effe:	cmp	r1, #0
    f000:	bne.w	f7ae <_vfiprintf_r+0xabe>
    f004:	ldr	r3, [sp, #12]
    f006:	ands.w	r3, r3, #1
    f00a:	str	r3, [sp, #16]
    f00c:	beq.w	f832 <_vfiprintf_r+0xb42>
    f010:	movs	r3, #48	; 0x30
    f012:	strb.w	r3, [sp, #271]	; 0x10f
    f016:	addw	r4, sp, #271	; 0x10f
    f01a:	b.n	ef42 <_vfiprintf_r+0x252>
    f01c:	movs	r2, #8
    f01e:	movs	r1, #0
    f020:	mov	r0, sl
    f022:	bl	7528 <memset>
    f026:	movs	r3, #1
    f028:	add	r4, r3
    f02a:	b.n	ed88 <_vfiprintf_r+0x98>
    f02c:	.word	0x20001bf4
    f030:	subs.w	r6, r4, r8
    f034:	mov	r5, r0
    f036:	beq.n	f070 <_vfiprintf_r+0x380>
    f038:	ldr	r3, [sp, #100]	; 0x64
    f03a:	ldr	r2, [sp, #104]	; 0x68
    f03c:	adds	r3, #1
    f03e:	add	r2, r6
    f040:	cmp	r3, #7
    f042:	strd	r8, r6, [r9]
    f046:	str	r2, [sp, #104]	; 0x68
    f048:	str	r3, [sp, #100]	; 0x64
    f04a:	ble.n	f086 <_vfiprintf_r+0x396>
    f04c:	cmp	r2, #0
    f04e:	beq.w	f79e <_vfiprintf_r+0xaae>
    f052:	vmov	r1, s16
    f056:	add	r2, sp, #96	; 0x60
    f058:	mov	r0, fp
    f05a:	bl	ec78 <__sprint_r.part.0>
    f05e:	cbnz	r0, f0aa <_vfiprintf_r+0x3ba>
    f060:	add.w	r9, sp, #108	; 0x6c
    f064:	ldr	r3, [sp, #20]
    f066:	add	r3, r6
    f068:	str	r3, [sp, #20]
    f06a:	cmp	r5, #0
    f06c:	bne.w	edc0 <_vfiprintf_r+0xd0>
    f070:	ldr	r3, [sp, #104]	; 0x68
    f072:	cmp	r3, #0
    f074:	bne.w	fbfa <_vfiprintf_r+0xf0a>
    f078:	vmov	r3, s16
    f07c:	movs	r2, #0
    f07e:	ldrsh.w	r3, [r3, #12]
    f082:	str	r2, [sp, #100]	; 0x64
    f084:	b.n	f0b2 <_vfiprintf_r+0x3c2>
    f086:	add.w	r9, r9, #8
    f08a:	b.n	f064 <_vfiprintf_r+0x374>
    f08c:	vmov	r1, s16
    f090:	add	r2, sp, #96	; 0x60
    f092:	mov	r0, fp
    f094:	bl	ec78 <__sprint_r.part.0>
    f098:	cmp	r0, #0
    f09a:	beq.w	f1ea <_vfiprintf_r+0x4fa>
    f09e:	ldr	r3, [sp, #32]
    f0a0:	cbz	r3, f0aa <_vfiprintf_r+0x3ba>
    f0a2:	ldr	r1, [sp, #32]
    f0a4:	mov	r0, fp
    f0a6:	bl	b444 <_free_r>
    f0aa:	vmov	r3, s16
    f0ae:	ldrsh.w	r3, [r3, #12]
    f0b2:	vmov	r2, s16
    f0b6:	ldr	r2, [r2, #100]	; 0x64
    f0b8:	tst.w	r2, #1
    f0bc:	uxth	r2, r3
    f0be:	beq.w	f202 <_vfiprintf_r+0x512>
    f0c2:	lsls	r0, r2, #25
    f0c4:	bmi.w	fc2c <_vfiprintf_r+0xf3c>
    f0c8:	ldr	r0, [sp, #20]
    f0ca:	add	sp, #276	; 0x114
    f0cc:	vpop	{d8}
    f0d0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f0d4:	cmp	r1, #0
    f0d6:	beq.n	f070 <_vfiprintf_r+0x380>
    f0d8:	movs	r3, #0
    f0da:	strb.w	r3, [sp, #67]	; 0x43
    f0de:	movs	r3, #1
    f0e0:	strd	r3, r3, [sp, #12]
    f0e4:	strb.w	r1, [sp, #172]	; 0xac
    f0e8:	add	r4, sp, #172	; 0xac
    f0ea:	movs	r3, #0
    f0ec:	str	r3, [sp, #32]
    f0ee:	mov	r7, r3
    f0f0:	ands.w	r3, r6, #2
    f0f4:	str	r3, [sp, #36]	; 0x24
    f0f6:	beq.n	f0fe <_vfiprintf_r+0x40e>
    f0f8:	ldr	r3, [sp, #12]
    f0fa:	adds	r3, #2
    f0fc:	str	r3, [sp, #12]
    f0fe:	ands.w	r3, r6, #132	; 0x84
    f102:	str	r3, [sp, #40]	; 0x28
    f104:	bne.n	f112 <_vfiprintf_r+0x422>
    f106:	ldr	r3, [sp, #24]
    f108:	ldr	r2, [sp, #12]
    f10a:	subs	r5, r3, r2
    f10c:	cmp	r5, #0
    f10e:	bgt.w	f608 <_vfiprintf_r+0x918>
    f112:	ldrd	r0, r3, [sp, #100]	; 0x64
    f116:	adds	r1, r0, #1
    f118:	ldrb.w	r2, [sp, #67]	; 0x43
    f11c:	cbz	r2, f140 <_vfiprintf_r+0x450>
    f11e:	movs	r2, #1
    f120:	adds	r3, #1
    f122:	str.w	r2, [r9, #4]
    f126:	cmp	r1, #7
    f128:	add.w	r2, sp, #67	; 0x43
    f12c:	strd	r1, r3, [sp, #100]	; 0x64
    f130:	str.w	r2, [r9]
    f134:	bgt.w	f5cc <_vfiprintf_r+0x8dc>
    f138:	mov	r0, r1
    f13a:	add.w	r9, r9, #8
    f13e:	adds	r1, #1
    f140:	ldr	r2, [sp, #36]	; 0x24
    f142:	cbz	r2, f17e <_vfiprintf_r+0x48e>
    f144:	add	r2, sp, #68	; 0x44
    f146:	adds	r3, #2
    f148:	str.w	r2, [r9]
    f14c:	cmp	r1, #7
    f14e:	mov.w	r2, #2
    f152:	strd	r1, r3, [sp, #100]	; 0x64
    f156:	str.w	r2, [r9, #4]
    f15a:	ble.w	f5fe <_vfiprintf_r+0x90e>
    f15e:	cmp	r3, #0
    f160:	beq.w	f7ea <_vfiprintf_r+0xafa>
    f164:	vmov	r1, s16
    f168:	add	r2, sp, #96	; 0x60
    f16a:	mov	r0, fp
    f16c:	bl	ec78 <__sprint_r.part.0>
    f170:	cmp	r0, #0
    f172:	bne.n	f09e <_vfiprintf_r+0x3ae>
    f174:	ldrd	r0, r3, [sp, #100]	; 0x64
    f178:	add.w	r9, sp, #108	; 0x6c
    f17c:	adds	r1, r0, #1
    f17e:	ldr	r2, [sp, #40]	; 0x28
    f180:	cmp	r2, #128	; 0x80
    f182:	beq.w	f48e <_vfiprintf_r+0x79e>
    f186:	ldr	r2, [sp, #16]
    f188:	subs	r5, r7, r2
    f18a:	cmp	r5, #0
    f18c:	bgt.w	f53e <_vfiprintf_r+0x84e>
    f190:	ldr	r2, [sp, #16]
    f192:	str.w	r4, [r9]
    f196:	add	r3, r2
    f198:	cmp	r1, #7
    f19a:	strd	r1, r3, [sp, #100]	; 0x64
    f19e:	str.w	r2, [r9, #4]
    f1a2:	ble.w	f482 <_vfiprintf_r+0x792>
    f1a6:	cmp	r3, #0
    f1a8:	beq.w	f696 <_vfiprintf_r+0x9a6>
    f1ac:	vmov	r1, s16
    f1b0:	add	r2, sp, #96	; 0x60
    f1b2:	mov	r0, fp
    f1b4:	bl	ec78 <__sprint_r.part.0>
    f1b8:	cmp	r0, #0
    f1ba:	bne.w	f09e <_vfiprintf_r+0x3ae>
    f1be:	ldr	r3, [sp, #104]	; 0x68
    f1c0:	add.w	r9, sp, #108	; 0x6c
    f1c4:	lsls	r5, r6, #29
    f1c6:	bpl.n	f1d4 <_vfiprintf_r+0x4e4>
    f1c8:	ldr	r2, [sp, #24]
    f1ca:	ldr	r1, [sp, #12]
    f1cc:	subs	r4, r2, r1
    f1ce:	cmp	r4, #0
    f1d0:	bgt.w	f6aa <_vfiprintf_r+0x9ba>
    f1d4:	ldrd	r2, r1, [sp, #20]
    f1d8:	ldr	r0, [sp, #12]
    f1da:	cmp	r1, r0
    f1dc:	ite	ge
    f1de:	addge	r2, r2, r1
    f1e0:	addlt	r2, r2, r0
    f1e2:	str	r2, [sp, #20]
    f1e4:	cmp	r3, #0
    f1e6:	bne.w	f08c <_vfiprintf_r+0x39c>
    f1ea:	ldr	r1, [sp, #32]
    f1ec:	movs	r3, #0
    f1ee:	str	r3, [sp, #100]	; 0x64
    f1f0:	cmp	r1, #0
    f1f2:	beq.w	f488 <_vfiprintf_r+0x798>
    f1f6:	mov	r0, fp
    f1f8:	bl	b444 <_free_r>
    f1fc:	add.w	r9, sp, #108	; 0x6c
    f200:	b.n	ed86 <_vfiprintf_r+0x96>
    f202:	lsls	r4, r3, #22
    f204:	bmi.w	f0c2 <_vfiprintf_r+0x3d2>
    f208:	vmov	r4, s16
    f20c:	ldr	r0, [r4, #88]	; 0x58
    f20e:	bl	b19c <__retarget_lock_release_recursive>
    f212:	ldrh	r2, [r4, #12]
    f214:	b.n	f0c2 <_vfiprintf_r+0x3d2>
    f216:	lsls	r0, r6, #27
    f218:	ldr	r2, [sp, #28]
    f21a:	bmi.w	f85c <_vfiprintf_r+0xb6c>
    f21e:	lsls	r1, r6, #25
    f220:	bpl.w	f856 <_vfiprintf_r+0xb66>
    f224:	ldrsh.w	r3, [r2], #4
    f228:	str	r2, [sp, #28]
    f22a:	asrs	r2, r3, #31
    f22c:	mov	r1, r2
    f22e:	b.n	ef0e <_vfiprintf_r+0x21e>
    f230:	ands.w	r3, r6, #16
    f234:	ldr	r1, [sp, #28]
    f236:	bne.w	f84c <_vfiprintf_r+0xb5c>
    f23a:	ands.w	r0, r6, #64	; 0x40
    f23e:	beq.w	f844 <_vfiprintf_r+0xb54>
    f242:	mov	r2, r3
    f244:	ldr.w	r3, [r1], #4
    f248:	str	r1, [sp, #28]
    f24a:	uxth	r3, r3
    f24c:	b.n	efd6 <_vfiprintf_r+0x2e6>
    f24e:	ldr	r3, [sp, #28]
    f250:	mov	r2, r3
    f252:	movs	r3, #0
    f254:	strb.w	r3, [sp, #67]	; 0x43
    f258:	mov	r3, r2
    f25a:	ldr.w	r4, [r3], #4
    f25e:	str	r3, [sp, #12]
    f260:	cmp	r4, #0
    f262:	beq.w	fa8a <_vfiprintf_r+0xd9a>
    f266:	cmp	r1, #83	; 0x53
    f268:	beq.w	f936 <_vfiprintf_r+0xc46>
    f26c:	ands.w	r5, r6, #16
    f270:	bne.w	f936 <_vfiprintf_r+0xc46>
    f274:	adds	r3, r7, #1
    f276:	beq.w	fbe0 <_vfiprintf_r+0xef0>
    f27a:	mov	r2, r7
    f27c:	mov	r1, r5
    f27e:	mov	r0, r4
    f280:	bl	b1a0 <memchr>
    f284:	str	r0, [sp, #32]
    f286:	cmp	r0, #0
    f288:	beq.w	fbca <_vfiprintf_r+0xeda>
    f28c:	subs	r3, r0, r4
    f28e:	ldr	r2, [sp, #12]
    f290:	str	r3, [sp, #16]
    f292:	bic.w	r3, r3, r3, asr #31
    f296:	mov	r7, r5
    f298:	str	r2, [sp, #28]
    f29a:	str	r3, [sp, #12]
    f29c:	str	r5, [sp, #32]
    f29e:	b.n	ef50 <_vfiprintf_r+0x260>
    f2a0:	cmp	r1, #67	; 0x43
    f2a2:	beq.n	f2aa <_vfiprintf_r+0x5ba>
    f2a4:	lsls	r5, r6, #27
    f2a6:	bpl.w	f904 <_vfiprintf_r+0xc14>
    f2aa:	ldr	r5, [sp, #28]
    f2ac:	movs	r2, #8
    f2ae:	movs	r1, #0
    f2b0:	add	r0, sp, #88	; 0x58
    f2b2:	add	r4, sp, #172	; 0xac
    f2b4:	bl	7528 <memset>
    f2b8:	add	r3, sp, #88	; 0x58
    f2ba:	ldr.w	r2, [r5], #4
    f2be:	mov	r1, r4
    f2c0:	mov	r0, fp
    f2c2:	bl	eaec <_wcrtomb_r>
    f2c6:	mov	r3, r0
    f2c8:	adds	r3, #1
    f2ca:	str	r0, [sp, #16]
    f2cc:	beq.w	fc36 <_vfiprintf_r+0xf46>
    f2d0:	ldr	r3, [sp, #16]
    f2d2:	str	r5, [sp, #28]
    f2d4:	bic.w	r3, r3, r3, asr #31
    f2d8:	str	r3, [sp, #12]
    f2da:	movs	r3, #0
    f2dc:	strb.w	r3, [sp, #67]	; 0x43
    f2e0:	b.n	f0ea <_vfiprintf_r+0x3fa>
    f2e2:	ldr	r3, [sp, #28]
    f2e4:	ldr.w	r2, [r3], #4
    f2e8:	str	r2, [sp, #24]
    f2ea:	cmp	r2, #0
    f2ec:	bge.w	f828 <_vfiprintf_r+0xb38>
    f2f0:	ldr	r2, [sp, #24]
    f2f2:	negs	r2, r2
    f2f4:	strd	r2, r3, [sp, #24]
    f2f8:	ldrb.w	r1, [r8]
    f2fc:	orr.w	r6, r6, #4
    f300:	b.n	edd6 <_vfiprintf_r+0xe6>
    f302:	ldrb.w	r1, [r8]
    f306:	strb.w	r4, [sp, #67]	; 0x43
    f30a:	b.n	edd6 <_vfiprintf_r+0xe6>
    f30c:	ldrb.w	r1, [r8]
    f310:	orr.w	r6, r6, #128	; 0x80
    f314:	b.n	edd6 <_vfiprintf_r+0xe6>
    f316:	mov	r2, r8
    f318:	ldrb.w	r1, [r2], #1
    f31c:	cmp	r1, #42	; 0x2a
    f31e:	beq.w	fc4e <_vfiprintf_r+0xf5e>
    f322:	sub.w	r3, r1, #48	; 0x30
    f326:	cmp	r3, #9
    f328:	mov	r8, r2
    f32a:	mov.w	r7, #0
    f32e:	bhi.w	edda <_vfiprintf_r+0xea>
    f332:	ldrb.w	r1, [r8], #1
    f336:	add.w	r7, r7, r7, lsl #2
    f33a:	add.w	r7, r3, r7, lsl #1
    f33e:	sub.w	r3, r1, #48	; 0x30
    f342:	cmp	r3, #9
    f344:	bls.n	f332 <_vfiprintf_r+0x642>
    f346:	b.n	edda <_vfiprintf_r+0xea>
    f348:	ldrb.w	r1, [r8]
    f34c:	orr.w	r6, r6, #1
    f350:	b.n	edd6 <_vfiprintf_r+0xe6>
    f352:	ldrb.w	r3, [sp, #67]	; 0x43
    f356:	cmp	r3, #0
    f358:	bne.w	eee0 <_vfiprintf_r+0x1f0>
    f35c:	movs	r3, #32
    f35e:	ldrb.w	r1, [r8]
    f362:	strb.w	r3, [sp, #67]	; 0x43
    f366:	b.n	edd6 <_vfiprintf_r+0xe6>
    f368:	ldrb.w	r1, [r8]
    f36c:	cmp	r1, #108	; 0x6c
    f36e:	ittte	eq
    f370:	ldrbeq.w	r1, [r8, #1]
    f374:	orreq.w	r6, r6, #32
    f378:	addeq.w	r8, r8, #1
    f37c:	orrne.w	r6, r6, #16
    f380:	b.n	edd6 <_vfiprintf_r+0xe6>
    f382:	ldrb.w	r1, [r8]
    f386:	cmp	r1, #104	; 0x68
    f388:	ittte	eq
    f38a:	ldrbeq.w	r1, [r8, #1]
    f38e:	orreq.w	r6, r6, #512	; 0x200
    f392:	addeq.w	r8, r8, #1
    f396:	orrne.w	r6, r6, #64	; 0x40
    f39a:	b.n	edd6 <_vfiprintf_r+0xe6>
    f39c:	orr.w	r3, r6, #16
    f3a0:	str	r3, [sp, #12]
    f3a2:	ldr	r3, [sp, #12]
    f3a4:	ands.w	r2, r3, #32
    f3a8:	beq.w	f7b8 <_vfiprintf_r+0xac8>
    f3ac:	ldr	r3, [sp, #28]
    f3ae:	adds	r3, #7
    f3b0:	bic.w	r3, r3, #7
    f3b4:	mov	r1, r3
    f3b6:	ldr	r2, [r3, #4]
    f3b8:	ldr.w	r3, [r1], #8
    f3bc:	str	r1, [sp, #28]
    f3be:	movs	r1, #1
    f3c0:	b.n	efde <_vfiprintf_r+0x2ee>
    f3c2:	ldr	r2, [sp, #28]
    f3c4:	orr.w	r3, r6, #2
    f3c8:	str	r3, [sp, #12]
    f3ca:	ldr.w	r3, [r2], #4
    f3ce:	str	r2, [sp, #28]
    f3d0:	movw	r2, #30768	; 0x7830
    f3d4:	strh.w	r2, [sp, #68]	; 0x44
    f3d8:	ldr	r2, [pc, #736]	; (f6bc <_vfiprintf_r+0x9cc>)
    f3da:	str	r2, [sp, #48]	; 0x30
    f3dc:	movs	r1, #2
    f3de:	movs	r2, #0
    f3e0:	b.n	efde <_vfiprintf_r+0x2ee>
    f3e2:	lsls	r7, r6, #26
    f3e4:	bmi.w	f878 <_vfiprintf_r+0xb88>
    f3e8:	lsls	r5, r6, #27
    f3ea:	bmi.w	fa7a <_vfiprintf_r+0xd8a>
    f3ee:	lsls	r4, r6, #25
    f3f0:	bmi.w	fb9e <_vfiprintf_r+0xeae>
    f3f4:	lsls	r0, r6, #22
    f3f6:	bpl.w	fa7a <_vfiprintf_r+0xd8a>
    f3fa:	ldr	r3, [sp, #28]
    f3fc:	ldr	r1, [sp, #20]
    f3fe:	ldr.w	r2, [r3], #4
    f402:	str	r3, [sp, #28]
    f404:	strb	r1, [r2, #0]
    f406:	b.n	ed86 <_vfiprintf_r+0x96>
    f408:	str	r6, [sp, #12]
    f40a:	cmp	r1, #1
    f40c:	beq.w	ef28 <_vfiprintf_r+0x238>
    f410:	cmp	r1, #2
    f412:	add	r4, sp, #272	; 0x110
    f414:	bne.n	f43a <_vfiprintf_r+0x74a>
    f416:	ldr	r0, [sp, #48]	; 0x30
    f418:	and.w	r1, r3, #15
    f41c:	lsrs	r3, r3, #4
    f41e:	ldrb	r1, [r0, r1]
    f420:	strb.w	r1, [r4, #-1]!
    f424:	orr.w	r3, r3, r2, lsl #28
    f428:	lsrs	r2, r2, #4
    f42a:	orrs.w	r1, r3, r2
    f42e:	bne.n	f418 <_vfiprintf_r+0x728>
    f430:	ldr	r6, [sp, #12]
    f432:	add	r3, sp, #272	; 0x110
    f434:	subs	r3, r3, r4
    f436:	str	r3, [sp, #16]
    f438:	b.n	ef42 <_vfiprintf_r+0x252>
    f43a:	and.w	r1, r3, #7
    f43e:	lsrs	r3, r3, #3
    f440:	orr.w	r3, r3, r2, lsl #29
    f444:	lsrs	r2, r2, #3
    f446:	adds	r1, #48	; 0x30
    f448:	orrs.w	r5, r3, r2
    f44c:	mov	r0, r4
    f44e:	strb.w	r1, [r4, #-1]!
    f452:	bne.n	f43a <_vfiprintf_r+0x74a>
    f454:	ldr	r6, [sp, #12]
    f456:	lsls	r3, r6, #31
    f458:	bpl.n	f432 <_vfiprintf_r+0x742>
    f45a:	cmp	r1, #48	; 0x30
    f45c:	beq.n	f430 <_vfiprintf_r+0x740>
    f45e:	movs	r3, #48	; 0x30
    f460:	subs	r0, #2
    f462:	strb.w	r3, [r4, #-1]
    f466:	add	r3, sp, #272	; 0x110
    f468:	subs	r3, r3, r0
    f46a:	ldr	r6, [sp, #12]
    f46c:	str	r3, [sp, #16]
    f46e:	mov	r4, r0
    f470:	b.n	ef42 <_vfiprintf_r+0x252>
    f472:	ldr	r3, [sp, #16]
    f474:	str	r4, [sp, #108]	; 0x6c
    f476:	movs	r2, #1
    f478:	str	r3, [sp, #112]	; 0x70
    f47a:	str	r3, [sp, #104]	; 0x68
    f47c:	str	r2, [sp, #100]	; 0x64
    f47e:	add.w	r9, sp, #108	; 0x6c
    f482:	add.w	r9, r9, #8
    f486:	b.n	f1c4 <_vfiprintf_r+0x4d4>
    f488:	add.w	r9, sp, #108	; 0x6c
    f48c:	b.n	ed86 <_vfiprintf_r+0x96>
    f48e:	ldr	r2, [sp, #24]
    f490:	ldr	r5, [sp, #12]
    f492:	subs	r5, r2, r5
    f494:	cmp	r5, #0
    f496:	ble.w	f186 <_vfiprintf_r+0x496>
    f49a:	cmp	r5, #16
    f49c:	ble.w	fc16 <_vfiprintf_r+0xf26>
    f4a0:	str	r4, [sp, #36]	; 0x24
    f4a2:	vmov	r4, s16
    f4a6:	b.n	f4b8 <_vfiprintf_r+0x7c8>
    f4a8:	add.w	ip, r0, #2
    f4ac:	add.w	r9, r9, #8
    f4b0:	mov	r0, r2
    f4b2:	subs	r5, #16
    f4b4:	cmp	r5, #16
    f4b6:	ble.n	f4f6 <_vfiprintf_r+0x806>
    f4b8:	ldr	r1, [pc, #516]	; (f6c0 <_vfiprintf_r+0x9d0>)
    f4ba:	str.w	r1, [r9]
    f4be:	adds	r2, r0, #1
    f4c0:	adds	r3, #16
    f4c2:	movs	r1, #16
    f4c4:	cmp	r2, #7
    f4c6:	strd	r2, r3, [sp, #100]	; 0x64
    f4ca:	str.w	r1, [r9, #4]
    f4ce:	ble.n	f4a8 <_vfiprintf_r+0x7b8>
    f4d0:	add	r2, sp, #96	; 0x60
    f4d2:	cmp	r3, #0
    f4d4:	beq.n	f5c0 <_vfiprintf_r+0x8d0>
    f4d6:	mov	r1, r4
    f4d8:	mov	r0, fp
    f4da:	add.w	r9, sp, #108	; 0x6c
    f4de:	bl	ec78 <__sprint_r.part.0>
    f4e2:	cmp	r0, #0
    f4e4:	bne.w	f09e <_vfiprintf_r+0x3ae>
    f4e8:	ldrd	r0, r3, [sp, #100]	; 0x64
    f4ec:	subs	r5, #16
    f4ee:	cmp	r5, #16
    f4f0:	add.w	ip, r0, #1
    f4f4:	bgt.n	f4b8 <_vfiprintf_r+0x7c8>
    f4f6:	ldr	r4, [sp, #36]	; 0x24
    f4f8:	ldr	r2, [pc, #452]	; (f6c0 <_vfiprintf_r+0x9d0>)
    f4fa:	str.w	r5, [r9, #4]
    f4fe:	add	r3, r5
    f500:	cmp.w	ip, #7
    f504:	strd	ip, r3, [sp, #100]	; 0x64
    f508:	str.w	r2, [r9]
    f50c:	ble.w	f838 <_vfiprintf_r+0xb48>
    f510:	cmp	r3, #0
    f512:	beq.w	fb54 <_vfiprintf_r+0xe64>
    f516:	vmov	r1, s16
    f51a:	add	r2, sp, #96	; 0x60
    f51c:	mov	r0, fp
    f51e:	bl	ec78 <__sprint_r.part.0>
    f522:	cmp	r0, #0
    f524:	bne.w	f09e <_vfiprintf_r+0x3ae>
    f528:	ldr	r2, [sp, #16]
    f52a:	ldrd	r0, r3, [sp, #100]	; 0x64
    f52e:	subs	r5, r7, r2
    f530:	cmp	r5, #0
    f532:	add.w	r1, r0, #1
    f536:	add.w	r9, sp, #108	; 0x6c
    f53a:	ble.w	f190 <_vfiprintf_r+0x4a0>
    f53e:	cmp	r5, #16
    f540:	ble.n	f596 <_vfiprintf_r+0x8a6>
    f542:	str	r4, [sp, #36]	; 0x24
    f544:	movs	r7, #16
    f546:	vmov	r4, s16
    f54a:	b.n	f55c <_vfiprintf_r+0x86c>
    f54c:	add.w	ip, r0, #2
    f550:	add.w	r9, r9, #8
    f554:	mov	r0, r2
    f556:	subs	r5, #16
    f558:	cmp	r5, #16
    f55a:	ble.n	f592 <_vfiprintf_r+0x8a2>
    f55c:	adds	r2, r0, #1
    f55e:	ldr	r1, [pc, #352]	; (f6c0 <_vfiprintf_r+0x9d0>)
    f560:	adds	r3, #16
    f562:	cmp	r2, #7
    f564:	strd	r1, r7, [r9]
    f568:	strd	r2, r3, [sp, #100]	; 0x64
    f56c:	ble.n	f54c <_vfiprintf_r+0x85c>
    f56e:	add	r2, sp, #96	; 0x60
    f570:	cbz	r3, f5b4 <_vfiprintf_r+0x8c4>
    f572:	mov	r1, r4
    f574:	mov	r0, fp
    f576:	add.w	r9, sp, #108	; 0x6c
    f57a:	bl	ec78 <__sprint_r.part.0>
    f57e:	cmp	r0, #0
    f580:	bne.w	f09e <_vfiprintf_r+0x3ae>
    f584:	ldrd	r0, r3, [sp, #100]	; 0x64
    f588:	subs	r5, #16
    f58a:	cmp	r5, #16
    f58c:	add.w	ip, r0, #1
    f590:	bgt.n	f55c <_vfiprintf_r+0x86c>
    f592:	ldr	r4, [sp, #36]	; 0x24
    f594:	mov	r1, ip
    f596:	ldr	r2, [pc, #296]	; (f6c0 <_vfiprintf_r+0x9d0>)
    f598:	str.w	r5, [r9, #4]
    f59c:	add	r3, r5
    f59e:	cmp	r1, #7
    f5a0:	strd	r1, r3, [sp, #100]	; 0x64
    f5a4:	str.w	r2, [r9]
    f5a8:	bgt.w	f77a <_vfiprintf_r+0xa8a>
    f5ac:	add.w	r9, r9, #8
    f5b0:	adds	r1, #1
    f5b2:	b.n	f190 <_vfiprintf_r+0x4a0>
    f5b4:	mov.w	ip, #1
    f5b8:	mov	r0, r3
    f5ba:	add.w	r9, sp, #108	; 0x6c
    f5be:	b.n	f556 <_vfiprintf_r+0x866>
    f5c0:	mov.w	ip, #1
    f5c4:	mov	r0, r3
    f5c6:	add.w	r9, sp, #108	; 0x6c
    f5ca:	b.n	f4b2 <_vfiprintf_r+0x7c2>
    f5cc:	cmp	r3, #0
    f5ce:	beq.w	f7da <_vfiprintf_r+0xaea>
    f5d2:	vmov	r1, s16
    f5d6:	add	r2, sp, #96	; 0x60
    f5d8:	mov	r0, fp
    f5da:	bl	ec78 <__sprint_r.part.0>
    f5de:	cmp	r0, #0
    f5e0:	bne.w	f09e <_vfiprintf_r+0x3ae>
    f5e4:	ldrd	r0, r3, [sp, #100]	; 0x64
    f5e8:	add.w	r9, sp, #108	; 0x6c
    f5ec:	adds	r1, r0, #1
    f5ee:	b.n	f140 <_vfiprintf_r+0x450>
    f5f0:	movs	r3, #2
    f5f2:	add	r2, sp, #68	; 0x44
    f5f4:	str	r3, [sp, #112]	; 0x70
    f5f6:	str	r2, [sp, #108]	; 0x6c
    f5f8:	movs	r1, #1
    f5fa:	add.w	r9, sp, #108	; 0x6c
    f5fe:	mov	r0, r1
    f600:	add.w	r9, r9, #8
    f604:	adds	r1, r0, #1
    f606:	b.n	f17e <_vfiprintf_r+0x48e>
    f608:	cmp	r5, #16
    f60a:	ble.w	fbd8 <_vfiprintf_r+0xee8>
    f60e:	ldrd	r1, r3, [sp, #100]	; 0x64
    f612:	str	r4, [sp, #60]	; 0x3c
    f614:	mov	r0, r1
    f616:	vmov	r4, s16
    f61a:	b.n	f62c <_vfiprintf_r+0x93c>
    f61c:	add.w	ip, r0, #2
    f620:	add.w	r9, r9, #8
    f624:	mov	r0, r2
    f626:	subs	r5, #16
    f628:	cmp	r5, #16
    f62a:	ble.n	f668 <_vfiprintf_r+0x978>
    f62c:	ldr	r1, [pc, #148]	; (f6c4 <_vfiprintf_r+0x9d4>)
    f62e:	str.w	r1, [r9]
    f632:	adds	r2, r0, #1
    f634:	adds	r3, #16
    f636:	movs	r1, #16
    f638:	cmp	r2, #7
    f63a:	strd	r2, r3, [sp, #100]	; 0x64
    f63e:	str.w	r1, [r9, #4]
    f642:	ble.n	f61c <_vfiprintf_r+0x92c>
    f644:	add	r2, sp, #96	; 0x60
    f646:	cbz	r3, f68a <_vfiprintf_r+0x99a>
    f648:	mov	r1, r4
    f64a:	mov	r0, fp
    f64c:	add.w	r9, sp, #108	; 0x6c
    f650:	bl	ec78 <__sprint_r.part.0>
    f654:	cmp	r0, #0
    f656:	bne.w	f09e <_vfiprintf_r+0x3ae>
    f65a:	ldrd	r0, r3, [sp, #100]	; 0x64
    f65e:	subs	r5, #16
    f660:	cmp	r5, #16
    f662:	add.w	ip, r0, #1
    f666:	bgt.n	f62c <_vfiprintf_r+0x93c>
    f668:	ldr	r4, [sp, #60]	; 0x3c
    f66a:	mov	r0, ip
    f66c:	ldr	r2, [pc, #84]	; (f6c4 <_vfiprintf_r+0x9d4>)
    f66e:	str.w	r5, [r9, #4]
    f672:	add	r3, r5
    f674:	cmp	r0, #7
    f676:	strd	r0, r3, [sp, #100]	; 0x64
    f67a:	str.w	r2, [r9]
    f67e:	bgt.w	f804 <_vfiprintf_r+0xb14>
    f682:	add.w	r9, r9, #8
    f686:	adds	r1, r0, #1
    f688:	b.n	f118 <_vfiprintf_r+0x428>
    f68a:	mov	r0, r3
    f68c:	mov.w	ip, #1
    f690:	add.w	r9, sp, #108	; 0x6c
    f694:	b.n	f626 <_vfiprintf_r+0x936>
    f696:	lsls	r6, r6, #29
    f698:	str	r3, [sp, #100]	; 0x64
    f69a:	bpl.n	f744 <_vfiprintf_r+0xa54>
    f69c:	ldr	r2, [sp, #24]
    f69e:	ldr	r1, [sp, #12]
    f6a0:	subs	r4, r2, r1
    f6a2:	cmp	r4, #0
    f6a4:	ble.n	f744 <_vfiprintf_r+0xa54>
    f6a6:	add.w	r9, sp, #108	; 0x6c
    f6aa:	cmp	r4, #16
    f6ac:	ble.w	fc10 <_vfiprintf_r+0xf20>
    f6b0:	ldr	r1, [sp, #100]	; 0x64
    f6b2:	vmov	r6, s16
    f6b6:	movs	r5, #16
    f6b8:	b.n	f6d6 <_vfiprintf_r+0x9e6>
    f6ba:	nop
    f6bc:	.word	0x20000a94
    f6c0:	.word	0x20000f28
    f6c4:	.word	0x20000ad8
    f6c8:	adds	r0, r1, #2
    f6ca:	add.w	r9, r9, #8
    f6ce:	mov	r1, r2
    f6d0:	subs	r4, #16
    f6d2:	cmp	r4, #16
    f6d4:	ble.n	f70c <_vfiprintf_r+0xa1c>
    f6d6:	adds	r2, r1, #1
    f6d8:	ldr	r0, [pc, #716]	; (f9a8 <_vfiprintf_r+0xcb8>)
    f6da:	adds	r3, #16
    f6dc:	cmp	r2, #7
    f6de:	strd	r0, r5, [r9]
    f6e2:	strd	r2, r3, [sp, #100]	; 0x64
    f6e6:	ble.n	f6c8 <_vfiprintf_r+0x9d8>
    f6e8:	add	r2, sp, #96	; 0x60
    f6ea:	cbz	r3, f73a <_vfiprintf_r+0xa4a>
    f6ec:	mov	r1, r6
    f6ee:	mov	r0, fp
    f6f0:	bl	ec78 <__sprint_r.part.0>
    f6f4:	cmp	r0, #0
    f6f6:	bne.w	f09e <_vfiprintf_r+0x3ae>
    f6fa:	ldrd	r1, r3, [sp, #100]	; 0x64
    f6fe:	subs	r4, #16
    f700:	cmp	r4, #16
    f702:	add.w	r0, r1, #1
    f706:	add.w	r9, sp, #108	; 0x6c
    f70a:	bgt.n	f6d6 <_vfiprintf_r+0x9e6>
    f70c:	ldr	r2, [pc, #664]	; (f9a8 <_vfiprintf_r+0xcb8>)
    f70e:	str.w	r4, [r9, #4]
    f712:	add	r3, r4
    f714:	cmp	r0, #7
    f716:	strd	r0, r3, [sp, #100]	; 0x64
    f71a:	str.w	r2, [r9]
    f71e:	ble.w	f1d4 <_vfiprintf_r+0x4e4>
    f722:	cbz	r3, f744 <_vfiprintf_r+0xa54>
    f724:	vmov	r1, s16
    f728:	add	r2, sp, #96	; 0x60
    f72a:	mov	r0, fp
    f72c:	bl	ec78 <__sprint_r.part.0>
    f730:	cmp	r0, #0
    f732:	bne.w	f09e <_vfiprintf_r+0x3ae>
    f736:	ldr	r3, [sp, #104]	; 0x68
    f738:	b.n	f1d4 <_vfiprintf_r+0x4e4>
    f73a:	movs	r0, #1
    f73c:	mov	r1, r3
    f73e:	add.w	r9, sp, #108	; 0x6c
    f742:	b.n	f6d0 <_vfiprintf_r+0x9e0>
    f744:	ldrd	r3, r2, [sp, #20]
    f748:	ldr	r1, [sp, #12]
    f74a:	cmp	r2, r1
    f74c:	ite	ge
    f74e:	addge	r3, r3, r2
    f750:	addlt	r3, r3, r1
    f752:	str	r3, [sp, #20]
    f754:	b.n	f1ea <_vfiprintf_r+0x4fa>
    f756:	ldrsh.w	r1, [r2, #12]
    f75a:	lsls	r7, r1, #22
    f75c:	vmov	r3, s16
    f760:	uxth	r2, r1
    f762:	bmi.w	ed36 <_vfiprintf_r+0x46>
    f766:	vmov	r5, s16
    f76a:	ldr	r0, [r3, #88]	; 0x58
    f76c:	bl	b198 <__retarget_lock_acquire_recursive>
    f770:	ldrsh.w	r1, [r5, #12]
    f774:	uxth	r2, r1
    f776:	b.w	ed36 <_vfiprintf_r+0x46>
    f77a:	cmp	r3, #0
    f77c:	beq.w	f472 <_vfiprintf_r+0x782>
    f780:	vmov	r1, s16
    f784:	add	r2, sp, #96	; 0x60
    f786:	mov	r0, fp
    f788:	bl	ec78 <__sprint_r.part.0>
    f78c:	cmp	r0, #0
    f78e:	bne.w	f09e <_vfiprintf_r+0x3ae>
    f792:	ldr	r1, [sp, #100]	; 0x64
    f794:	ldr	r3, [sp, #104]	; 0x68
    f796:	adds	r1, #1
    f798:	add.w	r9, sp, #108	; 0x6c
    f79c:	b.n	f190 <_vfiprintf_r+0x4a0>
    f79e:	str	r2, [sp, #100]	; 0x64
    f7a0:	add.w	r9, sp, #108	; 0x6c
    f7a4:	b.n	f064 <_vfiprintf_r+0x374>
    f7a6:	cmp	r7, #0
    f7a8:	bne.w	ef32 <_vfiprintf_r+0x242>
    f7ac:	ldr	r6, [sp, #12]
    f7ae:	movs	r7, #0
    f7b0:	str	r7, [sp, #16]
    f7b2:	add	r4, sp, #272	; 0x110
    f7b4:	b.w	ef42 <_vfiprintf_r+0x252>
    f7b8:	ldr	r3, [sp, #12]
    f7ba:	ands.w	r3, r3, #16
    f7be:	bne.n	f86a <_vfiprintf_r+0xb7a>
    f7c0:	ldr	r2, [sp, #12]
    f7c2:	ands.w	r0, r2, #64	; 0x40
    f7c6:	beq.w	faa0 <_vfiprintf_r+0xdb0>
    f7ca:	ldr	r1, [sp, #28]
    f7cc:	mov	r2, r3
    f7ce:	ldr.w	r3, [r1], #4
    f7d2:	str	r1, [sp, #28]
    f7d4:	uxth	r3, r3
    f7d6:	movs	r1, #1
    f7d8:	b.n	efde <_vfiprintf_r+0x2ee>
    f7da:	ldr	r2, [sp, #36]	; 0x24
    f7dc:	cmp	r2, #0
    f7de:	bne.n	f8aa <_vfiprintf_r+0xbba>
    f7e0:	mov	r0, r3
    f7e2:	movs	r1, #1
    f7e4:	add.w	r9, sp, #108	; 0x6c
    f7e8:	b.n	f17e <_vfiprintf_r+0x48e>
    f7ea:	movs	r1, #1
    f7ec:	mov	r0, r3
    f7ee:	add.w	r9, sp, #108	; 0x6c
    f7f2:	b.n	f17e <_vfiprintf_r+0x48e>
    f7f4:	negs	r3, r3
    f7f6:	sbc.w	r2, r2, r2, lsl #1
    f7fa:	str	r6, [sp, #12]
    f7fc:	movs	r0, #45	; 0x2d
    f7fe:	movs	r1, #1
    f800:	b.w	efe0 <_vfiprintf_r+0x2f0>
    f804:	cmp	r3, #0
    f806:	beq.w	f91a <_vfiprintf_r+0xc2a>
    f80a:	vmov	r1, s16
    f80e:	add	r2, sp, #96	; 0x60
    f810:	mov	r0, fp
    f812:	bl	ec78 <__sprint_r.part.0>
    f816:	cmp	r0, #0
    f818:	bne.w	f09e <_vfiprintf_r+0x3ae>
    f81c:	ldrd	r0, r3, [sp, #100]	; 0x64
    f820:	add.w	r9, sp, #108	; 0x6c
    f824:	adds	r1, r0, #1
    f826:	b.n	f118 <_vfiprintf_r+0x428>
    f828:	ldrb.w	r1, [r8]
    f82c:	str	r3, [sp, #28]
    f82e:	b.w	edd6 <_vfiprintf_r+0xe6>
    f832:	add	r4, sp, #272	; 0x110
    f834:	b.w	ef42 <_vfiprintf_r+0x252>
    f838:	add.w	r9, r9, #8
    f83c:	add.w	r1, ip, #1
    f840:	mov	r0, ip
    f842:	b.n	f186 <_vfiprintf_r+0x496>
    f844:	ands.w	r2, r6, #512	; 0x200
    f848:	bne.w	fb7a <_vfiprintf_r+0xe8a>
    f84c:	ldr.w	r3, [r1], #4
    f850:	str	r1, [sp, #28]
    f852:	b.w	efd6 <_vfiprintf_r+0x2e6>
    f856:	lsls	r3, r6, #22
    f858:	bmi.w	fb6c <_vfiprintf_r+0xe7c>
    f85c:	ldr.w	r3, [r2], #4
    f860:	str	r2, [sp, #28]
    f862:	asrs	r2, r3, #31
    f864:	mov	r1, r2
    f866:	b.w	ef0e <_vfiprintf_r+0x21e>
    f86a:	ldr	r1, [sp, #28]
    f86c:	ldr.w	r3, [r1], #4
    f870:	str	r1, [sp, #28]
    f872:	movs	r1, #1
    f874:	b.w	efde <_vfiprintf_r+0x2ee>
    f878:	ldr	r3, [sp, #28]
    f87a:	ldr	r0, [sp, #20]
    f87c:	ldr.w	r1, [r3], #4
    f880:	str	r3, [sp, #28]
    f882:	asrs	r2, r0, #31
    f884:	strd	r0, r2, [r1]
    f888:	b.w	ed86 <_vfiprintf_r+0x96>
    f88c:	ldr	r3, [sp, #44]	; 0x2c
    f88e:	cmp	r3, #0
    f890:	beq.w	eee0 <_vfiprintf_r+0x1f0>
    f894:	ldr	r3, [sp, #44]	; 0x2c
    f896:	ldrb	r3, [r3, #0]
    f898:	cmp	r3, #0
    f89a:	beq.w	eee0 <_vfiprintf_r+0x1f0>
    f89e:	ldrb.w	r1, [r8]
    f8a2:	orr.w	r6, r6, #1024	; 0x400
    f8a6:	b.w	edd6 <_vfiprintf_r+0xe6>
    f8aa:	movs	r3, #2
    f8ac:	add	r2, sp, #68	; 0x44
    f8ae:	str	r3, [sp, #112]	; 0x70
    f8b0:	str	r2, [sp, #108]	; 0x6c
    f8b2:	movs	r0, #1
    f8b4:	add.w	r9, sp, #108	; 0x6c
    f8b8:	b.n	f600 <_vfiprintf_r+0x910>
    f8ba:	str	r6, [sp, #12]
    f8bc:	b.n	f3a2 <_vfiprintf_r+0x6b2>
    f8be:	ldr	r3, [pc, #236]	; (f9ac <_vfiprintf_r+0xcbc>)
    f8c0:	str	r3, [sp, #48]	; 0x30
    f8c2:	ands.w	r2, r6, #32
    f8c6:	beq.n	f97c <_vfiprintf_r+0xc8c>
    f8c8:	ldr	r3, [sp, #28]
    f8ca:	adds	r3, #7
    f8cc:	bic.w	r3, r3, #7
    f8d0:	mov	r0, r3
    f8d2:	ldr	r2, [r3, #4]
    f8d4:	ldr.w	r3, [r0], #8
    f8d8:	str	r0, [sp, #28]
    f8da:	lsls	r4, r6, #31
    f8dc:	bpl.n	f8f2 <_vfiprintf_r+0xc02>
    f8de:	orrs.w	r0, r3, r2
    f8e2:	beq.n	f8f2 <_vfiprintf_r+0xc02>
    f8e4:	strb.w	r1, [sp, #69]	; 0x45
    f8e8:	movs	r1, #48	; 0x30
    f8ea:	orr.w	r6, r6, #2
    f8ee:	strb.w	r1, [sp, #68]	; 0x44
    f8f2:	bic.w	r1, r6, #1024	; 0x400
    f8f6:	str	r1, [sp, #12]
    f8f8:	movs	r1, #2
    f8fa:	b.w	efde <_vfiprintf_r+0x2ee>
    f8fe:	ldr	r3, [pc, #176]	; (f9b0 <_vfiprintf_r+0xcc0>)
    f900:	str	r3, [sp, #48]	; 0x30
    f902:	b.n	f8c2 <_vfiprintf_r+0xbd2>
    f904:	ldr	r3, [sp, #28]
    f906:	movs	r1, #1
    f908:	ldr.w	r2, [r3], #4
    f90c:	str	r1, [sp, #12]
    f90e:	strb.w	r2, [sp, #172]	; 0xac
    f912:	str	r3, [sp, #28]
    f914:	str	r1, [sp, #16]
    f916:	add	r4, sp, #172	; 0xac
    f918:	b.n	f2da <_vfiprintf_r+0x5ea>
    f91a:	ldrb.w	r2, [sp, #67]	; 0x43
    f91e:	cmp	r2, #0
    f920:	bne.w	fb88 <_vfiprintf_r+0xe98>
    f924:	ldr	r2, [sp, #36]	; 0x24
    f926:	cmp	r2, #0
    f928:	bne.w	f5f0 <_vfiprintf_r+0x900>
    f92c:	mov	r0, r3
    f92e:	movs	r1, #1
    f930:	add.w	r9, sp, #108	; 0x6c
    f934:	b.n	f186 <_vfiprintf_r+0x496>
    f936:	movs	r1, #0
    f938:	movs	r2, #8
    f93a:	add	r0, sp, #88	; 0x58
    f93c:	str	r4, [sp, #76]	; 0x4c
    f93e:	bl	7528 <memset>
    f942:	adds	r1, r7, #1
    f944:	beq.w	fac0 <_vfiprintf_r+0xdd0>
    f948:	movs	r5, #0
    f94a:	str	r4, [sp, #28]
    f94c:	mov	r4, r5
    f94e:	b.n	f96a <_vfiprintf_r+0xc7a>
    f950:	add	r1, sp, #172	; 0xac
    f952:	mov	r0, fp
    f954:	bl	eaec <_wcrtomb_r>
    f958:	adds	r2, r0, #1
    f95a:	add	r0, r4
    f95c:	beq.w	fc36 <_vfiprintf_r+0xf46>
    f960:	cmp	r0, r7
    f962:	bgt.n	f976 <_vfiprintf_r+0xc86>
    f964:	beq.w	fc48 <_vfiprintf_r+0xf58>
    f968:	mov	r4, r0
    f96a:	ldr	r2, [sp, #76]	; 0x4c
    f96c:	ldr	r2, [r2, r5]
    f96e:	add	r3, sp, #88	; 0x58
    f970:	adds	r5, #4
    f972:	cmp	r2, #0
    f974:	bne.n	f950 <_vfiprintf_r+0xc60>
    f976:	str	r4, [sp, #16]
    f978:	ldr	r4, [sp, #28]
    f97a:	b.n	fadc <_vfiprintf_r+0xdec>
    f97c:	ands.w	r3, r6, #16
    f980:	ldr	r0, [sp, #28]
    f982:	bne.n	f99e <_vfiprintf_r+0xcae>
    f984:	ands.w	r4, r6, #64	; 0x40
    f988:	beq.n	f996 <_vfiprintf_r+0xca6>
    f98a:	mov	r2, r3
    f98c:	ldr.w	r3, [r0], #4
    f990:	str	r0, [sp, #28]
    f992:	uxth	r3, r3
    f994:	b.n	f8da <_vfiprintf_r+0xbea>
    f996:	ands.w	r2, r6, #512	; 0x200
    f99a:	bne.w	fb60 <_vfiprintf_r+0xe70>
    f99e:	ldr.w	r3, [r0], #4
    f9a2:	str	r0, [sp, #28]
    f9a4:	b.n	f8da <_vfiprintf_r+0xbea>
    f9a6:	nop
    f9a8:	.word	0x20000ad8
    f9ac:	.word	0x20000a94
    f9b0:	.word	0x20000aa8
    f9b4:	ldr	r1, [sp, #12]
    f9b6:	str	r7, [sp, #16]
    f9b8:	add	r4, sp, #272	; 0x110
    f9ba:	mov	lr, r3
    f9bc:	vmov	s17, fp
    f9c0:	and.w	r6, r1, #1024	; 0x400
    f9c4:	mov.w	ip, #0
    f9c8:	mov	r3, r4
    f9ca:	b.n	f9da <_vfiprintf_r+0xcea>
    f9cc:	cmp.w	lr, #10
    f9d0:	sbcs.w	r2, r2, #0
    f9d4:	bcc.n	fa4a <_vfiprintf_r+0xd5a>
    f9d6:	mov	lr, r4
    f9d8:	mov	r2, r5
    f9da:	ldr	r1, [pc, #664]	; (fc74 <_vfiprintf_r+0xf84>)
    f9dc:	adds.w	r0, lr, r2
    f9e0:	adc.w	r0, r0, #0
    f9e4:	mov	r7, r1
    f9e6:	umull	r1, r4, r1, r0
    f9ea:	bic.w	r1, r4, #3
    f9ee:	add.w	r1, r1, r4, lsr #2
    f9f2:	subs	r0, r0, r1
    f9f4:	subs.w	r1, lr, r0
    f9f8:	mov.w	r5, #3435973836	; 0xcccccccc
    f9fc:	sbc.w	r4, r2, #0
    fa00:	mul.w	r5, r5, r1
    fa04:	mla	r5, r7, r4, r5
    fa08:	umull	r4, r1, r1, r7
    fa0c:	add	r5, r1
    fa0e:	movs	r7, #5
    fa10:	and.w	r1, r4, #1
    fa14:	umull	r1, fp, r1, r7
    fa18:	adds	r1, r1, r0
    fa1a:	lsrs	r4, r4, #1
    fa1c:	adds	r1, #48	; 0x30
    fa1e:	strb.w	r1, [r3, #-1]
    fa22:	orr.w	r4, r4, r5, lsl #31
    fa26:	add.w	ip, ip, #1
    fa2a:	subs	r3, #1
    fa2c:	lsrs	r5, r5, #1
    fa2e:	cmp	r6, #0
    fa30:	beq.n	f9cc <_vfiprintf_r+0xcdc>
    fa32:	ldr	r1, [sp, #44]	; 0x2c
    fa34:	ldrb	r1, [r1, #0]
    fa36:	cmp	r1, ip
    fa38:	bne.n	f9cc <_vfiprintf_r+0xcdc>
    fa3a:	cmp.w	ip, #255	; 0xff
    fa3e:	beq.n	f9cc <_vfiprintf_r+0xcdc>
    fa40:	cmp.w	lr, #10
    fa44:	sbcs.w	r2, r2, #0
    fa48:	bcs.n	fb24 <_vfiprintf_r+0xe34>
    fa4a:	mov	r4, r3
    fa4c:	add	r3, sp, #272	; 0x110
    fa4e:	subs	r3, r3, r4
    fa50:	ldr	r7, [sp, #16]
    fa52:	ldr	r6, [sp, #12]
    fa54:	str	r3, [sp, #16]
    fa56:	vmov	fp, s17
    fa5a:	b.w	ef42 <_vfiprintf_r+0x252>
    fa5e:	str	r6, [sp, #12]
    fa60:	b.w	ef28 <_vfiprintf_r+0x238>
    fa64:	mov	r0, fp
    fa66:	bl	ac28 <__sinit>
    fa6a:	b.w	ed24 <_vfiprintf_r+0x34>
    fa6e:	cmp	r1, #1
    fa70:	str	r6, [sp, #12]
    fa72:	bne.w	f410 <_vfiprintf_r+0x720>
    fa76:	b.w	ef32 <_vfiprintf_r+0x242>
    fa7a:	ldr	r3, [sp, #28]
    fa7c:	ldr	r1, [sp, #20]
    fa7e:	ldr.w	r2, [r3], #4
    fa82:	str	r1, [r2, #0]
    fa84:	str	r3, [sp, #28]
    fa86:	b.w	ed86 <_vfiprintf_r+0x96>
    fa8a:	cmp	r7, #6
    fa8c:	mov	r3, r7
    fa8e:	ldr	r2, [sp, #12]
    fa90:	ldr	r4, [pc, #484]	; (fc78 <_vfiprintf_r+0xf88>)
    fa92:	str	r2, [sp, #28]
    fa94:	it	cs
    fa96:	movcs	r3, #6
    fa98:	str	r3, [sp, #16]
    fa9a:	str	r3, [sp, #12]
    fa9c:	b.w	f0ea <_vfiprintf_r+0x3fa>
    faa0:	ldr	r3, [sp, #12]
    faa2:	ldr	r1, [sp, #28]
    faa4:	ands.w	r2, r3, #512	; 0x200
    faa8:	ite	ne
    faaa:	ldrne.w	r3, [r1], #4
    faae:	ldreq.w	r3, [r1], #4
    fab2:	str	r1, [sp, #28]
    fab4:	itt	ne
    fab6:	movne	r2, r0
    fab8:	uxtbne	r3, r3
    faba:	movs	r1, #1
    fabc:	b.w	efde <_vfiprintf_r+0x2ee>
    fac0:	add	r3, sp, #88	; 0x58
    fac2:	str	r3, [sp, #0]
    fac4:	movs	r3, #0
    fac6:	mov	r1, r3
    fac8:	add	r2, sp, #76	; 0x4c
    faca:	mov	r0, fp
    facc:	bl	eb38 <_wcsrtombs_r>
    fad0:	mov	r3, r0
    fad2:	adds	r3, #1
    fad4:	str	r0, [sp, #16]
    fad6:	beq.w	fc36 <_vfiprintf_r+0xf46>
    fada:	str	r4, [sp, #76]	; 0x4c
    fadc:	ldr	r3, [sp, #16]
    fade:	cmp	r3, #0
    fae0:	beq.n	fb44 <_vfiprintf_r+0xe54>
    fae2:	cmp	r3, #99	; 0x63
    fae4:	bgt.n	fbae <_vfiprintf_r+0xebe>
    fae6:	movs	r3, #0
    fae8:	str	r3, [sp, #32]
    faea:	add	r4, sp, #172	; 0xac
    faec:	movs	r2, #8
    faee:	movs	r1, #0
    faf0:	add	r0, sp, #88	; 0x58
    faf2:	bl	7528 <memset>
    faf6:	ldr	r5, [sp, #16]
    faf8:	add	r3, sp, #88	; 0x58
    fafa:	str	r3, [sp, #0]
    fafc:	add	r2, sp, #76	; 0x4c
    fafe:	mov	r3, r5
    fb00:	mov	r1, r4
    fb02:	mov	r0, fp
    fb04:	bl	eb38 <_wcsrtombs_r>
    fb08:	cmp	r5, r0
    fb0a:	bne.w	fc64 <_vfiprintf_r+0xf74>
    fb0e:	ldr	r3, [sp, #12]
    fb10:	ldr	r2, [sp, #16]
    fb12:	str	r3, [sp, #28]
    fb14:	movs	r3, #0
    fb16:	strb	r3, [r4, r2]
    fb18:	mov	r7, r3
    fb1a:	bic.w	r3, r2, r2, asr #31
    fb1e:	str	r3, [sp, #12]
    fb20:	b.w	ef50 <_vfiprintf_r+0x260>
    fb24:	ldr	r2, [sp, #56]	; 0x38
    fb26:	ldr	r1, [sp, #52]	; 0x34
    fb28:	subs	r3, r3, r2
    fb2a:	mov	r0, r3
    fb2c:	str	r3, [sp, #32]
    fb2e:	bl	b000 <strncpy>
    fb32:	ldr	r1, [sp, #44]	; 0x2c
    fb34:	ldr	r3, [sp, #32]
    fb36:	ldrb	r2, [r1, #1]
    fb38:	cbz	r2, fb3e <_vfiprintf_r+0xe4e>
    fb3a:	adds	r1, #1
    fb3c:	str	r1, [sp, #44]	; 0x2c
    fb3e:	mov.w	ip, #0
    fb42:	b.n	f9d6 <_vfiprintf_r+0xce6>
    fb44:	ldr	r3, [sp, #12]
    fb46:	str	r3, [sp, #28]
    fb48:	ldr	r3, [sp, #16]
    fb4a:	str	r3, [sp, #12]
    fb4c:	mov	r7, r3
    fb4e:	str	r3, [sp, #32]
    fb50:	b.w	ef50 <_vfiprintf_r+0x260>
    fb54:	movs	r1, #1
    fb56:	mov	r0, r3
    fb58:	add.w	r9, sp, #108	; 0x6c
    fb5c:	b.w	f186 <_vfiprintf_r+0x496>
    fb60:	ldr.w	r3, [r0], #4
    fb64:	str	r0, [sp, #28]
    fb66:	mov	r2, r4
    fb68:	uxtb	r3, r3
    fb6a:	b.n	f8da <_vfiprintf_r+0xbea>
    fb6c:	ldrsb.w	r3, [r2], #4
    fb70:	str	r2, [sp, #28]
    fb72:	asrs	r2, r3, #31
    fb74:	mov	r1, r2
    fb76:	b.w	ef0e <_vfiprintf_r+0x21e>
    fb7a:	ldr.w	r3, [r1], #4
    fb7e:	str	r1, [sp, #28]
    fb80:	mov	r2, r0
    fb82:	uxtb	r3, r3
    fb84:	b.w	efd6 <_vfiprintf_r+0x2e6>
    fb88:	movs	r3, #1
    fb8a:	str	r3, [sp, #112]	; 0x70
    fb8c:	movs	r1, #1
    fb8e:	add.w	r3, sp, #67	; 0x43
    fb92:	str	r3, [sp, #108]	; 0x6c
    fb94:	add.w	r9, sp, #108	; 0x6c
    fb98:	mov	r3, r1
    fb9a:	b.w	f138 <_vfiprintf_r+0x448>
    fb9e:	ldr	r3, [sp, #28]
    fba0:	ldr	r1, [sp, #20]
    fba2:	ldr.w	r2, [r3], #4
    fba6:	str	r3, [sp, #28]
    fba8:	strh	r1, [r2, #0]
    fbaa:	b.w	ed86 <_vfiprintf_r+0x96>
    fbae:	adds	r1, r3, #1
    fbb0:	mov	r0, fp
    fbb2:	bl	a1a0 <_malloc_r>
    fbb6:	mov	r4, r0
    fbb8:	cmp	r0, #0
    fbba:	beq.n	fc36 <_vfiprintf_r+0xf46>
    fbbc:	str	r0, [sp, #32]
    fbbe:	b.n	faec <_vfiprintf_r+0xdfc>
    fbc0:	ldr	r0, [r1, #88]	; 0x58
    fbc2:	bl	b19c <__retarget_lock_release_recursive>
    fbc6:	b.w	ef9c <_vfiprintf_r+0x2ac>
    fbca:	ldr	r3, [sp, #12]
    fbcc:	str	r3, [sp, #28]
    fbce:	strd	r7, r7, [sp, #12]
    fbd2:	ldr	r7, [sp, #32]
    fbd4:	b.w	ef50 <_vfiprintf_r+0x260>
    fbd8:	ldr	r0, [sp, #100]	; 0x64
    fbda:	ldr	r3, [sp, #104]	; 0x68
    fbdc:	adds	r0, #1
    fbde:	b.n	f66c <_vfiprintf_r+0x97c>
    fbe0:	ldr	r3, [sp, #12]
    fbe2:	str	r3, [sp, #28]
    fbe4:	mov	r0, r4
    fbe6:	bl	b240 <strlen>
    fbea:	bic.w	r3, r0, r0, asr #31
    fbee:	mov	r7, r5
    fbf0:	str	r0, [sp, #16]
    fbf2:	str	r3, [sp, #12]
    fbf4:	str	r5, [sp, #32]
    fbf6:	b.w	ef50 <_vfiprintf_r+0x260>
    fbfa:	vmov	r1, s16
    fbfe:	add	r2, sp, #96	; 0x60
    fc00:	mov	r0, fp
    fc02:	bl	ec78 <__sprint_r.part.0>
    fc06:	cmp	r0, #0
    fc08:	beq.w	f078 <_vfiprintf_r+0x388>
    fc0c:	b.w	f0aa <_vfiprintf_r+0x3ba>
    fc10:	ldr	r0, [sp, #100]	; 0x64
    fc12:	adds	r0, #1
    fc14:	b.n	f70c <_vfiprintf_r+0xa1c>
    fc16:	mov	ip, r1
    fc18:	b.n	f4f8 <_vfiprintf_r+0x808>
    fc1a:	ldr	r3, [r5, #100]	; 0x64
    fc1c:	lsls	r1, r3, #31
    fc1e:	bmi.n	fc2c <_vfiprintf_r+0xf3c>
    fc20:	ldrh	r3, [r5, #12]
    fc22:	lsls	r2, r3, #22
    fc24:	bmi.n	fc2c <_vfiprintf_r+0xf3c>
    fc26:	ldr	r0, [r5, #88]	; 0x58
    fc28:	bl	b19c <__retarget_lock_release_recursive>
    fc2c:	mov.w	r3, #4294967295
    fc30:	str	r3, [sp, #20]
    fc32:	b.w	f0c8 <_vfiprintf_r+0x3d8>
    fc36:	vmov	r2, s16
    fc3a:	ldrsh.w	r3, [r2, #12]
    fc3e:	orr.w	r3, r3, #64	; 0x40
    fc42:	strh	r3, [r2, #12]
    fc44:	b.w	f0b2 <_vfiprintf_r+0x3c2>
    fc48:	ldr	r4, [sp, #28]
    fc4a:	str	r7, [sp, #16]
    fc4c:	b.n	fadc <_vfiprintf_r+0xdec>
    fc4e:	ldr	r3, [sp, #28]
    fc50:	ldrb.w	r1, [r8, #1]
    fc54:	ldr.w	r7, [r3], #4
    fc58:	str	r3, [sp, #28]
    fc5a:	mov	r8, r2
    fc5c:	orr.w	r7, r7, r7, asr #31
    fc60:	b.w	edd6 <_vfiprintf_r+0xe6>
    fc64:	vmov	r2, s16
    fc68:	ldrh	r3, [r2, #12]
    fc6a:	orr.w	r3, r3, #64	; 0x40
    fc6e:	strh	r3, [r2, #12]
    fc70:	b.w	f09e <_vfiprintf_r+0x3ae>
    fc74:	.word	0xcccccccd
    fc78:	.word	0x20000abc

0000fc7c <__sbprintf>:
    fc7c:	push	{r4, r5, r6, lr}
    fc7e:	mov	r4, r1
    fc80:	ldrh	r1, [r1, #12]
    fc82:	sub.w	sp, sp, #1136	; 0x470
    fc86:	bic.w	r1, r1, #2
    fc8a:	strh.w	r1, [sp, #20]
    fc8e:	ldr	r1, [r4, #100]	; 0x64
    fc90:	str	r1, [sp, #108]	; 0x6c
    fc92:	ldrh	r1, [r4, #14]
    fc94:	strh.w	r1, [sp, #22]
    fc98:	ldr	r1, [r4, #28]
    fc9a:	str	r1, [sp, #36]	; 0x24
    fc9c:	ldr	r1, [r4, #36]	; 0x24
    fc9e:	str	r1, [sp, #44]	; 0x2c
    fca0:	add	r1, sp, #112	; 0x70
    fca2:	str	r1, [sp, #8]
    fca4:	str	r1, [sp, #24]
    fca6:	mov.w	r1, #1024	; 0x400
    fcaa:	mov	r6, r0
    fcac:	str	r1, [sp, #16]
    fcae:	str	r1, [sp, #28]
    fcb0:	add	r0, sp, #96	; 0x60
    fcb2:	movs	r1, #0
    fcb4:	strd	r3, r2, [sp]
    fcb8:	str	r1, [sp, #32]
    fcba:	bl	b190 <__retarget_lock_init_recursive>
    fcbe:	ldrd	r3, r2, [sp]
    fcc2:	add	r1, sp, #8
    fcc4:	mov	r0, r6
    fcc6:	bl	ecf0 <_vfiprintf_r>
    fcca:	subs	r5, r0, #0
    fccc:	blt.n	fcde <__sbprintf+0x62>
    fcce:	add	r1, sp, #8
    fcd0:	mov	r0, r6
    fcd2:	bl	db4c <_fflush_r>
    fcd6:	cmp	r0, #0
    fcd8:	it	ne
    fcda:	movne.w	r5, #4294967295
    fcde:	ldrh.w	r3, [sp, #20]
    fce2:	lsls	r3, r3, #25
    fce4:	bpl.n	fcee <__sbprintf+0x72>
    fce6:	ldrh	r3, [r4, #12]
    fce8:	orr.w	r3, r3, #64	; 0x40
    fcec:	strh	r3, [r4, #12]
    fcee:	ldr	r0, [sp, #96]	; 0x60
    fcf0:	bl	b194 <__retarget_lock_close_recursive>
    fcf4:	mov	r0, r5
    fcf6:	add.w	sp, sp, #1136	; 0x470
    fcfa:	pop	{r4, r5, r6, pc}

0000fcfc <__sfvwrite_r>:
    fcfc:	ldr	r3, [r2, #8]
    fcfe:	cmp	r3, #0
    fd00:	beq.w	fe0e <__sfvwrite_r+0x112>
    fd04:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fd08:	ldrsh.w	r3, [r1, #12]
    fd0c:	mov	r4, r1
    fd0e:	lsls	r1, r3, #28
    fd10:	mov	r8, r0
    fd12:	sub	sp, #12
    fd14:	mov	r7, r2
    fd16:	uxth	r0, r3
    fd18:	bpl.n	fd66 <__sfvwrite_r+0x6a>
    fd1a:	ldr	r3, [r4, #16]
    fd1c:	cbz	r3, fd66 <__sfvwrite_r+0x6a>
    fd1e:	ands.w	r3, r0, #2
    fd22:	ldr	r5, [r7, #0]
    fd24:	beq.n	fd82 <__sfvwrite_r+0x86>
    fd26:	mov.w	sl, #0
    fd2a:	ldr.w	fp, [pc, #704]	; ffec <__sfvwrite_r+0x2f0>
    fd2e:	mov	r6, sl
    fd30:	mov	r9, r7
    fd32:	cmp	r6, fp
    fd34:	mov	r3, r6
    fd36:	mov	r2, sl
    fd38:	it	cs
    fd3a:	movcs	r3, fp
    fd3c:	mov	r0, r8
    fd3e:	cmp	r6, #0
    fd40:	beq.n	fde8 <__sfvwrite_r+0xec>
    fd42:	ldr	r1, [r4, #28]
    fd44:	ldr	r7, [r4, #36]	; 0x24
    fd46:	blx	r7
    fd48:	cmp	r0, #0
    fd4a:	ble.n	fdfa <__sfvwrite_r+0xfe>
    fd4c:	ldr.w	r3, [r9, #8]
    fd50:	subs	r3, r3, r0
    fd52:	add	sl, r0
    fd54:	subs	r6, r6, r0
    fd56:	str.w	r3, [r9, #8]
    fd5a:	cmp	r3, #0
    fd5c:	bne.n	fd32 <__sfvwrite_r+0x36>
    fd5e:	movs	r0, #0
    fd60:	add	sp, #12
    fd62:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fd66:	mov	r1, r4
    fd68:	mov	r0, r8
    fd6a:	bl	fff0 <__swsetup_r>
    fd6e:	cmp	r0, #0
    fd70:	bne.w	ffe4 <__sfvwrite_r+0x2e8>
    fd74:	ldrsh.w	r3, [r4, #12]
    fd78:	ldr	r5, [r7, #0]
    fd7a:	uxth	r0, r3
    fd7c:	ands.w	r3, r0, #2
    fd80:	bne.n	fd26 <__sfvwrite_r+0x2a>
    fd82:	ands.w	r9, r0, #1
    fd86:	bne.n	fe12 <__sfvwrite_r+0x116>
    fd88:	mov	r6, r9
    fd8a:	str	r7, [sp, #0]
    fd8c:	cbz	r6, fde0 <__sfvwrite_r+0xe4>
    fd8e:	lsls	r2, r0, #22
    fd90:	ldr.w	fp, [r4, #8]
    fd94:	bpl.w	fea2 <__sfvwrite_r+0x1a6>
    fd98:	cmp	fp, r6
    fd9a:	mov	r2, fp
    fd9c:	bhi.w	ff08 <__sfvwrite_r+0x20c>
    fda0:	tst.w	r0, #1152	; 0x480
    fda4:	bne.w	ff2a <__sfvwrite_r+0x22e>
    fda8:	ldr	r0, [r4, #0]
    fdaa:	str	r2, [sp, #4]
    fdac:	mov	r1, r9
    fdae:	bl	ae7c <memmove>
    fdb2:	ldr	r3, [r4, #8]
    fdb4:	ldr	r2, [sp, #4]
    fdb6:	sub.w	r1, r3, fp
    fdba:	ldr	r3, [r4, #0]
    fdbc:	str	r1, [r4, #8]
    fdbe:	add	r3, r2
    fdc0:	mov	sl, r6
    fdc2:	str	r3, [r4, #0]
    fdc4:	movs	r6, #0
    fdc6:	ldr	r2, [sp, #0]
    fdc8:	ldr	r3, [r2, #8]
    fdca:	sub.w	r3, r3, sl
    fdce:	add	r9, sl
    fdd0:	str	r3, [r2, #8]
    fdd2:	cmp	r3, #0
    fdd4:	beq.n	fd5e <__sfvwrite_r+0x62>
    fdd6:	ldrsh.w	r0, [r4, #12]
    fdda:	uxth	r0, r0
    fddc:	cmp	r6, #0
    fdde:	bne.n	fd8e <__sfvwrite_r+0x92>
    fde0:	ldrd	r9, r6, [r5]
    fde4:	adds	r5, #8
    fde6:	b.n	fd8c <__sfvwrite_r+0x90>
    fde8:	ldrd	sl, r6, [r5]
    fdec:	adds	r5, #8
    fdee:	b.n	fd32 <__sfvwrite_r+0x36>
    fdf0:	mov	r1, r4
    fdf2:	mov	r0, r8
    fdf4:	bl	db4c <_fflush_r>
    fdf8:	cbz	r0, fe5e <__sfvwrite_r+0x162>
    fdfa:	ldrsh.w	r3, [r4, #12]
    fdfe:	orr.w	r3, r3, #64	; 0x40
    fe02:	mov.w	r0, #4294967295
    fe06:	strh	r3, [r4, #12]
    fe08:	add	sp, #12
    fe0a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fe0e:	movs	r0, #0
    fe10:	bx	lr
    fe12:	mov	r6, r3
    fe14:	mov	sl, r7
    fe16:	mov	r9, r3
    fe18:	mov	r0, r3
    fe1a:	str	r5, [sp, #0]
    fe1c:	mov	r7, r3
    fe1e:	cbz	r6, fe7a <__sfvwrite_r+0x17e>
    fe20:	cmp	r0, #0
    fe22:	beq.n	fe8a <__sfvwrite_r+0x18e>
    fe24:	mov	r2, r9
    fe26:	ldrd	r1, r3, [r4, #16]
    fe2a:	ldr	r0, [r4, #0]
    fe2c:	ldr	r5, [r4, #8]
    fe2e:	cmp	r2, r6
    fe30:	it	cs
    fe32:	movcs	r2, r6
    fe34:	cmp	r0, r1
    fe36:	bls.n	fe42 <__sfvwrite_r+0x146>
    fe38:	add.w	fp, r5, r3
    fe3c:	cmp	r2, fp
    fe3e:	bgt.w	ff90 <__sfvwrite_r+0x294>
    fe42:	cmp	r3, r2
    fe44:	bgt.n	ff10 <__sfvwrite_r+0x214>
    fe46:	ldr	r1, [r4, #28]
    fe48:	ldr	r5, [r4, #36]	; 0x24
    fe4a:	mov	r2, r7
    fe4c:	mov	r0, r8
    fe4e:	blx	r5
    fe50:	subs.w	fp, r0, #0
    fe54:	ble.n	fdfa <__sfvwrite_r+0xfe>
    fe56:	subs.w	r9, r9, fp
    fe5a:	beq.n	fdf0 <__sfvwrite_r+0xf4>
    fe5c:	movs	r0, #1
    fe5e:	ldr.w	r3, [sl, #8]
    fe62:	sub.w	r3, r3, fp
    fe66:	add	r7, fp
    fe68:	sub.w	r6, r6, fp
    fe6c:	str.w	r3, [sl, #8]
    fe70:	cmp	r3, #0
    fe72:	beq.w	fd5e <__sfvwrite_r+0x62>
    fe76:	cmp	r6, #0
    fe78:	bne.n	fe20 <__sfvwrite_r+0x124>
    fe7a:	ldr	r2, [sp, #0]
    fe7c:	ldr	r6, [r2, #4]
    fe7e:	mov	r3, r2
    fe80:	adds	r2, #8
    fe82:	str	r2, [sp, #0]
    fe84:	cmp	r6, #0
    fe86:	beq.n	fe7a <__sfvwrite_r+0x17e>
    fe88:	ldr	r7, [r3, #0]
    fe8a:	mov	r2, r6
    fe8c:	movs	r1, #10
    fe8e:	mov	r0, r7
    fe90:	bl	b1a0 <memchr>
    fe94:	cmp	r0, #0
    fe96:	beq.w	ffd2 <__sfvwrite_r+0x2d6>
    fe9a:	adds	r0, #1
    fe9c:	sub.w	r9, r0, r7
    fea0:	b.n	fe24 <__sfvwrite_r+0x128>
    fea2:	ldr	r0, [r4, #0]
    fea4:	ldr	r3, [r4, #16]
    fea6:	cmp	r0, r3
    fea8:	bhi.n	fed8 <__sfvwrite_r+0x1dc>
    feaa:	ldr	r2, [r4, #20]
    feac:	cmp	r2, r6
    feae:	bhi.n	fed8 <__sfvwrite_r+0x1dc>
    feb0:	mvn.w	r3, #2147483648	; 0x80000000
    feb4:	cmp	r3, r6
    feb6:	it	cs
    feb8:	movcs	r3, r6
    feba:	ldr	r1, [r4, #28]
    febc:	sdiv	r3, r3, r2
    fec0:	ldr	r7, [r4, #36]	; 0x24
    fec2:	mul.w	r3, r2, r3
    fec6:	mov	r0, r8
    fec8:	mov	r2, r9
    feca:	blx	r7
    fecc:	subs.w	sl, r0, #0
    fed0:	ble.n	fdfa <__sfvwrite_r+0xfe>
    fed2:	sub.w	r6, r6, sl
    fed6:	b.n	fdc6 <__sfvwrite_r+0xca>
    fed8:	cmp	fp, r6
    feda:	mov	sl, fp
    fedc:	it	cs
    fede:	movcs	sl, r6
    fee0:	mov	r2, sl
    fee2:	mov	r1, r9
    fee4:	bl	ae7c <memmove>
    fee8:	ldr	r3, [r4, #8]
    feea:	ldr	r2, [r4, #0]
    feec:	sub.w	r3, r3, sl
    fef0:	add	r2, sl
    fef2:	str	r3, [r4, #8]
    fef4:	str	r2, [r4, #0]
    fef6:	cmp	r3, #0
    fef8:	bne.n	fed2 <__sfvwrite_r+0x1d6>
    fefa:	mov	r1, r4
    fefc:	mov	r0, r8
    fefe:	bl	db4c <_fflush_r>
    ff02:	cmp	r0, #0
    ff04:	beq.n	fed2 <__sfvwrite_r+0x1d6>
    ff06:	b.n	fdfa <__sfvwrite_r+0xfe>
    ff08:	ldr	r0, [r4, #0]
    ff0a:	mov	fp, r6
    ff0c:	mov	r2, r6
    ff0e:	b.n	fdaa <__sfvwrite_r+0xae>
    ff10:	mov	r1, r7
    ff12:	str	r2, [sp, #4]
    ff14:	bl	ae7c <memmove>
    ff18:	ldr	r2, [sp, #4]
    ff1a:	ldr	r3, [r4, #8]
    ff1c:	subs	r3, r3, r2
    ff1e:	str	r3, [r4, #8]
    ff20:	ldr	r3, [r4, #0]
    ff22:	add	r3, r2
    ff24:	str	r3, [r4, #0]
    ff26:	mov	fp, r2
    ff28:	b.n	fe56 <__sfvwrite_r+0x15a>
    ff2a:	ldr	r3, [r4, #0]
    ff2c:	ldr	r1, [r4, #16]
    ff2e:	sub.w	fp, r3, r1
    ff32:	ldr	r3, [r4, #20]
    ff34:	add.w	sl, r3, r3, lsl #1
    ff38:	add.w	sl, sl, sl, lsr #31
    ff3c:	add.w	r3, fp, #1
    ff40:	mov.w	sl, sl, asr #1
    ff44:	add	r3, r6
    ff46:	cmp	r3, sl
    ff48:	mov	r2, sl
    ff4a:	itt	hi
    ff4c:	movhi	sl, r3
    ff4e:	movhi	r2, sl
    ff50:	lsls	r3, r0, #21
    ff52:	bpl.n	ffae <__sfvwrite_r+0x2b2>
    ff54:	mov	r1, r2
    ff56:	mov	r0, r8
    ff58:	bl	a1a0 <_malloc_r>
    ff5c:	cmp	r0, #0
    ff5e:	beq.n	ffd8 <__sfvwrite_r+0x2dc>
    ff60:	mov	r2, fp
    ff62:	ldr	r1, [r4, #16]
    ff64:	str	r0, [sp, #4]
    ff66:	bl	756c <memcpy>
    ff6a:	ldrh	r2, [r4, #12]
    ff6c:	ldr	r3, [sp, #4]
    ff6e:	bic.w	r2, r2, #1152	; 0x480
    ff72:	orr.w	r2, r2, #128	; 0x80
    ff76:	strh	r2, [r4, #12]
    ff78:	add.w	r0, r3, fp
    ff7c:	str	r3, [r4, #16]
    ff7e:	sub.w	r3, sl, fp
    ff82:	str.w	sl, [r4, #20]
    ff86:	str	r3, [r4, #8]
    ff88:	str	r0, [r4, #0]
    ff8a:	mov	fp, r6
    ff8c:	mov	r2, r6
    ff8e:	b.n	fdaa <__sfvwrite_r+0xae>
    ff90:	mov	r1, r7
    ff92:	mov	r2, fp
    ff94:	bl	ae7c <memmove>
    ff98:	ldr	r3, [r4, #0]
    ff9a:	add	r3, fp
    ff9c:	str	r3, [r4, #0]
    ff9e:	mov	r1, r4
    ffa0:	mov	r0, r8
    ffa2:	bl	db4c <_fflush_r>
    ffa6:	cmp	r0, #0
    ffa8:	beq.w	fe56 <__sfvwrite_r+0x15a>
    ffac:	b.n	fdfa <__sfvwrite_r+0xfe>
    ffae:	mov	r0, r8
    ffb0:	bl	a718 <_realloc_r>
    ffb4:	mov	r3, r0
    ffb6:	cmp	r0, #0
    ffb8:	bne.n	ff78 <__sfvwrite_r+0x27c>
    ffba:	ldr	r1, [r4, #16]
    ffbc:	mov	r0, r8
    ffbe:	bl	b444 <_free_r>
    ffc2:	ldrsh.w	r3, [r4, #12]
    ffc6:	movs	r2, #12
    ffc8:	bic.w	r3, r3, #128	; 0x80
    ffcc:	str.w	r2, [r8]
    ffd0:	b.n	fdfe <__sfvwrite_r+0x102>
    ffd2:	adds	r2, r6, #1
    ffd4:	mov	r9, r2
    ffd6:	b.n	fe26 <__sfvwrite_r+0x12a>
    ffd8:	movs	r2, #12
    ffda:	ldrsh.w	r3, [r4, #12]
    ffde:	str.w	r2, [r8]
    ffe2:	b.n	fdfe <__sfvwrite_r+0x102>
    ffe4:	mov.w	r0, #4294967295
    ffe8:	b.n	fd60 <__sfvwrite_r+0x64>
    ffea:	nop
    ffec:	.word	0x7ffffc00

0000fff0 <__swsetup_r>:
    fff0:	push	{r3, r4, r5, lr}
    fff2:	ldr	r3, [pc, #196]	; (100b8 <__swsetup_r+0xc8>)
    fff4:	ldr	r3, [r3, #0]
    fff6:	mov	r5, r0
    fff8:	mov	r4, r1
    fffa:	cbz	r3, 10002 <__swsetup_r+0x12>
    fffc:	ldr	r2, [r3, #52]	; 0x34
    fffe:	cmp	r2, #0
   10000:	beq.n	100a0 <__swsetup_r+0xb0>
   10002:	ldrsh.w	r3, [r4, #12]
   10006:	lsls	r0, r3, #28
   10008:	uxth	r2, r3
   1000a:	bpl.n	10046 <__swsetup_r+0x56>
   1000c:	ldr	r1, [r4, #16]
   1000e:	cbz	r1, 1005c <__swsetup_r+0x6c>
   10010:	ands.w	r0, r2, #1
   10014:	beq.n	10026 <__swsetup_r+0x36>
   10016:	movs	r0, #0
   10018:	str	r0, [r4, #8]
   1001a:	ldr	r0, [r4, #20]
   1001c:	negs	r0, r0
   1001e:	str	r0, [r4, #24]
   10020:	cbz	r1, 10032 <__swsetup_r+0x42>
   10022:	movs	r0, #0
   10024:	pop	{r3, r4, r5, pc}
   10026:	lsls	r5, r2, #30
   10028:	it	pl
   1002a:	ldrpl	r0, [r4, #20]
   1002c:	str	r0, [r4, #8]
   1002e:	cmp	r1, #0
   10030:	bne.n	10022 <__swsetup_r+0x32>
   10032:	lsls	r2, r2, #24
   10034:	it	pl
   10036:	movpl	r0, r1
   10038:	bpl.n	10024 <__swsetup_r+0x34>
   1003a:	orr.w	r3, r3, #64	; 0x40
   1003e:	strh	r3, [r4, #12]
   10040:	mov.w	r0, #4294967295
   10044:	pop	{r3, r4, r5, pc}
   10046:	lsls	r1, r2, #27
   10048:	bpl.n	100a8 <__swsetup_r+0xb8>
   1004a:	lsls	r2, r2, #29
   1004c:	bmi.n	10078 <__swsetup_r+0x88>
   1004e:	ldr	r1, [r4, #16]
   10050:	orr.w	r3, r3, #8
   10054:	strh	r3, [r4, #12]
   10056:	uxth	r2, r3
   10058:	cmp	r1, #0
   1005a:	bne.n	10010 <__swsetup_r+0x20>
   1005c:	and.w	r0, r2, #640	; 0x280
   10060:	cmp.w	r0, #512	; 0x200
   10064:	beq.n	10010 <__swsetup_r+0x20>
   10066:	mov	r1, r4
   10068:	mov	r0, r5
   1006a:	bl	102fc <__smakebuf_r>
   1006e:	ldrsh.w	r3, [r4, #12]
   10072:	ldr	r1, [r4, #16]
   10074:	uxth	r2, r3
   10076:	b.n	10010 <__swsetup_r+0x20>
   10078:	ldr	r1, [r4, #48]	; 0x30
   1007a:	cbz	r1, 10092 <__swsetup_r+0xa2>
   1007c:	add.w	r2, r4, #64	; 0x40
   10080:	cmp	r1, r2
   10082:	beq.n	1008e <__swsetup_r+0x9e>
   10084:	mov	r0, r5
   10086:	bl	b444 <_free_r>
   1008a:	ldrsh.w	r3, [r4, #12]
   1008e:	movs	r2, #0
   10090:	str	r2, [r4, #48]	; 0x30
   10092:	ldr	r1, [r4, #16]
   10094:	movs	r2, #0
   10096:	strd	r1, r2, [r4]
   1009a:	bic.w	r3, r3, #36	; 0x24
   1009e:	b.n	10050 <__swsetup_r+0x60>
   100a0:	mov	r0, r3
   100a2:	bl	ac28 <__sinit>
   100a6:	b.n	10002 <__swsetup_r+0x12>
   100a8:	movs	r2, #9
   100aa:	orr.w	r3, r3, #64	; 0x40
   100ae:	str	r2, [r5, #0]
   100b0:	mov.w	r0, #4294967295
   100b4:	strh	r3, [r4, #12]
   100b6:	pop	{r3, r4, r5, pc}
   100b8:	.word	0x2000217c

000100bc <__fputwc>:
   100bc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   100c0:	sub	sp, #8
   100c2:	mov	sl, r0
   100c4:	mov	r8, r1
   100c6:	mov	r4, r2
   100c8:	bl	b064 <__locale_mb_cur_max>
   100cc:	cmp	r0, #1
   100ce:	bne.n	100d8 <__fputwc+0x1c>
   100d0:	add.w	r3, r8, #4294967295
   100d4:	cmp	r3, #254	; 0xfe
   100d6:	bls.n	10146 <__fputwc+0x8a>
   100d8:	add.w	r9, sp, #4
   100dc:	mov	r2, r8
   100de:	add.w	r3, r4, #92	; 0x5c
   100e2:	mov	r1, r9
   100e4:	mov	r0, sl
   100e6:	bl	eaec <_wcrtomb_r>
   100ea:	adds	r2, r0, #1
   100ec:	mov	r6, r0
   100ee:	beq.n	10156 <__fputwc+0x9a>
   100f0:	cbz	r0, 1013c <__fputwc+0x80>
   100f2:	ldrb.w	ip, [sp, #4]
   100f6:	movs	r5, #0
   100f8:	b.n	1010e <__fputwc+0x52>
   100fa:	ldr	r3, [r4, #0]
   100fc:	adds	r2, r3, #1
   100fe:	str	r2, [r4, #0]
   10100:	strb.w	ip, [r3]
   10104:	adds	r5, #1
   10106:	cmp	r5, r6
   10108:	bcs.n	1013c <__fputwc+0x80>
   1010a:	ldrb.w	ip, [r9, #1]!
   1010e:	ldr	r3, [r4, #8]
   10110:	subs	r3, #1
   10112:	cmp	r3, #0
   10114:	str	r3, [r4, #8]
   10116:	bge.n	100fa <__fputwc+0x3e>
   10118:	ldr	r7, [r4, #24]
   1011a:	cmp	r3, r7
   1011c:	mov	r1, ip
   1011e:	mov	r2, r4
   10120:	mov	r0, sl
   10122:	blt.n	1012a <__fputwc+0x6e>
   10124:	cmp.w	ip, #10
   10128:	bne.n	100fa <__fputwc+0x3e>
   1012a:	bl	103d4 <__swbuf_r>
   1012e:	adds	r3, r0, #1
   10130:	bne.n	10104 <__fputwc+0x48>
   10132:	mov	r6, r0
   10134:	mov	r0, r6
   10136:	add	sp, #8
   10138:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1013c:	mov	r6, r8
   1013e:	mov	r0, r6
   10140:	add	sp, #8
   10142:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10146:	uxtb.w	ip, r8
   1014a:	strb.w	ip, [sp, #4]
   1014e:	mov	r6, r0
   10150:	add.w	r9, sp, #4
   10154:	b.n	100f6 <__fputwc+0x3a>
   10156:	ldrh	r3, [r4, #12]
   10158:	mov	r0, r6
   1015a:	orr.w	r3, r3, #64	; 0x40
   1015e:	strh	r3, [r4, #12]
   10160:	add	sp, #8
   10162:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10166:	nop

00010168 <_fputwc_r>:
   10168:	push	{r4, r5, lr}
   1016a:	ldr	r3, [r2, #100]	; 0x64
   1016c:	tst.w	r3, #1
   10170:	ldrsh.w	r3, [r2, #12]
   10174:	mov	r4, r2
   10176:	sub	sp, #12
   10178:	mov	r5, r0
   1017a:	uxth	r2, r3
   1017c:	bne.n	10182 <_fputwc_r+0x1a>
   1017e:	lsls	r0, r3, #22
   10180:	bpl.n	101bc <_fputwc_r+0x54>
   10182:	lsls	r0, r2, #18
   10184:	bmi.n	10194 <_fputwc_r+0x2c>
   10186:	ldr	r2, [r4, #100]	; 0x64
   10188:	orr.w	r3, r3, #8192	; 0x2000
   1018c:	orr.w	r2, r2, #8192	; 0x2000
   10190:	strh	r3, [r4, #12]
   10192:	str	r2, [r4, #100]	; 0x64
   10194:	mov	r2, r4
   10196:	mov	r0, r5
   10198:	bl	100bc <__fputwc>
   1019c:	ldr	r3, [r4, #100]	; 0x64
   1019e:	lsls	r2, r3, #31
   101a0:	mov	r5, r0
   101a2:	bmi.n	101aa <_fputwc_r+0x42>
   101a4:	ldrh	r3, [r4, #12]
   101a6:	lsls	r3, r3, #22
   101a8:	bpl.n	101b0 <_fputwc_r+0x48>
   101aa:	mov	r0, r5
   101ac:	add	sp, #12
   101ae:	pop	{r4, r5, pc}
   101b0:	ldr	r0, [r4, #88]	; 0x58
   101b2:	bl	b19c <__retarget_lock_release_recursive>
   101b6:	mov	r0, r5
   101b8:	add	sp, #12
   101ba:	pop	{r4, r5, pc}
   101bc:	ldr	r0, [r4, #88]	; 0x58
   101be:	str	r1, [sp, #4]
   101c0:	bl	b198 <__retarget_lock_acquire_recursive>
   101c4:	ldrsh.w	r3, [r4, #12]
   101c8:	ldr	r1, [sp, #4]
   101ca:	uxth	r2, r3
   101cc:	b.n	10182 <_fputwc_r+0x1a>
   101ce:	nop

000101d0 <_wcsnrtombs_l>:
   101d0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   101d4:	sub	sp, #44	; 0x2c
   101d6:	ldrd	r8, sl, [sp, #84]	; 0x54
   101da:	ldr	r7, [sp, #80]	; 0x50
   101dc:	str	r1, [sp, #12]
   101de:	mov	r9, r0
   101e0:	str	r2, [sp, #20]
   101e2:	mov	r6, r3
   101e4:	cmp.w	r8, #0
   101e8:	beq.n	102a4 <_wcsnrtombs_l+0xd4>
   101ea:	ldr	r3, [sp, #12]
   101ec:	cmp	r3, #0
   101ee:	beq.n	102ae <_wcsnrtombs_l+0xde>
   101f0:	ldr	r3, [sp, #20]
   101f2:	ldr	r5, [r3, #0]
   101f4:	cmp	r7, #0
   101f6:	beq.n	102ce <_wcsnrtombs_l+0xfe>
   101f8:	subs	r4, r6, #1
   101fa:	cbz	r6, 10250 <_wcsnrtombs_l+0x80>
   101fc:	ldr	r3, [sp, #12]
   101fe:	str	r3, [sp, #16]
   10200:	subs	r5, #4
   10202:	movs	r6, #0
   10204:	str	r5, [sp, #4]
   10206:	b.n	10220 <_wcsnrtombs_l+0x50>
   10208:	ldr	r3, [sp, #12]
   1020a:	cbnz	r3, 10258 <_wcsnrtombs_l+0x88>
   1020c:	ldr	r3, [sp, #4]
   1020e:	ldr	r2, [r3, #0]
   10210:	cmp	r2, #0
   10212:	beq.n	1028a <_wcsnrtombs_l+0xba>
   10214:	cmp	ip, r7
   10216:	bcs.n	102d2 <_wcsnrtombs_l+0x102>
   10218:	subs	r4, #1
   1021a:	adds	r3, r4, #1
   1021c:	mov	r6, ip
   1021e:	beq.n	10250 <_wcsnrtombs_l+0x80>
   10220:	ldr.w	r3, [r8]
   10224:	str	r3, [sp, #8]
   10226:	ldr	r3, [sp, #4]
   10228:	ldr.w	r5, [sl, #224]	; 0xe0
   1022c:	ldr.w	r2, [r3, #4]!
   10230:	str	r3, [sp, #4]
   10232:	add	r1, sp, #28
   10234:	mov	r3, r8
   10236:	mov	r0, r9
   10238:	ldr.w	fp, [r8, #4]
   1023c:	blx	r5
   1023e:	adds	r2, r0, #1
   10240:	beq.n	102b8 <_wcsnrtombs_l+0xe8>
   10242:	add.w	ip, r0, r6
   10246:	cmp	ip, r7
   10248:	bls.n	10208 <_wcsnrtombs_l+0x38>
   1024a:	ldr	r3, [sp, #8]
   1024c:	strd	r3, fp, [r8]
   10250:	mov	r0, r6
   10252:	add	sp, #44	; 0x2c
   10254:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10258:	cmp	r0, #0
   1025a:	ble.n	1027a <_wcsnrtombs_l+0xaa>
   1025c:	ldr	r3, [sp, #16]
   1025e:	ldr	r5, [sp, #4]
   10260:	add	r0, r3
   10262:	subs	r2, r3, #1
   10264:	add	r1, sp, #28
   10266:	add.w	lr, r0, #4294967295
   1026a:	ldrb.w	r3, [r1], #1
   1026e:	strb.w	r3, [r2, #1]!
   10272:	cmp	r2, lr
   10274:	bne.n	1026a <_wcsnrtombs_l+0x9a>
   10276:	str	r5, [sp, #4]
   10278:	str	r0, [sp, #16]
   1027a:	ldr	r3, [sp, #20]
   1027c:	ldr	r2, [r3, #0]
   1027e:	adds	r2, #4
   10280:	str	r2, [r3, #0]
   10282:	ldr	r3, [sp, #4]
   10284:	ldr	r2, [r3, #0]
   10286:	cmp	r2, #0
   10288:	bne.n	10214 <_wcsnrtombs_l+0x44>
   1028a:	ldr	r3, [sp, #12]
   1028c:	cbz	r3, 10292 <_wcsnrtombs_l+0xc2>
   1028e:	ldr	r3, [sp, #20]
   10290:	str	r2, [r3, #0]
   10292:	add.w	r6, ip, #4294967295
   10296:	movs	r2, #0
   10298:	mov	r0, r6
   1029a:	str.w	r2, [r8]
   1029e:	add	sp, #44	; 0x2c
   102a0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   102a4:	ldr	r3, [sp, #12]
   102a6:	add.w	r8, r0, #268	; 0x10c
   102aa:	cmp	r3, #0
   102ac:	bne.n	101f0 <_wcsnrtombs_l+0x20>
   102ae:	ldr	r3, [sp, #20]
   102b0:	mov.w	r7, #4294967295
   102b4:	ldr	r5, [r3, #0]
   102b6:	b.n	101f8 <_wcsnrtombs_l+0x28>
   102b8:	mov	r6, r0
   102ba:	movs	r1, #138	; 0x8a
   102bc:	movs	r2, #0
   102be:	mov	r0, r6
   102c0:	str.w	r1, [r9]
   102c4:	str.w	r2, [r8]
   102c8:	add	sp, #44	; 0x2c
   102ca:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   102ce:	mov	r6, r7
   102d0:	b.n	10250 <_wcsnrtombs_l+0x80>
   102d2:	mov	r6, ip
   102d4:	b.n	10250 <_wcsnrtombs_l+0x80>
   102d6:	nop

000102d8 <_wcsnrtombs_r>:
   102d8:	push	{r4, lr}
   102da:	sub	sp, #16
   102dc:	ldr	r4, [pc, #20]	; (102f4 <_wcsnrtombs_r+0x1c>)
   102de:	ldr	r0, [sp, #24]
   102e0:	str	r0, [sp, #0]
   102e2:	ldr	r0, [sp, #28]
   102e4:	str	r0, [sp, #4]
   102e6:	ldr	r0, [pc, #16]	; (102f8 <_wcsnrtombs_r+0x20>)
   102e8:	ldr	r0, [r0, #0]
   102ea:	str	r4, [sp, #8]
   102ec:	bl	101d0 <_wcsnrtombs_l>
   102f0:	add	sp, #16
   102f2:	pop	{r4, pc}
   102f4:	.word	0x20001bf4
   102f8:	.word	0x2000217c

000102fc <__smakebuf_r>:
   102fc:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10300:	ldrh	r3, [r1, #12]
   10302:	mov	r4, r1
   10304:	lsls	r1, r3, #30
   10306:	sub	sp, #88	; 0x58
   10308:	bpl.n	1031c <__smakebuf_r+0x20>
   1030a:	add.w	r3, r4, #67	; 0x43
   1030e:	movs	r2, #1
   10310:	strd	r3, r2, [r4, #16]
   10314:	str	r3, [r4, #0]
   10316:	add	sp, #88	; 0x58
   10318:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1031c:	ldrsh.w	r1, [r4, #14]
   10320:	cmp	r1, #0
   10322:	mov	r6, r0
   10324:	blt.n	10372 <__smakebuf_r+0x76>
   10326:	mov	r2, sp
   10328:	bl	10484 <_fstat_r>
   1032c:	cmp	r0, #0
   1032e:	blt.n	10370 <__smakebuf_r+0x74>
   10330:	ldr	r5, [sp, #4]
   10332:	and.w	r5, r5, #61440	; 0xf000
   10336:	sub.w	r5, r5, #8192	; 0x2000
   1033a:	clz	r5, r5
   1033e:	mov.w	r8, #1024	; 0x400
   10342:	lsrs	r5, r5, #5
   10344:	mov.w	r7, #2048	; 0x800
   10348:	mov	r1, r8
   1034a:	mov	r0, r6
   1034c:	bl	a1a0 <_malloc_r>
   10350:	cbz	r0, 1038c <__smakebuf_r+0x90>
   10352:	ldrsh.w	r3, [r4, #12]
   10356:	str.w	r8, [r4, #20]
   1035a:	orr.w	r3, r3, #128	; 0x80
   1035e:	str	r0, [r4, #0]
   10360:	str	r0, [r4, #16]
   10362:	strh	r3, [r4, #12]
   10364:	cbnz	r5, 103b4 <__smakebuf_r+0xb8>
   10366:	orrs	r3, r7
   10368:	strh	r3, [r4, #12]
   1036a:	add	sp, #88	; 0x58
   1036c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10370:	ldrh	r3, [r4, #12]
   10372:	ands.w	r5, r3, #128	; 0x80
   10376:	beq.n	103ac <__smakebuf_r+0xb0>
   10378:	mov.w	r8, #64	; 0x40
   1037c:	movs	r5, #0
   1037e:	mov	r1, r8
   10380:	mov	r0, r6
   10382:	mov	r7, r5
   10384:	bl	a1a0 <_malloc_r>
   10388:	cmp	r0, #0
   1038a:	bne.n	10352 <__smakebuf_r+0x56>
   1038c:	ldrsh.w	r3, [r4, #12]
   10390:	lsls	r2, r3, #22
   10392:	bmi.n	10316 <__smakebuf_r+0x1a>
   10394:	bic.w	r3, r3, #3
   10398:	add.w	r2, r4, #67	; 0x43
   1039c:	orr.w	r3, r3, #2
   103a0:	movs	r1, #1
   103a2:	strd	r2, r1, [r4, #16]
   103a6:	strh	r3, [r4, #12]
   103a8:	str	r2, [r4, #0]
   103aa:	b.n	10316 <__smakebuf_r+0x1a>
   103ac:	mov.w	r8, #1024	; 0x400
   103b0:	mov	r7, r5
   103b2:	b.n	10348 <__smakebuf_r+0x4c>
   103b4:	ldrsh.w	r1, [r4, #14]
   103b8:	mov	r0, r6
   103ba:	bl	104b0 <_isatty_r>
   103be:	cbnz	r0, 103c6 <__smakebuf_r+0xca>
   103c0:	ldrsh.w	r3, [r4, #12]
   103c4:	b.n	10366 <__smakebuf_r+0x6a>
   103c6:	ldrh	r3, [r4, #12]
   103c8:	bic.w	r3, r3, #3
   103cc:	orr.w	r3, r3, #1
   103d0:	sxth	r3, r3
   103d2:	b.n	10366 <__smakebuf_r+0x6a>

000103d4 <__swbuf_r>:
   103d4:	push	{r3, r4, r5, r6, r7, lr}
   103d6:	mov	r5, r1
   103d8:	mov	r4, r2
   103da:	mov	r6, r0
   103dc:	cbz	r0, 103e4 <__swbuf_r+0x10>
   103de:	ldr	r3, [r0, #52]	; 0x34
   103e0:	cmp	r3, #0
   103e2:	beq.n	1047e <__swbuf_r+0xaa>
   103e4:	ldrsh.w	r2, [r4, #12]
   103e8:	ldr	r3, [r4, #24]
   103ea:	str	r3, [r4, #8]
   103ec:	lsls	r7, r2, #28
   103ee:	uxth	r0, r2
   103f0:	bpl.n	1042a <__swbuf_r+0x56>
   103f2:	ldr	r3, [r4, #16]
   103f4:	cbz	r3, 1042a <__swbuf_r+0x56>
   103f6:	uxtb	r5, r5
   103f8:	lsls	r1, r0, #18
   103fa:	mov	r7, r5
   103fc:	bpl.n	10444 <__swbuf_r+0x70>
   103fe:	ldr	r2, [r4, #0]
   10400:	ldr	r1, [r4, #20]
   10402:	subs	r3, r2, r3
   10404:	cmp	r1, r3
   10406:	ble.n	1045c <__swbuf_r+0x88>
   10408:	adds	r3, #1
   1040a:	ldr	r1, [r4, #8]
   1040c:	subs	r1, #1
   1040e:	str	r1, [r4, #8]
   10410:	adds	r1, r2, #1
   10412:	str	r1, [r4, #0]
   10414:	strb	r5, [r2, #0]
   10416:	ldr	r2, [r4, #20]
   10418:	cmp	r2, r3
   1041a:	beq.n	1046c <__swbuf_r+0x98>
   1041c:	ldrh	r3, [r4, #12]
   1041e:	lsls	r3, r3, #31
   10420:	bpl.n	10426 <__swbuf_r+0x52>
   10422:	cmp	r5, #10
   10424:	beq.n	1046c <__swbuf_r+0x98>
   10426:	mov	r0, r7
   10428:	pop	{r3, r4, r5, r6, r7, pc}
   1042a:	mov	r1, r4
   1042c:	mov	r0, r6
   1042e:	bl	fff0 <__swsetup_r>
   10432:	cbnz	r0, 10478 <__swbuf_r+0xa4>
   10434:	ldrsh.w	r2, [r4, #12]
   10438:	ldr	r3, [r4, #16]
   1043a:	uxth	r0, r2
   1043c:	uxtb	r5, r5
   1043e:	lsls	r1, r0, #18
   10440:	mov	r7, r5
   10442:	bmi.n	103fe <__swbuf_r+0x2a>
   10444:	orr.w	r2, r2, #8192	; 0x2000
   10448:	strh	r2, [r4, #12]
   1044a:	ldr	r2, [r4, #100]	; 0x64
   1044c:	ldr	r1, [r4, #20]
   1044e:	bic.w	r2, r2, #8192	; 0x2000
   10452:	str	r2, [r4, #100]	; 0x64
   10454:	ldr	r2, [r4, #0]
   10456:	subs	r3, r2, r3
   10458:	cmp	r1, r3
   1045a:	bgt.n	10408 <__swbuf_r+0x34>
   1045c:	mov	r1, r4
   1045e:	mov	r0, r6
   10460:	bl	db4c <_fflush_r>
   10464:	cbnz	r0, 10478 <__swbuf_r+0xa4>
   10466:	ldr	r2, [r4, #0]
   10468:	movs	r3, #1
   1046a:	b.n	1040a <__swbuf_r+0x36>
   1046c:	mov	r1, r4
   1046e:	mov	r0, r6
   10470:	bl	db4c <_fflush_r>
   10474:	cmp	r0, #0
   10476:	beq.n	10426 <__swbuf_r+0x52>
   10478:	mov.w	r7, #4294967295
   1047c:	b.n	10426 <__swbuf_r+0x52>
   1047e:	bl	ac28 <__sinit>
   10482:	b.n	103e4 <__swbuf_r+0x10>

00010484 <_fstat_r>:
   10484:	push	{r4, r5, r6, lr}
   10486:	mov	r4, r1
   10488:	ldr	r5, [pc, #32]	; (104ac <_fstat_r+0x28>)
   1048a:	mov	r3, r0
   1048c:	movs	r6, #0
   1048e:	mov	r0, r4
   10490:	mov	r1, r2
   10492:	mov	r4, r3
   10494:	str	r6, [r5, #0]
   10496:	bl	8af2 <_fstat>
   1049a:	adds	r3, r0, #1
   1049c:	beq.n	104a0 <_fstat_r+0x1c>
   1049e:	pop	{r4, r5, r6, pc}
   104a0:	ldr	r3, [r5, #0]
   104a2:	cmp	r3, #0
   104a4:	beq.n	1049e <_fstat_r+0x1a>
   104a6:	str	r3, [r4, #0]
   104a8:	pop	{r4, r5, r6, pc}
   104aa:	nop
   104ac:	.word	0x20006cdc

000104b0 <_isatty_r>:
   104b0:	push	{r3, r4, r5, lr}
   104b2:	ldr	r5, [pc, #28]	; (104d0 <_isatty_r+0x20>)
   104b4:	movs	r2, #0
   104b6:	mov	r4, r0
   104b8:	mov	r0, r1
   104ba:	str	r2, [r5, #0]
   104bc:	bl	8afc <_isatty>
   104c0:	adds	r3, r0, #1
   104c2:	beq.n	104c6 <_isatty_r+0x16>
   104c4:	pop	{r3, r4, r5, pc}
   104c6:	ldr	r3, [r5, #0]
   104c8:	cmp	r3, #0
   104ca:	beq.n	104c4 <_isatty_r+0x14>
   104cc:	str	r3, [r4, #0]
   104ce:	pop	{r3, r4, r5, pc}
   104d0:	.word	0x20006cdc
   104d4:	.word	0x00000000

000104d8 <___init_veneer>:
   104d8:	ldr.w	pc, [pc]	; 104dc <___init_veneer+0x4>
   104dc:	.word	0x60002345

000104e0 <___ZN16CrashReportClasscvbEv_veneer>:
   104e0:	ldr.w	pc, [pc]	; 104e4 <___ZN16CrashReportClasscvbEv_veneer+0x4>
   104e4:	.word	0x60002253

000104e8 <___ZNK16CrashReportClass7printToER5Print_veneer>:
   104e8:	ldr.w	pc, [pc]	; 104ec <___ZNK16CrashReportClass7printToER5Print_veneer+0x4>
   104ec:	.word	0x60001d99

000104f0 <___Z14set_audioClockilm_veneer>:
   104f0:	ldr.w	pc, [pc]	; 104f4 <___Z14set_audioClockilm_veneer+0x4>
   104f4:	.word	0x60001635

000104f8 <___ZN11AudioStream17initialize_memoryEP18audio_block_structj_veneer>:
   104f8:	ldr.w	pc, [pc]	; 104fc <___ZN11AudioStream17initialize_memoryEP18audio_block_structj_veneer+0x4>
   104fc:	.word	0x60002261

00010500 <___reboot_Teensyduino__veneer>:
   10500:	ldr.w	pc, [pc]	; 10504 <___reboot_Teensyduino__veneer+0x4>
   10504:	.word	0x60001761
	...

Disassembly of section .fini:

00010510 <_fini>:
   10510:	push	{r3, r4, r5, r6, r7, lr}
   10512:	nop

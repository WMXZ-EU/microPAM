
.vsteensy/build/microPAM_T41.elf:     file format elf32-littlearm

SYMBOL TABLE:
60000000 l    d  .text.headers	00000000 .text.headers
60001400 l    d  .text.code	00000000 .text.code
60001f8c l    d  .text.progmem	00000000 .text.progmem
00000000 l    d  .text.itcm	00000000 .text.itcm
000136b0 l    d  .fini	00000000 .fini
000136b4 l    d  .ARM.exidx	00000000 .ARM.exidx
20000000 l    d  .data	00000000 .data
20001ec0 l    d  .bss	00000000 .bss
20200000 l    d  .bss.dma	00000000 .bss.dma
70000000 l    d  .bss.extram	00000000 .bss.extram
600178f4 l    d  .text.csf	00000000 .text.csf
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_loclists	00000000 .debug_loclists
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_rnglists	00000000 .debug_rnglists
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 l    df *ABS*	00000000 bootdata.c
00000000 l    df *ABS*	00000000 startup.c
60001400 l     F .text.code	00000016 memory_copy
60001418 l     F .text.code	00000010 memory_clear
00000000 l    df *ABS*	00000000 usb.c
0000ac28 l     F .text.itcm	000000c8 endpoint0_receive
0000acf0 l     F .text.itcm	00000088 schedule_transfer
0000ad78 l     F .text.itcm	00000036 run_callbacks
0000adb0 l     F .text.itcm	00000098 endpoint0_transmit.constprop.0
2000738c l     O .bss	00000008 endpoint0_buffer
20007394 l     O .bss	00000004 endpoint0_notify_mask
200052f8 l     O .bss	00000008 endpoint0_setupdata
20007398 l     O .bss	00000004 endpointN_notify_mask
20007a78 l     O .bss	00000008 reply_buffer
20007b69 l     O .bss	00000001 sof_usage
20007b77 l     O .bss	00000001 usb_reboot_timer
00000000 l    df *ABS*	00000000 tempmon.c
20007ad4 l     O .bss	00000004 s_hotCount
20007ad8 l     O .bss	00000004 s_hotTemp
20007adc l     O .bss	00000004 s_hot_ROOM
20007ae0 l     O .bss	00000004 s_roomC_hotC
00000000 l    df *ABS*	00000000 audiostream.cpp
00000000 l    df *ABS*	00000000 analog.c
20007b63 l     O .bss	00000001 calibrating
00000000 l    df *ABS*	00000000 crti.o
00000000 l    df *ABS*	00000000 crtn.o
00000000 l    df *ABS*	00000000 crtstuff.c
00000020 l     F .text.itcm	00000000 register_tm_clones
00000044 l     F .text.itcm	00000000 frame_dummy
2000764c l     O .bss	00000000 object.0
60001f10 l     O .text.code	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 main.cpp
000011fc l     F .text.itcm	00000654 storeData(int) [clone .part.0]
20200000 l     O .bss.dma	00003cf0 setup::data
00001a48 l     F .text.itcm	000001c4 _GLOBAL__sub_I_DirPrefix
20005c8c l     O .bss	00000400 i2s_rx_buffer_32
2000608c l     O .bss	00000100 dout
200061fc l     O .bss	00000100 outData
200062fc l     O .bss	00000100 tempData
200065d4 l     O .bss	00000004 loop::ic
200065d8 l     O .bss	00000004 loop::t0
20007b44 l     O .bss	00000002 loop::status
200065dc l     O .bss	00000004 AudioCompress::compress(void*)::nout
00000000 l    df *ABS*	00000000 output_i2s_oct.cpp
00001c0c l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN17AudioOutputI2SOct13block_ch1_1stE
00000000 l    df *ABS*	00000000 output_pwm.cpp
00001c24 l     F .text.itcm	0000001c __tcf_0
00001c40 l     F .text.itcm	00000030 _GLOBAL__sub_I__ZN14AudioOutputPWM21update_responsibilityE
00000000 l    df *ABS*	00000000 input_i2s.cpp
00001c70 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE
00000000 l    df *ABS*	00000000 output_pt8211_2.cpp
00001c88 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN19AudioOutputPT8211_214block_left_1stE
00000000 l    df *ABS*	00000000 output_pt8211.cpp
00001ca0 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE
00000000 l    df *ABS*	00000000 input_spdif3.cpp
00001cb8 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN16AudioInputSPDIF310block_leftE
00000000 l    df *ABS*	00000000 input_tdm2.cpp
00001cd0 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN14AudioInputTDM214block_incomingE
00000000 l    df *ABS*	00000000 input_adc.cpp
00001ce8 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN16AudioInputAnalog3dmaE
00000000 l    df *ABS*	00000000 input_pdm_i2s2.cpp
00001d00 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN14AudioInputPDM210block_leftE
00000000 l    df *ABS*	00000000 input_i2s2.cpp
00001d18 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN14AudioInputI2S210block_leftE
00000000 l    df *ABS*	00000000 input_i2s_quad.cpp
00001d30 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E
00000000 l    df *ABS*	00000000 output_i2s_quad.cpp
00001d48 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE
00000000 l    df *ABS*	00000000 output_tdm2.cpp
00001e70 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN15AudioOutputTDM211block_inputE
00000000 l    df *ABS*	00000000 output_i2s2.cpp
00001e88 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN15AudioOutputI2S214block_left_1stE
00000000 l    df *ABS*	00000000 output_i2s_hex.cpp
00001ea0 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN17AudioOutputI2SHex13block_ch1_1stE
00000000 l    df *ABS*	00000000 input_i2s_oct.cpp
00001eb8 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E
00000000 l    df *ABS*	00000000 output_tdm.cpp
00001ed0 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE
00000000 l    df *ABS*	00000000 input_tdm.cpp
00001ee8 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE
00000000 l    df *ABS*	00000000 input_i2s_hex.cpp
00001f00 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E
00000000 l    df *ABS*	00000000 output_spdif3.cpp
00001f18 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN17AudioOutputSPDIF314block_left_1stE
00000000 l    df *ABS*	00000000 output_mqs.cpp
00001f30 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN14AudioOutputMQS14block_left_1stE
00000000 l    df *ABS*	00000000 async_input_spdif3.cpp
0000203c l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN21AsyncAudioInputSPDIF310microsLastE
00000000 l    df *ABS*	00000000 input_pdm.cpp
00002054 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE
00000000 l    df *ABS*	00000000 output_i2s.cpp
0000206c l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE
00000000 l    df *ABS*	00000000 output_spdif2.cpp
00002084 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN17AudioOutputSPDIF214block_left_1stE
00000000 l    df *ABS*	00000000 output_spdif.cpp
0000209c l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE
00000000 l    df *ABS*	00000000 wireimxrt.cpp
00002410 l     F .text.itcm	00000044 _GLOBAL__sub_I__ZN7TwoWire5beginEv
00000000 l    df *ABS*	00000000 spi.cpp
0000246c l     F .text.itcm	00000060 SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]
00002934 l     F .text.itcm	00000048 _GLOBAL__sub_I__ZN8SPIClass5beginEv
00000000 l    df *ABS*	00000000 sd.cpp
00003048 l     F .text.itcm	0000008c _GLOBAL__sub_I_SD
00000000 l    df *ABS*	00000000 usb_desc.c
20001a14 l     O .data	00000012 device_descriptor
6000236c l     O .text.progmem	0000000a qualifier_descriptor
00000000 l    df *ABS*	00000000 serialevent.cpp
00000000 l    df *ABS*	00000000 effect_delay_ext.cpp
00000000 l    df *ABS*	00000000 record_queue.cpp
00000000 l    df *ABS*	00000000 time.cpp
20000764 l     O .data	0000000c monthDays
00000000 l    df *ABS*	00000000 fsstructs.cpp
00000000 l    df *ABS*	00000000 fscache.cpp
00000000 l    df *ABS*	00000000 upcase.cpp
20000564 l     O .data	0000012c lookupTable
20000690 l     O .data	000000d4 mapTable
00000000 l    df *ABS*	00000000 fsdatetime.cpp
000032d4 l     F .text.itcm	00000014 dateTimeMs10(unsigned short*, unsigned short*, unsigned char*)
00000000 l    df *ABS*	00000000 exfatformatter.cpp
00003300 l     F .text.itcm	00000020 Print::write(char const*) [clone .isra.0]
00000000 l    df *ABS*	00000000 exfatname.cpp
00000000 l    df *ABS*	00000000 exfatfile.cpp
00000000 l    df *ABS*	00000000 exfatpartition.cpp
00000000 l    df *ABS*	00000000 exfatfilewrite.cpp
00000000 l    df *ABS*	00000000 fatformatter.cpp
00000000 l    df *ABS*	00000000 fatname.cpp
00000000 l    df *ABS*	00000000 fatfile.cpp
00005aa0 l     F .text.itcm	000000bc FatFile::sync() [clone .part.0]
00000000 l    df *ABS*	00000000 fatpartition.cpp
00006ac8 l     F .text.itcm	00000068 FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]
00006b30 l     F .text.itcm	0000005a FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]
00000000 l    df *ABS*	00000000 fatfilelfn.cpp
00000000 l    df *ABS*	00000000 fsfile.cpp
00000000 l    df *ABS*	00000000 fsvolume.cpp
00000000 l    df *ABS*	00000000 fsnew.cpp
00000000 l    df *ABS*	00000000 sdspicard.cpp
00000000 l    df *ABS*	00000000 sdioteensy.cpp
000089d0 l     F .text.itcm	00000030 sdIrs()
00008a00 l     F .text.itcm	00000014 isBusyDat()
00008a14 l     F .text.itcm	0000000c isBusyDMA()
00008a20 l     F .text.itcm	000000cc setSdclk(unsigned long)
00008c34 l     F .text.itcm	00000068 waitDmaStatus()
00008c9c l     F .text.itcm	00000088 waitTransferComplete() [clone .part.0]
00008dd8 l     F .text.itcm	00000098 cardCommand(unsigned long, unsigned long)
00008e70 l     F .text.itcm	00000060 readReg16(unsigned long, void*)
00008f6c l     F .text.itcm	0000002c isBusyCMD13()
000091ec l     F .text.itcm	0000010c rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)
20007b56 l     O .bss	00000001 m_initDone
20005c84 l     O .bss	00000004 m_sdClkKhz
20007b57 l     O .bss	00000001 m_version2
20005c88 l     O .bss	00000004 m_errorLine
20007b58 l     O .bss	00000001 m_highCapacity
20007b59 l     O .bss	00000001 m_transferActive
2000618c l     O .bss	00000010 m_cid
2000619c l     O .bss	00000010 m_csd
200061ac l     O .bss	00000004 m_ocr
200061b0 l     O .bss	00000004 m_rca
200061b4 l     O .bss	00000008 m_scr
200061bc l     O .bss	00000040 m_sds
200063fc l     O .bss	00000004 m_busyFcn
20007b5a l     O .bss	00000001 m_dmaBusy
20006400 l     O .bss	00000004 m_irqstat
20001a44 l     O .data	00000001 m_errorCode
00000000 l    df *ABS*	00000000 sdspiteensy3.cpp
00000000 l    df *ABS*	00000000 sdspichipselect.cpp
00000000 l    df *ABS*	00000000 memcpy-armv7m.o
00000000 l    df *ABS*	00000000 usb_serial.c
0000a1f8 l     F .text.itcm	00000060 rx_queue_transfer
20001f20 l     O .bss	00001000 rx_buffer
0000a258 l     F .text.itcm	000000b4 rx_event
0000a30c l     F .text.itcm	00000090 usb_serial_flush_callback
20003240 l     O .bss	00002000 txbuffer
0000a39c l     F .text.itcm	000001b8 usb_serial_write.part.0
20007a80 l     O .bss	00000004 rx_available
20007a88 l     O .bss	00000010 rx_count
20007b65 l     O .bss	00000001 rx_head
20007aa4 l     O .bss	00000010 rx_index
20007ac0 l     O .bss	00000009 rx_list
20007b4a l     O .bss	00000002 rx_packet_size
20007b67 l     O .bss	00000001 rx_tail
20002f20 l     O .bss	00000100 rx_transfer
20007b6a l     O .bss	00000001 transmit_previous_timeout
20007b4e l     O .bss	00000002 tx_available
20007b6c l     O .bss	00000001 tx_head
20007b6e l     O .bss	00000001 tx_noautoflush
20007b52 l     O .bss	00000002 tx_packet_size
20003120 l     O .bss	00000080 tx_transfer
00000000 l    df *ABS*	00000000 clockspeed.c
00000000 l    df *ABS*	00000000 delay.c
00000000 l    df *ABS*	00000000 rtc.c
00000000 l    df *ABS*	00000000 sm_pool.c
00000000 l    df *ABS*	00000000 digital.c
00000000 l    df *ABS*	00000000 pwm.c
00000000 l    df *ABS*	00000000 usb_midi.c
0000be50 l     F .text.itcm	00000060 rx_queue_transfer
0000beb0 l     F .text.itcm	00000064 rx_event
20007a84 l     O .bss	00000004 rx_available
20007a98 l     O .bss	0000000c rx_count
20007b66 l     O .bss	00000001 rx_head
20007ab4 l     O .bss	0000000c rx_index
20007acc l     O .bss	00000007 rx_list
20007b4c l     O .bss	00000002 rx_packet_size
20007b68 l     O .bss	00000001 rx_tail
20003020 l     O .bss	000000c0 rx_transfer
20007b6b l     O .bss	00000001 transmit_previous_timeout
20007b50 l     O .bss	00000002 tx_available
20007b6d l     O .bss	00000001 tx_head
20007b6f l     O .bss	00000001 tx_noautoflush
20007b54 l     O .bss	00000002 tx_packet_size
200031a0 l     O .bss	00000080 tx_transfer
20203d00 l     O .bss.dma	00000c00 rx_buffer
20204900 l     O .bss.dma	00000800 txbuffer
00000000 l    df *ABS*	00000000 yield.cpp
20007b61 l     O .bss	00000001 yield::running
00000000 l    df *ABS*	00000000 eventresponder.cpp
00000000 l    df *ABS*	00000000 dmachannel.cpp
00000000 l    df *ABS*	00000000 usb_inst.cpp
00000000 l    df *ABS*	00000000 time.cpp
20000770 l     O .data	0000000c monthDays
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 usb_audio.cpp
0000c940 l     F .text.itcm	00000098 copy_to_buffers(unsigned long const*, short*, short*, unsigned int)
0000c9d8 l     F .text.itcm	0000005c sync_event(transfer_struct*)
0000cca0 l     F .text.itcm	00000054 rx_event(transfer_struct*)
0000ce14 l     F .text.itcm	00000060 tx_event(transfer_struct*)
20001478 l     O .data	00000004 usb_audio_transmit_callback::count
20205280 l     O .bss.dma	000000b4 rx_buffer
20205340 l     O .bss.dma	000000b4 tx_buffer
00000000 l    df *ABS*	00000000 print.cpp
00000000 l    df *ABS*	00000000 new.cpp
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 intervaltimer.cpp
0000d104 l     F .text.itcm	00000058 pit_isr()
20001ec0 l     O .bss	00000010 funct_table
00000000 l    df *ABS*	00000000 atexit_arm.o
00000000 l    df *ABS*	00000000 libc_a-malloc.o
00000000 l    df *ABS*	00000000 libc_a-mallocr.o
00000000 l    df *ABS*	00000000 libc_a-mlock.o
00000000 l    df *ABS*	00000000 libc_a-reallocr.o
00000000 l    df *ABS*	00000000 libc_a-cxa_atexit.o
00000000 l    df *ABS*	00000000 libc_a-findfp.o
0000dbac l     F .text.itcm	00000018 stdio_exit_handler
0000dbc4 l     F .text.itcm	00000040 cleanup_stdio
0000dc04 l     F .text.itcm	000000d4 global_stdio_init.part.0
00000000 l    df *ABS*	00000000 libc_a-fwalk.o
00000000 l    df *ABS*	00000000 libc_a-sprintf.o
00000000 l    df *ABS*	00000000 libc_a-stdio.o
00000000 l    df *ABS*	00000000 libc_a-vdprintf.o
00000000 l    df *ABS*	00000000 libc_a-vasnprintf.o
00000000 l    df *ABS*	00000000 libc_a-memcmp.o
00000000 l    df *ABS*	00000000 libc_a-memmove.o
00000000 l    df *ABS*	00000000 libc_a-memset.o
00000000 l    df *ABS*	00000000 libc_a-strncmp.o
00000000 l    df *ABS*	00000000 libc_a-strncpy.o
00000000 l    df *ABS*	00000000 libc_a-locale.o
00000000 l    df *ABS*	00000000 libc_a-closer.o
00000000 l    df *ABS*	00000000 libc_a-lseekr.o
00000000 l    df *ABS*	00000000 libc_a-readr.o
00000000 l    df *ABS*	00000000 libc_a-sbrkr.o
00000000 l    df *ABS*	00000000 libc_a-writer.o
00000000 l    df *ABS*	00000000 libc_a-errno.o
00000000 l    df *ABS*	00000000 libc_a-init.o
00000000 l    df *ABS*	00000000 libc_a-lock.o
00000000 l    df *ABS*	00000000 libc_a-memchr.o
00000000 l    df *ABS*	00000000 libc_a-strlen.o
00000000 l    df *ABS*	00000000 libc_a-__atexit.o
00000000 l    df *ABS*	00000000 libc_a-freer.o
00000000 l    df *ABS*	00000000 libc_a-mbtowc_r.o
00000000 l    df *ABS*	00000000 libc_a-mprec.o
00000000 l    df *ABS*	00000000 libc_a-wctomb_r.o
00000000 l    df *ABS*	00000000 libc_a-svfprintf.o
00000000 l    df *ABS*	00000000 libc_a-fclose.o
00000000 l    df *ABS*	00000000 libc_a-fflush.o
00000000 l    df *ABS*	00000000 libc_a-localeconv.o
00000000 l    df *ABS*	00000000 libm_a-s_frexp.o
00000000 l    df *ABS*	00000000 libc_a-assert.o
00000000 l    df *ABS*	00000000 libc_a-callocr.o
00000000 l    df *ABS*	00000000 libc_a-dtoa.o
00010e98 l     F .text.itcm	00000126 quorem
00000000 l    df *ABS*	00000000 libc_a-wcrtomb.o
00000000 l    df *ABS*	00000000 libc_a-wcsrtombs.o
00000000 l    df *ABS*	00000000 libc_a-fiprintf.o
00000000 l    df *ABS*	00000000 libc_a-svfiprintf.o
00000000 l    df *ABS*	00000000 libc_a-vfiprintf.o
00011e38 l     F .text.itcm	00000076 __sprint_r.part.0
00012e3c l     F .text.itcm	00000080 __sbprintf
00000000 l    df *ABS*	00000000 libc_a-fvwrite.o
00000000 l    df *ABS*	00000000 libc_a-wsetup.o
00000000 l    df *ABS*	00000000 libc_a-fputwc.o
00000000 l    df *ABS*	00000000 libc_a-wcsnrtombs.o
00000000 l    df *ABS*	00000000 libc_a-makebuf.o
00000000 l    df *ABS*	00000000 libc_a-wbuf.o
00000000 l    df *ABS*	00000000 libc_a-fstatr.o
00000000 l    df *ABS*	00000000 libc_a-isattyr.o
00000000 l    df *ABS*	00000000 libc_a-ctype_.o
00000000 l    df *ABS*	00000000 libc_a-impure.o
00000000 l    df *ABS*	00000000 libc_a-__call_atexit.o
00000000 l    df *ABS*	00000000 exfatvolume.cpp
00000000 l    df *ABS*	00000000 fatvolume.cpp
00000000 l    df *ABS*	00000000 hardwareserial.cpp
00013698 l     F .text.itcm	00000008 ___init_veneer
000136a0 l     F .text.itcm	00000008 ___ZN11AudioStream17initialize_memoryEP18audio_block_structj_veneer
000136a8 l     F .text.itcm	00000008 ___reboot_Teensyduino__veneer
60001ec0 l     F .text.code	00000008 __pwm_init_veneer
60001ec8 l     F .text.code	00000008 ___Znwj_veneer
60001ed0 l     F .text.code	00000008 __sm_set_pool_veneer
60001ed8 l     F .text.code	00000008 __delay_veneer
60001ee0 l     F .text.code	00000008 __memset_veneer
60001ee8 l     F .text.code	00000008 __main_veneer
60001ef0 l     F .text.code	00000008 __set_arm_clock_veneer
60001ef8 l     F .text.code	00000008 __usb_init_serialnumber_veneer
60001f00 l     F .text.code	00000008 ___ZN13IntervalTimer11beginCyclesEPFvvEm_veneer
60001f08 l     F .text.code	00000008 ____libc_init_array_veneer
00000388  w    F .text.itcm	0000006e SDFile::getModifyTime(DateTimeFields&)
200064b0 g     O .bss	00000004 AudioInputUSB::incoming_right
0000321c g     F .text.itcm	000000b8 toUpcase(unsigned short)
00001f88 g     F .text.itcm	00000016 AudioRecordQueue::available()
0000a768 g     F .text.itcm	00000018 usb_serial_available
200064f8 g     O .bss	00000004 AudioOutputUSB::left_2nd
200065bc g     O .bss	00000008 I2S_32::dma
00013670 g     F .text.itcm	00000024 _isatty_r
200065ac g     O .bss	00000008 AsyncAudioInputSPDIF3::dma
20007b3e g     O .bss	00000002 AudioInputUSB::incoming_count
6000178c g     F .text.code	00000002 startup_default_late_hook
0000e228 g     F .text.itcm	0000002c _lseek_r
2000640c g     O .bss	00000004 AudioStream::memory_pool
000092f8 g     F .text.itcm	00000088 SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)
0000c0d4  w    F .text.itcm	000000f0 yield
0000906c g     F .text.itcm	000000c8 SdioCard::cardCMD6(unsigned long, unsigned char*)
00007a20  w    F .text.itcm	0000000e DedicatedSpiCard::~DedicatedSpiCard()
200076d0 g     O .bss	00000040 proc_stat
20007b30 g     O .bss	00000004 usb_timer1_callback
200009c4 g     O .data	0000000c vtable for AudioCompress
00006914 g     F .text.itcm	000001b4 FatFile::write(void const*, unsigned int)
20005240 g     O .bss	000000b4 usb_audio_transmit_buffer
600020a0 g     O .text.progmem	00000018 usb_string_manufacturer_name_default
200076b4 g     O .bss	0000001c proc
60001888 g     F .text.code	00000384 configure_external_ram
00007a18  w    F .text.itcm	00000004 DedicatedSpiCard::isDedicatedSpi()
000068a0 g     F .text.itcm	00000074 FatFile::truncate()
20005a04 g     O .bss	00000140 Wire1
00007084 g     F .text.itcm	00000168 FatFile::makeSFN(FatLfn_t*)
20007b5b g     O .bss	00000001 AudioStream::update_scheduled
20006404 g     O .bss	00000004 FsDateTime::callback
20006774 g     O .bss	00000001 __lock___atexit_recursive_mutex
00011cac g     F .text.itcm	0000004c _wcrtomb_r
20007b73 g     O .bss	00000001 usb_audio_transmit_setting
000071ec g     F .text.itcm	000000b4 FatFile::makeUniqueSfn(FatLfn_t*)
00008220 g     F .text.itcm	00000068 SharedSpiCard::writeStart(unsigned long)
000054b0 g     F .text.itcm	00000056 FatFormatter::initPbs()
0000d04c g     F .text.itcm	0000001c Print::println()
00008998 g     F .text.itcm	00000026 DedicatedSpiCard::begin(SdSpiConfig)
00002340 g     F .text.itcm	000000ac TwoWire::isr()
200009e8 g     O .data	00000074 vtable for DedicatedSpiCard
20007b34 g     O .bss	00000002 AudioStream::memory_used
0000de18 g     F .text.itcm	00000020 __sseek
0000dcd8 g     F .text.itcm	0000003c __sinit
00003e30 g     F .text.itcm	000000ea ExFatFile::seekSet(unsigned long long)
00013594 g     F .text.itcm	000000b0 __swbuf_r
000004c8  w    F .text.itcm	00000028 File::flush()
000003f8  w    F .text.itcm	0000006e SDFile::getCreateTime(DateTimeFields&)
20007b18 g     O .bss	00000004 usb_audio_overrun_count
0000d7bc g     F .text.itcm	0000000c __malloc_unlock
000005ac  w    F .text.itcm	000000b0 SDFile::openNextFile(unsigned char)
200065cc g     O .bss	00000004 FsVolume::m_cwv
00005f2c g     F .text.itcm	000000f8 FatFile::open(FatFile*, char const*, int)
200058c0 g     O .bss	00000004 SerNum
00007a0c  w    F .text.itcm	00000004 SharedSpiCard::errorData() const
60001e60 g     F .text.code	00000054 analog_init
00001850 g     F .text.itcm	00000054 storeBegin()
0000de40 g     F .text.itcm	0000004a _vdprintf_r
00005c9c g     F .text.itcm	00000020 FatFile::getCreateDateTime(unsigned short*, unsigned short*)
00007fcc g     F .text.itcm	00000076 SharedSpiCard::readOCR(unsigned long*)
20001450 g     O .data	00000004 F_CPU_ACTUAL
20000ae0  w    O .data	0000005c vtable for SDFile
200064a8 g     O .bss	00000004 AudioInputUSB::ready_right
0000df6c g     F .text.itcm	000000f8 memmove
00009b74 g     F .text.itcm	00000098 SdioCard::stopTransmission(bool)
0000e83c g     F .text.itcm	0000004c _Balloc
000136bc g       .ARM.exidx	00000000 __exidx_end
200073b0 g     O .bss	00000004 feedback_accumulator
00006c98 g     F .text.itcm	0000004a FatPartition::freeChain(unsigned long)
20007b5e g     O .bss	00000001 EventResponder::runningFromYield
0000ccf4 g     F .text.itcm	0000001c AudioOutputUSB::begin()
0000a018 g     F .text.itcm	00000016 SdSpiArduinoDriver::receive()
0000bb98 g     F .text.itcm	00000060 tempmonGetTemp
000059b8 g     F .text.itcm	000000e4 FatFile::getName7(char*, unsigned int)
0000cffc g     F .text.itcm	00000050 Print::write(unsigned char const*, unsigned int)
2000147c g     O .data	00000004 __atexit_recursive_mutex
0000e2d0 g     F .text.itcm	0000000c __errno
0000068c  w    F .text.itcm	00000026 SDFile::isDirectory()
00004f00 g     F .text.itcm	00000176 ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
000008c8  w    F .text.itcm	00000044 File::write(unsigned char const*, unsigned int)
20003220 g     O .bss	00000020 tx_transfer
60001000 g     O .text.headers	00000020 ImageVectorTable
00002684  w    F .text.itcm	0000002c SPIClass::SPIClass(unsigned int, unsigned int)
00000a24  w    F .text.itcm	000000a8 File::~File()
2000650c g     O .bss	00000004 EventResponder::firstInterrupt
0000b7c0 g     F .text.itcm	00000004 usb_transfer_status
20007678 g     O .bss	00000014 patchCord2
0000bb10 g     F .text.itcm	00000084 sm_set_pool
00003390 g     F .text.itcm	0000004c ExFatFormatter::writeUpcaseUnicode(unsigned short)
0000ca34 g     F .text.itcm	0000011c AudioOutputUSB::update()
200068ec g     O .bss	00000004 __stdio_exit_handler
000076f8 g     F .text.itcm	00000084 FsBaseFile::FsBaseFile(FsBaseFile const&)
00004920 g     F .text.itcm	00000018 ExFatPartition::rootLength()
20006594 g     O .bss	00000008 AudioOutputSPDIF3::dma
000002ec  w    F .text.itcm	00000054 SDFile::setCreateTime(DateTimeFields const&)
0000c3b0  w    F .text.itcm	00000008 usb_serial_class::write(unsigned char const*, unsigned int)
00013644 g     F .text.itcm	0000002c _fstat_r
20000ebc g     O .data	00000370 digital_pin_to_info_PGM
2000739c g     O .bss	00000004 errno
0000a030 g     F .text.itcm	00000024 SdSpiArduinoDriver::receive(unsigned char*, unsigned int)
00004680 g     F .text.itcm	00000042 ExFatPartition::fatGet(unsigned long, unsigned long*)
60001fdc g     O .text.progmem	00000050 TwoWire::i2c3_hardware
000136b8 g       .text.itcm	00000000 _etext
000025a8 g     F .text.itcm	000000dc _spi_dma_rxISR0()
00007538 g     F .text.itcm	000000b0 FatFile::parsePathName(char const*, FatLfn_t*, char const**)
20001ec0 g       .bss	00000000 _sbss
00005508 g     F .text.itcm	0000005c FatFormatter::writeMbr()
0000a0b8 g     F .text.itcm	00000006 sdCsInit(unsigned char)
00002e5c g     F .text.itcm	00000114 SDClass::mediaPresent()
00008af8 g     F .text.itcm	0000000c SdioCard::errorData() const
00009e90 g     F .text.itcm	000000f4 SdioCard::writeSector(unsigned long, unsigned char const*)
0000348c g     F .text.itcm	0000052c ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)
0000bc4c g     F .text.itcm	00000024 digitalRead
60002378 g       *ABS*	00000000 _stextload
000018ec g     F .text.itcm	0000015c loop
0000c6dc g     F .text.itcm	00000018 AudioStream::receiveReadOnly(unsigned int)
0000bce0 g     F .text.itcm	0000007a flexpwm_init
0000cfc0 g     F .text.itcm	0000003c usb_audio_set_feature
0000bfd8 g     F .text.itcm	000000a4 usb_midi_flush_output
20007b48 g     O .bss	00000002 haveSD
0000b5b4 g     F .text.itcm	00000064 usb_config_rx
00003bc4 g     F .text.itcm	000000a0 ExFatFile::parsePathName(char const*, ExName_t*, char const**)
2000768c g     O .bss	00000014 patchCord3
000099a4 g     F .text.itcm	000000fc SdioCard::readData(unsigned char*)
20006508 g     O .bss	00000004 EventResponder::lastInterrupt
0000777c g     F .text.itcm	0000002e FsBaseFile::close()
000028ec g     F .text.itcm	00000048 SPIClass::end()
0000a0c4 g     F .text.itcm	00000134 memcpy
00000468  w    F .text.itcm	00000060 File::available()
00007a50 g     F .text.itcm	0000008c SharedSpiCard::writeStop()
20001ec0 g     O .data	00000000 .hidden __TMC_END__
200073c8 g     O .bss	00000080 fileName
00004704 g     F .text.itcm	000000be ExFatPartition::freeChain(unsigned long)
0000626c g     F .text.itcm	00000028 FatFile::peek()
0000efd0 g     F .text.itcm	00001b44 _svfprintf_r
20007b62  w    O .bss	00000001 SDFile::name()::zeroterm
20007aec g     O .bss	00000004 systick_millis_count
00004d28 g     F .text.itcm	000000a2 ExFatFile::rename(ExFatFile*, char const*)
000002b0  w    F .text.itcm	0000003c SDFile::truncate(unsigned long long)
200064f4 g     O .bss	00000004 AudioOutputUSB::left_1st
20007b75 g     O .bss	00000001 usb_configuration
00007a00  w    F .text.itcm	00000006 SdCardInterface::status()
60000000 g     O .text.headers	00000200 FlexSPI_NOR_Config
0000bac4 g     F .text.itcm	0000004c sm_align_pool
00009c0c g     F .text.itcm	00000030 SdioCard::syncDevice()
00008d24 g     F .text.itcm	000000b4 SdioCard::writeData(unsigned char const*)
0000117c g     F .text.itcm	00000080 makeHeader(char*)
00000828  w    F .text.itcm	0000004c StreamFile<FsBaseFile, unsigned long long>::available()
00006294 g     F .text.itcm	00000044 FatFile::readDirCache(bool)
000080b8 g     F .text.itcm	00000098 SharedSpiCard::sectorCount()
20006414 g     O .bss	00000070 AudioStream::memory_pool_available_mask
600020a0  w    O .text.progmem	00000018 usb_string_manufacturer_name
0000d230 g     F .text.itcm	00000010 malloc
20001454 g     O .data	00000004 FilePrefix
60001f8c g     O .text.progmem	00000050 TwoWire::i2c1_hardware
00002d78 g     F .text.itcm	000000e2 SDClass::format(int, char, Print&)
20000ab0  w    O .data	00000024 vtable for FsFile
0000ba80  w    F .text.itcm	0000000a _fstat
00002230  w    F .text.itcm	0000001e TwoWire::read()
00010de0 g     F .text.itcm	00000040 __assert_func
00002454  w    F .text.itcm	00000016 EventResponder::triggerEvent(int, void*)
20007b40 g     O .bss	00000002 AudioOutputUSB::offset_1st
200003a8 g     O .data	000000c8 __mprec_tens
60001648 g     F .text.code	000000e8 usb_init
20007b3c g     O .bss	00000002 AudioStream::memory_pool_first_mask
20205260 g     O .bss.dma	00000004 usb_audio_sync_feedback
00007a08  w    F .text.itcm	00000004 SharedSpiCard::errorCode() const
00000994  w    F .text.itcm	0000008e SDFile::seek(unsigned long long, int)
200067b0 g     O .bss	00000004 __malloc_top_pad
20005820 g     O .bss	00000050 SPI1
20007af0 g     O .bss	00000004 systick_safe_read
aaaaaabf g       *ABS*	00000000 _flexram_bank_config
00005078 g     F .text.itcm	000000e4 ExFatFile::truncate()
20001484 g     O .data	00000000 .hidden __dso_handle
00010d60 g     F .text.itcm	00000008 _localeconv_r
00009fc0 g     F .text.itcm	0000004e SdSpiArduinoDriver::deactivate()
00012ebc g     F .text.itcm	000002f4 __sfvwrite_r
0000e9e0 g     F .text.itcm	0000005c __i2b
20000000 g       .data	00000000 _sdata
00005680 g     F .text.itcm	000001c4 FatFormatter::makeFat32()
60002214 g     O .text.progmem	00000155 usb_config_descriptor_480
0000a010 g     F .text.itcm	00000006 SdSpiArduinoDriver::end()
00005b5c g     F .text.itcm	00000034 FatFile::addCluster()
0000e280 g     F .text.itcm	00000024 _sbrk_r
00008bb8 g     F .text.itcm	0000001c SdioCard::type() const
60001784 g     F .text.code	00000002 startup_default_early_hook
60001428 g     F .text.code	00000220 ResetHandler
0000a7f0 g     F .text.itcm	00000020 usb_serial_getchar
00000260  w    F .text.itcm	00000050 SDFile::name()
20007b20 g     O .bss	00000008 usb_cdc_line_coding
0000bbf8 g     F .text.itcm	00000054 digitalWrite
20006510 g     O .bss	00000004 EventResponder::lastYield
00003b9c g     F .text.itcm	00000028 ExFatFile::openRoot(ExFatVolume*)
0000e254 g     F .text.itcm	0000002c _read_r
0000bf14 g     F .text.itcm	000000c4 usb_midi_configure
000006cc  w    F .text.itcm	00000038 StreamFile<FsBaseFile, unsigned long long>::read()
00007a1c  w    F .text.itcm	00000002 DedicatedSpiCard::~DedicatedSpiCard()
00003320 g     F .text.itcm	0000002e ExFatFormatter::syncUpcase()
00000788  w    F .text.itcm	00000054 SDFile::setModifyTime(DateTimeFields const&)
00010b14 g     F .text.itcm	000000c6 _fclose_r
00008b04 g     F .text.itcm	00000024 SdioCard::readCID(cid_t*)
200073a0 g     O .bss	00000010 extmem_smalloc_pool
200067a8 g     O .bss	00000004 __malloc_max_sbrked_mem
00008594 g     F .text.itcm	000000b6 DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)
20007b5d g     O .bss	00000001 AudioOutputUSB::update_responsibility
00000574  w    F .text.itcm	0000001a SDFile::position()
0000bc70 g     F .text.itcm	00000070 pinMode
200064a4 g     O .bss	00000004 AudioInputUSB::ready_left
200064c4 g     O .bss	00000008 AudioInputTDM2::dma
20005b44 g     O .bss	00000140 Wire2
60017c00 g     O .text.csf	00000c00 hab_csf
000004f0  w    F .text.itcm	0000002c File::peek()
00006ce4 g     F .text.itcm	000000a0 FatPartition::freeClusterCount()
20280000 g       .text.csf	00000000 _heap_end
00002a04  w    F .text.itcm	000000c8 SDClass::open(char const*, unsigned char)
000136b4 g       .ARM.exidx	00000000 __exidx_start
70000000 g       .bss.extram	00000000 _extram_end
00000254  w    F .text.itcm	0000000c DMAChannel::~DMAChannel()
0000ba8c  w    F .text.itcm	00000004 _isatty
20006504 g     O .bss	00000004 EventResponder::firstYield
20001448 g     O .data	00000004 DirPrefix
00000754  w    F .text.itcm	00000034 StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)
0000d7c8 g     F .text.itcm	000003d8 _realloc_r
000006b4  w    F .text.itcm	00000018 SDFile::read(void*, unsigned int)
0000e2dc g     F .text.itcm	00000048 __libc_init_array
00000340  w    F .text.itcm	00000046 SDFile::rewindDirectory()
00002224  w    F .text.itcm	0000000c TwoWire::available()
000043d8 g     F .text.itcm	0000000e ExFatFile::open(ExFatVolume*, char const*, int)
00002980 g     F .text.itcm	00000084 SDClass::dateTime(unsigned short*, unsigned short*)
00004c78 g     F .text.itcm	000000ae ExFatFile::addDirCluster()
0000cf5c g     F .text.itcm	00000064 usb_audio_get_feature
00013328 g     F .text.itcm	00000066 _fputwc_r
00002684  w    F .text.itcm	0000002c SPIClass::SPIClass(unsigned int, unsigned int)
20000380 g     O .data	00000028 __mprec_bigtens
0000ba9c  w    F .text.itcm	00000004 abort
0000c398  w    F .text.itcm	00000004 usb_serial_class::clear()
0000ba40 g     F .text.itcm	00000034 _sbrk
60015a34 g       *ABS*	00000000 _sdataload
00000084 g     F .text.itcm	0000010c I2S_32::isr32()
0000ed48 g     F .text.itcm	00000042 __mcmp
20000b60 g     O .data	00000030 vtable for SDClass
200064ec g     O .bss	00000008 AudioOutputTDM::dma
20001480 g     O .data	00000004 __brkval
20007b74 g     O .bss	00000001 usb_cdc_line_rtsdtr
60001eb4 g     F .text.code	00000000 _init
0000a554 g     F .text.itcm	00000002 usb_serial_reset
00005c08 g     F .text.itcm	0000001e FatFile::cacheDirEntry(unsigned char)
20000844 g     O .data	00000070 SPIClass::spiclass_lpspi1_hardware
20007b71 g     O .bss	00000001 usb_audio_sync_nbytes
60001d98 g     F .text.code	000000c8 AudioStream::initialize_memory(audio_block_struct*, unsigned int)
00002b84  w    F .text.itcm	00000054 SDClass::remove(char const*)
0000022c  w    F .text.itcm	00000028 SDFile::close()
0000090c  w    F .text.itcm	00000040 SDFile::~SDFile()
600020bc g     O .text.progmem	00000155 usb_config_descriptor_12
20000b90 g     O .data	00000024 vtable for TwoWire
00009f98 g     F .text.itcm	00000028 SdSpiArduinoDriver::begin(SdSpiConfig)
200068f0 g     O .bss	00000018 acq
20007ba0 g       .bss	00000000 _ebss
00009380 g     F .text.itcm	00000088 SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)
20007648 g     O .bss	00000004 hour_
00000718  w    F .text.itcm	00000014 StreamFile<FsBaseFile, unsigned long long>::flush()
0000e940 g     F .text.itcm	00000040 __hi0bits
00003b04 g     F .text.itcm	0000003c ExFatFile::dirCache(unsigned char, unsigned char)
000023f8 g     F .text.itcm	0000000c lpi2c3_isr()
00002f70 g     F .text.itcm	000000d8 SDClass::begin(unsigned char)
00004dcc g     F .text.itcm	0000005e ExFatFile::mkdir(ExFatFile*, ExName_t*)
20205400 g       .bss.dma	00000000 _heap_start
20006778 g     O .bss	00000001 __lock___malloc_recursive_mutex
20007af8 g     O .bss	00000020 usb1
0000297c  w    F .text.itcm	00000002 SDClass::~SDClass()
6000202c g     O .text.progmem	00000050 TwoWire::i2c4_hardware
00000254  w    F .text.itcm	0000000c DMAChannel::~DMAChannel()
200067b4 g     O .bss	00000138 __sf
20006988 g     O .bss	00000a00 diskBuffer
200064fc g     O .bss	00000004 AudioOutputUSB::right_1st
000084a4  w    F .text.itcm	00000076 SharedSpiCard::readCID(cid_t*)
00007c70 g     F .text.itcm	000000ec SharedSpiCard::cardCommand(unsigned char, unsigned long)
00000a24  w    F .text.itcm	000000a8 File::~File()
00000003 g       *ABS*	00000000 _itcm_block_count
20001f00 g     O .bss	00000020 endpoint0_transfer_data
000058f8 g     F .text.itcm	0000002a FatFile::getLfnChar(DirLfn_t*, unsigned char)
000031cc g     F .text.itcm	0000004e FsCache::prepare(unsigned long, unsigned char)
0000d09c g     F .text.itcm	00000004 operator delete(void*, unsigned int)
0000bd5c g     F .text.itcm	000000f4 pwm_init
0000cb50 g     F .text.itcm	00000150 usb_audio_receive_callback
200073b4 g     O .bss	00000014 file
000022d4  w    F .text.itcm	0000006c TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)
00000c78 g     F .text.itcm	000000d0 I2S_32::begin()
60018800 g       .text.csf	00000000 __text_csf_end
60001c0c g     F .text.code	0000005c usb_pll_start
0000eb98 g     F .text.itcm	000000c0 __pow5mult
000064c4 g     F .text.itcm	00000090 FatFile::rmdir()
200009dc g     O .data	0000000c vtable for AudioRecordQueue
00002404 g     F .text.itcm	0000000c lpi2c4_isr()
00006c18 g     F .text.itcm	00000080 FatPartition::allocateCluster(unsigned long, unsigned long*)
000022d4  w    F .text.itcm	0000006c TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)
000089cc  w    F .text.itcm	00000002 SdioCard::end()
00002c14  w    F .text.itcm	00000036 SDClass::exists(char const*)
20007af4 g     O .bss	00000004 tx_
20006484 g     O .bss	00000004 AudioStream::unused
20001ee0 g     O .bss	00000020 endpoint0_transfer_ack
20007b28 g     O .bss	00000004 usb_cdc_line_rtsdtr_millis
0000b77c g     F .text.itcm	00000028 usb_transmit
0000c534 g     F .text.itcm	00000064 software_isr()
0000c290 g     F .text.itcm	00000020 systick_isr
00003a1c g     F .text.itcm	00000082 ExFatFile::getName7(char*, unsigned int)
0000e330 g     F .text.itcm	00000002 __retarget_lock_release_recursive
20006410 g     O .bss	00000004 AudioStream::first_update
20001458 g     O .data	00000010 Serial
20007b36 g     O .bss	00000002 AudioStream::memory_used_max
0000c8c8 g     F .text.itcm	00000034 AudioConnection::~AudioConnection()
0000c3b8  w    F .text.itcm	00000006 usb_serial_class::write(unsigned char)
0000784c g     F .text.itcm	00000072 FsBaseFile::openNext(FsBaseFile*, int)
60001784  w    F .text.code	00000002 startup_early_hook
20007b70 g     O .bss	00000001 usb_audio_receive_setting
00004938 g     F .text.itcm	00000092 ExFatFile::addCluster()
20006408 g     O .bss	00000004 FsDateTime::callback2
20000a84  w    O .data	0000002c vtable for File
00007b5c g     F .text.itcm	0000008c SharedSpiCard::readData(unsigned char*, unsigned int)
00002c4c  w    F .text.itcm	000000f0 SDClass::usedSize()
0000a724 g     F .text.itcm	00000044 usb_serial_peekchar
0000dd14 g     F .text.itcm	0000000c __sfp_lock_acquire
0000e340 g     F .text.itcm	00000000 memchr
00006bb0 g     F .text.itcm	00000068 FatPartition::fatPut(unsigned long, unsigned long)
0000a938 g     F .text.itcm	000002f0 set_arm_clock
20007ae8 g     O .bss	00000004 systick_cycle_count
20001a2c g     O .data	00000016 usb_string_serial_number_default
0000e604 g     F .text.itcm	0000020c _free_r
00008288 g     F .text.itcm	00000118 SharedSpiCard::erase(unsigned long, unsigned long)
000086ec g     F .text.itcm	00000066 SharedSpiCard::writeData(unsigned char, unsigned char const*)
00009134 g     F .text.itcm	000000b8 SdioCard::readStop()
00007a10  w    F .text.itcm	00000004 SharedSpiCard::type() const
0000e1f8 g     F .text.itcm	0000000c __locale_mb_cur_max
00011cf8 g     F .text.itcm	00000016 _wcsrtombs_r
200065e4 g     O .bss	00000190 __atexit0
0000c3a8  w    F .text.itcm	00000004 usb_serial_class::flush()
000083a0 g     F .text.itcm	00000080 SharedSpiCard::readSCR(scr_t*)
000033dc g     F .text.itcm	000000b0 ExFatFormatter::writeUpcase(unsigned long)
200019fc g     O .data	00000004 __malloc_sbrk_base
0000c3a0  w    F .text.itcm	00000004 usb_serial_class::read()
2000657c g     O .bss	00000008 AudioOutputI2SOct::dma
20007b42 g     O .bss	00000002 I2S_32::block_offset
000075e8 g     F .text.itcm	00000110 FatFile::remove()
0000ba90  w    F .text.itcm	00000006 _lseek
0000ba98  w    F .text.itcm	00000004 __cxa_pure_virtual
0000ec58 g     F .text.itcm	000000f0 __lshift
00005e48 g     F .text.itcm	000000e2 FatFile::mkdir(FatFile*, char const*, bool)
0000b74c g     F .text.itcm	00000030 usb_prepare_transfer
00007a14  w    F .text.itcm	00000004 DedicatedSpiCard::hasDedicatedSpi()
0000b8c0 g     F .text.itcm	00000180 unused_interrupt_vector
200064ac g     O .bss	00000004 AudioInputUSB::incoming_left
00011d38 g     F .text.itcm	00000100 __ssprint_r
60001c68 g     F .text.code	00000130 tempmon_init
20007b2c g     O .bss	00000004 usb_timer0_callback
00006f68 g     F .text.itcm	0000011c FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)
0000dea8 g     F .text.itcm	00000062 _vasnprintf_r
0000d094  w    F .text.itcm	00000002 serialEvent()
200064dc g     O .bss	00000010 AudioOutputPWM::dma
0000e4dc g     F .text.itcm	00000088 __register_exitproc
000042e4 g     F .text.itcm	000000f4 ExFatFile::open(ExFatFile*, char const*, int)
0000c6f4 g     F .text.itcm	00000046 AudioStream::receiveWritable(unsigned int)
0000e108 g     F .text.itcm	0000008a strncmp
00006ea4 g     F .text.itcm	000000c4 FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)
000078c0 g     F .text.itcm	00000114 FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)
00004e2c g     F .text.itcm	000000d2 ExFatFile::mkdir(ExFatFile*, char const*, bool)
00005564 g     F .text.itcm	0000011c FatFormatter::makeFat16()
0000c80c g     F .text.itcm	00000028 AudioConnection::AudioConnection(AudioStream&, unsigned char, AudioStream&, unsigned char)
0000a780 g     F .text.itcm	00000070 usb_serial_flush_input
000047c4 g     F .text.itcm	00000070 ExFatPartition::freeClusterCount()
20000ad4 g     O .data	0000000c vtable for I2S_32
0000ea3c g     F .text.itcm	0000015c __multiply
0000a810 g     F .text.itcm	0000002c usb_serial_putchar
00000025 g       *ABS*	00000000 _teensy_model_identifier
00007d5c g     F .text.itcm	000001f8 SharedSpiCard::begin(SdSpiConfig)
20006534 g     O .bss	00000008 AudioOutputI2S2::dma
0000e194 g     F .text.itcm	00000064 strncpy
20006780 g     O .bss	00000028 __malloc_current_mallinfo
200064b4 g     O .bss	00000008 AudioInputI2S2::dma
20000924 g     O .data	00000070 SPIClass::spiclass_lpspi4_hardware
0000eee0 g     F .text.itcm	000000d4 __d2b
00008754 g     F .text.itcm	00000068 SharedSpiCard::writeData(unsigned char const*)
20006514 g     O .bss	00000020 HardwareSerial::s_serials_with_serial_events
000089c4  w    F .text.itcm	00000004 SdCardInterface::isDedicatedSpi()
60001730 g     F .text.code	00000054 _reboot_Teensyduino_
0000d15c g     F .text.itcm	000000c8 IntervalTimer::beginCycles(void (*)(), unsigned long)
00008ba8  w    F .text.itcm	0000000e SdioCard::~SdioCard()
0000c80c g     F .text.itcm	00000028 AudioConnection::AudioConnection(AudioStream&, unsigned char, AudioStream&, unsigned char)
00000b7c g     F .text.itcm	000000fc I2S_32::config_i2s()
60001788 g     F .text.code	00000002 startup_default_middle_hook
000088c0 g     F .text.itcm	000000d8 DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)
00008044 g     F .text.itcm	00000074 SharedSpiCard::readRegister(unsigned char, void*)
00000d48 g     F .text.itcm	000002e8 AudioCompress::compress(void*)
00008f98 g     F .text.itcm	000000d4 SdioCard::writeStart(unsigned long)
0000ae74 g     F .text.itcm	00000740 usb_isr
0000dba0 g     F .text.itcm	0000000c __cxa_atexit
00003c64 g     F .text.itcm	0000019e ExFatFile::read(void*, unsigned int)
0000c8fc g     F .text.itcm	00000044 AudioStream::update_setup()
0000e204 g     F .text.itcm	00000024 _close_r
00007be8 g     F .text.itcm	0000006e SharedSpiCard::readStop()
00000674  w    F .text.itcm	00000018 SDFile::peek()
00003174 g     F .text.itcm	00000056 FsCache::sync()
200065a4 g     O .bss	00000008 AudioOutputPT8211_2::dma
200057d0 g     O .bss	00000050 SPI
0000df0c g     F .text.itcm	00000060 memcmp
200065b8 g     O .bss	00000004 I2S_32::block_right
20000a5c  w    O .data	00000028 vtable for usb_serial_class
0000a054 g     F .text.itcm	00000012 SdSpiArduinoDriver::send(unsigned char)
0000e328 g     F .text.itcm	00000002 __retarget_lock_close_recursive
0000a0c0 g     F .text.itcm	00000004 sdCsWrite(unsigned char, bool)
20007ae4 g     O .bss	00000004 scale_cpu_cycles_to_microseconds
20005870 g     O .bss	00000050 SPI2
000131b0 g     F .text.itcm	000000cc __swsetup_r
00004a80 g     F .text.itcm	0000005e ExFatFile::rmdir()
2000654c g     O .bss	00000008 AudioInputI2SHex::dma
00008150 g     F .text.itcm	00000068 SharedSpiCard::readStart(unsigned long)
200015f4 g     O .data	00000408 __malloc_av_
200065e0 g     O .bss	00000004 __atexit
00000704  w    F .text.itcm	00000014 SDFile::flush()
0000ddb4 g     F .text.itcm	00000022 __sread
200030e0 g     O .bss	00000020 rx_transfer
0000a8a4 g     F .text.itcm	00000094 usb_serial_flush_output
2000648c g     O .bss	00000008 AudioInputI2S::dma
0000d7b0 g     F .text.itcm	0000000c __malloc_lock
000032e8 g     F .text.itcm	00000018 FsDateTime::setCallback(void (*)(unsigned short*, unsigned short*))
200009d0 g     O .data	0000000c vtable for AudioOutputUSB
20001c00 g     O .data	000002c0 _VectorsRam
20007710 g     O .bss	00000368 queue1
0000a068 g     F .text.itcm	0000004e SdSpiArduinoDriver::send(unsigned char const*, unsigned int)
000053dc g     F .text.itcm	000000d4 FatFormatter::initFatDir(unsigned char, unsigned long)
00010d0c g     F .text.itcm	00000054 _fflush_r
00001f48 g     F .text.itcm	0000003e AudioRecordQueue::update()
00010e20 g     F .text.itcm	00000078 _calloc_r
000026b0 g     F .text.itcm	00000234 SPIClass::begin()
000072a0 g     F .text.itcm	00000298 FatFile::open(FatFile*, FatLfn_t*, int)
20001a45 g     O .data	00000001 yield_active_check_flags
00004c18 g     F .text.itcm	0000005e ExFatFile::sync()
0000e32c g     F .text.itcm	00000002 __retarget_lock_acquire_recursive
20007b76 g     O .bss	00000001 usb_high_speed
000062d8 g     F .text.itcm	000001ea FatFile::rename(FatFile*, char const*)
00008ed0 g     F .text.itcm	0000007c SdioCard::isBusy()
2000656c g     O .bss	00000008 AudioInputI2SQuad::dma
0000e064 g     F .text.itcm	000000a4 memset
0000c518 g     F .text.itcm	00000010 main
200064cc g     O .bss	00000008 AudioOutputI2S::dma
200067ac g     O .bss	00000004 __malloc_max_total_mem
0000440c g     F .text.itcm	000000c0 ExFatPartition::bitmapFind(unsigned long, unsigned long)
0000e324 g     F .text.itcm	00000002 __retarget_lock_init_recursive
20205100 g     O .bss.dma	00000155 usb_descriptor_buffer
000087bc g     F .text.itcm	000000e8 SharedSpiCard::writeSector(unsigned long, unsigned char const*)
200065b4 g     O .bss	00000004 I2S_32::block_left
0000515c g     F .text.itcm	00000280 ExFatFile::write(void const*, unsigned int)
000030d4 g     F .text.itcm	000000a0 lbaToMbrChs(unsigned char*, unsigned long, unsigned long)
00005c48 g     F .text.itcm	00000052 FatFile::dirEntry(DirFat_t*)
000007dc  w    F .text.itcm	0000004c SDFile::available()
0000de38 g     F .text.itcm	00000008 __sclose
0000c07c g     F .text.itcm	00000058 usb_init_serialnumber
60001f8c g       .text.code	00000000 __init_array_end
00010fc0 g     F .text.itcm	00000cec _dtoa_r
0000d250 g     F .text.itcm	00000560 _malloc_r
000081b8 g     F .text.itcm	00000068 DedicatedSpiCard::readSector(unsigned long, unsigned char*)
20007b5f g     O .bss	00000001 HardwareSerial::s_count_serials_with_serial_events
0000efb4 g     F .text.itcm	0000001a __ascii_wctomb
20007b72 g     O .bss	00000001 usb_audio_sync_rshift
00000070  w    F .text.itcm	00000012 SDFile::isOpen()
000076f8 g     F .text.itcm	00000084 FsBaseFile::FsBaseFile(FsBaseFile const&)
200065d0 g     O .bss	00000004 FatVolume::m_cwv
20006554 g     O .bss	00000008 AudioInputI2SOct::dma
20000c28  w    O .data	00000010 SPIClass::beginTransaction(SPISettings)::clk_sel
0000c1c4 g     F .text.itcm	00000084 EventResponder::triggerEventNotImmediate()
000028e4 g     F .text.itcm	00000008 SPIClass::transfer(void const*, void*, unsigned int)
0000b86c g     F .text.itcm	00000054 micros
00004ae0 g     F .text.itcm	00000138 ExFatFile::syncDir()
00008420 g     F .text.itcm	00000082 SharedSpiCard::readSDS(sds_t*)
0000e564 g     F .text.itcm	000000a0 _malloc_trim_r
00013390 g     F .text.itcm	00000106 _wcsnrtombs_l
600020b8 g     O .text.progmem	00000004 string0
0000a83c g     F .text.itcm	00000018 usb_serial_write
6000178c  w    F .text.code	00000002 startup_late_hook
000088a4 g     F .text.itcm	0000001c DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)
0000c3a4  w    F .text.itcm	00000004 usb_serial_class::available()
60002376 g     O .text.progmem	00000001 _serialEvent_default
000067bc g     F .text.itcm	0000000c FatFile::sync()
00005844 g     F .text.itcm	000000b4 FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)
00002bd8  w    F .text.itcm	0000003a SDClass::mkdir(char const*)
20000000 g     O .data	00000380 endpoint_queue_head
20006908 g     O .bss	00000080 dirName
6000207c  w    O .text.progmem	00000024 usb_string_product_name
0000b7c4 g     F .text.itcm	000000a8 delay
20007b46 g     O .bss	00000002 dma_channel_allocated_mask
00003b78 g     F .text.itcm	00000022 ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)
000136b0 g     F .fini	00000000 _fini
200065c8 g     O .bss	00000004 I2S_32::DC_right
0000226c g     F .text.itcm	0000002a TwoWire::write(unsigned char)
00007adc g     F .text.itcm	0000007e SharedSpiCard::isBusy()
20006584 g     O .bss	00000008 AudioOutputPT8211::dma
60001020 g     O .text.headers	0000000c BootData
200064d4 g     O .bss	00000008 AudioOutputMQS::dma
20007b1c g     O .bss	00000004 usb_audio_underrun_count
000043e8 g     F .text.itcm	00000024 ExFatFile::openNext(ExFatFile*, int)
0000d078 g     F .text.itcm	0000001c Print::printf(char const*, ...)
0000dd74 g     F .text.itcm	00000040 sprintf
00001fa0 g     F .text.itcm	00000048 AudioRecordQueue::clear()
00005c28 g     F .text.itcm	0000001e FatFile::close()
0000bb94 g     F .text.itcm	00000004 Panic_Temp_isr
0000094c  w    F .text.itcm	00000048 SDFile::~SDFile()
00005cdc g     F .text.itcm	0000016a FatFile::mkdir(FatFile*, FatLfn_t*)
00013498 g     F .text.itcm	00000024 _wcsnrtombs_r
00008ba4  w    F .text.itcm	00000002 SdioCard::~SdioCard()
0000065c  w    F .text.itcm	00000018 StreamFile<FsBaseFile, unsigned long long>::peek()
00000874  w    F .text.itcm	00000054 File::write(unsigned char)
0000e2a4 g     F .text.itcm	0000002c _write_r
0000ce74 g     F .text.itcm	000000e8 usb_audio_configure
00000190 g     F .text.itcm	0000009c I2S_32::update()
20005300 g     O .bss	000004d0 SD
00009c3c g     F .text.itcm	00000144 SdioCard::erase(unsigned long, unsigned long)
20007b60 g     O .bss	00000001 I2S_32::update_responsibility
0000c644 g     F .text.itcm	00000050 AudioStream::release(audio_block_struct*)
20003100 g     O .bss	00000020 sync_transfer
20001a10 g     O .data	00000004 _impure_ptr
20000b3c  w    O .data	00000024 vtable for Stream
00003e04 g     F .text.itcm	0000002c ExFatFile::peek()
00010bdc g     F .text.itcm	00000130 __sflush_r
20000994  w    O .data	00000024 vtable for StreamFile<FsBaseFile, unsigned long long>
20006564 g     O .bss	00000008 AudioOutputSPDIF::dma
200058c4 g     O .bss	00000140 Wire
0000072c  w    F .text.itcm	00000014 SDFile::write(void const*, unsigned int)
0000c694 g     F .text.itcm	00000046 AudioStream::transmit(audio_block_struct*, unsigned char)
000079d4 g     F .text.itcm	00000028 FsVolume::open(char const*, int)
0000dd2c g     F .text.itcm	00000046 _fwalk_sglue
00008aec g     F .text.itcm	0000000c SdioCard::errorCode() const
00006024 g     F .text.itcm	0000000e FatFile::open(FatVolume*, char const*, int)
00000740  w    F .text.itcm	00000014 StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)
60001f10 g       .text.code	00000000 __preinit_array_end
2000649c g     O .bss	00000008 AudioInputTDM::dma
000010ec g     F .text.itcm	00000090 newFileName(char*)
2000653c g     O .bss	00000008 AudioOutputTDM2::dma
000045c4 g     F .text.itcm	00000036 ExFatPartition::dirCache(DirPos_t*, unsigned char)
0000e810 g     F .text.itcm	0000002a __ascii_mbtowc
0000c598 g     F .text.itcm	000000ac AudioStream::allocate()
20007448 g     O .bss	00000200 header
00006d84 g     F .text.itcm	00000120 FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)
0000ae48 g     F .text.itcm	0000002c usb_stop_sof_interrupts
00002250  w    F .text.itcm	00000018 TwoWire::peek()
00002268  w    F .text.itcm	00000002 TwoWire::flush()
000018a4 g     F .text.itcm	00000048 setup
2000129c g     O .data	0000006c usb_descriptor_list
00008f4c g     F .text.itcm	00000020 SdioCard::status()
00005cbc g     F .text.itcm	00000020 FatFile::getModifyDateTime(unsigned short*, unsigned short*)
0000b67c g     F .text.itcm	00000064 usb_config_rx_iso
0000006c  w    F .text.itcm	00000002 Print::flush()
00001fe8 g     F .text.itcm	0000003a AudioRecordQueue::readBuffer()
20007664 g     O .bss	00000014 patchCord1
200076a0 g     O .bss	00000014 patchCord4
00002acc  w    F .text.itcm	00000052 SDClass::rmdir(char const*)
000060c4 g     F .text.itcm	000001a8 FatFile::read(void*, unsigned int)
0000608c g     F .text.itcm	00000036 FatFile::openRoot(FatVolume*)
20006488 g     O .bss	00000004 ExFatVolume::m_cwv
200065c4 g     O .bss	00000004 I2S_32::DC_left
20068000 g       .text.csf	00000000 _estack
000079fc g     F .text.itcm	00000004 operator new(unsigned int, unsigned long*)
0000c364 g     F .text.itcm	00000034 DMAChannel::release()
0000051c  w    F .text.itcm	00000058 File::read()
00002024 g     F .text.itcm	00000016 AudioRecordQueue::freeBuffer()
0000a854 g     F .text.itcm	00000050 usb_serial_write_buffer_free
0000c73c g     F .text.itcm	000000d0 AudioConnection::connect()
20001a04 g     O .data	0000000c __sglue
20006494 g     O .bss	00000008 AudioInputPDM::dma
0000a558 g     F .text.itcm	000000ec usb_serial_configure
00002298 g     F .text.itcm	0000003c TwoWire::write(unsigned char const*, unsigned int)
20007b5c g     O .bss	00000001 AudioInputUSB::receive_flag
00000acc  w    F .text.itcm	000000b0 File::~File()
0000d068  w    F .text.itcm	0000000e _write
200064bc g     O .bss	00000008 AudioInputPDM2::dma
20001ec0 g       .data	00000000 _edata
000046c4 g     F .text.itcm	00000040 ExFatPartition::fatPut(unsigned long, unsigned long)
20007b64 g     O .bss	00000001 external_psram_size
00008ba4  w    F .text.itcm	00000002 SdioCard::~SdioCard()
00004834 g     F .text.itcm	000000ec ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)
00007a1c  w    F .text.itcm	00000002 DedicatedSpiCard::~DedicatedSpiCard()
0000864c g     F .text.itcm	000000a0 DedicatedSpiCard::setDedicatedSpi(bool)
00003aa0 g     F .text.itcm	00000064 ExFatFile::hashName(ExName_t*)
20001468 g     O .data	0000000c AudioInputUSB::features
00005b90 g     F .text.itcm	00000078 FatFile::addDirCluster()
0001327c g     F .text.itcm	000000aa __fputwc
0000c3ac  w    F .text.itcm	00000004 usb_serial_class::availableForWrite()
20001a42 g     O .data	00000002 I2S_32::shift
000023ec g     F .text.itcm	0000000c lpi2c1_isr()
0000d0a0 g     F .text.itcm	00000062 ultoa
0000297c  w    F .text.itcm	00000002 SDClass::~SDClass()
000077ac g     F .text.itcm	000000a0 FsBaseFile::open(FsVolume*, char const*, int)
0000ddd8 g     F .text.itcm	0000003e __swrite
0000d098 g     F .text.itcm	00000004 operator new(unsigned int)
0000c248 g     F .text.itcm	00000044 EventResponder::runFromInterrupt()
20001a00 g     O .data	00000004 __malloc_trim_threshold
0000c834 g     F .text.itcm	00000094 AudioConnection::disconnect()
0000c39c  w    F .text.itcm	00000004 usb_serial_class::peek()
000089c8  w    F .text.itcm	00000004 SdCardInterface::setDedicatedSpi(bool)
00007f54 g     F .text.itcm	00000078 SharedSpiCard::cardCMD6(unsigned long, unsigned char*)
00011d10 g     F .text.itcm	00000028 fiprintf
0000cd10 g     F .text.itcm	00000104 usb_audio_transmit_callback
00011eb0 g     F .text.itcm	00000f8c _vfiprintf_r
00001d60  w    F .text.itcm	00000110 SPIClass::beginTransaction(SPISettings)
0000ed8c g     F .text.itcm	00000154 __mdiff
00008b4c g     F .text.itcm	00000010 SdioCard::readOCR(unsigned long*)
200008b4 g     O .data	00000070 SPIClass::spiclass_lpspi3_hardware
000045fc g     F .text.itcm	00000082 ExFatPartition::dirSeek(DirPos_t*, unsigned long)
000024cc g     F .text.itcm	000000dc _spi_dma_rxISR1()
20006574 g     O .bss	00000008 AudioOutputI2SHex::dma
20001328 g     O .data	00000120 _impure_data
00003f1c g     F .text.itcm	000003c6 ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)
20007b38 g     O .bss	00000002 AudioStream::cpu_cycles_total
0000dd20 g     F .text.itcm	0000000c __sfp_lock_release
00009134 g     F .text.itcm	000000b8 SdioCard::writeStop()
00003b40 g     F .text.itcm	00000014 ExFatFile::close()
20000ce8 g     O .data	00000101 _ctype_
0000ba74  w    F .text.itcm	00000004 _read
60001f10 g       .text.code	00000000 __init_array_start
2000144c g     O .data	00000004 F_BUS_ACTUAL
20007388 g     O .bss	00000004 disk_count
00003350 g     F .text.itcm	00000040 ExFatFormatter::writeUpcaseByte(unsigned char)
00002b20  w    F .text.itcm	00000064 SDClass::rename(char const*, char const*)
00008b5c g     F .text.itcm	00000014 SdioCard::readSCR(scr_t*)
0000c528  w    F .text.itcm	0000000c AudioStream::update_all()
000134bc g     F .text.itcm	000000d8 __smakebuf_r
00000000 g       .text.itcm	00000000 _stext
0000c2b0 g     F .text.itcm	000000b4 DMAChannel::begin(bool)
20001474 g     O .data	00000004 IntervalTimer::nvic_priorites
00007a30 g     F .text.itcm	0000001e SharedSpiCard::end()
0000e400 g     F .text.itcm	000000dc strlen
00006034 g     F .text.itcm	00000056 FatFile::openCluster(FatFile*)
00006554 g     F .text.itcm	000000ae FatFile::seekSet(unsigned long)
6000207c g     O .text.progmem	00000024 usb_string_product_name_default
2000659c g     O .bss	00000008 AudioOutputI2SQuad::dma
0000de8c g     F .text.itcm	0000001c vdprintf
00008bd4 g     F .text.itcm	00000060 SdioCard::sectorCount()
00008b70 g     F .text.itcm	00000034 SdioCard::readSDS(sds_t*)
000066f0 g     F .text.itcm	000000ca FatFile::openNext(FatFile*, int)
20006500 g     O .bss	00000004 AudioOutputUSB::right_2nd
60001788  w    F .text.code	00000002 startup_middle_hook
20000bb4 g     O .data	00000074 vtable for SdioCard
00005a9c g     F .text.itcm	00000004 FatFile::getName(char*, unsigned int)
60001790 g     F .text.code	000000f8 configure_cache
000089c0  w    F .text.itcm	00000004 SdCardInterface::hasDedicatedSpi()
0000c3c0 g     F .text.itcm	00000158 breakTime(unsigned long, DateTimeFields&)
0000851c  w    F .text.itcm	00000076 SharedSpiCard::readCSD(csd_t*)
2000658c g     O .bss	00000008 AudioOutputSPDIF2::dma
00001054 g     F .text.itcm	00000098 newDirectory(char*)
00009aa0 g     F .text.itcm	000000d4 SdioCard::readStart(unsigned long)
0000b6e0 g     F .text.itcm	0000006c usb_config_tx_iso
20006544 g     O .bss	00000008 AudioInputAnalog::dma
20007b3a g     O .bss	00000002 AudioStream::cpu_cycles_total_max
00009f84 g     F .text.itcm	00000012 SdSpiArduinoDriver::activate()
60001f10 g       .text.code	00000000 __preinit_array_start
0000b7a4 g     F .text.itcm	0000001c usb_receive
200009b8  w    O .data	0000000c vtable for AudioStream
000044cc g     F .text.itcm	000000aa ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)
0000e980 g     F .text.itcm	00000060 __lo0bits
00004578 g     F .text.itcm	0000004c ExFatPartition::chainSize(unsigned long)
20001a28 g     O .data	00000004 tempDatai
00006604 g     F .text.itcm	000000ea FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)
00018800 g       *ABS*	00000000 _flashimagelen
000067c8 g     F .text.itcm	000000d8 FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
00007c58 g     F .text.itcm	00000018 SharedSpiCard::syncDevice()
0000d224 g     F .text.itcm	0000000a __aeabi_atexit
0000baa0 g     F .text.itcm	00000024 rtc_get
000049cc g     F .text.itcm	000000b4 ExFatFile::remove()
00010d68 g     F .text.itcm	00000078 frexp
70000000 g       .bss.extram	00000000 _extram_start
0000c28c g     F .text.itcm	00000004 pendablesrvreq_isr
00002d3c  w    F .text.itcm	0000003c SDClass::totalSize()
2000655c g     O .bss	00000008 AudioInputSPDIF3::dma
0000c8c8 g     F .text.itcm	00000034 AudioConnection::~AudioConnection()
00000068  w    F .text.itcm	00000004 Print::availableForWrite()
20001488 g     O .data	0000016c __global_locale
00009408 g     F .text.itcm	0000059c SdioCard::begin(SdioConfig)
00001030 g     F .text.itcm	00000022 AudioCompress::update()
000020b4 g     F .text.itcm	00000170 breakTime(long long, tmElements_t&)
00003b54 g     F .text.itcm	00000022 ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)
0000a644 g     F .text.itcm	000000e0 usb_serial_read
2000677c g     O .bss	00000001 __lock___sfp_recursive_mutex
0000b618 g     F .text.itcm	00000064 usb_config_tx
0000ba78  w    F .text.itcm	00000006 _close
00006b8c g     F .text.itcm	00000024 FatPartition::fatGet(unsigned long, unsigned long*)
0000d240 g     F .text.itcm	00000010 free
000039b8 g     F .text.itcm	00000064 ExFatFile::cmpName(DirName_t const*, ExName_t*)
0000e89c g     F .text.itcm	000000a4 __multadd
0000e888 g     F .text.itcm	00000012 _Bfree
00000590  w    F .text.itcm	0000001a SDFile::size()
00005924 g     F .text.itcm	00000094 FatFile::getSFN(char*, unsigned int)
0000090c  w    F .text.itcm	00000040 SDFile::~SDFile()
20001a2c  w    O .data	00000016 usb_string_serial_number
00009d80 g     F .text.itcm	00000110 SdioCard::readSector(unsigned long, unsigned char*)
00008b28 g     F .text.itcm	00000024 SdioCard::readCSD(csd_t*)



Disassembly of section .text.code:

60001400 <memory_copy>:
}

__attribute__((section(".startup"), optimize("O1")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001400:	cmp	r0, r1
60001402:	beq.n	60001414 <memory_copy+0x14>
	while (dest < dest_end) {
60001404:	cmp	r0, r2
60001406:	bcs.n	60001414 <memory_copy+0x14>
		*dest++ = *src++;
60001408:	ldr.w	r3, [r1], #4
6000140c:	str.w	r3, [r0], #4
	while (dest < dest_end) {
60001410:	cmp	r2, r0
60001412:	bhi.n	60001408 <memory_copy+0x8>
	}
}
60001414:	bx	lr
60001416:	nop

60001418 <memory_clear>:

__attribute__((section(".startup"), optimize("O1")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
60001418:	cmp	r0, r1
6000141a:	bcs.n	60001426 <memory_clear+0xe>
		*dest++ = 0;
6000141c:	movs	r3, #0
6000141e:	str.w	r3, [r0], #4
	while (dest < dest_end) {
60001422:	cmp	r1, r0
60001424:	bhi.n	6000141e <memory_clear+0x6>
	}
}
60001426:	bx	lr

60001428 <ResetHandler>:
{
60001428:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000142c:	ldr	r2, [pc, #416]	; (600015d0 <ResetHandler+0x1a8>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000142e:	mov.w	r1, #11141120	; 0xaa0000
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001432:	ldr	r3, [pc, #416]	; (600015d4 <ResetHandler+0x1ac>)
	IOMUXC_GPR_GPR16 = 0x00200007;
60001434:	ldr	r0, [pc, #416]	; (600015d8 <ResetHandler+0x1b0>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001436:	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001438:	str	r0, [r3, #64]	; 0x40
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
6000143a:	ldr	r2, [pc, #416]	; (600015dc <ResetHandler+0x1b4>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000143c:	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
6000143e:	mov	sp, r2
	__asm__ volatile("dsb":::"memory");
60001440:	dsb	sy
	__asm__ volatile("isb":::"memory");
60001444:	isb	sy
	startup_early_hook(); // must be in FLASHMEM, as ITCM is not yet initialized!
60001448:	bl	60001784 <startup_default_early_hook>
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
6000144c:	movs	r4, #8
6000144e:	ldr	r3, [pc, #400]	; (600015e0 <ResetHandler+0x1b8>)
	memory_copy(&_stext, &_stextload, &_etext);
60001450:	ldr	r2, [pc, #400]	; (600015e4 <ResetHandler+0x1bc>)
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001452:	str.w	r4, [r3, #340]	; 0x154
	memory_copy(&_stext, &_stextload, &_etext);
60001456:	ldr	r1, [pc, #400]	; (600015e8 <ResetHandler+0x1c0>)
60001458:	ldr	r0, [pc, #400]	; (600015ec <ResetHandler+0x1c4>)
6000145a:	bl	60001400 <memory_copy>
	memory_copy(&_sdata, &_sdataload, &_edata);
6000145e:	ldr	r2, [pc, #400]	; (600015f0 <ResetHandler+0x1c8>)
60001460:	ldr	r1, [pc, #400]	; (600015f4 <ResetHandler+0x1cc>)
60001462:	ldr	r0, [pc, #404]	; (600015f8 <ResetHandler+0x1d0>)
60001464:	bl	60001400 <memory_copy>
	memory_clear(&_sbss, &_ebss);
60001468:	ldr	r1, [pc, #400]	; (600015fc <ResetHandler+0x1d4>)
6000146a:	ldr	r0, [pc, #404]	; (60001600 <ResetHandler+0x1d8>)
6000146c:	bl	60001418 <memory_clear>
	SCB_CPACR = 0x00F00000;
60001470:	ldr	r4, [pc, #400]	; (60001604 <ResetHandler+0x1dc>)
60001472:	mov.w	r1, #3758153728	; 0xe000e000
60001476:	mov.w	r0, #15728640	; 0xf00000
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
6000147a:	movs	r3, #0
6000147c:	ldr	r2, [pc, #392]	; (60001608 <ResetHandler+0x1e0>)
	SCB_CPACR = 0x00F00000;
6000147e:	str.w	r0, [r1, #3464]	; 0xd88
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
60001482:	str.w	r2, [r4, r3, lsl #2]
60001486:	adds	r3, #1
60001488:	cmp	r3, #176	; 0xb0
6000148a:	bne.n	60001482 <ResetHandler+0x5a>
6000148c:	ldr	r3, [pc, #380]	; (6000160c <ResetHandler+0x1e4>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
6000148e:	movs	r1, #128	; 0x80
60001490:	ldr	r2, [pc, #380]	; (60001610 <ResetHandler+0x1e8>)
60001492:	strb.w	r1, [r3], #1
60001496:	cmp	r3, r2
60001498:	bne.n	60001492 <ResetHandler+0x6a>
	SCB_VTOR = (uint32_t)_VectorsRam;
6000149a:	mov.w	r5, #3758153728	; 0xe000e000
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
6000149e:	ldr	r6, [pc, #320]	; (600015e0 <ResetHandler+0x1b8>)
600014a0:	mov.w	r9, #2155905152	; 0x80808080
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014a4:	ldr.w	fp, [pc, #404]	; 6000163c <ResetHandler+0x214>
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014a8:	ldr.w	sl, [pc, #404]	; 60001640 <ResetHandler+0x218>
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014ac:	mov.w	r1, #4294967295
	SCB_VTOR = (uint32_t)_VectorsRam;
600014b0:	str.w	r4, [r5, #3336]	; 0xd08
	SYST_CVR = 0;
600014b4:	movs	r7, #0
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014b6:	str.w	r9, [r6, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014ba:	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
600014be:	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014c2:	str.w	sl, [r6, #240]	; 0xf0
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014c6:	ldr.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014ca:	ldr.w	r8, [pc, #376]	; 60001644 <ResetHandler+0x21c>
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014ce:	orr.w	r3, r3, #458752	; 0x70000
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014d2:	ldr	r2, [pc, #256]	; (600015d4 <ResetHandler+0x1ac>)
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014d4:	str.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014d8:	ldr.w	r3, [r8, #28]
600014dc:	bic.w	r3, r3, #127	; 0x7f
600014e0:	orr.w	r3, r3, #64	; 0x40
600014e4:	str.w	r3, [r8, #28]
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
600014e8:	ldr.w	r3, [r8, #36]	; 0x24
600014ec:	bic.w	r3, r3, #127	; 0x7f
600014f0:	orr.w	r3, r3, #64	; 0x40
600014f4:	str.w	r3, [r8, #36]	; 0x24
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014f8:	str	r1, [r2, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
600014fa:	str	r1, [r2, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
600014fc:	str	r1, [r2, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
600014fe:	str	r1, [r2, #116]	; 0x74
	configure_cache();
60001500:	bl	60001790 <configure_cache>
	_VectorsRam[14] = pendablesrvreq_isr;
60001504:	ldr	r3, [pc, #268]	; (60001614 <ResetHandler+0x1ec>)
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001506:	ldr	r1, [pc, #272]	; (60001618 <ResetHandler+0x1f0>)
	_VectorsRam[14] = pendablesrvreq_isr;
60001508:	str	r3, [r4, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
6000150a:	ldr	r3, [pc, #272]	; (6000161c <ResetHandler+0x1f4>)
6000150c:	str	r3, [r4, #60]	; 0x3c
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
6000150e:	movs	r3, #99	; 0x63
60001510:	str	r3, [r5, #20]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001512:	movs	r3, #3
	SYST_CVR = 0;
60001514:	str	r7, [r5, #24]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001516:	str	r3, [r5, #16]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
60001518:	ldr	r3, [pc, #260]	; (60001620 <ResetHandler+0x1f8>)
6000151a:	str.w	r3, [r5, #3360]	; 0xd20
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
6000151e:	ldr.w	r3, [r5, #3580]	; 0xdfc
60001522:	orr.w	r3, r3, #16777216	; 0x1000000
60001526:	str.w	r3, [r5, #3580]	; 0xdfc
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000152a:	ldr	r3, [pc, #248]	; (60001624 <ResetHandler+0x1fc>)
6000152c:	ldr	r2, [r3, #0]
6000152e:	orr.w	r2, r2, #1
60001532:	str	r2, [r3, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001534:	ldr	r3, [r3, #4]
60001536:	str	r3, [r1, #0]
	usb_pll_start();	
60001538:	bl	60001c0c <usb_pll_start>
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
6000153c:	str.w	r9, [r6, #260]	; 0x104
	set_arm_clock(F_CPU);
60001540:	ldr	r0, [pc, #228]	; (60001628 <ResetHandler+0x200>)
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001542:	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
60001546:	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000154a:	str.w	sl, [r6, #240]	; 0xf0
	set_arm_clock(F_CPU);
6000154e:	bl	60001ef0 <__set_arm_clock_veneer>
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001552:	ldr.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
60001556:	ldr	r3, [pc, #212]	; (6000162c <ResetHandler+0x204>)
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
60001558:	ldr	r2, [pc, #212]	; (60001630 <ResetHandler+0x208>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000155a:	orr.w	r1, r1, #12288	; 0x3000
6000155e:	str.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
60001562:	str	r7, [r3, #0]
	PIT_TCTRL0 = 0;
60001564:	str.w	r7, [r3, #264]	; 0x108
	PIT_TCTRL1 = 0;
60001568:	str.w	r7, [r3, #280]	; 0x118
	PIT_TCTRL2 = 0;
6000156c:	str.w	r7, [r3, #296]	; 0x128
	PIT_TCTRL3 = 0;
60001570:	str.w	r7, [r3, #312]	; 0x138
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
60001574:	ldr	r3, [r2, #56]	; 0x38
60001576:	lsls	r3, r3, #31
60001578:	bmi.n	6000158c <ResetHandler+0x164>
		SNVS_LPSRTCMR = 1546300800u >> 17;
6000157a:	movw	r3, #11797	; 0x2e15
		SNVS_LPSRTCLR = 1546300800u << 15;
6000157e:	ldr	r1, [pc, #180]	; (60001634 <ResetHandler+0x20c>)
60001580:	str	r1, [r2, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
60001582:	str	r3, [r2, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
60001584:	ldr	r3, [r2, #56]	; 0x38
60001586:	orr.w	r3, r3, #1
6000158a:	str	r3, [r2, #56]	; 0x38
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
6000158c:	ldr	r2, [pc, #160]	; (60001630 <ResetHandler+0x208>)
6000158e:	ldr	r4, [pc, #168]	; (60001638 <ResetHandler+0x210>)
60001590:	ldr	r3, [r2, #8]
60001592:	orr.w	r3, r3, #65537	; 0x10001
60001596:	str	r3, [r2, #8]
	configure_external_ram();
60001598:	bl	60001888 <configure_external_ram>
	analog_init();
6000159c:	bl	60001e60 <analog_init>
	pwm_init();
600015a0:	bl	60001ec0 <__pwm_init_veneer>
	tempmon_init();
600015a4:	bl	60001c68 <tempmon_init>
	startup_middle_hook();
600015a8:	bl	60001788 <startup_default_middle_hook>
// Returns the number of milliseconds since your program started running.
// This 32 bit number will roll back to zero after about 49.7 days.  For a
// simpler way to build delays or timeouts, consider using elapsedMillis.
static inline uint32_t millis(void)
{
	return systick_millis_count;
600015ac:	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015ae:	cmp	r3, #19
600015b0:	bls.n	600015ac <ResetHandler+0x184>
	usb_init();
600015b2:	bl	60001648 <usb_init>
600015b6:	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_AFTER + TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015b8:	cmp.w	r3, #300	; 0x12c
600015bc:	bcc.n	600015b6 <ResetHandler+0x18e>
	startup_late_hook();
600015be:	bl	6000178c <startup_default_late_hook>
	__libc_init_array();
600015c2:	bl	60001f08 <____libc_init_array_veneer>
	main();
600015c6:	bl	60001ee8 <__main_veneer>
	while (1) asm("WFI");
600015ca:	wfi
600015cc:	b.n	600015ca <ResetHandler+0x1a2>
600015ce:	nop
600015d0:	.word	0xaaaaaabf
600015d4:	.word	0x400ac000
600015d8:	.word	0x00200007
600015dc:	.word	0x20068000
600015e0:	.word	0x400d8000
600015e4:	.word	0x000136b8
600015e8:	.word	0x60002378
600015ec:	.word	0x00000000
600015f0:	.word	0x20001ec0
600015f4:	.word	0x60015a34
600015f8:	.word	0x20000000
600015fc:	.word	0x20007ba0
60001600:	.word	0x20001ec0
60001604:	.word	0x20001c00
60001608:	.word	0x0000b8c1
6000160c:	.word	0xe000e400
60001610:	.word	0xe000e4a0
60001614:	.word	0x0000c28d
60001618:	.word	0x20007ae8
6000161c:	.word	0x0000c291
60001620:	.word	0x20200000
60001624:	.word	0xe0001000
60001628:	.word	0x016e3600
6000162c:	.word	0x40084000
60001630:	.word	0x400d4000
60001634:	.word	0x56c00000
60001638:	.word	0x20007aec
6000163c:	.word	0x2018101b
60001640:	.word	0x13110d0c
60001644:	.word	0x400fc000

60001648 <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001648:	ldr	r3, [pc, #196]	; (60001710 <usb_init+0xc8>)
6000164a:	movw	r2, #3937	; 0xf61
{
6000164e:	push	{r4, lr}
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001650:	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001654:	movw	r4, #1028	; 0x404
	usb_init_serialnumber();
60001658:	bl	60001ef8 <__usb_init_serialnumber_veneer>
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
6000165c:	ldr	r2, [pc, #180]	; (60001714 <usb_init+0xcc>)
	USB1_BURSTSIZE = 0x0404;
6000165e:	ldr	r1, [pc, #184]	; (60001718 <usb_init+0xd0>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001660:	ldr.w	r3, [r2, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001664:	ldr	r0, [pc, #180]	; (6000171c <usb_init+0xd4>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001666:	orr.w	r3, r3, #3
6000166a:	str.w	r3, [r2, #128]	; 0x80
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
6000166e:	ldr	r3, [pc, #176]	; (60001720 <usb_init+0xd8>)
	USB1_BURSTSIZE = 0x0404;
60001670:	str.w	r4, [r1, #352]	; 0x160
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001674:	ldr	r2, [r0, #0]
60001676:	tst	r2, r3
60001678:	bne.n	60001682 <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
6000167a:	ldr.w	r3, [r1, #424]	; 0x1a8
6000167e:	lsls	r2, r3, #30
60001680:	beq.n	600016ba <usb_init+0x72>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001682:	ldr	r2, [pc, #148]	; (60001718 <usb_init+0xd0>)
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
60001684:	mov.w	r1, #2147483648	; 0x80000000
60001688:	ldr	r3, [pc, #144]	; (6000171c <usb_init+0xd4>)
6000168a:	str	r1, [r3, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
6000168c:	ldr.w	r3, [r2, #320]	; 0x140
60001690:	orr.w	r3, r3, #2
60001694:	str.w	r3, [r2, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
60001698:	ldr.w	r3, [r2, #320]	; 0x140
6000169c:	lsls	r3, r3, #30
6000169e:	bmi.n	60001698 <usb_init+0x50>
		NVIC_CLEAR_PENDING(IRQ_USB1);
600016a0:	mov.w	r0, #131072	; 0x20000
600016a4:	mov.w	r1, #3758153728	; 0xe000e000
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
600016a8:	ldr	r3, [pc, #112]	; (6000171c <usb_init+0xd4>)
600016aa:	mov.w	r2, #2147483648	; 0x80000000
		NVIC_CLEAR_PENDING(IRQ_USB1);
600016ae:	str.w	r0, [r1, #652]	; 0x28c
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
600016b2:	movs	r0, #25
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
600016b4:	str	r2, [r3, #56]	; 0x38
		delay(25);
600016b6:	bl	60001ed8 <__delay_veneer>
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
600016ba:	ldr	r2, [pc, #96]	; (6000171c <usb_init+0xd4>)
600016bc:	mov.w	r0, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600016c0:	ldr	r4, [pc, #84]	; (60001718 <usb_init+0xd0>)
	USBPHY1_PWD = 0;
600016c2:	movs	r1, #0
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
600016c4:	str	r0, [r2, #56]	; 0x38
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600016c6:	movs	r0, #10
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600016c8:	ldr	r3, [pc, #88]	; (60001724 <usb_init+0xdc>)
	USBPHY1_PWD = 0;
600016ca:	str	r1, [r2, #0]
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600016cc:	mov.w	r2, #896	; 0x380
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600016d0:	str.w	r0, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600016d4:	mov	r0, r3
600016d6:	bl	60001ee0 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
	endpoint_queue_head[1].config = (64 << 16);
600016da:	mov.w	r2, #4194304	; 0x400000
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600016de:	mov	r3, r0
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
600016e0:	mov.w	r0, #4227072	; 0x408000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
600016e4:	movw	r1, #323	; 0x143
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
600016e8:	str	r0, [r3, #0]
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
600016ea:	str.w	r3, [r4, #344]	; 0x158
	endpoint_queue_head[1].config = (64 << 16);
600016ee:	str	r2, [r3, #64]	; 0x40
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* volatile _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
600016f0:	ldr	r3, [pc, #52]	; (60001728 <usb_init+0xe0>)
600016f2:	ldr	r2, [pc, #56]	; (6000172c <usb_init+0xe4>)
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
600016f4:	str.w	r1, [r4, #328]	; 0x148
600016f8:	str.w	r2, [r3, #516]	; 0x204
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &usb_isr;
	attachInterruptVector(IRQ_USB1, &usb_isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
600016fc:	mov.w	r2, #3758153728	; 0xe000e000
60001700:	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001704:	movs	r3, #1
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001706:	str.w	r1, [r2, #268]	; 0x10c
	USB1_USBCMD = USB_USBCMD_RS;
6000170a:	str.w	r3, [r4, #320]	; 0x140
	//transfer_log_head = 0;
	//transfer_log_count = 0;
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}
6000170e:	pop	{r4, pc}
60001710:	.word	0x400d8000
60001714:	.word	0x400fc000
60001718:	.word	0x402e0000
6000171c:	.word	0x400d9000
60001720:	.word	0x001e1c00
60001724:	.word	0x20000000
60001728:	.word	0x20001c00
6000172c:	.word	0x0000ae75

60001730 <_reboot_Teensyduino_>:


FLASHMEM void _reboot_Teensyduino_(void)
{
60001730:	push	{r3, lr}
	if (!(HW_OCOTP_CFG5 & 0x02)) {
60001732:	ldr	r3, [pc, #56]	; (6000176c <_reboot_Teensyduino_+0x3c>)
60001734:	ldr	r3, [r3, #96]	; 0x60
60001736:	lsls	r3, r3, #30
60001738:	bmi.n	6000173c <_reboot_Teensyduino_+0xc>
		asm("bkpt #251"); // run bootloader
6000173a:	bkpt	0x00fb
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
6000173c:	cpsid	i
		USB1_USBCMD = 0;
6000173e:	ldr	r3, [pc, #48]	; (60001770 <_reboot_Teensyduino_+0x40>)
60001740:	movs	r0, #0
		IOMUXC_GPR_GPR16 = 0x00200003;
60001742:	ldr	r2, [pc, #48]	; (60001774 <_reboot_Teensyduino_+0x44>)
		USB1_USBCMD = 0;
60001744:	str.w	r0, [r3, #320]	; 0x140
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001748:	add.w	r3, r3, #3758096384	; 0xe0000000
		IOMUXC_GPR_GPR16 = 0x00200003;
6000174c:	ldr	r1, [pc, #40]	; (60001778 <_reboot_Teensyduino_+0x48>)
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
6000174e:	sub.w	r3, r3, #913408	; 0xdf000
		IOMUXC_GPR_GPR16 = 0x00200003;
60001752:	str	r1, [r2, #64]	; 0x40
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001754:	mov	sp, r3
		__asm__ volatile("dsb":::"memory");
60001756:	dsb	sy
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
6000175a:	mov.w	r3, #2097152	; 0x200000
		*p = 0xEB120000;
6000175e:	ldr	r0, [pc, #28]	; (6000177c <_reboot_Teensyduino_+0x4c>)
60001760:	ldr	r2, [pc, #28]	; (60001780 <_reboot_Teensyduino_+0x50>)
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001762:	ldr	r3, [r3, #28]
		*p = 0xEB120000;
60001764:	str	r2, [r0, #0]
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001766:	ldr	r3, [r3, #8]
60001768:	blx	r3
	}
	__builtin_unreachable();
6000176a:	nop
6000176c:	.word	0x401f4400
60001770:	.word	0x402e0000
60001774:	.word	0x400ac000
60001778:	.word	0x00200003
6000177c:	.word	0x20208000
60001780:	.word	0xeb120000

60001784 <startup_default_early_hook>:
FLASHMEM void startup_default_early_hook(void) {}
60001784:	bx	lr
60001786:	nop

60001788 <startup_default_middle_hook>:
60001788:	bx	lr
6000178a:	nop

6000178c <startup_default_late_hook>:
6000178c:	bx	lr
6000178e:	nop

60001790 <configure_cache>:
{
60001790:	push	{r4}
	SCB_MPU_CTRL = 0; // turn off MPU
60001792:	mov.w	r3, #3758153728	; 0xe000e000
60001796:	movs	r1, #0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001798:	movs	r4, #16
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
6000179a:	ldr	r0, [pc, #172]	; (60001848 <configure_cache+0xb8>)
	SCB_MPU_CTRL = 0; // turn off MPU
6000179c:	str.w	r1, [r3, #3476]	; 0xd94
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600017a0:	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
600017a4:	movs	r4, #17
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600017a6:	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600017aa:	ldr	r0, [pc, #160]	; (6000184c <configure_cache+0xbc>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
600017ac:	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
600017b0:	movs	r4, #18
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600017b2:	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600017b6:	ldr	r0, [pc, #152]	; (60001850 <configure_cache+0xc0>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
600017b8:	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600017bc:	ldr	r2, [pc, #148]	; (60001854 <configure_cache+0xc4>)
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600017be:	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
600017c2:	ldr	r4, [pc, #148]	; (60001858 <configure_cache+0xc8>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600017c4:	orr.w	r2, r2, #21
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600017c8:	ldr	r0, [pc, #144]	; (6000185c <configure_cache+0xcc>)
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
600017ca:	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600017ce:	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600017d2:	ldr	r4, [pc, #140]	; (60001860 <configure_cache+0xd0>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600017d4:	ldr	r0, [pc, #140]	; (60001864 <configure_cache+0xd4>)
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600017d6:	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600017da:	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600017de:	ldr	r4, [pc, #136]	; (60001868 <configure_cache+0xd8>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600017e0:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
600017e4:	ldr	r0, [pc, #132]	; (6000186c <configure_cache+0xdc>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600017e6:	ldr	r2, [pc, #136]	; (60001870 <configure_cache+0xe0>)
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600017e8:	str.w	r4, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
600017ec:	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600017f0:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600017f4:	add.w	r2, r2, #327680	; 0x50000
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
600017f8:	ldr	r4, [pc, #120]	; (60001874 <configure_cache+0xe4>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600017fa:	adds	r2, #12
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
600017fc:	ldr	r0, [pc, #120]	; (60001878 <configure_cache+0xe8>)
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
600017fe:	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001802:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001806:	ldr	r2, [pc, #116]	; (6000187c <configure_cache+0xec>)
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
60001808:	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
6000180c:	ldr	r4, [pc, #112]	; (60001880 <configure_cache+0xf0>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
6000180e:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
60001812:	movs	r2, #1
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001814:	ldr	r0, [pc, #108]	; (60001884 <configure_cache+0xf4>)
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001816:	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
6000181a:	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
6000181e:	str.w	r2, [r3, #3476]	; 0xd94
	asm("dsb");
60001822:	dsb	sy
	asm("isb");
60001826:	isb	sy
	SCB_CACHE_ICIALLU = 0;
6000182a:	str.w	r1, [r3, #3920]	; 0xf50
	asm("dsb");
6000182e:	dsb	sy
	asm("isb");
60001832:	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001836:	ldr.w	r2, [r3, #3348]	; 0xd14
}
6000183a:	ldr.w	r4, [sp], #4
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
6000183e:	orr.w	r2, r2, #196608	; 0x30000
60001842:	str.w	r2, [r3, #3348]	; 0xd14
}
60001846:	bx	lr
60001848:	.word	0x1000003f
6000184c:	.word	0x03080025
60001850:	.word	0x00100009
60001854:	.word	0x20007ba0
60001858:	.word	0x00200013
6000185c:	.word	0x07020021
60001860:	.word	0x20000014
60001864:	.word	0x13080025
60001868:	.word	0x10000009
6000186c:	.word	0x20200016
60001870:	.word	0x130b0027
60001874:	.word	0x40000017
60001878:	.word	0x60000018
6000187c:	.word	0x070b002f
60001880:	.word	0x70000019
60001884:	.word	0x130b002f

60001888 <configure_external_ram>:
{
60001888:	push	{r4, r5, r6, r7, lr}
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
6000188a:	ldr	r3, [pc, #736]	; (60001b6c <configure_external_ram+0x2e4>)
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
6000188c:	movs	r2, #24
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
6000188e:	ldr	r6, [pc, #736]	; (60001b70 <configure_external_ram+0x2e8>)
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
60001890:	movs	r0, #1
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
60001892:	ldr	r7, [pc, #736]	; (60001b74 <configure_external_ram+0x2ec>)
{
60001894:	sub	sp, #12
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001896:	str.w	r6, [r3, #604]	; 0x25c
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
6000189a:	ldr	r1, [pc, #732]	; (60001b78 <configure_external_ram+0x2f0>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
6000189c:	str.w	r7, [r3, #608]	; 0x260
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600018a0:	ldr	r5, [pc, #728]	; (60001b7c <configure_external_ram+0x2f4>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600018a2:	str.w	r6, [r3, #612]	; 0x264
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
600018a6:	sub.w	r6, r6, #45056	; 0xb000
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
600018aa:	ldr	r4, [pc, #724]	; (60001b80 <configure_external_ram+0x2f8>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
600018ac:	str.w	r6, [r3, #616]	; 0x268
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600018b0:	str.w	r5, [r3, #620]	; 0x26c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600018b4:	str.w	r5, [r3, #624]	; 0x270
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600018b8:	str.w	r5, [r3, #628]	; 0x274
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600018bc:	str.w	r5, [r3, #632]	; 0x278
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
600018c0:	movw	r5, #34572	; 0x870c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
600018c4:	str	r2, [r3, #108]	; 0x6c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_23 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DQS
600018c6:	str	r2, [r3, #112]	; 0x70
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_24 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS0_B (RAM)
600018c8:	str	r2, [r3, #116]	; 0x74
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_25 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SCLK
600018ca:	str	r2, [r3, #120]	; 0x78
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
600018cc:	str	r2, [r3, #124]	; 0x7c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
600018ce:	str.w	r2, [r3, #128]	; 0x80
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
600018d2:	str.w	r2, [r3, #132]	; 0x84
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3
600018d6:	str.w	r2, [r3, #136]	; 0x88
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
600018da:	str.w	r0, [r1, #812]	; 0x32c
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
600018de:	ldr	r2, [pc, #676]	; (60001b84 <configure_external_ram+0x2fc>)
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT = 1; // GPIO_EMC_26 for Mode: ALT8
600018e0:	str.w	r0, [r1, #816]	; 0x330
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT = 1; // GPIO_EMC_27 for Mode: ALT8
600018e4:	str.w	r0, [r1, #820]	; 0x334
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
600018e8:	str.w	r0, [r1, #824]	; 0x338
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
600018ec:	str.w	r0, [r1, #828]	; 0x33c
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8
600018f0:	str.w	r0, [r1, #848]	; 0x350
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
600018f4:	ldr	r1, [r4, #24]
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
600018f6:	ldr	r3, [pc, #656]	; (60001b88 <configure_external_ram+0x300>)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
600018f8:	ands	r2, r1
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
600018fa:	ldr	r0, [pc, #656]	; (60001b8c <configure_external_ram+0x304>)
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
600018fc:	ldr	r1, [pc, #656]	; (60001b90 <configure_external_ram+0x308>)
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
600018fe:	orrs	r3, r2
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001900:	ldr	r2, [pc, #656]	; (60001b94 <configure_external_ram+0x30c>)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001902:	str	r3, [r4, #24]
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);
60001904:	ldr.w	r3, [r4, #132]	; 0x84
60001908:	orr.w	r3, r3, #12
6000190c:	str.w	r3, [r4, #132]	; 0x84
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
60001910:	mov.w	r4, #4294967295
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
60001914:	ldr	r3, [r0, #0]
60001916:	orr.w	r3, r3, #2
6000191a:	str	r3, [r0, #0]
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
6000191c:	ldr	r3, [r0, #0]
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
6000191e:	ands	r3, r5
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
60001920:	mov.w	r5, #8192	; 0x2000
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001924:	orrs	r2, r3
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001926:	ldr	r3, [pc, #624]	; (60001b98 <configure_external_ram+0x310>)
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60001928:	str	r2, [r0, #0]
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
6000192a:	str	r4, [r0, #4]
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
6000192c:	ldr	r2, [r1, #8]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
6000192e:	ldr	r4, [pc, #620]	; (60001b9c <configure_external_ram+0x314>)
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001930:	ands	r3, r2
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001932:	ldr	r2, [pc, #620]	; (60001ba0 <configure_external_ram+0x318>)
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
60001934:	orr.w	r3, r3, #536870912	; 0x20000000
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001938:	str	r3, [r0, #8]
	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
6000193a:	ldr	r3, [r0, #12]
6000193c:	bic.w	r3, r3, #120	; 0x78
60001940:	str	r3, [r0, #12]
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001942:	ldr	r3, [r0, #32]
60001944:	ands	r3, r2
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001946:	orrs	r3, r4
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001948:	str	r3, [r0, #32]
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
6000194a:	ldr	r3, [r0, #32]
6000194c:	ands	r3, r2
	FLEXSPI2_AHBRXBUF2CR0 = mask;
6000194e:	ldr	r2, [pc, #596]	; (60001ba4 <configure_external_ram+0x31c>)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001950:	orrs	r3, r4
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001952:	ldr	r4, [pc, #596]	; (60001ba8 <configure_external_ram+0x320>)
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001954:	str	r3, [r0, #36]	; 0x24
	FLEXSPI2_AHBRXBUF2CR0 = mask;
60001956:	str	r2, [r0, #40]	; 0x28
	FLEXSPI2_AHBRXBUF3CR0 = mask;
60001958:	str	r2, [r0, #44]	; 0x2c
	FLEXSPI2_INTEN = 0;
6000195a:	movs	r2, #0
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
6000195c:	ldr.w	r3, [r1, #184]	; 0xb8
60001960:	bic.w	r3, r3, #63	; 0x3f
60001964:	orr.w	r3, r3, #1
60001968:	str.w	r3, [r0, #184]	; 0xb8
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
6000196c:	ldr.w	r3, [r1, #188]	; 0xbc
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001970:	ldr	r1, [pc, #568]	; (60001bac <configure_external_ram+0x324>)
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
60001972:	bic.w	r3, r3, #63	; 0x3f
60001976:	orr.w	r3, r3, #1
6000197a:	str.w	r3, [r0, #188]	; 0xbc
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
6000197e:	movw	r3, #1541	; 0x605
	FLEXSPI2_INTEN = 0;
60001982:	str	r2, [r0, #16]
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
60001984:	str	r5, [r0, #96]	; 0x60
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001986:	str	r4, [r0, #112]	; 0x70
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001988:	str.w	r3, [r0, #128]	; 0x80
	FLEXSPI2_FLSHA2CR0 = 0x2000; // 8 MByte
6000198c:	str	r5, [r0, #100]	; 0x64
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
6000198e:	str	r4, [r0, #116]	; 0x74
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001990:	movs	r4, #2
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001992:	str.w	r3, [r0, #132]	; 0x84
	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
60001996:	ldr	r3, [r0, #0]
60001998:	bic.w	r3, r3, #2
6000199c:	str	r3, [r0, #0]
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
6000199e:	str	r1, [r0, #24]
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600019a0:	ldr	r3, [pc, #524]	; (60001bb0 <configure_external_ram+0x328>)
	for (int i=0; i < 64; i++) luttable[i] = 0;
600019a2:	ldr	r1, [pc, #528]	; (60001bb4 <configure_external_ram+0x32c>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600019a4:	str	r4, [r0, #28]
	for (int i=0; i < 64; i++) luttable[i] = 0;
600019a6:	str.w	r2, [r3], #4
600019aa:	cmp	r3, r1
600019ac:	bne.n	600019a6 <configure_external_ram+0x11e>
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
600019ae:	ldr	r2, [pc, #476]	; (60001b8c <configure_external_ram+0x304>)
600019b0:	ldr	r3, [r2, #0]
600019b2:	orr.w	r3, r3, #1
600019b6:	str	r3, [r2, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
600019b8:	ldr	r3, [r2, #0]
600019ba:	ands.w	r3, r3, #1
600019be:	bne.n	600019b8 <configure_external_ram+0x130>
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600019c0:	ldr	r0, [pc, #488]	; (60001bac <configure_external_ram+0x324>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600019c2:	movs	r1, #2
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
600019c4:	movw	r4, #1781	; 0x6f5
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600019c8:	str	r0, [r2, #24]
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
600019ca:	movw	r0, #1177	; 0x499
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600019ce:	str	r1, [r2, #28]
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
600019d0:	movw	r1, #1126	; 0x466
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
600019d4:	str.w	r4, [r2, #512]	; 0x200
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
600019d8:	movw	r4, #9217	; 0x2401
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
600019dc:	str.w	r1, [r2, #528]	; 0x210
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
600019e0:	ldr	r1, [pc, #468]	; (60001bb8 <configure_external_ram+0x330>)
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
600019e2:	str.w	r0, [r2, #544]	; 0x220
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
600019e6:	str.w	r1, [r2, #560]	; 0x230
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
600019ea:	movw	r1, #1077	; 0x435
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
600019ee:	ldr	r0, [pc, #460]	; (60001bbc <configure_external_ram+0x334>)
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
600019f0:	str.w	r4, [r2, #564]	; 0x234
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
600019f4:	str.w	r1, [r2, #576]	; 0x240
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
600019f8:	ldr	r4, [pc, #452]	; (60001bc0 <configure_external_ram+0x338>)
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
600019fa:	str.w	r0, [r2, #592]	; 0x250
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
600019fe:	movw	r0, #8705	; 0x2201
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
60001a02:	ldr	r1, [pc, #448]	; (60001bc4 <configure_external_ram+0x33c>)
60001a04:	str.w	r1, [r2, #596]	; 0x254
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a08:	movs	r1, #1
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
60001a0a:	str.w	r4, [r2, #608]	; 0x260
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
60001a0e:	str.w	r0, [r2, #612]	; 0x264
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a12:	ldr	r0, [pc, #376]	; (60001b8c <configure_external_ram+0x304>)
	FLEXSPI2_IPCR0 = addr;
60001a14:	str.w	r3, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a18:	str.w	r3, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a1c:	str.w	r1, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a20:	ldr	r3, [r0, #20]
60001a22:	lsls	r2, r3, #31
60001a24:	bpl.n	60001a20 <configure_external_ram+0x198>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a26:	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001a28:	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a2a:	mov.w	r2, #65536	; 0x10000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a2e:	ldr	r1, [pc, #348]	; (60001b8c <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a30:	str	r3, [r0, #20]
	FLEXSPI2_IPCR0 = addr;
60001a32:	str.w	r4, [r0, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a36:	str.w	r2, [r0, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a3a:	str.w	r3, [r0, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a3e:	ldr	r3, [r1, #20]
60001a40:	lsls	r3, r3, #31
60001a42:	bpl.n	60001a3e <configure_external_ram+0x1b6>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a44:	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001a46:	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a48:	mov.w	r0, #131072	; 0x20000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a4c:	ldr	r2, [pc, #316]	; (60001b8c <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a4e:	str	r3, [r1, #20]
	FLEXSPI2_IPCR0 = addr;
60001a50:	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a54:	str.w	r0, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a58:	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a5c:	ldr	r3, [r2, #20]
60001a5e:	lsls	r7, r3, #31
60001a60:	bpl.n	60001a5c <configure_external_ram+0x1d4>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a62:	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001a64:	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001a66:	ldr	r0, [pc, #352]	; (60001bc8 <configure_external_ram+0x340>)
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a68:	ldr	r1, [pc, #288]	; (60001b8c <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a6a:	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
60001a6c:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001a70:	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a74:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a78:	ldr	r3, [r1, #20]
60001a7a:	lsls	r6, r3, #31
60001a7c:	bpl.n	60001a78 <configure_external_ram+0x1f0>
	uint32_t id = FLEXSPI2_RFDR0;
60001a7e:	ldr.w	r3, [r1, #256]	; 0x100
	if (flexspi2_psram_id(0) == 0x5D0D) {
60001a82:	movw	r2, #23821	; 0x5d0d
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001a86:	movs	r0, #33	; 0x21
	return id & 0xFFFF;
60001a88:	uxth	r3, r3
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001a8a:	str	r0, [r1, #20]
	if (flexspi2_psram_id(0) == 0x5D0D) {
60001a8c:	cmp	r3, r2
60001a8e:	bne.n	60001b5c <configure_external_ram+0x2d4>
	FLEXSPI2_IPCR0 = addr;
60001a90:	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a92:	mov.w	r2, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a96:	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a98:	ldr	r0, [pc, #240]	; (60001b8c <configure_external_ram+0x304>)
	FLEXSPI2_IPCR0 = addr;
60001a9a:	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a9e:	str.w	r2, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001aa2:	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001aa6:	ldr	r3, [r0, #20]
60001aa8:	lsls	r5, r3, #31
60001aaa:	bpl.n	60001aa6 <configure_external_ram+0x21e>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001aac:	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001aae:	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001ab2:	movs	r1, #0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001ab4:	ldr	r2, [pc, #212]	; (60001b8c <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001ab6:	str	r3, [r0, #20]
	FLEXSPI2_IPCR0 = addr;
60001ab8:	str.w	r4, [r0, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001abc:	str.w	r1, [r0, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001ac0:	str.w	r3, [r0, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001ac4:	ldr	r3, [r2, #20]
60001ac6:	lsls	r4, r3, #31
60001ac8:	bpl.n	60001ac4 <configure_external_ram+0x23c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001aca:	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001acc:	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001ad0:	mov.w	r0, #65536	; 0x10000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001ad4:	ldr	r1, [pc, #180]	; (60001b8c <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001ad6:	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
60001ad8:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001adc:	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001ae0:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001ae4:	ldr	r3, [r1, #20]
60001ae6:	lsls	r0, r3, #31
60001ae8:	bpl.n	60001ae4 <configure_external_ram+0x25c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001aea:	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001aec:	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001af0:	mov.w	r0, #131072	; 0x20000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001af4:	ldr	r2, [pc, #148]	; (60001b8c <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001af6:	str	r3, [r1, #20]
	FLEXSPI2_IPCR0 = addr;
60001af8:	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001afc:	str.w	r0, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001b00:	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b04:	ldr	r3, [r2, #20]
60001b06:	lsls	r1, r3, #31
60001b08:	bpl.n	60001b04 <configure_external_ram+0x27c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b0a:	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001b0c:	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001b10:	ldr	r0, [pc, #180]	; (60001bc8 <configure_external_ram+0x340>)
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b12:	ldr	r1, [pc, #120]	; (60001b8c <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b14:	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
60001b16:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001b1a:	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001b1e:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b22:	ldr	r3, [r1, #20]
60001b24:	lsls	r2, r3, #31
60001b26:	bpl.n	60001b22 <configure_external_ram+0x29a>
	uint32_t id = FLEXSPI2_RFDR0;
60001b28:	ldr.w	r3, [r1, #256]	; 0x100
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001b2c:	movw	r2, #23821	; 0x5d0d
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001b30:	movs	r0, #33	; 0x21
	return id & 0xFFFF;
60001b32:	uxth	r3, r3
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001b34:	str	r0, [r1, #20]
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001b36:	cmp	r3, r2
60001b38:	beq.n	60001bdc <configure_external_ram+0x354>
60001b3a:	movs	r5, #8
60001b3c:	mov.w	r4, #8388608	; 0x800000
			external_psram_size * 0x100000 -
60001b40:	ldr	r1, [pc, #136]	; (60001bcc <configure_external_ram+0x344>)
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001b42:	movs	r0, #0
			external_psram_size * 0x100000 -
60001b44:	ldr	r3, [pc, #136]	; (60001bd0 <configure_external_ram+0x348>)
			external_psram_size = 16;
60001b46:	ldr	r2, [pc, #140]	; (60001bd4 <configure_external_ram+0x34c>)
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001b48:	str	r0, [sp, #0]
			external_psram_size = 16;
60001b4a:	strb	r5, [r2, #0]
			external_psram_size * 0x100000 -
60001b4c:	subs	r2, r3, r1
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001b4e:	movs	r3, #1
60001b50:	ldr	r0, [pc, #132]	; (60001bd8 <configure_external_ram+0x350>)
60001b52:	add	r2, r4
60001b54:	bl	60001ed0 <__sm_set_pool_veneer>
}
60001b58:	add	sp, #12
60001b5a:	pop	{r4, r5, r6, r7, pc}
		memset(&extmem_smalloc_pool, 0, sizeof(extmem_smalloc_pool));
60001b5c:	ldr	r3, [pc, #120]	; (60001bd8 <configure_external_ram+0x350>)
60001b5e:	movs	r2, #0
60001b60:	strd	r2, r2, [r3]
60001b64:	strd	r2, r2, [r3, #8]
}
60001b68:	add	sp, #12
60001b6a:	pop	{r4, r5, r6, r7, pc}
60001b6c:	.word	0x401f8000
60001b70:	.word	0x0001b0f9
60001b74:	.word	0x000110f9
60001b78:	.word	0x401f8400
60001b7c:	.word	0x000170f9
60001b80:	.word	0x400fc000
60001b84:	.word	0x1ffffcff
60001b88:	.word	0xa0000300
60001b8c:	.word	0x402a4000
60001b90:	.word	0x402a8000
60001b94:	.word	0xffff0012
60001b98:	.word	0x00f737ff
60001b9c:	.word	0x80000040
60001ba0:	.word	0x7cf0ff00
60001ba4:	.word	0x830f00ff
60001ba8:	.word	0x00020063
60001bac:	.word	0x5af05af0
60001bb0:	.word	0x402a4200
60001bb4:	.word	0x402a4300
60001bb8:	.word	0x3018049f
60001bbc:	.word	0x0a1806eb
60001bc0:	.word	0x0a180638
60001bc4:	.word	0x26013206
60001bc8:	.word	0x00030004
60001bcc:	.word	0x70000000
60001bd0:	.word	0x70000000
60001bd4:	.word	0x20007b64
60001bd8:	.word	0x200073a0
	FLEXSPI2_IPCR0 = addr;
60001bdc:	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001be0:	mov.w	r2, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001be4:	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001be6:	ldr	r0, [pc, #32]	; (60001c08 <configure_external_ram+0x380>)
	FLEXSPI2_IPCR0 = addr;
60001be8:	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001bec:	str.w	r2, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001bf0:	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001bf4:	ldr	r3, [r0, #20]
60001bf6:	lsls	r3, r3, #31
60001bf8:	bpl.n	60001bf4 <configure_external_ram+0x36c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001bfa:	movs	r3, #1
60001bfc:	movs	r5, #16
60001bfe:	mov.w	r4, #16777216	; 0x1000000
60001c02:	str	r3, [r0, #20]
			external_psram_size = 16;
60001c04:	b.n	60001b40 <configure_external_ram+0x2b8>
60001c06:	nop
60001c08:	.word	0x402a4000

60001c0c <usb_pll_start>:
{
60001c0c:	push	{r4, r5, r6, r7}
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001c0e:	ldr	r2, [pc, #84]	; (60001c64 <usb_pll_start+0x58>)
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001c10:	movs	r7, #64	; 0x40
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001c12:	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001c16:	mov.w	r6, #4096	; 0x1000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001c1a:	mov.w	r5, #8192	; 0x2000
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001c1e:	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001c22:	movw	r0, #12354	; 0x3042
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001c26:	ldr	r3, [r2, #16]
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001c28:	tst.w	r3, #2
60001c2c:	bne.n	60001c4c <usb_pll_start+0x40>
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
60001c2e:	tst.w	r3, #8192	; 0x2000
60001c32:	beq.n	60001c54 <usb_pll_start+0x48>
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
60001c34:	tst.w	r3, #4096	; 0x1000
60001c38:	beq.n	60001c58 <usb_pll_start+0x4c>
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
60001c3a:	cmp	r3, #0
60001c3c:	bge.n	60001c26 <usb_pll_start+0x1a>
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
60001c3e:	tst.w	r3, #65536	; 0x10000
60001c42:	bne.n	60001c5c <usb_pll_start+0x50>
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
60001c44:	lsls	r3, r3, #25
60001c46:	bpl.n	60001c60 <usb_pll_start+0x54>
}
60001c48:	pop	{r4, r5, r6, r7}
60001c4a:	bx	lr
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001c4c:	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60001c4e:	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001c50:	str	r0, [r2, #24]
			continue;
60001c52:	b.n	60001c26 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001c54:	str	r5, [r2, #20]
			continue;
60001c56:	b.n	60001c26 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001c58:	str	r6, [r2, #20]
			continue;
60001c5a:	b.n	60001c26 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001c5c:	str	r1, [r2, #24]
			continue;
60001c5e:	b.n	60001c26 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001c60:	str	r7, [r2, #20]
			continue;
60001c62:	b.n	60001c26 <usb_pll_start+0x1a>
60001c64:	.word	0x400d8000

60001c68 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001c68:	ldr	r2, [pc, #252]	; (60001d68 <tempmon_init+0x100>)

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001c6a:	movs	r0, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
60001c6c:	ldr	r1, [pc, #252]	; (60001d6c <tempmon_init+0x104>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001c6e:	vmov.f32	s11, #57	; 0x41c80000  25.0
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001c72:	ldr.w	r3, [r2, #128]	; 0x80
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001c76:	mov.w	ip, #0
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c7a:	vldr	s12, [pc, #244]	; 60001d70 <tempmon_init+0x108>
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001c7e:	bic.w	r3, r3, #1
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c82:	vldr	s10, [pc, #240]	; 60001d74 <tempmon_init+0x10c>
{
60001c86:	push	{r4, r5}
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001c88:	str.w	r3, [r2, #128]	; 0x80
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001c8c:	str.w	r0, [r2, #144]	; 0x90
  calibrationData = HW_OCOTP_ANA1;
60001c90:	ldr.w	r1, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001c94:	ldr	r5, [pc, #224]	; (60001d78 <tempmon_init+0x110>)
60001c96:	uxtb	r3, r1
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001c98:	ldr	r4, [pc, #224]	; (60001d7c <tempmon_init+0x114>)
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001c9a:	ldr	r0, [pc, #228]	; (60001d80 <tempmon_init+0x118>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001c9c:	str	r3, [r5, #0]
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001c9e:	vmov	s15, r3
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001ca2:	lsrs	r3, r1, #20
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001ca4:	ubfx	r1, r1, #8, #12
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001ca8:	vcvt.f32.s32	s15, s15
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001cac:	vmov	s13, r3
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001cb0:	vmov	s14, r1
60001cb4:	ldr	r3, [pc, #204]	; (60001d84 <tempmon_init+0x11c>)
60001cb6:	vcvt.f32.s32	s14, s14
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001cba:	str	r1, [r4, #0]
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001cbc:	vcvt.f32.s32	s13, s13
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001cc0:	ldr	r1, [pc, #196]	; (60001d88 <tempmon_init+0x120>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001cc2:	vsub.f32	s12, s15, s12
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001cc6:	vsub.f32	s10, s15, s10
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001cca:	vsub.f32	s13, s13, s14
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001cce:	vsub.f32	s15, s15, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001cd2:	vmul.f32	s12, s12, s13
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001cd6:	vstr	s13, [r3]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001cda:	vmul.f32	s10, s10, s13
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001cde:	ldr.w	r3, [r2, #128]	; 0x80
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001ce2:	vmul.f32	s9, s15, s13
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001ce6:	vstr	s15, [r0]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001cea:	vdiv.f32	s11, s12, s15
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001cee:	ldr	r0, [pc, #156]	; (60001d8c <tempmon_init+0x124>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001cf0:	vdiv.f32	s12, s10, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001cf4:	vdiv.f32	s13, s9, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001cf8:	vadd.f32	s11, s11, s14
60001cfc:	vcvt.u32.f32	s11, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d00:	vadd.f32	s12, s12, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001d04:	vmov	r4, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d08:	vcvt.u32.f32	s12, s12
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001d0c:	orr.w	r3, r3, r4, lsl #20
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d10:	vadd.f32	s15, s13, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001d14:	str.w	r3, [r2, #128]	; 0x80
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001d18:	vmov	r3, s12
60001d1c:	ldr.w	r4, [r2, #400]	; 0x190
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d20:	vcvt.u32.f32	s15, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001d24:	and.w	r1, r1, r3, lsl #16
60001d28:	orrs	r1, r4
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d2a:	vmov	r3, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001d2e:	str.w	r1, [r2, #400]	; 0x190
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001d32:	ubfx	r3, r3, #0, #12
60001d36:	ldr.w	r1, [r2, #400]	; 0x190
60001d3a:	orrs	r3, r1
60001d3c:	ldr	r1, [pc, #80]	; (60001d90 <tempmon_init+0x128>)
60001d3e:	str.w	r3, [r2, #400]	; 0x190
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
60001d42:	ldr.w	r3, [r2, #128]	; 0x80
60001d46:	orr.w	r3, r3, #2
60001d4a:	str.w	r3, [r2, #128]	; 0x80
60001d4e:	ldr	r3, [pc, #68]	; (60001d94 <tempmon_init+0x12c>)
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001d50:	strb.w	ip, [r0, #64]	; 0x40
60001d54:	str.w	r3, [r1, #320]	; 0x140
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001d58:	mov.w	r3, #3758153728	; 0xe000e000
60001d5c:	movs	r2, #1
}
60001d5e:	pop	{r4, r5}
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001d60:	str.w	r2, [r3, #264]	; 0x108
}
60001d64:	bx	lr
60001d66:	nop
60001d68:	.word	0x400d8100
60001d6c:	.word	0x401f4400
60001d70:	.word	0x42aa0000
60001d74:	.word	0x42b40000
60001d78:	.word	0x20007ad8
60001d7c:	.word	0x20007ad4
60001d80:	.word	0x20007adc
60001d84:	.word	0x20007ae0
60001d88:	.word	0x0fff0000
60001d8c:	.word	0xe000e400
60001d90:	.word	0x20001c00
60001d94:	.word	0x0000bb95

60001d98 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)>:
	unsigned int i;
	unsigned int maxnum = MAX_AUDIO_MEMORY / AUDIO_BLOCK_SAMPLES / 2;

	//Serial.println("AudioStream initialize_memory");
	//delay(10);
	if (num > maxnum) num = maxnum;
60001d98:	cmp.w	r1, #896	; 0x380
{
60001d9c:	push	{r3, r4, r5, r6, r7, lr}
60001d9e:	mov	r6, r1
60001da0:	mov	r7, r1
60001da2:	it	cs
60001da4:	movcs.w	r6, #896	; 0x380
60001da8:	mov	r5, r0
	__disable_irq();
60001daa:	cpsid	i
	memory_pool = data;
60001dac:	ldr	r3, [pc, #140]	; (60001e3c <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xa4>)
	memory_pool_first_mask = 0;
60001dae:	movs	r4, #0
	for (i=0; i < NUM_MASKS; i++) {
		memory_pool_available_mask[i] = 0;
60001db0:	movs	r2, #112	; 0x70
	memory_pool = data;
60001db2:	str	r0, [r3, #0]
		memory_pool_available_mask[i] = 0;
60001db4:	mov	r1, r4
	memory_pool_first_mask = 0;
60001db6:	ldr	r3, [pc, #136]	; (60001e40 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xa8>)
		memory_pool_available_mask[i] = 0;
60001db8:	ldr	r0, [pc, #136]	; (60001e44 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xac>)
	memory_pool_first_mask = 0;
60001dba:	strh	r4, [r3, #0]
		memory_pool_available_mask[i] = 0;
60001dbc:	bl	60001ee0 <__memset_veneer>
	}
	for (i=0; i < num; i++) {
60001dc0:	cbz	r7, 60001df6 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x5e>
60001dc2:	mov	r1, r4
60001dc4:	ldr	r0, [pc, #124]	; (60001e44 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xac>)
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
60001dc6:	mov.w	ip, #1
60001dca:	lsrs	r2, r1, #5
60001dcc:	and.w	r3, r1, #31
	for (i=0; i < num; i++) {
60001dd0:	adds	r1, #1
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
60001dd2:	ldr.w	r4, [r0, r2, lsl #2]
60001dd6:	lsl.w	r3, ip, r3
	for (i=0; i < num; i++) {
60001dda:	cmp	r6, r1
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
60001ddc:	orr.w	r3, r3, r4
60001de0:	str.w	r3, [r0, r2, lsl #2]
	for (i=0; i < num; i++) {
60001de4:	bhi.n	60001dca <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x32>
60001de6:	mov	r0, r5
60001de8:	movs	r3, #0
	}
	for (i=0; i < num; i++) {
		data[i].memory_pool_index = i;
60001dea:	strh	r3, [r0, #2]
	for (i=0; i < num; i++) {
60001dec:	adds	r3, #1
60001dee:	add.w	r0, r0, #260	; 0x104
60001df2:	cmp	r6, r3
60001df4:	bhi.n	60001dea <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x52>
	}
	if (update_scheduled == false) {
60001df6:	ldr	r4, [pc, #80]	; (60001e48 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xb0>)
60001df8:	ldrb	r5, [r4, #0]
60001dfa:	cbz	r5, 60001e00 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x68>
			float usec = 1e6 * AUDIO_BLOCK_SAMPLES / AUDIO_SAMPLE_RATE_EXACT;
			timer->begin(update_all, usec);
			update_setup();
		}
	}
	__enable_irq();
60001dfc:	cpsie	i
}
60001dfe:	pop	{r3, r4, r5, r6, r7, pc}
		IntervalTimer *timer = new IntervalTimer();
60001e00:	movs	r0, #8
60001e02:	bl	60001ec8 <___Znwj_veneer>
// some of these 4 possible instances may be in use by libraries.
class IntervalTimer {
private:
	static const uint32_t MAX_PERIOD = UINT32_MAX / (24000000 / 1000000);
public:
	constexpr IntervalTimer() {
60001e06:	movs	r2, #128	; 0x80
	// or false if all hardware timers are already in use.
	bool begin(void (*funct)(), float microseconds) {
		if (microseconds <= 0 || microseconds > MAX_PERIOD) return false;
		uint32_t cycles = (float)(24000000 / 1000000) * microseconds - 0.5f;
		if (cycles < 17) return false;
		return beginCycles(funct, cycles);
60001e08:	ldr	r1, [pc, #64]	; (60001e4c <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xb4>)
	constexpr IntervalTimer() {
60001e0a:	strb	r2, [r0, #4]
60001e0c:	str	r5, [r0, #0]
		return beginCycles(funct, cycles);
60001e0e:	ldr	r2, [pc, #64]	; (60001e50 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xb8>)
60001e10:	bl	60001f00 <___ZN13IntervalTimer11beginCyclesEPFvvEm_veneer>
// their constructors.
bool AudioStream::update_scheduled = false;

bool AudioStream::update_setup(void)
{
	if (update_scheduled) return false;
60001e14:	ldrb	r3, [r4, #0]
60001e16:	cmp	r3, #0
60001e18:	bne.n	60001dfc <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x64>
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
60001e1a:	ldr	r3, [pc, #56]	; (60001e54 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xbc>)
60001e1c:	ldr	r2, [pc, #56]	; (60001e58 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xc0>)
60001e1e:	str.w	r2, [r3, #344]	; 0x158
	attachInterruptVector(IRQ_SOFTWARE, software_isr);
	NVIC_SET_PRIORITY(IRQ_SOFTWARE, 208); // 255 = lowest priority
60001e22:	ldr	r1, [pc, #56]	; (60001e5c <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xc4>)
60001e24:	movs	r0, #208	; 0xd0
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
60001e26:	mov.w	r3, #3758153728	; 0xe000e000
60001e2a:	movs	r2, #64	; 0x40
	NVIC_SET_PRIORITY(IRQ_SOFTWARE, 208); // 255 = lowest priority
60001e2c:	strb.w	r0, [r1, #70]	; 0x46
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
60001e30:	str.w	r2, [r3, #264]	; 0x108
	update_scheduled = true;
60001e34:	movs	r3, #1
60001e36:	strb	r3, [r4, #0]
	__enable_irq();
60001e38:	cpsie	i
}
60001e3a:	pop	{r3, r4, r5, r6, r7, pc}
60001e3c:	.word	0x2000640c
60001e40:	.word	0x20007b3c
60001e44:	.word	0x20006414
60001e48:	.word	0x20007b5b
60001e4c:	.word	0x0000c529
60001e50:	.word	0x0001101b
60001e54:	.word	0x20001c00
60001e58:	.word	0x0000c535
60001e5c:	.word	0xe000e400

60001e60 <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001e60:	ldr	r3, [pc, #64]	; (60001ea4 <analog_init+0x44>)
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001e62:	movs	r0, #160	; 0xa0
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001e64:	ldr	r2, [pc, #64]	; (60001ea8 <analog_init+0x48>)
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001e66:	ldr	r1, [r3, #108]	; 0x6c
60001e68:	orr.w	r1, r1, #196608	; 0x30000
{
60001e6c:	push	{r4}
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001e6e:	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001e70:	movw	r4, #1591	; 0x637
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
60001e74:	ldr	r1, [r3, #108]	; 0x6c
60001e76:	orr.w	r1, r1, #768	; 0x300
60001e7a:	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001e7c:	str	r4, [r2, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001e7e:	str	r0, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) {
60001e80:	ldr	r3, [r2, #72]	; 0x48
60001e82:	lsls	r3, r3, #24
60001e84:	bmi.n	60001e80 <analog_init+0x20>
		//yield();
	}
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001e86:	ldr	r2, [pc, #36]	; (60001eac <analog_init+0x4c>)
60001e88:	movw	r1, #1591	; 0x637
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001e8c:	movs	r3, #160	; 0xa0
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001e8e:	str	r1, [r2, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001e90:	str	r3, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) {
60001e92:	ldr	r3, [r2, #72]	; 0x48
60001e94:	ands.w	r3, r3, #128	; 0x80
60001e98:	bne.n	60001e92 <analog_init+0x32>
		//yield();
	}
	calibrating = 0;
60001e9a:	ldr	r2, [pc, #20]	; (60001eb0 <analog_init+0x50>)
60001e9c:	strb	r3, [r2, #0]
}
60001e9e:	ldr.w	r4, [sp], #4
60001ea2:	bx	lr
60001ea4:	.word	0x400fc000
60001ea8:	.word	0x400c4000
60001eac:	.word	0x400c8000
60001eb0:	.word	0x20007b63

60001eb4 <_init>:
60001eb4:	push	{r3, r4, r5, r6, r7, lr}
60001eb6:	nop
60001eb8:	pop	{r3, r4, r5, r6, r7}
60001eba:	pop	{r3}
60001ebc:	mov	lr, r3
60001ebe:	bx	lr

60001ec0 <__pwm_init_veneer>:
60001ec0:	ldr.w	pc, [pc]	; 60001ec4 <__pwm_init_veneer+0x4>
60001ec4:	.word	0x0000bd5d

60001ec8 <___Znwj_veneer>:
60001ec8:	ldr.w	pc, [pc]	; 60001ecc <___Znwj_veneer+0x4>
60001ecc:	.word	0x0000d099

60001ed0 <__sm_set_pool_veneer>:
60001ed0:	ldr.w	pc, [pc]	; 60001ed4 <__sm_set_pool_veneer+0x4>
60001ed4:	.word	0x0000bb11

60001ed8 <__delay_veneer>:
60001ed8:	ldr.w	pc, [pc]	; 60001edc <__delay_veneer+0x4>
60001edc:	.word	0x0000b7c5

60001ee0 <__memset_veneer>:
60001ee0:	ldr.w	pc, [pc]	; 60001ee4 <__memset_veneer+0x4>
60001ee4:	.word	0x0000e065

60001ee8 <__main_veneer>:
60001ee8:	ldr.w	pc, [pc]	; 60001eec <__main_veneer+0x4>
60001eec:	.word	0x0000c519

60001ef0 <__set_arm_clock_veneer>:
60001ef0:	ldr.w	pc, [pc]	; 60001ef4 <__set_arm_clock_veneer+0x4>
60001ef4:	.word	0x0000a939

60001ef8 <__usb_init_serialnumber_veneer>:
60001ef8:	ldr.w	pc, [pc]	; 60001efc <__usb_init_serialnumber_veneer+0x4>
60001efc:	.word	0x0000c07d

60001f00 <___ZN13IntervalTimer11beginCyclesEPFvvEm_veneer>:
60001f00:	ldr.w	pc, [pc]	; 60001f04 <___ZN13IntervalTimer11beginCyclesEPFvvEm_veneer+0x4>
60001f04:	.word	0x0000d15d

60001f08 <____libc_init_array_veneer>:
60001f08:	ldr.w	pc, [pc]	; 60001f0c <____libc_init_array_veneer+0x4>
60001f0c:	.word	0x0000e2dd

60001f10 <__frame_dummy_init_array_entry>:
60001f10:	E...I.......A...
60001f20:	q...............
60001f30:	................
60001f40:	1...I...q.......
60001f50:	................
60001f60:	........1...= ..
60001f70:	U ..m ... ... ..
60001f80:	.$..5)..I0..

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <register_tm_clones>:
}
      20:	ldr	r0, [pc, #20]	; (38 <_teensy_model_identifier+0x13>)
      22:	ldr	r3, [pc, #24]	; (3c <_teensy_model_identifier+0x17>)
	__disable_irq();
	sof_usage |= (1 << interface);
	uint32_t intr = USB1_USBINTR;
	if (!(intr & USB_USBINTR_SRE)) {
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
		USB1_USBINTR = intr | USB_USBINTR_SRE;
      24:	subs	r3, r3, r0
      26:	lsrs	r1, r3, #31
	}
	__enable_irq();
      28:	add.w	r1, r1, r3, asr #2
}
      2c:	asrs	r1, r1, #1
      2e:	beq.n	36 <_teensy_model_identifier+0x11>
      30:	ldr	r3, [pc, #12]	; (40 <_teensy_model_identifier+0x1b>)
      32:	cbz	r3, 36 <_teensy_model_identifier+0x11>
      34:	bx	r3
      36:	bx	lr
	SNVS_LPSRTCMR = t >> 17;
	// start the SRTC
	SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
	while (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)); // wait
	// start the RTC and sync it to the SRTC
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
      38:	.word	0x20001ec0
      3c:	.word	0x20001ec0
}
      40:	.word	0x00000000

00000044 <frame_dummy>:
      44:	push	{r3, lr}
      46:	ldr	r3, [pc, #20]	; (5c <frame_dummy+0x18>)
  }
  m_vwd = dir;
  return true;

fail:
  return false;
      48:	cbz	r3, 52 <frame_dummy+0xe>
}
      4a:	ldr	r1, [pc, #20]	; (60 <frame_dummy+0x1c>)
      4c:	ldr	r0, [pc, #20]	; (64 <frame_dummy+0x20>)
      4e:	nop.w
		}
		NVIC_SET_PRIORITY(IRQ_PIT, top_priority);
		channel = 0;
	}
#endif
}
      52:	ldmia.w	sp!, {r3, lr}
      56:	b.w	20 <register_tm_clones>
	if (pin < NUM_DIGITAL_PINS) {
		cdPin_ = pin;
		pinMode(cdPin_, INPUT_PULLUP);
	} else {
		cdPin_ = 0xff;
		return false;
      5a:	nop
  m_vwd = dir;
  return true;

fail:
  return false;
}
      5c:	.word	0x00000000
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::open(uint32_t index, oflag_t oflag) {
  ExFatVolume* vol = ExFatVolume::cwv();
  return vol ? open(vol->vwd(), index, oflag) : false;
      60:	.word	0x2000764c
  m_attributes = FILE_ATTR_CLOSED;
      64:	.word	0x60018800

00000068 <Print::availableForWrite()>:
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
	virtual size_t write(const uint8_t *buffer, size_t size);
	virtual int availableForWrite(void)		{ return 0; }
      68:	movs	r0, #0
      6a:	bx	lr

0000006c <Print::flush()>:
	virtual void flush()				{ }
      6c:	bx	lr
  return rtn;
      6e:	nop

00000070 <SDFile::isOpen()>:
    return m_fFile   ? m_fFile->isHidden()
           : m_xFile ? m_xFile->isHidden()
                     : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() const { return m_fFile || m_xFile; }
      70:	ldr	r3, [r0, #80]	; 0x50
      72:	cbz	r3, 78 <SDFile::isOpen()+0x8>
      74:	movs	r0, #1
			sdfatfile.close();
		}
	}
	virtual bool isOpen() {
		return sdfatfile.isOpen();
	}
      76:	bx	lr
      78:	ldr	r0, [r0, #84]	; 0x54
      7a:	subs	r0, #0
      7c:	it	ne
      7e:	movne	r0, #1
      80:	bx	lr
  if (sep) {
    *--str = sep;
  }
  str = fmtBase10(str, n);
  if (n < 10) {
    *--str = '0';
      82:	nop

00000084 <I2S_32::isr32()>:
      84:	ldr	r3, [pc, #224]	; (168 <I2S_32::isr32()+0xe4>)
    char sign;
    if (tz & 0X40) {
      sign = '-';
      tz = -tz;
    } else {
      sign = '+';
      86:	ldr	r1, [pc, #228]	; (16c <I2S_32::isr32()+0xe8>)
      88:	ldr	r2, [pc, #228]	; (170 <I2S_32::isr32()+0xec>)
}
      8a:	push	{r4, r5, r6, r7, lr}
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
			break;
      8c:	ldr	r4, [r3, #0]
      8e:	ldrb	r0, [r3, #4]
      90:	ldr	r3, [r4, #16]
      92:	strb	r0, [r2, #31]
  if (from.m_fFile) {
    m_fFile = new (m_fileMem) FatFile;
    *m_fFile = *from.m_fFile;
  } else if (from.m_xFile) {
    m_xFile = new (m_fileMem) ExFatFile;
    *m_xFile = *from.m_xFile;
      94:	cmp	r3, r1
  }
  return *this;
}
      96:	bcs.n	b0 <I2S_32::isr32()+0x2c>
      98:	ldr	r3, [pc, #216]	; (174 <I2S_32::isr32()+0xf0>)
	dma.enable();

	I2S1_RCSR = I2S_RCSR_RE | I2S_RCSR_BCE | I2S_RCSR_FRDE | I2S_RCSR_FR;
	dma.attachInterrupt(isr);	
#endif	
}
      9a:	ldrb	r3, [r3, #0]
      9c:	cmp	r3, #0
      9e:	beq.n	162 <I2S_32::isr32()+0xde>
      a0:	mov.w	r3, #3758153728	; 0xe000e000
      a4:	movs	r2, #64	; 0x40
      a6:	add.w	ip, r1, #512	; 0x200
      aa:	str.w	r2, [r3, #520]	; 0x208
      ae:	b.n	b6 <I2S_32::isr32()+0x32>
      b0:	mov	ip, r1
      b2:	sub.w	r1, r1, #512	; 0x200
      b6:	movs	r3, #0
      b8:	mov	r2, r3
      ba:	ldr.w	r0, [r1, r3, lsl #3]
      be:	adds	r3, #1
      c0:	cmp	r3, #64	; 0x40
      c2:	add	r2, r0
      c4:	bne.n	ba <I2S_32::isr32()+0x36>
      c6:	cmp	r2, #0
      c8:	ldr	r7, [pc, #172]	; (178 <I2S_32::isr32()+0xf4>)
      ca:	ldr	r5, [pc, #176]	; (17c <I2S_32::isr32()+0xf8>)
  // Maintain count of free clusters.
  updateFreeClusterCount(-count);

  // return first cluster number to caller
  *firstCluster = bgnCluster;
  return true;
      cc:	mov.w	r3, #0
	I2S1_RCSR = 0;
	I2S1_RCSR = I2S_RCSR_RE | I2S_RCSR_BCE | I2S_RCSR_FRDE | I2S_RCSR_FR;
	update_responsibility = update_setup();
	dma.attachInterrupt(isr);
#endif
}
      d0:	it	lt
      d2:	addlt	r2, #63	; 0x3f

	I2S2_RCSR |= I2S_RCSR_RE | I2S_RCSR_BCE | I2S_RCSR_FRDE | I2S_RCSR_FR;
	I2S2_TCSR |= I2S_TCSR_TE | I2S_TCSR_BCE;
	dma.attachInterrupt(isr);	

}
      d4:	ldr	r4, [r7, #0]
      d6:	adds	r0, r1, #4
      }
    }
  }
  // don't try to delete root
  if (!isRoot()) {
    if (!rmdir()) {
      d8:	ldr	r6, [r5, #0]
      da:	mov.w	lr, r2, asr #6
  return writeStop();

fail:
  spiStop();
  return false;
}
      de:	ldr.w	r2, [r1, r3, lsl #3]
  seconds+= (tm.Day-1) * SECS_PER_DAY;
  seconds+= tm.Hour * SECS_PER_HOUR;
  seconds+= tm.Minute * SECS_PER_MIN;
  seconds+= tm.Second;
  return (time_t)seconds; 
}
      e2:	subs	r2, r2, r4
      e4:	str.w	r2, [r1, r3, lsl #3]
      e8:	ldr.w	r2, [r0, r3, lsl #3]
      ec:	subs	r2, r2, r6
      ee:	str.w	r2, [r0, r3, lsl #3]
  seconds += (tm.mday-1) * SECS_PER_DAY;
  seconds += tm.hour * SECS_PER_HOUR;
  seconds += tm.min * SECS_PER_MIN;
  seconds += tm.sec;
  return /*(time_t)*/ seconds;
}
      f2:	adds	r3, #1
    // Select MCLK
    IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
      & ~(IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL_MASK))
      | (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));

  }
      f4:	cmp	r3, #64	; 0x40
      f6:	bne.n	de <I2S_32::isr32()+0x5a>
      f8:	sub.w	r3, lr, r4
      fc:	ldr	r2, [pc, #128]	; (180 <I2S_32::isr32()+0xfc>)
      fe:	adds.w	r3, r3, r4, lsl #4
     102:	ldr	r0, [r2, #0]
    data[1+2*ii] -= I2S_32::DC_right;
  }

  int32_t dco0=I2S_32::DC_left;
  int32_t dco1=I2S_32::DC_right;
  I2S_32::DC_left  = (NAVG * dco0 +(dc0-dco0))/NAVG;
     104:	it	mi
     106:	addmi	r3, #15
     108:	asrs	r3, r3, #4
     10a:	str	r3, [r7, #0]
  I2S_32::DC_right = (NAVG * dco1 +(dc0-dco1))/NAVG;
     10c:	sub.w	r3, lr, r6
     110:	adds.w	r3, r3, r6, lsl #4
     114:	it	mi
     116:	addmi	r3, #15
     118:	asrs	r3, r3, #4
     11a:	str	r3, [r5, #0]

   // extract 16/32 bit from 32 bit I2S buffer but shift to right first
   // there will be two buffers with each having "AUDIO_BLOCK_SAMPLES_NCH" samples
  left  = I2S_32::block_left;
  right = I2S_32::block_right;
     11c:	ldr	r3, [pc, #100]	; (184 <I2S_32::isr32()+0x100>)
     11e:	ldr	r4, [r3, #0]
  if (left != NULL && right != NULL) {
     120:	cbz	r0, 160 <I2S_32::isr32()+0xdc>
     122:	cbz	r4, 160 <I2S_32::isr32()+0xdc>
    offset = I2S_32::block_offset;
     124:	ldr	r2, [pc, #96]	; (188 <I2S_32::isr32()+0x104>)
     126:	ldrh	r3, [r2, #0]
    if (offset <= AUDIO_BLOCK_SAMPLES/2) {
     128:	cmp	r3, #64	; 0x40
     12a:	bhi.n	160 <I2S_32::isr32()+0xdc>
      dest_left  = &(left->data[offset]);
     12c:	adds	r5, r3, #2
      dest_right = &(right->data[offset]);
      I2S_32::block_offset = offset + AUDIO_BLOCK_SAMPLES/2; 
     12e:	adds	r3, #64	; 0x40
      dest_left  = &(left->data[offset]);
     130:	add.w	r0, r0, r5, lsl #1
      I2S_32::block_offset = offset + AUDIO_BLOCK_SAMPLES/2; 
     134:	strh	r3, [r2, #0]
      dest_right = &(right->data[offset]);
     136:	add.w	r4, r4, r5, lsl #1
      I2S_32::block_offset = offset + AUDIO_BLOCK_SAMPLES/2; 
     13a:	ldr	r5, [pc, #80]	; (18c <I2S_32::isr32()+0x108>)

      do {
        *dest_left++  = (*src++)>>I2S_32::shift; // left side may be 16 or 32 bit
     13c:	ldr.w	r2, [r1], #8
     140:	ldrsh.w	r3, [r5]
        *dest_right++ = (*src++)>>I2S_32::shift;
      } while (src < end);
     144:	cmp	ip, r1
        *dest_left++  = (*src++)>>I2S_32::shift; // left side may be 16 or 32 bit
     146:	asr.w	r2, r2, r3
        *dest_right++ = (*src++)>>I2S_32::shift;
     14a:	ldr.w	r3, [r1, #-4]
        *dest_left++  = (*src++)>>I2S_32::shift; // left side may be 16 or 32 bit
     14e:	strh.w	r2, [r0], #2
        *dest_right++ = (*src++)>>I2S_32::shift;
     152:	ldrsh.w	r2, [r5]
     156:	asr.w	r3, r3, r2
     15a:	strh.w	r3, [r4], #2
      } while (src < end);
     15e:	bhi.n	13c <I2S_32::isr32()+0xb8>
    }
  }
}
     160:	pop	{r4, r5, r6, r7, pc}
    end = (int32_t *)&i2s_rx_buffer_32[AUDIO_BLOCK_SAMPLES*2];
     162:	add.w	ip, r1, #512	; 0x200
     166:	b.n	b6 <I2S_32::isr32()+0x32>
     168:	.word	0x200065bc
     16c:	.word	0x20005e8c
     170:	.word	0x400e8000
     174:	.word	0x20007b60
     178:	.word	0x200065c4
     17c:	.word	0x200065c8
     180:	.word	0x200065b4
     184:	.word	0x200065b8
     188:	.word	0x20007b42
     18c:	.word	0x20001a42

00000190 <I2S_32::update()>:

void I2S_32::update(void)
{
     190:	push	{r3, r4, r5, r6, r7, lr}
     192:	mov	r6, r0
  audio_block_t *new_left=NULL, *new_right=NULL, *out_left=NULL, *out_right=NULL;

  // allocate 2 new blocks, but if one fails, allocate neither
  new_left = allocate();
     194:	bl	c598 <AudioStream::allocate()>
  if (new_left != NULL) {
     198:	cbz	r0, 1cc <I2S_32::update()+0x3c>
    new_right = allocate();
     19a:	mov	r4, r0
     19c:	bl	c598 <AudioStream::allocate()>
    if (new_right == NULL) {
     1a0:	mov	r5, r0
     1a2:	cbz	r0, 1c6 <I2S_32::update()+0x36>
      release(new_left);
      new_left = NULL;
    }
  }
  __disable_irq();
     1a4:	cpsid	i
  if (block_offset >= AUDIO_BLOCK_SAMPLES) {
     1a6:	ldr	r3, [pc, #120]	; (220 <I2S_32::update()+0x90>)
     1a8:	ldrh	r2, [r3, #0]
     1aa:	cmp	r2, #127	; 0x7f
     1ac:	bhi.n	1de <I2S_32::update()+0x4e>
    release(out_left);
    transmit(out_right, 1);
    release(out_right);
  } else if (new_left != NULL) {
    // the DMA didn't fill blocks, but we allocated blocks
    if (block_left == NULL) {
     1ae:	ldr	r1, [pc, #116]	; (224 <I2S_32::update()+0x94>)
     1b0:	ldr	r2, [r1, #0]
     1b2:	cbz	r2, 212 <I2S_32::update()+0x82>
      block_right = new_right;
      block_offset = 0;
      __enable_irq();
    } else {
      // the DMA already has blocks, doesn't need these
      __enable_irq();
     1b4:	cpsie	i
      release(new_left);
     1b6:	mov	r0, r4
     1b8:	bl	c644 <AudioStream::release(audio_block_struct*)>
      release(new_right);
     1bc:	mov	r0, r5
    // The DMA didn't fill blocks, and we could not allocate
    // memory... the system is likely starving for memory!
    // Sadly, there's nothing we can do.
    __enable_irq();
  }
}
     1be:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      release(new_right);
     1c2:	b.w	c644 <AudioStream::release(audio_block_struct*)>
      release(new_left);
     1c6:	mov	r0, r4
     1c8:	bl	c644 <AudioStream::release(audio_block_struct*)>
  __disable_irq();
     1cc:	cpsid	i
  if (block_offset >= AUDIO_BLOCK_SAMPLES) {
     1ce:	ldr	r3, [pc, #80]	; (220 <I2S_32::update()+0x90>)
     1d0:	ldrh	r2, [r3, #0]
     1d2:	cmp	r2, #127	; 0x7f
     1d4:	bhi.n	1da <I2S_32::update()+0x4a>
    __enable_irq();
     1d6:	cpsie	i
}
     1d8:	pop	{r3, r4, r5, r6, r7, pc}
  audio_block_t *new_left=NULL, *new_right=NULL, *out_left=NULL, *out_right=NULL;
     1da:	movs	r5, #0
  new_left = allocate();
     1dc:	mov	r4, r5
    out_left = block_left;
     1de:	ldr	r0, [pc, #68]	; (224 <I2S_32::update()+0x94>)
    block_offset = 0;
     1e0:	movs	r2, #0
    out_right = block_right;
     1e2:	ldr	r1, [pc, #68]	; (228 <I2S_32::update()+0x98>)
    out_left = block_left;
     1e4:	ldr	r7, [r0, #0]
    block_offset = 0;
     1e6:	strh	r2, [r3, #0]
    block_left = new_left;
     1e8:	str	r4, [r0, #0]
    out_right = block_right;
     1ea:	ldr	r4, [r1, #0]
    block_right = new_right;
     1ec:	str	r5, [r1, #0]
    __enable_irq();
     1ee:	cpsie	i
    transmit(out_left, 0);
     1f0:	mov	r1, r7
     1f2:	mov	r0, r6
     1f4:	bl	c694 <AudioStream::transmit(audio_block_struct*, unsigned char)>
    release(out_left);
     1f8:	mov	r0, r7
     1fa:	bl	c644 <AudioStream::release(audio_block_struct*)>
    transmit(out_right, 1);
     1fe:	mov	r0, r6
     200:	mov	r1, r4
     202:	movs	r2, #1
     204:	bl	c694 <AudioStream::transmit(audio_block_struct*, unsigned char)>
    release(out_right);
     208:	mov	r0, r4
}
     20a:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    release(out_right);
     20e:	b.w	c644 <AudioStream::release(audio_block_struct*)>
      block_left = new_left;
     212:	str	r4, [r1, #0]
      block_right = new_right;
     214:	ldr	r1, [pc, #16]	; (228 <I2S_32::update()+0x98>)
      block_offset = 0;
     216:	strh	r2, [r3, #0]
      block_right = new_right;
     218:	str	r0, [r1, #0]
      __enable_irq();
     21a:	cpsie	i
}
     21c:	pop	{r3, r4, r5, r6, r7, pc}
     21e:	nop
     220:	.word	0x20007b42
     224:	.word	0x200065b4
     228:	.word	0x200065b8

0000022c <SDFile::close()>:
	virtual void close() {
     22c:	push	{r4, lr}
     22e:	mov	r4, r0
		if (filename) {
     230:	ldr	r0, [r0, #88]	; 0x58
     232:	cbz	r0, 23c <SDFile::close()+0x10>
			free(filename);
     234:	bl	d240 <free>
			filename = nullptr;
     238:	movs	r3, #0
     23a:	str	r3, [r4, #88]	; 0x58
     23c:	ldr	r3, [r4, #80]	; 0x50
     23e:	cbz	r3, 24c <SDFile::close()+0x20>
			sdfatfile.close();
     240:	add.w	r0, r4, #24
	}
     244:	ldmia.w	sp!, {r4, lr}
			sdfatfile.close();
     248:	b.w	777c <FsBaseFile::close()>
     24c:	ldr	r3, [r4, #84]	; 0x54
     24e:	cmp	r3, #0
     250:	bne.n	240 <SDFile::close()+0x14>
	}
     252:	pop	{r4, pc}

00000254 <DMAChannel::~DMAChannel()>:
	}
	DMAChannel & operator = (const DMASetting &rhs) {
		copy_tcd(TCD, rhs.TCD);
		return *this;
	}
	~DMAChannel() {
     254:	push	{r4, lr}
     256:	mov	r4, r0
		release();
     258:	bl	c364 <DMAChannel::release()>
	}
     25c:	mov	r0, r4
     25e:	pop	{r4, pc}

00000260 <SDFile::name()>:
	virtual const char * name() {
     260:	push	{r4, lr}
     262:	mov	r4, r0
		if (!filename) {
     264:	ldr	r0, [r0, #88]	; 0x58
     266:	cbz	r0, 26a <SDFile::name()+0xa>
				static char zeroterm = 0;
				filename = &zeroterm;
			}
		}
		return filename;
	}
     268:	pop	{r4, pc}
			filename = (char *)malloc(MAX_FILENAME_LEN);
     26a:	mov.w	r0, #256	; 0x100
     26e:	bl	d230 <malloc>
     272:	str	r0, [r4, #88]	; 0x58
			if (filename) {
     274:	cbz	r0, 2a4 <SDFile::name()+0x44>
    *name = 0;
     276:	movs	r2, #0
    return m_fFile   ? m_fFile->getName(name, len)
     278:	ldr	r3, [r4, #80]	; 0x50
    *name = 0;
     27a:	strb	r2, [r0, #0]
    return m_fFile   ? m_fFile->getName(name, len)
     27c:	cbz	r3, 28e <SDFile::name()+0x2e>
     27e:	mov	r1, r0
     280:	mov.w	r2, #256	; 0x100
     284:	mov	r0, r3
     286:	bl	5a9c <FatFile::getName(char*, unsigned int)>
		return filename;
     28a:	ldr	r0, [r4, #88]	; 0x58
	}
     28c:	pop	{r4, pc}
     28e:	ldr	r3, [r4, #84]	; 0x54
           : m_xFile ? m_xFile->getName(name, len)
     290:	cmp	r3, #0
     292:	beq.n	268 <SDFile::name()+0x8>
   */
  size_t getName(char* name, size_t size) {
#if USE_UTF8_LONG_NAMES
    return getName8(name, size);
#else   // USE_UTF8_LONG_NAMES
    return getName7(name, size);
     294:	mov	r1, r0
     296:	mov.w	r2, #256	; 0x100
     29a:	mov	r0, r3
     29c:	bl	3a1c <ExFatFile::getName7(char*, unsigned int)>
		return filename;
     2a0:	ldr	r0, [r4, #88]	; 0x58
	}
     2a2:	pop	{r4, pc}
				filename = &zeroterm;
     2a4:	ldr	r3, [pc, #4]	; (2ac <SDFile::name()+0x4c>)
     2a6:	mov	r0, r3
     2a8:	str	r3, [r4, #88]	; 0x58
	}
     2aa:	pop	{r4, pc}
     2ac:	.word	0x20007b62

000002b0 <SDFile::truncate(unsigned long long)>:
	virtual bool truncate(uint64_t size=0) {
     2b0:	push	{r3, r4, r5, lr}
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint64_t length) {
    return m_fFile   ? length < (1ULL << 32) && m_fFile->truncate(length)
     2b2:	ldr	r5, [r0, #80]	; 0x50
     2b4:	cbz	r5, 2d2 <SDFile::truncate(unsigned long long)+0x22>
     2b6:	cbz	r3, 2bc <SDFile::truncate(unsigned long long)+0xc>
	}
     2b8:	movs	r0, #0
     2ba:	pop	{r3, r4, r5, pc}
   *
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint32_t length) { return seekSet(length) && truncate(); }
     2bc:	mov	r1, r2
     2be:	mov	r0, r5
     2c0:	bl	6554 <FatFile::seekSet(unsigned long)>
     2c4:	cmp	r0, #0
     2c6:	beq.n	2b8 <SDFile::truncate(unsigned long long)+0x8>
     2c8:	mov	r0, r5
     2ca:	ldmia.w	sp!, {r3, r4, r5, lr}
     2ce:	b.w	68a0 <FatFile::truncate()>
     2d2:	ldr	r4, [r0, #84]	; 0x54
           : m_xFile ? m_xFile->truncate(length)
     2d4:	cmp	r4, #0
     2d6:	beq.n	2b8 <SDFile::truncate(unsigned long long)+0x8>
   *
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint64_t length) { return seekSet(length) && truncate(); }
     2d8:	mov	r0, r4
     2da:	bl	3e30 <ExFatFile::seekSet(unsigned long long)>
     2de:	cmp	r0, #0
     2e0:	beq.n	2b8 <SDFile::truncate(unsigned long long)+0x8>
     2e2:	mov	r0, r4
     2e4:	ldmia.w	sp!, {r3, r4, r5, lr}
     2e8:	b.w	5078 <ExFatFile::truncate()>

000002ec <SDFile::setCreateTime(DateTimeFields const&)>:
		tm.mon = FS_MONTH(fat_date) - 1;
		tm.year = FS_YEAR(fat_date) - 1900;
		return true;
	}
	virtual bool setCreateTime(const DateTimeFields &tm) {
		if (tm.year < 80 || tm.year > 207) return false;
     2ec:	ldrb	r2, [r1, #6]
     2ee:	sub.w	r3, r2, #80	; 0x50
     2f2:	lsls	r3, r3, #24
     2f4:	bmi.n	33c <SDFile::setCreateTime(DateTimeFields const&)+0x50>
		return sdfatfile.timestamp(T_CREATE, tm.year + 1900, tm.mon + 1,
     2f6:	addw	r2, r2, #1900	; 0x76c
	virtual bool setCreateTime(const DateTimeFields &tm) {
     2fa:	push	{r4, r5, r6, r7, lr}
		return sdfatfile.timestamp(T_CREATE, tm.year + 1900, tm.mon + 1,
     2fc:	ldrb	r3, [r1, #5]
	virtual bool setCreateTime(const DateTimeFields &tm) {
     2fe:	sub	sp, #20
    return m_fFile   ? m_fFile->timestamp(flags, year, month, day, hour, minute,
     300:	ldr	r4, [r0, #80]	; 0x50
		return sdfatfile.timestamp(T_CREATE, tm.year + 1900, tm.mon + 1,
     302:	adds	r3, #1
			tm.mday, tm.hour, tm.min, tm.sec);
     304:	ldrb	r5, [r1, #4]
     306:	ldrb	r6, [r1, #2]
     308:	ldrb	r7, [r1, #1]
		return sdfatfile.timestamp(T_CREATE, tm.year + 1900, tm.mon + 1,
     30a:	uxtb	r3, r3
			tm.mday, tm.hour, tm.min, tm.sec);
     30c:	ldrb	r1, [r1, #0]
     30e:	cbz	r4, 324 <SDFile::setCreateTime(DateTimeFields const&)+0x38>
     310:	mov	r0, r4
     312:	str	r6, [sp, #4]
     314:	str	r5, [sp, #0]
     316:	strd	r7, r1, [sp, #8]
     31a:	movs	r1, #2
     31c:	bl	67c8 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
	}
     320:	add	sp, #20
     322:	pop	{r4, r5, r6, r7, pc}
     324:	ldr	r0, [r0, #84]	; 0x54
           : m_xFile ? m_xFile->timestamp(flags, year, month, day, hour, minute,
     326:	cmp	r0, #0
     328:	beq.n	320 <SDFile::setCreateTime(DateTimeFields const&)+0x34>
     32a:	str	r6, [sp, #4]
     32c:	str	r5, [sp, #0]
     32e:	strd	r7, r1, [sp, #8]
     332:	movs	r1, #2
     334:	bl	4f00 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
     338:	add	sp, #20
     33a:	pop	{r4, r5, r6, r7, pc}
		if (tm.year < 80 || tm.year > 207) return false;
     33c:	movs	r0, #0
	}
     33e:	bx	lr

00000340 <SDFile::rewindDirectory()>:
	virtual void rewindDirectory(void) {
     340:	push	{r4, lr}
     342:	mov	r4, r0
    return m_fFile ? m_fFile->isDir() : m_xFile ? m_xFile->isDir() : false;
     344:	ldr	r0, [r0, #80]	; 0x50
     346:	cbz	r0, 36a <SDFile::rewindDirectory()+0x2a>
   * If an error occurs or end of file is reached return -1.
   */
  int read() { return BaseFile::read(); }
  /** Rewind a file if it is a directory */
  void rewindDirectory() {
    if (BaseFile::isDir()) {
     348:	ldrb	r3, [r0, #0]
     34a:	tst.w	r3, #208	; 0xd0
     34e:	bne.n	352 <SDFile::rewindDirectory()+0x12>
	}
     350:	pop	{r4, pc}
  void rewind() { seekSet(0); }
     352:	movs	r1, #0
     354:	bl	6554 <FatFile::seekSet(unsigned long)>
    if (m_xFile) m_xFile->rewind();
     358:	ldr	r0, [r4, #84]	; 0x54
     35a:	cmp	r0, #0
     35c:	beq.n	350 <SDFile::rewindDirectory()+0x10>
  void rewind() { seekSet(0); }
     35e:	movs	r2, #0
     360:	movs	r3, #0
     362:	ldmia.w	sp!, {r4, lr}
     366:	b.w	3e30 <ExFatFile::seekSet(unsigned long long)>
     36a:	ldr	r0, [r4, #84]	; 0x54
    return m_fFile ? m_fFile->isDir() : m_xFile ? m_xFile->isDir() : false;
     36c:	cmp	r0, #0
     36e:	beq.n	350 <SDFile::rewindDirectory()+0x10>
     370:	ldrb.w	r3, [r0, #49]	; 0x31
     374:	tst.w	r3, #80	; 0x50
     378:	beq.n	350 <SDFile::rewindDirectory()+0x10>
     37a:	movs	r2, #0
     37c:	movs	r3, #0
     37e:	ldmia.w	sp!, {r4, lr}
     382:	b.w	3e30 <ExFatFile::seekSet(unsigned long long)>
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
		if (usb_midi_handleSysExPartial) {
			(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, len, 1);
		} else if (usb_midi_handleSysExComplete) {
     386:	nop

00000388 <SDFile::getModifyTime(DateTimeFields&)>:
    return m_fFile   ? m_fFile->getModifyDateTime(pdate, ptime)
     388:	ldr	r3, [r0, #80]	; 0x50
	virtual bool getModifyTime(DateTimeFields &tm) {
     38a:	push	{r4, lr}
     38c:	mov	r4, r1
     38e:	sub	sp, #8
     390:	cbz	r3, 3de <SDFile::getModifyTime(DateTimeFields&)+0x56>
     392:	add.w	r2, sp, #6
     396:	add	r1, sp, #4
     398:	mov	r0, r3
     39a:	bl	5cbc <FatFile::getModifyDateTime(unsigned short*, unsigned short*)>
		if (!sdfatfile.getModifyDateTime(&fat_date, &fat_time)) return false;
     39e:	cbz	r0, 3f0 <SDFile::getModifyTime(DateTimeFields&)+0x68>
		if ((fat_date == 0) && (fat_time == 0)) return false;
     3a0:	ldrh.w	r3, [sp, #4]
     3a4:	ldrh.w	r2, [sp, #6]
     3a8:	orrs.w	r1, r3, r2
     3ac:	beq.n	3f0 <SDFile::getModifyTime(DateTimeFields&)+0x68>
 * \param[in] fatTime Time in packed dir format.
 *
 * \return Extracted minute [0,59]
 */
static inline uint8_t FS_MINUTE(uint16_t fatTime) {
  return (fatTime >> 5) & 0X3F;
     3ae:	ubfx	ip, r2, #5, #6
 * \param[in] fatTime Time in packed dir format.
 *
 * \return Extracted second [0,58]
 */
static inline uint8_t FS_SECOND(uint16_t fatTime) {
  return 2 * (fatTime & 0X1F);
     3b2:	and.w	r0, r2, #31
static inline uint8_t FS_HOUR(uint16_t fatTime) { return fatTime >> 11; }
     3b6:	lsrs	r2, r2, #11
  return (fatDate >> 5) & 0XF;
     3b8:	ubfx	r1, r3, #5, #4
  return 2 * (fatTime & 0X1F);
     3bc:	lsls	r0, r0, #1
		tm.min = FS_MINUTE(fat_time);
     3be:	strb.w	ip, [r4, #1]
static inline uint8_t FS_HOUR(uint16_t fatTime) { return fatTime >> 11; }
     3c2:	strb	r2, [r4, #2]
  return 1980 + (fatDate >> 9);
     3c4:	lsrs	r2, r3, #9
		tm.mon = FS_MONTH(fat_date) - 1;
     3c6:	subs	r1, #1
static inline uint8_t FS_DAY(uint16_t fatDate) { return fatDate & 0X1F; }
     3c8:	and.w	r3, r3, #31
		tm.year = FS_YEAR(fat_date) - 1900;
     3cc:	add.w	r2, r2, #1872	; 0x750
		tm.sec = FS_SECOND(fat_time);
     3d0:	strb	r0, [r4, #0]
		return true;
     3d2:	movs	r0, #1
		tm.mon = FS_MONTH(fat_date) - 1;
     3d4:	strb	r1, [r4, #5]
		tm.mday = FS_DAY(fat_date);
     3d6:	strb	r3, [r4, #4]
		tm.year = FS_YEAR(fat_date) - 1900;
     3d8:	strb	r2, [r4, #6]
	}
     3da:	add	sp, #8
     3dc:	pop	{r4, pc}
     3de:	ldr	r0, [r0, #84]	; 0x54
           : m_xFile ? m_xFile->getModifyDateTime(pdate, ptime)
     3e0:	cbz	r0, 3f0 <SDFile::getModifyTime(DateTimeFields&)+0x68>
     3e2:	add.w	r2, sp, #6
     3e6:	add	r1, sp, #4
     3e8:	bl	3b78 <ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)>
     3ec:	cmp	r0, #0
     3ee:	bne.n	3a0 <SDFile::getModifyTime(DateTimeFields&)+0x18>
		if (!sdfatfile.getModifyDateTime(&fat_date, &fat_time)) return false;
     3f0:	movs	r0, #0
	}
     3f2:	add	sp, #8
     3f4:	pop	{r4, pc}
			#endif //defined(AUDIO_PT8211_INTERPOLATION_LINEAR)
		#else
			memcpy_tointerleaveL(dest, blockL->data + offsetL);
			offsetL += (AUDIO_BLOCK_SAMPLES / 2);
		#endif //defined(AUDIO_PT8211_OVERSAMPLING)
	} else if (blockR) {
     3f6:	nop

000003f8 <SDFile::getCreateTime(DateTimeFields&)>:
    return m_fFile   ? m_fFile->getCreateDateTime(pdate, ptime)
     3f8:	ldr	r3, [r0, #80]	; 0x50
	virtual bool getCreateTime(DateTimeFields &tm) {
     3fa:	push	{r4, lr}
     3fc:	mov	r4, r1
     3fe:	sub	sp, #8
     400:	cbz	r3, 44e <SDFile::getCreateTime(DateTimeFields&)+0x56>
     402:	add.w	r2, sp, #6
     406:	add	r1, sp, #4
     408:	mov	r0, r3
     40a:	bl	5c9c <FatFile::getCreateDateTime(unsigned short*, unsigned short*)>
		if (!sdfatfile.getCreateDateTime(&fat_date, &fat_time)) return false;
     40e:	cbz	r0, 460 <SDFile::getCreateTime(DateTimeFields&)+0x68>
		if ((fat_date == 0) && (fat_time == 0)) return false;
     410:	ldrh.w	r3, [sp, #4]
     414:	ldrh.w	r2, [sp, #6]
     418:	orrs.w	r1, r3, r2
     41c:	beq.n	460 <SDFile::getCreateTime(DateTimeFields&)+0x68>
  return (fatTime >> 5) & 0X3F;
     41e:	ubfx	ip, r2, #5, #6
  return 2 * (fatTime & 0X1F);
     422:	and.w	r0, r2, #31
static inline uint8_t FS_HOUR(uint16_t fatTime) { return fatTime >> 11; }
     426:	lsrs	r2, r2, #11
  return (fatDate >> 5) & 0XF;
     428:	ubfx	r1, r3, #5, #4
  return 2 * (fatTime & 0X1F);
     42c:	lsls	r0, r0, #1
		tm.min = FS_MINUTE(fat_time);
     42e:	strb.w	ip, [r4, #1]
static inline uint8_t FS_HOUR(uint16_t fatTime) { return fatTime >> 11; }
     432:	strb	r2, [r4, #2]
  return 1980 + (fatDate >> 9);
     434:	lsrs	r2, r3, #9
		tm.mon = FS_MONTH(fat_date) - 1;
     436:	subs	r1, #1
static inline uint8_t FS_DAY(uint16_t fatDate) { return fatDate & 0X1F; }
     438:	and.w	r3, r3, #31
		tm.year = FS_YEAR(fat_date) - 1900;
     43c:	add.w	r2, r2, #1872	; 0x750
		tm.sec = FS_SECOND(fat_time);
     440:	strb	r0, [r4, #0]
		return true;
     442:	movs	r0, #1
		tm.mon = FS_MONTH(fat_date) - 1;
     444:	strb	r1, [r4, #5]
		tm.mday = FS_DAY(fat_date);
     446:	strb	r3, [r4, #4]
		tm.year = FS_YEAR(fat_date) - 1900;
     448:	strb	r2, [r4, #6]
	}
     44a:	add	sp, #8
     44c:	pop	{r4, pc}
     44e:	ldr	r0, [r0, #84]	; 0x54
           : m_xFile ? m_xFile->getCreateDateTime(pdate, ptime)
     450:	cbz	r0, 460 <SDFile::getCreateTime(DateTimeFields&)+0x68>
     452:	add.w	r2, sp, #6
     456:	add	r1, sp, #4
     458:	bl	3b54 <ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)>
     45c:	cmp	r0, #0
     45e:	bne.n	410 <SDFile::getCreateTime(DateTimeFields&)+0x18>
		if (!sdfatfile.getCreateDateTime(&fat_date, &fat_time)) return false;
     460:	movs	r0, #0
	}
     462:	add	sp, #8
     464:	pop	{r4, pc}
					*(dest+7) = val;
					dest+=8;
					oldR = val;
				}
			#elif defined(AUDIO_PT8211_INTERPOLATION_CIC)
				for (int i=0; i< AUDIO_BLOCK_SAMPLES / 2; i++, offsetR++) {
     466:	nop

00000468 <File::available()>:
	size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
	}
	// Returns the number of bytes which may be read from a file
	int available() {
		return (f) ? f->available() : 0;
     468:	ldr	r0, [r0, #16]
     46a:	cbz	r0, 492 <File::available()+0x2a>
     46c:	ldr	r3, [r0, #0]
     46e:	ldr	r2, [pc, #84]	; (4c4 <File::available()+0x5c>)
     470:	ldr	r3, [r3, #16]
     472:	cmp	r3, r2
     474:	bne.n	4c2 <File::available()+0x5a>
    return m_fFile ? m_fFile->available() : m_xFile ? m_xFile->available() : 0;
     476:	ldr	r3, [r0, #80]	; 0x50
     478:	cbz	r3, 494 <File::available()+0x2c>
    return isFile() ? fileSize() - curPosition() : 0;
     47a:	ldrb	r0, [r3, #0]
     47c:	ands.w	r0, r0, #8
     480:	beq.n	492 <File::available()+0x2a>
     482:	ldr	r0, [r3, #28]
     484:	ldr	r3, [r3, #20]
    return n > INT_MAX ? INT_MAX : n;
     486:	subs	r0, r0, r3
     488:	it	mi
     48a:	mvnmi.w	r0, #2147483648	; 0x80000000
     48e:	bx	lr
     490:	mov	r0, r3
	}
     492:	bx	lr
     494:	ldr	r3, [r0, #84]	; 0x54
     496:	cmp	r3, #0
     498:	beq.n	490 <File::available()+0x28>
  uint64_t available64() { return isFile() ? fileSize() - curPosition() : 0; }
     49a:	ldrb.w	r0, [r3, #49]	; 0x31
     49e:	ands.w	r0, r0, #8
     4a2:	beq.n	492 <File::available()+0x2a>
     4a4:	ldr	r0, [r3, #16]
     4a6:	ldr	r1, [r3, #0]
     4a8:	ldr	r2, [r3, #20]
     4aa:	subs	r0, r0, r1
     4ac:	ldr	r3, [r3, #4]
     4ae:	sbc.w	r3, r2, r3
    return n > INT_MAX ? INT_MAX : n;
     4b2:	cmp.w	r0, #2147483648	; 0x80000000
     4b6:	sbcs.w	r3, r3, #0
     4ba:	bcc.n	492 <File::available()+0x2a>
     4bc:	mvn.w	r0, #2147483648	; 0x80000000
     4c0:	bx	lr
		return (f) ? f->available() : 0;
     4c2:	bx	r3
     4c4:	.word	0x000007dd

000004c8 <File::flush()>:
	int peek() {
		return (f) ? f->peek() : -1;
	}
	void flush() {
		if (f) f->flush();
     4c8:	ldr	r3, [r0, #16]
     4ca:	cbz	r3, 4e6 <File::flush()+0x1e>
     4cc:	ldr	r2, [r3, #0]
     4ce:	ldr	r1, [pc, #28]	; (4ec <File::flush()+0x24>)
     4d0:	ldr	r2, [r2, #24]
     4d2:	cmp	r2, r1
     4d4:	bne.n	4e8 <File::flush()+0x20>
    return m_fFile ? m_fFile->sync() : m_xFile ? m_xFile->sync() : false;
     4d6:	ldr	r0, [r3, #80]	; 0x50
     4d8:	cbz	r0, 4de <File::flush()+0x16>
     4da:	b.w	67bc <FatFile::sync()>
     4de:	ldr	r0, [r3, #84]	; 0x54
     4e0:	cbz	r0, 4e6 <File::flush()+0x1e>
     4e2:	b.w	4c18 <ExFatFile::sync()>
	}
     4e6:	bx	lr
		if (f) f->flush();
     4e8:	mov	r0, r3
     4ea:	bx	r2
     4ec:	.word	0x00000705

000004f0 <File::peek()>:
		return (f) ? f->peek() : -1;
     4f0:	ldr	r3, [r0, #16]
     4f2:	cbz	r3, 512 <File::peek()+0x22>
     4f4:	ldr	r2, [r3, #0]
     4f6:	ldr	r1, [pc, #32]	; (518 <File::peek()+0x28>)
     4f8:	ldr	r2, [r2, #20]
     4fa:	cmp	r2, r1
     4fc:	bne.n	50e <File::peek()+0x1e>
    return m_fFile ? m_fFile->peek() : m_xFile ? m_xFile->peek() : -1;
     4fe:	ldr	r0, [r3, #80]	; 0x50
     500:	cbz	r0, 506 <File::peek()+0x16>
     502:	b.w	626c <FatFile::peek()>
     506:	ldr	r0, [r3, #84]	; 0x54
     508:	cbz	r0, 512 <File::peek()+0x22>
     50a:	b.w	3e04 <ExFatFile::peek()>
     50e:	mov	r0, r3
     510:	bx	r2
	}
     512:	mov.w	r0, #4294967295
     516:	bx	lr
     518:	.word	0x00000675

0000051c <File::read()>:
	}
	bool seek(uint64_t pos) {
		return seek(pos, SeekSet);
	}
	int read() {
		if (!f) return -1;
     51c:	ldr	r3, [r0, #16]
     51e:	cbz	r3, 56a <File::read()+0x4e>
		unsigned char b;
		if (f->read(&b, 1) < 1) return -1;
     520:	ldr	r1, [r3, #0]
     522:	ldr	r2, [pc, #76]	; (570 <File::read()+0x54>)
	int read() {
     524:	push	{r4, lr}
		if (f->read(&b, 1) < 1) return -1;
     526:	ldr	r4, [r1, #8]
	int read() {
     528:	sub	sp, #8
     52a:	cmp	r4, r2
     52c:	bne.n	558 <File::read()+0x3c>
    return m_fFile   ? m_fFile->read(buf, count)
     52e:	ldr	r0, [r3, #80]	; 0x50
     530:	cbz	r0, 546 <File::read()+0x2a>
     532:	movs	r2, #1
     534:	add.w	r1, sp, #7
     538:	bl	60c4 <FatFile::read(void*, unsigned int)>
		if (f->read(&b, 1) < 1) return -1;
     53c:	cbz	r0, 564 <File::read()+0x48>
		return b;
     53e:	ldrb.w	r0, [sp, #7]
	}
     542:	add	sp, #8
     544:	pop	{r4, pc}
     546:	ldr	r0, [r3, #84]	; 0x54
           : m_xFile ? m_xFile->read(buf, count)
     548:	cmp	r0, #0
     54a:	beq.n	53e <File::read()+0x22>
     54c:	movs	r2, #1
     54e:	add.w	r1, sp, #7
     552:	bl	3c64 <ExFatFile::read(void*, unsigned int)>
     556:	b.n	53c <File::read()+0x20>
		if (f->read(&b, 1) < 1) return -1;
     558:	movs	r2, #1
     55a:	add.w	r1, sp, #7
     55e:	mov	r0, r3
     560:	blx	r4
     562:	b.n	53c <File::read()+0x20>
		if (!f) return -1;
     564:	mov.w	r0, #4294967295
     568:	b.n	542 <File::read()+0x26>
     56a:	mov.w	r0, #4294967295
	}
     56e:	bx	lr
     570:	.word	0x000006b5

00000574 <SDFile::position()>:
    return m_fFile   ? m_fFile->curPosition()
     574:	ldr	r3, [r0, #80]	; 0x50
     576:	cbz	r3, 57e <SDFile::position()+0xa>
     578:	ldr	r0, [r3, #20]
     57a:	movs	r1, #0
     57c:	bx	lr
     57e:	ldr	r3, [r0, #84]	; 0x54
           : m_xFile ? m_xFile->curPosition()
     580:	cbz	r3, 588 <SDFile::position()+0x14>
  uint64_t curPosition() const { return m_curPosition; }
     582:	ldrd	r0, r1, [r3]
     586:	bx	lr
     588:	mov	r0, r3
     58a:	mov	r1, r3
	}
     58c:	bx	lr
     58e:	nop

00000590 <SDFile::size()>:
    return m_fFile ? m_fFile->fileSize() : m_xFile ? m_xFile->fileSize() : 0;
     590:	ldr	r3, [r0, #80]	; 0x50
     592:	cbz	r3, 59a <SDFile::size()+0xa>
     594:	ldr	r0, [r3, #28]
     596:	movs	r1, #0
     598:	bx	lr
     59a:	ldr	r3, [r0, #84]	; 0x54
     59c:	cbz	r3, 5a4 <SDFile::size()+0x14>
  uint64_t fileSize() const { return m_validLength; }
     59e:	ldrd	r0, r1, [r3, #16]
     5a2:	bx	lr
     5a4:	mov	r0, r3
     5a6:	mov	r1, r3
	}
     5a8:	bx	lr
     5aa:	nop

000005ac <SDFile::openNextFile(unsigned char)>:
	virtual File openNextFile(uint8_t mode=0) {
     5ac:	push	{r4, r5, r6, r7, lr}
     5ae:	sub	sp, #84	; 0x54
	constexpr Print() : write_error(0) {}
     5b0:	movs	r2, #0
#include "Print.h"

class Stream : public Print
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     5b2:	mov.w	r4, #1000	; 0x3e8
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     5b6:	ldr	r7, [pc, #144]	; (648 <SDFile::openNextFile(unsigned char)+0x9c>)
   * \param[in] oflag open flags.
   * \return a FatStream object.
   */
  FsFile openNextFile(oflag_t oflag = O_RDONLY) {
    FsFile tmpFile;
    tmpFile.openNext(this, oflag);
     5b8:	adds	r1, #24
     5ba:	mov	r5, r0
     5bc:	add	r0, sp, #16
     5be:	strb.w	r2, [sp, #4]
     5c2:	str	r4, [sp, #8]
     5c4:	strb.w	r2, [sp, #12]
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     5c8:	str	r7, [sp, #0]
  FsBaseFile() = default;
     5ca:	strd	r2, r2, [sp, #72]	; 0x48
    tmpFile.openNext(this, oflag);
     5ce:	bl	784c <FsBaseFile::openNext(FsBaseFile*, int)>
  bool isOpen() const { return m_fFile || m_xFile; }
     5d2:	ldr	r3, [sp, #72]	; 0x48
     5d4:	cbz	r3, 634 <SDFile::openNextFile(unsigned char)+0x88>
		if (file) return File(new SDFile(file));
     5d6:	movs	r0, #92	; 0x5c
class FileImpl {
     5d8:	movs	r6, #0
     5da:	bl	d098 <operator new(unsigned int)>
class Print
     5de:	ldrb.w	r3, [sp, #4]
     5e2:	mov	r4, r0
     5e4:	str	r6, [r0, #4]
     5e6:	strb	r3, [r0, #12]
class StreamFile : public stream_t, public BaseFile {
     5e8:	add	r1, sp, #16
class Stream : public Print
     5ea:	ldr	r3, [sp, #8]
     5ec:	adds	r0, #24
     5ee:	str.w	r3, [r0, #-8]
     5f2:	ldrb.w	r3, [sp, #12]
     5f6:	strb.w	r3, [r0, #-4]
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
     5fa:	ldr	r3, [pc, #80]	; (64c <SDFile::openNextFile(unsigned char)+0xa0>)
     5fc:	str.w	r3, [r0, #-24]
     600:	ldr	r3, [pc, #76]	; (650 <SDFile::openNextFile(unsigned char)+0xa4>)
     602:	str.w	r3, [r0, #-16]
     606:	bl	76f8 <FsBaseFile::FsBaseFile(FsBaseFile const&)>
	File(FileImpl *file) {
     60a:	ldr	r3, [pc, #72]	; (654 <SDFile::openNextFile(unsigned char)+0xa8>)
	constexpr Stream() : _timeout(1000), read_error(0) {}
     60c:	mov.w	r2, #1000	; 0x3e8
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     610:	str	r7, [r4, #8]
     612:	str	r3, [r5, #0]
		if (f) f->refcount++;
     614:	ldr	r3, [r4, #4]
     616:	str	r6, [r4, #88]	; 0x58
     618:	adds	r3, #1
	constexpr Print() : write_error(0) {}
     61a:	strb	r6, [r5, #4]
     61c:	strb	r6, [r5, #12]
     61e:	str	r2, [r5, #8]
		f = file;
     620:	str	r4, [r5, #16]
		if (f) f->refcount++;
     622:	str	r3, [r4, #4]
     624:	ldr	r3, [pc, #48]	; (658 <SDFile::openNextFile(unsigned char)+0xac>)
  ~FsBaseFile() { close(); }
     626:	add	r0, sp, #16
     628:	str	r3, [sp, #0]
     62a:	bl	777c <FsBaseFile::close()>
	}
     62e:	mov	r0, r5
     630:	add	sp, #84	; 0x54
     632:	pop	{r4, r5, r6, r7, pc}
  bool isOpen() const { return m_fFile || m_xFile; }
     634:	ldr	r3, [sp, #76]	; 0x4c
     636:	cmp	r3, #0
     638:	bne.n	5d6 <SDFile::openNextFile(unsigned char)+0x2a>
	constexpr File() : f(nullptr) { }
     63a:	ldr	r2, [pc, #24]	; (654 <SDFile::openNextFile(unsigned char)+0xa8>)
     63c:	strb	r3, [r5, #4]
     63e:	str	r4, [r5, #8]
     640:	strb	r3, [r5, #12]
     642:	str	r2, [r5, #0]
     644:	str	r3, [r5, #16]
     646:	b.n	624 <SDFile::openNextFile(unsigned char)+0x78>
     648:	.word	0x20000ab8
     64c:	.word	0x20000ae8
     650:	.word	0x20000b44
     654:	.word	0x20000a8c
     658:	.word	0x2000099c

0000065c <StreamFile<FsBaseFile, unsigned long long>::peek()>:
    return m_fFile ? m_fFile->peek() : m_xFile ? m_xFile->peek() : -1;
     65c:	ldr	r3, [r0, #72]	; 0x48
     65e:	cbz	r3, 666 <StreamFile<FsBaseFile, unsigned long long>::peek()+0xa>
     660:	mov	r0, r3
     662:	b.w	626c <FatFile::peek()>
     666:	ldr	r0, [r0, #76]	; 0x4c
     668:	cbz	r0, 66e <StreamFile<FsBaseFile, unsigned long long>::peek()+0x12>
     66a:	b.w	3e04 <ExFatFile::peek()>
  int peek() { return BaseFile::peek(); }
     66e:	mov.w	r0, #4294967295
     672:	bx	lr

00000674 <SDFile::peek()>:
     674:	ldr	r3, [r0, #80]	; 0x50
     676:	cbz	r3, 67e <SDFile::peek()+0xa>
     678:	mov	r0, r3
     67a:	b.w	626c <FatFile::peek()>
     67e:	ldr	r0, [r0, #84]	; 0x54
     680:	cbz	r0, 686 <SDFile::peek()+0x12>
     682:	b.w	3e04 <ExFatFile::peek()>
	}
     686:	mov.w	r0, #4294967295
     68a:	bx	lr

0000068c <SDFile::isDirectory()>:
    return m_fFile ? m_fFile->isDir() : m_xFile ? m_xFile->isDir() : false;
     68c:	ldr	r3, [r0, #80]	; 0x50
     68e:	cbz	r3, 69e <SDFile::isDirectory()+0x12>
  bool isDir() const { return m_attributes & FILE_ATTR_DIR; }
     690:	ldrb	r3, [r3, #0]
     692:	tst.w	r3, #208	; 0xd0
     696:	ite	ne
     698:	movne	r0, #1
     69a:	moveq	r0, #0
     69c:	bx	lr
     69e:	ldr	r0, [r0, #84]	; 0x54
     6a0:	cbz	r0, 6b0 <SDFile::isDirectory()+0x24>
     6a2:	ldrb.w	r3, [r0, #49]	; 0x31
     6a6:	tst.w	r3, #80	; 0x50
     6aa:	ite	ne
     6ac:	movne	r0, #1
     6ae:	moveq	r0, #0
	}
     6b0:	bx	lr
     6b2:	nop

000006b4 <SDFile::read(void*, unsigned int)>:
    return m_fFile   ? m_fFile->read(buf, count)
     6b4:	ldr	r3, [r0, #80]	; 0x50
     6b6:	cbz	r3, 6be <SDFile::read(void*, unsigned int)+0xa>
     6b8:	mov	r0, r3
     6ba:	b.w	60c4 <FatFile::read(void*, unsigned int)>
     6be:	ldr	r0, [r0, #84]	; 0x54
           : m_xFile ? m_xFile->read(buf, count)
     6c0:	cbz	r0, 6c6 <SDFile::read(void*, unsigned int)+0x12>
     6c2:	b.w	3c64 <ExFatFile::read(void*, unsigned int)>
	}
     6c6:	mov.w	r0, #4294967295
     6ca:	bx	lr

000006cc <StreamFile<FsBaseFile, unsigned long long>::read()>:
    return m_fFile   ? m_fFile->read(buf, count)
     6cc:	ldr	r3, [r0, #72]	; 0x48
  int read() { return BaseFile::read(); }
     6ce:	push	{lr}
     6d0:	sub	sp, #12
     6d2:	cbz	r3, 6ee <StreamFile<FsBaseFile, unsigned long long>::read()+0x22>
     6d4:	movs	r2, #1
     6d6:	add.w	r1, sp, #7
     6da:	mov	r0, r3
     6dc:	bl	60c4 <FatFile::read(void*, unsigned int)>
    return read(&b, 1) == 1 ? b : -1;
     6e0:	cmp	r0, #1
     6e2:	bne.n	6fe <StreamFile<FsBaseFile, unsigned long long>::read()+0x32>
     6e4:	ldrb.w	r0, [sp, #7]
     6e8:	add	sp, #12
     6ea:	ldr.w	pc, [sp], #4
     6ee:	ldr	r0, [r0, #76]	; 0x4c
           : m_xFile ? m_xFile->read(buf, count)
     6f0:	cbz	r0, 6fe <StreamFile<FsBaseFile, unsigned long long>::read()+0x32>
     6f2:	movs	r2, #1
     6f4:	add.w	r1, sp, #7
     6f8:	bl	3c64 <ExFatFile::read(void*, unsigned int)>
     6fc:	b.n	6e0 <StreamFile<FsBaseFile, unsigned long long>::read()+0x14>
    return read(&b, 1) == 1 ? b : -1;
     6fe:	mov.w	r0, #4294967295
     702:	b.n	6e8 <StreamFile<FsBaseFile, unsigned long long>::read()+0x1c>

00000704 <SDFile::flush()>:
    return m_fFile ? m_fFile->sync() : m_xFile ? m_xFile->sync() : false;
     704:	ldr	r3, [r0, #80]	; 0x50
     706:	cbz	r3, 70e <SDFile::flush()+0xa>
     708:	mov	r0, r3
     70a:	b.w	67bc <FatFile::sync()>
     70e:	ldr	r0, [r0, #84]	; 0x54
     710:	cbz	r0, 716 <SDFile::flush()+0x12>
     712:	b.w	4c18 <ExFatFile::sync()>
	}
     716:	bx	lr

00000718 <StreamFile<FsBaseFile, unsigned long long>::flush()>:
     718:	ldr	r3, [r0, #72]	; 0x48
     71a:	cbz	r3, 722 <StreamFile<FsBaseFile, unsigned long long>::flush()+0xa>
     71c:	mov	r0, r3
     71e:	b.w	67bc <FatFile::sync()>
     722:	ldr	r0, [r0, #76]	; 0x4c
     724:	cbz	r0, 72a <StreamFile<FsBaseFile, unsigned long long>::flush()+0x12>
     726:	b.w	4c18 <ExFatFile::sync()>
  void flush() { BaseFile::sync(); }
     72a:	bx	lr

0000072c <SDFile::write(void const*, unsigned int)>:
    return m_fFile   ? m_fFile->write(buf, count)
     72c:	ldr	r3, [r0, #80]	; 0x50
     72e:	cbz	r3, 736 <SDFile::write(void const*, unsigned int)+0xa>
     730:	mov	r0, r3
     732:	b.w	6914 <FatFile::write(void const*, unsigned int)>
     736:	ldr	r0, [r0, #84]	; 0x54
           : m_xFile ? m_xFile->write(buf, count)
     738:	cbz	r0, 73e <SDFile::write(void const*, unsigned int)+0x12>
     73a:	b.w	515c <ExFatFile::write(void const*, unsigned int)>
	}
     73e:	bx	lr

00000740 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)>:
    return m_fFile   ? m_fFile->write(buf, count)
     740:	ldr	r3, [r0, #72]	; 0x48
     742:	cbz	r3, 74a <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0xa>
     744:	mov	r0, r3
     746:	b.w	6914 <FatFile::write(void const*, unsigned int)>
     74a:	ldr	r0, [r0, #76]	; 0x4c
           : m_xFile ? m_xFile->write(buf, count)
     74c:	cbz	r0, 752 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0x12>
     74e:	b.w	515c <ExFatFile::write(void const*, unsigned int)>
   * \return For success write() returns the number of bytes written, always
   * \a size.
   */
  size_t write(const uint8_t* buffer, size_t size) {
    return BaseFile::write(buffer, size);
  }
     752:	bx	lr

00000754 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)>:
  size_t write(uint8_t b) { return BaseFile::write(b); }
     754:	push	{lr}
    return m_fFile   ? m_fFile->write(buf, count)
     756:	ldr	r3, [r0, #72]	; 0x48
     758:	sub	sp, #12
     75a:	strb.w	r1, [sp, #7]
     75e:	cbz	r3, 772 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x1e>
     760:	movs	r2, #1
     762:	add.w	r1, sp, #7
     766:	mov	r0, r3
     768:	bl	6914 <FatFile::write(void const*, unsigned int)>
     76c:	add	sp, #12
     76e:	ldr.w	pc, [sp], #4
     772:	ldr	r0, [r0, #76]	; 0x4c
           : m_xFile ? m_xFile->write(buf, count)
     774:	cmp	r0, #0
     776:	beq.n	76c <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x18>
     778:	movs	r2, #1
     77a:	add.w	r1, sp, #7
     77e:	bl	515c <ExFatFile::write(void const*, unsigned int)>
     782:	add	sp, #12
     784:	ldr.w	pc, [sp], #4

00000788 <SDFile::setModifyTime(DateTimeFields const&)>:
	virtual bool setModifyTime(const DateTimeFields &tm) {
		if (tm.year < 80 || tm.year > 207) return false;
     788:	ldrb	r2, [r1, #6]
     78a:	sub.w	r3, r2, #80	; 0x50
     78e:	lsls	r3, r3, #24
     790:	bmi.n	7d8 <SDFile::setModifyTime(DateTimeFields const&)+0x50>
		return sdfatfile.timestamp(T_WRITE, tm.year + 1900, tm.mon + 1,
     792:	addw	r2, r2, #1900	; 0x76c
	virtual bool setModifyTime(const DateTimeFields &tm) {
     796:	push	{r4, r5, r6, r7, lr}
		return sdfatfile.timestamp(T_WRITE, tm.year + 1900, tm.mon + 1,
     798:	ldrb	r3, [r1, #5]
	virtual bool setModifyTime(const DateTimeFields &tm) {
     79a:	sub	sp, #20
    return m_fFile   ? m_fFile->timestamp(flags, year, month, day, hour, minute,
     79c:	ldr	r4, [r0, #80]	; 0x50
		return sdfatfile.timestamp(T_WRITE, tm.year + 1900, tm.mon + 1,
     79e:	adds	r3, #1
			tm.mday, tm.hour, tm.min, tm.sec);
     7a0:	ldrb	r5, [r1, #4]
     7a2:	ldrb	r6, [r1, #2]
     7a4:	ldrb	r7, [r1, #1]
		return sdfatfile.timestamp(T_WRITE, tm.year + 1900, tm.mon + 1,
     7a6:	uxtb	r3, r3
			tm.mday, tm.hour, tm.min, tm.sec);
     7a8:	ldrb	r1, [r1, #0]
     7aa:	cbz	r4, 7c0 <SDFile::setModifyTime(DateTimeFields const&)+0x38>
     7ac:	mov	r0, r4
     7ae:	str	r6, [sp, #4]
     7b0:	str	r5, [sp, #0]
     7b2:	strd	r7, r1, [sp, #8]
     7b6:	movs	r1, #4
     7b8:	bl	67c8 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
	}
     7bc:	add	sp, #20
     7be:	pop	{r4, r5, r6, r7, pc}
     7c0:	ldr	r0, [r0, #84]	; 0x54
           : m_xFile ? m_xFile->timestamp(flags, year, month, day, hour, minute,
     7c2:	cmp	r0, #0
     7c4:	beq.n	7bc <SDFile::setModifyTime(DateTimeFields const&)+0x34>
     7c6:	str	r6, [sp, #4]
     7c8:	str	r5, [sp, #0]
     7ca:	strd	r7, r1, [sp, #8]
     7ce:	movs	r1, #4
     7d0:	bl	4f00 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
     7d4:	add	sp, #20
     7d6:	pop	{r4, r5, r6, r7, pc}
		if (tm.year < 80 || tm.year > 207) return false;
     7d8:	movs	r0, #0
	}
     7da:	bx	lr

000007dc <SDFile::available()>:
    return m_fFile ? m_fFile->available() : m_xFile ? m_xFile->available() : 0;
     7dc:	ldr	r3, [r0, #80]	; 0x50
     7de:	cbz	r3, 7f6 <SDFile::available()+0x1a>
    return isFile() ? fileSize() - curPosition() : 0;
     7e0:	ldrb	r0, [r3, #0]
     7e2:	ands.w	r0, r0, #8
     7e6:	beq.n	804 <SDFile::available()+0x28>
     7e8:	ldr	r0, [r3, #28]
     7ea:	ldr	r3, [r3, #20]
    return n > INT_MAX ? INT_MAX : n;
     7ec:	subs	r0, r0, r3
     7ee:	it	mi
     7f0:	mvnmi.w	r0, #2147483648	; 0x80000000
     7f4:	bx	lr
     7f6:	ldr	r3, [r0, #84]	; 0x54
     7f8:	cbz	r3, 824 <SDFile::available()+0x48>
  uint64_t available64() { return isFile() ? fileSize() - curPosition() : 0; }
     7fa:	ldrb.w	r0, [r3, #49]	; 0x31
     7fe:	ands.w	r0, r0, #8
     802:	bne.n	806 <SDFile::available()+0x2a>
	}
     804:	bx	lr
     806:	ldr	r0, [r3, #16]
     808:	ldr	r1, [r3, #0]
     80a:	ldr	r2, [r3, #20]
     80c:	subs	r0, r0, r1
     80e:	ldr	r3, [r3, #4]
     810:	sbc.w	r3, r2, r3
    return n > INT_MAX ? INT_MAX : n;
     814:	cmp.w	r0, #2147483648	; 0x80000000
     818:	sbcs.w	r3, r3, #0
     81c:	bcc.n	804 <SDFile::available()+0x28>
     81e:	mvn.w	r0, #2147483648	; 0x80000000
     822:	bx	lr
     824:	mov	r0, r3
		return sdfatfile.available();
     826:	b.n	804 <SDFile::available()+0x28>

00000828 <StreamFile<FsBaseFile, unsigned long long>::available()>:
     828:	ldr	r3, [r0, #72]	; 0x48
     82a:	cbz	r3, 842 <StreamFile<FsBaseFile, unsigned long long>::available()+0x1a>
    return isFile() ? fileSize() - curPosition() : 0;
     82c:	ldrb	r0, [r3, #0]
     82e:	ands.w	r0, r0, #8
     832:	beq.n	850 <StreamFile<FsBaseFile, unsigned long long>::available()+0x28>
     834:	ldr	r0, [r3, #28]
     836:	ldr	r3, [r3, #20]
    return n > INT_MAX ? INT_MAX : n;
     838:	subs	r0, r0, r3
     83a:	it	mi
     83c:	mvnmi.w	r0, #2147483648	; 0x80000000
     840:	bx	lr
     842:	ldr	r3, [r0, #76]	; 0x4c
     844:	cbz	r3, 870 <StreamFile<FsBaseFile, unsigned long long>::available()+0x48>
  uint64_t available64() { return isFile() ? fileSize() - curPosition() : 0; }
     846:	ldrb.w	r0, [r3, #49]	; 0x31
     84a:	ands.w	r0, r0, #8
     84e:	bne.n	852 <StreamFile<FsBaseFile, unsigned long long>::available()+0x2a>
  int available() { return BaseFile::available(); }
     850:	bx	lr
     852:	ldr	r0, [r3, #16]
     854:	ldr	r1, [r3, #0]
     856:	ldr	r2, [r3, #20]
     858:	subs	r0, r0, r1
     85a:	ldr	r3, [r3, #4]
     85c:	sbc.w	r3, r2, r3
    return n > INT_MAX ? INT_MAX : n;
     860:	cmp.w	r0, #2147483648	; 0x80000000
     864:	sbcs.w	r3, r3, #0
     868:	bcc.n	850 <StreamFile<FsBaseFile, unsigned long long>::available()+0x28>
     86a:	mvn.w	r0, #2147483648	; 0x80000000
     86e:	bx	lr
     870:	mov	r0, r3
     872:	b.n	850 <StreamFile<FsBaseFile, unsigned long long>::available()+0x28>

00000874 <File::write(unsigned char)>:
	size_t write(uint8_t b) {
     874:	push	{lr}
		return (f) ? f->write(&b, 1) : 0;
     876:	ldr	r0, [r0, #16]
	size_t write(uint8_t b) {
     878:	sub	sp, #12
     87a:	strb.w	r1, [sp, #7]
		return (f) ? f->write(&b, 1) : 0;
     87e:	cbz	r0, 89a <File::write(unsigned char)+0x26>
     880:	ldr	r3, [r0, #0]
     882:	ldr	r2, [pc, #64]	; (8c4 <File::write(unsigned char)+0x50>)
     884:	ldr	r3, [r3, #12]
     886:	cmp	r3, r2
     888:	bne.n	8b6 <File::write(unsigned char)+0x42>
    return m_fFile   ? m_fFile->write(buf, count)
     88a:	ldr	r3, [r0, #80]	; 0x50
     88c:	cbz	r3, 8a0 <File::write(unsigned char)+0x2c>
     88e:	movs	r2, #1
     890:	add.w	r1, sp, #7
     894:	mov	r0, r3
     896:	bl	6914 <FatFile::write(void const*, unsigned int)>
	}
     89a:	add	sp, #12
     89c:	ldr.w	pc, [sp], #4
     8a0:	ldr	r0, [r0, #84]	; 0x54
           : m_xFile ? m_xFile->write(buf, count)
     8a2:	cmp	r0, #0
     8a4:	beq.n	89a <File::write(unsigned char)+0x26>
     8a6:	movs	r2, #1
     8a8:	add.w	r1, sp, #7
     8ac:	bl	515c <ExFatFile::write(void const*, unsigned int)>
     8b0:	add	sp, #12
     8b2:	ldr.w	pc, [sp], #4
		return (f) ? f->write(&b, 1) : 0;
     8b6:	movs	r2, #1
     8b8:	add.w	r1, sp, #7
     8bc:	blx	r3
	}
     8be:	add	sp, #12
     8c0:	ldr.w	pc, [sp], #4
     8c4:	.word	0x0000072d

000008c8 <File::write(unsigned char const*, unsigned int)>:
		return (f) ? f->write((void*)buf, size) : 0;
     8c8:	ldr	r3, [r0, #16]
     8ca:	cbz	r3, 902 <File::write(unsigned char const*, unsigned int)+0x3a>
     8cc:	ldr	r0, [pc, #56]	; (908 <File::write(unsigned char const*, unsigned int)+0x40>)
	virtual size_t write(const uint8_t *buf, size_t size) {
     8ce:	push	{r4}
		return (f) ? f->write((void*)buf, size) : 0;
     8d0:	ldr	r4, [r3, #0]
     8d2:	ldr	r4, [r4, #12]
     8d4:	cmp	r4, r0
     8d6:	bne.n	8f8 <File::write(unsigned char const*, unsigned int)+0x30>
    return m_fFile   ? m_fFile->write(buf, count)
     8d8:	ldr	r0, [r3, #80]	; 0x50
     8da:	cbz	r0, 8e4 <File::write(unsigned char const*, unsigned int)+0x1c>
	}
     8dc:	ldr.w	r4, [sp], #4
     8e0:	b.w	6914 <FatFile::write(void const*, unsigned int)>
     8e4:	ldr	r0, [r3, #84]	; 0x54
           : m_xFile ? m_xFile->write(buf, count)
     8e6:	cbz	r0, 8f0 <File::write(unsigned char const*, unsigned int)+0x28>
     8e8:	ldr.w	r4, [sp], #4
     8ec:	b.w	515c <ExFatFile::write(void const*, unsigned int)>
     8f0:	movs	r0, #0
     8f2:	ldr.w	r4, [sp], #4
     8f6:	bx	lr
		return (f) ? f->write((void*)buf, size) : 0;
     8f8:	mov	r0, r3
     8fa:	mov	r3, r4
	}
     8fc:	ldr.w	r4, [sp], #4
		return (f) ? f->write((void*)buf, size) : 0;
     900:	bx	r3
	}
     902:	movs	r0, #0
     904:	bx	lr
     906:	nop
     908:	.word	0x0000072d

0000090c <SDFile::~SDFile()>:
	virtual ~SDFile(void) {
     90c:	push	{r3, r4, r5, lr}
     90e:	mov	r4, r0
     910:	ldr	r3, [pc, #48]	; (944 <SDFile::~SDFile()+0x38>)
		if (filename) {
     912:	ldr	r0, [r0, #88]	; 0x58
	virtual ~SDFile(void) {
     914:	str	r3, [r4, #0]
		if (filename) {
     916:	cbz	r0, 920 <SDFile::~SDFile()+0x14>
			free(filename);
     918:	bl	d240 <free>
			filename = nullptr;
     91c:	movs	r3, #0
     91e:	str	r3, [r4, #88]	; 0x58
  bool isOpen() const { return m_fFile || m_xFile; }
     920:	ldr	r3, [r4, #80]	; 0x50
			sdfatfile.close();
     922:	add.w	r5, r4, #24
     926:	cbz	r3, 93c <SDFile::~SDFile()+0x30>
     928:	mov	r0, r5
     92a:	bl	777c <FsBaseFile::close()>
class StreamFile : public stream_t, public BaseFile {
     92e:	ldr	r3, [pc, #24]	; (948 <SDFile::~SDFile()+0x3c>)
  ~FsBaseFile() { close(); }
     930:	mov	r0, r5
     932:	str	r3, [r4, #8]
     934:	bl	777c <FsBaseFile::close()>
	}
     938:	mov	r0, r4
     93a:	pop	{r3, r4, r5, pc}
  bool isOpen() const { return m_fFile || m_xFile; }
     93c:	ldr	r3, [r4, #84]	; 0x54
     93e:	cmp	r3, #0
     940:	bne.n	928 <SDFile::~SDFile()+0x1c>
     942:	b.n	92e <SDFile::~SDFile()+0x22>
     944:	.word	0x20000ae8
     948:	.word	0x2000099c

0000094c <SDFile::~SDFile()>:
	virtual ~SDFile(void) {
     94c:	push	{r3, r4, r5, lr}
     94e:	mov	r4, r0
     950:	ldr	r3, [pc, #56]	; (98c <SDFile::~SDFile()+0x40>)
		if (filename) {
     952:	ldr	r0, [r0, #88]	; 0x58
	virtual ~SDFile(void) {
     954:	str	r3, [r4, #0]
		if (filename) {
     956:	cbz	r0, 960 <SDFile::~SDFile()+0x14>
			free(filename);
     958:	bl	d240 <free>
			filename = nullptr;
     95c:	movs	r3, #0
     95e:	str	r3, [r4, #88]	; 0x58
     960:	ldr	r3, [r4, #80]	; 0x50
			sdfatfile.close();
     962:	add.w	r5, r4, #24
     966:	cbz	r3, 984 <SDFile::~SDFile()+0x38>
     968:	mov	r0, r5
     96a:	bl	777c <FsBaseFile::close()>
     96e:	ldr	r3, [pc, #32]	; (990 <SDFile::~SDFile()+0x44>)
  ~FsBaseFile() { close(); }
     970:	mov	r0, r5
     972:	str	r3, [r4, #8]
     974:	bl	777c <FsBaseFile::close()>
	}
     978:	mov	r0, r4
     97a:	movs	r1, #92	; 0x5c
     97c:	bl	d09c <operator delete(void*, unsigned int)>
     980:	mov	r0, r4
     982:	pop	{r3, r4, r5, pc}
  bool isOpen() const { return m_fFile || m_xFile; }
     984:	ldr	r3, [r4, #84]	; 0x54
     986:	cmp	r3, #0
     988:	bne.n	968 <SDFile::~SDFile()+0x1c>
     98a:	b.n	96e <SDFile::~SDFile()+0x22>
     98c:	.word	0x20000ae8
     990:	.word	0x2000099c

00000994 <SDFile::seek(unsigned long long, int)>:
	virtual bool seek(uint64_t pos, int mode = SeekSet) {
     994:	push	{r4, r5}
     996:	ldr	r4, [sp, #8]
     998:	mov	r1, r2
     99a:	mov	ip, r3
		if (mode == SeekSet) return sdfatfile.seekSet(pos);
     99c:	cbz	r4, 9ac <SDFile::seek(unsigned long long, int)+0x18>
		if (mode == SeekCur) return sdfatfile.seekCur(pos);
     99e:	cmp	r4, #1
     9a0:	beq.n	9dc <SDFile::seek(unsigned long long, int)+0x48>
		if (mode == SeekEnd) return sdfatfile.seekEnd(pos);
     9a2:	cmp	r4, #2
     9a4:	beq.n	9c4 <SDFile::seek(unsigned long long, int)+0x30>
	}
     9a6:	movs	r0, #0
     9a8:	pop	{r4, r5}
     9aa:	bx	lr
    return m_fFile   ? pos < (1ULL << 32) && m_fFile->seekSet(pos)
     9ac:	ldr	r5, [r0, #80]	; 0x50
     9ae:	cbz	r5, 9ee <SDFile::seek(unsigned long long, int)+0x5a>
     9b0:	mov.w	r3, #4294967295
     9b4:	cmp	r3, r2
     9b6:	sbcs.w	r4, r4, ip
     9ba:	bcc.n	9a6 <SDFile::seek(unsigned long long, int)+0x12>
     9bc:	mov	r0, r5
     9be:	pop	{r4, r5}
     9c0:	b.w	6554 <FatFile::seekSet(unsigned long)>
    return m_fFile ? m_fFile->fileSize() : m_xFile ? m_xFile->fileSize() : 0;
     9c4:	ldr	r2, [r0, #80]	; 0x50
     9c6:	cbz	r2, a0c <SDFile::seek(unsigned long long, int)+0x78>
     9c8:	ldr	r3, [r2, #28]
  bool seekEnd(int64_t offset = 0) { return seekSet(fileSize() + offset); }
     9ca:	adds	r1, r3, r1
     9cc:	adc.w	r3, ip, #0
    return m_fFile   ? pos < (1ULL << 32) && m_fFile->seekSet(pos)
     9d0:	cmp	r3, #0
     9d2:	bne.n	9a6 <SDFile::seek(unsigned long long, int)+0x12>
     9d4:	mov	r0, r2
     9d6:	pop	{r4, r5}
     9d8:	b.w	6554 <FatFile::seekSet(unsigned long)>
    return m_fFile   ? m_fFile->curPosition()
     9dc:	ldr	r2, [r0, #80]	; 0x50
     9de:	cbz	r2, 9fa <SDFile::seek(unsigned long long, int)+0x66>
     9e0:	ldr	r3, [r2, #20]
  bool seekCur(int64_t offset) { return seekSet(curPosition() + offset); }
     9e2:	adds	r1, r3, r1
     9e4:	adc.w	r3, ip, #0
    return m_fFile   ? pos < (1ULL << 32) && m_fFile->seekSet(pos)
     9e8:	cmp	r3, #0
     9ea:	bne.n	9a6 <SDFile::seek(unsigned long long, int)+0x12>
     9ec:	b.n	9d4 <SDFile::seek(unsigned long long, int)+0x40>
     9ee:	ldr	r0, [r0, #84]	; 0x54
           : m_xFile ? m_xFile->seekSet(pos)
     9f0:	cmp	r0, #0
     9f2:	beq.n	9a6 <SDFile::seek(unsigned long long, int)+0x12>
     9f4:	pop	{r4, r5}
     9f6:	b.w	3e30 <ExFatFile::seekSet(unsigned long long)>
     9fa:	ldr	r0, [r0, #84]	; 0x54
           : m_xFile ? m_xFile->curPosition()
     9fc:	cmp	r0, #0
     9fe:	beq.n	9a6 <SDFile::seek(unsigned long long, int)+0x12>
  bool seekCur(int64_t offset) { return seekSet(curPosition() + offset); }
     a00:	ldrd	r2, r3, [r0]
     a04:	adds	r2, r1, r2
           : m_xFile ? m_xFile->seekSet(pos)
     a06:	adc.w	r3, ip, r3
     a0a:	b.n	9f4 <SDFile::seek(unsigned long long, int)+0x60>
     a0c:	ldr	r0, [r0, #84]	; 0x54
    return m_fFile ? m_fFile->fileSize() : m_xFile ? m_xFile->fileSize() : 0;
     a0e:	cmp	r0, #0
     a10:	beq.n	9a6 <SDFile::seek(unsigned long long, int)+0x12>
  bool seekEnd(int64_t offset = 0) { return seekSet(fileSize() + offset); }
     a12:	ldrd	r2, r3, [r0, #16]
     a16:	pop	{r4, r5}
     a18:	adds	r2, r1, r2
           : m_xFile ? m_xFile->seekSet(pos)
     a1a:	adc.w	r3, ip, r3
     a1e:	b.w	3e30 <ExFatFile::seekSet(unsigned long long)>
     a22:	nop

00000a24 <File::~File()>:
	virtual ~File() {
     a24:	push	{r4, r5, r6, lr}
     a26:	ldr	r3, [pc, #144]	; (ab8 <File::~File()+0x94>)
     a28:	mov	r4, r0
		if (f) dec_refcount();
     a2a:	ldr	r5, [r0, #16]
	virtual ~File() {
     a2c:	str	r3, [r0, #0]
		if (f) dec_refcount();
     a2e:	cmp	r5, #0
     a30:	beq.n	a98 <File::~File()+0x74>
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	using Print::write;
private:
	void dec_refcount() {
		if (--(f->refcount) == 0) {
     a32:	ldr	r6, [r5, #4]
     a34:	subs	r6, #1
     a36:	str	r6, [r5, #4]
     a38:	cbnz	r6, a98 <File::~File()+0x74>
			f->close();
     a3a:	ldr	r3, [r5, #0]
     a3c:	ldr	r2, [pc, #124]	; (abc <File::~File()+0x98>)
     a3e:	ldr	r3, [r3, #44]	; 0x2c
     a40:	cmp	r3, r2
     a42:	bne.n	aa4 <File::~File()+0x80>
		if (filename) {
     a44:	ldr	r0, [r5, #88]	; 0x58
     a46:	cbz	r0, a4e <File::~File()+0x2a>
			free(filename);
     a48:	bl	d240 <free>
			filename = nullptr;
     a4c:	str	r6, [r5, #88]	; 0x58
  bool isOpen() const { return m_fFile || m_xFile; }
     a4e:	ldr	r3, [r5, #80]	; 0x50
     a50:	cbz	r3, a9c <File::~File()+0x78>
			sdfatfile.close();
     a52:	add.w	r0, r5, #24
     a56:	bl	777c <FsBaseFile::close()>
			delete f;
     a5a:	ldr	r5, [r4, #16]
     a5c:	cbz	r5, a98 <File::~File()+0x74>
     a5e:	ldr	r3, [r5, #0]
     a60:	ldr	r2, [pc, #92]	; (ac0 <File::~File()+0x9c>)
     a62:	ldr	r3, [r3, #4]
     a64:	cmp	r3, r2
     a66:	bne.n	ab2 <File::~File()+0x8e>
	virtual ~SDFile(void) {
     a68:	ldr	r3, [pc, #88]	; (ac4 <File::~File()+0xa0>)
		if (filename) {
     a6a:	ldr	r0, [r5, #88]	; 0x58
	virtual ~SDFile(void) {
     a6c:	str	r3, [r5, #0]
		if (filename) {
     a6e:	cbz	r0, a78 <File::~File()+0x54>
			free(filename);
     a70:	bl	d240 <free>
			filename = nullptr;
     a74:	movs	r3, #0
     a76:	str	r3, [r5, #88]	; 0x58
     a78:	ldr	r3, [r5, #80]	; 0x50
			sdfatfile.close();
     a7a:	add.w	r6, r5, #24
     a7e:	cbz	r3, aaa <File::~File()+0x86>
     a80:	mov	r0, r6
     a82:	bl	777c <FsBaseFile::close()>
     a86:	ldr	r3, [pc, #64]	; (ac8 <File::~File()+0xa4>)
  ~FsBaseFile() { close(); }
     a88:	mov	r0, r6
     a8a:	str	r3, [r5, #8]
     a8c:	bl	777c <FsBaseFile::close()>
	}
     a90:	movs	r1, #92	; 0x5c
     a92:	mov	r0, r5
     a94:	bl	d09c <operator delete(void*, unsigned int)>
	}
     a98:	mov	r0, r4
     a9a:	pop	{r4, r5, r6, pc}
  bool isOpen() const { return m_fFile || m_xFile; }
     a9c:	ldr	r3, [r5, #84]	; 0x54
     a9e:	cmp	r3, #0
     aa0:	bne.n	a52 <File::~File()+0x2e>
     aa2:	b.n	a5a <File::~File()+0x36>
			f->close();
     aa4:	mov	r0, r5
     aa6:	blx	r3
     aa8:	b.n	a5a <File::~File()+0x36>
     aaa:	ldr	r3, [r5, #84]	; 0x54
     aac:	cmp	r3, #0
     aae:	bne.n	a80 <File::~File()+0x5c>
     ab0:	b.n	a86 <File::~File()+0x62>
			delete f;
     ab2:	mov	r0, r5
     ab4:	blx	r3
     ab6:	b.n	a98 <File::~File()+0x74>
     ab8:	.word	0x20000a8c
     abc:	.word	0x0000022d
     ac0:	.word	0x0000094d
     ac4:	.word	0x20000ae8
     ac8:	.word	0x2000099c

00000acc <File::~File()>:
	virtual ~File() {
     acc:	push	{r4, r5, r6, lr}
     ace:	ldr	r3, [pc, #152]	; (b68 <File::~File()+0x9c>)
     ad0:	mov	r4, r0
		if (f) dec_refcount();
     ad2:	ldr	r5, [r0, #16]
	virtual ~File() {
     ad4:	str	r3, [r0, #0]
		if (f) dec_refcount();
     ad6:	cmp	r5, #0
     ad8:	beq.n	b40 <File::~File()+0x74>
		if (--(f->refcount) == 0) {
     ada:	ldr	r6, [r5, #4]
     adc:	subs	r6, #1
     ade:	str	r6, [r5, #4]
     ae0:	cbnz	r6, b40 <File::~File()+0x74>
			f->close();
     ae2:	ldr	r3, [r5, #0]
     ae4:	ldr	r2, [pc, #132]	; (b6c <File::~File()+0xa0>)
     ae6:	ldr	r3, [r3, #44]	; 0x2c
     ae8:	cmp	r3, r2
     aea:	bne.n	b54 <File::~File()+0x88>
		if (filename) {
     aec:	ldr	r0, [r5, #88]	; 0x58
     aee:	cbz	r0, af6 <File::~File()+0x2a>
			free(filename);
     af0:	bl	d240 <free>
			filename = nullptr;
     af4:	str	r6, [r5, #88]	; 0x58
     af6:	ldr	r3, [r5, #80]	; 0x50
     af8:	cbz	r3, b4c <File::~File()+0x80>
			sdfatfile.close();
     afa:	add.w	r0, r5, #24
     afe:	bl	777c <FsBaseFile::close()>
			delete f;
     b02:	ldr	r5, [r4, #16]
     b04:	cbz	r5, b40 <File::~File()+0x74>
     b06:	ldr	r3, [r5, #0]
     b08:	ldr	r2, [pc, #100]	; (b70 <File::~File()+0xa4>)
     b0a:	ldr	r3, [r3, #4]
     b0c:	cmp	r3, r2
     b0e:	bne.n	b62 <File::~File()+0x96>
	virtual ~SDFile(void) {
     b10:	ldr	r3, [pc, #96]	; (b74 <File::~File()+0xa8>)
		if (filename) {
     b12:	ldr	r0, [r5, #88]	; 0x58
	virtual ~SDFile(void) {
     b14:	str	r3, [r5, #0]
		if (filename) {
     b16:	cbz	r0, b20 <File::~File()+0x54>
			free(filename);
     b18:	bl	d240 <free>
			filename = nullptr;
     b1c:	movs	r3, #0
     b1e:	str	r3, [r5, #88]	; 0x58
     b20:	ldr	r3, [r5, #80]	; 0x50
			sdfatfile.close();
     b22:	add.w	r6, r5, #24
     b26:	cbz	r3, b5a <File::~File()+0x8e>
     b28:	mov	r0, r6
     b2a:	bl	777c <FsBaseFile::close()>
     b2e:	ldr	r3, [pc, #72]	; (b78 <File::~File()+0xac>)
  ~FsBaseFile() { close(); }
     b30:	mov	r0, r6
     b32:	str	r3, [r5, #8]
     b34:	bl	777c <FsBaseFile::close()>
	}
     b38:	movs	r1, #92	; 0x5c
     b3a:	mov	r0, r5
     b3c:	bl	d09c <operator delete(void*, unsigned int)>
	}
     b40:	mov	r0, r4
     b42:	movs	r1, #20
     b44:	bl	d09c <operator delete(void*, unsigned int)>
     b48:	mov	r0, r4
     b4a:	pop	{r4, r5, r6, pc}
  bool isOpen() const { return m_fFile || m_xFile; }
     b4c:	ldr	r3, [r5, #84]	; 0x54
     b4e:	cmp	r3, #0
     b50:	bne.n	afa <File::~File()+0x2e>
     b52:	b.n	b02 <File::~File()+0x36>
			f->close();
     b54:	mov	r0, r5
     b56:	blx	r3
     b58:	b.n	b02 <File::~File()+0x36>
     b5a:	ldr	r3, [r5, #84]	; 0x54
     b5c:	cmp	r3, #0
     b5e:	bne.n	b28 <File::~File()+0x5c>
     b60:	b.n	b2e <File::~File()+0x62>
			delete f;
     b62:	mov	r0, r5
     b64:	blx	r3
     b66:	b.n	b40 <File::~File()+0x74>
     b68:	.word	0x20000a8c
     b6c:	.word	0x0000022d
     b70:	.word	0x0000094d
     b74:	.word	0x20000ae8
     b78:	.word	0x2000099c

00000b7c <I2S_32::config_i2s()>:

//#define AUDIO_SAMPLE_RATE_EXACT 44100 // used for initialization

void I2S_32::config_i2s(void)
{
	CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
     b7c:	ldr	r2, [pc, #200]	; (c48 <I2S_32::config_i2s()+0xcc>)

	// if either transmitter or receiver is enabled, do nothing
	if (I2S1_TCSR & I2S_TCSR_TE) return;
     b7e:	ldr	r1, [pc, #204]	; (c4c <I2S_32::config_i2s()+0xd0>)
	CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
     b80:	ldr	r3, [r2, #124]	; 0x7c
     b82:	orr.w	r3, r3, #786432	; 0xc0000
     b86:	str	r3, [r2, #124]	; 0x7c
	if (I2S1_TCSR & I2S_TCSR_TE) return;
     b88:	ldr	r3, [r1, #8]
     b8a:	cmp	r3, #0
     b8c:	blt.n	c44 <I2S_32::config_i2s()+0xc8>
	if (I2S1_RCSR & I2S_RCSR_RE) return;
     b8e:	ldr.w	r3, [r1, #136]	; 0x88
     b92:	cmp	r3, #0
     b94:	blt.n	c44 <I2S_32::config_i2s()+0xc8>
    CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
     b96:	ldr	r3, [pc, #184]	; (c50 <I2S_32::config_i2s()+0xd4>)
    CCM_ANALOG_PLL_AUDIO_DENOM = ndiv & CCM_ANALOG_PLL_AUDIO_DENOM_MASK;
     b98:	movw	r2, #10000	; 0x2710
    CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
     b9c:	ldr	r0, [pc, #180]	; (c54 <I2S_32::config_i2s()+0xd8>)
    CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
     b9e:	mov.w	r1, #2240	; 0x8c0
{
     ba2:	push	{r4, r5}
    CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
     ba4:	str	r0, [r3, #112]	; 0x70
    CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
     ba6:	str.w	r1, [r3, #128]	; 0x80
    CCM_ANALOG_PLL_AUDIO_DENOM = ndiv & CCM_ANALOG_PLL_AUDIO_DENOM_MASK;
     baa:	str.w	r2, [r3, #144]	; 0x90
    CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_POWERDOWN;//Switch on PLL
     bae:	ldr	r2, [r3, #112]	; 0x70
     bb0:	bic.w	r2, r2, #4096	; 0x1000
     bb4:	str	r2, [r3, #112]	; 0x70
    while (!(CCM_ANALOG_PLL_AUDIO & CCM_ANALOG_PLL_AUDIO_LOCK)) {}; //Wait for pll-lock
     bb6:	ldr	r2, [r3, #112]	; 0x70
     bb8:	cmp	r2, #0
     bba:	bge.n	bb6 <I2S_32::config_i2s()+0x3a>
    CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
     bbc:	ldr.w	r0, [r3, #368]	; 0x170
	CORE_PIN20_CONFIG = 3;  //1:RX_SYNC

	int rsync = 0;
	int tsync = 1;

	I2S1_TMR = 0;
     bc0:	movs	r5, #0
     bc2:	ldr	r2, [pc, #148]	; (c58 <I2S_32::config_i2s()+0xdc>)
    CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
     bc4:	ldr	r1, [pc, #128]	; (c48 <I2S_32::config_i2s()+0xcc>)
    CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
     bc6:	ands	r2, r0
    IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
     bc8:	ldr	r4, [pc, #144]	; (c5c <I2S_32::config_i2s()+0xe0>)
	CORE_PIN23_CONFIG = 3;  //1:MCLK
     bca:	ldr	r0, [pc, #148]	; (c60 <I2S_32::config_i2s()+0xe4>)
    CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
     bcc:	str.w	r2, [r3, #368]	; 0x170
    CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_BYPASS;//Disable Bypass
     bd0:	ldr	r2, [r3, #112]	; 0x70
     bd2:	bic.w	r2, r2, #65536	; 0x10000
     bd6:	str	r2, [r3, #112]	; 0x70
    CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
     bd8:	ldr	r2, [r1, #28]
    CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
     bda:	ldr	r3, [pc, #136]	; (c64 <I2S_32::config_i2s()+0xe8>)
    CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
     bdc:	bic.w	r2, r2, #3072	; 0xc00
        | CCM_CSCMR1_SAI1_CLK_SEL(2); // &0x03 // (0,1,2): PLL3PFD0, PLL5, PLL4
     be0:	orr.w	r2, r2, #2048	; 0x800
    CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
     be4:	str	r2, [r1, #28]
    CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
     be6:	ldr	r2, [r1, #40]	; 0x28
     be8:	ands	r3, r2
      | (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));
     bea:	ldr	r2, [pc, #124]	; (c68 <I2S_32::config_i2s()+0xec>)
        | CCM_CS1CDR_SAI1_CLK_PODF(n2-1); // &0x3f
     bec:	orr.w	r3, r3, #206	; 0xce
    CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
     bf0:	str	r3, [r1, #40]	; 0x28
     bf2:	movs	r1, #3
    IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
     bf4:	ldr	r3, [r4, #4]
      | (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));
     bf6:	ands	r2, r3
	I2S1_TMR = 0;
     bf8:	ldr	r3, [pc, #80]	; (c4c <I2S_32::config_i2s()+0xd0>)
     bfa:	orr.w	r2, r2, #524288	; 0x80000
    IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
     bfe:	str	r2, [r4, #4]
	//I2S1_TCSR = (1<<25); //Reset
	I2S1_TCR1 = I2S_TCR1_RFW(1);
     c00:	movs	r4, #1
	I2S1_TCR2 = I2S_TCR2_SYNC(tsync) | I2S_TCR2_BCP // sync=0; tx is async;
     c02:	ldr	r2, [pc, #104]	; (c6c <I2S_32::config_i2s()+0xf0>)
	CORE_PIN23_CONFIG = 3;  //1:MCLK
     c04:	str.w	r1, [r0, #288]	; 0x120
	CORE_PIN21_CONFIG = 3;  //1:RX_BCLK
     c08:	str.w	r1, [r0, #296]	; 0x128
	CORE_PIN20_CONFIG = 3;  //1:RX_SYNC
     c0c:	str.w	r1, [r0, #292]	; 0x124
		    | (I2S_TCR2_BCD | I2S_TCR2_DIV((1)) | I2S_TCR2_MSEL(1));
	I2S1_TCR3 = I2S_TCR3_TCE;
     c10:	mov.w	r0, #65536	; 0x10000
	I2S1_TMR = 0;
     c14:	str	r5, [r3, #96]	; 0x60
	I2S1_TCR4 = I2S_TCR4_FRSZ((2-1)) | I2S_TCR4_SYWD((32-1)) | I2S_TCR4_MF
     c16:	ldr	r1, [pc, #88]	; (c70 <I2S_32::config_i2s()+0xf4>)
	I2S1_TCR1 = I2S_TCR1_RFW(1);
     c18:	str	r4, [r3, #12]
	I2S1_TCR2 = I2S_TCR2_SYNC(tsync) | I2S_TCR2_BCP // sync=0; tx is async;
     c1a:	str	r2, [r3, #16]
		    | I2S_TCR4_FSE | I2S_TCR4_FSP | I2S_TCR4_FSD;
	I2S1_TCR5 = I2S_TCR5_WNW((32-1)) | I2S_TCR5_W0W((32-1)) | I2S_TCR5_FBT((32-1));
     c1c:	ldr	r2, [pc, #84]	; (c74 <I2S_32::config_i2s()+0xf8>)
	I2S1_TCR3 = I2S_TCR3_TCE;
     c1e:	str	r0, [r3, #20]
	I2S1_TCR4 = I2S_TCR4_FRSZ((2-1)) | I2S_TCR4_SYWD((32-1)) | I2S_TCR4_MF
     c20:	str	r1, [r3, #24]
	I2S1_TCR5 = I2S_TCR5_WNW((32-1)) | I2S_TCR5_W0W((32-1)) | I2S_TCR5_FBT((32-1));
     c22:	str	r2, [r3, #28]

	I2S1_RMR = 0;
     c24:	str.w	r5, [r3, #224]	; 0xe0
	//I2S1_RCSR = (1<<25); //Reset
	I2S1_RCR1 = I2S_RCR1_RFW(1);
     c28:	str.w	r4, [r3, #140]	; 0x8c
	I2S1_RCR2 = I2S_RCR2_SYNC(rsync) | I2S_RCR2_BCP  // sync=0; rx is async;
     c2c:	add.w	r4, r4, #117440512	; 0x7000000
     c30:	str.w	r4, [r3, #144]	; 0x90
  	    | (I2S_RCR2_BCD | I2S_RCR2_DIV((1)) | I2S_RCR2_MSEL(1));
	I2S1_RCR3 = I2S_RCR3_RCE;
     c34:	str.w	r0, [r3, #148]	; 0x94
	I2S1_RCR4 = I2S_RCR4_FRSZ((2-1)) | I2S_RCR4_SYWD((32-1)) | I2S_RCR4_MF
     c38:	str.w	r1, [r3, #152]	; 0x98
		    | I2S_RCR4_FSE | I2S_RCR4_FSP | I2S_RCR4_FSD;
	I2S1_RCR5 = I2S_RCR5_WNW((32-1)) | I2S_RCR5_W0W((32-1)) | I2S_RCR5_FBT((32-1));
     c3c:	str.w	r2, [r3, #156]	; 0x9c
}
     c40:	pop	{r4, r5}
     c42:	bx	lr
     c44:	bx	lr
     c46:	nop
     c48:	.word	0x400fc000
     c4c:	.word	0x40384000
     c50:	.word	0x400d8000
     c54:	.word	0x0011201c
     c58:	.word	0xff7f7fff
     c5c:	.word	0x400ac000
     c60:	.word	0x401f8000
     c64:	.word	0xfffffe00
     c68:	.word	0xfff7fff8
     c6c:	.word	0x47000001
     c70:	.word	0x00011f1b
     c74:	.word	0x1f1f1f00

00000c78 <I2S_32::begin()>:
{ 
     c78:	push	{r3, r4, r5, lr}
  dma.begin(true); // Allocate the DMA channel first
     c7a:	ldr	r4, [pc, #144]	; (d0c <I2S_32::begin()+0x94>)
{ 
     c7c:	mov	r5, r0
  dma.begin(true); // Allocate the DMA channel first
     c7e:	movs	r1, #1
     c80:	mov	r0, r4
     c82:	bl	c2b0 <DMAChannel::begin(bool)>
  config_i2s();
     c86:	mov	r0, r5
     c88:	bl	b7c <I2S_32::config_i2s()>
	CORE_PIN8_CONFIG  = 3;  //1:RX_DATA0
     c8c:	ldr	r1, [pc, #128]	; (d10 <I2S_32::begin()+0x98>)
     c8e:	movs	r0, #3
	IOMUXC_SAI1_RX_DATA0_SELECT_INPUT = 2;
     c90:	ldr	r3, [pc, #128]	; (d14 <I2S_32::begin()+0x9c>)
     c92:	movs	r2, #2
  dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
     c94:	movs	r5, #6
	CORE_PIN8_CONFIG  = 3;  //1:RX_DATA0
     c96:	str.w	r0, [r1, #380]	; 0x17c
	IOMUXC_SAI1_RX_DATA0_SELECT_INPUT = 2;
     c9a:	str.w	r2, [r3, #404]	; 0x194
  dma.TCD->NBYTES_MLNO = 4;
     c9e:	movs	r2, #4
	dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0);
     ca0:	ldr	r3, [r4, #0]
  dma.TCD->SOFF = 0;
     ca2:	ldr	r1, [pc, #116]	; (d18 <I2S_32::begin()+0xa0>)
  dma.TCD->NBYTES_MLNO = 4;
     ca4:	str	r2, [r3, #8]
  dma.TCD->SOFF = 0;
     ca6:	str	r1, [r3, #4]
  dma.TCD->DOFF = 4;
     ca8:	strh	r2, [r3, #20]
  dma.TCD->CITER_ELINKNO = sizeof(i2s_rx_buffer_32) / 4;
     caa:	mov.w	r2, #256	; 0x100
	dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0);
     cae:	ldr	r0, [pc, #108]	; (d1c <I2S_32::begin()+0xa4>)
  dma.TCD->DADDR = i2s_rx_buffer_32;
     cb0:	ldr	r1, [pc, #108]	; (d20 <I2S_32::begin()+0xa8>)
	dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0);
     cb2:	str	r0, [r3, #0]
  dma.TCD->SLAST = 0;
     cb4:	movs	r0, #0
  dma.TCD->DADDR = i2s_rx_buffer_32;
     cb6:	str	r1, [r3, #16]
  dma.TCD->CITER_ELINKNO = sizeof(i2s_rx_buffer_32) / 4;
     cb8:	strh	r2, [r3, #22]
	// trigger moves a single data unit, which is typically 8, 16 or
	// 32 bits.  If a channel is configured for 200 transfers

	// Use a hardware trigger to make the DMA channel run
	void triggerAtHardwareEvent(uint8_t source) {
		volatile uint32_t *mux = &DMAMUX_CHCFG0 + channel;
     cba:	ldrb	r1, [r4, #4]
  dma.TCD->BITER_ELINKNO = sizeof(i2s_rx_buffer_32) / 4;
     cbc:	strh	r2, [r3, #30]
  dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
     cbe:	strh	r5, [r3, #28]
  dma.TCD->DLASTSGA = -sizeof(i2s_rx_buffer_32);
     cc0:	subw	r5, r5, #1030	; 0x406
     cc4:	ldr	r2, [pc, #92]	; (d24 <I2S_32::begin()+0xac>)
  dma.TCD->SLAST = 0;
     cc6:	str	r0, [r3, #12]
  dma.TCD->DLASTSGA = -sizeof(i2s_rx_buffer_32);
     cc8:	str	r5, [r3, #24]
		//mux = (volatile uint32_t *)&(DMAMUX_CHCFG0) + channel;
		*mux = 0;
     cca:	str.w	r0, [r2, r1, lsl #2]
		*mux = (source & 0x7F) | DMAMUX_CHCFG_ENBL;
     cce:	ldr	r0, [pc, #88]	; (d28 <I2S_32::begin()+0xb0>)
  I2S1_RCSR = I2S_RCSR_RE | I2S_RCSR_BCE | I2S_RCSR_FRDE | I2S_RCSR_FR;
     cd0:	ldr	r3, [pc, #88]	; (d2c <I2S_32::begin()+0xb4>)
     cd2:	str.w	r0, [r2, r1, lsl #2]
     cd6:	ldr	r2, [pc, #88]	; (d30 <I2S_32::begin()+0xb8>)
     cd8:	str.w	r2, [r3, #136]	; 0x88
  update_responsibility = update_setup();
     cdc:	bl	c8fc <AudioStream::update_setup()>
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
     ce0:	ldrb	r3, [r4, #4]
     ce2:	ldr	r4, [pc, #80]	; (d34 <I2S_32::begin()+0xbc>)
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     ce4:	movs	r1, #1
     ce6:	ldr	r2, [pc, #80]	; (d38 <I2S_32::begin()+0xc0>)
     ce8:	strb	r0, [r4, #0]
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
     cea:	add.w	r0, r3, #16
		DMA_SERQ = channel;
     cee:	ldr	r4, [pc, #76]	; (d3c <I2S_32::begin()+0xc4>)
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     cf0:	add.w	r2, r2, r3, lsr #5
		DMA_SERQ = channel;
     cf4:	strb	r3, [r4, #27]
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     cf6:	and.w	r3, r3, #31
     cfa:	lsls	r2, r2, #2
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
     cfc:	ldr	r4, [pc, #64]	; (d40 <I2S_32::begin()+0xc8>)
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     cfe:	lsls	r1, r3
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
     d00:	ldr	r3, [pc, #64]	; (d44 <I2S_32::begin()+0xcc>)
     d02:	str.w	r4, [r3, r0, lsl #2]
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     d06:	str	r1, [r2, #0]
}
     d08:	pop	{r3, r4, r5, pc}
     d0a:	nop
     d0c:	.word	0x200065bc
     d10:	.word	0x401f8000
     d14:	.word	0x401f8400
     d18:	.word	0x02020000
     d1c:	.word	0x403840a0
     d20:	.word	0x20005c8c
     d24:	.word	0x400ec000
     d28:	.word	0x80000013
     d2c:	.word	0x40384000
     d30:	.word	0x92000001
     d34:	.word	0x20007b60
     d38:	.word	0x38003840
     d3c:	.word	0x400e8000
     d40:	.word	0x00000085
     d44:	.word	0x20001c00

00000d48 <AudioCompress::compress(void*)>:
int16_t *tempDatai=(int16_t*) tempData;

uint32_t proc_stat[MB];

int AudioCompress::compress(void *inp)
{   
     d48:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     d4c:	sub	sp, #20
     d4e:	mov	r4, r1
     d50:	str	r0, [sp, #12]
  int ret=1;
  uint32_t to = rtc_get();
     d52:	bl	baa0 <rtc_get>
     d56:	mov	sl, r0
  uint32_t t1 = micros();
     d58:	bl	b86c <micros>
    static int nout=0;

    int16_t *din = (int16_t *) inp;
    //
    // copy reference (first sample of all channels)
  for (int  ii = 0; ii < NCH; ii++) tempDatai[ii] = din[ii];
     d5c:	ldr	r3, [pc, #688]	; (1010 <AudioCompress::compress(void*)+0x2c8>)
     d5e:	add.w	r6, r4, #254	; 0xfe
     d62:	ldrsh.w	r2, [r4]
  uint32_t t1 = micros();
     d66:	mov	r9, r0
  for (int  ii = 0; ii < NCH; ii++) tempDatai[ii] = din[ii];
     d68:	ldr	r5, [r3, #0]
     d6a:	mov	r3, r4
     d6c:	mov	r1, r5
     d6e:	mov	r4, r5
     d70:	strh	r2, [r5, #0]
        
  //differentiate (equiv 6 dB/Octave HP filter)
  for (int  ii = NCH; ii < NSAMP; ii++) tempDatai[ii] = (din[ii] - din[ii - 1]);
     d72:	mov	r0, r3
     d74:	adds	r3, #2
     d76:	ldrh	r2, [r0, #2]
     d78:	cmp	r3, r6
     d7a:	ldrh	r0, [r0, #0]
     d7c:	sub.w	r2, r2, r0
     d80:	strh.w	r2, [r4, #2]!
     d84:	bne.n	d72 <AudioCompress::compress(void*)+0x2a>
     d86:	add.w	r0, r5, #254	; 0xfe

  // find maximum in filtered data
  int32_t mx = 0;
     d8a:	movs	r2, #0
  for (int ii = NCH; ii < NSAMP; ii++)
  {
    int32_t dd =  tempDatai[ii];
    if(dd<0)  dd = -dd;
    if(dd>mx) mx = dd;
     d8c:	ldrsh.w	r3, [r1, #2]!
     d90:	cmp	r3, #0
     d92:	it	lt
     d94:	neglt	r3, r3
     d96:	uxth	r3, r3
     d98:	cmp	r2, r3
     d9a:	it	lt
     d9c:	movlt	r2, r3
  for (int ii = NCH; ii < NSAMP; ii++)
     d9e:	cmp	r0, r1
     da0:	bne.n	d8c <AudioCompress::compress(void*)+0x44>
  }

  // estimate mask (allow only 'nice' values)
    int nb;
    for(nb=2; nb<MB; nb++) if(mx < (1<<(nb-1))) break;
     da2:	movs	r7, #2
     da4:	movs	r1, #1
     da6:	subs	r5, r7, #1
     da8:	lsl.w	r3, r1, r5
     dac:	cmp	r3, r2
     dae:	bgt.w	fb2 <AudioCompress::compress(void*)+0x26a>
     db2:	adds	r7, #1
     db4:	cmp	r7, #16
     db6:	bne.n	da6 <AudioCompress::compress(void*)+0x5e>
     db8:	ldr	r2, [pc, #600]	; (1014 <AudioCompress::compress(void*)+0x2cc>)
     dba:	mov.w	r8, #141	; 0x8d
     dbe:	movs	r3, #129	; 0x81
     dc0:	movw	r0, #65535	; 0xffff
     dc4:	movs	r5, #15
     dc6:	str	r2, [sp, #8]
    // compression factor (16/nb)

    proc_stat[nb-1]++;
     dc8:	ldr	r1, [pc, #588]	; (1018 <AudioCompress::compress(void*)+0x2d0>)
     dca:	ldr	r4, [pc, #592]	; (101c <AudioCompress::compress(void*)+0x2d4>)
     dcc:	ldr.w	r2, [r1, r5, lsl #2]
     dd0:	add.w	r6, r4, #254	; 0xfe
     dd4:	mov	fp, r4
     dd6:	adds	r2, #1
     dd8:	str.w	r2, [r1, r5, lsl #2]
     ddc:	mov	r2, r4

  // mask data (all but first sample) (mask needed for negative numbers)
  uint32_t msk = (1 << nb) - 1;
  for (int ii = 1; ii < NSAMP; ii++) { tempData[ii] &= (uint16_t)msk; }
     dde:	ldrh.w	r1, [r2, #2]!
     de2:	ands	r1, r0
     de4:	cmp	r6, r2
     de6:	strh	r1, [r2, #0]
     de8:	bne.n	dde <AudioCompress::compress(void*)+0x96>
  // pack all data
  int ncmp = (NSAMP*nb) / NX;
  int ndat = NH+NCH + ncmp;

    // clean data store
  for (int ii = 0; ii < NSAMP; ii++) outData[ii]=0;
     dea:	ldr	r5, [pc, #564]	; (1020 <AudioCompress::compress(void*)+0x2d8>)
     dec:	movs	r2, #232	; 0xe8
     dee:	movs	r1, #0
     df0:	str	r3, [sp, #4]
     df2:	add.w	r0, r5, #24
     df6:	bl	e064 <memset>
  *iptr++ = t1;
  *iptr++ = NCH;
  *iptr++ = NCH+ncmp; // number of data after header
  //
  int kk=NH;
  outData[kk++] = tempData[0]; tempData[0] = 0;
     dfa:	ldrh.w	r2, [fp]
  *iptr++ = nb | shift<<16;
     dfe:	ldr	r3, [sp, #8]
  outData[kk++] = tempData[0]; tempData[0] = 0;
     e00:	movs	r1, #0
     e02:	strh	r2, [r5, #24]
  *iptr++ = 0xA5A5A5A5;
     e04:	mov.w	r2, #2779096485	; 0xa5a5a5a5

  // pack data
    // 
    int nx = NX;
     e08:	mov.w	ip, #16
  outData[kk++] = tempData[0]; tempData[0] = 0;
     e0c:	movs	r0, #13
  *iptr++ = 0xA5A5A5A5;
     e0e:	str	r2, [r5, #0]
  *iptr++ = NCH;
     e10:	movs	r2, #1
  *iptr++ = t1;
     e12:	str.w	r9, [r5, #12]
  outData[kk++] = tempData[0]; tempData[0] = 0;
     e16:	strh.w	r1, [fp]
  *iptr++ = NCH;
     e1a:	str	r2, [r5, #16]
  *iptr++ = to;
     e1c:	strd	r3, sl, [r5, #4]
  *iptr++ = NCH+ncmp; // number of data after header
     e20:	ldr	r3, [sp, #4]
     e22:	str	r3, [r5, #20]
     e24:	b.n	e3c <AudioCompress::compress(void*)+0xf4>
    for (int ii = 0; ii < NSAMP; ii ++)
    {   nx -= nb;
        if(nx > 0)
        {   outData[kk] |= (tempData[ii] << nx);
     e26:	ldrh.w	r1, [r5, r0, lsl #1]
     e2a:	mov	ip, r2
     e2c:	orr.w	lr, lr, r1
     e30:	strh.w	lr, [r5, r0, lsl #1]
    for (int ii = 0; ii < NSAMP; ii ++)
     e34:	cmp	r6, r4
     e36:	beq.n	e6a <AudioCompress::compress(void*)+0x122>
        {   outData[kk] |= (tempData[ii] << nx);
     e38:	ldrh.w	r1, [r4, #2]!
    {   nx -= nb;
     e3c:	sub.w	r2, ip, r7
        if(nx > 0)
     e40:	cmp	r2, #0
        {   outData[kk] |= (tempData[ii] << nx);
     e42:	lsl.w	lr, r1, r2
        if(nx > 0)
     e46:	bgt.n	e26 <AudioCompress::compress(void*)+0xde>
        else if(nx==0) 
        {   outData[kk++] |= tempData[ii];
            nx=NX;
        } 
        else    // nx is < 0
        {   outData[kk++] |= (tempData[ii] >> (-nx));
     e48:	sub.w	lr, r7, ip
     e4c:	add.w	r9, r0, #1
            nx += NX;
     e50:	add.w	ip, r2, #16
        {   outData[kk++] |= tempData[ii];
     e54:	ldrh.w	r2, [r5, r0, lsl #1]
        else if(nx==0) 
     e58:	bne.n	eba <AudioCompress::compress(void*)+0x172>
        {   outData[kk++] |= tempData[ii];
     e5a:	orrs	r2, r1
    for (int ii = 0; ii < NSAMP; ii ++)
     e5c:	cmp	r6, r4
            nx=NX;
     e5e:	mov.w	ip, #16
        {   outData[kk++] |= tempData[ii];
     e62:	strh.w	r2, [r5, r0, lsl #1]
     e66:	mov	r0, r9
    for (int ii = 0; ii < NSAMP; ii ++)
     e68:	bne.n	e38 <AudioCompress::compress(void*)+0xf0>
            outData[kk] = (tempData[ii] << nx);
        }
    }
       
    // store actual data
    if ((nout + ndat) <= NSAMP)
     e6a:	ldr	r6, [pc, #440]	; (1024 <AudioCompress::compress(void*)+0x2dc>)
     e6c:	ldr	r4, [r6, #0]
     e6e:	add.w	r2, r4, r8
     e72:	cmp	r2, #128	; 0x80
     e74:	bgt.n	ed2 <AudioCompress::compress(void*)+0x18a>
     e76:	mvn.w	r3, #2147483648	; 0x80000000
     e7a:	ldr	r2, [pc, #428]	; (1028 <AudioCompress::compress(void*)+0x2e0>)
     e7c:	ldr	r0, [pc, #416]	; (1020 <AudioCompress::compress(void*)+0x2d8>)
     e7e:	movw	r1, #42405	; 0xa5a5
     e82:	add	r3, r4
     e84:	add.w	r2, r2, r3, lsl #1
    { // all data fit in current block
        for (int ii = 0; ii < ndat; ii++) dout[nout++] = outData[ii];
     e88:	movs	r3, #0
     e8a:	b.n	e90 <AudioCompress::compress(void*)+0x148>
     e8c:	ldrh.w	r1, [r0, #2]!
     e90:	adds	r3, #1
     e92:	strh.w	r1, [r2, #2]!
     e96:	cmp	r3, r8
     e98:	blt.n	e8c <AudioCompress::compress(void*)+0x144>
     e9a:	cmp.w	r8, #0
     e9e:	add.w	r3, r8, #4294967295
     ea2:	add.w	r4, r4, #1
  int ret=1;
     ea6:	mov.w	r7, #1
        for (int ii = 0; ii < ndat; ii++) dout[nout++] = outData[ii];
     eaa:	it	le
     eac:	movle	r3, #0
     eae:	add	r3, r4
     eb0:	str	r3, [r6, #0]

        for(nout=0;nout<12;nout++) dout[nout] = outData[nout];
        while (ii < ndat) dout[nout++] = outData[ii++];
    }
    return ret;
}
     eb2:	mov	r0, r7
     eb4:	add	sp, #20
     eb6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        {   outData[kk++] |= (tempData[ii] >> (-nx));
     eba:	asr.w	lr, r1, lr
            outData[kk] = (tempData[ii] << nx);
     ebe:	lsl.w	r1, r1, ip
        {   outData[kk++] |= (tempData[ii] >> (-nx));
     ec2:	orr.w	lr, lr, r2
     ec6:	strh.w	lr, [r5, r0, lsl #1]
     eca:	mov	r0, r9
            outData[kk] = (tempData[ii] << nx);
     ecc:	strh.w	r1, [r5, r9, lsl #1]
     ed0:	b.n	e34 <AudioCompress::compress(void*)+0xec>
    else if ((nout + NH) > NSAMP) //avoid partial header (special case)
     ed2:	cmp	r4, #116	; 0x74
     ed4:	ble.n	f1a <AudioCompress::compress(void*)+0x1d2>
        while(nout<NSAMP) dout[nout++] = 0; // fill rest of block with zero
     ed6:	cmp	r4, #127	; 0x7f
     ed8:	bgt.n	ef0 <AudioCompress::compress(void*)+0x1a8>
     eda:	rsb	r2, r4, #128	; 0x80
     ede:	ldr	r0, [pc, #328]	; (1028 <AudioCompress::compress(void*)+0x2e0>)
     ee0:	movs	r1, #0
     ee2:	lsls	r2, r2, #1
     ee4:	add.w	r0, r0, r4, lsl #1
     ee8:	bl	e064 <memset>
     eec:	movs	r3, #128	; 0x80
     eee:	str	r3, [r6, #0]
  outputBlock=allocate();
     ef0:	bl	c598 <AudioStream::allocate()>
  if(outputBlock)
     ef4:	mov	r7, r0
     ef6:	cmp	r0, #0
     ef8:	bne.n	fee <AudioCompress::compress(void*)+0x2a6>
        for (int ii=0; ii < ndat; ii++) dout[nout++] = outData[ii];
     efa:	cmp.w	r8, #0
     efe:	mov.w	r2, r8, lsl #1
     f02:	ldr	r1, [pc, #284]	; (1020 <AudioCompress::compress(void*)+0x2d8>)
     f04:	it	le
     f06:	movle	r2, #2
     f08:	ldr	r0, [pc, #284]	; (1028 <AudioCompress::compress(void*)+0x2e0>)
     f0a:	bl	a0c4 <memcpy>
}
     f0e:	mov	r0, r7
     f10:	str.w	r8, [r6]
     f14:	add	sp, #20
     f16:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        iptr[5] = (iptr[5]<<16) | (nr-NH);  //orig remaining data | actual remaining data after header 
     f1a:	rsb	r2, r4, #116	; 0x74
     f1e:	ldr	r0, [pc, #264]	; (1028 <AudioCompress::compress(void*)+0x2e0>)
     f20:	orr.w	r3, r2, r3, lsl #16
     f24:	movw	r2, #42405	; 0xa5a5
     f28:	str	r3, [r5, #20]
        while (nout < NSAMP ) dout[nout++] = outData[ii++];
     f2a:	mvn.w	r3, #2147483648	; 0x80000000
     f2e:	ldr	r5, [pc, #240]	; (1020 <AudioCompress::compress(void*)+0x2d8>)
     f30:	add	r3, r4
     f32:	mov	r1, r5
     f34:	add.w	r3, r0, r3, lsl #1
     f38:	adds	r0, #254	; 0xfe
     f3a:	b.n	f40 <AudioCompress::compress(void*)+0x1f8>
     f3c:	ldrh.w	r2, [r1, #2]!
     f40:	strh.w	r2, [r3, #2]!
     f44:	cmp	r0, r3
     f46:	bne.n	f3c <AudioCompress::compress(void*)+0x1f4>
     f48:	movs	r3, #128	; 0x80
     f4a:	rsb	r9, r4, #128	; 0x80
     f4e:	str	r3, [r6, #0]
  outputBlock=allocate();
     f50:	bl	c598 <AudioStream::allocate()>
  if(outputBlock)
     f54:	mov	r7, r0
     f56:	cmp	r0, #0
     f58:	bne.n	fce <AudioCompress::compress(void*)+0x286>
        iptr[5]=(iptr[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
     f5a:	ldr	r2, [r5, #20]
        while (ii < ndat) dout[nout++] = outData[ii++];
     f5c:	cmp	r9, r8
        iptr[5]=(iptr[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
     f5e:	ldr	r3, [pc, #204]	; (102c <AudioCompress::compress(void*)+0x2e4>)
        for(nout=0;nout<12;nout++) dout[nout] = outData[nout];
     f60:	ldr.w	lr, [pc, #188]	; 1020 <AudioCompress::compress(void*)+0x2d8>
        iptr[5]=(iptr[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
     f64:	and.w	r3, r3, r2
        nr=ndat-ii;
     f68:	sub.w	r2, r8, r9
        for(nout=0;nout<12;nout++) dout[nout] = outData[nout];
     f6c:	ldr.w	ip, [pc, #184]	; 1028 <AudioCompress::compress(void*)+0x2e0>
        iptr[5]=(iptr[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
     f70:	orr.w	r3, r3, r2
     f74:	str	r3, [r5, #20]
        for(nout=0;nout<12;nout++) dout[nout] = outData[nout];
     f76:	mov.w	r3, #12
     f7a:	str	r3, [r6, #0]
     f7c:	ldmia.w	lr!, {r0, r1, r2, r3}
     f80:	stmia.w	ip!, {r0, r1, r2, r3}
     f84:	ldmia.w	lr, {r0, r1}
     f88:	stmia.w	ip, {r0, r1}
        while (ii < ndat) dout[nout++] = outData[ii++];
     f8c:	bge.n	eb2 <AudioCompress::compress(void*)+0x16a>
     f8e:	sub.w	r2, r4, #128	; 0x80
     f92:	add.w	r1, r5, r9, lsl #1
     f96:	add.w	r0, ip, #8
     f9a:	add	r2, r8
     f9c:	lsls	r2, r2, #1
     f9e:	bl	a0c4 <memcpy>
     fa2:	sub.w	r3, r4, #116	; 0x74
}
     fa6:	mov	r0, r7
        while (ii < ndat) dout[nout++] = outData[ii++];
     fa8:	add	r3, r8
     faa:	str	r3, [r6, #0]
}
     fac:	add	sp, #20
     fae:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint32_t msk = (1 << nb) - 1;
     fb2:	lsl.w	r0, r1, r7
  int ncmp = (NSAMP*nb) / NX;
     fb6:	mov.w	r8, r7, lsl #3
  *iptr++ = nb | shift<<16;
     fba:	orr.w	r3, r7, #655360	; 0xa0000
  uint32_t msk = (1 << nb) - 1;
     fbe:	subs	r0, #1
  *iptr++ = nb | shift<<16;
     fc0:	str	r3, [sp, #8]
  *iptr++ = NCH+ncmp; // number of data after header
     fc2:	add.w	r3, r8, #1
  for (int ii = 1; ii < NSAMP; ii++) { tempData[ii] &= (uint16_t)msk; }
     fc6:	uxth	r0, r0
  int ndat = NH+NCH + ncmp;
     fc8:	add.w	r8, r8, #13
     fcc:	b.n	dc8 <AudioCompress::compress(void*)+0x80>
    memcpy(outputBlock->data,src,2*NSAMP);
     fce:	mov.w	r2, #256	; 0x100
     fd2:	ldr	r1, [pc, #84]	; (1028 <AudioCompress::compress(void*)+0x2e0>)
     fd4:	adds	r0, #4
     fd6:	bl	a0c4 <memcpy>
    transmit(outputBlock);
     fda:	mov	r1, r7
     fdc:	ldr	r0, [sp, #12]
     fde:	movs	r2, #0
     fe0:	bl	c694 <AudioStream::transmit(audio_block_struct*, unsigned char)>
    release(outputBlock);
     fe4:	mov	r0, r7
     fe6:	bl	c644 <AudioStream::release(audio_block_struct*)>
  int ret=1;
     fea:	movs	r7, #1
     fec:	b.n	f5a <AudioCompress::compress(void*)+0x212>
    memcpy(outputBlock->data,src,2*NSAMP);
     fee:	mov.w	r2, #256	; 0x100
     ff2:	ldr	r1, [pc, #52]	; (1028 <AudioCompress::compress(void*)+0x2e0>)
     ff4:	adds	r0, #4
     ff6:	bl	a0c4 <memcpy>
    transmit(outputBlock);
     ffa:	ldr	r0, [sp, #12]
     ffc:	mov	r1, r7
     ffe:	movs	r2, #0
    1000:	bl	c694 <AudioStream::transmit(audio_block_struct*, unsigned char)>
    release(outputBlock);
    1004:	mov	r0, r7
  int ret=1;
    1006:	movs	r7, #1
    release(outputBlock);
    1008:	bl	c644 <AudioStream::release(audio_block_struct*)>
    return 1;
    100c:	b.n	efa <AudioCompress::compress(void*)+0x1b2>
    100e:	nop
    1010:	.word	0x20001a28
    1014:	.word	0x000a0010
    1018:	.word	0x200076d0
    101c:	.word	0x200062fc
    1020:	.word	0x200061fc
    1024:	.word	0x200065dc
    1028:	.word	0x2000608c
    102c:	.word	0xffff0000

00001030 <AudioCompress::update()>:
{ int ret=0;
    1030:	push	{r3, r4, r5, lr}
  block_in=receiveReadOnly(0);
    1032:	movs	r1, #0
{ int ret=0;
    1034:	mov	r5, r0
  block_in=receiveReadOnly(0);
    1036:	bl	c6dc <AudioStream::receiveReadOnly(unsigned int)>
  if(block_in) 
    103a:	cbz	r0, 1050 <AudioCompress::update()+0x20>
    ret=compress(block_in->data);
    103c:	mov	r4, r0
    103e:	adds	r1, r0, #4
    1040:	mov	r0, r5
    1042:	bl	d48 <AudioCompress::compress(void*)>
    release(block_in);
    1046:	mov	r0, r4
}
    1048:	ldmia.w	sp!, {r3, r4, r5, lr}
    release(block_in);
    104c:	b.w	c644 <AudioStream::release(audio_block_struct*)>
}
    1050:	pop	{r3, r4, r5, pc}
    1052:	nop

00001054 <newDirectory(char*)>:
#else
  uint32_t getTeensySerial(void)  { return 0;}
#endif

int16_t newDirectory(char *dirName)
{ if(newHour())
    1054:	push	{r4, r5, lr}
    1056:	sub	sp, #28
    1058:	mov	r4, r0
{   uint32_t tx=rtc_get();
    105a:	bl	baa0 <rtc_get>
    int32_t h_ = (int32_t) tx/SECS_PER_HOUR;  // use hours since 1970 as measures
    105e:	ldr	r3, [pc, #116]	; (10d4 <newDirectory(char*)+0x80>)
{   uint32_t tx=rtc_get();
    1060:	mov	r2, r0
    if(hour_== h_) return 0;
    1062:	ldr	r5, [pc, #116]	; (10d8 <newDirectory(char*)+0x84>)
    int32_t h_ = (int32_t) tx/SECS_PER_HOUR;  // use hours since 1970 as measures
    1064:	smull	r1, r3, r3, r2
    1068:	asrs	r1, r2, #31
    if(hour_== h_) return 0;
    106a:	ldr	r0, [r5, #0]
    int32_t h_ = (int32_t) tx/SECS_PER_HOUR;  // use hours since 1970 as measures
    106c:	add	r3, r2
    106e:	rsb	r3, r1, r3, asr #11
    if(hour_== h_) return 0;
    1072:	cmp	r3, r0
    1074:	beq.n	10cc <newDirectory(char*)+0x78>
    hour_ = h_;
    1076:	str	r3, [r5, #0]
    {   
        tmElements_t tm;
        breakTime(rtc_get(), tm);
    1078:	bl	baa0 <rtc_get>
    107c:	add	r2, sp, #16
    107e:	movs	r1, #0
    1080:	bl	20b4 <breakTime(long long, tmElements_t&)>
        sprintf(dirName, "/%s%06x_%04d%02d%02d/%02d/", 
                      DirPrefix,(unsigned int)SerNum,
                              tmYearToCalendar(tm.Year),tm.Month, tm.Day, tm.Hour);
    1084:	ldrb.w	r2, [sp, #22]
        sprintf(dirName, "/%s%06x_%04d%02d%02d/%02d/", 
    1088:	ldrb.w	r1, [sp, #20]
    108c:	ldrb.w	r0, [sp, #21]
    1090:	addw	r2, r2, #1970	; 0x7b2
    1094:	ldrb.w	r5, [sp, #18]
    1098:	ldr	r3, [pc, #64]	; (10dc <newDirectory(char*)+0x88>)
    109a:	strd	r1, r5, [sp, #8]
    109e:	ldr	r3, [r3, #0]
    10a0:	ldr	r1, [pc, #60]	; (10e0 <newDirectory(char*)+0x8c>)
    10a2:	strd	r2, r0, [sp]
    10a6:	ldr	r2, [pc, #60]	; (10e4 <newDirectory(char*)+0x90>)
    10a8:	mov	r0, r4
    10aa:	ldr	r2, [r2, #0]
    10ac:	bl	dd74 <sprintf>
	// Discard all received data which has not been read.
        virtual void clear(void) { usb_serial_flush_input(); }
	// Transmit a single byte to your PC
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
	// Transmit a buffer containing any number of bytes to your PC
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    10b0:	movs	r1, #1
    10b2:	ldr	r0, [pc, #52]	; (10e8 <newDirectory(char*)+0x94>)
    10b4:	bl	a83c <usb_serial_write>
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    10b8:	mov	r0, r4
    10ba:	bl	e400 <strlen>
    10be:	mov	r1, r0
    10c0:	mov	r0, r4
    10c2:	bl	a83c <usb_serial_write>
        //
        Serial.print("\n"); Serial.print(dirName);
        return 1;
    10c6:	movs	r0, #1
    }
    return 0;
}
    10c8:	add	sp, #28
    10ca:	pop	{r4, r5, pc}
    return 0;
    10cc:	movs	r0, #0
}
    10ce:	add	sp, #28
    10d0:	pop	{r4, r5, pc}
    10d2:	nop
    10d4:	.word	0x91a2b3c5
    10d8:	.word	0x20007648
    10dc:	.word	0x200058c0
    10e0:	.word	0x200004f8
    10e4:	.word	0x20001448
    10e8:	.word	0x200007a0

000010ec <newFileName(char*)>:

int16_t newFileName(char *fileName)
{
    10ec:	push	{r4, r5, lr}
    10ee:	sub	sp, #44	; 0x2c
    10f0:	mov	r4, r0
    tmElements_t tm;
    breakTime(rtc_get(), tm);
    10f2:	bl	baa0 <rtc_get>
    10f6:	movs	r1, #0
    10f8:	add	r2, sp, #32
    10fa:	bl	20b4 <breakTime(long long, tmElements_t&)>
    
    sprintf(fileName, "/%s%06x_%04d%02d%02d/%02d/%s_%02d%02d%02d.bin", 
    10fe:	ldrb.w	r0, [sp, #33]	; 0x21
    1102:	ldr	r3, [pc, #96]	; (1164 <newFileName(char*)+0x78>)
    1104:	str	r0, [sp, #24]
    1106:	ldr	r0, [r3, #0]
    1108:	ldrb.w	r1, [sp, #34]	; 0x22
    110c:	str	r0, [sp, #16]
    110e:	ldrb.w	r5, [sp, #32]
    1112:	ldrb.w	r0, [sp, #36]	; 0x24
            DirPrefix,(unsigned int)SerNum,
                      tmYearToCalendar(tm.Year),tm.Month, tm.Day, tm.Hour, 
    1116:	ldrb.w	r2, [sp, #38]	; 0x26
    sprintf(fileName, "/%s%06x_%04d%02d%02d/%02d/%s_%02d%02d%02d.bin", 
    111a:	ldr	r3, [pc, #76]	; (1168 <newFileName(char*)+0x7c>)
    111c:	str	r5, [sp, #28]
    111e:	addw	r2, r2, #1970	; 0x7b2
    1122:	ldr	r3, [r3, #0]
    1124:	str	r1, [sp, #20]
    1126:	strd	r0, r1, [sp, #8]
    112a:	ldrb.w	r0, [sp, #37]	; 0x25
    112e:	ldr	r1, [pc, #60]	; (116c <newFileName(char*)+0x80>)
    1130:	strd	r2, r0, [sp]
    1134:	ldr	r2, [pc, #56]	; (1170 <newFileName(char*)+0x84>)
    1136:	mov	r0, r4
    1138:	ldr	r2, [r2, #0]
    113a:	bl	dd74 <sprintf>
    113e:	movs	r1, #1
    1140:	ldr	r0, [pc, #48]	; (1174 <newFileName(char*)+0x88>)
    1142:	bl	a83c <usb_serial_write>
    1146:	movs	r1, #2
    1148:	ldr	r0, [pc, #44]	; (1178 <newFileName(char*)+0x8c>)
    114a:	bl	a83c <usb_serial_write>
    114e:	mov	r0, r4
    1150:	bl	e400 <strlen>
    1154:	mov	r1, r0
    1156:	mov	r0, r4
    1158:	bl	a83c <usb_serial_write>
                      FilePrefix, tm.Hour, tm.Minute, tm.Second);
    //
    Serial.print("\n"); Serial.print(": ");Serial.print(fileName);
    return 1;
}
    115c:	movs	r0, #1
    115e:	add	sp, #44	; 0x2c
    1160:	pop	{r4, r5, pc}
    1162:	nop
    1164:	.word	0x20001454
    1168:	.word	0x200058c0
    116c:	.word	0x200004c4
    1170:	.word	0x20001448
    1174:	.word	0x200007a0
    1178:	.word	0x200004f4

0000117c <makeHeader(char*)>:

int16_t makeHeader(char *header)
{
    117c:	push	{r4, r5, lr}
     * @param header is pointer to header
     * 
     */
    #define MAGIC "WMXZ"
    tmElements_t tm;
    breakTime(rtc_get(), tm);
    117e:	movs	r5, #0
{
    1180:	sub	sp, #36	; 0x24
    1182:	mov	r4, r0
    breakTime(rtc_get(), tm);
    1184:	bl	baa0 <rtc_get>
    1188:	add	r2, sp, #24
    118a:	mov	r1, r5
    118c:	bl	20b4 <breakTime(long long, tmElements_t&)>

    int nd=sprintf(header,"%s%04d%02d%02d_%02d%02d%02d",
    1190:	ldrb.w	r1, [sp, #24]
    1194:	ldrb.w	r2, [sp, #25]
    1198:	mov	r0, r4
            MAGIC,tmYearToCalendar(tm.Year),tm.Month,tm.Day,tm.Hour,tm.Minute,tm.Second);
    119a:	ldrb.w	r3, [sp, #30]
    int nd=sprintf(header,"%s%04d%02d%02d_%02d%02d%02d",
    119e:	strd	r2, r1, [sp, #12]
    11a2:	ldrb.w	r1, [sp, #26]
    11a6:	addw	r3, r3, #1970	; 0x7b2
    11aa:	ldrb.w	r2, [sp, #28]
    11ae:	strd	r2, r1, [sp, #4]
    11b2:	ldrb.w	r1, [sp, #29]
    11b6:	ldr	r2, [pc, #56]	; (11f0 <makeHeader(char*)+0x74>)
    11b8:	str	r1, [sp, #0]
    11ba:	ldr	r1, [pc, #56]	; (11f4 <makeHeader(char*)+0x78>)
    11bc:	bl	dd74 <sprintf>
    char *ptr = header+(nd+1);
    int32_t *iptr = (int32_t *) ptr;
    //float *fptr = (float *) ptr;
    
    // to be filled in
    iptr[0] = 1;                    // SW version
    11c0:	movs	r2, #1
    iptr[1] = (int32_t)SerNum;      // serial number
    11c2:	ldr	r1, [pc, #52]	; (11f8 <makeHeader(char*)+0x7c>)
    char *ptr = header+(nd+1);
    11c4:	adds	r3, r0, r2
    iptr[0] = 1;                    // SW version
    11c6:	str	r2, [r4, r3]
    char *ptr = header+(nd+1);
    11c8:	add	r3, r4
    iptr[1] = (int32_t)SerNum;      // serial number
    11ca:	ldr	r0, [r1, #0]
    iptr[4] = t_acq;
    iptr[5] = t_on;
    iptr[6] = t_off;

    uint32_t *uptr = (uint32_t*) header;
    uptr[127] = 0x55555555;
    11cc:	mov.w	r1, #1431655765	; 0x55555555
    iptr[6] = t_off;
    11d0:	str	r5, [r3, #24]
    iptr[2] = fsamp;
    11d2:	movw	r5, #44100	; 0xac44
    iptr[3] = nch;
    11d6:	str	r2, [r3, #12]
    iptr[1] = (int32_t)SerNum;      // serial number
    11d8:	str	r0, [r3, #4]
    //
    return 1;
}
    11da:	mov	r0, r2
    iptr[2] = fsamp;
    11dc:	str	r5, [r3, #8]
    iptr[5] = t_on;
    11de:	mov.w	r2, #300	; 0x12c
    11e2:	movs	r5, #60	; 0x3c
    11e4:	strd	r5, r2, [r3, #16]
    uptr[127] = 0x55555555;
    11e8:	str.w	r1, [r4, #508]	; 0x1fc
}
    11ec:	add	sp, #36	; 0x24
    11ee:	pop	{r4, r5, pc}
    11f0:	.word	0x20000470
    11f4:	.word	0x20000478
    11f8:	.word	0x200058c0

000011fc <storeData(int) [clone .part.0]>:
    haveSD=1;
  }

}

int16_t storeData(int status)
    11fc:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1200:	sub	sp, #80	; 0x50
{
  int32_t nbuf=sizeof(diskBuffer);

  if(!haveSD) return status;

  switch(status)
    1202:	cmp	r0, #5
    1204:	bhi.w	1474 <storeData(int) [clone .part.0]+0x278>
    1208:	tbh	[pc, r0, lsl #1]
    120c:	.word	0x00960060
    1210:	.word	0x00db00bb
    1214:	.word	0x00060006
		if (f) {
    1218:	ldr	r5, [pc, #612]	; (1480 <storeData(int) [clone .part.0]+0x284>)
    121a:	ldr	r4, [r5, #16]
    121c:	cmp	r4, #0
    121e:	beq.w	1474 <storeData(int) [clone .part.0]+0x278>
			f->close();
    1222:	ldr	r3, [r4, #0]
    1224:	ldr	r6, [pc, #604]	; (1484 <storeData(int) [clone .part.0]+0x288>)
    1226:	ldr	r3, [r3, #44]	; 0x2c
    1228:	cmp	r3, r6
    122a:	bne.w	1716 <storeData(int) [clone .part.0]+0x51a>
		if (filename) {
    122e:	ldr	r0, [r4, #88]	; 0x58
    1230:	cbz	r0, 123a <storeData(int) [clone .part.0]+0x3e>
			free(filename);
    1232:	bl	d240 <free>
			filename = nullptr;
    1236:	movs	r3, #0
    1238:	str	r3, [r4, #88]	; 0x58
    123a:	ldr	r3, [r4, #80]	; 0x50
    123c:	cmp	r3, #0
    123e:	beq.w	16cc <storeData(int) [clone .part.0]+0x4d0>
			sdfatfile.close();
    1242:	add.w	r0, r4, #24
    1246:	bl	777c <FsBaseFile::close()>
		if (--(f->refcount) == 0) {
    124a:	ldr	r7, [r5, #16]
    124c:	ldr	r4, [r7, #4]
    124e:	subs	r4, #1
    1250:	str	r4, [r7, #4]
    1252:	cmp	r4, #0
    1254:	bne.n	12be <storeData(int) [clone .part.0]+0xc2>
			f->close();
    1256:	ldr	r3, [r7, #0]
    1258:	ldr	r3, [r3, #44]	; 0x2c
    125a:	cmp	r3, r6
    125c:	bne.w	1738 <storeData(int) [clone .part.0]+0x53c>
		if (filename) {
    1260:	ldr	r0, [r7, #88]	; 0x58
    1262:	cbz	r0, 126a <storeData(int) [clone .part.0]+0x6e>
			free(filename);
    1264:	bl	d240 <free>
			filename = nullptr;
    1268:	str	r4, [r7, #88]	; 0x58
    126a:	ldr	r3, [r7, #80]	; 0x50
    126c:	cmp	r3, #0
    126e:	beq.w	171c <storeData(int) [clone .part.0]+0x520>
			sdfatfile.close();
    1272:	add.w	r0, r7, #24
    1276:	bl	777c <FsBaseFile::close()>
			delete f;
    127a:	ldr	r4, [r5, #16]
    127c:	cbz	r4, 12be <storeData(int) [clone .part.0]+0xc2>
    127e:	ldr	r3, [r4, #0]
    1280:	ldr	r2, [pc, #516]	; (1488 <storeData(int) [clone .part.0]+0x28c>)
    1282:	ldr	r3, [r3, #4]
    1284:	cmp	r3, r2
    1286:	bne.w	1766 <storeData(int) [clone .part.0]+0x56a>
	virtual ~SDFile(void) {
    128a:	ldr	r3, [pc, #512]	; (148c <storeData(int) [clone .part.0]+0x290>)
		if (filename) {
    128c:	ldr	r0, [r4, #88]	; 0x58
	virtual ~SDFile(void) {
    128e:	str	r3, [r4, #0]
		if (filename) {
    1290:	cbz	r0, 129a <storeData(int) [clone .part.0]+0x9e>
			free(filename);
    1292:	bl	d240 <free>
			filename = nullptr;
    1296:	movs	r3, #0
    1298:	str	r3, [r4, #88]	; 0x58
    129a:	ldr	r3, [r4, #80]	; 0x50
			sdfatfile.close();
    129c:	add.w	r6, r4, #24
    12a0:	cmp	r3, #0
    12a2:	beq.w	16bc <storeData(int) [clone .part.0]+0x4c0>
    12a6:	mov	r0, r6
    12a8:	bl	777c <FsBaseFile::close()>
    12ac:	ldr	r3, [pc, #480]	; (1490 <storeData(int) [clone .part.0]+0x294>)
  ~FsBaseFile() { close(); }
    12ae:	mov	r0, r6
    12b0:	str	r3, [r4, #8]
    12b2:	bl	777c <FsBaseFile::close()>
	}
    12b6:	movs	r1, #92	; 0x5c
    12b8:	mov	r0, r4
    12ba:	bl	d09c <operator delete(void*, unsigned int)>
		}
		f = nullptr;
    12be:	movs	r3, #0
	}
    12c0:	mov.w	r0, #4294967295
		f = nullptr;
    12c4:	str	r3, [r5, #16]
          break;
    default:
          status=-1;
  }
  return status;
}
    12c6:	add	sp, #80	; 0x50
    12c8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          if(newDirectory(dirName)) 
    12cc:	ldr	r0, [pc, #452]	; (1494 <storeData(int) [clone .part.0]+0x298>)
    12ce:	bl	1054 <newDirectory(char*)>
    12d2:	cmp	r0, #0
    12d4:	beq.w	14d6 <storeData(int) [clone .part.0]+0x2da>
   * \param[in] path Path of the file to be tested for.
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    return m_fVol   ? m_fVol->exists(path)
    12d8:	ldr	r4, [pc, #444]	; (1498 <storeData(int) [clone .part.0]+0x29c>)
    12da:	ldr.w	r2, [r4, #1156]	; 0x484
    12de:	cmp	r2, #0
    12e0:	beq.w	14b8 <storeData(int) [clone .part.0]+0x2bc>
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile tmp;
    return tmp.open(this, path, O_RDONLY);
    12e4:	mov	r5, sp
  FatFile() {}
    12e6:	movs	r3, #0
    12e8:	mov	r1, r2
    12ea:	ldr	r2, [pc, #424]	; (1494 <storeData(int) [clone .part.0]+0x298>)
    12ec:	mov	r0, r5
    12ee:	str	r3, [sp, #0]
    12f0:	bl	6024 <FatFile::open(FatVolume*, char const*, int)>
          {   if( !SD.exists(dirName) && 
    12f4:	cmp	r0, #0
    12f6:	bne.w	14d6 <storeData(int) [clone .part.0]+0x2da>
   * \param[in] pFlag Create missing parent directories if true.
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char* path, bool pFlag = true) {
    return m_fVol   ? m_fVol->mkdir(path, pFlag)
    12fa:	ldr.w	r6, [r4, #1156]	; 0x484
    12fe:	cmp	r6, #0
    1300:	beq.w	17fa <storeData(int) [clone .part.0]+0x5fe>
    1304:	movs	r4, #0
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char* path, bool pFlag = true) {
    FatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
    1306:	movs	r3, #1
    1308:	ldr	r2, [pc, #392]	; (1494 <storeData(int) [clone .part.0]+0x298>)
    130a:	addw	r1, r6, #1092	; 0x444
    130e:	mov	r0, r5
    1310:	str	r4, [sp, #0]
    1312:	bl	5e48 <FatFile::mkdir(FatFile*, char const*, bool)>
    1316:	cmp	r0, #0
    1318:	bne.w	14d6 <storeData(int) [clone .part.0]+0x2da>
{ Serial.println();
    131c:	ldr	r0, [pc, #380]	; (149c <storeData(int) [clone .part.0]+0x2a0>)
    131e:	bl	d04c <Print::println()>
    1322:	movs	r2, #9
    1324:	ldr	r1, [pc, #376]	; (14a0 <storeData(int) [clone .part.0]+0x2a4>)
    1326:	ldr	r0, [pc, #372]	; (149c <storeData(int) [clone .part.0]+0x2a0>)
    1328:	bl	c3b0 <usb_serial_class::write(unsigned char const*, unsigned int)>
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
    132c:	ldr	r0, [pc, #364]	; (149c <storeData(int) [clone .part.0]+0x2a0>)
    132e:	bl	d04c <Print::println()>
                  !SD.mkdir(dirName)) return ErrorMsg("Error Dir");
    1332:	mov.w	r0, #4294967295
    1336:	b.n	1478 <storeData(int) [clone .part.0]+0x27c>
          makeHeader(header);
    1338:	ldr	r0, [pc, #360]	; (14a4 <storeData(int) [clone .part.0]+0x2a8>)
    133a:	bl	117c <makeHeader(char*)>
          if(file.write((const void*)header,512) < 512) return ErrorMsg("Error Header");
    133e:	ldr	r3, [pc, #320]	; (1480 <storeData(int) [clone .part.0]+0x284>)
    1340:	ldr	r3, [r3, #16]
		return (f) ? f->write(buf, size) : 0;
    1342:	cbz	r3, 1368 <storeData(int) [clone .part.0]+0x16c>
    1344:	ldr	r1, [r3, #0]
    1346:	ldr	r2, [pc, #352]	; (14a8 <storeData(int) [clone .part.0]+0x2ac>)
    1348:	ldr	r4, [r1, #12]
    134a:	cmp	r4, r2
    134c:	bne.w	173e <storeData(int) [clone .part.0]+0x542>
    return m_fFile   ? m_fFile->write(buf, count)
    1350:	ldr	r0, [r3, #80]	; 0x50
    1352:	cmp	r0, #0
    1354:	beq.w	160c <storeData(int) [clone .part.0]+0x410>
    1358:	mov.w	r2, #512	; 0x200
    135c:	ldr	r1, [pc, #324]	; (14a4 <storeData(int) [clone .part.0]+0x2a8>)
    135e:	bl	6914 <FatFile::write(void const*, unsigned int)>
    1362:	cmp.w	r0, #512	; 0x200
    1366:	bcs.n	13ba <storeData(int) [clone .part.0]+0x1be>
{ Serial.println();
    1368:	ldr	r0, [pc, #304]	; (149c <storeData(int) [clone .part.0]+0x2a0>)
    136a:	bl	d04c <Print::println()>
    136e:	movs	r1, #12
    1370:	ldr	r0, [pc, #312]	; (14ac <storeData(int) [clone .part.0]+0x2b0>)
    1372:	bl	a83c <usb_serial_write>
    1376:	ldr	r0, [pc, #292]	; (149c <storeData(int) [clone .part.0]+0x2a0>)
    1378:	bl	d04c <Print::println()>
          if(file.write((const void*)header,512) < 512) return ErrorMsg("Error Header");
    137c:	mov.w	r0, #4294967295
    1380:	b.n	1478 <storeData(int) [clone .part.0]+0x27c>
          disk_count++;
    1382:	ldr	r2, [pc, #300]	; (14b0 <storeData(int) [clone .part.0]+0x2b4>)
    1384:	ldr	r1, [pc, #248]	; (1480 <storeData(int) [clone .part.0]+0x284>)
    1386:	ldr	r3, [r2, #0]
    1388:	ldr	r4, [r1, #16]
    138a:	adds	r3, #1
    138c:	str	r3, [r2, #0]
    138e:	cmp	r4, #0
    1390:	beq.w	15f2 <storeData(int) [clone .part.0]+0x3f6>
    1394:	ldr	r3, [r4, #0]
    1396:	ldr	r2, [pc, #272]	; (14a8 <storeData(int) [clone .part.0]+0x2ac>)
    1398:	ldr	r3, [r3, #12]
    139a:	cmp	r3, r2
    139c:	bne.w	1750 <storeData(int) [clone .part.0]+0x554>
    13a0:	ldr	r0, [r4, #80]	; 0x50
    13a2:	cmp	r0, #0
    13a4:	beq.w	1620 <storeData(int) [clone .part.0]+0x424>
    13a8:	mov.w	r2, #2560	; 0xa00
    13ac:	ldr	r1, [pc, #260]	; (14b4 <storeData(int) [clone .part.0]+0x2b8>)
    13ae:	bl	6914 <FatFile::write(void const*, unsigned int)>
          if(file.write((const void *)diskBuffer, nbuf) < (size_t) nbuf) return ErrorMsg("Error Data");
    13b2:	cmp.w	r0, #2560	; 0xa00
    13b6:	bcc.w	15f2 <storeData(int) [clone .part.0]+0x3f6>
  switch(status)
    13ba:	movs	r0, #2
}
    13bc:	add	sp, #80	; 0x50
    13be:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (f) {
    13c2:	ldr	r5, [pc, #188]	; (1480 <storeData(int) [clone .part.0]+0x284>)
    13c4:	ldr	r4, [r5, #16]
    13c6:	cmp	r4, #0
    13c8:	beq.w	16da <storeData(int) [clone .part.0]+0x4de>
			f->close();
    13cc:	ldr	r3, [r4, #0]
    13ce:	ldr	r6, [pc, #180]	; (1484 <storeData(int) [clone .part.0]+0x288>)
    13d0:	ldr	r3, [r3, #44]	; 0x2c
    13d2:	cmp	r3, r6
    13d4:	bne.w	174a <storeData(int) [clone .part.0]+0x54e>
		if (filename) {
    13d8:	ldr	r0, [r4, #88]	; 0x58
    13da:	cbz	r0, 13e4 <storeData(int) [clone .part.0]+0x1e8>
			free(filename);
    13dc:	bl	d240 <free>
			filename = nullptr;
    13e0:	movs	r3, #0
    13e2:	str	r3, [r4, #88]	; 0x58
  bool isOpen() const { return m_fFile || m_xFile; }
    13e4:	ldr	r3, [r4, #80]	; 0x50
    13e6:	cmp	r3, #0
    13e8:	beq.w	1726 <storeData(int) [clone .part.0]+0x52a>
			sdfatfile.close();
    13ec:	add.w	r0, r4, #24
    13f0:	bl	777c <FsBaseFile::close()>
		if (--(f->refcount) == 0) {
    13f4:	ldr	r7, [r5, #16]
    13f6:	ldr	r4, [r7, #4]
    13f8:	subs	r4, #1
    13fa:	str	r4, [r7, #4]
    13fc:	cmp	r4, #0
    13fe:	bne.n	1468 <storeData(int) [clone .part.0]+0x26c>
			f->close();
    1400:	ldr	r3, [r7, #0]
    1402:	ldr	r3, [r3, #44]	; 0x2c
    1404:	cmp	r3, r6
    1406:	bne.w	16c6 <storeData(int) [clone .part.0]+0x4ca>
		if (filename) {
    140a:	ldr	r0, [r7, #88]	; 0x58
    140c:	cbz	r0, 1414 <storeData(int) [clone .part.0]+0x218>
			free(filename);
    140e:	bl	d240 <free>
			filename = nullptr;
    1412:	str	r4, [r7, #88]	; 0x58
    1414:	ldr	r3, [r7, #80]	; 0x50
    1416:	cmp	r3, #0
    1418:	beq.w	17ac <storeData(int) [clone .part.0]+0x5b0>
			sdfatfile.close();
    141c:	add.w	r0, r7, #24
    1420:	bl	777c <FsBaseFile::close()>
			delete f;
    1424:	ldr	r4, [r5, #16]
    1426:	cbz	r4, 1468 <storeData(int) [clone .part.0]+0x26c>
    1428:	ldr	r3, [r4, #0]
    142a:	ldr	r2, [pc, #92]	; (1488 <storeData(int) [clone .part.0]+0x28c>)
    142c:	ldr	r3, [r3, #4]
    142e:	cmp	r3, r2
    1430:	bne.w	17e0 <storeData(int) [clone .part.0]+0x5e4>
	virtual ~SDFile(void) {
    1434:	ldr	r3, [pc, #84]	; (148c <storeData(int) [clone .part.0]+0x290>)
		if (filename) {
    1436:	ldr	r0, [r4, #88]	; 0x58
	virtual ~SDFile(void) {
    1438:	str	r3, [r4, #0]
		if (filename) {
    143a:	cbz	r0, 1444 <storeData(int) [clone .part.0]+0x248>
			free(filename);
    143c:	bl	d240 <free>
			filename = nullptr;
    1440:	movs	r3, #0
    1442:	str	r3, [r4, #88]	; 0x58
    1444:	ldr	r3, [r4, #80]	; 0x50
			sdfatfile.close();
    1446:	add.w	r6, r4, #24
    144a:	cmp	r3, #0
    144c:	beq.w	17ca <storeData(int) [clone .part.0]+0x5ce>
    1450:	mov	r0, r6
    1452:	bl	777c <FsBaseFile::close()>
    1456:	ldr	r3, [pc, #56]	; (1490 <storeData(int) [clone .part.0]+0x294>)
  ~FsBaseFile() { close(); }
    1458:	mov	r0, r6
    145a:	str	r3, [r4, #8]
    145c:	bl	777c <FsBaseFile::close()>
	}
    1460:	movs	r1, #92	; 0x5c
    1462:	mov	r0, r4
    1464:	bl	d09c <operator delete(void*, unsigned int)>
		f = nullptr;
    1468:	movs	r3, #0
	}
    146a:	mov	r0, r3
		f = nullptr;
    146c:	str	r3, [r5, #16]
    146e:	add	sp, #80	; 0x50
    1470:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1474:	mov.w	r0, #4294967295
    1478:	add	sp, #80	; 0x50
    147a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    147e:	nop
    1480:	.word	0x200073b4
    1484:	.word	0x0000022d
    1488:	.word	0x0000094d
    148c:	.word	0x20000ae8
    1490:	.word	0x2000099c
    1494:	.word	0x20006908
    1498:	.word	0x20005300
    149c:	.word	0x20001458
    14a0:	.word	0x20000514
    14a4:	.word	0x20007448
    14a8:	.word	0x0000072d
    14ac:	.word	0x20000548
    14b0:	.word	0x20007388
    14b4:	.word	0x20006988
    14b8:	ldr.w	r1, [r4, #1160]	; 0x488
           : m_xVol ? m_xVol->exists(path)
    14bc:	cmp	r1, #0
    14be:	beq.w	131c <storeData(int) [clone .part.0]+0x120>
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    ExFatFile tmp;
    return tmp.open(this, path, O_RDONLY);
    14c2:	mov	r5, sp
    14c4:	mov	r3, r2
  ExFatFile() {}
    14c6:	str	r2, [sp, #48]	; 0x30
    14c8:	mov	r0, r5
    14ca:	ldr	r2, [pc, #672]	; (176c <storeData(int) [clone .part.0]+0x570>)
    14cc:	bl	43d8 <ExFatFile::open(ExFatVolume*, char const*, int)>
    14d0:	cmp	r0, #0
    14d2:	beq.w	12fa <storeData(int) [clone .part.0]+0xfe>
          if(!newFileName(fileName))return ErrorMsg("Failing new file");
    14d6:	ldr	r0, [pc, #664]	; (1770 <storeData(int) [clone .part.0]+0x574>)
    14d8:	bl	10ec <newFileName(char*)>
    14dc:	cmp	r0, #0
    14de:	beq.w	1828 <storeData(int) [clone .part.0]+0x62c>
	bool begin(uint8_t csPin = 10);
	File open(const char *filepath, uint8_t mode = FILE_READ) {
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
		SDFAT_FILE file = sdfs.open(filepath, flags);
    14e2:	movw	r3, #514	; 0x202
    14e6:	ldr	r2, [pc, #648]	; (1770 <storeData(int) [clone .part.0]+0x574>)
    14e8:	ldr	r1, [pc, #648]	; (1774 <storeData(int) [clone .part.0]+0x578>)
    14ea:	mov	r0, sp
    14ec:	bl	79d4 <FsVolume::open(char const*, int)>
  bool isOpen() const { return m_fFile || m_xFile; }
    14f0:	ldr	r3, [sp, #72]	; 0x48
    14f2:	cmp	r3, #0
    14f4:	beq.w	16e6 <storeData(int) [clone .part.0]+0x4ea>
		if (file) return File(new SDFile(file));
    14f8:	movs	r0, #92	; 0x5c
class FileImpl {
    14fa:	movs	r5, #0
    14fc:	bl	d098 <operator new(unsigned int)>
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
    1500:	ldr	r3, [pc, #628]	; (1778 <storeData(int) [clone .part.0]+0x57c>)
class Print
    1502:	ldrb.w	r6, [sp, #4]
		if (file) return File(new SDFile(file));
    1506:	mov	r4, r0
class Stream : public Print
    1508:	ldr	r1, [sp, #8]
    150a:	adds	r0, #24
    150c:	ldrb.w	r2, [sp, #12]
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
    1510:	str.w	r3, [r0, #-24]
    1514:	ldr	r3, [pc, #612]	; (177c <storeData(int) [clone .part.0]+0x580>)
    1516:	strb.w	r6, [r0, #-12]
    151a:	str.w	r1, [r0, #-8]
    151e:	add	r1, sp, #16
    1520:	str.w	r5, [r0, #-20]
    1524:	strb.w	r2, [r0, #-4]
    1528:	str.w	r3, [r0, #-16]
    152c:	bl	76f8 <FsBaseFile::FsBaseFile(FsBaseFile const&)>
		if (f) f->refcount++;
    1530:	ldr	r3, [r4, #4]
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    1532:	ldr	r2, [pc, #588]	; (1780 <storeData(int) [clone .part.0]+0x584>)
  ~FsBaseFile() { close(); }
    1534:	add	r0, sp, #16
    1536:	adds	r3, #1
    1538:	ldr.w	r8, [pc, #620]	; 17a8 <storeData(int) [clone .part.0]+0x5ac>
    153c:	str	r5, [r4, #88]	; 0x58
    153e:	str	r3, [r4, #4]
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    1540:	str	r2, [r4, #8]
		if (f) { dec_refcount(); /*Serial.println("File move assignment autoclose");*/ }
    1542:	ldr	r5, [pc, #576]	; (1784 <storeData(int) [clone .part.0]+0x588>)
    1544:	str.w	r8, [sp]
  ~FsBaseFile() { close(); }
    1548:	bl	777c <FsBaseFile::close()>
		if (file.f) file.f->refcount++;
    154c:	ldr	r7, [r4, #4]
		if (f) { dec_refcount(); /*Serial.println("File move assignment autoclose");*/ }
    154e:	ldr	r6, [r5, #16]
		if (file.f) file.f->refcount++;
    1550:	adds	r3, r7, #1
    1552:	str	r3, [r4, #4]
		if (f) { dec_refcount(); /*Serial.println("File move assignment autoclose");*/ }
    1554:	cmp	r6, #0
    1556:	beq.w	16d6 <storeData(int) [clone .part.0]+0x4da>
		if (--(f->refcount) == 0) {
    155a:	ldr	r3, [r6, #4]
    155c:	subs	r3, #1
    155e:	str	r3, [r6, #4]
    1560:	cmp	r3, #0
    1562:	bne.n	1632 <storeData(int) [clone .part.0]+0x436>
			f->close();
    1564:	ldr	r3, [r6, #0]
    1566:	ldr	r2, [pc, #544]	; (1788 <storeData(int) [clone .part.0]+0x58c>)
    1568:	ldr	r3, [r3, #44]	; 0x2c
    156a:	cmp	r3, r2
    156c:	bne.w	17da <storeData(int) [clone .part.0]+0x5de>
		if (filename) {
    1570:	ldr	r0, [r6, #88]	; 0x58
    1572:	cbz	r0, 157c <storeData(int) [clone .part.0]+0x380>
			free(filename);
    1574:	bl	d240 <free>
			filename = nullptr;
    1578:	movs	r3, #0
    157a:	str	r3, [r6, #88]	; 0x58
  bool isOpen() const { return m_fFile || m_xFile; }
    157c:	ldr	r3, [r6, #80]	; 0x50
    157e:	cmp	r3, #0
    1580:	beq.w	17b6 <storeData(int) [clone .part.0]+0x5ba>
			sdfatfile.close();
    1584:	add.w	r0, r6, #24
    1588:	bl	777c <FsBaseFile::close()>
			delete f;
    158c:	ldr	r6, [r5, #16]
    158e:	cbz	r6, 15d0 <storeData(int) [clone .part.0]+0x3d4>
    1590:	ldr	r3, [r6, #0]
    1592:	ldr	r2, [pc, #504]	; (178c <storeData(int) [clone .part.0]+0x590>)
    1594:	ldr	r3, [r3, #4]
    1596:	cmp	r3, r2
    1598:	bne.w	181c <storeData(int) [clone .part.0]+0x620>
	virtual ~SDFile(void) {
    159c:	ldr	r3, [pc, #472]	; (1778 <storeData(int) [clone .part.0]+0x57c>)
		if (filename) {
    159e:	ldr	r0, [r6, #88]	; 0x58
	virtual ~SDFile(void) {
    15a0:	str	r3, [r6, #0]
		if (filename) {
    15a2:	cbz	r0, 15ac <storeData(int) [clone .part.0]+0x3b0>
			free(filename);
    15a4:	bl	d240 <free>
			filename = nullptr;
    15a8:	movs	r3, #0
    15aa:	str	r3, [r6, #88]	; 0x58
    15ac:	ldr	r3, [r6, #80]	; 0x50
			sdfatfile.close();
    15ae:	add.w	r7, r6, #24
    15b2:	cmp	r3, #0
    15b4:	beq.w	17e6 <storeData(int) [clone .part.0]+0x5ea>
    15b8:	mov	r0, r7
    15ba:	bl	777c <FsBaseFile::close()>
  ~FsBaseFile() { close(); }
    15be:	mov	r0, r7
    15c0:	str.w	r8, [r6, #8]
    15c4:	bl	777c <FsBaseFile::close()>
	}
    15c8:	movs	r1, #92	; 0x5c
    15ca:	mov	r0, r6
    15cc:	bl	d09c <operator delete(void*, unsigned int)>
		f = file.f;
    15d0:	str	r4, [r5, #16]
		if (f) dec_refcount();
    15d2:	cmp	r4, #0
    15d4:	bne.w	1822 <storeData(int) [clone .part.0]+0x626>
{ Serial.println();
    15d8:	ldr	r0, [pc, #436]	; (1790 <storeData(int) [clone .part.0]+0x594>)
    15da:	bl	d04c <Print::println()>
    15de:	movs	r1, #17
    15e0:	ldr	r0, [pc, #432]	; (1794 <storeData(int) [clone .part.0]+0x598>)
    15e2:	bl	a83c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    15e6:	ldr	r0, [pc, #424]	; (1790 <storeData(int) [clone .part.0]+0x594>)
    15e8:	bl	d04c <Print::println()>
          if(!file) return ErrorMsg("Failing open file");
    15ec:	mov.w	r0, #4294967295
    15f0:	b.n	1478 <storeData(int) [clone .part.0]+0x27c>
{ Serial.println();
    15f2:	ldr	r0, [pc, #412]	; (1790 <storeData(int) [clone .part.0]+0x594>)
    15f4:	bl	d04c <Print::println()>
    15f8:	movs	r1, #10
    15fa:	ldr	r0, [pc, #412]	; (1798 <storeData(int) [clone .part.0]+0x59c>)
    15fc:	bl	a83c <usb_serial_write>
    1600:	ldr	r0, [pc, #396]	; (1790 <storeData(int) [clone .part.0]+0x594>)
    1602:	bl	d04c <Print::println()>
          if(file.write((const void *)diskBuffer, nbuf) < (size_t) nbuf) return ErrorMsg("Error Data");
    1606:	mov.w	r0, #4294967295
    160a:	b.n	1478 <storeData(int) [clone .part.0]+0x27c>
    160c:	ldr	r0, [r3, #84]	; 0x54
           : m_xFile ? m_xFile->write(buf, count)
    160e:	cmp	r0, #0
    1610:	beq.w	1368 <storeData(int) [clone .part.0]+0x16c>
    1614:	mov.w	r2, #512	; 0x200
    1618:	ldr	r1, [pc, #384]	; (179c <storeData(int) [clone .part.0]+0x5a0>)
    161a:	bl	515c <ExFatFile::write(void const*, unsigned int)>
    161e:	b.n	1362 <storeData(int) [clone .part.0]+0x166>
    1620:	ldr	r0, [r4, #84]	; 0x54
    1622:	cmp	r0, #0
    1624:	beq.n	15f2 <storeData(int) [clone .part.0]+0x3f6>
    1626:	mov.w	r2, #2560	; 0xa00
    162a:	ldr	r1, [pc, #372]	; (17a0 <storeData(int) [clone .part.0]+0x5a4>)
    162c:	bl	515c <ExFatFile::write(void const*, unsigned int)>
    1630:	b.n	13b2 <storeData(int) [clone .part.0]+0x1b6>
		if (--(f->refcount) == 0) {
    1632:	ldr	r7, [r4, #4]
		f = file.f;
    1634:	str	r4, [r5, #16]
		if (--(f->refcount) == 0) {
    1636:	subs	r7, #1
    1638:	str	r7, [r4, #4]
    163a:	cmp	r7, #0
    163c:	bne.n	16e2 <storeData(int) [clone .part.0]+0x4e6>
			f->close();
    163e:	ldr	r3, [r4, #0]
    1640:	ldr	r2, [pc, #324]	; (1788 <storeData(int) [clone .part.0]+0x58c>)
    1642:	ldr	r3, [r3, #44]	; 0x2c
    1644:	cmp	r3, r2
    1646:	bne.w	17d4 <storeData(int) [clone .part.0]+0x5d8>
		if (filename) {
    164a:	ldr	r0, [r4, #88]	; 0x58
    164c:	cbz	r0, 1654 <storeData(int) [clone .part.0]+0x458>
			free(filename);
    164e:	bl	d240 <free>
			filename = nullptr;
    1652:	str	r7, [r4, #88]	; 0x58
  bool isOpen() const { return m_fFile || m_xFile; }
    1654:	ldr	r3, [r4, #80]	; 0x50
    1656:	cmp	r3, #0
    1658:	beq.w	17c0 <storeData(int) [clone .part.0]+0x5c4>
			sdfatfile.close();
    165c:	add.w	r0, r4, #24
    1660:	bl	777c <FsBaseFile::close()>
			delete f;
    1664:	ldr	r3, [r4, #0]
    1666:	ldr	r2, [pc, #292]	; (178c <storeData(int) [clone .part.0]+0x590>)
    1668:	ldr	r3, [r3, #4]
    166a:	cmp	r3, r2
    166c:	bne.n	16de <storeData(int) [clone .part.0]+0x4e2>
	virtual ~SDFile(void) {
    166e:	ldr	r3, [pc, #264]	; (1778 <storeData(int) [clone .part.0]+0x57c>)
		if (filename) {
    1670:	ldr	r0, [r4, #88]	; 0x58
	virtual ~SDFile(void) {
    1672:	str	r3, [r4, #0]
		if (filename) {
    1674:	cbz	r0, 167e <storeData(int) [clone .part.0]+0x482>
			free(filename);
    1676:	bl	d240 <free>
			filename = nullptr;
    167a:	movs	r3, #0
    167c:	str	r3, [r4, #88]	; 0x58
    167e:	ldr	r3, [r4, #80]	; 0x50
			sdfatfile.close();
    1680:	add.w	r6, r4, #24
    1684:	cmp	r3, #0
    1686:	beq.w	17f0 <storeData(int) [clone .part.0]+0x5f4>
    168a:	mov	r0, r6
    168c:	bl	777c <FsBaseFile::close()>
  ~FsBaseFile() { close(); }
    1690:	mov	r0, r6
    1692:	str.w	r8, [r4, #8]
    1696:	bl	777c <FsBaseFile::close()>
	}
    169a:	mov	r0, r4
    169c:	movs	r1, #92	; 0x5c
    169e:	bl	d09c <operator delete(void*, unsigned int)>
    16a2:	ldr	r0, [r5, #16]
		return (f) ? f->isOpen() : false;
    16a4:	cmp	r0, #0
    16a6:	beq.n	15d8 <storeData(int) [clone .part.0]+0x3dc>
    16a8:	ldr	r3, [r0, #0]
    16aa:	ldr	r2, [pc, #248]	; (17a4 <storeData(int) [clone .part.0]+0x5a8>)
    16ac:	ldr	r3, [r3, #48]	; 0x30
    16ae:	cmp	r3, r2
    16b0:	bne.n	175c <storeData(int) [clone .part.0]+0x560>
  bool isOpen() const { return m_fFile || m_xFile; }
    16b2:	ldr	r3, [r0, #80]	; 0x50
    16b4:	cmp	r3, #0
    16b6:	beq.n	1730 <storeData(int) [clone .part.0]+0x534>
  switch(status)
    16b8:	movs	r0, #1
    16ba:	b.n	1478 <storeData(int) [clone .part.0]+0x27c>
    16bc:	ldr	r3, [r4, #84]	; 0x54
    16be:	cmp	r3, #0
    16c0:	bne.w	12a6 <storeData(int) [clone .part.0]+0xaa>
    16c4:	b.n	12ac <storeData(int) [clone .part.0]+0xb0>
			f->close();
    16c6:	mov	r0, r7
    16c8:	blx	r3
    16ca:	b.n	1424 <storeData(int) [clone .part.0]+0x228>
    16cc:	ldr	r3, [r4, #84]	; 0x54
    16ce:	cmp	r3, #0
    16d0:	bne.w	1242 <storeData(int) [clone .part.0]+0x46>
    16d4:	b.n	124a <storeData(int) [clone .part.0]+0x4e>
		f = file.f;
    16d6:	str	r4, [r5, #16]
		if (f) dec_refcount();
    16d8:	b.n	1638 <storeData(int) [clone .part.0]+0x43c>
    16da:	mov	r0, r4
    16dc:	b.n	1478 <storeData(int) [clone .part.0]+0x27c>
			delete f;
    16de:	mov	r0, r4
    16e0:	blx	r3
    16e2:	ldr	r0, [r5, #16]
    16e4:	b.n	16a4 <storeData(int) [clone .part.0]+0x4a8>
    16e6:	ldr	r4, [sp, #76]	; 0x4c
    16e8:	cmp	r4, #0
    16ea:	bne.w	14f8 <storeData(int) [clone .part.0]+0x2fc>
    16ee:	ldr.w	r8, [pc, #184]	; 17a8 <storeData(int) [clone .part.0]+0x5ac>
  ~FsBaseFile() { close(); }
    16f2:	add	r0, sp, #16
		if (f) { dec_refcount(); /*Serial.println("File move assignment autoclose");*/ }
    16f4:	ldr	r5, [pc, #140]	; (1784 <storeData(int) [clone .part.0]+0x588>)
    16f6:	str.w	r8, [sp]
    16fa:	bl	777c <FsBaseFile::close()>
    16fe:	ldr	r6, [r5, #16]
    1700:	cmp	r6, #0
    1702:	beq.w	15d8 <storeData(int) [clone .part.0]+0x3dc>
		if (--(f->refcount) == 0) {
    1706:	ldr	r3, [r6, #4]
    1708:	subs	r3, #1
    170a:	str	r3, [r6, #4]
    170c:	cmp	r3, #0
    170e:	beq.w	1564 <storeData(int) [clone .part.0]+0x368>
		f = nullptr;
    1712:	str	r4, [r5, #16]
		return (f) ? f->isOpen() : false;
    1714:	b.n	15d8 <storeData(int) [clone .part.0]+0x3dc>
			f->close();
    1716:	mov	r0, r4
    1718:	blx	r3
    171a:	b.n	124a <storeData(int) [clone .part.0]+0x4e>
  bool isOpen() const { return m_fFile || m_xFile; }
    171c:	ldr	r3, [r7, #84]	; 0x54
    171e:	cmp	r3, #0
    1720:	bne.w	1272 <storeData(int) [clone .part.0]+0x76>
    1724:	b.n	127a <storeData(int) [clone .part.0]+0x7e>
    1726:	ldr	r3, [r4, #84]	; 0x54
    1728:	cmp	r3, #0
    172a:	bne.w	13ec <storeData(int) [clone .part.0]+0x1f0>
    172e:	b.n	13f4 <storeData(int) [clone .part.0]+0x1f8>
    1730:	ldr	r3, [r0, #84]	; 0x54
    1732:	cmp	r3, #0
    1734:	bne.n	16b8 <storeData(int) [clone .part.0]+0x4bc>
    1736:	b.n	15d8 <storeData(int) [clone .part.0]+0x3dc>
			f->close();
    1738:	mov	r0, r7
    173a:	blx	r3
    173c:	b.n	127a <storeData(int) [clone .part.0]+0x7e>
		return (f) ? f->write(buf, size) : 0;
    173e:	mov.w	r2, #512	; 0x200
    1742:	ldr	r1, [pc, #88]	; (179c <storeData(int) [clone .part.0]+0x5a0>)
    1744:	mov	r0, r3
    1746:	blx	r4
    1748:	b.n	1362 <storeData(int) [clone .part.0]+0x166>
			f->close();
    174a:	mov	r0, r4
    174c:	blx	r3
    174e:	b.n	13f4 <storeData(int) [clone .part.0]+0x1f8>
		return (f) ? f->write(buf, size) : 0;
    1750:	mov.w	r2, #2560	; 0xa00
    1754:	ldr	r1, [pc, #72]	; (17a0 <storeData(int) [clone .part.0]+0x5a4>)
    1756:	mov	r0, r4
    1758:	blx	r3
    175a:	b.n	13b2 <storeData(int) [clone .part.0]+0x1b6>
		return (f) ? f->isOpen() : false;
    175c:	blx	r3
    175e:	cmp	r0, #0
    1760:	beq.w	15d8 <storeData(int) [clone .part.0]+0x3dc>
    1764:	b.n	16b8 <storeData(int) [clone .part.0]+0x4bc>
			delete f;
    1766:	mov	r0, r4
    1768:	blx	r3
    176a:	b.n	12be <storeData(int) [clone .part.0]+0xc2>
    176c:	.word	0x20006908
    1770:	.word	0x200073c8
    1774:	.word	0x20005304
    1778:	.word	0x20000ae8
    177c:	.word	0x20000b44
    1780:	.word	0x20000ab8
    1784:	.word	0x200073b4
    1788:	.word	0x0000022d
    178c:	.word	0x0000094d
    1790:	.word	0x20001458
    1794:	.word	0x20000534
    1798:	.word	0x20000558
    179c:	.word	0x20007448
    17a0:	.word	0x20006988
    17a4:	.word	0x00000071
    17a8:	.word	0x2000099c
    17ac:	ldr	r3, [r7, #84]	; 0x54
    17ae:	cmp	r3, #0
    17b0:	bne.w	141c <storeData(int) [clone .part.0]+0x220>
    17b4:	b.n	1424 <storeData(int) [clone .part.0]+0x228>
    17b6:	ldr	r3, [r6, #84]	; 0x54
    17b8:	cmp	r3, #0
    17ba:	bne.w	1584 <storeData(int) [clone .part.0]+0x388>
    17be:	b.n	158c <storeData(int) [clone .part.0]+0x390>
    17c0:	ldr	r3, [r4, #84]	; 0x54
    17c2:	cmp	r3, #0
    17c4:	bne.w	165c <storeData(int) [clone .part.0]+0x460>
    17c8:	b.n	1664 <storeData(int) [clone .part.0]+0x468>
    17ca:	ldr	r3, [r4, #84]	; 0x54
    17cc:	cmp	r3, #0
    17ce:	bne.w	1450 <storeData(int) [clone .part.0]+0x254>
    17d2:	b.n	1456 <storeData(int) [clone .part.0]+0x25a>
			f->close();
    17d4:	mov	r0, r4
    17d6:	blx	r3
    17d8:	b.n	1664 <storeData(int) [clone .part.0]+0x468>
    17da:	mov	r0, r6
    17dc:	blx	r3
    17de:	b.n	158c <storeData(int) [clone .part.0]+0x390>
			delete f;
    17e0:	mov	r0, r4
    17e2:	blx	r3
    17e4:	b.n	1468 <storeData(int) [clone .part.0]+0x26c>
    17e6:	ldr	r3, [r6, #84]	; 0x54
    17e8:	cmp	r3, #0
    17ea:	bne.w	15b8 <storeData(int) [clone .part.0]+0x3bc>
    17ee:	b.n	15be <storeData(int) [clone .part.0]+0x3c2>
    17f0:	ldr	r3, [r4, #84]	; 0x54
    17f2:	cmp	r3, #0
    17f4:	bne.w	168a <storeData(int) [clone .part.0]+0x48e>
    17f8:	b.n	1690 <storeData(int) [clone .part.0]+0x494>
    17fa:	ldr.w	r1, [r4, #1160]	; 0x488
           : m_xVol ? m_xVol->mkdir(path, pFlag)
    17fe:	cmp	r1, #0
    1800:	beq.w	131c <storeData(int) [clone .part.0]+0x120>
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char* path, bool pFlag = true) {
    ExFatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
    1804:	movs	r3, #1
    1806:	ldr	r2, [pc, #60]	; (1844 <storeData(int) [clone .part.0]+0x648>)
    1808:	add.w	r1, r1, #1096	; 0x448
    180c:	mov	r0, r5
    180e:	str	r6, [sp, #48]	; 0x30
    1810:	bl	4e2c <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
    1814:	cmp	r0, #0
    1816:	beq.w	131c <storeData(int) [clone .part.0]+0x120>
    181a:	b.n	14d6 <storeData(int) [clone .part.0]+0x2da>
    181c:	mov	r0, r6
    181e:	blx	r3
    1820:	b.n	15d0 <storeData(int) [clone .part.0]+0x3d4>
		if (--(f->refcount) == 0) {
    1822:	ldr	r7, [r4, #4]
    1824:	subs	r7, #1
    1826:	b.n	1638 <storeData(int) [clone .part.0]+0x43c>
{ Serial.println();
    1828:	ldr	r0, [pc, #28]	; (1848 <storeData(int) [clone .part.0]+0x64c>)
    182a:	bl	d04c <Print::println()>
    182e:	movs	r1, #16
    1830:	ldr	r0, [pc, #24]	; (184c <storeData(int) [clone .part.0]+0x650>)
    1832:	bl	a83c <usb_serial_write>
    1836:	ldr	r0, [pc, #16]	; (1848 <storeData(int) [clone .part.0]+0x64c>)
    1838:	bl	d04c <Print::println()>
          if(!newFileName(fileName))return ErrorMsg("Failing new file");
    183c:	mov.w	r0, #4294967295
    1840:	b.n	1478 <storeData(int) [clone .part.0]+0x27c>
    1842:	nop
    1844:	.word	0x20006908
    1848:	.word	0x20001458
    184c:	.word	0x20000520

00001850 <storeBegin()>:
{
    1850:	push	{r3, lr}
  if((!(SD.begin(BUILTIN_SDCARD)) && !(SD.begin( BUILTIN_SDCARD)))) 
    1852:	movs	r1, #254	; 0xfe
    1854:	ldr	r0, [pc, #56]	; (1890 <storeBegin()+0x40>)
    1856:	bl	2f70 <SDClass::begin(unsigned char)>
    185a:	cbnz	r0, 1866 <storeBegin()+0x16>
    185c:	movs	r1, #254	; 0xfe
    185e:	ldr	r0, [pc, #48]	; (1890 <storeBegin()+0x40>)
    1860:	bl	2f70 <SDClass::begin(unsigned char)>
    1864:	cbz	r0, 187c <storeBegin()+0x2c>
    1866:	movs	r1, #13
    1868:	ldr	r0, [pc, #40]	; (1894 <storeBegin()+0x44>)
    186a:	bl	a83c <usb_serial_write>
    186e:	ldr	r0, [pc, #40]	; (1898 <storeBegin()+0x48>)
    1870:	bl	d04c <Print::println()>
    haveSD=1;
    1874:	ldr	r3, [pc, #36]	; (189c <storeBegin()+0x4c>)
    1876:	movs	r2, #1
    1878:	strh	r2, [r3, #0]
}
    187a:	pop	{r3, pc}
    187c:	movs	r1, #28
    187e:	ldr	r0, [pc, #32]	; (18a0 <storeBegin()+0x50>)
    1880:	bl	a83c <usb_serial_write>
    1884:	ldr	r0, [pc, #16]	; (1898 <storeBegin()+0x48>)
    1886:	ldmia.w	sp!, {r3, lr}
    188a:	b.w	d04c <Print::println()>
    188e:	nop
    1890:	.word	0x20005300
    1894:	.word	0x200004b4
    1898:	.word	0x20001458
    189c:	.word	0x20007b48
    18a0:	.word	0x20000494

000018a4 <setup>:
AudioConnection          patchCord1(acq, 0, usb1, 0);
AudioConnection          patchCord2(acq, 1, usb1, 1);
AudioConnection          patchCord3(acq,  0, proc, 0);
AudioConnection          patchCord4(proc, 0, queue1, 0);

void setup() {
    18a4:	push	{r4, lr}
  // put your setup code here, to run once:
  AudioMemory(60);
    18a6:	movs	r1, #60	; 0x3c
    18a8:	ldr	r0, [pc, #44]	; (18d8 <setup+0x34>)
    18aa:	bl	136a0 <___ZN11AudioStream17initialize_memoryEP18audio_block_structj_veneer>
    num = HW_OCOTP_MAC0 & 0xFFFFFF;
    18ae:	ldr	r3, [pc, #44]	; (18dc <setup+0x38>)
  void digitalShift(int16_t val){I2S_32::shift=val;}
    18b0:	ldr	r1, [pc, #44]	; (18e0 <setup+0x3c>)
    18b2:	movs	r0, #10
    18b4:	ldr.w	r3, [r3, #544]	; 0x220
  acq.digitalShift(shift);

  SerNum=getTeensySerial();
    18b8:	ldr	r2, [pc, #40]	; (18e4 <setup+0x40>)
    18ba:	bic.w	r3, r3, #4278190080	; 0xff000000
#endif
public:
	AudioRecordQueue(void) : AudioStream(1, inputQueueArray),
		userblock(NULL), head(0), tail(0), enabled(0) { }
	void begin(void) {
		clear();
    18be:	ldr	r4, [pc, #40]	; (18e8 <setup+0x44>)
    18c0:	strh	r0, [r1, #0]
    18c2:	str	r3, [r2, #0]
  
  #if STARTMODE==-1
    while(!Serial);
  #endif

  storeBegin();
    18c4:	bl	1850 <storeBegin()>
    18c8:	mov	r0, r4
    18ca:	bl	1fa0 <AudioRecordQueue::clear()>
		enabled = 1;
    18ce:	movs	r3, #1
    18d0:	strb.w	r3, [r4, #870]	; 0x366

  queue1.begin();
}
    18d4:	pop	{r4, pc}
    18d6:	nop
    18d8:	.word	0x20200000
    18dc:	.word	0x401f4400
    18e0:	.word	0x20001a42
    18e4:	.word	0x200058c0
    18e8:	.word	0x20007710

000018ec <loop>:

void loop() {
    18ec:	push	{r4, r5, r6, r7, lr}
    18ee:	sub	sp, #28
        virtual int available() { return usb_serial_available(); }
    18f0:	bl	a768 <usb_serial_available>
  // put your main code here, to run repeatedly:

  static int16_t status=START_MODE;

  // basic menu to start and stop archiving
  if(Serial.available())
    18f4:	cmp	r0, #0
    18f6:	bne.n	197c <loop+0x90>
    18f8:	ldr	r6, [pc, #272]	; (1a0c <loop+0x120>)
    if(ch=='e') status=4;
    while(Serial.available()) Serial.read();
  }

  // check end of file
  status=checkEndOfFile(status);
    18fa:	ldrsh.w	r4, [r6]
{ uint32_t tx=rtc_get();
    18fe:	bl	baa0 <rtc_get>
  tx = tx % t_acq;
    1902:	ldr	r3, [pc, #268]	; (1a10 <loop+0x124>)
  if((status>1) && (tx_>0) && (tx < tx_)) status=3;
    1904:	cmp	r4, #1
  tx = tx % t_acq;
    1906:	umull	r2, r3, r3, r0
  if((status>1) && (tx_>0) && (tx < tx_)) status=3;
    190a:	ldr	r2, [pc, #264]	; (1a14 <loop+0x128>)
  tx = tx % t_acq;
    190c:	mov.w	r3, r3, lsr #5
    1910:	rsb	r3, r3, r3, lsl #4
    1914:	sub.w	r3, r0, r3, lsl #2
  if((status>1) && (tx_>0) && (tx < tx_)) status=3;
    1918:	ble.n	1922 <loop+0x36>
    191a:	ldr	r1, [r2, #0]
    191c:	cmp	r3, r1
    191e:	it	cc
    1920:	movcc	r4, #3

  // if available transfer data to disk
  if(queue1.available()>=NBUF)
    1922:	ldr	r0, [pc, #244]	; (1a18 <loop+0x12c>)
  tx_=tx;
    1924:	str	r3, [r2, #0]
  status=checkEndOfFile(status);
    1926:	strh	r4, [r6, #0]
  if(queue1.available()>=NBUF)
    1928:	bl	1f88 <AudioRecordQueue::available()>
    192c:	cmp	r0, #9
    192e:	ble.n	1968 <loop+0x7c>
    1930:	ldr	r4, [pc, #232]	; (1a1c <loop+0x130>)
  { // fetch data from buffer
    for(int ii=0; ii<NBUF; ii++)
    { int16_t *buffer= queue1.readBuffer();
    1932:	ldr	r5, [pc, #228]	; (1a18 <loop+0x12c>)
    1934:	add.w	r7, r4, #2560	; 0xa00
    1938:	mov	r0, r5
    193a:	bl	1fe8 <AudioRecordQueue::readBuffer()>
      memcpy(diskBuffer+ii*NSAMP, buffer, 2*NSAMP);
    193e:	mov.w	r2, #256	; 0x100
    { int16_t *buffer= queue1.readBuffer();
    1942:	mov	r1, r0
      memcpy(diskBuffer+ii*NSAMP, buffer, 2*NSAMP);
    1944:	mov	r0, r4
    for(int ii=0; ii<NBUF; ii++)
    1946:	add	r4, r2
      memcpy(diskBuffer+ii*NSAMP, buffer, 2*NSAMP);
    1948:	bl	a0c4 <memcpy>
      queue1.freeBuffer();
    194c:	mov	r0, r5
    194e:	bl	2024 <AudioRecordQueue::freeBuffer()>
    for(int ii=0; ii<NBUF; ii++)
    1952:	cmp	r4, r7
    1954:	bne.n	1938 <loop+0x4c>
  if(!haveSD) return status;
    1956:	ldr	r3, [pc, #200]	; (1a20 <loop+0x134>)
    }

    // write data to disk
    //-------------------
    status=storeData(status);
    1958:	ldrsh.w	r0, [r6]
    195c:	ldrsh.w	r3, [r3]
    1960:	cbz	r3, 1966 <loop+0x7a>
    1962:	bl	11fc <storeData(int) [clone .part.0]>
    1966:	strh	r0, [r6, #0]
    1968:	ldr	r2, [pc, #184]	; (1a24 <loop+0x138>)
  
  // print some statistics every second
  static uint32_t t0=0;
  static uint32_t ic=0;
  
  if(millis()-t0>1000)
    196a:	ldr	r1, [pc, #188]	; (1a28 <loop+0x13c>)
    196c:	ldr	r3, [r2, #0]
    196e:	ldr	r0, [r1, #0]
    1970:	subs	r3, r3, r0
    1972:	cmp.w	r3, #1000	; 0x3e8
    1976:	bhi.n	19a0 <loop+0xb4>
        ic++, rtc_get()%60, AudioMemoryUsageMax(), 
        (float) fsamp/(float)(disk_count*NBUF*NSAMP), status);
    AudioMemoryUsageMaxReset();
    disk_count=0;
  }
}
    1978:	add	sp, #28
    197a:	pop	{r4, r5, r6, r7, pc}
        virtual int read() { return usb_serial_getchar(); }
    197c:	bl	a7f0 <usb_serial_getchar>
    if(ch=='s') status=0;
    1980:	ldr	r6, [pc, #136]	; (1a0c <loop+0x120>)
    char ch=Serial.read();
    1982:	uxtb	r0, r0
    if(ch=='s') status=0;
    1984:	cmp	r0, #115	; 0x73
    1986:	beq.n	1a06 <loop+0x11a>
    if(ch=='e') status=4;
    1988:	cmp	r0, #101	; 0x65
    198a:	itt	eq
    198c:	moveq	r3, #4
    198e:	strheq	r3, [r6, #0]
    1990:	b.n	1996 <loop+0xaa>
    1992:	bl	a7f0 <usb_serial_getchar>
        virtual int available() { return usb_serial_available(); }
    1996:	bl	a768 <usb_serial_available>
    while(Serial.available()) Serial.read();
    199a:	cmp	r0, #0
    199c:	bne.n	1992 <loop+0xa6>
    199e:	b.n	18fa <loop+0xe>
    Serial.printf("\n%10d %2d %3d %.2f %d",
    19a0:	ldr	r3, [pc, #136]	; (1a2c <loop+0x140>)
    19a2:	ldr	r2, [r2, #0]
    19a4:	ldr	r7, [r3, #0]
  { t0=millis();
    19a6:	str	r2, [r1, #0]
    Serial.printf("\n%10d %2d %3d %.2f %d",
    19a8:	adds	r2, r7, #1
        (float) fsamp/(float)(disk_count*NBUF*NSAMP), status);
    19aa:	ldr	r5, [pc, #132]	; (1a30 <loop+0x144>)
    Serial.printf("\n%10d %2d %3d %.2f %d",
    19ac:	ldr	r4, [pc, #132]	; (1a34 <loop+0x148>)
    19ae:	str	r2, [r3, #0]
        ic++, rtc_get()%60, AudioMemoryUsageMax(), 
    19b0:	bl	baa0 <rtc_get>
    Serial.printf("\n%10d %2d %3d %.2f %d",
    19b4:	ldrsh.w	r3, [r6]
    19b8:	mov	r2, r7
        (float) fsamp/(float)(disk_count*NBUF*NSAMP), status);
    19ba:	vldr	s13, [pc, #124]	; 1a38 <loop+0x14c>
    Serial.printf("\n%10d %2d %3d %.2f %d",
    19be:	str	r3, [sp, #16]
        (float) fsamp/(float)(disk_count*NBUF*NSAMP), status);
    19c0:	ldr	r1, [r5, #0]
    Serial.printf("\n%10d %2d %3d %.2f %d",
    19c2:	ldrh	r3, [r4, #0]
        (float) fsamp/(float)(disk_count*NBUF*NSAMP), status);
    19c4:	add.w	r1, r1, r1, lsl #2
    Serial.printf("\n%10d %2d %3d %.2f %d",
    19c8:	str	r3, [sp, #0]
        (float) fsamp/(float)(disk_count*NBUF*NSAMP), status);
    19ca:	lsls	r1, r1, #8
    19cc:	vmov	s15, r1
    Serial.printf("\n%10d %2d %3d %.2f %d",
    19d0:	ldr	r1, [pc, #60]	; (1a10 <loop+0x124>)
        (float) fsamp/(float)(disk_count*NBUF*NSAMP), status);
    19d2:	vcvt.f32.u32	s15, s15
    Serial.printf("\n%10d %2d %3d %.2f %d",
    19d6:	umull	r3, r1, r1, r0
    19da:	lsrs	r1, r1, #5
        (float) fsamp/(float)(disk_count*NBUF*NSAMP), status);
    19dc:	vdiv.f32	s14, s13, s15
    Serial.printf("\n%10d %2d %3d %.2f %d",
    19e0:	rsb	r1, r1, r1, lsl #4
    19e4:	sub.w	r3, r0, r1, lsl #2
    19e8:	ldr	r1, [pc, #80]	; (1a3c <loop+0x150>)
    19ea:	ldr	r0, [pc, #84]	; (1a40 <loop+0x154>)
    19ec:	vcvt.f64.f32	d7, s14
    19f0:	vstr	d7, [sp, #8]
    19f4:	bl	d078 <Print::printf(char const*, ...)>
    AudioMemoryUsageMaxReset();
    19f8:	ldr	r3, [pc, #72]	; (1a44 <loop+0x158>)
    disk_count=0;
    19fa:	movs	r2, #0
    AudioMemoryUsageMaxReset();
    19fc:	ldrh	r3, [r3, #0]
    disk_count=0;
    19fe:	str	r2, [r5, #0]
    AudioMemoryUsageMaxReset();
    1a00:	strh	r3, [r4, #0]
}
    1a02:	add	sp, #28
    1a04:	pop	{r4, r5, r6, r7, pc}
    if(ch=='s') status=0;
    1a06:	movs	r3, #0
    1a08:	strh	r3, [r6, #0]
    if(ch=='e') status=4;
    1a0a:	b.n	1996 <loop+0xaa>
    1a0c:	.word	0x20007b44
    1a10:	.word	0x88888889
    1a14:	.word	0x20007af4
    1a18:	.word	0x20007710
    1a1c:	.word	0x20006988
    1a20:	.word	0x20007b48
    1a24:	.word	0x20007aec
    1a28:	.word	0x200065d8
    1a2c:	.word	0x200065d4
    1a30:	.word	0x20007388
    1a34:	.word	0x20007b36
    1a38:	.word	0x472c4400
    1a3c:	.word	0x2000122c
    1a40:	.word	0x20001458
    1a44:	.word	0x20007b34

00001a48 <_GLOBAL__sub_I_DirPrefix>:
}
    1a48:	push	{r4, r5, r6, lr}
DMAChannel I2S_32::dma(false);
    1a4a:	ldr	r2, [pc, #364]	; (1bb8 <_GLOBAL__sub_I_DirPrefix+0x170>)
    1a4c:	sub	sp, #8
    1a4e:	ldr	r1, [pc, #364]	; (1bbc <_GLOBAL__sub_I_DirPrefix+0x174>)
	constexpr Print() : write_error(0) {}
    1a50:	movs	r4, #0
    1a52:	ldr	r0, [pc, #364]	; (1bc0 <_GLOBAL__sub_I_DirPrefix+0x178>)
    1a54:	bl	d224 <__aeabi_atexit>
    1a58:	ldr	r0, [pc, #360]	; (1bc4 <_GLOBAL__sub_I_DirPrefix+0x17c>)
	File(FileImpl *file) {
    1a5a:	ldr	r3, [pc, #364]	; (1bc8 <_GLOBAL__sub_I_DirPrefix+0x180>)
	constexpr Stream() : _timeout(1000), read_error(0) {}
    1a5c:	mov.w	r1, #1000	; 0x3e8
			for (int i=0; i < num_inputs; i++) {
				inputQueue[i] = NULL;
			}
			// add to a simple list, for update_all
			// TODO: replace with a proper data flow analysis in update_all
			if (first_update == NULL) {
    1a60:	ldr	r5, [pc, #360]	; (1bcc <_GLOBAL__sub_I_DirPrefix+0x184>)
File file=NULL; 
    1a62:	ldr	r2, [pc, #340]	; (1bb8 <_GLOBAL__sub_I_DirPrefix+0x170>)
    1a64:	str	r1, [r0, #8]
    1a66:	str	r3, [r0, #0]
    1a68:	ldr	r1, [pc, #356]	; (1bd0 <_GLOBAL__sub_I_DirPrefix+0x188>)
    1a6a:	strb	r4, [r0, #4]
    1a6c:	strb	r4, [r0, #12]
		f = file;
    1a6e:	str	r4, [r0, #16]
    1a70:	bl	d224 <__aeabi_atexit>
		num_inputs(ninput), inputQueue(iqueue) {
    1a74:	ldr	r6, [pc, #348]	; (1bd4 <_GLOBAL__sub_I_DirPrefix+0x18c>)
    1a76:	ldr	r2, [pc, #352]	; (1bd8 <_GLOBAL__sub_I_DirPrefix+0x190>)
			if (first_update == NULL) {
    1a78:	ldr	r3, [r5, #0]
		num_inputs(ninput), inputQueue(iqueue) {
    1a7a:	str	r6, [r2, #0]
    1a7c:	str	r4, [r2, #16]
			active = false;
    1a7e:	strh	r4, [r2, #8]
			destination_list = NULL;
    1a80:	str	r4, [r2, #12]
			if (first_update == NULL) {
    1a82:	cmp	r3, #0
    1a84:	beq.w	1baa <_GLOBAL__sub_I_DirPrefix+0x162>
				first_update = this;
			} else {
				AudioStream *p;
				for (p=first_update; p->next_update; p = p->next_update) ;
    1a88:	mov	r1, r3
    1a8a:	ldr	r3, [r3, #20]
    1a8c:	cmp	r3, #0
    1a8e:	bne.n	1a88 <_GLOBAL__sub_I_DirPrefix+0x40>
				p->next_update = this;
    1a90:	str	r2, [r1, #20]
			}
			next_update = NULL;
    1a92:	movs	r4, #0
	I2S_32(void) : AudioStream(0, NULL) {begin();}
    1a94:	ldr	r3, [pc, #324]	; (1bdc <_GLOBAL__sub_I_DirPrefix+0x194>)
    1a96:	ldr	r0, [pc, #320]	; (1bd8 <_GLOBAL__sub_I_DirPrefix+0x190>)
    1a98:	str	r3, [r2, #0]
    1a9a:	str	r4, [r2, #20]
			cpu_cycles = 0;
    1a9c:	str	r4, [r2, #4]
			cpu_cycles_max = 0;
			numConnections = 0;
    1a9e:	strb	r4, [r2, #10]
    1aa0:	bl	c78 <I2S_32::begin()>
		num_inputs(ninput), inputQueue(iqueue) {
    1aa4:	ldr	r2, [pc, #312]	; (1be0 <_GLOBAL__sub_I_DirPrefix+0x198>)
			if (first_update == NULL) {
    1aa6:	ldr	r3, [r5, #0]
		num_inputs(ninput), inputQueue(iqueue) {
    1aa8:	mov	r1, r2
			destination_list = NULL;
    1aaa:	str	r4, [r2, #12]
		num_inputs(ninput), inputQueue(iqueue) {
    1aac:	str.w	r6, [r1], #24
    1ab0:	str	r1, [r2, #16]
			active = false;
    1ab2:	mov.w	r1, #512	; 0x200
				inputQueue[i] = NULL;
    1ab6:	strd	r4, r4, [r2, #24]
			active = false;
    1aba:	strh	r1, [r2, #8]
			if (first_update == NULL) {
    1abc:	cmp	r3, #0
    1abe:	beq.n	1bb4 <_GLOBAL__sub_I_DirPrefix+0x16c>
				for (p=first_update; p->next_update; p = p->next_update) ;
    1ac0:	mov	r1, r3
    1ac2:	ldr	r3, [r3, #20]
    1ac4:	cmp	r3, #0
    1ac6:	bne.n	1ac0 <_GLOBAL__sub_I_DirPrefix+0x78>
				p->next_update = this;
    1ac8:	str	r2, [r1, #20]
			next_update = NULL;
    1aca:	movs	r4, #0
};

class AudioOutputUSB : public AudioStream
{
public:
	AudioOutputUSB(void) : AudioStream(2, inputQueueArray) { begin(); }
    1acc:	ldr	r3, [pc, #276]	; (1be4 <_GLOBAL__sub_I_DirPrefix+0x19c>)
    1ace:	ldr	r0, [pc, #272]	; (1be0 <_GLOBAL__sub_I_DirPrefix+0x198>)
    1ad0:	str	r4, [r2, #20]
			cpu_cycles = 0;
    1ad2:	str	r4, [r2, #4]
			numConnections = 0;
    1ad4:	strb	r4, [r2, #10]
    1ad6:	str	r3, [r2, #0]
    1ad8:	bl	ccf4 <AudioOutputUSB::begin()>
		num_inputs(ninput), inputQueue(iqueue) {
    1adc:	ldr	r2, [pc, #264]	; (1be8 <_GLOBAL__sub_I_DirPrefix+0x1a0>)
			active = false;
    1ade:	mov.w	r1, #256	; 0x100
		num_inputs(ninput), inputQueue(iqueue) {
    1ae2:	mov	r3, r2
			destination_list = NULL;
    1ae4:	str	r4, [r2, #12]
				inputQueue[i] = NULL;
    1ae6:	str	r4, [r2, #24]
			if (first_update == NULL) {
    1ae8:	ldr	r4, [r5, #0]
		num_inputs(ninput), inputQueue(iqueue) {
    1aea:	str.w	r6, [r3], #24
			active = false;
    1aee:	strh	r1, [r2, #8]
		num_inputs(ninput), inputQueue(iqueue) {
    1af0:	str	r3, [r2, #16]
			if (first_update == NULL) {
    1af2:	cmp	r4, #0
    1af4:	beq.n	1bae <_GLOBAL__sub_I_DirPrefix+0x166>
    1af6:	mov	r3, r4
				for (p=first_update; p->next_update; p = p->next_update) ;
    1af8:	mov	r1, r3
    1afa:	ldr	r3, [r3, #20]
    1afc:	cmp	r3, #0
    1afe:	bne.n	1af8 <_GLOBAL__sub_I_DirPrefix+0xb0>
				p->next_update = this;
    1b00:	str	r2, [r1, #20]
			next_update = NULL;
    1b02:	movs	r3, #0
		num_inputs(ninput), inputQueue(iqueue) {
    1b04:	ldr	r1, [pc, #228]	; (1bec <_GLOBAL__sub_I_DirPrefix+0x1a4>)
		userblock(NULL), head(0), tail(0), enabled(0) { }
    1b06:	ldr	r0, [pc, #232]	; (1bf0 <_GLOBAL__sub_I_DirPrefix+0x1a8>)
    1b08:	strb.w	r3, [r2, #868]	; 0x364
    1b0c:	str	r0, [r2, #0]
    1b0e:	movs	r0, #1
    1b10:	strb.w	r3, [r2, #869]	; 0x365
			next_update = NULL;
    1b14:	str	r3, [r2, #20]
			cpu_cycles = 0;
    1b16:	str	r3, [r2, #4]
			numConnections = 0;
    1b18:	strb	r3, [r2, #10]
    1b1a:	str.w	r3, [r2, #864]	; 0x360
    1b1e:	strb.w	r3, [r2, #870]	; 0x366
		num_inputs(ninput), inputQueue(iqueue) {
    1b22:	add.w	r2, r1, #24
			active = false;
    1b26:	strb	r3, [r1, #8]
		num_inputs(ninput), inputQueue(iqueue) {
    1b28:	strb	r0, [r1, #9]
			destination_list = NULL;
    1b2a:	str	r3, [r1, #12]
				inputQueue[i] = NULL;
    1b2c:	str	r3, [r1, #24]
		num_inputs(ninput), inputQueue(iqueue) {
    1b2e:	str	r2, [r1, #16]
				for (p=first_update; p->next_update; p = p->next_update) ;
    1b30:	mov	r2, r4
    1b32:	ldr	r4, [r4, #20]
    1b34:	cmp	r4, #0
    1b36:	bne.n	1b30 <_GLOBAL__sub_I_DirPrefix+0xe8>
  AudioCompress() : AudioStream(1, inputQueueArray) { }
    1b38:	ldr	r0, [pc, #184]	; (1bf4 <_GLOBAL__sub_I_DirPrefix+0x1ac>)
				p->next_update = this;
    1b3a:	str	r1, [r2, #20]
AudioConnection          patchCord1(acq, 0, usb1, 0);
    1b3c:	mov	r2, r4
    1b3e:	str	r4, [sp, #0]
    1b40:	ldr	r3, [pc, #156]	; (1be0 <_GLOBAL__sub_I_DirPrefix+0x198>)
			next_update = NULL;
    1b42:	str	r4, [r1, #20]
			cpu_cycles = 0;
    1b44:	str	r4, [r1, #4]
			numConnections = 0;
    1b46:	strb	r4, [r1, #10]
    1b48:	str	r0, [r1, #0]
    1b4a:	ldr	r1, [pc, #140]	; (1bd8 <_GLOBAL__sub_I_DirPrefix+0x190>)
    1b4c:	ldr	r0, [pc, #168]	; (1bf8 <_GLOBAL__sub_I_DirPrefix+0x1b0>)
    1b4e:	bl	c80c <AudioConnection::AudioConnection(AudioStream&, unsigned char, AudioStream&, unsigned char)>
    1b52:	ldr	r2, [pc, #100]	; (1bb8 <_GLOBAL__sub_I_DirPrefix+0x170>)
    1b54:	ldr	r1, [pc, #164]	; (1bfc <_GLOBAL__sub_I_DirPrefix+0x1b4>)
    1b56:	ldr	r0, [pc, #160]	; (1bf8 <_GLOBAL__sub_I_DirPrefix+0x1b0>)
    1b58:	bl	d224 <__aeabi_atexit>
AudioConnection          patchCord2(acq, 1, usb1, 1);
    1b5c:	movs	r2, #1
    1b5e:	ldr	r3, [pc, #128]	; (1be0 <_GLOBAL__sub_I_DirPrefix+0x198>)
    1b60:	str	r2, [sp, #0]
    1b62:	ldr	r1, [pc, #116]	; (1bd8 <_GLOBAL__sub_I_DirPrefix+0x190>)
    1b64:	ldr	r0, [pc, #152]	; (1c00 <_GLOBAL__sub_I_DirPrefix+0x1b8>)
    1b66:	bl	c80c <AudioConnection::AudioConnection(AudioStream&, unsigned char, AudioStream&, unsigned char)>
    1b6a:	ldr	r2, [pc, #76]	; (1bb8 <_GLOBAL__sub_I_DirPrefix+0x170>)
    1b6c:	ldr	r1, [pc, #140]	; (1bfc <_GLOBAL__sub_I_DirPrefix+0x1b4>)
    1b6e:	ldr	r0, [pc, #144]	; (1c00 <_GLOBAL__sub_I_DirPrefix+0x1b8>)
    1b70:	bl	d224 <__aeabi_atexit>
AudioConnection          patchCord3(acq,  0, proc, 0);
    1b74:	ldr	r3, [pc, #116]	; (1bec <_GLOBAL__sub_I_DirPrefix+0x1a4>)
    1b76:	mov	r2, r4
    1b78:	ldr	r1, [pc, #92]	; (1bd8 <_GLOBAL__sub_I_DirPrefix+0x190>)
    1b7a:	str	r4, [sp, #0]
    1b7c:	ldr	r0, [pc, #132]	; (1c04 <_GLOBAL__sub_I_DirPrefix+0x1bc>)
    1b7e:	bl	c80c <AudioConnection::AudioConnection(AudioStream&, unsigned char, AudioStream&, unsigned char)>
    1b82:	ldr	r2, [pc, #52]	; (1bb8 <_GLOBAL__sub_I_DirPrefix+0x170>)
    1b84:	ldr	r1, [pc, #116]	; (1bfc <_GLOBAL__sub_I_DirPrefix+0x1b4>)
    1b86:	ldr	r0, [pc, #124]	; (1c04 <_GLOBAL__sub_I_DirPrefix+0x1bc>)
    1b88:	bl	d224 <__aeabi_atexit>
AudioConnection          patchCord4(proc, 0, queue1, 0);
    1b8c:	mov	r2, r4
    1b8e:	ldr	r1, [pc, #92]	; (1bec <_GLOBAL__sub_I_DirPrefix+0x1a4>)
    1b90:	ldr	r3, [pc, #84]	; (1be8 <_GLOBAL__sub_I_DirPrefix+0x1a0>)
    1b92:	str	r4, [sp, #0]
    1b94:	ldr	r0, [pc, #112]	; (1c08 <_GLOBAL__sub_I_DirPrefix+0x1c0>)
    1b96:	bl	c80c <AudioConnection::AudioConnection(AudioStream&, unsigned char, AudioStream&, unsigned char)>
    1b9a:	ldr	r2, [pc, #28]	; (1bb8 <_GLOBAL__sub_I_DirPrefix+0x170>)
    1b9c:	ldr	r1, [pc, #92]	; (1bfc <_GLOBAL__sub_I_DirPrefix+0x1b4>)
    1b9e:	ldr	r0, [pc, #104]	; (1c08 <_GLOBAL__sub_I_DirPrefix+0x1c0>)
}
    1ba0:	add	sp, #8
    1ba2:	ldmia.w	sp!, {r4, r5, r6, lr}
AudioConnection          patchCord4(proc, 0, queue1, 0);
    1ba6:	b.w	d224 <__aeabi_atexit>
				first_update = this;
    1baa:	str	r2, [r5, #0]
    1bac:	b.n	1a92 <_GLOBAL__sub_I_DirPrefix+0x4a>
    1bae:	mov	r4, r2
    1bb0:	str	r2, [r5, #0]
    1bb2:	b.n	1b02 <_GLOBAL__sub_I_DirPrefix+0xba>
    1bb4:	str	r2, [r5, #0]
    1bb6:	b.n	1aca <_GLOBAL__sub_I_DirPrefix+0x82>
    1bb8:	.word	0x20001484
    1bbc:	.word	0x00000255
    1bc0:	.word	0x200065bc
    1bc4:	.word	0x200073b4
    1bc8:	.word	0x20000a8c
    1bcc:	.word	0x20006410
    1bd0:	.word	0x00000a25
    1bd4:	.word	0x200009c0
    1bd8:	.word	0x200068f0
    1bdc:	.word	0x20000adc
    1be0:	.word	0x20007af8
    1be4:	.word	0x200009d8
    1be8:	.word	0x20007710
    1bec:	.word	0x200076b4
    1bf0:	.word	0x200009e4
    1bf4:	.word	0x200009cc
    1bf8:	.word	0x20007664
    1bfc:	.word	0x0000c8c9
    1c00:	.word	0x20007678
    1c04:	.word	0x2000768c
    1c08:	.word	0x200076a0

00001c0c <_GLOBAL__sub_I__ZN17AudioOutputI2SOct13block_ch1_1stE>:
uint16_t  AudioOutputI2SOct::ch6_offset = 0;
uint16_t  AudioOutputI2SOct::ch7_offset = 0;
uint16_t  AudioOutputI2SOct::ch8_offset = 0;
bool AudioOutputI2SOct::update_responsibility = false;
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES*4];
DMAChannel AudioOutputI2SOct::dma(false);
    1c0c:	ldr	r2, [pc, #8]	; (1c18 <_GLOBAL__sub_I__ZN17AudioOutputI2SOct13block_ch1_1stE+0xc>)
    1c0e:	ldr	r1, [pc, #12]	; (1c1c <_GLOBAL__sub_I__ZN17AudioOutputI2SOct13block_ch1_1stE+0x10>)
    1c10:	ldr	r0, [pc, #12]	; (1c20 <_GLOBAL__sub_I__ZN17AudioOutputI2SOct13block_ch1_1stE+0x14>)
    1c12:	b.w	d224 <__aeabi_atexit>
    1c16:	nop
    1c18:	.word	0x20001484
    1c1c:	.word	0x00000255
    1c20:	.word	0x2000657c

00001c24 <__tcf_0>:

extern uint8_t analog_write_res;
extern const struct _pwm_pin_info_struct pwm_pin_info[];
volatile audio_block_t * AudioOutputPWM::block = NULL;
DMAMEM __attribute__((aligned(32))) static uint16_t pwm_tx_buffer[2][AUDIO_BLOCK_SAMPLES * 2];
DMAChannel AudioOutputPWM::dma[2];
    1c24:	push	{r4, lr}
		release();
    1c26:	ldr	r4, [pc, #20]	; (1c3c <__tcf_0+0x18>)
    1c28:	add.w	r0, r4, #8
    1c2c:	bl	c364 <DMAChannel::release()>
    1c30:	mov	r0, r4
    1c32:	ldmia.w	sp!, {r4, lr}
    1c36:	b.w	c364 <DMAChannel::release()>
    1c3a:	nop
    1c3c:	.word	0x200064dc

00001c40 <_GLOBAL__sub_I__ZN14AudioOutputPWM21update_responsibilityE>:
	old_block = (audio_block_t*)block ;  // block is defined as volatile
	block = new_block ;
	__enable_irq();
	if (old_block)
		release (old_block);
}
    1c40:	push	{r4, lr}
		begin();
    1c42:	ldr	r4, [pc, #32]	; (1c64 <_GLOBAL__sub_I__ZN14AudioOutputPWM21update_responsibilityE+0x24>)
    1c44:	movs	r1, #0
    1c46:	mov	r0, r4
    1c48:	bl	c2b0 <DMAChannel::begin(bool)>
    1c4c:	add.w	r0, r4, #8
    1c50:	movs	r1, #0
    1c52:	bl	c2b0 <DMAChannel::begin(bool)>
DMAChannel AudioOutputPWM::dma[2];
    1c56:	ldr	r2, [pc, #16]	; (1c68 <_GLOBAL__sub_I__ZN14AudioOutputPWM21update_responsibilityE+0x28>)
    1c58:	ldr	r1, [pc, #16]	; (1c6c <_GLOBAL__sub_I__ZN14AudioOutputPWM21update_responsibilityE+0x2c>)
    1c5a:	movs	r0, #0
}
    1c5c:	ldmia.w	sp!, {r4, lr}
DMAChannel AudioOutputPWM::dma[2];
    1c60:	b.w	d224 <__aeabi_atexit>
    1c64:	.word	0x200064dc
    1c68:	.word	0x20001484
    1c6c:	.word	0x00001c25

00001c70 <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE>:
DMAChannel AudioInputI2S::dma(false);
    1c70:	ldr	r2, [pc, #8]	; (1c7c <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE+0xc>)
    1c72:	ldr	r1, [pc, #12]	; (1c80 <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE+0x10>)
    1c74:	ldr	r0, [pc, #12]	; (1c84 <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE+0x14>)
    1c76:	b.w	d224 <__aeabi_atexit>
    1c7a:	nop
    1c7c:	.word	0x20001484
    1c80:	.word	0x00000255
    1c84:	.word	0x2000648c

00001c88 <_GLOBAL__sub_I__ZN19AudioOutputPT8211_214block_left_1stE>:
DMAChannel AudioOutputPT8211_2::dma(false);
    1c88:	ldr	r2, [pc, #8]	; (1c94 <_GLOBAL__sub_I__ZN19AudioOutputPT8211_214block_left_1stE+0xc>)
    1c8a:	ldr	r1, [pc, #12]	; (1c98 <_GLOBAL__sub_I__ZN19AudioOutputPT8211_214block_left_1stE+0x10>)
    1c8c:	ldr	r0, [pc, #12]	; (1c9c <_GLOBAL__sub_I__ZN19AudioOutputPT8211_214block_left_1stE+0x14>)
    1c8e:	b.w	d224 <__aeabi_atexit>
    1c92:	nop
    1c94:	.word	0x20001484
    1c98:	.word	0x00000255
    1c9c:	.word	0x200065a4

00001ca0 <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE>:
#if defined(AUDIO_PT8211_OVERSAMPLING)
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES*4];
#else
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES];
#endif
DMAChannel AudioOutputPT8211::dma(false);
    1ca0:	ldr	r2, [pc, #8]	; (1cac <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE+0xc>)
    1ca2:	ldr	r1, [pc, #12]	; (1cb0 <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE+0x10>)
    1ca4:	ldr	r0, [pc, #12]	; (1cb4 <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE+0x14>)
    1ca6:	b.w	d224 <__aeabi_atexit>
    1caa:	nop
    1cac:	.word	0x20001484
    1cb0:	.word	0x00000255
    1cb4:	.word	0x20006584

00001cb8 <_GLOBAL__sub_I__ZN16AudioInputSPDIF310block_leftE>:
static uint32_t spdif_rx_buffer[AUDIO_BLOCK_SAMPLES * 4];
audio_block_t * AudioInputSPDIF3::block_left = NULL;
audio_block_t * AudioInputSPDIF3::block_right = NULL;
uint16_t AudioInputSPDIF3::block_offset = 0;
bool AudioInputSPDIF3::update_responsibility = false;
DMAChannel AudioInputSPDIF3::dma(false);
    1cb8:	ldr	r2, [pc, #8]	; (1cc4 <_GLOBAL__sub_I__ZN16AudioInputSPDIF310block_leftE+0xc>)
    1cba:	ldr	r1, [pc, #12]	; (1cc8 <_GLOBAL__sub_I__ZN16AudioInputSPDIF310block_leftE+0x10>)
    1cbc:	ldr	r0, [pc, #12]	; (1ccc <_GLOBAL__sub_I__ZN16AudioInputSPDIF310block_leftE+0x14>)
    1cbe:	b.w	d224 <__aeabi_atexit>
    1cc2:	nop
    1cc4:	.word	0x20001484
    1cc8:	.word	0x00000255
    1ccc:	.word	0x2000655c

00001cd0 <_GLOBAL__sub_I__ZN14AudioInputTDM214block_incomingE>:
DMAChannel AudioInputTDM2::dma(false);
    1cd0:	ldr	r2, [pc, #8]	; (1cdc <_GLOBAL__sub_I__ZN14AudioInputTDM214block_incomingE+0xc>)
    1cd2:	ldr	r1, [pc, #12]	; (1ce0 <_GLOBAL__sub_I__ZN14AudioInputTDM214block_incomingE+0x10>)
    1cd4:	ldr	r0, [pc, #12]	; (1ce4 <_GLOBAL__sub_I__ZN14AudioInputTDM214block_incomingE+0x14>)
    1cd6:	b.w	d224 <__aeabi_atexit>
    1cda:	nop
    1cdc:	.word	0x20001484
    1ce0:	.word	0x00000255
    1ce4:	.word	0x200064c4

00001ce8 <_GLOBAL__sub_I__ZN16AudioInputAnalog3dmaE>:
#include <Arduino.h>
#include "input_adc.h"

extern "C" void xbar_connect(unsigned int input, unsigned int output);

DMAChannel AudioInputAnalog::dma(false);
    1ce8:	ldr	r2, [pc, #8]	; (1cf4 <_GLOBAL__sub_I__ZN16AudioInputAnalog3dmaE+0xc>)
    1cea:	ldr	r1, [pc, #12]	; (1cf8 <_GLOBAL__sub_I__ZN16AudioInputAnalog3dmaE+0x10>)
    1cec:	ldr	r0, [pc, #12]	; (1cfc <_GLOBAL__sub_I__ZN16AudioInputAnalog3dmaE+0x14>)
    1cee:	b.w	d224 <__aeabi_atexit>
    1cf2:	nop
    1cf4:	.word	0x20001484
    1cf8:	.word	0x00000255
    1cfc:	.word	0x20006544

00001d00 <_GLOBAL__sub_I__ZN14AudioInputPDM210block_leftE>:

DMAMEM __attribute__((aligned(32))) static uint32_t pdm_buffer[AUDIO_BLOCK_SAMPLES*4];
static uint32_t leftover[14];
audio_block_t * AudioInputPDM2::block_left = NULL;
bool AudioInputPDM2::update_responsibility = false;
DMAChannel AudioInputPDM2::dma(false);
    1d00:	ldr	r2, [pc, #8]	; (1d0c <_GLOBAL__sub_I__ZN14AudioInputPDM210block_leftE+0xc>)
    1d02:	ldr	r1, [pc, #12]	; (1d10 <_GLOBAL__sub_I__ZN14AudioInputPDM210block_leftE+0x10>)
    1d04:	ldr	r0, [pc, #12]	; (1d14 <_GLOBAL__sub_I__ZN14AudioInputPDM210block_leftE+0x14>)
    1d06:	b.w	d224 <__aeabi_atexit>
    1d0a:	nop
    1d0c:	.word	0x20001484
    1d10:	.word	0x00000255
    1d14:	.word	0x200064bc

00001d18 <_GLOBAL__sub_I__ZN14AudioInputI2S210block_leftE>:
DMAMEM __attribute__((aligned(32))) static uint32_t i2s2_rx_buffer[AUDIO_BLOCK_SAMPLES];
audio_block_t * AudioInputI2S2::block_left = NULL;
audio_block_t * AudioInputI2S2::block_right = NULL;
uint16_t AudioInputI2S2::block_offset = 0;
bool AudioInputI2S2::update_responsibility = false;
DMAChannel AudioInputI2S2::dma(false);
    1d18:	ldr	r2, [pc, #8]	; (1d24 <_GLOBAL__sub_I__ZN14AudioInputI2S210block_leftE+0xc>)
    1d1a:	ldr	r1, [pc, #12]	; (1d28 <_GLOBAL__sub_I__ZN14AudioInputI2S210block_leftE+0x10>)
    1d1c:	ldr	r0, [pc, #12]	; (1d2c <_GLOBAL__sub_I__ZN14AudioInputI2S210block_leftE+0x14>)
    1d1e:	b.w	d224 <__aeabi_atexit>
    1d22:	nop
    1d24:	.word	0x20001484
    1d28:	.word	0x00000255
    1d2c:	.word	0x200064b4

00001d30 <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E>:
audio_block_t * AudioInputI2SQuad::block_ch2 = NULL;
audio_block_t * AudioInputI2SQuad::block_ch3 = NULL;
audio_block_t * AudioInputI2SQuad::block_ch4 = NULL;
uint16_t AudioInputI2SQuad::block_offset = 0;
bool AudioInputI2SQuad::update_responsibility = false;
DMAChannel AudioInputI2SQuad::dma(false);
    1d30:	ldr	r2, [pc, #8]	; (1d3c <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E+0xc>)
    1d32:	ldr	r1, [pc, #12]	; (1d40 <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E+0x10>)
    1d34:	ldr	r0, [pc, #12]	; (1d44 <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E+0x14>)
    1d36:	b.w	d224 <__aeabi_atexit>
    1d3a:	nop
    1d3c:	.word	0x20001484
    1d40:	.word	0x00000255
    1d44:	.word	0x2000656c

00001d48 <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE>:
uint16_t  AudioOutputI2SQuad::ch2_offset = 0;
uint16_t  AudioOutputI2SQuad::ch3_offset = 0;
uint16_t  AudioOutputI2SQuad::ch4_offset = 0;
bool AudioOutputI2SQuad::update_responsibility = false;
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES*2];
DMAChannel AudioOutputI2SQuad::dma(false);
    1d48:	ldr	r2, [pc, #8]	; (1d54 <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE+0xc>)
    1d4a:	ldr	r1, [pc, #12]	; (1d58 <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE+0x10>)
    1d4c:	ldr	r0, [pc, #12]	; (1d5c <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE+0x14>)
    1d4e:	b.w	d224 <__aeabi_atexit>
    1d52:	nop
    1d54:	.word	0x20001484
    1d58:	.word	0x00000255
    1d5c:	.word	0x2000659c

00001d60 <SPIClass::beginTransaction(SPISettings)>:
	void notUsingInterrupt(IRQ_NUMBER_t interruptName);

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
    1d60:	push	{r4, r5}
    1d62:	sub	sp, #8
    1d64:	mov	r4, r1
    1d66:	add	r3, sp, #8
    1d68:	stmdb	r3, {r1, r2}
		if (interruptMasksUsed) {
    1d6c:	ldrb	r3, [r0, #19]
    1d6e:	cmp	r3, #0
    1d70:	beq.n	1dd4 <SPIClass::beginTransaction(SPISettings)+0x74>
			__disable_irq();
    1d72:	cpsid	i
			if (interruptMasksUsed & 0x01) {
    1d74:	ldrb	r3, [r0, #19]
    1d76:	lsls	r2, r3, #31
    1d78:	bpl.n	1d8c <SPIClass::beginTransaction(SPISettings)+0x2c>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    1d7a:	mov.w	r1, #3758153728	; 0xe000e000
    1d7e:	ldr	r5, [r0, #20]
    1d80:	ldr.w	r2, [r1, #384]	; 0x180
    1d84:	ands	r2, r5
    1d86:	str	r2, [r0, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    1d88:	str.w	r2, [r1, #384]	; 0x180
			}
			if (interruptMasksUsed & 0x02) {
    1d8c:	lsls	r5, r3, #30
    1d8e:	bpl.n	1da2 <SPIClass::beginTransaction(SPISettings)+0x42>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    1d90:	mov.w	r1, #3758153728	; 0xe000e000
    1d94:	ldr	r5, [r0, #24]
    1d96:	ldr.w	r2, [r1, #388]	; 0x184
    1d9a:	ands	r2, r5
    1d9c:	str	r2, [r0, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    1d9e:	str.w	r2, [r1, #388]	; 0x184
			}
			if (interruptMasksUsed & 0x04) {
    1da2:	lsls	r1, r3, #29
    1da4:	bpl.n	1db8 <SPIClass::beginTransaction(SPISettings)+0x58>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    1da6:	mov.w	r1, #3758153728	; 0xe000e000
    1daa:	ldr	r5, [r0, #28]
    1dac:	ldr.w	r2, [r1, #392]	; 0x188
    1db0:	ands	r2, r5
    1db2:	str	r2, [r0, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    1db4:	str.w	r2, [r1, #392]	; 0x188
			}
			if (interruptMasksUsed & 0x08) {
    1db8:	lsls	r2, r3, #28
    1dba:	bpl.n	1dce <SPIClass::beginTransaction(SPISettings)+0x6e>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    1dbc:	mov.w	r1, #3758153728	; 0xe000e000
    1dc0:	ldr	r5, [r0, #32]
    1dc2:	ldr.w	r2, [r1, #396]	; 0x18c
    1dc6:	ands	r2, r5
    1dc8:	str	r2, [r0, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    1dca:	str.w	r2, [r1, #396]	; 0x18c
			}
			if (interruptMasksUsed & 0x10) {
    1dce:	lsls	r3, r3, #27
    1dd0:	bmi.n	1e32 <SPIClass::beginTransaction(SPISettings)+0xd2>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
				NVIC_ICER4 = interruptSave[4];
			}
			__enable_irq();
    1dd2:	cpsie	i
		}
		inTransactionFlag = 1;
		#endif

		//printf("trans\n");
		if (settings.clock() != _clock) {
    1dd4:	ldr	r3, [r0, #8]
    1dd6:	cmp	r4, r3
    1dd8:	beq.n	1e46 <SPIClass::beginTransaction(SPISettings)+0xe6>
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
    1dda:	ldr	r3, [pc, #136]	; (1e64 <SPIClass::beginTransaction(SPISettings)+0x104>)
		    _clock = settings.clock();
    1ddc:	str	r4, [r0, #8]
			uint32_t cbcmr = CCM_CBCMR;
    1dde:	ldr	r3, [r3, #24]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    1de0:	ldr	r2, [pc, #132]	; (1e68 <SPIClass::beginTransaction(SPISettings)+0x108>)
    1de2:	ubfx	r1, r3, #4, #2
    1de6:	ubfx	r3, r3, #26, #3
    1dea:	ldr.w	r1, [r2, r1, lsl #2]
    1dee:	adds	r3, #1
    1df0:	udiv	r2, r1, r3
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    1df4:	cbz	r4, 1e2a <SPIClass::beginTransaction(SPISettings)+0xca>

			if (d && clkhz/d > _clock) d++;
    1df6:	cmp	r4, r2
    1df8:	bhi.n	1e4a <SPIClass::beginTransaction(SPISettings)+0xea>
			d = _clock ? clkhz/_clock : clkhz;
    1dfa:	udiv	r3, r2, r4
			if (d && clkhz/d > _clock) d++;
    1dfe:	udiv	r2, r2, r3
    1e02:	cmp	r4, r2
    1e04:	bcc.n	1e60 <SPIClass::beginTransaction(SPISettings)+0x100>
			if (d > 257) d= 257;  // max div
    1e06:	cmp.w	r3, #258	; 0x102
    1e0a:	bcc.n	1e4e <SPIClass::beginTransaction(SPISettings)+0xee>
    1e0c:	ldr	r4, [pc, #92]	; (1e6c <SPIClass::beginTransaction(SPISettings)+0x10c>)
				div = d-2;
			} else {
				div =0;
			}
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    1e0e:	str	r4, [r0, #12]
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    1e10:	ldr	r3, [r0, #0]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    1e12:	movs	r2, #3
		port().CR = 0;
    1e14:	movs	r0, #0
		port().TCR = settings.tcr;
    1e16:	ldr	r1, [sp, #4]
		port().CR = 0;
    1e18:	str	r0, [r3, #16]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    1e1a:	str	r2, [r3, #36]	; 0x24
		port().CR = LPSPI_CR_MEN;
    1e1c:	movs	r2, #1
		port().CCR = _ccr;
    1e1e:	str	r4, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
    1e20:	str	r1, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    1e22:	str	r2, [r3, #16]
	}
    1e24:	add	sp, #8
    1e26:	pop	{r4, r5}
    1e28:	bx	lr
			if (d && clkhz/d > _clock) d++;
    1e2a:	cmp	r1, r3
    1e2c:	bcc.n	1e0e <SPIClass::beginTransaction(SPISettings)+0xae>
    1e2e:	adds	r3, r2, #1
    1e30:	b.n	1e06 <SPIClass::beginTransaction(SPISettings)+0xa6>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    1e32:	mov.w	r2, #3758153728	; 0xe000e000
    1e36:	ldr	r1, [r0, #36]	; 0x24
    1e38:	ldr.w	r3, [r2, #400]	; 0x190
    1e3c:	ands	r3, r1
    1e3e:	str	r3, [r0, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    1e40:	str.w	r3, [r2, #400]	; 0x190
    1e44:	b.n	1dd2 <SPIClass::beginTransaction(SPISettings)+0x72>
		port().CCR = _ccr;
    1e46:	ldr	r4, [r0, #12]
    1e48:	b.n	1e10 <SPIClass::beginTransaction(SPISettings)+0xb0>
    1e4a:	movs	r4, #0
    1e4c:	b.n	1e0e <SPIClass::beginTransaction(SPISettings)+0xae>
			if (d > 2) {
    1e4e:	cmp	r3, #2
    1e50:	bls.n	1e4a <SPIClass::beginTransaction(SPISettings)+0xea>
				div = d-2;
    1e52:	subs	r3, #2
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    1e54:	lsrs	r2, r3, #1
    1e56:	lsls	r4, r2, #8
    1e58:	orr.w	r4, r4, r2, lsl #16
    1e5c:	orrs	r4, r3
    1e5e:	b.n	1e0e <SPIClass::beginTransaction(SPISettings)+0xae>
			d = _clock ? clkhz/_clock : clkhz;
    1e60:	mov	r2, r3
    1e62:	b.n	1e2e <SPIClass::beginTransaction(SPISettings)+0xce>
    1e64:	.word	0x400fc000
    1e68:	.word	0x20000c28
    1e6c:	.word	0x007f7fff

00001e70 <_GLOBAL__sub_I__ZN15AudioOutputTDM211block_inputE>:
audio_block_t * AudioOutputTDM2::block_input[16] = {
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr,
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr
};
bool AudioOutputTDM2::update_responsibility = false;
DMAChannel AudioOutputTDM2::dma(false);
    1e70:	ldr	r2, [pc, #8]	; (1e7c <_GLOBAL__sub_I__ZN15AudioOutputTDM211block_inputE+0xc>)
    1e72:	ldr	r1, [pc, #12]	; (1e80 <_GLOBAL__sub_I__ZN15AudioOutputTDM211block_inputE+0x10>)
    1e74:	ldr	r0, [pc, #12]	; (1e84 <_GLOBAL__sub_I__ZN15AudioOutputTDM211block_inputE+0x14>)
    1e76:	b.w	d224 <__aeabi_atexit>
    1e7a:	nop
    1e7c:	.word	0x20001484
    1e80:	.word	0x00000255
    1e84:	.word	0x2000653c

00001e88 <_GLOBAL__sub_I__ZN15AudioOutputI2S214block_left_1stE>:
audio_block_t * AudioOutputI2S2::block_left_2nd = NULL;
audio_block_t * AudioOutputI2S2::block_right_2nd = NULL;
uint16_t  AudioOutputI2S2::block_left_offset = 0;
uint16_t  AudioOutputI2S2::block_right_offset = 0;
bool AudioOutputI2S2::update_responsibility = false;
DMAChannel AudioOutputI2S2::dma(false);
    1e88:	ldr	r2, [pc, #8]	; (1e94 <_GLOBAL__sub_I__ZN15AudioOutputI2S214block_left_1stE+0xc>)
    1e8a:	ldr	r1, [pc, #12]	; (1e98 <_GLOBAL__sub_I__ZN15AudioOutputI2S214block_left_1stE+0x10>)
    1e8c:	ldr	r0, [pc, #12]	; (1e9c <_GLOBAL__sub_I__ZN15AudioOutputI2S214block_left_1stE+0x14>)
    1e8e:	b.w	d224 <__aeabi_atexit>
    1e92:	nop
    1e94:	.word	0x20001484
    1e98:	.word	0x00000255
    1e9c:	.word	0x20006534

00001ea0 <_GLOBAL__sub_I__ZN17AudioOutputI2SHex13block_ch1_1stE>:
uint16_t  AudioOutputI2SHex::ch4_offset = 0;
uint16_t  AudioOutputI2SHex::ch5_offset = 0;
uint16_t  AudioOutputI2SHex::ch6_offset = 0;
bool AudioOutputI2SHex::update_responsibility = false;
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES*3];
DMAChannel AudioOutputI2SHex::dma(false);
    1ea0:	ldr	r2, [pc, #8]	; (1eac <_GLOBAL__sub_I__ZN17AudioOutputI2SHex13block_ch1_1stE+0xc>)
    1ea2:	ldr	r1, [pc, #12]	; (1eb0 <_GLOBAL__sub_I__ZN17AudioOutputI2SHex13block_ch1_1stE+0x10>)
    1ea4:	ldr	r0, [pc, #12]	; (1eb4 <_GLOBAL__sub_I__ZN17AudioOutputI2SHex13block_ch1_1stE+0x14>)
    1ea6:	b.w	d224 <__aeabi_atexit>
    1eaa:	nop
    1eac:	.word	0x20001484
    1eb0:	.word	0x00000255
    1eb4:	.word	0x20006574

00001eb8 <_GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E>:
audio_block_t * AudioInputI2SOct::block_ch6 = NULL;
audio_block_t * AudioInputI2SOct::block_ch7 = NULL;
audio_block_t * AudioInputI2SOct::block_ch8 = NULL;
uint16_t AudioInputI2SOct::block_offset = 0;
bool AudioInputI2SOct::update_responsibility = false;
DMAChannel AudioInputI2SOct::dma(false);
    1eb8:	ldr	r2, [pc, #8]	; (1ec4 <_GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E+0xc>)
    1eba:	ldr	r1, [pc, #12]	; (1ec8 <_GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E+0x10>)
    1ebc:	ldr	r0, [pc, #12]	; (1ecc <_GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E+0x14>)
    1ebe:	b.w	d224 <__aeabi_atexit>
    1ec2:	nop
    1ec4:	.word	0x20001484
    1ec8:	.word	0x00000255
    1ecc:	.word	0x20006554

00001ed0 <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE>:
audio_block_t * AudioOutputTDM::block_input[16] = {
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr,
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr
};
bool AudioOutputTDM::update_responsibility = false;
DMAChannel AudioOutputTDM::dma(false);
    1ed0:	ldr	r2, [pc, #8]	; (1edc <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE+0xc>)
    1ed2:	ldr	r1, [pc, #12]	; (1ee0 <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE+0x10>)
    1ed4:	ldr	r0, [pc, #12]	; (1ee4 <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE+0x14>)
    1ed6:	b.w	d224 <__aeabi_atexit>
    1eda:	nop
    1edc:	.word	0x20001484
    1ee0:	.word	0x00000255
    1ee4:	.word	0x200064ec

00001ee8 <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE>:
DMAChannel AudioInputTDM::dma(false);
    1ee8:	ldr	r2, [pc, #8]	; (1ef4 <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE+0xc>)
    1eea:	ldr	r1, [pc, #12]	; (1ef8 <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE+0x10>)
    1eec:	ldr	r0, [pc, #12]	; (1efc <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE+0x14>)
    1eee:	b.w	d224 <__aeabi_atexit>
    1ef2:	nop
    1ef4:	.word	0x20001484
    1ef8:	.word	0x00000255
    1efc:	.word	0x2000649c

00001f00 <_GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E>:
audio_block_t * AudioInputI2SHex::block_ch4 = NULL;
audio_block_t * AudioInputI2SHex::block_ch5 = NULL;
audio_block_t * AudioInputI2SHex::block_ch6 = NULL;
uint16_t AudioInputI2SHex::block_offset = 0;
bool AudioInputI2SHex::update_responsibility = false;
DMAChannel AudioInputI2SHex::dma(false);
    1f00:	ldr	r2, [pc, #8]	; (1f0c <_GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E+0xc>)
    1f02:	ldr	r1, [pc, #12]	; (1f10 <_GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E+0x10>)
    1f04:	ldr	r0, [pc, #12]	; (1f14 <_GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E+0x14>)
    1f06:	b.w	d224 <__aeabi_atexit>
    1f0a:	nop
    1f0c:	.word	0x20001484
    1f10:	.word	0x00000255
    1f14:	.word	0x2000654c

00001f18 <_GLOBAL__sub_I__ZN17AudioOutputSPDIF314block_left_1stE>:
audio_block_t * AudioOutputSPDIF3::block_left_1st = nullptr;
audio_block_t * AudioOutputSPDIF3::block_right_1st = nullptr;
audio_block_t * AudioOutputSPDIF3::block_left_2nd = nullptr;
audio_block_t * AudioOutputSPDIF3::block_right_2nd = nullptr;
bool AudioOutputSPDIF3::update_responsibility = false;
DMAChannel AudioOutputSPDIF3::dma(false);
    1f18:	ldr	r2, [pc, #8]	; (1f24 <_GLOBAL__sub_I__ZN17AudioOutputSPDIF314block_left_1stE+0xc>)
    1f1a:	ldr	r1, [pc, #12]	; (1f28 <_GLOBAL__sub_I__ZN17AudioOutputSPDIF314block_left_1stE+0x10>)
    1f1c:	ldr	r0, [pc, #12]	; (1f2c <_GLOBAL__sub_I__ZN17AudioOutputSPDIF314block_left_1stE+0x14>)
    1f1e:	b.w	d224 <__aeabi_atexit>
    1f22:	nop
    1f24:	.word	0x20001484
    1f28:	.word	0x00000255
    1f2c:	.word	0x20006594

00001f30 <_GLOBAL__sub_I__ZN14AudioOutputMQS14block_left_1stE>:
audio_block_t * AudioOutputMQS::block_left_2nd = NULL;
audio_block_t * AudioOutputMQS::block_right_2nd = NULL;
uint16_t  AudioOutputMQS::block_left_offset = 0;
uint16_t  AudioOutputMQS::block_right_offset = 0;
bool AudioOutputMQS::update_responsibility = false;
DMAChannel AudioOutputMQS::dma(false);
    1f30:	ldr	r2, [pc, #8]	; (1f3c <_GLOBAL__sub_I__ZN14AudioOutputMQS14block_left_1stE+0xc>)
    1f32:	ldr	r1, [pc, #12]	; (1f40 <_GLOBAL__sub_I__ZN14AudioOutputMQS14block_left_1stE+0x10>)
    1f34:	ldr	r0, [pc, #12]	; (1f44 <_GLOBAL__sub_I__ZN14AudioOutputMQS14block_left_1stE+0x14>)
    1f36:	b.w	d224 <__aeabi_atexit>
    1f3a:	nop
    1f3c:	.word	0x20001484
    1f40:	.word	0x00000255
    1f44:	.word	0x200064d4

00001f48 <AudioRecordQueue::update()>:
	release(userblock);
	userblock = NULL;
}

void AudioRecordQueue::update(void)
{
    1f48:	push	{r4, lr}
	audio_block_t *block;
	uint32_t h;

	block = receiveReadOnly();
    1f4a:	movs	r1, #0
{
    1f4c:	mov	r4, r0
	block = receiveReadOnly();
    1f4e:	bl	c6dc <AudioStream::receiveReadOnly(unsigned int)>
	if (!block) return;
    1f52:	cbz	r0, 1f7c <AudioRecordQueue::update()+0x34>
	if (!enabled) {
    1f54:	ldrb.w	r3, [r4, #870]	; 0x366
    1f58:	cbz	r3, 1f7e <AudioRecordQueue::update()+0x36>
		release(block);
		return;
	}
	h = head + 1;
    1f5a:	ldrb.w	r3, [r4, #868]	; 0x364
	if (h >= max_buffers) h = 0;
	if (h == tail) {
    1f5e:	ldrb.w	r1, [r4, #869]	; 0x365
	h = head + 1;
    1f62:	adds	r3, #1
	if (h >= max_buffers) h = 0;
    1f64:	cmp	r3, #209	; 0xd1
    1f66:	it	ge
    1f68:	movge	r3, #0
	if (h == tail) {
    1f6a:	cmp	r1, r3
    1f6c:	beq.n	1f7e <AudioRecordQueue::update()+0x36>
		release(block);
	} else {
		queue[h] = block;
    1f6e:	adds	r1, r3, #6
		head = h;
    1f70:	uxtb	r3, r3
		queue[h] = block;
    1f72:	add.w	r1, r4, r1, lsl #2
    1f76:	str	r0, [r1, #4]
		head = h;
    1f78:	strb.w	r3, [r4, #868]	; 0x364
	}
}
    1f7c:	pop	{r4, pc}
    1f7e:	ldmia.w	sp!, {r4, lr}
		release(block);
    1f82:	b.w	c644 <AudioStream::release(audio_block_struct*)>
    1f86:	nop

00001f88 <AudioRecordQueue::available()>:
	h = head;
    1f88:	ldrb.w	r1, [r0, #868]	; 0x364
	t = tail;
    1f8c:	ldrb.w	r2, [r0, #869]	; 0x365
	h = head;
    1f90:	uxtb	r3, r1
	if (h >= t) return h - t;
    1f92:	cmp	r1, r2
	t = tail;
    1f94:	uxtb	r0, r2
	return max_buffers + h - t;
    1f96:	it	cc
    1f98:	addcc	r3, #209	; 0xd1
    1f9a:	subs	r0, r3, r0
}
    1f9c:	bx	lr
    1f9e:	nop

00001fa0 <AudioRecordQueue::clear()>:
{
    1fa0:	push	{r3, r4, r5, lr}
    1fa2:	mov	r5, r0
	if (userblock) {
    1fa4:	ldr.w	r0, [r0, #864]	; 0x360
    1fa8:	cbz	r0, 1fb4 <AudioRecordQueue::clear()+0x14>
		release(userblock);
    1faa:	bl	c644 <AudioStream::release(audio_block_struct*)>
		userblock = NULL;
    1fae:	movs	r3, #0
    1fb0:	str.w	r3, [r5, #864]	; 0x360
	t = tail;
    1fb4:	ldrb.w	r2, [r5, #869]	; 0x365
	while (t != head) {
    1fb8:	ldrb.w	r3, [r5, #868]	; 0x364
	t = tail;
    1fbc:	uxtb	r4, r2
	while (t != head) {
    1fbe:	cmp	r2, r3
    1fc0:	uxtb	r1, r3
    1fc2:	beq.n	1fe2 <AudioRecordQueue::clear()+0x42>
		if (++t >= max_buffers) t = 0;
    1fc4:	adds	r4, #1
    1fc6:	cmp	r4, #209	; 0xd1
    1fc8:	it	cs
    1fca:	movcs	r4, #0
		release(queue[t]);
    1fcc:	adds	r3, r4, #6
    1fce:	add.w	r3, r5, r3, lsl #2
    1fd2:	ldr	r0, [r3, #4]
    1fd4:	bl	c644 <AudioStream::release(audio_block_struct*)>
	while (t != head) {
    1fd8:	ldrb.w	r3, [r5, #868]	; 0x364
    1fdc:	cmp	r3, r4
    1fde:	bne.n	1fc4 <AudioRecordQueue::clear()+0x24>
	tail = t;
    1fe0:	uxtb	r1, r4
    1fe2:	strb.w	r1, [r5, #869]	; 0x365
}
    1fe6:	pop	{r3, r4, r5, pc}

00001fe8 <AudioRecordQueue::readBuffer()>:
	if (userblock) return NULL;
    1fe8:	ldr.w	r2, [r0, #864]	; 0x360
    1fec:	cbnz	r2, 201c <AudioRecordQueue::readBuffer()+0x34>
	t = tail;
    1fee:	ldrb.w	r1, [r0, #869]	; 0x365
	if (t == head) return NULL;
    1ff2:	ldrb.w	ip, [r0, #868]	; 0x364
	t = tail;
    1ff6:	uxtb	r3, r1
	if (t == head) return NULL;
    1ff8:	cmp	r1, ip
    1ffa:	beq.n	2018 <AudioRecordQueue::readBuffer()+0x30>
	if (++t >= max_buffers) t = 0;
    1ffc:	adds	r3, #1
    1ffe:	cmp	r3, #208	; 0xd0
    2000:	ite	hi
    2002:	movhi	r3, r2
	tail = t;
    2004:	uxtbls	r2, r3
	userblock = queue[t];
    2006:	adds	r3, #6
    2008:	add.w	r3, r0, r3, lsl #2
    200c:	ldr	r3, [r3, #4]
	tail = t;
    200e:	strb.w	r2, [r0, #869]	; 0x365
	return userblock->data;
    2012:	adds	r2, r3, #4
	userblock = queue[t];
    2014:	str.w	r3, [r0, #864]	; 0x360
}
    2018:	mov	r0, r2
    201a:	bx	lr
	if (userblock) return NULL;
    201c:	movs	r2, #0
}
    201e:	mov	r0, r2
    2020:	bx	lr
    2022:	nop

00002024 <AudioRecordQueue::freeBuffer()>:
{
    2024:	push	{r4, lr}
    2026:	mov	r4, r0
	if (userblock == NULL) return;
    2028:	ldr.w	r0, [r0, #864]	; 0x360
    202c:	cbz	r0, 2038 <AudioRecordQueue::freeBuffer()+0x14>
	release(userblock);
    202e:	bl	c644 <AudioStream::release(audio_block_struct*)>
	userblock = NULL;
    2032:	movs	r3, #0
    2034:	str.w	r3, [r4, #864]	; 0x360
}
    2038:	pop	{r4, pc}
    203a:	nop

0000203c <_GLOBAL__sub_I__ZN21AsyncAudioInputSPDIF310microsLastE>:
static float bufferL[bufferLength];

volatile int32_t AsyncAudioInputSPDIF3::buffer_offset = 0;	// read by resample/ written in spdif input isr -> copied at the beginning of 'resmaple' protected by __disable_irq() in resample
int32_t AsyncAudioInputSPDIF3::resample_offset = 0; // read/written by resample/ read in spdif input isr -> no protection needed?

DMAChannel AsyncAudioInputSPDIF3::dma(false);
    203c:	ldr	r2, [pc, #8]	; (2048 <_GLOBAL__sub_I__ZN21AsyncAudioInputSPDIF310microsLastE+0xc>)
    203e:	ldr	r1, [pc, #12]	; (204c <_GLOBAL__sub_I__ZN21AsyncAudioInputSPDIF310microsLastE+0x10>)
    2040:	ldr	r0, [pc, #12]	; (2050 <_GLOBAL__sub_I__ZN21AsyncAudioInputSPDIF310microsLastE+0x14>)
    2042:	b.w	d224 <__aeabi_atexit>
    2046:	nop
    2048:	.word	0x20001484
    204c:	.word	0x00000255
    2050:	.word	0x200065ac

00002054 <_GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE>:
#if defined(__IMXRT1062__) || defined(KINETISK)
DMAMEM __attribute__((aligned(32))) static uint32_t pdm_buffer[AUDIO_BLOCK_SAMPLES*4];
static uint32_t leftover[14];
audio_block_t * AudioInputPDM::block_left = NULL;
bool AudioInputPDM::update_responsibility = false;
DMAChannel AudioInputPDM::dma(false);
    2054:	ldr	r2, [pc, #8]	; (2060 <_GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE+0xc>)
    2056:	ldr	r1, [pc, #12]	; (2064 <_GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE+0x10>)
    2058:	ldr	r0, [pc, #12]	; (2068 <_GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE+0x14>)
    205a:	b.w	d224 <__aeabi_atexit>
    205e:	nop
    2060:	.word	0x20001484
    2064:	.word	0x00000255
    2068:	.word	0x20006494

0000206c <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE>:
audio_block_t * AudioOutputI2S::block_left_2nd = NULL;
audio_block_t * AudioOutputI2S::block_right_2nd = NULL;
uint16_t  AudioOutputI2S::block_left_offset = 0;
uint16_t  AudioOutputI2S::block_right_offset = 0;
bool AudioOutputI2S::update_responsibility = false;
DMAChannel AudioOutputI2S::dma(false);
    206c:	ldr	r2, [pc, #8]	; (2078 <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE+0xc>)
    206e:	ldr	r1, [pc, #12]	; (207c <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE+0x10>)
    2070:	ldr	r0, [pc, #12]	; (2080 <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE+0x14>)
    2072:	b.w	d224 <__aeabi_atexit>
    2076:	nop
    2078:	.word	0x20001484
    207c:	.word	0x00000255
    2080:	.word	0x200064cc

00002084 <_GLOBAL__sub_I__ZN17AudioOutputSPDIF214block_left_1stE>:
audio_block_t * AudioOutputSPDIF2::block_left_2nd = NULL;
audio_block_t * AudioOutputSPDIF2::block_right_2nd = NULL;
uint16_t  AudioOutputSPDIF2::block_left_offset = 0;
uint16_t  AudioOutputSPDIF2::block_right_offset = 0;
bool AudioOutputSPDIF2::update_responsibility = false;
DMAChannel AudioOutputSPDIF2::dma(false);
    2084:	ldr	r2, [pc, #8]	; (2090 <_GLOBAL__sub_I__ZN17AudioOutputSPDIF214block_left_1stE+0xc>)
    2086:	ldr	r1, [pc, #12]	; (2094 <_GLOBAL__sub_I__ZN17AudioOutputSPDIF214block_left_1stE+0x10>)
    2088:	ldr	r0, [pc, #12]	; (2098 <_GLOBAL__sub_I__ZN17AudioOutputSPDIF214block_left_1stE+0x14>)
    208a:	b.w	d224 <__aeabi_atexit>
    208e:	nop
    2090:	.word	0x20001484
    2094:	.word	0x00000255
    2098:	.word	0x2000658c

0000209c <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE>:
audio_block_t * AudioOutputSPDIF::block_left_2nd = NULL;
audio_block_t * AudioOutputSPDIF::block_right_2nd = NULL;
uint16_t  AudioOutputSPDIF::block_left_offset = 0;
uint16_t  AudioOutputSPDIF::block_right_offset = 0;
bool AudioOutputSPDIF::update_responsibility = false;
DMAChannel AudioOutputSPDIF::dma(false);
    209c:	ldr	r2, [pc, #8]	; (20a8 <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE+0xc>)
    209e:	ldr	r1, [pc, #12]	; (20ac <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE+0x10>)
    20a0:	ldr	r0, [pc, #12]	; (20b0 <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE+0x14>)
    20a2:	b.w	d224 <__aeabi_atexit>
    20a6:	nop
    20a8:	.word	0x20001484
    20ac:	.word	0x00000255
    20b0:	.word	0x20006564

000020b4 <breakTime(long long, tmElements_t&)>:
  tm.Second = time % 60;
    20b4:	ldr	r1, [pc, #332]	; (2204 <breakTime(long long, tmElements_t&)+0x150>)
void breakTime(time_t timeInput, tmElements_t &tm){
    20b6:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  tm.Second = time % 60;
    20ba:	umull	r4, r3, r1, r0
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    20be:	movw	sl, #365	; 0x16d
    20c2:	ldr	r7, [pc, #324]	; (2208 <breakTime(long long, tmElements_t&)+0x154>)
  tm.Second = time % 60;
    20c4:	lsrs	r3, r3, #5
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    20c6:	ldr.w	r8, [pc, #336]	; 2218 <breakTime(long long, tmElements_t&)+0x164>
    20ca:	ldr.w	r9, [pc, #336]	; 221c <breakTime(long long, tmElements_t&)+0x168>
  tm.Minute = time % 60;
    20ce:	umull	r4, r1, r1, r3
  tm.Second = time % 60;
    20d2:	rsb	r4, r3, r3, lsl #4
  tm.Minute = time % 60;
    20d6:	lsrs	r1, r1, #5
  tm.Second = time % 60;
    20d8:	sub.w	r0, r0, r4, lsl #2
  tm.Hour = time % 24;
    20dc:	ldr	r4, [pc, #300]	; (220c <breakTime(long long, tmElements_t&)+0x158>)
  tm.Minute = time % 60;
    20de:	rsb	r5, r1, r1, lsl #4
  tm.Hour = time % 24;
    20e2:	umull	r4, lr, r4, r1
  tm.Minute = time % 60;
    20e6:	sub.w	r3, r3, r5, lsl #2
  tm.Second = time % 60;
    20ea:	strb	r0, [r2, #0]
  tm.Hour = time % 24;
    20ec:	mov.w	lr, lr, lsr #4
  tm.Minute = time % 60;
    20f0:	strb	r3, [r2, #1]
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    20f2:	add.w	r4, lr, #4
  tm.Hour = time % 24;
    20f6:	add.w	r0, lr, lr, lsl #1
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    20fa:	ldr	r3, [pc, #276]	; (2210 <breakTime(long long, tmElements_t&)+0x15c>)
  tm.Hour = time % 24;
    20fc:	sub.w	r1, r1, r0, lsl #3
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    2100:	umull	r0, r3, r3, r4
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    2104:	movs	r0, #0
  tm.Hour = time % 24;
    2106:	strb	r1, [r2, #2]
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    2108:	subs	r1, r4, r3
    210a:	add.w	r3, r3, r1, lsr #1
  days = 0;
    210e:	mov	r1, r0
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    2110:	lsrs	r3, r3, #2
    2112:	rsb	r3, r3, r3, lsl #3
    2116:	subs	r4, r4, r3
    2118:	adds	r4, #1
    211a:	strb	r4, [r2, #3]
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    211c:	uxtb	r4, r0
    211e:	movw	ip, #365	; 0x16d
    2122:	addw	r3, r4, #1970	; 0x7b2
    2126:	ands.w	r5, r3, #3
    212a:	mul.w	r6, r7, r3
    212e:	bne.n	2142 <breakTime(long long, tmElements_t&)+0x8e>
    2130:	cmp.w	r8, r6, ror #2
    2134:	mov.w	ip, #366	; 0x16e
    2138:	bcc.n	2142 <breakTime(long long, tmElements_t&)+0x8e>
    213a:	cmp.w	r9, r6, ror #4
    213e:	it	cc
    2140:	movcc	ip, sl
    2142:	add	r1, ip
    2144:	adds	r0, #1
    2146:	cmp	lr, r1
    2148:	bcs.n	211c <breakTime(long long, tmElements_t&)+0x68>
  days -= LEAP_YEAR(year) ? 366 : 365;
    214a:	ldr	r6, [pc, #200]	; (2214 <breakTime(long long, tmElements_t&)+0x160>)
  tm.Year = year; // year is offset from 1970 
    214c:	strb	r4, [r2, #6]
  days -= LEAP_YEAR(year) ? 366 : 365;
    214e:	umull	r0, r6, r6, r3
    2152:	cbz	r5, 21ba <breakTime(long long, tmElements_t&)+0x106>
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    2154:	lsrs	r7, r6, #5
    2156:	movs	r4, #100	; 0x64
    2158:	mov.w	r0, #400	; 0x190
    215c:	lsrs	r6, r6, #7
    215e:	mls	r7, r4, r7, r3
    2162:	mls	r6, r0, r6, r3
  days -= LEAP_YEAR(year) ? 366 : 365;
    2166:	movw	r0, #365	; 0x16d
  time  -= days; // now it is days in this year, starting at 0
    216a:	sub.w	lr, lr, r1
    216e:	movs	r3, #0
    2170:	movs	r1, #1
    2172:	add	r0, lr
      monthLength = monthDays[month];
    2174:	ldr.w	lr, [pc, #168]	; 2220 <breakTime(long long, tmElements_t&)+0x16c>
    2178:	b.n	2190 <breakTime(long long, tmElements_t&)+0xdc>
    if (time >= monthLength) {
    217a:	ldrb.w	r4, [r3, lr]
    217e:	cmp	r4, r0
    2180:	bhi.n	21e8 <breakTime(long long, tmElements_t&)+0x134>
  for (month=0; month<12; month++) {
    2182:	cmp	r1, #12
      time -= monthLength;
    2184:	sub.w	r0, r0, r4
  for (month=0; month<12; month++) {
    2188:	beq.n	21aa <breakTime(long long, tmElements_t&)+0xf6>
    218a:	adds	r1, #1
    218c:	adds	r3, #1
    218e:	uxtb	r1, r1
    if (month==1) { // february
    2190:	cmp	r3, #1
    2192:	uxtb.w	ip, r3
    2196:	bne.n	217a <breakTime(long long, tmElements_t&)+0xc6>
      if (LEAP_YEAR(year)) {
    2198:	cbnz	r5, 21a0 <breakTime(long long, tmElements_t&)+0xec>
    219a:	cbz	r7, 21d4 <breakTime(long long, tmElements_t&)+0x120>
    219c:	movs	r4, #29
    219e:	b.n	21a2 <breakTime(long long, tmElements_t&)+0xee>
    21a0:	movs	r4, #28
    if (time >= monthLength) {
    21a2:	cmp	r0, r4
    21a4:	bcc.n	21fc <breakTime(long long, tmElements_t&)+0x148>
      time -= monthLength;
    21a6:	subs	r0, r0, r4
  for (month=0; month<12; month++) {
    21a8:	b.n	218a <breakTime(long long, tmElements_t&)+0xd6>
    21aa:	mov.w	ip, #13
  tm.Day = time + 1;     // day of month
    21ae:	adds	r0, #1
  tm.Month = month + 1;  // jan is month 1  
    21b0:	strb.w	ip, [r2, #5]
  tm.Day = time + 1;     // day of month
    21b4:	strb	r0, [r2, #4]
}
    21b6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  days -= LEAP_YEAR(year) ? 366 : 365;
    21ba:	movs	r0, #100	; 0x64
    21bc:	lsrs	r7, r6, #5
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    21be:	lsrs	r6, r6, #7
  days -= LEAP_YEAR(year) ? 366 : 365;
    21c0:	mls	r7, r0, r7, r3
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    21c4:	mov.w	r0, #400	; 0x190
    21c8:	mls	r6, r0, r6, r3
  days -= LEAP_YEAR(year) ? 366 : 365;
    21cc:	cbz	r7, 21de <breakTime(long long, tmElements_t&)+0x12a>
    21ce:	mov.w	r0, #366	; 0x16e
    21d2:	b.n	216a <breakTime(long long, tmElements_t&)+0xb6>
      if (LEAP_YEAR(year)) {
    21d4:	cmp	r6, #0
    21d6:	ite	ne
    21d8:	movne	r4, #28
    21da:	moveq	r4, #29
    21dc:	b.n	21a2 <breakTime(long long, tmElements_t&)+0xee>
  days -= LEAP_YEAR(year) ? 366 : 365;
    21de:	cmp	r6, #0
    21e0:	bne.n	2166 <breakTime(long long, tmElements_t&)+0xb2>
    21e2:	mov.w	r0, #366	; 0x16e
    21e6:	b.n	216a <breakTime(long long, tmElements_t&)+0xb6>
  for (month=0; month<12; month++) {
    21e8:	add.w	ip, ip, #1
  tm.Day = time + 1;     // day of month
    21ec:	adds	r0, #1
  for (month=0; month<12; month++) {
    21ee:	uxtb.w	ip, ip
  tm.Day = time + 1;     // day of month
    21f2:	strb	r0, [r2, #4]
  tm.Month = month + 1;  // jan is month 1  
    21f4:	strb.w	ip, [r2, #5]
}
    21f8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (time >= monthLength) {
    21fc:	mov.w	ip, #2
    2200:	b.n	21ae <breakTime(long long, tmElements_t&)+0xfa>
    2202:	nop
    2204:	.word	0x88888889
    2208:	.word	0xc28f5c29
    220c:	.word	0xaaaaaaab
    2210:	.word	0x24924925
    2214:	.word	0x51eb851f
    2218:	.word	0x028f5c28
    221c:	.word	0x00a3d70a
    2220:	.word	0x20000764

00002224 <TwoWire::available()>:
	}
	uint8_t requestFrom(uint8_t addr, uint8_t qty, uint32_t iaddr, uint8_t n, uint8_t stop);
	virtual size_t write(uint8_t data);
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
    2224:	ldrb.w	r2, [r0, #163]	; 0xa3
    2228:	ldrb.w	r0, [r0, #162]	; 0xa2
	}
    222c:	subs	r0, r2, r0
    222e:	bx	lr

00002230 <TwoWire::read()>:
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    2230:	ldrb.w	r3, [r0, #162]	; 0xa2
    2234:	ldrb.w	r2, [r0, #163]	; 0xa3
    2238:	cmp	r2, r3
    223a:	bls.n	2248 <TwoWire::read()+0x18>
		return rxBuffer[rxBufferIndex++];
    223c:	adds	r2, r3, #1
    223e:	add	r3, r0
    2240:	strb.w	r2, [r0, #162]	; 0xa2
    2244:	ldrb	r0, [r3, #26]
    2246:	bx	lr
		if (rxBufferIndex >= rxBufferLength) return -1;
    2248:	mov.w	r0, #4294967295
	}
    224c:	bx	lr
    224e:	nop

00002250 <TwoWire::peek()>:
	virtual int peek(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    2250:	ldrb.w	r3, [r0, #162]	; 0xa2
    2254:	ldrb.w	r2, [r0, #163]	; 0xa3
    2258:	cmp	r2, r3
    225a:	bls.n	2262 <TwoWire::peek()+0x12>
		return rxBuffer[rxBufferIndex];
    225c:	add	r0, r3
    225e:	ldrb	r0, [r0, #26]
    2260:	bx	lr
		if (rxBufferIndex >= rxBufferLength) return -1;
    2262:	mov.w	r0, #4294967295
	}
    2266:	bx	lr

00002268 <TwoWire::flush()>:
	virtual void flush(void) {
	}
    2268:	bx	lr
    226a:	nop

0000226c <TwoWire::write(unsigned char)>:
{
}


size_t TwoWire::write(uint8_t data)
{
    226c:	mov	r3, r0
	if (transmitting || slave_mode) {
    226e:	ldrh.w	r0, [r0, #304]	; 0x130
    2272:	cbz	r0, 2294 <TwoWire::write(unsigned char)+0x28>
		if (txBufferLength >= BUFFER_LENGTH+1) {
    2274:	ldrb.w	r2, [r3, #303]	; 0x12f
    2278:	cmp	r2, #136	; 0x88
    227a:	bls.n	2284 <TwoWire::write(unsigned char)+0x18>
	// format warnings are too pedantic - disable until newer toolchain offers better...
	// https://forum.pjrc.com/threads/62473?p=256873&viewfull=1#post256873
	// int printf(const char *format, ...) __attribute__ ((format (printf, 2, 3)));

  protected:
	void setWriteError(int err = 1) { write_error = err; }
    227c:	movs	r2, #1
			setWriteError();
			return 0;
    227e:	movs	r0, #0
    2280:	strb	r2, [r3, #4]
    2282:	bx	lr
		}
		txBuffer[txBufferLength++] = data;
    2284:	add.w	ip, r2, #1
		return 1;
    2288:	movs	r0, #1
		txBuffer[txBufferLength++] = data;
    228a:	add	r2, r3
    228c:	strb.w	ip, [r3, #303]	; 0x12f
    2290:	strb.w	r1, [r2, #165]	; 0xa5
	}
	return 0;
}
    2294:	bx	lr
    2296:	nop

00002298 <TwoWire::write(unsigned char const*, unsigned int)>:

size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
    2298:	push	{r3, r4, r5, lr}
	if (transmitting || slave_mode) {
    229a:	ldrh.w	r4, [r0, #304]	; 0x130
    229e:	cbnz	r4, 22a4 <TwoWire::write(unsigned char const*, unsigned int)+0xc>
		memcpy(txBuffer + txBufferLength, data, quantity);
		txBufferLength += quantity;
		return quantity;
	}
	return 0;
}
    22a0:	mov	r0, r4
    22a2:	pop	{r3, r4, r5, pc}
		size_t avail = BUFFER_LENGTH+1 - txBufferLength;
    22a4:	ldrb.w	r3, [r0, #303]	; 0x12f
    22a8:	mov	r5, r0
    22aa:	rsb	r4, r3, #137	; 0x89
		if (quantity > avail) {
    22ae:	cmp	r2, r4
    22b0:	bhi.n	22ce <TwoWire::write(unsigned char const*, unsigned int)+0x36>
    22b2:	mov	r4, r2
		memcpy(txBuffer + txBufferLength, data, quantity);
    22b4:	add.w	r0, r5, #165	; 0xa5
    22b8:	mov	r2, r4
    22ba:	add	r0, r3
    22bc:	bl	a0c4 <memcpy>
		txBufferLength += quantity;
    22c0:	ldrb.w	r3, [r5, #303]	; 0x12f
}
    22c4:	mov	r0, r4
		txBufferLength += quantity;
    22c6:	add	r3, r4
    22c8:	strb.w	r3, [r5, #303]	; 0x12f
}
    22cc:	pop	{r3, r4, r5, pc}
    22ce:	movs	r2, #1
    22d0:	strb	r2, [r0, #4]
    22d2:	b.n	22b4 <TwoWire::write(unsigned char const*, unsigned int)+0x1c>

000022d4 <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)>:
	constexpr TwoWire(IMXRT_LPI2C_t *myport, const I2C_Hardware_t &myhardware)
    22d4:	push	{r3, r4, r5, lr}
	constexpr Print() : write_error(0) {}
    22d6:	movs	r5, #0
    22d8:	mov	r3, r2
    22da:	mov.w	r2, #1000	; 0x3e8
    22de:	mov	r4, r0
    22e0:	strb	r5, [r0, #4]
    22e2:	str	r2, [r0, #8]
		: port(myport), hardware(myhardware) {
    22e4:	movs	r2, #136	; 0x88
    22e6:	ldr	r0, [pc, #84]	; (233c <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)+0x68>)
    22e8:	str	r1, [r4, #16]
    22ea:	mov	r1, r5
    22ec:	str	r0, [r4, #0]
    22ee:	add.w	r0, r4, #26
    22f2:	str	r3, [r4, #20]
    22f4:	strb	r5, [r4, #12]
    22f6:	strb	r5, [r4, #24]
    22f8:	strb	r5, [r4, #25]
    22fa:	bl	e064 <memset>
    22fe:	movs	r2, #137	; 0x89
    2300:	mov	r1, r5
    2302:	add.w	r0, r4, #165	; 0xa5
    2306:	strb.w	r5, [r4, #162]	; 0xa2
    230a:	strb.w	r5, [r4, #163]	; 0xa3
    230e:	strb.w	r5, [r4, #164]	; 0xa4
    2312:	bl	e064 <memset>
	}
    2316:	mov	r0, r4
		: port(myport), hardware(myhardware) {
    2318:	strb.w	r5, [r4, #302]	; 0x12e
    231c:	strb.w	r5, [r4, #303]	; 0x12f
    2320:	strb.w	r5, [r4, #304]	; 0x130
    2324:	strb.w	r5, [r4, #305]	; 0x131
    2328:	strb.w	r5, [r4, #306]	; 0x132
    232c:	strb.w	r5, [r4, #307]	; 0x133
    2330:	strb.w	r5, [r4, #308]	; 0x134
    2334:	strd	r5, r5, [r4, #312]	; 0x138
	}
    2338:	pop	{r3, r4, r5, pc}
    233a:	nop
    233c:	.word	0x20000b98

00002340 <TwoWire::isr()>:
}


void TwoWire::isr(void)
{
	uint32_t status = port->SSR;
    2340:	ldr	r3, [r0, #16]
{
    2342:	push	{r4, r5, r6, lr}
	uint32_t status = port->SSR;
    2344:	ldr.w	r5, [r3, #276]	; 0x114
{
    2348:	mov	r4, r0
	uint32_t w1c_bits = status & 0xF00;
	if (w1c_bits) port->SSR = w1c_bits;
    234a:	ands.w	r2, r5, #3840	; 0xf00
    234e:	beq.n	2354 <TwoWire::isr()+0x14>
    2350:	str.w	r2, [r3, #276]	; 0x114

	//Serial.print("isr ");
	//Serial.println(status, HEX);

	if (status & LPI2C_SSR_RDF) { // Receive Data Flag
    2354:	lsls	r6, r5, #30
    2356:	bpl.n	2370 <TwoWire::isr()+0x30>
		int rx = port->SRDR;
    2358:	ldr.w	r1, [r3, #368]	; 0x170
		if (rx & 0x8000) {
    235c:	lsls	r0, r1, #16
    235e:	bpl.n	23de <TwoWire::isr()+0x9e>
			rxBufferIndex = 0;
    2360:	movs	r2, #0
    2362:	movs	r0, #1
    2364:	strb.w	r2, [r4, #162]	; 0xa2
			rxBufferLength = 0;
		}
		if (rxBufferLength < BUFFER_LENGTH) {
			rxBuffer[rxBufferLength++] = rx & 255;
    2368:	add	r2, r4
    236a:	strb.w	r0, [r4, #163]	; 0xa3
    236e:	strb	r1, [r2, #26]
		}
		//Serial.print("rx = ");
		//Serial.println(rx, HEX);
	}
	if (status & LPI2C_SSR_TDF) { // Transmit Data Flag
    2370:	lsls	r2, r5, #31
    2372:	bpl.n	2396 <TwoWire::isr()+0x56>
		if (!transmitting) {
    2374:	ldrb.w	r6, [r4, #304]	; 0x130
    2378:	cbz	r6, 23b8 <TwoWire::isr()+0x78>
				(*user_onRequest)();
			}
			txBufferIndex = 0;
			transmitting = 1;
		}
		if (txBufferIndex < txBufferLength) {
    237a:	ldrb.w	r6, [r4, #302]	; 0x12e
    237e:	ldrb.w	r2, [r4, #303]	; 0x12f
    2382:	cmp	r2, r6
    2384:	bls.n	23d6 <TwoWire::isr()+0x96>
			port->STDR = txBuffer[txBufferIndex++];
    2386:	adds	r2, r6, #1
    2388:	add	r6, r4
    238a:	strb.w	r2, [r4, #302]	; 0x12e
    238e:	ldrb.w	r2, [r6, #165]	; 0xa5
    2392:	str.w	r2, [r3, #352]	; 0x160
			port->STDR = 0;
		}
		//Serial.println("tx");
	}

	if (status & LPI2C_SSR_SDF) { // Stop
    2396:	lsls	r3, r5, #22
    2398:	bpl.n	23b6 <TwoWire::isr()+0x76>
		//Serial.println("Stop");
		if (rxBufferLength > 0 && user_onReceive != nullptr) {
    239a:	ldrb.w	r0, [r4, #163]	; 0xa3
    239e:	cbz	r0, 23a8 <TwoWire::isr()+0x68>
    23a0:	ldr.w	r3, [r4, #316]	; 0x13c
    23a4:	cbz	r3, 23a8 <TwoWire::isr()+0x68>
			(*user_onReceive)(rxBufferLength);
    23a6:	blx	r3
		}
		rxBufferIndex = 0;
    23a8:	movs	r3, #0
    23aa:	strh.w	r3, [r4, #162]	; 0xa2
		rxBufferLength = 0;
		txBufferIndex = 0;
    23ae:	strh.w	r3, [r4, #302]	; 0x12e
		txBufferLength = 0;
		transmitting = 0;
    23b2:	strb.w	r3, [r4, #304]	; 0x130
	}
}
    23b6:	pop	{r4, r5, r6, pc}
			if (user_onRequest != nullptr) {
    23b8:	ldr.w	r2, [r4, #312]	; 0x138
    23bc:	cbz	r2, 23c2 <TwoWire::isr()+0x82>
				(*user_onRequest)();
    23be:	blx	r2
			port->STDR = txBuffer[txBufferIndex++];
    23c0:	ldr	r3, [r4, #16]
			txBufferIndex = 0;
    23c2:	movs	r2, #0
    23c4:	strb.w	r2, [r4, #302]	; 0x12e
			transmitting = 1;
    23c8:	movs	r2, #1
    23ca:	strb.w	r2, [r4, #304]	; 0x130
		if (txBufferIndex < txBufferLength) {
    23ce:	ldrb.w	r2, [r4, #303]	; 0x12f
    23d2:	cmp	r2, r6
    23d4:	bhi.n	2386 <TwoWire::isr()+0x46>
			port->STDR = 0;
    23d6:	movs	r2, #0
    23d8:	str.w	r2, [r3, #352]	; 0x160
    23dc:	b.n	2396 <TwoWire::isr()+0x56>
		if (rxBufferLength < BUFFER_LENGTH) {
    23de:	ldrb.w	r2, [r4, #163]	; 0xa3
    23e2:	cmp	r2, #135	; 0x87
    23e4:	bhi.n	2370 <TwoWire::isr()+0x30>
			rxBuffer[rxBufferLength++] = rx & 255;
    23e6:	adds	r0, r2, #1
    23e8:	uxtb	r0, r0
    23ea:	b.n	2368 <TwoWire::isr()+0x28>

000023ec <lpi2c1_isr()>:
void lpi2c1_isr(void) { Wire.isr(); }
void lpi2c3_isr(void) { Wire2.isr(); }
void lpi2c4_isr(void) { Wire1.isr(); }
void lpi2c2_isr(void) { Wire3.isr(); }
#else
void lpi2c1_isr(void) { Wire.isr(); }
    23ec:	ldr	r0, [pc, #4]	; (23f4 <lpi2c1_isr()+0x8>)
    23ee:	b.w	2340 <TwoWire::isr()>
    23f2:	nop
    23f4:	.word	0x200058c4

000023f8 <lpi2c3_isr()>:
void lpi2c3_isr(void) { Wire1.isr(); }
    23f8:	ldr	r0, [pc, #4]	; (2400 <lpi2c3_isr()+0x8>)
    23fa:	b.w	2340 <TwoWire::isr()>
    23fe:	nop
    2400:	.word	0x20005a04

00002404 <lpi2c4_isr()>:
void lpi2c4_isr(void) { Wire2.isr(); }
    2404:	ldr	r0, [pc, #4]	; (240c <lpi2c4_isr()+0x8>)
    2406:	b.w	2340 <TwoWire::isr()>
    240a:	nop
    240c:	.word	0x20005b44

00002410 <_GLOBAL__sub_I__ZN7TwoWire5beginEv>:
	}
	port->MCCR1 = port->MCCR0;
	port->MCFGR0 = 0;
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
	port->MCR = LPI2C_MCR_MEN;
}
    2410:	push	{r4, lr}
TwoWire Wire(&IMXRT_LPI2C1, TwoWire::i2c1_hardware);
    2412:	ldr	r4, [pc, #36]	; (2438 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x28>)
    2414:	ldr	r1, [pc, #36]	; (243c <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x2c>)
    2416:	mov	r2, r4
    2418:	ldr	r0, [pc, #36]	; (2440 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x30>)
    241a:	bl	22d4 <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)>
	TwoWire Wire1(&IMXRT_LPI2C3, TwoWire::i2c3_hardware);
    241e:	add.w	r2, r4, #80	; 0x50
    2422:	ldr	r1, [pc, #32]	; (2444 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x34>)
    2424:	ldr	r0, [pc, #32]	; (2448 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x38>)
    2426:	bl	22d4 <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)>
	TwoWire Wire2(&IMXRT_LPI2C4, TwoWire::i2c4_hardware);
    242a:	add.w	r2, r4, #160	; 0xa0
    242e:	ldr	r1, [pc, #28]	; (244c <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x3c>)
    2430:	ldr	r0, [pc, #28]	; (2450 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x40>)
    2432:	bl	22d4 <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)>
}
    2436:	pop	{r4, pc}
    2438:	.word	0x60001f8c
    243c:	.word	0x403f0000
    2440:	.word	0x200058c4
    2444:	.word	0x403f8000
    2448:	.word	0x20005a04
    244c:	.word	0x403fc000
    2450:	.word	0x20005b44

00002454 <EventResponder::triggerEvent(int, void*)>:
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    2454:	ldrb.w	ip, [r0, #28]
		_status = status;
    2458:	str	r1, [r0, #4]
		if (_type == EventTypeImmediate) {
    245a:	cmp.w	ip, #2
		_data = data;
    245e:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    2460:	bne.n	2466 <EventResponder::triggerEvent(int, void*)+0x12>
			(*_function)(*this);
    2462:	ldr	r3, [r0, #8]
    2464:	bx	r3
		} else {
			triggerEventNotImmediate();
    2466:	b.w	c1c4 <EventResponder::triggerEventNotImmediate()>
    246a:	nop

0000246c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]>:
	if (interruptMask[n >> 5] == 0) {
		interruptMasksUsed &= ~(1 << (n >> 5));
	}
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
    246c:	push	{r4, r5, r6, r7}
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    246e:	ldr	r4, [r0, #0]
    uint8_t *p_read = (uint8_t*)retbuf;
    size_t count_read = count;

	// Pass 1 keep it simple and don't try packing 8 bits into 16 yet..
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 
    2470:	movw	r5, #513	; 0x201

	while (count > 0) {
    2474:	mov	r6, r3
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 
    2476:	str	r5, [r4, #16]
	while (count > 0) {
    2478:	cbz	r3, 24a4 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x38>
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    247a:	cbz	r1, 24c6 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x5a>
    247c:	ldrb.w	r5, [r1], #1
		count--; // how many bytes left to output.
    2480:	subs	r3, #1
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    2482:	str	r5, [r4, #100]	; 0x64
		// Make sure queue is not full before pushing next byte out
		do {
			if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    2484:	ldr	r5, [r4, #112]	; 0x70
    2486:	lsls	r7, r5, #30
    2488:	bmi.n	249a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x2e>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
				if (p_read) *p_read++ = b; 
    248a:	mov	r5, r2
				count_read--;
    248c:	subs	r6, #1
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    248e:	ldr	r7, [r4, #116]	; 0x74
				if (p_read) *p_read++ = b; 
    2490:	cbz	r2, 249a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x2e>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    2492:	strb.w	r7, [r5], #1
				if (p_read) *p_read++ = b; 
    2496:	mov	r2, r5
    2498:	ldr	r4, [r0, #0]
			}
		} while ((port().SR & LPSPI_SR_TDF) == 0) ;
    249a:	ldr	r5, [r4, #20]
    249c:	lsls	r5, r5, #31
    249e:	bpl.n	2484 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x18>
	while (count > 0) {
    24a0:	cmp	r3, #0
    24a2:	bne.n	247a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0xe>

	}

	// now lets wait for all of the read bytes to be returned...
	while (count_read) {
    24a4:	cbz	r6, 24c2 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x56>
    24a6:	ldr	r3, [r0, #0]
		if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    24a8:	ldr	r1, [r3, #112]	; 0x70
    24aa:	lsls	r1, r1, #30
    24ac:	bmi.n	24a4 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x38>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
			if (p_read) *p_read++ = b; 
    24ae:	mov	r1, r2
			count_read--;
    24b0:	subs	r6, #1
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    24b2:	ldr	r3, [r3, #116]	; 0x74
			if (p_read) *p_read++ = b; 
    24b4:	cmp	r2, #0
    24b6:	beq.n	24a4 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x38>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    24b8:	strb.w	r3, [r1], #1
			if (p_read) *p_read++ = b; 
    24bc:	mov	r2, r1
	while (count_read) {
    24be:	cmp	r6, #0
    24c0:	bne.n	24a6 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x3a>
		}
	}
}
    24c2:	pop	{r4, r5, r6, r7}
    24c4:	bx	lr
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    24c6:	ldrb.w	r5, [r0, #60]	; 0x3c
    24ca:	b.n	2480 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x14>

000024cc <_spi_dma_rxISR1()>:

//-------------------------------------------------------------------------
// DMA RX ISR
//-------------------------------------------------------------------------
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
    24cc:	ldr	r3, [pc, #200]	; (2598 <_spi_dma_rxISR1()+0xcc>)
		DMA_CINT = channel;
    24ce:	ldr	r1, [pc, #204]	; (259c <_spi_dma_rxISR1()+0xd0>)
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    24d0:	push	{r4, r5, lr}
	_dmaTX->clearComplete();
    24d2:	ldrd	r5, r4, [r3, #68]	; 0x44
    24d6:	ldrb	r0, [r4, #4]
    24d8:	strb	r0, [r1, #31]
	_dmaRX->clearComplete();

	if (_dma_count_remaining) {
    24da:	ldr	r2, [r3, #64]	; 0x40
	bool complete(void) {
		if (TCD->CSR & DMA_TCD_CSR_DONE) return true;
		return false;
	}
	void clearComplete(void) {
		DMA_CDNE = channel;
    24dc:	ldrb.w	ip, [r5, #4]
    24e0:	strb.w	ip, [r1, #28]
    24e4:	strb	r0, [r1, #28]
    24e6:	cbz	r2, 24fe <_spi_dma_rxISR1()+0x32>
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > MAX_DMA_COUNT) {
    24e8:	cmp.w	r2, #32768	; 0x8000
    24ec:	bcc.n	2536 <_spi_dma_rxISR1()+0x6a>
			_dma_count_remaining -= MAX_DMA_COUNT;
    24ee:	ldr	r1, [pc, #176]	; (25a0 <_spi_dma_rxISR1()+0xd4>)
    24f0:	add	r1, r2
		DMA_SERQ = channel;
    24f2:	ldr	r2, [pc, #168]	; (259c <_spi_dma_rxISR1()+0xd0>)
    24f4:	str	r1, [r3, #64]	; 0x40
    24f6:	strb	r0, [r2, #27]
    24f8:	strb.w	ip, [r2, #27]
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    24fc:	pop	{r4, r5, pc}
    24fe:	ldr	r1, [r3, #0]
		}
		_dmaRX->enable();
		_dmaTX->enable();
	} else {

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    2500:	movs	r4, #15

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    2502:	ldr	r0, [r3, #76]	; 0x4c
		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    2504:	str	r4, [r1, #88]	; 0x58
		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    2506:	movw	r4, #769	; 0x301
 		port().DER = 0;		// DMA no longer doing TX (or RX)
    250a:	str	r2, [r1, #28]
		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    250c:	str	r4, [r1, #16]
		port().SR = 0x3f00;	// clear out all of the other status...
    250e:	mov.w	r4, #16128	; 0x3f00
    2512:	str	r4, [r1, #20]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    2514:	movs	r1, #3
		_dma_event_responder->triggerEvent();
    2516:	ldr	r4, [r0, #0]
    2518:	ldr	r4, [r4, #0]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    251a:	strb.w	r1, [r3, #61]	; 0x3d
		_dma_event_responder->triggerEvent();
    251e:	ldr	r3, [pc, #132]	; (25a4 <_spi_dma_rxISR1()+0xd8>)
    2520:	cmp	r4, r3
    2522:	bne.n	2572 <_spi_dma_rxISR1()+0xa6>
		if (_type == EventTypeImmediate) {
    2524:	ldrb	r3, [r0, #28]
		_status = status;
    2526:	str	r2, [r0, #4]
		if (_type == EventTypeImmediate) {
    2528:	cmp	r3, #2
		_data = data;
    252a:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    252c:	bne.n	257c <_spi_dma_rxISR1()+0xb0>
			(*_function)(*this);
    252e:	ldr	r3, [r0, #8]
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    2530:	ldmia.w	sp!, {r4, r5, lr}
    2534:	bx	r3
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining);
    2536:	ldr	r5, [r5, #0]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    2538:	ldrh	r1, [r5, #30]
    253a:	lsls	r1, r1, #16
    253c:	bmi.n	2584 <_spi_dma_rxISR1()+0xb8>
		tcd->BITER = len & 0x7fff;
    253e:	uxth	r2, r2
    2540:	strh	r2, [r5, #30]
	tcd->CITER = tcd->BITER; 
    2542:	ldr	r1, [r4, #0]
    2544:	ldrh	r4, [r5, #30]
    2546:	uxth	r4, r4
    2548:	strh	r4, [r5, #22]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    254a:	ldrh	r4, [r1, #30]
    254c:	lsls	r4, r4, #16
    254e:	bpl.n	255c <_spi_dma_rxISR1()+0x90>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    2550:	ldrh	r4, [r1, #30]
    2552:	ubfx	r2, r2, #0, #9
    2556:	and.w	r4, r4, #65024	; 0xfe00
    255a:	orrs	r2, r4
    255c:	strh	r2, [r1, #30]
	tcd->CITER = tcd->BITER; 
    255e:	ldrh	r2, [r1, #30]
    2560:	uxth	r2, r2
    2562:	strh	r2, [r1, #22]
    2564:	movs	r1, #0
    2566:	ldr	r2, [pc, #52]	; (259c <_spi_dma_rxISR1()+0xd0>)
			_dma_count_remaining -= MAX_DMA_COUNT;
    2568:	str	r1, [r3, #64]	; 0x40
    256a:	strb	r0, [r2, #27]
    256c:	strb.w	ip, [r2, #27]
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    2570:	pop	{r4, r5, pc}
		_dma_event_responder->triggerEvent();
    2572:	mov	r3, r4
    2574:	mov	r1, r2
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    2576:	ldmia.w	sp!, {r4, r5, lr}
		_dma_event_responder->triggerEvent();
    257a:	bx	r3
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    257c:	ldmia.w	sp!, {r4, r5, lr}
			triggerEventNotImmediate();
    2580:	b.w	c1c4 <EventResponder::triggerEventNotImmediate()>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    2584:	ldrh	r1, [r5, #30]
    2586:	ubfx	lr, r2, #0, #9
    258a:	uxth	r2, r2
    258c:	and.w	r1, r1, #65024	; 0xfe00
    2590:	orr.w	r1, r1, lr
    2594:	strh	r1, [r5, #30]
    2596:	b.n	2542 <_spi_dma_rxISR1()+0x76>
    2598:	.word	0x20005820
    259c:	.word	0x400e8000
    25a0:	.word	0xffff8001
    25a4:	.word	0x00002455

000025a8 <_spi_dma_rxISR0()>:
	_dmaRX->clearInterrupt();
    25a8:	ldr	r3, [pc, #200]	; (2674 <_spi_dma_rxISR0()+0xcc>)
		DMA_CINT = channel;
    25aa:	ldr	r1, [pc, #204]	; (2678 <_spi_dma_rxISR0()+0xd0>)
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    25ac:	push	{r4, r5, lr}
	_dmaTX->clearComplete();
    25ae:	ldrd	r5, r4, [r3, #68]	; 0x44
    25b2:	ldrb	r0, [r4, #4]
    25b4:	strb	r0, [r1, #31]
	if (_dma_count_remaining) {
    25b6:	ldr	r2, [r3, #64]	; 0x40
		DMA_CDNE = channel;
    25b8:	ldrb.w	ip, [r5, #4]
    25bc:	strb.w	ip, [r1, #28]
    25c0:	strb	r0, [r1, #28]
    25c2:	cbz	r2, 25da <_spi_dma_rxISR0()+0x32>
		if (_dma_count_remaining > MAX_DMA_COUNT) {
    25c4:	cmp.w	r2, #32768	; 0x8000
    25c8:	bcc.n	2612 <_spi_dma_rxISR0()+0x6a>
			_dma_count_remaining -= MAX_DMA_COUNT;
    25ca:	ldr	r1, [pc, #176]	; (267c <_spi_dma_rxISR0()+0xd4>)
    25cc:	add	r1, r2
		DMA_SERQ = channel;
    25ce:	ldr	r2, [pc, #168]	; (2678 <_spi_dma_rxISR0()+0xd0>)
    25d0:	str	r1, [r3, #64]	; 0x40
    25d2:	strb	r0, [r2, #27]
    25d4:	strb.w	ip, [r2, #27]
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    25d8:	pop	{r4, r5, pc}
    25da:	ldr	r1, [r3, #0]
		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    25dc:	movs	r4, #15
		_dma_event_responder->triggerEvent();
    25de:	ldr	r0, [r3, #76]	; 0x4c
		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    25e0:	str	r4, [r1, #88]	; 0x58
		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    25e2:	movw	r4, #769	; 0x301
 		port().DER = 0;		// DMA no longer doing TX (or RX)
    25e6:	str	r2, [r1, #28]
		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    25e8:	str	r4, [r1, #16]
		port().SR = 0x3f00;	// clear out all of the other status...
    25ea:	mov.w	r4, #16128	; 0x3f00
    25ee:	str	r4, [r1, #20]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    25f0:	movs	r1, #3
		_dma_event_responder->triggerEvent();
    25f2:	ldr	r4, [r0, #0]
    25f4:	ldr	r4, [r4, #0]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    25f6:	strb.w	r1, [r3, #61]	; 0x3d
		_dma_event_responder->triggerEvent();
    25fa:	ldr	r3, [pc, #132]	; (2680 <_spi_dma_rxISR0()+0xd8>)
    25fc:	cmp	r4, r3
    25fe:	bne.n	264e <_spi_dma_rxISR0()+0xa6>
		if (_type == EventTypeImmediate) {
    2600:	ldrb	r3, [r0, #28]
		_status = status;
    2602:	str	r2, [r0, #4]
		if (_type == EventTypeImmediate) {
    2604:	cmp	r3, #2
		_data = data;
    2606:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    2608:	bne.n	2658 <_spi_dma_rxISR0()+0xb0>
			(*_function)(*this);
    260a:	ldr	r3, [r0, #8]
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    260c:	ldmia.w	sp!, {r4, r5, lr}
    2610:	bx	r3
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining);
    2612:	ldr	r5, [r5, #0]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    2614:	ldrh	r1, [r5, #30]
    2616:	lsls	r1, r1, #16
    2618:	bmi.n	2660 <_spi_dma_rxISR0()+0xb8>
		tcd->BITER = len & 0x7fff;
    261a:	uxth	r2, r2
    261c:	strh	r2, [r5, #30]
	tcd->CITER = tcd->BITER; 
    261e:	ldr	r1, [r4, #0]
    2620:	ldrh	r4, [r5, #30]
    2622:	uxth	r4, r4
    2624:	strh	r4, [r5, #22]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    2626:	ldrh	r4, [r1, #30]
    2628:	lsls	r4, r4, #16
    262a:	bpl.n	2638 <_spi_dma_rxISR0()+0x90>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    262c:	ldrh	r4, [r1, #30]
    262e:	ubfx	r2, r2, #0, #9
    2632:	and.w	r4, r4, #65024	; 0xfe00
    2636:	orrs	r2, r4
    2638:	strh	r2, [r1, #30]
	tcd->CITER = tcd->BITER; 
    263a:	ldrh	r2, [r1, #30]
    263c:	uxth	r2, r2
    263e:	strh	r2, [r1, #22]
    2640:	movs	r1, #0
    2642:	ldr	r2, [pc, #52]	; (2678 <_spi_dma_rxISR0()+0xd0>)
			_dma_count_remaining -= MAX_DMA_COUNT;
    2644:	str	r1, [r3, #64]	; 0x40
    2646:	strb	r0, [r2, #27]
    2648:	strb.w	ip, [r2, #27]
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    264c:	pop	{r4, r5, pc}
		_dma_event_responder->triggerEvent();
    264e:	mov	r3, r4
    2650:	mov	r1, r2
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    2652:	ldmia.w	sp!, {r4, r5, lr}
		_dma_event_responder->triggerEvent();
    2656:	bx	r3
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    2658:	ldmia.w	sp!, {r4, r5, lr}
			triggerEventNotImmediate();
    265c:	b.w	c1c4 <EventResponder::triggerEventNotImmediate()>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    2660:	ldrh	r1, [r5, #30]
    2662:	ubfx	lr, r2, #0, #9
    2666:	uxth	r2, r2
    2668:	and.w	r1, r1, #65024	; 0xfe00
    266c:	orr.w	r1, r1, lr
    2670:	strh	r1, [r5, #30]
    2672:	b.n	261e <_spi_dma_rxISR0()+0x76>
    2674:	.word	0x200057d0
    2678:	.word	0x400e8000
    267c:	.word	0xffff8001
    2680:	.word	0x00002455

00002684 <SPIClass::SPIClass(unsigned int, unsigned int)>:
		: port_addr(myport), hardware_addr(myhardware) {
    2684:	movs	r3, #0
    2686:	strd	r1, r2, [r0]
    268a:	strd	r3, r3, [r0, #8]
    268e:	strd	r3, r3, [r0, #16]
    2692:	strd	r3, r3, [r0, #24]
    2696:	strd	r3, r3, [r0, #32]
    269a:	strd	r3, r3, [r0, #40]	; 0x28
    269e:	strd	r3, r3, [r0, #48]	; 0x30
    26a2:	str	r3, [r0, #56]	; 0x38
    26a4:	strh	r3, [r0, #60]	; 0x3c
    26a6:	strd	r3, r3, [r0, #64]	; 0x40
    26aa:	strd	r3, r3, [r0, #72]	; 0x48
	}
    26ae:	bx	lr

000026b0 <SPIClass::begin()>:
	const SPI_Hardware_t & hardware() { return *(const SPI_Hardware_t *)hardware_addr; }
    26b0:	ldr	r3, [r0, #4]
{
    26b2:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    26b6:	ldrd	r4, r1, [r3]
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
    26ba:	ldr	r5, [pc, #516]	; (28c0 <SPIClass::begin()+0x210>)
	*(portControlRegister(hardware().miso_pin[miso_pin_index])) = fastio;
    26bc:	mov.w	sl, #184	; 0xb8
	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    26c0:	ldr	r2, [r4, #0]
	port().CR = LPSPI_CR_RST;
    26c2:	mov.w	r8, #2
	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    26c6:	bic.w	r2, r2, r1
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
    26ca:	ldr	r1, [pc, #504]	; (28c4 <SPIClass::begin()+0x214>)
	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    26cc:	str	r2, [r4, #0]
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
    26ce:	ldr	r2, [r5, #24]
    26d0:	ands	r1, r2
		CCM_CBCMR_LPSPI_PODF(2) | CCM_CBCMR_LPSPI_CLK_SEL(1); // pg 714
    26d2:	ldr	r2, [pc, #500]	; (28c8 <SPIClass::begin()+0x218>)
    26d4:	orrs	r2, r1
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
    26d6:	str	r2, [r5, #24]
	*(portControlRegister(hardware().miso_pin[miso_pin_index])) = fastio;
    26d8:	ldrb.w	lr, [r0, #16]
    26dc:	ldr	r2, [pc, #492]	; (28cc <SPIClass::begin()+0x21c>)
    26de:	add.w	r6, r3, lr
	*(portConfigRegister(hardware().miso_pin[miso_pin_index])) = hardware().miso_mux[miso_pin_index];
    26e2:	add.w	lr, r3, lr, lsl #2
	*(portControlRegister(hardware().miso_pin[miso_pin_index])) = fastio;
    26e6:	ldrb	r1, [r6, #16]
    26e8:	add.w	r1, r2, r1, lsl #4
    26ec:	ldr	r1, [r1, #8]
    26ee:	str.w	sl, [r1]
	*(portControlRegister(hardware().mosi_pin[mosi_pin_index])) = fastio;
    26f2:	ldrb.w	ip, [r0, #17]
    26f6:	add.w	r5, r3, ip
	*(portConfigRegister(hardware().mosi_pin [mosi_pin_index])) = hardware().mosi_mux[mosi_pin_index];
    26fa:	add.w	ip, ip, #10
	*(portControlRegister(hardware().mosi_pin[mosi_pin_index])) = fastio;
    26fe:	ldrb.w	r1, [r5, #36]	; 0x24
    2702:	add.w	r1, r2, r1, lsl #4
    2706:	ldr	r1, [r1, #8]
    2708:	str.w	sl, [r1]
	*(portControlRegister(hardware().sck_pin[sck_pin_index])) = fastio;
    270c:	ldrb	r1, [r0, #18]
    270e:	add.w	r9, r3, r1
	*(portConfigRegister(hardware().sck_pin [sck_pin_index])) = hardware().sck_mux[sck_pin_index];
    2712:	add.w	r1, r3, r1, lsl #2
	*(portControlRegister(hardware().sck_pin[sck_pin_index])) = fastio;
    2716:	ldrb.w	fp, [r9, #56]	; 0x38
    271a:	add.w	fp, r2, fp, lsl #4
    271e:	ldr.w	fp, [fp, #8]
    2722:	str.w	sl, [fp]
	hardware().clock_gate_register |= hardware().clock_gate_mask;
    2726:	ldr.w	sl, [r4]
    272a:	ldr	r7, [r3, #4]
    272c:	orr.w	sl, sl, r7
    2730:	str.w	sl, [r4]
	*(portConfigRegister(hardware().miso_pin[miso_pin_index])) = hardware().miso_mux[miso_pin_index];
    2734:	ldrb	r4, [r6, #16]
    2736:	ldr.w	lr, [lr, #20]
    273a:	add.w	r4, r2, r4, lsl #4
    273e:	ldr	r4, [r4, #4]
    2740:	str.w	lr, [r4]
	*(portConfigRegister(hardware().mosi_pin [mosi_pin_index])) = hardware().mosi_mux[mosi_pin_index];
    2744:	ldrb.w	r4, [r5, #36]	; 0x24
    2748:	ldr.w	ip, [r3, ip, lsl #2]
    274c:	add.w	r4, r2, r4, lsl #4
    2750:	ldr	r4, [r4, #4]
    2752:	str.w	ip, [r4]
	*(portConfigRegister(hardware().sck_pin [sck_pin_index])) = hardware().sck_mux[sck_pin_index];
    2756:	ldrb.w	r4, [r9, #56]	; 0x38
    275a:	add.w	r2, r2, r4, lsl #4
    275e:	ldr	r2, [r2, #4]
    2760:	ldr	r1, [r1, #60]	; 0x3c
    2762:	str	r1, [r2, #0]
	hardware().sck_select_input_register = hardware().sck_select_val[sck_pin_index];
    2764:	ldr	r2, [r3, #72]	; 0x48
    2766:	ldrb.w	r1, [r9, #68]	; 0x44
    276a:	str	r1, [r2, #0]
	hardware().miso_select_input_register = hardware().miso_select_val[miso_pin_index];
    276c:	ldr	r2, [r3, #32]
    276e:	ldrb	r1, [r6, #28]
	hardware().mosi_select_input_register = hardware().mosi_select_val[mosi_pin_index];
    2770:	ldr	r3, [r3, #52]	; 0x34
	hardware().miso_select_input_register = hardware().miso_select_val[miso_pin_index];
    2772:	str	r1, [r2, #0]
	hardware().mosi_select_input_register = hardware().mosi_select_val[mosi_pin_index];
    2774:	ldrb.w	r2, [r5, #48]	; 0x30
    2778:	str	r2, [r3, #0]
	port().FCR = LPSPI_FCR_TXWATER(15);
    277a:	movs	r2, #15
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    277c:	ldr	r3, [r0, #0]
	port().CR = LPSPI_CR_RST;
    277e:	str.w	r8, [r3, #16]
	port().FCR = LPSPI_FCR_TXWATER(15);
    2782:	str	r2, [r3, #88]	; 0x58
		if (interruptMasksUsed) {
    2784:	ldrb	r2, [r0, #19]
    2786:	cmp	r2, #0
    2788:	beq.n	27ee <SPIClass::begin()+0x13e>
			__disable_irq();
    278a:	cpsid	i
			if (interruptMasksUsed & 0x01) {
    278c:	ldrb	r3, [r0, #19]
    278e:	lsls	r4, r3, #31
    2790:	bpl.n	27a4 <SPIClass::begin()+0xf4>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    2792:	mov.w	r1, #3758153728	; 0xe000e000
    2796:	ldr	r4, [r0, #20]
    2798:	ldr.w	r2, [r1, #384]	; 0x180
    279c:	ands	r2, r4
    279e:	str	r2, [r0, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    27a0:	str.w	r2, [r1, #384]	; 0x180
			if (interruptMasksUsed & 0x02) {
    27a4:	lsls	r1, r3, #30
    27a6:	bpl.n	27ba <SPIClass::begin()+0x10a>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    27a8:	mov.w	r1, #3758153728	; 0xe000e000
    27ac:	ldr	r4, [r0, #24]
    27ae:	ldr.w	r2, [r1, #388]	; 0x184
    27b2:	ands	r2, r4
    27b4:	str	r2, [r0, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    27b6:	str.w	r2, [r1, #388]	; 0x184
			if (interruptMasksUsed & 0x04) {
    27ba:	lsls	r2, r3, #29
    27bc:	bpl.n	27d0 <SPIClass::begin()+0x120>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    27be:	mov.w	r1, #3758153728	; 0xe000e000
    27c2:	ldr	r4, [r0, #28]
    27c4:	ldr.w	r2, [r1, #392]	; 0x188
    27c8:	ands	r2, r4
    27ca:	str	r2, [r0, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    27cc:	str.w	r2, [r1, #392]	; 0x188
			if (interruptMasksUsed & 0x08) {
    27d0:	lsls	r7, r3, #28
    27d2:	bpl.n	27e6 <SPIClass::begin()+0x136>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    27d4:	mov.w	r1, #3758153728	; 0xe000e000
    27d8:	ldr	r4, [r0, #32]
    27da:	ldr.w	r2, [r1, #396]	; 0x18c
    27de:	ands	r2, r4
    27e0:	str	r2, [r0, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    27e2:	str.w	r2, [r1, #396]	; 0x18c
			if (interruptMasksUsed & 0x10) {
    27e6:	lsls	r6, r3, #27
    27e8:	bmi.n	2896 <SPIClass::begin()+0x1e6>
			__enable_irq();
    27ea:	cpsie	i
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    27ec:	ldr	r3, [r0, #0]
		if (settings.clock() != _clock) {
    27ee:	ldr	r4, [pc, #224]	; (28d0 <SPIClass::begin()+0x220>)
    27f0:	ldr	r2, [r0, #8]
    27f2:	cmp	r2, r4
    27f4:	beq.n	28aa <SPIClass::begin()+0x1fa>
			uint32_t cbcmr = CCM_CBCMR;
    27f6:	ldr	r2, [pc, #200]	; (28c0 <SPIClass::begin()+0x210>)
		    _clock = settings.clock();
    27f8:	str	r4, [r0, #8]
			uint32_t cbcmr = CCM_CBCMR;
    27fa:	ldr	r2, [r2, #24]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    27fc:	ldr	r1, [pc, #212]	; (28d4 <SPIClass::begin()+0x224>)
    27fe:	ubfx	r6, r2, #4, #2
    2802:	ubfx	r2, r2, #26, #3
			if (d && clkhz/d > _clock) d++;
    2806:	ldr	r5, [pc, #208]	; (28d8 <SPIClass::begin()+0x228>)
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    2808:	ldr.w	r1, [r1, r6, lsl #2]
    280c:	adds	r2, #1
    280e:	udiv	r2, r1, r2
			if (d && clkhz/d > _clock) d++;
    2812:	cmp	r2, r5
    2814:	bhi.n	287a <SPIClass::begin()+0x1ca>
    2816:	movs	r2, #0
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    2818:	str	r2, [r0, #12]
		port().CR = 0;
    281a:	movs	r4, #0
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    281c:	movs	r1, #3
		port().CR = 0;
    281e:	str	r4, [r3, #16]
		port().TCR = settings.tcr;
    2820:	movs	r4, #7
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    2822:	str	r1, [r3, #36]	; 0x24
		port().CR = LPSPI_CR_MEN;
    2824:	movs	r1, #1
		port().CCR = _ccr;
    2826:	str	r2, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
    2828:	str	r4, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    282a:	str	r1, [r3, #16]
		if (interruptMasksUsed) {
    282c:	ldrb	r3, [r0, #19]
    282e:	cbz	r3, 2876 <SPIClass::begin()+0x1c6>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    2830:	lsls	r5, r3, #31
    2832:	bpl.n	283e <SPIClass::begin()+0x18e>
    2834:	ldr	r1, [r0, #40]	; 0x28
    2836:	mov.w	r2, #3758153728	; 0xe000e000
    283a:	str.w	r1, [r2, #256]	; 0x100
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    283e:	lsls	r4, r3, #30
    2840:	bpl.n	284c <SPIClass::begin()+0x19c>
    2842:	ldr	r1, [r0, #44]	; 0x2c
    2844:	mov.w	r2, #3758153728	; 0xe000e000
    2848:	str.w	r1, [r2, #260]	; 0x104
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    284c:	lsls	r1, r3, #29
    284e:	bpl.n	285a <SPIClass::begin()+0x1aa>
    2850:	ldr	r1, [r0, #48]	; 0x30
    2852:	mov.w	r2, #3758153728	; 0xe000e000
    2856:	str.w	r1, [r2, #264]	; 0x108
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    285a:	lsls	r2, r3, #28
    285c:	bpl.n	2868 <SPIClass::begin()+0x1b8>
    285e:	ldr	r1, [r0, #52]	; 0x34
    2860:	mov.w	r2, #3758153728	; 0xe000e000
    2864:	str.w	r1, [r2, #268]	; 0x10c
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    2868:	lsls	r3, r3, #27
    286a:	bpl.n	2876 <SPIClass::begin()+0x1c6>
    286c:	ldr	r2, [r0, #56]	; 0x38
    286e:	mov.w	r3, #3758153728	; 0xe000e000
    2872:	str.w	r2, [r3, #272]	; 0x110
}
    2876:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			d = _clock ? clkhz/_clock : clkhz;
    287a:	ldr	r1, [pc, #96]	; (28dc <SPIClass::begin()+0x22c>)
    287c:	umull	r5, r1, r1, r2
    2880:	lsrs	r1, r1, #20
			if (d && clkhz/d > _clock) d++;
    2882:	udiv	r2, r2, r1
    2886:	cmp	r2, r4
    2888:	it	hi
    288a:	addhi	r1, #1
			if (d > 257) d= 257;  // max div
    288c:	cmp.w	r1, #258	; 0x102
    2890:	bcc.n	28ae <SPIClass::begin()+0x1fe>
    2892:	ldr	r2, [pc, #76]	; (28e0 <SPIClass::begin()+0x230>)
				div = d-2;
    2894:	b.n	2818 <SPIClass::begin()+0x168>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    2896:	mov.w	r2, #3758153728	; 0xe000e000
    289a:	ldr	r1, [r0, #36]	; 0x24
    289c:	ldr.w	r3, [r2, #400]	; 0x190
    28a0:	ands	r3, r1
    28a2:	str	r3, [r0, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    28a4:	str.w	r3, [r2, #400]	; 0x190
    28a8:	b.n	27ea <SPIClass::begin()+0x13a>
		port().CCR = _ccr;
    28aa:	ldr	r2, [r0, #12]
    28ac:	b.n	281a <SPIClass::begin()+0x16a>
			if (d > 2) {
    28ae:	cmp	r1, #2
    28b0:	bls.n	2816 <SPIClass::begin()+0x166>
				div = d-2;
    28b2:	subs	r1, #2
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    28b4:	lsrs	r4, r1, #1
    28b6:	lsls	r2, r4, #8
    28b8:	orr.w	r2, r2, r4, lsl #16
    28bc:	orrs	r2, r1
    28be:	b.n	2818 <SPIClass::begin()+0x168>
    28c0:	.word	0x400fc000
    28c4:	.word	0xe3ffffcf
    28c8:	.word	0x08000010
    28cc:	.word	0x20000ebc
    28d0:	.word	0x003d0900
    28d4:	.word	0x20000c28
    28d8:	.word	0x003d08ff
    28dc:	.word	0x431bde83
    28e0:	.word	0x007f7fff

000028e4 <SPIClass::transfer(void const*, void*, unsigned int)>:
	if (count == 0) return;
    28e4:	cbz	r3, 28ea <SPIClass::transfer(void const*, void*, unsigned int)+0x6>
    28e6:	b.w	246c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]>
}
    28ea:	bx	lr

000028ec <SPIClass::end()>:
	const SPI_Hardware_t & hardware() { return *(const SPI_Hardware_t *)hardware_addr; }
    28ec:	ldr	r3, [r0, #4]
	if (hardware().clock_gate_register & hardware().clock_gate_mask) {
    28ee:	ldrd	r1, r2, [r3]
    28f2:	ldr	r1, [r1, #0]
    28f4:	tst	r1, r2
    28f6:	bne.n	28fa <SPIClass::end()+0xe>
    28f8:	bx	lr
void SPIClass::end() {
    28fa:	push	{r4, lr}
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    28fc:	ldr	r2, [r0, #0]
    28fe:	mov	r4, r0
		port().CR = 0;  // turn off the enable
    2900:	movs	r0, #0
		pinMode(hardware().miso_pin[miso_pin_index], INPUT_DISABLE);
    2902:	movs	r1, #5
		port().CR = 0;  // turn off the enable
    2904:	str	r0, [r2, #16]
		pinMode(hardware().miso_pin[miso_pin_index], INPUT_DISABLE);
    2906:	ldrb	r2, [r4, #16]
    2908:	add	r3, r2
    290a:	ldrb	r0, [r3, #16]
    290c:	bl	bc70 <pinMode>
		pinMode(hardware().mosi_pin[mosi_pin_index], INPUT_DISABLE);
    2910:	ldrb	r2, [r4, #17]
    2912:	ldr	r3, [r4, #4]
    2914:	movs	r1, #5
    2916:	add	r3, r2
    2918:	ldrb.w	r0, [r3, #36]	; 0x24
    291c:	bl	bc70 <pinMode>
		pinMode(hardware().sck_pin[sck_pin_index], INPUT_DISABLE);
    2920:	ldr	r3, [r4, #4]
    2922:	ldrb	r2, [r4, #18]
    2924:	movs	r1, #5
    2926:	add	r3, r2
}
    2928:	ldmia.w	sp!, {r4, lr}
		pinMode(hardware().sck_pin[sck_pin_index], INPUT_DISABLE);
    292c:	ldrb.w	r0, [r3, #56]	; 0x38
    2930:	b.w	bc70 <pinMode>

00002934 <_GLOBAL__sub_I__ZN8SPIClass5beginEv>:

	}
}
    2934:	push	{r3, lr}
SPIClass SPI((uintptr_t)&IMXRT_LPSPI4_S, (uintptr_t)&SPIClass::spiclass_lpspi4_hardware);
    2936:	ldr	r2, [pc, #32]	; (2958 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x24>)
    2938:	ldr	r1, [pc, #32]	; (295c <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x28>)
    293a:	ldr	r0, [pc, #36]	; (2960 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x2c>)
    293c:	bl	2684 <SPIClass::SPIClass(unsigned int, unsigned int)>
SPIClass SPI1((uintptr_t)&IMXRT_LPSPI3_S, (uintptr_t)&SPIClass::spiclass_lpspi3_hardware);
    2940:	ldr	r2, [pc, #32]	; (2964 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x30>)
    2942:	ldr	r1, [pc, #36]	; (2968 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x34>)
    2944:	ldr	r0, [pc, #36]	; (296c <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x38>)
    2946:	bl	2684 <SPIClass::SPIClass(unsigned int, unsigned int)>
SPIClass SPI2((uintptr_t)&IMXRT_LPSPI1_S, (uintptr_t)&SPIClass::spiclass_lpspi1_hardware);
    294a:	ldr	r2, [pc, #36]	; (2970 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x3c>)
    294c:	ldr	r1, [pc, #36]	; (2974 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x40>)
    294e:	ldr	r0, [pc, #40]	; (2978 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x44>)
    2950:	bl	2684 <SPIClass::SPIClass(unsigned int, unsigned int)>
}
    2954:	pop	{r3, pc}
    2956:	nop
    2958:	.word	0x20000924
    295c:	.word	0x403a0000
    2960:	.word	0x200057d0
    2964:	.word	0x200008b4
    2968:	.word	0x4039c000
    296c:	.word	0x20005820
    2970:	.word	0x20000844
    2974:	.word	0x40394000
    2978:	.word	0x20005870

0000297c <SDClass::~SDClass()>:
class SDClass : public FS
    297c:	bx	lr
    297e:	nop

00002980 <SDClass::dateTime(unsigned short*, unsigned short*)>:
{
    2980:	push	{r4, r5, lr}
    2982:	sub	sp, #12
    2984:	mov	r5, r0
    2986:	mov	r4, r1
uint32_t makeTime(const DateTimeFields &tm); // convert DateTimeFields to 32 bit time

class teensy3_clock_class
{
public:
        static unsigned long get(void) __attribute__((always_inline)) { return rtc_get(); }
    2988:	bl	baa0 <rtc_get>
	if (now < 315532800) { // before 1980
    298c:	ldr	r3, [pc, #112]	; (2a00 <SDClass::dateTime(unsigned short*, unsigned short*)+0x80>)
    298e:	cmp	r0, r3
    2990:	bhi.n	299c <SDClass::dateTime(unsigned short*, unsigned short*)+0x1c>
		*date = 0;
    2992:	movs	r3, #0
    2994:	strh	r3, [r5, #0]
		*time = 0;
    2996:	strh	r3, [r4, #0]
}
    2998:	add	sp, #12
    299a:	pop	{r4, r5, pc}
		breakTime(now, datetime);
    299c:	mov	r1, sp
    299e:	bl	c3c0 <breakTime(unsigned long, DateTimeFields&)>
		*date = FS_DATE(datetime.year + 1900, datetime.mon + 1, datetime.mday);
    29a2:	ldrb.w	r3, [sp, #5]
    29a6:	ldrb.w	r2, [sp, #6]
    29aa:	adds	r3, #1
    29ac:	ldrb.w	r1, [sp, #4]
  year -= 1980;
    29b0:	subs	r2, #80	; 0x50
    29b2:	uxtb	r3, r3
    29b4:	uxth	r2, r2
  return year > 127 || month > 12 || day > 31 ? 0
    29b6:	cmp	r1, #31
    29b8:	it	ls
    29ba:	cmpls	r3, #12
    29bc:	bhi.n	29c2 <SDClass::dateTime(unsigned short*, unsigned short*)+0x42>
    29be:	cmp	r2, #127	; 0x7f
    29c0:	bls.n	29f4 <SDClass::dateTime(unsigned short*, unsigned short*)+0x74>
                                              : year << 9 | month << 5 | day;
    29c2:	movs	r1, #0
		*time = FS_TIME(datetime.hour, datetime.min, datetime.sec);
    29c4:	ldrb.w	r2, [sp, #2]
    29c8:	ldrb.w	r3, [sp, #1]
		*date = FS_DATE(datetime.year + 1900, datetime.mon + 1, datetime.mday);
    29cc:	strh	r1, [r5, #0]
  return hour > 23 || minute > 59 || second > 59
    29ce:	cmp	r2, #23
    29d0:	it	ls
    29d2:	cmpls	r3, #59	; 0x3b
		*time = FS_TIME(datetime.hour, datetime.min, datetime.sec);
    29d4:	ldrb.w	r1, [sp]
    29d8:	bhi.n	29de <SDClass::dateTime(unsigned short*, unsigned short*)+0x5e>
    29da:	cmp	r1, #59	; 0x3b
    29dc:	bls.n	29e6 <SDClass::dateTime(unsigned short*, unsigned short*)+0x66>
             : hour << 11 | minute << 5 | second >> 1;
    29de:	movs	r3, #0
    29e0:	strh	r3, [r4, #0]
}
    29e2:	add	sp, #12
    29e4:	pop	{r4, r5, pc}
    29e6:	lsls	r3, r3, #5
    29e8:	orr.w	r3, r3, r2, lsl #11
    29ec:	orr.w	r3, r3, r1, lsr #1
    29f0:	uxth	r3, r3
    29f2:	b.n	29e0 <SDClass::dateTime(unsigned short*, unsigned short*)+0x60>
                                              : year << 9 | month << 5 | day;
    29f4:	orr.w	r1, r1, r3, lsl #5
    29f8:	orr.w	r1, r1, r2, lsl #9
    29fc:	uxth	r1, r1
    29fe:	b.n	29c4 <SDClass::dateTime(unsigned short*, unsigned short*)+0x44>
    2a00:	.word	0x12cea5ff

00002a04 <SDClass::open(char const*, unsigned char)>:
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
    2a04:	cmp	r3, #1
	File open(const char *filepath, uint8_t mode = FILE_READ) {
    2a06:	push	{r4, r5, r6, r7, lr}
    2a08:	mov	r5, r0
    2a0a:	sub	sp, #84	; 0x54
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
    2a0c:	beq.n	2a8c <SDClass::open(char const*, unsigned char)+0x88>
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
    2a0e:	cmp	r3, #2
    2a10:	movw	r0, #514	; 0x202
		SDFAT_FILE file = sdfs.open(filepath, flags);
    2a14:	add.w	r1, r1, #4
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
    2a18:	ite	eq
    2a1a:	moveq	r3, r0
    2a1c:	movne	r3, #0
		SDFAT_FILE file = sdfs.open(filepath, flags);
    2a1e:	mov	r0, sp
    2a20:	bl	79d4 <FsVolume::open(char const*, int)>
    2a24:	ldr	r3, [sp, #72]	; 0x48
    2a26:	cmp	r3, #0
    2a28:	beq.n	2a9e <SDClass::open(char const*, unsigned char)+0x9a>
		if (file) return File(new SDFile(file));
    2a2a:	movs	r0, #92	; 0x5c
class FileImpl {
    2a2c:	movs	r6, #0
    2a2e:	bl	d098 <operator new(unsigned int)>
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
    2a32:	ldr	r3, [pc, #132]	; (2ab8 <SDClass::open(char const*, unsigned char)+0xb4>)
    2a34:	add	r7, sp, #16
		if (file) return File(new SDFile(file));
    2a36:	mov	r4, r0
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
    2a38:	strd	r3, r6, [r0]
class Print
    2a3c:	ldrb.w	r3, [sp, #4]
    2a40:	mov	r1, r7
    2a42:	adds	r0, #24
    2a44:	strb.w	r3, [r0, #-12]
class Stream : public Print
    2a48:	ldr	r3, [pc, #112]	; (2abc <SDClass::open(char const*, unsigned char)+0xb8>)
    2a4a:	str.w	r3, [r0, #-16]
    2a4e:	ldr	r3, [sp, #8]
    2a50:	str.w	r3, [r0, #-8]
    2a54:	ldrb.w	r3, [sp, #12]
    2a58:	strb.w	r3, [r0, #-4]
    2a5c:	bl	76f8 <FsBaseFile::FsBaseFile(FsBaseFile const&)>
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    2a60:	ldr	r3, [pc, #92]	; (2ac0 <SDClass::open(char const*, unsigned char)+0xbc>)
	constexpr Stream() : _timeout(1000), read_error(0) {}
    2a62:	mov.w	r2, #1000	; 0x3e8
    2a66:	str	r6, [r4, #88]	; 0x58
    2a68:	str	r3, [r4, #8]
	File(FileImpl *file) {
    2a6a:	ldr	r3, [pc, #88]	; (2ac4 <SDClass::open(char const*, unsigned char)+0xc0>)
	constexpr Print() : write_error(0) {}
    2a6c:	strb	r6, [r5, #4]
    2a6e:	str	r3, [r5, #0]
		if (f) f->refcount++;
    2a70:	ldr	r3, [r4, #4]
    2a72:	strb	r6, [r5, #12]
    2a74:	adds	r3, #1
    2a76:	str	r2, [r5, #8]
		f = file;
    2a78:	str	r4, [r5, #16]
		if (f) f->refcount++;
    2a7a:	str	r3, [r4, #4]
    2a7c:	ldr	r3, [pc, #72]	; (2ac8 <SDClass::open(char const*, unsigned char)+0xc4>)
  ~FsBaseFile() { close(); }
    2a7e:	mov	r0, r7
    2a80:	str	r3, [sp, #0]
    2a82:	bl	777c <FsBaseFile::close()>
		return File();
	}
    2a86:	mov	r0, r5
    2a88:	add	sp, #84	; 0x54
    2a8a:	pop	{r4, r5, r6, r7, pc}
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
    2a8c:	movw	r3, #16898	; 0x4202
		SDFAT_FILE file = sdfs.open(filepath, flags);
    2a90:	adds	r1, #4
    2a92:	mov	r0, sp
    2a94:	bl	79d4 <FsVolume::open(char const*, int)>
  bool isOpen() const { return m_fFile || m_xFile; }
    2a98:	ldr	r3, [sp, #72]	; 0x48
    2a9a:	cmp	r3, #0
    2a9c:	bne.n	2a2a <SDClass::open(char const*, unsigned char)+0x26>
    2a9e:	ldr	r3, [sp, #76]	; 0x4c
    2aa0:	cmp	r3, #0
    2aa2:	bne.n	2a2a <SDClass::open(char const*, unsigned char)+0x26>
    2aa4:	mov.w	r1, #1000	; 0x3e8
	constexpr File() : f(nullptr) { }
    2aa8:	ldr	r2, [pc, #24]	; (2ac4 <SDClass::open(char const*, unsigned char)+0xc0>)
    2aaa:	add	r7, sp, #16
    2aac:	strb	r3, [r5, #4]
    2aae:	str	r1, [r5, #8]
    2ab0:	strb	r3, [r5, #12]
    2ab2:	str	r2, [r5, #0]
    2ab4:	str	r3, [r5, #16]
    2ab6:	b.n	2a7c <SDClass::open(char const*, unsigned char)+0x78>
    2ab8:	.word	0x20000ae8
    2abc:	.word	0x20000b44
    2ac0:	.word	0x20000ab8
    2ac4:	.word	0x20000a8c
    2ac8:	.word	0x2000099c

00002acc <SDClass::rmdir(char const*)>:
		return sdfs.rename(oldfilepath, newfilepath);
	}
	bool remove(const char *filepath) {
		return sdfs.remove(filepath);
	}
	bool rmdir(const char *filepath) {
    2acc:	push	{r4, lr}
   * The subdirectory file will be removed only if it is empty.
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char* path) {
    return m_fVol ? m_fVol->rmdir(path) : m_xVol ? m_xVol->rmdir(path) : false;
    2ace:	ldr.w	r4, [r0, #1156]	; 0x484
    2ad2:	sub	sp, #56	; 0x38
    2ad4:	mov	r2, r1
    2ad6:	cbz	r4, 2aea <SDClass::rmdir(char const*)+0x1e>
    2ad8:	movs	r3, #0
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char* path) {
    FatFile sub;
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    2ada:	mov	r1, r4
    2adc:	mov	r0, sp
    2ade:	str	r3, [sp, #0]
    2ae0:	bl	6024 <FatFile::open(FatVolume*, char const*, int)>
    2ae4:	cbnz	r0, 2b08 <SDClass::rmdir(char const*)+0x3c>
		return sdfs.rmdir(filepath);
	}
    2ae6:	add	sp, #56	; 0x38
    2ae8:	pop	{r4, pc}
    2aea:	ldr.w	r1, [r0, #1160]	; 0x488
    2aee:	cbz	r1, 2b02 <SDClass::rmdir(char const*)+0x36>
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char* path) {
    ExFatFile sub;
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    2af0:	mov	r3, r4
    2af2:	mov	r0, sp
    2af4:	str	r4, [sp, #48]	; 0x30
    2af6:	bl	43d8 <ExFatFile::open(ExFatVolume*, char const*, int)>
    2afa:	cbnz	r0, 2b12 <SDClass::rmdir(char const*)+0x46>
    2afc:	movs	r0, #0
    2afe:	add	sp, #56	; 0x38
    2b00:	pop	{r4, pc}
    2b02:	mov	r0, r1
    2b04:	add	sp, #56	; 0x38
    2b06:	pop	{r4, pc}
    2b08:	mov	r0, sp
    2b0a:	bl	64c4 <FatFile::rmdir()>
    2b0e:	add	sp, #56	; 0x38
    2b10:	pop	{r4, pc}
    2b12:	mov	r0, sp
    2b14:	bl	4a80 <ExFatFile::rmdir()>
    2b18:	cmp	r0, #0
    2b1a:	beq.n	2afc <SDClass::rmdir(char const*)+0x30>
    2b1c:	b.n	2ae6 <SDClass::rmdir(char const*)+0x1a>
    2b1e:	nop

00002b20 <SDClass::rename(char const*, char const*)>:
	bool rename(const char *oldfilepath, const char *newfilepath) {
    2b20:	push	{r4, r5, r6, lr}
    return m_fVol   ? m_fVol->rename(oldPath, newPath)
    2b22:	ldr.w	r5, [r0, #1156]	; 0x484
    2b26:	sub	sp, #56	; 0x38
    2b28:	mov	r6, r2
    2b2a:	cbz	r5, 2b44 <SDClass::rename(char const*, char const*)+0x24>
#endif  // ENABLE_ARDUINO_STRING

 private:
  friend FatFile;
  static FatVolume* cwv() { return m_cwv; }
  FatFile* vwd() { return &m_vwd; }
    2b2c:	addw	r5, r5, #1092	; 0x444
    2b30:	movs	r3, #0
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
    2b32:	mov	r2, r1
    2b34:	mov	r0, sp
    2b36:	mov	r1, r5
    2b38:	str	r3, [sp, #0]
    2b3a:	bl	5f2c <FatFile::open(FatFile*, char const*, int)>
    2b3e:	cbnz	r0, 2b66 <SDClass::rename(char const*, char const*)+0x46>
	}
    2b40:	add	sp, #56	; 0x38
    2b42:	pop	{r4, r5, r6, pc}
    2b44:	ldr.w	r0, [r0, #1160]	; 0x488
           : m_xVol ? m_xVol->rename(oldPath, newPath)
    2b48:	cmp	r0, #0
    2b4a:	beq.n	2b40 <SDClass::rename(char const*, char const*)+0x20>
#endif  // ENABLE_ARDUINO_STRING

 private:
  friend ExFatFile;
  static ExFatVolume* cwv() { return m_cwv; }
  ExFatFile* vwd() { return &m_vwd; }
    2b4c:	add.w	r4, r0, #1096	; 0x448
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
    2b50:	mov	r2, r1
    2b52:	mov	r3, r5
    2b54:	mov	r0, sp
    2b56:	mov	r1, r4
    2b58:	str	r5, [sp, #48]	; 0x30
    2b5a:	bl	42e4 <ExFatFile::open(ExFatFile*, char const*, int)>
    2b5e:	cbnz	r0, 2b74 <SDClass::rename(char const*, char const*)+0x54>
    2b60:	movs	r0, #0
    2b62:	add	sp, #56	; 0x38
    2b64:	pop	{r4, r5, r6, pc}
    2b66:	mov	r2, r6
    2b68:	mov	r1, r5
    2b6a:	mov	r0, sp
    2b6c:	bl	62d8 <FatFile::rename(FatFile*, char const*)>
    2b70:	add	sp, #56	; 0x38
    2b72:	pop	{r4, r5, r6, pc}
    2b74:	mov	r2, r6
    2b76:	mov	r1, r4
    2b78:	mov	r0, sp
    2b7a:	bl	4d28 <ExFatFile::rename(ExFatFile*, char const*)>
    2b7e:	cmp	r0, #0
    2b80:	beq.n	2b60 <SDClass::rename(char const*, char const*)+0x40>
    2b82:	b.n	2b40 <SDClass::rename(char const*, char const*)+0x20>

00002b84 <SDClass::remove(char const*)>:
	bool remove(const char *filepath) {
    2b84:	push	{r4, lr}
    return m_fVol   ? m_fVol->remove(path)
    2b86:	ldr.w	r4, [r0, #1156]	; 0x484
    2b8a:	sub	sp, #56	; 0x38
    2b8c:	mov	r2, r1
    2b8e:	cbz	r4, 2ba4 <SDClass::remove(char const*)+0x20>
    2b90:	movs	r0, #0
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    2b92:	movs	r3, #1
    2b94:	mov	r1, r4
    2b96:	str	r0, [sp, #0]
    2b98:	mov	r0, sp
    2b9a:	bl	6024 <FatFile::open(FatVolume*, char const*, int)>
    2b9e:	cbnz	r0, 2bc2 <SDClass::remove(char const*)+0x3e>
	}
    2ba0:	add	sp, #56	; 0x38
    2ba2:	pop	{r4, pc}
    2ba4:	ldr.w	r1, [r0, #1160]	; 0x488
           : m_xVol ? m_xVol->remove(path)
    2ba8:	cbz	r1, 2bbc <SDClass::remove(char const*)+0x38>
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    2baa:	movs	r3, #1
    2bac:	mov	r0, sp
    2bae:	str	r4, [sp, #48]	; 0x30
    2bb0:	bl	43d8 <ExFatFile::open(ExFatVolume*, char const*, int)>
    2bb4:	cbnz	r0, 2bcc <SDClass::remove(char const*)+0x48>
    2bb6:	movs	r0, #0
    2bb8:	add	sp, #56	; 0x38
    2bba:	pop	{r4, pc}
    2bbc:	mov	r0, r1
    2bbe:	add	sp, #56	; 0x38
    2bc0:	pop	{r4, pc}
    2bc2:	mov	r0, sp
    2bc4:	bl	75e8 <FatFile::remove()>
    2bc8:	add	sp, #56	; 0x38
    2bca:	pop	{r4, pc}
    2bcc:	mov	r0, sp
    2bce:	bl	49cc <ExFatFile::remove()>
    2bd2:	cmp	r0, #0
    2bd4:	beq.n	2bb6 <SDClass::remove(char const*)+0x32>
    2bd6:	b.n	2ba0 <SDClass::remove(char const*)+0x1c>

00002bd8 <SDClass::mkdir(char const*)>:
	bool mkdir(const char *filepath) {
    2bd8:	push	{r4, r5, lr}
    return m_fVol   ? m_fVol->mkdir(path, pFlag)
    2bda:	ldr.w	r4, [r0, #1156]	; 0x484
    2bde:	sub	sp, #60	; 0x3c
    2be0:	mov	r2, r1
    2be2:	cbz	r4, 2bf8 <SDClass::mkdir(char const*)+0x20>
    2be4:	movs	r5, #0
    return sub.mkdir(vwd(), path, pFlag);
    2be6:	movs	r3, #1
    2be8:	addw	r1, r4, #1092	; 0x444
    2bec:	mov	r0, sp
    2bee:	str	r5, [sp, #0]
    2bf0:	bl	5e48 <FatFile::mkdir(FatFile*, char const*, bool)>
	}
    2bf4:	add	sp, #60	; 0x3c
    2bf6:	pop	{r4, r5, pc}
    2bf8:	ldr.w	r0, [r0, #1160]	; 0x488
           : m_xVol ? m_xVol->mkdir(path, pFlag)
    2bfc:	cmp	r0, #0
    2bfe:	beq.n	2bf4 <SDClass::mkdir(char const*)+0x1c>
    return sub.mkdir(vwd(), path, pFlag);
    2c00:	add.w	r1, r0, #1096	; 0x448
    2c04:	movs	r3, #1
    2c06:	mov	r0, sp
    2c08:	str	r4, [sp, #48]	; 0x30
    2c0a:	bl	4e2c <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
    2c0e:	add	sp, #60	; 0x3c
    2c10:	pop	{r4, r5, pc}
    2c12:	nop

00002c14 <SDClass::exists(char const*)>:
	bool exists(const char *filepath) {
    2c14:	push	{r4, lr}
    return m_fVol   ? m_fVol->exists(path)
    2c16:	ldr.w	r4, [r0, #1156]	; 0x484
    2c1a:	sub	sp, #56	; 0x38
    2c1c:	mov	r2, r1
    2c1e:	cbz	r4, 2c30 <SDClass::exists(char const*)+0x1c>
    2c20:	movs	r3, #0
    return tmp.open(this, path, O_RDONLY);
    2c22:	mov	r1, r4
    2c24:	mov	r0, sp
    2c26:	str	r3, [sp, #0]
    2c28:	bl	6024 <FatFile::open(FatVolume*, char const*, int)>
	}
    2c2c:	add	sp, #56	; 0x38
    2c2e:	pop	{r4, pc}
    2c30:	ldr.w	r1, [r0, #1160]	; 0x488
           : m_xVol ? m_xVol->exists(path)
    2c34:	cbz	r1, 2c44 <SDClass::exists(char const*)+0x30>
    return tmp.open(this, path, O_RDONLY);
    2c36:	mov	r3, r4
    2c38:	mov	r0, sp
    2c3a:	str	r4, [sp, #48]	; 0x30
    2c3c:	bl	43d8 <ExFatFile::open(ExFatVolume*, char const*, int)>
    2c40:	add	sp, #56	; 0x38
    2c42:	pop	{r4, pc}
    2c44:	mov	r0, r1
    2c46:	add	sp, #56	; 0x38
    2c48:	pop	{r4, pc}
    2c4a:	nop

00002c4c <SDClass::usedSize()>:
	uint64_t usedSize() {
    2c4c:	push	{r3, r4, r5, r6, r7, lr}
    2c4e:	mov	r5, r0
		if (!cardPreviouslyPresent) return (uint64_t)0;
    2c50:	ldrb.w	r0, [r0, #1228]	; 0x4cc
    2c54:	cbnz	r0, 2c5a <SDClass::usedSize()+0xe>
    2c56:	mov	r1, r0
		return (uint64_t)(sdfs.clusterCount() - sdfs.freeClusterCount())
		  * (uint64_t)sdfs.bytesPerCluster();
	}
    2c58:	pop	{r3, r4, r5, r6, r7, pc}
    return m_fVol   ? m_fVol->clusterCount()
    2c5a:	ldr.w	r3, [r5, #1156]	; 0x484
    2c5e:	cmp	r3, #0
    2c60:	beq.n	2cfa <SDClass::usedSize()+0xae>
  /** Clear the cache and returns a pointer to the cache.  Not for normal apps.
   * \return A pointer to the cache buffer or zero if an error occurs.
   */
  uint8_t* cacheClear() { return m_cache.clear(); }
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const { return m_lastCluster - 1; }
    2c62:	ldr	r4, [r3, #28]
    2c64:	ldr.w	r0, [r5, #1164]	; 0x48c
    2c68:	subs	r4, #1
    }
    return rtn;
  }
  //----------------------------------------------------------------------------
  /** \return true if can be in dedicated SPI state */
  bool hasDedicatedSpi() { return m_card ? m_card->hasDedicatedSpi() : false; }
    2c6a:	cmp	r0, #0
    2c6c:	beq.n	2d26 <SDClass::usedSize()+0xda>
    2c6e:	ldr	r3, [r0, #0]
    2c70:	ldr	r3, [r3, #56]	; 0x38
    2c72:	blx	r3
    2c74:	cbz	r0, 2cb0 <SDClass::usedSize()+0x64>
    2c76:	ldr.w	r0, [r5, #1164]	; 0x48c
    }
    errorPrint(pr);
  }
  //----------------------------------------------------------------------------
  /** \return true if in dedicated SPI state. */
  bool isDedicatedSpi() { return m_card ? m_card->isDedicatedSpi() : false; }
    2c7a:	cbz	r0, 2cdc <SDClass::usedSize()+0x90>
    2c7c:	ldr	r3, [r0, #0]
    2c7e:	ldr	r3, [r3, #60]	; 0x3c
    2c80:	blx	r3
    2c82:	cbnz	r0, 2cb0 <SDClass::usedSize()+0x64>
    2c84:	ldr.w	r0, [r5, #1164]	; 0x48c
  /** Set SPI sharing state
   * \param[in] value desired state.
   * \return true for success else false;
   */
  bool setDedicatedSpi(bool value) {
    if (m_card) {
    2c88:	cbz	r0, 2cdc <SDClass::usedSize()+0x90>
      return m_card->setDedicatedSpi(value);
    2c8a:	ldr	r3, [r0, #0]
    2c8c:	movs	r1, #1
    2c8e:	ldr	r3, [r3, #64]	; 0x40
    2c90:	blx	r3
    if (switchSpi && !setDedicatedSpi(true)) {
    2c92:	mov	r7, r0
    2c94:	cbz	r0, 2cdc <SDClass::usedSize()+0x90>
    return m_fVol   ? m_fVol->freeClusterCount()
    2c96:	ldr.w	r0, [r5, #1156]	; 0x484
    2c9a:	cbnz	r0, 2cf4 <SDClass::usedSize()+0xa8>
    2c9c:	ldr.w	r3, [r5, #1160]	; 0x488
           : m_xVol ? m_xVol->freeClusterCount()
    2ca0:	cbnz	r3, 2cc0 <SDClass::usedSize()+0x74>
    2ca2:	ldr.w	r0, [r5, #1164]	; 0x48c
    if (m_card) {
    2ca6:	cmp	r0, #0
    2ca8:	beq.n	2d36 <SDClass::usedSize()+0xea>
    uint32_t rtn = Vol::freeClusterCount();
    2caa:	mov.w	r6, #4294967295
    2cae:	b.n	2cd0 <SDClass::usedSize()+0x84>
    return m_fVol   ? m_fVol->freeClusterCount()
    2cb0:	ldr.w	r0, [r5, #1156]	; 0x484
    2cb4:	cbnz	r0, 2cf2 <SDClass::usedSize()+0xa6>
    2cb6:	ldr.w	r3, [r5, #1160]	; 0x488
           : m_xVol ? m_xVol->freeClusterCount()
    2cba:	cmp	r3, #0
    2cbc:	beq.n	2d36 <SDClass::usedSize()+0xea>
    bool switchSpi = hasDedicatedSpi() && !isDedicatedSpi();
    2cbe:	mov	r7, r0
    2cc0:	mov	r0, r3
    2cc2:	bl	47c4 <ExFatPartition::freeClusterCount()>
    uint32_t rtn = Vol::freeClusterCount();
    2cc6:	mov	r6, r0
    if (switchSpi && !setDedicatedSpi(false)) {
    2cc8:	cbz	r7, 2cda <SDClass::usedSize()+0x8e>
    2cca:	ldr.w	r0, [r5, #1164]	; 0x48c
    if (m_card) {
    2cce:	cbz	r0, 2cdc <SDClass::usedSize()+0x90>
      return m_card->setDedicatedSpi(value);
    2cd0:	ldr	r3, [r0, #0]
    2cd2:	movs	r1, #0
    2cd4:	ldr	r3, [r3, #64]	; 0x40
    2cd6:	blx	r3
    if (switchSpi && !setDedicatedSpi(false)) {
    2cd8:	cbz	r0, 2cdc <SDClass::usedSize()+0x90>
		return (uint64_t)(sdfs.clusterCount() - sdfs.freeClusterCount())
    2cda:	subs	r4, r4, r6
    return m_fVol   ? m_fVol->bytesPerCluster()
    2cdc:	ldr.w	r3, [r5, #1156]	; 0x484
    2ce0:	cbz	r3, 2d16 <SDClass::usedSize()+0xca>
    return m_bytesPerSector << m_sectorsPerClusterShift;
    2ce2:	ldrb	r3, [r3, #6]
    2ce4:	mov.w	r1, #512	; 0x200
    2ce8:	lsls	r1, r3
		  * (uint64_t)sdfs.bytesPerCluster();
    2cea:	uxth	r1, r1
    2cec:	umull	r0, r1, r1, r4
	}
    2cf0:	pop	{r3, r4, r5, r6, r7, pc}
    bool switchSpi = hasDedicatedSpi() && !isDedicatedSpi();
    2cf2:	movs	r7, #0
    return m_fVol   ? m_fVol->freeClusterCount()
    2cf4:	bl	6ce4 <FatPartition::freeClusterCount()>
    2cf8:	b.n	2cc6 <SDClass::usedSize()+0x7a>
    2cfa:	ldr.w	r3, [r5, #1160]	; 0x488
  uint32_t clusterCount() const {
    2cfe:	ldr.w	r0, [r5, #1164]	; 0x48c
           : m_xVol ? m_xVol->clusterCount()
    2d02:	cbz	r3, 2d30 <SDClass::usedSize()+0xe4>
  /** Clear the cache and returns a pointer to the cache.  Not for normal apps.
   * \return A pointer to the cache buffer or zero if an error occurs.
   */
  uint8_t* cacheClear() { return m_dataCache.clear(); }
  /** \return the cluster count for the partition. */
  uint32_t clusterCount() const { return m_clusterCount; }
    2d04:	ldr.w	r4, [r3, #1072]	; 0x430
  bool hasDedicatedSpi() { return m_card ? m_card->hasDedicatedSpi() : false; }
    2d08:	cmp	r0, #0
    2d0a:	bne.n	2c6e <SDClass::usedSize()+0x22>
           : m_xVol ? m_xVol->freeClusterCount()
    2d0c:	mov	r0, r3
    2d0e:	bl	47c4 <ExFatPartition::freeClusterCount()>
    2d12:	mov	r6, r0
    2d14:	b.n	2cda <SDClass::usedSize()+0x8e>
    2d16:	ldr.w	r3, [r5, #1160]	; 0x488
           : m_xVol ? m_xVol->bytesPerCluster()
    2d1a:	cbz	r3, 2d36 <SDClass::usedSize()+0xea>
		  * (uint64_t)sdfs.bytesPerCluster();
    2d1c:	ldr.w	r1, [r3, #1084]	; 0x43c
    2d20:	umull	r0, r1, r1, r4
	}
    2d24:	pop	{r3, r4, r5, r6, r7, pc}
    return m_fVol   ? m_fVol->freeClusterCount()
    2d26:	mov	r0, r3
    2d28:	bl	6ce4 <FatPartition::freeClusterCount()>
    2d2c:	mov	r6, r0
    2d2e:	b.n	2cda <SDClass::usedSize()+0x8e>
    2d30:	cbz	r0, 2d36 <SDClass::usedSize()+0xea>
           : m_xVol ? m_xVol->clusterCount()
    2d32:	mov	r4, r3
    2d34:	b.n	2c6e <SDClass::usedSize()+0x22>
  uint32_t bytesPerCluster() const {
    2d36:	movs	r0, #0
    2d38:	mov	r1, r0
    2d3a:	b.n	2c58 <SDClass::usedSize()+0xc>

00002d3c <SDClass::totalSize()>:
	uint64_t totalSize() {
		if (!cardPreviouslyPresent) return (uint64_t)0;
    2d3c:	ldrb.w	r3, [r0, #1228]	; 0x4cc
    2d40:	cbz	r3, 2d5c <SDClass::totalSize()+0x20>
    return m_fVol   ? m_fVol->clusterCount()
    2d42:	ldr.w	r3, [r0, #1156]	; 0x484
    2d46:	cbz	r3, 2d62 <SDClass::totalSize()+0x26>
    2d48:	ldrb	r2, [r3, #6]
    2d4a:	mov.w	r0, #512	; 0x200
  uint32_t clusterCount() const { return m_lastCluster - 1; }
    2d4e:	ldr	r1, [r3, #28]
    return m_bytesPerSector << m_sectorsPerClusterShift;
    2d50:	lsls	r0, r2
  uint32_t clusterCount() const { return m_lastCluster - 1; }
    2d52:	subs	r1, #1
		return (uint64_t)sdfs.clusterCount() * (uint64_t)sdfs.bytesPerCluster();
    2d54:	uxth	r0, r0
    2d56:	umull	r0, r1, r0, r1
    2d5a:	bx	lr
		if (!cardPreviouslyPresent) return (uint64_t)0;
    2d5c:	mov	r0, r3
    2d5e:	mov	r1, r0
	}
    2d60:	bx	lr
    2d62:	ldr.w	r0, [r0, #1160]	; 0x488
           : m_xVol ? m_xVol->clusterCount()
    2d66:	cmp	r0, #0
    2d68:	beq.n	2d5e <SDClass::totalSize()+0x22>
		return (uint64_t)sdfs.clusterCount() * (uint64_t)sdfs.bytesPerCluster();
    2d6a:	ldr.w	r1, [r0, #1084]	; 0x43c
    2d6e:	ldr.w	r0, [r0, #1072]	; 0x430
    2d72:	umull	r0, r1, r1, r0
    2d76:	bx	lr

00002d78 <SDClass::format(int, char, Print&)>:
{
    2d78:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  SdCard* card() { return m_card; }
    2d7c:	ldr.w	r5, [r0, #1164]	; 0x48c
    2d80:	sub	sp, #60	; 0x3c
	if (!card) return false; // no SD card
    2d82:	cbz	r5, 2d98 <SDClass::format(int, char, Print&)+0x20>
    2d84:	mov	r8, r3
	uint32_t sectors = card->sectorCount();
    2d86:	ldr	r3, [r5, #0]
    2d88:	mov	r4, r0
    2d8a:	mov	r0, r5
    2d8c:	ldr	r3, [r3, #24]
    2d8e:	blx	r3
	if (sectors <= 12288) return false; // card too small
    2d90:	cmp.w	r0, #12288	; 0x3000
	uint32_t sectors = card->sectorCount();
    2d94:	mov	r6, r0
	if (sectors <= 12288) return false; // card too small
    2d96:	bhi.n	2da2 <SDClass::format(int, char, Print&)+0x2a>
	if (!card) return false; // no SD card
    2d98:	movs	r6, #0
}
    2d9a:	mov	r0, r6
    2d9c:	add	sp, #60	; 0x3c
    2d9e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint8_t *buf = (uint8_t *)malloc(512);
    2da2:	mov.w	r0, #512	; 0x200
    2da6:	bl	d230 <malloc>
	if (!buf) return false; // unable to allocate memory
    2daa:	mov	r7, r0
    2dac:	cmp	r0, #0
    2dae:	beq.n	2d98 <SDClass::format(int, char, Print&)+0x20>
		ret = exFatFormatter.format(card, buf, &pr);
    2db0:	add.w	r9, sp, #12
	if (sectors > 67108864) {
    2db4:	cmp.w	r6, #67108864	; 0x4000000
		ret = exFatFormatter.format(card, buf, &pr);
    2db8:	mov	r2, r0
    2dba:	mov	r3, r8
    2dbc:	mov	r1, r5
    2dbe:	mov	r0, r9
	if (sectors > 67108864) {
    2dc0:	bls.n	2e22 <SDClass::format(int, char, Print&)+0xaa>
		ret = exFatFormatter.format(card, buf, &pr);
    2dc2:	bl	348c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)>
    2dc6:	mov	r6, r0
	free(buf);
    2dc8:	mov	r0, r7
    2dca:	bl	d240 <free>
	if (ret) {
    2dce:	cmp	r6, #0
    2dd0:	beq.n	2d98 <SDClass::format(int, char, Print&)+0x20>
		card->syncDevice();
    2dd2:	ldr	r3, [r5, #0]
    2dd4:	mov	r0, r5
		sdfs.restart(); // TODO: is sdfs.volumeBegin() enough??
    2dd6:	adds	r7, r4, #4
		card->syncDevice();
    2dd8:	ldr	r3, [r3, #28]
    2dda:	blx	r3
    if (spiConfigBackupPin == 255) {
    2ddc:	ldrb.w	r3, [r4, #1212]	; 0x4bc
    2de0:	cmp	r3, #255	; 0xff
    2de2:	beq.n	2e2a <SDClass::format(int, char, Print&)+0xb2>
      SdSpiConfig spiConfig(spiConfigBackupPin, spiConfigBackupOptions,
    2de4:	ldr.w	r3, [r4, #1216]	; 0x4c0
   *
   * \param[in] config SPI configuration.
   * \return generic card pointer.
   */
  SdCard* newCard(SdSpiConfig config) {
    m_spiCard.begin(config);
    2de8:	addw	r5, r4, #1180	; 0x49c
    2dec:	str	r3, [sp, #16]
    2dee:	mov	r0, r5
    2df0:	ldr.w	r3, [r4, #1220]	; 0x4c4
  bool cardBegin(SdSpiConfig spiConfig) {
    2df4:	str	r3, [sp, #20]
    2df6:	ldrh.w	r3, [r4, #1212]	; 0x4bc
    2dfa:	strh.w	r3, [sp, #12]
    2dfe:	ldmia.w	r9, {r1, r2, r3}
    2e02:	bl	8998 <DedicatedSpiCard::begin(SdSpiConfig)>
    return m_card && !m_card->errorCode();
    2e06:	ldrb.w	r2, [r4, #1198]	; 0x4ae
    m_card = m_cardFactory.newCard(spiConfig);
    2e0a:	str.w	r5, [r4, #1164]	; 0x48c
    return m_card && !m_card->errorCode();
    2e0e:	cmp	r2, #0
    2e10:	bne.n	2d9a <SDClass::format(int, char, Print&)+0x22>
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    2e12:	movs	r3, #1
    2e14:	str	r2, [sp, #0]
    2e16:	mov	r1, r5
    2e18:	mov	r0, r7
    2e1a:	mov	r2, r3
    2e1c:	bl	78c0 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)>
    2e20:	b.n	2d9a <SDClass::format(int, char, Print&)+0x22>
		ret = fatFormatter.format(card, buf, &pr);
    2e22:	bl	5844 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)>
    2e26:	mov	r6, r0
    2e28:	b.n	2dc8 <SDClass::format(int, char, Print&)+0x50>
   * \param[in] config SDIO configuration.
   * \return generic card pointer or nullptr if SDIO is not supported.
   */
  SdCard* newCard(SdioConfig config) {
#if HAS_SDIO_CLASS
    m_sdioCard.begin(config);
    2e2a:	add.w	r5, r4, #1168	; 0x490
    2e2e:	ldrb.w	r1, [r4, #1224]	; 0x4c8
    2e32:	mov	r0, r5
    2e34:	bl	9408 <SdioCard::begin(SdioConfig)>
    return m_card && !m_card->errorCode();
    2e38:	mov	r0, r5
    m_card = m_cardFactory.newCard(sdioConfig);
    2e3a:	str.w	r5, [r4, #1164]	; 0x48c
    return m_card && !m_card->errorCode();
    2e3e:	bl	8aec <SdioCard::errorCode() const>
    2e42:	mov	r2, r0
    2e44:	cmp	r0, #0
    2e46:	bne.n	2d9a <SDClass::format(int, char, Print&)+0x22>
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    2e48:	movs	r3, #1
    2e4a:	ldr.w	r1, [r4, #1164]	; 0x48c
    2e4e:	mov	r0, r7
    2e50:	str	r2, [sp, #0]
    2e52:	mov	r2, r3
    2e54:	bl	78c0 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)>
    2e58:	b.n	2d9a <SDClass::format(int, char, Print&)+0x22>
    2e5a:	nop

00002e5c <SDClass::mediaPresent()>:
{
    2e5c:	push	{r4, r5, r6, r7, lr}
  SdCard* card() { return m_card; }
    2e5e:	ldr.w	r6, [r0, #1164]	; 0x48c
    2e62:	sub	sp, #28
    2e64:	mov	r4, r0
	if (card) {
    2e66:	cmp	r6, #0
    2e68:	beq.n	2ef2 <SDClass::mediaPresent()+0x96>
		if (cardPreviouslyPresent) {
    2e6a:	ldrb.w	r5, [r0, #1228]	; 0x4cc
			if (csPin_ == BUILTIN_SDCARD) {
    2e6e:	ldrb.w	r3, [r0, #1229]	; 0x4cd
		if (cardPreviouslyPresent) {
    2e72:	cbz	r5, 2e96 <SDClass::mediaPresent()+0x3a>
			if (csPin_ == BUILTIN_SDCARD) {
    2e74:	cmp	r3, #254	; 0xfe
    2e76:	beq.n	2f46 <SDClass::mediaPresent()+0xea>
				if (cdPin_ < NUM_DIGITAL_PINS) ret = digitalRead(cdPin_);
    2e78:	ldrb.w	r0, [r4, #1230]	; 0x4ce
    2e7c:	cmp	r0, #54	; 0x36
    2e7e:	bls.n	2efe <SDClass::mediaPresent()+0xa2>
					ret = card->readCID(&cid);
    2e80:	ldr	r3, [r6, #0]
    2e82:	add	r1, sp, #8
    2e84:	mov	r0, r6
    2e86:	ldr	r3, [r3, #68]	; 0x44
    2e88:	blx	r3
    2e8a:	mov	r5, r0
}
    2e8c:	mov	r0, r5
	cardPreviouslyPresent = ret;
    2e8e:	strb.w	r5, [r4, #1228]	; 0x4cc
}
    2e92:	add	sp, #28
    2e94:	pop	{r4, r5, r6, r7, pc}
			if (csPin_ == BUILTIN_SDCARD) ret = digitalReadFast(_SD_DAT3);
    2e96:	cmp	r3, #254	; 0xfe
    2e98:	beq.n	2eea <SDClass::mediaPresent()+0x8e>
				if (cdPin_ < NUM_DIGITAL_PINS) ret = digitalRead(cdPin_);
    2e9a:	ldrb.w	r0, [r0, #1230]	; 0x4ce
    2e9e:	cmp	r0, #54	; 0x36
    2ea0:	bls.n	2f3c <SDClass::mediaPresent()+0xe0>
    if (spiConfigBackupPin == 255) {
    2ea2:	ldrb.w	r3, [r4, #1212]	; 0x4bc
				ret = sdfs.restart();
    2ea6:	adds	r7, r4, #4
    2ea8:	cmp	r3, #255	; 0xff
    2eaa:	beq.n	2f0a <SDClass::mediaPresent()+0xae>
      SdSpiConfig spiConfig(spiConfigBackupPin, spiConfigBackupOptions,
    2eac:	ldr.w	r3, [r4, #1216]	; 0x4c0
    m_spiCard.begin(config);
    2eb0:	addw	r6, r4, #1180	; 0x49c
    2eb4:	ldr.w	r2, [r4, #1220]	; 0x4c4
  bool cardBegin(SdSpiConfig spiConfig) {
    2eb8:	str	r3, [sp, #12]
    2eba:	mov	r0, r6
    2ebc:	ldrh.w	r3, [r4, #1212]	; 0x4bc
    2ec0:	str	r2, [sp, #16]
    2ec2:	strh.w	r3, [sp, #8]
    2ec6:	add	r3, sp, #8
    2ec8:	ldmia	r3, {r1, r2, r3}
    2eca:	bl	8998 <DedicatedSpiCard::begin(SdSpiConfig)>
    return m_card && !m_card->errorCode();
    2ece:	ldrb.w	r2, [r4, #1198]	; 0x4ae
    m_card = m_cardFactory.newCard(spiConfig);
    2ed2:	str.w	r6, [r4, #1164]	; 0x48c
    return m_card && !m_card->errorCode();
    2ed6:	cbnz	r2, 2ef4 <SDClass::mediaPresent()+0x98>
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    2ed8:	movs	r3, #1
    2eda:	str	r2, [sp, #0]
    2edc:	mov	r1, r6
    2ede:	mov	r0, r7
    2ee0:	mov	r2, r3
    2ee2:	bl	78c0 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)>
    2ee6:	mov	r5, r0
    2ee8:	b.n	2ef4 <SDClass::mediaPresent()+0x98>
			return (CORE_PIN46_PINREG & CORE_PIN46_BITMASK) ? 1 : 0;
    2eea:	ldr	r3, [pc, #128]	; (2f6c <SDClass::mediaPresent()+0x110>)
    2eec:	ldr	r3, [r3, #8]
			if (ret)
    2eee:	lsls	r3, r3, #14
    2ef0:	bmi.n	2ea2 <SDClass::mediaPresent()+0x46>
		ret = false;
    2ef2:	movs	r5, #0
}
    2ef4:	mov	r0, r5
	cardPreviouslyPresent = ret;
    2ef6:	strb.w	r5, [r4, #1228]	; 0x4cc
}
    2efa:	add	sp, #28
    2efc:	pop	{r4, r5, r6, r7, pc}
				if (cdPin_ < NUM_DIGITAL_PINS) ret = digitalRead(cdPin_);
    2efe:	bl	bc4c <digitalRead>
    2f02:	subs	r5, r0, #0
    2f04:	it	ne
    2f06:	movne	r5, #1
    2f08:	b.n	2ef4 <SDClass::mediaPresent()+0x98>
    m_sdioCard.begin(config);
    2f0a:	add.w	r6, r4, #1168	; 0x490
    2f0e:	ldrb.w	r1, [r4, #1224]	; 0x4c8
    2f12:	mov	r0, r6
    2f14:	bl	9408 <SdioCard::begin(SdioConfig)>
    return m_card && !m_card->errorCode();
    2f18:	mov	r0, r6
    m_card = m_cardFactory.newCard(sdioConfig);
    2f1a:	str.w	r6, [r4, #1164]	; 0x48c
    return m_card && !m_card->errorCode();
    2f1e:	bl	8aec <SdioCard::errorCode() const>
    2f22:	mov	r2, r0
    2f24:	cmp	r0, #0
    2f26:	bne.n	2ef4 <SDClass::mediaPresent()+0x98>
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    2f28:	movs	r3, #1
    2f2a:	str	r2, [sp, #0]
    2f2c:	mov	r0, r7
    2f2e:	ldr.w	r1, [r4, #1164]	; 0x48c
    2f32:	mov	r2, r3
    2f34:	bl	78c0 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)>
    2f38:	mov	r5, r0
    2f3a:	b.n	2ef4 <SDClass::mediaPresent()+0x98>
				if (cdPin_ < NUM_DIGITAL_PINS) ret = digitalRead(cdPin_);
    2f3c:	bl	bc4c <digitalRead>
			if (ret)
    2f40:	cmp	r0, #0
    2f42:	bne.n	2ea2 <SDClass::mediaPresent()+0x46>
    2f44:	b.n	2ef2 <SDClass::mediaPresent()+0x96>
				s = card->status();
    2f46:	ldr	r3, [r6, #0]
    2f48:	mov	r0, r6
    2f4a:	ldr	r3, [r3, #88]	; 0x58
    2f4c:	blx	r3
			if (s == 0xFFFFFFFF) {
    2f4e:	adds	r2, r0, #1
				s = card->status();
    2f50:	mov	r3, r0
			if (s == 0xFFFFFFFF) {
    2f52:	beq.n	2e78 <SDClass::mediaPresent()+0x1c>
			} else if (s == 0) {
    2f54:	cmp	r0, #0
    2f56:	bne.n	2ef4 <SDClass::mediaPresent()+0x98>
				if (csPin_ == BUILTIN_SDCARD) 
    2f58:	ldrb.w	r2, [r4, #1229]	; 0x4cd
    2f5c:	cmp	r2, #254	; 0xfe
    2f5e:	bne.n	2ef2 <SDClass::mediaPresent()+0x96>
					pinMode(_SD_DAT3, INPUT_PULLDOWN);
    2f60:	movs	r1, #3
    2f62:	movs	r0, #46	; 0x2e
				ret = false;
    2f64:	mov	r5, r3
					pinMode(_SD_DAT3, INPUT_PULLDOWN);
    2f66:	bl	bc70 <pinMode>
    2f6a:	b.n	2ef4 <SDClass::mediaPresent()+0x98>
    2f6c:	.word	0x42008000

00002f70 <SDClass::begin(unsigned char)>:
bool SDClass::begin(uint8_t csPin) {
    2f70:	push	{r4, r5, r6, r7, lr}
    2f72:	mov	r5, r1
    2f74:	mov	r4, r0
    2f76:	sub	sp, #28
	FsDateTime::setCallback(dateTime);
    2f78:	ldr	r0, [pc, #196]	; (3040 <SDClass::begin(unsigned char)+0xd0>)
    2f7a:	bl	32e8 <FsDateTime::setCallback(void (*)(unsigned short*, unsigned short*))>
	if (csPin == BUILTIN_SDCARD) {
    2f7e:	cmp	r5, #254	; 0xfe
	csPin_ = csPin; // remember which one passed in. 
    2f80:	strb.w	r5, [r4, #1229]	; 0x4cd
	if (csPin == BUILTIN_SDCARD) {
    2f84:	beq.n	2fd4 <SDClass::begin(unsigned char)+0x64>
	if (csPin < NUM_DIGITAL_PINS) {
    2f86:	cmp	r5, #54	; 0x36
    2f88:	bls.n	2f90 <SDClass::begin(unsigned char)+0x20>
	return false;
    2f8a:	movs	r0, #0
}
    2f8c:	add	sp, #28
    2f8e:	pop	{r4, r5, r6, r7, pc}
    spiConfigBackupOptions = spiConfig.options;
    2f90:	movs	r6, #0
    spiConfigBackupClock = spiConfig.maxSck;
    2f92:	ldr	r3, [pc, #176]	; (3044 <SDClass::begin(unsigned char)+0xd4>)
    m_spiCard.begin(config);
    2f94:	addw	r7, r4, #1180	; 0x49c
    2f98:	strb.w	r5, [sp, #12]
    2f9c:	str.w	r3, [r4, #1216]	; 0x4c0
    2fa0:	strb.w	r6, [sp, #13]
    2fa4:	mov	r0, r7
    spiConfigBackupPin = spiConfig.csPin; 
    2fa6:	strb.w	r5, [r4, #1212]	; 0x4bc
    spiConfigBackupOptions = spiConfig.options;
    2faa:	strb.w	r6, [r4, #1213]	; 0x4bd
    spiConfigBackupPort = spiConfig.spiPort;
    2fae:	str.w	r6, [r4, #1220]	; 0x4c4
    2fb2:	strd	r3, r6, [sp, #16]
    2fb6:	add	r3, sp, #24
    2fb8:	ldmdb	r3, {r1, r2, r3}
    2fbc:	bl	8998 <DedicatedSpiCard::begin(SdSpiConfig)>
    return m_card && !m_card->errorCode();
    2fc0:	ldrb.w	r2, [r4, #1198]	; 0x4ae
    m_card = m_cardFactory.newCard(spiConfig);
    2fc4:	str.w	r7, [r4, #1164]	; 0x48c
    return m_card && !m_card->errorCode();
    2fc8:	cbz	r2, 3030 <SDClass::begin(unsigned char)+0xc0>
    return cardBegin(spiConfig) && Vol::begin(m_card);
    2fca:	mov	r0, r6
		cardPreviouslyPresent = ret;
    2fcc:	strb.w	r0, [r4, #1228]	; 0x4cc
}
    2fd0:	add	sp, #28
    2fd2:	pop	{r4, r5, r6, r7, pc}
    sdioConfigBackup = sdioConfig;
    2fd4:	movs	r3, #0
    spiConfigBackupPin = 255; // Teensy
    2fd6:	movs	r2, #255	; 0xff
    m_sdioCard.begin(config);
    2fd8:	add.w	r5, r4, #1168	; 0x490
    2fdc:	strb.w	r2, [r4, #1212]	; 0x4bc
    2fe0:	mov	r1, r3
    sdioConfigBackup = sdioConfig;
    2fe2:	strb.w	r3, [r4, #1224]	; 0x4c8
    2fe6:	mov	r0, r5
    2fe8:	bl	9408 <SdioCard::begin(SdioConfig)>
    return m_card && !m_card->errorCode();
    2fec:	mov	r0, r5
    m_card = m_cardFactory.newCard(sdioConfig);
    2fee:	str.w	r5, [r4, #1164]	; 0x48c
    return m_card && !m_card->errorCode();
    2ff2:	bl	8aec <SdioCard::errorCode() const>
    2ff6:	mov	r2, r0
    2ff8:	cbnz	r0, 301a <SDClass::begin(unsigned char)+0xaa>
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    2ffa:	movs	r3, #1
    2ffc:	ldr.w	r1, [r4, #1164]	; 0x48c
    3000:	adds	r0, r4, #4
    3002:	str	r2, [sp, #0]
    3004:	mov	r2, r3
    3006:	bl	78c0 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)>
    300a:	cbz	r0, 301a <SDClass::begin(unsigned char)+0xaa>
		cardPreviouslyPresent = ret;
    300c:	movs	r2, #1
		cdPin_ = _SD_DAT3;
    300e:	movs	r3, #46	; 0x2e
		cardPreviouslyPresent = ret;
    3010:	strb.w	r2, [r4, #1228]	; 0x4cc
		cdPin_ = _SD_DAT3;
    3014:	strb.w	r3, [r4, #1230]	; 0x4ce
		if (!ret) pinMode(_SD_DAT3, INPUT_PULLDOWN);
    3018:	b.n	2f8c <SDClass::begin(unsigned char)+0x1c>
		cdPin_ = _SD_DAT3;
    301a:	movs	r0, #46	; 0x2e
		cardPreviouslyPresent = ret;
    301c:	movs	r5, #0
		if (!ret) pinMode(_SD_DAT3, INPUT_PULLDOWN);
    301e:	movs	r1, #3
		cdPin_ = _SD_DAT3;
    3020:	strb.w	r0, [r4, #1230]	; 0x4ce
		cardPreviouslyPresent = ret;
    3024:	strb.w	r5, [r4, #1228]	; 0x4cc
		if (!ret) pinMode(_SD_DAT3, INPUT_PULLDOWN);
    3028:	bl	bc70 <pinMode>
    302c:	mov	r0, r5
    302e:	b.n	2f8c <SDClass::begin(unsigned char)+0x1c>
    3030:	movs	r3, #1
    3032:	str	r2, [sp, #0]
    3034:	mov	r1, r7
    3036:	adds	r0, r4, #4
    3038:	mov	r2, r3
    303a:	bl	78c0 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)>
    303e:	b.n	2fcc <SDClass::begin(unsigned char)+0x5c>
    3040:	.word	0x00002981
    3044:	.word	0x017d7840

00003048 <_GLOBAL__sub_I_SD>:
	SDClass() { }
    3048:	ldr	r0, [pc, #108]	; (30b8 <_GLOBAL__sub_I_SD+0x70>)
  FsVolume() = default;
    304a:	movs	r3, #0
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
    304c:	ldr	r2, [pc, #108]	; (30bc <_GLOBAL__sub_I_SD+0x74>)
    304e:	mov.w	ip, #255	; 0xff
	SPISettings() : _clock(4000000) {
    3052:	ldr	r1, [pc, #108]	; (30c0 <_GLOBAL__sub_I_SD+0x78>)
	}
	return true;
}
    3054:	push	{r4}
    3056:	ldr	r4, [pc, #108]	; (30c4 <_GLOBAL__sub_I_SD+0x7c>)
    3058:	str.w	r2, [r0, #1168]	; 0x490
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
    305c:	movs	r2, #7
    305e:	str	r4, [r0, #0]
  /** SD is in multi-sector read state. */
  static const uint8_t READ_STATE = 1;
  /** SD is in multi-sector write state. */
  static const uint8_t WRITE_STATE = 2;
  /** Construct an instance of SharedSpiCard. */
  SharedSpiCard() { initSharedSpiCard(); }
    3060:	mov.w	r4, #2752512	; 0x2a0000
	SPISettings() : _clock(4000000) {
    3064:	str.w	r1, [r0, #1188]	; 0x4a4
    3068:	mov.w	r1, #65280	; 0xff00
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
    306c:	str.w	r2, [r0, #1192]	; 0x4a8
 * \brief Raw access to SD and SDHC flash memory cards via dedicate SPI port.
 */
class DedicatedSpiCard : public SharedSpiCard {
 public:
  /** Construct an instance of DedicatedSpiCard. */
  DedicatedSpiCard() = default;
    3070:	ldr	r2, [pc, #84]	; (30c8 <_GLOBAL__sub_I_SD+0x80>)
    3072:	strh.w	r1, [r0, #1228]	; 0x4cc
  SdioConfig() {}
    3076:	strh.w	r3, [r0, #1176]	; 0x498
  SharedSpiCard() { initSharedSpiCard(); }
    307a:	str.w	r4, [r0, #1196]	; 0x4ac
    307e:	strh.w	r3, [r0, #1200]	; 0x4b0
    m_type = 0;
    3082:	strb.w	r3, [r0, #1202]	; 0x4b2
    3086:	strb.w	r3, [r0, #1224]	; 0x4c8
    308a:	strb.w	ip, [r0, #1230]	; 0x4ce
  DedicatedSpiCard() = default;
    308e:	str.w	r2, [r0, #1180]	; 0x49c
SDClass SD;
    3092:	ldr	r1, [pc, #56]	; (30cc <_GLOBAL__sub_I_SD+0x84>)
    3094:	ldr	r2, [pc, #56]	; (30d0 <_GLOBAL__sub_I_SD+0x88>)
}
    3096:	ldr.w	r4, [sp], #4
    309a:	str.w	r3, [r0, #1156]	; 0x484
    309e:	str.w	r3, [r0, #1160]	; 0x488
class SdBase : public Vol {
    30a2:	str.w	r3, [r0, #1164]	; 0x48c
 * \brief Optimized SPI class for access to SD and SDHC flash memory cards.
 */
class SdSpiArduinoDriver {
 public:
  /** Constructor. */
  SdSpiArduinoDriver() = default;
    30a6:	str.w	r3, [r0, #1184]	; 0x4a0
    30aa:	str.w	r3, [r0, #1204]	; 0x4b4
    30ae:	strb.w	r3, [r0, #1208]	; 0x4b8
SDClass SD;
    30b2:	b.w	d224 <__aeabi_atexit>
    30b6:	nop
    30b8:	.word	0x20005300
    30bc:	.word	0x20000bbc
    30c0:	.word	0x003d0900
    30c4:	.word	0x20000b68
    30c8:	.word	0x200009f0
    30cc:	.word	0x0000297d
    30d0:	.word	0x20001484

000030d4 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)>:
  uint32_t c;
  uint8_t h;
  uint8_t s;

  uint8_t numberOfHeads;
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
    30d4:	cmp.w	r1, #256	; 0x100
    30d8:	bhi.n	311e <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x4a>
  if (capacityMB <= 16) {
    30da:	cmp	r1, #16
    30dc:	bhi.n	313c <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x68>
    30de:	movs	r3, #64	; 0x40
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
    30e0:	mov.w	ip, #32
  } else if (capacityMB <= 4032) {
    numberOfHeads = 128;
  } else {
    numberOfHeads = 255;
  }
  c = lba / (numberOfHeads * sectorsPerTrack);
    30e4:	udiv	r1, r2, r3
  if (c <= 1023) {
    30e8:	cmp.w	r1, #1024	; 0x400
    30ec:	bcs.n	3130 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x5c>
    h = (lba % (numberOfHeads * sectorsPerTrack)) / sectorsPerTrack;
    30ee:	mls	r3, r3, r1, r2
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba) {
    30f2:	push	{lr}
    s = (lba % sectorsPerTrack) + 1;
    30f4:	udiv	lr, r2, ip
    h = (lba % (numberOfHeads * sectorsPerTrack)) / sectorsPerTrack;
    30f8:	udiv	r3, r3, ip
    s = (lba % sectorsPerTrack) + 1;
    30fc:	mls	r2, ip, lr, r2
    c = 1023;
    h = 254;
    s = 63;
  }
  chs[0] = h;
  chs[1] = ((c >> 2) & 0XC0) | s;
    3100:	mov.w	ip, r1, lsr #2
    h = (lba % (numberOfHeads * sectorsPerTrack)) / sectorsPerTrack;
    3104:	uxtb	r3, r3
    s = (lba % sectorsPerTrack) + 1;
    3106:	adds	r2, #1
  chs[1] = ((c >> 2) & 0XC0) | s;
    3108:	bic.w	ip, ip, #63	; 0x3f
  chs[2] = c;
    310c:	uxtb	r1, r1
  chs[0] = h;
    310e:	strb	r3, [r0, #0]
  chs[1] = ((c >> 2) & 0XC0) | s;
    3110:	orr.w	r2, r2, ip
  chs[2] = c;
    3114:	strb	r1, [r0, #2]
  chs[1] = ((c >> 2) & 0XC0) | s;
    3116:	uxtb	r2, r2
    3118:	strb	r2, [r0, #1]
}
    311a:	ldr.w	pc, [sp], #4
    311e:	movs	r3, #63	; 0x3f
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
    3120:	mov	ip, r3
  } else if (capacityMB <= 128) {
    3122:	cmp	r1, #128	; 0x80
    3124:	bls.n	3148 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x74>
  } else if (capacityMB <= 504) {
    3126:	cmp.w	r1, #504	; 0x1f8
    312a:	bhi.n	314c <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x78>
  c = lba / (numberOfHeads * sectorsPerTrack);
    312c:	lsls	r3, r3, #4
    312e:	b.n	30e4 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x10>
    3130:	movs	r1, #255	; 0xff
    h = 254;
    3132:	movs	r3, #254	; 0xfe
  chs[1] = ((c >> 2) & 0XC0) | s;
    3134:	strb	r1, [r0, #1]
  chs[0] = h;
    3136:	strb	r3, [r0, #0]
  chs[2] = c;
    3138:	strb	r1, [r0, #2]
    313a:	bx	lr
  } else if (capacityMB <= 32) {
    313c:	cmp	r1, #32
    313e:	bhi.n	316e <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x9a>
    3140:	movs	r3, #128	; 0x80
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
    3142:	mov.w	ip, #32
    3146:	b.n	30e4 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x10>
  c = lba / (numberOfHeads * sectorsPerTrack);
    3148:	lsls	r3, r3, #3
    314a:	b.n	30e4 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x10>
  } else if (capacityMB <= 1008) {
    314c:	cmp.w	r1, #1008	; 0x3f0
    3150:	bls.n	315c <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x88>
  } else if (capacityMB <= 2016) {
    3152:	cmp.w	r1, #2016	; 0x7e0
    3156:	bhi.n	3160 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x8c>
  c = lba / (numberOfHeads * sectorsPerTrack);
    3158:	lsls	r3, r3, #6
    315a:	b.n	30e4 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x10>
    315c:	lsls	r3, r3, #5
    315e:	b.n	30e4 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x10>
  } else if (capacityMB <= 4032) {
    3160:	cmp.w	r1, #4032	; 0xfc0
  c = lba / (numberOfHeads * sectorsPerTrack);
    3164:	ite	ls
    3166:	lslls	r3, r3, #7
    3168:	rsbhi	r3, r3, r3, lsl #8
    316c:	b.n	30e4 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x10>
    316e:	movs	r3, #32
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
    3170:	mov	ip, r3
    3172:	b.n	3122 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x4e>

00003174 <FsCache::sync()>:

fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
    3174:	push	{r4, r5, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
    3176:	ldrb	r3, [r0, #0]
bool FsCache::sync() {
    3178:	sub	sp, #12
  if (m_status & CACHE_STATUS_DIRTY) {
    317a:	lsls	r4, r3, #31
    317c:	bpl.n	31ba <FsCache::sync()+0x46>
    if (!m_blockDev->writeSector(m_sector, m_buffer)) {
    317e:	mov	r4, r0
    3180:	ldr	r0, [r0, #4]
    3182:	add.w	r2, r4, #16
    3186:	ldr	r3, [r0, #0]
    3188:	ldr	r1, [r4, #8]
    318a:	str	r2, [sp, #4]
    318c:	ldr	r3, [r3, #32]
    318e:	blx	r3
    3190:	ldr	r2, [sp, #4]
    3192:	mov	r5, r0
    3194:	cbz	r0, 31c2 <FsCache::sync()+0x4e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    3196:	ldrb	r3, [r4, #0]
    3198:	lsls	r1, r3, #30
    319a:	bpl.n	31ae <FsCache::sync()+0x3a>
      if (!m_blockDev->writeSector(m_sector + m_mirrorOffset, m_buffer)) {
    319c:	ldr	r3, [r4, #12]
    319e:	ldrd	r0, r1, [r4, #4]
    31a2:	add	r1, r3
    31a4:	ldr	r3, [r0, #0]
    31a6:	ldr	r3, [r3, #32]
    31a8:	blx	r3
    31aa:	cbz	r0, 31c2 <FsCache::sync()+0x4e>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    31ac:	ldrb	r3, [r4, #0]
    31ae:	bic.w	r3, r3, #1
  }
  return true;

fail:
  return false;
}
    31b2:	mov	r0, r5
    m_status &= ~CACHE_STATUS_DIRTY;
    31b4:	strb	r3, [r4, #0]
}
    31b6:	add	sp, #12
    31b8:	pop	{r4, r5, pc}
  return true;
    31ba:	movs	r5, #1
}
    31bc:	mov	r0, r5
    31be:	add	sp, #12
    31c0:	pop	{r4, r5, pc}
  return false;
    31c2:	movs	r5, #0
}
    31c4:	mov	r0, r5
    31c6:	add	sp, #12
    31c8:	pop	{r4, r5, pc}
    31ca:	nop

000031cc <FsCache::prepare(unsigned long, unsigned char)>:
uint8_t* FsCache::prepare(uint32_t sector, uint8_t option) {
    31cc:	push	{r3, r4, r5, r6, r7, lr}
  if (!m_blockDev) {
    31ce:	ldr	r3, [r0, #4]
    31d0:	cbz	r3, 3216 <FsCache::prepare(unsigned long, unsigned char)+0x4a>
  if (m_sector != sector) {
    31d2:	ldr	r3, [r0, #8]
    31d4:	mov	r4, r0
    31d6:	mov	r7, r1
    31d8:	mov	r5, r2
    31da:	cmp	r3, r1
    31dc:	bne.n	31ec <FsCache::prepare(unsigned long, unsigned char)+0x20>
  m_status |= option & CACHE_STATUS_MASK;
    31de:	ldrb.w	r3, [r0], #16
    31e2:	and.w	r5, r5, #3
    31e6:	orrs	r3, r5
    31e8:	strb	r3, [r4, #0]
}
    31ea:	pop	{r3, r4, r5, r6, r7, pc}
    if (!sync()) {
    31ec:	bl	3174 <FsCache::sync()>
    31f0:	cbz	r0, 3216 <FsCache::prepare(unsigned long, unsigned char)+0x4a>
    if (!(option & CACHE_OPTION_NO_READ)) {
    31f2:	lsls	r3, r5, #29
    31f4:	bpl.n	3202 <FsCache::prepare(unsigned long, unsigned char)+0x36>
    31f6:	add.w	r6, r4, #16
      if (!m_blockDev->readSector(sector, m_buffer)) {
    31fa:	mov	r0, r6
    m_sector = sector;
    31fc:	movs	r3, #0
    31fe:	str	r7, [r4, #8]
    3200:	b.n	31e2 <FsCache::prepare(unsigned long, unsigned char)+0x16>
      if (!m_blockDev->readSector(sector, m_buffer)) {
    3202:	ldr	r0, [r4, #4]
    3204:	add.w	r6, r4, #16
    3208:	mov	r1, r7
    320a:	ldr	r3, [r0, #0]
    320c:	mov	r2, r6
    320e:	ldr	r3, [r3, #16]
    3210:	blx	r3
    3212:	cmp	r0, #0
    3214:	bne.n	31fa <FsCache::prepare(unsigned long, unsigned char)+0x2e>
  return nullptr;
    3216:	movs	r0, #0
}
    3218:	pop	{r3, r4, r5, r6, r7, pc}
    321a:	nop

0000321c <toUpcase(unsigned short)>:
}
//------------------------------------------------------------------------------
uint16_t toUpcase(uint16_t chr) {
  uint16_t i, first;
  // Optimize for simple ASCII.
  if (chr < 127) {
    321c:	cmp	r0, #126	; 0x7e
    321e:	bls.n	329e <toUpcase(unsigned short)+0x82>
  size_t right = size;
    3220:	mov.w	ip, #53	; 0x35
  size_t left = 0;
    3224:	movs	r3, #0
uint16_t toUpcase(uint16_t chr) {
    3226:	push	{r4, r5}
    3228:	ldr	r4, [pc, #160]	; (32cc <toUpcase(unsigned short)+0xb0>)
    322a:	b.n	3236 <toUpcase(unsigned short)+0x1a>
    if (readTable16(table[mid].key) <= key) {
    322c:	ldrh.w	r2, [r4, r1, lsl #2]
    3230:	cmp	r2, r0
    3232:	bhi.n	3276 <toUpcase(unsigned short)+0x5a>
    size_t mid = left + (right - left) / 2;
    3234:	mov	r3, r1
  while (right - left > 1) {
    3236:	sub.w	r2, ip, r3
    323a:	cmp	r2, #1
    size_t mid = left + (right - left) / 2;
    323c:	add.w	r1, r3, r2, lsr #1
  while (right - left > 1) {
    3240:	bhi.n	322c <toUpcase(unsigned short)+0x10>
    return chr - ('a' <= chr && chr <= 'z' ? 'a' - 'A' : 0);
  }
  i = searchPair16(reinterpret_cast<const pair16_t*>(mapTable), MAP_DIM, chr);
  first = readTable16(mapTable[i].base);
    3242:	uxth	r3, r3
    3244:	ldrh.w	r2, [r4, r3, lsl #2]
  if (first <= chr && (chr - first) < readTable8(mapTable[i].count)) {
    3248:	cmp	r0, r2
    324a:	bcs.n	327a <toUpcase(unsigned short)+0x5e>
    324c:	movs	r4, #75	; 0x4b
    324e:	movs	r3, #0
    3250:	ldr	r5, [pc, #124]	; (32d0 <toUpcase(unsigned short)+0xb4>)
    3252:	b.n	325e <toUpcase(unsigned short)+0x42>
    if (readTable16(table[mid].key) <= key) {
    3254:	ldrh.w	r2, [r5, r1, lsl #2]
    3258:	cmp	r2, r0
    325a:	bhi.n	329a <toUpcase(unsigned short)+0x7e>
    size_t mid = left + (right - left) / 2;
    325c:	mov	r3, r1
  while (right - left > 1) {
    325e:	subs	r2, r4, r3
    3260:	cmp	r2, #1
    size_t mid = left + (right - left) / 2;
    3262:	add.w	r1, r3, r2, lsr #1
  while (right - left > 1) {
    3266:	bhi.n	3254 <toUpcase(unsigned short)+0x38>
      return chr - ((chr - first) & 1);
    }
    return chr + (off ? off : -0x1C60);
  }
  i = searchPair16(lookupTable, LOOKUP_DIM, chr);
  if (readTable16(lookupTable[i].key) == chr) {
    3268:	uxth	r3, r3
    326a:	ldrh.w	r2, [r5, r3, lsl #2]
    326e:	cmp	r2, r0
    3270:	beq.n	32b2 <toUpcase(unsigned short)+0x96>
    return readTable16(lookupTable[i].val);
  }
  return chr;
}
    3272:	pop	{r4, r5}
    3274:	bx	lr
    size_t mid = left + (right - left) / 2;
    3276:	mov	ip, r1
    3278:	b.n	3236 <toUpcase(unsigned short)+0x1a>
  if (first <= chr && (chr - first) < readTable8(mapTable[i].count)) {
    327a:	add.w	r4, r4, r3, lsl #2
    327e:	subs	r2, r0, r2
    3280:	ldrb	r3, [r4, #3]
    3282:	cmp	r2, r3
    3284:	bge.n	324c <toUpcase(unsigned short)+0x30>
    int8_t off = readTable8(mapTable[i].off);
    3286:	ldrsb.w	r3, [r4, #2]
    if (off == 1) {
    328a:	cmp	r3, #1
    328c:	beq.n	32bc <toUpcase(unsigned short)+0xa0>
    return chr + (off ? off : -0x1C60);
    328e:	cbz	r3, 32c6 <toUpcase(unsigned short)+0xaa>
    3290:	uxth	r3, r3
    3292:	add	r3, r0
}
    3294:	pop	{r4, r5}
    return chr + (off ? off : -0x1C60);
    3296:	uxth	r0, r3
}
    3298:	bx	lr
    size_t mid = left + (right - left) / 2;
    329a:	mov	r4, r1
    329c:	b.n	325e <toUpcase(unsigned short)+0x42>
    return chr - ('a' <= chr && chr <= 'z' ? 'a' - 'A' : 0);
    329e:	sub.w	r3, r0, #97	; 0x61
    32a2:	cmp	r3, #25
    32a4:	ite	hi
    32a6:	movhi	r3, #0
    32a8:	movls	r3, #1
    32aa:	sub.w	r3, r0, r3, lsl #5
    32ae:	uxth	r0, r3
}
    32b0:	bx	lr
    return readTable16(lookupTable[i].val);
    32b2:	add.w	r5, r5, r3, lsl #2
    32b6:	ldrh	r0, [r5, #2]
}
    32b8:	pop	{r4, r5}
    32ba:	bx	lr
      return chr - ((chr - first) & 1);
    32bc:	and.w	r2, r2, #1
    32c0:	subs	r3, r0, r2
    32c2:	uxth	r0, r3
    32c4:	b.n	3272 <toUpcase(unsigned short)+0x56>
    return chr + (off ? off : -0x1C60);
    32c6:	movw	r3, #58272	; 0xe3a0
    32ca:	b.n	3292 <toUpcase(unsigned short)+0x76>
    32cc:	.word	0x20000690
    32d0:	.word	0x20000564

000032d4 <dateTimeMs10(unsigned short*, unsigned short*, unsigned char*)>:
  *ms10 = 0;
    32d4:	mov.w	ip, #0
  FsDateTime::callback2(date, time);
    32d8:	ldr	r3, [pc, #8]	; (32e4 <dateTimeMs10(unsigned short*, unsigned short*, unsigned char*)+0x10>)
  *ms10 = 0;
    32da:	strb.w	ip, [r2]
  FsDateTime::callback2(date, time);
    32de:	ldr	r3, [r3, #0]
    32e0:	bx	r3
    32e2:	nop
    32e4:	.word	0x20006408

000032e8 <FsDateTime::setCallback(void (*)(unsigned short*, unsigned short*))>:
  callback = dateTimeMs10;
    32e8:	ldr	r2, [pc, #8]	; (32f4 <FsDateTime::setCallback(void (*)(unsigned short*, unsigned short*))+0xc>)
    32ea:	ldr	r1, [pc, #12]	; (32f8 <FsDateTime::setCallback(void (*)(unsigned short*, unsigned short*))+0x10>)
  callback2 = dateTime;
    32ec:	ldr	r3, [pc, #12]	; (32fc <FsDateTime::setCallback(void (*)(unsigned short*, unsigned short*))+0x14>)
  callback = dateTimeMs10;
    32ee:	str	r1, [r2, #0]
  callback2 = dateTime;
    32f0:	str	r0, [r3, #0]
}
    32f2:	bx	lr
    32f4:	.word	0x20006404
    32f8:	.word	0x000032d5
    32fc:	.word	0x20006408

00003300 <Print::write(char const*) [clone .isra.0]>:
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    3300:	push	{r4, lr}
    3302:	mov	r4, r0
    3304:	sub	sp, #8
    3306:	mov	r0, r1
    3308:	str	r1, [sp, #4]
    330a:	bl	e400 <strlen>
    330e:	ldr	r3, [r4, #0]
    3310:	mov	r2, r0
    3312:	ldr	r1, [sp, #4]
    3314:	mov	r0, r4
    3316:	ldr	r3, [r3, #4]
    3318:	add	sp, #8
    331a:	ldmia.w	sp!, {r4, lr}
    331e:	bx	r3

00003320 <ExFatFormatter::syncUpcase()>:
  writeMsg(pr, "Format failed\r\n");
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFormatter::syncUpcase() {
  uint16_t index = m_upcaseSize & SECTOR_MASK;
    3320:	ldr	r3, [r0, #8]
    3322:	ubfx	r3, r3, #0, #9
  if (!index) {
    3326:	cbz	r3, 334a <ExFatFormatter::syncUpcase()+0x2a>
    return true;
  }
  for (size_t i = index; i < BYTES_PER_SECTOR; i++) {
    m_secBuf[i] = 0;
    3328:	movs	r1, #0
bool ExFatFormatter::syncUpcase() {
    332a:	push	{r4}
    m_secBuf[i] = 0;
    332c:	ldr	r2, [r0, #16]
    332e:	strb	r1, [r2, r3]
  for (size_t i = index; i < BYTES_PER_SECTOR; i++) {
    3330:	adds	r3, #1
    3332:	cmp.w	r3, #512	; 0x200
    3336:	bne.n	332c <ExFatFormatter::syncUpcase()+0xc>
  }
  return m_dev->writeSector(m_upcaseSector, m_secBuf);
    3338:	ldr	r1, [r0, #0]
    333a:	ldrd	r3, r2, [r0, #12]
    333e:	ldr	r4, [r3, #0]
    3340:	mov	r0, r3
    3342:	ldr	r3, [r4, #32]
}
    3344:	ldr.w	r4, [sp], #4
  return m_dev->writeSector(m_upcaseSector, m_secBuf);
    3348:	bx	r3
}
    334a:	movs	r0, #1
    334c:	bx	lr
    334e:	nop

00003350 <ExFatFormatter::writeUpcaseByte(unsigned char)>:
//------------------------------------------------------------------------------
bool ExFatFormatter::writeUpcaseByte(uint8_t b) {
  uint16_t index = m_upcaseSize & SECTOR_MASK;
    3350:	ldr	r2, [r0, #8]
bool ExFatFormatter::writeUpcaseByte(uint8_t b) {
    3352:	mov	r3, r0
  m_secBuf[index] = b;
    3354:	ldr	r0, [r0, #16]
  uint16_t index = m_upcaseSize & SECTOR_MASK;
    3356:	movw	ip, #511	; 0x1ff
    335a:	ubfx	r2, r2, #0, #9
  m_secBuf[index] = b;
    335e:	strb	r1, [r0, r2]
  m_upcaseChecksum = exFatChecksum(m_upcaseChecksum, b);
  m_upcaseSize++;
  if (index == SECTOR_MASK) {
    3360:	cmp	r2, ip
  uint8_t mustBeZero2[2];
  uint8_t unicode3[4];
} DirLfn_t;
//==============================================================================
inline uint32_t exFatChecksum(uint32_t sum, uint8_t data) {
  return (sum << 31) + (sum >> 1) + data;
    3362:	ldr	r0, [r3, #4]
    3364:	add.w	r1, r1, r0, ror #1
  m_upcaseSize++;
    3368:	ldr	r0, [r3, #8]
    336a:	add.w	r0, r0, #1
    336e:	strd	r1, r0, [r3, #4]
  if (index == SECTOR_MASK) {
    3372:	beq.n	3378 <ExFatFormatter::writeUpcaseByte(unsigned char)+0x28>
    return m_dev->writeSector(m_upcaseSector++, m_secBuf);
  }
  return true;
}
    3374:	movs	r0, #1
    3376:	bx	lr
    return m_dev->writeSector(m_upcaseSector++, m_secBuf);
    3378:	ldr	r0, [r3, #12]
    337a:	ldr	r1, [r3, #0]
bool ExFatFormatter::writeUpcaseByte(uint8_t b) {
    337c:	push	{r4}
    return m_dev->writeSector(m_upcaseSector++, m_secBuf);
    337e:	ldr	r4, [r0, #0]
    3380:	adds	r2, r1, #1
    3382:	ldr	r4, [r4, #32]
    3384:	str	r2, [r3, #0]
    3386:	ldr	r2, [r3, #16]
    3388:	mov	r3, r4
}
    338a:	ldr.w	r4, [sp], #4
    return m_dev->writeSector(m_upcaseSector++, m_secBuf);
    338e:	bx	r3

00003390 <ExFatFormatter::writeUpcaseUnicode(unsigned short)>:
//------------------------------------------------------------------------------
bool ExFatFormatter::writeUpcaseUnicode(uint16_t unicode) {
    3390:	push	{r3, r4, r5, lr}
  uint16_t index = m_upcaseSize & SECTOR_MASK;
    3392:	ldr	r3, [r0, #8]
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    3394:	uxtb	r2, r1
bool ExFatFormatter::writeUpcaseUnicode(uint16_t unicode) {
    3396:	mov	r5, r1
  m_secBuf[index] = b;
    3398:	ldr	r1, [r0, #16]
  uint16_t index = m_upcaseSize & SECTOR_MASK;
    339a:	ubfx	r3, r3, #0, #9
    339e:	movw	ip, #511	; 0x1ff
bool ExFatFormatter::writeUpcaseUnicode(uint16_t unicode) {
    33a2:	mov	r4, r0
  m_secBuf[index] = b;
    33a4:	strb	r2, [r1, r3]
  if (index == SECTOR_MASK) {
    33a6:	cmp	r3, ip
    33a8:	ldr	r1, [r0, #4]
    33aa:	add.w	r2, r2, r1, ror #1
  m_upcaseChecksum = exFatChecksum(m_upcaseChecksum, b);
    33ae:	str	r2, [r0, #4]
  m_upcaseSize++;
    33b0:	ldr	r2, [r0, #8]
    33b2:	add.w	r2, r2, #1
    33b6:	str	r2, [r0, #8]
  if (index == SECTOR_MASK) {
    33b8:	beq.n	33c6 <ExFatFormatter::writeUpcaseUnicode(unsigned short)+0x36>
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    33ba:	lsrs	r1, r5, #8
    33bc:	mov	r0, r4
}
    33be:	ldmia.w	sp!, {r3, r4, r5, lr}
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    33c2:	b.w	3350 <ExFatFormatter::writeUpcaseByte(unsigned char)>
    return m_dev->writeSector(m_upcaseSector++, m_secBuf);
    33c6:	ldr	r1, [r0, #0]
    33c8:	ldr	r0, [r0, #12]
    33ca:	adds	r2, r1, #1
    33cc:	ldr	r3, [r0, #0]
    33ce:	ldr	r3, [r3, #32]
    33d0:	str	r2, [r4, #0]
    33d2:	ldr	r2, [r4, #16]
    33d4:	blx	r3
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    33d6:	cmp	r0, #0
    33d8:	bne.n	33ba <ExFatFormatter::writeUpcaseUnicode(unsigned short)+0x2a>
}
    33da:	pop	{r3, r4, r5, pc}

000033dc <ExFatFormatter::writeUpcase(unsigned long)>:
//------------------------------------------------------------------------------
bool ExFatFormatter::writeUpcase(uint32_t sector) {
    33dc:	push	{r3, r4, r5, r6, r7, lr}
  uint32_t n;
  uint32_t ns;
  uint32_t ch = 0;
  uint16_t uc;

  m_upcaseSize = 0;
    33de:	movs	r3, #0
bool ExFatFormatter::writeUpcase(uint32_t sector) {
    33e0:	mov	r6, r0
  m_upcaseChecksum = 0;
  m_upcaseSector = sector;
    33e2:	str	r1, [r0, #0]
  uint32_t ch = 0;
    33e4:	mov	r5, r3
  m_upcaseChecksum = 0;
    33e6:	strd	r3, r3, [r0, #4]

  while (ch < 0X10000) {
    uc = toUpcase(ch);
    33ea:	uxth	r0, r5
    33ec:	bl	321c <toUpcase(unsigned short)>
    if (uc != ch) {
    33f0:	cmp	r0, r5
    uc = toUpcase(ch);
    33f2:	mov	r4, r0
    if (uc != ch) {
    33f4:	beq.n	3406 <ExFatFormatter::writeUpcase(unsigned long)+0x2a>
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    33f6:	uxtb	r1, r0
    33f8:	mov	r0, r6
    33fa:	bl	3350 <ExFatFormatter::writeUpcaseByte(unsigned char)>
    33fe:	cmp	r0, #0
    3400:	bne.n	347a <ExFatFormatter::writeUpcase(unsigned long)+0x9e>
  }
  return true;

fail:
  return false;
}
    3402:	movs	r0, #0
    3404:	pop	{r3, r4, r5, r6, r7, pc}
      for (n = ch + 1; n < 0X10000 && n == toUpcase(n); n++) {
    3406:	adds	r4, r5, #1
    3408:	cmp.w	r4, #65536	; 0x10000
    340c:	bne.n	3418 <ExFatFormatter::writeUpcase(unsigned long)+0x3c>
    340e:	b.n	3466 <ExFatFormatter::writeUpcase(unsigned long)+0x8a>
    3410:	adds	r4, #1
    3412:	cmp.w	r4, #65536	; 0x10000
    3416:	beq.n	3422 <ExFatFormatter::writeUpcase(unsigned long)+0x46>
    3418:	uxth	r0, r4
    341a:	bl	321c <toUpcase(unsigned short)>
    341e:	cmp	r0, r4
    3420:	beq.n	3410 <ExFatFormatter::writeUpcase(unsigned long)+0x34>
      ns = n - ch;
    3422:	subs	r7, r4, r5
      if (ns >= MINIMUM_UPCASE_SKIP) {
    3424:	cmp.w	r7, #512	; 0x200
    3428:	bcc.n	3466 <ExFatFormatter::writeUpcase(unsigned long)+0x8a>
        if (!writeUpcaseUnicode(0XFFFF) || !writeUpcaseUnicode(ns)) {
    342a:	movw	r1, #65535	; 0xffff
    342e:	mov	r0, r6
    3430:	bl	3390 <ExFatFormatter::writeUpcaseUnicode(unsigned short)>
    3434:	cmp	r0, #0
    3436:	beq.n	3402 <ExFatFormatter::writeUpcase(unsigned long)+0x26>
    3438:	uxth	r1, r7
    343a:	mov	r0, r6
    343c:	bl	3390 <ExFatFormatter::writeUpcaseUnicode(unsigned short)>
    3440:	cmp	r0, #0
    3442:	beq.n	3402 <ExFatFormatter::writeUpcase(unsigned long)+0x26>
    3444:	mov	r5, r4
  while (ch < 0X10000) {
    3446:	cmp.w	r5, #65536	; 0x10000
    344a:	bne.n	33ea <ExFatFormatter::writeUpcase(unsigned long)+0xe>
  if (!syncUpcase()) {
    344c:	mov	r0, r6
}
    344e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  if (!syncUpcase()) {
    3452:	b.w	3320 <ExFatFormatter::syncUpcase()>
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    3456:	ubfx	r1, r5, #8, #8
    345a:	mov	r0, r6
    345c:	adds	r5, #1
    345e:	bl	3350 <ExFatFormatter::writeUpcaseByte(unsigned char)>
    3462:	cmp	r0, #0
    3464:	beq.n	3402 <ExFatFormatter::writeUpcase(unsigned long)+0x26>
        while (ch < n) {
    3466:	cmp	r5, r4
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    3468:	uxtb	r1, r5
    346a:	mov	r0, r6
        while (ch < n) {
    346c:	bcs.n	3446 <ExFatFormatter::writeUpcase(unsigned long)+0x6a>
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    346e:	bl	3350 <ExFatFormatter::writeUpcaseByte(unsigned char)>
    3472:	cmp	r0, #0
    3474:	bne.n	3456 <ExFatFormatter::writeUpcase(unsigned long)+0x7a>
}
    3476:	movs	r0, #0
    3478:	pop	{r3, r4, r5, r6, r7, pc}
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    347a:	ubfx	r1, r4, #8, #8
    347e:	mov	r0, r6
    3480:	bl	3350 <ExFatFormatter::writeUpcaseByte(unsigned char)>
    3484:	cmp	r0, #0
    3486:	beq.n	3402 <ExFatFormatter::writeUpcase(unsigned long)+0x26>
      ch++;
    3488:	adds	r5, #1
    348a:	b.n	3446 <ExFatFormatter::writeUpcase(unsigned long)+0x6a>

0000348c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)>:
bool ExFatFormatter::format(FsBlockDevice* dev, uint8_t* secBuf, print_t* pr) {
    348c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3490:	mov	r7, r3
    3492:	sub	sp, #36	; 0x24
  sectorCount = dev->sectorCount();
    3494:	ldr	r3, [r1, #0]
bool ExFatFormatter::format(FsBlockDevice* dev, uint8_t* secBuf, print_t* pr) {
    3496:	mov	r5, r1
    3498:	str	r0, [sp, #16]
    349a:	mov	r4, r2
  m_dev = dev;
    349c:	str	r1, [r0, #12]
  m_secBuf = secBuf;
    349e:	str	r2, [r0, #16]
  sectorCount = dev->sectorCount();
    34a0:	mov	r0, r1
    34a2:	ldr	r3, [r3, #24]
    34a4:	blx	r3
  if (sectorCount < 0X100000) {
    34a6:	cmp.w	r0, #1048576	; 0x100000
  sectorCount = dev->sectorCount();
    34aa:	str	r0, [sp, #0]
  if (sectorCount < 0X100000) {
    34ac:	bcc.w	3660 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1d4>
  for (m = 1, vs = 0; m && sectorCount > m; m <<= 1, vs++) {
    34b0:	movs	r3, #0
    34b2:	movs	r2, #1
    34b4:	ldr	r6, [sp, #0]
    34b6:	adds	r3, #1
    34b8:	lsls	r2, r2, #1
    34ba:	uxtb	r3, r3
    34bc:	beq.n	34c2 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x36>
    34be:	cmp	r6, r2
    34c0:	bhi.n	34b6 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x2a>
  sectorsPerClusterShift = vs < 29 ? 8 : (vs - 11) / 2;
    34c2:	cmp	r3, #28
    34c4:	str	r6, [sp, #0]
    34c6:	bls.w	3638 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1ac>
    34ca:	sub.w	r8, r3, #11
  sectorsPerCluster = 1UL << sectorsPerClusterShift;
    34ce:	movs	r2, #1
  sectorsPerClusterShift = vs < 29 ? 8 : (vs - 11) / 2;
    34d0:	asr.w	r1, r8, r2
    34d4:	ubfx	r8, r8, #1, #8
  sectorsPerCluster = 1UL << sectorsPerClusterShift;
    34d8:	lsls	r2, r1
  sectorsPerClusterShift = vs < 29 ? 8 : (vs - 11) / 2;
    34da:	str	r1, [sp, #8]
  sectorsPerCluster = 1UL << sectorsPerClusterShift;
    34dc:	str	r2, [sp, #28]
  fatLength = 1UL << (vs < 27 ? 13 : (vs + 1) / 2);
    34de:	adds	r3, #1
    34e0:	movs	r2, #1
    34e2:	asrs	r3, r3, #1
    34e4:	lsls	r2, r3
    34e6:	str	r2, [sp, #24]
  clusterCount = (sectorCount - 4 * fatLength) >> sectorsPerClusterShift;
    34e8:	movs	r2, #4
    34ea:	lsls	r2, r3
    34ec:	str	r2, [sp, #12]
  partitionOffset = 2 * fatLength;
    34ee:	movs	r2, #2
    34f0:	lsl.w	r3, r2, r3
    34f4:	str	r3, [sp, #4]
  clusterCount = (sectorCount - 4 * fatLength) >> sectorsPerClusterShift;
    34f6:	ldr	r2, [sp, #0]
  memset(secBuf, 0, BYTES_PER_SECTOR);
    34f8:	movs	r1, #0
  clusterCount = (sectorCount - 4 * fatLength) >> sectorsPerClusterShift;
    34fa:	ldr	r3, [sp, #12]
  memset(secBuf, 0, BYTES_PER_SECTOR);
    34fc:	mov	r0, r4
  clusterCount = (sectorCount - 4 * fatLength) >> sectorsPerClusterShift;
    34fe:	ldr	r6, [sp, #8]
  mbr->part->beginCHS[0] = 1;
    3500:	mov.w	sl, #1
  clusterCount = (sectorCount - 4 * fatLength) >> sectorsPerClusterShift;
    3504:	subs	r3, r2, r3
  memset(secBuf, 0, BYTES_PER_SECTOR);
    3506:	mov.w	r2, #512	; 0x200
  *reinterpret_cast<uint16_t*>(dst) = src;
    350a:	movw	fp, #43605	; 0xaa55
  clusterCount = (sectorCount - 4 * fatLength) >> sectorsPerClusterShift;
    350e:	lsrs	r3, r6
  volumeLength = clusterHeapOffset + (clusterCount << sectorsPerClusterShift);
    3510:	lsl.w	r9, r3, r6
    3514:	str	r3, [sp, #20]
    3516:	ldr	r6, [sp, #4]
  memset(secBuf, 0, BYTES_PER_SECTOR);
    3518:	bl	e064 <memset>
  mbr->part->endCHS[1] = 0XFF;
    351c:	movs	r3, #255	; 0xff
  mbr->part->beginCHS[0] = 1;
    351e:	strb.w	sl, [r4, #447]	; 0x1bf
  mbr->part->beginCHS[1] = 1;
    3522:	strb.w	sl, [r4, #448]	; 0x1c0
  volumeLength = clusterHeapOffset + (clusterCount << sectorsPerClusterShift);
    3526:	add	r9, r6
  mbr->part->endCHS[1] = 0XFF;
    3528:	strb.w	r3, [r4, #452]	; 0x1c4
  if (!dev->writeSector(0, secBuf)) {
    352c:	mov	r2, r4
  mbr->part->endCHS[2] = 0XFF;
    352e:	strb.w	r3, [r4, #453]	; 0x1c5
  mbr->part->type = 7;
    3532:	movs	r3, #7
  if (!dev->writeSector(0, secBuf)) {
    3534:	movs	r1, #0
    3536:	mov	r0, r5
  mbr->part->type = 7;
    3538:	strb.w	r3, [r4, #450]	; 0x1c2
  mbr->part->endCHS[0] = 0XFE;
    353c:	movs	r3, #254	; 0xfe
  *reinterpret_cast<uint32_t*>(dst) = src;
    353e:	str.w	r6, [r4, #454]	; 0x1c6
    3542:	strb.w	r3, [r4, #451]	; 0x1c3
  if (!dev->writeSector(0, secBuf)) {
    3546:	ldr	r3, [r5, #0]
    3548:	str.w	r9, [r4, #458]	; 0x1ca
    354c:	ldr	r3, [r3, #32]
  *reinterpret_cast<uint16_t*>(dst) = src;
    354e:	strh.w	fp, [r4, #510]	; 0x1fe
    3552:	blx	r3
    3554:	cmp	r0, #0
    3556:	beq.n	3620 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
  memset(secBuf, 0, BYTES_PER_SECTOR);
    3558:	mov.w	r2, #512	; 0x200
    355c:	movs	r1, #0
    355e:	mov	r0, r4
    3560:	bl	e064 <memset>
  *reinterpret_cast<uint32_t*>(dst) = src;
    3564:	ldr	r3, [sp, #0]
  pbs->bpb.sectorsPerClusterShift = sectorsPerClusterShift;
    3566:	strb.w	r8, [r4, #109]	; 0x6d
  for (size_t i = 0; i < BYTES_PER_SECTOR; i++) {
    356a:	mov.w	r8, #0
    356e:	str	r3, [r4, #100]	; 0x64
    pbs->bootCode[i] = 0XF4;
    3570:	movs	r1, #244	; 0xf4
    3572:	ldr	r3, [sp, #20]
    3574:	add.w	r0, r4, #120	; 0x78
    3578:	ldr	r2, [sp, #24]
    357a:	str	r3, [r4, #92]	; 0x5c
  pbs->oemName[5] = ' ';
    357c:	movs	r3, #32
  setLe64(pbs->bpb.partitionOffset, partitionOffset);
    357e:	str	r6, [r4, #64]	; 0x40
  pbs->oemName[5] = ' ';
    3580:	strb	r3, [r4, #8]
  pbs->oemName[6] = ' ';
    3582:	strb	r3, [r4, #9]
  pbs->oemName[7] = ' ';
    3584:	strb	r3, [r4, #10]
  pbs->jmpInstruction[0] = 0XEB;
    3586:	movs	r3, #235	; 0xeb
    3588:	str	r6, [r4, #88]	; 0x58
  uint32_t checksum = 0;
    358a:	mov	r6, r8
  pbs->jmpInstruction[0] = 0XEB;
    358c:	strb	r3, [r4, #0]
  pbs->jmpInstruction[1] = 0X76;
    358e:	movs	r3, #118	; 0x76
  setLe64(pbs->bpb.volumeLength, volumeLength);
    3590:	str.w	r9, [r4, #72]	; 0x48
  pbs->jmpInstruction[1] = 0X76;
    3594:	strb	r3, [r4, #1]
  pbs->jmpInstruction[2] = 0X90;
    3596:	movs	r3, #144	; 0x90
  pbs->bpb.numberOfFats = 1;
    3598:	strb.w	sl, [r4, #110]	; 0x6e
  pbs->jmpInstruction[2] = 0X90;
    359c:	strb	r3, [r4, #2]
  pbs->oemName[0] = 'E';
    359e:	movs	r3, #69	; 0x45
    35a0:	strb	r3, [r4, #3]
  pbs->oemName[1] = 'X';
    35a2:	movs	r3, #88	; 0x58
    35a4:	strb	r3, [r4, #4]
  pbs->oemName[2] = 'F';
    35a6:	movs	r3, #70	; 0x46
    35a8:	strb	r3, [r4, #5]
  pbs->oemName[3] = 'A';
    35aa:	movs	r3, #65	; 0x41
    35ac:	strb	r3, [r4, #6]
  pbs->oemName[4] = 'T';
    35ae:	movs	r3, #84	; 0x54
    35b0:	strb	r3, [r4, #7]
    35b2:	movs	r3, #4
    35b4:	str	r3, [r4, #96]	; 0x60
  *reinterpret_cast<uint16_t*>(dst) = src;
    35b6:	mov.w	r3, #256	; 0x100
    35ba:	strh.w	r3, [r4, #104]	; 0x68
  pbs->bpb.bytesPerSectorShift = BYTES_PER_SECTOR_SHIFT;
    35be:	movs	r3, #9
    35c0:	strb.w	r3, [r4, #108]	; 0x6c
  pbs->bpb.driveSelect = 0X80;
    35c4:	movs	r3, #128	; 0x80
  *reinterpret_cast<uint32_t*>(dst) = src;
    35c6:	strd	r2, r2, [r4, #80]	; 0x50
    35ca:	strb.w	r3, [r4, #111]	; 0x6f
    pbs->bootCode[i] = 0XF4;
    35ce:	mov.w	r2, #390	; 0x186
    35d2:	bl	e064 <memset>
  *reinterpret_cast<uint16_t*>(dst) = src;
    35d6:	strh.w	fp, [r4, #510]	; 0x1fe
    if (i == offsetof(ExFatPbs_t, bpb.volumeFlags[0]) ||
    35da:	sub.w	r3, r8, #106	; 0x6a
    35de:	cmp	r3, #1
    35e0:	bls.n	35f0 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x164>
    35e2:	cmp.w	r8, #112	; 0x70
    35e6:	beq.n	35f0 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x164>
  return (sum << 31) + (sum >> 1) + data;
    35e8:	ldrb.w	r3, [r4, r8]
    35ec:	add.w	r6, r3, r6, ror #1
  for (size_t i = 0; i < BYTES_PER_SECTOR; i++) {
    35f0:	add.w	r8, r8, #1
    35f4:	cmp.w	r8, #512	; 0x200
    35f8:	bne.n	35da <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x14e>
  if (!dev->writeSector(sector, secBuf) ||
    35fa:	ldr	r3, [r5, #0]
    35fc:	mov	r2, r4
    35fe:	ldr.w	r9, [sp, #4]
    3602:	mov	r0, r5
    3604:	ldr	r3, [r3, #32]
    3606:	mov	r1, r9
    3608:	blx	r3
    360a:	cbz	r0, 3620 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
      !dev->writeSector(sector + BOOT_BACKUP_OFFSET, secBuf)) {
    360c:	ldr	r3, [r5, #0]
    360e:	mov	r1, r9
    3610:	mov	r2, r4
    3612:	mov	r0, r5
    3614:	ldr	r3, [r3, #32]
    3616:	adds	r1, #12
    3618:	str.w	r9, [sp, #4]
    361c:	blx	r3
  if (!dev->writeSector(sector, secBuf) ||
    361e:	cbnz	r0, 3672 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1e6>
  writeMsg(pr, "Format failed\r\n");
    3620:	cbz	r7, 362e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1a2>
    3622:	ldr	r3, [r7, #0]
    3624:	movs	r2, #15
    3626:	ldr	r1, [pc, #736]	; (3908 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x47c>)
    3628:	mov	r0, r7
    362a:	ldr	r3, [r3, #4]
    362c:	blx	r3
  return false;
    362e:	movs	r6, #0
}
    3630:	mov	r0, r6
    3632:	add	sp, #36	; 0x24
    3634:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  fatLength = 1UL << (vs < 27 ? 13 : (vs + 1) / 2);
    3638:	cmp	r3, #26
  sectorsPerClusterShift = vs < 29 ? 8 : (vs - 11) / 2;
    363a:	mov.w	r8, #8
  fatLength = 1UL << (vs < 27 ? 13 : (vs + 1) / 2);
    363e:	bhi.w	398e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x502>
    3642:	mov.w	r3, #16384	; 0x4000
  sectorsPerCluster = 1UL << sectorsPerClusterShift;
    3646:	str.w	r8, [sp, #8]
    364a:	str	r3, [sp, #4]
    364c:	mov.w	r3, #32768	; 0x8000
    3650:	str	r3, [sp, #12]
    3652:	mov.w	r3, #256	; 0x100
    3656:	str	r3, [sp, #28]
  fatLength = 1UL << (vs < 27 ? 13 : (vs + 1) / 2);
    3658:	mov.w	r3, #8192	; 0x2000
    365c:	str	r3, [sp, #24]
    365e:	b.n	34f6 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x6a>
    writeMsg(pr, "Device is too small\r\n");
    3660:	cmp	r7, #0
    3662:	beq.n	362e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1a2>
    3664:	ldr	r3, [r7, #0]
    3666:	movs	r2, #21
    3668:	ldr	r1, [pc, #672]	; (390c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x480>)
    366a:	mov	r0, r7
    366c:	ldr	r3, [r3, #4]
    366e:	blx	r3
  writeMsg(pr, "Format failed\r\n");
    3670:	b.n	3622 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x196>
  memset(secBuf, 0, BYTES_PER_SECTOR);
    3672:	mov	r2, r8
    3674:	movs	r1, #0
    3676:	mov	r0, r4
  sector++;
    3678:	add.w	sl, r9, #1
  memset(secBuf, 0, BYTES_PER_SECTOR);
    367c:	bl	e064 <memset>
  *reinterpret_cast<uint16_t*>(dst) = src;
    3680:	movw	r3, #43605	; 0xaa55
    3684:	add.w	r2, r9, #9
    3688:	addw	r9, r4, #511	; 0x1ff
    368c:	strh.w	r3, [r4, #510]	; 0x1fe
    3690:	movs	r3, #0
    3692:	mov	fp, r2
  uint32_t checksum = 0;
    3694:	mov	r8, r4
    3696:	b.n	369c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x210>
      checksum = exFatChecksum(checksum, secBuf[i]);
    3698:	ldrb.w	r3, [r8, #1]!
    for (size_t i = 0; i < BYTES_PER_SECTOR; i++) {
    369c:	cmp	r9, r8
  return (sum << 31) + (sum >> 1) + data;
    369e:	add.w	r6, r3, r6, ror #1
    36a2:	bne.n	3698 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x20c>
    if (!dev->writeSector(sector, secBuf) ||
    36a4:	ldr	r3, [r5, #0]
    36a6:	mov	r2, r4
    36a8:	mov	r1, sl
    36aa:	mov	r0, r5
    36ac:	ldr	r3, [r3, #32]
    36ae:	blx	r3
    36b0:	cmp	r0, #0
    36b2:	beq.n	3620 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
        !dev->writeSector(sector + BOOT_BACKUP_OFFSET, secBuf)) {
    36b4:	ldr	r3, [r5, #0]
    36b6:	mov	r2, r4
    36b8:	add.w	r1, sl, #12
    36bc:	mov	r0, r5
    36be:	ldr	r3, [r3, #32]
    36c0:	blx	r3
    if (!dev->writeSector(sector, secBuf) ||
    36c2:	cmp	r0, #0
    36c4:	beq.n	3620 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
    sector++;
    36c6:	add.w	r3, sl, #1
  for (int j = 0; j < 8; j++) {
    36ca:	cmp	fp, r3
    36cc:	beq.n	36d4 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x248>
      checksum = exFatChecksum(checksum, secBuf[i]);
    36ce:	mov	sl, r3
    36d0:	ldrb	r3, [r4, #0]
    36d2:	b.n	3694 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x208>
  memset(secBuf, 0, BYTES_PER_SECTOR);
    36d4:	mov.w	r2, #512	; 0x200
    36d8:	movs	r1, #0
    36da:	mov	r0, r4
    36dc:	mov	fp, r3
    36de:	bl	e064 <memset>
    36e2:	movs	r2, #0
    36e4:	add.w	sl, sl, #3
    36e8:	mov	r1, r2
  *reinterpret_cast<uint16_t*>(dst) = src;
    36ea:	mov	r3, r4
    36ec:	b.n	36f2 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x266>
      checksum = exFatChecksum(checksum, secBuf[i]);
    36ee:	ldrb.w	r1, [r3, #1]!
    for (size_t i = 0; i < BYTES_PER_SECTOR; i++) {
    36f2:	cmp	r8, r3
  return (sum << 31) + (sum >> 1) + data;
    36f4:	add.w	r6, r1, r6, ror #1
    36f8:	bne.n	36ee <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x262>
    if (!dev->writeSector(sector, secBuf) ||
    36fa:	ldr	r3, [r5, #0]
    36fc:	mov	r2, r4
    36fe:	mov	r1, fp
    3700:	mov	r0, r5
    3702:	ldr	r3, [r3, #32]
    3704:	blx	r3
    3706:	cmp	r0, #0
    3708:	beq.n	3620 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
        !dev->writeSector(sector + BOOT_BACKUP_OFFSET, secBuf)) {
    370a:	ldr	r3, [r5, #0]
    370c:	mov	r2, r4
    370e:	add.w	r1, fp, #12
    3712:	mov	r0, r5
    3714:	ldr	r3, [r3, #32]
    3716:	blx	r3
    if (!dev->writeSector(sector, secBuf) ||
    3718:	cmp	r0, #0
    371a:	beq.n	3620 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
    sector++;
    371c:	add.w	r1, fp, #1
  for (int j = 0; j < 2; j++) {
    3720:	cmp	sl, r1
    3722:	bne.n	37fa <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x36e>
    3724:	subs	r3, r4, #4
    3726:	add.w	r2, r4, #508	; 0x1fc
  *reinterpret_cast<uint32_t*>(dst) = src;
    372a:	str.w	r6, [r3, #4]!
  for (size_t i = 0; i < BYTES_PER_SECTOR; i += 4) {
    372e:	cmp	r2, r3
    3730:	bne.n	372a <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x29e>
  if (!dev->writeSector(sector, secBuf) ||
    3732:	ldr	r3, [r5, #0]
    3734:	mov	r2, r4
    3736:	mov	r0, r5
    3738:	ldr	r3, [r3, #32]
    373a:	blx	r3
    373c:	cmp	r0, #0
    373e:	beq.w	3620 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
      !dev->writeSector(sector + BOOT_BACKUP_OFFSET, secBuf)) {
    3742:	ldr	r3, [r5, #0]
    3744:	add.w	r1, fp, #13
    3748:	mov	r2, r4
    374a:	mov	r0, r5
    374c:	ldr	r3, [r3, #32]
    374e:	blx	r3
  if (!dev->writeSector(sector, secBuf) ||
    3750:	cmp	r0, #0
    3752:	beq.w	3620 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
  writeMsg(pr, "Writing FAT ");
    3756:	cbz	r7, 3764 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x2d8>
    3758:	ldr	r3, [r7, #0]
    375a:	movs	r2, #12
    375c:	ldr	r1, [pc, #432]	; (3910 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x484>)
    375e:	mov	r0, r7
    3760:	ldr	r3, [r3, #4]
    3762:	blx	r3
  sector = partitionOffset + fatOffset;
    3764:	ldr	r2, [sp, #24]
  memset(secBuf, 0, BYTES_PER_SECTOR);
    3766:	movs	r1, #0
  sector = partitionOffset + fatOffset;
    3768:	ldr	r3, [sp, #4]
  memset(secBuf, 0, BYTES_PER_SECTOR);
    376a:	mov	r0, r4
  for (uint32_t i = 0; i < ns; i++) {
    376c:	movs	r6, #0
  sector = partitionOffset + fatOffset;
    376e:	add	r3, r2
  memset(secBuf, 0, BYTES_PER_SECTOR);
    3770:	mov.w	r2, #512	; 0x200
  sector = partitionOffset + fatOffset;
    3774:	mov	r9, r3
  ns = ((clusterCount + 2) * 4 + BYTES_PER_SECTOR - 1) / BYTES_PER_SECTOR;
    3776:	ldr	r3, [sp, #20]
    3778:	mov.w	r8, r3, lsl #2
  memset(secBuf, 0, BYTES_PER_SECTOR);
    377c:	bl	e064 <memset>
  secBuf[0] = 0XF8;
    3780:	mov	r3, r4
    secBuf[i] = 0XFF;
    3782:	mov.w	r2, #4294967295
  ns = ((clusterCount + 2) * 4 + BYTES_PER_SECTOR - 1) / BYTES_PER_SECTOR;
    3786:	addw	r8, r8, #519	; 0x207
  secBuf[0] = 0XF8;
    378a:	movs	r1, #248	; 0xf8
      writeMsg(pr, ".");
    378c:	subs.w	fp, r7, #0
  ns = ((clusterCount + 2) * 4 + BYTES_PER_SECTOR - 1) / BYTES_PER_SECTOR;
    3790:	mov.w	sl, r8, lsr #9
  secBuf[0] = 0XF8;
    3794:	strb.w	r1, [r3], #1
    if (i % (ns / 32) == 0) {
    3798:	mov.w	r8, r8, lsr #14
    secBuf[i] = 0XFF;
    379c:	str.w	r2, [r4, #1]
      writeMsg(pr, ".");
    37a0:	it	ne
    37a2:	movne.w	fp, #1
    secBuf[i] = 0XFF;
    37a6:	str	r2, [r3, #12]
    37a8:	str	r2, [r3, #4]
    37aa:	str	r2, [r3, #8]
    37ac:	str.w	r2, [r3, #15]
    37b0:	b.n	37b8 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x32c>
  for (uint32_t i = 0; i < ns; i++) {
    37b2:	adds	r6, #1
    37b4:	cmp	sl, r6
    37b6:	beq.n	3800 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x374>
    if (i % (ns / 32) == 0) {
    37b8:	udiv	r3, r6, r8
    37bc:	mls	r3, r8, r3, r6
      writeMsg(pr, ".");
    37c0:	cbnz	r3, 37d4 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x348>
    37c2:	cmp.w	fp, #0
    37c6:	beq.n	37d4 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x348>
    37c8:	ldr	r3, [r7, #0]
    37ca:	movs	r2, #1
    37cc:	ldr	r1, [pc, #324]	; (3914 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x488>)
    37ce:	mov	r0, r7
    37d0:	ldr	r3, [r3, #4]
    37d2:	blx	r3
    if (!dev->writeSector(sector + i, secBuf)) {
    37d4:	ldr	r3, [r5, #0]
    37d6:	add.w	r1, r9, r6
    37da:	mov	r2, r4
    37dc:	mov	r0, r5
    37de:	ldr	r3, [r3, #32]
    37e0:	blx	r3
    37e2:	cmp	r0, #0
    37e4:	beq.w	3620 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
    if (i == 0) {
    37e8:	cmp	r6, #0
    37ea:	bne.n	37b2 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x326>
      memset(secBuf, 0, BYTES_PER_SECTOR);
    37ec:	mov	r1, r6
    37ee:	mov.w	r2, #512	; 0x200
    37f2:	mov	r0, r4
    37f4:	bl	e064 <memset>
    37f8:	b.n	37b2 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x326>
      checksum = exFatChecksum(checksum, secBuf[i]);
    37fa:	mov	fp, r1
    37fc:	ldrb	r1, [r4, #0]
    37fe:	b.n	36ea <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x25e>
  writeMsg(pr, "\r\n");
    3800:	cmp	r7, #0
    3802:	beq.n	386e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x3e2>
    3804:	ldr	r3, [r7, #0]
    3806:	movs	r2, #2
    3808:	ldr	r1, [pc, #268]	; (3918 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x48c>)
    380a:	mov	r0, r7
    380c:	ldr	r3, [r3, #4]
    380e:	blx	r3
  bitmapSize = (clusterCount + 7) / 8;
    3810:	ldr	r6, [sp, #20]
  if (ns > sectorsPerCluster) {
    3812:	ldr	r2, [sp, #28]
  bitmapSize = (clusterCount + 7) / 8;
    3814:	adds	r6, #7
    3816:	lsrs	r6, r6, #3
  ns = (bitmapSize + BYTES_PER_SECTOR - 1) / BYTES_PER_SECTOR;
    3818:	addw	r3, r6, #511	; 0x1ff
  if (ns > sectorsPerCluster) {
    381c:	cmp.w	r2, r3, lsr #9
  ns = (bitmapSize + BYTES_PER_SECTOR - 1) / BYTES_PER_SECTOR;
    3820:	mov.w	r9, r3, lsr #9
  if (ns > sectorsPerCluster) {
    3824:	bcc.w	3622 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x196>
  memset(secBuf, 0, BYTES_PER_SECTOR);
    3828:	mov.w	r2, #512	; 0x200
    382c:	movs	r1, #0
    382e:	mov	r0, r4
    3830:	bl	e064 <memset>
  secBuf[0] = 0X7;
    3834:	movs	r3, #7
    3836:	strb	r3, [r4, #0]
  for (uint32_t i = 0; i < ns; i++) {
    3838:	cmp.w	r9, #0
    383c:	beq.w	3954 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x4c8>
    3840:	mov.w	r8, #0
    3844:	b.n	3858 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x3cc>
    if (i == 0) {
    3846:	cmp.w	r8, #0
    384a:	bne.n	3850 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x3c4>
      secBuf[0] = 0;
    384c:	strb.w	r8, [r4]
  for (uint32_t i = 0; i < ns; i++) {
    3850:	add.w	r8, r8, #1
    3854:	cmp	r9, r8
    3856:	bls.n	3950 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x4c4>
    if (!dev->writeSector(sector + i, secBuf)) {
    3858:	ldr	r2, [sp, #12]
    385a:	mov	r0, r5
    385c:	ldr	r3, [r5, #0]
    385e:	add.w	r1, r2, r8
    3862:	mov	r2, r4
    3864:	ldr	r3, [r3, #32]
    3866:	blx	r3
    3868:	cmp	r0, #0
    386a:	bne.n	3846 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x3ba>
    386c:	b.n	3620 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
  bitmapSize = (clusterCount + 7) / 8;
    386e:	ldr	r6, [sp, #20]
  if (ns > sectorsPerCluster) {
    3870:	ldr	r2, [sp, #28]
  bitmapSize = (clusterCount + 7) / 8;
    3872:	adds	r6, #7
    3874:	lsrs	r6, r6, #3
  ns = (bitmapSize + BYTES_PER_SECTOR - 1) / BYTES_PER_SECTOR;
    3876:	addw	r3, r6, #511	; 0x1ff
  if (ns > sectorsPerCluster) {
    387a:	cmp.w	r2, r3, lsr #9
  ns = (bitmapSize + BYTES_PER_SECTOR - 1) / BYTES_PER_SECTOR;
    387e:	mov.w	r9, r3, lsr #9
  if (ns > sectorsPerCluster) {
    3882:	bcc.w	362e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1a2>
  memset(secBuf, 0, BYTES_PER_SECTOR);
    3886:	mov.w	r2, #512	; 0x200
    388a:	mov	r1, r7
    388c:	mov	r0, r4
    388e:	bl	e064 <memset>
  secBuf[0] = 0X7;
    3892:	movs	r3, #7
    3894:	strb	r3, [r4, #0]
  for (uint32_t i = 0; i < ns; i++) {
    3896:	cmp.w	r9, #0
    389a:	bne.n	3840 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x3b4>
  if (!writeUpcase(partitionOffset + clusterHeapOffset + sectorsPerCluster)) {
    389c:	ldr	r3, [sp, #12]
    389e:	ldr	r2, [sp, #28]
    38a0:	ldr	r0, [sp, #16]
    38a2:	adds	r1, r3, r2
    38a4:	bl	33dc <ExFatFormatter::writeUpcase(unsigned long)>
    38a8:	cmp	r0, #0
    38aa:	beq.w	362e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1a2>
  if (m_upcaseSize > BYTES_PER_SECTOR * sectorsPerCluster) {
    38ae:	ldr	r2, [sp, #8]
    38b0:	mov.w	r3, #512	; 0x200
    38b4:	lsls	r3, r2
    38b6:	ldr	r2, [sp, #16]
    38b8:	ldr	r2, [r2, #8]
    38ba:	cmp	r2, r3
    38bc:	bhi.w	362e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1a2>
  sector = partitionOffset + clusterHeapOffset + 2 * sectorsPerCluster;
    38c0:	mov.w	r8, #2
    38c4:	ldr	r3, [sp, #8]
  memset(secBuf, 0, BYTES_PER_SECTOR);
    38c6:	mov.w	r2, #512	; 0x200
    38ca:	movs	r1, #0
  sector = partitionOffset + clusterHeapOffset + 2 * sectorsPerCluster;
    38cc:	lsl.w	r9, r8, r3
    38d0:	ldr	r3, [sp, #12]
  memset(secBuf, 0, BYTES_PER_SECTOR);
    38d2:	mov	r0, r4
  sector = partitionOffset + clusterHeapOffset + 2 * sectorsPerCluster;
    38d4:	add	r9, r3
  memset(secBuf, 0, BYTES_PER_SECTOR);
    38d6:	bl	e064 <memset>
  dbm->type = EXFAT_TYPE_BITMAP;
    38da:	movs	r2, #129	; 0x81
  label->type = EXFAT_TYPE_LABEL & 0X7F;
    38dc:	movs	r3, #3
  setLe32(dup->checksum, m_upcaseChecksum);
    38de:	ldr	r1, [sp, #16]
    38e0:	add.w	r9, r9, #4294967295
  dbm->type = EXFAT_TYPE_BITMAP;
    38e4:	strb.w	r2, [r4, #32]
  dup->type = EXFAT_TYPE_UPCASE;
    38e8:	movs	r2, #130	; 0x82
  label->type = EXFAT_TYPE_LABEL & 0X7F;
    38ea:	strb	r3, [r4, #0]
  dup->type = EXFAT_TYPE_UPCASE;
    38ec:	strb.w	r2, [r4, #64]	; 0x40
  setLe64(dbm->size, bitmapSize);
    38f0:	strd	r8, r6, [r4, #52]	; 0x34
  setLe32(dup->checksum, m_upcaseChecksum);
    38f4:	ldr	r2, [r1, #4]
  *reinterpret_cast<uint64_t*>(dst) = src;
    38f6:	mov.w	r8, #1
  *reinterpret_cast<uint32_t*>(dst) = src;
    38fa:	str	r3, [r4, #84]	; 0x54
    38fc:	str	r2, [r4, #68]	; 0x44
  setLe64(dup->size, m_upcaseSize);
    38fe:	ldr	r3, [r1, #8]
    3900:	str	r3, [r4, #88]	; 0x58
  setLe64(dbm->size, bitmapSize);
    3902:	movs	r3, #0
  setLe64(dup->size, m_upcaseSize);
    3904:	str	r3, [r4, #92]	; 0x5c
  for (uint32_t i = 0; i < ns; i++) {
    3906:	b.n	3926 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x49a>
    3908:	.word	0x2000082c
    390c:	.word	0x200007c8
    3910:	.word	0x200007e0
    3914:	.word	0x200007f0
    3918:	.word	0x20000808
    391c:	ldr	r3, [sp, #28]
    391e:	cmp	r8, r3
    3920:	bcs.n	399a <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x50e>
    3922:	add.w	r8, r8, #1
    if (!dev->writeSector(sector + i, secBuf)) {
    3926:	ldr	r3, [r5, #0]
    3928:	add.w	r1, r9, r8
    392c:	mov	r2, r4
    392e:	mov	r0, r5
    3930:	ldr	r3, [r3, #32]
    3932:	blx	r3
    3934:	mov	r6, r0
    3936:	cmp	r0, #0
    3938:	beq.w	3620 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
    if (i == 0) {
    393c:	cmp.w	r8, #1
    3940:	bne.n	391c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x490>
      memset(secBuf, 0, BYTES_PER_SECTOR);
    3942:	mov.w	r2, #512	; 0x200
    3946:	movs	r1, #0
    3948:	mov	r0, r4
    394a:	bl	e064 <memset>
  for (uint32_t i = 0; i < ns; i++) {
    394e:	b.n	3922 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x496>
  writeMsg(pr, "Writing upcase table\r\n");
    3950:	cmp	r7, #0
    3952:	beq.n	389c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x410>
    3954:	ldr	r3, [r7, #0]
    3956:	movs	r2, #22
    3958:	ldr	r1, [pc, #80]	; (39ac <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x520>)
    395a:	mov	r0, r7
    395c:	ldr	r3, [r3, #4]
    395e:	blx	r3
  if (!writeUpcase(partitionOffset + clusterHeapOffset + sectorsPerCluster)) {
    3960:	ldr	r3, [sp, #12]
    3962:	ldr	r2, [sp, #28]
    3964:	ldr	r0, [sp, #16]
    3966:	adds	r1, r3, r2
    3968:	bl	33dc <ExFatFormatter::writeUpcase(unsigned long)>
    396c:	cmp	r0, #0
    396e:	beq.w	3622 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x196>
  if (m_upcaseSize > BYTES_PER_SECTOR * sectorsPerCluster) {
    3972:	ldr	r2, [sp, #8]
    3974:	mov.w	r3, #512	; 0x200
    3978:	lsls	r3, r2
    397a:	ldr	r2, [sp, #16]
    397c:	ldr	r2, [r2, #8]
    397e:	cmp	r2, r3
    3980:	bhi.w	3622 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x196>
  writeMsg(pr, "Writing root\r\n");
    3984:	ldr	r1, [pc, #40]	; (39b0 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x524>)
    3986:	mov	r0, r7
    3988:	bl	3300 <Print::write(char const*) [clone .isra.0]>
    398c:	b.n	38c0 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x434>
  sectorsPerCluster = 1UL << sectorsPerClusterShift;
    398e:	mov.w	r2, #256	; 0x100
    3992:	str.w	r8, [sp, #8]
    3996:	str	r2, [sp, #28]
    3998:	b.n	34de <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x52>
  writeMsg(pr, "Format done\r\n");
    399a:	cmp	r7, #0
    399c:	beq.w	3630 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1a4>
    39a0:	ldr	r1, [pc, #16]	; (39b4 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x528>)
    39a2:	mov	r0, r7
    39a4:	bl	3300 <Print::write(char const*) [clone .isra.0]>
    39a8:	b.n	3630 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1a4>
    39aa:	nop
    39ac:	.word	0x200007f4
    39b0:	.word	0x2000080c
    39b4:	.word	0x2000081c

000039b8 <ExFatFile::cmpName(DirName_t const*, ExName_t*)>:
  hash = ((hash << 15) | (hash >> 1)) + (c & 0XFF);
  hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
  return hash;
}
//------------------------------------------------------------------------------
bool ExFatFile::cmpName(const DirName_t* dirName, ExName_t* fname) {
    39b8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  const char* next;
  /** Position one beyond last LFN character. */
  const char* end;
#if !USE_UTF8_LONG_NAMES
  /** \return true if at end. */
  bool atEnd() { return next == end; }
    39bc:	ldrd	r3, r8, [r2, #4]
    39c0:	add.w	r9, r3, #15
  return *reinterpret_cast<const uint16_t*>(src);
    39c4:	ldrh.w	r0, [r1, #2]!
  for (uint8_t i = 0; i < 15; i++) {
    uint16_t u = getLe16(dirName->unicode + 2 * i);
    if (fname->atEnd()) {
    39c8:	cmp	r8, r3
  /** Reset to start of LFN. */
  void reset() { next = begin; }
  /** \return next char of LFN. */
  char getch() { return atEnd() ? 0 : *next++; }
    39ca:	add.w	r3, r3, #1
    if (toUpcase(cp) != toUpcase(u)) {
      return false;
    }
#else   // USE_UTF8_LONG_NAMES
    char c = fname->getch();
    if (u >= 0x7F || toUpper(c) != toUpper(u)) {
    39ce:	uxtb.w	ip, r0
    if (fname->atEnd()) {
    39d2:	beq.n	3a12 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x5a>
    39d4:	str	r3, [r2, #4]
    if (u >= 0x7F || toUpper(c) != toUpper(u)) {
    39d6:	cmp	r0, #126	; 0x7e
    39d8:	ldrb.w	lr, [r3, #-1]
static char toUpper(char c) { return 'a' <= c && c <= 'z' ? c - 'a' + 'A' : c; }
    39dc:	sub.w	r4, ip, #97	; 0x61
    39e0:	sub.w	r6, ip, #32
    39e4:	sub.w	r5, lr, #97	; 0x61
    39e8:	sub.w	r7, lr, #32
    if (u >= 0x7F || toUpper(c) != toUpper(u)) {
    39ec:	bhi.n	3a0c <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x54>
static char toUpper(char c) { return 'a' <= c && c <= 'z' ? c - 'a' + 'A' : c; }
    39ee:	cmp	r5, #25
    39f0:	it	ls
    39f2:	uxtbls.w	lr, r7
    39f6:	cmp	r4, #25
    39f8:	it	ls
    39fa:	uxtbls.w	ip, r6
    if (u >= 0x7F || toUpper(c) != toUpper(u)) {
    39fe:	cmp	ip, lr
    3a00:	bne.n	3a0c <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x54>
  for (uint8_t i = 0; i < 15; i++) {
    3a02:	cmp	r9, r3
    3a04:	bne.n	39c4 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0xc>
      return false;
    }
#endif  // USE_UTF8_LONG_NAMES
  }
  return true;
    3a06:	movs	r0, #1
}
    3a08:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return false;
    3a0c:	movs	r0, #0
}
    3a0e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return u == 0;
    3a12:	clz	r0, r0
    3a16:	lsrs	r0, r0, #5
}
    3a18:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00003a1c <ExFatFile::getName7(char*, unsigned int)>:
//------------------------------------------------------------------------------
size_t ExFatFile::getName7(char* name, size_t count) {
    3a1c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  DirName_t* dn;
  size_t n = 0;
  if (!isOpen()) {
    3a20:	ldrb.w	r3, [r0, #49]	; 0x31
size_t ExFatFile::getName7(char* name, size_t count) {
    3a24:	mov	r7, r1
  if (!isOpen()) {
    3a26:	cbz	r3, 3a8e <ExFatFile::getName7(char*, unsigned int)+0x72>
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t is = 2; is <= m_setCount; is++) {
    3a28:	ldrb.w	r3, [r0, #48]	; 0x30
    3a2c:	mov	r6, r0
    3a2e:	cmp	r3, #1
    3a30:	bls.n	3a9a <ExFatFile::getName7(char*, unsigned int)+0x7e>
    3a32:	mov	r5, r2
    3a34:	mov.w	r8, #2
  size_t n = 0;
    3a38:	movs	r4, #0
    dn = reinterpret_cast<DirName_t*>(dirCache(is, FsCache::CACHE_FOR_READ));
    3a3a:	movs	r2, #0
    3a3c:	mov	r1, r8
    3a3e:	mov	r0, r6
    3a40:	bl	3b04 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
    3a44:	mov	ip, r0
    3a46:	cbz	r0, 3a8e <ExFatFile::getName7(char*, unsigned int)+0x72>
    3a48:	ldrb	r3, [r0, #0]
    3a4a:	cmp	r3, #193	; 0xc1
    3a4c:	bne.n	3a8e <ExFatFile::getName7(char*, unsigned int)+0x72>
    3a4e:	add.w	lr, r4, #4294967295
    3a52:	add.w	r2, r4, #15
    3a56:	add	lr, r7
    3a58:	ldrh.w	r3, [ip, #2]!
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (uint8_t in = 0; in < 15; in++) {
      uint16_t c = getLe16(dn->unicode + 2 * in);
      if (c == 0) {
    3a5c:	cbz	r3, 3a82 <ExFatFile::getName7(char*, unsigned int)+0x66>
        goto done;
      }
      if ((n + 1) >= count) {
    3a5e:	adds	r4, #1
    3a60:	cmp	r4, r5
    3a62:	bcs.n	3a8e <ExFatFile::getName7(char*, unsigned int)+0x72>
        DBG_FAIL_MACRO;
        goto fail;
      }
      name[n++] = c < 0X7F ? c : '?';
    3a64:	cmp	r3, #127	; 0x7f
    3a66:	it	cs
    3a68:	movcs	r3, #63	; 0x3f
    for (uint8_t in = 0; in < 15; in++) {
    3a6a:	cmp	r4, r2
      name[n++] = c < 0X7F ? c : '?';
    3a6c:	strb.w	r3, [lr, #1]!
    for (uint8_t in = 0; in < 15; in++) {
    3a70:	bne.n	3a58 <ExFatFile::getName7(char*, unsigned int)+0x3c>
  for (uint8_t is = 2; is <= m_setCount; is++) {
    3a72:	add.w	r8, r8, #1
    3a76:	ldrb.w	r3, [r6, #48]	; 0x30
    3a7a:	uxtb.w	r8, r8
    3a7e:	cmp	r3, r8
    3a80:	bcs.n	3a3a <ExFatFile::getName7(char*, unsigned int)+0x1e>
    }
  }
done:
  name[n] = 0;
    3a82:	add	r7, r4
    3a84:	movs	r3, #0
  return n;

fail:
  *name = 0;
  return 0;
}
    3a86:	mov	r0, r4
  name[n] = 0;
    3a88:	strb	r3, [r7, #0]
}
    3a8a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  *name = 0;
    3a8e:	movs	r3, #0
  return 0;
    3a90:	mov	r4, r3
  *name = 0;
    3a92:	strb	r3, [r7, #0]
}
    3a94:	mov	r0, r4
    3a96:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  size_t n = 0;
    3a9a:	movs	r4, #0
    3a9c:	b.n	3a84 <ExFatFile::getName7(char*, unsigned int)+0x68>
    3a9e:	nop

00003aa0 <ExFatFile::hashName(ExName_t*)>:
fail:
  *name = 0;
  return 0;
}
//------------------------------------------------------------------------------
bool ExFatFile::hashName(ExName_t* fname) {
    3aa0:	push	{r4, r5, lr}
  void reset() { next = begin; }
    3aa2:	ldr	r5, [r1, #0]
  bool atEnd() { return next == end; }
    3aa4:	ldr	r4, [r1, #8]
  void reset() { next = begin; }
    3aa6:	str	r5, [r1, #4]
    }
    hash = exFatHash(u, hash);
    fname->nameLength++;
  }
#else   // USE_UTF8_LONG_NAMES
  while (!fname->atEnd()) {
    3aa8:	cmp	r4, r5
    3aaa:	beq.n	3af8 <ExFatFile::hashName(ExName_t*)+0x58>
    3aac:	mov	r2, r5
  uint16_t hash = 0;
    3aae:	movs	r3, #0
  char getch() { return atEnd() ? 0 : *next++; }
    3ab0:	adds	r2, #1
  hash = ((hash << 15) | (hash >> 1)) + u;
    3ab2:	lsls	r0, r3, #15
    3ab4:	str	r2, [r1, #4]
    3ab6:	orr.w	r3, r0, r3, lsr #1
    3aba:	ldrb.w	r0, [r2, #-1]
static char toUpper(char c) { return 'a' <= c && c <= 'z' ? c - 'a' + 'A' : c; }
    3abe:	sub.w	ip, r0, #97	; 0x61
    3ac2:	sub.w	lr, r0, #32
    3ac6:	cmp.w	ip, #25
    3aca:	it	ls
    3acc:	uxtbls.w	r0, lr
  while (!fname->atEnd()) {
    3ad0:	cmp	r4, r2
  hash = ((hash << 15) | (hash >> 1)) + u;
    3ad2:	add	r3, r0
  hash = ((hash << 15) | (hash >> 1));
    3ad4:	mov.w	r0, r3, lsl #15
    3ad8:	ubfx	r3, r3, #1, #15
    3adc:	and.w	r0, r0, #32768	; 0x8000
    3ae0:	orr.w	r3, r3, r0
  while (!fname->atEnd()) {
    3ae4:	bne.n	3ab0 <ExFatFile::hashName(ExName_t*)+0x10>
    // Convert to byte for smaller exFatHash.
    char c = fname->getch();
    hash = exFatHash(c, hash);
  }
  fname->nameLength = fname->end - fname->begin;
    3ae6:	subs	r4, r4, r5
#endif  // USE_UTF8_LONG_NAMES
  fname->nameHash = hash;
    3ae8:	strh	r3, [r1, #16]
  if (!fname->nameLength || fname->nameLength > EXFAT_MAX_NAME_LENGTH) {
    3aea:	subs	r0, r4, #1
  fname->nameLength = fname->end - fname->begin;
    3aec:	str	r4, [r1, #12]
  if (!fname->nameLength || fname->nameLength > EXFAT_MAX_NAME_LENGTH) {
    3aee:	cmp	r0, #254	; 0xfe
    3af0:	ite	hi
    3af2:	movhi	r0, #0
    3af4:	movls	r0, #1
  }
  return true;

fail:
  return false;
}
    3af6:	pop	{r4, r5, pc}
  while (!fname->atEnd()) {
    3af8:	movs	r0, #0
    3afa:	mov	r4, r0
  uint16_t hash = 0;
    3afc:	mov	r3, r0
  fname->nameLength = fname->end - fname->begin;
    3afe:	str	r4, [r1, #12]
  fname->nameHash = hash;
    3b00:	strh	r3, [r1, #16]
}
    3b02:	pop	{r4, r5, pc}

00003b04 <ExFatFile::dirCache(unsigned char, unsigned char)>:
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    3b04:	push	{r4, r5, r6, lr}
  DirPos_t pos = m_dirPos;
    3b06:	add.w	r3, r0, #36	; 0x24
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    3b0a:	sub	sp, #16
    3b0c:	mov	ip, r1
    3b0e:	mov	r4, r0
  DirPos_t pos = m_dirPos;
    3b10:	add	r5, sp, #4
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    3b12:	mov	r6, r2
  DirPos_t pos = m_dirPos;
    3b14:	ldmia.w	r3, {r0, r1, r2}
    3b18:	stmia.w	r5, {r0, r1, r2}
  if (m_vol->dirSeek(&pos, FS_DIR_SIZE * set) != 1) {
    3b1c:	mov.w	r2, ip, lsl #5
    3b20:	mov	r1, r5
    3b22:	ldr	r0, [r4, #32]
    3b24:	bl	45fc <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    3b28:	cmp	r0, #1
    3b2a:	bne.n	3b3a <ExFatFile::dirCache(unsigned char, unsigned char)+0x36>
  return m_vol->dirCache(&pos, options);
    3b2c:	mov	r2, r6
    3b2e:	mov	r1, r5
    3b30:	ldr	r0, [r4, #32]
    3b32:	bl	45c4 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
}
    3b36:	add	sp, #16
    3b38:	pop	{r4, r5, r6, pc}
    return nullptr;
    3b3a:	movs	r0, #0
}
    3b3c:	add	sp, #16
    3b3e:	pop	{r4, r5, r6, pc}

00003b40 <ExFatFile::close()>:
bool ExFatFile::close() {
    3b40:	push	{r4, lr}
    3b42:	mov	r4, r0
  bool rtn = sync();
    3b44:	bl	4c18 <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    3b48:	movs	r3, #0
    3b4a:	strb.w	r3, [r4, #49]	; 0x31
  m_flags = 0;
    3b4e:	strb.w	r3, [r4, #51]	; 0x33
}
    3b52:	pop	{r4, pc}

00003b54 <ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)>:
bool ExFatFile::getCreateDateTime(uint16_t* pdate, uint16_t* ptime) {
    3b54:	push	{r3, r4, r5, lr}
    3b56:	mov	r4, r2
    3b58:	mov	r5, r1
      m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_READ));
    3b5a:	movs	r2, #0
    3b5c:	add.w	r1, r0, #36	; 0x24
    3b60:	ldr	r0, [r0, #32]
    3b62:	bl	45c4 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    3b66:	mov	r3, r0
    3b68:	cbz	r0, 3b74 <ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)+0x20>
    3b6a:	ldrh	r2, [r0, #10]
  return true;
    3b6c:	movs	r0, #1
  *pdate = getLe16(df->createDate);
    3b6e:	strh	r2, [r5, #0]
    3b70:	ldrh	r3, [r3, #8]
  *ptime = getLe16(df->createTime);
    3b72:	strh	r3, [r4, #0]
}
    3b74:	pop	{r3, r4, r5, pc}
    3b76:	nop

00003b78 <ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)>:
bool ExFatFile::getModifyDateTime(uint16_t* pdate, uint16_t* ptime) {
    3b78:	push	{r3, r4, r5, lr}
    3b7a:	mov	r4, r2
    3b7c:	mov	r5, r1
      m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_READ));
    3b7e:	movs	r2, #0
    3b80:	add.w	r1, r0, #36	; 0x24
    3b84:	ldr	r0, [r0, #32]
    3b86:	bl	45c4 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    3b8a:	mov	r3, r0
    3b8c:	cbz	r0, 3b98 <ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)+0x20>
    3b8e:	ldrh	r2, [r0, #14]
  return true;
    3b90:	movs	r0, #1
  *pdate = getLe16(df->modifyDate);
    3b92:	strh	r2, [r5, #0]
    3b94:	ldrh	r3, [r3, #12]
  *ptime = getLe16(df->modifyTime);
    3b96:	strh	r3, [r4, #0]
}
    3b98:	pop	{r3, r4, r5, pc}
    3b9a:	nop

00003b9c <ExFatFile::openRoot(ExFatVolume*)>:
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRoot(ExFatVolume* vol) {
    3b9c:	push	{r3, r4, r5, lr}
    3b9e:	mov	r5, r1
  if (isOpen()) {
    3ba0:	ldrb.w	r1, [r0, #49]	; 0x31
    3ba4:	cbz	r1, 3baa <ExFatFile::openRoot(ExFatVolume*)+0xe>
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
  return true;

fail:
  return false;
    3ba6:	movs	r0, #0
}
    3ba8:	pop	{r3, r4, r5, pc}
  memset(this, 0, sizeof(ExFatFile));
    3baa:	movs	r2, #56	; 0x38
    3bac:	mov	r4, r0
    3bae:	bl	e064 <memset>
  m_flags = FILE_FLAG_READ;
    3bb2:	movs	r3, #1
  m_attributes = FILE_ATTR_ROOT;
    3bb4:	movs	r2, #64	; 0x40
  m_vol = vol;
    3bb6:	str	r5, [r4, #32]
  m_flags = FILE_FLAG_READ;
    3bb8:	mov	r0, r3
    3bba:	strb.w	r3, [r4, #51]	; 0x33
  m_attributes = FILE_ATTR_ROOT;
    3bbe:	strb.w	r2, [r4, #49]	; 0x31
}
    3bc2:	pop	{r3, r4, r5, pc}

00003bc4 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>:
//------------------------------------------------------------------------------
bool ExFatFile::parsePathName(const char* path, ExName_t* fname,
                              const char** ptr) {
    3bc4:	push	{r4, r5, r6, r7}
    3bc6:	mov	r5, r1
  // Skip leading spaces.
  while (*path == ' ') {
    3bc8:	ldrb	r1, [r1, #0]
    3bca:	cmp	r1, #32
    3bcc:	bne.n	3bd6 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x12>
    3bce:	ldrb.w	r4, [r5, #1]!
    3bd2:	cmp	r4, #32
    3bd4:	beq.n	3bce <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa>
    path++;
  }
  fname->begin = path;
    3bd6:	str	r5, [r2, #0]
  fname->end = path;
    3bd8:	str	r5, [r2, #8]
  while (*path && !isDirSeparator(*path)) {
    3bda:	ldrb	r4, [r5, #0]
    3bdc:	cmp	r4, #47	; 0x2f
    3bde:	beq.n	3c04 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x40>
    3be0:	cbz	r4, 3c04 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x40>
    3be2:	adds	r6, r5, #1
    3be4:	cmp	r4, #60	; 0x3c
    3be6:	ldr	r7, [pc, #120]	; (3c60 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x9c>)
    uint8_t c = *path++;
    3be8:	mov	r5, r6
  return !(lfnReservedChar(c) || c & 0X80);
    3bea:	bhi.n	3c42 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x7e>
    3bec:	cmp	r4, #33	; 0x21
    3bee:	bhi.n	3c16 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x52>
    3bf0:	add.w	ip, r4, #4294967295
    3bf4:	cmp.w	ip, #30
    3bf8:	bhi.n	3c28 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x64>
  *ptr = path;
  return hashName(fname);

fail:
  return false;
}
    3bfa:	movs	r0, #0
    3bfc:	pop	{r4, r5, r6, r7}
    3bfe:	bx	lr
  for (; *path == ' ' || isDirSeparator(*path); path++) {
    3c00:	ldrb.w	r4, [r5, #1]!
    3c04:	cmp	r4, #32
    3c06:	beq.n	3c00 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x3c>
    3c08:	cmp	r4, #47	; 0x2f
    3c0a:	beq.n	3c00 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x3c>
  *ptr = path;
    3c0c:	str	r5, [r3, #0]
  return hashName(fname);
    3c0e:	mov	r1, r2
}
    3c10:	pop	{r4, r5, r6, r7}
  return hashName(fname);
    3c12:	b.w	3aa0 <ExFatFile::hashName(ExName_t*)>
    3c16:	sub.w	ip, r4, #34	; 0x22
    3c1a:	uxtb.w	ip, ip
    3c1e:	lsr.w	ip, r7, ip
    3c22:	tst.w	ip, #1
    3c26:	bne.n	3bfa <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x36>
    if (c != '.' && c != ' ') {
    3c28:	cmp	r4, #46	; 0x2e
    3c2a:	beq.n	3c30 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x6c>
    3c2c:	cmp	r4, #32
    3c2e:	bne.n	3c50 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x8c>
  while (*path && !isDirSeparator(*path)) {
    3c30:	ldrb.w	r4, [r6], #1
    3c34:	cmp	r4, #0
    3c36:	beq.n	3c04 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x40>
    3c38:	cmp	r4, #47	; 0x2f
    3c3a:	beq.n	3c04 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x40>
    uint8_t c = *path++;
    3c3c:	cmp	r4, #60	; 0x3c
    3c3e:	mov	r5, r6
  return !(lfnReservedChar(c) || c & 0X80);
    3c40:	bls.n	3bec <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x28>
    3c42:	cmp	r4, #92	; 0x5c
    3c44:	beq.n	3bfa <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x36>
    3c46:	bls.n	3c54 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x90>
    3c48:	cmp	r4, #124	; 0x7c
    3c4a:	beq.n	3bfa <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x36>
    3c4c:	lsls	r1, r4, #24
    3c4e:	bmi.n	3bfa <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x36>
      fname->end = path;
    3c50:	str	r6, [r2, #8]
    3c52:	b.n	3c30 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x6c>
    3c54:	subs	r4, #62	; 0x3e
    3c56:	cmp	r4, #1
    3c58:	bhi.n	3c50 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x8c>
}
    3c5a:	movs	r0, #0
    3c5c:	pop	{r4, r5, r6, r7}
    3c5e:	bx	lr
    3c60:	.word	0x05002101

00003c64 <ExFatFile::read(void*, unsigned int)>:
  m_curPosition = saveCurPosition;
  m_curCluster = saveCurCluster;
  return c;
}
//------------------------------------------------------------------------------
int ExFatFile::read(void* buf, size_t count) {
    3c64:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  bool isReadable() const { return m_flags & FILE_FLAG_READ; }
    3c68:	ldrb.w	r3, [r0, #51]	; 0x33
    3c6c:	sub	sp, #12
    3c6e:	mov	r5, r0
  uint8_t* cache;
  uint16_t sectorOffset;
  uint32_t sector;
  uint32_t clusterOffset;

  if (!isReadable()) {
    3c70:	lsls	r4, r3, #31
    3c72:	bpl.n	3d5e <ExFatFile::read(void*, unsigned int)+0xfa>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isContiguous() || isFile()) {
    3c74:	lsls	r0, r3, #25
    3c76:	mov	r7, r1
    3c78:	mov	r8, r2
    3c7a:	bpl.w	3dde <ExFatFile::read(void*, unsigned int)+0x17a>
    if ((m_curPosition + count) > m_validLength) {
    3c7e:	ldrd	r2, r3, [r5]
    3c82:	ldrd	r1, r0, [r5, #16]
    3c86:	adds.w	r4, r8, r2
    3c8a:	adc.w	r3, r3, #0
    3c8e:	cmp	r1, r4
    3c90:	sbcs.w	r3, r0, r3
    3c94:	bcc.w	3dea <ExFatFile::read(void*, unsigned int)+0x186>
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    3c98:	cmp.w	r8, #0
    3c9c:	beq.n	3d56 <ExFatFile::read(void*, unsigned int)+0xf2>
    if ((m_curPosition + count) > m_validLength) {
    3c9e:	mov	r6, r8
        m_curCluster =
            isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
      } else if (isContiguous()) {
        m_curCluster++;
      } else {
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    3ca0:	add.w	r9, r5, #24
    if ((m_curPosition + count) > m_validLength) {
    3ca4:	ldrd	r3, r2, [r5]
    clusterOffset = m_curPosition & m_vol->clusterMask();
    3ca8:	ldr.w	sl, [r5, #32]
    3cac:	ldr.w	r4, [sl, #1080]	; 0x438
    3cb0:	ands	r4, r3
    sectorOffset = clusterOffset & m_vol->sectorMask();
    3cb2:	ubfx	fp, r4, #0, #9
    if (clusterOffset == 0) {
    3cb6:	cmp	r4, #0
    3cb8:	bne.n	3d9c <ExFatFile::read(void*, unsigned int)+0x138>
      if (m_curPosition == 0) {
    3cba:	orrs	r3, r2
    3cbc:	bne.n	3da0 <ExFatFile::read(void*, unsigned int)+0x13c>
            isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
    3cbe:	ldrb.w	r3, [r5, #49]	; 0x31
    3cc2:	lsls	r2, r3, #25
   *
   * \return true if busy else false.
   */
  bool isBusy() { return m_blockDev->isBusy(); }
  /** \return the root directory start cluster number. */
  uint32_t rootDirectoryCluster() const { return m_rootDirectoryCluster; }
    3cc4:	ite	mi
    3cc6:	ldrmi.w	r2, [sl, #1076]	; 0x434
    3cca:	ldrpl	r2, [r5, #28]
        m_curCluster++;
    3ccc:	str	r2, [r5, #24]
  bool dataCacheSync() { return m_dataCache.sync(); }
  //----------------------------------------------------------------------------
  uint32_t clusterMask() const { return m_clusterMask; }
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    3cce:	ldrb.w	r0, [sl, #1093]	; 0x445
    3cd2:	subs	r2, #2
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
    3cd4:	ldr.w	r1, [sl, #1068]	; 0x42c
             (clusterOffset >> m_vol->bytesPerSectorShift());
    3cd8:	lsrs	r3, r4, #9
    3cda:	lsls	r2, r0
    sector = m_vol->clusterStartSector(m_curCluster) +
    3cdc:	add.w	r1, r1, r4, lsr #9
    3ce0:	add	r1, r2
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector() ||
    3ce2:	cmp.w	fp, #0
    3ce6:	bne.n	3d74 <ExFatFile::read(void*, unsigned int)+0x110>
    3ce8:	cmp.w	r6, #512	; 0x200
    3cec:	bcc.n	3d74 <ExFatFile::read(void*, unsigned int)+0x110>
   * \param[in] option mode for cached sector.
   * \return Address of cached sector.
   */
  uint8_t* prepare(uint32_t sector, uint8_t option);
  /** \return Logical sector number for cached sector. */
  uint32_t sector() { return m_sector; }
    3cee:	ldr.w	r2, [sl, #536]	; 0x218
    3cf2:	cmp	r1, r2
    3cf4:	beq.n	3d74 <ExFatFile::read(void*, unsigned int)+0x110>
        goto fail;
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2 * m_vol->bytesPerSector()) {
    3cf6:	cmp.w	r6, #1024	; 0x400
    3cfa:	bcc.n	3dae <ExFatFile::read(void*, unsigned int)+0x14a>
  uint32_t sectorsPerCluster() const { return 1UL << m_sectorsPerClusterShift; }
    3cfc:	mov.w	fp, #1
    3d00:	lsl.w	fp, fp, r0
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
      // Limit reads to current cluster.
      uint32_t maxNs = m_vol->sectorsPerCluster() -
                       (clusterOffset >> m_vol->bytesPerSectorShift());
    3d04:	sub.w	fp, fp, r3
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    3d08:	lsrs	r3, r6, #9
    3d0a:	cmp	fp, r3
    3d0c:	it	cs
    3d0e:	movcs	fp, r3
    return sector <= m_sector && m_sector < (sector + count);
    3d10:	cmp	r1, r2
      if (ns > maxNs) {
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
    3d12:	mov.w	r4, fp, lsl #9
    3d16:	bhi.n	3d2e <ExFatFile::read(void*, unsigned int)+0xca>
    3d18:	add.w	r3, r1, fp
    3d1c:	cmp	r2, r3
    3d1e:	bcs.n	3d2e <ExFatFile::read(void*, unsigned int)+0xca>
    if (isCached(sector, count) && !sync()) {
    3d20:	add.w	r0, sl, #528	; 0x210
    3d24:	str	r1, [sp, #4]
    3d26:	bl	3174 <FsCache::sync()>
    3d2a:	ldr	r1, [sp, #4]
    3d2c:	cbz	r0, 3d5e <ExFatFile::read(void*, unsigned int)+0xfa>
    return m_blockDev->readSectors(sector, dst, count);
    3d2e:	ldr.w	r0, [sl, #532]	; 0x214
    3d32:	mov	r3, fp
    3d34:	ldr	r2, [r0, #0]
    3d36:	ldr.w	sl, [r2, #20]
    3d3a:	mov	r2, r7
    3d3c:	blx	sl
      if (!m_vol->cacheSafeRead(sector, dst, ns)) {
    3d3e:	cbz	r0, 3d5e <ExFatFile::read(void*, unsigned int)+0xfa>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
    3d40:	mov	r3, r4
    dst += n;
    3d42:	add	r7, r4
    m_curPosition += n;
    3d44:	ldrd	r1, r2, [r5]
    3d48:	adds	r3, r3, r1
    3d4a:	adc.w	r2, r2, #0
  while (toRead) {
    3d4e:	subs	r6, r6, r4
    m_curPosition += n;
    3d50:	strd	r3, r2, [r5]
  while (toRead) {
    3d54:	bne.n	3ca8 <ExFatFile::read(void*, unsigned int)+0x44>
    toRead -= n;
  }
  return count - toRead;
    3d56:	mov	r0, r8

fail:
  m_error |= READ_ERROR;
  return -1;
}
    3d58:	add	sp, #12
    3d5a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  m_error |= READ_ERROR;
    3d5e:	ldrb.w	r3, [r5, #50]	; 0x32
  return -1;
    3d62:	mov.w	r0, #4294967295
  m_error |= READ_ERROR;
    3d66:	orr.w	r3, r3, #2
    3d6a:	strb.w	r3, [r5, #50]	; 0x32
}
    3d6e:	add	sp, #12
    3d70:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      n = m_vol->bytesPerSector() - sectorOffset;
    3d74:	rsb	r4, fp, #512	; 0x200
    return m_dataCache.prepare(sector, option);
    3d78:	movs	r2, #0
    3d7a:	add.w	r0, sl, #528	; 0x210
    3d7e:	cmp	r4, r6
    3d80:	it	cs
    3d82:	movcs	r4, r6
    3d84:	bl	31cc <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    3d88:	cmp	r0, #0
    3d8a:	beq.n	3d5e <ExFatFile::read(void*, unsigned int)+0xfa>
      memcpy(dst, src, n);
    3d8c:	add.w	r1, r0, fp
    3d90:	mov	r2, r4
    3d92:	mov	r0, r7
    3d94:	bl	a0c4 <memcpy>
    m_curPosition += n;
    3d98:	mov	r3, r4
    3d9a:	b.n	3d42 <ExFatFile::read(void*, unsigned int)+0xde>
        m_curCluster++;
    3d9c:	ldr	r2, [r5, #24]
    3d9e:	b.n	3cce <ExFatFile::read(void*, unsigned int)+0x6a>
      } else if (isContiguous()) {
    3da0:	ldrb.w	r3, [r5, #51]	; 0x33
    3da4:	lsls	r3, r3, #25
    3da6:	bpl.n	3dc6 <ExFatFile::read(void*, unsigned int)+0x162>
        m_curCluster++;
    3da8:	ldr	r2, [r5, #24]
    3daa:	adds	r2, #1
    3dac:	b.n	3ccc <ExFatFile::read(void*, unsigned int)+0x68>
    return m_blockDev->readSector(sector, dst);
    3dae:	ldr.w	r0, [sl, #532]	; 0x214
    3db2:	mov	r2, r7
    3db4:	ldr	r3, [r0, #0]
    3db6:	ldr	r3, [r3, #16]
    3db8:	blx	r3
      if (!m_vol->cacheSafeRead(sector, dst)) {
    3dba:	cmp	r0, #0
    3dbc:	beq.n	3d5e <ExFatFile::read(void*, unsigned int)+0xfa>
    3dbe:	mov.w	r3, #512	; 0x200
      n = m_vol->bytesPerSector();
    3dc2:	mov	r4, r3
    3dc4:	b.n	3d42 <ExFatFile::read(void*, unsigned int)+0xde>
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    3dc6:	mov	r2, r9
    3dc8:	mov	r0, sl
    3dca:	ldr	r1, [r5, #24]
    3dcc:	bl	4680 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
        if (fg < 0) {
    3dd0:	cmp	r0, #0
    3dd2:	blt.n	3d5e <ExFatFile::read(void*, unsigned int)+0xfa>
        if (fg == 0) {
    3dd4:	beq.n	3df0 <ExFatFile::read(void*, unsigned int)+0x18c>
    sector = m_vol->clusterStartSector(m_curCluster) +
    3dd6:	ldr.w	sl, [r5, #32]
    3dda:	ldr	r2, [r5, #24]
    3ddc:	b.n	3cce <ExFatFile::read(void*, unsigned int)+0x6a>
  if (isContiguous() || isFile()) {
    3dde:	ldrb.w	r3, [r5, #49]	; 0x31
    3de2:	lsls	r1, r3, #28
    3de4:	bpl.w	3c98 <ExFatFile::read(void*, unsigned int)+0x34>
    3de8:	b.n	3c7e <ExFatFile::read(void*, unsigned int)+0x1a>
      count = toRead = m_validLength - m_curPosition;
    3dea:	sub.w	r8, r1, r2
    3dee:	b.n	3c98 <ExFatFile::read(void*, unsigned int)+0x34>
          if (isDir()) {
    3df0:	ldrb.w	r3, [r5, #49]	; 0x31
    3df4:	tst.w	r3, #80	; 0x50
    3df8:	beq.n	3d5e <ExFatFile::read(void*, unsigned int)+0xfa>
  return count - toRead;
    3dfa:	sub.w	r8, r8, r6
    3dfe:	mov	r0, r8
    3e00:	b.n	3d58 <ExFatFile::read(void*, unsigned int)+0xf4>
    3e02:	nop

00003e04 <ExFatFile::peek()>:
int ExFatFile::peek() {
    3e04:	push	{r4, r5, r6, r7, lr}
    3e06:	sub	sp, #12
    return read(&b, 1) == 1 ? b : -1;
    3e08:	movs	r2, #1
    3e0a:	mov	r4, r0
  uint32_t saveCurCluster = m_curCluster;
    3e0c:	ldr	r5, [r0, #24]
    3e0e:	add.w	r1, sp, #7
  uint64_t saveCurPosition = m_curPosition;
    3e12:	ldrd	r6, r7, [r0]
    3e16:	bl	3c64 <ExFatFile::read(void*, unsigned int)>
    3e1a:	cmp	r0, #1
  m_curCluster = saveCurCluster;
    3e1c:	str	r5, [r4, #24]
    3e1e:	ite	eq
    3e20:	ldrbeq.w	r0, [sp, #7]
    3e24:	movne.w	r0, #4294967295
  m_curPosition = saveCurPosition;
    3e28:	strd	r6, r7, [r4]
}
    3e2c:	add	sp, #12
    3e2e:	pop	{r4, r5, r6, r7, pc}

00003e30 <ExFatFile::seekSet(unsigned long long)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
    3e30:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3e34:	mov	r7, r3
  bool isOpen() const { return m_attributes; }
    3e36:	ldrb.w	r3, [r0, #49]	; 0x31
    3e3a:	sub	sp, #12
    3e3c:	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    3e3e:	ldr.w	r8, [r0, #24]
  // error if file not open
  if (!isOpen()) {
    3e42:	cmp	r3, #0
    3e44:	beq.n	3eea <ExFatFile::seekSet(unsigned long long)+0xba>
    3e46:	mov	r6, r2
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    3e48:	ldrd	r1, ip, [r0]
    3e4c:	cmp	ip, r7
    3e4e:	it	eq
    3e50:	cmpeq	r1, r2
    3e52:	beq.n	3f0e <ExFatFile::seekSet(unsigned long long)+0xde>
    return true;
  }
  if (pos == 0) {
    3e54:	orrs.w	r2, r6, r7
    3e58:	beq.n	3ef6 <ExFatFile::seekSet(unsigned long long)+0xc6>
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    3e5a:	lsls	r5, r3, #28
    3e5c:	bpl.n	3e68 <ExFatFile::seekSet(unsigned long long)+0x38>
    if (pos > m_validLength) {
    3e5e:	ldrd	r0, r2, [r0, #16]
    3e62:	cmp	r0, r6
    3e64:	sbcs	r2, r7
    3e66:	bcc.n	3eea <ExFatFile::seekSet(unsigned long long)+0xba>
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
  if (isContiguous()) {
    3e68:	ldrb.w	r2, [r4, #51]	; 0x33
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    3e6c:	subs	r5, r6, #1
    3e6e:	ldr.w	sl, [r4, #32]
  if (isContiguous()) {
    3e72:	str	r2, [sp, #4]
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    3e74:	adc.w	r0, r7, #4294967295
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    3e78:	ldrb.w	r2, [sl, #1093]	; 0x445
    3e7c:	adds	r2, #9
    3e7e:	uxtb	r2, r2
    3e80:	rsb	lr, r2, #32
    3e84:	lsrs	r5, r2
    3e86:	sub.w	r9, r2, #32
    3e8a:	lsl.w	fp, r0, lr
    3e8e:	lsr.w	r0, r0, r9
    3e92:	orr.w	r5, r5, fp
    3e96:	orrs	r5, r0
  if (isContiguous()) {
    3e98:	ldr	r0, [sp, #4]
    3e9a:	lsls	r0, r0, #25
    3e9c:	bmi.n	3f06 <ExFatFile::seekSet(unsigned long long)+0xd6>
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    3e9e:	subs	r0, r1, #1
    3ea0:	lsr.w	r2, r0, r2
    3ea4:	adc.w	r0, ip, #4294967295
  if (nNew < nCur || m_curPosition == 0) {
    3ea8:	orrs.w	ip, r1, ip
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    3eac:	lsl.w	lr, r0, lr
    3eb0:	lsr.w	r0, r0, r9
    3eb4:	orr.w	r2, r2, lr
    3eb8:	orr.w	r2, r2, r0
  if (nNew < nCur || m_curPosition == 0) {
    3ebc:	beq.n	3ec2 <ExFatFile::seekSet(unsigned long long)+0x92>
    3ebe:	cmp	r5, r2
    3ec0:	bcs.n	3f16 <ExFatFile::seekSet(unsigned long long)+0xe6>
    // must follow chain from first cluster
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
    3ec2:	lsls	r3, r3, #25
  uint32_t rootDirectoryCluster() const { return m_rootDirectoryCluster; }
    3ec4:	ite	mi
    3ec6:	ldrmi.w	r3, [sl, #1076]	; 0x434
    3eca:	ldrpl	r3, [r4, #28]
    3ecc:	str	r3, [r4, #24]
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    3ece:	add.w	r9, r4, #24
    3ed2:	b.n	3ee2 <ExFatFile::seekSet(unsigned long long)+0xb2>
    3ed4:	ldr	r1, [r4, #24]
    3ed6:	subs	r5, #1
    3ed8:	ldr	r0, [r4, #32]
    3eda:	bl	4680 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    3ede:	cmp	r0, #0
    3ee0:	ble.n	3eea <ExFatFile::seekSet(unsigned long long)+0xba>
    3ee2:	mov	r2, r9
  while (nNew--) {
    3ee4:	cmp	r5, #0
    3ee6:	bne.n	3ed4 <ExFatFile::seekSet(unsigned long long)+0xa4>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }

done:
    3ee8:	b.n	3efa <ExFatFile::seekSet(unsigned long long)+0xca>
  m_curPosition = pos;
  return true;

fail:
  m_curCluster = tmp;
  return false;
    3eea:	movs	r0, #0
  m_curCluster = tmp;
    3eec:	str.w	r8, [r4, #24]
}
    3ef0:	add	sp, #12
    3ef2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    m_curCluster = 0;
    3ef6:	movs	r3, #0
    3ef8:	str	r3, [r0, #24]
  return true;
    3efa:	movs	r0, #1
  m_curPosition = pos;
    3efc:	strd	r6, r7, [r4]
}
    3f00:	add	sp, #12
    3f02:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    m_curCluster = m_firstCluster + nNew;
    3f06:	ldr	r3, [r4, #28]
    3f08:	add	r3, r5
    3f0a:	str	r3, [r4, #24]
    goto done;
    3f0c:	b.n	3efa <ExFatFile::seekSet(unsigned long long)+0xca>
    return true;
    3f0e:	movs	r0, #1
}
    3f10:	add	sp, #12
    3f12:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    nNew -= nCur;
    3f16:	subs	r5, r5, r2
    3f18:	b.n	3ece <ExFatFile::seekSet(unsigned long long)+0x9e>
    3f1a:	nop

00003f1c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>:
bool ExFatFile::openPrivate(ExFatFile* dir, ExName_t* fname, oflag_t oflag) {
    3f1c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3f20:	mov	r8, r2
    3f22:	ldrb.w	r2, [r0, #49]	; 0x31
    3f26:	sub	sp, #60	; 0x3c
    3f28:	mov	r5, r0
  if (isOpen() || !dir->isDir()) {
    3f2a:	cmp	r2, #0
    3f2c:	bne.w	40dc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
  bool isDir() const { return m_attributes & FILE_ATTR_DIR; }
    3f30:	mov	fp, r1
    3f32:	ldrb.w	r1, [r1, #49]	; 0x31
    3f36:	tst.w	r1, #80	; 0x50
    3f3a:	beq.w	40dc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
  switch (oflag & O_ACCMODE) {
    3f3e:	and.w	r1, r3, #3
    3f42:	mov	sl, r3
    3f44:	cmp	r1, #3
    3f46:	beq.w	40dc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
    3f4a:	adds	r1, #1
    3f4c:	and.w	r0, r3, #8
    3f50:	orr.w	r3, r1, r0
    3f54:	str	r3, [sp, #8]
  if (fname) {
    3f56:	cmp.w	r8, #0
    3f5a:	beq.w	40f0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1d4>
    freeNeed = 2 + (fname->nameLength + 14) / 15;
    3f5e:	ldr.w	r1, [r8, #12]
    3f62:	add.w	r7, r1, #14
    3f66:	ldr	r1, [pc, #756]	; (425c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x340>)
    3f68:	umull	r1, r7, r1, r7
  if (pos == m_curPosition) {
    3f6c:	ldrd	r1, r0, [fp]
    freeNeed = 2 + (fname->nameLength + 14) / 15;
    3f70:	lsrs	r7, r7, #3
  if (pos == m_curPosition) {
    3f72:	orrs	r1, r0
    freeNeed = 2 + (fname->nameLength + 14) / 15;
    3f74:	add.w	r7, r7, #2
    3f78:	uxtb	r7, r7
  if (pos == m_curPosition) {
    3f7a:	beq.n	3f88 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x6c>
  m_curPosition = pos;
    3f7c:	movs	r0, #0
    3f7e:	movs	r1, #0
    m_curCluster = 0;
    3f80:	str.w	r2, [fp, #24]
  m_curPosition = pos;
    3f84:	strd	r0, r1, [fp]
        inSet = false;
    3f88:	movs	r4, #0
        m_flags |= FILE_FLAG_CONTIGUOUS;
    3f8a:	ldr	r3, [sp, #8]
        inSet = false;
    3f8c:	mov	r6, r4
        m_flags |= FILE_FLAG_CONTIGUOUS;
    3f8e:	orr.w	r3, r3, #64	; 0x40
    3f92:	str	r3, [sp, #12]
    n = dir->read(buf, FS_DIR_SIZE);
    3f94:	movs	r2, #32
    3f96:	add	r1, sp, #24
    3f98:	mov	r0, fp
    3f9a:	bl	3c64 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    3f9e:	cbz	r0, 3fe2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xc6>
    if (n != FS_DIR_SIZE) {
    3fa0:	cmp	r0, #32
    3fa2:	bne.w	40dc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
    if (!(buf[0] & EXFAT_TYPE_USED)) {
    3fa6:	ldrsb.w	r2, [sp, #24]
    3faa:	ldrb.w	r3, [sp, #24]
    3fae:	cmp	r2, #0
    3fb0:	blt.w	40f4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1d8>
      if (freeCount == 0) {
    3fb4:	cbnz	r4, 3fc4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xa8>
        freePos.position = dir->curPosition() - FS_DIR_SIZE;
    3fb6:	ldr.w	r2, [fp]
    3fba:	sub.w	r9, r2, #32
  uint32_t curCluster() const { return m_curCluster; }
    3fbe:	ldr.w	r2, [fp, #24]
    3fc2:	str	r2, [sp, #4]
      if (freeCount < freeNeed) {
    3fc4:	cmp	r4, r7
    3fc6:	bcs.n	3fcc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb0>
        freeCount++;
    3fc8:	adds	r4, #1
    3fca:	uxtb	r4, r4
      if (buf[0] == EXFAT_TYPE_END_DIR) {
    3fcc:	cmp	r3, #0
    3fce:	beq.w	41c4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2a8>
    n = dir->read(buf, FS_DIR_SIZE);
    3fd2:	movs	r2, #32
    3fd4:	add	r1, sp, #24
    3fd6:	mov	r0, fp
      inSet = false;
    3fd8:	movs	r6, #0
    n = dir->read(buf, FS_DIR_SIZE);
    3fda:	bl	3c64 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    3fde:	cmp	r0, #0
    3fe0:	bne.n	3fa0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x84>
  if (!(oflag & O_CREAT) || !(modeFlags & FILE_FLAG_WRITE) || !fname) {
    3fe2:	tst.w	sl, #512	; 0x200
    3fe6:	beq.n	40dc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
    3fe8:	ldr	r3, [sp, #8]
    3fea:	lsls	r3, r3, #30
    3fec:	bpl.n	40dc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
    3fee:	cmp.w	r8, #0
    3ff2:	beq.n	40dc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
  while (freeCount < freeNeed) {
    3ff4:	cmp	r4, r7
    3ff6:	bcs.n	4028 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x10c>
    3ff8:	ldr.w	sl, [sp, #4]
    n = dir->read(buf, FS_DIR_SIZE);
    3ffc:	movs	r2, #32
    3ffe:	add	r1, sp, #24
    4000:	mov	r0, fp
    4002:	bl	3c64 <ExFatFile::read(void*, unsigned int)>
    freeCount++;
    4006:	adds	r3, r4, #1
    if (n == 0) {
    4008:	cmp	r0, #0
    400a:	beq.n	40ce <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1b2>
    if (n != FS_DIR_SIZE) {
    400c:	cmp	r0, #32
    400e:	bne.n	40dc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
    if (freeCount == 0) {
    4010:	cbnz	r4, 401e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x102>
      freePos.position = dir->curPosition() - FS_DIR_SIZE;
    4012:	ldr.w	r2, [fp]
    4016:	ldr.w	sl, [fp, #24]
    401a:	sub.w	r9, r2, #32
    freeCount++;
    401e:	uxtb	r4, r3
  while (freeCount < freeNeed) {
    4020:	cmp	r7, r4
    4022:	bhi.n	3ffc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xe0>
    4024:	str.w	sl, [sp, #4]
  memset(this, 0, sizeof(ExFatFile));
    4028:	movs	r2, #56	; 0x38
    402a:	movs	r1, #0
    402c:	mov	r0, r5
  bool isContiguous() const { return m_flags & FILE_FLAG_CONTIGUOUS; }
    402e:	ldrb.w	r4, [fp, #51]	; 0x33
    4032:	bl	e064 <memset>
  bool hashName(ExName_t* fname);
  bool mkdir(ExFatFile* parent, ExName_t* fname);

  bool openPrivate(ExFatFile* dir, ExName_t* fname, oflag_t oflag);
  bool parsePathName(const char* path, ExName_t* fname, const char** ptr);
  ExFatVolume* volume() const { return m_vol; }
    4036:	ldr.w	r3, [fp, #32]
  freePos.isContiguous = dir->isContiguous();
    403a:	ubfx	r4, r4, #6, #1
  m_dirPos = freePos;
    403e:	ldr	r2, [sp, #4]
  m_vol = dir->volume();
    4040:	str	r3, [r5, #32]
  m_attributes = FILE_ATTR_FILE | FS_ATTRIB_ARCHIVE;
    4042:	movs	r3, #40	; 0x28
  m_dirPos = freePos;
    4044:	strb.w	r4, [r5, #44]	; 0x2c
  m_attributes = FILE_ATTR_FILE | FS_ATTRIB_ARCHIVE;
    4048:	strb.w	r3, [r5, #49]	; 0x31
  void reset() { next = begin; }
    404c:	ldr.w	r3, [r8]
  m_dirPos = freePos;
    4050:	strd	r2, r9, [r5, #36]	; 0x24
    4054:	str.w	r3, [r8, #4]
  for (uint8_t i = 0; i < freeNeed; i++) {
    4058:	cbz	r7, 40c4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1a8>
    405a:	movs	r4, #0
      m_setCount = freeNeed - 1;
    405c:	subs	r6, r7, #1
      if (FsDateTime::callback) {
    405e:	ldr.w	r9, [pc, #512]	; 4260 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x344>
      m_setCount = freeNeed - 1;
    4062:	uxtb	r6, r6
      if (FsDateTime::callback) {
    4064:	mov	sl, r4
    cache = dirCache(i, FsCache::CACHE_FOR_WRITE);
    4066:	movs	r2, #1
    4068:	mov	r1, sl
    406a:	mov	r0, r5
    406c:	bl	3b04 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache || (cache[0] & 0x80)) {
    4070:	mov	fp, r0
    4072:	cbz	r0, 40dc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
    4074:	ldrsb.w	r2, [r0]
    4078:	cmp	r2, #0
    407a:	blt.n	40dc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
    memset(cache, 0, FS_DIR_SIZE);
    407c:	movs	r2, #32
    407e:	movs	r1, #0
    4080:	bl	e064 <memset>
    if (i == 0) {
    4084:	cmp	r4, #0
    4086:	beq.w	4220 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x304>
    } else if (i == 1) {
    408a:	cmp.w	sl, #1
    408e:	beq.w	4264 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x348>
      dirName->type = EXFAT_TYPE_NAME;
    4092:	movs	r3, #193	; 0xc1
    4094:	mov	r2, fp
    4096:	add.w	fp, fp, #32
    409a:	strb.w	r3, [r2], #2
  bool atEnd() { return next == end; }
    409e:	ldrd	r3, r0, [r8, #4]
        if (fname->atEnd()) {
    40a2:	cmp	r0, r3
  /** \return next UTF-16 unit of LFN. */
  uint16_t get16() { return atEnd() ? 0 : *next++; }
    40a4:	add.w	r3, r3, #1
    40a8:	beq.n	40ba <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x19e>
    40aa:	str.w	r3, [r8, #4]
    40ae:	ldrb.w	r1, [r3, #-1]
    40b2:	strh.w	r1, [r2], #2
      for (size_t k = 0; k < 15; k++) {
    40b6:	cmp	fp, r2
    40b8:	bne.n	40a2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x186>
  for (uint8_t i = 0; i < freeNeed; i++) {
    40ba:	adds	r4, #1
    40bc:	uxtb.w	sl, r4
    40c0:	cmp	r7, sl
    40c2:	bhi.n	4066 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x14a>
  return sync();
    40c4:	mov	r0, r5
    40c6:	bl	4c18 <ExFatFile::sync()>
    40ca:	mov	r6, r0
    40cc:	b.n	40e8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1cc>
      if (!dir->addDirCluster()) {
    40ce:	mov	r0, fp
      uint32_t saveCurCluster = dir->m_curCluster;
    40d0:	ldr.w	r6, [fp, #24]
      if (!dir->addDirCluster()) {
    40d4:	bl	4c78 <ExFatFile::addDirCluster()>
    40d8:	cmp	r0, #0
    40da:	bne.n	41ce <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2b2>
  m_attributes = FILE_ATTR_CLOSED;
    40dc:	movs	r3, #0
  return false;
    40de:	mov	r6, r3
  m_attributes = FILE_ATTR_CLOSED;
    40e0:	strb.w	r3, [r5, #49]	; 0x31
  m_flags = 0;
    40e4:	strb.w	r3, [r5, #51]	; 0x33
}
    40e8:	mov	r0, r6
    40ea:	add	sp, #60	; 0x3c
    40ec:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint8_t freeNeed = 3;
    40f0:	movs	r7, #3
    40f2:	b.n	3f88 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x6c>
    } else if (!inSet) {
    40f4:	cbnz	r6, 414c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x230>
        freeCount = 0;
    40f6:	cmp	r4, r7
    40f8:	it	cc
    40fa:	movcc	r4, #0
      if (buf[0] != EXFAT_TYPE_FILE) {
    40fc:	cmp	r3, #133	; 0x85
    40fe:	bne.w	3f94 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x78>
      memset(this, 0, sizeof(ExFatFile));
    4102:	mov	r1, r6
    4104:	movs	r2, #56	; 0x38
    4106:	mov	r0, r5
      inSet = true;
    4108:	movs	r6, #1
      memset(this, 0, sizeof(ExFatFile));
    410a:	bl	e064 <memset>
      m_attributes = getLe16(dirFile->attributes) & FS_ATTRIB_COPY;
    410e:	ldrb.w	r2, [sp, #28]
      m_setCount = dirFile->setCount;
    4112:	ldrb.w	r3, [sp, #25]
    4116:	strb.w	r3, [r5, #48]	; 0x30
      m_attributes = getLe16(dirFile->attributes) & FS_ATTRIB_COPY;
    411a:	and.w	r3, r2, #55	; 0x37
      if (!(m_attributes & FS_ATTRIB_DIRECTORY)) {
    411e:	lsls	r2, r2, #27
        m_attributes |= FILE_ATTR_FILE;
    4120:	it	pl
    4122:	orrpl.w	r3, r3, #8
    4126:	strb.w	r3, [r5, #49]	; 0x31
      m_dirPos.position = dir->curPosition() - FS_DIR_SIZE;
    412a:	ldr.w	r3, [fp]
    412e:	ldr.w	r2, [fp, #32]
    4132:	subs	r3, #32
      m_vol = dir->volume();
    4134:	str	r2, [r5, #32]
      m_dirPos.cluster = dir->curCluster();
    4136:	ldr.w	r2, [fp, #24]
    413a:	strd	r2, r3, [r5, #36]	; 0x24
  bool isContiguous() const { return m_flags & FILE_FLAG_CONTIGUOUS; }
    413e:	ldrb.w	r3, [fp, #51]	; 0x33
    4142:	ubfx	r3, r3, #6, #1
      m_dirPos.isContiguous = dir->isContiguous();
    4146:	strb.w	r3, [r5, #44]	; 0x2c
    414a:	b.n	3f94 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x78>
    } else if (buf[0] == EXFAT_TYPE_STREAM) {
    414c:	cmp	r3, #192	; 0xc0
    414e:	beq.n	416e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x252>
    } else if (buf[0] == EXFAT_TYPE_NAME) {
    4150:	cmp	r3, #193	; 0xc1
    4152:	bne.w	3fd2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb6>
      if (!cmpName(dirName, fname)) {
    4156:	mov	r2, r8
    4158:	add	r1, sp, #24
    415a:	mov	r0, r5
    415c:	bl	39b8 <ExFatFile::cmpName(DirName_t const*, ExName_t*)>
    4160:	cbz	r0, 416a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x24e>
      if (fname->atEnd()) {
    4162:	ldrd	r3, r2, [r8, #4]
    4166:	cmp	r2, r3
    4168:	beq.n	41d4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2b8>
        inSet = false;
    416a:	mov	r6, r0
    416c:	b.n	3f94 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x78>
      m_flags = modeFlags;
    416e:	ldr	r3, [sp, #8]
    4170:	strb.w	r3, [r5, #51]	; 0x33
      if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    4174:	ldrb.w	r3, [sp, #25]
    4178:	lsls	r3, r3, #30
    417a:	bpl.n	4182 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x266>
        m_flags |= FILE_FLAG_CONTIGUOUS;
    417c:	ldr	r3, [sp, #12]
    417e:	strb.w	r3, [r5, #51]	; 0x33
      m_firstCluster = getLe32(dirStream->firstCluster);
    4182:	ldr	r3, [sp, #44]	; 0x2c
    4184:	str	r3, [r5, #28]
      m_validLength = getLe64(dirStream->validLength);
    4186:	ldrd	r2, r3, [sp, #32]
    418a:	strd	r2, r3, [r5, #16]
      m_dataLength = getLe64(dirStream->dataLength);
    418e:	ldrd	r2, r3, [sp, #48]	; 0x30
    4192:	strd	r2, r3, [r5, #8]
      if (!fname) {
    4196:	cmp.w	r8, #0
    419a:	beq.n	41d4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2b8>
  void reset() { next = begin; }
    419c:	ldr.w	r3, [r8]
      if (fname->nameLength != dirStream->nameLength ||
    41a0:	ldr.w	r2, [r8, #12]
    41a4:	str.w	r3, [r8, #4]
    41a8:	ldrb.w	r3, [sp, #27]
    41ac:	cmp	r2, r3
    41ae:	bne.w	3fd2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb6>
    41b2:	ldrh.w	r6, [r8, #16]
    41b6:	ldrh.w	r3, [sp, #28]
    41ba:	subs	r6, r6, r3
    41bc:	clz	r6, r6
    41c0:	lsrs	r6, r6, #5
    41c2:	b.n	3f94 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x78>
        if (fname) {
    41c4:	cmp.w	r8, #0
    41c8:	bne.w	3fe2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xc6>
    41cc:	b.n	40dc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
      dir->m_curCluster = saveCurCluster;
    41ce:	str.w	r6, [fp, #24]
      continue;
    41d2:	b.n	4020 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x104>
  if (oflag & O_EXCL) {
    41d4:	tst.w	sl, #2048	; 0x800
    41d8:	bne.n	40dc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
  if ((oflag & (O_TRUNC | O_AT_END)) || (m_flags & FILE_FLAG_WRITE)) {
    41da:	tst.w	sl, #17408	; 0x4400
    41de:	bne.n	429c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x380>
    41e0:	ldrb.w	r3, [r5, #51]	; 0x33
    41e4:	lsls	r7, r3, #30
    41e6:	bmi.n	429c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x380>
  if (oflag & O_TRUNC) {
    41e8:	tst.w	sl, #1024	; 0x400
    41ec:	bne.w	40dc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    41f0:	tst.w	sl, #16384	; 0x4000
    41f4:	beq.w	40e8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1cc>
    41f8:	mov	r0, r5
    41fa:	ldrd	r2, r3, [r5, #16]
    41fe:	bl	3e30 <ExFatFile::seekSet(unsigned long long)>
    4202:	cmp	r0, #0
    4204:	beq.w	40dc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
  if (isWritable()) {
    4208:	ldrb.w	r3, [r5, #51]	; 0x33
    420c:	lsls	r2, r3, #30
    420e:	bpl.w	40e8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1cc>
    m_attributes |= FS_ATTRIB_ARCHIVE;
    4212:	ldrb.w	r3, [r5, #49]	; 0x31
    4216:	orr.w	r3, r3, #32
    421a:	strb.w	r3, [r5, #49]	; 0x31
    421e:	b.n	40e8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1cc>
      dirFile->type = EXFAT_TYPE_FILE;
    4220:	movs	r3, #133	; 0x85
    4222:	strb.w	r3, [fp]
      m_setCount = freeNeed - 1;
    4226:	strb.w	r6, [r5, #48]	; 0x30
      dirFile->setCount = m_setCount;
    422a:	strb.w	r6, [fp, #1]
      if (FsDateTime::callback) {
    422e:	ldr.w	r3, [r9]
    4232:	cbz	r3, 428a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x36e>
        FsDateTime::callback(&date, &time, &ms10);
    4234:	add.w	r2, sp, #19
    4238:	add.w	r1, sp, #22
    423c:	add	r0, sp, #20
    423e:	blx	r3
  *reinterpret_cast<uint16_t*>(dst) = src;
    4240:	ldrh.w	r3, [sp, #20]
    4244:	strh.w	r3, [fp, #10]
    4248:	ldrh.w	r3, [sp, #22]
    424c:	strh.w	r3, [fp, #8]
        dirFile->createTimeMs = ms10;
    4250:	ldrb.w	r3, [sp, #19]
    4254:	strb.w	r3, [fp, #20]
    4258:	b.n	40ba <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x19e>
    425a:	nop
    425c:	.word	0x88888889
    4260:	.word	0x20006404
      dirStream->type = EXFAT_TYPE_STREAM;
    4264:	movs	r3, #192	; 0xc0
      dirStream->flags = EXFAT_FLAG_ALWAYS1;
    4266:	strb.w	sl, [fp, #1]
      dirStream->type = EXFAT_TYPE_STREAM;
    426a:	strb.w	r3, [fp]
      m_flags = modeFlags | FILE_FLAG_DIR_DIRTY;
    426e:	ldr	r3, [sp, #8]
    4270:	orn	r3, r3, #127	; 0x7f
    4274:	strb.w	r3, [r5, #51]	; 0x33
      dirStream->nameLength = fname->nameLength;
    4278:	ldr.w	r3, [r8, #12]
    427c:	strb.w	r3, [fp, #3]
      setLe16(dirStream->nameHash, fname->nameHash);
    4280:	ldrh.w	r3, [r8, #16]
    4284:	strh.w	r3, [fp, #4]
}
    4288:	b.n	40ba <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x19e>
  *reinterpret_cast<uint16_t*>(dst) = src;
    428a:	movw	r3, #22049	; 0x5621
    428e:	strh.w	r3, [fp, #10]
    4292:	strh.w	r3, [fp, #14]
    4296:	strh.w	r3, [fp, #18]
        if (FS_DEFAULT_TIME) {
    429a:	b.n	40ba <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x19e>
  bool isSubDir() const { return m_attributes & FILE_ATTR_SUBDIR; }
    429c:	ldrb.w	r3, [r5, #49]	; 0x31
    if (isSubDir() || isReadOnly() || EXFAT_READ_ONLY) {
    42a0:	lsls	r4, r3, #27
    42a2:	bmi.w	40dc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
    42a6:	lsls	r0, r3, #31
    42a8:	bmi.w	40dc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
  if (oflag & O_TRUNC) {
    42ac:	tst.w	sl, #1024	; 0x400
    42b0:	beq.n	42da <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x3be>
    if (!(m_flags & FILE_FLAG_WRITE)) {
    42b2:	ldrb.w	r3, [r5, #51]	; 0x33
    42b6:	lsls	r1, r3, #30
    42b8:	bpl.w	40dc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
  bool truncate(uint64_t length) { return seekSet(length) && truncate(); }
    42bc:	movs	r2, #0
    42be:	movs	r3, #0
    42c0:	mov	r0, r5
    42c2:	bl	3e30 <ExFatFile::seekSet(unsigned long long)>
    42c6:	cmp	r0, #0
    42c8:	beq.w	40dc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
    42cc:	mov	r0, r5
    42ce:	bl	5078 <ExFatFile::truncate()>
    42d2:	cmp	r0, #0
    42d4:	beq.w	40dc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
    42d8:	b.n	4208 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2ec>
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    42da:	tst.w	sl, #16384	; 0x4000
    42de:	beq.n	4208 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2ec>
    42e0:	b.n	41f8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2dc>
    42e2:	nop

000042e4 <ExFatFile::open(ExFatFile*, char const*, int)>:
bool ExFatFile::open(ExFatFile* dirFile, const char* path, oflag_t oflag) {
    42e4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  ExFatFile() {}
    42e8:	movs	r5, #0
    42ea:	sub	sp, #92	; 0x5c
    42ec:	mov	r9, r3
  if (isOpen() || !dirFile->isDir()) {
    42ee:	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::open(ExFatFile* dirFile, const char* path, oflag_t oflag) {
    42f2:	str	r2, [sp, #4]
    42f4:	str	r5, [sp, #80]	; 0x50
  if (isOpen() || !dirFile->isDir()) {
    42f6:	cmp	r3, #0
    42f8:	bne.n	4378 <ExFatFile::open(ExFatFile*, char const*, int)+0x94>
    42fa:	ldrb.w	r3, [r1, #49]	; 0x31
    42fe:	mov	r7, r1
    4300:	tst.w	r3, #80	; 0x50
    4304:	beq.n	4378 <ExFatFile::open(ExFatFile*, char const*, int)+0x94>
  if (isDirSeparator(*path)) {
    4306:	ldrb	r3, [r2, #0]
    4308:	mov	r4, r0
    430a:	mov	r6, r2
    430c:	cmp	r3, #47	; 0x2f
    430e:	beq.n	4380 <ExFatFile::open(ExFatFile*, char const*, int)+0x9c>
    if (!openPrivate(dirFile, &fname, O_RDONLY)) {
    4310:	mov.w	r8, #0
    if (!parsePathName(path, &fname, &path)) {
    4314:	add	r3, sp, #4
    4316:	add	r2, sp, #12
    4318:	mov	r1, r6
    431a:	mov	r0, r4
    431c:	bl	3bc4 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    4320:	cbz	r0, 4378 <ExFatFile::open(ExFatFile*, char const*, int)+0x94>
    if (*path == 0) {
    4322:	ldr	r6, [sp, #4]
    4324:	ldrb	r3, [r6, #0]
    4326:	cmp	r3, #0
    4328:	beq.n	43a8 <ExFatFile::open(ExFatFile*, char const*, int)+0xc4>
    if (!openPrivate(dirFile, &fname, O_RDONLY)) {
    432a:	movs	r3, #0
    432c:	add	r2, sp, #12
    432e:	mov	r1, r7
    4330:	mov	r0, r4
    4332:	bl	3f1c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    4336:	cbz	r0, 4378 <ExFatFile::open(ExFatFile*, char const*, int)+0x94>
    tmpDir = *this;
    4338:	mov	ip, r4
    433a:	add	r5, sp, #32
    433c:	add.w	r7, r4, #48	; 0x30
    4340:	ldr.w	r0, [ip]
    4344:	add.w	ip, ip, #16
    4348:	ldr.w	r1, [ip, #-12]
    434c:	mov	lr, r5
    434e:	ldr.w	r2, [ip, #-8]
    4352:	adds	r5, #16
    4354:	ldr.w	r3, [ip, #-4]
    4358:	cmp	ip, r7
    435a:	stmia.w	lr!, {r0, r1, r2, r3}
    435e:	bne.n	4340 <ExFatFile::open(ExFatFile*, char const*, int)+0x5c>
    4360:	ldr.w	r0, [ip]
    dirFile = &tmpDir;
    4364:	add	r7, sp, #32
    tmpDir = *this;
    4366:	str	r0, [r5, #0]
  bool rtn = sync();
    4368:	mov	r0, r4
    436a:	bl	4c18 <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    436e:	strb.w	r8, [r4, #49]	; 0x31
  m_flags = 0;
    4372:	strb.w	r8, [r4, #51]	; 0x33
  return rtn;
    4376:	b.n	4314 <ExFatFile::open(ExFatFile*, char const*, int)+0x30>
  return false;
    4378:	movs	r0, #0
}
    437a:	add	sp, #92	; 0x5c
    437c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    while (isDirSeparator(*path)) {
    4380:	ldrb.w	r1, [r6, #1]!
    4384:	cmp	r1, #47	; 0x2f
    4386:	beq.n	4380 <ExFatFile::open(ExFatFile*, char const*, int)+0x9c>
    4388:	str	r6, [sp, #4]
    if (*path == 0) {
    438a:	cbnz	r1, 43ba <ExFatFile::open(ExFatFile*, char const*, int)+0xd6>
  memset(this, 0, sizeof(ExFatFile));
    438c:	movs	r2, #56	; 0x38
    438e:	mov	r0, r4
      return openRoot(dirFile->m_vol);
    4390:	ldr	r5, [r7, #32]
  memset(this, 0, sizeof(ExFatFile));
    4392:	bl	e064 <memset>
  m_flags = FILE_FLAG_READ;
    4396:	movs	r3, #1
  m_attributes = FILE_ATTR_ROOT;
    4398:	movs	r2, #64	; 0x40
  m_vol = vol;
    439a:	str	r5, [r4, #32]
      return openRoot(dirFile->m_vol);
    439c:	mov	r0, r3
  m_flags = FILE_FLAG_READ;
    439e:	strb.w	r3, [r4, #51]	; 0x33
  m_attributes = FILE_ATTR_ROOT;
    43a2:	strb.w	r2, [r4, #49]	; 0x31
      return openRoot(dirFile->m_vol);
    43a6:	b.n	437a <ExFatFile::open(ExFatFile*, char const*, int)+0x96>
  return openPrivate(dirFile, &fname, oflag);
    43a8:	mov	r3, r9
    43aa:	add	r2, sp, #12
    43ac:	mov	r1, r7
    43ae:	mov	r0, r4
    43b0:	bl	3f1c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
}
    43b4:	add	sp, #92	; 0x5c
    43b6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  memset(this, 0, sizeof(ExFatFile));
    43ba:	movs	r2, #56	; 0x38
    43bc:	movs	r1, #0
    43be:	add	r0, sp, #32
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    43c0:	ldr	r5, [r7, #32]
  memset(this, 0, sizeof(ExFatFile));
    43c2:	bl	e064 <memset>
  m_flags = FILE_FLAG_READ;
    43c6:	movs	r3, #1
    dirFile = &tmpDir;
    43c8:	add	r7, sp, #32
  m_vol = vol;
    43ca:	str	r5, [sp, #64]	; 0x40
  m_flags = FILE_FLAG_READ;
    43cc:	strb.w	r3, [sp, #83]	; 0x53
  m_attributes = FILE_ATTR_ROOT;
    43d0:	movs	r3, #64	; 0x40
    43d2:	strb.w	r3, [sp, #81]	; 0x51
  return true;
    43d6:	b.n	4310 <ExFatFile::open(ExFatFile*, char const*, int)+0x2c>

000043d8 <ExFatFile::open(ExFatVolume*, char const*, int)>:
  return vol && open(vol->vwd(), path, oflag);
    43d8:	cbz	r1, 43e2 <ExFatFile::open(ExFatVolume*, char const*, int)+0xa>
    43da:	add.w	r1, r1, #1096	; 0x448
    43de:	b.w	42e4 <ExFatFile::open(ExFatFile*, char const*, int)>
}
    43e2:	mov	r0, r1
    43e4:	bx	lr
    43e6:	nop

000043e8 <ExFatFile::openNext(ExFatFile*, int)>:
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    43e8:	ldrb.w	r3, [r0, #49]	; 0x31
    43ec:	cbnz	r3, 4408 <ExFatFile::openNext(ExFatFile*, int)+0x20>
    43ee:	ldrb.w	r3, [r1, #49]	; 0x31
    43f2:	tst.w	r3, #80	; 0x50
    43f6:	beq.n	4408 <ExFatFile::openNext(ExFatFile*, int)+0x20>
    43f8:	ldr	r3, [r1, #0]
    43fa:	ands.w	ip, r3, #31
    43fe:	bne.n	4408 <ExFatFile::openNext(ExFatFile*, int)+0x20>
  return openPrivate(dir, nullptr, oflag);
    4400:	mov	r3, r2
    4402:	mov	r2, ip
    4404:	b.w	3f1c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
}
    4408:	movs	r0, #0
    440a:	bx	lr

0000440c <ExFatPartition::bitmapFind(unsigned long, unsigned long)>:
#define DBG_FILE "ExFatPartition.cpp"
#include "../common/DebugMacros.h"
#include "ExFatLib.h"
//------------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
    440c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4410:	mov	r7, r0
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    4412:	mov	sl, r1
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
    4414:	mov	r9, r2
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    4416:	cmp	r1, #0
    4418:	beq.n	44a0 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x94>
    441a:	sub.w	r8, r1, #2
  if (start >= m_clusterCount) {
    441e:	ldr.w	r3, [r7, #1072]	; 0x430
    4422:	cmp	r3, r8
    4424:	bls.n	44ac <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xa0>
  uint32_t endAlloc = start;
  uint32_t bgnAlloc = start;
  uint16_t sectorSize = 1 << m_bytesPerSectorShift;
  size_t i = (start >> 3) & (sectorSize - 1);
  uint8_t* cache;
  uint8_t mask = 1 << (start & 7);
    4426:	and.w	r3, r8, #7
    442a:	movs	r5, #1
  size_t i = (start >> 3) & (sectorSize - 1);
    442c:	ubfx	fp, r8, #3, #9
  uint8_t mask = 1 << (start & 7);
    4430:	lsls	r5, r3
    4432:	uxtb	r5, r5
  uint32_t bgnAlloc = start;
    4434:	mov	r6, r8
  uint32_t endAlloc = start;
    4436:	mov	r4, r8
  while (true) {
    uint32_t sector =
    4438:	ldr.w	r1, [r7, #1068]	; 0x42c
    return m_bitmapCache.prepare(sector, option);
    443c:	movs	r2, #0
    443e:	mov	r0, r7
    4440:	add.w	r1, r1, r4, lsr #12
    4444:	bl	31cc <FsCache::prepare(unsigned long, unsigned char)>
        m_clusterHeapStartSector + (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCachePrepare(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
    4448:	cbz	r0, 4486 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x7a>
    444a:	add.w	fp, fp, #4294967295
    444e:	add	fp, r0
    4450:	addw	r0, r0, #511	; 0x1ff
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
    4454:	ldrb.w	r1, [fp, #1]!
    4458:	b.n	4470 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x64>
          if ((endAlloc - bgnAlloc) == count) {
    445a:	cmp	r2, r9
    445c:	beq.n	44b6 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xaa>
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    445e:	cmp	r8, r4
    4460:	beq.n	4484 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x78>
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
    4462:	ldr.w	r5, [r7, #1072]	; 0x430
    4466:	cmp	r5, r4
    4468:	bls.n	4494 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x88>
      for (; mask; mask <<= 1) {
    446a:	ands.w	r5, r3, #255	; 0xff
    446e:	beq.n	448a <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x7e>
        endAlloc++;
    4470:	adds	r4, #1
        if (!(mask & cache[i])) {
    4472:	tst	r1, r5
      for (; mask; mask <<= 1) {
    4474:	mov.w	r3, r5, lsl #1
          if ((endAlloc - bgnAlloc) == count) {
    4478:	sub.w	r2, r4, r6
        if (!(mask & cache[i])) {
    447c:	beq.n	445a <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x4e>
        if (endAlloc == start) {
    447e:	cmp	r8, r4
        endAlloc++;
    4480:	mov	r6, r4
        if (endAlloc == start) {
    4482:	bne.n	4462 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x56>
          return 1;
    4484:	movs	r0, #1
      mask = 1;
    }
    i = 0;
  }
  return 0;
}
    4486:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for (; i < sectorSize; i++) {
    448a:	cmp	r0, fp
      mask = 1;
    448c:	mov.w	r5, #1
    for (; i < sectorSize; i++) {
    4490:	bne.n	4454 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x48>
    4492:	b.n	4498 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x8c>
          endAlloc = bgnAlloc = 0;
    4494:	movs	r6, #0
    4496:	mov	r4, r6
  uint32_t endAlloc = start;
    4498:	movs	r5, #1
    i = 0;
    449a:	mov.w	fp, #0
    449e:	b.n	4438 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x2c>
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    44a0:	ldr.w	r8, [r0, #1056]	; 0x420
  if (start >= m_clusterCount) {
    44a4:	ldr.w	r3, [r7, #1072]	; 0x430
    44a8:	cmp	r3, r8
    44aa:	bhi.n	4426 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x1a>
    44ac:	mov.w	r8, #0
    44b0:	movs	r5, #1
    start = 0;
    44b2:	mov	fp, r8
    44b4:	b.n	4434 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x28>
            if (cluster == 0 && count == 1) {
    44b6:	cmp.w	sl, #0
    44ba:	bne.n	44c6 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xba>
    44bc:	cmp.w	r9, #1
              m_bitmapStart = bgnAlloc;
    44c0:	it	eq
    44c2:	streq.w	r6, [r7, #1056]	; 0x420
            return bgnAlloc + 2;
    44c6:	adds	r0, r6, #2
}
    44c8:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

000044cc <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>:
//------------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster, uint32_t count,
                                  bool value) {
    44cc:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    44d0:	mov	r8, r0
  uint32_t sector;
  uint32_t start = cluster - 2;
    44d2:	subs	r0, r1, #2
                                  bool value) {
    44d4:	mov	r5, r2
    44d6:	mov	r6, r3
  size_t i;
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    44d8:	adds	r3, r0, r2
    44da:	ldr.w	r2, [r8, #1072]	; 0x430
    44de:	cmp	r3, r2
    44e0:	bhi.n	4552 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    44e2:	cbnz	r6, 4558 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x8c>
    if (start <= m_bitmapStart && m_bitmapStart < (start + count)) {
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    }
  } else {
    if (start < m_bitmapStart) {
    44e4:	ldr.w	r3, [r8, #1056]	; 0x420
    44e8:	cmp	r3, r0
      m_bitmapStart = start;
    44ea:	it	hi
    44ec:	strhi.w	r0, [r8, #1056]	; 0x420
    }
  }
  mask = 1 << (start & 7);
    44f0:	and.w	r3, r0, #7
    44f4:	movs	r4, #1
  sector = m_clusterHeapStartSector + (start >> (m_bytesPerSectorShift + 3));
    44f6:	ldr.w	r7, [r8, #1068]	; 0x42c
  i = (start >> 3) & m_sectorMask;
    44fa:	ubfx	r9, r0, #3, #9
  mask = 1 << (start & 7);
    44fe:	lsls	r4, r3
  sector = m_clusterHeapStartSector + (start >> (m_bytesPerSectorShift + 3));
    4500:	add.w	r1, r7, r0, lsr #12
  mask = 1 << (start & 7);
    4504:	uxtb	r4, r4
    4506:	movs	r2, #1
    4508:	mov	r0, r8
  while (true) {
    cache = bitmapCachePrepare(sector++, FsCache::CACHE_FOR_WRITE);
    450a:	adds	r7, r1, r2
    450c:	bl	31cc <FsCache::prepare(unsigned long, unsigned char)>
    if (!cache) {
    4510:	cbz	r0, 4552 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
    4512:	add.w	lr, r9, #4294967295
    4516:	add	lr, r0
    4518:	addw	r0, r0, #511	; 0x1ff
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
    451c:	ldrb.w	ip, [lr, #1]!
    4520:	tst.w	ip, r4
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
    4524:	eor.w	ip, ip, r4
      for (; mask; mask <<= 1) {
    4528:	mov.w	r4, r4, lsl #1
        if (value == static_cast<bool>(cache[i] & mask)) {
    452c:	ite	ne
    452e:	movne	r2, #1
    4530:	moveq	r2, #0
    4532:	cmp	r2, r6
    4534:	beq.n	4552 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
        if (--count == 0) {
    4536:	subs	r5, #1
        cache[i] ^= mask;
    4538:	strb.w	ip, [lr]
        if (--count == 0) {
    453c:	beq.n	4570 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xa4>
      for (; mask; mask <<= 1) {
    453e:	ands.w	r4, r4, #255	; 0xff
    4542:	bne.n	4520 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x54>
    for (; i < m_bytesPerSector; i++) {
    4544:	cmp	r0, lr
          return true;
        }
      }
      mask = 1;
    }
    i = 0;
    4546:	mov	r9, r4
    4548:	mov.w	r4, #1
    for (; i < m_bytesPerSector; i++) {
    454c:	bne.n	451c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x50>
    cache = bitmapCachePrepare(sector++, FsCache::CACHE_FOR_WRITE);
    454e:	mov	r1, r7
    4550:	b.n	4506 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x3a>
  }

fail:
  return false;
    4552:	movs	r0, #0
}
    4554:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (start <= m_bitmapStart && m_bitmapStart < (start + count)) {
    4558:	ldr.w	r1, [r8, #1056]	; 0x420
    455c:	cmp	r3, r1
    455e:	bls.n	44f0 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x24>
    4560:	cmp	r1, r0
    4562:	bcc.n	44f0 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x24>
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    4564:	cmp	r3, r2
    4566:	it	cs
    4568:	movcs	r3, #0
    456a:	str.w	r3, [r8, #1056]	; 0x420
    456e:	b.n	44f0 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x24>
          return true;
    4570:	movs	r0, #1
}
    4572:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4576:	nop

00004578 <ExFatPartition::chainSize(unsigned long)>:
//------------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
    4578:	push	{r3, r4, r5, r6, r7, lr}
int8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
  uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    457a:	ldr.w	r3, [r0, #1072]	; 0x430
    457e:	adds	r3, #1
    4580:	cmp	r3, r1
    4582:	bcs.n	4588 <ExFatPartition::chainSize(unsigned long)+0x10>
    if (status < 0) return 0;
    4584:	movs	r0, #0
}
    4586:	pop	{r3, r4, r5, r6, r7, pc}
    4588:	mov	r7, r0
    458a:	mov	r4, r1
    return m_dataCache.prepare(sector, option);
    458c:	add.w	r6, r0, #528	; 0x210
  uint32_t n = 0;
    4590:	movs	r5, #0
    4592:	b.n	45a0 <ExFatPartition::chainSize(unsigned long)+0x28>
  if (cluster > (m_clusterCount + 1)) {
    4594:	ldr.w	r3, [r7, #1072]	; 0x430
    n++;
    4598:	adds	r5, #1
  if (cluster > (m_clusterCount + 1)) {
    459a:	adds	r3, #1
    459c:	cmp	r3, r4
    459e:	bcc.n	4584 <ExFatPartition::chainSize(unsigned long)+0xc>
    DBG_FAIL_MACRO;
    return -1;
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    45a0:	ldr.w	r1, [r7, #1060]	; 0x424
    45a4:	movs	r2, #0
    45a6:	mov	r0, r6
    45a8:	add.w	r1, r1, r4, lsr #7
    45ac:	bl	31cc <FsCache::prepare(unsigned long, unsigned char)>

  cache = dataCachePrepare(sector, FsCache::CACHE_FOR_READ);
  if (!cache) {
    return -1;
  }
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    45b0:	lsls	r4, r4, #2
  if (!cache) {
    45b2:	cmp	r0, #0
    45b4:	beq.n	4584 <ExFatPartition::chainSize(unsigned long)+0xc>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    45b6:	ubfx	r4, r4, #0, #9
  return *reinterpret_cast<const uint32_t*>(src);
    45ba:	ldr	r4, [r0, r4]
  if (next == EXFAT_EOC) {
    45bc:	adds	r3, r4, #1
    45be:	bne.n	4594 <ExFatPartition::chainSize(unsigned long)+0x1c>
    n++;
    45c0:	adds	r0, r5, #1
}
    45c2:	pop	{r3, r4, r5, r6, r7, pc}

000045c4 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>:
uint8_t* ExFatPartition::dirCache(DirPos_t* pos, uint8_t options) {
    45c4:	push	{r3, r4, r5, lr}
    45c6:	mov	r4, r1
           ((cluster - 2) << m_sectorsPerClusterShift);
    45c8:	ldr	r3, [r1, #0]
    45ca:	ldrb.w	ip, [r0, #1093]	; 0x445
    return m_dataCache.prepare(sector, option);
    45ce:	add.w	r0, r0, #528	; 0x210
  sector += (m_clusterMask & pos->position) >> m_bytesPerSectorShift;
    45d2:	ldr.w	r1, [r0, #552]	; 0x228
           ((cluster - 2) << m_sectorsPerClusterShift);
    45d6:	subs	r3, #2
    45d8:	ldr	r5, [r4, #4]
    45da:	lsl.w	r3, r3, ip
    45de:	ands	r1, r5
    45e0:	add.w	r3, r3, r1, lsr #9
    45e4:	ldr.w	r1, [r0, #540]	; 0x21c
    return m_dataCache.prepare(sector, option);
    45e8:	add	r1, r3
    45ea:	bl	31cc <FsCache::prepare(unsigned long, unsigned char)>
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
    45ee:	cbz	r0, 45f8 <ExFatPartition::dirCache(DirPos_t*, unsigned char)+0x34>
    45f0:	ldr	r3, [r4, #4]
    45f2:	ubfx	r3, r3, #0, #9
    45f6:	add	r0, r3
}
    45f8:	pop	{r3, r4, r5, pc}
    45fa:	nop

000045fc <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>:
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    45fc:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4600:	mov	r4, r1
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    4602:	ldr.w	r3, [r0, #1080]	; 0x438
    4606:	ldr	r1, [r1, #4]
    4608:	ands	r3, r1
  pos->position += offset;
    460a:	add	r1, r2
    460c:	str	r1, [r4, #4]
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    460e:	add	r3, r2
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    4610:	ldrb.w	r1, [r0, #1093]	; 0x445
    4614:	add.w	r2, r1, #9
  tmp >>= bytesPerClusterShift();
    4618:	uxtb	r2, r2
    461a:	lsrs	r3, r2
  while (tmp--) {
    461c:	cbz	r3, 466a <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x6e>
    461e:	mov	r8, r0
    4620:	subs	r5, r3, #1
    return m_dataCache.prepare(sector, option);
    4622:	add.w	r9, r0, #528	; 0x210
    4626:	b.n	4634 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x38>
      pos->cluster++;
    4628:	ldr	r3, [r4, #0]
  while (tmp--) {
    462a:	subs	r5, #1
      pos->cluster++;
    462c:	add.w	r3, r3, #1
    4630:	str	r3, [r4, #0]
  while (tmp--) {
    4632:	bcc.n	466a <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x6e>
    if (pos->isContiguous) {
    4634:	ldrb	r6, [r4, #8]
    4636:	cmp	r6, #0
    4638:	bne.n	4628 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x2c>
  if (cluster > (m_clusterCount + 1)) {
    463a:	ldr.w	r3, [r8, #1072]	; 0x430
    463e:	mov	r2, r6
      status = fatGet(pos->cluster, &pos->cluster);
    4640:	ldr	r7, [r4, #0]
    4642:	mov	r0, r9
  if (cluster > (m_clusterCount + 1)) {
    4644:	adds	r3, #1
    4646:	cmp	r7, r3
    4648:	bhi.n	4670 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x74>
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    464a:	ldr.w	r1, [r8, #1060]	; 0x424
    464e:	add.w	r1, r1, r7, lsr #7
    4652:	bl	31cc <FsCache::prepare(unsigned long, unsigned char)>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    4656:	lsls	r7, r7, #2
  if (!cache) {
    4658:	cbz	r0, 4670 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x74>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    465a:	ubfx	r7, r7, #0, #9
    465e:	ldr	r3, [r0, r7]
  if (next == EXFAT_EOC) {
    4660:	adds	r2, r3, #1
    4662:	beq.n	4678 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x7c>
  while (tmp--) {
    4664:	subs	r5, #1
    return 0;
  }
  *value = next;
    4666:	str	r3, [r4, #0]
  while (tmp--) {
    4668:	bcs.n	4634 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x38>
  return 1;
    466a:	movs	r0, #1
}
    466c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return -1;
    4670:	mov.w	r0, #4294967295
}
    4674:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return 0;
    4678:	mov	r0, r6
}
    467a:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    467e:	nop

00004680 <ExFatPartition::fatGet(unsigned long, unsigned long*)>:
int8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    4680:	push	{r3, r4, r5, lr}
  if (cluster > (m_clusterCount + 1)) {
    4682:	ldr.w	r3, [r0, #1072]	; 0x430
    4686:	adds	r3, #1
    4688:	cmp	r3, r1
    468a:	bcs.n	4692 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x12>
    return -1;
    468c:	mov.w	r0, #4294967295
  return 1;
}
    4690:	pop	{r3, r4, r5, pc}
    4692:	mov	r4, r1
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    4694:	ldr.w	r1, [r0, #1060]	; 0x424
    4698:	mov	r5, r2
    469a:	add.w	r0, r0, #528	; 0x210
    469e:	movs	r2, #0
    46a0:	add.w	r1, r1, r4, lsr #7
    46a4:	bl	31cc <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    46a8:	cmp	r0, #0
    46aa:	beq.n	468c <ExFatPartition::fatGet(unsigned long, unsigned long*)+0xc>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    46ac:	lsls	r4, r4, #2
    46ae:	ubfx	r4, r4, #0, #9
    46b2:	ldr	r3, [r0, r4]
  if (next == EXFAT_EOC) {
    46b4:	adds	r2, r3, #1
    46b6:	beq.n	46be <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x3e>
  return 1;
    46b8:	movs	r0, #1
  *value = next;
    46ba:	str	r3, [r5, #0]
}
    46bc:	pop	{r3, r4, r5, pc}
    return 0;
    46be:	movs	r0, #0
}
    46c0:	pop	{r3, r4, r5, pc}
    46c2:	nop

000046c4 <ExFatPartition::fatPut(unsigned long, unsigned long)>:
//------------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    46c4:	cmp	r1, #1
    46c6:	bls.n	4700 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x3c>
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
    46c8:	push	{r3, r4, r5, lr}
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    46ca:	ldr.w	r3, [r0, #1072]	; 0x430
    46ce:	mov	r4, r1
    46d0:	adds	r3, #1
    46d2:	cmp	r3, r1
    46d4:	bcs.n	46da <ExFatPartition::fatPut(unsigned long, unsigned long)+0x16>
  }
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;

fail:
  return false;
    46d6:	movs	r0, #0
}
    46d8:	pop	{r3, r4, r5, pc}
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    46da:	ldr.w	r1, [r0, #1060]	; 0x424
    46de:	mov	r5, r2
    46e0:	add.w	r0, r0, #528	; 0x210
    46e4:	movs	r2, #1
    46e6:	add.w	r1, r1, r4, lsr #7
    46ea:	bl	31cc <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    46ee:	mov	r3, r0
    46f0:	cmp	r0, #0
    46f2:	beq.n	46d6 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x12>
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
    46f4:	lsls	r4, r4, #2
  return true;
    46f6:	movs	r0, #1
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
    46f8:	ubfx	r4, r4, #0, #9
  *reinterpret_cast<uint32_t*>(dst) = src;
    46fc:	str	r5, [r3, r4]
}
    46fe:	pop	{r3, r4, r5, pc}
  return false;
    4700:	movs	r0, #0
}
    4702:	bx	lr

00004704 <ExFatPartition::freeChain(unsigned long)>:
  if (cluster > (m_clusterCount + 1)) {
    4704:	ldr.w	r3, [r0, #1072]	; 0x430
    4708:	adds	r3, #1
    470a:	cmp	r1, r3
    470c:	bls.n	4712 <ExFatPartition::freeChain(unsigned long)+0xe>

  return true;

fail:
  return false;
}
    470e:	movs	r0, #0
    4710:	bx	lr
bool ExFatPartition::freeChain(uint32_t cluster) {
    4712:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4716:	mov	r5, r0
    4718:	sub	sp, #12
    471a:	mov	r4, r1
    471c:	add.w	r9, r0, #528	; 0x210
    4720:	mov	r7, r1
    4722:	mov.w	r8, #0
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    4726:	ldr.w	r1, [r5, #1060]	; 0x424
    472a:	movs	r2, #0
    472c:	mov	r0, r9
    472e:	mov.w	fp, r4, lsr #7
    4732:	add.w	r1, r1, r4, lsr #7
    4736:	bl	31cc <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    473a:	cbz	r0, 4762 <ExFatPartition::freeChain(unsigned long)+0x5e>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    473c:	lsls	r3, r4, #2
    473e:	ubfx	r3, r3, #0, #9
  return *reinterpret_cast<const uint32_t*>(src);
    4742:	ldr	r2, [r0, r3]
    4744:	str	r3, [sp, #4]
  if (next == EXFAT_EOC) {
    4746:	adds	r3, r2, #1
    4748:	itet	ne
    474a:	movne	r6, r2
    474c:	moveq.w	sl, #0
    4750:	movne.w	sl, #1
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    4754:	cmp	r4, #1
    4756:	bls.n	4762 <ExFatPartition::freeChain(unsigned long)+0x5e>
    4758:	ldr.w	r2, [r5, #1072]	; 0x430
    475c:	adds	r2, #1
    475e:	cmp	r4, r2
    4760:	bls.n	476a <ExFatPartition::freeChain(unsigned long)+0x66>
}
    4762:	movs	r0, #0
    4764:	add	sp, #12
    4766:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    476a:	ldr.w	r1, [r5, #1060]	; 0x424
    476e:	movs	r2, #1
    4770:	mov	r0, r9
    4772:	add	r1, fp
    4774:	bl	31cc <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    4778:	cmp	r0, #0
    477a:	beq.n	4762 <ExFatPartition::freeChain(unsigned long)+0x5e>
  *reinterpret_cast<uint32_t*>(dst) = src;
    477c:	ldr	r3, [sp, #4]
    477e:	str.w	r8, [r0, r3]
    if (status == 0 || (cluster + 1) != next) {
    4782:	cmp.w	sl, #0
    4786:	beq.n	47ae <ExFatPartition::freeChain(unsigned long)+0xaa>
    4788:	adds	r4, #1
    478a:	cmp	r4, r6
    478c:	beq.n	47a0 <ExFatPartition::freeChain(unsigned long)+0x9c>
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    478e:	movs	r3, #0
    4790:	subs	r2, r4, r7
    4792:	mov	r1, r7
    4794:	mov	r0, r5
    4796:	bl	44cc <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    479a:	cmp	r0, #0
    479c:	beq.n	4762 <ExFatPartition::freeChain(unsigned long)+0x5e>
    479e:	mov	r7, r6
  if (cluster > (m_clusterCount + 1)) {
    47a0:	ldr.w	r3, [r5, #1072]	; 0x430
    47a4:	adds	r3, #1
    47a6:	cmp	r3, r6
    47a8:	bcc.n	4762 <ExFatPartition::freeChain(unsigned long)+0x5e>
    47aa:	mov	r4, r6
    47ac:	b.n	4726 <ExFatPartition::freeChain(unsigned long)+0x22>
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    47ae:	adds	r2, r4, #1
    47b0:	mov	r3, sl
    47b2:	mov	r1, r7
    47b4:	mov	r0, r5
    47b6:	subs	r2, r2, r7
}
    47b8:	add	sp, #12
    47ba:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    47be:	b.w	44cc <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    47c2:	nop

000047c4 <ExFatPartition::freeClusterCount()>:
//------------------------------------------------------------------------------
int32_t ExFatPartition::freeClusterCount() {
    47c4:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t nc = 0;
  uint32_t sector = m_clusterHeapStartSector;
  uint32_t usedCount = 0;
    47c8:	movs	r5, #0
int32_t ExFatPartition::freeClusterCount() {
    47ca:	mov	r6, r0
  uint32_t sector = m_clusterHeapStartSector;
    47cc:	ldr.w	r1, [r0, #1068]	; 0x42c
    47d0:	add.w	r8, r0, #528	; 0x210
  uint32_t nc = 0;
    47d4:	mov	r4, r5
    47d6:	movs	r2, #0
    47d8:	mov	r0, r8
  uint8_t* cache;

  while (true) {
    cache = dataCachePrepare(sector++, FsCache::CACHE_FOR_READ);
    47da:	adds	r7, r1, #1
    47dc:	bl	31cc <FsCache::prepare(unsigned long, unsigned char)>
    if (!cache) {
    47e0:	cbz	r0, 482e <ExFatPartition::freeClusterCount()+0x6a>
    47e2:	add.w	lr, r0, #4294967295
    47e6:	add.w	r9, r4, #4096	; 0x1000
            usedCount++;
          }
        }
      }
      nc += 8;
      if (nc >= m_clusterCount) {
    47ea:	ldr.w	r0, [r6, #1072]	; 0x430
    47ee:	b.n	47fc <ExFatPartition::freeClusterCount()+0x38>
      } else if (cache[i]) {
    47f0:	cbnz	r1, 4812 <ExFatPartition::freeClusterCount()+0x4e>
      nc += 8;
    47f2:	adds	r4, #8
      if (nc >= m_clusterCount) {
    47f4:	cmp	r4, r0
    47f6:	bcs.n	480c <ExFatPartition::freeClusterCount()+0x48>
    for (size_t i = 0; i < m_bytesPerSector; i++) {
    47f8:	cmp	r4, r9
    47fa:	beq.n	482a <ExFatPartition::freeClusterCount()+0x66>
      if (cache[i] == 0XFF) {
    47fc:	ldrb.w	r1, [lr, #1]!
    4800:	cmp	r1, #255	; 0xff
    4802:	bne.n	47f0 <ExFatPartition::freeClusterCount()+0x2c>
      nc += 8;
    4804:	adds	r4, #8
        usedCount += 8;
    4806:	adds	r5, #8
      if (nc >= m_clusterCount) {
    4808:	cmp	r4, r0
    480a:	bcc.n	47f8 <ExFatPartition::freeClusterCount()+0x34>
        return m_clusterCount - usedCount;
    480c:	subs	r0, r0, r5
      }
    }
  }
}
    480e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4812:	movs	r2, #8
        for (uint8_t mask = 1; mask; mask <<= 1) {
    4814:	movs	r3, #1
          if ((mask & cache[i])) {
    4816:	tst	r1, r3
        for (uint8_t mask = 1; mask; mask <<= 1) {
    4818:	mov.w	ip, r3, lsl #1
            usedCount++;
    481c:	it	ne
    481e:	addne	r5, #1
        for (uint8_t mask = 1; mask; mask <<= 1) {
    4820:	subs	r2, #1
    4822:	uxtb.w	r3, ip
    4826:	bne.n	4816 <ExFatPartition::freeClusterCount()+0x52>
    4828:	b.n	47f2 <ExFatPartition::freeClusterCount()+0x2e>
    cache = dataCachePrepare(sector++, FsCache::CACHE_FOR_READ);
    482a:	mov	r1, r7
    482c:	b.n	47d6 <ExFatPartition::freeClusterCount()+0x12>
      return -1;
    482e:	mov.w	r0, #4294967295
    4832:	b.n	480e <ExFatPartition::freeClusterCount()+0x4a>

00004834 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)>:
//------------------------------------------------------------------------------
bool ExFatPartition::init(FsBlockDevice* dev, uint8_t part, uint32_t volStart) {
    4834:	push	{r3, r4, r5, r6, r7, lr}
  pbs_t* pbs;
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  m_fatType = 0;
    4836:	mov.w	ip, #0
  m_blockDev = dev;
  cacheInit(m_blockDev);
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    483a:	mov	r5, r2
    m_sector = 0XFFFFFFFF;
    483c:	mov.w	r2, #4294967295
bool ExFatPartition::init(FsBlockDevice* dev, uint8_t part, uint32_t volStart) {
    4840:	mov	r4, r0
  m_fatType = 0;
    4842:	strb.w	ip, [r0, #1092]	; 0x444
  m_blockDev = dev;
    4846:	str.w	r1, [r0, #1088]	; 0x440
    m_blockDev = blockDev;
    484a:	str	r1, [r0, #4]
    484c:	str.w	r1, [r0, #532]	; 0x214
    m_status = 0;
    4850:	strb.w	ip, [r0]
    4854:	strb.w	ip, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    4858:	str	r2, [r0, #8]
    485a:	str.w	r2, [r0, #536]	; 0x218
  if (part) {
    485e:	cbz	r5, 489a <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x66>
    if (part > 4) {
    4860:	cmp	r5, #4
    4862:	bls.n	4868 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x34>
  bitmapFind(0, 1);
  m_fatType = FAT_TYPE_EXFAT;
  return true;

fail:
  return false;
    4864:	movs	r0, #0
}
    4866:	pop	{r3, r4, r5, r6, r7, pc}
    4868:	add.w	r7, r0, #528	; 0x210
    486c:	mov	r2, ip
    486e:	mov	r1, ip
    4870:	mov	r0, r7
    4872:	bl	31cc <FsCache::prepare(unsigned long, unsigned char)>
    if (!mbr) {
    4876:	cmp	r0, #0
    4878:	beq.n	4864 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x30>
    MbrPart_t* mp = mbr->part + part - 1;
    487a:	mvn.w	r3, #4026531840	; 0xf0000000
    487e:	add.w	r0, r0, #446	; 0x1be
    4882:	add	r3, r5
    4884:	lsls	r1, r3, #4
    4886:	add.w	r3, r0, r3, lsl #4
    if (mp->type == 0 || (mp->boot != 0 && mp->boot != 0X80)) {
    488a:	ldrb	r2, [r3, #4]
    488c:	cmp	r2, #0
    488e:	beq.n	4864 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x30>
    4890:	ldrb	r2, [r0, r1]
    4892:	lsls	r2, r2, #25
    4894:	bne.n	4864 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x30>
  return *reinterpret_cast<const uint32_t*>(src);
    4896:	ldr	r6, [r3, #8]
    4898:	b.n	48a0 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x6c>
    489a:	mov	r6, r3
    489c:	add.w	r7, r0, #528	; 0x210
    48a0:	movs	r2, #0
    48a2:	mov	r1, r6
    48a4:	mov	r0, r7
    48a6:	bl	31cc <FsCache::prepare(unsigned long, unsigned char)>
  if (!pbs) {
    48aa:	mov	r5, r0
    48ac:	cmp	r0, #0
    48ae:	beq.n	4864 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x30>
  if (strncmp(pbs->oemName, "EXFAT", 5)) {
    48b0:	movs	r2, #5
    48b2:	ldr	r1, [pc, #104]	; (491c <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0xe8>)
    48b4:	adds	r0, #3
    48b6:	bl	e108 <strncmp>
    48ba:	cmp	r0, #0
    48bc:	bne.n	4864 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x30>
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    48be:	ldrb.w	r3, [r5, #108]	; 0x6c
    48c2:	cmp	r3, #9
    48c4:	bne.n	4864 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x30>
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    48c6:	ldr	r3, [r5, #80]	; 0x50
  bitmapFind(0, 1);
    48c8:	mov	r1, r0
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    48ca:	add	r3, r6
    48cc:	str.w	r3, [r4, #1060]	; 0x424
    48d0:	ldr	r3, [r5, #84]	; 0x54
  m_fatLength = getLe32(bpb->fatLength);
    48d2:	str.w	r3, [r4, #1064]	; 0x428
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
    48d6:	ldr	r3, [r5, #88]	; 0x58
    48d8:	add	r3, r6
    48da:	str.w	r3, [r4, #1068]	; 0x42c
    48de:	ldr	r3, [r5, #92]	; 0x5c
  m_clusterCount = getLe32(bpb->clusterCount);
    48e0:	str.w	r3, [r4, #1072]	; 0x430
    48e4:	ldr	r3, [r5, #96]	; 0x60
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
    48e6:	str.w	r3, [r4, #1076]	; 0x434
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    48ea:	ldrb.w	r2, [r5, #109]	; 0x6d
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    48ee:	movs	r5, #1
  m_bitmapStart = 0;
    48f0:	str.w	r0, [r4, #1056]	; 0x420
  bitmapFind(0, 1);
    48f4:	mov	r0, r4
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    48f6:	add.w	r3, r2, #9
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    48fa:	strb.w	r2, [r4, #1093]	; 0x445
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    48fe:	lsl.w	r3, r5, r3
  m_clusterMask = m_bytesPerCluster - 1;
    4902:	subs	r2, r3, #1
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    4904:	str.w	r3, [r4, #1084]	; 0x43c
  m_clusterMask = m_bytesPerCluster - 1;
    4908:	str.w	r2, [r4, #1080]	; 0x438
  bitmapFind(0, 1);
    490c:	mov	r2, r5
    490e:	bl	440c <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  m_fatType = FAT_TYPE_EXFAT;
    4912:	movs	r3, #64	; 0x40
  return true;
    4914:	mov	r0, r5
  m_fatType = FAT_TYPE_EXFAT;
    4916:	strb.w	r3, [r4, #1092]	; 0x444
}
    491a:	pop	{r3, r4, r5, r6, r7, pc}
    491c:	.word	0x2000083c

00004920 <ExFatPartition::rootLength()>:
//------------------------------------------------------------------------------
uint32_t ExFatPartition::rootLength() {
    4920:	push	{r4, lr}
    4922:	mov	r4, r0
  uint32_t nc = chainSize(m_rootDirectoryCluster);
    4924:	ldr.w	r1, [r0, #1076]	; 0x434
    4928:	bl	4578 <ExFatPartition::chainSize(unsigned long)>
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    492c:	ldrb.w	r3, [r4, #1093]	; 0x445
    4930:	adds	r3, #9
  return nc << bytesPerClusterShift();
    4932:	uxtb	r3, r3
}
    4934:	lsls	r0, r3
    4936:	pop	{r4, pc}

00004938 <ExFatFile::addCluster()>:
  }
  return checksum;
}
//------------------------------------------------------------------------------
bool ExFatFile::addCluster() {
  uint32_t find = m_vol->bitmapFind(m_curCluster ? m_curCluster + 1 : 0, 1);
    4938:	ldr	r1, [r0, #24]
bool ExFatFile::addCluster() {
    493a:	push	{r3, r4, r5, r6, r7, lr}
    493c:	mov	r4, r0
  uint32_t find = m_vol->bitmapFind(m_curCluster ? m_curCluster + 1 : 0, 1);
    493e:	ldr	r0, [r0, #32]
    4940:	cbz	r1, 4944 <ExFatFile::addCluster()+0xc>
    4942:	adds	r1, #1
    4944:	movs	r2, #1
    4946:	bl	440c <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  if (find < 2) {
    494a:	cmp	r0, #1
  uint32_t find = m_vol->bitmapFind(m_curCluster ? m_curCluster + 1 : 0, 1);
    494c:	mov	r5, r0
  if (find < 2) {
    494e:	bls.n	49b6 <ExFatFile::addCluster()+0x7e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!m_vol->bitmapModify(find, 1, 1)) {
    4950:	movs	r3, #1
    4952:	mov	r1, r0
    4954:	ldr	r0, [r4, #32]
    4956:	mov	r2, r3
    4958:	bl	44cc <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    495c:	mov	r6, r0
    495e:	cbz	r0, 49b6 <ExFatFile::addCluster()+0x7e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_curCluster == 0) {
    4960:	ldr	r3, [r4, #24]
    4962:	cbz	r3, 49bc <ExFatFile::addCluster()+0x84>
  bool isContiguous() const { return m_flags & FILE_FLAG_CONTIGUOUS; }
    4964:	ldrb.w	r2, [r4, #51]	; 0x33
    m_flags |= FILE_FLAG_CONTIGUOUS;
    goto done;
  }
  if (isContiguous()) {
    4968:	lsls	r1, r2, #25
    496a:	bpl.n	4992 <ExFatFile::addCluster()+0x5a>
    if (find == (m_curCluster + 1)) {
    496c:	adds	r1, r3, #1
    496e:	cmp	r1, r5
    4970:	beq.n	49a4 <ExFatFile::addCluster()+0x6c>
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    4972:	bic.w	r2, r2, #64	; 0x40

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    4976:	ldr	r1, [r4, #28]
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    4978:	strb.w	r2, [r4, #51]	; 0x33
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    497c:	b.n	498a <ExFatFile::addCluster()+0x52>
      if (!m_vol->fatPut(c, c + 1)) {
    497e:	ldr	r0, [r4, #32]
    4980:	bl	46c4 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    4984:	mov	r1, r7
      if (!m_vol->fatPut(c, c + 1)) {
    4986:	cbz	r0, 49b6 <ExFatFile::addCluster()+0x7e>
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    4988:	ldr	r3, [r4, #24]
      if (!m_vol->fatPut(c, c + 1)) {
    498a:	adds	r7, r1, #1
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    498c:	cmp	r1, r3
      if (!m_vol->fatPut(c, c + 1)) {
    498e:	mov	r2, r7
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    4990:	bcc.n	497e <ExFatFile::addCluster()+0x46>
        goto fail;
      }
    }
  }
  // New cluster is EOC.
  if (!m_vol->fatPut(find, EXFAT_EOC)) {
    4992:	mov.w	r2, #4294967295
    4996:	mov	r1, r5
    4998:	ldr	r0, [r4, #32]
    499a:	bl	46c4 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    499e:	cbz	r0, 49b6 <ExFatFile::addCluster()+0x7e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Connect new cluster to existing chain.
  if (m_curCluster) {
    49a0:	ldr	r1, [r4, #24]
    49a2:	cbnz	r1, 49aa <ExFatFile::addCluster()+0x72>
  m_curCluster = find;
  return true;

fail:
  return false;
}
    49a4:	mov	r0, r6
  m_curCluster = find;
    49a6:	str	r5, [r4, #24]
}
    49a8:	pop	{r3, r4, r5, r6, r7, pc}
    if (!m_vol->fatPut(m_curCluster, find)) {
    49aa:	mov	r2, r5
    49ac:	ldr	r0, [r4, #32]
    49ae:	bl	46c4 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    49b2:	cmp	r0, #0
    49b4:	bne.n	49a4 <ExFatFile::addCluster()+0x6c>
  return false;
    49b6:	movs	r6, #0
}
    49b8:	mov	r0, r6
    49ba:	pop	{r3, r4, r5, r6, r7, pc}
    m_flags |= FILE_FLAG_CONTIGUOUS;
    49bc:	ldrb.w	r3, [r4, #51]	; 0x33
    49c0:	orr.w	r3, r3, #64	; 0x40
    49c4:	strb.w	r3, [r4, #51]	; 0x33
    goto done;
    49c8:	b.n	49a4 <ExFatFile::addCluster()+0x6c>
    49ca:	nop

000049cc <ExFatFile::remove()>:
  bool isWritable() const { return m_flags & FILE_FLAG_WRITE; }
    49cc:	ldrb.w	r3, [r0, #51]	; 0x33
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
  uint8_t* cache;
  if (!isWritable()) {
    49d0:	lsls	r2, r3, #30
    49d2:	bpl.n	4a42 <ExFatFile::remove()+0x76>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster) {
    49d4:	ldr	r1, [r0, #28]
bool ExFatFile::remove() {
    49d6:	push	{r4, r5, r6, lr}
    49d8:	mov	r5, r0
  if (m_firstCluster) {
    49da:	cbnz	r1, 4a06 <ExFatFile::remove()+0x3a>
bool ExFatFile::remove() {
    49dc:	movs	r4, #0
    49de:	mov	r1, r4
    49e0:	b.n	49f2 <ExFatFile::remove()+0x26>
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Mark entry not used.
    cache[0] &= 0x7F;
    49e2:	ldrb	r3, [r0, #0]
    49e4:	and.w	r3, r3, #127	; 0x7f
    49e8:	strb	r3, [r0, #0]
  for (uint8_t is = 0; is <= m_setCount; is++) {
    49ea:	ldrb.w	r3, [r5, #48]	; 0x30
    49ee:	cmp	r3, r1
    49f0:	bcc.n	4a46 <ExFatFile::remove()+0x7a>
    49f2:	adds	r4, #1
    cache = dirCache(is, FsCache::CACHE_FOR_WRITE);
    49f4:	movs	r2, #1
    49f6:	mov	r0, r5
    49f8:	bl	3b04 <ExFatFile::dirCache(unsigned char, unsigned char)>
  for (uint8_t is = 0; is <= m_setCount; is++) {
    49fc:	uxtb	r1, r4
    if (!cache) {
    49fe:	cmp	r0, #0
    4a00:	bne.n	49e2 <ExFatFile::remove()+0x16>
  // Write entry to device.
  return m_vol->cacheSync();

fail:
  return false;
}
    4a02:	movs	r0, #0
    4a04:	pop	{r4, r5, r6, pc}
    if (isContiguous()) {
    4a06:	lsls	r3, r3, #25
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    4a08:	ldr	r0, [r0, #32]
    if (isContiguous()) {
    4a0a:	bpl.n	4a76 <ExFatFile::remove()+0xaa>
    4a0c:	ldrb.w	r3, [r0, #1093]	; 0x445
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    4a10:	ldrd	r2, r4, [r5, #8]
    4a14:	adds	r3, #9
    4a16:	subs	r2, #1
    4a18:	uxtb	r3, r3
    4a1a:	adc.w	r4, r4, #4294967295
    4a1e:	rsb	ip, r3, #32
    4a22:	lsrs	r2, r3
    4a24:	subs	r3, #32
    4a26:	lsl.w	ip, r4, ip
    4a2a:	lsr.w	r3, r4, r3
    4a2e:	orr.w	r2, r2, ip
    4a32:	orrs	r2, r3
      if (!m_vol->bitmapModify(m_firstCluster, nc, 0)) {
    4a34:	movs	r3, #0
    4a36:	adds	r2, #1
    4a38:	bl	44cc <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    4a3c:	cmp	r0, #0
    4a3e:	bne.n	49dc <ExFatFile::remove()+0x10>
    4a40:	b.n	4a02 <ExFatFile::remove()+0x36>
}
    4a42:	movs	r0, #0
    4a44:	bx	lr
  m_attributes = FILE_ATTR_CLOSED;
    4a46:	movs	r3, #0
  return m_vol->cacheSync();
    4a48:	ldr	r4, [r5, #32]
  m_attributes = FILE_ATTR_CLOSED;
    4a4a:	strb.w	r3, [r5, #49]	; 0x31
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    4a4e:	mov	r0, r4
  m_flags = 0;
    4a50:	strb.w	r3, [r5, #51]	; 0x33
    4a54:	bl	3174 <FsCache::sync()>
    4a58:	cmp	r0, #0
    4a5a:	beq.n	4a02 <ExFatFile::remove()+0x36>
    4a5c:	add.w	r0, r4, #528	; 0x210
    4a60:	bl	3174 <FsCache::sync()>
    4a64:	cmp	r0, #0
    4a66:	beq.n	4a02 <ExFatFile::remove()+0x36>
    4a68:	ldr.w	r0, [r4, #1088]	; 0x440
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() const { return m_sectorMask; }
  bool syncDevice() { return m_blockDev->syncDevice(); }
    4a6c:	ldr	r3, [r0, #0]
}
    4a6e:	ldmia.w	sp!, {r4, r5, r6, lr}
    4a72:	ldr	r3, [r3, #28]
    4a74:	bx	r3
      if (!m_vol->freeChain(m_firstCluster)) {
    4a76:	bl	4704 <ExFatPartition::freeChain(unsigned long)>
    4a7a:	cmp	r0, #0
    4a7c:	bne.n	49dc <ExFatFile::remove()+0x10>
    4a7e:	b.n	4a02 <ExFatFile::remove()+0x36>

00004a80 <ExFatFile::rmdir()>:
//------------------------------------------------------------------------------
bool ExFatFile::rmdir() {
  int n;
  uint8_t dir[FS_DIR_SIZE];
  // must be open subdirectory
  if (!isSubDir()) {
    4a80:	ldrb.w	r3, [r0, #49]	; 0x31
    4a84:	lsls	r3, r3, #27
    4a86:	bmi.n	4a8c <ExFatFile::rmdir()+0xc>
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
  return remove();

fail:
  return false;
    4a88:	movs	r0, #0
}
    4a8a:	bx	lr
bool ExFatFile::rmdir() {
    4a8c:	push	{r4, lr}
  void rewind() { seekSet(0); }
    4a8e:	movs	r2, #0
    4a90:	sub	sp, #32
    4a92:	movs	r3, #0
    4a94:	mov	r4, r0
    4a96:	bl	3e30 <ExFatFile::seekSet(unsigned long long)>
    4a9a:	b.n	4aae <ExFatFile::rmdir()+0x2e>
    if (n != FS_DIR_SIZE || dir[0] & 0X80) {
    4a9c:	cmp	r0, #32
    4a9e:	bne.n	4ad8 <ExFatFile::rmdir()+0x58>
    4aa0:	ldrsb.w	r3, [sp]
    4aa4:	ldrb.w	r2, [sp]
    4aa8:	cmp	r3, #0
    4aaa:	blt.n	4ad8 <ExFatFile::rmdir()+0x58>
    if (dir[0] == 0) {
    4aac:	cbz	r2, 4abc <ExFatFile::rmdir()+0x3c>
    n = read(dir, FS_DIR_SIZE);
    4aae:	movs	r2, #32
    4ab0:	mov	r1, sp
    4ab2:	mov	r0, r4
    4ab4:	bl	3c64 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    4ab8:	cmp	r0, #0
    4aba:	bne.n	4a9c <ExFatFile::rmdir()+0x1c>
  m_flags |= FILE_FLAG_WRITE;
    4abc:	ldrb.w	r3, [r4, #51]	; 0x33
  m_attributes = FILE_ATTR_FILE;
    4ac0:	movs	r2, #8
  return remove();
    4ac2:	mov	r0, r4
  m_flags |= FILE_FLAG_WRITE;
    4ac4:	orr.w	r3, r3, #2
  m_attributes = FILE_ATTR_FILE;
    4ac8:	strb.w	r2, [r4, #49]	; 0x31
  m_flags |= FILE_FLAG_WRITE;
    4acc:	strb.w	r3, [r4, #51]	; 0x33
  return remove();
    4ad0:	bl	49cc <ExFatFile::remove()>
}
    4ad4:	add	sp, #32
    4ad6:	pop	{r4, pc}
  return false;
    4ad8:	movs	r0, #0
}
    4ada:	add	sp, #32
    4adc:	pop	{r4, pc}
    4ade:	nop

00004ae0 <ExFatFile::syncDir()>:
fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    4ae0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4ae4:	mov.w	r8, #0
    4ae8:	sub	sp, #8
    }
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setLe16(df->attributes, m_attributes & FS_ATTRIB_COPY);
        if (FsDateTime::callback) {
    4aea:	ldr	r7, [pc, #296]	; (4c14 <ExFatFile::syncDir()+0x134>)
bool ExFatFile::syncDir() {
    4aec:	mov	r6, r0
  uint16_t checksum = 0;
    4aee:	mov	r4, r8
    4af0:	mov	r1, r8
    cache = dirCache(is, FsCache::CACHE_FOR_READ);
    4af2:	movs	r2, #0
    4af4:	mov	r0, r6
    4af6:	bl	3b04 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache) {
    4afa:	mov	r5, r0
    4afc:	cbz	r0, 4b0c <ExFatFile::syncDir()+0x2c>
    switch (cache[0]) {
    4afe:	ldrb	r1, [r0, #0]
    4b00:	cmp	r1, #192	; 0xc0
    4b02:	beq.n	4bd8 <ExFatFile::syncDir()+0xf8>
    4b04:	cmp	r1, #193	; 0xc1
    4b06:	beq.n	4b60 <ExFatFile::syncDir()+0x80>
    4b08:	cmp	r1, #133	; 0x85
    4b0a:	beq.n	4b20 <ExFatFile::syncDir()+0x40>
    goto fail;
  }
  return true;

fail:
  m_error |= WRITE_ERROR;
    4b0c:	ldrb.w	r3, [r6, #50]	; 0x32
  return false;
    4b10:	movs	r0, #0
  m_error |= WRITE_ERROR;
    4b12:	orr.w	r3, r3, #1
    4b16:	strb.w	r3, [r6, #50]	; 0x32
}
    4b1a:	add	sp, #8
    4b1c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        setLe16(df->attributes, m_attributes & FS_ATTRIB_COPY);
    4b20:	ldrb.w	r3, [r6, #49]	; 0x31
    4b24:	and.w	r3, r3, #55	; 0x37
    4b28:	strh	r3, [r0, #4]
        if (FsDateTime::callback) {
    4b2a:	ldr	r3, [r7, #0]
    4b2c:	cbz	r3, 4b50 <ExFatFile::syncDir()+0x70>
          FsDateTime::callback(&date, &time, &ms10);
    4b2e:	add.w	r2, sp, #3
    4b32:	add.w	r1, sp, #6
    4b36:	add	r0, sp, #4
    4b38:	blx	r3
          setLe16(df->modifyTime, time);
    4b3a:	ldrh.w	r3, [sp, #6]
  *reinterpret_cast<uint16_t*>(dst) = src;
    4b3e:	strh	r3, [r5, #12]
    4b40:	strh	r3, [r5, #16]
          setLe16(df->modifyDate, date);
    4b42:	ldrh.w	r3, [sp, #4]
    4b46:	strh	r3, [r5, #14]
    4b48:	strh	r3, [r5, #18]
          df->modifyTimeMs = ms10;
    4b4a:	ldrb.w	r3, [sp, #3]
    4b4e:	strb	r3, [r5, #21]
        m_vol->dataCacheDirty();
    4b50:	ldr	r2, [r6, #32]
  void dirty() { m_status |= CACHE_STATUS_DIRTY; }
    4b52:	ldrb.w	r3, [r2, #528]	; 0x210
    4b56:	orr.w	r3, r3, #1
    4b5a:	strb.w	r3, [r2, #528]	; 0x210
  bool skip = data[0] == EXFAT_TYPE_FILE;
    4b5e:	ldrb	r1, [r5, #0]
    4b60:	sub.w	r0, r1, #133	; 0x85
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    4b64:	movs	r2, #0
  bool skip = data[0] == EXFAT_TYPE_FILE;
    4b66:	clz	r0, r0
    4b6a:	lsrs	r0, r0, #5
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    4b6c:	b.n	4b72 <ExFatFile::syncDir()+0x92>
    4b6e:	movs	r2, #4
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    4b70:	ldrb	r1, [r5, r2]
    4b72:	lsls	r3, r4, #15
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    4b74:	cmp	r2, #1
    4b76:	add.w	r2, r2, #1
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    4b7a:	orr.w	r3, r3, r4, lsr #1
    4b7e:	uxtah	r3, r1, r3
    4b82:	uxth	r4, r3
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    4b84:	bne.n	4b8a <ExFatFile::syncDir()+0xaa>
    4b86:	cmp	r0, #0
    4b88:	bne.n	4b6e <ExFatFile::syncDir()+0x8e>
    4b8a:	cmp	r2, #31
    4b8c:	bls.n	4b70 <ExFatFile::syncDir()+0x90>
  for (uint8_t is = 0; is <= m_setCount; is++) {
    4b8e:	add.w	r8, r8, #1
    4b92:	ldrb.w	r3, [r6, #48]	; 0x30
    4b96:	uxtb.w	r1, r8
    4b9a:	cmp	r3, r1
    4b9c:	bcs.n	4af2 <ExFatFile::syncDir()+0x12>
      m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_WRITE));
    4b9e:	movs	r2, #1
    4ba0:	add.w	r1, r6, #36	; 0x24
    4ba4:	ldr	r0, [r6, #32]
    4ba6:	bl	45c4 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    4baa:	cmp	r0, #0
    4bac:	beq.n	4b0c <ExFatFile::syncDir()+0x2c>
  if (!m_vol->cacheSync()) {
    4bae:	ldr	r5, [r6, #32]
    4bb0:	strh	r4, [r0, #2]
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    4bb2:	mov	r0, r5
    4bb4:	bl	3174 <FsCache::sync()>
    4bb8:	cmp	r0, #0
    4bba:	beq.n	4b0c <ExFatFile::syncDir()+0x2c>
    4bbc:	add.w	r0, r5, #528	; 0x210
    4bc0:	bl	3174 <FsCache::sync()>
    4bc4:	cmp	r0, #0
    4bc6:	beq.n	4b0c <ExFatFile::syncDir()+0x2c>
    4bc8:	ldr.w	r0, [r5, #1088]	; 0x440
  bool syncDevice() { return m_blockDev->syncDevice(); }
    4bcc:	ldr	r3, [r0, #0]
    4bce:	ldr	r3, [r3, #28]
    4bd0:	blx	r3
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    4bd2:	cmp	r0, #0
    4bd4:	bne.n	4b1a <ExFatFile::syncDir()+0x3a>
    4bd6:	b.n	4b0c <ExFatFile::syncDir()+0x2c>
        if (isContiguous()) {
    4bd8:	ldrb.w	r3, [r6, #51]	; 0x33
    4bdc:	tst.w	r3, #64	; 0x40
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
    4be0:	ldrb	r3, [r0, #1]
    4be2:	ite	ne
    4be4:	orrne.w	r3, r3, #2
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
    4be8:	andeq.w	r3, r3, #253	; 0xfd
    4bec:	strb	r3, [r0, #1]
        setLe64(ds->validLength, m_validLength);
    4bee:	ldrd	r0, r1, [r6, #16]
        m_vol->dataCacheDirty();
    4bf2:	ldrd	r3, r2, [r6, #28]
  *reinterpret_cast<uint64_t*>(dst) = src;
    4bf6:	strd	r0, r1, [r5, #8]
        setLe64(ds->dataLength, m_dataLength);
    4bfa:	ldrd	r0, r1, [r6, #8]
  *reinterpret_cast<uint32_t*>(dst) = src;
    4bfe:	str	r3, [r5, #20]
  *reinterpret_cast<uint64_t*>(dst) = src;
    4c00:	strd	r0, r1, [r5, #24]
    4c04:	ldrb.w	r3, [r2, #528]	; 0x210
    4c08:	orr.w	r3, r3, #1
    4c0c:	strb.w	r3, [r2, #528]	; 0x210
  bool skip = data[0] == EXFAT_TYPE_FILE;
    4c10:	ldrb	r1, [r5, #0]
  void dataCacheDirty() { m_dataCache.dirty(); }
    4c12:	b.n	4b60 <ExFatFile::syncDir()+0x80>
    4c14:	.word	0x20006404

00004c18 <ExFatFile::sync()>:
bool ExFatFile::sync() {
    4c18:	push	{r3, r4, r5, lr}
  if (!isOpen()) {
    4c1a:	ldrb.w	r3, [r0, #49]	; 0x31
    4c1e:	cbz	r3, 4c72 <ExFatFile::sync()+0x5a>
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    4c20:	ldrsb.w	r2, [r0, #51]	; 0x33
    4c24:	mov	r4, r0
    4c26:	ldrb.w	r3, [r0, #51]	; 0x33
    4c2a:	cmp	r2, #0
    4c2c:	blt.n	4c48 <ExFatFile::sync()+0x30>
  if (!m_vol->cacheSync()) {
    4c2e:	ldr	r5, [r0, #32]
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    4c30:	mov	r0, r5
    4c32:	bl	3174 <FsCache::sync()>
    4c36:	cbnz	r0, 4c58 <ExFatFile::sync()+0x40>
  m_error |= WRITE_ERROR;
    4c38:	ldrb.w	r3, [r4, #50]	; 0x32
  return false;
    4c3c:	movs	r0, #0
  m_error |= WRITE_ERROR;
    4c3e:	orr.w	r3, r3, #1
    4c42:	strb.w	r3, [r4, #50]	; 0x32
}
    4c46:	pop	{r3, r4, r5, pc}
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    4c48:	and.w	r3, r3, #127	; 0x7f
    4c4c:	strb.w	r3, [r0, #51]	; 0x33
}
    4c50:	ldmia.w	sp!, {r3, r4, r5, lr}
    return syncDir();
    4c54:	b.w	4ae0 <ExFatFile::syncDir()>
    4c58:	add.w	r0, r5, #528	; 0x210
    4c5c:	bl	3174 <FsCache::sync()>
    4c60:	cmp	r0, #0
    4c62:	beq.n	4c38 <ExFatFile::sync()+0x20>
    4c64:	ldr.w	r0, [r5, #1088]	; 0x440
  bool syncDevice() { return m_blockDev->syncDevice(); }
    4c68:	ldr	r3, [r0, #0]
    4c6a:	ldr	r3, [r3, #28]
    4c6c:	blx	r3
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    4c6e:	cmp	r0, #0
    4c70:	beq.n	4c38 <ExFatFile::sync()+0x20>
    return true;
    4c72:	movs	r0, #1
}
    4c74:	pop	{r3, r4, r5, pc}
    4c76:	nop

00004c78 <ExFatFile::addDirCluster()>:
bool ExFatFile::addDirCluster() {
    4c78:	push	{r4, r5, r6, lr}
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    4c7a:	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::addDirCluster() {
    4c7e:	mov	r5, r0
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    4c80:	lsls	r2, r3, #25
    4c82:	bmi.n	4d1e <ExFatFile::addDirCluster()+0xa6>
    4c84:	ldr	r0, [r0, #8]
  uint32_t bytesPerCluster() const { return m_bytesPerCluster; }
    4c86:	ldr	r3, [r5, #32]
  dl += m_vol->bytesPerCluster();
    4c88:	ldr.w	r3, [r3, #1084]	; 0x43c
    4c8c:	add	r0, r3
  if (dl >= 0X4000000) {
    4c8e:	cmp.w	r0, #67108864	; 0x4000000
    4c92:	bcc.n	4c98 <ExFatFile::addDirCluster()+0x20>
}
    4c94:	movs	r0, #0
    4c96:	pop	{r4, r5, r6, pc}
  if (!addCluster()) {
    4c98:	mov	r0, r5
    4c9a:	bl	4938 <ExFatFile::addCluster()>
    4c9e:	cmp	r0, #0
    4ca0:	beq.n	4c94 <ExFatFile::addDirCluster()+0x1c>
  sector = m_vol->clusterStartSector(m_curCluster);
    4ca2:	ldr	r0, [r5, #32]
  for (uint32_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    4ca4:	movs	r4, #0
           ((cluster - 2) << m_sectorsPerClusterShift);
    4ca6:	ldr	r6, [r5, #24]
    4ca8:	ldrb.w	r3, [r0, #1093]	; 0x445
    4cac:	subs	r6, #2
    4cae:	lsls	r6, r3
    4cb0:	ldr.w	r3, [r0, #1068]	; 0x42c
    4cb4:	add	r6, r3
    return m_dataCache.prepare(sector, option);
    4cb6:	adds	r1, r6, r4
    4cb8:	movs	r2, #5
    4cba:	add.w	r0, r0, #528	; 0x210
    4cbe:	adds	r4, #1
    4cc0:	bl	31cc <FsCache::prepare(unsigned long, unsigned char)>
    memset(cache, 0, m_vol->bytesPerSector());
    4cc4:	mov.w	r2, #512	; 0x200
    4cc8:	movs	r1, #0
    if (!cache) {
    4cca:	cmp	r0, #0
    4ccc:	beq.n	4c94 <ExFatFile::addDirCluster()+0x1c>
    memset(cache, 0, m_vol->bytesPerSector());
    4cce:	bl	e064 <memset>
  for (uint32_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    4cd2:	ldr	r0, [r5, #32]
  uint32_t sectorsPerCluster() const { return 1UL << m_sectorsPerClusterShift; }
    4cd4:	movs	r3, #1
    4cd6:	ldrb.w	r2, [r0, #1093]	; 0x445
    4cda:	lsls	r3, r2
    4cdc:	cmp	r4, r3
    4cde:	bcc.n	4cb6 <ExFatFile::addDirCluster()+0x3e>
  if (!isRoot()) {
    4ce0:	ldrb.w	r3, [r5, #49]	; 0x31
    4ce4:	lsls	r3, r3, #25
    4ce6:	bmi.n	4d14 <ExFatFile::addDirCluster()+0x9c>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    4ce8:	ldrb.w	r2, [r5, #51]	; 0x33
    4cec:	orn	r2, r2, #127	; 0x7f
    m_dataLength += m_vol->bytesPerCluster();
    4cf0:	ldrd	r3, r1, [r5, #8]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    4cf4:	strb.w	r2, [r5, #51]	; 0x33
    m_dataLength += m_vol->bytesPerCluster();
    4cf8:	ldr.w	r2, [r0, #1084]	; 0x43c
    4cfc:	adds	r3, r3, r2
    4cfe:	adc.w	r0, r1, #0
    4d02:	str	r3, [r5, #8]
    m_validLength += m_vol->bytesPerCluster();
    4d04:	ldrd	r3, r1, [r5, #16]
    m_dataLength += m_vol->bytesPerCluster();
    4d08:	str	r0, [r5, #12]
    m_validLength += m_vol->bytesPerCluster();
    4d0a:	adds	r3, r3, r2
    4d0c:	adc.w	r1, r1, #0
    4d10:	strd	r3, r1, [r5, #16]
  return sync();
    4d14:	mov	r0, r5
}
    4d16:	ldmia.w	sp!, {r4, r5, r6, lr}
  return sync();
    4d1a:	b.w	4c18 <ExFatFile::sync()>
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    4d1e:	ldr	r0, [r0, #32]
    4d20:	bl	4920 <ExFatPartition::rootLength()>
    4d24:	b.n	4c86 <ExFatFile::addDirCluster()+0xe>
    4d26:	nop

00004d28 <ExFatFile::rename(ExFatFile*, char const*)>:
bool ExFatFile::rename(ExFatFile* dirFile, const char* newPath) {
    4d28:	push	{r4, r5, r6, lr}
    4d2a:	mov	r4, r0
  if (!(isFile() || isSubDir())) {
    4d2c:	ldrb.w	r0, [r0, #49]	; 0x31
bool ExFatFile::rename(ExFatFile* dirFile, const char* newPath) {
    4d30:	sub	sp, #112	; 0x70
  ExFatFile() {}
    4d32:	movs	r3, #0
  if (!(isFile() || isSubDir())) {
    4d34:	tst.w	r0, #24
    4d38:	str	r3, [sp, #48]	; 0x30
    4d3a:	str	r3, [sp, #104]	; 0x68
    4d3c:	beq.n	4d46 <ExFatFile::rename(ExFatFile*, char const*)+0x1e>
  if (m_vol != dirFile->m_vol) {
    4d3e:	ldr	r0, [r4, #32]
    4d40:	ldr	r3, [r1, #32]
    4d42:	cmp	r0, r3
    4d44:	beq.n	4d4c <ExFatFile::rename(ExFatFile*, char const*)+0x24>
  return false;
    4d46:	movs	r0, #0
}
    4d48:	add	sp, #112	; 0x70
    4d4a:	pop	{r4, r5, r6, pc}
  if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    4d4c:	movw	r3, #2561	; 0xa01
    4d50:	mov	r0, sp
    4d52:	bl	42e4 <ExFatFile::open(ExFatFile*, char const*, int)>
    4d56:	cmp	r0, #0
    4d58:	beq.n	4d46 <ExFatFile::rename(ExFatFile*, char const*)+0x1e>
  oldFile = *this;
    4d5a:	mov	ip, r4
    4d5c:	add.w	r6, r4, #48	; 0x30
    4d60:	add	r5, sp, #56	; 0x38
    4d62:	ldr.w	r0, [ip]
    4d66:	add.w	ip, ip, #16
    4d6a:	ldr.w	r1, [ip, #-12]
    4d6e:	mov	lr, r5
    4d70:	ldr.w	r2, [ip, #-8]
    4d74:	adds	r5, #16
    4d76:	ldr.w	r3, [ip, #-4]
    4d7a:	cmp	ip, r6
    4d7c:	stmia.w	lr!, {r0, r1, r2, r3}
    4d80:	bne.n	4d62 <ExFatFile::rename(ExFatFile*, char const*)+0x3a>
    4d82:	ldr.w	r0, [ip]
  m_dirPos = file.m_dirPos;
    4d86:	add	r2, sp, #36	; 0x24
    4d88:	add.w	r3, r4, #36	; 0x24
  oldFile = *this;
    4d8c:	str	r0, [r5, #0]
  m_setCount = file.m_setCount;
    4d8e:	ldrb.w	r5, [sp, #48]	; 0x30
  m_dirPos = file.m_dirPos;
    4d92:	ldmia	r2, {r0, r1, r2}
    4d94:	stmia.w	r3, {r0, r1, r2}
  m_flags |= FILE_FLAG_DIR_DIRTY;
    4d98:	ldrb.w	r3, [r4, #51]	; 0x33
  if (!sync()) {
    4d9c:	mov	r0, r4
  m_setCount = file.m_setCount;
    4d9e:	strb.w	r5, [r4, #48]	; 0x30
  m_flags |= FILE_FLAG_DIR_DIRTY;
    4da2:	orn	r3, r3, #127	; 0x7f
    4da6:	strb.w	r3, [r4, #51]	; 0x33
  if (!sync()) {
    4daa:	bl	4c18 <ExFatFile::sync()>
    4dae:	cmp	r0, #0
    4db0:	beq.n	4d46 <ExFatFile::rename(ExFatFile*, char const*)+0x1e>
  oldFile.m_firstCluster = 0;
    4db2:	movs	r1, #0
  oldFile.m_flags = FILE_FLAG_WRITE;
    4db4:	movs	r2, #2
  oldFile.m_attributes = FILE_ATTR_FILE;
    4db6:	movs	r3, #8
  return oldFile.remove();
    4db8:	add	r0, sp, #56	; 0x38
  oldFile.m_firstCluster = 0;
    4dba:	str	r1, [sp, #84]	; 0x54
  oldFile.m_flags = FILE_FLAG_WRITE;
    4dbc:	strb.w	r2, [sp, #107]	; 0x6b
  oldFile.m_attributes = FILE_ATTR_FILE;
    4dc0:	strb.w	r3, [sp, #105]	; 0x69
  return oldFile.remove();
    4dc4:	bl	49cc <ExFatFile::remove()>
    4dc8:	b.n	4d48 <ExFatFile::rename(ExFatFile*, char const*)+0x20>
    4dca:	nop

00004dcc <ExFatFile::mkdir(ExFatFile*, ExName_t*)>:
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
    4dcc:	push	{r3, r4, r5, lr}
  if (!parent->isDir()) {
    4dce:	ldrb.w	r3, [r1, #49]	; 0x31
    4dd2:	tst.w	r3, #80	; 0x50
    4dd6:	bne.n	4dde <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x12>
  return false;
    4dd8:	movs	r5, #0
}
    4dda:	mov	r0, r5
    4ddc:	pop	{r3, r4, r5, pc}
  if (!openPrivate(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    4dde:	movw	r3, #2562	; 0xa02
    4de2:	mov	r4, r0
    4de4:	bl	3f1c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    4de8:	cmp	r0, #0
    4dea:	beq.n	4dd8 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xc>
  m_attributes = FILE_ATTR_SUBDIR | FS_ATTRIB_ARCHIVE;
    4dec:	movs	r3, #48	; 0x30
  if (!addDirCluster()) {
    4dee:	mov	r0, r4
  m_attributes = FILE_ATTR_SUBDIR | FS_ATTRIB_ARCHIVE;
    4df0:	strb.w	r3, [r4, #49]	; 0x31
  if (!addDirCluster()) {
    4df4:	bl	4c78 <ExFatFile::addDirCluster()>
    4df8:	mov	r5, r0
    4dfa:	cmp	r0, #0
    4dfc:	beq.n	4dd8 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xc>
  m_firstCluster = m_curCluster;
    4dfe:	ldr	r1, [r4, #24]
  void rewind() { seekSet(0); }
    4e00:	movs	r2, #0
    4e02:	movs	r3, #0
    4e04:	mov	r0, r4
    4e06:	str	r1, [r4, #28]
    4e08:	bl	3e30 <ExFatFile::seekSet(unsigned long long)>
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    4e0c:	movs	r2, #193	; 0xc1
  if (!isOpen()) {
    4e0e:	ldrb.w	r3, [r4, #49]	; 0x31
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    4e12:	strb.w	r2, [r4, #51]	; 0x33
  if (!isOpen()) {
    4e16:	cmp	r3, #0
    4e18:	beq.n	4dda <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xe>
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    4e1a:	movs	r3, #65	; 0x41
    return syncDir();
    4e1c:	mov	r0, r4
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    4e1e:	strb.w	r3, [r4, #51]	; 0x33
}
    4e22:	ldmia.w	sp!, {r3, r4, r5, lr}
    return syncDir();
    4e26:	b.w	4ae0 <ExFatFile::syncDir()>
    4e2a:	nop

00004e2c <ExFatFile::mkdir(ExFatFile*, char const*, bool)>:
bool ExFatFile::mkdir(ExFatFile* parent, const char* path, bool pFlag) {
    4e2c:	push	{r4, r5, r6, r7, lr}
  ExFatFile() {}
    4e2e:	movs	r5, #0
    4e30:	sub	sp, #92	; 0x5c
    4e32:	mov	r7, r3
  if (isOpen() || !parent->isDir()) {
    4e34:	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::mkdir(ExFatFile* parent, const char* path, bool pFlag) {
    4e38:	str	r2, [sp, #4]
    4e3a:	str	r5, [sp, #80]	; 0x50
  if (isOpen() || !parent->isDir()) {
    4e3c:	cmp	r3, #0
    4e3e:	bne.n	4ece <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa2>
    4e40:	ldrb.w	r3, [r1, #49]	; 0x31
    4e44:	mov	r6, r1
    4e46:	tst.w	r3, #80	; 0x50
    4e4a:	beq.n	4ece <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa2>
  if (isDirSeparator(*path)) {
    4e4c:	ldrb	r3, [r2, #0]
    4e4e:	mov	r4, r0
    4e50:	mov	r1, r2
    4e52:	cmp	r3, #47	; 0x2f
    4e54:	beq.n	4ed4 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa8>
    if (!parsePathName(path, &fname, &path)) {
    4e56:	add	r3, sp, #4
    4e58:	add	r2, sp, #12
    4e5a:	mov	r0, r4
    4e5c:	bl	3bc4 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    4e60:	cmp	r0, #0
    4e62:	beq.n	4ece <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa2>
    if (!*path) {
    4e64:	ldr	r3, [sp, #4]
    4e66:	ldrb	r3, [r3, #0]
    4e68:	cmp	r3, #0
    4e6a:	beq.n	4ef0 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xc4>
    if (!openPrivate(parent, &fname, O_RDONLY)) {
    4e6c:	movs	r3, #0
    4e6e:	add	r2, sp, #12
    4e70:	mov	r1, r6
    4e72:	mov	r0, r4
    4e74:	bl	3f1c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    4e78:	cbnz	r0, 4e88 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x5c>
      if (!pFlag || !mkdir(parent, &fname)) {
    4e7a:	cbz	r7, 4ece <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa2>
    4e7c:	add	r2, sp, #12
    4e7e:	mov	r1, r6
    4e80:	mov	r0, r4
    4e82:	bl	4dcc <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
    4e86:	cbz	r0, 4ece <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa2>
    tmpDir = *this;
    4e88:	mov	ip, r4
    4e8a:	add	r5, sp, #32
    4e8c:	add.w	r6, r4, #48	; 0x30
    4e90:	ldr.w	r0, [ip]
    4e94:	add.w	ip, ip, #16
    4e98:	ldr.w	r1, [ip, #-12]
    4e9c:	mov	lr, r5
    4e9e:	ldr.w	r2, [ip, #-8]
    4ea2:	adds	r5, #16
    4ea4:	ldr.w	r3, [ip, #-4]
    4ea8:	cmp	ip, r6
    4eaa:	stmia.w	lr!, {r0, r1, r2, r3}
    4eae:	bne.n	4e90 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x64>
    4eb0:	ldr.w	r0, [ip]
    parent = &tmpDir;
    4eb4:	add	r6, sp, #32
    tmpDir = *this;
    4eb6:	str	r0, [r5, #0]
    close();
    4eb8:	mov	r0, r4
    4eba:	bl	3b40 <ExFatFile::close()>
    if (!parsePathName(path, &fname, &path)) {
    4ebe:	ldr	r1, [sp, #4]
    4ec0:	add	r3, sp, #4
    4ec2:	add	r2, sp, #12
    4ec4:	mov	r0, r4
    4ec6:	bl	3bc4 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    4eca:	cmp	r0, #0
    4ecc:	bne.n	4e64 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x38>
  return false;
    4ece:	movs	r0, #0
}
    4ed0:	add	sp, #92	; 0x5c
    4ed2:	pop	{r4, r5, r6, r7, pc}
      path++;
    4ed4:	adds	r1, #1
    4ed6:	str	r1, [sp, #4]
    while (isDirSeparator(*path)) {
    4ed8:	ldrb	r3, [r1, #0]
    4eda:	cmp	r3, #47	; 0x2f
    4edc:	beq.n	4ed4 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa8>
    if (!tmpDir.openRoot(parent->m_vol)) {
    4ede:	ldr	r1, [r6, #32]
    4ee0:	add	r0, sp, #32
    4ee2:	bl	3b9c <ExFatFile::openRoot(ExFatVolume*)>
    4ee6:	cmp	r0, #0
    4ee8:	beq.n	4ece <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa2>
    if (!parsePathName(path, &fname, &path)) {
    4eea:	ldr	r1, [sp, #4]
    parent = &tmpDir;
    4eec:	add	r6, sp, #32
    4eee:	b.n	4e56 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x2a>
  return mkdir(parent, &fname);
    4ef0:	add	r2, sp, #12
    4ef2:	mov	r1, r6
    4ef4:	mov	r0, r4
    4ef6:	bl	4dcc <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
}
    4efa:	add	sp, #92	; 0x5c
    4efc:	pop	{r4, r5, r6, r7, pc}
    4efe:	nop

00004f00 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>:
//------------------------------------------------------------------------------
bool ExFatFile::timestamp(uint8_t flags, uint16_t year, uint8_t month,
                          uint8_t day, uint8_t hour, uint8_t minute,
                          uint8_t second) {
    4f00:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4f04:	mov	r6, r1
  uint16_t date;
  uint16_t time;
  uint8_t ms10;

  if (!isFile() || year < 1980 || year > 2107 || month < 1 || month > 12 ||
      day < 1 || day > 31 || hour > 23 || minute > 59 || second > 59) {
    4f06:	ldrb.w	r1, [r0, #49]	; 0x31
                          uint8_t second) {
    4f0a:	sub	sp, #12
      day < 1 || day > 31 || hour > 23 || minute > 59 || second > 59) {
    4f0c:	lsls	r1, r1, #28
                          uint8_t second) {
    4f0e:	ldrb.w	fp, [sp, #48]	; 0x30
    4f12:	ldrb.w	r9, [sp, #52]	; 0x34
    4f16:	ldrb.w	r8, [sp, #56]	; 0x38
    4f1a:	ldrb.w	r7, [sp, #60]	; 0x3c
      day < 1 || day > 31 || hour > 23 || minute > 59 || second > 59) {
    4f1e:	bpl.w	502c <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
  if (!isFile() || year < 1980 || year > 2107 || month < 1 || month > 12 ||
    4f22:	subw	r2, r2, #1980	; 0x7bc
    4f26:	uxth	r4, r2
    4f28:	cmp	r4, #127	; 0x7f
    4f2a:	bhi.n	502c <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
    4f2c:	subs	r2, r3, #1
    4f2e:	cmp	r2, #11
    4f30:	bhi.n	502c <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
      day < 1 || day > 31 || hour > 23 || minute > 59 || second > 59) {
    4f32:	add.w	r2, fp, #4294967295
    4f36:	cmp	r2, #30
    4f38:	bhi.n	502c <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
    4f3a:	cmp.w	r8, #59	; 0x3b
    4f3e:	it	ls
    4f40:	cmpls.w	r9, #23
    4f44:	ite	hi
    4f46:	movhi.w	sl, #1
    4f4a:	movls.w	sl, #0
    4f4e:	cmp	r7, #59	; 0x3b
    4f50:	it	hi
    4f52:	orrhi.w	sl, sl, #1
    4f56:	cmp.w	sl, #0
    4f5a:	bne.n	502c <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // update directory entry
  if (!sync()) {
    4f5c:	mov	r5, r0
    4f5e:	str	r3, [sp, #4]
    4f60:	bl	4c18 <ExFatFile::sync()>
    4f64:	cmp	r0, #0
    4f66:	beq.n	502c <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
    4f68:	ldr	r3, [sp, #4]
    4f6a:	mov	r1, sl
    4f6c:	orr.w	fp, fp, r3, lsl #5
             : hour << 11 | minute << 5 | second >> 1;
    4f70:	lsrs	r3, r7, #1
    goto fail;
  }

  date = FS_DATE(year, month, day);
  time = FS_TIME(hour, minute, second);
  ms10 = second & 1 ? 100 : 0;
    4f72:	ands.w	r7, r7, #1
                                              : year << 9 | month << 5 | day;
    4f76:	orr.w	r4, fp, r4, lsl #9
  uint16_t checksum = 0;
    4f7a:	mov	fp, sl
             : hour << 11 | minute << 5 | second >> 1;
    4f7c:	orr.w	r8, r3, r8, lsl #5
  ms10 = second & 1 ? 100 : 0;
    4f80:	it	ne
    4f82:	movne	r7, #100	; 0x64
                                              : year << 9 | month << 5 | day;
    4f84:	uxth	r4, r4
             : hour << 11 | minute << 5 | second >> 1;
    4f86:	orr.w	r8, r8, r9, lsl #11
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setLe16(df->attributes, m_attributes & FS_ATTRIB_COPY);
        m_vol->dataCacheDirty();
        if (flags & T_ACCESS) {
    4f8a:	and.w	r9, r6, #1
    4f8e:	uxth.w	r8, r8
    cache = dirCache(is, FsCache::CACHE_FOR_READ);
    4f92:	movs	r2, #0
    4f94:	mov	r0, r5
    4f96:	bl	3b04 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache) {
    4f9a:	cmp	r0, #0
    4f9c:	beq.n	502c <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
    switch (cache[0]) {
    4f9e:	ldrb.w	ip, [r0]
    4fa2:	cmp.w	ip, #133	; 0x85
    4fa6:	beq.n	5034 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x134>
    4fa8:	add.w	r3, ip, #64	; 0x40
    4fac:	uxtb	r3, r3
    4fae:	cmp	r3, #1
    4fb0:	bhi.n	502c <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
  bool skip = data[0] == EXFAT_TYPE_FILE;
    4fb2:	sub.w	r1, ip, #133	; 0x85
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    4fb6:	movs	r3, #0
  bool skip = data[0] == EXFAT_TYPE_FILE;
    4fb8:	clz	r1, r1
    4fbc:	lsrs	r1, r1, #5
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    4fbe:	b.n	4fc6 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xc6>
    4fc0:	movs	r3, #4
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    4fc2:	ldrb.w	ip, [r0, r3]
    4fc6:	mov.w	r2, fp, lsl #15
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    4fca:	cmp	r3, #1
    4fcc:	add.w	r3, r3, #1
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    4fd0:	orr.w	r2, r2, fp, lsr #1
    4fd4:	uxtah	r2, ip, r2
    4fd8:	uxth.w	fp, r2
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    4fdc:	bne.n	4fe2 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xe2>
    4fde:	cmp	r1, #0
    4fe0:	bne.n	4fc0 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xc0>
    4fe2:	cmp	r3, #31
    4fe4:	bls.n	4fc2 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xc2>
  for (uint8_t is = 0; is <= m_setCount; is++) {
    4fe6:	add.w	sl, sl, #1
    4fea:	ldrb.w	r3, [r5, #48]	; 0x30
    4fee:	uxtb.w	r1, sl
    4ff2:	cmp	r3, r1
    4ff4:	bcs.n	4f92 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x92>
        break;
    }
    checksum = exFatDirChecksum(cache, checksum);
  }
  df = reinterpret_cast<DirFile_t*>(
      m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_WRITE));
    4ff6:	movs	r2, #1
    4ff8:	add.w	r1, r5, #36	; 0x24
    4ffc:	ldr	r0, [r5, #32]
    4ffe:	bl	45c4 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    5002:	cbz	r0, 502c <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  setLe16(df->setChecksum, checksum);
  if (!m_vol->cacheSync()) {
    5004:	ldr	r4, [r5, #32]
  *reinterpret_cast<uint16_t*>(dst) = src;
    5006:	strh.w	fp, [r0, #2]
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    500a:	mov	r0, r4
    500c:	bl	3174 <FsCache::sync()>
    5010:	cbz	r0, 502c <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
    5012:	add.w	r0, r4, #528	; 0x210
    5016:	bl	3174 <FsCache::sync()>
    501a:	cbz	r0, 502c <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
    501c:	ldr.w	r0, [r4, #1088]	; 0x440
  bool syncDevice() { return m_blockDev->syncDevice(); }
    5020:	ldr	r3, [r0, #0]
    5022:	ldr	r3, [r3, #28]
  }
  return true;

fail:
  return false;
}
    5024:	add	sp, #12
    5026:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    502a:	bx	r3
    502c:	movs	r0, #0
    502e:	add	sp, #12
    5030:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        setLe16(df->attributes, m_attributes & FS_ATTRIB_COPY);
    5034:	ldrb.w	r3, [r5, #49]	; 0x31
        m_vol->dataCacheDirty();
    5038:	ldr	r2, [r5, #32]
        setLe16(df->attributes, m_attributes & FS_ATTRIB_COPY);
    503a:	and.w	r3, r3, #55	; 0x37
    503e:	strh	r3, [r0, #4]
    5040:	ldrb.w	r3, [r2, #528]	; 0x210
    5044:	orr.w	r3, r3, #1
    5048:	strb.w	r3, [r2, #528]	; 0x210
        if (flags & T_ACCESS) {
    504c:	cmp.w	r9, #0
    5050:	beq.n	5058 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x158>
    5052:	strh.w	r8, [r0, #16]
    5056:	strh	r4, [r0, #18]
        if (flags & T_CREATE) {
    5058:	lsls	r2, r6, #30
    505a:	bpl.n	5064 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x164>
          df->createTimeMs = ms10;
    505c:	strb	r7, [r0, #20]
    505e:	strh.w	r8, [r0, #8]
    5062:	strh	r4, [r0, #10]
        if (flags & T_WRITE) {
    5064:	lsls	r3, r6, #29
    5066:	bpl.n	5070 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x170>
          df->modifyTimeMs = ms10;
    5068:	strb	r7, [r0, #21]
    506a:	strh.w	r8, [r0, #12]
    506e:	strh	r4, [r0, #14]
  bool skip = data[0] == EXFAT_TYPE_FILE;
    5070:	ldrb.w	ip, [r0]
}
    5074:	b.n	4fb2 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xb2>
    5076:	nop

00005078 <ExFatFile::truncate()>:
  bool isWritable() const { return m_flags & FILE_FLAG_WRITE; }
    5078:	ldrb.w	r3, [r0, #51]	; 0x33
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    507c:	lsls	r2, r3, #30
    507e:	bpl.n	5146 <ExFatFile::truncate()+0xce>
bool ExFatFile::truncate() {
    5080:	push	{r4, r5, r6, lr}
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    5082:	ldr	r5, [r0, #28]
bool ExFatFile::truncate() {
    5084:	sub	sp, #8
    5086:	mov	r4, r0
  if (m_firstCluster == 0) {
    5088:	cbz	r5, 50f4 <ExFatFile::truncate()+0x7c>
    return true;
  }
  if (isContiguous()) {
    508a:	ands.w	r6, r3, #64	; 0x40
    508e:	beq.n	50fa <ExFatFile::truncate()+0x82>
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    5090:	ldr	r0, [r0, #32]
    5092:	ldr	r2, [r4, #8]
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    5094:	ldrb.w	ip, [r0, #1093]	; 0x445
    5098:	subs	r2, #1
    509a:	ldr	r1, [r4, #12]
    509c:	add.w	ip, ip, #9
    50a0:	adc.w	r1, r1, #4294967295
    50a4:	uxtb.w	ip, ip
    50a8:	rsb	lr, ip, #32
    50ac:	lsr.w	r2, r2, ip
    50b0:	sub.w	ip, ip, #32
    50b4:	lsl.w	lr, r1, lr
    50b8:	lsr.w	ip, r1, ip
    if (m_curCluster) {
    50bc:	ldr	r1, [r4, #24]
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    50be:	orr.w	r2, r2, lr
    50c2:	orr.w	r2, r2, ip
    50c6:	adds	r2, #1
    if (m_curCluster) {
    50c8:	cbz	r1, 5112 <ExFatFile::truncate()+0x9a>
      toFree = m_curCluster + 1;
      nc -= 1 + m_curCluster - m_firstCluster;
    50ca:	subs	r5, #1
    50cc:	subs	r5, r5, r1
      toFree = m_curCluster + 1;
    50ce:	adds	r1, #1
      nc -= 1 + m_curCluster - m_firstCluster;
    50d0:	add	r2, r5
      toFree = m_curCluster + 1;
    50d2:	str	r1, [sp, #4]
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    50d4:	cbnz	r2, 5134 <ExFatFile::truncate()+0xbc>
      }
    }
  }
  m_dataLength = m_curPosition;
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
    50d6:	orn	r3, r3, #127	; 0x7f
  return sync();
    50da:	mov	r0, r4
  m_dataLength = m_curPosition;
    50dc:	vldr	d7, [r4]
  m_flags |= FILE_FLAG_DIR_DIRTY;
    50e0:	strb.w	r3, [r4, #51]	; 0x33
  m_dataLength = m_curPosition;
    50e4:	vstr	d7, [r4, #8]
  m_validLength = m_curPosition;
    50e8:	vstr	d7, [r4, #16]
  return sync();
    50ec:	bl	4c18 <ExFatFile::sync()>

fail:
  return false;
}
    50f0:	add	sp, #8
    50f2:	pop	{r4, r5, r6, pc}
    return true;
    50f4:	movs	r0, #1
}
    50f6:	add	sp, #8
    50f8:	pop	{r4, r5, r6, pc}
    if (m_curCluster) {
    50fa:	ldr	r1, [r0, #24]
    50fc:	cbnz	r1, 5118 <ExFatFile::truncate()+0xa0>
      toFree = m_firstCluster;
    50fe:	str	r5, [sp, #4]
      m_firstCluster = 0;
    5100:	str	r1, [r0, #28]
      if (!m_vol->freeChain(toFree)) {
    5102:	mov	r1, r5
    5104:	ldr	r0, [r4, #32]
    5106:	bl	4704 <ExFatPartition::freeChain(unsigned long)>
    510a:	cbz	r0, 5140 <ExFatFile::truncate()+0xc8>
  m_flags |= FILE_FLAG_DIR_DIRTY;
    510c:	ldrb.w	r3, [r4, #51]	; 0x33
    5110:	b.n	50d6 <ExFatFile::truncate()+0x5e>
      toFree = m_firstCluster;
    5112:	str	r5, [sp, #4]
      m_firstCluster = 0;
    5114:	str	r1, [r4, #28]
    5116:	b.n	50d4 <ExFatFile::truncate()+0x5c>
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    5118:	add	r2, sp, #4
    511a:	ldr	r0, [r0, #32]
      toFree = 0;
    511c:	str	r6, [sp, #4]
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    511e:	bl	4680 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
      if (fg < 0) {
    5122:	cmp	r0, #0
    5124:	blt.n	5140 <ExFatFile::truncate()+0xc8>
      if (fg) {
    5126:	bne.n	514a <ExFatFile::truncate()+0xd2>
    if (toFree) {
    5128:	ldr	r5, [sp, #4]
    512a:	cmp	r5, #0
    512c:	bne.n	5102 <ExFatFile::truncate()+0x8a>
  m_flags |= FILE_FLAG_DIR_DIRTY;
    512e:	ldrb.w	r3, [r4, #51]	; 0x33
    5132:	b.n	50d6 <ExFatFile::truncate()+0x5e>
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    5134:	movs	r3, #0
    5136:	ldr	r1, [sp, #4]
    5138:	bl	44cc <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    513c:	cmp	r0, #0
    513e:	bne.n	510c <ExFatFile::truncate()+0x94>
  return false;
    5140:	movs	r0, #0
}
    5142:	add	sp, #8
    5144:	pop	{r4, r5, r6, pc}
  return false;
    5146:	movs	r0, #0
}
    5148:	bx	lr
        if (!m_vol->fatPut(m_curCluster, EXFAT_EOC)) {
    514a:	mov.w	r2, #4294967295
    514e:	ldr	r1, [r4, #24]
    5150:	ldr	r0, [r4, #32]
    5152:	bl	46c4 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    5156:	cmp	r0, #0
    5158:	bne.n	5128 <ExFatFile::truncate()+0xb0>
    515a:	b.n	5140 <ExFatFile::truncate()+0xc8>

0000515c <ExFatFile::write(void const*, unsigned int)>:
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
    515c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5160:	ldrb.w	r3, [r0, #51]	; 0x33
    5164:	sub	sp, #12
    5166:	mov	r4, r0

  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    5168:	lsls	r5, r3, #30
    516a:	bpl.w	52b0 <ExFatFile::write(void const*, unsigned int)+0x154>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    516e:	mov	r9, r2
    5170:	lsls	r2, r3, #28
    5172:	mov	r6, r1
    5174:	bmi.w	52a2 <ExFatFile::write(void const*, unsigned int)+0x146>
    if (!seekSet(m_validLength)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    5178:	cmp.w	r9, #0
    517c:	beq.w	53d0 <ExFatFile::write(void const*, unsigned int)+0x274>
    if (m_curPosition > m_validLength) {
      m_flags |= FILE_FLAG_DIR_DIRTY;
      m_validLength = m_curPosition;
    }
  }
  if (m_curPosition > m_dataLength) {
    5180:	ldr	r3, [r4, #0]
    5182:	mov	r5, r9
    clusterOffset = m_curPosition & m_vol->clusterMask();
    5184:	ldr	r0, [r4, #32]
      if (m_curCluster != 0) {
    5186:	ldr	r1, [r4, #24]
    clusterOffset = m_curPosition & m_vol->clusterMask();
    5188:	ldr.w	r2, [r0, #1080]	; 0x438
    518c:	and.w	r8, r2, r3
    sectorOffset = clusterOffset & m_vol->sectorMask();
    5190:	ubfx	r7, r8, #0, #9
    if (clusterOffset == 0) {
    5194:	cmp.w	r8, #0
    5198:	bne.w	52c4 <ExFatFile::write(void const*, unsigned int)+0x168>
      if (m_curCluster != 0) {
    519c:	cmp	r1, #0
    519e:	beq.w	534a <ExFatFile::write(void const*, unsigned int)+0x1ee>
        if (isContiguous()) {
    51a2:	ldrb.w	r3, [r4, #51]	; 0x33
    51a6:	lsls	r3, r3, #25
    51a8:	bpl.w	5384 <ExFatFile::write(void const*, unsigned int)+0x228>
    51ac:	ldrb.w	ip, [r0, #1093]	; 0x445
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
    51b0:	ldrd	r3, r2, [r4, #8]
    51b4:	add.w	ip, ip, #9
    51b8:	subs	r3, #1
    51ba:	uxtb.w	ip, ip
    51be:	adc.w	r2, r2, #4294967295
    51c2:	rsb	lr, ip, #32
    51c6:	lsr.w	r3, r3, ip
    51ca:	sub.w	ip, ip, #32
    51ce:	lsl.w	lr, r2, lr
    51d2:	lsr.w	ip, r2, ip
    51d6:	ldr	r2, [r4, #28]
    51d8:	orr.w	r3, r3, lr
    51dc:	orr.w	r3, r3, ip
    51e0:	add	r3, r2
          if (m_curCluster < lc) {
    51e2:	cmp	r1, r3
    51e4:	bcs.w	5392 <ExFatFile::write(void const*, unsigned int)+0x236>
            m_curCluster++;
    51e8:	adds	r1, #1
    51ea:	str	r1, [r4, #24]
           ((cluster - 2) << m_sectorsPerClusterShift);
    51ec:	ldrb.w	r2, [r0, #1093]	; 0x445
    51f0:	subs	r1, #2
    sector = m_vol->clusterStartSector(m_curCluster) +
    51f2:	ldr.w	r3, [r0, #1068]	; 0x42c
    51f6:	lsls	r1, r2
    51f8:	add	r1, r3
    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
    51fa:	cmp.w	r5, #512	; 0x200
    51fe:	bcc.w	5316 <ExFatFile::write(void const*, unsigned int)+0x1ba>
    } else if (toWrite >= 2 * m_vol->bytesPerSector()) {
    5202:	cmp.w	r5, #1024	; 0x400
    5206:	bcc.w	5356 <ExFatFile::write(void const*, unsigned int)+0x1fa>
  uint32_t sectorsPerCluster() const { return 1UL << m_sectorsPerClusterShift; }
    520a:	movs	r3, #1
    520c:	lsls	r3, r2
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
    520e:	lsrs	r2, r5, #9
                       (clusterOffset >> m_vol->bytesPerSectorShift());
    5210:	sub.w	r3, r3, r8
    5214:	cmp	r3, r2
    5216:	it	cs
    5218:	movcs	r3, r2
    return sector <= m_sector && m_sector < (sector + count);
    521a:	ldr.w	r2, [r0, #536]	; 0x218
    521e:	cmp	r2, r1
      n = ns << m_vol->bytesPerSectorShift();
    5220:	mov.w	r8, r3, lsl #9
    5224:	bcc.n	523a <ExFatFile::write(void const*, unsigned int)+0xde>
    5226:	adds	r7, r3, r1
    5228:	cmp	r2, r7
    522a:	bcs.n	523a <ExFatFile::write(void const*, unsigned int)+0xde>
    m_status = 0;
    522c:	movs	r2, #0
    522e:	strb.w	r2, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    5232:	mov.w	r2, #4294967295
    5236:	str.w	r2, [r0, #536]	; 0x218
    return m_blockDev->writeSectors(sector, src, count);
    523a:	ldr.w	r0, [r0, #532]	; 0x214
    523e:	mov	r2, r6
    5240:	ldr	r7, [r0, #0]
    5242:	ldr	r7, [r7, #36]	; 0x24
    5244:	blx	r7
      if (!m_vol->cacheSafeWrite(sector, src, ns)) {
    5246:	cbz	r0, 52b0 <ExFatFile::write(void const*, unsigned int)+0x154>
    m_curPosition += n;
    5248:	mov	r3, r8
    src += n;
    524a:	add	r6, r8
    toWrite -= n;
    524c:	sub.w	r5, r5, r8
    m_curPosition += n;
    5250:	ldrd	r7, r2, [r4]
    if (m_curPosition > m_validLength) {
    5254:	ldrd	r0, r1, [r4, #16]
    m_curPosition += n;
    5258:	adds	r3, r3, r7
    525a:	adc.w	r2, r2, #0
    if (m_curPosition > m_validLength) {
    525e:	cmp	r0, r3
    5260:	sbcs	r1, r2
    m_curPosition += n;
    5262:	strd	r3, r2, [r4]
    if (m_curPosition > m_validLength) {
    5266:	bcs.n	5278 <ExFatFile::write(void const*, unsigned int)+0x11c>
      m_flags |= FILE_FLAG_DIR_DIRTY;
    5268:	ldrb.w	r1, [r4, #51]	; 0x33
    526c:	orn	r1, r1, #127	; 0x7f
      m_validLength = m_curPosition;
    5270:	strd	r3, r2, [r4, #16]
      m_flags |= FILE_FLAG_DIR_DIRTY;
    5274:	strb.w	r1, [r4, #51]	; 0x33
  while (toWrite) {
    5278:	cmp	r5, #0
    527a:	bne.n	5184 <ExFatFile::write(void const*, unsigned int)+0x28>
  if (m_curPosition > m_dataLength) {
    527c:	ldrd	r0, r1, [r4, #8]
    5280:	cmp	r0, r3
    5282:	sbcs	r1, r2
    5284:	bcc.w	53b4 <ExFatFile::write(void const*, unsigned int)+0x258>
    m_dataLength = m_curPosition;
    // update fileSize and insure sync will update dir entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    5288:	ldr	r3, [pc, #332]	; (53d8 <ExFatFile::write(void const*, unsigned int)+0x27c>)
    528a:	ldr	r3, [r3, #0]
    528c:	cmp	r3, #0
    528e:	beq.w	53cc <ExFatFile::write(void const*, unsigned int)+0x270>
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    5292:	ldrb.w	r3, [r4, #51]	; 0x33
    5296:	mov	r0, r9
    5298:	orn	r3, r3, #127	; 0x7f
    529c:	strb.w	r3, [r4, #51]	; 0x33
    52a0:	b.n	52be <ExFatFile::write(void const*, unsigned int)+0x162>
    if (!seekSet(m_validLength)) {
    52a2:	ldrd	r2, r3, [r0, #16]
    52a6:	bl	3e30 <ExFatFile::seekSet(unsigned long long)>
    52aa:	cmp	r0, #0
    52ac:	bne.w	5178 <ExFatFile::write(void const*, unsigned int)+0x1c>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
    52b0:	ldrb.w	r3, [r4, #50]	; 0x32
  return 0;
    52b4:	movs	r0, #0
  m_error |= WRITE_ERROR;
    52b6:	orr.w	r3, r3, #1
    52ba:	strb.w	r3, [r4, #50]	; 0x32
}
    52be:	add	sp, #12
    52c0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
           ((cluster - 2) << m_sectorsPerClusterShift);
    52c4:	ldrb.w	r2, [r0, #1093]	; 0x445
    52c8:	subs	r1, #2
             (clusterOffset >> m_vol->bytesPerSectorShift());
    52ca:	mov.w	r8, r8, lsr #9
    sector = m_vol->clusterStartSector(m_curCluster) +
    52ce:	ldr.w	r3, [r0, #1068]	; 0x42c
    52d2:	lsls	r1, r2
    52d4:	add	r1, r8
    52d6:	add	r1, r3
    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
    52d8:	cmp	r7, #0
    52da:	beq.n	51fa <ExFatFile::write(void const*, unsigned int)+0x9e>
      n = m_vol->bytesPerSector() - sectorOffset;
    52dc:	rsb	r8, r7, #512	; 0x200
    return m_dataCache.prepare(sector, option);
    52e0:	movs	r2, #1
    52e2:	add.w	r0, r0, #528	; 0x210
    52e6:	cmp	r8, r5
    52e8:	it	cs
    52ea:	movcs	r8, r5
    52ec:	bl	31cc <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    52f0:	cmp	r0, #0
    52f2:	beq.n	52b0 <ExFatFile::write(void const*, unsigned int)+0x154>
      memcpy(dst, src, n);
    52f4:	add	r0, r7
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    52f6:	add	r7, r8
      memcpy(dst, src, n);
    52f8:	mov	r2, r8
    52fa:	mov	r1, r6
    52fc:	bl	a0c4 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    5300:	cmp.w	r7, #512	; 0x200
    5304:	ldr	r0, [r4, #32]
    5306:	bne.n	5248 <ExFatFile::write(void const*, unsigned int)+0xec>
  bool dataCacheSync() { return m_dataCache.sync(); }
    5308:	add.w	r0, r0, #528	; 0x210
    530c:	bl	3174 <FsCache::sync()>
        if (!m_vol->dataCacheSync()) {
    5310:	cmp	r0, #0
    5312:	bne.n	5248 <ExFatFile::write(void const*, unsigned int)+0xec>
    5314:	b.n	52b0 <ExFatFile::write(void const*, unsigned int)+0x154>
      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
    5316:	ldr	r2, [r4, #4]
    5318:	ldr	r3, [r4, #20]
    531a:	str	r2, [sp, #0]
    531c:	str	r3, [sp, #4]
    531e:	ldr	r2, [r4, #16]
    5320:	ldr	r3, [r4, #0]
    5322:	cmp	r3, r2
    5324:	ldrd	r2, r3, [sp]
    5328:	sbcs	r2, r3
    532a:	bcs.n	5352 <ExFatFile::write(void const*, unsigned int)+0x1f6>
        cacheOption = FsCache::CACHE_FOR_WRITE;
    532c:	movs	r2, #1
    return m_dataCache.prepare(sector, option);
    532e:	add.w	r0, r0, #528	; 0x210
    5332:	bl	31cc <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    5336:	cmp	r0, #0
    5338:	beq.n	52b0 <ExFatFile::write(void const*, unsigned int)+0x154>
      memcpy(dst, src, n);
    533a:	mov	r2, r5
    533c:	mov	r1, r6
    533e:	add	r0, r7
    m_curPosition += n;
    5340:	mov	r8, r5
      memcpy(dst, src, n);
    5342:	bl	a0c4 <memcpy>
    m_curPosition += n;
    5346:	mov	r3, r5
    5348:	b.n	524a <ExFatFile::write(void const*, unsigned int)+0xee>
        if (m_firstCluster == 0) {
    534a:	ldr	r1, [r4, #28]
    534c:	cbz	r1, 53a2 <ExFatFile::write(void const*, unsigned int)+0x246>
          m_curCluster = m_firstCluster;
    534e:	str	r1, [r4, #24]
    5350:	b.n	51ec <ExFatFile::write(void const*, unsigned int)+0x90>
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    5352:	movs	r2, #5
    5354:	b.n	532e <ExFatFile::write(void const*, unsigned int)+0x1d2>
    if (isCached(sector)) {
    5356:	ldr.w	r3, [r0, #536]	; 0x218
    535a:	cmp	r3, r1
    535c:	bne.n	536c <ExFatFile::write(void const*, unsigned int)+0x210>
    m_status = 0;
    535e:	movs	r3, #0
    5360:	strb.w	r3, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    5364:	mov.w	r3, #4294967295
    5368:	str.w	r3, [r0, #536]	; 0x218
    return m_blockDev->writeSector(sector, src);
    536c:	ldr.w	r0, [r0, #532]	; 0x214
    5370:	mov	r2, r6
    5372:	ldr	r3, [r0, #0]
    5374:	ldr	r3, [r3, #32]
    5376:	blx	r3
      if (!m_vol->cacheSafeWrite(sector, src)) {
    5378:	cmp	r0, #0
    537a:	beq.n	52b0 <ExFatFile::write(void const*, unsigned int)+0x154>
    537c:	mov.w	r3, #512	; 0x200
      n = m_vol->bytesPerSector();
    5380:	mov	r8, r3
    5382:	b.n	524a <ExFatFile::write(void const*, unsigned int)+0xee>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    5384:	add.w	r2, r4, #24
    5388:	bl	4680 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    538c:	cmp	r0, #0
    538e:	blt.n	52b0 <ExFatFile::write(void const*, unsigned int)+0x154>
        if (fg == 0) {
    5390:	bne.n	539c <ExFatFile::write(void const*, unsigned int)+0x240>
          if (!addCluster()) {
    5392:	mov	r0, r4
    5394:	bl	4938 <ExFatFile::addCluster()>
    5398:	cmp	r0, #0
    539a:	beq.n	52b0 <ExFatFile::write(void const*, unsigned int)+0x154>
    sector = m_vol->clusterStartSector(m_curCluster) +
    539c:	ldr	r1, [r4, #24]
    539e:	ldr	r0, [r4, #32]
    53a0:	b.n	51ec <ExFatFile::write(void const*, unsigned int)+0x90>
          if (!addCluster()) {
    53a2:	mov	r0, r4
    53a4:	bl	4938 <ExFatFile::addCluster()>
    53a8:	cmp	r0, #0
    53aa:	beq.n	52b0 <ExFatFile::write(void const*, unsigned int)+0x154>
          m_firstCluster = m_curCluster;
    53ac:	ldr	r1, [r4, #24]
    sector = m_vol->clusterStartSector(m_curCluster) +
    53ae:	ldr	r0, [r4, #32]
          m_firstCluster = m_curCluster;
    53b0:	str	r1, [r4, #28]
    53b2:	b.n	51ec <ExFatFile::write(void const*, unsigned int)+0x90>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    53b4:	ldrb.w	r1, [r4, #51]	; 0x33
    53b8:	mov	r0, r9
    m_dataLength = m_curPosition;
    53ba:	strd	r3, r2, [r4, #8]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    53be:	orn	r3, r1, #127	; 0x7f
    53c2:	strb.w	r3, [r4, #51]	; 0x33
}
    53c6:	add	sp, #12
    53c8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    53cc:	mov	r0, r9
    53ce:	b.n	52be <ExFatFile::write(void const*, unsigned int)+0x162>
  if (m_curPosition > m_dataLength) {
    53d0:	ldrd	r3, r2, [r4]
    53d4:	b.n	527c <ExFatFile::write(void const*, unsigned int)+0x120>
    53d6:	nop
    53d8:	.word	0x20006404

000053dc <FatFormatter::initFatDir(unsigned char, unsigned long)>:
    writeMsg("Format Failed\r\n");
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool FatFormatter::initFatDir(uint8_t fatType, uint32_t sectorCount) {
    53dc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    53e0:	mov	r5, r0
    53e2:	mov	r9, r1
    53e4:	mov	r7, r2
  size_t n;
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
    53e6:	movs	r1, #0
    53e8:	mov.w	r2, #512	; 0x200
    53ec:	ldr	r0, [r0, #36]	; 0x24
    53ee:	bl	e064 <memset>
  writeMsg("Writing FAT ");
    53f2:	ldr	r0, [r5, #32]
    53f4:	cmp	r0, #0
    53f6:	beq.n	549c <FatFormatter::initFatDir(unsigned char, unsigned long)+0xc0>
    53f8:	ldr	r3, [r0, #0]
    53fa:	movs	r2, #12
    53fc:	ldr	r1, [pc, #164]	; (54a4 <FatFormatter::initFatDir(unsigned char, unsigned long)+0xc8>)
    53fe:	ldr	r3, [r3, #4]
    5400:	blx	r3
  for (uint32_t i = 1; i < sectorCount; i++) {
    5402:	cmp	r7, #1
    5404:	bls.n	5448 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x6c>
    if (!m_dev->writeSector(m_fatStart + i, m_secBuf)) {
      return false;
    }
    if ((i % (sectorCount / 32)) == 0) {
    5406:	lsrs	r6, r7, #5
    5408:	movs	r4, #1
    540a:	ldr.w	r8, [pc, #160]	; 54ac <FatFormatter::initFatDir(unsigned char, unsigned long)+0xd0>
    540e:	b.n	5430 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x54>
    5410:	udiv	r3, r4, r6
    5414:	mls	r3, r6, r3, r4
  for (uint32_t i = 1; i < sectorCount; i++) {
    5418:	adds	r4, #1
    if ((i % (sectorCount / 32)) == 0) {
    541a:	cbnz	r3, 542c <FatFormatter::initFatDir(unsigned char, unsigned long)+0x50>
      writeMsg(".");
    541c:	ldr	r3, [r5, #32]
    541e:	movs	r2, #1
    5420:	mov	r1, r8
    5422:	mov	r0, r3
    5424:	cbz	r3, 542c <FatFormatter::initFatDir(unsigned char, unsigned long)+0x50>
    5426:	ldr	r3, [r3, #0]
    5428:	ldr	r3, [r3, #4]
    542a:	blx	r3
  for (uint32_t i = 1; i < sectorCount; i++) {
    542c:	cmp	r7, r4
    542e:	bls.n	5448 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x6c>
    if (!m_dev->writeSector(m_fatStart + i, m_secBuf)) {
    5430:	ldr	r0, [r5, #28]
    5432:	ldr	r1, [r5, #12]
    5434:	ldr	r3, [r0, #0]
    5436:	ldr	r2, [r5, #36]	; 0x24
    5438:	add	r1, r4
    543a:	ldr	r3, [r3, #32]
    543c:	blx	r3
    543e:	cmp	r0, #0
    5440:	bne.n	5410 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x34>
  for (size_t i = 1; i < n; i++) {
    m_secBuf[i] = 0XFF;
  }
  return m_dev->writeSector(m_fatStart, m_secBuf) &&
         m_dev->writeSector(m_fatStart + m_fatSize, m_secBuf);
}
    5442:	movs	r0, #0
    5444:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  writeMsg("\r\n");
    5448:	ldr	r0, [r5, #32]
    544a:	cbz	r0, 5456 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x7a>
    544c:	ldr	r3, [r0, #0]
    544e:	movs	r2, #2
    5450:	ldr	r1, [pc, #84]	; (54a8 <FatFormatter::initFatDir(unsigned char, unsigned long)+0xcc>)
    5452:	ldr	r3, [r3, #4]
    5454:	blx	r3
  n = fatType == 16 ? 4 : 12;
    5456:	cmp.w	r9, #16
  m_secBuf[0] = 0XF8;
    545a:	mov.w	r1, #248	; 0xf8
    545e:	ldr	r2, [r5, #36]	; 0x24
  for (size_t i = 1; i < n; i++) {
    5460:	mov.w	r3, #1
  n = fatType == 16 ? 4 : 12;
    5464:	ite	eq
    5466:	moveq	r0, #4
    5468:	movne	r0, #12
  m_secBuf[0] = 0XF8;
    546a:	strb	r1, [r2, #0]
    m_secBuf[i] = 0XFF;
    546c:	movs	r1, #255	; 0xff
    546e:	ldr	r2, [r5, #36]	; 0x24
    5470:	strb	r1, [r2, r3]
  for (size_t i = 1; i < n; i++) {
    5472:	adds	r3, #1
    5474:	cmp	r0, r3
    5476:	bne.n	546e <FatFormatter::initFatDir(unsigned char, unsigned long)+0x92>
  return m_dev->writeSector(m_fatStart, m_secBuf) &&
    5478:	ldr	r0, [r5, #28]
    547a:	ldr	r2, [r5, #36]	; 0x24
    547c:	ldr	r3, [r0, #0]
    547e:	ldr	r1, [r5, #12]
    5480:	ldr	r3, [r3, #32]
    5482:	blx	r3
    5484:	cmp	r0, #0
    5486:	beq.n	5442 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x66>
         m_dev->writeSector(m_fatStart + m_fatSize, m_secBuf);
    5488:	ldr	r0, [r5, #28]
    548a:	ldr	r2, [r5, #36]	; 0x24
    548c:	ldrd	r3, r1, [r5, #8]
}
    5490:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
         m_dev->writeSector(m_fatStart + m_fatSize, m_secBuf);
    5494:	add	r1, r3
    5496:	ldr	r3, [r0, #0]
    5498:	ldr	r3, [r3, #32]
    549a:	bx	r3
  for (uint32_t i = 1; i < sectorCount; i++) {
    549c:	cmp	r7, #1
    549e:	bhi.n	5406 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x2a>
    54a0:	b.n	5456 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x7a>
    54a2:	nop
    54a4:	.word	0x200007e0
    54a8:	.word	0x20000808
    54ac:	.word	0x200007f0

000054b0 <FatFormatter::initPbs()>:
//------------------------------------------------------------------------------
void FatFormatter::initPbs() {
    54b0:	push	{r3, r4, r5, lr}
  PbsFat_t* pbs = reinterpret_cast<PbsFat_t*>(m_secBuf);
    54b2:	ldr	r3, [r0, #36]	; 0x24
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
    54b4:	mov.w	r5, #512	; 0x200
void FatFormatter::initPbs() {
    54b8:	mov	r4, r0
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
    54ba:	movs	r1, #0
    54bc:	mov	r2, r5
    54be:	mov	r0, r3
    54c0:	bl	e064 <memset>
  pbs->jmpInstruction[0] = 0XEB;
  pbs->jmpInstruction[1] = 0X76;
  pbs->jmpInstruction[2] = 0X90;
  for (uint8_t i = 0; i < sizeof(pbs->oemName); i++) {
    pbs->oemName[i] = ' ';
    54c4:	mov.w	r1, #538976288	; 0x20202020
  pbs->jmpInstruction[0] = 0XEB;
    54c8:	movs	r2, #235	; 0xeb
  *reinterpret_cast<uint16_t*>(dst) = src;
    54ca:	strh.w	r5, [r0, #11]
    pbs->oemName[i] = ' ';
    54ce:	str.w	r1, [r0, #3]
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
    54d2:	mov	r3, r0
    pbs->oemName[i] = ' ';
    54d4:	str.w	r1, [r0, #7]
  pbs->jmpInstruction[2] = 0X90;
    54d8:	movs	r1, #144	; 0x90
  pbs->jmpInstruction[0] = 0XEB;
    54da:	strb	r2, [r0, #0]
  pbs->jmpInstruction[1] = 0X76;
    54dc:	movs	r0, #118	; 0x76
  pbs->jmpInstruction[2] = 0X90;
    54de:	strb	r1, [r3, #2]
  }
  setLe16(pbs->bpb.bpb16.bytesPerSector, BYTES_PER_SECTOR);
  pbs->bpb.bpb16.sectorsPerCluster = m_sectorsPerCluster;
  setLe16(pbs->bpb.bpb16.reservedSectorCount, m_reservedSectorCount);
  pbs->bpb.bpb16.fatCount = 2;
    54e0:	movs	r2, #2
  pbs->jmpInstruction[1] = 0X76;
    54e2:	strb	r0, [r3, #1]
  pbs->bpb.bpb16.sectorsPerCluster = m_sectorsPerCluster;
    54e4:	ldrb.w	r1, [r4, #43]	; 0x2b
    54e8:	strb	r1, [r3, #13]
    54ea:	movw	r1, #43605	; 0xaa55
  setLe16(pbs->bpb.bpb16.reservedSectorCount, m_reservedSectorCount);
    54ee:	ldrh	r0, [r4, #40]	; 0x28
  pbs->bpb.bpb16.fatCount = 2;
    54f0:	strb	r2, [r3, #16]
  // skip rootDirEntryCount
  // skip totalSectors16
  pbs->bpb.bpb16.mediaType = 0XF8;
    54f2:	movs	r2, #248	; 0xf8
    54f4:	strh	r0, [r3, #14]
    54f6:	strb	r2, [r3, #21]
  // skip sectorsPerFat16
  // skip sectorsPerTrack
  // skip headCount
  setLe32(pbs->bpb.bpb16.hidddenSectors, m_relativeSectors);
    54f8:	ldr	r2, [r4, #16]
  *reinterpret_cast<uint32_t*>(dst) = src;
    54fa:	str	r2, [r3, #28]
  setLe32(pbs->bpb.bpb16.totalSectors32, m_totalSectors);
    54fc:	ldr	r2, [r4, #24]
  *reinterpret_cast<uint16_t*>(dst) = src;
    54fe:	strh.w	r1, [r3, #510]	; 0x1fe
  *reinterpret_cast<uint32_t*>(dst) = src;
    5502:	str	r2, [r3, #32]
  // skip rest of bpb
  setLe16(pbs->signature, PBR_SIGNATURE);
}
    5504:	pop	{r3, r4, r5, pc}
    5506:	nop

00005508 <FatFormatter::writeMbr()>:
    return false;
  }
  return initFatDir(32, 2 * m_fatSize + m_sectorsPerCluster);
}
//------------------------------------------------------------------------------
bool FatFormatter::writeMbr() {
    5508:	push	{r4, r5, r6, lr}
    550a:	mov	r4, r0
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
    550c:	mov.w	r2, #512	; 0x200
    5510:	movs	r1, #0
    5512:	ldr	r0, [r0, #36]	; 0x24
    5514:	bl	e064 <memset>
  MbrSector_t* mbr = reinterpret_cast<MbrSector_t*>(m_secBuf);
    5518:	ldr	r5, [r4, #36]	; 0x24

#if USE_LBA_TO_CHS
  lbaToMbrChs(mbr->part->beginCHS, m_capacityMB, m_relativeSectors);
    551a:	ldr	r2, [r4, #16]
    551c:	ldr	r1, [r4, #0]
    551e:	addw	r0, r5, #447	; 0x1bf
    5522:	bl	30d4 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)>
  lbaToMbrChs(mbr->part->endCHS, m_capacityMB,
              m_relativeSectors + m_totalSectors - 1);
    5526:	ldr	r3, [r4, #24]
    5528:	ldr	r2, [r4, #16]
  lbaToMbrChs(mbr->part->endCHS, m_capacityMB,
    552a:	addw	r0, r5, #451	; 0x1c3
    552e:	ldr	r1, [r4, #0]
              m_relativeSectors + m_totalSectors - 1);
    5530:	add	r2, r3
  lbaToMbrChs(mbr->part->endCHS, m_capacityMB,
    5532:	subs	r2, #1
    5534:	bl	30d4 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)>
  mbr->part->endCHS[0] = 0XFE;
  mbr->part->endCHS[1] = 0XFF;
  mbr->part->endCHS[2] = 0XFF;
#endif  // USE_LBA_TO_CHS

  mbr->part->type = m_partType;
    5538:	ldrb.w	r2, [r4, #42]	; 0x2a
  *reinterpret_cast<uint16_t*>(dst) = src;
    553c:	movw	r3, #43605	; 0xaa55
    5540:	strb.w	r2, [r5, #450]	; 0x1c2
  setLe32(mbr->part->relativeSectors, m_relativeSectors);
    5544:	ldr	r2, [r4, #16]
  setLe32(mbr->part->totalSectors, m_totalSectors);
  setLe16(mbr->signature, MBR_SIGNATURE);
  return m_dev->writeSector(0, m_secBuf);
    5546:	ldr	r0, [r4, #28]
  *reinterpret_cast<uint32_t*>(dst) = src;
    5548:	str.w	r2, [r5, #454]	; 0x1c6
    554c:	ldr	r2, [r4, #36]	; 0x24
  setLe32(mbr->part->totalSectors, m_totalSectors);
    554e:	ldr	r1, [r4, #24]
  *reinterpret_cast<uint16_t*>(dst) = src;
    5550:	strh.w	r3, [r5, #510]	; 0x1fe
  return m_dev->writeSector(0, m_secBuf);
    5554:	ldr	r3, [r0, #0]
  *reinterpret_cast<uint32_t*>(dst) = src;
    5556:	str.w	r1, [r5, #458]	; 0x1ca
    555a:	movs	r1, #0
    555c:	ldr	r3, [r3, #32]
}
    555e:	ldmia.w	sp!, {r4, r5, r6, lr}
  return m_dev->writeSector(0, m_secBuf);
    5562:	bx	r3

00005564 <FatFormatter::makeFat16()>:
bool FatFormatter::makeFat16() {
    5564:	push	{r4, r5, r6, lr}
    nc = (m_sectorCount - m_dataStart) / m_sectorsPerCluster;
    5566:	ldr	r6, [r0, #20]
  for (m_dataStart = 2 * BU16;; m_dataStart += BU16) {
    5568:	mov.w	r3, #256	; 0x100
    nc = (m_sectorCount - m_dataStart) / m_sectorsPerCluster;
    556c:	ldrb.w	lr, [r0, #43]	; 0x2b
bool FatFormatter::makeFat16() {
    5570:	mov	r4, r0
    nc = (m_sectorCount - m_dataStart) / m_sectorsPerCluster;
    5572:	sub.w	r2, r6, #256	; 0x100
  PbsFat_t* pbs = reinterpret_cast<PbsFat_t*>(m_secBuf);
    5576:	ldr	r5, [r0, #36]	; 0x24
  for (m_dataStart = 2 * BU16;; m_dataStart += BU16) {
    5578:	str	r3, [r0, #4]
    nc = (m_sectorCount - m_dataStart) / m_sectorsPerCluster;
    557a:	udiv	r2, r2, lr
    m_fatSize = (nc + 2 + (BYTES_PER_SECTOR / 2) - 1) / (BYTES_PER_SECTOR / 2);
    557e:	addw	ip, r2, #257	; 0x101
    5582:	mov.w	r1, ip, lsr #8
    uint32_t r = BU16 + 1 + 2 * m_fatSize + FAT16_ROOT_SECTOR_COUNT;
    5586:	mov.w	ip, r1, lsl #1
    m_fatSize = (nc + 2 + (BYTES_PER_SECTOR / 2) - 1) / (BYTES_PER_SECTOR / 2);
    558a:	str	r1, [r0, #8]
    uint32_t r = BU16 + 1 + 2 * m_fatSize + FAT16_ROOT_SECTOR_COUNT;
    558c:	add.w	r0, ip, #161	; 0xa1
    if (m_dataStart >= r) {
    5590:	cmp	r0, r3
    5592:	bls.n	55b2 <FatFormatter::makeFat16()+0x4e>
  for (m_dataStart = 2 * BU16;; m_dataStart += BU16) {
    5594:	adds	r3, #128	; 0x80
    nc = (m_sectorCount - m_dataStart) / m_sectorsPerCluster;
    5596:	subs	r2, r6, r3
    5598:	udiv	r2, r2, lr
    m_fatSize = (nc + 2 + (BYTES_PER_SECTOR / 2) - 1) / (BYTES_PER_SECTOR / 2);
    559c:	addw	r1, r2, #257	; 0x101
    55a0:	lsrs	r1, r1, #8
    uint32_t r = BU16 + 1 + 2 * m_fatSize + FAT16_ROOT_SECTOR_COUNT;
    55a2:	mov.w	ip, r1, lsl #1
    55a6:	add.w	r0, ip, #161	; 0xa1
    if (m_dataStart >= r) {
    55aa:	cmp	r3, r0
    55ac:	bcc.n	5594 <FatFormatter::makeFat16()+0x30>
    55ae:	strd	r3, r1, [r4, #4]
      m_relativeSectors = m_dataStart - r + BU16;
    55b2:	subs	r3, r3, r0
  if (nc < 4085 || nc >= 65525) {
    55b4:	subw	r1, r2, #4085	; 0xff5
      m_relativeSectors = m_dataStart - r + BU16;
    55b8:	add.w	r0, r3, #128	; 0x80
  if (nc < 4085 || nc >= 65525) {
    55bc:	cmp.w	r1, #61440	; 0xf000
      m_relativeSectors = m_dataStart - r + BU16;
    55c0:	str	r0, [r4, #16]
  if (nc < 4085 || nc >= 65525) {
    55c2:	bcs.n	5664 <FatFormatter::makeFat16()+0x100>
      nc * m_sectorsPerCluster + 2 * m_fatSize + m_reservedSectorCount + 32;
    55c4:	add.w	ip, ip, #33	; 0x21
  m_fatStart = m_relativeSectors + m_reservedSectorCount;
    55c8:	adds	r3, #129	; 0x81
  if (!writeMbr()) {
    55ca:	mov	r0, r4
      nc * m_sectorsPerCluster + 2 * m_fatSize + m_reservedSectorCount + 32;
    55cc:	mla	r2, r2, lr, ip
  m_fatStart = m_relativeSectors + m_reservedSectorCount;
    55d0:	str	r3, [r4, #12]
    m_partType = 0X06;
    55d2:	cmp.w	r2, #65536	; 0x10000
  m_totalSectors =
    55d6:	str	r2, [r4, #24]
    m_partType = 0X06;
    55d8:	ite	cc
    55da:	movcc	r3, #4
    55dc:	movcs	r3, #6
    55de:	strb.w	r3, [r4, #42]	; 0x2a
  m_reservedSectorCount = 1;
    55e2:	movs	r3, #1
    55e4:	strh	r3, [r4, #40]	; 0x28
  if (!writeMbr()) {
    55e6:	bl	5508 <FatFormatter::writeMbr()>
    55ea:	cbnz	r0, 55f0 <FatFormatter::makeFat16()+0x8c>
}
    55ec:	movs	r0, #0
    55ee:	pop	{r4, r5, r6, pc}
  initPbs();
    55f0:	mov	r0, r4
    55f2:	bl	54b0 <FatFormatter::initPbs()>
  pbs->bpb.bpb16.extSignature = EXTENDED_BOOT_SIGNATURE;
    55f6:	movs	r2, #41	; 0x29
  setLe16(pbs->bpb.bpb16.sectorsPerFat16, m_fatSize);
    55f8:	ldr	r1, [r4, #8]
    pbs->bpb.bpb16.volumeLabel[i] = ' ';
    55fa:	mov.w	r3, #538976288	; 0x20202020
  pbs->bpb.bpb16.extSignature = EXTENDED_BOOT_SIGNATURE;
    55fe:	strb.w	r2, [r5, #38]	; 0x26
  pbs->bpb.bpb16.volumeType[0] = 'F';
    5602:	movs	r2, #70	; 0x46
    pbs->bpb.bpb16.volumeLabel[i] = ' ';
    5604:	str.w	r3, [r5, #47]	; 0x2f
  pbs->bpb.bpb16.physicalDriveNumber = 0X80;
    5608:	movs	r0, #128	; 0x80
  pbs->bpb.bpb16.volumeType[0] = 'F';
    560a:	strb.w	r2, [r5, #54]	; 0x36
  pbs->bpb.bpb16.volumeType[2] = 'T';
    560e:	movs	r2, #84	; 0x54
    pbs->bpb.bpb16.volumeLabel[i] = ' ';
    5610:	str.w	r3, [r5, #43]	; 0x2b
    5614:	str.w	r3, [r5, #50]	; 0x32
  pbs->bpb.bpb16.volumeType[3] = '1';
    5618:	movs	r3, #49	; 0x31
  pbs->bpb.bpb16.volumeType[2] = 'T';
    561a:	strb.w	r2, [r5, #56]	; 0x38
  pbs->bpb.bpb16.volumeType[4] = '6';
    561e:	movs	r2, #54	; 0x36
  setLe16(pbs->bpb.bpb16.sectorsPerFat16, m_fatSize);
    5620:	strh	r1, [r5, #22]
  pbs->bpb.bpb16.volumeType[1] = 'A';
    5622:	movs	r1, #65	; 0x41
  pbs->bpb.bpb16.volumeType[3] = '1';
    5624:	strb.w	r3, [r5, #57]	; 0x39
  pbs->bpb.bpb16.volumeType[1] = 'A';
    5628:	strb.w	r1, [r5, #55]	; 0x37
  *reinterpret_cast<uint16_t*>(dst) = src;
    562c:	mov.w	r1, #512	; 0x200
  pbs->bpb.bpb16.physicalDriveNumber = 0X80;
    5630:	strb.w	r0, [r5, #36]	; 0x24
  pbs->bpb.bpb16.volumeType[4] = '6';
    5634:	strb.w	r2, [r5, #58]	; 0x3a
  *reinterpret_cast<uint32_t*>(dst) = src;
    5638:	ldr	r3, [pc, #60]	; (5678 <FatFormatter::makeFat16()+0x114>)
  if (!m_dev->writeSector(m_relativeSectors, m_secBuf)) {
    563a:	ldr	r0, [r4, #28]
    563c:	str.w	r3, [r5, #39]	; 0x27
    5640:	ldr	r3, [r0, #0]
  *reinterpret_cast<uint16_t*>(dst) = src;
    5642:	strh.w	r1, [r5, #17]
    5646:	ldr	r2, [r4, #36]	; 0x24
    5648:	ldr	r1, [r4, #16]
    564a:	ldr	r3, [r3, #32]
    564c:	blx	r3
    564e:	cmp	r0, #0
    5650:	beq.n	55ec <FatFormatter::makeFat16()+0x88>
  return initFatDir(16, m_dataStart - m_fatStart);
    5652:	ldr	r2, [r4, #4]
    5654:	mov	r0, r4
    5656:	ldr	r3, [r4, #12]
    5658:	movs	r1, #16
    565a:	subs	r2, r2, r3
}
    565c:	ldmia.w	sp!, {r4, r5, r6, lr}
  return initFatDir(16, m_dataStart - m_fatStart);
    5660:	b.w	53dc <FatFormatter::initFatDir(unsigned char, unsigned long)>
    writeMsg("Bad cluster count\r\n");
    5664:	ldr	r0, [r4, #32]
    5666:	cmp	r0, #0
    5668:	beq.n	55ec <FatFormatter::makeFat16()+0x88>
    566a:	ldr	r3, [r0, #0]
    566c:	movs	r2, #19
    566e:	ldr	r1, [pc, #12]	; (567c <FatFormatter::makeFat16()+0x118>)
    5670:	ldr	r3, [r3, #4]
    5672:	blx	r3
}
    5674:	movs	r0, #0
    5676:	pop	{r4, r5, r6, pc}
    5678:	.word	0x0012d687
    567c:	.word	0x200007b4

00005680 <FatFormatter::makeFat32()>:
bool FatFormatter::makeFat32() {
    5680:	push	{r3, r4, r5, r6, r7, lr}
    nc = (m_sectorCount - m_dataStart) / m_sectorsPerCluster;
    5682:	ldr	r6, [r0, #20]
  m_relativeSectors = BU32;
    5684:	mov.w	r3, #8192	; 0x2000
    nc = (m_sectorCount - m_dataStart) / m_sectorsPerCluster;
    5688:	ldrb.w	ip, [r0, #43]	; 0x2b
  for (m_dataStart = 2 * BU32;; m_dataStart += BU32) {
    568c:	mov.w	r2, #16384	; 0x4000
    nc = (m_sectorCount - m_dataStart) / m_sectorsPerCluster;
    5690:	sub.w	r1, r6, #16384	; 0x4000
  m_relativeSectors = BU32;
    5694:	str	r3, [r0, #16]
    uint32_t r = m_relativeSectors + 9 + 2 * m_fatSize;
    5696:	movw	lr, #8201	; 0x2009
bool FatFormatter::makeFat32() {
    569a:	mov	r4, r0
  PbsFat_t* pbs = reinterpret_cast<PbsFat_t*>(m_secBuf);
    569c:	ldr	r5, [r0, #36]	; 0x24
  for (m_dataStart = 2 * BU32;; m_dataStart += BU32) {
    569e:	str	r2, [r0, #4]
    nc = (m_sectorCount - m_dataStart) / m_sectorsPerCluster;
    56a0:	udiv	r1, r1, ip
    m_fatSize = (nc + 2 + (BYTES_PER_SECTOR / 4) - 1) / (BYTES_PER_SECTOR / 4);
    56a4:	add.w	r3, r1, #129	; 0x81
    56a8:	lsrs	r3, r3, #7
    56aa:	str	r3, [r0, #8]
    uint32_t r = m_relativeSectors + 9 + 2 * m_fatSize;
    56ac:	add.w	r0, lr, r3, lsl #1
    if (m_dataStart >= r) {
    56b0:	cmp	r0, r2
    56b2:	bls.w	5822 <FatFormatter::makeFat32()+0x1a2>
  for (m_dataStart = 2 * BU32;; m_dataStart += BU32) {
    56b6:	add.w	r2, r2, #8192	; 0x2000
    nc = (m_sectorCount - m_dataStart) / m_sectorsPerCluster;
    56ba:	subs	r1, r6, r2
    56bc:	udiv	r1, r1, ip
    m_fatSize = (nc + 2 + (BYTES_PER_SECTOR / 4) - 1) / (BYTES_PER_SECTOR / 4);
    56c0:	add.w	r3, r1, #129	; 0x81
    56c4:	lsrs	r3, r3, #7
    uint32_t r = m_relativeSectors + 9 + 2 * m_fatSize;
    56c6:	add.w	r0, lr, r3, lsl #1
    56ca:	lsls	r7, r3, #1
    if (m_dataStart >= r) {
    56cc:	cmp	r2, r0
    56ce:	bcc.n	56b6 <FatFormatter::makeFat32()+0x36>
    56d0:	strd	r2, r3, [r4, #4]
  if (nc < 65525) {
    56d4:	movw	r3, #65524	; 0xfff4
    56d8:	cmp	r1, r3
    56da:	bls.w	580c <FatFormatter::makeFat32()+0x18c>
  m_totalSectors = nc * m_sectorsPerCluster + m_dataStart - m_relativeSectors;
    56de:	mla	ip, r1, ip, r2
  m_reservedSectorCount = m_dataStart - m_relativeSectors - 2 * m_fatSize;
    56e2:	sub.w	r2, r2, #8192	; 0x2000
  if (!writeMbr()) {
    56e6:	mov	r0, r4
  m_reservedSectorCount = m_dataStart - m_relativeSectors - 2 * m_fatSize;
    56e8:	subs	r2, r2, r7
    56ea:	uxth	r2, r2
  m_fatStart = m_relativeSectors + m_reservedSectorCount;
    56ec:	add.w	r3, r2, #8192	; 0x2000
  m_reservedSectorCount = m_dataStart - m_relativeSectors - 2 * m_fatSize;
    56f0:	strh	r2, [r4, #40]	; 0x28
  if ((m_relativeSectors + m_totalSectors) <= 16450560) {
    56f2:	ldr	r2, [pc, #308]	; (5828 <FatFormatter::makeFat32()+0x1a8>)
  m_fatStart = m_relativeSectors + m_reservedSectorCount;
    56f4:	str	r3, [r4, #12]
  m_totalSectors = nc * m_sectorsPerCluster + m_dataStart - m_relativeSectors;
    56f6:	sub.w	r3, ip, #8192	; 0x2000
    m_partType = 0X0C;
    56fa:	cmp	ip, r2
    56fc:	ite	ls
    56fe:	movls.w	ip, #11
    5702:	movhi.w	ip, #12
  m_totalSectors = nc * m_sectorsPerCluster + m_dataStart - m_relativeSectors;
    5706:	str	r3, [r4, #24]
  if ((m_relativeSectors + m_totalSectors) <= 16450560) {
    5708:	strb.w	ip, [r4, #42]	; 0x2a
  if (!writeMbr()) {
    570c:	bl	5508 <FatFormatter::writeMbr()>
    5710:	cbnz	r0, 5716 <FatFormatter::makeFat32()+0x96>
}
    5712:	movs	r0, #0
    5714:	pop	{r3, r4, r5, r6, r7, pc}
  initPbs();
    5716:	mov	r0, r4
    5718:	bl	54b0 <FatFormatter::initPbs()>
  setLe32(pbs->bpb.bpb32.sectorsPerFat32, m_fatSize);
    571c:	ldr	r1, [r4, #8]
  pbs->bpb.bpb32.extSignature = EXTENDED_BOOT_SIGNATURE;
    571e:	movs	r2, #41	; 0x29
    pbs->bpb.bpb32.volumeLabel[i] = ' ';
    5720:	mov.w	r3, #538976288	; 0x20202020
  pbs->bpb.bpb32.physicalDriveNumber = 0X80;
    5724:	movs	r0, #128	; 0x80
  *reinterpret_cast<uint32_t*>(dst) = src;
    5726:	str	r1, [r5, #36]	; 0x24
  pbs->bpb.bpb32.extSignature = EXTENDED_BOOT_SIGNATURE;
    5728:	strb.w	r2, [r5, #66]	; 0x42
  pbs->bpb.bpb32.volumeType[2] = 'T';
    572c:	movs	r1, #84	; 0x54
  pbs->bpb.bpb32.volumeType[0] = 'F';
    572e:	movs	r2, #70	; 0x46
    pbs->bpb.bpb32.volumeLabel[i] = ' ';
    5730:	str.w	r3, [r5, #75]	; 0x4b
  pbs->bpb.bpb32.physicalDriveNumber = 0X80;
    5734:	strb.w	r0, [r5, #64]	; 0x40
  pbs->bpb.bpb32.volumeType[1] = 'A';
    5738:	movs	r0, #65	; 0x41
    pbs->bpb.bpb32.volumeLabel[i] = ' ';
    573a:	str.w	r3, [r5, #71]	; 0x47
    573e:	str.w	r3, [r5, #78]	; 0x4e
    5742:	movs	r3, #2
  pbs->bpb.bpb32.volumeType[0] = 'F';
    5744:	strb.w	r2, [r5, #82]	; 0x52
  pbs->bpb.bpb32.volumeType[3] = '3';
    5748:	movs	r2, #51	; 0x33
  pbs->bpb.bpb32.volumeType[2] = 'T';
    574a:	strb.w	r1, [r5, #84]	; 0x54
  pbs->bpb.bpb32.volumeType[4] = '2';
    574e:	movs	r1, #50	; 0x32
  pbs->bpb.bpb32.volumeType[3] = '3';
    5750:	strb.w	r2, [r5, #85]	; 0x55
  pbs->bpb.bpb32.volumeType[1] = 'A';
    5754:	strb.w	r0, [r5, #83]	; 0x53
  pbs->bpb.bpb32.volumeType[4] = '2';
    5758:	strb.w	r1, [r5, #86]	; 0x56
    575c:	str	r3, [r5, #44]	; 0x2c
  if (!m_dev->writeSector(m_relativeSectors, m_secBuf) ||
    575e:	ldr	r0, [r4, #28]
  *reinterpret_cast<uint16_t*>(dst) = src;
    5760:	ldr	r3, [pc, #200]	; (582c <FatFormatter::makeFat32()+0x1ac>)
  *reinterpret_cast<uint32_t*>(dst) = src;
    5762:	ldr	r2, [pc, #204]	; (5830 <FatFormatter::makeFat32()+0x1b0>)
  *reinterpret_cast<uint16_t*>(dst) = src;
    5764:	str	r3, [r5, #48]	; 0x30
    5766:	ldr	r3, [r0, #0]
  *reinterpret_cast<uint32_t*>(dst) = src;
    5768:	str.w	r2, [r5, #67]	; 0x43
    576c:	ldr	r3, [r3, #32]
    576e:	ldr	r2, [r4, #36]	; 0x24
    5770:	ldr	r1, [r4, #16]
    5772:	blx	r3
    5774:	cmp	r0, #0
    5776:	beq.n	5712 <FatFormatter::makeFat32()+0x92>
      !m_dev->writeSector(m_relativeSectors + 6, m_secBuf)) {
    5778:	ldr	r0, [r4, #28]
    577a:	ldr	r1, [r4, #16]
    577c:	ldr	r3, [r0, #0]
    577e:	adds	r1, #6
    5780:	ldr	r2, [r4, #36]	; 0x24
    5782:	ldr	r3, [r3, #32]
    5784:	blx	r3
  if (!m_dev->writeSector(m_relativeSectors, m_secBuf) ||
    5786:	cmp	r0, #0
    5788:	beq.n	5712 <FatFormatter::makeFat32()+0x92>
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
    578a:	mov.w	r2, #512	; 0x200
    578e:	movs	r1, #0
    5790:	ldr	r0, [r4, #36]	; 0x24
    5792:	bl	e064 <memset>
  if (!m_dev->writeSector(m_relativeSectors + 2, m_secBuf) ||
    5796:	ldr	r0, [r4, #28]
    5798:	ldr	r2, [pc, #152]	; (5834 <FatFormatter::makeFat32()+0x1b4>)
    579a:	ldr	r3, [r0, #0]
    579c:	str.w	r2, [r5, #508]	; 0x1fc
    57a0:	ldr	r1, [r4, #16]
    57a2:	ldr	r3, [r3, #32]
    57a4:	adds	r1, #2
    57a6:	ldr	r2, [r4, #36]	; 0x24
    57a8:	blx	r3
    57aa:	cmp	r0, #0
    57ac:	beq.n	5712 <FatFormatter::makeFat32()+0x92>
      !m_dev->writeSector(m_relativeSectors + 8, m_secBuf)) {
    57ae:	ldr	r0, [r4, #28]
    57b0:	ldr	r1, [r4, #16]
    57b2:	ldr	r3, [r0, #0]
    57b4:	adds	r1, #8
    57b6:	ldr	r2, [r4, #36]	; 0x24
    57b8:	ldr	r3, [r3, #32]
    57ba:	blx	r3
  if (!m_dev->writeSector(m_relativeSectors + 2, m_secBuf) ||
    57bc:	cmp	r0, #0
    57be:	beq.n	5712 <FatFormatter::makeFat32()+0x92>
    57c0:	mov.w	r3, #4294967295
  if (!m_dev->writeSector(m_relativeSectors + 1, m_secBuf) ||
    57c4:	ldr	r0, [r4, #28]
    57c6:	ldr	r2, [pc, #112]	; (5838 <FatFormatter::makeFat32()+0x1b8>)
    57c8:	strd	r3, r3, [r5, #488]	; 0x1e8
    57cc:	ldr	r3, [pc, #108]	; (583c <FatFormatter::makeFat32()+0x1bc>)
    57ce:	str	r2, [r5, #0]
    57d0:	str.w	r3, [r5, #484]	; 0x1e4
    57d4:	ldr	r3, [r0, #0]
    57d6:	ldr	r1, [r4, #16]
    57d8:	ldr	r2, [r4, #36]	; 0x24
    57da:	ldr	r3, [r3, #32]
    57dc:	adds	r1, #1
    57de:	blx	r3
    57e0:	cmp	r0, #0
    57e2:	beq.n	5712 <FatFormatter::makeFat32()+0x92>
      !m_dev->writeSector(m_relativeSectors + 7, m_secBuf)) {
    57e4:	ldr	r0, [r4, #28]
    57e6:	ldr	r1, [r4, #16]
    57e8:	ldr	r3, [r0, #0]
    57ea:	ldr	r2, [r4, #36]	; 0x24
    57ec:	adds	r1, #7
    57ee:	ldr	r3, [r3, #32]
    57f0:	blx	r3
  if (!m_dev->writeSector(m_relativeSectors + 1, m_secBuf) ||
    57f2:	cmp	r0, #0
    57f4:	beq.n	5712 <FatFormatter::makeFat32()+0x92>
  return initFatDir(32, 2 * m_fatSize + m_sectorsPerCluster);
    57f6:	ldr	r2, [r4, #8]
    57f8:	mov	r0, r4
    57fa:	ldrb.w	r3, [r4, #43]	; 0x2b
    57fe:	movs	r1, #32
    5800:	add.w	r2, r3, r2, lsl #1
}
    5804:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return initFatDir(32, 2 * m_fatSize + m_sectorsPerCluster);
    5808:	b.w	53dc <FatFormatter::initFatDir(unsigned char, unsigned long)>
    writeMsg("Bad cluster count\r\n");
    580c:	ldr	r0, [r4, #32]
    580e:	cmp	r0, #0
    5810:	beq.w	5712 <FatFormatter::makeFat32()+0x92>
    5814:	ldr	r3, [r0, #0]
    5816:	movs	r2, #19
    5818:	ldr	r1, [pc, #36]	; (5840 <FatFormatter::makeFat32()+0x1c0>)
    581a:	ldr	r3, [r3, #4]
    581c:	blx	r3
}
    581e:	movs	r0, #0
    5820:	pop	{r3, r4, r5, r6, r7, pc}
    5822:	lsls	r7, r3, #1
    5824:	b.n	56d4 <FatFormatter::makeFat32()+0x54>
    5826:	nop
    5828:	.word	0x00fb0400
    582c:	.word	0x00060001
    5830:	.word	0x0012d687
    5834:	.word	0xaa550000
    5838:	.word	0x41615252
    583c:	.word	0x61417272
    5840:	.word	0x200007b4

00005844 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)>:
bool FatFormatter::format(FsBlockDevice* dev, uint8_t* secBuf, print_t* pr) {
    5844:	push	{r3, r4, r5, lr}
    5846:	mov	r4, r0
  m_sectorCount = m_dev->sectorCount();
    5848:	ldr	r5, [r1, #0]
  m_dev = dev;
    584a:	str	r1, [r0, #28]
  m_sectorCount = m_dev->sectorCount();
    584c:	mov	r0, r1
  m_secBuf = secBuf;
    584e:	str	r2, [r4, #36]	; 0x24
  m_sectorCount = m_dev->sectorCount();
    5850:	ldr	r2, [r5, #24]
  m_pr = pr;
    5852:	str	r3, [r4, #32]
  m_sectorCount = m_dev->sectorCount();
    5854:	blx	r2
  m_capacityMB = (m_sectorCount + SECTORS_PER_MB - 1) / SECTORS_PER_MB;
    5856:	addw	r3, r0, #2047	; 0x7ff
  m_sectorCount = m_dev->sectorCount();
    585a:	str	r0, [r4, #20]
  m_capacityMB = (m_sectorCount + SECTORS_PER_MB - 1) / SECTORS_PER_MB;
    585c:	lsrs	r3, r3, #11
  if (m_capacityMB <= 6) {
    585e:	cmp	r3, #6
  m_capacityMB = (m_sectorCount + SECTORS_PER_MB - 1) / SECTORS_PER_MB;
    5860:	str	r3, [r4, #0]
  if (m_capacityMB <= 6) {
    5862:	bls.n	58ae <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x6a>
  } else if (m_capacityMB <= 16) {
    5864:	cmp	r3, #16
    5866:	bhi.n	5890 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x4c>
    5868:	movs	r3, #2
  rtn = m_sectorCount < 0X400000 ? makeFat16() : makeFat32();
    586a:	cmp.w	r0, #4194304	; 0x400000
    m_sectorsPerCluster = 2;
    586e:	strb.w	r3, [r4, #43]	; 0x2b
  rtn = m_sectorCount < 0X400000 ? makeFat16() : makeFat32();
    5872:	mov	r0, r4
    5874:	bcs.n	58d4 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x90>
    5876:	bl	5564 <FatFormatter::makeFat16()>
    587a:	mov	r5, r0
    writeMsg("Format Done\r\n");
    587c:	ldr	r0, [r4, #32]
  if (rtn) {
    587e:	cbz	r5, 58c2 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x7e>
    writeMsg("Format Done\r\n");
    5880:	cbz	r0, 588c <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x48>
    5882:	ldr	r3, [r0, #0]
    5884:	movs	r2, #13
    5886:	ldr	r1, [pc, #100]	; (58ec <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xa8>)
    5888:	ldr	r3, [r3, #4]
    588a:	blx	r3
}
    588c:	mov	r0, r5
    588e:	pop	{r3, r4, r5, pc}
  } else if (m_capacityMB <= 32) {
    5890:	cmp	r3, #32
    5892:	bls.n	58dc <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x98>
  } else if (m_capacityMB <= 64) {
    5894:	cmp	r3, #64	; 0x40
    5896:	bls.n	58e0 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x9c>
  } else if (m_capacityMB <= 128) {
    5898:	cmp	r3, #128	; 0x80
    589a:	bls.n	58e4 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xa0>
  } else if (m_capacityMB <= 1024) {
    589c:	cmp.w	r3, #1024	; 0x400
    58a0:	bls.n	58e8 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xa4>
  } else if (m_capacityMB <= 32768) {
    58a2:	cmp.w	r3, #32768	; 0x8000
    58a6:	ite	hi
    58a8:	movhi	r3, #128	; 0x80
    58aa:	movls	r3, #64	; 0x40
    58ac:	b.n	586a <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x26>
    writeMsg("Card is too small.\r\n");
    58ae:	ldr	r0, [r4, #32]
    58b0:	cbz	r0, 58bc <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x78>
    58b2:	ldr	r3, [r0, #0]
    58b4:	movs	r2, #20
    58b6:	ldr	r1, [pc, #56]	; (58f0 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xac>)
    58b8:	ldr	r3, [r3, #4]
    58ba:	blx	r3
    return false;
    58bc:	movs	r5, #0
}
    58be:	mov	r0, r5
    58c0:	pop	{r3, r4, r5, pc}
    writeMsg("Format Failed\r\n");
    58c2:	cmp	r0, #0
    58c4:	beq.n	58bc <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x78>
    58c6:	ldr	r3, [r0, #0]
    58c8:	movs	r2, #15
    58ca:	ldr	r1, [pc, #40]	; (58f4 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xb0>)
    58cc:	ldr	r3, [r3, #4]
    58ce:	blx	r3
}
    58d0:	mov	r0, r5
    58d2:	pop	{r3, r4, r5, pc}
  rtn = m_sectorCount < 0X400000 ? makeFat16() : makeFat32();
    58d4:	bl	5680 <FatFormatter::makeFat32()>
    58d8:	mov	r5, r0
    58da:	b.n	587c <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x38>
    58dc:	movs	r3, #4
    58de:	b.n	586a <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x26>
    58e0:	movs	r3, #8
    58e2:	b.n	586a <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x26>
    58e4:	movs	r3, #16
    58e6:	b.n	586a <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x26>
    58e8:	movs	r3, #32
    58ea:	b.n	586a <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x26>
    58ec:	.word	0x20000794
    58f0:	.word	0x2000077c
    58f4:	.word	0x200007a4

000058f8 <FatFile::getLfnChar(DirLfn_t*, unsigned char)>:
#include "../common/DebugMacros.h"
#include "../common/FsUtf.h"
#include "FatLib.h"
//------------------------------------------------------------------------------
uint16_t FatFile::getLfnChar(DirLfn_t* ldir, uint8_t i) {
  if (i < 5) {
    58f8:	cmp	r2, #4
    58fa:	bhi.n	5906 <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0xe>
  return *reinterpret_cast<const uint16_t*>(src);
    58fc:	add.w	r2, r1, r2, lsl #1
    5900:	ldrh.w	r0, [r2, #1]
    return getLe16(ldir->unicode1 + 2 * i);
    5904:	bx	lr
  } else if (i < 11) {
    5906:	cmp	r2, #10
    5908:	bhi.n	5912 <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0x1a>
    590a:	add.w	r2, r1, r2, lsl #1
    590e:	ldrh	r0, [r2, #4]
    return getLe16(ldir->unicode2 + 2 * (i - 5));
    5910:	bx	lr
  } else if (i < 13) {
    5912:	cmp	r2, #12
    5914:	bhi.n	591e <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0x26>
    5916:	add.w	r1, r1, r2, lsl #1
    591a:	ldrh	r0, [r1, #6]
    return getLe16(ldir->unicode3 + 2 * (i - 11));
    591c:	bx	lr
  }
  DBG_HALT_IF(i >= 13);
  return 0;
    591e:	movs	r0, #0
}
    5920:	bx	lr
    5922:	nop

00005924 <FatFile::getSFN(char*, unsigned int)>:
fail:
  *name = 0;
  return 0;
}
//------------------------------------------------------------------------------
size_t FatFile::getSFN(char* name, size_t size) {
    5924:	push	{r3, r4, r5, r6, r7, lr}
  bool isOpen() const { return m_attributes; }
    5926:	ldrb	r4, [r0, #0]
    5928:	mov	r6, r1
  char c;
  uint8_t j = 0;
  uint8_t lcBit = FAT_CASE_LC_BASE;
  uint8_t* ptr;
  DirFat_t* dir;
  if (!isOpen()) {
    592a:	cbz	r4, 594c <FatFile::getSFN(char*, unsigned int)+0x28>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isRoot()) {
    592c:	ands.w	r4, r4, #192	; 0xc0
    5930:	mov	r7, r2
    5932:	beq.n	5944 <FatFile::getSFN(char*, unsigned int)+0x20>
    if (size < 2) {
    5934:	cmp	r2, #1
    5936:	bls.n	594c <FatFile::getSFN(char*, unsigned int)+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    name[0] = '/';
    5938:	movs	r2, #47	; 0x2f
    name[1] = '\0';
    593a:	movs	r3, #0
    return 1;
    593c:	movs	r0, #1
    name[0] = '/';
    593e:	strb	r2, [r1, #0]
    name[1] = '\0';
    5940:	strb	r3, [r1, #1]
  return j;

fail:
  name[0] = '\0';
  return 0;
}
    5942:	pop	{r3, r4, r5, r6, r7, pc}
  dir = cacheDirEntry(FsCache::CACHE_FOR_READ);
    5944:	mov	r1, r4
    5946:	bl	5c08 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    594a:	cbnz	r0, 5954 <FatFile::getSFN(char*, unsigned int)+0x30>
  name[0] = '\0';
    594c:	movs	r3, #0
  return 0;
    594e:	mov	r0, r3
  name[0] = '\0';
    5950:	strb	r3, [r6, #0]
}
    5952:	pop	{r3, r4, r5, r6, r7, pc}
  ptr = dir->name;
    5954:	mov	r3, r0
    5956:	mov	ip, r4
  uint8_t lcBit = FAT_CASE_LC_BASE;
    5958:	movs	r1, #8
    595a:	b.n	5980 <FatFile::getSFN(char*, unsigned int)+0x5c>
      if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
    595c:	ldrb	r2, [r0, #12]
    595e:	tst	r1, r2
    5960:	beq.n	596a <FatFile::getSFN(char*, unsigned int)+0x46>
        c += 'a' - 'A';
    5962:	add.w	lr, lr, #32
    5966:	uxtb.w	lr, lr
    if ((j + 1u) >= size) {
    596a:	adds	r5, r4, #1
    596c:	cmp	r5, r7
    596e:	bcs.n	594c <FatFile::getSFN(char*, unsigned int)+0x28>
  for (uint8_t i = 0; i < 12; i++) {
    5970:	add.w	ip, ip, #1
    name[j++] = c;
    5974:	strb.w	lr, [r6, r4]
    5978:	uxtb	r4, r5
  for (uint8_t i = 0; i < 12; i++) {
    597a:	cmp.w	ip, #12
    597e:	beq.n	59a2 <FatFile::getSFN(char*, unsigned int)+0x7e>
    if (i == 8) {
    5980:	cmp.w	ip, #8
    5984:	beq.n	59aa <FatFile::getSFN(char*, unsigned int)+0x86>
      c = *ptr++;
    5986:	ldrb.w	lr, [r3], #1
      if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
    598a:	sub.w	r2, lr, #65	; 0x41
    598e:	cmp	r2, #25
    5990:	bls.n	595c <FatFile::getSFN(char*, unsigned int)+0x38>
      if (c == ' ') {
    5992:	cmp.w	lr, #32
    5996:	bne.n	596a <FatFile::getSFN(char*, unsigned int)+0x46>
  for (uint8_t i = 0; i < 12; i++) {
    5998:	add.w	ip, ip, #1
    599c:	cmp.w	ip, #12
    59a0:	bne.n	5980 <FatFile::getSFN(char*, unsigned int)+0x5c>
  name[j] = '\0';
    59a2:	movs	r3, #0
    59a4:	mov	r0, r4
    59a6:	strb	r3, [r6, r4]
}
    59a8:	pop	{r3, r4, r5, r6, r7, pc}
      if (*ptr == ' ') {
    59aa:	ldrb	r2, [r3, #0]
    59ac:	cmp	r2, #32
    59ae:	beq.n	59a2 <FatFile::getSFN(char*, unsigned int)+0x7e>
      lcBit = FAT_CASE_LC_EXT;
    59b0:	movs	r1, #16
      c = '.';
    59b2:	mov.w	lr, #46	; 0x2e
    59b6:	b.n	596a <FatFile::getSFN(char*, unsigned int)+0x46>

000059b8 <FatFile::getName7(char*, unsigned int)>:
size_t FatFile::getName7(char* name, size_t size) {
    59b8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  FatFile() {}
    59bc:	movs	r5, #0
    59be:	sub	sp, #44	; 0x2c
  if (!isOpen()) {
    59c0:	ldrb	r3, [r0, #0]
size_t FatFile::getName7(char* name, size_t size) {
    59c2:	mov	r8, r1
    59c4:	str	r5, [sp, #4]
  if (!isOpen()) {
    59c6:	cmp	r3, #0
    59c8:	beq.n	5a6c <FatFile::getName7(char*, unsigned int)+0xb4>
  if (!isLFN()) {
    59ca:	ldrb	r3, [r0, #3]
    59cc:	mov	r6, r0
    59ce:	cmp	r3, #0
    59d0:	beq.n	5a7c <FatFile::getName7(char*, unsigned int)+0xc4>
  if (!dir.openCluster(this)) {
    59d2:	mov	r1, r0
    59d4:	add	r0, sp, #4
    59d6:	mov	r7, r2
    59d8:	bl	6034 <FatFile::openCluster(FatFile*)>
    59dc:	cmp	r0, #0
    59de:	beq.n	5a6c <FatFile::getName7(char*, unsigned int)+0xb4>
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    59e0:	ldrb	r3, [r6, #3]
    59e2:	cmp	r3, #0
    59e4:	beq.n	5a98 <FatFile::getName7(char*, unsigned int)+0xe0>
    59e6:	mov.w	r9, #1
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(m_dirIndex - order));
    59ea:	ldrh	r1, [r6, #4]
  // private functions

  bool addCluster();
  bool addDirCluster();
  DirFat_t* cacheDir(uint16_t index) {
    return seekSet(32UL * index) ? readDirCache() : nullptr;
    59ec:	add	r0, sp, #4
    59ee:	sub.w	r1, r1, r9
    59f2:	uxth	r1, r1
    59f4:	lsls	r1, r1, #5
    59f6:	bl	6554 <FatFile::seekSet(unsigned long)>
    59fa:	cbz	r0, 5a6c <FatFile::getName7(char*, unsigned int)+0xb4>
    59fc:	movs	r1, #0
    59fe:	add	r0, sp, #4
    5a00:	bl	6294 <FatFile::readDirCache(bool)>
    if (!ldir) {
    5a04:	cbz	r0, 5a6c <FatFile::getName7(char*, unsigned int)+0xb4>
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    5a06:	ldrb	r3, [r0, #11]
    5a08:	cmp	r3, #15
    5a0a:	bne.n	5a6c <FatFile::getName7(char*, unsigned int)+0xb4>
    5a0c:	ldrb	r3, [r0, #0]
    5a0e:	uxtb.w	r2, r9
    5a12:	and.w	r3, r3, #31
    5a16:	cmp	r3, r2
    5a18:	bne.n	5a6c <FatFile::getName7(char*, unsigned int)+0xb4>
    5a1a:	subs	r2, r5, #1
    5a1c:	add.w	ip, r0, #1
    for (uint8_t i = 0; i < 13; i++) {
    5a20:	movs	r3, #0
    5a22:	add	r2, r8
  if (i < 5) {
    5a24:	cmp	r3, #4
    5a26:	bhi.n	5a8a <FatFile::getName7(char*, unsigned int)+0xd2>
    5a28:	ldrh.w	r4, [ip]
    for (uint8_t i = 0; i < 13; i++) {
    5a2c:	adds	r3, #1
    5a2e:	add.w	ip, ip, #2
      if (c == 0) {
    5a32:	cbz	r4, 5a5c <FatFile::getName7(char*, unsigned int)+0xa4>
      if ((n + 1) >= size) {
    5a34:	adds	r5, #1
    for (uint8_t i = 0; i < 13; i++) {
    5a36:	uxtb	r3, r3
      if ((n + 1) >= size) {
    5a38:	cmp	r5, r7
    5a3a:	bcs.n	5a6c <FatFile::getName7(char*, unsigned int)+0xb4>
      name[n++] = c >= 0X7F ? '?' : c;
    5a3c:	cmp	r4, #127	; 0x7f
    5a3e:	it	cs
    5a40:	movcs	r4, #63	; 0x3f
    for (uint8_t i = 0; i < 13; i++) {
    5a42:	cmp	r3, #13
      name[n++] = c >= 0X7F ? '?' : c;
    5a44:	strb.w	r4, [r2, #1]!
    for (uint8_t i = 0; i < 13; i++) {
    5a48:	bne.n	5a24 <FatFile::getName7(char*, unsigned int)+0x6c>
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    5a4a:	add.w	r9, r9, #1
    5a4e:	ldrb	r2, [r6, #3]
    5a50:	uxtb.w	r3, r9
    5a54:	uxth.w	r9, r9
    5a58:	cmp	r2, r3
    5a5a:	bcs.n	59ea <FatFile::getName7(char*, unsigned int)+0x32>
  name[n] = 0;
    5a5c:	add	r8, r5
    5a5e:	movs	r3, #0
}
    5a60:	mov	r0, r5
  name[n] = 0;
    5a62:	strb.w	r3, [r8]
}
    5a66:	add	sp, #44	; 0x2c
    5a68:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  name[0] = '\0';
    5a6c:	movs	r3, #0
  return 0;
    5a6e:	mov	r5, r3
  name[0] = '\0';
    5a70:	strb.w	r3, [r8]
}
    5a74:	mov	r0, r5
    5a76:	add	sp, #44	; 0x2c
    5a78:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return getSFN(name, size);
    5a7c:	bl	5924 <FatFile::getSFN(char*, unsigned int)>
    5a80:	mov	r5, r0
}
    5a82:	mov	r0, r5
    5a84:	add	sp, #44	; 0x2c
    5a86:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  } else if (i < 11) {
    5a8a:	cmp	r3, #10
    5a8c:	ite	ls
    5a8e:	ldrhls.w	r4, [ip, #3]
    5a92:	ldrhhi.w	r4, [ip, #5]
    return getLe16(ldir->unicode3 + 2 * (i - 11));
    5a96:	b.n	5a2c <FatFile::getName7(char*, unsigned int)+0x74>
  size_t n = 0;
    5a98:	mov	r5, r3
    5a9a:	b.n	5a5e <FatFile::getName7(char*, unsigned int)+0xa6>

00005a9c <FatFile::getName(char*, unsigned int)>:
  return getName7(name, size);
    5a9c:	b.w	59b8 <FatFile::getName7(char*, unsigned int)>

00005aa0 <FatFile::sync() [clone .part.0]>:
fail:
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
    5aa0:	push	{r4, r5, r6, lr}
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    5aa2:	ldrsb.w	r3, [r0, #2]
bool FatFile::sync() {
    5aa6:	sub	sp, #8
    5aa8:	mov	r4, r0
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    5aaa:	cmp	r3, #0
    5aac:	blt.n	5aca <FatFile::sync() [clone .part.0]+0x2a>
      setLe16(dir->modifyTime, time);
    }
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
  }
  if (m_vol->cacheSync()) {
    5aae:	ldr	r5, [r4, #8]
  uint8_t* fatCachePrepare(uint32_t sector, uint8_t options) {
    options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return m_fatCache.prepare(sector, options);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    5ab0:	add.w	r0, r5, #36	; 0x24
    5ab4:	bl	3174 <FsCache::sync()>
    5ab8:	cmp	r0, #0
    5aba:	bne.n	5b3c <FatFile::sync() [clone .part.0]+0x9c>
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
    5abc:	ldrb	r3, [r4, #1]
  return false;
    5abe:	movs	r0, #0
  m_error |= WRITE_ERROR;
    5ac0:	orr.w	r3, r3, #1
    5ac4:	strb	r3, [r4, #1]
}
    5ac6:	add	sp, #8
    5ac8:	pop	{r4, r5, r6, pc}
    return dataCachePrepare(sector, options);
  }
  bool cacheSync() { return m_cache.sync() && syncDevice(); }
#endif  // USE_SEPARATE_FAT_CACHE
  uint8_t* dataCachePrepare(uint32_t sector, uint8_t options) {
    return m_cache.prepare(sector, options);
    5aca:	ldr	r0, [r0, #8]
    5acc:	movs	r2, #1
    5ace:	ldr	r1, [r4, #24]
    5ad0:	adds	r0, #36	; 0x24
    5ad2:	bl	31cc <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    5ad6:	cmp	r0, #0
    5ad8:	beq.n	5abc <FatFile::sync() [clone .part.0]+0x1c>
  return dir + (m_dirIndex & 0XF);
    5ada:	ldrh	r5, [r4, #4]
    5adc:	and.w	r5, r5, #15
    5ae0:	lsls	r3, r5, #5
    5ae2:	add.w	r5, r0, r5, lsl #5
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
    5ae6:	ldrb	r3, [r0, r3]
    5ae8:	cmp	r3, #229	; 0xe5
    5aea:	beq.n	5abc <FatFile::sync() [clone .part.0]+0x1c>
    dir->attributes = m_attributes & FS_ATTRIB_COPY;
    5aec:	ldrb	r3, [r4, #0]
    5aee:	and.w	r3, r3, #55	; 0x37
    5af2:	strb	r3, [r5, #11]
    if (isFile()) {
    5af4:	ldrb	r3, [r4, #0]
    5af6:	lsls	r3, r3, #28
    5af8:	bpl.n	5afe <FatFile::sync() [clone .part.0]+0x5e>
      setLe32(dir->fileSize, m_fileSize);
    5afa:	ldr	r3, [r4, #28]
  *reinterpret_cast<uint32_t*>(dst) = src;
    5afc:	str	r3, [r5, #28]
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    5afe:	ldr	r3, [r4, #32]
    if (FsDateTime::callback) {
    5b00:	ldr	r1, [pc, #84]	; (5b58 <FatFile::sync() [clone .part.0]+0xb8>)
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);
    5b02:	lsrs	r2, r3, #16
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    5b04:	strh	r3, [r5, #26]
    if (FsDateTime::callback) {
    5b06:	ldr	r6, [r1, #0]
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);
    5b08:	strh	r2, [r5, #20]
    if (FsDateTime::callback) {
    5b0a:	cbz	r6, 5b26 <FatFile::sync() [clone .part.0]+0x86>
      FsDateTime::callback(&date, &time, &ms10);
    5b0c:	add.w	r2, sp, #3
    5b10:	add.w	r1, sp, #6
    5b14:	add	r0, sp, #4
    5b16:	blx	r6
      setLe16(dir->modifyDate, date);
    5b18:	ldrh.w	r3, [sp, #4]
  *reinterpret_cast<uint16_t*>(dst) = src;
    5b1c:	ldrh.w	r2, [sp, #6]
    5b20:	strh	r3, [r5, #24]
    5b22:	strh	r3, [r5, #18]
    5b24:	strh	r2, [r5, #22]
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    5b26:	ldrb	r3, [r4, #2]
  if (m_vol->cacheSync()) {
    5b28:	ldr	r5, [r4, #8]
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    5b2a:	and.w	r3, r3, #127	; 0x7f
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    5b2e:	add.w	r0, r5, #36	; 0x24
    5b32:	strb	r3, [r4, #2]
    5b34:	bl	3174 <FsCache::sync()>
    5b38:	cmp	r0, #0
    5b3a:	beq.n	5abc <FatFile::sync() [clone .part.0]+0x1c>
    5b3c:	add.w	r0, r5, #564	; 0x234
    5b40:	bl	3174 <FsCache::sync()>
    5b44:	cmp	r0, #0
    5b46:	beq.n	5abc <FatFile::sync() [clone .part.0]+0x1c>
    5b48:	ldr	r0, [r5, #0]
  bool syncDevice() { return m_blockDev->syncDevice(); }
    5b4a:	ldr	r3, [r0, #0]
    5b4c:	ldr	r3, [r3, #28]
    5b4e:	blx	r3
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    5b50:	cmp	r0, #0
    5b52:	beq.n	5abc <FatFile::sync() [clone .part.0]+0x1c>
    5b54:	b.n	5ac6 <FatFile::sync() [clone .part.0]+0x26>
    5b56:	nop
    5b58:	.word	0x20006404

00005b5c <FatFile::addCluster()>:
  uint32_t cc = m_curCluster;
    5b5c:	mov	r2, r0
bool FatFile::addCluster() {
    5b5e:	push	{r3, r4, r5, lr}
  uint32_t cc = m_curCluster;
    5b60:	ldr.w	r5, [r2, #16]!
bool FatFile::addCluster() {
    5b64:	mov	r4, r0
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    5b66:	ldr	r0, [r0, #8]
    5b68:	mov	r1, r5
    5b6a:	bl	6c18 <FatPartition::allocateCluster(unsigned long, unsigned long*)>
    5b6e:	cbz	r0, 5b86 <FatFile::addCluster()+0x2a>
  if (cc == 0) {
    5b70:	cbz	r5, 5b88 <FatFile::addCluster()+0x2c>
  } else if (m_curCluster != (cc + 1)) {
    5b72:	ldr	r3, [r4, #16]
    5b74:	adds	r5, #1
    5b76:	cmp	r3, r5
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    5b78:	ldrb	r3, [r4, #2]
    5b7a:	it	ne
    5b7c:	andne.w	r3, r3, #191	; 0xbf
  m_flags |= FILE_FLAG_DIR_DIRTY;
    5b80:	orn	r3, r3, #127	; 0x7f
    5b84:	strb	r3, [r4, #2]
}
    5b86:	pop	{r3, r4, r5, pc}
    m_flags |= FILE_FLAG_CONTIGUOUS;
    5b88:	ldrb	r3, [r4, #2]
    5b8a:	orr.w	r3, r3, #64	; 0x40
    5b8e:	b.n	5b80 <FatFile::addCluster()+0x24>

00005b90 <FatFile::addDirCluster()>:
bool FatFile::addDirCluster() {
    5b90:	push	{r3, r4, r5, r6, r7, lr}
  if (isRootFixed()) {
    5b92:	ldrb	r4, [r0, #0]
    5b94:	ands.w	r4, r4, #64	; 0x40
    5b98:	bne.n	5ba4 <FatFile::addDirCluster()+0x14>
  if (m_curPosition >= 512UL * 4095) {
    5b9a:	ldr	r3, [pc, #104]	; (5c04 <FatFile::addDirCluster()+0x74>)
    5b9c:	mov	r5, r0
    5b9e:	ldr	r2, [r0, #20]
    5ba0:	cmp	r2, r3
    5ba2:	bcc.n	5baa <FatFile::addDirCluster()+0x1a>
  return false;
    5ba4:	movs	r7, #0
}
    5ba6:	mov	r0, r7
    5ba8:	pop	{r3, r4, r5, r6, r7, pc}
  if (!addCluster()) {
    5baa:	bl	5b5c <FatFile::addCluster()>
    5bae:	mov	r7, r0
    5bb0:	cmp	r0, #0
    5bb2:	beq.n	5ba4 <FatFile::addDirCluster()+0x14>
  sector = m_vol->clusterStartSector(m_curCluster);
    5bb4:	ldr	r0, [r5, #8]
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
  }
  uint32_t clusterStartSector(uint32_t cluster) const {
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    5bb6:	ldr	r6, [r5, #16]
    5bb8:	ldrb	r2, [r0, #6]
    5bba:	subs	r6, #2
    5bbc:	ldr	r1, [r0, #20]
    5bbe:	lsls	r6, r2
    5bc0:	add	r6, r1
  for (uint8_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    5bc2:	ldrb	r1, [r0, #4]
    5bc4:	cbz	r1, 5bf2 <FatFile::addDirCluster()+0x62>
    5bc6:	mov	r1, r4
    5bc8:	b.n	5bd8 <FatFile::addDirCluster()+0x48>
    memset(pc, 0, m_vol->bytesPerSector());
    5bca:	bl	e064 <memset>
  for (uint8_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    5bce:	ldr	r0, [r5, #8]
    5bd0:	uxtb	r1, r4
    5bd2:	ldrb	r2, [r0, #4]
    5bd4:	cmp	r2, r1
    5bd6:	bls.n	5bf0 <FatFile::addDirCluster()+0x60>
    return m_cache.prepare(sector, options);
    5bd8:	add	r1, r6
    5bda:	movs	r2, #5
    5bdc:	adds	r0, #36	; 0x24
    5bde:	adds	r4, #1
    5be0:	bl	31cc <FsCache::prepare(unsigned long, unsigned char)>
    memset(pc, 0, m_vol->bytesPerSector());
    5be4:	mov.w	r2, #512	; 0x200
    5be8:	movs	r1, #0
    if (!pc) {
    5bea:	cmp	r0, #0
    5bec:	bne.n	5bca <FatFile::addDirCluster()+0x3a>
    5bee:	b.n	5ba4 <FatFile::addDirCluster()+0x14>
    return m_bytesPerSector << m_sectorsPerClusterShift;
    5bf0:	ldrb	r2, [r0, #6]
    5bf2:	mov.w	r3, #512	; 0x200
  m_curPosition += m_vol->bytesPerCluster();
    5bf6:	ldr	r1, [r5, #20]
}
    5bf8:	mov	r0, r7
    5bfa:	lsls	r3, r2
  m_curPosition += m_vol->bytesPerCluster();
    5bfc:	uxtah	r3, r1, r3
    5c00:	str	r3, [r5, #20]
}
    5c02:	pop	{r3, r4, r5, r6, r7, pc}
    5c04:	.word	0x001ffe00

00005c08 <FatFile::cacheDirEntry(unsigned char)>:
DirFat_t* FatFile::cacheDirEntry(uint8_t action) {
    5c08:	push	{r4, lr}
    5c0a:	mov	r4, r0
    return m_cache.prepare(sector, options);
    5c0c:	ldr	r0, [r0, #8]
    5c0e:	mov	r2, r1
    5c10:	adds	r0, #36	; 0x24
    5c12:	ldr	r1, [r4, #24]
    5c14:	bl	31cc <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    5c18:	cbz	r0, 5c24 <FatFile::cacheDirEntry(unsigned char)+0x1c>
  return dir + (m_dirIndex & 0XF);
    5c1a:	ldrh	r3, [r4, #4]
    5c1c:	and.w	r3, r3, #15
    5c20:	add.w	r0, r0, r3, lsl #5
}
    5c24:	pop	{r4, pc}
    5c26:	nop

00005c28 <FatFile::close()>:
bool FatFile::close() {
    5c28:	push	{r4, lr}
  if (!isOpen()) {
    5c2a:	ldrb	r3, [r0, #0]
bool FatFile::close() {
    5c2c:	mov	r4, r0
  if (!isOpen()) {
    5c2e:	cbz	r3, 5c3c <FatFile::close()+0x14>
    5c30:	bl	5aa0 <FatFile::sync() [clone .part.0]>
  m_attributes = FILE_ATTR_CLOSED;
    5c34:	movs	r3, #0
    5c36:	strb	r3, [r4, #0]
  m_flags = 0;
    5c38:	strb	r3, [r4, #2]
}
    5c3a:	pop	{r4, pc}
  m_attributes = FILE_ATTR_CLOSED;
    5c3c:	movs	r3, #0
    return true;
    5c3e:	movs	r0, #1
  m_attributes = FILE_ATTR_CLOSED;
    5c40:	strb	r3, [r4, #0]
  m_flags = 0;
    5c42:	strb	r3, [r4, #2]
}
    5c44:	pop	{r4, pc}
    5c46:	nop

00005c48 <FatFile::dirEntry(DirFat_t*)>:
bool FatFile::dirEntry(DirFat_t* dst) {
    5c48:	push	{r3, r4, r5, lr}
  if (!isOpen()) {
    5c4a:	ldrb	r3, [r0, #0]
bool FatFile::dirEntry(DirFat_t* dst) {
    5c4c:	mov	r5, r0
    5c4e:	mov	r4, r1
  if (!isOpen()) {
    5c50:	cbz	r3, 5c58 <FatFile::dirEntry(DirFat_t*)+0x10>
    5c52:	bl	5aa0 <FatFile::sync() [clone .part.0]>
  if (!sync()) {
    5c56:	cbz	r0, 5c96 <FatFile::dirEntry(DirFat_t*)+0x4e>
    5c58:	ldr	r0, [r5, #8]
    5c5a:	movs	r2, #0
    5c5c:	ldr	r1, [r5, #24]
    5c5e:	adds	r0, #36	; 0x24
    5c60:	bl	31cc <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    5c64:	cbz	r0, 5c96 <FatFile::dirEntry(DirFat_t*)+0x4e>
  return dir + (m_dirIndex & 0XF);
    5c66:	ldrh	r2, [r5, #4]
    5c68:	and.w	r2, r2, #15
    5c6c:	add.w	r3, r0, r2, lsl #5
    5c70:	lsls	r2, r2, #5
  memcpy(dst, dir, sizeof(DirFat_t));
    5c72:	ldr	r5, [r3, #4]
    5c74:	ldr	r0, [r0, r2]
    5c76:	ldr	r1, [r3, #8]
    5c78:	ldr	r2, [r3, #12]
    5c7a:	str	r0, [r4, #0]
    5c7c:	str	r5, [r4, #4]
    5c7e:	str	r1, [r4, #8]
    5c80:	str	r2, [r4, #12]
    5c82:	ldr	r0, [r3, #16]
    5c84:	ldr	r5, [r3, #20]
    5c86:	ldr	r1, [r3, #24]
    5c88:	ldr	r2, [r3, #28]
    5c8a:	str	r0, [r4, #16]
  return true;
    5c8c:	movs	r0, #1
  memcpy(dst, dir, sizeof(DirFat_t));
    5c8e:	str	r5, [r4, #20]
    5c90:	str	r1, [r4, #24]
    5c92:	str	r2, [r4, #28]
}
    5c94:	pop	{r3, r4, r5, pc}
  return false;
    5c96:	movs	r0, #0
}
    5c98:	pop	{r3, r4, r5, pc}
    5c9a:	nop

00005c9c <FatFile::getCreateDateTime(unsigned short*, unsigned short*)>:
bool FatFile::getCreateDateTime(uint16_t* pdate, uint16_t* ptime) {
    5c9c:	push	{r4, r5, lr}
    5c9e:	sub	sp, #36	; 0x24
    5ca0:	mov	r5, r1
    5ca2:	mov	r4, r2
  if (!dirEntry(&dir)) {
    5ca4:	mov	r1, sp
    5ca6:	bl	5c48 <FatFile::dirEntry(DirFat_t*)>
    5caa:	cbz	r0, 5cb8 <FatFile::getCreateDateTime(unsigned short*, unsigned short*)+0x1c>
  *pdate = getLe16(dir.createDate);
    5cac:	ldrh.w	r2, [sp, #16]
  *ptime = getLe16(dir.createTime);
    5cb0:	ldrh.w	r3, [sp, #14]
  *pdate = getLe16(dir.createDate);
    5cb4:	strh	r2, [r5, #0]
  *ptime = getLe16(dir.createTime);
    5cb6:	strh	r3, [r4, #0]
}
    5cb8:	add	sp, #36	; 0x24
    5cba:	pop	{r4, r5, pc}

00005cbc <FatFile::getModifyDateTime(unsigned short*, unsigned short*)>:
bool FatFile::getModifyDateTime(uint16_t* pdate, uint16_t* ptime) {
    5cbc:	push	{r4, r5, lr}
    5cbe:	sub	sp, #36	; 0x24
    5cc0:	mov	r5, r1
    5cc2:	mov	r4, r2
  if (!dirEntry(&dir)) {
    5cc4:	mov	r1, sp
    5cc6:	bl	5c48 <FatFile::dirEntry(DirFat_t*)>
    5cca:	cbz	r0, 5cd8 <FatFile::getModifyDateTime(unsigned short*, unsigned short*)+0x1c>
  *pdate = getLe16(dir.modifyDate);
    5ccc:	ldrh.w	r2, [sp, #24]
  *ptime = getLe16(dir.modifyTime);
    5cd0:	ldrh.w	r3, [sp, #22]
  *pdate = getLe16(dir.modifyDate);
    5cd4:	strh	r2, [r5, #0]
  *ptime = getLe16(dir.modifyTime);
    5cd6:	strh	r3, [r4, #0]
}
    5cd8:	add	sp, #36	; 0x24
    5cda:	pop	{r4, r5, pc}

00005cdc <FatFile::mkdir(FatFile*, FatLfn_t*)>:
  if (!parent->isDir()) {
    5cdc:	ldrb	r3, [r1, #0]
    5cde:	tst.w	r3, #208	; 0xd0
    5ce2:	bne.n	5ce8 <FatFile::mkdir(FatFile*, FatLfn_t*)+0xc>
}
    5ce4:	movs	r0, #0
    5ce6:	bx	lr
bool FatFile::mkdir(FatFile* parent, FatName_t* fname) {
    5ce8:	push	{r4, r5, r6, r7, lr}
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    5cea:	movw	r3, #2562	; 0xa02
bool FatFile::mkdir(FatFile* parent, FatName_t* fname) {
    5cee:	sub	sp, #36	; 0x24
    5cf0:	mov	r5, r1
    5cf2:	mov	r4, r0
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    5cf4:	bl	72a0 <FatFile::open(FatFile*, FatLfn_t*, int)>
    5cf8:	cbz	r0, 5d0a <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
  m_flags = FILE_FLAG_READ;
    5cfa:	movs	r2, #1
  m_attributes = FILE_ATTR_SUBDIR;
    5cfc:	movs	r3, #16
  if (!addDirCluster()) {
    5cfe:	mov	r0, r4
  m_flags = FILE_FLAG_READ;
    5d00:	strb	r2, [r4, #2]
  m_attributes = FILE_ATTR_SUBDIR;
    5d02:	strb	r3, [r4, #0]
  if (!addDirCluster()) {
    5d04:	bl	5b90 <FatFile::addDirCluster()>
    5d08:	cbnz	r0, 5d10 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x34>
}
    5d0a:	movs	r0, #0
    5d0c:	add	sp, #36	; 0x24
    5d0e:	pop	{r4, r5, r6, r7, pc}
  m_firstCluster = m_curCluster;
    5d10:	ldr	r2, [r4, #16]
  if (!isOpen()) {
    5d12:	ldrb	r3, [r4, #0]
  m_firstCluster = m_curCluster;
    5d14:	str	r2, [r4, #32]
  if (!isOpen()) {
    5d16:	cbz	r3, 5d34 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x58>
  if (pos == m_curPosition) {
    5d18:	ldr	r3, [r4, #20]
    5d1a:	cbz	r3, 5d2a <FatFile::mkdir(FatFile*, FatLfn_t*)+0x4e>
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    5d1c:	ldrb	r3, [r4, #2]
    m_curCluster = 0;
    5d1e:	movs	r2, #0
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    5d20:	bic.w	r3, r3, #32
  m_curPosition = pos;
    5d24:	strd	r2, r2, [r4, #16]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    5d28:	strb	r3, [r4, #2]
  if (!isOpen()) {
    5d2a:	mov	r0, r4
    5d2c:	bl	5aa0 <FatFile::sync() [clone .part.0]>
  if (!sync()) {
    5d30:	cmp	r0, #0
    5d32:	beq.n	5d0a <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
    5d34:	ldr	r0, [r4, #8]
    5d36:	movs	r2, #1
    5d38:	ldr	r1, [r4, #24]
    5d3a:	adds	r0, #36	; 0x24
    5d3c:	bl	31cc <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    5d40:	cmp	r0, #0
    5d42:	beq.n	5d0a <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
  return dir + (m_dirIndex & 0XF);
    5d44:	ldrh.w	ip, [r4, #4]
  dir->attributes = FS_ATTRIB_DIRECTORY;
    5d48:	movs	r2, #16
  return dir + (m_dirIndex & 0XF);
    5d4a:	and.w	ip, ip, #15
    5d4e:	mov.w	r3, ip, lsl #5
    5d52:	add.w	ip, r0, ip, lsl #5
  dir->attributes = FS_ATTRIB_DIRECTORY;
    5d56:	strb.w	r2, [ip, #11]
  memcpy(&dot, dir, sizeof(dot));
    5d5a:	ldr	r0, [r0, r3]
  sector = m_vol->clusterStartSector(m_firstCluster);
    5d5c:	ldr	r7, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    5d5e:	ldr	r3, [r4, #32]
    5d60:	ldrb.w	lr, [r7, #6]
    5d64:	subs	r6, r3, #2
  memcpy(&dot, dir, sizeof(dot));
    5d66:	ldr.w	r1, [ip, #4]
    5d6a:	ldr.w	r2, [ip, #8]
    5d6e:	ldr.w	r3, [ip, #12]
    5d72:	lsl.w	r6, r6, lr
    5d76:	mov	lr, sp
    5d78:	stmia.w	lr!, {r0, r1, r2, r3}
    5d7c:	ldr.w	r0, [ip, #16]
    5d80:	ldr.w	r1, [ip, #20]
    5d84:	ldr.w	r2, [ip, #24]
    5d88:	ldr.w	r3, [ip, #28]
    5d8c:	stmia.w	lr!, {r0, r1, r2, r3}
    return m_cache.prepare(sector, options);
    5d90:	ldr	r3, [r7, #20]
    5d92:	add.w	r0, r7, #36	; 0x24
    5d96:	movs	r2, #1
    5d98:	adds	r1, r6, r3
    dot.name[i] = ' ';
    5d9a:	mov.w	r3, #538976288	; 0x20202020
    5d9e:	str.w	r3, [sp, #1]
    5da2:	str.w	r3, [sp, #5]
    5da6:	strh.w	r3, [sp, #9]
    5daa:	bl	31cc <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    5dae:	mov	ip, r0
    5db0:	cmp	r0, #0
    5db2:	beq.n	5d0a <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
  memcpy(&dir[0], &dot, sizeof(dot));
    5db4:	movs	r7, #46	; 0x2e
    5db6:	mov	lr, sp
    5db8:	strb.w	r7, [sp]
  memcpy(&dir[1], &dot, sizeof(dot));
    5dbc:	mov	r6, lr
  memcpy(&dir[0], &dot, sizeof(dot));
    5dbe:	ldmia.w	lr!, {r0, r1, r2, r3}
    5dc2:	str.w	r0, [ip]
    5dc6:	str.w	r1, [ip, #4]
    5dca:	str.w	r2, [ip, #8]
    5dce:	str.w	r3, [ip, #12]
  dot.name[1] = '.';
    5dd2:	strb.w	r7, [sp, #1]
  memcpy(&dir[0], &dot, sizeof(dot));
    5dd6:	ldmia.w	lr!, {r0, r1, r2, r3}
    5dda:	str.w	r0, [ip, #16]
    5dde:	str.w	r1, [ip, #20]
    5de2:	str.w	r2, [ip, #24]
    5de6:	str.w	r3, [ip, #28]
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
    5dea:	ldr	r3, [r5, #32]
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
    5dec:	lsrs	r2, r3, #16
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
    5dee:	strh.w	r3, [sp, #26]
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
    5df2:	strh.w	r2, [sp, #20]
  memcpy(&dir[1], &dot, sizeof(dot));
    5df6:	ldmia	r6!, {r0, r1, r2, r3}
    5df8:	str.w	r0, [ip, #32]
    5dfc:	str.w	r1, [ip, #36]	; 0x24
    5e00:	str.w	r2, [ip, #40]	; 0x28
    5e04:	str.w	r3, [ip, #44]	; 0x2c
    5e08:	ldmia	r6!, {r0, r1, r2, r3}
    5e0a:	str.w	r0, [ip, #48]	; 0x30
    5e0e:	str.w	r1, [ip, #52]	; 0x34
    5e12:	str.w	r2, [ip, #56]	; 0x38
    5e16:	str.w	r3, [ip, #60]	; 0x3c
  return m_vol->cacheSync();
    5e1a:	ldr	r4, [r4, #8]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    5e1c:	add.w	r0, r4, #36	; 0x24
    5e20:	bl	3174 <FsCache::sync()>
    5e24:	cmp	r0, #0
    5e26:	beq.w	5d0a <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
    5e2a:	add.w	r0, r4, #564	; 0x234
    5e2e:	bl	3174 <FsCache::sync()>
    5e32:	cmp	r0, #0
    5e34:	beq.w	5d0a <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
    5e38:	ldr	r0, [r4, #0]
  bool syncDevice() { return m_blockDev->syncDevice(); }
    5e3a:	ldr	r3, [r0, #0]
    5e3c:	ldr	r3, [r3, #28]
}
    5e3e:	add	sp, #36	; 0x24
    5e40:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    5e44:	bx	r3
    5e46:	nop

00005e48 <FatFile::mkdir(FatFile*, char const*, bool)>:
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    5e48:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  FatFile() {}
    5e4c:	movs	r6, #0
    5e4e:	sub	sp, #80	; 0x50
    5e50:	mov	r8, r3
  if (isOpen() || !parent->isDir()) {
    5e52:	ldrb	r3, [r0, #0]
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    5e54:	str	r2, [sp, #4]
    5e56:	str	r6, [sp, #44]	; 0x2c
  if (isOpen() || !parent->isDir()) {
    5e58:	cmp	r3, #0
    5e5a:	bne.n	5ee0 <FatFile::mkdir(FatFile*, char const*, bool)+0x98>
    5e5c:	ldrb	r3, [r1, #0]
    5e5e:	mov	r5, r1
    5e60:	tst.w	r3, #208	; 0xd0
    5e64:	beq.n	5ee0 <FatFile::mkdir(FatFile*, char const*, bool)+0x98>
  if (isDirSeparator(*path)) {
    5e66:	ldrb	r3, [r2, #0]
    5e68:	mov	r4, r0
    5e6a:	mov	r6, r2
    5e6c:	cmp	r3, #47	; 0x2f
    5e6e:	beq.n	5ee8 <FatFile::mkdir(FatFile*, char const*, bool)+0xa0>
    if (!open(parent, &fname, O_RDONLY)) {
    5e70:	movs	r7, #0
    5e72:	b.n	5ec6 <FatFile::mkdir(FatFile*, char const*, bool)+0x7e>
    if (!*path) {
    5e74:	ldr	r6, [sp, #4]
    5e76:	ldrb	r6, [r6, #0]
    5e78:	cmp	r6, #0
    5e7a:	beq.n	5f1a <FatFile::mkdir(FatFile*, char const*, bool)+0xd2>
    if (!open(parent, &fname, O_RDONLY)) {
    5e7c:	bl	72a0 <FatFile::open(FatFile*, FatLfn_t*, int)>
    5e80:	mov	r3, r0
      if (!pFlag || !mkdir(parent, &fname)) {
    5e82:	add	r2, sp, #12
    5e84:	mov	r1, r5
    5e86:	mov	r0, r4
    if (!open(parent, &fname, O_RDONLY)) {
    5e88:	cbnz	r3, 5e96 <FatFile::mkdir(FatFile*, char const*, bool)+0x4e>
      if (!pFlag || !mkdir(parent, &fname)) {
    5e8a:	cmp.w	r8, #0
    5e8e:	beq.n	5ee0 <FatFile::mkdir(FatFile*, char const*, bool)+0x98>
    5e90:	bl	5cdc <FatFile::mkdir(FatFile*, FatLfn_t*)>
    5e94:	cbz	r0, 5ee0 <FatFile::mkdir(FatFile*, char const*, bool)+0x98>
    tmpDir = *this;
    5e96:	mov	lr, r4
    5e98:	add.w	ip, sp, #44	; 0x2c
    5e9c:	ldmia.w	lr!, {r0, r1, r2, r3}
    5ea0:	stmia.w	ip!, {r0, r1, r2, r3}
    5ea4:	ldmia.w	lr!, {r0, r1, r2, r3}
    5ea8:	stmia.w	ip!, {r0, r1, r2, r3}
    5eac:	ldr.w	r5, [lr]
    5eb0:	mov	r0, r4
  if (!isOpen()) {
    5eb2:	ldrb	r3, [r4, #0]
    tmpDir = *this;
    5eb4:	str.w	r5, [ip]
  if (!isOpen()) {
    5eb8:	cbz	r3, 5ebe <FatFile::mkdir(FatFile*, char const*, bool)+0x76>
    5eba:	bl	5aa0 <FatFile::sync() [clone .part.0]>
    if (!parsePathName(path, &fname, &path)) {
    5ebe:	ldr	r6, [sp, #4]
    parent = &tmpDir;
    5ec0:	add	r5, sp, #44	; 0x2c
  m_attributes = FILE_ATTR_CLOSED;
    5ec2:	strb	r7, [r4, #0]
  m_flags = 0;
    5ec4:	strb	r7, [r4, #2]
    if (!parsePathName(path, &fname, &path)) {
    5ec6:	mov	r1, r6
    5ec8:	add	r3, sp, #4
    5eca:	add	r2, sp, #12
    5ecc:	mov	r0, r4
    5ece:	bl	7538 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>
    5ed2:	mov	r6, r0
    if (!open(parent, &fname, O_RDONLY)) {
    5ed4:	add	r2, sp, #12
    5ed6:	mov	r1, r5
    5ed8:	movs	r3, #0
    5eda:	mov	r0, r4
    if (!parsePathName(path, &fname, &path)) {
    5edc:	cmp	r6, #0
    5ede:	bne.n	5e74 <FatFile::mkdir(FatFile*, char const*, bool)+0x2c>
  switch (vol->fatType()) {
    5ee0:	movs	r0, #0
}
    5ee2:	add	sp, #80	; 0x50
    5ee4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      path++;
    5ee8:	adds	r6, #1
    5eea:	str	r6, [sp, #4]
    while (isDirSeparator(*path)) {
    5eec:	ldrb	r3, [r6, #0]
    5eee:	cmp	r3, #47	; 0x2f
    5ef0:	beq.n	5ee8 <FatFile::mkdir(FatFile*, char const*, bool)+0xa0>
    if (!tmpDir.openRoot(parent->m_vol)) {
    5ef2:	ldr	r5, [r5, #8]
  memset(this, 0, sizeof(FatFile));
    5ef4:	movs	r2, #36	; 0x24
    5ef6:	movs	r1, #0
    5ef8:	add	r0, sp, #44	; 0x2c
    5efa:	bl	e064 <memset>
  m_vol = vol;
    5efe:	str	r5, [sp, #52]	; 0x34
  uint8_t fatType() const { return m_fatType; }
    5f00:	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
    5f02:	cmp	r3, #16
    5f04:	beq.n	5f26 <FatFile::mkdir(FatFile*, char const*, bool)+0xde>
    5f06:	cmp	r3, #32
    5f08:	bne.n	5ee0 <FatFile::mkdir(FatFile*, char const*, bool)+0x98>
    5f0a:	movs	r3, #128	; 0x80
      m_attributes = FILE_ATTR_ROOT_FIXED;
    5f0c:	strb.w	r3, [sp, #44]	; 0x2c
  m_flags = FILE_FLAG_READ;
    5f10:	movs	r3, #1
    parent = &tmpDir;
    5f12:	add	r5, sp, #44	; 0x2c
  m_flags = FILE_FLAG_READ;
    5f14:	strb.w	r3, [sp, #46]	; 0x2e
  return true;
    5f18:	b.n	5e70 <FatFile::mkdir(FatFile*, char const*, bool)+0x28>
  return mkdir(parent, &fname);
    5f1a:	add	r2, sp, #12
    5f1c:	bl	5cdc <FatFile::mkdir(FatFile*, FatLfn_t*)>
}
    5f20:	add	sp, #80	; 0x50
    5f22:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (vol->fatType()) {
    5f26:	movs	r3, #64	; 0x40
    5f28:	b.n	5f0c <FatFile::mkdir(FatFile*, char const*, bool)+0xc4>
    5f2a:	nop

00005f2c <FatFile::open(FatFile*, char const*, int)>:
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    5f2c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5f30:	movs	r5, #0
    5f32:	sub	sp, #80	; 0x50
    5f34:	mov	r8, r3
  if (isOpen() || !dirFile->isDir()) {
    5f36:	ldrb	r3, [r0, #0]
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    5f38:	str	r2, [sp, #4]
    5f3a:	str	r5, [sp, #44]	; 0x2c
  if (isOpen() || !dirFile->isDir()) {
    5f3c:	cmp	r3, #0
    5f3e:	bne.n	5fb0 <FatFile::open(FatFile*, char const*, int)+0x84>
    5f40:	ldrb	r3, [r1, #0]
    5f42:	mov	r6, r1
    5f44:	tst.w	r3, #208	; 0xd0
    5f48:	beq.n	5fb0 <FatFile::open(FatFile*, char const*, int)+0x84>
  if (isDirSeparator(*path)) {
    5f4a:	ldrb	r3, [r2, #0]
    5f4c:	mov	r4, r0
    5f4e:	mov	r5, r2
    5f50:	cmp	r3, #47	; 0x2f
    5f52:	beq.n	5fb8 <FatFile::open(FatFile*, char const*, int)+0x8c>
    if (!open(dirFile, &fname, O_RDONLY)) {
    5f54:	movs	r7, #0
    5f56:	b.n	5f96 <FatFile::open(FatFile*, char const*, int)+0x6a>
    if (*path == 0) {
    5f58:	ldr	r5, [sp, #4]
    5f5a:	ldrb	r5, [r5, #0]
    5f5c:	cmp	r5, #0
    5f5e:	beq.n	5fe6 <FatFile::open(FatFile*, char const*, int)+0xba>
    if (!open(dirFile, &fname, O_RDONLY)) {
    5f60:	bl	72a0 <FatFile::open(FatFile*, FatLfn_t*, int)>
    tmpDir = *this;
    5f64:	mov	lr, r4
    5f66:	add.w	ip, sp, #44	; 0x2c
    if (!open(dirFile, &fname, O_RDONLY)) {
    5f6a:	cbz	r0, 5fb0 <FatFile::open(FatFile*, char const*, int)+0x84>
    dirFile = &tmpDir;
    5f6c:	mov	r6, ip
  if (!isOpen()) {
    5f6e:	ldrb	r5, [r4, #0]
    tmpDir = *this;
    5f70:	ldmia.w	lr!, {r0, r1, r2, r3}
    5f74:	stmia.w	ip!, {r0, r1, r2, r3}
    5f78:	ldmia.w	lr!, {r0, r1, r2, r3}
    5f7c:	stmia.w	ip!, {r0, r1, r2, r3}
    5f80:	ldr.w	r3, [lr]
    5f84:	mov	r0, r4
    5f86:	str.w	r3, [ip]
  if (!isOpen()) {
    5f8a:	cbz	r5, 5f90 <FatFile::open(FatFile*, char const*, int)+0x64>
    5f8c:	bl	5aa0 <FatFile::sync() [clone .part.0]>
    if (!parsePathName(path, &fname, &path)) {
    5f90:	ldr	r5, [sp, #4]
  m_attributes = FILE_ATTR_CLOSED;
    5f92:	strb	r7, [r4, #0]
  m_flags = 0;
    5f94:	strb	r7, [r4, #2]
    if (!parsePathName(path, &fname, &path)) {
    5f96:	mov	r1, r5
    5f98:	add	r3, sp, #4
    5f9a:	add	r2, sp, #12
    5f9c:	mov	r0, r4
    5f9e:	bl	7538 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>
    5fa2:	mov	r5, r0
    if (!open(dirFile, &fname, O_RDONLY)) {
    5fa4:	add	r2, sp, #12
    5fa6:	mov	r1, r6
    5fa8:	movs	r3, #0
    5faa:	mov	r0, r4
    if (!parsePathName(path, &fname, &path)) {
    5fac:	cmp	r5, #0
    5fae:	bne.n	5f58 <FatFile::open(FatFile*, char const*, int)+0x2c>
  return false;
    5fb0:	movs	r0, #0
}
    5fb2:	add	sp, #80	; 0x50
    5fb4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      path++;
    5fb8:	adds	r5, #1
    5fba:	str	r5, [sp, #4]
    while (isDirSeparator(*path)) {
    5fbc:	ldrb	r1, [r5, #0]
    5fbe:	cmp	r1, #47	; 0x2f
    5fc0:	beq.n	5fb8 <FatFile::open(FatFile*, char const*, int)+0x8c>
    if (*path == 0) {
    5fc2:	cbnz	r1, 5ff4 <FatFile::open(FatFile*, char const*, int)+0xc8>
      return openRoot(dirFile->m_vol);
    5fc4:	ldr	r5, [r6, #8]
  memset(this, 0, sizeof(FatFile));
    5fc6:	movs	r2, #36	; 0x24
    5fc8:	mov	r0, r4
    5fca:	bl	e064 <memset>
  m_vol = vol;
    5fce:	str	r5, [r4, #8]
    5fd0:	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
    5fd2:	cmp	r3, #16
    5fd4:	beq.n	6020 <FatFile::open(FatFile*, char const*, int)+0xf4>
    5fd6:	cmp	r3, #32
    5fd8:	bne.n	5fb0 <FatFile::open(FatFile*, char const*, int)+0x84>
    5fda:	movs	r2, #128	; 0x80
  m_flags = FILE_FLAG_READ;
    5fdc:	movs	r3, #1
      m_attributes = FILE_ATTR_ROOT_FIXED;
    5fde:	strb	r2, [r4, #0]
  return true;
    5fe0:	mov	r0, r3
  m_flags = FILE_FLAG_READ;
    5fe2:	strb	r3, [r4, #2]
  return true;
    5fe4:	b.n	5fb2 <FatFile::open(FatFile*, char const*, int)+0x86>
  return open(dirFile, &fname, oflag);
    5fe6:	mov	r3, r8
    5fe8:	add	r2, sp, #12
    5fea:	bl	72a0 <FatFile::open(FatFile*, FatLfn_t*, int)>
}
    5fee:	add	sp, #80	; 0x50
    5ff0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    5ff4:	ldr	r6, [r6, #8]
  memset(this, 0, sizeof(FatFile));
    5ff6:	movs	r2, #36	; 0x24
    5ff8:	movs	r1, #0
    5ffa:	add	r0, sp, #44	; 0x2c
    5ffc:	bl	e064 <memset>
  m_vol = vol;
    6000:	str	r6, [sp, #52]	; 0x34
    6002:	ldrb	r3, [r6, #7]
  switch (vol->fatType()) {
    6004:	cmp	r3, #16
    6006:	beq.n	601c <FatFile::open(FatFile*, char const*, int)+0xf0>
    6008:	cmp	r3, #32
    600a:	bne.n	5fb0 <FatFile::open(FatFile*, char const*, int)+0x84>
    600c:	movs	r3, #128	; 0x80
      m_attributes = FILE_ATTR_ROOT_FIXED;
    600e:	strb.w	r3, [sp, #44]	; 0x2c
  m_flags = FILE_FLAG_READ;
    6012:	movs	r3, #1
    dirFile = &tmpDir;
    6014:	add	r6, sp, #44	; 0x2c
  m_flags = FILE_FLAG_READ;
    6016:	strb.w	r3, [sp, #46]	; 0x2e
  return true;
    601a:	b.n	5f54 <FatFile::open(FatFile*, char const*, int)+0x28>
  switch (vol->fatType()) {
    601c:	movs	r3, #64	; 0x40
    601e:	b.n	600e <FatFile::open(FatFile*, char const*, int)+0xe2>
    6020:	movs	r2, #64	; 0x40
    6022:	b.n	5fdc <FatFile::open(FatFile*, char const*, int)+0xb0>

00006024 <FatFile::open(FatVolume*, char const*, int)>:
  return vol && open(vol->vwd(), path, oflag);
    6024:	cbz	r1, 602e <FatFile::open(FatVolume*, char const*, int)+0xa>
    6026:	addw	r1, r1, #1092	; 0x444
    602a:	b.w	5f2c <FatFile::open(FatFile*, char const*, int)>
}
    602e:	mov	r0, r1
    6030:	bx	lr
    6032:	nop

00006034 <FatFile::openCluster(FatFile*)>:
  if (file->m_dirCluster == 0) {
    6034:	ldr	r3, [r1, #12]
bool FatFile::openCluster(FatFile* file) {
    6036:	push	{r4, r5, r6, lr}
    6038:	mov	r5, r1
    603a:	mov	r4, r0
  if (file->m_dirCluster == 0) {
    603c:	cbnz	r3, 6068 <FatFile::openCluster(FatFile*)+0x34>
  if (isOpen()) {
    603e:	ldrb	r6, [r0, #0]
    6040:	cbz	r6, 6046 <FatFile::openCluster(FatFile*)+0x12>
  return false;
    6042:	mov	r0, r3
}
    6044:	pop	{r4, r5, r6, pc}
    return openRoot(file->m_vol);
    6046:	ldr	r5, [r1, #8]
  memset(this, 0, sizeof(FatFile));
    6048:	movs	r2, #36	; 0x24
    604a:	mov	r1, r6
    604c:	bl	e064 <memset>
  m_vol = vol;
    6050:	str	r5, [r4, #8]
    6052:	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
    6054:	cmp	r3, #16
    6056:	beq.n	6086 <FatFile::openCluster(FatFile*)+0x52>
    6058:	cmp	r3, #32
    605a:	bne.n	6082 <FatFile::openCluster(FatFile*)+0x4e>
    605c:	movs	r2, #128	; 0x80
  m_flags = FILE_FLAG_READ;
    605e:	movs	r3, #1
      m_attributes = FILE_ATTR_ROOT_FIXED;
    6060:	strb	r2, [r4, #0]
  return true;
    6062:	mov	r0, r3
  m_flags = FILE_FLAG_READ;
    6064:	strb	r3, [r4, #2]
}
    6066:	pop	{r4, r5, r6, pc}
  memset(this, 0, sizeof(FatFile));
    6068:	movs	r2, #36	; 0x24
    606a:	movs	r1, #0
    606c:	bl	e064 <memset>
  m_flags = FILE_FLAG_READ;
    6070:	movs	r0, #1
  m_attributes = FILE_ATTR_SUBDIR;
    6072:	movs	r3, #16
  m_flags = FILE_FLAG_READ;
    6074:	strb	r0, [r4, #2]
  m_attributes = FILE_ATTR_SUBDIR;
    6076:	strb	r3, [r4, #0]
  m_firstCluster = file->m_dirCluster;
    6078:	ldrd	r2, r3, [r5, #8]
  m_vol = file->m_vol;
    607c:	str	r2, [r4, #8]
  m_firstCluster = file->m_dirCluster;
    607e:	str	r3, [r4, #32]
}
    6080:	pop	{r4, r5, r6, pc}
  switch (vol->fatType()) {
    6082:	mov	r0, r6
}
    6084:	pop	{r4, r5, r6, pc}
  switch (vol->fatType()) {
    6086:	movs	r2, #64	; 0x40
    6088:	b.n	605e <FatFile::openCluster(FatFile*)+0x2a>
    608a:	nop

0000608c <FatFile::openRoot(FatVolume*)>:
bool FatFile::openRoot(FatVolume* vol) {
    608c:	push	{r4, r5, r6, lr}
  if (isOpen()) {
    608e:	ldrb	r5, [r0, #0]
    6090:	cbz	r5, 6096 <FatFile::openRoot(FatVolume*)+0xa>
  return false;
    6092:	movs	r0, #0
}
    6094:	pop	{r4, r5, r6, pc}
    6096:	mov	r6, r1
    6098:	mov	r4, r0
  memset(this, 0, sizeof(FatFile));
    609a:	movs	r2, #36	; 0x24
    609c:	mov	r1, r5
    609e:	bl	e064 <memset>
  m_vol = vol;
    60a2:	str	r6, [r4, #8]
    60a4:	ldrb	r3, [r6, #7]
  switch (vol->fatType()) {
    60a6:	cmp	r3, #16
    60a8:	beq.n	60be <FatFile::openRoot(FatVolume*)+0x32>
    60aa:	cmp	r3, #32
    60ac:	bne.n	60ba <FatFile::openRoot(FatVolume*)+0x2e>
    60ae:	movs	r2, #128	; 0x80
  m_flags = FILE_FLAG_READ;
    60b0:	movs	r3, #1
      m_attributes = FILE_ATTR_ROOT_FIXED;
    60b2:	strb	r2, [r4, #0]
  return true;
    60b4:	mov	r0, r3
  m_flags = FILE_FLAG_READ;
    60b6:	strb	r3, [r4, #2]
}
    60b8:	pop	{r4, r5, r6, pc}
  switch (vol->fatType()) {
    60ba:	mov	r0, r5
}
    60bc:	pop	{r4, r5, r6, pc}
  switch (vol->fatType()) {
    60be:	movs	r2, #64	; 0x40
    60c0:	b.n	60b0 <FatFile::openRoot(FatVolume*)+0x24>
    60c2:	nop

000060c4 <FatFile::read(void*, unsigned int)>:
int FatFile::read(void* buf, size_t nbyte) {
    60c4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    60c8:	vpush	{d8}
  bool isReadable() const { return m_flags & FILE_FLAG_READ; }
    60cc:	ldrb	r3, [r0, #2]
    60ce:	sub	sp, #12
    60d0:	mov	r5, r0
  if (!isReadable()) {
    60d2:	lsls	r7, r3, #31
    60d4:	bpl.w	61f0 <FatFile::read(void*, unsigned int)+0x12c>
  bool isFile() const { return m_attributes & FILE_ATTR_FILE; }
    60d8:	mov	r8, r1
    60da:	ldrb	r1, [r0, #0]
    60dc:	mov	sl, r2
  if (isFile()) {
    60de:	lsls	r6, r1, #28
    60e0:	bmi.w	6206 <FatFile::read(void*, unsigned int)+0x142>
  } else if (isRootFixed()) {
    60e4:	lsls	r4, r1, #25
    60e6:	bpl.n	60fa <FatFile::read(void*, unsigned int)+0x36>
        FS_DIR_SIZE * m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    60e8:	ldr	r3, [r0, #8]
    60ea:	ldrh	r2, [r3, #8]
    60ec:	ldr	r3, [r0, #20]
    uint16_t tmp16 =
    60ee:	rsb	r3, r3, r2, lsl #5
    if (nbyte > tmp16) {
    60f2:	uxth	r3, r3
    60f4:	cmp	sl, r3
    60f6:	it	cs
    60f8:	movcs	sl, r3
  while (toRead) {
    60fa:	cmp.w	sl, #0
    60fe:	beq.w	6260 <FatFile::read(void*, unsigned int)+0x19c>
    uint32_t tmp32 = m_fileSize - m_curPosition;
    6102:	ldr	r2, [r5, #20]
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    6104:	add.w	r3, r5, #16
    if (isRootFixed()) {
    6108:	lsls	r0, r1, #25
    uint32_t tmp32 = m_fileSize - m_curPosition;
    610a:	mov	r6, sl
  uint8_t sectorOfCluster = 0;
    610c:	mov.w	r9, #0
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    6110:	vmov	s16, r3
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    6114:	ldr	r7, [r5, #8]
    6116:	ubfx	fp, r2, #0, #9
    if (isRootFixed()) {
    611a:	bpl.n	6198 <FatFile::read(void*, unsigned int)+0xd4>
      sector = m_vol->rootDirStart() +
    611c:	ldr	r1, [r7, #32]
    611e:	add.w	r1, r1, r2, lsr #9
    if (offset != 0 || toRead < m_vol->bytesPerSector() ||
    6122:	cmp.w	fp, #0
    6126:	bne.n	61cc <FatFile::read(void*, unsigned int)+0x108>
    6128:	cmp.w	r6, #512	; 0x200
    612c:	bcc.n	61cc <FatFile::read(void*, unsigned int)+0x108>
  uint32_t sector() { return m_sector; }
    612e:	ldr	r2, [r7, #44]	; 0x2c
    6130:	cmp	r1, r2
    6132:	beq.n	61cc <FatFile::read(void*, unsigned int)+0x108>
    } else if (toRead >= 2 * m_vol->bytesPerSector()) {
    6134:	cmp.w	r6, #1024	; 0x400
    6138:	bcc.w	6240 <FatFile::read(void*, unsigned int)+0x17c>
      if (!isRootFixed()) {
    613c:	ldrb	r0, [r5, #0]
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    613e:	lsrs	r3, r6, #9
      if (!isRootFixed()) {
    6140:	lsls	r0, r0, #25
    6142:	bmi.n	6150 <FatFile::read(void*, unsigned int)+0x8c>
        uint32_t mb = m_vol->sectorsPerCluster() - sectorOfCluster;
    6144:	ldrb	r0, [r7, #4]
    6146:	sub.w	r0, r0, r9
    614a:	cmp	r3, r0
    614c:	it	cs
    614e:	movcs	r3, r0
    return sector <= m_sector && m_sector < (sector + count);
    6150:	cmp	r1, r2
      n = ns << m_vol->bytesPerSectorShift();
    6152:	mov.w	r4, r3, lsl #9
    6156:	bhi.n	6172 <FatFile::read(void*, unsigned int)+0xae>
    6158:	adds	r0, r1, r3
    615a:	cmp	r2, r0
    615c:	bcs.n	6172 <FatFile::read(void*, unsigned int)+0xae>
    if (isCached(sector, count) && !sync()) {
    615e:	add.w	r0, r7, #36	; 0x24
    6162:	strd	r1, r3, [sp]
    6166:	bl	3174 <FsCache::sync()>
    616a:	ldrd	r1, r3, [sp]
    616e:	cmp	r0, #0
    6170:	beq.n	61f0 <FatFile::read(void*, unsigned int)+0x12c>
    return m_blockDev->readSectors(sector, dst, count);
    6172:	ldr	r0, [r7, #40]	; 0x28
    6174:	ldr	r2, [r0, #0]
    6176:	ldr	r7, [r2, #20]
    6178:	mov	r2, r8
    617a:	blx	r7
      if (!m_vol->cacheSafeRead(sector, dst, ns)) {
    617c:	cmp	r0, #0
    617e:	beq.n	61f0 <FatFile::read(void*, unsigned int)+0x12c>
    m_curPosition += n;
    6180:	ldr	r2, [r5, #20]
  while (toRead) {
    6182:	subs	r6, r6, r4
    dst += n;
    6184:	add	r8, r4
    m_curPosition += n;
    6186:	add	r2, r4
    6188:	str	r2, [r5, #20]
  while (toRead) {
    618a:	beq.n	6260 <FatFile::read(void*, unsigned int)+0x19c>
  bool isRootFixed() const { return m_attributes & FILE_ATTR_ROOT_FIXED; }
    618c:	ldrb	r1, [r5, #0]
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    618e:	ubfx	fp, r2, #0, #9
    6192:	ldr	r7, [r5, #8]
    if (isRootFixed()) {
    6194:	lsls	r0, r1, #25
    6196:	bmi.n	611c <FatFile::read(void*, unsigned int)+0x58>
    return (position >> 9) & m_clusterSectorMask;
    6198:	ldrb.w	r9, [r7, #5]
    619c:	and.w	r9, r9, r2, lsr #9
      if (offset == 0 && sectorOfCluster == 0) {
    61a0:	cmp.w	fp, #0
    61a4:	bne.n	6214 <FatFile::read(void*, unsigned int)+0x150>
    61a6:	cmp.w	r9, #0
    61aa:	bne.n	6214 <FatFile::read(void*, unsigned int)+0x150>
        if (m_curPosition == 0) {
    61ac:	cmp	r2, #0
    61ae:	bne.n	6218 <FatFile::read(void*, unsigned int)+0x154>
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    61b0:	lsls	r2, r1, #24
  uint32_t rootDirStart() const { return m_rootDirStart; }
    61b2:	ite	mi
    61b4:	ldrmi	r2, [r7, #32]
    61b6:	ldrpl	r2, [r5, #32]
          m_curCluster++;
    61b8:	str	r2, [r5, #16]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    61ba:	subs	r2, #2
    61bc:	ldrb	r0, [r7, #6]
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    61be:	ldr	r1, [r7, #20]
    61c0:	lsls	r2, r0
    61c2:	add	r1, r9
    61c4:	add	r1, r2
    if (offset != 0 || toRead < m_vol->bytesPerSector() ||
    61c6:	cmp.w	fp, #0
    61ca:	beq.n	6128 <FatFile::read(void*, unsigned int)+0x64>
      n = m_vol->bytesPerSector() - offset;
    61cc:	rsb	r4, fp, #512	; 0x200
    return m_cache.prepare(sector, options);
    61d0:	movs	r2, #0
    61d2:	add.w	r0, r7, #36	; 0x24
    61d6:	cmp	r4, r6
    61d8:	it	cs
    61da:	movcs	r4, r6
    61dc:	bl	31cc <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    61e0:	cbz	r0, 61f0 <FatFile::read(void*, unsigned int)+0x12c>
      memcpy(dst, src, n);
    61e2:	add.w	r1, r0, fp
    61e6:	mov	r2, r4
    61e8:	mov	r0, r8
    61ea:	bl	a0c4 <memcpy>
    61ee:	b.n	6180 <FatFile::read(void*, unsigned int)+0xbc>
  m_error |= READ_ERROR;
    61f0:	ldrb	r3, [r5, #1]
  return -1;
    61f2:	mov.w	r0, #4294967295
  m_error |= READ_ERROR;
    61f6:	orr.w	r3, r3, #2
    61fa:	strb	r3, [r5, #1]
}
    61fc:	add	sp, #12
    61fe:	vpop	{d8}
    6202:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    uint32_t tmp32 = m_fileSize - m_curPosition;
    6206:	ldr	r3, [r0, #28]
    6208:	ldr	r2, [r0, #20]
    620a:	subs	r3, r3, r2
    620c:	cmp	sl, r3
    620e:	it	cs
    6210:	movcs	sl, r3
    6212:	b.n	60fa <FatFile::read(void*, unsigned int)+0x36>
          m_curCluster++;
    6214:	ldr	r2, [r5, #16]
    6216:	b.n	61ba <FatFile::read(void*, unsigned int)+0xf6>
        } else if (isFile() && isContiguous()) {
    6218:	lsls	r3, r1, #28
    621a:	bpl.n	6228 <FatFile::read(void*, unsigned int)+0x164>
    621c:	ldrb	r2, [r5, #2]
    621e:	lsls	r4, r2, #25
    6220:	bpl.n	6228 <FatFile::read(void*, unsigned int)+0x164>
          m_curCluster++;
    6222:	ldr	r2, [r5, #16]
    6224:	adds	r2, #1
    6226:	b.n	61b8 <FatFile::read(void*, unsigned int)+0xf4>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    6228:	vmov	r2, s16
    622c:	mov	r0, r7
    622e:	ldr	r1, [r5, #16]
    6230:	bl	6b8c <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    6234:	cmp	r0, #0
    6236:	blt.n	61f0 <FatFile::read(void*, unsigned int)+0x12c>
          if (fg == 0) {
    6238:	beq.n	6254 <FatFile::read(void*, unsigned int)+0x190>
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    623a:	ldr	r7, [r5, #8]
    623c:	ldr	r2, [r5, #16]
    623e:	b.n	61ba <FatFile::read(void*, unsigned int)+0xf6>
    return m_blockDev->readSector(sector, dst);
    6240:	ldr	r0, [r7, #40]	; 0x28
    6242:	mov	r2, r8
    6244:	ldr	r3, [r0, #0]
    6246:	ldr	r3, [r3, #16]
    6248:	blx	r3
      if (!m_vol->cacheSafeRead(sector, dst)) {
    624a:	cmp	r0, #0
    624c:	beq.n	61f0 <FatFile::read(void*, unsigned int)+0x12c>
      n = m_vol->bytesPerSector();
    624e:	mov.w	r4, #512	; 0x200
    6252:	b.n	6180 <FatFile::read(void*, unsigned int)+0xbc>
            if (isDir()) {
    6254:	ldrb	r3, [r5, #0]
    6256:	tst.w	r3, #208	; 0xd0
    625a:	beq.n	61f0 <FatFile::read(void*, unsigned int)+0x12c>
  return nbyte - toRead;
    625c:	sub.w	sl, sl, r6
    6260:	mov	r0, sl
}
    6262:	add	sp, #12
    6264:	vpop	{d8}
    6268:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000626c <FatFile::peek()>:
int FatFile::peek() {
    626c:	push	{r4, r5, r6, lr}
    626e:	sub	sp, #8
    return read(&b, 1) == 1 ? b : -1;
    6270:	movs	r2, #1
    6272:	mov	r4, r0
    6274:	add.w	r1, sp, #7
  uint32_t saveCurCluster = m_curCluster;
    6278:	ldrd	r5, r6, [r0, #16]
    627c:	bl	60c4 <FatFile::read(void*, unsigned int)>
    6280:	cmp	r0, #1
    6282:	ite	eq
    6284:	ldrbeq.w	r0, [sp, #7]
    6288:	movne.w	r0, #4294967295
  m_curCluster = saveCurCluster;
    628c:	strd	r5, r6, [r4, #16]
}
    6290:	add	sp, #8
    6292:	pop	{r4, r5, r6, pc}

00006294 <FatFile::readDirCache(bool)>:
  uint8_t i = (m_curPosition >> 5) & 0XF;
    6294:	ldr	r3, [r0, #20]
  if (i == 0 || !skipReadOk) {
    6296:	tst.w	r3, #480	; 0x1e0
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
    629a:	push	{r4, r5, lr}
    629c:	mov	r4, r0
    629e:	sub	sp, #12
  uint8_t i = (m_curPosition >> 5) & 0XF;
    62a0:	ubfx	r5, r3, #5, #4
  if (i == 0 || !skipReadOk) {
    62a4:	beq.n	62ba <FatFile::readDirCache(bool)+0x26>
    62a6:	cmp	r1, #1
    62a8:	bne.n	62ba <FatFile::readDirCache(bool)+0x26>
    m_curPosition += FS_DIR_SIZE;
    62aa:	adds	r3, #32
    62ac:	str	r3, [r0, #20]
  uint8_t* cacheBuffer() { return m_buffer; }
    62ae:	ldr	r0, [r4, #8]
    62b0:	adds	r0, #52	; 0x34
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    62b2:	add.w	r0, r0, r5, lsl #5
}
    62b6:	add	sp, #12
    62b8:	pop	{r4, r5, pc}
    int8_t n = read(&n, 1);
    62ba:	movs	r2, #1
    62bc:	add.w	r1, sp, #7
    62c0:	mov	r0, r4
    62c2:	bl	60c4 <FatFile::read(void*, unsigned int)>
    if (n != 1) {
    62c6:	sxtb	r0, r0
    62c8:	cmp	r0, #1
    62ca:	bne.n	62d4 <FatFile::readDirCache(bool)+0x40>
    m_curPosition += FS_DIR_SIZE - 1;
    62cc:	ldr	r3, [r4, #20]
    62ce:	adds	r3, #31
    62d0:	str	r3, [r4, #20]
    62d2:	b.n	62ae <FatFile::readDirCache(bool)+0x1a>
  return nullptr;
    62d4:	movs	r0, #0
    62d6:	b.n	62b6 <FatFile::readDirCache(bool)+0x22>

000062d8 <FatFile::rename(FatFile*, char const*)>:
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    62d8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!(isFile() || isSubDir())) {
    62dc:	ldrb	r3, [r0, #0]
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    62de:	sub	sp, #104	; 0x68
  FatFile() {}
    62e0:	movs	r6, #0
  if (!(isFile() || isSubDir())) {
    62e2:	tst.w	r3, #24
    62e6:	str	r6, [sp, #32]
    62e8:	str	r6, [sp, #68]	; 0x44
    62ea:	beq.n	62fa <FatFile::rename(FatFile*, char const*)+0x22>
    62ec:	mov	r7, r2
  if (m_vol != dirFile->m_vol) {
    62ee:	ldr	r3, [r0, #8]
    62f0:	ldr	r2, [r1, #8]
    62f2:	mov	r4, r0
    62f4:	mov	r5, r1
    62f6:	cmp	r2, r3
    62f8:	beq.n	6302 <FatFile::rename(FatFile*, char const*)+0x2a>
  return false;
    62fa:	movs	r0, #0
}
    62fc:	add	sp, #104	; 0x68
    62fe:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6302:	bl	5aa0 <FatFile::sync() [clone .part.0]>
  oldFile = *this;
    6306:	mov	lr, r4
    6308:	add.w	ip, sp, #68	; 0x44
    630c:	ldmia.w	lr!, {r0, r1, r2, r3}
    6310:	stmia.w	ip!, {r0, r1, r2, r3}
    6314:	ldmia.w	lr!, {r0, r1, r2, r3}
    6318:	stmia.w	ip!, {r0, r1, r2, r3}
    631c:	ldr.w	r3, [lr]
    6320:	mov	r2, r6
    6322:	ldr	r1, [r4, #24]
    6324:	str.w	r3, [ip]
    6328:	ldr	r3, [r4, #8]
    632a:	add.w	r0, r3, #36	; 0x24
    632e:	bl	31cc <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    6332:	cmp	r0, #0
    6334:	beq.n	62fa <FatFile::rename(FatFile*, char const*)+0x22>
  return dir + (m_dirIndex & 0XF);
    6336:	ldrh	r2, [r4, #4]
  memcpy(&entry, dir, sizeof(entry));
    6338:	mov	ip, sp
  if (isFile()) {
    633a:	ldrb.w	r8, [r4]
  return dir + (m_dirIndex & 0XF);
    633e:	and.w	r2, r2, #15
  memcpy(&entry, dir, sizeof(entry));
    6342:	add.w	lr, r0, r2, lsl #5
    6346:	lsls	r2, r2, #5
    6348:	ldr.w	r1, [lr, #4]
    634c:	ldr	r0, [r0, r2]
    634e:	ldr.w	r3, [lr, #12]
    6352:	ldr.w	r2, [lr, #8]
    6356:	stmia.w	ip!, {r0, r1, r2, r3}
    635a:	ldr.w	r1, [lr, #20]
    635e:	ldr.w	r2, [lr, #24]
    6362:	ldr.w	r3, [lr, #28]
    6366:	ldr.w	r0, [lr, #16]
    636a:	stmia.w	ip!, {r0, r1, r2, r3}
  if (isFile()) {
    636e:	ands.w	r3, r8, #8
    if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    6372:	mov	r2, r7
    6374:	mov	r1, r5
  if (isFile()) {
    6376:	bne.w	64b0 <FatFile::rename(FatFile*, char const*)+0x1d8>
    if (!file.mkdir(dirFile, newPath, false)) {
    637a:	add	r0, sp, #32
    637c:	bl	5e48 <FatFile::mkdir(FatFile*, char const*, bool)>
    6380:	cmp	r0, #0
    6382:	beq.n	62fa <FatFile::rename(FatFile*, char const*)+0x22>
    dirCluster = file.m_firstCluster;
    6384:	ldr	r6, [sp, #64]	; 0x40
  m_dirIndex = file.m_dirIndex;
    6386:	ldrh.w	r3, [sp, #36]	; 0x24
  file.m_attributes = FILE_ATTR_CLOSED;
    638a:	movs	r5, #0
  m_dirSector = file.m_dirSector;
    638c:	ldr	r1, [sp, #56]	; 0x38
    638e:	movs	r2, #1
  m_dirIndex = file.m_dirIndex;
    6390:	strh	r3, [r4, #4]
  m_lfnOrd = file.m_lfnOrd;
    6392:	ldrb.w	r3, [sp, #35]	; 0x23
    6396:	ldr	r0, [r4, #8]
    6398:	strb	r3, [r4, #3]
  m_dirCluster = file.m_dirCluster;
    639a:	ldr	r3, [sp, #44]	; 0x2c
    639c:	adds	r0, #36	; 0x24
  m_dirSector = file.m_dirSector;
    639e:	str	r1, [r4, #24]
  m_dirCluster = file.m_dirCluster;
    63a0:	str	r3, [r4, #12]
  file.m_attributes = FILE_ATTR_CLOSED;
    63a2:	strb.w	r5, [sp, #32]
  file.m_flags = 0;
    63a6:	strb.w	r5, [sp, #34]	; 0x22
    63aa:	bl	31cc <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    63ae:	cmp	r0, #0
    63b0:	beq.n	62fa <FatFile::rename(FatFile*, char const*)+0x22>
  return dir + (m_dirIndex & 0XF);
    63b2:	ldrh	r3, [r4, #4]
    63b4:	and.w	r3, r3, #15
    63b8:	add.w	r0, r0, r3, lsl #5
  memcpy(&dir->createTimeMs, &entry.createTimeMs,
    63bc:	ldr.w	r3, [sp, #13]
    63c0:	str.w	r3, [r0, #13]
    63c4:	ldr.w	r3, [sp, #17]
    63c8:	str.w	r3, [r0, #17]
    63cc:	ldr.w	r3, [sp, #21]
    63d0:	str.w	r3, [r0, #21]
    63d4:	ldr.w	r3, [sp, #25]
    63d8:	str.w	r3, [r0, #25]
    63dc:	ldrh.w	r3, [sp, #29]
    63e0:	strh.w	r3, [r0, #29]
    63e4:	ldrb.w	r3, [sp, #31]
    63e8:	strb	r3, [r0, #31]
  dir->attributes = entry.attributes;
    63ea:	ldrb.w	r3, [sp, #11]
    63ee:	strb	r3, [r0, #11]
  if (dirCluster) {
    63f0:	cmp	r6, #0
    63f2:	beq.n	646c <FatFile::rename(FatFile*, char const*)+0x194>
    uint32_t sector = m_vol->clusterStartSector(dirCluster);
    63f4:	ldr	r0, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    63f6:	subs	r3, r6, #2
    return m_cache.prepare(sector, options);
    63f8:	mov	r2, r5
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    63fa:	ldrb	r1, [r0, #6]
    return m_cache.prepare(sector, options);
    63fc:	adds	r0, #36	; 0x24
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    63fe:	lsls	r3, r1
    6400:	ldr.w	r1, [r0, #-16]
    return m_cache.prepare(sector, options);
    6404:	add	r1, r3
    6406:	bl	31cc <FsCache::prepare(unsigned long, unsigned char)>
    if (!dir) {
    640a:	mov	r5, r0
    640c:	cmp	r0, #0
    640e:	beq.w	62fa <FatFile::rename(FatFile*, char const*)+0x22>
    memcpy(&entry, &dir[1], sizeof(entry));
    6412:	ldr	r0, [r0, #32]
    6414:	mov	r7, sp
    6416:	ldr	r1, [r5, #36]	; 0x24
    6418:	ldr	r2, [r5, #40]	; 0x28
    641a:	ldr	r3, [r5, #44]	; 0x2c
    641c:	stmia	r7!, {r0, r1, r2, r3}
    641e:	ldr	r0, [r5, #48]	; 0x30
    6420:	ldr	r1, [r5, #52]	; 0x34
    6422:	ldr	r2, [r5, #56]	; 0x38
    6424:	ldr	r3, [r5, #60]	; 0x3c
    6426:	stmia	r7!, {r0, r1, r2, r3}
    if (!m_vol->freeChain(dirCluster)) {
    6428:	mov	r1, r6
    642a:	ldr	r0, [r4, #8]
    642c:	bl	6c98 <FatPartition::freeChain(unsigned long)>
    6430:	cmp	r0, #0
    6432:	beq.w	62fa <FatFile::rename(FatFile*, char const*)+0x22>
    sector = m_vol->clusterStartSector(m_firstCluster);
    6436:	ldr	r0, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    6438:	ldr	r3, [r4, #32]
    643a:	ldrb	r2, [r0, #6]
    return m_cache.prepare(sector, options);
    643c:	adds	r0, #36	; 0x24
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    643e:	subs	r3, #2
    6440:	ldr.w	r1, [r0, #-16]
    6444:	lsls	r3, r2
    return m_cache.prepare(sector, options);
    6446:	movs	r2, #1
    6448:	add	r1, r3
    644a:	bl	31cc <FsCache::prepare(unsigned long, unsigned char)>
    if (!dir) {
    644e:	mov	r6, r0
    6450:	cmp	r0, #0
    6452:	beq.w	62fa <FatFile::rename(FatFile*, char const*)+0x22>
    memcpy(&dir[1], &entry, sizeof(entry));
    6456:	mov	r5, sp
    6458:	ldmia	r5!, {r0, r1, r2, r3}
    645a:	str	r0, [r6, #32]
    645c:	str	r1, [r6, #36]	; 0x24
    645e:	str	r2, [r6, #40]	; 0x28
    6460:	str	r3, [r6, #44]	; 0x2c
    6462:	ldmia	r5!, {r0, r1, r2, r3}
    6464:	str	r0, [r6, #48]	; 0x30
    6466:	str	r1, [r6, #52]	; 0x34
    6468:	str	r2, [r6, #56]	; 0x38
    646a:	str	r3, [r6, #60]	; 0x3c
  oldFile.m_firstCluster = 0;
    646c:	movs	r1, #0
  oldFile.m_flags = FILE_FLAG_WRITE;
    646e:	movs	r2, #2
  oldFile.m_attributes = FILE_ATTR_FILE;
    6470:	movs	r3, #8
  if (!oldFile.remove()) {
    6472:	add	r0, sp, #68	; 0x44
  oldFile.m_firstCluster = 0;
    6474:	str	r1, [sp, #100]	; 0x64
  oldFile.m_flags = FILE_FLAG_WRITE;
    6476:	strb.w	r2, [sp, #70]	; 0x46
  oldFile.m_attributes = FILE_ATTR_FILE;
    647a:	strb.w	r3, [sp, #68]	; 0x44
  if (!oldFile.remove()) {
    647e:	bl	75e8 <FatFile::remove()>
    6482:	cmp	r0, #0
    6484:	beq.w	62fa <FatFile::rename(FatFile*, char const*)+0x22>
  return m_vol->cacheSync();
    6488:	ldr	r4, [r4, #8]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    648a:	add.w	r0, r4, #36	; 0x24
    648e:	bl	3174 <FsCache::sync()>
    6492:	cmp	r0, #0
    6494:	beq.w	62fa <FatFile::rename(FatFile*, char const*)+0x22>
    6498:	add.w	r0, r4, #564	; 0x234
    649c:	bl	3174 <FsCache::sync()>
    64a0:	cmp	r0, #0
    64a2:	beq.w	62fa <FatFile::rename(FatFile*, char const*)+0x22>
    64a6:	ldr	r0, [r4, #0]
  bool syncDevice() { return m_blockDev->syncDevice(); }
    64a8:	ldr	r3, [r0, #0]
    64aa:	ldr	r3, [r3, #28]
    64ac:	blx	r3
    64ae:	b.n	62fc <FatFile::rename(FatFile*, char const*)+0x24>
    if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    64b0:	movw	r3, #2561	; 0xa01
    64b4:	mov	r0, ip
    64b6:	bl	5f2c <FatFile::open(FatFile*, char const*, int)>
    64ba:	cmp	r0, #0
    64bc:	bne.w	6386 <FatFile::rename(FatFile*, char const*)+0xae>
    64c0:	b.n	62fa <FatFile::rename(FatFile*, char const*)+0x22>
    64c2:	nop

000064c4 <FatFile::rmdir()>:
  if (!isSubDir() || (!USE_LONG_FILE_NAMES && isLFN())) {
    64c4:	ldrb	r3, [r0, #0]
    64c6:	lsls	r2, r3, #27
    64c8:	bmi.n	64ce <FatFile::rmdir()+0xa>
}
    64ca:	movs	r0, #0
    64cc:	bx	lr
  if (pos == m_curPosition) {
    64ce:	ldr	r3, [r0, #20]
bool FatFile::rmdir() {
    64d0:	push	{r4, r5, lr}
    64d2:	mov	r4, r0
    64d4:	sub	sp, #12
  if (pos == m_curPosition) {
    64d6:	cbz	r3, 64e6 <FatFile::rmdir()+0x22>
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    64d8:	ldrb	r3, [r0, #2]
    m_curCluster = 0;
    64da:	movs	r2, #0
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    64dc:	bic.w	r3, r3, #32
  m_curPosition = pos;
    64e0:	strd	r2, r2, [r0, #16]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    64e4:	strb	r3, [r0, #2]
bool FatFile::rmdir() {
    64e6:	movs	r3, #0
    64e8:	b.n	650a <FatFile::rmdir()+0x46>
    m_curPosition += FS_DIR_SIZE;
    64ea:	str	r3, [r4, #20]
    64ec:	ldr	r3, [r4, #8]
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    64ee:	lsls	r2, r5, #5
    64f0:	adds	r3, #52	; 0x34
    if (dir->name[0] == FAT_NAME_FREE) {
    64f2:	ldrb	r2, [r3, r2]
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    64f4:	add.w	r3, r3, r5, lsl #5
    if (dir->name[0] == FAT_NAME_FREE) {
    64f8:	cbz	r2, 6536 <FatFile::rmdir()+0x72>
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    64fa:	cmp	r2, #229	; 0xe5
    64fc:	beq.n	6508 <FatFile::rmdir()+0x44>
    64fe:	cmp	r2, #46	; 0x2e
    6500:	beq.n	6508 <FatFile::rmdir()+0x44>
    if (isFatFileOrSubdir(dir)) {
    6502:	ldrb	r3, [r3, #11]
    6504:	lsls	r3, r3, #28
    6506:	bpl.n	654e <FatFile::rmdir()+0x8a>
  uint8_t i = (m_curPosition >> 5) & 0XF;
    6508:	ldr	r3, [r4, #20]
  if (i == 0 || !skipReadOk) {
    650a:	tst.w	r3, #480	; 0x1e0
  uint8_t i = (m_curPosition >> 5) & 0XF;
    650e:	ubfx	r5, r3, #5, #4
    m_curPosition += FS_DIR_SIZE;
    6512:	add.w	r3, r3, #32
  if (i == 0 || !skipReadOk) {
    6516:	bne.n	64ea <FatFile::rmdir()+0x26>
    int8_t n = read(&n, 1);
    6518:	movs	r2, #1
    651a:	add.w	r1, sp, #7
    651e:	mov	r0, r4
    6520:	bl	60c4 <FatFile::read(void*, unsigned int)>
    if (n != 1) {
    6524:	sxtb	r0, r0
    6526:	cmp	r0, #1
    6528:	bne.n	6532 <FatFile::rmdir()+0x6e>
    m_curPosition += FS_DIR_SIZE - 1;
    652a:	ldr	r3, [r4, #20]
    652c:	adds	r3, #31
    652e:	str	r3, [r4, #20]
    6530:	b.n	64ec <FatFile::rmdir()+0x28>
      if (!getError()) {
    6532:	ldrb	r3, [r4, #1]
    6534:	cbnz	r3, 654e <FatFile::rmdir()+0x8a>
  m_flags |= FILE_FLAG_WRITE;
    6536:	ldrb	r3, [r4, #2]
  m_attributes = FILE_ATTR_FILE;
    6538:	movs	r2, #8
  return remove();
    653a:	mov	r0, r4
  m_flags |= FILE_FLAG_WRITE;
    653c:	orr.w	r3, r3, #2
  m_attributes = FILE_ATTR_FILE;
    6540:	strb	r2, [r4, #0]
  m_flags |= FILE_FLAG_WRITE;
    6542:	strb	r3, [r4, #2]
}
    6544:	add	sp, #12
    6546:	ldmia.w	sp!, {r4, r5, lr}
  return remove();
    654a:	b.w	75e8 <FatFile::remove()>
}
    654e:	movs	r0, #0
    6550:	add	sp, #12
    6552:	pop	{r4, r5, pc}

00006554 <FatFile::seekSet(unsigned long)>:
bool FatFile::seekSet(uint32_t pos) {
    6554:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  bool isOpen() const { return m_attributes; }
    6558:	ldrb	r3, [r0, #0]
    655a:	mov	r4, r0
  uint32_t tmp = m_curCluster;
    655c:	ldr	r7, [r0, #16]
  if (!isOpen()) {
    655e:	cmp	r3, #0
    6560:	beq.n	65d6 <FatFile::seekSet(unsigned long)+0x82>
    6562:	mov	r5, r1
  if (pos == m_curPosition) {
    6564:	ldr	r1, [r0, #20]
    6566:	cmp	r1, r5
    6568:	beq.n	65f0 <FatFile::seekSet(unsigned long)+0x9c>
  if (pos == 0) {
    656a:	cmp	r5, #0
    656c:	beq.n	65de <FatFile::seekSet(unsigned long)+0x8a>
  if (isFile()) {
    656e:	lsls	r0, r3, #28
    6570:	bpl.n	65c8 <FatFile::seekSet(unsigned long)+0x74>
    if (pos > m_fileSize) {
    6572:	ldr	r2, [r4, #28]
    6574:	cmp	r2, r5
    6576:	bcc.n	65d6 <FatFile::seekSet(unsigned long)+0x82>
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    6578:	ldr.w	ip, [r4, #8]
    657c:	subs	r6, r5, #1
  bool isContiguous() const { return m_flags & FILE_FLAG_CONTIGUOUS; }
    657e:	ldrb	r2, [r4, #2]
    return m_sectorsPerClusterShift + m_bytesPerSectorShift;
    6580:	ldrb.w	r0, [ip, #6]
  if (isContiguous()) {
    6584:	tst.w	r2, #64	; 0x40
    6588:	add.w	r0, r0, #9
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    658c:	uxtb	r0, r0
    658e:	lsr.w	r6, r6, r0
  if (isContiguous()) {
    6592:	bne.n	65f6 <FatFile::seekSet(unsigned long)+0xa2>
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());
    6594:	subs	r2, r1, #1
    6596:	lsrs	r2, r0
  if (nNew < nCur || m_curPosition == 0) {
    6598:	cbz	r1, 659e <FatFile::seekSet(unsigned long)+0x4a>
    659a:	cmp	r6, r2
    659c:	bcs.n	65fe <FatFile::seekSet(unsigned long)+0xaa>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    659e:	lsls	r3, r3, #24
  uint32_t rootDirStart() const { return m_rootDirStart; }
    65a0:	ite	mi
    65a2:	ldrmi.w	r3, [ip, #32]
    65a6:	ldrpl	r3, [r4, #32]
    65a8:	str	r3, [r4, #16]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    65aa:	add.w	r8, r4, #16
    65ae:	b.n	65be <FatFile::seekSet(unsigned long)+0x6a>
    65b0:	ldr	r1, [r4, #16]
    65b2:	subs	r6, #1
    65b4:	ldr	r0, [r4, #8]
    65b6:	bl	6b8c <FatPartition::fatGet(unsigned long, unsigned long*)>
    65ba:	cmp	r0, #0
    65bc:	ble.n	65d6 <FatFile::seekSet(unsigned long)+0x82>
    65be:	mov	r2, r8
  while (nNew--) {
    65c0:	cmp	r6, #0
    65c2:	bne.n	65b0 <FatFile::seekSet(unsigned long)+0x5c>
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    65c4:	ldrb	r2, [r4, #2]
    65c6:	b.n	65e2 <FatFile::seekSet(unsigned long)+0x8e>
  } else if (isRootFixed()) {
    65c8:	lsls	r2, r3, #25
    65ca:	bpl.n	6578 <FatFile::seekSet(unsigned long)+0x24>
  uint16_t rootDirEntryCount() const { return m_rootDirEntryCount; }
    65cc:	ldr	r3, [r4, #8]
    if (pos <= FS_DIR_SIZE * m_vol->rootDirEntryCount()) {
    65ce:	ldrh	r3, [r3, #8]
    65d0:	cmp.w	r5, r3, lsl #5
    65d4:	bls.n	65c4 <FatFile::seekSet(unsigned long)+0x70>
  return false;
    65d6:	movs	r0, #0
  m_curCluster = tmp;
    65d8:	str	r7, [r4, #16]
}
    65da:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    65de:	ldrb	r2, [r0, #2]
    m_curCluster = 0;
    65e0:	str	r5, [r0, #16]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    65e2:	bic.w	r2, r2, #32
  return true;
    65e6:	movs	r0, #1
  m_curPosition = pos;
    65e8:	str	r5, [r4, #20]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    65ea:	strb	r2, [r4, #2]
}
    65ec:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return true;
    65f0:	movs	r0, #1
}
    65f2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_curCluster = m_firstCluster + nNew;
    65f6:	ldr	r3, [r4, #32]
    65f8:	add	r3, r6
    65fa:	str	r3, [r4, #16]
    goto done;
    65fc:	b.n	65e2 <FatFile::seekSet(unsigned long)+0x8e>
    nNew -= nCur;
    65fe:	subs	r6, r6, r2
    6600:	b.n	65aa <FatFile::seekSet(unsigned long)+0x56>
    6602:	nop

00006604 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>:
                              oflag_t oflag, uint8_t lfnOrd) {
    6604:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6608:	mov	r6, r1
    660a:	mov	r5, r2
  memset(this, 0, sizeof(FatFile));
    660c:	movs	r1, #0
    660e:	movs	r2, #36	; 0x24
                              oflag_t oflag, uint8_t lfnOrd) {
    6610:	mov	r4, r0
    6612:	mov	r8, r3
    6614:	ldrb.w	r7, [sp, #24]
  memset(this, 0, sizeof(FatFile));
    6618:	bl	e064 <memset>
  m_vol = dirFile->m_vol;
    661c:	ldr	r0, [r6, #8]
  m_dirCluster = dirFile->m_firstCluster;
    661e:	ldr	r3, [r6, #32]
    6620:	add.w	r2, r0, #52	; 0x34
  m_dirIndex = dirIndex;
    6624:	strh	r5, [r4, #4]
  dir += 0XF & dirIndex;
    6626:	and.w	r5, r5, #15
    662a:	add.w	r2, r2, r5, lsl #5
  m_vol = dirFile->m_vol;
    662e:	strd	r0, r3, [r4, #8]
  return (dir->attributes & FAT_ATTRIB_LABEL) == 0;
    6632:	ldrb	r1, [r2, #11]
  if (!isFatFileOrSubdir(dir)) {
    6634:	lsls	r3, r1, #28
    6636:	bmi.n	665c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
  m_attributes = dir->attributes & FS_ATTRIB_COPY;
    6638:	and.w	r1, r1, #55	; 0x37
    663c:	strb	r1, [r4, #0]
  if (isFatFile(dir)) {
    663e:	ldrb	r3, [r2, #11]
    6640:	tst.w	r3, #24
    6644:	bne.n	664c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x48>
    m_attributes |= FILE_ATTR_FILE;
    6646:	orr.w	r1, r1, #8
    664a:	strb	r1, [r4, #0]
  switch (oflag & O_ACCMODE) {
    664c:	and.w	r3, r8, #3
  m_lfnOrd = lfnOrd;
    6650:	strb	r7, [r4, #3]
  switch (oflag & O_ACCMODE) {
    6652:	cmp	r3, #1
    6654:	beq.n	66d0 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xcc>
    6656:	cmp	r3, #2
    6658:	beq.n	6668 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x64>
    665a:	cbz	r3, 66a2 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x9e>
  m_attributes = FILE_ATTR_CLOSED;
    665c:	movs	r3, #0
  return false;
    665e:	mov	r0, r3
  m_attributes = FILE_ATTR_CLOSED;
    6660:	strb	r3, [r4, #0]
  m_flags = 0;
    6662:	strb	r3, [r4, #2]
}
    6664:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (oflag & O_ACCMODE) {
    6668:	movs	r3, #3
  bool isSubDir() const { return m_attributes & FILE_ATTR_SUBDIR; }
    666a:	ldrb	r1, [r4, #0]
      m_flags = FILE_FLAG_WRITE;
    666c:	strb	r3, [r4, #2]
    if (isSubDir() || isReadOnly()) {
    666e:	lsls	r5, r1, #27
    6670:	bmi.n	665c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
    6672:	lsls	r6, r1, #31
    6674:	bmi.n	665c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
    m_attributes |= FS_ATTRIB_ARCHIVE;
    6676:	orr.w	r1, r1, #32
  if (oflag & O_TRUNC) {
    667a:	tst.w	r8, #1024	; 0x400
    m_attributes |= FS_ATTRIB_ARCHIVE;
    667e:	strb	r1, [r4, #0]
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    6680:	and.w	r1, r8, #8
    6684:	orr.w	r3, r3, r1
    6688:	strb	r3, [r4, #2]
  uint32_t sector() { return m_sector; }
    668a:	ldr	r1, [r0, #44]	; 0x2c
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16) |
    668c:	ldrh	r5, [r2, #20]
  m_dirSector = m_vol->cacheSectorNumber();
    668e:	str	r1, [r4, #24]
                 getLe16(dir->firstClusterLow);
    6690:	ldrh	r1, [r2, #26]
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16) |
    6692:	orr.w	r1, r1, r5, lsl #16
  if (oflag & O_TRUNC) {
    6696:	beq.n	66be <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xba>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    6698:	cbnz	r1, 66e2 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xde>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    669a:	orn	r3, r3, #127	; 0x7f
    669e:	strb	r3, [r4, #2]
    66a0:	b.n	66c4 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xc0>
      if (oflag & O_TRUNC) {
    66a2:	tst.w	r8, #1024	; 0x400
    66a6:	bne.n	665c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    66a8:	and.w	r3, r8, #8
    66ac:	orr.w	r3, r3, #1
    66b0:	strb	r3, [r4, #2]
    66b2:	ldr	r1, [r0, #44]	; 0x2c
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16) |
    66b4:	ldrh	r3, [r2, #20]
  m_dirSector = m_vol->cacheSectorNumber();
    66b6:	str	r1, [r4, #24]
                 getLe16(dir->firstClusterLow);
    66b8:	ldrh	r1, [r2, #26]
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16) |
    66ba:	orr.w	r1, r1, r3, lsl #16
    m_firstCluster = firstCluster;
    66be:	str	r1, [r4, #32]
  return *reinterpret_cast<const uint32_t*>(src);
    66c0:	ldr	r3, [r2, #28]
    m_fileSize = getLe32(dir->fileSize);
    66c2:	str	r3, [r4, #28]
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    66c4:	tst.w	r8, #16384	; 0x4000
    66c8:	bne.n	66d4 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xd0>
  return true;
    66ca:	movs	r0, #1
}
    66cc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (oflag & O_ACCMODE) {
    66d0:	movs	r3, #2
    66d2:	b.n	666a <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x66>
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    66d4:	ldr	r1, [r4, #28]
    66d6:	mov	r0, r4
    66d8:	bl	6554 <FatFile::seekSet(unsigned long)>
    66dc:	cmp	r0, #0
    66de:	bne.n	66ca <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xc6>
    66e0:	b.n	665c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    66e2:	bl	6c98 <FatPartition::freeChain(unsigned long)>
    66e6:	cmp	r0, #0
    66e8:	beq.n	665c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    66ea:	ldrb	r3, [r4, #2]
    66ec:	b.n	669a <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x96>
    66ee:	nop

000066f0 <FatFile::openNext(FatFile*, int)>:
  bool isOpen() const { return m_attributes; }
    66f0:	ldrb	r3, [r0, #0]
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    66f2:	cmp	r3, #0
    66f4:	bne.n	6782 <FatFile::openNext(FatFile*, int)+0x92>
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
    66f6:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    66fa:	ldrb	r3, [r1, #0]
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
    66fc:	sub	sp, #16
    66fe:	mov	r4, r1
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    6700:	tst.w	r3, #208	; 0xd0
    6704:	beq.n	6768 <FatFile::openNext(FatFile*, int)+0x78>
  uint32_t curPosition() const { return m_curPosition; }
    6706:	ldr	r3, [r1, #20]
    6708:	ands.w	r5, r3, #31
    670c:	bne.n	6768 <FatFile::openNext(FatFile*, int)+0x78>
    670e:	mov	r6, r0
    6710:	mov	r8, r2
    6712:	mov	r9, r5
    int8_t n = read(&n, 1);
    6714:	movs	r2, #1
    6716:	add.w	r1, sp, #15
    671a:	mov	r0, r4
  uint8_t i = (m_curPosition >> 5) & 0XF;
    671c:	ubfx	sl, r3, #5, #4
    index = dirFile->curPosition() / FS_DIR_SIZE;
    6720:	lsrs	r7, r3, #5
    int8_t n = read(&n, 1);
    6722:	bl	60c4 <FatFile::read(void*, unsigned int)>
    if (n != 1) {
    6726:	sxtb	r0, r0
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    6728:	mov.w	r2, sl, lsl #5
    if (n != 1) {
    672c:	cmp	r0, #1
    672e:	bne.n	6768 <FatFile::openNext(FatFile*, int)+0x78>
    m_curPosition += FS_DIR_SIZE - 1;
    6730:	ldr	r3, [r4, #20]
  uint8_t* cacheBuffer() { return m_buffer; }
    6732:	ldr	r1, [r4, #8]
    6734:	adds	r3, #31
    6736:	add.w	ip, r1, #52	; 0x34
    673a:	str	r3, [r4, #20]
    if (dir->name[0] == FAT_NAME_FREE) {
    673c:	ldrb.w	r2, [ip, r2]
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    6740:	add.w	ip, ip, sl, lsl #5
    if (dir->name[0] == FAT_NAME_FREE) {
    6744:	cbz	r2, 6768 <FatFile::openNext(FatFile*, int)+0x78>
    if (dir->name[0] == '.' || dir->name[0] == FAT_NAME_DELETED) {
    6746:	cmp	r2, #46	; 0x2e
    6748:	beq.n	6770 <FatFile::openNext(FatFile*, int)+0x80>
    674a:	sub.w	r0, r2, #229	; 0xe5
    674e:	clz	r0, r0
    6752:	lsrs	r0, r0, #5
    6754:	cbnz	r0, 6770 <FatFile::openNext(FatFile*, int)+0x80>
  return (dir->attributes & FAT_ATTRIB_LABEL) == 0;
    6756:	ldrb.w	r1, [ip, #11]
    } else if (isFatFileOrSubdir(dir)) {
    675a:	ands.w	lr, r1, #8
    675e:	beq.n	6786 <FatFile::openNext(FatFile*, int)+0x96>
    } else if (isFatLongName(dir)) {
    6760:	cmp	r1, #15
    6762:	beq.n	6774 <FatFile::openNext(FatFile*, int)+0x84>
      lfnOrd = 0;
    6764:	mov	r5, r0
    6766:	b.n	6714 <FatFile::openNext(FatFile*, int)+0x24>
  return false;
    6768:	movs	r0, #0
}
    676a:	add	sp, #16
    676c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      lfnOrd = 0;
    6770:	movs	r5, #0
    6772:	b.n	6714 <FatFile::openNext(FatFile*, int)+0x24>
      if (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) {
    6774:	lsls	r1, r2, #25
    6776:	bpl.n	6714 <FatFile::openNext(FatFile*, int)+0x24>
        lfnOrd = ldir->order & 0X1F;
    6778:	and.w	r5, r2, #31
        checksum = ldir->checksum;
    677c:	ldrb.w	r9, [ip, #13]
    6780:	b.n	6714 <FatFile::openNext(FatFile*, int)+0x24>
  return false;
    6782:	movs	r0, #0
}
    6784:	bx	lr
      if (lfnOrd && checksum != lfnChecksum(dir->name)) {
    6786:	cbz	r5, 67aa <FatFile::openNext(FatFile*, int)+0xba>
  bool cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  bool createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  uint16_t getLfnChar(DirLfn_t* ldir, uint8_t i);
  uint8_t lfnChecksum(const uint8_t* name) {
    uint8_t sum = 0;
    for (uint8_t i = 0; i < 11; i++) {
    6788:	add.w	r1, ip, #10
    678c:	b.n	6792 <FatFile::openNext(FatFile*, int)+0xa2>
      sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    678e:	ldrb.w	r2, [ip, #1]!
    6792:	mov.w	r3, lr, lsl #7
    for (uint8_t i = 0; i < 11; i++) {
    6796:	cmp	r1, ip
      sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    6798:	orr.w	r3, r3, lr, lsr #1
    679c:	uxtab	r3, r2, r3
    67a0:	uxtb.w	lr, r3
    for (uint8_t i = 0; i < 11; i++) {
    67a4:	bne.n	678e <FatFile::openNext(FatFile*, int)+0x9e>
    67a6:	cmp	lr, r9
    67a8:	bne.n	6768 <FatFile::openNext(FatFile*, int)+0x78>
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
    67aa:	mov	r3, r8
    67ac:	uxth	r2, r7
    67ae:	mov	r1, r4
    67b0:	mov	r0, r6
    67b2:	str	r5, [sp, #0]
    67b4:	bl	6604 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    67b8:	b.n	676a <FatFile::openNext(FatFile*, int)+0x7a>
    67ba:	nop

000067bc <FatFile::sync()>:
  if (!isOpen()) {
    67bc:	ldrb	r3, [r0, #0]
    67be:	cbz	r3, 67c4 <FatFile::sync()+0x8>
    67c0:	b.w	5aa0 <FatFile::sync() [clone .part.0]>
}
    67c4:	movs	r0, #1
    67c6:	bx	lr

000067c8 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>:
//------------------------------------------------------------------------------
bool FatFile::timestamp(uint8_t flags, uint16_t year, uint8_t month,
                        uint8_t day, uint8_t hour, uint8_t minute,
                        uint8_t second) {
    67c8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    67cc:	mov	r6, r1
  uint16_t dirDate;
  uint16_t dirTime;
  DirFat_t* dir;

  if (!isFile() || year < 1980 || year > 2107 || month < 1 || month > 12 ||
      day < 1 || day > 31 || hour > 23 || minute > 59 || second > 59) {
    67ce:	ldrb	r1, [r0, #0]
                        uint8_t second) {
    67d0:	sub	sp, #8
      day < 1 || day > 31 || hour > 23 || minute > 59 || second > 59) {
    67d2:	lsls	r1, r1, #28
                        uint8_t second) {
    67d4:	ldrb.w	r7, [sp, #40]	; 0x28
    67d8:	ldrb.w	r9, [sp, #44]	; 0x2c
    67dc:	ldrb.w	sl, [sp, #48]	; 0x30
    67e0:	ldrb.w	r8, [sp, #52]	; 0x34
      day < 1 || day > 31 || hour > 23 || minute > 59 || second > 59) {
    67e4:	bpl.n	6818 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
  if (!isFile() || year < 1980 || year > 2107 || month < 1 || month > 12 ||
    67e6:	subw	r2, r2, #1980	; 0x7bc
    67ea:	uxth	r4, r2
    67ec:	cmp	r4, #127	; 0x7f
    67ee:	bhi.n	6818 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
    67f0:	subs	r2, r3, #1
    67f2:	str	r3, [sp, #4]
    67f4:	cmp	r2, #11
    67f6:	bhi.n	6818 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
      day < 1 || day > 31 || hour > 23 || minute > 59 || second > 59) {
    67f8:	subs	r2, r7, #1
    67fa:	cmp	r2, #30
    67fc:	bhi.n	6818 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
    67fe:	cmp.w	sl, #59	; 0x3b
    6802:	it	ls
    6804:	cmpls.w	r9, #23
    6808:	bhi.n	6818 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
    680a:	cmp.w	r8, #59	; 0x3b
    680e:	bhi.n	6818 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // update directory entry
  if (!sync()) {
    6810:	mov	r5, r0
  if (!isOpen()) {
    6812:	bl	5aa0 <FatFile::sync() [clone .part.0]>
  if (!sync()) {
    6816:	cbnz	r0, 6820 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x58>
  }
  return m_vol->cacheSync();

fail:
  return false;
}
    6818:	movs	r0, #0
    681a:	add	sp, #8
    681c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return m_cache.prepare(sector, options);
    6820:	ldr	r0, [r5, #8]
    6822:	movs	r2, #1
    6824:	ldr	r1, [r5, #24]
    6826:	adds	r0, #36	; 0x24
    6828:	bl	31cc <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    682c:	cmp	r0, #0
    682e:	beq.n	6818 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
                                              : year << 9 | month << 5 | day;
    6830:	ldr	r3, [sp, #4]
             : hour << 11 | minute << 5 | second >> 1;
    6832:	mov.w	r2, r8, lsr #1
  return dir + (m_dirIndex & 0XF);
    6836:	ldrh	r1, [r5, #4]
                                              : year << 9 | month << 5 | day;
    6838:	orr.w	r3, r7, r3, lsl #5
  if (flags & T_ACCESS) {
    683c:	lsls	r7, r6, #31
  return dir + (m_dirIndex & 0XF);
    683e:	and.w	r1, r1, #15
             : hour << 11 | minute << 5 | second >> 1;
    6842:	orr.w	r2, r2, sl, lsl #5
                                              : year << 9 | month << 5 | day;
    6846:	orr.w	r3, r3, r4, lsl #9
    684a:	add.w	r0, r0, r1, lsl #5
    684e:	uxth	r3, r3
             : hour << 11 | minute << 5 | second >> 1;
    6850:	orr.w	r2, r2, r9, lsl #11
  *reinterpret_cast<uint16_t*>(dst) = src;
    6854:	it	mi
    6856:	strhmi	r3, [r0, #18]
  if (flags & T_CREATE) {
    6858:	lsls	r4, r6, #30
    685a:	uxth	r2, r2
    685c:	bpl.n	6870 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xa8>
    dir->createTimeMs = second & 1 ? 100 : 0;
    685e:	ands.w	r8, r8, #1
    6862:	strh	r3, [r0, #16]
    6864:	strh	r2, [r0, #14]
    6866:	it	ne
    6868:	movne.w	r8, #100	; 0x64
    686c:	strb.w	r8, [r0, #13]
  if (flags & T_WRITE) {
    6870:	lsls	r1, r6, #29
    6872:	bpl.n	6878 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xb0>
    6874:	strh	r3, [r0, #24]
    6876:	strh	r2, [r0, #22]
  return m_vol->cacheSync();
    6878:	ldr	r4, [r5, #8]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    687a:	add.w	r0, r4, #36	; 0x24
    687e:	bl	3174 <FsCache::sync()>
    6882:	cmp	r0, #0
    6884:	beq.n	6818 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
    6886:	add.w	r0, r4, #564	; 0x234
    688a:	bl	3174 <FsCache::sync()>
    688e:	cmp	r0, #0
    6890:	beq.n	6818 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
    6892:	ldr	r0, [r4, #0]
  bool syncDevice() { return m_blockDev->syncDevice(); }
    6894:	ldr	r3, [r0, #0]
    6896:	ldr	r3, [r3, #28]
}
    6898:	add	sp, #8
    689a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    689e:	bx	r3

000068a0 <FatFile::truncate()>:
//------------------------------------------------------------------------------
bool FatFile::truncate() {
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    68a0:	ldrb	r3, [r0, #2]
    68a2:	lsls	r3, r3, #30
    68a4:	bpl.n	68f6 <FatFile::truncate()+0x56>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    68a6:	ldr	r3, [r0, #32]
bool FatFile::truncate() {
    68a8:	push	{r4, lr}
    68aa:	mov	r4, r0
    68ac:	sub	sp, #8
  if (m_firstCluster == 0) {
    68ae:	cbz	r3, 68dc <FatFile::truncate()+0x3c>
    return true;
  }
  if (m_curCluster) {
    68b0:	ldr	r1, [r0, #16]
    68b2:	cbnz	r1, 68fa <FatFile::truncate()+0x5a>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  } else {
    toFree = m_firstCluster;
    68b4:	str	r3, [sp, #4]
    m_firstCluster = 0;
    68b6:	str	r1, [r0, #32]
  }
  if (toFree) {
    if (!m_vol->freeChain(toFree)) {
    68b8:	mov	r1, r3
    68ba:	ldr	r0, [r4, #8]
    68bc:	bl	6c98 <FatPartition::freeChain(unsigned long)>
    68c0:	cbz	r0, 68f0 <FatFile::truncate()+0x50>
    }
  }
  m_fileSize = m_curPosition;

  // need to update directory entry
  m_flags |= FILE_FLAG_DIR_DIRTY;
    68c2:	ldrb	r3, [r4, #2]
  m_fileSize = m_curPosition;
    68c4:	ldr	r1, [r4, #20]
  m_flags |= FILE_FLAG_DIR_DIRTY;
    68c6:	orn	r3, r3, #127	; 0x7f
  if (!isOpen()) {
    68ca:	ldrb	r2, [r4, #0]
  m_fileSize = m_curPosition;
    68cc:	str	r1, [r4, #28]
  m_flags |= FILE_FLAG_DIR_DIRTY;
    68ce:	strb	r3, [r4, #2]
  if (!isOpen()) {
    68d0:	cbz	r2, 68dc <FatFile::truncate()+0x3c>
    68d2:	mov	r0, r4
    68d4:	bl	5aa0 <FatFile::sync() [clone .part.0]>
  return sync();

fail:
  return false;
}
    68d8:	add	sp, #8
    68da:	pop	{r4, pc}
    return true;
    68dc:	movs	r0, #1
}
    68de:	add	sp, #8
    68e0:	pop	{r4, pc}
  }
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) { return fatPut(cluster, 0x0FFFFFFF); }
    68e2:	mvn.w	r2, #4026531840	; 0xf0000000
    68e6:	ldr	r1, [r4, #16]
    68e8:	ldr	r0, [r4, #8]
    68ea:	bl	6bb0 <FatPartition::fatPut(unsigned long, unsigned long)>
      if (!m_vol->fatPutEOC(m_curCluster)) {
    68ee:	cbnz	r0, 690c <FatFile::truncate()+0x6c>
  return false;
    68f0:	movs	r0, #0
}
    68f2:	add	sp, #8
    68f4:	pop	{r4, pc}
  return false;
    68f6:	movs	r0, #0
}
    68f8:	bx	lr
    toFree = 0;
    68fa:	movs	r3, #0
    int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    68fc:	add	r2, sp, #4
    68fe:	ldr	r0, [r0, #8]
    toFree = 0;
    6900:	str	r3, [sp, #4]
    int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    6902:	bl	6b8c <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    6906:	cmp	r0, #0
    6908:	blt.n	68f0 <FatFile::truncate()+0x50>
    if (fg) {
    690a:	bne.n	68e2 <FatFile::truncate()+0x42>
  if (toFree) {
    690c:	ldr	r3, [sp, #4]
    690e:	cmp	r3, #0
    6910:	beq.n	68c2 <FatFile::truncate()+0x22>
    6912:	b.n	68b8 <FatFile::truncate()+0x18>

00006914 <FatFile::write(void const*, unsigned int)>:
//------------------------------------------------------------------------------
size_t FatFile::write(const void* buf, size_t nbyte) {
    6914:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  bool isWritable() const { return m_flags & FILE_FLAG_WRITE; }
    6918:	ldrb	r3, [r0, #2]
    691a:	mov	r5, r0
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isWritable()) {
    691c:	lsls	r4, r3, #30
    691e:	bpl.n	6a10 <FatFile::write(void const*, unsigned int)+0xfc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    6920:	mov	r8, r1
    6922:	lsls	r1, r3, #28
    6924:	mov	r9, r2
    6926:	bmi.w	6a94 <FatFile::write(void const*, unsigned int)+0x180>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    692a:	ldr	r3, [r5, #20]
    692c:	adds.w	r2, r3, r9
    6930:	bcs.n	6a10 <FatFile::write(void const*, unsigned int)+0xfc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    6932:	cmp.w	r9, #0
    6936:	beq.n	69ba <FatFile::write(void const*, unsigned int)+0xa6>
    6938:	mov	r7, r9
    m_status = 0;
    693a:	mov.w	sl, #0
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    693e:	ldr	r0, [r5, #8]
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    6940:	ubfx	r6, r3, #0, #9
    if (sectorOfCluster == 0 && sectorOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
    6944:	ldr	r1, [r5, #16]
    return (position >> 9) & m_clusterSectorMask;
    6946:	ldrb	r4, [r0, #5]
    if (sectorOfCluster == 0 && sectorOffset == 0) {
    6948:	ands.w	r4, r4, r3, lsr #9
    694c:	bne.n	69ce <FatFile::write(void const*, unsigned int)+0xba>
    694e:	cmp	r6, #0
    6950:	bne.n	69ce <FatFile::write(void const*, unsigned int)+0xba>
      if (m_curCluster != 0) {
    6952:	cmp	r1, #0
    6954:	beq.n	6a34 <FatFile::write(void const*, unsigned int)+0x120>
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
    6956:	ldrb	r2, [r5, #2]
    6958:	lsls	r2, r2, #25
    695a:	bpl.n	6a4a <FatFile::write(void const*, unsigned int)+0x136>
    695c:	ldr	r2, [r5, #28]
    695e:	cmp	r2, r3
    6960:	bls.n	6a4a <FatFile::write(void const*, unsigned int)+0x136>
          m_curCluster++;
    6962:	adds	r1, #1
    6964:	str	r1, [r5, #16]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    6966:	subs	r1, #2
    6968:	ldrb	r2, [r0, #6]
    696a:	ldr	r3, [r0, #20]
    696c:	lsls	r1, r2
    696e:	add	r1, r3
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    6970:	cmp.w	r7, #512	; 0x200
    6974:	bcc.n	6a1e <FatFile::write(void const*, unsigned int)+0x10a>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (nToWrite >= 2 * m_vol->bytesPerSector()) {
    6976:	cmp.w	r7, #1024	; 0x400
    697a:	bcc.n	6a5e <FatFile::write(void const*, unsigned int)+0x14a>
      // use multiple sector write command
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
    697c:	ldrb	r3, [r0, #4]
      uint32_t nSector = nToWrite >> m_vol->bytesPerSectorShift();
    697e:	lsrs	r2, r7, #9
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
    6980:	subs	r3, r3, r4
    6982:	cmp	r3, r2
    6984:	it	cs
    6986:	movcs	r3, r2
    return sector <= m_sector && m_sector < (sector + count);
    6988:	ldr	r2, [r0, #44]	; 0x2c
    698a:	cmp	r2, r1
      if (nSector > maxSectors) {
        nSector = maxSectors;
      }
      n = nSector << m_vol->bytesPerSectorShift();
    698c:	mov.w	r4, r3, lsl #9
    6990:	bcc.n	69a2 <FatFile::write(void const*, unsigned int)+0x8e>
    6992:	adds	r6, r3, r1
    6994:	cmp	r2, r6
    6996:	bcs.n	69a2 <FatFile::write(void const*, unsigned int)+0x8e>
    m_sector = 0XFFFFFFFF;
    6998:	mov.w	r2, #4294967295
    m_status = 0;
    699c:	strb.w	sl, [r0, #36]	; 0x24
    m_sector = 0XFFFFFFFF;
    69a0:	str	r2, [r0, #44]	; 0x2c
    return m_blockDev->writeSectors(sector, src, count);
    69a2:	ldr	r0, [r0, #40]	; 0x28
    69a4:	mov	r2, r8
    69a6:	ldr	r6, [r0, #0]
    69a8:	ldr	r6, [r6, #36]	; 0x24
    69aa:	blx	r6
      if (!m_vol->cacheSafeWrite(sector, src, nSector)) {
    69ac:	cbz	r0, 6a10 <FatFile::write(void const*, unsigned int)+0xfc>
      if (!m_vol->cacheSafeWrite(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    69ae:	ldr	r3, [r5, #20]
  while (nToWrite) {
    69b0:	subs	r7, r7, r4
    src += n;
    69b2:	add	r8, r4
    m_curPosition += n;
    69b4:	add	r3, r4
    69b6:	str	r3, [r5, #20]
  while (nToWrite) {
    69b8:	bne.n	693e <FatFile::write(void const*, unsigned int)+0x2a>
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    69ba:	ldr	r2, [r5, #28]
    69bc:	cmp	r2, r3
    69be:	bcs.n	6aae <FatFile::write(void const*, unsigned int)+0x19a>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    m_flags |= FILE_FLAG_DIR_DIRTY;
    69c0:	ldrb	r2, [r5, #2]
    69c2:	mov	r0, r9
    m_fileSize = m_curPosition;
    69c4:	str	r3, [r5, #28]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    69c6:	orn	r3, r2, #127	; 0x7f
    69ca:	strb	r3, [r5, #2]
    69cc:	b.n	6a1a <FatFile::write(void const*, unsigned int)+0x106>
    69ce:	ldrb	r2, [r0, #6]
    69d0:	subs	r1, #2
    69d2:	ldr	r3, [r0, #20]
    69d4:	lsls	r1, r2
    69d6:	add	r1, r3
    uint32_t sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    69d8:	add	r1, r4
    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    69da:	cmp	r6, #0
    69dc:	beq.n	6970 <FatFile::write(void const*, unsigned int)+0x5c>
      n = m_vol->bytesPerSector() - sectorOffset;
    69de:	rsb	r4, r6, #512	; 0x200
        cacheOption = FsCache::CACHE_FOR_WRITE;
    69e2:	movs	r2, #1
    69e4:	cmp	r4, r7
    69e6:	it	cs
    69e8:	movcs	r4, r7
    return m_cache.prepare(sector, options);
    69ea:	adds	r0, #36	; 0x24
    69ec:	bl	31cc <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    69f0:	cbz	r0, 6a10 <FatFile::write(void const*, unsigned int)+0xfc>
      memcpy(dst, src, n);
    69f2:	add	r0, r6
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    69f4:	add	r6, r4
      memcpy(dst, src, n);
    69f6:	mov	r2, r4
    69f8:	mov	r1, r8
    69fa:	bl	a0c4 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    69fe:	cmp.w	r6, #512	; 0x200
    6a02:	ldr	r0, [r5, #8]
    6a04:	bne.n	69ae <FatFile::write(void const*, unsigned int)+0x9a>
  bool cacheSyncData() { return m_cache.sync(); }
    6a06:	adds	r0, #36	; 0x24
    6a08:	bl	3174 <FsCache::sync()>
        if (!m_vol->cacheSyncData()) {
    6a0c:	cmp	r0, #0
    6a0e:	bne.n	69ae <FatFile::write(void const*, unsigned int)+0x9a>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
    6a10:	ldrb	r3, [r5, #1]
  return 0;
    6a12:	movs	r0, #0
  m_error |= WRITE_ERROR;
    6a14:	orr.w	r3, r3, #1
    6a18:	strb	r3, [r5, #1]
}
    6a1a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      n = m_vol->bytesPerSector() - sectorOffset;
    6a1e:	rsb	r4, r6, #512	; 0x200
      if (sectorOffset == 0 &&
    6a22:	ldr	r2, [r5, #20]
    6a24:	ldr	r3, [r5, #28]
    6a26:	cmp	r4, r7
    6a28:	it	cs
    6a2a:	movcs	r4, r7
    6a2c:	cmp	r2, r3
    6a2e:	bcc.n	6a3c <FatFile::write(void const*, unsigned int)+0x128>
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    6a30:	movs	r2, #5
    6a32:	b.n	69ea <FatFile::write(void const*, unsigned int)+0xd6>
        if (m_firstCluster == 0) {
    6a34:	ldr	r1, [r5, #32]
    6a36:	cbz	r1, 6a82 <FatFile::write(void const*, unsigned int)+0x16e>
          m_curCluster = m_firstCluster;
    6a38:	str	r1, [r5, #16]
    6a3a:	b.n	6966 <FatFile::write(void const*, unsigned int)+0x52>
          (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
    6a3c:	ldrb	r3, [r5, #2]
        cacheOption = FsCache::CACHE_FOR_WRITE;
    6a3e:	tst.w	r3, #32
    6a42:	ite	ne
    6a44:	movne	r2, #5
    6a46:	moveq	r2, #1
    6a48:	b.n	69ea <FatFile::write(void const*, unsigned int)+0xd6>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    6a4a:	add.w	r2, r5, #16
    6a4e:	bl	6b8c <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    6a52:	cmp	r0, #0
    6a54:	blt.n	6a10 <FatFile::write(void const*, unsigned int)+0xfc>
        if (fg == 0) {
    6a56:	beq.n	6aa2 <FatFile::write(void const*, unsigned int)+0x18e>
    uint32_t sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    6a58:	ldr	r0, [r5, #8]
    6a5a:	ldr	r1, [r5, #16]
    6a5c:	b.n	6966 <FatFile::write(void const*, unsigned int)+0x52>
    if (isCached(sector)) {
    6a5e:	ldr	r3, [r0, #44]	; 0x2c
    6a60:	cmp	r3, r1
    6a62:	bne.n	6a6e <FatFile::write(void const*, unsigned int)+0x15a>
    m_sector = 0XFFFFFFFF;
    6a64:	mov.w	r3, #4294967295
    m_status = 0;
    6a68:	strb.w	sl, [r0, #36]	; 0x24
    m_sector = 0XFFFFFFFF;
    6a6c:	str	r3, [r0, #44]	; 0x2c
    return m_blockDev->writeSector(sector, src);
    6a6e:	ldr	r0, [r0, #40]	; 0x28
    6a70:	mov	r2, r8
    6a72:	ldr	r3, [r0, #0]
    6a74:	ldr	r3, [r3, #32]
    6a76:	blx	r3
      if (!m_vol->cacheSafeWrite(sector, src)) {
    6a78:	cmp	r0, #0
    6a7a:	beq.n	6a10 <FatFile::write(void const*, unsigned int)+0xfc>
      n = m_vol->bytesPerSector();
    6a7c:	mov.w	r4, #512	; 0x200
    6a80:	b.n	69ae <FatFile::write(void const*, unsigned int)+0x9a>
          if (!addCluster()) {
    6a82:	mov	r0, r5
    6a84:	bl	5b5c <FatFile::addCluster()>
    6a88:	cmp	r0, #0
    6a8a:	beq.n	6a10 <FatFile::write(void const*, unsigned int)+0xfc>
          m_firstCluster = m_curCluster;
    6a8c:	ldr	r1, [r5, #16]
    uint32_t sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    6a8e:	ldr	r0, [r5, #8]
          m_firstCluster = m_curCluster;
    6a90:	str	r1, [r5, #32]
    6a92:	b.n	6966 <FatFile::write(void const*, unsigned int)+0x52>
    if (!seekSet(m_fileSize)) {
    6a94:	ldr	r1, [r0, #28]
    6a96:	bl	6554 <FatFile::seekSet(unsigned long)>
    6a9a:	cmp	r0, #0
    6a9c:	bne.w	692a <FatFile::write(void const*, unsigned int)+0x16>
    6aa0:	b.n	6a10 <FatFile::write(void const*, unsigned int)+0xfc>
          if (!addCluster()) {
    6aa2:	mov	r0, r5
    6aa4:	bl	5b5c <FatFile::addCluster()>
    6aa8:	cmp	r0, #0
    6aaa:	bne.n	6a58 <FatFile::write(void const*, unsigned int)+0x144>
    6aac:	b.n	6a10 <FatFile::write(void const*, unsigned int)+0xfc>
  } else if (FsDateTime::callback) {
    6aae:	ldr	r3, [pc, #20]	; (6ac4 <FatFile::write(void const*, unsigned int)+0x1b0>)
    6ab0:	ldr	r3, [r3, #0]
    6ab2:	cbz	r3, 6ac0 <FatFile::write(void const*, unsigned int)+0x1ac>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    6ab4:	ldrb	r3, [r5, #2]
    6ab6:	mov	r0, r9
    6ab8:	orn	r3, r3, #127	; 0x7f
    6abc:	strb	r3, [r5, #2]
    6abe:	b.n	6a1a <FatFile::write(void const*, unsigned int)+0x106>
    6ac0:	mov	r0, r9
    6ac2:	b.n	6a1a <FatFile::write(void const*, unsigned int)+0x106>
    6ac4:	.word	0x20006404

00006ac8 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>:
fail:
  return false;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    6ac8:	push	{r4, r5, r6, lr}
  uint8_t fatType() const { return m_fatType; }
    6aca:	ldrb	r3, [r0, #7]
    6acc:	mov	r5, r0
    6ace:	mov	r4, r1
    6ad0:	mov	r6, r2
  if (cluster < 2 || cluster > m_lastCluster) {
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
    6ad2:	cmp	r3, #32
    6ad4:	beq.n	6b0a <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0x42>
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint16_t offset = (cluster << 2) & m_sectorMask;
    next = getLe32(pc + offset);
  } else if (fatType() == 16) {
    6ad6:	cmp	r3, #16
    6ad8:	beq.n	6ae0 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0x18>
  }
  *value = next;
  return 1;

fail:
  return -1;
    6ada:	mov.w	r0, #4294967295
}
    6ade:	pop	{r4, r5, r6, pc}
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1));
    6ae0:	ldr	r3, [r0, #24]
    6ae2:	ubfx	r1, r1, #8, #8
    return m_fatCache.prepare(sector, options);
    6ae6:	add.w	r0, r0, #564	; 0x234
    6aea:	movs	r2, #2
    6aec:	add	r1, r3
    6aee:	bl	31cc <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    6af2:	cmp	r0, #0
    6af4:	beq.n	6ada <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0x12>
    uint16_t offset = (cluster << 1) & m_sectorMask;
    6af6:	lsls	r1, r4, #1
  if (isEOC(next)) {
    6af8:	ldr	r2, [r5, #28]
    next = getLe16(pc + offset);
    6afa:	and.w	r1, r1, #510	; 0x1fe
    6afe:	ldrh	r3, [r0, r1]
  if (isEOC(next)) {
    6b00:	cmp	r2, r3
    6b02:	bcc.n	6b2c <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0x64>
  return 1;
    6b04:	movs	r0, #1
  *value = next;
    6b06:	str	r3, [r6, #0]
}
    6b08:	pop	{r4, r5, r6, pc}
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    6b0a:	ldr	r1, [r0, #24]
    6b0c:	movs	r2, #2
    6b0e:	add.w	r0, r0, #564	; 0x234
    6b12:	add.w	r1, r1, r4, lsr #7
    6b16:	bl	31cc <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    6b1a:	cmp	r0, #0
    6b1c:	beq.n	6ada <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0x12>
    uint16_t offset = (cluster << 2) & m_sectorMask;
    6b1e:	lsls	r1, r4, #2
  if (isEOC(next)) {
    6b20:	ldr	r2, [r5, #28]
    next = getLe32(pc + offset);
    6b22:	and.w	r1, r1, #508	; 0x1fc
  return *reinterpret_cast<const uint32_t*>(src);
    6b26:	ldr	r3, [r0, r1]
  if (isEOC(next)) {
    6b28:	cmp	r2, r3
    6b2a:	bcs.n	6b04 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0x3c>
    return 0;
    6b2c:	movs	r0, #0
}
    6b2e:	pop	{r4, r5, r6, pc}

00006b30 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]>:
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
    6b30:	push	{r3, r4, r5, lr}
  uint8_t fatType() const { return m_fatType; }
    6b32:	ldrb	r3, [r0, #7]
    6b34:	mov	r4, r1
    6b36:	mov	r5, r2
  if (cluster < 2 || cluster > m_lastCluster) {
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
    6b38:	cmp	r3, #32
    6b3a:	beq.n	6b68 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x38>
    uint16_t offset = (cluster << 2) & m_sectorMask;
    setLe32(pc + offset, value);
    return true;
  }

  if (fatType() == 16) {
    6b3c:	cmp	r3, #16
    6b3e:	beq.n	6b44 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x14>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
    6b40:	movs	r0, #0
}
    6b42:	pop	{r3, r4, r5, pc}
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1));
    6b44:	ldr	r3, [r0, #24]
    6b46:	ubfx	r1, r1, #8, #8
    return m_fatCache.prepare(sector, options);
    6b4a:	add.w	r0, r0, #564	; 0x234
    6b4e:	movs	r2, #3
    6b50:	add	r1, r3
    6b52:	bl	31cc <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    6b56:	mov	r3, r0
    6b58:	cmp	r0, #0
    6b5a:	beq.n	6b40 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x10>
    uint16_t offset = (cluster << 1) & m_sectorMask;
    6b5c:	lsls	r1, r4, #1
    return true;
    6b5e:	movs	r0, #1
    setLe16(pc + offset, value);
    6b60:	and.w	r1, r1, #510	; 0x1fe
    6b64:	strh	r5, [r3, r1]
}
    6b66:	pop	{r3, r4, r5, pc}
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    6b68:	ldr	r1, [r0, #24]
    6b6a:	movs	r2, #3
    6b6c:	add.w	r0, r0, #564	; 0x234
    6b70:	add.w	r1, r1, r4, lsr #7
    6b74:	bl	31cc <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    6b78:	mov	r3, r0
    6b7a:	cmp	r0, #0
    6b7c:	beq.n	6b40 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x10>
    uint16_t offset = (cluster << 2) & m_sectorMask;
    6b7e:	lsls	r1, r4, #2
    return true;
    6b80:	movs	r0, #1
    setLe32(pc + offset, value);
    6b82:	and.w	r1, r1, #508	; 0x1fc
  *reinterpret_cast<uint32_t*>(dst) = src;
    6b86:	str	r5, [r3, r1]
}
    6b88:	pop	{r3, r4, r5, pc}
    6b8a:	nop

00006b8c <FatPartition::fatGet(unsigned long, unsigned long*)>:
  if (cluster < 2 || cluster > m_lastCluster) {
    6b8c:	cmp	r1, #1
    6b8e:	bls.n	6baa <FatPartition::fatGet(unsigned long, unsigned long*)+0x1e>
int8_t FatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    6b90:	push	{r4}
  if (cluster < 2 || cluster > m_lastCluster) {
    6b92:	ldr	r4, [r0, #28]
    6b94:	cmp	r4, r1
    6b96:	bcc.n	6ba0 <FatPartition::fatGet(unsigned long, unsigned long*)+0x14>
}
    6b98:	ldr.w	r4, [sp], #4
    6b9c:	b.w	6ac8 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>
    6ba0:	mov.w	r0, #4294967295
    6ba4:	ldr.w	r4, [sp], #4
    6ba8:	bx	lr
    6baa:	mov.w	r0, #4294967295
    6bae:	bx	lr

00006bb0 <FatPartition::fatPut(unsigned long, unsigned long)>:
  if (cluster < 2 || cluster > m_lastCluster) {
    6bb0:	cmp	r1, #1
    6bb2:	bls.n	6bce <FatPartition::fatPut(unsigned long, unsigned long)+0x1e>
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
    6bb4:	push	{r3, r4, r5, lr}
  if (cluster < 2 || cluster > m_lastCluster) {
    6bb6:	ldr	r3, [r0, #28]
    6bb8:	mov	r4, r1
    6bba:	cmp	r3, r1
    6bbc:	bcc.n	6bca <FatPartition::fatPut(unsigned long, unsigned long)+0x1a>
  uint8_t fatType() const { return m_fatType; }
    6bbe:	ldrb	r3, [r0, #7]
    6bc0:	mov	r5, r2
  if (fatType() == 32) {
    6bc2:	cmp	r3, #32
    6bc4:	beq.n	6bf6 <FatPartition::fatPut(unsigned long, unsigned long)+0x46>
  if (fatType() == 16) {
    6bc6:	cmp	r3, #16
    6bc8:	beq.n	6bd2 <FatPartition::fatPut(unsigned long, unsigned long)+0x22>
  return false;
    6bca:	movs	r0, #0
}
    6bcc:	pop	{r3, r4, r5, pc}
  return false;
    6bce:	movs	r0, #0
}
    6bd0:	bx	lr
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1));
    6bd2:	ldr	r3, [r0, #24]
    6bd4:	ubfx	r1, r1, #8, #8
    return m_fatCache.prepare(sector, options);
    6bd8:	add.w	r0, r0, #564	; 0x234
    6bdc:	movs	r2, #3
    6bde:	add	r1, r3
    6be0:	bl	31cc <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    6be4:	mov	r3, r0
    6be6:	cmp	r0, #0
    6be8:	beq.n	6bca <FatPartition::fatPut(unsigned long, unsigned long)+0x1a>
    uint16_t offset = (cluster << 1) & m_sectorMask;
    6bea:	lsls	r4, r4, #1
    return true;
    6bec:	movs	r0, #1
    setLe16(pc + offset, value);
    6bee:	and.w	r4, r4, #510	; 0x1fe
    6bf2:	strh	r5, [r3, r4]
}
    6bf4:	pop	{r3, r4, r5, pc}
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    6bf6:	ldr	r1, [r0, #24]
    6bf8:	movs	r2, #3
    6bfa:	add.w	r0, r0, #564	; 0x234
    6bfe:	add.w	r1, r1, r4, lsr #7
    6c02:	bl	31cc <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    6c06:	mov	r3, r0
    6c08:	cmp	r0, #0
    6c0a:	beq.n	6bca <FatPartition::fatPut(unsigned long, unsigned long)+0x1a>
    uint16_t offset = (cluster << 2) & m_sectorMask;
    6c0c:	lsls	r4, r4, #2
    return true;
    6c0e:	movs	r0, #1
    setLe32(pc + offset, value);
    6c10:	and.w	r4, r4, #508	; 0x1fc
    6c14:	str	r5, [r3, r4]
}
    6c16:	pop	{r3, r4, r5, pc}

00006c18 <FatPartition::allocateCluster(unsigned long, unsigned long*)>:
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    6c18:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (m_allocSearchStart < current) {
    6c1c:	ldr	r4, [r0, #12]
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    6c1e:	sub	sp, #8
    6c20:	mov	r5, r0
    6c22:	mov	r6, r1
  if (m_allocSearchStart < current) {
    6c24:	cmp	r4, r1
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    6c26:	mov	r8, r2
  if (m_allocSearchStart < current) {
    6c28:	bcc.n	6c92 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x7a>
    setStart = true;
    6c2a:	movs	r7, #1
    find++;
    6c2c:	adds	r4, #1
    if (find > m_lastCluster) {
    6c2e:	ldr	r3, [r5, #28]
    6c30:	add	r2, sp, #4
    6c32:	mov	r0, r5
    6c34:	cmp	r3, r4
    6c36:	bcs.n	6c44 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x2c>
      if (setStart) {
    6c38:	cbnz	r7, 6c88 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x70>
      find = m_allocSearchStart;
    6c3a:	ldr	r4, [r5, #12]
      setStart = true;
    6c3c:	movs	r7, #1
    find++;
    6c3e:	add	r4, r7
    if (find > m_lastCluster) {
    6c40:	cmp	r3, r4
    6c42:	bcc.n	6c88 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x70>
  if (cluster < 2 || cluster > m_lastCluster) {
    6c44:	cmp	r6, r4
    6c46:	it	ne
    6c48:	cmpne	r4, #1
    6c4a:	mov	r1, r4
    6c4c:	bls.n	6c88 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x70>
    6c4e:	bl	6ac8 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>
    if (fg < 0) {
    6c52:	cmp	r0, #0
    6c54:	blt.n	6c88 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x70>
    if (fg && f == 0) {
    6c56:	beq.n	6c2c <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x14>
    6c58:	ldr	r3, [sp, #4]
    6c5a:	cmp	r3, #0
    6c5c:	bne.n	6c2c <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x14>
  if (setStart) {
    6c5e:	cbz	r7, 6c62 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x4a>
    m_allocSearchStart = find;
    6c60:	str	r4, [r5, #12]
  bool fatPutEOC(uint32_t cluster) { return fatPut(cluster, 0x0FFFFFFF); }
    6c62:	mvn.w	r2, #4026531840	; 0xf0000000
    6c66:	mov	r1, r4
    6c68:	mov	r0, r5
    6c6a:	bl	6bb0 <FatPartition::fatPut(unsigned long, unsigned long)>
  if (!fatPutEOC(find)) {
    6c6e:	mov	r7, r0
    6c70:	cbz	r0, 6c88 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x70>
  if (current) {
    6c72:	cbnz	r6, 6c7a <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x62>
  *next = find;
    6c74:	str.w	r4, [r8]
  return true;
    6c78:	b.n	6c8a <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x72>
    if (!fatPut(current, find)) {
    6c7a:	mov	r1, r6
    6c7c:	mov	r0, r5
    6c7e:	mov	r2, r4
    6c80:	bl	6bb0 <FatPartition::fatPut(unsigned long, unsigned long)>
    6c84:	cmp	r0, #0
    6c86:	bne.n	6c74 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x5c>
  return false;
    6c88:	movs	r7, #0
}
    6c8a:	mov	r0, r7
    6c8c:	add	sp, #8
    6c8e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6c92:	mov	r4, r1
    setStart = false;
    6c94:	movs	r7, #0
    6c96:	b.n	6c2c <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x14>

00006c98 <FatPartition::freeChain(unsigned long)>:
//------------------------------------------------------------------------------
// free a cluster chain
bool FatPartition::freeChain(uint32_t cluster) {
    6c98:	push	{r4, r5, r6, lr}
    6c9a:	mov	r5, r0
    6c9c:	sub	sp, #8
    6c9e:	mov	r4, r1
    6ca0:	b.n	6cd2 <FatPartition::freeChain(unsigned long)+0x3a>
  if (cluster < 2 || cluster > m_lastCluster) {
    6ca2:	ldr	r3, [r5, #28]
    6ca4:	cmp	r4, r3
    6ca6:	bhi.n	6cdc <FatPartition::freeChain(unsigned long)+0x44>
    6ca8:	bl	6ac8 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>
  if (cluster < 2 || cluster > m_lastCluster) {
    6cac:	mov	r6, r0
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
    if (fg < 0) {
    6cae:	mov	r1, r4
    6cb0:	movs	r2, #0
    6cb2:	cmp	r6, #0
    6cb4:	mov	r0, r5
    6cb6:	blt.n	6cdc <FatPartition::freeChain(unsigned long)+0x44>
  if (cluster < 2 || cluster > m_lastCluster) {
    6cb8:	ldr	r3, [r5, #28]
    6cba:	cmp	r4, r3
    6cbc:	bhi.n	6cdc <FatPartition::freeChain(unsigned long)+0x44>
    6cbe:	bl	6b30 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);
    if (cluster < m_allocSearchStart) {
      m_allocSearchStart = cluster - 1;
    6cc2:	subs	r2, r4, #1
    if (!fatPut(cluster, 0)) {
    6cc4:	cbz	r0, 6cdc <FatPartition::freeChain(unsigned long)+0x44>
    if (cluster < m_allocSearchStart) {
    6cc6:	ldr	r3, [r5, #12]
    6cc8:	cmp	r3, r4
    }
    cluster = next;
    6cca:	ldr	r4, [sp, #4]
      m_allocSearchStart = cluster - 1;
    6ccc:	it	hi
    6cce:	strhi	r2, [r5, #12]
  } while (fg);
    6cd0:	cbz	r6, 6cde <FatPartition::freeChain(unsigned long)+0x46>
  if (cluster < 2 || cluster > m_lastCluster) {
    6cd2:	cmp	r4, #1
    6cd4:	mov	r1, r4
    6cd6:	add	r2, sp, #4
    6cd8:	mov	r0, r5
    6cda:	bhi.n	6ca2 <FatPartition::freeChain(unsigned long)+0xa>

  return true;

fail:
  return false;
    6cdc:	movs	r0, #0
}
    6cde:	add	sp, #8
    6ce0:	pop	{r4, r5, r6, pc}
    6ce2:	nop

00006ce4 <FatPartition::freeClusterCount()>:
//------------------------------------------------------------------------------
int32_t FatPartition::freeClusterCount() {
    6ce4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint8_t fatType() const { return m_fatType; }
    6ce8:	ldrb	r3, [r0, #7]
    6cea:	mov	r6, r0
    return m_freeClusterCount;
  }
#endif  // MAINTAIN_FREE_CLUSTER_COUNT
  uint32_t free = 0;
  uint32_t sector;
  uint32_t todo = m_lastCluster + 1;
    6cec:	ldr	r5, [r0, #28]
      }
      if (fg && c == 0) {
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    6cee:	cmp	r3, #32
  uint32_t todo = m_lastCluster + 1;
    6cf0:	add.w	r5, r5, #1
  } else if (fatType() == 16 || fatType() == 32) {
    6cf4:	beq.n	6cfa <FatPartition::freeClusterCount()+0x16>
    6cf6:	cmp	r3, #16
    6cf8:	bne.n	6d78 <FatPartition::freeClusterCount()+0x94>
    sector = m_fatStartSector;
    6cfa:	ldr.w	r8, [r6, #24]
    while (todo) {
    6cfe:	cmp	r5, #0
    6d00:	beq.n	6d80 <FatPartition::freeClusterCount()+0x9c>
    return m_fatCache.prepare(sector, options);
    6d02:	add.w	r7, r6, #564	; 0x234
  uint32_t free = 0;
    6d06:	movs	r4, #0
    6d08:	mov	r1, r8
    6d0a:	movs	r2, #2
    6d0c:	mov	r0, r7
    6d0e:	add.w	r8, r8, #1
    6d12:	bl	31cc <FsCache::prepare(unsigned long, unsigned char)>
      uint8_t* pc = fatCachePrepare(sector++, FsCache::CACHE_FOR_READ);
      if (!pc) {
    6d16:	cbz	r0, 6d78 <FatPartition::freeClusterCount()+0x94>
        DBG_FAIL_MACRO;
        goto fail;
      }
      n = fatType() == 16 ? m_bytesPerSector / 2 : m_bytesPerSector / 4;
    6d18:	ldrb	r3, [r6, #7]
    6d1a:	cmp	r3, #16
    6d1c:	beq.n	6d46 <FatPartition::freeClusterCount()+0x62>
      if (todo < n) {
    6d1e:	cmp	r5, #127	; 0x7f
    6d20:	bhi.n	6d6c <FatPartition::freeClusterCount()+0x88>
        n = todo;
    6d22:	uxth	r3, r5
    6d24:	mov	r1, r5
    6d26:	subs	r2, r3, #1
    6d28:	subs	r3, r0, #4
    6d2a:	uxth	r2, r2
    6d2c:	add.w	r0, r0, r2, lsl #2
          }
        }
      } else {
        uint32_t* p32 = reinterpret_cast<uint32_t*>(pc);
        for (uint16_t i = 0; i < n; i++) {
          if (p32[i] == 0) {
    6d30:	ldr.w	r2, [r3, #4]!
    6d34:	cbnz	r2, 6d38 <FatPartition::freeClusterCount()+0x54>
            free++;
    6d36:	adds	r4, #1
        for (uint16_t i = 0; i < n; i++) {
    6d38:	cmp	r3, r0
    6d3a:	bne.n	6d30 <FatPartition::freeClusterCount()+0x4c>
    while (todo) {
    6d3c:	subs	r5, r5, r1
    6d3e:	bne.n	6d08 <FatPartition::freeClusterCount()+0x24>
  } else {
    // invalid FAT type
    DBG_FAIL_MACRO;
    goto fail;
  }
  setFreeClusterCount(free);
    6d40:	mov	r0, r4
  return free;

fail:
  return -1;
}
    6d42:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (todo < n) {
    6d46:	cmp	r5, #255	; 0xff
    6d48:	bls.n	6d72 <FatPartition::freeClusterCount()+0x8e>
    6d4a:	mov.w	r1, #256	; 0x100
      n = fatType() == 16 ? m_bytesPerSector / 2 : m_bytesPerSector / 4;
    6d4e:	mov	r3, r1
    6d50:	subs	r2, r3, #1
    6d52:	subs	r3, r0, #2
    6d54:	uxth	r2, r2
    6d56:	add.w	r0, r0, r2, lsl #1
          if (p16[i] == 0) {
    6d5a:	ldrh.w	r2, [r3, #2]!
    6d5e:	cbnz	r2, 6d62 <FatPartition::freeClusterCount()+0x7e>
            free++;
    6d60:	adds	r4, #1
        for (uint16_t i = 0; i < n; i++) {
    6d62:	cmp	r0, r3
    6d64:	bne.n	6d5a <FatPartition::freeClusterCount()+0x76>
    while (todo) {
    6d66:	subs	r5, r5, r1
    6d68:	bne.n	6d08 <FatPartition::freeClusterCount()+0x24>
    6d6a:	b.n	6d40 <FatPartition::freeClusterCount()+0x5c>
      if (todo < n) {
    6d6c:	movs	r1, #128	; 0x80
      n = fatType() == 16 ? m_bytesPerSector / 2 : m_bytesPerSector / 4;
    6d6e:	mov	r3, r1
    6d70:	b.n	6d26 <FatPartition::freeClusterCount()+0x42>
        n = todo;
    6d72:	uxth	r3, r5
    6d74:	mov	r1, r5
    6d76:	b.n	6d50 <FatPartition::freeClusterCount()+0x6c>
  return -1;
    6d78:	mov.w	r0, #4294967295
}
    6d7c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    while (todo) {
    6d80:	mov	r0, r5
  return free;
    6d82:	b.n	6d42 <FatPartition::freeClusterCount()+0x5e>

00006d84 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)>:
//------------------------------------------------------------------------------
bool FatPartition::init(FsBlockDevice* dev, uint8_t part, uint32_t volStart) {
    6d84:	push	{r3, r4, r5, r6, r7, lr}
    6d86:	mov	r6, r3
    m_sector = 0XFFFFFFFF;
    6d88:	mov.w	r3, #4294967295
  m_blockDev = dev;
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
    6d8c:	mov.w	ip, #0
bool FatPartition::init(FsBlockDevice* dev, uint8_t part, uint32_t volStart) {
    6d90:	mov	r4, r0
    6d92:	str	r3, [r0, #44]	; 0x2c
  m_allocSearchStart = 1;
  m_cache.init(dev);
    6d94:	add.w	r7, r0, #36	; 0x24
    6d98:	str.w	r3, [r0, #572]	; 0x23c
  m_allocSearchStart = 1;
    6d9c:	movs	r3, #1
  m_blockDev = dev;
    6d9e:	str	r1, [r0, #0]
  m_fatType = 0;
    6da0:	strb.w	ip, [r0, #7]
    m_blockDev = blockDev;
    6da4:	str	r1, [r0, #40]	; 0x28
    6da6:	str.w	r1, [r0, #568]	; 0x238
    m_status = 0;
    6daa:	strb.w	ip, [r0, #36]	; 0x24
    6dae:	strb.w	ip, [r0, #564]	; 0x234
  m_allocSearchStart = 1;
    6db2:	str	r3, [r0, #12]
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(dev);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    6db4:	cbz	r2, 6dec <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x68>
    if (part > 4) {
    6db6:	cmp	r2, #4
    6db8:	mov	r5, r2
    6dba:	bls.n	6dc0 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x3c>
  m_fatCache.setMirrorOffset(m_sectorsPerFat);
#endif  // USE_SEPARATE_FAT_CACHE
  return true;

fail:
  return false;
    6dbc:	movs	r0, #0
}
    6dbe:	pop	{r3, r4, r5, r6, r7, pc}
    return m_cache.prepare(sector, options);
    6dc0:	mov	r2, ip
    6dc2:	mov	r1, ip
    6dc4:	mov	r0, r7
    6dc6:	bl	31cc <FsCache::prepare(unsigned long, unsigned char)>
    if (!mbr) {
    6dca:	cmp	r0, #0
    6dcc:	beq.n	6dbc <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x38>
    MbrPart_t* mp = mbr->part + part - 1;
    6dce:	mvn.w	r3, #4026531840	; 0xf0000000
    6dd2:	add.w	r0, r0, #446	; 0x1be
    6dd6:	add	r3, r5
    6dd8:	lsls	r1, r3, #4
    6dda:	add.w	r3, r0, r3, lsl #4
    if (mp->type == 0 || (mp->boot != 0 && mp->boot != 0X80)) {
    6dde:	ldrb	r2, [r3, #4]
    6de0:	cmp	r2, #0
    6de2:	beq.n	6dbc <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x38>
    6de4:	ldrb	r2, [r0, r1]
    6de6:	lsls	r2, r2, #25
    6de8:	bne.n	6dbc <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x38>
  return *reinterpret_cast<const uint32_t*>(src);
    6dea:	ldr	r6, [r3, #8]
    6dec:	movs	r2, #0
    6dee:	mov	r1, r6
    6df0:	mov	r0, r7
    6df2:	bl	31cc <FsCache::prepare(unsigned long, unsigned char)>
  if (!pbs) {
    6df6:	cmp	r0, #0
    6df8:	beq.n	6dbc <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x38>
  if (bpb->fatCount != 2 || getLe16(bpb->bytesPerSector) != m_bytesPerSector) {
    6dfa:	ldrb	r3, [r0, #16]
    6dfc:	cmp	r3, #2
    6dfe:	bne.n	6dbc <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x38>
    6e00:	ldrh.w	r3, [r0, #11]
    6e04:	cmp.w	r3, #512	; 0x200
    6e08:	bne.n	6dbc <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x38>
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    6e0a:	ldrb	r1, [r0, #13]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    6e0c:	subs	r3, r1, #1
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    6e0e:	cmp	r1, #1
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    6e10:	strb	r1, [r4, #4]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    6e12:	strb	r3, [r4, #5]
  m_sectorsPerClusterShift = 0;
    6e14:	mov.w	r3, #0
    6e18:	strb	r3, [r4, #6]
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    6e1a:	beq.n	6ea0 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x11c>
    6e1c:	movs	r2, #1
    6e1e:	lsls	r2, r2, #1
    m_sectorsPerClusterShift++;
    6e20:	adds	r3, #1
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    6e22:	uxtb	r2, r2
    m_sectorsPerClusterShift++;
    6e24:	uxtb	r3, r3
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    6e26:	cmp	r1, r2
    6e28:	beq.n	6e34 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0xb0>
    if (tmp == 0) {
    6e2a:	cmp	r3, #8
    6e2c:	bne.n	6e1e <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x9a>
  return false;
    6e2e:	movs	r0, #0
    6e30:	strb	r3, [r4, #6]
}
    6e32:	pop	{r3, r4, r5, r6, r7, pc}
  countOfClusters >>= m_sectorsPerClusterShift;
    6e34:	mov	r5, r3
    6e36:	strb	r3, [r4, #6]
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
    6e38:	ldrh	r1, [r0, #22]
    6e3a:	str	r1, [r4, #16]
  if (m_sectorsPerFat == 0) {
    6e3c:	cbnz	r1, 6e42 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0xbe>
    6e3e:	ldr	r1, [r0, #36]	; 0x24
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
    6e40:	str	r1, [r4, #16]
  m_fatStartSector = volStart + getLe16(bpb->reservedSectorCount);
    6e42:	ldrh	r3, [r0, #14]
  return *reinterpret_cast<const uint16_t*>(src);
    6e44:	ldrh.w	r2, [r0, #17]
    6e48:	add	r3, r6
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);
    6e4a:	strh	r2, [r4, #8]
      ((FS_DIR_SIZE * m_rootDirEntryCount + m_bytesPerSector - 1) /
    6e4c:	lsls	r2, r2, #5
  m_fatStartSector = volStart + getLe16(bpb->reservedSectorCount);
    6e4e:	str	r3, [r4, #24]
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
    6e50:	add.w	r3, r3, r1, lsl #1
      ((FS_DIR_SIZE * m_rootDirEntryCount + m_bytesPerSector - 1) /
    6e54:	addw	r2, r2, #511	; 0x1ff
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
    6e58:	str	r3, [r4, #32]
      m_rootDirStart +
    6e5a:	add.w	r3, r3, r2, lsr #9
  totalSectors = getLe16(bpb->totalSectors16);
    6e5e:	ldrh.w	r2, [r0, #19]
  m_dataStartSector =
    6e62:	str	r3, [r4, #20]
  if (totalSectors == 0) {
    6e64:	cbnz	r2, 6e68 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0xe4>
  return *reinterpret_cast<const uint32_t*>(src);
    6e66:	ldr	r2, [r0, #32]
  countOfClusters = totalSectors - (m_dataStartSector - volStart);
    6e68:	subs	r3, r6, r3
    6e6a:	add	r3, r2
  countOfClusters >>= m_sectorsPerClusterShift;
    6e6c:	lsrs	r3, r5
  m_lastCluster = countOfClusters + 1;
    6e6e:	adds	r2, r3, #1
    6e70:	str	r2, [r4, #28]
  if (countOfClusters < 4085) {
    6e72:	movw	r2, #4084	; 0xff4
    6e76:	cmp	r3, r2
    6e78:	bls.n	6e94 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x110>
  } else if (countOfClusters < 65525) {
    6e7a:	movw	r2, #65524	; 0xfff4
    6e7e:	cmp	r3, r2
    6e80:	bls.n	6e9c <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x118>
    6e82:	ldr	r2, [r0, #44]	; 0x2c
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
    6e84:	movs	r3, #32
    6e86:	str	r2, [r4, #32]
  return true;
    6e88:	movs	r0, #1
    m_fatType = 16;
    6e8a:	strb	r3, [r4, #7]
  /** Set the offset to the second FAT for mirroring.
   * \param[in] offset Sector offset to second FAT.
   */
  void setMirrorOffset(uint32_t offset) { m_mirrorOffset = offset; }
    6e8c:	str	r1, [r4, #48]	; 0x30
    6e8e:	str.w	r1, [r4, #576]	; 0x240
}
    6e92:	pop	{r3, r4, r5, r6, r7, pc}
    m_fatType = 12;
    6e94:	movs	r3, #12
  return false;
    6e96:	movs	r0, #0
    m_fatType = 12;
    6e98:	strb	r3, [r4, #7]
}
    6e9a:	pop	{r3, r4, r5, r6, r7, pc}
    6e9c:	movs	r3, #16
    6e9e:	b.n	6e88 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x104>
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    6ea0:	mov	r5, r3
    6ea2:	b.n	6e38 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0xb4>

00006ea4 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)>:
  } else if (i < 13) {
    setLe16(ldir->unicode3 + 2 * (i - 11), c);
  }
}
//==============================================================================
bool FatFile::cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    6ea4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  FatFile dir = *this;
    6ea8:	mov	lr, r0
bool FatFile::cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    6eaa:	sub	sp, #40	; 0x28
    6eac:	mov	r5, r2
    6eae:	ldr	r4, [r2, #0]
    6eb0:	mov	r6, r0
    6eb2:	mov	r8, r1
  FatFile dir = *this;
    6eb4:	add.w	ip, sp, #4
  DirLfn_t* ldir;
  fname->reset();
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    6eb8:	mov	r7, r3
  FatFile dir = *this;
    6eba:	ldmia.w	lr!, {r0, r1, r2, r3}
    6ebe:	stmia.w	ip!, {r0, r1, r2, r3}
    6ec2:	ldmia.w	lr!, {r0, r1, r2, r3}
    6ec6:	stmia.w	ip!, {r0, r1, r2, r3}
    6eca:	ldr.w	r3, [lr]
    6ece:	str	r4, [r5, #4]
    6ed0:	str.w	r3, [ip]
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    6ed4:	cmp	r7, #0
    6ed6:	beq.n	6f50 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xac>
    6ed8:	mov.w	r9, #1
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(index - order));
    6edc:	sub.w	r1, r8, r9
    return seekSet(32UL * index) ? readDirCache() : nullptr;
    6ee0:	add	r0, sp, #4
    6ee2:	uxth	r1, r1
    6ee4:	lsls	r1, r1, #5
    6ee6:	bl	6554 <FatFile::seekSet(unsigned long)>
    6eea:	cbz	r0, 6f54 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xb0>
    6eec:	movs	r1, #0
    6eee:	add	r0, sp, #4
    6ef0:	bl	6294 <FatFile::readDirCache(bool)>
    if (!ldir) {
    6ef4:	mov	sl, r0
    6ef6:	cbz	r0, 6f54 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xb0>
    6ef8:	movs	r4, #0
    }
    // These should be checked in caller.
    DBG_HALT_IF(ldir->attributes != FAT_ATTRIB_LONG_NAME);
    DBG_HALT_IF(order != (ldir->order & 0X1F));
    for (uint8_t i = 0; i < 13; i++) {
      uint16_t u = getLfnChar(ldir, i);
    6efa:	uxtb	r2, r4
    6efc:	mov	r1, sl
    6efe:	mov	r0, r6
    for (uint8_t i = 0; i < 13; i++) {
    6f00:	adds	r4, #1
      uint16_t u = getLfnChar(ldir, i);
    6f02:	bl	58f8 <FatFile::getLfnChar(DirLfn_t*, unsigned char)>
      DBG_HALT_IF(cp == 0XFFFF);
      if (toUpcase(u) != toUpcase(cp)) {
        return false;
      }
#else   // USE_UTF8_LONG_NAMES
      if (u > 0X7F || toUpper(u) != toUpper(fname->getch())) {
    6f06:	uxtb	r3, r0
      if (fname->atEnd()) {
    6f08:	ldrd	r1, r2, [r5, #4]
    6f0c:	cmp	r2, r1
  char getch() { return atEnd() ? 0 : *next++; }
    6f0e:	add.w	ip, r1, #1
    6f12:	beq.n	6f5c <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xb8>
      if (u > 0X7F || toUpper(u) != toUpper(fname->getch())) {
    6f14:	cmp	r0, #127	; 0x7f
inline char toUpper(char c) { return isLower(c) ? c - 'a' + 'A' : c; }
    6f16:	sub.w	r2, r3, #97	; 0x61
    6f1a:	sub.w	lr, r3, #32
      if (u > 0X7F || toUpper(u) != toUpper(fname->getch())) {
    6f1e:	bhi.n	6f54 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xb0>
inline char toUpper(char c) { return isLower(c) ? c - 'a' + 'A' : c; }
    6f20:	cmp	r2, #25
    6f22:	str.w	ip, [r5, #4]
    6f26:	ldrb	r2, [r1, #0]
    6f28:	it	ls
    6f2a:	uxtbls.w	r3, lr
    6f2e:	sub.w	r1, r2, #97	; 0x61
    6f32:	sub.w	r0, r2, #32
    6f36:	cmp	r1, #25
    6f38:	it	ls
    6f3a:	uxtbls	r2, r0
      if (u > 0X7F || toUpper(u) != toUpper(fname->getch())) {
    6f3c:	cmp	r2, r3
    6f3e:	bne.n	6f54 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xb0>
    for (uint8_t i = 0; i < 13; i++) {
    6f40:	cmp	r4, #13
    6f42:	bne.n	6efa <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x56>
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    6f44:	add.w	r9, r9, #1
    6f48:	uxtb.w	r9, r9
    6f4c:	cmp	r7, r9
    6f4e:	bcs.n	6edc <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x38>
        return false;
      }
#endif  // USE_UTF8_LONG_NAMES
    }
  }
  return true;
    6f50:	movs	r0, #1
    6f52:	b.n	6f56 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xb2>

fail:
  return false;
    6f54:	movs	r0, #0
}
    6f56:	add	sp, #40	; 0x28
    6f58:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return u == 0;
    6f5c:	clz	r0, r0
    6f60:	lsrs	r0, r0, #5
}
    6f62:	add	sp, #40	; 0x28
    6f64:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00006f68 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)>:
//------------------------------------------------------------------------------
bool FatFile::createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    6f68:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  FatFile dir = *this;
    6f6c:	mov	lr, r0
bool FatFile::createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    6f6e:	sub	sp, #40	; 0x28
    6f70:	mov	r4, r2
    6f72:	mov	r8, r1
    6f74:	mov	r6, r3
  FatFile dir = *this;
    6f76:	add.w	r9, sp, #4
    6f7a:	add.w	r7, r2, #17
    6f7e:	add.w	ip, r2, #28
    uint8_t sum = 0;
    6f82:	movs	r5, #0
    6f84:	ldmia.w	lr!, {r0, r1, r2, r3}
    6f88:	stmia.w	r9!, {r0, r1, r2, r3}
    6f8c:	ldmia.w	lr!, {r0, r1, r2, r3}
    6f90:	stmia.w	r9!, {r0, r1, r2, r3}
    6f94:	ldr.w	r3, [lr]
    6f98:	str.w	r3, [r9]
      sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    6f9c:	lsls	r3, r5, #7
    6f9e:	ldrb.w	r2, [r7, #1]!
    6fa2:	orr.w	r3, r3, r5, lsr #1
    for (uint8_t i = 0; i < 11; i++) {
    6fa6:	cmp	r7, ip
      sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    6fa8:	uxtab	r3, r2, r3
    6fac:	uxtb	r5, r3
    for (uint8_t i = 0; i < 11; i++) {
    6fae:	bne.n	6f9c <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x34>
  void reset() { next = begin; }
    6fb0:	ldr	r3, [r4, #0]
    6fb2:	str	r3, [r4, #4]
  DirLfn_t* ldir;
  uint8_t checksum = lfnChecksum(fname->sfn);
  uint8_t fc = 0;
  fname->reset();

  for (uint8_t order = 1; order <= lfnOrd; order++) {
    6fb4:	cmp	r6, #0
    6fb6:	beq.n	706c <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x104>
  uint8_t fc = 0;
    6fb8:	mov.w	r9, #0
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    6fbc:	mov.w	sl, #1
    return seekSet(32UL * index) ? readDirCache() : nullptr;
    6fc0:	mov	r7, r9
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(index - order));
    6fc2:	sub.w	r1, r8, sl
    6fc6:	add	r0, sp, #4
    6fc8:	uxth	r1, r1
    6fca:	lsls	r1, r1, #5
    6fcc:	bl	6554 <FatFile::seekSet(unsigned long)>
    6fd0:	cmp	r0, #0
    6fd2:	beq.n	707c <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x114>
    6fd4:	movs	r1, #0
    6fd6:	add	r0, sp, #4
    6fd8:	bl	6294 <FatFile::readDirCache(bool)>
    if (!ldir) {
    6fdc:	cmp	r0, #0
    6fde:	beq.n	707c <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x114>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dir.m_vol->cacheDirty();
    6fe0:	ldr	r2, [sp, #12]
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    6fe2:	cmp	sl, r6
  bool atEnd() { return next == end; }
    6fe4:	mov.w	ip, #1
  void dirty() { m_status |= CACHE_STATUS_DIRTY; }
    6fe8:	ldrb.w	r3, [r2, #36]	; 0x24
    6fec:	orr.w	r3, r3, #1
    6ff0:	strb.w	r3, [r2, #36]	; 0x24
    6ff4:	ite	eq
    6ff6:	orreq.w	r2, sl, #64	; 0x40
    6ffa:	movne	r2, sl
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    6ffc:	movs	r3, #15
    ldir->mustBeZero1 = 0;
    6ffe:	strb	r7, [r0, #12]
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    7000:	strb	r2, [r0, #0]
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    7002:	adds	r2, r0, #1
    7004:	strb	r3, [r0, #11]
    7006:	movs	r3, #0
    ldir->checksum = checksum;
    7008:	strb	r5, [r0, #13]
    700a:	ldr	r1, [r4, #8]
  *reinterpret_cast<uint16_t*>(dst) = src;
    700c:	strh	r7, [r0, #26]
    setLe16(ldir->mustBeZero2, 0);
    for (uint8_t i = 0; i < 13; i++) {
    700e:	b.n	701e <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xb6>
    7010:	strh	r0, [r2, #0]
    7012:	add.w	ip, ip, #1
    7016:	adds	r3, #1
    7018:	adds	r2, #2
    701a:	uxtb.w	ip, ip
    701e:	ldr	r0, [r4, #4]
      uint16_t cp;
      if (fname->atEnd()) {
    7020:	cmp	r0, r1
    7022:	beq.n	7042 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xda>
  uint16_t get16() { return atEnd() ? 0 : *next++; }
    7024:	add.w	lr, r0, #1
    7028:	str.w	lr, [r4, #4]
    702c:	ldrb	r0, [r0, #0]
  if (i < 5) {
    702e:	cmp	r3, #4
    7030:	uxtb.w	lr, r3
    7034:	bls.n	7010 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xa8>
  } else if (i < 11) {
    7036:	cmp.w	lr, #10
    703a:	bhi.n	7056 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xee>
    703c:	strh.w	r0, [r2, #3]
}
    7040:	b.n	7012 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xaa>
        cp = fc++ ? 0XFFFF : 0;
    7042:	cmp.w	r9, #0
    7046:	beq.n	7074 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x10c>
    7048:	add.w	r9, r9, #1
    704c:	movw	r0, #65535	; 0xffff
    7050:	uxtb.w	r9, r9
    7054:	b.n	702e <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xc6>
    for (uint8_t i = 0; i < 13; i++) {
    7056:	cmp.w	ip, #13
  *reinterpret_cast<uint16_t*>(dst) = src;
    705a:	strh.w	r0, [r2, #5]
    705e:	bne.n	7012 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xaa>
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    7060:	add.w	sl, sl, #1
    7064:	uxtb.w	sl, sl
    7068:	cmp	r6, sl
    706a:	bcs.n	6fc2 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x5a>
        DBG_HALT_IF(cp == 0XFFFF);
      }
      putLfnChar(ldir, i, cp);
    }
  }
  return true;
    706c:	movs	r0, #1

fail:
  return false;
}
    706e:	add	sp, #40	; 0x28
    7070:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        cp = fc++ ? 0XFFFF : 0;
    7074:	mov	r0, r9
    7076:	mov.w	r9, #1
    707a:	b.n	702e <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xc6>
  return false;
    707c:	movs	r0, #0
}
    707e:	add	sp, #40	; 0x28
    7080:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00007084 <FatFile::makeSFN(FatLfn_t*)>:
  uint8_t uc = 0;
  uint8_t i = 0;
  uint8_t in = 7;
  const char* dot;
  const char* end = fname->end;
  const char* ptr = fname->begin;
    7084:	mov	r2, r0
  // Assume blanks removed from start and end.
  DBG_HALT_IF(*ptr == ' ' || *(end - 1) == ' ' || *(end - 1) == '.');

  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
    7086:	mov.w	r1, #538976288	; 0x20202020
  const char* ptr = fname->begin;
    708a:	ldr.w	r3, [r2], #18
bool FatFile::makeSFN(FatLfn_t* fname) {
    708e:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    fname->sfn[k] = ' ';
    7092:	str.w	r1, [r0, #18]
bool FatFile::makeSFN(FatLfn_t* fname) {
    7096:	mov	lr, r0
  const char* end = fname->end;
    7098:	ldr	r4, [r0, #8]
    fname->sfn[k] = ' ';
    709a:	str	r1, [r2, #4]
    709c:	str.w	r1, [r2, #7]
  }
  // Not 8.3 if starts with dot.
  is83 = *ptr == '.' ? false : true;
    70a0:	ldrb	r2, [r3, #0]
    70a2:	cmp	r2, #46	; 0x2e
    70a4:	ite	ne
    70a6:	movne	r0, #1
    70a8:	moveq	r0, #0
  // Skip leading dots.
  for (; *ptr == '.'; ptr++) {
    70aa:	bne.n	70b4 <FatFile::makeSFN(FatLfn_t*)+0x30>
    70ac:	ldrb.w	r2, [r3, #1]!
    70b0:	cmp	r2, #46	; 0x2e
    70b2:	beq.n	70ac <FatFile::makeSFN(FatLfn_t*)+0x28>
  }
  // Find last dot.
  for (dot = end - 1; dot > ptr && *dot != '.'; dot--) {
    70b4:	subs	r1, r4, #1
    70b6:	cmp	r1, r3
    70b8:	bls.n	70d2 <FatFile::makeSFN(FatLfn_t*)+0x4e>
    70ba:	mov	r2, r1
    70bc:	b.n	70c4 <FatFile::makeSFN(FatLfn_t*)+0x40>
    70be:	cmp	r3, r2
    70c0:	mov	r1, r2
    70c2:	beq.n	70d2 <FatFile::makeSFN(FatLfn_t*)+0x4e>
    70c4:	mov	r1, r2
    70c6:	subs	r2, #1
    70c8:	ldrb.w	ip, [r1]
    70cc:	cmp.w	ip, #46	; 0x2e
    70d0:	bne.n	70be <FatFile::makeSFN(FatLfn_t*)+0x3a>
  }

  for (; ptr < end; ptr++) {
    70d2:	cmp	r4, r3
    70d4:	mov.w	r5, #0
    70d8:	bls.w	71e8 <FatFile::makeSFN(FatLfn_t*)+0x164>
    70dc:	movs	r6, #7
    70de:	movs	r7, #8
    70e0:	mov	r9, r5
    70e2:	mov	r8, r5
    70e4:	b.n	70f4 <FatFile::makeSFN(FatLfn_t*)+0x70>
    70e6:	adds	r3, #1
    c = *ptr;
    if (c == '.' && ptr == dot) {
      in = 10;                // Max index for full 8.3 name.
    70e8:	movs	r6, #10
      i = 8;                  // Place for extension.
    70ea:	mov.w	r9, #8
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    70ee:	movs	r7, #16
  for (; ptr < end; ptr++) {
    70f0:	cmp	r4, r3
    70f2:	bls.n	71ac <FatFile::makeSFN(FatLfn_t*)+0x128>
    c = *ptr;
    70f4:	ldrb	r2, [r3, #0]
    if (c == '.' && ptr == dot) {
    70f6:	cmp	r2, #46	; 0x2e
    70f8:	it	eq
    70fa:	cmpeq	r1, r3
    70fc:	beq.n	70e6 <FatFile::makeSFN(FatLfn_t*)+0x62>
  if (c == '"' || c == '|' || c == '[' || c == '\\' || c == ']') {
    70fe:	cmp	r2, #34	; 0x22
    7100:	beq.n	711e <FatFile::makeSFN(FatLfn_t*)+0x9a>
    7102:	cmp	r2, #124	; 0x7c
    7104:	beq.n	711e <FatFile::makeSFN(FatLfn_t*)+0x9a>
    7106:	sub.w	ip, r2, #91	; 0x5b
    710a:	cmp.w	ip, #2
    710e:	bls.n	711e <FatFile::makeSFN(FatLfn_t*)+0x9a>
  if ((0X2A <= c && c <= 0X2F && c != 0X2D) || (0X3A <= c && c <= 0X3F)) {
    7110:	sub.w	ip, r2, #42	; 0x2a
    7114:	cmp.w	ip, #5
    7118:	bhi.n	715e <FatFile::makeSFN(FatLfn_t*)+0xda>
    711a:	cmp	r2, #45	; 0x2d
    711c:	beq.n	715e <FatFile::makeSFN(FatLfn_t*)+0xda>
    } else {
      if (sfnReservedChar(c)) {
        is83 = false;
        // Skip UTF-8 trailing characters.
        if ((c & 0XC0) == 0X80) {
    711e:	and.w	r2, r2, #192	; 0xc0
    7122:	cmp	r2, #128	; 0x80
    7124:	beq.n	71e2 <FatFile::makeSFN(FatLfn_t*)+0x15e>
          continue;
        }
        c = '_';
      }
      if (i > in) {
    7126:	cmp	r6, r9
    7128:	bcs.n	718a <FatFile::makeSFN(FatLfn_t*)+0x106>
        is83 = false;
        if (in == 10 || ptr > dot) {
    712a:	cmp	r1, r3
    712c:	ite	cs
    712e:	movcs	r0, #0
    7130:	movcc	r0, #1
    7132:	cmp	r6, #10
    7134:	it	eq
    7136:	orreq.w	r0, r0, #1
    713a:	cmp	r0, #0
    713c:	beq.n	71ce <FatFile::makeSFN(FatLfn_t*)+0x14a>
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
    713e:	ldrb.w	r3, [lr, #18]
    7142:	cmp	r3, #32
    7144:	beq.n	71c8 <FatFile::makeSFN(FatLfn_t*)+0x144>
  }
  if (is83) {
    fname->flags = (lc & uc) ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    7146:	ldrb.w	r3, [lr, #16]
    fname->flags = FNAME_FLAG_LOST_CHARS;
    714a:	movs	r0, #1
    fname->sfn[fname->seqPos] = '~';
    714c:	movs	r1, #126	; 0x7e
    fname->sfn[fname->seqPos + 1] = '1';
    714e:	movs	r2, #49	; 0x31
    fname->sfn[fname->seqPos] = '~';
    7150:	add	r3, lr
    fname->flags = FNAME_FLAG_LOST_CHARS;
    7152:	strb.w	r0, [lr, #17]
    fname->sfn[fname->seqPos] = '~';
    7156:	strb	r1, [r3, #18]
    fname->sfn[fname->seqPos + 1] = '1';
    7158:	strb	r2, [r3, #19]
  }
  return true;

fail:
  return false;
}
    715a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    715e:	sub.w	ip, r2, #58	; 0x3a
    7162:	cmp.w	ip, #5
    7166:	bls.n	711e <FatFile::makeSFN(FatLfn_t*)+0x9a>
      if (sfnReservedChar(c)) {
    7168:	sub.w	ip, r2, #33	; 0x21
    716c:	cmp.w	ip, #93	; 0x5d
    7170:	bhi.n	711e <FatFile::makeSFN(FatLfn_t*)+0x9a>
      if (i > in) {
    7172:	cmp	r6, r9
    7174:	bcc.n	712a <FatFile::makeSFN(FatLfn_t*)+0xa6>
      if (isLower(c)) {
    7176:	sub.w	ip, r2, #97	; 0x61
    717a:	cmp.w	ip, #25
    717e:	bhi.n	71d2 <FatFile::makeSFN(FatLfn_t*)+0x14e>
        c += 'A' - 'a';
    7180:	subs	r2, #32
        lc |= bit;
    7182:	orrs	r5, r7
        c += 'A' - 'a';
    7184:	uxtb	r2, r2
        lc |= bit;
    7186:	uxtb	r5, r5
    7188:	b.n	718e <FatFile::makeSFN(FatLfn_t*)+0x10a>
        is83 = false;
    718a:	movs	r0, #0
        c = '_';
    718c:	movs	r2, #95	; 0x5f
      fname->sfn[i++] = c;
    718e:	add.w	ip, r9, #1
    7192:	add	r9, lr
  for (; ptr < end; ptr++) {
    7194:	adds	r3, #1
      fname->sfn[i++] = c;
    7196:	strb.w	r2, [r9, #18]
    719a:	uxtb.w	r2, ip
      if (i < 7) {
    719e:	cmp	r2, #6
        fname->seqPos = i;
    71a0:	mov	r9, r2
    71a2:	it	ls
    71a4:	strbls.w	r2, [lr, #16]
  for (; ptr < end; ptr++) {
    71a8:	cmp	r4, r3
    71aa:	bhi.n	70f4 <FatFile::makeSFN(FatLfn_t*)+0x70>
  if (fname->sfn[0] == ' ') {
    71ac:	ldrb.w	r3, [lr, #18]
    71b0:	cmp	r3, #32
    71b2:	beq.n	71c8 <FatFile::makeSFN(FatLfn_t*)+0x144>
  if (is83) {
    71b4:	cmp	r0, #0
    71b6:	beq.n	7146 <FatFile::makeSFN(FatLfn_t*)+0xc2>
    fname->flags = (lc & uc) ? FNAME_FLAG_MIXED_CASE : lc;
    71b8:	tst.w	r8, r5
    71bc:	it	ne
    71be:	movne	r5, #2
    71c0:	strb.w	r5, [lr, #17]
}
    71c4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  return false;
    71c8:	movs	r0, #0
}
    71ca:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    71ce:	mov	r3, r1
    71d0:	b.n	70f0 <FatFile::makeSFN(FatLfn_t*)+0x6c>
      } else if (isUpper(c)) {
    71d2:	sub.w	ip, r2, #65	; 0x41
    71d6:	cmp.w	ip, #25
        uc |= bit;
    71da:	it	ls
    71dc:	orrls.w	r8, r7, r8
    71e0:	b.n	718e <FatFile::makeSFN(FatLfn_t*)+0x10a>
  for (; ptr < end; ptr++) {
    71e2:	adds	r3, #1
        is83 = false;
    71e4:	movs	r0, #0
    71e6:	b.n	70f0 <FatFile::makeSFN(FatLfn_t*)+0x6c>
  for (; ptr < end; ptr++) {
    71e8:	mov	r8, r5
    71ea:	b.n	71ac <FatFile::makeSFN(FatLfn_t*)+0x128>

000071ec <FatFile::makeUniqueSfn(FatLfn_t*)>:
//------------------------------------------------------------------------------
bool FatFile::makeUniqueSfn(FatLfn_t* fname) {
    71ec:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;
    71f0:	mov.w	r9, #98	; 0x62
  DirFat_t* dir;
  uint16_t hex = 0;
    71f4:	movs	r5, #0
bool FatFile::makeUniqueSfn(FatLfn_t* fname) {
    71f6:	mov	r7, r1
    71f8:	mov	r4, r0
    71fa:	ldr.w	fp, [pc, #160]	; 729c <FatFile::makeUniqueSfn(FatLfn_t*)+0xb0>
    for (uint8_t i = pos + 4; i > pos; i--) {
      uint8_t h = hex & 0XF;
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
      hex >>= 4;
    }
    fname->sfn[pos] = '~';
    71fe:	mov.w	sl, #126	; 0x7e
  uint8_t pos = fname->seqPos;
    7202:	ldrb.w	r8, [r1, #16]
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFatFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    7206:	add.w	r6, r1, #18
	return systick_millis_count;
    720a:	cmp.w	r8, #3
    720e:	ldr.w	r3, [fp]
    7212:	it	cs
    7214:	movcs.w	r8, #3
    hex += millis();
    7218:	add	r3, r5
    721a:	uxth	r5, r3
    for (uint8_t i = pos + 4; i > pos; i--) {
    721c:	add.w	r3, r8, #4
    7220:	uxtb	r3, r3
      uint8_t h = hex & 0XF;
    7222:	and.w	r2, r5, #15
    for (uint8_t i = pos + 4; i > pos; i--) {
    7226:	subs	r0, r3, #1
      hex >>= 4;
    7228:	lsrs	r5, r5, #4
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    722a:	cmp	r2, #9
    722c:	add.w	r1, r2, #55	; 0x37
    7230:	it	ls
    7232:	addls.w	r1, r2, #48	; 0x30
    7236:	adds	r2, r7, r3
    for (uint8_t i = pos + 4; i > pos; i--) {
    7238:	uxtb	r3, r0
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    723a:	strb	r1, [r2, #18]
    for (uint8_t i = pos + 4; i > pos; i--) {
    723c:	cmp	r8, r3
    723e:	bne.n	7222 <FatFile::makeUniqueSfn(FatLfn_t*)+0x36>
    fname->sfn[pos] = '~';
    7240:	add.w	r3, r7, r8
  void rewind() { seekSet(0); }
    7244:	movs	r1, #0
    7246:	mov	r0, r4
    7248:	strb.w	sl, [r3, #18]
    724c:	bl	6554 <FatFile::seekSet(unsigned long)>
      dir = readDirCache(true);
    7250:	movs	r1, #1
    7252:	mov	r0, r4
    7254:	bl	6294 <FatFile::readDirCache(bool)>
    7258:	mov	r3, r0
      if (isFatFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    725a:	movs	r2, #11
    725c:	mov	r0, r6
      if (!dir) {
    725e:	cbz	r3, 7288 <FatFile::makeUniqueSfn(FatLfn_t*)+0x9c>
      if (dir->name[0] == FAT_NAME_FREE) {
    7260:	ldrb.w	ip, [r3]
      if (isFatFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    7264:	mov	r1, r3
      if (dir->name[0] == FAT_NAME_FREE) {
    7266:	cmp.w	ip, #0
    726a:	beq.n	7294 <FatFile::makeUniqueSfn(FatLfn_t*)+0xa8>
      if (isFatFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    726c:	ldrb	r3, [r3, #11]
    726e:	lsls	r3, r3, #28
    7270:	bmi.n	7250 <FatFile::makeUniqueSfn(FatLfn_t*)+0x64>
    7272:	bl	df0c <memcmp>
    7276:	cmp	r0, #0
    7278:	bne.n	7250 <FatFile::makeUniqueSfn(FatLfn_t*)+0x64>
  for (uint8_t seq = FIRST_HASH_SEQ; seq < 100; seq++) {
    727a:	add.w	r9, r9, #4294967295
    727e:	ands.w	r9, r9, #255	; 0xff
    7282:	bne.n	720a <FatFile::makeUniqueSfn(FatLfn_t*)+0x1e>
  }
  // fall inti fail - too many tries.
  DBG_FAIL_MACRO;

fail:
  return false;
    7284:	mov	r0, r9
fail:
    7286:	b.n	7290 <FatFile::makeUniqueSfn(FatLfn_t*)+0xa4>
        if (!getError()) {
    7288:	ldrb	r0, [r4, #1]
    728a:	clz	r0, r0
    728e:	lsrs	r0, r0, #5

done:
  return true;
}
    7290:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return true;
    7294:	movs	r0, #1
}
    7296:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    729a:	nop
    729c:	.word	0x20007aec

000072a0 <FatFile::open(FatFile*, FatLfn_t*, int)>:
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, FatLfn_t* fname, oflag_t oflag) {
    72a0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    72a4:	vpush	{d8}
    72a8:	sub	sp, #44	; 0x2c
    72aa:	strd	r0, r3, [sp, #8]
  uint16_t curIndex;
  uint16_t date;
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  auto vol = dirFile->m_vol;
    72ae:	ldr	r3, [r1, #8]
    72b0:	str	r3, [sp, #28]

  if (!dirFile->isDir() || isOpen()) {
    72b2:	ldrb	r3, [r1, #0]
    72b4:	tst.w	r3, #208	; 0xd0
    72b8:	beq.n	7362 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
  bool isOpen() const { return m_attributes; }
    72ba:	ldr	r3, [sp, #8]
    72bc:	ldrb	r3, [r3, #0]
    72be:	cmp	r3, #0
    72c0:	bne.n	7362 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  nameOrd = (fname->len + 12) / 13;
    72c2:	ldr	r3, [r2, #12]
    72c4:	mov	r8, r2
    72c6:	ldr	r2, [pc, #616]	; (7530 <FatFile::open(FatFile*, FatLfn_t*, int)+0x290>)
    72c8:	mov	r6, r1
    72ca:	adds	r3, #12
    72cc:	umull	r2, r3, r2, r3
    72d0:	ubfx	r2, r3, #2, #8
  freeNeed = (fname->flags & FNAME_FLAG_NEED_LFN) ? 1 + nameOrd : 1;
    72d4:	ldrb.w	r3, [r8, #17]
    72d8:	lsls	r0, r3, #30
  nameOrd = (fname->len + 12) / 13;
    72da:	str	r2, [sp, #16]
  freeNeed = (fname->flags & FNAME_FLAG_NEED_LFN) ? 1 + nameOrd : 1;
    72dc:	beq.w	742e <FatFile::open(FatFile*, FatLfn_t*, int)+0x18e>
    72e0:	adds	r7, r2, #1
    72e2:	uxtb	r7, r7
  uint8_t checksum = 0;
    72e4:	movs	r3, #0
  void rewind() { seekSet(0); }
    72e6:	mov	r0, r6
    72e8:	mov	r1, r3
    72ea:	mov	r4, r3
    72ec:	str	r3, [sp, #24]
    72ee:	bl	6554 <FatFile::seekSet(unsigned long)>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    72f2:	add.w	r3, r8, #18
  uint8_t order = 0;
    72f6:	mov	fp, r4
  uint8_t lfnOrd = 0;
    72f8:	mov	r9, r4
  uint16_t freeIndex = 0;
    72fa:	mov	sl, r4
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    72fc:	vmov	s16, r3
  bool fnameFound = false;
    7300:	str	r4, [sp, #20]
    curIndex = dirFile->m_curPosition / FS_DIR_SIZE;
    7302:	ldr	r5, [r6, #20]
    dir = dirFile->readDirCache();
    7304:	movs	r1, #0
    7306:	mov	r0, r6
    7308:	bl	6294 <FatFile::readDirCache(bool)>
    curIndex = dirFile->m_curPosition / FS_DIR_SIZE;
    730c:	ubfx	r5, r5, #5, #16
    if (!dir) {
    7310:	mov	r3, r0
    7312:	cbz	r0, 735e <FatFile::open(FatFile*, FatLfn_t*, int)+0xbe>
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
    7314:	ldrb	r2, [r0, #0]
    7316:	cmp	r2, #229	; 0xe5
    7318:	beq.n	736e <FatFile::open(FatFile*, FatLfn_t*, int)+0xce>
    731a:	cbz	r2, 736e <FatFile::open(FatFile*, FatLfn_t*, int)+0xce>
        freeFound = 0;
    731c:	cmp	r4, r7
    731e:	it	cc
    7320:	movcc	r4, #0
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    7322:	cmp	r2, #46	; 0x2e
    7324:	beq.n	737e <FatFile::open(FatFile*, FatLfn_t*, int)+0xde>
  return dir->attributes == FAT_ATTRIB_LONG_NAME;
    7326:	ldrb.w	ip, [r0, #11]
    } else if (isFatLongName(dir)) {
    732a:	cmp.w	ip, #15
    732e:	beq.n	73da <FatFile::open(FatFile*, FatLfn_t*, int)+0x13a>
    } else if (isFatFileOrSubdir(dir)) {
    7330:	ands.w	ip, ip, #8
    7334:	bne.n	737e <FatFile::open(FatFile*, FatLfn_t*, int)+0xde>
      if (lfnOrd) {
    7336:	cmp.w	r9, #0
    733a:	bne.w	74e8 <FatFile::open(FatFile*, FatLfn_t*, int)+0x248>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    733e:	movs	r2, #11
    7340:	vmov	r1, s16
    7344:	bl	df0c <memcmp>
    7348:	cmp	r0, #0
    734a:	bne.n	7302 <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
    734c:	ldrb.w	r3, [r8, #17]
    7350:	ands.w	r3, r3, #1
    7354:	beq.w	7520 <FatFile::open(FatFile*, FatLfn_t*, int)+0x280>
          goto found;
        }
        fnameFound = true;
    7358:	movs	r3, #1
    735a:	str	r3, [sp, #20]
    735c:	b.n	7302 <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
      if (dirFile->getError()) {
    735e:	ldrb	r3, [r6, #1]
    7360:	cbz	r3, 7384 <FatFile::open(FatFile*, FatLfn_t*, int)+0xe4>
    goto fail;
  }
  return true;

fail:
  return false;
    7362:	movs	r0, #0
}
    7364:	add	sp, #44	; 0x2c
    7366:	vpop	{d8}
    736a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    curIndex = dirFile->m_curPosition / FS_DIR_SIZE;
    736e:	cmp	r4, #0
    7370:	it	eq
    7372:	moveq	sl, r5
      if (freeFound < freeNeed) {
    7374:	cmp	r4, r7
    7376:	bcs.n	737c <FatFile::open(FatFile*, FatLfn_t*, int)+0xdc>
        freeFound++;
    7378:	adds	r4, #1
    737a:	uxtb	r4, r4
      if (dir->name[0] == FAT_NAME_FREE) {
    737c:	cbz	r2, 7384 <FatFile::open(FatFile*, FatLfn_t*, int)+0xe4>
      lfnOrd = 0;
    737e:	mov.w	r9, #0
    7382:	b.n	7302 <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
    7384:	ldr	r3, [sp, #12]
    7386:	lsls	r2, r3, #22
    7388:	bpl.n	7362 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>

#define O_READ O_RDONLY
#define O_WRITE O_WRONLY

inline bool isWriteMode(oflag_t oflag) {
  oflag &= O_ACCMODE;
    738a:	and.w	r3, r3, #3
  return oflag == O_WRONLY || oflag == O_RDWR;
    738e:	subs	r3, #1
    7390:	cmp	r3, #1
    7392:	bhi.n	7362 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
  if (freeFound == 0) {
    7394:	cmp	r4, #0
    7396:	it	eq
    7398:	moveq	sl, r5
  while (freeFound < freeNeed) {
    739a:	cmp	r4, r7
    739c:	bcc.n	73a6 <FatFile::open(FatFile*, FatLfn_t*, int)+0x106>
    739e:	b.n	7432 <FatFile::open(FatFile*, FatLfn_t*, int)+0x192>
    freeFound++;
    73a0:	uxtb	r4, r3
  while (freeFound < freeNeed) {
    73a2:	cmp	r7, r4
    73a4:	beq.n	7432 <FatFile::open(FatFile*, FatLfn_t*, int)+0x192>
    dir = dirFile->readDirCache();
    73a6:	movs	r1, #0
    73a8:	mov	r0, r6
    73aa:	bl	6294 <FatFile::readDirCache(bool)>
    freeFound++;
    73ae:	adds	r3, r4, #1
    if (!dir) {
    73b0:	cmp	r0, #0
    73b2:	bne.n	73a0 <FatFile::open(FatFile*, FatLfn_t*, int)+0x100>
      if (dirFile->getError()) {
    73b4:	ldrb	r3, [r6, #1]
    73b6:	cmp	r3, #0
    73b8:	bne.n	7362 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
  while (freeFound < freeNeed) {
    73ba:	cmp	r7, r4
    73bc:	bls.n	7432 <FatFile::open(FatFile*, FatLfn_t*, int)+0x192>
    73be:	ldr	r5, [sp, #28]
    73c0:	b.n	73ce <FatFile::open(FatFile*, FatLfn_t*, int)+0x12e>
    return m_sectorsPerCluster * (m_bytesPerSector / FS_DIR_SIZE);
    73c2:	ldrb	r3, [r5, #4]
    freeFound += vol->dirEntriesPerCluster();
    73c4:	add.w	r4, r4, r3, lsl #4
    73c8:	uxtb	r4, r4
  while (freeFound < freeNeed) {
    73ca:	cmp	r7, r4
    73cc:	bls.n	7432 <FatFile::open(FatFile*, FatLfn_t*, int)+0x192>
    if (!dirFile->addDirCluster()) {
    73ce:	mov	r0, r6
    73d0:	bl	5b90 <FatFile::addDirCluster()>
    73d4:	cmp	r0, #0
    73d6:	bne.n	73c2 <FatFile::open(FatFile*, FatLfn_t*, int)+0x122>
    73d8:	b.n	7362 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
      if (!lfnOrd) {
    73da:	cmp.w	r9, #0
    73de:	bne.n	7414 <FatFile::open(FatFile*, FatLfn_t*, int)+0x174>
        order = ldir->order & 0X1F;
    73e0:	and.w	fp, r2, #31
        if (order != nameOrd ||
    73e4:	ldr	r1, [sp, #16]
    73e6:	cmp	r1, fp
    73e8:	bne.n	7302 <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
    73ea:	ands.w	r9, r2, #64	; 0x40
    73ee:	beq.n	7302 <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
        checksum = ldir->checksum;
    73f0:	ldrb	r3, [r0, #13]
    73f2:	mov	r9, r1
    73f4:	str	r3, [sp, #24]
      if (order == 1) {
    73f6:	cmp.w	fp, #1
    73fa:	bne.n	7302 <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
        if (!dirFile->cmpName(curIndex + 1, fname, lfnOrd)) {
    73fc:	adds	r1, r5, #1
    73fe:	mov	r3, r9
    7400:	mov	r2, r8
    7402:	mov	r0, r6
    7404:	uxth	r1, r1
    7406:	bl	6ea4 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)>
          lfnOrd = 0;
    740a:	cmp	r0, #0
    740c:	it	eq
    740e:	moveq.w	r9, #0
    7412:	b.n	7302 <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
      } else if (ldir->order != --order || checksum != ldir->checksum) {
    7414:	add.w	fp, fp, #4294967295
    7418:	uxtb.w	fp, fp
    741c:	cmp	r2, fp
    741e:	bne.n	737e <FatFile::open(FatFile*, FatLfn_t*, int)+0xde>
    7420:	ldrb	r3, [r0, #13]
    7422:	ldr	r2, [sp, #24]
    7424:	cmp	r3, r2
    7426:	beq.n	73f6 <FatFile::open(FatFile*, FatLfn_t*, int)+0x156>
      lfnOrd = 0;
    7428:	mov.w	r9, #0
    742c:	b.n	7302 <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
  freeNeed = (fname->flags & FNAME_FLAG_NEED_LFN) ? 1 + nameOrd : 1;
    742e:	movs	r7, #1
    7430:	b.n	72e4 <FatFile::open(FatFile*, FatLfn_t*, int)+0x44>
  if (fnameFound) {
    7432:	ldr	r3, [sp, #20]
    7434:	cbz	r3, 7442 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1a2>
    if (!dirFile->makeUniqueSfn(fname)) {
    7436:	mov	r1, r8
    7438:	mov	r0, r6
    743a:	bl	71ec <FatFile::makeUniqueSfn(FatLfn_t*)>
    743e:	cmp	r0, #0
    7440:	beq.n	7362 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
  lfnOrd = freeNeed - 1;
    7442:	subs	r7, #1
  if (!dirFile->createLFN(curIndex, fname, lfnOrd)) {
    7444:	mov	r2, r8
    7446:	mov	r0, r6
  lfnOrd = freeNeed - 1;
    7448:	uxtb	r3, r7
  curIndex = freeIndex + lfnOrd;
    744a:	add.w	r5, sl, r3
  lfnOrd = freeNeed - 1;
    744e:	mov	r7, r3
  curIndex = freeIndex + lfnOrd;
    7450:	uxth	r5, r5
  if (!dirFile->createLFN(curIndex, fname, lfnOrd)) {
    7452:	mov	r1, r5
    7454:	bl	6f68 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)>
    7458:	cmp	r0, #0
    745a:	beq.n	7362 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    return seekSet(32UL * index) ? readDirCache() : nullptr;
    745c:	lsls	r1, r5, #5
    745e:	mov	r0, r6
    7460:	bl	6554 <FatFile::seekSet(unsigned long)>
    7464:	cmp	r0, #0
    7466:	beq.w	7362 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    746a:	movs	r1, #0
    746c:	mov	r0, r6
    746e:	bl	6294 <FatFile::readDirCache(bool)>
  if (!dir) {
    7472:	mov	r4, r0
    7474:	cmp	r0, #0
    7476:	beq.w	7362 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
  memset(dir, 0, sizeof(DirFat_t));
    747a:	movs	r2, #32
    747c:	movs	r1, #0
    747e:	bl	e064 <memset>
  memcpy(dir->name, fname->sfn, 11);
    7482:	ldr.w	r2, [r8, #18]
    7486:	ldr.w	r3, [r8, #22]
    748a:	str	r2, [r4, #0]
    748c:	str	r3, [r4, #4]
    748e:	ldrb.w	r3, [r8, #28]
    7492:	ldrh.w	r2, [r8, #26]
    7496:	strb	r3, [r4, #10]
    7498:	strh	r2, [r4, #8]
  dir->caseFlags = (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;
    749a:	ldrb.w	r3, [r8, #17]
    749e:	and.w	r3, r3, #24
    74a2:	strb	r3, [r4, #12]
  if (FsDateTime::callback) {
    74a4:	ldr	r3, [pc, #140]	; (7534 <FatFile::open(FatFile*, FatLfn_t*, int)+0x294>)
    74a6:	ldr	r3, [r3, #0]
    74a8:	cmp	r3, #0
    74aa:	beq.n	7524 <FatFile::open(FatFile*, FatLfn_t*, int)+0x284>
    FsDateTime::callback(&date, &time, &ms10);
    74ac:	add.w	r2, sp, #35	; 0x23
    74b0:	add.w	r1, sp, #38	; 0x26
    74b4:	add	r0, sp, #36	; 0x24
    74b6:	blx	r3
  *reinterpret_cast<uint16_t*>(dst) = src;
    74b8:	ldrh.w	r3, [sp, #36]	; 0x24
    74bc:	strh	r3, [r4, #16]
    74be:	ldrh.w	r3, [sp, #38]	; 0x26
    74c2:	strh	r3, [r4, #14]
    dir->createTimeMs = ms10;
    74c4:	ldrb.w	r3, [sp, #35]	; 0x23
    74c8:	strb	r3, [r4, #13]
    74ca:	ldr	r2, [sp, #28]
    74cc:	ldrb.w	r3, [r2, #36]	; 0x24
    74d0:	orr.w	r3, r3, #1
    74d4:	strb.w	r3, [r2, #36]	; 0x24
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
    74d8:	ldr	r3, [sp, #12]
    74da:	mov	r2, r5
    74dc:	mov	r1, r6
    74de:	ldr	r0, [sp, #8]
    74e0:	str	r7, [sp, #0]
    74e2:	bl	6604 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    74e6:	b.n	7364 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc4>
        if (1 == order && lfnChecksum(dir->name) == checksum) {
    74e8:	cmp.w	fp, #1
    74ec:	bne.w	7362 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    for (uint8_t i = 0; i < 11; i++) {
    74f0:	adds	r0, #10
    74f2:	b.n	74f8 <FatFile::open(FatFile*, FatLfn_t*, int)+0x258>
      sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    74f4:	ldrb.w	r2, [r3, #1]!
    74f8:	mov.w	r1, ip, lsl #7
    for (uint8_t i = 0; i < 11; i++) {
    74fc:	cmp	r0, r3
      sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    74fe:	orr.w	r1, r1, ip, lsr #1
    7502:	uxtab	r2, r2, r1
    7506:	uxtb.w	ip, r2
    for (uint8_t i = 0; i < 11; i++) {
    750a:	bne.n	74f4 <FatFile::open(FatFile*, FatLfn_t*, int)+0x254>
    750c:	ldr	r3, [sp, #24]
    750e:	cmp	r3, ip
    7510:	bne.w	7362 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    7514:	mov	r7, r9
  if (oflag & O_EXCL) {
    7516:	ldr	r3, [sp, #12]
    7518:	lsls	r1, r3, #20
    751a:	bmi.w	7362 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    751e:	b.n	74d8 <FatFile::open(FatFile*, FatLfn_t*, int)+0x238>
    7520:	mov	r7, r3
    7522:	b.n	7516 <FatFile::open(FatFile*, FatLfn_t*, int)+0x276>
    7524:	movw	r3, #22049	; 0x5621
    7528:	strh	r3, [r4, #16]
    752a:	strh	r3, [r4, #24]
    752c:	strh	r3, [r4, #18]
    if (FS_DEFAULT_TIME) {
    752e:	b.n	74ca <FatFile::open(FatFile*, FatLfn_t*, int)+0x22a>
    7530:	.word	0x4ec4ec4f
    7534:	.word	0x20006404

00007538 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>:
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path, FatLfn_t* fname,
                            const char** ptr) {
  size_t len = 0;
  // Skip leading spaces.
  while (*path == ' ') {
    7538:	ldrb	r0, [r1, #0]
    753a:	cmp	r0, #32
                            const char** ptr) {
    753c:	push	{r4, r5}
  while (*path == ' ') {
    753e:	bne.n	7548 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x10>
    7540:	ldrb.w	r4, [r1, #1]!
    7544:	cmp	r4, #32
    7546:	beq.n	7540 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x8>
    path++;
  }
  fname->begin = path;
  fname->len = 0;
    7548:	movs	r5, #0
  fname->begin = path;
    754a:	str	r1, [r2, #0]
  fname->len = 0;
    754c:	str	r5, [r2, #12]
  while (*path && !isDirSeparator(*path)) {
    754e:	ldrb	r4, [r1, #0]
    7550:	cmp	r4, #47	; 0x2f
    7552:	beq.n	7574 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x3c>
    7554:	cbz	r4, 7574 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x3c>
    7556:	ldr	r0, [pc, #140]	; (75e4 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xac>)
      DBG_FAIL_MACRO;
      goto fail;
    }
#else   // USE_UTF8_LONG_NAMES
    uint8_t cp = *path++;
    if (cp >= 0X80 || lfnReservedChar(cp)) {
    7558:	tst.w	r4, #128	; 0x80
    uint8_t cp = *path++;
    755c:	add.w	r1, r1, #1
    if (cp >= 0X80 || lfnReservedChar(cp)) {
    7560:	bne.n	7574 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x3c>
    7562:	cmp	r4, #60	; 0x3c
    7564:	bhi.n	75c6 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x8e>
    7566:	cmp	r4, #33	; 0x21
    7568:	bhi.n	757a <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x42>
    756a:	add.w	ip, r4, #4294967295
    756e:	cmp.w	ip, #30
    7572:	bhi.n	758c <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x54>
  *ptr = path;
  return makeSFN(fname);

fail:
  return false;
}
    7574:	movs	r0, #0
    7576:	pop	{r4, r5}
    7578:	bx	lr
    757a:	sub.w	ip, r4, #34	; 0x22
    757e:	uxtb.w	ip, ip
    7582:	lsr.w	ip, r0, ip
    7586:	tst.w	ip, #1
    758a:	bne.n	7574 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x3c>
    if (cp != '.' && cp != ' ') {
    758c:	cmp	r4, #46	; 0x2e
    len++;
    758e:	add.w	r5, r5, #1
    if (cp != '.' && cp != ' ') {
    7592:	beq.n	7598 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x60>
    7594:	cmp	r4, #32
    7596:	bne.n	75d2 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x9a>
  while (*path && !isDirSeparator(*path)) {
    7598:	ldrb	r4, [r1, #0]
    759a:	cbz	r4, 75a0 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x68>
    759c:	cmp	r4, #47	; 0x2f
    759e:	bne.n	7558 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x20>
  if (!fname->len || fname->len > FAT_MAX_LFN_LENGTH) {
    75a0:	ldr	r0, [r2, #12]
    75a2:	subs	r0, #1
    75a4:	cmp	r0, #254	; 0xfe
    75a6:	bhi.n	7574 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x3c>
  for (; *path == ' ' || isDirSeparator(*path); path++) {
    75a8:	cmp	r4, #32
    75aa:	beq.n	75b0 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x78>
    75ac:	cmp	r4, #47	; 0x2f
    75ae:	bne.n	75bc <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x84>
    75b0:	ldrb.w	r0, [r1, #1]!
    75b4:	cmp	r0, #32
    75b6:	beq.n	75b0 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x78>
    75b8:	cmp	r0, #47	; 0x2f
    75ba:	beq.n	75b0 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x78>
  return makeSFN(fname);
    75bc:	mov	r0, r2
  *ptr = path;
    75be:	str	r1, [r3, #0]
}
    75c0:	pop	{r4, r5}
  return makeSFN(fname);
    75c2:	b.w	7084 <FatFile::makeSFN(FatLfn_t*)>
    75c6:	cmp	r4, #92	; 0x5c
    75c8:	beq.n	7574 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x3c>
    75ca:	bls.n	75d8 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xa0>
    75cc:	cmp	r4, #124	; 0x7c
    75ce:	beq.n	7574 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x3c>
    len++;
    75d0:	adds	r5, #1
      fname->end = path;
    75d2:	strd	r1, r5, [r2, #8]
    75d6:	b.n	7598 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x60>
    75d8:	subs	r4, #62	; 0x3e
    75da:	cmp	r4, #1
    75dc:	bhi.n	75d0 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x98>
}
    75de:	movs	r0, #0
    75e0:	pop	{r4, r5}
    75e2:	bx	lr
    75e4:	.word	0x05002101

000075e8 <FatFile::remove()>:
//------------------------------------------------------------------------------
bool FatFile::remove() {
    75e8:	push	{r4, r5, r6, r7, lr}
  FatFile() {}
    75ea:	movs	r3, #0
    75ec:	sub	sp, #44	; 0x2c
    75ee:	str	r3, [sp, #4]
  FatFile dirFile;
  DirFat_t* dir;
  DirLfn_t* ldir;

  // Cant' remove not open for write.
  if (!isWritable()) {
    75f0:	ldrb	r3, [r0, #2]
    75f2:	lsls	r2, r3, #30
    75f4:	bpl.n	7640 <FatFile::remove()+0x58>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
    75f6:	ldr	r1, [r0, #32]
    75f8:	mov	r5, r0
    75fa:	cbz	r1, 7604 <FatFile::remove()+0x1c>
    75fc:	ldr	r0, [r0, #8]
    75fe:	bl	6c98 <FatPartition::freeChain(unsigned long)>
    7602:	cbz	r0, 7640 <FatFile::remove()+0x58>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Cache directory entry.
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    7604:	movs	r1, #1
    7606:	mov	r0, r5
    7608:	bl	5c08 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    760c:	cbz	r0, 7640 <FatFile::remove()+0x58>
    for (uint8_t i = 0; i < 11; i++) {
    760e:	subs	r2, r0, #1
    7610:	add.w	ip, r0, #10
    uint8_t sum = 0;
    7614:	movs	r4, #0
      sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    7616:	lsls	r3, r4, #7
    7618:	ldrb.w	r1, [r2, #1]!
    761c:	orr.w	r3, r3, r4, lsr #1
    for (uint8_t i = 0; i < 11; i++) {
    7620:	cmp	ip, r2
      sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    7622:	uxtab	r3, r1, r3
    7626:	uxtb	r4, r3
    for (uint8_t i = 0; i < 11; i++) {
    7628:	bne.n	7616 <FatFile::remove()+0x2e>
    goto fail;
  }
  checksum = lfnChecksum(dir->name);

  // Mark entry deleted.
  dir->name[0] = FAT_NAME_DELETED;
    762a:	movs	r6, #229	; 0xe5

  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
    762c:	movs	r3, #0
  dir->name[0] = FAT_NAME_DELETED;
    762e:	strb	r6, [r0, #0]
  m_flags = 0;

  // Write entry to device.
  if (!m_vol->cacheSync()) {
    7630:	ldr	r7, [r5, #8]
  m_attributes = FILE_ATTR_CLOSED;
    7632:	strb	r3, [r5, #0]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    7634:	add.w	r0, r7, #36	; 0x24
  m_flags = 0;
    7638:	strb	r3, [r5, #2]
    763a:	bl	3174 <FsCache::sync()>
    763e:	cbnz	r0, 7646 <FatFile::remove()+0x5e>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
    7640:	movs	r0, #0
}
    7642:	add	sp, #44	; 0x2c
    7644:	pop	{r4, r5, r6, r7, pc}
    7646:	add.w	r0, r7, #564	; 0x234
    764a:	bl	3174 <FsCache::sync()>
    764e:	cmp	r0, #0
    7650:	beq.n	7640 <FatFile::remove()+0x58>
    7652:	ldr	r0, [r7, #0]
  bool syncDevice() { return m_blockDev->syncDevice(); }
    7654:	ldr	r3, [r0, #0]
    7656:	ldr	r3, [r3, #28]
    7658:	blx	r3
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    765a:	cmp	r0, #0
    765c:	beq.n	7640 <FatFile::remove()+0x58>
  if (!isLFN()) {
    765e:	ldrb	r3, [r5, #3]
    7660:	cmp	r3, #0
    7662:	beq.n	7642 <FatFile::remove()+0x5a>
  if (!dirFile.openCluster(this)) {
    7664:	mov	r1, r5
    7666:	add	r0, sp, #4
    7668:	bl	6034 <FatFile::openCluster(FatFile*)>
    766c:	cmp	r0, #0
    766e:	beq.n	7640 <FatFile::remove()+0x58>
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    7670:	ldrb	r3, [r5, #3]
    7672:	cmp	r3, #0
    7674:	beq.n	7640 <FatFile::remove()+0x58>
    7676:	movs	r7, #1
    7678:	b.n	76be <FatFile::remove()+0xd6>
    return seekSet(32UL * index) ? readDirCache() : nullptr;
    767a:	add	r0, sp, #4
    767c:	bl	6294 <FatFile::readDirCache(bool)>
    7680:	adds	r3, r7, #1
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    7682:	uxtb	r1, r7
    if (!ldir) {
    7684:	cmp	r0, #0
    7686:	beq.n	7640 <FatFile::remove()+0x58>
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    7688:	ldrb	r2, [r0, #11]
    768a:	cmp	r2, #15
    768c:	bne.n	7640 <FatFile::remove()+0x58>
        order != (ldir->order & 0X1F) || checksum != ldir->checksum) {
    768e:	ldrb	r2, [r0, #0]
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    7690:	uxtb.w	ip, r3
    7694:	uxth	r7, r3
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    7696:	and.w	r3, r2, #31
    769a:	cmp	r3, r1
    769c:	bne.n	7640 <FatFile::remove()+0x58>
        order != (ldir->order & 0X1F) || checksum != ldir->checksum) {
    769e:	ldrb	r3, [r0, #13]
    76a0:	cmp	r3, r4
    76a2:	bne.n	7640 <FatFile::remove()+0x58>
    ldir->order = FAT_NAME_DELETED;
    76a4:	strb	r6, [r0, #0]
    m_vol->cacheDirty();
    76a6:	ldr	r1, [r5, #8]
    76a8:	ldrb.w	r3, [r1, #36]	; 0x24
    76ac:	orr.w	r3, r3, #1
    76b0:	strb.w	r3, [r1, #36]	; 0x24
    if (last) {
    76b4:	lsls	r3, r2, #25
    76b6:	bmi.n	76d4 <FatFile::remove()+0xec>
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    76b8:	ldrb	r3, [r5, #3]
    76ba:	cmp	r3, ip
    76bc:	bcc.n	7640 <FatFile::remove()+0x58>
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.cacheDir(m_dirIndex - order));
    76be:	ldrh	r1, [r5, #4]
    76c0:	add	r0, sp, #4
    76c2:	subs	r1, r1, r7
    76c4:	uxth	r1, r1
    76c6:	lsls	r1, r1, #5
    76c8:	bl	6554 <FatFile::seekSet(unsigned long)>
    76cc:	movs	r1, #0
    76ce:	cmp	r0, #0
    76d0:	bne.n	767a <FatFile::remove()+0x92>
    76d2:	b.n	7640 <FatFile::remove()+0x58>
      if (!m_vol->cacheSync()) {
    76d4:	ldr	r4, [r5, #8]
    76d6:	add.w	r0, r4, #36	; 0x24
    76da:	bl	3174 <FsCache::sync()>
    76de:	cmp	r0, #0
    76e0:	beq.n	7640 <FatFile::remove()+0x58>
    76e2:	add.w	r0, r4, #564	; 0x234
    76e6:	bl	3174 <FsCache::sync()>
    76ea:	cmp	r0, #0
    76ec:	beq.n	7640 <FatFile::remove()+0x58>
    76ee:	ldr	r0, [r4, #0]
  bool syncDevice() { return m_blockDev->syncDevice(); }
    76f0:	ldr	r3, [r0, #0]
    76f2:	ldr	r3, [r3, #28]
    76f4:	blx	r3
    76f6:	b.n	7642 <FatFile::remove()+0x5a>

000076f8 <FsBaseFile::FsBaseFile(FsBaseFile const&)>:
FsBaseFile::FsBaseFile(const FsBaseFile& from) {
    76f8:	push	{r3, r4, r5, r6, r7, lr}
    76fa:	movs	r6, #0
  if (from.m_fFile) {
    76fc:	ldr	r7, [r1, #56]	; 0x38
FsBaseFile::FsBaseFile(const FsBaseFile& from) {
    76fe:	mov	r5, r1
    7700:	mov	r4, r0
    7702:	strd	r6, r6, [r0, #56]	; 0x38
  if (from.m_fFile) {
    7706:	cbz	r7, 7730 <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x38>
    m_fFile = new (m_fileMem) FatFile;
    7708:	mov	r1, r0
    770a:	movs	r0, #36	; 0x24
    770c:	bl	79fc <operator new(unsigned int, unsigned long*)>
  FatFile() {}
    7710:	strh	r6, [r0, #0]
    7712:	strb	r6, [r0, #2]
    *m_fFile = *from.m_fFile;
    7714:	mov	ip, r0
    7716:	ldr	r5, [r5, #56]	; 0x38
    m_fFile = new (m_fileMem) FatFile;
    7718:	str	r0, [r4, #56]	; 0x38
    *m_fFile = *from.m_fFile;
    771a:	ldmia	r5!, {r0, r1, r2, r3}
    771c:	stmia.w	ip!, {r0, r1, r2, r3}
    7720:	ldmia	r5!, {r0, r1, r2, r3}
    7722:	stmia.w	ip!, {r0, r1, r2, r3}
    7726:	ldr	r3, [r5, #0]
    7728:	str.w	r3, [ip]
}
    772c:	mov	r0, r4
    772e:	pop	{r3, r4, r5, r6, r7, pc}
  } else if (from.m_xFile) {
    7730:	ldr	r3, [r1, #60]	; 0x3c
    7732:	cmp	r3, #0
    7734:	beq.n	772c <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x34>
    m_xFile = new (m_fileMem) ExFatFile;
    7736:	mov	r1, r0
    7738:	movs	r0, #56	; 0x38
    773a:	bl	79fc <operator new(unsigned int, unsigned long*)>
  ExFatFile() {}
    773e:	strb.w	r7, [r0, #49]	; 0x31
    7742:	strh	r7, [r0, #50]	; 0x32
    *m_xFile = *from.m_xFile;
    7744:	mov	r2, r0
    7746:	ldr	r3, [r5, #60]	; 0x3c
    m_xFile = new (m_fileMem) ExFatFile;
    7748:	str	r0, [r4, #60]	; 0x3c
    *m_xFile = *from.m_xFile;
    774a:	add.w	r7, r3, #48	; 0x30
    774e:	ldr	r6, [r3, #0]
    7750:	adds	r3, #16
    7752:	ldr.w	r5, [r3, #-12]
    7756:	adds	r2, #16
    7758:	ldr.w	r0, [r3, #-8]
    775c:	ldr.w	r1, [r3, #-4]
    7760:	cmp	r3, r7
    7762:	str.w	r6, [r2, #-16]
    7766:	str.w	r5, [r2, #-12]
    776a:	str.w	r0, [r2, #-8]
    776e:	str.w	r1, [r2, #-4]
    7772:	bne.n	774e <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x56>
    7774:	ldr	r3, [r3, #0]
}
    7776:	mov	r0, r4
    *m_xFile = *from.m_xFile;
    7778:	str	r3, [r2, #0]
}
    777a:	pop	{r3, r4, r5, r6, r7, pc}

0000777c <FsBaseFile::close()>:
//------------------------------------------------------------------------------
bool FsBaseFile::close() {
    777c:	push	{r4, lr}
    777e:	mov	r4, r0
  bool rtn = m_fFile ? m_fFile->close() : m_xFile ? m_xFile->close() : true;
    7780:	ldr	r0, [r0, #56]	; 0x38
    7782:	cbz	r0, 7790 <FsBaseFile::close()+0x14>
    7784:	bl	5c28 <FatFile::close()>
  m_fFile = nullptr;
    7788:	movs	r3, #0
  m_xFile = nullptr;
    778a:	strd	r3, r3, [r4, #56]	; 0x38
  return rtn;
}
    778e:	pop	{r4, pc}
  bool rtn = m_fFile ? m_fFile->close() : m_xFile ? m_xFile->close() : true;
    7790:	ldr	r0, [r4, #60]	; 0x3c
    7792:	cbz	r0, 77a0 <FsBaseFile::close()+0x24>
    7794:	bl	3b40 <ExFatFile::close()>
  m_fFile = nullptr;
    7798:	movs	r3, #0
  m_xFile = nullptr;
    779a:	strd	r3, r3, [r4, #56]	; 0x38
}
    779e:	pop	{r4, pc}
  m_fFile = nullptr;
    77a0:	movs	r3, #0
  bool rtn = m_fFile ? m_fFile->close() : m_xFile ? m_xFile->close() : true;
    77a2:	movs	r0, #1
  m_xFile = nullptr;
    77a4:	strd	r3, r3, [r4, #56]	; 0x38
}
    77a8:	pop	{r4, pc}
    77aa:	nop

000077ac <FsBaseFile::open(FsVolume*, char const*, int)>:
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
  if (!vol) {
    77ac:	cmp	r1, #0
    77ae:	beq.n	7848 <FsBaseFile::open(FsVolume*, char const*, int)+0x9c>
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
    77b0:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    77b4:	mov	r4, r0
  bool rtn = m_fFile ? m_fFile->close() : m_xFile ? m_xFile->close() : true;
    77b6:	ldr	r0, [r0, #56]	; 0x38
    77b8:	mov	r5, r1
    77ba:	mov	r8, r2
    77bc:	mov	r7, r3
    77be:	cbz	r0, 77f6 <FsBaseFile::open(FsVolume*, char const*, int)+0x4a>
    77c0:	bl	5c28 <FatFile::close()>
  m_fFile = nullptr;
    77c4:	movs	r6, #0
    return false;
  }
  close();
  if (vol->m_fVol) {
    77c6:	ldr.w	r9, [r5, #1152]	; 0x480
  m_xFile = nullptr;
    77ca:	strd	r6, r6, [r4, #56]	; 0x38
  if (vol->m_fVol) {
    77ce:	cmp.w	r9, #0
    77d2:	beq.n	7810 <FsBaseFile::open(FsVolume*, char const*, int)+0x64>
    m_fFile = new (m_fileMem) FatFile;
    77d4:	mov	r1, r4
    77d6:	movs	r0, #36	; 0x24
    77d8:	bl	79fc <operator new(unsigned int, unsigned long*)>
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    77dc:	mov	r3, r7
    77de:	strh	r6, [r0, #0]
    77e0:	mov	r2, r8
    77e2:	strb	r6, [r0, #2]
    m_fFile = new (m_fileMem) FatFile;
    77e4:	str	r0, [r4, #56]	; 0x38
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    77e6:	ldr.w	r1, [r5, #1152]	; 0x480
    77ea:	bl	6024 <FatFile::open(FatVolume*, char const*, int)>
    77ee:	cbnz	r0, 7842 <FsBaseFile::open(FsVolume*, char const*, int)+0x96>
      return true;
    }
    m_fFile = nullptr;
    77f0:	str	r0, [r4, #56]	; 0x38
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
    77f2:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  bool rtn = m_fFile ? m_fFile->close() : m_xFile ? m_xFile->close() : true;
    77f6:	ldr	r0, [r4, #60]	; 0x3c
    77f8:	cmp	r0, #0
    77fa:	beq.n	77c4 <FsBaseFile::open(FsVolume*, char const*, int)+0x18>
    77fc:	bl	3b40 <ExFatFile::close()>
  m_fFile = nullptr;
    7800:	movs	r6, #0
  if (vol->m_fVol) {
    7802:	ldr.w	r9, [r5, #1152]	; 0x480
  m_xFile = nullptr;
    7806:	strd	r6, r6, [r4, #56]	; 0x38
  if (vol->m_fVol) {
    780a:	cmp.w	r9, #0
    780e:	bne.n	77d4 <FsBaseFile::open(FsVolume*, char const*, int)+0x28>
  } else if (vol->m_xVol) {
    7810:	ldr.w	r3, [r5, #1156]	; 0x484
    7814:	cbz	r3, 783c <FsBaseFile::open(FsVolume*, char const*, int)+0x90>
    m_xFile = new (m_fileMem) ExFatFile;
    7816:	mov	r1, r4
    7818:	movs	r0, #56	; 0x38
    781a:	bl	79fc <operator new(unsigned int, unsigned long*)>
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    781e:	mov	r3, r7
    7820:	strb.w	r9, [r0, #49]	; 0x31
    7824:	mov	r2, r8
    7826:	strh.w	r9, [r0, #50]	; 0x32
    m_xFile = new (m_fileMem) ExFatFile;
    782a:	str	r0, [r4, #60]	; 0x3c
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    782c:	ldr.w	r1, [r5, #1156]	; 0x484
    7830:	bl	43d8 <ExFatFile::open(ExFatVolume*, char const*, int)>
    7834:	cbnz	r0, 7842 <FsBaseFile::open(FsVolume*, char const*, int)+0x96>
    m_xFile = nullptr;
    7836:	str	r0, [r4, #60]	; 0x3c
}
    7838:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return false;
    783c:	movs	r0, #0
}
    783e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return true;
    7842:	movs	r0, #1
}
    7844:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return false;
    7848:	movs	r0, #0
}
    784a:	bx	lr

0000784c <FsBaseFile::openNext(FsBaseFile*, int)>:
    m_xFile = nullptr;
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::openNext(FsBaseFile* dir, oflag_t oflag) {
    784c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7850:	mov	r4, r0
  bool rtn = m_fFile ? m_fFile->close() : m_xFile ? m_xFile->close() : true;
    7852:	ldr	r0, [r0, #56]	; 0x38
bool FsBaseFile::openNext(FsBaseFile* dir, oflag_t oflag) {
    7854:	mov	r5, r1
    7856:	mov	r8, r2
  bool rtn = m_fFile ? m_fFile->close() : m_xFile ? m_xFile->close() : true;
    7858:	cbz	r0, 78ac <FsBaseFile::openNext(FsBaseFile*, int)+0x60>
    785a:	bl	5c28 <FatFile::close()>
  m_fFile = nullptr;
    785e:	movs	r6, #0
    7860:	str	r6, [r4, #56]	; 0x38
  close();
  if (dir->m_fFile) {
    7862:	ldr	r7, [r5, #56]	; 0x38
  m_xFile = nullptr;
    7864:	str	r6, [r4, #60]	; 0x3c
  if (dir->m_fFile) {
    7866:	cbz	r7, 7886 <FsBaseFile::openNext(FsBaseFile*, int)+0x3a>
    m_fFile = new (m_fileMem) FatFile;
    7868:	mov	r1, r4
    786a:	movs	r0, #36	; 0x24
    786c:	bl	79fc <operator new(unsigned int, unsigned long*)>
    if (m_fFile->openNext(dir->m_fFile, oflag)) {
    7870:	mov	r2, r8
    7872:	strh	r6, [r0, #0]
    7874:	strb	r6, [r0, #2]
    m_fFile = new (m_fileMem) FatFile;
    7876:	str	r0, [r4, #56]	; 0x38
    if (m_fFile->openNext(dir->m_fFile, oflag)) {
    7878:	ldr	r1, [r5, #56]	; 0x38
    787a:	bl	66f0 <FatFile::openNext(FatFile*, int)>
    787e:	cbnz	r0, 78a6 <FsBaseFile::openNext(FsBaseFile*, int)+0x5a>
      return true;
    }
    m_fFile = nullptr;
    7880:	str	r0, [r4, #56]	; 0x38
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
    7882:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (dir->m_xFile) {
    7886:	ldr	r0, [r5, #60]	; 0x3c
    7888:	cmp	r0, #0
    788a:	beq.n	7882 <FsBaseFile::openNext(FsBaseFile*, int)+0x36>
    m_xFile = new (m_fileMem) ExFatFile;
    788c:	mov	r1, r4
    788e:	movs	r0, #56	; 0x38
    7890:	bl	79fc <operator new(unsigned int, unsigned long*)>
    if (m_xFile->openNext(dir->m_xFile, oflag)) {
    7894:	mov	r2, r8
    7896:	strb.w	r7, [r0, #49]	; 0x31
    789a:	strh	r7, [r0, #50]	; 0x32
    m_xFile = new (m_fileMem) ExFatFile;
    789c:	str	r0, [r4, #60]	; 0x3c
    if (m_xFile->openNext(dir->m_xFile, oflag)) {
    789e:	ldr	r1, [r5, #60]	; 0x3c
    78a0:	bl	43e8 <ExFatFile::openNext(ExFatFile*, int)>
    78a4:	cbz	r0, 78b8 <FsBaseFile::openNext(FsBaseFile*, int)+0x6c>
      return true;
    78a6:	movs	r0, #1
}
    78a8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  bool rtn = m_fFile ? m_fFile->close() : m_xFile ? m_xFile->close() : true;
    78ac:	ldr	r0, [r4, #60]	; 0x3c
    78ae:	cmp	r0, #0
    78b0:	beq.n	785e <FsBaseFile::openNext(FsBaseFile*, int)+0x12>
    78b2:	bl	3b40 <ExFatFile::close()>
    78b6:	b.n	785e <FsBaseFile::openNext(FsBaseFile*, int)+0x12>
    m_xFile = nullptr;
    78b8:	str	r0, [r4, #60]	; 0x3c
}
    78ba:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    78be:	nop

000078c0 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)>:
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part,
                     uint32_t volStart) {
    78c0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  m_fVol = nullptr;
    78c4:	movs	r5, #0
                     uint32_t volStart) {
    78c6:	mov	r6, r0
    78c8:	mov	r7, r1
  m_xVol = new (m_volMem) ExFatVolume;
    78ca:	mov	r1, r0
  m_fVol = nullptr;
    78cc:	str.w	r5, [r0, #1152]	; 0x480
  m_xVol = new (m_volMem) ExFatVolume;
    78d0:	mov.w	r0, #1152	; 0x480
                     uint32_t volStart) {
    78d4:	mov	r8, r3
    78d6:	ldr.w	sl, [sp, #32]
    78da:	mov	r9, r2
  m_xVol = new (m_volMem) ExFatVolume;
    78dc:	bl	79fc <operator new(unsigned int, unsigned long*)>
    m_sector = 0XFFFFFFFF;
    78e0:	mov.w	r3, #4294967295
    m_blockDev = blockDev;
    78e4:	str	r5, [r0, #4]
    m_status = 0;
    78e6:	strb	r5, [r0, #0]
    if (!init(dev, part, volStart)) {
    78e8:	mov	r2, r8
    m_sector = 0XFFFFFFFF;
    78ea:	str	r3, [r0, #8]
    78ec:	mov	r1, r7
    78ee:	str.w	r3, [r0, #536]	; 0x218
    78f2:	mov	r3, sl
    m_blockDev = blockDev;
    78f4:	str.w	r5, [r0, #532]	; 0x214
    78f8:	mov	r4, r0
    m_status = 0;
    78fa:	strb.w	r5, [r0, #528]	; 0x210
  ExFatPartition() = default;
    78fe:	strb.w	r5, [r0, #1092]	; 0x444
    7902:	strb.w	r5, [r0, #1145]	; 0x479
    7906:	strh.w	r5, [r0, #1146]	; 0x47a
    790a:	str.w	r0, [r6, #1156]	; 0x484
    790e:	bl	4834 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)>
    7912:	cmp	r0, #0
    7914:	bne.n	7994 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0xd4>
  if (m_xVol && m_xVol->begin(blockDev, false, part, volStart)) {
    goto done;
  }
  m_xVol = nullptr;
    7916:	movs	r5, #0
  m_fVol = new (m_volMem) FatVolume;
    7918:	mov	r1, r6
    791a:	mov.w	r0, #1128	; 0x468
  m_xVol = nullptr;
    791e:	str.w	r5, [r6, #1156]	; 0x484
  m_fVol = new (m_volMem) FatVolume;
    7922:	bl	79fc <operator new(unsigned int, unsigned long*)>
  FatPartition() = default;
    7926:	strb	r5, [r0, #7]
    m_blockDev = blockDev;
    7928:	str	r5, [r0, #40]	; 0x28
    if (!init(dev, part, volStart)) {
    792a:	mov	r3, sl
    m_status = 0;
    792c:	strb.w	r5, [r0, #36]	; 0x24
    7930:	mov	r2, r8
    m_blockDev = blockDev;
    7932:	str.w	r5, [r0, #568]	; 0x238
    7936:	mov	r1, r7
    m_status = 0;
    7938:	strb.w	r5, [r0, #564]	; 0x234
    793c:	mov	r4, r0
    793e:	strh.w	r5, [r0, #1092]	; 0x444
    7942:	strb.w	r5, [r0, #1094]	; 0x446
    m_sector = 0XFFFFFFFF;
    7946:	mov.w	r5, #4294967295
    794a:	str	r5, [r0, #44]	; 0x2c
    794c:	str.w	r5, [r0, #572]	; 0x23c
    7950:	str.w	r0, [r6, #1152]	; 0x480
    7954:	bl	6d84 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)>
    7958:	cbnz	r0, 7966 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0xa6>
  if (m_fVol && m_fVol->begin(blockDev, false, part, volStart)) {
    goto done;
  }
  m_fVol = nullptr;
    795a:	movs	r3, #0
  return false;
    795c:	mov	r0, r3
  m_fVol = nullptr;
    795e:	str.w	r3, [r6, #1152]	; 0x480
done:
  if (setCwv || !m_cwv) {
    m_cwv = this;
  }
  return true;
}
    7962:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    m_vwd.close();
    7966:	addw	r5, r4, #1092	; 0x444
    796a:	mov	r0, r5
    796c:	bl	5c28 <FatFile::close()>
    return m_vwd.openRoot(this);
    7970:	mov	r1, r4
    7972:	mov	r0, r5
    7974:	bl	608c <FatFile::openRoot(FatVolume*)>
    if (!chdir()) {
    7978:	cmp	r0, #0
    797a:	beq.n	795a <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0x9a>
    if (setCwv || !m_cwv) {
    797c:	ldr	r3, [pc, #72]	; (79c8 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0x108>)
    797e:	ldr	r2, [r3, #0]
    7980:	cbnz	r2, 79b2 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0xf2>
      m_cwv = this;
    7982:	str	r4, [r3, #0]
  if (setCwv || !m_cwv) {
    7984:	ldr	r3, [pc, #68]	; (79cc <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0x10c>)
    7986:	cmp.w	r9, #0
    798a:	beq.n	79ba <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0xfa>
  return true;
    798c:	movs	r0, #1
    m_cwv = this;
    798e:	str	r6, [r3, #0]
}
    7990:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    m_vwd.close();
    7994:	add.w	r5, r4, #1096	; 0x448
    7998:	mov	r0, r5
    799a:	bl	3b40 <ExFatFile::close()>
    return m_vwd.openRoot(this);
    799e:	mov	r1, r4
    79a0:	mov	r0, r5
    79a2:	bl	3b9c <ExFatFile::openRoot(ExFatVolume*)>
    if (!chdir()) {
    79a6:	cmp	r0, #0
    79a8:	beq.n	7916 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0x56>
    if (setCwv || !m_cwv) {
    79aa:	ldr	r3, [pc, #36]	; (79d0 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0x110>)
    79ac:	ldr	r2, [r3, #0]
    79ae:	cmp	r2, #0
    79b0:	beq.n	7982 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0xc2>
  if (setCwv || !m_cwv) {
    79b2:	ldr	r3, [pc, #24]	; (79cc <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0x10c>)
    79b4:	cmp.w	r9, #0
    79b8:	bne.n	798c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0xcc>
    79ba:	ldr	r2, [r3, #0]
    79bc:	cmp	r2, #0
    79be:	beq.n	798c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0xcc>
  return true;
    79c0:	movs	r0, #1
}
    79c2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    79c6:	nop
    79c8:	.word	0x200065d0
    79cc:	.word	0x200065cc
    79d0:	.word	0x20006488

000079d4 <FsVolume::open(char const*, int)>:
bool FsVolume::ls(print_t* pr, const char* path, uint8_t flags) {
  FsBaseFile dir;
  return dir.open(this, path, O_RDONLY) && dir.ls(pr, flags);
}
//------------------------------------------------------------------------------
FsFile FsVolume::open(const char* path, oflag_t oflag) {
    79d4:	push	{r4, r5, r6, lr}
	constexpr Print() : write_error(0) {}
    79d6:	movs	r5, #0
    79d8:	mov.w	r6, #1000	; 0x3e8
    79dc:	mov	r4, r0
    79de:	strb	r5, [r0, #4]
    79e0:	strb	r5, [r0, #12]
    79e2:	str	r6, [r0, #8]
  FsBaseFile() = default;
    79e4:	strd	r5, r5, [r0, #72]	; 0x48
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    79e8:	ldr	r5, [pc, #12]	; (79f8 <FsVolume::open(char const*, int)+0x24>)
    79ea:	str.w	r5, [r0], #16
  FsFile tmpFile;
  tmpFile.open(this, path, oflag);
    79ee:	bl	77ac <FsBaseFile::open(FsVolume*, char const*, int)>
  return tmpFile;
}
    79f2:	mov	r0, r4
    79f4:	pop	{r4, r5, r6, pc}
    79f6:	nop
    79f8:	.word	0x20000ab8

000079fc <operator new(unsigned int, unsigned long*)>:
 */
#include "FsNew.h"
void* operator new(size_t size, newalign_t* ptr) {
  (void)size;
  return ptr;
}
    79fc:	mov	r0, r1
    79fe:	bx	lr

00007a00 <SdCardInterface::status()>:
   * \param[out] sds location for 64 status bytes.
   * \return true for success or false for failure.
   */
  virtual bool readSDS(sds_t* sds) = 0;
  /** \return card status. */
  virtual uint32_t status() { return 0XFFFFFFFF; }
    7a00:	mov.w	r0, #4294967295
    7a04:	bx	lr
    7a06:	nop

00007a08 <SharedSpiCard::errorCode() const>:
  uint8_t errorCode() const { return m_errorCode; }
    7a08:	ldrb	r0, [r0, #18]
    7a0a:	bx	lr

00007a0c <SharedSpiCard::errorData() const>:
  uint32_t errorData() const { return m_status; }
    7a0c:	ldrb	r0, [r0, #21]
    7a0e:	bx	lr

00007a10 <SharedSpiCard::type() const>:
  uint8_t type() const { return m_type; }
    7a10:	ldrb	r0, [r0, #22]
    7a12:	bx	lr

00007a14 <DedicatedSpiCard::hasDedicatedSpi()>:
   * \param[in] spiConfig SPI card configuration.
   * \return true for success or false for failure.
   */
  bool begin(SdSpiConfig spiConfig);
  /** \return true, can be in dedicaded state. */
  bool hasDedicatedSpi() { return true; }
    7a14:	movs	r0, #1
    7a16:	bx	lr

00007a18 <DedicatedSpiCard::isDedicatedSpi()>:
  /** \return true if in dedicated SPI state. */
  bool isDedicatedSpi() { return m_dedicatedSpi; }
    7a18:	ldrb	r0, [r0, #28]
    7a1a:	bx	lr

00007a1c <DedicatedSpiCard::~DedicatedSpiCard()>:
class DedicatedSpiCard : public SharedSpiCard {
    7a1c:	bx	lr
    7a1e:	nop

00007a20 <DedicatedSpiCard::~DedicatedSpiCard()>:
    7a20:	push	{r4, lr}
    7a22:	mov	r4, r0
    7a24:	movs	r1, #32
    7a26:	bl	d09c <operator delete(void*, unsigned int)>
    7a2a:	mov	r0, r4
    7a2c:	pop	{r4, pc}
    7a2e:	nop

00007a30 <SharedSpiCard::end()>:
void SharedSpiCard::end() {
    7a30:	push	{r3, r4, r5, lr}
  if (m_beginCalled) {
    7a32:	ldrb	r3, [r0, #16]
    7a34:	cbz	r3, 7a4c <SharedSpiCard::end()+0x1c>
    syncDevice();
    7a36:	mov	r5, r0
    7a38:	mov	r4, r0
    7a3a:	ldr.w	r3, [r5], #4
    7a3e:	ldr	r3, [r3, #28]
    7a40:	blx	r3
  void spiEnd() { m_spiDriver.end(); }
    7a42:	mov	r0, r5
    7a44:	bl	a010 <SdSpiArduinoDriver::end()>
    m_beginCalled = false;
    7a48:	movs	r3, #0
    7a4a:	strb	r3, [r4, #16]
}
    7a4c:	pop	{r3, r4, r5, pc}
    7a4e:	nop

00007a50 <SharedSpiCard::writeStop()>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SharedSpiCard::writeStop() {
    7a50:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7a54:	ldr	r6, [pc, #128]	; (7ad8 <SharedSpiCard::writeStop()+0x88>)
    7a56:	mov	r7, r0
    return m_spiDriver.receive();
    7a58:	add.w	r8, r0, #4
    7a5c:	ldr	r5, [r6, #0]
  void set(uint16_t ms) { m_endTime = ms + millis16(); }
    7a5e:	add.w	r5, r5, #600	; 0x258
    7a62:	uxth	r5, r5
  explicit Timeout(uint16_t ms) { set(ms); }
    7a64:	b.n	7a6e <SharedSpiCard::writeStop()+0x1e>
    7a66:	ldr	r3, [r6, #0]
  bool timedOut() { return (int16_t)(m_endTime - millis16()) < 0; }
    7a68:	subs	r3, r5, r3
    if (timeout.timedOut()) {
    7a6a:	lsls	r3, r3, #16
    7a6c:	bmi.n	7a90 <SharedSpiCard::writeStop()+0x40>
    7a6e:	mov	r0, r8
    7a70:	bl	a018 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    7a74:	cmp	r0, #255	; 0xff
    7a76:	mov	r4, r0
    7a78:	bne.n	7a66 <SharedSpiCard::writeStop()+0x16>
    m_spiDriver.send(data);
    7a7a:	movs	r1, #253	; 0xfd
    7a7c:	mov	r0, r8
    7a7e:	bl	a054 <SdSpiArduinoDriver::send(unsigned char)>
  if (m_spiActive) {
    7a82:	ldrb	r3, [r7, #19]
    7a84:	cbnz	r3, 7aba <SharedSpiCard::writeStop()+0x6a>
  if (!waitReady(SD_WRITE_TIMEOUT)) {
    goto fail;
  }
  spiSend(STOP_TRAN_TOKEN);
  spiStop();
  m_state = IDLE_STATE;
    7a86:	movs	r3, #0
    7a88:	movs	r0, #1
    7a8a:	strb	r3, [r7, #20]

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
    7a8c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_errorCode = code;
    7a90:	movs	r3, #31
  if (m_spiActive) {
    7a92:	ldrb	r0, [r7, #19]
    7a94:	strb	r3, [r7, #18]
    7a96:	cmp	r0, #0
    7a98:	beq.n	7a8c <SharedSpiCard::writeStop()+0x3c>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    7a9a:	ldrb	r0, [r7, #17]
    7a9c:	movs	r1, #1
    7a9e:	bl	a0c0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    7aa2:	movs	r1, #255	; 0xff
    7aa4:	mov	r0, r8
    7aa6:	bl	a054 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    7aaa:	mov	r0, r8
    7aac:	bl	9fc0 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    7ab0:	movs	r3, #0
  return false;
    7ab2:	mov	r0, r3
    m_spiActive = false;
    7ab4:	strb	r3, [r7, #19]
}
    7ab6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    7aba:	movs	r1, #1
    7abc:	ldrb	r0, [r7, #17]
    7abe:	bl	a0c0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    7ac2:	mov	r1, r4
    7ac4:	mov	r0, r8
    7ac6:	bl	a054 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    7aca:	mov	r0, r8
    7acc:	bl	9fc0 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    7ad0:	movs	r3, #0
    7ad2:	strb	r3, [r7, #19]
}
    7ad4:	b.n	7a86 <SharedSpiCard::writeStop()+0x36>
    7ad6:	nop
    7ad8:	.word	0x20007aec

00007adc <SharedSpiCard::isBusy()>:
bool SharedSpiCard::isBusy() {
    7adc:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (m_state == READ_STATE) {
    7ae0:	ldrb	r3, [r0, #20]
    7ae2:	cmp	r3, #1
    7ae4:	beq.n	7b52 <SharedSpiCard::isBusy()+0x76>
  if (!spiActive) {
    7ae6:	ldrb	r6, [r0, #19]
    7ae8:	mov	r4, r0
    7aea:	cbz	r6, 7b00 <SharedSpiCard::isBusy()+0x24>
    return m_spiDriver.receive();
    7aec:	adds	r0, #4
    7aee:	bl	a018 <SdSpiArduinoDriver::receive()>
  bool rtn = 0XFF != spiReceive();
    7af2:	subs.w	r5, r0, #255	; 0xff
    7af6:	it	ne
    7af8:	movne	r5, #1
}
    7afa:	mov	r0, r5
    7afc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  void spiActivate() { m_spiDriver.activate(); }
    7b00:	adds	r7, r0, #4
    m_spiActive = true;
    7b02:	mov.w	r8, #1
    7b06:	mov	r0, r7
    7b08:	bl	9f84 <SdSpiArduinoDriver::activate()>
  void spiSelect() { sdCsWrite(m_csPin, false); }
    7b0c:	mov	r1, r6
    7b0e:	ldrb	r0, [r4, #17]
    7b10:	strb.w	r8, [r4, #19]
    7b14:	bl	a0c0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    7b18:	movs	r1, #255	; 0xff
    7b1a:	mov	r0, r7
    7b1c:	bl	a054 <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
    7b20:	mov	r0, r7
    7b22:	bl	a018 <SdSpiArduinoDriver::receive()>
  if (m_spiActive) {
    7b26:	ldrb	r3, [r4, #19]
  bool rtn = 0XFF != spiReceive();
    7b28:	subs.w	r5, r0, #255	; 0xff
    7b2c:	it	ne
    7b2e:	movne	r5, #1
  if (m_spiActive) {
    7b30:	cmp	r3, #0
    7b32:	beq.n	7afa <SharedSpiCard::isBusy()+0x1e>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    7b34:	mov	r1, r8
    7b36:	ldrb	r0, [r4, #17]
    7b38:	bl	a0c0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    7b3c:	movs	r1, #255	; 0xff
    7b3e:	mov	r0, r7
    7b40:	bl	a054 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    7b44:	mov	r0, r7
    7b46:	bl	9fc0 <SdSpiArduinoDriver::deactivate()>
}
    7b4a:	mov	r0, r5
    m_spiActive = false;
    7b4c:	strb	r6, [r4, #19]
}
    7b4e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return false;
    7b52:	movs	r5, #0
}
    7b54:	mov	r0, r5
    7b56:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7b5a:	nop

00007b5c <SharedSpiCard::readData(unsigned char*, unsigned int)>:
bool SharedSpiCard::readData(uint8_t* dst, size_t count) {
    7b5c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7b60:	ldr	r7, [pc, #128]	; (7be4 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x88>)
    7b62:	mov	r4, r0
    7b64:	mov	r8, r1
    7b66:	mov	r9, r2
    7b68:	ldr	r5, [r7, #0]
    return m_spiDriver.receive();
    7b6a:	adds	r6, r0, #4
  void set(uint16_t ms) { m_endTime = ms + millis16(); }
    7b6c:	add.w	r5, r5, #300	; 0x12c
    7b70:	uxth	r5, r5
  explicit Timeout(uint16_t ms) { set(ms); }
    7b72:	b.n	7b7c <SharedSpiCard::readData(unsigned char*, unsigned int)+0x20>
    7b74:	ldr	r3, [r7, #0]
  bool timedOut() { return (int16_t)(m_endTime - millis16()) < 0; }
    7b76:	subs	r3, r5, r3
    if (timeout.timedOut()) {
    7b78:	lsls	r3, r3, #16
    7b7a:	bmi.n	7b98 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x3c>
    7b7c:	mov	r0, r6
    7b7e:	bl	a018 <SdSpiArduinoDriver::receive()>
  while ((m_status = spiReceive()) == 0XFF) {
    7b82:	cmp	r0, #255	; 0xff
    7b84:	strb	r0, [r4, #21]
    7b86:	beq.n	7b74 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x18>
  if (m_status != DATA_START_SECTOR) {
    7b88:	cmp	r0, #254	; 0xfe
    7b8a:	beq.n	7bc2 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x66>
    7b8c:	movs	r3, #25
  if (m_spiActive) {
    7b8e:	ldrb	r0, [r4, #19]
    m_errorCode = code;
    7b90:	strb	r3, [r4, #18]
    7b92:	cbnz	r0, 7ba2 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x46>
}
    7b94:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    7b98:	movs	r3, #30
  if (m_spiActive) {
    7b9a:	ldrb	r0, [r4, #19]
    7b9c:	strb	r3, [r4, #18]
    7b9e:	cmp	r0, #0
    7ba0:	beq.n	7b94 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x38>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    7ba2:	ldrb	r0, [r4, #17]
    7ba4:	movs	r1, #1
    7ba6:	bl	a0c0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    7baa:	movs	r1, #255	; 0xff
    7bac:	mov	r0, r6
    7bae:	bl	a054 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    7bb2:	mov	r0, r6
    7bb4:	bl	9fc0 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    7bb8:	movs	r3, #0
  return false;
    7bba:	mov	r0, r3
    m_spiActive = false;
    7bbc:	strb	r3, [r4, #19]
}
    7bbe:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return m_spiDriver.receive(buf, n);
    7bc2:	mov	r2, r9
    7bc4:	mov	r1, r8
    7bc6:	mov	r0, r6
    7bc8:	bl	a030 <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>
  if ((m_status = spiReceive(dst, count))) {
    7bcc:	strb	r0, [r4, #21]
    7bce:	cbnz	r0, 7be0 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x84>
    return m_spiDriver.receive();
    7bd0:	mov	r0, r6
    7bd2:	bl	a018 <SdSpiArduinoDriver::receive()>
    7bd6:	mov	r0, r6
    7bd8:	bl	a018 <SdSpiArduinoDriver::receive()>
  return true;
    7bdc:	movs	r0, #1
    7bde:	b.n	7b94 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x38>
    7be0:	movs	r3, #38	; 0x26
    7be2:	b.n	7b8e <SharedSpiCard::readData(unsigned char*, unsigned int)+0x32>
    7be4:	.word	0x20007aec

00007be8 <SharedSpiCard::readStop()>:
bool SharedSpiCard::readStop() {
    7be8:	push	{r4, r5, r6, r7, lr}
  m_state = IDLE_STATE;
    7bea:	movs	r7, #0
bool SharedSpiCard::readStop() {
    7bec:	sub	sp, #12
  if (cardCommand(CMD12, 0)) {
    7bee:	movs	r1, #12
bool SharedSpiCard::readStop() {
    7bf0:	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
    7bf2:	mov	r2, r7
  m_state = IDLE_STATE;
    7bf4:	strb	r7, [r0, #20]
  if (cardCommand(CMD12, 0)) {
    7bf6:	bl	7c70 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    7bfa:	cbnz	r0, 7c2a <SharedSpiCard::readStop()+0x42>
  if (m_spiActive) {
    7bfc:	ldrb	r6, [r4, #19]
    7bfe:	cbnz	r6, 7c08 <SharedSpiCard::readStop()+0x20>
  return true;
    7c00:	movs	r6, #1
}
    7c02:	mov	r0, r6
    7c04:	add	sp, #12
    7c06:	pop	{r4, r5, r6, r7, pc}
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    7c08:	mov	r5, r0
    7c0a:	movs	r1, #1
    7c0c:	ldrb	r0, [r4, #17]
    7c0e:	bl	a0c0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    7c12:	adds	r0, r4, #4
    7c14:	movs	r1, #255	; 0xff
    7c16:	str	r0, [sp, #4]
    7c18:	bl	a054 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    7c1c:	ldr	r0, [sp, #4]
    7c1e:	bl	9fc0 <SdSpiArduinoDriver::deactivate()>
    7c22:	mov	r0, r6
    m_spiActive = false;
    7c24:	strb	r5, [r4, #19]
}
    7c26:	add	sp, #12
    7c28:	pop	{r4, r5, r6, r7, pc}
    m_errorCode = code;
    7c2a:	movs	r3, #9
  if (m_spiActive) {
    7c2c:	ldrb	r6, [r4, #19]
    7c2e:	strb	r3, [r4, #18]
    7c30:	cmp	r6, #0
    7c32:	beq.n	7c02 <SharedSpiCard::readStop()+0x1a>
    m_spiDriver.send(data);
    7c34:	adds	r5, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    7c36:	ldrb	r0, [r4, #17]
    7c38:	movs	r1, #1
}
    7c3a:	mov	r6, r7
    7c3c:	bl	a0c0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    7c40:	movs	r1, #255	; 0xff
    7c42:	mov	r0, r5
    7c44:	bl	a054 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    7c48:	mov	r0, r5
    7c4a:	bl	9fc0 <SdSpiArduinoDriver::deactivate()>
}
    7c4e:	mov	r0, r6
    m_spiActive = false;
    7c50:	strb	r7, [r4, #19]
}
    7c52:	add	sp, #12
    7c54:	pop	{r4, r5, r6, r7, pc}
    7c56:	nop

00007c58 <SharedSpiCard::syncDevice()>:
  if (m_state == WRITE_STATE) {
    7c58:	ldrb	r2, [r0, #20]
    7c5a:	cmp	r2, #2
    7c5c:	beq.n	7c66 <SharedSpiCard::syncDevice()+0xe>
  if (m_state == READ_STATE) {
    7c5e:	cmp	r2, #1
    7c60:	beq.n	7c6c <SharedSpiCard::syncDevice()+0x14>
}
    7c62:	movs	r0, #1
    7c64:	bx	lr
    return writeStop();
    7c66:	ldr	r3, [r0, #0]
    7c68:	ldr	r3, [r3, #104]	; 0x68
    7c6a:	bx	r3
    return readStop();
    7c6c:	b.w	7be8 <SharedSpiCard::readStop()>

00007c70 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>:
uint8_t SharedSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    7c70:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!syncDevice()) {
    7c74:	ldr	r3, [r0, #0]
uint8_t SharedSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    7c76:	sub	sp, #8
    7c78:	mov	r7, r1
    7c7a:	ldr	r1, [pc, #216]	; (7d54 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xe4>)
    7c7c:	str	r2, [sp, #4]
    7c7e:	mov	r6, r0
  if (!syncDevice()) {
    7c80:	ldr	r2, [r3, #28]
    7c82:	cmp	r2, r1
    7c84:	bne.n	7d42 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xd2>
  if (m_state == WRITE_STATE) {
    7c86:	ldrb	r2, [r0, #20]
    7c88:	cmp	r2, #2
    7c8a:	beq.n	7d14 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xa4>
  if (m_state == READ_STATE) {
    7c8c:	cmp	r2, #1
    7c8e:	beq.n	7d4a <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xda>
  if (!m_spiActive) {
    7c90:	ldrb	r4, [r6, #19]
    7c92:	cmp	r4, #0
    7c94:	beq.n	7d24 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xb4>
  void spiActivate() { m_spiDriver.activate(); }
    7c96:	adds	r5, r6, #4
  if (cmd != CMD0 && cmd != CMD12 && !waitReady(SD_CMD_TIMEOUT)) {
    7c98:	cbz	r7, 7cc2 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x52>
    7c9a:	cmp	r7, #12
    7c9c:	beq.n	7cc2 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x52>
    7c9e:	ldr.w	r8, [pc, #184]	; 7d58 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xe8>
    7ca2:	ldr.w	r4, [r8]
  void set(uint16_t ms) { m_endTime = ms + millis16(); }
    7ca6:	add.w	r4, r4, #300	; 0x12c
    7caa:	uxth	r4, r4
  explicit Timeout(uint16_t ms) { set(ms); }
    7cac:	b.n	7cb8 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x48>
    7cae:	ldr.w	r3, [r8]
  bool timedOut() { return (int16_t)(m_endTime - millis16()) < 0; }
    7cb2:	subs	r3, r4, r3
    if (timeout.timedOut()) {
    7cb4:	lsls	r1, r3, #16
    7cb6:	bmi.n	7d1c <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xac>
    return m_spiDriver.receive();
    7cb8:	mov	r0, r5
    7cba:	bl	a018 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    7cbe:	cmp	r0, #255	; 0xff
    7cc0:	bne.n	7cae <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x3e>
    m_spiDriver.send(data);
    7cc2:	add.w	r8, sp, #4
    7cc6:	add	r4, sp, #8
    7cc8:	orr.w	r1, r7, #64	; 0x40
    7ccc:	mov	r0, r5
    7cce:	bl	a054 <SdSpiArduinoDriver::send(unsigned char)>
    7cd2:	ldrb.w	r1, [r4, #-1]!
    7cd6:	mov	r0, r5
    7cd8:	bl	a054 <SdSpiArduinoDriver::send(unsigned char)>
  for (int8_t i = 3; i >= 0; i--) {
    7cdc:	cmp	r4, r8
    7cde:	bne.n	7cd2 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x62>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
    7ce0:	cmp	r7, #0
    7ce2:	mov	r0, r5
    return m_spiDriver.receive();
    7ce4:	mov.w	r4, #10
    m_spiDriver.send(data);
    7ce8:	ite	eq
    7cea:	moveq	r1, #149	; 0x95
    7cec:	movne	r1, #135	; 0x87
    7cee:	bl	a054 <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
    7cf2:	mov	r0, r5
    7cf4:	bl	a018 <SdSpiArduinoDriver::receive()>
    7cf8:	mov	r0, r5
    7cfa:	bl	a018 <SdSpiArduinoDriver::receive()>
  } while (m_status & 0X80 && ++n < 10);
    7cfe:	lsls	r2, r0, #24
    7d00:	add.w	r3, r4, #4294967295
    m_status = spiReceive();
    7d04:	strb	r0, [r6, #21]
  } while (m_status & 0X80 && ++n < 10);
    7d06:	bpl.n	7d0e <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x9e>
    7d08:	ands.w	r4, r3, #255	; 0xff
    7d0c:	bne.n	7cf8 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x88>
}
    7d0e:	add	sp, #8
    7d10:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return writeStop();
    7d14:	ldr	r3, [r3, #104]	; 0x68
    7d16:	blx	r3
  if (!syncDevice()) {
    7d18:	cmp	r0, #0
    7d1a:	bne.n	7c90 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x20>
    return 0XFF;
    7d1c:	movs	r0, #255	; 0xff
}
    7d1e:	add	sp, #8
    7d20:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  void spiActivate() { m_spiDriver.activate(); }
    7d24:	adds	r5, r6, #4
    7d26:	mov	r0, r5
    7d28:	bl	9f84 <SdSpiArduinoDriver::activate()>
    m_spiActive = true;
    7d2c:	movs	r3, #1
  void spiSelect() { sdCsWrite(m_csPin, false); }
    7d2e:	mov	r1, r4
    7d30:	ldrb	r0, [r6, #17]
    7d32:	strb	r3, [r6, #19]
    7d34:	bl	a0c0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    7d38:	movs	r1, #255	; 0xff
    7d3a:	mov	r0, r5
    7d3c:	bl	a054 <SdSpiArduinoDriver::send(unsigned char)>
}
    7d40:	b.n	7c98 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x28>
  if (!syncDevice()) {
    7d42:	blx	r2
    7d44:	cmp	r0, #0
    7d46:	beq.n	7d1c <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xac>
    7d48:	b.n	7c90 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x20>
    return readStop();
    7d4a:	bl	7be8 <SharedSpiCard::readStop()>
  if (!syncDevice()) {
    7d4e:	cmp	r0, #0
    7d50:	beq.n	7d1c <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xac>
    7d52:	b.n	7c90 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x20>
    7d54:	.word	0x00007c59
    7d58:	.word	0x20007aec

00007d5c <SharedSpiCard::begin(SdSpiConfig)>:
bool SharedSpiCard::begin(SdSpiConfig spiConfig) {
    7d5c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7d60:	sub	sp, #32
    7d62:	mov	r5, r0
    7d64:	mov	sl, r2
  /** Save high speed SPISettings after SD initialization.
   *
   * \param[in] maxSck Maximum SCK frequency.
   */
  void setSckSpeed(uint32_t maxSck) {
    m_spiSettings = SPISettings(maxSck, MSBFIRST, SPI_MODE0);
    7d66:	ldr	r6, [pc, #480]	; (7f48 <SharedSpiCard::begin(SdSpiConfig)+0x1ec>)
    7d68:	add	r4, sp, #4
  void spiBegin(SdSpiConfig spiConfig) { m_spiDriver.begin(spiConfig); }
    7d6a:	adds	r7, r5, #4
    7d6c:	stmia.w	r4, {r1, r2, r3}
    m_beginCalled = false;
    7d70:	movs	r3, #0
    7d72:	ldrb.w	r0, [sp, #4]
    7d76:	strb	r3, [r5, #16]
  m_errorCode = SD_CARD_ERROR_NONE;
    7d78:	strh	r3, [r5, #18]
    m_state = IDLE_STATE;
    7d7a:	strh	r3, [r5, #20]
    m_type = 0;
    7d7c:	strb	r3, [r5, #22]
  m_csPin = spiConfig.csPin;
    7d7e:	strb	r0, [r5, #17]
  sdCsInit(m_csPin);
    7d80:	bl	a0b8 <sdCsInit(unsigned char)>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    7d84:	movs	r1, #1
    7d86:	ldrb	r0, [r5, #17]
    7d88:	bl	a0c0 <sdCsWrite(unsigned char, bool)>
    7d8c:	movs	r2, #7
    7d8e:	add	r3, sp, #20
    7d90:	strd	r6, r2, [r5, #8]
  spiBegin(spiConfig);
    7d94:	ldmia.w	r4, {r0, r1, r2}
    7d98:	stmia.w	r3, {r0, r1, r2}
  void spiBegin(SdSpiConfig spiConfig) { m_spiDriver.begin(spiConfig); }
    7d9c:	mov	r0, r7
  m_beginCalled = true;
    7d9e:	movs	r4, #1
    7da0:	ldmia	r3, {r1, r2, r3}
    7da2:	bl	9f98 <SdSpiArduinoDriver::begin(SdSpiConfig)>
  if (!m_spiActive) {
    7da6:	ldrb	r6, [r5, #19]
  m_beginCalled = true;
    7da8:	strb	r4, [r5, #16]
  if (!m_spiActive) {
    7daa:	cmp	r6, #0
    7dac:	beq.w	7eca <SharedSpiCard::begin(SdSpiConfig)+0x16e>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    7db0:	movs	r4, #10
    7db2:	movs	r1, #1
    7db4:	ldrb	r0, [r5, #17]
    7db6:	bl	a0c0 <sdCsWrite(unsigned char, bool)>
    return m_spiDriver.receive();
    7dba:	mov	r0, r7
    7dbc:	bl	a018 <SdSpiArduinoDriver::receive()>
  for (uint8_t i = 0; i < 10; i++) {
    7dc0:	subs	r1, r4, #1
    7dc2:	ands.w	r4, r1, #255	; 0xff
    7dc6:	bne.n	7dba <SharedSpiCard::begin(SdSpiConfig)+0x5e>
    7dc8:	ldr.w	r9, [pc, #388]	; 7f50 <SharedSpiCard::begin(SdSpiConfig)+0x1f4>
  void spiSelect() { sdCsWrite(m_csPin, false); }
    7dcc:	mov	r1, r4
    7dce:	ldrb	r0, [r5, #17]
    7dd0:	bl	a0c0 <sdCsWrite(unsigned char, bool)>
    7dd4:	ldr.w	r3, [r9]
  void set(uint16_t ms) { m_endTime = ms + millis16(); }
    7dd8:	add.w	r8, r3, #2000	; 0x7d0
    7ddc:	uxth.w	r8, r8
    7de0:	b.n	7dee <SharedSpiCard::begin(SdSpiConfig)+0x92>
    7de2:	ldr.w	r3, [r9]
  bool timedOut() { return (int16_t)(m_endTime - millis16()) < 0; }
    7de6:	sub.w	r3, r8, r3
    if (timeout.timedOut()) {
    7dea:	lsls	r0, r3, #16
    7dec:	bmi.n	7e5a <SharedSpiCard::begin(SdSpiConfig)+0xfe>
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
    7dee:	movs	r2, #0
    7df0:	mov	r0, r5
    7df2:	mov	r1, r2
    7df4:	bl	7c70 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    7df8:	cmp	r0, #1
    7dfa:	mov	r6, r0
    7dfc:	bne.n	7de2 <SharedSpiCard::begin(SdSpiConfig)+0x86>
    if (cardCommand(CMD8, 0x1AA) & R1_ILLEGAL_COMMAND) {
    7dfe:	movs	r1, #8
    7e00:	mov.w	r2, #426	; 0x1aa
    7e04:	mov	r0, r5
    7e06:	bl	7c70 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    7e0a:	lsls	r1, r0, #29
    7e0c:	bmi.n	7e6c <SharedSpiCard::begin(SdSpiConfig)+0x110>
    7e0e:	movs	r4, #4
    return m_spiDriver.receive();
    7e10:	mov	r0, r7
    7e12:	bl	a018 <SdSpiArduinoDriver::receive()>
    for (uint8_t i = 0; i < 4; i++) {
    7e16:	subs	r3, r4, #1
      m_status = spiReceive();
    7e18:	strb	r0, [r5, #21]
    for (uint8_t i = 0; i < 4; i++) {
    7e1a:	ands.w	r4, r3, #255	; 0xff
    7e1e:	bne.n	7e10 <SharedSpiCard::begin(SdSpiConfig)+0xb4>
    if (m_status == 0XAA) {
    7e20:	cmp	r0, #170	; 0xaa
    7e22:	beq.n	7e6a <SharedSpiCard::begin(SdSpiConfig)+0x10e>
    7e24:	ldr.w	r3, [r9]
  bool timedOut() { return (int16_t)(m_endTime - millis16()) < 0; }
    7e28:	sub.w	r3, r8, r3
    if (timeout.timedOut()) {
    7e2c:	lsls	r2, r3, #16
    7e2e:	bpl.n	7dfe <SharedSpiCard::begin(SdSpiConfig)+0xa2>
    7e30:	movs	r3, #6
  if (m_spiActive) {
    7e32:	ldrb	r0, [r5, #19]
    m_errorCode = code;
    7e34:	strb	r3, [r5, #18]
    7e36:	cbz	r0, 7e64 <SharedSpiCard::begin(SdSpiConfig)+0x108>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    7e38:	ldrb	r0, [r5, #17]
    7e3a:	movs	r1, #1
    7e3c:	bl	a0c0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    7e40:	movs	r1, #255	; 0xff
    7e42:	mov	r0, r7
    7e44:	bl	a054 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    7e48:	mov	r0, r7
    7e4a:	bl	9fc0 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    7e4e:	movs	r3, #0
  return false;
    7e50:	mov	r0, r3
    m_spiActive = false;
    7e52:	strb	r3, [r5, #19]
}
    7e54:	add	sp, #32
    7e56:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7e5a:	movs	r3, #1
  if (m_spiActive) {
    7e5c:	ldrb	r0, [r5, #19]
    m_errorCode = code;
    7e5e:	strb	r3, [r5, #18]
    7e60:	cmp	r0, #0
    7e62:	bne.n	7e38 <SharedSpiCard::begin(SdSpiConfig)+0xdc>
}
    7e64:	add	sp, #32
    7e66:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7e6a:	movs	r6, #2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
    7e6c:	ldr	r3, [r5, #0]
    7e6e:	ldr	r4, [pc, #220]	; (7f4c <SharedSpiCard::begin(SdSpiConfig)+0x1f0>)
  void type(uint8_t value) { m_type = value; }
    7e70:	strb	r6, [r5, #22]
    7e72:	ldr	r3, [r3, #92]	; 0x5c
    7e74:	cmp	r3, r4
    7e76:	bne.n	7ee8 <SharedSpiCard::begin(SdSpiConfig)+0x18c>
    7e78:	sub.w	r6, r6, #2
    7e7c:	clz	r6, r6
    7e80:	lsrs	r6, r6, #5
    7e82:	lsls	r6, r6, #30
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
    7e84:	b.n	7e92 <SharedSpiCard::begin(SdSpiConfig)+0x136>
    7e86:	ldr.w	r3, [r9]
  bool timedOut() { return (int16_t)(m_endTime - millis16()) < 0; }
    7e8a:	sub.w	r3, r8, r3
    if (timeout.timedOut()) {
    7e8e:	lsls	r3, r3, #16
    7e90:	bmi.n	7ee4 <SharedSpiCard::begin(SdSpiConfig)+0x188>
    cardCommand(CMD55, 0);
    7e92:	movs	r1, #55	; 0x37
    7e94:	movs	r2, #0
    7e96:	mov	r0, r5
    7e98:	bl	7c70 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    return cardCommand(cmd, arg);
    7e9c:	mov	r2, r6
    7e9e:	movs	r1, #41	; 0x29
    7ea0:	mov	r0, r5
    7ea2:	bl	7c70 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
    7ea6:	cmp	r0, #0
    7ea8:	bne.n	7e86 <SharedSpiCard::begin(SdSpiConfig)+0x12a>
  if (type() == SD_CARD_TYPE_SD2) {
    7eaa:	ldr	r3, [r5, #0]
    7eac:	ldr	r3, [r3, #92]	; 0x5c
    7eae:	cmp	r3, r4
    7eb0:	bne.n	7f3e <SharedSpiCard::begin(SdSpiConfig)+0x1e2>
  uint8_t type() const { return m_type; }
    7eb2:	ldrb	r0, [r5, #22]
    7eb4:	cmp	r0, #2
    7eb6:	beq.n	7f0c <SharedSpiCard::begin(SdSpiConfig)+0x1b0>
  if (m_spiActive) {
    7eb8:	ldrb	r3, [r5, #19]
    7eba:	cbnz	r3, 7ef0 <SharedSpiCard::begin(SdSpiConfig)+0x194>
    7ebc:	movs	r3, #7
  return true;
    7ebe:	movs	r0, #1
    7ec0:	strd	sl, r3, [r5, #8]
}
    7ec4:	add	sp, #32
    7ec6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  void spiActivate() { m_spiDriver.activate(); }
    7eca:	mov	r0, r7
    7ecc:	bl	9f84 <SdSpiArduinoDriver::activate()>
  void spiSelect() { sdCsWrite(m_csPin, false); }
    7ed0:	mov	r1, r6
    7ed2:	ldrb	r0, [r5, #17]
    m_spiActive = true;
    7ed4:	strb	r4, [r5, #19]
    7ed6:	bl	a0c0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    7eda:	movs	r1, #255	; 0xff
    7edc:	mov	r0, r7
    7ede:	bl	a054 <SdSpiArduinoDriver::send(unsigned char)>
}
    7ee2:	b.n	7db0 <SharedSpiCard::begin(SdSpiConfig)+0x54>
    7ee4:	movs	r3, #23
    7ee6:	b.n	7e5c <SharedSpiCard::begin(SdSpiConfig)+0x100>
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
    7ee8:	mov	r0, r5
    7eea:	blx	r3
    7eec:	mov	r6, r0
    7eee:	b.n	7e78 <SharedSpiCard::begin(SdSpiConfig)+0x11c>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    7ef0:	movs	r1, #1
    7ef2:	ldrb	r0, [r5, #17]
    7ef4:	bl	a0c0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    7ef8:	movs	r1, #255	; 0xff
    7efa:	mov	r0, r7
    7efc:	bl	a054 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    7f00:	mov	r0, r7
    7f02:	bl	9fc0 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    7f06:	movs	r3, #0
    7f08:	strb	r3, [r5, #19]
}
    7f0a:	b.n	7ebc <SharedSpiCard::begin(SdSpiConfig)+0x160>
    if (cardCommand(CMD58, 0)) {
    7f0c:	movs	r2, #0
    7f0e:	movs	r1, #58	; 0x3a
    7f10:	mov	r0, r5
    7f12:	bl	7c70 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    7f16:	cbnz	r0, 7f44 <SharedSpiCard::begin(SdSpiConfig)+0x1e8>
    return m_spiDriver.receive();
    7f18:	mov	r0, r7
    7f1a:	bl	a018 <SdSpiArduinoDriver::receive()>
    if ((spiReceive() & 0XC0) == 0XC0) {
    7f1e:	and.w	r0, r0, #192	; 0xc0
    7f22:	cmp	r0, #192	; 0xc0
    7f24:	bne.n	7f2a <SharedSpiCard::begin(SdSpiConfig)+0x1ce>
  void type(uint8_t value) { m_type = value; }
    7f26:	movs	r3, #3
    7f28:	strb	r3, [r5, #22]
    return m_spiDriver.receive();
    7f2a:	mov	r0, r7
    7f2c:	bl	a018 <SdSpiArduinoDriver::receive()>
    7f30:	mov	r0, r7
    7f32:	bl	a018 <SdSpiArduinoDriver::receive()>
    7f36:	mov	r0, r7
    7f38:	bl	a018 <SdSpiArduinoDriver::receive()>
    for (uint8_t i = 0; i < 3; i++) {
    7f3c:	b.n	7eb8 <SharedSpiCard::begin(SdSpiConfig)+0x15c>
  if (type() == SD_CARD_TYPE_SD2) {
    7f3e:	mov	r0, r5
    7f40:	blx	r3
    7f42:	b.n	7eb4 <SharedSpiCard::begin(SdSpiConfig)+0x158>
    7f44:	movs	r3, #18
    7f46:	b.n	7e5c <SharedSpiCard::begin(SdSpiConfig)+0x100>
    7f48:	.word	0x00061a80
    7f4c:	.word	0x00007a11
    7f50:	.word	0x20007aec

00007f54 <SharedSpiCard::cardCMD6(unsigned long, unsigned char*)>:
bool SharedSpiCard::cardCMD6(uint32_t arg, uint8_t* status) {
    7f54:	push	{r4, r5, r6, lr}
    7f56:	mov	r4, r1
    7f58:	sub	sp, #8
    7f5a:	mov	r6, r2
  if (cardCommand(CMD6, arg)) {
    7f5c:	movs	r1, #6
    7f5e:	mov	r2, r4
bool SharedSpiCard::cardCMD6(uint32_t arg, uint8_t* status) {
    7f60:	mov	r4, r0
  if (cardCommand(CMD6, arg)) {
    7f62:	bl	7c70 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    7f66:	cbz	r0, 7f96 <SharedSpiCard::cardCMD6(unsigned long, unsigned char*)+0x42>
    m_errorCode = code;
    7f68:	movs	r3, #4
    7f6a:	strb	r3, [r4, #18]
  if (m_spiActive) {
    7f6c:	ldrb	r0, [r4, #19]
    7f6e:	cbnz	r0, 7f74 <SharedSpiCard::cardCMD6(unsigned long, unsigned char*)+0x20>
}
    7f70:	add	sp, #8
    7f72:	pop	{r4, r5, r6, pc}
    m_spiDriver.send(data);
    7f74:	adds	r5, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    7f76:	ldrb	r0, [r4, #17]
    7f78:	movs	r1, #1
    7f7a:	bl	a0c0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    7f7e:	movs	r1, #255	; 0xff
    7f80:	mov	r0, r5
    7f82:	bl	a054 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    7f86:	mov	r0, r5
    7f88:	bl	9fc0 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    7f8c:	movs	r3, #0
  return false;
    7f8e:	mov	r0, r3
    m_spiActive = false;
    7f90:	strb	r3, [r4, #19]
}
    7f92:	add	sp, #8
    7f94:	pop	{r4, r5, r6, pc}
  if (!readData(status, 64)) {
    7f96:	mov	r5, r0
    7f98:	movs	r2, #64	; 0x40
    7f9a:	mov	r1, r6
    7f9c:	mov	r0, r4
    7f9e:	bl	7b5c <SharedSpiCard::readData(unsigned char*, unsigned int)>
    7fa2:	cmp	r0, #0
    7fa4:	beq.n	7f6c <SharedSpiCard::cardCMD6(unsigned long, unsigned char*)+0x18>
  if (m_spiActive) {
    7fa6:	ldrb	r6, [r4, #19]
    7fa8:	cmp	r6, #0
    7faa:	beq.n	7f70 <SharedSpiCard::cardCMD6(unsigned long, unsigned char*)+0x1c>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    7fac:	ldrb	r0, [r4, #17]
    7fae:	movs	r1, #1
    7fb0:	bl	a0c0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    7fb4:	adds	r0, r4, #4
    7fb6:	movs	r1, #255	; 0xff
    7fb8:	str	r0, [sp, #4]
    7fba:	bl	a054 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    7fbe:	ldr	r0, [sp, #4]
    7fc0:	bl	9fc0 <SdSpiArduinoDriver::deactivate()>
}
    7fc4:	mov	r0, r6
    m_spiActive = false;
    7fc6:	strb	r5, [r4, #19]
}
    7fc8:	add	sp, #8
    7fca:	pop	{r4, r5, r6, pc}

00007fcc <SharedSpiCard::readOCR(unsigned long*)>:
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    7fcc:	push	{r3, r4, r5, r6, r7, lr}
  if (cardCommand(CMD58, 0)) {
    7fce:	movs	r2, #0
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    7fd0:	mov	r5, r1
  if (cardCommand(CMD58, 0)) {
    7fd2:	movs	r1, #58	; 0x3a
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    7fd4:	mov	r6, r0
  if (cardCommand(CMD58, 0)) {
    7fd6:	bl	7c70 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    7fda:	cbnz	r0, 8016 <SharedSpiCard::readOCR(unsigned long*)+0x4a>
    m_spiDriver.send(data);
    7fdc:	adds	r7, r6, #4
    7fde:	adds	r4, r5, #4
    return m_spiDriver.receive();
    7fe0:	mov	r0, r7
    7fe2:	bl	a018 <SdSpiArduinoDriver::receive()>
    p[3 - i] = spiReceive();
    7fe6:	strb.w	r0, [r4, #-1]!
  for (uint8_t i = 0; i < 4; i++) {
    7fea:	cmp	r5, r4
    7fec:	bne.n	7fe0 <SharedSpiCard::readOCR(unsigned long*)+0x14>
  if (m_spiActive) {
    7fee:	ldrb	r4, [r6, #19]
    7ff0:	cbnz	r4, 7ff8 <SharedSpiCard::readOCR(unsigned long*)+0x2c>
    7ff2:	movs	r4, #1
}
    7ff4:	mov	r0, r4
    7ff6:	pop	{r3, r4, r5, r6, r7, pc}
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    7ff8:	ldrb	r0, [r6, #17]
    7ffa:	movs	r1, #1
    7ffc:	bl	a0c0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    8000:	movs	r1, #255	; 0xff
    8002:	mov	r0, r7
    8004:	bl	a054 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    8008:	mov	r0, r7
    800a:	bl	9fc0 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    800e:	movs	r3, #0
}
    8010:	mov	r0, r4
    m_spiActive = false;
    8012:	strb	r3, [r6, #19]
}
    8014:	pop	{r3, r4, r5, r6, r7, pc}
    m_errorCode = code;
    8016:	movs	r3, #18
  if (m_spiActive) {
    8018:	ldrb	r4, [r6, #19]
    801a:	strb	r3, [r6, #18]
    801c:	cmp	r4, #0
    801e:	beq.n	7ff4 <SharedSpiCard::readOCR(unsigned long*)+0x28>
    m_spiDriver.send(data);
    8020:	adds	r4, r6, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    8022:	ldrb	r0, [r6, #17]
    8024:	movs	r1, #1
    8026:	bl	a0c0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    802a:	movs	r1, #255	; 0xff
    802c:	mov	r0, r4
    802e:	bl	a054 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    8032:	mov	r0, r4
    8034:	bl	9fc0 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    8038:	movs	r3, #0
  return false;
    803a:	mov	r4, r3
    m_spiActive = false;
    803c:	strb	r3, [r6, #19]
}
    803e:	mov	r0, r4
    8040:	pop	{r3, r4, r5, r6, r7, pc}
    8042:	nop

00008044 <SharedSpiCard::readRegister(unsigned char, void*)>:
bool SharedSpiCard::readRegister(uint8_t cmd, void* buf) {
    8044:	push	{r4, r5, r6, lr}
    8046:	mov	r6, r2
    8048:	sub	sp, #8
  if (cardCommand(cmd, 0)) {
    804a:	movs	r2, #0
bool SharedSpiCard::readRegister(uint8_t cmd, void* buf) {
    804c:	mov	r4, r0
  if (cardCommand(cmd, 0)) {
    804e:	bl	7c70 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    8052:	cbz	r0, 8082 <SharedSpiCard::readRegister(unsigned char, void*)+0x3e>
    m_errorCode = code;
    8054:	movs	r3, #28
    8056:	strb	r3, [r4, #18]
  if (m_spiActive) {
    8058:	ldrb	r0, [r4, #19]
    805a:	cbnz	r0, 8060 <SharedSpiCard::readRegister(unsigned char, void*)+0x1c>
}
    805c:	add	sp, #8
    805e:	pop	{r4, r5, r6, pc}
    m_spiDriver.send(data);
    8060:	adds	r5, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    8062:	ldrb	r0, [r4, #17]
    8064:	movs	r1, #1
    8066:	bl	a0c0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    806a:	movs	r1, #255	; 0xff
    806c:	mov	r0, r5
    806e:	bl	a054 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    8072:	mov	r0, r5
    8074:	bl	9fc0 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    8078:	movs	r3, #0
  return false;
    807a:	mov	r0, r3
    m_spiActive = false;
    807c:	strb	r3, [r4, #19]
}
    807e:	add	sp, #8
    8080:	pop	{r4, r5, r6, pc}
  if (!readData(dst, 16)) {
    8082:	mov	r5, r0
    8084:	movs	r2, #16
    8086:	mov	r1, r6
    8088:	mov	r0, r4
    808a:	bl	7b5c <SharedSpiCard::readData(unsigned char*, unsigned int)>
    808e:	cmp	r0, #0
    8090:	beq.n	8058 <SharedSpiCard::readRegister(unsigned char, void*)+0x14>
  if (m_spiActive) {
    8092:	ldrb	r6, [r4, #19]
    8094:	cmp	r6, #0
    8096:	beq.n	805c <SharedSpiCard::readRegister(unsigned char, void*)+0x18>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    8098:	ldrb	r0, [r4, #17]
    809a:	movs	r1, #1
    809c:	bl	a0c0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    80a0:	adds	r0, r4, #4
    80a2:	movs	r1, #255	; 0xff
    80a4:	str	r0, [sp, #4]
    80a6:	bl	a054 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    80aa:	ldr	r0, [sp, #4]
    80ac:	bl	9fc0 <SdSpiArduinoDriver::deactivate()>
}
    80b0:	mov	r0, r6
    m_spiActive = false;
    80b2:	strb	r5, [r4, #19]
}
    80b4:	add	sp, #8
    80b6:	pop	{r4, r5, r6, pc}

000080b8 <SharedSpiCard::sectorCount()>:
  return readCSD(&csd) ? csd.capacity() : 0;
    80b8:	ldr	r3, [r0, #0]
    80ba:	ldr	r2, [pc, #144]	; (814c <SharedSpiCard::sectorCount()+0x94>)
    80bc:	ldr	r3, [r3, #72]	; 0x48
    80be:	cmp	r3, r2
uint32_t SharedSpiCard::sectorCount() {
    80c0:	push	{lr}
    80c2:	sub	sp, #20
    80c4:	bne.n	80e4 <SharedSpiCard::sectorCount()+0x2c>
  bool readCSD(csd_t* csd) { return readRegister(CMD9, csd); }
    80c6:	mov	r2, sp
    80c8:	movs	r1, #9
    80ca:	bl	8044 <SharedSpiCard::readRegister(unsigned char, void*)>
  return readCSD(&csd) ? csd.capacity() : 0;
    80ce:	cbz	r0, 80de <SharedSpiCard::sectorCount()+0x26>
  uint8_t csd[16];
  // Extract big endian fields.
  /** \return Capacity in sectors */
  uint32_t capacity() const {
    uint32_t c_size;
    uint8_t ver = csd[0] >> 6;
    80d0:	ldrb.w	r3, [sp]
    if (ver == 0) {
    80d4:	lsrs	r3, r3, #6
    80d6:	beq.n	80ea <SharedSpiCard::sectorCount()+0x32>
      c_size = (uint32_t)(csd[6] & 3) << 10;
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
      uint8_t c_size_mult = (csd[9] & 3) << 1 | csd[10] >> 7;
      uint8_t read_bl_len = csd[5] & 15;
      return (c_size + 1) << (c_size_mult + read_bl_len + 2 - 9);
    } else if (ver == 1) {
    80d8:	cmp	r3, #1
    80da:	beq.n	812c <SharedSpiCard::sectorCount()+0x74>
    80dc:	movs	r0, #0
}
    80de:	add	sp, #20
    80e0:	ldr.w	pc, [sp], #4
  return readCSD(&csd) ? csd.capacity() : 0;
    80e4:	mov	r1, sp
    80e6:	blx	r3
    80e8:	b.n	80ce <SharedSpiCard::sectorCount()+0x16>
      uint8_t c_size_mult = (csd[9] & 3) << 1 | csd[10] >> 7;
    80ea:	ldrb.w	r3, [sp, #9]
      c_size = (uint32_t)(csd[6] & 3) << 10;
    80ee:	ldrb.w	r2, [sp, #6]
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
    80f2:	ldrb.w	r0, [sp, #8]
      uint8_t c_size_mult = (csd[9] & 3) << 1 | csd[10] >> 7;
    80f6:	lsls	r3, r3, #1
    80f8:	ldrb.w	r1, [sp, #10]
      c_size = (uint32_t)(csd[6] & 3) << 10;
    80fc:	lsls	r2, r2, #10
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
    80fe:	ldrb.w	ip, [sp, #7]
    8102:	lsrs	r0, r0, #6
      uint8_t c_size_mult = (csd[9] & 3) << 1 | csd[10] >> 7;
    8104:	and.w	r3, r3, #6
      c_size = (uint32_t)(csd[6] & 3) << 10;
    8108:	and.w	r2, r2, #3072	; 0xc00
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
    810c:	orr.w	r0, r0, ip, lsl #2
      return (c_size + 1) << (c_size_mult + read_bl_len + 2 - 9);
    8110:	orr.w	r3, r3, r1, lsr #7
      uint8_t read_bl_len = csd[5] & 15;
    8114:	ldrb.w	r1, [sp, #5]
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
    8118:	orrs	r0, r2
      return (c_size + 1) << (c_size_mult + read_bl_len + 2 - 9);
    811a:	and.w	r2, r1, #15
    811e:	adds	r0, #1
    8120:	add	r3, r2
    8122:	subs	r3, #7
    8124:	lsls	r0, r3
}
    8126:	add	sp, #20
    8128:	ldr.w	pc, [sp], #4
      c_size = (uint32_t)(csd[7] & 63) << 16;
    812c:	ldrb.w	r3, [sp, #7]
      c_size |= (uint32_t)csd[8] << 8;
      c_size |= csd[9];
    8130:	ldrh.w	r0, [sp, #8]
      c_size = (uint32_t)(csd[7] & 63) << 16;
    8134:	lsls	r3, r3, #16
      c_size |= csd[9];
    8136:	rev16	r0, r0
      c_size = (uint32_t)(csd[7] & 63) << 16;
    8138:	and.w	r3, r3, #4128768	; 0x3f0000
      c_size |= csd[9];
    813c:	uxth	r0, r0
    813e:	orrs	r0, r3
      return (c_size + 1) << 10;
    8140:	adds	r0, #1
    8142:	lsls	r0, r0, #10
    8144:	add	sp, #20
    8146:	ldr.w	pc, [sp], #4
    814a:	nop
    814c:	.word	0x0000851d

00008150 <SharedSpiCard::readStart(unsigned long)>:
  if (type() != SD_CARD_TYPE_SDHC) {
    8150:	ldr	r3, [r0, #0]
bool SharedSpiCard::readStart(uint32_t sector) {
    8152:	mov	r2, r1
    8154:	push	{r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    8156:	ldr	r3, [r3, #92]	; 0x5c
bool SharedSpiCard::readStart(uint32_t sector) {
    8158:	sub	sp, #12
    815a:	ldr	r5, [pc, #88]	; (81b4 <SharedSpiCard::readStart(unsigned long)+0x64>)
    815c:	mov	r4, r0
  if (type() != SD_CARD_TYPE_SDHC) {
    815e:	cmp	r3, r5
    8160:	bne.n	81ac <SharedSpiCard::readStart(unsigned long)+0x5c>
  uint8_t type() const { return m_type; }
    8162:	ldrb	r0, [r0, #22]
    8164:	cmp	r0, #3
  if (cardCommand(CMD18, sector)) {
    8166:	mov.w	r1, #18
    816a:	mov	r0, r4
    sector <<= 9;
    816c:	it	ne
    816e:	lslne	r2, r2, #9
  if (cardCommand(CMD18, sector)) {
    8170:	bl	7c70 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    8174:	cbnz	r0, 8180 <SharedSpiCard::readStart(unsigned long)+0x30>
  m_state = READ_STATE;
    8176:	movs	r3, #1
  return true;
    8178:	mov	r0, r3
  m_state = READ_STATE;
    817a:	strb	r3, [r4, #20]
}
    817c:	add	sp, #12
    817e:	pop	{r4, r5, pc}
    m_errorCode = code;
    8180:	movs	r3, #12
  if (m_spiActive) {
    8182:	ldrb	r0, [r4, #19]
    8184:	strb	r3, [r4, #18]
    8186:	cmp	r0, #0
    8188:	beq.n	817c <SharedSpiCard::readStart(unsigned long)+0x2c>
    m_spiDriver.send(data);
    818a:	adds	r5, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    818c:	ldrb	r0, [r4, #17]
    818e:	movs	r1, #1
    8190:	bl	a0c0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    8194:	movs	r1, #255	; 0xff
    8196:	mov	r0, r5
    8198:	bl	a054 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    819c:	mov	r0, r5
    819e:	bl	9fc0 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    81a2:	movs	r3, #0
}
    81a4:	mov	r0, r3
    m_spiActive = false;
    81a6:	strb	r3, [r4, #19]
}
    81a8:	add	sp, #12
    81aa:	pop	{r4, r5, pc}
    81ac:	str	r1, [sp, #4]
  if (type() != SD_CARD_TYPE_SDHC) {
    81ae:	blx	r3
    81b0:	ldr	r2, [sp, #4]
    81b2:	b.n	8164 <SharedSpiCard::readStart(unsigned long)+0x14>
    81b4:	.word	0x00007a11

000081b8 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)>:
  m_dedicatedSpi = spiOptionDedicated(spiConfig.options);
  return true;
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::readSector(uint32_t sector, uint8_t* dst) {
  return readSectors(sector, dst, 1);
    81b8:	ldr	r3, [r0, #0]
bool DedicatedSpiCard::readSector(uint32_t sector, uint8_t* dst) {
    81ba:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return readSectors(sector, dst, 1);
    81be:	ldr	r7, [r3, #20]
    81c0:	ldr	r3, [pc, #88]	; (821c <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x64>)
    81c2:	cmp	r7, r3
    81c4:	bne.n	8206 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x4e>
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
  if (sdState() != READ_STATE || sector != m_curSector) {
    81c6:	ldrb	r3, [r0, #20]
    81c8:	mov	r4, r0
    81ca:	mov	r5, r1
    81cc:	mov	r6, r2
    81ce:	cmp	r3, #1
    81d0:	bne.n	81d8 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x20>
    81d2:	ldr	r3, [r0, #24]
    81d4:	cmp	r1, r3
    81d6:	beq.n	81e4 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x2c>
    if (!readStart(sector)) {
    81d8:	mov	r1, r5
    81da:	mov	r0, r4
    81dc:	bl	8150 <SharedSpiCard::readStart(unsigned long)>
    81e0:	cbz	r0, 8200 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x48>
      goto fail;
    }
    m_curSector = sector;
    81e2:	str	r5, [r4, #24]
bool SharedSpiCard::readData(uint8_t* dst) { return readData(dst, 512); }
    81e4:	mov.w	r2, #512	; 0x200
    81e8:	mov	r1, r6
    81ea:	mov	r0, r4
    81ec:	bl	7b5c <SharedSpiCard::readData(unsigned char*, unsigned int)>
  }
  for (size_t i = 0; i < ns; i++, dst += 512) {
    if (!readData(dst)) {
    81f0:	cbz	r0, 8200 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x48>
      goto fail;
    }
  }
  m_curSector += ns;
    81f2:	ldr	r3, [r4, #24]
  return m_dedicatedSpi ? true : readStop();
    81f4:	ldrb	r0, [r4, #28]
  m_curSector += ns;
    81f6:	adds	r3, #1
    81f8:	str	r3, [r4, #24]
  return m_dedicatedSpi ? true : readStop();
    81fa:	cbz	r0, 8210 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x58>
}
    81fc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

fail:
  return false;
    8200:	movs	r0, #0
}
    8202:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return readSectors(sector, dst, 1);
    8206:	mov	ip, r7
    8208:	movs	r3, #1
}
    820a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return readSectors(sector, dst, 1);
    820e:	bx	ip
  return m_dedicatedSpi ? true : readStop();
    8210:	mov	r0, r4
}
    8212:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return m_dedicatedSpi ? true : readStop();
    8216:	b.w	7be8 <SharedSpiCard::readStop()>
    821a:	nop
    821c:	.word	0x00008595

00008220 <SharedSpiCard::writeStart(unsigned long)>:
  if (type() != SD_CARD_TYPE_SDHC) {
    8220:	ldr	r3, [r0, #0]
bool SharedSpiCard::writeStart(uint32_t sector) {
    8222:	mov	r2, r1
    8224:	push	{r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    8226:	ldr	r3, [r3, #92]	; 0x5c
bool SharedSpiCard::writeStart(uint32_t sector) {
    8228:	sub	sp, #12
    822a:	ldr	r5, [pc, #88]	; (8284 <SharedSpiCard::writeStart(unsigned long)+0x64>)
    822c:	mov	r4, r0
  if (type() != SD_CARD_TYPE_SDHC) {
    822e:	cmp	r3, r5
    8230:	bne.n	827c <SharedSpiCard::writeStart(unsigned long)+0x5c>
  uint8_t type() const { return m_type; }
    8232:	ldrb	r0, [r0, #22]
    8234:	cmp	r0, #3
  if (cardCommand(CMD25, sector)) {
    8236:	mov.w	r1, #25
    823a:	mov	r0, r4
    sector <<= 9;
    823c:	it	ne
    823e:	lslne	r2, r2, #9
  if (cardCommand(CMD25, sector)) {
    8240:	bl	7c70 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    8244:	cbnz	r0, 8250 <SharedSpiCard::writeStart(unsigned long)+0x30>
  m_state = WRITE_STATE;
    8246:	movs	r3, #2
  return true;
    8248:	movs	r0, #1
  m_state = WRITE_STATE;
    824a:	strb	r3, [r4, #20]
}
    824c:	add	sp, #12
    824e:	pop	{r4, r5, pc}
    m_errorCode = code;
    8250:	movs	r3, #14
  if (m_spiActive) {
    8252:	ldrb	r0, [r4, #19]
    8254:	strb	r3, [r4, #18]
    8256:	cmp	r0, #0
    8258:	beq.n	824c <SharedSpiCard::writeStart(unsigned long)+0x2c>
    m_spiDriver.send(data);
    825a:	adds	r5, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    825c:	ldrb	r0, [r4, #17]
    825e:	movs	r1, #1
    8260:	bl	a0c0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    8264:	movs	r1, #255	; 0xff
    8266:	mov	r0, r5
    8268:	bl	a054 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    826c:	mov	r0, r5
    826e:	bl	9fc0 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    8272:	movs	r3, #0
}
    8274:	mov	r0, r3
    m_spiActive = false;
    8276:	strb	r3, [r4, #19]
}
    8278:	add	sp, #12
    827a:	pop	{r4, r5, pc}
    827c:	str	r1, [sp, #4]
  if (type() != SD_CARD_TYPE_SDHC) {
    827e:	blx	r3
    8280:	ldr	r2, [sp, #4]
    8282:	b.n	8234 <SharedSpiCard::writeStart(unsigned long)+0x14>
    8284:	.word	0x00007a11

00008288 <SharedSpiCard::erase(unsigned long, unsigned long)>:
  if (!readCSD(&csd)) {
    8288:	ldr	r3, [r0, #0]
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    828a:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (!readCSD(&csd)) {
    828e:	ldr	r3, [r3, #72]	; 0x48
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    8290:	mov	r7, r2
    8292:	ldr	r2, [pc, #260]	; (8398 <SharedSpiCard::erase(unsigned long, unsigned long)+0x110>)
    8294:	sub	sp, #20
    8296:	mov	r4, r0
    8298:	mov	r6, r1
    829a:	cmp	r3, r2
    829c:	bne.n	832a <SharedSpiCard::erase(unsigned long, unsigned long)+0xa2>
  bool readCSD(csd_t* csd) { return readRegister(CMD9, csd); }
    829e:	mov	r2, sp
    82a0:	movs	r1, #9
    82a2:	bl	8044 <SharedSpiCard::readRegister(unsigned char, void*)>
    82a6:	mov	r5, r0
  if (!readCSD(&csd)) {
    82a8:	cbz	r5, 82d8 <SharedSpiCard::erase(unsigned long, unsigned long)+0x50>
    } else {
      return 0;
    }
  }
  /** \return true if erase granularity is single block. */
  bool eraseSingleBlock() const { return csd[10] & 0X40; }
    82aa:	ldrb.w	r3, [sp, #10]
  if (!csd.eraseSingleBlock()) {
    82ae:	lsls	r2, r3, #25
    82b0:	bpl.n	82e4 <SharedSpiCard::erase(unsigned long, unsigned long)+0x5c>
  if (m_type != SD_CARD_TYPE_SDHC) {
    82b2:	ldrb	r3, [r4, #22]
    82b4:	cmp	r3, #3
    82b6:	beq.n	82bc <SharedSpiCard::erase(unsigned long, unsigned long)+0x34>
    firstSector <<= 9;
    82b8:	lsls	r6, r6, #9
    lastSector <<= 9;
    82ba:	lsls	r7, r7, #9
  if (cardCommand(CMD32, firstSector) || cardCommand(CMD33, lastSector) ||
    82bc:	mov	r2, r6
    82be:	movs	r1, #32
    82c0:	mov	r0, r4
    82c2:	bl	7c70 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    82c6:	cbnz	r0, 82d4 <SharedSpiCard::erase(unsigned long, unsigned long)+0x4c>
    82c8:	mov	r2, r7
    82ca:	movs	r1, #33	; 0x21
    82cc:	mov	r0, r4
    82ce:	bl	7c70 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    82d2:	cbz	r0, 8332 <SharedSpiCard::erase(unsigned long, unsigned long)+0xaa>
    m_errorCode = code;
    82d4:	movs	r3, #39	; 0x27
    82d6:	strb	r3, [r4, #18]
  if (m_spiActive) {
    82d8:	ldrb	r5, [r4, #19]
    82da:	cbnz	r5, 8304 <SharedSpiCard::erase(unsigned long, unsigned long)+0x7c>
}
    82dc:	mov	r0, r5
    82de:	add	sp, #20
    82e0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  /** \return erase size in 512 byte blocks if eraseSingleBlock is false. */
  int eraseSize() const { return ((csd[10] & 0X3F) << 1 | csd[11] >> 7) + 1; }
    82e4:	lsls	r3, r3, #1
    82e6:	ldrb.w	r2, [sp, #11]
    82ea:	and.w	r3, r3, #126	; 0x7e
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    82ee:	orr.w	r3, r3, r2, lsr #7
    82f2:	adds	r2, r7, #1
    82f4:	orrs	r2, r6
    82f6:	tst	r3, r2
    82f8:	beq.n	82b2 <SharedSpiCard::erase(unsigned long, unsigned long)+0x2a>
    82fa:	movs	r3, #40	; 0x28
  if (m_spiActive) {
    82fc:	ldrb	r5, [r4, #19]
    82fe:	strb	r3, [r4, #18]
    8300:	cmp	r5, #0
    8302:	beq.n	82dc <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
    m_spiDriver.send(data);
    8304:	adds	r5, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    8306:	ldrb	r0, [r4, #17]
    8308:	movs	r1, #1
    830a:	bl	a0c0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    830e:	movs	r1, #255	; 0xff
    8310:	mov	r0, r5
    8312:	bl	a054 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    8316:	mov	r0, r5
    8318:	bl	9fc0 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    831c:	movs	r3, #0
  return false;
    831e:	mov	r5, r3
    m_spiActive = false;
    8320:	strb	r3, [r4, #19]
}
    8322:	mov	r0, r5
    8324:	add	sp, #20
    8326:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (!readCSD(&csd)) {
    832a:	mov	r1, sp
    832c:	blx	r3
    832e:	mov	r5, r0
    8330:	b.n	82a8 <SharedSpiCard::erase(unsigned long, unsigned long)+0x20>
      cardCommand(CMD38, 0)) {
    8332:	mov	r2, r0
    8334:	movs	r1, #38	; 0x26
    8336:	mov	r0, r4
    8338:	bl	7c70 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
  if (cardCommand(CMD32, firstSector) || cardCommand(CMD33, lastSector) ||
    833c:	cmp	r0, #0
    833e:	bne.n	82d4 <SharedSpiCard::erase(unsigned long, unsigned long)+0x4c>
    8340:	ldr.w	r8, [pc, #88]	; 839c <SharedSpiCard::erase(unsigned long, unsigned long)+0x114>
  void set(uint16_t ms) { m_endTime = ms + millis16(); }
    8344:	movw	r7, #10000	; 0x2710
    return m_spiDriver.receive();
    8348:	add.w	r9, r4, #4
    834c:	ldr.w	r3, [r8]
    8350:	add	r7, r3
    8352:	uxth	r7, r7
  explicit Timeout(uint16_t ms) { set(ms); }
    8354:	b.n	8360 <SharedSpiCard::erase(unsigned long, unsigned long)+0xd8>
    8356:	ldr.w	r3, [r8]
  bool timedOut() { return (int16_t)(m_endTime - millis16()) < 0; }
    835a:	subs	r3, r7, r3
    if (timeout.timedOut()) {
    835c:	lsls	r3, r3, #16
    835e:	bmi.n	8390 <SharedSpiCard::erase(unsigned long, unsigned long)+0x108>
    8360:	mov	r0, r9
    8362:	bl	a018 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    8366:	cmp	r0, #255	; 0xff
    8368:	mov	r6, r0
    836a:	bne.n	8356 <SharedSpiCard::erase(unsigned long, unsigned long)+0xce>
  if (m_spiActive) {
    836c:	ldrb	r3, [r4, #19]
    836e:	cmp	r3, #0
    8370:	beq.n	82dc <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    8372:	movs	r1, #1
    8374:	ldrb	r0, [r4, #17]
  return true;
    8376:	mov	r5, r3
    8378:	bl	a0c0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    837c:	mov	r1, r6
    837e:	mov	r0, r9
    8380:	bl	a054 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    8384:	mov	r0, r9
    8386:	bl	9fc0 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    838a:	movs	r3, #0
    838c:	strb	r3, [r4, #19]
}
    838e:	b.n	82dc <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
    m_errorCode = code;
    8390:	movs	r3, #41	; 0x29
    8392:	strb	r3, [r4, #18]
    goto fail;
    8394:	b.n	82d8 <SharedSpiCard::erase(unsigned long, unsigned long)+0x50>
    8396:	nop
    8398:	.word	0x0000851d
    839c:	.word	0x20007aec

000083a0 <SharedSpiCard::readSCR(scr_t*)>:
bool SharedSpiCard::readSCR(scr_t* scr) {
    83a0:	push	{r4, r5, r6, lr}
    83a2:	mov	r4, r0
    83a4:	sub	sp, #8
    cardCommand(CMD55, 0);
    83a6:	movs	r2, #0
    83a8:	mov	r6, r1
    83aa:	movs	r1, #55	; 0x37
    83ac:	bl	7c70 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    return cardCommand(cmd, arg);
    83b0:	movs	r2, #0
    83b2:	movs	r1, #51	; 0x33
    83b4:	mov	r0, r4
    83b6:	bl	7c70 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
  if (cardAcmd(ACMD51, 0)) {
    83ba:	cbz	r0, 83ea <SharedSpiCard::readSCR(scr_t*)+0x4a>
    m_errorCode = code;
    83bc:	movs	r3, #24
    83be:	strb	r3, [r4, #18]
  if (m_spiActive) {
    83c0:	ldrb	r0, [r4, #19]
    83c2:	cbnz	r0, 83c8 <SharedSpiCard::readSCR(scr_t*)+0x28>
}
    83c4:	add	sp, #8
    83c6:	pop	{r4, r5, r6, pc}
    m_spiDriver.send(data);
    83c8:	adds	r5, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    83ca:	ldrb	r0, [r4, #17]
    83cc:	movs	r1, #1
    83ce:	bl	a0c0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    83d2:	movs	r1, #255	; 0xff
    83d4:	mov	r0, r5
    83d6:	bl	a054 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    83da:	mov	r0, r5
    83dc:	bl	9fc0 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    83e0:	movs	r3, #0
  return false;
    83e2:	mov	r0, r3
    m_spiActive = false;
    83e4:	strb	r3, [r4, #19]
}
    83e6:	add	sp, #8
    83e8:	pop	{r4, r5, r6, pc}
  if (!readData(dst, sizeof(scr_t))) {
    83ea:	mov	r5, r0
    83ec:	movs	r2, #8
    83ee:	mov	r1, r6
    83f0:	mov	r0, r4
    83f2:	bl	7b5c <SharedSpiCard::readData(unsigned char*, unsigned int)>
    83f6:	cmp	r0, #0
    83f8:	beq.n	83c0 <SharedSpiCard::readSCR(scr_t*)+0x20>
  if (m_spiActive) {
    83fa:	ldrb	r6, [r4, #19]
    83fc:	cmp	r6, #0
    83fe:	beq.n	83c4 <SharedSpiCard::readSCR(scr_t*)+0x24>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    8400:	ldrb	r0, [r4, #17]
    8402:	movs	r1, #1
    8404:	bl	a0c0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    8408:	adds	r0, r4, #4
    840a:	movs	r1, #255	; 0xff
    840c:	str	r0, [sp, #4]
    840e:	bl	a054 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    8412:	ldr	r0, [sp, #4]
    8414:	bl	9fc0 <SdSpiArduinoDriver::deactivate()>
}
    8418:	mov	r0, r6
    m_spiActive = false;
    841a:	strb	r5, [r4, #19]
}
    841c:	add	sp, #8
    841e:	pop	{r4, r5, r6, pc}

00008420 <SharedSpiCard::readSDS(sds_t*)>:
bool SharedSpiCard::readSDS(sds_t* sds) {
    8420:	push	{r3, r4, r5, r6, r7, lr}
    8422:	mov	r4, r0
    cardCommand(CMD55, 0);
    8424:	movs	r2, #0
    8426:	mov	r5, r1
    8428:	movs	r1, #55	; 0x37
    842a:	bl	7c70 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    return cardCommand(cmd, arg);
    842e:	movs	r2, #0
    8430:	movs	r1, #13
    8432:	mov	r0, r4
    8434:	bl	7c70 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
  if (cardAcmd(ACMD13, 0) || spiReceive()) {
    8438:	cbz	r0, 8464 <SharedSpiCard::readSDS(sds_t*)+0x44>
    m_errorCode = code;
    843a:	movs	r3, #21
    843c:	strb	r3, [r4, #18]
  if (m_spiActive) {
    843e:	ldrb	r0, [r4, #19]
    8440:	cbnz	r0, 8444 <SharedSpiCard::readSDS(sds_t*)+0x24>
}
    8442:	pop	{r3, r4, r5, r6, r7, pc}
    m_spiDriver.send(data);
    8444:	adds	r5, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    8446:	ldrb	r0, [r4, #17]
    8448:	movs	r1, #1
    844a:	bl	a0c0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    844e:	movs	r1, #255	; 0xff
    8450:	mov	r0, r5
    8452:	bl	a054 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    8456:	mov	r0, r5
    8458:	bl	9fc0 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    845c:	movs	r3, #0
  return false;
    845e:	mov	r0, r3
    m_spiActive = false;
    8460:	strb	r3, [r4, #19]
}
    8462:	pop	{r3, r4, r5, r6, r7, pc}
    return m_spiDriver.receive();
    8464:	adds	r7, r4, #4
    8466:	mov	r0, r7
    8468:	bl	a018 <SdSpiArduinoDriver::receive()>
  if (cardAcmd(ACMD13, 0) || spiReceive()) {
    846c:	mov	r6, r0
    846e:	cmp	r0, #0
    8470:	bne.n	843a <SharedSpiCard::readSDS(sds_t*)+0x1a>
  if (!readData(dst, sizeof(sds_t))) {
    8472:	movs	r2, #64	; 0x40
    8474:	mov	r1, r5
    8476:	mov	r0, r4
    8478:	bl	7b5c <SharedSpiCard::readData(unsigned char*, unsigned int)>
    847c:	cmp	r0, #0
    847e:	beq.n	843e <SharedSpiCard::readSDS(sds_t*)+0x1e>
  if (m_spiActive) {
    8480:	ldrb	r5, [r4, #19]
    8482:	cmp	r5, #0
    8484:	beq.n	8442 <SharedSpiCard::readSDS(sds_t*)+0x22>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    8486:	ldrb	r0, [r4, #17]
    8488:	movs	r1, #1
    848a:	bl	a0c0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    848e:	movs	r1, #255	; 0xff
    8490:	mov	r0, r7
    8492:	bl	a054 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    8496:	mov	r0, r7
    8498:	bl	9fc0 <SdSpiArduinoDriver::deactivate()>
  return true;
    849c:	mov	r0, r5
    m_spiActive = false;
    849e:	strb	r6, [r4, #19]
}
    84a0:	pop	{r3, r4, r5, r6, r7, pc}
    84a2:	nop

000084a4 <SharedSpiCard::readCID(cid_t*)>:
  bool readCID(cid_t* cid) { return readRegister(CMD10, cid); }
    84a4:	push	{r4, r5, r6, lr}
  if (cardCommand(cmd, 0)) {
    84a6:	movs	r2, #0
    84a8:	sub	sp, #8
    84aa:	mov	r6, r1
    84ac:	movs	r1, #10
    84ae:	mov	r4, r0
    84b0:	bl	7c70 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    84b4:	cbz	r0, 84e4 <SharedSpiCard::readCID(cid_t*)+0x40>
    m_errorCode = code;
    84b6:	movs	r3, #28
    84b8:	strb	r3, [r4, #18]
  if (m_spiActive) {
    84ba:	ldrb	r0, [r4, #19]
    84bc:	cbnz	r0, 84c2 <SharedSpiCard::readCID(cid_t*)+0x1e>
  bool readCID(cid_t* cid) { return readRegister(CMD10, cid); }
    84be:	add	sp, #8
    84c0:	pop	{r4, r5, r6, pc}
    m_spiDriver.send(data);
    84c2:	adds	r5, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    84c4:	ldrb	r0, [r4, #17]
    84c6:	movs	r1, #1
    84c8:	bl	a0c0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    84cc:	movs	r1, #255	; 0xff
    84ce:	mov	r0, r5
    84d0:	bl	a054 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    84d4:	mov	r0, r5
    84d6:	bl	9fc0 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    84da:	movs	r3, #0
  return false;
    84dc:	mov	r0, r3
    m_spiActive = false;
    84de:	strb	r3, [r4, #19]
  bool readCID(cid_t* cid) { return readRegister(CMD10, cid); }
    84e0:	add	sp, #8
    84e2:	pop	{r4, r5, r6, pc}
  if (!readData(dst, 16)) {
    84e4:	mov	r5, r0
    84e6:	movs	r2, #16
    84e8:	mov	r1, r6
    84ea:	mov	r0, r4
    84ec:	bl	7b5c <SharedSpiCard::readData(unsigned char*, unsigned int)>
    84f0:	cmp	r0, #0
    84f2:	beq.n	84ba <SharedSpiCard::readCID(cid_t*)+0x16>
  if (m_spiActive) {
    84f4:	ldrb	r6, [r4, #19]
    84f6:	cmp	r6, #0
    84f8:	beq.n	84be <SharedSpiCard::readCID(cid_t*)+0x1a>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    84fa:	ldrb	r0, [r4, #17]
    84fc:	movs	r1, #1
    84fe:	bl	a0c0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    8502:	adds	r0, r4, #4
    8504:	movs	r1, #255	; 0xff
    8506:	str	r0, [sp, #4]
    8508:	bl	a054 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    850c:	ldr	r0, [sp, #4]
    850e:	bl	9fc0 <SdSpiArduinoDriver::deactivate()>
}
    8512:	mov	r0, r6
    m_spiActive = false;
    8514:	strb	r5, [r4, #19]
  bool readCID(cid_t* cid) { return readRegister(CMD10, cid); }
    8516:	add	sp, #8
    8518:	pop	{r4, r5, r6, pc}
    851a:	nop

0000851c <SharedSpiCard::readCSD(csd_t*)>:
  bool readCSD(csd_t* csd) { return readRegister(CMD9, csd); }
    851c:	push	{r4, r5, r6, lr}
  if (cardCommand(cmd, 0)) {
    851e:	movs	r2, #0
    8520:	sub	sp, #8
    8522:	mov	r6, r1
    8524:	movs	r1, #9
    8526:	mov	r4, r0
    8528:	bl	7c70 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    852c:	cbz	r0, 855c <SharedSpiCard::readCSD(csd_t*)+0x40>
    m_errorCode = code;
    852e:	movs	r3, #28
    8530:	strb	r3, [r4, #18]
  if (m_spiActive) {
    8532:	ldrb	r0, [r4, #19]
    8534:	cbnz	r0, 853a <SharedSpiCard::readCSD(csd_t*)+0x1e>
  bool readCSD(csd_t* csd) { return readRegister(CMD9, csd); }
    8536:	add	sp, #8
    8538:	pop	{r4, r5, r6, pc}
    m_spiDriver.send(data);
    853a:	adds	r5, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    853c:	ldrb	r0, [r4, #17]
    853e:	movs	r1, #1
    8540:	bl	a0c0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    8544:	movs	r1, #255	; 0xff
    8546:	mov	r0, r5
    8548:	bl	a054 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    854c:	mov	r0, r5
    854e:	bl	9fc0 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    8552:	movs	r3, #0
  return false;
    8554:	mov	r0, r3
    m_spiActive = false;
    8556:	strb	r3, [r4, #19]
  bool readCSD(csd_t* csd) { return readRegister(CMD9, csd); }
    8558:	add	sp, #8
    855a:	pop	{r4, r5, r6, pc}
  if (!readData(dst, 16)) {
    855c:	mov	r5, r0
    855e:	movs	r2, #16
    8560:	mov	r1, r6
    8562:	mov	r0, r4
    8564:	bl	7b5c <SharedSpiCard::readData(unsigned char*, unsigned int)>
    8568:	cmp	r0, #0
    856a:	beq.n	8532 <SharedSpiCard::readCSD(csd_t*)+0x16>
  if (m_spiActive) {
    856c:	ldrb	r6, [r4, #19]
    856e:	cmp	r6, #0
    8570:	beq.n	8536 <SharedSpiCard::readCSD(csd_t*)+0x1a>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    8572:	ldrb	r0, [r4, #17]
    8574:	movs	r1, #1
    8576:	bl	a0c0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    857a:	adds	r0, r4, #4
    857c:	movs	r1, #255	; 0xff
    857e:	str	r0, [sp, #4]
    8580:	bl	a054 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    8584:	ldr	r0, [sp, #4]
    8586:	bl	9fc0 <SdSpiArduinoDriver::deactivate()>
}
    858a:	mov	r0, r6
    m_spiActive = false;
    858c:	strb	r5, [r4, #19]
  bool readCSD(csd_t* csd) { return readRegister(CMD9, csd); }
    858e:	add	sp, #8
    8590:	pop	{r4, r5, r6, pc}
    8592:	nop

00008594 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
bool DedicatedSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    8594:	push	{r4, r5, r6, r7, lr}
    8596:	mov	r4, r2
  if (sdState() != READ_STATE || sector != m_curSector) {
    8598:	ldrb	r2, [r0, #20]
bool DedicatedSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    859a:	sub	sp, #12
    859c:	mov	r6, r0
  if (sdState() != READ_STATE || sector != m_curSector) {
    859e:	cmp	r2, #1
bool DedicatedSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    85a0:	mov	r5, r1
    85a2:	mov	r7, r3
  if (sdState() != READ_STATE || sector != m_curSector) {
    85a4:	bne.n	85ac <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x18>
    85a6:	ldr	r3, [r0, #24]
    85a8:	cmp	r3, r1
    85aa:	beq.n	85b8 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x24>
    if (!readStart(sector)) {
    85ac:	mov	r1, r5
    85ae:	mov	r0, r6
    85b0:	bl	8150 <SharedSpiCard::readStart(unsigned long)>
    85b4:	cbz	r0, 85d8 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x44>
    m_curSector = sector;
    85b6:	str	r5, [r6, #24]
  for (size_t i = 0; i < ns; i++, dst += 512) {
    85b8:	cbz	r7, 85e0 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x4c>
    if (!readStart(sector)) {
    85ba:	movs	r5, #0
    85bc:	b.n	85c2 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2e>
  for (size_t i = 0; i < ns; i++, dst += 512) {
    85be:	cmp	r7, r5
    85c0:	beq.n	85e0 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x4c>
bool SharedSpiCard::readData(uint8_t* dst) { return readData(dst, 512); }
    85c2:	mov	r1, r4
    85c4:	mov.w	r2, #512	; 0x200
    85c8:	mov	r0, r6
  for (size_t i = 0; i < ns; i++, dst += 512) {
    85ca:	adds	r5, #1
    85cc:	add.w	r4, r4, #512	; 0x200
bool SharedSpiCard::readData(uint8_t* dst) { return readData(dst, 512); }
    85d0:	bl	7b5c <SharedSpiCard::readData(unsigned char*, unsigned int)>
    if (!readData(dst)) {
    85d4:	cmp	r0, #0
    85d6:	bne.n	85be <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2a>
  return false;
    85d8:	movs	r4, #0
}
    85da:	mov	r0, r4
    85dc:	add	sp, #12
    85de:	pop	{r4, r5, r6, r7, pc}
  m_curSector += ns;
    85e0:	ldr	r3, [r6, #24]
  return m_dedicatedSpi ? true : readStop();
    85e2:	ldrb	r4, [r6, #28]
  m_curSector += ns;
    85e4:	add	r3, r7
    85e6:	str	r3, [r6, #24]
  return m_dedicatedSpi ? true : readStop();
    85e8:	cbz	r4, 85f2 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x5e>
    85ea:	movs	r4, #1
}
    85ec:	mov	r0, r4
    85ee:	add	sp, #12
    85f0:	pop	{r4, r5, r6, r7, pc}
  if (cardCommand(CMD12, 0)) {
    85f2:	mov	r2, r4
    85f4:	movs	r1, #12
    85f6:	mov	r0, r6
  m_state = IDLE_STATE;
    85f8:	strb	r4, [r6, #20]
  if (cardCommand(CMD12, 0)) {
    85fa:	bl	7c70 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    85fe:	mov	r5, r0
    8600:	cbnz	r0, 8624 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x90>
  if (m_spiActive) {
    8602:	ldrb	r4, [r6, #19]
    8604:	cmp	r4, #0
    8606:	beq.n	85ea <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x56>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    8608:	movs	r1, #1
    860a:	ldrb	r0, [r6, #17]
    860c:	bl	a0c0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    8610:	adds	r0, r6, #4
    8612:	movs	r1, #255	; 0xff
    8614:	str	r0, [sp, #4]
    8616:	bl	a054 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    861a:	ldr	r0, [sp, #4]
    861c:	bl	9fc0 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    8620:	strb	r5, [r6, #19]
}
    8622:	b.n	85da <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x46>
    m_errorCode = code;
    8624:	movs	r2, #9
  if (m_spiActive) {
    8626:	ldrb	r3, [r6, #19]
    8628:	strb	r2, [r6, #18]
    862a:	cmp	r3, #0
    862c:	beq.n	85d8 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x44>
    m_spiDriver.send(data);
    862e:	adds	r5, r6, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    8630:	movs	r1, #1
    8632:	ldrb	r0, [r6, #17]
    8634:	bl	a0c0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    8638:	movs	r1, #255	; 0xff
    863a:	mov	r0, r5
    863c:	bl	a054 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    8640:	mov	r0, r5
    8642:	bl	9fc0 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    8646:	strb	r4, [r6, #19]
}
    8648:	b.n	85da <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x46>
    864a:	nop

0000864c <DedicatedSpiCard::setDedicatedSpi(bool)>:
//------------------------------------------------------------------------------
bool DedicatedSpiCard::setDedicatedSpi(bool value) {
  if (!syncDevice()) {
    864c:	ldr	r3, [r0, #0]
bool DedicatedSpiCard::setDedicatedSpi(bool value) {
    864e:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!syncDevice()) {
    8652:	ldr	r2, [r3, #28]
bool DedicatedSpiCard::setDedicatedSpi(bool value) {
    8654:	sub	sp, #8
    8656:	ldr	r5, [pc, #144]	; (86e8 <DedicatedSpiCard::setDedicatedSpi(bool)+0x9c>)
    8658:	mov	r4, r0
    865a:	mov	r6, r1
    865c:	cmp	r2, r5
    865e:	bne.n	8684 <DedicatedSpiCard::setDedicatedSpi(bool)+0x38>
  if (m_state == WRITE_STATE) {
    8660:	ldrb	r5, [r0, #20]
    8662:	cmp	r5, #2
    8664:	beq.n	8674 <DedicatedSpiCard::setDedicatedSpi(bool)+0x28>
  if (m_state == READ_STATE) {
    8666:	cmp	r5, #1
    8668:	beq.n	8688 <DedicatedSpiCard::setDedicatedSpi(bool)+0x3c>
    return false;
  }
  m_dedicatedSpi = value;
  return true;
    866a:	movs	r0, #1
  m_dedicatedSpi = value;
    866c:	strb	r6, [r4, #28]
}
    866e:	add	sp, #8
    8670:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return writeStop();
    8674:	ldr	r3, [r3, #104]	; 0x68
    8676:	blx	r3
  if (!syncDevice()) {
    8678:	cmp	r0, #0
    867a:	bne.n	866a <DedicatedSpiCard::setDedicatedSpi(bool)+0x1e>
    return false;
    867c:	movs	r0, #0
}
    867e:	add	sp, #8
    8680:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!syncDevice()) {
    8684:	blx	r2
    8686:	b.n	8678 <DedicatedSpiCard::setDedicatedSpi(bool)+0x2c>
  m_state = IDLE_STATE;
    8688:	mov.w	r8, #0
  if (cardCommand(CMD12, 0)) {
    868c:	movs	r1, #12
    868e:	mov	r2, r8
  m_state = IDLE_STATE;
    8690:	strb.w	r8, [r0, #20]
  if (cardCommand(CMD12, 0)) {
    8694:	bl	7c70 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    8698:	mov	r7, r0
    869a:	cbnz	r0, 86be <DedicatedSpiCard::setDedicatedSpi(bool)+0x72>
  if (m_spiActive) {
    869c:	ldrb	r3, [r4, #19]
    869e:	cmp	r3, #0
    86a0:	beq.n	866a <DedicatedSpiCard::setDedicatedSpi(bool)+0x1e>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    86a2:	mov	r1, r5
    86a4:	ldrb	r0, [r4, #17]
    86a6:	bl	a0c0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    86aa:	adds	r0, r4, #4
    86ac:	movs	r1, #255	; 0xff
    86ae:	str	r0, [sp, #4]
    86b0:	bl	a054 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    86b4:	ldr	r0, [sp, #4]
    86b6:	bl	9fc0 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    86ba:	strb	r7, [r4, #19]
    86bc:	b.n	866a <DedicatedSpiCard::setDedicatedSpi(bool)+0x1e>
    m_errorCode = code;
    86be:	movs	r2, #9
  if (m_spiActive) {
    86c0:	ldrb	r3, [r4, #19]
    86c2:	strb	r2, [r4, #18]
    86c4:	cmp	r3, #0
    86c6:	beq.n	867c <DedicatedSpiCard::setDedicatedSpi(bool)+0x30>
    m_spiDriver.send(data);
    86c8:	adds	r6, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    86ca:	mov	r1, r5
    86cc:	ldrb	r0, [r4, #17]
    86ce:	bl	a0c0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    86d2:	movs	r1, #255	; 0xff
    86d4:	mov	r0, r6
    86d6:	bl	a054 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    86da:	mov	r0, r6
    86dc:	bl	9fc0 <SdSpiArduinoDriver::deactivate()>
    return false;
    86e0:	mov	r0, r8
    m_spiActive = false;
    86e2:	strb.w	r8, [r4, #19]
    86e6:	b.n	866e <DedicatedSpiCard::setDedicatedSpi(bool)+0x22>
    86e8:	.word	0x00007c59

000086ec <SharedSpiCard::writeData(unsigned char, unsigned char const*)>:
bool SharedSpiCard::writeData(uint8_t token, const uint8_t* src) {
    86ec:	push	{r4, r5, r6, lr}
    m_spiDriver.send(data);
    86ee:	adds	r5, r0, #4
    86f0:	mov	r6, r2
    86f2:	mov	r4, r0
    86f4:	mov	r0, r5
    86f6:	bl	a054 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.send(buf, n);
    86fa:	mov.w	r2, #512	; 0x200
    86fe:	mov	r1, r6
    8700:	mov	r0, r5
    8702:	bl	a068 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>
    m_spiDriver.send(data);
    8706:	movs	r1, #255	; 0xff
    8708:	mov	r0, r5
    870a:	bl	a054 <SdSpiArduinoDriver::send(unsigned char)>
    870e:	movs	r1, #255	; 0xff
    8710:	mov	r0, r5
    8712:	bl	a054 <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
    8716:	mov	r0, r5
    8718:	bl	a018 <SdSpiArduinoDriver::receive()>
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    871c:	and.w	r3, r0, #31
  m_status = spiReceive();
    8720:	strb	r0, [r4, #21]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    8722:	cmp	r3, #5
    8724:	beq.n	8730 <SharedSpiCard::writeData(unsigned char, unsigned char const*)+0x44>
    m_errorCode = code;
    8726:	movs	r3, #33	; 0x21
  if (m_spiActive) {
    8728:	ldrb	r0, [r4, #19]
    872a:	strb	r3, [r4, #18]
    872c:	cbnz	r0, 8734 <SharedSpiCard::writeData(unsigned char, unsigned char const*)+0x48>
}
    872e:	pop	{r4, r5, r6, pc}
  return true;
    8730:	movs	r0, #1
}
    8732:	pop	{r4, r5, r6, pc}
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    8734:	ldrb	r0, [r4, #17]
    8736:	movs	r1, #1
    8738:	bl	a0c0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    873c:	movs	r1, #255	; 0xff
    873e:	mov	r0, r5
    8740:	bl	a054 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    8744:	mov	r0, r5
    8746:	bl	9fc0 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    874a:	movs	r3, #0
}
    874c:	mov	r0, r3
    m_spiActive = false;
    874e:	strb	r3, [r4, #19]
}
    8750:	pop	{r4, r5, r6, pc}
    8752:	nop

00008754 <SharedSpiCard::writeData(unsigned char const*)>:
bool SharedSpiCard::writeData(const uint8_t* src) {
    8754:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8758:	ldr	r5, [pc, #92]	; (87b8 <SharedSpiCard::writeData(unsigned char const*)+0x64>)
    875a:	mov	r6, r0
    875c:	mov	r7, r1
    return m_spiDriver.receive();
    875e:	add.w	r8, r0, #4
    8762:	ldr	r4, [r5, #0]
  void set(uint16_t ms) { m_endTime = ms + millis16(); }
    8764:	add.w	r4, r4, #600	; 0x258
    8768:	uxth	r4, r4
  explicit Timeout(uint16_t ms) { set(ms); }
    876a:	b.n	8774 <SharedSpiCard::writeData(unsigned char const*)+0x20>
    876c:	ldr	r3, [r5, #0]
  bool timedOut() { return (int16_t)(m_endTime - millis16()) < 0; }
    876e:	subs	r3, r4, r3
    if (timeout.timedOut()) {
    8770:	lsls	r3, r3, #16
    8772:	bmi.n	878e <SharedSpiCard::writeData(unsigned char const*)+0x3a>
    8774:	mov	r0, r8
    8776:	bl	a018 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    877a:	cmp	r0, #255	; 0xff
    877c:	bne.n	876c <SharedSpiCard::writeData(unsigned char const*)+0x18>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
    877e:	mov	r2, r7
    8780:	movs	r1, #252	; 0xfc
    8782:	mov	r0, r6
    8784:	bl	86ec <SharedSpiCard::writeData(unsigned char, unsigned char const*)>
    8788:	cbz	r0, 8792 <SharedSpiCard::writeData(unsigned char const*)+0x3e>
}
    878a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_errorCode = code;
    878e:	movs	r3, #37	; 0x25
    8790:	strb	r3, [r6, #18]
  if (m_spiActive) {
    8792:	ldrb	r0, [r6, #19]
    8794:	cmp	r0, #0
    8796:	beq.n	878a <SharedSpiCard::writeData(unsigned char const*)+0x36>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    8798:	ldrb	r0, [r6, #17]
    879a:	movs	r1, #1
    879c:	bl	a0c0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    87a0:	movs	r1, #255	; 0xff
    87a2:	mov	r0, r8
    87a4:	bl	a054 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    87a8:	mov	r0, r8
    87aa:	bl	9fc0 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    87ae:	movs	r3, #0
}
    87b0:	mov	r0, r3
    m_spiActive = false;
    87b2:	strb	r3, [r6, #19]
}
    87b4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    87b8:	.word	0x20007aec

000087bc <SharedSpiCard::writeSector(unsigned long, unsigned char const*)>:
bool SharedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    87bc:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    87c0:	ldr	r3, [r0, #0]
bool SharedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    87c2:	mov	r5, r2
    87c4:	ldr	r2, [pc, #212]	; (889c <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0xe0>)
    87c6:	mov	r4, r0
  if (type() != SD_CARD_TYPE_SDHC) {
    87c8:	ldr	r3, [r3, #92]	; 0x5c
bool SharedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    87ca:	mov	r6, r1
    87cc:	cmp	r3, r2
    87ce:	bne.n	888a <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0xce>
  uint8_t type() const { return m_type; }
    87d0:	ldrb	r0, [r0, #22]
  if (type() != SD_CARD_TYPE_SDHC) {
    87d2:	cmp	r0, #3
  if (cardCommand(CMD24, sector)) {
    87d4:	mov.w	r1, #24
    87d8:	mov	r0, r4
    sector <<= 9;
    87da:	it	ne
    87dc:	lslne	r6, r6, #9
  if (cardCommand(CMD24, sector)) {
    87de:	mov	r2, r6
    87e0:	bl	7c70 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    87e4:	cbz	r0, 87fa <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x3e>
    m_errorCode = code;
    87e6:	movs	r3, #13
    87e8:	strb	r3, [r4, #18]
  if (m_spiActive) {
    87ea:	ldrb.w	r9, [r4, #19]
    87ee:	cmp.w	r9, #0
    87f2:	bne.n	8866 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0xaa>
}
    87f4:	mov	r0, r9
    87f6:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (!writeData(DATA_START_SECTOR, src)) {
    87fa:	mov	r2, r5
    87fc:	movs	r1, #254	; 0xfe
    87fe:	mov	r0, r4
    8800:	bl	86ec <SharedSpiCard::writeData(unsigned char, unsigned char const*)>
    8804:	mov	r9, r0
    8806:	cmp	r0, #0
    8808:	beq.n	87ea <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x2e>
    880a:	ldr	r7, [pc, #148]	; (88a0 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0xe4>)
    return m_spiDriver.receive();
    880c:	add.w	r8, r4, #4
    8810:	ldr	r6, [r7, #0]
  void set(uint16_t ms) { m_endTime = ms + millis16(); }
    8812:	add.w	r6, r6, #600	; 0x258
    8816:	uxth	r6, r6
  explicit Timeout(uint16_t ms) { set(ms); }
    8818:	b.n	8822 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x66>
    881a:	ldr	r3, [r7, #0]
  bool timedOut() { return (int16_t)(m_endTime - millis16()) < 0; }
    881c:	subs	r3, r6, r3
    if (timeout.timedOut()) {
    881e:	lsls	r3, r3, #16
    8820:	bmi.n	8894 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0xd8>
    8822:	mov	r0, r8
    8824:	bl	a018 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    8828:	cmp	r0, #255	; 0xff
    882a:	mov	r5, r0
    882c:	bne.n	881a <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x5e>
  if (cardCommand(CMD13, 0) || spiReceive()) {
    882e:	movs	r2, #0
    8830:	movs	r1, #13
    8832:	mov	r0, r4
    8834:	bl	7c70 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    8838:	cbnz	r0, 888e <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0xd2>
    883a:	mov	r0, r8
    883c:	bl	a018 <SdSpiArduinoDriver::receive()>
    8840:	mov	r6, r0
    8842:	cbnz	r0, 888e <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0xd2>
  if (m_spiActive) {
    8844:	ldrb	r3, [r4, #19]
    8846:	cmp	r3, #0
    8848:	beq.n	87f4 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x38>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    884a:	movs	r1, #1
    884c:	ldrb	r0, [r4, #17]
  return true;
    884e:	mov	r9, r3
    8850:	bl	a0c0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    8854:	mov	r1, r5
    8856:	mov	r0, r8
    8858:	bl	a054 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    885c:	mov	r0, r8
    885e:	bl	9fc0 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    8862:	strb	r6, [r4, #19]
}
    8864:	b.n	87f4 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x38>
    m_spiDriver.send(data);
    8866:	adds	r5, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    8868:	ldrb	r0, [r4, #17]
    886a:	movs	r1, #1
    886c:	bl	a0c0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    8870:	movs	r1, #255	; 0xff
    8872:	mov	r0, r5
    8874:	bl	a054 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    8878:	mov	r0, r5
    887a:	bl	9fc0 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    887e:	movs	r3, #0
  return false;
    8880:	mov	r9, r3
    m_spiActive = false;
    8882:	strb	r3, [r4, #19]
}
    8884:	mov	r0, r9
    8886:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (type() != SD_CARD_TYPE_SDHC) {
    888a:	blx	r3
    888c:	b.n	87d2 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x16>
    m_errorCode = code;
    888e:	movs	r3, #10
    8890:	strb	r3, [r4, #18]
    goto fail;
    8892:	b.n	87ea <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x2e>
    8894:	movs	r3, #36	; 0x24
    8896:	strb	r3, [r4, #18]
    goto fail;
    8898:	b.n	87ea <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x2e>
    889a:	nop
    889c:	.word	0x00007a11
    88a0:	.word	0x20007aec

000088a4 <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)>:
//------------------------------------------------------------------------------
bool DedicatedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    88a4:	push	{r4}
  if (m_dedicatedSpi) {
    88a6:	ldrb	r4, [r0, #28]
    88a8:	cbz	r4, 88b8 <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)+0x14>
    return writeSectors(sector, src, 1);
    88aa:	ldr	r4, [r0, #0]
    88ac:	movs	r3, #1
    88ae:	ldr	r4, [r4, #36]	; 0x24
    88b0:	mov	ip, r4
  }
  return SharedSpiCard::writeSector(sector, src);
}
    88b2:	ldr.w	r4, [sp], #4
    return writeSectors(sector, src, 1);
    88b6:	bx	ip
}
    88b8:	ldr.w	r4, [sp], #4
  return SharedSpiCard::writeSector(sector, src);
    88bc:	b.w	87bc <SharedSpiCard::writeSector(unsigned long, unsigned char const*)>

000088c0 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
//------------------------------------------------------------------------------
bool DedicatedSpiCard::writeSectors(uint32_t sector, const uint8_t* src,
                                    size_t ns) {
    88c0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    88c4:	mov	sl, r3
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    88c6:	ldrb	r3, [r0, #20]
                                    size_t ns) {
    88c8:	sub	sp, #4
    88ca:	mov	r7, r0
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    88cc:	cmp	r3, #2
                                    size_t ns) {
    88ce:	mov	r4, r1
    88d0:	mov	r8, r2
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    88d2:	beq.n	8988 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0xc8>
    if (!writeStart(sector)) {
    88d4:	ldr	r3, [r7, #0]
    88d6:	mov	r1, r4
    88d8:	mov	r0, r7
    88da:	ldr	r3, [r3, #100]	; 0x64
    88dc:	blx	r3
    88de:	cmp	r0, #0
    88e0:	beq.n	8952 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x92>
      goto fail;
    }
    m_curSector = sector;
    88e2:	str	r4, [r7, #24]
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    88e4:	cmp.w	sl, #0
    88e8:	beq.n	8932 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x72>
    if (!writeStart(sector)) {
    88ea:	mov.w	r9, #0
    88ee:	ldr.w	fp, [pc, #164]	; 8994 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0xd4>
    88f2:	ldr	r5, [pc, #156]	; (8990 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0xd0>)
    return m_spiDriver.receive();
    88f4:	adds	r6, r7, #4
    if (!writeData(src)) {
    88f6:	ldr	r3, [r7, #0]
    88f8:	ldr	r3, [r3, #96]	; 0x60
    88fa:	cmp	r3, fp
    88fc:	bne.n	895a <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x9a>
    88fe:	ldr	r4, [r5, #0]
  void set(uint16_t ms) { m_endTime = ms + millis16(); }
    8900:	add.w	r4, r4, #600	; 0x258
    8904:	uxth	r4, r4
  explicit Timeout(uint16_t ms) { set(ms); }
    8906:	b.n	8910 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x50>
    8908:	ldr	r3, [r5, #0]
  bool timedOut() { return (int16_t)(m_endTime - millis16()) < 0; }
    890a:	subs	r3, r4, r3
    if (timeout.timedOut()) {
    890c:	lsls	r3, r3, #16
    890e:	bmi.n	894a <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x8a>
    8910:	mov	r0, r6
    8912:	bl	a018 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    8916:	cmp	r0, #255	; 0xff
    8918:	bne.n	8908 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x48>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
    891a:	mov	r2, r8
    891c:	movs	r1, #252	; 0xfc
    891e:	mov	r0, r7
    8920:	bl	86ec <SharedSpiCard::writeData(unsigned char, unsigned char const*)>
    8924:	cbz	r0, 894e <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x8e>
  for (size_t i = 0; i < ns; i++, src += 512) {
    8926:	add.w	r9, r9, #1
    892a:	add.w	r8, r8, #512	; 0x200
    892e:	cmp	sl, r9
    8930:	bne.n	88f6 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x36>
      goto fail;
    }
  }
  m_curSector += ns;
    8932:	ldr	r3, [r7, #24]
  return m_dedicatedSpi ? true : writeStop();
    8934:	ldrb	r0, [r7, #28]
  m_curSector += ns;
    8936:	add	r3, sl
    8938:	str	r3, [r7, #24]
  return m_dedicatedSpi ? true : writeStop();
    893a:	cbnz	r0, 8954 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x94>
    893c:	ldr	r3, [r7, #0]
    893e:	mov	r0, r7
    8940:	ldr	r3, [r3, #104]	; 0x68

fail:
  return false;
}
    8942:	add	sp, #4
    8944:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  return m_dedicatedSpi ? true : writeStop();
    8948:	bx	r3
    m_errorCode = code;
    894a:	movs	r3, #37	; 0x25
    894c:	strb	r3, [r7, #18]
  if (m_spiActive) {
    894e:	ldrb	r3, [r7, #19]
    8950:	cbnz	r3, 8966 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0xa6>
  return false;
    8952:	movs	r0, #0
}
    8954:	add	sp, #4
    8956:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (!writeData(src)) {
    895a:	mov	r1, r8
    895c:	mov	r0, r7
    895e:	blx	r3
    8960:	cmp	r0, #0
    8962:	bne.n	8926 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x66>
    8964:	b.n	8952 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x92>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    8966:	ldrb	r0, [r7, #17]
    8968:	movs	r1, #1
    896a:	bl	a0c0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    896e:	movs	r1, #255	; 0xff
    8970:	mov	r0, r6
    8972:	bl	a054 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    8976:	mov	r0, r6
    8978:	bl	9fc0 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    897c:	movs	r3, #0
  return false;
    897e:	mov	r0, r3
    m_spiActive = false;
    8980:	strb	r3, [r7, #19]
}
    8982:	add	sp, #4
    8984:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    8988:	ldr	r3, [r0, #24]
    898a:	cmp	r3, r1
    898c:	bne.n	88d4 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x14>
    898e:	b.n	88e4 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x24>
    8990:	.word	0x20007aec
    8994:	.word	0x00008755

00008998 <DedicatedSpiCard::begin(SdSpiConfig)>:
bool DedicatedSpiCard::begin(SdSpiConfig spiConfig) {
    8998:	push	{r4, lr}
    899a:	sub	sp, #16
    899c:	mov	r4, r0
    899e:	add.w	ip, sp, #4
    89a2:	stmia.w	ip, {r1, r2, r3}
  if (!SharedSpiCard::begin(spiConfig)) {
    89a6:	ldmia.w	ip, {r1, r2, r3}
    89aa:	bl	7d5c <SharedSpiCard::begin(SdSpiConfig)>
    89ae:	cbz	r0, 89ba <DedicatedSpiCard::begin(SdSpiConfig)+0x22>
const uint8_t USER_SPI_BEGIN = 2;
/**
 * \param[in] opt option field of SdSpiConfig.
 * \return true for dedicated SPI.
 */
inline bool spiOptionDedicated(uint8_t opt) { return opt & DEDICATED_SPI; }
    89b0:	ldrb.w	r3, [sp, #5]
    89b4:	and.w	r3, r3, #1
    89b8:	strb	r3, [r4, #28]
}
    89ba:	add	sp, #16
    89bc:	pop	{r4, pc}
    89be:	nop

000089c0 <SdCardInterface::hasDedicatedSpi()>:
  virtual bool hasDedicatedSpi() { return false; }
    89c0:	movs	r0, #0
    89c2:	bx	lr

000089c4 <SdCardInterface::isDedicatedSpi()>:
  bool virtual isDedicatedSpi() { return false; }
    89c4:	movs	r0, #0
    89c6:	bx	lr

000089c8 <SdCardInterface::setDedicatedSpi(bool)>:
  }
    89c8:	movs	r0, #0
    89ca:	bx	lr

000089cc <SdioCard::end()>:
   */
  bool cardCMD6(uint32_t arg, uint8_t* status);
  /** Disable an SDIO card.
   * not implemented.
   */
  void end() {}
    89cc:	bx	lr
    89ce:	nop

000089d0 <sdIrs()>:
  return false;
}
//==============================================================================
// ISR
static void sdIrs() {
  SDHC_IRQSIGEN = 0;
    89d0:	ldr	r3, [pc, #32]	; (89f4 <sdIrs()+0x24>)
    89d2:	movs	r1, #0
  m_irqstat = SDHC_IRQSTAT;
    89d4:	ldr	r2, [pc, #32]	; (89f8 <sdIrs()+0x28>)
  SDHC_IRQSTAT = m_irqstat;
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
#endif
  m_dmaBusy = false;
    89d6:	ldr	r0, [pc, #36]	; (89fc <sdIrs()+0x2c>)
static void sdIrs() {
    89d8:	push	{r4}
  SDHC_IRQSIGEN = 0;
    89da:	str	r1, [r3, #56]	; 0x38
  m_irqstat = SDHC_IRQSTAT;
    89dc:	ldr	r4, [r3, #48]	; 0x30
    89de:	str	r4, [r2, #0]
  SDHC_IRQSTAT = m_irqstat;
    89e0:	ldr	r2, [r2, #0]
}
    89e2:	ldr.w	r4, [sp], #4
  SDHC_IRQSTAT = m_irqstat;
    89e6:	str	r2, [r3, #48]	; 0x30
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
    89e8:	ldr	r2, [r3, #72]	; 0x48
    89ea:	bic.w	r2, r2, #129	; 0x81
    89ee:	str	r2, [r3, #72]	; 0x48
  m_dmaBusy = false;
    89f0:	strb	r1, [r0, #0]
}
    89f2:	bx	lr
    89f4:	.word	0x402c0000
    89f8:	.word	0x20006400
    89fc:	.word	0x20007b5a

00008a00 <isBusyDat()>:
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
}
//------------------------------------------------------------------------------
static bool isBusyCommandInhibit() { return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB; }
//------------------------------------------------------------------------------
static bool isBusyDat() { return SDHC_PRSSTAT & (1 << 24) ? false : true; }
    8a00:	ldr	r3, [pc, #12]	; (8a10 <isBusyDat()+0x10>)
    8a02:	ldr	r0, [r3, #36]	; 0x24
    8a04:	eor.w	r0, r0, #16777216	; 0x1000000
    8a08:	ubfx	r0, r0, #24, #1
    8a0c:	bx	lr
    8a0e:	nop
    8a10:	.word	0x402c0000

00008a14 <isBusyDMA()>:
//------------------------------------------------------------------------------
static bool isBusyDMA() { return m_dmaBusy; }
    8a14:	ldr	r3, [pc, #4]	; (8a1c <isBusyDMA()+0x8>)
    8a16:	ldrb	r0, [r3, #0]
    8a18:	bx	lr
    8a1a:	nop
    8a1c:	.word	0x20007b5a

00008a20 <setSdclk(unsigned long)>:
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    8a20:	ldr	r2, [pc, #172]	; (8ad0 <setSdclk(unsigned long)+0xb0>)
  return (528000000U * 3) / ((CCM_ANALOG_PFD_528 & 0x3F) / 6) / divider;
    8a22:	ldr	r3, [pc, #176]	; (8ad4 <setSdclk(unsigned long)+0xb4>)
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    8a24:	ldr	r2, [r2, #36]	; 0x24
  return (528000000U * 3) / ((CCM_ANALOG_PFD_528 & 0x3F) / 6) / divider;
    8a26:	ldr.w	r3, [r3, #256]	; 0x100
    8a2a:	ldr	r1, [pc, #172]	; (8ad8 <setSdclk(unsigned long)+0xb8>)
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    8a2c:	ubfx	r2, r2, #11, #3
  return (528000000U * 3) / ((CCM_ANALOG_PFD_528 & 0x3F) / 6) / divider;
    8a30:	and.w	r3, r3, #63	; 0x3f
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    8a34:	adds	r2, #1
  }
  d[15] = 0;
  return true;
}
//------------------------------------------------------------------------------
static void setSdclk(uint32_t kHzMax) {
    8a36:	push	{r4, r5, r6, lr}
  return (528000000U * 3) / ((CCM_ANALOG_PFD_528 & 0x3F) / 6) / divider;
    8a38:	ldr	r4, [pc, #160]	; (8adc <setSdclk(unsigned long)+0xbc>)
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000 * kHzMax;
    8a3a:	mov.w	r5, #1000	; 0x3e8
  return (528000000U * 3) / ((CCM_ANALOG_PFD_528 & 0x3F) / 6) / divider;
    8a3e:	umull	r4, r3, r4, r3
  uint32_t maxSdclk = 1000 * kHzMax;
    8a42:	mul.w	r0, r5, r0
  return (528000000U * 3) / ((CCM_ANALOG_PFD_528 & 0x3F) / 6) / divider;
    8a46:	lsrs	r3, r3, #2
    8a48:	udiv	lr, r1, r3
    8a4c:	udiv	lr, lr, r2
  uint32_t base = baseClock();

  while ((base / (sdclkfs * DVS_LIMIT) > maxSdclk) &&
    8a50:	cmp.w	r0, lr, lsr #4
    8a54:	bcs.n	8ac2 <setSdclk(unsigned long)+0xa2>
  uint32_t sdclkfs = 1;
    8a56:	movs	r3, #1
         (sdclkfs < SDCLKFS_LIMIT)) {
    sdclkfs <<= 1;
    8a58:	mov	r6, r3
    8a5a:	lsls	r3, r3, #1
  while ((base / (sdclkfs * DVS_LIMIT) > maxSdclk) &&
    8a5c:	lsls	r2, r3, #4
    8a5e:	udiv	r2, lr, r2
    8a62:	cmp	r2, r0
    8a64:	bls.n	8a6a <setSdclk(unsigned long)+0x4a>
    8a66:	cmp	r3, #255	; 0xff
    8a68:	bls.n	8a58 <setSdclk(unsigned long)+0x38>
  }
  while ((base / (sdclkfs * dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    8a6a:	udiv	r2, lr, r3
  uint32_t sysctl =
      SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK | SDHC_SYSCTL_DVS_MASK |
                      SDHC_SYSCTL_SDCLKFS_MASK);

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs) |
                SDHC_SYSCTL_SDCLKFS(sdclkfs);
    8a6e:	lsls	r6, r6, #8
  while ((base / (sdclkfs * dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    8a70:	cmp	r0, r2
    8a72:	bcs.n	8aca <setSdclk(unsigned long)+0xaa>
    8a74:	mov.w	ip, r3, lsl #1
    8a78:	movs	r2, #1
    8a7a:	b.n	8a7e <setSdclk(unsigned long)+0x5e>
    8a7c:	mov	ip, r4
    dvs++;
    8a7e:	mov	r5, r2
  while ((base / (sdclkfs * dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    8a80:	add.w	r4, r3, ip
    dvs++;
    8a84:	adds	r2, #1
  while ((base / (sdclkfs * dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    8a86:	udiv	r1, lr, ip
    8a8a:	cmp	r1, r0
    8a8c:	bls.n	8abe <setSdclk(unsigned long)+0x9e>
    8a8e:	cmp	r2, #16
    8a90:	bne.n	8a7c <setSdclk(unsigned long)+0x5c>
    8a92:	movs	r5, #240	; 0xf0
  m_sdClkKhz = base / (1000 * sdclkfs * dvs);
    8a94:	mov.w	r3, #1000	; 0x3e8
    8a98:	ldr	r1, [pc, #68]	; (8ae0 <setSdclk(unsigned long)+0xc0>)
      SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK | SDHC_SYSCTL_DVS_MASK |
    8a9a:	ldr	r2, [pc, #72]	; (8ae4 <setSdclk(unsigned long)+0xc4>)
  m_sdClkKhz = base / (1000 * sdclkfs * dvs);
    8a9c:	mul.w	ip, r3, ip
    8aa0:	udiv	r3, lr, ip
    8aa4:	str	r3, [r1, #0]
                      SDHC_SYSCTL_SDCLKFS_MASK);
    8aa6:	ldr	r3, [pc, #64]	; (8ae8 <setSdclk(unsigned long)+0xc8>)
      SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK | SDHC_SYSCTL_DVS_MASK |
    8aa8:	ldr	r1, [r2, #44]	; 0x2c
                      SDHC_SYSCTL_SDCLKFS_MASK);
    8aaa:	ands	r3, r1
  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs) |
    8aac:	orrs	r3, r5
    8aae:	orrs	r3, r6
    8ab0:	orr.w	r3, r3, #917504	; 0xe0000
    8ab4:	str	r3, [r2, #44]	; 0x2c

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
    8ab6:	ldr	r3, [r2, #36]	; 0x24
    8ab8:	lsls	r3, r3, #28
    8aba:	bpl.n	8ab6 <setSdclk(unsigned long)+0x96>

#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
  // Enable the SDHC clock.
  SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
}
    8abc:	pop	{r4, r5, r6, pc}
  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs) |
    8abe:	lsls	r5, r5, #4
    8ac0:	b.n	8a94 <setSdclk(unsigned long)+0x74>
  while ((base / (sdclkfs * DVS_LIMIT) > maxSdclk) &&
    8ac2:	mov	r2, lr
    8ac4:	movs	r6, #0
  uint32_t sdclkfs = 1;
    8ac6:	movs	r3, #1
    8ac8:	b.n	8a70 <setSdclk(unsigned long)+0x50>
  while ((base / (sdclkfs * dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    8aca:	mov	ip, r3
    8acc:	movs	r5, #0
    8ace:	b.n	8a94 <setSdclk(unsigned long)+0x74>
    8ad0:	.word	0x400fc000
    8ad4:	.word	0x400d8000
    8ad8:	.word	0x5e69ec00
    8adc:	.word	0xaaaaaaab
    8ae0:	.word	0x20005c84
    8ae4:	.word	0x402c0000
    8ae8:	.word	0xfff0000f

00008aec <SdioCard::errorCode() const>:
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::errorCode() const { return m_errorCode; }
    8aec:	ldr	r3, [pc, #4]	; (8af4 <SdioCard::errorCode() const+0x8>)
    8aee:	ldrb	r0, [r3, #0]
    8af0:	bx	lr
    8af2:	nop
    8af4:	.word	0x20001a44

00008af8 <SdioCard::errorData() const>:
//------------------------------------------------------------------------------
uint32_t SdioCard::errorData() const { return m_irqstat; }
    8af8:	ldr	r3, [pc, #4]	; (8b00 <SdioCard::errorData() const+0x8>)
    8afa:	ldr	r0, [r3, #0]
    8afc:	bx	lr
    8afe:	nop
    8b00:	.word	0x20006400

00008b04 <SdioCard::readCID(cid_t*)>:
  }
}
//------------------------------------------------------------------------------
uint32_t SdioCard::kHzSdClk() { return m_sdClkKhz; }
//------------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
    8b04:	push	{r4}
  memcpy(cid, &m_cid, sizeof(cid_t));
    8b06:	ldr	r4, [pc, #28]	; (8b24 <SdioCard::readCID(cid_t*)+0x20>)
bool SdioCard::readCID(cid_t* cid) {
    8b08:	mov	ip, r1
  memcpy(cid, &m_cid, sizeof(cid_t));
    8b0a:	ldmia	r4!, {r0, r1, r2, r3}
    8b0c:	str.w	r0, [ip]
  return true;
}
    8b10:	movs	r0, #1
  memcpy(cid, &m_cid, sizeof(cid_t));
    8b12:	str.w	r1, [ip, #4]
    8b16:	str.w	r2, [ip, #8]
    8b1a:	str.w	r3, [ip, #12]
}
    8b1e:	ldr.w	r4, [sp], #4
    8b22:	bx	lr
    8b24:	.word	0x2000618c

00008b28 <SdioCard::readCSD(csd_t*)>:
//------------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
    8b28:	push	{r4}
  memcpy(csd, &m_csd, sizeof(csd_t));
    8b2a:	ldr	r4, [pc, #28]	; (8b48 <SdioCard::readCSD(csd_t*)+0x20>)
bool SdioCard::readCSD(csd_t* csd) {
    8b2c:	mov	ip, r1
  memcpy(csd, &m_csd, sizeof(csd_t));
    8b2e:	ldmia	r4!, {r0, r1, r2, r3}
    8b30:	str.w	r0, [ip]
  return true;
}
    8b34:	movs	r0, #1
  memcpy(csd, &m_csd, sizeof(csd_t));
    8b36:	str.w	r1, [ip, #4]
    8b3a:	str.w	r2, [ip, #8]
    8b3e:	str.w	r3, [ip, #12]
}
    8b42:	ldr.w	r4, [sp], #4
    8b46:	bx	lr
    8b48:	.word	0x2000619c

00008b4c <SdioCard::readOCR(unsigned long*)>:
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
    8b4c:	ldr	r3, [pc, #8]	; (8b58 <SdioCard::readOCR(unsigned long*)+0xc>)
  return true;
}
    8b4e:	movs	r0, #1
  *ocr = m_ocr;
    8b50:	ldr	r3, [r3, #0]
    8b52:	str	r3, [r1, #0]
}
    8b54:	bx	lr
    8b56:	nop
    8b58:	.word	0x200061ac

00008b5c <SdioCard::readSCR(scr_t*)>:
//------------------------------------------------------------------------------
bool SdioCard::readSCR(scr_t* scr) {
  memcpy(scr, &m_scr, sizeof(scr_t));
    8b5c:	ldr	r2, [pc, #12]	; (8b6c <SdioCard::readSCR(scr_t*)+0x10>)
bool SdioCard::readSCR(scr_t* scr) {
    8b5e:	mov	r3, r1
  memcpy(scr, &m_scr, sizeof(scr_t));
    8b60:	ldmia	r2!, {r0, r1}
    8b62:	str	r0, [r3, #0]
  return true;
}
    8b64:	movs	r0, #1
  memcpy(scr, &m_scr, sizeof(scr_t));
    8b66:	str	r1, [r3, #4]
}
    8b68:	bx	lr
    8b6a:	nop
    8b6c:	.word	0x200061b4

00008b70 <SdioCard::readSDS(sds_t*)>:
//------------------------------------------------------------------------------
bool SdioCard::readSDS(sds_t* sds) {
    8b70:	push	{r4, r5, lr}
  memcpy(sds, &m_sds, sizeof(sds_t));
    8b72:	ldr	r4, [pc, #44]	; (8ba0 <SdioCard::readSDS(sds_t*)+0x30>)
    8b74:	mov	ip, r1
    8b76:	add.w	r5, r4, #64	; 0x40
    8b7a:	mov	lr, r4
    8b7c:	add.w	ip, ip, #16
    8b80:	adds	r4, #16
    8b82:	ldmia.w	lr!, {r0, r1, r2, r3}
    8b86:	cmp	lr, r5
    8b88:	str.w	r0, [ip, #-16]
    8b8c:	str.w	r1, [ip, #-12]
    8b90:	str.w	r2, [ip, #-8]
    8b94:	str.w	r3, [ip, #-4]
    8b98:	bne.n	8b7a <SdioCard::readSDS(sds_t*)+0xa>
  return true;
}
    8b9a:	movs	r0, #1
    8b9c:	pop	{r4, r5, pc}
    8b9e:	nop
    8ba0:	.word	0x200061bc

00008ba4 <SdioCard::~SdioCard()>:
class SdioCard : public SdCardInterface {
    8ba4:	bx	lr
    8ba6:	nop

00008ba8 <SdioCard::~SdioCard()>:
    8ba8:	push	{r4, lr}
    8baa:	mov	r4, r0
    8bac:	movs	r1, #12
    8bae:	bl	d09c <operator delete(void*, unsigned int)>
    8bb2:	mov	r0, r4
    8bb4:	pop	{r4, pc}
    8bb6:	nop

00008bb8 <SdioCard::type() const>:
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::type() const {
  return m_version2 ? m_highCapacity ? SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2
    8bb8:	ldr	r3, [pc, #16]	; (8bcc <SdioCard::type() const+0x14>)
    8bba:	ldrb	r3, [r3, #0]
    8bbc:	cbz	r3, 8bc8 <SdioCard::type() const+0x10>
    8bbe:	ldr	r3, [pc, #16]	; (8bd0 <SdioCard::type() const+0x18>)
    8bc0:	ldrb	r0, [r3, #0]
    8bc2:	adds	r0, #2
    8bc4:	uxtb	r0, r0
    8bc6:	bx	lr
    8bc8:	movs	r0, #1
                    : SD_CARD_TYPE_SD1;
}
    8bca:	bx	lr
    8bcc:	.word	0x20007b57
    8bd0:	.word	0x20007b58

00008bd4 <SdioCard::sectorCount()>:
    uint8_t ver = csd[0] >> 6;
    8bd4:	ldr	r2, [pc, #88]	; (8c30 <SdioCard::sectorCount()+0x5c>)
    8bd6:	ldrb	r3, [r2, #0]
    if (ver == 0) {
    8bd8:	lsrs	r3, r3, #6
    8bda:	beq.n	8bfa <SdioCard::sectorCount()+0x26>
    } else if (ver == 1) {
    8bdc:	cmp	r3, #1
    8bde:	beq.n	8be4 <SdioCard::sectorCount()+0x10>
      return 0;
    8be0:	movs	r0, #0
uint32_t SdioCard::sectorCount() { return m_csd.capacity(); }
    8be2:	bx	lr
      c_size = (uint32_t)(csd[7] & 63) << 16;
    8be4:	ldrb	r3, [r2, #7]
      c_size |= csd[9];
    8be6:	ldrh	r0, [r2, #8]
      c_size = (uint32_t)(csd[7] & 63) << 16;
    8be8:	lsls	r3, r3, #16
      c_size |= csd[9];
    8bea:	rev16	r0, r0
      c_size = (uint32_t)(csd[7] & 63) << 16;
    8bec:	and.w	r3, r3, #4128768	; 0x3f0000
      c_size |= csd[9];
    8bf0:	uxth	r0, r0
    8bf2:	orrs	r0, r3
      return (c_size + 1) << 10;
    8bf4:	adds	r0, #1
    8bf6:	lsls	r0, r0, #10
    8bf8:	bx	lr
      uint8_t c_size_mult = (csd[9] & 3) << 1 | csd[10] >> 7;
    8bfa:	ldrb	r3, [r2, #9]
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
    8bfc:	ldrb	r0, [r2, #8]
    8bfe:	ldrb.w	ip, [r2, #7]
      uint8_t c_size_mult = (csd[9] & 3) << 1 | csd[10] >> 7;
    8c02:	lsls	r3, r3, #1
      c_size = (uint32_t)(csd[6] & 3) << 10;
    8c04:	ldrb	r1, [r2, #6]
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
    8c06:	lsrs	r0, r0, #6
      uint8_t c_size_mult = (csd[9] & 3) << 1 | csd[10] >> 7;
    8c08:	and.w	r3, r3, #6
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
    8c0c:	orr.w	r0, r0, ip, lsl #2
      uint8_t c_size_mult = (csd[9] & 3) << 1 | csd[10] >> 7;
    8c10:	ldrb.w	ip, [r2, #10]
      c_size = (uint32_t)(csd[6] & 3) << 10;
    8c14:	lsls	r1, r1, #10
      uint8_t read_bl_len = csd[5] & 15;
    8c16:	ldrb	r2, [r2, #5]
      return (c_size + 1) << (c_size_mult + read_bl_len + 2 - 9);
    8c18:	orr.w	r3, r3, ip, lsr #7
      c_size = (uint32_t)(csd[6] & 3) << 10;
    8c1c:	and.w	r1, r1, #3072	; 0xc00
      return (c_size + 1) << (c_size_mult + read_bl_len + 2 - 9);
    8c20:	and.w	r2, r2, #15
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
    8c24:	orrs	r0, r1
      return (c_size + 1) << (c_size_mult + read_bl_len + 2 - 9);
    8c26:	add	r3, r2
    8c28:	adds	r0, #1
    8c2a:	subs	r3, #7
    8c2c:	lsls	r0, r3
    8c2e:	bx	lr
    8c30:	.word	0x2000619c

00008c34 <waitDmaStatus()>:
static bool waitDmaStatus() {
    8c34:	push	{r3, r4, r5, r6, r7, lr}
  m_busyFcn = fcn;
    8c36:	ldr	r3, [pc, #76]	; (8c84 <waitDmaStatus()+0x50>)
    8c38:	ldr	r7, [pc, #76]	; (8c88 <waitDmaStatus()+0x54>)
static bool isBusyDMA() { return m_dmaBusy; }
    8c3a:	ldr	r5, [pc, #80]	; (8c8c <waitDmaStatus()+0x58>)
  m_busyFcn = fcn;
    8c3c:	str	r3, [r7, #0]
  uint32_t m = micros();
    8c3e:	bl	b86c <micros>
static bool isBusyDMA() { return m_dmaBusy; }
    8c42:	ldrb	r3, [r5, #0]
  while (fcn()) {
    8c44:	cbz	r3, 8c66 <waitDmaStatus()+0x32>
    8c46:	mov	r4, r0
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8c48:	ldr	r6, [pc, #68]	; (8c90 <waitDmaStatus()+0x5c>)
    8c4a:	b.n	8c54 <waitDmaStatus()+0x20>
    yield();
    8c4c:	bl	c0d4 <yield>
static bool isBusyDMA() { return m_dmaBusy; }
    8c50:	ldrb	r3, [r5, #0]
  while (fcn()) {
    8c52:	cbz	r3, 8c66 <waitDmaStatus()+0x32>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8c54:	bl	b86c <micros>
    8c58:	subs	r0, r0, r4
    8c5a:	cmp	r0, r6
    8c5c:	bls.n	8c4c <waitDmaStatus()+0x18>
      m_busyFcn = 0;
    8c5e:	movs	r3, #0
    return false;  // Caller will set errorCode.
    8c60:	mov	r0, r3
      m_busyFcn = 0;
    8c62:	str	r3, [r7, #0]
}
    8c64:	pop	{r3, r4, r5, r6, r7, pc}
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    8c66:	ldr	r3, [pc, #44]	; (8c94 <waitDmaStatus()+0x60>)
  m_busyFcn = 0;
    8c68:	movs	r2, #0
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    8c6a:	ldr	r0, [r3, #0]
  m_busyFcn = 0;
    8c6c:	str	r2, [r7, #0]
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    8c6e:	ands.w	r0, r0, #2
    8c72:	beq.n	8c64 <waitDmaStatus()+0x30>
    8c74:	ldr	r2, [r3, #0]
    8c76:	ldr	r3, [pc, #32]	; (8c98 <waitDmaStatus()+0x64>)
    8c78:	tst	r2, r3
    8c7a:	ite	eq
    8c7c:	moveq	r0, #1
    8c7e:	movne	r0, #0
}
    8c80:	pop	{r3, r4, r5, r6, r7, pc}
    8c82:	nop
    8c84:	.word	0x00008a15
    8c88:	.word	0x200063fc
    8c8c:	.word	0x20007b5a
    8c90:	.word	0x000f4240
    8c94:	.word	0x20006400
    8c98:	.word	0x117f0000

00008c9c <waitTransferComplete() [clone .part.0]>:
static bool waitTransferComplete() {
    8c9c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t m = micros();
    8ca0:	bl	b86c <micros>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    8ca4:	ldr	r6, [pc, #92]	; (8d04 <waitTransferComplete() [clone .part.0]+0x68>)
    8ca6:	ldr	r5, [pc, #96]	; (8d08 <waitTransferComplete() [clone .part.0]+0x6c>)
  uint32_t m = micros();
    8ca8:	mov	r7, r0
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8caa:	ldr.w	r8, [pc, #116]	; 8d20 <waitTransferComplete() [clone .part.0]+0x84>
  while (fcn()) {
    8cae:	b.n	8cba <waitTransferComplete() [clone .part.0]+0x1e>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8cb0:	bl	b86c <micros>
    8cb4:	subs	r0, r0, r7
    8cb6:	cmp	r0, r8
    8cb8:	bhi.n	8cf2 <waitTransferComplete() [clone .part.0]+0x56>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    8cba:	ldr	r4, [r6, #48]	; 0x30
  while (fcn()) {
    8cbc:	ands	r4, r5
    8cbe:	beq.n	8cb0 <waitTransferComplete() [clone .part.0]+0x14>
  m_transferActive = false;
    8cc0:	ldr	r2, [pc, #72]	; (8d0c <waitTransferComplete() [clone .part.0]+0x70>)
    8cc2:	movs	r1, #0
  m_irqstat = SDHC_IRQSTAT;
    8cc4:	ldr	r3, [pc, #72]	; (8d10 <waitTransferComplete() [clone .part.0]+0x74>)
  m_transferActive = false;
    8cc6:	strb	r1, [r2, #0]
  m_irqstat = SDHC_IRQSTAT;
    8cc8:	ldr	r2, [r6, #48]	; 0x30
    8cca:	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    8ccc:	ldr	r1, [r3, #0]
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    8cce:	ldr	r2, [pc, #68]	; (8d14 <waitTransferComplete() [clone .part.0]+0x78>)
  SDHC_IRQSTAT = m_irqstat;
    8cd0:	str	r1, [r6, #48]	; 0x30
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    8cd2:	ldr	r3, [r3, #0]
    8cd4:	tst	r3, r2
    8cd6:	beq.n	8cec <waitTransferComplete() [clone .part.0]+0x50>
  m_errorCode = code;
    8cd8:	ldr	r1, [pc, #60]	; (8d18 <waitTransferComplete() [clone .part.0]+0x7c>)
    8cda:	movs	r4, #32
  m_errorLine = line;
    8cdc:	ldr	r3, [pc, #60]	; (8d1c <waitTransferComplete() [clone .part.0]+0x80>)
    8cde:	movw	r2, #682	; 0x2aa
    return sdError(SD_CARD_ERROR_TRANSFER_COMPLETE);
    8ce2:	movs	r0, #0
  m_errorCode = code;
    8ce4:	strb	r4, [r1, #0]
  m_errorLine = line;
    8ce6:	str	r2, [r3, #0]
}
    8ce8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return true;
    8cec:	movs	r0, #1
}
    8cee:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_transferActive = false;
    8cf2:	ldr	r2, [pc, #24]	; (8d0c <waitTransferComplete() [clone .part.0]+0x70>)
  m_irqstat = SDHC_IRQSTAT;
    8cf4:	ldr	r3, [pc, #24]	; (8d10 <waitTransferComplete() [clone .part.0]+0x74>)
  m_transferActive = false;
    8cf6:	strb	r4, [r2, #0]
  m_irqstat = SDHC_IRQSTAT;
    8cf8:	ldr	r2, [r6, #48]	; 0x30
    8cfa:	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    8cfc:	ldr	r3, [r3, #0]
    8cfe:	str	r3, [r6, #48]	; 0x30
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    8d00:	b.n	8cd8 <waitTransferComplete() [clone .part.0]+0x3c>
    8d02:	nop
    8d04:	.word	0x402c0000
    8d08:	.word	0x117f0002
    8d0c:	.word	0x20007b59
    8d10:	.word	0x20006400
    8d14:	.word	0x117f0000
    8d18:	.word	0x20001a44
    8d1c:	.word	0x20005c88
    8d20:	.word	0x000f4240

00008d24 <SdioCard::writeData(unsigned char const*)>:
//------------------------------------------------------------------------------
bool SdioCard::writeData(const uint8_t* src) {
    8d24:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (!m_transferActive) {
    8d28:	ldr	r4, [pc, #152]	; (8dc4 <SdioCard::writeData(unsigned char const*)+0xa0>)
bool SdioCard::writeData(const uint8_t* src) {
    8d2a:	mov	r7, r1
  if (!m_transferActive) {
    8d2c:	ldrb	r3, [r4, #0]
    8d2e:	cmp	r3, #0
    8d30:	bne.n	8da4 <SdioCard::writeData(unsigned char const*)+0x80>
  DBG_IRQSTAT();
  if (!waitTransferComplete()) {
    return false;
  }
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    8d32:	ldr	r3, [pc, #148]	; (8dc8 <SdioCard::writeData(unsigned char const*)+0xa4>)
    8d34:	ldr	r2, [r3, #36]	; 0x24
    8d36:	lsls	r2, r2, #23
    8d38:	bpl.n	8d92 <SdioCard::writeData(unsigned char const*)+0x6e>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    8d3a:	ldr	r5, [pc, #140]	; (8dc8 <SdioCard::writeData(unsigned char const*)+0xa4>)
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8d3c:	ldr.w	r8, [pc, #148]	; 8dd4 <SdioCard::writeData(unsigned char const*)+0xb0>
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    8d40:	ldr	r3, [r5, #40]	; 0x28
    8d42:	orr.w	r3, r3, #65536	; 0x10000
    8d46:	str	r3, [r5, #40]	; 0x28
  uint32_t m = micros();
    8d48:	bl	b86c <micros>
    8d4c:	mov	r6, r0
  while (fcn()) {
    8d4e:	b.n	8d5a <SdioCard::writeData(unsigned char const*)+0x36>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8d50:	bl	b86c <micros>
    8d54:	subs	r0, r0, r6
    8d56:	cmp	r0, r8
    8d58:	bhi.n	8db0 <SdioCard::writeData(unsigned char const*)+0x8c>
static bool isBusyFifoWrite() { return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN); }
    8d5a:	ldr	r3, [r5, #36]	; 0x24
  while (fcn()) {
    8d5c:	ands.w	r9, r3, #1024	; 0x400
    8d60:	beq.n	8d50 <SdioCard::writeData(unsigned char const*)+0x2c>
    8d62:	add.w	ip, r7, #60	; 0x3c
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0; iw < 512 / (4 * FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    8d66:	ldr	r0, [pc, #96]	; (8dc8 <SdioCard::writeData(unsigned char const*)+0xa4>)
    8d68:	add.w	r7, r7, #572	; 0x23c
    8d6c:	ldr	r3, [r0, #36]	; 0x24
    8d6e:	lsls	r3, r3, #21
    8d70:	bpl.n	8d6c <SdioCard::writeData(unsigned char const*)+0x48>
    8d72:	sub.w	r3, ip, #64	; 0x40
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      SDHC_DATPORT = p32[i];
    8d76:	ldr.w	r2, [r3, #4]!
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    8d7a:	cmp	ip, r3
      SDHC_DATPORT = p32[i];
    8d7c:	str	r2, [r0, #32]
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    8d7e:	bne.n	8d76 <SdioCard::writeData(unsigned char const*)+0x52>
  for (uint32_t iw = 0; iw < 512 / (4 * FIFO_WML); iw++) {
    8d80:	add.w	ip, ip, #64	; 0x40
    8d84:	cmp	ip, r7
    8d86:	bne.n	8d6c <SdioCard::writeData(unsigned char const*)+0x48>
    }
    p32 += FIFO_WML;
  }
  m_transferActive = true;
    8d88:	movs	r3, #1
  return true;
    8d8a:	mov	r0, r3
  m_transferActive = true;
    8d8c:	strb	r3, [r4, #0]
}
    8d8e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    8d92:	ldr	r2, [r3, #40]	; 0x28
    8d94:	bic.w	r2, r2, #65536	; 0x10000
    8d98:	str	r2, [r3, #40]	; 0x28
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    8d9a:	ldr	r2, [r3, #40]	; 0x28
    8d9c:	orr.w	r2, r2, #131072	; 0x20000
    8da0:	str	r2, [r3, #40]	; 0x28
    8da2:	b.n	8d3a <SdioCard::writeData(unsigned char const*)+0x16>
    8da4:	bl	8c9c <waitTransferComplete() [clone .part.0]>
  if (!waitTransferComplete()) {
    8da8:	cmp	r0, #0
    8daa:	bne.n	8d32 <SdioCard::writeData(unsigned char const*)+0xe>
}
    8dac:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  m_errorCode = code;
    8db0:	ldr	r1, [pc, #24]	; (8dcc <SdioCard::writeData(unsigned char const*)+0xa8>)
    8db2:	movs	r4, #34	; 0x22
  m_errorLine = line;
    8db4:	ldr	r3, [pc, #24]	; (8dd0 <SdioCard::writeData(unsigned char const*)+0xac>)
    8db6:	movw	r2, #1055	; 0x41f
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
    8dba:	mov	r0, r9
  m_errorCode = code;
    8dbc:	strb	r4, [r1, #0]
  m_errorLine = line;
    8dbe:	str	r2, [r3, #0]
}
    8dc0:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8dc4:	.word	0x20007b59
    8dc8:	.word	0x402c0000
    8dcc:	.word	0x20001a44
    8dd0:	.word	0x20005c88
    8dd4:	.word	0x000f4240

00008dd8 <cardCommand(unsigned long, unsigned long)>:
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    8dd8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8ddc:	mov	r7, r0
    8dde:	mov	r8, r1
static bool isBusyCommandInhibit() { return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB; }
    8de0:	ldr	r4, [pc, #124]	; (8e60 <cardCommand(unsigned long, unsigned long)+0x88>)
  uint32_t m = micros();
    8de2:	bl	b86c <micros>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8de6:	ldr	r6, [pc, #124]	; (8e64 <cardCommand(unsigned long, unsigned long)+0x8c>)
  uint32_t m = micros();
    8de8:	mov	r5, r0
  while (fcn()) {
    8dea:	b.n	8df6 <cardCommand(unsigned long, unsigned long)+0x1e>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8dec:	bl	b86c <micros>
    8df0:	subs	r3, r0, r5
    8df2:	cmp	r3, r6
    8df4:	bhi.n	8e40 <cardCommand(unsigned long, unsigned long)+0x68>
static bool isBusyCommandInhibit() { return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB; }
    8df6:	ldr	r3, [r4, #36]	; 0x24
  while (fcn()) {
    8df8:	lsls	r1, r3, #31
    8dfa:	bmi.n	8dec <cardCommand(unsigned long, unsigned long)+0x14>
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
    8dfc:	lsls	r3, r7, #10
  SDHC_CMDARG = arg;
    8dfe:	str.w	r8, [r4, #8]
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
    8e02:	bmi.n	8e46 <cardCommand(unsigned long, unsigned long)+0x6e>
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
    8e04:	bic.w	r3, r7, #255	; 0xff
  SDHC_XFERTYP = xfertyp;
    8e08:	ldr	r4, [pc, #84]	; (8e60 <cardCommand(unsigned long, unsigned long)+0x88>)
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
    8e0a:	ldr	r6, [pc, #92]	; (8e68 <cardCommand(unsigned long, unsigned long)+0x90>)
  SDHC_XFERTYP = xfertyp;
    8e0c:	str	r3, [r4, #12]
  uint32_t m = micros();
    8e0e:	bl	b86c <micros>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8e12:	ldr	r7, [pc, #80]	; (8e64 <cardCommand(unsigned long, unsigned long)+0x8c>)
  uint32_t m = micros();
    8e14:	mov	r5, r0
  while (fcn()) {
    8e16:	b.n	8e22 <cardCommand(unsigned long, unsigned long)+0x4a>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8e18:	bl	b86c <micros>
    8e1c:	subs	r0, r0, r5
    8e1e:	cmp	r0, r7
    8e20:	bhi.n	8e40 <cardCommand(unsigned long, unsigned long)+0x68>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
    8e22:	ldr	r3, [r4, #48]	; 0x30
  while (fcn()) {
    8e24:	tst	r3, r6
    8e26:	beq.n	8e18 <cardCommand(unsigned long, unsigned long)+0x40>
  m_irqstat = SDHC_IRQSTAT;
    8e28:	ldr	r2, [r4, #48]	; 0x30
    8e2a:	ldr	r3, [pc, #64]	; (8e6c <cardCommand(unsigned long, unsigned long)+0x94>)
    8e2c:	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    8e2e:	ldr	r2, [r3, #0]
    8e30:	str	r2, [r4, #48]	; 0x30
  return (m_irqstat & SDHC_IRQSTAT_CC) && !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
    8e32:	ldr	r2, [r3, #0]
    8e34:	lsls	r2, r2, #31
    8e36:	bpl.n	8e40 <cardCommand(unsigned long, unsigned long)+0x68>
    8e38:	ldr	r3, [r3, #0]
    8e3a:	tst.w	r3, #983040	; 0xf0000
    8e3e:	beq.n	8e58 <cardCommand(unsigned long, unsigned long)+0x80>
    8e40:	movs	r0, #0
}
    8e42:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    8e46:	ldr	r2, [r4, #72]	; 0x48
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
    8e48:	uxtb	r3, r7
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    8e4a:	bic.w	r2, r2, #255	; 0xff
    8e4e:	str	r2, [r4, #72]	; 0x48
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
    8e50:	ldr	r2, [r4, #72]	; 0x48
    8e52:	orrs	r3, r2
    8e54:	str	r3, [r4, #72]	; 0x48
    8e56:	b.n	8e04 <cardCommand(unsigned long, unsigned long)+0x2c>
  return (m_irqstat & SDHC_IRQSTAT_CC) && !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
    8e58:	movs	r0, #1
}
    8e5a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8e5e:	nop
    8e60:	.word	0x402c0000
    8e64:	.word	0x000f4240
    8e68:	.word	0x000f0001
    8e6c:	.word	0x20006400

00008e70 <readReg16(unsigned long, void*)>:
  if (!cardCommand(xfertyp, m_rca)) {
    8e70:	ldr	r3, [pc, #84]	; (8ec8 <readReg16(unsigned long, void*)+0x58>)
static bool readReg16(uint32_t xfertyp, void* data) {
    8e72:	push	{r4, r5, lr}
    8e74:	mov	r5, r1
    8e76:	sub	sp, #20
  if (!cardCommand(xfertyp, m_rca)) {
    8e78:	ldr	r1, [r3, #0]
    8e7a:	bl	8dd8 <cardCommand(unsigned long, unsigned long)>
    8e7e:	cbz	r0, 8ec4 <readReg16(unsigned long, void*)+0x54>
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
    8e80:	ldr	r3, [pc, #72]	; (8ecc <readReg16(unsigned long, void*)+0x5c>)
    8e82:	add.w	r4, r5, #15
    8e86:	ldr	r2, [r3, #16]
    8e88:	str	r2, [sp, #0]
    8e8a:	ldr	r1, [r3, #20]
    8e8c:	str	r1, [sp, #4]
    8e8e:	ldr	r1, [r3, #24]
    8e90:	str	r1, [sp, #8]
    8e92:	ldr	r3, [r3, #28]
    8e94:	str	r3, [sp, #12]
  for (int i = 0; i < 15; i++) {
    8e96:	movs	r3, #0
    8e98:	b.n	8e9e <readReg16(unsigned long, void*)+0x2e>
    d[14 - i] = sr[i / 4] >> 8 * (i % 4);
    8e9a:	ldr.w	r2, [lr, #-16]
    8e9e:	and.w	ip, r3, #3
  for (int i = 0; i < 15; i++) {
    8ea2:	adds	r3, #1
    d[14 - i] = sr[i / 4] >> 8 * (i % 4);
    8ea4:	mov.w	ip, ip, lsl #3
    8ea8:	bic.w	lr, r3, #3
  for (int i = 0; i < 15; i++) {
    8eac:	cmp	r3, #15
    d[14 - i] = sr[i / 4] >> 8 * (i % 4);
    8eae:	lsr.w	r2, r2, ip
    8eb2:	add.w	r1, lr, #16
    8eb6:	strb.w	r2, [r4, #-1]!
    8eba:	add.w	lr, sp, r1
  for (int i = 0; i < 15; i++) {
    8ebe:	bne.n	8e9a <readReg16(unsigned long, void*)+0x2a>
  d[15] = 0;
    8ec0:	movs	r3, #0
    8ec2:	strb	r3, [r5, #15]
}
    8ec4:	add	sp, #20
    8ec6:	pop	{r4, r5, pc}
    8ec8:	.word	0x200061b0
    8ecc:	.word	0x402c0000

00008ed0 <SdioCard::isBusy()>:
bool SdioCard::isBusy() {
    8ed0:	push	{r4, lr}
  bool useDma() { return m_options & DMA_SDIO; }
    8ed2:	ldrb	r3, [r0, #8]
  if (m_sdioConfig.useDma()) {
    8ed4:	lsls	r3, r3, #31
    8ed6:	bpl.n	8ee4 <SdioCard::isBusy()+0x14>
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    8ed8:	ldr	r3, [pc, #84]	; (8f30 <SdioCard::isBusy()+0x60>)
    8eda:	ldr	r3, [r3, #0]
    8edc:	cbz	r3, 8f0c <SdioCard::isBusy()+0x3c>
}
    8ede:	ldmia.w	sp!, {r4, lr}
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    8ee2:	bx	r3
    if (m_transferActive) {
    8ee4:	ldr	r3, [pc, #76]	; (8f34 <SdioCard::isBusy()+0x64>)
    8ee6:	ldrb	r3, [r3, #0]
    8ee8:	cbnz	r3, 8efa <SdioCard::isBusy()+0x2a>
    return SDHC_PRSSTAT & (1 << 24) ? false : true;
    8eea:	ldr	r3, [pc, #76]	; (8f38 <SdioCard::isBusy()+0x68>)
    8eec:	ldr	r4, [r3, #36]	; 0x24
    8eee:	eor.w	r4, r4, #16777216	; 0x1000000
    8ef2:	ubfx	r4, r4, #24, #1
}
    8ef6:	mov	r0, r4
    8ef8:	pop	{r4, pc}
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    8efa:	ldr	r3, [pc, #60]	; (8f38 <SdioCard::isBusy()+0x68>)
    8efc:	ldr	r4, [pc, #60]	; (8f3c <SdioCard::isBusy()+0x6c>)
    8efe:	ldr	r3, [r3, #48]	; 0x30
    8f00:	ands	r4, r3
      if (isBusyTransferComplete()) {
    8f02:	clz	r4, r4
    8f06:	lsrs	r4, r4, #5
}
    8f08:	mov	r0, r4
    8f0a:	pop	{r4, pc}
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    8f0c:	ldr	r3, [pc, #48]	; (8f40 <SdioCard::isBusy()+0x70>)
    8f0e:	ldrb	r4, [r3, #0]
    8f10:	cmp	r4, #0
    8f12:	beq.n	8ef6 <SdioCard::isBusy()+0x26>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    8f14:	ldr	r3, [pc, #44]	; (8f44 <SdioCard::isBusy()+0x74>)
    8f16:	ldr	r0, [pc, #48]	; (8f48 <SdioCard::isBusy()+0x78>)
    8f18:	ldr	r1, [r3, #0]
    8f1a:	bl	8dd8 <cardCommand(unsigned long, unsigned long)>
    8f1e:	cmp	r0, #0
    8f20:	beq.n	8ef6 <SdioCard::isBusy()+0x26>
    8f22:	ldr	r3, [pc, #20]	; (8f38 <SdioCard::isBusy()+0x68>)
    8f24:	ldr	r4, [r3, #16]
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    8f26:	eor.w	r4, r4, #256	; 0x100
    8f2a:	ubfx	r4, r4, #8, #1
    8f2e:	b.n	8ef6 <SdioCard::isBusy()+0x26>
    8f30:	.word	0x200063fc
    8f34:	.word	0x20007b59
    8f38:	.word	0x402c0000
    8f3c:	.word	0x117f0002
    8f40:	.word	0x20007b56
    8f44:	.word	0x200061b0
    8f48:	.word	0x0d1a0000

00008f4c <SdioCard::status()>:
uint32_t SdioCard::status() { return statusCMD13(); }
    8f4c:	push	{r3, lr}
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    8f4e:	ldr	r3, [pc, #16]	; (8f60 <SdioCard::status()+0x14>)
    8f50:	ldr	r0, [pc, #16]	; (8f64 <SdioCard::status()+0x18>)
    8f52:	ldr	r1, [r3, #0]
    8f54:	bl	8dd8 <cardCommand(unsigned long, unsigned long)>
    8f58:	cbz	r0, 8f5e <SdioCard::status()+0x12>
    8f5a:	ldr	r3, [pc, #12]	; (8f68 <SdioCard::status()+0x1c>)
    8f5c:	ldr	r0, [r3, #16]
uint32_t SdioCard::status() { return statusCMD13(); }
    8f5e:	pop	{r3, pc}
    8f60:	.word	0x200061b0
    8f64:	.word	0x0d1a0000
    8f68:	.word	0x402c0000

00008f6c <isBusyCMD13()>:
static bool isBusyCMD13() {
    8f6c:	push	{r3, lr}
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    8f6e:	ldr	r3, [pc, #28]	; (8f8c <isBusyCMD13()+0x20>)
    8f70:	ldr	r0, [pc, #28]	; (8f90 <isBusyCMD13()+0x24>)
    8f72:	ldr	r1, [r3, #0]
    8f74:	bl	8dd8 <cardCommand(unsigned long, unsigned long)>
    8f78:	cbz	r0, 8f88 <isBusyCMD13()+0x1c>
    8f7a:	ldr	r3, [pc, #24]	; (8f94 <isBusyCMD13()+0x28>)
    8f7c:	ldr	r0, [r3, #16]
  return !(statusCMD13() & CARD_STATUS_READY_FOR_DATA);
    8f7e:	eor.w	r0, r0, #256	; 0x100
    8f82:	ubfx	r0, r0, #8, #1
}
    8f86:	pop	{r3, pc}
    8f88:	movs	r0, #1
    8f8a:	pop	{r3, pc}
    8f8c:	.word	0x200061b0
    8f90:	.word	0x0d1a0000
    8f94:	.word	0x402c0000

00008f98 <SdioCard::writeStart(unsigned long)>:
    }
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
    8f98:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  m_busyFcn = fcn;
    8f9c:	ldr	r3, [pc, #164]	; (9044 <SdioCard::writeStart(unsigned long)+0xac>)
bool SdioCard::writeStart(uint32_t sector) {
    8f9e:	mov	r9, r1
  m_busyFcn = fcn;
    8fa0:	ldr.w	sl, [pc, #192]	; 9064 <SdioCard::writeStart(unsigned long)+0xcc>
    8fa4:	ldr	r6, [pc, #160]	; (9048 <SdioCard::writeStart(unsigned long)+0xb0>)
    8fa6:	str.w	r3, [sl]
  uint32_t m = micros();
    8faa:	bl	b86c <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    8fae:	ldr	r5, [pc, #156]	; (904c <SdioCard::writeStart(unsigned long)+0xb4>)
  uint32_t m = micros();
    8fb0:	mov	r4, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    8fb2:	ldr.w	r8, [pc, #180]	; 9068 <SdioCard::writeStart(unsigned long)+0xd0>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8fb6:	ldr	r7, [pc, #152]	; (9050 <SdioCard::writeStart(unsigned long)+0xb8>)
  while (fcn()) {
    8fb8:	b.n	8fc8 <SdioCard::writeStart(unsigned long)+0x30>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8fba:	bl	b86c <micros>
    8fbe:	subs	r0, r0, r4
    8fc0:	cmp	r0, r7
    8fc2:	bhi.n	9018 <SdioCard::writeStart(unsigned long)+0x80>
    yield();
    8fc4:	bl	c0d4 <yield>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    8fc8:	ldr	r1, [r6, #0]
    8fca:	mov	r0, r5
    8fcc:	bl	8dd8 <cardCommand(unsigned long, unsigned long)>
    8fd0:	cmp	r0, #0
    8fd2:	beq.n	8fba <SdioCard::writeStart(unsigned long)+0x22>
    8fd4:	ldr.w	r3, [r8, #16]
  while (fcn()) {
    8fd8:	lsls	r3, r3, #23
    8fda:	bpl.n	8fba <SdioCard::writeStart(unsigned long)+0x22>
  m_busyFcn = 0;
    8fdc:	movs	r3, #0
  }
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;

#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    8fde:	mov.w	r2, #512	; 0x200
  m_busyFcn = 0;
    8fe2:	str.w	r3, [sl]
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    8fe6:	ldr.w	r3, [r8, #40]	; 0x28
    8fea:	bic.w	r3, r3, #65536	; 0x10000
    8fee:	str.w	r3, [r8, #40]	; 0x28
#else   // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(MAX_BLKCNT) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512 * sector)) {
    8ff2:	ldr	r3, [pc, #96]	; (9054 <SdioCard::writeStart(unsigned long)+0xbc>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    8ff4:	str.w	r2, [r8, #4]
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512 * sector)) {
    8ff8:	ldrb	r3, [r3, #0]
    8ffa:	cbz	r3, 9030 <SdioCard::writeStart(unsigned long)+0x98>
    8ffc:	mov	r1, r9
    8ffe:	ldr	r0, [pc, #88]	; (9058 <SdioCard::writeStart(unsigned long)+0xc0>)
    9000:	bl	8dd8 <cardCommand(unsigned long, unsigned long)>
    9004:	cbnz	r0, 9014 <SdioCard::writeStart(unsigned long)+0x7c>
  m_errorCode = code;
    9006:	ldr	r1, [pc, #84]	; (905c <SdioCard::writeStart(unsigned long)+0xc4>)
    9008:	movs	r4, #14
  m_errorLine = line;
    900a:	ldr	r3, [pc, #84]	; (9060 <SdioCard::writeStart(unsigned long)+0xc8>)
    900c:	movw	r2, #1150	; 0x47e
  m_errorCode = code;
    9010:	strb	r4, [r1, #0]
  m_errorLine = line;
    9012:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD25);
  }
  return true;
}
    9014:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_errorCode = code;
    9018:	ldr	r2, [pc, #64]	; (905c <SdioCard::writeStart(unsigned long)+0xc4>)
    901a:	movs	r1, #10
      m_busyFcn = 0;
    901c:	movs	r0, #0
  m_errorLine = line;
    901e:	ldr	r3, [pc, #64]	; (9060 <SdioCard::writeStart(unsigned long)+0xc8>)
  m_errorCode = code;
    9020:	strb	r1, [r2, #0]
  m_errorLine = line;
    9022:	movw	r2, #1138	; 0x472
      m_busyFcn = 0;
    9026:	str.w	r0, [sl]
  m_errorLine = line;
    902a:	str	r2, [r3, #0]
}
    902c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512 * sector)) {
    9030:	mov.w	r9, r9, lsl #9
    9034:	ldr	r0, [pc, #32]	; (9058 <SdioCard::writeStart(unsigned long)+0xc0>)
    9036:	mov	r1, r9
    9038:	bl	8dd8 <cardCommand(unsigned long, unsigned long)>
    903c:	cmp	r0, #0
    903e:	bne.n	9014 <SdioCard::writeStart(unsigned long)+0x7c>
    9040:	b.n	9006 <SdioCard::writeStart(unsigned long)+0x6e>
    9042:	nop
    9044:	.word	0x00008f6d
    9048:	.word	0x200061b0
    904c:	.word	0x0d1a0000
    9050:	.word	0x000f4240
    9054:	.word	0x20007b58
    9058:	.word	0x193a0020
    905c:	.word	0x20001a44
    9060:	.word	0x20005c88
    9064:	.word	0x200063fc
    9068:	.word	0x402c0000

0000906c <SdioCard::cardCMD6(unsigned long, unsigned char*)>:
bool SdioCard::cardCMD6(uint32_t arg, uint8_t* status) {
    906c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9070:	mov	sl, r1
    9072:	mov	r9, r2
    9074:	ldr	r6, [pc, #144]	; (9108 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x9c>)
  uint32_t m = micros();
    9076:	bl	b86c <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    907a:	ldr	r5, [pc, #144]	; (910c <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xa0>)
  uint32_t m = micros();
    907c:	mov	r4, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    907e:	ldr.w	r8, [pc, #176]	; 9130 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xc4>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    9082:	ldr	r7, [pc, #140]	; (9110 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xa4>)
  while (fcn()) {
    9084:	b.n	9090 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x24>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    9086:	bl	b86c <micros>
    908a:	subs	r0, r0, r4
    908c:	cmp	r0, r7
    908e:	bhi.n	90dc <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x70>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    9090:	ldr	r1, [r6, #0]
    9092:	mov	r0, r5
    9094:	bl	8dd8 <cardCommand(unsigned long, unsigned long)>
    9098:	cmp	r0, #0
    909a:	beq.n	9086 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x1a>
    909c:	ldr.w	r3, [r8, #16]
  while (fcn()) {
    90a0:	lsls	r3, r3, #23
    90a2:	bpl.n	9086 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x1a>
  m_dmaBusy = true;
    90a4:	ldr	r3, [pc, #108]	; (9114 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xa8>)
    90a6:	movs	r2, #1
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    90a8:	mov	r1, sl
    90aa:	ldr	r0, [pc, #108]	; (9118 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xac>)
  m_dmaBusy = true;
    90ac:	strb	r2, [r3, #0]
  m_irqstat = 0;
    90ae:	movs	r2, #0
    90b0:	ldr	r3, [pc, #104]	; (911c <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xb0>)
    90b2:	str	r2, [r3, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    90b4:	ldr	r2, [pc, #104]	; (9120 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xb4>)
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    90b6:	ldr	r3, [pc, #108]	; (9124 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xb8>)
  SDHC_DSADDR = (uint32_t)status;
    90b8:	str.w	r9, [r8]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    90bc:	str.w	r2, [r8, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    90c0:	str.w	r3, [r8, #56]	; 0x38
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    90c4:	bl	8dd8 <cardCommand(unsigned long, unsigned long)>
    90c8:	cbnz	r0, 90f0 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x84>
  m_errorCode = code;
    90ca:	ldr	r1, [pc, #92]	; (9128 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xbc>)
    90cc:	movs	r4, #4
  m_errorLine = line;
    90ce:	ldr	r3, [pc, #92]	; (912c <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xc0>)
    90d0:	movw	r2, #795	; 0x31b
  m_errorCode = code;
    90d4:	strb	r4, [r1, #0]
  m_errorLine = line;
    90d6:	str	r2, [r3, #0]
}
    90d8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_errorCode = code;
    90dc:	ldr	r1, [pc, #72]	; (9128 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xbc>)
    90de:	movs	r4, #10
  m_errorLine = line;
    90e0:	ldr	r3, [pc, #72]	; (912c <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xc0>)
    90e2:	mov.w	r2, #788	; 0x314
    return sdError(SD_CARD_ERROR_CMD13);
    90e6:	movs	r0, #0
  m_errorCode = code;
    90e8:	strb	r4, [r1, #0]
  m_errorLine = line;
    90ea:	str	r2, [r3, #0]
}
    90ec:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (!waitDmaStatus()) {
    90f0:	bl	8c34 <waitDmaStatus()>
    90f4:	cmp	r0, #0
    90f6:	bne.n	90ec <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x80>
  m_errorCode = code;
    90f8:	ldr	r1, [pc, #44]	; (9128 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xbc>)
    90fa:	movs	r4, #38	; 0x26
  m_errorLine = line;
    90fc:	ldr	r3, [pc, #44]	; (912c <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xc0>)
    90fe:	movw	r2, #798	; 0x31e
  m_errorCode = code;
    9102:	strb	r4, [r1, #0]
  m_errorLine = line;
    9104:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_DMA);
    9106:	b.n	90ec <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x80>
    9108:	.word	0x200061b0
    910c:	.word	0x0d1a0000
    9110:	.word	0x000f4240
    9114:	.word	0x20007b5a
    9118:	.word	0x063a0011
    911c:	.word	0x20006400
    9120:	.word	0x00010040
    9124:	.word	0x117f0002
    9128:	.word	0x20001a44
    912c:	.word	0x20005c88
    9130:	.word	0x402c0000

00009134 <SdioCard::readStop()>:
bool SdioCard::readStop() { return transferStop(); }
    9134:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    9138:	ldr	r4, [pc, #148]	; (91d0 <SdioCard::readStop()+0x9c>)
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    913a:	movs	r1, #0
    913c:	ldr	r0, [pc, #148]	; (91d4 <SdioCard::readStop()+0xa0>)
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    913e:	ldr	r3, [r4, #40]	; 0x28
    9140:	bic.w	r3, r3, #65536	; 0x10000
    9144:	str	r3, [r4, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    9146:	bl	8dd8 <cardCommand(unsigned long, unsigned long)>
    914a:	mov	r5, r0
    914c:	cbnz	r0, 9162 <SdioCard::readStop()+0x2e>
  m_errorCode = code;
    914e:	ldr	r1, [pc, #136]	; (91d8 <SdioCard::readStop()+0xa4>)
    9150:	movs	r0, #9
  m_errorLine = line;
    9152:	ldr	r3, [pc, #136]	; (91dc <SdioCard::readStop()+0xa8>)
    9154:	movw	r2, #621	; 0x26d
  m_errorCode = code;
    9158:	strb	r0, [r1, #0]
  m_errorLine = line;
    915a:	str	r2, [r3, #0]
bool SdioCard::readStop() { return transferStop(); }
    915c:	mov	r0, r5
    915e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_busyFcn = fcn;
    9162:	ldr	r3, [pc, #124]	; (91e0 <SdioCard::readStop()+0xac>)
    9164:	ldr.w	r8, [pc, #128]	; 91e8 <SdioCard::readStop()+0xb4>
    9168:	str.w	r3, [r8]
  uint32_t m = micros();
    916c:	bl	b86c <micros>
static bool isBusyDat() { return SDHC_PRSSTAT & (1 << 24) ? false : true; }
    9170:	ldr	r3, [r4, #36]	; 0x24
  uint32_t m = micros();
    9172:	mov	r6, r0
  while (fcn()) {
    9174:	lsls	r0, r3, #7
    9176:	bmi.n	91aa <SdioCard::readStop()+0x76>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    9178:	ldr	r7, [pc, #104]	; (91e4 <SdioCard::readStop()+0xb0>)
    917a:	b.n	9186 <SdioCard::readStop()+0x52>
    yield();
    917c:	bl	c0d4 <yield>
static bool isBusyDat() { return SDHC_PRSSTAT & (1 << 24) ? false : true; }
    9180:	ldr	r3, [r4, #36]	; 0x24
  while (fcn()) {
    9182:	lsls	r1, r3, #7
    9184:	bmi.n	91aa <SdioCard::readStop()+0x76>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    9186:	bl	b86c <micros>
    918a:	subs	r3, r0, r6
    918c:	cmp	r3, r7
    918e:	bls.n	917c <SdioCard::readStop()+0x48>
  m_errorCode = code;
    9190:	ldr	r2, [pc, #68]	; (91d8 <SdioCard::readStop()+0xa4>)
    9192:	movs	r1, #10
      m_busyFcn = 0;
    9194:	movs	r5, #0
  m_errorLine = line;
    9196:	ldr	r3, [pc, #68]	; (91dc <SdioCard::readStop()+0xa8>)
  m_errorCode = code;
    9198:	strb	r1, [r2, #0]
  m_errorLine = line;
    919a:	mov.w	r2, #624	; 0x270
bool SdioCard::readStop() { return transferStop(); }
    919e:	mov	r0, r5
      m_busyFcn = 0;
    91a0:	str.w	r5, [r8]
  m_errorLine = line;
    91a4:	str	r2, [r3, #0]
bool SdioCard::readStop() { return transferStop(); }
    91a6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_busyFcn = 0;
    91aa:	movs	r2, #0
  if (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB) {
    91ac:	ldr	r3, [pc, #32]	; (91d0 <SdioCard::readStop()+0x9c>)
  m_busyFcn = 0;
    91ae:	str.w	r2, [r8]
  if (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB) {
    91b2:	ldr	r2, [r3, #36]	; 0x24
    91b4:	lsls	r2, r2, #30
    91b6:	bpl.n	915c <SdioCard::readStop()+0x28>
    uint32_t irqsststen = SDHC_IRQSTATEN;
    91b8:	ldr	r0, [r3, #52]	; 0x34
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    91ba:	ldr	r2, [r3, #40]	; 0x28
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    91bc:	ldr	r1, [r3, #44]	; 0x2c
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    91be:	bic.w	r2, r2, #65536	; 0x10000
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    91c2:	orr.w	r1, r1, #67108864	; 0x4000000
    91c6:	str	r1, [r3, #44]	; 0x2c
    SDHC_IRQSTATEN = irqsststen;
    91c8:	str	r0, [r3, #52]	; 0x34
    SDHC_PROCTL = proctl;
    91ca:	str	r2, [r3, #40]	; 0x28
    91cc:	b.n	915c <SdioCard::readStop()+0x28>
    91ce:	nop
    91d0:	.word	0x402c0000
    91d4:	.word	0x0cdb0000
    91d8:	.word	0x20001a44
    91dc:	.word	0x20005c88
    91e0:	.word	0x00008a01
    91e4:	.word	0x000f4240
    91e8:	.word	0x200063fc

000091ec <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>:
                        size_t n) {
    91ec:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    91f0:	mov	r4, r2
  if ((3 & (uint32_t)buf) || n == 0) {
    91f2:	ands.w	r2, r2, #3
                        size_t n) {
    91f6:	sub	sp, #12
  if ((3 & (uint32_t)buf) || n == 0) {
    91f8:	it	ne
    91fa:	movne	r2, #1
    91fc:	str	r3, [sp, #4]
    91fe:	cmp	r3, #0
    9200:	it	eq
    9202:	orreq.w	r2, r2, #1
    9206:	cbz	r2, 921e <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x32>
  m_errorCode = code;
    9208:	ldr	r1, [pc, #184]	; (92c4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xd8>)
    920a:	movs	r0, #38	; 0x26
  m_errorLine = line;
    920c:	ldr	r3, [pc, #184]	; (92c8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xdc>)
    920e:	movw	r2, #547	; 0x223
  m_errorCode = code;
    9212:	strb	r0, [r1, #0]
  m_errorLine = line;
    9214:	str	r2, [r3, #0]
}
    9216:	movs	r0, #0
    9218:	add	sp, #12
    921a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  m_busyFcn = fcn;
    921e:	ldr	r3, [pc, #172]	; (92cc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xe0>)
    9220:	mov	r6, r0
    9222:	ldr	r2, [pc, #172]	; (92d0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xe4>)
    9224:	mov	r5, r1
    9226:	ldr.w	r9, [pc, #192]	; 92e8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xfc>
    922a:	str	r3, [r2, #0]
  uint32_t m = micros();
    922c:	bl	b86c <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    9230:	ldr.w	r8, [pc, #184]	; 92ec <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x100>
  uint32_t m = micros();
    9234:	mov	r7, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    9236:	ldr.w	fp, [pc, #184]	; 92f0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x104>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    923a:	ldr.w	sl, [pc, #184]	; 92f4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x108>
  while (fcn()) {
    923e:	b.n	924e <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x62>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    9240:	bl	b86c <micros>
    9244:	subs	r0, r0, r7
    9246:	cmp	r0, sl
    9248:	bhi.n	92aa <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xbe>
    yield();
    924a:	bl	c0d4 <yield>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    924e:	ldr.w	r1, [r9]
    9252:	mov	r0, r8
    9254:	bl	8dd8 <cardCommand(unsigned long, unsigned long)>
    9258:	cmp	r0, #0
    925a:	beq.n	9240 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x54>
    925c:	ldr.w	r3, [fp, #16]
  while (fcn()) {
    9260:	lsls	r3, r3, #23
    9262:	bpl.n	9240 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x54>
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    9264:	ldr	r2, [sp, #4]
  m_dmaBusy = true;
    9266:	movs	r0, #1
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    9268:	ldr	r3, [pc, #104]	; (92d4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xe8>)
  m_busyFcn = 0;
    926a:	ldr	r1, [pc, #100]	; (92d0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xe4>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    926c:	and.w	r3, r3, r2, lsl #16
  m_busyFcn = 0;
    9270:	movs	r2, #0
    9272:	str	r2, [r1, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    9274:	orr.w	r3, r3, #512	; 0x200
  m_dmaBusy = true;
    9278:	ldr	r1, [pc, #92]	; (92d8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xec>)
    927a:	strb	r0, [r1, #0]
  m_irqstat = 0;
    927c:	ldr	r1, [pc, #92]	; (92dc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xf0>)
    927e:	str	r2, [r1, #0]
  SDHC_DSADDR = (uint32_t)buf;
    9280:	str.w	r4, [fp]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    9284:	str.w	r3, [fp, #4]
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512 * sector)) {
    9288:	ldr	r3, [pc, #84]	; (92e0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xf4>)
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    928a:	ldr	r2, [pc, #88]	; (92e4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xf8>)
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512 * sector)) {
    928c:	ldrb	r3, [r3, #0]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    928e:	str.w	r2, [fp, #56]	; 0x38
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512 * sector)) {
    9292:	cbz	r3, 92c0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xd4>
    9294:	mov	r1, r5
    9296:	mov	r0, r6
    9298:	bl	8dd8 <cardCommand(unsigned long, unsigned long)>
    929c:	cmp	r0, #0
    929e:	beq.n	9216 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2a>
}
    92a0:	add	sp, #12
    92a2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  return waitDmaStatus();
    92a6:	b.w	8c34 <waitDmaStatus()>
  m_errorCode = code;
    92aa:	ldr	r2, [pc, #24]	; (92c4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xd8>)
    92ac:	movs	r1, #10
      m_busyFcn = 0;
    92ae:	movs	r0, #0
  m_errorLine = line;
    92b0:	ldr	r3, [pc, #20]	; (92c8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xdc>)
      m_busyFcn = 0;
    92b2:	ldr	r4, [pc, #28]	; (92d0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xe4>)
  m_errorCode = code;
    92b4:	strb	r1, [r2, #0]
  m_errorLine = line;
    92b6:	movw	r2, #550	; 0x226
      m_busyFcn = 0;
    92ba:	str	r0, [r4, #0]
  m_errorLine = line;
    92bc:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD13);
    92be:	b.n	9216 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2a>
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512 * sector)) {
    92c0:	lsls	r5, r5, #9
    92c2:	b.n	9294 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xa8>
    92c4:	.word	0x20001a44
    92c8:	.word	0x20005c88
    92cc:	.word	0x00008f6d
    92d0:	.word	0x200063fc
    92d4:	.word	0x1fff0000
    92d8:	.word	0x20007b5a
    92dc:	.word	0x20006400
    92e0:	.word	0x20007b58
    92e4:	.word	0x117f0002
    92e8:	.word	0x200061b0
    92ec:	.word	0x0d1a0000
    92f0:	.word	0x402c0000
    92f4:	.word	0x000f4240

000092f8 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    92f8:	push	{r3, r4, r5, r6, r7, lr}
    92fa:	mov	r6, r0
    92fc:	ldrb	r0, [r0, #8]
    92fe:	mov	r4, r1
    9300:	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    9302:	lsls	r0, r0, #31
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    9304:	mov	r7, r3
  if (m_sdioConfig.useDma()) {
    9306:	bmi.n	9330 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x38>
    for (size_t i = 0; i < n; i++) {
    9308:	cbz	r3, 932c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    930a:	add	r7, r1
    930c:	b.n	9312 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x1a>
    930e:	cmp	r4, r7
    9310:	beq.n	932c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
      if (!readSector(sector + i, dst + i * 512UL)) {
    9312:	ldr	r3, [r6, #0]
    9314:	mov	r2, r5
    9316:	mov	r1, r4
    9318:	mov	r0, r6
    931a:	ldr	r3, [r3, #16]
    for (size_t i = 0; i < n; i++) {
    931c:	adds	r4, #1
    931e:	add.w	r5, r5, #512	; 0x200
      if (!readSector(sector + i, dst + i * 512UL)) {
    9322:	blx	r3
    9324:	cmp	r0, #0
    9326:	bne.n	930e <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x16>
          return false;  // readSector will set errorCode.
    9328:	movs	r0, #0
}
    932a:	pop	{r3, r4, r5, r6, r7, pc}
  return true;
    932c:	movs	r0, #1
}
    932e:	pop	{r3, r4, r5, r6, r7, pc}
    if ((uint32_t)dst & 3) {
    9330:	lsls	r0, r2, #30
    9332:	beq.n	935a <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x62>
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    9334:	cmp	r3, #0
    9336:	beq.n	932c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    9338:	add	r7, r1
    933a:	b.n	9340 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x48>
    933c:	cmp	r4, r7
    933e:	beq.n	932c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
        if (!readSector(sector, dst)) {
    9340:	ldr	r3, [r6, #0]
    9342:	mov	r2, r5
    9344:	mov	r1, r4
    9346:	mov	r0, r6
    9348:	ldr	r3, [r3, #16]
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    934a:	adds	r4, #1
    934c:	add.w	r5, r5, #512	; 0x200
        if (!readSector(sector, dst)) {
    9350:	blx	r3
    9352:	cmp	r0, #0
    9354:	bne.n	933c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x44>
          return false;  // readSector will set errorCode.
    9356:	movs	r0, #0
    9358:	b.n	932a <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x32>
    if (!rdWrSectors(CMD18_DMA_XFERTYP, sector, dst, n)) {
    935a:	ldr	r0, [pc, #24]	; (9374 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x7c>)
    935c:	bl	91ec <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    9360:	cmp	r0, #0
    9362:	bne.n	932c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
  m_errorCode = code;
    9364:	ldr	r1, [pc, #16]	; (9378 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x80>)
    9366:	movs	r4, #12
  m_errorLine = line;
    9368:	ldr	r3, [pc, #16]	; (937c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x84>)
    936a:	movw	r2, #974	; 0x3ce
  m_errorCode = code;
    936e:	strb	r4, [r1, #0]
  m_errorLine = line;
    9370:	str	r2, [r3, #0]
}
    9372:	pop	{r3, r4, r5, r6, r7, pc}
    9374:	.word	0x123a0037
    9378:	.word	0x20001a44
    937c:	.word	0x20005c88

00009380 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    9380:	push	{r3, r4, r5, r6, r7, lr}
    9382:	mov	r6, r0
    9384:	ldrb	r0, [r0, #8]
    9386:	mov	r4, r1
    9388:	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    938a:	lsls	r0, r0, #31
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    938c:	mov	r7, r3
  if (m_sdioConfig.useDma()) {
    938e:	bmi.n	93b8 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x38>
    for (size_t i = 0; i < n; i++) {
    9390:	cbz	r3, 93b4 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    9392:	add	r7, r1
    9394:	b.n	939a <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x1a>
    9396:	cmp	r4, r7
    9398:	beq.n	93b4 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
      if (!writeSector(sector + i, src + i * 512UL)) {
    939a:	ldr	r3, [r6, #0]
    939c:	mov	r2, r5
    939e:	mov	r1, r4
    93a0:	mov	r0, r6
    93a2:	ldr	r3, [r3, #32]
    for (size_t i = 0; i < n; i++) {
    93a4:	adds	r4, #1
    93a6:	add.w	r5, r5, #512	; 0x200
      if (!writeSector(sector + i, src + i * 512UL)) {
    93aa:	blx	r3
    93ac:	cmp	r0, #0
    93ae:	bne.n	9396 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x16>
          return false;  // writeSector will set errorCode.
    93b0:	movs	r0, #0
}
    93b2:	pop	{r3, r4, r5, r6, r7, pc}
  return true;
    93b4:	movs	r0, #1
}
    93b6:	pop	{r3, r4, r5, r6, r7, pc}
    if (3 & (uint32_t)ptr) {
    93b8:	lsls	r0, r2, #30
    93ba:	beq.n	93e2 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x62>
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    93bc:	cmp	r3, #0
    93be:	beq.n	93b4 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    93c0:	add	r7, r1
    93c2:	b.n	93c8 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x48>
    93c4:	cmp	r4, r7
    93c6:	beq.n	93b4 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
        if (!writeSector(sector, ptr)) {
    93c8:	ldr	r3, [r6, #0]
    93ca:	mov	r2, r5
    93cc:	mov	r1, r4
    93ce:	mov	r0, r6
    93d0:	ldr	r3, [r3, #32]
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    93d2:	adds	r4, #1
    93d4:	add.w	r5, r5, #512	; 0x200
        if (!writeSector(sector, ptr)) {
    93d8:	blx	r3
    93da:	cmp	r0, #0
    93dc:	bne.n	93c4 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x44>
          return false;  // writeSector will set errorCode.
    93de:	movs	r0, #0
    93e0:	b.n	93b2 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x32>
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
    93e2:	ldr	r0, [pc, #24]	; (93fc <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x7c>)
    93e4:	bl	91ec <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    93e8:	cmp	r0, #0
    93ea:	bne.n	93b4 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
  m_errorCode = code;
    93ec:	ldr	r1, [pc, #16]	; (9400 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x80>)
    93ee:	movs	r4, #14
  m_errorLine = line;
    93f0:	ldr	r3, [pc, #16]	; (9404 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x84>)
    93f2:	movw	r2, #1124	; 0x464
  m_errorCode = code;
    93f6:	strb	r4, [r1, #0]
  m_errorLine = line;
    93f8:	str	r2, [r3, #0]
}
    93fa:	pop	{r3, r4, r5, r6, r7, pc}
    93fc:	.word	0x193a0027
    9400:	.word	0x20001a44
    9404:	.word	0x20005c88

00009408 <SdioCard::begin(SdioConfig)>:
  m_curState = IDLE_STATE;
    9408:	movs	r2, #0
  m_initDone = false;
    940a:	ldr	r3, [pc, #708]	; (96d0 <SdioCard::begin(SdioConfig)+0x2c8>)
bool SdioCard::begin(SdioConfig sdioConfig) {
    940c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  m_initDone = false;
    9410:	strb	r2, [r3, #0]
bool SdioCard::begin(SdioConfig sdioConfig) {
    9412:	mov	r6, r0
  CCM_ANALOG_PFD_528 |= (1 << 7);
    9414:	ldr	r3, [pc, #700]	; (96d4 <SdioCard::begin(SdioConfig)+0x2cc>)
bool SdioCard::begin(SdioConfig sdioConfig) {
    9416:	sub	sp, #76	; 0x4c
  m_errorCode = SD_CARD_ERROR_NONE;
    9418:	ldr	r4, [pc, #700]	; (96d8 <SdioCard::begin(SdioConfig)+0x2d0>)
  m_highCapacity = false;
    941a:	ldr.w	sl, [pc, #788]	; 9730 <SdioCard::begin(SdioConfig)+0x328>
  m_version2 = false;
    941e:	ldr	r7, [pc, #700]	; (96dc <SdioCard::begin(SdioConfig)+0x2d4>)
  m_errorCode = SD_CARD_ERROR_NONE;
    9420:	strb	r2, [r4, #0]
  m_curState = IDLE_STATE;
    9422:	strb	r2, [r0, #9]
  m_highCapacity = false;
    9424:	strb.w	r2, [sl]
  m_version2 = false;
    9428:	strb	r2, [r7, #0]
  CCM_ANALOG_PFD_528 |= (1 << 7);
    942a:	ldr.w	r2, [r3, #256]	; 0x100
  m_sdioConfig = sdioConfig;
    942e:	strb	r1, [r0, #8]
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    9430:	movs	r1, #5
  CCM_ANALOG_PFD_528 |= (1 << 7);
    9432:	orr.w	r2, r2, #128	; 0x80
  SDHC_MIX_CTRL |= 0x80000000;
    9436:	ldr.w	r8, [pc, #704]	; 96f8 <SdioCard::begin(SdioConfig)+0x2f0>
  CCM_ANALOG_PFD_528 |= (1 << 7);
    943a:	str.w	r2, [r3, #256]	; 0x100
  CCM_ANALOG_PFD_528 &= ~(0x3F << 0);
    943e:	ldr.w	r2, [r3, #256]	; 0x100
    9442:	bic.w	r2, r2, #63	; 0x3f
    9446:	str.w	r2, [r3, #256]	; 0x100
  CCM_ANALOG_PFD_528 |= ((24) & 0x3F << 0);  // 12 - 35
    944a:	ldr.w	r2, [r3, #256]	; 0x100
    944e:	orr.w	r2, r2, #24
    9452:	str.w	r2, [r3, #256]	; 0x100
  CCM_ANALOG_PFD_528 &= ~(1 << 7);
    9456:	ldr.w	r2, [r3, #256]	; 0x100
    945a:	bic.w	r2, r2, #128	; 0x80
    945e:	str.w	r2, [r3, #256]	; 0x100
  CCM_CCGR6 |= CCM_CCGR6_USDHC1(CCM_CCGR_ON);
    9462:	add.w	r3, r3, #147456	; 0x24000
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    9466:	ldr	r2, [pc, #632]	; (96e0 <SdioCard::begin(SdioConfig)+0x2d8>)
  CCM_CCGR6 |= CCM_CCGR6_USDHC1(CCM_CCGR_ON);
    9468:	ldr.w	r0, [r3, #128]	; 0x80
    946c:	orr.w	r0, r0, #12
    9470:	str.w	r0, [r3, #128]	; 0x80
  CCM_CSCDR1 &= ~(CCM_CSCDR1_USDHC1_CLK_PODF_MASK);
    9474:	ldr	r0, [r3, #36]	; 0x24
    9476:	bic.w	r0, r0, #14336	; 0x3800
    947a:	str	r0, [r3, #36]	; 0x24
  CCM_CSCMR1 |= CCM_CSCMR1_USDHC1_CLK_SEL;  // PLL2PFD0
    947c:	ldr	r0, [r3, #28]
    947e:	orr.w	r0, r0, #65536	; 0x10000
    9482:	str	r0, [r3, #28]
  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((1));
    9484:	ldr	r0, [r3, #36]	; 0x24
    9486:	orr.w	r0, r0, #2048	; 0x800
    948a:	str	r0, [r3, #36]	; 0x24
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    948c:	str.w	r1, [r2, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    9490:	str.w	r1, [r2, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    9494:	str.w	r1, [r2, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    9498:	str.w	r1, [r2, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    949c:	str.w	r1, [r2, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    94a0:	str.w	r1, [r2, #456]	; 0x1c8
  SDHC_MIX_CTRL |= 0x80000000;
    94a4:	ldr.w	r2, [r8, #72]	; 0x48
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    94a8:	ldr	r3, [pc, #568]	; (96e4 <SdioCard::begin(SdioConfig)+0x2dc>)
  SDHC_MIX_CTRL |= 0x80000000;
    94aa:	orr.w	r2, r2, #2147483648	; 0x80000000
    94ae:	str.w	r2, [r8, #72]	; 0x48
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    94b2:	ldr.w	r2, [r8, #44]	; 0x2c
    94b6:	orrs	r3, r2
    94b8:	str.w	r3, [r8, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) {
    94bc:	ldr.w	r5, [r8, #44]	; 0x2c
    94c0:	ands.w	r5, r5, #16777216	; 0x1000000
    94c4:	bne.n	94bc <SdioCard::begin(SdioConfig)+0xb4>
  setSdclk(SD_MAX_INIT_RATE_KHZ);
    94c6:	mov.w	r0, #400	; 0x190
    94ca:	bl	8a20 <setSdclk(unsigned long)>
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    94ce:	ldr	r3, [pc, #528]	; (96e0 <SdioCard::begin(SdioConfig)+0x2d8>)
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    94d0:	movw	r2, #28856	; 0x70b8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    94d4:	movw	r1, #4280	; 0x10b8
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    94d8:	str.w	r5, [r3, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    94dc:	str.w	r5, [r3, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    94e0:	str.w	r5, [r3, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    94e4:	str.w	r5, [r3, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    94e8:	str.w	r5, [r3, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    94ec:	str.w	r5, [r3, #456]	; 0x1c8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    94f0:	str.w	r2, [r3, #956]	; 0x3bc
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;   // DAT3
    94f4:	str.w	r2, [r3, #960]	; 0x3c0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;   // CMD
    94f8:	str.w	r2, [r3, #940]	; 0x3ac
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    94fc:	str.w	r1, [r3, #944]	; 0x3b0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02 = DATA_MASK;   // DAT0
    9500:	str.w	r2, [r3, #948]	; 0x3b4
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;   // DAT1
    9504:	str.w	r2, [r3, #952]	; 0x3b8
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    9508:	ldr	r3, [pc, #476]	; (96e8 <SdioCard::begin(SdioConfig)+0x2e0>)
    950a:	ldr	r2, [pc, #480]	; (96ec <SdioCard::begin(SdioConfig)+0x2e4>)
    950c:	str.w	r3, [r8, #52]	; 0x34
    9510:	ldr	r3, [pc, #476]	; (96f0 <SdioCard::begin(SdioConfig)+0x2e8>)
    9512:	str.w	r2, [r3, #504]	; 0x1f8
  NVIC_SET_PRIORITY(IRQ_SDHC, 6 * 16);
    9516:	ldr	r3, [pc, #476]	; (96f4 <SdioCard::begin(SdioConfig)+0x2ec>)
    9518:	movs	r2, #96	; 0x60
    951a:	strb.w	r2, [r3, #110]	; 0x6e
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    951e:	mov.w	r3, #3758153728	; 0xe000e000
    9522:	mov.w	r2, #16384	; 0x4000
    9526:	str.w	r2, [r3, #268]	; 0x10c
  SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    952a:	ldr.w	r3, [r8, #44]	; 0x2c
    952e:	orr.w	r3, r3, #134217728	; 0x8000000
    9532:	str.w	r3, [r8, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
    9536:	ldr	r3, [pc, #448]	; (96f8 <SdioCard::begin(SdioConfig)+0x2f0>)
    9538:	ldr	r1, [r3, #44]	; 0x2c
    953a:	ands.w	r1, r1, #134217728	; 0x8000000
    953e:	bne.n	9538 <SdioCard::begin(SdioConfig)+0x130>
  if (!cardCommand(CMD0_XFERTYP, 0)) {
    9540:	mov	r0, r1
    9542:	bl	8dd8 <cardCommand(unsigned long, unsigned long)>
    9546:	mov	fp, r0
    9548:	cbnz	r0, 955e <SdioCard::begin(SdioConfig)+0x156>
  m_errorCode = code;
    954a:	movs	r1, #1
  m_errorLine = line;
    954c:	ldr	r3, [pc, #428]	; (96fc <SdioCard::begin(SdioConfig)+0x2f4>)
    954e:	movw	r2, #702	; 0x2be
  m_errorCode = code;
    9552:	strb	r1, [r4, #0]
  m_errorLine = line;
    9554:	str	r2, [r3, #0]
}
    9556:	mov	r0, fp
    9558:	add	sp, #76	; 0x4c
    955a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    955e:	mov.w	r8, #3
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
    9562:	ldr.w	r9, [pc, #464]	; 9734 <SdioCard::begin(SdioConfig)+0x32c>
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTA;
    9566:	ldr	r5, [pc, #400]	; (96f8 <SdioCard::begin(SdioConfig)+0x2f0>)
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
    9568:	mov.w	r1, #426	; 0x1aa
    956c:	mov	r0, r9
    956e:	bl	8dd8 <cardCommand(unsigned long, unsigned long)>
    9572:	cmp	r0, #0
    9574:	bne.n	9614 <SdioCard::begin(SdioConfig)+0x20c>
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTA;
    9576:	ldr	r3, [r5, #44]	; 0x2c
    9578:	orr.w	r3, r3, #16777216	; 0x1000000
    957c:	str	r3, [r5, #44]	; 0x2c
    while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) {
    957e:	ldr	r3, [r5, #44]	; 0x2c
    9580:	lsls	r3, r3, #7
    9582:	bmi.n	957e <SdioCard::begin(SdioConfig)+0x176>
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    9584:	subs.w	r8, r8, #1
    9588:	bne.n	9568 <SdioCard::begin(SdioConfig)+0x160>
  arg = m_version2 ? 0X40300000 : 0x00300000;
    958a:	ldrb	r3, [r7, #0]
    958c:	cmp	r3, #0
    958e:	ldr	r3, [pc, #368]	; (9700 <SdioCard::begin(SdioConfig)+0x2f8>)
    9590:	ite	eq
    9592:	moveq.w	r9, #3145728	; 0x300000
    9596:	movne	r9, r3
  int m = micros();
    9598:	bl	b86c <micros>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    959c:	ldr	r7, [pc, #356]	; (9704 <SdioCard::begin(SdioConfig)+0x2fc>)
  int m = micros();
    959e:	mov	r5, r0
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    95a0:	ldr.w	fp, [pc, #404]	; 9738 <SdioCard::begin(SdioConfig)+0x330>
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    95a4:	ldr.w	r8, [pc, #404]	; 973c <SdioCard::begin(SdioConfig)+0x334>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    95a8:	movs	r1, #0
    95aa:	mov	r0, r7
    95ac:	bl	8dd8 <cardCommand(unsigned long, unsigned long)>
    95b0:	cbnz	r0, 95ca <SdioCard::begin(SdioConfig)+0x1c2>
      return sdError(SD_CARD_ERROR_ACMD41);
    95b2:	mov.w	fp, #0
  m_errorCode = code;
    95b6:	movs	r1, #23
  m_errorLine = line;
    95b8:	ldr	r3, [pc, #320]	; (96fc <SdioCard::begin(SdioConfig)+0x2f4>)
    95ba:	movw	r2, #723	; 0x2d3
}
    95be:	mov	r0, fp
  m_errorCode = code;
    95c0:	strb	r1, [r4, #0]
  m_errorLine = line;
    95c2:	str	r2, [r3, #0]
}
    95c4:	add	sp, #76	; 0x4c
    95c6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    95ca:	mov	r1, r9
    95cc:	mov	r0, fp
    95ce:	bl	8dd8 <cardCommand(unsigned long, unsigned long)>
    95d2:	cmp	r0, #0
    95d4:	beq.n	95b2 <SdioCard::begin(SdioConfig)+0x1aa>
        ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
    95d6:	bl	b86c <micros>
    95da:	subs	r0, r0, r5
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    95dc:	ldr	r3, [pc, #280]	; (96f8 <SdioCard::begin(SdioConfig)+0x2f0>)
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    95de:	cmp	r0, r8
    95e0:	bhi.n	95b2 <SdioCard::begin(SdioConfig)+0x1aa>
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    95e2:	ldr	r2, [r3, #16]
    95e4:	cmp	r2, #0
    95e6:	bge.n	95a8 <SdioCard::begin(SdioConfig)+0x1a0>
  m_ocr = SDHC_CMDRSP0;
    95e8:	ldr	r1, [r3, #16]
    95ea:	ldr	r2, [pc, #284]	; (9708 <SdioCard::begin(SdioConfig)+0x300>)
    95ec:	str	r1, [r2, #0]
  if (SDHC_CMDRSP0 & 0x40000000) {
    95ee:	ldr	r3, [r3, #16]
    95f0:	lsls	r5, r3, #1
    95f2:	bpl.n	95fa <SdioCard::begin(SdioConfig)+0x1f2>
    m_highCapacity = true;
    95f4:	movs	r3, #1
    95f6:	strb.w	r3, [sl]
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    95fa:	movs	r1, #0
    95fc:	ldr	r0, [pc, #268]	; (970c <SdioCard::begin(SdioConfig)+0x304>)
    95fe:	bl	8dd8 <cardCommand(unsigned long, unsigned long)>
    9602:	mov	fp, r0
    9604:	cbnz	r0, 963a <SdioCard::begin(SdioConfig)+0x232>
  m_errorCode = code;
    9606:	movs	r1, #2
  m_errorLine = line;
    9608:	ldr	r3, [pc, #240]	; (96fc <SdioCard::begin(SdioConfig)+0x2f4>)
    960a:	mov.w	r2, #732	; 0x2dc
  m_errorCode = code;
    960e:	strb	r1, [r4, #0]
  m_errorLine = line;
    9610:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD2);
    9612:	b.n	9556 <SdioCard::begin(SdioConfig)+0x14e>
      if (SDHC_CMDRSP0 != 0X1AA) {
    9614:	ldr	r3, [pc, #224]	; (96f8 <SdioCard::begin(SdioConfig)+0x2f0>)
    9616:	ldr	r3, [r3, #16]
    9618:	cmp.w	r3, #426	; 0x1aa
    961c:	beq.n	9630 <SdioCard::begin(SdioConfig)+0x228>
  m_errorCode = code;
    961e:	movs	r1, #6
  m_errorLine = line;
    9620:	ldr	r3, [pc, #216]	; (96fc <SdioCard::begin(SdioConfig)+0x2f4>)
    9622:	mov.w	r2, #708	; 0x2c4
        return sdError(SD_CARD_ERROR_CMD8);
    9626:	mov.w	fp, #0
  m_errorCode = code;
    962a:	strb	r1, [r4, #0]
  m_errorLine = line;
    962c:	str	r2, [r3, #0]
        return sdError(SD_CARD_ERROR_CMD8);
    962e:	b.n	9556 <SdioCard::begin(SdioConfig)+0x14e>
      m_version2 = true;
    9630:	movs	r3, #1
  arg = m_version2 ? 0X40300000 : 0x00300000;
    9632:	ldr.w	r9, [pc, #204]	; 9700 <SdioCard::begin(SdioConfig)+0x2f8>
      m_version2 = true;
    9636:	strb	r3, [r7, #0]
  arg = m_version2 ? 0X40300000 : 0x00300000;
    9638:	b.n	9598 <SdioCard::begin(SdioConfig)+0x190>
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    963a:	movs	r1, #0
    963c:	ldr	r0, [pc, #208]	; (9710 <SdioCard::begin(SdioConfig)+0x308>)
    963e:	bl	8dd8 <cardCommand(unsigned long, unsigned long)>
    9642:	mov	fp, r0
    9644:	cbnz	r0, 9654 <SdioCard::begin(SdioConfig)+0x24c>
  m_errorCode = code;
    9646:	movs	r1, #3
  m_errorLine = line;
    9648:	ldr	r3, [pc, #176]	; (96fc <SdioCard::begin(SdioConfig)+0x2f4>)
    964a:	movw	r2, #735	; 0x2df
  m_errorCode = code;
    964e:	strb	r1, [r4, #0]
  m_errorLine = line;
    9650:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD3);
    9652:	b.n	9556 <SdioCard::begin(SdioConfig)+0x14e>
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    9654:	ldr.w	sl, [pc, #160]	; 96f8 <SdioCard::begin(SdioConfig)+0x2f0>
    9658:	ldr	r3, [pc, #184]	; (9714 <SdioCard::begin(SdioConfig)+0x30c>)
    965a:	ldr.w	r2, [sl, #16]
    965e:	ldr	r5, [pc, #184]	; (9718 <SdioCard::begin(SdioConfig)+0x310>)
    9660:	ands	r3, r2
  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    9662:	ldr	r1, [pc, #184]	; (971c <SdioCard::begin(SdioConfig)+0x314>)
    9664:	ldr	r0, [pc, #184]	; (9720 <SdioCard::begin(SdioConfig)+0x318>)
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    9666:	str	r3, [r5, #0]
  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    9668:	bl	8e70 <readReg16(unsigned long, void*)>
    966c:	mov	fp, r0
    966e:	cbnz	r0, 967e <SdioCard::begin(SdioConfig)+0x276>
  m_errorCode = code;
    9670:	movs	r1, #7
  m_errorLine = line;
    9672:	ldr	r3, [pc, #136]	; (96fc <SdioCard::begin(SdioConfig)+0x2f4>)
    9674:	mov.w	r2, #740	; 0x2e4
  m_errorCode = code;
    9678:	strb	r1, [r4, #0]
  m_errorLine = line;
    967a:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD9);
    967c:	b.n	9556 <SdioCard::begin(SdioConfig)+0x14e>
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    967e:	ldr	r1, [pc, #164]	; (9724 <SdioCard::begin(SdioConfig)+0x31c>)
    9680:	ldr	r0, [pc, #164]	; (9728 <SdioCard::begin(SdioConfig)+0x320>)
    9682:	bl	8e70 <readReg16(unsigned long, void*)>
    9686:	mov	fp, r0
    9688:	cbnz	r0, 9698 <SdioCard::begin(SdioConfig)+0x290>
  m_errorCode = code;
    968a:	movs	r1, #8
  m_errorLine = line;
    968c:	ldr	r3, [pc, #108]	; (96fc <SdioCard::begin(SdioConfig)+0x2f4>)
    968e:	movw	r2, #743	; 0x2e7
  m_errorCode = code;
    9692:	strb	r1, [r4, #0]
  m_errorLine = line;
    9694:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD10);
    9696:	b.n	9556 <SdioCard::begin(SdioConfig)+0x14e>
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    9698:	ldr	r1, [r5, #0]
    969a:	ldr	r0, [pc, #144]	; (972c <SdioCard::begin(SdioConfig)+0x324>)
    969c:	bl	8dd8 <cardCommand(unsigned long, unsigned long)>
    96a0:	mov	fp, r0
    96a2:	cbnz	r0, 96b2 <SdioCard::begin(SdioConfig)+0x2aa>
  m_errorCode = code;
    96a4:	movs	r1, #5
  m_errorLine = line;
    96a6:	ldr	r3, [pc, #84]	; (96fc <SdioCard::begin(SdioConfig)+0x2f4>)
    96a8:	movw	r2, #746	; 0x2ea
  m_errorCode = code;
    96ac:	strb	r1, [r4, #0]
  m_errorLine = line;
    96ae:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD7);
    96b0:	b.n	9556 <SdioCard::begin(SdioConfig)+0x14e>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    96b2:	ldr	r1, [r5, #0]
    96b4:	ldr	r0, [pc, #76]	; (9704 <SdioCard::begin(SdioConfig)+0x2fc>)
    96b6:	bl	8dd8 <cardCommand(unsigned long, unsigned long)>
    96ba:	cmp	r0, #0
    96bc:	bne.n	9740 <SdioCard::begin(SdioConfig)+0x338>
  m_errorCode = code;
    96be:	movs	r1, #20
  m_errorLine = line;
    96c0:	ldr	r3, [pc, #56]	; (96fc <SdioCard::begin(SdioConfig)+0x2f4>)
    96c2:	movw	r2, #750	; 0x2ee
    return sdError(SD_CARD_ERROR_ACMD6);
    96c6:	mov.w	fp, #0
  m_errorCode = code;
    96ca:	strb	r1, [r4, #0]
  m_errorLine = line;
    96cc:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_ACMD6);
    96ce:	b.n	9556 <SdioCard::begin(SdioConfig)+0x14e>
    96d0:	.word	0x20007b56
    96d4:	.word	0x400d8000
    96d8:	.word	0x20001a44
    96dc:	.word	0x20007b57
    96e0:	.word	0x401f8000
    96e4:	.word	0x01008000
    96e8:	.word	0x117f000b
    96ec:	.word	0x000089d1
    96f0:	.word	0x20001c00
    96f4:	.word	0xe000e400
    96f8:	.word	0x402c0000
    96fc:	.word	0x20005c88
    9700:	.word	0x40300000
    9704:	.word	0x371a0000
    9708:	.word	0x200061ac
    970c:	.word	0x02090000
    9710:	.word	0x031a0000
    9714:	.word	0xffff0000
    9718:	.word	0x200061b0
    971c:	.word	0x2000619c
    9720:	.word	0x09090000
    9724:	.word	0x2000618c
    9728:	.word	0x0a090000
    972c:	.word	0x071b0000
    9730:	.word	0x20007b58
    9734:	.word	0x081a0000
    9738:	.word	0x29020000
    973c:	.word	0x000f4240
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    9740:	movs	r1, #2
    9742:	ldr	r0, [pc, #536]	; (995c <SdioCard::begin(SdioConfig)+0x554>)
    9744:	bl	8dd8 <cardCommand(unsigned long, unsigned long)>
    9748:	cmp	r0, #0
    974a:	beq.n	96be <SdioCard::begin(SdioConfig)+0x2b6>
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    974c:	ldr.w	r3, [sl, #40]	; 0x28
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    9750:	ldr.w	r9, [pc, #576]	; 9994 <SdioCard::begin(SdioConfig)+0x58c>
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    9754:	bic.w	r3, r3, #6
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    9758:	ldr.w	r8, [pc, #540]	; 9978 <SdioCard::begin(SdioConfig)+0x570>
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    975c:	str.w	r3, [sl, #40]	; 0x28
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);
    9760:	ldr.w	r3, [sl, #40]	; 0x28
    9764:	orr.w	r3, r3, #2
    9768:	str.w	r3, [sl, #40]	; 0x28
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
    976c:	mov.w	r3, #1048592	; 0x100010
    9770:	str.w	r3, [sl, #68]	; 0x44
  uint32_t m = micros();
    9774:	bl	b86c <micros>
    9778:	mov	r7, r0
  while (fcn()) {
    977a:	b.n	9786 <SdioCard::begin(SdioConfig)+0x37e>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    977c:	bl	b86c <micros>
    9780:	subs	r0, r0, r7
    9782:	cmp	r0, r8
    9784:	bhi.n	97de <SdioCard::begin(SdioConfig)+0x3d6>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    9786:	ldr	r1, [r5, #0]
    9788:	mov	r0, r9
    978a:	bl	8dd8 <cardCommand(unsigned long, unsigned long)>
    978e:	cmp	r0, #0
    9790:	beq.n	977c <SdioCard::begin(SdioConfig)+0x374>
    9792:	ldr.w	r3, [sl, #16]
  while (fcn()) {
    9796:	lsls	r0, r3, #23
    9798:	bpl.n	977c <SdioCard::begin(SdioConfig)+0x374>
  m_dmaBusy = true;
    979a:	movs	r3, #1
    979c:	ldr.w	r8, [pc, #504]	; 9998 <SdioCard::begin(SdioConfig)+0x590>
  m_irqstat = 0;
    97a0:	ldr	r7, [pc, #444]	; (9960 <SdioCard::begin(SdioConfig)+0x558>)
    97a2:	mov.w	fp, #0
  m_dmaBusy = true;
    97a6:	strb.w	r3, [r8]
  SDHC_DSADDR = (uint32_t)scr;
    97aa:	ldr.w	r9, [pc, #496]	; 999c <SdioCard::begin(SdioConfig)+0x594>
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(8);
    97ae:	ldr	r3, [pc, #436]	; (9964 <SdioCard::begin(SdioConfig)+0x55c>)
  m_irqstat = 0;
    97b0:	str.w	fp, [r7]
  SDHC_DSADDR = (uint32_t)scr;
    97b4:	str.w	r9, [sl]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(8);
    97b8:	str.w	r3, [sl, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    97bc:	ldr	r3, [pc, #424]	; (9968 <SdioCard::begin(SdioConfig)+0x560>)
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    97be:	ldr	r0, [pc, #428]	; (996c <SdioCard::begin(SdioConfig)+0x564>)
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    97c0:	str.w	r3, [sl, #56]	; 0x38
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    97c4:	ldr	r1, [r5, #0]
    97c6:	bl	8dd8 <cardCommand(unsigned long, unsigned long)>
    97ca:	cbnz	r0, 97f0 <SdioCard::begin(SdioConfig)+0x3e8>
  m_errorCode = code;
    97cc:	movs	r1, #24
  m_errorLine = line;
    97ce:	ldr	r3, [pc, #416]	; (9970 <SdioCard::begin(SdioConfig)+0x568>)
    97d0:	movw	r2, #471	; 0x1d7
    return false;
    97d4:	mov.w	fp, #0
  m_errorCode = code;
    97d8:	strb	r1, [r4, #0]
  m_errorLine = line;
    97da:	str	r2, [r3, #0]
  return false;
    97dc:	b.n	9556 <SdioCard::begin(SdioConfig)+0x14e>
  m_errorCode = code;
    97de:	movs	r1, #10
  m_errorLine = line;
    97e0:	ldr	r3, [pc, #396]	; (9970 <SdioCard::begin(SdioConfig)+0x568>)
    97e2:	mov.w	r2, #464	; 0x1d0
    return false;
    97e6:	mov.w	fp, #0
  m_errorCode = code;
    97ea:	strb	r1, [r4, #0]
  m_errorLine = line;
    97ec:	str	r2, [r3, #0]
  return false;
    97ee:	b.n	9556 <SdioCard::begin(SdioConfig)+0x14e>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    97f0:	mov	r1, fp
    97f2:	ldr	r0, [pc, #384]	; (9974 <SdioCard::begin(SdioConfig)+0x56c>)
    97f4:	bl	8dd8 <cardCommand(unsigned long, unsigned long)>
    97f8:	cmp	r0, #0
    97fa:	beq.n	97cc <SdioCard::begin(SdioConfig)+0x3c4>
  if (!waitDmaStatus()) {
    97fc:	bl	8c34 <waitDmaStatus()>
    9800:	mov	fp, r0
    9802:	cbnz	r0, 9812 <SdioCard::begin(SdioConfig)+0x40a>
  m_errorCode = code;
    9804:	movs	r1, #38	; 0x26
  m_errorLine = line;
    9806:	ldr	r3, [pc, #360]	; (9970 <SdioCard::begin(SdioConfig)+0x568>)
    9808:	mov.w	r2, #474	; 0x1da
  m_errorCode = code;
    980c:	strb	r1, [r4, #0]
  m_errorLine = line;
    980e:	str	r2, [r3, #0]
  return false;
    9810:	b.n	9556 <SdioCard::begin(SdioConfig)+0x14e>
  uint32_t m = micros();
    9812:	bl	b86c <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    9816:	ldr.w	sl, [pc, #380]	; 9994 <SdioCard::begin(SdioConfig)+0x58c>
    981a:	ldr.w	fp, [pc, #388]	; 99a0 <SdioCard::begin(SdioConfig)+0x598>
  uint32_t m = micros();
    981e:	str	r0, [sp, #4]
  while (fcn()) {
    9820:	b.n	9830 <SdioCard::begin(SdioConfig)+0x428>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    9822:	bl	b86c <micros>
    9826:	ldr	r3, [sp, #4]
    9828:	subs	r0, r0, r3
    982a:	ldr	r3, [pc, #332]	; (9978 <SdioCard::begin(SdioConfig)+0x570>)
    982c:	cmp	r0, r3
    982e:	bhi.n	9880 <SdioCard::begin(SdioConfig)+0x478>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    9830:	ldr	r1, [r5, #0]
    9832:	mov	r0, sl
    9834:	bl	8dd8 <cardCommand(unsigned long, unsigned long)>
    9838:	cmp	r0, #0
    983a:	beq.n	9822 <SdioCard::begin(SdioConfig)+0x41a>
    983c:	ldr.w	r3, [fp, #16]
  while (fcn()) {
    9840:	lsls	r1, r3, #23
    9842:	bpl.n	9822 <SdioCard::begin(SdioConfig)+0x41a>
  m_dmaBusy = true;
    9844:	movs	r2, #1
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    9846:	ldr	r0, [pc, #292]	; (996c <SdioCard::begin(SdioConfig)+0x564>)
  m_dmaBusy = true;
    9848:	strb.w	r2, [r8]
  m_irqstat = 0;
    984c:	mov.w	r8, #0
  SDHC_DSADDR = (uint32_t)scr;
    9850:	ldr	r2, [pc, #296]	; (997c <SdioCard::begin(SdioConfig)+0x574>)
  m_irqstat = 0;
    9852:	str.w	r8, [r7]
  SDHC_DSADDR = (uint32_t)scr;
    9856:	str.w	r2, [fp]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    985a:	ldr	r2, [pc, #292]	; (9980 <SdioCard::begin(SdioConfig)+0x578>)
    985c:	str.w	r2, [fp, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    9860:	ldr	r2, [pc, #260]	; (9968 <SdioCard::begin(SdioConfig)+0x560>)
    9862:	str.w	r2, [fp, #56]	; 0x38
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    9866:	ldr	r1, [r5, #0]
    9868:	bl	8dd8 <cardCommand(unsigned long, unsigned long)>
    986c:	cbnz	r0, 9892 <SdioCard::begin(SdioConfig)+0x48a>
  m_errorCode = code;
    986e:	movs	r1, #21
  m_errorLine = line;
    9870:	ldr	r3, [pc, #252]	; (9970 <SdioCard::begin(SdioConfig)+0x568>)
    9872:	movw	r2, #453	; 0x1c5
    return false;
    9876:	mov.w	fp, #0
  m_errorCode = code;
    987a:	strb	r1, [r4, #0]
  m_errorLine = line;
    987c:	str	r2, [r3, #0]
  return false;
    987e:	b.n	9556 <SdioCard::begin(SdioConfig)+0x14e>
  m_errorCode = code;
    9880:	movs	r1, #10
  m_errorLine = line;
    9882:	ldr	r3, [pc, #236]	; (9970 <SdioCard::begin(SdioConfig)+0x568>)
    9884:	mov.w	r2, #446	; 0x1be
    return false;
    9888:	mov.w	fp, #0
  m_errorCode = code;
    988c:	strb	r1, [r4, #0]
  m_errorLine = line;
    988e:	str	r2, [r3, #0]
  return false;
    9890:	b.n	9556 <SdioCard::begin(SdioConfig)+0x14e>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    9892:	mov	r1, r8
    9894:	ldr	r0, [pc, #236]	; (9984 <SdioCard::begin(SdioConfig)+0x57c>)
    9896:	bl	8dd8 <cardCommand(unsigned long, unsigned long)>
    989a:	cmp	r0, #0
    989c:	beq.n	986e <SdioCard::begin(SdioConfig)+0x466>
  if (!waitDmaStatus()) {
    989e:	bl	8c34 <waitDmaStatus()>
    98a2:	mov	fp, r0
    98a4:	cbnz	r0, 98b4 <SdioCard::begin(SdioConfig)+0x4ac>
  m_errorCode = code;
    98a6:	movs	r1, #38	; 0x26
  m_errorLine = line;
    98a8:	ldr	r3, [pc, #196]	; (9970 <SdioCard::begin(SdioConfig)+0x568>)
    98aa:	mov.w	r2, #456	; 0x1c8
  m_errorCode = code;
    98ae:	strb	r1, [r4, #0]
  m_errorLine = line;
    98b0:	str	r2, [r3, #0]
  return false;
    98b2:	b.n	9556 <SdioCard::begin(SdioConfig)+0x14e>
  /** Bytes 0-3 SD Association, bytes 4-7 reserved for manufacturer. */
  uint8_t scr[8];
  /** \return SCR_STRUCTURE field  - must be zero.*/
  uint8_t srcStructure() const { return scr[0] >> 4; }
  /** \return SD_SPEC field 0 - v1.0 or V1.01, 1 - 1.10, 2 - V2.00 or greater */
  uint8_t sdSpec() const { return scr[0] & 0XF; }
    98b4:	ldrb.w	r3, [r9]
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    98b8:	lsls	r2, r3, #28
    98ba:	beq.n	98ee <SdioCard::begin(SdioConfig)+0x4e6>
  if (m_scr.sdSpec() > 0 && cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    98bc:	ldr	r3, [r6, #0]
    98be:	add	r2, sp, #8
    98c0:	mvn.w	r1, #4278190080	; 0xff000000
    98c4:	mov	r0, r6
    98c6:	ldr	r3, [r3, #40]	; 0x28
    98c8:	blx	r3
    98ca:	cbz	r0, 98ee <SdioCard::begin(SdioConfig)+0x4e6>
    98cc:	ldrb.w	r3, [sp, #21]
    98d0:	lsls	r3, r3, #30
    98d2:	bpl.n	98ee <SdioCard::begin(SdioConfig)+0x4e6>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    98d4:	ldr	r3, [r6, #0]
    98d6:	add	r2, sp, #8
    98d8:	mov	r0, r6
    98da:	ldr	r1, [pc, #172]	; (9988 <SdioCard::begin(SdioConfig)+0x580>)
    98dc:	ldr	r3, [r3, #40]	; 0x28
    98de:	blx	r3
  if (m_scr.sdSpec() > 0 && cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    98e0:	cbz	r0, 98ee <SdioCard::begin(SdioConfig)+0x4e6>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    98e2:	ldrb.w	r3, [sp, #24]
    98e6:	and.w	r3, r3, #15
    98ea:	cmp	r3, #1
    98ec:	beq.n	9954 <SdioCard::begin(SdioConfig)+0x54c>
    kHzSdClk = 25000;
    98ee:	movw	r0, #25000	; 0x61a8
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    98f2:	ldr	r4, [pc, #152]	; (998c <SdioCard::begin(SdioConfig)+0x584>)
    98f4:	movs	r3, #5
    98f6:	str.w	r3, [r4, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    98fa:	str.w	r3, [r4, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    98fe:	str.w	r3, [r4, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    9902:	str.w	r3, [r4, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    9906:	str.w	r3, [r4, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    990a:	str.w	r3, [r4, #456]	; 0x1c8
  setSdclk(kHzSdClk);
    990e:	bl	8a20 <setSdclk(unsigned long)>
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    9912:	movs	r3, #0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    9914:	movw	r2, #28856	; 0x70b8
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    9918:	str.w	r3, [r4, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    991c:	str.w	r3, [r4, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    9920:	str.w	r3, [r4, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    9924:	str.w	r3, [r4, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    9928:	str.w	r3, [r4, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    992c:	str.w	r3, [r4, #456]	; 0x1c8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    9930:	movw	r3, #4280	; 0x10b8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    9934:	str.w	r2, [r4, #956]	; 0x3bc
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;   // DAT3
    9938:	str.w	r2, [r4, #960]	; 0x3c0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;   // CMD
    993c:	str.w	r2, [r4, #940]	; 0x3ac
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    9940:	str.w	r3, [r4, #944]	; 0x3b0
  m_initDone = true;
    9944:	movs	r3, #1
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02 = DATA_MASK;   // DAT0
    9946:	str.w	r2, [r4, #948]	; 0x3b4
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;   // DAT1
    994a:	str.w	r2, [r4, #952]	; 0x3b8
  m_initDone = true;
    994e:	ldr	r2, [pc, #64]	; (9990 <SdioCard::begin(SdioConfig)+0x588>)
    9950:	strb	r3, [r2, #0]
  return true;
    9952:	b.n	9556 <SdioCard::begin(SdioConfig)+0x14e>
    kHzSdClk = 50000;
    9954:	movw	r0, #50000	; 0xc350
    9958:	b.n	98f2 <SdioCard::begin(SdioConfig)+0x4ea>
    995a:	nop
    995c:	.word	0x061a0000
    9960:	.word	0x20006400
    9964:	.word	0x00010008
    9968:	.word	0x117f0002
    996c:	.word	0x371a0000
    9970:	.word	0x20005c88
    9974:	.word	0x333a0011
    9978:	.word	0x000f4240
    997c:	.word	0x200061bc
    9980:	.word	0x00010040
    9984:	.word	0x0d3a0011
    9988:	.word	0x80fffff1
    998c:	.word	0x401f8000
    9990:	.word	0x20007b56
    9994:	.word	0x0d1a0000
    9998:	.word	0x20007b5a
    999c:	.word	0x200061b4
    99a0:	.word	0x402c0000

000099a4 <SdioCard::readData(unsigned char*)>:
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    99a4:	ldr	r3, [pc, #220]	; (9a84 <SdioCard::readData(unsigned char*)+0xe0>)
    99a6:	ldr	r2, [r3, #36]	; 0x24
    99a8:	lsls	r2, r2, #22
bool SdioCard::readData(uint8_t* dst) {
    99aa:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    99ae:	mov	r7, r1
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    99b0:	bmi.n	99ce <SdioCard::readData(unsigned char*)+0x2a>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    99b2:	ldr	r2, [r3, #40]	; 0x28
    99b4:	bic.w	r2, r2, #65536	; 0x10000
    99b8:	str	r2, [r3, #40]	; 0x28
    noInterrupts();
    99ba:	cpsid	i
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    99bc:	ldr	r2, [r3, #40]	; 0x28
    99be:	orr.w	r2, r2, #131072	; 0x20000
    99c2:	str	r2, [r3, #40]	; 0x28
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    99c4:	ldr	r2, [r3, #40]	; 0x28
    99c6:	orr.w	r2, r2, #65536	; 0x10000
    99ca:	str	r2, [r3, #40]	; 0x28
    interrupts();
    99cc:	cpsie	i
  uint32_t m = micros();
    99ce:	bl	b86c <micros>
static bool isBusyFifoRead() { return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN); }
    99d2:	ldr	r6, [pc, #176]	; (9a84 <SdioCard::readData(unsigned char*)+0xe0>)
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    99d4:	ldr.w	r8, [pc, #196]	; 9a9c <SdioCard::readData(unsigned char*)+0xf8>
  uint32_t m = micros();
    99d8:	mov	r5, r0
  while (fcn()) {
    99da:	b.n	99e6 <SdioCard::readData(unsigned char*)+0x42>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    99dc:	bl	b86c <micros>
    99e0:	subs	r3, r0, r5
    99e2:	cmp	r3, r8
    99e4:	bhi.n	9a56 <SdioCard::readData(unsigned char*)+0xb2>
static bool isBusyFifoRead() { return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN); }
    99e6:	ldr	r4, [r6, #36]	; 0x24
  while (fcn()) {
    99e8:	ands.w	r4, r4, #2048	; 0x800
    99ec:	beq.n	99dc <SdioCard::readData(unsigned char*)+0x38>
    99ee:	add.w	ip, r7, #60	; 0x3c
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    99f2:	ldr	r0, [pc, #144]	; (9a84 <SdioCard::readData(unsigned char*)+0xe0>)
    99f4:	add.w	r7, r7, #572	; 0x23c
    99f8:	ldr	r3, [r0, #36]	; 0x24
    99fa:	lsls	r3, r3, #20
    99fc:	bpl.n	99f8 <SdioCard::readData(unsigned char*)+0x54>
    99fe:	sub.w	r3, ip, #64	; 0x40
      p32[i] = SDHC_DATPORT;
    9a02:	ldr	r2, [r0, #32]
    9a04:	str.w	r2, [r3, #4]!
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    9a08:	cmp	ip, r3
    9a0a:	bne.n	9a02 <SdioCard::readData(unsigned char*)+0x5e>
  for (uint32_t iw = 0; iw < 512 / (4 * FIFO_WML); iw++) {
    9a0c:	add.w	ip, ip, #64	; 0x40
    9a10:	cmp	r7, ip
    9a12:	bne.n	99f8 <SdioCard::readData(unsigned char*)+0x54>
  uint32_t m = micros();
    9a14:	bl	b86c <micros>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    9a18:	ldr	r7, [pc, #104]	; (9a84 <SdioCard::readData(unsigned char*)+0xe0>)
    9a1a:	ldr	r5, [pc, #108]	; (9a88 <SdioCard::readData(unsigned char*)+0xe4>)
  uint32_t m = micros();
    9a1c:	mov	r6, r0
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    9a1e:	ldr.w	r8, [pc, #124]	; 9a9c <SdioCard::readData(unsigned char*)+0xf8>
  while (fcn()) {
    9a22:	b.n	9a2e <SdioCard::readData(unsigned char*)+0x8a>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    9a24:	bl	b86c <micros>
    9a28:	subs	r3, r0, r6
    9a2a:	cmp	r3, r8
    9a2c:	bhi.n	9a6a <SdioCard::readData(unsigned char*)+0xc6>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    9a2e:	ldr	r4, [r7, #48]	; 0x30
  while (fcn()) {
    9a30:	ands	r4, r5
    9a32:	beq.n	9a24 <SdioCard::readData(unsigned char*)+0x80>
  m_irqstat = SDHC_IRQSTAT;
    9a34:	ldr	r3, [r7, #48]	; 0x30
    9a36:	ldr	r2, [pc, #84]	; (9a8c <SdioCard::readData(unsigned char*)+0xe8>)
    9a38:	str	r3, [r2, #0]
  SDHC_IRQSTAT = m_irqstat;
    9a3a:	ldr	r3, [r2, #0]
    9a3c:	str	r3, [r7, #48]	; 0x30
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    9a3e:	ldr	r3, [r2, #0]
    9a40:	ands.w	r3, r3, #2
    9a44:	beq.n	9a7e <SdioCard::readData(unsigned char*)+0xda>
    9a46:	ldr	r2, [r2, #0]
    9a48:	ldr	r3, [pc, #68]	; (9a90 <SdioCard::readData(unsigned char*)+0xec>)
    9a4a:	tst	r2, r3
    9a4c:	ite	eq
    9a4e:	moveq	r0, #1
    9a50:	movne	r0, #0
}
    9a52:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_errorCode = code;
    9a56:	ldr	r1, [pc, #60]	; (9a94 <SdioCard::readData(unsigned char*)+0xf0>)
    9a58:	movs	r5, #27
  m_errorLine = line;
    9a5a:	ldr	r3, [pc, #60]	; (9a98 <SdioCard::readData(unsigned char*)+0xf4>)
    9a5c:	movw	r2, #889	; 0x379
    return sdError(SD_CARD_ERROR_READ_FIFO);
    9a60:	mov	r0, r4
  m_errorCode = code;
    9a62:	strb	r5, [r1, #0]
  m_errorLine = line;
    9a64:	str	r2, [r3, #0]
}
    9a66:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_errorCode = code;
    9a6a:	ldr	r1, [pc, #40]	; (9a94 <SdioCard::readData(unsigned char*)+0xf0>)
    9a6c:	movs	r5, #30
  m_errorLine = line;
    9a6e:	ldr	r3, [pc, #40]	; (9a98 <SdioCard::readData(unsigned char*)+0xf4>)
    9a70:	mov.w	r2, #900	; 0x384
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
    9a74:	mov	r0, r4
  m_errorCode = code;
    9a76:	strb	r5, [r1, #0]
  m_errorLine = line;
    9a78:	str	r2, [r3, #0]
}
    9a7a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    9a7e:	mov	r0, r3
}
    9a80:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9a84:	.word	0x402c0000
    9a88:	.word	0x117f0002
    9a8c:	.word	0x20006400
    9a90:	.word	0x117f0000
    9a94:	.word	0x20001a44
    9a98:	.word	0x20005c88
    9a9c:	.word	0x000f4240

00009aa0 <SdioCard::readStart(unsigned long)>:
bool SdioCard::readStart(uint32_t sector) {
    9aa0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  m_busyFcn = fcn;
    9aa4:	ldr	r3, [pc, #164]	; (9b4c <SdioCard::readStart(unsigned long)+0xac>)
bool SdioCard::readStart(uint32_t sector) {
    9aa6:	mov	r9, r1
  m_busyFcn = fcn;
    9aa8:	ldr.w	sl, [pc, #192]	; 9b6c <SdioCard::readStart(unsigned long)+0xcc>
    9aac:	ldr	r6, [pc, #160]	; (9b50 <SdioCard::readStart(unsigned long)+0xb0>)
    9aae:	str.w	r3, [sl]
  uint32_t m = micros();
    9ab2:	bl	b86c <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    9ab6:	ldr	r5, [pc, #156]	; (9b54 <SdioCard::readStart(unsigned long)+0xb4>)
  uint32_t m = micros();
    9ab8:	mov	r4, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    9aba:	ldr.w	r8, [pc, #180]	; 9b70 <SdioCard::readStart(unsigned long)+0xd0>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    9abe:	ldr	r7, [pc, #152]	; (9b58 <SdioCard::readStart(unsigned long)+0xb8>)
  while (fcn()) {
    9ac0:	b.n	9ad0 <SdioCard::readStart(unsigned long)+0x30>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    9ac2:	bl	b86c <micros>
    9ac6:	subs	r0, r0, r4
    9ac8:	cmp	r0, r7
    9aca:	bhi.n	9b20 <SdioCard::readStart(unsigned long)+0x80>
    yield();
    9acc:	bl	c0d4 <yield>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    9ad0:	ldr	r1, [r6, #0]
    9ad2:	mov	r0, r5
    9ad4:	bl	8dd8 <cardCommand(unsigned long, unsigned long)>
    9ad8:	cmp	r0, #0
    9ada:	beq.n	9ac2 <SdioCard::readStart(unsigned long)+0x22>
    9adc:	ldr.w	r3, [r8, #16]
  while (fcn()) {
    9ae0:	lsls	r3, r3, #23
    9ae2:	bpl.n	9ac2 <SdioCard::readStart(unsigned long)+0x22>
  m_busyFcn = 0;
    9ae4:	movs	r3, #0
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    9ae6:	mov.w	r2, #512	; 0x200
  m_busyFcn = 0;
    9aea:	str.w	r3, [sl]
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    9aee:	ldr.w	r3, [r8, #40]	; 0x28
    9af2:	orr.w	r3, r3, #65536	; 0x10000
    9af6:	str.w	r3, [r8, #40]	; 0x28
  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512 * sector)) {
    9afa:	ldr	r3, [pc, #96]	; (9b5c <SdioCard::readStart(unsigned long)+0xbc>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    9afc:	str.w	r2, [r8, #4]
  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512 * sector)) {
    9b00:	ldrb	r3, [r3, #0]
    9b02:	cbz	r3, 9b38 <SdioCard::readStart(unsigned long)+0x98>
    9b04:	mov	r1, r9
    9b06:	ldr	r0, [pc, #88]	; (9b60 <SdioCard::readStart(unsigned long)+0xc0>)
    9b08:	bl	8dd8 <cardCommand(unsigned long, unsigned long)>
    9b0c:	cbnz	r0, 9b1c <SdioCard::readStart(unsigned long)+0x7c>
  m_errorCode = code;
    9b0e:	ldr	r1, [pc, #84]	; (9b64 <SdioCard::readStart(unsigned long)+0xc4>)
    9b10:	movs	r4, #12
  m_errorLine = line;
    9b12:	ldr	r3, [pc, #84]	; (9b68 <SdioCard::readStart(unsigned long)+0xc8>)
    9b14:	movw	r2, #1002	; 0x3ea
  m_errorCode = code;
    9b18:	strb	r4, [r1, #0]
  m_errorLine = line;
    9b1a:	str	r2, [r3, #0]
}
    9b1c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_errorCode = code;
    9b20:	ldr	r2, [pc, #64]	; (9b64 <SdioCard::readStart(unsigned long)+0xc4>)
    9b22:	movs	r1, #10
      m_busyFcn = 0;
    9b24:	movs	r0, #0
  m_errorLine = line;
    9b26:	ldr	r3, [pc, #64]	; (9b68 <SdioCard::readStart(unsigned long)+0xc8>)
  m_errorCode = code;
    9b28:	strb	r1, [r2, #0]
  m_errorLine = line;
    9b2a:	movw	r2, #990	; 0x3de
      m_busyFcn = 0;
    9b2e:	str.w	r0, [sl]
  m_errorLine = line;
    9b32:	str	r2, [r3, #0]
}
    9b34:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512 * sector)) {
    9b38:	mov.w	r9, r9, lsl #9
    9b3c:	ldr	r0, [pc, #32]	; (9b60 <SdioCard::readStart(unsigned long)+0xc0>)
    9b3e:	mov	r1, r9
    9b40:	bl	8dd8 <cardCommand(unsigned long, unsigned long)>
    9b44:	cmp	r0, #0
    9b46:	bne.n	9b1c <SdioCard::readStart(unsigned long)+0x7c>
    9b48:	b.n	9b0e <SdioCard::readStart(unsigned long)+0x6e>
    9b4a:	nop
    9b4c:	.word	0x00008f6d
    9b50:	.word	0x200061b0
    9b54:	.word	0x0d1a0000
    9b58:	.word	0x000f4240
    9b5c:	.word	0x20007b58
    9b60:	.word	0x123a0030
    9b64:	.word	0x20001a44
    9b68:	.word	0x20005c88
    9b6c:	.word	0x200063fc
    9b70:	.word	0x402c0000

00009b74 <SdioCard::stopTransmission(bool)>:
bool SdioCard::stopTransmission(bool blocking) {
    9b74:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_curState = IDLE_STATE;
    9b78:	movs	r2, #0
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    9b7a:	ldr	r4, [pc, #116]	; (9bf0 <SdioCard::stopTransmission(bool)+0x7c>)
bool SdioCard::stopTransmission(bool blocking) {
    9b7c:	mov	r5, r1
  m_curState = IDLE_STATE;
    9b7e:	strb	r2, [r0, #9]
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    9b80:	mov	r1, r2
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    9b82:	ldr	r3, [r4, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    9b84:	ldr	r0, [pc, #108]	; (9bf4 <SdioCard::stopTransmission(bool)+0x80>)
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    9b86:	bic.w	r3, r3, #65536	; 0x10000
    9b8a:	str	r3, [r4, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    9b8c:	bl	8dd8 <cardCommand(unsigned long, unsigned long)>
    9b90:	cbnz	r0, 9ba4 <SdioCard::stopTransmission(bool)+0x30>
  m_errorCode = code;
    9b92:	ldr	r1, [pc, #100]	; (9bf8 <SdioCard::stopTransmission(bool)+0x84>)
    9b94:	movs	r4, #9
  m_errorLine = line;
    9b96:	ldr	r3, [pc, #100]	; (9bfc <SdioCard::stopTransmission(bool)+0x88>)
    9b98:	movw	r2, #1018	; 0x3fa
  m_errorCode = code;
    9b9c:	strb	r4, [r1, #0]
  m_errorLine = line;
    9b9e:	str	r2, [r3, #0]
}
    9ba0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (blocking) {
    9ba4:	cmp	r5, #0
    9ba6:	beq.n	9ba0 <SdioCard::stopTransmission(bool)+0x2c>
  m_busyFcn = fcn;
    9ba8:	ldr	r3, [pc, #84]	; (9c00 <SdioCard::stopTransmission(bool)+0x8c>)
    9baa:	ldr	r6, [pc, #88]	; (9c04 <SdioCard::stopTransmission(bool)+0x90>)
    9bac:	str	r3, [r6, #0]
  uint32_t m = micros();
    9bae:	bl	b86c <micros>
static bool isBusyDat() { return SDHC_PRSSTAT & (1 << 24) ? false : true; }
    9bb2:	ldr	r3, [r4, #36]	; 0x24
  uint32_t m = micros();
    9bb4:	mov	r7, r0
  while (fcn()) {
    9bb6:	lsls	r2, r3, #7
    9bb8:	bmi.n	9be8 <SdioCard::stopTransmission(bool)+0x74>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    9bba:	ldr.w	r8, [pc, #76]	; 9c08 <SdioCard::stopTransmission(bool)+0x94>
    9bbe:	b.n	9bca <SdioCard::stopTransmission(bool)+0x56>
    yield();
    9bc0:	bl	c0d4 <yield>
static bool isBusyDat() { return SDHC_PRSSTAT & (1 << 24) ? false : true; }
    9bc4:	ldr	r3, [r4, #36]	; 0x24
  while (fcn()) {
    9bc6:	lsls	r3, r3, #7
    9bc8:	bmi.n	9be8 <SdioCard::stopTransmission(bool)+0x74>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    9bca:	bl	b86c <micros>
    9bce:	subs	r0, r0, r7
    9bd0:	cmp	r0, r8
    9bd2:	bls.n	9bc0 <SdioCard::stopTransmission(bool)+0x4c>
  m_errorCode = code;
    9bd4:	ldr	r2, [pc, #32]	; (9bf8 <SdioCard::stopTransmission(bool)+0x84>)
    9bd6:	movs	r1, #10
      m_busyFcn = 0;
    9bd8:	movs	r0, #0
  m_errorLine = line;
    9bda:	ldr	r3, [pc, #32]	; (9bfc <SdioCard::stopTransmission(bool)+0x88>)
  m_errorCode = code;
    9bdc:	strb	r1, [r2, #0]
  m_errorLine = line;
    9bde:	movw	r2, #1022	; 0x3fe
      m_busyFcn = 0;
    9be2:	str	r0, [r6, #0]
  m_errorLine = line;
    9be4:	str	r2, [r3, #0]
      return sdError(SD_CARD_ERROR_CMD13);
    9be6:	b.n	9ba0 <SdioCard::stopTransmission(bool)+0x2c>
  m_busyFcn = 0;
    9be8:	movs	r3, #0
  return true;
    9bea:	mov	r0, r5
  m_busyFcn = 0;
    9bec:	str	r3, [r6, #0]
  return false;  // Caller will set errorCode.
    9bee:	b.n	9ba0 <SdioCard::stopTransmission(bool)+0x2c>
    9bf0:	.word	0x402c0000
    9bf4:	.word	0x0cdb0000
    9bf8:	.word	0x20001a44
    9bfc:	.word	0x20005c88
    9c00:	.word	0x00008a01
    9c04:	.word	0x200063fc
    9c08:	.word	0x000f4240

00009c0c <SdioCard::syncDevice()>:
  if (!m_transferActive) {
    9c0c:	ldr	r3, [pc, #40]	; (9c38 <SdioCard::syncDevice()+0x2c>)
    9c0e:	ldrb	r3, [r3, #0]
bool SdioCard::syncDevice() {
    9c10:	push	{r4, lr}
    9c12:	mov	r4, r0
  if (!m_transferActive) {
    9c14:	cbnz	r3, 9c1e <SdioCard::syncDevice()+0x12>
  if (m_curState != IDLE_STATE) {
    9c16:	ldrb	r3, [r4, #9]
    9c18:	cbnz	r3, 9c2c <SdioCard::syncDevice()+0x20>
  return true;
    9c1a:	movs	r0, #1
}
    9c1c:	pop	{r4, pc}
    9c1e:	bl	8c9c <waitTransferComplete() [clone .part.0]>
  if (!waitTransferComplete()) {
    9c22:	cmp	r0, #0
    9c24:	beq.n	9c1c <SdioCard::syncDevice()+0x10>
  if (m_curState != IDLE_STATE) {
    9c26:	ldrb	r3, [r4, #9]
    9c28:	cmp	r3, #0
    9c2a:	beq.n	9c1a <SdioCard::syncDevice()+0xe>
    return stopTransmission(true);
    9c2c:	mov	r0, r4
    9c2e:	movs	r1, #1
}
    9c30:	ldmia.w	sp!, {r4, lr}
    return stopTransmission(true);
    9c34:	b.w	9b74 <SdioCard::stopTransmission(bool)>
    9c38:	.word	0x20007b59

00009c3c <SdioCard::erase(unsigned long, unsigned long)>:
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    9c3c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (m_curState != IDLE_STATE && !syncDevice()) {
    9c40:	ldrb	r3, [r0, #9]
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    9c42:	mov	r5, r1
    9c44:	mov	r6, r2
  if (m_curState != IDLE_STATE && !syncDevice()) {
    9c46:	cbz	r3, 9c78 <SdioCard::erase(unsigned long, unsigned long)+0x3c>
    9c48:	ldr	r3, [r0, #0]
    9c4a:	mov	r4, r0
    9c4c:	ldr	r2, [pc, #252]	; (9d4c <SdioCard::erase(unsigned long, unsigned long)+0x110>)
    9c4e:	ldr	r3, [r3, #28]
    9c50:	cmp	r3, r2
    9c52:	bne.n	9cea <SdioCard::erase(unsigned long, unsigned long)+0xae>
  if (!m_transferActive) {
    9c54:	ldr	r3, [pc, #248]	; (9d50 <SdioCard::erase(unsigned long, unsigned long)+0x114>)
    9c56:	ldrb	r3, [r3, #0]
    9c58:	cbnz	r3, 9c6a <SdioCard::erase(unsigned long, unsigned long)+0x2e>
    return stopTransmission(true);
    9c5a:	movs	r1, #1
    9c5c:	mov	r0, r4
    9c5e:	bl	9b74 <SdioCard::stopTransmission(bool)>
  if (m_curState != IDLE_STATE && !syncDevice()) {
    9c62:	cbnz	r0, 9c78 <SdioCard::erase(unsigned long, unsigned long)+0x3c>
    return false;
    9c64:	movs	r0, #0
}
    9c66:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9c6a:	bl	8c9c <waitTransferComplete() [clone .part.0]>
  if (!waitTransferComplete()) {
    9c6e:	cmp	r0, #0
    9c70:	beq.n	9c64 <SdioCard::erase(unsigned long, unsigned long)+0x28>
  if (m_curState != IDLE_STATE) {
    9c72:	ldrb	r3, [r4, #9]
    9c74:	cmp	r3, #0
    9c76:	bne.n	9c5a <SdioCard::erase(unsigned long, unsigned long)+0x1e>
  bool eraseSingleBlock() const { return csd[10] & 0X40; }
    9c78:	ldr	r4, [pc, #216]	; (9d54 <SdioCard::erase(unsigned long, unsigned long)+0x118>)
    9c7a:	ldrb	r3, [r4, #10]
  if (!m_csd.eraseSingleBlock()) {
    9c7c:	ands.w	r0, r3, #64	; 0x40
    9c80:	bne.n	9ca8 <SdioCard::erase(unsigned long, unsigned long)+0x6c>
  int eraseSize() const { return ((csd[10] & 0X3F) << 1 | csd[11] >> 7) + 1; }
    9c82:	lsls	r3, r3, #1
    9c84:	ldrb	r2, [r4, #11]
    9c86:	and.w	r3, r3, #126	; 0x7e
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    9c8a:	orr.w	r3, r3, r2, lsr #7
    9c8e:	adds	r2, r6, #1
    9c90:	orrs	r2, r5
    9c92:	tst	r3, r2
    9c94:	beq.n	9ca8 <SdioCard::erase(unsigned long, unsigned long)+0x6c>
  m_errorCode = code;
    9c96:	ldr	r1, [pc, #192]	; (9d58 <SdioCard::erase(unsigned long, unsigned long)+0x11c>)
    9c98:	movs	r4, #40	; 0x28
  m_errorLine = line;
    9c9a:	ldr	r3, [pc, #192]	; (9d5c <SdioCard::erase(unsigned long, unsigned long)+0x120>)
    9c9c:	movw	r2, #813	; 0x32d
  m_errorCode = code;
    9ca0:	strb	r4, [r1, #0]
  m_errorLine = line;
    9ca2:	str	r2, [r3, #0]
}
    9ca4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!m_highCapacity) {
    9ca8:	ldr	r3, [pc, #180]	; (9d60 <SdioCard::erase(unsigned long, unsigned long)+0x124>)
    9caa:	ldrb	r3, [r3, #0]
    9cac:	cbnz	r3, 9cb2 <SdioCard::erase(unsigned long, unsigned long)+0x76>
    firstSector <<= 9;
    9cae:	lsls	r5, r5, #9
    lastSector <<= 9;
    9cb0:	lsls	r6, r6, #9
  if (!cardCommand(CMD32_XFERTYP, firstSector)) {
    9cb2:	mov	r1, r5
    9cb4:	ldr	r0, [pc, #172]	; (9d64 <SdioCard::erase(unsigned long, unsigned long)+0x128>)
    9cb6:	bl	8dd8 <cardCommand(unsigned long, unsigned long)>
    9cba:	cbnz	r0, 9cce <SdioCard::erase(unsigned long, unsigned long)+0x92>
  m_errorCode = code;
    9cbc:	ldr	r1, [pc, #152]	; (9d58 <SdioCard::erase(unsigned long, unsigned long)+0x11c>)
    9cbe:	movs	r4, #15
  m_errorLine = line;
    9cc0:	ldr	r3, [pc, #152]	; (9d5c <SdioCard::erase(unsigned long, unsigned long)+0x120>)
    9cc2:	movw	r2, #821	; 0x335
  m_errorCode = code;
    9cc6:	strb	r4, [r1, #0]
  m_errorLine = line;
    9cc8:	str	r2, [r3, #0]
}
    9cca:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!cardCommand(CMD33_XFERTYP, lastSector)) {
    9cce:	mov	r1, r6
    9cd0:	ldr	r0, [pc, #148]	; (9d68 <SdioCard::erase(unsigned long, unsigned long)+0x12c>)
    9cd2:	bl	8dd8 <cardCommand(unsigned long, unsigned long)>
    9cd6:	cbnz	r0, 9cf2 <SdioCard::erase(unsigned long, unsigned long)+0xb6>
  m_errorCode = code;
    9cd8:	ldr	r1, [pc, #124]	; (9d58 <SdioCard::erase(unsigned long, unsigned long)+0x11c>)
    9cda:	movs	r4, #16
  m_errorLine = line;
    9cdc:	ldr	r3, [pc, #124]	; (9d5c <SdioCard::erase(unsigned long, unsigned long)+0x120>)
    9cde:	mov.w	r2, #824	; 0x338
  m_errorCode = code;
    9ce2:	strb	r4, [r1, #0]
  m_errorLine = line;
    9ce4:	str	r2, [r3, #0]
}
    9ce6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (m_curState != IDLE_STATE && !syncDevice()) {
    9cea:	blx	r3
    9cec:	cmp	r0, #0
    9cee:	beq.n	9c64 <SdioCard::erase(unsigned long, unsigned long)+0x28>
    9cf0:	b.n	9c78 <SdioCard::erase(unsigned long, unsigned long)+0x3c>
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    9cf2:	movs	r1, #0
    9cf4:	ldr	r0, [pc, #116]	; (9d6c <SdioCard::erase(unsigned long, unsigned long)+0x130>)
    9cf6:	bl	8dd8 <cardCommand(unsigned long, unsigned long)>
    9cfa:	cbnz	r0, 9d0c <SdioCard::erase(unsigned long, unsigned long)+0xd0>
  m_errorCode = code;
    9cfc:	ldr	r1, [pc, #88]	; (9d58 <SdioCard::erase(unsigned long, unsigned long)+0x11c>)
    9cfe:	movs	r4, #17
  m_errorLine = line;
    9d00:	ldr	r3, [pc, #88]	; (9d5c <SdioCard::erase(unsigned long, unsigned long)+0x120>)
    9d02:	movw	r2, #827	; 0x33b
  m_errorCode = code;
    9d06:	strb	r4, [r1, #0]
  m_errorLine = line;
    9d08:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD38);
    9d0a:	b.n	9ca4 <SdioCard::erase(unsigned long, unsigned long)+0x68>
  uint32_t m = micros();
    9d0c:	bl	b86c <micros>
    9d10:	ldr	r6, [pc, #92]	; (9d70 <SdioCard::erase(unsigned long, unsigned long)+0x134>)
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    9d12:	ldr	r5, [pc, #96]	; (9d74 <SdioCard::erase(unsigned long, unsigned long)+0x138>)
  uint32_t m = micros();
    9d14:	mov	r4, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    9d16:	ldr.w	r8, [pc, #100]	; 9d7c <SdioCard::erase(unsigned long, unsigned long)+0x140>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    9d1a:	ldr	r7, [pc, #92]	; (9d78 <SdioCard::erase(unsigned long, unsigned long)+0x13c>)
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    9d1c:	ldr	r1, [r6, #0]
    9d1e:	mov	r0, r5
    9d20:	bl	8dd8 <cardCommand(unsigned long, unsigned long)>
    9d24:	cbz	r0, 9d2e <SdioCard::erase(unsigned long, unsigned long)+0xf2>
    9d26:	ldr.w	r3, [r8, #16]
  while (fcn()) {
    9d2a:	lsls	r3, r3, #23
    9d2c:	bmi.n	9ca4 <SdioCard::erase(unsigned long, unsigned long)+0x68>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    9d2e:	bl	b86c <micros>
    9d32:	subs	r0, r0, r4
    9d34:	cmp	r0, r7
    9d36:	bls.n	9d1c <SdioCard::erase(unsigned long, unsigned long)+0xe0>
  m_errorCode = code;
    9d38:	ldr	r1, [pc, #28]	; (9d58 <SdioCard::erase(unsigned long, unsigned long)+0x11c>)
    9d3a:	movs	r4, #41	; 0x29
  m_errorLine = line;
    9d3c:	ldr	r3, [pc, #28]	; (9d5c <SdioCard::erase(unsigned long, unsigned long)+0x120>)
    9d3e:	movw	r2, #830	; 0x33e
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
    9d42:	movs	r0, #0
  m_errorCode = code;
    9d44:	strb	r4, [r1, #0]
  m_errorLine = line;
    9d46:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
    9d48:	b.n	9ca4 <SdioCard::erase(unsigned long, unsigned long)+0x68>
    9d4a:	nop
    9d4c:	.word	0x00009c0d
    9d50:	.word	0x20007b59
    9d54:	.word	0x2000619c
    9d58:	.word	0x20001a44
    9d5c:	.word	0x20005c88
    9d60:	.word	0x20007b58
    9d64:	.word	0x201a0000
    9d68:	.word	0x211a0000
    9d6c:	.word	0x261b0000
    9d70:	.word	0x200061b0
    9d74:	.word	0x0d1a0000
    9d78:	.word	0x000f4240
    9d7c:	.word	0x402c0000

00009d80 <SdioCard::readSector(unsigned long, unsigned char*)>:
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    9d80:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9d84:	mov	r4, r0
    9d86:	ldrb	r0, [r0, #8]
    9d88:	sub.w	sp, sp, #512	; 0x200
    9d8c:	mov	r6, r2
  if (m_sdioConfig.useDma()) {
    9d8e:	ands.w	r5, r0, #1
    9d92:	beq.n	9dbc <SdioCard::readSector(unsigned long, unsigned char*)+0x3c>
    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;
    9d94:	lsls	r3, r2, #30
    9d96:	beq.n	9e12 <SdioCard::readSector(unsigned long, unsigned char*)+0x92>
    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    9d98:	movs	r3, #1
    9d9a:	ldr	r0, [pc, #224]	; (9e7c <SdioCard::readSector(unsigned long, unsigned char*)+0xfc>)
    9d9c:	mov	r2, sp
    9d9e:	bl	91ec <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    9da2:	cmp	r0, #0
    9da4:	beq.n	9e1c <SdioCard::readSector(unsigned long, unsigned char*)+0x9c>
      memcpy(dst, aligned, 512);
    9da6:	mov.w	r2, #512	; 0x200
    9daa:	mov	r1, sp
    9dac:	mov	r0, r6
    9dae:	bl	a0c4 <memcpy>
}
    9db2:	mov	r0, r5
    9db4:	add.w	sp, sp, #512	; 0x200
    9db8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!m_transferActive) {
    9dbc:	ldr.w	r8, [pc, #204]	; 9e8c <SdioCard::readSector(unsigned long, unsigned char*)+0x10c>
    9dc0:	mov	r7, r1
    9dc2:	ldrb.w	r3, [r8]
    9dc6:	cmp	r3, #0
    9dc8:	bne.n	9e36 <SdioCard::readSector(unsigned long, unsigned char*)+0xb6>
    if (m_curState != READ_STATE || sector != m_curSector) {
    9dca:	ldrb	r3, [r4, #9]
    9dcc:	cmp	r3, #1
    9dce:	beq.n	9e44 <SdioCard::readSector(unsigned long, unsigned char*)+0xc4>
      if (!syncDevice()) {
    9dd0:	ldr	r2, [r4, #0]
    9dd2:	ldr	r1, [pc, #172]	; (9e80 <SdioCard::readSector(unsigned long, unsigned char*)+0x100>)
    9dd4:	ldr	r2, [r2, #28]
    9dd6:	cmp	r2, r1
    9dd8:	bne.n	9e70 <SdioCard::readSector(unsigned long, unsigned char*)+0xf0>
  if (!m_transferActive) {
    9dda:	ldrb.w	r2, [r8]
    9dde:	cmp	r2, #0
    9de0:	bne.n	9e4c <SdioCard::readSector(unsigned long, unsigned char*)+0xcc>
  if (m_curState != IDLE_STATE) {
    9de2:	cmp	r3, #0
    9de4:	bne.n	9e5a <SdioCard::readSector(unsigned long, unsigned char*)+0xda>
      if (!readStart(sector)) {
    9de6:	mov	r1, r7
    9de8:	mov	r0, r4
    9dea:	bl	9aa0 <SdioCard::readStart(unsigned long)>
    9dee:	cbz	r0, 9e2c <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
      m_curState = READ_STATE;
    9df0:	movs	r3, #1
      m_curSector = sector;
    9df2:	str	r7, [r4, #4]
      m_curState = READ_STATE;
    9df4:	strb	r3, [r4, #9]
    if (!readData(dst)) {
    9df6:	mov	r1, r6
    9df8:	mov	r0, r4
    9dfa:	bl	99a4 <SdioCard::readData(unsigned char*)>
    9dfe:	cbz	r0, 9e2c <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
    m_curSector++;
    9e00:	ldr	r3, [r4, #4]
  return true;
    9e02:	mov	r5, r0
    m_curSector++;
    9e04:	adds	r3, #1
}
    9e06:	mov	r0, r5
    m_curSector++;
    9e08:	str	r3, [r4, #4]
}
    9e0a:	add.w	sp, sp, #512	; 0x200
    9e0e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    9e12:	movs	r3, #1
    9e14:	ldr	r0, [pc, #100]	; (9e7c <SdioCard::readSector(unsigned long, unsigned char*)+0xfc>)
    9e16:	bl	91ec <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    9e1a:	cbnz	r0, 9e2c <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
  m_errorCode = code;
    9e1c:	ldr	r1, [pc, #100]	; (9e84 <SdioCard::readSector(unsigned long, unsigned char*)+0x104>)
    9e1e:	movs	r0, #11
  m_errorLine = line;
    9e20:	ldr	r3, [pc, #100]	; (9e88 <SdioCard::readSector(unsigned long, unsigned char*)+0x108>)
    9e22:	movw	r2, #929	; 0x3a1
      return sdError(SD_CARD_ERROR_CMD17);
    9e26:	movs	r5, #0
  m_errorCode = code;
    9e28:	strb	r0, [r1, #0]
  m_errorLine = line;
    9e2a:	str	r2, [r3, #0]
}
    9e2c:	mov	r0, r5
    9e2e:	add.w	sp, sp, #512	; 0x200
    9e32:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9e36:	bl	8c9c <waitTransferComplete() [clone .part.0]>
    if (!waitTransferComplete()) {
    9e3a:	cmp	r0, #0
    9e3c:	beq.n	9e2c <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
    if (m_curState != READ_STATE || sector != m_curSector) {
    9e3e:	ldrb	r3, [r4, #9]
    9e40:	cmp	r3, #1
    9e42:	bne.n	9dd0 <SdioCard::readSector(unsigned long, unsigned char*)+0x50>
    9e44:	ldr	r2, [r4, #4]
    9e46:	cmp	r2, r7
    9e48:	bne.n	9dd0 <SdioCard::readSector(unsigned long, unsigned char*)+0x50>
    9e4a:	b.n	9df6 <SdioCard::readSector(unsigned long, unsigned char*)+0x76>
    9e4c:	bl	8c9c <waitTransferComplete() [clone .part.0]>
  if (!waitTransferComplete()) {
    9e50:	cmp	r0, #0
    9e52:	beq.n	9e2c <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
  if (m_curState != IDLE_STATE) {
    9e54:	ldrb	r3, [r4, #9]
    9e56:	cmp	r3, #0
    9e58:	beq.n	9de6 <SdioCard::readSector(unsigned long, unsigned char*)+0x66>
    return stopTransmission(true);
    9e5a:	movs	r1, #1
    9e5c:	mov	r0, r4
    9e5e:	bl	9b74 <SdioCard::stopTransmission(bool)>
      if (!syncDevice()) {
    9e62:	cmp	r0, #0
    9e64:	bne.n	9de6 <SdioCard::readSector(unsigned long, unsigned char*)+0x66>
}
    9e66:	mov	r0, r5
    9e68:	add.w	sp, sp, #512	; 0x200
    9e6c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (!syncDevice()) {
    9e70:	mov	r0, r4
    9e72:	blx	r2
    9e74:	cmp	r0, #0
    9e76:	beq.n	9e66 <SdioCard::readSector(unsigned long, unsigned char*)+0xe6>
    9e78:	b.n	9de6 <SdioCard::readSector(unsigned long, unsigned char*)+0x66>
    9e7a:	nop
    9e7c:	.word	0x113a0011
    9e80:	.word	0x00009c0d
    9e84:	.word	0x20001a44
    9e88:	.word	0x20005c88
    9e8c:	.word	0x20007b59

00009e90 <SdioCard::writeSector(unsigned long, unsigned char const*)>:
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    9e90:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9e94:	ldrb	r4, [r0, #8]
    9e96:	sub.w	sp, sp, #512	; 0x200
    9e9a:	mov	r7, r1
    9e9c:	mov	r8, r2
  if (m_sdioConfig.useDma()) {
    9e9e:	ands.w	r4, r4, #1
    9ea2:	beq.n	9ee0 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x50>
    if (3 & (uint32_t)src) {
    9ea4:	tst.w	r2, #3
    9ea8:	beq.n	9eb8 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x28>
      memcpy(aligned, src, 512);
    9eaa:	mov	r0, sp
    9eac:	mov	r1, r2
    9eae:	mov.w	r2, #512	; 0x200
      ptr = aligned;
    9eb2:	mov	r8, r0
      memcpy(aligned, src, 512);
    9eb4:	bl	a0c4 <memcpy>
    if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
    9eb8:	movs	r3, #1
    9eba:	mov	r2, r8
    9ebc:	mov	r1, r7
    9ebe:	ldr	r0, [pc, #176]	; (9f70 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xe0>)
    9ec0:	bl	91ec <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    9ec4:	mov	r4, r0
    9ec6:	cbnz	r0, 9ed6 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
  m_errorCode = code;
    9ec8:	ldr	r1, [pc, #168]	; (9f74 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xe4>)
    9eca:	movs	r0, #13
  m_errorLine = line;
    9ecc:	ldr	r3, [pc, #168]	; (9f78 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xe8>)
    9ece:	mov.w	r2, #1080	; 0x438
  m_errorCode = code;
    9ed2:	strb	r0, [r1, #0]
  m_errorLine = line;
    9ed4:	str	r2, [r3, #0]
}
    9ed6:	mov	r0, r4
    9ed8:	add.w	sp, sp, #512	; 0x200
    9edc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!m_transferActive) {
    9ee0:	ldr	r5, [pc, #152]	; (9f7c <SdioCard::writeSector(unsigned long, unsigned char const*)+0xec>)
    9ee2:	mov	r6, r0
    9ee4:	ldrb	r3, [r5, #0]
    9ee6:	cbnz	r3, 9f34 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xa4>
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    9ee8:	ldrb	r3, [r6, #9]
    9eea:	cmp	r3, #2
    9eec:	beq.n	9f42 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xb2>
      if (!syncDevice()) {
    9eee:	ldr	r2, [r6, #0]
    9ef0:	ldr	r1, [pc, #140]	; (9f80 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xf0>)
    9ef2:	ldr	r2, [r2, #28]
    9ef4:	cmp	r2, r1
    9ef6:	bne.n	9f66 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xd6>
  if (!m_transferActive) {
    9ef8:	ldrb	r2, [r5, #0]
    9efa:	cbnz	r2, 9f4a <SdioCard::writeSector(unsigned long, unsigned char const*)+0xba>
  if (m_curState != IDLE_STATE) {
    9efc:	cmp	r3, #0
    9efe:	bne.n	9f58 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xc8>
      if (!writeStart(sector)) {
    9f00:	ldr	r3, [r6, #0]
    9f02:	mov	r1, r7
    9f04:	mov	r0, r6
    9f06:	ldr	r3, [r3, #100]	; 0x64
    9f08:	blx	r3
    9f0a:	cmp	r0, #0
    9f0c:	beq.n	9ed6 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
      m_curState = WRITE_STATE;
    9f0e:	movs	r3, #2
      m_curSector = sector;
    9f10:	str	r7, [r6, #4]
      m_curState = WRITE_STATE;
    9f12:	strb	r3, [r6, #9]
    if (!writeData(src)) {
    9f14:	ldr	r3, [r6, #0]
    9f16:	mov	r1, r8
    9f18:	mov	r0, r6
    9f1a:	ldr	r3, [r3, #96]	; 0x60
    9f1c:	blx	r3
    9f1e:	cmp	r0, #0
    9f20:	beq.n	9ed6 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
    m_curSector++;
    9f22:	ldr	r3, [r6, #4]
  return true;
    9f24:	mov	r4, r0
    m_curSector++;
    9f26:	adds	r3, #1
}
    9f28:	mov	r0, r4
    m_curSector++;
    9f2a:	str	r3, [r6, #4]
}
    9f2c:	add.w	sp, sp, #512	; 0x200
    9f30:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9f34:	bl	8c9c <waitTransferComplete() [clone .part.0]>
    if (!waitTransferComplete()) {
    9f38:	cmp	r0, #0
    9f3a:	beq.n	9ed6 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    9f3c:	ldrb	r3, [r6, #9]
    9f3e:	cmp	r3, #2
    9f40:	bne.n	9eee <SdioCard::writeSector(unsigned long, unsigned char const*)+0x5e>
    9f42:	ldr	r2, [r6, #4]
    9f44:	cmp	r2, r7
    9f46:	bne.n	9eee <SdioCard::writeSector(unsigned long, unsigned char const*)+0x5e>
    9f48:	b.n	9f14 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x84>
    9f4a:	bl	8c9c <waitTransferComplete() [clone .part.0]>
  if (!waitTransferComplete()) {
    9f4e:	cmp	r0, #0
    9f50:	beq.n	9ed6 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
  if (m_curState != IDLE_STATE) {
    9f52:	ldrb	r3, [r6, #9]
    9f54:	cmp	r3, #0
    9f56:	beq.n	9f00 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x70>
    return stopTransmission(true);
    9f58:	movs	r1, #1
    9f5a:	mov	r0, r6
    9f5c:	bl	9b74 <SdioCard::stopTransmission(bool)>
      if (!syncDevice()) {
    9f60:	cmp	r0, #0
    9f62:	beq.n	9ed6 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
    9f64:	b.n	9f00 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x70>
    9f66:	mov	r0, r6
    9f68:	blx	r2
    9f6a:	cmp	r0, #0
    9f6c:	beq.n	9ed6 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
    9f6e:	b.n	9f00 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x70>
    9f70:	.word	0x183a0001
    9f74:	.word	0x20001a44
    9f78:	.word	0x20005c88
    9f7c:	.word	0x20007b59
    9f80:	.word	0x00009c0d

00009f84 <SdSpiArduinoDriver::activate()>:
 */
#include "SdSpiDriver.h"
#if defined(SD_USE_CUSTOM_SPI) && defined(__arm__) && defined(CORE_TEENSY)
#define USE_BLOCK_TRANSFER 1
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::activate() { m_spi->beginTransaction(m_spiSettings); }
    9f84:	push	{r3, lr}
    9f86:	mov	r3, r0
    9f88:	ldr.w	r0, [r3], #4
    9f8c:	ldmia.w	r3, {r1, r2}
    9f90:	bl	1d60 <SPIClass::beginTransaction(SPISettings)>
    9f94:	pop	{r3, pc}
    9f96:	nop

00009f98 <SdSpiArduinoDriver::begin(SdSpiConfig)>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::begin(SdSpiConfig spiConfig) {
    9f98:	sub	sp, #16
    9f9a:	add.w	ip, sp, #16
    9f9e:	stmdb	ip, {r1, r2, r3}
    9fa2:	mov	r2, r0
  if (spiConfig.spiPort) {
    9fa4:	cbz	r3, 9fb0 <SdSpiArduinoDriver::begin(SdSpiConfig)+0x18>
    m_spi->setSCK(SDCARD_SCK_PIN);
#endif  // defined(SDCARD_SPI) && defined(SDCARD_SS_PIN)
  } else {
    m_spi = &SPI;
  }
  m_spi->begin();
    9fa6:	mov	r0, r3
    9fa8:	str	r3, [r2, #0]
}
    9faa:	add	sp, #16
  m_spi->begin();
    9fac:	b.w	26b0 <SPIClass::begin()>
    m_spi = &SPI;
    9fb0:	ldr	r3, [pc, #8]	; (9fbc <SdSpiArduinoDriver::begin(SdSpiConfig)+0x24>)
  m_spi->begin();
    9fb2:	mov	r0, r3
    9fb4:	str	r3, [r2, #0]
}
    9fb6:	add	sp, #16
  m_spi->begin();
    9fb8:	b.w	26b0 <SPIClass::begin()>
    9fbc:	.word	0x200057d0

00009fc0 <SdSpiArduinoDriver::deactivate()>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::deactivate() { m_spi->endTransaction(); }
    9fc0:	ldr	r2, [r0, #0]
		if (interruptMasksUsed) {
    9fc2:	ldrb	r3, [r2, #19]
    9fc4:	cbz	r3, a00c <SdSpiArduinoDriver::deactivate()+0x4c>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    9fc6:	lsls	r0, r3, #31
    9fc8:	bpl.n	9fd4 <SdSpiArduinoDriver::deactivate()+0x14>
    9fca:	ldr	r0, [r2, #40]	; 0x28
    9fcc:	mov.w	r1, #3758153728	; 0xe000e000
    9fd0:	str.w	r0, [r1, #256]	; 0x100
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    9fd4:	lsls	r1, r3, #30
    9fd6:	bpl.n	9fe2 <SdSpiArduinoDriver::deactivate()+0x22>
    9fd8:	ldr	r0, [r2, #44]	; 0x2c
    9fda:	mov.w	r1, #3758153728	; 0xe000e000
    9fde:	str.w	r0, [r1, #260]	; 0x104
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    9fe2:	lsls	r0, r3, #29
    9fe4:	bpl.n	9ff0 <SdSpiArduinoDriver::deactivate()+0x30>
    9fe6:	ldr	r0, [r2, #48]	; 0x30
    9fe8:	mov.w	r1, #3758153728	; 0xe000e000
    9fec:	str.w	r0, [r1, #264]	; 0x108
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    9ff0:	lsls	r1, r3, #28
    9ff2:	bpl.n	9ffe <SdSpiArduinoDriver::deactivate()+0x3e>
    9ff4:	ldr	r0, [r2, #52]	; 0x34
    9ff6:	mov.w	r1, #3758153728	; 0xe000e000
    9ffa:	str.w	r0, [r1, #268]	; 0x10c
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    9ffe:	lsls	r3, r3, #27
    a000:	bpl.n	a00c <SdSpiArduinoDriver::deactivate()+0x4c>
    a002:	ldr	r2, [r2, #56]	; 0x38
    a004:	mov.w	r3, #3758153728	; 0xe000e000
    a008:	str.w	r2, [r3, #272]	; 0x110
    a00c:	bx	lr
    a00e:	nop

0000a010 <SdSpiArduinoDriver::end()>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::end() { m_spi->end(); }
    a010:	ldr	r0, [r0, #0]
    a012:	b.w	28ec <SPIClass::end()>
    a016:	nop

0000a018 <SdSpiArduinoDriver::receive()>:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    a018:	ldr	r2, [r0, #0]
		port().TDR = data;
    a01a:	movs	r3, #255	; 0xff
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    a01c:	ldr	r2, [r2, #0]
		port().TDR = data;
    a01e:	str	r3, [r2, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    a020:	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    a022:	tst.w	r3, #2031616	; 0x1f0000
    a026:	beq.n	a020 <SdSpiArduinoDriver::receive()+0x8>
    a028:	ldr	r0, [r2, #116]	; 0x74
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive() { return m_spi->transfer(0XFF); }
    a02a:	uxtb	r0, r0
    a02c:	bx	lr
    a02e:	nop

0000a030 <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>:
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
    a030:	push	{r4, r5, lr}
    a032:	mov	r4, r1
    a034:	sub	sp, #12
    a036:	mov	r5, r0
#if USE_BLOCK_TRANSFER
  memset(buf, 0XFF, count);
    a038:	movs	r1, #255	; 0xff
    a03a:	mov	r0, r4
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
    a03c:	str	r2, [sp, #4]
  memset(buf, 0XFF, count);
    a03e:	bl	e064 <memset>
		transfer(buf, buf, count);
    a042:	ldr	r0, [r5, #0]
    a044:	ldr	r3, [sp, #4]
    a046:	mov	r2, r4
    a048:	mov	r1, r4
    a04a:	bl	28e4 <SPIClass::transfer(void const*, void*, unsigned int)>
  for (size_t i = 0; i < count; i++) {
    buf[i] = m_spi->transfer(0XFF);
  }
#endif  // USE_BLOCK_TRANSFER
  return 0;
}
    a04e:	movs	r0, #0
    a050:	add	sp, #12
    a052:	pop	{r4, r5, pc}

0000a054 <SdSpiArduinoDriver::send(unsigned char)>:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    a054:	ldr	r3, [r0, #0]
    a056:	ldr	r2, [r3, #0]
		port().TDR = data;
    a058:	str	r1, [r2, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    a05a:	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    a05c:	tst.w	r3, #2031616	; 0x1f0000
    a060:	beq.n	a05a <SdSpiArduinoDriver::send(unsigned char)+0x6>
    a062:	ldr	r3, [r2, #116]	; 0x74
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(uint8_t data) { m_spi->transfer(data); }
    a064:	bx	lr
    a066:	nop

0000a068 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf, size_t count) {
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    a068:	subs	r3, r2, #1
    a06a:	cmp.w	r3, #512	; 0x200
void SdSpiArduinoDriver::send(const uint8_t* buf, size_t count) {
    a06e:	push	{r4, r5, lr}
    a070:	mov	r4, r2
    a072:	sub.w	sp, sp, #516	; 0x204
    a076:	mov	r5, r0
  if (0 < count && count <= 512) {
    a078:	bcc.n	a09e <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x36>
    memcpy(tmp, buf, count);
    m_spi->transfer(tmp, count);
    return;
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    a07a:	cbz	r2, a098 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x30>
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    a07c:	ldr	r3, [r0, #0]
    a07e:	subs	r0, r1, #1
    a080:	ldr	r1, [r3, #0]
    a082:	adds	r2, r0, r2
		port().TDR = data;
    a084:	ldrb.w	r3, [r0, #1]!
    a088:	str	r3, [r1, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    a08a:	ldr	r3, [r1, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    a08c:	tst.w	r3, #2031616	; 0x1f0000
    a090:	beq.n	a08a <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x22>
    a092:	cmp	r0, r2
    a094:	ldr	r3, [r1, #116]	; 0x74
    a096:	bne.n	a084 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x1c>
    m_spi->transfer(buf[i]);
  }
}
    a098:	add.w	sp, sp, #516	; 0x204
    a09c:	pop	{r4, r5, pc}
    memcpy(tmp, buf, count);
    a09e:	mov	r0, sp
    a0a0:	bl	a0c4 <memcpy>
		transfer(buf, buf, count);
    a0a4:	mov	r2, sp
    a0a6:	mov	r3, r4
    a0a8:	ldr	r0, [r5, #0]
    a0aa:	mov	r1, r2
    a0ac:	bl	28e4 <SPIClass::transfer(void const*, void*, unsigned int)>
}
    a0b0:	add.w	sp, sp, #516	; 0x204
    a0b4:	pop	{r4, r5, pc}
    a0b6:	nop

0000a0b8 <sdCsInit(unsigned char)>:
 */
#include "SdSpiDriver.h"
#if ENABLE_ARDUINO_FEATURES
#if SD_CHIP_SELECT_MODE == 0
//------------------------------------------------------------------------------
void sdCsInit(SdCsPin_t pin) { pinMode(pin, OUTPUT); }
    a0b8:	movs	r1, #1
    a0ba:	b.w	bc70 <pinMode>
    a0be:	nop

0000a0c0 <sdCsWrite(unsigned char, bool)>:
//------------------------------------------------------------------------------
void sdCsWrite(SdCsPin_t pin, bool level) { digitalWrite(pin, level); }
    a0c0:	b.w	bbf8 <digitalWrite>

0000a0c4 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    a0c4:	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    a0c6:	orr.w	r3, r1, r0
	ands	r3, r3, #3
    a0ca:	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    a0ce:	bne.n	a1ac <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    a0d0:	subs	r2, #64	; 0x40
	blo	.Lmid_block
    a0d2:	bcc.n	a158 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    a0d4:	ldr.w	r3, [r1], #4
    a0d8:	str.w	r3, [r0], #4
    a0dc:	ldr.w	r3, [r1], #4
    a0e0:	str.w	r3, [r0], #4
    a0e4:	ldr.w	r3, [r1], #4
    a0e8:	str.w	r3, [r0], #4
    a0ec:	ldr.w	r3, [r1], #4
    a0f0:	str.w	r3, [r0], #4
    a0f4:	ldr.w	r3, [r1], #4
    a0f8:	str.w	r3, [r0], #4
    a0fc:	ldr.w	r3, [r1], #4
    a100:	str.w	r3, [r0], #4
    a104:	ldr.w	r3, [r1], #4
    a108:	str.w	r3, [r0], #4
    a10c:	ldr.w	r3, [r1], #4
    a110:	str.w	r3, [r0], #4
    a114:	ldr.w	r3, [r1], #4
    a118:	str.w	r3, [r0], #4
    a11c:	ldr.w	r3, [r1], #4
    a120:	str.w	r3, [r0], #4
    a124:	ldr.w	r3, [r1], #4
    a128:	str.w	r3, [r0], #4
    a12c:	ldr.w	r3, [r1], #4
    a130:	str.w	r3, [r0], #4
    a134:	ldr.w	r3, [r1], #4
    a138:	str.w	r3, [r0], #4
    a13c:	ldr.w	r3, [r1], #4
    a140:	str.w	r3, [r0], #4
    a144:	ldr.w	r3, [r1], #4
    a148:	str.w	r3, [r0], #4
    a14c:	ldr.w	r3, [r1], #4
    a150:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    a154:	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    a156:	bcs.n	a0d4 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    a158:	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    a15a:	bcc.n	a180 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    a15c:	ldr.w	r3, [r1], #4
    a160:	str.w	r3, [r0], #4
    a164:	ldr.w	r3, [r1], #4
    a168:	str.w	r3, [r0], #4
    a16c:	ldr.w	r3, [r1], #4
    a170:	str.w	r3, [r0], #4
    a174:	ldr.w	r3, [r1], #4
    a178:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    a17c:	subs	r2, #16
	bhs	.Lmid_block_loop
    a17e:	bcs.n	a15c <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    a180:	adds	r2, #12
	blo	.Lcopy_less_than_4
    a182:	bcc.n	a190 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    a184:	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    a188:	str.w	r3, [r0], #4
	subs	r2, #4
    a18c:	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    a18e:	bcs.n	a184 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    a190:	adds	r2, #4
	beq	.Ldone
    a192:	beq.n	a1a6 <memcpy+0xe2>

	lsls	r2, r2, #31
    a194:	lsls	r2, r2, #31
	itt ne
    a196:	itt	ne
	ldrbne  r3, [r1], #1
    a198:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    a19c:	strbne.w	r3, [r0], #1

	bcc	.Ldone
    a1a0:	bcc.n	a1a6 <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    a1a2:	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    a1a4:	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    a1a6:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    a1a8:	bx	lr
    a1aa:	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    a1ac:	cmp	r2, #8
	blo	.Lbyte_copy
    a1ae:	bcc.n	a1d8 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    a1b0:	lsls	r3, r1, #30
	beq	.Ldst_aligned
    a1b2:	beq.n	a0d0 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    a1b4:	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    a1b8:	beq.n	a0d0 <memcpy+0xc>

	rsb	r3, #4
    a1ba:	rsb	r3, r3, #4
	subs	r2, r3
    a1be:	subs	r2, r2, r3

	lsls    r3, r3, #31
    a1c0:	lsls	r3, r3, #31
	itt ne
    a1c2:	itt	ne
	ldrbne  r3, [r1], #1
    a1c4:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    a1c8:	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    a1cc:	bcc.n	a0d0 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    a1ce:	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    a1d2:	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    a1d6:	b.n	a0d0 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    a1d8:	subs	r2, #4
	blo	.Lcopy_less_than_4
    a1da:	bcc.n	a190 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    a1dc:	subs	r2, #1
	ldrb    r3, [r1], #1
    a1de:	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    a1e2:	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    a1e6:	bcs.n	a1dc <memcpy+0x118>

	ldrb	r3, [r1]
    a1e8:	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    a1ea:	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    a1ec:	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    a1ee:	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    a1f0:	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    a1f2:	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    a1f4:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    a1f6:	bx	lr

0000a1f8 <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    a1f8:	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    a1fa:	ldr	r4, [pc, #80]	; (a24c <rx_queue_transfer+0x54>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    a1fc:	mov.w	r5, #3758153728	; 0xe000e000
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    a200:	ldr	r6, [pc, #76]	; (a250 <rx_queue_transfer+0x58>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    a202:	mov.w	r2, #131072	; 0x20000
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    a206:	add.w	r4, r4, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    a20a:	ldr	r7, [pc, #72]	; (a254 <rx_queue_transfer+0x5c>)
    a20c:	add.w	r6, r6, r0, lsl #5
{
    a210:	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
    a212:	str.w	r2, [r5, #396]	; 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    a216:	mov	r1, r4
    a218:	ldrh	r2, [r7, #0]
    a21a:	mov	r0, r6
    a21c:	bl	b74c <usb_prepare_transfer>
	arm_dcache_delete(buffer, rx_packet_size);
    a220:	ldrh	r3, [r7, #0]
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    a222:	add	r3, r4
	asm volatile("": : :"memory");
	asm("dsb");
    a224:	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
    a228:	str.w	r4, [r5, #3932]	; 0xf5c
		location += 32;
    a22c:	adds	r4, #32
	} while (location < end_addr);
    a22e:	cmp	r3, r4
    a230:	bhi.n	a228 <rx_queue_transfer+0x30>
	asm("dsb");
    a232:	dsb	sy
	asm("isb");
    a236:	isb	sy
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    a23a:	movs	r0, #3
    a23c:	mov	r1, r6
    a23e:	bl	b7a4 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    a242:	mov.w	r3, #131072	; 0x20000
    a246:	str.w	r3, [r5, #268]	; 0x10c
}
    a24a:	pop	{r3, r4, r5, r6, r7, pc}
    a24c:	.word	0x20001f20
    a250:	.word	0x20002f20
    a254:	.word	0x20007b4a

0000a258 <rx_event>:

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    a258:	ldr	r3, [pc, #144]	; (a2ec <rx_event+0x94>)
{
    a25a:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    a25e:	ldrh	r4, [r3, #0]
    a260:	ldr	r3, [r0, #4]
	int i = t->callback_param;
    a262:	ldr	r5, [r0, #28]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    a264:	ubfx	r3, r3, #16, #15
    a268:	subs	r4, r4, r3
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    a26a:	cmp	r4, #0
    a26c:	ble.n	a2b8 <rx_event+0x60>
		// received a packet with data
		uint32_t head = rx_head;
    a26e:	ldr	r1, [pc, #128]	; (a2f0 <rx_event+0x98>)
		if (head != rx_tail) {
    a270:	ldr	r0, [pc, #128]	; (a2f4 <rx_event+0x9c>)
		uint32_t head = rx_head;
    a272:	ldrb	r2, [r1, #0]
		if (head != rx_tail) {
    a274:	ldrb	r0, [r0, #0]
		uint32_t head = rx_head;
    a276:	uxtb	r3, r2
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
    a278:	ldr	r6, [pc, #124]	; (a2f8 <rx_event+0xa0>)
		if (head != rx_tail) {
    a27a:	cmp	r2, r0
			uint32_t ii = rx_list[head];
    a27c:	ldr	r0, [pc, #124]	; (a2fc <rx_event+0xa4>)
		if (head != rx_tail) {
    a27e:	beq.n	a290 <rx_event+0x38>
			uint32_t ii = rx_list[head];
    a280:	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
    a284:	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    a288:	rsb	r2, r7, #512	; 0x200
    a28c:	cmp	r4, r2
    a28e:	bls.n	a2c2 <rx_event+0x6a>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    a290:	adds	r3, #1
		rx_index[i] = 0;
    a292:	movs	r2, #0
		rx_count[i] = len;
    a294:	strh.w	r4, [r6, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
    a298:	cmp	r3, #8
		rx_index[i] = 0;
    a29a:	ldr	r6, [pc, #100]	; (a300 <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
    a29c:	it	hi
    a29e:	movhi	r3, r2
		rx_index[i] = 0;
    a2a0:	strh.w	r2, [r6, r5, lsl #1]
		rx_list[head] = i;
		rx_head = head;
    a2a4:	it	ls
    a2a6:	uxtbls	r2, r3
		rx_list[head] = i;
    a2a8:	strb	r5, [r0, r3]
		rx_available += len;
    a2aa:	ldr	r3, [pc, #88]	; (a304 <rx_event+0xac>)
		rx_head = head;
    a2ac:	strb	r2, [r1, #0]
		rx_available += len;
    a2ae:	ldr	r2, [r3, #0]
    a2b0:	add	r4, r2
    a2b2:	str	r4, [r3, #0]
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
    a2b4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rx_queue_transfer(i);
    a2b8:	mov	r0, r5
}
    a2ba:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_queue_transfer(i);
    a2be:	b.w	a1f8 <rx_queue_transfer>
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    a2c2:	add.w	r0, r7, r8, lsl #9
    a2c6:	ldr	r1, [pc, #64]	; (a308 <rx_event+0xb0>)
    a2c8:	mov	r2, r4
				rx_count[ii] = count + len;
    a2ca:	add	r7, r4
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    a2cc:	add	r0, r1
    a2ce:	add.w	r1, r1, r5, lsl #9
    a2d2:	bl	a0c4 <memcpy>
				rx_available += len;
    a2d6:	ldr	r2, [pc, #44]	; (a304 <rx_event+0xac>)
				rx_queue_transfer(i);
    a2d8:	mov	r0, r5
				rx_count[ii] = count + len;
    a2da:	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
    a2de:	ldr	r3, [r2, #0]
    a2e0:	add	r3, r4
}
    a2e2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				rx_available += len;
    a2e6:	str	r3, [r2, #0]
				rx_queue_transfer(i);
    a2e8:	b.w	a1f8 <rx_queue_transfer>
    a2ec:	.word	0x20007b4a
    a2f0:	.word	0x20007b65
    a2f4:	.word	0x20007b67
    a2f8:	.word	0x20007a88
    a2fc:	.word	0x20007ac0
    a300:	.word	0x20007aa4
    a304:	.word	0x20007a80
    a308:	.word	0x20001f20

0000a30c <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    a30c:	ldr	r3, [pc, #116]	; (a384 <usb_serial_flush_callback+0x78>)
    a30e:	ldrb	r2, [r3, #0]
    a310:	cmp	r2, #0
    a312:	bne.n	a382 <usb_serial_flush_callback+0x76>
	if (!usb_configuration) return;
    a314:	and.w	r3, r2, #255	; 0xff
    a318:	ldr	r2, [pc, #108]	; (a388 <usb_serial_flush_callback+0x7c>)
    a31a:	ldrb	r2, [r2, #0]
    a31c:	cbz	r2, a382 <usb_serial_flush_callback+0x76>
{
    a31e:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_available == 0) return;
    a322:	ldr	r5, [pc, #104]	; (a38c <usb_serial_flush_callback+0x80>)
    a324:	ldrh	r2, [r5, #0]
    a326:	cbz	r2, a37e <usb_serial_flush_callback+0x72>
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    a328:	ldr	r6, [pc, #100]	; (a390 <usb_serial_flush_callback+0x84>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    a32a:	rsb	r8, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    a32e:	ldr	r7, [pc, #100]	; (a394 <usb_serial_flush_callback+0x88>)
    a330:	ldrb	r2, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    a332:	ldr	r4, [pc, #100]	; (a398 <usb_serial_flush_callback+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    a334:	add.w	r7, r7, r2, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    a338:	add.w	r4, r4, r2, lsl #11
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    a33c:	mov	r2, r8
    a33e:	mov	r0, r7
    a340:	mov	r1, r4
    a342:	bl	b74c <usb_prepare_transfer>
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    a346:	add.w	r2, r4, r8
	asm volatile("": : :"memory");
	asm("dsb");
    a34a:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    a34e:	mov.w	r3, #3758153728	; 0xe000e000
    a352:	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    a356:	adds	r4, #32
	} while (location < end_addr);
    a358:	cmp	r2, r4
    a35a:	bhi.n	a352 <usb_serial_flush_callback+0x46>
	asm("dsb");
    a35c:	dsb	sy
	asm("isb");
    a360:	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    a364:	movs	r0, #3
    a366:	mov	r1, r7
    a368:	bl	b77c <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    a36c:	ldrb	r3, [r6, #0]
    a36e:	adds	r3, #1
    a370:	uxtb	r3, r3
    a372:	cmp	r3, #3
    a374:	it	hi
    a376:	movhi	r3, #0
    a378:	strb	r3, [r6, #0]
	tx_available = 0;
    a37a:	movs	r3, #0
    a37c:	strh	r3, [r5, #0]
}
    a37e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a382:	bx	lr
    a384:	.word	0x20007b6e
    a388:	.word	0x20007b75
    a38c:	.word	0x20007b4e
    a390:	.word	0x20007b6c
    a394:	.word	0x20003120
    a398:	.word	0x20003240

0000a39c <usb_serial_write.part.0>:
int usb_serial_write(const void *buffer, uint32_t size)
    a39c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a3a0:	sub	sp, #20
	while (size > 0) {
    a3a2:	strd	r1, r0, [sp, #4]
    a3a6:	cmp	r1, #0
    a3a8:	beq.w	a52a <usb_serial_write.part.0+0x18e>
	uint32_t sent=0;
    a3ac:	movs	r3, #0
    a3ae:	ldr	r4, [pc, #384]	; (a530 <usb_serial_write.part.0+0x194>)
    a3b0:	ldr.w	r8, [pc, #408]	; a54c <usb_serial_write.part.0+0x1b0>
    a3b4:	ldr.w	sl, [pc, #408]	; a550 <usb_serial_write.part.0+0x1b4>
				wait_begin_at = systick_millis_count;
    a3b8:	ldr	r7, [pc, #376]	; (a534 <usb_serial_write.part.0+0x198>)
	uint32_t sent=0;
    a3ba:	str	r3, [sp, #0]
		tx_noautoflush = 1;
    a3bc:	movs	r3, #1
		transfer_t *xfer = tx_transfer + tx_head;
    a3be:	ldr	r2, [pc, #376]	; (a538 <usb_serial_write.part.0+0x19c>)
		tx_noautoflush = 1;
    a3c0:	strb	r3, [r4, #0]
		transfer_t *xfer = tx_transfer + tx_head;
    a3c2:	ldr	r3, [pc, #376]	; (a53c <usb_serial_write.part.0+0x1a0>)
    a3c4:	ldrb	r1, [r3, #0]
		while (!tx_available) {
    a3c6:	ldrh.w	r3, [r8]
		transfer_t *xfer = tx_transfer + tx_head;
    a3ca:	add.w	r9, r2, r1, lsl #5
		while (!tx_available) {
    a3ce:	cmp	r3, #0
    a3d0:	bne.w	a522 <usb_serial_write.part.0+0x186>
		uint32_t wait_begin_at=0;
    a3d4:	mov	r6, r3
		int waiting=0;
    a3d6:	mov	r5, r3
			tx_noautoflush = 0;
    a3d8:	mov	fp, r3
			uint32_t status = usb_transfer_status(xfer);
    a3da:	mov	r0, r9
    a3dc:	bl	b7c0 <usb_transfer_status>
			if (!(status & 0x80)) {
    a3e0:	ands.w	r0, r0, #128	; 0x80
    a3e4:	beq.w	a500 <usb_serial_write.part.0+0x164>
			asm("dsb" ::: "memory");
    a3e8:	dsb	sy
			if (transmit_previous_timeout) return sent;
    a3ec:	ldrb.w	r3, [sl]
			tx_noautoflush = 0;
    a3f0:	strb.w	fp, [r4]
			if (!waiting) {
    a3f4:	cbnz	r5, a3f8 <usb_serial_write.part.0+0x5c>
				wait_begin_at = systick_millis_count;
    a3f6:	ldr	r6, [r7, #0]
			if (transmit_previous_timeout) return sent;
    a3f8:	cmp	r3, #0
    a3fa:	bne.n	a4f8 <usb_serial_write.part.0+0x15c>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    a3fc:	ldr	r3, [r7, #0]
    a3fe:	subs	r3, r3, r6
    a400:	cmp	r3, #120	; 0x78
    a402:	bhi.w	a514 <usb_serial_write.part.0+0x178>
			if (!usb_configuration) return sent;
    a406:	ldr	r3, [pc, #312]	; (a540 <usb_serial_write.part.0+0x1a4>)
    a408:	ldrb	r3, [r3, #0]
    a40a:	cmp	r3, #0
    a40c:	beq.n	a4f8 <usb_serial_write.part.0+0x15c>
			yield();
    a40e:	bl	c0d4 <yield>
			tx_noautoflush = 1;
    a412:	movs	r2, #1
		while (!tx_available) {
    a414:	ldrh.w	r3, [r8]
    a418:	mov	r5, r2
			tx_noautoflush = 1;
    a41a:	strb	r2, [r4, #0]
		while (!tx_available) {
    a41c:	cmp	r3, #0
    a41e:	beq.n	a3da <usb_serial_write.part.0+0x3e>
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    a420:	ldr	r2, [pc, #280]	; (a53c <usb_serial_write.part.0+0x1a0>)
    a422:	rsb	r0, r3, #2048	; 0x800
    a426:	ldrb	r1, [r2, #0]
    a428:	mov	r2, r3
    a42a:	add.w	r0, r0, r1, lsl #11
    a42e:	ldr	r5, [pc, #276]	; (a544 <usb_serial_write.part.0+0x1a8>)
    a430:	lsls	r1, r1, #11
    a432:	add	r0, r5
		if (size >= tx_available) {
    a434:	ldr	r5, [sp, #4]
    a436:	cmp	r5, r2
    a438:	bcs.n	a46a <usb_serial_write.part.0+0xce>
			memcpy(txdata, data, size);
    a43a:	str	r3, [sp, #12]
    a43c:	ldrd	r5, r1, [sp, #4]
    a440:	mov	r2, r5
    a442:	bl	a0c4 <memcpy>
			tx_available -= size;
    a446:	ldr	r3, [sp, #12]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    a448:	mov.w	r2, #3221225472	; 0xc0000000
			tx_available -= size;
    a44c:	subs	r3, r3, r5
    a44e:	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    a452:	ldr	r3, [pc, #244]	; (a548 <usb_serial_write.part.0+0x1ac>)
    a454:	str.w	r2, [r3, #132]	; 0x84
		asm("dsb" ::: "memory");
    a458:	dsb	sy
			sent += size;
    a45c:	ldr	r0, [sp, #0]
		tx_noautoflush = 0;
    a45e:	movs	r3, #0
			sent += size;
    a460:	add	r0, r5
		tx_noautoflush = 0;
    a462:	strb	r3, [r4, #0]
}
    a464:	add	sp, #20
    a466:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    a46a:	ldr	r3, [pc, #216]	; (a544 <usb_serial_write.part.0+0x1a8>)
    a46c:	adds	r5, r1, r3
			memcpy(txdata, data, tx_available);
    a46e:	ldr	r1, [sp, #8]
    a470:	bl	a0c4 <memcpy>
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    a474:	movs	r3, #0
    a476:	mov.w	r2, #2048	; 0x800
    a47a:	mov	r1, r5
    a47c:	mov	r0, r9
    a47e:	bl	b74c <usb_prepare_transfer>
	asm("dsb");
    a482:	dsb	sy
    a486:	add.w	r2, r5, #32
	uint32_t end_addr = (uint32_t)addr + size;
    a48a:	add.w	r3, r5, #2048	; 0x800
    a48e:	cmp	r3, r2
    a490:	ite	cc
    a492:	movcc	r3, #1
    a494:	movcs	r3, #64	; 0x40
		SCB_CACHE_DCCIMVAC = location;
    a496:	mov.w	r2, #3758153728	; 0xe000e000
    a49a:	add.w	r3, r5, r3, lsl #5
    a49e:	str.w	r5, [r2, #3952]	; 0xf70
		location += 32;
    a4a2:	adds	r5, #32
	} while (location < end_addr);
    a4a4:	cmp	r3, r5
    a4a6:	bne.n	a49e <usb_serial_write.part.0+0x102>
	asm("dsb");
    a4a8:	dsb	sy
	asm("isb");
    a4ac:	isb	sy
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    a4b0:	movs	r0, #3
    a4b2:	mov	r1, r9
    a4b4:	bl	b77c <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    a4b8:	ldr	r2, [pc, #128]	; (a53c <usb_serial_write.part.0+0x1a0>)
    a4ba:	ldrb	r3, [r2, #0]
    a4bc:	adds	r3, #1
    a4be:	uxtb	r3, r3
    a4c0:	cmp	r3, #3
    a4c2:	itt	hi
    a4c4:	movhi	r3, #0
    a4c6:	ldrhi	r2, [pc, #116]	; (a53c <usb_serial_write.part.0+0x1a0>)
    a4c8:	strb	r3, [r2, #0]
			size -= tx_available;
    a4ca:	ldrh.w	r3, [r8]
    a4ce:	ldr	r2, [sp, #4]
    a4d0:	subs	r1, r2, r3
			sent += tx_available;
    a4d2:	ldr	r2, [sp, #0]
    a4d4:	add	r2, r3
			size -= tx_available;
    a4d6:	str	r1, [sp, #4]
			sent += tx_available;
    a4d8:	str	r2, [sp, #0]
			data += tx_available;
    a4da:	ldr	r2, [sp, #8]
    a4dc:	add	r2, r3
			tx_available = 0;
    a4de:	movs	r3, #0
			data += tx_available;
    a4e0:	str	r2, [sp, #8]
	USB1_GPTIMER0CTRL = 0;
    a4e2:	ldr	r2, [pc, #100]	; (a548 <usb_serial_write.part.0+0x1ac>)
			tx_available = 0;
    a4e4:	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = 0;
    a4e8:	str.w	r3, [r2, #132]	; 0x84
		asm("dsb" ::: "memory");
    a4ec:	dsb	sy
		tx_noautoflush = 0;
    a4f0:	strb	r3, [r4, #0]
	while (size > 0) {
    a4f2:	cmp	r1, #0
    a4f4:	bne.w	a3bc <usb_serial_write.part.0+0x20>
	return sent;
    a4f8:	ldr	r0, [sp, #0]
}
    a4fa:	add	sp, #20
    a4fc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				tx_available = TX_SIZE;
    a500:	mov.w	r2, #2048	; 0x800
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    a504:	ldr	r3, [pc, #52]	; (a53c <usb_serial_write.part.0+0x1a0>)
				transmit_previous_timeout = 0;
    a506:	strb.w	r0, [sl]
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    a50a:	ldrb	r1, [r3, #0]
				break;
    a50c:	mov	r3, r2
				tx_available = TX_SIZE;
    a50e:	strh.w	r2, [r8]
				break;
    a512:	b.n	a42a <usb_serial_write.part.0+0x8e>
				transmit_previous_timeout = 1;
    a514:	movs	r3, #1
				return sent;
    a516:	ldr	r0, [sp, #0]
				transmit_previous_timeout = 1;
    a518:	strb.w	r3, [sl]
}
    a51c:	add	sp, #20
    a51e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    a522:	mov	r2, r3
    a524:	rsb	r0, r3, #2048	; 0x800
    a528:	b.n	a42a <usb_serial_write.part.0+0x8e>
	while (size > 0) {
    a52a:	ldr	r0, [sp, #4]
	return sent;
    a52c:	b.n	a4fa <usb_serial_write.part.0+0x15e>
    a52e:	nop
    a530:	.word	0x20007b6e
    a534:	.word	0x20007aec
    a538:	.word	0x20003120
    a53c:	.word	0x20007b6c
    a540:	.word	0x20007b75
    a544:	.word	0x20003240
    a548:	.word	0x402e0000
    a54c:	.word	0x20007b4e
    a550:	.word	0x20007b6a

0000a554 <usb_serial_reset>:
}
    a554:	bx	lr
    a556:	nop

0000a558 <usb_serial_configure>:
	if (usb_high_speed) {
    a558:	ldr	r3, [pc, #168]	; (a604 <usb_serial_configure+0xac>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
    a55a:	movs	r1, #0
    a55c:	movs	r2, #128	; 0x80
    a55e:	ldr	r0, [pc, #168]	; (a608 <usb_serial_configure+0xb0>)
{
    a560:	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
    a562:	ldrb	r3, [r3, #0]
	tx_head = 0;
    a564:	movs	r4, #0
		tx_packet_size = CDC_TX_SIZE_480;
    a566:	ldr	r5, [pc, #164]	; (a60c <usb_serial_configure+0xb4>)
	if (usb_high_speed) {
    a568:	cmp	r3, r1
		rx_packet_size = CDC_RX_SIZE_480;
    a56a:	ldr	r6, [pc, #164]	; (a610 <usb_serial_configure+0xb8>)
	if (usb_high_speed) {
    a56c:	ite	eq
    a56e:	moveq	r3, #64	; 0x40
    a570:	movne.w	r3, #512	; 0x200
		tx_packet_size = CDC_TX_SIZE_480;
    a574:	strh	r3, [r5, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    a576:	strh	r3, [r6, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    a578:	bl	e064 <memset>
	tx_head = 0;
    a57c:	ldr	r2, [pc, #148]	; (a614 <usb_serial_configure+0xbc>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    a57e:	mov	r1, r4
	tx_available = 0;
    a580:	ldr	r3, [pc, #148]	; (a618 <usb_serial_configure+0xc0>)
	tx_head = 0;
    a582:	strb	r4, [r2, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    a584:	mov.w	r2, #256	; 0x100
    a588:	ldr	r0, [pc, #144]	; (a61c <usb_serial_configure+0xc4>)
	tx_available = 0;
    a58a:	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    a58c:	bl	e064 <memset>
	memset(rx_count, 0, sizeof(rx_count));
    a590:	ldr	r2, [pc, #140]	; (a620 <usb_serial_configure+0xc8>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    a592:	movs	r1, #16
	memset(rx_index, 0, sizeof(rx_index));
    a594:	ldr	r3, [pc, #140]	; (a624 <usb_serial_configure+0xcc>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    a596:	movs	r0, #2
	memset(rx_count, 0, sizeof(rx_count));
    a598:	strd	r4, r4, [r2]
    a59c:	strd	r4, r4, [r2, #8]
	rx_head = 0;
    a5a0:	ldr	r2, [pc, #132]	; (a628 <usb_serial_configure+0xd0>)
	memset(rx_index, 0, sizeof(rx_index));
    a5a2:	strd	r4, r4, [r3]
	rx_head = 0;
    a5a6:	strb	r4, [r2, #0]
	rx_available = 0;
    a5a8:	ldr	r2, [pc, #128]	; (a62c <usb_serial_configure+0xd4>)
	memset(rx_index, 0, sizeof(rx_index));
    a5aa:	strd	r4, r4, [r3, #8]
	rx_tail = 0;
    a5ae:	ldr	r3, [pc, #128]	; (a630 <usb_serial_configure+0xd8>)
    a5b0:	strb	r4, [r3, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    a5b2:	mov	r3, r4
	rx_available = 0;
    a5b4:	str	r4, [r2, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    a5b6:	mov	r2, r4
    a5b8:	bl	b618 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    a5bc:	mov	r2, r4
    a5be:	ldrh	r1, [r6, #0]
    a5c0:	movs	r0, #3
    a5c2:	ldr	r3, [pc, #112]	; (a634 <usb_serial_configure+0xdc>)
    a5c4:	bl	b5b4 <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    a5c8:	mov	r3, r4
    a5ca:	movs	r2, #1
    a5cc:	ldrh	r1, [r5, #0]
    a5ce:	movs	r0, #3
    a5d0:	bl	b618 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    a5d4:	mov	r0, r4
    a5d6:	adds	r4, #1
    a5d8:	bl	a1f8 <rx_queue_transfer>
    a5dc:	cmp	r4, #8
    a5de:	bne.n	a5d4 <usb_serial_configure+0x7c>
	USB1_GPTIMER0CTRL = 0;
    a5e0:	ldr	r3, [pc, #84]	; (a638 <usb_serial_configure+0xe0>)
	USB1_GPTIMER0LD = microseconds - 1;
    a5e2:	movs	r2, #74	; 0x4a
	usb_timer0_callback = callback;
    a5e4:	ldr	r0, [pc, #84]	; (a63c <usb_serial_configure+0xe4>)
	USB1_GPTIMER0CTRL = 0;
    a5e6:	movs	r1, #0
	usb_timer0_callback = callback;
    a5e8:	ldr	r4, [pc, #84]	; (a640 <usb_serial_configure+0xe8>)
    a5ea:	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
    a5ec:	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    a5f0:	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    a5f4:	ldr.w	r2, [r3, #328]	; 0x148
    a5f8:	orr.w	r2, r2, #16777216	; 0x1000000
    a5fc:	str.w	r2, [r3, #328]	; 0x148
}
    a600:	pop	{r4, r5, r6, pc}
    a602:	nop
    a604:	.word	0x20007b76
    a608:	.word	0x20003120
    a60c:	.word	0x20007b52
    a610:	.word	0x20007b4a
    a614:	.word	0x20007b6c
    a618:	.word	0x20007b4e
    a61c:	.word	0x20002f20
    a620:	.word	0x20007a88
    a624:	.word	0x20007aa4
    a628:	.word	0x20007b65
    a62c:	.word	0x20007a80
    a630:	.word	0x20007b67
    a634:	.word	0x0000a259
    a638:	.word	0x402e0000
    a63c:	.word	0x20007b2c
    a640:	.word	0x0000a30d

0000a644 <usb_serial_read>:
{
    a644:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
    a648:	mov.w	r3, #3758153728	; 0xe000e000
    a64c:	mov.w	r2, #131072	; 0x20000
	uint32_t tail = rx_tail;
    a650:	ldr.w	sl, [pc, #200]	; a71c <usb_serial_read+0xd8>
{
    a654:	sub	sp, #12
	NVIC_DISABLE_IRQ(IRQ_USB1);
    a656:	str.w	r2, [r3, #396]	; 0x18c
	while (count < size && tail != rx_head) {
    a65a:	mov	fp, r1
	uint32_t tail = rx_tail;
    a65c:	ldrb.w	r4, [sl]
	while (count < size && tail != rx_head) {
    a660:	cmp	r1, #0
    a662:	beq.n	a704 <usb_serial_read+0xc0>
    a664:	mov	r8, r0
    a666:	uxtb	r4, r4
	uint32_t count=0;
    a668:	movs	r7, #0
		uint32_t avail = rx_count[i] - rx_index[i];
    a66a:	ldr.w	r9, [pc, #180]	; a720 <usb_serial_read+0xdc>
	while (count < size && tail != rx_head) {
    a66e:	ldr	r3, [pc, #152]	; (a708 <usb_serial_read+0xc4>)
		uint32_t len = size - count;
    a670:	sub.w	r2, fp, r7
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    a674:	ldr	r1, [pc, #148]	; (a70c <usb_serial_read+0xc8>)
	while (count < size && tail != rx_head) {
    a676:	ldrb	r3, [r3, #0]
    a678:	cmp	r3, r4
		if (++tail > RX_NUM) tail = 0;
    a67a:	add.w	r4, r4, #1
	while (count < size && tail != rx_head) {
    a67e:	beq.n	a700 <usb_serial_read+0xbc>
		if (++tail > RX_NUM) tail = 0;
    a680:	cmp	r4, #9
		uint32_t i = rx_list[tail];
    a682:	ldr	r3, [pc, #140]	; (a710 <usb_serial_read+0xcc>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    a684:	mov	r0, r8
		if (++tail > RX_NUM) tail = 0;
    a686:	it	cs
    a688:	movcs	r4, #0
		uint32_t i = rx_list[tail];
    a68a:	ldrb	r6, [r3, r4]
		uint32_t avail = rx_count[i] - rx_index[i];
    a68c:	ldrh.w	ip, [r9, r6, lsl #1]
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    a690:	add.w	r3, ip, r6, lsl #9
    a694:	add	r1, r3
		uint32_t avail = rx_count[i] - rx_index[i];
    a696:	ldr	r3, [pc, #124]	; (a714 <usb_serial_read+0xd0>)
    a698:	ldrh.w	r5, [r3, r6, lsl #1]
    a69c:	sub.w	r5, r5, ip
		if (avail > len) {
    a6a0:	cmp	r2, r5
    a6a2:	bcs.n	a6de <usb_serial_read+0x9a>
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    a6a4:	add.w	ip, ip, r6, lsl #9
    a6a8:	ldr	r1, [pc, #96]	; (a70c <usb_serial_read+0xc8>)
			rx_available -= len;
    a6aa:	ldr	r4, [pc, #108]	; (a718 <usb_serial_read+0xd4>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    a6ac:	add	r1, ip
    a6ae:	str	r2, [sp, #4]
    a6b0:	bl	a0c4 <memcpy>
			rx_available -= len;
    a6b4:	ldr	r1, [r4, #0]
			rx_index[i] += len;
    a6b6:	ldrh.w	r5, [r9, r6, lsl #1]
	return count;
    a6ba:	mov	r0, fp
			rx_index[i] += len;
    a6bc:	ldr	r2, [sp, #4]
			rx_available -= len;
    a6be:	sub.w	r1, r1, fp
			rx_index[i] += len;
    a6c2:	add	r2, r5
			rx_available -= len;
    a6c4:	add	r1, r7
			rx_index[i] += len;
    a6c6:	strh.w	r2, [r9, r6, lsl #1]
			rx_available -= len;
    a6ca:	str	r1, [r4, #0]
	NVIC_ENABLE_IRQ(IRQ_USB1);
    a6cc:	mov.w	r3, #3758153728	; 0xe000e000
    a6d0:	mov.w	r2, #131072	; 0x20000
    a6d4:	str.w	r2, [r3, #268]	; 0x10c
}
    a6d8:	add	sp, #12
    a6da:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    a6de:	mov	r2, r5
			count += avail;
    a6e0:	add	r7, r5
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    a6e2:	bl	a0c4 <memcpy>
			rx_available -= avail;
    a6e6:	ldr	r1, [pc, #48]	; (a718 <usb_serial_read+0xd4>)
			rx_tail = tail;
    a6e8:	uxtb	r3, r4
			rx_queue_transfer(i);
    a6ea:	mov	r0, r6
			rx_available -= avail;
    a6ec:	ldr	r2, [r1, #0]
			p += avail;
    a6ee:	add	r8, r5
			rx_available -= avail;
    a6f0:	subs	r2, r2, r5
    a6f2:	str	r2, [r1, #0]
			rx_tail = tail;
    a6f4:	strb.w	r3, [sl]
			rx_queue_transfer(i);
    a6f8:	bl	a1f8 <rx_queue_transfer>
	while (count < size && tail != rx_head) {
    a6fc:	cmp	fp, r7
    a6fe:	bhi.n	a66e <usb_serial_read+0x2a>
	return count;
    a700:	mov	r0, r7
    a702:	b.n	a6cc <usb_serial_read+0x88>
	while (count < size && tail != rx_head) {
    a704:	mov	r0, r1
    a706:	b.n	a6cc <usb_serial_read+0x88>
    a708:	.word	0x20007b65
    a70c:	.word	0x20001f20
    a710:	.word	0x20007ac0
    a714:	.word	0x20007a88
    a718:	.word	0x20007a80
    a71c:	.word	0x20007b67
    a720:	.word	0x20007aa4

0000a724 <usb_serial_peekchar>:
	if (tail == rx_head) return -1;
    a724:	ldr	r3, [pc, #44]	; (a754 <usb_serial_peekchar+0x30>)
	uint32_t tail = rx_tail;
    a726:	ldr	r2, [pc, #48]	; (a758 <usb_serial_peekchar+0x34>)
    a728:	ldrb	r2, [r2, #0]
	if (tail == rx_head) return -1;
    a72a:	ldrb	r1, [r3, #0]
	uint32_t tail = rx_tail;
    a72c:	uxtb	r3, r2
	if (tail == rx_head) return -1;
    a72e:	cmp	r2, r1
    a730:	beq.n	a74e <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
    a732:	adds	r3, #1
	uint32_t i = rx_list[tail];
    a734:	ldr	r0, [pc, #36]	; (a75c <usb_serial_peekchar+0x38>)
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    a736:	ldr	r2, [pc, #40]	; (a760 <usb_serial_peekchar+0x3c>)
	if (++tail > RX_NUM) tail = 0;
    a738:	cmp	r3, #9
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    a73a:	ldr	r1, [pc, #40]	; (a764 <usb_serial_peekchar+0x40>)
	if (++tail > RX_NUM) tail = 0;
    a73c:	it	cs
    a73e:	movcs	r3, #0
	uint32_t i = rx_list[tail];
    a740:	ldrb	r3, [r0, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    a742:	ldrh.w	r1, [r1, r3, lsl #1]
    a746:	add.w	r3, r2, r3, lsl #9
    a74a:	ldrb	r0, [r3, r1]
    a74c:	bx	lr
	if (tail == rx_head) return -1;
    a74e:	mov.w	r0, #4294967295
}
    a752:	bx	lr
    a754:	.word	0x20007b65
    a758:	.word	0x20007b67
    a75c:	.word	0x20007ac0
    a760:	.word	0x20001f20
    a764:	.word	0x20007aa4

0000a768 <usb_serial_available>:
	uint32_t n = rx_available;
    a768:	ldr	r3, [pc, #16]	; (a77c <usb_serial_available+0x14>)
{
    a76a:	push	{r4, lr}
	uint32_t n = rx_available;
    a76c:	ldr	r4, [r3, #0]
	if (n == 0) yield();
    a76e:	cbz	r4, a774 <usb_serial_available+0xc>
}
    a770:	mov	r0, r4
    a772:	pop	{r4, pc}
	if (n == 0) yield();
    a774:	bl	c0d4 <yield>
}
    a778:	mov	r0, r4
    a77a:	pop	{r4, pc}
    a77c:	.word	0x20007a80

0000a780 <usb_serial_flush_input>:
{
    a780:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tail = rx_tail;
    a784:	ldr	r6, [pc, #80]	; (a7d8 <usb_serial_flush_input+0x58>)
	while (tail != rx_head) {
    a786:	ldr	r5, [pc, #84]	; (a7dc <usb_serial_flush_input+0x5c>)
	uint32_t tail = rx_tail;
    a788:	ldrb	r3, [r6, #0]
	while (tail != rx_head) {
    a78a:	ldrb	r2, [r5, #0]
    a78c:	cmp	r3, r2
    a78e:	beq.n	a7d4 <usb_serial_flush_input+0x54>
    a790:	uxtb	r4, r3
    a792:	ldr.w	r9, [pc, #80]	; a7e4 <usb_serial_flush_input+0x64>
    a796:	ldr.w	fp, [pc, #80]	; a7e8 <usb_serial_flush_input+0x68>
    a79a:	ldr.w	r8, [pc, #80]	; a7ec <usb_serial_flush_input+0x6c>
    a79e:	ldr	r7, [pc, #64]	; (a7e0 <usb_serial_flush_input+0x60>)
		if (++tail > RX_NUM) tail = 0;
    a7a0:	adds	r4, #1
    a7a2:	cmp	r4, #8
		rx_tail = tail;
    a7a4:	uxtb.w	sl, r4
		if (++tail > RX_NUM) tail = 0;
    a7a8:	bls.n	a7ae <usb_serial_flush_input+0x2e>
    a7aa:	movs	r4, #0
    a7ac:	mov	sl, r4
		uint32_t i = rx_list[tail];
    a7ae:	ldrb.w	r0, [r9, r4]
		rx_available -= rx_count[i] - rx_index[i];
    a7b2:	ldr.w	r3, [fp]
    a7b6:	ldrh.w	r2, [r8, r0, lsl #1]
    a7ba:	ldrh.w	r1, [r7, r0, lsl #1]
    a7be:	subs	r2, r2, r1
    a7c0:	subs	r3, r3, r2
    a7c2:	str.w	r3, [fp]
		rx_queue_transfer(i);
    a7c6:	bl	a1f8 <rx_queue_transfer>
		rx_tail = tail;
    a7ca:	strb.w	sl, [r6]
	while (tail != rx_head) {
    a7ce:	ldrb	r3, [r5, #0]
    a7d0:	cmp	r3, r4
    a7d2:	bne.n	a7a0 <usb_serial_flush_input+0x20>
}
    a7d4:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a7d8:	.word	0x20007b67
    a7dc:	.word	0x20007b65
    a7e0:	.word	0x20007aa4
    a7e4:	.word	0x20007ac0
    a7e8:	.word	0x20007a80
    a7ec:	.word	0x20007a88

0000a7f0 <usb_serial_getchar>:
{
    a7f0:	push	{lr}
    a7f2:	sub	sp, #12
	if (usb_serial_read(&c, 1)) return c;
    a7f4:	movs	r1, #1
    a7f6:	add.w	r0, sp, #7
    a7fa:	bl	a644 <usb_serial_read>
    a7fe:	cbz	r0, a80a <usb_serial_getchar+0x1a>
    a800:	ldrb.w	r0, [sp, #7]
}
    a804:	add	sp, #12
    a806:	ldr.w	pc, [sp], #4
	return -1;
    a80a:	mov.w	r0, #4294967295
    a80e:	b.n	a804 <usb_serial_getchar+0x14>

0000a810 <usb_serial_putchar>:
	if (!usb_configuration) return 0;
    a810:	ldr	r3, [pc, #36]	; (a838 <usb_serial_putchar+0x28>)
{
    a812:	push	{lr}
    a814:	sub	sp, #12
	if (!usb_configuration) return 0;
    a816:	ldrb	r3, [r3, #0]
{
    a818:	strb.w	r0, [sp, #7]
	if (!usb_configuration) return 0;
    a81c:	cbz	r3, a82e <usb_serial_putchar+0x1e>
    a81e:	movs	r1, #1
    a820:	add.w	r0, sp, #7
    a824:	bl	a39c <usb_serial_write.part.0>
}
    a828:	add	sp, #12
    a82a:	ldr.w	pc, [sp], #4
    a82e:	and.w	r0, r3, #255	; 0xff
    a832:	add	sp, #12
    a834:	ldr.w	pc, [sp], #4
    a838:	.word	0x20007b75

0000a83c <usb_serial_write>:
	if (!usb_configuration) return 0;
    a83c:	ldr	r3, [pc, #16]	; (a850 <usb_serial_write+0x14>)
    a83e:	ldrb	r3, [r3, #0]
    a840:	and.w	r2, r3, #255	; 0xff
    a844:	cbz	r3, a84a <usb_serial_write+0xe>
    a846:	b.w	a39c <usb_serial_write.part.0>
}
    a84a:	mov	r0, r2
    a84c:	bx	lr
    a84e:	nop
    a850:	.word	0x20007b75

0000a854 <usb_serial_write_buffer_free>:
{
    a854:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (uint32_t i=0; i < TX_NUM; i++) {
    a858:	movs	r4, #0
	tx_noautoflush = 1;
    a85a:	ldr.w	r8, [pc, #68]	; a8a0 <usb_serial_write_buffer_free+0x4c>
    a85e:	movs	r3, #1
    a860:	ldr	r5, [pc, #52]	; (a898 <usb_serial_write_buffer_free+0x44>)
	uint32_t sum = 0;
    a862:	mov	r7, r4
    a864:	ldr	r6, [pc, #52]	; (a89c <usb_serial_write_buffer_free+0x48>)
	tx_noautoflush = 1;
    a866:	strb.w	r3, [r8]
		if (i == tx_head) continue;
    a86a:	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    a86c:	mov	r0, r5
	for (uint32_t i=0; i < TX_NUM; i++) {
    a86e:	adds	r5, #32
		if (i == tx_head) continue;
    a870:	cmp	r3, r4
	for (uint32_t i=0; i < TX_NUM; i++) {
    a872:	add.w	r4, r4, #1
		if (i == tx_head) continue;
    a876:	beq.n	a884 <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    a878:	bl	b7c0 <usb_transfer_status>
    a87c:	lsls	r3, r0, #24
    a87e:	it	pl
    a880:	addpl.w	r7, r7, #2048	; 0x800
	for (uint32_t i=0; i < TX_NUM; i++) {
    a884:	cmp	r4, #4
    a886:	bne.n	a86a <usb_serial_write_buffer_free+0x16>
	asm("dsb" ::: "memory");
    a888:	dsb	sy
	tx_noautoflush = 0;
    a88c:	movs	r3, #0
}
    a88e:	mov	r0, r7
	tx_noautoflush = 0;
    a890:	strb.w	r3, [r8]
}
    a894:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a898:	.word	0x20003120
    a89c:	.word	0x20007b6c
    a8a0:	.word	0x20007b6e

0000a8a4 <usb_serial_flush_output>:
{
    a8a4:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!usb_configuration) return;
    a8a8:	ldr	r3, [pc, #116]	; (a920 <usb_serial_flush_output+0x7c>)
    a8aa:	ldrb	r3, [r3, #0]
    a8ac:	cbz	r3, a8b4 <usb_serial_flush_output+0x10>
	if (tx_available == 0) return;
    a8ae:	ldr	r5, [pc, #116]	; (a924 <usb_serial_flush_output+0x80>)
    a8b0:	ldrh	r2, [r5, #0]
    a8b2:	cbnz	r2, a8b8 <usb_serial_flush_output+0x14>
}
    a8b4:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	transfer_t *xfer = tx_transfer + tx_head;
    a8b8:	ldr	r6, [pc, #108]	; (a928 <usb_serial_flush_output+0x84>)
	uint32_t txnum = TX_SIZE - tx_available;
    a8ba:	rsb	r9, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    a8be:	ldr	r1, [pc, #108]	; (a92c <usb_serial_flush_output+0x88>)
    a8c0:	ldrb	r3, [r6, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    a8c2:	mov	r2, r9
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    a8c4:	ldr	r4, [pc, #104]	; (a930 <usb_serial_flush_output+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    a8c6:	add.w	r8, r1, r3, lsl #5
	tx_noautoflush = 1;
    a8ca:	ldr	r7, [pc, #104]	; (a934 <usb_serial_flush_output+0x90>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    a8cc:	add.w	r4, r4, r3, lsl #11
	tx_noautoflush = 1;
    a8d0:	movs	r3, #1
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    a8d2:	mov	r0, r8
	tx_noautoflush = 1;
    a8d4:	strb	r3, [r7, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    a8d6:	mov	r1, r4
    a8d8:	movs	r3, #0
    a8da:	bl	b74c <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    a8de:	add.w	r2, r4, r9
	asm("dsb");
    a8e2:	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    a8e6:	mov.w	r3, #3758153728	; 0xe000e000
    a8ea:	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    a8ee:	adds	r4, #32
	} while (location < end_addr);
    a8f0:	cmp	r2, r4
    a8f2:	bhi.n	a8ea <usb_serial_flush_output+0x46>
	asm("dsb");
    a8f4:	dsb	sy
	asm("isb");
    a8f8:	isb	sy
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    a8fc:	movs	r0, #3
    a8fe:	mov	r1, r8
    a900:	bl	b77c <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    a904:	ldrb	r3, [r6, #0]
    a906:	adds	r3, #1
    a908:	uxtb	r3, r3
    a90a:	cmp	r3, #3
    a90c:	it	hi
    a90e:	movhi	r3, #0
    a910:	strb	r3, [r6, #0]
	tx_available = 0;
    a912:	movs	r3, #0
    a914:	strh	r3, [r5, #0]
	asm("dsb" ::: "memory");
    a916:	dsb	sy
	tx_noautoflush = 0;
    a91a:	strb	r3, [r7, #0]
}
    a91c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    a920:	.word	0x20007b75
    a924:	.word	0x20007b4e
    a928:	.word	0x20007b6c
    a92c:	.word	0x20003120
    a930:	.word	0x20003240
    a934:	.word	0x20007b6e

0000a938 <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    a938:	ldr	r1, [pc, #648]	; (abc4 <set_arm_clock+0x28c>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    a93a:	ldr	r3, [pc, #652]	; (abc8 <set_arm_clock+0x290>)
	if (frequency > 528000000) {
    a93c:	cmp	r0, r1
{
    a93e:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t dcdc = DCDC_REG3;
    a942:	ldr	r4, [pc, #648]	; (abcc <set_arm_clock+0x294>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    a944:	ldr	r6, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    a946:	ldr	r2, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    a948:	ldr.w	r8, [r4, #12]
	if (frequency > 528000000) {
    a94c:	bls.n	a986 <set_arm_clock+0x4e>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    a94e:	ldr	r3, [pc, #640]	; (abd0 <set_arm_clock+0x298>)
    a950:	cmp	r0, r3
    a952:	bls.w	ab5a <set_arm_clock+0x222>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    a956:	subs	r3, r0, r3
    a958:	ldr	r1, [pc, #632]	; (abd4 <set_arm_clock+0x29c>)
    a95a:	lsrs	r3, r3, #8
    a95c:	umull	r1, r3, r1, r3
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    a960:	movw	r1, #1575	; 0x627
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    a964:	lsrs	r3, r3, #7
    a966:	add.w	r3, r3, r3, lsl #2
    a96a:	add.w	r3, r3, r3, lsl #2
    a96e:	addw	r3, r3, #1250	; 0x4e2
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    a972:	cmp	r3, r1
    a974:	it	cs
    a976:	movcs	r3, r1
    a978:	sub.w	r7, r3, #800	; 0x320
    a97c:	ldr	r3, [pc, #600]	; (abd8 <set_arm_clock+0x2a0>)
    a97e:	umull	r3, r7, r3, r7
    a982:	lsrs	r7, r7, #3
    a984:	b.n	a990 <set_arm_clock+0x58>
	} else if (frequency <= 24000000) {
    a986:	ldr	r7, [pc, #596]	; (abdc <set_arm_clock+0x2a4>)
    a988:	cmp	r0, r7
    a98a:	ite	hi
    a98c:	movhi	r7, #14
    a98e:	movls	r7, #6
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    a990:	ldr	r1, [pc, #564]	; (abc8 <set_arm_clock+0x290>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    a992:	and.w	r9, r8, #31
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    a996:	ldr.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    a99a:	cmp	r9, r7
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    a99c:	orr.w	r3, r3, #192	; 0xc0
    a9a0:	str.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    a9a4:	bcs.n	a9c0 <set_arm_clock+0x88>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    a9a6:	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    a9aa:	sub.w	r1, r1, #507904	; 0x7c000
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    a9ae:	orr.w	r8, r8, r7
		DCDC_REG3 = dcdc;
    a9b2:	str.w	r8, [r1, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    a9b6:	ldr	r3, [r1, #0]
    a9b8:	cmp	r3, #0
    a9ba:	bge.n	a9b6 <set_arm_clock+0x7e>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    a9bc:	and.w	r9, r8, #31
	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    a9c0:	ands.w	r3, r6, #33554432	; 0x2000000
    a9c4:	bne.n	aa10 <set_arm_clock+0xd8>
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    a9c6:	ldr	r1, [pc, #536]	; (abe0 <set_arm_clock+0x2a8>)
    a9c8:	ldr	r4, [r1, #16]
    a9ca:	ldr	r1, [pc, #536]	; (abe4 <set_arm_clock+0x2ac>)
    a9cc:	bics	r1, r4
    a9ce:	beq.w	aba6 <set_arm_clock+0x26e>
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    a9d2:	eor.w	r1, r2, #4096	; 0x1000
    a9d6:	mov	r4, r6
    a9d8:	mov.w	r5, #4096	; 0x1000
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    a9dc:	tst.w	r4, #939524096	; 0x38000000
    a9e0:	beq.n	a9ec <set_arm_clock+0xb4>
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    a9e2:	bic.w	r6, r6, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    a9e6:	orrs	r6, r3
			CCM_CBCDR = cbcdr;
    a9e8:	ldr	r3, [pc, #476]	; (abc8 <set_arm_clock+0x290>)
    a9ea:	str	r6, [r3, #20]
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    a9ec:	tst.w	r1, #12288	; 0x3000
    a9f0:	beq.n	aa02 <set_arm_clock+0xca>
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    a9f2:	bic.w	r2, r2, #12288	; 0x3000
			CCM_CBCMR = cbcmr;
    a9f6:	ldr	r1, [pc, #464]	; (abc8 <set_arm_clock+0x290>)
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    a9f8:	orrs	r2, r5
			CCM_CBCMR = cbcmr;
    a9fa:	str	r2, [r1, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    a9fc:	ldr	r3, [r1, #72]	; 0x48
    a9fe:	lsls	r2, r3, #28
    aa00:	bmi.n	a9fc <set_arm_clock+0xc4>
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    aa02:	orr.w	r6, r6, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    aa06:	ldr	r2, [pc, #448]	; (abc8 <set_arm_clock+0x290>)
    aa08:	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    aa0a:	ldr	r3, [r2, #72]	; 0x48
    aa0c:	lsls	r3, r3, #26
    aa0e:	bmi.n	aa0a <set_arm_clock+0xd2>
	while (frequency * div_arm * div_ahb < 648000000) {
    aa10:	ldr	r4, [pc, #468]	; (abe8 <set_arm_clock+0x2b0>)
    aa12:	cmp	r0, r4
    aa14:	bhi.w	abb4 <set_arm_clock+0x27c>
	uint32_t div_ahb = 1;
    aa18:	mov.w	ip, #1
    aa1c:	mov	r1, r0
	uint32_t div_arm = 1;
    aa1e:	mov	r3, ip
	while (frequency * div_arm * div_ahb < 648000000) {
    aa20:	mla	r2, r3, r1, r1
			div_arm = div_arm + 1;
    aa24:	add.w	lr, r3, #1
				div_ahb = div_ahb + 1;
    aa28:	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    aa2c:	cmp	r2, r4
    aa2e:	bhi.n	aa62 <set_arm_clock+0x12a>
		if (div_arm < 8) {
    aa30:	cmp.w	lr, #8
				div_arm = 1;
    aa34:	mov.w	r3, #1
		if (div_arm < 8) {
    aa38:	bne.w	ab56 <set_arm_clock+0x21e>
			if (div_ahb < 5) {
    aa3c:	cmp.w	ip, #4
    aa40:	bhi.w	ab66 <set_arm_clock+0x22e>
	while (frequency * div_arm * div_ahb < 648000000) {
    aa44:	adds	r2, r1, r0
    aa46:	cmp	r2, r4
    aa48:	bhi.w	ab94 <set_arm_clock+0x25c>
    aa4c:	mul.w	r1, r5, r0
				div_ahb = div_ahb + 1;
    aa50:	mov	ip, r5
			div_arm = div_arm + 1;
    aa52:	add.w	lr, r3, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    aa56:	mla	r2, r3, r1, r1
				div_ahb = div_ahb + 1;
    aa5a:	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    aa5e:	cmp	r2, r4
    aa60:	bls.n	aa30 <set_arm_clock+0xf8>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    aa62:	add.w	r1, ip, #4294967295
    aa66:	lsls	r4, r1, #10
    aa68:	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    aa6c:	ldr	r0, [pc, #380]	; (abec <set_arm_clock+0x2b4>)
    aa6e:	add	r0, r2
	if (mult > 108) mult = 108;
    aa70:	ldr	r2, [pc, #380]	; (abf0 <set_arm_clock+0x2b8>)
    aa72:	cmp	r0, r2
    aa74:	bls.n	ab76 <set_arm_clock+0x23e>
    aa76:	ldr.w	sl, [pc, #420]	; ac1c <set_arm_clock+0x2e4>
    aa7a:	movs	r2, #108	; 0x6c
    aa7c:	ldr	r0, [pc, #372]	; (abf4 <set_arm_clock+0x2bc>)
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    aa7e:	ldr	r5, [pc, #352]	; (abe0 <set_arm_clock+0x2a8>)
	frequency = mult * 12000000 / div_arm / div_ahb;
    aa80:	udiv	r0, r0, lr
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    aa84:	ldr.w	lr, [r5]
	frequency = mult * 12000000 / div_arm / div_ahb;
    aa88:	udiv	r0, r0, ip
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    aa8c:	ldr.w	ip, [pc, #400]	; ac20 <set_arm_clock+0x2e8>
    aa90:	and.w	ip, lr, ip
    aa94:	cmp	ip, sl
    aa96:	beq.n	aaac <set_arm_clock+0x174>
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    aa98:	orr.w	r2, r2, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    aa9c:	mov.w	ip, #4096	; 0x1000
    aaa0:	str.w	ip, [r5]
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    aaa4:	str	r2, [r5, #0]
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    aaa6:	ldr	r2, [r5, #0]
    aaa8:	cmp	r2, #0
    aaaa:	bge.n	aaa6 <set_arm_clock+0x16e>
	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    aaac:	ldr	r2, [pc, #280]	; (abc8 <set_arm_clock+0x290>)
    aaae:	ldr	r5, [r2, #16]
    aab0:	and.w	r5, r5, #7
    aab4:	cmp	r5, r3
    aab6:	beq.n	aac0 <set_arm_clock+0x188>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    aab8:	str	r3, [r2, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    aaba:	ldr	r3, [r2, #72]	; 0x48
    aabc:	lsls	r5, r3, #15
    aabe:	bmi.n	aaba <set_arm_clock+0x182>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    aac0:	tst.w	r1, #7168	; 0x1c00
    aac4:	beq.n	aada <set_arm_clock+0x1a2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    aac6:	bic.w	r6, r6, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    aaca:	and.w	r4, r4, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
    aace:	ldr	r2, [pc, #248]	; (abc8 <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    aad0:	orrs	r6, r4
		CCM_CBCDR = cbcdr;
    aad2:	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    aad4:	ldr	r3, [r2, #72]	; 0x48
    aad6:	lsls	r1, r3, #30
    aad8:	bmi.n	aad4 <set_arm_clock+0x19c>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    aada:	ldr	r1, [pc, #284]	; (abf8 <set_arm_clock+0x2c0>)
	if (div_ipg > 4) div_ipg = 4;
    aadc:	ldr	r2, [pc, #284]	; (abfc <set_arm_clock+0x2c4>)
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    aade:	add	r1, r0
	if (div_ipg > 4) div_ipg = 4;
    aae0:	cmp	r1, r2
    aae2:	bhi.n	ab5e <set_arm_clock+0x226>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    aae4:	ldr	r3, [pc, #280]	; (ac00 <set_arm_clock+0x2c8>)
    aae6:	lsrs	r1, r1, #7
    aae8:	umull	r3, r1, r3, r1
    aaec:	lsrs	r1, r1, #12
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    aaee:	subs	r3, r1, #1
    aaf0:	lsls	r3, r3, #8
    aaf2:	eor.w	r2, r6, r3
    aaf6:	tst.w	r2, #768	; 0x300
    aafa:	beq.n	ab0a <set_arm_clock+0x1d2>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    aafc:	bic.w	r6, r6, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    ab00:	and.w	r3, r3, #768	; 0x300
		CCM_CBCDR = cbcdr;
    ab04:	ldr	r2, [pc, #192]	; (abc8 <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    ab06:	orrs	r3, r6
		CCM_CBCDR = cbcdr;
    ab08:	str	r3, [r2, #20]
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    ab0a:	ldr	r2, [pc, #188]	; (abc8 <set_arm_clock+0x290>)
    ab0c:	ldr	r3, [r2, #20]
    ab0e:	bic.w	r3, r3, #33554432	; 0x2000000
    ab12:	str	r3, [r2, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    ab14:	ldr	r3, [r2, #72]	; 0x48
    ab16:	lsls	r3, r3, #26
    ab18:	bmi.n	ab14 <set_arm_clock+0x1dc>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    ab1a:	ldr	r3, [pc, #232]	; (ac04 <set_arm_clock+0x2cc>)
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    ab1c:	cmp	r7, r9
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    ab1e:	umull	r2, r3, r3, r0
    ab22:	mov.w	r2, #4294967295
    ab26:	mov.w	r3, r3, lsr #18
	F_BUS_ACTUAL = frequency / div_ipg;
    ab2a:	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    ab2e:	udiv	r3, r2, r3
	F_CPU_ACTUAL = frequency;
    ab32:	ldr	r2, [pc, #212]	; (ac08 <set_arm_clock+0x2d0>)
    ab34:	str	r0, [r2, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
    ab36:	ldr	r2, [pc, #212]	; (ac0c <set_arm_clock+0x2d4>)
    ab38:	str	r1, [r2, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    ab3a:	ldr	r2, [pc, #212]	; (ac10 <set_arm_clock+0x2d8>)
    ab3c:	str	r3, [r2, #0]
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    ab3e:	bcs.n	ab52 <set_arm_clock+0x21a>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    ab40:	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    ab44:	ldr	r2, [pc, #132]	; (abcc <set_arm_clock+0x294>)
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    ab46:	orr.w	r7, r8, r7
		DCDC_REG3 = dcdc;
    ab4a:	str	r7, [r2, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    ab4c:	ldr	r3, [r2, #0]
    ab4e:	cmp	r3, #0
    ab50:	bge.n	ab4c <set_arm_clock+0x214>
	}

	return frequency;
}
    ab52:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ab56:	mov	r3, lr
    ab58:	b.n	aa20 <set_arm_clock+0xe8>
    ab5a:	movs	r7, #18
    ab5c:	b.n	a990 <set_arm_clock+0x58>
    ab5e:	mov.w	r3, #768	; 0x300
	if (div_ipg > 4) div_ipg = 4;
    ab62:	movs	r1, #4
    ab64:	b.n	aaf2 <set_arm_clock+0x1ba>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    ab66:	add.w	r1, ip, #4294967295
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    ab6a:	ldr	r0, [pc, #128]	; (abec <set_arm_clock+0x2b4>)
    ab6c:	movs	r3, #7
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    ab6e:	lsls	r4, r1, #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    ab70:	add	r0, r2
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    ab72:	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    ab76:	ldr	r2, [pc, #156]	; (ac14 <set_arm_clock+0x2dc>)
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    ab78:	ldr.w	sl, [pc, #168]	; ac24 <set_arm_clock+0x2ec>
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    ab7c:	umull	r2, r0, r2, r0
    ab80:	lsrs	r2, r0, #20
	frequency = mult * 12000000 / div_arm / div_ahb;
    ab82:	ldr	r0, [pc, #148]	; (ac18 <set_arm_clock+0x2e0>)
    ab84:	cmp	r2, #54	; 0x36
    ab86:	it	cc
    ab88:	movcc	r2, #54	; 0x36
    ab8a:	mul.w	r0, r2, r0
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    ab8e:	orr.w	sl, r2, sl
    ab92:	b.n	aa7e <set_arm_clock+0x146>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    ab94:	mov.w	r4, ip, lsl #10
    ab98:	movs	r3, #0
    ab9a:	eor.w	r1, r6, ip, lsl #10
				div_arm = 1;
    ab9e:	mov.w	lr, #1
				div_ahb = div_ahb + 1;
    aba2:	mov	ip, r5
    aba4:	b.n	aa6c <set_arm_clock+0x134>
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    aba6:	mov	r5, r3
    aba8:	eor.w	r4, r6, #402653184	; 0x18000000
    abac:	mov	r1, r2
    abae:	mov.w	r3, #402653184	; 0x18000000
    abb2:	b.n	a9dc <set_arm_clock+0xa4>
	while (frequency * div_arm * div_ahb < 648000000) {
    abb4:	movs	r4, #0
	uint32_t div_ahb = 1;
    abb6:	mov.w	ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    abba:	mov	r2, r0
    abbc:	mov	r1, r6
    abbe:	mov	r3, r4
	uint32_t div_arm = 1;
    abc0:	mov	lr, ip
    abc2:	b.n	aa6c <set_arm_clock+0x134>
    abc4:	.word	0x1f78a400
    abc8:	.word	0x400fc000
    abcc:	.word	0x40080000
    abd0:	.word	0x23c34600
    abd4:	.word	0x004cb223
    abd8:	.word	0x51eb851f
    abdc:	.word	0x016e3600
    abe0:	.word	0x400d8000
    abe4:	.word	0x80003040
    abe8:	.word	0x269fb1ff
    abec:	.word	0x005b8d80
    abf0:	.word	0x4df67eff
    abf4:	.word	0x4d3f6400
    abf8:	.word	0x08f0d17f
    abfc:	.word	0x2cb4177f
    ac00:	.word	0x00e5109f
    ac04:	.word	0x431bde83
    ac08:	.word	0x20001450
    ac0c:	.word	0x2000144c
    ac10:	.word	0x20007ae4
    ac14:	.word	0x165e9f81
    ac18:	.word	0x00b71b00
    ac1c:	.word	0x8000206c
    ac20:	.word	0x8001307f
    ac24:	.word	0x80002000

0000ac28 <endpoint0_receive>:
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
	while (USB1_ENDPTPRIME) ;
}

static void endpoint0_receive(void *data, uint32_t len, int notify)
{
    ac28:	push	{r4, r5}
	//printf("rx %lu\n", len);
	if (len > 0) {
    ac2a:	cmp	r1, #0
    ac2c:	bne.n	ac92 <endpoint0_receive+0x6a>
    ac2e:	ldr	r4, [pc, #172]	; (acdc <endpoint0_receive+0xb4>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    ac30:	ldr	r3, [pc, #172]	; (ace0 <endpoint0_receive+0xb8>)
    ac32:	movs	r1, #1
    ac34:	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    ac36:	cbz	r2, ac70 <endpoint0_receive+0x48>
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    ac38:	ldr	r1, [pc, #168]	; (ace4 <endpoint0_receive+0xbc>)
	endpoint0_transfer_ack.pointer0 = 0;
    ac3a:	movs	r2, #0
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    ac3c:	movw	r5, #32896	; 0x8080
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    ac40:	mov.w	r0, #65537	; 0x10001
	endpoint0_transfer_ack.pointer0 = 0;
    ac44:	str	r2, [r3, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    ac46:	str	r5, [r3, #4]
	endpoint_queue_head[1].status = 0;
    ac48:	strd	r3, r2, [r4, #72]	; 0x48
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    ac4c:	str.w	r0, [r1, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    ac50:	mov.w	r2, #65536	; 0x10000
	USB1_ENDPTPRIME |= (1<<16);
    ac54:	ldr.w	r3, [r1, #432]	; 0x1b0
    ac58:	orrs	r3, r2
    ac5a:	str.w	r3, [r1, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    ac5e:	ldr	r3, [pc, #136]	; (ace8 <endpoint0_receive+0xc0>)
	while (USB1_ENDPTPRIME) ;
    ac60:	ldr	r1, [pc, #128]	; (ace4 <endpoint0_receive+0xbc>)
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    ac62:	str	r2, [r3, #0]
	while (USB1_ENDPTPRIME) ;
    ac64:	ldr.w	r3, [r1, #432]	; 0x1b0
    ac68:	cmp	r3, #0
    ac6a:	bne.n	ac64 <endpoint0_receive+0x3c>
}
    ac6c:	pop	{r4, r5}
    ac6e:	bx	lr
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    ac70:	ldr	r1, [pc, #112]	; (ace4 <endpoint0_receive+0xbc>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    ac72:	movs	r5, #128	; 0x80
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    ac74:	mov.w	r0, #65537	; 0x10001
	endpoint0_transfer_ack.pointer0 = 0;
    ac78:	str	r2, [r3, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    ac7a:	str	r5, [r3, #4]
	endpoint_queue_head[1].status = 0;
    ac7c:	strd	r3, r2, [r4, #72]	; 0x48
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    ac80:	str.w	r0, [r1, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    ac84:	ldr.w	r3, [r1, #432]	; 0x1b0
    ac88:	orr.w	r3, r3, #65536	; 0x10000
    ac8c:	str.w	r3, [r1, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    ac90:	b.n	ac5e <endpoint0_receive+0x36>
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    ac92:	lsls	r1, r1, #16
		endpoint0_transfer_data.next = 1;
    ac94:	ldr	r3, [pc, #84]	; (acec <endpoint0_receive+0xc4>)
    ac96:	movs	r4, #1
		endpoint_queue_head[0].status = 0;
    ac98:	movs	r5, #0
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    ac9a:	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    ac9e:	str	r0, [r3, #8]
		endpoint0_transfer_data.next = 1;
    aca0:	str	r4, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    aca2:	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    aca4:	add.w	r1, r0, #4096	; 0x1000
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    aca8:	ldr	r4, [pc, #48]	; (acdc <endpoint0_receive+0xb4>)
		endpoint0_transfer_data.pointer1 = addr + 4096;
    acaa:	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    acac:	add.w	r1, r0, #8192	; 0x2000
		endpoint_queue_head[0].status = 0;
    acb0:	str	r5, [r4, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    acb2:	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    acb4:	add.w	r1, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    acb8:	add.w	r0, r0, #16384	; 0x4000
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    acbc:	str	r3, [r4, #8]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    acbe:	str	r1, [r3, #20]
		USB1_ENDPTPRIME |= (1<<0);
    acc0:	ldr	r1, [pc, #32]	; (ace4 <endpoint0_receive+0xbc>)
		endpoint0_transfer_data.pointer4 = addr + 16384;
    acc2:	str	r0, [r3, #24]
		USB1_ENDPTPRIME |= (1<<0);
    acc4:	ldr.w	r3, [r1, #432]	; 0x1b0
    acc8:	orr.w	r3, r3, #1
    accc:	str.w	r3, [r1, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    acd0:	ldr.w	r3, [r1, #432]	; 0x1b0
    acd4:	cmp	r3, #0
    acd6:	bne.n	acd0 <endpoint0_receive+0xa8>
    acd8:	b.n	ac30 <endpoint0_receive+0x8>
    acda:	nop
    acdc:	.word	0x20000000
    ace0:	.word	0x20001ee0
    ace4:	.word	0x402e0000
    ace8:	.word	0x20007394
    acec:	.word	0x20001f00

0000acf0 <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    acf0:	ldr	r3, [r0, #56]	; 0x38
{
    acf2:	push	{r4, r5, r6, r7}
	if (endpoint->callback_function) {
    acf4:	cbz	r3, acfe <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    acf6:	ldr	r3, [r2, #4]
    acf8:	orr.w	r3, r3, #32768	; 0x8000
    acfc:	str	r3, [r2, #4]
	}
	__disable_irq();
    acfe:	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    ad00:	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    ad02:	cbz	r4, ad54 <schedule_transfer+0x64>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    ad04:	ldr	r3, [pc, #104]	; (ad70 <schedule_transfer+0x80>)
		last->next = (uint32_t)transfer;
    ad06:	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    ad08:	ldr.w	r4, [r3, #432]	; 0x1b0
    ad0c:	tst	r4, r1
    ad0e:	bne.n	ad4c <schedule_transfer+0x5c>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    ad10:	ldr	r6, [pc, #96]	; (ad74 <schedule_transfer+0x84>)
    ad12:	ldr	r7, [r6, #4]
    ad14:	b.n	ad20 <schedule_transfer+0x30>
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    ad16:	ldr	r4, [r6, #4]
    ad18:	subs	r4, r4, r7
    ad1a:	cmp.w	r4, #2400	; 0x960
    ad1e:	bcs.n	ad38 <schedule_transfer+0x48>
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    ad20:	ldr.w	r4, [r3, #320]	; 0x140
    ad24:	orr.w	r4, r4, #16384	; 0x4000
    ad28:	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    ad2c:	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    ad30:	ldr.w	r4, [r3, #320]	; 0x140
    ad34:	lsls	r4, r4, #17
    ad36:	bpl.n	ad16 <schedule_transfer+0x26>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    ad38:	ands	r5, r1
    ad3a:	bne.n	ad4c <schedule_transfer+0x5c>
		//ret |= 0x02;
		endpoint->next = (uint32_t)transfer;
		endpoint->status = 0;
		USB1_ENDPTPRIME |= epmask;
    ad3c:	ldr	r4, [pc, #48]	; (ad70 <schedule_transfer+0x80>)
		endpoint->status = 0;
    ad3e:	strd	r2, r5, [r0, #8]
		USB1_ENDPTPRIME |= epmask;
    ad42:	ldr.w	r3, [r4, #432]	; 0x1b0
    ad46:	orrs	r3, r1
    ad48:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
	USB1_ENDPTPRIME |= epmask;
	endpoint->first_transfer = transfer;
end:
	endpoint->last_transfer = transfer;
    ad4c:	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    ad4e:	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    ad50:	pop	{r4, r5, r6, r7}
    ad52:	bx	lr
	USB1_ENDPTPRIME |= epmask;
    ad54:	ldr	r5, [pc, #24]	; (ad70 <schedule_transfer+0x80>)
	endpoint->status = 0;
    ad56:	strd	r2, r4, [r0, #8]
	USB1_ENDPTPRIME |= epmask;
    ad5a:	ldr.w	r3, [r5, #432]	; 0x1b0
    ad5e:	orrs	r3, r1
    ad60:	str.w	r3, [r5, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    ad64:	str	r2, [r0, #48]	; 0x30
	endpoint->last_transfer = transfer;
    ad66:	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    ad68:	cpsie	i
}
    ad6a:	pop	{r4, r5, r6, r7}
    ad6c:	bx	lr
    ad6e:	nop
    ad70:	.word	0x402e0000
    ad74:	.word	0xe0001000

0000ad78 <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    ad78:	push	{r4, r5, r6, lr}
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    ad7a:	ldr	r5, [r0, #48]	; 0x30
	if (first == NULL) return;
    ad7c:	cbz	r5, ada6 <run_callbacks+0x2e>
    ad7e:	mov	r6, r0
    ad80:	mov	r2, r5

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
    ad82:	movs	r4, #0
    ad84:	b.n	ad8e <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
    ad86:	ldr	r2, [r2, #0]
		count++;
    ad88:	adds	r4, #1
		if ((uint32_t)t == 1) {
    ad8a:	cmp	r2, #1
    ad8c:	beq.n	ada8 <run_callbacks+0x30>
		if (t->status & (1<<7)) {
    ad8e:	ldr	r3, [r2, #4]
    ad90:	ands.w	r3, r3, #128	; 0x80
    ad94:	beq.n	ad86 <run_callbacks+0xe>
			ep->first_transfer = t;
    ad96:	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    ad98:	cbz	r4, ada6 <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
    ad9a:	mov	r0, r5
		ep->callback_function(first);
    ad9c:	ldr	r3, [r6, #56]	; 0x38
		transfer_t *next = (transfer_t *)first->next;
    ad9e:	ldr	r5, [r5, #0]
		ep->callback_function(first);
    ada0:	blx	r3
	while (count) {
    ada2:	subs	r4, #1
    ada4:	bne.n	ad9a <run_callbacks+0x22>
		first = next;
		count--;
	}
}
    ada6:	pop	{r4, r5, r6, pc}
			ep->last_transfer = NULL;
    ada8:	strd	r3, r3, [r6, #48]	; 0x30
			break;
    adac:	b.n	ad98 <run_callbacks+0x20>
    adae:	nop

0000adb0 <endpoint0_transmit.constprop.0>:
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    adb0:	push	{r4, r5}
	if (len > 0) {
    adb2:	cbnz	r1, adec <endpoint0_transmit.constprop.0+0x3c>
    adb4:	ldr	r4, [pc, #124]	; (ae34 <endpoint0_transmit.constprop.0+0x84>)
	endpoint0_transfer_ack.next = 1;
    adb6:	ldr	r3, [pc, #128]	; (ae38 <endpoint0_transmit.constprop.0+0x88>)
	endpoint0_transfer_ack.pointer0 = 0;
    adb8:	movs	r1, #0
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    adba:	ldr	r2, [pc, #128]	; (ae3c <endpoint0_transmit.constprop.0+0x8c>)
	endpoint0_transfer_ack.next = 1;
    adbc:	movs	r5, #1
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    adbe:	mov.w	r0, #65537	; 0x10001
	endpoint0_transfer_ack.pointer0 = 0;
    adc2:	str	r1, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    adc4:	str	r5, [r3, #0]
	endpoint_queue_head[0].status = 0;
    adc6:	strd	r3, r1, [r4, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    adca:	movs	r4, #128	; 0x80
    adcc:	str	r4, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    adce:	str.w	r0, [r2, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    add2:	ldr.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    add6:	ldr	r0, [pc, #104]	; (ae40 <endpoint0_transmit.constprop.0+0x90>)
	USB1_ENDPTPRIME |= (1<<0);
    add8:	orrs	r3, r5
    adda:	str.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    adde:	str	r1, [r0, #0]
	while (USB1_ENDPTPRIME) ;
    ade0:	ldr.w	r3, [r2, #432]	; 0x1b0
    ade4:	cmp	r3, #0
    ade6:	bne.n	ade0 <endpoint0_transmit.constprop.0+0x30>
}
    ade8:	pop	{r4, r5}
    adea:	bx	lr
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    adec:	lsls	r1, r1, #16
		endpoint0_transfer_data.next = 1;
    adee:	ldr	r3, [pc, #84]	; (ae44 <endpoint0_transmit.constprop.0+0x94>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    adf0:	ldr	r4, [pc, #64]	; (ae34 <endpoint0_transmit.constprop.0+0x84>)
		endpoint0_transfer_data.next = 1;
    adf2:	movs	r5, #1
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    adf4:	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    adf8:	str	r0, [r3, #8]
		USB1_ENDPTPRIME |= (1<<16);
    adfa:	ldr	r2, [pc, #64]	; (ae3c <endpoint0_transmit.constprop.0+0x8c>)
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    adfc:	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    adfe:	add.w	r1, r0, #4096	; 0x1000
		endpoint0_transfer_data.next = 1;
    ae02:	str	r5, [r3, #0]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    ae04:	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    ae06:	add.w	r1, r0, #8192	; 0x2000
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    ae0a:	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.pointer2 = addr + 8192;
    ae0c:	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    ae0e:	add.w	r1, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    ae12:	add.w	r0, r0, #16384	; 0x4000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    ae16:	str	r1, [r3, #20]
		endpoint_queue_head[1].status = 0;
    ae18:	movs	r1, #0
		endpoint0_transfer_data.pointer4 = addr + 16384;
    ae1a:	str	r0, [r3, #24]
		endpoint_queue_head[1].status = 0;
    ae1c:	str	r1, [r4, #76]	; 0x4c
		USB1_ENDPTPRIME |= (1<<16);
    ae1e:	ldr.w	r3, [r2, #432]	; 0x1b0
    ae22:	orr.w	r3, r3, #65536	; 0x10000
    ae26:	str.w	r3, [r2, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    ae2a:	ldr.w	r3, [r2, #432]	; 0x1b0
    ae2e:	cmp	r3, #0
    ae30:	bne.n	ae2a <endpoint0_transmit.constprop.0+0x7a>
    ae32:	b.n	adb6 <endpoint0_transmit.constprop.0+0x6>
    ae34:	.word	0x20000000
    ae38:	.word	0x20001ee0
    ae3c:	.word	0x402e0000
    ae40:	.word	0x20007394
    ae44:	.word	0x20001f00

0000ae48 <usb_stop_sof_interrupts>:
	sof_usage &= ~(1 << interface);
    ae48:	ldr	r1, [pc, #32]	; (ae6c <usb_stop_sof_interrupts+0x24>)
    ae4a:	movs	r2, #1
    ae4c:	ldrb	r3, [r1, #0]
    ae4e:	lsl.w	r0, r2, r0
    ae52:	bic.w	r0, r3, r0
    ae56:	strb	r0, [r1, #0]
	if (sof_usage == 0) {
    ae58:	cbnz	r0, ae68 <usb_stop_sof_interrupts+0x20>
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    ae5a:	ldr	r2, [pc, #20]	; (ae70 <usb_stop_sof_interrupts+0x28>)
    ae5c:	ldr.w	r3, [r2, #328]	; 0x148
    ae60:	bic.w	r3, r3, #128	; 0x80
    ae64:	str.w	r3, [r2, #328]	; 0x148
}
    ae68:	bx	lr
    ae6a:	nop
    ae6c:	.word	0x20007b69
    ae70:	.word	0x402e0000

0000ae74 <usb_isr>:
{
    ae74:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t status = USB1_USBSTS;
    ae78:	ldr	r4, [pc, #672]	; (b11c <usb_isr+0x2a8>)
{
    ae7a:	sub	sp, #28
	uint32_t status = USB1_USBSTS;
    ae7c:	ldr.w	r6, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    ae80:	lsls	r1, r6, #31
	USB1_USBSTS = status;
    ae82:	str.w	r6, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    ae86:	bpl.w	afc2 <usb_isr+0x14e>
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    ae8a:	ldr.w	r3, [r4, #428]	; 0x1ac
		while (setupstatus) {
    ae8e:	cmp	r3, #0
    ae90:	beq.n	af5a <usb_isr+0xe6>
    ae92:	ldr	r5, [pc, #652]	; (b120 <usb_isr+0x2ac>)
    ae94:	ldr.w	r9, [pc, #656]	; b128 <usb_isr+0x2b4>
		usb_configuration = setup.wValue;
    ae98:	ldr.w	fp, [pc, #684]	; b148 <usb_isr+0x2d4>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    ae9c:	ldr.w	r8, [pc, #684]	; b14c <usb_isr+0x2d8>
			USB1_ENDPTSETUPSTAT = setupstatus;
    aea0:	str.w	r3, [r4, #428]	; 0x1ac
				s.word2 = endpoint_queue_head[0].setup1;
    aea4:	ldrd	r7, r0, [r5, #40]	; 0x28
				USB1_USBCMD |= USB_USBCMD_SUTW;
    aea8:	ldr.w	r3, [r4, #320]	; 0x140
    aeac:	orr.w	r3, r3, #8192	; 0x2000
    aeb0:	str.w	r3, [r4, #320]	; 0x140
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    aeb4:	ldr.w	r3, [r4, #320]	; 0x140
    aeb8:	lsls	r3, r3, #18
    aeba:	bpl.n	aea8 <usb_isr+0x34>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    aebc:	ldr.w	r3, [r4, #320]	; 0x140
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    aec0:	mov.w	r2, #65537	; 0x10001
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    aec4:	bic.w	r3, r3, #8192	; 0x2000
    aec8:	str.w	r3, [r4, #320]	; 0x140
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    aecc:	str.w	r2, [r4, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    aed0:	ldr.w	r3, [r4, #436]	; 0x1b4
    aed4:	ands.w	r3, r3, #65537	; 0x10001
    aed8:	bne.n	aed0 <usb_isr+0x5c>
			endpoint0_notify_mask = 0;
    aeda:	uxth	r2, r7
    aedc:	str.w	r3, [r9]
	switch (setup.wRequestAndType) {
    aee0:	cmp.w	r2, #2304	; 0x900
	setup.bothwords = setupdata;
    aee4:	strd	r7, r0, [sp, #16]
	switch (setup.wRequestAndType) {
    aee8:	beq.w	b250 <usb_isr+0x3dc>
    aeec:	bhi.w	b076 <usb_isr+0x202>
    aef0:	movw	r1, #770	; 0x302
    aef4:	cmp	r2, r1
    aef6:	beq.w	b346 <usb_isr+0x4d2>
    aefa:	bls.w	b0b8 <usb_isr+0x244>
    aefe:	movw	r1, #1665	; 0x681
    af02:	cmp	r2, r1
    af04:	bhi.w	b060 <usb_isr+0x1ec>
    af08:	cmp.w	r2, #1664	; 0x680
    af0c:	bcs.w	b2ba <usb_isr+0x446>
    af10:	cmp.w	r2, #1280	; 0x500
    af14:	bne.w	b054 <usb_isr+0x1e0>
	endpoint0_transfer_ack.next = 1;
    af18:	ldr	r2, [pc, #520]	; (b124 <usb_isr+0x2b0>)
	endpoint_queue_head[1].status = 0;
    af1a:	str	r3, [r5, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    af1c:	str	r3, [r2, #8]
	endpoint0_transfer_ack.next = 1;
    af1e:	movs	r3, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    af20:	str	r2, [r5, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    af22:	str	r3, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    af24:	movs	r3, #128	; 0x80
    af26:	str	r3, [r2, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    af28:	mov.w	r3, #65537	; 0x10001
    af2c:	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    af30:	ldr.w	r3, [r4, #432]	; 0x1b0
    af34:	orr.w	r3, r3, #65536	; 0x10000
    af38:	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    af3c:	ldr.w	r3, [r4, #432]	; 0x1b0
    af40:	cmp	r3, #0
    af42:	bne.n	af3c <usb_isr+0xc8>
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    af44:	ldrh.w	r3, [sp, #18]
    af48:	lsls	r3, r3, #25
    af4a:	orr.w	r3, r3, #16777216	; 0x1000000
    af4e:	str.w	r3, [r4, #340]	; 0x154
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    af52:	ldr.w	r3, [r4, #428]	; 0x1ac
		while (setupstatus) {
    af56:	cmp	r3, #0
    af58:	bne.n	aea0 <usb_isr+0x2c>
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    af5a:	ldr	r3, [pc, #448]	; (b11c <usb_isr+0x2a8>)
    af5c:	ldr.w	r4, [r3, #444]	; 0x1bc
		if (completestatus) {
    af60:	cbz	r4, afc2 <usb_isr+0x14e>
			if (completestatus & endpoint0_notify_mask) {
    af62:	ldr	r2, [pc, #452]	; (b128 <usb_isr+0x2b4>)
			USB1_ENDPTCOMPLETE = completestatus;
    af64:	str.w	r4, [r3, #444]	; 0x1bc
			if (completestatus & endpoint0_notify_mask) {
    af68:	ldr	r1, [r2, #0]
    af6a:	tst	r4, r1
    af6c:	bne.w	b480 <usb_isr+0x60c>
			completestatus &= endpointN_notify_mask;
    af70:	ldr	r3, [pc, #440]	; (b12c <usb_isr+0x2b8>)
    af72:	ldr	r3, [r3, #0]
			if (completestatus) {
    af74:	ands	r4, r3
    af76:	beq.n	afc2 <usb_isr+0x14e>
				while (tx) {
    af78:	movs.w	r8, r4, lsr #16
    af7c:	beq.n	afa0 <usb_isr+0x12c>
    af7e:	ldr	r5, [pc, #416]	; (b120 <usb_isr+0x2ac>)
					tx &= ~(1<<p);
    af80:	mov.w	r9, #1
					int p=__builtin_ctz(tx);
    af84:	rbit	r7, r8
    af88:	clz	r7, r7
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    af8c:	add.w	r0, r5, r7, lsl #7
					tx &= ~(1<<p);
    af90:	lsl.w	r7, r9, r7
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    af94:	adds	r0, #64	; 0x40
    af96:	bl	ad78 <run_callbacks>
				while (tx) {
    af9a:	bics.w	r8, r8, r7
    af9e:	bne.n	af84 <usb_isr+0x110>
				uint32_t rx = completestatus & 0xffff;
    afa0:	uxth	r4, r4
				while(rx) {
    afa2:	cbz	r4, afc2 <usb_isr+0x14e>
    afa4:	ldr	r5, [pc, #376]	; (b120 <usb_isr+0x2ac>)
					rx &= ~(1<<p);
    afa6:	mov.w	r8, #1
					int p=__builtin_ctz(rx);
    afaa:	rbit	r7, r4
    afae:	clz	r7, r7
					run_callbacks(endpoint_queue_head + p * 2);
    afb2:	add.w	r0, r5, r7, lsl #7
					rx &= ~(1<<p);
    afb6:	lsl.w	r7, r8, r7
					run_callbacks(endpoint_queue_head + p * 2);
    afba:	bl	ad78 <run_callbacks>
				while(rx) {
    afbe:	bics	r4, r7
    afc0:	bne.n	afaa <usb_isr+0x136>
	if (status & USB_USBSTS_URI) { // page 3164
    afc2:	lsls	r2, r6, #25
    afc4:	bpl.n	aff4 <usb_isr+0x180>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    afc6:	ldr	r3, [pc, #340]	; (b11c <usb_isr+0x2a8>)
    afc8:	ldr.w	r2, [r3, #428]	; 0x1ac
    afcc:	str.w	r2, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    afd0:	ldr.w	r2, [r3, #444]	; 0x1bc
    afd4:	str.w	r2, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    afd8:	ldr.w	r4, [r3, #432]	; 0x1b0
    afdc:	cmp	r4, #0
    afde:	bne.n	afd8 <usb_isr+0x164>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    afe0:	mov.w	r2, #4294967295
    afe4:	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    afe8:	ldr.w	r3, [r3, #388]	; 0x184
		usb_serial_reset();
    afec:	bl	a554 <usb_serial_reset>
		endpointN_notify_mask = 0;
    aff0:	ldr	r3, [pc, #312]	; (b12c <usb_isr+0x2b8>)
    aff2:	str	r4, [r3, #0]
	if (status & USB_USBSTS_TI0) {
    aff4:	lsls	r4, r6, #7
    aff6:	bpl.n	b000 <usb_isr+0x18c>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    aff8:	ldr	r3, [pc, #308]	; (b130 <usb_isr+0x2bc>)
    affa:	ldr	r3, [r3, #0]
    affc:	cbz	r3, b000 <usb_isr+0x18c>
    affe:	blx	r3
	if (status & USB_USBSTS_TI1) {
    b000:	lsls	r0, r6, #6
    b002:	bpl.n	b00c <usb_isr+0x198>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    b004:	ldr	r3, [pc, #300]	; (b134 <usb_isr+0x2c0>)
    b006:	ldr	r3, [r3, #0]
    b008:	cbz	r3, b00c <usb_isr+0x198>
    b00a:	blx	r3
	if (status & USB_USBSTS_PCI) {
    b00c:	lsls	r1, r6, #29
    b00e:	bpl.n	b024 <usb_isr+0x1b0>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    b010:	ldr	r3, [pc, #264]	; (b11c <usb_isr+0x2a8>)
    b012:	ldr.w	r3, [r3, #388]	; 0x184
    b016:	ands.w	r3, r3, #512	; 0x200
    b01a:	beq.w	b23e <usb_isr+0x3ca>
			usb_high_speed = 1;
    b01e:	ldr	r3, [pc, #280]	; (b138 <usb_isr+0x2c4>)
    b020:	movs	r2, #1
    b022:	strb	r2, [r3, #0]
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    b024:	ldr	r3, [pc, #244]	; (b11c <usb_isr+0x2a8>)
    b026:	ldr.w	r3, [r3, #328]	; 0x148
    b02a:	lsls	r2, r3, #24
    b02c:	bpl.n	b04e <usb_isr+0x1da>
    b02e:	lsls	r3, r6, #24
    b030:	bpl.n	b04e <usb_isr+0x1da>
		if (usb_reboot_timer) {
    b032:	ldr	r2, [pc, #264]	; (b13c <usb_isr+0x2c8>)
    b034:	ldrb	r3, [r2, #0]
    b036:	cbz	r3, b044 <usb_isr+0x1d0>
			if (--usb_reboot_timer == 0) {
    b038:	subs	r3, #1
    b03a:	uxtb	r3, r3
    b03c:	strb	r3, [r2, #0]
    b03e:	cmp	r3, #0
    b040:	beq.w	b576 <usb_isr+0x702>
}
    b044:	add	sp, #28
    b046:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		usb_midi_flush_output();
    b04a:	b.w	bfd8 <usb_midi_flush_output>
}
    b04e:	add	sp, #28
    b050:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (setup.wRequestAndType) {
    b054:	bls.n	b150 <usb_isr+0x2dc>
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    b056:	mov.w	r3, #65537	; 0x10001
    b05a:	str.w	r3, [r4, #448]	; 0x1c0
    b05e:	b.n	af52 <usb_isr+0xde>
	switch (setup.wRequestAndType) {
    b060:	cmp.w	r2, #2176	; 0x880
    b064:	bne.n	b056 <usb_isr+0x1e2>
		reply_buffer[0] = usb_configuration;
    b066:	ldr	r0, [pc, #216]	; (b140 <usb_isr+0x2cc>)
		endpoint0_transmit(reply_buffer, 1, 0);
    b068:	movs	r1, #1
		reply_buffer[0] = usb_configuration;
    b06a:	ldrb.w	r3, [fp]
    b06e:	strb	r3, [r0, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    b070:	bl	adb0 <endpoint0_transmit.constprop.0>
		return;
    b074:	b.n	af52 <usb_isr+0xde>
	switch (setup.wRequestAndType) {
    b076:	movw	r1, #8737	; 0x2221
    b07a:	cmp	r2, r1
    b07c:	beq.w	b426 <usb_isr+0x5b2>
    b080:	bls.w	b1b6 <usb_isr+0x342>
    b084:	movw	r1, #33186	; 0x81a2
    b088:	cmp	r2, r1
    b08a:	beq.w	b40c <usb_isr+0x598>
    b08e:	bls.n	b17e <usb_isr+0x30a>
    b090:	movw	r3, #33953	; 0x84a1
    b094:	cmp	r2, r3
    b096:	bne.w	b206 <usb_isr+0x392>
		if (setup.wLength <= sizeof(endpoint0_buffer)) {
    b09a:	cmp.w	r0, #589824	; 0x90000
    b09e:	bcs.n	b056 <usb_isr+0x1e2>
			if (usb_audio_get_feature(&setup, endpoint0_buffer, &len)) {
    b0a0:	add	r2, sp, #12
    b0a2:	ldr	r1, [pc, #160]	; (b144 <usb_isr+0x2d0>)
    b0a4:	add	r0, sp, #16
    b0a6:	bl	cf5c <usb_audio_get_feature>
    b0aa:	cmp	r0, #0
    b0ac:	beq.n	b056 <usb_isr+0x1e2>
				endpoint0_transmit(endpoint0_buffer, len, 0);
    b0ae:	ldr	r1, [sp, #12]
    b0b0:	ldr	r0, [pc, #144]	; (b144 <usb_isr+0x2d0>)
    b0b2:	bl	adb0 <endpoint0_transmit.constprop.0>
				return;
    b0b6:	b.n	af52 <usb_isr+0xde>
	switch (setup.wRequestAndType) {
    b0b8:	cmp	r2, #130	; 0x82
    b0ba:	beq.w	b3e0 <usb_isr+0x56c>
    b0be:	bls.w	b22c <usb_isr+0x3b8>
    b0c2:	cmp.w	r2, #258	; 0x102
    b0c6:	bne.w	b216 <usb_isr+0x3a2>
		if (endpoint > 7) break;
    b0ca:	tst.w	r0, #120	; 0x78
    b0ce:	uxth	r3, r0
    b0d0:	bne.n	b056 <usb_isr+0x1e2>
		endpoint = setup.wIndex & 0x7F;
    b0d2:	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    b0d6:	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    b0da:	ldr.w	r3, [r8, r2, lsl #2]
    b0de:	ite	ne
    b0e0:	bicne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    b0e4:	biceq.w	r3, r3, #1
    b0e8:	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    b0ec:	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    b0ee:	ldr	r3, [pc, #52]	; (b124 <usb_isr+0x2b0>)
	endpoint_queue_head[1].status = 0;
    b0f0:	str	r2, [r5, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    b0f2:	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    b0f4:	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    b0f6:	str	r3, [r5, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    b0f8:	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    b0fa:	movs	r2, #128	; 0x80
    b0fc:	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    b0fe:	mov.w	r3, #65537	; 0x10001
    b102:	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    b106:	ldr.w	r3, [r4, #432]	; 0x1b0
    b10a:	orr.w	r3, r3, #65536	; 0x10000
    b10e:	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    b112:	ldr.w	r3, [r4, #432]	; 0x1b0
    b116:	cmp	r3, #0
    b118:	bne.n	b112 <usb_isr+0x29e>
    b11a:	b.n	af52 <usb_isr+0xde>
    b11c:	.word	0x402e0000
    b120:	.word	0x20000000
    b124:	.word	0x20001ee0
    b128:	.word	0x20007394
    b12c:	.word	0x20007398
    b130:	.word	0x20007b2c
    b134:	.word	0x20007b30
    b138:	.word	0x20007b76
    b13c:	.word	0x20007b77
    b140:	.word	0x20007a78
    b144:	.word	0x2000738c
    b148:	.word	0x20007b75
    b14c:	.word	0x402e01c0
	switch (setup.wRequestAndType) {
    b150:	movw	r3, #801	; 0x321
    b154:	cmp	r2, r3
    b156:	beq.n	b162 <usb_isr+0x2ee>
    b158:	movw	r3, #1057	; 0x421
    b15c:	cmp	r2, r3
    b15e:	bne.w	b056 <usb_isr+0x1e2>
		if (setup.wLength <= sizeof(endpoint0_buffer)) {
    b162:	cmp.w	r0, #589824	; 0x90000
    b166:	mov.w	r1, r0, lsr #16
    b16a:	bcs.w	b056 <usb_isr+0x1e2>
			endpoint0_setupdata.bothwords = setupdata;
    b16e:	ldr	r3, [pc, #724]	; (b444 <usb_isr+0x5d0>)
			endpoint0_receive(endpoint0_buffer, setup.wLength, 1);
    b170:	movs	r2, #1
			endpoint0_setupdata.bothwords = setupdata;
    b172:	strd	r7, r0, [r3]
			endpoint0_receive(endpoint0_buffer, setup.wLength, 1);
    b176:	ldr	r0, [pc, #720]	; (b448 <usb_isr+0x5d4>)
    b178:	bl	ac28 <endpoint0_receive>
			return; // handle these after ACK
    b17c:	b.n	af52 <usb_isr+0xde>
	switch (setup.wRequestAndType) {
    b17e:	movw	r3, #8993	; 0x2321
    b182:	cmp	r2, r3
    b184:	bne.n	b1d2 <usb_isr+0x35e>
	endpoint0_transfer_ack.next = 1;
    b186:	ldr	r3, [pc, #708]	; (b44c <usb_isr+0x5d8>)
	endpoint0_transfer_ack.pointer0 = 0;
    b188:	movs	r2, #0
    b18a:	str	r2, [r3, #8]
	endpoint_queue_head[1].status = 0;
    b18c:	str	r2, [r5, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
    b18e:	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    b190:	str	r3, [r5, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    b192:	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    b194:	movs	r2, #128	; 0x80
    b196:	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    b198:	mov.w	r3, #65537	; 0x10001
    b19c:	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    b1a0:	ldr.w	r3, [r4, #432]	; 0x1b0
    b1a4:	orr.w	r3, r3, #65536	; 0x10000
    b1a8:	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    b1ac:	ldr.w	r3, [r4, #432]	; 0x1b0
    b1b0:	cmp	r3, #0
    b1b2:	bne.n	b1ac <usb_isr+0x338>
    b1b4:	b.n	af52 <usb_isr+0xde>
	switch (setup.wRequestAndType) {
    b1b6:	movw	r1, #2817	; 0xb01
    b1ba:	cmp	r2, r1
    b1bc:	beq.w	b39a <usb_isr+0x526>
    b1c0:	movw	r3, #8225	; 0x2021
    b1c4:	cmp	r2, r3
    b1c6:	bne.n	b1de <usb_isr+0x36a>
		if (setup.wLength != 7) break;
    b1c8:	lsrs	r1, r0, #16
    b1ca:	cmp	r1, #7
    b1cc:	bne.w	b056 <usb_isr+0x1e2>
    b1d0:	b.n	b16e <usb_isr+0x2fa>
	switch (setup.wRequestAndType) {
    b1d2:	movw	r3, #33185	; 0x81a1
    b1d6:	cmp	r2, r3
    b1d8:	beq.w	b09a <usb_isr+0x226>
    b1dc:	b.n	b056 <usb_isr+0x1e2>
    b1de:	movw	r3, #2689	; 0xa81
    b1e2:	cmp	r2, r3
    b1e4:	bne.w	b056 <usb_isr+0x1e2>
		if (setup.wIndex == AUDIO_INTERFACE+1) {
    b1e8:	uxth	r0, r0
    b1ea:	cmp	r0, #4
    b1ec:	beq.w	b564 <usb_isr+0x6f0>
		} else if (setup.wIndex == AUDIO_INTERFACE+2) {
    b1f0:	cmp	r0, #5
    b1f2:	bne.w	b056 <usb_isr+0x1e2>
			endpoint0_buffer[0] = usb_audio_receive_setting;
    b1f6:	ldr	r3, [pc, #600]	; (b450 <usb_isr+0x5dc>)
    b1f8:	ldrb	r3, [r3, #0]
			endpoint0_transmit(endpoint0_buffer, 1, 0);
    b1fa:	movs	r1, #1
			endpoint0_buffer[0] = usb_audio_receive_setting;
    b1fc:	ldr	r0, [pc, #584]	; (b448 <usb_isr+0x5d4>)
    b1fe:	strb	r3, [r0, #0]
			endpoint0_transmit(endpoint0_buffer, 1, 0);
    b200:	bl	adb0 <endpoint0_transmit.constprop.0>
			return;
    b204:	b.n	af52 <usb_isr+0xde>
	switch (setup.wRequestAndType) {
    b206:	bic.w	r2, r2, #256	; 0x100
    b20a:	movw	r3, #33441	; 0x82a1
    b20e:	cmp	r2, r3
    b210:	beq.w	b09a <usb_isr+0x226>
    b214:	b.n	b056 <usb_isr+0x1e2>
    b216:	bcc.w	b056 <usb_isr+0x1e2>
    b21a:	movw	r3, #289	; 0x121
    b21e:	cmp	r2, r3
    b220:	beq.n	b162 <usb_isr+0x2ee>
    b222:	movw	r3, #545	; 0x221
    b226:	cmp	r2, r3
    b228:	beq.n	b162 <usb_isr+0x2ee>
    b22a:	b.n	b056 <usb_isr+0x1e2>
    b22c:	cmp	r2, #128	; 0x80
    b22e:	bne.w	b056 <usb_isr+0x1e2>
		reply_buffer[0] = 0;
    b232:	ldr	r0, [pc, #544]	; (b454 <usb_isr+0x5e0>)
		endpoint0_transmit(reply_buffer, 2, 0);
    b234:	movs	r1, #2
		reply_buffer[0] = 0;
    b236:	strh	r3, [r0, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    b238:	bl	adb0 <endpoint0_transmit.constprop.0>
		return;
    b23c:	b.n	af52 <usb_isr+0xde>
			usb_high_speed = 0;
    b23e:	ldr	r2, [pc, #536]	; (b458 <usb_isr+0x5e4>)
    b240:	strb	r3, [r2, #0]
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    b242:	ldr	r3, [pc, #536]	; (b45c <usb_isr+0x5e8>)
    b244:	ldr.w	r3, [r3, #328]	; 0x148
    b248:	lsls	r2, r3, #24
    b24a:	bpl.w	b04e <usb_isr+0x1da>
    b24e:	b.n	b02e <usb_isr+0x1ba>
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    b250:	ldr	r1, [pc, #524]	; (b460 <usb_isr+0x5ec>)
		usb_configuration = setup.wValue;
    b252:	ubfx	ip, r7, #16, #8
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    b256:	mov.w	r2, #13107400	; 0xc800c8
    b25a:	str	r3, [sp, #4]
		usb_configuration = setup.wValue;
    b25c:	strb.w	ip, [fp]
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    b260:	str.w	r1, [r4, #456]	; 0x1c8
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    b264:	str.w	r2, [r4, #460]	; 0x1cc
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    b268:	str.w	r2, [r4, #464]	; 0x1d0
		USB1_ENDPTCTRL5 = ENDPOINT5_CONFIG;
    b26c:	mov.w	r2, #12845252	; 0xc400c4
    b270:	str.w	r2, [r4, #468]	; 0x1d4
		USB1_ENDPTCTRL6 = ENDPOINT6_CONFIG;
    b274:	subs	r2, #194	; 0xc2
    b276:	str.w	r2, [r4, #472]	; 0x1d8
		usb_serial_configure();
    b27a:	bl	a558 <usb_serial_configure>
		usb_midi_configure();
    b27e:	bl	bf14 <usb_midi_configure>
		usb_audio_configure();
    b282:	bl	ce74 <usb_audio_configure>
	endpoint0_transfer_ack.next = 1;
    b286:	ldr	r2, [pc, #452]	; (b44c <usb_isr+0x5d8>)
    b288:	movs	r1, #1
	endpoint_queue_head[1].status = 0;
    b28a:	ldr	r3, [sp, #4]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    b28c:	str	r2, [r5, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    b28e:	str	r1, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    b290:	movs	r1, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
    b292:	str	r3, [r2, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    b294:	str	r1, [r2, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    b296:	mov.w	r2, #65537	; 0x10001
	endpoint_queue_head[1].status = 0;
    b29a:	str	r3, [r5, #76]	; 0x4c
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    b29c:	str.w	r2, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    b2a0:	ldr.w	r2, [r4, #432]	; 0x1b0
    b2a4:	orr.w	r2, r2, #65536	; 0x10000
    b2a8:	str.w	r2, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    b2ac:	str.w	r3, [r9]
	while (USB1_ENDPTPRIME) ;
    b2b0:	ldr.w	r3, [r4, #432]	; 0x1b0
    b2b4:	cmp	r3, #0
    b2b6:	bne.n	b2b0 <usb_isr+0x43c>
    b2b8:	b.n	af52 <usb_isr+0xde>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    b2ba:	ldr	r3, [pc, #424]	; (b464 <usb_isr+0x5f0>)
    b2bc:	ldr	r1, [r3, #4]
    b2be:	cmp	r1, #0
    b2c0:	beq.w	b056 <usb_isr+0x1e2>
    b2c4:	mov.w	ip, r7, lsr #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    b2c8:	uxth.w	lr, r0
    b2cc:	b.n	b2d8 <usb_isr+0x464>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    b2ce:	ldr	r1, [r3, #16]
    b2d0:	adds	r3, #12
    b2d2:	cmp	r1, #0
    b2d4:	beq.w	b056 <usb_isr+0x1e2>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    b2d8:	ldrh	r2, [r3, #0]
    b2da:	cmp	r2, ip
    b2dc:	bne.n	b2ce <usb_isr+0x45a>
    b2de:	ldrh	r2, [r3, #2]
    b2e0:	cmp	r2, lr
    b2e2:	bne.n	b2ce <usb_isr+0x45a>
				if ((setup.wValue >> 8) == 3) {
    b2e4:	mov.w	r2, ip, lsr #8
    b2e8:	cmp	r2, #3
    b2ea:	beq.w	b4b2 <usb_isr+0x63e>
					datalen = list->length;
    b2ee:	ldrh	r2, [r3, #8]
				if (datalen > setup.wLength) datalen = setup.wLength;
    b2f0:	lsrs	r0, r0, #16
    b2f2:	cmp	r2, r0
    b2f4:	it	cs
    b2f6:	movcs	r2, r0
				if (setup.wValue == 0x200) {
    b2f8:	cmp.w	ip, #512	; 0x200
    b2fc:	mov	r7, r2
    b2fe:	bne.w	b4be <usb_isr+0x64a>
					if (usb_high_speed) src = usb_config_descriptor_480;
    b302:	ldr	r3, [pc, #340]	; (b458 <usb_isr+0x5e4>)
    b304:	ldr	r1, [pc, #352]	; (b468 <usb_isr+0x5f4>)
    b306:	ldrb	r0, [r3, #0]
    b308:	ldr	r3, [pc, #352]	; (b46c <usb_isr+0x5f8>)
					memcpy(usb_descriptor_buffer, src, datalen);
    b30a:	ldr.w	sl, [pc, #356]	; b470 <usb_isr+0x5fc>
    b30e:	cmp	r0, #0
    b310:	it	ne
    b312:	movne	r1, r3
    b314:	ldr	r0, [pc, #344]	; (b470 <usb_isr+0x5fc>)
    b316:	bl	a0c4 <memcpy>
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    b31a:	bic.w	r3, sl, #31
	uint32_t end_addr = (uint32_t)addr + size;
    b31e:	add.w	r1, sl, r7
	asm("dsb");
    b322:	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    b326:	mov.w	r0, #3758153728	; 0xe000e000
    b32a:	str.w	r3, [r0, #3952]	; 0xf70
		location += 32;
    b32e:	adds	r3, #32
	} while (location < end_addr);
    b330:	cmp	r1, r3
    b332:	bhi.n	b32a <usb_isr+0x4b6>
	asm("dsb");
    b334:	dsb	sy
	asm("isb");
    b338:	isb	sy
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    b33c:	ldr	r0, [pc, #304]	; (b470 <usb_isr+0x5fc>)
    b33e:	mov	r1, r7
    b340:	bl	adb0 <endpoint0_transmit.constprop.0>
				return;
    b344:	b.n	af52 <usb_isr+0xde>
		if (endpoint > 7) break;
    b346:	tst.w	r0, #120	; 0x78
    b34a:	uxth	r3, r0
    b34c:	bne.w	b056 <usb_isr+0x1e2>
		endpoint = setup.wIndex & 0x7F;
    b350:	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    b354:	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    b358:	ldr.w	r3, [r8, r2, lsl #2]
    b35c:	ite	ne
    b35e:	orrne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    b362:	orreq.w	r3, r3, #1
    b366:	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    b36a:	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    b36c:	ldr	r3, [pc, #220]	; (b44c <usb_isr+0x5d8>)
	endpoint_queue_head[1].status = 0;
    b36e:	str	r2, [r5, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    b370:	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    b372:	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    b374:	str	r3, [r5, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    b376:	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    b378:	movs	r2, #128	; 0x80
    b37a:	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    b37c:	mov.w	r3, #65537	; 0x10001
    b380:	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    b384:	ldr.w	r3, [r4, #432]	; 0x1b0
    b388:	orr.w	r3, r3, #65536	; 0x10000
    b38c:	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    b390:	ldr.w	r3, [r4, #432]	; 0x1b0
    b394:	cmp	r3, #0
    b396:	bne.n	b390 <usb_isr+0x51c>
    b398:	b.n	af52 <usb_isr+0xde>
		if (setup.wIndex == AUDIO_INTERFACE+1) {
    b39a:	uxth	r0, r0
    b39c:	cmp	r0, #4
    b39e:	beq.w	b52c <usb_isr+0x6b8>
		} else if (setup.wIndex == AUDIO_INTERFACE+2) {
    b3a2:	cmp	r0, #5
    b3a4:	bne.w	b056 <usb_isr+0x1e2>
	endpoint0_transfer_ack.next = 1;
    b3a8:	ldr	r2, [pc, #160]	; (b44c <usb_isr+0x5d8>)
			usb_audio_receive_setting = setup.wValue;
    b3aa:	ubfx	ip, r7, #16, #16
	endpoint_queue_head[1].status = 0;
    b3ae:	str	r3, [r5, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    b3b0:	str	r3, [r2, #8]
			usb_audio_receive_setting = setup.wValue;
    b3b2:	ldr	r3, [pc, #156]	; (b450 <usb_isr+0x5dc>)
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    b3b4:	str	r2, [r5, #72]	; 0x48
			usb_audio_receive_setting = setup.wValue;
    b3b6:	strb.w	ip, [r3]
	endpoint0_transfer_ack.next = 1;
    b3ba:	movs	r3, #1
    b3bc:	str	r3, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    b3be:	movs	r3, #128	; 0x80
    b3c0:	str	r3, [r2, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    b3c2:	mov.w	r3, #65537	; 0x10001
    b3c6:	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    b3ca:	ldr.w	r3, [r4, #432]	; 0x1b0
    b3ce:	orr.w	r3, r3, #65536	; 0x10000
    b3d2:	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    b3d6:	ldr.w	r3, [r4, #432]	; 0x1b0
    b3da:	cmp	r3, #0
    b3dc:	bne.n	b3d6 <usb_isr+0x562>
    b3de:	b.n	af52 <usb_isr+0xde>
		endpoint = setup.wIndex & 0x7F;
    b3e0:	uxth	r3, r0
		if (endpoint > 7) break;
    b3e2:	ands.w	r0, r0, #120	; 0x78
    b3e6:	bne.w	b056 <usb_isr+0x1e2>
		endpoint = setup.wIndex & 0x7F;
    b3ea:	and.w	r2, r3, #127	; 0x7f
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    b3ee:	ldr.w	r1, [r8, r2, lsl #2]
		reply_buffer[0] = 0;
    b3f2:	ldr	r2, [pc, #96]	; (b454 <usb_isr+0x5e0>)
    b3f4:	strh	r0, [r2, #0]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    b3f6:	lsls	r0, r3, #24
    b3f8:	bmi.n	b4ac <usb_isr+0x638>
    b3fa:	lsls	r7, r1, #31
    b3fc:	bpl.n	b402 <usb_isr+0x58e>
			reply_buffer[0] = 1;
    b3fe:	movs	r3, #1
    b400:	strb	r3, [r2, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    b402:	movs	r1, #2
    b404:	ldr	r0, [pc, #76]	; (b454 <usb_isr+0x5e0>)
    b406:	bl	adb0 <endpoint0_transmit.constprop.0>
		return;
    b40a:	b.n	af52 <usb_isr+0xde>
		if (setup.wLength >= 3) {
    b40c:	cmp.w	r0, #196608	; 0x30000
    b410:	bcc.w	b056 <usb_isr+0x1e2>
			endpoint0_buffer[0] = 44100 & 255;
    b414:	ldr	r0, [pc, #48]	; (b448 <usb_isr+0x5d4>)
			endpoint0_transmit(endpoint0_buffer, 3, 0);
    b416:	movs	r1, #3
			endpoint0_buffer[2] = 0;
    b418:	strb	r3, [r0, #2]
			endpoint0_buffer[0] = 44100 & 255;
    b41a:	movw	r3, #44100	; 0xac44
    b41e:	strh	r3, [r0, #0]
			endpoint0_transmit(endpoint0_buffer, 3, 0);
    b420:	bl	adb0 <endpoint0_transmit.constprop.0>
			return;
    b424:	b.n	af52 <usb_isr+0xde>
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
    b426:	uxth	r0, r0
    b428:	cmp	r0, #0
    b42a:	bne.w	b186 <usb_isr+0x312>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    b42e:	ldr	r3, [pc, #68]	; (b474 <usb_isr+0x600>)
			usb_cdc_line_rtsdtr = setup.wValue;
    b430:	ubfx	ip, r7, #16, #8
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    b434:	ldr	r2, [r3, #0]
    b436:	ldr	r3, [pc, #64]	; (b478 <usb_isr+0x604>)
    b438:	str	r2, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    b43a:	ldr	r3, [pc, #64]	; (b47c <usb_isr+0x608>)
    b43c:	strb.w	ip, [r3]
    b440:	b.n	b186 <usb_isr+0x312>
    b442:	nop
    b444:	.word	0x200052f8
    b448:	.word	0x2000738c
    b44c:	.word	0x20001ee0
    b450:	.word	0x20007b70
    b454:	.word	0x20007a78
    b458:	.word	0x20007b76
    b45c:	.word	0x402e0000
    b460:	.word	0x00cc0002
    b464:	.word	0x2000129c
    b468:	.word	0x600020bc
    b46c:	.word	0x60002214
    b470:	.word	0x20205100
    b474:	.word	0x20007aec
    b478:	.word	0x20007b28
    b47c:	.word	0x20007b74
				endpoint0_notify_mask = 0;
    b480:	movs	r1, #0
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    b482:	movw	r0, #8225	; 0x2021
				endpoint0_notify_mask = 0;
    b486:	str	r1, [r2, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
    b488:	ldr	r1, [pc, #244]	; (b580 <usb_isr+0x70c>)
    b48a:	ldrd	r2, r1, [r1]
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    b48e:	uxth	r5, r2
    b490:	cmp	r5, r0
    b492:	beq.n	b4e6 <usb_isr+0x672>
	if (setup.word1 == 0x02010121 || setup.word1 == 0x01000121 /* TODO: check setup.word2 */) {
    b494:	ldr	r3, [pc, #236]	; (b584 <usb_isr+0x710>)
    b496:	cmp	r2, r3
    b498:	beq.n	b4a2 <usb_isr+0x62e>
    b49a:	ldr	r3, [pc, #236]	; (b588 <usb_isr+0x714>)
    b49c:	cmp	r2, r3
    b49e:	bne.w	af70 <usb_isr+0xfc>
		usb_audio_set_feature(&endpoint0_setupdata, endpoint0_buffer);
    b4a2:	ldr	r1, [pc, #232]	; (b58c <usb_isr+0x718>)
    b4a4:	ldr	r0, [pc, #216]	; (b580 <usb_isr+0x70c>)
    b4a6:	bl	cfc0 <usb_audio_set_feature>
    b4aa:	b.n	af70 <usb_isr+0xfc>
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    b4ac:	lsls	r3, r1, #15
    b4ae:	bmi.n	b3fe <usb_isr+0x58a>
    b4b0:	b.n	b402 <usb_isr+0x58e>
					datalen = *(list->addr);
    b4b2:	ldrb	r2, [r1, #0]
				if (datalen > setup.wLength) datalen = setup.wLength;
    b4b4:	lsrs	r0, r0, #16
    b4b6:	cmp	r2, r0
    b4b8:	it	cs
    b4ba:	movcs	r2, r0
    b4bc:	mov	r7, r2
				} else if (setup.wValue == 0x700) {
    b4be:	cmp.w	ip, #1792	; 0x700
    b4c2:	bne.n	b568 <usb_isr+0x6f4>
					if (usb_high_speed) src = usb_config_descriptor_12;
    b4c4:	ldr	r3, [pc, #200]	; (b590 <usb_isr+0x71c>)
					memcpy(usb_descriptor_buffer, src, datalen);
    b4c6:	mov	r2, r7
    b4c8:	ldr.w	sl, [pc, #228]	; b5b0 <usb_isr+0x73c>
					if (usb_high_speed) src = usb_config_descriptor_12;
    b4cc:	ldrb	r0, [r3, #0]
    b4ce:	ldr	r1, [pc, #196]	; (b594 <usb_isr+0x720>)
    b4d0:	ldr	r3, [pc, #196]	; (b598 <usb_isr+0x724>)
					memcpy(usb_descriptor_buffer, src, datalen);
    b4d2:	cmp	r0, #0
    b4d4:	it	ne
    b4d6:	movne	r1, r3
    b4d8:	mov	r0, sl
    b4da:	bl	a0c4 <memcpy>
					usb_descriptor_buffer[1] = 7;
    b4de:	movs	r3, #7
    b4e0:	strb.w	r3, [sl, #1]
    b4e4:	b.n	b31a <usb_isr+0x4a6>
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    b4e6:	uxth	r1, r1
    b4e8:	cmp	r1, #0
    b4ea:	bne.n	b494 <usb_isr+0x620>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    b4ec:	ldr	r1, [pc, #156]	; (b58c <usb_isr+0x718>)
    b4ee:	ldr	r5, [pc, #172]	; (b59c <usb_isr+0x728>)
    b4f0:	ldmia	r1, {r0, r1}
    b4f2:	strh	r1, [r5, #4]
		if (usb_cdc_line_coding[0] == 134) {
    b4f4:	cmp	r0, #134	; 0x86
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    b4f6:	mov.w	r1, r1, lsr #16
    b4fa:	str	r0, [r5, #0]
    b4fc:	strb	r1, [r5, #6]
		if (usb_cdc_line_coding[0] == 134) {
    b4fe:	bne.n	b494 <usb_isr+0x620>
	__disable_irq();
    b500:	cpsid	i
	sof_usage |= (1 << interface);
    b502:	ldr	r0, [pc, #156]	; (b5a0 <usb_isr+0x72c>)
    b504:	ldrb	r1, [r0, #0]
    b506:	orr.w	r1, r1, #64	; 0x40
    b50a:	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
    b50c:	ldr.w	r1, [r3, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    b510:	lsls	r5, r1, #24
    b512:	bmi.n	b522 <usb_isr+0x6ae>
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    b514:	orr.w	r1, r1, #128	; 0x80
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    b518:	movs	r0, #128	; 0x80
    b51a:	str.w	r0, [r3, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    b51e:	str.w	r1, [r3, #328]	; 0x148
	__enable_irq();
    b522:	cpsie	i
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    b524:	ldr	r3, [pc, #124]	; (b5a4 <usb_isr+0x730>)
    b526:	movs	r1, #80	; 0x50
    b528:	strb	r1, [r3, #0]
    b52a:	b.n	b494 <usb_isr+0x620>
	endpoint0_transfer_ack.next = 1;
    b52c:	ldr	r2, [pc, #120]	; (b5a8 <usb_isr+0x734>)
			usb_audio_transmit_setting = setup.wValue;
    b52e:	ubfx	ip, r7, #16, #16
	endpoint_queue_head[1].status = 0;
    b532:	str	r3, [r5, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    b534:	str	r3, [r2, #8]
			usb_audio_transmit_setting = setup.wValue;
    b536:	ldr	r3, [pc, #116]	; (b5ac <usb_isr+0x738>)
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    b538:	str	r2, [r5, #72]	; 0x48
			usb_audio_transmit_setting = setup.wValue;
    b53a:	strb.w	ip, [r3]
	endpoint0_transfer_ack.next = 1;
    b53e:	movs	r3, #1
    b540:	str	r3, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    b542:	movs	r3, #128	; 0x80
    b544:	str	r3, [r2, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    b546:	mov.w	r3, #65537	; 0x10001
    b54a:	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    b54e:	ldr.w	r3, [r4, #432]	; 0x1b0
    b552:	orr.w	r3, r3, #65536	; 0x10000
    b556:	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    b55a:	ldr.w	r3, [r4, #432]	; 0x1b0
    b55e:	cmp	r3, #0
    b560:	bne.n	b55a <usb_isr+0x6e6>
    b562:	b.n	af52 <usb_isr+0xde>
			endpoint0_buffer[0] = usb_audio_transmit_setting;
    b564:	ldr	r3, [pc, #68]	; (b5ac <usb_isr+0x738>)
    b566:	b.n	b1f8 <usb_isr+0x384>
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    b568:	ldr.w	sl, [pc, #68]	; b5b0 <usb_isr+0x73c>
    b56c:	mov	r2, r7
    b56e:	mov	r0, sl
    b570:	bl	a0c4 <memcpy>
    b574:	b.n	b31a <usb_isr+0x4a6>
				usb_stop_sof_interrupts(NUM_INTERFACE);
    b576:	movs	r0, #6
    b578:	bl	ae48 <usb_stop_sof_interrupts>
				_reboot_Teensyduino_();
    b57c:	bl	136a8 <___reboot_Teensyduino__veneer>
    b580:	.word	0x200052f8
    b584:	.word	0x02010121
    b588:	.word	0x01000121
    b58c:	.word	0x2000738c
    b590:	.word	0x20007b76
    b594:	.word	0x60002214
    b598:	.word	0x600020bc
    b59c:	.word	0x20007b20
    b5a0:	.word	0x20007b69
    b5a4:	.word	0x20007b77
    b5a8:	.word	0x20001ee0
    b5ac:	.word	0x20007b73
    b5b0:	.word	0x20205100

0000b5b4 <usb_config_rx>:
{
    b5b4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b5b8:	mov	r7, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    b5ba:	subs	r3, r0, #2
    b5bc:	cmp	r3, #4
    b5be:	bls.n	b5c4 <usb_config_rx+0x10>
}
    b5c0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    b5c4:	ldr.w	r9, [pc, #76]	; b614 <usb_config_rx+0x60>
    b5c8:	mov	r5, r2
    b5ca:	mov	r4, r1
	memset(qh, 0, sizeof(endpoint_t));
    b5cc:	movs	r2, #60	; 0x3c
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    b5ce:	add.w	r8, r9, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    b5d2:	mov	r6, r0
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    b5d4:	mov.w	sl, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    b5d8:	movs	r1, #0
    b5da:	add.w	r0, r8, #4
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    b5de:	lsls	r4, r4, #16
	memset(qh, 0, sizeof(endpoint_t));
    b5e0:	bl	e064 <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    b5e4:	clz	r2, r5
	qh->next = 1; // Terminate bit = 1
    b5e8:	movs	r3, #1
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    b5ea:	lsrs	r2, r2, #5
    b5ec:	orr.w	r4, r4, r2, lsl #29
	qh->config = config;
    b5f0:	str.w	r4, [r9, sl]
	qh->callback_function = callback;
    b5f4:	str.w	r7, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    b5f8:	str.w	r3, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << ep);
    b5fc:	cmp	r7, #0
    b5fe:	beq.n	b5c0 <usb_config_rx+0xc>
    b600:	ldr	r2, [pc, #12]	; (b610 <usb_config_rx+0x5c>)
    b602:	lsls	r3, r6
    b604:	ldr	r1, [r2, #0]
    b606:	orrs	r3, r1
    b608:	str	r3, [r2, #0]
}
    b60a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b60e:	nop
    b610:	.word	0x20007398
    b614:	.word	0x20000000

0000b618 <usb_config_tx>:
{
    b618:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b61c:	mov	r5, r1
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    b61e:	subs	r1, r0, #2
    b620:	cmp	r1, #4
    b622:	bls.n	b628 <usb_config_tx+0x10>
}
    b624:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    b628:	lsls	r7, r0, #7
    b62a:	ldr.w	r9, [pc, #76]	; b678 <usb_config_tx+0x60>
    b62e:	mov	sl, r2
    b630:	mov	r4, r0
    b632:	adds	r7, #64	; 0x40
	memset(qh, 0, sizeof(endpoint_t));
    b634:	movs	r2, #60	; 0x3c
    b636:	movs	r1, #0
    b638:	mov	r6, r3
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    b63a:	add.w	r8, r9, r7
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    b63e:	lsls	r5, r5, #16
	memset(qh, 0, sizeof(endpoint_t));
    b640:	add.w	r0, r8, #4
    b644:	bl	e064 <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    b648:	clz	r2, sl
    b64c:	lsrs	r2, r2, #5
    b64e:	orr.w	r2, r5, r2, lsl #29
	qh->config = config;
    b652:	str.w	r2, [r9, r7]
	qh->next = 1; // Terminate bit = 1
    b656:	movs	r2, #1
	qh->callback_function = callback;
    b658:	str.w	r6, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    b65c:	str.w	r2, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    b660:	cmp	r6, #0
    b662:	beq.n	b624 <usb_config_tx+0xc>
    b664:	ldr	r3, [pc, #12]	; (b674 <usb_config_tx+0x5c>)
    b666:	adds	r4, #16
    b668:	ldr	r1, [r3, #0]
    b66a:	lsls	r2, r4
    b66c:	orrs	r2, r1
    b66e:	str	r2, [r3, #0]
}
    b670:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b674:	.word	0x20007398
    b678:	.word	0x20000000

0000b67c <usb_config_rx_iso>:
{
    b67c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b680:	mov	r4, r2
	if (mult < 1 || mult > 3) return;
    b682:	subs	r2, #1
    b684:	cmp	r2, #2
    b686:	bhi.n	b692 <usb_config_rx_iso+0x16>
    b688:	mov	r5, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    b68a:	subs	r3, r0, #2
    b68c:	mov	r7, r0
    b68e:	cmp	r3, #4
    b690:	bls.n	b696 <usb_config_rx_iso+0x1a>
}
    b692:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    b696:	ldr.w	r9, [pc, #68]	; b6dc <usb_config_rx_iso+0x60>
    b69a:	mov	r6, r1
	uint32_t config = (packet_size << 16) | (mult << 30);
    b69c:	lsls	r4, r4, #30
	memset(qh, 0, sizeof(endpoint_t));
    b69e:	movs	r2, #60	; 0x3c
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    b6a0:	add.w	r8, r9, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    b6a4:	movs	r1, #0
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    b6a6:	mov.w	sl, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    b6aa:	add.w	r0, r8, #4
	uint32_t config = (packet_size << 16) | (mult << 30);
    b6ae:	orr.w	r4, r4, r6, lsl #16
	memset(qh, 0, sizeof(endpoint_t));
    b6b2:	bl	e064 <memset>
	qh->next = 1; // Terminate bit = 1
    b6b6:	movs	r3, #1
	qh->config = config;
    b6b8:	str.w	r4, [r9, sl]
	qh->callback_function = callback;
    b6bc:	str.w	r5, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    b6c0:	str.w	r3, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << ep);
    b6c4:	cmp	r5, #0
    b6c6:	beq.n	b692 <usb_config_rx_iso+0x16>
    b6c8:	ldr	r2, [pc, #12]	; (b6d8 <usb_config_rx_iso+0x5c>)
    b6ca:	lsls	r3, r7
    b6cc:	ldr	r1, [r2, #0]
    b6ce:	orrs	r3, r1
    b6d0:	str	r3, [r2, #0]
}
    b6d2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b6d6:	nop
    b6d8:	.word	0x20007398
    b6dc:	.word	0x20000000

0000b6e0 <usb_config_tx_iso>:
{
    b6e0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b6e4:	mov	r4, r2
	if (mult < 1 || mult > 3) return;
    b6e6:	subs	r2, #1
    b6e8:	cmp	r2, #2
    b6ea:	bhi.n	b6f6 <usb_config_tx_iso+0x16>
    b6ec:	mov	r5, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    b6ee:	subs	r3, r0, #2
    b6f0:	mov	r7, r0
    b6f2:	cmp	r3, #4
    b6f4:	bls.n	b6fa <usb_config_tx_iso+0x1a>
}
    b6f6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    b6fa:	mov.w	r8, r0, lsl #7
    b6fe:	ldr.w	sl, [pc, #72]	; b748 <usb_config_tx_iso+0x68>
    b702:	mov	r6, r1
	uint32_t config = (packet_size << 16) | (mult << 30);
    b704:	lsls	r4, r4, #30
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    b706:	add.w	r8, r8, #64	; 0x40
	memset(qh, 0, sizeof(endpoint_t));
    b70a:	movs	r2, #60	; 0x3c
    b70c:	movs	r1, #0
	uint32_t config = (packet_size << 16) | (mult << 30);
    b70e:	orr.w	r4, r4, r6, lsl #16
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    b712:	add.w	r9, sl, r8
	memset(qh, 0, sizeof(endpoint_t));
    b716:	add.w	r0, r9, #4
    b71a:	bl	e064 <memset>
	qh->next = 1; // Terminate bit = 1
    b71e:	movs	r3, #1
	qh->config = config;
    b720:	str.w	r4, [sl, r8]
	qh->callback_function = callback;
    b724:	str.w	r5, [r9, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    b728:	str.w	r3, [r9, #8]
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    b72c:	cmp	r5, #0
    b72e:	beq.n	b6f6 <usb_config_tx_iso+0x16>
    b730:	ldr	r2, [pc, #16]	; (b744 <usb_config_tx_iso+0x64>)
    b732:	add.w	r0, r7, #16
    b736:	ldr	r1, [r2, #0]
    b738:	lsls	r3, r0
    b73a:	orrs	r3, r1
    b73c:	str	r3, [r2, #0]
}
    b73e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b742:	nop
    b744:	.word	0x20007398
    b748:	.word	0x20000000

0000b74c <usb_prepare_transfer>:
	transfer->status = (len << 16) | (1<<7);
    b74c:	lsls	r2, r2, #16
	transfer->pointer0 = addr;
    b74e:	str	r1, [r0, #8]
	transfer->callback_param = param;
    b750:	str	r3, [r0, #28]
	transfer->pointer3 = addr + 12288;
    b752:	add.w	r3, r1, #12288	; 0x3000
	transfer->status = (len << 16) | (1<<7);
    b756:	orr.w	r2, r2, #128	; 0x80
{
    b75a:	push	{r4}
	transfer->next = 1;
    b75c:	movs	r4, #1
	transfer->status = (len << 16) | (1<<7);
    b75e:	str	r2, [r0, #4]
	transfer->pointer2 = addr + 8192;
    b760:	add.w	r2, r1, #8192	; 0x2000
	transfer->next = 1;
    b764:	str	r4, [r0, #0]
	transfer->pointer1 = addr + 4096;
    b766:	add.w	r4, r1, #4096	; 0x1000
	transfer->pointer4 = addr + 16384;
    b76a:	add.w	r1, r1, #16384	; 0x4000
	transfer->pointer1 = addr + 4096;
    b76e:	str	r4, [r0, #12]
	transfer->pointer4 = addr + 16384;
    b770:	str	r1, [r0, #24]
}
    b772:	ldr.w	r4, [sp], #4
	transfer->pointer3 = addr + 12288;
    b776:	strd	r2, r3, [r0, #16]
}
    b77a:	bx	lr

0000b77c <usb_transmit>:

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    b77c:	subs	r3, r0, #2
{
    b77e:	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    b780:	cmp	r3, #4
    b782:	bls.n	b786 <usb_transmit+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}
    b784:	bx	lr
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    b786:	ldr	r3, [pc, #24]	; (b7a0 <usb_transmit+0x24>)
	uint32_t mask = 1 << (endpoint_number + 16);
    b788:	add.w	r1, r0, #16
    b78c:	mov.w	ip, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    b790:	add.w	r0, r3, r0, lsl #7
	schedule_transfer(endpoint, mask, transfer);
    b794:	lsl.w	r1, ip, r1
    b798:	adds	r0, #64	; 0x40
    b79a:	b.w	acf0 <schedule_transfer>
    b79e:	nop
    b7a0:	.word	0x20000000

0000b7a4 <usb_receive>:

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    b7a4:	subs	r3, r0, #2
{
    b7a6:	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    b7a8:	cmp	r3, #4
    b7aa:	bls.n	b7ae <usb_receive+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
}
    b7ac:	bx	lr
	uint32_t mask = 1 << endpoint_number;
    b7ae:	movs	r1, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
    b7b0:	ldr	r3, [pc, #8]	; (b7bc <usb_receive+0x18>)
	schedule_transfer(endpoint, mask, transfer);
    b7b2:	lsls	r1, r0
    b7b4:	add.w	r0, r3, r0, lsl #7
    b7b8:	b.w	acf0 <schedule_transfer>
    b7bc:	.word	0x20000000

0000b7c0 <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
    b7c0:	ldr	r0, [r0, #4]
#endif
}
    b7c2:	bx	lr

0000b7c4 <delay>:
// or delayNanoseconds().
void delay(uint32_t msec)
{
	uint32_t start;

	if (msec == 0) return;
    b7c4:	cbnz	r0, b7c8 <delay+0x4>
    b7c6:	bx	lr
{
    b7c8:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    b7cc:	movs	r1, #1
    b7ce:	mov	r9, r0
    b7d0:	ldr	r4, [pc, #132]	; (b858 <delay+0x94>)
    b7d2:	ldr	r5, [pc, #136]	; (b85c <delay+0x98>)
    b7d4:	ldr	r6, [pc, #136]	; (b860 <delay+0x9c>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    b7d6:	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    b7da:	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    b7dc:	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    b7de:	strex	r3, r1, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    b7e2:	cmp	r3, #0
    b7e4:	bne.n	b7d6 <delay+0x12>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    b7e6:	ldr	r1, [pc, #124]	; (b864 <delay+0xa0>)
    b7e8:	ldr	r3, [r1, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    b7ea:	mov.w	fp, #1000	; 0x3e8
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    b7ee:	ldr.w	sl, [pc, #120]	; b868 <delay+0xa4>
	uint32_t ccdelta = cyccnt - scc;
    b7f2:	subs	r3, r3, r0
    b7f4:	movs	r7, #1
	uint32_t usec = 1000*smc + frac;
    b7f6:	mul.w	r8, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    b7fa:	ldr.w	r2, [sl]
    b7fe:	umull	r3, r2, r3, r2
	uint32_t usec = 1000*smc + frac;
    b802:	cmp	r2, fp
    b804:	ite	ls
    b806:	addls	r8, r2
    b808:	addhi	r8, fp
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    b80a:	ldrex	r3, [r4]
		smc = systick_millis_count;
    b80e:	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    b810:	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    b812:	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    b816:	cmp	r3, #0
    b818:	bne.n	b80a <delay+0x46>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    b81a:	ldr	r3, [r1, #4]
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    b81c:	ldr.w	ip, [sl]
	uint32_t ccdelta = cyccnt - scc;
    b820:	subs	r3, r3, r0
	uint32_t usec = 1000*smc + frac;
    b822:	mul.w	r2, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    b826:	umull	r3, ip, r3, ip
	uint32_t usec = 1000*smc + frac;
    b82a:	cmp.w	ip, #1000	; 0x3e8
    b82e:	ite	ls
    b830:	addls	r2, ip
    b832:	addhi.w	r2, r2, #1000	; 0x3e8
		while ((micros() - start) >= 1000) {
    b836:	sub.w	r2, r2, r8
    b83a:	cmp.w	r2, #1000	; 0x3e8
    b83e:	bcc.n	b84e <delay+0x8a>
			if (--msec == 0) return;
    b840:	subs.w	r9, r9, #1
			start += 1000;
    b844:	add.w	r8, r8, #1000	; 0x3e8
			if (--msec == 0) return;
    b848:	bne.n	b80a <delay+0x46>
}
    b84a:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		yield();
    b84e:	bl	c0d4 <yield>
		while ((micros() - start) >= 1000) {
    b852:	ldr	r1, [pc, #16]	; (b864 <delay+0xa0>)
    b854:	b.n	b80a <delay+0x46>
    b856:	nop
    b858:	.word	0x20007af0
    b85c:	.word	0x20007aec
    b860:	.word	0x20007ae8
    b864:	.word	0xe0001000
    b868:	.word	0x20007ae4

0000b86c <micros>:
{
    b86c:	push	{r4, r5}
    b86e:	ldr	r3, [pc, #60]	; (b8ac <micros+0x40>)
    b870:	mov.w	ip, #1
    b874:	ldr	r5, [pc, #56]	; (b8b0 <micros+0x44>)
    b876:	ldr	r4, [pc, #60]	; (b8b4 <micros+0x48>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    b878:	ldrex	r2, [r3]
		smc = systick_millis_count;
    b87c:	ldr	r0, [r5, #0]
		scc = systick_cycle_count;
    b87e:	ldr	r1, [r4, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    b880:	strex	r2, ip, [r3]
	} while ( __STREXW(1, &systick_safe_read));
    b884:	cmp	r2, #0
    b886:	bne.n	b878 <micros+0xc>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    b888:	ldr	r3, [pc, #44]	; (b8b8 <micros+0x4c>)
    b88a:	ldr	r3, [r3, #4]
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    b88c:	ldr	r2, [pc, #44]	; (b8bc <micros+0x50>)
	uint32_t ccdelta = cyccnt - scc;
    b88e:	subs	r3, r3, r1
	uint32_t usec = 1000*smc + frac;
    b890:	mov.w	r1, #1000	; 0x3e8
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    b894:	ldr	r2, [r2, #0]
	uint32_t usec = 1000*smc + frac;
    b896:	mul.w	r0, r1, r0
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    b89a:	umull	r3, r2, r3, r2
	return usec;
}
    b89e:	pop	{r4, r5}
    b8a0:	cmp	r2, r1
    b8a2:	ite	ls
    b8a4:	addls	r0, r0, r2
    b8a6:	addhi	r0, r0, r1
    b8a8:	bx	lr
    b8aa:	nop
    b8ac:	.word	0x20007af0
    b8b0:	.word	0x20007aec
    b8b4:	.word	0x20007ae8
    b8b8:	.word	0xe0001000
    b8bc:	.word	0x20007ae4

0000b8c0 <unused_interrupt_vector>:
	__disable_irq();
    b8c0:	cpsid	i
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
    b8c2:	mrs	r3, IPSR
	info->ipsr = ipsr;
    b8c6:	ldr	r4, [pc, #316]	; (ba04 <unused_interrupt_vector+0x144>)
    b8c8:	str.w	r3, [r4, #132]	; 0x84
	asm volatile("mrs %0, msp\n" : "=r" (stack) :: "memory");
    b8cc:	mrs	r2, MSP
	info->cfsr = SCB_CFSR;
    b8d0:	mov.w	r3, #3758153728	; 0xe000e000
	p = (uint32_t *)info;
    b8d4:	ldr	r6, [pc, #304]	; (ba08 <unused_interrupt_vector+0x148>)
	while (p < end) {
    b8d6:	ldr	r5, [pc, #308]	; (ba0c <unused_interrupt_vector+0x14c>)
	info->cfsr = SCB_CFSR;
    b8d8:	ldr.w	r0, [r3, #3368]	; 0xd28
	info->hfsr = SCB_HFSR;
    b8dc:	ldr.w	r1, [r3, #3372]	; 0xd2c
    b8e0:	strd	r0, r1, [r4, #136]	; 0x88
	info->mmfar = SCB_MMFAR;
    b8e4:	ldr.w	r1, [r3, #3380]	; 0xd34
	info->bfar = SCB_BFAR;
    b8e8:	ldr.w	r3, [r3, #3384]	; 0xd38
    b8ec:	strd	r1, r3, [r4, #144]	; 0x90
	info->ret = stack[6];
    b8f0:	ldr	r3, [r2, #24]
    b8f2:	str.w	r3, [r4, #152]	; 0x98
	info->xpsr = stack[7];
    b8f6:	ldr	r3, [r2, #28]
    b8f8:	str.w	r3, [r4, #156]	; 0x9c
	info->temp = tempmonGetTemp();
    b8fc:	bl	bb98 <tempmonGetTemp>
    b900:	vstr	s0, [r4, #160]	; 0xa0
	info->time = rtc_get();
    b904:	bl	baa0 <rtc_get>
	info->len = sizeof(*info) / 4;
    b908:	movs	r1, #11
	crc = 0xFFFFFFFF;
    b90a:	mov.w	r2, #4294967295
	info->time = rtc_get();
    b90e:	str.w	r0, [r4, #164]	; 0xa4
	info->len = sizeof(*info) / 4;
    b912:	mov	r3, r1
    b914:	str.w	r1, [r4, #128]	; 0x80
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    b918:	ldr	r1, [pc, #244]	; (ba10 <unused_interrupt_vector+0x150>)
		crc ^= *p++;
    b91a:	adds	r0, r6, #4
    b91c:	eors	r2, r3
    b91e:	movs	r4, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    b920:	and.w	r3, r2, #1
    b924:	subs	r4, #1
    b926:	mul.w	r3, r1, r3
    b92a:	eor.w	r2, r3, r2, lsr #1
    b92e:	bne.n	b920 <unused_interrupt_vector+0x60>
	while (p < end) {
    b930:	cmp	r0, r5
    b932:	beq.n	b93a <unused_interrupt_vector+0x7a>
		crc ^= *p++;
    b934:	ldr	r3, [r6, #4]
    b936:	mov	r6, r0
    b938:	b.n	b91a <unused_interrupt_vector+0x5a>
	info->crc = crc;
    b93a:	ldr	r3, [pc, #200]	; (ba04 <unused_interrupt_vector+0x144>)
    b93c:	str.w	r2, [r3, #168]	; 0xa8
	asm("dsb");
    b940:	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    b944:	mov.w	r3, #3758153728	; 0xe000e000
    b948:	ldr	r1, [pc, #188]	; (ba08 <unused_interrupt_vector+0x148>)
    b94a:	ldr	r2, [pc, #200]	; (ba14 <unused_interrupt_vector+0x154>)
    b94c:	str.w	r1, [r3, #3952]	; 0xf70
    b950:	str.w	r2, [r3, #3952]	; 0xf70
	asm("dsb");
    b954:	dsb	sy
	asm("isb");
    b958:	isb	sy
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    b95c:	ldr	r2, [pc, #184]	; (ba18 <unused_interrupt_vector+0x158>)
	PIT_MCR = PIT_MCR_MDIS;
    b95e:	movs	r5, #2
    b960:	ldr	r0, [pc, #184]	; (ba1c <unused_interrupt_vector+0x15c>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    b962:	ldr	r3, [r2, #108]	; 0x6c
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    b964:	ldr	r1, [pc, #184]	; (ba20 <unused_interrupt_vector+0x160>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    b966:	orr.w	r3, r3, #12288	; 0x3000
    b96a:	str	r3, [r2, #108]	; 0x6c
	PIT_MCR = PIT_MCR_MDIS;
    b96c:	str	r5, [r0, #0]
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    b96e:	ldr	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    b970:	ldr	r0, [pc, #176]	; (ba24 <unused_interrupt_vector+0x164>)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    b972:	bic.w	r3, r3, #127	; 0x7f
    b976:	orr.w	r3, r3, #64	; 0x40
    b97a:	str	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    b97c:	ldr	r3, [r1, #0]
    b97e:	cmp	r3, r0
    b980:	bhi.n	b9fe <unused_interrupt_vector+0x13e>
	PIT_MCR = 0;
    b982:	ldr	r5, [pc, #152]	; (ba1c <unused_interrupt_vector+0x15c>)
    b984:	movs	r1, #0
	NVIC_ICER0 = 0xFFFFFFFF;
    b986:	mov.w	r3, #3758153728	; 0xe000e000
    b98a:	mov.w	r2, #4294967295
	PIT_MCR = 0;
    b98e:	str	r1, [r5, #0]
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    b990:	movs	r6, #1
	PIT_TCTRL0 = 0;
    b992:	str.w	r1, [r5, #264]	; 0x108
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
    b996:	ldr	r1, [pc, #144]	; (ba28 <unused_interrupt_vector+0x168>)
    b998:	str.w	r1, [r5, #256]	; 0x100
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    b99c:	str.w	r6, [r5, #264]	; 0x108
	NVIC_ICER0 = 0xFFFFFFFF;
    b9a0:	str.w	r2, [r3, #384]	; 0x180
	NVIC_ICER1 = 0xFFFFFFFF;
    b9a4:	str.w	r2, [r3, #388]	; 0x184
	NVIC_ICER2 = 0xFFFFFFFF;
    b9a8:	str.w	r2, [r3, #392]	; 0x188
	NVIC_ICER3 = 0xFFFFFFFF;
    b9ac:	str.w	r2, [r3, #396]	; 0x18c
	NVIC_ICER4 = 0xFFFFFFFF;
    b9b0:	str.w	r2, [r3, #400]	; 0x190
	count = 0;
    b9b4:	b.n	b9ba <unused_interrupt_vector+0xfa>
		usb_isr();
    b9b6:	bl	ae74 <usb_isr>
		if (PIT_TFLG0) {
    b9ba:	ldr.w	r3, [r5, #268]	; 0x10c
    b9be:	cmp	r3, #0
    b9c0:	beq.n	b9b6 <unused_interrupt_vector+0xf6>
			if (++count >= 80) break;  // reboot after 8 seconds
    b9c2:	adds	r4, #1
			PIT_TFLG0 = 1;
    b9c4:	str.w	r6, [r5, #268]	; 0x10c
			if (++count >= 80) break;  // reboot after 8 seconds
    b9c8:	cmp	r4, #79	; 0x4f
    b9ca:	bls.n	b9b6 <unused_interrupt_vector+0xf6>
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    b9cc:	ldr	r3, [pc, #92]	; (ba2c <unused_interrupt_vector+0x16c>)
	USB1_USBCMD = USB_USBCMD_RST;
    b9ce:	movs	r0, #2
    b9d0:	ldr	r1, [pc, #92]	; (ba30 <unused_interrupt_vector+0x170>)
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    b9d2:	mov.w	r2, #2147483648	; 0x80000000
	USB1_USBCMD = USB_USBCMD_RST;
    b9d6:	str.w	r0, [r1, #320]	; 0x140
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    b9da:	str	r2, [r3, #52]	; 0x34
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    b9dc:	ldr.w	r3, [r5, #268]	; 0x10c
    b9e0:	cbnz	r3, b9f2 <unused_interrupt_vector+0x132>
	SRC_GPR5 = 0x0BAD00F1;
    b9e2:	ldr	r0, [pc, #80]	; (ba34 <unused_interrupt_vector+0x174>)
    b9e4:	ldr	r1, [pc, #80]	; (ba38 <unused_interrupt_vector+0x178>)
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    b9e6:	ldr	r2, [pc, #52]	; (ba1c <unused_interrupt_vector+0x15c>)
	SRC_GPR5 = 0x0BAD00F1;
    b9e8:	str	r1, [r0, #48]	; 0x30
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    b9ea:	ldr.w	r3, [r2, #268]	; 0x10c
    b9ee:	cmp	r3, #0
    b9f0:	beq.n	b9e8 <unused_interrupt_vector+0x128>
	SCB_AIRCR = 0x05FA0004;
    b9f2:	mov.w	r3, #3758153728	; 0xe000e000
    b9f6:	ldr	r2, [pc, #68]	; (ba3c <unused_interrupt_vector+0x17c>)
    b9f8:	str.w	r2, [r3, #3340]	; 0xd0c
	while (1) ;
    b9fc:	b.n	b9fc <unused_interrupt_vector+0x13c>
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    b9fe:	bl	a938 <set_arm_clock>
    ba02:	b.n	b982 <unused_interrupt_vector+0xc2>
    ba04:	.word	0x2027ff00
    ba08:	.word	0x2027ff80
    ba0c:	.word	0x2027ffa8
    ba10:	.word	0xedb88320
    ba14:	.word	0x2027ffa0
    ba18:	.word	0x400fc000
    ba1c:	.word	0x40084000
    ba20:	.word	0x20001450
    ba24:	.word	0x0bcd3d80
    ba28:	.word	0x00249f00
    ba2c:	.word	0x400d9000
    ba30:	.word	0x402e0000
    ba34:	.word	0x400f8000
    ba38:	.word	0x0bad00f1
    ba3c:	.word	0x05fa0004

0000ba40 <_sbrk>:

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
        char *prev = __brkval;
    ba40:	ldr	r1, [pc, #40]	; (ba6c <_sbrk+0x2c>)
    ba42:	ldr	r2, [r1, #0]
        if (incr != 0) {
    ba44:	cbz	r0, ba56 <_sbrk+0x16>
{
    ba46:	push	{r3, lr}
                if (prev + incr > (char *)&_heap_end) {
    ba48:	adds	r3, r2, r0
    ba4a:	ldr	r0, [pc, #36]	; (ba70 <_sbrk+0x30>)
    ba4c:	cmp	r3, r0
    ba4e:	bhi.n	ba5a <_sbrk+0x1a>
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
    ba50:	mov	r0, r2
                __brkval = prev + incr;
    ba52:	str	r3, [r1, #0]
}
    ba54:	pop	{r3, pc}
    ba56:	mov	r0, r2
    ba58:	bx	lr
                        errno = ENOMEM;
    ba5a:	bl	e2d0 <__errno>
    ba5e:	movs	r3, #12
                        return (void *)-1;
    ba60:	mov.w	r2, #4294967295
                        errno = ENOMEM;
    ba64:	str	r3, [r0, #0]
}
    ba66:	mov	r0, r2
    ba68:	pop	{r3, pc}
    ba6a:	nop
    ba6c:	.word	0x20001480
    ba70:	.word	0x20280000

0000ba74 <_read>:

__attribute__((weak))
int _read(int file, char *ptr, int len)
{
	return 0;
}
    ba74:	movs	r0, #0
    ba76:	bx	lr

0000ba78 <_close>:

__attribute__((weak))
int _close(int fd)
{
	return -1;
}
    ba78:	mov.w	r0, #4294967295
    ba7c:	bx	lr
    ba7e:	nop

0000ba80 <_fstat>:
#include <sys/stat.h>

__attribute__((weak))
int _fstat(int fd, struct stat *st)
{
	st->st_mode = S_IFCHR;
    ba80:	mov.w	r3, #8192	; 0x2000
	return 0;
}
    ba84:	movs	r0, #0
	st->st_mode = S_IFCHR;
    ba86:	str	r3, [r1, #4]
}
    ba88:	bx	lr
    ba8a:	nop

0000ba8c <_isatty>:

__attribute__((weak))
int _isatty(int fd)
{
	return 1;
}
    ba8c:	movs	r0, #1
    ba8e:	bx	lr

0000ba90 <_lseek>:

__attribute__((weak))
int _lseek(int fd, long long offset, int whence)
{
	return -1;
}
    ba90:	mov.w	r0, #4294967295
    ba94:	bx	lr
    ba96:	nop

0000ba98 <__cxa_pure_virtual>:
}

__attribute__((weak))
void __cxa_pure_virtual()
{
	while (1) asm ("WFI");
    ba98:	wfi
    ba9a:	b.n	ba98 <__cxa_pure_virtual>

0000ba9c <abort>:
}

__attribute__((weak))
void abort(void)
{
	while (1) asm ("WFI");
    ba9c:	wfi
    ba9e:	b.n	ba9c <abort>

0000baa0 <rtc_get>:
	uint32_t hi1 = SNVS_HPRTCMR;
    baa0:	ldr	r2, [pc, #28]	; (bac0 <rtc_get+0x20>)
    baa2:	ldr	r0, [r2, #36]	; 0x24
	uint32_t lo1 = SNVS_HPRTCLR;
    baa4:	ldr	r3, [r2, #40]	; 0x28
		uint32_t hi2 = SNVS_HPRTCMR;
    baa6:	mov	r1, r3
    baa8:	mov	ip, r0
    baaa:	ldr	r0, [r2, #36]	; 0x24
		uint32_t lo2 = SNVS_HPRTCLR;
    baac:	ldr	r3, [r2, #40]	; 0x28
		if (lo1 == lo2 && hi1 == hi2) {
    baae:	cmp	r1, r3
    bab0:	bne.n	baa6 <rtc_get+0x6>
    bab2:	cmp	ip, r0
    bab4:	bne.n	baa6 <rtc_get+0x6>
			return (hi2 << 17) | (lo2 >> 15);
    bab6:	lsrs	r3, r3, #15
}
    bab8:	orr.w	r0, r3, r0, lsl #17
    babc:	bx	lr
    babe:	nop
    bac0:	.word	0x400d4000

0000bac4 <sm_align_pool>:
	if (spool->pool_size % HEADER_SZ) return 0;
	return 1;
}

int sm_align_pool(struct smalloc_pool *spool)
{
    bac4:	push	{r3, lr}
	size_t x;

	if (smalloc_verify_pool(spool)) return 1;

	x = spool->pool_size % HEADER_SZ;
    bac6:	ldrd	r3, r2, [r0]
	if (!spool->pool || !spool->pool_size) return 0;
    baca:	cbz	r3, bae4 <sm_align_pool+0x20>
    bacc:	cbz	r2, bafe <sm_align_pool+0x3a>
	if (spool->pool_size % HEADER_SZ) return 0;
    bace:	ldr	r3, [pc, #60]	; (bb0c <sm_align_pool+0x48>)
    bad0:	umull	r1, r3, r3, r2
    bad4:	lsrs	r3, r3, #3
    bad6:	add.w	r3, r3, r3, lsl #1
    bada:	subs.w	r3, r2, r3, lsl #2
    bade:	bne.n	baf6 <sm_align_pool+0x32>
	if (smalloc_verify_pool(spool)) return 1;
    bae0:	movs	r0, #1
		errno = ENOSPC;
		return 0;
	}

	return 1;
}
    bae2:	pop	{r3, pc}
	x = spool->pool_size % HEADER_SZ;
    bae4:	ldr	r3, [pc, #36]	; (bb0c <sm_align_pool+0x48>)
    bae6:	umull	r1, r3, r3, r2
    baea:	lsrs	r3, r3, #3
    baec:	add.w	r3, r3, r3, lsl #1
	if (x) spool->pool_size -= x;
    baf0:	subs.w	r3, r2, r3, lsl #2
    baf4:	beq.n	bafa <sm_align_pool+0x36>
    baf6:	subs	r2, r2, r3
    baf8:	str	r2, [r0, #4]
	if (spool->pool_size <= MIN_POOL_SZ) {
    bafa:	cmp	r2, #240	; 0xf0
    bafc:	bhi.n	bae0 <sm_align_pool+0x1c>
		errno = ENOSPC;
    bafe:	bl	e2d0 <__errno>
    bb02:	movs	r2, #28
    bb04:	mov	r3, r0
    bb06:	movs	r0, #0
    bb08:	str	r2, [r3, #0]
}
    bb0a:	pop	{r3, pc}
    bb0c:	.word	0xaaaaaaab

0000bb10 <sm_set_pool>:

int sm_set_pool(struct smalloc_pool *spool, void *new_pool, size_t new_pool_size, int do_zero, smalloc_oom_handler oom_handler)
{
    bb10:	push	{r4, r5, r6, lr}
	if (!spool) {
    bb12:	mov	r4, r0
    bb14:	cbz	r0, bb66 <sm_set_pool+0x56>
		errno = EINVAL;
		return 0;
	}

	if (!new_pool || !new_pool_size) {
    bb16:	cbz	r1, bb20 <sm_set_pool+0x10>
    bb18:	clz	r6, r2
    bb1c:	lsrs	r6, r6, #5
    bb1e:	cbnz	r2, bb4a <sm_set_pool+0x3a>
	if (!spool->pool || !spool->pool_size) return 0;
    bb20:	ldr	r0, [r4, #0]
    bb22:	cbz	r0, bb66 <sm_set_pool+0x56>
    bb24:	ldr	r2, [r4, #4]
    bb26:	cbz	r2, bb66 <sm_set_pool+0x56>
	if (spool->pool_size % HEADER_SZ) return 0;
    bb28:	ldr	r3, [pc, #96]	; (bb8c <sm_set_pool+0x7c>)
    bb2a:	ldr	r1, [pc, #100]	; (bb90 <sm_set_pool+0x80>)
    bb2c:	mul.w	r3, r2, r3
    bb30:	cmp.w	r1, r3, ror #2
    bb34:	bcc.n	bb66 <sm_set_pool+0x56>
		if (smalloc_verify_pool(spool)) {
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    bb36:	ldr	r3, [r4, #8]
    bb38:	cbnz	r3, bb74 <sm_set_pool+0x64>
			memset(spool, 0, sizeof(struct smalloc_pool));
    bb3a:	movs	r2, #0
			return 1;
    bb3c:	movs	r3, #1
			memset(spool, 0, sizeof(struct smalloc_pool));
    bb3e:	str	r2, [r4, #0]
    bb40:	str	r2, [r4, #4]
    bb42:	str	r2, [r4, #8]
    bb44:	str	r2, [r4, #12]
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
}
    bb46:	mov	r0, r3
    bb48:	pop	{r4, r5, r6, pc}
	spool->pool = new_pool;
    bb4a:	mov	r5, r3
	spool->oomfn = oom_handler;
    bb4c:	ldr	r3, [sp, #16]
	spool->pool_size = new_pool_size;
    bb4e:	strd	r1, r2, [r0]
	spool->oomfn = oom_handler;
    bb52:	str	r3, [r0, #12]
	if (!sm_align_pool(spool)) return 0;
    bb54:	bl	bac4 <sm_align_pool>
    bb58:	mov	r3, r0
    bb5a:	cmp	r0, #0
    bb5c:	beq.n	bb46 <sm_set_pool+0x36>
	if (do_zero) {
    bb5e:	cbnz	r5, bb7c <sm_set_pool+0x6c>
	return 1;
    bb60:	movs	r3, #1
}
    bb62:	mov	r0, r3
    bb64:	pop	{r4, r5, r6, pc}
		errno = EINVAL;
    bb66:	bl	e2d0 <__errno>
    bb6a:	movs	r2, #22
		return 0;
    bb6c:	movs	r3, #0
		errno = EINVAL;
    bb6e:	str	r2, [r0, #0]
}
    bb70:	mov	r0, r3
    bb72:	pop	{r4, r5, r6, pc}
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    bb74:	movs	r1, #0
    bb76:	bl	e064 <memset>
    bb7a:	b.n	bb3a <sm_set_pool+0x2a>
		memset(spool->pool, 0, spool->pool_size);
    bb7c:	ldr	r2, [r4, #4]
    bb7e:	mov	r1, r6
    bb80:	ldr	r0, [r4, #0]
		spool->do_zero = do_zero;
    bb82:	str	r5, [r4, #8]
		memset(spool->pool, 0, spool->pool_size);
    bb84:	bl	e064 <memset>
	return 1;
    bb88:	movs	r3, #1
    bb8a:	b.n	bb46 <sm_set_pool+0x36>
    bb8c:	.word	0xaaaaaaab
    bb90:	.word	0x15555555

0000bb94 <Panic_Temp_isr>:
  unused_interrupt_vector();
    bb94:	b.w	b8c0 <unused_interrupt_vector>

0000bb98 <tempmonGetTemp>:
float tempmonGetTemp(void)
{
    uint32_t nmeas;
    float tmeas;

    while (!(TEMPMON_TEMPSENSE0 & 0x4U))
    bb98:	ldr	r2, [pc, #72]	; (bbe4 <tempmonGetTemp+0x4c>)
    bb9a:	ldr.w	r3, [r2, #128]	; 0x80
    bb9e:	lsls	r3, r3, #29
    bba0:	bpl.n	bb9a <tempmonGetTemp+0x2>
    {
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    bba2:	ldr.w	r3, [r2, #128]	; 0x80
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    bba6:	ldr	r0, [pc, #64]	; (bbe8 <tempmonGetTemp+0x50>)
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    bba8:	ubfx	r3, r3, #8, #12
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    bbac:	ldr	r1, [pc, #60]	; (bbec <tempmonGetTemp+0x54>)
    bbae:	vldr	s14, [r0]
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    bbb2:	vmov	s15, r3
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    bbb6:	vldr	s12, [r1]
    bbba:	vcvt.f32.u32	s14, s14
    bbbe:	ldr	r2, [pc, #48]	; (bbf0 <tempmonGetTemp+0x58>)
    bbc0:	vcvt.f32.s32	s15, s15
    bbc4:	ldr	r3, [pc, #44]	; (bbf4 <tempmonGetTemp+0x5c>)
    bbc6:	vldr	s13, [r2]
    bbca:	vsub.f32	s15, s15, s14
    bbce:	vldr	s14, [r3]
    bbd2:	vcvt.f32.u32	s14, s14
    bbd6:	vmul.f32	s15, s15, s12
    bbda:	vdiv.f32	s0, s15, s13

    return tmeas;
}
    bbde:	vsub.f32	s0, s14, s0
    bbe2:	bx	lr
    bbe4:	.word	0x400d8100
    bbe8:	.word	0x20007ad4
    bbec:	.word	0x20007adc
    bbf0:	.word	0x20007ae0
    bbf4:	.word	0x20007ad8

0000bbf8 <digitalWrite>:
void digitalWrite(uint8_t pin, uint8_t val)
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
    bbf8:	cmp	r0, #54	; 0x36
    bbfa:	bhi.n	bc2a <digitalWrite+0x32>
	p = digital_pin_to_info_PGM + pin;
    bbfc:	lsls	r2, r0, #4
    bbfe:	ldr	r3, [pc, #64]	; (bc40 <digitalWrite+0x48>)
    bc00:	add.w	r0, r3, r0, lsl #4
	pinmode = *(p->reg + 1);
    bc04:	ldr	r3, [r3, r2]
{
    bc06:	push	{r4}
	mask = p->mask;
    bc08:	ldr	r2, [r0, #12]
	pinmode = *(p->reg + 1);
    bc0a:	ldr	r4, [r3, #4]
	if (pinmode & mask) {
    bc0c:	tst	r4, r2
    bc0e:	beq.n	bc1c <digitalWrite+0x24>
		// pin is configured for output mode
		if (val) {
    bc10:	cbnz	r1, bc2c <digitalWrite+0x34>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
    bc12:	ldr.w	r4, [sp], #4
			*(p->reg + 0x22) = mask; // clear register
    bc16:	str.w	r2, [r3, #136]	; 0x88
}
    bc1a:	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    bc1c:	ldr	r3, [r0, #8]
		if (val) {
    bc1e:	cbz	r1, bc36 <digitalWrite+0x3e>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    bc20:	ldr	r2, [pc, #32]	; (bc44 <digitalWrite+0x4c>)
}
    bc22:	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    bc26:	str	r2, [r3, #0]
}
    bc28:	bx	lr
    bc2a:	bx	lr
    bc2c:	ldr.w	r4, [sp], #4
			*(p->reg + 0x21) = mask; // set register
    bc30:	str.w	r2, [r3, #132]	; 0x84
}
    bc34:	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    bc36:	ldr	r2, [pc, #16]	; (bc48 <digitalWrite+0x50>)
}
    bc38:	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    bc3c:	str	r2, [r3, #0]
}
    bc3e:	bx	lr
    bc40:	.word	0x20000ebc
    bc44:	.word	0x0001f038
    bc48:	.word	0x00013038

0000bc4c <digitalRead>:

uint8_t digitalRead(uint8_t pin)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return 0;
    bc4c:	cmp	r0, #54	; 0x36
    bc4e:	bhi.n	bc68 <digitalRead+0x1c>
	p = digital_pin_to_info_PGM + pin;
    bc50:	ldr	r3, [pc, #24]	; (bc6c <digitalRead+0x20>)
    bc52:	lsls	r2, r0, #4
    bc54:	add.w	r0, r3, r0, lsl #4
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
    bc58:	ldr	r2, [r3, r2]
    bc5a:	ldr	r3, [r0, #12]
    bc5c:	ldr	r2, [r2, #8]
    bc5e:	tst	r2, r3
    bc60:	ite	ne
    bc62:	movne	r0, #1
    bc64:	moveq	r0, #0
    bc66:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return 0;
    bc68:	movs	r0, #0
}
    bc6a:	bx	lr
    bc6c:	.word	0x20000ebc

0000bc70 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    bc70:	cmp	r0, #54	; 0x36
    bc72:	bhi.n	bcc8 <pinMode+0x58>
	p = digital_pin_to_info_PGM + pin;
    bc74:	ldr	r3, [pc, #88]	; (bcd0 <pinMode+0x60>)
    bc76:	lsls	r2, r0, #4
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    bc78:	cmp	r1, #1
	p = digital_pin_to_info_PGM + pin;
    bc7a:	add.w	r0, r3, r0, lsl #4
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    bc7e:	ldr	r2, [r3, r2]
{
    bc80:	push	{r4}
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    bc82:	ldr	r3, [r2, #4]
    bc84:	ldr	r4, [r0, #12]
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    bc86:	beq.n	bca6 <pinMode+0x36>
    bc88:	cmp	r1, #4
    bc8a:	beq.n	bca6 <pinMode+0x36>
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    bc8c:	bic.w	r3, r3, r4
    bc90:	str	r3, [r2, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    bc92:	ldr	r3, [r0, #8]
		if (mode == INPUT) {
    bc94:	cbz	r1, bcc2 <pinMode+0x52>
		} else if (mode == INPUT_PULLUP) {
    bc96:	cmp	r1, #2
    bc98:	beq.n	bcca <pinMode+0x5a>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
    bc9a:	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    bc9c:	ite	eq
    bc9e:	ldreq	r2, [pc, #52]	; (bcd4 <pinMode+0x64>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    bca0:	ldrne	r2, [pc, #52]	; (bcd8 <pinMode+0x68>)
    bca2:	str	r2, [r3, #0]
    bca4:	b.n	bcb6 <pinMode+0x46>
		*(p->reg + 1) |= p->mask; // TODO: atomic
    bca6:	orrs	r3, r4
		if (mode == OUTPUT) {
    bca8:	cmp	r1, #1
		*(p->reg + 1) |= p->mask; // TODO: atomic
    bcaa:	str	r3, [r2, #4]
			*(p->pad) = IOMUXC_PAD_DSE(7);
    bcac:	ldr	r3, [r0, #8]
		if (mode == OUTPUT) {
    bcae:	beq.n	bcc2 <pinMode+0x52>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    bcb0:	movw	r2, #2104	; 0x838
    bcb4:	str	r2, [r3, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    bcb6:	ldr	r3, [r0, #4]
    bcb8:	movs	r2, #21
}
    bcba:	ldr.w	r4, [sp], #4
	*(p->mux) = 5 | 0x10;
    bcbe:	str	r2, [r3, #0]
}
    bcc0:	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7);
    bcc2:	movs	r2, #56	; 0x38
    bcc4:	str	r2, [r3, #0]
    bcc6:	b.n	bcb6 <pinMode+0x46>
    bcc8:	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    bcca:	ldr	r2, [pc, #16]	; (bcdc <pinMode+0x6c>)
    bccc:	str	r2, [r3, #0]
    bcce:	b.n	bcb6 <pinMode+0x46>
    bcd0:	.word	0x20000ebc
    bcd4:	.word	0x00013038
    bcd8:	.word	0x00010038
    bcdc:	.word	0x0001f038

0000bce0 <flexpwm_init>:
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    bce0:	movs	r3, #0
	p->FSTS0 = 0x000F; // clear fault status
    bce2:	movs	r2, #15
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    bce4:	movw	ip, #33464	; 0x82b8
	for (i=0; i < 4; i++) {
    bce8:	mov	r1, r3
{
    bcea:	push	{r4, lr}
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    bcec:	mov.w	r4, #61440	; 0xf000
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    bcf0:	mov.w	lr, #1024	; 0x400
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    bcf4:	strh.w	r4, [r0, #396]	; 0x18c
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    bcf8:	mov.w	r4, #57344	; 0xe000
	p->FSTS0 = 0x000F; // clear fault status
    bcfc:	strh.w	r2, [r0, #398]	; 0x18e
		p->SM[i].OCTRL = 0;
    bd00:	mov	r2, r1
	p->FFILT0 = 0;
    bd02:	strh.w	r3, [r0, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    bd06:	ldrh.w	r3, [r0, #392]	; 0x188
    bd0a:	uxth	r3, r3
    bd0c:	orr.w	r3, r3, #240	; 0xf0
    bd10:	strh.w	r3, [r0, #392]	; 0x188
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    bd14:	add.w	r3, r1, r1, lsl #1
	for (i=0; i < 4; i++) {
    bd18:	adds	r1, #1
    bd1a:	add.w	r3, r0, r3, lsl #5
    bd1e:	cmp	r1, #4
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    bd20:	strh	r4, [r3, #4]
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    bd22:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    bd26:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    bd28:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    bd2a:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    bd2c:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    bd2e:	strh.w	ip, [r3, #14]
		p->SM[i].VAL2 = 0;
    bd32:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    bd34:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    bd36:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    bd38:	strh	r2, [r3, #30]
	for (i=0; i < 4; i++) {
    bd3a:	bne.n	bd14 <flexpwm_init+0x34>
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    bd3c:	ldrh.w	r3, [r0, #392]	; 0x188
    bd40:	uxth	r3, r3
    bd42:	orr.w	r3, r3, #15
    bd46:	strh.w	r3, [r0, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    bd4a:	ldrh.w	r3, [r0, #392]	; 0x188
    bd4e:	uxth	r3, r3
    bd50:	orr.w	r3, r3, #3840	; 0xf00
    bd54:	strh.w	r3, [r0, #392]	; 0x188
}
    bd58:	pop	{r4, pc}
    bd5a:	nop

0000bd5c <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    bd5c:	ldr	r3, [pc, #220]	; (be3c <pwm_init+0xe0>)
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    bd5e:	ldr	r2, [pc, #224]	; (be40 <pwm_init+0xe4>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    bd60:	ldr	r1, [r3, #120]	; 0x78
		CCM_CCGR6_QTIMER3(CCM_CCGR_ON) | CCM_CCGR6_QTIMER4(CCM_CCGR_ON);
	flexpwm_init(&IMXRT_FLEXPWM1);
    bd62:	ldr	r0, [pc, #224]	; (be44 <pwm_init+0xe8>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    bd64:	orr.w	r1, r1, #16711680	; 0xff0000
{
    bd68:	push	{r4, r5, r6, lr}
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    bd6a:	str	r1, [r3, #120]	; 0x78
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    bd6c:	movw	r6, #4097	; 0x1001
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    bd70:	ldr.w	r1, [r3, #128]	; 0x80
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    bd74:	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    bd78:	movw	r4, #12326	; 0x3026
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    bd7c:	orrs	r2, r1
    bd7e:	str.w	r2, [r3, #128]	; 0x80
	flexpwm_init(&IMXRT_FLEXPWM1);
    bd82:	bl	bce0 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM2);
    bd86:	add.w	r0, r0, #16384	; 0x4000
    bd8a:	bl	bce0 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM3);
    bd8e:	add.w	r0, r0, #16384	; 0x4000
    bd92:	bl	bce0 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM4);
    bd96:	add.w	r0, r0, #16384	; 0x4000
    bd9a:	bl	bce0 <flexpwm_init>
	for (i=0; i < 4; i++) {
    bd9e:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    bda0:	sub.w	r0, r0, #2146304	; 0x20c000
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    bda4:	mov.w	lr, #15
		p->CH[i].CTRL = 0; // stop timer
    bda8:	mov	r1, r2
    bdaa:	add.w	r3, r0, r2, lsl #5
    bdae:	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    bdb2:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    bdb4:	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    bdb6:	cmp	r2, #4
		p->CH[i].CNTR = 0;
    bdb8:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    bdba:	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    bdbe:	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    bdc0:	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    bdc2:	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    bdc6:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    bdc8:	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    bdca:	bne.n	bdaa <pwm_init+0x4e>
    bdcc:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    bdce:	ldr	r0, [pc, #120]	; (be48 <pwm_init+0xec>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    bdd0:	mov.w	lr, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    bdd4:	movw	r6, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    bdd8:	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    bdda:	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    bdde:	movw	r4, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    bde2:	add.w	r3, r0, r2, lsl #5
    bde6:	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    bdea:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    bdec:	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    bdee:	cmp	r2, #4
		p->CH[i].CNTR = 0;
    bdf0:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    bdf2:	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    bdf6:	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    bdf8:	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    bdfa:	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    bdfe:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    be00:	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    be02:	bne.n	bde2 <pwm_init+0x86>
    be04:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    be06:	ldr	r0, [pc, #68]	; (be4c <pwm_init+0xf0>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    be08:	movs	r6, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    be0a:	movw	r5, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    be0e:	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    be10:	movw	r4, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    be14:	movw	lr, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    be18:	add.w	r3, r0, r2, lsl #5
    be1c:	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    be20:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    be22:	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    be24:	cmp	r2, #4
		p->CH[i].CNTR = 0;
    be26:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    be28:	strh	r6, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    be2a:	strh	r5, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    be2c:	strh	r4, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    be2e:	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    be32:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    be34:	strh.w	lr, [r3, #12]
	for (i=0; i < 4; i++) {
    be38:	bne.n	be18 <pwm_init+0xbc>
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    be3a:	pop	{r4, r5, r6, pc}
    be3c:	.word	0x400fc000
    be40:	.word	0xfc030000
    be44:	.word	0x403dc000
    be48:	.word	0x401e0000
    be4c:	.word	0x401e4000

0000be50 <rx_queue_transfer>:
{
    be50:	push	{r3, r4, r5, r6, r7, lr}
	void *buffer = rx_buffer + i * MIDI_RX_SIZE_480;
    be52:	ldr	r4, [pc, #80]	; (bea4 <rx_queue_transfer+0x54>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    be54:	mov.w	r5, #3758153728	; 0xe000e000
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    be58:	ldr	r6, [pc, #76]	; (bea8 <rx_queue_transfer+0x58>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    be5a:	mov.w	r2, #131072	; 0x20000
	void *buffer = rx_buffer + i * MIDI_RX_SIZE_480;
    be5e:	add.w	r4, r4, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    be62:	ldr	r7, [pc, #72]	; (beac <rx_queue_transfer+0x5c>)
    be64:	add.w	r6, r6, r0, lsl #5
{
    be68:	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
    be6a:	str.w	r2, [r5, #396]	; 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    be6e:	mov	r1, r4
    be70:	ldrh	r2, [r7, #0]
    be72:	mov	r0, r6
    be74:	bl	b74c <usb_prepare_transfer>
	arm_dcache_delete(buffer, rx_packet_size);
    be78:	ldrh	r3, [r7, #0]
	uint32_t end_addr = (uint32_t)addr + size;
    be7a:	add	r3, r4
	asm("dsb");
    be7c:	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    be80:	str.w	r4, [r5, #3932]	; 0xf5c
		location += 32;
    be84:	adds	r4, #32
	} while (location < end_addr);
    be86:	cmp	r3, r4
    be88:	bhi.n	be80 <rx_queue_transfer+0x30>
	asm("dsb");
    be8a:	dsb	sy
	asm("isb");
    be8e:	isb	sy
	usb_receive(MIDI_RX_ENDPOINT, rx_transfer + i);
    be92:	movs	r0, #4
    be94:	mov	r1, r6
    be96:	bl	b7a4 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    be9a:	mov.w	r3, #131072	; 0x20000
    be9e:	str.w	r3, [r5, #268]	; 0x10c
}
    bea2:	pop	{r3, r4, r5, r6, r7, pc}
    bea4:	.word	0x20203d00
    bea8:	.word	0x20003020
    beac:	.word	0x20007b4c

0000beb0 <rx_event>:
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    beb0:	ldr	r2, [r0, #4]
	len &= 0xFFFC; // MIDI packets must be multiple of 4 bytes
    beb2:	movw	r1, #65532	; 0xfffc
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    beb6:	ldr	r3, [pc, #68]	; (befc <rx_event+0x4c>)
    beb8:	ubfx	r2, r2, #16, #15
	int i = t->callback_param;
    bebc:	ldr	r0, [r0, #28]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    bebe:	ldrh	r3, [r3, #0]
    bec0:	subs	r3, r3, r2
	if (len > 0) {
    bec2:	ands	r3, r1
    bec4:	beq.n	bef6 <rx_event+0x46>
		rx_count[i] = len;
    bec6:	ldr	r1, [pc, #56]	; (bf00 <rx_event+0x50>)
{
    bec8:	push	{r4, r5}
		uint32_t head = rx_head;
    beca:	ldr	r4, [pc, #56]	; (bf04 <rx_event+0x54>)
		rx_index[i] = 0;
    becc:	ldr	r5, [pc, #56]	; (bf08 <rx_event+0x58>)
		uint32_t head = rx_head;
    bece:	ldrb	r2, [r4, #0]
		rx_count[i] = len;
    bed0:	strh.w	r3, [r1, r0, lsl #1]
		rx_index[i] = 0;
    bed4:	movs	r1, #0
		if (++head > RX_NUM) head = 0;
    bed6:	adds	r2, #1
		rx_index[i] = 0;
    bed8:	strh.w	r1, [r5, r0, lsl #1]
		if (++head > RX_NUM) head = 0;
    bedc:	cmp	r2, #6
		rx_head = head;
    bede:	ite	ls
    bee0:	uxtbls	r1, r2
		if (++head > RX_NUM) head = 0;
    bee2:	movhi	r2, r1
		rx_head = head;
    bee4:	strb	r1, [r4, #0]
		rx_available += len;
    bee6:	ldr	r1, [pc, #36]	; (bf0c <rx_event+0x5c>)
    bee8:	ldr	r4, [r1, #0]
    beea:	add	r3, r4
    beec:	str	r3, [r1, #0]
		rx_list[head] = i;
    beee:	ldr	r3, [pc, #32]	; (bf10 <rx_event+0x60>)
    bef0:	strb	r0, [r3, r2]
}
    bef2:	pop	{r4, r5}
    bef4:	bx	lr
		rx_queue_transfer(i);
    bef6:	b.w	be50 <rx_queue_transfer>
    befa:	nop
    befc:	.word	0x20007b4c
    bf00:	.word	0x20007a98
    bf04:	.word	0x20007b66
    bf08:	.word	0x20007ab4
    bf0c:	.word	0x20007a84
    bf10:	.word	0x20007acc

0000bf14 <usb_midi_configure>:
	if (usb_high_speed) {
    bf14:	ldr	r3, [pc, #132]	; (bf9c <usb_midi_configure+0x88>)
{
    bf16:	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
    bf18:	ldrb	r3, [r3, #0]
    bf1a:	cmp	r3, #0
    bf1c:	beq.n	bf96 <usb_midi_configure+0x82>
    bf1e:	mov.w	r3, #512	; 0x200
    bf22:	mov	r6, r3
		rx_packet_size = MIDI_RX_SIZE_480;
    bf24:	ldr	r1, [pc, #120]	; (bfa0 <usb_midi_configure+0x8c>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
    bf26:	movs	r2, #128	; 0x80
		tx_packet_size = MIDI_TX_SIZE_480;
    bf28:	ldr	r5, [pc, #120]	; (bfa4 <usb_midi_configure+0x90>)
	tx_head = 0;
    bf2a:	movs	r4, #0
		rx_packet_size = MIDI_RX_SIZE_480;
    bf2c:	strh	r3, [r1, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    bf2e:	movs	r1, #0
    bf30:	ldr	r0, [pc, #116]	; (bfa8 <usb_midi_configure+0x94>)
		tx_packet_size = MIDI_TX_SIZE_480;
    bf32:	strh	r3, [r5, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    bf34:	bl	e064 <memset>
	tx_head = 0;
    bf38:	ldr	r2, [pc, #112]	; (bfac <usb_midi_configure+0x98>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    bf3a:	mov	r1, r4
	tx_available = 0;
    bf3c:	ldr	r3, [pc, #112]	; (bfb0 <usb_midi_configure+0x9c>)
	tx_head = 0;
    bf3e:	strb	r4, [r2, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    bf40:	movs	r2, #192	; 0xc0
    bf42:	ldr	r0, [pc, #112]	; (bfb4 <usb_midi_configure+0xa0>)
	tx_available = 0;
    bf44:	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    bf46:	bl	e064 <memset>
	memset(rx_count, 0, sizeof(rx_count));
    bf4a:	ldr	r2, [pc, #108]	; (bfb8 <usb_midi_configure+0xa4>)
	usb_config_rx(MIDI_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    bf4c:	mov	r1, r6
	memset(rx_index, 0, sizeof(rx_index));
    bf4e:	ldr	r3, [pc, #108]	; (bfbc <usb_midi_configure+0xa8>)
	usb_config_rx(MIDI_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    bf50:	movs	r0, #4
	memset(rx_count, 0, sizeof(rx_count));
    bf52:	str	r4, [r2, #8]
	memset(rx_index, 0, sizeof(rx_index));
    bf54:	str	r4, [r3, #8]
	memset(rx_count, 0, sizeof(rx_count));
    bf56:	strd	r4, r4, [r2]
	rx_head = 0;
    bf5a:	ldr	r2, [pc, #100]	; (bfc0 <usb_midi_configure+0xac>)
	memset(rx_index, 0, sizeof(rx_index));
    bf5c:	strd	r4, r4, [r3]
	rx_head = 0;
    bf60:	strb	r4, [r2, #0]
	rx_tail = 0;
    bf62:	ldr	r3, [pc, #96]	; (bfc4 <usb_midi_configure+0xb0>)
	rx_available = 0;
    bf64:	ldr	r2, [pc, #96]	; (bfc8 <usb_midi_configure+0xb4>)
	rx_tail = 0;
    bf66:	strb	r4, [r3, #0]
	usb_config_rx(MIDI_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    bf68:	ldr	r3, [pc, #96]	; (bfcc <usb_midi_configure+0xb8>)
	rx_available = 0;
    bf6a:	str	r4, [r2, #0]
	usb_config_rx(MIDI_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    bf6c:	mov	r2, r4
    bf6e:	bl	b5b4 <usb_config_rx>
	usb_config_tx(MIDI_TX_ENDPOINT, tx_packet_size, 0, NULL); // TODO: is ZLP needed?
    bf72:	mov	r3, r4
    bf74:	mov	r2, r4
    bf76:	ldrh	r1, [r5, #0]
    bf78:	movs	r0, #4
    bf7a:	bl	b618 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    bf7e:	mov	r0, r4
    bf80:	adds	r4, #1
    bf82:	bl	be50 <rx_queue_transfer>
    bf86:	cmp	r4, #6
    bf88:	bne.n	bf7e <usb_midi_configure+0x6a>
	transmit_previous_timeout = 0;
    bf8a:	movs	r3, #0
    bf8c:	ldr	r1, [pc, #64]	; (bfd0 <usb_midi_configure+0xbc>)
	tx_noautoflush = 0;
    bf8e:	ldr	r2, [pc, #68]	; (bfd4 <usb_midi_configure+0xc0>)
	transmit_previous_timeout = 0;
    bf90:	strb	r3, [r1, #0]
	tx_noautoflush = 0;
    bf92:	strb	r3, [r2, #0]
}
    bf94:	pop	{r4, r5, r6, pc}
    bf96:	movs	r3, #64	; 0x40
    bf98:	mov	r6, r3
    bf9a:	b.n	bf24 <usb_midi_configure+0x10>
    bf9c:	.word	0x20007b76
    bfa0:	.word	0x20007b4c
    bfa4:	.word	0x20007b54
    bfa8:	.word	0x200031a0
    bfac:	.word	0x20007b6d
    bfb0:	.word	0x20007b50
    bfb4:	.word	0x20003020
    bfb8:	.word	0x20007a98
    bfbc:	.word	0x20007ab4
    bfc0:	.word	0x20007b66
    bfc4:	.word	0x20007b68
    bfc8:	.word	0x20007a84
    bfcc:	.word	0x0000beb1
    bfd0:	.word	0x20007b6b
    bfd4:	.word	0x20007b6f

0000bfd8 <usb_midi_flush_output>:
{
    bfd8:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (tx_noautoflush == 0 && tx_available > 0) {
    bfdc:	ldr	r3, [pc, #132]	; (c064 <usb_midi_flush_output+0x8c>)
    bfde:	ldrb	r5, [r3, #0]
    bfe0:	cbnz	r5, bfe8 <usb_midi_flush_output+0x10>
    bfe2:	ldr	r6, [pc, #132]	; (c068 <usb_midi_flush_output+0x90>)
    bfe4:	ldrh	r3, [r6, #0]
    bfe6:	cbnz	r3, bfec <usb_midi_flush_output+0x14>
}
    bfe8:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		uint32_t head = tx_head;
    bfec:	ldr.w	r8, [pc, #136]	; c078 <usb_midi_flush_output+0xa0>
		transfer_t *xfer = tx_transfer + head;
    bff0:	ldr	r2, [pc, #120]	; (c06c <usb_midi_flush_output+0x94>)
		uint32_t head = tx_head;
    bff2:	ldrb.w	r7, [r8]
		uint8_t *txbuf = txbuffer + (head * TX_SIZE);
    bff6:	ldr	r4, [pc, #120]	; (c070 <usb_midi_flush_output+0x98>)
		transfer_t *xfer = tx_transfer + head;
    bff8:	add.w	r9, r2, r7, lsl #5
		uint32_t len = tx_packet_size - tx_available;
    bffc:	ldr	r2, [pc, #116]	; (c074 <usb_midi_flush_output+0x9c>)
		uint8_t *txbuf = txbuffer + (head * TX_SIZE);
    bffe:	add.w	r4, r4, r7, lsl #9
		uint32_t len = tx_packet_size - tx_available;
    c002:	ldrh	r2, [r2, #0]
		usb_prepare_transfer(xfer, txbuf, len, 0);
    c004:	mov	r0, r9
    c006:	mov	r1, r4
    c008:	subs	r2, r2, r3
    c00a:	mov	r3, r5
    c00c:	bl	b74c <usb_prepare_transfer>
	asm("dsb");
    c010:	dsb	sy
    c014:	add.w	r2, r4, #32
	uint32_t end_addr = (uint32_t)addr + size;
    c018:	add.w	r3, r4, #512	; 0x200
    c01c:	cmp	r3, r2
    c01e:	ite	cc
    c020:	movcc	r3, #1
    c022:	movcs	r3, #16
		SCB_CACHE_DCCIMVAC = location;
    c024:	mov.w	r2, #3758153728	; 0xe000e000
    c028:	add.w	r3, r4, r3, lsl #5
    c02c:	str.w	r4, [r2, #3952]	; 0xf70
		location += 32;
    c030:	adds	r4, #32
	} while (location < end_addr);
    c032:	cmp	r4, r3
    c034:	bne.n	c02c <usb_midi_flush_output+0x54>
	asm("dsb");
    c036:	dsb	sy
	asm("isb");
    c03a:	isb	sy
		if (++head >= TX_NUM) head = 0;
    c03e:	adds	r7, #1
		usb_transmit(MIDI_TX_ENDPOINT, xfer);
    c040:	mov	r1, r9
    c042:	movs	r0, #4
    c044:	bl	b77c <usb_transmit>
		if (++head >= TX_NUM) head = 0;
    c048:	cmp	r7, #3
		tx_available = 0;
    c04a:	mov.w	r3, #0
		usb_stop_sof_interrupts(MIDI_INTERFACE);
    c04e:	mov.w	r0, #2
		tx_head = head;
    c052:	it	ls
    c054:	uxtbls	r5, r7
		tx_available = 0;
    c056:	strh	r3, [r6, #0]
		tx_head = head;
    c058:	strb.w	r5, [r8]
}
    c05c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		usb_stop_sof_interrupts(MIDI_INTERFACE);
    c060:	b.w	ae48 <usb_stop_sof_interrupts>
    c064:	.word	0x20007b6f
    c068:	.word	0x20007b50
    c06c:	.word	0x200031a0
    c070:	.word	0x20204900
    c074:	.word	0x20007b54
    c078:	.word	0x20007b6d

0000c07c <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    c07c:	ldr	r2, [pc, #72]	; (c0c8 <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    c07e:	ldr	r3, [pc, #76]	; (c0cc <usb_init_serialnumber+0x50>)
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    c080:	ldr.w	r0, [r2, #544]	; 0x220
    c084:	bic.w	r0, r0, #4278190080	; 0xff000000
	if (num < 10000000) num = num * 10;
    c088:	cmp	r0, r3
{
    c08a:	push	{r4, lr}
    c08c:	sub	sp, #16
	if (num < 10000000) num = num * 10;
    c08e:	bcs.n	c096 <usb_init_serialnumber+0x1a>
    c090:	add.w	r0, r0, r0, lsl #2
    c094:	lsls	r0, r0, #1
	ultoa(num, buf, 10);
    c096:	ldr	r4, [pc, #56]	; (c0d0 <usb_init_serialnumber+0x54>)
    c098:	add	r1, sp, #4
    c09a:	movs	r2, #10
    c09c:	bl	d0a0 <ultoa>
	for (i=0; i<10; i++) {
    c0a0:	add	r1, sp, #4
    c0a2:	movs	r3, #0
    c0a4:	mov	r0, r4
		char c = buf[i];
    c0a6:	ldrb.w	r2, [r1], #1
	for (i=0; i<10; i++) {
    c0aa:	adds	r3, #1
		if (!c) break;
    c0ac:	cbz	r2, c0be <usb_init_serialnumber+0x42>
	for (i=0; i<10; i++) {
    c0ae:	cmp	r3, #10
		usb_string_serial_number_default.wString[i] = c;
    c0b0:	strh.w	r2, [r0, #2]!
	for (i=0; i<10; i++) {
    c0b4:	bne.n	c0a6 <usb_init_serialnumber+0x2a>
    c0b6:	movs	r3, #22
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    c0b8:	strb	r3, [r4, #0]
}
    c0ba:	add	sp, #16
    c0bc:	pop	{r4, pc}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    c0be:	lsls	r3, r3, #1
    c0c0:	uxtb	r3, r3
    c0c2:	strb	r3, [r4, #0]
}
    c0c4:	add	sp, #16
    c0c6:	pop	{r4, pc}
    c0c8:	.word	0x401f4400
    c0cc:	.word	0x00989680
    c0d0:	.word	0x20001a2c

0000c0d4 <yield>:

extern const uint8_t _serialEvent_default;	

void yield(void) __attribute__ ((weak));
void yield(void)
{
    c0d4:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
    c0d8:	ldr	r6, [pc, #200]	; (c1a4 <yield+0xd0>)
    c0da:	ldrb	r3, [r6, #0]
    c0dc:	cbz	r3, c0f8 <yield+0x24>
	if (running) return; // TODO: does this need to be atomic?
    c0de:	ldr	r7, [pc, #200]	; (c1a8 <yield+0xd4>)
    c0e0:	ldrb	r2, [r7, #0]
    c0e2:	cbnz	r2, c0f8 <yield+0x24>
	running = 1;
    c0e4:	movs	r2, #1


	// USB Serial - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    c0e6:	lsls	r1, r3, #31
	running = 1;
    c0e8:	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    c0ea:	bmi.n	c176 <yield+0xa2>
		if (_serialEventUSB2_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIALUSB2;
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) HardwareSerial::processSerialEventsList();
    c0ec:	lsls	r2, r3, #30
    c0ee:	bmi.n	c13e <yield+0x6a>

	running = 0;
    c0f0:	movs	r2, #0
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    c0f2:	lsls	r3, r3, #29
	running = 0;
    c0f4:	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    c0f6:	bmi.n	c0fc <yield+0x28>
	
};
    c0f8:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	// Wait for event(s) to occur.  These are most likely to be useful when
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);
	static void runFromYield() {
		if (!firstYield) return;  
    c0fc:	ldr	r3, [pc, #172]	; (c1ac <yield+0xd8>)
    c0fe:	ldr	r2, [r3, #0]
    c100:	cmp	r2, #0
    c102:	beq.n	c0f8 <yield+0x24>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    c104:	mrs	r2, IPSR
		if (ipsr != 0) return;
    c108:	cmp	r2, #0
    c10a:	bne.n	c0f8 <yield+0x24>
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    c10c:	mrs	r5, PRIMASK
		__disable_irq();
    c110:	cpsid	i
		EventResponder *first = firstYield;
    c112:	ldr	r0, [r3, #0]
		if (first == nullptr) {
    c114:	cmp	r0, #0
    c116:	beq.n	c190 <yield+0xbc>
		if (runningFromYield) {
    c118:	ldr	r4, [pc, #148]	; (c1b0 <yield+0xdc>)
    c11a:	ldrb	r1, [r4, #0]
    c11c:	cmp	r1, #0
    c11e:	bne.n	c190 <yield+0xbc>
		runningFromYield = true;
    c120:	movs	r2, #1
    c122:	strb	r2, [r4, #0]
		firstYield = first->_next;
    c124:	ldr	r2, [r0, #20]
    c126:	str	r2, [r3, #0]
		if (firstYield) {
    c128:	cmp	r2, #0
    c12a:	beq.n	c19e <yield+0xca>
			firstYield->_prev = nullptr;
    c12c:	str	r1, [r2, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    c12e:	cbnz	r5, c132 <yield+0x5e>
    c130:	cpsie	i
		first->_triggered = false;
    c132:	movs	r5, #0
		(*(first->_function))(*first);
    c134:	ldr	r3, [r0, #8]
		first->_triggered = false;
    c136:	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    c138:	blx	r3
		runningFromYield = false;
    c13a:	strb	r5, [r4, #0]
    c13c:	b.n	c0f8 <yield+0x24>
	*/

	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    c13e:	ldr.w	r8, [pc, #124]	; c1bc <yield+0xe8>
    c142:	ldrb.w	r2, [r8]
    c146:	cmp	r2, #0
    c148:	beq.n	c0f0 <yield+0x1c>
    c14a:	movs	r5, #0
    c14c:	ldr.w	r9, [pc, #112]	; c1c0 <yield+0xec>
    c150:	mov	r3, r5
			s_serials_with_serial_events[i]->doYieldCode();
    c152:	ldr.w	r4, [r9, r3, lsl #2]
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    c156:	adds	r5, #1
	static HardwareSerial 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
    c158:	ldr	r3, [r4, #0]
    c15a:	mov	r0, r4
    c15c:	ldr	r3, [r3, #16]
    c15e:	blx	r3
    c160:	cbz	r0, c168 <yield+0x94>
    c162:	ldr	r3, [r4, #20]
    c164:	ldr	r3, [r3, #8]
    c166:	blx	r3
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    c168:	ldrb.w	r2, [r8]
    c16c:	uxtb	r3, r5
    c16e:	cmp	r2, r3
    c170:	bhi.n	c152 <yield+0x7e>
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    c172:	ldrb	r3, [r6, #0]
    c174:	b.n	c0f0 <yield+0x1c>
    c176:	bl	a768 <usb_serial_available>
		if (Serial.available()) serialEvent();
    c17a:	cbnz	r0, c198 <yield+0xc4>
		if (_serialEvent_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIAL;
    c17c:	ldr	r3, [pc, #52]	; (c1b4 <yield+0xe0>)
    c17e:	ldrb	r3, [r3, #0]
    c180:	cbnz	r3, c186 <yield+0xb2>
    c182:	ldrb	r3, [r6, #0]
    c184:	b.n	c0ec <yield+0x18>
    c186:	ldrb	r3, [r6, #0]
    c188:	and.w	r3, r3, #254	; 0xfe
    c18c:	strb	r3, [r6, #0]
    c18e:	b.n	c0ec <yield+0x18>
		if (doit) __enable_irq();
    c190:	cmp	r5, #0
    c192:	bne.n	c0f8 <yield+0x24>
    c194:	cpsie	i
    c196:	b.n	c0f8 <yield+0x24>
		if (Serial.available()) serialEvent();
    c198:	bl	d094 <serialEvent()>
    c19c:	b.n	c17c <yield+0xa8>
			lastYield = nullptr;
    c19e:	ldr	r3, [pc, #24]	; (c1b8 <yield+0xe4>)
    c1a0:	str	r2, [r3, #0]
    c1a2:	b.n	c12e <yield+0x5a>
    c1a4:	.word	0x20001a45
    c1a8:	.word	0x20007b61
    c1ac:	.word	0x20006504
    c1b0:	.word	0x20007b5e
    c1b4:	.word	0x60002376
    c1b8:	.word	0x20006510
    c1bc:	.word	0x20007b5f
    c1c0:	.word	0x20006514

0000c1c4 <EventResponder::triggerEventNotImmediate()>:
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    c1c4:	mrs	r2, PRIMASK
		__disable_irq();
    c1c8:	cpsid	i
	if (_triggered == false) {
    c1ca:	ldrb	r3, [r0, #29]
    c1cc:	cbnz	r3, c1e6 <EventResponder::triggerEventNotImmediate()+0x22>
		if (_type == EventTypeYield) {
    c1ce:	ldrb	r1, [r0, #28]
    c1d0:	cmp	r1, #1
{
    c1d2:	push	{r4, r5}
		if (_type == EventTypeYield) {
    c1d4:	beq.n	c1ee <EventResponder::triggerEventNotImmediate()+0x2a>
		} else if (_type == EventTypeInterrupt) {
    c1d6:	cmp	r1, #3
    c1d8:	beq.n	c202 <EventResponder::triggerEventNotImmediate()+0x3e>
		_triggered = true;
    c1da:	movs	r3, #1
    c1dc:	strb	r3, [r0, #29]
		if (doit) __enable_irq();
    c1de:	cbnz	r2, c1e2 <EventResponder::triggerEventNotImmediate()+0x1e>
    c1e0:	cpsie	i
}
    c1e2:	pop	{r4, r5}
    c1e4:	bx	lr
    c1e6:	cbnz	r2, c1ec <EventResponder::triggerEventNotImmediate()+0x28>
    c1e8:	cpsie	i
    c1ea:	bx	lr
    c1ec:	bx	lr
			if (firstYield == nullptr) {
    c1ee:	ldr	r4, [pc, #72]	; (c238 <EventResponder::triggerEventNotImmediate()+0x74>)
    c1f0:	ldr	r1, [r4, #0]
    c1f2:	cbz	r1, c222 <EventResponder::triggerEventNotImmediate()+0x5e>
				_prev = lastYield;
    c1f4:	ldr	r1, [pc, #68]	; (c23c <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
    c1f6:	str	r3, [r0, #20]
				_prev = lastYield;
    c1f8:	ldr	r3, [r1, #0]
				lastYield = this;
    c1fa:	str	r0, [r1, #0]
				_prev = lastYield;
    c1fc:	str	r3, [r0, #24]
				_prev->_next = this;
    c1fe:	str	r0, [r3, #20]
				lastYield = this;
    c200:	b.n	c1da <EventResponder::triggerEventNotImmediate()+0x16>
			if (firstInterrupt == nullptr) {
    c202:	ldr	r5, [pc, #60]	; (c240 <EventResponder::triggerEventNotImmediate()+0x7c>)
    c204:	ldr	r1, [pc, #60]	; (c244 <EventResponder::triggerEventNotImmediate()+0x80>)
    c206:	ldr	r4, [r5, #0]
    c208:	cbz	r4, c22e <EventResponder::triggerEventNotImmediate()+0x6a>
				_next = nullptr;
    c20a:	str	r3, [r0, #20]
				_prev = lastInterrupt;
    c20c:	ldr	r3, [r1, #0]
    c20e:	str	r3, [r0, #24]
				_prev->_next = this;
    c210:	str	r0, [r3, #20]
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    c212:	mov.w	r3, #3758153728	; 0xe000e000
    c216:	mov.w	r4, #268435456	; 0x10000000
				lastInterrupt = this;
    c21a:	str	r0, [r1, #0]
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    c21c:	str.w	r4, [r3, #3332]	; 0xd04
    c220:	b.n	c1da <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
    c222:	ldr	r3, [pc, #24]	; (c23c <EventResponder::triggerEventNotImmediate()+0x78>)
				firstYield = this;
    c224:	str	r0, [r4, #0]
				lastYield = this;
    c226:	str	r0, [r3, #0]
				_prev = nullptr;
    c228:	strd	r1, r1, [r0, #20]
				lastYield = this;
    c22c:	b.n	c1da <EventResponder::triggerEventNotImmediate()+0x16>
				_prev = nullptr;
    c22e:	strd	r4, r4, [r0, #20]
				firstInterrupt = this;
    c232:	str	r0, [r5, #0]
				lastInterrupt = this;
    c234:	b.n	c212 <EventResponder::triggerEventNotImmediate()+0x4e>
    c236:	nop
    c238:	.word	0x20006504
    c23c:	.word	0x20006510
    c240:	.word	0x2000650c
    c244:	.word	0x20006508

0000c248 <EventResponder::runFromInterrupt()>:
{
    c248:	push	{r4, r5, r6, lr}
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    c24a:	mrs	r2, PRIMASK
		__disable_irq();
    c24e:	cpsid	i
		EventResponder *first = firstInterrupt;
    c250:	ldr	r4, [pc, #48]	; (c284 <EventResponder::runFromInterrupt()+0x3c>)
    c252:	ldr	r0, [r4, #0]
		if (first) {
    c254:	cbz	r0, c278 <EventResponder::runFromInterrupt()+0x30>
				lastInterrupt = nullptr;
    c256:	ldr	r6, [pc, #48]	; (c288 <EventResponder::runFromInterrupt()+0x40>)
				firstInterrupt->_prev = nullptr;
    c258:	movs	r5, #0
			firstInterrupt = first->_next;
    c25a:	ldr	r3, [r0, #20]
    c25c:	str	r3, [r4, #0]
			if (firstInterrupt) {
    c25e:	cbz	r3, c27e <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    c260:	str	r5, [r3, #24]
		if (doit) __enable_irq();
    c262:	cbnz	r2, c266 <EventResponder::runFromInterrupt()+0x1e>
    c264:	cpsie	i
			(*(first->_function))(*first);
    c266:	ldr	r3, [r0, #8]
			first->_triggered = false;
    c268:	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    c26a:	blx	r3
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    c26c:	mrs	r2, PRIMASK
		__disable_irq();
    c270:	cpsid	i
		EventResponder *first = firstInterrupt;
    c272:	ldr	r0, [r4, #0]
		if (first) {
    c274:	cmp	r0, #0
    c276:	bne.n	c25a <EventResponder::runFromInterrupt()+0x12>
		if (doit) __enable_irq();
    c278:	cbnz	r2, c27c <EventResponder::runFromInterrupt()+0x34>
    c27a:	cpsie	i
}
    c27c:	pop	{r4, r5, r6, pc}
				lastInterrupt = nullptr;
    c27e:	str	r3, [r6, #0]
    c280:	b.n	c262 <EventResponder::runFromInterrupt()+0x1a>
    c282:	nop
    c284:	.word	0x2000650c
    c288:	.word	0x20006508

0000c28c <pendablesrvreq_isr>:
	EventResponder::runFromInterrupt();
    c28c:	b.w	c248 <EventResponder::runFromInterrupt()>

0000c290 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    c290:	ldr	r1, [pc, #16]	; (c2a4 <systick_isr+0x14>)
	systick_millis_count++;
    c292:	ldr	r2, [pc, #20]	; (c2a8 <systick_isr+0x18>)
	systick_cycle_count = ARM_DWT_CYCCNT;
    c294:	ldr	r1, [r1, #4]
    c296:	ldr	r3, [pc, #20]	; (c2ac <systick_isr+0x1c>)
    c298:	str	r1, [r3, #0]
	systick_millis_count++;
    c29a:	ldr	r3, [r2, #0]
    c29c:	adds	r3, #1
    c29e:	str	r3, [r2, #0]
}
    c2a0:	bx	lr
    c2a2:	nop
    c2a4:	.word	0xe0001000
    c2a8:	.word	0x20007aec
    c2ac:	.word	0x20007ae8

0000c2b0 <DMAChannel::begin(bool)>:
#warning "CR is defined as something?"
#endif


void DMAChannel::begin(bool force_initialization)
{
    c2b0:	push	{r4, r5}
	uint32_t ch = 0;

	__disable_irq();
    c2b2:	cpsid	i
	if (!force_initialization && TCD && channel < DMA_MAX_CHANNELS
    c2b4:	cbnz	r1, c2c0 <DMAChannel::begin(bool)+0x10>
    c2b6:	ldr	r3, [r0, #0]
    c2b8:	cbz	r3, c2c0 <DMAChannel::begin(bool)+0x10>
    c2ba:	ldrb	r2, [r0, #4]
    c2bc:	cmp	r2, #15
    c2be:	bls.n	c338 <DMAChannel::begin(bool)+0x88>
	  && (dma_channel_allocated_mask & (1 << channel))
    c2c0:	ldr	r4, [pc, #144]	; (c354 <DMAChannel::begin(bool)+0xa4>)
    c2c2:	ldrh	r1, [r4, #0]
{
    c2c4:	movs	r3, #0
		// DMA channel already allocated
		__enable_irq();
		return;
	}
	while (1) {
		if (!(dma_channel_allocated_mask & (1 << ch))) {
    c2c6:	asr.w	r2, r1, r3
    c2ca:	ands.w	r2, r2, #1
    c2ce:	beq.n	c2e2 <DMAChannel::begin(bool)+0x32>
			dma_channel_allocated_mask |= (1 << ch);
			__enable_irq();
			break;
		}
		if (++ch >= DMA_MAX_CHANNELS) {
    c2d0:	adds	r3, #1
    c2d2:	cmp	r3, #16
    c2d4:	bne.n	c2c6 <DMAChannel::begin(bool)+0x16>
			__enable_irq();
    c2d6:	cpsie	i
			TCD = (TCD_t *)0;
    c2d8:	movs	r2, #0
			channel = DMA_MAX_CHANNELS;
    c2da:	strb	r3, [r0, #4]
			TCD = (TCD_t *)0;
    c2dc:	str	r2, [r0, #0]
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
}
    c2de:	pop	{r4, r5}
    c2e0:	bx	lr
			dma_channel_allocated_mask |= (1 << ch);
    c2e2:	mov.w	ip, #1
    c2e6:	lsl.w	ip, ip, r3
    c2ea:	orr.w	r1, r1, ip
    c2ee:	strh	r1, [r4, #0]
			__enable_irq();
    c2f0:	cpsie	i
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    c2f2:	ldr	r1, [pc, #100]	; (c358 <DMAChannel::begin(bool)+0xa8>)
	channel = ch;
    c2f4:	uxtb.w	ip, r3
	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    c2f8:	ldr	r4, [pc, #96]	; (c35c <DMAChannel::begin(bool)+0xac>)
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    c2fa:	add	r1, r3
	channel = ch;
    c2fc:	strb.w	ip, [r0, #4]
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    c300:	lsls	r3, r1, #5
	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    c302:	ldr	r1, [r4, #124]	; 0x7c
    c304:	orr.w	r1, r1, #192	; 0xc0
    c308:	str	r1, [r4, #124]	; 0x7c
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
    c30a:	movw	r4, #1154	; 0x482
    c30e:	ldr	r1, [pc, #80]	; (c360 <DMAChannel::begin(bool)+0xb0>)
    c310:	str	r4, [r1, #0]
	DMA_CERQ = ch;
    c312:	strb.w	ip, [r1, #26]
	DMA_CERR = ch;
    c316:	strb.w	ip, [r1, #30]
	DMA_CEEI = ch;
    c31a:	strb.w	ip, [r1, #24]
	DMA_CINT = ch;
    c31e:	strb.w	ip, [r1, #31]
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    c322:	str	r3, [r0, #0]
}
    c324:	pop	{r4, r5}
	*p++ = 0;
    c326:	strd	r2, r2, [r3]
	*p++ = 0;
    c32a:	strd	r2, r2, [r3, #8]
	*p++ = 0;
    c32e:	strd	r2, r2, [r3, #16]
	*p++ = 0;
    c332:	strd	r2, r2, [r3, #24]
}
    c336:	bx	lr
	  && (dma_channel_allocated_mask & (1 << channel))
    c338:	ldr	r4, [pc, #24]	; (c354 <DMAChannel::begin(bool)+0xa4>)
    c33a:	ldrh	r1, [r4, #0]
    c33c:	asr.w	r5, r1, r2
    c340:	lsls	r5, r5, #31
    c342:	bpl.n	c2c4 <DMAChannel::begin(bool)+0x14>
	  && (uint32_t)TCD == (uint32_t)(0x400E9000 + channel * 32)) {
    c344:	ldr	r5, [pc, #16]	; (c358 <DMAChannel::begin(bool)+0xa8>)
    c346:	add	r5, r2
    c348:	cmp.w	r3, r5, lsl #5
    c34c:	bne.n	c2c4 <DMAChannel::begin(bool)+0x14>
		__enable_irq();
    c34e:	cpsie	i
		return;
    c350:	b.n	c2de <DMAChannel::begin(bool)+0x2e>
    c352:	nop
    c354:	.word	0x20007b46
    c358:	.word	0x02007480
    c35c:	.word	0x400fc000
    c360:	.word	0x400e8000

0000c364 <DMAChannel::release()>:

void DMAChannel::release(void)
{
	if (channel >= DMA_MAX_CHANNELS) return;
    c364:	ldrb	r3, [r0, #4]
    c366:	cmp	r3, #15
    c368:	bhi.n	c38e <DMAChannel::release()+0x2a>
	DMA_CERQ = channel;
    c36a:	ldr	r2, [pc, #36]	; (c390 <DMAChannel::release()+0x2c>)
    c36c:	strb	r3, [r2, #26]
	__disable_irq();
    c36e:	cpsid	i
	dma_channel_allocated_mask &= ~(1 << channel);
    c370:	ldr	r1, [pc, #32]	; (c394 <DMAChannel::release()+0x30>)
    c372:	movs	r2, #1
    c374:	ldrb.w	ip, [r0, #4]
    c378:	ldrh	r3, [r1, #0]
    c37a:	lsl.w	r2, r2, ip
    c37e:	bic.w	r3, r3, r2
    c382:	strh	r3, [r1, #0]
	__enable_irq();
    c384:	cpsie	i
	channel = DMA_MAX_CHANNELS;
    c386:	movs	r2, #16
	TCD = (TCD_t *)0;
    c388:	movs	r3, #0
	channel = DMA_MAX_CHANNELS;
    c38a:	strb	r2, [r0, #4]
	TCD = (TCD_t *)0;
    c38c:	str	r3, [r0, #0]
}
    c38e:	bx	lr
    c390:	.word	0x400e8000
    c394:	.word	0x20007b46

0000c398 <usb_serial_class::clear()>:
        virtual void clear(void) { usb_serial_flush_input(); }
    c398:	b.w	a780 <usb_serial_flush_input>

0000c39c <usb_serial_class::peek()>:
        virtual int peek() { return usb_serial_peekchar(); }
    c39c:	b.w	a724 <usb_serial_peekchar>

0000c3a0 <usb_serial_class::read()>:
        virtual int read() { return usb_serial_getchar(); }
    c3a0:	b.w	a7f0 <usb_serial_getchar>

0000c3a4 <usb_serial_class::available()>:
        virtual int available() { return usb_serial_available(); }
    c3a4:	b.w	a768 <usb_serial_available>

0000c3a8 <usb_serial_class::flush()>:
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    c3a8:	b.w	a8a4 <usb_serial_flush_output>

0000c3ac <usb_serial_class::availableForWrite()>:
	size_t write(int n) { return write((uint8_t)n); }
	// Returns the number of bytes which may be transmitted by write() or print()
	// without waiting.  Typically programs which must maintain rapid checking
	// and response to sensors use availableForWrite() to decide whether to
	// transmit.
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    c3ac:	b.w	a854 <usb_serial_write_buffer_free>

0000c3b0 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    c3b0:	mov	r0, r1
    c3b2:	mov	r1, r2
    c3b4:	b.w	a83c <usb_serial_write>

0000c3b8 <usb_serial_class::write(unsigned char)>:
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    c3b8:	mov	r0, r1
    c3ba:	b.w	a810 <usb_serial_putchar>
    c3be:	nop

0000c3c0 <breakTime(unsigned long, DateTimeFields&)>:
  tm.sec = time % 60;
    c3c0:	ldr	r2, [pc, #308]	; (c4f8 <breakTime(unsigned long, DateTimeFields&)+0x138>)
{
    c3c2:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  tm.sec = time % 60;
    c3c6:	umull	r4, r3, r2, r0
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    c3ca:	movw	sl, #365	; 0x16d
    c3ce:	ldr	r7, [pc, #300]	; (c4fc <breakTime(unsigned long, DateTimeFields&)+0x13c>)
  tm.sec = time % 60;
    c3d0:	lsrs	r3, r3, #5
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    c3d2:	ldr.w	r8, [pc, #312]	; c50c <breakTime(unsigned long, DateTimeFields&)+0x14c>
    c3d6:	ldr.w	r9, [pc, #312]	; c510 <breakTime(unsigned long, DateTimeFields&)+0x150>
  tm.min = time % 60;
    c3da:	umull	r4, r2, r2, r3
  tm.sec = time % 60;
    c3de:	rsb	r4, r3, r3, lsl #4
  tm.min = time % 60;
    c3e2:	lsrs	r2, r2, #5
  tm.sec = time % 60;
    c3e4:	sub.w	r0, r0, r4, lsl #2
  tm.hour = time % 24;
    c3e8:	ldr	r4, [pc, #276]	; (c500 <breakTime(unsigned long, DateTimeFields&)+0x140>)
  tm.min = time % 60;
    c3ea:	rsb	r5, r2, r2, lsl #4
  tm.sec = time % 60;
    c3ee:	strb	r0, [r1, #0]
  tm.min = time % 60;
    c3f0:	sub.w	r3, r3, r5, lsl #2
  tm.hour = time % 24;
    c3f4:	umull	r5, r4, r4, r2
    c3f8:	lsrs	r4, r4, #4
  tm.min = time % 60;
    c3fa:	strb	r3, [r1, #1]
  tm.wday = ((time + 4) % 7);  // Sunday is day 0
    c3fc:	ldr	r3, [pc, #260]	; (c504 <breakTime(unsigned long, DateTimeFields&)+0x144>)
    c3fe:	adds	r5, r4, #4
  tm.hour = time % 24;
    c400:	add.w	r0, r4, r4, lsl #1
    c404:	sub.w	r2, r2, r0, lsl #3
  tm.wday = ((time + 4) % 7);  // Sunday is day 0
    c408:	umull	r0, r3, r3, r5
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    c40c:	movs	r0, #0
  tm.hour = time % 24;
    c40e:	strb	r2, [r1, #2]
  tm.wday = ((time + 4) % 7);  // Sunday is day 0
    c410:	subs	r2, r5, r3
    c412:	add.w	r3, r3, r2, lsr #1
  days = 0;
    c416:	mov	r2, r0
  tm.wday = ((time + 4) % 7);  // Sunday is day 0
    c418:	lsrs	r3, r3, #2
    c41a:	rsb	r3, r3, r3, lsl #3
    c41e:	subs	r5, r5, r3
    c420:	strb	r5, [r1, #3]
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    c422:	uxtb.w	lr, r0
    c426:	movw	ip, #365	; 0x16d
    c42a:	addw	r3, lr, #1970	; 0x7b2
    c42e:	ands.w	r5, r3, #3
    c432:	mul.w	r6, r7, r3
    c436:	bne.n	c44a <breakTime(unsigned long, DateTimeFields&)+0x8a>
    c438:	cmp.w	r8, r6, ror #2
    c43c:	mov.w	ip, #366	; 0x16e
    c440:	bcc.n	c44a <breakTime(unsigned long, DateTimeFields&)+0x8a>
    c442:	cmp.w	r9, r6, ror #4
    c446:	it	cc
    c448:	movcc	ip, sl
    c44a:	add	r2, ip
    c44c:	adds	r0, #1
    c44e:	cmp	r4, r2
    c450:	bcs.n	c422 <breakTime(unsigned long, DateTimeFields&)+0x62>
  tm.year = year + 70; // year is offset from 1970
    c452:	add.w	lr, lr, #70	; 0x46
  days -= LEAP_YEAR(year) ? 366 : 365;
    c456:	ldr	r6, [pc, #176]	; (c508 <breakTime(unsigned long, DateTimeFields&)+0x148>)
  tm.year = year + 70; // year is offset from 1970
    c458:	strb.w	lr, [r1, #6]
  days -= LEAP_YEAR(year) ? 366 : 365;
    c45c:	umull	r0, r6, r6, r3
    c460:	cbz	r5, c4c4 <breakTime(unsigned long, DateTimeFields&)+0x104>
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    c462:	lsrs	r7, r6, #5
    c464:	mov.w	ip, #100	; 0x64
    c468:	mov.w	r0, #400	; 0x190
    c46c:	lsrs	r6, r6, #7
    c46e:	mls	r7, ip, r7, r3
    c472:	mls	r6, r0, r6, r3
  days -= LEAP_YEAR(year) ? 366 : 365;
    c476:	movw	r0, #365	; 0x16d
  time  -= days; // now it is days in this year, starting at 0
    c47a:	subs	r4, r4, r2
    c47c:	movs	r3, #0
    c47e:	movs	r2, #1
      monthLength = monthDays[month];
    c480:	ldr.w	lr, [pc, #144]	; c514 <breakTime(unsigned long, DateTimeFields&)+0x154>
  time  -= days; // now it is days in this year, starting at 0
    c484:	add	r0, r4
  for (month=0; month<12; month++) {
    c486:	b.n	c49e <breakTime(unsigned long, DateTimeFields&)+0xde>
    if (time >= monthLength) {
    c488:	ldrb.w	r4, [r3, lr]
    c48c:	cmp	r4, r0
    c48e:	bhi.n	c4ae <breakTime(unsigned long, DateTimeFields&)+0xee>
  for (month=0; month<12; month++) {
    c490:	cmp	r2, #12
      time -= monthLength;
    c492:	sub.w	r0, r0, r4
  for (month=0; month<12; month++) {
    c496:	beq.n	c4b0 <breakTime(unsigned long, DateTimeFields&)+0xf0>
    c498:	adds	r2, #1
    c49a:	adds	r3, #1
    c49c:	uxtb	r2, r2
    if (month==1) { // february
    c49e:	cmp	r3, #1
    c4a0:	uxtb.w	ip, r3
    c4a4:	bne.n	c488 <breakTime(unsigned long, DateTimeFields&)+0xc8>
      if (LEAP_YEAR(year)) {
    c4a6:	cbnz	r5, c4ba <breakTime(unsigned long, DateTimeFields&)+0xfa>
    c4a8:	cbz	r7, c4de <breakTime(unsigned long, DateTimeFields&)+0x11e>
    c4aa:	movs	r4, #29
    c4ac:	b.n	c4bc <breakTime(unsigned long, DateTimeFields&)+0xfc>
    c4ae:	mov	r2, ip
  tm.mday = time + 1;     // day of month
    c4b0:	adds	r0, #1
  tm.mon = month;  // jan is month 0
    c4b2:	strb	r2, [r1, #5]
  tm.mday = time + 1;     // day of month
    c4b4:	strb	r0, [r1, #4]
}
    c4b6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c4ba:	movs	r4, #28
    if (time >= monthLength) {
    c4bc:	cmp	r0, r4
    c4be:	bcc.n	c4f2 <breakTime(unsigned long, DateTimeFields&)+0x132>
      time -= monthLength;
    c4c0:	subs	r0, r0, r4
  for (month=0; month<12; month++) {
    c4c2:	b.n	c498 <breakTime(unsigned long, DateTimeFields&)+0xd8>
  days -= LEAP_YEAR(year) ? 366 : 365;
    c4c4:	movs	r0, #100	; 0x64
    c4c6:	lsrs	r7, r6, #5
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    c4c8:	lsrs	r6, r6, #7
  days -= LEAP_YEAR(year) ? 366 : 365;
    c4ca:	mls	r7, r0, r7, r3
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    c4ce:	mov.w	r0, #400	; 0x190
    c4d2:	mls	r6, r0, r6, r3
  days -= LEAP_YEAR(year) ? 366 : 365;
    c4d6:	cbz	r7, c4e8 <breakTime(unsigned long, DateTimeFields&)+0x128>
    c4d8:	mov.w	r0, #366	; 0x16e
    c4dc:	b.n	c47a <breakTime(unsigned long, DateTimeFields&)+0xba>
      if (LEAP_YEAR(year)) {
    c4de:	cmp	r6, #0
    c4e0:	ite	ne
    c4e2:	movne	r4, #28
    c4e4:	moveq	r4, #29
    c4e6:	b.n	c4bc <breakTime(unsigned long, DateTimeFields&)+0xfc>
  days -= LEAP_YEAR(year) ? 366 : 365;
    c4e8:	cmp	r6, #0
    c4ea:	bne.n	c476 <breakTime(unsigned long, DateTimeFields&)+0xb6>
    c4ec:	mov.w	r0, #366	; 0x16e
    c4f0:	b.n	c47a <breakTime(unsigned long, DateTimeFields&)+0xba>
    if (time >= monthLength) {
    c4f2:	movs	r2, #1
    c4f4:	b.n	c4b0 <breakTime(unsigned long, DateTimeFields&)+0xf0>
    c4f6:	nop
    c4f8:	.word	0x88888889
    c4fc:	.word	0xc28f5c29
    c500:	.word	0xaaaaaaab
    c504:	.word	0x24924925
    c508:	.word	0x51eb851f
    c50c:	.word	0x028f5c28
    c510:	.word	0x00a3d70a
    c514:	.word	0x20000770

0000c518 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    c518:	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    c51a:	bl	18a4 <setup>
	while (1) {
		loop();
    c51e:	bl	18ec <loop>
		yield();
    c522:	bl	c0d4 <yield>
	while (1) {
    c526:	b.n	c51e <main+0x6>

0000c528 <AudioStream::update_all()>:
	void transmit(audio_block_t *block, unsigned char index = 0);
	audio_block_t * receiveReadOnly(unsigned int index = 0);
	audio_block_t * receiveWritable(unsigned int index = 0);
	static bool update_setup(void);
	static void update_stop(void);
	static void update_all(void) { NVIC_SET_PENDING(IRQ_SOFTWARE); }
    c528:	mov.w	r3, #3758153728	; 0xe000e000
    c52c:	movs	r2, #64	; 0x40
    c52e:	str.w	r2, [r3, #520]	; 0x208
    c532:	bx	lr

0000c534 <software_isr()>:
}

AudioStream * AudioStream::first_update = NULL;

void software_isr(void) // AudioStream::update_all()
{
    c534:	push	{r3, r4, r5, r6, r7, lr}
	AudioStream *p;

	uint32_t totalcycles = ARM_DWT_CYCCNT;
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
    c536:	ldr	r3, [pc, #80]	; (c588 <software_isr()+0x54>)
	uint32_t totalcycles = ARM_DWT_CYCCNT;
    c538:	ldr	r5, [pc, #80]	; (c58c <software_isr()+0x58>)
	for (p = AudioStream::first_update; p; p = p->next_update) {
    c53a:	ldr	r4, [r3, #0]
	uint32_t totalcycles = ARM_DWT_CYCCNT;
    c53c:	ldr	r6, [r5, #4]
	for (p = AudioStream::first_update; p; p = p->next_update) {
    c53e:	cbz	r4, c568 <software_isr()+0x34>
		if (p->active) {
    c540:	ldrb	r3, [r4, #8]
			uint32_t cycles = ARM_DWT_CYCCNT;
			p->update();
    c542:	mov	r0, r4
		if (p->active) {
    c544:	cbz	r3, c562 <software_isr()+0x2e>
			p->update();
    c546:	ldr	r3, [r4, #0]
			uint32_t cycles = ARM_DWT_CYCCNT;
    c548:	ldr	r7, [r5, #4]
			p->update();
    c54a:	ldr	r3, [r3, #0]
    c54c:	blx	r3
			// TODO: traverse inputQueueArray and release
			// any input blocks that weren't consumed?
			cycles = (ARM_DWT_CYCCNT - cycles) >> 6;
    c54e:	ldr	r3, [r5, #4]
			p->cpu_cycles = cycles;
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
    c550:	ldrh	r1, [r4, #6]
			cycles = (ARM_DWT_CYCCNT - cycles) >> 6;
    c552:	subs	r3, r3, r7
			p->cpu_cycles = cycles;
    c554:	ubfx	r2, r3, #6, #16
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
    c558:	cmp.w	r1, r3, lsr #6
			p->cpu_cycles = cycles;
    c55c:	strh	r2, [r4, #4]
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
    c55e:	it	cc
    c560:	strhcc	r2, [r4, #6]
	for (p = AudioStream::first_update; p; p = p->next_update) {
    c562:	ldr	r4, [r4, #20]
    c564:	cmp	r4, #0
    c566:	bne.n	c540 <software_isr()+0xc>
		}
	}
	//digitalWriteFast(2, LOW);
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 6;
    c568:	ldr	r3, [pc, #32]	; (c58c <software_isr()+0x58>)
	AudioStream::cpu_cycles_total = totalcycles;
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    c56a:	ldr	r2, [pc, #36]	; (c590 <software_isr()+0x5c>)
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 6;
    c56c:	ldr	r3, [r3, #4]
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    c56e:	ldrh	r0, [r2, #0]
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 6;
    c570:	subs	r3, r3, r6
	AudioStream::cpu_cycles_total = totalcycles;
    c572:	ldr	r4, [pc, #32]	; (c594 <software_isr()+0x60>)
    c574:	ubfx	r1, r3, #6, #16
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    c578:	cmp.w	r0, r3, lsr #6
	AudioStream::cpu_cycles_total = totalcycles;
    c57c:	strh	r1, [r4, #0]
		AudioStream::cpu_cycles_total_max = totalcycles;
    c57e:	it	cc
    c580:	strhcc	r1, [r2, #0]

	asm("DSB");
    c582:	dsb	sy
}
    c586:	pop	{r3, r4, r5, r6, r7, pc}
    c588:	.word	0x20006410
    c58c:	.word	0xe0001000
    c590:	.word	0x20007b3a
    c594:	.word	0x20007b38

0000c598 <AudioStream::allocate()>:
{
    c598:	push	{r4, r5}
	__disable_irq();
    c59a:	cpsid	i
	index = memory_pool_first_mask;
    c59c:	ldr	r5, [pc, #144]	; (c630 <AudioStream::allocate()+0x98>)
	p += index;
    c59e:	ldr	r4, [pc, #148]	; (c634 <AudioStream::allocate()+0x9c>)
	index = memory_pool_first_mask;
    c5a0:	ldrh	r2, [r5, #0]
		if (p >= end) {
    c5a2:	add.w	r1, r4, #112	; 0x70
	p += index;
    c5a6:	add.w	r3, r4, r2, lsl #2
		if (p >= end) {
    c5aa:	cmp	r3, r1
    c5ac:	bcs.n	c628 <AudioStream::allocate()+0x90>
    c5ae:	add.w	r1, r4, #111	; 0x6f
    c5b2:	adds	r0, r2, #1
    c5b4:	subs	r1, r1, r3
    c5b6:	add.w	r0, r0, r1, lsr #2
    c5ba:	b.n	c5c2 <AudioStream::allocate()+0x2a>
		index++;
    c5bc:	adds	r2, #1
		if (p >= end) {
    c5be:	cmp	r2, r0
    c5c0:	beq.n	c628 <AudioStream::allocate()+0x90>
		index++;
    c5c2:	mov	ip, r3
		avail = *p;
    c5c4:	ldr.w	r1, [r3], #4
		if (avail) break;
    c5c8:	cmp	r1, #0
    c5ca:	beq.n	c5bc <AudioStream::allocate()+0x24>
	n = __builtin_clz(avail);
    c5cc:	clz	r0, r1
	avail &= ~(0x80000000 >> n);
    c5d0:	mov.w	r3, #2147483648	; 0x80000000
    c5d4:	lsrs	r3, r0
    c5d6:	bic.w	r1, r1, r3
	*p = avail;
    c5da:	str.w	r1, [ip]
	if (!avail) index++;
    c5de:	cbnz	r1, c5e2 <AudioStream::allocate()+0x4a>
    c5e0:	adds	r2, #1
	used = memory_used + 1;
    c5e2:	ldr	r3, [pc, #84]	; (c638 <AudioStream::allocate()+0xa0>)
	memory_pool_first_mask = index;
    c5e4:	strh	r2, [r5, #0]
	used = memory_used + 1;
    c5e6:	ldrh	r2, [r3, #0]
	memory_used = used;
    c5e8:	adds	r2, #1
    c5ea:	uxth	r1, r2
    c5ec:	strh	r1, [r3, #0]
	__enable_irq();
    c5ee:	cpsie	i
	index = p - memory_pool_available_mask;
    c5f0:	sub.w	ip, ip, r4
	block = memory_pool + ((index << 5) + (31 - n));
    c5f4:	movw	r3, #8060	; 0x1f7c
    c5f8:	rsb	r4, r0, r0, lsl #24
	index = p - memory_pool_available_mask;
    c5fc:	mov.w	ip, ip, asr #2
	block = memory_pool + ((index << 5) + (31 - n));
    c600:	rsb	r0, r0, r4, lsl #6
	block->ref_count = 1;
    c604:	movs	r4, #1
	block = memory_pool + ((index << 5) + (31 - n));
    c606:	add.w	ip, ip, ip, lsl #6
    c60a:	add.w	r3, r3, ip, lsl #7
    c60e:	add.w	r3, r3, r0, lsl #2
    c612:	ldr	r0, [pc, #40]	; (c63c <AudioStream::allocate()+0xa4>)
    c614:	ldr	r0, [r0, #0]
	block->ref_count = 1;
    c616:	strb	r4, [r0, r3]
	block = memory_pool + ((index << 5) + (31 - n));
    c618:	add	r0, r3
	if (used > memory_used_max) memory_used_max = used;
    c61a:	ldr	r3, [pc, #36]	; (c640 <AudioStream::allocate()+0xa8>)
    c61c:	ldrh	r4, [r3, #0]
    c61e:	cmp	r4, r2
}
    c620:	pop	{r4, r5}
	if (used > memory_used_max) memory_used_max = used;
    c622:	it	cc
    c624:	strhcc	r1, [r3, #0]
}
    c626:	bx	lr
			__enable_irq();
    c628:	cpsie	i
			return NULL;
    c62a:	movs	r0, #0
}
    c62c:	pop	{r4, r5}
    c62e:	bx	lr
    c630:	.word	0x20007b3c
    c634:	.word	0x20006414
    c638:	.word	0x20007b34
    c63c:	.word	0x2000640c
    c640:	.word	0x20007b36

0000c644 <AudioStream::release(audio_block_struct*)>:
	uint32_t mask = (0x80000000 >> (31 - (block->memory_pool_index & 0x1F)));
    c644:	ldrh	r2, [r0, #2]
	__disable_irq();
    c646:	cpsid	i
	if (block->ref_count > 1) {
    c648:	ldrb	r3, [r0, #0]
    c64a:	cmp	r3, #1
    c64c:	bls.n	c656 <AudioStream::release(audio_block_struct*)+0x12>
		block->ref_count--;
    c64e:	subs	r3, #1
    c650:	strb	r3, [r0, #0]
	__enable_irq();
    c652:	cpsie	i
}
    c654:	bx	lr
	uint32_t mask = (0x80000000 >> (31 - (block->memory_pool_index & 0x1F)));
    c656:	mvns	r1, r2
	uint32_t index = block->memory_pool_index >> 5;
    c658:	lsrs	r3, r2, #5
		memory_pool_available_mask[index] |= mask;
    c65a:	ldr	r0, [pc, #44]	; (c688 <AudioStream::release(audio_block_struct*)+0x44>)
	uint32_t mask = (0x80000000 >> (31 - (block->memory_pool_index & 0x1F)));
    c65c:	mov.w	r2, #2147483648	; 0x80000000
    c660:	and.w	r1, r1, #31
    c664:	lsrs	r2, r1
		memory_pool_available_mask[index] |= mask;
    c666:	ldr.w	r1, [r0, r3, lsl #2]
    c66a:	orrs	r2, r1
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
    c66c:	ldr	r1, [pc, #28]	; (c68c <AudioStream::release(audio_block_struct*)+0x48>)
    c66e:	ldrh.w	ip, [r1]
		memory_pool_available_mask[index] |= mask;
    c672:	str.w	r2, [r0, r3, lsl #2]
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
    c676:	cmp	ip, r3
		memory_used--;
    c678:	ldr	r2, [pc, #20]	; (c690 <AudioStream::release(audio_block_struct*)+0x4c>)
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
    c67a:	it	hi
    c67c:	strhhi	r3, [r1, #0]
		memory_used--;
    c67e:	ldrh	r3, [r2, #0]
    c680:	subs	r3, #1
    c682:	strh	r3, [r2, #0]
	__enable_irq();
    c684:	cpsie	i
}
    c686:	bx	lr
    c688:	.word	0x20006414
    c68c:	.word	0x20007b3c
    c690:	.word	0x20007b34

0000c694 <AudioStream::transmit(audio_block_struct*, unsigned char)>:
	for (AudioConnection *c = destination_list; c != NULL; c = c->next_dest) {
    c694:	ldr	r3, [r0, #12]
    c696:	cbnz	r3, c69e <AudioStream::transmit(audio_block_struct*, unsigned char)+0xa>
    c698:	b.n	c6d6 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x42>
    c69a:	ldr	r3, [r3, #12]
    c69c:	cbz	r3, c6d8 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x44>
		if (c->src_index == index) {
    c69e:	ldrb	r0, [r3, #8]
    c6a0:	cmp	r0, r2
    c6a2:	bne.n	c69a <AudioStream::transmit(audio_block_struct*, unsigned char)+0x6>
{
    c6a4:	push	{r4}
			if (c->dst->inputQueue[c->dest_index] == NULL) {
    c6a6:	ldr	r0, [r3, #4]
    c6a8:	ldrb.w	ip, [r3, #9]
    c6ac:	ldr	r0, [r0, #16]
    c6ae:	ldr.w	r4, [r0, ip, lsl #2]
    c6b2:	cbz	r4, c6ca <AudioStream::transmit(audio_block_struct*, unsigned char)+0x36>
	for (AudioConnection *c = destination_list; c != NULL; c = c->next_dest) {
    c6b4:	ldr	r3, [r3, #12]
    c6b6:	cbz	r3, c6c4 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x30>
		if (c->src_index == index) {
    c6b8:	ldrb	r0, [r3, #8]
    c6ba:	cmp	r0, r2
    c6bc:	beq.n	c6a6 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x12>
	for (AudioConnection *c = destination_list; c != NULL; c = c->next_dest) {
    c6be:	ldr	r3, [r3, #12]
    c6c0:	cmp	r3, #0
    c6c2:	bne.n	c6b8 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x24>
}
    c6c4:	ldr.w	r4, [sp], #4
    c6c8:	bx	lr
				c->dst->inputQueue[c->dest_index] = block;
    c6ca:	str.w	r1, [r0, ip, lsl #2]
				block->ref_count++;
    c6ce:	ldrb	r0, [r1, #0]
    c6d0:	adds	r0, #1
    c6d2:	strb	r0, [r1, #0]
    c6d4:	b.n	c6b4 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x20>
    c6d6:	bx	lr
    c6d8:	bx	lr
    c6da:	nop

0000c6dc <AudioStream::receiveReadOnly(unsigned int)>:
	if (index >= num_inputs) return NULL;
    c6dc:	ldrb	r3, [r0, #9]
    c6de:	cmp	r3, r1
    c6e0:	bls.n	c6f0 <AudioStream::receiveReadOnly(unsigned int)+0x14>
	in = inputQueue[index];
    c6e2:	ldr	r3, [r0, #16]
	inputQueue[index] = NULL;
    c6e4:	movs	r2, #0
	in = inputQueue[index];
    c6e6:	ldr.w	r0, [r3, r1, lsl #2]
	inputQueue[index] = NULL;
    c6ea:	str.w	r2, [r3, r1, lsl #2]
	return in;
    c6ee:	bx	lr
	if (index >= num_inputs) return NULL;
    c6f0:	movs	r0, #0
}
    c6f2:	bx	lr

0000c6f4 <AudioStream::receiveWritable(unsigned int)>:
{
    c6f4:	push	{r3, r4, r5, lr}
	if (index >= num_inputs) return NULL;
    c6f6:	ldrb	r3, [r0, #9]
    c6f8:	cmp	r3, r1
    c6fa:	bls.n	c734 <AudioStream::receiveWritable(unsigned int)+0x40>
	in = inputQueue[index];
    c6fc:	ldr	r3, [r0, #16]
	inputQueue[index] = NULL;
    c6fe:	movs	r2, #0
	in = inputQueue[index];
    c700:	ldr.w	r4, [r3, r1, lsl #2]
	inputQueue[index] = NULL;
    c704:	str.w	r2, [r3, r1, lsl #2]
	if (in && in->ref_count > 1) {
    c708:	cbz	r4, c734 <AudioStream::receiveWritable(unsigned int)+0x40>
    c70a:	ldrb	r3, [r4, #0]
    c70c:	cmp	r3, #1
    c70e:	bhi.n	c714 <AudioStream::receiveWritable(unsigned int)+0x20>
}
    c710:	mov	r0, r4
    c712:	pop	{r3, r4, r5, pc}
		p = allocate();
    c714:	bl	c598 <AudioStream::allocate()>
		if (p) memcpy(p->data, in->data, sizeof(p->data));
    c718:	mov	r5, r0
    c71a:	cbz	r0, c728 <AudioStream::receiveWritable(unsigned int)+0x34>
    c71c:	mov.w	r2, #256	; 0x100
    c720:	adds	r1, r4, #4
    c722:	adds	r0, #4
    c724:	bl	a0c4 <memcpy>
		in->ref_count--;
    c728:	ldrb	r3, [r4, #0]
    c72a:	subs	r3, #1
    c72c:	strb	r3, [r4, #0]
		p = allocate();
    c72e:	mov	r4, r5
}
    c730:	mov	r0, r4
    c732:	pop	{r3, r4, r5, pc}
	if (index >= num_inputs) return NULL;
    c734:	movs	r4, #0
}
    c736:	mov	r0, r4
    c738:	pop	{r3, r4, r5, pc}
    c73a:	nop

0000c73c <AudioConnection::connect()>:
		if (isConnected) // already connected
    c73c:	ldrb	r3, [r0, #16]
    c73e:	cbnz	r3, c780 <AudioConnection::connect()+0x44>
		if (!src || !dst) // NULL src or dst - [old] Stream object destroyed
    c740:	ldr	r3, [r0, #0]
    c742:	mov	r1, r0
    c744:	cbz	r3, c786 <AudioConnection::connect()+0x4a>
    c746:	ldr	r3, [r0, #4]
    c748:	cbz	r3, c786 <AudioConnection::connect()+0x4a>
		if (dest_index >= dst->num_inputs) // input number too high
    c74a:	ldrb	r2, [r0, #9]
    c74c:	ldrb	r3, [r3, #9]
    c74e:	cmp	r2, r3
    c750:	bcs.n	c78c <AudioConnection::connect()+0x50>
{
    c752:	push	{r4, r5}
		__disable_irq();
    c754:	cpsid	i
		s = AudioStream::first_update; // first AudioStream in the stream list
    c756:	ldr	r3, [pc, #172]	; (c804 <AudioConnection::connect()+0xc8>)
    c758:	ldr	r4, [r3, #0]
		while (s) // go through all AudioStream objects
    c75a:	cbz	r4, c798 <AudioConnection::connect()+0x5c>
			p = s->destination_list;	// first patchCord in this stream's list
    c75c:	ldr	r3, [r4, #12]
			while (p)
    c75e:	cbz	r3, c792 <AudioConnection::connect()+0x56>
				if (p->dst == dst && p->dest_index == dest_index) // same destination - it's in use!
    c760:	ldr	r0, [r1, #4]
    c762:	b.n	c768 <AudioConnection::connect()+0x2c>
				p = p->next_dest;
    c764:	ldr	r3, [r3, #12]
			while (p)
    c766:	cbz	r3, c792 <AudioConnection::connect()+0x56>
				if (p->dst == dst && p->dest_index == dest_index) // same destination - it's in use!
    c768:	ldr	r2, [r3, #4]
    c76a:	cmp	r2, r0
    c76c:	bne.n	c764 <AudioConnection::connect()+0x28>
    c76e:	ldrb.w	ip, [r3, #9]
    c772:	ldrb	r2, [r1, #9]
    c774:	cmp	ip, r2
    c776:	bne.n	c764 <AudioConnection::connect()+0x28>
					__enable_irq();
    c778:	cpsie	i
					return 4;
    c77a:	movs	r0, #4
}
    c77c:	pop	{r4, r5}
    c77e:	bx	lr
	int result = 1;
    c780:	movs	r0, #1
	__enable_irq();
    c782:	cpsie	i
}
    c784:	bx	lr
			result = 3;
    c786:	movs	r0, #3
	__enable_irq();
    c788:	cpsie	i
}
    c78a:	bx	lr
			result = 2;
    c78c:	movs	r0, #2
	__enable_irq();
    c78e:	cpsie	i
}
    c790:	bx	lr
			s = s->next_update;
    c792:	ldr	r4, [r4, #20]
		while (s) // go through all AudioStream objects
    c794:	cmp	r4, #0
    c796:	bne.n	c75c <AudioConnection::connect()+0x20>
		pp = &AudioStream::unused;
    c798:	ldr	r4, [pc, #108]	; (c808 <AudioConnection::connect()+0xcc>)
    c79a:	ldr	r3, [r4, #0]
		while (*pp && *pp != this)
    c79c:	cbz	r3, c7b0 <AudioConnection::connect()+0x74>
    c79e:	cmp	r1, r3
    c7a0:	bne.n	c7a8 <AudioConnection::connect()+0x6c>
    c7a2:	b.n	c7bc <AudioConnection::connect()+0x80>
    c7a4:	cmp	r1, r3
    c7a6:	beq.n	c7b8 <AudioConnection::connect()+0x7c>
			pp = &((*pp)->next_dest);
    c7a8:	mov	r2, r3
    c7aa:	ldr	r3, [r3, #12]
		while (*pp && *pp != this)
    c7ac:	cmp	r3, #0
    c7ae:	bne.n	c7a4 <AudioConnection::connect()+0x68>
			result = 5;
    c7b0:	movs	r0, #5
	__enable_irq();
    c7b2:	cpsie	i
}
    c7b4:	pop	{r4, r5}
    c7b6:	bx	lr
			pp = &((*pp)->next_dest);
    c7b8:	add.w	r4, r2, #12
		p = src->destination_list; // first AudioConnection
    c7bc:	ldr	r5, [r1, #0]
    c7be:	ldr	r0, [r5, #12]
		if (p == NULL) 
    c7c0:	cbz	r0, c7fe <AudioConnection::connect()+0xc2>
			while (p->next_dest)  // scan source Stream's connection list for duplicates
    c7c2:	ldr	r3, [r0, #12]
    c7c4:	cbnz	r3, c7ce <AudioConnection::connect()+0x92>
    c7c6:	b.n	c7da <AudioConnection::connect()+0x9e>
    c7c8:	ldr	r2, [r3, #12]
    c7ca:	cbz	r2, c7dc <AudioConnection::connect()+0xa0>
    c7cc:	mov	r3, r2
				if (&p->src == &this->src && &p->dst == &this->dst
    c7ce:	cmp	r1, r0
    c7d0:	mov	r0, r3
    c7d2:	bne.n	c7c8 <AudioConnection::connect()+0x8c>
					__enable_irq();
    c7d4:	cpsie	i
					return 6;
    c7d6:	movs	r0, #6
    c7d8:	b.n	c77c <AudioConnection::connect()+0x40>
			while (p->next_dest)  // scan source Stream's connection list for duplicates
    c7da:	mov	r3, r0
			p->next_dest = this; // end of list, can link ourselves in
    c7dc:	str	r1, [r3, #12]
		*pp = next_dest;  // remove ourselves from the unused list
    c7de:	ldr	r3, [r1, #12]
		next_dest = NULL; // we're last in the source's destination list
    c7e0:	movs	r0, #0
		*pp = next_dest;  // remove ourselves from the unused list
    c7e2:	str	r3, [r4, #0]
		src->active = true;
    c7e4:	movs	r3, #1
		next_dest = NULL; // we're last in the source's destination list
    c7e6:	str	r0, [r1, #12]
		src->numConnections++;
    c7e8:	ldrb	r2, [r5, #10]
		src->active = true;
    c7ea:	strb	r3, [r5, #8]
		src->numConnections++;
    c7ec:	add	r2, r3
    c7ee:	strb	r2, [r5, #10]
		dst->numConnections++;
    c7f0:	ldr	r2, [r1, #4]
    c7f2:	ldrb	r4, [r2, #10]
		dst->active = true;
    c7f4:	strb	r3, [r2, #8]
		dst->numConnections++;
    c7f6:	add	r4, r3
    c7f8:	strb	r4, [r2, #10]
		isConnected = true;
    c7fa:	strb	r3, [r1, #16]
		result = 0;
    c7fc:	b.n	c7b2 <AudioConnection::connect()+0x76>
			src->destination_list = this;
    c7fe:	str	r1, [r5, #12]
    c800:	b.n	c7de <AudioConnection::connect()+0xa2>
    c802:	nop
    c804:	.word	0x20006410
    c808:	.word	0x20006484

0000c80c <AudioConnection::AudioConnection(AudioStream&, unsigned char, AudioStream&, unsigned char)>:
AudioConnection::AudioConnection(AudioStream &source, unsigned char sourceOutput,
    c80c:	push	{r4, lr}
		dst = &destination;
    c80e:	strd	r1, r3, [r0]
	next_dest = AudioStream::unused;
    c812:	ldr	r3, [pc, #28]	; (c830 <AudioConnection::AudioConnection(AudioStream&, unsigned char, AudioStream&, unsigned char)+0x24>)
	isConnected = false;	  
    c814:	movs	r1, #0
		src_index = sourceOutput;
    c816:	strb	r2, [r0, #8]
AudioConnection::AudioConnection(AudioStream &source, unsigned char sourceOutput,
    c818:	mov	r4, r0
	next_dest = AudioStream::unused;
    c81a:	ldr	r2, [r3, #0]
	AudioStream::unused = this;
    c81c:	str	r0, [r3, #0]
AudioConnection::AudioConnection(AudioStream &source, unsigned char sourceOutput,
    c81e:	ldrb.w	r3, [sp, #8]
	isConnected = false;	  
    c822:	strb	r1, [r0, #16]
	next_dest = AudioStream::unused;
    c824:	str	r2, [r0, #12]
		dest_index = destinationInput;
    c826:	strb	r3, [r0, #9]
		result = connect();
    c828:	bl	c73c <AudioConnection::connect()>
}
    c82c:	mov	r0, r4
    c82e:	pop	{r4, pc}
    c830:	.word	0x20006484

0000c834 <AudioConnection::disconnect()>:
{
    c834:	push	{r3, r4, r5, lr}
	if (!isConnected) return 1;
    c836:	ldrb	r3, [r0, #16]
    c838:	cmp	r3, #0
    c83a:	beq.n	c8aa <AudioConnection::disconnect()+0x76>
	if (dest_index >= dst->num_inputs) return 2; // should never happen!
    c83c:	ldr	r3, [r0, #4]
    c83e:	mov	r4, r0
    c840:	ldrb	r2, [r0, #9]
    c842:	ldrb	r3, [r3, #9]
    c844:	cmp	r2, r3
    c846:	bcs.n	c8ba <AudioConnection::disconnect()+0x86>
	__disable_irq();
    c848:	cpsid	i
	p = src->destination_list;
    c84a:	ldr	r1, [r0, #0]
    c84c:	ldr	r3, [r1, #12]
	if (p == NULL) {
    c84e:	cmp	r3, #0
    c850:	beq.n	c8ae <AudioConnection::disconnect()+0x7a>
	} else if (p == this) {
    c852:	cmp	r0, r3
    c854:	beq.n	c8be <AudioConnection::disconnect()+0x8a>
			if (p->next_dest == this) // found the parent of the disconnecting object
    c856:	mov	r2, r3
    c858:	ldr	r3, [r3, #12]
    c85a:	cmp	r4, r3
    c85c:	beq.n	c8b4 <AudioConnection::disconnect()+0x80>
		while (p)
    c85e:	cmp	r3, #0
    c860:	bne.n	c856 <AudioConnection::disconnect()+0x22>
	if(dst->inputQueue[dest_index] != NULL) {
    c862:	ldr	r2, [r4, #4]
    c864:	ldrb	r0, [r4, #9]
    c866:	ldr	r3, [r2, #16]
    c868:	ldr.w	r0, [r3, r0, lsl #2]
    c86c:	cbz	r0, c882 <AudioConnection::disconnect()+0x4e>
		AudioStream::release(dst->inputQueue[dest_index]);
    c86e:	bl	c644 <AudioStream::release(audio_block_struct*)>
		__disable_irq();
    c872:	cpsid	i
		dst->inputQueue[dest_index] = NULL;
    c874:	ldr	r2, [r4, #4]
    c876:	movs	r5, #0
    c878:	ldrb	r0, [r4, #9]
    c87a:	ldr	r3, [r2, #16]
	src->numConnections--;
    c87c:	ldr	r1, [r4, #0]
		dst->inputQueue[dest_index] = NULL;
    c87e:	str.w	r5, [r3, r0, lsl #2]
	src->numConnections--;
    c882:	ldrb	r3, [r1, #10]
    c884:	subs	r3, #1
    c886:	uxtb	r3, r3
    c888:	strb	r3, [r1, #10]
	if (src->numConnections == 0) {
    c88a:	cbnz	r3, c88e <AudioConnection::disconnect()+0x5a>
		src->active = false;
    c88c:	strb	r3, [r1, #8]
	dst->numConnections--;
    c88e:	ldrb	r3, [r2, #10]
    c890:	subs	r3, #1
    c892:	uxtb	r3, r3
    c894:	strb	r3, [r2, #10]
	if (dst->numConnections == 0) {
    c896:	cbnz	r3, c89a <AudioConnection::disconnect()+0x66>
		dst->active = false;
    c898:	strb	r3, [r2, #8]
	next_dest = dst->unused;
    c89a:	ldr	r3, [pc, #40]	; (c8c4 <AudioConnection::disconnect()+0x90>)
	isConnected = false;
    c89c:	movs	r0, #0
	next_dest = dst->unused;
    c89e:	ldr	r2, [r3, #0]
	isConnected = false;
    c8a0:	strb	r0, [r4, #16]
	dst->unused = this;
    c8a2:	str	r4, [r3, #0]
	next_dest = dst->unused;
    c8a4:	str	r2, [r4, #12]
	__enable_irq();
    c8a6:	cpsie	i
}
    c8a8:	pop	{r3, r4, r5, pc}
	if (!isConnected) return 1;
    c8aa:	movs	r0, #1
}
    c8ac:	pop	{r3, r4, r5, pc}
		__enable_irq();
    c8ae:	cpsie	i
		return 3;
    c8b0:	movs	r0, #3
}
    c8b2:	pop	{r3, r4, r5, pc}
				p-> next_dest = this->next_dest; // skip parent's link past us
    c8b4:	ldr	r3, [r4, #12]
    c8b6:	str	r3, [r2, #12]
				break;
    c8b8:	b.n	c862 <AudioConnection::disconnect()+0x2e>
	if (dest_index >= dst->num_inputs) return 2; // should never happen!
    c8ba:	movs	r0, #2
}
    c8bc:	pop	{r3, r4, r5, pc}
		if (p->next_dest) {
    c8be:	ldr	r3, [r0, #12]
			src->destination_list = NULL;
    c8c0:	str	r3, [r1, #12]
    c8c2:	b.n	c862 <AudioConnection::disconnect()+0x2e>
    c8c4:	.word	0x20006484

0000c8c8 <AudioConnection::~AudioConnection()>:
AudioConnection::~AudioConnection()
    c8c8:	push	{r4, lr}
    c8ca:	mov	r4, r0
	disconnect(); // disconnect ourselves: puts us on the unused list
    c8cc:	bl	c834 <AudioConnection::disconnect()>
	pp = &AudioStream::unused;
    c8d0:	ldr	r2, [pc, #36]	; (c8f8 <AudioConnection::~AudioConnection()+0x30>)
    c8d2:	ldr	r3, [r2, #0]
	while (*pp && *pp != this)
    c8d4:	cbz	r3, c8e8 <AudioConnection::~AudioConnection()+0x20>
    c8d6:	cmp	r4, r3
    c8d8:	bne.n	c8e0 <AudioConnection::~AudioConnection()+0x18>
    c8da:	b.n	c8ee <AudioConnection::~AudioConnection()+0x26>
    c8dc:	cmp	r4, r3
    c8de:	beq.n	c8ec <AudioConnection::~AudioConnection()+0x24>
		pp = &((*pp)->next_dest);
    c8e0:	mov	r2, r3
    c8e2:	ldr	r3, [r3, #12]
	while (*pp && *pp != this)
    c8e4:	cmp	r3, #0
    c8e6:	bne.n	c8dc <AudioConnection::~AudioConnection()+0x14>
}
    c8e8:	mov	r0, r4
    c8ea:	pop	{r4, pc}
		pp = &((*pp)->next_dest);
    c8ec:	adds	r2, #12
		*pp = next_dest; // remove ourselves from the unused list
    c8ee:	ldr	r3, [r4, #12]
}
    c8f0:	mov	r0, r4
		*pp = next_dest; // remove ourselves from the unused list
    c8f2:	str	r3, [r2, #0]
}
    c8f4:	pop	{r4, pc}
    c8f6:	nop
    c8f8:	.word	0x20006484

0000c8fc <AudioStream::update_setup()>:
	if (update_scheduled) return false;
    c8fc:	ldr	r3, [pc, #48]	; (c930 <AudioStream::update_setup()+0x34>)
    c8fe:	ldrb	r2, [r3, #0]
    c900:	cbnz	r2, c92a <AudioStream::update_setup()+0x2e>
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
    c902:	ldr	r2, [pc, #48]	; (c934 <AudioStream::update_setup()+0x38>)
    c904:	ldr	r1, [pc, #48]	; (c938 <AudioStream::update_setup()+0x3c>)
{
    c906:	push	{r4}
    c908:	str.w	r1, [r2, #344]	; 0x158
	NVIC_SET_PRIORITY(IRQ_SOFTWARE, 208); // 255 = lowest priority
    c90c:	ldr	r0, [pc, #44]	; (c93c <AudioStream::update_setup()+0x40>)
    c90e:	movs	r4, #208	; 0xd0
	update_scheduled = true;
    c910:	movs	r2, #1
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
    c912:	mov.w	r1, #3758153728	; 0xe000e000
	NVIC_SET_PRIORITY(IRQ_SOFTWARE, 208); // 255 = lowest priority
    c916:	strb.w	r4, [r0, #70]	; 0x46
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
    c91a:	movs	r4, #64	; 0x40
	update_scheduled = true;
    c91c:	mov	r0, r2
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
    c91e:	str.w	r4, [r1, #264]	; 0x108
}
    c922:	ldr.w	r4, [sp], #4
	update_scheduled = true;
    c926:	strb	r2, [r3, #0]
}
    c928:	bx	lr
	if (update_scheduled) return false;
    c92a:	movs	r0, #0
}
    c92c:	bx	lr
    c92e:	nop
    c930:	.word	0x20007b5b
    c934:	.word	0x20001c00
    c938:	.word	0x0000c535
    c93c:	.word	0xe000e400

0000c940 <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)>:
	update_responsibility = false;
}

static void copy_to_buffers(const uint32_t *src, int16_t *left, int16_t *right, unsigned int len)
{
	uint32_t *target = (uint32_t*) src + len; 
    c940:	add.w	r3, r0, r3, lsl #2
	while ((src < target) && (((uintptr_t) left & 0x02) != 0)) {
    c944:	cmp	r0, r3
{
    c946:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	while ((src < target) && (((uintptr_t) left & 0x02) != 0)) {
    c94a:	bcc.n	c960 <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)+0x20>
    c94c:	b.n	c964 <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)+0x24>
		uint32_t n = *src++;
    c94e:	ldr.w	r4, [r0], #4
		*left++ = n & 0xFFFF;
		*right++ = n >> 16;
    c952:	lsrs	r5, r4, #16
	while ((src < target) && (((uintptr_t) left & 0x02) != 0)) {
    c954:	cmp	r3, r0
		*left++ = n & 0xFFFF;
    c956:	strh.w	r4, [r1], #2
		*right++ = n >> 16;
    c95a:	strh.w	r5, [r2], #2
	while ((src < target) && (((uintptr_t) left & 0x02) != 0)) {
    c95e:	bls.n	c964 <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)+0x24>
    c960:	lsls	r4, r1, #30
    c962:	bmi.n	c94e <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)+0xe>
	}

	while ((src < target - 2)) {
    c964:	sub.w	r4, r3, #8
    c968:	cmp	r0, r4
    c96a:	bcs.n	c9ce <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)+0x8e>
    c96c:	sub.w	r8, r3, #9
    c970:	add.w	ip, r0, #8
    c974:	mov	lr, r2
		uint32_t n1 = *src++;
		uint32_t n = *src++;
		*(uint32_t *)left = (n1 & 0xFFFF) | ((n & 0xFFFF) << 16);
		left+=2;
		*(uint32_t *)right = (n1 >> 16) | ((n & 0xFFFF0000)) ;
    c976:	ldr	r7, [pc, #92]	; (c9d4 <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)+0x94>)
    c978:	sub.w	r8, r8, r0
    c97c:	mov.w	r8, r8, lsr #3
    c980:	add.w	r8, r8, #1
    c984:	mov.w	r9, r8, lsl #2
    c988:	add.w	r6, r1, r8, lsl #2
		uint32_t n = *src++;
    c98c:	ldrd	sl, r4, [ip, #-8]
	while ((src < target - 2)) {
    c990:	add.w	ip, ip, #8
		*(uint32_t *)left = (n1 & 0xFFFF) | ((n & 0xFFFF) << 16);
    c994:	uxth.w	r5, sl
    c998:	orr.w	r5, r5, r4, lsl #16
		*(uint32_t *)right = (n1 >> 16) | ((n & 0xFFFF0000)) ;
    c99c:	ands	r4, r7
		*(uint32_t *)left = (n1 & 0xFFFF) | ((n & 0xFFFF) << 16);
    c99e:	str.w	r5, [r1], #4
		*(uint32_t *)right = (n1 >> 16) | ((n & 0xFFFF0000)) ;
    c9a2:	orr.w	r4, r4, sl, lsr #16
	while ((src < target - 2)) {
    c9a6:	cmp	r1, r6
		*(uint32_t *)right = (n1 >> 16) | ((n & 0xFFFF0000)) ;
    c9a8:	str.w	r4, [lr], #4
	while ((src < target - 2)) {
    c9ac:	bne.n	c98c <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)+0x4c>
		uint32_t n = *src++;
    c9ae:	add.w	r0, r0, r8, lsl #3
		right+=2;
    c9b2:	add	r2, r9
	}

	while ((src < target)) {
    c9b4:	cmp	r3, r0
    c9b6:	bls.n	c9ca <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)+0x8a>
		uint32_t n = *src++;
    c9b8:	ldr.w	r1, [r0], #4
		*left++ = n & 0xFFFF;
		*right++ = n >> 16;
    c9bc:	lsrs	r4, r1, #16
	while ((src < target)) {
    c9be:	cmp	r3, r0
		*left++ = n & 0xFFFF;
    c9c0:	strh.w	r1, [r6], #2
		*right++ = n >> 16;
    c9c4:	strh.w	r4, [r2], #2
	while ((src < target)) {
    c9c8:	bhi.n	c9b8 <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)+0x78>
	}
}
    c9ca:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	while ((src < target - 2)) {
    c9ce:	mov	r6, r1
	while ((src < target)) {
    c9d0:	b.n	c9b4 <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)+0x74>
    c9d2:	nop
    c9d4:	.word	0xffff0000

0000c9d8 <sync_event(transfer_struct*)>:
{
    c9d8:	push	{r3, r4, r5, lr}
	usb_audio_sync_feedback = feedback_accumulator >> usb_audio_sync_rshift;
    c9da:	ldr	r2, [pc, #68]	; (ca20 <sync_event(transfer_struct*)+0x48>)
    c9dc:	ldr	r3, [pc, #68]	; (ca24 <sync_event(transfer_struct*)+0x4c>)
    c9de:	ldrb	r1, [r2, #0]
    c9e0:	ldr	r2, [r3, #0]
	usb_prepare_transfer(&sync_transfer, &usb_audio_sync_feedback, usb_audio_sync_nbytes, 0);
    c9e2:	movs	r3, #0
	usb_audio_sync_feedback = feedback_accumulator >> usb_audio_sync_rshift;
    c9e4:	ldr	r4, [pc, #64]	; (ca28 <sync_event(transfer_struct*)+0x50>)
	usb_prepare_transfer(&sync_transfer, &usb_audio_sync_feedback, usb_audio_sync_nbytes, 0);
    c9e6:	ldr	r5, [pc, #68]	; (ca2c <sync_event(transfer_struct*)+0x54>)
	usb_audio_sync_feedback = feedback_accumulator >> usb_audio_sync_rshift;
    c9e8:	lsrs	r2, r1
	usb_prepare_transfer(&sync_transfer, &usb_audio_sync_feedback, usb_audio_sync_nbytes, 0);
    c9ea:	ldr	r0, [pc, #68]	; (ca30 <sync_event(transfer_struct*)+0x58>)
    c9ec:	mov	r1, r4
	usb_audio_sync_feedback = feedback_accumulator >> usb_audio_sync_rshift;
    c9ee:	str	r2, [r4, #0]
	usb_prepare_transfer(&sync_transfer, &usb_audio_sync_feedback, usb_audio_sync_nbytes, 0);
    c9f0:	ldrb	r2, [r5, #0]
    c9f2:	bl	b74c <usb_prepare_transfer>
	arm_dcache_flush(&usb_audio_sync_feedback, usb_audio_sync_nbytes);
    c9f6:	ldrb	r3, [r5, #0]
	uint32_t end_addr = (uint32_t)addr + size;
    c9f8:	add	r3, r4
	asm("dsb");
    c9fa:	dsb	sy
		SCB_CACHE_DCCMVAC = location;
    c9fe:	mov.w	r2, #3758153728	; 0xe000e000
    ca02:	str.w	r4, [r2, #3944]	; 0xf68
		location += 32;
    ca06:	adds	r4, #32
	} while (location < end_addr);
    ca08:	cmp	r3, r4
    ca0a:	bhi.n	ca02 <sync_event(transfer_struct*)+0x2a>
	asm("dsb");
    ca0c:	dsb	sy
	asm("isb");
    ca10:	isb	sy
	usb_transmit(AUDIO_SYNC_ENDPOINT, &sync_transfer);
    ca14:	ldr	r1, [pc, #24]	; (ca30 <sync_event(transfer_struct*)+0x58>)
    ca16:	movs	r0, #6
}
    ca18:	ldmia.w	sp!, {r3, r4, r5, lr}
	usb_transmit(AUDIO_SYNC_ENDPOINT, &sync_transfer);
    ca1c:	b.w	b77c <usb_transmit>
    ca20:	.word	0x20007b72
    ca24:	.word	0x200073b0
    ca28:	.word	0x20205260
    ca2c:	.word	0x20007b71
    ca30:	.word	0x20003100

0000ca34 <AudioOutputUSB::update()>:
		len--;
	}
}

void AudioOutputUSB::update(void)
{
    ca34:	push	{r3, r4, r5, lr}
    ca36:	mov	r5, r0
	audio_block_t *left, *right;

	// TODO: we shouldn't be writing to these......
	//left = receiveReadOnly(0); // input 0 = left channel
	//right = receiveReadOnly(1); // input 1 = right channel
	left = receiveWritable(0); // input 0 = left channel
    ca38:	movs	r1, #0
    ca3a:	bl	c6f4 <AudioStream::receiveWritable(unsigned int)>
	right = receiveWritable(1); // input 1 = right channel
    ca3e:	movs	r1, #1
	left = receiveWritable(0); // input 0 = left channel
    ca40:	mov	r4, r0
	right = receiveWritable(1); // input 1 = right channel
    ca42:	mov	r0, r5
    ca44:	bl	c6f4 <AudioStream::receiveWritable(unsigned int)>
	if (usb_audio_transmit_setting == 0) {
    ca48:	ldr	r3, [pc, #236]	; (cb38 <AudioOutputUSB::update()+0x104>)
	right = receiveWritable(1); // input 1 = right channel
    ca4a:	mov	r5, r0
	if (usb_audio_transmit_setting == 0) {
    ca4c:	ldrb	r3, [r3, #0]
    ca4e:	cbz	r3, ca8e <AudioOutputUSB::update()+0x5a>
		if (right_1st) { release(right_1st); right_1st = NULL; }
		if (right_2nd) { release(right_2nd); right_2nd = NULL; }
		offset_1st = 0;
		return;
	}
	if (left == NULL) {
    ca50:	cmp	r4, #0
    ca52:	beq.n	caea <AudioOutputUSB::update()+0xb6>
			if (right) release(right);
			return;
		}
		memset(left->data, 0, sizeof(left->data));
	}
	if (right == NULL) {
    ca54:	cmp	r5, #0
    ca56:	beq.n	cb02 <AudioOutputUSB::update()+0xce>
			release(left);
			return;
		}
		memset(right->data, 0, sizeof(right->data));
	}
	__disable_irq();
    ca58:	cpsid	i
	if (left_1st == NULL) {
    ca5a:	ldr	r3, [pc, #224]	; (cb3c <AudioOutputUSB::update()+0x108>)
    ca5c:	ldr	r0, [r3, #0]
    ca5e:	cmp	r0, #0
    ca60:	beq.n	cade <AudioOutputUSB::update()+0xaa>
		left_1st = left;
		right_1st = right;
		offset_1st = 0;
	} else if (left_2nd == NULL) {
    ca62:	ldr	r2, [pc, #220]	; (cb40 <AudioOutputUSB::update()+0x10c>)
    ca64:	ldr	r1, [r2, #0]
    ca66:	cmp	r1, #0
    ca68:	beq.n	cb18 <AudioOutputUSB::update()+0xe4>
		left_2nd = left;
		right_2nd = right;
	} else {
		// buffer overrun - PC is consuming too slowly
		audio_block_t *discard1 = left_1st;
		left_1st = left_2nd;
    ca6a:	str	r1, [r3, #0]
		left_2nd = left;
		audio_block_t *discard2 = right_1st;
		right_1st = right_2nd;
    ca6c:	ldr	r1, [pc, #212]	; (cb44 <AudioOutputUSB::update()+0x110>)
		audio_block_t *discard2 = right_1st;
    ca6e:	ldr	r3, [pc, #216]	; (cb48 <AudioOutputUSB::update()+0x114>)
		left_2nd = left;
    ca70:	str	r4, [r2, #0]
		right_2nd = right;
		offset_1st = 0; // TODO: discard part of this data?
    ca72:	movs	r4, #0
		right_1st = right_2nd;
    ca74:	ldr	r2, [r1, #0]
		right_2nd = right;
    ca76:	str	r5, [r1, #0]
		offset_1st = 0; // TODO: discard part of this data?
    ca78:	ldr	r1, [pc, #208]	; (cb4c <AudioOutputUSB::update()+0x118>)
    ca7a:	strh	r4, [r1, #0]
		audio_block_t *discard2 = right_1st;
    ca7c:	ldr	r4, [r3, #0]
		right_1st = right_2nd;
    ca7e:	str	r2, [r3, #0]
		//serial_print("*");
		release(discard1);
    ca80:	bl	c644 <AudioStream::release(audio_block_struct*)>
		release(discard2);
    ca84:	mov	r0, r4
    ca86:	bl	c644 <AudioStream::release(audio_block_struct*)>
	}
	__enable_irq();
    ca8a:	cpsie	i
}
    ca8c:	pop	{r3, r4, r5, pc}
		if (left) release(left);
    ca8e:	cbz	r4, ca96 <AudioOutputUSB::update()+0x62>
    ca90:	mov	r0, r4
    ca92:	bl	c644 <AudioStream::release(audio_block_struct*)>
		if (right) release(right);
    ca96:	cbz	r5, ca9e <AudioOutputUSB::update()+0x6a>
    ca98:	mov	r0, r5
    ca9a:	bl	c644 <AudioStream::release(audio_block_struct*)>
		if (left_1st) { release(left_1st); left_1st = NULL; }
    ca9e:	ldr	r4, [pc, #156]	; (cb3c <AudioOutputUSB::update()+0x108>)
    caa0:	ldr	r0, [r4, #0]
    caa2:	cbz	r0, caac <AudioOutputUSB::update()+0x78>
    caa4:	bl	c644 <AudioStream::release(audio_block_struct*)>
    caa8:	movs	r3, #0
    caaa:	str	r3, [r4, #0]
		if (left_2nd) { release(left_2nd); left_2nd = NULL; }
    caac:	ldr	r4, [pc, #144]	; (cb40 <AudioOutputUSB::update()+0x10c>)
    caae:	ldr	r0, [r4, #0]
    cab0:	cbz	r0, caba <AudioOutputUSB::update()+0x86>
    cab2:	bl	c644 <AudioStream::release(audio_block_struct*)>
    cab6:	movs	r3, #0
    cab8:	str	r3, [r4, #0]
		if (right_1st) { release(right_1st); right_1st = NULL; }
    caba:	ldr	r4, [pc, #140]	; (cb48 <AudioOutputUSB::update()+0x114>)
    cabc:	ldr	r0, [r4, #0]
    cabe:	cbz	r0, cac8 <AudioOutputUSB::update()+0x94>
    cac0:	bl	c644 <AudioStream::release(audio_block_struct*)>
    cac4:	movs	r3, #0
    cac6:	str	r3, [r4, #0]
		if (right_2nd) { release(right_2nd); right_2nd = NULL; }
    cac8:	ldr	r4, [pc, #120]	; (cb44 <AudioOutputUSB::update()+0x110>)
    caca:	ldr	r0, [r4, #0]
    cacc:	cbz	r0, cad6 <AudioOutputUSB::update()+0xa2>
    cace:	bl	c644 <AudioStream::release(audio_block_struct*)>
    cad2:	movs	r3, #0
    cad4:	str	r3, [r4, #0]
		offset_1st = 0;
    cad6:	ldr	r3, [pc, #116]	; (cb4c <AudioOutputUSB::update()+0x118>)
    cad8:	movs	r2, #0
    cada:	strh	r2, [r3, #0]
}
    cadc:	pop	{r3, r4, r5, pc}
		left_1st = left;
    cade:	str	r4, [r3, #0]
		right_1st = right;
    cae0:	ldr	r2, [pc, #100]	; (cb48 <AudioOutputUSB::update()+0x114>)
		offset_1st = 0;
    cae2:	ldr	r3, [pc, #104]	; (cb4c <AudioOutputUSB::update()+0x118>)
		right_1st = right;
    cae4:	str	r5, [r2, #0]
		offset_1st = 0;
    cae6:	strh	r0, [r3, #0]
    cae8:	b.n	ca8a <AudioOutputUSB::update()+0x56>
		left = allocate();
    caea:	bl	c598 <AudioStream::allocate()>
		if (left == NULL) {
    caee:	mov	r4, r0
    caf0:	cbz	r0, cb20 <AudioOutputUSB::update()+0xec>
		memset(left->data, 0, sizeof(left->data));
    caf2:	mov.w	r2, #256	; 0x100
    caf6:	movs	r1, #0
    caf8:	adds	r0, #4
    cafa:	bl	e064 <memset>
	if (right == NULL) {
    cafe:	cmp	r5, #0
    cb00:	bne.n	ca58 <AudioOutputUSB::update()+0x24>
		right = allocate();
    cb02:	bl	c598 <AudioStream::allocate()>
		if (right == NULL) {
    cb06:	mov	r5, r0
    cb08:	cbz	r0, cb2e <AudioOutputUSB::update()+0xfa>
		memset(right->data, 0, sizeof(right->data));
    cb0a:	mov.w	r2, #256	; 0x100
    cb0e:	movs	r1, #0
    cb10:	adds	r0, #4
    cb12:	bl	e064 <memset>
    cb16:	b.n	ca58 <AudioOutputUSB::update()+0x24>
		right_2nd = right;
    cb18:	ldr	r3, [pc, #40]	; (cb44 <AudioOutputUSB::update()+0x110>)
		left_2nd = left;
    cb1a:	str	r4, [r2, #0]
		right_2nd = right;
    cb1c:	str	r5, [r3, #0]
    cb1e:	b.n	ca8a <AudioOutputUSB::update()+0x56>
			if (right) release(right);
    cb20:	cmp	r5, #0
    cb22:	beq.n	ca8c <AudioOutputUSB::update()+0x58>
    cb24:	mov	r0, r5
}
    cb26:	ldmia.w	sp!, {r3, r4, r5, lr}
			if (right) release(right);
    cb2a:	b.w	c644 <AudioStream::release(audio_block_struct*)>
			release(left);
    cb2e:	mov	r0, r4
}
    cb30:	ldmia.w	sp!, {r3, r4, r5, lr}
			release(left);
    cb34:	b.w	c644 <AudioStream::release(audio_block_struct*)>
    cb38:	.word	0x20007b73
    cb3c:	.word	0x200064f4
    cb40:	.word	0x200064f8
    cb44:	.word	0x20006500
    cb48:	.word	0x200064fc
    cb4c:	.word	0x20007b40

0000cb50 <usb_audio_receive_callback>:
{
    cb50:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	AudioInputUSB::receive_flag = 1;
    cb54:	movs	r2, #1
    cb56:	ldr	r3, [pc, #296]	; (cc80 <usb_audio_receive_callback+0x130>)
	left = AudioInputUSB::incoming_left;
    cb58:	ldr.w	sl, [pc, #312]	; cc94 <usb_audio_receive_callback+0x144>
	len >>= 2; // 1 sample = 4 bytes: 2 left, 2 right
    cb5c:	lsrs	r6, r0, #2
	AudioInputUSB::receive_flag = 1;
    cb5e:	strb	r2, [r3, #0]
	count = AudioInputUSB::incoming_count;
    cb60:	ldr	r3, [pc, #288]	; (cc84 <usb_audio_receive_callback+0x134>)
	left = AudioInputUSB::incoming_left;
    cb62:	ldr.w	r4, [sl]
	count = AudioInputUSB::incoming_count;
    cb66:	ldrh	r7, [r3, #0]
	right = AudioInputUSB::incoming_right;
    cb68:	ldr	r3, [pc, #284]	; (cc88 <usb_audio_receive_callback+0x138>)
	count = AudioInputUSB::incoming_count;
    cb6a:	mov	r9, r7
	right = AudioInputUSB::incoming_right;
    cb6c:	ldr	r5, [r3, #0]
	if (left == NULL) {
    cb6e:	cmp	r4, #0
    cb70:	beq.n	cc08 <usb_audio_receive_callback+0xb8>
	if (right == NULL) {
    cb72:	cmp	r5, #0
    cb74:	beq.n	cc1a <usb_audio_receive_callback+0xca>
	while (len > 0) {
    cb76:	cmp	r6, #0
    cb78:	beq.n	cc2c <usb_audio_receive_callback+0xdc>
		avail = AUDIO_BLOCK_SAMPLES - count;
    cb7a:	rsb	r3, r7, #128	; 0x80
		if (len < avail) {
    cb7e:	cmp	r6, r3
    cb80:	bcc.n	cc78 <usb_audio_receive_callback+0x128>
    cb82:	ldr.w	fp, [pc, #276]	; cc98 <usb_audio_receive_callback+0x148>
    cb86:	ldr	r7, [pc, #260]	; (cc8c <usb_audio_receive_callback+0x13c>)
			if (AudioInputUSB::ready_left || AudioInputUSB::ready_right) return;
    cb88:	ldr.w	r8, [pc, #272]	; cc9c <usb_audio_receive_callback+0x14c>
		} else if (avail > 0) {
    cb8c:	cbnz	r3, cbce <usb_audio_receive_callback+0x7e>
			if (AudioInputUSB::ready_left || AudioInputUSB::ready_right) return;
    cb8e:	ldr	r3, [r7, #0]
    cb90:	cmp	r3, #0
    cb92:	bne.n	cc04 <usb_audio_receive_callback+0xb4>
    cb94:	ldr.w	r3, [r8]
    cb98:	cmp	r3, #0
    cb9a:	bne.n	cc04 <usb_audio_receive_callback+0xb4>
			AudioInputUSB::ready_left = left;
    cb9c:	str	r4, [r7, #0]
			AudioInputUSB::ready_right = right;
    cb9e:	str.w	r5, [r8]
			left = AudioStream::allocate();
    cba2:	bl	c598 <AudioStream::allocate()>
			if (left == NULL) {
    cba6:	mov	r4, r0
    cba8:	cmp	r0, #0
    cbaa:	beq.n	cc34 <usb_audio_receive_callback+0xe4>
			right = AudioStream::allocate();
    cbac:	bl	c598 <AudioStream::allocate()>
			if (right == NULL) {
    cbb0:	mov	r5, r0
    cbb2:	cmp	r0, #0
    cbb4:	beq.n	cc44 <usb_audio_receive_callback+0xf4>
			AudioInputUSB::incoming_right = right;
    cbb6:	ldr	r3, [pc, #208]	; (cc88 <usb_audio_receive_callback+0x138>)
			AudioInputUSB::incoming_left = left;
    cbb8:	str.w	r4, [sl]
			AudioInputUSB::incoming_right = right;
    cbbc:	str	r0, [r3, #0]
	while (len > 0) {
    cbbe:	cmp	r6, #0
    cbc0:	beq.n	cc2a <usb_audio_receive_callback+0xda>
		if (len < avail) {
    cbc2:	cmp	r6, #127	; 0x7f
			count = 0;
    cbc4:	mov.w	r9, #0
		avail = AUDIO_BLOCK_SAMPLES - count;
    cbc8:	mov.w	r3, #128	; 0x80
		if (len < avail) {
    cbcc:	bls.n	cc5a <usb_audio_receive_callback+0x10a>
			copy_to_buffers(data, left->data + count, right->data + count, avail);
    cbce:	adds	r2, r5, #4
    cbd0:	adds	r1, r4, #4
    cbd2:	mov	r0, fp
    cbd4:	add	r6, r9
    cbd6:	add.w	r2, r2, r9, lsl #1
    cbda:	add.w	r1, r1, r9, lsl #1
			len -= avail;
    cbde:	subs	r6, #128	; 0x80
			data += avail;
    cbe0:	add.w	fp, fp, r3, lsl #2
			copy_to_buffers(data, left->data + count, right->data + count, avail);
    cbe4:	bl	c940 <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)>
			if (AudioInputUSB::ready_left || AudioInputUSB::ready_right) {
    cbe8:	ldr	r3, [r7, #0]
    cbea:	cbnz	r3, cbf4 <usb_audio_receive_callback+0xa4>
    cbec:	ldr.w	r3, [r8]
    cbf0:	cmp	r3, #0
    cbf2:	beq.n	cb9c <usb_audio_receive_callback+0x4c>
				AudioInputUSB::incoming_count = count + avail;
    cbf4:	movs	r3, #128	; 0x80
    cbf6:	ldr	r2, [pc, #140]	; (cc84 <usb_audio_receive_callback+0x134>)
    cbf8:	strh	r3, [r2, #0]
				if (len > 0) {
    cbfa:	cbz	r6, cc04 <usb_audio_receive_callback+0xb4>
					usb_audio_overrun_count++;
    cbfc:	ldr	r2, [pc, #144]	; (cc90 <usb_audio_receive_callback+0x140>)
    cbfe:	ldr	r3, [r2, #0]
    cc00:	adds	r3, #1
    cc02:	str	r3, [r2, #0]
}
    cc04:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		left = AudioStream::allocate();
    cc08:	bl	c598 <AudioStream::allocate()>
		if (left == NULL) return;
    cc0c:	mov	r4, r0
    cc0e:	cmp	r0, #0
    cc10:	beq.n	cc04 <usb_audio_receive_callback+0xb4>
		AudioInputUSB::incoming_left = left;
    cc12:	str.w	r0, [sl]
	if (right == NULL) {
    cc16:	cmp	r5, #0
    cc18:	bne.n	cb76 <usb_audio_receive_callback+0x26>
		right = AudioStream::allocate();
    cc1a:	bl	c598 <AudioStream::allocate()>
		if (right == NULL) return;
    cc1e:	mov	r5, r0
    cc20:	cmp	r0, #0
    cc22:	beq.n	cc04 <usb_audio_receive_callback+0xb4>
		AudioInputUSB::incoming_right = right;
    cc24:	ldr	r3, [pc, #96]	; (cc88 <usb_audio_receive_callback+0x138>)
    cc26:	str	r0, [r3, #0]
    cc28:	b.n	cb76 <usb_audio_receive_callback+0x26>
    cc2a:	mov	r7, r6
	AudioInputUSB::incoming_count = count;
    cc2c:	ldr	r3, [pc, #84]	; (cc84 <usb_audio_receive_callback+0x134>)
    cc2e:	strh	r7, [r3, #0]
}
    cc30:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				AudioInputUSB::incoming_right = NULL;
    cc34:	ldr	r3, [pc, #80]	; (cc88 <usb_audio_receive_callback+0x138>)
				AudioInputUSB::incoming_left = NULL;
    cc36:	str.w	r0, [sl]
				AudioInputUSB::incoming_right = NULL;
    cc3a:	str	r0, [r3, #0]
				AudioInputUSB::incoming_count = 0;
    cc3c:	ldr	r3, [pc, #68]	; (cc84 <usb_audio_receive_callback+0x134>)
    cc3e:	strh	r0, [r3, #0]
}
    cc40:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				AudioStream::release(left);
    cc44:	mov	r0, r4
    cc46:	bl	c644 <AudioStream::release(audio_block_struct*)>
				AudioInputUSB::incoming_right = NULL;
    cc4a:	ldr	r3, [pc, #60]	; (cc88 <usb_audio_receive_callback+0x138>)
				AudioInputUSB::incoming_left = NULL;
    cc4c:	str.w	r5, [sl]
				AudioInputUSB::incoming_right = NULL;
    cc50:	str	r5, [r3, #0]
				AudioInputUSB::incoming_count = 0;
    cc52:	ldr	r3, [pc, #48]	; (cc84 <usb_audio_receive_callback+0x134>)
    cc54:	strh	r5, [r3, #0]
}
    cc56:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cc5a:	mov	r7, r9
    cc5c:	mov	r3, r9
			copy_to_buffers(data, left->data + count, right->data + count, len);
    cc5e:	adds	r2, r5, #4
    cc60:	adds	r1, r4, #4
    cc62:	mov	r0, fp
			AudioInputUSB::incoming_count = count + len;
    cc64:	add	r7, r6
			copy_to_buffers(data, left->data + count, right->data + count, len);
    cc66:	add	r2, r3
    cc68:	add	r1, r3
    cc6a:	mov	r3, r6
    cc6c:	bl	c940 <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)>
			AudioInputUSB::incoming_count = count + len;
    cc70:	ldr	r3, [pc, #16]	; (cc84 <usb_audio_receive_callback+0x134>)
    cc72:	strh	r7, [r3, #0]
}
    cc74:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			copy_to_buffers(data, left->data + count, right->data + count, len);
    cc78:	lsls	r3, r7, #1
    cc7a:	ldr.w	fp, [pc, #28]	; cc98 <usb_audio_receive_callback+0x148>
    cc7e:	b.n	cc5e <usb_audio_receive_callback+0x10e>
    cc80:	.word	0x20007b5c
    cc84:	.word	0x20007b3e
    cc88:	.word	0x200064b0
    cc8c:	.word	0x200064a4
    cc90:	.word	0x20007b18
    cc94:	.word	0x200064ac
    cc98:	.word	0x20205280
    cc9c:	.word	0x200064a8

0000cca0 <rx_event(transfer_struct*)>:
{
    cca0:	push	{r3, lr}
	if (t) {
    cca2:	cbz	r0, ccb4 <rx_event(transfer_struct*)+0x14>
		int len = AUDIO_RX_SIZE - ((rx_transfer.status >> 16) & 0x7FFF);
    cca4:	ldr	r3, [pc, #68]	; (ccec <rx_event(transfer_struct*)+0x4c>)
    cca6:	ldr	r0, [r3, #4]
    cca8:	ubfx	r0, r0, #16, #15
		usb_audio_receive_callback(len);
    ccac:	rsb	r0, r0, #180	; 0xb4
    ccb0:	bl	cb50 <usb_audio_receive_callback>
	usb_prepare_transfer(&rx_transfer, rx_buffer, AUDIO_RX_SIZE, 0);
    ccb4:	movs	r3, #0
    ccb6:	movs	r2, #180	; 0xb4
    ccb8:	ldr	r1, [pc, #52]	; (ccf0 <rx_event(transfer_struct*)+0x50>)
    ccba:	ldr	r0, [pc, #48]	; (ccec <rx_event(transfer_struct*)+0x4c>)
    ccbc:	bl	b74c <usb_prepare_transfer>
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    ccc0:	ldr	r3, [pc, #44]	; (ccf0 <rx_event(transfer_struct*)+0x50>)
	uint32_t end_addr = (uint32_t)addr + size;
    ccc2:	add.w	r1, r3, #180	; 0xb4
	asm("dsb");
    ccc6:	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    ccca:	mov.w	r2, #3758153728	; 0xe000e000
    ccce:	str.w	r3, [r2, #3932]	; 0xf5c
		location += 32;
    ccd2:	adds	r3, #32
	} while (location < end_addr);
    ccd4:	cmp	r1, r3
    ccd6:	bhi.n	ccce <rx_event(transfer_struct*)+0x2e>
	asm("dsb");
    ccd8:	dsb	sy
	asm("isb");
    ccdc:	isb	sy
	usb_receive(AUDIO_RX_ENDPOINT, &rx_transfer);
    cce0:	ldr	r1, [pc, #8]	; (ccec <rx_event(transfer_struct*)+0x4c>)
    cce2:	movs	r0, #5
}
    cce4:	ldmia.w	sp!, {r3, lr}
	usb_receive(AUDIO_RX_ENDPOINT, &rx_transfer);
    cce8:	b.w	b7a4 <usb_receive>
    ccec:	.word	0x200030e0
    ccf0:	.word	0x20205280

0000ccf4 <AudioOutputUSB::begin()>:
	update_responsibility = false;
    ccf4:	movs	r3, #0
    ccf6:	ldr	r0, [pc, #12]	; (cd04 <AudioOutputUSB::begin()+0x10>)
	left_1st = NULL;
    ccf8:	ldr	r1, [pc, #12]	; (cd08 <AudioOutputUSB::begin()+0x14>)
	right_1st = NULL;
    ccfa:	ldr	r2, [pc, #16]	; (cd0c <AudioOutputUSB::begin()+0x18>)
	update_responsibility = false;
    ccfc:	strb	r3, [r0, #0]
	left_1st = NULL;
    ccfe:	str	r3, [r1, #0]
	right_1st = NULL;
    cd00:	str	r3, [r2, #0]
}
    cd02:	bx	lr
    cd04:	.word	0x20007b5d
    cd08:	.word	0x200064f4
    cd0c:	.word	0x200064fc

0000cd10 <usb_audio_transmit_callback>:
{
	static uint32_t count=5;
	uint32_t avail, num, target, offset, len=0;
	audio_block_t *left, *right;

	if (++count < 10) {   // TODO: dynamic adjust to match USB rate
    cd10:	ldr	r2, [pc, #228]	; (cdf8 <usb_audio_transmit_callback+0xe8>)
{
    cd12:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (++count < 10) {   // TODO: dynamic adjust to match USB rate
    cd16:	ldr	r3, [r2, #0]
    cd18:	adds	r3, #1
    cd1a:	cmp	r3, #9
{
    cd1c:	vpush	{d8}
	if (++count < 10) {   // TODO: dynamic adjust to match USB rate
    cd20:	bls.n	cdce <usb_audio_transmit_callback+0xbe>
		target = 44;
	} else {
		count = 0;
    cd22:	movs	r1, #180	; 0xb4
    cd24:	movs	r3, #0
		target = 45;
    cd26:	mov.w	r9, #45	; 0x2d
		count = 0;
    cd2a:	vmov	s16, r1
    cd2e:	str	r3, [r2, #0]
{
    cd30:	movs	r7, #0
    cd32:	ldr.w	fp, [pc, #216]	; ce0c <usb_audio_transmit_callback+0xfc>
			memset(usb_audio_transmit_buffer + len, 0, num * 4);
			//serial_print("%");
			break;
		}
		right = AudioOutputUSB::right_1st;
		offset = AudioOutputUSB::offset_1st;
    cd36:	ldr.w	sl, [pc, #216]	; ce10 <usb_audio_transmit_callback+0x100>
		left = AudioOutputUSB::left_1st;
    cd3a:	ldr.w	r0, [fp]
		num = target - len;
    cd3e:	sub.w	r2, r9, r7
		if (left == NULL) {
    cd42:	cmp	r0, #0
    cd44:	beq.n	cddc <usb_audio_transmit_callback+0xcc>
		offset = AudioOutputUSB::offset_1st;
    cd46:	ldrh.w	ip, [sl]

		avail = AUDIO_BLOCK_SAMPLES - offset;
		if (num > avail) num = avail;

		copy_from_buffers((uint32_t *)usb_audio_transmit_buffer + len,
			left->data + offset, right->data + offset, num);
    cd4a:	adds	r5, r0, #4
		right = AudioOutputUSB::right_1st;
    cd4c:	ldr	r3, [pc, #172]	; (cdfc <usb_audio_transmit_callback+0xec>)
		copy_from_buffers((uint32_t *)usb_audio_transmit_buffer + len,
    cd4e:	add.w	r5, r5, ip, lsl #1
		right = AudioOutputUSB::right_1st;
    cd52:	ldr.w	r8, [r3]
		avail = AUDIO_BLOCK_SAMPLES - offset;
    cd56:	rsb	r3, ip, #128	; 0x80
    cd5a:	cmp	r2, r3
			left->data + offset, right->data + offset, num);
    cd5c:	add.w	r4, r8, #4
    cd60:	it	cs
    cd62:	movcs	r2, r3
		copy_from_buffers((uint32_t *)usb_audio_transmit_buffer + len,
    cd64:	ldr	r3, [pc, #152]	; (ce00 <usb_audio_transmit_callback+0xf0>)
    cd66:	add.w	r4, r4, ip, lsl #1
    cd6a:	add.w	r6, r3, r7, lsl #2
	while (len > 0) {
    cd6e:	cbz	r2, cd88 <usb_audio_transmit_callback+0x78>
    cd70:	mov	r1, r2
		*dst++ = (*right++ << 16) | (*left++ & 0xFFFF);
    cd72:	ldrsh.w	r3, [r5], #2
	while (len > 0) {
    cd76:	subs	r1, #1
		*dst++ = (*right++ << 16) | (*left++ & 0xFFFF);
    cd78:	ldrsh.w	lr, [r4], #2
    cd7c:	uxth	r3, r3
    cd7e:	orr.w	r3, r3, lr, lsl #16
    cd82:	str.w	r3, [r6], #4
	while (len > 0) {
    cd86:	bne.n	cd72 <usb_audio_transmit_callback+0x62>
		len += num;
		offset += num;
    cd88:	add	ip, r2
		len += num;
    cd8a:	add	r7, r2
		if (offset >= AUDIO_BLOCK_SAMPLES) {
    cd8c:	cmp.w	ip, #127	; 0x7f
    cd90:	bhi.n	cdaa <usb_audio_transmit_callback+0x9a>
			AudioOutputUSB::left_2nd = NULL;
			AudioOutputUSB::right_1st = AudioOutputUSB::right_2nd;
			AudioOutputUSB::right_2nd = NULL;
			AudioOutputUSB::offset_1st = 0;
		} else {
			AudioOutputUSB::offset_1st = offset;
    cd92:	uxth.w	ip, ip
	while (len < target) {
    cd96:	cmp	r7, r9
			AudioOutputUSB::offset_1st = offset;
    cd98:	strh.w	ip, [sl]
	while (len < target) {
    cd9c:	bcc.n	cd3a <usb_audio_transmit_callback+0x2a>
		}
	}
	return target * 4;
}
    cd9e:	vmov	r0, s16
    cda2:	vpop	{d8}
    cda6:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			AudioStream::release(left);
    cdaa:	bl	c644 <AudioStream::release(audio_block_struct*)>
			AudioStream::release(right);
    cdae:	mov	r0, r8
    cdb0:	bl	c644 <AudioStream::release(audio_block_struct*)>
			AudioOutputUSB::left_1st = AudioOutputUSB::left_2nd;
    cdb4:	ldr	r0, [pc, #76]	; (ce04 <usb_audio_transmit_callback+0xf4>)
			AudioOutputUSB::right_1st = AudioOutputUSB::right_2nd;
    cdb6:	ldr	r3, [pc, #80]	; (ce08 <usb_audio_transmit_callback+0xf8>)
			AudioOutputUSB::left_2nd = NULL;
    cdb8:	movs	r2, #0
			AudioOutputUSB::left_1st = AudioOutputUSB::left_2nd;
    cdba:	ldr	r1, [r0, #0]
    cdbc:	mov	ip, r2
			AudioOutputUSB::left_2nd = NULL;
    cdbe:	str	r2, [r0, #0]
			AudioOutputUSB::left_1st = AudioOutputUSB::left_2nd;
    cdc0:	str.w	r1, [fp]
			AudioOutputUSB::right_1st = AudioOutputUSB::right_2nd;
    cdc4:	ldr	r1, [r3, #0]
			AudioOutputUSB::right_2nd = NULL;
    cdc6:	str	r2, [r3, #0]
			AudioOutputUSB::right_1st = AudioOutputUSB::right_2nd;
    cdc8:	ldr	r3, [pc, #48]	; (cdfc <usb_audio_transmit_callback+0xec>)
    cdca:	str	r1, [r3, #0]
			AudioOutputUSB::offset_1st = 0;
    cdcc:	b.n	cd96 <usb_audio_transmit_callback+0x86>
	if (++count < 10) {   // TODO: dynamic adjust to match USB rate
    cdce:	movs	r1, #176	; 0xb0
		target = 44;
    cdd0:	mov.w	r9, #44	; 0x2c
	if (++count < 10) {   // TODO: dynamic adjust to match USB rate
    cdd4:	str	r3, [r2, #0]
    cdd6:	vmov	s16, r1
    cdda:	b.n	cd30 <usb_audio_transmit_callback+0x20>
			memset(usb_audio_transmit_buffer + len, 0, num * 4);
    cddc:	ldr	r3, [pc, #32]	; (ce00 <usb_audio_transmit_callback+0xf0>)
    cdde:	mov	r1, r0
    cde0:	lsls	r2, r2, #2
    cde2:	add.w	r0, r3, r7, lsl #1
    cde6:	bl	e064 <memset>
}
    cdea:	vmov	r0, s16
    cdee:	vpop	{d8}
    cdf2:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cdf6:	nop
    cdf8:	.word	0x20001478
    cdfc:	.word	0x200064fc
    ce00:	.word	0x20005240
    ce04:	.word	0x200064f8
    ce08:	.word	0x20006500
    ce0c:	.word	0x200064f4
    ce10:	.word	0x20007b40

0000ce14 <tx_event(transfer_struct*)>:
{
    ce14:	push	{r3, r4, r5, lr}
	int len = usb_audio_transmit_callback();
    ce16:	bl	cd10 <usb_audio_transmit_callback>
	usb_audio_sync_feedback = feedback_accumulator >> usb_audio_sync_rshift;
    ce1a:	ldr	r2, [pc, #68]	; (ce60 <tx_event(transfer_struct*)+0x4c>)
    ce1c:	ldr	r3, [pc, #68]	; (ce64 <tx_event(transfer_struct*)+0x50>)
	int len = usb_audio_transmit_callback();
    ce1e:	mov	r5, r0
	usb_audio_sync_feedback = feedback_accumulator >> usb_audio_sync_rshift;
    ce20:	ldr	r2, [r2, #0]
    ce22:	ldrb	r3, [r3, #0]
	usb_prepare_transfer(&tx_transfer, usb_audio_transmit_buffer, len, 0);
    ce24:	ldr	r4, [pc, #64]	; (ce68 <tx_event(transfer_struct*)+0x54>)
	usb_audio_sync_feedback = feedback_accumulator >> usb_audio_sync_rshift;
    ce26:	lsrs	r2, r3
    ce28:	ldr	r1, [pc, #64]	; (ce6c <tx_event(transfer_struct*)+0x58>)
	usb_prepare_transfer(&tx_transfer, usb_audio_transmit_buffer, len, 0);
    ce2a:	movs	r3, #0
	usb_audio_sync_feedback = feedback_accumulator >> usb_audio_sync_rshift;
    ce2c:	str	r2, [r1, #0]
	usb_prepare_transfer(&tx_transfer, usb_audio_transmit_buffer, len, 0);
    ce2e:	mov	r2, r0
    ce30:	mov	r1, r4
    ce32:	ldr	r0, [pc, #60]	; (ce70 <tx_event(transfer_struct*)+0x5c>)
    ce34:	bl	b74c <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    ce38:	adds	r0, r4, r5
	asm("dsb");
    ce3a:	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    ce3e:	mov.w	r3, #3758153728	; 0xe000e000
    ce42:	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    ce46:	adds	r4, #32
	} while (location < end_addr);
    ce48:	cmp	r0, r4
    ce4a:	bhi.n	ce42 <tx_event(transfer_struct*)+0x2e>
	asm("dsb");
    ce4c:	dsb	sy
	asm("isb");
    ce50:	isb	sy
	usb_transmit(AUDIO_TX_ENDPOINT, &tx_transfer);
    ce54:	ldr	r1, [pc, #24]	; (ce70 <tx_event(transfer_struct*)+0x5c>)
    ce56:	movs	r0, #5
}
    ce58:	ldmia.w	sp!, {r3, r4, r5, lr}
	usb_transmit(AUDIO_TX_ENDPOINT, &tx_transfer);
    ce5c:	b.w	b77c <usb_transmit>
    ce60:	.word	0x200073b0
    ce64:	.word	0x20007b72
    ce68:	.word	0x20005240
    ce6c:	.word	0x20205260
    ce70:	.word	0x20003220

0000ce74 <usb_audio_configure>:
{
    ce74:	push	{r3, r4, r5, lr}
	usb_audio_overrun_count = 0;
    ce76:	ldr	r1, [pc, #172]	; (cf24 <usb_audio_configure+0xb0>)
	usb_audio_underrun_count = 0;
    ce78:	movs	r4, #0
    ce7a:	ldr	r3, [pc, #172]	; (cf28 <usb_audio_configure+0xb4>)
	if (usb_high_speed) {
    ce7c:	ldr	r2, [pc, #172]	; (cf2c <usb_audio_configure+0xb8>)
	usb_audio_underrun_count = 0;
    ce7e:	str	r4, [r3, #0]
	usb_audio_overrun_count = 0;
    ce80:	str	r4, [r1, #0]
	if (usb_high_speed) {
    ce82:	ldrb	r1, [r2, #0]
	feedback_accumulator = 739875226; // 44.1 * 2^24
    ce84:	ldr	r3, [pc, #168]	; (cf30 <usb_audio_configure+0xbc>)
	if (usb_high_speed) {
    ce86:	cmp	r1, r4
	feedback_accumulator = 739875226; // 44.1 * 2^24
    ce88:	ldr	r2, [pc, #168]	; (cf34 <usb_audio_configure+0xc0>)
		usb_audio_sync_nbytes = 4;
    ce8a:	ldr	r5, [pc, #172]	; (cf38 <usb_audio_configure+0xc4>)
	memset(&rx_transfer, 0, sizeof(rx_transfer));
    ce8c:	mov	r1, r4
	feedback_accumulator = 739875226; // 44.1 * 2^24
    ce8e:	str	r2, [r3, #0]
	if (usb_high_speed) {
    ce90:	itete	eq
    ce92:	moveq	r3, #3
    ce94:	movne	r3, #4
    ce96:	moveq	r0, #10
    ce98:	movne	r0, #8
	memset(&rx_transfer, 0, sizeof(rx_transfer));
    ce9a:	movs	r2, #32
		usb_audio_sync_nbytes = 4;
    ce9c:	strb	r3, [r5, #0]
		usb_audio_sync_rshift = 8;
    ce9e:	ldr	r3, [pc, #156]	; (cf3c <usb_audio_configure+0xc8>)
    cea0:	strb	r0, [r3, #0]
	memset(&rx_transfer, 0, sizeof(rx_transfer));
    cea2:	ldr	r0, [pc, #156]	; (cf40 <usb_audio_configure+0xcc>)
    cea4:	bl	e064 <memset>
	usb_config_rx_iso(AUDIO_RX_ENDPOINT, AUDIO_RX_SIZE, 1, rx_event);
    cea8:	movs	r2, #1
    ceaa:	movs	r1, #180	; 0xb4
    ceac:	movs	r0, #5
    ceae:	ldr	r3, [pc, #148]	; (cf44 <usb_audio_configure+0xd0>)
    ceb0:	bl	b67c <usb_config_rx_iso>
	usb_prepare_transfer(&rx_transfer, rx_buffer, AUDIO_RX_SIZE, 0);
    ceb4:	mov	r3, r4
    ceb6:	movs	r2, #180	; 0xb4
    ceb8:	ldr	r1, [pc, #140]	; (cf48 <usb_audio_configure+0xd4>)
    ceba:	ldr	r0, [pc, #132]	; (cf40 <usb_audio_configure+0xcc>)
    cebc:	bl	b74c <usb_prepare_transfer>
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    cec0:	ldr	r3, [pc, #132]	; (cf48 <usb_audio_configure+0xd4>)
	uint32_t end_addr = (uint32_t)addr + size;
    cec2:	add.w	r1, r3, #180	; 0xb4
	asm("dsb");
    cec6:	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    ceca:	mov.w	r2, #3758153728	; 0xe000e000
    cece:	str.w	r3, [r2, #3932]	; 0xf5c
		location += 32;
    ced2:	adds	r3, #32
	} while (location < end_addr);
    ced4:	cmp	r1, r3
    ced6:	bhi.n	cece <usb_audio_configure+0x5a>
	asm("dsb");
    ced8:	dsb	sy
	asm("isb");
    cedc:	isb	sy
	usb_receive(AUDIO_RX_ENDPOINT, &rx_transfer);
    cee0:	ldr	r1, [pc, #92]	; (cf40 <usb_audio_configure+0xcc>)
    cee2:	movs	r0, #5
    cee4:	bl	b7a4 <usb_receive>
	memset(&sync_transfer, 0, sizeof(sync_transfer));
    cee8:	movs	r2, #32
    ceea:	movs	r1, #0
    ceec:	ldr	r0, [pc, #92]	; (cf4c <usb_audio_configure+0xd8>)
    ceee:	bl	e064 <memset>
	usb_config_tx_iso(AUDIO_SYNC_ENDPOINT, usb_audio_sync_nbytes, 1, sync_event);
    cef2:	ldr	r3, [pc, #92]	; (cf50 <usb_audio_configure+0xdc>)
    cef4:	ldrb	r1, [r5, #0]
    cef6:	movs	r2, #1
    cef8:	movs	r0, #6
    cefa:	bl	b6e0 <usb_config_tx_iso>
	sync_event(NULL);
    cefe:	movs	r0, #0
    cf00:	bl	c9d8 <sync_event(transfer_struct*)>
	memset(&tx_transfer, 0, sizeof(tx_transfer));
    cf04:	movs	r2, #32
    cf06:	movs	r1, #0
    cf08:	ldr	r0, [pc, #72]	; (cf54 <usb_audio_configure+0xe0>)
    cf0a:	bl	e064 <memset>
	usb_config_tx_iso(AUDIO_TX_ENDPOINT, AUDIO_TX_SIZE, 1, tx_event);
    cf0e:	movs	r0, #5
    cf10:	ldr	r3, [pc, #68]	; (cf58 <usb_audio_configure+0xe4>)
    cf12:	movs	r2, #1
    cf14:	movs	r1, #180	; 0xb4
    cf16:	bl	b6e0 <usb_config_tx_iso>
	tx_event(NULL);
    cf1a:	movs	r0, #0
}
    cf1c:	ldmia.w	sp!, {r3, r4, r5, lr}
	tx_event(NULL);
    cf20:	b.w	ce14 <tx_event(transfer_struct*)>
    cf24:	.word	0x20007b18
    cf28:	.word	0x20007b1c
    cf2c:	.word	0x20007b76
    cf30:	.word	0x200073b0
    cf34:	.word	0x2c19999a
    cf38:	.word	0x20007b71
    cf3c:	.word	0x20007b72
    cf40:	.word	0x200030e0
    cf44:	.word	0x0000cca1
    cf48:	.word	0x20205280
    cf4c:	.word	0x20003100
    cf50:	.word	0x0000c9d9
    cf54:	.word	0x20003220
    cf58:	.word	0x0000ce15

0000cf5c <usb_audio_get_feature>:
};

int usb_audio_get_feature(void *stp, uint8_t *data, uint32_t *datalen)
{
	struct setup_struct setup = *((struct setup_struct *)stp);
	if (setup.bmRequestType==0xA1) { // should check bRequest, bChannel, and UnitID
    cf5c:	ldrb	r3, [r0, #0]
    cf5e:	cmp	r3, #161	; 0xa1
    cf60:	beq.n	cf66 <usb_audio_get_feature+0xa>
			if (setup.bCS==0x01) { // mute
				data[0] = AudioInputUSB::features.mute;  // 1=mute, 0=unmute
				*datalen = 1;
				return 1;
			}
			else if (setup.bCS==0x02) { // volume
    cf62:	movs	r0, #0
				*datalen = 2;
				return 1;
			}
	}
	return 0;
}
    cf64:	bx	lr
	struct setup_struct setup = *((struct setup_struct *)stp);
    cf66:	ldrb	r3, [r0, #3]
    cf68:	ldrb	r0, [r0, #1]
			if (setup.bCS==0x01) { // mute
    cf6a:	cmp	r3, #1
    cf6c:	beq.n	cf80 <usb_audio_get_feature+0x24>
			else if (setup.bCS==0x02) { // volume
    cf6e:	cmp	r3, #2
    cf70:	bne.n	cf62 <usb_audio_get_feature+0x6>
				if (setup.bRequest==0x81) { // GET_CURR
    cf72:	subs	r0, #129	; 0x81
    cf74:	cmp	r0, #3
    cf76:	bhi.n	cf62 <usb_audio_get_feature+0x6>
    cf78:	tbb	[pc, r0]
    cf7c:	.word	0x0b13171b
{
    cf80:	push	{r4}
				data[0] = AudioInputUSB::features.mute;  // 1=mute, 0=unmute
    cf82:	ldr	r4, [pc, #56]	; (cfbc <usb_audio_get_feature+0x60>)
				return 1;
    cf84:	mov	r0, r3
				data[0] = AudioInputUSB::features.mute;  // 1=mute, 0=unmute
    cf86:	ldr	r4, [r4, #4]
    cf88:	strb	r4, [r1, #0]
}
    cf8a:	ldr.w	r4, [sp], #4
				*datalen = 1;
    cf8e:	str	r3, [r2, #0]
}
    cf90:	bx	lr
					data[0] = 1; // increment vol by by 1
    cf92:	movs	r3, #1
    cf94:	movs	r0, #0
    cf96:	strb	r3, [r1, #0]
				*datalen = 2;
    cf98:	movs	r3, #2
					data[1] = (AudioInputUSB::features.volume>>8) & 0xFF;
    cf9a:	strb	r0, [r1, #1]
				return 1;
    cf9c:	movs	r0, #1
				*datalen = 2;
    cf9e:	str	r3, [r2, #0]
				return 1;
    cfa0:	bx	lr
					data[0] = FEATURE_MAX_VOLUME;  // max level, for range of 0 to MAX
    cfa2:	movs	r3, #255	; 0xff
    cfa4:	movs	r0, #0
    cfa6:	strb	r3, [r1, #0]
					data[1] = 0;
    cfa8:	b.n	cf98 <usb_audio_get_feature+0x3c>
					data[0] = 0;     // min level is 0
    cfaa:	movs	r3, #0
    cfac:	mov	r0, r3
    cfae:	strb	r3, [r1, #0]
					data[1] = 0;
    cfb0:	b.n	cf98 <usb_audio_get_feature+0x3c>
					data[0] = AudioInputUSB::features.volume & 0xFF;
    cfb2:	ldr	r3, [pc, #8]	; (cfbc <usb_audio_get_feature+0x60>)
    cfb4:	ldr	r0, [r3, #8]
    cfb6:	strb	r0, [r1, #0]
					data[1] = (AudioInputUSB::features.volume>>8) & 0xFF;
    cfb8:	ldrb	r0, [r3, #9]
    cfba:	b.n	cf98 <usb_audio_get_feature+0x3c>
    cfbc:	.word	0x20001468

0000cfc0 <usb_audio_set_feature>:

int usb_audio_set_feature(void *stp, uint8_t *buf) 
{
	struct setup_struct setup = *((struct setup_struct *)stp);
	if (setup.bmRequestType==0x21) { // should check bRequest, bChannel and UnitID
    cfc0:	ldrb	r3, [r0, #0]
    cfc2:	cmp	r3, #33	; 0x21
    cfc4:	beq.n	cfca <usb_audio_set_feature+0xa>
					AudioInputUSB::features.change = 1;
					return 1;
				}
			}
	}
	return 0;
    cfc6:	movs	r0, #0
}
    cfc8:	bx	lr
	struct setup_struct setup = *((struct setup_struct *)stp);
    cfca:	ldrb	r3, [r0, #3]
    cfcc:	ldrb	r2, [r0, #1]
			if (setup.bCS==0x01) { // mute
    cfce:	cmp	r3, #1
    cfd0:	beq.n	cfe6 <usb_audio_set_feature+0x26>
				if (setup.bRequest==0x01) { // SET_CUR
    cfd2:	cmp	r3, #2
    cfd4:	bne.n	cfc6 <usb_audio_set_feature+0x6>
    cfd6:	cmp	r2, #1
    cfd8:	bne.n	cfc6 <usb_audio_set_feature+0x6>
					AudioInputUSB::features.volume = buf[0];
    cfda:	ldr	r3, [pc, #28]	; (cff8 <usb_audio_set_feature+0x38>)
					return 1;
    cfdc:	mov	r0, r2
					AudioInputUSB::features.volume = buf[0];
    cfde:	ldrb	r1, [r1, #0]
					AudioInputUSB::features.change = 1;
    cfe0:	str	r2, [r3, #0]
					AudioInputUSB::features.volume = buf[0];
    cfe2:	str	r1, [r3, #8]
					return 1;
    cfe4:	bx	lr
				if (setup.bRequest==0x01) { // SET_CUR
    cfe6:	cmp	r2, #1
    cfe8:	bne.n	cfc6 <usb_audio_set_feature+0x6>
					AudioInputUSB::features.mute = buf[0]; // 1=mute,0=unmute
    cfea:	ldr	r3, [pc, #12]	; (cff8 <usb_audio_set_feature+0x38>)
					return 1;
    cfec:	mov	r0, r2
					AudioInputUSB::features.mute = buf[0]; // 1=mute,0=unmute
    cfee:	ldrb	r1, [r1, #0]
					AudioInputUSB::features.change = 1;
    cff0:	strd	r2, r1, [r3]
					return 1;
    cff4:	bx	lr
    cff6:	nop
    cff8:	.word	0x20001468

0000cffc <Print::write(unsigned char const*, unsigned int)>:

#include "debug/printf.h"
#undef printf

size_t Print::write(const uint8_t *buffer, size_t size)
{
    cffc:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (buffer == nullptr) return 0;
    d000:	mov	r4, r1
    d002:	cbz	r1, d03a <Print::write(unsigned char const*, unsigned int)+0x3e>
	size_t count = 0;
	while (size--) count += write(*buffer++);
    d004:	cbz	r2, d042 <Print::write(unsigned char const*, unsigned int)+0x46>
    d006:	mov	r8, r0
    d008:	adds	r6, r1, r2
	size_t count = 0;
    d00a:	movs	r5, #0
    d00c:	ldr	r7, [pc, #56]	; (d048 <Print::write(unsigned char const*, unsigned int)+0x4c>)
    d00e:	b.n	d01a <Print::write(unsigned char const*, unsigned int)+0x1e>
    d010:	bl	a810 <usb_serial_putchar>
	while (size--) count += write(*buffer++);
    d014:	cmp	r4, r6
    d016:	add	r5, r0
    d018:	beq.n	d034 <Print::write(unsigned char const*, unsigned int)+0x38>
    d01a:	ldr.w	r3, [r8]
    d01e:	ldrb.w	r0, [r4], #1
    d022:	ldr	r3, [r3, #0]
    d024:	cmp	r3, r7
    d026:	beq.n	d010 <Print::write(unsigned char const*, unsigned int)+0x14>
    d028:	mov	r1, r0
    d02a:	mov	r0, r8
    d02c:	blx	r3
    d02e:	cmp	r4, r6
    d030:	add	r5, r0
    d032:	bne.n	d01a <Print::write(unsigned char const*, unsigned int)+0x1e>
	return count;
}
    d034:	mov	r0, r5
    d036:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (buffer == nullptr) return 0;
    d03a:	mov	r5, r1
}
    d03c:	mov	r0, r5
    d03e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (buffer == nullptr) return 0;
    d042:	mov	r5, r2
    d044:	b.n	d034 <Print::write(unsigned char const*, unsigned int)+0x38>
    d046:	nop
    d048:	.word	0x0000c3b9

0000d04c <Print::println()>:
	if (n < 0) return printNumber64(-n, 10, 1);
	return printNumber64(n, 10, 0);
}

size_t Print::println(void)
{
    d04c:	push	{lr}
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    d04e:	ldr	r3, [r0, #0]
{
    d050:	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
    d052:	movw	ip, #2573	; 0xa0d
	return write(buf, 2);
    d056:	movs	r2, #2
    d058:	add	r1, sp, #4
    d05a:	ldr	r3, [r3, #4]
	uint8_t buf[2]={'\r', '\n'};
    d05c:	strh.w	ip, [sp, #4]
	return write(buf, 2);
    d060:	blx	r3
}
    d062:	add	sp, #12
    d064:	ldr.w	pc, [sp], #4

0000d068 <_write>:

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
	((class Print *)file)->write((uint8_t *)ptr, len);
    d068:	ldr	r3, [r0, #0]
{
    d06a:	push	{r4, lr}
    d06c:	mov	r4, r2
	((class Print *)file)->write((uint8_t *)ptr, len);
    d06e:	ldr	r3, [r3, #4]
    d070:	blx	r3
	return len;
}
    d072:	mov	r0, r4
    d074:	pop	{r4, pc}
    d076:	nop

0000d078 <Print::printf(char const*, ...)>:
}

int Print::printf(const char *format, ...)
{
    d078:	push	{r1, r2, r3}
    d07a:	push	{lr}
    d07c:	sub	sp, #8
    d07e:	add	r2, sp, #12
    d080:	ldr.w	r1, [r2], #4
	va_list ap;
	va_start(ap, format);
    d084:	str	r2, [sp, #4]
#ifdef __STRICT_ANSI__
	va_end(ap);
	return 0;  // TODO: make this work with -std=c++0x
#else
	int retval = vdprintf((int)this, format, ap);
    d086:	bl	de8c <vdprintf>
	va_end(ap);
	return retval;
#endif
}
    d08a:	add	sp, #8
    d08c:	ldr.w	lr, [sp], #4
    d090:	add	sp, #12
    d092:	bx	lr

0000d094 <serialEvent()>:

#include <Arduino.h>
void serialEvent() __attribute__((weak));
void serialEvent() {
}
    d094:	bx	lr
    d096:	nop

0000d098 <operator new(unsigned int)>:

#include <stdlib.h>

void * operator new(size_t size)
{
	return malloc(size);
    d098:	b.w	d230 <malloc>

0000d09c <operator delete(void*, unsigned int)>:
	free(ptr);
}

void operator delete(void * ptr, size_t size)
{
	free(ptr);
    d09c:	b.w	d240 <free>

0000d0a0 <ultoa>:


char * ultoa(unsigned long val, char *buf, int radix)
{
	unsigned digit;
	int i=0, j;
    d0a0:	add.w	ip, r1, #4294967295
{
    d0a4:	push	{r4, r5, r6, lr}
	char t;

	while (1) {
		digit = val % radix;
    d0a6:	mov	r6, ip
	int i=0, j;
    d0a8:	movs	r4, #0
    d0aa:	b.n	d0ae <ultoa+0xe>
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    d0ac:	adds	r4, #1
		digit = val % radix;
    d0ae:	udiv	r5, r0, r2
    d0b2:	mls	r3, r2, r5, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    d0b6:	cmp	r3, #9
    d0b8:	add.w	lr, r3, #55	; 0x37
    d0bc:	add.w	r3, r3, #48	; 0x30
    d0c0:	uxtb.w	lr, lr
    d0c4:	it	ls
    d0c6:	uxtbls.w	lr, r3
		if (val == 0) break;
    d0ca:	cmp	r0, r2
		val /= radix;
    d0cc:	mov	r0, r5
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    d0ce:	strb.w	lr, [r6, #1]!
		if (val == 0) break;
    d0d2:	bcs.n	d0ac <ultoa+0xc>
	}
	buf[i + 1] = 0;
    d0d4:	adds	r3, r4, #1
    d0d6:	movs	r2, #0
    d0d8:	adds	r0, r1, r3
    d0da:	strb	r2, [r1, r3]
	for (j=0; j < i; j++, i--) {
    d0dc:	cbz	r4, d0fe <ultoa+0x5e>
		t = buf[j];
    d0de:	mov	r2, ip
    d0e0:	ldrb.w	r5, [ip, #1]!
		buf[j] = buf[i];
    d0e4:	ldrb.w	r6, [r0, #-1]!
	for (j=0; j < i; j++, i--) {
    d0e8:	sub.w	r3, r1, ip
    d0ec:	adds	r2, #2
		buf[j] = buf[i];
    d0ee:	strb.w	r6, [ip]
	for (j=0; j < i; j++, i--) {
    d0f2:	subs	r3, #1
    d0f4:	subs	r2, r2, r1
		buf[i] = t;
    d0f6:	strb	r5, [r0, #0]
	for (j=0; j < i; j++, i--) {
    d0f8:	add	r3, r4
    d0fa:	cmp	r2, r3
    d0fc:	blt.n	d0de <ultoa+0x3e>
	}
	return buf;
}
    d0fe:	mov	r0, r1
    d100:	pop	{r4, r5, r6, pc}
    d102:	nop

0000d104 <pit_isr()>:

//FASTRUN
static void pit_isr()
{
    d104:	push	{r4, lr}

		}
	}
#else
	IMXRT_PIT_CHANNEL_t *channel= IMXRT_PIT_CHANNELS;
	if (funct_table[0] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[0]();}
    d106:	ldr	r4, [pc, #76]	; (d154 <pit_isr()+0x50>)
    d108:	ldr	r3, [r4, #0]
    d10a:	cbz	r3, d112 <pit_isr()+0xe>
    d10c:	ldr	r2, [pc, #72]	; (d158 <pit_isr()+0x54>)
    d10e:	ldr	r1, [r2, #12]
    d110:	cbnz	r1, d14c <pit_isr()+0x48>
	channel++;
	if (funct_table[1] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[1]();}
    d112:	ldr	r3, [r4, #4]
    d114:	cbz	r3, d11c <pit_isr()+0x18>
    d116:	ldr	r2, [pc, #64]	; (d158 <pit_isr()+0x54>)
    d118:	ldr	r1, [r2, #28]
    d11a:	cbnz	r1, d144 <pit_isr()+0x40>
	channel++;
	if (funct_table[2] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[2]();}
    d11c:	ldr	r3, [r4, #8]
    d11e:	cbz	r3, d126 <pit_isr()+0x22>
    d120:	ldr	r2, [pc, #52]	; (d158 <pit_isr()+0x54>)
    d122:	ldr	r1, [r2, #44]	; 0x2c
    d124:	cbnz	r1, d13c <pit_isr()+0x38>
	channel++;
	if (funct_table[3] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[3]();}
    d126:	ldr	r3, [r4, #12]
    d128:	cbz	r3, d13a <pit_isr()+0x36>
    d12a:	ldr	r2, [pc, #44]	; (d158 <pit_isr()+0x54>)
    d12c:	ldr	r1, [r2, #60]	; 0x3c
    d12e:	cbz	r1, d13a <pit_isr()+0x36>
    d130:	movs	r1, #1
#endif
}
    d132:	ldmia.w	sp!, {r4, lr}
	if (funct_table[3] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[3]();}
    d136:	str	r1, [r2, #60]	; 0x3c
    d138:	bx	r3
}
    d13a:	pop	{r4, pc}
	if (funct_table[2] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[2]();}
    d13c:	movs	r1, #1
    d13e:	str	r1, [r2, #44]	; 0x2c
    d140:	blx	r3
    d142:	b.n	d126 <pit_isr()+0x22>
	if (funct_table[1] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[1]();}
    d144:	movs	r1, #1
    d146:	str	r1, [r2, #28]
    d148:	blx	r3
    d14a:	b.n	d11c <pit_isr()+0x18>
	if (funct_table[0] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[0]();}
    d14c:	movs	r1, #1
    d14e:	str	r1, [r2, #12]
    d150:	blx	r3
    d152:	b.n	d112 <pit_isr()+0xe>
    d154:	.word	0x20001ec0
    d158:	.word	0x40084100

0000d15c <IntervalTimer::beginCycles(void (*)(), unsigned long)>:
	if (channel) {
    d15c:	ldr	r3, [r0, #0]
{
    d15e:	mov	ip, r0
    d160:	push	{r4}
	if (channel) {
    d162:	cbz	r3, d1c2 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0x66>
		channel->TCTRL = 0;
    d164:	movs	r0, #0
    d166:	str	r0, [r3, #8]
		channel->TFLG = 1;
    d168:	movs	r0, #1
    d16a:	str	r0, [r3, #12]
	channel->LDVAL = cycles;
    d16c:	str	r2, [r3, #0]
	int index = channel - IMXRT_PIT_CHANNELS;
    d16e:	ldr	r2, [pc, #140]	; (d1fc <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xa0>)
	funct_table[index] = funct;
    d170:	ldr	r0, [pc, #140]	; (d200 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xa4>)
	int index = channel - IMXRT_PIT_CHANNELS;
    d172:	add	r2, r3
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
    d174:	ldr	r4, [pc, #140]	; (d204 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xa8>)
    d176:	asrs	r2, r2, #4
	funct_table[index] = funct;
    d178:	str.w	r1, [r0, r2, lsl #2]
	channel->TCTRL = 3;
    d17c:	movs	r0, #3
	nvic_priorites[index] = nvic_priority;
    d17e:	ldr	r1, [pc, #136]	; (d208 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xac>)
	channel->TCTRL = 3;
    d180:	str	r0, [r3, #8]
	nvic_priorites[index] = nvic_priority;
    d182:	ldrb.w	r3, [ip, #4]
    d186:	ldr	r0, [pc, #132]	; (d20c <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xb0>)
    d188:	strb	r3, [r1, r2]
		if (top_priority > nvic_priorites[i]) top_priority = nvic_priorites[i];
    d18a:	ldrb	r3, [r1, #0]
    d18c:	ldrb	r2, [r1, #1]
    d18e:	str.w	r4, [r0, #552]	; 0x228
    d192:	cmp	r3, r2
    d194:	ldrb	r0, [r1, #2]
    d196:	it	cs
    d198:	movcs	r3, r2
    d19a:	ldrb	r2, [r1, #3]
    d19c:	cmp	r3, r0
    d19e:	it	cs
    d1a0:	movcs	r3, r0
    d1a2:	cmp	r3, r2
    d1a4:	it	cs
    d1a6:	movcs	r3, r2
	NVIC_SET_PRIORITY(IRQ_PIT, top_priority);
    d1a8:	ldr	r4, [pc, #100]	; (d210 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xb4>)
	NVIC_ENABLE_IRQ(IRQ_PIT);
    d1aa:	mov.w	r2, #3758153728	; 0xe000e000
    d1ae:	mov.w	r1, #67108864	; 0x4000000
	return true;
    d1b2:	movs	r0, #1
	NVIC_SET_PRIORITY(IRQ_PIT, top_priority);
    d1b4:	strb.w	r3, [r4, #122]	; 0x7a
}
    d1b8:	ldr.w	r4, [sp], #4
	NVIC_ENABLE_IRQ(IRQ_PIT);
    d1bc:	str.w	r1, [r2, #268]	; 0x10c
}
    d1c0:	bx	lr
		CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    d1c2:	ldr	r0, [pc, #80]	; (d214 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xb8>)
			if (++channel >= IMXRT_PIT_CHANNELS + NUM_CHANNELS) {
    d1c4:	ldr	r4, [pc, #80]	; (d218 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xbc>)
		CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    d1c6:	ldr	r3, [r0, #108]	; 0x6c
    d1c8:	orr.w	r3, r3, #12288	; 0x3000
    d1cc:	str	r3, [r0, #108]	; 0x6c
		PIT_MCR = 1;
    d1ce:	movs	r0, #1
    d1d0:	ldr	r3, [pc, #72]	; (d21c <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xc0>)
    d1d2:	str	r0, [r3, #0]
		channel = IMXRT_PIT_CHANNELS;
    d1d4:	ldr	r0, [pc, #72]	; (d220 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xc4>)
    d1d6:	mov	r3, r0
    d1d8:	str.w	r0, [ip]
			if (channel->TCTRL == 0) break;
    d1dc:	ldr	r0, [r3, #8]
    d1de:	cmp	r0, #0
    d1e0:	beq.n	d16c <IntervalTimer::beginCycles(void (*)(), unsigned long)+0x10>
			if (++channel >= IMXRT_PIT_CHANNELS + NUM_CHANNELS) {
    d1e2:	adds	r3, #16
    d1e4:	cmp	r3, r4
    d1e6:	str.w	r3, [ip]
    d1ea:	bne.n	d1dc <IntervalTimer::beginCycles(void (*)(), unsigned long)+0x80>
				channel = NULL;
    d1ec:	movs	r3, #0
}
    d1ee:	ldr.w	r4, [sp], #4
				return false;
    d1f2:	mov	r0, r3
				channel = NULL;
    d1f4:	str.w	r3, [ip]
}
    d1f8:	bx	lr
    d1fa:	nop
    d1fc:	.word	0xbff7bf00
    d200:	.word	0x20001ec0
    d204:	.word	0x0000d105
    d208:	.word	0x20001474
    d20c:	.word	0x20001c00
    d210:	.word	0xe000e400
    d214:	.word	0x400fc000
    d218:	.word	0x40084140
    d21c:	.word	0x40084000
    d220:	.word	0x40084100

0000d224 <__aeabi_atexit>:
    d224:	mov	r3, r0
    d226:	mov	r0, r1
    d228:	mov	r1, r3
    d22a:	b.w	dba0 <__cxa_atexit>
    d22e:	nop

0000d230 <malloc>:
    d230:	ldr	r3, [pc, #8]	; (d23c <malloc+0xc>)
    d232:	mov	r1, r0
    d234:	ldr	r0, [r3, #0]
    d236:	b.w	d250 <_malloc_r>
    d23a:	nop
    d23c:	.word	0x20001a10

0000d240 <free>:
    d240:	ldr	r3, [pc, #8]	; (d24c <free+0xc>)
    d242:	mov	r1, r0
    d244:	ldr	r0, [r3, #0]
    d246:	b.w	e604 <_free_r>
    d24a:	nop
    d24c:	.word	0x20001a10

0000d250 <_malloc_r>:
    d250:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d254:	add.w	r6, r1, #11
    d258:	cmp	r6, #22
    d25a:	sub	sp, #12
    d25c:	mov	r4, r0
    d25e:	bhi.n	d2aa <_malloc_r+0x5a>
    d260:	cmp	r1, #16
    d262:	bhi.w	d3da <_malloc_r+0x18a>
    d266:	bl	d7b0 <__malloc_lock>
    d26a:	movs	r6, #16
    d26c:	movs	r2, #24
    d26e:	movs	r0, #2
    d270:	ldr	r7, [pc, #724]	; (d548 <_malloc_r+0x2f8>)
    d272:	add	r2, r7
    d274:	sub.w	r1, r2, #8
    d278:	ldr	r3, [r2, #4]
    d27a:	cmp	r3, r1
    d27c:	beq.w	d3f4 <_malloc_r+0x1a4>
    d280:	ldr	r2, [r3, #4]
    d282:	ldr	r1, [r3, #12]
    d284:	bic.w	r2, r2, #3
    d288:	add	r2, r3
    d28a:	ldr	r5, [r3, #8]
    d28c:	str	r1, [r5, #12]
    d28e:	str	r5, [r1, #8]
    d290:	ldr	r1, [r2, #4]
    d292:	orr.w	r1, r1, #1
    d296:	mov	r0, r4
    d298:	str	r1, [r2, #4]
    d29a:	add.w	r5, r3, #8
    d29e:	bl	d7bc <__malloc_unlock>
    d2a2:	mov	r0, r5
    d2a4:	add	sp, #12
    d2a6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d2aa:	bics.w	r6, r6, #7
    d2ae:	bmi.w	d3da <_malloc_r+0x18a>
    d2b2:	cmp	r1, r6
    d2b4:	bhi.w	d3da <_malloc_r+0x18a>
    d2b8:	bl	d7b0 <__malloc_lock>
    d2bc:	cmp.w	r6, #504	; 0x1f8
    d2c0:	bcc.w	d5f8 <_malloc_r+0x3a8>
    d2c4:	lsrs	r3, r6, #9
    d2c6:	beq.w	d3e8 <_malloc_r+0x198>
    d2ca:	cmp	r3, #4
    d2cc:	bhi.w	d5ae <_malloc_r+0x35e>
    d2d0:	lsrs	r3, r6, #6
    d2d2:	add.w	r0, r3, #57	; 0x39
    d2d6:	add.w	ip, r3, #56	; 0x38
    d2da:	lsls	r3, r0, #3
    d2dc:	ldr	r7, [pc, #616]	; (d548 <_malloc_r+0x2f8>)
    d2de:	add	r3, r7
    d2e0:	sub.w	r5, r3, #8
    d2e4:	ldr	r3, [r3, #4]
    d2e6:	cmp	r5, r3
    d2e8:	bne.n	d2f8 <_malloc_r+0xa8>
    d2ea:	b.n	d306 <_malloc_r+0xb6>
    d2ec:	cmp	r1, #0
    d2ee:	bge.w	d540 <_malloc_r+0x2f0>
    d2f2:	ldr	r3, [r3, #12]
    d2f4:	cmp	r5, r3
    d2f6:	beq.n	d306 <_malloc_r+0xb6>
    d2f8:	ldr	r2, [r3, #4]
    d2fa:	bic.w	r2, r2, #3
    d2fe:	subs	r1, r2, r6
    d300:	cmp	r1, #15
    d302:	ble.n	d2ec <_malloc_r+0x9c>
    d304:	mov	r0, ip
    d306:	ldr	r5, [r7, #16]
    d308:	ldr.w	ip, [pc, #592]	; d55c <_malloc_r+0x30c>
    d30c:	cmp	r5, ip
    d30e:	beq.n	d40a <_malloc_r+0x1ba>
    d310:	ldr	r2, [r5, #4]
    d312:	bic.w	r2, r2, #3
    d316:	subs	r3, r2, r6
    d318:	cmp	r3, #15
    d31a:	bgt.w	d614 <_malloc_r+0x3c4>
    d31e:	cmp	r3, #0
    d320:	strd	ip, ip, [r7, #16]
    d324:	bge.w	d600 <_malloc_r+0x3b0>
    d328:	cmp.w	r2, #512	; 0x200
    d32c:	bcs.w	d564 <_malloc_r+0x314>
    d330:	lsrs	r3, r2, #3
    d332:	ldr	r1, [r7, #4]
    d334:	adds	r3, #1
    d336:	mov.w	lr, r2, lsr #5
    d33a:	movs	r2, #1
    d33c:	lsl.w	r2, r2, lr
    d340:	orrs	r2, r1
    d342:	ldr.w	lr, [r7, r3, lsl #3]
    d346:	str.w	lr, [r5, #8]
    d34a:	add.w	r1, r7, r3, lsl #3
    d34e:	subs	r1, #8
    d350:	str	r1, [r5, #12]
    d352:	str	r2, [r7, #4]
    d354:	str.w	r5, [r7, r3, lsl #3]
    d358:	str.w	r5, [lr, #12]
    d35c:	asrs	r3, r0, #2
    d35e:	movs	r1, #1
    d360:	lsls	r1, r3
    d362:	cmp	r1, r2
    d364:	bhi.n	d416 <_malloc_r+0x1c6>
    d366:	tst	r1, r2
    d368:	bne.n	d378 <_malloc_r+0x128>
    d36a:	bic.w	r0, r0, #3
    d36e:	lsls	r1, r1, #1
    d370:	tst	r1, r2
    d372:	add.w	r0, r0, #4
    d376:	beq.n	d36e <_malloc_r+0x11e>
    d378:	add.w	r9, r7, r0, lsl #3
    d37c:	mov	r5, r9
    d37e:	mov	lr, r0
    d380:	ldr.w	r8, [r5, #12]
    d384:	cmp	r5, r8
    d386:	bne.n	d39a <_malloc_r+0x14a>
    d388:	b.n	d5c6 <_malloc_r+0x376>
    d38a:	cmp	r3, #0
    d38c:	bge.w	d5d8 <_malloc_r+0x388>
    d390:	ldr.w	r8, [r8, #12]
    d394:	cmp	r5, r8
    d396:	beq.w	d5c6 <_malloc_r+0x376>
    d39a:	ldr.w	r2, [r8, #4]
    d39e:	bic.w	r2, r2, #3
    d3a2:	subs	r3, r2, r6
    d3a4:	cmp	r3, #15
    d3a6:	ble.n	d38a <_malloc_r+0x13a>
    d3a8:	mov	r0, r4
    d3aa:	ldrd	r5, r4, [r8, #8]
    d3ae:	add.w	r1, r8, r6
    d3b2:	orr.w	r6, r6, #1
    d3b6:	str.w	r6, [r8, #4]
    d3ba:	str	r4, [r5, #12]
    d3bc:	str	r5, [r4, #8]
    d3be:	orr.w	r4, r3, #1
    d3c2:	strd	r1, r1, [r7, #16]
    d3c6:	strd	ip, ip, [r1, #8]
    d3ca:	str	r4, [r1, #4]
    d3cc:	str.w	r3, [r8, r2]
    d3d0:	bl	d7bc <__malloc_unlock>
    d3d4:	add.w	r5, r8, #8
    d3d8:	b.n	d3e0 <_malloc_r+0x190>
    d3da:	movs	r3, #12
    d3dc:	str	r3, [r4, #0]
    d3de:	movs	r5, #0
    d3e0:	mov	r0, r5
    d3e2:	add	sp, #12
    d3e4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d3e8:	mov.w	r3, #512	; 0x200
    d3ec:	movs	r0, #64	; 0x40
    d3ee:	mov.w	ip, #63	; 0x3f
    d3f2:	b.n	d2dc <_malloc_r+0x8c>
    d3f4:	ldr	r3, [r2, #12]
    d3f6:	cmp	r2, r3
    d3f8:	it	eq
    d3fa:	addeq	r0, #2
    d3fc:	bne.w	d280 <_malloc_r+0x30>
    d400:	ldr	r5, [r7, #16]
    d402:	ldr.w	ip, [pc, #344]	; d55c <_malloc_r+0x30c>
    d406:	cmp	r5, ip
    d408:	bne.n	d310 <_malloc_r+0xc0>
    d40a:	ldr	r2, [r7, #4]
    d40c:	asrs	r3, r0, #2
    d40e:	movs	r1, #1
    d410:	lsls	r1, r3
    d412:	cmp	r1, r2
    d414:	bls.n	d366 <_malloc_r+0x116>
    d416:	ldr	r5, [r7, #8]
    d418:	ldr	r3, [r5, #4]
    d41a:	bic.w	r9, r3, #3
    d41e:	cmp	r6, r9
    d420:	bhi.n	d42a <_malloc_r+0x1da>
    d422:	sub.w	r3, r9, r6
    d426:	cmp	r3, #15
    d428:	bgt.n	d520 <_malloc_r+0x2d0>
    d42a:	ldr.w	fp, [pc, #308]	; d560 <_malloc_r+0x310>
    d42e:	ldr	r3, [pc, #284]	; (d54c <_malloc_r+0x2fc>)
    d430:	ldr.w	r2, [fp]
    d434:	ldr	r3, [r3, #0]
    d436:	adds	r2, #1
    d438:	add	r3, r6
    d43a:	add.w	sl, r5, r9
    d43e:	beq.w	d6a8 <_malloc_r+0x458>
    d442:	add.w	r3, r3, #4096	; 0x1000
    d446:	adds	r3, #15
    d448:	bic.w	r8, r3, #4080	; 0xff0
    d44c:	bic.w	r8, r8, #15
    d450:	mov	r1, r8
    d452:	mov	r0, r4
    d454:	bl	e280 <_sbrk_r>
    d458:	adds	r1, r0, #1
    d45a:	mov	r2, r0
    d45c:	beq.w	d646 <_malloc_r+0x3f6>
    d460:	cmp	sl, r0
    d462:	bhi.w	d642 <_malloc_r+0x3f2>
    d466:	ldr	r3, [pc, #232]	; (d550 <_malloc_r+0x300>)
    d468:	ldr	r1, [r3, #0]
    d46a:	add	r1, r8
    d46c:	str	r1, [r3, #0]
    d46e:	mov	r0, r1
    d470:	beq.w	d710 <_malloc_r+0x4c0>
    d474:	ldr.w	r1, [fp]
    d478:	str	r3, [sp, #4]
    d47a:	adds	r1, #1
    d47c:	ittet	ne
    d47e:	subne.w	r1, r2, sl
    d482:	addne	r1, r1, r0
    d484:	streq.w	r2, [fp]
    d488:	strne	r1, [r3, #0]
    d48a:	ands.w	fp, r2, #7
    d48e:	beq.w	d6c0 <_malloc_r+0x470>
    d492:	rsb	r1, fp, #8
    d496:	add	r2, r1
    d498:	rsb	r1, fp, #4096	; 0x1000
    d49c:	add	r8, r2
    d49e:	adds	r1, #8
    d4a0:	sub.w	r1, r1, r8
    d4a4:	ubfx	sl, r1, #0, #12
    d4a8:	mov	r1, sl
    d4aa:	mov	r0, r4
    d4ac:	str	r2, [sp, #0]
    d4ae:	bl	e280 <_sbrk_r>
    d4b2:	adds	r2, r0, #1
    d4b4:	ldrd	r2, r3, [sp]
    d4b8:	beq.w	d75a <_malloc_r+0x50a>
    d4bc:	subs	r0, r0, r2
    d4be:	add.w	r8, r0, sl
    d4c2:	ldr	r1, [r3, #0]
    d4c4:	str	r2, [r7, #8]
    d4c6:	orr.w	r0, r8, #1
    d4ca:	add	r1, sl
    d4cc:	cmp	r5, r7
    d4ce:	str	r0, [r2, #4]
    d4d0:	str	r1, [r3, #0]
    d4d2:	beq.w	d728 <_malloc_r+0x4d8>
    d4d6:	cmp.w	r9, #15
    d4da:	bls.w	d72c <_malloc_r+0x4dc>
    d4de:	ldr	r0, [r5, #4]
    d4e0:	sub.w	ip, r9, #12
    d4e4:	bic.w	ip, ip, #7
    d4e8:	and.w	r0, r0, #1
    d4ec:	orr.w	r0, r0, ip
    d4f0:	str	r0, [r5, #4]
    d4f2:	mov.w	lr, #5
    d4f6:	add.w	r0, r5, ip
    d4fa:	cmp.w	ip, #15
    d4fe:	strd	lr, lr, [r0, #4]
    d502:	bhi.w	d76a <_malloc_r+0x51a>
    d506:	ldr	r0, [r2, #4]
    d508:	mov	r5, r2
    d50a:	ldr	r3, [pc, #72]	; (d554 <_malloc_r+0x304>)
    d50c:	ldr	r2, [r3, #0]
    d50e:	cmp	r2, r1
    d510:	it	cc
    d512:	strcc	r1, [r3, #0]
    d514:	ldr	r3, [pc, #64]	; (d558 <_malloc_r+0x308>)
    d516:	ldr	r2, [r3, #0]
    d518:	cmp	r2, r1
    d51a:	it	cc
    d51c:	strcc	r1, [r3, #0]
    d51e:	b.n	d64a <_malloc_r+0x3fa>
    d520:	adds	r2, r5, r6
    d522:	orr.w	r3, r3, #1
    d526:	orr.w	r6, r6, #1
    d52a:	str	r6, [r5, #4]
    d52c:	mov	r0, r4
    d52e:	str	r2, [r7, #8]
    d530:	str	r3, [r2, #4]
    d532:	bl	d7bc <__malloc_unlock>
    d536:	adds	r5, #8
    d538:	mov	r0, r5
    d53a:	add	sp, #12
    d53c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d540:	ldr	r1, [r3, #12]
    d542:	add	r2, r3
    d544:	b.n	d28a <_malloc_r+0x3a>
    d546:	nop
    d548:	.word	0x200015f4
    d54c:	.word	0x200067b0
    d550:	.word	0x20006780
    d554:	.word	0x200067a8
    d558:	.word	0x200067ac
    d55c:	.word	0x200015fc
    d560:	.word	0x200019fc
    d564:	cmp.w	r2, #2560	; 0xa00
    d568:	mov.w	r3, r2, lsr #9
    d56c:	bcc.n	d636 <_malloc_r+0x3e6>
    d56e:	cmp	r3, #20
    d570:	bhi.w	d6e2 <_malloc_r+0x492>
    d574:	add.w	r1, r3, #92	; 0x5c
    d578:	lsls	r1, r1, #3
    d57a:	adds	r3, #91	; 0x5b
    d57c:	add.w	lr, r7, r1
    d580:	ldr	r1, [r7, r1]
    d582:	sub.w	lr, lr, #8
    d586:	cmp	lr, r1
    d588:	beq.w	d6ae <_malloc_r+0x45e>
    d58c:	ldr	r3, [r1, #4]
    d58e:	bic.w	r3, r3, #3
    d592:	cmp	r3, r2
    d594:	bls.n	d59c <_malloc_r+0x34c>
    d596:	ldr	r1, [r1, #8]
    d598:	cmp	lr, r1
    d59a:	bne.n	d58c <_malloc_r+0x33c>
    d59c:	ldr.w	lr, [r1, #12]
    d5a0:	ldr	r2, [r7, #4]
    d5a2:	strd	r1, lr, [r5, #8]
    d5a6:	str.w	r5, [lr, #8]
    d5aa:	str	r5, [r1, #12]
    d5ac:	b.n	d35c <_malloc_r+0x10c>
    d5ae:	cmp	r3, #20
    d5b0:	bls.n	d666 <_malloc_r+0x416>
    d5b2:	cmp	r3, #84	; 0x54
    d5b4:	bhi.w	d6f2 <_malloc_r+0x4a2>
    d5b8:	lsrs	r3, r6, #12
    d5ba:	add.w	r0, r3, #111	; 0x6f
    d5be:	add.w	ip, r3, #110	; 0x6e
    d5c2:	lsls	r3, r0, #3
    d5c4:	b.n	d2dc <_malloc_r+0x8c>
    d5c6:	add.w	lr, lr, #1
    d5ca:	tst.w	lr, #3
    d5ce:	add.w	r5, r5, #8
    d5d2:	bne.w	d380 <_malloc_r+0x130>
    d5d6:	b.n	d67c <_malloc_r+0x42c>
    d5d8:	add	r2, r8
    d5da:	mov	r5, r8
    d5dc:	ldr	r3, [r2, #4]
    d5de:	ldr.w	r1, [r8, #12]
    d5e2:	orr.w	r3, r3, #1
    d5e6:	str	r3, [r2, #4]
    d5e8:	ldr.w	r3, [r5, #8]!
    d5ec:	mov	r0, r4
    d5ee:	str	r1, [r3, #12]
    d5f0:	str	r3, [r1, #8]
    d5f2:	bl	d7bc <__malloc_unlock>
    d5f6:	b.n	d3e0 <_malloc_r+0x190>
    d5f8:	lsrs	r0, r6, #3
    d5fa:	add.w	r2, r6, #8
    d5fe:	b.n	d270 <_malloc_r+0x20>
    d600:	add	r2, r5
    d602:	mov	r0, r4
    d604:	ldr	r3, [r2, #4]
    d606:	orr.w	r3, r3, #1
    d60a:	str	r3, [r2, #4]
    d60c:	adds	r5, #8
    d60e:	bl	d7bc <__malloc_unlock>
    d612:	b.n	d3e0 <_malloc_r+0x190>
    d614:	adds	r1, r5, r6
    d616:	mov	r0, r4
    d618:	orr.w	r6, r6, #1
    d61c:	orr.w	r4, r3, #1
    d620:	str	r6, [r5, #4]
    d622:	strd	r1, r1, [r7, #16]
    d626:	strd	ip, ip, [r1, #8]
    d62a:	str	r4, [r1, #4]
    d62c:	str	r3, [r5, r2]
    d62e:	bl	d7bc <__malloc_unlock>
    d632:	adds	r5, #8
    d634:	b.n	d3e0 <_malloc_r+0x190>
    d636:	lsrs	r3, r2, #6
    d638:	add.w	r1, r3, #57	; 0x39
    d63c:	lsls	r1, r1, #3
    d63e:	adds	r3, #56	; 0x38
    d640:	b.n	d57c <_malloc_r+0x32c>
    d642:	cmp	r5, r7
    d644:	beq.n	d706 <_malloc_r+0x4b6>
    d646:	ldr	r5, [r7, #8]
    d648:	ldr	r0, [r5, #4]
    d64a:	bic.w	r8, r0, #3
    d64e:	cmp	r6, r8
    d650:	sub.w	r3, r8, r6
    d654:	bhi.n	d65c <_malloc_r+0x40c>
    d656:	cmp	r3, #15
    d658:	bgt.w	d520 <_malloc_r+0x2d0>
    d65c:	mov	r0, r4
    d65e:	bl	d7bc <__malloc_unlock>
    d662:	movs	r5, #0
    d664:	b.n	d3e0 <_malloc_r+0x190>
    d666:	add.w	r0, r3, #92	; 0x5c
    d66a:	add.w	ip, r3, #91	; 0x5b
    d66e:	lsls	r3, r0, #3
    d670:	b.n	d2dc <_malloc_r+0x8c>
    d672:	ldr.w	r3, [r9], #-8
    d676:	cmp	r3, r9
    d678:	bne.w	d7a8 <_malloc_r+0x558>
    d67c:	tst.w	r0, #3
    d680:	add.w	r0, r0, #4294967295
    d684:	bne.n	d672 <_malloc_r+0x422>
    d686:	ldr	r3, [r7, #4]
    d688:	bic.w	r3, r3, r1
    d68c:	str	r3, [r7, #4]
    d68e:	lsls	r1, r1, #1
    d690:	cmp	r1, r3
    d692:	bhi.w	d416 <_malloc_r+0x1c6>
    d696:	cbnz	r1, d6a0 <_malloc_r+0x450>
    d698:	b.n	d416 <_malloc_r+0x1c6>
    d69a:	lsls	r1, r1, #1
    d69c:	add.w	lr, lr, #4
    d6a0:	tst	r1, r3
    d6a2:	beq.n	d69a <_malloc_r+0x44a>
    d6a4:	mov	r0, lr
    d6a6:	b.n	d378 <_malloc_r+0x128>
    d6a8:	add.w	r8, r3, #16
    d6ac:	b.n	d450 <_malloc_r+0x200>
    d6ae:	asrs	r2, r3, #2
    d6b0:	mov.w	r8, #1
    d6b4:	ldr	r3, [r7, #4]
    d6b6:	lsl.w	r2, r8, r2
    d6ba:	orrs	r2, r3
    d6bc:	str	r2, [r7, #4]
    d6be:	b.n	d5a2 <_malloc_r+0x352>
    d6c0:	add.w	r1, r2, r8
    d6c4:	negs	r1, r1
    d6c6:	ubfx	sl, r1, #0, #12
    d6ca:	mov	r1, sl
    d6cc:	mov	r0, r4
    d6ce:	str	r2, [sp, #0]
    d6d0:	bl	e280 <_sbrk_r>
    d6d4:	adds	r3, r0, #1
    d6d6:	ldrd	r2, r3, [sp]
    d6da:	bne.w	d4bc <_malloc_r+0x26c>
    d6de:	mov	sl, fp
    d6e0:	b.n	d4c2 <_malloc_r+0x272>
    d6e2:	cmp	r3, #84	; 0x54
    d6e4:	bhi.n	d732 <_malloc_r+0x4e2>
    d6e6:	lsrs	r3, r2, #12
    d6e8:	add.w	r1, r3, #111	; 0x6f
    d6ec:	lsls	r1, r1, #3
    d6ee:	adds	r3, #110	; 0x6e
    d6f0:	b.n	d57c <_malloc_r+0x32c>
    d6f2:	cmp.w	r3, #340	; 0x154
    d6f6:	bhi.n	d744 <_malloc_r+0x4f4>
    d6f8:	lsrs	r3, r6, #15
    d6fa:	add.w	r0, r3, #120	; 0x78
    d6fe:	add.w	ip, r3, #119	; 0x77
    d702:	lsls	r3, r0, #3
    d704:	b.n	d2dc <_malloc_r+0x8c>
    d706:	ldr	r3, [pc, #164]	; (d7ac <_malloc_r+0x55c>)
    d708:	ldr	r0, [r3, #0]
    d70a:	add	r0, r8
    d70c:	str	r0, [r3, #0]
    d70e:	b.n	d474 <_malloc_r+0x224>
    d710:	ubfx	ip, sl, #0, #12
    d714:	cmp.w	ip, #0
    d718:	bne.w	d474 <_malloc_r+0x224>
    d71c:	ldr	r5, [r7, #8]
    d71e:	add	r8, r9
    d720:	orr.w	r0, r8, #1
    d724:	str	r0, [r5, #4]
    d726:	b.n	d50a <_malloc_r+0x2ba>
    d728:	mov	r5, r2
    d72a:	b.n	d50a <_malloc_r+0x2ba>
    d72c:	movs	r3, #1
    d72e:	str	r3, [r2, #4]
    d730:	b.n	d65c <_malloc_r+0x40c>
    d732:	cmp.w	r3, #340	; 0x154
    d736:	bhi.n	d780 <_malloc_r+0x530>
    d738:	lsrs	r3, r2, #15
    d73a:	add.w	r1, r3, #120	; 0x78
    d73e:	lsls	r1, r1, #3
    d740:	adds	r3, #119	; 0x77
    d742:	b.n	d57c <_malloc_r+0x32c>
    d744:	movw	r2, #1364	; 0x554
    d748:	cmp	r3, r2
    d74a:	bhi.n	d794 <_malloc_r+0x544>
    d74c:	lsrs	r3, r6, #18
    d74e:	add.w	r0, r3, #125	; 0x7d
    d752:	add.w	ip, r3, #124	; 0x7c
    d756:	lsls	r3, r0, #3
    d758:	b.n	d2dc <_malloc_r+0x8c>
    d75a:	sub.w	fp, fp, #8
    d75e:	add	r8, fp
    d760:	sub.w	r8, r8, r2
    d764:	mov.w	sl, #0
    d768:	b.n	d4c2 <_malloc_r+0x272>
    d76a:	add.w	r1, r5, #8
    d76e:	mov	r0, r4
    d770:	str	r3, [sp, #0]
    d772:	bl	e604 <_free_r>
    d776:	ldr	r5, [r7, #8]
    d778:	ldr	r3, [sp, #0]
    d77a:	ldr	r0, [r5, #4]
    d77c:	ldr	r1, [r3, #0]
    d77e:	b.n	d50a <_malloc_r+0x2ba>
    d780:	movw	r1, #1364	; 0x554
    d784:	cmp	r3, r1
    d786:	bhi.n	d7a0 <_malloc_r+0x550>
    d788:	lsrs	r3, r2, #18
    d78a:	add.w	r1, r3, #125	; 0x7d
    d78e:	lsls	r1, r1, #3
    d790:	adds	r3, #124	; 0x7c
    d792:	b.n	d57c <_malloc_r+0x32c>
    d794:	mov.w	r3, #1016	; 0x3f8
    d798:	movs	r0, #127	; 0x7f
    d79a:	mov.w	ip, #126	; 0x7e
    d79e:	b.n	d2dc <_malloc_r+0x8c>
    d7a0:	mov.w	r1, #1016	; 0x3f8
    d7a4:	movs	r3, #126	; 0x7e
    d7a6:	b.n	d57c <_malloc_r+0x32c>
    d7a8:	ldr	r3, [r7, #4]
    d7aa:	b.n	d68e <_malloc_r+0x43e>
    d7ac:	.word	0x20006780

0000d7b0 <__malloc_lock>:
    d7b0:	ldr	r0, [pc, #4]	; (d7b8 <__malloc_lock+0x8>)
    d7b2:	b.w	e32c <__retarget_lock_acquire_recursive>
    d7b6:	nop
    d7b8:	.word	0x20006778

0000d7bc <__malloc_unlock>:
    d7bc:	ldr	r0, [pc, #4]	; (d7c4 <__malloc_unlock+0x8>)
    d7be:	b.w	e330 <__retarget_lock_release_recursive>
    d7c2:	nop
    d7c4:	.word	0x20006778

0000d7c8 <_realloc_r>:
    d7c8:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d7cc:	mov	r7, r2
    d7ce:	cmp	r1, #0
    d7d0:	beq.w	d904 <_realloc_r+0x13c>
    d7d4:	mov	r4, r1
    d7d6:	add.w	r5, r7, #11
    d7da:	mov	r8, r0
    d7dc:	bl	d7b0 <__malloc_lock>
    d7e0:	cmp	r5, #22
    d7e2:	ldr.w	r1, [r4, #-4]
    d7e6:	bhi.n	d8a0 <_realloc_r+0xd8>
    d7e8:	movs	r5, #16
    d7ea:	mov	r2, r5
    d7ec:	cmp	r7, r5
    d7ee:	bhi.n	d8aa <_realloc_r+0xe2>
    d7f0:	bic.w	r6, r1, #3
    d7f4:	cmp	r6, r2
    d7f6:	sub.w	r9, r4, #8
    d7fa:	bge.n	d8c2 <_realloc_r+0xfa>
    d7fc:	ldr	r3, [pc, #752]	; (daf0 <_realloc_r+0x328>)
    d7fe:	ldr.w	ip, [r3, #8]
    d802:	add.w	r0, r9, r6
    d806:	cmp	ip, r0
    d808:	beq.w	d93a <_realloc_r+0x172>
    d80c:	ldr.w	ip, [r0, #4]
    d810:	bic.w	r3, ip, #1
    d814:	add	r3, r0
    d816:	ldr	r3, [r3, #4]
    d818:	lsls	r3, r3, #31
    d81a:	bmi.n	d8ee <_realloc_r+0x126>
    d81c:	bic.w	ip, ip, #3
    d820:	add.w	r3, r6, ip
    d824:	cmp	r3, r2
    d826:	bge.n	d8b8 <_realloc_r+0xf0>
    d828:	lsls	r3, r1, #31
    d82a:	bmi.n	d84e <_realloc_r+0x86>
    d82c:	ldr.w	r3, [r4, #-8]
    d830:	sub.w	sl, r9, r3
    d834:	ldr.w	r3, [sl, #4]
    d838:	bic.w	r1, r3, #3
    d83c:	add	ip, r1
    d83e:	add	ip, r6
    d840:	cmp	ip, r2
    d842:	bge.w	da68 <_realloc_r+0x2a0>
    d846:	adds	r3, r6, r1
    d848:	cmp	r3, r2
    d84a:	bge.w	da1e <_realloc_r+0x256>
    d84e:	mov	r1, r7
    d850:	mov	r0, r8
    d852:	bl	d250 <_malloc_r>
    d856:	mov	r7, r0
    d858:	cbz	r0, d894 <_realloc_r+0xcc>
    d85a:	ldr.w	r3, [r4, #-4]
    d85e:	bic.w	r3, r3, #1
    d862:	add	r3, r9
    d864:	sub.w	r2, r0, #8
    d868:	cmp	r3, r2
    d86a:	beq.w	da12 <_realloc_r+0x24a>
    d86e:	subs	r2, r6, #4
    d870:	cmp	r2, #36	; 0x24
    d872:	bhi.w	da60 <_realloc_r+0x298>
    d876:	cmp	r2, #19
    d878:	bhi.w	d9d4 <_realloc_r+0x20c>
    d87c:	mov	r3, r0
    d87e:	mov	r2, r4
    d880:	ldr	r1, [r2, #0]
    d882:	str	r1, [r3, #0]
    d884:	ldr	r1, [r2, #4]
    d886:	str	r1, [r3, #4]
    d888:	ldr	r2, [r2, #8]
    d88a:	str	r2, [r3, #8]
    d88c:	mov	r1, r4
    d88e:	mov	r0, r8
    d890:	bl	e604 <_free_r>
    d894:	mov	r0, r8
    d896:	bl	d7bc <__malloc_unlock>
    d89a:	mov	r0, r7
    d89c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d8a0:	bic.w	r5, r5, #7
    d8a4:	cmp	r5, #0
    d8a6:	mov	r2, r5
    d8a8:	bge.n	d7ec <_realloc_r+0x24>
    d8aa:	movs	r3, #12
    d8ac:	str.w	r3, [r8]
    d8b0:	movs	r7, #0
    d8b2:	mov	r0, r7
    d8b4:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d8b8:	mov	r6, r3
    d8ba:	ldrd	r2, r3, [r0, #8]
    d8be:	str	r3, [r2, #12]
    d8c0:	str	r2, [r3, #8]
    d8c2:	subs	r3, r6, r5
    d8c4:	cmp	r3, #15
    d8c6:	bhi.n	d90e <_realloc_r+0x146>
    d8c8:	ldr.w	r3, [r9, #4]
    d8cc:	and.w	r3, r3, #1
    d8d0:	orrs	r3, r6
    d8d2:	add	r6, r9
    d8d4:	str.w	r3, [r9, #4]
    d8d8:	ldr	r3, [r6, #4]
    d8da:	orr.w	r3, r3, #1
    d8de:	str	r3, [r6, #4]
    d8e0:	mov	r0, r8
    d8e2:	mov	r7, r4
    d8e4:	bl	d7bc <__malloc_unlock>
    d8e8:	mov	r0, r7
    d8ea:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d8ee:	lsls	r1, r1, #31
    d8f0:	bmi.n	d84e <_realloc_r+0x86>
    d8f2:	ldr.w	r3, [r4, #-8]
    d8f6:	sub.w	sl, r9, r3
    d8fa:	ldr.w	r1, [sl, #4]
    d8fe:	bic.w	r1, r1, #3
    d902:	b.n	d846 <_realloc_r+0x7e>
    d904:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d908:	mov	r1, r2
    d90a:	b.w	d250 <_malloc_r>
    d90e:	ldr.w	r2, [r9, #4]
    d912:	add.w	r1, r9, r5
    d916:	and.w	r2, r2, #1
    d91a:	add	r6, r9
    d91c:	orr.w	r3, r3, #1
    d920:	orrs	r2, r5
    d922:	str.w	r2, [r9, #4]
    d926:	str	r3, [r1, #4]
    d928:	ldr	r3, [r6, #4]
    d92a:	orr.w	r3, r3, #1
    d92e:	adds	r1, #8
    d930:	str	r3, [r6, #4]
    d932:	mov	r0, r8
    d934:	bl	e604 <_free_r>
    d938:	b.n	d8e0 <_realloc_r+0x118>
    d93a:	ldr.w	r0, [ip, #4]
    d93e:	bic.w	fp, r0, #3
    d942:	add.w	ip, r6, fp
    d946:	add.w	r0, r5, #16
    d94a:	cmp	ip, r0
    d94c:	bge.n	d9ea <_realloc_r+0x222>
    d94e:	lsls	r1, r1, #31
    d950:	bmi.w	d84e <_realloc_r+0x86>
    d954:	ldr.w	r1, [r4, #-8]
    d958:	sub.w	sl, r9, r1
    d95c:	ldr.w	r1, [sl, #4]
    d960:	bic.w	r1, r1, #3
    d964:	add	fp, r1
    d966:	add	fp, r6
    d968:	cmp	r0, fp
    d96a:	bgt.w	d846 <_realloc_r+0x7e>
    d96e:	mov	r7, sl
    d970:	ldr.w	r1, [sl, #12]
    d974:	ldr.w	r0, [r7, #8]!
    d978:	subs	r2, r6, #4
    d97a:	cmp	r2, #36	; 0x24
    d97c:	str	r1, [r0, #12]
    d97e:	str	r0, [r1, #8]
    d980:	bhi.w	db3a <_realloc_r+0x372>
    d984:	cmp	r2, #19
    d986:	bls.w	db36 <_realloc_r+0x36e>
    d98a:	ldr	r1, [r4, #0]
    d98c:	str.w	r1, [sl, #8]
    d990:	ldr	r1, [r4, #4]
    d992:	str.w	r1, [sl, #12]
    d996:	cmp	r2, #27
    d998:	bhi.w	db5a <_realloc_r+0x392>
    d99c:	adds	r4, #8
    d99e:	add.w	r2, sl, #16
    d9a2:	ldr	r1, [r4, #0]
    d9a4:	str	r1, [r2, #0]
    d9a6:	ldr	r1, [r4, #4]
    d9a8:	str	r1, [r2, #4]
    d9aa:	ldr	r1, [r4, #8]
    d9ac:	str	r1, [r2, #8]
    d9ae:	add.w	r1, sl, r5
    d9b2:	sub.w	r2, fp, r5
    d9b6:	orr.w	r2, r2, #1
    d9ba:	str	r1, [r3, #8]
    d9bc:	str	r2, [r1, #4]
    d9be:	ldr.w	r3, [sl, #4]
    d9c2:	and.w	r3, r3, #1
    d9c6:	orrs	r3, r5
    d9c8:	mov	r0, r8
    d9ca:	str.w	r3, [sl, #4]
    d9ce:	bl	d7bc <__malloc_unlock>
    d9d2:	b.n	d8b2 <_realloc_r+0xea>
    d9d4:	ldr	r3, [r4, #0]
    d9d6:	str	r3, [r0, #0]
    d9d8:	ldr	r3, [r4, #4]
    d9da:	str	r3, [r0, #4]
    d9dc:	cmp	r2, #27
    d9de:	bhi.n	dab2 <_realloc_r+0x2ea>
    d9e0:	add.w	r2, r4, #8
    d9e4:	add.w	r3, r0, #8
    d9e8:	b.n	d880 <_realloc_r+0xb8>
    d9ea:	add.w	r2, r9, r5
    d9ee:	str	r2, [r3, #8]
    d9f0:	sub.w	r3, ip, r5
    d9f4:	orr.w	r3, r3, #1
    d9f8:	str	r3, [r2, #4]
    d9fa:	ldr.w	r3, [r4, #-4]
    d9fe:	and.w	r3, r3, #1
    da02:	orrs	r3, r5
    da04:	mov	r0, r8
    da06:	str.w	r3, [r4, #-4]
    da0a:	bl	d7bc <__malloc_unlock>
    da0e:	mov	r7, r4
    da10:	b.n	d8b2 <_realloc_r+0xea>
    da12:	ldr.w	r3, [r0, #-4]
    da16:	bic.w	r3, r3, #3
    da1a:	add	r6, r3
    da1c:	b.n	d8c2 <_realloc_r+0xfa>
    da1e:	mov	r7, sl
    da20:	ldr.w	r1, [sl, #12]
    da24:	ldr.w	r0, [r7, #8]!
    da28:	subs	r2, r6, #4
    da2a:	cmp	r2, #36	; 0x24
    da2c:	str	r1, [r0, #12]
    da2e:	str	r0, [r1, #8]
    da30:	bhi.n	dacc <_realloc_r+0x304>
    da32:	cmp	r2, #19
    da34:	bls.n	dac8 <_realloc_r+0x300>
    da36:	ldr	r1, [r4, #0]
    da38:	str.w	r1, [sl, #8]
    da3c:	ldr	r1, [r4, #4]
    da3e:	str.w	r1, [sl, #12]
    da42:	cmp	r2, #27
    da44:	bhi.n	daf4 <_realloc_r+0x32c>
    da46:	adds	r4, #8
    da48:	add.w	r2, sl, #16
    da4c:	mov	r6, r3
    da4e:	ldr	r3, [r4, #0]
    da50:	str	r3, [r2, #0]
    da52:	ldr	r3, [r4, #4]
    da54:	str	r3, [r2, #4]
    da56:	ldr	r3, [r4, #8]
    da58:	str	r3, [r2, #8]
    da5a:	mov	r9, sl
    da5c:	mov	r4, r7
    da5e:	b.n	d8c2 <_realloc_r+0xfa>
    da60:	mov	r1, r4
    da62:	bl	df6c <memmove>
    da66:	b.n	d88c <_realloc_r+0xc4>
    da68:	ldrd	r1, r3, [r0, #8]
    da6c:	mov	r7, sl
    da6e:	str	r3, [r1, #12]
    da70:	str	r1, [r3, #8]
    da72:	ldr.w	r1, [r7, #8]!
    da76:	ldr.w	r3, [sl, #12]
    da7a:	str	r3, [r1, #12]
    da7c:	subs	r2, r6, #4
    da7e:	cmp	r2, #36	; 0x24
    da80:	str	r1, [r3, #8]
    da82:	bhi.n	dae0 <_realloc_r+0x318>
    da84:	cmp	r2, #19
    da86:	bls.n	dadc <_realloc_r+0x314>
    da88:	ldr	r3, [r4, #0]
    da8a:	str.w	r3, [sl, #8]
    da8e:	ldr	r3, [r4, #4]
    da90:	str.w	r3, [sl, #12]
    da94:	cmp	r2, #27
    da96:	bhi.n	db1e <_realloc_r+0x356>
    da98:	adds	r4, #8
    da9a:	add.w	r3, sl, #16
    da9e:	ldr	r2, [r4, #0]
    daa0:	str	r2, [r3, #0]
    daa2:	ldr	r2, [r4, #4]
    daa4:	str	r2, [r3, #4]
    daa6:	ldr	r2, [r4, #8]
    daa8:	str	r2, [r3, #8]
    daaa:	mov	r6, ip
    daac:	mov	r9, sl
    daae:	mov	r4, r7
    dab0:	b.n	d8c2 <_realloc_r+0xfa>
    dab2:	ldr	r3, [r4, #8]
    dab4:	str	r3, [r0, #8]
    dab6:	ldr	r3, [r4, #12]
    dab8:	str	r3, [r0, #12]
    daba:	cmp	r2, #36	; 0x24
    dabc:	beq.n	db0c <_realloc_r+0x344>
    dabe:	add.w	r2, r4, #16
    dac2:	add.w	r3, r0, #16
    dac6:	b.n	d880 <_realloc_r+0xb8>
    dac8:	mov	r2, r7
    daca:	b.n	da4c <_realloc_r+0x284>
    dacc:	mov	r1, r4
    dace:	mov	r0, r7
    dad0:	mov	r6, r3
    dad2:	mov	r9, sl
    dad4:	bl	df6c <memmove>
    dad8:	mov	r4, r7
    dada:	b.n	d8c2 <_realloc_r+0xfa>
    dadc:	mov	r3, r7
    dade:	b.n	da9e <_realloc_r+0x2d6>
    dae0:	mov	r1, r4
    dae2:	mov	r0, r7
    dae4:	mov	r6, ip
    dae6:	mov	r9, sl
    dae8:	bl	df6c <memmove>
    daec:	mov	r4, r7
    daee:	b.n	d8c2 <_realloc_r+0xfa>
    daf0:	.word	0x200015f4
    daf4:	ldr	r1, [r4, #8]
    daf6:	str.w	r1, [sl, #16]
    dafa:	ldr	r1, [r4, #12]
    dafc:	str.w	r1, [sl, #20]
    db00:	cmp	r2, #36	; 0x24
    db02:	beq.n	db46 <_realloc_r+0x37e>
    db04:	adds	r4, #16
    db06:	add.w	r2, sl, #24
    db0a:	b.n	da4c <_realloc_r+0x284>
    db0c:	ldr	r3, [r4, #16]
    db0e:	str	r3, [r0, #16]
    db10:	ldr	r1, [r4, #20]
    db12:	str	r1, [r0, #20]
    db14:	add.w	r2, r4, #24
    db18:	add.w	r3, r0, #24
    db1c:	b.n	d880 <_realloc_r+0xb8>
    db1e:	ldr	r3, [r4, #8]
    db20:	str.w	r3, [sl, #16]
    db24:	ldr	r3, [r4, #12]
    db26:	str.w	r3, [sl, #20]
    db2a:	cmp	r2, #36	; 0x24
    db2c:	beq.n	db72 <_realloc_r+0x3aa>
    db2e:	adds	r4, #16
    db30:	add.w	r3, sl, #24
    db34:	b.n	da9e <_realloc_r+0x2d6>
    db36:	mov	r2, r7
    db38:	b.n	d9a2 <_realloc_r+0x1da>
    db3a:	mov	r1, r4
    db3c:	mov	r0, r7
    db3e:	bl	df6c <memmove>
    db42:	ldr	r3, [pc, #88]	; (db9c <_realloc_r+0x3d4>)
    db44:	b.n	d9ae <_realloc_r+0x1e6>
    db46:	ldr	r2, [r4, #16]
    db48:	str.w	r2, [sl, #24]
    db4c:	ldr	r2, [r4, #20]
    db4e:	str.w	r2, [sl, #28]
    db52:	adds	r4, #24
    db54:	add.w	r2, sl, #32
    db58:	b.n	da4c <_realloc_r+0x284>
    db5a:	ldr	r1, [r4, #8]
    db5c:	str.w	r1, [sl, #16]
    db60:	ldr	r1, [r4, #12]
    db62:	str.w	r1, [sl, #20]
    db66:	cmp	r2, #36	; 0x24
    db68:	beq.n	db86 <_realloc_r+0x3be>
    db6a:	adds	r4, #16
    db6c:	add.w	r2, sl, #24
    db70:	b.n	d9a2 <_realloc_r+0x1da>
    db72:	ldr	r3, [r4, #16]
    db74:	str.w	r3, [sl, #24]
    db78:	ldr	r3, [r4, #20]
    db7a:	str.w	r3, [sl, #28]
    db7e:	adds	r4, #24
    db80:	add.w	r3, sl, #32
    db84:	b.n	da9e <_realloc_r+0x2d6>
    db86:	ldr	r2, [r4, #16]
    db88:	str.w	r2, [sl, #24]
    db8c:	ldr	r2, [r4, #20]
    db8e:	str.w	r2, [sl, #28]
    db92:	adds	r4, #24
    db94:	add.w	r2, sl, #32
    db98:	b.n	d9a2 <_realloc_r+0x1da>
    db9a:	nop
    db9c:	.word	0x200015f4

0000dba0 <__cxa_atexit>:
    dba0:	mov	r3, r2
    dba2:	mov	r2, r1
    dba4:	mov	r1, r0
    dba6:	movs	r0, #2
    dba8:	b.w	e4dc <__register_exitproc>

0000dbac <stdio_exit_handler>:
    dbac:	ldr	r2, [pc, #8]	; (dbb8 <stdio_exit_handler+0xc>)
    dbae:	ldr	r1, [pc, #12]	; (dbbc <stdio_exit_handler+0x10>)
    dbb0:	ldr	r0, [pc, #12]	; (dbc0 <stdio_exit_handler+0x14>)
    dbb2:	b.w	dd2c <_fwalk_sglue>
    dbb6:	nop
    dbb8:	.word	0x20001a04
    dbbc:	.word	0x00010b15
    dbc0:	.word	0x20001328

0000dbc4 <cleanup_stdio>:
    dbc4:	ldr	r3, [pc, #48]	; (dbf8 <cleanup_stdio+0x34>)
    dbc6:	ldr	r1, [r0, #4]
    dbc8:	cmp	r1, r3
    dbca:	push	{r4, lr}
    dbcc:	mov	r4, r0
    dbce:	beq.n	dbd4 <cleanup_stdio+0x10>
    dbd0:	bl	10b14 <_fclose_r>
    dbd4:	ldr	r1, [r4, #8]
    dbd6:	ldr	r3, [pc, #36]	; (dbfc <cleanup_stdio+0x38>)
    dbd8:	cmp	r1, r3
    dbda:	beq.n	dbe2 <cleanup_stdio+0x1e>
    dbdc:	mov	r0, r4
    dbde:	bl	10b14 <_fclose_r>
    dbe2:	ldr	r1, [r4, #12]
    dbe4:	ldr	r3, [pc, #24]	; (dc00 <cleanup_stdio+0x3c>)
    dbe6:	cmp	r1, r3
    dbe8:	beq.n	dbf4 <cleanup_stdio+0x30>
    dbea:	mov	r0, r4
    dbec:	ldmia.w	sp!, {r4, lr}
    dbf0:	b.w	10b14 <_fclose_r>
    dbf4:	pop	{r4, pc}
    dbf6:	nop
    dbf8:	.word	0x200067b4
    dbfc:	.word	0x2000681c
    dc00:	.word	0x20006884

0000dc04 <global_stdio_init.part.0>:
    dc04:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    dc08:	ldr	r4, [pc, #168]	; (dcb4 <global_stdio_init.part.0+0xb0>)
    dc0a:	ldr	r3, [pc, #172]	; (dcb8 <global_stdio_init.part.0+0xb4>)
    dc0c:	ldr	r0, [pc, #172]	; (dcbc <global_stdio_init.part.0+0xb8>)
    dc0e:	ldr.w	r9, [pc, #192]	; dcd0 <global_stdio_init.part.0+0xcc>
    dc12:	ldr.w	r8, [pc, #192]	; dcd4 <global_stdio_init.part.0+0xd0>
    dc16:	ldr	r7, [pc, #168]	; (dcc0 <global_stdio_init.part.0+0xbc>)
    dc18:	str	r0, [r3, #0]
    dc1a:	movs	r5, #0
    dc1c:	movs	r3, #4
    dc1e:	movs	r2, #8
    dc20:	mov	r1, r5
    dc22:	add.w	r0, r4, #92	; 0x5c
    dc26:	ldr	r6, [pc, #156]	; (dcc4 <global_stdio_init.part.0+0xc0>)
    dc28:	str	r5, [r4, #100]	; 0x64
    dc2a:	strd	r5, r3, [r4, #8]
    dc2e:	strd	r5, r5, [r4]
    dc32:	strd	r5, r5, [r4, #16]
    dc36:	str	r5, [r4, #24]
    dc38:	bl	e064 <memset>
    dc3c:	ldr	r3, [pc, #136]	; (dcc8 <global_stdio_init.part.0+0xc4>)
    dc3e:	str	r3, [r4, #116]	; 0x74
    dc40:	movs	r2, #8
    dc42:	mov	r1, r5
    dc44:	add.w	r0, r4, #196	; 0xc4
    dc48:	strd	r4, r9, [r4, #28]
    dc4c:	strd	r8, r7, [r4, #36]	; 0x24
    dc50:	strd	r5, r5, [r4, #104]	; 0x68
    dc54:	strd	r5, r5, [r4, #120]	; 0x78
    dc58:	str.w	r5, [r4, #204]	; 0xcc
    dc5c:	str	r5, [r4, #112]	; 0x70
    dc5e:	str.w	r5, [r4, #128]	; 0x80
    dc62:	str	r6, [r4, #44]	; 0x2c
    dc64:	bl	e064 <memset>
    dc68:	ldr	r3, [pc, #96]	; (dccc <global_stdio_init.part.0+0xc8>)
    dc6a:	str.w	r3, [r4, #220]	; 0xdc
    dc6e:	mov	r1, r5
    dc70:	add.w	r3, r4, #104	; 0x68
    dc74:	movs	r2, #8
    dc76:	add.w	r0, r4, #300	; 0x12c
    dc7a:	str.w	r3, [r4, #132]	; 0x84
    dc7e:	strd	r9, r8, [r4, #136]	; 0x88
    dc82:	strd	r7, r6, [r4, #144]	; 0x90
    dc86:	strd	r5, r5, [r4, #208]	; 0xd0
    dc8a:	strd	r5, r5, [r4, #224]	; 0xe0
    dc8e:	str.w	r5, [r4, #308]	; 0x134
    dc92:	str.w	r5, [r4, #216]	; 0xd8
    dc96:	str.w	r5, [r4, #232]	; 0xe8
    dc9a:	bl	e064 <memset>
    dc9e:	add.w	r3, r4, #208	; 0xd0
    dca2:	strd	r9, r8, [r4, #240]	; 0xf0
    dca6:	strd	r7, r6, [r4, #248]	; 0xf8
    dcaa:	str.w	r3, [r4, #236]	; 0xec
    dcae:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    dcb2:	nop
    dcb4:	.word	0x200067b4
    dcb8:	.word	0x200068ec
    dcbc:	.word	0x0000dbad
    dcc0:	.word	0x0000de19
    dcc4:	.word	0x0000de39
    dcc8:	.word	0x00010009
    dccc:	.word	0x00020012
    dcd0:	.word	0x0000ddb5
    dcd4:	.word	0x0000ddd9

0000dcd8 <__sinit>:
    dcd8:	push	{r4, lr}
    dcda:	mov	r4, r0
    dcdc:	ldr	r0, [pc, #40]	; (dd08 <__sinit+0x30>)
    dcde:	bl	e32c <__retarget_lock_acquire_recursive>
    dce2:	ldr	r3, [r4, #52]	; 0x34
    dce4:	cbnz	r3, dcf0 <__sinit+0x18>
    dce6:	ldr	r3, [pc, #36]	; (dd0c <__sinit+0x34>)
    dce8:	ldr	r2, [pc, #36]	; (dd10 <__sinit+0x38>)
    dcea:	ldr	r3, [r3, #0]
    dcec:	str	r2, [r4, #52]	; 0x34
    dcee:	cbz	r3, dcfa <__sinit+0x22>
    dcf0:	ldmia.w	sp!, {r4, lr}
    dcf4:	ldr	r0, [pc, #16]	; (dd08 <__sinit+0x30>)
    dcf6:	b.w	e330 <__retarget_lock_release_recursive>
    dcfa:	bl	dc04 <global_stdio_init.part.0>
    dcfe:	ldmia.w	sp!, {r4, lr}
    dd02:	ldr	r0, [pc, #4]	; (dd08 <__sinit+0x30>)
    dd04:	b.w	e330 <__retarget_lock_release_recursive>
    dd08:	.word	0x2000677c
    dd0c:	.word	0x200068ec
    dd10:	.word	0x0000dbc5

0000dd14 <__sfp_lock_acquire>:
    dd14:	ldr	r0, [pc, #4]	; (dd1c <__sfp_lock_acquire+0x8>)
    dd16:	b.w	e32c <__retarget_lock_acquire_recursive>
    dd1a:	nop
    dd1c:	.word	0x2000677c

0000dd20 <__sfp_lock_release>:
    dd20:	ldr	r0, [pc, #4]	; (dd28 <__sfp_lock_release+0x8>)
    dd22:	b.w	e330 <__retarget_lock_release_recursive>
    dd26:	nop
    dd28:	.word	0x2000677c

0000dd2c <_fwalk_sglue>:
    dd2c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    dd30:	mov	r8, r0
    dd32:	mov	r7, r1
    dd34:	mov	r6, r2
    dd36:	mov.w	r9, #0
    dd3a:	ldrd	r5, r4, [r6, #4]
    dd3e:	subs	r5, #1
    dd40:	bmi.n	dd66 <_fwalk_sglue+0x3a>
    dd42:	ldrh	r3, [r4, #12]
    dd44:	cmp	r3, #1
    dd46:	add.w	r5, r5, #4294967295
    dd4a:	bls.n	dd5e <_fwalk_sglue+0x32>
    dd4c:	ldrsh.w	r3, [r4, #14]
    dd50:	adds	r3, #1
    dd52:	mov	r1, r4
    dd54:	beq.n	dd5e <_fwalk_sglue+0x32>
    dd56:	mov	r0, r8
    dd58:	blx	r7
    dd5a:	orr.w	r9, r9, r0
    dd5e:	adds	r3, r5, #1
    dd60:	add.w	r4, r4, #104	; 0x68
    dd64:	bne.n	dd42 <_fwalk_sglue+0x16>
    dd66:	ldr	r6, [r6, #0]
    dd68:	cmp	r6, #0
    dd6a:	bne.n	dd3a <_fwalk_sglue+0xe>
    dd6c:	mov	r0, r9
    dd6e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    dd72:	nop

0000dd74 <sprintf>:
    dd74:	push	{r1, r2, r3}
    dd76:	push	{r4, lr}
    dd78:	sub	sp, #116	; 0x74
    dd7a:	mvn.w	r1, #2147483648	; 0x80000000
    dd7e:	add	r3, sp, #124	; 0x7c
    dd80:	strd	r0, r1, [sp, #24]
    dd84:	str	r1, [sp, #16]
    dd86:	ldr	r1, [pc, #36]	; (ddac <sprintf+0x38>)
    dd88:	ldr.w	r2, [r3], #4
    dd8c:	str	r0, [sp, #8]
    dd8e:	ldr	r4, [pc, #32]	; (ddb0 <sprintf+0x3c>)
    dd90:	ldr	r0, [r1, #0]
    dd92:	str	r3, [sp, #4]
    dd94:	add	r1, sp, #8
    dd96:	str	r4, [sp, #20]
    dd98:	bl	efd0 <_svfprintf_r>
    dd9c:	ldr	r3, [sp, #8]
    dd9e:	movs	r2, #0
    dda0:	strb	r2, [r3, #0]
    dda2:	add	sp, #116	; 0x74
    dda4:	ldmia.w	sp!, {r4, lr}
    dda8:	add	sp, #12
    ddaa:	bx	lr
    ddac:	.word	0x20001a10
    ddb0:	.word	0xffff0208

0000ddb4 <__sread>:
    ddb4:	push	{r4, lr}
    ddb6:	mov	r4, r1
    ddb8:	ldrsh.w	r1, [r1, #14]
    ddbc:	bl	e254 <_read_r>
    ddc0:	cmp	r0, #0
    ddc2:	blt.n	ddcc <__sread+0x18>
    ddc4:	ldr	r3, [r4, #80]	; 0x50
    ddc6:	add	r3, r0
    ddc8:	str	r3, [r4, #80]	; 0x50
    ddca:	pop	{r4, pc}
    ddcc:	ldrh	r3, [r4, #12]
    ddce:	bic.w	r3, r3, #4096	; 0x1000
    ddd2:	strh	r3, [r4, #12]
    ddd4:	pop	{r4, pc}
    ddd6:	nop

0000ddd8 <__swrite>:
    ddd8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dddc:	mov	r4, r1
    ddde:	ldrsh.w	r1, [r1, #12]
    dde2:	mov	r7, r3
    dde4:	lsls	r3, r1, #23
    dde6:	mov	r5, r0
    dde8:	mov	r6, r2
    ddea:	bmi.n	de04 <__swrite+0x2c>
    ddec:	bic.w	r1, r1, #4096	; 0x1000
    ddf0:	strh	r1, [r4, #12]
    ddf2:	mov	r3, r7
    ddf4:	ldrsh.w	r1, [r4, #14]
    ddf8:	mov	r2, r6
    ddfa:	mov	r0, r5
    ddfc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    de00:	b.w	e2a4 <_write_r>
    de04:	ldrsh.w	r1, [r4, #14]
    de08:	movs	r3, #2
    de0a:	movs	r2, #0
    de0c:	bl	e228 <_lseek_r>
    de10:	ldrsh.w	r1, [r4, #12]
    de14:	b.n	ddec <__swrite+0x14>
    de16:	nop

0000de18 <__sseek>:
    de18:	push	{r4, lr}
    de1a:	mov	r4, r1
    de1c:	ldrsh.w	r1, [r1, #14]
    de20:	bl	e228 <_lseek_r>
    de24:	ldrh	r3, [r4, #12]
    de26:	adds	r2, r0, #1
    de28:	itee	eq
    de2a:	biceq.w	r3, r3, #4096	; 0x1000
    de2e:	orrne.w	r3, r3, #4096	; 0x1000
    de32:	strne	r0, [r4, #80]	; 0x50
    de34:	strh	r3, [r4, #12]
    de36:	pop	{r4, pc}

0000de38 <__sclose>:
    de38:	ldrsh.w	r1, [r1, #14]
    de3c:	b.w	e204 <_close_r>

0000de40 <_vdprintf_r>:
    de40:	push	{r4, r5, r6, r7, lr}
    de42:	sub.w	sp, sp, #532	; 0x214
    de46:	add	r7, sp, #16
    de48:	str	r3, [sp, #0]
    de4a:	mov	r3, r2
    de4c:	mov.w	r2, #512	; 0x200
    de50:	mov	r6, r1
    de52:	str	r2, [sp, #12]
    de54:	mov	r1, r7
    de56:	add	r2, sp, #12
    de58:	mov	r5, r0
    de5a:	bl	dea8 <_vasnprintf_r>
    de5e:	cbz	r0, de84 <_vdprintf_r+0x44>
    de60:	mov	r4, r0
    de62:	mov	r2, r0
    de64:	ldr	r3, [sp, #12]
    de66:	mov	r1, r6
    de68:	mov	r0, r5
    de6a:	bl	e2a4 <_write_r>
    de6e:	cmp	r4, r7
    de70:	str	r0, [sp, #12]
    de72:	beq.n	de7e <_vdprintf_r+0x3e>
    de74:	mov	r0, r5
    de76:	mov	r1, r4
    de78:	bl	e604 <_free_r>
    de7c:	ldr	r0, [sp, #12]
    de7e:	add.w	sp, sp, #532	; 0x214
    de82:	pop	{r4, r5, r6, r7, pc}
    de84:	mov.w	r0, #4294967295
    de88:	b.n	de7e <_vdprintf_r+0x3e>
    de8a:	nop

0000de8c <vdprintf>:
    de8c:	push	{r4}
    de8e:	ldr	r4, [pc, #20]	; (dea4 <vdprintf+0x18>)
    de90:	mov	ip, r0
    de92:	mov	r3, r2
    de94:	ldr	r0, [r4, #0]
    de96:	ldr.w	r4, [sp], #4
    de9a:	mov	r2, r1
    de9c:	mov	r1, ip
    de9e:	b.w	de40 <_vdprintf_r>
    dea2:	nop
    dea4:	.word	0x20001a10

0000dea8 <_vasnprintf_r>:
    dea8:	push	{r4, r5, lr}
    deaa:	ldr	r4, [r2, #0]
    deac:	mov	r5, r2
    deae:	sub	sp, #108	; 0x6c
    deb0:	mov	r2, r3
    deb2:	cbz	r1, deb8 <_vasnprintf_r+0x10>
    deb4:	cmp	r4, #0
    deb6:	bne.n	deec <_vasnprintf_r+0x44>
    deb8:	movs	r1, #0
    deba:	mov.w	r3, #648	; 0x288
    debe:	strh.w	r3, [sp, #12]
    dec2:	str	r1, [sp, #0]
    dec4:	str	r1, [sp, #16]
    dec6:	movw	r3, #65535	; 0xffff
    deca:	str	r1, [sp, #8]
    decc:	str	r1, [sp, #20]
    dece:	strh.w	r3, [sp, #14]
    ded2:	mov	r1, sp
    ded4:	ldr	r3, [sp, #120]	; 0x78
    ded6:	bl	efd0 <_svfprintf_r>
    deda:	cmp	r0, #0
    dedc:	blt.n	df06 <_vasnprintf_r+0x5e>
    dede:	ldr	r3, [sp, #0]
    dee0:	str	r0, [r5, #0]
    dee2:	movs	r2, #0
    dee4:	strb	r2, [r3, #0]
    dee6:	ldr	r0, [sp, #16]
    dee8:	add	sp, #108	; 0x6c
    deea:	pop	{r4, r5, pc}
    deec:	mov.w	r3, #1544	; 0x608
    def0:	str	r1, [sp, #0]
    def2:	str	r1, [sp, #16]
    def4:	strh.w	r3, [sp, #12]
    def8:	mov	r1, r4
    defa:	bge.n	dec6 <_vasnprintf_r+0x1e>
    defc:	movs	r3, #139	; 0x8b
    defe:	str	r3, [r0, #0]
    df00:	movs	r0, #0
    df02:	add	sp, #108	; 0x6c
    df04:	pop	{r4, r5, pc}
    df06:	movs	r0, #0
    df08:	b.n	dee8 <_vasnprintf_r+0x40>
    df0a:	nop

0000df0c <memcmp>:
    df0c:	cmp	r2, #3
    df0e:	push	{r4, r5, r6, lr}
    df10:	bls.n	df3c <memcmp+0x30>
    df12:	orr.w	r3, r0, r1
    df16:	lsls	r3, r3, #30
    df18:	bne.n	df60 <memcmp+0x54>
    df1a:	mov	r4, r0
    df1c:	mov	r3, r1
    df1e:	mov	r1, r3
    df20:	mov	r0, r4
    df22:	ldr	r6, [r1, #0]
    df24:	ldr	r5, [r0, #0]
    df26:	cmp	r5, r6
    df28:	add.w	r4, r4, #4
    df2c:	add.w	r3, r3, #4
    df30:	bne.n	df60 <memcmp+0x54>
    df32:	subs	r2, #4
    df34:	cmp	r2, #3
    df36:	mov	r0, r4
    df38:	mov	r1, r3
    df3a:	bhi.n	df1e <memcmp+0x12>
    df3c:	subs	r4, r2, #1
    df3e:	cbz	r2, df68 <memcmp+0x5c>
    df40:	subs	r2, r0, #1
    df42:	subs	r1, #1
    df44:	b.n	df4a <memcmp+0x3e>
    df46:	adds	r3, r0, r3
    df48:	beq.n	df64 <memcmp+0x58>
    df4a:	ldrb.w	lr, [r2, #1]!
    df4e:	ldrb.w	ip, [r1, #1]!
    df52:	cmp	lr, ip
    df54:	sub.w	r3, r4, r2
    df58:	beq.n	df46 <memcmp+0x3a>
    df5a:	sub.w	r0, lr, ip
    df5e:	pop	{r4, r5, r6, pc}
    df60:	subs	r4, r2, #1
    df62:	b.n	df40 <memcmp+0x34>
    df64:	mov	r0, r3
    df66:	pop	{r4, r5, r6, pc}
    df68:	mov	r0, r2
    df6a:	pop	{r4, r5, r6, pc}

0000df6c <memmove>:
    df6c:	cmp	r0, r1
    df6e:	bls.n	df8c <memmove+0x20>
    df70:	adds	r3, r1, r2
    df72:	cmp	r3, r0
    df74:	bls.n	df8c <memmove+0x20>
    df76:	add.w	ip, r0, r2
    df7a:	cbz	r2, dfac <memmove+0x40>
    df7c:	mov	r2, ip
    df7e:	ldrb.w	ip, [r3, #-1]!
    df82:	strb.w	ip, [r2, #-1]!
    df86:	cmp	r1, r3
    df88:	bne.n	df7e <memmove+0x12>
    df8a:	bx	lr
    df8c:	cmp	r2, #15
    df8e:	bhi.n	dfae <memmove+0x42>
    df90:	mov	r3, r0
    df92:	add.w	ip, r2, #4294967295
    df96:	cbz	r2, dfac <memmove+0x40>
    df98:	add.w	ip, ip, #1
    df9c:	subs	r3, #1
    df9e:	add	ip, r1
    dfa0:	ldrb.w	r2, [r1], #1
    dfa4:	strb.w	r2, [r3, #1]!
    dfa8:	cmp	r1, ip
    dfaa:	bne.n	dfa0 <memmove+0x34>
    dfac:	bx	lr
    dfae:	orr.w	r3, r0, r1
    dfb2:	lsls	r3, r3, #30
    dfb4:	bne.n	e058 <memmove+0xec>
    dfb6:	sub.w	r3, r2, #16
    dfba:	push	{r4, r5, r6, lr}
    dfbc:	add.w	ip, r1, #32
    dfc0:	bic.w	r5, r3, #15
    dfc4:	add.w	lr, r1, #16
    dfc8:	add.w	r4, r0, #16
    dfcc:	add	ip, r5
    dfce:	lsrs	r3, r3, #4
    dfd0:	ldr.w	r5, [lr, #-16]
    dfd4:	str.w	r5, [r4, #-16]
    dfd8:	ldr.w	r5, [lr, #-12]
    dfdc:	str.w	r5, [r4, #-12]
    dfe0:	ldr.w	r5, [lr, #-8]
    dfe4:	str.w	r5, [r4, #-8]
    dfe8:	ldr.w	r5, [lr, #-4]
    dfec:	str.w	r5, [r4, #-4]
    dff0:	add.w	lr, lr, #16
    dff4:	cmp	lr, ip
    dff6:	add.w	r4, r4, #16
    dffa:	bne.n	dfd0 <memmove+0x64>
    dffc:	adds	r3, #1
    dffe:	tst.w	r2, #12
    e002:	add.w	r1, r1, r3, lsl #4
    e006:	and.w	r4, r2, #15
    e00a:	add.w	r3, r0, r3, lsl #4
    e00e:	beq.n	e060 <memmove+0xf4>
    e010:	subs	r4, #4
    e012:	bic.w	r6, r4, #3
    e016:	mov.w	ip, r4, lsr #2
    e01a:	add	r6, r3
    e01c:	subs	r4, r3, #4
    e01e:	mov	lr, r1
    e020:	ldr.w	r5, [lr], #4
    e024:	str.w	r5, [r4, #4]!
    e028:	cmp	r4, r6
    e02a:	bne.n	e020 <memmove+0xb4>
    e02c:	add.w	r4, ip, #1
    e030:	and.w	r2, r2, #3
    e034:	add.w	r3, r3, r4, lsl #2
    e038:	add.w	r1, r1, r4, lsl #2
    e03c:	add.w	ip, r2, #4294967295
    e040:	cbz	r2, e056 <memmove+0xea>
    e042:	add.w	ip, ip, #1
    e046:	subs	r3, #1
    e048:	add	ip, r1
    e04a:	ldrb.w	r2, [r1], #1
    e04e:	strb.w	r2, [r3, #1]!
    e052:	cmp	r1, ip
    e054:	bne.n	e04a <memmove+0xde>
    e056:	pop	{r4, r5, r6, pc}
    e058:	add.w	ip, r2, #4294967295
    e05c:	mov	r3, r0
    e05e:	b.n	df98 <memmove+0x2c>
    e060:	mov	r2, r4
    e062:	b.n	e03c <memmove+0xd0>

0000e064 <memset>:
    e064:	lsls	r3, r0, #30
    e066:	push	{r4, r5, lr}
    e068:	beq.n	e0fc <memset+0x98>
    e06a:	subs	r4, r2, #1
    e06c:	cmp	r2, #0
    e06e:	beq.n	e0f0 <memset+0x8c>
    e070:	uxtb	r2, r1
    e072:	mov	r3, r0
    e074:	b.n	e07a <memset+0x16>
    e076:	subs	r4, #1
    e078:	bcc.n	e0f0 <memset+0x8c>
    e07a:	strb.w	r2, [r3], #1
    e07e:	lsls	r5, r3, #30
    e080:	bne.n	e076 <memset+0x12>
    e082:	cmp	r4, #3
    e084:	bls.n	e0e2 <memset+0x7e>
    e086:	uxtb	r5, r1
    e088:	orr.w	r5, r5, r5, lsl #8
    e08c:	cmp	r4, #15
    e08e:	orr.w	r5, r5, r5, lsl #16
    e092:	bls.n	e102 <memset+0x9e>
    e094:	sub.w	r2, r4, #16
    e098:	bic.w	ip, r2, #15
    e09c:	add.w	lr, r3, #32
    e0a0:	add	lr, ip
    e0a2:	mov.w	ip, r2, lsr #4
    e0a6:	add.w	r2, r3, #16
    e0aa:	strd	r5, r5, [r2, #-16]
    e0ae:	strd	r5, r5, [r2, #-8]
    e0b2:	adds	r2, #16
    e0b4:	cmp	r2, lr
    e0b6:	bne.n	e0aa <memset+0x46>
    e0b8:	add.w	r2, ip, #1
    e0bc:	tst.w	r4, #12
    e0c0:	add.w	r2, r3, r2, lsl #4
    e0c4:	and.w	ip, r4, #15
    e0c8:	beq.n	e0f2 <memset+0x8e>
    e0ca:	sub.w	r3, ip, #4
    e0ce:	bic.w	r3, r3, #3
    e0d2:	adds	r3, #4
    e0d4:	add	r3, r2
    e0d6:	str.w	r5, [r2], #4
    e0da:	cmp	r3, r2
    e0dc:	bne.n	e0d6 <memset+0x72>
    e0de:	and.w	r4, ip, #3
    e0e2:	cbz	r4, e0f0 <memset+0x8c>
    e0e4:	uxtb	r1, r1
    e0e6:	add	r4, r3
    e0e8:	strb.w	r1, [r3], #1
    e0ec:	cmp	r4, r3
    e0ee:	bne.n	e0e8 <memset+0x84>
    e0f0:	pop	{r4, r5, pc}
    e0f2:	mov	r4, ip
    e0f4:	mov	r3, r2
    e0f6:	cmp	r4, #0
    e0f8:	bne.n	e0e4 <memset+0x80>
    e0fa:	b.n	e0f0 <memset+0x8c>
    e0fc:	mov	r3, r0
    e0fe:	mov	r4, r2
    e100:	b.n	e082 <memset+0x1e>
    e102:	mov	r2, r3
    e104:	mov	ip, r4
    e106:	b.n	e0ca <memset+0x66>

0000e108 <strncmp>:
    e108:	cmp	r2, #0
    e10a:	beq.n	e18a <strncmp+0x82>
    e10c:	orr.w	r3, r0, r1
    e110:	lsls	r3, r3, #30
    e112:	push	{r4, r5, lr}
    e114:	mov	ip, r0
    e116:	bne.n	e178 <strncmp+0x70>
    e118:	cmp	r2, #3
    e11a:	bls.n	e178 <strncmp+0x70>
    e11c:	mov	r3, r1
    e11e:	b.n	e132 <strncmp+0x2a>
    e120:	subs	r2, #4
    e122:	mov	ip, r0
    e124:	mov	r1, r3
    e126:	beq.n	e174 <strncmp+0x6c>
    e128:	tst.w	lr, #2155905152	; 0x80808080
    e12c:	bne.n	e174 <strncmp+0x6c>
    e12e:	cmp	r2, #3
    e130:	bls.n	e178 <strncmp+0x70>
    e132:	ldr	r4, [r0, #0]
    e134:	mov	r1, r3
    e136:	ldr.w	r5, [r3], #4
    e13a:	sub.w	lr, r4, #16843009	; 0x1010101
    e13e:	cmp	r4, r5
    e140:	mov	ip, r0
    e142:	bic.w	lr, lr, r4
    e146:	add.w	r0, r0, #4
    e14a:	beq.n	e120 <strncmp+0x18>
    e14c:	ldrb.w	r0, [ip]
    e150:	ldrb	r4, [r1, #0]
    e152:	cmp	r0, r4
    e154:	bne.n	e18e <strncmp+0x86>
    e156:	mov	lr, ip
    e158:	cbz	r0, e176 <strncmp+0x6e>
    e15a:	ldrb.w	r0, [lr, #1]!
    e15e:	ldrb.w	r4, [r1, #1]!
    e162:	sub.w	r3, r2, lr
    e166:	cmp	r0, r4
    e168:	add.w	r3, r3, #4294967295
    e16c:	bne.n	e18e <strncmp+0x86>
    e16e:	adds.w	r3, ip, r3
    e172:	bne.n	e158 <strncmp+0x50>
    e174:	movs	r0, #0
    e176:	pop	{r4, r5, pc}
    e178:	ldrb.w	r0, [ip]
    e17c:	ldrb	r4, [r1, #0]
    e17e:	cmp	r4, r0
    e180:	bne.n	e18e <strncmp+0x86>
    e182:	cmp	r2, #1
    e184:	beq.n	e174 <strncmp+0x6c>
    e186:	mov	lr, ip
    e188:	b.n	e158 <strncmp+0x50>
    e18a:	mov	r0, r2
    e18c:	bx	lr
    e18e:	subs	r0, r0, r4
    e190:	pop	{r4, r5, pc}
    e192:	nop

0000e194 <strncpy>:
    e194:	orr.w	r3, r0, r1
    e198:	lsls	r3, r3, #30
    e19a:	push	{r4, r5, lr}
    e19c:	bne.n	e1a2 <strncpy+0xe>
    e19e:	cmp	r2, #3
    e1a0:	bhi.n	e1c2 <strncpy+0x2e>
    e1a2:	mov	ip, r0
    e1a4:	add.w	lr, r1, #4294967295
    e1a8:	b.n	e1ba <strncpy+0x26>
    e1aa:	ldrb.w	r1, [lr, #1]!
    e1ae:	strb.w	r1, [r3], #1
    e1b2:	subs	r4, r2, #1
    e1b4:	cbz	r1, e1e8 <strncpy+0x54>
    e1b6:	mov	ip, r3
    e1b8:	mov	r2, r4
    e1ba:	mov	r3, ip
    e1bc:	cmp	r2, #0
    e1be:	bne.n	e1aa <strncpy+0x16>
    e1c0:	pop	{r4, r5, pc}
    e1c2:	mov	r3, r1
    e1c4:	mov	ip, r0
    e1c6:	mov	r1, r3
    e1c8:	ldr.w	r5, [r3], #4
    e1cc:	sub.w	r4, r5, #16843009	; 0x1010101
    e1d0:	bic.w	r4, r4, r5
    e1d4:	tst.w	r4, #2155905152	; 0x80808080
    e1d8:	bne.n	e1a4 <strncpy+0x10>
    e1da:	subs	r2, #4
    e1dc:	cmp	r2, #3
    e1de:	str.w	r5, [ip], #4
    e1e2:	mov	r1, r3
    e1e4:	bhi.n	e1c6 <strncpy+0x32>
    e1e6:	b.n	e1a4 <strncpy+0x10>
    e1e8:	add	ip, r2
    e1ea:	cmp	r4, #0
    e1ec:	beq.n	e1c0 <strncpy+0x2c>
    e1ee:	strb.w	r1, [r3], #1
    e1f2:	cmp	r3, ip
    e1f4:	bne.n	e1ee <strncpy+0x5a>
    e1f6:	pop	{r4, r5, pc}

0000e1f8 <__locale_mb_cur_max>:
    e1f8:	ldr	r3, [pc, #4]	; (e200 <__locale_mb_cur_max+0x8>)
    e1fa:	ldrb.w	r0, [r3, #296]	; 0x128
    e1fe:	bx	lr
    e200:	.word	0x20001488

0000e204 <_close_r>:
    e204:	push	{r3, r4, r5, lr}
    e206:	ldr	r5, [pc, #28]	; (e224 <_close_r+0x20>)
    e208:	movs	r2, #0
    e20a:	mov	r4, r0
    e20c:	mov	r0, r1
    e20e:	str	r2, [r5, #0]
    e210:	bl	ba78 <_close>
    e214:	adds	r3, r0, #1
    e216:	beq.n	e21a <_close_r+0x16>
    e218:	pop	{r3, r4, r5, pc}
    e21a:	ldr	r3, [r5, #0]
    e21c:	cmp	r3, #0
    e21e:	beq.n	e218 <_close_r+0x14>
    e220:	str	r3, [r4, #0]
    e222:	pop	{r3, r4, r5, pc}
    e224:	.word	0x2000739c

0000e228 <_lseek_r>:
    e228:	push	{r3, r4, r5, lr}
    e22a:	mov	r4, r1
    e22c:	ldr	r5, [pc, #32]	; (e250 <_lseek_r+0x28>)
    e22e:	mov	ip, r0
    e230:	mov	r1, r2
    e232:	mov	r0, r4
    e234:	mov	r2, r3
    e236:	movs	r3, #0
    e238:	str	r3, [r5, #0]
    e23a:	mov	r4, ip
    e23c:	bl	ba90 <_lseek>
    e240:	adds	r3, r0, #1
    e242:	beq.n	e246 <_lseek_r+0x1e>
    e244:	pop	{r3, r4, r5, pc}
    e246:	ldr	r3, [r5, #0]
    e248:	cmp	r3, #0
    e24a:	beq.n	e244 <_lseek_r+0x1c>
    e24c:	str	r3, [r4, #0]
    e24e:	pop	{r3, r4, r5, pc}
    e250:	.word	0x2000739c

0000e254 <_read_r>:
    e254:	push	{r3, r4, r5, lr}
    e256:	mov	r4, r1
    e258:	ldr	r5, [pc, #32]	; (e27c <_read_r+0x28>)
    e25a:	mov	ip, r0
    e25c:	mov	r1, r2
    e25e:	mov	r0, r4
    e260:	mov	r2, r3
    e262:	movs	r3, #0
    e264:	str	r3, [r5, #0]
    e266:	mov	r4, ip
    e268:	bl	ba74 <_read>
    e26c:	adds	r3, r0, #1
    e26e:	beq.n	e272 <_read_r+0x1e>
    e270:	pop	{r3, r4, r5, pc}
    e272:	ldr	r3, [r5, #0]
    e274:	cmp	r3, #0
    e276:	beq.n	e270 <_read_r+0x1c>
    e278:	str	r3, [r4, #0]
    e27a:	pop	{r3, r4, r5, pc}
    e27c:	.word	0x2000739c

0000e280 <_sbrk_r>:
    e280:	push	{r3, r4, r5, lr}
    e282:	ldr	r5, [pc, #28]	; (e2a0 <_sbrk_r+0x20>)
    e284:	movs	r2, #0
    e286:	mov	r4, r0
    e288:	mov	r0, r1
    e28a:	str	r2, [r5, #0]
    e28c:	bl	ba40 <_sbrk>
    e290:	adds	r3, r0, #1
    e292:	beq.n	e296 <_sbrk_r+0x16>
    e294:	pop	{r3, r4, r5, pc}
    e296:	ldr	r3, [r5, #0]
    e298:	cmp	r3, #0
    e29a:	beq.n	e294 <_sbrk_r+0x14>
    e29c:	str	r3, [r4, #0]
    e29e:	pop	{r3, r4, r5, pc}
    e2a0:	.word	0x2000739c

0000e2a4 <_write_r>:
    e2a4:	push	{r3, r4, r5, lr}
    e2a6:	mov	r4, r1
    e2a8:	ldr	r5, [pc, #32]	; (e2cc <_write_r+0x28>)
    e2aa:	mov	ip, r0
    e2ac:	mov	r1, r2
    e2ae:	mov	r0, r4
    e2b0:	mov	r2, r3
    e2b2:	movs	r3, #0
    e2b4:	str	r3, [r5, #0]
    e2b6:	mov	r4, ip
    e2b8:	bl	d068 <_write>
    e2bc:	adds	r3, r0, #1
    e2be:	beq.n	e2c2 <_write_r+0x1e>
    e2c0:	pop	{r3, r4, r5, pc}
    e2c2:	ldr	r3, [r5, #0]
    e2c4:	cmp	r3, #0
    e2c6:	beq.n	e2c0 <_write_r+0x1c>
    e2c8:	str	r3, [r4, #0]
    e2ca:	pop	{r3, r4, r5, pc}
    e2cc:	.word	0x2000739c

0000e2d0 <__errno>:
    e2d0:	ldr	r3, [pc, #4]	; (e2d8 <__errno+0x8>)
    e2d2:	ldr	r0, [r3, #0]
    e2d4:	bx	lr
    e2d6:	nop
    e2d8:	.word	0x20001a10

0000e2dc <__libc_init_array>:
    e2dc:	push	{r4, r5, r6, lr}
    e2de:	ldr	r6, [pc, #52]	; (e314 <__libc_init_array+0x38>)
    e2e0:	ldr	r5, [pc, #52]	; (e318 <__libc_init_array+0x3c>)
    e2e2:	subs	r6, r6, r5
    e2e4:	asrs	r6, r6, #2
    e2e6:	beq.n	e2f6 <__libc_init_array+0x1a>
    e2e8:	movs	r4, #0
    e2ea:	ldr.w	r3, [r5], #4
    e2ee:	adds	r4, #1
    e2f0:	blx	r3
    e2f2:	cmp	r6, r4
    e2f4:	bne.n	e2ea <__libc_init_array+0xe>
    e2f6:	ldr	r6, [pc, #36]	; (e31c <__libc_init_array+0x40>)
    e2f8:	ldr	r5, [pc, #36]	; (e320 <__libc_init_array+0x44>)
    e2fa:	subs	r6, r6, r5
    e2fc:	bl	13698 <___init_veneer>
    e300:	asrs	r6, r6, #2
    e302:	beq.n	e312 <__libc_init_array+0x36>
    e304:	movs	r4, #0
    e306:	ldr.w	r3, [r5], #4
    e30a:	adds	r4, #1
    e30c:	blx	r3
    e30e:	cmp	r6, r4
    e310:	bne.n	e306 <__libc_init_array+0x2a>
    e312:	pop	{r4, r5, r6, pc}
    e314:	.word	0x60001f10
    e318:	.word	0x60001f10
    e31c:	.word	0x60001f8c
    e320:	.word	0x60001f10

0000e324 <__retarget_lock_init_recursive>:
    e324:	bx	lr
    e326:	nop

0000e328 <__retarget_lock_close_recursive>:
    e328:	bx	lr
    e32a:	nop

0000e32c <__retarget_lock_acquire_recursive>:
    e32c:	bx	lr
    e32e:	nop

0000e330 <__retarget_lock_release_recursive>:
    e330:	bx	lr
    e332:	nop
	...

0000e340 <memchr>:
    e340:	and.w	r1, r1, #255	; 0xff
    e344:	cmp	r2, #16
    e346:	blt.n	e3a0 <memchr+0x60>
    e348:	tst.w	r0, #7
    e34c:	beq.n	e360 <memchr+0x20>
    e34e:	ldrb.w	r3, [r0], #1
    e352:	subs	r2, #1
    e354:	cmp	r3, r1
    e356:	beq.n	e3b4 <memchr+0x74>
    e358:	tst.w	r0, #7
    e35c:	cbz	r2, e3b0 <memchr+0x70>
    e35e:	bne.n	e34e <memchr+0xe>
    e360:	push	{r4, r5, r6, r7}
    e362:	orr.w	r1, r1, r1, lsl #8
    e366:	orr.w	r1, r1, r1, lsl #16
    e36a:	bic.w	r4, r2, #7
    e36e:	mvns.w	r7, #0
    e372:	movs	r3, #0
    e374:	ldrd	r5, r6, [r0], #8
    e378:	subs	r4, #8
    e37a:	eor.w	r5, r5, r1
    e37e:	eor.w	r6, r6, r1
    e382:	uadd8	r5, r5, r7
    e386:	sel	r5, r3, r7
    e38a:	uadd8	r6, r6, r7
    e38e:	sel	r6, r5, r7
    e392:	cbnz	r6, e3b8 <memchr+0x78>
    e394:	bne.n	e374 <memchr+0x34>
    e396:	pop	{r4, r5, r6, r7}
    e398:	and.w	r1, r1, #255	; 0xff
    e39c:	and.w	r2, r2, #7
    e3a0:	cbz	r2, e3b0 <memchr+0x70>
    e3a2:	ldrb.w	r3, [r0], #1
    e3a6:	subs	r2, #1
    e3a8:	eor.w	r3, r3, r1
    e3ac:	cbz	r3, e3b4 <memchr+0x74>
    e3ae:	bne.n	e3a2 <memchr+0x62>
    e3b0:	movs	r0, #0
    e3b2:	bx	lr
    e3b4:	subs	r0, #1
    e3b6:	bx	lr
    e3b8:	cmp	r5, #0
    e3ba:	itte	eq
    e3bc:	moveq	r5, r6
    e3be:	subeq	r0, #3
    e3c0:	subne	r0, #7
    e3c2:	tst.w	r5, #1
    e3c6:	bne.n	e3d8 <memchr+0x98>
    e3c8:	adds	r0, #1
    e3ca:	tst.w	r5, #256	; 0x100
    e3ce:	ittt	eq
    e3d0:	addeq	r0, #1
    e3d2:	tsteq.w	r5, #98304	; 0x18000
    e3d6:	addeq	r0, #1
    e3d8:	pop	{r4, r5, r6, r7}
    e3da:	subs	r0, #1
    e3dc:	bx	lr
    e3de:	nop
	...

0000e400 <strlen>:
    e400:	pld	[r0]
    e404:	strd	r4, r5, [sp, #-8]!
    e408:	bic.w	r1, r0, #7
    e40c:	mvn.w	ip, #0
    e410:	ands.w	r4, r0, #7
    e414:	pld	[r1, #32]
    e418:	bne.w	e4ae <strlen+0xae>
    e41c:	mov.w	r4, #0
    e420:	mvn.w	r0, #7
    e424:	ldrd	r2, r3, [r1]
    e428:	pld	[r1, #64]	; 0x40
    e42c:	add.w	r0, r0, #8
    e430:	uadd8	r2, r2, ip
    e434:	sel	r2, r4, ip
    e438:	uadd8	r3, r3, ip
    e43c:	sel	r3, r2, ip
    e440:	cbnz	r3, e496 <strlen+0x96>
    e442:	ldrd	r2, r3, [r1, #8]
    e446:	uadd8	r2, r2, ip
    e44a:	add.w	r0, r0, #8
    e44e:	sel	r2, r4, ip
    e452:	uadd8	r3, r3, ip
    e456:	sel	r3, r2, ip
    e45a:	cbnz	r3, e496 <strlen+0x96>
    e45c:	ldrd	r2, r3, [r1, #16]
    e460:	uadd8	r2, r2, ip
    e464:	add.w	r0, r0, #8
    e468:	sel	r2, r4, ip
    e46c:	uadd8	r3, r3, ip
    e470:	sel	r3, r2, ip
    e474:	cbnz	r3, e496 <strlen+0x96>
    e476:	ldrd	r2, r3, [r1, #24]
    e47a:	add.w	r1, r1, #32
    e47e:	uadd8	r2, r2, ip
    e482:	add.w	r0, r0, #8
    e486:	sel	r2, r4, ip
    e48a:	uadd8	r3, r3, ip
    e48e:	sel	r3, r2, ip
    e492:	cmp	r3, #0
    e494:	beq.n	e424 <strlen+0x24>
    e496:	cmp	r2, #0
    e498:	itt	eq
    e49a:	addeq	r0, #4
    e49c:	moveq	r2, r3
    e49e:	rev	r2, r2
    e4a0:	clz	r2, r2
    e4a4:	ldrd	r4, r5, [sp], #8
    e4a8:	add.w	r0, r0, r2, lsr #3
    e4ac:	bx	lr
    e4ae:	ldrd	r2, r3, [r1]
    e4b2:	and.w	r5, r4, #3
    e4b6:	rsb	r0, r4, #0
    e4ba:	mov.w	r5, r5, lsl #3
    e4be:	tst.w	r4, #4
    e4c2:	pld	[r1, #64]	; 0x40
    e4c6:	lsl.w	r5, ip, r5
    e4ca:	orn	r2, r2, r5
    e4ce:	itt	ne
    e4d0:	ornne	r3, r3, r5
    e4d4:	movne	r2, ip
    e4d6:	mov.w	r4, #0
    e4da:	b.n	e430 <strlen+0x30>

0000e4dc <__register_exitproc>:
    e4dc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e4e0:	ldr.w	sl, [pc, #124]	; e560 <__register_exitproc+0x84>
    e4e4:	mov	r6, r0
    e4e6:	ldr.w	r0, [sl]
    e4ea:	mov	r8, r3
    e4ec:	mov	r7, r1
    e4ee:	mov	r9, r2
    e4f0:	bl	e32c <__retarget_lock_acquire_recursive>
    e4f4:	ldr	r3, [pc, #96]	; (e558 <__register_exitproc+0x7c>)
    e4f6:	ldr	r4, [r3, #0]
    e4f8:	cbz	r4, e544 <__register_exitproc+0x68>
    e4fa:	ldr	r5, [r4, #4]
    e4fc:	cmp	r5, #31
    e4fe:	bgt.n	e54a <__register_exitproc+0x6e>
    e500:	cbnz	r6, e51a <__register_exitproc+0x3e>
    e502:	adds	r3, r5, #1
    e504:	adds	r5, #2
    e506:	ldr.w	r0, [sl]
    e50a:	str	r3, [r4, #4]
    e50c:	str.w	r7, [r4, r5, lsl #2]
    e510:	bl	e330 <__retarget_lock_release_recursive>
    e514:	movs	r0, #0
    e516:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e51a:	add.w	r1, r4, r5, lsl #2
    e51e:	movs	r3, #1
    e520:	str.w	r9, [r1, #136]	; 0x88
    e524:	ldr.w	r2, [r4, #392]	; 0x188
    e528:	lsls	r3, r5
    e52a:	orrs	r2, r3
    e52c:	cmp	r6, #2
    e52e:	str.w	r2, [r4, #392]	; 0x188
    e532:	str.w	r8, [r1, #264]	; 0x108
    e536:	bne.n	e502 <__register_exitproc+0x26>
    e538:	ldr.w	r2, [r4, #396]	; 0x18c
    e53c:	orrs	r2, r3
    e53e:	str.w	r2, [r4, #396]	; 0x18c
    e542:	b.n	e502 <__register_exitproc+0x26>
    e544:	ldr	r4, [pc, #20]	; (e55c <__register_exitproc+0x80>)
    e546:	str	r4, [r3, #0]
    e548:	b.n	e4fa <__register_exitproc+0x1e>
    e54a:	ldr.w	r0, [sl]
    e54e:	bl	e330 <__retarget_lock_release_recursive>
    e552:	mov.w	r0, #4294967295
    e556:	b.n	e516 <__register_exitproc+0x3a>
    e558:	.word	0x200065e0
    e55c:	.word	0x200065e4
    e560:	.word	0x2000147c

0000e564 <_malloc_trim_r>:
    e564:	push	{r3, r4, r5, r6, r7, lr}
    e566:	ldr	r7, [pc, #144]	; (e5f8 <_malloc_trim_r+0x94>)
    e568:	mov	r4, r1
    e56a:	mov	r6, r0
    e56c:	bl	d7b0 <__malloc_lock>
    e570:	ldr	r3, [r7, #8]
    e572:	ldr	r5, [r3, #4]
    e574:	rsb	r1, r4, #4064	; 0xfe0
    e578:	adds	r1, #15
    e57a:	bic.w	r5, r5, #3
    e57e:	adds	r3, r1, r5
    e580:	bic.w	r3, r3, #4080	; 0xff0
    e584:	bic.w	r3, r3, #15
    e588:	sub.w	r4, r3, #4096	; 0x1000
    e58c:	cmp.w	r4, #4096	; 0x1000
    e590:	blt.n	e5a2 <_malloc_trim_r+0x3e>
    e592:	movs	r1, #0
    e594:	mov	r0, r6
    e596:	bl	e280 <_sbrk_r>
    e59a:	ldr	r3, [r7, #8]
    e59c:	add	r3, r5
    e59e:	cmp	r0, r3
    e5a0:	beq.n	e5ac <_malloc_trim_r+0x48>
    e5a2:	mov	r0, r6
    e5a4:	bl	d7bc <__malloc_unlock>
    e5a8:	movs	r0, #0
    e5aa:	pop	{r3, r4, r5, r6, r7, pc}
    e5ac:	negs	r1, r4
    e5ae:	mov	r0, r6
    e5b0:	bl	e280 <_sbrk_r>
    e5b4:	adds	r0, #1
    e5b6:	beq.n	e5d4 <_malloc_trim_r+0x70>
    e5b8:	ldr	r2, [pc, #64]	; (e5fc <_malloc_trim_r+0x98>)
    e5ba:	ldr	r3, [r7, #8]
    e5bc:	subs	r5, r5, r4
    e5be:	orr.w	r5, r5, #1
    e5c2:	str	r5, [r3, #4]
    e5c4:	ldr	r3, [r2, #0]
    e5c6:	mov	r0, r6
    e5c8:	subs	r3, r3, r4
    e5ca:	str	r3, [r2, #0]
    e5cc:	bl	d7bc <__malloc_unlock>
    e5d0:	movs	r0, #1
    e5d2:	pop	{r3, r4, r5, r6, r7, pc}
    e5d4:	movs	r1, #0
    e5d6:	mov	r0, r6
    e5d8:	bl	e280 <_sbrk_r>
    e5dc:	ldr	r2, [r7, #8]
    e5de:	subs	r3, r0, r2
    e5e0:	cmp	r3, #15
    e5e2:	ble.n	e5a2 <_malloc_trim_r+0x3e>
    e5e4:	orr.w	r3, r3, #1
    e5e8:	str	r3, [r2, #4]
    e5ea:	ldr	r3, [pc, #20]	; (e600 <_malloc_trim_r+0x9c>)
    e5ec:	ldr	r1, [pc, #12]	; (e5fc <_malloc_trim_r+0x98>)
    e5ee:	ldr	r3, [r3, #0]
    e5f0:	subs	r0, r0, r3
    e5f2:	str	r0, [r1, #0]
    e5f4:	b.n	e5a2 <_malloc_trim_r+0x3e>
    e5f6:	nop
    e5f8:	.word	0x200015f4
    e5fc:	.word	0x20006780
    e600:	.word	0x200019fc

0000e604 <_free_r>:
    e604:	cmp	r1, #0
    e606:	beq.n	e6cc <_free_r+0xc8>
    e608:	push	{r3, r4, r5, r6, r7, lr}
    e60a:	mov	r4, r1
    e60c:	mov	r6, r0
    e60e:	bl	d7b0 <__malloc_lock>
    e612:	ldr.w	r2, [r4, #-4]
    e616:	ldr	r7, [pc, #492]	; (e804 <_free_r+0x200>)
    e618:	sub.w	r5, r4, #8
    e61c:	bic.w	r1, r2, #1
    e620:	add.w	ip, r5, r1
    e624:	ldr	r0, [r7, #8]
    e626:	ldr.w	r3, [ip, #4]
    e62a:	cmp	r0, ip
    e62c:	bic.w	r3, r3, #3
    e630:	beq.w	e74a <_free_r+0x146>
    e634:	lsls	r2, r2, #31
    e636:	str.w	r3, [ip, #4]
    e63a:	bmi.n	e6a2 <_free_r+0x9e>
    e63c:	ldr.w	r2, [r4, #-8]
    e640:	subs	r5, r5, r2
    e642:	add	r1, r2
    e644:	ldr	r2, [r5, #8]
    e646:	add.w	r0, r7, #8
    e64a:	cmp	r2, r0
    e64c:	beq.n	e724 <_free_r+0x120>
    e64e:	add.w	r4, ip, r3
    e652:	ldr.w	lr, [r4, #4]
    e656:	ldr	r4, [r5, #12]
    e658:	str	r4, [r2, #12]
    e65a:	tst.w	lr, #1
    e65e:	str	r2, [r4, #8]
    e660:	beq.w	e792 <_free_r+0x18e>
    e664:	orr.w	r3, r1, #1
    e668:	str	r3, [r5, #4]
    e66a:	str.w	r1, [ip]
    e66e:	cmp.w	r1, #512	; 0x200
    e672:	bcs.n	e6e0 <_free_r+0xdc>
    e674:	ldr	r0, [r7, #4]
    e676:	lsrs	r3, r1, #3
    e678:	movs	r2, #1
    e67a:	lsrs	r1, r1, #5
    e67c:	adds	r3, #1
    e67e:	lsls	r2, r1
    e680:	orrs	r2, r0
    e682:	ldr.w	r1, [r7, r3, lsl #3]
    e686:	str	r2, [r7, #4]
    e688:	add.w	r2, r7, r3, lsl #3
    e68c:	subs	r2, #8
    e68e:	strd	r1, r2, [r5, #8]
    e692:	str.w	r5, [r7, r3, lsl #3]
    e696:	str	r5, [r1, #12]
    e698:	mov	r0, r6
    e69a:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    e69e:	b.w	d7bc <__malloc_unlock>
    e6a2:	add.w	r2, ip, r3
    e6a6:	ldr	r2, [r2, #4]
    e6a8:	lsls	r0, r2, #31
    e6aa:	bmi.n	e6ce <_free_r+0xca>
    e6ac:	add	r1, r3
    e6ae:	add.w	r0, r7, #8
    e6b2:	ldr.w	r3, [ip, #8]
    e6b6:	cmp	r3, r0
    e6b8:	beq.n	e7a2 <_free_r+0x19e>
    e6ba:	ldr.w	r2, [ip, #12]
    e6be:	str	r2, [r3, #12]
    e6c0:	str	r3, [r2, #8]
    e6c2:	orr.w	r3, r1, #1
    e6c6:	str	r3, [r5, #4]
    e6c8:	str	r1, [r5, r1]
    e6ca:	b.n	e66e <_free_r+0x6a>
    e6cc:	bx	lr
    e6ce:	orr.w	r3, r1, #1
    e6d2:	cmp.w	r1, #512	; 0x200
    e6d6:	str.w	r3, [r4, #-4]
    e6da:	str.w	r1, [ip]
    e6de:	bcc.n	e674 <_free_r+0x70>
    e6e0:	cmp.w	r1, #2560	; 0xa00
    e6e4:	mov.w	r3, r1, lsr #9
    e6e8:	bcs.n	e77c <_free_r+0x178>
    e6ea:	lsrs	r3, r1, #6
    e6ec:	add.w	r0, r3, #57	; 0x39
    e6f0:	add.w	r2, r3, #56	; 0x38
    e6f4:	lsls	r3, r0, #3
    e6f6:	adds	r0, r7, r3
    e6f8:	ldr	r3, [r7, r3]
    e6fa:	subs	r0, #8
    e6fc:	cmp	r0, r3
    e6fe:	beq.n	e7b4 <_free_r+0x1b0>
    e700:	ldr	r2, [r3, #4]
    e702:	bic.w	r2, r2, #3
    e706:	cmp	r2, r1
    e708:	bls.n	e710 <_free_r+0x10c>
    e70a:	ldr	r3, [r3, #8]
    e70c:	cmp	r0, r3
    e70e:	bne.n	e700 <_free_r+0xfc>
    e710:	ldr	r0, [r3, #12]
    e712:	strd	r3, r0, [r5, #8]
    e716:	str	r5, [r0, #8]
    e718:	str	r5, [r3, #12]
    e71a:	mov	r0, r6
    e71c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    e720:	b.w	d7bc <__malloc_unlock>
    e724:	add.w	r2, ip, r3
    e728:	ldr	r2, [r2, #4]
    e72a:	lsls	r2, r2, #31
    e72c:	bmi.n	e7f6 <_free_r+0x1f2>
    e72e:	add	r3, r1
    e730:	ldrd	r1, r2, [ip, #8]
    e734:	str	r2, [r1, #12]
    e736:	str	r1, [r2, #8]
    e738:	orr.w	r2, r3, #1
    e73c:	str	r2, [r5, #4]
    e73e:	mov	r0, r6
    e740:	str	r3, [r5, r3]
    e742:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    e746:	b.w	d7bc <__malloc_unlock>
    e74a:	add	r3, r1
    e74c:	lsls	r1, r2, #31
    e74e:	bmi.n	e760 <_free_r+0x15c>
    e750:	ldr.w	r2, [r4, #-8]
    e754:	subs	r5, r5, r2
    e756:	add	r3, r2
    e758:	ldrd	r1, r2, [r5, #8]
    e75c:	str	r2, [r1, #12]
    e75e:	str	r1, [r2, #8]
    e760:	orr.w	r2, r3, #1
    e764:	str	r2, [r5, #4]
    e766:	ldr	r2, [pc, #160]	; (e808 <_free_r+0x204>)
    e768:	str	r5, [r7, #8]
    e76a:	ldr	r2, [r2, #0]
    e76c:	cmp	r2, r3
    e76e:	bhi.n	e698 <_free_r+0x94>
    e770:	ldr	r3, [pc, #152]	; (e80c <_free_r+0x208>)
    e772:	mov	r0, r6
    e774:	ldr	r1, [r3, #0]
    e776:	bl	e564 <_malloc_trim_r>
    e77a:	b.n	e698 <_free_r+0x94>
    e77c:	cmp	r3, #20
    e77e:	bls.n	e796 <_free_r+0x192>
    e780:	cmp	r3, #84	; 0x54
    e782:	bhi.n	e7c4 <_free_r+0x1c0>
    e784:	lsrs	r3, r1, #12
    e786:	add.w	r0, r3, #111	; 0x6f
    e78a:	add.w	r2, r3, #110	; 0x6e
    e78e:	lsls	r3, r0, #3
    e790:	b.n	e6f6 <_free_r+0xf2>
    e792:	add	r1, r3
    e794:	b.n	e6b2 <_free_r+0xae>
    e796:	add.w	r0, r3, #92	; 0x5c
    e79a:	add.w	r2, r3, #91	; 0x5b
    e79e:	lsls	r3, r0, #3
    e7a0:	b.n	e6f6 <_free_r+0xf2>
    e7a2:	orr.w	r3, r1, #1
    e7a6:	strd	r5, r5, [r7, #16]
    e7aa:	strd	r0, r0, [r5, #8]
    e7ae:	str	r3, [r5, #4]
    e7b0:	str	r1, [r5, r1]
    e7b2:	b.n	e698 <_free_r+0x94>
    e7b4:	ldr	r1, [r7, #4]
    e7b6:	asrs	r2, r2, #2
    e7b8:	movs	r4, #1
    e7ba:	lsl.w	r2, r4, r2
    e7be:	orrs	r2, r1
    e7c0:	str	r2, [r7, #4]
    e7c2:	b.n	e712 <_free_r+0x10e>
    e7c4:	cmp.w	r3, #340	; 0x154
    e7c8:	bhi.n	e7d8 <_free_r+0x1d4>
    e7ca:	lsrs	r3, r1, #15
    e7cc:	add.w	r0, r3, #120	; 0x78
    e7d0:	add.w	r2, r3, #119	; 0x77
    e7d4:	lsls	r3, r0, #3
    e7d6:	b.n	e6f6 <_free_r+0xf2>
    e7d8:	movw	r2, #1364	; 0x554
    e7dc:	cmp	r3, r2
    e7de:	bhi.n	e7ee <_free_r+0x1ea>
    e7e0:	lsrs	r3, r1, #18
    e7e2:	add.w	r0, r3, #125	; 0x7d
    e7e6:	add.w	r2, r3, #124	; 0x7c
    e7ea:	lsls	r3, r0, #3
    e7ec:	b.n	e6f6 <_free_r+0xf2>
    e7ee:	mov.w	r3, #1016	; 0x3f8
    e7f2:	movs	r2, #126	; 0x7e
    e7f4:	b.n	e6f6 <_free_r+0xf2>
    e7f6:	orr.w	r3, r1, #1
    e7fa:	str	r3, [r5, #4]
    e7fc:	str.w	r1, [ip]
    e800:	b.n	e698 <_free_r+0x94>
    e802:	nop
    e804:	.word	0x200015f4
    e808:	.word	0x20001a00
    e80c:	.word	0x200067b0

0000e810 <__ascii_mbtowc>:
    e810:	sub	sp, #8
    e812:	cbz	r1, e828 <__ascii_mbtowc+0x18>
    e814:	cbz	r2, e82e <__ascii_mbtowc+0x1e>
    e816:	cbz	r3, e834 <__ascii_mbtowc+0x24>
    e818:	ldrb	r3, [r2, #0]
    e81a:	str	r3, [r1, #0]
    e81c:	ldrb	r2, [r2, #0]
    e81e:	subs	r0, r2, #0
    e820:	it	ne
    e822:	movne	r0, #1
    e824:	add	sp, #8
    e826:	bx	lr
    e828:	add	r1, sp, #4
    e82a:	cmp	r2, #0
    e82c:	bne.n	e816 <__ascii_mbtowc+0x6>
    e82e:	mov	r0, r2
    e830:	add	sp, #8
    e832:	bx	lr
    e834:	mvn.w	r0, #1
    e838:	b.n	e824 <__ascii_mbtowc+0x14>
    e83a:	nop

0000e83c <_Balloc>:
    e83c:	ldr	r3, [r0, #68]	; 0x44
    e83e:	push	{r4, r5, r6, lr}
    e840:	mov	r5, r0
    e842:	mov	r4, r1
    e844:	cbz	r3, e85a <_Balloc+0x1e>
    e846:	ldr.w	r0, [r3, r4, lsl #2]
    e84a:	cbz	r0, e86e <_Balloc+0x32>
    e84c:	ldr	r2, [r0, #0]
    e84e:	str.w	r2, [r3, r4, lsl #2]
    e852:	movs	r3, #0
    e854:	strd	r3, r3, [r0, #12]
    e858:	pop	{r4, r5, r6, pc}
    e85a:	movs	r2, #33	; 0x21
    e85c:	movs	r1, #4
    e85e:	bl	10e20 <_calloc_r>
    e862:	mov	r3, r0
    e864:	str	r0, [r5, #68]	; 0x44
    e866:	cmp	r0, #0
    e868:	bne.n	e846 <_Balloc+0xa>
    e86a:	movs	r0, #0
    e86c:	pop	{r4, r5, r6, pc}
    e86e:	movs	r1, #1
    e870:	lsl.w	r6, r1, r4
    e874:	adds	r2, r6, #5
    e876:	lsls	r2, r2, #2
    e878:	mov	r0, r5
    e87a:	bl	10e20 <_calloc_r>
    e87e:	cmp	r0, #0
    e880:	beq.n	e86a <_Balloc+0x2e>
    e882:	strd	r4, r6, [r0, #4]
    e886:	b.n	e852 <_Balloc+0x16>

0000e888 <_Bfree>:
    e888:	cbz	r1, e898 <_Bfree+0x10>
    e88a:	ldr	r3, [r0, #68]	; 0x44
    e88c:	ldr	r2, [r1, #4]
    e88e:	ldr.w	r0, [r3, r2, lsl #2]
    e892:	str	r0, [r1, #0]
    e894:	str.w	r1, [r3, r2, lsl #2]
    e898:	bx	lr
    e89a:	nop

0000e89c <__multadd>:
    e89c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e8a0:	ldr	r6, [r1, #16]
    e8a2:	mov	r8, r0
    e8a4:	mov	r7, r1
    e8a6:	mov	r5, r3
    e8a8:	add.w	lr, r1, #20
    e8ac:	movs	r0, #0
    e8ae:	ldr.w	r1, [lr]
    e8b2:	uxth	r4, r1
    e8b4:	mla	r3, r2, r4, r5
    e8b8:	lsrs	r1, r1, #16
    e8ba:	mov.w	ip, r3, lsr #16
    e8be:	mla	ip, r2, r1, ip
    e8c2:	adds	r0, #1
    e8c4:	uxth	r4, r3
    e8c6:	add.w	r4, r4, ip, lsl #16
    e8ca:	cmp	r6, r0
    e8cc:	str.w	r4, [lr], #4
    e8d0:	mov.w	r5, ip, lsr #16
    e8d4:	bgt.n	e8ae <__multadd+0x12>
    e8d6:	cbz	r5, e8e8 <__multadd+0x4c>
    e8d8:	ldr	r3, [r7, #8]
    e8da:	cmp	r3, r6
    e8dc:	ble.n	e8ee <__multadd+0x52>
    e8de:	add.w	r3, r7, r6, lsl #2
    e8e2:	adds	r6, #1
    e8e4:	str	r5, [r3, #20]
    e8e6:	str	r6, [r7, #16]
    e8e8:	mov	r0, r7
    e8ea:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e8ee:	ldr	r1, [r7, #4]
    e8f0:	mov	r0, r8
    e8f2:	adds	r1, #1
    e8f4:	bl	e83c <_Balloc>
    e8f8:	mov	r4, r0
    e8fa:	cbz	r0, e92a <__multadd+0x8e>
    e8fc:	ldr	r2, [r7, #16]
    e8fe:	adds	r2, #2
    e900:	add.w	r1, r7, #12
    e904:	lsls	r2, r2, #2
    e906:	adds	r0, #12
    e908:	bl	a0c4 <memcpy>
    e90c:	ldr.w	r3, [r8, #68]	; 0x44
    e910:	ldr	r2, [r7, #4]
    e912:	ldr.w	r1, [r3, r2, lsl #2]
    e916:	str	r1, [r7, #0]
    e918:	str.w	r7, [r3, r2, lsl #2]
    e91c:	mov	r7, r4
    e91e:	add.w	r3, r7, r6, lsl #2
    e922:	adds	r6, #1
    e924:	str	r5, [r3, #20]
    e926:	str	r6, [r7, #16]
    e928:	b.n	e8e8 <__multadd+0x4c>
    e92a:	ldr	r3, [pc, #12]	; (e938 <__multadd+0x9c>)
    e92c:	ldr	r0, [pc, #12]	; (e93c <__multadd+0xa0>)
    e92e:	mov	r2, r4
    e930:	movs	r1, #186	; 0xba
    e932:	bl	10de0 <__assert_func>
    e936:	nop
    e938:	.word	0x20000c78
    e93c:	.word	0x20000c8c

0000e940 <__hi0bits>:
    e940:	lsrs	r3, r0, #16
    e942:	lsls	r3, r3, #16
    e944:	cbnz	r3, e97c <__hi0bits+0x3c>
    e946:	lsls	r0, r0, #16
    e948:	movs	r3, #16
    e94a:	tst.w	r0, #4278190080	; 0xff000000
    e94e:	itt	eq
    e950:	lsleq	r0, r0, #8
    e952:	addeq	r3, #8
    e954:	tst.w	r0, #4026531840	; 0xf0000000
    e958:	itt	eq
    e95a:	lsleq	r0, r0, #4
    e95c:	addeq	r3, #4
    e95e:	tst.w	r0, #3221225472	; 0xc0000000
    e962:	itt	eq
    e964:	lsleq	r0, r0, #2
    e966:	addeq	r3, #2
    e968:	cmp	r0, #0
    e96a:	blt.n	e978 <__hi0bits+0x38>
    e96c:	tst.w	r0, #1073741824	; 0x40000000
    e970:	add.w	r3, r3, #1
    e974:	it	eq
    e976:	moveq	r3, #32
    e978:	mov	r0, r3
    e97a:	bx	lr
    e97c:	movs	r3, #0
    e97e:	b.n	e94a <__hi0bits+0xa>

0000e980 <__lo0bits>:
    e980:	ldr	r3, [r0, #0]
    e982:	ands.w	r2, r3, #7
    e986:	beq.n	e99a <__lo0bits+0x1a>
    e988:	lsls	r1, r3, #31
    e98a:	bmi.n	e9cc <__lo0bits+0x4c>
    e98c:	lsls	r2, r3, #30
    e98e:	bpl.n	e9d6 <__lo0bits+0x56>
    e990:	lsrs	r3, r3, #1
    e992:	str	r3, [r0, #0]
    e994:	movs	r2, #1
    e996:	mov	r0, r2
    e998:	bx	lr
    e99a:	uxth	r1, r3
    e99c:	cbnz	r1, e9a2 <__lo0bits+0x22>
    e99e:	lsrs	r3, r3, #16
    e9a0:	movs	r2, #16
    e9a2:	uxtb	r1, r3
    e9a4:	cbnz	r1, e9aa <__lo0bits+0x2a>
    e9a6:	adds	r2, #8
    e9a8:	lsrs	r3, r3, #8
    e9aa:	lsls	r1, r3, #28
    e9ac:	itt	eq
    e9ae:	lsreq	r3, r3, #4
    e9b0:	addeq	r2, #4
    e9b2:	lsls	r1, r3, #30
    e9b4:	itt	eq
    e9b6:	lsreq	r3, r3, #2
    e9b8:	addeq	r2, #2
    e9ba:	lsls	r1, r3, #31
    e9bc:	bmi.n	e9c6 <__lo0bits+0x46>
    e9be:	lsrs	r3, r3, #1
    e9c0:	add.w	r2, r2, #1
    e9c4:	beq.n	e9d2 <__lo0bits+0x52>
    e9c6:	str	r3, [r0, #0]
    e9c8:	mov	r0, r2
    e9ca:	bx	lr
    e9cc:	movs	r2, #0
    e9ce:	mov	r0, r2
    e9d0:	bx	lr
    e9d2:	movs	r2, #32
    e9d4:	b.n	e996 <__lo0bits+0x16>
    e9d6:	lsrs	r3, r3, #2
    e9d8:	movs	r2, #2
    e9da:	str	r3, [r0, #0]
    e9dc:	mov	r0, r2
    e9de:	bx	lr

0000e9e0 <__i2b>:
    e9e0:	push	{r3, r4, r5, lr}
    e9e2:	ldr	r3, [r0, #68]	; 0x44
    e9e4:	mov	r4, r0
    e9e6:	mov	r5, r1
    e9e8:	cbz	r3, e9fe <__i2b+0x1e>
    e9ea:	ldr	r0, [r3, #4]
    e9ec:	cbz	r0, ea1c <__i2b+0x3c>
    e9ee:	ldr	r2, [r0, #0]
    e9f0:	str	r2, [r3, #4]
    e9f2:	movs	r2, #0
    e9f4:	movs	r3, #1
    e9f6:	strd	r3, r5, [r0, #16]
    e9fa:	str	r2, [r0, #12]
    e9fc:	pop	{r3, r4, r5, pc}
    e9fe:	movs	r2, #33	; 0x21
    ea00:	movs	r1, #4
    ea02:	bl	10e20 <_calloc_r>
    ea06:	mov	r3, r0
    ea08:	str	r0, [r4, #68]	; 0x44
    ea0a:	cmp	r0, #0
    ea0c:	bne.n	e9ea <__i2b+0xa>
    ea0e:	ldr	r3, [pc, #36]	; (ea34 <__i2b+0x54>)
    ea10:	ldr	r0, [pc, #36]	; (ea38 <__i2b+0x58>)
    ea12:	movs	r2, #0
    ea14:	movw	r1, #325	; 0x145
    ea18:	bl	10de0 <__assert_func>
    ea1c:	movs	r2, #28
    ea1e:	movs	r1, #1
    ea20:	mov	r0, r4
    ea22:	bl	10e20 <_calloc_r>
    ea26:	cmp	r0, #0
    ea28:	beq.n	ea0e <__i2b+0x2e>
    ea2a:	movs	r2, #1
    ea2c:	movs	r3, #2
    ea2e:	strd	r2, r3, [r0, #4]
    ea32:	b.n	e9f2 <__i2b+0x12>
    ea34:	.word	0x20000c78
    ea38:	.word	0x20000c8c

0000ea3c <__multiply>:
    ea3c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ea40:	ldr	r6, [r1, #16]
    ea42:	ldr	r5, [r2, #16]
    ea44:	cmp	r6, r5
    ea46:	sub	sp, #20
    ea48:	mov	r8, r1
    ea4a:	mov	r4, r2
    ea4c:	blt.n	ea5a <__multiply+0x1e>
    ea4e:	mov	r2, r5
    ea50:	mov	r3, r4
    ea52:	mov	r5, r6
    ea54:	mov	r4, r1
    ea56:	mov	r6, r2
    ea58:	mov	r8, r3
    ea5a:	ldr	r3, [r4, #8]
    ea5c:	ldr	r1, [r4, #4]
    ea5e:	adds	r7, r5, r6
    ea60:	cmp	r3, r7
    ea62:	it	lt
    ea64:	addlt	r1, #1
    ea66:	bl	e83c <_Balloc>
    ea6a:	str	r0, [sp, #4]
    ea6c:	cmp	r0, #0
    ea6e:	beq.w	eb80 <__multiply+0x144>
    ea72:	ldr	r3, [sp, #4]
    ea74:	add.w	r9, r3, #20
    ea78:	add.w	sl, r9, r7, lsl #2
    ea7c:	cmp	r9, sl
    ea7e:	bcs.n	ea8c <__multiply+0x50>
    ea80:	mov	r3, r9
    ea82:	movs	r2, #0
    ea84:	str.w	r2, [r3], #4
    ea88:	cmp	sl, r3
    ea8a:	bhi.n	ea84 <__multiply+0x48>
    ea8c:	add.w	r8, r8, #20
    ea90:	add.w	fp, r8, r6, lsl #2
    ea94:	add.w	r3, r4, #20
    ea98:	cmp	r8, fp
    ea9a:	mov	r2, r3
    ea9c:	add.w	r5, r3, r5, lsl #2
    eaa0:	bcs.n	eb62 <__multiply+0x126>
    eaa2:	subs	r3, r5, r4
    eaa4:	subs	r3, #21
    eaa6:	bic.w	r3, r3, #3
    eaaa:	adds	r3, #4
    eaac:	adds	r4, #21
    eaae:	cmp	r5, r4
    eab0:	it	cc
    eab2:	movcc	r3, #4
    eab4:	strd	sl, r7, [sp, #8]
    eab8:	mov	ip, r5
    eaba:	mov	r7, r3
    eabc:	mov	sl, r2
    eabe:	b.n	eacc <__multiply+0x90>
    eac0:	lsrs	r1, r1, #16
    eac2:	bne.n	eb18 <__multiply+0xdc>
    eac4:	cmp	fp, r8
    eac6:	add.w	r9, r9, #4
    eaca:	bls.n	eb5e <__multiply+0x122>
    eacc:	ldr.w	r1, [r8], #4
    ead0:	uxth	r5, r1
    ead2:	cmp	r5, #0
    ead4:	beq.n	eac0 <__multiply+0x84>
    ead6:	mov	r6, sl
    ead8:	mov	r4, r9
    eada:	movs	r3, #0
    eadc:	ldr.w	r1, [r6], #4
    eae0:	ldr	r2, [r4, #0]
    eae2:	uxth.w	lr, r1
    eae6:	uxth	r0, r2
    eae8:	lsrs	r1, r1, #16
    eaea:	mla	r0, r5, lr, r0
    eaee:	lsrs	r2, r2, #16
    eaf0:	add	r3, r0
    eaf2:	mla	r2, r5, r1, r2
    eaf6:	add.w	r2, r2, r3, lsr #16
    eafa:	uxth	r3, r3
    eafc:	orr.w	r3, r3, r2, lsl #16
    eb00:	cmp	ip, r6
    eb02:	str.w	r3, [r4], #4
    eb06:	mov.w	r3, r2, lsr #16
    eb0a:	bhi.n	eadc <__multiply+0xa0>
    eb0c:	str.w	r3, [r9, r7]
    eb10:	ldr.w	r1, [r8, #-4]
    eb14:	lsrs	r1, r1, #16
    eb16:	beq.n	eac4 <__multiply+0x88>
    eb18:	ldr.w	r3, [r9]
    eb1c:	mov	r0, sl
    eb1e:	mov	r2, r3
    eb20:	mov	r4, r9
    eb22:	movs	r6, #0
    eb24:	ldrh	r5, [r0, #0]
    eb26:	lsrs	r2, r2, #16
    eb28:	mla	r2, r1, r5, r2
    eb2c:	add	r6, r2
    eb2e:	uxth	r3, r3
    eb30:	orr.w	r3, r3, r6, lsl #16
    eb34:	str.w	r3, [r4], #4
    eb38:	ldr.w	r5, [r0], #4
    eb3c:	ldr	r2, [r4, #0]
    eb3e:	lsrs	r5, r5, #16
    eb40:	uxth	r3, r2
    eb42:	mla	r3, r1, r5, r3
    eb46:	add.w	r3, r3, r6, lsr #16
    eb4a:	cmp	ip, r0
    eb4c:	mov.w	r6, r3, lsr #16
    eb50:	bhi.n	eb24 <__multiply+0xe8>
    eb52:	cmp	fp, r8
    eb54:	str.w	r3, [r9, r7]
    eb58:	add.w	r9, r9, #4
    eb5c:	bhi.n	eacc <__multiply+0x90>
    eb5e:	ldrd	sl, r7, [sp, #8]
    eb62:	cmp	r7, #0
    eb64:	bgt.n	eb6c <__multiply+0x130>
    eb66:	b.n	eb74 <__multiply+0x138>
    eb68:	subs	r7, #1
    eb6a:	beq.n	eb74 <__multiply+0x138>
    eb6c:	ldr.w	r3, [sl, #-4]!
    eb70:	cmp	r3, #0
    eb72:	beq.n	eb68 <__multiply+0x12c>
    eb74:	ldr	r3, [sp, #4]
    eb76:	mov	r0, r3
    eb78:	str	r7, [r3, #16]
    eb7a:	add	sp, #20
    eb7c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    eb80:	ldr	r3, [pc, #12]	; (eb90 <__multiply+0x154>)
    eb82:	ldr	r0, [pc, #16]	; (eb94 <__multiply+0x158>)
    eb84:	ldr	r2, [sp, #4]
    eb86:	mov.w	r1, #354	; 0x162
    eb8a:	bl	10de0 <__assert_func>
    eb8e:	nop
    eb90:	.word	0x20000c78
    eb94:	.word	0x20000c8c

0000eb98 <__pow5mult>:
    eb98:	ands.w	r3, r2, #3
    eb9c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    eba0:	mov	r4, r2
    eba2:	mov	r6, r0
    eba4:	bne.n	ec0c <__pow5mult+0x74>
    eba6:	mov	r5, r1
    eba8:	asrs	r4, r4, #2
    ebaa:	beq.n	ebee <__pow5mult+0x56>
    ebac:	ldr.w	r8, [r6, #64]	; 0x40
    ebb0:	cmp.w	r8, #0
    ebb4:	beq.n	ec1e <__pow5mult+0x86>
    ebb6:	lsls	r3, r4, #31
    ebb8:	mov.w	r7, #0
    ebbc:	bmi.n	ebce <__pow5mult+0x36>
    ebbe:	asrs	r4, r4, #1
    ebc0:	beq.n	ebee <__pow5mult+0x56>
    ebc2:	ldr.w	r0, [r8]
    ebc6:	cbz	r0, ebf4 <__pow5mult+0x5c>
    ebc8:	mov	r8, r0
    ebca:	lsls	r3, r4, #31
    ebcc:	bpl.n	ebbe <__pow5mult+0x26>
    ebce:	mov	r2, r8
    ebd0:	mov	r1, r5
    ebd2:	mov	r0, r6
    ebd4:	bl	ea3c <__multiply>
    ebd8:	cbz	r5, ec08 <__pow5mult+0x70>
    ebda:	ldr	r1, [r5, #4]
    ebdc:	ldr	r3, [r6, #68]	; 0x44
    ebde:	asrs	r4, r4, #1
    ebe0:	ldr.w	r2, [r3, r1, lsl #2]
    ebe4:	str	r2, [r5, #0]
    ebe6:	str.w	r5, [r3, r1, lsl #2]
    ebea:	mov	r5, r0
    ebec:	bne.n	ebc2 <__pow5mult+0x2a>
    ebee:	mov	r0, r5
    ebf0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ebf4:	mov	r2, r8
    ebf6:	mov	r1, r8
    ebf8:	mov	r0, r6
    ebfa:	bl	ea3c <__multiply>
    ebfe:	str.w	r0, [r8]
    ec02:	str	r7, [r0, #0]
    ec04:	mov	r8, r0
    ec06:	b.n	ebca <__pow5mult+0x32>
    ec08:	mov	r5, r0
    ec0a:	b.n	ebbe <__pow5mult+0x26>
    ec0c:	subs	r3, #1
    ec0e:	ldr	r2, [pc, #60]	; (ec4c <__pow5mult+0xb4>)
    ec10:	ldr.w	r2, [r2, r3, lsl #2]
    ec14:	movs	r3, #0
    ec16:	bl	e89c <__multadd>
    ec1a:	mov	r5, r0
    ec1c:	b.n	eba8 <__pow5mult+0x10>
    ec1e:	movs	r1, #1
    ec20:	mov	r0, r6
    ec22:	bl	e83c <_Balloc>
    ec26:	mov	r8, r0
    ec28:	cbz	r0, ec3c <__pow5mult+0xa4>
    ec2a:	movs	r3, #1
    ec2c:	movw	r2, #625	; 0x271
    ec30:	strd	r3, r2, [r0, #16]
    ec34:	movs	r3, #0
    ec36:	str	r0, [r6, #64]	; 0x40
    ec38:	str	r3, [r0, #0]
    ec3a:	b.n	ebb6 <__pow5mult+0x1e>
    ec3c:	ldr	r3, [pc, #16]	; (ec50 <__pow5mult+0xb8>)
    ec3e:	ldr	r0, [pc, #20]	; (ec54 <__pow5mult+0xbc>)
    ec40:	mov	r2, r8
    ec42:	movw	r1, #325	; 0x145
    ec46:	bl	10de0 <__assert_func>
    ec4a:	nop
    ec4c:	.word	0x20001244
    ec50:	.word	0x20000c78
    ec54:	.word	0x20000c8c

0000ec58 <__lshift>:
    ec58:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ec5c:	mov	r5, r1
    ec5e:	mov	r4, r2
    ec60:	ldr	r7, [r5, #16]
    ec62:	ldr	r3, [r5, #8]
    ec64:	ldr	r1, [r1, #4]
    ec66:	add.w	r7, r7, r2, asr #5
    ec6a:	adds	r6, r7, #1
    ec6c:	cmp	r6, r3
    ec6e:	mov	r8, r0
    ec70:	mov.w	r9, r2, asr #5
    ec74:	ble.n	ec80 <__lshift+0x28>
    ec76:	lsls	r3, r3, #1
    ec78:	cmp	r6, r3
    ec7a:	add.w	r1, r1, #1
    ec7e:	bgt.n	ec76 <__lshift+0x1e>
    ec80:	mov	r0, r8
    ec82:	bl	e83c <_Balloc>
    ec86:	mov	ip, r0
    ec88:	cmp	r0, #0
    ec8a:	beq.n	ed32 <__lshift+0xda>
    ec8c:	cmp.w	r9, #0
    ec90:	add.w	r2, r0, #20
    ec94:	ble.n	ecb4 <__lshift+0x5c>
    ec96:	add.w	r1, r9, #5
    ec9a:	mov.w	lr, r1, lsl #2
    ec9e:	mov	r3, r2
    eca0:	add.w	r1, r0, r1, lsl #2
    eca4:	movs	r0, #0
    eca6:	str.w	r0, [r3], #4
    ecaa:	cmp	r3, r1
    ecac:	bne.n	eca6 <__lshift+0x4e>
    ecae:	sub.w	r3, lr, #20
    ecb2:	add	r2, r3
    ecb4:	ldr	r1, [r5, #16]
    ecb6:	add.w	r3, r5, #20
    ecba:	ands.w	lr, r4, #31
    ecbe:	add.w	r1, r3, r1, lsl #2
    ecc2:	beq.n	ed22 <__lshift+0xca>
    ecc4:	rsb	r9, lr, #32
    ecc8:	mov	r0, r2
    ecca:	mov.w	sl, #0
    ecce:	ldr	r4, [r3, #0]
    ecd0:	lsl.w	r4, r4, lr
    ecd4:	orr.w	r4, r4, sl
    ecd8:	str.w	r4, [r0], #4
    ecdc:	ldr.w	r4, [r3], #4
    ece0:	cmp	r1, r3
    ece2:	lsr.w	sl, r4, r9
    ece6:	bhi.n	ecce <__lshift+0x76>
    ece8:	subs	r3, r1, r5
    ecea:	subs	r3, #21
    ecec:	bic.w	r3, r3, #3
    ecf0:	adds	r3, #4
    ecf2:	add.w	r0, r5, #21
    ecf6:	cmp	r1, r0
    ecf8:	it	cc
    ecfa:	movcc	r3, #4
    ecfc:	cmp.w	sl, #0
    ed00:	it	ne
    ed02:	movne	r7, r6
    ed04:	str.w	sl, [r2, r3]
    ed08:	ldr.w	r3, [r8, #68]	; 0x44
    ed0c:	ldr	r2, [r5, #4]
    ed0e:	str.w	r7, [ip, #16]
    ed12:	ldr.w	r1, [r3, r2, lsl #2]
    ed16:	str	r1, [r5, #0]
    ed18:	mov	r0, ip
    ed1a:	str.w	r5, [r3, r2, lsl #2]
    ed1e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ed22:	subs	r2, #4
    ed24:	ldr.w	r0, [r3], #4
    ed28:	str.w	r0, [r2, #4]!
    ed2c:	cmp	r1, r3
    ed2e:	bhi.n	ed24 <__lshift+0xcc>
    ed30:	b.n	ed08 <__lshift+0xb0>
    ed32:	ldr	r3, [pc, #12]	; (ed40 <__lshift+0xe8>)
    ed34:	ldr	r0, [pc, #12]	; (ed44 <__lshift+0xec>)
    ed36:	mov	r2, ip
    ed38:	mov.w	r1, #478	; 0x1de
    ed3c:	bl	10de0 <__assert_func>
    ed40:	.word	0x20000c78
    ed44:	.word	0x20000c8c

0000ed48 <__mcmp>:
    ed48:	ldr	r3, [r1, #16]
    ed4a:	mov	ip, r0
    ed4c:	ldr	r0, [r0, #16]
    ed4e:	subs	r0, r0, r3
    ed50:	bne.n	ed80 <__mcmp+0x38>
    ed52:	add.w	ip, ip, #20
    ed56:	adds	r1, #20
    ed58:	add.w	r2, ip, r3, lsl #2
    ed5c:	push	{r4}
    ed5e:	add.w	r3, r1, r3, lsl #2
    ed62:	b.n	ed68 <__mcmp+0x20>
    ed64:	cmp	ip, r2
    ed66:	bcs.n	ed7a <__mcmp+0x32>
    ed68:	ldr.w	r4, [r2, #-4]!
    ed6c:	ldr.w	r1, [r3, #-4]!
    ed70:	cmp	r4, r1
    ed72:	beq.n	ed64 <__mcmp+0x1c>
    ed74:	bcs.n	ed82 <__mcmp+0x3a>
    ed76:	mov.w	r0, #4294967295
    ed7a:	ldr.w	r4, [sp], #4
    ed7e:	bx	lr
    ed80:	bx	lr
    ed82:	movs	r0, #1
    ed84:	ldr.w	r4, [sp], #4
    ed88:	bx	lr
    ed8a:	nop

0000ed8c <__mdiff>:
    ed8c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ed90:	ldr	r7, [r1, #16]
    ed92:	ldr	r3, [r2, #16]
    ed94:	subs	r7, r7, r3
    ed96:	cmp	r7, #0
    ed98:	mov	r6, r1
    ed9a:	mov	r8, r2
    ed9c:	bne.n	ee9e <__mdiff+0x112>
    ed9e:	add.w	r5, r1, #20
    eda2:	adds	r2, #20
    eda4:	add.w	r2, r2, r3, lsl #2
    eda8:	add.w	r3, r5, r3, lsl #2
    edac:	b.n	edb2 <__mdiff+0x26>
    edae:	cmp	r5, r3
    edb0:	bcs.n	eea4 <__mdiff+0x118>
    edb2:	ldr.w	r1, [r3, #-4]!
    edb6:	ldr.w	r4, [r2, #-4]!
    edba:	cmp	r1, r4
    edbc:	beq.n	edae <__mdiff+0x22>
    edbe:	bcc.n	ee94 <__mdiff+0x108>
    edc0:	ldr	r1, [r6, #4]
    edc2:	bl	e83c <_Balloc>
    edc6:	mov	r9, r0
    edc8:	cmp	r0, #0
    edca:	beq.n	eebc <__mdiff+0x130>
    edcc:	ldr	r5, [r6, #16]
    edce:	ldr.w	r2, [r8, #16]
    edd2:	str	r7, [r0, #12]
    edd4:	add.w	lr, r8, #20
    edd8:	add.w	r0, r6, #20
    eddc:	add.w	sl, r9, #20
    ede0:	add.w	r1, r6, #16
    ede4:	add.w	r2, lr, r2, lsl #2
    ede8:	add.w	r7, r0, r5, lsl #2
    edec:	mov	r6, sl
    edee:	mov.w	ip, #0
    edf2:	ldr.w	r4, [lr], #4
    edf6:	ldr.w	fp, [r1, #4]!
    edfa:	uxth	r3, r4
    edfc:	uxtah	ip, ip, fp
    ee00:	sub.w	r3, ip, r3
    ee04:	mov.w	ip, r4, lsr #16
    ee08:	rsb	ip, ip, fp, lsr #16
    ee0c:	add.w	ip, ip, r3, asr #16
    ee10:	uxth	r3, r3
    ee12:	orr.w	r3, r3, ip, lsl #16
    ee16:	cmp	r2, lr
    ee18:	str.w	r3, [r6], #4
    ee1c:	mov.w	ip, ip, asr #16
    ee20:	bhi.n	edf2 <__mdiff+0x66>
    ee22:	sub.w	r1, r2, r8
    ee26:	subs	r1, #21
    ee28:	add.w	r8, r8, #21
    ee2c:	cmp	r2, r8
    ee2e:	bic.w	r4, r1, #3
    ee32:	add.w	r4, r4, #4
    ee36:	it	cc
    ee38:	movcc	r4, #4
    ee3a:	add	r0, r4
    ee3c:	bic.w	r2, r1, #3
    ee40:	it	cc
    ee42:	movcc	r2, #0
    ee44:	cmp	r7, r0
    ee46:	add	r2, sl
    ee48:	add	r4, sl
    ee4a:	bls.n	ee7e <__mdiff+0xf2>
    ee4c:	mov	r6, r4
    ee4e:	mov	r1, r0
    ee50:	ldr.w	r3, [r1], #4
    ee54:	uxtah	ip, ip, r3
    ee58:	mov.w	r2, ip, asr #16
    ee5c:	add.w	r2, r2, r3, lsr #16
    ee60:	uxth.w	ip, ip
    ee64:	orr.w	r3, ip, r2, lsl #16
    ee68:	cmp	r7, r1
    ee6a:	str.w	r3, [r6], #4
    ee6e:	mov.w	ip, r2, asr #16
    ee72:	bhi.n	ee50 <__mdiff+0xc4>
    ee74:	subs	r7, #1
    ee76:	subs	r7, r7, r0
    ee78:	bic.w	r7, r7, #3
    ee7c:	adds	r2, r4, r7
    ee7e:	cbnz	r3, ee8a <__mdiff+0xfe>
    ee80:	ldr.w	r3, [r2, #-4]!
    ee84:	subs	r5, #1
    ee86:	cmp	r3, #0
    ee88:	beq.n	ee80 <__mdiff+0xf4>
    ee8a:	str.w	r5, [r9, #16]
    ee8e:	mov	r0, r9
    ee90:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ee94:	mov	r3, r6
    ee96:	movs	r7, #1
    ee98:	mov	r6, r8
    ee9a:	mov	r8, r3
    ee9c:	b.n	edc0 <__mdiff+0x34>
    ee9e:	blt.n	ee94 <__mdiff+0x108>
    eea0:	movs	r7, #0
    eea2:	b.n	edc0 <__mdiff+0x34>
    eea4:	movs	r1, #0
    eea6:	bl	e83c <_Balloc>
    eeaa:	mov	r9, r0
    eeac:	cbz	r0, eeca <__mdiff+0x13e>
    eeae:	movs	r2, #1
    eeb0:	movs	r3, #0
    eeb2:	strd	r2, r3, [r9, #16]
    eeb6:	mov	r0, r9
    eeb8:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    eebc:	ldr	r3, [pc, #24]	; (eed8 <__mdiff+0x14c>)
    eebe:	ldr	r0, [pc, #28]	; (eedc <__mdiff+0x150>)
    eec0:	mov	r2, r9
    eec2:	movw	r1, #581	; 0x245
    eec6:	bl	10de0 <__assert_func>
    eeca:	ldr	r3, [pc, #12]	; (eed8 <__mdiff+0x14c>)
    eecc:	ldr	r0, [pc, #12]	; (eedc <__mdiff+0x150>)
    eece:	mov	r2, r9
    eed0:	movw	r1, #567	; 0x237
    eed4:	bl	10de0 <__assert_func>
    eed8:	.word	0x20000c78
    eedc:	.word	0x20000c8c

0000eee0 <__d2b>:
    eee0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    eee4:	mov	r8, r1
    eee6:	sub	sp, #12
    eee8:	movs	r1, #1
    eeea:	vmov	r6, r7, d0
    eeee:	mov	r5, r2
    eef0:	bl	e83c <_Balloc>
    eef4:	mov	r4, r0
    eef6:	cmp	r0, #0
    eef8:	beq.n	ef9e <__d2b+0xbe>
    eefa:	ubfx	r9, r7, #20, #11
    eefe:	ubfx	r3, r7, #0, #20
    ef02:	cmp.w	r9, #0
    ef06:	beq.n	ef0c <__d2b+0x2c>
    ef08:	orr.w	r3, r3, #1048576	; 0x100000
    ef0c:	cmp	r6, #0
    ef0e:	str	r3, [sp, #4]
    ef10:	bne.n	ef44 <__d2b+0x64>
    ef12:	add	r0, sp, #4
    ef14:	bl	e980 <__lo0bits>
    ef18:	ldr	r2, [sp, #4]
    ef1a:	str	r2, [r4, #20]
    ef1c:	movs	r2, #1
    ef1e:	add.w	r3, r0, #32
    ef22:	str	r2, [r4, #16]
    ef24:	cmp.w	r9, #0
    ef28:	beq.n	ef76 <__d2b+0x96>
    ef2a:	subw	r9, r9, #1075	; 0x433
    ef2e:	add.w	r2, r9, r3
    ef32:	mov	r0, r4
    ef34:	rsb	r3, r3, #53	; 0x35
    ef38:	str.w	r2, [r8]
    ef3c:	str	r3, [r5, #0]
    ef3e:	add	sp, #12
    ef40:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    ef44:	mov	r0, sp
    ef46:	str	r6, [sp, #0]
    ef48:	bl	e980 <__lo0bits>
    ef4c:	mov	r3, r0
    ef4e:	cbz	r0, ef96 <__d2b+0xb6>
    ef50:	ldrd	r0, r2, [sp]
    ef54:	rsb	r1, r3, #32
    ef58:	lsl.w	r1, r2, r1
    ef5c:	orrs	r1, r0
    ef5e:	lsrs	r2, r3
    ef60:	str	r1, [r4, #20]
    ef62:	str	r2, [sp, #4]
    ef64:	cmp	r2, #0
    ef66:	str	r2, [r4, #24]
    ef68:	ite	ne
    ef6a:	movne	r2, #2
    ef6c:	moveq	r2, #1
    ef6e:	str	r2, [r4, #16]
    ef70:	cmp.w	r9, #0
    ef74:	bne.n	ef2a <__d2b+0x4a>
    ef76:	subw	r3, r3, #1074	; 0x432
    ef7a:	str.w	r3, [r8]
    ef7e:	add.w	r3, r4, r2, lsl #2
    ef82:	ldr	r0, [r3, #16]
    ef84:	bl	e940 <__hi0bits>
    ef88:	rsb	r3, r0, r2, lsl #5
    ef8c:	mov	r0, r4
    ef8e:	str	r3, [r5, #0]
    ef90:	add	sp, #12
    ef92:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    ef96:	ldr	r2, [sp, #0]
    ef98:	str	r2, [r4, #20]
    ef9a:	ldr	r2, [sp, #4]
    ef9c:	b.n	ef64 <__d2b+0x84>
    ef9e:	ldr	r3, [pc, #12]	; (efac <__d2b+0xcc>)
    efa0:	ldr	r0, [pc, #12]	; (efb0 <__d2b+0xd0>)
    efa2:	mov	r2, r4
    efa4:	movw	r1, #783	; 0x30f
    efa8:	bl	10de0 <__assert_func>
    efac:	.word	0x20000c78
    efb0:	.word	0x20000c8c

0000efb4 <__ascii_wctomb>:
    efb4:	cbz	r1, efca <__ascii_wctomb+0x16>
    efb6:	cmp	r2, #255	; 0xff
    efb8:	bhi.n	efc0 <__ascii_wctomb+0xc>
    efba:	strb	r2, [r1, #0]
    efbc:	movs	r0, #1
    efbe:	bx	lr
    efc0:	movs	r3, #138	; 0x8a
    efc2:	str	r3, [r0, #0]
    efc4:	mov.w	r0, #4294967295
    efc8:	bx	lr
    efca:	mov	r0, r1
    efcc:	bx	lr
    efce:	nop

0000efd0 <_svfprintf_r>:
    efd0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    efd4:	vpush	{d8-d11}
    efd8:	sub	sp, #324	; 0x144
    efda:	mov	r4, r1
    efdc:	vmov	s22, r1
    efe0:	mov	r8, r2
    efe2:	str	r3, [sp, #32]
    efe4:	mov	fp, r0
    efe6:	bl	10d60 <_localeconv_r>
    efea:	ldr	r3, [r0, #0]
    efec:	str	r3, [sp, #72]	; 0x48
    efee:	mov	r0, r3
    eff0:	bl	e400 <strlen>
    eff4:	add	r7, sp, #128	; 0x80
    eff6:	str	r0, [sp, #64]	; 0x40
    eff8:	movs	r2, #8
    effa:	movs	r1, #0
    effc:	mov	r0, r7
    effe:	bl	e064 <memset>
    f002:	ldrh	r3, [r4, #12]
    f004:	lsls	r3, r3, #24
    f006:	bpl.n	f010 <_svfprintf_r+0x40>
    f008:	ldr	r3, [r4, #16]
    f00a:	cmp	r3, #0
    f00c:	beq.w	feba <_svfprintf_r+0xeea>
    f010:	movs	r3, #0
    f012:	vldr	d8, [pc, #524]	; f220 <_svfprintf_r+0x250>
    f016:	vldr	d9, [pc, #528]	; f228 <_svfprintf_r+0x258>
    f01a:	strd	r3, r3, [sp, #148]	; 0x94
    f01e:	strd	r3, r3, [sp, #76]	; 0x4c
    f022:	strd	r3, r3, [sp, #84]	; 0x54
    f026:	add	r2, sp, #156	; 0x9c
    f028:	str	r3, [sp, #56]	; 0x38
    f02a:	str	r2, [sp, #144]	; 0x90
    f02c:	mov	sl, r2
    f02e:	str	r3, [sp, #68]	; 0x44
    f030:	str	r3, [sp, #16]
    f032:	mov	r4, r8
    f034:	mov	r9, r4
    f036:	ldr	r3, [pc, #504]	; (f230 <_svfprintf_r+0x260>)
    f038:	ldr.w	r5, [r3, #228]	; 0xe4
    f03c:	bl	e1f8 <__locale_mb_cur_max>
    f040:	mov	r2, r9
    f042:	mov	r3, r0
    f044:	add	r1, sp, #112	; 0x70
    f046:	str	r7, [sp, #0]
    f048:	mov	r0, fp
    f04a:	blx	r5
    f04c:	cmp	r0, #0
    f04e:	beq.w	f1b2 <_svfprintf_r+0x1e2>
    f052:	blt.w	f1a2 <_svfprintf_r+0x1d2>
    f056:	ldr	r2, [sp, #112]	; 0x70
    f058:	cmp	r2, #37	; 0x25
    f05a:	mov	r3, r0
    f05c:	beq.n	f062 <_svfprintf_r+0x92>
    f05e:	add	r9, r3
    f060:	b.n	f036 <_svfprintf_r+0x66>
    f062:	subs.w	r5, r9, r4
    f066:	mov	r6, r0
    f068:	bne.w	f1ba <_svfprintf_r+0x1ea>
    f06c:	movs	r3, #0
    f06e:	mov.w	r2, #4294967295
    f072:	strb.w	r3, [sp, #103]	; 0x67
    f076:	mov	r8, r3
    f078:	str	r3, [sp, #24]
    f07a:	add.w	r9, r9, #1
    f07e:	ldrb.w	r3, [r9]
    f082:	str	r2, [sp, #12]
    f084:	movs	r5, #43	; 0x2b
    f086:	movs	r6, #32
    f088:	add.w	r9, r9, #1
    f08c:	sub.w	r2, r3, #32
    f090:	cmp	r2, #90	; 0x5a
    f092:	bhi.w	f234 <_svfprintf_r+0x264>
    f096:	tbh	[pc, r2, lsl #1]
    f09a:	.short	0x02e8
    f09c:	.word	0x00cd00cd
    f0a0:	.word	0x00cd02e3
    f0a4:	.word	0x00cd00cd
    f0a8:	.word	0x00cd006a
    f0ac:	.word	0x020500cd
    f0b0:	.word	0x00cd0284
    f0b4:	.word	0x02c90210
    f0b8:	.word	0x02bd00cd
    f0bc:	.word	0x005b005b
    f0c0:	.word	0x005b005b
    f0c4:	.word	0x005b005b
    f0c8:	.word	0x005b005b
    f0cc:	.word	0x00cd005b
    f0d0:	.word	0x00cd00cd
    f0d4:	.word	0x00cd00cd
    f0d8:	.word	0x00cd00cd
    f0dc:	.word	0x00cd0153
    f0e0:	.word	0x021a0183
    f0e4:	.word	0x01530153
    f0e8:	.word	0x00cd0153
    f0ec:	.word	0x00cd00cd
    f0f0:	.word	0x021500cd
    f0f4:	.word	0x00cd00cd
    f0f8:	.word	0x00cd0296
    f0fc:	.word	0x00cd00cd
    f100:	.word	0x00cd01ab
    f104:	.word	0x00cd02aa
    f108:	.word	0x06e300cd
    f10c:	.word	0x00cd00cd
    f110:	.word	0x00cd00cd
    f114:	.word	0x00cd00cd
    f118:	.word	0x00cd00cd
    f11c:	.word	0x00cd0153
    f120:	.word	0x01de0183
    f124:	.word	0x01530153
    f128:	.word	0x02770153
    f12c:	.word	0x007f01de
    f130:	.word	0x028900cd
    f134:	.word	0x025f00cd
    f138:	.word	0x022f06e0
    f13c:	.word	0x00cd007f
    f140:	.word	0x007c01ab
    f144:	.word	0x00cd06b8
    f148:	.word	0x06bd00cd
    f14c:	.word	0x007c00cd
    f150:	sub.w	r2, r3, #48	; 0x30
    f154:	movs	r1, #0
    f156:	ldrb.w	r3, [r9], #1
    f15a:	add.w	r1, r1, r1, lsl #2
    f15e:	add.w	r1, r2, r1, lsl #1
    f162:	sub.w	r2, r3, #48	; 0x30
    f166:	cmp	r2, #9
    f168:	bls.n	f156 <_svfprintf_r+0x186>
    f16a:	str	r1, [sp, #24]
    f16c:	b.n	f08c <_svfprintf_r+0xbc>
    f16e:	mov	r0, fp
    f170:	bl	10d60 <_localeconv_r>
    f174:	ldr	r3, [r0, #4]
    f176:	str	r3, [sp, #84]	; 0x54
    f178:	mov	r0, r3
    f17a:	bl	e400 <strlen>
    f17e:	str	r0, [sp, #88]	; 0x58
    f180:	mov	r0, fp
    f182:	bl	10d60 <_localeconv_r>
    f186:	ldr	r3, [r0, #8]
    f188:	str	r3, [sp, #76]	; 0x4c
    f18a:	ldr	r3, [sp, #88]	; 0x58
    f18c:	cmp	r3, #0
    f18e:	bne.w	fdec <_svfprintf_r+0xe1c>
    f192:	ldrb.w	r3, [r9]
    f196:	b.n	f088 <_svfprintf_r+0xb8>
    f198:	ldrb.w	r3, [r9]
    f19c:	orr.w	r8, r8, #32
    f1a0:	b.n	f088 <_svfprintf_r+0xb8>
    f1a2:	movs	r2, #8
    f1a4:	movs	r1, #0
    f1a6:	mov	r0, r7
    f1a8:	bl	e064 <memset>
    f1ac:	movs	r3, #1
    f1ae:	add	r9, r3
    f1b0:	b.n	f036 <_svfprintf_r+0x66>
    f1b2:	subs.w	r5, r9, r4
    f1b6:	mov	r6, r0
    f1b8:	beq.n	f1de <_svfprintf_r+0x20e>
    f1ba:	ldr	r3, [sp, #152]	; 0x98
    f1bc:	add	r3, r5
    f1be:	str	r3, [sp, #152]	; 0x98
    f1c0:	ldr	r3, [sp, #148]	; 0x94
    f1c2:	adds	r3, #1
    f1c4:	cmp	r3, #7
    f1c6:	strd	r4, r5, [sl]
    f1ca:	str	r3, [sp, #148]	; 0x94
    f1cc:	bgt.n	f208 <_svfprintf_r+0x238>
    f1ce:	add.w	sl, sl, #8
    f1d2:	ldr	r3, [sp, #16]
    f1d4:	add	r3, r5
    f1d6:	str	r3, [sp, #16]
    f1d8:	cmp	r6, #0
    f1da:	bne.w	f06c <_svfprintf_r+0x9c>
    f1de:	ldr	r3, [sp, #152]	; 0x98
    f1e0:	cmp	r3, #0
    f1e2:	bne.w	105fc <_svfprintf_r+0x162c>
    f1e6:	vmov	r3, s22
    f1ea:	ldrsh.w	r3, [r3, #12]
    f1ee:	tst.w	r3, #64	; 0x40
    f1f2:	ldr	r3, [sp, #16]
    f1f4:	it	ne
    f1f6:	movne.w	r3, #4294967295
    f1fa:	str	r3, [sp, #16]
    f1fc:	ldr	r0, [sp, #16]
    f1fe:	add	sp, #324	; 0x144
    f200:	vpop	{d8-d11}
    f204:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f208:	vmov	r1, s22
    f20c:	add	r2, sp, #144	; 0x90
    f20e:	mov	r0, fp
    f210:	bl	11d38 <__ssprint_r>
    f214:	cmp	r0, #0
    f216:	bne.n	f1e6 <_svfprintf_r+0x216>
    f218:	add.w	sl, sp, #156	; 0x9c
    f21c:	b.n	f1d2 <_svfprintf_r+0x202>
    f21e:	nop
	...
    f228:	.word	0xffffffff
    f22c:	.word	0x7fefffff
    f230:	.word	0x20001488
    f234:	str	r3, [sp, #44]	; 0x2c
    f236:	cmp	r3, #0
    f238:	beq.n	f1de <_svfprintf_r+0x20e>
    f23a:	movs	r1, #0
    f23c:	strd	r1, r1, [sp, #48]	; 0x30
    f240:	strb.w	r3, [sp, #220]	; 0xdc
    f244:	movs	r3, #1
    f246:	strb.w	r1, [sp, #103]	; 0x67
    f24a:	str	r3, [sp, #8]
    f24c:	str	r1, [sp, #28]
    f24e:	str	r3, [sp, #20]
    f250:	str	r1, [sp, #12]
    f252:	str	r1, [sp, #60]	; 0x3c
    f254:	add	r4, sp, #220	; 0xdc
    f256:	ands.w	r3, r8, #2
    f25a:	str	r3, [sp, #36]	; 0x24
    f25c:	beq.n	f264 <_svfprintf_r+0x294>
    f25e:	ldr	r3, [sp, #8]
    f260:	adds	r3, #2
    f262:	str	r3, [sp, #8]
    f264:	ands.w	r3, r8, #132	; 0x84
    f268:	str	r3, [sp, #40]	; 0x28
    f26a:	bne.n	f278 <_svfprintf_r+0x2a8>
    f26c:	ldr	r3, [sp, #24]
    f26e:	ldr	r2, [sp, #8]
    f270:	subs	r5, r3, r2
    f272:	cmp	r5, #0
    f274:	bgt.w	f94a <_svfprintf_r+0x97a>
    f278:	ldr	r2, [sp, #152]	; 0x98
    f27a:	cbz	r1, f2a0 <_svfprintf_r+0x2d0>
    f27c:	ldr	r1, [sp, #148]	; 0x94
    f27e:	add.w	r0, sp, #103	; 0x67
    f282:	adds	r1, #1
    f284:	adds	r2, #1
    f286:	str.w	r0, [sl]
    f28a:	cmp	r1, #7
    f28c:	mov.w	r0, #1
    f290:	str	r2, [sp, #152]	; 0x98
    f292:	str	r1, [sp, #148]	; 0x94
    f294:	str.w	r0, [sl, #4]
    f298:	bgt.w	f9e0 <_svfprintf_r+0xa10>
    f29c:	add.w	sl, sl, #8
    f2a0:	ldr	r3, [sp, #36]	; 0x24
    f2a2:	cbz	r3, f2c6 <_svfprintf_r+0x2f6>
    f2a4:	ldr	r3, [sp, #148]	; 0x94
    f2a6:	add	r1, sp, #104	; 0x68
    f2a8:	adds	r3, #1
    f2aa:	adds	r2, #2
    f2ac:	str.w	r1, [sl]
    f2b0:	cmp	r3, #7
    f2b2:	mov.w	r1, #2
    f2b6:	str	r2, [sp, #152]	; 0x98
    f2b8:	str	r3, [sp, #148]	; 0x94
    f2ba:	str.w	r1, [sl, #4]
    f2be:	bgt.w	fa08 <_svfprintf_r+0xa38>
    f2c2:	add.w	sl, sl, #8
    f2c6:	ldr	r3, [sp, #40]	; 0x28
    f2c8:	cmp	r3, #128	; 0x80
    f2ca:	beq.w	f7a6 <_svfprintf_r+0x7d6>
    f2ce:	ldr	r3, [sp, #12]
    f2d0:	ldr	r1, [sp, #20]
    f2d2:	subs	r5, r3, r1
    f2d4:	cmp	r5, #0
    f2d6:	bgt.w	f824 <_svfprintf_r+0x854>
    f2da:	tst.w	r8, #256	; 0x100
    f2de:	bne.w	f6fc <_svfprintf_r+0x72c>
    f2e2:	ldr	r3, [sp, #20]
    f2e4:	str.w	r3, [sl, #4]
    f2e8:	add	r2, r3
    f2ea:	ldr	r3, [sp, #148]	; 0x94
    f2ec:	str.w	r4, [sl]
    f2f0:	adds	r3, #1
    f2f2:	cmp	r3, #7
    f2f4:	str	r2, [sp, #152]	; 0x98
    f2f6:	str	r3, [sp, #148]	; 0x94
    f2f8:	bgt.w	f932 <_svfprintf_r+0x962>
    f2fc:	add.w	sl, sl, #8
    f300:	tst.w	r8, #4
    f304:	beq.n	f312 <_svfprintf_r+0x342>
    f306:	ldr	r3, [sp, #24]
    f308:	ldr	r1, [sp, #8]
    f30a:	subs	r4, r3, r1
    f30c:	cmp	r4, #0
    f30e:	bgt.w	fa22 <_svfprintf_r+0xa52>
    f312:	ldr	r3, [sp, #16]
    f314:	ldr	r1, [sp, #24]
    f316:	ldr	r0, [sp, #8]
    f318:	cmp	r1, r0
    f31a:	ite	ge
    f31c:	addge	r3, r3, r1
    f31e:	addlt	r3, r3, r0
    f320:	str	r3, [sp, #16]
    f322:	cmp	r2, #0
    f324:	bne.w	f888 <_svfprintf_r+0x8b8>
    f328:	movs	r3, #0
    f32a:	str	r3, [sp, #148]	; 0x94
    f32c:	ldr	r3, [sp, #28]
    f32e:	cbz	r3, f338 <_svfprintf_r+0x368>
    f330:	ldr	r1, [sp, #28]
    f332:	mov	r0, fp
    f334:	bl	e604 <_free_r>
    f338:	add.w	sl, sp, #156	; 0x9c
    f33c:	mov	r4, r9
    f33e:	b.n	f034 <_svfprintf_r+0x64>
    f340:	str	r3, [sp, #44]	; 0x2c
    f342:	ldr	r3, [sp, #32]
    f344:	adds	r3, #7
    f346:	bic.w	r3, r3, #7
    f34a:	vldmia	r3!, {d8}
    f34e:	vabs.f64	d7, d8
    f352:	vcmp.f64	d7, d9
    f356:	vmrs	APSR_nzcv, fpscr
    f35a:	str	r3, [sp, #32]
    f35c:	ble.w	fd32 <_svfprintf_r+0xd62>
    f360:	vcmpe.f64	d8, #0.0
    f364:	vmrs	APSR_nzcv, fpscr
    f368:	bmi.w	1041e <_svfprintf_r+0x144e>
    f36c:	ldrb.w	r1, [sp, #103]	; 0x67
    f370:	ldr	r4, [pc, #684]	; (f620 <_svfprintf_r+0x650>)
    f372:	ldr	r3, [pc, #688]	; (f624 <_svfprintf_r+0x654>)
    f374:	bic.w	r8, r8, #128	; 0x80
    f378:	ldr	r2, [sp, #44]	; 0x2c
    f37a:	cmp	r2, #71	; 0x47
    f37c:	it	gt
    f37e:	movgt	r4, r3
    f380:	movs	r3, #0
    f382:	strd	r3, r3, [sp, #48]	; 0x30
    f386:	movs	r2, #3
    f388:	str	r3, [sp, #28]
    f38a:	str	r2, [sp, #8]
    f38c:	str	r2, [sp, #20]
    f38e:	str	r3, [sp, #12]
    f390:	str	r3, [sp, #60]	; 0x3c
    f392:	cmp	r1, #0
    f394:	beq.w	f256 <_svfprintf_r+0x286>
    f398:	ldr	r3, [sp, #8]
    f39a:	adds	r3, #1
    f39c:	str	r3, [sp, #8]
    f39e:	b.n	f256 <_svfprintf_r+0x286>
    f3a0:	cmp	r3, #67	; 0x43
    f3a2:	str	r3, [sp, #44]	; 0x2c
    f3a4:	beq.n	f3ae <_svfprintf_r+0x3de>
    f3a6:	tst.w	r8, #16
    f3aa:	beq.w	fe68 <_svfprintf_r+0xe98>
    f3ae:	ldr	r5, [sp, #32]
    f3b0:	movs	r2, #8
    f3b2:	movs	r1, #0
    f3b4:	add	r0, sp, #136	; 0x88
    f3b6:	add	r4, sp, #220	; 0xdc
    f3b8:	bl	e064 <memset>
    f3bc:	add	r3, sp, #136	; 0x88
    f3be:	ldr.w	r2, [r5], #4
    f3c2:	mov	r1, r4
    f3c4:	mov	r0, fp
    f3c6:	bl	11cac <_wcrtomb_r>
    f3ca:	mov	r3, r0
    f3cc:	adds	r3, #1
    f3ce:	str	r0, [sp, #20]
    f3d0:	beq.w	109b0 <_svfprintf_r+0x19e0>
    f3d4:	ldr	r3, [sp, #20]
    f3d6:	str	r5, [sp, #32]
    f3d8:	bic.w	r3, r3, r3, asr #31
    f3dc:	str	r3, [sp, #8]
    f3de:	movs	r1, #0
    f3e0:	strd	r1, r1, [sp, #48]	; 0x30
    f3e4:	strb.w	r1, [sp, #103]	; 0x67
    f3e8:	str	r1, [sp, #28]
    f3ea:	str	r1, [sp, #12]
    f3ec:	str	r1, [sp, #60]	; 0x3c
    f3ee:	b.n	f256 <_svfprintf_r+0x286>
    f3f0:	str	r3, [sp, #44]	; 0x2c
    f3f2:	ldr	r3, [sp, #32]
    f3f4:	mov	r2, r3
    f3f6:	movs	r3, #0
    f3f8:	strb.w	r3, [sp, #103]	; 0x67
    f3fc:	mov	r3, r2
    f3fe:	ldr.w	r4, [r3], #4
    f402:	str	r3, [sp, #32]
    f404:	cmp	r4, #0
    f406:	beq.w	fe9a <_svfprintf_r+0xeca>
    f40a:	ldr	r3, [sp, #44]	; 0x2c
    f40c:	cmp	r3, #83	; 0x53
    f40e:	beq.w	101ea <_svfprintf_r+0x121a>
    f412:	ands.w	r3, r8, #16
    f416:	str	r3, [sp, #48]	; 0x30
    f418:	bne.w	101ea <_svfprintf_r+0x121a>
    f41c:	ldr	r3, [sp, #12]
    f41e:	adds	r5, r3, #1
    f420:	beq.w	105ee <_svfprintf_r+0x161e>
    f424:	ldr	r1, [sp, #48]	; 0x30
    f426:	mov	r2, r3
    f428:	mov	r0, r4
    f42a:	bl	e340 <memchr>
    f42e:	str	r0, [sp, #28]
    f430:	cmp	r0, #0
    f432:	beq.w	10a86 <_svfprintf_r+0x1ab6>
    f436:	ldr	r3, [sp, #28]
    f438:	subs	r2, r3, r4
    f43a:	str	r2, [sp, #20]
    f43c:	ldr	r3, [sp, #48]	; 0x30
    f43e:	str	r3, [sp, #12]
    f440:	bic.w	r2, r2, r2, asr #31
    f444:	str	r3, [sp, #60]	; 0x3c
    f446:	str	r3, [sp, #52]	; 0x34
    f448:	str	r3, [sp, #28]
    f44a:	movs	r3, #115	; 0x73
    f44c:	ldrb.w	r1, [sp, #103]	; 0x67
    f450:	str	r2, [sp, #8]
    f452:	str	r3, [sp, #44]	; 0x2c
    f454:	b.n	f392 <_svfprintf_r+0x3c2>
    f456:	tst.w	r8, #32
    f45a:	str	r3, [sp, #44]	; 0x2c
    f45c:	ldr	r3, [sp, #32]
    f45e:	beq.n	f4dc <_svfprintf_r+0x50c>
    f460:	adds	r3, #7
    f462:	bic.w	r3, r3, #7
    f466:	mov	r2, r3
    f468:	mov	r1, r2
    f46a:	ldr	r3, [r3, #4]
    f46c:	ldr.w	r2, [r1], #8
    f470:	str	r1, [sp, #32]
    f472:	mov	r1, r3
    f474:	cmp	r3, #0
    f476:	blt.w	fc92 <_svfprintf_r+0xcc2>
    f47a:	ldr	r3, [sp, #12]
    f47c:	adds	r3, #1
    f47e:	beq.w	f9be <_svfprintf_r+0x9ee>
    f482:	bic.w	r0, r8, #128	; 0x80
    f486:	orrs.w	r3, r2, r1
    f48a:	str	r0, [sp, #8]
    f48c:	bne.w	f9c2 <_svfprintf_r+0x9f2>
    f490:	ldr	r3, [sp, #12]
    f492:	cmp	r3, #0
    f494:	bne.w	f9cc <_svfprintf_r+0x9fc>
    f498:	mov	r8, r0
    f49a:	movs	r3, #0
    f49c:	str	r3, [sp, #12]
    f49e:	str	r3, [sp, #20]
    f4a0:	add	r4, sp, #320	; 0x140
    f4a2:	b.n	f6b2 <_svfprintf_r+0x6e2>
    f4a4:	ldr	r3, [sp, #32]
    f4a6:	ldr.w	r2, [r3], #4
    f4aa:	str	r2, [sp, #24]
    f4ac:	cmp	r2, #0
    f4ae:	bge.w	fce4 <_svfprintf_r+0xd14>
    f4b2:	ldr	r2, [sp, #24]
    f4b4:	str	r3, [sp, #32]
    f4b6:	negs	r2, r2
    f4b8:	str	r2, [sp, #24]
    f4ba:	ldrb.w	r3, [r9]
    f4be:	orr.w	r8, r8, #4
    f4c2:	b.n	f088 <_svfprintf_r+0xb8>
    f4c4:	ldrb.w	r3, [r9]
    f4c8:	orr.w	r8, r8, #8
    f4cc:	b.n	f088 <_svfprintf_r+0xb8>
    f4ce:	orr.w	r8, r8, #16
    f4d2:	tst.w	r8, #32
    f4d6:	str	r3, [sp, #44]	; 0x2c
    f4d8:	ldr	r3, [sp, #32]
    f4da:	bne.n	f460 <_svfprintf_r+0x490>
    f4dc:	tst.w	r8, #16
    f4e0:	bne.w	fcfa <_svfprintf_r+0xd2a>
    f4e4:	tst.w	r8, #64	; 0x40
    f4e8:	beq.w	fcf2 <_svfprintf_r+0xd22>
    f4ec:	ldrsh.w	r2, [r3], #4
    f4f0:	str	r3, [sp, #32]
    f4f2:	asrs	r1, r2, #31
    f4f4:	mov	r3, r1
    f4f6:	b.n	f474 <_svfprintf_r+0x4a4>
    f4f8:	ldr	r3, [sp, #32]
    f4fa:	orr.w	r2, r8, #2
    f4fe:	str	r2, [sp, #8]
    f500:	ldr.w	r2, [r3], #4
    f504:	str	r3, [sp, #32]
    f506:	movw	r3, #30768	; 0x7830
    f50a:	strh.w	r3, [sp, #104]	; 0x68
    f50e:	movs	r0, #120	; 0x78
    f510:	ldr	r3, [pc, #276]	; (f628 <_svfprintf_r+0x658>)
    f512:	str	r3, [sp, #68]	; 0x44
    f514:	movs	r1, #0
    f516:	movs	r3, #2
    f518:	str	r0, [sp, #44]	; 0x2c
    f51a:	movs	r0, #0
    f51c:	ldr	r4, [sp, #12]
    f51e:	strb.w	r0, [sp, #103]	; 0x67
    f522:	adds	r0, r4, #1
    f524:	beq.w	f682 <_svfprintf_r+0x6b2>
    f528:	ldr	r0, [sp, #8]
    f52a:	bic.w	r8, r0, #128	; 0x80
    f52e:	orrs.w	r0, r2, r1
    f532:	bne.w	f67e <_svfprintf_r+0x6ae>
    f536:	cmp	r4, #0
    f538:	bne.w	10298 <_svfprintf_r+0x12c8>
    f53c:	cmp	r3, #0
    f53e:	bne.n	f49a <_svfprintf_r+0x4ca>
    f540:	ldr	r3, [sp, #8]
    f542:	ands.w	r3, r3, #1
    f546:	str	r3, [sp, #20]
    f548:	beq.w	fcee <_svfprintf_r+0xd1e>
    f54c:	movs	r3, #48	; 0x30
    f54e:	strb.w	r3, [sp, #319]	; 0x13f
    f552:	addw	r4, sp, #319	; 0x13f
    f556:	b.n	f6b2 <_svfprintf_r+0x6e2>
    f558:	tst.w	r8, #32
    f55c:	bne.w	fd08 <_svfprintf_r+0xd38>
    f560:	tst.w	r8, #16
    f564:	bne.w	102a6 <_svfprintf_r+0x12d6>
    f568:	tst.w	r8, #64	; 0x40
    f56c:	bne.w	1049e <_svfprintf_r+0x14ce>
    f570:	tst.w	r8, #512	; 0x200
    f574:	beq.w	102a6 <_svfprintf_r+0x12d6>
    f578:	ldr	r3, [sp, #32]
    f57a:	ldr	r1, [sp, #16]
    f57c:	ldr.w	r2, [r3], #4
    f580:	str	r3, [sp, #32]
    f582:	strb	r1, [r2, #0]
    f584:	mov	r4, r9
    f586:	b.n	f034 <_svfprintf_r+0x64>
    f588:	ldrb.w	r3, [r9]
    f58c:	cmp	r3, #104	; 0x68
    f58e:	ittte	eq
    f590:	ldrbeq.w	r3, [r9, #1]
    f594:	orreq.w	r8, r8, #512	; 0x200
    f598:	addeq.w	r9, r9, #1
    f59c:	orrne.w	r8, r8, #64	; 0x40
    f5a0:	b.n	f088 <_svfprintf_r+0xb8>
    f5a2:	ldrb.w	r3, [r9]
    f5a6:	strb.w	r5, [sp, #103]	; 0x67
    f5aa:	b.n	f088 <_svfprintf_r+0xb8>
    f5ac:	ldrb.w	r3, [r9]
    f5b0:	cmp	r3, #108	; 0x6c
    f5b2:	ittte	eq
    f5b4:	ldrbeq.w	r3, [r9, #1]
    f5b8:	orreq.w	r8, r8, #32
    f5bc:	addeq.w	r9, r9, #1
    f5c0:	orrne.w	r8, r8, #16
    f5c4:	b.n	f088 <_svfprintf_r+0xb8>
    f5c6:	str	r3, [sp, #44]	; 0x2c
    f5c8:	orr.w	r8, r8, #16
    f5cc:	ands.w	r1, r8, #32
    f5d0:	beq.w	fc76 <_svfprintf_r+0xca6>
    f5d4:	ldr	r3, [sp, #32]
    f5d6:	adds	r3, #7
    f5d8:	bic.w	r3, r3, #7
    f5dc:	ldr	r1, [r3, #4]
    f5de:	ldr.w	r2, [r3], #8
    f5e2:	str	r3, [sp, #32]
    f5e4:	bic.w	r3, r8, #1024	; 0x400
    f5e8:	str	r3, [sp, #8]
    f5ea:	movs	r3, #0
    f5ec:	b.n	f51a <_svfprintf_r+0x54a>
    f5ee:	str	r3, [sp, #44]	; 0x2c
    f5f0:	orr.w	r3, r8, #16
    f5f4:	str	r3, [sp, #8]
    f5f6:	ldr	r3, [sp, #8]
    f5f8:	ands.w	r1, r3, #32
    f5fc:	beq.w	fc52 <_svfprintf_r+0xc82>
    f600:	ldr	r3, [sp, #32]
    f602:	adds	r3, #7
    f604:	bic.w	r3, r3, #7
    f608:	ldr	r1, [r3, #4]
    f60a:	ldr.w	r2, [r3], #8
    f60e:	str	r3, [sp, #32]
    f610:	movs	r3, #1
    f612:	b.n	f51a <_svfprintf_r+0x54a>
    f614:	ldrb.w	r3, [r9]
    f618:	orr.w	r8, r8, #128	; 0x80
    f61c:	b.n	f088 <_svfprintf_r+0xb8>
    f61e:	nop
    f620:	.word	0x20000e58
    f624:	.word	0x20000e5c
    f628:	.word	0x20000e68
    f62c:	mov	r1, r9
    f62e:	ldrb.w	r3, [r1], #1
    f632:	cmp	r3, #42	; 0x2a
    f634:	beq.w	10aca <_svfprintf_r+0x1afa>
    f638:	sub.w	r2, r3, #48	; 0x30
    f63c:	cmp	r2, #9
    f63e:	mov	r9, r1
    f640:	it	ls
    f642:	movls	r1, #0
    f644:	bhi.w	108d0 <_svfprintf_r+0x1900>
    f648:	ldrb.w	r3, [r9], #1
    f64c:	add.w	r1, r1, r1, lsl #2
    f650:	add.w	r1, r2, r1, lsl #1
    f654:	sub.w	r2, r3, #48	; 0x30
    f658:	cmp	r2, #9
    f65a:	bls.n	f648 <_svfprintf_r+0x678>
    f65c:	str	r1, [sp, #12]
    f65e:	b.n	f08c <_svfprintf_r+0xbc>
    f660:	ldrb.w	r3, [r9]
    f664:	orr.w	r8, r8, #1
    f668:	b.n	f088 <_svfprintf_r+0xb8>
    f66a:	ldrb.w	r3, [sp, #103]	; 0x67
    f66e:	cmp	r3, #0
    f670:	bne.w	f192 <_svfprintf_r+0x1c2>
    f674:	ldrb.w	r3, [r9]
    f678:	strb.w	r6, [sp, #103]	; 0x67
    f67c:	b.n	f088 <_svfprintf_r+0xb8>
    f67e:	str.w	r8, [sp, #8]
    f682:	cmp	r3, #1
    f684:	beq.w	f9c2 <_svfprintf_r+0x9f2>
    f688:	cmp	r3, #2
    f68a:	add	r4, sp, #320	; 0x140
    f68c:	bne.n	f6d0 <_svfprintf_r+0x700>
    f68e:	ldr	r0, [sp, #68]	; 0x44
    f690:	and.w	r3, r2, #15
    f694:	lsrs	r2, r2, #4
    f696:	ldrb	r3, [r0, r3]
    f698:	strb.w	r3, [r4, #-1]!
    f69c:	orr.w	r2, r2, r1, lsl #28
    f6a0:	lsrs	r1, r1, #4
    f6a2:	orrs.w	r3, r2, r1
    f6a6:	bne.n	f690 <_svfprintf_r+0x6c0>
    f6a8:	add	r3, sp, #320	; 0x140
    f6aa:	subs	r3, r3, r4
    f6ac:	ldr.w	r8, [sp, #8]
    f6b0:	str	r3, [sp, #20]
    f6b2:	ldr	r2, [sp, #20]
    f6b4:	ldr	r0, [sp, #12]
    f6b6:	ldrb.w	r1, [sp, #103]	; 0x67
    f6ba:	cmp	r2, r0
    f6bc:	mov.w	r3, #0
    f6c0:	it	lt
    f6c2:	movlt	r2, r0
    f6c4:	strd	r3, r3, [sp, #48]	; 0x30
    f6c8:	str	r3, [sp, #28]
    f6ca:	str	r2, [sp, #8]
    f6cc:	str	r3, [sp, #60]	; 0x3c
    f6ce:	b.n	f392 <_svfprintf_r+0x3c2>
    f6d0:	and.w	r3, r2, #7
    f6d4:	lsrs	r2, r2, #3
    f6d6:	orr.w	r2, r2, r1, lsl #29
    f6da:	lsrs	r1, r1, #3
    f6dc:	adds	r3, #48	; 0x30
    f6de:	orrs.w	r5, r2, r1
    f6e2:	mov	r0, r4
    f6e4:	strb.w	r3, [r4, #-1]!
    f6e8:	bne.n	f6d0 <_svfprintf_r+0x700>
    f6ea:	ldr	r2, [sp, #8]
    f6ec:	lsls	r1, r2, #31
    f6ee:	bmi.w	fb8c <_svfprintf_r+0xbbc>
    f6f2:	add	r3, sp, #320	; 0x140
    f6f4:	subs	r3, r3, r4
    f6f6:	mov	r8, r2
    f6f8:	str	r3, [sp, #20]
    f6fa:	b.n	f6b2 <_svfprintf_r+0x6e2>
    f6fc:	ldr	r3, [sp, #44]	; 0x2c
    f6fe:	cmp	r3, #101	; 0x65
    f700:	ble.w	f8ac <_svfprintf_r+0x8dc>
    f704:	vcmp.f64	d8, #0.0
    f708:	vmrs	APSR_nzcv, fpscr
    f70c:	bne.w	fa92 <_svfprintf_r+0xac2>
    f710:	ldr	r3, [sp, #148]	; 0x94
    f712:	ldr	r1, [pc, #744]	; (f9fc <_svfprintf_r+0xa2c>)
    f714:	str.w	r1, [sl]
    f718:	adds	r3, #1
    f71a:	adds	r2, #1
    f71c:	movs	r1, #1
    f71e:	cmp	r3, #7
    f720:	str	r2, [sp, #152]	; 0x98
    f722:	str	r3, [sp, #148]	; 0x94
    f724:	str.w	r1, [sl, #4]
    f728:	bgt.w	101ce <_svfprintf_r+0x11fe>
    f72c:	add.w	sl, sl, #8
    f730:	ldr	r3, [sp, #108]	; 0x6c
    f732:	ldr	r1, [sp, #56]	; 0x38
    f734:	cmp	r3, r1
    f736:	bge.w	fcda <_svfprintf_r+0xd0a>
    f73a:	ldr	r3, [sp, #64]	; 0x40
    f73c:	ldr	r1, [sp, #72]	; 0x48
    f73e:	add	r2, r3
    f740:	strd	r1, r3, [sl]
    f744:	ldr	r3, [sp, #148]	; 0x94
    f746:	str	r2, [sp, #152]	; 0x98
    f748:	adds	r3, #1
    f74a:	cmp	r3, #7
    f74c:	str	r3, [sp, #148]	; 0x94
    f74e:	bgt.w	fe80 <_svfprintf_r+0xeb0>
    f752:	add.w	sl, sl, #8
    f756:	ldr	r3, [sp, #56]	; 0x38
    f758:	subs	r4, r3, #1
    f75a:	cmp	r4, #0
    f75c:	ble.w	f300 <_svfprintf_r+0x330>
    f760:	cmp	r4, #16
    f762:	ldr	r3, [sp, #148]	; 0x94
    f764:	ble.w	10244 <_svfprintf_r+0x1274>
    f768:	vmov	r6, s22
    f76c:	movs	r5, #16
    f76e:	b.n	f77c <_svfprintf_r+0x7ac>
    f770:	add.w	sl, sl, #8
    f774:	subs	r4, #16
    f776:	cmp	r4, #16
    f778:	ble.w	10244 <_svfprintf_r+0x1274>
    f77c:	adds	r3, #1
    f77e:	ldr	r1, [pc, #640]	; (fa00 <_svfprintf_r+0xa30>)
    f780:	adds	r2, #16
    f782:	cmp	r3, #7
    f784:	strd	r1, r5, [sl]
    f788:	strd	r3, r2, [sp, #148]	; 0x94
    f78c:	ble.n	f770 <_svfprintf_r+0x7a0>
    f78e:	add	r2, sp, #144	; 0x90
    f790:	mov	r1, r6
    f792:	mov	r0, fp
    f794:	bl	11d38 <__ssprint_r>
    f798:	cmp	r0, #0
    f79a:	bne.n	f89a <_svfprintf_r+0x8ca>
    f79c:	ldrd	r3, r2, [sp, #148]	; 0x94
    f7a0:	add.w	sl, sp, #156	; 0x9c
    f7a4:	b.n	f774 <_svfprintf_r+0x7a4>
    f7a6:	ldr	r3, [sp, #24]
    f7a8:	ldr	r1, [sp, #8]
    f7aa:	subs	r5, r3, r1
    f7ac:	cmp	r5, #0
    f7ae:	ble.w	f2ce <_svfprintf_r+0x2fe>
    f7b2:	cmp	r5, #16
    f7b4:	ldr	r3, [sp, #148]	; 0x94
    f7b6:	ble.n	f7fc <_svfprintf_r+0x82c>
    f7b8:	str	r4, [sp, #36]	; 0x24
    f7ba:	movs	r6, #16
    f7bc:	vmov	r4, s22
    f7c0:	b.n	f7cc <_svfprintf_r+0x7fc>
    f7c2:	subs	r5, #16
    f7c4:	cmp	r5, #16
    f7c6:	add.w	sl, sl, #8
    f7ca:	ble.n	f7fa <_svfprintf_r+0x82a>
    f7cc:	adds	r3, #1
    f7ce:	ldr	r1, [pc, #560]	; (fa00 <_svfprintf_r+0xa30>)
    f7d0:	adds	r2, #16
    f7d2:	cmp	r3, #7
    f7d4:	strd	r1, r6, [sl]
    f7d8:	strd	r3, r2, [sp, #148]	; 0x94
    f7dc:	ble.n	f7c2 <_svfprintf_r+0x7f2>
    f7de:	add	r2, sp, #144	; 0x90
    f7e0:	mov	r1, r4
    f7e2:	mov	r0, fp
    f7e4:	add.w	sl, sp, #156	; 0x9c
    f7e8:	bl	11d38 <__ssprint_r>
    f7ec:	cmp	r0, #0
    f7ee:	bne.n	f89a <_svfprintf_r+0x8ca>
    f7f0:	subs	r5, #16
    f7f2:	cmp	r5, #16
    f7f4:	ldrd	r3, r2, [sp, #148]	; 0x94
    f7f8:	bgt.n	f7cc <_svfprintf_r+0x7fc>
    f7fa:	ldr	r4, [sp, #36]	; 0x24
    f7fc:	ldr	r1, [pc, #512]	; (fa00 <_svfprintf_r+0xa30>)
    f7fe:	str.w	r5, [sl, #4]
    f802:	adds	r3, #1
    f804:	add	r2, r5
    f806:	cmp	r3, #7
    f808:	strd	r3, r2, [sp, #148]	; 0x94
    f80c:	str.w	r1, [sl]
    f810:	bgt.w	10260 <_svfprintf_r+0x1290>
    f814:	ldr	r3, [sp, #12]
    f816:	ldr	r1, [sp, #20]
    f818:	subs	r5, r3, r1
    f81a:	cmp	r5, #0
    f81c:	add.w	sl, sl, #8
    f820:	ble.w	f2da <_svfprintf_r+0x30a>
    f824:	cmp	r5, #16
    f826:	ldr	r3, [sp, #148]	; 0x94
    f828:	ble.n	f86a <_svfprintf_r+0x89a>
    f82a:	mov	r1, sl
    f82c:	movs	r6, #16
    f82e:	vmov	sl, s22
    f832:	b.n	f83e <_svfprintf_r+0x86e>
    f834:	subs	r5, #16
    f836:	cmp	r5, #16
    f838:	add.w	r1, r1, #8
    f83c:	ble.n	f868 <_svfprintf_r+0x898>
    f83e:	adds	r3, #1
    f840:	ldr	r0, [pc, #444]	; (fa00 <_svfprintf_r+0xa30>)
    f842:	adds	r2, #16
    f844:	cmp	r3, #7
    f846:	strd	r0, r6, [r1]
    f84a:	strd	r3, r2, [sp, #148]	; 0x94
    f84e:	ble.n	f834 <_svfprintf_r+0x864>
    f850:	add	r2, sp, #144	; 0x90
    f852:	mov	r1, sl
    f854:	mov	r0, fp
    f856:	bl	11d38 <__ssprint_r>
    f85a:	cbnz	r0, f89a <_svfprintf_r+0x8ca>
    f85c:	subs	r5, #16
    f85e:	cmp	r5, #16
    f860:	ldrd	r3, r2, [sp, #148]	; 0x94
    f864:	add	r1, sp, #156	; 0x9c
    f866:	bgt.n	f83e <_svfprintf_r+0x86e>
    f868:	mov	sl, r1
    f86a:	adds	r3, #1
    f86c:	ldr	r1, [pc, #400]	; (fa00 <_svfprintf_r+0xa30>)
    f86e:	str.w	r5, [sl, #4]
    f872:	add	r2, r5
    f874:	cmp	r3, #7
    f876:	strd	r3, r2, [sp, #148]	; 0x94
    f87a:	str.w	r1, [sl]
    f87e:	bgt.w	fc36 <_svfprintf_r+0xc66>
    f882:	add.w	sl, sl, #8
    f886:	b.n	f2da <_svfprintf_r+0x30a>
    f888:	vmov	r1, s22
    f88c:	add	r2, sp, #144	; 0x90
    f88e:	mov	r0, fp
    f890:	bl	11d38 <__ssprint_r>
    f894:	cmp	r0, #0
    f896:	beq.w	f328 <_svfprintf_r+0x358>
    f89a:	ldr	r3, [sp, #28]
    f89c:	cmp	r3, #0
    f89e:	beq.w	f1e6 <_svfprintf_r+0x216>
    f8a2:	ldr	r1, [sp, #28]
    f8a4:	mov	r0, fp
    f8a6:	bl	e604 <_free_r>
    f8aa:	b.n	f1e6 <_svfprintf_r+0x216>
    f8ac:	ldr	r3, [sp, #56]	; 0x38
    f8ae:	cmp	r3, #1
    f8b0:	ble.w	fba8 <_svfprintf_r+0xbd8>
    f8b4:	ldr	r3, [sp, #148]	; 0x94
    f8b6:	str.w	r4, [sl]
    f8ba:	adds	r3, #1
    f8bc:	adds	r2, #1
    f8be:	movs	r1, #1
    f8c0:	cmp	r3, #7
    f8c2:	str	r2, [sp, #152]	; 0x98
    f8c4:	str	r3, [sp, #148]	; 0x94
    f8c6:	str.w	r1, [sl, #4]
    f8ca:	bgt.w	fcbe <_svfprintf_r+0xcee>
    f8ce:	add.w	sl, sl, #8
    f8d2:	ldr	r1, [sp, #64]	; 0x40
    f8d4:	ldr	r0, [sp, #72]	; 0x48
    f8d6:	adds	r3, #1
    f8d8:	add	r2, r1
    f8da:	cmp	r3, #7
    f8dc:	strd	r0, r1, [sl]
    f8e0:	strd	r3, r2, [sp, #148]	; 0x94
    f8e4:	bgt.w	fca2 <_svfprintf_r+0xcd2>
    f8e8:	add.w	sl, sl, #8
    f8ec:	vcmp.f64	d8, #0.0
    f8f0:	vmrs	APSR_nzcv, fpscr
    f8f4:	beq.w	fbe6 <_svfprintf_r+0xc16>
    f8f8:	ldr	r1, [sp, #56]	; 0x38
    f8fa:	adds	r3, #1
    f8fc:	subs	r1, #1
    f8fe:	adds	r4, #1
    f900:	add	r2, r1
    f902:	cmp	r3, #7
    f904:	str.w	r4, [sl]
    f908:	str	r3, [sp, #148]	; 0x94
    f90a:	str.w	r1, [sl, #4]
    f90e:	str	r2, [sp, #152]	; 0x98
    f910:	bgt.w	fbca <_svfprintf_r+0xbfa>
    f914:	add.w	sl, sl, #8
    f918:	ldr	r1, [sp, #80]	; 0x50
    f91a:	str.w	r1, [sl, #4]
    f91e:	adds	r3, #1
    f920:	add	r2, r1
    f922:	cmp	r3, #7
    f924:	add	r1, sp, #120	; 0x78
    f926:	strd	r3, r2, [sp, #148]	; 0x94
    f92a:	str.w	r1, [sl]
    f92e:	ble.w	f2fc <_svfprintf_r+0x32c>
    f932:	vmov	r1, s22
    f936:	add	r2, sp, #144	; 0x90
    f938:	mov	r0, fp
    f93a:	bl	11d38 <__ssprint_r>
    f93e:	cmp	r0, #0
    f940:	bne.n	f89a <_svfprintf_r+0x8ca>
    f942:	ldr	r2, [sp, #152]	; 0x98
    f944:	add.w	sl, sp, #156	; 0x9c
    f948:	b.n	f300 <_svfprintf_r+0x330>
    f94a:	cmp	r5, #16
    f94c:	ldrd	r1, r2, [sp, #148]	; 0x94
    f950:	ldr	r6, [pc, #176]	; (fa04 <_svfprintf_r+0xa34>)
    f952:	ble.n	f99e <_svfprintf_r+0x9ce>
    f954:	str	r4, [sp, #92]	; 0x5c
    f956:	movs	r3, #16
    f958:	vmov	r4, s22
    f95c:	mov	r0, r1
    f95e:	b.n	f96a <_svfprintf_r+0x99a>
    f960:	subs	r5, #16
    f962:	cmp	r5, #16
    f964:	add.w	sl, sl, #8
    f968:	ble.n	f99a <_svfprintf_r+0x9ca>
    f96a:	adds	r0, #1
    f96c:	adds	r2, #16
    f96e:	cmp	r0, #7
    f970:	strd	r6, r3, [sl]
    f974:	strd	r0, r2, [sp, #148]	; 0x94
    f978:	ble.n	f960 <_svfprintf_r+0x990>
    f97a:	add	r2, sp, #144	; 0x90
    f97c:	mov	r1, r4
    f97e:	mov	r0, fp
    f980:	add.w	sl, sp, #156	; 0x9c
    f984:	bl	11d38 <__ssprint_r>
    f988:	cmp	r0, #0
    f98a:	bne.n	f89a <_svfprintf_r+0x8ca>
    f98c:	subs	r5, #16
    f98e:	cmp	r5, #16
    f990:	ldrd	r0, r2, [sp, #148]	; 0x94
    f994:	mov.w	r3, #16
    f998:	bgt.n	f96a <_svfprintf_r+0x99a>
    f99a:	ldr	r4, [sp, #92]	; 0x5c
    f99c:	mov	r1, r0
    f99e:	adds	r1, #1
    f9a0:	add	r2, r5
    f9a2:	cmp	r1, #7
    f9a4:	strd	r1, r2, [sp, #148]	; 0x94
    f9a8:	str.w	r6, [sl]
    f9ac:	str.w	r5, [sl, #4]
    f9b0:	bgt.w	1012e <_svfprintf_r+0x115e>
    f9b4:	ldrb.w	r1, [sp, #103]	; 0x67
    f9b8:	add.w	sl, sl, #8
    f9bc:	b.n	f27a <_svfprintf_r+0x2aa>
    f9be:	str.w	r8, [sp, #8]
    f9c2:	cmp	r2, #10
    f9c4:	sbcs.w	r3, r1, #0
    f9c8:	bcs.w	10056 <_svfprintf_r+0x1086>
    f9cc:	adds	r2, #48	; 0x30
    f9ce:	movs	r3, #1
    f9d0:	ldr.w	r8, [sp, #8]
    f9d4:	strb.w	r2, [sp, #319]	; 0x13f
    f9d8:	str	r3, [sp, #20]
    f9da:	addw	r4, sp, #319	; 0x13f
    f9de:	b.n	f6b2 <_svfprintf_r+0x6e2>
    f9e0:	vmov	r1, s22
    f9e4:	add	r2, sp, #144	; 0x90
    f9e6:	mov	r0, fp
    f9e8:	bl	11d38 <__ssprint_r>
    f9ec:	cmp	r0, #0
    f9ee:	bne.w	f89a <_svfprintf_r+0x8ca>
    f9f2:	ldr	r2, [sp, #152]	; 0x98
    f9f4:	add.w	sl, sp, #156	; 0x9c
    f9f8:	b.n	f2a0 <_svfprintf_r+0x2d0>
    f9fa:	nop
    f9fc:	.word	0x20000e98
    fa00:	.word	0x20001308
    fa04:	.word	0x20000e9c
    fa08:	vmov	r1, s22
    fa0c:	add	r2, sp, #144	; 0x90
    fa0e:	mov	r0, fp
    fa10:	bl	11d38 <__ssprint_r>
    fa14:	cmp	r0, #0
    fa16:	bne.w	f89a <_svfprintf_r+0x8ca>
    fa1a:	ldr	r2, [sp, #152]	; 0x98
    fa1c:	add.w	sl, sp, #156	; 0x9c
    fa20:	b.n	f2c6 <_svfprintf_r+0x2f6>
    fa22:	cmp	r4, #16
    fa24:	ldr	r3, [sp, #148]	; 0x94
    fa26:	ldr	r6, [pc, #760]	; (fd20 <_svfprintf_r+0xd50>)
    fa28:	ble.n	fa6a <_svfprintf_r+0xa9a>
    fa2a:	vmov	r8, s22
    fa2e:	movs	r5, #16
    fa30:	b.n	fa3c <_svfprintf_r+0xa6c>
    fa32:	subs	r4, #16
    fa34:	cmp	r4, #16
    fa36:	add.w	sl, sl, #8
    fa3a:	ble.n	fa6a <_svfprintf_r+0xa9a>
    fa3c:	adds	r3, #1
    fa3e:	adds	r2, #16
    fa40:	cmp	r3, #7
    fa42:	strd	r6, r5, [sl]
    fa46:	strd	r3, r2, [sp, #148]	; 0x94
    fa4a:	ble.n	fa32 <_svfprintf_r+0xa62>
    fa4c:	add	r2, sp, #144	; 0x90
    fa4e:	mov	r1, r8
    fa50:	mov	r0, fp
    fa52:	add.w	sl, sp, #156	; 0x9c
    fa56:	bl	11d38 <__ssprint_r>
    fa5a:	cmp	r0, #0
    fa5c:	bne.w	f89a <_svfprintf_r+0x8ca>
    fa60:	subs	r4, #16
    fa62:	cmp	r4, #16
    fa64:	ldrd	r3, r2, [sp, #148]	; 0x94
    fa68:	bgt.n	fa3c <_svfprintf_r+0xa6c>
    fa6a:	adds	r3, #1
    fa6c:	add	r2, r4
    fa6e:	cmp	r3, #7
    fa70:	strd	r6, r4, [sl]
    fa74:	strd	r3, r2, [sp, #148]	; 0x94
    fa78:	ble.w	f312 <_svfprintf_r+0x342>
    fa7c:	vmov	r1, s22
    fa80:	add	r2, sp, #144	; 0x90
    fa82:	mov	r0, fp
    fa84:	bl	11d38 <__ssprint_r>
    fa88:	cmp	r0, #0
    fa8a:	bne.w	f89a <_svfprintf_r+0x8ca>
    fa8e:	ldr	r2, [sp, #152]	; 0x98
    fa90:	b.n	f312 <_svfprintf_r+0x342>
    fa92:	ldr	r1, [sp, #108]	; 0x6c
    fa94:	cmp	r1, #0
    fa96:	ble.w	1014e <_svfprintf_r+0x117e>
    fa9a:	ldr	r6, [sp, #48]	; 0x30
    fa9c:	ldr	r3, [sp, #56]	; 0x38
    fa9e:	cmp	r6, r3
    faa0:	it	ge
    faa2:	movge	r6, r3
    faa4:	cmp	r6, #0
    faa6:	ble.n	fac0 <_svfprintf_r+0xaf0>
    faa8:	ldr	r3, [sp, #148]	; 0x94
    faaa:	adds	r3, #1
    faac:	add	r2, r6
    faae:	cmp	r3, #7
    fab0:	strd	r4, r6, [sl]
    fab4:	str	r2, [sp, #152]	; 0x98
    fab6:	str	r3, [sp, #148]	; 0x94
    fab8:	bgt.w	107ce <_svfprintf_r+0x17fe>
    fabc:	add.w	sl, sl, #8
    fac0:	ldr	r5, [sp, #48]	; 0x30
    fac2:	cmp	r6, #0
    fac4:	it	ge
    fac6:	subge	r5, r5, r6
    fac8:	cmp	r5, #0
    faca:	bgt.w	fed4 <_svfprintf_r+0xf04>
    face:	ldr	r3, [sp, #48]	; 0x30
    fad0:	tst.w	r8, #1024	; 0x400
    fad4:	add	r3, r4
    fad6:	str	r3, [sp, #20]
    fad8:	bne.w	ff1a <_svfprintf_r+0xf4a>
    fadc:	ldr	r3, [sp, #108]	; 0x6c
    fade:	ldr	r1, [sp, #56]	; 0x38
    fae0:	cmp	r3, r1
    fae2:	blt.n	faec <_svfprintf_r+0xb1c>
    fae4:	tst.w	r8, #1
    fae8:	beq.w	1048a <_svfprintf_r+0x14ba>
    faec:	ldr	r1, [sp, #64]	; 0x40
    faee:	ldr	r0, [sp, #72]	; 0x48
    faf0:	add	r2, r1
    faf2:	strd	r0, r1, [sl]
    faf6:	ldr	r1, [sp, #148]	; 0x94
    faf8:	str	r2, [sp, #152]	; 0x98
    fafa:	adds	r1, #1
    fafc:	cmp	r1, #7
    fafe:	str	r1, [sp, #148]	; 0x94
    fb00:	bgt.w	1084e <_svfprintf_r+0x187e>
    fb04:	add.w	sl, sl, #8
    fb08:	ldr	r1, [sp, #56]	; 0x38
    fb0a:	adds	r5, r4, r1
    fb0c:	subs	r4, r1, r3
    fb0e:	ldr	r3, [sp, #20]
    fb10:	subs	r5, r5, r3
    fb12:	cmp	r5, r4
    fb14:	it	ge
    fb16:	movge	r5, r4
    fb18:	cmp	r5, #0
    fb1a:	ble.n	fb38 <_svfprintf_r+0xb68>
    fb1c:	str.w	r3, [sl]
    fb20:	ldr	r3, [sp, #148]	; 0x94
    fb22:	str.w	r5, [sl, #4]
    fb26:	adds	r3, #1
    fb28:	add	r2, r5
    fb2a:	cmp	r3, #7
    fb2c:	str	r2, [sp, #152]	; 0x98
    fb2e:	str	r3, [sp, #148]	; 0x94
    fb30:	bgt.w	108aa <_svfprintf_r+0x18da>
    fb34:	add.w	sl, sl, #8
    fb38:	cmp	r5, #0
    fb3a:	it	ge
    fb3c:	subge	r4, r4, r5
    fb3e:	cmp	r4, #0
    fb40:	ble.w	f300 <_svfprintf_r+0x330>
    fb44:	cmp	r4, #16
    fb46:	ldr	r3, [sp, #148]	; 0x94
    fb48:	ble.w	10244 <_svfprintf_r+0x1274>
    fb4c:	vmov	r6, s22
    fb50:	movs	r5, #16
    fb52:	b.n	fb60 <_svfprintf_r+0xb90>
    fb54:	add.w	sl, sl, #8
    fb58:	subs	r4, #16
    fb5a:	cmp	r4, #16
    fb5c:	ble.w	10244 <_svfprintf_r+0x1274>
    fb60:	adds	r3, #1
    fb62:	ldr	r1, [pc, #448]	; (fd24 <_svfprintf_r+0xd54>)
    fb64:	adds	r2, #16
    fb66:	cmp	r3, #7
    fb68:	strd	r1, r5, [sl]
    fb6c:	strd	r3, r2, [sp, #148]	; 0x94
    fb70:	ble.n	fb54 <_svfprintf_r+0xb84>
    fb72:	add	r2, sp, #144	; 0x90
    fb74:	mov	r1, r6
    fb76:	mov	r0, fp
    fb78:	bl	11d38 <__ssprint_r>
    fb7c:	cmp	r0, #0
    fb7e:	bne.w	f89a <_svfprintf_r+0x8ca>
    fb82:	ldrd	r3, r2, [sp, #148]	; 0x94
    fb86:	add.w	sl, sp, #156	; 0x9c
    fb8a:	b.n	fb58 <_svfprintf_r+0xb88>
    fb8c:	cmp	r3, #48	; 0x30
    fb8e:	beq.w	f6a8 <_svfprintf_r+0x6d8>
    fb92:	movs	r3, #48	; 0x30
    fb94:	subs	r0, #2
    fb96:	strb.w	r3, [r4, #-1]
    fb9a:	add	r3, sp, #320	; 0x140
    fb9c:	subs	r3, r3, r0
    fb9e:	ldr.w	r8, [sp, #8]
    fba2:	str	r3, [sp, #20]
    fba4:	mov	r4, r0
    fba6:	b.n	f6b2 <_svfprintf_r+0x6e2>
    fba8:	tst.w	r8, #1
    fbac:	bne.w	f8b4 <_svfprintf_r+0x8e4>
    fbb0:	ldr	r3, [sp, #148]	; 0x94
    fbb2:	str.w	r4, [sl]
    fbb6:	adds	r3, #1
    fbb8:	adds	r2, #1
    fbba:	movs	r1, #1
    fbbc:	cmp	r3, #7
    fbbe:	str	r2, [sp, #152]	; 0x98
    fbc0:	str	r3, [sp, #148]	; 0x94
    fbc2:	str.w	r1, [sl, #4]
    fbc6:	ble.w	f914 <_svfprintf_r+0x944>
    fbca:	vmov	r1, s22
    fbce:	add	r2, sp, #144	; 0x90
    fbd0:	mov	r0, fp
    fbd2:	bl	11d38 <__ssprint_r>
    fbd6:	cmp	r0, #0
    fbd8:	bne.w	f89a <_svfprintf_r+0x8ca>
    fbdc:	ldrd	r3, r2, [sp, #148]	; 0x94
    fbe0:	add.w	sl, sp, #156	; 0x9c
    fbe4:	b.n	f918 <_svfprintf_r+0x948>
    fbe6:	ldr	r1, [sp, #56]	; 0x38
    fbe8:	subs	r4, r1, #1
    fbea:	cmp	r4, #0
    fbec:	ble.w	f918 <_svfprintf_r+0x948>
    fbf0:	cmp	r4, #16
    fbf2:	ble.w	102b8 <_svfprintf_r+0x12e8>
    fbf6:	vmov	r6, s22
    fbfa:	movs	r5, #16
    fbfc:	b.n	fc0a <_svfprintf_r+0xc3a>
    fbfe:	add.w	sl, sl, #8
    fc02:	subs	r4, #16
    fc04:	cmp	r4, #16
    fc06:	ble.w	102b8 <_svfprintf_r+0x12e8>
    fc0a:	adds	r3, #1
    fc0c:	ldr	r1, [pc, #276]	; (fd24 <_svfprintf_r+0xd54>)
    fc0e:	adds	r2, #16
    fc10:	cmp	r3, #7
    fc12:	strd	r1, r5, [sl]
    fc16:	strd	r3, r2, [sp, #148]	; 0x94
    fc1a:	ble.n	fbfe <_svfprintf_r+0xc2e>
    fc1c:	add	r2, sp, #144	; 0x90
    fc1e:	mov	r1, r6
    fc20:	mov	r0, fp
    fc22:	bl	11d38 <__ssprint_r>
    fc26:	cmp	r0, #0
    fc28:	bne.w	f89a <_svfprintf_r+0x8ca>
    fc2c:	ldrd	r3, r2, [sp, #148]	; 0x94
    fc30:	add.w	sl, sp, #156	; 0x9c
    fc34:	b.n	fc02 <_svfprintf_r+0xc32>
    fc36:	vmov	r1, s22
    fc3a:	add	r2, sp, #144	; 0x90
    fc3c:	mov	r0, fp
    fc3e:	bl	11d38 <__ssprint_r>
    fc42:	cmp	r0, #0
    fc44:	bne.w	f89a <_svfprintf_r+0x8ca>
    fc48:	ldr	r2, [sp, #152]	; 0x98
    fc4a:	add.w	sl, sp, #156	; 0x9c
    fc4e:	b.w	f2da <_svfprintf_r+0x30a>
    fc52:	ldr	r3, [sp, #8]
    fc54:	ands.w	r3, r3, #16
    fc58:	bne.w	fdde <_svfprintf_r+0xe0e>
    fc5c:	ldr	r2, [sp, #8]
    fc5e:	ands.w	r2, r2, #64	; 0x40
    fc62:	beq.w	1035a <_svfprintf_r+0x138a>
    fc66:	ldr	r0, [sp, #32]
    fc68:	ldr.w	r2, [r0], #4
    fc6c:	str	r0, [sp, #32]
    fc6e:	mov	r1, r3
    fc70:	uxth	r2, r2
    fc72:	movs	r3, #1
    fc74:	b.n	f51a <_svfprintf_r+0x54a>
    fc76:	ands.w	r3, r8, #16
    fc7a:	bne.n	fd28 <_svfprintf_r+0xd58>
    fc7c:	ands.w	r2, r8, #64	; 0x40
    fc80:	beq.w	1033e <_svfprintf_r+0x136e>
    fc84:	ldr	r0, [sp, #32]
    fc86:	ldr.w	r2, [r0], #4
    fc8a:	str	r0, [sp, #32]
    fc8c:	mov	r1, r3
    fc8e:	uxth	r2, r2
    fc90:	b.n	f5e4 <_svfprintf_r+0x614>
    fc92:	negs	r2, r2
    fc94:	sbc.w	r1, r1, r1, lsl #1
    fc98:	str.w	r8, [sp, #8]
    fc9c:	movs	r0, #45	; 0x2d
    fc9e:	movs	r3, #1
    fca0:	b.n	f51c <_svfprintf_r+0x54c>
    fca2:	vmov	r1, s22
    fca6:	add	r2, sp, #144	; 0x90
    fca8:	mov	r0, fp
    fcaa:	bl	11d38 <__ssprint_r>
    fcae:	cmp	r0, #0
    fcb0:	bne.w	f89a <_svfprintf_r+0x8ca>
    fcb4:	ldrd	r3, r2, [sp, #148]	; 0x94
    fcb8:	add.w	sl, sp, #156	; 0x9c
    fcbc:	b.n	f8ec <_svfprintf_r+0x91c>
    fcbe:	vmov	r1, s22
    fcc2:	add	r2, sp, #144	; 0x90
    fcc4:	mov	r0, fp
    fcc6:	bl	11d38 <__ssprint_r>
    fcca:	cmp	r0, #0
    fccc:	bne.w	f89a <_svfprintf_r+0x8ca>
    fcd0:	ldrd	r3, r2, [sp, #148]	; 0x94
    fcd4:	add.w	sl, sp, #156	; 0x9c
    fcd8:	b.n	f8d2 <_svfprintf_r+0x902>
    fcda:	tst.w	r8, #1
    fcde:	beq.w	f300 <_svfprintf_r+0x330>
    fce2:	b.n	f73a <_svfprintf_r+0x76a>
    fce4:	str	r3, [sp, #32]
    fce6:	ldrb.w	r3, [r9]
    fcea:	b.w	f088 <_svfprintf_r+0xb8>
    fcee:	add	r4, sp, #320	; 0x140
    fcf0:	b.n	f6b2 <_svfprintf_r+0x6e2>
    fcf2:	tst.w	r8, #512	; 0x200
    fcf6:	bne.w	104b0 <_svfprintf_r+0x14e0>
    fcfa:	ldr.w	r2, [r3], #4
    fcfe:	str	r3, [sp, #32]
    fd00:	asrs	r1, r2, #31
    fd02:	mov	r3, r1
    fd04:	b.w	f474 <_svfprintf_r+0x4a4>
    fd08:	ldr	r3, [sp, #32]
    fd0a:	ldr	r0, [sp, #16]
    fd0c:	ldr.w	r1, [r3], #4
    fd10:	str	r3, [sp, #32]
    fd12:	asrs	r2, r0, #31
    fd14:	strd	r0, r2, [r1]
    fd18:	mov	r4, r9
    fd1a:	b.w	f034 <_svfprintf_r+0x64>
    fd1e:	nop
    fd20:	.word	0x20000e9c
    fd24:	.word	0x20001308
    fd28:	ldr	r3, [sp, #32]
    fd2a:	ldr.w	r2, [r3], #4
    fd2e:	str	r3, [sp, #32]
    fd30:	b.n	f5e4 <_svfprintf_r+0x614>
    fd32:	vcmp.f64	d8, d8
    fd36:	vmrs	APSR_nzcv, fpscr
    fd3a:	bvs.w	10a66 <_svfprintf_r+0x1a96>
    fd3e:	ldr	r3, [sp, #44]	; 0x2c
    fd40:	cmp	r3, #97	; 0x61
    fd42:	beq.w	107ea <_svfprintf_r+0x181a>
    fd46:	cmp	r3, #65	; 0x41
    fd48:	beq.w	108cc <_svfprintf_r+0x18fc>
    fd4c:	ldr	r3, [sp, #12]
    fd4e:	adds	r3, #1
    fd50:	ldr	r3, [sp, #44]	; 0x2c
    fd52:	bic.w	r5, r3, #32
    fd56:	beq.w	1065a <_svfprintf_r+0x168a>
    fd5a:	cmp	r5, #71	; 0x47
    fd5c:	bne.n	fd68 <_svfprintf_r+0xd98>
    fd5e:	ldr	r3, [sp, #12]
    fd60:	cmp	r3, #0
    fd62:	it	eq
    fd64:	moveq	r3, #1
    fd66:	str	r3, [sp, #12]
    fd68:	vmov	r3, s17
    fd6c:	cmp	r3, #0
    fd6e:	orr.w	r2, r8, #256	; 0x100
    fd72:	mov	r6, r8
    fd74:	blt.w	109a8 <_svfprintf_r+0x19d8>
    fd78:	vmov.f64	d10, d8
    fd7c:	movs	r3, #0
    fd7e:	mov	r8, r2
    fd80:	str	r3, [sp, #36]	; 0x24
    fd82:	str	r3, [sp, #28]
    fd84:	ldr	r3, [sp, #44]	; 0x2c
    fd86:	subs	r3, #65	; 0x41
    fd88:	cmp	r3, #37	; 0x25
    fd8a:	bhi.w	104be <_svfprintf_r+0x14ee>
    fd8e:	tbh	[pc, r3, lsl #1]
    fd92:	.short	0x046f
    fd94:	.word	0x03960396
    fd98:	.word	0x04680396
    fd9c:	.word	0x0396046c
    fda0:	.word	0x03960396
    fda4:	.word	0x03960396
    fda8:	.word	0x03960396
    fdac:	.word	0x03960396
    fdb0:	.word	0x03960396
    fdb4:	.word	0x03960396
    fdb8:	.word	0x03960396
    fdbc:	.word	0x03960396
    fdc0:	.word	0x03960396
    fdc4:	.word	0x03960396
    fdc8:	.word	0x03960396
    fdcc:	.word	0x03960396
    fdd0:	.word	0x03960396
    fdd4:	.word	0x03960396
    fdd8:	.word	0x04680396
    fddc:	.short	0x046c
    fdde:	ldr	r3, [sp, #32]
    fde0:	ldr.w	r2, [r3], #4
    fde4:	str	r3, [sp, #32]
    fde6:	movs	r3, #1
    fde8:	b.w	f51a <_svfprintf_r+0x54a>
    fdec:	ldr	r3, [sp, #76]	; 0x4c
    fdee:	cmp	r3, #0
    fdf0:	beq.w	f192 <_svfprintf_r+0x1c2>
    fdf4:	ldr	r3, [sp, #76]	; 0x4c
    fdf6:	ldrb	r3, [r3, #0]
    fdf8:	cmp	r3, #0
    fdfa:	beq.w	f192 <_svfprintf_r+0x1c2>
    fdfe:	ldrb.w	r3, [r9]
    fe02:	orr.w	r8, r8, #1024	; 0x400
    fe06:	b.w	f088 <_svfprintf_r+0xb8>
    fe0a:	str	r3, [sp, #44]	; 0x2c
    fe0c:	str.w	r8, [sp, #8]
    fe10:	b.w	f5f6 <_svfprintf_r+0x626>
    fe14:	str	r3, [sp, #44]	; 0x2c
    fe16:	ldr	r3, [pc, #616]	; (10080 <_svfprintf_r+0x10b0>)
    fe18:	str	r3, [sp, #68]	; 0x44
    fe1a:	ands.w	r1, r8, #32
    fe1e:	beq.w	1002c <_svfprintf_r+0x105c>
    fe22:	ldr	r3, [sp, #32]
    fe24:	adds	r3, #7
    fe26:	bic.w	r3, r3, #7
    fe2a:	ldr	r1, [r3, #4]
    fe2c:	ldr.w	r2, [r3], #8
    fe30:	str	r3, [sp, #32]
    fe32:	tst.w	r8, #1
    fe36:	beq.n	fe4e <_svfprintf_r+0xe7e>
    fe38:	orrs.w	r3, r2, r1
    fe3c:	beq.n	fe4e <_svfprintf_r+0xe7e>
    fe3e:	ldr	r3, [sp, #44]	; 0x2c
    fe40:	strb.w	r3, [sp, #105]	; 0x69
    fe44:	movs	r3, #48	; 0x30
    fe46:	orr.w	r8, r8, #2
    fe4a:	strb.w	r3, [sp, #104]	; 0x68
    fe4e:	bic.w	r3, r8, #1024	; 0x400
    fe52:	str	r3, [sp, #8]
    fe54:	movs	r3, #2
    fe56:	b.w	f51a <_svfprintf_r+0x54a>
    fe5a:	str	r3, [sp, #44]	; 0x2c
    fe5c:	b.w	f5cc <_svfprintf_r+0x5fc>
    fe60:	str	r3, [sp, #44]	; 0x2c
    fe62:	ldr	r3, [pc, #544]	; (10084 <_svfprintf_r+0x10b4>)
    fe64:	str	r3, [sp, #68]	; 0x44
    fe66:	b.n	fe1a <_svfprintf_r+0xe4a>
    fe68:	ldr	r3, [sp, #32]
    fe6a:	movs	r1, #1
    fe6c:	ldr.w	r2, [r3], #4
    fe70:	str	r1, [sp, #8]
    fe72:	strb.w	r2, [sp, #220]	; 0xdc
    fe76:	str	r3, [sp, #32]
    fe78:	str	r1, [sp, #20]
    fe7a:	add	r4, sp, #220	; 0xdc
    fe7c:	b.w	f3de <_svfprintf_r+0x40e>
    fe80:	vmov	r1, s22
    fe84:	add	r2, sp, #144	; 0x90
    fe86:	mov	r0, fp
    fe88:	bl	11d38 <__ssprint_r>
    fe8c:	cmp	r0, #0
    fe8e:	bne.w	f89a <_svfprintf_r+0x8ca>
    fe92:	ldr	r2, [sp, #152]	; 0x98
    fe94:	add.w	sl, sp, #156	; 0x9c
    fe98:	b.n	f756 <_svfprintf_r+0x786>
    fe9a:	ldr	r3, [sp, #12]
    fe9c:	str	r4, [sp, #28]
    fe9e:	cmp	r3, #6
    fea0:	mov	r2, r4
    fea2:	it	cs
    fea4:	movcs	r3, #6
    fea6:	str	r4, [sp, #12]
    fea8:	mov	r1, r4
    feaa:	strd	r2, r2, [sp, #48]	; 0x30
    feae:	ldr	r4, [pc, #472]	; (10088 <_svfprintf_r+0x10b8>)
    feb0:	str	r3, [sp, #8]
    feb2:	str	r3, [sp, #20]
    feb4:	str	r2, [sp, #60]	; 0x3c
    feb6:	b.w	f392 <_svfprintf_r+0x3c2>
    feba:	movs	r1, #64	; 0x40
    febc:	mov	r0, fp
    febe:	bl	d250 <_malloc_r>
    fec2:	str	r0, [r4, #0]
    fec4:	str	r0, [r4, #16]
    fec6:	cmp	r0, #0
    fec8:	beq.w	10aea <_svfprintf_r+0x1b1a>
    fecc:	movs	r3, #64	; 0x40
    fece:	str	r3, [r4, #20]
    fed0:	b.w	f010 <_svfprintf_r+0x40>
    fed4:	cmp	r5, #16
    fed6:	ldr	r3, [sp, #148]	; 0x94
    fed8:	ble.w	10396 <_svfprintf_r+0x13c6>
    fedc:	mov	r1, sl
    fede:	movs	r6, #16
    fee0:	vmov	sl, s22
    fee4:	b.n	fef0 <_svfprintf_r+0xf20>
    fee6:	adds	r1, #8
    fee8:	subs	r5, #16
    feea:	cmp	r5, #16
    feec:	ble.w	10394 <_svfprintf_r+0x13c4>
    fef0:	adds	r3, #1
    fef2:	ldr	r0, [pc, #408]	; (1008c <_svfprintf_r+0x10bc>)
    fef4:	adds	r2, #16
    fef6:	cmp	r3, #7
    fef8:	strd	r0, r6, [r1]
    fefc:	strd	r3, r2, [sp, #148]	; 0x94
    ff00:	ble.n	fee6 <_svfprintf_r+0xf16>
    ff02:	add	r2, sp, #144	; 0x90
    ff04:	mov	r1, sl
    ff06:	mov	r0, fp
    ff08:	bl	11d38 <__ssprint_r>
    ff0c:	cmp	r0, #0
    ff0e:	bne.w	f89a <_svfprintf_r+0x8ca>
    ff12:	ldrd	r3, r2, [sp, #148]	; 0x94
    ff16:	add	r1, sp, #156	; 0x9c
    ff18:	b.n	fee8 <_svfprintf_r+0xf18>
    ff1a:	ldr	r3, [sp, #56]	; 0x38
    ff1c:	str.w	r9, [sp, #36]	; 0x24
    ff20:	adds	r3, r4, r3
    ff22:	str	r3, [sp, #12]
    ff24:	ldr	r3, [sp, #52]	; 0x34
    ff26:	str.w	r8, [sp, #40]	; 0x28
    ff2a:	ldr	r6, [sp, #76]	; 0x4c
    ff2c:	ldr	r5, [sp, #20]
    ff2e:	ldr.w	r9, [sp, #88]	; 0x58
    ff32:	ldr.w	r8, [sp, #60]	; 0x3c
    ff36:	str	r4, [sp, #44]	; 0x2c
    ff38:	vmov	r1, s22
    ff3c:	mov	r0, sl
    ff3e:	cmp	r3, #0
    ff40:	beq.n	ffac <_svfprintf_r+0xfdc>
    ff42:	cmp.w	r8, #0
    ff46:	bne.n	ffb4 <_svfprintf_r+0xfe4>
    ff48:	ldr	r3, [sp, #52]	; 0x34
    ff4a:	subs	r3, #1
    ff4c:	subs	r6, #1
    ff4e:	str	r3, [sp, #52]	; 0x34
    ff50:	ldr	r3, [sp, #84]	; 0x54
    ff52:	strd	r3, r9, [r0]
    ff56:	ldr	r3, [sp, #148]	; 0x94
    ff58:	adds	r3, #1
    ff5a:	add	r2, r9
    ff5c:	cmp	r3, #7
    ff5e:	str	r2, [sp, #152]	; 0x98
    ff60:	str	r3, [sp, #148]	; 0x94
    ff62:	bgt.n	1003e <_svfprintf_r+0x106e>
    ff64:	adds	r0, #8
    ff66:	ldr	r3, [sp, #12]
    ff68:	ldrb.w	ip, [r6]
    ff6c:	subs	r3, r3, r5
    ff6e:	cmp	r3, ip
    ff70:	it	ge
    ff72:	movge	r3, ip
    ff74:	cmp	r3, #0
    ff76:	mov	sl, r3
    ff78:	ble.n	ff94 <_svfprintf_r+0xfc4>
    ff7a:	ldr	r4, [sp, #148]	; 0x94
    ff7c:	adds	r4, #1
    ff7e:	add	r2, r3
    ff80:	cmp	r4, #7
    ff82:	strd	r5, r3, [r0]
    ff86:	str	r2, [sp, #152]	; 0x98
    ff88:	str	r4, [sp, #148]	; 0x94
    ff8a:	bgt.w	1027c <_svfprintf_r+0x12ac>
    ff8e:	ldrb.w	ip, [r6]
    ff92:	adds	r0, #8
    ff94:	cmp.w	sl, #0
    ff98:	ite	ge
    ff9a:	subge.w	r4, ip, sl
    ff9e:	movlt	r4, ip
    ffa0:	cmp	r4, #0
    ffa2:	bgt.n	ffba <_svfprintf_r+0xfea>
    ffa4:	add	r5, ip
    ffa6:	ldr	r3, [sp, #52]	; 0x34
    ffa8:	cmp	r3, #0
    ffaa:	bne.n	ff42 <_svfprintf_r+0xf72>
    ffac:	cmp.w	r8, #0
    ffb0:	beq.w	1070c <_svfprintf_r+0x173c>
    ffb4:	add.w	r8, r8, #4294967295
    ffb8:	b.n	ff50 <_svfprintf_r+0xf80>
    ffba:	cmp	r4, #16
    ffbc:	ldr.w	ip, [sp, #148]	; 0x94
    ffc0:	ble.n	1000c <_svfprintf_r+0x103c>
    ffc2:	str	r5, [sp, #20]
    ffc4:	mov.w	sl, #16
    ffc8:	mov	r3, ip
    ffca:	mov	r5, r1
    ffcc:	b.n	ffd8 <_svfprintf_r+0x1008>
    ffce:	subs	r4, #16
    ffd0:	cmp	r4, #16
    ffd2:	add.w	r0, r0, #8
    ffd6:	ble.n	10006 <_svfprintf_r+0x1036>
    ffd8:	adds	r3, #1
    ffda:	ldr	r1, [pc, #176]	; (1008c <_svfprintf_r+0x10bc>)
    ffdc:	adds	r2, #16
    ffde:	cmp	r3, #7
    ffe0:	strd	r1, sl, [r0]
    ffe4:	strd	r3, r2, [sp, #148]	; 0x94
    ffe8:	ble.n	ffce <_svfprintf_r+0xffe>
    ffea:	add	r2, sp, #144	; 0x90
    ffec:	mov	r1, r5
    ffee:	mov	r0, fp
    fff0:	bl	11d38 <__ssprint_r>
    fff4:	cmp	r0, #0
    fff6:	bne.w	f89a <_svfprintf_r+0x8ca>
    fffa:	subs	r4, #16
    fffc:	cmp	r4, #16
    fffe:	ldrd	r3, r2, [sp, #148]	; 0x94
   10002:	add	r0, sp, #156	; 0x9c
   10004:	bgt.n	ffd8 <_svfprintf_r+0x1008>
   10006:	mov	r1, r5
   10008:	ldr	r5, [sp, #20]
   1000a:	mov	ip, r3
   1000c:	add.w	r3, ip, #1
   10010:	add	r2, r4
   10012:	str	r4, [r0, #4]
   10014:	cmp	r3, #7
   10016:	ldr	r4, [pc, #116]	; (1008c <_svfprintf_r+0x10bc>)
   10018:	str	r4, [r0, #0]
   1001a:	strd	r3, r2, [sp, #148]	; 0x94
   1001e:	bgt.w	107ae <_svfprintf_r+0x17de>
   10022:	ldrb.w	ip, [r6]
   10026:	adds	r0, #8
   10028:	add	r5, ip
   1002a:	b.n	ffa6 <_svfprintf_r+0xfd6>
   1002c:	ands.w	r3, r8, #16
   10030:	beq.w	101b8 <_svfprintf_r+0x11e8>
   10034:	ldr	r3, [sp, #32]
   10036:	ldr.w	r2, [r3], #4
   1003a:	str	r3, [sp, #32]
   1003c:	b.n	fe32 <_svfprintf_r+0xe62>
   1003e:	add	r2, sp, #144	; 0x90
   10040:	mov	r0, fp
   10042:	str	r1, [sp, #20]
   10044:	bl	11d38 <__ssprint_r>
   10048:	cmp	r0, #0
   1004a:	bne.w	f89a <_svfprintf_r+0x8ca>
   1004e:	ldr	r2, [sp, #152]	; 0x98
   10050:	ldr	r1, [sp, #20]
   10052:	add	r0, sp, #156	; 0x9c
   10054:	b.n	ff66 <_svfprintf_r+0xf96>
   10056:	ldr	r0, [sp, #8]
   10058:	str.w	sl, [sp, #28]
   1005c:	add	r4, sp, #320	; 0x140
   1005e:	and.w	r0, r0, #1024	; 0x400
   10062:	movs	r5, #0
   10064:	vmov	s20, fp
   10068:	ldr	r3, [pc, #36]	; (10090 <_svfprintf_r+0x10c0>)
   1006a:	ldr.w	sl, [sp, #76]	; 0x4c
   1006e:	str.w	r9, [sp, #20]
   10072:	mov	fp, r4
   10074:	mov.w	r8, #5
   10078:	mov	ip, r5
   1007a:	mov	r4, r0
   1007c:	b.n	100a0 <_svfprintf_r+0x10d0>
   1007e:	nop
   10080:	.word	0x20000e68
   10084:	.word	0x20000e7c
   10088:	.word	0x20000e90
   1008c:	.word	0x20001308
   10090:	.word	0xcccccccd
   10094:	cmp	r2, #10
   10096:	sbcs.w	r1, r1, #0
   1009a:	bcc.n	1010a <_svfprintf_r+0x113a>
   1009c:	mov	r2, r9
   1009e:	mov	r1, r6
   100a0:	adds	r0, r2, r1
   100a2:	adc.w	r0, r0, #0
   100a6:	umull	r5, r6, r3, r0
   100aa:	bic.w	r5, r6, #3
   100ae:	add.w	r5, r5, r6, lsr #2
   100b2:	subs	r0, r0, r5
   100b4:	subs	r5, r2, r0
   100b6:	mov.w	r6, #3435973836	; 0xcccccccc
   100ba:	sbc.w	lr, r1, #0
   100be:	mul.w	r6, r6, r5
   100c2:	umull	r9, r5, r5, r3
   100c6:	mla	r6, r3, lr, r6
   100ca:	and.w	lr, r9, #1
   100ce:	add	r6, r5
   100d0:	umull	r5, lr, lr, r8
   100d4:	adds	r5, r5, r0
   100d6:	mov.w	r9, r9, lsr #1
   100da:	adds	r5, #48	; 0x30
   100dc:	strb.w	r5, [fp, #-1]
   100e0:	orr.w	r9, r9, r6, lsl #31
   100e4:	add.w	ip, ip, #1
   100e8:	add.w	fp, fp, #4294967295
   100ec:	lsrs	r6, r6, #1
   100ee:	cmp	r4, #0
   100f0:	beq.n	10094 <_svfprintf_r+0x10c4>
   100f2:	ldrb.w	r0, [sl]
   100f6:	cmp	ip, r0
   100f8:	bne.n	10094 <_svfprintf_r+0x10c4>
   100fa:	cmp.w	ip, #255	; 0xff
   100fe:	beq.n	10094 <_svfprintf_r+0x10c4>
   10100:	cmp	r2, #10
   10102:	sbcs.w	r1, r1, #0
   10106:	bcs.w	10428 <_svfprintf_r+0x1458>
   1010a:	mov	r4, fp
   1010c:	add	r3, sp, #320	; 0x140
   1010e:	subs	r3, r3, r4
   10110:	ldr.w	r9, [sp, #20]
   10114:	str.w	sl, [sp, #76]	; 0x4c
   10118:	vmov	fp, s20
   1011c:	ldr.w	sl, [sp, #28]
   10120:	ldr.w	r8, [sp, #8]
   10124:	str.w	ip, [sp, #56]	; 0x38
   10128:	str	r3, [sp, #20]
   1012a:	b.w	f6b2 <_svfprintf_r+0x6e2>
   1012e:	vmov	r1, s22
   10132:	add	r2, sp, #144	; 0x90
   10134:	mov	r0, fp
   10136:	bl	11d38 <__ssprint_r>
   1013a:	cmp	r0, #0
   1013c:	bne.w	f89a <_svfprintf_r+0x8ca>
   10140:	ldrb.w	r1, [sp, #103]	; 0x67
   10144:	ldr	r2, [sp, #152]	; 0x98
   10146:	add.w	sl, sp, #156	; 0x9c
   1014a:	b.w	f27a <_svfprintf_r+0x2aa>
   1014e:	ldr	r3, [sp, #148]	; 0x94
   10150:	ldr	r0, [pc, #760]	; (1044c <_svfprintf_r+0x147c>)
   10152:	str.w	r0, [sl]
   10156:	adds	r3, #1
   10158:	adds	r2, #1
   1015a:	movs	r0, #1
   1015c:	cmp	r3, #7
   1015e:	str	r2, [sp, #152]	; 0x98
   10160:	str	r3, [sp, #148]	; 0x94
   10162:	str.w	r0, [sl, #4]
   10166:	bgt.w	10458 <_svfprintf_r+0x1488>
   1016a:	add.w	sl, sl, #8
   1016e:	cmp	r1, #0
   10170:	bne.w	102d2 <_svfprintf_r+0x1302>
   10174:	ldr	r1, [sp, #56]	; 0x38
   10176:	and.w	r3, r8, #1
   1017a:	orrs	r3, r1
   1017c:	beq.w	f300 <_svfprintf_r+0x330>
   10180:	ldr	r3, [sp, #64]	; 0x40
   10182:	ldr	r1, [sp, #72]	; 0x48
   10184:	add	r2, r3
   10186:	strd	r1, r3, [sl]
   1018a:	ldr	r3, [sp, #148]	; 0x94
   1018c:	str	r2, [sp, #152]	; 0x98
   1018e:	adds	r3, #1
   10190:	cmp	r3, #7
   10192:	str	r3, [sp, #148]	; 0x94
   10194:	bgt.w	1063c <_svfprintf_r+0x166c>
   10198:	add.w	sl, sl, #8
   1019c:	ldr	r1, [sp, #56]	; 0x38
   1019e:	str.w	r4, [sl]
   101a2:	adds	r3, #1
   101a4:	add	r2, r1
   101a6:	cmp	r3, #7
   101a8:	strd	r3, r2, [sp, #148]	; 0x94
   101ac:	str.w	r1, [sl, #4]
   101b0:	ble.w	f2fc <_svfprintf_r+0x32c>
   101b4:	b.w	f932 <_svfprintf_r+0x962>
   101b8:	ands.w	r2, r8, #64	; 0x40
   101bc:	beq.w	1037a <_svfprintf_r+0x13aa>
   101c0:	ldr	r0, [sp, #32]
   101c2:	ldr.w	r2, [r0], #4
   101c6:	str	r0, [sp, #32]
   101c8:	mov	r1, r3
   101ca:	uxth	r2, r2
   101cc:	b.n	fe32 <_svfprintf_r+0xe62>
   101ce:	vmov	r1, s22
   101d2:	add	r2, sp, #144	; 0x90
   101d4:	mov	r0, fp
   101d6:	bl	11d38 <__ssprint_r>
   101da:	cmp	r0, #0
   101dc:	bne.w	f89a <_svfprintf_r+0x8ca>
   101e0:	ldr	r2, [sp, #152]	; 0x98
   101e2:	add.w	sl, sp, #156	; 0x9c
   101e6:	b.w	f730 <_svfprintf_r+0x760>
   101ea:	add	r6, sp, #136	; 0x88
   101ec:	movs	r2, #8
   101ee:	movs	r1, #0
   101f0:	mov	r0, r6
   101f2:	str	r4, [sp, #116]	; 0x74
   101f4:	bl	e064 <memset>
   101f8:	ldr	r3, [sp, #12]
   101fa:	adds	r2, r3, #1
   101fc:	beq.w	103b6 <_svfprintf_r+0x13e6>
   10200:	movs	r5, #0
   10202:	str.w	r9, [sp, #8]
   10206:	str.w	r8, [sp, #28]
   1020a:	mov	r9, r3
   1020c:	mov	r8, r5
   1020e:	b.n	1022a <_svfprintf_r+0x125a>
   10210:	add	r1, sp, #220	; 0xdc
   10212:	mov	r0, fp
   10214:	bl	11cac <_wcrtomb_r>
   10218:	adds	r3, r0, #1
   1021a:	add	r0, r8
   1021c:	beq.w	109b0 <_svfprintf_r+0x19e0>
   10220:	cmp	r0, r9
   10222:	bgt.n	10236 <_svfprintf_r+0x1266>
   10224:	beq.w	10a58 <_svfprintf_r+0x1a88>
   10228:	mov	r8, r0
   1022a:	ldr	r2, [sp, #116]	; 0x74
   1022c:	ldr	r2, [r2, r5]
   1022e:	mov	r3, r6
   10230:	adds	r5, #4
   10232:	cmp	r2, #0
   10234:	bne.n	10210 <_svfprintf_r+0x1240>
   10236:	str.w	r8, [sp, #20]
   1023a:	ldr.w	r9, [sp, #8]
   1023e:	ldr.w	r8, [sp, #28]
   10242:	b.n	103d0 <_svfprintf_r+0x1400>
   10244:	adds	r3, #1
   10246:	ldr	r1, [pc, #520]	; (10450 <_svfprintf_r+0x1480>)
   10248:	str.w	r4, [sl, #4]
   1024c:	add	r2, r4
   1024e:	cmp	r3, #7
   10250:	str.w	r1, [sl]
   10254:	strd	r3, r2, [sp, #148]	; 0x94
   10258:	ble.w	f2fc <_svfprintf_r+0x32c>
   1025c:	b.w	f932 <_svfprintf_r+0x962>
   10260:	vmov	r1, s22
   10264:	add	r2, sp, #144	; 0x90
   10266:	mov	r0, fp
   10268:	bl	11d38 <__ssprint_r>
   1026c:	cmp	r0, #0
   1026e:	bne.w	f89a <_svfprintf_r+0x8ca>
   10272:	ldr	r2, [sp, #152]	; 0x98
   10274:	add.w	sl, sp, #156	; 0x9c
   10278:	b.w	f2ce <_svfprintf_r+0x2fe>
   1027c:	add	r2, sp, #144	; 0x90
   1027e:	mov	r0, fp
   10280:	str	r1, [sp, #20]
   10282:	bl	11d38 <__ssprint_r>
   10286:	cmp	r0, #0
   10288:	bne.w	f89a <_svfprintf_r+0x8ca>
   1028c:	ldrb.w	ip, [r6]
   10290:	ldr	r2, [sp, #152]	; 0x98
   10292:	ldr	r1, [sp, #20]
   10294:	add	r0, sp, #156	; 0x9c
   10296:	b.n	ff94 <_svfprintf_r+0xfc4>
   10298:	cmp	r3, #1
   1029a:	str.w	r8, [sp, #8]
   1029e:	bne.w	f688 <_svfprintf_r+0x6b8>
   102a2:	b.w	f9cc <_svfprintf_r+0x9fc>
   102a6:	ldr	r3, [sp, #32]
   102a8:	ldr	r1, [sp, #16]
   102aa:	ldr.w	r2, [r3], #4
   102ae:	mov	r4, r9
   102b0:	str	r1, [r2, #0]
   102b2:	str	r3, [sp, #32]
   102b4:	b.w	f034 <_svfprintf_r+0x64>
   102b8:	adds	r3, #1
   102ba:	ldr	r1, [pc, #404]	; (10450 <_svfprintf_r+0x1480>)
   102bc:	str.w	r4, [sl, #4]
   102c0:	add	r2, r4
   102c2:	cmp	r3, #7
   102c4:	strd	r3, r2, [sp, #148]	; 0x94
   102c8:	str.w	r1, [sl]
   102cc:	ble.w	f914 <_svfprintf_r+0x944>
   102d0:	b.n	fbca <_svfprintf_r+0xbfa>
   102d2:	ldr	r3, [sp, #64]	; 0x40
   102d4:	ldr	r0, [sp, #72]	; 0x48
   102d6:	add	r2, r3
   102d8:	strd	r0, r3, [sl]
   102dc:	ldr	r3, [sp, #148]	; 0x94
   102de:	str	r2, [sp, #152]	; 0x98
   102e0:	adds	r3, #1
   102e2:	cmp	r3, #7
   102e4:	str	r3, [sp, #148]	; 0x94
   102e6:	bgt.w	1063c <_svfprintf_r+0x166c>
   102ea:	add.w	sl, sl, #8
   102ee:	cmp	r1, #0
   102f0:	bge.w	1019c <_svfprintf_r+0x11cc>
   102f4:	negs	r5, r1
   102f6:	adds	r1, #16
   102f8:	bge.w	1091a <_svfprintf_r+0x194a>
   102fc:	vmov	r1, s22
   10300:	movs	r6, #16
   10302:	b.n	10310 <_svfprintf_r+0x1340>
   10304:	add.w	sl, sl, #8
   10308:	subs	r5, #16
   1030a:	cmp	r5, #16
   1030c:	ble.w	1091a <_svfprintf_r+0x194a>
   10310:	adds	r3, #1
   10312:	ldr	r0, [pc, #316]	; (10450 <_svfprintf_r+0x1480>)
   10314:	adds	r2, #16
   10316:	cmp	r3, #7
   10318:	strd	r0, r6, [sl]
   1031c:	strd	r3, r2, [sp, #148]	; 0x94
   10320:	ble.n	10304 <_svfprintf_r+0x1334>
   10322:	add	r2, sp, #144	; 0x90
   10324:	mov	r0, fp
   10326:	str	r1, [sp, #12]
   10328:	bl	11d38 <__ssprint_r>
   1032c:	cmp	r0, #0
   1032e:	bne.w	f89a <_svfprintf_r+0x8ca>
   10332:	ldrd	r3, r2, [sp, #148]	; 0x94
   10336:	ldr	r1, [sp, #12]
   10338:	add.w	sl, sp, #156	; 0x9c
   1033c:	b.n	10308 <_svfprintf_r+0x1338>
   1033e:	ldr	r3, [sp, #32]
   10340:	ands.w	r1, r8, #512	; 0x200
   10344:	itte	ne
   10346:	movne	r1, r2
   10348:	ldrne.w	r2, [r3], #4
   1034c:	ldreq.w	r2, [r3], #4
   10350:	str	r3, [sp, #32]
   10352:	it	ne
   10354:	uxtbne	r2, r2
   10356:	b.w	f5e4 <_svfprintf_r+0x614>
   1035a:	ldr	r3, [sp, #8]
   1035c:	ands.w	r1, r3, #512	; 0x200
   10360:	ldr	r3, [sp, #32]
   10362:	itte	ne
   10364:	movne	r1, r2
   10366:	ldrne.w	r2, [r3], #4
   1036a:	ldreq.w	r2, [r3], #4
   1036e:	str	r3, [sp, #32]
   10370:	it	ne
   10372:	uxtbne	r2, r2
   10374:	movs	r3, #1
   10376:	b.w	f51a <_svfprintf_r+0x54a>
   1037a:	ldr	r3, [sp, #32]
   1037c:	ands.w	r1, r8, #512	; 0x200
   10380:	itte	ne
   10382:	movne	r1, r2
   10384:	ldrne.w	r2, [r3], #4
   10388:	ldreq.w	r2, [r3], #4
   1038c:	str	r3, [sp, #32]
   1038e:	it	ne
   10390:	uxtbne	r2, r2
   10392:	b.n	fe32 <_svfprintf_r+0xe62>
   10394:	mov	sl, r1
   10396:	adds	r3, #1
   10398:	ldr	r1, [pc, #180]	; (10450 <_svfprintf_r+0x1480>)
   1039a:	str.w	r5, [sl, #4]
   1039e:	add	r2, r5
   103a0:	cmp	r3, #7
   103a2:	strd	r3, r2, [sp, #148]	; 0x94
   103a6:	str.w	r1, [sl]
   103aa:	bgt.w	10620 <_svfprintf_r+0x1650>
   103ae:	add.w	sl, sl, #8
   103b2:	b.w	face <_svfprintf_r+0xafe>
   103b6:	movs	r3, #0
   103b8:	mov	r1, r3
   103ba:	str	r6, [sp, #0]
   103bc:	add	r2, sp, #116	; 0x74
   103be:	mov	r0, fp
   103c0:	bl	11cf8 <_wcsrtombs_r>
   103c4:	mov	r3, r0
   103c6:	adds	r3, #1
   103c8:	str	r0, [sp, #20]
   103ca:	beq.w	109b0 <_svfprintf_r+0x19e0>
   103ce:	str	r4, [sp, #116]	; 0x74
   103d0:	ldr	r3, [sp, #20]
   103d2:	cmp	r3, #0
   103d4:	beq.n	10474 <_svfprintf_r+0x14a4>
   103d6:	cmp	r3, #99	; 0x63
   103d8:	bgt.w	1060c <_svfprintf_r+0x163c>
   103dc:	movs	r3, #0
   103de:	str	r3, [sp, #28]
   103e0:	add	r4, sp, #220	; 0xdc
   103e2:	movs	r2, #8
   103e4:	movs	r1, #0
   103e6:	mov	r0, r6
   103e8:	bl	e064 <memset>
   103ec:	ldr	r5, [sp, #20]
   103ee:	str	r6, [sp, #0]
   103f0:	mov	r3, r5
   103f2:	add	r2, sp, #116	; 0x74
   103f4:	mov	r1, r4
   103f6:	mov	r0, fp
   103f8:	bl	11cf8 <_wcsrtombs_r>
   103fc:	cmp	r5, r0
   103fe:	bne.w	10afa <_svfprintf_r+0x1b2a>
   10402:	ldr	r2, [sp, #20]
   10404:	movs	r3, #0
   10406:	strb	r3, [r4, r2]
   10408:	bic.w	r2, r2, r2, asr #31
   1040c:	strd	r3, r3, [sp, #48]	; 0x30
   10410:	ldrb.w	r1, [sp, #103]	; 0x67
   10414:	str	r3, [sp, #12]
   10416:	str	r2, [sp, #8]
   10418:	str	r3, [sp, #60]	; 0x3c
   1041a:	b.w	f392 <_svfprintf_r+0x3c2>
   1041e:	movs	r1, #45	; 0x2d
   10420:	strb.w	r1, [sp, #103]	; 0x67
   10424:	b.w	f370 <_svfprintf_r+0x3a0>
   10428:	ldr	r3, [sp, #88]	; 0x58
   1042a:	ldr	r1, [sp, #84]	; 0x54
   1042c:	sub.w	fp, fp, r3
   10430:	mov	r2, r3
   10432:	mov	r0, fp
   10434:	bl	e194 <strncpy>
   10438:	ldrb.w	r2, [sl, #1]
   1043c:	ldr	r3, [pc, #20]	; (10454 <_svfprintf_r+0x1484>)
   1043e:	cbz	r2, 10444 <_svfprintf_r+0x1474>
   10440:	add.w	sl, sl, #1
   10444:	mov.w	ip, #0
   10448:	b.n	1009c <_svfprintf_r+0x10cc>
   1044a:	nop
   1044c:	.word	0x20000e98
   10450:	.word	0x20001308
   10454:	.word	0xcccccccd
   10458:	vmov	r1, s22
   1045c:	add	r2, sp, #144	; 0x90
   1045e:	mov	r0, fp
   10460:	bl	11d38 <__ssprint_r>
   10464:	cmp	r0, #0
   10466:	bne.w	f89a <_svfprintf_r+0x8ca>
   1046a:	ldr	r1, [sp, #108]	; 0x6c
   1046c:	ldr	r2, [sp, #152]	; 0x98
   1046e:	add.w	sl, sp, #156	; 0x9c
   10472:	b.n	1016e <_svfprintf_r+0x119e>
   10474:	ldr	r3, [sp, #20]
   10476:	ldrb.w	r1, [sp, #103]	; 0x67
   1047a:	str	r3, [sp, #60]	; 0x3c
   1047c:	strd	r3, r3, [sp, #8]
   10480:	strd	r3, r3, [sp, #48]	; 0x30
   10484:	str	r3, [sp, #28]
   10486:	b.w	f392 <_svfprintf_r+0x3c2>
   1048a:	ldr	r1, [sp, #56]	; 0x38
   1048c:	ldr	r0, [sp, #20]
   1048e:	adds	r5, r4, r1
   10490:	subs	r5, r5, r0
   10492:	subs	r4, r1, r3
   10494:	cmp	r5, r4
   10496:	it	ge
   10498:	movge	r5, r4
   1049a:	b.w	fb38 <_svfprintf_r+0xb68>
   1049e:	ldr	r3, [sp, #32]
   104a0:	ldr	r1, [sp, #16]
   104a2:	ldr.w	r2, [r3], #4
   104a6:	str	r3, [sp, #32]
   104a8:	strh	r1, [r2, #0]
   104aa:	mov	r4, r9
   104ac:	b.w	f034 <_svfprintf_r+0x64>
   104b0:	ldrsb.w	r2, [r3], #4
   104b4:	str	r3, [sp, #32]
   104b6:	asrs	r1, r2, #31
   104b8:	mov	r3, r1
   104ba:	b.w	f474 <_svfprintf_r+0x4a4>
   104be:	ldr	r2, [sp, #12]
   104c0:	movs	r1, #2
   104c2:	add	r3, sp, #136	; 0x88
   104c4:	str	r3, [sp, #4]
   104c6:	add	r3, sp, #116	; 0x74
   104c8:	str	r3, [sp, #0]
   104ca:	mov	r0, fp
   104cc:	add	r3, sp, #108	; 0x6c
   104ce:	vmov.f64	d0, d10
   104d2:	str	r2, [sp, #8]
   104d4:	bl	10fc0 <_dtoa_r>
   104d8:	cmp	r5, #71	; 0x47
   104da:	ldr	r2, [sp, #8]
   104dc:	mov	r4, r0
   104de:	beq.w	107a4 <_svfprintf_r+0x17d4>
   104e2:	cmp	r5, #70	; 0x46
   104e4:	add	r0, r2
   104e6:	bne.n	104f4 <_svfprintf_r+0x1524>
   104e8:	ldrb	r3, [r4, #0]
   104ea:	cmp	r3, #48	; 0x30
   104ec:	beq.w	109ce <_svfprintf_r+0x19fe>
   104f0:	ldr	r2, [sp, #108]	; 0x6c
   104f2:	add	r0, r2
   104f4:	vcmp.f64	d10, #0.0
   104f8:	vmrs	APSR_nzcv, fpscr
   104fc:	bne.w	1078c <_svfprintf_r+0x17bc>
   10500:	mov	r3, r0
   10502:	subs	r3, r3, r4
   10504:	str	r3, [sp, #56]	; 0x38
   10506:	cmp	r5, #71	; 0x47
   10508:	beq.w	1072c <_svfprintf_r+0x175c>
   1050c:	cmp	r5, #70	; 0x46
   1050e:	beq.w	1087c <_svfprintf_r+0x18ac>
   10512:	ldr	r3, [sp, #108]	; 0x6c
   10514:	str	r3, [sp, #48]	; 0x30
   10516:	ldr	r3, [sp, #48]	; 0x30
   10518:	cmp	r5, #65	; 0x41
   1051a:	add.w	r3, r3, #4294967295
   1051e:	str	r3, [sp, #108]	; 0x6c
   10520:	beq.w	108ee <_svfprintf_r+0x191e>
   10524:	ldrb.w	r2, [sp, #44]	; 0x2c
   10528:	movs	r1, #0
   1052a:	cmp	r3, #0
   1052c:	it	lt
   1052e:	ldrlt	r3, [sp, #48]	; 0x30
   10530:	strb.w	r2, [sp, #120]	; 0x78
   10534:	itte	lt
   10536:	rsblt	r3, r3, #1
   1053a:	movlt	r2, #45	; 0x2d
   1053c:	movge	r2, #43	; 0x2b
   1053e:	cmp	r3, #9
   10540:	strb.w	r2, [sp, #121]	; 0x79
   10544:	ble.w	108fc <_svfprintf_r+0x192c>
   10548:	add.w	r5, sp, #143	; 0x8f
   1054c:	ldr.w	ip, [pc, #1052]	; 1096c <_svfprintf_r+0x199c>
   10550:	mov	r2, r5
   10552:	mov	r0, r2
   10554:	smull	r2, r1, ip, r3
   10558:	asrs	r2, r3, #31
   1055a:	rsb	r2, r2, r1, asr #2
   1055e:	add.w	r1, r2, r2, lsl #2
   10562:	sub.w	r1, r3, r1, lsl #1
   10566:	adds	r1, #48	; 0x30
   10568:	strb.w	r1, [r0, #-1]
   1056c:	mov	r1, r3
   1056e:	cmp	r1, #99	; 0x63
   10570:	mov	r3, r2
   10572:	add.w	r2, r0, #4294967295
   10576:	bgt.n	10552 <_svfprintf_r+0x1582>
   10578:	adds	r3, #48	; 0x30
   1057a:	uxtb	r1, r3
   1057c:	subs	r3, r0, #2
   1057e:	cmp	r5, r3
   10580:	strb.w	r1, [r2, #-1]
   10584:	bls.w	10a9e <_svfprintf_r+0x1ace>
   10588:	mov	r3, r2
   1058a:	add.w	r2, sp, #122	; 0x7a
   1058e:	b.n	10594 <_svfprintf_r+0x15c4>
   10590:	ldrb.w	r1, [r3], #1
   10594:	strb.w	r1, [r2], #1
   10598:	cmp	r5, r3
   1059a:	bne.n	10590 <_svfprintf_r+0x15c0>
   1059c:	add.w	r3, sp, #145	; 0x91
   105a0:	add.w	r2, sp, #122	; 0x7a
   105a4:	subs	r3, r3, r0
   105a6:	add	r3, r2
   105a8:	add	r2, sp, #120	; 0x78
   105aa:	subs	r3, r3, r2
   105ac:	str	r3, [sp, #80]	; 0x50
   105ae:	ldr	r3, [sp, #56]	; 0x38
   105b0:	ldr	r2, [sp, #80]	; 0x50
   105b2:	cmp	r3, #1
   105b4:	add	r2, r3
   105b6:	str	r2, [sp, #20]
   105b8:	ble.w	109c2 <_svfprintf_r+0x19f2>
   105bc:	ldr	r3, [sp, #20]
   105be:	ldr	r2, [sp, #64]	; 0x40
   105c0:	add	r3, r2
   105c2:	str	r3, [sp, #20]
   105c4:	bic.w	r3, r6, #1024	; 0x400
   105c8:	ldr	r2, [sp, #20]
   105ca:	orr.w	r8, r3, #256	; 0x100
   105ce:	movs	r3, #0
   105d0:	strd	r3, r3, [sp, #48]	; 0x30
   105d4:	bic.w	r2, r2, r2, asr #31
   105d8:	str	r3, [sp, #60]	; 0x3c
   105da:	str	r2, [sp, #8]
   105dc:	ldr	r3, [sp, #36]	; 0x24
   105de:	cmp	r3, #0
   105e0:	bne.w	10746 <_svfprintf_r+0x1776>
   105e4:	ldrb.w	r1, [sp, #103]	; 0x67
   105e8:	str	r3, [sp, #12]
   105ea:	b.w	f392 <_svfprintf_r+0x3c2>
   105ee:	mov	r0, r4
   105f0:	bl	e400 <strlen>
   105f4:	mov	r2, r0
   105f6:	str	r0, [sp, #20]
   105f8:	b.w	f43c <_svfprintf_r+0x46c>
   105fc:	vmov	r1, s22
   10600:	add	r2, sp, #144	; 0x90
   10602:	mov	r0, fp
   10604:	bl	11d38 <__ssprint_r>
   10608:	b.w	f1e6 <_svfprintf_r+0x216>
   1060c:	adds	r1, r3, #1
   1060e:	mov	r0, fp
   10610:	bl	d250 <_malloc_r>
   10614:	mov	r4, r0
   10616:	cmp	r0, #0
   10618:	beq.w	109b0 <_svfprintf_r+0x19e0>
   1061c:	str	r0, [sp, #28]
   1061e:	b.n	103e2 <_svfprintf_r+0x1412>
   10620:	vmov	r1, s22
   10624:	add	r2, sp, #144	; 0x90
   10626:	mov	r0, fp
   10628:	bl	11d38 <__ssprint_r>
   1062c:	cmp	r0, #0
   1062e:	bne.w	f89a <_svfprintf_r+0x8ca>
   10632:	ldr	r2, [sp, #152]	; 0x98
   10634:	add.w	sl, sp, #156	; 0x9c
   10638:	b.w	face <_svfprintf_r+0xafe>
   1063c:	vmov	r1, s22
   10640:	add	r2, sp, #144	; 0x90
   10642:	mov	r0, fp
   10644:	bl	11d38 <__ssprint_r>
   10648:	cmp	r0, #0
   1064a:	bne.w	f89a <_svfprintf_r+0x8ca>
   1064e:	ldrd	r3, r2, [sp, #148]	; 0x94
   10652:	ldr	r1, [sp, #108]	; 0x6c
   10654:	add.w	sl, sp, #156	; 0x9c
   10658:	b.n	102ee <_svfprintf_r+0x131e>
   1065a:	movs	r3, #6
   1065c:	str	r3, [sp, #12]
   1065e:	b.w	fd68 <_svfprintf_r+0xd98>
   10662:	ldr	r3, [sp, #12]
   10664:	movs	r1, #2
   10666:	adds	r2, r3, #1
   10668:	b.n	104c2 <_svfprintf_r+0x14f2>
   1066a:	ldr	r2, [sp, #12]
   1066c:	movs	r1, #3
   1066e:	b.n	104c2 <_svfprintf_r+0x14f2>
   10670:	add	r0, sp, #108	; 0x6c
   10672:	vmov.f64	d0, d10
   10676:	bl	10d68 <frexp>
   1067a:	vmov.f64	d7, #64	; 0x3e000000  0.125
   1067e:	vmul.f64	d0, d0, d7
   10682:	vcmp.f64	d0, #0.0
   10686:	vmrs	APSR_nzcv, fpscr
   1068a:	bne.n	10690 <_svfprintf_r+0x16c0>
   1068c:	movs	r3, #1
   1068e:	str	r3, [sp, #108]	; 0x6c
   10690:	ldr	r0, [pc, #716]	; (10960 <_svfprintf_r+0x1990>)
   10692:	ldr	r3, [sp, #12]
   10694:	vmov.f64	d5, #48	; 0x41800000  16.0
   10698:	subs	r3, #1
   1069a:	mov	r2, r4
   1069c:	b.n	106a8 <_svfprintf_r+0x16d8>
   1069e:	vcmp.f64	d0, #0.0
   106a2:	vmrs	APSR_nzcv, fpscr
   106a6:	beq.n	106d0 <_svfprintf_r+0x1700>
   106a8:	vmul.f64	d0, d0, d5
   106ac:	vcvt.s32.f64	s15, d0
   106b0:	cmp.w	r3, #4294967295
   106b4:	vmov	r1, s15
   106b8:	ldrb	r1, [r0, r1]
   106ba:	vcvt.f64.s32	d6, s15
   106be:	mov	ip, r2
   106c0:	vsub.f64	d0, d0, d6
   106c4:	strb.w	r1, [r2], #1
   106c8:	mov	r1, r3
   106ca:	add.w	r3, r3, #4294967295
   106ce:	bne.n	1069e <_svfprintf_r+0x16ce>
   106d0:	vmov.f64	d6, #96	; 0x3f000000  0.5
   106d4:	vcmpe.f64	d0, d6
   106d8:	vmrs	APSR_nzcv, fpscr
   106dc:	bgt.w	10970 <_svfprintf_r+0x19a0>
   106e0:	vcmp.f64	d0, d6
   106e4:	vmrs	APSR_nzcv, fpscr
   106e8:	bne.n	106f4 <_svfprintf_r+0x1724>
   106ea:	vmov	r3, s15
   106ee:	lsls	r3, r3, #31
   106f0:	bmi.w	10970 <_svfprintf_r+0x19a0>
   106f4:	cmp	r1, #0
   106f6:	blt.n	10706 <_svfprintf_r+0x1736>
   106f8:	adds	r3, r1, #1
   106fa:	add	r3, r2
   106fc:	movs	r1, #48	; 0x30
   106fe:	strb.w	r1, [r2], #1
   10702:	cmp	r3, r2
   10704:	bne.n	106fe <_svfprintf_r+0x172e>
   10706:	subs	r3, r2, r4
   10708:	str	r3, [sp, #56]	; 0x38
   1070a:	b.n	10506 <_svfprintf_r+0x1536>
   1070c:	ldr	r4, [sp, #44]	; 0x2c
   1070e:	ldr	r3, [sp, #56]	; 0x38
   10710:	ldr.w	r9, [sp, #36]	; 0x24
   10714:	ldr.w	r8, [sp, #40]	; 0x28
   10718:	str	r6, [sp, #76]	; 0x4c
   1071a:	adds	r3, r4, r3
   1071c:	cmp	r5, r3
   1071e:	mov	r1, r5
   10720:	it	cs
   10722:	movcs	r1, r3
   10724:	mov	sl, r0
   10726:	str	r1, [sp, #20]
   10728:	b.w	fadc <_svfprintf_r+0xb0c>
   1072c:	ldr	r3, [sp, #108]	; 0x6c
   1072e:	str	r3, [sp, #48]	; 0x30
   10730:	adds	r2, r3, #3
   10732:	blt.n	1073a <_svfprintf_r+0x176a>
   10734:	ldr	r2, [sp, #12]
   10736:	cmp	r3, r2
   10738:	ble.n	10754 <_svfprintf_r+0x1784>
   1073a:	ldr	r3, [sp, #44]	; 0x2c
   1073c:	subs	r3, #2
   1073e:	str	r3, [sp, #44]	; 0x2c
   10740:	bic.w	r5, r3, #32
   10744:	b.n	10516 <_svfprintf_r+0x1546>
   10746:	movs	r1, #45	; 0x2d
   10748:	movs	r3, #0
   1074a:	strb.w	r1, [sp, #103]	; 0x67
   1074e:	str	r3, [sp, #12]
   10750:	b.w	f398 <_svfprintf_r+0x3c8>
   10754:	ldr	r3, [sp, #48]	; 0x30
   10756:	ldr	r2, [sp, #56]	; 0x38
   10758:	cmp	r3, r2
   1075a:	blt.w	108d8 <_svfprintf_r+0x1908>
   1075e:	lsls	r0, r6, #31
   10760:	ldr	r3, [sp, #48]	; 0x30
   10762:	bpl.w	109ca <_svfprintf_r+0x19fa>
   10766:	ldr	r2, [sp, #64]	; 0x40
   10768:	add	r3, r2
   1076a:	str	r3, [sp, #20]
   1076c:	lsls	r1, r6, #21
   1076e:	bpl.n	10778 <_svfprintf_r+0x17a8>
   10770:	ldr	r3, [sp, #48]	; 0x30
   10772:	cmp	r3, #0
   10774:	bgt.w	109e2 <_svfprintf_r+0x1a12>
   10778:	ldr	r3, [sp, #20]
   1077a:	bic.w	r3, r3, r3, asr #31
   1077e:	str	r3, [sp, #8]
   10780:	movs	r3, #103	; 0x67
   10782:	str	r3, [sp, #44]	; 0x2c
   10784:	movs	r3, #0
   10786:	str	r3, [sp, #60]	; 0x3c
   10788:	str	r3, [sp, #52]	; 0x34
   1078a:	b.n	105dc <_svfprintf_r+0x160c>
   1078c:	ldr	r3, [sp, #136]	; 0x88
   1078e:	cmp	r3, r0
   10790:	bcs.w	10502 <_svfprintf_r+0x1532>
   10794:	movs	r1, #48	; 0x30
   10796:	adds	r2, r3, #1
   10798:	str	r2, [sp, #136]	; 0x88
   1079a:	strb	r1, [r3, #0]
   1079c:	ldr	r3, [sp, #136]	; 0x88
   1079e:	cmp	r0, r3
   107a0:	bhi.n	10796 <_svfprintf_r+0x17c6>
   107a2:	b.n	10502 <_svfprintf_r+0x1532>
   107a4:	lsls	r3, r6, #31
   107a6:	bmi.w	108f8 <_svfprintf_r+0x1928>
   107aa:	ldr	r3, [sp, #136]	; 0x88
   107ac:	b.n	10502 <_svfprintf_r+0x1532>
   107ae:	add	r2, sp, #144	; 0x90
   107b0:	mov	r0, fp
   107b2:	str	r1, [sp, #20]
   107b4:	bl	11d38 <__ssprint_r>
   107b8:	cmp	r0, #0
   107ba:	bne.w	f89a <_svfprintf_r+0x8ca>
   107be:	ldrb.w	ip, [r6]
   107c2:	ldr	r2, [sp, #152]	; 0x98
   107c4:	ldr	r1, [sp, #20]
   107c6:	add	r0, sp, #156	; 0x9c
   107c8:	add	r5, ip
   107ca:	b.w	ffa6 <_svfprintf_r+0xfd6>
   107ce:	vmov	r1, s22
   107d2:	add	r2, sp, #144	; 0x90
   107d4:	mov	r0, fp
   107d6:	bl	11d38 <__ssprint_r>
   107da:	cmp	r0, #0
   107dc:	bne.w	f89a <_svfprintf_r+0x8ca>
   107e0:	ldr	r2, [sp, #152]	; 0x98
   107e2:	add.w	sl, sp, #156	; 0x9c
   107e6:	b.w	fac0 <_svfprintf_r+0xaf0>
   107ea:	movs	r3, #120	; 0x78
   107ec:	strb.w	r3, [sp, #105]	; 0x69
   107f0:	movs	r3, #48	; 0x30
   107f2:	strb.w	r3, [sp, #104]	; 0x68
   107f6:	ldr	r3, [sp, #12]
   107f8:	cmp	r3, #99	; 0x63
   107fa:	orr.w	r6, r8, #2
   107fe:	bgt.w	1094e <_svfprintf_r+0x197e>
   10802:	movs	r3, #0
   10804:	str	r3, [sp, #28]
   10806:	add	r4, sp, #220	; 0xdc
   10808:	vmov	r3, s17
   1080c:	cmp	r3, #0
   1080e:	orr.w	r8, r8, #258	; 0x102
   10812:	blt.n	1086c <_svfprintf_r+0x189c>
   10814:	vmov.f64	d10, d8
   10818:	ldr	r3, [sp, #44]	; 0x2c
   1081a:	bic.w	r5, r3, #32
   1081e:	movs	r3, #0
   10820:	str	r3, [sp, #36]	; 0x24
   10822:	ldr	r3, [sp, #44]	; 0x2c
   10824:	cmp	r3, #97	; 0x61
   10826:	bne.w	fd84 <_svfprintf_r+0xdb4>
   1082a:	vmov.f64	d0, d10
   1082e:	add	r0, sp, #108	; 0x6c
   10830:	bl	10d68 <frexp>
   10834:	vmov.f64	d7, #64	; 0x3e000000  0.125
   10838:	vmul.f64	d0, d0, d7
   1083c:	vcmp.f64	d0, #0.0
   10840:	vmrs	APSR_nzcv, fpscr
   10844:	bne.n	1084a <_svfprintf_r+0x187a>
   10846:	movs	r3, #1
   10848:	str	r3, [sp, #108]	; 0x6c
   1084a:	ldr	r0, [pc, #280]	; (10964 <_svfprintf_r+0x1994>)
   1084c:	b.n	10692 <_svfprintf_r+0x16c2>
   1084e:	vmov	r1, s22
   10852:	add	r2, sp, #144	; 0x90
   10854:	mov	r0, fp
   10856:	bl	11d38 <__ssprint_r>
   1085a:	cmp	r0, #0
   1085c:	bne.w	f89a <_svfprintf_r+0x8ca>
   10860:	ldr	r3, [sp, #108]	; 0x6c
   10862:	ldr	r2, [sp, #152]	; 0x98
   10864:	add.w	sl, sp, #156	; 0x9c
   10868:	b.w	fb08 <_svfprintf_r+0xb38>
   1086c:	ldr	r3, [sp, #44]	; 0x2c
   1086e:	bic.w	r5, r3, #32
   10872:	movs	r3, #45	; 0x2d
   10874:	str	r3, [sp, #36]	; 0x24
   10876:	vneg.f64	d10, d8
   1087a:	b.n	10822 <_svfprintf_r+0x1852>
   1087c:	ldr	r2, [sp, #108]	; 0x6c
   1087e:	str	r2, [sp, #48]	; 0x30
   10880:	cmp	r2, #0
   10882:	and.w	r3, r6, #1
   10886:	ble.w	10aa4 <_svfprintf_r+0x1ad4>
   1088a:	ldr	r1, [sp, #12]
   1088c:	orrs	r3, r1
   1088e:	bne.w	10a30 <_svfprintf_r+0x1a60>
   10892:	ldr	r3, [sp, #48]	; 0x30
   10894:	str	r3, [sp, #20]
   10896:	movs	r3, #102	; 0x66
   10898:	str	r3, [sp, #44]	; 0x2c
   1089a:	lsls	r2, r6, #21
   1089c:	bmi.w	109e6 <_svfprintf_r+0x1a16>
   108a0:	ldr	r3, [sp, #20]
   108a2:	bic.w	r3, r3, r3, asr #31
   108a6:	str	r3, [sp, #8]
   108a8:	b.n	10784 <_svfprintf_r+0x17b4>
   108aa:	vmov	r1, s22
   108ae:	add	r2, sp, #144	; 0x90
   108b0:	mov	r0, fp
   108b2:	bl	11d38 <__ssprint_r>
   108b6:	cmp	r0, #0
   108b8:	bne.w	f89a <_svfprintf_r+0x8ca>
   108bc:	ldr	r4, [sp, #108]	; 0x6c
   108be:	ldr	r3, [sp, #56]	; 0x38
   108c0:	ldr	r2, [sp, #152]	; 0x98
   108c2:	subs	r4, r3, r4
   108c4:	add.w	sl, sp, #156	; 0x9c
   108c8:	b.w	fb38 <_svfprintf_r+0xb68>
   108cc:	movs	r3, #88	; 0x58
   108ce:	b.n	107ec <_svfprintf_r+0x181c>
   108d0:	movs	r2, #0
   108d2:	str	r2, [sp, #12]
   108d4:	b.w	f08c <_svfprintf_r+0xbc>
   108d8:	ldr	r3, [sp, #56]	; 0x38
   108da:	ldr	r2, [sp, #64]	; 0x40
   108dc:	adds	r2, r3, r2
   108de:	ldr	r3, [sp, #48]	; 0x30
   108e0:	str	r2, [sp, #20]
   108e2:	cmp	r3, #0
   108e4:	ble.w	10a3e <_svfprintf_r+0x1a6e>
   108e8:	movs	r3, #103	; 0x67
   108ea:	str	r3, [sp, #44]	; 0x2c
   108ec:	b.n	1089a <_svfprintf_r+0x18ca>
   108ee:	ldr	r2, [sp, #44]	; 0x2c
   108f0:	adds	r2, #15
   108f2:	uxtb	r2, r2
   108f4:	movs	r1, #1
   108f6:	b.n	1052a <_svfprintf_r+0x155a>
   108f8:	adds	r0, r4, r2
   108fa:	b.n	104f4 <_svfprintf_r+0x1524>
   108fc:	cmp	r1, #0
   108fe:	bne.w	10a52 <_svfprintf_r+0x1a82>
   10902:	movs	r2, #48	; 0x30
   10904:	strb.w	r2, [sp, #122]	; 0x7a
   10908:	add.w	r2, sp, #123	; 0x7b
   1090c:	adds	r3, #48	; 0x30
   1090e:	strb.w	r3, [r2], #1
   10912:	add	r3, sp, #120	; 0x78
   10914:	subs	r3, r2, r3
   10916:	str	r3, [sp, #80]	; 0x50
   10918:	b.n	105ae <_svfprintf_r+0x15de>
   1091a:	adds	r3, #1
   1091c:	ldr	r1, [pc, #72]	; (10968 <_svfprintf_r+0x1998>)
   1091e:	str.w	r5, [sl, #4]
   10922:	add	r2, r5
   10924:	cmp	r3, #7
   10926:	strd	r3, r2, [sp, #148]	; 0x94
   1092a:	str.w	r1, [sl]
   1092e:	ble.w	10198 <_svfprintf_r+0x11c8>
   10932:	vmov	r1, s22
   10936:	add	r2, sp, #144	; 0x90
   10938:	mov	r0, fp
   1093a:	bl	11d38 <__ssprint_r>
   1093e:	cmp	r0, #0
   10940:	bne.w	f89a <_svfprintf_r+0x8ca>
   10944:	ldrd	r3, r2, [sp, #148]	; 0x94
   10948:	add.w	sl, sp, #156	; 0x9c
   1094c:	b.n	1019c <_svfprintf_r+0x11cc>
   1094e:	adds	r1, r3, #1
   10950:	mov	r0, fp
   10952:	bl	d250 <_malloc_r>
   10956:	mov	r4, r0
   10958:	cbz	r0, 109b0 <_svfprintf_r+0x19e0>
   1095a:	str	r0, [sp, #28]
   1095c:	b.n	10808 <_svfprintf_r+0x1838>
   1095e:	nop
   10960:	.word	0x20000e7c
   10964:	.word	0x20000e68
   10968:	.word	0x20001308
   1096c:	.word	0x66666667
   10970:	str.w	ip, [sp, #136]	; 0x88
   10974:	ldrb.w	r1, [r2, #-1]
   10978:	ldrb.w	ip, [r0, #15]
   1097c:	cmp	r1, ip
   1097e:	mov	r3, r2
   10980:	bne.n	10998 <_svfprintf_r+0x19c8>
   10982:	mov.w	lr, #48	; 0x30
   10986:	strb.w	lr, [r3, #-1]
   1098a:	ldr	r3, [sp, #136]	; 0x88
   1098c:	subs	r1, r3, #1
   1098e:	str	r1, [sp, #136]	; 0x88
   10990:	ldrb.w	r1, [r3, #-1]
   10994:	cmp	ip, r1
   10996:	beq.n	10986 <_svfprintf_r+0x19b6>
   10998:	cmp	r1, #57	; 0x39
   1099a:	itet	ne
   1099c:	addne	r1, #1
   1099e:	ldrbeq	r1, [r0, #10]
   109a0:	uxtbne	r1, r1
   109a2:	strb.w	r1, [r3, #-1]
   109a6:	b.n	10706 <_svfprintf_r+0x1736>
   109a8:	movs	r3, #0
   109aa:	mov	r8, r2
   109ac:	str	r3, [sp, #28]
   109ae:	b.n	10872 <_svfprintf_r+0x18a2>
   109b0:	vmov	r2, s22
   109b4:	ldrsh.w	r3, [r2, #12]
   109b8:	orr.w	r3, r3, #64	; 0x40
   109bc:	strh	r3, [r2, #12]
   109be:	b.w	f1ee <_svfprintf_r+0x21e>
   109c2:	lsls	r5, r6, #31
   109c4:	bpl.w	105c4 <_svfprintf_r+0x15f4>
   109c8:	b.n	105bc <_svfprintf_r+0x15ec>
   109ca:	str	r3, [sp, #20]
   109cc:	b.n	1076c <_svfprintf_r+0x179c>
   109ce:	vcmp.f64	d10, #0.0
   109d2:	vmrs	APSR_nzcv, fpscr
   109d6:	beq.w	104f0 <_svfprintf_r+0x1520>
   109da:	rsb	r2, r2, #1
   109de:	str	r2, [sp, #108]	; 0x6c
   109e0:	b.n	104f2 <_svfprintf_r+0x1522>
   109e2:	movs	r3, #103	; 0x67
   109e4:	str	r3, [sp, #44]	; 0x2c
   109e6:	ldr	r1, [sp, #76]	; 0x4c
   109e8:	ldrb	r3, [r1, #0]
   109ea:	cmp	r3, #255	; 0xff
   109ec:	beq.n	10ae2 <_svfprintf_r+0x1b12>
   109ee:	movs	r5, #0
   109f0:	ldr	r2, [sp, #48]	; 0x30
   109f2:	mov	r0, r5
   109f4:	b.n	109fe <_svfprintf_r+0x1a2e>
   109f6:	adds	r0, #1
   109f8:	adds	r1, #1
   109fa:	cmp	r3, #255	; 0xff
   109fc:	beq.n	10a10 <_svfprintf_r+0x1a40>
   109fe:	cmp	r3, r2
   10a00:	bge.n	10a10 <_svfprintf_r+0x1a40>
   10a02:	subs	r2, r2, r3
   10a04:	ldrb	r3, [r1, #1]
   10a06:	cmp	r3, #0
   10a08:	bne.n	109f6 <_svfprintf_r+0x1a26>
   10a0a:	ldrb	r3, [r1, #0]
   10a0c:	adds	r5, #1
   10a0e:	b.n	109fa <_svfprintf_r+0x1a2a>
   10a10:	str	r2, [sp, #48]	; 0x30
   10a12:	str	r1, [sp, #76]	; 0x4c
   10a14:	str	r0, [sp, #52]	; 0x34
   10a16:	str	r5, [sp, #60]	; 0x3c
   10a18:	ldr	r2, [sp, #60]	; 0x3c
   10a1a:	ldr	r3, [sp, #52]	; 0x34
   10a1c:	ldr	r1, [sp, #88]	; 0x58
   10a1e:	add	r3, r2
   10a20:	ldr	r2, [sp, #20]
   10a22:	mla	r3, r1, r3, r2
   10a26:	str	r3, [sp, #20]
   10a28:	bic.w	r3, r3, r3, asr #31
   10a2c:	str	r3, [sp, #8]
   10a2e:	b.n	105dc <_svfprintf_r+0x160c>
   10a30:	ldr	r3, [sp, #64]	; 0x40
   10a32:	adds	r3, r2, r3
   10a34:	add	r1, r3
   10a36:	movs	r3, #102	; 0x66
   10a38:	str	r1, [sp, #20]
   10a3a:	str	r3, [sp, #44]	; 0x2c
   10a3c:	b.n	1089a <_svfprintf_r+0x18ca>
   10a3e:	rsb	r3, r3, #1
   10a42:	add	r2, r3
   10a44:	bic.w	r3, r2, r2, asr #31
   10a48:	str	r3, [sp, #8]
   10a4a:	movs	r3, #103	; 0x67
   10a4c:	str	r2, [sp, #20]
   10a4e:	str	r3, [sp, #44]	; 0x2c
   10a50:	b.n	10784 <_svfprintf_r+0x17b4>
   10a52:	add.w	r2, sp, #122	; 0x7a
   10a56:	b.n	1090c <_svfprintf_r+0x193c>
   10a58:	ldr	r3, [sp, #12]
   10a5a:	ldr.w	r9, [sp, #8]
   10a5e:	ldr.w	r8, [sp, #28]
   10a62:	str	r3, [sp, #20]
   10a64:	b.n	103d0 <_svfprintf_r+0x1400>
   10a66:	vmov	r3, s17
   10a6a:	cmp	r3, #0
   10a6c:	ite	lt
   10a6e:	movlt	r1, #45	; 0x2d
   10a70:	ldrbge.w	r1, [sp, #103]	; 0x67
   10a74:	ldr	r4, [pc, #148]	; (10b0c <_svfprintf_r+0x1b3c>)
   10a76:	ldr	r3, [pc, #152]	; (10b10 <_svfprintf_r+0x1b40>)
   10a78:	it	lt
   10a7a:	strblt.w	r1, [sp, #103]	; 0x67
   10a7e:	bic.w	r8, r8, #128	; 0x80
   10a82:	b.w	f378 <_svfprintf_r+0x3a8>
   10a86:	ldr	r3, [sp, #12]
   10a88:	str	r3, [sp, #8]
   10a8a:	str	r3, [sp, #20]
   10a8c:	movs	r3, #115	; 0x73
   10a8e:	ldrb.w	r1, [sp, #103]	; 0x67
   10a92:	str	r0, [sp, #12]
   10a94:	str	r0, [sp, #60]	; 0x3c
   10a96:	str	r0, [sp, #52]	; 0x34
   10a98:	str	r3, [sp, #44]	; 0x2c
   10a9a:	b.w	f392 <_svfprintf_r+0x3c2>
   10a9e:	movs	r3, #2
   10aa0:	str	r3, [sp, #80]	; 0x50
   10aa2:	b.n	105ae <_svfprintf_r+0x15de>
   10aa4:	ldr	r2, [sp, #12]
   10aa6:	orrs	r3, r2
   10aa8:	bne.n	10ab6 <_svfprintf_r+0x1ae6>
   10aaa:	movs	r3, #1
   10aac:	movs	r2, #102	; 0x66
   10aae:	str	r3, [sp, #8]
   10ab0:	str	r2, [sp, #44]	; 0x2c
   10ab2:	str	r3, [sp, #20]
   10ab4:	b.n	10784 <_svfprintf_r+0x17b4>
   10ab6:	ldr	r3, [sp, #64]	; 0x40
   10ab8:	adds	r3, #1
   10aba:	add	r2, r3
   10abc:	bic.w	r3, r2, r2, asr #31
   10ac0:	str	r3, [sp, #8]
   10ac2:	movs	r3, #102	; 0x66
   10ac4:	str	r2, [sp, #20]
   10ac6:	str	r3, [sp, #44]	; 0x2c
   10ac8:	b.n	10784 <_svfprintf_r+0x17b4>
   10aca:	ldr	r2, [sp, #32]
   10acc:	ldrb.w	r3, [r9, #1]
   10ad0:	mov	r9, r1
   10ad2:	ldr.w	r1, [r2], #4
   10ad6:	str	r2, [sp, #32]
   10ad8:	orr.w	r1, r1, r1, asr #31
   10adc:	str	r1, [sp, #12]
   10ade:	b.w	f088 <_svfprintf_r+0xb8>
   10ae2:	movs	r3, #0
   10ae4:	str	r3, [sp, #60]	; 0x3c
   10ae6:	str	r3, [sp, #52]	; 0x34
   10ae8:	b.n	10a18 <_svfprintf_r+0x1a48>
   10aea:	movs	r3, #12
   10aec:	str.w	r3, [fp]
   10af0:	mov.w	r3, #4294967295
   10af4:	str	r3, [sp, #16]
   10af6:	b.w	f1fc <_svfprintf_r+0x22c>
   10afa:	vmov	r2, s22
   10afe:	ldrh	r3, [r2, #12]
   10b00:	orr.w	r3, r3, #64	; 0x40
   10b04:	strh	r3, [r2, #12]
   10b06:	b.w	f89a <_svfprintf_r+0x8ca>
   10b0a:	nop
   10b0c:	.word	0x20000e60
   10b10:	.word	0x20000e64

00010b14 <_fclose_r>:
   10b14:	push	{r4, r5, r6, lr}
   10b16:	cmp	r1, #0
   10b18:	beq.n	10bb2 <_fclose_r+0x9e>
   10b1a:	mov	r6, r0
   10b1c:	mov	r4, r1
   10b1e:	cbz	r0, 10b26 <_fclose_r+0x12>
   10b20:	ldr	r3, [r0, #52]	; 0x34
   10b22:	cmp	r3, #0
   10b24:	beq.n	10bb8 <_fclose_r+0xa4>
   10b26:	ldr	r3, [r4, #100]	; 0x64
   10b28:	lsls	r0, r3, #31
   10b2a:	bpl.n	10b96 <_fclose_r+0x82>
   10b2c:	ldrsh.w	r3, [r4, #12]
   10b30:	cmp	r3, #0
   10b32:	beq.n	10bb2 <_fclose_r+0x9e>
   10b34:	mov	r1, r4
   10b36:	mov	r0, r6
   10b38:	bl	10bdc <__sflush_r>
   10b3c:	ldr	r3, [r4, #44]	; 0x2c
   10b3e:	mov	r5, r0
   10b40:	cbz	r3, 10b50 <_fclose_r+0x3c>
   10b42:	ldr	r1, [r4, #28]
   10b44:	mov	r0, r6
   10b46:	blx	r3
   10b48:	cmp	r0, #0
   10b4a:	it	lt
   10b4c:	movlt.w	r5, #4294967295
   10b50:	ldrh	r3, [r4, #12]
   10b52:	lsls	r2, r3, #24
   10b54:	bmi.n	10bd0 <_fclose_r+0xbc>
   10b56:	ldr	r1, [r4, #48]	; 0x30
   10b58:	cbz	r1, 10b6c <_fclose_r+0x58>
   10b5a:	add.w	r3, r4, #64	; 0x40
   10b5e:	cmp	r1, r3
   10b60:	beq.n	10b68 <_fclose_r+0x54>
   10b62:	mov	r0, r6
   10b64:	bl	e604 <_free_r>
   10b68:	movs	r3, #0
   10b6a:	str	r3, [r4, #48]	; 0x30
   10b6c:	ldr	r1, [r4, #68]	; 0x44
   10b6e:	cbz	r1, 10b7a <_fclose_r+0x66>
   10b70:	mov	r0, r6
   10b72:	bl	e604 <_free_r>
   10b76:	movs	r3, #0
   10b78:	str	r3, [r4, #68]	; 0x44
   10b7a:	bl	dd14 <__sfp_lock_acquire>
   10b7e:	ldr	r3, [r4, #100]	; 0x64
   10b80:	movs	r2, #0
   10b82:	lsls	r3, r3, #31
   10b84:	strh	r2, [r4, #12]
   10b86:	bpl.n	10bc8 <_fclose_r+0xb4>
   10b88:	ldr	r0, [r4, #88]	; 0x58
   10b8a:	bl	e328 <__retarget_lock_close_recursive>
   10b8e:	bl	dd20 <__sfp_lock_release>
   10b92:	mov	r0, r5
   10b94:	pop	{r4, r5, r6, pc}
   10b96:	ldrh	r3, [r4, #12]
   10b98:	lsls	r1, r3, #22
   10b9a:	bmi.n	10b34 <_fclose_r+0x20>
   10b9c:	ldr	r0, [r4, #88]	; 0x58
   10b9e:	bl	e32c <__retarget_lock_acquire_recursive>
   10ba2:	ldrsh.w	r3, [r4, #12]
   10ba6:	cmp	r3, #0
   10ba8:	bne.n	10b34 <_fclose_r+0x20>
   10baa:	ldr	r5, [r4, #100]	; 0x64
   10bac:	ands.w	r5, r5, #1
   10bb0:	beq.n	10bbe <_fclose_r+0xaa>
   10bb2:	movs	r5, #0
   10bb4:	mov	r0, r5
   10bb6:	pop	{r4, r5, r6, pc}
   10bb8:	bl	dcd8 <__sinit>
   10bbc:	b.n	10b26 <_fclose_r+0x12>
   10bbe:	ldr	r0, [r4, #88]	; 0x58
   10bc0:	bl	e330 <__retarget_lock_release_recursive>
   10bc4:	mov	r0, r5
   10bc6:	pop	{r4, r5, r6, pc}
   10bc8:	ldr	r0, [r4, #88]	; 0x58
   10bca:	bl	e330 <__retarget_lock_release_recursive>
   10bce:	b.n	10b88 <_fclose_r+0x74>
   10bd0:	ldr	r1, [r4, #16]
   10bd2:	mov	r0, r6
   10bd4:	bl	e604 <_free_r>
   10bd8:	b.n	10b56 <_fclose_r+0x42>
   10bda:	nop

00010bdc <__sflush_r>:
   10bdc:	ldrsh.w	r2, [r1, #12]
   10be0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10be4:	mov	r4, r1
   10be6:	lsls	r1, r2, #28
   10be8:	mov	r8, r0
   10bea:	bmi.n	10c7c <__sflush_r+0xa0>
   10bec:	ldr	r3, [r4, #4]
   10bee:	orr.w	r2, r2, #2048	; 0x800
   10bf2:	cmp	r3, #0
   10bf4:	strh	r2, [r4, #12]
   10bf6:	ble.n	10cb6 <__sflush_r+0xda>
   10bf8:	ldr	r5, [r4, #40]	; 0x28
   10bfa:	cmp	r5, #0
   10bfc:	beq.n	10cb0 <__sflush_r+0xd4>
   10bfe:	movs	r3, #0
   10c00:	ldr.w	r6, [r8]
   10c04:	str.w	r3, [r8]
   10c08:	uxth	r3, r2
   10c0a:	ands.w	r2, r2, #4096	; 0x1000
   10c0e:	bne.n	10cbe <__sflush_r+0xe2>
   10c10:	movs	r3, #1
   10c12:	ldr	r1, [r4, #28]
   10c14:	mov	r0, r8
   10c16:	blx	r5
   10c18:	adds	r3, r0, #1
   10c1a:	beq.n	10cec <__sflush_r+0x110>
   10c1c:	ldrh	r3, [r4, #12]
   10c1e:	ldr	r5, [r4, #40]	; 0x28
   10c20:	lsls	r7, r3, #29
   10c22:	bpl.n	10c30 <__sflush_r+0x54>
   10c24:	ldr	r3, [r4, #4]
   10c26:	subs	r0, r0, r3
   10c28:	ldr	r3, [r4, #48]	; 0x30
   10c2a:	cbz	r3, 10c30 <__sflush_r+0x54>
   10c2c:	ldr	r3, [r4, #60]	; 0x3c
   10c2e:	subs	r0, r0, r3
   10c30:	ldr	r1, [r4, #28]
   10c32:	mov	r2, r0
   10c34:	movs	r3, #0
   10c36:	mov	r0, r8
   10c38:	blx	r5
   10c3a:	adds	r1, r0, #1
   10c3c:	bne.n	10cc2 <__sflush_r+0xe6>
   10c3e:	ldr.w	r3, [r8]
   10c42:	cmp	r3, #0
   10c44:	beq.n	10cc2 <__sflush_r+0xe6>
   10c46:	cmp	r3, #29
   10c48:	beq.n	10c4e <__sflush_r+0x72>
   10c4a:	cmp	r3, #22
   10c4c:	bne.n	10cfc <__sflush_r+0x120>
   10c4e:	ldrh	r3, [r4, #12]
   10c50:	ldr	r2, [r4, #16]
   10c52:	str	r2, [r4, #0]
   10c54:	bic.w	r3, r3, #2048	; 0x800
   10c58:	movs	r1, #0
   10c5a:	str	r1, [r4, #4]
   10c5c:	strh	r3, [r4, #12]
   10c5e:	ldr	r1, [r4, #48]	; 0x30
   10c60:	str.w	r6, [r8]
   10c64:	cbz	r1, 10cb0 <__sflush_r+0xd4>
   10c66:	add.w	r3, r4, #64	; 0x40
   10c6a:	cmp	r1, r3
   10c6c:	beq.n	10c74 <__sflush_r+0x98>
   10c6e:	mov	r0, r8
   10c70:	bl	e604 <_free_r>
   10c74:	movs	r0, #0
   10c76:	str	r0, [r4, #48]	; 0x30
   10c78:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10c7c:	ldr	r6, [r4, #16]
   10c7e:	cbz	r6, 10cb0 <__sflush_r+0xd4>
   10c80:	uxth	r3, r2
   10c82:	ldr	r5, [r4, #0]
   10c84:	str	r6, [r4, #0]
   10c86:	lsls	r2, r3, #30
   10c88:	ite	eq
   10c8a:	ldreq	r3, [r4, #20]
   10c8c:	movne	r3, #0
   10c8e:	subs	r5, r5, r6
   10c90:	str	r3, [r4, #8]
   10c92:	b.n	10cac <__sflush_r+0xd0>
   10c94:	mov	r3, r5
   10c96:	mov	r2, r6
   10c98:	ldr	r1, [r4, #28]
   10c9a:	ldr	r7, [r4, #36]	; 0x24
   10c9c:	mov	r0, r8
   10c9e:	blx	r7
   10ca0:	subs.w	ip, r0, #0
   10ca4:	sub.w	r5, r5, ip
   10ca8:	add	r6, ip
   10caa:	ble.n	10cdc <__sflush_r+0x100>
   10cac:	cmp	r5, #0
   10cae:	bgt.n	10c94 <__sflush_r+0xb8>
   10cb0:	movs	r0, #0
   10cb2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10cb6:	ldr	r3, [r4, #60]	; 0x3c
   10cb8:	cmp	r3, #0
   10cba:	bgt.n	10bf8 <__sflush_r+0x1c>
   10cbc:	b.n	10cb0 <__sflush_r+0xd4>
   10cbe:	ldr	r0, [r4, #80]	; 0x50
   10cc0:	b.n	10c20 <__sflush_r+0x44>
   10cc2:	ldrsh.w	r3, [r4, #12]
   10cc6:	ldr	r2, [r4, #16]
   10cc8:	str	r2, [r4, #0]
   10cca:	bic.w	r3, r3, #2048	; 0x800
   10cce:	strh	r3, [r4, #12]
   10cd0:	movs	r2, #0
   10cd2:	lsls	r3, r3, #19
   10cd4:	str	r2, [r4, #4]
   10cd6:	bpl.n	10c5e <__sflush_r+0x82>
   10cd8:	str	r0, [r4, #80]	; 0x50
   10cda:	b.n	10c5e <__sflush_r+0x82>
   10cdc:	ldrh	r3, [r4, #12]
   10cde:	orr.w	r3, r3, #64	; 0x40
   10ce2:	mov.w	r0, #4294967295
   10ce6:	strh	r3, [r4, #12]
   10ce8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10cec:	ldr.w	r3, [r8]
   10cf0:	cmp	r3, #0
   10cf2:	beq.n	10c1c <__sflush_r+0x40>
   10cf4:	cmp	r3, #29
   10cf6:	beq.n	10d06 <__sflush_r+0x12a>
   10cf8:	cmp	r3, #22
   10cfa:	beq.n	10d06 <__sflush_r+0x12a>
   10cfc:	ldrh	r3, [r4, #12]
   10cfe:	orr.w	r3, r3, #64	; 0x40
   10d02:	strh	r3, [r4, #12]
   10d04:	b.n	10cb2 <__sflush_r+0xd6>
   10d06:	str.w	r6, [r8]
   10d0a:	b.n	10cb0 <__sflush_r+0xd4>

00010d0c <_fflush_r>:
   10d0c:	push	{r3, r4, r5, lr}
   10d0e:	mov	r4, r1
   10d10:	mov	r5, r0
   10d12:	cbz	r0, 10d18 <_fflush_r+0xc>
   10d14:	ldr	r3, [r0, #52]	; 0x34
   10d16:	cbz	r3, 10d5a <_fflush_r+0x4e>
   10d18:	ldrsh.w	r0, [r4, #12]
   10d1c:	cbz	r0, 10d42 <_fflush_r+0x36>
   10d1e:	ldr	r3, [r4, #100]	; 0x64
   10d20:	lsls	r3, r3, #31
   10d22:	bmi.n	10d28 <_fflush_r+0x1c>
   10d24:	lsls	r1, r0, #22
   10d26:	bpl.n	10d48 <_fflush_r+0x3c>
   10d28:	mov	r0, r5
   10d2a:	mov	r1, r4
   10d2c:	bl	10bdc <__sflush_r>
   10d30:	ldr	r3, [r4, #100]	; 0x64
   10d32:	lsls	r2, r3, #31
   10d34:	mov	r5, r0
   10d36:	bmi.n	10d3e <_fflush_r+0x32>
   10d38:	ldrh	r3, [r4, #12]
   10d3a:	lsls	r3, r3, #22
   10d3c:	bpl.n	10d50 <_fflush_r+0x44>
   10d3e:	mov	r0, r5
   10d40:	pop	{r3, r4, r5, pc}
   10d42:	mov	r5, r0
   10d44:	mov	r0, r5
   10d46:	pop	{r3, r4, r5, pc}
   10d48:	ldr	r0, [r4, #88]	; 0x58
   10d4a:	bl	e32c <__retarget_lock_acquire_recursive>
   10d4e:	b.n	10d28 <_fflush_r+0x1c>
   10d50:	ldr	r0, [r4, #88]	; 0x58
   10d52:	bl	e330 <__retarget_lock_release_recursive>
   10d56:	mov	r0, r5
   10d58:	pop	{r3, r4, r5, pc}
   10d5a:	bl	dcd8 <__sinit>
   10d5e:	b.n	10d18 <_fflush_r+0xc>

00010d60 <_localeconv_r>:
   10d60:	ldr	r0, [pc, #0]	; (10d64 <_localeconv_r+0x4>)
   10d62:	bx	lr
   10d64:	.word	0x20001578

00010d68 <frexp>:
   10d68:	push	{r4, r5}
   10d6a:	sub	sp, #8
   10d6c:	vstr	d0, [sp]
   10d70:	ldr	r2, [sp, #4]
   10d72:	ldr	r4, [pc, #100]	; (10dd8 <frexp+0x70>)
   10d74:	bic.w	r3, r2, #2147483648	; 0x80000000
   10d78:	movs	r1, #0
   10d7a:	cmp	r3, r4
   10d7c:	str	r1, [r0, #0]
   10d7e:	bgt.n	10dc4 <frexp+0x5c>
   10d80:	ldr	r4, [sp, #0]
   10d82:	orrs	r4, r3
   10d84:	beq.n	10dc4 <frexp+0x5c>
   10d86:	ldr	r4, [pc, #84]	; (10ddc <frexp+0x74>)
   10d88:	ands	r4, r2
   10d8a:	cbnz	r4, 10da2 <frexp+0x3a>
   10d8c:	vldr	d7, [pc, #64]	; 10dd0 <frexp+0x68>
   10d90:	vmul.f64	d7, d0, d7
   10d94:	vstr	d7, [sp]
   10d98:	ldr	r2, [sp, #4]
   10d9a:	mvn.w	r1, #53	; 0x35
   10d9e:	bic.w	r3, r2, #2147483648	; 0x80000000
   10da2:	bic.w	r2, r2, #2139095040	; 0x7f800000
   10da6:	ldrd	r4, r5, [sp]
   10daa:	bic.w	r2, r2, #7340032	; 0x700000
   10dae:	orr.w	r5, r2, #1069547520	; 0x3fc00000
   10db2:	asrs	r3, r3, #20
   10db4:	orr.w	r5, r5, #2097152	; 0x200000
   10db8:	subw	r3, r3, #1022	; 0x3fe
   10dbc:	strd	r4, r5, [sp]
   10dc0:	add	r3, r1
   10dc2:	str	r3, [r0, #0]
   10dc4:	vldr	d0, [sp]
   10dc8:	add	sp, #8
   10dca:	pop	{r4, r5}
   10dcc:	bx	lr
   10dce:	nop
   10dd0:	.word	0x00000000
   10dd4:	.word	0x43500000
   10dd8:	.word	0x7fefffff
   10ddc:	.word	0x7ff00000

00010de0 <__assert_func>:
   10de0:	push	{lr}
   10de2:	ldr	r4, [pc, #44]	; (10e10 <__assert_func+0x30>)
   10de4:	ldr	r5, [r4, #0]
   10de6:	mov	r4, r2
   10de8:	ldr	r6, [r5, #12]
   10dea:	mov	r2, r3
   10dec:	sub	sp, #20
   10dee:	mov	r3, r0
   10df0:	mov	r5, r1
   10df2:	cbz	r4, 10e08 <__assert_func+0x28>
   10df4:	ldr	r1, [pc, #28]	; (10e14 <__assert_func+0x34>)
   10df6:	str	r5, [sp, #0]
   10df8:	strd	r1, r4, [sp, #4]
   10dfc:	mov	r0, r6
   10dfe:	ldr	r1, [pc, #24]	; (10e18 <__assert_func+0x38>)
   10e00:	bl	11d10 <fiprintf>
   10e04:	bl	ba9c <abort>
   10e08:	ldr	r1, [pc, #16]	; (10e1c <__assert_func+0x3c>)
   10e0a:	mov	r4, r1
   10e0c:	b.n	10df6 <__assert_func+0x16>
   10e0e:	nop
   10e10:	.word	0x20001a10
   10e14:	.word	0x20000c38
   10e18:	.word	0x20000c48
   10e1c:	.word	0x20000790

00010e20 <_calloc_r>:
   10e20:	push	{r3, r4, r5, lr}
   10e22:	umull	r1, r4, r1, r2
   10e26:	cbnz	r4, 10e8c <_calloc_r+0x6c>
   10e28:	bl	d250 <_malloc_r>
   10e2c:	mov	r5, r0
   10e2e:	cbz	r0, 10e6a <_calloc_r+0x4a>
   10e30:	ldr.w	r2, [r0, #-4]
   10e34:	bic.w	r2, r2, #3
   10e38:	subs	r2, #4
   10e3a:	cmp	r2, #36	; 0x24
   10e3c:	bhi.n	10e6e <_calloc_r+0x4e>
   10e3e:	cmp	r2, #19
   10e40:	bls.n	10e78 <_calloc_r+0x58>
   10e42:	cmp	r2, #27
   10e44:	strd	r4, r4, [r0]
   10e48:	bls.n	10e86 <_calloc_r+0x66>
   10e4a:	cmp	r2, #36	; 0x24
   10e4c:	ite	ne
   10e4e:	addne.w	r2, r0, #16
   10e52:	addeq.w	r2, r0, #24
   10e56:	mov.w	r3, #0
   10e5a:	strd	r4, r4, [r0, #8]
   10e5e:	itt	eq
   10e60:	streq	r4, [r0, #16]
   10e62:	streq	r4, [r0, #20]
   10e64:	strd	r3, r3, [r2]
   10e68:	str	r3, [r2, #8]
   10e6a:	mov	r0, r5
   10e6c:	pop	{r3, r4, r5, pc}
   10e6e:	mov	r1, r4
   10e70:	bl	e064 <memset>
   10e74:	mov	r0, r5
   10e76:	pop	{r3, r4, r5, pc}
   10e78:	mov	r2, r0
   10e7a:	movs	r3, #0
   10e7c:	strd	r3, r3, [r2]
   10e80:	str	r3, [r2, #8]
   10e82:	mov	r0, r5
   10e84:	pop	{r3, r4, r5, pc}
   10e86:	add.w	r2, r0, #8
   10e8a:	b.n	10e7a <_calloc_r+0x5a>
   10e8c:	bl	e2d0 <__errno>
   10e90:	movs	r3, #12
   10e92:	movs	r5, #0
   10e94:	str	r3, [r0, #0]
   10e96:	b.n	10e6a <_calloc_r+0x4a>

00010e98 <quorem>:
   10e98:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10e9c:	ldr	r3, [r0, #16]
   10e9e:	ldr	r4, [r1, #16]
   10ea0:	cmp	r3, r4
   10ea2:	sub	sp, #12
   10ea4:	blt.w	10fb6 <quorem+0x11e>
   10ea8:	subs	r4, #1
   10eaa:	add.w	r5, r1, #20
   10eae:	lsls	r3, r4, #2
   10eb0:	add.w	r8, r0, #20
   10eb4:	str	r3, [sp, #0]
   10eb6:	ldr.w	r3, [r5, r4, lsl #2]
   10eba:	ldr.w	r2, [r8, r4, lsl #2]
   10ebe:	adds	r3, #1
   10ec0:	mov	r9, r0
   10ec2:	cmp	r2, r3
   10ec4:	add.w	r0, r8, r4, lsl #2
   10ec8:	add.w	r7, r5, r4, lsl #2
   10ecc:	str	r0, [sp, #4]
   10ece:	udiv	r6, r2, r3
   10ed2:	bcc.n	10f4c <quorem+0xb4>
   10ed4:	mov.w	ip, #0
   10ed8:	mov	lr, r5
   10eda:	mov	r0, r8
   10edc:	mov	sl, ip
   10ede:	mov	r3, ip
   10ee0:	ldr.w	fp, [lr], #4
   10ee4:	ldr	r2, [r0, #0]
   10ee6:	uxth.w	ip, fp
   10eea:	mla	r3, r6, ip, r3
   10eee:	mov.w	ip, r3, lsr #16
   10ef2:	mov.w	fp, fp, lsr #16
   10ef6:	mla	ip, r6, fp, ip
   10efa:	uxth	r3, r3
   10efc:	sub.w	r3, sl, r3
   10f00:	uxth.w	sl, ip
   10f04:	uxtah	r3, r3, r2
   10f08:	rsb	r2, sl, r2, lsr #16
   10f0c:	add.w	r2, r2, r3, asr #16
   10f10:	uxth	r3, r3
   10f12:	orr.w	r3, r3, r2, lsl #16
   10f16:	cmp	r7, lr
   10f18:	str.w	r3, [r0], #4
   10f1c:	mov.w	sl, r2, asr #16
   10f20:	mov.w	r3, ip, lsr #16
   10f24:	bcs.n	10ee0 <quorem+0x48>
   10f26:	ldr	r3, [sp, #0]
   10f28:	ldr.w	r3, [r8, r3]
   10f2c:	cbnz	r3, 10f4c <quorem+0xb4>
   10f2e:	ldr	r3, [sp, #4]
   10f30:	subs	r3, #4
   10f32:	cmp	r8, r3
   10f34:	bcc.n	10f40 <quorem+0xa8>
   10f36:	b.n	10f48 <quorem+0xb0>
   10f38:	cmp	r8, r3
   10f3a:	add.w	r4, r4, #4294967295
   10f3e:	bcs.n	10f48 <quorem+0xb0>
   10f40:	ldr.w	r2, [r3], #-4
   10f44:	cmp	r2, #0
   10f46:	beq.n	10f38 <quorem+0xa0>
   10f48:	str.w	r4, [r9, #16]
   10f4c:	mov	r0, r9
   10f4e:	bl	ed48 <__mcmp>
   10f52:	cmp	r0, #0
   10f54:	blt.n	10fae <quorem+0x116>
   10f56:	adds	r6, #1
   10f58:	mov	r1, r8
   10f5a:	movs	r3, #0
   10f5c:	ldr.w	r0, [r5], #4
   10f60:	ldr.w	ip, [r1]
   10f64:	uxth	r2, r0
   10f66:	subs	r2, r3, r2
   10f68:	lsrs	r3, r0, #16
   10f6a:	uxtah	r2, r2, ip
   10f6e:	rsb	r3, r3, ip, lsr #16
   10f72:	add.w	r3, r3, r2, asr #16
   10f76:	uxth	r2, r2
   10f78:	orr.w	r2, r2, r3, lsl #16
   10f7c:	cmp	r7, r5
   10f7e:	str.w	r2, [r1], #4
   10f82:	mov.w	r3, r3, asr #16
   10f86:	bcs.n	10f5c <quorem+0xc4>
   10f88:	ldr.w	r2, [r8, r4, lsl #2]
   10f8c:	add.w	r3, r8, r4, lsl #2
   10f90:	cbnz	r2, 10fae <quorem+0x116>
   10f92:	subs	r3, #4
   10f94:	cmp	r8, r3
   10f96:	bcc.n	10fa2 <quorem+0x10a>
   10f98:	b.n	10faa <quorem+0x112>
   10f9a:	cmp	r8, r3
   10f9c:	add.w	r4, r4, #4294967295
   10fa0:	bcs.n	10faa <quorem+0x112>
   10fa2:	ldr.w	r2, [r3], #-4
   10fa6:	cmp	r2, #0
   10fa8:	beq.n	10f9a <quorem+0x102>
   10faa:	str.w	r4, [r9, #16]
   10fae:	mov	r0, r6
   10fb0:	add	sp, #12
   10fb2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10fb6:	movs	r0, #0
   10fb8:	add	sp, #12
   10fba:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10fbe:	nop

00010fc0 <_dtoa_r>:
   10fc0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10fc4:	vpush	{d8}
   10fc8:	sub	sp, #60	; 0x3c
   10fca:	vstr	d0, [sp, #8]
   10fce:	str	r1, [sp, #4]
   10fd0:	ldr	r1, [r0, #56]	; 0x38
   10fd2:	ldr	r5, [sp, #104]	; 0x68
   10fd4:	str	r3, [sp, #20]
   10fd6:	vmov	r6, r7, d0
   10fda:	mov	r4, r0
   10fdc:	mov	fp, r2
   10fde:	cbz	r1, 10ff2 <_dtoa_r+0x32>
   10fe0:	ldr	r2, [r0, #60]	; 0x3c
   10fe2:	str	r2, [r1, #4]
   10fe4:	movs	r3, #1
   10fe6:	lsls	r3, r2
   10fe8:	str	r3, [r1, #8]
   10fea:	bl	e888 <_Bfree>
   10fee:	movs	r3, #0
   10ff0:	str	r3, [r4, #56]	; 0x38
   10ff2:	subs.w	r8, r7, #0
   10ff6:	ite	lt
   10ff8:	movlt	r3, #1
   10ffa:	movge	r3, #0
   10ffc:	str	r3, [r5, #0]
   10ffe:	ldr	r3, [pc, #760]	; (112f8 <_dtoa_r+0x338>)
   11000:	itt	lt
   11002:	biclt.w	r8, r8, #2147483648	; 0x80000000
   11006:	strlt.w	r8, [sp, #12]
   1100a:	bics.w	r3, r3, r8
   1100e:	beq.w	11150 <_dtoa_r+0x190>
   11012:	vldr	d8, [sp, #8]
   11016:	vcmp.f64	d8, #0.0
   1101a:	vmrs	APSR_nzcv, fpscr
   1101e:	bne.n	11044 <_dtoa_r+0x84>
   11020:	ldr	r2, [sp, #20]
   11022:	movs	r3, #1
   11024:	str	r3, [r2, #0]
   11026:	ldr	r3, [sp, #108]	; 0x6c
   11028:	cmp	r3, #0
   1102a:	beq.w	114ac <_dtoa_r+0x4ec>
   1102e:	ldr	r3, [pc, #716]	; (112fc <_dtoa_r+0x33c>)
   11030:	ldr	r2, [sp, #108]	; 0x6c
   11032:	str	r3, [r2, #0]
   11034:	subs	r3, #1
   11036:	str	r3, [sp, #0]
   11038:	ldr	r0, [sp, #0]
   1103a:	add	sp, #60	; 0x3c
   1103c:	vpop	{d8}
   11040:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11044:	add	r2, sp, #48	; 0x30
   11046:	add	r1, sp, #52	; 0x34
   11048:	mov	r0, r4
   1104a:	vmov.f64	d0, d8
   1104e:	bl	eee0 <__d2b>
   11052:	movs.w	r3, r8, lsr #20
   11056:	mov	r5, r0
   11058:	bne.w	11180 <_dtoa_r+0x1c0>
   1105c:	ldrd	r1, r3, [sp, #48]	; 0x30
   11060:	add	r3, r1
   11062:	addw	r2, r3, #1074	; 0x432
   11066:	cmp	r2, #32
   11068:	ble.w	11660 <_dtoa_r+0x6a0>
   1106c:	rsb	r2, r2, #64	; 0x40
   11070:	lsl.w	r8, r8, r2
   11074:	addw	r2, r3, #1042	; 0x412
   11078:	lsrs	r6, r2
   1107a:	orr.w	r2, r8, r6
   1107e:	vmov	s14, r2
   11082:	vcvt.f64.u32	d7, s14
   11086:	subs	r0, r3, #1
   11088:	vmov	r6, s15
   1108c:	vmov	r2, r3, d7
   11090:	mov.w	sl, #1
   11094:	sub.w	r3, r6, #32505856	; 0x1f00000
   11098:	vldr	d3, [pc, #580]	; 112e0 <_dtoa_r+0x320>
   1109c:	vldr	d7, [pc, #584]	; 112e8 <_dtoa_r+0x328>
   110a0:	vldr	d5, [pc, #588]	; 112f0 <_dtoa_r+0x330>
   110a4:	vmov	s13, r0
   110a8:	vmov	d2, r2, r3
   110ac:	vcvt.f64.s32	d4, s13
   110b0:	vmov.f64	d6, #120	; 0x3fc00000  1.5
   110b4:	vsub.f64	d6, d2, d6
   110b8:	vfma.f64	d7, d6, d3
   110bc:	vfma.f64	d7, d4, d5
   110c0:	vcvt.s32.f64	s13, d7
   110c4:	vcmpe.f64	d7, #0.0
   110c8:	vmrs	APSR_nzcv, fpscr
   110cc:	vmov	r7, s13
   110d0:	bpl.n	110e4 <_dtoa_r+0x124>
   110d2:	vcvt.f64.s32	d6, s13
   110d6:	vcmp.f64	d6, d7
   110da:	vmrs	APSR_nzcv, fpscr
   110de:	it	ne
   110e0:	addne.w	r7, r7, #4294967295
   110e4:	cmp	r7, #22
   110e6:	bhi.w	11374 <_dtoa_r+0x3b4>
   110ea:	ldr	r3, [pc, #532]	; (11300 <_dtoa_r+0x340>)
   110ec:	add.w	r3, r3, r7, lsl #3
   110f0:	vldr	d7, [r3]
   110f4:	vcmpe.f64	d8, d7
   110f8:	vmrs	APSR_nzcv, fpscr
   110fc:	bpl.n	111ae <_dtoa_r+0x1ee>
   110fe:	subs	r1, r1, r0
   11100:	movs	r3, #0
   11102:	subs.w	r8, r1, #1
   11106:	add.w	r7, r7, #4294967295
   1110a:	str	r3, [sp, #40]	; 0x28
   1110c:	bmi.w	11382 <_dtoa_r+0x3c2>
   11110:	movs	r3, #0
   11112:	str	r3, [sp, #24]
   11114:	cmp	r7, #0
   11116:	bge.n	111be <_dtoa_r+0x1fe>
   11118:	ldr	r3, [sp, #24]
   1111a:	str	r7, [sp, #16]
   1111c:	subs	r3, r3, r7
   1111e:	str	r3, [sp, #24]
   11120:	negs	r3, r7
   11122:	str	r3, [sp, #32]
   11124:	ldr	r3, [sp, #4]
   11126:	cmp	r3, #9
   11128:	mov.w	r7, #0
   1112c:	bhi.n	111cc <_dtoa_r+0x20c>
   1112e:	cmp	r3, #5
   11130:	ble.w	1166e <_dtoa_r+0x6ae>
   11134:	subs	r3, #4
   11136:	str	r3, [sp, #4]
   11138:	movs	r6, #0
   1113a:	ldr	r3, [sp, #4]
   1113c:	subs	r2, r3, #2
   1113e:	cmp	r2, #3
   11140:	bhi.w	1138e <_dtoa_r+0x3ce>
   11144:	tbh	[pc, r2, lsl #1]
   11148:	.word	0x03a703aa
   1114c:	.word	0x037e039d
   11150:	ldr	r2, [sp, #20]
   11152:	ubfx	r8, r8, #0, #20
   11156:	movw	r3, #9999	; 0x270f
   1115a:	orrs.w	r8, r8, r6
   1115e:	str	r3, [r2, #0]
   11160:	bne.n	111a0 <_dtoa_r+0x1e0>
   11162:	ldr	r3, [sp, #108]	; 0x6c
   11164:	cmp	r3, #0
   11166:	beq.w	11c8c <_dtoa_r+0xccc>
   1116a:	ldr	r3, [pc, #408]	; (11304 <_dtoa_r+0x344>)
   1116c:	str	r3, [sp, #0]
   1116e:	adds	r3, #8
   11170:	ldr	r2, [sp, #108]	; 0x6c
   11172:	ldr	r0, [sp, #0]
   11174:	str	r3, [r2, #0]
   11176:	add	sp, #60	; 0x3c
   11178:	vpop	{d8}
   1117c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11180:	vmov	r6, s17
   11184:	ubfx	r6, r6, #0, #20
   11188:	subw	r0, r3, #1023	; 0x3ff
   1118c:	vmov	r2, r3, d8
   11190:	orr.w	r3, r6, #1069547520	; 0x3fc00000
   11194:	ldr	r1, [sp, #48]	; 0x30
   11196:	mov.w	sl, #0
   1119a:	orr.w	r3, r3, #3145728	; 0x300000
   1119e:	b.n	11098 <_dtoa_r+0xd8>
   111a0:	ldr	r3, [sp, #108]	; 0x6c
   111a2:	cmp	r3, #0
   111a4:	bne.w	1181e <_dtoa_r+0x85e>
   111a8:	ldr	r3, [pc, #348]	; (11308 <_dtoa_r+0x348>)
   111aa:	str	r3, [sp, #0]
   111ac:	b.n	11038 <_dtoa_r+0x78>
   111ae:	subs	r1, r1, r0
   111b0:	movs	r3, #0
   111b2:	subs.w	r8, r1, #1
   111b6:	str	r3, [sp, #40]	; 0x28
   111b8:	bmi.w	11382 <_dtoa_r+0x3c2>
   111bc:	str	r3, [sp, #24]
   111be:	movs	r3, #0
   111c0:	str	r3, [sp, #32]
   111c2:	ldr	r3, [sp, #4]
   111c4:	str	r7, [sp, #16]
   111c6:	cmp	r3, #9
   111c8:	add	r8, r7
   111ca:	bls.n	1112e <_dtoa_r+0x16e>
   111cc:	movs	r3, #0
   111ce:	movs	r6, #1
   111d0:	str	r3, [sp, #4]
   111d2:	str	r6, [sp, #28]
   111d4:	mov.w	r9, #4294967295
   111d8:	mov	fp, r3
   111da:	movs	r1, #0
   111dc:	str	r1, [r4, #60]	; 0x3c
   111de:	str.w	r9, [sp, #44]	; 0x2c
   111e2:	mov	r0, r4
   111e4:	bl	e83c <_Balloc>
   111e8:	str	r0, [sp, #0]
   111ea:	cmp	r0, #0
   111ec:	beq.w	11c70 <_dtoa_r+0xcb0>
   111f0:	ldr	r3, [sp, #0]
   111f2:	str	r3, [r4, #56]	; 0x38
   111f4:	cmp.w	r9, #14
   111f8:	bhi.w	113b4 <_dtoa_r+0x3f4>
   111fc:	cmp	r6, #0
   111fe:	beq.w	113b4 <_dtoa_r+0x3f4>
   11202:	ldr	r3, [sp, #16]
   11204:	cmp	r3, #0
   11206:	ble.w	119c6 <_dtoa_r+0xa06>
   1120a:	ldr	r2, [pc, #244]	; (11300 <_dtoa_r+0x340>)
   1120c:	and.w	r1, r3, #15
   11210:	add.w	r2, r2, r1, lsl #3
   11214:	vldr	d7, [r2]
   11218:	asrs	r2, r3, #4
   1121a:	lsls	r3, r3, #23
   1121c:	bpl.w	11924 <_dtoa_r+0x964>
   11220:	ldr	r1, [pc, #232]	; (1130c <_dtoa_r+0x34c>)
   11222:	vldr	d6, [r1, #32]
   11226:	and.w	r2, r2, #15
   1122a:	movs	r0, #3
   1122c:	vdiv.f64	d5, d8, d6
   11230:	cbz	r2, 1124a <_dtoa_r+0x28a>
   11232:	ldr	r1, [pc, #216]	; (1130c <_dtoa_r+0x34c>)
   11234:	lsls	r6, r2, #31
   11236:	bpl.n	11242 <_dtoa_r+0x282>
   11238:	vldr	d6, [r1]
   1123c:	adds	r0, #1
   1123e:	vmul.f64	d7, d7, d6
   11242:	asrs	r2, r2, #1
   11244:	add.w	r1, r1, #8
   11248:	bne.n	11234 <_dtoa_r+0x274>
   1124a:	vdiv.f64	d6, d5, d7
   1124e:	ldr	r3, [sp, #40]	; 0x28
   11250:	cbz	r3, 11262 <_dtoa_r+0x2a2>
   11252:	vmov.f64	d7, #112	; 0x3f800000  1.0
   11256:	vcmpe.f64	d6, d7
   1125a:	vmrs	APSR_nzcv, fpscr
   1125e:	bmi.w	11bbe <_dtoa_r+0xbfe>
   11262:	vmov	s15, r0
   11266:	vcvt.f64.s32	d5, s15
   1126a:	vmov.f64	d7, #28	; 0x40e00000  7.0
   1126e:	vfma.f64	d7, d5, d6
   11272:	vmov	r2, s15
   11276:	vmov	r0, r1, d7
   1127a:	sub.w	r1, r2, #54525952	; 0x3400000
   1127e:	cmp.w	r9, #0
   11282:	beq.w	11996 <_dtoa_r+0x9d6>
   11286:	ldr	r6, [sp, #16]
   11288:	mov	r2, r9
   1128a:	ldr	r3, [sp, #28]
   1128c:	cmp	r3, #0
   1128e:	beq.w	11b20 <_dtoa_r+0xb60>
   11292:	vmov.f64	d3, #96	; 0x3f000000  0.5
   11296:	ldr	r3, [pc, #104]	; (11300 <_dtoa_r+0x340>)
   11298:	vcvt.s32.f64	s9, d6
   1129c:	add.w	ip, r3, r2, lsl #3
   112a0:	vcvt.f64.s32	d7, s9
   112a4:	vsub.f64	d7, d6, d7
   112a8:	vldr	d6, [ip, #-8]
   112ac:	vdiv.f64	d5, d3, d6
   112b0:	vmov	d6, r0, r1
   112b4:	vmov	r0, s9
   112b8:	vsub.f64	d5, d5, d6
   112bc:	ldr	r1, [sp, #0]
   112be:	vcmpe.f64	d5, d7
   112c2:	adds	r0, #48	; 0x30
   112c4:	vmrs	APSR_nzcv, fpscr
   112c8:	strb.w	r0, [r1], #1
   112cc:	bgt.w	11c28 <_dtoa_r+0xc68>
   112d0:	vmov.f64	d2, #112	; 0x3f800000  1.0
   112d4:	vmov.f64	d4, #36	; 0x41200000  10.0
   112d8:	mov.w	ip, #0
   112dc:	b.n	11342 <_dtoa_r+0x382>
   112de:	nop
   112e0:	.word	0x636f4361
   112e4:	.word	0x3fd287a7
   112e8:	.word	0x8b60c8b3
   112ec:	.word	0x3fc68a28
   112f0:	.word	0x509f79fb
   112f4:	.word	0x3fd34413
   112f8:	.word	0x7ff00000
   112fc:	.word	0x20000e99
   11300:	.word	0x200003a8
   11304:	.word	0x20000dec
   11308:	.word	0x20000df8
   1130c:	.word	0x20000380
   11310:	add.w	ip, ip, #1
   11314:	cmp	ip, r2
   11316:	bge.n	113b4 <_dtoa_r+0x3f4>
   11318:	vmul.f64	d7, d7, d4
   1131c:	vmul.f64	d5, d5, d4
   11320:	vcvt.s32.f64	s13, d7
   11324:	vmov	r3, s13
   11328:	vcvt.f64.s32	d3, s13
   1132c:	adds	r3, #48	; 0x30
   1132e:	vsub.f64	d7, d7, d3
   11332:	vcmpe.f64	d7, d5
   11336:	vmrs	APSR_nzcv, fpscr
   1133a:	strb.w	r3, [r1], #1
   1133e:	bmi.w	11c28 <_dtoa_r+0xc68>
   11342:	vsub.f64	d6, d2, d7
   11346:	vcmpe.f64	d6, d5
   1134a:	vmrs	APSR_nzcv, fpscr
   1134e:	bpl.n	11310 <_dtoa_r+0x350>
   11350:	ldr	r2, [sp, #0]
   11352:	str	r6, [sp, #16]
   11354:	b.n	1135c <_dtoa_r+0x39c>
   11356:	cmp	r2, r1
   11358:	beq.w	11bfc <_dtoa_r+0xc3c>
   1135c:	mov	r9, r1
   1135e:	ldrb.w	r3, [r1, #-1]!
   11362:	cmp	r3, #57	; 0x39
   11364:	beq.n	11356 <_dtoa_r+0x396>
   11366:	adds	r3, #1
   11368:	uxtb	r3, r3
   1136a:	strb	r3, [r1, #0]
   1136c:	ldr	r3, [sp, #16]
   1136e:	adds	r3, #1
   11370:	str	r3, [sp, #16]
   11372:	b.n	11620 <_dtoa_r+0x660>
   11374:	subs	r1, r1, r0
   11376:	movs	r3, #1
   11378:	subs.w	r8, r1, #1
   1137c:	str	r3, [sp, #40]	; 0x28
   1137e:	bpl.w	11110 <_dtoa_r+0x150>
   11382:	rsb	r3, r1, #1
   11386:	str	r3, [sp, #24]
   11388:	mov.w	r8, #0
   1138c:	b.n	11114 <_dtoa_r+0x154>
   1138e:	movs	r6, #0
   11390:	str	r6, [r4, #60]	; 0x3c
   11392:	mov	r1, r6
   11394:	mov	r0, r4
   11396:	bl	e83c <_Balloc>
   1139a:	str	r0, [sp, #0]
   1139c:	cmp	r0, #0
   1139e:	beq.w	11c70 <_dtoa_r+0xcb0>
   113a2:	ldr	r3, [sp, #0]
   113a4:	str	r3, [r4, #56]	; 0x38
   113a6:	mov.w	r3, #4294967295
   113aa:	str	r3, [sp, #44]	; 0x2c
   113ac:	mov	r9, r3
   113ae:	movs	r3, #1
   113b0:	mov	fp, r6
   113b2:	str	r3, [sp, #28]
   113b4:	ldr	r2, [sp, #52]	; 0x34
   113b6:	cmp	r2, #0
   113b8:	blt.n	11466 <_dtoa_r+0x4a6>
   113ba:	ldr	r1, [sp, #16]
   113bc:	cmp	r1, #14
   113be:	bgt.n	11466 <_dtoa_r+0x4a6>
   113c0:	ldr	r3, [pc, #732]	; (116a0 <_dtoa_r+0x6e0>)
   113c2:	cmp.w	fp, #0
   113c6:	add.w	r3, r3, r1, lsl #3
   113ca:	vldr	d6, [r3]
   113ce:	bge.n	113fc <_dtoa_r+0x43c>
   113d0:	cmp.w	r9, #0
   113d4:	bgt.n	113fc <_dtoa_r+0x43c>
   113d6:	bne.w	119be <_dtoa_r+0x9fe>
   113da:	vmov.f64	d7, #20	; 0x40a00000  5.0
   113de:	vmul.f64	d7, d6, d7
   113e2:	vcmpe.f64	d8, d7
   113e6:	vmrs	APSR_nzcv, fpscr
   113ea:	mov	sl, r9
   113ec:	mov	r6, r9
   113ee:	bhi.w	118cc <_dtoa_r+0x90c>
   113f2:	ldr.w	r8, [sp]
   113f6:	mvn.w	fp, fp
   113fa:	b.n	118de <_dtoa_r+0x91e>
   113fc:	vdiv.f64	d7, d8, d6
   11400:	vcvt.s32.f64	s14, d7
   11404:	ldr	r1, [sp, #0]
   11406:	vmov	r3, s14
   1140a:	cmp.w	r9, #1
   1140e:	add.w	r3, r3, #48	; 0x30
   11412:	vcvt.f64.s32	d5, s14
   11416:	strb.w	r3, [r1], #1
   1141a:	vfms.f64	d8, d5, d6
   1141e:	beq.w	11a8a <_dtoa_r+0xaca>
   11422:	vmov.f64	d4, #36	; 0x41200000  10.0
   11426:	movs	r3, #1
   11428:	b.n	1144e <_dtoa_r+0x48e>
   1142a:	vdiv.f64	d7, d8, d6
   1142e:	vcvt.s32.f64	s14, d7
   11432:	adds	r3, #1
   11434:	vmov	r2, s14
   11438:	cmp	r3, r9
   1143a:	add.w	r2, r2, #48	; 0x30
   1143e:	vcvt.f64.s32	d5, s14
   11442:	strb.w	r2, [r1], #1
   11446:	vfms.f64	d8, d5, d6
   1144a:	beq.w	11a8a <_dtoa_r+0xaca>
   1144e:	vmul.f64	d8, d8, d4
   11452:	vcmp.f64	d8, #0.0
   11456:	vmrs	APSR_nzcv, fpscr
   1145a:	bne.n	1142a <_dtoa_r+0x46a>
   1145c:	ldr	r3, [sp, #16]
   1145e:	adds	r3, #1
   11460:	str	r3, [sp, #16]
   11462:	mov	r9, r1
   11464:	b.n	11620 <_dtoa_r+0x660>
   11466:	ldr	r3, [sp, #28]
   11468:	cbz	r3, 114bc <_dtoa_r+0x4fc>
   1146a:	ldr	r3, [sp, #4]
   1146c:	cmp	r3, #1
   1146e:	ble.w	1195e <_dtoa_r+0x99e>
   11472:	ldr	r3, [sp, #32]
   11474:	add.w	sl, r9, #4294967295
   11478:	cmp	r3, sl
   1147a:	bge.w	118fc <_dtoa_r+0x93c>
   1147e:	ldr	r3, [sp, #32]
   11480:	str.w	sl, [sp, #32]
   11484:	sub.w	r2, sl, r3
   11488:	add	r7, r2
   1148a:	mov.w	sl, #0
   1148e:	cmp.w	r9, #0
   11492:	blt.w	11ae0 <_dtoa_r+0xb20>
   11496:	ldr	r3, [sp, #24]
   11498:	str	r3, [sp, #36]	; 0x24
   1149a:	add	r3, r9
   1149c:	add	r8, r9
   1149e:	str	r3, [sp, #24]
   114a0:	movs	r1, #1
   114a2:	mov	r0, r4
   114a4:	bl	e9e0 <__i2b>
   114a8:	mov	r6, r0
   114aa:	b.n	114c6 <_dtoa_r+0x506>
   114ac:	ldr	r3, [pc, #500]	; (116a4 <_dtoa_r+0x6e4>)
   114ae:	str	r3, [sp, #0]
   114b0:	ldr	r0, [sp, #0]
   114b2:	add	sp, #60	; 0x3c
   114b4:	vpop	{d8}
   114b8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   114bc:	ldr	r3, [sp, #24]
   114be:	ldr.w	sl, [sp, #32]
   114c2:	ldr	r6, [sp, #28]
   114c4:	str	r3, [sp, #36]	; 0x24
   114c6:	ldr	r3, [sp, #36]	; 0x24
   114c8:	cbz	r3, 114e6 <_dtoa_r+0x526>
   114ca:	cmp.w	r8, #0
   114ce:	ble.n	114e6 <_dtoa_r+0x526>
   114d0:	cmp	r3, r8
   114d2:	ldr	r1, [sp, #24]
   114d4:	mov	r2, r3
   114d6:	it	ge
   114d8:	movge	r2, r8
   114da:	subs	r1, r1, r2
   114dc:	subs	r3, r3, r2
   114de:	str	r1, [sp, #24]
   114e0:	str	r3, [sp, #36]	; 0x24
   114e2:	sub.w	r8, r8, r2
   114e6:	ldr	r3, [sp, #32]
   114e8:	cbz	r3, 11504 <_dtoa_r+0x544>
   114ea:	ldr	r3, [sp, #28]
   114ec:	cmp	r3, #0
   114ee:	beq.w	11a40 <_dtoa_r+0xa80>
   114f2:	cmp.w	sl, #0
   114f6:	bgt.w	11902 <_dtoa_r+0x942>
   114fa:	ldr	r3, [sp, #32]
   114fc:	subs.w	r2, r3, sl
   11500:	bne.w	11b02 <_dtoa_r+0xb42>
   11504:	movs	r1, #1
   11506:	mov	r0, r4
   11508:	bl	e9e0 <__i2b>
   1150c:	cmp	r7, #0
   1150e:	mov	sl, r0
   11510:	bgt.w	11672 <_dtoa_r+0x6b2>
   11514:	ldr	r3, [sp, #4]
   11516:	cmp	r3, #1
   11518:	ble.w	1182a <_dtoa_r+0x86a>
   1151c:	movs	r3, #0
   1151e:	str	r3, [sp, #32]
   11520:	movs	r0, #1
   11522:	cmp	r7, #0
   11524:	bne.w	1168a <_dtoa_r+0x6ca>
   11528:	add	r0, r8
   1152a:	ands.w	r0, r0, #31
   1152e:	beq.w	11826 <_dtoa_r+0x866>
   11532:	rsb	r2, r0, #32
   11536:	cmp	r2, #4
   11538:	bgt.w	1164c <_dtoa_r+0x68c>
   1153c:	bne.w	1192c <_dtoa_r+0x96c>
   11540:	ldr	r3, [sp, #24]
   11542:	cmp	r3, #0
   11544:	ble.n	11552 <_dtoa_r+0x592>
   11546:	mov	r1, r5
   11548:	mov	r2, r3
   1154a:	mov	r0, r4
   1154c:	bl	ec58 <__lshift>
   11550:	mov	r5, r0
   11552:	cmp.w	r8, #0
   11556:	ble.n	11564 <_dtoa_r+0x5a4>
   11558:	mov	r1, sl
   1155a:	mov	r2, r8
   1155c:	mov	r0, r4
   1155e:	bl	ec58 <__lshift>
   11562:	mov	sl, r0
   11564:	ldr	r3, [sp, #40]	; 0x28
   11566:	cmp	r3, #0
   11568:	bne.w	117ea <_dtoa_r+0x82a>
   1156c:	cmp.w	r9, #0
   11570:	ble.w	117be <_dtoa_r+0x7fe>
   11574:	ldr	r3, [sp, #28]
   11576:	cmp	r3, #0
   11578:	bne.w	116c2 <_dtoa_r+0x702>
   1157c:	ldr	r3, [sp, #16]
   1157e:	adds	r3, #1
   11580:	str	r3, [sp, #16]
   11582:	ldr.w	r8, [sp]
   11586:	movs	r7, #1
   11588:	b.n	1159a <_dtoa_r+0x5da>
   1158a:	mov	r1, r5
   1158c:	movs	r3, #0
   1158e:	movs	r2, #10
   11590:	mov	r0, r4
   11592:	bl	e89c <__multadd>
   11596:	adds	r7, #1
   11598:	mov	r5, r0
   1159a:	mov	r1, sl
   1159c:	mov	r0, r5
   1159e:	bl	10e98 <quorem>
   115a2:	cmp	r9, r7
   115a4:	add.w	r0, r0, #48	; 0x30
   115a8:	strb.w	r0, [r8], #1
   115ac:	bgt.n	1158a <_dtoa_r+0x5ca>
   115ae:	cmp.w	r9, #0
   115b2:	ldr	r2, [sp, #0]
   115b4:	ite	gt
   115b6:	movgt	fp, r9
   115b8:	movle.w	fp, #1
   115bc:	mov	r3, r0
   115be:	add	fp, r2
   115c0:	movs	r7, #0
   115c2:	mov	r1, r5
   115c4:	movs	r2, #1
   115c6:	mov	r0, r4
   115c8:	str	r3, [sp, #4]
   115ca:	bl	ec58 <__lshift>
   115ce:	mov	r1, sl
   115d0:	mov	r5, r0
   115d2:	bl	ed48 <__mcmp>
   115d6:	cmp	r0, #0
   115d8:	ble.w	1193a <_dtoa_r+0x97a>
   115dc:	ldrb.w	r3, [fp, #-1]
   115e0:	ldr	r2, [sp, #0]
   115e2:	add.w	fp, fp, #4294967295
   115e6:	b.n	115f2 <_dtoa_r+0x632>
   115e8:	cmp	r2, fp
   115ea:	beq.w	11950 <_dtoa_r+0x990>
   115ee:	ldrb.w	r3, [fp, #-1]!
   115f2:	cmp	r3, #57	; 0x39
   115f4:	add.w	r9, fp, #1
   115f8:	beq.n	115e8 <_dtoa_r+0x628>
   115fa:	adds	r3, #1
   115fc:	strb.w	r3, [fp]
   11600:	mov	r1, sl
   11602:	mov	r0, r4
   11604:	bl	e888 <_Bfree>
   11608:	cbz	r6, 11620 <_dtoa_r+0x660>
   1160a:	cbz	r7, 11618 <_dtoa_r+0x658>
   1160c:	cmp	r7, r6
   1160e:	beq.n	11618 <_dtoa_r+0x658>
   11610:	mov	r1, r7
   11612:	mov	r0, r4
   11614:	bl	e888 <_Bfree>
   11618:	mov	r1, r6
   1161a:	mov	r0, r4
   1161c:	bl	e888 <_Bfree>
   11620:	mov	r1, r5
   11622:	mov	r0, r4
   11624:	bl	e888 <_Bfree>
   11628:	movs	r3, #0
   1162a:	strb.w	r3, [r9]
   1162e:	ldrd	r2, r3, [sp, #16]
   11632:	str	r2, [r3, #0]
   11634:	ldr	r3, [sp, #108]	; 0x6c
   11636:	cmp	r3, #0
   11638:	beq.w	11038 <_dtoa_r+0x78>
   1163c:	ldr	r0, [sp, #0]
   1163e:	str.w	r9, [r3]
   11642:	add	sp, #60	; 0x3c
   11644:	vpop	{d8}
   11648:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1164c:	rsb	r0, r0, #28
   11650:	ldr	r3, [sp, #24]
   11652:	add	r3, r0
   11654:	str	r3, [sp, #24]
   11656:	ldr	r3, [sp, #36]	; 0x24
   11658:	add	r3, r0
   1165a:	str	r3, [sp, #36]	; 0x24
   1165c:	add	r8, r0
   1165e:	b.n	11540 <_dtoa_r+0x580>
   11660:	rsb	r2, r2, #32
   11664:	lsl.w	r2, r6, r2
   11668:	vmov	s14, r2
   1166c:	b.n	11082 <_dtoa_r+0xc2>
   1166e:	movs	r6, #1
   11670:	b.n	1113a <_dtoa_r+0x17a>
   11672:	mov	r1, r0
   11674:	mov	r2, r7
   11676:	mov	r0, r4
   11678:	bl	eb98 <__pow5mult>
   1167c:	ldr	r3, [sp, #4]
   1167e:	cmp	r3, #1
   11680:	mov	sl, r0
   11682:	ble.w	11a10 <_dtoa_r+0xa50>
   11686:	movs	r3, #0
   11688:	str	r3, [sp, #32]
   1168a:	ldr.w	r2, [sl, #16]
   1168e:	add.w	r2, sl, r2, lsl #2
   11692:	ldr	r0, [r2, #16]
   11694:	bl	e940 <__hi0bits>
   11698:	rsb	r0, r0, #32
   1169c:	b.n	11528 <_dtoa_r+0x568>
   1169e:	nop
   116a0:	.word	0x200003a8
   116a4:	.word	0x20000e98
   116a8:	mov	r1, r6
   116aa:	movs	r3, #0
   116ac:	movs	r2, #10
   116ae:	mov	r0, r4
   116b0:	bl	e89c <__multadd>
   116b4:	ldr	r3, [sp, #44]	; 0x2c
   116b6:	cmp	r3, #0
   116b8:	mov	r6, r0
   116ba:	ble.w	11c5a <_dtoa_r+0xc9a>
   116be:	str	r7, [sp, #16]
   116c0:	mov	r9, r3
   116c2:	ldr	r3, [sp, #36]	; 0x24
   116c4:	cmp	r3, #0
   116c6:	ble.n	116d4 <_dtoa_r+0x714>
   116c8:	mov	r1, r6
   116ca:	mov	r2, r3
   116cc:	mov	r0, r4
   116ce:	bl	ec58 <__lshift>
   116d2:	mov	r6, r0
   116d4:	ldr	r3, [sp, #32]
   116d6:	cmp	r3, #0
   116d8:	bne.w	11ab2 <_dtoa_r+0xaf2>
   116dc:	mov	r8, r6
   116de:	ldr	r3, [sp, #8]
   116e0:	ldr	r7, [sp, #0]
   116e2:	and.w	r2, r3, #1
   116e6:	subs	r3, r7, #1
   116e8:	add	r3, r9
   116ea:	str	r3, [sp, #32]
   116ec:	ldr	r3, [sp, #4]
   116ee:	str	r2, [sp, #40]	; 0x28
   116f0:	orrs	r3, r2
   116f2:	str	r3, [sp, #36]	; 0x24
   116f4:	mov	r1, sl
   116f6:	mov	r0, r5
   116f8:	bl	10e98 <quorem>
   116fc:	mov	r1, r6
   116fe:	mov	fp, r0
   11700:	mov	r0, r5
   11702:	bl	ed48 <__mcmp>
   11706:	mov	r2, r8
   11708:	mov	r1, sl
   1170a:	mov	r9, r0
   1170c:	mov	r0, r4
   1170e:	bl	ed8c <__mdiff>
   11712:	ldr	r2, [r0, #12]
   11714:	mov	r1, r0
   11716:	add.w	r3, fp, #48	; 0x30
   1171a:	cmp	r2, #0
   1171c:	bne.n	117a4 <_dtoa_r+0x7e4>
   1171e:	strd	r0, r3, [sp, #24]
   11722:	mov	r0, r5
   11724:	bl	ed48 <__mcmp>
   11728:	ldr	r1, [sp, #24]
   1172a:	str	r0, [sp, #8]
   1172c:	mov	r0, r4
   1172e:	bl	e888 <_Bfree>
   11732:	ldr	r2, [sp, #8]
   11734:	ldr	r3, [sp, #28]
   11736:	cbnz	r2, 11740 <_dtoa_r+0x780>
   11738:	ldr	r1, [sp, #36]	; 0x24
   1173a:	cmp	r1, #0
   1173c:	beq.w	11c3c <_dtoa_r+0xc7c>
   11740:	cmp.w	r9, #0
   11744:	blt.w	11a4e <_dtoa_r+0xa8e>
   11748:	ldr	r1, [sp, #4]
   1174a:	orr.w	r9, r9, r1
   1174e:	ldr	r1, [sp, #40]	; 0x28
   11750:	orrs.w	r9, r1, r9
   11754:	beq.w	11a4e <_dtoa_r+0xa8e>
   11758:	cmp	r2, #0
   1175a:	bgt.w	11aea <_dtoa_r+0xb2a>
   1175e:	ldr	r2, [sp, #32]
   11760:	strb	r3, [r7, #0]
   11762:	add.w	r9, r7, #1
   11766:	cmp	r7, r2
   11768:	mov	fp, r9
   1176a:	beq.w	11af6 <_dtoa_r+0xb36>
   1176e:	mov	r1, r5
   11770:	movs	r3, #0
   11772:	movs	r2, #10
   11774:	mov	r0, r4
   11776:	bl	e89c <__multadd>
   1177a:	cmp	r6, r8
   1177c:	mov	r5, r0
   1177e:	mov	r1, r6
   11780:	mov.w	r3, #0
   11784:	mov.w	r2, #10
   11788:	mov	r0, r4
   1178a:	beq.n	117b2 <_dtoa_r+0x7f2>
   1178c:	bl	e89c <__multadd>
   11790:	mov	r1, r8
   11792:	mov	r6, r0
   11794:	movs	r3, #0
   11796:	movs	r2, #10
   11798:	mov	r0, r4
   1179a:	bl	e89c <__multadd>
   1179e:	mov	r7, r9
   117a0:	mov	r8, r0
   117a2:	b.n	116f4 <_dtoa_r+0x734>
   117a4:	mov	r0, r4
   117a6:	str	r3, [sp, #8]
   117a8:	bl	e888 <_Bfree>
   117ac:	ldr	r3, [sp, #8]
   117ae:	movs	r2, #1
   117b0:	b.n	11740 <_dtoa_r+0x780>
   117b2:	bl	e89c <__multadd>
   117b6:	mov	r7, r9
   117b8:	mov	r6, r0
   117ba:	mov	r8, r0
   117bc:	b.n	116f4 <_dtoa_r+0x734>
   117be:	ldr	r3, [sp, #4]
   117c0:	cmp	r3, #2
   117c2:	bgt.n	118a8 <_dtoa_r+0x8e8>
   117c4:	ldr	r3, [sp, #28]
   117c6:	cmp	r3, #0
   117c8:	bne.w	116c2 <_dtoa_r+0x702>
   117cc:	ldr	r3, [sp, #16]
   117ce:	mov	r1, sl
   117d0:	adds	r3, #1
   117d2:	mov	r0, r5
   117d4:	str	r3, [sp, #16]
   117d6:	bl	10e98 <quorem>
   117da:	ldr.w	fp, [sp]
   117de:	add.w	r3, r0, #48	; 0x30
   117e2:	strb.w	r3, [fp], #1
   117e6:	movs	r7, #0
   117e8:	b.n	115c2 <_dtoa_r+0x602>
   117ea:	mov	r1, sl
   117ec:	mov	r0, r5
   117ee:	bl	ed48 <__mcmp>
   117f2:	cmp	r0, #0
   117f4:	bge.w	1156c <_dtoa_r+0x5ac>
   117f8:	mov	r1, r5
   117fa:	movs	r3, #0
   117fc:	movs	r2, #10
   117fe:	mov	r0, r4
   11800:	bl	e89c <__multadd>
   11804:	ldr	r3, [sp, #16]
   11806:	subs	r7, r3, #1
   11808:	ldr	r3, [sp, #28]
   1180a:	mov	r5, r0
   1180c:	cmp	r3, #0
   1180e:	bne.w	116a8 <_dtoa_r+0x6e8>
   11812:	ldr	r3, [sp, #44]	; 0x2c
   11814:	cmp	r3, #0
   11816:	ble.w	11c4a <_dtoa_r+0xc8a>
   1181a:	mov	r9, r3
   1181c:	b.n	11582 <_dtoa_r+0x5c2>
   1181e:	ldr	r3, [pc, #752]	; (11b10 <_dtoa_r+0xb50>)
   11820:	str	r3, [sp, #0]
   11822:	adds	r3, #3
   11824:	b.n	11170 <_dtoa_r+0x1b0>
   11826:	movs	r0, #28
   11828:	b.n	11650 <_dtoa_r+0x690>
   1182a:	ldrd	r0, r1, [sp, #8]
   1182e:	cmp	r0, #0
   11830:	bne.w	1151c <_dtoa_r+0x55c>
   11834:	ubfx	r2, r1, #0, #20
   11838:	cmp	r2, #0
   1183a:	beq.w	11a26 <_dtoa_r+0xa66>
   1183e:	ldr	r3, [sp, #8]
   11840:	str	r3, [sp, #32]
   11842:	b.n	11520 <_dtoa_r+0x560>
   11844:	movs	r3, #1
   11846:	str	r3, [sp, #28]
   11848:	ldr	r3, [sp, #16]
   1184a:	add	r3, fp
   1184c:	add.w	r9, r3, #1
   11850:	cmp.w	r9, #1
   11854:	mov	ip, r9
   11856:	str	r3, [sp, #44]	; 0x2c
   11858:	it	lt
   1185a:	movlt.w	ip, #1
   1185e:	movs	r1, #0
   11860:	cmp.w	ip, #23
   11864:	str	r1, [r4, #60]	; 0x3c
   11866:	ble.w	111e2 <_dtoa_r+0x222>
   1186a:	movs	r0, #1
   1186c:	movs	r2, #4
   1186e:	lsls	r2, r2, #1
   11870:	add.w	r3, r2, #20
   11874:	cmp	r3, ip
   11876:	mov	r1, r0
   11878:	add.w	r0, r0, #1
   1187c:	bls.n	1186e <_dtoa_r+0x8ae>
   1187e:	str	r1, [r4, #60]	; 0x3c
   11880:	b.n	111e2 <_dtoa_r+0x222>
   11882:	movs	r3, #1
   11884:	str	r3, [sp, #28]
   11886:	cmp.w	fp, #0
   1188a:	ble.n	11932 <_dtoa_r+0x972>
   1188c:	str.w	fp, [sp, #44]	; 0x2c
   11890:	mov	r9, fp
   11892:	mov	ip, fp
   11894:	b.n	1185e <_dtoa_r+0x89e>
   11896:	movs	r3, #0
   11898:	str	r3, [sp, #28]
   1189a:	b.n	11848 <_dtoa_r+0x888>
   1189c:	movs	r3, #0
   1189e:	str	r3, [sp, #28]
   118a0:	b.n	11886 <_dtoa_r+0x8c6>
   118a2:	ldr.w	r9, [sp, #44]	; 0x2c
   118a6:	str	r7, [sp, #16]
   118a8:	cmp.w	r9, #0
   118ac:	bne.w	113f2 <_dtoa_r+0x432>
   118b0:	mov	r1, sl
   118b2:	mov	r3, r9
   118b4:	movs	r2, #5
   118b6:	mov	r0, r4
   118b8:	bl	e89c <__multadd>
   118bc:	mov	r1, r0
   118be:	mov	sl, r0
   118c0:	mov	r0, r5
   118c2:	bl	ed48 <__mcmp>
   118c6:	cmp	r0, #0
   118c8:	ble.w	113f2 <_dtoa_r+0x432>
   118cc:	ldr	r3, [sp, #16]
   118ce:	add.w	fp, r3, #1
   118d2:	ldr	r3, [sp, #0]
   118d4:	movs	r2, #49	; 0x31
   118d6:	mov	r8, r3
   118d8:	strb.w	r2, [r3], #1
   118dc:	str	r3, [sp, #0]
   118de:	mov	r1, sl
   118e0:	mov	r0, r4
   118e2:	bl	e888 <_Bfree>
   118e6:	add.w	r3, fp, #1
   118ea:	ldr.w	r9, [sp]
   118ee:	str	r3, [sp, #16]
   118f0:	str.w	r8, [sp]
   118f4:	cmp	r6, #0
   118f6:	bne.w	11618 <_dtoa_r+0x658>
   118fa:	b.n	11620 <_dtoa_r+0x660>
   118fc:	sub.w	sl, r3, sl
   11900:	b.n	1148e <_dtoa_r+0x4ce>
   11902:	mov	r1, r6
   11904:	mov	r2, sl
   11906:	mov	r0, r4
   11908:	bl	eb98 <__pow5mult>
   1190c:	mov	r2, r5
   1190e:	mov	r1, r0
   11910:	mov	r6, r0
   11912:	mov	r0, r4
   11914:	bl	ea3c <__multiply>
   11918:	mov	r1, r5
   1191a:	mov	r5, r0
   1191c:	mov	r0, r4
   1191e:	bl	e888 <_Bfree>
   11922:	b.n	114fa <_dtoa_r+0x53a>
   11924:	movs	r0, #2
   11926:	vmov.f64	d5, d8
   1192a:	b.n	11230 <_dtoa_r+0x270>
   1192c:	rsb	r0, r0, #60	; 0x3c
   11930:	b.n	11650 <_dtoa_r+0x690>
   11932:	mov.w	fp, #1
   11936:	mov	r9, fp
   11938:	b.n	111da <_dtoa_r+0x21a>
   1193a:	bne.n	11944 <_dtoa_r+0x984>
   1193c:	ldr	r3, [sp, #4]
   1193e:	lsls	r3, r3, #31
   11940:	bmi.w	115dc <_dtoa_r+0x61c>
   11944:	mov	r9, fp
   11946:	ldrb.w	r3, [fp, #-1]!
   1194a:	cmp	r3, #48	; 0x30
   1194c:	beq.n	11944 <_dtoa_r+0x984>
   1194e:	b.n	11600 <_dtoa_r+0x640>
   11950:	ldr	r3, [sp, #16]
   11952:	ldr	r2, [sp, #0]
   11954:	adds	r3, #1
   11956:	str	r3, [sp, #16]
   11958:	movs	r3, #49	; 0x31
   1195a:	strb	r3, [r2, #0]
   1195c:	b.n	11600 <_dtoa_r+0x640>
   1195e:	cmp.w	sl, #0
   11962:	beq.w	11bac <_dtoa_r+0xbec>
   11966:	addw	r2, r2, #1075	; 0x433
   1196a:	ldr	r3, [sp, #24]
   1196c:	str	r3, [sp, #36]	; 0x24
   1196e:	add	r3, r2
   11970:	ldr.w	sl, [sp, #32]
   11974:	str	r3, [sp, #24]
   11976:	add	r8, r2
   11978:	b.n	114a0 <_dtoa_r+0x4e0>
   1197a:	vmov	s15, r0
   1197e:	vmov.f64	d5, #28	; 0x40e00000  7.0
   11982:	vcvt.f64.s32	d7, s15
   11986:	vfma.f64	d5, d6, d7
   1198a:	vmov	r2, s11
   1198e:	vmov	r0, r1, d5
   11992:	sub.w	r1, r2, #54525952	; 0x3400000
   11996:	vmov	d5, r0, r1
   1199a:	vmov.f64	d7, #20	; 0x40a00000  5.0
   1199e:	vsub.f64	d7, d6, d7
   119a2:	vcmpe.f64	d7, d5
   119a6:	vmrs	APSR_nzcv, fpscr
   119aa:	bgt.w	11c1c <_dtoa_r+0xc5c>
   119ae:	vneg.f64	d5, d5
   119b2:	vcmpe.f64	d7, d5
   119b6:	vmrs	APSR_nzcv, fpscr
   119ba:	bpl.w	113b4 <_dtoa_r+0x3f4>
   119be:	mov.w	sl, #0
   119c2:	mov	r6, sl
   119c4:	b.n	113f2 <_dtoa_r+0x432>
   119c6:	beq.w	11bb4 <_dtoa_r+0xbf4>
   119ca:	ldr	r3, [sp, #16]
   119cc:	ldr	r1, [pc, #324]	; (11b14 <_dtoa_r+0xb54>)
   119ce:	negs	r2, r3
   119d0:	and.w	r0, r2, #15
   119d4:	add.w	r1, r1, r0, lsl #3
   119d8:	vldr	d6, [r1]
   119dc:	asrs	r2, r2, #4
   119de:	vmul.f64	d6, d8, d6
   119e2:	beq.w	11c6a <_dtoa_r+0xcaa>
   119e6:	vmov.f64	d7, d6
   119ea:	ldr	r1, [pc, #300]	; (11b18 <_dtoa_r+0xb58>)
   119ec:	movs	r6, #0
   119ee:	movs	r0, #2
   119f0:	lsls	r3, r2, #31
   119f2:	bpl.n	11a00 <_dtoa_r+0xa40>
   119f4:	vldr	d5, [r1]
   119f8:	adds	r0, #1
   119fa:	movs	r6, #1
   119fc:	vmul.f64	d7, d7, d5
   11a00:	asrs	r2, r2, #1
   11a02:	add.w	r1, r1, #8
   11a06:	bne.n	119f0 <_dtoa_r+0xa30>
   11a08:	cmp	r6, #0
   11a0a:	vseleq.f64	d6, d6, d7
   11a0e:	b.n	1124e <_dtoa_r+0x28e>
   11a10:	ldr	r3, [sp, #8]
   11a12:	cmp	r3, #0
   11a14:	bne.w	11686 <_dtoa_r+0x6c6>
   11a18:	ldrd	r0, r1, [sp, #8]
   11a1c:	ubfx	r2, r1, #0, #20
   11a20:	cmp	r2, #0
   11a22:	bne.w	11c94 <_dtoa_r+0xcd4>
   11a26:	ldr	r2, [pc, #244]	; (11b1c <_dtoa_r+0xb5c>)
   11a28:	ands	r2, r1
   11a2a:	cmp	r2, #0
   11a2c:	beq.w	11c24 <_dtoa_r+0xc64>
   11a30:	ldr	r3, [sp, #24]
   11a32:	adds	r3, #1
   11a34:	str	r3, [sp, #24]
   11a36:	movs	r3, #1
   11a38:	add.w	r8, r8, #1
   11a3c:	str	r3, [sp, #32]
   11a3e:	b.n	11520 <_dtoa_r+0x560>
   11a40:	mov	r1, r5
   11a42:	ldr	r2, [sp, #32]
   11a44:	mov	r0, r4
   11a46:	bl	eb98 <__pow5mult>
   11a4a:	mov	r5, r0
   11a4c:	b.n	11504 <_dtoa_r+0x544>
   11a4e:	cmp	r2, #0
   11a50:	ble.n	11a78 <_dtoa_r+0xab8>
   11a52:	mov	r1, r5
   11a54:	movs	r2, #1
   11a56:	mov	r0, r4
   11a58:	str	r3, [sp, #4]
   11a5a:	bl	ec58 <__lshift>
   11a5e:	mov	r1, sl
   11a60:	mov	r5, r0
   11a62:	bl	ed48 <__mcmp>
   11a66:	cmp	r0, #0
   11a68:	ldr	r3, [sp, #4]
   11a6a:	ble.w	11c30 <_dtoa_r+0xc70>
   11a6e:	cmp	r3, #57	; 0x39
   11a70:	beq.w	11c08 <_dtoa_r+0xc48>
   11a74:	add.w	r3, fp, #49	; 0x31
   11a78:	mov	r9, r7
   11a7a:	strb.w	r3, [r9], #1
   11a7e:	ldr	r3, [sp, #16]
   11a80:	adds	r3, #1
   11a82:	mov	r7, r6
   11a84:	str	r3, [sp, #16]
   11a86:	mov	r6, r8
   11a88:	b.n	11600 <_dtoa_r+0x640>
   11a8a:	vadd.f64	d8, d8, d8
   11a8e:	vcmpe.f64	d8, d6
   11a92:	vmrs	APSR_nzcv, fpscr
   11a96:	bgt.n	11aae <_dtoa_r+0xaee>
   11a98:	vcmp.f64	d8, d6
   11a9c:	vmrs	APSR_nzcv, fpscr
   11aa0:	bne.w	1145c <_dtoa_r+0x49c>
   11aa4:	vmov	r3, s14
   11aa8:	lsls	r0, r3, #31
   11aaa:	bpl.w	1145c <_dtoa_r+0x49c>
   11aae:	ldr	r2, [sp, #0]
   11ab0:	b.n	1135c <_dtoa_r+0x39c>
   11ab2:	ldr	r1, [r6, #4]
   11ab4:	mov	r0, r4
   11ab6:	bl	e83c <_Balloc>
   11aba:	mov	r7, r0
   11abc:	cmp	r0, #0
   11abe:	beq.w	11c7e <_dtoa_r+0xcbe>
   11ac2:	ldr	r3, [r6, #16]
   11ac4:	adds	r3, #2
   11ac6:	lsls	r2, r3, #2
   11ac8:	add.w	r1, r6, #12
   11acc:	adds	r0, #12
   11ace:	bl	a0c4 <memcpy>
   11ad2:	mov	r1, r7
   11ad4:	movs	r2, #1
   11ad6:	mov	r0, r4
   11ad8:	bl	ec58 <__lshift>
   11adc:	mov	r8, r0
   11ade:	b.n	116de <_dtoa_r+0x71e>
   11ae0:	ldr	r3, [sp, #24]
   11ae2:	sub.w	r3, r3, r9
   11ae6:	str	r3, [sp, #36]	; 0x24
   11ae8:	b.n	114a0 <_dtoa_r+0x4e0>
   11aea:	cmp	r3, #57	; 0x39
   11aec:	beq.w	11c08 <_dtoa_r+0xc48>
   11af0:	mov	r9, r7
   11af2:	adds	r3, #1
   11af4:	b.n	11a7a <_dtoa_r+0xaba>
   11af6:	ldr	r2, [sp, #16]
   11af8:	adds	r2, #1
   11afa:	mov	r7, r6
   11afc:	str	r2, [sp, #16]
   11afe:	mov	r6, r8
   11b00:	b.n	115c2 <_dtoa_r+0x602>
   11b02:	mov	r1, r5
   11b04:	mov	r0, r4
   11b06:	bl	eb98 <__pow5mult>
   11b0a:	mov	r5, r0
   11b0c:	b.n	11504 <_dtoa_r+0x544>
   11b0e:	nop
   11b10:	.word	0x20000df8
   11b14:	.word	0x200003a8
   11b18:	.word	0x20000380
   11b1c:	.word	0x7ff00000
   11b20:	ldr	r3, [pc, #376]	; (11c9c <_dtoa_r+0xcdc>)
   11b22:	vcvt.s32.f64	s11, d6
   11b26:	add.w	ip, r3, r2, lsl #3
   11b2a:	vldr	d3, [ip, #-8]
   11b2e:	vcvt.f64.s32	d7, s11
   11b32:	vsub.f64	d7, d6, d7
   11b36:	vmov	d6, r0, r1
   11b3a:	vmov	r1, s11
   11b3e:	vmul.f64	d3, d3, d6
   11b42:	ldr	r0, [sp, #0]
   11b44:	adds	r1, #48	; 0x30
   11b46:	cmp	r2, #1
   11b48:	strb.w	r1, [r0], #1
   11b4c:	beq.w	11c56 <_dtoa_r+0xc96>
   11b50:	vmov.f64	d4, #36	; 0x41200000  10.0
   11b54:	ldr	r3, [sp, #0]
   11b56:	adds	r1, r3, r2
   11b58:	vmul.f64	d7, d7, d4
   11b5c:	vcvt.s32.f64	s13, d7
   11b60:	vmov	r3, s13
   11b64:	adds	r3, #48	; 0x30
   11b66:	strb.w	r3, [r0], #1
   11b6a:	cmp	r1, r0
   11b6c:	vcvt.f64.s32	d5, s13
   11b70:	vsub.f64	d7, d7, d5
   11b74:	bne.n	11b58 <_dtoa_r+0xb98>
   11b76:	vmov.f64	d6, #96	; 0x3f000000  0.5
   11b7a:	vadd.f64	d5, d3, d6
   11b7e:	vcmpe.f64	d5, d7
   11b82:	vmrs	APSR_nzcv, fpscr
   11b86:	bmi.w	11350 <_dtoa_r+0x390>
   11b8a:	vsub.f64	d6, d6, d3
   11b8e:	vcmpe.f64	d6, d7
   11b92:	vmrs	APSR_nzcv, fpscr
   11b96:	ble.w	113b4 <_dtoa_r+0x3f4>
   11b9a:	mov	r9, r1
   11b9c:	subs	r1, #1
   11b9e:	ldrb.w	r3, [r9, #-1]
   11ba2:	cmp	r3, #48	; 0x30
   11ba4:	beq.n	11b9a <_dtoa_r+0xbda>
   11ba6:	adds	r3, r6, #1
   11ba8:	str	r3, [sp, #16]
   11baa:	b.n	11620 <_dtoa_r+0x660>
   11bac:	ldr	r2, [sp, #48]	; 0x30
   11bae:	rsb	r2, r2, #54	; 0x36
   11bb2:	b.n	1196a <_dtoa_r+0x9aa>
   11bb4:	movs	r0, #2
   11bb6:	vmov.f64	d6, d8
   11bba:	b.w	1124e <_dtoa_r+0x28e>
   11bbe:	cmp.w	r9, #0
   11bc2:	beq.w	1197a <_dtoa_r+0x9ba>
   11bc6:	ldr	r2, [sp, #44]	; 0x2c
   11bc8:	cmp	r2, #0
   11bca:	ble.w	113b4 <_dtoa_r+0x3f4>
   11bce:	vmov.f64	d4, #36	; 0x41200000  10.0
   11bd2:	vmul.f64	d6, d6, d4
   11bd6:	adds	r0, #1
   11bd8:	vmov	s15, r0
   11bdc:	ldr	r3, [sp, #16]
   11bde:	vcvt.f64.s32	d5, s15
   11be2:	vmov.f64	d7, #28	; 0x40e00000  7.0
   11be6:	vfma.f64	d7, d6, d5
   11bea:	vmov	ip, s15
   11bee:	vmov	r0, r1, d7
   11bf2:	subs	r6, r3, #1
   11bf4:	sub.w	r1, ip, #54525952	; 0x3400000
   11bf8:	b.w	1128a <_dtoa_r+0x2ca>
   11bfc:	ldr	r3, [sp, #16]
   11bfe:	adds	r3, #1
   11c00:	str	r3, [sp, #16]
   11c02:	movs	r3, #49	; 0x31
   11c04:	b.w	1136a <_dtoa_r+0x3aa>
   11c08:	ldr	r3, [sp, #16]
   11c0a:	mov	fp, r7
   11c0c:	adds	r3, #1
   11c0e:	str	r3, [sp, #16]
   11c10:	movs	r3, #57	; 0x39
   11c12:	mov	r7, r6
   11c14:	strb.w	r3, [fp], #1
   11c18:	mov	r6, r8
   11c1a:	b.n	115e0 <_dtoa_r+0x620>
   11c1c:	mov.w	sl, #0
   11c20:	mov	r6, sl
   11c22:	b.n	118cc <_dtoa_r+0x90c>
   11c24:	str	r2, [sp, #32]
   11c26:	b.n	11520 <_dtoa_r+0x560>
   11c28:	adds	r3, r6, #1
   11c2a:	str	r3, [sp, #16]
   11c2c:	mov	r9, r1
   11c2e:	b.n	11620 <_dtoa_r+0x660>
   11c30:	bne.w	11a78 <_dtoa_r+0xab8>
   11c34:	lsls	r2, r3, #31
   11c36:	bpl.w	11a78 <_dtoa_r+0xab8>
   11c3a:	b.n	11a6e <_dtoa_r+0xaae>
   11c3c:	cmp	r3, #57	; 0x39
   11c3e:	beq.n	11c08 <_dtoa_r+0xc48>
   11c40:	cmp.w	r9, #0
   11c44:	bgt.w	11a74 <_dtoa_r+0xab4>
   11c48:	b.n	11a78 <_dtoa_r+0xab8>
   11c4a:	ldr	r3, [sp, #4]
   11c4c:	cmp	r3, #2
   11c4e:	bgt.w	118a2 <_dtoa_r+0x8e2>
   11c52:	str	r7, [sp, #16]
   11c54:	b.n	117cc <_dtoa_r+0x80c>
   11c56:	mov	r1, r0
   11c58:	b.n	11b76 <_dtoa_r+0xbb6>
   11c5a:	ldr	r3, [sp, #4]
   11c5c:	cmp	r3, #2
   11c5e:	bgt.w	118a2 <_dtoa_r+0x8e2>
   11c62:	ldr.w	r9, [sp, #44]	; 0x2c
   11c66:	str	r7, [sp, #16]
   11c68:	b.n	116c2 <_dtoa_r+0x702>
   11c6a:	movs	r0, #2
   11c6c:	b.w	1124e <_dtoa_r+0x28e>
   11c70:	ldr	r3, [pc, #44]	; (11ca0 <_dtoa_r+0xce0>)
   11c72:	ldr	r0, [pc, #48]	; (11ca4 <_dtoa_r+0xce4>)
   11c74:	movs	r2, #0
   11c76:	movw	r1, #431	; 0x1af
   11c7a:	bl	10de0 <__assert_func>
   11c7e:	ldr	r3, [pc, #32]	; (11ca0 <_dtoa_r+0xce0>)
   11c80:	ldr	r0, [pc, #32]	; (11ca4 <_dtoa_r+0xce4>)
   11c82:	mov	r2, r7
   11c84:	movw	r1, #751	; 0x2ef
   11c88:	bl	10de0 <__assert_func>
   11c8c:	ldr	r3, [pc, #24]	; (11ca8 <_dtoa_r+0xce8>)
   11c8e:	str	r3, [sp, #0]
   11c90:	b.w	11038 <_dtoa_r+0x78>
   11c94:	ldr	r3, [sp, #8]
   11c96:	str	r3, [sp, #32]
   11c98:	b.n	1168a <_dtoa_r+0x6ca>
   11c9a:	nop
   11c9c:	.word	0x200003a8
   11ca0:	.word	0x20000c78
   11ca4:	.word	0x20000dfc
   11ca8:	.word	0x20000dec

00011cac <_wcrtomb_r>:
   11cac:	push	{r4, r5, r6, lr}
   11cae:	mov	r5, r0
   11cb0:	sub	sp, #16
   11cb2:	cbz	r3, 11ccc <_wcrtomb_r+0x20>
   11cb4:	mov	r4, r3
   11cb6:	cbz	r1, 11cd4 <_wcrtomb_r+0x28>
   11cb8:	ldr	r3, [pc, #56]	; (11cf4 <_wcrtomb_r+0x48>)
   11cba:	mov	r0, r5
   11cbc:	ldr.w	r6, [r3, #224]	; 0xe0
   11cc0:	mov	r3, r4
   11cc2:	blx	r6
   11cc4:	adds	r3, r0, #1
   11cc6:	beq.n	11ce8 <_wcrtomb_r+0x3c>
   11cc8:	add	sp, #16
   11cca:	pop	{r4, r5, r6, pc}
   11ccc:	add.w	r4, r0, #260	; 0x104
   11cd0:	cmp	r1, #0
   11cd2:	bne.n	11cb8 <_wcrtomb_r+0xc>
   11cd4:	ldr	r2, [pc, #28]	; (11cf4 <_wcrtomb_r+0x48>)
   11cd6:	mov	r3, r4
   11cd8:	ldr.w	r6, [r2, #224]	; 0xe0
   11cdc:	mov	r0, r5
   11cde:	mov	r2, r1
   11ce0:	add	r1, sp, #4
   11ce2:	blx	r6
   11ce4:	adds	r3, r0, #1
   11ce6:	bne.n	11cc8 <_wcrtomb_r+0x1c>
   11ce8:	movs	r2, #0
   11cea:	movs	r3, #138	; 0x8a
   11cec:	str	r2, [r4, #0]
   11cee:	str	r3, [r5, #0]
   11cf0:	add	sp, #16
   11cf2:	pop	{r4, r5, r6, pc}
   11cf4:	.word	0x20001488

00011cf8 <_wcsrtombs_r>:
   11cf8:	push	{r4, lr}
   11cfa:	sub	sp, #8
   11cfc:	ldr	r4, [sp, #16]
   11cfe:	strd	r3, r4, [sp]
   11d02:	mov.w	r3, #4294967295
   11d06:	bl	13498 <_wcsnrtombs_r>
   11d0a:	add	sp, #8
   11d0c:	pop	{r4, pc}
   11d0e:	nop

00011d10 <fiprintf>:
   11d10:	push	{r1, r2, r3}
   11d12:	push	{r4, lr}
   11d14:	sub	sp, #12
   11d16:	add	r3, sp, #20
   11d18:	ldr	r4, [pc, #24]	; (11d34 <fiprintf+0x24>)
   11d1a:	ldr.w	r2, [r3], #4
   11d1e:	str	r3, [sp, #4]
   11d20:	mov	r1, r0
   11d22:	ldr	r0, [r4, #0]
   11d24:	bl	11eb0 <_vfiprintf_r>
   11d28:	add	sp, #12
   11d2a:	ldmia.w	sp!, {r4, lr}
   11d2e:	add	sp, #12
   11d30:	bx	lr
   11d32:	nop
   11d34:	.word	0x20001a10

00011d38 <__ssprint_r>:
   11d38:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11d3c:	ldr	r3, [r2, #8]
   11d3e:	ldr	r7, [r2, #0]
   11d40:	sub	sp, #12
   11d42:	mov	sl, r2
   11d44:	cmp	r3, #0
   11d46:	beq.n	11e2a <__ssprint_r+0xf2>
   11d48:	mov	r9, r0
   11d4a:	ldr	r2, [r1, #8]
   11d4c:	ldr	r0, [r1, #0]
   11d4e:	mov	r4, r1
   11d50:	adds	r7, #8
   11d52:	b.n	11ddc <__ssprint_r+0xa4>
   11d54:	ldrh	r3, [r4, #12]
   11d56:	tst.w	r3, #1152	; 0x480
   11d5a:	beq.n	11dba <__ssprint_r+0x82>
   11d5c:	ldrd	r1, r6, [r4, #16]
   11d60:	sub.w	r8, r0, r1
   11d64:	add.w	r6, r6, r6, lsl #1
   11d68:	add.w	r6, r6, r6, lsr #31
   11d6c:	add.w	r0, r8, #1
   11d70:	asrs	r6, r6, #1
   11d72:	add	r0, r5
   11d74:	cmp	r0, r6
   11d76:	mov	r2, r6
   11d78:	itt	hi
   11d7a:	movhi	r6, r0
   11d7c:	movhi	r2, r6
   11d7e:	lsls	r3, r3, #21
   11d80:	bpl.n	11df2 <__ssprint_r+0xba>
   11d82:	mov	r1, r2
   11d84:	mov	r0, r9
   11d86:	bl	d250 <_malloc_r>
   11d8a:	str	r0, [sp, #4]
   11d8c:	cmp	r0, #0
   11d8e:	beq.n	11e06 <__ssprint_r+0xce>
   11d90:	mov	r2, r8
   11d92:	ldr	r1, [r4, #16]
   11d94:	bl	a0c4 <memcpy>
   11d98:	ldrh	r2, [r4, #12]
   11d9a:	ldr	r3, [sp, #4]
   11d9c:	bic.w	r2, r2, #1152	; 0x480
   11da0:	orr.w	r2, r2, #128	; 0x80
   11da4:	strh	r2, [r4, #12]
   11da6:	sub.w	r2, r6, r8
   11daa:	add.w	r0, r3, r8
   11dae:	str	r6, [r4, #20]
   11db0:	str	r2, [r4, #8]
   11db2:	str	r3, [r4, #16]
   11db4:	str	r0, [r4, #0]
   11db6:	mov	r6, r5
   11db8:	mov	r8, r5
   11dba:	mov	r2, r8
   11dbc:	mov	r1, fp
   11dbe:	bl	df6c <memmove>
   11dc2:	ldr.w	r3, [sl, #8]
   11dc6:	ldr	r2, [r4, #8]
   11dc8:	ldr	r0, [r4, #0]
   11dca:	subs	r2, r2, r6
   11dcc:	add	r0, r8
   11dce:	subs	r3, r3, r5
   11dd0:	str	r2, [r4, #8]
   11dd2:	str	r0, [r4, #0]
   11dd4:	str.w	r3, [sl, #8]
   11dd8:	cbz	r3, 11e2a <__ssprint_r+0xf2>
   11dda:	adds	r7, #8
   11ddc:	ldrd	fp, r5, [r7, #-8]
   11de0:	cmp	r5, #0
   11de2:	beq.n	11dda <__ssprint_r+0xa2>
   11de4:	cmp	r2, r5
   11de6:	mov	r6, r2
   11de8:	mov	r8, r2
   11dea:	bls.n	11d54 <__ssprint_r+0x1c>
   11dec:	mov	r6, r5
   11dee:	mov	r8, r5
   11df0:	b.n	11dba <__ssprint_r+0x82>
   11df2:	mov	r0, r9
   11df4:	bl	d7c8 <_realloc_r>
   11df8:	mov	r3, r0
   11dfa:	cmp	r0, #0
   11dfc:	bne.n	11da6 <__ssprint_r+0x6e>
   11dfe:	ldr	r1, [r4, #16]
   11e00:	mov	r0, r9
   11e02:	bl	e604 <_free_r>
   11e06:	ldrh	r3, [r4, #12]
   11e08:	movs	r2, #12
   11e0a:	orr.w	r3, r3, #64	; 0x40
   11e0e:	str.w	r2, [r9]
   11e12:	mov.w	r0, #4294967295
   11e16:	strh	r3, [r4, #12]
   11e18:	movs	r2, #0
   11e1a:	movs	r3, #0
   11e1c:	str.w	r2, [sl, #8]
   11e20:	str.w	r3, [sl, #4]
   11e24:	add	sp, #12
   11e26:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11e2a:	movs	r0, #0
   11e2c:	movs	r3, #0
   11e2e:	str.w	r3, [sl, #4]
   11e32:	add	sp, #12
   11e34:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00011e38 <__sprint_r.part.0>:
   11e38:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11e3c:	ldr	r3, [r1, #100]	; 0x64
   11e3e:	lsls	r4, r3, #18
   11e40:	mov	r8, r2
   11e42:	bpl.n	11ea0 <__sprint_r.part.0+0x68>
   11e44:	ldr	r3, [r2, #8]
   11e46:	ldr	r2, [r2, #0]
   11e48:	cbz	r3, 11e9c <__sprint_r.part.0+0x64>
   11e4a:	mov	fp, r1
   11e4c:	mov	r6, r0
   11e4e:	add.w	r9, r2, #8
   11e52:	ldrd	r5, sl, [r9, #-8]
   11e56:	movs.w	r7, sl, lsr #2
   11e5a:	beq.n	11e88 <__sprint_r.part.0+0x50>
   11e5c:	subs	r5, #4
   11e5e:	movs	r4, #0
   11e60:	b.n	11e66 <__sprint_r.part.0+0x2e>
   11e62:	cmp	r7, r4
   11e64:	beq.n	11e84 <__sprint_r.part.0+0x4c>
   11e66:	ldr.w	r1, [r5, #4]!
   11e6a:	mov	r2, fp
   11e6c:	mov	r0, r6
   11e6e:	bl	13328 <_fputwc_r>
   11e72:	adds	r3, r0, #1
   11e74:	add.w	r4, r4, #1
   11e78:	bne.n	11e62 <__sprint_r.part.0+0x2a>
   11e7a:	movs	r3, #0
   11e7c:	strd	r3, r3, [r8, #4]
   11e80:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11e84:	ldr.w	r3, [r8, #8]
   11e88:	bic.w	sl, sl, #3
   11e8c:	sub.w	r3, r3, sl
   11e90:	str.w	r3, [r8, #8]
   11e94:	add.w	r9, r9, #8
   11e98:	cmp	r3, #0
   11e9a:	bne.n	11e52 <__sprint_r.part.0+0x1a>
   11e9c:	movs	r0, #0
   11e9e:	b.n	11e7a <__sprint_r.part.0+0x42>
   11ea0:	bl	12ebc <__sfvwrite_r>
   11ea4:	movs	r3, #0
   11ea6:	strd	r3, r3, [r8, #4]
   11eaa:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11eae:	nop

00011eb0 <_vfiprintf_r>:
   11eb0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11eb4:	vpush	{d8}
   11eb8:	sub	sp, #276	; 0x114
   11eba:	add.w	sl, sp, #80	; 0x50
   11ebe:	mov	fp, r0
   11ec0:	vmov	s16, r1
   11ec4:	mov	r6, r2
   11ec6:	movs	r1, #0
   11ec8:	movs	r2, #8
   11eca:	mov	r0, sl
   11ecc:	mov	r4, r3
   11ece:	str	r3, [sp, #28]
   11ed0:	bl	e064 <memset>
   11ed4:	cmp.w	fp, #0
   11ed8:	beq.n	11ee4 <_vfiprintf_r+0x34>
   11eda:	ldr.w	r3, [fp, #52]	; 0x34
   11ede:	cmp	r3, #0
   11ee0:	beq.w	12c24 <_vfiprintf_r+0xd74>
   11ee4:	vmov	r2, s16
   11ee8:	ldr	r3, [r2, #100]	; 0x64
   11eea:	lsls	r3, r3, #31
   11eec:	bpl.w	12916 <_vfiprintf_r+0xa66>
   11ef0:	ldrsh.w	r1, [r2, #12]
   11ef4:	uxth	r2, r1
   11ef6:	lsls	r5, r2, #18
   11ef8:	bmi.n	11f12 <_vfiprintf_r+0x62>
   11efa:	vmov	r3, s16
   11efe:	orr.w	r1, r1, #8192	; 0x2000
   11f02:	strh	r1, [r3, #12]
   11f04:	ldr	r3, [r3, #100]	; 0x64
   11f06:	uxth	r2, r1
   11f08:	vmov	r1, s16
   11f0c:	bic.w	r3, r3, #8192	; 0x2000
   11f10:	str	r3, [r1, #100]	; 0x64
   11f12:	lsls	r0, r2, #28
   11f14:	bpl.w	12122 <_vfiprintf_r+0x272>
   11f18:	vmov	r3, s16
   11f1c:	ldr	r3, [r3, #16]
   11f1e:	cmp	r3, #0
   11f20:	beq.w	12122 <_vfiprintf_r+0x272>
   11f24:	and.w	r3, r2, #26
   11f28:	cmp	r3, #10
   11f2a:	beq.w	12142 <_vfiprintf_r+0x292>
   11f2e:	movs	r3, #0
   11f30:	strd	r3, r3, [sp, #100]	; 0x64
   11f34:	strd	r3, r3, [sp, #52]	; 0x34
   11f38:	add	r2, sp, #108	; 0x6c
   11f3a:	str	r3, [sp, #48]	; 0x30
   11f3c:	str	r2, [sp, #96]	; 0x60
   11f3e:	mov	r9, r2
   11f40:	str	r3, [sp, #44]	; 0x2c
   11f42:	str	r3, [sp, #20]
   11f44:	mov	r8, r6
   11f46:	mov	r4, r8
   11f48:	ldr	r3, [pc, #672]	; (121ec <_vfiprintf_r+0x33c>)
   11f4a:	ldr.w	r5, [r3, #228]	; 0xe4
   11f4e:	bl	e1f8 <__locale_mb_cur_max>
   11f52:	mov	r2, r4
   11f54:	mov	r3, r0
   11f56:	add	r1, sp, #72	; 0x48
   11f58:	str.w	sl, [sp]
   11f5c:	mov	r0, fp
   11f5e:	blx	r5
   11f60:	cmp	r0, #0
   11f62:	beq.w	121f0 <_vfiprintf_r+0x340>
   11f66:	blt.w	121dc <_vfiprintf_r+0x32c>
   11f6a:	ldr	r2, [sp, #72]	; 0x48
   11f6c:	cmp	r2, #37	; 0x25
   11f6e:	mov	r3, r0
   11f70:	beq.n	11f76 <_vfiprintf_r+0xc6>
   11f72:	add	r4, r3
   11f74:	b.n	11f48 <_vfiprintf_r+0x98>
   11f76:	subs.w	r6, r4, r8
   11f7a:	mov	r5, r0
   11f7c:	bne.w	121f8 <_vfiprintf_r+0x348>
   11f80:	movs	r3, #0
   11f82:	ldrb	r1, [r4, #1]
   11f84:	strb.w	r3, [sp, #67]	; 0x43
   11f88:	add.w	r8, r4, #1
   11f8c:	str	r3, [sp, #24]
   11f8e:	mov.w	r7, #4294967295
   11f92:	mov	r6, r3
   11f94:	movs	r4, #43	; 0x2b
   11f96:	add.w	r8, r8, #1
   11f9a:	sub.w	r3, r1, #32
   11f9e:	cmp	r3, #90	; 0x5a
   11fa0:	bhi.w	12294 <_vfiprintf_r+0x3e4>
   11fa4:	tbh	[pc, r3, lsl #1]
   11fa8:	.word	0x017602b5
   11fac:	.word	0x02b00176
   11fb0:	.word	0x01760176
   11fb4:	.word	0x006a0176
   11fb8:	.word	0x01760176
   11fbc:	.word	0x028d027d
   11fc0:	.word	0x02880176
   11fc4:	.word	0x01760297
   11fc8:	.word	0x005b0292
   11fcc:	.word	0x005b005b
   11fd0:	.word	0x005b005b
   11fd4:	.word	0x005b005b
   11fd8:	.word	0x005b005b
   11fdc:	.word	0x01760176
   11fe0:	.word	0x01760176
   11fe4:	.word	0x01760176
   11fe8:	.word	0x01760176
   11fec:	.word	0x025c0176
   11ff0:	.word	0x01760084
   11ff4:	.word	0x01760176
   11ff8:	.word	0x01760176
   11ffc:	.word	0x01760176
   12000:	.word	0x01760176
   12004:	.word	0x00e80176
   12008:	.word	0x01760176
   1200c:	.word	0x02330176
   12010:	.word	0x02da0176
   12014:	.word	0x01760176
   12018:	.word	0x0176058b
   1201c:	.word	0x01760176
   12020:	.word	0x01760176
   12024:	.word	0x01760176
   12028:	.word	0x01760176
   1202c:	.word	0x025c0176
   12030:	.word	0x01760086
   12034:	.word	0x01760176
   12038:	.word	0x008602cd
   1203c:	.word	0x0176007f
   12040:	.word	0x017602c0
   12044:	.word	0x00ea02fd
   12048:	.word	0x007f02ed
   1204c:	.word	0x02330176
   12050:	.word	0x0569007c
   12054:	.word	0x01760176
   12058:	.word	0x0176056b
   1205c:	.short	0x007c
   1205e:	sub.w	r3, r1, #48	; 0x30
   12062:	movs	r2, #0
   12064:	ldrb.w	r1, [r8], #1
   12068:	add.w	r2, r2, r2, lsl #2
   1206c:	add.w	r2, r3, r2, lsl #1
   12070:	sub.w	r3, r1, #48	; 0x30
   12074:	cmp	r3, #9
   12076:	bls.n	12064 <_vfiprintf_r+0x1b4>
   12078:	str	r2, [sp, #24]
   1207a:	b.n	11f9a <_vfiprintf_r+0xea>
   1207c:	mov	r0, fp
   1207e:	bl	10d60 <_localeconv_r>
   12082:	ldr	r3, [r0, #4]
   12084:	str	r3, [sp, #52]	; 0x34
   12086:	mov	r0, r3
   12088:	bl	e400 <strlen>
   1208c:	str	r0, [sp, #56]	; 0x38
   1208e:	mov	r5, r0
   12090:	mov	r0, fp
   12092:	bl	10d60 <_localeconv_r>
   12096:	ldr	r3, [r0, #8]
   12098:	str	r3, [sp, #44]	; 0x2c
   1209a:	cmp	r5, #0
   1209c:	bne.w	12a4c <_vfiprintf_r+0xb9c>
   120a0:	ldrb.w	r1, [r8]
   120a4:	b.n	11f96 <_vfiprintf_r+0xe6>
   120a6:	ldrb.w	r1, [r8]
   120aa:	orr.w	r6, r6, #32
   120ae:	b.n	11f96 <_vfiprintf_r+0xe6>
   120b0:	orr.w	r6, r6, #16
   120b4:	lsls	r4, r6, #26
   120b6:	bpl.w	123d6 <_vfiprintf_r+0x526>
   120ba:	ldr	r3, [sp, #28]
   120bc:	adds	r3, #7
   120be:	bic.w	r3, r3, #7
   120c2:	mov	r2, r3
   120c4:	ldr	r1, [r3, #4]
   120c6:	ldr.w	r3, [r2], #8
   120ca:	str	r2, [sp, #28]
   120cc:	mov	r2, r1
   120ce:	cmp	r1, #0
   120d0:	blt.w	129b4 <_vfiprintf_r+0xb04>
   120d4:	adds	r1, r7, #1
   120d6:	beq.w	12c1e <_vfiprintf_r+0xd6e>
   120da:	bic.w	r1, r6, #128	; 0x80
   120de:	str	r1, [sp, #12]
   120e0:	orrs.w	r1, r3, r2
   120e4:	beq.w	12966 <_vfiprintf_r+0xab6>
   120e8:	cmp	r3, #10
   120ea:	sbcs.w	r1, r2, #0
   120ee:	bcs.w	12b74 <_vfiprintf_r+0xcc4>
   120f2:	adds	r3, #48	; 0x30
   120f4:	strb.w	r3, [sp, #271]	; 0x10f
   120f8:	ldr	r6, [sp, #12]
   120fa:	movs	r3, #1
   120fc:	str	r3, [sp, #16]
   120fe:	addw	r4, sp, #271	; 0x10f
   12102:	ldr	r3, [sp, #16]
   12104:	cmp	r3, r7
   12106:	it	lt
   12108:	movlt	r3, r7
   1210a:	str	r3, [sp, #12]
   1210c:	movs	r3, #0
   1210e:	str	r3, [sp, #32]
   12110:	ldrb.w	r3, [sp, #67]	; 0x43
   12114:	cmp	r3, #0
   12116:	beq.w	122b0 <_vfiprintf_r+0x400>
   1211a:	ldr	r3, [sp, #12]
   1211c:	adds	r3, #1
   1211e:	str	r3, [sp, #12]
   12120:	b.n	122b0 <_vfiprintf_r+0x400>
   12122:	vmov	r1, s16
   12126:	mov	r0, fp
   12128:	vmov	r5, s16
   1212c:	bl	131b0 <__swsetup_r>
   12130:	cmp	r0, #0
   12132:	bne.w	12dda <_vfiprintf_r+0xf2a>
   12136:	ldrh	r2, [r5, #12]
   12138:	and.w	r3, r2, #26
   1213c:	cmp	r3, #10
   1213e:	bne.w	11f2e <_vfiprintf_r+0x7e>
   12142:	vmov	r1, s16
   12146:	ldrsh.w	r3, [r1, #14]
   1214a:	cmp	r3, #0
   1214c:	blt.w	11f2e <_vfiprintf_r+0x7e>
   12150:	ldr	r3, [r1, #100]	; 0x64
   12152:	lsls	r3, r3, #31
   12154:	bmi.n	1215c <_vfiprintf_r+0x2ac>
   12156:	lsls	r7, r2, #22
   12158:	bpl.w	12d80 <_vfiprintf_r+0xed0>
   1215c:	vmov	r1, s16
   12160:	mov	r3, r4
   12162:	mov	r2, r6
   12164:	mov	r0, fp
   12166:	bl	12e3c <__sbprintf>
   1216a:	str	r0, [sp, #20]
   1216c:	ldr	r0, [sp, #20]
   1216e:	add	sp, #276	; 0x114
   12170:	vpop	{d8}
   12174:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12178:	orr.w	r6, r6, #16
   1217c:	ands.w	r2, r6, #32
   12180:	beq.w	123f0 <_vfiprintf_r+0x540>
   12184:	ldr	r3, [sp, #28]
   12186:	adds	r3, #7
   12188:	bic.w	r3, r3, #7
   1218c:	mov	r1, r3
   1218e:	ldr	r2, [r3, #4]
   12190:	ldr.w	r3, [r1], #8
   12194:	str	r1, [sp, #28]
   12196:	bic.w	r1, r6, #1024	; 0x400
   1219a:	str	r1, [sp, #12]
   1219c:	movs	r1, #0
   1219e:	movs	r0, #0
   121a0:	strb.w	r0, [sp, #67]	; 0x43
   121a4:	adds	r0, r7, #1
   121a6:	beq.w	125ca <_vfiprintf_r+0x71a>
   121aa:	ldr	r0, [sp, #12]
   121ac:	bic.w	r6, r0, #128	; 0x80
   121b0:	orrs.w	r0, r3, r2
   121b4:	bne.w	125c8 <_vfiprintf_r+0x718>
   121b8:	cmp	r7, #0
   121ba:	bne.w	12c2e <_vfiprintf_r+0xd7e>
   121be:	cmp	r1, #0
   121c0:	bne.w	1296e <_vfiprintf_r+0xabe>
   121c4:	ldr	r3, [sp, #12]
   121c6:	ands.w	r3, r3, #1
   121ca:	str	r3, [sp, #16]
   121cc:	beq.w	129f2 <_vfiprintf_r+0xb42>
   121d0:	movs	r3, #48	; 0x30
   121d2:	strb.w	r3, [sp, #271]	; 0x10f
   121d6:	addw	r4, sp, #271	; 0x10f
   121da:	b.n	12102 <_vfiprintf_r+0x252>
   121dc:	movs	r2, #8
   121de:	movs	r1, #0
   121e0:	mov	r0, sl
   121e2:	bl	e064 <memset>
   121e6:	movs	r3, #1
   121e8:	add	r4, r3
   121ea:	b.n	11f48 <_vfiprintf_r+0x98>
   121ec:	.word	0x20001488
   121f0:	subs.w	r6, r4, r8
   121f4:	mov	r5, r0
   121f6:	beq.n	12230 <_vfiprintf_r+0x380>
   121f8:	ldr	r3, [sp, #100]	; 0x64
   121fa:	ldr	r2, [sp, #104]	; 0x68
   121fc:	adds	r3, #1
   121fe:	add	r2, r6
   12200:	cmp	r3, #7
   12202:	strd	r8, r6, [r9]
   12206:	str	r2, [sp, #104]	; 0x68
   12208:	str	r3, [sp, #100]	; 0x64
   1220a:	ble.n	12246 <_vfiprintf_r+0x396>
   1220c:	cmp	r2, #0
   1220e:	beq.w	1295e <_vfiprintf_r+0xaae>
   12212:	vmov	r1, s16
   12216:	add	r2, sp, #96	; 0x60
   12218:	mov	r0, fp
   1221a:	bl	11e38 <__sprint_r.part.0>
   1221e:	cbnz	r0, 1226a <_vfiprintf_r+0x3ba>
   12220:	add.w	r9, sp, #108	; 0x6c
   12224:	ldr	r3, [sp, #20]
   12226:	add	r3, r6
   12228:	str	r3, [sp, #20]
   1222a:	cmp	r5, #0
   1222c:	bne.w	11f80 <_vfiprintf_r+0xd0>
   12230:	ldr	r3, [sp, #104]	; 0x68
   12232:	cmp	r3, #0
   12234:	bne.w	12dba <_vfiprintf_r+0xf0a>
   12238:	vmov	r3, s16
   1223c:	movs	r2, #0
   1223e:	ldrsh.w	r3, [r3, #12]
   12242:	str	r2, [sp, #100]	; 0x64
   12244:	b.n	12272 <_vfiprintf_r+0x3c2>
   12246:	add.w	r9, r9, #8
   1224a:	b.n	12224 <_vfiprintf_r+0x374>
   1224c:	vmov	r1, s16
   12250:	add	r2, sp, #96	; 0x60
   12252:	mov	r0, fp
   12254:	bl	11e38 <__sprint_r.part.0>
   12258:	cmp	r0, #0
   1225a:	beq.w	123aa <_vfiprintf_r+0x4fa>
   1225e:	ldr	r3, [sp, #32]
   12260:	cbz	r3, 1226a <_vfiprintf_r+0x3ba>
   12262:	ldr	r1, [sp, #32]
   12264:	mov	r0, fp
   12266:	bl	e604 <_free_r>
   1226a:	vmov	r3, s16
   1226e:	ldrsh.w	r3, [r3, #12]
   12272:	vmov	r2, s16
   12276:	ldr	r2, [r2, #100]	; 0x64
   12278:	tst.w	r2, #1
   1227c:	uxth	r2, r3
   1227e:	beq.w	123c2 <_vfiprintf_r+0x512>
   12282:	lsls	r0, r2, #25
   12284:	bmi.w	12dec <_vfiprintf_r+0xf3c>
   12288:	ldr	r0, [sp, #20]
   1228a:	add	sp, #276	; 0x114
   1228c:	vpop	{d8}
   12290:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12294:	cmp	r1, #0
   12296:	beq.n	12230 <_vfiprintf_r+0x380>
   12298:	movs	r3, #0
   1229a:	strb.w	r3, [sp, #67]	; 0x43
   1229e:	movs	r3, #1
   122a0:	strd	r3, r3, [sp, #12]
   122a4:	strb.w	r1, [sp, #172]	; 0xac
   122a8:	add	r4, sp, #172	; 0xac
   122aa:	movs	r3, #0
   122ac:	str	r3, [sp, #32]
   122ae:	mov	r7, r3
   122b0:	ands.w	r3, r6, #2
   122b4:	str	r3, [sp, #36]	; 0x24
   122b6:	beq.n	122be <_vfiprintf_r+0x40e>
   122b8:	ldr	r3, [sp, #12]
   122ba:	adds	r3, #2
   122bc:	str	r3, [sp, #12]
   122be:	ands.w	r3, r6, #132	; 0x84
   122c2:	str	r3, [sp, #40]	; 0x28
   122c4:	bne.n	122d2 <_vfiprintf_r+0x422>
   122c6:	ldr	r3, [sp, #24]
   122c8:	ldr	r2, [sp, #12]
   122ca:	subs	r5, r3, r2
   122cc:	cmp	r5, #0
   122ce:	bgt.w	127c8 <_vfiprintf_r+0x918>
   122d2:	ldrd	r0, r3, [sp, #100]	; 0x64
   122d6:	adds	r1, r0, #1
   122d8:	ldrb.w	r2, [sp, #67]	; 0x43
   122dc:	cbz	r2, 12300 <_vfiprintf_r+0x450>
   122de:	movs	r2, #1
   122e0:	adds	r3, #1
   122e2:	str.w	r2, [r9, #4]
   122e6:	cmp	r1, #7
   122e8:	add.w	r2, sp, #67	; 0x43
   122ec:	strd	r1, r3, [sp, #100]	; 0x64
   122f0:	str.w	r2, [r9]
   122f4:	bgt.w	1278c <_vfiprintf_r+0x8dc>
   122f8:	mov	r0, r1
   122fa:	add.w	r9, r9, #8
   122fe:	adds	r1, #1
   12300:	ldr	r2, [sp, #36]	; 0x24
   12302:	cbz	r2, 1233e <_vfiprintf_r+0x48e>
   12304:	add	r2, sp, #68	; 0x44
   12306:	adds	r3, #2
   12308:	str.w	r2, [r9]
   1230c:	cmp	r1, #7
   1230e:	mov.w	r2, #2
   12312:	strd	r1, r3, [sp, #100]	; 0x64
   12316:	str.w	r2, [r9, #4]
   1231a:	ble.w	127be <_vfiprintf_r+0x90e>
   1231e:	cmp	r3, #0
   12320:	beq.w	129aa <_vfiprintf_r+0xafa>
   12324:	vmov	r1, s16
   12328:	add	r2, sp, #96	; 0x60
   1232a:	mov	r0, fp
   1232c:	bl	11e38 <__sprint_r.part.0>
   12330:	cmp	r0, #0
   12332:	bne.n	1225e <_vfiprintf_r+0x3ae>
   12334:	ldrd	r0, r3, [sp, #100]	; 0x64
   12338:	add.w	r9, sp, #108	; 0x6c
   1233c:	adds	r1, r0, #1
   1233e:	ldr	r2, [sp, #40]	; 0x28
   12340:	cmp	r2, #128	; 0x80
   12342:	beq.w	1264e <_vfiprintf_r+0x79e>
   12346:	ldr	r2, [sp, #16]
   12348:	subs	r5, r7, r2
   1234a:	cmp	r5, #0
   1234c:	bgt.w	126fe <_vfiprintf_r+0x84e>
   12350:	ldr	r2, [sp, #16]
   12352:	str.w	r4, [r9]
   12356:	add	r3, r2
   12358:	cmp	r1, #7
   1235a:	strd	r1, r3, [sp, #100]	; 0x64
   1235e:	str.w	r2, [r9, #4]
   12362:	ble.w	12642 <_vfiprintf_r+0x792>
   12366:	cmp	r3, #0
   12368:	beq.w	12856 <_vfiprintf_r+0x9a6>
   1236c:	vmov	r1, s16
   12370:	add	r2, sp, #96	; 0x60
   12372:	mov	r0, fp
   12374:	bl	11e38 <__sprint_r.part.0>
   12378:	cmp	r0, #0
   1237a:	bne.w	1225e <_vfiprintf_r+0x3ae>
   1237e:	ldr	r3, [sp, #104]	; 0x68
   12380:	add.w	r9, sp, #108	; 0x6c
   12384:	lsls	r5, r6, #29
   12386:	bpl.n	12394 <_vfiprintf_r+0x4e4>
   12388:	ldr	r2, [sp, #24]
   1238a:	ldr	r1, [sp, #12]
   1238c:	subs	r4, r2, r1
   1238e:	cmp	r4, #0
   12390:	bgt.w	1286a <_vfiprintf_r+0x9ba>
   12394:	ldrd	r2, r1, [sp, #20]
   12398:	ldr	r0, [sp, #12]
   1239a:	cmp	r1, r0
   1239c:	ite	ge
   1239e:	addge	r2, r2, r1
   123a0:	addlt	r2, r2, r0
   123a2:	str	r2, [sp, #20]
   123a4:	cmp	r3, #0
   123a6:	bne.w	1224c <_vfiprintf_r+0x39c>
   123aa:	ldr	r1, [sp, #32]
   123ac:	movs	r3, #0
   123ae:	str	r3, [sp, #100]	; 0x64
   123b0:	cmp	r1, #0
   123b2:	beq.w	12648 <_vfiprintf_r+0x798>
   123b6:	mov	r0, fp
   123b8:	bl	e604 <_free_r>
   123bc:	add.w	r9, sp, #108	; 0x6c
   123c0:	b.n	11f46 <_vfiprintf_r+0x96>
   123c2:	lsls	r4, r3, #22
   123c4:	bmi.w	12282 <_vfiprintf_r+0x3d2>
   123c8:	vmov	r4, s16
   123cc:	ldr	r0, [r4, #88]	; 0x58
   123ce:	bl	e330 <__retarget_lock_release_recursive>
   123d2:	ldrh	r2, [r4, #12]
   123d4:	b.n	12282 <_vfiprintf_r+0x3d2>
   123d6:	lsls	r0, r6, #27
   123d8:	ldr	r2, [sp, #28]
   123da:	bmi.w	12a1c <_vfiprintf_r+0xb6c>
   123de:	lsls	r1, r6, #25
   123e0:	bpl.w	12a16 <_vfiprintf_r+0xb66>
   123e4:	ldrsh.w	r3, [r2], #4
   123e8:	str	r2, [sp, #28]
   123ea:	asrs	r2, r3, #31
   123ec:	mov	r1, r2
   123ee:	b.n	120ce <_vfiprintf_r+0x21e>
   123f0:	ands.w	r3, r6, #16
   123f4:	ldr	r1, [sp, #28]
   123f6:	bne.w	12a0c <_vfiprintf_r+0xb5c>
   123fa:	ands.w	r0, r6, #64	; 0x40
   123fe:	beq.w	12a04 <_vfiprintf_r+0xb54>
   12402:	mov	r2, r3
   12404:	ldr.w	r3, [r1], #4
   12408:	str	r1, [sp, #28]
   1240a:	uxth	r3, r3
   1240c:	b.n	12196 <_vfiprintf_r+0x2e6>
   1240e:	ldr	r3, [sp, #28]
   12410:	mov	r2, r3
   12412:	movs	r3, #0
   12414:	strb.w	r3, [sp, #67]	; 0x43
   12418:	mov	r3, r2
   1241a:	ldr.w	r4, [r3], #4
   1241e:	str	r3, [sp, #12]
   12420:	cmp	r4, #0
   12422:	beq.w	12c4a <_vfiprintf_r+0xd9a>
   12426:	cmp	r1, #83	; 0x53
   12428:	beq.w	12af6 <_vfiprintf_r+0xc46>
   1242c:	ands.w	r5, r6, #16
   12430:	bne.w	12af6 <_vfiprintf_r+0xc46>
   12434:	adds	r3, r7, #1
   12436:	beq.w	12da0 <_vfiprintf_r+0xef0>
   1243a:	mov	r2, r7
   1243c:	mov	r1, r5
   1243e:	mov	r0, r4
   12440:	bl	e340 <memchr>
   12444:	str	r0, [sp, #32]
   12446:	cmp	r0, #0
   12448:	beq.w	12d8a <_vfiprintf_r+0xeda>
   1244c:	subs	r3, r0, r4
   1244e:	ldr	r2, [sp, #12]
   12450:	str	r3, [sp, #16]
   12452:	bic.w	r3, r3, r3, asr #31
   12456:	mov	r7, r5
   12458:	str	r2, [sp, #28]
   1245a:	str	r3, [sp, #12]
   1245c:	str	r5, [sp, #32]
   1245e:	b.n	12110 <_vfiprintf_r+0x260>
   12460:	cmp	r1, #67	; 0x43
   12462:	beq.n	1246a <_vfiprintf_r+0x5ba>
   12464:	lsls	r5, r6, #27
   12466:	bpl.w	12ac4 <_vfiprintf_r+0xc14>
   1246a:	ldr	r5, [sp, #28]
   1246c:	movs	r2, #8
   1246e:	movs	r1, #0
   12470:	add	r0, sp, #88	; 0x58
   12472:	add	r4, sp, #172	; 0xac
   12474:	bl	e064 <memset>
   12478:	add	r3, sp, #88	; 0x58
   1247a:	ldr.w	r2, [r5], #4
   1247e:	mov	r1, r4
   12480:	mov	r0, fp
   12482:	bl	11cac <_wcrtomb_r>
   12486:	mov	r3, r0
   12488:	adds	r3, #1
   1248a:	str	r0, [sp, #16]
   1248c:	beq.w	12df6 <_vfiprintf_r+0xf46>
   12490:	ldr	r3, [sp, #16]
   12492:	str	r5, [sp, #28]
   12494:	bic.w	r3, r3, r3, asr #31
   12498:	str	r3, [sp, #12]
   1249a:	movs	r3, #0
   1249c:	strb.w	r3, [sp, #67]	; 0x43
   124a0:	b.n	122aa <_vfiprintf_r+0x3fa>
   124a2:	ldr	r3, [sp, #28]
   124a4:	ldr.w	r2, [r3], #4
   124a8:	str	r2, [sp, #24]
   124aa:	cmp	r2, #0
   124ac:	bge.w	129e8 <_vfiprintf_r+0xb38>
   124b0:	ldr	r2, [sp, #24]
   124b2:	negs	r2, r2
   124b4:	strd	r2, r3, [sp, #24]
   124b8:	ldrb.w	r1, [r8]
   124bc:	orr.w	r6, r6, #4
   124c0:	b.n	11f96 <_vfiprintf_r+0xe6>
   124c2:	ldrb.w	r1, [r8]
   124c6:	strb.w	r4, [sp, #67]	; 0x43
   124ca:	b.n	11f96 <_vfiprintf_r+0xe6>
   124cc:	ldrb.w	r1, [r8]
   124d0:	orr.w	r6, r6, #128	; 0x80
   124d4:	b.n	11f96 <_vfiprintf_r+0xe6>
   124d6:	mov	r2, r8
   124d8:	ldrb.w	r1, [r2], #1
   124dc:	cmp	r1, #42	; 0x2a
   124de:	beq.w	12e0e <_vfiprintf_r+0xf5e>
   124e2:	sub.w	r3, r1, #48	; 0x30
   124e6:	cmp	r3, #9
   124e8:	mov	r8, r2
   124ea:	mov.w	r7, #0
   124ee:	bhi.w	11f9a <_vfiprintf_r+0xea>
   124f2:	ldrb.w	r1, [r8], #1
   124f6:	add.w	r7, r7, r7, lsl #2
   124fa:	add.w	r7, r3, r7, lsl #1
   124fe:	sub.w	r3, r1, #48	; 0x30
   12502:	cmp	r3, #9
   12504:	bls.n	124f2 <_vfiprintf_r+0x642>
   12506:	b.n	11f9a <_vfiprintf_r+0xea>
   12508:	ldrb.w	r1, [r8]
   1250c:	orr.w	r6, r6, #1
   12510:	b.n	11f96 <_vfiprintf_r+0xe6>
   12512:	ldrb.w	r3, [sp, #67]	; 0x43
   12516:	cmp	r3, #0
   12518:	bne.w	120a0 <_vfiprintf_r+0x1f0>
   1251c:	movs	r3, #32
   1251e:	ldrb.w	r1, [r8]
   12522:	strb.w	r3, [sp, #67]	; 0x43
   12526:	b.n	11f96 <_vfiprintf_r+0xe6>
   12528:	ldrb.w	r1, [r8]
   1252c:	cmp	r1, #108	; 0x6c
   1252e:	ittte	eq
   12530:	ldrbeq.w	r1, [r8, #1]
   12534:	orreq.w	r6, r6, #32
   12538:	addeq.w	r8, r8, #1
   1253c:	orrne.w	r6, r6, #16
   12540:	b.n	11f96 <_vfiprintf_r+0xe6>
   12542:	ldrb.w	r1, [r8]
   12546:	cmp	r1, #104	; 0x68
   12548:	ittte	eq
   1254a:	ldrbeq.w	r1, [r8, #1]
   1254e:	orreq.w	r6, r6, #512	; 0x200
   12552:	addeq.w	r8, r8, #1
   12556:	orrne.w	r6, r6, #64	; 0x40
   1255a:	b.n	11f96 <_vfiprintf_r+0xe6>
   1255c:	orr.w	r3, r6, #16
   12560:	str	r3, [sp, #12]
   12562:	ldr	r3, [sp, #12]
   12564:	ands.w	r2, r3, #32
   12568:	beq.w	12978 <_vfiprintf_r+0xac8>
   1256c:	ldr	r3, [sp, #28]
   1256e:	adds	r3, #7
   12570:	bic.w	r3, r3, #7
   12574:	mov	r1, r3
   12576:	ldr	r2, [r3, #4]
   12578:	ldr.w	r3, [r1], #8
   1257c:	str	r1, [sp, #28]
   1257e:	movs	r1, #1
   12580:	b.n	1219e <_vfiprintf_r+0x2ee>
   12582:	ldr	r2, [sp, #28]
   12584:	orr.w	r3, r6, #2
   12588:	str	r3, [sp, #12]
   1258a:	ldr.w	r3, [r2], #4
   1258e:	str	r2, [sp, #28]
   12590:	movw	r2, #30768	; 0x7830
   12594:	strh.w	r2, [sp, #68]	; 0x44
   12598:	ldr	r2, [pc, #736]	; (1287c <_vfiprintf_r+0x9cc>)
   1259a:	str	r2, [sp, #48]	; 0x30
   1259c:	movs	r1, #2
   1259e:	movs	r2, #0
   125a0:	b.n	1219e <_vfiprintf_r+0x2ee>
   125a2:	lsls	r7, r6, #26
   125a4:	bmi.w	12a38 <_vfiprintf_r+0xb88>
   125a8:	lsls	r5, r6, #27
   125aa:	bmi.w	12c3a <_vfiprintf_r+0xd8a>
   125ae:	lsls	r4, r6, #25
   125b0:	bmi.w	12d5e <_vfiprintf_r+0xeae>
   125b4:	lsls	r0, r6, #22
   125b6:	bpl.w	12c3a <_vfiprintf_r+0xd8a>
   125ba:	ldr	r3, [sp, #28]
   125bc:	ldr	r1, [sp, #20]
   125be:	ldr.w	r2, [r3], #4
   125c2:	str	r3, [sp, #28]
   125c4:	strb	r1, [r2, #0]
   125c6:	b.n	11f46 <_vfiprintf_r+0x96>
   125c8:	str	r6, [sp, #12]
   125ca:	cmp	r1, #1
   125cc:	beq.w	120e8 <_vfiprintf_r+0x238>
   125d0:	cmp	r1, #2
   125d2:	add	r4, sp, #272	; 0x110
   125d4:	bne.n	125fa <_vfiprintf_r+0x74a>
   125d6:	ldr	r0, [sp, #48]	; 0x30
   125d8:	and.w	r1, r3, #15
   125dc:	lsrs	r3, r3, #4
   125de:	ldrb	r1, [r0, r1]
   125e0:	strb.w	r1, [r4, #-1]!
   125e4:	orr.w	r3, r3, r2, lsl #28
   125e8:	lsrs	r2, r2, #4
   125ea:	orrs.w	r1, r3, r2
   125ee:	bne.n	125d8 <_vfiprintf_r+0x728>
   125f0:	ldr	r6, [sp, #12]
   125f2:	add	r3, sp, #272	; 0x110
   125f4:	subs	r3, r3, r4
   125f6:	str	r3, [sp, #16]
   125f8:	b.n	12102 <_vfiprintf_r+0x252>
   125fa:	and.w	r1, r3, #7
   125fe:	lsrs	r3, r3, #3
   12600:	orr.w	r3, r3, r2, lsl #29
   12604:	lsrs	r2, r2, #3
   12606:	adds	r1, #48	; 0x30
   12608:	orrs.w	r5, r3, r2
   1260c:	mov	r0, r4
   1260e:	strb.w	r1, [r4, #-1]!
   12612:	bne.n	125fa <_vfiprintf_r+0x74a>
   12614:	ldr	r6, [sp, #12]
   12616:	lsls	r3, r6, #31
   12618:	bpl.n	125f2 <_vfiprintf_r+0x742>
   1261a:	cmp	r1, #48	; 0x30
   1261c:	beq.n	125f0 <_vfiprintf_r+0x740>
   1261e:	movs	r3, #48	; 0x30
   12620:	subs	r0, #2
   12622:	strb.w	r3, [r4, #-1]
   12626:	add	r3, sp, #272	; 0x110
   12628:	subs	r3, r3, r0
   1262a:	ldr	r6, [sp, #12]
   1262c:	str	r3, [sp, #16]
   1262e:	mov	r4, r0
   12630:	b.n	12102 <_vfiprintf_r+0x252>
   12632:	ldr	r3, [sp, #16]
   12634:	str	r4, [sp, #108]	; 0x6c
   12636:	movs	r2, #1
   12638:	str	r3, [sp, #112]	; 0x70
   1263a:	str	r3, [sp, #104]	; 0x68
   1263c:	str	r2, [sp, #100]	; 0x64
   1263e:	add.w	r9, sp, #108	; 0x6c
   12642:	add.w	r9, r9, #8
   12646:	b.n	12384 <_vfiprintf_r+0x4d4>
   12648:	add.w	r9, sp, #108	; 0x6c
   1264c:	b.n	11f46 <_vfiprintf_r+0x96>
   1264e:	ldr	r2, [sp, #24]
   12650:	ldr	r5, [sp, #12]
   12652:	subs	r5, r2, r5
   12654:	cmp	r5, #0
   12656:	ble.w	12346 <_vfiprintf_r+0x496>
   1265a:	cmp	r5, #16
   1265c:	ble.w	12dd6 <_vfiprintf_r+0xf26>
   12660:	str	r4, [sp, #36]	; 0x24
   12662:	vmov	r4, s16
   12666:	b.n	12678 <_vfiprintf_r+0x7c8>
   12668:	add.w	ip, r0, #2
   1266c:	add.w	r9, r9, #8
   12670:	mov	r0, r2
   12672:	subs	r5, #16
   12674:	cmp	r5, #16
   12676:	ble.n	126b6 <_vfiprintf_r+0x806>
   12678:	ldr	r1, [pc, #516]	; (12880 <_vfiprintf_r+0x9d0>)
   1267a:	str.w	r1, [r9]
   1267e:	adds	r2, r0, #1
   12680:	adds	r3, #16
   12682:	movs	r1, #16
   12684:	cmp	r2, #7
   12686:	strd	r2, r3, [sp, #100]	; 0x64
   1268a:	str.w	r1, [r9, #4]
   1268e:	ble.n	12668 <_vfiprintf_r+0x7b8>
   12690:	add	r2, sp, #96	; 0x60
   12692:	cmp	r3, #0
   12694:	beq.n	12780 <_vfiprintf_r+0x8d0>
   12696:	mov	r1, r4
   12698:	mov	r0, fp
   1269a:	add.w	r9, sp, #108	; 0x6c
   1269e:	bl	11e38 <__sprint_r.part.0>
   126a2:	cmp	r0, #0
   126a4:	bne.w	1225e <_vfiprintf_r+0x3ae>
   126a8:	ldrd	r0, r3, [sp, #100]	; 0x64
   126ac:	subs	r5, #16
   126ae:	cmp	r5, #16
   126b0:	add.w	ip, r0, #1
   126b4:	bgt.n	12678 <_vfiprintf_r+0x7c8>
   126b6:	ldr	r4, [sp, #36]	; 0x24
   126b8:	ldr	r2, [pc, #452]	; (12880 <_vfiprintf_r+0x9d0>)
   126ba:	str.w	r5, [r9, #4]
   126be:	add	r3, r5
   126c0:	cmp.w	ip, #7
   126c4:	strd	ip, r3, [sp, #100]	; 0x64
   126c8:	str.w	r2, [r9]
   126cc:	ble.w	129f8 <_vfiprintf_r+0xb48>
   126d0:	cmp	r3, #0
   126d2:	beq.w	12d14 <_vfiprintf_r+0xe64>
   126d6:	vmov	r1, s16
   126da:	add	r2, sp, #96	; 0x60
   126dc:	mov	r0, fp
   126de:	bl	11e38 <__sprint_r.part.0>
   126e2:	cmp	r0, #0
   126e4:	bne.w	1225e <_vfiprintf_r+0x3ae>
   126e8:	ldr	r2, [sp, #16]
   126ea:	ldrd	r0, r3, [sp, #100]	; 0x64
   126ee:	subs	r5, r7, r2
   126f0:	cmp	r5, #0
   126f2:	add.w	r1, r0, #1
   126f6:	add.w	r9, sp, #108	; 0x6c
   126fa:	ble.w	12350 <_vfiprintf_r+0x4a0>
   126fe:	cmp	r5, #16
   12700:	ble.n	12756 <_vfiprintf_r+0x8a6>
   12702:	str	r4, [sp, #36]	; 0x24
   12704:	movs	r7, #16
   12706:	vmov	r4, s16
   1270a:	b.n	1271c <_vfiprintf_r+0x86c>
   1270c:	add.w	ip, r0, #2
   12710:	add.w	r9, r9, #8
   12714:	mov	r0, r2
   12716:	subs	r5, #16
   12718:	cmp	r5, #16
   1271a:	ble.n	12752 <_vfiprintf_r+0x8a2>
   1271c:	adds	r2, r0, #1
   1271e:	ldr	r1, [pc, #352]	; (12880 <_vfiprintf_r+0x9d0>)
   12720:	adds	r3, #16
   12722:	cmp	r2, #7
   12724:	strd	r1, r7, [r9]
   12728:	strd	r2, r3, [sp, #100]	; 0x64
   1272c:	ble.n	1270c <_vfiprintf_r+0x85c>
   1272e:	add	r2, sp, #96	; 0x60
   12730:	cbz	r3, 12774 <_vfiprintf_r+0x8c4>
   12732:	mov	r1, r4
   12734:	mov	r0, fp
   12736:	add.w	r9, sp, #108	; 0x6c
   1273a:	bl	11e38 <__sprint_r.part.0>
   1273e:	cmp	r0, #0
   12740:	bne.w	1225e <_vfiprintf_r+0x3ae>
   12744:	ldrd	r0, r3, [sp, #100]	; 0x64
   12748:	subs	r5, #16
   1274a:	cmp	r5, #16
   1274c:	add.w	ip, r0, #1
   12750:	bgt.n	1271c <_vfiprintf_r+0x86c>
   12752:	ldr	r4, [sp, #36]	; 0x24
   12754:	mov	r1, ip
   12756:	ldr	r2, [pc, #296]	; (12880 <_vfiprintf_r+0x9d0>)
   12758:	str.w	r5, [r9, #4]
   1275c:	add	r3, r5
   1275e:	cmp	r1, #7
   12760:	strd	r1, r3, [sp, #100]	; 0x64
   12764:	str.w	r2, [r9]
   12768:	bgt.w	1293a <_vfiprintf_r+0xa8a>
   1276c:	add.w	r9, r9, #8
   12770:	adds	r1, #1
   12772:	b.n	12350 <_vfiprintf_r+0x4a0>
   12774:	mov.w	ip, #1
   12778:	mov	r0, r3
   1277a:	add.w	r9, sp, #108	; 0x6c
   1277e:	b.n	12716 <_vfiprintf_r+0x866>
   12780:	mov.w	ip, #1
   12784:	mov	r0, r3
   12786:	add.w	r9, sp, #108	; 0x6c
   1278a:	b.n	12672 <_vfiprintf_r+0x7c2>
   1278c:	cmp	r3, #0
   1278e:	beq.w	1299a <_vfiprintf_r+0xaea>
   12792:	vmov	r1, s16
   12796:	add	r2, sp, #96	; 0x60
   12798:	mov	r0, fp
   1279a:	bl	11e38 <__sprint_r.part.0>
   1279e:	cmp	r0, #0
   127a0:	bne.w	1225e <_vfiprintf_r+0x3ae>
   127a4:	ldrd	r0, r3, [sp, #100]	; 0x64
   127a8:	add.w	r9, sp, #108	; 0x6c
   127ac:	adds	r1, r0, #1
   127ae:	b.n	12300 <_vfiprintf_r+0x450>
   127b0:	movs	r3, #2
   127b2:	add	r2, sp, #68	; 0x44
   127b4:	str	r3, [sp, #112]	; 0x70
   127b6:	str	r2, [sp, #108]	; 0x6c
   127b8:	movs	r1, #1
   127ba:	add.w	r9, sp, #108	; 0x6c
   127be:	mov	r0, r1
   127c0:	add.w	r9, r9, #8
   127c4:	adds	r1, r0, #1
   127c6:	b.n	1233e <_vfiprintf_r+0x48e>
   127c8:	cmp	r5, #16
   127ca:	ble.w	12d98 <_vfiprintf_r+0xee8>
   127ce:	ldrd	r1, r3, [sp, #100]	; 0x64
   127d2:	str	r4, [sp, #60]	; 0x3c
   127d4:	mov	r0, r1
   127d6:	vmov	r4, s16
   127da:	b.n	127ec <_vfiprintf_r+0x93c>
   127dc:	add.w	ip, r0, #2
   127e0:	add.w	r9, r9, #8
   127e4:	mov	r0, r2
   127e6:	subs	r5, #16
   127e8:	cmp	r5, #16
   127ea:	ble.n	12828 <_vfiprintf_r+0x978>
   127ec:	ldr	r1, [pc, #148]	; (12884 <_vfiprintf_r+0x9d4>)
   127ee:	str.w	r1, [r9]
   127f2:	adds	r2, r0, #1
   127f4:	adds	r3, #16
   127f6:	movs	r1, #16
   127f8:	cmp	r2, #7
   127fa:	strd	r2, r3, [sp, #100]	; 0x64
   127fe:	str.w	r1, [r9, #4]
   12802:	ble.n	127dc <_vfiprintf_r+0x92c>
   12804:	add	r2, sp, #96	; 0x60
   12806:	cbz	r3, 1284a <_vfiprintf_r+0x99a>
   12808:	mov	r1, r4
   1280a:	mov	r0, fp
   1280c:	add.w	r9, sp, #108	; 0x6c
   12810:	bl	11e38 <__sprint_r.part.0>
   12814:	cmp	r0, #0
   12816:	bne.w	1225e <_vfiprintf_r+0x3ae>
   1281a:	ldrd	r0, r3, [sp, #100]	; 0x64
   1281e:	subs	r5, #16
   12820:	cmp	r5, #16
   12822:	add.w	ip, r0, #1
   12826:	bgt.n	127ec <_vfiprintf_r+0x93c>
   12828:	ldr	r4, [sp, #60]	; 0x3c
   1282a:	mov	r0, ip
   1282c:	ldr	r2, [pc, #84]	; (12884 <_vfiprintf_r+0x9d4>)
   1282e:	str.w	r5, [r9, #4]
   12832:	add	r3, r5
   12834:	cmp	r0, #7
   12836:	strd	r0, r3, [sp, #100]	; 0x64
   1283a:	str.w	r2, [r9]
   1283e:	bgt.w	129c4 <_vfiprintf_r+0xb14>
   12842:	add.w	r9, r9, #8
   12846:	adds	r1, r0, #1
   12848:	b.n	122d8 <_vfiprintf_r+0x428>
   1284a:	mov	r0, r3
   1284c:	mov.w	ip, #1
   12850:	add.w	r9, sp, #108	; 0x6c
   12854:	b.n	127e6 <_vfiprintf_r+0x936>
   12856:	lsls	r6, r6, #29
   12858:	str	r3, [sp, #100]	; 0x64
   1285a:	bpl.n	12904 <_vfiprintf_r+0xa54>
   1285c:	ldr	r2, [sp, #24]
   1285e:	ldr	r1, [sp, #12]
   12860:	subs	r4, r2, r1
   12862:	cmp	r4, #0
   12864:	ble.n	12904 <_vfiprintf_r+0xa54>
   12866:	add.w	r9, sp, #108	; 0x6c
   1286a:	cmp	r4, #16
   1286c:	ble.w	12dd0 <_vfiprintf_r+0xf20>
   12870:	ldr	r1, [sp, #100]	; 0x64
   12872:	vmov	r6, s16
   12876:	movs	r5, #16
   12878:	b.n	12896 <_vfiprintf_r+0x9e6>
   1287a:	nop
   1287c:	.word	0x20000e68
   12880:	.word	0x20001318
   12884:	.word	0x20000eac
   12888:	adds	r0, r1, #2
   1288a:	add.w	r9, r9, #8
   1288e:	mov	r1, r2
   12890:	subs	r4, #16
   12892:	cmp	r4, #16
   12894:	ble.n	128cc <_vfiprintf_r+0xa1c>
   12896:	adds	r2, r1, #1
   12898:	ldr	r0, [pc, #716]	; (12b68 <_vfiprintf_r+0xcb8>)
   1289a:	adds	r3, #16
   1289c:	cmp	r2, #7
   1289e:	strd	r0, r5, [r9]
   128a2:	strd	r2, r3, [sp, #100]	; 0x64
   128a6:	ble.n	12888 <_vfiprintf_r+0x9d8>
   128a8:	add	r2, sp, #96	; 0x60
   128aa:	cbz	r3, 128fa <_vfiprintf_r+0xa4a>
   128ac:	mov	r1, r6
   128ae:	mov	r0, fp
   128b0:	bl	11e38 <__sprint_r.part.0>
   128b4:	cmp	r0, #0
   128b6:	bne.w	1225e <_vfiprintf_r+0x3ae>
   128ba:	ldrd	r1, r3, [sp, #100]	; 0x64
   128be:	subs	r4, #16
   128c0:	cmp	r4, #16
   128c2:	add.w	r0, r1, #1
   128c6:	add.w	r9, sp, #108	; 0x6c
   128ca:	bgt.n	12896 <_vfiprintf_r+0x9e6>
   128cc:	ldr	r2, [pc, #664]	; (12b68 <_vfiprintf_r+0xcb8>)
   128ce:	str.w	r4, [r9, #4]
   128d2:	add	r3, r4
   128d4:	cmp	r0, #7
   128d6:	strd	r0, r3, [sp, #100]	; 0x64
   128da:	str.w	r2, [r9]
   128de:	ble.w	12394 <_vfiprintf_r+0x4e4>
   128e2:	cbz	r3, 12904 <_vfiprintf_r+0xa54>
   128e4:	vmov	r1, s16
   128e8:	add	r2, sp, #96	; 0x60
   128ea:	mov	r0, fp
   128ec:	bl	11e38 <__sprint_r.part.0>
   128f0:	cmp	r0, #0
   128f2:	bne.w	1225e <_vfiprintf_r+0x3ae>
   128f6:	ldr	r3, [sp, #104]	; 0x68
   128f8:	b.n	12394 <_vfiprintf_r+0x4e4>
   128fa:	movs	r0, #1
   128fc:	mov	r1, r3
   128fe:	add.w	r9, sp, #108	; 0x6c
   12902:	b.n	12890 <_vfiprintf_r+0x9e0>
   12904:	ldrd	r3, r2, [sp, #20]
   12908:	ldr	r1, [sp, #12]
   1290a:	cmp	r2, r1
   1290c:	ite	ge
   1290e:	addge	r3, r3, r2
   12910:	addlt	r3, r3, r1
   12912:	str	r3, [sp, #20]
   12914:	b.n	123aa <_vfiprintf_r+0x4fa>
   12916:	ldrsh.w	r1, [r2, #12]
   1291a:	lsls	r7, r1, #22
   1291c:	vmov	r3, s16
   12920:	uxth	r2, r1
   12922:	bmi.w	11ef6 <_vfiprintf_r+0x46>
   12926:	vmov	r5, s16
   1292a:	ldr	r0, [r3, #88]	; 0x58
   1292c:	bl	e32c <__retarget_lock_acquire_recursive>
   12930:	ldrsh.w	r1, [r5, #12]
   12934:	uxth	r2, r1
   12936:	b.w	11ef6 <_vfiprintf_r+0x46>
   1293a:	cmp	r3, #0
   1293c:	beq.w	12632 <_vfiprintf_r+0x782>
   12940:	vmov	r1, s16
   12944:	add	r2, sp, #96	; 0x60
   12946:	mov	r0, fp
   12948:	bl	11e38 <__sprint_r.part.0>
   1294c:	cmp	r0, #0
   1294e:	bne.w	1225e <_vfiprintf_r+0x3ae>
   12952:	ldr	r1, [sp, #100]	; 0x64
   12954:	ldr	r3, [sp, #104]	; 0x68
   12956:	adds	r1, #1
   12958:	add.w	r9, sp, #108	; 0x6c
   1295c:	b.n	12350 <_vfiprintf_r+0x4a0>
   1295e:	str	r2, [sp, #100]	; 0x64
   12960:	add.w	r9, sp, #108	; 0x6c
   12964:	b.n	12224 <_vfiprintf_r+0x374>
   12966:	cmp	r7, #0
   12968:	bne.w	120f2 <_vfiprintf_r+0x242>
   1296c:	ldr	r6, [sp, #12]
   1296e:	movs	r7, #0
   12970:	str	r7, [sp, #16]
   12972:	add	r4, sp, #272	; 0x110
   12974:	b.w	12102 <_vfiprintf_r+0x252>
   12978:	ldr	r3, [sp, #12]
   1297a:	ands.w	r3, r3, #16
   1297e:	bne.n	12a2a <_vfiprintf_r+0xb7a>
   12980:	ldr	r2, [sp, #12]
   12982:	ands.w	r0, r2, #64	; 0x40
   12986:	beq.w	12c60 <_vfiprintf_r+0xdb0>
   1298a:	ldr	r1, [sp, #28]
   1298c:	mov	r2, r3
   1298e:	ldr.w	r3, [r1], #4
   12992:	str	r1, [sp, #28]
   12994:	uxth	r3, r3
   12996:	movs	r1, #1
   12998:	b.n	1219e <_vfiprintf_r+0x2ee>
   1299a:	ldr	r2, [sp, #36]	; 0x24
   1299c:	cmp	r2, #0
   1299e:	bne.n	12a6a <_vfiprintf_r+0xbba>
   129a0:	mov	r0, r3
   129a2:	movs	r1, #1
   129a4:	add.w	r9, sp, #108	; 0x6c
   129a8:	b.n	1233e <_vfiprintf_r+0x48e>
   129aa:	movs	r1, #1
   129ac:	mov	r0, r3
   129ae:	add.w	r9, sp, #108	; 0x6c
   129b2:	b.n	1233e <_vfiprintf_r+0x48e>
   129b4:	negs	r3, r3
   129b6:	sbc.w	r2, r2, r2, lsl #1
   129ba:	str	r6, [sp, #12]
   129bc:	movs	r0, #45	; 0x2d
   129be:	movs	r1, #1
   129c0:	b.w	121a0 <_vfiprintf_r+0x2f0>
   129c4:	cmp	r3, #0
   129c6:	beq.w	12ada <_vfiprintf_r+0xc2a>
   129ca:	vmov	r1, s16
   129ce:	add	r2, sp, #96	; 0x60
   129d0:	mov	r0, fp
   129d2:	bl	11e38 <__sprint_r.part.0>
   129d6:	cmp	r0, #0
   129d8:	bne.w	1225e <_vfiprintf_r+0x3ae>
   129dc:	ldrd	r0, r3, [sp, #100]	; 0x64
   129e0:	add.w	r9, sp, #108	; 0x6c
   129e4:	adds	r1, r0, #1
   129e6:	b.n	122d8 <_vfiprintf_r+0x428>
   129e8:	ldrb.w	r1, [r8]
   129ec:	str	r3, [sp, #28]
   129ee:	b.w	11f96 <_vfiprintf_r+0xe6>
   129f2:	add	r4, sp, #272	; 0x110
   129f4:	b.w	12102 <_vfiprintf_r+0x252>
   129f8:	add.w	r9, r9, #8
   129fc:	add.w	r1, ip, #1
   12a00:	mov	r0, ip
   12a02:	b.n	12346 <_vfiprintf_r+0x496>
   12a04:	ands.w	r2, r6, #512	; 0x200
   12a08:	bne.w	12d3a <_vfiprintf_r+0xe8a>
   12a0c:	ldr.w	r3, [r1], #4
   12a10:	str	r1, [sp, #28]
   12a12:	b.w	12196 <_vfiprintf_r+0x2e6>
   12a16:	lsls	r3, r6, #22
   12a18:	bmi.w	12d2c <_vfiprintf_r+0xe7c>
   12a1c:	ldr.w	r3, [r2], #4
   12a20:	str	r2, [sp, #28]
   12a22:	asrs	r2, r3, #31
   12a24:	mov	r1, r2
   12a26:	b.w	120ce <_vfiprintf_r+0x21e>
   12a2a:	ldr	r1, [sp, #28]
   12a2c:	ldr.w	r3, [r1], #4
   12a30:	str	r1, [sp, #28]
   12a32:	movs	r1, #1
   12a34:	b.w	1219e <_vfiprintf_r+0x2ee>
   12a38:	ldr	r3, [sp, #28]
   12a3a:	ldr	r0, [sp, #20]
   12a3c:	ldr.w	r1, [r3], #4
   12a40:	str	r3, [sp, #28]
   12a42:	asrs	r2, r0, #31
   12a44:	strd	r0, r2, [r1]
   12a48:	b.w	11f46 <_vfiprintf_r+0x96>
   12a4c:	ldr	r3, [sp, #44]	; 0x2c
   12a4e:	cmp	r3, #0
   12a50:	beq.w	120a0 <_vfiprintf_r+0x1f0>
   12a54:	ldr	r3, [sp, #44]	; 0x2c
   12a56:	ldrb	r3, [r3, #0]
   12a58:	cmp	r3, #0
   12a5a:	beq.w	120a0 <_vfiprintf_r+0x1f0>
   12a5e:	ldrb.w	r1, [r8]
   12a62:	orr.w	r6, r6, #1024	; 0x400
   12a66:	b.w	11f96 <_vfiprintf_r+0xe6>
   12a6a:	movs	r3, #2
   12a6c:	add	r2, sp, #68	; 0x44
   12a6e:	str	r3, [sp, #112]	; 0x70
   12a70:	str	r2, [sp, #108]	; 0x6c
   12a72:	movs	r0, #1
   12a74:	add.w	r9, sp, #108	; 0x6c
   12a78:	b.n	127c0 <_vfiprintf_r+0x910>
   12a7a:	str	r6, [sp, #12]
   12a7c:	b.n	12562 <_vfiprintf_r+0x6b2>
   12a7e:	ldr	r3, [pc, #236]	; (12b6c <_vfiprintf_r+0xcbc>)
   12a80:	str	r3, [sp, #48]	; 0x30
   12a82:	ands.w	r2, r6, #32
   12a86:	beq.n	12b3c <_vfiprintf_r+0xc8c>
   12a88:	ldr	r3, [sp, #28]
   12a8a:	adds	r3, #7
   12a8c:	bic.w	r3, r3, #7
   12a90:	mov	r0, r3
   12a92:	ldr	r2, [r3, #4]
   12a94:	ldr.w	r3, [r0], #8
   12a98:	str	r0, [sp, #28]
   12a9a:	lsls	r4, r6, #31
   12a9c:	bpl.n	12ab2 <_vfiprintf_r+0xc02>
   12a9e:	orrs.w	r0, r3, r2
   12aa2:	beq.n	12ab2 <_vfiprintf_r+0xc02>
   12aa4:	strb.w	r1, [sp, #69]	; 0x45
   12aa8:	movs	r1, #48	; 0x30
   12aaa:	orr.w	r6, r6, #2
   12aae:	strb.w	r1, [sp, #68]	; 0x44
   12ab2:	bic.w	r1, r6, #1024	; 0x400
   12ab6:	str	r1, [sp, #12]
   12ab8:	movs	r1, #2
   12aba:	b.w	1219e <_vfiprintf_r+0x2ee>
   12abe:	ldr	r3, [pc, #176]	; (12b70 <_vfiprintf_r+0xcc0>)
   12ac0:	str	r3, [sp, #48]	; 0x30
   12ac2:	b.n	12a82 <_vfiprintf_r+0xbd2>
   12ac4:	ldr	r3, [sp, #28]
   12ac6:	movs	r1, #1
   12ac8:	ldr.w	r2, [r3], #4
   12acc:	str	r1, [sp, #12]
   12ace:	strb.w	r2, [sp, #172]	; 0xac
   12ad2:	str	r3, [sp, #28]
   12ad4:	str	r1, [sp, #16]
   12ad6:	add	r4, sp, #172	; 0xac
   12ad8:	b.n	1249a <_vfiprintf_r+0x5ea>
   12ada:	ldrb.w	r2, [sp, #67]	; 0x43
   12ade:	cmp	r2, #0
   12ae0:	bne.w	12d48 <_vfiprintf_r+0xe98>
   12ae4:	ldr	r2, [sp, #36]	; 0x24
   12ae6:	cmp	r2, #0
   12ae8:	bne.w	127b0 <_vfiprintf_r+0x900>
   12aec:	mov	r0, r3
   12aee:	movs	r1, #1
   12af0:	add.w	r9, sp, #108	; 0x6c
   12af4:	b.n	12346 <_vfiprintf_r+0x496>
   12af6:	movs	r1, #0
   12af8:	movs	r2, #8
   12afa:	add	r0, sp, #88	; 0x58
   12afc:	str	r4, [sp, #76]	; 0x4c
   12afe:	bl	e064 <memset>
   12b02:	adds	r1, r7, #1
   12b04:	beq.w	12c80 <_vfiprintf_r+0xdd0>
   12b08:	movs	r5, #0
   12b0a:	str	r4, [sp, #28]
   12b0c:	mov	r4, r5
   12b0e:	b.n	12b2a <_vfiprintf_r+0xc7a>
   12b10:	add	r1, sp, #172	; 0xac
   12b12:	mov	r0, fp
   12b14:	bl	11cac <_wcrtomb_r>
   12b18:	adds	r2, r0, #1
   12b1a:	add	r0, r4
   12b1c:	beq.w	12df6 <_vfiprintf_r+0xf46>
   12b20:	cmp	r0, r7
   12b22:	bgt.n	12b36 <_vfiprintf_r+0xc86>
   12b24:	beq.w	12e08 <_vfiprintf_r+0xf58>
   12b28:	mov	r4, r0
   12b2a:	ldr	r2, [sp, #76]	; 0x4c
   12b2c:	ldr	r2, [r2, r5]
   12b2e:	add	r3, sp, #88	; 0x58
   12b30:	adds	r5, #4
   12b32:	cmp	r2, #0
   12b34:	bne.n	12b10 <_vfiprintf_r+0xc60>
   12b36:	str	r4, [sp, #16]
   12b38:	ldr	r4, [sp, #28]
   12b3a:	b.n	12c9c <_vfiprintf_r+0xdec>
   12b3c:	ands.w	r3, r6, #16
   12b40:	ldr	r0, [sp, #28]
   12b42:	bne.n	12b5e <_vfiprintf_r+0xcae>
   12b44:	ands.w	r4, r6, #64	; 0x40
   12b48:	beq.n	12b56 <_vfiprintf_r+0xca6>
   12b4a:	mov	r2, r3
   12b4c:	ldr.w	r3, [r0], #4
   12b50:	str	r0, [sp, #28]
   12b52:	uxth	r3, r3
   12b54:	b.n	12a9a <_vfiprintf_r+0xbea>
   12b56:	ands.w	r2, r6, #512	; 0x200
   12b5a:	bne.w	12d20 <_vfiprintf_r+0xe70>
   12b5e:	ldr.w	r3, [r0], #4
   12b62:	str	r0, [sp, #28]
   12b64:	b.n	12a9a <_vfiprintf_r+0xbea>
   12b66:	nop
   12b68:	.word	0x20000eac
   12b6c:	.word	0x20000e68
   12b70:	.word	0x20000e7c
   12b74:	ldr	r1, [sp, #12]
   12b76:	str	r7, [sp, #16]
   12b78:	add	r4, sp, #272	; 0x110
   12b7a:	mov	lr, r3
   12b7c:	vmov	s17, fp
   12b80:	and.w	r6, r1, #1024	; 0x400
   12b84:	mov.w	ip, #0
   12b88:	mov	r3, r4
   12b8a:	b.n	12b9a <_vfiprintf_r+0xcea>
   12b8c:	cmp.w	lr, #10
   12b90:	sbcs.w	r2, r2, #0
   12b94:	bcc.n	12c0a <_vfiprintf_r+0xd5a>
   12b96:	mov	lr, r4
   12b98:	mov	r2, r5
   12b9a:	ldr	r1, [pc, #664]	; (12e34 <_vfiprintf_r+0xf84>)
   12b9c:	adds.w	r0, lr, r2
   12ba0:	adc.w	r0, r0, #0
   12ba4:	mov	r7, r1
   12ba6:	umull	r1, r4, r1, r0
   12baa:	bic.w	r1, r4, #3
   12bae:	add.w	r1, r1, r4, lsr #2
   12bb2:	subs	r0, r0, r1
   12bb4:	subs.w	r1, lr, r0
   12bb8:	mov.w	r5, #3435973836	; 0xcccccccc
   12bbc:	sbc.w	r4, r2, #0
   12bc0:	mul.w	r5, r5, r1
   12bc4:	mla	r5, r7, r4, r5
   12bc8:	umull	r4, r1, r1, r7
   12bcc:	add	r5, r1
   12bce:	movs	r7, #5
   12bd0:	and.w	r1, r4, #1
   12bd4:	umull	r1, fp, r1, r7
   12bd8:	adds	r1, r1, r0
   12bda:	lsrs	r4, r4, #1
   12bdc:	adds	r1, #48	; 0x30
   12bde:	strb.w	r1, [r3, #-1]
   12be2:	orr.w	r4, r4, r5, lsl #31
   12be6:	add.w	ip, ip, #1
   12bea:	subs	r3, #1
   12bec:	lsrs	r5, r5, #1
   12bee:	cmp	r6, #0
   12bf0:	beq.n	12b8c <_vfiprintf_r+0xcdc>
   12bf2:	ldr	r1, [sp, #44]	; 0x2c
   12bf4:	ldrb	r1, [r1, #0]
   12bf6:	cmp	r1, ip
   12bf8:	bne.n	12b8c <_vfiprintf_r+0xcdc>
   12bfa:	cmp.w	ip, #255	; 0xff
   12bfe:	beq.n	12b8c <_vfiprintf_r+0xcdc>
   12c00:	cmp.w	lr, #10
   12c04:	sbcs.w	r2, r2, #0
   12c08:	bcs.n	12ce4 <_vfiprintf_r+0xe34>
   12c0a:	mov	r4, r3
   12c0c:	add	r3, sp, #272	; 0x110
   12c0e:	subs	r3, r3, r4
   12c10:	ldr	r7, [sp, #16]
   12c12:	ldr	r6, [sp, #12]
   12c14:	str	r3, [sp, #16]
   12c16:	vmov	fp, s17
   12c1a:	b.w	12102 <_vfiprintf_r+0x252>
   12c1e:	str	r6, [sp, #12]
   12c20:	b.w	120e8 <_vfiprintf_r+0x238>
   12c24:	mov	r0, fp
   12c26:	bl	dcd8 <__sinit>
   12c2a:	b.w	11ee4 <_vfiprintf_r+0x34>
   12c2e:	cmp	r1, #1
   12c30:	str	r6, [sp, #12]
   12c32:	bne.w	125d0 <_vfiprintf_r+0x720>
   12c36:	b.w	120f2 <_vfiprintf_r+0x242>
   12c3a:	ldr	r3, [sp, #28]
   12c3c:	ldr	r1, [sp, #20]
   12c3e:	ldr.w	r2, [r3], #4
   12c42:	str	r1, [r2, #0]
   12c44:	str	r3, [sp, #28]
   12c46:	b.w	11f46 <_vfiprintf_r+0x96>
   12c4a:	cmp	r7, #6
   12c4c:	mov	r3, r7
   12c4e:	ldr	r2, [sp, #12]
   12c50:	ldr	r4, [pc, #484]	; (12e38 <_vfiprintf_r+0xf88>)
   12c52:	str	r2, [sp, #28]
   12c54:	it	cs
   12c56:	movcs	r3, #6
   12c58:	str	r3, [sp, #16]
   12c5a:	str	r3, [sp, #12]
   12c5c:	b.w	122aa <_vfiprintf_r+0x3fa>
   12c60:	ldr	r3, [sp, #12]
   12c62:	ldr	r1, [sp, #28]
   12c64:	ands.w	r2, r3, #512	; 0x200
   12c68:	ite	ne
   12c6a:	ldrne.w	r3, [r1], #4
   12c6e:	ldreq.w	r3, [r1], #4
   12c72:	str	r1, [sp, #28]
   12c74:	itt	ne
   12c76:	movne	r2, r0
   12c78:	uxtbne	r3, r3
   12c7a:	movs	r1, #1
   12c7c:	b.w	1219e <_vfiprintf_r+0x2ee>
   12c80:	add	r3, sp, #88	; 0x58
   12c82:	str	r3, [sp, #0]
   12c84:	movs	r3, #0
   12c86:	mov	r1, r3
   12c88:	add	r2, sp, #76	; 0x4c
   12c8a:	mov	r0, fp
   12c8c:	bl	11cf8 <_wcsrtombs_r>
   12c90:	mov	r3, r0
   12c92:	adds	r3, #1
   12c94:	str	r0, [sp, #16]
   12c96:	beq.w	12df6 <_vfiprintf_r+0xf46>
   12c9a:	str	r4, [sp, #76]	; 0x4c
   12c9c:	ldr	r3, [sp, #16]
   12c9e:	cmp	r3, #0
   12ca0:	beq.n	12d04 <_vfiprintf_r+0xe54>
   12ca2:	cmp	r3, #99	; 0x63
   12ca4:	bgt.n	12d6e <_vfiprintf_r+0xebe>
   12ca6:	movs	r3, #0
   12ca8:	str	r3, [sp, #32]
   12caa:	add	r4, sp, #172	; 0xac
   12cac:	movs	r2, #8
   12cae:	movs	r1, #0
   12cb0:	add	r0, sp, #88	; 0x58
   12cb2:	bl	e064 <memset>
   12cb6:	ldr	r5, [sp, #16]
   12cb8:	add	r3, sp, #88	; 0x58
   12cba:	str	r3, [sp, #0]
   12cbc:	add	r2, sp, #76	; 0x4c
   12cbe:	mov	r3, r5
   12cc0:	mov	r1, r4
   12cc2:	mov	r0, fp
   12cc4:	bl	11cf8 <_wcsrtombs_r>
   12cc8:	cmp	r5, r0
   12cca:	bne.w	12e24 <_vfiprintf_r+0xf74>
   12cce:	ldr	r3, [sp, #12]
   12cd0:	ldr	r2, [sp, #16]
   12cd2:	str	r3, [sp, #28]
   12cd4:	movs	r3, #0
   12cd6:	strb	r3, [r4, r2]
   12cd8:	mov	r7, r3
   12cda:	bic.w	r3, r2, r2, asr #31
   12cde:	str	r3, [sp, #12]
   12ce0:	b.w	12110 <_vfiprintf_r+0x260>
   12ce4:	ldr	r2, [sp, #56]	; 0x38
   12ce6:	ldr	r1, [sp, #52]	; 0x34
   12ce8:	subs	r3, r3, r2
   12cea:	mov	r0, r3
   12cec:	str	r3, [sp, #32]
   12cee:	bl	e194 <strncpy>
   12cf2:	ldr	r1, [sp, #44]	; 0x2c
   12cf4:	ldr	r3, [sp, #32]
   12cf6:	ldrb	r2, [r1, #1]
   12cf8:	cbz	r2, 12cfe <_vfiprintf_r+0xe4e>
   12cfa:	adds	r1, #1
   12cfc:	str	r1, [sp, #44]	; 0x2c
   12cfe:	mov.w	ip, #0
   12d02:	b.n	12b96 <_vfiprintf_r+0xce6>
   12d04:	ldr	r3, [sp, #12]
   12d06:	str	r3, [sp, #28]
   12d08:	ldr	r3, [sp, #16]
   12d0a:	str	r3, [sp, #12]
   12d0c:	mov	r7, r3
   12d0e:	str	r3, [sp, #32]
   12d10:	b.w	12110 <_vfiprintf_r+0x260>
   12d14:	movs	r1, #1
   12d16:	mov	r0, r3
   12d18:	add.w	r9, sp, #108	; 0x6c
   12d1c:	b.w	12346 <_vfiprintf_r+0x496>
   12d20:	ldr.w	r3, [r0], #4
   12d24:	str	r0, [sp, #28]
   12d26:	mov	r2, r4
   12d28:	uxtb	r3, r3
   12d2a:	b.n	12a9a <_vfiprintf_r+0xbea>
   12d2c:	ldrsb.w	r3, [r2], #4
   12d30:	str	r2, [sp, #28]
   12d32:	asrs	r2, r3, #31
   12d34:	mov	r1, r2
   12d36:	b.w	120ce <_vfiprintf_r+0x21e>
   12d3a:	ldr.w	r3, [r1], #4
   12d3e:	str	r1, [sp, #28]
   12d40:	mov	r2, r0
   12d42:	uxtb	r3, r3
   12d44:	b.w	12196 <_vfiprintf_r+0x2e6>
   12d48:	movs	r3, #1
   12d4a:	str	r3, [sp, #112]	; 0x70
   12d4c:	movs	r1, #1
   12d4e:	add.w	r3, sp, #67	; 0x43
   12d52:	str	r3, [sp, #108]	; 0x6c
   12d54:	add.w	r9, sp, #108	; 0x6c
   12d58:	mov	r3, r1
   12d5a:	b.w	122f8 <_vfiprintf_r+0x448>
   12d5e:	ldr	r3, [sp, #28]
   12d60:	ldr	r1, [sp, #20]
   12d62:	ldr.w	r2, [r3], #4
   12d66:	str	r3, [sp, #28]
   12d68:	strh	r1, [r2, #0]
   12d6a:	b.w	11f46 <_vfiprintf_r+0x96>
   12d6e:	adds	r1, r3, #1
   12d70:	mov	r0, fp
   12d72:	bl	d250 <_malloc_r>
   12d76:	mov	r4, r0
   12d78:	cmp	r0, #0
   12d7a:	beq.n	12df6 <_vfiprintf_r+0xf46>
   12d7c:	str	r0, [sp, #32]
   12d7e:	b.n	12cac <_vfiprintf_r+0xdfc>
   12d80:	ldr	r0, [r1, #88]	; 0x58
   12d82:	bl	e330 <__retarget_lock_release_recursive>
   12d86:	b.w	1215c <_vfiprintf_r+0x2ac>
   12d8a:	ldr	r3, [sp, #12]
   12d8c:	str	r3, [sp, #28]
   12d8e:	strd	r7, r7, [sp, #12]
   12d92:	ldr	r7, [sp, #32]
   12d94:	b.w	12110 <_vfiprintf_r+0x260>
   12d98:	ldr	r0, [sp, #100]	; 0x64
   12d9a:	ldr	r3, [sp, #104]	; 0x68
   12d9c:	adds	r0, #1
   12d9e:	b.n	1282c <_vfiprintf_r+0x97c>
   12da0:	ldr	r3, [sp, #12]
   12da2:	str	r3, [sp, #28]
   12da4:	mov	r0, r4
   12da6:	bl	e400 <strlen>
   12daa:	bic.w	r3, r0, r0, asr #31
   12dae:	mov	r7, r5
   12db0:	str	r0, [sp, #16]
   12db2:	str	r3, [sp, #12]
   12db4:	str	r5, [sp, #32]
   12db6:	b.w	12110 <_vfiprintf_r+0x260>
   12dba:	vmov	r1, s16
   12dbe:	add	r2, sp, #96	; 0x60
   12dc0:	mov	r0, fp
   12dc2:	bl	11e38 <__sprint_r.part.0>
   12dc6:	cmp	r0, #0
   12dc8:	beq.w	12238 <_vfiprintf_r+0x388>
   12dcc:	b.w	1226a <_vfiprintf_r+0x3ba>
   12dd0:	ldr	r0, [sp, #100]	; 0x64
   12dd2:	adds	r0, #1
   12dd4:	b.n	128cc <_vfiprintf_r+0xa1c>
   12dd6:	mov	ip, r1
   12dd8:	b.n	126b8 <_vfiprintf_r+0x808>
   12dda:	ldr	r3, [r5, #100]	; 0x64
   12ddc:	lsls	r1, r3, #31
   12dde:	bmi.n	12dec <_vfiprintf_r+0xf3c>
   12de0:	ldrh	r3, [r5, #12]
   12de2:	lsls	r2, r3, #22
   12de4:	bmi.n	12dec <_vfiprintf_r+0xf3c>
   12de6:	ldr	r0, [r5, #88]	; 0x58
   12de8:	bl	e330 <__retarget_lock_release_recursive>
   12dec:	mov.w	r3, #4294967295
   12df0:	str	r3, [sp, #20]
   12df2:	b.w	12288 <_vfiprintf_r+0x3d8>
   12df6:	vmov	r2, s16
   12dfa:	ldrsh.w	r3, [r2, #12]
   12dfe:	orr.w	r3, r3, #64	; 0x40
   12e02:	strh	r3, [r2, #12]
   12e04:	b.w	12272 <_vfiprintf_r+0x3c2>
   12e08:	ldr	r4, [sp, #28]
   12e0a:	str	r7, [sp, #16]
   12e0c:	b.n	12c9c <_vfiprintf_r+0xdec>
   12e0e:	ldr	r3, [sp, #28]
   12e10:	ldrb.w	r1, [r8, #1]
   12e14:	ldr.w	r7, [r3], #4
   12e18:	str	r3, [sp, #28]
   12e1a:	mov	r8, r2
   12e1c:	orr.w	r7, r7, r7, asr #31
   12e20:	b.w	11f96 <_vfiprintf_r+0xe6>
   12e24:	vmov	r2, s16
   12e28:	ldrh	r3, [r2, #12]
   12e2a:	orr.w	r3, r3, #64	; 0x40
   12e2e:	strh	r3, [r2, #12]
   12e30:	b.w	1225e <_vfiprintf_r+0x3ae>
   12e34:	.word	0xcccccccd
   12e38:	.word	0x20000e90

00012e3c <__sbprintf>:
   12e3c:	push	{r4, r5, r6, lr}
   12e3e:	mov	r4, r1
   12e40:	ldrh	r1, [r1, #12]
   12e42:	sub.w	sp, sp, #1136	; 0x470
   12e46:	bic.w	r1, r1, #2
   12e4a:	strh.w	r1, [sp, #20]
   12e4e:	ldr	r1, [r4, #100]	; 0x64
   12e50:	str	r1, [sp, #108]	; 0x6c
   12e52:	ldrh	r1, [r4, #14]
   12e54:	strh.w	r1, [sp, #22]
   12e58:	ldr	r1, [r4, #28]
   12e5a:	str	r1, [sp, #36]	; 0x24
   12e5c:	ldr	r1, [r4, #36]	; 0x24
   12e5e:	str	r1, [sp, #44]	; 0x2c
   12e60:	add	r1, sp, #112	; 0x70
   12e62:	str	r1, [sp, #8]
   12e64:	str	r1, [sp, #24]
   12e66:	mov.w	r1, #1024	; 0x400
   12e6a:	mov	r6, r0
   12e6c:	str	r1, [sp, #16]
   12e6e:	str	r1, [sp, #28]
   12e70:	add	r0, sp, #96	; 0x60
   12e72:	movs	r1, #0
   12e74:	strd	r3, r2, [sp]
   12e78:	str	r1, [sp, #32]
   12e7a:	bl	e324 <__retarget_lock_init_recursive>
   12e7e:	ldrd	r3, r2, [sp]
   12e82:	add	r1, sp, #8
   12e84:	mov	r0, r6
   12e86:	bl	11eb0 <_vfiprintf_r>
   12e8a:	subs	r5, r0, #0
   12e8c:	blt.n	12e9e <__sbprintf+0x62>
   12e8e:	add	r1, sp, #8
   12e90:	mov	r0, r6
   12e92:	bl	10d0c <_fflush_r>
   12e96:	cmp	r0, #0
   12e98:	it	ne
   12e9a:	movne.w	r5, #4294967295
   12e9e:	ldrh.w	r3, [sp, #20]
   12ea2:	lsls	r3, r3, #25
   12ea4:	bpl.n	12eae <__sbprintf+0x72>
   12ea6:	ldrh	r3, [r4, #12]
   12ea8:	orr.w	r3, r3, #64	; 0x40
   12eac:	strh	r3, [r4, #12]
   12eae:	ldr	r0, [sp, #96]	; 0x60
   12eb0:	bl	e328 <__retarget_lock_close_recursive>
   12eb4:	mov	r0, r5
   12eb6:	add.w	sp, sp, #1136	; 0x470
   12eba:	pop	{r4, r5, r6, pc}

00012ebc <__sfvwrite_r>:
   12ebc:	ldr	r3, [r2, #8]
   12ebe:	cmp	r3, #0
   12ec0:	beq.w	12fce <__sfvwrite_r+0x112>
   12ec4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ec8:	ldrsh.w	r3, [r1, #12]
   12ecc:	mov	r4, r1
   12ece:	lsls	r1, r3, #28
   12ed0:	mov	r8, r0
   12ed2:	sub	sp, #12
   12ed4:	mov	r7, r2
   12ed6:	uxth	r0, r3
   12ed8:	bpl.n	12f26 <__sfvwrite_r+0x6a>
   12eda:	ldr	r3, [r4, #16]
   12edc:	cbz	r3, 12f26 <__sfvwrite_r+0x6a>
   12ede:	ands.w	r3, r0, #2
   12ee2:	ldr	r5, [r7, #0]
   12ee4:	beq.n	12f42 <__sfvwrite_r+0x86>
   12ee6:	mov.w	sl, #0
   12eea:	ldr.w	fp, [pc, #704]	; 131ac <__sfvwrite_r+0x2f0>
   12eee:	mov	r6, sl
   12ef0:	mov	r9, r7
   12ef2:	cmp	r6, fp
   12ef4:	mov	r3, r6
   12ef6:	mov	r2, sl
   12ef8:	it	cs
   12efa:	movcs	r3, fp
   12efc:	mov	r0, r8
   12efe:	cmp	r6, #0
   12f00:	beq.n	12fa8 <__sfvwrite_r+0xec>
   12f02:	ldr	r1, [r4, #28]
   12f04:	ldr	r7, [r4, #36]	; 0x24
   12f06:	blx	r7
   12f08:	cmp	r0, #0
   12f0a:	ble.n	12fba <__sfvwrite_r+0xfe>
   12f0c:	ldr.w	r3, [r9, #8]
   12f10:	subs	r3, r3, r0
   12f12:	add	sl, r0
   12f14:	subs	r6, r6, r0
   12f16:	str.w	r3, [r9, #8]
   12f1a:	cmp	r3, #0
   12f1c:	bne.n	12ef2 <__sfvwrite_r+0x36>
   12f1e:	movs	r0, #0
   12f20:	add	sp, #12
   12f22:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12f26:	mov	r1, r4
   12f28:	mov	r0, r8
   12f2a:	bl	131b0 <__swsetup_r>
   12f2e:	cmp	r0, #0
   12f30:	bne.w	131a4 <__sfvwrite_r+0x2e8>
   12f34:	ldrsh.w	r3, [r4, #12]
   12f38:	ldr	r5, [r7, #0]
   12f3a:	uxth	r0, r3
   12f3c:	ands.w	r3, r0, #2
   12f40:	bne.n	12ee6 <__sfvwrite_r+0x2a>
   12f42:	ands.w	r9, r0, #1
   12f46:	bne.n	12fd2 <__sfvwrite_r+0x116>
   12f48:	mov	r6, r9
   12f4a:	str	r7, [sp, #0]
   12f4c:	cbz	r6, 12fa0 <__sfvwrite_r+0xe4>
   12f4e:	lsls	r2, r0, #22
   12f50:	ldr.w	fp, [r4, #8]
   12f54:	bpl.w	13062 <__sfvwrite_r+0x1a6>
   12f58:	cmp	fp, r6
   12f5a:	mov	r2, fp
   12f5c:	bhi.w	130c8 <__sfvwrite_r+0x20c>
   12f60:	tst.w	r0, #1152	; 0x480
   12f64:	bne.w	130ea <__sfvwrite_r+0x22e>
   12f68:	ldr	r0, [r4, #0]
   12f6a:	str	r2, [sp, #4]
   12f6c:	mov	r1, r9
   12f6e:	bl	df6c <memmove>
   12f72:	ldr	r3, [r4, #8]
   12f74:	ldr	r2, [sp, #4]
   12f76:	sub.w	r1, r3, fp
   12f7a:	ldr	r3, [r4, #0]
   12f7c:	str	r1, [r4, #8]
   12f7e:	add	r3, r2
   12f80:	mov	sl, r6
   12f82:	str	r3, [r4, #0]
   12f84:	movs	r6, #0
   12f86:	ldr	r2, [sp, #0]
   12f88:	ldr	r3, [r2, #8]
   12f8a:	sub.w	r3, r3, sl
   12f8e:	add	r9, sl
   12f90:	str	r3, [r2, #8]
   12f92:	cmp	r3, #0
   12f94:	beq.n	12f1e <__sfvwrite_r+0x62>
   12f96:	ldrsh.w	r0, [r4, #12]
   12f9a:	uxth	r0, r0
   12f9c:	cmp	r6, #0
   12f9e:	bne.n	12f4e <__sfvwrite_r+0x92>
   12fa0:	ldrd	r9, r6, [r5]
   12fa4:	adds	r5, #8
   12fa6:	b.n	12f4c <__sfvwrite_r+0x90>
   12fa8:	ldrd	sl, r6, [r5]
   12fac:	adds	r5, #8
   12fae:	b.n	12ef2 <__sfvwrite_r+0x36>
   12fb0:	mov	r1, r4
   12fb2:	mov	r0, r8
   12fb4:	bl	10d0c <_fflush_r>
   12fb8:	cbz	r0, 1301e <__sfvwrite_r+0x162>
   12fba:	ldrsh.w	r3, [r4, #12]
   12fbe:	orr.w	r3, r3, #64	; 0x40
   12fc2:	mov.w	r0, #4294967295
   12fc6:	strh	r3, [r4, #12]
   12fc8:	add	sp, #12
   12fca:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12fce:	movs	r0, #0
   12fd0:	bx	lr
   12fd2:	mov	r6, r3
   12fd4:	mov	sl, r7
   12fd6:	mov	r9, r3
   12fd8:	mov	r0, r3
   12fda:	str	r5, [sp, #0]
   12fdc:	mov	r7, r3
   12fde:	cbz	r6, 1303a <__sfvwrite_r+0x17e>
   12fe0:	cmp	r0, #0
   12fe2:	beq.n	1304a <__sfvwrite_r+0x18e>
   12fe4:	mov	r2, r9
   12fe6:	ldrd	r1, r3, [r4, #16]
   12fea:	ldr	r0, [r4, #0]
   12fec:	ldr	r5, [r4, #8]
   12fee:	cmp	r2, r6
   12ff0:	it	cs
   12ff2:	movcs	r2, r6
   12ff4:	cmp	r0, r1
   12ff6:	bls.n	13002 <__sfvwrite_r+0x146>
   12ff8:	add.w	fp, r5, r3
   12ffc:	cmp	r2, fp
   12ffe:	bgt.w	13150 <__sfvwrite_r+0x294>
   13002:	cmp	r3, r2
   13004:	bgt.n	130d0 <__sfvwrite_r+0x214>
   13006:	ldr	r1, [r4, #28]
   13008:	ldr	r5, [r4, #36]	; 0x24
   1300a:	mov	r2, r7
   1300c:	mov	r0, r8
   1300e:	blx	r5
   13010:	subs.w	fp, r0, #0
   13014:	ble.n	12fba <__sfvwrite_r+0xfe>
   13016:	subs.w	r9, r9, fp
   1301a:	beq.n	12fb0 <__sfvwrite_r+0xf4>
   1301c:	movs	r0, #1
   1301e:	ldr.w	r3, [sl, #8]
   13022:	sub.w	r3, r3, fp
   13026:	add	r7, fp
   13028:	sub.w	r6, r6, fp
   1302c:	str.w	r3, [sl, #8]
   13030:	cmp	r3, #0
   13032:	beq.w	12f1e <__sfvwrite_r+0x62>
   13036:	cmp	r6, #0
   13038:	bne.n	12fe0 <__sfvwrite_r+0x124>
   1303a:	ldr	r2, [sp, #0]
   1303c:	ldr	r6, [r2, #4]
   1303e:	mov	r3, r2
   13040:	adds	r2, #8
   13042:	str	r2, [sp, #0]
   13044:	cmp	r6, #0
   13046:	beq.n	1303a <__sfvwrite_r+0x17e>
   13048:	ldr	r7, [r3, #0]
   1304a:	mov	r2, r6
   1304c:	movs	r1, #10
   1304e:	mov	r0, r7
   13050:	bl	e340 <memchr>
   13054:	cmp	r0, #0
   13056:	beq.w	13192 <__sfvwrite_r+0x2d6>
   1305a:	adds	r0, #1
   1305c:	sub.w	r9, r0, r7
   13060:	b.n	12fe4 <__sfvwrite_r+0x128>
   13062:	ldr	r0, [r4, #0]
   13064:	ldr	r3, [r4, #16]
   13066:	cmp	r0, r3
   13068:	bhi.n	13098 <__sfvwrite_r+0x1dc>
   1306a:	ldr	r2, [r4, #20]
   1306c:	cmp	r2, r6
   1306e:	bhi.n	13098 <__sfvwrite_r+0x1dc>
   13070:	mvn.w	r3, #2147483648	; 0x80000000
   13074:	cmp	r3, r6
   13076:	it	cs
   13078:	movcs	r3, r6
   1307a:	ldr	r1, [r4, #28]
   1307c:	sdiv	r3, r3, r2
   13080:	ldr	r7, [r4, #36]	; 0x24
   13082:	mul.w	r3, r2, r3
   13086:	mov	r0, r8
   13088:	mov	r2, r9
   1308a:	blx	r7
   1308c:	subs.w	sl, r0, #0
   13090:	ble.n	12fba <__sfvwrite_r+0xfe>
   13092:	sub.w	r6, r6, sl
   13096:	b.n	12f86 <__sfvwrite_r+0xca>
   13098:	cmp	fp, r6
   1309a:	mov	sl, fp
   1309c:	it	cs
   1309e:	movcs	sl, r6
   130a0:	mov	r2, sl
   130a2:	mov	r1, r9
   130a4:	bl	df6c <memmove>
   130a8:	ldr	r3, [r4, #8]
   130aa:	ldr	r2, [r4, #0]
   130ac:	sub.w	r3, r3, sl
   130b0:	add	r2, sl
   130b2:	str	r3, [r4, #8]
   130b4:	str	r2, [r4, #0]
   130b6:	cmp	r3, #0
   130b8:	bne.n	13092 <__sfvwrite_r+0x1d6>
   130ba:	mov	r1, r4
   130bc:	mov	r0, r8
   130be:	bl	10d0c <_fflush_r>
   130c2:	cmp	r0, #0
   130c4:	beq.n	13092 <__sfvwrite_r+0x1d6>
   130c6:	b.n	12fba <__sfvwrite_r+0xfe>
   130c8:	ldr	r0, [r4, #0]
   130ca:	mov	fp, r6
   130cc:	mov	r2, r6
   130ce:	b.n	12f6a <__sfvwrite_r+0xae>
   130d0:	mov	r1, r7
   130d2:	str	r2, [sp, #4]
   130d4:	bl	df6c <memmove>
   130d8:	ldr	r2, [sp, #4]
   130da:	ldr	r3, [r4, #8]
   130dc:	subs	r3, r3, r2
   130de:	str	r3, [r4, #8]
   130e0:	ldr	r3, [r4, #0]
   130e2:	add	r3, r2
   130e4:	str	r3, [r4, #0]
   130e6:	mov	fp, r2
   130e8:	b.n	13016 <__sfvwrite_r+0x15a>
   130ea:	ldr	r3, [r4, #0]
   130ec:	ldr	r1, [r4, #16]
   130ee:	sub.w	fp, r3, r1
   130f2:	ldr	r3, [r4, #20]
   130f4:	add.w	sl, r3, r3, lsl #1
   130f8:	add.w	sl, sl, sl, lsr #31
   130fc:	add.w	r3, fp, #1
   13100:	mov.w	sl, sl, asr #1
   13104:	add	r3, r6
   13106:	cmp	r3, sl
   13108:	mov	r2, sl
   1310a:	itt	hi
   1310c:	movhi	sl, r3
   1310e:	movhi	r2, sl
   13110:	lsls	r3, r0, #21
   13112:	bpl.n	1316e <__sfvwrite_r+0x2b2>
   13114:	mov	r1, r2
   13116:	mov	r0, r8
   13118:	bl	d250 <_malloc_r>
   1311c:	cmp	r0, #0
   1311e:	beq.n	13198 <__sfvwrite_r+0x2dc>
   13120:	mov	r2, fp
   13122:	ldr	r1, [r4, #16]
   13124:	str	r0, [sp, #4]
   13126:	bl	a0c4 <memcpy>
   1312a:	ldrh	r2, [r4, #12]
   1312c:	ldr	r3, [sp, #4]
   1312e:	bic.w	r2, r2, #1152	; 0x480
   13132:	orr.w	r2, r2, #128	; 0x80
   13136:	strh	r2, [r4, #12]
   13138:	add.w	r0, r3, fp
   1313c:	str	r3, [r4, #16]
   1313e:	sub.w	r3, sl, fp
   13142:	str.w	sl, [r4, #20]
   13146:	str	r3, [r4, #8]
   13148:	str	r0, [r4, #0]
   1314a:	mov	fp, r6
   1314c:	mov	r2, r6
   1314e:	b.n	12f6a <__sfvwrite_r+0xae>
   13150:	mov	r1, r7
   13152:	mov	r2, fp
   13154:	bl	df6c <memmove>
   13158:	ldr	r3, [r4, #0]
   1315a:	add	r3, fp
   1315c:	str	r3, [r4, #0]
   1315e:	mov	r1, r4
   13160:	mov	r0, r8
   13162:	bl	10d0c <_fflush_r>
   13166:	cmp	r0, #0
   13168:	beq.w	13016 <__sfvwrite_r+0x15a>
   1316c:	b.n	12fba <__sfvwrite_r+0xfe>
   1316e:	mov	r0, r8
   13170:	bl	d7c8 <_realloc_r>
   13174:	mov	r3, r0
   13176:	cmp	r0, #0
   13178:	bne.n	13138 <__sfvwrite_r+0x27c>
   1317a:	ldr	r1, [r4, #16]
   1317c:	mov	r0, r8
   1317e:	bl	e604 <_free_r>
   13182:	ldrsh.w	r3, [r4, #12]
   13186:	movs	r2, #12
   13188:	bic.w	r3, r3, #128	; 0x80
   1318c:	str.w	r2, [r8]
   13190:	b.n	12fbe <__sfvwrite_r+0x102>
   13192:	adds	r2, r6, #1
   13194:	mov	r9, r2
   13196:	b.n	12fe6 <__sfvwrite_r+0x12a>
   13198:	movs	r2, #12
   1319a:	ldrsh.w	r3, [r4, #12]
   1319e:	str.w	r2, [r8]
   131a2:	b.n	12fbe <__sfvwrite_r+0x102>
   131a4:	mov.w	r0, #4294967295
   131a8:	b.n	12f20 <__sfvwrite_r+0x64>
   131aa:	nop
   131ac:	.word	0x7ffffc00

000131b0 <__swsetup_r>:
   131b0:	push	{r3, r4, r5, lr}
   131b2:	ldr	r3, [pc, #196]	; (13278 <__swsetup_r+0xc8>)
   131b4:	ldr	r3, [r3, #0]
   131b6:	mov	r5, r0
   131b8:	mov	r4, r1
   131ba:	cbz	r3, 131c2 <__swsetup_r+0x12>
   131bc:	ldr	r2, [r3, #52]	; 0x34
   131be:	cmp	r2, #0
   131c0:	beq.n	13260 <__swsetup_r+0xb0>
   131c2:	ldrsh.w	r3, [r4, #12]
   131c6:	lsls	r0, r3, #28
   131c8:	uxth	r2, r3
   131ca:	bpl.n	13206 <__swsetup_r+0x56>
   131cc:	ldr	r1, [r4, #16]
   131ce:	cbz	r1, 1321c <__swsetup_r+0x6c>
   131d0:	ands.w	r0, r2, #1
   131d4:	beq.n	131e6 <__swsetup_r+0x36>
   131d6:	movs	r0, #0
   131d8:	str	r0, [r4, #8]
   131da:	ldr	r0, [r4, #20]
   131dc:	negs	r0, r0
   131de:	str	r0, [r4, #24]
   131e0:	cbz	r1, 131f2 <__swsetup_r+0x42>
   131e2:	movs	r0, #0
   131e4:	pop	{r3, r4, r5, pc}
   131e6:	lsls	r5, r2, #30
   131e8:	it	pl
   131ea:	ldrpl	r0, [r4, #20]
   131ec:	str	r0, [r4, #8]
   131ee:	cmp	r1, #0
   131f0:	bne.n	131e2 <__swsetup_r+0x32>
   131f2:	lsls	r2, r2, #24
   131f4:	it	pl
   131f6:	movpl	r0, r1
   131f8:	bpl.n	131e4 <__swsetup_r+0x34>
   131fa:	orr.w	r3, r3, #64	; 0x40
   131fe:	strh	r3, [r4, #12]
   13200:	mov.w	r0, #4294967295
   13204:	pop	{r3, r4, r5, pc}
   13206:	lsls	r1, r2, #27
   13208:	bpl.n	13268 <__swsetup_r+0xb8>
   1320a:	lsls	r2, r2, #29
   1320c:	bmi.n	13238 <__swsetup_r+0x88>
   1320e:	ldr	r1, [r4, #16]
   13210:	orr.w	r3, r3, #8
   13214:	strh	r3, [r4, #12]
   13216:	uxth	r2, r3
   13218:	cmp	r1, #0
   1321a:	bne.n	131d0 <__swsetup_r+0x20>
   1321c:	and.w	r0, r2, #640	; 0x280
   13220:	cmp.w	r0, #512	; 0x200
   13224:	beq.n	131d0 <__swsetup_r+0x20>
   13226:	mov	r1, r4
   13228:	mov	r0, r5
   1322a:	bl	134bc <__smakebuf_r>
   1322e:	ldrsh.w	r3, [r4, #12]
   13232:	ldr	r1, [r4, #16]
   13234:	uxth	r2, r3
   13236:	b.n	131d0 <__swsetup_r+0x20>
   13238:	ldr	r1, [r4, #48]	; 0x30
   1323a:	cbz	r1, 13252 <__swsetup_r+0xa2>
   1323c:	add.w	r2, r4, #64	; 0x40
   13240:	cmp	r1, r2
   13242:	beq.n	1324e <__swsetup_r+0x9e>
   13244:	mov	r0, r5
   13246:	bl	e604 <_free_r>
   1324a:	ldrsh.w	r3, [r4, #12]
   1324e:	movs	r2, #0
   13250:	str	r2, [r4, #48]	; 0x30
   13252:	ldr	r1, [r4, #16]
   13254:	movs	r2, #0
   13256:	strd	r1, r2, [r4]
   1325a:	bic.w	r3, r3, #36	; 0x24
   1325e:	b.n	13210 <__swsetup_r+0x60>
   13260:	mov	r0, r3
   13262:	bl	dcd8 <__sinit>
   13266:	b.n	131c2 <__swsetup_r+0x12>
   13268:	movs	r2, #9
   1326a:	orr.w	r3, r3, #64	; 0x40
   1326e:	str	r2, [r5, #0]
   13270:	mov.w	r0, #4294967295
   13274:	strh	r3, [r4, #12]
   13276:	pop	{r3, r4, r5, pc}
   13278:	.word	0x20001a10

0001327c <__fputwc>:
   1327c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13280:	sub	sp, #8
   13282:	mov	sl, r0
   13284:	mov	r8, r1
   13286:	mov	r4, r2
   13288:	bl	e1f8 <__locale_mb_cur_max>
   1328c:	cmp	r0, #1
   1328e:	bne.n	13298 <__fputwc+0x1c>
   13290:	add.w	r3, r8, #4294967295
   13294:	cmp	r3, #254	; 0xfe
   13296:	bls.n	13306 <__fputwc+0x8a>
   13298:	add.w	r9, sp, #4
   1329c:	mov	r2, r8
   1329e:	add.w	r3, r4, #92	; 0x5c
   132a2:	mov	r1, r9
   132a4:	mov	r0, sl
   132a6:	bl	11cac <_wcrtomb_r>
   132aa:	adds	r2, r0, #1
   132ac:	mov	r6, r0
   132ae:	beq.n	13316 <__fputwc+0x9a>
   132b0:	cbz	r0, 132fc <__fputwc+0x80>
   132b2:	ldrb.w	ip, [sp, #4]
   132b6:	movs	r5, #0
   132b8:	b.n	132ce <__fputwc+0x52>
   132ba:	ldr	r3, [r4, #0]
   132bc:	adds	r2, r3, #1
   132be:	str	r2, [r4, #0]
   132c0:	strb.w	ip, [r3]
   132c4:	adds	r5, #1
   132c6:	cmp	r5, r6
   132c8:	bcs.n	132fc <__fputwc+0x80>
   132ca:	ldrb.w	ip, [r9, #1]!
   132ce:	ldr	r3, [r4, #8]
   132d0:	subs	r3, #1
   132d2:	cmp	r3, #0
   132d4:	str	r3, [r4, #8]
   132d6:	bge.n	132ba <__fputwc+0x3e>
   132d8:	ldr	r7, [r4, #24]
   132da:	cmp	r3, r7
   132dc:	mov	r1, ip
   132de:	mov	r2, r4
   132e0:	mov	r0, sl
   132e2:	blt.n	132ea <__fputwc+0x6e>
   132e4:	cmp.w	ip, #10
   132e8:	bne.n	132ba <__fputwc+0x3e>
   132ea:	bl	13594 <__swbuf_r>
   132ee:	adds	r3, r0, #1
   132f0:	bne.n	132c4 <__fputwc+0x48>
   132f2:	mov	r6, r0
   132f4:	mov	r0, r6
   132f6:	add	sp, #8
   132f8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   132fc:	mov	r6, r8
   132fe:	mov	r0, r6
   13300:	add	sp, #8
   13302:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13306:	uxtb.w	ip, r8
   1330a:	strb.w	ip, [sp, #4]
   1330e:	mov	r6, r0
   13310:	add.w	r9, sp, #4
   13314:	b.n	132b6 <__fputwc+0x3a>
   13316:	ldrh	r3, [r4, #12]
   13318:	mov	r0, r6
   1331a:	orr.w	r3, r3, #64	; 0x40
   1331e:	strh	r3, [r4, #12]
   13320:	add	sp, #8
   13322:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13326:	nop

00013328 <_fputwc_r>:
   13328:	push	{r4, r5, lr}
   1332a:	ldr	r3, [r2, #100]	; 0x64
   1332c:	tst.w	r3, #1
   13330:	ldrsh.w	r3, [r2, #12]
   13334:	mov	r4, r2
   13336:	sub	sp, #12
   13338:	mov	r5, r0
   1333a:	uxth	r2, r3
   1333c:	bne.n	13342 <_fputwc_r+0x1a>
   1333e:	lsls	r0, r3, #22
   13340:	bpl.n	1337c <_fputwc_r+0x54>
   13342:	lsls	r0, r2, #18
   13344:	bmi.n	13354 <_fputwc_r+0x2c>
   13346:	ldr	r2, [r4, #100]	; 0x64
   13348:	orr.w	r3, r3, #8192	; 0x2000
   1334c:	orr.w	r2, r2, #8192	; 0x2000
   13350:	strh	r3, [r4, #12]
   13352:	str	r2, [r4, #100]	; 0x64
   13354:	mov	r2, r4
   13356:	mov	r0, r5
   13358:	bl	1327c <__fputwc>
   1335c:	ldr	r3, [r4, #100]	; 0x64
   1335e:	lsls	r2, r3, #31
   13360:	mov	r5, r0
   13362:	bmi.n	1336a <_fputwc_r+0x42>
   13364:	ldrh	r3, [r4, #12]
   13366:	lsls	r3, r3, #22
   13368:	bpl.n	13370 <_fputwc_r+0x48>
   1336a:	mov	r0, r5
   1336c:	add	sp, #12
   1336e:	pop	{r4, r5, pc}
   13370:	ldr	r0, [r4, #88]	; 0x58
   13372:	bl	e330 <__retarget_lock_release_recursive>
   13376:	mov	r0, r5
   13378:	add	sp, #12
   1337a:	pop	{r4, r5, pc}
   1337c:	ldr	r0, [r4, #88]	; 0x58
   1337e:	str	r1, [sp, #4]
   13380:	bl	e32c <__retarget_lock_acquire_recursive>
   13384:	ldrsh.w	r3, [r4, #12]
   13388:	ldr	r1, [sp, #4]
   1338a:	uxth	r2, r3
   1338c:	b.n	13342 <_fputwc_r+0x1a>
   1338e:	nop

00013390 <_wcsnrtombs_l>:
   13390:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13394:	sub	sp, #44	; 0x2c
   13396:	ldrd	r8, sl, [sp, #84]	; 0x54
   1339a:	ldr	r7, [sp, #80]	; 0x50
   1339c:	str	r1, [sp, #12]
   1339e:	mov	r9, r0
   133a0:	str	r2, [sp, #20]
   133a2:	mov	r6, r3
   133a4:	cmp.w	r8, #0
   133a8:	beq.n	13464 <_wcsnrtombs_l+0xd4>
   133aa:	ldr	r3, [sp, #12]
   133ac:	cmp	r3, #0
   133ae:	beq.n	1346e <_wcsnrtombs_l+0xde>
   133b0:	ldr	r3, [sp, #20]
   133b2:	ldr	r5, [r3, #0]
   133b4:	cmp	r7, #0
   133b6:	beq.n	1348e <_wcsnrtombs_l+0xfe>
   133b8:	subs	r4, r6, #1
   133ba:	cbz	r6, 13410 <_wcsnrtombs_l+0x80>
   133bc:	ldr	r3, [sp, #12]
   133be:	str	r3, [sp, #16]
   133c0:	subs	r5, #4
   133c2:	movs	r6, #0
   133c4:	str	r5, [sp, #4]
   133c6:	b.n	133e0 <_wcsnrtombs_l+0x50>
   133c8:	ldr	r3, [sp, #12]
   133ca:	cbnz	r3, 13418 <_wcsnrtombs_l+0x88>
   133cc:	ldr	r3, [sp, #4]
   133ce:	ldr	r2, [r3, #0]
   133d0:	cmp	r2, #0
   133d2:	beq.n	1344a <_wcsnrtombs_l+0xba>
   133d4:	cmp	ip, r7
   133d6:	bcs.n	13492 <_wcsnrtombs_l+0x102>
   133d8:	subs	r4, #1
   133da:	adds	r3, r4, #1
   133dc:	mov	r6, ip
   133de:	beq.n	13410 <_wcsnrtombs_l+0x80>
   133e0:	ldr.w	r3, [r8]
   133e4:	str	r3, [sp, #8]
   133e6:	ldr	r3, [sp, #4]
   133e8:	ldr.w	r5, [sl, #224]	; 0xe0
   133ec:	ldr.w	r2, [r3, #4]!
   133f0:	str	r3, [sp, #4]
   133f2:	add	r1, sp, #28
   133f4:	mov	r3, r8
   133f6:	mov	r0, r9
   133f8:	ldr.w	fp, [r8, #4]
   133fc:	blx	r5
   133fe:	adds	r2, r0, #1
   13400:	beq.n	13478 <_wcsnrtombs_l+0xe8>
   13402:	add.w	ip, r0, r6
   13406:	cmp	ip, r7
   13408:	bls.n	133c8 <_wcsnrtombs_l+0x38>
   1340a:	ldr	r3, [sp, #8]
   1340c:	strd	r3, fp, [r8]
   13410:	mov	r0, r6
   13412:	add	sp, #44	; 0x2c
   13414:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13418:	cmp	r0, #0
   1341a:	ble.n	1343a <_wcsnrtombs_l+0xaa>
   1341c:	ldr	r3, [sp, #16]
   1341e:	ldr	r5, [sp, #4]
   13420:	add	r0, r3
   13422:	subs	r2, r3, #1
   13424:	add	r1, sp, #28
   13426:	add.w	lr, r0, #4294967295
   1342a:	ldrb.w	r3, [r1], #1
   1342e:	strb.w	r3, [r2, #1]!
   13432:	cmp	r2, lr
   13434:	bne.n	1342a <_wcsnrtombs_l+0x9a>
   13436:	str	r5, [sp, #4]
   13438:	str	r0, [sp, #16]
   1343a:	ldr	r3, [sp, #20]
   1343c:	ldr	r2, [r3, #0]
   1343e:	adds	r2, #4
   13440:	str	r2, [r3, #0]
   13442:	ldr	r3, [sp, #4]
   13444:	ldr	r2, [r3, #0]
   13446:	cmp	r2, #0
   13448:	bne.n	133d4 <_wcsnrtombs_l+0x44>
   1344a:	ldr	r3, [sp, #12]
   1344c:	cbz	r3, 13452 <_wcsnrtombs_l+0xc2>
   1344e:	ldr	r3, [sp, #20]
   13450:	str	r2, [r3, #0]
   13452:	add.w	r6, ip, #4294967295
   13456:	movs	r2, #0
   13458:	mov	r0, r6
   1345a:	str.w	r2, [r8]
   1345e:	add	sp, #44	; 0x2c
   13460:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13464:	ldr	r3, [sp, #12]
   13466:	add.w	r8, r0, #268	; 0x10c
   1346a:	cmp	r3, #0
   1346c:	bne.n	133b0 <_wcsnrtombs_l+0x20>
   1346e:	ldr	r3, [sp, #20]
   13470:	mov.w	r7, #4294967295
   13474:	ldr	r5, [r3, #0]
   13476:	b.n	133b8 <_wcsnrtombs_l+0x28>
   13478:	mov	r6, r0
   1347a:	movs	r1, #138	; 0x8a
   1347c:	movs	r2, #0
   1347e:	mov	r0, r6
   13480:	str.w	r1, [r9]
   13484:	str.w	r2, [r8]
   13488:	add	sp, #44	; 0x2c
   1348a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1348e:	mov	r6, r7
   13490:	b.n	13410 <_wcsnrtombs_l+0x80>
   13492:	mov	r6, ip
   13494:	b.n	13410 <_wcsnrtombs_l+0x80>
   13496:	nop

00013498 <_wcsnrtombs_r>:
   13498:	push	{r4, lr}
   1349a:	sub	sp, #16
   1349c:	ldr	r4, [pc, #20]	; (134b4 <_wcsnrtombs_r+0x1c>)
   1349e:	ldr	r0, [sp, #24]
   134a0:	str	r0, [sp, #0]
   134a2:	ldr	r0, [sp, #28]
   134a4:	str	r0, [sp, #4]
   134a6:	ldr	r0, [pc, #16]	; (134b8 <_wcsnrtombs_r+0x20>)
   134a8:	ldr	r0, [r0, #0]
   134aa:	str	r4, [sp, #8]
   134ac:	bl	13390 <_wcsnrtombs_l>
   134b0:	add	sp, #16
   134b2:	pop	{r4, pc}
   134b4:	.word	0x20001488
   134b8:	.word	0x20001a10

000134bc <__smakebuf_r>:
   134bc:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   134c0:	ldrh	r3, [r1, #12]
   134c2:	mov	r4, r1
   134c4:	lsls	r1, r3, #30
   134c6:	sub	sp, #88	; 0x58
   134c8:	bpl.n	134dc <__smakebuf_r+0x20>
   134ca:	add.w	r3, r4, #67	; 0x43
   134ce:	movs	r2, #1
   134d0:	strd	r3, r2, [r4, #16]
   134d4:	str	r3, [r4, #0]
   134d6:	add	sp, #88	; 0x58
   134d8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   134dc:	ldrsh.w	r1, [r4, #14]
   134e0:	cmp	r1, #0
   134e2:	mov	r6, r0
   134e4:	blt.n	13532 <__smakebuf_r+0x76>
   134e6:	mov	r2, sp
   134e8:	bl	13644 <_fstat_r>
   134ec:	cmp	r0, #0
   134ee:	blt.n	13530 <__smakebuf_r+0x74>
   134f0:	ldr	r5, [sp, #4]
   134f2:	and.w	r5, r5, #61440	; 0xf000
   134f6:	sub.w	r5, r5, #8192	; 0x2000
   134fa:	clz	r5, r5
   134fe:	mov.w	r8, #1024	; 0x400
   13502:	lsrs	r5, r5, #5
   13504:	mov.w	r7, #2048	; 0x800
   13508:	mov	r1, r8
   1350a:	mov	r0, r6
   1350c:	bl	d250 <_malloc_r>
   13510:	cbz	r0, 1354c <__smakebuf_r+0x90>
   13512:	ldrsh.w	r3, [r4, #12]
   13516:	str.w	r8, [r4, #20]
   1351a:	orr.w	r3, r3, #128	; 0x80
   1351e:	str	r0, [r4, #0]
   13520:	str	r0, [r4, #16]
   13522:	strh	r3, [r4, #12]
   13524:	cbnz	r5, 13574 <__smakebuf_r+0xb8>
   13526:	orrs	r3, r7
   13528:	strh	r3, [r4, #12]
   1352a:	add	sp, #88	; 0x58
   1352c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13530:	ldrh	r3, [r4, #12]
   13532:	ands.w	r5, r3, #128	; 0x80
   13536:	beq.n	1356c <__smakebuf_r+0xb0>
   13538:	mov.w	r8, #64	; 0x40
   1353c:	movs	r5, #0
   1353e:	mov	r1, r8
   13540:	mov	r0, r6
   13542:	mov	r7, r5
   13544:	bl	d250 <_malloc_r>
   13548:	cmp	r0, #0
   1354a:	bne.n	13512 <__smakebuf_r+0x56>
   1354c:	ldrsh.w	r3, [r4, #12]
   13550:	lsls	r2, r3, #22
   13552:	bmi.n	134d6 <__smakebuf_r+0x1a>
   13554:	bic.w	r3, r3, #3
   13558:	add.w	r2, r4, #67	; 0x43
   1355c:	orr.w	r3, r3, #2
   13560:	movs	r1, #1
   13562:	strd	r2, r1, [r4, #16]
   13566:	strh	r3, [r4, #12]
   13568:	str	r2, [r4, #0]
   1356a:	b.n	134d6 <__smakebuf_r+0x1a>
   1356c:	mov.w	r8, #1024	; 0x400
   13570:	mov	r7, r5
   13572:	b.n	13508 <__smakebuf_r+0x4c>
   13574:	ldrsh.w	r1, [r4, #14]
   13578:	mov	r0, r6
   1357a:	bl	13670 <_isatty_r>
   1357e:	cbnz	r0, 13586 <__smakebuf_r+0xca>
   13580:	ldrsh.w	r3, [r4, #12]
   13584:	b.n	13526 <__smakebuf_r+0x6a>
   13586:	ldrh	r3, [r4, #12]
   13588:	bic.w	r3, r3, #3
   1358c:	orr.w	r3, r3, #1
   13590:	sxth	r3, r3
   13592:	b.n	13526 <__smakebuf_r+0x6a>

00013594 <__swbuf_r>:
   13594:	push	{r3, r4, r5, r6, r7, lr}
   13596:	mov	r5, r1
   13598:	mov	r4, r2
   1359a:	mov	r6, r0
   1359c:	cbz	r0, 135a4 <__swbuf_r+0x10>
   1359e:	ldr	r3, [r0, #52]	; 0x34
   135a0:	cmp	r3, #0
   135a2:	beq.n	1363e <__swbuf_r+0xaa>
   135a4:	ldrsh.w	r2, [r4, #12]
   135a8:	ldr	r3, [r4, #24]
   135aa:	str	r3, [r4, #8]
   135ac:	lsls	r7, r2, #28
   135ae:	uxth	r0, r2
   135b0:	bpl.n	135ea <__swbuf_r+0x56>
   135b2:	ldr	r3, [r4, #16]
   135b4:	cbz	r3, 135ea <__swbuf_r+0x56>
   135b6:	uxtb	r5, r5
   135b8:	lsls	r1, r0, #18
   135ba:	mov	r7, r5
   135bc:	bpl.n	13604 <__swbuf_r+0x70>
   135be:	ldr	r2, [r4, #0]
   135c0:	ldr	r1, [r4, #20]
   135c2:	subs	r3, r2, r3
   135c4:	cmp	r1, r3
   135c6:	ble.n	1361c <__swbuf_r+0x88>
   135c8:	adds	r3, #1
   135ca:	ldr	r1, [r4, #8]
   135cc:	subs	r1, #1
   135ce:	str	r1, [r4, #8]
   135d0:	adds	r1, r2, #1
   135d2:	str	r1, [r4, #0]
   135d4:	strb	r5, [r2, #0]
   135d6:	ldr	r2, [r4, #20]
   135d8:	cmp	r2, r3
   135da:	beq.n	1362c <__swbuf_r+0x98>
   135dc:	ldrh	r3, [r4, #12]
   135de:	lsls	r3, r3, #31
   135e0:	bpl.n	135e6 <__swbuf_r+0x52>
   135e2:	cmp	r5, #10
   135e4:	beq.n	1362c <__swbuf_r+0x98>
   135e6:	mov	r0, r7
   135e8:	pop	{r3, r4, r5, r6, r7, pc}
   135ea:	mov	r1, r4
   135ec:	mov	r0, r6
   135ee:	bl	131b0 <__swsetup_r>
   135f2:	cbnz	r0, 13638 <__swbuf_r+0xa4>
   135f4:	ldrsh.w	r2, [r4, #12]
   135f8:	ldr	r3, [r4, #16]
   135fa:	uxth	r0, r2
   135fc:	uxtb	r5, r5
   135fe:	lsls	r1, r0, #18
   13600:	mov	r7, r5
   13602:	bmi.n	135be <__swbuf_r+0x2a>
   13604:	orr.w	r2, r2, #8192	; 0x2000
   13608:	strh	r2, [r4, #12]
   1360a:	ldr	r2, [r4, #100]	; 0x64
   1360c:	ldr	r1, [r4, #20]
   1360e:	bic.w	r2, r2, #8192	; 0x2000
   13612:	str	r2, [r4, #100]	; 0x64
   13614:	ldr	r2, [r4, #0]
   13616:	subs	r3, r2, r3
   13618:	cmp	r1, r3
   1361a:	bgt.n	135c8 <__swbuf_r+0x34>
   1361c:	mov	r1, r4
   1361e:	mov	r0, r6
   13620:	bl	10d0c <_fflush_r>
   13624:	cbnz	r0, 13638 <__swbuf_r+0xa4>
   13626:	ldr	r2, [r4, #0]
   13628:	movs	r3, #1
   1362a:	b.n	135ca <__swbuf_r+0x36>
   1362c:	mov	r1, r4
   1362e:	mov	r0, r6
   13630:	bl	10d0c <_fflush_r>
   13634:	cmp	r0, #0
   13636:	beq.n	135e6 <__swbuf_r+0x52>
   13638:	mov.w	r7, #4294967295
   1363c:	b.n	135e6 <__swbuf_r+0x52>
   1363e:	bl	dcd8 <__sinit>
   13642:	b.n	135a4 <__swbuf_r+0x10>

00013644 <_fstat_r>:
   13644:	push	{r4, r5, r6, lr}
   13646:	mov	r4, r1
   13648:	ldr	r5, [pc, #32]	; (1366c <_fstat_r+0x28>)
   1364a:	mov	r3, r0
   1364c:	movs	r6, #0
   1364e:	mov	r0, r4
   13650:	mov	r1, r2
   13652:	mov	r4, r3
   13654:	str	r6, [r5, #0]
   13656:	bl	ba80 <_fstat>
   1365a:	adds	r3, r0, #1
   1365c:	beq.n	13660 <_fstat_r+0x1c>
   1365e:	pop	{r4, r5, r6, pc}
   13660:	ldr	r3, [r5, #0]
   13662:	cmp	r3, #0
   13664:	beq.n	1365e <_fstat_r+0x1a>
   13666:	str	r3, [r4, #0]
   13668:	pop	{r4, r5, r6, pc}
   1366a:	nop
   1366c:	.word	0x2000739c

00013670 <_isatty_r>:
   13670:	push	{r3, r4, r5, lr}
   13672:	ldr	r5, [pc, #28]	; (13690 <_isatty_r+0x20>)
   13674:	movs	r2, #0
   13676:	mov	r4, r0
   13678:	mov	r0, r1
   1367a:	str	r2, [r5, #0]
   1367c:	bl	ba8c <_isatty>
   13680:	adds	r3, r0, #1
   13682:	beq.n	13686 <_isatty_r+0x16>
   13684:	pop	{r3, r4, r5, pc}
   13686:	ldr	r3, [r5, #0]
   13688:	cmp	r3, #0
   1368a:	beq.n	13684 <_isatty_r+0x14>
   1368c:	str	r3, [r4, #0]
   1368e:	pop	{r3, r4, r5, pc}
   13690:	.word	0x2000739c
   13694:	.word	0x00000000

00013698 <___init_veneer>:
   13698:	ldr.w	pc, [pc]	; 1369c <___init_veneer+0x4>
   1369c:	.word	0x60001eb5

000136a0 <___ZN11AudioStream17initialize_memoryEP18audio_block_structj_veneer>:
   136a0:	ldr.w	pc, [pc]	; 136a4 <___ZN11AudioStream17initialize_memoryEP18audio_block_structj_veneer+0x4>
   136a4:	.word	0x60001d99

000136a8 <___reboot_Teensyduino__veneer>:
   136a8:	ldr.w	pc, [pc]	; 136ac <___reboot_Teensyduino__veneer+0x4>
   136ac:	.word	0x60001731

Disassembly of section .fini:

000136b0 <_fini>:
   136b0:	push	{r3, r4, r5, r6, r7, lr}
   136b2:	nop

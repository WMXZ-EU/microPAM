
.vsteensy/build/microPAM_T41.elf:     file format elf32-littlearm

SYMBOL TABLE:
60000000 l    d  .text.headers	00000000 .text.headers
60001400 l    d  .text.code	00000000 .text.code
600027b4 l    d  .text.progmem	00000000 .text.progmem
00000000 l    d  .text.itcm	00000000 .text.itcm
00015740 l    d  .fini	00000000 .fini
00015744 l    d  .ARM.exidx	00000000 .ARM.exidx
20000000 l    d  .data	00000000 .data
200026c0 l    d  .bss	00000000 .bss
20200000 l    d  .bss.dma	00000000 .bss.dma
70000000 l    d  .bss.extram	00000000 .bss.extram
6001a9ac l    d  .text.csf	00000000 .text.csf
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_loclists	00000000 .debug_loclists
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_rnglists	00000000 .debug_rnglists
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 l    df *ABS*	00000000 bootdata.c
00000000 l    df *ABS*	00000000 startup.c
60001400 l     F .text.code	00000016 memory_copy
60001418 l     F .text.code	00000010 memory_clear
00000000 l    df *ABS*	00000000 usb.c
20015824 l     O .bss	00000008 endpoint0_buffer
2001582c l     O .bss	00000004 endpoint0_notify_mask
20005d00 l     O .bss	00000008 endpoint0_setupdata
20015830 l     O .bss	00000004 endpointN_notify_mask
20015918 l     O .bss	00000008 reply_buffer
20015d22 l     O .bss	00000001 sof_usage
20015d30 l     O .bss	00000001 usb_reboot_timer
00000000 l    df *ABS*	00000000 tempmon.c
20015974 l     O .bss	00000004 s_hotCount
20015978 l     O .bss	00000004 s_hotTemp
2001597c l     O .bss	00000004 s_hot_ROOM
20015980 l     O .bss	00000004 s_roomC_hotC
00000000 l    df *ABS*	00000000 crashreport.cpp
00000000 l    df *ABS*	00000000 audiostream.cpp
00000000 l    df *ABS*	00000000 analog.c
20015d1c l     O .bss	00000001 calibrating
00000000 l    df *ABS*	00000000 crti.o
00000000 l    df *ABS*	00000000 crtn.o
00000000 l    df *ABS*	00000000 crtstuff.c
00000020 l     F .text.itcm	00000000 register_tm_clones
00000044 l     F .text.itcm	00000000 frame_dummy
20015864 l     O .bss	00000000 object.0
60002738 l     O .text.code	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 main.cpp
00001108 l     F .text.itcm	00000130 _GLOBAL__sub_I__Z9I2S_startv
20006698 l     O .bss	00000400 acq_buffer_32
20006a98 l     O .bss	00000800 i2s_rx_buffer_32
200072a0 l     O .bss	00000200 dout
20007510 l     O .bss	00000200 outData
20005af8 l     O .bss	00000200 tempData
200078e4 l     O .bss	00000004 loop::ic
200078e8 l     O .bss	00000004 loop::t0
200078ec l     O .bss	00000004 loop::m_seco
200078f0 l     O .bss	00000004 compress(void*)::nout
20200000 l     O .bss.dma	00000a28 setup::data
00000000 l    df *ABS*	00000000 output_i2s_oct.cpp
0000130c l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN17AudioOutputI2SOct13block_ch1_1stE
00000000 l    df *ABS*	00000000 output_pwm.cpp
00001324 l     F .text.itcm	0000001c __tcf_0
00001340 l     F .text.itcm	00000030 _GLOBAL__sub_I__ZN14AudioOutputPWM21update_responsibilityE
00000000 l    df *ABS*	00000000 input_i2s.cpp
00001370 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE
00000000 l    df *ABS*	00000000 output_pt8211_2.cpp
00001388 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN19AudioOutputPT8211_214block_left_1stE
00000000 l    df *ABS*	00000000 output_pt8211.cpp
000013a0 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE
00000000 l    df *ABS*	00000000 input_spdif3.cpp
000013b8 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN16AudioInputSPDIF310block_leftE
00000000 l    df *ABS*	00000000 input_tdm2.cpp
000013d0 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN14AudioInputTDM214block_incomingE
00000000 l    df *ABS*	00000000 input_adc.cpp
000013e8 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN16AudioInputAnalog3dmaE
00000000 l    df *ABS*	00000000 input_pdm_i2s2.cpp
00001400 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN14AudioInputPDM210block_leftE
00000000 l    df *ABS*	00000000 input_i2s2.cpp
00001418 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN14AudioInputI2S210block_leftE
00000000 l    df *ABS*	00000000 input_i2s_quad.cpp
00001430 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E
00000000 l    df *ABS*	00000000 output_i2s_quad.cpp
00001448 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE
00000000 l    df *ABS*	00000000 output_tdm2.cpp
00001460 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN15AudioOutputTDM211block_inputE
00000000 l    df *ABS*	00000000 output_i2s2.cpp
00001478 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN15AudioOutputI2S214block_left_1stE
00000000 l    df *ABS*	00000000 output_i2s_hex.cpp
00001490 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN17AudioOutputI2SHex13block_ch1_1stE
00000000 l    df *ABS*	00000000 input_i2s_oct.cpp
000014a8 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E
00000000 l    df *ABS*	00000000 output_tdm.cpp
000014c0 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE
00000000 l    df *ABS*	00000000 input_tdm.cpp
000014d8 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE
00000000 l    df *ABS*	00000000 input_i2s_hex.cpp
000014f0 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E
00000000 l    df *ABS*	00000000 output_spdif3.cpp
00001508 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN17AudioOutputSPDIF314block_left_1stE
00000000 l    df *ABS*	00000000 output_mqs.cpp
00001520 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN14AudioOutputMQS14block_left_1stE
00000000 l    df *ABS*	00000000 async_input_spdif3.cpp
00001538 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN21AsyncAudioInputSPDIF310microsLastE
00000000 l    df *ABS*	00000000 input_pdm.cpp
00001550 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE
00000000 l    df *ABS*	00000000 output_i2s.cpp
00001568 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE
00000000 l    df *ABS*	00000000 output_spdif2.cpp
00001580 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN17AudioOutputSPDIF214block_left_1stE
00000000 l    df *ABS*	00000000 output_spdif.cpp
00001598 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE
00000000 l    df *ABS*	00000000 wireimxrt.cpp
00001b18 l     F .text.itcm	00000114 _GLOBAL__sub_I__ZN7TwoWire5beginEv
00000000 l    df *ABS*	00000000 spi.cpp
000020d4 l     F .text.itcm	000000b8 _GLOBAL__sub_I__ZN8SPIClass5beginEv
00000000 l    df *ABS*	00000000 sd.cpp
00002864 l     F .text.itcm	00000088 _GLOBAL__sub_I_SD
00000000 l    df *ABS*	00000000 usb_desc.c
200021d8 l     O .data	00000012 device_descriptor
60002b94 l     O .text.progmem	0000000a qualifier_descriptor
00000000 l    df *ABS*	00000000 serialevent.cpp
00000000 l    df *ABS*	00000000 time.cpp
2000668c l     O .bss	00000004 prevMillis
20006694 l     O .bss	00000004 nextSyncTime
20007298 l     O .bss	00000007 tm
20015d12 l     O .bss	00000001 Status
20007710 l     O .bss	00000004 sysTime
20005cf8 l     O .bss	00000008 cacheTime
20001c24 l     O .data	00000004 syncInterval
00000000 l    df *ABS*	00000000 fsstructs.cpp
00000000 l    df *ABS*	00000000 fscache.cpp
00000000 l    df *ABS*	00000000 upcase.cpp
20000470 l     O .data	0000012c lookupTable
2000059c l     O .data	000000d4 mapTable
00000000 l    df *ABS*	00000000 fsdatetime.cpp
00002b48 l     F .text.itcm	00000014 dateTimeMs10(unsigned short*, unsigned short*, unsigned char*)
00000000 l    df *ABS*	00000000 exfatformatter.cpp
00002b74 l     F .text.itcm	00000020 Print::write(char const*) [clone .isra.0]
00000000 l    df *ABS*	00000000 exfatname.cpp
00000000 l    df *ABS*	00000000 exfatfile.cpp
00000000 l    df *ABS*	00000000 exfatpartition.cpp
00000000 l    df *ABS*	00000000 exfatfilewrite.cpp
00000000 l    df *ABS*	00000000 fatformatter.cpp
00000000 l    df *ABS*	00000000 fatname.cpp
00000000 l    df *ABS*	00000000 fatfile.cpp
00005690 l     F .text.itcm	000000bc FatFile::sync() [clone .part.0]
00000000 l    df *ABS*	00000000 fatpartition.cpp
00000000 l    df *ABS*	00000000 fatfilelfn.cpp
00000000 l    df *ABS*	00000000 fsfile.cpp
00000000 l    df *ABS*	00000000 fsvolume.cpp
00000000 l    df *ABS*	00000000 fsnew.cpp
00000000 l    df *ABS*	00000000 sdspicard.cpp
00000000 l    df *ABS*	00000000 sdioteensy.cpp
00009534 l     F .text.itcm	00000030 sdIrs()
00009564 l     F .text.itcm	00000014 isBusyDat()
00009578 l     F .text.itcm	0000000c isBusyDMA()
00009584 l     F .text.itcm	000001b0 setSdclk(unsigned long)
0000987c l     F .text.itcm	00000098 cardCommand(unsigned long, unsigned long)
00009914 l     F .text.itcm	0000002c isBusyCMD13()
00009a70 l     F .text.itcm	0000015c rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)
20015d0e l     O .bss	00000001 m_initDone
20006688 l     O .bss	00000004 m_sdClkKhz
20015d0f l     O .bss	00000001 m_version2
20006690 l     O .bss	00000004 m_errorLine
20015d10 l     O .bss	00000001 m_highCapacity
20015d11 l     O .bss	00000001 m_transferActive
200074a0 l     O .bss	00000010 m_cid
200074b0 l     O .bss	00000010 m_csd
200074c0 l     O .bss	00000004 m_ocr
200074c4 l     O .bss	00000004 m_rca
200074c8 l     O .bss	00000008 m_scr
200074d0 l     O .bss	00000040 m_sds
20007714 l     O .bss	00000004 m_busyFcn
20015d13 l     O .bss	00000001 m_dmaBusy
20007718 l     O .bss	00000004 m_irqstat
2000220c l     O .data	00000001 m_errorCode
00000000 l    df *ABS*	00000000 sdspiteensy3.cpp
00000000 l    df *ABS*	00000000 sdspichipselect.cpp
00000000 l    df *ABS*	00000000 memcpy-armv7m.o
00000000 l    df *ABS*	00000000 usb_serial.c
0000b1d0 l     F .text.itcm	00000090 usb_serial_flush_callback
20003a40 l     O .bss	00002000 txbuffer
0000b260 l     F .text.itcm	000001d0 usb_serial_write.part.0
0000b430 l     F .text.itcm	00000150 rx_event
20002720 l     O .bss	00001000 rx_buffer
20015920 l     O .bss	00000004 rx_available
20015928 l     O .bss	00000010 rx_count
20015d1e l     O .bss	00000001 rx_head
20015944 l     O .bss	00000010 rx_index
20015960 l     O .bss	00000009 rx_list
20015d02 l     O .bss	00000002 rx_packet_size
20015d20 l     O .bss	00000001 rx_tail
20003720 l     O .bss	00000100 rx_transfer
20015d23 l     O .bss	00000001 transmit_previous_timeout
20015d06 l     O .bss	00000002 tx_available
20015d25 l     O .bss	00000001 tx_head
20015d27 l     O .bss	00000001 tx_noautoflush
20015d0a l     O .bss	00000002 tx_packet_size
20003920 l     O .bss	00000080 tx_transfer
00000000 l    df *ABS*	00000000 clockspeed.c
00000000 l    df *ABS*	00000000 delay.c
00000000 l    df *ABS*	00000000 rtc.c
00000000 l    df *ABS*	00000000 sm_pool.c
00000000 l    df *ABS*	00000000 digital.c
00000000 l    df *ABS*	00000000 pwm.c
00000000 l    df *ABS*	00000000 usb_midi.c
0000d6d8 l     F .text.itcm	000000b0 rx_event
20015924 l     O .bss	00000004 rx_available
20015938 l     O .bss	0000000c rx_count
20015d1f l     O .bss	00000001 rx_head
20015954 l     O .bss	0000000c rx_index
2001596c l     O .bss	00000007 rx_list
20015d04 l     O .bss	00000002 rx_packet_size
20015d21 l     O .bss	00000001 rx_tail
20003820 l     O .bss	000000c0 rx_transfer
20015d24 l     O .bss	00000001 transmit_previous_timeout
20015d08 l     O .bss	00000002 tx_available
20015d26 l     O .bss	00000001 tx_head
20015d28 l     O .bss	00000001 tx_noautoflush
20015d0c l     O .bss	00000002 tx_packet_size
200039a0 l     O .bss	00000080 tx_transfer
20200a40 l     O .bss.dma	00000800 txbuffer
20201240 l     O .bss.dma	00000c00 rx_buffer
00000000 l    df *ABS*	00000000 yield.cpp
20015d1a l     O .bss	00000001 yield::running
00000000 l    df *ABS*	00000000 eventresponder.cpp
00000000 l    df *ABS*	00000000 dmachannel.cpp
00000000 l    df *ABS*	00000000 usb_inst.cpp
00000000 l    df *ABS*	00000000 time.cpp
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 usb_audio.cpp
0000e400 l     F .text.itcm	000000b0 copy_to_buffers(unsigned long const*, short*, short*, unsigned int)
0000e4b0 l     F .text.itcm	0000005c sync_event(transfer_struct*)
0000e778 l     F .text.itcm	00000054 rx_event(transfer_struct*)
0000e8f0 l     F .text.itcm	00000060 tx_event(transfer_struct*)
20001c38 l     O .data	00000004 usb_audio_transmit_callback::count
20201fc0 l     O .bss.dma	000000b4 rx_buffer
20202080 l     O .bss.dma	000000b4 tx_buffer
00000000 l    df *ABS*	00000000 print.cpp
00000000 l    df *ABS*	00000000 new.cpp
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 intervaltimer.cpp
0000f1d4 l     F .text.itcm	00000058 pit_isr()
200026c0 l     O .bss	00000010 funct_table
00000000 l    df *ABS*	00000000 atexit_arm.o
00000000 l    df *ABS*	00000000 libc_a-malloc.o
00000000 l    df *ABS*	00000000 libc_a-mallocr.o
00000000 l    df *ABS*	00000000 libc_a-mlock.o
00000000 l    df *ABS*	00000000 libc_a-reallocr.o
00000000 l    df *ABS*	00000000 libc_a-cxa_atexit.o
00000000 l    df *ABS*	00000000 libc_a-findfp.o
0000fc8c l     F .text.itcm	00000018 stdio_exit_handler
0000fca4 l     F .text.itcm	00000040 cleanup_stdio
0000fce4 l     F .text.itcm	000000d4 global_stdio_init.part.0
00000000 l    df *ABS*	00000000 libc_a-fwalk.o
00000000 l    df *ABS*	00000000 libc_a-stdio.o
00000000 l    df *ABS*	00000000 libc_a-vdprintf.o
00000000 l    df *ABS*	00000000 libc_a-vasnprintf.o
00000000 l    df *ABS*	00000000 libc_a-memcmp.o
00000000 l    df *ABS*	00000000 libc_a-memmove.o
00000000 l    df *ABS*	00000000 libc_a-memset.o
00000000 l    df *ABS*	00000000 libc_a-strncmp.o
00000000 l    df *ABS*	00000000 libc_a-strncpy.o
00000000 l    df *ABS*	00000000 libc_a-locale.o
00000000 l    df *ABS*	00000000 libc_a-closer.o
00000000 l    df *ABS*	00000000 libc_a-lseekr.o
00000000 l    df *ABS*	00000000 libc_a-readr.o
00000000 l    df *ABS*	00000000 libc_a-sbrkr.o
00000000 l    df *ABS*	00000000 libc_a-writer.o
00000000 l    df *ABS*	00000000 libc_a-errno.o
00000000 l    df *ABS*	00000000 libc_a-init.o
00000000 l    df *ABS*	00000000 libc_a-lock.o
00000000 l    df *ABS*	00000000 libc_a-memchr.o
00000000 l    df *ABS*	00000000 libc_a-strlen.o
00000000 l    df *ABS*	00000000 libc_a-__atexit.o
00000000 l    df *ABS*	00000000 libc_a-freer.o
00000000 l    df *ABS*	00000000 libc_a-mbtowc_r.o
00000000 l    df *ABS*	00000000 libc_a-mprec.o
00000000 l    df *ABS*	00000000 libc_a-wctomb_r.o
00000000 l    df *ABS*	00000000 libc_a-svfprintf.o
00000000 l    df *ABS*	00000000 libc_a-fclose.o
00000000 l    df *ABS*	00000000 libc_a-fflush.o
00000000 l    df *ABS*	00000000 libc_a-localeconv.o
00000000 l    df *ABS*	00000000 libm_a-s_frexp.o
00000000 l    df *ABS*	00000000 libc_a-assert.o
00000000 l    df *ABS*	00000000 libc_a-callocr.o
00000000 l    df *ABS*	00000000 libc_a-dtoa.o
00012f18 l     F .text.itcm	00000126 quorem
00000000 l    df *ABS*	00000000 libc_a-wcrtomb.o
00000000 l    df *ABS*	00000000 libc_a-wcsrtombs.o
00000000 l    df *ABS*	00000000 libc_a-fiprintf.o
00000000 l    df *ABS*	00000000 libc_a-svfiprintf.o
00000000 l    df *ABS*	00000000 libc_a-vfiprintf.o
00013eb8 l     F .text.itcm	00000076 __sprint_r.part.0
00014ebc l     F .text.itcm	00000080 __sbprintf
00000000 l    df *ABS*	00000000 libc_a-fvwrite.o
00000000 l    df *ABS*	00000000 libc_a-wsetup.o
00000000 l    df *ABS*	00000000 libc_a-fputwc.o
00000000 l    df *ABS*	00000000 libc_a-wcsnrtombs.o
00000000 l    df *ABS*	00000000 libc_a-makebuf.o
00000000 l    df *ABS*	00000000 libc_a-wbuf.o
00000000 l    df *ABS*	00000000 libc_a-fstatr.o
00000000 l    df *ABS*	00000000 libc_a-isattyr.o
00000000 l    df *ABS*	00000000 effect_delay_ext.cpp
00000000 l    df *ABS*	00000000 libc_a-ctype_.o
00000000 l    df *ABS*	00000000 libc_a-impure.o
00000000 l    df *ABS*	00000000 libc_a-__call_atexit.o
00000000 l    df *ABS*	00000000 exfatvolume.cpp
00000000 l    df *ABS*	00000000 fatvolume.cpp
00000000 l    df *ABS*	00000000 hardwareserial.cpp
00015718 l     F .text.itcm	00000008 ___init_veneer
00015720 l     F .text.itcm	00000008 ___reboot_Teensyduino__veneer
00015728 l     F .text.itcm	00000008 ___ZNK16CrashReportClass7printToER5Print_veneer
00015730 l     F .text.itcm	00000008 ___ZN11AudioStream17initialize_memoryEP18audio_block_structj_veneer
00015738 l     F .text.itcm	00000008 ___ZN16CrashReportClasscvbEv_veneer
600026c8 l     F .text.code	00000008 ___ZN5Print5printEl_veneer
600026d0 l     F .text.code	00000008 ___ZN5Print11printNumberEmhh_veneer
600026d8 l     F .text.code	00000008 ___ZN5Print10printFloatEdh_veneer
600026e0 l     F .text.code	00000008 __main_veneer
600026e8 l     F .text.code	00000008 __pwm_init_veneer
600026f0 l     F .text.code	00000008 __usb_init_serialnumber_veneer
600026f8 l     F .text.code	00000008 __memset_veneer
60002700 l     F .text.code	00000008 ___ZN5Print7printlnEv_veneer
60002708 l     F .text.code	00000008 __sm_set_pool_veneer
60002710 l     F .text.code	00000008 __delay_veneer
60002718 l     F .text.code	00000008 __set_arm_clock_veneer
60002720 l     F .text.code	00000008 ___ZN13IntervalTimer11beginCyclesEPFvvEm_veneer
60002728 l     F .text.code	00000008 ____libc_init_array_veneer
60002730 l     F .text.code	00000008 ___Znwj_veneer
00000358  w    F .text.itcm	0000006e SDFile::getModifyTime(DateTimeFields&)
200077c8 g     O .bss	00000004 AudioInputUSB::incoming_right
00002a90 g     F .text.itcm	000000b8 toUpcase(unsigned short)
0000b834 g     F .text.itcm	00000018 usb_serial_available
20007810 g     O .bss	00000004 AudioOutputUSB::left_2nd
200078d4 g     O .bss	00000008 I2S_32::dma
000156f0 g     F .text.itcm	00000024 _isatty_r
200078c4 g     O .bss	00000008 AsyncAudioInputSPDIF3::dma
20015cfa g     O .bss	00000002 AudioInputUSB::incoming_count
6000178c g     F .text.code	00000002 startup_default_late_hook
000102c8 g     F .text.itcm	0000002c _lseek_r
20007724 g     O .bss	00000004 AudioStream::memory_pool
00009bcc g     F .text.itcm	00000088 SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)
0000daa4  w    F .text.itcm	000000fc yield
00009fb0 g     F .text.itcm	0000011c SdioCard::cardCMD6(unsigned long, unsigned char*)
20007c1c g     O .bss	00000004 acq_miss
00007da8  w    F .text.itcm	0000000e DedicatedSpiCard::~DedicatedSpiCard()
200158a8 g     O .bss	00000060 proc_stat
20015cec g     O .bss	00000004 usb_timer1_callback
00006760 g     F .text.itcm	000001f8 FatFile::write(void const*, unsigned int)
20005a40 g     O .bss	000000b4 usb_audio_transmit_buffer
600028c8 g     O .text.progmem	00000018 usb_string_manufacturer_name_default
200158a4 g     O .bss	00000004 proc
60001888 g     F .text.code	00000384 configure_external_ram
00007da0  w    F .text.itcm	00000004 DedicatedSpiCard::isDedicatedSpi()
000066ec g     F .text.itcm	00000074 FatFile::truncate()
20006408 g     O .bss	00000140 Wire1
0000183c g     F .text.itcm	0000001c setSyncProvider(long long (*)())
000072c4 g     F .text.itcm	00000166 FatFile::makeSFN(FatLfn_t*)
20015d14 g     O .bss	00000001 AudioStream::update_scheduled
2000771c g     O .bss	00000004 FsDateTime::callback
20007a88 g     O .bss	00000001 __lock___atexit_recursive_mutex
00013d2c g     F .text.itcm	0000004c _wcrtomb_r
20015d2c g     O .bss	00000001 usb_audio_transmit_setting
0000742c g     F .text.itcm	000000d8 FatFile::makeUniqueSfn(FatLfn_t*)
000084a8 g     F .text.itcm	00000068 SharedSpiCard::writeStart(unsigned long)
0000ec74 g     F .text.itcm	0000001c Print::println()
000094fc g     F .text.itcm	00000026 DedicatedSpiCard::begin(SdSpiConfig)
200008d8 g     O .data	00000074 vtable for DedicatedSpiCard
20015cf0 g     O .bss	00000002 AudioStream::memory_used
0000feb8 g     F .text.itcm	00000020 __sseek
0000fdb8 g     F .text.itcm	0000003c __sinit
000037c0 g     F .text.itcm	000000ea ExFatFile::seekSet(unsigned long long)
00015614 g     F .text.itcm	000000b0 __swbuf_r
00000498  w    F .text.itcm	00000028 File::flush()
000003c8  w    F .text.itcm	0000006e SDFile::getCreateTime(DateTimeFields&)
20015cd4 g     O .bss	00000004 usb_audio_overrun_count
0000f89c g     F .text.itcm	0000000c __malloc_unlock
000001c4  w    F .text.itcm	000000b4 SDFile::openNextFile(unsigned char)
200078dc g     O .bss	00000004 FsVolume::m_cwv
00005c24 g     F .text.itcm	000000f8 FatFile::open(FatFile*, char const*, int)
00007d94  w    F .text.itcm	00000004 SharedSpiCard::errorData() const
60002668 g     F .text.code	00000054 analog_init
0000fee0 g     F .text.itcm	0000004a _vdprintf_r
000058e0 g     F .text.itcm	0000003a FatFile::getCreateDateTime(unsigned short*, unsigned short*)
00008430 g     F .text.itcm	00000076 SharedSpiCard::readOCR(unsigned long*)
200021ec g     O .data	00000004 shift
20001c10 g     O .data	00000004 F_CPU_ACTUAL
200009d0  w    O .data	0000005c vtable for SDFile
200077c0 g     O .bss	00000004 AudioInputUSB::ready_right
0001000c g     F .text.itcm	000000f8 memmove
000000e4 g     F .text.itcm	0000000a getTime()
000108bc g     F .text.itcm	0000004c _Balloc
0001574c g       .ARM.exidx	00000000 __exidx_end
20015848 g     O .bss	00000004 feedback_accumulator
00006aec g     F .text.itcm	000000d0 FatPartition::freeChain(unsigned long)
20015d17 g     O .bss	00000001 EventResponder::runningFromYield
0000e7cc g     F .text.itcm	0000001c AudioOutputUSB::begin()
0000aff0 g     F .text.itcm	00000016 SdSpiArduinoDriver::receive()
0000d0a4 g     F .text.itcm	00000060 tempmonGetTemp
0000eb54 g     F .text.itcm	00000054 Print::write(unsigned char const*, unsigned int)
20001c3c g     O .data	00000004 __atexit_recursive_mutex
00010370 g     F .text.itcm	0000000c __errno
000000bc  w    F .text.itcm	00000026 SDFile::isDirectory()
00004a1c g     F .text.itcm	00000176 ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
00000788  w    F .text.itcm	00000044 File::write(unsigned char const*, unsigned int)
20003a20 g     O .bss	00000020 tx_transfer
60001000 g     O .text.headers	00000020 ImageVectorTable
00000994  w    F .text.itcm	000000a8 File::~File()
20007824 g     O .bss	00000004 EventResponder::firstInterrupt
0000cd04 g     F .text.itcm	00000004 usb_transfer_status
2001587c g     O .bss	00000014 patchCord2
0000d004 g     F .text.itcm	0000009c sm_set_pool
00002b94 g     F .text.itcm	0000007c ExFatFormatter::writeUpcaseUnicode(unsigned short)
0000e50c g     F .text.itcm	0000011c AudioOutputUSB::update()
20007c00 g     O .bss	00000004 __stdio_exit_handler
00007a7c g     F .text.itcm	00000086 FsBaseFile::FsBaseFile(FsBaseFile const&)
0000437c g     F .text.itcm	00000058 ExFatPartition::rootLength()
200078ac g     O .bss	00000008 AudioOutputSPDIF3::dma
0000069c  w    F .text.itcm	00000054 SDFile::setCreateTime(DateTimeFields const&)
0000de10  w    F .text.itcm	00000008 usb_serial_class::write(unsigned char const*, unsigned int)
000156c4 g     F .text.itcm	0000002c _fstat_r
20000da4 g     O .data	00000370 digital_pin_to_info_PGM
20015834 g     O .bss	00000004 errno
0000b008 g     F .text.itcm	00000024 SdSpiArduinoDriver::receive(unsigned char*, unsigned int)
000040b8 g     F .text.itcm	00000042 ExFatPartition::fatGet(unsigned long, unsigned long*)
60002804 g     O .text.progmem	00000050 TwoWire::i2c3_hardware
00015748 g       .text.itcm	00000000 _etext
00001d20 g     F .text.itcm	000000dc _spi_dma_rxISR0()
00007828 g     F .text.itcm	000000bc FatFile::parsePathName(char const*, FatLfn_t*, char const**)
200026c0 g       .bss	00000000 _sbss
00004f08 g     F .text.itcm	0000005c FatFormatter::writeMbr()
0000b090 g     F .text.itcm	00000006 sdCsInit(unsigned char)
00002678 g     F .text.itcm	00000114 SDClass::mediaPresent()
00009740 g     F .text.itcm	0000000c SdioCard::errorData() const
00000d60 g     F .text.itcm	00000078 process(void*)
00009c54 g     F .text.itcm	00000148 SdioCard::writeSector(unsigned long, unsigned char const*)
00002dcc g     F .text.itcm	00000558 ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)
0000d158 g     F .text.itcm	00000024 digitalRead
60002ba0 g       *ABS*	00000000 _stextload
00001068 g     F .text.itcm	000000a0 loop
0000eb18 g     F .text.itcm	0000003c usb_audio_set_feature
0000d8a0 g     F .text.itcm	0000014c usb_midi_flush_output
0000c9cc g     F .text.itcm	00000064 usb_config_rx
00003544 g     F .text.itcm	000000b0 ExFatFile::parsePathName(char const*, ExName_t*, char const**)
20015890 g     O .bss	00000014 patchCord3
0000aaf8 g     F .text.itcm	0000014c SdioCard::readData(unsigned char*)
20007820 g     O .bss	00000004 EventResponder::lastInterrupt
00007b04 g     F .text.itcm	0000002e FsBaseFile::close()
0000208c g     F .text.itcm	00000048 SPIClass::end()
0000b09c g     F .text.itcm	00000134 memcpy
00000438  w    F .text.itcm	00000060 File::available()
00007db8 g     F .text.itcm	0000008c SharedSpiCard::writeStop()
200026c0 g     O .data	00000000 .hidden __TMC_END__
0000413c g     F .text.itcm	000000bc ExFatPartition::freeChain(unsigned long)
00005f64 g     F .text.itcm	00000028 FatFile::peek()
00011050 g     F .text.itcm	00001b44 _svfprintf_r
20015d1b  w    O .bss	00000001 SDFile::name()::zeroterm
2001598c g     O .bss	00000004 systick_millis_count
000047c4 g     F .text.itcm	000000ec ExFatFile::rename(ExFatFile*, char const*)
000002c8  w    F .text.itcm	0000003c SDFile::truncate(unsigned long long)
2000780c g     O .bss	00000004 AudioOutputUSB::left_1st
20015d2e g     O .bss	00000001 usb_configuration
00007d88  w    F .text.itcm	00000006 SdCardInterface::status()
60000000 g     O .text.headers	00000200 FlexSPI_NOR_Config
0000a26c g     F .text.itcm	0000016c SdioCard::writeData(unsigned char const*)
0000a148 g     F .text.itcm	00000124 SdioCard::syncDevice()
0000073c  w    F .text.itcm	0000004c StreamFile<FsBaseFile, unsigned long long>::available()
00005f8c g     F .text.itcm	00000044 FatFile::readDirCache(bool)
0000928c g     F .text.itcm	000000fc SharedSpiCard::sectorCount()
2000772c g     O .bss	00000070 AudioStream::memory_pool_available_mask
600028c8  w    O .text.progmem	00000018 usb_string_manufacturer_name
0000f310 g     F .text.itcm	00000010 malloc
600027b4 g     O .text.progmem	00000050 TwoWire::i2c1_hardware
00002594 g     F .text.itcm	000000e2 SDClass::format(int, char, Print&)
200009a0  w    O .data	00000024 vtable for FsFile
0000cfc0  w    F .text.itcm	0000000a _fstat
00001864  w    F .text.itcm	0000001e TwoWire::read()
00012e60 g     F .text.itcm	00000040 __assert_func
00001c2c  w    F .text.itcm	00000016 EventResponder::triggerEvent(int, void*)
20015cfc g     O .bss	00000002 AudioOutputUSB::offset_1st
200003a8 g     O .data	000000c8 __mprec_tens
60001648 g     F .text.code	000000e8 usb_init
20015cf8 g     O .bss	00000002 AudioStream::memory_pool_first_mask
20201fa0 g     O .bss.dma	00000004 usb_audio_sync_feedback
00007d90  w    F .text.itcm	00000004 SharedSpiCard::errorCode() const
00000904  w    F .text.itcm	0000008e SDFile::seek(unsigned long long, int)
20007ac4 g     O .bss	00000004 __malloc_top_pad
20006228 g     O .bss	00000050 SPI1
20015990 g     O .bss	00000004 systick_safe_read
aaaaaabf g       *ABS*	00000000 _flexram_bank_config
00004b94 g     F .text.itcm	000000f2 ExFatFile::truncate()
20001c44 g     O .data	00000000 .hidden __dso_handle
00012de0 g     F .text.itcm	00000008 _localeconv_r
0000af98 g     F .text.itcm	0000004e SdSpiArduinoDriver::deactivate()
00014f3c g     F .text.itcm	000002f4 __sfvwrite_r
00010a60 g     F .text.itcm	0000005c __i2b
20000000 g       .data	00000000 _sdata
00005160 g     F .text.itcm	000002cc FatFormatter::makeFat32()
60002a3c g     O .text.progmem	00000155 usb_config_descriptor_480
0000afe8 g     F .text.itcm	00000006 SdSpiArduinoDriver::end()
00010320 g     F .text.itcm	00000024 _sbrk_r
00009800 g     F .text.itcm	0000001c SdioCard::type() const
60001784 g     F .text.code	00000002 startup_default_early_hook
60001428 g     F .text.code	00000220 ResetHandler
0000b918 g     F .text.itcm	00000020 usb_serial_getchar
00000278  w    F .text.itcm	00000050 SDFile::name()
20015cdc g     O .bss	00000008 usb_cdc_line_coding
0000d104 g     F .text.itcm	00000054 digitalWrite
20007828 g     O .bss	00000004 EventResponder::lastYield
0000351c g     F .text.itcm	00000028 ExFatFile::openRoot(ExFatVolume*)
000102f4 g     F .text.itcm	0000002c _read_r
0000d788 g     F .text.itcm	00000118 usb_midi_configure
000005b0  w    F .text.itcm	00000038 StreamFile<FsBaseFile, unsigned long long>::read()
00007da4  w    F .text.itcm	00000002 DedicatedSpiCard::~DedicatedSpiCard()
00000304  w    F .text.itcm	00000054 SDFile::setModifyTime(DateTimeFields const&)
00012b94 g     F .text.itcm	000000c6 _fclose_r
0000974c g     F .text.itcm	00000024 SdioCard::readCID(cid_t*)
20015838 g     O .bss	00000010 extmem_smalloc_pool
20007abc g     O .bss	00000004 __malloc_max_sbrked_mem
00008c50 g     F .text.itcm	00000180 DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)
20015d16 g     O .bss	00000001 AudioOutputUSB::update_responsibility
00000070  w    F .text.itcm	0000001a SDFile::position()
0000d17c g     F .text.itcm	00000070 pinMode
0000ed68 g     F .text.itcm	000003fc Print::printFloat(double, unsigned char)
200077bc g     O .bss	00000004 AudioInputUSB::ready_left
200077dc g     O .bss	00000008 AudioInputTDM2::dma
20006548 g     O .bss	00000140 Wire2
6001ac00 g     O .text.csf	00000c00 hab_csf
20015994 g     O .bss	00000190 t1_buffer
000004c0  w    F .text.itcm	0000002c File::peek()
00006bbc g     F .text.itcm	000000a0 FatPartition::freeClusterCount()
20280000 g       .text.csf	00000000 _heap_end
00002214  w    F .text.itcm	000000c8 SDClass::open(char const*, unsigned char)
00015744 g       .ARM.exidx	00000000 __exidx_start
70000000 g       .bss.extram	00000000 _extram_end
00000158  w    F .text.itcm	0000000c DMAChannel::~DMAChannel()
0000cfcc  w    F .text.itcm	00000004 _isatty
2000781c g     O .bss	00000004 EventResponder::firstYield
00000668  w    F .text.itcm	00000034 StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)
0000f8a8 g     F .text.itcm	000003d8 _realloc_r
00000598  w    F .text.itcm	00000018 SDFile::read(void*, unsigned int)
0001037c g     F .text.itcm	00000048 __libc_init_array
0000018c  w    F .text.itcm	00000038 SDFile::rewindDirectory()
00001858  w    F .text.itcm	0000000c TwoWire::available()
20015b24 g     O .bss	00000190 to_buffer
00003e50 g     F .text.itcm	0000000e ExFatFile::open(ExFatVolume*, char const*, int)
00002190 g     F .text.itcm	00000084 SDClass::dateTime(unsigned short*, unsigned short*)
00004714 g     F .text.itcm	000000ae ExFatFile::addDirCluster()
0000eab4 g     F .text.itcm	00000064 usb_audio_get_feature
000153a8 g     F .text.itcm	00000066 _fputwc_r
20000380 g     O .data	00000028 __mprec_bigtens
0000cfdc  w    F .text.itcm	00000004 abort
0000ddf8  w    F .text.itcm	00000004 usb_serial_class::clear()
0000cf80 g     F .text.itcm	00000034 _sbrk
600182ec g       *ABS*	00000000 _sdataload
00000dd8 g     F .text.itcm	000000c4 I2S_32::isr32()
00010dc8 g     F .text.itcm	00000042 __mcmp
20000a50 g     O .data	00000030 vtable for SDClass
20007804 g     O .bss	00000008 AudioOutputTDM::dma
20001c40 g     O .data	00000004 __brkval
20015d2d g     O .bss	00000001 usb_cdc_line_rtsdtr
600026bc g     F .text.code	00000000 _init
0000b580 g     F .text.itcm	00000002 usb_serial_reset
000057ec g     F .text.itcm	0000001e FatFile::cacheDirEntry(unsigned char)
20000740 g     O .data	00000070 SPIClass::spiclass_lpspi1_hardware
20015d2a g     O .bss	00000001 usb_audio_sync_nbytes
600025a0 g     F .text.code	000000c8 AudioStream::initialize_memory(audio_block_struct*, unsigned int)
000024cc  w    F .text.itcm	00000054 SDClass::remove(char const*)
00000164  w    F .text.itcm	00000028 SDFile::close()
000007cc  w    F .text.itcm	00000040 SDFile::~SDFile()
600028e4 g     O .text.progmem	00000155 usb_config_descriptor_12
20000a80 g     O .data	00000024 vtable for TwoWire
0000af70 g     F .text.itcm	00000028 SdSpiArduinoDriver::begin(SdSpiConfig)
20007c04 g     O .bss	00000018 acq
20015d60 g       .bss	00000000 _ebss
00009d9c g     F .text.itcm	00000088 SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)
0000062c  w    F .text.itcm	00000014 StreamFile<FsBaseFile, unsigned long long>::flush()
000109c0 g     F .text.itcm	00000040 __hi0bits
00003484 g     F .text.itcm	0000003c ExFatFile::dirCache(unsigned char, unsigned char)
600024f8 g     F .text.code	00000050 CrashReportClass::clear()
00001a68 g     F .text.itcm	000000b0 lpi2c3_isr()
0000278c g     F .text.itcm	000000d8 SDClass::begin(unsigned char)
20202140 g       .bss.dma	00000000 _heap_start
20007a8c g     O .bss	00000001 __lock___malloc_recursive_mutex
20015cb4 g     O .bss	00000020 usb1
0000218c  w    F .text.itcm	00000002 SDClass::~SDClass()
60002854 g     O .text.progmem	00000050 TwoWire::i2c4_hardware
00000158  w    F .text.itcm	0000000c DMAChannel::~DMAChannel()
20007ac8 g     O .bss	00000138 __sf
20001c08 g     O .data	00000004 CrashReport
20014420 g     O .bss	00001400 diskBuffer
20007814 g     O .bss	00000004 AudioOutputUSB::right_1st
00008640  w    F .text.itcm	000000ec SharedSpiCard::readCID(cid_t*)
00007f90 g     F .text.itcm	000000c4 SharedSpiCard::cardCommand(unsigned char, unsigned long)
00000994  w    F .text.itcm	000000a8 File::~File()
00000003 g       *ABS*	00000000 _itcm_block_count
20002700 g     O .bss	00000020 endpoint0_transfer_data
000054e0 g     F .text.itcm	0000002a FatFile::getLfnChar(DirLfn_t*, unsigned char)
000029b8 g     F .text.itcm	0000007e FsCache::prepare(unsigned long, unsigned char)
0000f16c g     F .text.itcm	00000004 operator delete(void*, unsigned int)
0000d1ec g     F .text.itcm	000004ec pwm_init
0000e628 g     F .text.itcm	00000150 usb_audio_receive_callback
2001584c g     O .bss	00000014 file
00000f98 g     F .text.itcm	000000d0 I2S_32::begin()
6001b800 g       .text.csf	00000000 __text_csf_end
60001c0c g     F .text.code	0000005c usb_pll_start
00010c18 g     F .text.itcm	000000c0 __pow5mult
000061bc g     F .text.itcm	0000008e FatFile::rmdir()
200008cc g     O .data	0000000c vtable for CrashReportClass
00001908 g     F .text.itcm	000000b0 lpi2c4_isr()
00006a34 g     F .text.itcm	000000b8 FatPartition::allocateCluster(unsigned long, unsigned long*)
00009530  w    F .text.itcm	00000002 SdioCard::end()
0000255c  w    F .text.itcm	00000036 SDClass::exists(char const*)
2000779c g     O .bss	00000004 AudioStream::unused
200026e0 g     O .bss	00000020 endpoint0_transfer_ack
20015ce4 g     O .bss	00000004 usb_cdc_line_rtsdtr_millis
0000cb94 g     F .text.itcm	000000b8 usb_transmit
0000dffc g     F .text.itcm	00000064 software_isr()
0000dc70 g     F .text.itcm	00000020 systick_isr
00003388 g     F .text.itcm	0000009e ExFatFile::getName7(char*, unsigned int)
000103d0 g     F .text.itcm	00000002 __retarget_lock_release_recursive
20007728 g     O .bss	00000004 AudioStream::first_update
20001c14 g     O .data	00000010 Serial
20015cf2 g     O .bss	00000002 AudioStream::memory_used_max
0000e388 g     F .text.itcm	00000034 AudioConnection::~AudioConnection()
0000de18  w    F .text.itcm	00000006 usb_serial_class::write(unsigned char)
00007bd4 g     F .text.itcm	00000074 FsBaseFile::openNext(FsBaseFile*, int)
60001784  w    F .text.code	00000002 startup_early_hook
20015d29 g     O .bss	00000001 usb_audio_receive_setting
000043d4 g     F .text.itcm	00000092 ExFatFile::addCluster()
20007720 g     O .bss	00000004 FsDateTime::callback2
20000974  w    O .data	0000002c vtable for File
0000917c g     F .text.itcm	0000008c SharedSpiCard::readData(unsigned char*, unsigned int)
00002318  w    F .text.itcm	000000fa SDClass::usedSize()
0000b7f0 g     F .text.itcm	00000044 usb_serial_peekchar
0000fdf4 g     F .text.itcm	0000000c __sfp_lock_acquire
000103e0 g     F .text.itcm	00000000 memchr
000069cc g     F .text.itcm	00000068 FatPartition::fatPut(unsigned long, unsigned long)
0000ba60 g     F .text.itcm	000002f0 set_arm_clock
20015988 g     O .bss	00000004 systick_cycle_count
200021f4 g     O .data	00000016 usb_string_serial_number_default
00010684 g     F .text.itcm	0000020c _free_r
00009388 g     F .text.itcm	00000174 SharedSpiCard::erase(unsigned long, unsigned long)
00009e24 g     F .text.itcm	000000b8 SdioCard::readStop()
00007d98  w    F .text.itcm	00000004 SharedSpiCard::type() const
00010298 g     F .text.itcm	0000000c __locale_mb_cur_max
00013d78 g     F .text.itcm	00000016 _wcsrtombs_r
200078f8 g     O .bss	00000190 __atexit0
0000de08  w    F .text.itcm	00000004 usb_serial_class::flush()
00008054 g     F .text.itcm	000000f4 SharedSpiCard::readSCR(scr_t*)
00002c10 g     F .text.itcm	000001bc ExFatFormatter::writeUpcase(unsigned long)
200021bc g     O .data	00000004 __malloc_sbrk_base
0000de00  w    F .text.itcm	00000004 usb_serial_class::read()
20007894 g     O .bss	00000008 AudioOutputI2SOct::dma
20015cfe g     O .bss	00000002 I2S_32::block_offset
000078e4 g     F .text.itcm	00000196 FatFile::remove()
0000cfd0  w    F .text.itcm	00000006 _lseek
0000cfd8  w    F .text.itcm	00000004 __cxa_pure_virtual
00010cd8 g     F .text.itcm	000000f0 __lshift
00005ac4 g     F .text.itcm	00000160 FatFile::mkdir(FatFile*, char const*, bool)
0000cb64 g     F .text.itcm	00000030 usb_prepare_transfer
00007d9c  w    F .text.itcm	00000004 DedicatedSpiCard::hasDedicatedSpi()
0000ce04 g     F .text.itcm	0000017c unused_interrupt_vector
200077c4 g     O .bss	00000004 AudioInputUSB::incoming_left
00013db8 g     F .text.itcm	00000100 __ssprint_r
60001c68 g     F .text.code	00000130 tempmon_init
20015ce8 g     O .bss	00000004 usb_timer0_callback
00006e68 g     F .text.itcm	0000045c FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)
0000ff48 g     F .text.itcm	00000062 _vasnprintf_r
0000f164  w    F .text.itcm	00000002 serialEvent()
200077f4 g     O .bss	00000010 AudioOutputPWM::dma
0001055c g     F .text.itcm	00000088 __register_exitproc
00003d5c g     F .text.itcm	000000f4 ExFatFile::open(ExFatFile*, char const*, int)
0000e1a4 g     F .text.itcm	00000046 AudioStream::receiveWritable(unsigned int)
000101a8 g     F .text.itcm	0000008a strncmp
00006da4 g     F .text.itcm	000000c4 FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)
00007c48 g     F .text.itcm	00000114 FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)
000048b0 g     F .text.itcm	0000016a ExFatFile::mkdir(ExFatFile*, char const*, bool)
00004f64 g     F .text.itcm	000001fc FatFormatter::makeFat16()
0000e1ec g     F .text.itcm	000000bc AudioConnection::AudioConnection(AudioStream&, unsigned char, AudioStream&, unsigned char)
0000b84c g     F .text.itcm	000000cc usb_serial_flush_input
000041f8 g     F .text.itcm	00000098 ExFatPartition::freeClusterCount()
200009c4 g     O .data	0000000c vtable for I2S_32
00010abc g     F .text.itcm	0000015c __multiply
0000b938 g     F .text.itcm	0000002c usb_serial_putchar
00000025 g       *ABS*	00000000 _teensy_model_identifier
00008148 g     F .text.itcm	000001fc SharedSpiCard::begin(SdSpiConfig)
2000784c g     O .bss	00000008 AudioOutputI2S2::dma
00010234 g     F .text.itcm	00000064 strncpy
20007a94 g     O .bss	00000028 __malloc_current_mallinfo
200077cc g     O .bss	00000008 AudioInputI2S2::dma
20000820 g     O .data	00000070 SPIClass::spiclass_lpspi4_hardware
00010f60 g     F .text.itcm	000000d4 __d2b
00007ec4 g     F .text.itcm	000000cc SharedSpiCard::writeData(unsigned char const*)
2000782c g     O .bss	00000020 HardwareSerial::s_serials_with_serial_events
00009528  w    F .text.itcm	00000004 SdCardInterface::isDedicatedSpi()
60001730 g     F .text.code	00000054 _reboot_Teensyduino_
0000f22c g     F .text.itcm	000000d8 IntervalTimer::beginCycles(void (*)(), unsigned long)
000097f0  w    F .text.itcm	0000000e SdioCard::~SdioCard()
0000e1ec g     F .text.itcm	000000bc AudioConnection::AudioConnection(AudioStream&, unsigned char, AudioStream&, unsigned char)
00000e9c g     F .text.itcm	000000fc I2S_32::config_i2s()
60001788 g     F .text.code	00000002 startup_default_middle_hook
00008818 g     F .text.itcm	00000234 DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)
00009edc g     F .text.itcm	000000d4 SdioCard::writeStart(unsigned long)
0000bd50 g     F .text.itcm	00000c50 usb_isr
0000fc80 g     F .text.itcm	0000000c __cxa_atexit
000035f4 g     F .text.itcm	0000019e ExFatFile::read(void*, unsigned int)
0000e3bc g     F .text.itcm	00000044 AudioStream::update_setup()
000102a4 g     F .text.itcm	00000024 _close_r
000005e8  w    F .text.itcm	00000018 SDFile::peek()
00002a38 g     F .text.itcm	00000056 FsCache::sync()
200078bc g     O .bss	00000008 AudioOutputPT8211_2::dma
200061d8 g     O .bss	00000050 SPI
0000ffac g     F .text.itcm	00000060 memcmp
200078d0 g     O .bss	00000004 I2S_32::block_right
2000094c  w    O .data	00000028 vtable for usb_serial_class
0000b02c g     F .text.itcm	00000012 SdSpiArduinoDriver::send(unsigned char)
000103c8 g     F .text.itcm	00000002 __retarget_lock_close_recursive
0000b098 g     F .text.itcm	00000004 sdCsWrite(unsigned char, bool)
20015984 g     O .bss	00000004 scale_cpu_cycles_to_microseconds
20006278 g     O .bss	00000050 SPI2
00015230 g     F .text.itcm	000000cc __swsetup_r
0000451c g     F .text.itcm	0000005e ExFatFile::rmdir()
20007864 g     O .bss	00000008 AudioInputI2SHex::dma
20001db4 g     O .data	00000408 __malloc_av_
200078f4 g     O .bss	00000004 __atexit
00000618  w    F .text.itcm	00000014 SDFile::flush()
0000fe54 g     F .text.itcm	00000022 __sread
200038e0 g     O .bss	00000020 rx_transfer
0000b9cc g     F .text.itcm	00000094 usb_serial_flush_output
200077a4 g     O .bss	00000008 AudioInputI2S::dma
0000f890 g     F .text.itcm	0000000c __malloc_lock
00002b5c g     F .text.itcm	00000018 FsDateTime::setCallback(void (*)(unsigned short*, unsigned short*))
200008c0 g     O .data	0000000c vtable for AudioOutputUSB
20002400 g     O .data	000002c0 _VectorsRam
0000b040 g     F .text.itcm	0000004e SdSpiArduinoDriver::send(unsigned char const*, unsigned int)
00012d8c g     F .text.itcm	00000054 _fflush_r
00012ea0 g     F .text.itcm	00000078 _calloc_r
00001dfc g     F .text.itcm	00000234 SPIClass::begin()
20015860 g     O .bss	00000004 getTimePtr
00007504 g     F .text.itcm	00000324 FatFile::open(FatFile*, FatLfn_t*, int)
200021f0 g     O .data	00000004 t_acq
2000220d g     O .data	00000001 yield_active_check_flags
000046b4 g     F .text.itcm	0000005e ExFatFile::sync()
000103cc g     F .text.itcm	00000002 __retarget_lock_acquire_recursive
20015d2f g     O .bss	00000001 usb_high_speed
00005fd0 g     F .text.itcm	000001ea FatFile::rename(FatFile*, char const*)
0000a0cc g     F .text.itcm	0000007c SdioCard::isBusy()
200021d4 g     O .data	00000004 data
20007884 g     O .bss	00000008 AudioInputI2SQuad::dma
00010104 g     F .text.itcm	000000a4 memset
0000dfe0 g     F .text.itcm	00000010 main
200077e4 g     O .bss	00000008 AudioOutputI2S::dma
20015908 g     O .bss	00000010 rawData
20007ac0 g     O .bss	00000004 __malloc_max_total_mem
00003e84 g     F .text.itcm	000000c0 ExFatPartition::bitmapFind(unsigned long, unsigned long)
000103c4 g     F .text.itcm	00000002 __retarget_lock_init_recursive
20201e40 g     O .bss.dma	00000155 usb_descriptor_buffer
00008510 g     F .text.itcm	00000130 SharedSpiCard::writeSector(unsigned long, unsigned char const*)
200078cc g     O .bss	00000004 I2S_32::block_left
00001778 g     F .text.itcm	00000094 now()
00004c88 g     F .text.itcm	00000280 ExFatFile::write(void const*, unsigned int)
000028ec g     F .text.itcm	000000ca lbaToMbrChs(unsigned char*, unsigned long, unsigned long)
000006f0  w    F .text.itcm	0000004c SDFile::available()
0000fed8 g     F .text.itcm	00000008 __sclose
0000d9ec g     F .text.itcm	000000b8 usb_init_serialnumber
600027b4 g       .text.code	00000000 __init_array_end
00013040 g     F .text.itcm	00000cec _dtoa_r
0000f330 g     F .text.itcm	00000560 _malloc_r
00008ef8 g     F .text.itcm	0000014c DedicatedSpiCard::readSector(unsigned long, unsigned char*)
20015d18 g     O .bss	00000001 HardwareSerial::s_count_serials_with_serial_events
00011034 g     F .text.itcm	0000001a __ascii_wctomb
20015d2b g     O .bss	00000001 usb_audio_sync_rshift
000000a8  w    F .text.itcm	00000012 SDFile::isOpen()
00007a7c g     F .text.itcm	00000086 FsBaseFile::FsBaseFile(FsBaseFile const&)
200078e0 g     O .bss	00000004 FatVolume::m_cwv
2000786c g     O .bss	00000008 AudioInputI2SOct::dma
20000b18  w    O .data	00000010 SPIClass::beginTransaction(SPISettings)::clk_sel
0000dba0 g     F .text.itcm	00000084 EventResponder::triggerEventNotImmediate()
00002030 g     F .text.itcm	0000005a SPIClass::transfer(void const*, void*, unsigned int)
0000cdb0 g     F .text.itcm	00000054 micros
0000457c g     F .text.itcm	00000138 ExFatFile::syncDir()
00009208 g     F .text.itcm	00000082 SharedSpiCard::readSDS(sds_t*)
000105e4 g     F .text.itcm	000000a0 _malloc_trim_r
00015410 g     F .text.itcm	00000106 _wcsnrtombs_l
600028e0 g     O .text.progmem	00000004 string0
0000b964 g     F .text.itcm	00000018 usb_serial_write
6000178c  w    F .text.code	00000002 startup_late_hook
00008a4c g     F .text.itcm	000000d4 DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)
0000de04  w    F .text.itcm	00000004 usb_serial_class::available()
60002b9e g     O .text.progmem	00000001 _serialEvent_default
0000654c g     F .text.itcm	000000c8 FatFile::sync()
0000542c g     F .text.itcm	000000b4 FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)
00002520  w    F .text.itcm	0000003a SDClass::mkdir(char const*)
20000000 g     O .data	00000380 endpoint_queue_head
600028a4  w    O .text.progmem	00000024 usb_string_product_name
0000cd08 g     F .text.itcm	000000a8 delay
20015d00 g     O .bss	00000002 dma_channel_allocated_mask
000034f8 g     F .text.itcm	00000022 ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)
00015740 g     F .fini	00000000 _fini
000018a0 g     F .text.itcm	0000002a TwoWire::write(unsigned char)
00007e44 g     F .text.itcm	0000007e SharedSpiCard::isBusy()
2000789c g     O .bss	00000008 AudioOutputPT8211::dma
60001020 g     O .text.headers	0000000c BootData
200077ec g     O .bss	00000008 AudioOutputMQS::dma
20015cd8 g     O .bss	00000004 usb_audio_underrun_count
00003e60 g     F .text.itcm	00000024 ExFatFile::openNext(ExFatFile*, int)
0000eca0 g     F .text.itcm	0000001c Print::printf(char const*, ...)
0000eba8 g     F .text.itcm	000000cc Print::print(long)
0000580c g     F .text.itcm	000000d4 FatFile::close()
0000d0a0 g     F .text.itcm	00000004 Panic_Temp_isr
0000080c  w    F .text.itcm	00000048 SDFile::~SDFile()
00005958 g     F .text.itcm	0000016a FatFile::mkdir(FatFile*, FatLfn_t*)
00015518 g     F .text.itcm	00000024 _wcsnrtombs_r
000097ec  w    F .text.itcm	00000002 SdioCard::~SdioCard()
00000600  w    F .text.itcm	00000018 StreamFile<FsBaseFile, unsigned long long>::peek()
000004ec  w    F .text.itcm	00000054 File::write(unsigned char)
00010344 g     F .text.itcm	0000002c _write_r
0000e950 g     F .text.itcm	00000164 usb_audio_configure
000000f0 g     F .text.itcm	00000068 I2S_32::update()
20005d08 g     O .bss	000004d0 SD
00009960 g     F .text.itcm	00000110 SdioCard::erase(unsigned long, unsigned long)
20015d19 g     O .bss	00000001 I2S_32::update_responsibility
0000e10c g     F .text.itcm	00000050 AudioStream::release(audio_block_struct*)
20003900 g     O .bss	00000020 sync_transfer
200021d0 g     O .data	00000004 _impure_ptr
20000a2c  w    O .data	00000024 vtable for Stream
00003794 g     F .text.itcm	0000002c ExFatFile::peek()
00012c5c g     F .text.itcm	00000130 __sflush_r
20000890  w    O .data	00000024 vtable for StreamFile<FsBaseFile, unsigned long long>
2000787c g     O .bss	00000008 AudioOutputSPDIF::dma
200062c8 g     O .bss	00000140 Wire
00000640  w    F .text.itcm	00000014 SDFile::write(void const*, unsigned int)
0000e15c g     F .text.itcm	00000046 AudioStream::transmit(audio_block_struct*, unsigned char)
00007d5c g     F .text.itcm	00000028 FsVolume::open(char const*, int)
0000fe0c g     F .text.itcm	00000046 _fwalk_sglue
00009734 g     F .text.itcm	0000000c SdioCard::errorCode() const
00005d1c g     F .text.itcm	0000000e FatFile::open(FatVolume*, char const*, int)
00000654  w    F .text.itcm	00000014 StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)
60002738 g       .text.code	00000000 __preinit_array_end
60001d98 g     F .text.code	00000760 CrashReportClass::printTo(Print&) const
200077b4 g     O .bss	00000008 AudioInputTDM::dma
20007854 g     O .bss	00000008 AudioOutputTDM2::dma
00003fec g     F .text.itcm	00000036 ExFatPartition::dirCache(DirPos_t*, unsigned char)
00010890 g     F .text.itcm	0000002a __ascii_mbtowc
0000e060 g     F .text.itcm	000000ac AudioStream::allocate()
00006c5c g     F .text.itcm	00000148 FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)
0000c9a0 g     F .text.itcm	0000002c usb_stop_sof_interrupts
00001884  w    F .text.itcm	00000018 TwoWire::peek()
0000189c  w    F .text.itcm	00000002 TwoWire::flush()
00001238 g     F .text.itcm	000000d4 setup
20001a58 g     O .data	0000006c usb_descriptor_list
00009940 g     F .text.itcm	00000020 SdioCard::status()
0000591c g     F .text.itcm	0000003a FatFile::getModifyDateTime(unsigned short*, unsigned short*)
0000ca94 g     F .text.itcm	00000064 usb_config_rx_iso
0000006c  w    F .text.itcm	00000002 Print::flush()
00002414  w    F .text.itcm	00000052 SDClass::rmdir(char const*)
00005dbc g     F .text.itcm	000001a8 FatFile::read(void*, unsigned int)
00005d84 g     F .text.itcm	00000036 FatFile::openRoot(FatVolume*)
200077a0 g     O .bss	00000004 ExFatVolume::m_cwv
20068000 g       .text.csf	00000000 _estack
00007d84 g     F .text.itcm	00000004 operator new(unsigned int, unsigned long*)
0000ddc4 g     F .text.itcm	00000034 DMAChannel::release()
00000540  w    F .text.itcm	00000058 File::read()
0000b97c g     F .text.itcm	00000050 usb_serial_write_buffer_free
200021c4 g     O .data	0000000c __sglue
200077ac g     O .bss	00000008 AudioInputPDM::dma
0000b584 g     F .text.itcm	0000013c usb_serial_configure
000018cc g     F .text.itcm	0000003c TwoWire::write(unsigned char const*, unsigned int)
20015d15 g     O .bss	00000001 AudioInputUSB::receive_flag
00000854  w    F .text.itcm	000000b0 File::~File()
0000ec90  w    F .text.itcm	0000000e _write
200077d4 g     O .bss	00000008 AudioInputPDM2::dma
200026c0 g       .data	00000000 _edata
000040fc g     F .text.itcm	00000040 ExFatPartition::fatPut(unsigned long, unsigned long)
20015d1d g     O .bss	00000001 external_psram_size
000097ec  w    F .text.itcm	00000002 SdioCard::~SdioCard()
00004290 g     F .text.itcm	000000ec ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)
00007da4  w    F .text.itcm	00000002 DedicatedSpiCard::~DedicatedSpiCard()
00008b20 g     F .text.itcm	00000130 DedicatedSpiCard::setDedicatedSpi(bool)
00003428 g     F .text.itcm	0000005c ExFatFile::hashName(ExName_t*)
20001c28 g     O .data	0000000c AudioInputUSB::features
0000574c g     F .text.itcm	000000a0 FatFile::addDirCluster()
000152fc g     F .text.itcm	000000aa __fputwc
0000de0c  w    F .text.itcm	00000004 usb_serial_class::availableForWrite()
2000220a g     O .data	00000002 I2S_32::shift
000019b8 g     F .text.itcm	000000b0 lpi2c1_isr()
0000f170 g     F .text.itcm	00000062 ultoa
0000218c  w    F .text.itcm	00000002 SDClass::~SDClass()
0000180c g     F .text.itcm	00000030 second()
00007b34 g     F .text.itcm	000000a0 FsBaseFile::open(FsVolume*, char const*, int)
0000fe78 g     F .text.itcm	0000003e __swrite
0000f168 g     F .text.itcm	00000004 operator new(unsigned int)
200021c0 g     O .data	00000004 __malloc_trim_threshold
0000e2a8 g     F .text.itcm	000000e0 AudioConnection::disconnect()
0000ddfc  w    F .text.itcm	00000004 usb_serial_class::peek()
0000952c  w    F .text.itcm	00000004 SdCardInterface::setDedicatedSpi(bool)
00008344 g     F .text.itcm	000000ec SharedSpiCard::cardCMD6(unsigned long, unsigned char*)
00013d90 g     F .text.itcm	00000028 fiprintf
0000e7e8 g     F .text.itcm	00000108 usb_audio_transmit_callback
00013f30 g     F .text.itcm	00000f8c _vfiprintf_r
00010e0c g     F .text.itcm	00000154 __mdiff
00009794 g     F .text.itcm	00000010 SdioCard::readOCR(unsigned long*)
200007b0 g     O .data	00000070 SPIClass::spiclass_lpspi3_hardware
00004024 g     F .text.itcm	00000092 ExFatPartition::dirSeek(DirPos_t*, unsigned long)
00001c44 g     F .text.itcm	000000dc _spi_dma_rxISR1()
2000788c g     O .bss	00000008 AudioOutputI2SHex::dma
20001ae8 g     O .data	00000120 _impure_data
000038ac g     F .text.itcm	000004b0 ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)
20015cf4 g     O .bss	00000002 AudioStream::cpu_cycles_total
0000fe00 g     F .text.itcm	0000000c __sfp_lock_release
00009e24 g     F .text.itcm	000000b8 SdioCard::writeStop()
000034c0 g     F .text.itcm	00000014 ExFatFile::close()
20000bd8 g     O .data	00000101 _ctype_
0000cfb4  w    F .text.itcm	00000004 _read
60002738 g       .text.code	00000000 __init_array_start
60002548 g     F .text.code	00000058 CrashReportClass::operator bool()
20001c0c g     O .data	00000004 F_BUS_ACTUAL
20015820 g     O .bss	00000004 disk_count
00002468  w    F .text.itcm	00000064 SDClass::rename(char const*, char const*)
000097a4 g     F .text.itcm	00000014 SdioCard::readSCR(scr_t*)
0000dff0  w    F .text.itcm	0000000c AudioStream::update_all()
0001553c g     F .text.itcm	000000d8 __smakebuf_r
00000000 g       .text.itcm	00000000 _stext
0000dc90 g     F .text.itcm	00000134 DMAChannel::begin(bool)
20001c34 g     O .data	00000004 IntervalTimer::nvic_priorites
00009044 g     F .text.itcm	00000138 SharedSpiCard::end()
00010480 g     F .text.itcm	000000dc strlen
00005d2c g     F .text.itcm	00000056 FatFile::openCluster(FatFile*)
0000624c g     F .text.itcm	000000ae FatFile::seekSet(unsigned long)
600028a4 g     O .text.progmem	00000024 usb_string_product_name_default
200078b4 g     O .bss	00000008 AudioOutputI2SQuad::dma
0000ff2c g     F .text.itcm	0000001c vdprintf
0000981c g     F .text.itcm	00000060 SdioCard::sectorCount()
000097b8 g     F .text.itcm	00000034 SdioCard::readSDS(sds_t*)
000063e4 g     F .text.itcm	00000166 FatFile::openNext(FatFile*, int)
20007818 g     O .bss	00000004 AudioOutputUSB::right_2nd
60001788  w    F .text.code	00000002 startup_middle_hook
20000aa4 g     O .data	00000074 vtable for SdioCard
0000559c g     F .text.itcm	000000f4 FatFile::getName(char*, unsigned int)
60001790 g     F .text.code	000000f8 configure_cache
00009524  w    F .text.itcm	00000004 SdCardInterface::hasDedicatedSpi()
0000de20 g     F .text.itcm	000001c0 breakTime(unsigned long, DateTimeFields&)
0000872c  w    F .text.itcm	000000ec SharedSpiCard::readCSD(csd_t*)
200078a4 g     O .bss	00000008 AudioOutputSPDIF2::dma
0000ac44 g     F .text.itcm	000000d4 SdioCard::readStart(unsigned long)
0000caf8 g     F .text.itcm	0000006c usb_config_tx_iso
2000785c g     O .bss	00000008 AudioInputAnalog::dma
20015cf6 g     O .bss	00000002 AudioStream::cpu_cycles_total_max
0000ae68 g     F .text.itcm	00000108 SdSpiArduinoDriver::activate()
00000a40 g     F .text.itcm	00000320 compress(void*)
60002738 g       .text.code	00000000 __preinit_array_start
0000cc4c g     F .text.itcm	000000b8 usb_receive
200008b4  w    O .data	0000000c vtable for AudioStream
00003f44 g     F .text.itcm	000000a8 ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)
20007c20 g     O .bss	0000c800 data_buffer
00010a00 g     F .text.itcm	00000060 __lo0bits
000062fc g     F .text.itcm	000000e6 FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)
0001b800 g       *ABS*	00000000 _flashimagelen
00006614 g     F .text.itcm	000000d8 FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
00008dd0 g     F .text.itcm	00000128 SharedSpiCard::syncDevice()
0000f304 g     F .text.itcm	0000000a __aeabi_atexit
0000cfe0 g     F .text.itcm	00000024 rtc_get
00004468 g     F .text.itcm	000000b4 ExFatFile::remove()
00012de8 g     F .text.itcm	00000078 frexp
70000000 g       .bss.extram	00000000 _extram_start
0000dc24 g     F .text.itcm	0000004c pendablesrvreq_isr
000022dc  w    F .text.itcm	0000003c SDClass::totalSize()
20007874 g     O .bss	00000008 AudioInputSPDIF3::dma
0000e388 g     F .text.itcm	00000034 AudioConnection::~AudioConnection()
00000068  w    F .text.itcm	00000004 Print::availableForWrite()
20001c48 g     O .data	0000016c __global_locale
0000a3d8 g     F .text.itcm	00000720 SdioCard::begin(SdioConfig)
000015b0 g     F .text.itcm	000001c8 breakTime(long long, tmElements_t&)
000034d4 g     F .text.itcm	00000022 ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)
0000b6c0 g     F .text.itcm	00000130 usb_serial_read
20007a90 g     O .bss	00000001 __lock___sfp_recursive_mutex
0000ecbc g     F .text.itcm	000000a8 Print::printNumber(unsigned long, unsigned char, unsigned char)
0000ca30 g     F .text.itcm	00000064 usb_config_tx
0000cfb8  w    F .text.itcm	00000006 _close
00006958 g     F .text.itcm	00000074 FatPartition::fatGet(unsigned long, unsigned long*)
0000f320 g     F .text.itcm	00000010 free
00003324 g     F .text.itcm	00000064 ExFatFile::cmpName(DirName_t const*, ExName_t*)
0001091c g     F .text.itcm	000000a4 __multadd
00010908 g     F .text.itcm	00000012 _Bfree
0000008c  w    F .text.itcm	0000001a SDFile::size()
0000550c g     F .text.itcm	00000090 FatFile::getSFN(char*, unsigned int)
000007cc  w    F .text.itcm	00000040 SDFile::~SDFile()
200021f4  w    O .data	00000016 usb_string_serial_number
0000ad18 g     F .text.itcm	00000150 SdioCard::readSector(unsigned long, unsigned char*)
00009770 g     F .text.itcm	00000024 SdioCard::readCSD(csd_t*)



Disassembly of section .text.code:

60001400 <memory_copy>:
}

__attribute__((section(".startup"), optimize("O1")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001400:	cmp	r0, r1
60001402:	beq.n	60001414 <memory_copy+0x14>
	while (dest < dest_end) {
60001404:	cmp	r0, r2
60001406:	bcs.n	60001414 <memory_copy+0x14>
		*dest++ = *src++;
60001408:	ldr.w	r3, [r1], #4
6000140c:	str.w	r3, [r0], #4
	while (dest < dest_end) {
60001410:	cmp	r2, r0
60001412:	bhi.n	60001408 <memory_copy+0x8>
	}
}
60001414:	bx	lr
60001416:	nop

60001418 <memory_clear>:

__attribute__((section(".startup"), optimize("O1")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
60001418:	cmp	r0, r1
6000141a:	bcs.n	60001426 <memory_clear+0xe>
		*dest++ = 0;
6000141c:	movs	r3, #0
6000141e:	str.w	r3, [r0], #4
	while (dest < dest_end) {
60001422:	cmp	r1, r0
60001424:	bhi.n	6000141e <memory_clear+0x6>
	}
}
60001426:	bx	lr

60001428 <ResetHandler>:
{
60001428:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000142c:	ldr	r2, [pc, #416]	; (600015d0 <ResetHandler+0x1a8>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000142e:	mov.w	r1, #11141120	; 0xaa0000
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001432:	ldr	r3, [pc, #416]	; (600015d4 <ResetHandler+0x1ac>)
	IOMUXC_GPR_GPR16 = 0x00200007;
60001434:	ldr	r0, [pc, #416]	; (600015d8 <ResetHandler+0x1b0>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001436:	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001438:	str	r0, [r3, #64]	; 0x40
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
6000143a:	ldr	r2, [pc, #416]	; (600015dc <ResetHandler+0x1b4>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000143c:	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
6000143e:	mov	sp, r2
	__asm__ volatile("dsb":::"memory");
60001440:	dsb	sy
	__asm__ volatile("isb":::"memory");
60001444:	isb	sy
	startup_early_hook(); // must be in FLASHMEM, as ITCM is not yet initialized!
60001448:	bl	60001784 <startup_default_early_hook>
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
6000144c:	movs	r4, #8
6000144e:	ldr	r3, [pc, #400]	; (600015e0 <ResetHandler+0x1b8>)
	memory_copy(&_stext, &_stextload, &_etext);
60001450:	ldr	r2, [pc, #400]	; (600015e4 <ResetHandler+0x1bc>)
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001452:	str.w	r4, [r3, #340]	; 0x154
	memory_copy(&_stext, &_stextload, &_etext);
60001456:	ldr	r1, [pc, #400]	; (600015e8 <ResetHandler+0x1c0>)
60001458:	ldr	r0, [pc, #400]	; (600015ec <ResetHandler+0x1c4>)
6000145a:	bl	60001400 <memory_copy>
	memory_copy(&_sdata, &_sdataload, &_edata);
6000145e:	ldr	r2, [pc, #400]	; (600015f0 <ResetHandler+0x1c8>)
60001460:	ldr	r1, [pc, #400]	; (600015f4 <ResetHandler+0x1cc>)
60001462:	ldr	r0, [pc, #404]	; (600015f8 <ResetHandler+0x1d0>)
60001464:	bl	60001400 <memory_copy>
	memory_clear(&_sbss, &_ebss);
60001468:	ldr	r1, [pc, #400]	; (600015fc <ResetHandler+0x1d4>)
6000146a:	ldr	r0, [pc, #404]	; (60001600 <ResetHandler+0x1d8>)
6000146c:	bl	60001418 <memory_clear>
	SCB_CPACR = 0x00F00000;
60001470:	ldr	r4, [pc, #400]	; (60001604 <ResetHandler+0x1dc>)
60001472:	mov.w	r1, #3758153728	; 0xe000e000
60001476:	mov.w	r0, #15728640	; 0xf00000
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
6000147a:	movs	r3, #0
6000147c:	ldr	r2, [pc, #392]	; (60001608 <ResetHandler+0x1e0>)
	SCB_CPACR = 0x00F00000;
6000147e:	str.w	r0, [r1, #3464]	; 0xd88
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
60001482:	str.w	r2, [r4, r3, lsl #2]
60001486:	adds	r3, #1
60001488:	cmp	r3, #176	; 0xb0
6000148a:	bne.n	60001482 <ResetHandler+0x5a>
6000148c:	ldr	r3, [pc, #380]	; (6000160c <ResetHandler+0x1e4>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
6000148e:	movs	r1, #128	; 0x80
60001490:	ldr	r2, [pc, #380]	; (60001610 <ResetHandler+0x1e8>)
60001492:	strb.w	r1, [r3], #1
60001496:	cmp	r3, r2
60001498:	bne.n	60001492 <ResetHandler+0x6a>
	SCB_VTOR = (uint32_t)_VectorsRam;
6000149a:	mov.w	r5, #3758153728	; 0xe000e000
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
6000149e:	ldr	r6, [pc, #320]	; (600015e0 <ResetHandler+0x1b8>)
600014a0:	mov.w	r9, #2155905152	; 0x80808080
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014a4:	ldr.w	fp, [pc, #404]	; 6000163c <ResetHandler+0x214>
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014a8:	ldr.w	sl, [pc, #404]	; 60001640 <ResetHandler+0x218>
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014ac:	mov.w	r1, #4294967295
	SCB_VTOR = (uint32_t)_VectorsRam;
600014b0:	str.w	r4, [r5, #3336]	; 0xd08
	SYST_CVR = 0;
600014b4:	movs	r7, #0
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014b6:	str.w	r9, [r6, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014ba:	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
600014be:	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014c2:	str.w	sl, [r6, #240]	; 0xf0
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014c6:	ldr.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014ca:	ldr.w	r8, [pc, #376]	; 60001644 <ResetHandler+0x21c>
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014ce:	orr.w	r3, r3, #458752	; 0x70000
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014d2:	ldr	r2, [pc, #256]	; (600015d4 <ResetHandler+0x1ac>)
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014d4:	str.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014d8:	ldr.w	r3, [r8, #28]
600014dc:	bic.w	r3, r3, #127	; 0x7f
600014e0:	orr.w	r3, r3, #64	; 0x40
600014e4:	str.w	r3, [r8, #28]
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
600014e8:	ldr.w	r3, [r8, #36]	; 0x24
600014ec:	bic.w	r3, r3, #127	; 0x7f
600014f0:	orr.w	r3, r3, #64	; 0x40
600014f4:	str.w	r3, [r8, #36]	; 0x24
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014f8:	str	r1, [r2, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
600014fa:	str	r1, [r2, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
600014fc:	str	r1, [r2, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
600014fe:	str	r1, [r2, #116]	; 0x74
	configure_cache();
60001500:	bl	60001790 <configure_cache>
	_VectorsRam[14] = pendablesrvreq_isr;
60001504:	ldr	r3, [pc, #268]	; (60001614 <ResetHandler+0x1ec>)
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001506:	ldr	r1, [pc, #272]	; (60001618 <ResetHandler+0x1f0>)
	_VectorsRam[14] = pendablesrvreq_isr;
60001508:	str	r3, [r4, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
6000150a:	ldr	r3, [pc, #272]	; (6000161c <ResetHandler+0x1f4>)
6000150c:	str	r3, [r4, #60]	; 0x3c
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
6000150e:	movs	r3, #99	; 0x63
60001510:	str	r3, [r5, #20]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001512:	movs	r3, #3
	SYST_CVR = 0;
60001514:	str	r7, [r5, #24]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001516:	str	r3, [r5, #16]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
60001518:	ldr	r3, [pc, #260]	; (60001620 <ResetHandler+0x1f8>)
6000151a:	str.w	r3, [r5, #3360]	; 0xd20
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
6000151e:	ldr.w	r3, [r5, #3580]	; 0xdfc
60001522:	orr.w	r3, r3, #16777216	; 0x1000000
60001526:	str.w	r3, [r5, #3580]	; 0xdfc
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000152a:	ldr	r3, [pc, #248]	; (60001624 <ResetHandler+0x1fc>)
6000152c:	ldr	r2, [r3, #0]
6000152e:	orr.w	r2, r2, #1
60001532:	str	r2, [r3, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001534:	ldr	r3, [r3, #4]
60001536:	str	r3, [r1, #0]
	usb_pll_start();	
60001538:	bl	60001c0c <usb_pll_start>
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
6000153c:	str.w	r9, [r6, #260]	; 0x104
	set_arm_clock(F_CPU);
60001540:	ldr	r0, [pc, #228]	; (60001628 <ResetHandler+0x200>)
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001542:	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
60001546:	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000154a:	str.w	sl, [r6, #240]	; 0xf0
	set_arm_clock(F_CPU);
6000154e:	bl	60002718 <__set_arm_clock_veneer>
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001552:	ldr.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
60001556:	ldr	r3, [pc, #212]	; (6000162c <ResetHandler+0x204>)
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
60001558:	ldr	r2, [pc, #212]	; (60001630 <ResetHandler+0x208>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000155a:	orr.w	r1, r1, #12288	; 0x3000
6000155e:	str.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
60001562:	str	r7, [r3, #0]
	PIT_TCTRL0 = 0;
60001564:	str.w	r7, [r3, #264]	; 0x108
	PIT_TCTRL1 = 0;
60001568:	str.w	r7, [r3, #280]	; 0x118
	PIT_TCTRL2 = 0;
6000156c:	str.w	r7, [r3, #296]	; 0x128
	PIT_TCTRL3 = 0;
60001570:	str.w	r7, [r3, #312]	; 0x138
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
60001574:	ldr	r3, [r2, #56]	; 0x38
60001576:	lsls	r3, r3, #31
60001578:	bmi.n	6000158c <ResetHandler+0x164>
		SNVS_LPSRTCMR = 1546300800u >> 17;
6000157a:	movw	r3, #11797	; 0x2e15
		SNVS_LPSRTCLR = 1546300800u << 15;
6000157e:	ldr	r1, [pc, #180]	; (60001634 <ResetHandler+0x20c>)
60001580:	str	r1, [r2, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
60001582:	str	r3, [r2, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
60001584:	ldr	r3, [r2, #56]	; 0x38
60001586:	orr.w	r3, r3, #1
6000158a:	str	r3, [r2, #56]	; 0x38
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
6000158c:	ldr	r2, [pc, #160]	; (60001630 <ResetHandler+0x208>)
6000158e:	ldr	r4, [pc, #168]	; (60001638 <ResetHandler+0x210>)
60001590:	ldr	r3, [r2, #8]
60001592:	orr.w	r3, r3, #65537	; 0x10001
60001596:	str	r3, [r2, #8]
	configure_external_ram();
60001598:	bl	60001888 <configure_external_ram>
	analog_init();
6000159c:	bl	60002668 <analog_init>
	pwm_init();
600015a0:	bl	600026e8 <__pwm_init_veneer>
	tempmon_init();
600015a4:	bl	60001c68 <tempmon_init>
	startup_middle_hook();
600015a8:	bl	60001788 <startup_default_middle_hook>
// Returns the number of milliseconds since your program started running.
// This 32 bit number will roll back to zero after about 49.7 days.  For a
// simpler way to build delays or timeouts, consider using elapsedMillis.
static inline uint32_t millis(void)
{
	return systick_millis_count;
600015ac:	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015ae:	cmp	r3, #19
600015b0:	bls.n	600015ac <ResetHandler+0x184>
	usb_init();
600015b2:	bl	60001648 <usb_init>
600015b6:	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_AFTER + TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015b8:	cmp.w	r3, #300	; 0x12c
600015bc:	bcc.n	600015b6 <ResetHandler+0x18e>
	startup_late_hook();
600015be:	bl	6000178c <startup_default_late_hook>
	__libc_init_array();
600015c2:	bl	60002728 <____libc_init_array_veneer>
	main();
600015c6:	bl	600026e0 <__main_veneer>
	while (1) asm("WFI");
600015ca:	wfi
600015cc:	b.n	600015ca <ResetHandler+0x1a2>
600015ce:	nop
600015d0:	.word	0xaaaaaabf
600015d4:	.word	0x400ac000
600015d8:	.word	0x00200007
600015dc:	.word	0x20068000
600015e0:	.word	0x400d8000
600015e4:	.word	0x00015748
600015e8:	.word	0x60002ba0
600015ec:	.word	0x00000000
600015f0:	.word	0x200026c0
600015f4:	.word	0x600182ec
600015f8:	.word	0x20000000
600015fc:	.word	0x20015d60
60001600:	.word	0x200026c0
60001604:	.word	0x20002400
60001608:	.word	0x0000ce05
6000160c:	.word	0xe000e400
60001610:	.word	0xe000e4a0
60001614:	.word	0x0000dc25
60001618:	.word	0x20015988
6000161c:	.word	0x0000dc71
60001620:	.word	0x20200000
60001624:	.word	0xe0001000
60001628:	.word	0x016e3600
6000162c:	.word	0x40084000
60001630:	.word	0x400d4000
60001634:	.word	0x56c00000
60001638:	.word	0x2001598c
6000163c:	.word	0x2018101b
60001640:	.word	0x13110d0c
60001644:	.word	0x400fc000

60001648 <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001648:	ldr	r3, [pc, #196]	; (60001710 <usb_init+0xc8>)
6000164a:	movw	r2, #3937	; 0xf61
{
6000164e:	push	{r4, lr}
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001650:	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001654:	movw	r4, #1028	; 0x404
	usb_init_serialnumber();
60001658:	bl	600026f0 <__usb_init_serialnumber_veneer>
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
6000165c:	ldr	r2, [pc, #180]	; (60001714 <usb_init+0xcc>)
	USB1_BURSTSIZE = 0x0404;
6000165e:	ldr	r1, [pc, #184]	; (60001718 <usb_init+0xd0>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001660:	ldr.w	r3, [r2, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001664:	ldr	r0, [pc, #180]	; (6000171c <usb_init+0xd4>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001666:	orr.w	r3, r3, #3
6000166a:	str.w	r3, [r2, #128]	; 0x80
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
6000166e:	ldr	r3, [pc, #176]	; (60001720 <usb_init+0xd8>)
	USB1_BURSTSIZE = 0x0404;
60001670:	str.w	r4, [r1, #352]	; 0x160
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001674:	ldr	r2, [r0, #0]
60001676:	tst	r2, r3
60001678:	bne.n	60001682 <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
6000167a:	ldr.w	r3, [r1, #424]	; 0x1a8
6000167e:	lsls	r2, r3, #30
60001680:	beq.n	600016ba <usb_init+0x72>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001682:	ldr	r2, [pc, #148]	; (60001718 <usb_init+0xd0>)
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
60001684:	mov.w	r1, #2147483648	; 0x80000000
60001688:	ldr	r3, [pc, #144]	; (6000171c <usb_init+0xd4>)
6000168a:	str	r1, [r3, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
6000168c:	ldr.w	r3, [r2, #320]	; 0x140
60001690:	orr.w	r3, r3, #2
60001694:	str.w	r3, [r2, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
60001698:	ldr.w	r3, [r2, #320]	; 0x140
6000169c:	lsls	r3, r3, #30
6000169e:	bmi.n	60001698 <usb_init+0x50>
		NVIC_CLEAR_PENDING(IRQ_USB1);
600016a0:	mov.w	r0, #131072	; 0x20000
600016a4:	mov.w	r1, #3758153728	; 0xe000e000
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
600016a8:	ldr	r3, [pc, #112]	; (6000171c <usb_init+0xd4>)
600016aa:	mov.w	r2, #2147483648	; 0x80000000
		NVIC_CLEAR_PENDING(IRQ_USB1);
600016ae:	str.w	r0, [r1, #652]	; 0x28c
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
600016b2:	movs	r0, #25
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
600016b4:	str	r2, [r3, #56]	; 0x38
		delay(25);
600016b6:	bl	60002710 <__delay_veneer>
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
600016ba:	ldr	r2, [pc, #96]	; (6000171c <usb_init+0xd4>)
600016bc:	mov.w	r0, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600016c0:	ldr	r4, [pc, #84]	; (60001718 <usb_init+0xd0>)
	USBPHY1_PWD = 0;
600016c2:	movs	r1, #0
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
600016c4:	str	r0, [r2, #56]	; 0x38
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600016c6:	movs	r0, #10
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600016c8:	ldr	r3, [pc, #88]	; (60001724 <usb_init+0xdc>)
	USBPHY1_PWD = 0;
600016ca:	str	r1, [r2, #0]
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600016cc:	mov.w	r2, #896	; 0x380
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600016d0:	str.w	r0, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600016d4:	mov	r0, r3
600016d6:	bl	600026f8 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
	endpoint_queue_head[1].config = (64 << 16);
600016da:	mov.w	r2, #4194304	; 0x400000
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600016de:	mov	r3, r0
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
600016e0:	mov.w	r0, #4227072	; 0x408000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
600016e4:	movw	r1, #323	; 0x143
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
600016e8:	str	r0, [r3, #0]
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
600016ea:	str.w	r3, [r4, #344]	; 0x158
	endpoint_queue_head[1].config = (64 << 16);
600016ee:	str	r2, [r3, #64]	; 0x40
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* volatile _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
600016f0:	ldr	r3, [pc, #52]	; (60001728 <usb_init+0xe0>)
600016f2:	ldr	r2, [pc, #56]	; (6000172c <usb_init+0xe4>)
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
600016f4:	str.w	r1, [r4, #328]	; 0x148
600016f8:	str.w	r2, [r3, #516]	; 0x204
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &usb_isr;
	attachInterruptVector(IRQ_USB1, &usb_isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
600016fc:	mov.w	r2, #3758153728	; 0xe000e000
60001700:	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001704:	movs	r3, #1
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001706:	str.w	r1, [r2, #268]	; 0x10c
	USB1_USBCMD = USB_USBCMD_RS;
6000170a:	str.w	r3, [r4, #320]	; 0x140
	//transfer_log_head = 0;
	//transfer_log_count = 0;
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}
6000170e:	pop	{r4, pc}
60001710:	.word	0x400d8000
60001714:	.word	0x400fc000
60001718:	.word	0x402e0000
6000171c:	.word	0x400d9000
60001720:	.word	0x001e1c00
60001724:	.word	0x20000000
60001728:	.word	0x20002400
6000172c:	.word	0x0000bd51

60001730 <_reboot_Teensyduino_>:


FLASHMEM void _reboot_Teensyduino_(void)
{
60001730:	push	{r3, lr}
	if (!(HW_OCOTP_CFG5 & 0x02)) {
60001732:	ldr	r3, [pc, #56]	; (6000176c <_reboot_Teensyduino_+0x3c>)
60001734:	ldr	r3, [r3, #96]	; 0x60
60001736:	lsls	r3, r3, #30
60001738:	bmi.n	6000173c <_reboot_Teensyduino_+0xc>
		asm("bkpt #251"); // run bootloader
6000173a:	bkpt	0x00fb
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
6000173c:	cpsid	i
		USB1_USBCMD = 0;
6000173e:	ldr	r3, [pc, #48]	; (60001770 <_reboot_Teensyduino_+0x40>)
60001740:	movs	r0, #0
		IOMUXC_GPR_GPR16 = 0x00200003;
60001742:	ldr	r2, [pc, #48]	; (60001774 <_reboot_Teensyduino_+0x44>)
		USB1_USBCMD = 0;
60001744:	str.w	r0, [r3, #320]	; 0x140
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001748:	add.w	r3, r3, #3758096384	; 0xe0000000
		IOMUXC_GPR_GPR16 = 0x00200003;
6000174c:	ldr	r1, [pc, #40]	; (60001778 <_reboot_Teensyduino_+0x48>)
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
6000174e:	sub.w	r3, r3, #913408	; 0xdf000
		IOMUXC_GPR_GPR16 = 0x00200003;
60001752:	str	r1, [r2, #64]	; 0x40
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001754:	mov	sp, r3
		__asm__ volatile("dsb":::"memory");
60001756:	dsb	sy
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
6000175a:	mov.w	r3, #2097152	; 0x200000
		*p = 0xEB120000;
6000175e:	ldr	r0, [pc, #28]	; (6000177c <_reboot_Teensyduino_+0x4c>)
60001760:	ldr	r2, [pc, #28]	; (60001780 <_reboot_Teensyduino_+0x50>)
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001762:	ldr	r3, [r3, #28]
		*p = 0xEB120000;
60001764:	str	r2, [r0, #0]
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001766:	ldr	r3, [r3, #8]
60001768:	blx	r3
	}
	__builtin_unreachable();
6000176a:	nop
6000176c:	.word	0x401f4400
60001770:	.word	0x402e0000
60001774:	.word	0x400ac000
60001778:	.word	0x00200003
6000177c:	.word	0x20208000
60001780:	.word	0xeb120000

60001784 <startup_default_early_hook>:
FLASHMEM void startup_default_early_hook(void) {}
60001784:	bx	lr
60001786:	nop

60001788 <startup_default_middle_hook>:
60001788:	bx	lr
6000178a:	nop

6000178c <startup_default_late_hook>:
6000178c:	bx	lr
6000178e:	nop

60001790 <configure_cache>:
{
60001790:	push	{r4}
	SCB_MPU_CTRL = 0; // turn off MPU
60001792:	mov.w	r3, #3758153728	; 0xe000e000
60001796:	movs	r1, #0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001798:	movs	r4, #16
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
6000179a:	ldr	r0, [pc, #172]	; (60001848 <configure_cache+0xb8>)
	SCB_MPU_CTRL = 0; // turn off MPU
6000179c:	str.w	r1, [r3, #3476]	; 0xd94
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600017a0:	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
600017a4:	movs	r4, #17
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600017a6:	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600017aa:	ldr	r0, [pc, #160]	; (6000184c <configure_cache+0xbc>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
600017ac:	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
600017b0:	movs	r4, #18
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600017b2:	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600017b6:	ldr	r0, [pc, #152]	; (60001850 <configure_cache+0xc0>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
600017b8:	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600017bc:	ldr	r2, [pc, #148]	; (60001854 <configure_cache+0xc4>)
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600017be:	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
600017c2:	ldr	r4, [pc, #148]	; (60001858 <configure_cache+0xc8>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600017c4:	orr.w	r2, r2, #21
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600017c8:	ldr	r0, [pc, #144]	; (6000185c <configure_cache+0xcc>)
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
600017ca:	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600017ce:	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600017d2:	ldr	r4, [pc, #140]	; (60001860 <configure_cache+0xd0>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600017d4:	ldr	r0, [pc, #140]	; (60001864 <configure_cache+0xd4>)
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600017d6:	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600017da:	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600017de:	ldr	r4, [pc, #136]	; (60001868 <configure_cache+0xd8>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600017e0:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
600017e4:	ldr	r0, [pc, #132]	; (6000186c <configure_cache+0xdc>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600017e6:	ldr	r2, [pc, #136]	; (60001870 <configure_cache+0xe0>)
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600017e8:	str.w	r4, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
600017ec:	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600017f0:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600017f4:	add.w	r2, r2, #327680	; 0x50000
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
600017f8:	ldr	r4, [pc, #120]	; (60001874 <configure_cache+0xe4>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600017fa:	adds	r2, #12
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
600017fc:	ldr	r0, [pc, #120]	; (60001878 <configure_cache+0xe8>)
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
600017fe:	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001802:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001806:	ldr	r2, [pc, #116]	; (6000187c <configure_cache+0xec>)
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
60001808:	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
6000180c:	ldr	r4, [pc, #112]	; (60001880 <configure_cache+0xf0>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
6000180e:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
60001812:	movs	r2, #1
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001814:	ldr	r0, [pc, #108]	; (60001884 <configure_cache+0xf4>)
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001816:	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
6000181a:	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
6000181e:	str.w	r2, [r3, #3476]	; 0xd94
	asm("dsb");
60001822:	dsb	sy
	asm("isb");
60001826:	isb	sy
	SCB_CACHE_ICIALLU = 0;
6000182a:	str.w	r1, [r3, #3920]	; 0xf50
	asm("dsb");
6000182e:	dsb	sy
	asm("isb");
60001832:	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001836:	ldr.w	r2, [r3, #3348]	; 0xd14
}
6000183a:	ldr.w	r4, [sp], #4
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
6000183e:	orr.w	r2, r2, #196608	; 0x30000
60001842:	str.w	r2, [r3, #3348]	; 0xd14
}
60001846:	bx	lr
60001848:	.word	0x1000003f
6000184c:	.word	0x03080025
60001850:	.word	0x00100009
60001854:	.word	0x20015d60
60001858:	.word	0x00200013
6000185c:	.word	0x07020021
60001860:	.word	0x20000014
60001864:	.word	0x13080025
60001868:	.word	0x10000009
6000186c:	.word	0x20200016
60001870:	.word	0x130b0027
60001874:	.word	0x40000017
60001878:	.word	0x60000018
6000187c:	.word	0x070b002f
60001880:	.word	0x70000019
60001884:	.word	0x130b002f

60001888 <configure_external_ram>:
{
60001888:	push	{r4, r5, r6, r7, lr}
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
6000188a:	ldr	r3, [pc, #736]	; (60001b6c <configure_external_ram+0x2e4>)
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
6000188c:	movs	r2, #24
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
6000188e:	ldr	r6, [pc, #736]	; (60001b70 <configure_external_ram+0x2e8>)
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
60001890:	movs	r0, #1
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
60001892:	ldr	r7, [pc, #736]	; (60001b74 <configure_external_ram+0x2ec>)
{
60001894:	sub	sp, #12
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001896:	str.w	r6, [r3, #604]	; 0x25c
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
6000189a:	ldr	r1, [pc, #732]	; (60001b78 <configure_external_ram+0x2f0>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
6000189c:	str.w	r7, [r3, #608]	; 0x260
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600018a0:	ldr	r5, [pc, #728]	; (60001b7c <configure_external_ram+0x2f4>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600018a2:	str.w	r6, [r3, #612]	; 0x264
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
600018a6:	sub.w	r6, r6, #45056	; 0xb000
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
600018aa:	ldr	r4, [pc, #724]	; (60001b80 <configure_external_ram+0x2f8>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
600018ac:	str.w	r6, [r3, #616]	; 0x268
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600018b0:	str.w	r5, [r3, #620]	; 0x26c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600018b4:	str.w	r5, [r3, #624]	; 0x270
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600018b8:	str.w	r5, [r3, #628]	; 0x274
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600018bc:	str.w	r5, [r3, #632]	; 0x278
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
600018c0:	movw	r5, #34572	; 0x870c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
600018c4:	str	r2, [r3, #108]	; 0x6c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_23 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DQS
600018c6:	str	r2, [r3, #112]	; 0x70
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_24 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS0_B (RAM)
600018c8:	str	r2, [r3, #116]	; 0x74
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_25 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SCLK
600018ca:	str	r2, [r3, #120]	; 0x78
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
600018cc:	str	r2, [r3, #124]	; 0x7c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
600018ce:	str.w	r2, [r3, #128]	; 0x80
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
600018d2:	str.w	r2, [r3, #132]	; 0x84
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3
600018d6:	str.w	r2, [r3, #136]	; 0x88
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
600018da:	str.w	r0, [r1, #812]	; 0x32c
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
600018de:	ldr	r2, [pc, #676]	; (60001b84 <configure_external_ram+0x2fc>)
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT = 1; // GPIO_EMC_26 for Mode: ALT8
600018e0:	str.w	r0, [r1, #816]	; 0x330
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT = 1; // GPIO_EMC_27 for Mode: ALT8
600018e4:	str.w	r0, [r1, #820]	; 0x334
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
600018e8:	str.w	r0, [r1, #824]	; 0x338
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
600018ec:	str.w	r0, [r1, #828]	; 0x33c
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8
600018f0:	str.w	r0, [r1, #848]	; 0x350
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
600018f4:	ldr	r1, [r4, #24]
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
600018f6:	ldr	r3, [pc, #656]	; (60001b88 <configure_external_ram+0x300>)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
600018f8:	ands	r2, r1
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
600018fa:	ldr	r0, [pc, #656]	; (60001b8c <configure_external_ram+0x304>)
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
600018fc:	ldr	r1, [pc, #656]	; (60001b90 <configure_external_ram+0x308>)
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
600018fe:	orrs	r3, r2
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001900:	ldr	r2, [pc, #656]	; (60001b94 <configure_external_ram+0x30c>)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001902:	str	r3, [r4, #24]
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);
60001904:	ldr.w	r3, [r4, #132]	; 0x84
60001908:	orr.w	r3, r3, #12
6000190c:	str.w	r3, [r4, #132]	; 0x84
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
60001910:	mov.w	r4, #4294967295
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
60001914:	ldr	r3, [r0, #0]
60001916:	orr.w	r3, r3, #2
6000191a:	str	r3, [r0, #0]
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
6000191c:	ldr	r3, [r0, #0]
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
6000191e:	ands	r3, r5
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
60001920:	mov.w	r5, #8192	; 0x2000
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001924:	orrs	r2, r3
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001926:	ldr	r3, [pc, #624]	; (60001b98 <configure_external_ram+0x310>)
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60001928:	str	r2, [r0, #0]
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
6000192a:	str	r4, [r0, #4]
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
6000192c:	ldr	r2, [r1, #8]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
6000192e:	ldr	r4, [pc, #620]	; (60001b9c <configure_external_ram+0x314>)
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001930:	ands	r3, r2
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001932:	ldr	r2, [pc, #620]	; (60001ba0 <configure_external_ram+0x318>)
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
60001934:	orr.w	r3, r3, #536870912	; 0x20000000
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001938:	str	r3, [r0, #8]
	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
6000193a:	ldr	r3, [r0, #12]
6000193c:	bic.w	r3, r3, #120	; 0x78
60001940:	str	r3, [r0, #12]
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001942:	ldr	r3, [r0, #32]
60001944:	ands	r3, r2
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001946:	orrs	r3, r4
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001948:	str	r3, [r0, #32]
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
6000194a:	ldr	r3, [r0, #32]
6000194c:	ands	r3, r2
	FLEXSPI2_AHBRXBUF2CR0 = mask;
6000194e:	ldr	r2, [pc, #596]	; (60001ba4 <configure_external_ram+0x31c>)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001950:	orrs	r3, r4
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001952:	ldr	r4, [pc, #596]	; (60001ba8 <configure_external_ram+0x320>)
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001954:	str	r3, [r0, #36]	; 0x24
	FLEXSPI2_AHBRXBUF2CR0 = mask;
60001956:	str	r2, [r0, #40]	; 0x28
	FLEXSPI2_AHBRXBUF3CR0 = mask;
60001958:	str	r2, [r0, #44]	; 0x2c
	FLEXSPI2_INTEN = 0;
6000195a:	movs	r2, #0
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
6000195c:	ldr.w	r3, [r1, #184]	; 0xb8
60001960:	bic.w	r3, r3, #63	; 0x3f
60001964:	orr.w	r3, r3, #1
60001968:	str.w	r3, [r0, #184]	; 0xb8
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
6000196c:	ldr.w	r3, [r1, #188]	; 0xbc
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001970:	ldr	r1, [pc, #568]	; (60001bac <configure_external_ram+0x324>)
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
60001972:	bic.w	r3, r3, #63	; 0x3f
60001976:	orr.w	r3, r3, #1
6000197a:	str.w	r3, [r0, #188]	; 0xbc
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
6000197e:	movw	r3, #1541	; 0x605
	FLEXSPI2_INTEN = 0;
60001982:	str	r2, [r0, #16]
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
60001984:	str	r5, [r0, #96]	; 0x60
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001986:	str	r4, [r0, #112]	; 0x70
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001988:	str.w	r3, [r0, #128]	; 0x80
	FLEXSPI2_FLSHA2CR0 = 0x2000; // 8 MByte
6000198c:	str	r5, [r0, #100]	; 0x64
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
6000198e:	str	r4, [r0, #116]	; 0x74
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001990:	movs	r4, #2
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001992:	str.w	r3, [r0, #132]	; 0x84
	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
60001996:	ldr	r3, [r0, #0]
60001998:	bic.w	r3, r3, #2
6000199c:	str	r3, [r0, #0]
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
6000199e:	str	r1, [r0, #24]
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600019a0:	ldr	r3, [pc, #524]	; (60001bb0 <configure_external_ram+0x328>)
	for (int i=0; i < 64; i++) luttable[i] = 0;
600019a2:	ldr	r1, [pc, #528]	; (60001bb4 <configure_external_ram+0x32c>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600019a4:	str	r4, [r0, #28]
	for (int i=0; i < 64; i++) luttable[i] = 0;
600019a6:	str.w	r2, [r3], #4
600019aa:	cmp	r3, r1
600019ac:	bne.n	600019a6 <configure_external_ram+0x11e>
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
600019ae:	ldr	r2, [pc, #476]	; (60001b8c <configure_external_ram+0x304>)
600019b0:	ldr	r3, [r2, #0]
600019b2:	orr.w	r3, r3, #1
600019b6:	str	r3, [r2, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
600019b8:	ldr	r3, [r2, #0]
600019ba:	ands.w	r3, r3, #1
600019be:	bne.n	600019b8 <configure_external_ram+0x130>
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600019c0:	ldr	r0, [pc, #488]	; (60001bac <configure_external_ram+0x324>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600019c2:	movs	r1, #2
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
600019c4:	movw	r4, #1781	; 0x6f5
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600019c8:	str	r0, [r2, #24]
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
600019ca:	movw	r0, #1177	; 0x499
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600019ce:	str	r1, [r2, #28]
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
600019d0:	movw	r1, #1126	; 0x466
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
600019d4:	str.w	r4, [r2, #512]	; 0x200
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
600019d8:	movw	r4, #9217	; 0x2401
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
600019dc:	str.w	r1, [r2, #528]	; 0x210
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
600019e0:	ldr	r1, [pc, #468]	; (60001bb8 <configure_external_ram+0x330>)
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
600019e2:	str.w	r0, [r2, #544]	; 0x220
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
600019e6:	str.w	r1, [r2, #560]	; 0x230
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
600019ea:	movw	r1, #1077	; 0x435
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
600019ee:	ldr	r0, [pc, #460]	; (60001bbc <configure_external_ram+0x334>)
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
600019f0:	str.w	r4, [r2, #564]	; 0x234
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
600019f4:	str.w	r1, [r2, #576]	; 0x240
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
600019f8:	ldr	r4, [pc, #452]	; (60001bc0 <configure_external_ram+0x338>)
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
600019fa:	str.w	r0, [r2, #592]	; 0x250
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
600019fe:	movw	r0, #8705	; 0x2201
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
60001a02:	ldr	r1, [pc, #448]	; (60001bc4 <configure_external_ram+0x33c>)
60001a04:	str.w	r1, [r2, #596]	; 0x254
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a08:	movs	r1, #1
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
60001a0a:	str.w	r4, [r2, #608]	; 0x260
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
60001a0e:	str.w	r0, [r2, #612]	; 0x264
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a12:	ldr	r0, [pc, #376]	; (60001b8c <configure_external_ram+0x304>)
	FLEXSPI2_IPCR0 = addr;
60001a14:	str.w	r3, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a18:	str.w	r3, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a1c:	str.w	r1, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a20:	ldr	r3, [r0, #20]
60001a22:	lsls	r2, r3, #31
60001a24:	bpl.n	60001a20 <configure_external_ram+0x198>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a26:	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001a28:	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a2a:	mov.w	r2, #65536	; 0x10000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a2e:	ldr	r1, [pc, #348]	; (60001b8c <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a30:	str	r3, [r0, #20]
	FLEXSPI2_IPCR0 = addr;
60001a32:	str.w	r4, [r0, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a36:	str.w	r2, [r0, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a3a:	str.w	r3, [r0, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a3e:	ldr	r3, [r1, #20]
60001a40:	lsls	r3, r3, #31
60001a42:	bpl.n	60001a3e <configure_external_ram+0x1b6>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a44:	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001a46:	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a48:	mov.w	r0, #131072	; 0x20000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a4c:	ldr	r2, [pc, #316]	; (60001b8c <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a4e:	str	r3, [r1, #20]
	FLEXSPI2_IPCR0 = addr;
60001a50:	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a54:	str.w	r0, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a58:	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a5c:	ldr	r3, [r2, #20]
60001a5e:	lsls	r7, r3, #31
60001a60:	bpl.n	60001a5c <configure_external_ram+0x1d4>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a62:	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001a64:	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001a66:	ldr	r0, [pc, #352]	; (60001bc8 <configure_external_ram+0x340>)
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a68:	ldr	r1, [pc, #288]	; (60001b8c <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a6a:	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
60001a6c:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001a70:	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a74:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a78:	ldr	r3, [r1, #20]
60001a7a:	lsls	r6, r3, #31
60001a7c:	bpl.n	60001a78 <configure_external_ram+0x1f0>
	uint32_t id = FLEXSPI2_RFDR0;
60001a7e:	ldr.w	r3, [r1, #256]	; 0x100
	if (flexspi2_psram_id(0) == 0x5D0D) {
60001a82:	movw	r2, #23821	; 0x5d0d
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001a86:	movs	r0, #33	; 0x21
	return id & 0xFFFF;
60001a88:	uxth	r3, r3
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001a8a:	str	r0, [r1, #20]
	if (flexspi2_psram_id(0) == 0x5D0D) {
60001a8c:	cmp	r3, r2
60001a8e:	bne.n	60001b5c <configure_external_ram+0x2d4>
	FLEXSPI2_IPCR0 = addr;
60001a90:	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a92:	mov.w	r2, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a96:	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a98:	ldr	r0, [pc, #240]	; (60001b8c <configure_external_ram+0x304>)
	FLEXSPI2_IPCR0 = addr;
60001a9a:	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a9e:	str.w	r2, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001aa2:	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001aa6:	ldr	r3, [r0, #20]
60001aa8:	lsls	r5, r3, #31
60001aaa:	bpl.n	60001aa6 <configure_external_ram+0x21e>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001aac:	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001aae:	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001ab2:	movs	r1, #0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001ab4:	ldr	r2, [pc, #212]	; (60001b8c <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001ab6:	str	r3, [r0, #20]
	FLEXSPI2_IPCR0 = addr;
60001ab8:	str.w	r4, [r0, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001abc:	str.w	r1, [r0, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001ac0:	str.w	r3, [r0, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001ac4:	ldr	r3, [r2, #20]
60001ac6:	lsls	r4, r3, #31
60001ac8:	bpl.n	60001ac4 <configure_external_ram+0x23c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001aca:	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001acc:	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001ad0:	mov.w	r0, #65536	; 0x10000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001ad4:	ldr	r1, [pc, #180]	; (60001b8c <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001ad6:	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
60001ad8:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001adc:	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001ae0:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001ae4:	ldr	r3, [r1, #20]
60001ae6:	lsls	r0, r3, #31
60001ae8:	bpl.n	60001ae4 <configure_external_ram+0x25c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001aea:	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001aec:	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001af0:	mov.w	r0, #131072	; 0x20000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001af4:	ldr	r2, [pc, #148]	; (60001b8c <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001af6:	str	r3, [r1, #20]
	FLEXSPI2_IPCR0 = addr;
60001af8:	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001afc:	str.w	r0, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001b00:	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b04:	ldr	r3, [r2, #20]
60001b06:	lsls	r1, r3, #31
60001b08:	bpl.n	60001b04 <configure_external_ram+0x27c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b0a:	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001b0c:	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001b10:	ldr	r0, [pc, #180]	; (60001bc8 <configure_external_ram+0x340>)
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b12:	ldr	r1, [pc, #120]	; (60001b8c <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b14:	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
60001b16:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001b1a:	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001b1e:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b22:	ldr	r3, [r1, #20]
60001b24:	lsls	r2, r3, #31
60001b26:	bpl.n	60001b22 <configure_external_ram+0x29a>
	uint32_t id = FLEXSPI2_RFDR0;
60001b28:	ldr.w	r3, [r1, #256]	; 0x100
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001b2c:	movw	r2, #23821	; 0x5d0d
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001b30:	movs	r0, #33	; 0x21
	return id & 0xFFFF;
60001b32:	uxth	r3, r3
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001b34:	str	r0, [r1, #20]
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001b36:	cmp	r3, r2
60001b38:	beq.n	60001bdc <configure_external_ram+0x354>
60001b3a:	movs	r5, #8
60001b3c:	mov.w	r4, #8388608	; 0x800000
			external_psram_size * 0x100000 -
60001b40:	ldr	r1, [pc, #136]	; (60001bcc <configure_external_ram+0x344>)
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001b42:	movs	r0, #0
			external_psram_size * 0x100000 -
60001b44:	ldr	r3, [pc, #136]	; (60001bd0 <configure_external_ram+0x348>)
			external_psram_size = 16;
60001b46:	ldr	r2, [pc, #140]	; (60001bd4 <configure_external_ram+0x34c>)
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001b48:	str	r0, [sp, #0]
			external_psram_size = 16;
60001b4a:	strb	r5, [r2, #0]
			external_psram_size * 0x100000 -
60001b4c:	subs	r2, r3, r1
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001b4e:	movs	r3, #1
60001b50:	ldr	r0, [pc, #132]	; (60001bd8 <configure_external_ram+0x350>)
60001b52:	add	r2, r4
60001b54:	bl	60002708 <__sm_set_pool_veneer>
}
60001b58:	add	sp, #12
60001b5a:	pop	{r4, r5, r6, r7, pc}
		memset(&extmem_smalloc_pool, 0, sizeof(extmem_smalloc_pool));
60001b5c:	ldr	r3, [pc, #120]	; (60001bd8 <configure_external_ram+0x350>)
60001b5e:	movs	r2, #0
60001b60:	strd	r2, r2, [r3]
60001b64:	strd	r2, r2, [r3, #8]
}
60001b68:	add	sp, #12
60001b6a:	pop	{r4, r5, r6, r7, pc}
60001b6c:	.word	0x401f8000
60001b70:	.word	0x0001b0f9
60001b74:	.word	0x000110f9
60001b78:	.word	0x401f8400
60001b7c:	.word	0x000170f9
60001b80:	.word	0x400fc000
60001b84:	.word	0x1ffffcff
60001b88:	.word	0xa0000300
60001b8c:	.word	0x402a4000
60001b90:	.word	0x402a8000
60001b94:	.word	0xffff0012
60001b98:	.word	0x00f737ff
60001b9c:	.word	0x80000040
60001ba0:	.word	0x7cf0ff00
60001ba4:	.word	0x830f00ff
60001ba8:	.word	0x00020063
60001bac:	.word	0x5af05af0
60001bb0:	.word	0x402a4200
60001bb4:	.word	0x402a4300
60001bb8:	.word	0x3018049f
60001bbc:	.word	0x0a1806eb
60001bc0:	.word	0x0a180638
60001bc4:	.word	0x26013206
60001bc8:	.word	0x00030004
60001bcc:	.word	0x70000000
60001bd0:	.word	0x70000000
60001bd4:	.word	0x20015d1d
60001bd8:	.word	0x20015838
	FLEXSPI2_IPCR0 = addr;
60001bdc:	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001be0:	mov.w	r2, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001be4:	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001be6:	ldr	r0, [pc, #32]	; (60001c08 <configure_external_ram+0x380>)
	FLEXSPI2_IPCR0 = addr;
60001be8:	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001bec:	str.w	r2, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001bf0:	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001bf4:	ldr	r3, [r0, #20]
60001bf6:	lsls	r3, r3, #31
60001bf8:	bpl.n	60001bf4 <configure_external_ram+0x36c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001bfa:	movs	r3, #1
60001bfc:	movs	r5, #16
60001bfe:	mov.w	r4, #16777216	; 0x1000000
60001c02:	str	r3, [r0, #20]
			external_psram_size = 16;
60001c04:	b.n	60001b40 <configure_external_ram+0x2b8>
60001c06:	nop
60001c08:	.word	0x402a4000

60001c0c <usb_pll_start>:
{
60001c0c:	push	{r4, r5, r6, r7}
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001c0e:	ldr	r2, [pc, #84]	; (60001c64 <usb_pll_start+0x58>)
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001c10:	movs	r7, #64	; 0x40
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001c12:	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001c16:	mov.w	r6, #4096	; 0x1000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001c1a:	mov.w	r5, #8192	; 0x2000
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001c1e:	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001c22:	movw	r0, #12354	; 0x3042
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001c26:	ldr	r3, [r2, #16]
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001c28:	tst.w	r3, #2
60001c2c:	bne.n	60001c4c <usb_pll_start+0x40>
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
60001c2e:	tst.w	r3, #8192	; 0x2000
60001c32:	beq.n	60001c54 <usb_pll_start+0x48>
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
60001c34:	tst.w	r3, #4096	; 0x1000
60001c38:	beq.n	60001c58 <usb_pll_start+0x4c>
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
60001c3a:	cmp	r3, #0
60001c3c:	bge.n	60001c26 <usb_pll_start+0x1a>
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
60001c3e:	tst.w	r3, #65536	; 0x10000
60001c42:	bne.n	60001c5c <usb_pll_start+0x50>
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
60001c44:	lsls	r3, r3, #25
60001c46:	bpl.n	60001c60 <usb_pll_start+0x54>
}
60001c48:	pop	{r4, r5, r6, r7}
60001c4a:	bx	lr
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001c4c:	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60001c4e:	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001c50:	str	r0, [r2, #24]
			continue;
60001c52:	b.n	60001c26 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001c54:	str	r5, [r2, #20]
			continue;
60001c56:	b.n	60001c26 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001c58:	str	r6, [r2, #20]
			continue;
60001c5a:	b.n	60001c26 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001c5c:	str	r1, [r2, #24]
			continue;
60001c5e:	b.n	60001c26 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001c60:	str	r7, [r2, #20]
			continue;
60001c62:	b.n	60001c26 <usb_pll_start+0x1a>
60001c64:	.word	0x400d8000

60001c68 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001c68:	ldr	r2, [pc, #252]	; (60001d68 <tempmon_init+0x100>)

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001c6a:	movs	r0, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
60001c6c:	ldr	r1, [pc, #252]	; (60001d6c <tempmon_init+0x104>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001c6e:	vmov.f32	s11, #57	; 0x41c80000  25.0
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001c72:	ldr.w	r3, [r2, #128]	; 0x80
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001c76:	mov.w	ip, #0
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c7a:	vldr	s12, [pc, #244]	; 60001d70 <tempmon_init+0x108>
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001c7e:	bic.w	r3, r3, #1
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c82:	vldr	s10, [pc, #240]	; 60001d74 <tempmon_init+0x10c>
{
60001c86:	push	{r4, r5}
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001c88:	str.w	r3, [r2, #128]	; 0x80
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001c8c:	str.w	r0, [r2, #144]	; 0x90
  calibrationData = HW_OCOTP_ANA1;
60001c90:	ldr.w	r1, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001c94:	ldr	r5, [pc, #224]	; (60001d78 <tempmon_init+0x110>)
60001c96:	uxtb	r3, r1
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001c98:	ldr	r4, [pc, #224]	; (60001d7c <tempmon_init+0x114>)
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001c9a:	ldr	r0, [pc, #228]	; (60001d80 <tempmon_init+0x118>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001c9c:	str	r3, [r5, #0]
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001c9e:	vmov	s15, r3
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001ca2:	lsrs	r3, r1, #20
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001ca4:	ubfx	r1, r1, #8, #12
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001ca8:	vcvt.f32.s32	s15, s15
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001cac:	vmov	s13, r3
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001cb0:	vmov	s14, r1
60001cb4:	ldr	r3, [pc, #204]	; (60001d84 <tempmon_init+0x11c>)
60001cb6:	vcvt.f32.s32	s14, s14
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001cba:	str	r1, [r4, #0]
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001cbc:	vcvt.f32.s32	s13, s13
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001cc0:	ldr	r1, [pc, #196]	; (60001d88 <tempmon_init+0x120>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001cc2:	vsub.f32	s12, s15, s12
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001cc6:	vsub.f32	s10, s15, s10
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001cca:	vsub.f32	s13, s13, s14
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001cce:	vsub.f32	s15, s15, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001cd2:	vmul.f32	s12, s12, s13
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001cd6:	vstr	s13, [r3]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001cda:	vmul.f32	s10, s10, s13
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001cde:	ldr.w	r3, [r2, #128]	; 0x80
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001ce2:	vmul.f32	s9, s15, s13
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001ce6:	vstr	s15, [r0]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001cea:	vdiv.f32	s11, s12, s15
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001cee:	ldr	r0, [pc, #156]	; (60001d8c <tempmon_init+0x124>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001cf0:	vdiv.f32	s12, s10, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001cf4:	vdiv.f32	s13, s9, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001cf8:	vadd.f32	s11, s11, s14
60001cfc:	vcvt.u32.f32	s11, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d00:	vadd.f32	s12, s12, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001d04:	vmov	r4, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d08:	vcvt.u32.f32	s12, s12
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001d0c:	orr.w	r3, r3, r4, lsl #20
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d10:	vadd.f32	s15, s13, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001d14:	str.w	r3, [r2, #128]	; 0x80
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001d18:	vmov	r3, s12
60001d1c:	ldr.w	r4, [r2, #400]	; 0x190
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d20:	vcvt.u32.f32	s15, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001d24:	and.w	r1, r1, r3, lsl #16
60001d28:	orrs	r1, r4
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d2a:	vmov	r3, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001d2e:	str.w	r1, [r2, #400]	; 0x190
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001d32:	ubfx	r3, r3, #0, #12
60001d36:	ldr.w	r1, [r2, #400]	; 0x190
60001d3a:	orrs	r3, r1
60001d3c:	ldr	r1, [pc, #80]	; (60001d90 <tempmon_init+0x128>)
60001d3e:	str.w	r3, [r2, #400]	; 0x190
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
60001d42:	ldr.w	r3, [r2, #128]	; 0x80
60001d46:	orr.w	r3, r3, #2
60001d4a:	str.w	r3, [r2, #128]	; 0x80
60001d4e:	ldr	r3, [pc, #68]	; (60001d94 <tempmon_init+0x12c>)
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001d50:	strb.w	ip, [r0, #64]	; 0x40
60001d54:	str.w	r3, [r1, #320]	; 0x140
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001d58:	mov.w	r3, #3758153728	; 0xe000e000
60001d5c:	movs	r2, #1
}
60001d5e:	pop	{r4, r5}
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001d60:	str.w	r2, [r3, #264]	; 0x108
}
60001d64:	bx	lr
60001d66:	nop
60001d68:	.word	0x400d8100
60001d6c:	.word	0x401f4400
60001d70:	.word	0x42aa0000
60001d74:	.word	0x42b40000
60001d78:	.word	0x20015978
60001d7c:	.word	0x20015974
60001d80:	.word	0x2001597c
60001d84:	.word	0x20015980
60001d88:	.word	0x0fff0000
60001d8c:	.word	0xe000e400
60001d90:	.word	0x20002400
60001d94:	.word	0x0000d0a1

60001d98 <CrashReportClass::printTo(Print&) const>:
static int isvalid(const struct arm_fault_info_struct *info)
{
	uint32_t i, crc;
	const uint32_t *data, *end;

	if (info->len != sizeof(*info) / 4) return 0;
60001d98:	ldr	r3, [pc, #464]	; (60001f6c <CrashReportClass::printTo(Print&) const+0x1d4>)
60001d9a:	ldr.w	r3, [r3, #128]	; 0x80
60001d9e:	cmp	r3, #11
{
60001da0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
60001da4:	mov	r5, r1
	if (info->len != sizeof(*info) / 4) return 0;
60001da6:	bne.n	60001ddc <CrashReportClass::printTo(Print&) const+0x44>
	data = (uint32_t *)info;
	end = data + (sizeof(*info) / 4 - 1);
	crc = 0xFFFFFFFF;
60001da8:	mov.w	r0, #4294967295
	data = (uint32_t *)info;
60001dac:	ldr	r1, [pc, #448]	; (60001f70 <CrashReportClass::printTo(Print&) const+0x1d8>)
	while (data < end) {
		crc ^= *data++;
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
60001dae:	ldr	r3, [pc, #452]	; (60001f74 <CrashReportClass::printTo(Print&) const+0x1dc>)
	while (data < end) {
60001db0:	ldr	r6, [pc, #452]	; (60001f78 <CrashReportClass::printTo(Print&) const+0x1e0>)
		crc ^= *data++;
60001db2:	ldr	r2, [r1, #0]
60001db4:	movs	r4, #32
60001db6:	adds	r1, #4
60001db8:	eors	r0, r2
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
60001dba:	and.w	r2, r0, #1
60001dbe:	subs	r4, #1
60001dc0:	mul.w	r2, r3, r2
60001dc4:	eor.w	r0, r2, r0, lsr #1
60001dc8:	bne.n	60001dba <CrashReportClass::printTo(Print&) const+0x22>
	while (data < end) {
60001dca:	cmp	r1, r6
60001dcc:	bne.n	60001db2 <CrashReportClass::printTo(Print&) const+0x1a>
	}
	if (crc != info->crc) return 0;
60001dce:	ldr.w	r8, [pc, #412]	; 60001f6c <CrashReportClass::printTo(Print&) const+0x1d4>
60001dd2:	ldr.w	r3, [r8, #168]	; 0xa8
60001dd6:	cmp	r0, r3
60001dd8:	beq.w	60001fb4 <CrashReportClass::printTo(Print&) const+0x21c>
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
60001ddc:	ldr	r3, [r5, #0]
60001dde:	movs	r2, #23
60001de0:	ldr	r1, [pc, #408]	; (60001f7c <CrashReportClass::printTo(Print&) const+0x1e4>)
60001de2:	mov	r0, r5
60001de4:	ldr	r3, [r3, #4]
60001de6:	blx	r3
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
60001de8:	mov	r0, r5
60001dea:	bl	60002700 <___ZN5Print7printlnEv_veneer>
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
60001dee:	ldr	r3, [r5, #0]
60001df0:	movs	r2, #72	; 0x48
60001df2:	ldr	r1, [pc, #396]	; (60001f80 <CrashReportClass::printTo(Print&) const+0x1e8>)
60001df4:	ldr	r3, [r3, #4]
60001df6:	mov	r0, r5
60001df8:	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001dfa:	mov	r0, r5
60001dfc:	bl	60002700 <___ZN5Print7printlnEv_veneer>
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
60001e00:	ldr	r3, [r5, #0]
60001e02:	movs	r2, #73	; 0x49
60001e04:	ldr	r1, [pc, #380]	; (60001f84 <CrashReportClass::printTo(Print&) const+0x1ec>)
60001e06:	ldr	r3, [r3, #4]
60001e08:	mov	r0, r5
60001e0a:	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001e0c:	mov	r0, r5
60001e0e:	bl	60002700 <___ZN5Print7printlnEv_veneer>
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
60001e12:	ldr	r3, [r5, #0]
60001e14:	movs	r2, #36	; 0x24
60001e16:	ldr	r1, [pc, #368]	; (60001f88 <CrashReportClass::printTo(Print&) const+0x1f0>)
60001e18:	ldr	r3, [r3, #4]
60001e1a:	mov	r0, r5
60001e1c:	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001e1e:	mov	r0, r5
60001e20:	bl	60002700 <___ZN5Print7printlnEv_veneer>
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
60001e24:	ldr	r3, [r5, #0]
60001e26:	movs	r2, #71	; 0x47
60001e28:	ldr	r1, [pc, #352]	; (60001f8c <CrashReportClass::printTo(Print&) const+0x1f4>)
60001e2a:	ldr	r3, [r3, #4]
60001e2c:	mov	r0, r5
60001e2e:	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001e30:	mov	r0, r5
60001e32:	bl	60002700 <___ZN5Print7printlnEv_veneer>
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
60001e36:	ldr	r3, [r5, #0]
60001e38:	movs	r2, #63	; 0x3f
60001e3a:	ldr	r1, [pc, #340]	; (60001f90 <CrashReportClass::printTo(Print&) const+0x1f8>)
60001e3c:	ldr	r3, [r3, #4]
60001e3e:	mov	r0, r5
60001e40:	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001e42:	mov	r0, r5
60001e44:	bl	60002700 <___ZN5Print7printlnEv_veneer>
  uint32_t SRSR = SRC_SRSR;
60001e48:	ldr	r3, [pc, #328]	; (60001f94 <CrashReportClass::printTo(Print&) const+0x1fc>)
60001e4a:	ldr	r4, [r3, #8]
  if (SRSR & SRC_SRSR_LOCKUP_SYSRESETREQ) {
60001e4c:	lsls	r2, r4, #30
60001e4e:	bmi.w	600020de <CrashReportClass::printTo(Print&) const+0x346>
  if (SRSR & SRC_SRSR_CSU_RESET_B) {
60001e52:	lsls	r3, r4, #29
60001e54:	bmi.w	600020fe <CrashReportClass::printTo(Print&) const+0x366>
  if (SRSR & SRC_SRSR_IPP_USER_RESET_B) {
60001e58:	lsls	r7, r4, #28
60001e5a:	bmi.w	60002116 <CrashReportClass::printTo(Print&) const+0x37e>
  if (SRSR & SRC_SRSR_WDOG_RST_B) {
60001e5e:	lsls	r6, r4, #27
60001e60:	bmi.w	6000212e <CrashReportClass::printTo(Print&) const+0x396>
  if (SRSR & SRC_SRSR_JTAG_RST_B) {
60001e64:	lsls	r0, r4, #26
60001e66:	bmi.w	60002146 <CrashReportClass::printTo(Print&) const+0x3ae>
  if (SRSR & SRC_SRSR_JTAG_SW_RST) {
60001e6a:	lsls	r1, r4, #25
60001e6c:	bmi.w	6000215e <CrashReportClass::printTo(Print&) const+0x3c6>
  if (SRSR & SRC_SRSR_WDOG3_RST_B) {
60001e70:	lsls	r2, r4, #24
60001e72:	bmi.w	60002176 <CrashReportClass::printTo(Print&) const+0x3de>
  if (SRSR & SRC_SRSR_TEMPSENSE_RST_B) {
60001e76:	lsls	r3, r4, #23
60001e78:	bmi.w	6000218e <CrashReportClass::printTo(Print&) const+0x3f6>
  if (bc->bitmask) {
60001e7c:	ldr	r7, [pc, #236]	; (60001f6c <CrashReportClass::printTo(Print&) const+0x1d4>)
60001e7e:	ldr.w	r3, [r7, #192]	; 0xc0
60001e82:	cmp	r3, #0
60001e84:	beq.n	60001f2a <CrashReportClass::printTo(Print&) const+0x192>
60001e86:	movs	r4, #1
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
60001e88:	ldr.w	r9, [pc, #292]	; 60001fb0 <CrashReportClass::printTo(Print&) const+0x218>
60001e8c:	ldr.w	r8, [pc, #280]	; 60001fa8 <CrashReportClass::printTo(Print&) const+0x210>
60001e90:	b.n	60001e9c <CrashReportClass::printTo(Print&) const+0x104>
    for (int i=0; i < 6; i++) {
60001e92:	adds	r4, #1
60001e94:	cmp	r4, #7
60001e96:	beq.n	60001f0c <CrashReportClass::printTo(Print&) const+0x174>
      if (bc->bitmask & (1 << i)) {
60001e98:	ldr.w	r3, [r7, #192]	; 0xc0
60001e9c:	subs	r2, r4, #1
60001e9e:	movs	r6, #1
60001ea0:	lsl.w	r1, r6, r2
60001ea4:	tst	r1, r3
60001ea6:	beq.n	60001e92 <CrashReportClass::printTo(Print&) const+0xfa>
60001ea8:	ldr	r3, [r5, #0]
60001eaa:	add.w	sl, r8, r2, lsl #2
60001eae:	mov	r1, r9
60001eb0:	movs	r2, #14
60001eb2:	ldr	r3, [r3, #4]
60001eb4:	mov	r0, r5
60001eb6:	blx	r3
	size_t print(int n)				{ return print((long)n); }
60001eb8:	mov	r1, r4
60001eba:	mov	r0, r5
    for (int i=0; i < 6; i++) {
60001ebc:	adds	r4, #1
60001ebe:	bl	600026c8 <___ZN5Print5printEl_veneer>
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
60001ec2:	ldr	r3, [r5, #0]
60001ec4:	movs	r2, #5
60001ec6:	ldr	r1, [pc, #208]	; (60001f98 <CrashReportClass::printTo(Print&) const+0x200>)
60001ec8:	ldr	r3, [r3, #4]
60001eca:	mov	r0, r5
60001ecc:	blx	r3
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
60001ece:	movs	r3, #0
60001ed0:	ldr.w	r1, [sl, #4]
60001ed4:	movs	r2, #10
60001ed6:	mov	r0, r5
60001ed8:	bl	600026d0 <___ZN5Print11printNumberEmhh_veneer>
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
60001edc:	ldr	r3, [r5, #0]
60001ede:	movs	r2, #4
60001ee0:	ldr	r1, [pc, #184]	; (60001f9c <CrashReportClass::printTo(Print&) const+0x204>)
60001ee2:	ldr	r3, [r3, #4]
60001ee4:	mov	r0, r5
60001ee6:	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001ee8:	ldr.w	r1, [sl, #4]
60001eec:	movs	r3, #0
60001eee:	movs	r2, #16
60001ef0:	mov	r0, r5
60001ef2:	bl	600026d0 <___ZN5Print11printNumberEmhh_veneer>
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
60001ef6:	ldr	r3, [r5, #0]
60001ef8:	mov	r2, r6
60001efa:	ldr	r1, [pc, #164]	; (60001fa0 <CrashReportClass::printTo(Print&) const+0x208>)
60001efc:	ldr	r3, [r3, #4]
60001efe:	mov	r0, r5
60001f00:	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001f02:	mov	r0, r5
60001f04:	bl	60002700 <___ZN5Print7printlnEv_veneer>
60001f08:	cmp	r4, #7
60001f0a:	bne.n	60001e98 <CrashReportClass::printTo(Print&) const+0x100>
    *(volatile uint32_t *)(&bc->bitmask) = 0;
60001f0c:	ldr	r3, [pc, #148]	; (60001fa4 <CrashReportClass::printTo(Print&) const+0x20c>)
60001f0e:	movs	r2, #0
60001f10:	str.w	r2, [r3, #4032]	; 0xfc0
static inline void arm_dcache_flush(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
60001f14:	dsb	sy
	do {
		SCB_CACHE_DCCMVAC = location;
60001f18:	mov.w	r3, #3758153728	; 0xe000e000
60001f1c:	ldr	r2, [pc, #136]	; (60001fa8 <CrashReportClass::printTo(Print&) const+0x210>)
60001f1e:	str.w	r2, [r3, #3944]	; 0xf68
		location += 32;
	} while (location < end_addr);
	asm("dsb");
60001f22:	dsb	sy
	asm("isb");
60001f26:	isb	sy
}

FLASHMEM
static void cleardata(struct arm_fault_info_struct *info)
{
	info->len = 0;
60001f2a:	ldr	r2, [pc, #64]	; (60001f6c <CrashReportClass::printTo(Print&) const+0x1d4>)
60001f2c:	movs	r3, #0
	info->ipsr  = 0;
60001f2e:	strd	r3, r3, [r2, #128]	; 0x80
	info->cfsr  = 0;
	info->hfsr  = 0;
60001f32:	strd	r3, r3, [r2, #136]	; 0x88
	info->mmfar = 0;
	info->bfar  = 0;
60001f36:	strd	r3, r3, [r2, #144]	; 0x90
	info->ret = 0;
	info->xpsr  = 0;
60001f3a:	strd	r3, r3, [r2, #152]	; 0x98
	info->crc = 0;
60001f3e:	str.w	r3, [r2, #168]	; 0xa8
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
60001f42:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
60001f46:	mov.w	r2, #3758153728	; 0xe000e000
60001f4a:	ldr	r0, [pc, #36]	; (60001f70 <CrashReportClass::printTo(Print&) const+0x1d8>)
60001f4c:	ldr	r1, [pc, #92]	; (60001fac <CrashReportClass::printTo(Print&) const+0x214>)
60001f4e:	str.w	r0, [r2, #3952]	; 0xf70
60001f52:	str.w	r1, [r2, #3952]	; 0xf70
		location += 32;
	} while (location < end_addr);
	asm("dsb");
60001f56:	dsb	sy
	asm("isb");
60001f5a:	isb	sy
	arm_dcache_flush_delete(info, sizeof(*info));
	SRC_SRSR = SRC_SRSR; // zeros all write-1-to-clear bits
60001f5e:	ldr	r2, [pc, #52]	; (60001f94 <CrashReportClass::printTo(Print&) const+0x1fc>)
}
60001f60:	movs	r0, #1
	SRC_SRSR = SRC_SRSR; // zeros all write-1-to-clear bits
60001f62:	ldr	r1, [r2, #8]
60001f64:	str	r1, [r2, #8]
	SRC_GPR5 = 0;
60001f66:	str	r3, [r2, #48]	; 0x30
}
60001f68:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
60001f6c:	.word	0x2027ff00
60001f70:	.word	0x2027ff80
60001f74:	.word	0xedb88320
60001f78:	.word	0x2027ffa8
60001f7c:	.word	0x20001680
60001f80:	.word	0x20001698
60001f84:	.word	0x200016e4
60001f88:	.word	0x20001730
60001f8c:	.word	0x20001758
60001f90:	.word	0x200017a0
60001f94:	.word	0x400f8000
60001f98:	.word	0x20001a04
60001f9c:	.word	0x20001a0c
60001fa0:	.word	0x2000172c
60001fa4:	.word	0x2027f000
60001fa8:	.word	0x2027ffc0
60001fac:	.word	0x2027ffa0
60001fb0:	.word	0x200019f4
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
60001fb4:	ldr	r3, [r5, #0]
60001fb6:	movs	r2, #12
60001fb8:	ldr	r1, [pc, #676]	; (60002260 <CrashReportClass::printTo(Print&) const+0x4c8>)
60001fba:	mov	r0, r5
60001fbc:	ldr	r3, [r3, #4]
60001fbe:	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001fc0:	mov	r0, r5
60001fc2:	bl	60002700 <___ZN5Print7printlnEv_veneer>
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
60001fc6:	ldr	r2, [r5, #0]
    uint8_t ss = info->time % 60;
60001fc8:	ldr.w	r9, [r8, #164]	; 0xa4
60001fcc:	mov	r0, r5
    info->time /= 60;
60001fce:	ldr	r3, [pc, #660]	; (60002264 <CrashReportClass::printTo(Print&) const+0x4cc>)
60001fd0:	ldr.w	sl, [r2, #4]
60001fd4:	umull	r2, r7, r3, r9
60001fd8:	ldr	r1, [pc, #652]	; (60002268 <CrashReportClass::printTo(Print&) const+0x4d0>)
60001fda:	lsrs	r7, r7, #5
    info->time /= 60;
60001fdc:	umull	r2, r3, r3, r7
60001fe0:	movs	r2, #38	; 0x26
60001fe2:	lsrs	r6, r3, #5
60001fe4:	str.w	r6, [r8, #164]	; 0xa4
60001fe8:	blx	sl
    uint8_t hh = info->time % 24;
60001fea:	ldr	r1, [pc, #640]	; (6000226c <CrashReportClass::printTo(Print&) const+0x4d4>)
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
60001fec:	movs	r2, #10
60001fee:	mov	r0, r5
60001ff0:	umull	r3, r1, r1, r6
60001ff4:	mov	r3, r4
60001ff6:	lsrs	r1, r1, #4
60001ff8:	add.w	r1, r1, r1, lsl #1
60001ffc:	sub.w	r1, r6, r1, lsl #3
60002000:	bl	600026d0 <___ZN5Print11printNumberEmhh_veneer>
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
60002004:	ldr	r3, [r5, #0]
    uint8_t mm = info->time % 60;
60002006:	rsb	r6, r6, r6, lsl #4
6000200a:	movs	r2, #1
6000200c:	ldr	r3, [r3, #4]
6000200e:	mov	r0, r5
60002010:	ldr	r1, [pc, #604]	; (60002270 <CrashReportClass::printTo(Print&) const+0x4d8>)
60002012:	blx	r3
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
60002014:	mov	r3, r4
60002016:	sub.w	r1, r7, r6, lsl #2
6000201a:	movs	r2, #10
6000201c:	mov	r0, r5
    uint8_t ss = info->time % 60;
6000201e:	rsb	r7, r7, r7, lsl #4
60002022:	bl	600026d0 <___ZN5Print11printNumberEmhh_veneer>
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
60002026:	ldr	r3, [r5, #0]
60002028:	movs	r2, #1
6000202a:	ldr	r1, [pc, #580]	; (60002270 <CrashReportClass::printTo(Print&) const+0x4d8>)
6000202c:	ldr	r3, [r3, #4]
6000202e:	mov	r0, r5
60002030:	blx	r3
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
60002032:	mov	r3, r4
60002034:	sub.w	r1, r9, r7, lsl #2
60002038:	movs	r2, #10
6000203a:	mov	r0, r5
6000203c:	bl	600026d0 <___ZN5Print11printNumberEmhh_veneer>
	// Print a string and newline
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	// Print an unsigned number and newline
	size_t println(uint8_t b)			{ return print(b) + println(); }
60002040:	mov	r0, r5
60002042:	bl	60002700 <___ZN5Print7printlnEv_veneer>
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
60002046:	ldr	r3, [r5, #0]
60002048:	movs	r2, #36	; 0x24
6000204a:	ldr	r1, [pc, #552]	; (60002274 <CrashReportClass::printTo(Print&) const+0x4dc>)
6000204c:	ldr	r3, [r3, #4]
6000204e:	mov	r0, r5
60002050:	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60002052:	mov	r3, r4
60002054:	movs	r2, #16
60002056:	ldr.w	r1, [r8, #152]	; 0x98
6000205a:	mov	r0, r5
6000205c:	bl	600026d0 <___ZN5Print11printNumberEmhh_veneer>
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(unsigned int n, int base)	{ return print(n, base) + println(); }
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(long n, int base)		{ return print(n, base) + println(); }
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
60002060:	mov	r0, r5
60002062:	bl	60002700 <___ZN5Print7printlnEv_veneer>
    uint32_t _CFSR = info->cfsr;
60002066:	ldr.w	r6, [r8, #136]	; 0x88
    if (_CFSR > 0) {
6000206a:	cmp	r6, #0
6000206c:	bne.w	600021ec <CrashReportClass::printTo(Print&) const+0x454>
    uint32_t _HFSR = info->hfsr;
60002070:	ldr	r6, [pc, #516]	; (60002278 <CrashReportClass::printTo(Print&) const+0x4e0>)
60002072:	ldr.w	r4, [r6, #140]	; 0x8c
    if (_HFSR > 0) {
60002076:	cmp	r4, #0
60002078:	bne.w	6000222e <CrashReportClass::printTo(Print&) const+0x496>
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
6000207c:	ldr	r3, [r5, #0]
6000207e:	movs	r2, #34	; 0x22
60002080:	ldr	r1, [pc, #504]	; (6000227c <CrashReportClass::printTo(Print&) const+0x4e4>)
60002082:	mov	r0, r5
60002084:	ldr	r3, [r3, #4]
60002086:	blx	r3
    p.print(info->temp);
60002088:	ldr	r3, [pc, #492]	; (60002278 <CrashReportClass::printTo(Print&) const+0x4e0>)
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
6000208a:	movs	r1, #2
6000208c:	mov	r0, r5
6000208e:	vldr	s0, [r3, #160]	; 0xa0
60002092:	vcvt.f64.f32	d0, s0
60002096:	bl	600026d8 <___ZN5Print10printFloatEdh_veneer>
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
6000209a:	ldr	r3, [r5, #0]
6000209c:	movs	r2, #5
6000209e:	ldr	r1, [pc, #480]	; (60002280 <CrashReportClass::printTo(Print&) const+0x4e8>)
600020a0:	ldr	r3, [r3, #4]
600020a2:	mov	r0, r5
600020a4:	blx	r3
600020a6:	ldr	r3, [r5, #0]
600020a8:	movs	r2, #29
600020aa:	ldr	r1, [pc, #472]	; (60002284 <CrashReportClass::printTo(Print&) const+0x4ec>)
600020ac:	ldr	r3, [r3, #4]
600020ae:	mov	r0, r5
600020b0:	blx	r3
    p.print( F_CPU_ACTUAL/1000000);
600020b2:	ldr	r2, [pc, #468]	; (60002288 <CrashReportClass::printTo(Print&) const+0x4f0>)
600020b4:	ldr	r0, [pc, #468]	; (6000228c <CrashReportClass::printTo(Print&) const+0x4f4>)
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
600020b6:	movs	r3, #0
600020b8:	ldr	r1, [r2, #0]
600020ba:	movs	r2, #10
600020bc:	umull	r0, r1, r0, r1
600020c0:	mov	r0, r5
600020c2:	lsrs	r1, r1, #18
600020c4:	bl	600026d0 <___ZN5Print11printNumberEmhh_veneer>
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
600020c8:	ldr	r3, [r5, #0]
600020ca:	movs	r2, #4
600020cc:	ldr	r1, [pc, #448]	; (60002290 <CrashReportClass::printTo(Print&) const+0x4f8>)
600020ce:	ldr	r3, [r3, #4]
600020d0:	mov	r0, r5
600020d2:	blx	r3
  uint32_t SRSR = SRC_SRSR;
600020d4:	ldr	r3, [pc, #444]	; (60002294 <CrashReportClass::printTo(Print&) const+0x4fc>)
600020d6:	ldr	r4, [r3, #8]
  if (SRSR & SRC_SRSR_LOCKUP_SYSRESETREQ) {
600020d8:	lsls	r2, r4, #30
600020da:	bpl.w	60001e52 <CrashReportClass::printTo(Print&) const+0xba>
    uint32_t gpr5 = SRC_GPR5;
600020de:	ldr	r2, [r3, #48]	; 0x30
    if (gpr5 == 0x0BAD00F1) {
600020e0:	ldr	r3, [pc, #436]	; (60002298 <CrashReportClass::printTo(Print&) const+0x500>)
600020e2:	cmp	r2, r3
600020e4:	ldr	r3, [r5, #0]
600020e6:	beq.n	600021e6 <CrashReportClass::printTo(Print&) const+0x44e>
600020e8:	movs	r2, #64	; 0x40
600020ea:	ldr	r1, [pc, #432]	; (6000229c <CrashReportClass::printTo(Print&) const+0x504>)
600020ec:	ldr	r3, [r3, #4]
600020ee:	mov	r0, r5
600020f0:	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
600020f2:	mov	r0, r5
600020f4:	bl	60002700 <___ZN5Print7printlnEv_veneer>
  if (SRSR & SRC_SRSR_CSU_RESET_B) {
600020f8:	lsls	r3, r4, #29
600020fa:	bpl.w	60001e58 <CrashReportClass::printTo(Print&) const+0xc0>
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
600020fe:	ldr	r3, [r5, #0]
60002100:	movs	r2, #39	; 0x27
60002102:	ldr	r1, [pc, #412]	; (600022a0 <CrashReportClass::printTo(Print&) const+0x508>)
60002104:	mov	r0, r5
60002106:	ldr	r3, [r3, #4]
60002108:	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
6000210a:	mov	r0, r5
6000210c:	bl	60002700 <___ZN5Print7printlnEv_veneer>
  if (SRSR & SRC_SRSR_IPP_USER_RESET_B) {
60002110:	lsls	r7, r4, #28
60002112:	bpl.w	60001e5e <CrashReportClass::printTo(Print&) const+0xc6>
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
60002116:	ldr	r3, [r5, #0]
60002118:	movs	r2, #42	; 0x2a
6000211a:	ldr	r1, [pc, #392]	; (600022a4 <CrashReportClass::printTo(Print&) const+0x50c>)
6000211c:	mov	r0, r5
6000211e:	ldr	r3, [r3, #4]
60002120:	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60002122:	mov	r0, r5
60002124:	bl	60002700 <___ZN5Print7printlnEv_veneer>
  if (SRSR & SRC_SRSR_WDOG_RST_B) {
60002128:	lsls	r6, r4, #27
6000212a:	bpl.w	60001e64 <CrashReportClass::printTo(Print&) const+0xcc>
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
6000212e:	ldr	r3, [r5, #0]
60002130:	movs	r2, #38	; 0x26
60002132:	ldr	r1, [pc, #372]	; (600022a8 <CrashReportClass::printTo(Print&) const+0x510>)
60002134:	mov	r0, r5
60002136:	ldr	r3, [r3, #4]
60002138:	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
6000213a:	mov	r0, r5
6000213c:	bl	60002700 <___ZN5Print7printlnEv_veneer>
  if (SRSR & SRC_SRSR_JTAG_RST_B) {
60002140:	lsls	r0, r4, #26
60002142:	bpl.w	60001e6a <CrashReportClass::printTo(Print&) const+0xd2>
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
60002146:	ldr	r3, [r5, #0]
60002148:	movs	r2, #41	; 0x29
6000214a:	ldr	r1, [pc, #352]	; (600022ac <CrashReportClass::printTo(Print&) const+0x514>)
6000214c:	mov	r0, r5
6000214e:	ldr	r3, [r3, #4]
60002150:	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60002152:	mov	r0, r5
60002154:	bl	60002700 <___ZN5Print7printlnEv_veneer>
  if (SRSR & SRC_SRSR_JTAG_SW_RST) {
60002158:	lsls	r1, r4, #25
6000215a:	bpl.w	60001e70 <CrashReportClass::printTo(Print&) const+0xd8>
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
6000215e:	ldr	r3, [r5, #0]
60002160:	movs	r2, #33	; 0x21
60002162:	ldr	r1, [pc, #332]	; (600022b0 <CrashReportClass::printTo(Print&) const+0x518>)
60002164:	mov	r0, r5
60002166:	ldr	r3, [r3, #4]
60002168:	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
6000216a:	mov	r0, r5
6000216c:	bl	60002700 <___ZN5Print7printlnEv_veneer>
  if (SRSR & SRC_SRSR_WDOG3_RST_B) {
60002170:	lsls	r2, r4, #24
60002172:	bpl.w	60001e76 <CrashReportClass::printTo(Print&) const+0xde>
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
60002176:	ldr	r3, [r5, #0]
60002178:	movs	r2, #33	; 0x21
6000217a:	ldr	r1, [pc, #312]	; (600022b4 <CrashReportClass::printTo(Print&) const+0x51c>)
6000217c:	mov	r0, r5
6000217e:	ldr	r3, [r3, #4]
60002180:	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60002182:	mov	r0, r5
60002184:	bl	60002700 <___ZN5Print7printlnEv_veneer>
  if (SRSR & SRC_SRSR_TEMPSENSE_RST_B) {
60002188:	lsls	r3, r4, #23
6000218a:	bpl.w	60001e7c <CrashReportClass::printTo(Print&) const+0xe4>
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
6000218e:	ldr	r3, [r5, #0]
60002190:	movs	r2, #41	; 0x29
60002192:	ldr	r1, [pc, #292]	; (600022b8 <CrashReportClass::printTo(Print&) const+0x520>)
60002194:	mov	r0, r5
60002196:	ldr	r3, [r3, #4]
60002198:	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
6000219a:	mov	r0, r5
6000219c:	bl	60002700 <___ZN5Print7printlnEv_veneer>
	  SRC_SRSR &= ~0x100u; /* Write 0 to clear. */
600021a0:	ldr	r1, [pc, #240]	; (60002294 <CrashReportClass::printTo(Print&) const+0x4fc>)
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
600021a2:	ldr	r0, [r5, #0]
600021a4:	movs	r2, #33	; 0x21
600021a6:	ldr	r3, [r1, #8]
600021a8:	ldr	r4, [r0, #4]
600021aa:	mov	r0, r5
600021ac:	bic.w	r3, r3, #256	; 0x100
600021b0:	str	r3, [r1, #8]
600021b2:	ldr	r1, [pc, #264]	; (600022bc <CrashReportClass::printTo(Print&) const+0x524>)
600021b4:	blx	r4
	size_t println(const char s[])			{ return print(s) + println(); }
600021b6:	mov	r0, r5
600021b8:	bl	60002700 <___ZN5Print7printlnEv_veneer>
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
600021bc:	ldr	r3, [r5, #0]
600021be:	movs	r2, #66	; 0x42
600021c0:	ldr	r1, [pc, #252]	; (600022c0 <CrashReportClass::printTo(Print&) const+0x528>)
600021c2:	ldr	r3, [r3, #4]
600021c4:	mov	r0, r5
600021c6:	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
600021c8:	mov	r0, r5
600021ca:	bl	60002700 <___ZN5Print7printlnEv_veneer>
	  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
600021ce:	ldr	r2, [pc, #244]	; (600022c4 <CrashReportClass::printTo(Print&) const+0x52c>)
	  IOMUXC_GPR_GPR16 = 0x00000007;
600021d0:	ldr	r3, [pc, #244]	; (600022c8 <CrashReportClass::printTo(Print&) const+0x530>)
600021d2:	movs	r1, #7
600021d4:	str	r1, [r3, #64]	; 0x40
	  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
600021d6:	ldr	r3, [r2, #56]	; 0x38
600021d8:	orr.w	r3, r3, #64	; 0x40
600021dc:	str	r3, [r2, #56]	; 0x38
	  asm volatile ("dsb":::"memory");
600021de:	dsb	sy
	  while (1) asm ("wfi");
600021e2:	wfi
600021e4:	b.n	600021e2 <CrashReportClass::printTo(Print&) const+0x44a>
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
600021e6:	movs	r2, #72	; 0x48
600021e8:	ldr	r1, [pc, #224]	; (600022cc <CrashReportClass::printTo(Print&) const+0x534>)
600021ea:	b.n	600020ec <CrashReportClass::printTo(Print&) const+0x354>
600021ec:	ldr	r3, [r5, #0]
600021ee:	movs	r2, #8
600021f0:	ldr	r1, [pc, #220]	; (600022d0 <CrashReportClass::printTo(Print&) const+0x538>)
600021f2:	mov	r0, r5
600021f4:	ldr	r3, [r3, #4]
600021f6:	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
600021f8:	mov	r3, r4
600021fa:	movs	r2, #16
600021fc:	ldr.w	r1, [r8, #136]	; 0x88
60002200:	mov	r0, r5
60002202:	bl	600026d0 <___ZN5Print11printNumberEmhh_veneer>
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
60002206:	mov	r0, r5
60002208:	bl	60002700 <___ZN5Print7printlnEv_veneer>
      if ((_CFSR & 1) == 1) {
6000220c:	lsls	r4, r6, #31
6000220e:	bmi.n	600022e0 <CrashReportClass::printTo(Print&) const+0x548>
      } else  if (((_CFSR & (0x02)) >> 1) == 1) {
60002210:	lsls	r0, r6, #30
60002212:	bmi.w	6000244e <CrashReportClass::printTo(Print&) const+0x6b6>
      } else if (((_CFSR & (0x08)) >> 3) == 1) {
60002216:	lsls	r1, r6, #28
60002218:	bmi.w	60002436 <CrashReportClass::printTo(Print&) const+0x69e>
      } else if (((_CFSR & (0x10)) >> 4) == 1) {
6000221c:	lsls	r2, r6, #27
6000221e:	bmi.w	6000246e <CrashReportClass::printTo(Print&) const+0x6d6>
      } else if (((_CFSR & (0x20)) >> 5) == 1) {
60002222:	lsls	r3, r6, #26
60002224:	bpl.n	600022f2 <CrashReportClass::printTo(Print&) const+0x55a>
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
60002226:	ldr	r3, [r5, #0]
60002228:	movs	r2, #42	; 0x2a
6000222a:	ldr	r1, [pc, #168]	; (600022d4 <CrashReportClass::printTo(Print&) const+0x53c>)
6000222c:	b.n	600022e6 <CrashReportClass::printTo(Print&) const+0x54e>
6000222e:	ldr	r3, [r5, #0]
60002230:	movs	r2, #8
60002232:	ldr	r1, [pc, #164]	; (600022d8 <CrashReportClass::printTo(Print&) const+0x540>)
60002234:	mov	r0, r5
60002236:	ldr	r3, [r3, #4]
60002238:	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
6000223a:	movs	r3, #0
6000223c:	movs	r2, #16
6000223e:	ldr.w	r1, [r6, #140]	; 0x8c
60002242:	mov	r0, r5
60002244:	bl	600026d0 <___ZN5Print11printNumberEmhh_veneer>
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
60002248:	mov	r0, r5
6000224a:	bl	60002700 <___ZN5Print7printlnEv_veneer>
      if (((_HFSR & (0x02)) >> 1) == 1) {
6000224e:	lsls	r0, r4, #30
60002250:	bmi.n	6000231e <CrashReportClass::printTo(Print&) const+0x586>
      } else if (((_HFSR & (0x40000000)) >> 30) == 1) {
60002252:	lsls	r1, r4, #1
60002254:	bpl.w	6000207c <CrashReportClass::printTo(Print&) const+0x2e4>
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
60002258:	ldr	r3, [r5, #0]
6000225a:	movs	r2, #27
6000225c:	ldr	r1, [pc, #124]	; (600022dc <CrashReportClass::printTo(Print&) const+0x544>)
6000225e:	b.n	60002324 <CrashReportClass::printTo(Print&) const+0x58c>
60002260:	.word	0x20001168
60002264:	.word	0x88888889
60002268:	.word	0x20001178
6000226c:	.word	0xaaaaaaab
60002270:	.word	0x200011a0
60002274:	.word	0x200011a4
60002278:	.word	0x2027ff00
6000227c:	.word	0x2000162c
60002280:	.word	0x20001650
60002284:	.word	0x20001658
60002288:	.word	0x20001c10
6000228c:	.word	0x431bde83
60002290:	.word	0x20001678
60002294:	.word	0x400f8000
60002298:	.word	0x0bad00f1
6000229c:	.word	0x2000182c
600022a0:	.word	0x20001870
600022a4:	.word	0x20001898
600022a8:	.word	0x200018c4
600022ac:	.word	0x200018ec
600022b0:	.word	0x20001918
600022b4:	.word	0x2000193c
600022b8:	.word	0x20001960
600022bc:	.word	0x2000198c
600022c0:	.word	0x200019b0
600022c4:	.word	0x400d4000
600022c8:	.word	0x400ac000
600022cc:	.word	0x200017e0
600022d0:	.word	0x200011cc
600022d4:	.word	0x2000127c
600022d8:	.word	0x200015dc
600022dc:	.word	0x20001610
600022e0:	ldr	r3, [r5, #0]
600022e2:	movs	r2, #40	; 0x28
600022e4:	ldr	r1, [pc, #428]	; (60002494 <CrashReportClass::printTo(Print&) const+0x6fc>)
600022e6:	ldr	r3, [r3, #4]
600022e8:	mov	r0, r5
600022ea:	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
600022ec:	mov	r0, r5
600022ee:	bl	60002700 <___ZN5Print7printlnEv_veneer>
      if (((_CFSR & (0x80)) >> 7) == 1) {
600022f2:	lsls	r7, r6, #24
600022f4:	bmi.n	60002370 <CrashReportClass::printTo(Print&) const+0x5d8>
      if (((_CFSR & 0x100) >> 8) == 1) {
600022f6:	lsls	r4, r6, #23
600022f8:	bmi.n	60002332 <CrashReportClass::printTo(Print&) const+0x59a>
      } else  if (((_CFSR & (0x200)) >> 9) == 1) {
600022fa:	lsls	r0, r6, #22
600022fc:	bmi.w	60002446 <CrashReportClass::printTo(Print&) const+0x6ae>
      } else if (((_CFSR & (0x400)) >> 10) == 1) {
60002300:	lsls	r1, r6, #21
60002302:	bmi.w	6000243e <CrashReportClass::printTo(Print&) const+0x6a6>
      } else if (((_CFSR & (0x800)) >> 11) == 1) {
60002306:	lsls	r2, r6, #20
60002308:	bmi.w	60002466 <CrashReportClass::printTo(Print&) const+0x6ce>
      } else if (((_CFSR & (0x1000)) >> 12) == 1) {
6000230c:	lsls	r3, r6, #19
6000230e:	bmi.w	6000245e <CrashReportClass::printTo(Print&) const+0x6c6>
      } else if (((_CFSR & (0x2000)) >> 13) == 1) {
60002312:	lsls	r7, r6, #18
60002314:	bpl.n	60002344 <CrashReportClass::printTo(Print&) const+0x5ac>
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
60002316:	ldr	r3, [r5, #0]
60002318:	movs	r2, #49	; 0x31
6000231a:	ldr	r1, [pc, #380]	; (60002498 <CrashReportClass::printTo(Print&) const+0x700>)
6000231c:	b.n	60002338 <CrashReportClass::printTo(Print&) const+0x5a0>
6000231e:	ldr	r3, [r5, #0]
60002320:	movs	r2, #38	; 0x26
60002322:	ldr	r1, [pc, #376]	; (6000249c <CrashReportClass::printTo(Print&) const+0x704>)
60002324:	mov	r0, r5
60002326:	ldr	r3, [r3, #4]
60002328:	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
6000232a:	mov	r0, r5
6000232c:	bl	60002700 <___ZN5Print7printlnEv_veneer>
60002330:	b.n	6000207c <CrashReportClass::printTo(Print&) const+0x2e4>
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
60002332:	ldr	r3, [r5, #0]
60002334:	movs	r2, #32
60002336:	ldr	r1, [pc, #360]	; (600024a0 <CrashReportClass::printTo(Print&) const+0x708>)
60002338:	ldr	r3, [r3, #4]
6000233a:	mov	r0, r5
6000233c:	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
6000233e:	mov	r0, r5
60002340:	bl	60002700 <___ZN5Print7printlnEv_veneer>
      if (((_CFSR & (0x8000)) >> 15) == 1) {
60002344:	lsls	r4, r6, #16
60002346:	bmi.n	600023c8 <CrashReportClass::printTo(Print&) const+0x630>
      if (((_CFSR & 0x10000) >> 16) == 1) {
60002348:	lsls	r0, r6, #15
6000234a:	bmi.n	600023a8 <CrashReportClass::printTo(Print&) const+0x610>
      } else  if (((_CFSR & (0x20000)) >> 17) == 1) {
6000234c:	lsls	r1, r6, #14
6000234e:	bmi.w	60002456 <CrashReportClass::printTo(Print&) const+0x6be>
      } else if (((_CFSR & (0x40000)) >> 18) == 1) {
60002352:	lsls	r2, r6, #13
60002354:	bmi.n	600023ec <CrashReportClass::printTo(Print&) const+0x654>
      } else if (((_CFSR & (0x80000)) >> 19) == 1) {
60002356:	lsls	r3, r6, #12
60002358:	bmi.w	6000247e <CrashReportClass::printTo(Print&) const+0x6e6>
      } else if (((_CFSR & (0x1000000)) >> 24) == 1) {
6000235c:	lsls	r7, r6, #7
6000235e:	bmi.w	60002476 <CrashReportClass::printTo(Print&) const+0x6de>
      } else if (((_CFSR & (0x2000000)) >> 25) == 1) {
60002362:	lsls	r4, r6, #6
60002364:	bpl.w	60002070 <CrashReportClass::printTo(Print&) const+0x2d8>
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
60002368:	ldr	r3, [r5, #0]
6000236a:	movs	r2, #27
6000236c:	ldr	r1, [pc, #308]	; (600024a4 <CrashReportClass::printTo(Print&) const+0x70c>)
6000236e:	b.n	600023ae <CrashReportClass::printTo(Print&) const+0x616>
60002370:	ldr	r3, [r5, #0]
60002372:	movs	r2, #33	; 0x21
        p.print(info->mmfar, HEX);
60002374:	ldr	r4, [pc, #304]	; (600024a8 <CrashReportClass::printTo(Print&) const+0x710>)
60002376:	mov	r0, r5
60002378:	ldr	r1, [pc, #304]	; (600024ac <CrashReportClass::printTo(Print&) const+0x714>)
6000237a:	ldr	r3, [r3, #4]
6000237c:	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
6000237e:	movs	r2, #16
60002380:	movs	r3, #0
60002382:	ldr.w	r1, [r4, #144]	; 0x90
60002386:	mov	r0, r5
60002388:	bl	600026d0 <___ZN5Print11printNumberEmhh_veneer>
        if (info->mmfar < 32) {
6000238c:	ldr.w	r2, [r4, #144]	; 0x90
60002390:	cmp	r2, #31
60002392:	bls.n	600023f4 <CrashReportClass::printTo(Print&) const+0x65c>
        } else if ((info->mmfar >= (uint32_t)&_ebss) && (info->mmfar < (uint32_t)&_ebss + 32)) {
60002394:	ldr	r3, [pc, #280]	; (600024b0 <CrashReportClass::printTo(Print&) const+0x718>)
60002396:	cmp	r2, r3
60002398:	bcc.n	600023a0 <CrashReportClass::printTo(Print&) const+0x608>
6000239a:	adds	r3, #32
6000239c:	cmp	r2, r3
6000239e:	bcc.n	60002486 <CrashReportClass::printTo(Print&) const+0x6ee>
        p.println();
600023a0:	mov	r0, r5
600023a2:	bl	60002700 <___ZN5Print7printlnEv_veneer>
600023a6:	b.n	600022f6 <CrashReportClass::printTo(Print&) const+0x55e>
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
600023a8:	ldr	r3, [r5, #0]
600023aa:	movs	r2, #35	; 0x23
600023ac:	ldr	r1, [pc, #260]	; (600024b4 <CrashReportClass::printTo(Print&) const+0x71c>)
600023ae:	ldr	r3, [r3, #4]
600023b0:	mov	r0, r5
    uint32_t _HFSR = info->hfsr;
600023b2:	ldr	r6, [pc, #244]	; (600024a8 <CrashReportClass::printTo(Print&) const+0x710>)
600023b4:	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
600023b6:	mov	r0, r5
600023b8:	bl	60002700 <___ZN5Print7printlnEv_veneer>
600023bc:	ldr.w	r4, [r6, #140]	; 0x8c
    if (_HFSR > 0) {
600023c0:	cmp	r4, #0
600023c2:	beq.w	6000207c <CrashReportClass::printTo(Print&) const+0x2e4>
600023c6:	b.n	6000222e <CrashReportClass::printTo(Print&) const+0x496>
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
600023c8:	ldr	r3, [r5, #0]
600023ca:	movs	r2, #33	; 0x21
600023cc:	ldr	r1, [pc, #232]	; (600024b8 <CrashReportClass::printTo(Print&) const+0x720>)
600023ce:	mov	r0, r5
600023d0:	ldr	r3, [r3, #4]
600023d2:	blx	r3
        p.println(info->bfar, HEX);
600023d4:	ldr	r1, [pc, #208]	; (600024a8 <CrashReportClass::printTo(Print&) const+0x710>)
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
600023d6:	movs	r3, #0
600023d8:	movs	r2, #16
600023da:	ldr.w	r1, [r1, #148]	; 0x94
600023de:	mov	r0, r5
600023e0:	bl	600026d0 <___ZN5Print11printNumberEmhh_veneer>
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
600023e4:	mov	r0, r5
600023e6:	bl	60002700 <___ZN5Print7printlnEv_veneer>
600023ea:	b.n	60002348 <CrashReportClass::printTo(Print&) const+0x5b0>
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
600023ec:	ldr	r3, [r5, #0]
600023ee:	movs	r2, #40	; 0x28
600023f0:	ldr	r1, [pc, #200]	; (600024bc <CrashReportClass::printTo(Print&) const+0x724>)
600023f2:	b.n	600023ae <CrashReportClass::printTo(Print&) const+0x616>
600023f4:	ldr	r3, [r5, #0]
600023f6:	movs	r2, #30
600023f8:	ldr	r1, [pc, #196]	; (600024c0 <CrashReportClass::printTo(Print&) const+0x728>)
600023fa:	mov	r0, r5
600023fc:	ldr	r3, [r3, #4]
600023fe:	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60002400:	ldr.w	r1, [r4, #152]	; 0x98
60002404:	movs	r3, #0
60002406:	movs	r2, #16
60002408:	mov	r0, r5
6000240a:	bl	600026d0 <___ZN5Print11printNumberEmhh_veneer>
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
6000240e:	ldr	r3, [r5, #0]
60002410:	movs	r2, #62	; 0x3e
60002412:	ldr	r1, [pc, #176]	; (600024c4 <CrashReportClass::printTo(Print&) const+0x72c>)
60002414:	ldr	r3, [r3, #4]
60002416:	mov	r0, r5
60002418:	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
6000241a:	ldr.w	r1, [r4, #152]	; 0x98
6000241e:	movs	r3, #0
60002420:	movs	r2, #16
60002422:	mov	r0, r5
60002424:	bl	600026d0 <___ZN5Print11printNumberEmhh_veneer>
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
60002428:	ldr	r3, [r5, #0]
6000242a:	movs	r2, #29
6000242c:	ldr	r1, [pc, #152]	; (600024c8 <CrashReportClass::printTo(Print&) const+0x730>)
6000242e:	ldr	r3, [r3, #4]
60002430:	mov	r0, r5
60002432:	blx	r3
60002434:	b.n	600023a0 <CrashReportClass::printTo(Print&) const+0x608>
60002436:	ldr	r3, [r5, #0]
60002438:	movs	r2, #41	; 0x29
6000243a:	ldr	r1, [pc, #144]	; (600024cc <CrashReportClass::printTo(Print&) const+0x734>)
6000243c:	b.n	600022e6 <CrashReportClass::printTo(Print&) const+0x54e>
6000243e:	ldr	r3, [r5, #0]
60002440:	movs	r2, #68	; 0x44
60002442:	ldr	r1, [pc, #140]	; (600024d0 <CrashReportClass::printTo(Print&) const+0x738>)
60002444:	b.n	60002338 <CrashReportClass::printTo(Print&) const+0x5a0>
60002446:	ldr	r3, [r5, #0]
60002448:	movs	r2, #44	; 0x2c
6000244a:	ldr	r1, [pc, #136]	; (600024d4 <CrashReportClass::printTo(Print&) const+0x73c>)
6000244c:	b.n	60002338 <CrashReportClass::printTo(Print&) const+0x5a0>
6000244e:	ldr	r3, [r5, #0]
60002450:	movs	r2, #33	; 0x21
60002452:	ldr	r1, [pc, #132]	; (600024d8 <CrashReportClass::printTo(Print&) const+0x740>)
60002454:	b.n	600022e6 <CrashReportClass::printTo(Print&) const+0x54e>
60002456:	ldr	r3, [r5, #0]
60002458:	movs	r2, #50	; 0x32
6000245a:	ldr	r1, [pc, #128]	; (600024dc <CrashReportClass::printTo(Print&) const+0x744>)
6000245c:	b.n	600023ae <CrashReportClass::printTo(Print&) const+0x616>
6000245e:	ldr	r3, [r5, #0]
60002460:	movs	r2, #51	; 0x33
60002462:	ldr	r1, [pc, #124]	; (600024e0 <CrashReportClass::printTo(Print&) const+0x748>)
60002464:	b.n	60002338 <CrashReportClass::printTo(Print&) const+0x5a0>
60002466:	ldr	r3, [r5, #0]
60002468:	movs	r2, #63	; 0x3f
6000246a:	ldr	r1, [pc, #120]	; (600024e4 <CrashReportClass::printTo(Print&) const+0x74c>)
6000246c:	b.n	60002338 <CrashReportClass::printTo(Print&) const+0x5a0>
6000246e:	ldr	r3, [r5, #0]
60002470:	movs	r2, #37	; 0x25
60002472:	ldr	r1, [pc, #116]	; (600024e8 <CrashReportClass::printTo(Print&) const+0x750>)
60002474:	b.n	600022e6 <CrashReportClass::printTo(Print&) const+0x54e>
60002476:	ldr	r3, [r5, #0]
60002478:	movs	r2, #40	; 0x28
6000247a:	ldr	r1, [pc, #112]	; (600024ec <CrashReportClass::printTo(Print&) const+0x754>)
6000247c:	b.n	600023ae <CrashReportClass::printTo(Print&) const+0x616>
6000247e:	ldr	r3, [r5, #0]
60002480:	movs	r2, #22
60002482:	ldr	r1, [pc, #108]	; (600024f0 <CrashReportClass::printTo(Print&) const+0x758>)
60002484:	b.n	600023ae <CrashReportClass::printTo(Print&) const+0x616>
60002486:	ldr	r3, [r5, #0]
60002488:	movs	r2, #65	; 0x41
6000248a:	ldr	r1, [pc, #104]	; (600024f4 <CrashReportClass::printTo(Print&) const+0x75c>)
6000248c:	mov	r0, r5
6000248e:	ldr	r3, [r3, #4]
60002490:	blx	r3
60002492:	b.n	600023a0 <CrashReportClass::printTo(Print&) const+0x608>
60002494:	.word	0x200011d8
60002498:	.word	0x200014a0
6000249c:	.word	0x200015e8
600024a0:	.word	0x20001390
600024a4:	.word	0x200015c0
600024a8:	.word	0x2027ff00
600024ac:	.word	0x200012a8
600024b0:	.word	0x20015d60
600024b4:	.word	0x200014f8
600024b8:	.word	0x200014d4
600024bc:	.word	0x20001550
600024c0:	.word	0x200012cc
600024c4:	.word	0x200012ec
600024c8:	.word	0x2000132c
600024cc:	.word	0x20001228
600024d0:	.word	0x200013e4
600024d4:	.word	0x200013b4
600024d8:	.word	0x20001204
600024dc:	.word	0x2000151c
600024e0:	.word	0x2000146c
600024e4:	.word	0x2000142c
600024e8:	.word	0x20001254
600024ec:	.word	0x20001594
600024f0:	.word	0x2000157c
600024f4:	.word	0x2000134c

600024f8 <CrashReportClass::clear()>:
	info->len = 0;
600024f8:	ldr	r2, [pc, #60]	; (60002538 <CrashReportClass::clear()+0x40>)
600024fa:	movs	r3, #0
	info->ipsr  = 0;
600024fc:	strd	r3, r3, [r2, #128]	; 0x80
	info->hfsr  = 0;
60002500:	strd	r3, r3, [r2, #136]	; 0x88
	info->bfar  = 0;
60002504:	strd	r3, r3, [r2, #144]	; 0x90
	info->xpsr  = 0;
60002508:	strd	r3, r3, [r2, #152]	; 0x98
	info->crc = 0;
6000250c:	str.w	r3, [r2, #168]	; 0xa8
	asm("dsb");
60002510:	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
60002514:	mov.w	r2, #3758153728	; 0xe000e000
60002518:	ldr	r0, [pc, #32]	; (6000253c <CrashReportClass::clear()+0x44>)
6000251a:	ldr	r1, [pc, #36]	; (60002540 <CrashReportClass::clear()+0x48>)
6000251c:	str.w	r0, [r2, #3952]	; 0xf70
60002520:	str.w	r1, [r2, #3952]	; 0xf70
	asm("dsb");
60002524:	dsb	sy
	asm("isb");
60002528:	isb	sy
	SRC_SRSR = SRC_SRSR; // zeros all write-1-to-clear bits
6000252c:	ldr	r2, [pc, #20]	; (60002544 <CrashReportClass::clear()+0x4c>)
6000252e:	ldr	r1, [r2, #8]
60002530:	str	r1, [r2, #8]
	SRC_GPR5 = 0;
60002532:	str	r3, [r2, #48]	; 0x30
}
60002534:	bx	lr
60002536:	nop
60002538:	.word	0x2027ff00
6000253c:	.word	0x2027ff80
60002540:	.word	0x2027ffa0
60002544:	.word	0x400f8000

60002548 <CrashReportClass::operator bool()>:
	if (info->len != sizeof(*info) / 4) return 0;
60002548:	ldr	r3, [pc, #68]	; (60002590 <CrashReportClass::operator bool()+0x48>)
6000254a:	ldr.w	r3, [r3, #128]	; 0x80
6000254e:	cmp	r3, #11
60002550:	bne.n	6000258c <CrashReportClass::operator bool()+0x44>
	crc = 0xFFFFFFFF;
60002552:	mov.w	r2, #4294967295
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
60002556:	ldr	r0, [pc, #60]	; (60002594 <CrashReportClass::operator bool()+0x4c>)
{
60002558:	push	{r4, r5}
	data = (uint32_t *)info;
6000255a:	ldr	r5, [pc, #60]	; (60002598 <CrashReportClass::operator bool()+0x50>)
	while (data < end) {
6000255c:	ldr	r4, [pc, #60]	; (6000259c <CrashReportClass::operator bool()+0x54>)
		crc ^= *data++;
6000255e:	ldr	r3, [r5, #0]
60002560:	movs	r1, #32
60002562:	adds	r5, #4
60002564:	eors	r2, r3
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
60002566:	and.w	r3, r2, #1
6000256a:	subs	r1, #1
6000256c:	mul.w	r3, r0, r3
60002570:	eor.w	r2, r3, r2, lsr #1
60002574:	bne.n	60002566 <CrashReportClass::operator bool()+0x1e>
	while (data < end) {
60002576:	cmp	r5, r4
60002578:	bne.n	6000255e <CrashReportClass::operator bool()+0x16>
	if (crc != info->crc) return 0;
6000257a:	ldr	r3, [pc, #20]	; (60002590 <CrashReportClass::operator bool()+0x48>)
6000257c:	ldr.w	r0, [r3, #168]	; 0xa8
60002580:	subs	r0, r0, r2
60002582:	clz	r0, r0
}
60002586:	pop	{r4, r5}
	if (crc != info->crc) return 0;
60002588:	lsrs	r0, r0, #5
}
6000258a:	bx	lr
	return false;
6000258c:	movs	r0, #0
}
6000258e:	bx	lr
60002590:	.word	0x2027ff00
60002594:	.word	0xedb88320
60002598:	.word	0x2027ff80
6000259c:	.word	0x2027ffa8

600025a0 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)>:
	unsigned int i;
	unsigned int maxnum = MAX_AUDIO_MEMORY / AUDIO_BLOCK_SAMPLES / 2;

	//Serial.println("AudioStream initialize_memory");
	//delay(10);
	if (num > maxnum) num = maxnum;
600025a0:	cmp.w	r1, #896	; 0x380
{
600025a4:	push	{r3, r4, r5, r6, r7, lr}
600025a6:	mov	r6, r1
600025a8:	mov	r7, r1
600025aa:	it	cs
600025ac:	movcs.w	r6, #896	; 0x380
600025b0:	mov	r5, r0
	__disable_irq();
600025b2:	cpsid	i
	memory_pool = data;
600025b4:	ldr	r3, [pc, #140]	; (60002644 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xa4>)
	memory_pool_first_mask = 0;
600025b6:	movs	r4, #0
	for (i=0; i < NUM_MASKS; i++) {
		memory_pool_available_mask[i] = 0;
600025b8:	movs	r2, #112	; 0x70
	memory_pool = data;
600025ba:	str	r0, [r3, #0]
		memory_pool_available_mask[i] = 0;
600025bc:	mov	r1, r4
	memory_pool_first_mask = 0;
600025be:	ldr	r3, [pc, #136]	; (60002648 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xa8>)
		memory_pool_available_mask[i] = 0;
600025c0:	ldr	r0, [pc, #136]	; (6000264c <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xac>)
	memory_pool_first_mask = 0;
600025c2:	strh	r4, [r3, #0]
		memory_pool_available_mask[i] = 0;
600025c4:	bl	600026f8 <__memset_veneer>
	}
	for (i=0; i < num; i++) {
600025c8:	cbz	r7, 600025fe <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x5e>
600025ca:	mov	r1, r4
600025cc:	ldr	r0, [pc, #124]	; (6000264c <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xac>)
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
600025ce:	mov.w	ip, #1
600025d2:	lsrs	r2, r1, #5
600025d4:	and.w	r3, r1, #31
	for (i=0; i < num; i++) {
600025d8:	adds	r1, #1
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
600025da:	ldr.w	r4, [r0, r2, lsl #2]
600025de:	lsl.w	r3, ip, r3
	for (i=0; i < num; i++) {
600025e2:	cmp	r6, r1
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
600025e4:	orr.w	r3, r3, r4
600025e8:	str.w	r3, [r0, r2, lsl #2]
	for (i=0; i < num; i++) {
600025ec:	bhi.n	600025d2 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x32>
600025ee:	mov	r0, r5
600025f0:	movs	r3, #0
	}
	for (i=0; i < num; i++) {
		data[i].memory_pool_index = i;
600025f2:	strh	r3, [r0, #2]
	for (i=0; i < num; i++) {
600025f4:	adds	r3, #1
600025f6:	add.w	r0, r0, #260	; 0x104
600025fa:	cmp	r6, r3
600025fc:	bhi.n	600025f2 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x52>
	}
	if (update_scheduled == false) {
600025fe:	ldr	r4, [pc, #80]	; (60002650 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xb0>)
60002600:	ldrb	r5, [r4, #0]
60002602:	cbz	r5, 60002608 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x68>
			float usec = 1e6 * AUDIO_BLOCK_SAMPLES / AUDIO_SAMPLE_RATE_EXACT;
			timer->begin(update_all, usec);
			update_setup();
		}
	}
	__enable_irq();
60002604:	cpsie	i
}
60002606:	pop	{r3, r4, r5, r6, r7, pc}
		IntervalTimer *timer = new IntervalTimer();
60002608:	movs	r0, #8
6000260a:	bl	60002730 <___Znwj_veneer>
// some of these 4 possible instances may be in use by libraries.
class IntervalTimer {
private:
	static const uint32_t MAX_PERIOD = UINT32_MAX / (24000000 / 1000000);
public:
	constexpr IntervalTimer() {
6000260e:	movs	r2, #128	; 0x80
	// or false if all hardware timers are already in use.
	bool begin(void (*funct)(), float microseconds) {
		if (microseconds <= 0 || microseconds > MAX_PERIOD) return false;
		uint32_t cycles = (float)(24000000 / 1000000) * microseconds - 0.5f;
		if (cycles < 17) return false;
		return beginCycles(funct, cycles);
60002610:	ldr	r1, [pc, #64]	; (60002654 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xb4>)
	constexpr IntervalTimer() {
60002612:	strb	r2, [r0, #4]
60002614:	str	r5, [r0, #0]
		return beginCycles(funct, cycles);
60002616:	ldr	r2, [pc, #64]	; (60002658 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xb8>)
60002618:	bl	60002720 <___ZN13IntervalTimer11beginCyclesEPFvvEm_veneer>
// their constructors.
bool AudioStream::update_scheduled = false;

bool AudioStream::update_setup(void)
{
	if (update_scheduled) return false;
6000261c:	ldrb	r3, [r4, #0]
6000261e:	cmp	r3, #0
60002620:	bne.n	60002604 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x64>
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
60002622:	ldr	r3, [pc, #56]	; (6000265c <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xbc>)
60002624:	ldr	r2, [pc, #56]	; (60002660 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xc0>)
60002626:	str.w	r2, [r3, #344]	; 0x158
	attachInterruptVector(IRQ_SOFTWARE, software_isr);
	NVIC_SET_PRIORITY(IRQ_SOFTWARE, 208); // 255 = lowest priority
6000262a:	ldr	r1, [pc, #56]	; (60002664 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xc4>)
6000262c:	movs	r0, #208	; 0xd0
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
6000262e:	mov.w	r3, #3758153728	; 0xe000e000
60002632:	movs	r2, #64	; 0x40
	NVIC_SET_PRIORITY(IRQ_SOFTWARE, 208); // 255 = lowest priority
60002634:	strb.w	r0, [r1, #70]	; 0x46
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
60002638:	str.w	r2, [r3, #264]	; 0x108
	update_scheduled = true;
6000263c:	movs	r3, #1
6000263e:	strb	r3, [r4, #0]
	__enable_irq();
60002640:	cpsie	i
}
60002642:	pop	{r3, r4, r5, r6, r7, pc}
60002644:	.word	0x20007724
60002648:	.word	0x20015cf8
6000264c:	.word	0x2000772c
60002650:	.word	0x20015d14
60002654:	.word	0x0000dff1
60002658:	.word	0x0001101b
6000265c:	.word	0x20002400
60002660:	.word	0x0000dffd
60002664:	.word	0xe000e400

60002668 <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60002668:	ldr	r3, [pc, #64]	; (600026ac <analog_init+0x44>)
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
6000266a:	movs	r0, #160	; 0xa0
	ADC1_CFG = mode | ADC_CFG_ADHSC;
6000266c:	ldr	r2, [pc, #64]	; (600026b0 <analog_init+0x48>)
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
6000266e:	ldr	r1, [r3, #108]	; 0x6c
60002670:	orr.w	r1, r1, #196608	; 0x30000
{
60002674:	push	{r4}
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60002676:	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60002678:	movw	r4, #1591	; 0x637
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
6000267c:	ldr	r1, [r3, #108]	; 0x6c
6000267e:	orr.w	r1, r1, #768	; 0x300
60002682:	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60002684:	str	r4, [r2, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60002686:	str	r0, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) {
60002688:	ldr	r3, [r2, #72]	; 0x48
6000268a:	lsls	r3, r3, #24
6000268c:	bmi.n	60002688 <analog_init+0x20>
		//yield();
	}
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
6000268e:	ldr	r2, [pc, #36]	; (600026b4 <analog_init+0x4c>)
60002690:	movw	r1, #1591	; 0x637
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60002694:	movs	r3, #160	; 0xa0
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60002696:	str	r1, [r2, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60002698:	str	r3, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) {
6000269a:	ldr	r3, [r2, #72]	; 0x48
6000269c:	ands.w	r3, r3, #128	; 0x80
600026a0:	bne.n	6000269a <analog_init+0x32>
		//yield();
	}
	calibrating = 0;
600026a2:	ldr	r2, [pc, #20]	; (600026b8 <analog_init+0x50>)
600026a4:	strb	r3, [r2, #0]
}
600026a6:	ldr.w	r4, [sp], #4
600026aa:	bx	lr
600026ac:	.word	0x400fc000
600026b0:	.word	0x400c4000
600026b4:	.word	0x400c8000
600026b8:	.word	0x20015d1c

600026bc <_init>:
600026bc:	push	{r3, r4, r5, r6, r7, lr}
600026be:	nop
600026c0:	pop	{r3, r4, r5, r6, r7}
600026c2:	pop	{r3}
600026c4:	mov	lr, r3
600026c6:	bx	lr

600026c8 <___ZN5Print5printEl_veneer>:
600026c8:	ldr.w	pc, [pc]	; 600026cc <___ZN5Print5printEl_veneer+0x4>
600026cc:	.word	0x0000eba9

600026d0 <___ZN5Print11printNumberEmhh_veneer>:
600026d0:	ldr.w	pc, [pc]	; 600026d4 <___ZN5Print11printNumberEmhh_veneer+0x4>
600026d4:	.word	0x0000ecbd

600026d8 <___ZN5Print10printFloatEdh_veneer>:
600026d8:	ldr.w	pc, [pc]	; 600026dc <___ZN5Print10printFloatEdh_veneer+0x4>
600026dc:	.word	0x0000ed69

600026e0 <__main_veneer>:
600026e0:	ldr.w	pc, [pc]	; 600026e4 <__main_veneer+0x4>
600026e4:	.word	0x0000dfe1

600026e8 <__pwm_init_veneer>:
600026e8:	ldr.w	pc, [pc]	; 600026ec <__pwm_init_veneer+0x4>
600026ec:	.word	0x0000d1ed

600026f0 <__usb_init_serialnumber_veneer>:
600026f0:	ldr.w	pc, [pc]	; 600026f4 <__usb_init_serialnumber_veneer+0x4>
600026f4:	.word	0x0000d9ed

600026f8 <__memset_veneer>:
600026f8:	ldr.w	pc, [pc]	; 600026fc <__memset_veneer+0x4>
600026fc:	.word	0x00010105

60002700 <___ZN5Print7printlnEv_veneer>:
60002700:	ldr.w	pc, [pc]	; 60002704 <___ZN5Print7printlnEv_veneer+0x4>
60002704:	.word	0x0000ec75

60002708 <__sm_set_pool_veneer>:
60002708:	ldr.w	pc, [pc]	; 6000270c <__sm_set_pool_veneer+0x4>
6000270c:	.word	0x0000d005

60002710 <__delay_veneer>:
60002710:	ldr.w	pc, [pc]	; 60002714 <__delay_veneer+0x4>
60002714:	.word	0x0000cd09

60002718 <__set_arm_clock_veneer>:
60002718:	ldr.w	pc, [pc]	; 6000271c <__set_arm_clock_veneer+0x4>
6000271c:	.word	0x0000ba61

60002720 <___ZN13IntervalTimer11beginCyclesEPFvvEm_veneer>:
60002720:	ldr.w	pc, [pc]	; 60002724 <___ZN13IntervalTimer11beginCyclesEPFvvEm_veneer+0x4>
60002724:	.word	0x0000f22d

60002728 <____libc_init_array_veneer>:
60002728:	ldr.w	pc, [pc]	; 6000272c <____libc_init_array_veneer+0x4>
6000272c:	.word	0x0001037d

60002730 <___Znwj_veneer>:
60002730:	ldr.w	pc, [pc]	; 60002734 <___Znwj_veneer+0x4>
60002734:	.word	0x0000f169

60002738 <__frame_dummy_init_array_entry>:
60002738:	E...........A...
60002748:	q...............
60002758:	................
60002768:	1...I...a...y...
60002778:	................
60002788:	........!...9...
60002798:	Q...i...........
600027a8:	..... ..e(..

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <register_tm_clones>:
{
	__disable_irq();
	sof_usage |= (1 << interface);
	uint32_t intr = USB1_USBINTR;
	if (!(intr & USB_USBINTR_SRE)) {
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
      20:	ldr	r0, [pc, #20]	; (38 <_teensy_model_identifier+0x13>)
      22:	ldr	r3, [pc, #24]	; (3c <_teensy_model_identifier+0x17>)
		USB1_USBINTR = intr | USB_USBINTR_SRE;
      24:	subs	r3, r3, r0
      26:	lsrs	r1, r3, #31
	}
	__enable_irq();
      28:	add.w	r1, r1, r3, asr #2
}
      2c:	asrs	r1, r1, #1
      2e:	beq.n	36 <_teensy_model_identifier+0x11>
      30:	ldr	r3, [pc, #12]	; (40 <_teensy_model_identifier+0x1b>)
      32:	cbz	r3, 36 <_teensy_model_identifier+0x11>
      34:	bx	r3
      36:	bx	lr
  uint16_t index = m_upcaseSize & SECTOR_MASK;
  m_secBuf[index] = b;
  m_upcaseChecksum = exFatChecksum(m_upcaseChecksum, b);
  m_upcaseSize++;
  if (index == SECTOR_MASK) {
    return m_dev->writeSector(m_upcaseSector++, m_secBuf);
      38:	.word	0x200026c0
  }
  return true;
}
      3c:	.word	0x200026c0
	// start the SRTC
	SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
	while (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)); // wait
	// start the RTC and sync it to the SRTC
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
}
      40:	.word	0x00000000

00000044 <frame_dummy>:
      44:	push	{r3, lr}
      46:	ldr	r3, [pc, #20]	; (5c <frame_dummy+0x18>)
  uint32_t n = 0;
  int8_t status;
  do {
    status = fatGet(cluster, &cluster);
    if (status < 0) return 0;
    n++;
      48:	cbz	r3, 52 <frame_dummy+0xe>
  } while (status);
  return n;
}
      4a:	ldr	r1, [pc, #20]	; (60 <frame_dummy+0x1c>)
  m_vwd = dir;
  return true;

fail:
  return false;
}
      4c:	ldr	r0, [pc, #20]	; (64 <frame_dummy+0x20>)
      4e:	nop.w
		}
		NVIC_SET_PRIORITY(IRQ_PIT, top_priority);
		channel = 0;
	}
#endif
}
      52:	ldmia.w	sp!, {r3, lr}
      56:	b.w	20 <register_tm_clones>
	if (pin < NUM_DIGITAL_PINS) {
		cdPin_ = pin;
		pinMode(cdPin_, INPUT_PULLUP);
	} else {
		cdPin_ = 0xff;
		return false;
      5a:	nop
  m_vwd = dir;
  return true;

fail:
  return false;
}
      5c:	.word	0x00000000
   *
   * \return true for success or false for failure.
   */
  bool ls(print_t* pr, uint8_t flags) {
    return m_fFile   ? m_fFile->ls(pr, flags)
           : m_xFile ? m_xFile->ls(pr, flags)
      60:	.word	0x20015864
      64:	.word	0x6001b800

00000068 <Print::availableForWrite()>:
	virtual int availableForWrite(void)		{ return 0; }
      68:	movs	r0, #0
      6a:	bx	lr

0000006c <Print::flush()>:
	virtual void flush()				{ }
      6c:	bx	lr
		while (!(ADC2_HS & ADC_HS_COCO0)) {
      6e:	nop

00000070 <SDFile::position()>:
    return m_fFile   ? m_fFile->curPosition()
      70:	ldr	r3, [r0, #80]	; 0x50
      72:	cbz	r3, 7a <SDFile::position()+0xa>
      74:	ldr	r0, [r3, #20]
      76:	movs	r1, #0
      78:	bx	lr
           : m_xFile ? m_xFile->curPosition()
      7a:	ldr	r3, [r0, #84]	; 0x54
      7c:	cbz	r3, 84 <SDFile::position()+0x14>
   */
  bool contiguousRange(uint32_t* bgnSector, uint32_t* endSector);
  /** \return The current cluster number for a file or directory. */
  uint32_t curCluster() const { return m_curCluster; }
  /** \return The current position for a file or directory. */
  uint64_t curPosition() const { return m_curPosition; }
      7e:	ldrd	r0, r1, [r3]
      82:	bx	lr
      84:	mov	r0, r3
      86:	mov	r1, r3
		if (mode == SeekEnd) return sdfatfile.seekEnd(pos);
		return false;
	}
	virtual uint64_t position() {
		return sdfatfile.curPosition();
	}
      88:	bx	lr
}
      8a:	nop

0000008c <SDFile::size()>:
    return m_fFile ? m_fFile->fileSize() : m_xFile ? m_xFile->fileSize() : 0;
      8c:	ldr	r3, [r0, #80]	; 0x50
      8e:	cbz	r3, 96 <SDFile::size()+0xa>
      90:	ldr	r0, [r3, #28]
      92:	movs	r1, #0
      94:	bx	lr
      96:	ldr	r3, [r0, #84]	; 0x54
      98:	cbz	r3, a0 <SDFile::size()+0x14>
   * If no data is read, fgets() returns zero for EOF or -1 if an error
   * occurred.
   */
  int fgets(char* str, int num, char* delim = nullptr);
  /** \return The total number of bytes in a file. */
  uint64_t fileSize() const { return m_validLength; }
      9a:	ldrd	r0, r1, [r3, #16]
      9e:	bx	lr
      a0:	mov	r0, r3
      a2:	mov	r1, r3
	virtual uint64_t size() {
		return sdfatfile.size();
	}
      a4:	bx	lr
	dma.enable();

	I2S1_RCSR = I2S_RCSR_RE | I2S_RCSR_BCE | I2S_RCSR_FRDE | I2S_RCSR_FR;
	dma.attachInterrupt(isr);	
#endif	
}
      a6:	nop

000000a8 <SDFile::isOpen()>:
  bool isOpen() const { return m_fFile || m_xFile; }
      a8:	ldr	r3, [r0, #80]	; 0x50
      aa:	cbz	r3, b0 <SDFile::isOpen()+0x8>
      ac:	movs	r0, #1
			sdfatfile.close();
		}
	}
	virtual bool isOpen() {
		return sdfatfile.isOpen();
	}
      ae:	bx	lr
      b0:	ldr	r0, [r0, #84]	; 0x54
      b2:	subs	r0, #0
      b4:	it	ne
      b6:	movne	r0, #1
      b8:	bx	lr
      ba:	nop

000000bc <SDFile::isDirectory()>:
    return m_fFile ? m_fFile->isDir() : m_xFile ? m_xFile->isDir() : false;
      bc:	ldr	r3, [r0, #80]	; 0x50
      be:	cbz	r3, ce <SDFile::isDirectory()+0x12>
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  /** \return True if the file is contiguous. */
  bool isContiguous() const { return m_flags & FILE_FLAG_CONTIGUOUS; }
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  /** \return True if this is a directory. */
  bool isDir() const { return m_attributes & FILE_ATTR_DIR; }
      c0:	ldrb	r3, [r3, #0]
      c2:	tst.w	r3, #208	; 0xd0
      c6:	ite	ne
      c8:	movne	r0, #1
      ca:	moveq	r0, #0
      cc:	bx	lr
      ce:	ldr	r0, [r0, #84]	; 0x54
      d0:	cbz	r0, e0 <SDFile::isDirectory()+0x24>
      d2:	ldrb.w	r3, [r0, #49]	; 0x31
      d6:	tst.w	r3, #80	; 0x50
      da:	ite	ne
      dc:	movne	r0, #1
      de:	moveq	r0, #0
		}
		return filename;
	}
	virtual boolean isDirectory(void) {
		return sdfatfile.isDirectory();
	}
      e0:	bx	lr
//------------------------------------------------------------------------------
bool FatFormatter::initFatDir(uint8_t fatType, uint32_t sectorCount) {
  size_t n;
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
  writeMsg("Writing FAT ");
  for (uint32_t i = 1; i < sectorCount; i++) {
      e2:	nop

000000e4 <getTime()>:
      e4:	push	{r3, lr}
      e6:	bl	cfe0 <rtc_get>
      ea:	movs	r1, #0
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() const { return m_sectorMask; }
  bool syncDevice() { return m_blockDev->syncDevice(); }
      ec:	pop	{r3, pc}
      ee:	nop

000000f0 <I2S_32::update()>:
      f0:	push	{r3, r4, r5, r6, r7, lr}
      f2:	mov	r5, r0
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
	enableTimerInterrupt(irq);
	while (waiting) {
      f4:	bl	e060 <AudioStream::allocate()>
      f8:	mov	r4, r0
      fa:	cbz	r0, 13c <I2S_32::update()+0x4c>
      fc:	bl	e060 <AudioStream::allocate()>
    // Select MCLK
    IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
      & ~(IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL_MASK))
      | (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));

  }
     100:	mov	r6, r0
     102:	cbz	r0, 140 <I2S_32::update()+0x50>
      new_left = NULL;
    }
  }
    // the DMA filled 2 blocks, so grab them and get the
    // 2 new blocks to the DMA, as quickly as possible
  __disable_irq();
     104:	cpsid	i
    out_left = block_left;
     106:	ldr	r3, [pc, #68]	; (14c <I2S_32::update()+0x5c>)
    block_left = new_left;
    out_right = block_right;
    block_right = new_right;
    block_offset = 0;
     108:	movs	r2, #0
    out_left = block_left;
     10a:	ldr	r7, [r3, #0]
    block_left = new_left;
     10c:	str	r4, [r3, #0]
    out_right = block_right;
     10e:	ldr	r3, [pc, #64]	; (150 <I2S_32::update()+0x60>)
     110:	ldr	r4, [r3, #0]
    block_right = new_right;
     112:	str	r6, [r3, #0]
    block_offset = 0;
     114:	ldr	r3, [pc, #60]	; (154 <I2S_32::update()+0x64>)
     116:	strh	r2, [r3, #0]
    __enable_irq();
     118:	cpsie	i
    
    // then transmit the DMA's former blocks
    transmit(out_left, 0);
     11a:	mov	r1, r7
     11c:	mov	r0, r5
     11e:	bl	e15c <AudioStream::transmit(audio_block_struct*, unsigned char)>
    release(out_left);
     122:	mov	r0, r7
     124:	bl	e10c <AudioStream::release(audio_block_struct*)>
    transmit(out_right, 1);
     128:	mov	r0, r5
     12a:	mov	r1, r4
     12c:	movs	r2, #1
     12e:	bl	e15c <AudioStream::transmit(audio_block_struct*, unsigned char)>
    release(out_right);
     132:	mov	r0, r4
}
     134:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    release(out_right);
     138:	b.w	e10c <AudioStream::release(audio_block_struct*)>
  audio_block_t *new_left=NULL, *new_right=NULL, *out_left=NULL, *out_right=NULL;
     13c:	mov	r6, r0
     13e:	b.n	104 <I2S_32::update()+0x14>
      release(new_left);
     140:	mov	r0, r4
      new_left = NULL;
     142:	mov	r4, r6
      release(new_left);
     144:	bl	e10c <AudioStream::release(audio_block_struct*)>
      new_left = NULL;
     148:	b.n	104 <I2S_32::update()+0x14>
     14a:	nop
     14c:	.word	0x200078cc
     150:	.word	0x200078d0
     154:	.word	0x20015cfe

00000158 <DMAChannel::~DMAChannel()>:
	}
	DMAChannel & operator = (const DMASetting &rhs) {
		copy_tcd(TCD, rhs.TCD);
		return *this;
	}
	~DMAChannel() {
     158:	push	{r4, lr}
     15a:	mov	r4, r0
		release();
     15c:	bl	ddc4 <DMAChannel::release()>
	}
     160:	mov	r0, r4
     162:	pop	{r4, pc}

00000164 <SDFile::close()>:
	virtual void close() {
     164:	push	{r4, lr}
     166:	mov	r4, r0
		if (filename) {
     168:	ldr	r0, [r0, #88]	; 0x58
     16a:	cbz	r0, 174 <SDFile::close()+0x10>
			free(filename);
     16c:	bl	f320 <free>
			filename = nullptr;
     170:	movs	r3, #0
     172:	str	r3, [r4, #88]	; 0x58
  bool isOpen() const { return m_fFile || m_xFile; }
     174:	ldr	r3, [r4, #80]	; 0x50
     176:	cbz	r3, 184 <SDFile::close()+0x20>
			sdfatfile.close();
     178:	add.w	r0, r4, #24
	}
     17c:	ldmia.w	sp!, {r4, lr}
			sdfatfile.close();
     180:	b.w	7b04 <FsBaseFile::close()>
     184:	ldr	r3, [r4, #84]	; 0x54
     186:	cmp	r3, #0
     188:	bne.n	178 <SDFile::close()+0x14>
	}
     18a:	pop	{r4, pc}

0000018c <SDFile::rewindDirectory()>:
	virtual File openNextFile(uint8_t mode=0) {
		SDFAT_FILE file = sdfatfile.openNextFile();
		if (file) return File(new SDFile(file));
		return File();
	}
	virtual void rewindDirectory(void) {
     18c:	push	{r4, lr}
     18e:	mov	r4, r0
    return m_fFile ? m_fFile->isDir() : m_xFile ? m_xFile->isDir() : false;
     190:	ldr	r0, [r0, #80]	; 0x50
     192:	cbz	r0, 1a8 <SDFile::rewindDirectory()+0x1c>
   * If an error occurs or end of file is reached return -1.
   */
  int read() { return BaseFile::read(); }
  /** Rewind a file if it is a directory */
  void rewindDirectory() {
    if (BaseFile::isDir()) {
     194:	ldrb	r3, [r0, #0]
     196:	tst.w	r3, #208	; 0xd0
     19a:	beq.n	1a6 <SDFile::rewindDirectory()+0x1a>
   *
   * \return true for success or false for failure.
   */
  bool rename(FatFile* dirFile, const char* newPath);
  /** Set the file's current position to zero. */
  void rewind() { seekSet(0); }
     19c:	movs	r1, #0
     19e:	bl	624c <FatFile::seekSet(unsigned long)>
                                     : false;
  }
  /** Set the file's current position to zero. */
  void rewind() {
    if (m_fFile) m_fFile->rewind();
    if (m_xFile) m_xFile->rewind();
     1a2:	ldr	r0, [r4, #84]	; 0x54
     1a4:	cbnz	r0, 1b8 <SDFile::rewindDirectory()+0x2c>
		sdfatfile.rewindDirectory();
	}
     1a6:	pop	{r4, pc}
    return m_fFile ? m_fFile->isDir() : m_xFile ? m_xFile->isDir() : false;
     1a8:	ldr	r0, [r4, #84]	; 0x54
     1aa:	cmp	r0, #0
     1ac:	beq.n	1a6 <SDFile::rewindDirectory()+0x1a>
     1ae:	ldrb.w	r3, [r0, #49]	; 0x31
     1b2:	tst.w	r3, #80	; 0x50
     1b6:	beq.n	1a6 <SDFile::rewindDirectory()+0x1a>
   *
   * \return true for success or false for failure.
   */
  bool rename(ExFatFile* dirFile, const char* newPath);
  /** Set the file's current position to zero. */
  void rewind() { seekSet(0); }
     1b8:	movs	r2, #0
     1ba:	movs	r3, #0
     1bc:	ldmia.w	sp!, {r4, lr}
     1c0:	b.w	37c0 <ExFatFile::seekSet(unsigned long long)>

000001c4 <SDFile::openNextFile(unsigned char)>:
	virtual File openNextFile(uint8_t mode=0) {
     1c4:	push	{r4, r5, r6, r7, lr}
  FsBaseFile() = default;
     1c6:	movs	r7, #0
     1c8:	sub	sp, #84	; 0x54
     1ca:	movs	r6, #0
	constexpr Print() : write_error(0) {}
     1cc:	movs	r2, #0
#include "Print.h"

class Stream : public Print
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     1ce:	mov.w	r4, #1000	; 0x3e8
   * \param[in] oflag open flags.
   * \return a FatStream object.
   */
  FsFile openNextFile(oflag_t oflag = O_RDONLY) {
    FsFile tmpFile;
    tmpFile.openNext(this, oflag);
     1d2:	adds	r1, #24
     1d4:	mov	r5, r0
     1d6:	add	r0, sp, #16
     1d8:	strb.w	r2, [sp, #4]
     1dc:	str	r4, [sp, #8]
     1de:	strb.w	r2, [sp, #12]
  FsBaseFile() = default;
     1e2:	strd	r6, r7, [sp, #72]	; 0x48
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     1e6:	ldr	r7, [pc, #124]	; (264 <SDFile::openNextFile(unsigned char)+0xa0>)
     1e8:	str	r7, [sp, #0]
    tmpFile.openNext(this, oflag);
     1ea:	bl	7bd4 <FsBaseFile::openNext(FsBaseFile*, int)>
  bool isOpen() const { return m_fFile || m_xFile; }
     1ee:	ldr	r3, [sp, #72]	; 0x48
     1f0:	cbz	r3, 250 <SDFile::openNextFile(unsigned char)+0x8c>
		if (file) return File(new SDFile(file));
     1f2:	movs	r0, #92	; 0x5c
// FileImpl instances are automatically deleted when the last referencing
// File is closed or goes out of scope.  The refcount variable is meant to
// be maintained by File class instances, never access by FileImpl functions.
// The FileImpl functions are meant to be called only by use of File instances.
//
class FileImpl {
     1f4:	movs	r6, #0
     1f6:	bl	f168 <operator new(unsigned int)>
class Print
     1fa:	ldrb.w	r3, [sp, #4]
     1fe:	mov	r4, r0
     200:	str	r6, [r0, #4]
     202:	strb	r3, [r0, #12]
class StreamFile : public stream_t, public BaseFile {
     204:	add	r1, sp, #16
class Stream : public Print
     206:	ldr	r3, [sp, #8]
     208:	adds	r0, #24
     20a:	str.w	r3, [r0, #-8]
     20e:	ldrb.w	r3, [sp, #12]
     212:	strb.w	r3, [r0, #-4]
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
     216:	ldr	r3, [pc, #80]	; (268 <SDFile::openNextFile(unsigned char)+0xa4>)
     218:	str.w	r3, [r0, #-24]
     21c:	ldr	r3, [pc, #76]	; (26c <SDFile::openNextFile(unsigned char)+0xa8>)
     21e:	str.w	r3, [r0, #-16]
     222:	bl	7a7c <FsBaseFile::FsBaseFile(FsBaseFile const&)>
	// Explicit FileImpl constructor.  Used by libraries which provide
	// access to files stored on media.  Normally this is used within
	// functions derived from FS::open() and FileImpl::openNextFile().
	// Not normally called used from ordinary programs or libraries
	// which only access files.
	File(FileImpl *file) {
     226:	ldr	r3, [pc, #72]	; (270 <SDFile::openNextFile(unsigned char)+0xac>)
	constexpr Stream() : _timeout(1000), read_error(0) {}
     228:	mov.w	r2, #1000	; 0x3e8
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     22c:	str	r7, [r4, #8]
     22e:	str	r3, [r5, #0]
		f = file;
		if (f) f->refcount++;
     230:	ldr	r3, [r4, #4]
     232:	str	r6, [r4, #88]	; 0x58
     234:	adds	r3, #1
	constexpr Print() : write_error(0) {}
     236:	strb	r6, [r5, #4]
     238:	strb	r6, [r5, #12]
     23a:	str	r2, [r5, #8]
		f = file;
     23c:	str	r4, [r5, #16]
		if (f) f->refcount++;
     23e:	str	r3, [r4, #4]
     240:	ldr	r3, [pc, #48]	; (274 <SDFile::openNextFile(unsigned char)+0xb0>)
  ~FsBaseFile() { close(); }
     242:	add	r0, sp, #16
     244:	str	r3, [sp, #0]
     246:	bl	7b04 <FsBaseFile::close()>
	}
     24a:	mov	r0, r5
     24c:	add	sp, #84	; 0x54
     24e:	pop	{r4, r5, r6, r7, pc}
  bool isOpen() const { return m_fFile || m_xFile; }
     250:	ldr	r3, [sp, #76]	; 0x4c
     252:	cmp	r3, #0
     254:	bne.n	1f2 <SDFile::openNextFile(unsigned char)+0x2e>
	constexpr File() : f(nullptr) { }
     256:	ldr	r2, [pc, #24]	; (270 <SDFile::openNextFile(unsigned char)+0xac>)
     258:	strb	r3, [r5, #4]
     25a:	str	r4, [r5, #8]
     25c:	strb	r3, [r5, #12]
     25e:	str	r2, [r5, #0]
     260:	str	r3, [r5, #16]
     262:	b.n	240 <SDFile::openNextFile(unsigned char)+0x7c>
     264:	.word	0x200009a8
     268:	.word	0x200009d8
     26c:	.word	0x20000a34
     270:	.word	0x2000097c
     274:	.word	0x20000898

00000278 <SDFile::name()>:
	virtual const char * name() {
     278:	push	{r4, lr}
     27a:	mov	r4, r0
		if (!filename) {
     27c:	ldr	r0, [r0, #88]	; 0x58
     27e:	cbz	r0, 282 <SDFile::name()+0xa>
	}
     280:	pop	{r4, pc}
			filename = (char *)malloc(MAX_FILENAME_LEN);
     282:	mov.w	r0, #256	; 0x100
     286:	bl	f310 <malloc>
     28a:	str	r0, [r4, #88]	; 0x58
			if (filename) {
     28c:	cbz	r0, 2bc <SDFile::name()+0x44>
    *name = 0;
     28e:	movs	r2, #0
    return m_fFile   ? m_fFile->getName(name, len)
     290:	ldr	r3, [r4, #80]	; 0x50
    *name = 0;
     292:	strb	r2, [r0, #0]
    return m_fFile   ? m_fFile->getName(name, len)
     294:	cbz	r3, 2a6 <SDFile::name()+0x2e>
     296:	mov	r1, r0
     298:	mov.w	r2, #256	; 0x100
     29c:	mov	r0, r3
     29e:	bl	559c <FatFile::getName(char*, unsigned int)>
		return filename;
     2a2:	ldr	r0, [r4, #88]	; 0x58
	}
     2a4:	pop	{r4, pc}
     2a6:	ldr	r3, [r4, #84]	; 0x54
           : m_xFile ? m_xFile->getName(name, len)
     2a8:	cmp	r3, #0
     2aa:	beq.n	280 <SDFile::name()+0x8>
    return getName7(name, size);
     2ac:	mov	r1, r0
     2ae:	mov.w	r2, #256	; 0x100
     2b2:	mov	r0, r3
     2b4:	bl	3388 <ExFatFile::getName7(char*, unsigned int)>
		return filename;
     2b8:	ldr	r0, [r4, #88]	; 0x58
	}
     2ba:	pop	{r4, pc}
				filename = &zeroterm;
     2bc:	ldr	r3, [pc, #4]	; (2c4 <SDFile::name()+0x4c>)
     2be:	mov	r0, r3
     2c0:	str	r3, [r4, #88]	; 0x58
	}
     2c2:	pop	{r4, pc}
     2c4:	.word	0x20015d1b

000002c8 <SDFile::truncate(unsigned long long)>:
	virtual bool truncate(uint64_t size=0) {
     2c8:	push	{r3, r4, r5, lr}
    return m_fFile   ? length < (1ULL << 32) && m_fFile->truncate(length)
     2ca:	ldr	r5, [r0, #80]	; 0x50
     2cc:	cbz	r5, 2ea <SDFile::truncate(unsigned long long)+0x22>
     2ce:	cbz	r3, 2d4 <SDFile::truncate(unsigned long long)+0xc>
	}
     2d0:	movs	r0, #0
     2d2:	pop	{r3, r4, r5, pc}
   *
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint32_t length) { return seekSet(length) && truncate(); }
     2d4:	mov	r1, r2
     2d6:	mov	r0, r5
     2d8:	bl	624c <FatFile::seekSet(unsigned long)>
     2dc:	cmp	r0, #0
     2de:	beq.n	2d0 <SDFile::truncate(unsigned long long)+0x8>
     2e0:	mov	r0, r5
     2e2:	ldmia.w	sp!, {r3, r4, r5, lr}
     2e6:	b.w	66ec <FatFile::truncate()>
     2ea:	ldr	r4, [r0, #84]	; 0x54
           : m_xFile ? m_xFile->truncate(length)
     2ec:	cmp	r4, #0
     2ee:	beq.n	2d0 <SDFile::truncate(unsigned long long)+0x8>
   *
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint64_t length) { return seekSet(length) && truncate(); }
     2f0:	mov	r0, r4
     2f2:	bl	37c0 <ExFatFile::seekSet(unsigned long long)>
     2f6:	cmp	r0, #0
     2f8:	beq.n	2d0 <SDFile::truncate(unsigned long long)+0x8>
     2fa:	mov	r0, r4
     2fc:	ldmia.w	sp!, {r3, r4, r5, lr}
     300:	b.w	4b94 <ExFatFile::truncate()>

00000304 <SDFile::setModifyTime(DateTimeFields const&)>:
		if (tm.year < 80 || tm.year > 207) return false;
		return sdfatfile.timestamp(T_CREATE, tm.year + 1900, tm.mon + 1,
			tm.mday, tm.hour, tm.min, tm.sec);
	}
	virtual bool setModifyTime(const DateTimeFields &tm) {
		if (tm.year < 80 || tm.year > 207) return false;
     304:	ldrb	r2, [r1, #6]
     306:	sub.w	r3, r2, #80	; 0x50
     30a:	lsls	r3, r3, #24
     30c:	bmi.n	354 <SDFile::setModifyTime(DateTimeFields const&)+0x50>
		return sdfatfile.timestamp(T_WRITE, tm.year + 1900, tm.mon + 1,
     30e:	addw	r2, r2, #1900	; 0x76c
	virtual bool setModifyTime(const DateTimeFields &tm) {
     312:	push	{r4, r5, r6, r7, lr}
		return sdfatfile.timestamp(T_WRITE, tm.year + 1900, tm.mon + 1,
     314:	ldrb	r3, [r1, #5]
	virtual bool setModifyTime(const DateTimeFields &tm) {
     316:	sub	sp, #20
    return m_fFile   ? m_fFile->timestamp(flags, year, month, day, hour, minute,
     318:	ldr	r4, [r0, #80]	; 0x50
		return sdfatfile.timestamp(T_WRITE, tm.year + 1900, tm.mon + 1,
     31a:	adds	r3, #1
			tm.mday, tm.hour, tm.min, tm.sec);
     31c:	ldrb	r5, [r1, #4]
     31e:	ldrb	r6, [r1, #2]
     320:	ldrb	r7, [r1, #1]
		return sdfatfile.timestamp(T_WRITE, tm.year + 1900, tm.mon + 1,
     322:	uxtb	r3, r3
			tm.mday, tm.hour, tm.min, tm.sec);
     324:	ldrb	r1, [r1, #0]
     326:	cbz	r4, 33c <SDFile::setModifyTime(DateTimeFields const&)+0x38>
     328:	mov	r0, r4
     32a:	str	r6, [sp, #4]
     32c:	str	r5, [sp, #0]
     32e:	strd	r7, r1, [sp, #8]
     332:	movs	r1, #4
     334:	bl	6614 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
	}
     338:	add	sp, #20
     33a:	pop	{r4, r5, r6, r7, pc}
     33c:	ldr	r0, [r0, #84]	; 0x54
           : m_xFile ? m_xFile->timestamp(flags, year, month, day, hour, minute,
     33e:	cmp	r0, #0
     340:	beq.n	338 <SDFile::setModifyTime(DateTimeFields const&)+0x34>
     342:	str	r6, [sp, #4]
     344:	str	r5, [sp, #0]
     346:	strd	r7, r1, [sp, #8]
     34a:	movs	r1, #4
     34c:	bl	4a1c <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
     350:	add	sp, #20
     352:	pop	{r4, r5, r6, r7, pc}
		if (tm.year < 80 || tm.year > 207) return false;
     354:	movs	r0, #0
	}
     356:	bx	lr

00000358 <SDFile::getModifyTime(DateTimeFields&)>:
    return m_fFile   ? m_fFile->getModifyDateTime(pdate, ptime)
     358:	ldr	r3, [r0, #80]	; 0x50
	virtual bool getModifyTime(DateTimeFields &tm) {
     35a:	push	{r4, lr}
     35c:	mov	r4, r1
     35e:	sub	sp, #8
     360:	cbz	r3, 3ae <SDFile::getModifyTime(DateTimeFields&)+0x56>
     362:	add.w	r2, sp, #6
     366:	add	r1, sp, #4
     368:	mov	r0, r3
     36a:	bl	591c <FatFile::getModifyDateTime(unsigned short*, unsigned short*)>
		if (!sdfatfile.getModifyDateTime(&fat_date, &fat_time)) return false;
     36e:	cbz	r0, 3c0 <SDFile::getModifyTime(DateTimeFields&)+0x68>
		if ((fat_date == 0) && (fat_time == 0)) return false;
     370:	ldrh.w	r3, [sp, #4]
     374:	ldrh.w	r2, [sp, #6]
     378:	orrs.w	r1, r3, r2
     37c:	beq.n	3c0 <SDFile::getModifyTime(DateTimeFields&)+0x68>
 * \param[in] fatTime Time in packed dir format.
 *
 * \return Extracted minute [0,59]
 */
static inline uint8_t FS_MINUTE(uint16_t fatTime) {
  return (fatTime >> 5) & 0X3F;
     37e:	ubfx	ip, r2, #5, #6
 * \param[in] fatTime Time in packed dir format.
 *
 * \return Extracted second [0,58]
 */
static inline uint8_t FS_SECOND(uint16_t fatTime) {
  return 2 * (fatTime & 0X1F);
     382:	and.w	r0, r2, #31
static inline uint8_t FS_HOUR(uint16_t fatTime) { return fatTime >> 11; }
     386:	lsrs	r2, r2, #11
  return (fatDate >> 5) & 0XF;
     388:	ubfx	r1, r3, #5, #4
  return 2 * (fatTime & 0X1F);
     38c:	lsls	r0, r0, #1
		tm.min = FS_MINUTE(fat_time);
     38e:	strb.w	ip, [r4, #1]
static inline uint8_t FS_HOUR(uint16_t fatTime) { return fatTime >> 11; }
     392:	strb	r2, [r4, #2]
  return 1980 + (fatDate >> 9);
     394:	lsrs	r2, r3, #9
		tm.mon = FS_MONTH(fat_date) - 1;
     396:	subs	r1, #1
static inline uint8_t FS_DAY(uint16_t fatDate) { return fatDate & 0X1F; }
     398:	and.w	r3, r3, #31
		tm.year = FS_YEAR(fat_date) - 1900;
     39c:	add.w	r2, r2, #1872	; 0x750
		tm.sec = FS_SECOND(fat_time);
     3a0:	strb	r0, [r4, #0]
		return true;
     3a2:	movs	r0, #1
		tm.mon = FS_MONTH(fat_date) - 1;
     3a4:	strb	r1, [r4, #5]
		tm.mday = FS_DAY(fat_date);
     3a6:	strb	r3, [r4, #4]
		tm.year = FS_YEAR(fat_date) - 1900;
     3a8:	strb	r2, [r4, #6]
	}
     3aa:	add	sp, #8
     3ac:	pop	{r4, pc}
     3ae:	ldr	r0, [r0, #84]	; 0x54
           : m_xFile ? m_xFile->getModifyDateTime(pdate, ptime)
     3b0:	cbz	r0, 3c0 <SDFile::getModifyTime(DateTimeFields&)+0x68>
     3b2:	add.w	r2, sp, #6
     3b6:	add	r1, sp, #4
     3b8:	bl	34f8 <ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)>
     3bc:	cmp	r0, #0
     3be:	bne.n	370 <SDFile::getModifyTime(DateTimeFields&)+0x18>
		if (!sdfatfile.getModifyDateTime(&fat_date, &fat_time)) return false;
     3c0:	movs	r0, #0
	}
     3c2:	add	sp, #8
     3c4:	pop	{r4, pc}

			int newPrecision = precision;
			int newDecimalPoint;

			// shift decimal point
			while (newPrecision > 0) {
     3c6:	nop

000003c8 <SDFile::getCreateTime(DateTimeFields&)>:
    return m_fFile   ? m_fFile->getCreateDateTime(pdate, ptime)
     3c8:	ldr	r3, [r0, #80]	; 0x50
	virtual bool getCreateTime(DateTimeFields &tm) {
     3ca:	push	{r4, lr}
     3cc:	mov	r4, r1
     3ce:	sub	sp, #8
     3d0:	cbz	r3, 41e <SDFile::getCreateTime(DateTimeFields&)+0x56>
     3d2:	add.w	r2, sp, #6
     3d6:	add	r1, sp, #4
     3d8:	mov	r0, r3
     3da:	bl	58e0 <FatFile::getCreateDateTime(unsigned short*, unsigned short*)>
		if (!sdfatfile.getCreateDateTime(&fat_date, &fat_time)) return false;
     3de:	cbz	r0, 430 <SDFile::getCreateTime(DateTimeFields&)+0x68>
		if ((fat_date == 0) && (fat_time == 0)) return false;
     3e0:	ldrh.w	r3, [sp, #4]
     3e4:	ldrh.w	r2, [sp, #6]
     3e8:	orrs.w	r1, r3, r2
     3ec:	beq.n	430 <SDFile::getCreateTime(DateTimeFields&)+0x68>
  return (fatTime >> 5) & 0X3F;
     3ee:	ubfx	ip, r2, #5, #6
  return 2 * (fatTime & 0X1F);
     3f2:	and.w	r0, r2, #31
static inline uint8_t FS_HOUR(uint16_t fatTime) { return fatTime >> 11; }
     3f6:	lsrs	r2, r2, #11
  return (fatDate >> 5) & 0XF;
     3f8:	ubfx	r1, r3, #5, #4
  return 2 * (fatTime & 0X1F);
     3fc:	lsls	r0, r0, #1
		tm.min = FS_MINUTE(fat_time);
     3fe:	strb.w	ip, [r4, #1]
static inline uint8_t FS_HOUR(uint16_t fatTime) { return fatTime >> 11; }
     402:	strb	r2, [r4, #2]
  return 1980 + (fatDate >> 9);
     404:	lsrs	r2, r3, #9
		tm.mon = FS_MONTH(fat_date) - 1;
     406:	subs	r1, #1
static inline uint8_t FS_DAY(uint16_t fatDate) { return fatDate & 0X1F; }
     408:	and.w	r3, r3, #31
		tm.year = FS_YEAR(fat_date) - 1900;
     40c:	add.w	r2, r2, #1872	; 0x750
		tm.sec = FS_SECOND(fat_time);
     410:	strb	r0, [r4, #0]
		return true;
     412:	movs	r0, #1
		tm.mon = FS_MONTH(fat_date) - 1;
     414:	strb	r1, [r4, #5]
		tm.mday = FS_DAY(fat_date);
     416:	strb	r3, [r4, #4]
		tm.year = FS_YEAR(fat_date) - 1900;
     418:	strb	r2, [r4, #6]
	}
     41a:	add	sp, #8
     41c:	pop	{r4, pc}
     41e:	ldr	r0, [r0, #84]	; 0x54
           : m_xFile ? m_xFile->getCreateDateTime(pdate, ptime)
     420:	cbz	r0, 430 <SDFile::getCreateTime(DateTimeFields&)+0x68>
     422:	add.w	r2, sp, #6
     426:	add	r1, sp, #4
     428:	bl	34d4 <ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)>
     42c:	cmp	r0, #0
     42e:	bne.n	3e0 <SDFile::getCreateTime(DateTimeFields&)+0x18>
		if (!sdfatfile.getCreateDateTime(&fat_date, &fat_time)) return false;
     430:	movs	r0, #0
	}
     432:	add	sp, #8
     434:	pop	{r4, pc}
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
     436:	nop

00000438 <File::available()>:
	size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
	}
	// Returns the number of bytes which may be read from a file
	int available() {
		return (f) ? f->available() : 0;
     438:	ldr	r0, [r0, #16]
     43a:	cbz	r0, 462 <File::available()+0x2a>
     43c:	ldr	r3, [r0, #0]
     43e:	ldr	r2, [pc, #84]	; (494 <File::available()+0x5c>)
     440:	ldr	r3, [r3, #16]
     442:	cmp	r3, r2
     444:	bne.n	492 <File::available()+0x5a>
    return m_fFile ? m_fFile->available() : m_xFile ? m_xFile->available() : 0;
     446:	ldr	r3, [r0, #80]	; 0x50
     448:	cbz	r3, 464 <File::available()+0x2c>
    return isFile() ? fileSize() - curPosition() : 0;
     44a:	ldrb	r0, [r3, #0]
     44c:	ands.w	r0, r0, #8
     450:	beq.n	462 <File::available()+0x2a>
     452:	ldr	r0, [r3, #28]
     454:	ldr	r3, [r3, #20]
    return n > INT_MAX ? INT_MAX : n;
     456:	subs	r0, r0, r3
     458:	it	mi
     45a:	mvnmi.w	r0, #2147483648	; 0x80000000
     45e:	bx	lr
     460:	mov	r0, r3
	}
     462:	bx	lr
     464:	ldr	r3, [r0, #84]	; 0x54
     466:	cmp	r3, #0
     468:	beq.n	460 <File::available()+0x28>
  uint64_t available64() { return isFile() ? fileSize() - curPosition() : 0; }
     46a:	ldrb.w	r0, [r3, #49]	; 0x31
     46e:	ands.w	r0, r0, #8
     472:	beq.n	462 <File::available()+0x2a>
     474:	ldr	r0, [r3, #16]
     476:	ldr	r1, [r3, #0]
     478:	ldr	r2, [r3, #20]
     47a:	subs	r0, r0, r1
     47c:	ldr	r3, [r3, #4]
     47e:	sbc.w	r3, r2, r3
    return n > INT_MAX ? INT_MAX : n;
     482:	cmp.w	r0, #2147483648	; 0x80000000
     486:	sbcs.w	r3, r3, #0
     48a:	bcc.n	462 <File::available()+0x2a>
     48c:	mvn.w	r0, #2147483648	; 0x80000000
     490:	bx	lr
		return (f) ? f->available() : 0;
     492:	bx	r3
     494:	.word	0x000006f1

00000498 <File::flush()>:
	int peek() {
		return (f) ? f->peek() : -1;
	}
	void flush() {
		if (f) f->flush();
     498:	ldr	r3, [r0, #16]
     49a:	cbz	r3, 4b6 <File::flush()+0x1e>
     49c:	ldr	r2, [r3, #0]
     49e:	ldr	r1, [pc, #28]	; (4bc <File::flush()+0x24>)
     4a0:	ldr	r2, [r2, #24]
     4a2:	cmp	r2, r1
     4a4:	bne.n	4b8 <File::flush()+0x20>
    return m_fFile ? m_fFile->sync() : m_xFile ? m_xFile->sync() : false;
     4a6:	ldr	r0, [r3, #80]	; 0x50
     4a8:	cbz	r0, 4ae <File::flush()+0x16>
     4aa:	b.w	654c <FatFile::sync()>
     4ae:	ldr	r0, [r3, #84]	; 0x54
     4b0:	cbz	r0, 4b6 <File::flush()+0x1e>
     4b2:	b.w	46b4 <ExFatFile::sync()>
	}
     4b6:	bx	lr
		if (f) f->flush();
     4b8:	mov	r0, r3
     4ba:	bx	r2
     4bc:	.word	0x00000619

000004c0 <File::peek()>:
		return (f) ? f->peek() : -1;
     4c0:	ldr	r3, [r0, #16]
     4c2:	cbz	r3, 4e2 <File::peek()+0x22>
     4c4:	ldr	r2, [r3, #0]
     4c6:	ldr	r1, [pc, #32]	; (4e8 <File::peek()+0x28>)
     4c8:	ldr	r2, [r2, #20]
     4ca:	cmp	r2, r1
     4cc:	bne.n	4de <File::peek()+0x1e>
    return m_fFile ? m_fFile->peek() : m_xFile ? m_xFile->peek() : -1;
     4ce:	ldr	r0, [r3, #80]	; 0x50
     4d0:	cbz	r0, 4d6 <File::peek()+0x16>
     4d2:	b.w	5f64 <FatFile::peek()>
     4d6:	ldr	r0, [r3, #84]	; 0x54
     4d8:	cbz	r0, 4e2 <File::peek()+0x22>
     4da:	b.w	3794 <ExFatFile::peek()>
     4de:	mov	r0, r3
     4e0:	bx	r2
	}
     4e2:	mov.w	r0, #4294967295
     4e6:	bx	lr
     4e8:	.word	0x000005e9

000004ec <File::write(unsigned char)>:
		if (!f) return -1;
		unsigned char b;
		if (f->read(&b, 1) < 1) return -1;
		return b;
	}
	size_t write(uint8_t b) {
     4ec:	push	{lr}
		return (f) ? f->write(&b, 1) : 0;
     4ee:	ldr	r0, [r0, #16]
	size_t write(uint8_t b) {
     4f0:	sub	sp, #12
     4f2:	strb.w	r1, [sp, #7]
		return (f) ? f->write(&b, 1) : 0;
     4f6:	cbz	r0, 512 <File::write(unsigned char)+0x26>
     4f8:	ldr	r3, [r0, #0]
     4fa:	ldr	r2, [pc, #64]	; (53c <File::write(unsigned char)+0x50>)
     4fc:	ldr	r3, [r3, #12]
     4fe:	cmp	r3, r2
     500:	bne.n	52e <File::write(unsigned char)+0x42>
    return m_fFile   ? m_fFile->write(buf, count)
     502:	ldr	r3, [r0, #80]	; 0x50
     504:	cbz	r3, 518 <File::write(unsigned char)+0x2c>
     506:	movs	r2, #1
     508:	add.w	r1, sp, #7
     50c:	mov	r0, r3
     50e:	bl	6760 <FatFile::write(void const*, unsigned int)>
	}
     512:	add	sp, #12
     514:	ldr.w	pc, [sp], #4
     518:	ldr	r0, [r0, #84]	; 0x54
           : m_xFile ? m_xFile->write(buf, count)
     51a:	cmp	r0, #0
     51c:	beq.n	512 <File::write(unsigned char)+0x26>
     51e:	movs	r2, #1
     520:	add.w	r1, sp, #7
     524:	bl	4c88 <ExFatFile::write(void const*, unsigned int)>
     528:	add	sp, #12
     52a:	ldr.w	pc, [sp], #4
		return (f) ? f->write(&b, 1) : 0;
     52e:	movs	r2, #1
     530:	add.w	r1, sp, #7
     534:	blx	r3
	}
     536:	add	sp, #12
     538:	ldr.w	pc, [sp], #4
     53c:	.word	0x00000641

00000540 <File::read()>:
		if (!f) return -1;
     540:	ldr	r3, [r0, #16]
     542:	cbz	r3, 58e <File::read()+0x4e>
		if (f->read(&b, 1) < 1) return -1;
     544:	ldr	r1, [r3, #0]
     546:	ldr	r2, [pc, #76]	; (594 <File::read()+0x54>)
	int read() {
     548:	push	{r4, lr}
		if (f->read(&b, 1) < 1) return -1;
     54a:	ldr	r4, [r1, #8]
	int read() {
     54c:	sub	sp, #8
     54e:	cmp	r4, r2
     550:	bne.n	57c <File::read()+0x3c>
    return m_fFile   ? m_fFile->read(buf, count)
     552:	ldr	r0, [r3, #80]	; 0x50
     554:	cbz	r0, 56a <File::read()+0x2a>
     556:	movs	r2, #1
     558:	add.w	r1, sp, #7
     55c:	bl	5dbc <FatFile::read(void*, unsigned int)>
		if (f->read(&b, 1) < 1) return -1;
     560:	cbz	r0, 588 <File::read()+0x48>
		return b;
     562:	ldrb.w	r0, [sp, #7]
	}
     566:	add	sp, #8
     568:	pop	{r4, pc}
     56a:	ldr	r0, [r3, #84]	; 0x54
           : m_xFile ? m_xFile->read(buf, count)
     56c:	cmp	r0, #0
     56e:	beq.n	562 <File::read()+0x22>
     570:	movs	r2, #1
     572:	add.w	r1, sp, #7
     576:	bl	35f4 <ExFatFile::read(void*, unsigned int)>
     57a:	b.n	560 <File::read()+0x20>
		if (f->read(&b, 1) < 1) return -1;
     57c:	movs	r2, #1
     57e:	add.w	r1, sp, #7
     582:	mov	r0, r3
     584:	blx	r4
     586:	b.n	560 <File::read()+0x20>
		if (!f) return -1;
     588:	mov.w	r0, #4294967295
     58c:	b.n	566 <File::read()+0x26>
     58e:	mov.w	r0, #4294967295
	}
     592:	bx	lr
     594:	.word	0x00000599

00000598 <SDFile::read(void*, unsigned int)>:
    return m_fFile   ? m_fFile->read(buf, count)
     598:	ldr	r3, [r0, #80]	; 0x50
     59a:	cbz	r3, 5a2 <SDFile::read(void*, unsigned int)+0xa>
     59c:	mov	r0, r3
     59e:	b.w	5dbc <FatFile::read(void*, unsigned int)>
     5a2:	ldr	r0, [r0, #84]	; 0x54
           : m_xFile ? m_xFile->read(buf, count)
     5a4:	cbz	r0, 5aa <SDFile::read(void*, unsigned int)+0x12>
     5a6:	b.w	35f4 <ExFatFile::read(void*, unsigned int)>
	}
     5aa:	mov.w	r0, #4294967295
     5ae:	bx	lr

000005b0 <StreamFile<FsBaseFile, unsigned long long>::read()>:
    return m_fFile   ? m_fFile->read(buf, count)
     5b0:	ldr	r3, [r0, #72]	; 0x48
  int read() { return BaseFile::read(); }
     5b2:	push	{lr}
     5b4:	sub	sp, #12
     5b6:	cbz	r3, 5d2 <StreamFile<FsBaseFile, unsigned long long>::read()+0x22>
     5b8:	movs	r2, #1
     5ba:	add.w	r1, sp, #7
     5be:	mov	r0, r3
     5c0:	bl	5dbc <FatFile::read(void*, unsigned int)>
    return read(&b, 1) == 1 ? b : -1;
     5c4:	cmp	r0, #1
     5c6:	bne.n	5e2 <StreamFile<FsBaseFile, unsigned long long>::read()+0x32>
     5c8:	ldrb.w	r0, [sp, #7]
     5cc:	add	sp, #12
     5ce:	ldr.w	pc, [sp], #4
     5d2:	ldr	r0, [r0, #76]	; 0x4c
           : m_xFile ? m_xFile->read(buf, count)
     5d4:	cbz	r0, 5e2 <StreamFile<FsBaseFile, unsigned long long>::read()+0x32>
     5d6:	movs	r2, #1
     5d8:	add.w	r1, sp, #7
     5dc:	bl	35f4 <ExFatFile::read(void*, unsigned int)>
     5e0:	b.n	5c4 <StreamFile<FsBaseFile, unsigned long long>::read()+0x14>
    return read(&b, 1) == 1 ? b : -1;
     5e2:	mov.w	r0, #4294967295
     5e6:	b.n	5cc <StreamFile<FsBaseFile, unsigned long long>::read()+0x1c>

000005e8 <SDFile::peek()>:
    return m_fFile ? m_fFile->peek() : m_xFile ? m_xFile->peek() : -1;
     5e8:	ldr	r3, [r0, #80]	; 0x50
     5ea:	cbz	r3, 5f2 <SDFile::peek()+0xa>
     5ec:	mov	r0, r3
     5ee:	b.w	5f64 <FatFile::peek()>
     5f2:	ldr	r0, [r0, #84]	; 0x54
     5f4:	cbz	r0, 5fa <SDFile::peek()+0x12>
     5f6:	b.w	3794 <ExFatFile::peek()>
	}
     5fa:	mov.w	r0, #4294967295
     5fe:	bx	lr

00000600 <StreamFile<FsBaseFile, unsigned long long>::peek()>:
     600:	ldr	r3, [r0, #72]	; 0x48
     602:	cbz	r3, 60a <StreamFile<FsBaseFile, unsigned long long>::peek()+0xa>
     604:	mov	r0, r3
     606:	b.w	5f64 <FatFile::peek()>
     60a:	ldr	r0, [r0, #76]	; 0x4c
     60c:	cbz	r0, 612 <StreamFile<FsBaseFile, unsigned long long>::peek()+0x12>
     60e:	b.w	3794 <ExFatFile::peek()>
  int peek() { return BaseFile::peek(); }
     612:	mov.w	r0, #4294967295
     616:	bx	lr

00000618 <SDFile::flush()>:
    return m_fFile ? m_fFile->sync() : m_xFile ? m_xFile->sync() : false;
     618:	ldr	r3, [r0, #80]	; 0x50
     61a:	cbz	r3, 622 <SDFile::flush()+0xa>
     61c:	mov	r0, r3
     61e:	b.w	654c <FatFile::sync()>
     622:	ldr	r0, [r0, #84]	; 0x54
     624:	cbz	r0, 62a <SDFile::flush()+0x12>
     626:	b.w	46b4 <ExFatFile::sync()>
	}
     62a:	bx	lr

0000062c <StreamFile<FsBaseFile, unsigned long long>::flush()>:
     62c:	ldr	r3, [r0, #72]	; 0x48
     62e:	cbz	r3, 636 <StreamFile<FsBaseFile, unsigned long long>::flush()+0xa>
     630:	mov	r0, r3
     632:	b.w	654c <FatFile::sync()>
     636:	ldr	r0, [r0, #76]	; 0x4c
     638:	cbz	r0, 63e <StreamFile<FsBaseFile, unsigned long long>::flush()+0x12>
     63a:	b.w	46b4 <ExFatFile::sync()>
  void flush() { BaseFile::sync(); }
     63e:	bx	lr

00000640 <SDFile::write(void const*, unsigned int)>:
    return m_fFile   ? m_fFile->write(buf, count)
     640:	ldr	r3, [r0, #80]	; 0x50
     642:	cbz	r3, 64a <SDFile::write(void const*, unsigned int)+0xa>
     644:	mov	r0, r3
     646:	b.w	6760 <FatFile::write(void const*, unsigned int)>
     64a:	ldr	r0, [r0, #84]	; 0x54
           : m_xFile ? m_xFile->write(buf, count)
     64c:	cbz	r0, 652 <SDFile::write(void const*, unsigned int)+0x12>
     64e:	b.w	4c88 <ExFatFile::write(void const*, unsigned int)>
	}
     652:	bx	lr

00000654 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)>:
    return m_fFile   ? m_fFile->write(buf, count)
     654:	ldr	r3, [r0, #72]	; 0x48
     656:	cbz	r3, 65e <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0xa>
     658:	mov	r0, r3
     65a:	b.w	6760 <FatFile::write(void const*, unsigned int)>
     65e:	ldr	r0, [r0, #76]	; 0x4c
           : m_xFile ? m_xFile->write(buf, count)
     660:	cbz	r0, 666 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0x12>
     662:	b.w	4c88 <ExFatFile::write(void const*, unsigned int)>
   * \return For success write() returns the number of bytes written, always
   * \a size.
   */
  size_t write(const uint8_t* buffer, size_t size) {
    return BaseFile::write(buffer, size);
  }
     666:	bx	lr

00000668 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)>:
  size_t write(uint8_t b) { return BaseFile::write(b); }
     668:	push	{lr}
    return m_fFile   ? m_fFile->write(buf, count)
     66a:	ldr	r3, [r0, #72]	; 0x48
     66c:	sub	sp, #12
     66e:	strb.w	r1, [sp, #7]
     672:	cbz	r3, 686 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x1e>
     674:	movs	r2, #1
     676:	add.w	r1, sp, #7
     67a:	mov	r0, r3
     67c:	bl	6760 <FatFile::write(void const*, unsigned int)>
     680:	add	sp, #12
     682:	ldr.w	pc, [sp], #4
     686:	ldr	r0, [r0, #76]	; 0x4c
           : m_xFile ? m_xFile->write(buf, count)
     688:	cmp	r0, #0
     68a:	beq.n	680 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x18>
     68c:	movs	r2, #1
     68e:	add.w	r1, sp, #7
     692:	bl	4c88 <ExFatFile::write(void const*, unsigned int)>
     696:	add	sp, #12
     698:	ldr.w	pc, [sp], #4

0000069c <SDFile::setCreateTime(DateTimeFields const&)>:
		if (tm.year < 80 || tm.year > 207) return false;
     69c:	ldrb	r2, [r1, #6]
     69e:	sub.w	r3, r2, #80	; 0x50
     6a2:	lsls	r3, r3, #24
     6a4:	bmi.n	6ec <SDFile::setCreateTime(DateTimeFields const&)+0x50>
		return sdfatfile.timestamp(T_CREATE, tm.year + 1900, tm.mon + 1,
     6a6:	addw	r2, r2, #1900	; 0x76c
	virtual bool setCreateTime(const DateTimeFields &tm) {
     6aa:	push	{r4, r5, r6, r7, lr}
		return sdfatfile.timestamp(T_CREATE, tm.year + 1900, tm.mon + 1,
     6ac:	ldrb	r3, [r1, #5]
	virtual bool setCreateTime(const DateTimeFields &tm) {
     6ae:	sub	sp, #20
    return m_fFile   ? m_fFile->timestamp(flags, year, month, day, hour, minute,
     6b0:	ldr	r4, [r0, #80]	; 0x50
		return sdfatfile.timestamp(T_CREATE, tm.year + 1900, tm.mon + 1,
     6b2:	adds	r3, #1
			tm.mday, tm.hour, tm.min, tm.sec);
     6b4:	ldrb	r5, [r1, #4]
     6b6:	ldrb	r6, [r1, #2]
     6b8:	ldrb	r7, [r1, #1]
		return sdfatfile.timestamp(T_CREATE, tm.year + 1900, tm.mon + 1,
     6ba:	uxtb	r3, r3
			tm.mday, tm.hour, tm.min, tm.sec);
     6bc:	ldrb	r1, [r1, #0]
     6be:	cbz	r4, 6d4 <SDFile::setCreateTime(DateTimeFields const&)+0x38>
     6c0:	mov	r0, r4
     6c2:	str	r6, [sp, #4]
     6c4:	str	r5, [sp, #0]
     6c6:	strd	r7, r1, [sp, #8]
     6ca:	movs	r1, #2
     6cc:	bl	6614 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
	}
     6d0:	add	sp, #20
     6d2:	pop	{r4, r5, r6, r7, pc}
     6d4:	ldr	r0, [r0, #84]	; 0x54
           : m_xFile ? m_xFile->timestamp(flags, year, month, day, hour, minute,
     6d6:	cmp	r0, #0
     6d8:	beq.n	6d0 <SDFile::setCreateTime(DateTimeFields const&)+0x34>
     6da:	str	r6, [sp, #4]
     6dc:	str	r5, [sp, #0]
     6de:	strd	r7, r1, [sp, #8]
     6e2:	movs	r1, #2
     6e4:	bl	4a1c <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
     6e8:	add	sp, #20
     6ea:	pop	{r4, r5, r6, r7, pc}
		if (tm.year < 80 || tm.year > 207) return false;
     6ec:	movs	r0, #0
	}
     6ee:	bx	lr

000006f0 <SDFile::available()>:
    return m_fFile ? m_fFile->available() : m_xFile ? m_xFile->available() : 0;
     6f0:	ldr	r3, [r0, #80]	; 0x50
     6f2:	cbz	r3, 70a <SDFile::available()+0x1a>
    return isFile() ? fileSize() - curPosition() : 0;
     6f4:	ldrb	r0, [r3, #0]
     6f6:	ands.w	r0, r0, #8
     6fa:	beq.n	718 <SDFile::available()+0x28>
     6fc:	ldr	r0, [r3, #28]
     6fe:	ldr	r3, [r3, #20]
    return n > INT_MAX ? INT_MAX : n;
     700:	subs	r0, r0, r3
     702:	it	mi
     704:	mvnmi.w	r0, #2147483648	; 0x80000000
     708:	bx	lr
     70a:	ldr	r3, [r0, #84]	; 0x54
     70c:	cbz	r3, 738 <SDFile::available()+0x48>
  uint64_t available64() { return isFile() ? fileSize() - curPosition() : 0; }
     70e:	ldrb.w	r0, [r3, #49]	; 0x31
     712:	ands.w	r0, r0, #8
     716:	bne.n	71a <SDFile::available()+0x2a>
	}
     718:	bx	lr
     71a:	ldr	r0, [r3, #16]
     71c:	ldr	r1, [r3, #0]
     71e:	ldr	r2, [r3, #20]
     720:	subs	r0, r0, r1
     722:	ldr	r3, [r3, #4]
     724:	sbc.w	r3, r2, r3
    return n > INT_MAX ? INT_MAX : n;
     728:	cmp.w	r0, #2147483648	; 0x80000000
     72c:	sbcs.w	r3, r3, #0
     730:	bcc.n	718 <SDFile::available()+0x28>
     732:	mvn.w	r0, #2147483648	; 0x80000000
     736:	bx	lr
     738:	mov	r0, r3
		return sdfatfile.available();
     73a:	b.n	718 <SDFile::available()+0x28>

0000073c <StreamFile<FsBaseFile, unsigned long long>::available()>:
     73c:	ldr	r3, [r0, #72]	; 0x48
     73e:	cbz	r3, 756 <StreamFile<FsBaseFile, unsigned long long>::available()+0x1a>
    return isFile() ? fileSize() - curPosition() : 0;
     740:	ldrb	r0, [r3, #0]
     742:	ands.w	r0, r0, #8
     746:	beq.n	764 <StreamFile<FsBaseFile, unsigned long long>::available()+0x28>
     748:	ldr	r0, [r3, #28]
     74a:	ldr	r3, [r3, #20]
    return n > INT_MAX ? INT_MAX : n;
     74c:	subs	r0, r0, r3
     74e:	it	mi
     750:	mvnmi.w	r0, #2147483648	; 0x80000000
     754:	bx	lr
     756:	ldr	r3, [r0, #76]	; 0x4c
     758:	cbz	r3, 784 <StreamFile<FsBaseFile, unsigned long long>::available()+0x48>
  uint64_t available64() { return isFile() ? fileSize() - curPosition() : 0; }
     75a:	ldrb.w	r0, [r3, #49]	; 0x31
     75e:	ands.w	r0, r0, #8
     762:	bne.n	766 <StreamFile<FsBaseFile, unsigned long long>::available()+0x2a>
  int available() { return BaseFile::available(); }
     764:	bx	lr
     766:	ldr	r0, [r3, #16]
     768:	ldr	r1, [r3, #0]
     76a:	ldr	r2, [r3, #20]
     76c:	subs	r0, r0, r1
     76e:	ldr	r3, [r3, #4]
     770:	sbc.w	r3, r2, r3
    return n > INT_MAX ? INT_MAX : n;
     774:	cmp.w	r0, #2147483648	; 0x80000000
     778:	sbcs.w	r3, r3, #0
     77c:	bcc.n	764 <StreamFile<FsBaseFile, unsigned long long>::available()+0x28>
     77e:	mvn.w	r0, #2147483648	; 0x80000000
     782:	bx	lr
     784:	mov	r0, r3
     786:	b.n	764 <StreamFile<FsBaseFile, unsigned long long>::available()+0x28>

00000788 <File::write(unsigned char const*, unsigned int)>:
		return (f) ? f->write((void*)buf, size) : 0;
     788:	ldr	r3, [r0, #16]
     78a:	cbz	r3, 7c2 <File::write(unsigned char const*, unsigned int)+0x3a>
     78c:	ldr	r0, [pc, #56]	; (7c8 <File::write(unsigned char const*, unsigned int)+0x40>)
	virtual size_t write(const uint8_t *buf, size_t size) {
     78e:	push	{r4}
		return (f) ? f->write((void*)buf, size) : 0;
     790:	ldr	r4, [r3, #0]
     792:	ldr	r4, [r4, #12]
     794:	cmp	r4, r0
     796:	bne.n	7b8 <File::write(unsigned char const*, unsigned int)+0x30>
    return m_fFile   ? m_fFile->write(buf, count)
     798:	ldr	r0, [r3, #80]	; 0x50
     79a:	cbz	r0, 7a4 <File::write(unsigned char const*, unsigned int)+0x1c>
	}
     79c:	ldr.w	r4, [sp], #4
     7a0:	b.w	6760 <FatFile::write(void const*, unsigned int)>
     7a4:	ldr	r0, [r3, #84]	; 0x54
           : m_xFile ? m_xFile->write(buf, count)
     7a6:	cbz	r0, 7b0 <File::write(unsigned char const*, unsigned int)+0x28>
     7a8:	ldr.w	r4, [sp], #4
     7ac:	b.w	4c88 <ExFatFile::write(void const*, unsigned int)>
     7b0:	movs	r0, #0
     7b2:	ldr.w	r4, [sp], #4
     7b6:	bx	lr
		return (f) ? f->write((void*)buf, size) : 0;
     7b8:	mov	r0, r3
     7ba:	mov	r3, r4
	}
     7bc:	ldr.w	r4, [sp], #4
		return (f) ? f->write((void*)buf, size) : 0;
     7c0:	bx	r3
	}
     7c2:	movs	r0, #0
     7c4:	bx	lr
     7c6:	nop
     7c8:	.word	0x00000641

000007cc <SDFile::~SDFile()>:
	virtual ~SDFile(void) {
     7cc:	push	{r3, r4, r5, lr}
     7ce:	mov	r4, r0
     7d0:	ldr	r3, [pc, #48]	; (804 <SDFile::~SDFile()+0x38>)
		if (filename) {
     7d2:	ldr	r0, [r0, #88]	; 0x58
	virtual ~SDFile(void) {
     7d4:	str	r3, [r4, #0]
		if (filename) {
     7d6:	cbz	r0, 7e0 <SDFile::~SDFile()+0x14>
			free(filename);
     7d8:	bl	f320 <free>
			filename = nullptr;
     7dc:	movs	r3, #0
     7de:	str	r3, [r4, #88]	; 0x58
  bool isOpen() const { return m_fFile || m_xFile; }
     7e0:	ldr	r3, [r4, #80]	; 0x50
			sdfatfile.close();
     7e2:	add.w	r5, r4, #24
     7e6:	cbz	r3, 7fc <SDFile::~SDFile()+0x30>
     7e8:	mov	r0, r5
     7ea:	bl	7b04 <FsBaseFile::close()>
class StreamFile : public stream_t, public BaseFile {
     7ee:	ldr	r3, [pc, #24]	; (808 <SDFile::~SDFile()+0x3c>)
  ~FsBaseFile() { close(); }
     7f0:	mov	r0, r5
     7f2:	str	r3, [r4, #8]
     7f4:	bl	7b04 <FsBaseFile::close()>
	}
     7f8:	mov	r0, r4
     7fa:	pop	{r3, r4, r5, pc}
  bool isOpen() const { return m_fFile || m_xFile; }
     7fc:	ldr	r3, [r4, #84]	; 0x54
     7fe:	cmp	r3, #0
     800:	bne.n	7e8 <SDFile::~SDFile()+0x1c>
     802:	b.n	7ee <SDFile::~SDFile()+0x22>
     804:	.word	0x200009d8
     808:	.word	0x20000898

0000080c <SDFile::~SDFile()>:
	virtual ~SDFile(void) {
     80c:	push	{r3, r4, r5, lr}
     80e:	mov	r4, r0
     810:	ldr	r3, [pc, #56]	; (84c <SDFile::~SDFile()+0x40>)
		if (filename) {
     812:	ldr	r0, [r0, #88]	; 0x58
	virtual ~SDFile(void) {
     814:	str	r3, [r4, #0]
		if (filename) {
     816:	cbz	r0, 820 <SDFile::~SDFile()+0x14>
			free(filename);
     818:	bl	f320 <free>
			filename = nullptr;
     81c:	movs	r3, #0
     81e:	str	r3, [r4, #88]	; 0x58
     820:	ldr	r3, [r4, #80]	; 0x50
			sdfatfile.close();
     822:	add.w	r5, r4, #24
     826:	cbz	r3, 844 <SDFile::~SDFile()+0x38>
     828:	mov	r0, r5
     82a:	bl	7b04 <FsBaseFile::close()>
     82e:	ldr	r3, [pc, #32]	; (850 <SDFile::~SDFile()+0x44>)
  ~FsBaseFile() { close(); }
     830:	mov	r0, r5
     832:	str	r3, [r4, #8]
     834:	bl	7b04 <FsBaseFile::close()>
	}
     838:	mov	r0, r4
     83a:	movs	r1, #92	; 0x5c
     83c:	bl	f16c <operator delete(void*, unsigned int)>
     840:	mov	r0, r4
     842:	pop	{r3, r4, r5, pc}
  bool isOpen() const { return m_fFile || m_xFile; }
     844:	ldr	r3, [r4, #84]	; 0x54
     846:	cmp	r3, #0
     848:	bne.n	828 <SDFile::~SDFile()+0x1c>
     84a:	b.n	82e <SDFile::~SDFile()+0x22>
     84c:	.word	0x200009d8
     850:	.word	0x20000898

00000854 <File::~File()>:
	virtual ~File() {
     854:	push	{r4, r5, r6, lr}
     856:	ldr	r3, [pc, #152]	; (8f0 <File::~File()+0x9c>)
     858:	mov	r4, r0
		if (f) dec_refcount();
     85a:	ldr	r5, [r0, #16]
	virtual ~File() {
     85c:	str	r3, [r0, #0]
		if (f) dec_refcount();
     85e:	cmp	r5, #0
     860:	beq.n	8c8 <File::~File()+0x74>
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	using Print::write;
private:
	void dec_refcount() {
		if (--(f->refcount) == 0) {
     862:	ldr	r6, [r5, #4]
     864:	subs	r6, #1
     866:	str	r6, [r5, #4]
     868:	cbnz	r6, 8c8 <File::~File()+0x74>
			f->close();
     86a:	ldr	r3, [r5, #0]
     86c:	ldr	r2, [pc, #132]	; (8f4 <File::~File()+0xa0>)
     86e:	ldr	r3, [r3, #44]	; 0x2c
     870:	cmp	r3, r2
     872:	bne.n	8dc <File::~File()+0x88>
		if (filename) {
     874:	ldr	r0, [r5, #88]	; 0x58
     876:	cbz	r0, 87e <File::~File()+0x2a>
			free(filename);
     878:	bl	f320 <free>
			filename = nullptr;
     87c:	str	r6, [r5, #88]	; 0x58
     87e:	ldr	r3, [r5, #80]	; 0x50
     880:	cbz	r3, 8d4 <File::~File()+0x80>
			sdfatfile.close();
     882:	add.w	r0, r5, #24
     886:	bl	7b04 <FsBaseFile::close()>
			delete f;
     88a:	ldr	r5, [r4, #16]
     88c:	cbz	r5, 8c8 <File::~File()+0x74>
     88e:	ldr	r3, [r5, #0]
     890:	ldr	r2, [pc, #100]	; (8f8 <File::~File()+0xa4>)
     892:	ldr	r3, [r3, #4]
     894:	cmp	r3, r2
     896:	bne.n	8ea <File::~File()+0x96>
	virtual ~SDFile(void) {
     898:	ldr	r3, [pc, #96]	; (8fc <File::~File()+0xa8>)
		if (filename) {
     89a:	ldr	r0, [r5, #88]	; 0x58
	virtual ~SDFile(void) {
     89c:	str	r3, [r5, #0]
		if (filename) {
     89e:	cbz	r0, 8a8 <File::~File()+0x54>
			free(filename);
     8a0:	bl	f320 <free>
			filename = nullptr;
     8a4:	movs	r3, #0
     8a6:	str	r3, [r5, #88]	; 0x58
     8a8:	ldr	r3, [r5, #80]	; 0x50
			sdfatfile.close();
     8aa:	add.w	r6, r5, #24
     8ae:	cbz	r3, 8e2 <File::~File()+0x8e>
     8b0:	mov	r0, r6
     8b2:	bl	7b04 <FsBaseFile::close()>
     8b6:	ldr	r3, [pc, #72]	; (900 <File::~File()+0xac>)
  ~FsBaseFile() { close(); }
     8b8:	mov	r0, r6
     8ba:	str	r3, [r5, #8]
     8bc:	bl	7b04 <FsBaseFile::close()>
	}
     8c0:	movs	r1, #92	; 0x5c
     8c2:	mov	r0, r5
     8c4:	bl	f16c <operator delete(void*, unsigned int)>
	}
     8c8:	mov	r0, r4
     8ca:	movs	r1, #20
     8cc:	bl	f16c <operator delete(void*, unsigned int)>
     8d0:	mov	r0, r4
     8d2:	pop	{r4, r5, r6, pc}
  bool isOpen() const { return m_fFile || m_xFile; }
     8d4:	ldr	r3, [r5, #84]	; 0x54
     8d6:	cmp	r3, #0
     8d8:	bne.n	882 <File::~File()+0x2e>
     8da:	b.n	88a <File::~File()+0x36>
			f->close();
     8dc:	mov	r0, r5
     8de:	blx	r3
     8e0:	b.n	88a <File::~File()+0x36>
     8e2:	ldr	r3, [r5, #84]	; 0x54
     8e4:	cmp	r3, #0
     8e6:	bne.n	8b0 <File::~File()+0x5c>
     8e8:	b.n	8b6 <File::~File()+0x62>
			delete f;
     8ea:	mov	r0, r5
     8ec:	blx	r3
     8ee:	b.n	8c8 <File::~File()+0x74>
     8f0:	.word	0x2000097c
     8f4:	.word	0x00000165
     8f8:	.word	0x0000080d
     8fc:	.word	0x200009d8
     900:	.word	0x20000898

00000904 <SDFile::seek(unsigned long long, int)>:
	virtual bool seek(uint64_t pos, int mode = SeekSet) {
     904:	push	{r4, r5}
     906:	ldr	r4, [sp, #8]
     908:	mov	r1, r2
     90a:	mov	ip, r3
		if (mode == SeekSet) return sdfatfile.seekSet(pos);
     90c:	cbz	r4, 91c <SDFile::seek(unsigned long long, int)+0x18>
		if (mode == SeekCur) return sdfatfile.seekCur(pos);
     90e:	cmp	r4, #1
     910:	beq.n	94c <SDFile::seek(unsigned long long, int)+0x48>
		if (mode == SeekEnd) return sdfatfile.seekEnd(pos);
     912:	cmp	r4, #2
     914:	beq.n	934 <SDFile::seek(unsigned long long, int)+0x30>
	}
     916:	movs	r0, #0
     918:	pop	{r4, r5}
     91a:	bx	lr
    return m_fFile   ? pos < (1ULL << 32) && m_fFile->seekSet(pos)
     91c:	ldr	r5, [r0, #80]	; 0x50
     91e:	cbz	r5, 95e <SDFile::seek(unsigned long long, int)+0x5a>
     920:	mov.w	r3, #4294967295
     924:	cmp	r3, r2
     926:	sbcs.w	r4, r4, ip
     92a:	bcc.n	916 <SDFile::seek(unsigned long long, int)+0x12>
     92c:	mov	r0, r5
     92e:	pop	{r4, r5}
     930:	b.w	624c <FatFile::seekSet(unsigned long)>
    return m_fFile ? m_fFile->fileSize() : m_xFile ? m_xFile->fileSize() : 0;
     934:	ldr	r2, [r0, #80]	; 0x50
     936:	cbz	r2, 97c <SDFile::seek(unsigned long long, int)+0x78>
     938:	ldr	r3, [r2, #28]
  bool seekEnd(int64_t offset = 0) { return seekSet(fileSize() + offset); }
     93a:	adds	r1, r3, r1
     93c:	adc.w	r3, ip, #0
    return m_fFile   ? pos < (1ULL << 32) && m_fFile->seekSet(pos)
     940:	cmp	r3, #0
     942:	bne.n	916 <SDFile::seek(unsigned long long, int)+0x12>
     944:	mov	r0, r2
     946:	pop	{r4, r5}
     948:	b.w	624c <FatFile::seekSet(unsigned long)>
    return m_fFile   ? m_fFile->curPosition()
     94c:	ldr	r2, [r0, #80]	; 0x50
     94e:	cbz	r2, 96a <SDFile::seek(unsigned long long, int)+0x66>
     950:	ldr	r3, [r2, #20]
  bool seekCur(int64_t offset) { return seekSet(curPosition() + offset); }
     952:	adds	r1, r3, r1
     954:	adc.w	r3, ip, #0
    return m_fFile   ? pos < (1ULL << 32) && m_fFile->seekSet(pos)
     958:	cmp	r3, #0
     95a:	bne.n	916 <SDFile::seek(unsigned long long, int)+0x12>
     95c:	b.n	944 <SDFile::seek(unsigned long long, int)+0x40>
     95e:	ldr	r0, [r0, #84]	; 0x54
           : m_xFile ? m_xFile->seekSet(pos)
     960:	cmp	r0, #0
     962:	beq.n	916 <SDFile::seek(unsigned long long, int)+0x12>
     964:	pop	{r4, r5}
     966:	b.w	37c0 <ExFatFile::seekSet(unsigned long long)>
           : m_xFile ? m_xFile->curPosition()
     96a:	ldr	r0, [r0, #84]	; 0x54
     96c:	cmp	r0, #0
     96e:	beq.n	916 <SDFile::seek(unsigned long long, int)+0x12>
  bool seekCur(int64_t offset) { return seekSet(curPosition() + offset); }
     970:	ldrd	r2, r3, [r0]
     974:	adds	r2, r1, r2
           : m_xFile ? m_xFile->seekSet(pos)
     976:	adc.w	r3, ip, r3
     97a:	b.n	964 <SDFile::seek(unsigned long long, int)+0x60>
    return m_fFile ? m_fFile->fileSize() : m_xFile ? m_xFile->fileSize() : 0;
     97c:	ldr	r0, [r0, #84]	; 0x54
     97e:	cmp	r0, #0
     980:	beq.n	916 <SDFile::seek(unsigned long long, int)+0x12>
  bool seekEnd(int64_t offset = 0) { return seekSet(fileSize() + offset); }
     982:	ldrd	r2, r3, [r0, #16]
     986:	pop	{r4, r5}
     988:	adds	r2, r1, r2
           : m_xFile ? m_xFile->seekSet(pos)
     98a:	adc.w	r3, ip, r3
     98e:	b.w	37c0 <ExFatFile::seekSet(unsigned long long)>
     992:	nop

00000994 <File::~File()>:
	virtual ~File() {
     994:	push	{r4, r5, r6, lr}
     996:	ldr	r3, [pc, #144]	; (a28 <File::~File()+0x94>)
     998:	mov	r4, r0
		if (f) dec_refcount();
     99a:	ldr	r5, [r0, #16]
	virtual ~File() {
     99c:	str	r3, [r0, #0]
		if (f) dec_refcount();
     99e:	cmp	r5, #0
     9a0:	beq.n	a08 <File::~File()+0x74>
		if (--(f->refcount) == 0) {
     9a2:	ldr	r6, [r5, #4]
     9a4:	subs	r6, #1
     9a6:	str	r6, [r5, #4]
     9a8:	cbnz	r6, a08 <File::~File()+0x74>
			f->close();
     9aa:	ldr	r3, [r5, #0]
     9ac:	ldr	r2, [pc, #124]	; (a2c <File::~File()+0x98>)
     9ae:	ldr	r3, [r3, #44]	; 0x2c
     9b0:	cmp	r3, r2
     9b2:	bne.n	a14 <File::~File()+0x80>
		if (filename) {
     9b4:	ldr	r0, [r5, #88]	; 0x58
     9b6:	cbz	r0, 9be <File::~File()+0x2a>
			free(filename);
     9b8:	bl	f320 <free>
			filename = nullptr;
     9bc:	str	r6, [r5, #88]	; 0x58
  bool isOpen() const { return m_fFile || m_xFile; }
     9be:	ldr	r3, [r5, #80]	; 0x50
     9c0:	cbz	r3, a0c <File::~File()+0x78>
			sdfatfile.close();
     9c2:	add.w	r0, r5, #24
     9c6:	bl	7b04 <FsBaseFile::close()>
			delete f;
     9ca:	ldr	r5, [r4, #16]
     9cc:	cbz	r5, a08 <File::~File()+0x74>
     9ce:	ldr	r3, [r5, #0]
     9d0:	ldr	r2, [pc, #92]	; (a30 <File::~File()+0x9c>)
     9d2:	ldr	r3, [r3, #4]
     9d4:	cmp	r3, r2
     9d6:	bne.n	a22 <File::~File()+0x8e>
	virtual ~SDFile(void) {
     9d8:	ldr	r3, [pc, #88]	; (a34 <File::~File()+0xa0>)
		if (filename) {
     9da:	ldr	r0, [r5, #88]	; 0x58
	virtual ~SDFile(void) {
     9dc:	str	r3, [r5, #0]
		if (filename) {
     9de:	cbz	r0, 9e8 <File::~File()+0x54>
			free(filename);
     9e0:	bl	f320 <free>
			filename = nullptr;
     9e4:	movs	r3, #0
     9e6:	str	r3, [r5, #88]	; 0x58
     9e8:	ldr	r3, [r5, #80]	; 0x50
			sdfatfile.close();
     9ea:	add.w	r6, r5, #24
     9ee:	cbz	r3, a1a <File::~File()+0x86>
     9f0:	mov	r0, r6
     9f2:	bl	7b04 <FsBaseFile::close()>
     9f6:	ldr	r3, [pc, #64]	; (a38 <File::~File()+0xa4>)
  ~FsBaseFile() { close(); }
     9f8:	mov	r0, r6
     9fa:	str	r3, [r5, #8]
     9fc:	bl	7b04 <FsBaseFile::close()>
	}
     a00:	movs	r1, #92	; 0x5c
     a02:	mov	r0, r5
     a04:	bl	f16c <operator delete(void*, unsigned int)>
	}
     a08:	mov	r0, r4
     a0a:	pop	{r4, r5, r6, pc}
  bool isOpen() const { return m_fFile || m_xFile; }
     a0c:	ldr	r3, [r5, #84]	; 0x54
     a0e:	cmp	r3, #0
     a10:	bne.n	9c2 <File::~File()+0x2e>
     a12:	b.n	9ca <File::~File()+0x36>
			f->close();
     a14:	mov	r0, r5
     a16:	blx	r3
     a18:	b.n	9ca <File::~File()+0x36>
     a1a:	ldr	r3, [r5, #84]	; 0x54
     a1c:	cmp	r3, #0
     a1e:	bne.n	9f0 <File::~File()+0x5c>
     a20:	b.n	9f6 <File::~File()+0x62>
			delete f;
     a22:	mov	r0, r5
     a24:	blx	r3
     a26:	b.n	a08 <File::~File()+0x74>
     a28:	.word	0x2000097c
     a2c:	.word	0x00000165
     a30:	.word	0x0000080d
     a34:	.word	0x200009d8
     a38:	.word	0x20000898
     a3c:	.word	0x00000000

00000a40 <compress(void*)>:
static int32_t *tempDatai=(int32_t*) tempData;

uint32_t proc_stat[24];

int compress(void *inp)
{   
     a40:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     a44:	mov	r5, r0
     a46:	sub	sp, #28

    int32_t *din = (int32_t *) inp;
    //
    // copy reference (first sample of all channels)
	for (int  ii = 0; ii < NCHAN_ACQ; ii++) 
        tempDatai[ii] = din[ii];
     a48:	ldr	r4, [pc, #748]	; (d38 <compress(void*)+0x2f8>)
	uint32_t to = rtc_get();
     a4a:	bl	cfe0 <rtc_get>
     a4e:	str	r0, [sp, #4]
	uint32_t t1 = micros();
     a50:	bl	cdb0 <micros>
        tempDatai[ii] = din[ii];
     a54:	mov	fp, r4
     a56:	ldr	r3, [r5, #0]
     a58:	mov	r1, r5
	uint32_t t1 = micros();
     a5a:	str	r0, [sp, #8]
        tempDatai[ii] = din[ii];
     a5c:	add.w	r5, r4, #508	; 0x1fc
     a60:	mov	r0, r4
     a62:	str	r3, [r4, #0]
        
	//differentiate (equiv 6 dB/Octave HP filter)
	for (int  ii = NCHAN_ACQ; ii < NBUF_ACQ; ii++) 
        tempDatai[ii] = (din[ii] - din[ii - NCHAN_ACQ]);
     a64:	mov	r3, r1
     a66:	ldr	r2, [r1, #4]
     a68:	adds	r1, #4
     a6a:	ldr	r3, [r3, #0]
     a6c:	subs	r3, r2, r3
     a6e:	str.w	r3, [r0, #4]!
	for (int  ii = NCHAN_ACQ; ii < NBUF_ACQ; ii++) 
     a72:	cmp	r5, r0
     a74:	bne.n	a64 <compress(void*)+0x24>
     a76:	ldr	r2, [pc, #704]	; (d38 <compress(void*)+0x2f8>)

	// find maximum in filtered data
	int32_t mx = 0;
     a78:	movs	r1, #0
	for (int ii = NCHAN_ACQ; ii < NBUF_ACQ; ii++)
	{
		int32_t dd =  tempDatai[ii];
     a7a:	ldr.w	r3, [r2, #4]!
		if(dd<0)  dd = -dd;
		if(dd>mx) mx = dd;
     a7e:	cmp	r3, #0
     a80:	it	lt
     a82:	neglt	r3, r3
     a84:	cmp	r1, r3
     a86:	it	lt
     a88:	movlt	r1, r3
	for (int ii = NCHAN_ACQ; ii < NBUF_ACQ; ii++)
     a8a:	cmp	r5, r2
     a8c:	bne.n	a7a <compress(void*)+0x3a>
	}

	// estimate mask (allow only 'nice' values)
    int nb;
    for(nb=2; nb<24; nb++) if(mx < (1<<(nb-1))) break;
     a8e:	movs	r6, #2
     a90:	movs	r2, #1
     a92:	b.n	a9c <compress(void*)+0x5c>
     a94:	adds	r6, #1
     a96:	cmp	r6, #24
     a98:	beq.w	d14 <compress(void*)+0x2d4>
     a9c:	subs	r5, r6, #1
     a9e:	lsl.w	r3, r2, r5
     aa2:	cmp	r3, r1
     aa4:	ble.n	a94 <compress(void*)+0x54>
	// mask data (all but first sample) (mask needed for negative numbers)
	uint32_t msk = (1 << nb) - 1;
	for (int ii = NCHAN_ACQ; ii < NBUF_ACQ; ii++) {	tempData[ii] &= msk; }

	// pack all data
	int ncmp = (NBUF_ACQ*nb) / 32L;
     aa6:	mov.w	r8, r6, lsl #2
	uint32_t msk = (1 << nb) - 1;
     aaa:	lsls	r2, r6
	outData[kk++] = 0xA5A5A5A5;
	outData[kk++] = nb | shift<<16;
	outData[kk++] = to;
	outData[kk++] = t1;
	outData[kk++] = NCHAN_ACQ;
	outData[kk++] = ncmp+NCHAN_ACQ; // number of data after header
     aac:	add.w	sl, r8, #1
	uint32_t msk = (1 << nb) - 1;
     ab0:	subs	r0, r2, #1
	int ndat = 12 + ncmp;
     ab2:	add.w	r8, r8, #12
	for (int ii = NCHAN_ACQ; ii < NBUF_ACQ; ii++) {	tempData[ii] &= msk; }
     ab6:	ldr.w	r3, [fp, #4]
    proc_stat[nb-1]++;
     aba:	ldr	r2, [pc, #640]	; (d3c <compress(void*)+0x2fc>)
	for (int ii = NCHAN_ACQ; ii < NBUF_ACQ; ii++) {	tempData[ii] &= msk; }
     abc:	ands	r3, r0
     abe:	str.w	r3, [fp, #4]
    proc_stat[nb-1]++;
     ac2:	ldr.w	r3, [r2, r5, lsl #2]
     ac6:	adds	r3, #1
     ac8:	str.w	r3, [r2, r5, lsl #2]
	for (int ii = NCHAN_ACQ; ii < NBUF_ACQ; ii++) {	tempData[ii] &= msk; }
     acc:	ldr	r3, [pc, #624]	; (d40 <compress(void*)+0x300>)
     ace:	add.w	r7, r3, #504	; 0x1f8
     ad2:	ldrd	r1, r2, [r3]
     ad6:	adds	r3, #8
     ad8:	ands	r1, r0
     ada:	ands	r2, r0
     adc:	cmp	r3, r7
     ade:	strd	r1, r2, [r3, #-8]
     ae2:	bne.n	ad2 <compress(void*)+0x92>
	for (int ii = 0; ii < NBUF_ACQ; ii++) outData[ii]=0;
     ae4:	ldr	r5, [pc, #604]	; (d44 <compress(void*)+0x304>)
     ae6:	mov.w	r2, #512	; 0x200
     aea:	movs	r1, #0
     aec:	mov	r0, r5
     aee:	bl	10104 <memset>
	outData[kk++] = to;
     af2:	ldr	r3, [sp, #4]
        outData[kk++] = tempData[7]; tempData[7] = 0;
    #endif

	// pack data
    // 
    int nx = 32;
     af4:	movs	r0, #32
	outData[kk++] = tempData[3]; tempData[3] = 0;
     af6:	movs	r2, #10
	outData[kk++] = to;
     af8:	str	r3, [r5, #8]
	outData[kk++] = t1;
     afa:	ldr	r3, [sp, #8]
	outData[kk++] = ncmp+NCHAN_ACQ; // number of data after header
     afc:	str.w	sl, [r5, #20]
	outData[kk++] = t1;
     b00:	str	r3, [r5, #12]
	outData[kk++] = nb | shift<<16;
     b02:	ldr	r3, [pc, #580]	; (d48 <compress(void*)+0x308>)
     b04:	ldr	r3, [r3, #0]
     b06:	orr.w	r9, r6, r3, lsl #16
	outData[kk++] = tempData[0]; tempData[0] = 0;
     b0a:	ldr.w	r3, [fp]
     b0e:	str	r3, [r5, #24]
	outData[kk++] = tempData[1]; tempData[1] = 0;
     b10:	ldr.w	r3, [fp, #4]
	outData[kk++] = nb | shift<<16;
     b14:	str.w	r9, [r5, #4]
	outData[kk++] = tempData[1]; tempData[1] = 0;
     b18:	str	r3, [r5, #28]
	outData[kk++] = tempData[2]; tempData[2] = 0;
     b1a:	ldr.w	r3, [fp, #8]
     b1e:	str	r3, [r5, #32]
	outData[kk++] = tempData[3]; tempData[3] = 0;
     b20:	ldr.w	r3, [fp, #12]
     b24:	str	r3, [r5, #36]	; 0x24
	outData[kk++] = 0xA5A5A5A5;
     b26:	mov.w	r3, #2779096485	; 0xa5a5a5a5
	outData[kk++] = tempData[0]; tempData[0] = 0;
     b2a:	vldr	d7, [pc, #516]	; d30 <compress(void*)+0x2f0>
	outData[kk++] = 0xA5A5A5A5;
     b2e:	str	r3, [r5, #0]
	outData[kk++] = NCHAN_ACQ;
     b30:	movs	r3, #1
	outData[kk++] = tempData[0]; tempData[0] = 0;
     b32:	vstr	d7, [fp]
	outData[kk++] = NCHAN_ACQ;
     b36:	str	r3, [r5, #16]
	outData[kk++] = tempData[0]; tempData[0] = 0;
     b38:	vstr	d7, [fp, #8]
    for (int ii = 0; ii < NBUF_ACQ; ii ++)
     b3c:	b.n	b56 <compress(void*)+0x116>
    {   nx -= nb;
        if(nx > 0)
        {   outData[kk] |= (tempData[ii] << nx);
     b3e:	ldr	r3, [r4, #0]
     b40:	mov	r0, ip
     b42:	ldr.w	r1, [r5, r2, lsl #2]
     b46:	lsl.w	r3, r3, ip
     b4a:	orrs	r3, r1
     b4c:	str.w	r3, [r5, r2, lsl #2]
    for (int ii = 0; ii < NBUF_ACQ; ii ++)
     b50:	adds	r4, #4
     b52:	cmp	r4, r7
     b54:	beq.n	b88 <compress(void*)+0x148>
    {   nx -= nb;
     b56:	sub.w	ip, r0, r6
        if(nx > 0)
     b5a:	cmp.w	ip, #0
     b5e:	bgt.n	b3e <compress(void*)+0xfe>
        else if(nx==0) 
        {   outData[kk++] |= tempData[ii];
            nx=32;
        } 
        else    // nx is < 0
        {   outData[kk++] |= (tempData[ii] >> (-nx));
     b60:	sub.w	r1, r6, r0
     b64:	add.w	lr, r2, #1
            nx += 32;
     b68:	add.w	r0, ip, #32
        else if(nx==0) 
     b6c:	bne.n	bca <compress(void*)+0x18a>
        {   outData[kk++] |= tempData[ii];
     b6e:	ldr.w	r3, [r5, r2, lsl #2]
    for (int ii = 0; ii < NBUF_ACQ; ii ++)
     b72:	adds	r4, #4
        {   outData[kk++] |= tempData[ii];
     b74:	ldr.w	r1, [r4, #-4]
            nx=32;
     b78:	movs	r0, #32
    for (int ii = 0; ii < NBUF_ACQ; ii ++)
     b7a:	cmp	r4, r7
        {   outData[kk++] |= tempData[ii];
     b7c:	orr.w	r3, r3, r1
     b80:	str.w	r3, [r5, r2, lsl #2]
     b84:	mov	r2, lr
    for (int ii = 0; ii < NBUF_ACQ; ii ++)
     b86:	bne.n	b56 <compress(void*)+0x116>
            outData[kk] = (tempData[ii] << nx);
        }
    }
       
    // store actual data
    if ((nout + ndat) <= NBUF_ACQ)
     b88:	ldr	r6, [pc, #448]	; (d4c <compress(void*)+0x30c>)
     b8a:	ldr	r4, [r6, #0]
     b8c:	add.w	r3, r4, r8
     b90:	cmp	r3, #128	; 0x80
     b92:	bgt.n	be6 <compress(void*)+0x1a6>
    {	// all data fit in current block
        for (int ii = 0; ii < ndat; ii++) dout[nout++] = outData[ii];
     b94:	cmp.w	r8, #0
     b98:	ldr	r0, [pc, #436]	; (d50 <compress(void*)+0x310>)
     b9a:	mov.w	r2, r8, lsl #2
     b9e:	ldr	r1, [pc, #420]	; (d44 <compress(void*)+0x304>)
     ba0:	add.w	r0, r0, r4, lsl #2
     ba4:	it	le
     ba6:	movle	r2, #4
     ba8:	bl	b09c <memcpy>
     bac:	cmp.w	r8, #0
     bb0:	add.w	r3, r8, #4294967295
     bb4:	add.w	r4, r4, #1
     bb8:	it	le
     bba:	movle	r3, #0
    int ret=1;
     bbc:	movs	r7, #1
        for (int ii = 0; ii < ndat; ii++) dout[nout++] = outData[ii];
     bbe:	add	r3, r4
     bc0:	str	r3, [r6, #0]

        nout=6;
        while (ii < ndat) dout[nout++] = outData[ii++];
    }
    return ret;
}
     bc2:	mov	r0, r7
     bc4:	add	sp, #28
     bc6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        {   outData[kk++] |= (tempData[ii] >> (-nx));
     bca:	ldr	r3, [r4, #0]
     bcc:	lsr.w	r1, r3, r1
            outData[kk] = (tempData[ii] << nx);
     bd0:	lsl.w	ip, r3, r0
        {   outData[kk++] |= (tempData[ii] >> (-nx));
     bd4:	ldr.w	r3, [r5, r2, lsl #2]
     bd8:	orrs	r1, r3
     bda:	str.w	r1, [r5, r2, lsl #2]
     bde:	mov	r2, lr
            outData[kk] = (tempData[ii] << nx);
     be0:	str.w	ip, [r5, lr, lsl #2]
     be4:	b.n	b50 <compress(void*)+0x110>
    else if ((nout + 6) > NBUF_ACQ) //avoid partial header (special case)
     be6:	cmp	r4, #122	; 0x7a
     be8:	ble.n	c58 <compress(void*)+0x218>
        while(nout<NBUF_ACQ) dout[nout++] = 0; // fill rest of block with zero
     bea:	cmp	r4, #127	; 0x7f
     bec:	bgt.n	c04 <compress(void*)+0x1c4>
     bee:	rsb	r2, r4, #128	; 0x80
     bf2:	ldr	r0, [pc, #348]	; (d50 <compress(void*)+0x310>)
     bf4:	movs	r1, #0
     bf6:	add.w	r0, r0, r4, lsl #2
     bfa:	lsls	r2, r2, #2
     bfc:	bl	10104 <memset>
     c00:	movs	r3, #128	; 0x80
     c02:	str	r3, [r6, #0]
            { 
                /** 
                 * @brief push data to storage
                 * @param src is pointer to data block
                 */
                uint16_t f =front_ ;
     c04:	ldr.w	fp, [pc, #340]	; d5c <compress(void*)+0x31c>
     c08:	ldrh.w	r4, [fp]
                if(f == rear_) return 0;
     c0c:	ldrh.w	r3, [fp, #2]
     c10:	cmp	r3, r4
     c12:	beq.w	d24 <compress(void*)+0x2e4>

                uint32_t *ptr= data_buffer+f*NBUF_ACQ;
     c16:	ldr.w	r0, [fp, #4]
                memcpy(ptr,src,NBUF_ACQ*4);
     c1a:	mov.w	r2, #512	; 0x200
     c1e:	ldr	r1, [pc, #304]	; (d50 <compress(void*)+0x310>)
    int ret=1;
     c20:	movs	r7, #1
     c22:	add.w	r0, r0, r4, lsl #9
     c26:	bl	b09c <memcpy>

                if(++f==MAXBUF) f=0;
     c2a:	adds	r3, r4, #1
     c2c:	uxth	r3, r3
     c2e:	cmp	r3, #100	; 0x64
     c30:	it	eq
     c32:	moveq	r3, #0
                front_ = f;
     c34:	strh.w	r3, [fp]
        for (int ii=0; ii < ndat; ii++) dout[nout++] = outData[ii];
     c38:	cmp.w	r8, #0
     c3c:	mov.w	r2, r8, lsl #2
     c40:	ldr	r1, [pc, #256]	; (d44 <compress(void*)+0x304>)
     c42:	it	le
     c44:	movle	r2, #4
     c46:	ldr	r0, [pc, #264]	; (d50 <compress(void*)+0x310>)
     c48:	bl	b09c <memcpy>
}
     c4c:	mov	r0, r7
     c4e:	str.w	r8, [r6]
     c52:	add	sp, #28
     c54:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        outData[5] = (outData[5]<<16) | (nr-6);  //orig remaining data | actual remaining data after header 
     c58:	rsb	r2, r4, #122	; 0x7a
        while (nout < NBUF_ACQ ) dout[nout++] = outData[ii++];
     c5c:	rsb	r3, r4, #128	; 0x80
     c60:	ldr	r1, [pc, #224]	; (d44 <compress(void*)+0x304>)
        outData[5] = (outData[5]<<16) | (nr-6);  //orig remaining data | actual remaining data after header 
     c62:	orr.w	r2, r2, sl, lsl #16
        while (nout < NBUF_ACQ ) dout[nout++] = outData[ii++];
     c66:	ldr.w	sl, [pc, #232]	; d50 <compress(void*)+0x310>
                uint16_t f =front_ ;
     c6a:	ldr.w	fp, [pc, #240]	; d5c <compress(void*)+0x31c>
        outData[5] = (outData[5]<<16) | (nr-6);  //orig remaining data | actual remaining data after header 
     c6e:	str	r2, [sp, #12]
        while (nout < NBUF_ACQ ) dout[nout++] = outData[ii++];
     c70:	add.w	r0, sl, r4, lsl #2
        outData[5] = (outData[5]<<16) | (nr-6);  //orig remaining data | actual remaining data after header 
     c74:	str	r2, [r5, #20]
        while (nout < NBUF_ACQ ) dout[nout++] = outData[ii++];
     c76:	lsls	r2, r3, #2
     c78:	strd	r2, r3, [sp, #16]
     c7c:	bl	b09c <memcpy>
     c80:	movs	r2, #128	; 0x80
     c82:	ldrh.w	r7, [fp]
     c86:	str	r2, [r6, #0]
                if(f == rear_) return 0;
     c88:	ldrh.w	r2, [fp, #2]
     c8c:	ldr	r3, [sp, #20]
     c8e:	cmp	r2, r7
     c90:	beq.n	d28 <compress(void*)+0x2e8>
                uint32_t *ptr= data_buffer+f*NBUF_ACQ;
     c92:	ldr.w	r0, [fp, #4]
                memcpy(ptr,src,NBUF_ACQ*4);
     c96:	mov.w	r2, #512	; 0x200
     c9a:	mov	r1, sl
     c9c:	add.w	r0, r0, r7, lsl #9
     ca0:	bl	b09c <memcpy>
                if(++f==MAXBUF) f=0;
     ca4:	adds	r2, r7, #1
     ca6:	ldr	r3, [sp, #20]
    int ret=1;
     ca8:	movs	r7, #1
     caa:	uxth	r2, r2
     cac:	cmp	r2, #100	; 0x64
     cae:	it	eq
     cb0:	moveq	r2, #0
                front_ = f;
     cb2:	strh.w	r2, [fp]
        dout[2]=outData[2];
     cb6:	ldr	r2, [sp, #4]
        while (ii < ndat) dout[nout++] = outData[ii++];
     cb8:	cmp	r8, r3
        dout[5]=(outData[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
     cba:	ldr	r1, [sp, #12]
        dout[2]=outData[2];
     cbc:	str.w	r2, [sl, #8]
        dout[3]=outData[3];
     cc0:	ldr	r2, [sp, #8]
        dout[1]=outData[1];
     cc2:	str.w	r9, [sl, #4]
        dout[3]=outData[3];
     cc6:	str.w	r2, [sl, #12]
        dout[5]=(outData[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
     cca:	ldr	r2, [pc, #136]	; (d54 <compress(void*)+0x314>)
     ccc:	and.w	r1, r1, r2
     cd0:	mov	r2, r1
        nr=ndat-ii;
     cd2:	sub.w	r1, r8, r3
        dout[5]=(outData[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
     cd6:	orr.w	r2, r2, r1
     cda:	str.w	r2, [sl, #20]
        dout[0]=outData[0];
     cde:	mov.w	r2, #2779096485	; 0xa5a5a5a5
     ce2:	str.w	r2, [sl]
        dout[4]=outData[4];
     ce6:	mov.w	r2, #1
     cea:	str.w	r2, [sl, #16]
        nout=6;
     cee:	mov.w	r2, #6
     cf2:	str	r2, [r6, #0]
        while (ii < ndat) dout[nout++] = outData[ii++];
     cf4:	ble.w	bc2 <compress(void*)+0x182>
     cf8:	subs	r4, #128	; 0x80
     cfa:	ldr	r1, [sp, #16]
     cfc:	ldr	r0, [pc, #88]	; (d58 <compress(void*)+0x318>)
     cfe:	add	r4, r8
     d00:	add	r1, r5
     d02:	lsls	r2, r4, #2
     d04:	adds	r4, #6
     d06:	bl	b09c <memcpy>
}
     d0a:	mov	r0, r7
     d0c:	str	r4, [r6, #0]
     d0e:	add	sp, #28
     d10:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     d14:	mvn.w	r0, #4278190080	; 0xff000000
     d18:	mov.w	r8, #108	; 0x6c
     d1c:	mov.w	sl, #97	; 0x61
     d20:	movs	r5, #23
     d22:	b.n	ab6 <compress(void*)+0x76>
        if(!pushData(dout)) ret = 0;
     d24:	movs	r7, #0
     d26:	b.n	c38 <compress(void*)+0x1f8>
        if(!pushData(dout)) ret = 0;
     d28:	movs	r7, #0
     d2a:	b.n	cb6 <compress(void*)+0x276>
     d2c:	nop.w
	...
     d38:	.word	0x20005af8
     d3c:	.word	0x200158a8
     d40:	.word	0x20005b00
     d44:	.word	0x20007510
     d48:	.word	0x200021ec
     d4c:	.word	0x200078f0
     d50:	.word	0x200072a0
     d54:	.word	0xffff0000
     d58:	.word	0x200072b8
     d5c:	.word	0x20015908

00000d60 <process(void*)>:
{   // dispatch processing 
     d60:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     d64:	mov	r5, r0
  	uint32_t to = rtc_get();
     d66:	bl	cfe0 <rtc_get>
     d6a:	mov	r6, r0
	uint32_t t1 = micros();
     d6c:	bl	cdb0 <micros>
    switch(proc)
     d70:	ldr	r3, [pc, #88]	; (dcc <process(void*)+0x6c>)
     d72:	ldr	r3, [r3, #0]
     d74:	cbz	r3, d8e <process(void*)+0x2e>
     d76:	cmp	r3, #1
     d78:	bne.n	d8a <process(void*)+0x2a>
            if(!compress(src)) acq_miss++;
     d7a:	mov	r0, r5
     d7c:	bl	a40 <compress(void*)>
     d80:	cbnz	r0, d8a <process(void*)+0x2a>
     d82:	ldr	r2, [pc, #76]	; (dd0 <process(void*)+0x70>)
     d84:	ldr	r3, [r2, #0]
     d86:	adds	r3, #1
     d88:	str	r3, [r2, #0]
}
     d8a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            { 
                /** 
                 * @brief push data to storage
                 * @param src is pointer to data block
                 */
                uint16_t f =front_ ;
     d8e:	ldr	r7, [pc, #68]	; (dd4 <process(void*)+0x74>)
     d90:	ldrh.w	r8, [r7]
                if(f == rear_) return 0;
     d94:	ldrh	r3, [r7, #2]
     d96:	cmp	r3, r8
     d98:	beq.n	d82 <process(void*)+0x22>

                uint32_t *ptr= data_buffer+f*NBUF_ACQ;
                memcpy(ptr,src,NBUF_ACQ*4);
     d9a:	mov	r4, r0
                uint32_t *ptr= data_buffer+f*NBUF_ACQ;
     d9c:	ldr	r0, [r7, #4]
                memcpy(ptr,src,NBUF_ACQ*4);
     d9e:	mov.w	r2, #512	; 0x200
     da2:	mov	r1, r5
     da4:	add.w	r0, r0, r8, lsl #9
     da8:	bl	b09c <memcpy>
                to_buffer[f]=to;
     dac:	ldr	r3, [r7, #8]
                t1_buffer[f]=t1;
     dae:	ldr	r2, [r7, #12]
                to_buffer[f]=to;
     db0:	str.w	r6, [r3, r8, lsl #2]

                if(++f==MAXBUF) f=0;
     db4:	add.w	r3, r8, #1
                t1_buffer[f]=t1;
     db8:	str.w	r4, [r2, r8, lsl #2]
                if(++f==MAXBUF) f=0;
     dbc:	uxth	r3, r3
     dbe:	cmp	r3, #100	; 0x64
     dc0:	it	eq
     dc2:	moveq	r3, #0
                front_ = f;
     dc4:	strh	r3, [r7, #0]
     dc6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     dca:	nop
     dcc:	.word	0x200158a4
     dd0:	.word	0x20007c1c
     dd4:	.word	0x20015908

00000dd8 <I2S_32::isr32()>:
  daddr = (uint32_t)(dma.TCD->DADDR);
     dd8:	ldr	r3, [pc, #156]	; (e78 <I2S_32::isr32()+0xa0>)
  if (daddr < (uint32_t)i2s_rx_buffer_32 + sizeof(i2s_rx_buffer_32) / 2) {
     dda:	ldr	r1, [pc, #160]	; (e7c <I2S_32::isr32()+0xa4>)
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
     ddc:	ldr	r2, [pc, #160]	; (e80 <I2S_32::isr32()+0xa8>)
{
     dde:	push	{r4, r5, r6, lr}
  daddr = (uint32_t)(dma.TCD->DADDR);
     de0:	ldr	r4, [r3, #0]
     de2:	ldrb	r0, [r3, #4]
     de4:	ldr	r3, [r4, #16]
     de6:	strb	r0, [r2, #31]
  if (daddr < (uint32_t)i2s_rx_buffer_32 + sizeof(i2s_rx_buffer_32) / 2) {
     de8:	cmp	r3, r1
     dea:	bcs.n	e04 <I2S_32::isr32()+0x2c>
    if (I2S_32::update_responsibility) AudioStream::update_all();
     dec:	ldr	r3, [pc, #148]	; (e84 <I2S_32::isr32()+0xac>)
     dee:	ldrb	r3, [r3, #0]
     df0:	cmp	r3, #0
     df2:	beq.n	e70 <I2S_32::isr32()+0x98>
	void transmit(audio_block_t *block, unsigned char index = 0);
	audio_block_t * receiveReadOnly(unsigned int index = 0);
	audio_block_t * receiveWritable(unsigned int index = 0);
	static bool update_setup(void);
	static void update_stop(void);
	static void update_all(void) { NVIC_SET_PENDING(IRQ_SOFTWARE); }
     df4:	mov.w	r3, #3758153728	; 0xe000e000
     df8:	movs	r2, #64	; 0x40
    end = (int32_t *)&i2s_rx_buffer_32[2*AUDIO_BLOCK_SAMPLES_NCH];
     dfa:	add.w	r4, r1, #1024	; 0x400
     dfe:	str.w	r2, [r3, #520]	; 0x208
     e02:	b.n	e0a <I2S_32::isr32()+0x32>
    end = (int32_t *)&i2s_rx_buffer_32[AUDIO_BLOCK_SAMPLES_NCH];
     e04:	mov	r4, r1
    src = (int32_t *)&i2s_rx_buffer_32[0];
     e06:	sub.w	r1, r1, #1024	; 0x400
  for(int ii=0; ii<AUDIO_BLOCK_SAMPLES_NCH;ii++) acq_buffer_32[ii]= src[ii]>>I2S_32::shift;
     e0a:	ldr	r0, [pc, #124]	; (e88 <I2S_32::isr32()+0xb0>)
     e0c:	subs	r1, #4
     e0e:	ldr	r3, [pc, #124]	; (e8c <I2S_32::isr32()+0xb4>)
     e10:	add.w	ip, r0, #1024	; 0x400
     e14:	mov	r2, r0
     e16:	ldrsh.w	lr, [r3]
     e1a:	ldr.w	r3, [r1, #4]!
     e1e:	asr.w	r3, r3, lr
     e22:	str.w	r3, [r2], #4
     e26:	cmp	ip, r2
     e28:	bne.n	e1a <I2S_32::isr32()+0x42>
  left  = I2S_32::block_left;
     e2a:	ldr	r2, [pc, #100]	; (e90 <I2S_32::isr32()+0xb8>)
  right = I2S_32::block_right;
     e2c:	ldr	r3, [pc, #100]	; (e94 <I2S_32::isr32()+0xbc>)
  left  = I2S_32::block_left;
     e2e:	ldr	r2, [r2, #0]
  right = I2S_32::block_right;
     e30:	ldr	r1, [r3, #0]
  if (left != NULL && right != NULL) {
     e32:	cbz	r2, e50 <I2S_32::isr32()+0x78>
     e34:	cbz	r1, e50 <I2S_32::isr32()+0x78>
      dest_left  = &(left->data[0]);
     e36:	adds	r2, #4
      dest_right = &(right->data[0]);
     e38:	adds	r1, #4
  int32_t *iptr = (int32_t *) acq_buffer_32;
     e3a:	ldr	r3, [pc, #76]	; (e88 <I2S_32::isr32()+0xb0>)
        *dest_left++  = (*iptr++); // left side is 16 bit
     e3c:	ldr.w	r6, [r3], #8
        *dest_right++ = (*iptr++);
     e40:	ldr.w	r5, [r3, #-4]
      } while (iptr < end);
     e44:	cmp	r4, r3
        *dest_left++  = (*iptr++); // left side is 16 bit
     e46:	strh.w	r6, [r2], #2
        *dest_right++ = (*iptr++);
     e4a:	strh.w	r5, [r1], #2
      } while (iptr < end);
     e4e:	bhi.n	e3c <I2S_32::isr32()+0x64>
     e50:	ldr	r3, [pc, #68]	; (e98 <I2S_32::isr32()+0xc0>)
     e52:	rsb	r0, r0, #8
     e56:	add.w	r1, r3, #512	; 0x200
    for(int ii=0; ii<NBUF_ACQ; ii++) acq_buffer_32[ii]= acq_buffer_32[2*ii]; 
     e5a:	ldr.w	r2, [r0, r3, lsl #1]
     e5e:	str.w	r2, [r3, #4]!
     e62:	cmp	r1, r3
     e64:	bne.n	e5a <I2S_32::isr32()+0x82>
  process((void *)acq_buffer_32);
     e66:	ldr	r0, [pc, #32]	; (e88 <I2S_32::isr32()+0xb0>)
}
     e68:	ldmia.w	sp!, {r4, r5, r6, lr}
  process((void *)acq_buffer_32);
     e6c:	b.w	d60 <process(void*)>
    end = (int32_t *)&i2s_rx_buffer_32[2*AUDIO_BLOCK_SAMPLES_NCH];
     e70:	add.w	r4, r1, #1024	; 0x400
     e74:	b.n	e0a <I2S_32::isr32()+0x32>
     e76:	nop
     e78:	.word	0x200078d4
     e7c:	.word	0x20006e98
     e80:	.word	0x400e8000
     e84:	.word	0x20015d19
     e88:	.word	0x20006698
     e8c:	.word	0x2000220a
     e90:	.word	0x200078cc
     e94:	.word	0x200078d0
     e98:	.word	0x20006694

00000e9c <I2S_32::config_i2s()>:

//#define AUDIO_SAMPLE_RATE_EXACT 44100 // used for initialization

void I2S_32::config_i2s(void)
{
	CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
     e9c:	ldr	r2, [pc, #200]	; (f68 <I2S_32::config_i2s()+0xcc>)

	// if either transmitter or receiver is enabled, do nothing
	if (I2S1_TCSR & I2S_TCSR_TE) return;
     e9e:	ldr	r1, [pc, #204]	; (f6c <I2S_32::config_i2s()+0xd0>)
	CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
     ea0:	ldr	r3, [r2, #124]	; 0x7c
     ea2:	orr.w	r3, r3, #786432	; 0xc0000
     ea6:	str	r3, [r2, #124]	; 0x7c
	if (I2S1_TCSR & I2S_TCSR_TE) return;
     ea8:	ldr	r3, [r1, #8]
     eaa:	cmp	r3, #0
     eac:	blt.n	f64 <I2S_32::config_i2s()+0xc8>
	if (I2S1_RCSR & I2S_RCSR_RE) return;
     eae:	ldr.w	r3, [r1, #136]	; 0x88
     eb2:	cmp	r3, #0
     eb4:	blt.n	f64 <I2S_32::config_i2s()+0xc8>
    CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
     eb6:	ldr	r3, [pc, #184]	; (f70 <I2S_32::config_i2s()+0xd4>)
    CCM_ANALOG_PLL_AUDIO_DENOM = ndiv & CCM_ANALOG_PLL_AUDIO_DENOM_MASK;
     eb8:	movw	r2, #10000	; 0x2710
    CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
     ebc:	ldr	r0, [pc, #180]	; (f74 <I2S_32::config_i2s()+0xd8>)
    CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
     ebe:	mov.w	r1, #2240	; 0x8c0
{
     ec2:	push	{r4, r5}
    CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
     ec4:	str	r0, [r3, #112]	; 0x70
    CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
     ec6:	str.w	r1, [r3, #128]	; 0x80
    CCM_ANALOG_PLL_AUDIO_DENOM = ndiv & CCM_ANALOG_PLL_AUDIO_DENOM_MASK;
     eca:	str.w	r2, [r3, #144]	; 0x90
    CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_POWERDOWN;//Switch on PLL
     ece:	ldr	r2, [r3, #112]	; 0x70
     ed0:	bic.w	r2, r2, #4096	; 0x1000
     ed4:	str	r2, [r3, #112]	; 0x70
    while (!(CCM_ANALOG_PLL_AUDIO & CCM_ANALOG_PLL_AUDIO_LOCK)) {}; //Wait for pll-lock
     ed6:	ldr	r2, [r3, #112]	; 0x70
     ed8:	cmp	r2, #0
     eda:	bge.n	ed6 <I2S_32::config_i2s()+0x3a>
    CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
     edc:	ldr.w	r0, [r3, #368]	; 0x170
	CORE_PIN20_CONFIG = 3;  //1:RX_SYNC

	int rsync = 0;
	int tsync = 1;

	I2S1_TMR = 0;
     ee0:	movs	r5, #0
     ee2:	ldr	r2, [pc, #148]	; (f78 <I2S_32::config_i2s()+0xdc>)
    CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
     ee4:	ldr	r1, [pc, #128]	; (f68 <I2S_32::config_i2s()+0xcc>)
    CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
     ee6:	ands	r2, r0
    IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
     ee8:	ldr	r4, [pc, #144]	; (f7c <I2S_32::config_i2s()+0xe0>)
	CORE_PIN23_CONFIG = 3;  //1:MCLK
     eea:	ldr	r0, [pc, #148]	; (f80 <I2S_32::config_i2s()+0xe4>)
    CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
     eec:	str.w	r2, [r3, #368]	; 0x170
    CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_BYPASS;//Disable Bypass
     ef0:	ldr	r2, [r3, #112]	; 0x70
     ef2:	bic.w	r2, r2, #65536	; 0x10000
     ef6:	str	r2, [r3, #112]	; 0x70
    CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
     ef8:	ldr	r2, [r1, #28]
    CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
     efa:	ldr	r3, [pc, #136]	; (f84 <I2S_32::config_i2s()+0xe8>)
    CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
     efc:	bic.w	r2, r2, #3072	; 0xc00
        | CCM_CSCMR1_SAI1_CLK_SEL(2); // &0x03 // (0,1,2): PLL3PFD0, PLL5, PLL4
     f00:	orr.w	r2, r2, #2048	; 0x800
    CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
     f04:	str	r2, [r1, #28]
    CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
     f06:	ldr	r2, [r1, #40]	; 0x28
     f08:	ands	r3, r2
      | (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));
     f0a:	ldr	r2, [pc, #124]	; (f88 <I2S_32::config_i2s()+0xec>)
        | CCM_CS1CDR_SAI1_CLK_PODF(n2-1); // &0x3f
     f0c:	orr.w	r3, r3, #206	; 0xce
    CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
     f10:	str	r3, [r1, #40]	; 0x28
     f12:	movs	r1, #3
    IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
     f14:	ldr	r3, [r4, #4]
      | (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));
     f16:	ands	r2, r3
	I2S1_TMR = 0;
     f18:	ldr	r3, [pc, #80]	; (f6c <I2S_32::config_i2s()+0xd0>)
     f1a:	orr.w	r2, r2, #524288	; 0x80000
    IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
     f1e:	str	r2, [r4, #4]
	//I2S1_TCSR = (1<<25); //Reset
	I2S1_TCR1 = I2S_TCR1_RFW(1);
     f20:	movs	r4, #1
	I2S1_TCR2 = I2S_TCR2_SYNC(tsync) | I2S_TCR2_BCP // sync=0; tx is async;
     f22:	ldr	r2, [pc, #104]	; (f8c <I2S_32::config_i2s()+0xf0>)
	CORE_PIN23_CONFIG = 3;  //1:MCLK
     f24:	str.w	r1, [r0, #288]	; 0x120
	CORE_PIN21_CONFIG = 3;  //1:RX_BCLK
     f28:	str.w	r1, [r0, #296]	; 0x128
	CORE_PIN20_CONFIG = 3;  //1:RX_SYNC
     f2c:	str.w	r1, [r0, #292]	; 0x124
		    | (I2S_TCR2_BCD | I2S_TCR2_DIV((1)) | I2S_TCR2_MSEL(1));
	I2S1_TCR3 = I2S_TCR3_TCE;
     f30:	mov.w	r0, #65536	; 0x10000
	I2S1_TMR = 0;
     f34:	str	r5, [r3, #96]	; 0x60
	I2S1_TCR4 = I2S_TCR4_FRSZ((2-1)) | I2S_TCR4_SYWD((32-1)) | I2S_TCR4_MF
     f36:	ldr	r1, [pc, #88]	; (f90 <I2S_32::config_i2s()+0xf4>)
	I2S1_TCR1 = I2S_TCR1_RFW(1);
     f38:	str	r4, [r3, #12]
	I2S1_TCR2 = I2S_TCR2_SYNC(tsync) | I2S_TCR2_BCP // sync=0; tx is async;
     f3a:	str	r2, [r3, #16]
		    | I2S_TCR4_FSE | I2S_TCR4_FSP | I2S_TCR4_FSD;
	I2S1_TCR5 = I2S_TCR5_WNW((32-1)) | I2S_TCR5_W0W((32-1)) | I2S_TCR5_FBT((32-1));
     f3c:	ldr	r2, [pc, #84]	; (f94 <I2S_32::config_i2s()+0xf8>)
	I2S1_TCR3 = I2S_TCR3_TCE;
     f3e:	str	r0, [r3, #20]
	I2S1_TCR4 = I2S_TCR4_FRSZ((2-1)) | I2S_TCR4_SYWD((32-1)) | I2S_TCR4_MF
     f40:	str	r1, [r3, #24]
	I2S1_TCR5 = I2S_TCR5_WNW((32-1)) | I2S_TCR5_W0W((32-1)) | I2S_TCR5_FBT((32-1));
     f42:	str	r2, [r3, #28]

	I2S1_RMR = 0;
     f44:	str.w	r5, [r3, #224]	; 0xe0
	//I2S1_RCSR = (1<<25); //Reset
	I2S1_RCR1 = I2S_RCR1_RFW(1);
     f48:	str.w	r4, [r3, #140]	; 0x8c
	I2S1_RCR2 = I2S_RCR2_SYNC(rsync) | I2S_RCR2_BCP  // sync=0; rx is async;
     f4c:	add.w	r4, r4, #117440512	; 0x7000000
     f50:	str.w	r4, [r3, #144]	; 0x90
  	    | (I2S_RCR2_BCD | I2S_RCR2_DIV((1)) | I2S_RCR2_MSEL(1));
	I2S1_RCR3 = I2S_RCR3_RCE;
     f54:	str.w	r0, [r3, #148]	; 0x94
	I2S1_RCR4 = I2S_RCR4_FRSZ((2-1)) | I2S_RCR4_SYWD((32-1)) | I2S_RCR4_MF
     f58:	str.w	r1, [r3, #152]	; 0x98
		    | I2S_RCR4_FSE | I2S_RCR4_FSP | I2S_RCR4_FSD;
	I2S1_RCR5 = I2S_RCR5_WNW((32-1)) | I2S_RCR5_W0W((32-1)) | I2S_RCR5_FBT((32-1));
     f5c:	str.w	r2, [r3, #156]	; 0x9c
}
     f60:	pop	{r4, r5}
     f62:	bx	lr
     f64:	bx	lr
     f66:	nop
     f68:	.word	0x400fc000
     f6c:	.word	0x40384000
     f70:	.word	0x400d8000
     f74:	.word	0x0011201c
     f78:	.word	0xff7f7fff
     f7c:	.word	0x400ac000
     f80:	.word	0x401f8000
     f84:	.word	0xfffffe00
     f88:	.word	0xfff7fff8
     f8c:	.word	0x47000001
     f90:	.word	0x00011f1b
     f94:	.word	0x1f1f1f00

00000f98 <I2S_32::begin()>:
{ 
     f98:	push	{r3, r4, r5, lr}
  dma.begin(true); // Allocate the DMA channel first
     f9a:	ldr	r4, [pc, #144]	; (102c <I2S_32::begin()+0x94>)
{ 
     f9c:	mov	r5, r0
  dma.begin(true); // Allocate the DMA channel first
     f9e:	movs	r1, #1
     fa0:	mov	r0, r4
     fa2:	bl	dc90 <DMAChannel::begin(bool)>
  config_i2s();
     fa6:	mov	r0, r5
     fa8:	bl	e9c <I2S_32::config_i2s()>
	CORE_PIN8_CONFIG  = 3;  //1:RX_DATA0
     fac:	ldr	r1, [pc, #128]	; (1030 <I2S_32::begin()+0x98>)
     fae:	movs	r0, #3
	IOMUXC_SAI1_RX_DATA0_SELECT_INPUT = 2;
     fb0:	ldr	r3, [pc, #128]	; (1034 <I2S_32::begin()+0x9c>)
     fb2:	movs	r2, #2
  dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
     fb4:	movs	r5, #6
	CORE_PIN8_CONFIG  = 3;  //1:RX_DATA0
     fb6:	str.w	r0, [r1, #380]	; 0x17c
	IOMUXC_SAI1_RX_DATA0_SELECT_INPUT = 2;
     fba:	str.w	r2, [r3, #404]	; 0x194
  dma.TCD->NBYTES_MLNO = 4;
     fbe:	movs	r2, #4
	dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0);
     fc0:	ldr	r3, [r4, #0]
  dma.TCD->SOFF = 0;
     fc2:	ldr	r1, [pc, #116]	; (1038 <I2S_32::begin()+0xa0>)
  dma.TCD->NBYTES_MLNO = 4;
     fc4:	str	r2, [r3, #8]
  dma.TCD->SOFF = 0;
     fc6:	str	r1, [r3, #4]
  dma.TCD->DOFF = 4;
     fc8:	strh	r2, [r3, #20]
  dma.TCD->CITER_ELINKNO = sizeof(i2s_rx_buffer_32) / 4; 
     fca:	mov.w	r2, #512	; 0x200
	dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0);
     fce:	ldr	r0, [pc, #108]	; (103c <I2S_32::begin()+0xa4>)
  dma.TCD->DADDR = i2s_rx_buffer_32;
     fd0:	ldr	r1, [pc, #108]	; (1040 <I2S_32::begin()+0xa8>)
	dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0);
     fd2:	str	r0, [r3, #0]
  dma.TCD->SLAST = 0;
     fd4:	movs	r0, #0
  dma.TCD->DADDR = i2s_rx_buffer_32;
     fd6:	str	r1, [r3, #16]
  dma.TCD->CITER_ELINKNO = sizeof(i2s_rx_buffer_32) / 4; 
     fd8:	strh	r2, [r3, #22]
		volatile uint32_t *mux = &DMAMUX_CHCFG0 + channel;
     fda:	ldrb	r1, [r4, #4]
  dma.TCD->BITER_ELINKNO = sizeof(i2s_rx_buffer_32) / 4;
     fdc:	strh	r2, [r3, #30]
  dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
     fde:	strh	r5, [r3, #28]
  dma.TCD->DLASTSGA = -sizeof(i2s_rx_buffer_32);
     fe0:	subw	r5, r5, #2054	; 0x806
     fe4:	ldr	r2, [pc, #92]	; (1044 <I2S_32::begin()+0xac>)
  dma.TCD->SLAST = 0;
     fe6:	str	r0, [r3, #12]
  dma.TCD->DLASTSGA = -sizeof(i2s_rx_buffer_32);
     fe8:	str	r5, [r3, #24]
		*mux = 0;
     fea:	str.w	r0, [r2, r1, lsl #2]
		*mux = (source & 0x7F) | DMAMUX_CHCFG_ENBL;
     fee:	ldr	r0, [pc, #88]	; (1048 <I2S_32::begin()+0xb0>)
  I2S1_RCSR = I2S_RCSR_RE | I2S_RCSR_BCE | I2S_RCSR_FRDE | I2S_RCSR_FR;
     ff0:	ldr	r3, [pc, #88]	; (104c <I2S_32::begin()+0xb4>)
     ff2:	str.w	r0, [r2, r1, lsl #2]
     ff6:	ldr	r2, [pc, #88]	; (1050 <I2S_32::begin()+0xb8>)
     ff8:	str.w	r2, [r3, #136]	; 0x88
  update_responsibility = update_setup();
     ffc:	bl	e3bc <AudioStream::update_setup()>
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
    1000:	ldrb	r3, [r4, #4]
    1002:	ldr	r4, [pc, #80]	; (1054 <I2S_32::begin()+0xbc>)
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
    1004:	movs	r1, #1
    1006:	ldr	r2, [pc, #80]	; (1058 <I2S_32::begin()+0xc0>)
    1008:	strb	r0, [r4, #0]
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
    100a:	add.w	r0, r3, #16
		DMA_SERQ = channel;
    100e:	ldr	r4, [pc, #76]	; (105c <I2S_32::begin()+0xc4>)
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
    1010:	add.w	r2, r2, r3, lsr #5
		DMA_SERQ = channel;
    1014:	strb	r3, [r4, #27]
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
    1016:	and.w	r3, r3, #31
    101a:	lsls	r2, r2, #2
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
    101c:	ldr	r4, [pc, #64]	; (1060 <I2S_32::begin()+0xc8>)
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
    101e:	lsls	r1, r3
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
    1020:	ldr	r3, [pc, #64]	; (1064 <I2S_32::begin()+0xcc>)
    1022:	str.w	r4, [r3, r0, lsl #2]
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
    1026:	str	r1, [r2, #0]
}
    1028:	pop	{r3, r4, r5, pc}
    102a:	nop
    102c:	.word	0x200078d4
    1030:	.word	0x401f8000
    1034:	.word	0x401f8400
    1038:	.word	0x02020000
    103c:	.word	0x403840a0
    1040:	.word	0x20006a98
    1044:	.word	0x400ec000
    1048:	.word	0x80000013
    104c:	.word	0x40384000
    1050:	.word	0x92000001
    1054:	.word	0x20015d19
    1058:	.word	0x38003840
    105c:	.word	0x400e8000
    1060:	.word	0x00000dd9
    1064:	.word	0x20002400

00001068 <loop>:

extern uint32_t disk_count;
extern uint32_t diskBuffer[];
int32_t *data= (int32_t *)diskBuffer;
//
void loop() {
    1068:	push	{r4, r5, r6, lr}
    106a:	sub	sp, #16
    106c:	ldr	r4, [pc, #112]	; (10e0 <loop+0x78>)
  // put your main code here, to run repeatedly:
  static int16_t status=0;

  int m_sec=(second() % t_acq); // close file every t_acq (60) seconds (on the minute)
    106e:	bl	180c <second()>
    1072:	ldr	r3, [pc, #112]	; (10e4 <loop+0x7c>)

  status=saveData(status);
  
  static uint32_t t0=0;
  static uint32_t ic=0;
  if(millis()-t0>1000)
    1074:	ldr	r1, [pc, #112]	; (10e8 <loop+0x80>)
  int m_sec=(second() % t_acq); // close file every t_acq (60) seconds (on the minute)
    1076:	ldr	r2, [r3, #0]
  if(millis()-t0>1000)
    1078:	ldr	r6, [r1, #0]
    107a:	ldr	r3, [r4, #0]
  m_seco=m_sec; 
    107c:	ldr	r5, [pc, #108]	; (10ec <loop+0x84>)
  if(millis()-t0>1000)
    107e:	subs	r3, r3, r6
  int m_sec=(second() % t_acq); // close file every t_acq (60) seconds (on the minute)
    1080:	sdiv	ip, r0, r2
  if(millis()-t0>1000)
    1084:	cmp.w	r3, #1000	; 0x3e8
  int m_sec=(second() % t_acq); // close file every t_acq (60) seconds (on the minute)
    1088:	mls	r0, ip, r2, r0
  m_seco=m_sec; 
    108c:	str	r0, [r5, #0]
  if(millis()-t0>1000)
    108e:	bls.n	10d4 <loop+0x6c>
			return (CORE_PIN13_PINREG & CORE_PIN13_BITMASK) ? 1 : 0;
    1090:	ldr	r3, [pc, #92]	; (10f0 <loop+0x88>)
    1092:	ldr	r2, [r3, #8]
    1094:	tst.w	r2, #8
				CORE_PIN13_PORTCLEAR = CORE_PIN13_BITMASK;
    1098:	mov.w	r2, #8
			return (CORE_PIN13_PINREG & CORE_PIN13_BITMASK) ? 1 : 0;
    109c:	bne.n	10d8 <loop+0x70>
				CORE_PIN13_PORTSET = CORE_PIN13_BITMASK;
    109e:	str.w	r2, [r3, #132]	; 0x84
  { digitalWriteFast(13,!digitalReadFast(13));
    t0=millis();
    Serial.printf("\n%10d %2d %2d %10d %10d",ic++, second(), disk_count, data[0],data[1]);
    10a2:	ldr	r3, [pc, #80]	; (10f4 <loop+0x8c>)
	return systick_millis_count;
    10a4:	ldr	r2, [r4, #0]
    10a6:	ldr	r5, [r3, #0]
    t0=millis();
    10a8:	str	r2, [r1, #0]
    Serial.printf("\n%10d %2d %2d %10d %10d",ic++, second(), disk_count, data[0],data[1]);
    10aa:	adds	r2, r5, #1
    10ac:	ldr	r4, [pc, #72]	; (10f8 <loop+0x90>)
    10ae:	str	r2, [r3, #0]
    10b0:	bl	180c <second()>
    10b4:	ldr	r1, [pc, #68]	; (10fc <loop+0x94>)
    10b6:	mov	r3, r0
    10b8:	mov	r2, r5
    10ba:	ldr	r1, [r1, #0]
    10bc:	ldr	r0, [r1, #4]
    10be:	str	r0, [sp, #8]
    10c0:	ldr	r0, [r1, #0]
    10c2:	ldr	r5, [r4, #0]
    10c4:	ldr	r1, [pc, #56]	; (1100 <loop+0x98>)
    10c6:	str	r0, [sp, #4]
    10c8:	str	r5, [sp, #0]
    10ca:	ldr	r0, [pc, #56]	; (1104 <loop+0x9c>)
    10cc:	bl	eca0 <Print::printf(char const*, ...)>
    disk_count=0;
    10d0:	movs	r3, #0
    10d2:	str	r3, [r4, #0]
  }
//  asm ("WFI");
}
    10d4:	add	sp, #16
    10d6:	pop	{r4, r5, r6, pc}
				CORE_PIN13_PORTCLEAR = CORE_PIN13_BITMASK;
    10d8:	str.w	r2, [r3, #136]	; 0x88
    10dc:	b.n	10a2 <loop+0x3a>
    10de:	nop
    10e0:	.word	0x2001598c
    10e4:	.word	0x200021f0
    10e8:	.word	0x200078e8
    10ec:	.word	0x200078ec
    10f0:	.word	0x42004000
    10f4:	.word	0x200078e4
    10f8:	.word	0x20015820
    10fc:	.word	0x200021d4
    1100:	.word	0x20001114
    1104:	.word	0x20001c14

00001108 <_GLOBAL__sub_I__Z9I2S_startv>:
                data_buffer=data; to_buffer=to; t1_buffer=t1; front_=0; rear_= MAXBUF;
    1108:	ldr	r3, [pc, #224]	; (11ec <_GLOBAL__sub_I__Z9I2S_startv+0xe4>)
    110a:	ldr	r1, [pc, #228]	; (11f0 <_GLOBAL__sub_I__Z9I2S_startv+0xe8>)
    110c:	ldr	r2, [pc, #228]	; (11f4 <_GLOBAL__sub_I__Z9I2S_startv+0xec>)
    110e:	ldr	r0, [pc, #232]	; (11f8 <_GLOBAL__sub_I__Z9I2S_startv+0xf0>)
    1110:	push	{r4, r5, r6, lr}
    1112:	str	r1, [r3, #4]
    1114:	movs	r4, #0
    1116:	str	r2, [r3, #8]
    1118:	mov.w	r2, #6553600	; 0x640000
    111c:	ldr	r1, [pc, #220]	; (11fc <_GLOBAL__sub_I__Z9I2S_startv+0xf4>)
    111e:	sub	sp, #8
    1120:	str	r2, [r3, #0]
    1122:	str	r1, [r3, #12]
    1124:	mov.w	r1, #1000	; 0x3e8
	File(FileImpl *file) {
    1128:	ldr	r3, [pc, #212]	; (1200 <_GLOBAL__sub_I__Z9I2S_startv+0xf8>)
    MUST_STOP=4
};


#define MIN_SPACE 1000
File file=NULL; 
    112a:	ldr	r2, [pc, #216]	; (1204 <_GLOBAL__sub_I__Z9I2S_startv+0xfc>)
    112c:	str	r3, [r0, #0]
    112e:	str	r1, [r0, #8]
			if (first_update == NULL) {
    1130:	ldr	r5, [pc, #212]	; (1208 <_GLOBAL__sub_I__Z9I2S_startv+0x100>)
    1132:	ldr	r1, [pc, #216]	; (120c <_GLOBAL__sub_I__Z9I2S_startv+0x104>)
    1134:	strb	r4, [r0, #4]
    1136:	strb	r4, [r0, #12]
		f = file;
    1138:	str	r4, [r0, #16]
    113a:	bl	f304 <__aeabi_atexit>
DMAChannel I2S_32::dma(false);
    113e:	ldr	r2, [pc, #196]	; (1204 <_GLOBAL__sub_I__Z9I2S_startv+0xfc>)
    1140:	ldr	r1, [pc, #204]	; (1210 <_GLOBAL__sub_I__Z9I2S_startv+0x108>)
    1142:	ldr	r0, [pc, #208]	; (1214 <_GLOBAL__sub_I__Z9I2S_startv+0x10c>)
    1144:	bl	f304 <__aeabi_atexit>
		num_inputs(ninput), inputQueue(iqueue) {
    1148:	ldr	r6, [pc, #204]	; (1218 <_GLOBAL__sub_I__Z9I2S_startv+0x110>)
    114a:	ldr	r2, [pc, #208]	; (121c <_GLOBAL__sub_I__Z9I2S_startv+0x114>)
			if (first_update == NULL) {
    114c:	ldr	r3, [r5, #0]
		num_inputs(ninput), inputQueue(iqueue) {
    114e:	str	r6, [r2, #0]
    1150:	str	r4, [r2, #16]
			active = false;
    1152:	strh	r4, [r2, #8]
			destination_list = NULL;
    1154:	str	r4, [r2, #12]
			if (first_update == NULL) {
    1156:	cmp	r3, #0
    1158:	beq.n	11e4 <_GLOBAL__sub_I__Z9I2S_startv+0xdc>
				for (p=first_update; p->next_update; p = p->next_update) ;
    115a:	mov	r1, r3
    115c:	ldr	r3, [r3, #20]
    115e:	cmp	r3, #0
    1160:	bne.n	115a <_GLOBAL__sub_I__Z9I2S_startv+0x52>
				p->next_update = this;
    1162:	str	r2, [r1, #20]
			next_update = NULL;
    1164:	movs	r4, #0
	I2S_32(void) : AudioStream(0, NULL) {begin();}
    1166:	ldr	r3, [pc, #184]	; (1220 <_GLOBAL__sub_I__Z9I2S_startv+0x118>)
    1168:	ldr	r0, [pc, #176]	; (121c <_GLOBAL__sub_I__Z9I2S_startv+0x114>)
    116a:	str	r3, [r2, #0]
    116c:	str	r4, [r2, #20]
			cpu_cycles = 0;
    116e:	str	r4, [r2, #4]
			numConnections = 0;
    1170:	strb	r4, [r2, #10]
    1172:	bl	f98 <I2S_32::begin()>
		num_inputs(ninput), inputQueue(iqueue) {
    1176:	ldr	r1, [pc, #172]	; (1224 <_GLOBAL__sub_I__Z9I2S_startv+0x11c>)
			active = false;
    1178:	mov.w	r0, #512	; 0x200
			if (first_update == NULL) {
    117c:	ldr	r3, [r5, #0]
		num_inputs(ninput), inputQueue(iqueue) {
    117e:	mov	r2, r1
			destination_list = NULL;
    1180:	str	r4, [r1, #12]
			active = false;
    1182:	strh	r0, [r1, #8]
		num_inputs(ninput), inputQueue(iqueue) {
    1184:	str.w	r6, [r2], #24
    1188:	str	r2, [r1, #16]
				inputQueue[i] = NULL;
    118a:	strd	r4, r4, [r1, #24]
			if (first_update == NULL) {
    118e:	cmp	r3, #0
    1190:	beq.n	11e8 <_GLOBAL__sub_I__Z9I2S_startv+0xe0>
				for (p=first_update; p->next_update; p = p->next_update) ;
    1192:	mov	r2, r3
    1194:	ldr	r3, [r3, #20]
    1196:	cmp	r3, #0
    1198:	bne.n	1192 <_GLOBAL__sub_I__Z9I2S_startv+0x8a>
				p->next_update = this;
    119a:	str	r1, [r2, #20]
			next_update = NULL;
    119c:	movs	r4, #0
};

class AudioOutputUSB : public AudioStream
{
public:
	AudioOutputUSB(void) : AudioStream(2, inputQueueArray) { begin(); }
    119e:	ldr	r3, [pc, #136]	; (1228 <_GLOBAL__sub_I__Z9I2S_startv+0x120>)
    11a0:	ldr	r0, [pc, #128]	; (1224 <_GLOBAL__sub_I__Z9I2S_startv+0x11c>)
    11a2:	str	r4, [r1, #20]
			cpu_cycles = 0;
    11a4:	str	r4, [r1, #4]
			numConnections = 0;
    11a6:	strb	r4, [r1, #10]
    11a8:	str	r3, [r1, #0]
    11aa:	bl	e7cc <AudioOutputUSB::begin()>
AudioConnection         patchCord2(acq, 0, usb1, 0);
    11ae:	ldr	r3, [pc, #116]	; (1224 <_GLOBAL__sub_I__Z9I2S_startv+0x11c>)
    11b0:	mov	r2, r4
    11b2:	ldr	r1, [pc, #104]	; (121c <_GLOBAL__sub_I__Z9I2S_startv+0x114>)
    11b4:	str	r4, [sp, #0]
    11b6:	ldr	r0, [pc, #116]	; (122c <_GLOBAL__sub_I__Z9I2S_startv+0x124>)
    11b8:	bl	e1ec <AudioConnection::AudioConnection(AudioStream&, unsigned char, AudioStream&, unsigned char)>
    11bc:	ldr	r2, [pc, #68]	; (1204 <_GLOBAL__sub_I__Z9I2S_startv+0xfc>)
    11be:	ldr	r1, [pc, #112]	; (1230 <_GLOBAL__sub_I__Z9I2S_startv+0x128>)
    11c0:	ldr	r0, [pc, #104]	; (122c <_GLOBAL__sub_I__Z9I2S_startv+0x124>)
    11c2:	bl	f304 <__aeabi_atexit>
AudioConnection         patchCord3(acq, 1, usb1, 1);
    11c6:	movs	r2, #1
    11c8:	ldr	r1, [pc, #80]	; (121c <_GLOBAL__sub_I__Z9I2S_startv+0x114>)
    11ca:	str	r2, [sp, #0]
    11cc:	ldr	r3, [pc, #84]	; (1224 <_GLOBAL__sub_I__Z9I2S_startv+0x11c>)
    11ce:	ldr	r0, [pc, #100]	; (1234 <_GLOBAL__sub_I__Z9I2S_startv+0x12c>)
    11d0:	bl	e1ec <AudioConnection::AudioConnection(AudioStream&, unsigned char, AudioStream&, unsigned char)>
    11d4:	ldr	r2, [pc, #44]	; (1204 <_GLOBAL__sub_I__Z9I2S_startv+0xfc>)
    11d6:	ldr	r1, [pc, #88]	; (1230 <_GLOBAL__sub_I__Z9I2S_startv+0x128>)
    11d8:	ldr	r0, [pc, #88]	; (1234 <_GLOBAL__sub_I__Z9I2S_startv+0x12c>)
}
    11da:	add	sp, #8
    11dc:	ldmia.w	sp!, {r4, r5, r6, lr}
AudioConnection         patchCord3(acq, 1, usb1, 1);
    11e0:	b.w	f304 <__aeabi_atexit>
				first_update = this;
    11e4:	str	r2, [r5, #0]
    11e6:	b.n	1164 <_GLOBAL__sub_I__Z9I2S_startv+0x5c>
    11e8:	str	r1, [r5, #0]
    11ea:	b.n	119c <_GLOBAL__sub_I__Z9I2S_startv+0x94>
    11ec:	.word	0x20015908
    11f0:	.word	0x20007c20
    11f4:	.word	0x20015b24
    11f8:	.word	0x2001584c
    11fc:	.word	0x20015994
    1200:	.word	0x2000097c
    1204:	.word	0x20001c44
    1208:	.word	0x20007728
    120c:	.word	0x00000995
    1210:	.word	0x00000159
    1214:	.word	0x200078d4
    1218:	.word	0x200008bc
    121c:	.word	0x20007c04
    1220:	.word	0x200009cc
    1224:	.word	0x20015cb4
    1228:	.word	0x200008c8
    122c:	.word	0x2001587c
    1230:	.word	0x0000e389
    1234:	.word	0x20015890

00001238 <setup>:
void setup() {
    1238:	push	{r3, r4, r5, r6, r7, lr}
  setSyncProvider(getTime);
    123a:	ldr	r0, [pc, #152]	; (12d4 <setup+0x9c>)
    123c:	bl	183c <setSyncProvider(long long (*)())>
  set_arm_clock(24000000);
    1240:	ldr	r0, [pc, #148]	; (12d8 <setup+0xa0>)
    1242:	bl	ba60 <set_arm_clock>
  AudioMemory(10);
    1246:	movs	r1, #10
    1248:	ldr	r0, [pc, #144]	; (12dc <setup+0xa4>)
    124a:	bl	15730 <___ZN11AudioStream17initialize_memoryEP18audio_block_structj_veneer>
  acq.digitalShift(shift);
    124e:	ldr	r2, [pc, #144]	; (12e0 <setup+0xa8>)
  void digitalShift(int16_t val){I2S_32::shift=val;}
    1250:	ldr	r3, [pc, #144]	; (12e4 <setup+0xac>)
    1252:	ldr	r2, [r2, #0]
    1254:	ldr	r4, [pc, #144]	; (12e8 <setup+0xb0>)
    1256:	ldr	r5, [pc, #148]	; (12ec <setup+0xb4>)
    1258:	ldr	r7, [pc, #148]	; (12f0 <setup+0xb8>)
    125a:	ldr	r6, [pc, #152]	; (12f4 <setup+0xbc>)
    125c:	strh	r2, [r3, #0]
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
	// Testing Serial as a boolean indicates whether USB is active and a program
	// running on your PC has raised the DTR signal, which typically means it has
	// opened the port and is ready to communicate.
        operator bool() {
		yield();
    125e:	bl	daa4 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    1262:	ldrb	r3, [r4, #0]
    1264:	cmp	r3, #0
    1266:	beq.n	125e <setup+0x26>
    1268:	ldrb	r3, [r5, #0]
    126a:	lsls	r3, r3, #31
    126c:	bpl.n	125e <setup+0x26>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    126e:	ldr	r3, [r7, #0]
    1270:	ldr	r2, [r6, #0]
    1272:	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    1274:	cmp	r3, #14
    1276:	bls.n	125e <setup+0x26>
  if(CrashReport) Serial.print(CrashReport);
    1278:	ldr	r0, [pc, #124]	; (12f8 <setup+0xc0>)
    127a:	bl	15738 <___ZN16CrashReportClasscvbEv_veneer>
    127e:	cbnz	r0, 12ae <setup+0x76>
  if (!(SD.begin(SDCARD_CS_PIN)) && !(SD.begin(SDCARD_CS_PIN))) 
    1280:	movs	r1, #254	; 0xfe
    1282:	ldr	r0, [pc, #120]	; (12fc <setup+0xc4>)
    1284:	bl	278c <SDClass::begin(unsigned char)>
    1288:	cbnz	r0, 1294 <setup+0x5c>
    128a:	movs	r1, #254	; 0xfe
    128c:	ldr	r0, [pc, #108]	; (12fc <setup+0xc4>)
    128e:	bl	278c <SDClass::begin(unsigned char)>
    1292:	cbz	r0, 12b8 <setup+0x80>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    1294:	movs	r1, #13
    1296:	ldr	r0, [pc, #104]	; (1300 <setup+0xc8>)
    1298:	bl	b964 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    129c:	ldr	r0, [pc, #100]	; (1304 <setup+0xcc>)
    129e:	bl	ec74 <Print::println()>
  pinMode(13,OUTPUT);
    12a2:	movs	r1, #1
    12a4:	movs	r0, #13
}
    12a6:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  pinMode(13,OUTPUT);
    12aa:	b.w	d17c <pinMode>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
    12ae:	ldr	r1, [pc, #84]	; (1304 <setup+0xcc>)
    12b0:	ldr	r0, [pc, #68]	; (12f8 <setup+0xc0>)
    12b2:	bl	15728 <___ZNK16CrashReportClass7printToER5Print_veneer>
    12b6:	b.n	1280 <setup+0x48>
    12b8:	movs	r1, #28
    12ba:	ldr	r0, [pc, #76]	; (1308 <setup+0xd0>)
    12bc:	bl	b964 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    12c0:	ldr	r0, [pc, #64]	; (1304 <setup+0xcc>)
    12c2:	bl	ec74 <Print::println()>
    12c6:	movs	r1, #1
    12c8:	movs	r0, #13
}
    12ca:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  pinMode(13,OUTPUT);
    12ce:	b.w	d17c <pinMode>
    12d2:	nop
    12d4:	.word	0x000000e5
    12d8:	.word	0x016e3600
    12dc:	.word	0x20200000
    12e0:	.word	0x200021ec
    12e4:	.word	0x2000220a
    12e8:	.word	0x20015d2e
    12ec:	.word	0x20015d2d
    12f0:	.word	0x2001598c
    12f4:	.word	0x20015ce4
    12f8:	.word	0x20001c08
    12fc:	.word	0x20005d08
    1300:	.word	0x20001158
    1304:	.word	0x20001c14
    1308:	.word	0x20001138

0000130c <_GLOBAL__sub_I__ZN17AudioOutputI2SOct13block_ch1_1stE>:
uint16_t  AudioOutputI2SOct::ch6_offset = 0;
uint16_t  AudioOutputI2SOct::ch7_offset = 0;
uint16_t  AudioOutputI2SOct::ch8_offset = 0;
bool AudioOutputI2SOct::update_responsibility = false;
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES*4];
DMAChannel AudioOutputI2SOct::dma(false);
    130c:	ldr	r2, [pc, #8]	; (1318 <_GLOBAL__sub_I__ZN17AudioOutputI2SOct13block_ch1_1stE+0xc>)
    130e:	ldr	r1, [pc, #12]	; (131c <_GLOBAL__sub_I__ZN17AudioOutputI2SOct13block_ch1_1stE+0x10>)
    1310:	ldr	r0, [pc, #12]	; (1320 <_GLOBAL__sub_I__ZN17AudioOutputI2SOct13block_ch1_1stE+0x14>)
    1312:	b.w	f304 <__aeabi_atexit>
    1316:	nop
    1318:	.word	0x20001c44
    131c:	.word	0x00000159
    1320:	.word	0x20007894

00001324 <__tcf_0>:

extern uint8_t analog_write_res;
extern const struct _pwm_pin_info_struct pwm_pin_info[];
volatile audio_block_t * AudioOutputPWM::block = NULL;
DMAMEM __attribute__((aligned(32))) static uint16_t pwm_tx_buffer[2][AUDIO_BLOCK_SAMPLES * 2];
DMAChannel AudioOutputPWM::dma[2];
    1324:	push	{r4, lr}
		release();
    1326:	ldr	r4, [pc, #20]	; (133c <__tcf_0+0x18>)
    1328:	add.w	r0, r4, #8
    132c:	bl	ddc4 <DMAChannel::release()>
    1330:	mov	r0, r4
    1332:	ldmia.w	sp!, {r4, lr}
    1336:	b.w	ddc4 <DMAChannel::release()>
    133a:	nop
    133c:	.word	0x200077f4

00001340 <_GLOBAL__sub_I__ZN14AudioOutputPWM21update_responsibilityE>:
	old_block = (audio_block_t*)block ;  // block is defined as volatile
	block = new_block ;
	__enable_irq();
	if (old_block)
		release (old_block);
}
    1340:	push	{r4, lr}
		begin();
    1342:	ldr	r4, [pc, #32]	; (1364 <_GLOBAL__sub_I__ZN14AudioOutputPWM21update_responsibilityE+0x24>)
    1344:	movs	r1, #0
    1346:	mov	r0, r4
    1348:	bl	dc90 <DMAChannel::begin(bool)>
    134c:	add.w	r0, r4, #8
    1350:	movs	r1, #0
    1352:	bl	dc90 <DMAChannel::begin(bool)>
DMAChannel AudioOutputPWM::dma[2];
    1356:	ldr	r2, [pc, #16]	; (1368 <_GLOBAL__sub_I__ZN14AudioOutputPWM21update_responsibilityE+0x28>)
    1358:	ldr	r1, [pc, #16]	; (136c <_GLOBAL__sub_I__ZN14AudioOutputPWM21update_responsibilityE+0x2c>)
    135a:	movs	r0, #0
}
    135c:	ldmia.w	sp!, {r4, lr}
DMAChannel AudioOutputPWM::dma[2];
    1360:	b.w	f304 <__aeabi_atexit>
    1364:	.word	0x200077f4
    1368:	.word	0x20001c44
    136c:	.word	0x00001325

00001370 <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE>:
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_rx_buffer[AUDIO_BLOCK_SAMPLES];
audio_block_t * AudioInputI2S::block_left = NULL;
audio_block_t * AudioInputI2S::block_right = NULL;
uint16_t AudioInputI2S::block_offset = 0;
bool AudioInputI2S::update_responsibility = false;
DMAChannel AudioInputI2S::dma(false);
    1370:	ldr	r2, [pc, #8]	; (137c <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE+0xc>)
    1372:	ldr	r1, [pc, #12]	; (1380 <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE+0x10>)
    1374:	ldr	r0, [pc, #12]	; (1384 <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE+0x14>)
    1376:	b.w	f304 <__aeabi_atexit>
    137a:	nop
    137c:	.word	0x20001c44
    1380:	.word	0x00000159
    1384:	.word	0x200077a4

00001388 <_GLOBAL__sub_I__ZN19AudioOutputPT8211_214block_left_1stE>:
#if defined(AUDIO_PT8211_OVERSAMPLING)
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES*4];
#else
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES];
#endif
DMAChannel AudioOutputPT8211_2::dma(false);
    1388:	ldr	r2, [pc, #8]	; (1394 <_GLOBAL__sub_I__ZN19AudioOutputPT8211_214block_left_1stE+0xc>)
    138a:	ldr	r1, [pc, #12]	; (1398 <_GLOBAL__sub_I__ZN19AudioOutputPT8211_214block_left_1stE+0x10>)
    138c:	ldr	r0, [pc, #12]	; (139c <_GLOBAL__sub_I__ZN19AudioOutputPT8211_214block_left_1stE+0x14>)
    138e:	b.w	f304 <__aeabi_atexit>
    1392:	nop
    1394:	.word	0x20001c44
    1398:	.word	0x00000159
    139c:	.word	0x200078bc

000013a0 <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE>:
#if defined(AUDIO_PT8211_OVERSAMPLING)
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES*4];
#else
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES];
#endif
DMAChannel AudioOutputPT8211::dma(false);
    13a0:	ldr	r2, [pc, #8]	; (13ac <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE+0xc>)
    13a2:	ldr	r1, [pc, #12]	; (13b0 <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE+0x10>)
    13a4:	ldr	r0, [pc, #12]	; (13b4 <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE+0x14>)
    13a6:	b.w	f304 <__aeabi_atexit>
    13aa:	nop
    13ac:	.word	0x20001c44
    13b0:	.word	0x00000159
    13b4:	.word	0x2000789c

000013b8 <_GLOBAL__sub_I__ZN16AudioInputSPDIF310block_leftE>:
static uint32_t spdif_rx_buffer[AUDIO_BLOCK_SAMPLES * 4];
audio_block_t * AudioInputSPDIF3::block_left = NULL;
audio_block_t * AudioInputSPDIF3::block_right = NULL;
uint16_t AudioInputSPDIF3::block_offset = 0;
bool AudioInputSPDIF3::update_responsibility = false;
DMAChannel AudioInputSPDIF3::dma(false);
    13b8:	ldr	r2, [pc, #8]	; (13c4 <_GLOBAL__sub_I__ZN16AudioInputSPDIF310block_leftE+0xc>)
    13ba:	ldr	r1, [pc, #12]	; (13c8 <_GLOBAL__sub_I__ZN16AudioInputSPDIF310block_leftE+0x10>)
    13bc:	ldr	r0, [pc, #12]	; (13cc <_GLOBAL__sub_I__ZN16AudioInputSPDIF310block_leftE+0x14>)
    13be:	b.w	f304 <__aeabi_atexit>
    13c2:	nop
    13c4:	.word	0x20001c44
    13c8:	.word	0x00000159
    13cc:	.word	0x20007874

000013d0 <_GLOBAL__sub_I__ZN14AudioInputTDM214block_incomingE>:
audio_block_t * AudioInputTDM2::block_incoming[16] = {
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr,
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr
};
bool AudioInputTDM2::update_responsibility = false;
DMAChannel AudioInputTDM2::dma(false);
    13d0:	ldr	r2, [pc, #8]	; (13dc <_GLOBAL__sub_I__ZN14AudioInputTDM214block_incomingE+0xc>)
    13d2:	ldr	r1, [pc, #12]	; (13e0 <_GLOBAL__sub_I__ZN14AudioInputTDM214block_incomingE+0x10>)
    13d4:	ldr	r0, [pc, #12]	; (13e4 <_GLOBAL__sub_I__ZN14AudioInputTDM214block_incomingE+0x14>)
    13d6:	b.w	f304 <__aeabi_atexit>
    13da:	nop
    13dc:	.word	0x20001c44
    13e0:	.word	0x00000159
    13e4:	.word	0x200077dc

000013e8 <_GLOBAL__sub_I__ZN16AudioInputAnalog3dmaE>:
#include <Arduino.h>
#include "input_adc.h"

extern "C" void xbar_connect(unsigned int input, unsigned int output);

DMAChannel AudioInputAnalog::dma(false);
    13e8:	ldr	r2, [pc, #8]	; (13f4 <_GLOBAL__sub_I__ZN16AudioInputAnalog3dmaE+0xc>)
    13ea:	ldr	r1, [pc, #12]	; (13f8 <_GLOBAL__sub_I__ZN16AudioInputAnalog3dmaE+0x10>)
    13ec:	ldr	r0, [pc, #12]	; (13fc <_GLOBAL__sub_I__ZN16AudioInputAnalog3dmaE+0x14>)
    13ee:	b.w	f304 <__aeabi_atexit>
    13f2:	nop
    13f4:	.word	0x20001c44
    13f8:	.word	0x00000159
    13fc:	.word	0x2000785c

00001400 <_GLOBAL__sub_I__ZN14AudioInputPDM210block_leftE>:

DMAMEM __attribute__((aligned(32))) static uint32_t pdm_buffer[AUDIO_BLOCK_SAMPLES*4];
static uint32_t leftover[14];
audio_block_t * AudioInputPDM2::block_left = NULL;
bool AudioInputPDM2::update_responsibility = false;
DMAChannel AudioInputPDM2::dma(false);
    1400:	ldr	r2, [pc, #8]	; (140c <_GLOBAL__sub_I__ZN14AudioInputPDM210block_leftE+0xc>)
    1402:	ldr	r1, [pc, #12]	; (1410 <_GLOBAL__sub_I__ZN14AudioInputPDM210block_leftE+0x10>)
    1404:	ldr	r0, [pc, #12]	; (1414 <_GLOBAL__sub_I__ZN14AudioInputPDM210block_leftE+0x14>)
    1406:	b.w	f304 <__aeabi_atexit>
    140a:	nop
    140c:	.word	0x20001c44
    1410:	.word	0x00000159
    1414:	.word	0x200077d4

00001418 <_GLOBAL__sub_I__ZN14AudioInputI2S210block_leftE>:
DMAMEM __attribute__((aligned(32))) static uint32_t i2s2_rx_buffer[AUDIO_BLOCK_SAMPLES];
audio_block_t * AudioInputI2S2::block_left = NULL;
audio_block_t * AudioInputI2S2::block_right = NULL;
uint16_t AudioInputI2S2::block_offset = 0;
bool AudioInputI2S2::update_responsibility = false;
DMAChannel AudioInputI2S2::dma(false);
    1418:	ldr	r2, [pc, #8]	; (1424 <_GLOBAL__sub_I__ZN14AudioInputI2S210block_leftE+0xc>)
    141a:	ldr	r1, [pc, #12]	; (1428 <_GLOBAL__sub_I__ZN14AudioInputI2S210block_leftE+0x10>)
    141c:	ldr	r0, [pc, #12]	; (142c <_GLOBAL__sub_I__ZN14AudioInputI2S210block_leftE+0x14>)
    141e:	b.w	f304 <__aeabi_atexit>
    1422:	nop
    1424:	.word	0x20001c44
    1428:	.word	0x00000159
    142c:	.word	0x200077cc

00001430 <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E>:
audio_block_t * AudioInputI2SQuad::block_ch2 = NULL;
audio_block_t * AudioInputI2SQuad::block_ch3 = NULL;
audio_block_t * AudioInputI2SQuad::block_ch4 = NULL;
uint16_t AudioInputI2SQuad::block_offset = 0;
bool AudioInputI2SQuad::update_responsibility = false;
DMAChannel AudioInputI2SQuad::dma(false);
    1430:	ldr	r2, [pc, #8]	; (143c <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E+0xc>)
    1432:	ldr	r1, [pc, #12]	; (1440 <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E+0x10>)
    1434:	ldr	r0, [pc, #12]	; (1444 <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E+0x14>)
    1436:	b.w	f304 <__aeabi_atexit>
    143a:	nop
    143c:	.word	0x20001c44
    1440:	.word	0x00000159
    1444:	.word	0x20007884

00001448 <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE>:
uint16_t  AudioOutputI2SQuad::ch2_offset = 0;
uint16_t  AudioOutputI2SQuad::ch3_offset = 0;
uint16_t  AudioOutputI2SQuad::ch4_offset = 0;
bool AudioOutputI2SQuad::update_responsibility = false;
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES*2];
DMAChannel AudioOutputI2SQuad::dma(false);
    1448:	ldr	r2, [pc, #8]	; (1454 <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE+0xc>)
    144a:	ldr	r1, [pc, #12]	; (1458 <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE+0x10>)
    144c:	ldr	r0, [pc, #12]	; (145c <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE+0x14>)
    144e:	b.w	f304 <__aeabi_atexit>
    1452:	nop
    1454:	.word	0x20001c44
    1458:	.word	0x00000159
    145c:	.word	0x200078b4

00001460 <_GLOBAL__sub_I__ZN15AudioOutputTDM211block_inputE>:
audio_block_t * AudioOutputTDM2::block_input[16] = {
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr,
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr
};
bool AudioOutputTDM2::update_responsibility = false;
DMAChannel AudioOutputTDM2::dma(false);
    1460:	ldr	r2, [pc, #8]	; (146c <_GLOBAL__sub_I__ZN15AudioOutputTDM211block_inputE+0xc>)
    1462:	ldr	r1, [pc, #12]	; (1470 <_GLOBAL__sub_I__ZN15AudioOutputTDM211block_inputE+0x10>)
    1464:	ldr	r0, [pc, #12]	; (1474 <_GLOBAL__sub_I__ZN15AudioOutputTDM211block_inputE+0x14>)
    1466:	b.w	f304 <__aeabi_atexit>
    146a:	nop
    146c:	.word	0x20001c44
    1470:	.word	0x00000159
    1474:	.word	0x20007854

00001478 <_GLOBAL__sub_I__ZN15AudioOutputI2S214block_left_1stE>:
audio_block_t * AudioOutputI2S2::block_left_2nd = NULL;
audio_block_t * AudioOutputI2S2::block_right_2nd = NULL;
uint16_t  AudioOutputI2S2::block_left_offset = 0;
uint16_t  AudioOutputI2S2::block_right_offset = 0;
bool AudioOutputI2S2::update_responsibility = false;
DMAChannel AudioOutputI2S2::dma(false);
    1478:	ldr	r2, [pc, #8]	; (1484 <_GLOBAL__sub_I__ZN15AudioOutputI2S214block_left_1stE+0xc>)
    147a:	ldr	r1, [pc, #12]	; (1488 <_GLOBAL__sub_I__ZN15AudioOutputI2S214block_left_1stE+0x10>)
    147c:	ldr	r0, [pc, #12]	; (148c <_GLOBAL__sub_I__ZN15AudioOutputI2S214block_left_1stE+0x14>)
    147e:	b.w	f304 <__aeabi_atexit>
    1482:	nop
    1484:	.word	0x20001c44
    1488:	.word	0x00000159
    148c:	.word	0x2000784c

00001490 <_GLOBAL__sub_I__ZN17AudioOutputI2SHex13block_ch1_1stE>:
uint16_t  AudioOutputI2SHex::ch4_offset = 0;
uint16_t  AudioOutputI2SHex::ch5_offset = 0;
uint16_t  AudioOutputI2SHex::ch6_offset = 0;
bool AudioOutputI2SHex::update_responsibility = false;
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES*3];
DMAChannel AudioOutputI2SHex::dma(false);
    1490:	ldr	r2, [pc, #8]	; (149c <_GLOBAL__sub_I__ZN17AudioOutputI2SHex13block_ch1_1stE+0xc>)
    1492:	ldr	r1, [pc, #12]	; (14a0 <_GLOBAL__sub_I__ZN17AudioOutputI2SHex13block_ch1_1stE+0x10>)
    1494:	ldr	r0, [pc, #12]	; (14a4 <_GLOBAL__sub_I__ZN17AudioOutputI2SHex13block_ch1_1stE+0x14>)
    1496:	b.w	f304 <__aeabi_atexit>
    149a:	nop
    149c:	.word	0x20001c44
    14a0:	.word	0x00000159
    14a4:	.word	0x2000788c

000014a8 <_GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E>:
audio_block_t * AudioInputI2SOct::block_ch6 = NULL;
audio_block_t * AudioInputI2SOct::block_ch7 = NULL;
audio_block_t * AudioInputI2SOct::block_ch8 = NULL;
uint16_t AudioInputI2SOct::block_offset = 0;
bool AudioInputI2SOct::update_responsibility = false;
DMAChannel AudioInputI2SOct::dma(false);
    14a8:	ldr	r2, [pc, #8]	; (14b4 <_GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E+0xc>)
    14aa:	ldr	r1, [pc, #12]	; (14b8 <_GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E+0x10>)
    14ac:	ldr	r0, [pc, #12]	; (14bc <_GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E+0x14>)
    14ae:	b.w	f304 <__aeabi_atexit>
    14b2:	nop
    14b4:	.word	0x20001c44
    14b8:	.word	0x00000159
    14bc:	.word	0x2000786c

000014c0 <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE>:
audio_block_t * AudioOutputTDM::block_input[16] = {
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr,
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr
};
bool AudioOutputTDM::update_responsibility = false;
DMAChannel AudioOutputTDM::dma(false);
    14c0:	ldr	r2, [pc, #8]	; (14cc <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE+0xc>)
    14c2:	ldr	r1, [pc, #12]	; (14d0 <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE+0x10>)
    14c4:	ldr	r0, [pc, #12]	; (14d4 <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE+0x14>)
    14c6:	b.w	f304 <__aeabi_atexit>
    14ca:	nop
    14cc:	.word	0x20001c44
    14d0:	.word	0x00000159
    14d4:	.word	0x20007804

000014d8 <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE>:
DMAChannel AudioInputTDM::dma(false);
    14d8:	ldr	r2, [pc, #8]	; (14e4 <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE+0xc>)
    14da:	ldr	r1, [pc, #12]	; (14e8 <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE+0x10>)
    14dc:	ldr	r0, [pc, #12]	; (14ec <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE+0x14>)
    14de:	b.w	f304 <__aeabi_atexit>
    14e2:	nop
    14e4:	.word	0x20001c44
    14e8:	.word	0x00000159
    14ec:	.word	0x200077b4

000014f0 <_GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E>:
audio_block_t * AudioInputI2SHex::block_ch4 = NULL;
audio_block_t * AudioInputI2SHex::block_ch5 = NULL;
audio_block_t * AudioInputI2SHex::block_ch6 = NULL;
uint16_t AudioInputI2SHex::block_offset = 0;
bool AudioInputI2SHex::update_responsibility = false;
DMAChannel AudioInputI2SHex::dma(false);
    14f0:	ldr	r2, [pc, #8]	; (14fc <_GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E+0xc>)
    14f2:	ldr	r1, [pc, #12]	; (1500 <_GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E+0x10>)
    14f4:	ldr	r0, [pc, #12]	; (1504 <_GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E+0x14>)
    14f6:	b.w	f304 <__aeabi_atexit>
    14fa:	nop
    14fc:	.word	0x20001c44
    1500:	.word	0x00000159
    1504:	.word	0x20007864

00001508 <_GLOBAL__sub_I__ZN17AudioOutputSPDIF314block_left_1stE>:
audio_block_t * AudioOutputSPDIF3::block_left_1st = nullptr;
audio_block_t * AudioOutputSPDIF3::block_right_1st = nullptr;
audio_block_t * AudioOutputSPDIF3::block_left_2nd = nullptr;
audio_block_t * AudioOutputSPDIF3::block_right_2nd = nullptr;
bool AudioOutputSPDIF3::update_responsibility = false;
DMAChannel AudioOutputSPDIF3::dma(false);
    1508:	ldr	r2, [pc, #8]	; (1514 <_GLOBAL__sub_I__ZN17AudioOutputSPDIF314block_left_1stE+0xc>)
    150a:	ldr	r1, [pc, #12]	; (1518 <_GLOBAL__sub_I__ZN17AudioOutputSPDIF314block_left_1stE+0x10>)
    150c:	ldr	r0, [pc, #12]	; (151c <_GLOBAL__sub_I__ZN17AudioOutputSPDIF314block_left_1stE+0x14>)
    150e:	b.w	f304 <__aeabi_atexit>
    1512:	nop
    1514:	.word	0x20001c44
    1518:	.word	0x00000159
    151c:	.word	0x200078ac

00001520 <_GLOBAL__sub_I__ZN14AudioOutputMQS14block_left_1stE>:
audio_block_t * AudioOutputMQS::block_left_2nd = NULL;
audio_block_t * AudioOutputMQS::block_right_2nd = NULL;
uint16_t  AudioOutputMQS::block_left_offset = 0;
uint16_t  AudioOutputMQS::block_right_offset = 0;
bool AudioOutputMQS::update_responsibility = false;
DMAChannel AudioOutputMQS::dma(false);
    1520:	ldr	r2, [pc, #8]	; (152c <_GLOBAL__sub_I__ZN14AudioOutputMQS14block_left_1stE+0xc>)
    1522:	ldr	r1, [pc, #12]	; (1530 <_GLOBAL__sub_I__ZN14AudioOutputMQS14block_left_1stE+0x10>)
    1524:	ldr	r0, [pc, #12]	; (1534 <_GLOBAL__sub_I__ZN14AudioOutputMQS14block_left_1stE+0x14>)
    1526:	b.w	f304 <__aeabi_atexit>
    152a:	nop
    152c:	.word	0x20001c44
    1530:	.word	0x00000159
    1534:	.word	0x200077ec

00001538 <_GLOBAL__sub_I__ZN21AsyncAudioInputSPDIF310microsLastE>:
static float bufferL[bufferLength];

volatile int32_t AsyncAudioInputSPDIF3::buffer_offset = 0;	// read by resample/ written in spdif input isr -> copied at the beginning of 'resmaple' protected by __disable_irq() in resample
int32_t AsyncAudioInputSPDIF3::resample_offset = 0; // read/written by resample/ read in spdif input isr -> no protection needed?

DMAChannel AsyncAudioInputSPDIF3::dma(false);
    1538:	ldr	r2, [pc, #8]	; (1544 <_GLOBAL__sub_I__ZN21AsyncAudioInputSPDIF310microsLastE+0xc>)
    153a:	ldr	r1, [pc, #12]	; (1548 <_GLOBAL__sub_I__ZN21AsyncAudioInputSPDIF310microsLastE+0x10>)
    153c:	ldr	r0, [pc, #12]	; (154c <_GLOBAL__sub_I__ZN21AsyncAudioInputSPDIF310microsLastE+0x14>)
    153e:	b.w	f304 <__aeabi_atexit>
    1542:	nop
    1544:	.word	0x20001c44
    1548:	.word	0x00000159
    154c:	.word	0x200078c4

00001550 <_GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE>:
#if defined(__IMXRT1062__) || defined(KINETISK)
DMAMEM __attribute__((aligned(32))) static uint32_t pdm_buffer[AUDIO_BLOCK_SAMPLES*4];
static uint32_t leftover[14];
audio_block_t * AudioInputPDM::block_left = NULL;
bool AudioInputPDM::update_responsibility = false;
DMAChannel AudioInputPDM::dma(false);
    1550:	ldr	r2, [pc, #8]	; (155c <_GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE+0xc>)
    1552:	ldr	r1, [pc, #12]	; (1560 <_GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE+0x10>)
    1554:	ldr	r0, [pc, #12]	; (1564 <_GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE+0x14>)
    1556:	b.w	f304 <__aeabi_atexit>
    155a:	nop
    155c:	.word	0x20001c44
    1560:	.word	0x00000159
    1564:	.word	0x200077ac

00001568 <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE>:
audio_block_t * AudioOutputI2S::block_left_2nd = NULL;
audio_block_t * AudioOutputI2S::block_right_2nd = NULL;
uint16_t  AudioOutputI2S::block_left_offset = 0;
uint16_t  AudioOutputI2S::block_right_offset = 0;
bool AudioOutputI2S::update_responsibility = false;
DMAChannel AudioOutputI2S::dma(false);
    1568:	ldr	r2, [pc, #8]	; (1574 <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE+0xc>)
    156a:	ldr	r1, [pc, #12]	; (1578 <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE+0x10>)
    156c:	ldr	r0, [pc, #12]	; (157c <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE+0x14>)
    156e:	b.w	f304 <__aeabi_atexit>
    1572:	nop
    1574:	.word	0x20001c44
    1578:	.word	0x00000159
    157c:	.word	0x200077e4

00001580 <_GLOBAL__sub_I__ZN17AudioOutputSPDIF214block_left_1stE>:
audio_block_t * AudioOutputSPDIF2::block_left_2nd = NULL;
audio_block_t * AudioOutputSPDIF2::block_right_2nd = NULL;
uint16_t  AudioOutputSPDIF2::block_left_offset = 0;
uint16_t  AudioOutputSPDIF2::block_right_offset = 0;
bool AudioOutputSPDIF2::update_responsibility = false;
DMAChannel AudioOutputSPDIF2::dma(false);
    1580:	ldr	r2, [pc, #8]	; (158c <_GLOBAL__sub_I__ZN17AudioOutputSPDIF214block_left_1stE+0xc>)
    1582:	ldr	r1, [pc, #12]	; (1590 <_GLOBAL__sub_I__ZN17AudioOutputSPDIF214block_left_1stE+0x10>)
    1584:	ldr	r0, [pc, #12]	; (1594 <_GLOBAL__sub_I__ZN17AudioOutputSPDIF214block_left_1stE+0x14>)
    1586:	b.w	f304 <__aeabi_atexit>
    158a:	nop
    158c:	.word	0x20001c44
    1590:	.word	0x00000159
    1594:	.word	0x200078a4

00001598 <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE>:
audio_block_t * AudioOutputSPDIF::block_left_2nd = NULL;
audio_block_t * AudioOutputSPDIF::block_right_2nd = NULL;
uint16_t  AudioOutputSPDIF::block_left_offset = 0;
uint16_t  AudioOutputSPDIF::block_right_offset = 0;
bool AudioOutputSPDIF::update_responsibility = false;
DMAChannel AudioOutputSPDIF::dma(false);
    1598:	ldr	r2, [pc, #8]	; (15a4 <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE+0xc>)
    159a:	ldr	r1, [pc, #12]	; (15a8 <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE+0x10>)
    159c:	ldr	r0, [pc, #12]	; (15ac <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE+0x14>)
    159e:	b.w	f304 <__aeabi_atexit>
    15a2:	nop
    15a4:	.word	0x20001c44
    15a8:	.word	0x00000159
    15ac:	.word	0x2000787c

000015b0 <breakTime(long long, tmElements_t&)>:
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
    15b0:	ldr	r1, [pc, #428]	; (1760 <breakTime(long long, tmElements_t&)+0x1b0>)
void breakTime(time_t timeInput, tmElements_t &tm){
    15b2:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  time /= 60; // now it is minutes
    15b6:	umull	r3, r5, r1, r0
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
    15ba:	ldr	r4, [pc, #424]	; (1764 <breakTime(long long, tmElements_t&)+0x1b4>)
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
  
  year = 0;  
  days = 0;
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    15bc:	movw	sl, #365	; 0x16d
    15c0:	ldr.w	r8, [pc, #432]	; 1774 <breakTime(long long, tmElements_t&)+0x1c4>
  time /= 60; // now it is minutes
    15c4:	lsrs	r5, r5, #5
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    15c6:	ldr.w	r9, [pc, #424]	; 1770 <breakTime(long long, tmElements_t&)+0x1c0>
  time /= 60; // now it is hours
    15ca:	umull	r3, r1, r1, r5
  tm.Second = time % 60;
    15ce:	rsb	r6, r5, r5, lsl #4
  time /= 60; // now it is hours
    15d2:	lsrs	r1, r1, #5
  tm.Second = time % 60;
    15d4:	sub.w	r0, r0, r6, lsl #2
  time /= 24; // now it is days
    15d8:	umull	r3, r4, r4, r1
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    15dc:	ldr	r3, [pc, #392]	; (1768 <breakTime(long long, tmElements_t&)+0x1b8>)
  time /= 24; // now it is days
    15de:	lsrs	r4, r4, #4
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    15e0:	adds	r6, r4, #4
    15e2:	umull	r7, r3, r3, r6
  tm.Second = time % 60;
    15e6:	movs	r7, #0
    15e8:	bfi	r7, r0, #0, #8
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    15ec:	subs	r0, r6, r3
    15ee:	add.w	r3, r3, r0, lsr #1
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    15f2:	movs	r0, #0
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    15f4:	lsrs	r3, r3, #2
    15f6:	rsb	r3, r3, r3, lsl #3
    15fa:	subs	r6, r6, r3
  tm.Minute = time % 60;
    15fc:	rsb	r3, r1, r1, lsl #4
    1600:	sub.w	r5, r5, r3, lsl #2
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    1604:	adds	r6, #1
  tm.Hour = time % 24;
    1606:	add.w	r3, r4, r4, lsl #1
  tm.Second = time % 60;
    160a:	bfi	r7, r5, #8, #8
  tm.Hour = time % 24;
    160e:	sub.w	r1, r1, r3, lsl #3
  days = 0;
    1612:	mov	r3, r0
  tm.Second = time % 60;
    1614:	bfi	r7, r1, #16, #8
    1618:	bfi	r7, r6, #24, #8
    161c:	str	r7, [r2, #0]
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    161e:	ldr	r7, [pc, #332]	; (176c <breakTime(long long, tmElements_t&)+0x1bc>)
    1620:	uxtb.w	lr, r0
    1624:	movw	ip, #365	; 0x16d
    1628:	addw	r1, lr, #1970	; 0x7b2
    162c:	ands.w	r6, r1, #3
    1630:	mul.w	r5, r7, r1
    1634:	bne.n	1648 <breakTime(long long, tmElements_t&)+0x98>
    1636:	cmp.w	r8, r5, ror #2
    163a:	mov.w	ip, #366	; 0x16e
    163e:	bcc.n	1648 <breakTime(long long, tmElements_t&)+0x98>
    1640:	cmp.w	r9, r5, ror #4
    1644:	it	cc
    1646:	movcc	ip, sl
    1648:	add	r3, ip
    164a:	adds	r0, #1
    164c:	cmp	r4, r3
    164e:	bcs.n	1620 <breakTime(long long, tmElements_t&)+0x70>
    year++;
  }
  tm.Year = year; // year is offset from 1970 
    1650:	ldr	r0, [pc, #280]	; (176c <breakTime(long long, tmElements_t&)+0x1bc>)
    1652:	strb.w	lr, [r2, #6]
  
  days -= LEAP_YEAR(year) ? 366 : 365;
    1656:	cbz	r6, 16c4 <breakTime(long long, tmElements_t&)+0x114>
  time  -= days; // now it is days in this year, starting at 0
    1658:	subs	r3, r4, r3
    165a:	addw	r4, r3, #365	; 0x16d
      }
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
    165e:	cmp	r4, #30
    1660:	bls.n	1710 <breakTime(long long, tmElements_t&)+0x160>
      time -= monthLength;
    1662:	add.w	r1, r3, #334	; 0x14e
    if (time >= monthLength) {
    1666:	cmp	r1, #27
    1668:	bls.n	16e6 <breakTime(long long, tmElements_t&)+0x136>
      time -= monthLength;
    166a:	add.w	r1, r3, #306	; 0x132
    if (time >= monthLength) {
    166e:	cmp	r1, #30
    1670:	bls.n	172c <breakTime(long long, tmElements_t&)+0x17c>
      time -= monthLength;
    1672:	addw	r1, r3, #275	; 0x113
    if (time >= monthLength) {
    1676:	cmp	r1, #29
    1678:	bls.n	1732 <breakTime(long long, tmElements_t&)+0x182>
      time -= monthLength;
    167a:	add.w	r1, r3, #245	; 0xf5
    if (time >= monthLength) {
    167e:	cmp	r1, #30
    1680:	bls.n	1738 <breakTime(long long, tmElements_t&)+0x188>
      time -= monthLength;
    1682:	add.w	r1, r3, #214	; 0xd6
    if (time >= monthLength) {
    1686:	cmp	r1, #29
    1688:	bls.n	1720 <breakTime(long long, tmElements_t&)+0x170>
      time -= monthLength;
    168a:	add.w	r1, r3, #184	; 0xb8
    if (time >= monthLength) {
    168e:	cmp	r1, #30
    1690:	bls.n	173e <breakTime(long long, tmElements_t&)+0x18e>
      time -= monthLength;
    1692:	add.w	r1, r3, #153	; 0x99
    if (time >= monthLength) {
    1696:	cmp	r1, #30
    1698:	bls.n	1744 <breakTime(long long, tmElements_t&)+0x194>
      time -= monthLength;
    169a:	add.w	r1, r3, #122	; 0x7a
    if (time >= monthLength) {
    169e:	cmp	r1, #29
    16a0:	bls.n	174a <breakTime(long long, tmElements_t&)+0x19a>
      time -= monthLength;
    16a2:	add.w	r1, r3, #92	; 0x5c
    if (time >= monthLength) {
    16a6:	cmp	r1, #30
    16a8:	bls.n	1750 <breakTime(long long, tmElements_t&)+0x1a0>
      time -= monthLength;
    16aa:	add.w	r1, r3, #61	; 0x3d
    if (time >= monthLength) {
    16ae:	cmp	r1, #29
    16b0:	bls.n	1756 <breakTime(long long, tmElements_t&)+0x1a6>
    16b2:	adds.w	r1, r3, #31
    16b6:	bcs.n	1726 <breakTime(long long, tmElements_t&)+0x176>
    16b8:	movs	r6, #13
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
  tm.Day = time + 1;     // day of month
    16ba:	adds	r3, #1
  tm.Month = month + 1;  // jan is month 1  
    16bc:	strb	r6, [r2, #5]
  tm.Day = time + 1;     // day of month
    16be:	strb	r3, [r2, #4]
}
    16c0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    16c4:	mul.w	r1, r0, r1
  days -= LEAP_YEAR(year) ? 366 : 365;
    16c8:	add.w	r0, r0, #1073741824	; 0x40000000
    16cc:	subs	r0, #1
    16ce:	cmp.w	r0, r1, ror #2
    16d2:	bcs.n	16ec <breakTime(long long, tmElements_t&)+0x13c>
  time  -= days; // now it is days in this year, starting at 0
    16d4:	subs	r3, r4, r3
    16d6:	add.w	r4, r3, #366	; 0x16e
    if (time >= monthLength) {
    16da:	cmp	r4, #30
    16dc:	bls.n	175c <breakTime(long long, tmElements_t&)+0x1ac>
      time -= monthLength;
    16de:	addw	r1, r3, #335	; 0x14f
    if (time >= monthLength) {
    16e2:	cmp	r1, #28
    16e4:	bhi.n	166a <breakTime(long long, tmElements_t&)+0xba>
    16e6:	mov	r3, r1
    16e8:	movs	r6, #2
    16ea:	b.n	16ba <breakTime(long long, tmElements_t&)+0x10a>
  days -= LEAP_YEAR(year) ? 366 : 365;
    16ec:	ldr	r0, [pc, #128]	; (1770 <breakTime(long long, tmElements_t&)+0x1c0>)
    16ee:	cmp.w	r0, r1, ror #4
    16f2:	bcc.n	1702 <breakTime(long long, tmElements_t&)+0x152>
  time  -= days; // now it is days in this year, starting at 0
    16f4:	subs	r3, r4, r3
    16f6:	add.w	r1, r3, #366	; 0x16e
    if (time >= monthLength) {
    16fa:	cmp	r1, #30
    16fc:	bhi.n	16de <breakTime(long long, tmElements_t&)+0x12e>
    16fe:	mov	r3, r1
    1700:	b.n	1714 <breakTime(long long, tmElements_t&)+0x164>
  time  -= days; // now it is days in this year, starting at 0
    1702:	subs	r3, r4, r3
    1704:	addw	r1, r3, #365	; 0x16d
    if (time >= monthLength) {
    1708:	cmp	r1, #30
    170a:	bhi.n	1662 <breakTime(long long, tmElements_t&)+0xb2>
    170c:	mov	r3, r1
    170e:	b.n	1714 <breakTime(long long, tmElements_t&)+0x164>
  time  -= days; // now it is days in this year, starting at 0
    1710:	mov	r3, r4
  for (month=0; month<12; month++) {
    1712:	movs	r6, #0
    1714:	adds	r6, #1
  tm.Day = time + 1;     // day of month
    1716:	adds	r3, #1
  tm.Month = month + 1;  // jan is month 1  
    1718:	strb	r6, [r2, #5]
  tm.Day = time + 1;     // day of month
    171a:	strb	r3, [r2, #4]
}
    171c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (time >= monthLength) {
    1720:	mov	r3, r1
    1722:	movs	r6, #5
    1724:	b.n	1714 <breakTime(long long, tmElements_t&)+0x164>
    1726:	mov	r3, r1
    1728:	movs	r6, #11
    172a:	b.n	1714 <breakTime(long long, tmElements_t&)+0x164>
    172c:	mov	r3, r1
    172e:	movs	r6, #2
    1730:	b.n	1714 <breakTime(long long, tmElements_t&)+0x164>
    1732:	mov	r3, r1
    1734:	movs	r6, #3
    1736:	b.n	1714 <breakTime(long long, tmElements_t&)+0x164>
    1738:	mov	r3, r1
    173a:	movs	r6, #4
    173c:	b.n	1714 <breakTime(long long, tmElements_t&)+0x164>
    173e:	mov	r3, r1
    1740:	movs	r6, #6
    1742:	b.n	1714 <breakTime(long long, tmElements_t&)+0x164>
    1744:	mov	r3, r1
    1746:	movs	r6, #7
    1748:	b.n	1714 <breakTime(long long, tmElements_t&)+0x164>
    174a:	mov	r3, r1
    174c:	movs	r6, #8
    174e:	b.n	1714 <breakTime(long long, tmElements_t&)+0x164>
    1750:	mov	r3, r1
    1752:	movs	r6, #9
    1754:	b.n	1714 <breakTime(long long, tmElements_t&)+0x164>
    1756:	mov	r3, r1
    1758:	movs	r6, #10
    175a:	b.n	1714 <breakTime(long long, tmElements_t&)+0x164>
  time  -= days; // now it is days in this year, starting at 0
    175c:	mov	r3, r4
    175e:	b.n	1714 <breakTime(long long, tmElements_t&)+0x164>
    1760:	.word	0x88888889
    1764:	.word	0xaaaaaaab
    1768:	.word	0x24924925
    176c:	.word	0xc28f5c29
    1770:	.word	0x00a3d70a
    1774:	.word	0x028f5c28

00001778 <now()>:
#ifdef TIME_DRIFT_INFO   // define this to get drift data
time_t sysUnsyncedTime = 0; // the time sysTime unadjusted by sync  
#endif


time_t now() {
    1778:	push	{r3, r4, r5, r6, r7, lr}
	return systick_millis_count;
    177a:	ldr	r4, [pc, #116]	; (17f0 <now()+0x78>)
	// calculate number of seconds passed since last call to now()
  while (millis() - prevMillis >= 1000) {
    177c:	ldr	r5, [pc, #116]	; (17f4 <now()+0x7c>)
    177e:	ldr	r3, [r4, #0]
    1780:	ldr	r2, [r5, #0]
    1782:	ldr	r6, [pc, #116]	; (17f8 <now()+0x80>)
    1784:	subs	r3, r3, r2
    1786:	cmp.w	r3, #1000	; 0x3e8
    178a:	bcc.n	17ec <now()+0x74>
    178c:	ldr	r1, [r6, #0]
    178e:	adds	r1, #1
    1790:	ldr	r3, [r4, #0]
		// millis() and prevMillis are both unsigned ints thus the subtraction will always be the absolute value of the difference
    sysTime++;
    prevMillis += 1000;	
    1792:	add.w	r2, r2, #1000	; 0x3e8
    1796:	mov	r0, r1
  while (millis() - prevMillis >= 1000) {
    1798:	adds	r1, #1
    179a:	subs	r3, r3, r2
    179c:	cmp.w	r3, #1000	; 0x3e8
    17a0:	bcs.n	1790 <now()+0x18>
    17a2:	str	r0, [r6, #0]
    17a4:	str	r2, [r5, #0]
#ifdef TIME_DRIFT_INFO
    sysUnsyncedTime++; // this can be compared to the synced time to measure long term drift     
#endif
  }
  if (nextSyncTime <= sysTime) {
    17a6:	ldr	r7, [pc, #84]	; (17fc <now()+0x84>)
    17a8:	ldr	r3, [r7, #0]
    17aa:	cmp	r3, r0
    17ac:	bhi.n	17ce <now()+0x56>
    if (getTimePtr != 0) {
    17ae:	ldr	r3, [pc, #80]	; (1800 <now()+0x88>)
    17b0:	ldr	r3, [r3, #0]
    17b2:	cbz	r3, 17ce <now()+0x56>
      time_t t = getTimePtr();
    17b4:	blx	r3
      if (t != 0) {
    17b6:	orrs	r1, r0
    17b8:	beq.n	17d2 <now()+0x5a>
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
    17ba:	ldr	r3, [pc, #72]	; (1804 <now()+0x8c>)
    17bc:	ldr	r2, [r4, #0]
    17be:	ldr	r3, [r3, #0]
  Status = timeSet;
  prevMillis = millis();  // restart counting from now (thanks to Korman for this fix)
    17c0:	str	r2, [r5, #0]
  Status = timeSet;
    17c2:	movs	r2, #2
  nextSyncTime = (uint32_t)t + syncInterval;
    17c4:	add	r3, r0
  sysTime = (uint32_t)t;  
    17c6:	str	r0, [r6, #0]
  nextSyncTime = (uint32_t)t + syncInterval;
    17c8:	str	r3, [r7, #0]
  Status = timeSet;
    17ca:	ldr	r3, [pc, #60]	; (1808 <now()+0x90>)
    17cc:	strb	r2, [r3, #0]
}
    17ce:	movs	r1, #0
    17d0:	pop	{r3, r4, r5, r6, r7, pc}
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    17d2:	ldr	r1, [pc, #52]	; (1808 <now()+0x90>)
        nextSyncTime = sysTime + syncInterval;
    17d4:	ldr	r3, [pc, #44]	; (1804 <now()+0x8c>)
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    17d6:	ldrb	r2, [r1, #0]
        nextSyncTime = sysTime + syncInterval;
    17d8:	ldr	r0, [r6, #0]
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    17da:	subs	r2, #0
        nextSyncTime = sysTime + syncInterval;
    17dc:	ldr	r3, [r3, #0]
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    17de:	it	ne
    17e0:	movne	r2, #1
        nextSyncTime = sysTime + syncInterval;
    17e2:	add	r3, r0
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    17e4:	strb	r2, [r1, #0]
}
    17e6:	movs	r1, #0
        nextSyncTime = sysTime + syncInterval;
    17e8:	str	r3, [r7, #0]
}
    17ea:	pop	{r3, r4, r5, r6, r7, pc}
    17ec:	ldr	r0, [r6, #0]
    17ee:	b.n	17a6 <now()+0x2e>
    17f0:	.word	0x2001598c
    17f4:	.word	0x2000668c
    17f8:	.word	0x20007710
    17fc:	.word	0x20006694
    1800:	.word	0x20015860
    1804:	.word	0x20001c24
    1808:	.word	0x20015d12

0000180c <second()>:
int second() {
    180c:	push	{r4, r5, r6, lr}
  if (t != cacheTime) {
    180e:	ldr	r6, [pc, #36]	; (1834 <second()+0x28>)
  return second(now()); 
    1810:	bl	1778 <now()>
  if (t != cacheTime) {
    1814:	ldrd	r2, r3, [r6]
    1818:	cmp	r1, r3
    181a:	it	eq
    181c:	cmpeq	r0, r2
    181e:	beq.n	182e <second()+0x22>
    1820:	mov	r5, r0
    1822:	mov	r4, r1
    breakTime(t, tm); 
    1824:	ldr	r2, [pc, #16]	; (1838 <second()+0x2c>)
    1826:	bl	15b0 <breakTime(long long, tmElements_t&)>
    cacheTime = t; 
    182a:	strd	r5, r4, [r6]
  return tm.Second;
    182e:	ldr	r3, [pc, #8]	; (1838 <second()+0x2c>)
}
    1830:	ldrb	r0, [r3, #0]
    1832:	pop	{r4, r5, r6, pc}
    1834:	.word	0x20005cf8
    1838:	.word	0x20007298

0000183c <setSyncProvider(long long (*)())>:
  return Status;
}

void setSyncProvider( getExternalTime getTimeFunction){
  getTimePtr = getTimeFunction;  
  nextSyncTime = sysTime;
    183c:	ldr	r2, [pc, #12]	; (184c <setSyncProvider(long long (*)())+0x10>)
  getTimePtr = getTimeFunction;  
    183e:	ldr	r1, [pc, #16]	; (1850 <setSyncProvider(long long (*)())+0x14>)
  nextSyncTime = sysTime;
    1840:	ldr	r3, [pc, #16]	; (1854 <setSyncProvider(long long (*)())+0x18>)
    1842:	ldr	r2, [r2, #0]
  getTimePtr = getTimeFunction;  
    1844:	str	r0, [r1, #0]
  nextSyncTime = sysTime;
    1846:	str	r2, [r3, #0]
  now(); // this will sync the clock
    1848:	b.w	1778 <now()>
    184c:	.word	0x20007710
    1850:	.word	0x20015860
    1854:	.word	0x20006694

00001858 <TwoWire::available()>:
	}
	uint8_t requestFrom(uint8_t addr, uint8_t qty, uint32_t iaddr, uint8_t n, uint8_t stop);
	virtual size_t write(uint8_t data);
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
    1858:	ldrb.w	r2, [r0, #163]	; 0xa3
    185c:	ldrb.w	r0, [r0, #162]	; 0xa2
	}
    1860:	subs	r0, r2, r0
    1862:	bx	lr

00001864 <TwoWire::read()>:
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    1864:	ldrb.w	r3, [r0, #162]	; 0xa2
    1868:	ldrb.w	r2, [r0, #163]	; 0xa3
    186c:	cmp	r2, r3
    186e:	bls.n	187c <TwoWire::read()+0x18>
		return rxBuffer[rxBufferIndex++];
    1870:	adds	r2, r3, #1
    1872:	add	r3, r0
    1874:	strb.w	r2, [r0, #162]	; 0xa2
    1878:	ldrb	r0, [r3, #26]
    187a:	bx	lr
		if (rxBufferIndex >= rxBufferLength) return -1;
    187c:	mov.w	r0, #4294967295
	}
    1880:	bx	lr
    1882:	nop

00001884 <TwoWire::peek()>:
	virtual int peek(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    1884:	ldrb.w	r3, [r0, #162]	; 0xa2
    1888:	ldrb.w	r2, [r0, #163]	; 0xa3
    188c:	cmp	r2, r3
    188e:	bls.n	1896 <TwoWire::peek()+0x12>
		return rxBuffer[rxBufferIndex];
    1890:	add	r0, r3
    1892:	ldrb	r0, [r0, #26]
    1894:	bx	lr
		if (rxBufferIndex >= rxBufferLength) return -1;
    1896:	mov.w	r0, #4294967295
	}
    189a:	bx	lr

0000189c <TwoWire::flush()>:
	virtual void flush(void) {
	}
    189c:	bx	lr
    189e:	nop

000018a0 <TwoWire::write(unsigned char)>:
{
}


size_t TwoWire::write(uint8_t data)
{
    18a0:	mov	r3, r0
	if (transmitting || slave_mode) {
    18a2:	ldrh.w	r0, [r0, #304]	; 0x130
    18a6:	cbz	r0, 18c8 <TwoWire::write(unsigned char)+0x28>
		if (txBufferLength >= BUFFER_LENGTH+1) {
    18a8:	ldrb.w	r2, [r3, #303]	; 0x12f
    18ac:	cmp	r2, #136	; 0x88
    18ae:	bls.n	18b8 <TwoWire::write(unsigned char)+0x18>
	// format warnings are too pedantic - disable until newer toolchain offers better...
	// https://forum.pjrc.com/threads/62473?p=256873&viewfull=1#post256873
	// int printf(const char *format, ...) __attribute__ ((format (printf, 2, 3)));

  protected:
	void setWriteError(int err = 1) { write_error = err; }
    18b0:	movs	r2, #1
			setWriteError();
			return 0;
    18b2:	movs	r0, #0
    18b4:	strb	r2, [r3, #4]
    18b6:	bx	lr
		}
		txBuffer[txBufferLength++] = data;
    18b8:	add.w	ip, r2, #1
		return 1;
    18bc:	movs	r0, #1
		txBuffer[txBufferLength++] = data;
    18be:	add	r2, r3
    18c0:	strb.w	ip, [r3, #303]	; 0x12f
    18c4:	strb.w	r1, [r2, #165]	; 0xa5
	}
	return 0;
}
    18c8:	bx	lr
    18ca:	nop

000018cc <TwoWire::write(unsigned char const*, unsigned int)>:

size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
    18cc:	push	{r3, r4, r5, lr}
	if (transmitting || slave_mode) {
    18ce:	ldrh.w	r4, [r0, #304]	; 0x130
    18d2:	cbnz	r4, 18d8 <TwoWire::write(unsigned char const*, unsigned int)+0xc>
		memcpy(txBuffer + txBufferLength, data, quantity);
		txBufferLength += quantity;
		return quantity;
	}
	return 0;
}
    18d4:	mov	r0, r4
    18d6:	pop	{r3, r4, r5, pc}
		size_t avail = BUFFER_LENGTH+1 - txBufferLength;
    18d8:	ldrb.w	r3, [r0, #303]	; 0x12f
    18dc:	mov	r5, r0
    18de:	rsb	r4, r3, #137	; 0x89
		if (quantity > avail) {
    18e2:	cmp	r2, r4
    18e4:	bhi.n	1902 <TwoWire::write(unsigned char const*, unsigned int)+0x36>
    18e6:	mov	r4, r2
		memcpy(txBuffer + txBufferLength, data, quantity);
    18e8:	add.w	r0, r5, #165	; 0xa5
    18ec:	mov	r2, r4
    18ee:	add	r0, r3
    18f0:	bl	b09c <memcpy>
		txBufferLength += quantity;
    18f4:	ldrb.w	r3, [r5, #303]	; 0x12f
}
    18f8:	mov	r0, r4
		txBufferLength += quantity;
    18fa:	add	r3, r4
    18fc:	strb.w	r3, [r5, #303]	; 0x12f
}
    1900:	pop	{r3, r4, r5, pc}
    1902:	movs	r2, #1
    1904:	strb	r2, [r0, #4]
    1906:	b.n	18e8 <TwoWire::write(unsigned char const*, unsigned int)+0x1c>

00001908 <lpi2c4_isr()>:
void lpi2c4_isr(void) { Wire1.isr(); }
void lpi2c2_isr(void) { Wire3.isr(); }
#else
void lpi2c1_isr(void) { Wire.isr(); }
void lpi2c3_isr(void) { Wire1.isr(); }
void lpi2c4_isr(void) { Wire2.isr(); }
    1908:	push	{r4, r5, r6, lr}
	uint32_t status = port->SSR;
    190a:	ldr	r4, [pc, #168]	; (19b4 <lpi2c4_isr()+0xac>)
    190c:	ldr	r3, [r4, #16]
    190e:	ldr.w	r5, [r3, #276]	; 0x114
	if (w1c_bits) port->SSR = w1c_bits;
    1912:	ands.w	r2, r5, #3840	; 0xf00
    1916:	beq.n	191c <lpi2c4_isr()+0x14>
    1918:	str.w	r2, [r3, #276]	; 0x114
	if (status & LPI2C_SSR_RDF) { // Receive Data Flag
    191c:	lsls	r6, r5, #30
    191e:	bpl.n	1938 <lpi2c4_isr()+0x30>
		int rx = port->SRDR;
    1920:	ldr.w	r1, [r3, #368]	; 0x170
		if (rx & 0x8000) {
    1924:	lsls	r0, r1, #16
    1926:	bpl.n	19a6 <lpi2c4_isr()+0x9e>
			rxBufferIndex = 0;
    1928:	movs	r2, #0
    192a:	movs	r0, #1
    192c:	strh.w	r2, [r4, #162]	; 0xa2
			rxBuffer[rxBufferLength++] = rx & 255;
    1930:	add	r2, r4
    1932:	strb.w	r0, [r4, #163]	; 0xa3
    1936:	strb	r1, [r2, #26]
	if (status & LPI2C_SSR_TDF) { // Transmit Data Flag
    1938:	lsls	r2, r5, #31
    193a:	bpl.n	195e <lpi2c4_isr()+0x56>
		if (!transmitting) {
    193c:	ldrb.w	r6, [r4, #304]	; 0x130
    1940:	cbz	r6, 1980 <lpi2c4_isr()+0x78>
		if (txBufferIndex < txBufferLength) {
    1942:	ldrb.w	r6, [r4, #302]	; 0x12e
    1946:	ldrb.w	r2, [r4, #303]	; 0x12f
    194a:	cmp	r2, r6
    194c:	bls.n	199e <lpi2c4_isr()+0x96>
			port->STDR = txBuffer[txBufferIndex++];
    194e:	adds	r1, r6, #1
    1950:	add	r6, r4
    1952:	ldrb.w	r2, [r6, #165]	; 0xa5
    1956:	strb.w	r1, [r4, #302]	; 0x12e
    195a:	str.w	r2, [r3, #352]	; 0x160
	if (status & LPI2C_SSR_SDF) { // Stop
    195e:	lsls	r3, r5, #22
    1960:	bpl.n	197e <lpi2c4_isr()+0x76>
		if (rxBufferLength > 0 && user_onReceive != nullptr) {
    1962:	ldrb.w	r0, [r4, #163]	; 0xa3
    1966:	cbz	r0, 1970 <lpi2c4_isr()+0x68>
    1968:	ldr.w	r3, [r4, #316]	; 0x13c
    196c:	cbz	r3, 1970 <lpi2c4_isr()+0x68>
			(*user_onReceive)(rxBufferLength);
    196e:	blx	r3
		rxBufferIndex = 0;
    1970:	movs	r3, #0
    1972:	strh.w	r3, [r4, #162]	; 0xa2
		txBufferIndex = 0;
    1976:	strh.w	r3, [r4, #302]	; 0x12e
		transmitting = 0;
    197a:	strb.w	r3, [r4, #304]	; 0x130
void lpi2c4_isr(void) { Wire2.isr(); }
    197e:	pop	{r4, r5, r6, pc}
			if (user_onRequest != nullptr) {
    1980:	ldr.w	r2, [r4, #312]	; 0x138
    1984:	cbz	r2, 198a <lpi2c4_isr()+0x82>
				(*user_onRequest)();
    1986:	blx	r2
			port->STDR = txBuffer[txBufferIndex++];
    1988:	ldr	r3, [r4, #16]
			txBufferIndex = 0;
    198a:	movs	r2, #0
    198c:	strb.w	r2, [r4, #302]	; 0x12e
			transmitting = 1;
    1990:	movs	r2, #1
    1992:	strb.w	r2, [r4, #304]	; 0x130
		if (txBufferIndex < txBufferLength) {
    1996:	ldrb.w	r2, [r4, #303]	; 0x12f
    199a:	cmp	r2, r6
    199c:	bhi.n	194e <lpi2c4_isr()+0x46>
			port->STDR = 0;
    199e:	movs	r2, #0
    19a0:	str.w	r2, [r3, #352]	; 0x160
    19a4:	b.n	195e <lpi2c4_isr()+0x56>
		if (rxBufferLength < BUFFER_LENGTH) {
    19a6:	ldrb.w	r2, [r4, #163]	; 0xa3
    19aa:	cmp	r2, #135	; 0x87
    19ac:	bhi.n	1938 <lpi2c4_isr()+0x30>
			rxBuffer[rxBufferLength++] = rx & 255;
    19ae:	adds	r0, r2, #1
    19b0:	uxtb	r0, r0
    19b2:	b.n	1930 <lpi2c4_isr()+0x28>
    19b4:	.word	0x20006548

000019b8 <lpi2c1_isr()>:
void lpi2c1_isr(void) { Wire.isr(); }
    19b8:	push	{r4, r5, r6, lr}
	uint32_t status = port->SSR;
    19ba:	ldr	r4, [pc, #168]	; (1a64 <lpi2c1_isr()+0xac>)
    19bc:	ldr	r3, [r4, #16]
    19be:	ldr.w	r5, [r3, #276]	; 0x114
	if (w1c_bits) port->SSR = w1c_bits;
    19c2:	ands.w	r2, r5, #3840	; 0xf00
    19c6:	beq.n	19cc <lpi2c1_isr()+0x14>
    19c8:	str.w	r2, [r3, #276]	; 0x114
	if (status & LPI2C_SSR_RDF) { // Receive Data Flag
    19cc:	lsls	r6, r5, #30
    19ce:	bpl.n	19e8 <lpi2c1_isr()+0x30>
		int rx = port->SRDR;
    19d0:	ldr.w	r1, [r3, #368]	; 0x170
		if (rx & 0x8000) {
    19d4:	lsls	r0, r1, #16
    19d6:	bpl.n	1a56 <lpi2c1_isr()+0x9e>
			rxBufferIndex = 0;
    19d8:	movs	r2, #0
    19da:	movs	r0, #1
    19dc:	strh.w	r2, [r4, #162]	; 0xa2
			rxBuffer[rxBufferLength++] = rx & 255;
    19e0:	add	r2, r4
    19e2:	strb.w	r0, [r4, #163]	; 0xa3
    19e6:	strb	r1, [r2, #26]
	if (status & LPI2C_SSR_TDF) { // Transmit Data Flag
    19e8:	lsls	r2, r5, #31
    19ea:	bpl.n	1a0e <lpi2c1_isr()+0x56>
		if (!transmitting) {
    19ec:	ldrb.w	r6, [r4, #304]	; 0x130
    19f0:	cbz	r6, 1a30 <lpi2c1_isr()+0x78>
		if (txBufferIndex < txBufferLength) {
    19f2:	ldrb.w	r6, [r4, #302]	; 0x12e
    19f6:	ldrb.w	r2, [r4, #303]	; 0x12f
    19fa:	cmp	r2, r6
    19fc:	bls.n	1a4e <lpi2c1_isr()+0x96>
			port->STDR = txBuffer[txBufferIndex++];
    19fe:	adds	r1, r6, #1
    1a00:	add	r6, r4
    1a02:	ldrb.w	r2, [r6, #165]	; 0xa5
    1a06:	strb.w	r1, [r4, #302]	; 0x12e
    1a0a:	str.w	r2, [r3, #352]	; 0x160
	if (status & LPI2C_SSR_SDF) { // Stop
    1a0e:	lsls	r3, r5, #22
    1a10:	bpl.n	1a2e <lpi2c1_isr()+0x76>
		if (rxBufferLength > 0 && user_onReceive != nullptr) {
    1a12:	ldrb.w	r0, [r4, #163]	; 0xa3
    1a16:	cbz	r0, 1a20 <lpi2c1_isr()+0x68>
    1a18:	ldr.w	r3, [r4, #316]	; 0x13c
    1a1c:	cbz	r3, 1a20 <lpi2c1_isr()+0x68>
			(*user_onReceive)(rxBufferLength);
    1a1e:	blx	r3
		rxBufferIndex = 0;
    1a20:	movs	r3, #0
    1a22:	strh.w	r3, [r4, #162]	; 0xa2
		txBufferIndex = 0;
    1a26:	strh.w	r3, [r4, #302]	; 0x12e
		transmitting = 0;
    1a2a:	strb.w	r3, [r4, #304]	; 0x130
void lpi2c1_isr(void) { Wire.isr(); }
    1a2e:	pop	{r4, r5, r6, pc}
			if (user_onRequest != nullptr) {
    1a30:	ldr.w	r2, [r4, #312]	; 0x138
    1a34:	cbz	r2, 1a3a <lpi2c1_isr()+0x82>
				(*user_onRequest)();
    1a36:	blx	r2
			port->STDR = txBuffer[txBufferIndex++];
    1a38:	ldr	r3, [r4, #16]
			txBufferIndex = 0;
    1a3a:	movs	r2, #0
    1a3c:	strb.w	r2, [r4, #302]	; 0x12e
			transmitting = 1;
    1a40:	movs	r2, #1
    1a42:	strb.w	r2, [r4, #304]	; 0x130
		if (txBufferIndex < txBufferLength) {
    1a46:	ldrb.w	r2, [r4, #303]	; 0x12f
    1a4a:	cmp	r2, r6
    1a4c:	bhi.n	19fe <lpi2c1_isr()+0x46>
			port->STDR = 0;
    1a4e:	movs	r2, #0
    1a50:	str.w	r2, [r3, #352]	; 0x160
    1a54:	b.n	1a0e <lpi2c1_isr()+0x56>
		if (rxBufferLength < BUFFER_LENGTH) {
    1a56:	ldrb.w	r2, [r4, #163]	; 0xa3
    1a5a:	cmp	r2, #135	; 0x87
    1a5c:	bhi.n	19e8 <lpi2c1_isr()+0x30>
			rxBuffer[rxBufferLength++] = rx & 255;
    1a5e:	adds	r0, r2, #1
    1a60:	uxtb	r0, r0
    1a62:	b.n	19e0 <lpi2c1_isr()+0x28>
    1a64:	.word	0x200062c8

00001a68 <lpi2c3_isr()>:
void lpi2c3_isr(void) { Wire1.isr(); }
    1a68:	push	{r4, r5, r6, lr}
	uint32_t status = port->SSR;
    1a6a:	ldr	r4, [pc, #168]	; (1b14 <lpi2c3_isr()+0xac>)
    1a6c:	ldr	r3, [r4, #16]
    1a6e:	ldr.w	r5, [r3, #276]	; 0x114
	if (w1c_bits) port->SSR = w1c_bits;
    1a72:	ands.w	r2, r5, #3840	; 0xf00
    1a76:	beq.n	1a7c <lpi2c3_isr()+0x14>
    1a78:	str.w	r2, [r3, #276]	; 0x114
	if (status & LPI2C_SSR_RDF) { // Receive Data Flag
    1a7c:	lsls	r6, r5, #30
    1a7e:	bpl.n	1a98 <lpi2c3_isr()+0x30>
		int rx = port->SRDR;
    1a80:	ldr.w	r1, [r3, #368]	; 0x170
		if (rx & 0x8000) {
    1a84:	lsls	r0, r1, #16
    1a86:	bpl.n	1b06 <lpi2c3_isr()+0x9e>
			rxBufferIndex = 0;
    1a88:	movs	r2, #0
    1a8a:	movs	r0, #1
    1a8c:	strh.w	r2, [r4, #162]	; 0xa2
			rxBuffer[rxBufferLength++] = rx & 255;
    1a90:	add	r2, r4
    1a92:	strb.w	r0, [r4, #163]	; 0xa3
    1a96:	strb	r1, [r2, #26]
	if (status & LPI2C_SSR_TDF) { // Transmit Data Flag
    1a98:	lsls	r2, r5, #31
    1a9a:	bpl.n	1abe <lpi2c3_isr()+0x56>
		if (!transmitting) {
    1a9c:	ldrb.w	r6, [r4, #304]	; 0x130
    1aa0:	cbz	r6, 1ae0 <lpi2c3_isr()+0x78>
		if (txBufferIndex < txBufferLength) {
    1aa2:	ldrb.w	r6, [r4, #302]	; 0x12e
    1aa6:	ldrb.w	r2, [r4, #303]	; 0x12f
    1aaa:	cmp	r2, r6
    1aac:	bls.n	1afe <lpi2c3_isr()+0x96>
			port->STDR = txBuffer[txBufferIndex++];
    1aae:	adds	r1, r6, #1
    1ab0:	add	r6, r4
    1ab2:	ldrb.w	r2, [r6, #165]	; 0xa5
    1ab6:	strb.w	r1, [r4, #302]	; 0x12e
    1aba:	str.w	r2, [r3, #352]	; 0x160
	if (status & LPI2C_SSR_SDF) { // Stop
    1abe:	lsls	r3, r5, #22
    1ac0:	bpl.n	1ade <lpi2c3_isr()+0x76>
		if (rxBufferLength > 0 && user_onReceive != nullptr) {
    1ac2:	ldrb.w	r0, [r4, #163]	; 0xa3
    1ac6:	cbz	r0, 1ad0 <lpi2c3_isr()+0x68>
    1ac8:	ldr.w	r3, [r4, #316]	; 0x13c
    1acc:	cbz	r3, 1ad0 <lpi2c3_isr()+0x68>
			(*user_onReceive)(rxBufferLength);
    1ace:	blx	r3
		rxBufferIndex = 0;
    1ad0:	movs	r3, #0
    1ad2:	strh.w	r3, [r4, #162]	; 0xa2
		txBufferIndex = 0;
    1ad6:	strh.w	r3, [r4, #302]	; 0x12e
		transmitting = 0;
    1ada:	strb.w	r3, [r4, #304]	; 0x130
void lpi2c3_isr(void) { Wire1.isr(); }
    1ade:	pop	{r4, r5, r6, pc}
			if (user_onRequest != nullptr) {
    1ae0:	ldr.w	r2, [r4, #312]	; 0x138
    1ae4:	cbz	r2, 1aea <lpi2c3_isr()+0x82>
				(*user_onRequest)();
    1ae6:	blx	r2
			port->STDR = txBuffer[txBufferIndex++];
    1ae8:	ldr	r3, [r4, #16]
			txBufferIndex = 0;
    1aea:	movs	r2, #0
    1aec:	strb.w	r2, [r4, #302]	; 0x12e
			transmitting = 1;
    1af0:	movs	r2, #1
    1af2:	strb.w	r2, [r4, #304]	; 0x130
		if (txBufferIndex < txBufferLength) {
    1af6:	ldrb.w	r2, [r4, #303]	; 0x12f
    1afa:	cmp	r2, r6
    1afc:	bhi.n	1aae <lpi2c3_isr()+0x46>
			port->STDR = 0;
    1afe:	movs	r2, #0
    1b00:	str.w	r2, [r3, #352]	; 0x160
    1b04:	b.n	1abe <lpi2c3_isr()+0x56>
		if (rxBufferLength < BUFFER_LENGTH) {
    1b06:	ldrb.w	r2, [r4, #163]	; 0xa3
    1b0a:	cmp	r2, #135	; 0x87
    1b0c:	bhi.n	1a98 <lpi2c3_isr()+0x30>
			rxBuffer[rxBufferLength++] = rx & 255;
    1b0e:	adds	r0, r2, #1
    1b10:	uxtb	r0, r0
    1b12:	b.n	1a90 <lpi2c3_isr()+0x28>
    1b14:	.word	0x20006408

00001b18 <_GLOBAL__sub_I__ZN7TwoWire5beginEv>:
	}
	port->MCCR1 = port->MCCR0;
	port->MCFGR0 = 0;
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
	port->MCR = LPI2C_MCR_MEN;
}
    1b18:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	constexpr Print() : write_error(0) {}
    1b1c:	movs	r4, #0
    1b1e:	ldr	r5, [pc, #236]	; (1c0c <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0xf4>)
		: port(myport), hardware(myhardware) {
    1b20:	ldr	r3, [pc, #236]	; (1c10 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0xf8>)
    1b22:	mov.w	fp, #1000	; 0x3e8
    1b26:	ldr.w	sl, [pc, #256]	; 1c28 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x110>
    1b2a:	mov.w	r9, #136	; 0x88
    1b2e:	ldr	r7, [pc, #228]	; (1c14 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0xfc>)
    1b30:	mov.w	r8, #137	; 0x89
    1b34:	str	r3, [r5, #16]
    1b36:	mov	r1, r4
    1b38:	str	r7, [r5, #20]
    1b3a:	mov	r2, r9
    1b3c:	add.w	r0, r5, #26
    1b40:	strb	r4, [r5, #4]
    1b42:	str.w	fp, [r5, #8]
    1b46:	strb	r4, [r5, #12]
    1b48:	str.w	sl, [r5]
    1b4c:	strh	r4, [r5, #24]
    1b4e:	bl	10104 <memset>
    1b52:	mov	r2, r8
    1b54:	mov	r1, r4
    1b56:	add.w	r0, r5, #165	; 0xa5
    1b5a:	strh.w	r4, [r5, #162]	; 0xa2
    1b5e:	strb.w	r4, [r5, #164]	; 0xa4
    1b62:	bl	10104 <memset>
    1b66:	ldr	r6, [pc, #176]	; (1c18 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x100>)
    1b68:	ldr	r3, [pc, #176]	; (1c1c <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x104>)
    1b6a:	mov	r2, r9
    1b6c:	mov	r1, r4
    1b6e:	str.w	r4, [r5, #302]	; 0x12e
    1b72:	str	r3, [r6, #16]
    1b74:	add.w	r3, r7, #80	; 0x50
    1b78:	strh.w	r4, [r5, #306]	; 0x132
    1b7c:	add.w	r0, r6, #26
    1b80:	strb.w	r4, [r5, #308]	; 0x134
    1b84:	adds	r7, #160	; 0xa0
    1b86:	str	r3, [r6, #20]
    1b88:	strb	r4, [r6, #4]
    1b8a:	str.w	fp, [r6, #8]
    1b8e:	strb	r4, [r6, #12]
    1b90:	str.w	sl, [r6]
    1b94:	strh	r4, [r6, #24]
    1b96:	strd	r4, r4, [r5, #312]	; 0x138
    1b9a:	bl	10104 <memset>
    1b9e:	mov	r2, r8
    1ba0:	mov	r1, r4
    1ba2:	add.w	r0, r6, #165	; 0xa5
    1ba6:	ldr	r5, [pc, #120]	; (1c20 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x108>)
    1ba8:	strh.w	r4, [r6, #162]	; 0xa2
    1bac:	strb.w	r4, [r6, #164]	; 0xa4
    1bb0:	bl	10104 <memset>
    1bb4:	ldr	r3, [pc, #108]	; (1c24 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x10c>)
    1bb6:	mov	r2, r9
    1bb8:	mov	r1, r4
    1bba:	add.w	r0, r5, #26
    1bbe:	str	r3, [r5, #16]
    1bc0:	str.w	fp, [r5, #8]
    1bc4:	str.w	sl, [r5]
    1bc8:	str	r7, [r5, #20]
    1bca:	strb	r4, [r5, #4]
    1bcc:	strb	r4, [r5, #12]
    1bce:	strh	r4, [r5, #24]
    1bd0:	str.w	r4, [r6, #302]	; 0x12e
    1bd4:	strh.w	r4, [r6, #306]	; 0x132
    1bd8:	strb.w	r4, [r6, #308]	; 0x134
    1bdc:	strd	r4, r4, [r6, #312]	; 0x138
    1be0:	bl	10104 <memset>
    1be4:	mov	r2, r8
    1be6:	mov	r1, r4
    1be8:	add.w	r0, r5, #165	; 0xa5
    1bec:	strh.w	r4, [r5, #162]	; 0xa2
    1bf0:	strb.w	r4, [r5, #164]	; 0xa4
    1bf4:	bl	10104 <memset>
    1bf8:	str.w	r4, [r5, #302]	; 0x12e
    1bfc:	strh.w	r4, [r5, #306]	; 0x132
    1c00:	strb.w	r4, [r5, #308]	; 0x134
    1c04:	strd	r4, r4, [r5, #312]	; 0x138
    1c08:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1c0c:	.word	0x200062c8
    1c10:	.word	0x403f0000
    1c14:	.word	0x600027b4
    1c18:	.word	0x20006408
    1c1c:	.word	0x403f8000
    1c20:	.word	0x20006548
    1c24:	.word	0x403fc000
    1c28:	.word	0x20000a88

00001c2c <EventResponder::triggerEvent(int, void*)>:
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    1c2c:	ldrb.w	ip, [r0, #28]
		_status = status;
    1c30:	str	r1, [r0, #4]
		if (_type == EventTypeImmediate) {
    1c32:	cmp.w	ip, #2
		_data = data;
    1c36:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    1c38:	bne.n	1c3e <EventResponder::triggerEvent(int, void*)+0x12>
			(*_function)(*this);
    1c3a:	ldr	r3, [r0, #8]
    1c3c:	bx	r3
		} else {
			triggerEventNotImmediate();
    1c3e:	b.w	dba0 <EventResponder::triggerEventNotImmediate()>
    1c42:	nop

00001c44 <_spi_dma_rxISR1()>:

//-------------------------------------------------------------------------
// DMA RX ISR
//-------------------------------------------------------------------------
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
    1c44:	ldr	r3, [pc, #200]	; (1d10 <_spi_dma_rxISR1()+0xcc>)
		DMA_CINT = channel;
    1c46:	ldr	r1, [pc, #204]	; (1d14 <_spi_dma_rxISR1()+0xd0>)
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    1c48:	push	{r4, r5, lr}
	_dmaTX->clearComplete();
    1c4a:	ldrd	r5, r4, [r3, #68]	; 0x44
    1c4e:	ldrb	r0, [r4, #4]
    1c50:	strb	r0, [r1, #31]
	_dmaRX->clearComplete();

	if (_dma_count_remaining) {
    1c52:	ldr	r2, [r3, #64]	; 0x40
	bool complete(void) {
		if (TCD->CSR & DMA_TCD_CSR_DONE) return true;
		return false;
	}
	void clearComplete(void) {
		DMA_CDNE = channel;
    1c54:	ldrb.w	ip, [r5, #4]
    1c58:	strb.w	ip, [r1, #28]
    1c5c:	strb	r0, [r1, #28]
    1c5e:	cbz	r2, 1c76 <_spi_dma_rxISR1()+0x32>
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > MAX_DMA_COUNT) {
    1c60:	cmp.w	r2, #32768	; 0x8000
    1c64:	bcc.n	1cae <_spi_dma_rxISR1()+0x6a>
			_dma_count_remaining -= MAX_DMA_COUNT;
    1c66:	ldr	r1, [pc, #176]	; (1d18 <_spi_dma_rxISR1()+0xd4>)
    1c68:	add	r1, r2
		DMA_SERQ = channel;
    1c6a:	ldr	r2, [pc, #168]	; (1d14 <_spi_dma_rxISR1()+0xd0>)
    1c6c:	str	r1, [r3, #64]	; 0x40
    1c6e:	strb	r0, [r2, #27]
    1c70:	strb.w	ip, [r2, #27]
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    1c74:	pop	{r4, r5, pc}
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    1c76:	ldr	r1, [r3, #0]
		}
		_dmaRX->enable();
		_dmaTX->enable();
	} else {

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    1c78:	movs	r4, #15

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    1c7a:	ldr	r0, [r3, #76]	; 0x4c
		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    1c7c:	str	r4, [r1, #88]	; 0x58
		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    1c7e:	movw	r4, #769	; 0x301
 		port().DER = 0;		// DMA no longer doing TX (or RX)
    1c82:	str	r2, [r1, #28]
		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    1c84:	str	r4, [r1, #16]
		port().SR = 0x3f00;	// clear out all of the other status...
    1c86:	mov.w	r4, #16128	; 0x3f00
    1c8a:	str	r4, [r1, #20]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    1c8c:	movs	r1, #3
		_dma_event_responder->triggerEvent();
    1c8e:	ldr	r4, [r0, #0]
    1c90:	ldr	r4, [r4, #0]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    1c92:	strb.w	r1, [r3, #61]	; 0x3d
		_dma_event_responder->triggerEvent();
    1c96:	ldr	r3, [pc, #132]	; (1d1c <_spi_dma_rxISR1()+0xd8>)
    1c98:	cmp	r4, r3
    1c9a:	bne.n	1cfe <_spi_dma_rxISR1()+0xba>
		if (_type == EventTypeImmediate) {
    1c9c:	ldrb	r3, [r0, #28]
		_status = status;
    1c9e:	str	r2, [r0, #4]
		if (_type == EventTypeImmediate) {
    1ca0:	cmp	r3, #2
		_data = data;
    1ca2:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    1ca4:	bne.n	1d08 <_spi_dma_rxISR1()+0xc4>
			(*_function)(*this);
    1ca6:	ldr	r3, [r0, #8]
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    1ca8:	ldmia.w	sp!, {r4, r5, lr}
    1cac:	bx	r3
	DMABaseClass::TCD_t *tcd = dmac->TCD;
    1cae:	ldr	r5, [r5, #0]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    1cb0:	ldrh	r1, [r5, #30]
    1cb2:	lsls	r1, r1, #16
    1cb4:	bmi.n	1cea <_spi_dma_rxISR1()+0xa6>
		tcd->BITER = len & 0x7fff;
    1cb6:	uxth	r2, r2
    1cb8:	strh	r2, [r5, #30]
	DMABaseClass::TCD_t *tcd = dmac->TCD;
    1cba:	ldr	r1, [r4, #0]
	tcd->CITER = tcd->BITER; 
    1cbc:	ldrh	r4, [r5, #30]
    1cbe:	uxth	r4, r4
    1cc0:	strh	r4, [r5, #22]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    1cc2:	ldrh	r4, [r1, #30]
    1cc4:	lsls	r4, r4, #16
    1cc6:	bpl.n	1cd4 <_spi_dma_rxISR1()+0x90>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    1cc8:	ldrh	r4, [r1, #30]
    1cca:	ubfx	r2, r2, #0, #9
    1cce:	and.w	r4, r4, #65024	; 0xfe00
    1cd2:	orrs	r2, r4
    1cd4:	strh	r2, [r1, #30]
	tcd->CITER = tcd->BITER; 
    1cd6:	ldrh	r2, [r1, #30]
    1cd8:	uxth	r2, r2
    1cda:	strh	r2, [r1, #22]
    1cdc:	movs	r1, #0
    1cde:	ldr	r2, [pc, #52]	; (1d14 <_spi_dma_rxISR1()+0xd0>)
			_dma_count_remaining -= MAX_DMA_COUNT;
    1ce0:	str	r1, [r3, #64]	; 0x40
    1ce2:	strb	r0, [r2, #27]
    1ce4:	strb.w	ip, [r2, #27]
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    1ce8:	pop	{r4, r5, pc}
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    1cea:	ldrh	r1, [r5, #30]
    1cec:	ubfx	lr, r2, #0, #9
    1cf0:	uxth	r2, r2
    1cf2:	and.w	r1, r1, #65024	; 0xfe00
    1cf6:	orr.w	r1, r1, lr
    1cfa:	strh	r1, [r5, #30]
    1cfc:	b.n	1cba <_spi_dma_rxISR1()+0x76>
		_dma_event_responder->triggerEvent();
    1cfe:	mov	r3, r4
    1d00:	mov	r1, r2
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    1d02:	ldmia.w	sp!, {r4, r5, lr}
		_dma_event_responder->triggerEvent();
    1d06:	bx	r3
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    1d08:	ldmia.w	sp!, {r4, r5, lr}
			triggerEventNotImmediate();
    1d0c:	b.w	dba0 <EventResponder::triggerEventNotImmediate()>
    1d10:	.word	0x20006228
    1d14:	.word	0x400e8000
    1d18:	.word	0xffff8001
    1d1c:	.word	0x00001c2d

00001d20 <_spi_dma_rxISR0()>:
	_dmaRX->clearInterrupt();
    1d20:	ldr	r3, [pc, #200]	; (1dec <_spi_dma_rxISR0()+0xcc>)
		DMA_CINT = channel;
    1d22:	ldr	r1, [pc, #204]	; (1df0 <_spi_dma_rxISR0()+0xd0>)
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    1d24:	push	{r4, r5, lr}
	_dmaTX->clearComplete();
    1d26:	ldrd	r5, r4, [r3, #68]	; 0x44
    1d2a:	ldrb	r0, [r4, #4]
    1d2c:	strb	r0, [r1, #31]
	if (_dma_count_remaining) {
    1d2e:	ldr	r2, [r3, #64]	; 0x40
		DMA_CDNE = channel;
    1d30:	ldrb.w	ip, [r5, #4]
    1d34:	strb.w	ip, [r1, #28]
    1d38:	strb	r0, [r1, #28]
    1d3a:	cbz	r2, 1d52 <_spi_dma_rxISR0()+0x32>
		if (_dma_count_remaining > MAX_DMA_COUNT) {
    1d3c:	cmp.w	r2, #32768	; 0x8000
    1d40:	bcc.n	1d8a <_spi_dma_rxISR0()+0x6a>
			_dma_count_remaining -= MAX_DMA_COUNT;
    1d42:	ldr	r1, [pc, #176]	; (1df4 <_spi_dma_rxISR0()+0xd4>)
    1d44:	add	r1, r2
		DMA_SERQ = channel;
    1d46:	ldr	r2, [pc, #168]	; (1df0 <_spi_dma_rxISR0()+0xd0>)
    1d48:	str	r1, [r3, #64]	; 0x40
    1d4a:	strb	r0, [r2, #27]
    1d4c:	strb.w	ip, [r2, #27]
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    1d50:	pop	{r4, r5, pc}
    1d52:	ldr	r1, [r3, #0]
		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    1d54:	movs	r4, #15
		_dma_event_responder->triggerEvent();
    1d56:	ldr	r0, [r3, #76]	; 0x4c
		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    1d58:	str	r4, [r1, #88]	; 0x58
		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    1d5a:	movw	r4, #769	; 0x301
 		port().DER = 0;		// DMA no longer doing TX (or RX)
    1d5e:	str	r2, [r1, #28]
		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    1d60:	str	r4, [r1, #16]
		port().SR = 0x3f00;	// clear out all of the other status...
    1d62:	mov.w	r4, #16128	; 0x3f00
    1d66:	str	r4, [r1, #20]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    1d68:	movs	r1, #3
		_dma_event_responder->triggerEvent();
    1d6a:	ldr	r4, [r0, #0]
    1d6c:	ldr	r4, [r4, #0]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    1d6e:	strb.w	r1, [r3, #61]	; 0x3d
		_dma_event_responder->triggerEvent();
    1d72:	ldr	r3, [pc, #132]	; (1df8 <_spi_dma_rxISR0()+0xd8>)
    1d74:	cmp	r4, r3
    1d76:	bne.n	1dda <_spi_dma_rxISR0()+0xba>
		if (_type == EventTypeImmediate) {
    1d78:	ldrb	r3, [r0, #28]
		_status = status;
    1d7a:	str	r2, [r0, #4]
		if (_type == EventTypeImmediate) {
    1d7c:	cmp	r3, #2
		_data = data;
    1d7e:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    1d80:	bne.n	1de4 <_spi_dma_rxISR0()+0xc4>
			(*_function)(*this);
    1d82:	ldr	r3, [r0, #8]
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    1d84:	ldmia.w	sp!, {r4, r5, lr}
    1d88:	bx	r3
	DMABaseClass::TCD_t *tcd = dmac->TCD;
    1d8a:	ldr	r5, [r5, #0]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    1d8c:	ldrh	r1, [r5, #30]
    1d8e:	lsls	r1, r1, #16
    1d90:	bmi.n	1dc6 <_spi_dma_rxISR0()+0xa6>
		tcd->BITER = len & 0x7fff;
    1d92:	uxth	r2, r2
    1d94:	strh	r2, [r5, #30]
	DMABaseClass::TCD_t *tcd = dmac->TCD;
    1d96:	ldr	r1, [r4, #0]
	tcd->CITER = tcd->BITER; 
    1d98:	ldrh	r4, [r5, #30]
    1d9a:	uxth	r4, r4
    1d9c:	strh	r4, [r5, #22]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    1d9e:	ldrh	r4, [r1, #30]
    1da0:	lsls	r4, r4, #16
    1da2:	bpl.n	1db0 <_spi_dma_rxISR0()+0x90>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    1da4:	ldrh	r4, [r1, #30]
    1da6:	ubfx	r2, r2, #0, #9
    1daa:	and.w	r4, r4, #65024	; 0xfe00
    1dae:	orrs	r2, r4
    1db0:	strh	r2, [r1, #30]
	tcd->CITER = tcd->BITER; 
    1db2:	ldrh	r2, [r1, #30]
    1db4:	uxth	r2, r2
    1db6:	strh	r2, [r1, #22]
    1db8:	movs	r1, #0
    1dba:	ldr	r2, [pc, #52]	; (1df0 <_spi_dma_rxISR0()+0xd0>)
			_dma_count_remaining -= MAX_DMA_COUNT;
    1dbc:	str	r1, [r3, #64]	; 0x40
    1dbe:	strb	r0, [r2, #27]
    1dc0:	strb.w	ip, [r2, #27]
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    1dc4:	pop	{r4, r5, pc}
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    1dc6:	ldrh	r1, [r5, #30]
    1dc8:	ubfx	lr, r2, #0, #9
    1dcc:	uxth	r2, r2
    1dce:	and.w	r1, r1, #65024	; 0xfe00
    1dd2:	orr.w	r1, r1, lr
    1dd6:	strh	r1, [r5, #30]
    1dd8:	b.n	1d96 <_spi_dma_rxISR0()+0x76>
		_dma_event_responder->triggerEvent();
    1dda:	mov	r3, r4
    1ddc:	mov	r1, r2
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    1dde:	ldmia.w	sp!, {r4, r5, lr}
		_dma_event_responder->triggerEvent();
    1de2:	bx	r3
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    1de4:	ldmia.w	sp!, {r4, r5, lr}
			triggerEventNotImmediate();
    1de8:	b.w	dba0 <EventResponder::triggerEventNotImmediate()>
    1dec:	.word	0x200061d8
    1df0:	.word	0x400e8000
    1df4:	.word	0xffff8001
    1df8:	.word	0x00001c2d

00001dfc <SPIClass::begin()>:
	const SPI_Hardware_t & hardware() { return *(const SPI_Hardware_t *)hardware_addr; }
    1dfc:	ldr	r3, [r0, #4]
{
    1dfe:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    1e02:	ldrd	r4, r1, [r3]
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
    1e06:	ldr	r5, [pc, #516]	; (200c <SPIClass::begin()+0x210>)
	*(portControlRegister(hardware().miso_pin[miso_pin_index])) = fastio;
    1e08:	mov.w	sl, #184	; 0xb8
	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    1e0c:	ldr	r2, [r4, #0]
	port().CR = LPSPI_CR_RST;
    1e0e:	mov.w	r8, #2
	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    1e12:	bic.w	r2, r2, r1
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
    1e16:	ldr	r1, [pc, #504]	; (2010 <SPIClass::begin()+0x214>)
	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    1e18:	str	r2, [r4, #0]
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
    1e1a:	ldr	r2, [r5, #24]
    1e1c:	ands	r1, r2
		CCM_CBCMR_LPSPI_PODF(2) | CCM_CBCMR_LPSPI_CLK_SEL(1); // pg 714
    1e1e:	ldr	r2, [pc, #500]	; (2014 <SPIClass::begin()+0x218>)
    1e20:	orrs	r2, r1
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
    1e22:	str	r2, [r5, #24]
	*(portControlRegister(hardware().miso_pin[miso_pin_index])) = fastio;
    1e24:	ldrb.w	lr, [r0, #16]
    1e28:	ldr	r2, [pc, #492]	; (2018 <SPIClass::begin()+0x21c>)
    1e2a:	add.w	r6, r3, lr
	*(portConfigRegister(hardware().miso_pin[miso_pin_index])) = hardware().miso_mux[miso_pin_index];
    1e2e:	add.w	lr, r3, lr, lsl #2
	*(portControlRegister(hardware().miso_pin[miso_pin_index])) = fastio;
    1e32:	ldrb	r1, [r6, #16]
    1e34:	add.w	r1, r2, r1, lsl #4
    1e38:	ldr	r1, [r1, #8]
    1e3a:	str.w	sl, [r1]
	*(portControlRegister(hardware().mosi_pin[mosi_pin_index])) = fastio;
    1e3e:	ldrb.w	ip, [r0, #17]
    1e42:	add.w	r5, r3, ip
	*(portConfigRegister(hardware().mosi_pin [mosi_pin_index])) = hardware().mosi_mux[mosi_pin_index];
    1e46:	add.w	ip, ip, #10
	*(portControlRegister(hardware().mosi_pin[mosi_pin_index])) = fastio;
    1e4a:	ldrb.w	r1, [r5, #36]	; 0x24
    1e4e:	add.w	r1, r2, r1, lsl #4
    1e52:	ldr	r1, [r1, #8]
    1e54:	str.w	sl, [r1]
	*(portControlRegister(hardware().sck_pin[sck_pin_index])) = fastio;
    1e58:	ldrb	r1, [r0, #18]
    1e5a:	add.w	r9, r3, r1
	*(portConfigRegister(hardware().sck_pin [sck_pin_index])) = hardware().sck_mux[sck_pin_index];
    1e5e:	add.w	r1, r3, r1, lsl #2
	*(portControlRegister(hardware().sck_pin[sck_pin_index])) = fastio;
    1e62:	ldrb.w	fp, [r9, #56]	; 0x38
    1e66:	add.w	fp, r2, fp, lsl #4
    1e6a:	ldr.w	fp, [fp, #8]
    1e6e:	str.w	sl, [fp]
	hardware().clock_gate_register |= hardware().clock_gate_mask;
    1e72:	ldr.w	sl, [r4]
    1e76:	ldr	r7, [r3, #4]
    1e78:	orr.w	sl, sl, r7
    1e7c:	str.w	sl, [r4]
	*(portConfigRegister(hardware().miso_pin[miso_pin_index])) = hardware().miso_mux[miso_pin_index];
    1e80:	ldrb	r4, [r6, #16]
    1e82:	ldr.w	lr, [lr, #20]
    1e86:	add.w	r4, r2, r4, lsl #4
    1e8a:	ldr	r4, [r4, #4]
    1e8c:	str.w	lr, [r4]
	*(portConfigRegister(hardware().mosi_pin [mosi_pin_index])) = hardware().mosi_mux[mosi_pin_index];
    1e90:	ldrb.w	r4, [r5, #36]	; 0x24
    1e94:	ldr.w	ip, [r3, ip, lsl #2]
    1e98:	add.w	r4, r2, r4, lsl #4
    1e9c:	ldr	r4, [r4, #4]
    1e9e:	str.w	ip, [r4]
	*(portConfigRegister(hardware().sck_pin [sck_pin_index])) = hardware().sck_mux[sck_pin_index];
    1ea2:	ldrb.w	r4, [r9, #56]	; 0x38
    1ea6:	add.w	r2, r2, r4, lsl #4
    1eaa:	ldr	r2, [r2, #4]
    1eac:	ldr	r1, [r1, #60]	; 0x3c
    1eae:	str	r1, [r2, #0]
	hardware().sck_select_input_register = hardware().sck_select_val[sck_pin_index];
    1eb0:	ldr	r2, [r3, #72]	; 0x48
    1eb2:	ldrb.w	r1, [r9, #68]	; 0x44
    1eb6:	str	r1, [r2, #0]
	hardware().miso_select_input_register = hardware().miso_select_val[miso_pin_index];
    1eb8:	ldr	r2, [r3, #32]
    1eba:	ldrb	r1, [r6, #28]
	hardware().mosi_select_input_register = hardware().mosi_select_val[mosi_pin_index];
    1ebc:	ldr	r3, [r3, #52]	; 0x34
	hardware().miso_select_input_register = hardware().miso_select_val[miso_pin_index];
    1ebe:	str	r1, [r2, #0]
	hardware().mosi_select_input_register = hardware().mosi_select_val[mosi_pin_index];
    1ec0:	ldrb.w	r2, [r5, #48]	; 0x30
    1ec4:	str	r2, [r3, #0]
	port().FCR = LPSPI_FCR_TXWATER(15);
    1ec6:	movs	r2, #15
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    1ec8:	ldr	r3, [r0, #0]
	port().CR = LPSPI_CR_RST;
    1eca:	str.w	r8, [r3, #16]
	port().FCR = LPSPI_FCR_TXWATER(15);
    1ece:	str	r2, [r3, #88]	; 0x58
		if (interruptMasksUsed) {
    1ed0:	ldrb	r2, [r0, #19]
    1ed2:	cmp	r2, #0
    1ed4:	beq.n	1f3a <SPIClass::begin()+0x13e>
			__disable_irq();
    1ed6:	cpsid	i
			if (interruptMasksUsed & 0x01) {
    1ed8:	ldrb	r3, [r0, #19]
    1eda:	lsls	r4, r3, #31
    1edc:	bpl.n	1ef0 <SPIClass::begin()+0xf4>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    1ede:	mov.w	r1, #3758153728	; 0xe000e000
    1ee2:	ldr	r4, [r0, #20]
    1ee4:	ldr.w	r2, [r1, #384]	; 0x180
    1ee8:	ands	r2, r4
    1eea:	str	r2, [r0, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    1eec:	str.w	r2, [r1, #384]	; 0x180
			if (interruptMasksUsed & 0x02) {
    1ef0:	lsls	r1, r3, #30
    1ef2:	bpl.n	1f06 <SPIClass::begin()+0x10a>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    1ef4:	mov.w	r1, #3758153728	; 0xe000e000
    1ef8:	ldr	r4, [r0, #24]
    1efa:	ldr.w	r2, [r1, #388]	; 0x184
    1efe:	ands	r2, r4
    1f00:	str	r2, [r0, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    1f02:	str.w	r2, [r1, #388]	; 0x184
			if (interruptMasksUsed & 0x04) {
    1f06:	lsls	r2, r3, #29
    1f08:	bpl.n	1f1c <SPIClass::begin()+0x120>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    1f0a:	mov.w	r1, #3758153728	; 0xe000e000
    1f0e:	ldr	r4, [r0, #28]
    1f10:	ldr.w	r2, [r1, #392]	; 0x188
    1f14:	ands	r2, r4
    1f16:	str	r2, [r0, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    1f18:	str.w	r2, [r1, #392]	; 0x188
			if (interruptMasksUsed & 0x08) {
    1f1c:	lsls	r7, r3, #28
    1f1e:	bpl.n	1f32 <SPIClass::begin()+0x136>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    1f20:	mov.w	r1, #3758153728	; 0xe000e000
    1f24:	ldr	r4, [r0, #32]
    1f26:	ldr.w	r2, [r1, #396]	; 0x18c
    1f2a:	ands	r2, r4
    1f2c:	str	r2, [r0, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    1f2e:	str.w	r2, [r1, #396]	; 0x18c
			if (interruptMasksUsed & 0x10) {
    1f32:	lsls	r6, r3, #27
    1f34:	bmi.n	1fe2 <SPIClass::begin()+0x1e6>
			__enable_irq();
    1f36:	cpsie	i
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    1f38:	ldr	r3, [r0, #0]
		if (settings.clock() != _clock) {
    1f3a:	ldr	r4, [pc, #224]	; (201c <SPIClass::begin()+0x220>)
    1f3c:	ldr	r2, [r0, #8]
    1f3e:	cmp	r2, r4
    1f40:	beq.n	1ff6 <SPIClass::begin()+0x1fa>
			uint32_t cbcmr = CCM_CBCMR;
    1f42:	ldr	r2, [pc, #200]	; (200c <SPIClass::begin()+0x210>)
		    _clock = settings.clock();
    1f44:	str	r4, [r0, #8]
			uint32_t cbcmr = CCM_CBCMR;
    1f46:	ldr	r2, [r2, #24]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    1f48:	ldr	r1, [pc, #212]	; (2020 <SPIClass::begin()+0x224>)
    1f4a:	ubfx	r6, r2, #4, #2
    1f4e:	ubfx	r2, r2, #26, #3
			if (d && clkhz/d > _clock) d++;
    1f52:	ldr	r5, [pc, #208]	; (2024 <SPIClass::begin()+0x228>)
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    1f54:	ldr.w	r1, [r1, r6, lsl #2]
    1f58:	adds	r2, #1
    1f5a:	udiv	r2, r1, r2
			if (d && clkhz/d > _clock) d++;
    1f5e:	cmp	r2, r5
    1f60:	bhi.n	1fc6 <SPIClass::begin()+0x1ca>
    1f62:	movs	r2, #0
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    1f64:	str	r2, [r0, #12]
		port().CR = 0;
    1f66:	movs	r4, #0
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    1f68:	movs	r1, #3
		port().CR = 0;
    1f6a:	str	r4, [r3, #16]
		port().TCR = settings.tcr;
    1f6c:	movs	r4, #7
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    1f6e:	str	r1, [r3, #36]	; 0x24
		port().CR = LPSPI_CR_MEN;
    1f70:	movs	r1, #1
		port().CCR = _ccr;
    1f72:	str	r2, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
    1f74:	str	r4, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    1f76:	str	r1, [r3, #16]
		if (interruptMasksUsed) {
    1f78:	ldrb	r3, [r0, #19]
    1f7a:	cbz	r3, 1fc2 <SPIClass::begin()+0x1c6>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    1f7c:	lsls	r5, r3, #31
    1f7e:	bpl.n	1f8a <SPIClass::begin()+0x18e>
    1f80:	ldr	r1, [r0, #40]	; 0x28
    1f82:	mov.w	r2, #3758153728	; 0xe000e000
    1f86:	str.w	r1, [r2, #256]	; 0x100
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    1f8a:	lsls	r4, r3, #30
    1f8c:	bpl.n	1f98 <SPIClass::begin()+0x19c>
    1f8e:	ldr	r1, [r0, #44]	; 0x2c
    1f90:	mov.w	r2, #3758153728	; 0xe000e000
    1f94:	str.w	r1, [r2, #260]	; 0x104
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    1f98:	lsls	r1, r3, #29
    1f9a:	bpl.n	1fa6 <SPIClass::begin()+0x1aa>
    1f9c:	ldr	r1, [r0, #48]	; 0x30
    1f9e:	mov.w	r2, #3758153728	; 0xe000e000
    1fa2:	str.w	r1, [r2, #264]	; 0x108
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    1fa6:	lsls	r2, r3, #28
    1fa8:	bpl.n	1fb4 <SPIClass::begin()+0x1b8>
    1faa:	ldr	r1, [r0, #52]	; 0x34
    1fac:	mov.w	r2, #3758153728	; 0xe000e000
    1fb0:	str.w	r1, [r2, #268]	; 0x10c
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    1fb4:	lsls	r3, r3, #27
    1fb6:	bpl.n	1fc2 <SPIClass::begin()+0x1c6>
    1fb8:	ldr	r2, [r0, #56]	; 0x38
    1fba:	mov.w	r3, #3758153728	; 0xe000e000
    1fbe:	str.w	r2, [r3, #272]	; 0x110
}
    1fc2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			d = _clock ? clkhz/_clock : clkhz;
    1fc6:	ldr	r1, [pc, #96]	; (2028 <SPIClass::begin()+0x22c>)
    1fc8:	umull	r5, r1, r1, r2
    1fcc:	lsrs	r1, r1, #20
			if (d && clkhz/d > _clock) d++;
    1fce:	udiv	r2, r2, r1
    1fd2:	cmp	r2, r4
    1fd4:	it	hi
    1fd6:	addhi	r1, #1
			if (d > 257) d= 257;  // max div
    1fd8:	cmp.w	r1, #258	; 0x102
    1fdc:	bcc.n	1ffa <SPIClass::begin()+0x1fe>
    1fde:	ldr	r2, [pc, #76]	; (202c <SPIClass::begin()+0x230>)
				div = d-2;
    1fe0:	b.n	1f64 <SPIClass::begin()+0x168>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    1fe2:	mov.w	r2, #3758153728	; 0xe000e000
    1fe6:	ldr	r1, [r0, #36]	; 0x24
    1fe8:	ldr.w	r3, [r2, #400]	; 0x190
    1fec:	ands	r3, r1
    1fee:	str	r3, [r0, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    1ff0:	str.w	r3, [r2, #400]	; 0x190
    1ff4:	b.n	1f36 <SPIClass::begin()+0x13a>
		port().CCR = _ccr;
    1ff6:	ldr	r2, [r0, #12]
    1ff8:	b.n	1f66 <SPIClass::begin()+0x16a>
			if (d > 2) {
    1ffa:	cmp	r1, #2
    1ffc:	bls.n	1f62 <SPIClass::begin()+0x166>
				div = d-2;
    1ffe:	subs	r1, #2
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    2000:	lsrs	r4, r1, #1
    2002:	lsls	r2, r4, #8
    2004:	orr.w	r2, r2, r4, lsl #16
    2008:	orrs	r2, r1
    200a:	b.n	1f64 <SPIClass::begin()+0x168>
    200c:	.word	0x400fc000
    2010:	.word	0xe3ffffcf
    2014:	.word	0x08000010
    2018:	.word	0x20000da4
    201c:	.word	0x003d0900
    2020:	.word	0x20000b18
    2024:	.word	0x003d08ff
    2028:	.word	0x431bde83
    202c:	.word	0x007f7fff

00002030 <SPIClass::transfer(void const*, void*, unsigned int)>:
	if (count == 0) return;
    2030:	cbz	r3, 2088 <SPIClass::transfer(void const*, void*, unsigned int)+0x58>
{
    2032:	push	{r4, r5, r6, r7}
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    2034:	ldr	r4, [r0, #0]
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 
    2036:	movw	r5, #513	; 0x201
    203a:	mov	r6, r3
    203c:	str	r5, [r4, #16]
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    203e:	cbz	r1, 2082 <SPIClass::transfer(void const*, void*, unsigned int)+0x52>
    2040:	ldrb.w	r5, [r1], #1
		count--; // how many bytes left to output.
    2044:	subs	r3, #1
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    2046:	str	r5, [r4, #100]	; 0x64
			if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    2048:	ldr	r5, [r4, #112]	; 0x70
    204a:	lsls	r7, r5, #30
    204c:	bmi.n	205e <SPIClass::transfer(void const*, void*, unsigned int)+0x2e>
				if (p_read) *p_read++ = b; 
    204e:	mov	r5, r2
				count_read--;
    2050:	subs	r6, #1
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    2052:	ldr	r7, [r4, #116]	; 0x74
				if (p_read) *p_read++ = b; 
    2054:	cbz	r2, 205e <SPIClass::transfer(void const*, void*, unsigned int)+0x2e>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    2056:	strb.w	r7, [r5], #1
				if (p_read) *p_read++ = b; 
    205a:	mov	r2, r5
    205c:	ldr	r4, [r0, #0]
		} while ((port().SR & LPSPI_SR_TDF) == 0) ;
    205e:	ldr	r5, [r4, #20]
    2060:	lsls	r5, r5, #31
    2062:	bpl.n	2048 <SPIClass::transfer(void const*, void*, unsigned int)+0x18>
	while (count > 0) {
    2064:	cmp	r3, #0
    2066:	bne.n	203e <SPIClass::transfer(void const*, void*, unsigned int)+0xe>
    2068:	cbz	r6, 207e <SPIClass::transfer(void const*, void*, unsigned int)+0x4e>
    206a:	ldr	r1, [r0, #0]
		if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    206c:	ldr	r3, [r1, #112]	; 0x70
    206e:	lsls	r3, r3, #30
    2070:	bmi.n	206c <SPIClass::transfer(void const*, void*, unsigned int)+0x3c>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    2072:	ldr	r3, [r1, #116]	; 0x74
			if (p_read) *p_read++ = b; 
    2074:	cbz	r2, 207a <SPIClass::transfer(void const*, void*, unsigned int)+0x4a>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    2076:	strb.w	r3, [r2], #1
			count_read--;
    207a:	subs	r6, #1
    207c:	bne.n	206a <SPIClass::transfer(void const*, void*, unsigned int)+0x3a>
}
    207e:	pop	{r4, r5, r6, r7}
    2080:	bx	lr
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    2082:	ldrb.w	r5, [r0, #60]	; 0x3c
    2086:	b.n	2044 <SPIClass::transfer(void const*, void*, unsigned int)+0x14>
    2088:	bx	lr
    208a:	nop

0000208c <SPIClass::end()>:
	const SPI_Hardware_t & hardware() { return *(const SPI_Hardware_t *)hardware_addr; }
    208c:	ldr	r3, [r0, #4]
	if (hardware().clock_gate_register & hardware().clock_gate_mask) {
    208e:	ldrd	r1, r2, [r3]
    2092:	ldr	r1, [r1, #0]
    2094:	tst	r1, r2
    2096:	bne.n	209a <SPIClass::end()+0xe>
    2098:	bx	lr
void SPIClass::end() {
    209a:	push	{r4, lr}
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    209c:	ldr	r2, [r0, #0]
    209e:	mov	r4, r0
		port().CR = 0;  // turn off the enable
    20a0:	movs	r0, #0
		pinMode(hardware().miso_pin[miso_pin_index], INPUT_DISABLE);
    20a2:	movs	r1, #5
		port().CR = 0;  // turn off the enable
    20a4:	str	r0, [r2, #16]
		pinMode(hardware().miso_pin[miso_pin_index], INPUT_DISABLE);
    20a6:	ldrb	r2, [r4, #16]
    20a8:	add	r3, r2
    20aa:	ldrb	r0, [r3, #16]
    20ac:	bl	d17c <pinMode>
		pinMode(hardware().mosi_pin[mosi_pin_index], INPUT_DISABLE);
    20b0:	ldrb	r2, [r4, #17]
    20b2:	ldr	r3, [r4, #4]
    20b4:	movs	r1, #5
    20b6:	add	r3, r2
    20b8:	ldrb.w	r0, [r3, #36]	; 0x24
    20bc:	bl	d17c <pinMode>
		pinMode(hardware().sck_pin[sck_pin_index], INPUT_DISABLE);
    20c0:	ldr	r3, [r4, #4]
    20c2:	ldrb	r2, [r4, #18]
    20c4:	movs	r1, #5
    20c6:	add	r3, r2
}
    20c8:	ldmia.w	sp!, {r4, lr}
		pinMode(hardware().sck_pin[sck_pin_index], INPUT_DISABLE);
    20cc:	ldrb.w	r0, [r3, #56]	; 0x38
    20d0:	b.w	d17c <pinMode>

000020d4 <_GLOBAL__sub_I__ZN8SPIClass5beginEv>:

	}
}
    20d4:	push	{r4, r5, lr}
		: port_addr(myport), hardware_addr(myhardware) {
    20d6:	ldr	r0, [pc, #148]	; (216c <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x98>)
    20d8:	movs	r3, #0
    20da:	ldr	r4, [pc, #148]	; (2170 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x9c>)
    20dc:	ldr	r2, [pc, #148]	; (2174 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0xa0>)
    20de:	str	r4, [r0, #0]
    20e0:	sub.w	r4, r4, #16384	; 0x4000
    20e4:	ldr	r1, [pc, #144]	; (2178 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0xa4>)
    20e6:	str	r4, [r2, #0]
SPIClass SPI((uintptr_t)&IMXRT_LPSPI4_S, (uintptr_t)&SPIClass::spiclass_lpspi4_hardware);
    20e8:	ldr	r5, [pc, #144]	; (217c <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0xa8>)
    20ea:	add.w	lr, r1, #20
SPIClass SPI1((uintptr_t)&IMXRT_LPSPI3_S, (uintptr_t)&SPIClass::spiclass_lpspi3_hardware);
    20ee:	ldr	r4, [pc, #144]	; (2180 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0xac>)
    20f0:	str	r3, [r2, #40]	; 0x28
    20f2:	str	r3, [r2, #24]
    20f4:	str	r3, [r2, #36]	; 0x24
    20f6:	str	r3, [r2, #44]	; 0x2c
    20f8:	str	r3, [r0, #40]	; 0x28
    20fa:	strh	r3, [r0, #60]	; 0x3c
    20fc:	str	r4, [r2, #4]
    20fe:	strd	r3, r3, [r2, #8]
    2102:	strd	r3, r3, [r2, #16]
    2106:	strd	r3, r3, [r2, #28]
    210a:	strd	r3, r3, [r0, #8]
    210e:	strd	r3, r3, [r0, #16]
    2112:	strd	r3, r3, [r0, #64]	; 0x40
    2116:	strd	r3, r3, [r0, #72]	; 0x48
    211a:	strd	r3, r3, [r0, #24]
    211e:	strd	r3, r3, [r0, #32]
    2122:	strd	r3, r3, [r0, #44]	; 0x2c
    2126:	strd	r3, r3, [r0, #52]	; 0x34
    212a:	str	r5, [r0, #4]
    212c:	str	r3, [r2, #56]	; 0x38
    212e:	strh	r3, [r2, #60]	; 0x3c
    2130:	str	r3, [r1, #56]	; 0x38
    2132:	strh	r3, [r1, #60]	; 0x3c
    2134:	strd	r3, r3, [r2, #48]	; 0x30
    2138:	strd	r3, r3, [r2, #64]	; 0x40
    213c:	strd	r3, r3, [r2, #72]	; 0x48
    2140:	strd	r3, r3, [r1, #8]
    2144:	ldr	r2, [pc, #60]	; (2184 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0xb0>)
    2146:	strd	r3, r3, [r1, #16]
    214a:	strd	r3, r3, [r1, #24]
    214e:	strd	r3, r3, [r1, #32]
    2152:	strd	r3, r3, [r1, #40]	; 0x28
    2156:	strd	r3, r3, [r1, #48]	; 0x30
    215a:	strd	r3, r3, [r1, #64]	; 0x40
    215e:	strd	r3, r3, [r1, #72]	; 0x48
SPIClass SPI2((uintptr_t)&IMXRT_LPSPI1_S, (uintptr_t)&SPIClass::spiclass_lpspi1_hardware);
    2162:	ldr	r3, [pc, #36]	; (2188 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0xb4>)
    2164:	strd	r2, r3, [r1]
}
    2168:	pop	{r4, r5, pc}
    216a:	nop
    216c:	.word	0x200061d8
    2170:	.word	0x403a0000
    2174:	.word	0x20006228
    2178:	.word	0x20006278
    217c:	.word	0x20000820
    2180:	.word	0x200007b0
    2184:	.word	0x40394000
    2188:	.word	0x20000740

0000218c <SDClass::~SDClass()>:
	char *filename;
};



class SDClass : public FS
    218c:	bx	lr
    218e:	nop

00002190 <SDClass::dateTime(unsigned short*, unsigned short*)>:
{
    2190:	push	{r4, r5, lr}
    2192:	sub	sp, #12
    2194:	mov	r5, r0
    2196:	mov	r4, r1
uint32_t makeTime(const DateTimeFields &tm); // convert DateTimeFields to 32 bit time

class teensy3_clock_class
{
public:
        static unsigned long get(void) __attribute__((always_inline)) { return rtc_get(); }
    2198:	bl	cfe0 <rtc_get>
	if (now < 315532800) { // before 1980
    219c:	ldr	r3, [pc, #112]	; (2210 <SDClass::dateTime(unsigned short*, unsigned short*)+0x80>)
    219e:	cmp	r0, r3
    21a0:	bhi.n	21ac <SDClass::dateTime(unsigned short*, unsigned short*)+0x1c>
		*date = 0;
    21a2:	movs	r3, #0
    21a4:	strh	r3, [r5, #0]
		*time = 0;
    21a6:	strh	r3, [r4, #0]
}
    21a8:	add	sp, #12
    21aa:	pop	{r4, r5, pc}
		breakTime(now, datetime);
    21ac:	mov	r1, sp
    21ae:	bl	de20 <breakTime(unsigned long, DateTimeFields&)>
		*date = FS_DATE(datetime.year + 1900, datetime.mon + 1, datetime.mday);
    21b2:	ldrb.w	r3, [sp, #5]
    21b6:	ldrb.w	r2, [sp, #6]
    21ba:	adds	r3, #1
    21bc:	ldrb.w	r1, [sp, #4]
  year -= 1980;
    21c0:	subs	r2, #80	; 0x50
    21c2:	uxtb	r3, r3
    21c4:	uxth	r2, r2
  return year > 127 || month > 12 || day > 31 ? 0
    21c6:	cmp	r3, #12
    21c8:	it	ls
    21ca:	cmpls	r1, #31
    21cc:	bhi.n	21d2 <SDClass::dateTime(unsigned short*, unsigned short*)+0x42>
    21ce:	cmp	r2, #127	; 0x7f
    21d0:	bls.n	2204 <SDClass::dateTime(unsigned short*, unsigned short*)+0x74>
                                              : year << 9 | month << 5 | day;
    21d2:	movs	r1, #0
		*time = FS_TIME(datetime.hour, datetime.min, datetime.sec);
    21d4:	ldrb.w	r2, [sp, #2]
    21d8:	ldrb.w	r3, [sp, #1]
		*date = FS_DATE(datetime.year + 1900, datetime.mon + 1, datetime.mday);
    21dc:	strh	r1, [r5, #0]
  return hour > 23 || minute > 59 || second > 59
    21de:	cmp	r2, #23
    21e0:	it	ls
    21e2:	cmpls	r3, #59	; 0x3b
		*time = FS_TIME(datetime.hour, datetime.min, datetime.sec);
    21e4:	ldrb.w	r1, [sp]
    21e8:	bhi.n	21ee <SDClass::dateTime(unsigned short*, unsigned short*)+0x5e>
    21ea:	cmp	r1, #59	; 0x3b
    21ec:	bls.n	21f6 <SDClass::dateTime(unsigned short*, unsigned short*)+0x66>
             : hour << 11 | minute << 5 | second >> 1;
    21ee:	movs	r3, #0
    21f0:	strh	r3, [r4, #0]
}
    21f2:	add	sp, #12
    21f4:	pop	{r4, r5, pc}
    21f6:	lsls	r3, r3, #5
    21f8:	orr.w	r3, r3, r2, lsl #11
    21fc:	orr.w	r3, r3, r1, lsr #1
    2200:	uxth	r3, r3
    2202:	b.n	21f0 <SDClass::dateTime(unsigned short*, unsigned short*)+0x60>
                                              : year << 9 | month << 5 | day;
    2204:	orr.w	r1, r1, r3, lsl #5
    2208:	orr.w	r1, r1, r2, lsl #9
    220c:	uxth	r1, r1
    220e:	b.n	21d4 <SDClass::dateTime(unsigned short*, unsigned short*)+0x44>
    2210:	.word	0x12cea5ff

00002214 <SDClass::open(char const*, unsigned char)>:
public:
	SDClass() { }
	bool begin(uint8_t csPin = 10);
	File open(const char *filepath, uint8_t mode = FILE_READ) {
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
    2214:	cmp	r3, #1
	File open(const char *filepath, uint8_t mode = FILE_READ) {
    2216:	push	{r4, r5, r6, r7, lr}
    2218:	mov	r5, r0
    221a:	sub	sp, #84	; 0x54
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
    221c:	beq.n	229c <SDClass::open(char const*, unsigned char)+0x88>
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
    221e:	cmp	r3, #2
    2220:	movw	r0, #514	; 0x202
		SDFAT_FILE file = sdfs.open(filepath, flags);
    2224:	add.w	r1, r1, #4
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
    2228:	ite	eq
    222a:	moveq	r3, r0
    222c:	movne	r3, #0
		SDFAT_FILE file = sdfs.open(filepath, flags);
    222e:	mov	r0, sp
    2230:	bl	7d5c <FsVolume::open(char const*, int)>
    2234:	ldr	r3, [sp, #72]	; 0x48
    2236:	cmp	r3, #0
    2238:	beq.n	22ae <SDClass::open(char const*, unsigned char)+0x9a>
		if (file) return File(new SDFile(file));
    223a:	movs	r0, #92	; 0x5c
class FileImpl {
    223c:	movs	r6, #0
    223e:	bl	f168 <operator new(unsigned int)>
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
    2242:	ldr	r3, [pc, #132]	; (22c8 <SDClass::open(char const*, unsigned char)+0xb4>)
    2244:	add	r7, sp, #16
		if (file) return File(new SDFile(file));
    2246:	mov	r4, r0
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
    2248:	strd	r3, r6, [r0]
class Print
    224c:	ldrb.w	r3, [sp, #4]
    2250:	mov	r1, r7
    2252:	adds	r0, #24
    2254:	strb.w	r3, [r0, #-12]
class Stream : public Print
    2258:	ldr	r3, [pc, #112]	; (22cc <SDClass::open(char const*, unsigned char)+0xb8>)
    225a:	str.w	r3, [r0, #-16]
    225e:	ldr	r3, [sp, #8]
    2260:	str.w	r3, [r0, #-8]
    2264:	ldrb.w	r3, [sp, #12]
    2268:	strb.w	r3, [r0, #-4]
    226c:	bl	7a7c <FsBaseFile::FsBaseFile(FsBaseFile const&)>
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    2270:	ldr	r3, [pc, #92]	; (22d0 <SDClass::open(char const*, unsigned char)+0xbc>)
	constexpr Stream() : _timeout(1000), read_error(0) {}
    2272:	mov.w	r2, #1000	; 0x3e8
    2276:	str	r6, [r4, #88]	; 0x58
    2278:	str	r3, [r4, #8]
	File(FileImpl *file) {
    227a:	ldr	r3, [pc, #88]	; (22d4 <SDClass::open(char const*, unsigned char)+0xc0>)
	constexpr Print() : write_error(0) {}
    227c:	strb	r6, [r5, #4]
    227e:	str	r3, [r5, #0]
		if (f) f->refcount++;
    2280:	ldr	r3, [r4, #4]
    2282:	strb	r6, [r5, #12]
    2284:	adds	r3, #1
    2286:	str	r2, [r5, #8]
		f = file;
    2288:	str	r4, [r5, #16]
		if (f) f->refcount++;
    228a:	str	r3, [r4, #4]
    228c:	ldr	r3, [pc, #72]	; (22d8 <SDClass::open(char const*, unsigned char)+0xc4>)
  ~FsBaseFile() { close(); }
    228e:	mov	r0, r7
    2290:	str	r3, [sp, #0]
    2292:	bl	7b04 <FsBaseFile::close()>
		return File();
	}
    2296:	mov	r0, r5
    2298:	add	sp, #84	; 0x54
    229a:	pop	{r4, r5, r6, r7, pc}
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
    229c:	movw	r3, #16898	; 0x4202
		SDFAT_FILE file = sdfs.open(filepath, flags);
    22a0:	adds	r1, #4
    22a2:	mov	r0, sp
    22a4:	bl	7d5c <FsVolume::open(char const*, int)>
  bool isOpen() const { return m_fFile || m_xFile; }
    22a8:	ldr	r3, [sp, #72]	; 0x48
    22aa:	cmp	r3, #0
    22ac:	bne.n	223a <SDClass::open(char const*, unsigned char)+0x26>
    22ae:	ldr	r3, [sp, #76]	; 0x4c
    22b0:	cmp	r3, #0
    22b2:	bne.n	223a <SDClass::open(char const*, unsigned char)+0x26>
    22b4:	mov.w	r1, #1000	; 0x3e8
	constexpr File() : f(nullptr) { }
    22b8:	ldr	r2, [pc, #24]	; (22d4 <SDClass::open(char const*, unsigned char)+0xc0>)
    22ba:	add	r7, sp, #16
    22bc:	strb	r3, [r5, #4]
    22be:	str	r1, [r5, #8]
    22c0:	strb	r3, [r5, #12]
    22c2:	str	r2, [r5, #0]
    22c4:	str	r3, [r5, #16]
    22c6:	b.n	228c <SDClass::open(char const*, unsigned char)+0x78>
    22c8:	.word	0x200009d8
    22cc:	.word	0x20000a34
    22d0:	.word	0x200009a8
    22d4:	.word	0x2000097c
    22d8:	.word	0x20000898

000022dc <SDClass::totalSize()>:
		if (!cardPreviouslyPresent) return (uint64_t)0;
		return (uint64_t)(sdfs.clusterCount() - sdfs.freeClusterCount())
		  * (uint64_t)sdfs.bytesPerCluster();
	}
	uint64_t totalSize() {
		if (!cardPreviouslyPresent) return (uint64_t)0;
    22dc:	ldrb.w	r3, [r0, #1228]	; 0x4cc
    22e0:	cbz	r3, 22fc <SDClass::totalSize()+0x20>
  }
  /** Change global working volume to this volume. */
  void chvol() { m_cwv = this; }
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const {
    return m_fVol   ? m_fVol->clusterCount()
    22e2:	ldr.w	r3, [r0, #1156]	; 0x484
    22e6:	cbz	r3, 2302 <SDClass::totalSize()+0x26>
  uint8_t bytesPerClusterShift() const {
    return m_sectorsPerClusterShift + m_bytesPerSectorShift;
  }
  /** \return Number of bytes in a cluster. */
  uint16_t bytesPerCluster() const {
    return m_bytesPerSector << m_sectorsPerClusterShift;
    22e8:	ldrb	r2, [r3, #6]
    22ea:	mov.w	r0, #512	; 0x200
  /** Clear the cache and returns a pointer to the cache.  Not for normal apps.
   * \return A pointer to the cache buffer or zero if an error occurs.
   */
  uint8_t* cacheClear() { return m_cache.clear(); }
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const { return m_lastCluster - 1; }
    22ee:	ldr	r1, [r3, #28]
    return m_bytesPerSector << m_sectorsPerClusterShift;
    22f0:	lsls	r0, r2
  uint32_t clusterCount() const { return m_lastCluster - 1; }
    22f2:	subs	r1, #1
		return (uint64_t)sdfs.clusterCount() * (uint64_t)sdfs.bytesPerCluster();
    22f4:	uxth	r0, r0
    22f6:	umull	r0, r1, r0, r1
    22fa:	bx	lr
		if (!cardPreviouslyPresent) return (uint64_t)0;
    22fc:	mov	r0, r3
    22fe:	mov	r1, r0
	}
    2300:	bx	lr
           : m_xVol ? m_xVol->clusterCount()
    2302:	ldr.w	r0, [r0, #1160]	; 0x488
    2306:	cmp	r0, #0
    2308:	beq.n	22fe <SDClass::totalSize()+0x22>
		return (uint64_t)sdfs.clusterCount() * (uint64_t)sdfs.bytesPerCluster();
    230a:	ldr.w	r1, [r0, #1084]	; 0x43c
    230e:	ldr.w	r0, [r0, #1072]	; 0x430
    2312:	umull	r0, r1, r1, r0
    2316:	bx	lr

00002318 <SDClass::usedSize()>:
	uint64_t usedSize() {
    2318:	push	{r3, r4, r5, r6, r7, lr}
    231a:	mov	r5, r0
		if (!cardPreviouslyPresent) return (uint64_t)0;
    231c:	ldrb.w	r0, [r0, #1228]	; 0x4cc
    2320:	cmp	r0, #0
    2322:	beq.n	23b0 <SDClass::usedSize()+0x98>
    return m_fVol   ? m_fVol->clusterCount()
    2324:	ldr.w	r3, [r5, #1156]	; 0x484
    2328:	cbz	r3, 237a <SDClass::usedSize()+0x62>
    232a:	ldr	r4, [r3, #28]
    }
    return rtn;
  }
  //----------------------------------------------------------------------------
  /** \return true if can be in dedicated SPI state */
  bool hasDedicatedSpi() { return m_card ? m_card->hasDedicatedSpi() : false; }
    232c:	ldr.w	r0, [r5, #1164]	; 0x48c
    2330:	subs	r4, #1
    2332:	cmp	r0, #0
    2334:	beq.n	2400 <SDClass::usedSize()+0xe8>
    2336:	ldr	r3, [r0, #0]
    2338:	ldr	r3, [r3, #56]	; 0x38
    233a:	blx	r3
    233c:	cmp	r0, #0
    233e:	beq.n	23b4 <SDClass::usedSize()+0x9c>
    }
    errorPrint(pr);
  }
  //----------------------------------------------------------------------------
  /** \return true if in dedicated SPI state. */
  bool isDedicatedSpi() { return m_card ? m_card->isDedicatedSpi() : false; }
    2340:	ldr.w	r0, [r5, #1164]	; 0x48c
    2344:	cbz	r0, 2398 <SDClass::usedSize()+0x80>
    2346:	ldr	r3, [r0, #0]
    2348:	ldr	r3, [r3, #60]	; 0x3c
    234a:	blx	r3
    234c:	cbnz	r0, 23b4 <SDClass::usedSize()+0x9c>
  /** Set SPI sharing state
   * \param[in] value desired state.
   * \return true for success else false;
   */
  bool setDedicatedSpi(bool value) {
    if (m_card) {
    234e:	ldr.w	r0, [r5, #1164]	; 0x48c
    2352:	cbz	r0, 2398 <SDClass::usedSize()+0x80>
      return m_card->setDedicatedSpi(value);
    2354:	ldr	r3, [r0, #0]
    2356:	movs	r1, #1
    2358:	ldr	r3, [r3, #64]	; 0x40
    235a:	blx	r3
    if (switchSpi && !setDedicatedSpi(true)) {
    235c:	mov	r7, r0
    235e:	cbz	r0, 2398 <SDClass::usedSize()+0x80>
  uint8_t fatType() const {
    return m_fVol ? m_fVol->fatType() : m_xVol ? m_xVol->fatType() : 0;
  }
  /** \return free cluster count or -1 if an error occurs. */
  int32_t freeClusterCount() const {
    return m_fVol   ? m_fVol->freeClusterCount()
    2360:	ldr.w	r0, [r5, #1156]	; 0x484
    2364:	cmp	r0, #0
    2366:	bne.n	23e8 <SDClass::usedSize()+0xd0>
           : m_xVol ? m_xVol->freeClusterCount()
    2368:	ldr.w	r3, [r5, #1160]	; 0x488
    236c:	cbnz	r3, 23c4 <SDClass::usedSize()+0xac>
    if (m_card) {
    236e:	ldr.w	r0, [r5, #1164]	; 0x48c
    2372:	cbz	r0, 23ae <SDClass::usedSize()+0x96>
    uint32_t rtn = Vol::freeClusterCount();
    2374:	mov.w	r6, #4294967295
    2378:	b.n	23d8 <SDClass::usedSize()+0xc0>
           : m_xVol ? m_xVol->clusterCount()
    237a:	ldr.w	r3, [r5, #1160]	; 0x488
  bool hasDedicatedSpi() { return m_card ? m_card->hasDedicatedSpi() : false; }
    237e:	ldr.w	r0, [r5, #1164]	; 0x48c
    2382:	cmp	r3, #0
    2384:	beq.n	240a <SDClass::usedSize()+0xf2>
  uint32_t clusterCount() const { return m_clusterCount; }
    2386:	ldr.w	r4, [r3, #1072]	; 0x430
    238a:	cmp	r0, #0
    238c:	bne.n	2336 <SDClass::usedSize()+0x1e>
           : m_xVol ? m_xVol->freeClusterCount()
    238e:	mov	r0, r3
    2390:	bl	41f8 <ExFatPartition::freeClusterCount()>
    2394:	mov	r6, r0
		return (uint64_t)(sdfs.clusterCount() - sdfs.freeClusterCount())
    2396:	subs	r4, r4, r6
    return m_fVol   ? m_fVol->bytesPerCluster()
    2398:	ldr.w	r3, [r5, #1156]	; 0x484
    239c:	cbz	r3, 23ee <SDClass::usedSize()+0xd6>
    return m_bytesPerSector << m_sectorsPerClusterShift;
    239e:	ldrb	r3, [r3, #6]
    23a0:	mov.w	r1, #512	; 0x200
    23a4:	lsls	r1, r3
		  * (uint64_t)sdfs.bytesPerCluster();
    23a6:	uxth	r1, r1
    23a8:	umull	r0, r1, r1, r4
	}
    23ac:	pop	{r3, r4, r5, r6, r7, pc}
    23ae:	movs	r0, #0
    23b0:	mov	r1, r0
    23b2:	pop	{r3, r4, r5, r6, r7, pc}
    return m_fVol   ? m_fVol->freeClusterCount()
    23b4:	ldr.w	r0, [r5, #1156]	; 0x484
    23b8:	cbnz	r0, 23e6 <SDClass::usedSize()+0xce>
           : m_xVol ? m_xVol->freeClusterCount()
    23ba:	ldr.w	r3, [r5, #1160]	; 0x488
    23be:	cmp	r3, #0
    23c0:	beq.n	23ae <SDClass::usedSize()+0x96>
    bool switchSpi = hasDedicatedSpi() && !isDedicatedSpi();
    23c2:	mov	r7, r0
    23c4:	mov	r0, r3
    23c6:	bl	41f8 <ExFatPartition::freeClusterCount()>
    uint32_t rtn = Vol::freeClusterCount();
    23ca:	mov	r6, r0
    if (switchSpi && !setDedicatedSpi(false)) {
    23cc:	cmp	r7, #0
    23ce:	beq.n	2396 <SDClass::usedSize()+0x7e>
    if (m_card) {
    23d0:	ldr.w	r0, [r5, #1164]	; 0x48c
    23d4:	cmp	r0, #0
    23d6:	beq.n	2398 <SDClass::usedSize()+0x80>
      return m_card->setDedicatedSpi(value);
    23d8:	ldr	r3, [r0, #0]
    23da:	movs	r1, #0
    23dc:	ldr	r3, [r3, #64]	; 0x40
    23de:	blx	r3
    if (switchSpi && !setDedicatedSpi(false)) {
    23e0:	cmp	r0, #0
    23e2:	bne.n	2396 <SDClass::usedSize()+0x7e>
    23e4:	b.n	2398 <SDClass::usedSize()+0x80>
    bool switchSpi = hasDedicatedSpi() && !isDedicatedSpi();
    23e6:	movs	r7, #0
    return m_fVol   ? m_fVol->freeClusterCount()
    23e8:	bl	6bbc <FatPartition::freeClusterCount()>
    23ec:	b.n	23ca <SDClass::usedSize()+0xb2>
    23ee:	ldr.w	r3, [r5, #1160]	; 0x488
           : m_xVol ? m_xVol->bytesPerCluster()
    23f2:	cmp	r3, #0
    23f4:	beq.n	23ae <SDClass::usedSize()+0x96>
		  * (uint64_t)sdfs.bytesPerCluster();
    23f6:	ldr.w	r1, [r3, #1084]	; 0x43c
    23fa:	umull	r0, r1, r1, r4
	}
    23fe:	pop	{r3, r4, r5, r6, r7, pc}
    return m_fVol   ? m_fVol->freeClusterCount()
    2400:	mov	r0, r3
    2402:	bl	6bbc <FatPartition::freeClusterCount()>
    2406:	mov	r6, r0
    2408:	b.n	2396 <SDClass::usedSize()+0x7e>
  bool hasDedicatedSpi() { return m_card ? m_card->hasDedicatedSpi() : false; }
    240a:	cmp	r0, #0
    240c:	beq.n	23ae <SDClass::usedSize()+0x96>
           : m_xVol ? m_xVol->clusterCount()
    240e:	mov	r4, r3
    2410:	b.n	2336 <SDClass::usedSize()+0x1e>
    2412:	nop

00002414 <SDClass::rmdir(char const*)>:
	bool rmdir(const char *filepath) {
    2414:	push	{r4, lr}
   * The subdirectory file will be removed only if it is empty.
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char* path) {
    return m_fVol ? m_fVol->rmdir(path) : m_xVol ? m_xVol->rmdir(path) : false;
    2416:	ldr.w	r4, [r0, #1156]	; 0x484
    241a:	sub	sp, #56	; 0x38
    241c:	mov	r2, r1
    241e:	cbz	r4, 2432 <SDClass::rmdir(char const*)+0x1e>
  FatFile() {}
    2420:	movs	r3, #0
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char* path) {
    FatFile sub;
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    2422:	mov	r1, r4
    2424:	mov	r0, sp
    2426:	str	r3, [sp, #0]
    2428:	bl	5d1c <FatFile::open(FatVolume*, char const*, int)>
    242c:	cbnz	r0, 2450 <SDClass::rmdir(char const*)+0x3c>
	}
    242e:	add	sp, #56	; 0x38
    2430:	pop	{r4, pc}
    2432:	ldr.w	r1, [r0, #1160]	; 0x488
    2436:	cbz	r1, 244a <SDClass::rmdir(char const*)+0x36>
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char* path) {
    ExFatFile sub;
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    2438:	mov	r3, r4
    243a:	mov	r0, sp
  ExFatFile() {}
    243c:	str	r4, [sp, #48]	; 0x30
    243e:	bl	3e50 <ExFatFile::open(ExFatVolume*, char const*, int)>
    2442:	cbnz	r0, 245a <SDClass::rmdir(char const*)+0x46>
    2444:	movs	r0, #0
    2446:	add	sp, #56	; 0x38
    2448:	pop	{r4, pc}
    244a:	mov	r0, r1
    244c:	add	sp, #56	; 0x38
    244e:	pop	{r4, pc}
    2450:	mov	r0, sp
    2452:	bl	61bc <FatFile::rmdir()>
    2456:	add	sp, #56	; 0x38
    2458:	pop	{r4, pc}
    245a:	mov	r0, sp
    245c:	bl	451c <ExFatFile::rmdir()>
    2460:	cmp	r0, #0
    2462:	beq.n	2444 <SDClass::rmdir(char const*)+0x30>
    2464:	b.n	242e <SDClass::rmdir(char const*)+0x1a>
    2466:	nop

00002468 <SDClass::rename(char const*, char const*)>:
	bool rename(const char *oldfilepath, const char *newfilepath) {
    2468:	push	{r4, r5, r6, lr}
    return m_fVol   ? m_fVol->rename(oldPath, newPath)
    246a:	ldr.w	r5, [r0, #1156]	; 0x484
    246e:	sub	sp, #56	; 0x38
    2470:	mov	r6, r2
    2472:	cbz	r5, 248c <SDClass::rename(char const*, char const*)+0x24>
#endif  // ENABLE_ARDUINO_STRING

 private:
  friend FatFile;
  static FatVolume* cwv() { return m_cwv; }
  FatFile* vwd() { return &m_vwd; }
    2474:	addw	r5, r5, #1092	; 0x444
    2478:	movs	r3, #0
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
    247a:	mov	r2, r1
    247c:	mov	r0, sp
    247e:	mov	r1, r5
    2480:	str	r3, [sp, #0]
    2482:	bl	5c24 <FatFile::open(FatFile*, char const*, int)>
    2486:	cbnz	r0, 24ae <SDClass::rename(char const*, char const*)+0x46>
	}
    2488:	add	sp, #56	; 0x38
    248a:	pop	{r4, r5, r6, pc}
    248c:	ldr.w	r0, [r0, #1160]	; 0x488
           : m_xVol ? m_xVol->rename(oldPath, newPath)
    2490:	cmp	r0, #0
    2492:	beq.n	2488 <SDClass::rename(char const*, char const*)+0x20>
#endif  // ENABLE_ARDUINO_STRING

 private:
  friend ExFatFile;
  static ExFatVolume* cwv() { return m_cwv; }
  ExFatFile* vwd() { return &m_vwd; }
    2494:	add.w	r4, r0, #1096	; 0x448
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
    2498:	mov	r2, r1
    249a:	mov	r3, r5
    249c:	mov	r0, sp
    249e:	mov	r1, r4
    24a0:	str	r5, [sp, #48]	; 0x30
    24a2:	bl	3d5c <ExFatFile::open(ExFatFile*, char const*, int)>
    24a6:	cbnz	r0, 24bc <SDClass::rename(char const*, char const*)+0x54>
    24a8:	movs	r0, #0
    24aa:	add	sp, #56	; 0x38
    24ac:	pop	{r4, r5, r6, pc}
    24ae:	mov	r2, r6
    24b0:	mov	r1, r5
    24b2:	mov	r0, sp
    24b4:	bl	5fd0 <FatFile::rename(FatFile*, char const*)>
    24b8:	add	sp, #56	; 0x38
    24ba:	pop	{r4, r5, r6, pc}
    24bc:	mov	r2, r6
    24be:	mov	r1, r4
    24c0:	mov	r0, sp
    24c2:	bl	47c4 <ExFatFile::rename(ExFatFile*, char const*)>
    24c6:	cmp	r0, #0
    24c8:	beq.n	24a8 <SDClass::rename(char const*, char const*)+0x40>
    24ca:	b.n	2488 <SDClass::rename(char const*, char const*)+0x20>

000024cc <SDClass::remove(char const*)>:
	bool remove(const char *filepath) {
    24cc:	push	{r4, lr}
    return m_fVol   ? m_fVol->remove(path)
    24ce:	ldr.w	r4, [r0, #1156]	; 0x484
    24d2:	sub	sp, #56	; 0x38
    24d4:	mov	r2, r1
    24d6:	cbz	r4, 24ec <SDClass::remove(char const*)+0x20>
    24d8:	movs	r0, #0
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    24da:	movs	r3, #1
    24dc:	mov	r1, r4
    24de:	str	r0, [sp, #0]
    24e0:	mov	r0, sp
    24e2:	bl	5d1c <FatFile::open(FatVolume*, char const*, int)>
    24e6:	cbnz	r0, 250a <SDClass::remove(char const*)+0x3e>
	}
    24e8:	add	sp, #56	; 0x38
    24ea:	pop	{r4, pc}
    24ec:	ldr.w	r1, [r0, #1160]	; 0x488
           : m_xVol ? m_xVol->remove(path)
    24f0:	cbz	r1, 2504 <SDClass::remove(char const*)+0x38>
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    24f2:	movs	r3, #1
    24f4:	mov	r0, sp
    24f6:	str	r4, [sp, #48]	; 0x30
    24f8:	bl	3e50 <ExFatFile::open(ExFatVolume*, char const*, int)>
    24fc:	cbnz	r0, 2514 <SDClass::remove(char const*)+0x48>
    24fe:	movs	r0, #0
    2500:	add	sp, #56	; 0x38
    2502:	pop	{r4, pc}
    2504:	mov	r0, r1
    2506:	add	sp, #56	; 0x38
    2508:	pop	{r4, pc}
    250a:	mov	r0, sp
    250c:	bl	78e4 <FatFile::remove()>
    2510:	add	sp, #56	; 0x38
    2512:	pop	{r4, pc}
    2514:	mov	r0, sp
    2516:	bl	4468 <ExFatFile::remove()>
    251a:	cmp	r0, #0
    251c:	beq.n	24fe <SDClass::remove(char const*)+0x32>
    251e:	b.n	24e8 <SDClass::remove(char const*)+0x1c>

00002520 <SDClass::mkdir(char const*)>:
	bool mkdir(const char *filepath) {
    2520:	push	{r4, r5, lr}
    return m_fVol   ? m_fVol->mkdir(path, pFlag)
    2522:	ldr.w	r4, [r0, #1156]	; 0x484
    2526:	sub	sp, #60	; 0x3c
    2528:	mov	r2, r1
    252a:	cbz	r4, 2540 <SDClass::mkdir(char const*)+0x20>
    252c:	movs	r5, #0
    return sub.mkdir(vwd(), path, pFlag);
    252e:	movs	r3, #1
    2530:	addw	r1, r4, #1092	; 0x444
    2534:	mov	r0, sp
    2536:	str	r5, [sp, #0]
    2538:	bl	5ac4 <FatFile::mkdir(FatFile*, char const*, bool)>
	}
    253c:	add	sp, #60	; 0x3c
    253e:	pop	{r4, r5, pc}
    2540:	ldr.w	r0, [r0, #1160]	; 0x488
           : m_xVol ? m_xVol->mkdir(path, pFlag)
    2544:	cmp	r0, #0
    2546:	beq.n	253c <SDClass::mkdir(char const*)+0x1c>
    return sub.mkdir(vwd(), path, pFlag);
    2548:	add.w	r1, r0, #1096	; 0x448
    254c:	movs	r3, #1
    254e:	mov	r0, sp
    2550:	str	r4, [sp, #48]	; 0x30
    2552:	bl	48b0 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
    2556:	add	sp, #60	; 0x3c
    2558:	pop	{r4, r5, pc}
    255a:	nop

0000255c <SDClass::exists(char const*)>:
	bool exists(const char *filepath) {
    255c:	push	{r4, lr}
    return m_fVol   ? m_fVol->exists(path)
    255e:	ldr.w	r4, [r0, #1156]	; 0x484
    2562:	sub	sp, #56	; 0x38
    2564:	mov	r2, r1
    2566:	cbz	r4, 2578 <SDClass::exists(char const*)+0x1c>
    2568:	movs	r3, #0
    return tmp.open(this, path, O_RDONLY);
    256a:	mov	r1, r4
    256c:	mov	r0, sp
    256e:	str	r3, [sp, #0]
    2570:	bl	5d1c <FatFile::open(FatVolume*, char const*, int)>
	}
    2574:	add	sp, #56	; 0x38
    2576:	pop	{r4, pc}
    2578:	ldr.w	r1, [r0, #1160]	; 0x488
           : m_xVol ? m_xVol->exists(path)
    257c:	cbz	r1, 258c <SDClass::exists(char const*)+0x30>
    return tmp.open(this, path, O_RDONLY);
    257e:	mov	r3, r4
    2580:	mov	r0, sp
    2582:	str	r4, [sp, #48]	; 0x30
    2584:	bl	3e50 <ExFatFile::open(ExFatVolume*, char const*, int)>
    2588:	add	sp, #56	; 0x38
    258a:	pop	{r4, pc}
    258c:	mov	r0, r1
    258e:	add	sp, #56	; 0x38
    2590:	pop	{r4, pc}
    2592:	nop

00002594 <SDClass::format(int, char, Print&)>:
{
    2594:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  SdCard* card() { return m_card; }
    2598:	ldr.w	r5, [r0, #1164]	; 0x48c
    259c:	sub	sp, #60	; 0x3c
	if (!card) return false; // no SD card
    259e:	cbz	r5, 25b4 <SDClass::format(int, char, Print&)+0x20>
    25a0:	mov	r8, r3
	uint32_t sectors = card->sectorCount();
    25a2:	ldr	r3, [r5, #0]
    25a4:	mov	r4, r0
    25a6:	mov	r0, r5
    25a8:	ldr	r3, [r3, #24]
    25aa:	blx	r3
	if (sectors <= 12288) return false; // card too small
    25ac:	cmp.w	r0, #12288	; 0x3000
	uint32_t sectors = card->sectorCount();
    25b0:	mov	r6, r0
	if (sectors <= 12288) return false; // card too small
    25b2:	bhi.n	25be <SDClass::format(int, char, Print&)+0x2a>
	if (!card) return false; // no SD card
    25b4:	movs	r6, #0
}
    25b6:	mov	r0, r6
    25b8:	add	sp, #60	; 0x3c
    25ba:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint8_t *buf = (uint8_t *)malloc(512);
    25be:	mov.w	r0, #512	; 0x200
    25c2:	bl	f310 <malloc>
	if (!buf) return false; // unable to allocate memory
    25c6:	mov	r7, r0
    25c8:	cmp	r0, #0
    25ca:	beq.n	25b4 <SDClass::format(int, char, Print&)+0x20>
		ret = exFatFormatter.format(card, buf, &pr);
    25cc:	add.w	r9, sp, #12
	if (sectors > 67108864) {
    25d0:	cmp.w	r6, #67108864	; 0x4000000
		ret = exFatFormatter.format(card, buf, &pr);
    25d4:	mov	r2, r0
    25d6:	mov	r3, r8
    25d8:	mov	r1, r5
    25da:	mov	r0, r9
	if (sectors > 67108864) {
    25dc:	bls.n	263e <SDClass::format(int, char, Print&)+0xaa>
		ret = exFatFormatter.format(card, buf, &pr);
    25de:	bl	2dcc <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)>
    25e2:	mov	r6, r0
	free(buf);
    25e4:	mov	r0, r7
    25e6:	bl	f320 <free>
	if (ret) {
    25ea:	cmp	r6, #0
    25ec:	beq.n	25b4 <SDClass::format(int, char, Print&)+0x20>
		card->syncDevice();
    25ee:	ldr	r3, [r5, #0]
    25f0:	mov	r0, r5
		sdfs.restart(); // TODO: is sdfs.volumeBegin() enough??
    25f2:	adds	r7, r4, #4
		card->syncDevice();
    25f4:	ldr	r3, [r3, #28]
    25f6:	blx	r3
    if (spiConfigBackupPin == 255) {
    25f8:	ldrb.w	r3, [r4, #1212]	; 0x4bc
    25fc:	cmp	r3, #255	; 0xff
    25fe:	beq.n	2646 <SDClass::format(int, char, Print&)+0xb2>
      SdSpiConfig spiConfig(spiConfigBackupPin, spiConfigBackupOptions,
    2600:	ldr.w	r3, [r4, #1216]	; 0x4c0
   *
   * \param[in] config SPI configuration.
   * \return generic card pointer.
   */
  SdCard* newCard(SdSpiConfig config) {
    m_spiCard.begin(config);
    2604:	addw	r5, r4, #1180	; 0x49c
    2608:	str	r3, [sp, #16]
    260a:	mov	r0, r5
    260c:	ldr.w	r3, [r4, #1220]	; 0x4c4
  bool cardBegin(SdSpiConfig spiConfig) {
    2610:	str	r3, [sp, #20]
    2612:	ldrh.w	r3, [r4, #1212]	; 0x4bc
    2616:	strh.w	r3, [sp, #12]
    261a:	ldmia.w	r9, {r1, r2, r3}
    261e:	bl	94fc <DedicatedSpiCard::begin(SdSpiConfig)>
    return m_card && !m_card->errorCode();
    2622:	ldrb.w	r2, [r4, #1198]	; 0x4ae
    m_card = m_cardFactory.newCard(spiConfig);
    2626:	str.w	r5, [r4, #1164]	; 0x48c
    return m_card && !m_card->errorCode();
    262a:	cmp	r2, #0
    262c:	bne.n	25b6 <SDClass::format(int, char, Print&)+0x22>
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    262e:	movs	r3, #1
    2630:	str	r2, [sp, #0]
    2632:	mov	r1, r5
    2634:	mov	r0, r7
    2636:	mov	r2, r3
    2638:	bl	7c48 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)>
    263c:	b.n	25b6 <SDClass::format(int, char, Print&)+0x22>
		ret = fatFormatter.format(card, buf, &pr);
    263e:	bl	542c <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)>
    2642:	mov	r6, r0
    2644:	b.n	25e4 <SDClass::format(int, char, Print&)+0x50>
   * \param[in] config SDIO configuration.
   * \return generic card pointer or nullptr if SDIO is not supported.
   */
  SdCard* newCard(SdioConfig config) {
#if HAS_SDIO_CLASS
    m_sdioCard.begin(config);
    2646:	add.w	r5, r4, #1168	; 0x490
    264a:	ldrb.w	r1, [r4, #1224]	; 0x4c8
    264e:	mov	r0, r5
    2650:	bl	a3d8 <SdioCard::begin(SdioConfig)>
    return m_card && !m_card->errorCode();
    2654:	mov	r0, r5
    m_card = m_cardFactory.newCard(sdioConfig);
    2656:	str.w	r5, [r4, #1164]	; 0x48c
    return m_card && !m_card->errorCode();
    265a:	bl	9734 <SdioCard::errorCode() const>
    265e:	mov	r2, r0
    2660:	cmp	r0, #0
    2662:	bne.n	25b6 <SDClass::format(int, char, Print&)+0x22>
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    2664:	movs	r3, #1
    2666:	ldr.w	r1, [r4, #1164]	; 0x48c
    266a:	mov	r0, r7
    266c:	str	r2, [sp, #0]
    266e:	mov	r2, r3
    2670:	bl	7c48 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)>
      return begin(sdioConfigBackup);
    2674:	b.n	25b6 <SDClass::format(int, char, Print&)+0x22>
    2676:	nop

00002678 <SDClass::mediaPresent()>:
{
    2678:	push	{r4, r5, r6, r7, lr}
  SdCard* card() { return m_card; }
    267a:	ldr.w	r6, [r0, #1164]	; 0x48c
    267e:	sub	sp, #28
    2680:	mov	r4, r0
	if (card) {
    2682:	cmp	r6, #0
    2684:	beq.n	270e <SDClass::mediaPresent()+0x96>
		if (cardPreviouslyPresent) {
    2686:	ldrb.w	r5, [r0, #1228]	; 0x4cc
			if (csPin_ == BUILTIN_SDCARD) {
    268a:	ldrb.w	r3, [r0, #1229]	; 0x4cd
		if (cardPreviouslyPresent) {
    268e:	cbz	r5, 26b2 <SDClass::mediaPresent()+0x3a>
			if (csPin_ == BUILTIN_SDCARD) {
    2690:	cmp	r3, #254	; 0xfe
    2692:	beq.n	2762 <SDClass::mediaPresent()+0xea>
				if (cdPin_ < NUM_DIGITAL_PINS) ret = digitalRead(cdPin_);
    2694:	ldrb.w	r0, [r4, #1230]	; 0x4ce
    2698:	cmp	r0, #54	; 0x36
    269a:	bls.n	271a <SDClass::mediaPresent()+0xa2>
					ret = card->readCID(&cid);
    269c:	ldr	r3, [r6, #0]
    269e:	add	r1, sp, #8
    26a0:	mov	r0, r6
    26a2:	ldr	r3, [r3, #68]	; 0x44
    26a4:	blx	r3
    26a6:	mov	r5, r0
}
    26a8:	mov	r0, r5
	cardPreviouslyPresent = ret;
    26aa:	strb.w	r5, [r4, #1228]	; 0x4cc
}
    26ae:	add	sp, #28
    26b0:	pop	{r4, r5, r6, r7, pc}
			if (csPin_ == BUILTIN_SDCARD) ret = digitalReadFast(_SD_DAT3);
    26b2:	cmp	r3, #254	; 0xfe
    26b4:	beq.n	2706 <SDClass::mediaPresent()+0x8e>
				if (cdPin_ < NUM_DIGITAL_PINS) ret = digitalRead(cdPin_);
    26b6:	ldrb.w	r0, [r0, #1230]	; 0x4ce
    26ba:	cmp	r0, #54	; 0x36
    26bc:	bls.n	2758 <SDClass::mediaPresent()+0xe0>
    if (spiConfigBackupPin == 255) {
    26be:	ldrb.w	r3, [r4, #1212]	; 0x4bc
				ret = sdfs.restart();
    26c2:	adds	r7, r4, #4
    26c4:	cmp	r3, #255	; 0xff
    26c6:	beq.n	2726 <SDClass::mediaPresent()+0xae>
      SdSpiConfig spiConfig(spiConfigBackupPin, spiConfigBackupOptions,
    26c8:	ldr.w	r3, [r4, #1216]	; 0x4c0
    m_spiCard.begin(config);
    26cc:	addw	r6, r4, #1180	; 0x49c
    26d0:	ldr.w	r2, [r4, #1220]	; 0x4c4
  bool cardBegin(SdSpiConfig spiConfig) {
    26d4:	str	r3, [sp, #12]
    26d6:	mov	r0, r6
    26d8:	ldrh.w	r3, [r4, #1212]	; 0x4bc
    26dc:	str	r2, [sp, #16]
    26de:	strh.w	r3, [sp, #8]
    26e2:	add	r3, sp, #8
    26e4:	ldmia	r3, {r1, r2, r3}
    26e6:	bl	94fc <DedicatedSpiCard::begin(SdSpiConfig)>
    return m_card && !m_card->errorCode();
    26ea:	ldrb.w	r2, [r4, #1198]	; 0x4ae
    m_card = m_cardFactory.newCard(spiConfig);
    26ee:	str.w	r6, [r4, #1164]	; 0x48c
    return m_card && !m_card->errorCode();
    26f2:	cbnz	r2, 2710 <SDClass::mediaPresent()+0x98>
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    26f4:	movs	r3, #1
    26f6:	str	r2, [sp, #0]
    26f8:	mov	r1, r6
    26fa:	mov	r0, r7
    26fc:	mov	r2, r3
    26fe:	bl	7c48 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)>
    2702:	mov	r5, r0
    2704:	b.n	2710 <SDClass::mediaPresent()+0x98>
			return (CORE_PIN46_PINREG & CORE_PIN46_BITMASK) ? 1 : 0;
    2706:	ldr	r3, [pc, #128]	; (2788 <SDClass::mediaPresent()+0x110>)
    2708:	ldr	r3, [r3, #8]
			if (ret)
    270a:	lsls	r3, r3, #14
    270c:	bmi.n	26be <SDClass::mediaPresent()+0x46>
		ret = false;
    270e:	movs	r5, #0
}
    2710:	mov	r0, r5
	cardPreviouslyPresent = ret;
    2712:	strb.w	r5, [r4, #1228]	; 0x4cc
}
    2716:	add	sp, #28
    2718:	pop	{r4, r5, r6, r7, pc}
				if (cdPin_ < NUM_DIGITAL_PINS) ret = digitalRead(cdPin_);
    271a:	bl	d158 <digitalRead>
    271e:	subs	r5, r0, #0
    2720:	it	ne
    2722:	movne	r5, #1
    2724:	b.n	2710 <SDClass::mediaPresent()+0x98>
    m_sdioCard.begin(config);
    2726:	add.w	r6, r4, #1168	; 0x490
    272a:	ldrb.w	r1, [r4, #1224]	; 0x4c8
    272e:	mov	r0, r6
    2730:	bl	a3d8 <SdioCard::begin(SdioConfig)>
    return m_card && !m_card->errorCode();
    2734:	mov	r0, r6
    m_card = m_cardFactory.newCard(sdioConfig);
    2736:	str.w	r6, [r4, #1164]	; 0x48c
    return m_card && !m_card->errorCode();
    273a:	bl	9734 <SdioCard::errorCode() const>
    273e:	mov	r2, r0
    2740:	cmp	r0, #0
    2742:	bne.n	2710 <SDClass::mediaPresent()+0x98>
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    2744:	movs	r3, #1
    2746:	str	r2, [sp, #0]
    2748:	mov	r0, r7
    274a:	ldr.w	r1, [r4, #1164]	; 0x48c
    274e:	mov	r2, r3
    2750:	bl	7c48 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)>
    2754:	mov	r5, r0
      return begin(sdioConfigBackup);
    2756:	b.n	2710 <SDClass::mediaPresent()+0x98>
				if (cdPin_ < NUM_DIGITAL_PINS) ret = digitalRead(cdPin_);
    2758:	bl	d158 <digitalRead>
			if (ret)
    275c:	cmp	r0, #0
    275e:	bne.n	26be <SDClass::mediaPresent()+0x46>
    2760:	b.n	270e <SDClass::mediaPresent()+0x96>
				s = card->status();
    2762:	ldr	r3, [r6, #0]
    2764:	mov	r0, r6
    2766:	ldr	r3, [r3, #88]	; 0x58
    2768:	blx	r3
			if (s == 0xFFFFFFFF) {
    276a:	adds	r2, r0, #1
				s = card->status();
    276c:	mov	r3, r0
			if (s == 0xFFFFFFFF) {
    276e:	beq.n	2694 <SDClass::mediaPresent()+0x1c>
			} else if (s == 0) {
    2770:	cmp	r0, #0
    2772:	bne.n	2710 <SDClass::mediaPresent()+0x98>
				if (csPin_ == BUILTIN_SDCARD) 
    2774:	ldrb.w	r2, [r4, #1229]	; 0x4cd
    2778:	cmp	r2, #254	; 0xfe
    277a:	bne.n	270e <SDClass::mediaPresent()+0x96>
					pinMode(_SD_DAT3, INPUT_PULLDOWN);
    277c:	movs	r1, #3
    277e:	movs	r0, #46	; 0x2e
				ret = false;
    2780:	mov	r5, r3
					pinMode(_SD_DAT3, INPUT_PULLDOWN);
    2782:	bl	d17c <pinMode>
    2786:	b.n	2710 <SDClass::mediaPresent()+0x98>
    2788:	.word	0x42008000

0000278c <SDClass::begin(unsigned char)>:
bool SDClass::begin(uint8_t csPin) {
    278c:	push	{r4, r5, r6, r7, lr}
    278e:	mov	r5, r1
    2790:	mov	r4, r0
    2792:	sub	sp, #28
	FsDateTime::setCallback(dateTime);
    2794:	ldr	r0, [pc, #196]	; (285c <SDClass::begin(unsigned char)+0xd0>)
    2796:	bl	2b5c <FsDateTime::setCallback(void (*)(unsigned short*, unsigned short*))>
	if (csPin == BUILTIN_SDCARD) {
    279a:	cmp	r5, #254	; 0xfe
	csPin_ = csPin; // remember which one passed in. 
    279c:	strb.w	r5, [r4, #1229]	; 0x4cd
	if (csPin == BUILTIN_SDCARD) {
    27a0:	beq.n	27f0 <SDClass::begin(unsigned char)+0x64>
	if (csPin < NUM_DIGITAL_PINS) {
    27a2:	cmp	r5, #54	; 0x36
    27a4:	bls.n	27ac <SDClass::begin(unsigned char)+0x20>
	return false;
    27a6:	movs	r0, #0
}
    27a8:	add	sp, #28
    27aa:	pop	{r4, r5, r6, r7, pc}
    spiConfigBackupOptions = spiConfig.options;
    27ac:	movs	r6, #0
    spiConfigBackupClock = spiConfig.maxSck;
    27ae:	ldr	r3, [pc, #176]	; (2860 <SDClass::begin(unsigned char)+0xd4>)
    m_spiCard.begin(config);
    27b0:	addw	r7, r4, #1180	; 0x49c
    27b4:	strb.w	r5, [sp, #12]
    27b8:	str.w	r3, [r4, #1216]	; 0x4c0
    27bc:	strb.w	r6, [sp, #13]
    27c0:	mov	r0, r7
    spiConfigBackupPin = spiConfig.csPin; 
    27c2:	strb.w	r5, [r4, #1212]	; 0x4bc
    spiConfigBackupOptions = spiConfig.options;
    27c6:	strb.w	r6, [r4, #1213]	; 0x4bd
    spiConfigBackupPort = spiConfig.spiPort;
    27ca:	str.w	r6, [r4, #1220]	; 0x4c4
    27ce:	strd	r3, r6, [sp, #16]
    27d2:	add	r3, sp, #24
    27d4:	ldmdb	r3, {r1, r2, r3}
    27d8:	bl	94fc <DedicatedSpiCard::begin(SdSpiConfig)>
    return m_card && !m_card->errorCode();
    27dc:	ldrb.w	r2, [r4, #1198]	; 0x4ae
    m_card = m_cardFactory.newCard(spiConfig);
    27e0:	str.w	r7, [r4, #1164]	; 0x48c
    return m_card && !m_card->errorCode();
    27e4:	cbz	r2, 284c <SDClass::begin(unsigned char)+0xc0>
    return cardBegin(spiConfig) && Vol::begin(m_card);
    27e6:	mov	r0, r6
		cardPreviouslyPresent = ret;
    27e8:	strb.w	r0, [r4, #1228]	; 0x4cc
}
    27ec:	add	sp, #28
    27ee:	pop	{r4, r5, r6, r7, pc}
    sdioConfigBackup = sdioConfig;
    27f0:	movs	r3, #0
    spiConfigBackupPin = 255; // Teensy
    27f2:	movs	r2, #255	; 0xff
    m_sdioCard.begin(config);
    27f4:	add.w	r5, r4, #1168	; 0x490
    27f8:	strb.w	r2, [r4, #1212]	; 0x4bc
    27fc:	mov	r1, r3
    sdioConfigBackup = sdioConfig;
    27fe:	strb.w	r3, [r4, #1224]	; 0x4c8
    2802:	mov	r0, r5
    2804:	bl	a3d8 <SdioCard::begin(SdioConfig)>
    return m_card && !m_card->errorCode();
    2808:	mov	r0, r5
    m_card = m_cardFactory.newCard(sdioConfig);
    280a:	str.w	r5, [r4, #1164]	; 0x48c
    return m_card && !m_card->errorCode();
    280e:	bl	9734 <SdioCard::errorCode() const>
    2812:	mov	r2, r0
    2814:	cbnz	r0, 2836 <SDClass::begin(unsigned char)+0xaa>
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    2816:	movs	r3, #1
    2818:	ldr.w	r1, [r4, #1164]	; 0x48c
    281c:	adds	r0, r4, #4
    281e:	str	r2, [sp, #0]
    2820:	mov	r2, r3
    2822:	bl	7c48 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)>
    2826:	cbz	r0, 2836 <SDClass::begin(unsigned char)+0xaa>
		cardPreviouslyPresent = ret;
    2828:	movs	r2, #1
		cdPin_ = _SD_DAT3;
    282a:	movs	r3, #46	; 0x2e
		cardPreviouslyPresent = ret;
    282c:	strb.w	r2, [r4, #1228]	; 0x4cc
		cdPin_ = _SD_DAT3;
    2830:	strb.w	r3, [r4, #1230]	; 0x4ce
		if (!ret) pinMode(_SD_DAT3, INPUT_PULLDOWN);
    2834:	b.n	27a8 <SDClass::begin(unsigned char)+0x1c>
		cdPin_ = _SD_DAT3;
    2836:	movs	r0, #46	; 0x2e
		cardPreviouslyPresent = ret;
    2838:	movs	r5, #0
		if (!ret) pinMode(_SD_DAT3, INPUT_PULLDOWN);
    283a:	movs	r1, #3
		cdPin_ = _SD_DAT3;
    283c:	strb.w	r0, [r4, #1230]	; 0x4ce
		cardPreviouslyPresent = ret;
    2840:	strb.w	r5, [r4, #1228]	; 0x4cc
		if (!ret) pinMode(_SD_DAT3, INPUT_PULLDOWN);
    2844:	bl	d17c <pinMode>
    2848:	mov	r0, r5
    284a:	b.n	27a8 <SDClass::begin(unsigned char)+0x1c>
    284c:	movs	r3, #1
    284e:	str	r2, [sp, #0]
    2850:	mov	r1, r7
    2852:	adds	r0, r4, #4
    2854:	mov	r2, r3
    2856:	bl	7c48 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)>
    285a:	b.n	27e8 <SDClass::begin(unsigned char)+0x5c>
    285c:	.word	0x00002191
    2860:	.word	0x017d7840

00002864 <_GLOBAL__sub_I_SD>:
	SDClass() { }
    2864:	ldr	r0, [pc, #104]	; (28d0 <_GLOBAL__sub_I_SD+0x6c>)
  FsVolume() = default;
    2866:	movs	r3, #0
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
    2868:	ldr	r2, [pc, #104]	; (28d4 <_GLOBAL__sub_I_SD+0x70>)
    286a:	movw	ip, #65535	; 0xffff
    286e:	ldr	r1, [pc, #104]	; (28d8 <_GLOBAL__sub_I_SD+0x74>)
	}
	return true;
}
    2870:	push	{r4}
    2872:	str.w	r2, [r0, #1168]	; 0x490
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
    2876:	movs	r2, #7
    2878:	str	r1, [r0, #0]
  /** SD is in multi-sector read state. */
  static const uint8_t READ_STATE = 1;
  /** SD is in multi-sector write state. */
  static const uint8_t WRITE_STATE = 2;
  /** Construct an instance of SharedSpiCard. */
  SharedSpiCard() { initSharedSpiCard(); }
    287a:	mov.w	r1, #2752512	; 0x2a0000
	SPISettings() : _clock(4000000) {
    287e:	ldr	r4, [pc, #92]	; (28dc <_GLOBAL__sub_I_SD+0x78>)
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
    2880:	str.w	r2, [r0, #1192]	; 0x4a8
 * \brief Raw access to SD and SDHC flash memory cards via dedicate SPI port.
 */
class DedicatedSpiCard : public SharedSpiCard {
 public:
  /** Construct an instance of DedicatedSpiCard. */
  DedicatedSpiCard() = default;
    2884:	ldr	r2, [pc, #88]	; (28e0 <_GLOBAL__sub_I_SD+0x7c>)
  SharedSpiCard() { initSharedSpiCard(); }
    2886:	str.w	r1, [r0, #1196]	; 0x4ac
  SdioConfig() {}
    288a:	strh.w	r3, [r0, #1176]	; 0x498
    m_state = IDLE_STATE;
    288e:	strh.w	r3, [r0, #1200]	; 0x4b0
    m_type = 0;
    2892:	strb.w	r3, [r0, #1202]	; 0x4b2
    2896:	strb.w	r3, [r0, #1224]	; 0x4c8
    289a:	strh.w	ip, [r0, #1229]	; 0x4cd
	SPISettings() : _clock(4000000) {
    289e:	str.w	r4, [r0, #1188]	; 0x4a4
  DedicatedSpiCard() = default;
    28a2:	str.w	r2, [r0, #1180]	; 0x49c
SDClass SD;
    28a6:	ldr	r1, [pc, #60]	; (28e4 <_GLOBAL__sub_I_SD+0x80>)
    28a8:	ldr	r2, [pc, #60]	; (28e8 <_GLOBAL__sub_I_SD+0x84>)
}
    28aa:	ldr.w	r4, [sp], #4
    28ae:	str.w	r3, [r0, #1156]	; 0x484
    28b2:	str.w	r3, [r0, #1160]	; 0x488
class SdBase : public Vol {
    28b6:	str.w	r3, [r0, #1164]	; 0x48c
 * \brief Optimized SPI class for access to SD and SDHC flash memory cards.
 */
class SdSpiArduinoDriver {
 public:
  /** Constructor. */
  SdSpiArduinoDriver() = default;
    28ba:	str.w	r3, [r0, #1184]	; 0x4a0
    28be:	str.w	r3, [r0, #1204]	; 0x4b4
    28c2:	strb.w	r3, [r0, #1208]	; 0x4b8
    28c6:	strb.w	r3, [r0, #1228]	; 0x4cc
SDClass SD;
    28ca:	b.w	f304 <__aeabi_atexit>
    28ce:	nop
    28d0:	.word	0x20005d08
    28d4:	.word	0x20000aac
    28d8:	.word	0x20000a58
    28dc:	.word	0x003d0900
    28e0:	.word	0x200008e0
    28e4:	.word	0x0000218d
    28e8:	.word	0x20001c44

000028ec <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)>:
  uint32_t c;
  uint8_t h;
  uint8_t s;

  uint8_t numberOfHeads;
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
    28ec:	cmp.w	r1, #256	; 0x100
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba) {
    28f0:	push	{r4, r5, r6, r7, lr}
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
    28f2:	bhi.n	2934 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x48>
  if (capacityMB <= 16) {
    28f4:	cmp	r1, #16
    28f6:	bhi.n	2980 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x94>
    28f8:	movs	r3, #64	; 0x40
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
    28fa:	mov.w	ip, #32
  } else if (capacityMB <= 4032) {
    numberOfHeads = 128;
  } else {
    numberOfHeads = 255;
  }
  c = lba / (numberOfHeads * sectorsPerTrack);
    28fe:	udiv	r1, r2, r3
  if (c <= 1023) {
    2902:	cmp.w	r1, #1024	; 0x400
    2906:	bcs.n	2972 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x86>
    h = (lba % (numberOfHeads * sectorsPerTrack)) / sectorsPerTrack;
    2908:	mls	r3, r3, r1, r2
    s = (lba % sectorsPerTrack) + 1;
    290c:	udiv	lr, r2, ip
    h = (lba % (numberOfHeads * sectorsPerTrack)) / sectorsPerTrack;
    2910:	udiv	r3, r3, ip
    s = (lba % sectorsPerTrack) + 1;
    2914:	mls	r2, ip, lr, r2
    c = 1023;
    h = 254;
    s = 63;
  }
  chs[0] = h;
  chs[1] = ((c >> 2) & 0XC0) | s;
    2918:	mov.w	ip, r1, lsr #2
    h = (lba % (numberOfHeads * sectorsPerTrack)) / sectorsPerTrack;
    291c:	uxtb	r3, r3
    s = (lba % sectorsPerTrack) + 1;
    291e:	adds	r2, #1
  chs[1] = ((c >> 2) & 0XC0) | s;
    2920:	bic.w	ip, ip, #63	; 0x3f
  chs[2] = c;
    2924:	uxtb	r1, r1
  chs[0] = h;
    2926:	strb	r3, [r0, #0]
  chs[1] = ((c >> 2) & 0XC0) | s;
    2928:	orr.w	r2, r2, ip
  chs[2] = c;
    292c:	strb	r1, [r0, #2]
  chs[1] = ((c >> 2) & 0XC0) | s;
    292e:	uxtb	r2, r2
    2930:	strb	r2, [r0, #1]
}
    2932:	pop	{r4, r5, r6, r7, pc}
    2934:	mov.w	r3, #504	; 0x1f8
    2938:	mov.w	lr, #1008	; 0x3f0
    293c:	mov.w	r4, #2016	; 0x7e0
    2940:	mov.w	r5, #4032	; 0xfc0
    2944:	mov.w	r7, #8064	; 0x1f80
    2948:	movw	r6, #16065	; 0x3ec1
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
    294c:	mov.w	ip, #63	; 0x3f
  } else if (capacityMB <= 128) {
    2950:	cmp	r1, #128	; 0x80
    2952:	bls.n	28fe <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x12>
  } else if (capacityMB <= 504) {
    2954:	cmp.w	r1, #504	; 0x1f8
    2958:	bls.n	298c <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0xa0>
  } else if (capacityMB <= 1008) {
    295a:	cmp.w	r1, #1008	; 0x3f0
    295e:	bls.n	2990 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0xa4>
  } else if (capacityMB <= 2016) {
    2960:	cmp.w	r1, #2016	; 0x7e0
    2964:	bls.n	2994 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0xa8>
  } else if (capacityMB <= 4032) {
    2966:	cmp.w	r1, #4032	; 0xfc0
    296a:	ite	ls
    296c:	movls	r3, r7
    296e:	movhi	r3, r6
    2970:	b.n	28fe <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x12>
    2972:	movs	r1, #255	; 0xff
    h = 254;
    2974:	movs	r3, #254	; 0xfe
    2976:	mov	r2, r1
  chs[0] = h;
    2978:	strb	r3, [r0, #0]
  chs[2] = c;
    297a:	strb	r1, [r0, #2]
  chs[1] = ((c >> 2) & 0XC0) | s;
    297c:	strb	r2, [r0, #1]
}
    297e:	pop	{r4, r5, r6, r7, pc}
  } else if (capacityMB <= 32) {
    2980:	cmp	r1, #32
    2982:	bhi.n	2998 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0xac>
    2984:	movs	r3, #128	; 0x80
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
    2986:	mov.w	ip, #32
    298a:	b.n	28fe <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x12>
    298c:	mov	r3, lr
    298e:	b.n	28fe <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x12>
    2990:	mov	r3, r4
    2992:	b.n	28fe <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x12>
    2994:	mov	r3, r5
    2996:	b.n	28fe <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x12>
    2998:	mov.w	r3, #256	; 0x100
    299c:	mov.w	lr, #512	; 0x200
    29a0:	mov.w	r4, #1024	; 0x400
    29a4:	mov.w	r5, #2048	; 0x800
    29a8:	mov.w	r7, #4096	; 0x1000
    29ac:	mov.w	r6, #8160	; 0x1fe0
    29b0:	mov.w	ip, #32
    29b4:	b.n	2950 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x64>
    29b6:	nop

000029b8 <FsCache::prepare(unsigned long, unsigned char)>:
#define DBG_FILE "FsCache.cpp"
#include "FsCache.h"

#include "DebugMacros.h"
//------------------------------------------------------------------------------
uint8_t* FsCache::prepare(uint32_t sector, uint8_t option) {
    29b8:	push	{r3, r4, r5, r6, r7, lr}
    29ba:	mov	r4, r0
  if (!m_blockDev) {
    29bc:	ldr	r0, [r0, #4]
    29be:	cmp	r0, #0
    29c0:	beq.n	2a28 <FsCache::prepare(unsigned long, unsigned char)+0x70>
    29c2:	mov	r7, r1
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_sector != sector) {
    29c4:	ldr	r1, [r4, #8]
    29c6:	mov	r5, r2
    29c8:	cmp	r1, r7
    29ca:	beq.n	2a2e <FsCache::prepare(unsigned long, unsigned char)+0x76>
fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    29cc:	ldrb	r2, [r4, #0]
    29ce:	lsls	r6, r2, #31
    29d0:	bmi.n	29f8 <FsCache::prepare(unsigned long, unsigned char)+0x40>
    if (!m_blockDev->writeSector(m_sector, m_buffer)) {
    29d2:	add.w	r6, r4, #16
    if (!(option & CACHE_OPTION_NO_READ)) {
    29d6:	lsls	r3, r5, #29
    29d8:	bmi.n	29e8 <FsCache::prepare(unsigned long, unsigned char)+0x30>
      if (!m_blockDev->readSector(sector, m_buffer)) {
    29da:	ldr	r0, [r4, #4]
    29dc:	mov	r2, r6
    29de:	mov	r1, r7
    29e0:	ldr	r3, [r0, #0]
    29e2:	ldr	r3, [r3, #16]
    29e4:	blx	r3
    29e6:	cbz	r0, 2a28 <FsCache::prepare(unsigned long, unsigned char)+0x70>
    m_sector = sector;
    29e8:	movs	r3, #0
    29ea:	str	r7, [r4, #8]
  m_status |= option & CACHE_STATUS_MASK;
    29ec:	and.w	r5, r5, #3
}
    29f0:	mov	r0, r6
  m_status |= option & CACHE_STATUS_MASK;
    29f2:	orrs	r3, r5
    29f4:	strb	r3, [r4, #0]
}
    29f6:	pop	{r3, r4, r5, r6, r7, pc}
    if (!m_blockDev->writeSector(m_sector, m_buffer)) {
    29f8:	ldr	r3, [r0, #0]
    29fa:	add.w	r6, r4, #16
    29fe:	ldr	r3, [r3, #32]
    2a00:	mov	r2, r6
    2a02:	blx	r3
    2a04:	cbz	r0, 2a28 <FsCache::prepare(unsigned long, unsigned char)+0x70>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    2a06:	ldrb	r3, [r4, #0]
    2a08:	lsls	r2, r3, #30
    2a0a:	bpl.n	2a20 <FsCache::prepare(unsigned long, unsigned char)+0x68>
      if (!m_blockDev->writeSector(m_sector + m_mirrorOffset, m_buffer)) {
    2a0c:	ldr	r3, [r4, #12]
    2a0e:	mov	r2, r6
    2a10:	ldrd	r0, r1, [r4, #4]
    2a14:	add	r1, r3
    2a16:	ldr	r3, [r0, #0]
    2a18:	ldr	r3, [r3, #32]
    2a1a:	blx	r3
    2a1c:	cbz	r0, 2a28 <FsCache::prepare(unsigned long, unsigned char)+0x70>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    2a1e:	ldrb	r3, [r4, #0]
    2a20:	bic.w	r3, r3, #1
    2a24:	strb	r3, [r4, #0]
    2a26:	b.n	29d6 <FsCache::prepare(unsigned long, unsigned char)+0x1e>
  return nullptr;
    2a28:	movs	r6, #0
}
    2a2a:	mov	r0, r6
    2a2c:	pop	{r3, r4, r5, r6, r7, pc}
  if (m_status & CACHE_STATUS_DIRTY) {
    2a2e:	mov	r6, r4
    2a30:	ldrb.w	r3, [r6], #16
    2a34:	b.n	29ec <FsCache::prepare(unsigned long, unsigned char)+0x34>
    2a36:	nop

00002a38 <FsCache::sync()>:
bool FsCache::sync() {
    2a38:	push	{r4, r5, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
    2a3a:	ldrb	r3, [r0, #0]
bool FsCache::sync() {
    2a3c:	sub	sp, #12
  if (m_status & CACHE_STATUS_DIRTY) {
    2a3e:	lsls	r4, r3, #31
    2a40:	bpl.n	2a7e <FsCache::sync()+0x46>
    if (!m_blockDev->writeSector(m_sector, m_buffer)) {
    2a42:	mov	r4, r0
    2a44:	ldr	r0, [r0, #4]
    2a46:	add.w	r2, r4, #16
    2a4a:	ldr	r3, [r0, #0]
    2a4c:	ldr	r1, [r4, #8]
    2a4e:	str	r2, [sp, #4]
    2a50:	ldr	r3, [r3, #32]
    2a52:	blx	r3
    2a54:	ldr	r2, [sp, #4]
    2a56:	mov	r5, r0
    2a58:	cbz	r0, 2a86 <FsCache::sync()+0x4e>
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    2a5a:	ldrb	r3, [r4, #0]
    2a5c:	lsls	r1, r3, #30
    2a5e:	bpl.n	2a72 <FsCache::sync()+0x3a>
      if (!m_blockDev->writeSector(m_sector + m_mirrorOffset, m_buffer)) {
    2a60:	ldr	r3, [r4, #12]
    2a62:	ldrd	r0, r1, [r4, #4]
    2a66:	add	r1, r3
    2a68:	ldr	r3, [r0, #0]
    2a6a:	ldr	r3, [r3, #32]
    2a6c:	blx	r3
    2a6e:	cbz	r0, 2a86 <FsCache::sync()+0x4e>
    m_status &= ~CACHE_STATUS_DIRTY;
    2a70:	ldrb	r3, [r4, #0]
    2a72:	bic.w	r3, r3, #1
  }
  return true;

fail:
  return false;
}
    2a76:	mov	r0, r5
    m_status &= ~CACHE_STATUS_DIRTY;
    2a78:	strb	r3, [r4, #0]
}
    2a7a:	add	sp, #12
    2a7c:	pop	{r4, r5, pc}
  return true;
    2a7e:	movs	r5, #1
}
    2a80:	mov	r0, r5
    2a82:	add	sp, #12
    2a84:	pop	{r4, r5, pc}
  return false;
    2a86:	movs	r5, #0
}
    2a88:	mov	r0, r5
    2a8a:	add	sp, #12
    2a8c:	pop	{r4, r5, pc}
    2a8e:	nop

00002a90 <toUpcase(unsigned short)>:
}
//------------------------------------------------------------------------------
uint16_t toUpcase(uint16_t chr) {
  uint16_t i, first;
  // Optimize for simple ASCII.
  if (chr < 127) {
    2a90:	cmp	r0, #126	; 0x7e
    2a92:	bls.n	2b12 <toUpcase(unsigned short)+0x82>
  size_t right = size;
    2a94:	mov.w	ip, #53	; 0x35
  size_t left = 0;
    2a98:	movs	r3, #0
uint16_t toUpcase(uint16_t chr) {
    2a9a:	push	{r4, r5}
    2a9c:	ldr	r4, [pc, #160]	; (2b40 <toUpcase(unsigned short)+0xb0>)
    2a9e:	b.n	2aaa <toUpcase(unsigned short)+0x1a>
    if (readTable16(table[mid].key) <= key) {
    2aa0:	ldrh.w	r2, [r4, r1, lsl #2]
    2aa4:	cmp	r2, r0
    2aa6:	bhi.n	2aea <toUpcase(unsigned short)+0x5a>
    size_t mid = left + (right - left) / 2;
    2aa8:	mov	r3, r1
  while (right - left > 1) {
    2aaa:	sub.w	r2, ip, r3
    2aae:	cmp	r2, #1
    size_t mid = left + (right - left) / 2;
    2ab0:	add.w	r1, r3, r2, lsr #1
  while (right - left > 1) {
    2ab4:	bhi.n	2aa0 <toUpcase(unsigned short)+0x10>
    return chr - ('a' <= chr && chr <= 'z' ? 'a' - 'A' : 0);
  }
  i = searchPair16(reinterpret_cast<const pair16_t*>(mapTable), MAP_DIM, chr);
  first = readTable16(mapTable[i].base);
    2ab6:	uxth	r3, r3
    2ab8:	ldrh.w	r2, [r4, r3, lsl #2]
  if (first <= chr && (chr - first) < readTable8(mapTable[i].count)) {
    2abc:	cmp	r0, r2
    2abe:	bcs.n	2aee <toUpcase(unsigned short)+0x5e>
    2ac0:	movs	r4, #75	; 0x4b
    2ac2:	movs	r3, #0
    2ac4:	ldr	r5, [pc, #124]	; (2b44 <toUpcase(unsigned short)+0xb4>)
    2ac6:	b.n	2ad2 <toUpcase(unsigned short)+0x42>
    if (readTable16(table[mid].key) <= key) {
    2ac8:	ldrh.w	r2, [r5, r1, lsl #2]
    2acc:	cmp	r2, r0
    2ace:	bhi.n	2b0e <toUpcase(unsigned short)+0x7e>
    size_t mid = left + (right - left) / 2;
    2ad0:	mov	r3, r1
  while (right - left > 1) {
    2ad2:	subs	r2, r4, r3
    2ad4:	cmp	r2, #1
    size_t mid = left + (right - left) / 2;
    2ad6:	add.w	r1, r3, r2, lsr #1
  while (right - left > 1) {
    2ada:	bhi.n	2ac8 <toUpcase(unsigned short)+0x38>
      return chr - ((chr - first) & 1);
    }
    return chr + (off ? off : -0x1C60);
  }
  i = searchPair16(lookupTable, LOOKUP_DIM, chr);
  if (readTable16(lookupTable[i].key) == chr) {
    2adc:	uxth	r3, r3
    2ade:	ldrh.w	r2, [r5, r3, lsl #2]
    2ae2:	cmp	r2, r0
    2ae4:	beq.n	2b26 <toUpcase(unsigned short)+0x96>
    return readTable16(lookupTable[i].val);
  }
  return chr;
}
    2ae6:	pop	{r4, r5}
    2ae8:	bx	lr
    size_t mid = left + (right - left) / 2;
    2aea:	mov	ip, r1
    2aec:	b.n	2aaa <toUpcase(unsigned short)+0x1a>
  if (first <= chr && (chr - first) < readTable8(mapTable[i].count)) {
    2aee:	add.w	r4, r4, r3, lsl #2
    2af2:	subs	r2, r0, r2
    2af4:	ldrb	r3, [r4, #3]
    2af6:	cmp	r2, r3
    2af8:	bge.n	2ac0 <toUpcase(unsigned short)+0x30>
    int8_t off = readTable8(mapTable[i].off);
    2afa:	ldrsb.w	r3, [r4, #2]
    if (off == 1) {
    2afe:	cmp	r3, #1
    2b00:	beq.n	2b30 <toUpcase(unsigned short)+0xa0>
    return chr + (off ? off : -0x1C60);
    2b02:	cbz	r3, 2b3a <toUpcase(unsigned short)+0xaa>
    2b04:	uxth	r3, r3
    2b06:	add	r3, r0
}
    2b08:	pop	{r4, r5}
    return chr + (off ? off : -0x1C60);
    2b0a:	uxth	r0, r3
}
    2b0c:	bx	lr
    size_t mid = left + (right - left) / 2;
    2b0e:	mov	r4, r1
    2b10:	b.n	2ad2 <toUpcase(unsigned short)+0x42>
    return chr - ('a' <= chr && chr <= 'z' ? 'a' - 'A' : 0);
    2b12:	sub.w	r3, r0, #97	; 0x61
    2b16:	cmp	r3, #25
    2b18:	ite	hi
    2b1a:	movhi	r3, #0
    2b1c:	movls	r3, #1
    2b1e:	sub.w	r3, r0, r3, lsl #5
    2b22:	uxth	r0, r3
}
    2b24:	bx	lr
    return readTable16(lookupTable[i].val);
    2b26:	add.w	r5, r5, r3, lsl #2
    2b2a:	ldrh	r0, [r5, #2]
}
    2b2c:	pop	{r4, r5}
    2b2e:	bx	lr
      return chr - ((chr - first) & 1);
    2b30:	and.w	r2, r2, #1
    2b34:	subs	r3, r0, r2
    2b36:	uxth	r0, r3
    2b38:	b.n	2ae6 <toUpcase(unsigned short)+0x56>
    return chr + (off ? off : -0x1C60);
    2b3a:	movw	r3, #58272	; 0xe3a0
    2b3e:	b.n	2b06 <toUpcase(unsigned short)+0x76>
    2b40:	.word	0x2000059c
    2b44:	.word	0x20000470

00002b48 <dateTimeMs10(unsigned short*, unsigned short*, unsigned char*)>:

#include "FmtNumber.h"
#include "SysCall.h"

static void dateTimeMs10(uint16_t* date, uint16_t* time, uint8_t* ms10) {
  *ms10 = 0;
    2b48:	mov.w	ip, #0
  FsDateTime::callback2(date, time);
    2b4c:	ldr	r3, [pc, #8]	; (2b58 <dateTimeMs10(unsigned short*, unsigned short*, unsigned char*)+0x10>)
  *ms10 = 0;
    2b4e:	strb.w	ip, [r2]
  FsDateTime::callback2(date, time);
    2b52:	ldr	r3, [r3, #0]
    2b54:	bx	r3
    2b56:	nop
    2b58:	.word	0x20007720

00002b5c <FsDateTime::setCallback(void (*)(unsigned short*, unsigned short*))>:
namespace FsDateTime {
void (*callback)(uint16_t* date, uint16_t* time, uint8_t* ms10) = nullptr;
void (*callback2)(uint16_t* date, uint16_t* time) = nullptr;
void clearCallback() { callback = nullptr; }
void setCallback(void (*dateTime)(uint16_t* date, uint16_t* time)) {
  callback = dateTimeMs10;
    2b5c:	ldr	r2, [pc, #8]	; (2b68 <FsDateTime::setCallback(void (*)(unsigned short*, unsigned short*))+0xc>)
    2b5e:	ldr	r1, [pc, #12]	; (2b6c <FsDateTime::setCallback(void (*)(unsigned short*, unsigned short*))+0x10>)
  callback2 = dateTime;
    2b60:	ldr	r3, [pc, #12]	; (2b70 <FsDateTime::setCallback(void (*)(unsigned short*, unsigned short*))+0x14>)
  callback = dateTimeMs10;
    2b62:	str	r1, [r2, #0]
  callback2 = dateTime;
    2b64:	str	r0, [r3, #0]
}
    2b66:	bx	lr
    2b68:	.word	0x2000771c
    2b6c:	.word	0x00002b49
    2b70:	.word	0x20007720

00002b74 <Print::write(char const*) [clone .isra.0]>:
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    2b74:	push	{r4, lr}
    2b76:	mov	r4, r0
    2b78:	sub	sp, #8
    2b7a:	mov	r0, r1
    2b7c:	str	r1, [sp, #4]
    2b7e:	bl	10480 <strlen>
    2b82:	ldr	r3, [r4, #0]
    2b84:	mov	r2, r0
    2b86:	ldr	r1, [sp, #4]
    2b88:	mov	r0, r4
    2b8a:	ldr	r3, [r3, #4]
    2b8c:	add	sp, #8
    2b8e:	ldmia.w	sp!, {r4, lr}
    2b92:	bx	r3

00002b94 <ExFatFormatter::writeUpcaseUnicode(unsigned short)>:
  uint16_t index = m_upcaseSize & SECTOR_MASK;
    2b94:	ldr	r2, [r0, #8]
//------------------------------------------------------------------------------
bool ExFatFormatter::writeUpcaseUnicode(uint16_t unicode) {
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    2b96:	uxtb	r3, r1
  uint16_t index = m_upcaseSize & SECTOR_MASK;
    2b98:	movw	ip, #511	; 0x1ff
    2b9c:	ubfx	r2, r2, #0, #9
bool ExFatFormatter::writeUpcaseUnicode(uint16_t unicode) {
    2ba0:	push	{r4, r5, r6, lr}
    2ba2:	mov	r5, r1
  m_secBuf[index] = b;
    2ba4:	ldr	r1, [r0, #16]
  if (index == SECTOR_MASK) {
    2ba6:	cmp	r2, ip
bool ExFatFormatter::writeUpcaseUnicode(uint16_t unicode) {
    2ba8:	mov	r4, r0
  m_secBuf[index] = b;
    2baa:	strb	r3, [r1, r2]
  uint8_t mustBeZero2[2];
  uint8_t unicode3[4];
} DirLfn_t;
//==============================================================================
inline uint32_t exFatChecksum(uint32_t sum, uint8_t data) {
  return (sum << 31) + (sum >> 1) + data;
    2bac:	ldr	r1, [r0, #4]
    2bae:	add.w	r3, r3, r1, ror #1
  m_upcaseChecksum = exFatChecksum(m_upcaseChecksum, b);
    2bb2:	str	r3, [r0, #4]
  m_upcaseSize++;
    2bb4:	ldr	r3, [r0, #8]
    2bb6:	add.w	r3, r3, #1
    2bba:	str	r3, [r0, #8]
  if (index == SECTOR_MASK) {
    2bbc:	beq.n	2be4 <ExFatFormatter::writeUpcaseUnicode(unsigned short)+0x50>
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    2bbe:	lsrs	r5, r5, #8
  uint16_t index = m_upcaseSize & SECTOR_MASK;
    2bc0:	ubfx	r3, r3, #0, #9
  m_secBuf[index] = b;
    2bc4:	ldr	r2, [r4, #16]
  uint16_t index = m_upcaseSize & SECTOR_MASK;
    2bc6:	movw	r1, #511	; 0x1ff
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    2bca:	strb	r5, [r2, r3]
  if (index == SECTOR_MASK) {
    2bcc:	cmp	r3, r1
    2bce:	ldr	r2, [r4, #4]
    2bd0:	add.w	r5, r5, r2, ror #1
  m_upcaseSize++;
    2bd4:	ldr	r2, [r4, #8]
    2bd6:	add.w	r2, r2, #1
    2bda:	strd	r5, r2, [r4, #4]
  if (index == SECTOR_MASK) {
    2bde:	beq.n	2bfc <ExFatFormatter::writeUpcaseUnicode(unsigned short)+0x68>
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    2be0:	movs	r0, #1
}
    2be2:	pop	{r4, r5, r6, pc}
    return m_dev->writeSector(m_upcaseSector++, m_secBuf);
    2be4:	ldr	r1, [r0, #0]
    2be6:	ldr	r0, [r0, #12]
    2be8:	adds	r2, r1, #1
    2bea:	ldr	r3, [r0, #0]
    2bec:	ldr	r3, [r3, #32]
    2bee:	str	r2, [r4, #0]
    2bf0:	ldr	r2, [r4, #16]
    2bf2:	blx	r3
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    2bf4:	cmp	r0, #0
    2bf6:	beq.n	2be2 <ExFatFormatter::writeUpcaseUnicode(unsigned short)+0x4e>
  uint16_t index = m_upcaseSize & SECTOR_MASK;
    2bf8:	ldr	r3, [r4, #8]
    2bfa:	b.n	2bbe <ExFatFormatter::writeUpcaseUnicode(unsigned short)+0x2a>
    return m_dev->writeSector(m_upcaseSector++, m_secBuf);
    2bfc:	ldr	r1, [r4, #0]
    2bfe:	ldr	r0, [r4, #12]
    2c00:	adds	r2, r1, #1
    2c02:	ldr	r3, [r0, #0]
    2c04:	ldr	r3, [r3, #32]
    2c06:	str	r2, [r4, #0]
    2c08:	ldr	r2, [r4, #16]
}
    2c0a:	ldmia.w	sp!, {r4, r5, r6, lr}
    return m_dev->writeSector(m_upcaseSector++, m_secBuf);
    2c0e:	bx	r3

00002c10 <ExFatFormatter::writeUpcase(unsigned long)>:
  uint32_t n;
  uint32_t ns;
  uint32_t ch = 0;
  uint16_t uc;

  m_upcaseSize = 0;
    2c10:	movs	r3, #0
bool ExFatFormatter::writeUpcase(uint32_t sector) {
    2c12:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint16_t index = m_upcaseSize & SECTOR_MASK;
    2c16:	movw	r7, #511	; 0x1ff
  uint32_t ch = 0;
    2c1a:	mov	r6, r3
bool ExFatFormatter::writeUpcase(uint32_t sector) {
    2c1c:	mov	r4, r0
    2c1e:	mov	r9, r3
  m_upcaseChecksum = 0;
  m_upcaseSector = sector;
    2c20:	str	r1, [r0, #0]
  m_upcaseChecksum = 0;
    2c22:	strd	r3, r3, [r0, #4]

  while (ch < 0X10000) {
    2c26:	b.n	2c78 <ExFatFormatter::writeUpcase(unsigned long)+0x68>
  uint16_t index = m_upcaseSize & SECTOR_MASK;
    2c28:	ldr	r1, [r4, #8]
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    2c2a:	uxtb	r3, r0
  m_secBuf[index] = b;
    2c2c:	ldr	r2, [r4, #16]
  uint16_t index = m_upcaseSize & SECTOR_MASK;
    2c2e:	ubfx	r1, r1, #0, #9
  m_secBuf[index] = b;
    2c32:	strb	r3, [r2, r1]
  if (index == SECTOR_MASK) {
    2c34:	cmp	r1, r7
  m_upcaseSize++;
    2c36:	ldrd	r0, r2, [r4, #4]
    2c3a:	add.w	r3, r3, r0, ror #1
    2c3e:	add.w	r2, r2, #1
    2c42:	strd	r3, r2, [r4, #4]
  if (index == SECTOR_MASK) {
    2c46:	beq.w	2d6e <ExFatFormatter::writeUpcase(unsigned long)+0x15e>
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    2c4a:	ubfx	r5, r5, #8, #16
  uint16_t index = m_upcaseSize & SECTOR_MASK;
    2c4e:	ubfx	r2, r2, #0, #9
  m_secBuf[index] = b;
    2c52:	ldr	r3, [r4, #16]
  if (index == SECTOR_MASK) {
    2c54:	cmp	r2, r7
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    2c56:	strb	r5, [r3, r2]
  m_upcaseSize++;
    2c58:	ldrd	r1, r3, [r4, #4]
    2c5c:	add.w	r5, r5, r1, ror #1
    2c60:	add.w	r3, r3, #1
    2c64:	strd	r5, r3, [r4, #4]
  if (index == SECTOR_MASK) {
    2c68:	beq.w	2dac <ExFatFormatter::writeUpcase(unsigned long)+0x19c>
    if (uc != ch) {
      if (!writeUpcaseUnicode(uc)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      ch++;
    2c6c:	adds	r6, #1
  while (ch < 0X10000) {
    2c6e:	cmp.w	r6, #65536	; 0x10000
    2c72:	beq.n	2cd4 <ExFatFormatter::writeUpcase(unsigned long)+0xc4>
    2c74:	uxth.w	r9, r6
    uc = toUpcase(ch);
    2c78:	mov	r0, r9
    2c7a:	bl	2a90 <toUpcase(unsigned short)>
    if (uc != ch) {
    2c7e:	cmp	r0, r6
    uc = toUpcase(ch);
    2c80:	mov	r5, r0
    if (uc != ch) {
    2c82:	bne.n	2c28 <ExFatFormatter::writeUpcase(unsigned long)+0x18>
    } else {
      for (n = ch + 1; n < 0X10000 && n == toUpcase(n); n++) {
    2c84:	add.w	r8, r6, #1
    2c88:	cmp.w	r8, #65536	; 0x10000
    2c8c:	mov	r5, r8
    2c8e:	bne.n	2c9a <ExFatFormatter::writeUpcase(unsigned long)+0x8a>
    2c90:	b.n	2d28 <ExFatFormatter::writeUpcase(unsigned long)+0x118>
    2c92:	adds	r5, #1
    2c94:	cmp.w	r5, #65536	; 0x10000
    2c98:	beq.n	2d8a <ExFatFormatter::writeUpcase(unsigned long)+0x17a>
    2c9a:	uxth	r0, r5
    2c9c:	bl	2a90 <toUpcase(unsigned short)>
    2ca0:	cmp	r0, r5
    2ca2:	beq.n	2c92 <ExFatFormatter::writeUpcase(unsigned long)+0x82>
      }
      ns = n - ch;
    2ca4:	sub.w	sl, r5, r6
      if (ns >= MINIMUM_UPCASE_SKIP) {
    2ca8:	cmp.w	sl, #512	; 0x200
    2cac:	bcc.w	2dc2 <ExFatFormatter::writeUpcase(unsigned long)+0x1b2>
        if (!writeUpcaseUnicode(0XFFFF) || !writeUpcaseUnicode(ns)) {
    2cb0:	movw	r1, #65535	; 0xffff
    2cb4:	mov	r0, r4
      if (ns >= MINIMUM_UPCASE_SKIP) {
    2cb6:	mov	r6, r5
        if (!writeUpcaseUnicode(0XFFFF) || !writeUpcaseUnicode(ns)) {
    2cb8:	bl	2b94 <ExFatFormatter::writeUpcaseUnicode(unsigned short)>
    2cbc:	cmp	r0, #0
    2cbe:	beq.n	2d68 <ExFatFormatter::writeUpcase(unsigned long)+0x158>
    2cc0:	uxth.w	r1, sl
    2cc4:	mov	r0, r4
    2cc6:	bl	2b94 <ExFatFormatter::writeUpcaseUnicode(unsigned short)>
    2cca:	cmp	r0, #0
    2ccc:	beq.n	2d68 <ExFatFormatter::writeUpcase(unsigned long)+0x158>
  while (ch < 0X10000) {
    2cce:	cmp.w	r6, #65536	; 0x10000
    2cd2:	bne.n	2c74 <ExFatFormatter::writeUpcase(unsigned long)+0x64>
  uint16_t index = m_upcaseSize & SECTOR_MASK;
    2cd4:	ldr	r3, [r4, #8]
    2cd6:	ubfx	r3, r3, #0, #9
  if (!index) {
    2cda:	cmp	r3, #0
    2cdc:	beq.n	2dc8 <ExFatFormatter::writeUpcase(unsigned long)+0x1b8>
    m_secBuf[i] = 0;
    2cde:	movs	r1, #0
    2ce0:	ldr	r2, [r4, #16]
    2ce2:	strb	r1, [r2, r3]
  for (size_t i = index; i < BYTES_PER_SECTOR; i++) {
    2ce4:	adds	r3, #1
    2ce6:	cmp.w	r3, #512	; 0x200
    2cea:	bne.n	2ce0 <ExFatFormatter::writeUpcase(unsigned long)+0xd0>
  return m_dev->writeSector(m_upcaseSector, m_secBuf);
    2cec:	ldr	r1, [r4, #0]
    2cee:	ldrd	r0, r2, [r4, #12]
  }
  return true;

fail:
  return false;
}
    2cf2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  return m_dev->writeSector(m_upcaseSector, m_secBuf);
    2cf6:	ldr	r3, [r0, #0]
    2cf8:	ldr	r3, [r3, #32]
    2cfa:	bx	r3
  uint16_t index = m_upcaseSize & SECTOR_MASK;
    2cfc:	ldr	r3, [r4, #8]
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    2cfe:	ubfx	r9, r9, #8, #8
  m_secBuf[index] = b;
    2d02:	ldr	r2, [r4, #16]
  uint16_t index = m_upcaseSize & SECTOR_MASK;
    2d04:	ubfx	r3, r3, #0, #9
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    2d08:	strb.w	r9, [r2, r3]
  if (index == SECTOR_MASK) {
    2d0c:	cmp	r3, r7
  m_upcaseSize++;
    2d0e:	ldrd	r1, r2, [r4, #4]
    2d12:	add.w	r1, r9, r1, ror #1
    2d16:	add.w	r2, r2, #1
    2d1a:	strd	r1, r2, [r4, #4]
  if (index == SECTOR_MASK) {
    2d1e:	beq.n	2d96 <ExFatFormatter::writeUpcase(unsigned long)+0x186>
        while (ch < n) {
    2d20:	cmp	r5, r8
    2d22:	add.w	r8, r8, #1
    2d26:	bls.n	2c6e <ExFatFormatter::writeUpcase(unsigned long)+0x5e>
  uint16_t index = m_upcaseSize & SECTOR_MASK;
    2d28:	ldr	r2, [r4, #8]
    2d2a:	mov	r9, r6
  m_secBuf[index] = b;
    2d2c:	ldr	r3, [r4, #16]
          if (!writeUpcaseUnicode(ch++)) {
    2d2e:	mov	r6, r8
  uint16_t index = m_upcaseSize & SECTOR_MASK;
    2d30:	ubfx	r2, r2, #0, #9
    2d34:	uxtb.w	r1, r9
  m_secBuf[index] = b;
    2d38:	strb.w	r9, [r3, r2]
  if (index == SECTOR_MASK) {
    2d3c:	cmp	r2, r7
  m_upcaseSize++;
    2d3e:	ldrd	r0, r3, [r4, #4]
    2d42:	add.w	r1, r1, r0, ror #1
    2d46:	add.w	r3, r3, #1
    2d4a:	strd	r1, r3, [r4, #4]
  if (index == SECTOR_MASK) {
    2d4e:	bne.n	2cfe <ExFatFormatter::writeUpcase(unsigned long)+0xee>
    return m_dev->writeSector(m_upcaseSector++, m_secBuf);
    2d50:	ldr	r1, [r4, #0]
    2d52:	ldrd	r0, r2, [r4, #12]
    2d56:	add.w	ip, r1, #1
    2d5a:	ldr	r3, [r0, #0]
    2d5c:	ldr	r3, [r3, #32]
    2d5e:	str.w	ip, [r4]
    2d62:	blx	r3
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    2d64:	cmp	r0, #0
    2d66:	bne.n	2cfc <ExFatFormatter::writeUpcase(unsigned long)+0xec>
  return false;
    2d68:	movs	r0, #0
}
    2d6a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return m_dev->writeSector(m_upcaseSector++, m_secBuf);
    2d6e:	ldr	r1, [r4, #0]
    2d70:	ldrd	r0, r2, [r4, #12]
    2d74:	add.w	ip, r1, #1
    2d78:	ldr	r3, [r0, #0]
    2d7a:	ldr	r3, [r3, #32]
    2d7c:	str.w	ip, [r4]
    2d80:	blx	r3
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    2d82:	cmp	r0, #0
    2d84:	beq.n	2d68 <ExFatFormatter::writeUpcase(unsigned long)+0x158>
  uint16_t index = m_upcaseSize & SECTOR_MASK;
    2d86:	ldr	r2, [r4, #8]
    2d88:	b.n	2c4a <ExFatFormatter::writeUpcase(unsigned long)+0x3a>
      ns = n - ch;
    2d8a:	rsb	sl, r6, #65536	; 0x10000
      if (ns >= MINIMUM_UPCASE_SKIP) {
    2d8e:	cmp.w	sl, #512	; 0x200
    2d92:	bcs.n	2cb0 <ExFatFormatter::writeUpcase(unsigned long)+0xa0>
    2d94:	b.n	2d28 <ExFatFormatter::writeUpcase(unsigned long)+0x118>
    return m_dev->writeSector(m_upcaseSector++, m_secBuf);
    2d96:	ldr	r1, [r4, #0]
    2d98:	ldr	r0, [r4, #12]
    2d9a:	adds	r2, r1, #1
    2d9c:	ldr	r3, [r0, #0]
    2d9e:	ldr	r3, [r3, #32]
    2da0:	str	r2, [r4, #0]
    2da2:	ldr	r2, [r4, #16]
    2da4:	blx	r3
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    2da6:	cmp	r0, #0
    2da8:	beq.n	2d68 <ExFatFormatter::writeUpcase(unsigned long)+0x158>
    2daa:	b.n	2d20 <ExFatFormatter::writeUpcase(unsigned long)+0x110>
    return m_dev->writeSector(m_upcaseSector++, m_secBuf);
    2dac:	ldr	r1, [r4, #0]
    2dae:	ldr	r0, [r4, #12]
    2db0:	adds	r5, r1, #1
    2db2:	ldr	r2, [r4, #16]
    2db4:	ldr	r3, [r0, #0]
    2db6:	ldr	r3, [r3, #32]
    2db8:	str	r5, [r4, #0]
    2dba:	blx	r3
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    2dbc:	cmp	r0, #0
    2dbe:	beq.n	2d68 <ExFatFormatter::writeUpcase(unsigned long)+0x158>
    2dc0:	b.n	2c6c <ExFatFormatter::writeUpcase(unsigned long)+0x5c>
        while (ch < n) {
    2dc2:	cmp	r6, r5
    2dc4:	bcc.n	2d28 <ExFatFormatter::writeUpcase(unsigned long)+0x118>
    2dc6:	b.n	2c78 <ExFatFormatter::writeUpcase(unsigned long)+0x68>
  return true;
    2dc8:	movs	r0, #1
    2dca:	b.n	2d6a <ExFatFormatter::writeUpcase(unsigned long)+0x15a>

00002dcc <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)>:
bool ExFatFormatter::format(FsBlockDevice* dev, uint8_t* secBuf, print_t* pr) {
    2dcc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2dd0:	mov	r7, r3
    2dd2:	sub	sp, #36	; 0x24
  sectorCount = dev->sectorCount();
    2dd4:	ldr	r3, [r1, #0]
bool ExFatFormatter::format(FsBlockDevice* dev, uint8_t* secBuf, print_t* pr) {
    2dd6:	mov	r5, r1
    2dd8:	str	r0, [sp, #12]
    2dda:	mov	r4, r2
  m_dev = dev;
    2ddc:	str	r1, [r0, #12]
  m_secBuf = secBuf;
    2dde:	str	r2, [r0, #16]
  sectorCount = dev->sectorCount();
    2de0:	mov	r0, r1
    2de2:	ldr	r3, [r3, #24]
    2de4:	blx	r3
  if (sectorCount < 0X100000) {
    2de6:	cmp.w	r0, #1048576	; 0x100000
  sectorCount = dev->sectorCount();
    2dea:	str	r0, [sp, #0]
  if (sectorCount < 0X100000) {
    2dec:	bcc.w	2f7a <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1ae>
    2df0:	mov	r6, r0
  for (m = 1, vs = 0; m && sectorCount > m; m <<= 1, vs++) {
    2df2:	movs	r3, #0
    2df4:	movs	r2, #1
    2df6:	adds	r3, #1
    2df8:	lsls	r2, r2, #1
    2dfa:	uxtb	r3, r3
    2dfc:	beq.n	2e02 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x36>
    2dfe:	cmp	r6, r2
    2e00:	bhi.n	2df6 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x2a>
  sectorsPerClusterShift = vs < 29 ? 8 : (vs - 11) / 2;
    2e02:	cmp	r3, #28
    2e04:	str	r6, [sp, #0]
    2e06:	bls.w	2f54 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x188>
    2e0a:	sub.w	r9, r3, #11
  sectorsPerCluster = 1UL << sectorsPerClusterShift;
    2e0e:	movs	r2, #1
  sectorsPerClusterShift = vs < 29 ? 8 : (vs - 11) / 2;
    2e10:	asr.w	r1, r9, r2
    2e14:	ubfx	r9, r9, #1, #8
  sectorsPerCluster = 1UL << sectorsPerClusterShift;
    2e18:	lsls	r2, r1
  sectorsPerClusterShift = vs < 29 ? 8 : (vs - 11) / 2;
    2e1a:	str	r1, [sp, #4]
  sectorsPerCluster = 1UL << sectorsPerClusterShift;
    2e1c:	str	r2, [sp, #24]
  fatLength = 1UL << (vs < 27 ? 13 : (vs + 1) / 2);
    2e1e:	adds	r3, #1
    2e20:	movs	r2, #1
  partitionOffset = 2 * fatLength;
    2e22:	mov.w	r8, #2
  fatLength = 1UL << (vs < 27 ? 13 : (vs + 1) / 2);
    2e26:	asrs	r3, r3, #1
    2e28:	lsls	r2, r3
  partitionOffset = 2 * fatLength;
    2e2a:	lsl.w	r8, r8, r3
  fatLength = 1UL << (vs < 27 ? 13 : (vs + 1) / 2);
    2e2e:	str	r2, [sp, #20]
  clusterCount = (sectorCount - 4 * fatLength) >> sectorsPerClusterShift;
    2e30:	movs	r2, #4
    2e32:	lsls	r2, r3
    2e34:	str	r2, [sp, #8]
    2e36:	ldr	r2, [sp, #0]
  memset(secBuf, 0, BYTES_PER_SECTOR);
    2e38:	movs	r1, #0
  clusterCount = (sectorCount - 4 * fatLength) >> sectorsPerClusterShift;
    2e3a:	ldr	r3, [sp, #8]
  memset(secBuf, 0, BYTES_PER_SECTOR);
    2e3c:	mov	r0, r4
  clusterCount = (sectorCount - 4 * fatLength) >> sectorsPerClusterShift;
    2e3e:	ldr	r6, [sp, #4]
  *reinterpret_cast<uint16_t*>(dst) = src;
    2e40:	movw	fp, #43605	; 0xaa55
    2e44:	subs	r3, r2, r3
  memset(secBuf, 0, BYTES_PER_SECTOR);
    2e46:	mov.w	r2, #512	; 0x200
  clusterCount = (sectorCount - 4 * fatLength) >> sectorsPerClusterShift;
    2e4a:	lsrs	r3, r6
  volumeLength = clusterHeapOffset + (clusterCount << sectorsPerClusterShift);
    2e4c:	lsl.w	sl, r3, r6
    2e50:	str	r3, [sp, #16]
  memset(secBuf, 0, BYTES_PER_SECTOR);
    2e52:	bl	10104 <memset>
  mbr->part->beginCHS[0] = 1;
    2e56:	movw	r3, #257	; 0x101
  volumeLength = clusterHeapOffset + (clusterCount << sectorsPerClusterShift);
    2e5a:	add	sl, r8
  if (!dev->writeSector(0, secBuf)) {
    2e5c:	mov	r2, r4
  mbr->part->beginCHS[0] = 1;
    2e5e:	strh.w	r3, [r4, #447]	; 0x1bf
  mbr->part->type = 7;
    2e62:	mvn.w	r3, #504	; 0x1f8
  if (!dev->writeSector(0, secBuf)) {
    2e66:	movs	r1, #0
    2e68:	mov	r0, r5
  mbr->part->type = 7;
    2e6a:	str.w	r3, [r4, #450]	; 0x1c2
  if (!dev->writeSector(0, secBuf)) {
    2e6e:	ldr	r3, [r5, #0]
  *reinterpret_cast<uint32_t*>(dst) = src;
    2e70:	str.w	r8, [r4, #454]	; 0x1c6
    2e74:	ldr	r3, [r3, #32]
    2e76:	str.w	sl, [r4, #458]	; 0x1ca
  *reinterpret_cast<uint16_t*>(dst) = src;
    2e7a:	strh.w	fp, [r4, #510]	; 0x1fe
    2e7e:	blx	r3
    2e80:	cmp	r0, #0
    2e82:	beq.n	2f3c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x170>
  memset(secBuf, 0, BYTES_PER_SECTOR);
    2e84:	mov.w	r2, #512	; 0x200
    2e88:	movs	r1, #0
    2e8a:	mov	r0, r4
    2e8c:	bl	10104 <memset>
  *reinterpret_cast<uint32_t*>(dst) = src;
    2e90:	ldr	r3, [sp, #0]
  pbs->bpb.sectorsPerClusterShift = sectorsPerClusterShift;
    2e92:	strb.w	r9, [r4, #109]	; 0x6d
  for (size_t i = 0; i < BYTES_PER_SECTOR; i++) {
    2e96:	mov.w	r9, #0
    2e9a:	str	r3, [r4, #100]	; 0x64
    pbs->bootCode[i] = 0XF4;
    2e9c:	movs	r1, #244	; 0xf4
    2e9e:	ldr	r3, [sp, #16]
  uint32_t checksum = 0;
    2ea0:	mov	r6, r9
    2ea2:	ldr	r2, [sp, #20]
    pbs->bootCode[i] = 0XF4;
    2ea4:	add.w	r0, r4, #120	; 0x78
    2ea8:	str	r3, [r4, #92]	; 0x5c
  pbs->jmpInstruction[0] = 0XEB;
    2eaa:	ldr	r3, [pc, #328]	; (2ff4 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x228>)
  setLe64(pbs->bpb.volumeLength, volumeLength);
    2eac:	str.w	sl, [r4, #72]	; 0x48
  pbs->jmpInstruction[0] = 0XEB;
    2eb0:	str	r3, [r4, #0]
    2eb2:	add.w	r3, r3, #246415360	; 0xeb00000
  setLe64(pbs->bpb.partitionOffset, partitionOffset);
    2eb6:	str.w	r8, [r4, #64]	; 0x40
  pbs->jmpInstruction[0] = 0XEB;
    2eba:	add.w	r3, r3, #52992	; 0xcf00
    2ebe:	str.w	r8, [r4, #88]	; 0x58
    2ec2:	adds	r3, #109	; 0x6d
    2ec4:	str	r3, [r4, #4]
  pbs->oemName[5] = ' ';
    2ec6:	movw	r3, #8224	; 0x2020
    2eca:	strh	r3, [r4, #8]
  pbs->oemName[7] = ' ';
    2ecc:	movs	r3, #32
    2ece:	strb	r3, [r4, #10]
    2ed0:	movs	r3, #4
    2ed2:	str	r3, [r4, #96]	; 0x60
  *reinterpret_cast<uint16_t*>(dst) = src;
    2ed4:	mov.w	r3, #256	; 0x100
    2ed8:	strh.w	r3, [r4, #104]	; 0x68
  pbs->bpb.bytesPerSectorShift = BYTES_PER_SECTOR_SHIFT;
    2edc:	movs	r3, #9
    2ede:	strb.w	r3, [r4, #108]	; 0x6c
  pbs->bpb.numberOfFats = 1;
    2ee2:	movs	r3, #1
    2ee4:	strb.w	r3, [r4, #110]	; 0x6e
  pbs->bpb.driveSelect = 0X80;
    2ee8:	movs	r3, #128	; 0x80
  *reinterpret_cast<uint32_t*>(dst) = src;
    2eea:	strd	r2, r2, [r4, #80]	; 0x50
    2eee:	strb.w	r3, [r4, #111]	; 0x6f
    pbs->bootCode[i] = 0XF4;
    2ef2:	mov.w	r2, #390	; 0x186
    2ef6:	bl	10104 <memset>
  *reinterpret_cast<uint16_t*>(dst) = src;
    2efa:	strh.w	fp, [r4, #510]	; 0x1fe
    if (i == offsetof(ExFatPbs_t, bpb.volumeFlags[0]) ||
    2efe:	sub.w	r3, r9, #106	; 0x6a
    2f02:	cmp	r3, #1
    2f04:	bls.n	2f14 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x148>
    2f06:	cmp.w	r9, #112	; 0x70
    2f0a:	beq.n	2f14 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x148>
  return (sum << 31) + (sum >> 1) + data;
    2f0c:	ldrb.w	r3, [r4, r9]
    2f10:	add.w	r6, r3, r6, ror #1
  for (size_t i = 0; i < BYTES_PER_SECTOR; i++) {
    2f14:	add.w	r9, r9, #1
    2f18:	cmp.w	r9, #512	; 0x200
    2f1c:	bne.n	2efe <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x132>
  if (!dev->writeSector(sector, secBuf) ||
    2f1e:	ldr	r3, [r5, #0]
    2f20:	mov	r2, r4
    2f22:	mov	r1, r8
    2f24:	mov	r0, r5
    2f26:	ldr	r3, [r3, #32]
    2f28:	blx	r3
    2f2a:	cbz	r0, 2f3c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x170>
      !dev->writeSector(sector + BOOT_BACKUP_OFFSET, secBuf)) {
    2f2c:	ldr	r3, [r5, #0]
    2f2e:	mov	r2, r4
    2f30:	add.w	r1, r8, #12
    2f34:	mov	r0, r5
    2f36:	ldr	r3, [r3, #32]
    2f38:	blx	r3
  if (!dev->writeSector(sector, secBuf) ||
    2f3a:	cbnz	r0, 2f8c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1c0>
  writeMsg(pr, "Format failed\r\n");
    2f3c:	cbz	r7, 2f4a <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x17e>
    2f3e:	ldr	r3, [r7, #0]
    2f40:	movs	r2, #15
    2f42:	ldr	r1, [pc, #180]	; (2ff8 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x22c>)
    2f44:	mov	r0, r7
    2f46:	ldr	r3, [r3, #4]
    2f48:	blx	r3
  return false;
    2f4a:	movs	r6, #0
}
    2f4c:	mov	r0, r6
    2f4e:	add	sp, #36	; 0x24
    2f50:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  fatLength = 1UL << (vs < 27 ? 13 : (vs + 1) / 2);
    2f54:	cmp	r3, #26
  sectorsPerClusterShift = vs < 29 ? 8 : (vs - 11) / 2;
    2f56:	mov.w	r9, #8
  fatLength = 1UL << (vs < 27 ? 13 : (vs + 1) / 2);
    2f5a:	bhi.w	32ee <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x522>
    2f5e:	mov.w	r3, #32768	; 0x8000
    2f62:	mov.w	r8, #16384	; 0x4000
  sectorsPerCluster = 1UL << sectorsPerClusterShift;
    2f66:	str.w	r9, [sp, #4]
    2f6a:	str	r3, [sp, #8]
    2f6c:	mov.w	r3, #256	; 0x100
    2f70:	str	r3, [sp, #24]
  fatLength = 1UL << (vs < 27 ? 13 : (vs + 1) / 2);
    2f72:	mov.w	r3, #8192	; 0x2000
    2f76:	str	r3, [sp, #20]
    2f78:	b.n	2e36 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x6a>
    writeMsg(pr, "Device is too small\r\n");
    2f7a:	cmp	r7, #0
    2f7c:	beq.n	2f4a <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x17e>
    2f7e:	ldr	r3, [r7, #0]
    2f80:	movs	r2, #21
    2f82:	ldr	r1, [pc, #120]	; (2ffc <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x230>)
    2f84:	mov	r0, r7
    2f86:	ldr	r3, [r3, #4]
    2f88:	blx	r3
  writeMsg(pr, "Format failed\r\n");
    2f8a:	b.n	2f3e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x172>
  memset(secBuf, 0, BYTES_PER_SECTOR);
    2f8c:	mov	r2, r9
    2f8e:	mov	r0, r4
    2f90:	movs	r1, #0
  sector++;
    2f92:	add.w	sl, r8, #1
  memset(secBuf, 0, BYTES_PER_SECTOR);
    2f96:	bl	10104 <memset>
  *reinterpret_cast<uint16_t*>(dst) = src;
    2f9a:	movw	r3, #43605	; 0xaa55
    2f9e:	add.w	r2, r8, #9
    2fa2:	addw	r9, r4, #511	; 0x1ff
    2fa6:	strh.w	r3, [r4, #510]	; 0x1fe
    2faa:	subs	r3, r4, #1
    2fac:	str.w	r8, [sp, #28]
    2fb0:	mov	r8, r4
    2fb2:	mov	fp, r3
    2fb4:	mov	r4, r2
    2fb6:	str	r3, [sp, #0]
  uint32_t checksum = 0;
    2fb8:	mov	r3, fp
  return (sum << 31) + (sum >> 1) + data;
    2fba:	ldrb.w	r2, [r3, #1]!
    for (size_t i = 0; i < BYTES_PER_SECTOR; i++) {
    2fbe:	cmp	r9, r3
    2fc0:	add.w	r6, r2, r6, ror #1
    2fc4:	bne.n	2fba <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1ee>
    if (!dev->writeSector(sector, secBuf) ||
    2fc6:	ldr	r3, [r5, #0]
    2fc8:	mov	r2, r8
    2fca:	mov	r1, sl
    2fcc:	mov	r0, r5
    2fce:	ldr	r3, [r3, #32]
    2fd0:	blx	r3
    2fd2:	cmp	r0, #0
    2fd4:	beq.n	2f3c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x170>
        !dev->writeSector(sector + BOOT_BACKUP_OFFSET, secBuf)) {
    2fd6:	ldr	r3, [r5, #0]
    2fd8:	mov	r2, r8
    2fda:	add.w	r1, sl, #12
    2fde:	mov	r0, r5
    2fe0:	ldr	r3, [r3, #32]
    2fe2:	blx	r3
    if (!dev->writeSector(sector, secBuf) ||
    2fe4:	cmp	r0, #0
    2fe6:	beq.n	2f3c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x170>
    sector++;
    2fe8:	add.w	r3, sl, #1
  for (int j = 0; j < 8; j++) {
    2fec:	cmp	r4, r3
    2fee:	beq.n	3000 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x234>
    2ff0:	mov	sl, r3
    2ff2:	b.n	2fb8 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1ec>
    2ff4:	.word	0x459076eb
    2ff8:	.word	0x2000071c
    2ffc:	.word	0x200006bc
    3000:	mov	r4, r8
  memset(secBuf, 0, BYTES_PER_SECTOR);
    3002:	mov.w	r2, #512	; 0x200
    3006:	movs	r1, #0
    3008:	mov	fp, r3
    300a:	mov	r0, r4
    300c:	ldr.w	r8, [sp, #28]
    3010:	add.w	sl, sl, #3
    3014:	bl	10104 <memset>
    for (size_t i = 0; i < BYTES_PER_SECTOR; i++) {
    3018:	ldr	r3, [sp, #0]
    301a:	ldrb.w	r2, [r3, #1]!
    301e:	cmp	r9, r3
    3020:	add.w	r6, r2, r6, ror #1
    3024:	bne.n	301a <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x24e>
    if (!dev->writeSector(sector, secBuf) ||
    3026:	ldr	r3, [r5, #0]
    3028:	mov	r2, r4
    302a:	mov	r1, fp
    302c:	mov	r0, r5
    302e:	ldr	r3, [r3, #32]
    3030:	blx	r3
    3032:	cmp	r0, #0
    3034:	beq.n	2f3c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x170>
        !dev->writeSector(sector + BOOT_BACKUP_OFFSET, secBuf)) {
    3036:	ldr	r3, [r5, #0]
    3038:	mov	r2, r4
    303a:	add.w	r1, fp, #12
    303e:	mov	r0, r5
    3040:	ldr	r3, [r3, #32]
    3042:	blx	r3
    if (!dev->writeSector(sector, secBuf) ||
    3044:	cmp	r0, #0
    3046:	beq.w	2f3c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x170>
    sector++;
    304a:	add.w	r1, fp, #1
  for (int j = 0; j < 2; j++) {
    304e:	cmp	sl, r1
    3050:	bne.w	3282 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x4b6>
    3054:	lsls	r2, r4, #29
    3056:	ubfx	r3, r4, #2, #1
    305a:	bpl.w	3266 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x49a>
  for (size_t i = 0; i < BYTES_PER_SECTOR; i += 4) {
    305e:	movs	r2, #4
  *reinterpret_cast<uint32_t*>(dst) = src;
    3060:	str	r6, [r4, #0]
    3062:	rsb	r0, r3, #128	; 0x80
    3066:	add.w	r3, r4, r3, lsl #2
    306a:	mov.w	ip, r0, lsr #1
    306e:	add.w	ip, r3, ip, lsl #3
    3072:	strd	r6, r6, [r3]
    3076:	adds	r3, #8
    3078:	cmp	ip, r3
    307a:	bne.n	3072 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x2a6>
    307c:	bic.w	ip, r0, #1
    3080:	add.w	r3, r2, ip, lsl #2
    3084:	cmp	ip, r0
  if (!dev->writeSector(sector, secBuf) ||
    3086:	mov	r2, r4
    3088:	mov	r0, r5
    308a:	it	ne
    308c:	strne	r6, [r4, r3]
    308e:	ldr	r3, [r5, #0]
    3090:	ldr	r3, [r3, #32]
    3092:	blx	r3
    3094:	cmp	r0, #0
    3096:	beq.w	2f3c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x170>
      !dev->writeSector(sector + BOOT_BACKUP_OFFSET, secBuf)) {
    309a:	ldr	r3, [r5, #0]
    309c:	add.w	r1, fp, #13
    30a0:	mov	r2, r4
    30a2:	mov	r0, r5
    30a4:	ldr	r3, [r3, #32]
    30a6:	blx	r3
  if (!dev->writeSector(sector, secBuf) ||
    30a8:	cmp	r0, #0
    30aa:	beq.w	2f3c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x170>
  writeMsg(pr, "Writing FAT ");
    30ae:	cbz	r7, 30bc <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x2f0>
    30b0:	ldr	r3, [r7, #0]
    30b2:	movs	r2, #12
    30b4:	ldr	r1, [pc, #596]	; (330c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x540>)
    30b6:	mov	r0, r7
    30b8:	ldr	r3, [r3, #4]
    30ba:	blx	r3
  sector = partitionOffset + fatOffset;
    30bc:	ldr	r3, [sp, #20]
  memset(secBuf, 0, BYTES_PER_SECTOR);
    30be:	mov.w	r2, #512	; 0x200
    30c2:	movs	r1, #0
    30c4:	mov	r0, r4
  sector = partitionOffset + fatOffset;
    30c6:	add	r3, r8
  for (uint32_t i = 0; i < ns; i++) {
    30c8:	movs	r6, #0
  sector = partitionOffset + fatOffset;
    30ca:	mov	r9, r3
  ns = ((clusterCount + 2) * 4 + BYTES_PER_SECTOR - 1) / BYTES_PER_SECTOR;
    30cc:	ldr	r3, [sp, #16]
    30ce:	mov.w	r8, r3, lsl #2
  memset(secBuf, 0, BYTES_PER_SECTOR);
    30d2:	bl	10104 <memset>
      writeMsg(pr, ".");
    30d6:	subs.w	fp, r7, #0
  ns = ((clusterCount + 2) * 4 + BYTES_PER_SECTOR - 1) / BYTES_PER_SECTOR;
    30da:	addw	r8, r8, #519	; 0x207
  secBuf[0] = 0XF8;
    30de:	mov	r3, r4
    secBuf[i] = 0XFF;
    30e0:	mov.w	r2, #4294967295
  secBuf[0] = 0XF8;
    30e4:	mov.w	r1, #248	; 0xf8
  ns = ((clusterCount + 2) * 4 + BYTES_PER_SECTOR - 1) / BYTES_PER_SECTOR;
    30e8:	mov.w	sl, r8, lsr #9
      writeMsg(pr, ".");
    30ec:	it	ne
    30ee:	movne.w	fp, #1
    if (i % (ns / 32) == 0) {
    30f2:	mov.w	r8, r8, lsr #14
  secBuf[0] = 0XF8;
    30f6:	strb.w	r1, [r3], #1
    secBuf[i] = 0XFF;
    30fa:	str.w	r2, [r4, #1]
    30fe:	str	r2, [r3, #12]
    3100:	str	r2, [r3, #4]
    3102:	str	r2, [r3, #8]
    3104:	str.w	r2, [r3, #15]
    if (i % (ns / 32) == 0) {
    3108:	udiv	r3, r6, r8
    310c:	mls	r3, r8, r3, r6
      writeMsg(pr, ".");
    3110:	cbnz	r3, 3124 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x358>
    3112:	cmp.w	fp, #0
    3116:	beq.n	3124 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x358>
    3118:	ldr	r3, [r7, #0]
    311a:	movs	r2, #1
    311c:	ldr	r1, [pc, #496]	; (3310 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x544>)
    311e:	mov	r0, r7
    3120:	ldr	r3, [r3, #4]
    3122:	blx	r3
    if (!dev->writeSector(sector + i, secBuf)) {
    3124:	ldr	r3, [r5, #0]
    3126:	add.w	r1, r9, r6
    312a:	mov	r2, r4
    312c:	mov	r0, r5
    312e:	ldr	r3, [r3, #32]
    3130:	blx	r3
    3132:	cmp	r0, #0
    3134:	beq.w	2f3c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x170>
    if (i == 0) {
    3138:	cmp	r6, #0
    313a:	beq.w	326a <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x49e>
  for (uint32_t i = 0; i < ns; i++) {
    313e:	adds	r6, #1
    3140:	cmp	sl, r6
    3142:	bne.n	3108 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x33c>
  writeMsg(pr, "\r\n");
    3144:	cmp	r7, #0
    3146:	beq.w	3298 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x4cc>
    314a:	ldr	r3, [r7, #0]
    314c:	movs	r2, #2
    314e:	ldr	r1, [pc, #452]	; (3314 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x548>)
    3150:	mov	r0, r7
    3152:	ldr	r3, [r3, #4]
    3154:	blx	r3
  bitmapSize = (clusterCount + 7) / 8;
    3156:	ldr	r6, [sp, #16]
  if (ns > sectorsPerCluster) {
    3158:	ldr	r2, [sp, #24]
  bitmapSize = (clusterCount + 7) / 8;
    315a:	adds	r6, #7
    315c:	lsrs	r6, r6, #3
  ns = (bitmapSize + BYTES_PER_SECTOR - 1) / BYTES_PER_SECTOR;
    315e:	addw	r3, r6, #511	; 0x1ff
  if (ns > sectorsPerCluster) {
    3162:	cmp.w	r2, r3, lsr #9
  ns = (bitmapSize + BYTES_PER_SECTOR - 1) / BYTES_PER_SECTOR;
    3166:	mov.w	r9, r3, lsr #9
  if (ns > sectorsPerCluster) {
    316a:	bcc.w	2f3e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x172>
  memset(secBuf, 0, BYTES_PER_SECTOR);
    316e:	mov.w	r2, #512	; 0x200
    3172:	movs	r1, #0
    3174:	mov	r0, r4
    3176:	bl	10104 <memset>
  secBuf[0] = 0X7;
    317a:	movs	r3, #7
    317c:	strb	r3, [r4, #0]
  for (uint32_t i = 0; i < ns; i++) {
    317e:	cmp.w	r9, #0
    3182:	beq.n	31b2 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x3e6>
    3184:	mov.w	r8, #0
    if (!dev->writeSector(sector + i, secBuf)) {
    3188:	ldr	r2, [sp, #8]
    318a:	mov	r0, r5
    318c:	ldr	r3, [r5, #0]
    318e:	add.w	r1, r8, r2
    3192:	mov	r2, r4
    3194:	ldr	r3, [r3, #32]
    3196:	blx	r3
    3198:	cmp	r0, #0
    319a:	beq.w	2f3c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x170>
    if (i == 0) {
    319e:	cmp.w	r8, #0
    31a2:	beq.n	3286 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x4ba>
  for (uint32_t i = 0; i < ns; i++) {
    31a4:	add.w	r8, r8, #1
    31a8:	cmp	r9, r8
    31aa:	bhi.n	3188 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x3bc>
  writeMsg(pr, "Writing upcase table\r\n");
    31ac:	cmp	r7, #0
    31ae:	beq.w	32c8 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x4fc>
    31b2:	ldr	r3, [r7, #0]
    31b4:	movs	r2, #22
    31b6:	ldr	r1, [pc, #352]	; (3318 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x54c>)
    31b8:	mov	r0, r7
    31ba:	ldr	r3, [r3, #4]
    31bc:	blx	r3
  if (!writeUpcase(partitionOffset + clusterHeapOffset + sectorsPerCluster)) {
    31be:	ldr	r3, [sp, #8]
    31c0:	ldr	r2, [sp, #24]
    31c2:	ldr	r0, [sp, #12]
    31c4:	adds	r1, r3, r2
    31c6:	bl	2c10 <ExFatFormatter::writeUpcase(unsigned long)>
    31ca:	cmp	r0, #0
    31cc:	beq.w	2f3e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x172>
  if (m_upcaseSize > BYTES_PER_SECTOR * sectorsPerCluster) {
    31d0:	ldr	r2, [sp, #4]
    31d2:	mov.w	r3, #512	; 0x200
    31d6:	lsls	r3, r2
    31d8:	ldr	r2, [sp, #12]
    31da:	ldr	r2, [r2, #8]
    31dc:	cmp	r2, r3
    31de:	bhi.w	2f3e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x172>
  writeMsg(pr, "Writing root\r\n");
    31e2:	ldr	r1, [pc, #312]	; (331c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x550>)
    31e4:	mov	r0, r7
    31e6:	bl	2b74 <Print::write(char const*) [clone .isra.0]>
  sector = partitionOffset + clusterHeapOffset + 2 * sectorsPerCluster;
    31ea:	mov.w	r8, #2
    31ee:	ldr	r3, [sp, #4]
  memset(secBuf, 0, BYTES_PER_SECTOR);
    31f0:	mov.w	r2, #512	; 0x200
    31f4:	movs	r1, #0
  sector = partitionOffset + clusterHeapOffset + 2 * sectorsPerCluster;
    31f6:	lsl.w	r9, r8, r3
    31fa:	ldr	r3, [sp, #8]
  memset(secBuf, 0, BYTES_PER_SECTOR);
    31fc:	mov	r0, r4
  sector = partitionOffset + clusterHeapOffset + 2 * sectorsPerCluster;
    31fe:	add	r9, r3
  memset(secBuf, 0, BYTES_PER_SECTOR);
    3200:	bl	10104 <memset>
  dbm->type = EXFAT_TYPE_BITMAP;
    3204:	movs	r2, #129	; 0x81
  label->type = EXFAT_TYPE_LABEL & 0X7F;
    3206:	movs	r3, #3
  setLe32(dup->checksum, m_upcaseChecksum);
    3208:	ldr	r1, [sp, #12]
    320a:	add.w	r9, r9, #4294967295
  dbm->type = EXFAT_TYPE_BITMAP;
    320e:	strb.w	r2, [r4, #32]
  dup->type = EXFAT_TYPE_UPCASE;
    3212:	movs	r2, #130	; 0x82
  label->type = EXFAT_TYPE_LABEL & 0X7F;
    3214:	strb	r3, [r4, #0]
  dup->type = EXFAT_TYPE_UPCASE;
    3216:	strb.w	r2, [r4, #64]	; 0x40
  setLe64(dbm->size, bitmapSize);
    321a:	strd	r8, r6, [r4, #52]	; 0x34
  setLe32(dup->checksum, m_upcaseChecksum);
    321e:	ldr	r2, [r1, #4]
  *reinterpret_cast<uint64_t*>(dst) = src;
    3220:	mov.w	r8, #1
  *reinterpret_cast<uint32_t*>(dst) = src;
    3224:	str	r3, [r4, #84]	; 0x54
    3226:	str	r2, [r4, #68]	; 0x44
  setLe64(dup->size, m_upcaseSize);
    3228:	ldr	r3, [r1, #8]
    322a:	str	r3, [r4, #88]	; 0x58
  setLe64(dbm->size, bitmapSize);
    322c:	movs	r3, #0
  setLe64(dup->size, m_upcaseSize);
    322e:	str	r3, [r4, #92]	; 0x5c
  for (uint32_t i = 0; i < ns; i++) {
    3230:	b.n	323c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x470>
    3232:	ldr	r3, [sp, #24]
    3234:	cmp	r8, r3
    3236:	bcs.n	32fa <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x52e>
    3238:	add.w	r8, r8, #1
    if (!dev->writeSector(sector + i, secBuf)) {
    323c:	ldr	r3, [r5, #0]
    323e:	add.w	r1, r9, r8
    3242:	mov	r2, r4
    3244:	mov	r0, r5
    3246:	ldr	r3, [r3, #32]
    3248:	blx	r3
    324a:	mov	r6, r0
    324c:	cmp	r0, #0
    324e:	beq.w	2f3c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x170>
    if (i == 0) {
    3252:	cmp.w	r8, #1
    3256:	bne.n	3232 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x466>
      memset(secBuf, 0, BYTES_PER_SECTOR);
    3258:	mov.w	r2, #512	; 0x200
    325c:	movs	r1, #0
    325e:	mov	r0, r4
    3260:	bl	10104 <memset>
  for (uint32_t i = 0; i < ns; i++) {
    3264:	b.n	3238 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x46c>
  for (size_t i = 0; i < BYTES_PER_SECTOR; i += 4) {
    3266:	mov	r2, r3
    3268:	b.n	3062 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x296>
      memset(secBuf, 0, BYTES_PER_SECTOR);
    326a:	mov	r1, r6
    326c:	mov.w	r2, #512	; 0x200
    3270:	mov	r0, r4
    3272:	bl	10104 <memset>
  for (uint32_t i = 0; i < ns; i++) {
    3276:	cmp.w	sl, #1
    327a:	beq.w	3144 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x378>
    327e:	movs	r6, #1
    3280:	b.n	3108 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x33c>
    3282:	mov	fp, r1
    3284:	b.n	3018 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x24c>
  for (uint32_t i = 0; i < ns; i++) {
    3286:	cmp.w	r9, #1
      secBuf[0] = 0;
    328a:	strb.w	r8, [r4]
  for (uint32_t i = 0; i < ns; i++) {
    328e:	mov.w	r8, #1
    3292:	bne.w	3188 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x3bc>
    3296:	b.n	31ac <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x3e0>
  bitmapSize = (clusterCount + 7) / 8;
    3298:	ldr	r6, [sp, #16]
  if (ns > sectorsPerCluster) {
    329a:	ldr	r2, [sp, #24]
  bitmapSize = (clusterCount + 7) / 8;
    329c:	adds	r6, #7
    329e:	lsrs	r6, r6, #3
  ns = (bitmapSize + BYTES_PER_SECTOR - 1) / BYTES_PER_SECTOR;
    32a0:	addw	r3, r6, #511	; 0x1ff
  if (ns > sectorsPerCluster) {
    32a4:	cmp.w	r2, r3, lsr #9
  ns = (bitmapSize + BYTES_PER_SECTOR - 1) / BYTES_PER_SECTOR;
    32a8:	mov.w	r9, r3, lsr #9
  if (ns > sectorsPerCluster) {
    32ac:	bcc.w	2f4a <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x17e>
  memset(secBuf, 0, BYTES_PER_SECTOR);
    32b0:	mov.w	r2, #512	; 0x200
    32b4:	mov	r1, r7
    32b6:	mov	r0, r4
    32b8:	bl	10104 <memset>
  secBuf[0] = 0X7;
    32bc:	movs	r3, #7
    32be:	strb	r3, [r4, #0]
  for (uint32_t i = 0; i < ns; i++) {
    32c0:	cmp.w	r9, #0
    32c4:	bne.w	3184 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x3b8>
  if (!writeUpcase(partitionOffset + clusterHeapOffset + sectorsPerCluster)) {
    32c8:	ldr	r3, [sp, #8]
    32ca:	ldr	r2, [sp, #24]
    32cc:	ldr	r0, [sp, #12]
    32ce:	adds	r1, r3, r2
    32d0:	bl	2c10 <ExFatFormatter::writeUpcase(unsigned long)>
    32d4:	cmp	r0, #0
    32d6:	beq.w	2f4a <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x17e>
  if (m_upcaseSize > BYTES_PER_SECTOR * sectorsPerCluster) {
    32da:	ldr	r2, [sp, #4]
    32dc:	mov.w	r3, #512	; 0x200
    32e0:	lsls	r3, r2
    32e2:	ldr	r2, [sp, #12]
    32e4:	ldr	r2, [r2, #8]
    32e6:	cmp	r2, r3
    32e8:	bls.w	31ea <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x41e>
    32ec:	b.n	2f4a <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x17e>
  sectorsPerCluster = 1UL << sectorsPerClusterShift;
    32ee:	mov.w	r2, #256	; 0x100
    32f2:	str.w	r9, [sp, #4]
    32f6:	str	r2, [sp, #24]
    32f8:	b.n	2e1e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x52>
  writeMsg(pr, "Format done\r\n");
    32fa:	cmp	r7, #0
    32fc:	beq.w	2f4c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x180>
    3300:	ldr	r1, [pc, #28]	; (3320 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x554>)
    3302:	mov	r0, r7
    3304:	bl	2b74 <Print::write(char const*) [clone .isra.0]>
    3308:	b.n	2f4c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x180>
    330a:	nop
    330c:	.word	0x200006d4
    3310:	.word	0x2000138c
    3314:	.word	0x200006f8
    3318:	.word	0x200006e4
    331c:	.word	0x200006fc
    3320:	.word	0x2000070c

00003324 <ExFatFile::cmpName(DirName_t const*, ExName_t*)>:
  hash = ((hash << 15) | (hash >> 1)) + (c & 0XFF);
  hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
  return hash;
}
//------------------------------------------------------------------------------
bool ExFatFile::cmpName(const DirName_t* dirName, ExName_t* fname) {
    3324:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  const char* next;
  /** Position one beyond last LFN character. */
  const char* end;
#if !USE_UTF8_LONG_NAMES
  /** \return true if at end. */
  bool atEnd() { return next == end; }
    3328:	ldrd	r3, r8, [r2, #4]
    332c:	add.w	r9, r3, #15
  return *reinterpret_cast<const uint16_t*>(src);
    3330:	ldrh.w	r0, [r1, #2]!
  for (uint8_t i = 0; i < 15; i++) {
    uint16_t u = getLe16(dirName->unicode + 2 * i);
    if (fname->atEnd()) {
    3334:	cmp	r8, r3
  /** Reset to start of LFN. */
  void reset() { next = begin; }
  /** \return next char of LFN. */
  char getch() { return atEnd() ? 0 : *next++; }
    3336:	add.w	r3, r3, #1
    if (toUpcase(cp) != toUpcase(u)) {
      return false;
    }
#else   // USE_UTF8_LONG_NAMES
    char c = fname->getch();
    if (u >= 0x7F || toUpper(c) != toUpper(u)) {
    333a:	uxtb.w	ip, r0
    if (fname->atEnd()) {
    333e:	beq.n	337e <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x5a>
    3340:	str	r3, [r2, #4]
    if (u >= 0x7F || toUpper(c) != toUpper(u)) {
    3342:	cmp	r0, #126	; 0x7e
    3344:	ldrb.w	lr, [r3, #-1]
static char toUpper(char c) { return 'a' <= c && c <= 'z' ? c - 'a' + 'A' : c; }
    3348:	sub.w	r4, ip, #97	; 0x61
    334c:	sub.w	r6, ip, #32
    3350:	sub.w	r5, lr, #97	; 0x61
    3354:	sub.w	r7, lr, #32
    if (u >= 0x7F || toUpper(c) != toUpper(u)) {
    3358:	bhi.n	3378 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x54>
static char toUpper(char c) { return 'a' <= c && c <= 'z' ? c - 'a' + 'A' : c; }
    335a:	cmp	r5, #25
    335c:	it	ls
    335e:	uxtbls.w	lr, r7
    3362:	cmp	r4, #25
    3364:	it	ls
    3366:	uxtbls.w	ip, r6
    if (u >= 0x7F || toUpper(c) != toUpper(u)) {
    336a:	cmp	ip, lr
    336c:	bne.n	3378 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x54>
  for (uint8_t i = 0; i < 15; i++) {
    336e:	cmp	r9, r3
    3370:	bne.n	3330 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0xc>
      return false;
    }
#endif  // USE_UTF8_LONG_NAMES
  }
  return true;
    3372:	movs	r0, #1
}
    3374:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return false;
    3378:	movs	r0, #0
}
    337a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return u == 0;
    337e:	clz	r0, r0
    3382:	lsrs	r0, r0, #5
}
    3384:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00003388 <ExFatFile::getName7(char*, unsigned int)>:
//------------------------------------------------------------------------------
size_t ExFatFile::getName7(char* name, size_t count) {
    3388:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  DirName_t* dn;
  size_t n = 0;
  if (!isOpen()) {
    338c:	ldrb.w	r3, [r0, #49]	; 0x31
size_t ExFatFile::getName7(char* name, size_t count) {
    3390:	mov	r7, r1
  if (!isOpen()) {
    3392:	cmp	r3, #0
    3394:	beq.n	3416 <ExFatFile::getName7(char*, unsigned int)+0x8e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t is = 2; is <= m_setCount; is++) {
    3396:	ldrb.w	r3, [r0, #48]	; 0x30
    339a:	mov	r6, r0
    339c:	cmp	r3, #1
    339e:	bls.n	3422 <ExFatFile::getName7(char*, unsigned int)+0x9a>
    33a0:	mov	r5, r2
    33a2:	mov.w	r9, #2
  size_t n = 0;
    33a6:	movs	r4, #0
      }
      if ((n + 1) >= count) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      name[n++] = c < 0X7F ? c : '?';
    33a8:	mov.w	r8, #63	; 0x3f
    dn = reinterpret_cast<DirName_t*>(dirCache(is, FsCache::CACHE_FOR_READ));
    33ac:	movs	r2, #0
    33ae:	mov	r1, r9
    33b0:	mov	r0, r6
    33b2:	bl	3484 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
    33b6:	mov	ip, r0
    33b8:	cbz	r0, 3416 <ExFatFile::getName7(char*, unsigned int)+0x8e>
    33ba:	ldrb	r3, [r0, #0]
    33bc:	cmp	r3, #193	; 0xc1
    33be:	bne.n	3416 <ExFatFile::getName7(char*, unsigned int)+0x8e>
    33c0:	subs	r2, r4, #1
    33c2:	add.w	r1, r4, #15
    33c6:	add	r2, r7
    33c8:	ldrh.w	r3, [ip, #2]!
      if (c == 0) {
    33cc:	cbz	r3, 33f0 <ExFatFile::getName7(char*, unsigned int)+0x68>
      if ((n + 1) >= count) {
    33ce:	adds	r4, #1
    33d0:	cmp	r4, r5
    33d2:	bcs.n	3416 <ExFatFile::getName7(char*, unsigned int)+0x8e>
      name[n++] = c < 0X7F ? c : '?';
    33d4:	cmp	r3, #126	; 0x7e
    33d6:	bhi.n	33fc <ExFatFile::getName7(char*, unsigned int)+0x74>
    for (uint8_t in = 0; in < 15; in++) {
    33d8:	cmp	r4, r1
      name[n++] = c < 0X7F ? c : '?';
    33da:	strb.w	r3, [r2, #1]!
    for (uint8_t in = 0; in < 15; in++) {
    33de:	bne.n	33c8 <ExFatFile::getName7(char*, unsigned int)+0x40>
  for (uint8_t is = 2; is <= m_setCount; is++) {
    33e0:	add.w	r9, r9, #1
    33e4:	ldrb.w	r3, [r6, #48]	; 0x30
    33e8:	uxtb.w	r9, r9
    33ec:	cmp	r3, r9
    33ee:	bcs.n	33ac <ExFatFile::getName7(char*, unsigned int)+0x24>
    }
  }
done:
  name[n] = 0;
    33f0:	add	r7, r4
    33f2:	movs	r3, #0
  return n;

fail:
  *name = 0;
  return 0;
}
    33f4:	mov	r0, r4
  name[n] = 0;
    33f6:	strb	r3, [r7, #0]
}
    33f8:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    for (uint8_t in = 0; in < 15; in++) {
    33fc:	cmp	r4, r1
      name[n++] = c < 0X7F ? c : '?';
    33fe:	strb.w	r8, [r2, #1]!
    for (uint8_t in = 0; in < 15; in++) {
    3402:	bne.n	33c8 <ExFatFile::getName7(char*, unsigned int)+0x40>
  for (uint8_t is = 2; is <= m_setCount; is++) {
    3404:	add.w	r9, r9, #1
    3408:	ldrb.w	r3, [r6, #48]	; 0x30
    340c:	uxtb.w	r9, r9
    3410:	cmp	r3, r9
    3412:	bcs.n	33ac <ExFatFile::getName7(char*, unsigned int)+0x24>
    3414:	b.n	33f0 <ExFatFile::getName7(char*, unsigned int)+0x68>
  *name = 0;
    3416:	movs	r3, #0
  return 0;
    3418:	mov	r4, r3
  *name = 0;
    341a:	strb	r3, [r7, #0]
}
    341c:	mov	r0, r4
    341e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  size_t n = 0;
    3422:	movs	r4, #0
    3424:	b.n	33f2 <ExFatFile::getName7(char*, unsigned int)+0x6a>
    3426:	nop

00003428 <ExFatFile::hashName(ExName_t*)>:
fail:
  *name = 0;
  return 0;
}
//------------------------------------------------------------------------------
bool ExFatFile::hashName(ExName_t* fname) {
    3428:	push	{r4, r5, lr}
  void reset() { next = begin; }
    342a:	ldr	r5, [r1, #0]
  bool atEnd() { return next == end; }
    342c:	ldr	r4, [r1, #8]
  void reset() { next = begin; }
    342e:	str	r5, [r1, #4]
    }
    hash = exFatHash(u, hash);
    fname->nameLength++;
  }
#else   // USE_UTF8_LONG_NAMES
  while (!fname->atEnd()) {
    3430:	cmp	r5, r4
    3432:	beq.n	3480 <ExFatFile::hashName(ExName_t*)+0x58>
    3434:	mov	r2, r5
  uint16_t hash = 0;
    3436:	movs	r3, #0
  char getch() { return atEnd() ? 0 : *next++; }
    3438:	adds	r2, #1
  hash = ((hash << 15) | (hash >> 1)) + u;
    343a:	lsrs	r0, r3, #1
    343c:	str	r2, [r1, #4]
    343e:	orr.w	r3, r0, r3, lsl #15
    3442:	ldrb.w	r0, [r2, #-1]
static char toUpper(char c) { return 'a' <= c && c <= 'z' ? c - 'a' + 'A' : c; }
    3446:	sub.w	ip, r0, #97	; 0x61
    344a:	sub.w	lr, r0, #32
    344e:	cmp.w	ip, #25
    3452:	it	ls
    3454:	uxtbls.w	r0, lr
  while (!fname->atEnd()) {
    3458:	cmp	r4, r2
  hash = ((hash << 15) | (hash >> 1)) + u;
    345a:	add	r3, r0
  hash = ((hash << 15) | (hash >> 1));
    345c:	mov.w	r0, r3, lsl #15
    3460:	ubfx	r3, r3, #1, #15
    3464:	and.w	r0, r0, #32768	; 0x8000
    3468:	orr.w	r3, r3, r0
  while (!fname->atEnd()) {
    346c:	bne.n	3438 <ExFatFile::hashName(ExName_t*)+0x10>
    // Convert to byte for smaller exFatHash.
    char c = fname->getch();
    hash = exFatHash(c, hash);
  }
  fname->nameLength = fname->end - fname->begin;
    346e:	subs	r4, r4, r5
#endif  // USE_UTF8_LONG_NAMES
  fname->nameHash = hash;
    3470:	strh	r3, [r1, #16]
  if (!fname->nameLength || fname->nameLength > EXFAT_MAX_NAME_LENGTH) {
    3472:	subs	r0, r4, #1
  fname->nameLength = fname->end - fname->begin;
    3474:	str	r4, [r1, #12]
  }
  return true;

fail:
  return false;
}
    3476:	cmp	r0, #254	; 0xfe
    3478:	ite	hi
    347a:	movhi	r0, #0
    347c:	movls	r0, #1
    347e:	pop	{r4, r5, pc}
  uint16_t hash = 0;
    3480:	movs	r3, #0
    3482:	b.n	346e <ExFatFile::hashName(ExName_t*)+0x46>

00003484 <ExFatFile::dirCache(unsigned char, unsigned char)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    3484:	push	{r4, r5, r6, lr}
  DirPos_t pos = m_dirPos;
    3486:	add.w	r3, r0, #36	; 0x24
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    348a:	sub	sp, #16
    348c:	mov	ip, r1
    348e:	mov	r4, r0
  DirPos_t pos = m_dirPos;
    3490:	add	r5, sp, #4
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    3492:	mov	r6, r2
  DirPos_t pos = m_dirPos;
    3494:	ldmia.w	r3, {r0, r1, r2}
    3498:	stmia.w	r5, {r0, r1, r2}
  if (m_vol->dirSeek(&pos, FS_DIR_SIZE * set) != 1) {
    349c:	mov.w	r2, ip, lsl #5
    34a0:	mov	r1, r5
    34a2:	ldr	r0, [r4, #32]
    34a4:	bl	4024 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    34a8:	cmp	r0, #1
    34aa:	bne.n	34ba <ExFatFile::dirCache(unsigned char, unsigned char)+0x36>
    return nullptr;
  }
  return m_vol->dirCache(&pos, options);
    34ac:	mov	r2, r6
    34ae:	mov	r1, r5
    34b0:	ldr	r0, [r4, #32]
    34b2:	bl	3fec <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
}
    34b6:	add	sp, #16
    34b8:	pop	{r4, r5, r6, pc}
    return nullptr;
    34ba:	movs	r0, #0
}
    34bc:	add	sp, #16
    34be:	pop	{r4, r5, r6, pc}

000034c0 <ExFatFile::close()>:
//------------------------------------------------------------------------------
bool ExFatFile::close() {
    34c0:	push	{r4, lr}
    34c2:	mov	r4, r0
  bool rtn = sync();
    34c4:	bl	46b4 <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    34c8:	movs	r3, #0
    34ca:	strb.w	r3, [r4, #49]	; 0x31
  m_flags = 0;
    34ce:	strb.w	r3, [r4, #51]	; 0x33
  return rtn;
}
    34d2:	pop	{r4, pc}

000034d4 <ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::getCreateDateTime(uint16_t* pdate, uint16_t* ptime) {
    34d4:	push	{r3, r4, r5, lr}
    34d6:	mov	r4, r2
    34d8:	mov	r5, r1
  DirFile_t* df = reinterpret_cast<DirFile_t*>(
      m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_READ));
    34da:	movs	r2, #0
    34dc:	add.w	r1, r0, #36	; 0x24
    34e0:	ldr	r0, [r0, #32]
    34e2:	bl	3fec <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    34e6:	mov	r3, r0
    34e8:	cbz	r0, 34f4 <ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)+0x20>
    34ea:	ldrh	r2, [r0, #10]
    DBG_FAIL_MACRO;
    goto fail;
  }
  *pdate = getLe16(df->createDate);
  *ptime = getLe16(df->createTime);
  return true;
    34ec:	movs	r0, #1
  *pdate = getLe16(df->createDate);
    34ee:	strh	r2, [r5, #0]
    34f0:	ldrh	r3, [r3, #8]
  *ptime = getLe16(df->createTime);
    34f2:	strh	r3, [r4, #0]

fail:
  return false;
}
    34f4:	pop	{r3, r4, r5, pc}
    34f6:	nop

000034f8 <ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)>:
//------------------------------------------------------------------------------
bool ExFatFile::getModifyDateTime(uint16_t* pdate, uint16_t* ptime) {
    34f8:	push	{r3, r4, r5, lr}
    34fa:	mov	r4, r2
    34fc:	mov	r5, r1
  DirFile_t* df = reinterpret_cast<DirFile_t*>(
      m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_READ));
    34fe:	movs	r2, #0
    3500:	add.w	r1, r0, #36	; 0x24
    3504:	ldr	r0, [r0, #32]
    3506:	bl	3fec <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    350a:	mov	r3, r0
    350c:	cbz	r0, 3518 <ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)+0x20>
    350e:	ldrh	r2, [r0, #14]
    DBG_FAIL_MACRO;
    goto fail;
  }
  *pdate = getLe16(df->modifyDate);
  *ptime = getLe16(df->modifyTime);
  return true;
    3510:	movs	r0, #1
  *pdate = getLe16(df->modifyDate);
    3512:	strh	r2, [r5, #0]
    3514:	ldrh	r3, [r3, #12]
  *ptime = getLe16(df->modifyTime);
    3516:	strh	r3, [r4, #0]

fail:
  return false;
}
    3518:	pop	{r3, r4, r5, pc}
    351a:	nop

0000351c <ExFatFile::openRoot(ExFatVolume*)>:
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRoot(ExFatVolume* vol) {
    351c:	push	{r3, r4, r5, lr}
    351e:	mov	r5, r1
  if (isOpen()) {
    3520:	ldrb.w	r1, [r0, #49]	; 0x31
    3524:	cbz	r1, 352a <ExFatFile::openRoot(ExFatVolume*)+0xe>
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
  return true;

fail:
  return false;
    3526:	movs	r0, #0
}
    3528:	pop	{r3, r4, r5, pc}
  memset(this, 0, sizeof(ExFatFile));
    352a:	movs	r2, #56	; 0x38
    352c:	mov	r4, r0
    352e:	bl	10104 <memset>
  m_flags = FILE_FLAG_READ;
    3532:	movs	r3, #1
  m_attributes = FILE_ATTR_ROOT;
    3534:	movs	r2, #64	; 0x40
  m_vol = vol;
    3536:	str	r5, [r4, #32]
  m_flags = FILE_FLAG_READ;
    3538:	mov	r0, r3
    353a:	strb.w	r3, [r4, #51]	; 0x33
  m_attributes = FILE_ATTR_ROOT;
    353e:	strb.w	r2, [r4, #49]	; 0x31
}
    3542:	pop	{r3, r4, r5, pc}

00003544 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>:
//------------------------------------------------------------------------------
bool ExFatFile::parsePathName(const char* path, ExName_t* fname,
                              const char** ptr) {
    3544:	push	{r4, r5, r6, r7}
    3546:	mov	r4, r1
  // Skip leading spaces.
  while (*path == ' ') {
    3548:	ldrb	r1, [r1, #0]
    354a:	cmp	r1, #32
    354c:	bne.n	3556 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x12>
    354e:	ldrb.w	r5, [r4, #1]!
    3552:	cmp	r5, #32
    3554:	beq.n	354e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa>
    path++;
  }
  fname->begin = path;
    3556:	str	r4, [r2, #0]
  fname->end = path;
    3558:	str	r4, [r2, #8]
  while (*path && !isDirSeparator(*path)) {
    355a:	ldrb	r5, [r4, #0]
    355c:	cmp	r5, #47	; 0x2f
    355e:	beq.n	3584 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x40>
    3560:	cbz	r5, 3584 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x40>
    3562:	adds	r7, r4, #1
    3564:	ldr	r6, [pc, #136]	; (35f0 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xac>)
  return !(lfnReservedChar(c) || c & 0X80);
    3566:	cmp	r5, #60	; 0x3c
    3568:	bhi.n	35a2 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x5e>
    356a:	cmp	r5, #33	; 0x21
    356c:	bhi.n	35ca <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x86>
    356e:	subs	r1, r5, #1
    3570:	cmp	r1, #30
    3572:	bls.n	35ac <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x68>
    uint8_t c = *path++;
    if (!lfnLegalChar(c)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (c != '.' && c != ' ') {
    3574:	cmp	r5, #46	; 0x2e
    uint8_t c = *path++;
    3576:	mov	r4, r7
    if (c != '.' && c != ' ') {
    3578:	bne.n	35e8 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa4>
  while (*path && !isDirSeparator(*path)) {
    357a:	ldrb.w	r5, [r7], #1
    357e:	cbz	r5, 3584 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x40>
    3580:	cmp	r5, #47	; 0x2f
    3582:	bne.n	3566 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x22>
      // Need to trim trailing dots spaces.
      fname->end = path;
    }
  }
  // Advance to next path component.
  for (; *path == ' ' || isDirSeparator(*path); path++) {
    3584:	cmp	r5, #32
    3586:	beq.n	358c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x48>
    3588:	cmp	r5, #47	; 0x2f
    358a:	bne.n	3598 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x54>
    358c:	ldrb.w	r1, [r4, #1]!
    3590:	cmp	r1, #32
    3592:	beq.n	358c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x48>
    3594:	cmp	r1, #47	; 0x2f
    3596:	beq.n	358c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x48>
  }
  *ptr = path;
    3598:	str	r4, [r3, #0]
  return hashName(fname);
    359a:	mov	r1, r2

fail:
  return false;
}
    359c:	pop	{r4, r5, r6, r7}
  return hashName(fname);
    359e:	b.w	3428 <ExFatFile::hashName(ExName_t*)>
    35a2:	cmp	r5, #92	; 0x5c
    35a4:	beq.n	35ac <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x68>
    35a6:	bls.n	35b2 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x6e>
    35a8:	cmp	r5, #124	; 0x7c
    35aa:	bne.n	35de <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x9a>
}
    35ac:	movs	r0, #0
    35ae:	pop	{r4, r5, r6, r7}
    35b0:	bx	lr
    35b2:	subs	r5, #62	; 0x3e
    35b4:	cmp	r5, #1
    35b6:	bls.n	35ac <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x68>
    uint8_t c = *path++;
    35b8:	mov	r4, r7
      fname->end = path;
    35ba:	str	r7, [r2, #8]
  while (*path && !isDirSeparator(*path)) {
    35bc:	ldrb.w	r5, [r7], #1
    35c0:	cmp	r5, #47	; 0x2f
    35c2:	beq.n	3584 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x40>
    35c4:	cmp	r5, #0
    35c6:	bne.n	3566 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x22>
    35c8:	b.n	3584 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x40>
    35ca:	sub.w	r4, r5, #34	; 0x22
    35ce:	uxtb	r4, r4
    35d0:	lsr.w	r4, r6, r4
    35d4:	lsls	r4, r4, #31
    35d6:	bpl.n	3574 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x30>
}
    35d8:	movs	r0, #0
    35da:	pop	{r4, r5, r6, r7}
    35dc:	bx	lr
  return !(lfnReservedChar(c) || c & 0X80);
    35de:	lsls	r1, r5, #24
    35e0:	bpl.n	35b8 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x74>
}
    35e2:	movs	r0, #0
    35e4:	pop	{r4, r5, r6, r7}
    35e6:	bx	lr
    if (c != '.' && c != ' ') {
    35e8:	cmp	r5, #32
    35ea:	beq.n	357a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x36>
    35ec:	b.n	35ba <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x76>
    35ee:	nop
    35f0:	.word	0x05002101

000035f4 <ExFatFile::read(void*, unsigned int)>:
  m_curPosition = saveCurPosition;
  m_curCluster = saveCurCluster;
  return c;
}
//------------------------------------------------------------------------------
int ExFatFile::read(void* buf, size_t count) {
    35f4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  bool isReadable() const { return m_flags & FILE_FLAG_READ; }
    35f8:	ldrb.w	r3, [r0, #51]	; 0x33
    35fc:	sub	sp, #12
    35fe:	mov	r5, r0
  uint8_t* cache;
  uint16_t sectorOffset;
  uint32_t sector;
  uint32_t clusterOffset;

  if (!isReadable()) {
    3600:	lsls	r4, r3, #31
    3602:	bpl.n	36ee <ExFatFile::read(void*, unsigned int)+0xfa>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isContiguous() || isFile()) {
    3604:	lsls	r0, r3, #25
    3606:	mov	r7, r1
    3608:	mov	r8, r2
    360a:	bpl.w	376e <ExFatFile::read(void*, unsigned int)+0x17a>
    if ((m_curPosition + count) > m_validLength) {
    360e:	ldrd	r2, r3, [r5]
    3612:	ldrd	r1, r0, [r5, #16]
    3616:	adds.w	r4, r8, r2
    361a:	adc.w	r3, r3, #0
    361e:	cmp	r1, r4
    3620:	sbcs.w	r3, r0, r3
    3624:	bcc.w	377a <ExFatFile::read(void*, unsigned int)+0x186>
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    3628:	cmp.w	r8, #0
    362c:	beq.n	36e6 <ExFatFile::read(void*, unsigned int)+0xf2>
    if ((m_curPosition + count) > m_validLength) {
    362e:	mov	r6, r8
        m_curCluster =
            isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
      } else if (isContiguous()) {
        m_curCluster++;
      } else {
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    3630:	add.w	r9, r5, #24
    if ((m_curPosition + count) > m_validLength) {
    3634:	ldrd	r3, r2, [r5]
    clusterOffset = m_curPosition & m_vol->clusterMask();
    3638:	ldr.w	sl, [r5, #32]
    363c:	ldr.w	r4, [sl, #1080]	; 0x438
    3640:	ands	r4, r3
    sectorOffset = clusterOffset & m_vol->sectorMask();
    3642:	ubfx	fp, r4, #0, #9
    if (clusterOffset == 0) {
    3646:	cmp	r4, #0
    3648:	bne.n	372c <ExFatFile::read(void*, unsigned int)+0x138>
      if (m_curPosition == 0) {
    364a:	orrs	r3, r2
    364c:	bne.n	3730 <ExFatFile::read(void*, unsigned int)+0x13c>
            isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
    364e:	ldrb.w	r3, [r5, #49]	; 0x31
    3652:	lsls	r2, r3, #25
  uint32_t rootDirectoryCluster() const { return m_rootDirectoryCluster; }
    3654:	ite	mi
    3656:	ldrmi.w	r2, [sl, #1076]	; 0x434
    365a:	ldrpl	r2, [r5, #28]
        m_curCluster++;
    365c:	str	r2, [r5, #24]
           ((cluster - 2) << m_sectorsPerClusterShift);
    365e:	ldrb.w	r0, [sl, #1093]	; 0x445
    3662:	subs	r2, #2
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
    3664:	ldr.w	r1, [sl, #1068]	; 0x42c
             (clusterOffset >> m_vol->bytesPerSectorShift());
    3668:	lsrs	r3, r4, #9
    366a:	lsls	r2, r0
    sector = m_vol->clusterStartSector(m_curCluster) +
    366c:	add.w	r1, r1, r4, lsr #9
    3670:	add	r1, r2
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector() ||
    3672:	cmp.w	fp, #0
    3676:	bne.n	3704 <ExFatFile::read(void*, unsigned int)+0x110>
    3678:	cmp.w	r6, #512	; 0x200
    367c:	bcc.n	3704 <ExFatFile::read(void*, unsigned int)+0x110>
   * \param[in] option mode for cached sector.
   * \return Address of cached sector.
   */
  uint8_t* prepare(uint32_t sector, uint8_t option);
  /** \return Logical sector number for cached sector. */
  uint32_t sector() { return m_sector; }
    367e:	ldr.w	r2, [sl, #536]	; 0x218
    3682:	cmp	r1, r2
    3684:	beq.n	3704 <ExFatFile::read(void*, unsigned int)+0x110>
        goto fail;
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2 * m_vol->bytesPerSector()) {
    3686:	cmp.w	r6, #1024	; 0x400
    368a:	bcc.n	373e <ExFatFile::read(void*, unsigned int)+0x14a>
  uint32_t sectorsPerCluster() const { return 1UL << m_sectorsPerClusterShift; }
    368c:	mov.w	fp, #1
    3690:	lsl.w	fp, fp, r0
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
      // Limit reads to current cluster.
      uint32_t maxNs = m_vol->sectorsPerCluster() -
                       (clusterOffset >> m_vol->bytesPerSectorShift());
    3694:	sub.w	fp, fp, r3
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    3698:	lsrs	r3, r6, #9
    369a:	cmp	fp, r3
    369c:	it	cs
    369e:	movcs	fp, r3
    return sector <= m_sector && m_sector < (sector + count);
    36a0:	cmp	r1, r2
      if (ns > maxNs) {
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
    36a2:	mov.w	r4, fp, lsl #9
    36a6:	bhi.n	36be <ExFatFile::read(void*, unsigned int)+0xca>
    36a8:	add.w	r3, r1, fp
    36ac:	cmp	r2, r3
    36ae:	bcs.n	36be <ExFatFile::read(void*, unsigned int)+0xca>
    if (isCached(sector, count) && !sync()) {
    36b0:	add.w	r0, sl, #528	; 0x210
    36b4:	str	r1, [sp, #4]
    36b6:	bl	2a38 <FsCache::sync()>
    36ba:	ldr	r1, [sp, #4]
    36bc:	cbz	r0, 36ee <ExFatFile::read(void*, unsigned int)+0xfa>
    return m_blockDev->readSectors(sector, dst, count);
    36be:	ldr.w	r0, [sl, #532]	; 0x214
    36c2:	mov	r3, fp
    36c4:	ldr	r2, [r0, #0]
    36c6:	ldr.w	sl, [r2, #20]
    36ca:	mov	r2, r7
    36cc:	blx	sl
      if (!m_vol->cacheSafeRead(sector, dst, ns)) {
    36ce:	cbz	r0, 36ee <ExFatFile::read(void*, unsigned int)+0xfa>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
    36d0:	mov	r3, r4
    dst += n;
    36d2:	add	r7, r4
    m_curPosition += n;
    36d4:	ldrd	r1, r2, [r5]
    36d8:	adds	r3, r3, r1
    36da:	adc.w	r2, r2, #0
  while (toRead) {
    36de:	subs	r6, r6, r4
    m_curPosition += n;
    36e0:	strd	r3, r2, [r5]
  while (toRead) {
    36e4:	bne.n	3638 <ExFatFile::read(void*, unsigned int)+0x44>
    toRead -= n;
  }
  return count - toRead;
    36e6:	mov	r0, r8

fail:
  m_error |= READ_ERROR;
  return -1;
}
    36e8:	add	sp, #12
    36ea:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  m_error |= READ_ERROR;
    36ee:	ldrb.w	r3, [r5, #50]	; 0x32
  return -1;
    36f2:	mov.w	r0, #4294967295
  m_error |= READ_ERROR;
    36f6:	orr.w	r3, r3, #2
    36fa:	strb.w	r3, [r5, #50]	; 0x32
}
    36fe:	add	sp, #12
    3700:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      n = m_vol->bytesPerSector() - sectorOffset;
    3704:	rsb	r4, fp, #512	; 0x200
    return m_dataCache.prepare(sector, option);
    3708:	movs	r2, #0
    370a:	add.w	r0, sl, #528	; 0x210
    370e:	cmp	r4, r6
    3710:	it	cs
    3712:	movcs	r4, r6
    3714:	bl	29b8 <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    3718:	cmp	r0, #0
    371a:	beq.n	36ee <ExFatFile::read(void*, unsigned int)+0xfa>
      memcpy(dst, src, n);
    371c:	add.w	r1, r0, fp
    3720:	mov	r2, r4
    3722:	mov	r0, r7
    3724:	bl	b09c <memcpy>
    m_curPosition += n;
    3728:	mov	r3, r4
    372a:	b.n	36d2 <ExFatFile::read(void*, unsigned int)+0xde>
        m_curCluster++;
    372c:	ldr	r2, [r5, #24]
    372e:	b.n	365e <ExFatFile::read(void*, unsigned int)+0x6a>
      } else if (isContiguous()) {
    3730:	ldrb.w	r3, [r5, #51]	; 0x33
    3734:	lsls	r3, r3, #25
    3736:	bpl.n	3756 <ExFatFile::read(void*, unsigned int)+0x162>
        m_curCluster++;
    3738:	ldr	r2, [r5, #24]
    373a:	adds	r2, #1
    373c:	b.n	365c <ExFatFile::read(void*, unsigned int)+0x68>
    return m_blockDev->readSector(sector, dst);
    373e:	ldr.w	r0, [sl, #532]	; 0x214
    3742:	mov	r2, r7
    3744:	ldr	r3, [r0, #0]
    3746:	ldr	r3, [r3, #16]
    3748:	blx	r3
      if (!m_vol->cacheSafeRead(sector, dst)) {
    374a:	cmp	r0, #0
    374c:	beq.n	36ee <ExFatFile::read(void*, unsigned int)+0xfa>
    374e:	mov.w	r3, #512	; 0x200
      n = m_vol->bytesPerSector();
    3752:	mov	r4, r3
    3754:	b.n	36d2 <ExFatFile::read(void*, unsigned int)+0xde>
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    3756:	mov	r2, r9
    3758:	mov	r0, sl
    375a:	ldr	r1, [r5, #24]
    375c:	bl	40b8 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
        if (fg < 0) {
    3760:	cmp	r0, #0
    3762:	blt.n	36ee <ExFatFile::read(void*, unsigned int)+0xfa>
        if (fg == 0) {
    3764:	beq.n	3780 <ExFatFile::read(void*, unsigned int)+0x18c>
    sector = m_vol->clusterStartSector(m_curCluster) +
    3766:	ldr.w	sl, [r5, #32]
    376a:	ldr	r2, [r5, #24]
    376c:	b.n	365e <ExFatFile::read(void*, unsigned int)+0x6a>
  if (isContiguous() || isFile()) {
    376e:	ldrb.w	r3, [r5, #49]	; 0x31
    3772:	lsls	r1, r3, #28
    3774:	bpl.w	3628 <ExFatFile::read(void*, unsigned int)+0x34>
    3778:	b.n	360e <ExFatFile::read(void*, unsigned int)+0x1a>
      count = toRead = m_validLength - m_curPosition;
    377a:	sub.w	r8, r1, r2
    377e:	b.n	3628 <ExFatFile::read(void*, unsigned int)+0x34>
          if (isDir()) {
    3780:	ldrb.w	r3, [r5, #49]	; 0x31
    3784:	tst.w	r3, #80	; 0x50
    3788:	beq.n	36ee <ExFatFile::read(void*, unsigned int)+0xfa>
  return count - toRead;
    378a:	sub.w	r8, r8, r6
    378e:	mov	r0, r8
    3790:	b.n	36e8 <ExFatFile::read(void*, unsigned int)+0xf4>
    3792:	nop

00003794 <ExFatFile::peek()>:
int ExFatFile::peek() {
    3794:	push	{r4, r5, r6, r7, lr}
    3796:	sub	sp, #12
    return read(&b, 1) == 1 ? b : -1;
    3798:	movs	r2, #1
    379a:	mov	r4, r0
  uint32_t saveCurCluster = m_curCluster;
    379c:	ldr	r5, [r0, #24]
    379e:	add.w	r1, sp, #7
  uint64_t saveCurPosition = m_curPosition;
    37a2:	ldrd	r6, r7, [r0]
    37a6:	bl	35f4 <ExFatFile::read(void*, unsigned int)>
    37aa:	cmp	r0, #1
  m_curCluster = saveCurCluster;
    37ac:	str	r5, [r4, #24]
    37ae:	ite	eq
    37b0:	ldrbeq.w	r0, [sp, #7]
    37b4:	movne.w	r0, #4294967295
  m_curPosition = saveCurPosition;
    37b8:	strd	r6, r7, [r4]
}
    37bc:	add	sp, #12
    37be:	pop	{r4, r5, r6, r7, pc}

000037c0 <ExFatFile::seekSet(unsigned long long)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
    37c0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    37c4:	mov	r7, r3
  bool isOpen() const { return m_attributes; }
    37c6:	ldrb.w	r3, [r0, #49]	; 0x31
    37ca:	sub	sp, #12
    37cc:	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    37ce:	ldr.w	r8, [r0, #24]
  // error if file not open
  if (!isOpen()) {
    37d2:	cmp	r3, #0
    37d4:	beq.n	387a <ExFatFile::seekSet(unsigned long long)+0xba>
    37d6:	mov	r6, r2
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    37d8:	ldrd	r1, ip, [r0]
    37dc:	cmp	ip, r7
    37de:	it	eq
    37e0:	cmpeq	r1, r2
    37e2:	beq.n	389e <ExFatFile::seekSet(unsigned long long)+0xde>
    return true;
  }
  if (pos == 0) {
    37e4:	orrs.w	r2, r6, r7
    37e8:	beq.n	3886 <ExFatFile::seekSet(unsigned long long)+0xc6>
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    37ea:	lsls	r5, r3, #28
    37ec:	bpl.n	37f8 <ExFatFile::seekSet(unsigned long long)+0x38>
    if (pos > m_validLength) {
    37ee:	ldrd	r0, r2, [r0, #16]
    37f2:	cmp	r0, r6
    37f4:	sbcs	r2, r7
    37f6:	bcc.n	387a <ExFatFile::seekSet(unsigned long long)+0xba>
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
  if (isContiguous()) {
    37f8:	ldrb.w	r2, [r4, #51]	; 0x33
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    37fc:	subs	r5, r6, #1
    37fe:	ldr.w	sl, [r4, #32]
  if (isContiguous()) {
    3802:	str	r2, [sp, #4]
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    3804:	adc.w	r0, r7, #4294967295
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    3808:	ldrb.w	r2, [sl, #1093]	; 0x445
    380c:	adds	r2, #9
    380e:	uxtb	r2, r2
    3810:	rsb	lr, r2, #32
    3814:	lsrs	r5, r2
    3816:	sub.w	r9, r2, #32
    381a:	lsl.w	fp, r0, lr
    381e:	lsr.w	r0, r0, r9
    3822:	orr.w	r5, r5, fp
    3826:	orrs	r5, r0
  if (isContiguous()) {
    3828:	ldr	r0, [sp, #4]
    382a:	lsls	r0, r0, #25
    382c:	bmi.n	3896 <ExFatFile::seekSet(unsigned long long)+0xd6>
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    382e:	subs	r0, r1, #1
    3830:	lsr.w	r2, r0, r2
    3834:	adc.w	r0, ip, #4294967295
  if (nNew < nCur || m_curPosition == 0) {
    3838:	orrs.w	ip, r1, ip
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    383c:	lsl.w	lr, r0, lr
    3840:	lsr.w	r0, r0, r9
    3844:	orr.w	r2, r2, lr
    3848:	orr.w	r2, r2, r0
  if (nNew < nCur || m_curPosition == 0) {
    384c:	beq.n	3852 <ExFatFile::seekSet(unsigned long long)+0x92>
    384e:	cmp	r5, r2
    3850:	bcs.n	38a6 <ExFatFile::seekSet(unsigned long long)+0xe6>
    // must follow chain from first cluster
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
    3852:	lsls	r3, r3, #25
  uint32_t rootDirectoryCluster() const { return m_rootDirectoryCluster; }
    3854:	ite	mi
    3856:	ldrmi.w	r3, [sl, #1076]	; 0x434
    385a:	ldrpl	r3, [r4, #28]
    385c:	str	r3, [r4, #24]
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    385e:	add.w	r9, r4, #24
    3862:	b.n	3872 <ExFatFile::seekSet(unsigned long long)+0xb2>
    3864:	ldr	r1, [r4, #24]
    3866:	subs	r5, #1
    3868:	ldr	r0, [r4, #32]
    386a:	bl	40b8 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    386e:	cmp	r0, #0
    3870:	ble.n	387a <ExFatFile::seekSet(unsigned long long)+0xba>
    3872:	mov	r2, r9
  while (nNew--) {
    3874:	cmp	r5, #0
    3876:	bne.n	3864 <ExFatFile::seekSet(unsigned long long)+0xa4>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }

done:
    3878:	b.n	388a <ExFatFile::seekSet(unsigned long long)+0xca>
  m_curPosition = pos;
  return true;

fail:
  m_curCluster = tmp;
  return false;
    387a:	movs	r0, #0
  m_curCluster = tmp;
    387c:	str.w	r8, [r4, #24]
}
    3880:	add	sp, #12
    3882:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    m_curCluster = 0;
    3886:	movs	r3, #0
    3888:	str	r3, [r0, #24]
  return true;
    388a:	movs	r0, #1
  m_curPosition = pos;
    388c:	strd	r6, r7, [r4]
}
    3890:	add	sp, #12
    3892:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    m_curCluster = m_firstCluster + nNew;
    3896:	ldr	r3, [r4, #28]
    3898:	add	r3, r5
    389a:	str	r3, [r4, #24]
    goto done;
    389c:	b.n	388a <ExFatFile::seekSet(unsigned long long)+0xca>
    return true;
    389e:	movs	r0, #1
}
    38a0:	add	sp, #12
    38a2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    nNew -= nCur;
    38a6:	subs	r5, r5, r2
    38a8:	b.n	385e <ExFatFile::seekSet(unsigned long long)+0x9e>
    38aa:	nop

000038ac <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>:
bool ExFatFile::openPrivate(ExFatFile* dir, ExName_t* fname, oflag_t oflag) {
    38ac:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    38b0:	mov	r8, r2
    38b2:	ldrb.w	r2, [r0, #49]	; 0x31
    38b6:	sub	sp, #68	; 0x44
    38b8:	mov	r5, r0
  if (isOpen() || !dir->isDir()) {
    38ba:	cmp	r2, #0
    38bc:	bne.w	3b50 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2a4>
  bool isDir() const { return m_attributes & FILE_ATTR_DIR; }
    38c0:	mov	fp, r1
    38c2:	ldrb.w	r1, [r1, #49]	; 0x31
    38c6:	tst.w	r1, #80	; 0x50
    38ca:	beq.w	3b50 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2a4>
  switch (oflag & O_ACCMODE) {
    38ce:	and.w	r1, r3, #3
    38d2:	mov	sl, r3
    38d4:	cmp	r1, #3
    38d6:	beq.w	3b50 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2a4>
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
    38da:	adds	r1, #1
    38dc:	and.w	r0, r3, #8
    38e0:	orr.w	r3, r1, r0
    38e4:	str	r3, [sp, #8]
  if (fname) {
    38e6:	cmp.w	r8, #0
    38ea:	beq.w	3c3c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x390>
    freeNeed = 2 + (fname->nameLength + 14) / 15;
    38ee:	ldr.w	r1, [r8, #12]
    38f2:	add.w	r7, r1, #14
    38f6:	ldr	r1, [pc, #744]	; (3be0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x334>)
    38f8:	umull	r1, r7, r1, r7
  if (pos == m_curPosition) {
    38fc:	ldrd	r1, r0, [fp]
    freeNeed = 2 + (fname->nameLength + 14) / 15;
    3900:	lsrs	r7, r7, #3
  if (pos == m_curPosition) {
    3902:	orrs	r1, r0
    freeNeed = 2 + (fname->nameLength + 14) / 15;
    3904:	add.w	r7, r7, #2
    3908:	uxtb	r7, r7
  if (pos == m_curPosition) {
    390a:	beq.n	3918 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x6c>
  m_curPosition = pos;
    390c:	movs	r0, #0
    390e:	movs	r1, #0
    m_curCluster = 0;
    3910:	str.w	r2, [fp, #24]
  m_curPosition = pos;
    3914:	strd	r0, r1, [fp]
        inSet = false;
    3918:	movs	r4, #0
        m_flags |= FILE_FLAG_CONTIGUOUS;
    391a:	ldr	r3, [sp, #8]
        inSet = false;
    391c:	mov	r6, r4
        m_flags |= FILE_FLAG_CONTIGUOUS;
    391e:	orr.w	r3, r3, #64	; 0x40
    3922:	str	r3, [sp, #12]
    n = dir->read(buf, FS_DIR_SIZE);
    3924:	movs	r2, #32
    3926:	mov	r0, fp
    3928:	add.w	r1, sp, r2
    392c:	bl	35f4 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    3930:	cbz	r0, 3976 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xca>
    if (n != FS_DIR_SIZE) {
    3932:	cmp	r0, #32
    3934:	bne.w	3b50 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2a4>
    if (!(buf[0] & EXFAT_TYPE_USED)) {
    3938:	ldrsb.w	r2, [sp, #32]
    393c:	ldrb.w	r3, [sp, #32]
    3940:	cmp	r2, #0
    3942:	blt.w	3b64 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2b8>
      if (freeCount == 0) {
    3946:	cbnz	r4, 3956 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xaa>
        freePos.position = dir->curPosition() - FS_DIR_SIZE;
    3948:	ldr.w	r2, [fp]
    394c:	sub.w	r9, r2, #32
  uint32_t curCluster() const { return m_curCluster; }
    3950:	ldr.w	r2, [fp, #24]
    3954:	str	r2, [sp, #4]
      if (freeCount < freeNeed) {
    3956:	cmp	r4, r7
    3958:	bcs.n	395e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb2>
        freeCount++;
    395a:	adds	r4, #1
    395c:	uxtb	r4, r4
      if (buf[0] == EXFAT_TYPE_END_DIR) {
    395e:	cmp	r3, #0
    3960:	beq.w	3c54 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x3a8>
    n = dir->read(buf, FS_DIR_SIZE);
    3964:	movs	r2, #32
    3966:	mov	r0, fp
      inSet = false;
    3968:	movs	r6, #0
    n = dir->read(buf, FS_DIR_SIZE);
    396a:	add.w	r1, sp, r2
    396e:	bl	35f4 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    3972:	cmp	r0, #0
    3974:	bne.n	3932 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x86>
  if (!(oflag & O_CREAT) || !(modeFlags & FILE_FLAG_WRITE) || !fname) {
    3976:	tst.w	sl, #512	; 0x200
    397a:	beq.w	3b50 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2a4>
    397e:	ldr	r3, [sp, #8]
    3980:	lsls	r3, r3, #30
    3982:	bpl.w	3b50 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2a4>
    3986:	cmp.w	r8, #0
    398a:	beq.w	3b50 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2a4>
  while (freeCount < freeNeed) {
    398e:	cmp	r4, r7
    3990:	bcs.n	39c8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x11c>
    3992:	ldr.w	sl, [sp, #4]
    n = dir->read(buf, FS_DIR_SIZE);
    3996:	movs	r2, #32
    3998:	mov	r0, fp
    399a:	add.w	r1, sp, r2
    399e:	bl	35f4 <ExFatFile::read(void*, unsigned int)>
    freeCount++;
    39a2:	adds	r3, r4, #1
    if (n == 0) {
    39a4:	cmp	r0, #0
    39a6:	beq.w	3c40 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x394>
    if (n != FS_DIR_SIZE) {
    39aa:	cmp	r0, #32
    39ac:	bne.w	3b50 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2a4>
    if (freeCount == 0) {
    39b0:	cbnz	r4, 39be <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x112>
      freePos.position = dir->curPosition() - FS_DIR_SIZE;
    39b2:	ldr.w	r2, [fp]
    39b6:	ldr.w	sl, [fp, #24]
    39ba:	sub.w	r9, r2, #32
    freeCount++;
    39be:	uxtb	r4, r3
  while (freeCount < freeNeed) {
    39c0:	cmp	r4, r7
    39c2:	bcc.n	3996 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xea>
    39c4:	str.w	sl, [sp, #4]
  memset(this, 0, sizeof(ExFatFile));
    39c8:	movs	r2, #56	; 0x38
    39ca:	movs	r1, #0
    39cc:	mov	r0, r5
  bool isContiguous() const { return m_flags & FILE_FLAG_CONTIGUOUS; }
    39ce:	ldrb.w	r4, [fp, #51]	; 0x33
    39d2:	bl	10104 <memset>
  m_dirPos = freePos;
    39d6:	ldr	r2, [sp, #4]
  bool hashName(ExName_t* fname);
  bool mkdir(ExFatFile* parent, ExName_t* fname);

  bool openPrivate(ExFatFile* dir, ExName_t* fname, oflag_t oflag);
  bool parsePathName(const char* path, ExName_t* fname, const char** ptr);
  ExFatVolume* volume() const { return m_vol; }
    39d8:	ldr.w	r3, [fp, #32]
  freePos.isContiguous = dir->isContiguous();
    39dc:	ubfx	r4, r4, #6, #1
  m_dirPos = freePos;
    39e0:	strd	r2, r9, [r5, #36]	; 0x24
  m_attributes = FILE_ATTR_FILE | FS_ATTRIB_ARCHIVE;
    39e4:	movs	r2, #40	; 0x28
  m_dirPos = freePos;
    39e6:	strb.w	r4, [r5, #44]	; 0x2c
  m_vol = dir->volume();
    39ea:	str	r3, [r5, #32]
  m_attributes = FILE_ATTR_FILE | FS_ATTRIB_ARCHIVE;
    39ec:	strb.w	r2, [r5, #49]	; 0x31
  void reset() { next = begin; }
    39f0:	ldr.w	r2, [r8]
    39f4:	str.w	r2, [r8, #4]
  for (uint8_t i = 0; i < freeNeed; i++) {
    39f8:	cmp	r7, #0
    39fa:	beq.w	3d46 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x49a>
      m_setCount = freeNeed - 1;
    39fe:	subs	r2, r7, #1
  for (uint8_t i = 0; i < freeNeed; i++) {
    3a00:	movs	r6, #0
    3a02:	add.w	r9, sp, #20
    3a06:	add.w	sl, r5, #36	; 0x24
      m_setCount = freeNeed - 1;
    3a0a:	uxtb.w	fp, r2
    3a0e:	b.n	3b36 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x28a>
  return m_vol->dirCache(&pos, options);
    3a10:	mov	r1, r9
    3a12:	ldr	r0, [r5, #32]
    3a14:	bl	3fec <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
    if (!cache || (cache[0] & 0x80)) {
    3a18:	mov	r4, r0
    3a1a:	cmp	r0, #0
    3a1c:	beq.w	3b50 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2a4>
    3a20:	ldrsb.w	r3, [r0]
    3a24:	cmp	r3, #0
    3a26:	blt.w	3b50 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2a4>
    memset(cache, 0, FS_DIR_SIZE);
    3a2a:	movs	r2, #32
    3a2c:	movs	r1, #0
    3a2e:	bl	10104 <memset>
    if (i == 0) {
    3a32:	uxtb	r3, r6
    3a34:	cmp	r6, #0
    3a36:	beq.w	3cac <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x400>
    } else if (i == 1) {
    3a3a:	cmp	r3, #1
    3a3c:	beq.w	3cde <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x432>
      dirName->type = EXFAT_TYPE_NAME;
    3a40:	movs	r3, #193	; 0xc1
    3a42:	strb	r3, [r4, #0]
  bool atEnd() { return next == end; }
    3a44:	ldrd	r3, r2, [r8, #4]
        if (fname->atEnd()) {
    3a48:	cmp	r3, r2
    3a4a:	beq.n	3b2a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x27e>
  /** \return next UTF-16 unit of LFN. */
  uint16_t get16() { return atEnd() ? 0 : *next++; }
    3a4c:	adds	r1, r3, #1
    3a4e:	str.w	r1, [r8, #4]
    3a52:	cmp	r1, r2
    3a54:	ldrb	r0, [r3, #0]
    3a56:	strh	r0, [r4, #2]
    3a58:	beq.n	3b2a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x27e>
    3a5a:	adds	r1, r3, #2
    3a5c:	str.w	r1, [r8, #4]
    3a60:	cmp	r1, r2
    3a62:	ldrb	r0, [r3, #1]
    3a64:	strh	r0, [r4, #4]
    3a66:	beq.n	3b2a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x27e>
    3a68:	adds	r1, r3, #3
    3a6a:	str.w	r1, [r8, #4]
    3a6e:	cmp	r2, r1
    3a70:	ldrb	r0, [r3, #2]
    3a72:	strh	r0, [r4, #6]
    3a74:	beq.n	3b2a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x27e>
    3a76:	adds	r1, r3, #4
    3a78:	str.w	r1, [r8, #4]
    3a7c:	cmp	r2, r1
    3a7e:	ldrb	r0, [r3, #3]
    3a80:	strh	r0, [r4, #8]
    3a82:	beq.n	3b2a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x27e>
    3a84:	adds	r1, r3, #5
    3a86:	str.w	r1, [r8, #4]
    3a8a:	cmp	r2, r1
    3a8c:	ldrb	r0, [r3, #4]
    3a8e:	strh	r0, [r4, #10]
    3a90:	beq.n	3b2a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x27e>
    3a92:	adds	r1, r3, #6
    3a94:	str.w	r1, [r8, #4]
    3a98:	cmp	r2, r1
    3a9a:	ldrb	r0, [r3, #5]
    3a9c:	strh	r0, [r4, #12]
    3a9e:	beq.n	3b2a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x27e>
    3aa0:	adds	r1, r3, #7
    3aa2:	str.w	r1, [r8, #4]
    3aa6:	cmp	r2, r1
    3aa8:	ldrb	r0, [r3, #6]
    3aaa:	strh	r0, [r4, #14]
    3aac:	beq.n	3b2a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x27e>
    3aae:	add.w	r1, r3, #8
    3ab2:	str.w	r1, [r8, #4]
    3ab6:	cmp	r2, r1
    3ab8:	ldrb	r0, [r3, #7]
    3aba:	strh	r0, [r4, #16]
    3abc:	beq.n	3b2a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x27e>
    3abe:	add.w	r1, r3, #9
    3ac2:	str.w	r1, [r8, #4]
    3ac6:	cmp	r2, r1
    3ac8:	ldrb	r0, [r3, #8]
    3aca:	strh	r0, [r4, #18]
    3acc:	beq.n	3b2a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x27e>
    3ace:	add.w	r1, r3, #10
    3ad2:	str.w	r1, [r8, #4]
    3ad6:	cmp	r2, r1
    3ad8:	ldrb	r0, [r3, #9]
    3ada:	strh	r0, [r4, #20]
    3adc:	beq.n	3b2a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x27e>
    3ade:	add.w	r1, r3, #11
    3ae2:	str.w	r1, [r8, #4]
    3ae6:	cmp	r2, r1
    3ae8:	ldrb	r0, [r3, #10]
    3aea:	strh	r0, [r4, #22]
    3aec:	beq.n	3b2a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x27e>
    3aee:	add.w	r1, r3, #12
    3af2:	str.w	r1, [r8, #4]
    3af6:	cmp	r2, r1
    3af8:	ldrb	r0, [r3, #11]
    3afa:	strh	r0, [r4, #24]
    3afc:	beq.n	3b2a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x27e>
    3afe:	add.w	r1, r3, #13
    3b02:	str.w	r1, [r8, #4]
    3b06:	cmp	r2, r1
    3b08:	ldrb	r0, [r3, #12]
    3b0a:	strh	r0, [r4, #26]
    3b0c:	beq.n	3b2a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x27e>
    3b0e:	add.w	r1, r3, #14
    3b12:	str.w	r1, [r8, #4]
    3b16:	cmp	r2, r1
    3b18:	ldrb	r0, [r3, #13]
    3b1a:	strh	r0, [r4, #28]
    3b1c:	beq.n	3b2a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x27e>
    3b1e:	add.w	r2, r3, #15
    3b22:	str.w	r2, [r8, #4]
    3b26:	ldrb	r3, [r3, #14]
    3b28:	strh	r3, [r4, #30]
  for (uint8_t i = 0; i < freeNeed; i++) {
    3b2a:	adds	r6, #1
    3b2c:	uxtb	r3, r6
    3b2e:	cmp	r3, r7
    3b30:	bcs.w	3d46 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x49a>
  if (m_vol->dirSeek(&pos, FS_DIR_SIZE * set) != 1) {
    3b34:	ldr	r3, [r5, #32]
  DirPos_t pos = m_dirPos;
    3b36:	ldmia.w	sl, {r0, r1, r2}
    3b3a:	stmia.w	r9, {r0, r1, r2}
  if (m_vol->dirSeek(&pos, FS_DIR_SIZE * set) != 1) {
    3b3e:	lsls	r2, r6, #5
    3b40:	mov	r0, r3
    3b42:	mov	r1, r9
    3b44:	bl	4024 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    3b48:	cmp	r0, #1
    3b4a:	mov	r2, r0
    3b4c:	beq.w	3a10 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x164>
  m_attributes = FILE_ATTR_CLOSED;
    3b50:	movs	r3, #0
  return false;
    3b52:	mov	r6, r3
  m_attributes = FILE_ATTR_CLOSED;
    3b54:	strb.w	r3, [r5, #49]	; 0x31
  m_flags = 0;
    3b58:	strb.w	r3, [r5, #51]	; 0x33
}
    3b5c:	mov	r0, r6
    3b5e:	add	sp, #68	; 0x44
    3b60:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    } else if (!inSet) {
    3b64:	cbnz	r6, 3bbc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x310>
        freeCount = 0;
    3b66:	cmp	r4, r7
    3b68:	it	cc
    3b6a:	movcc	r4, #0
      if (buf[0] != EXFAT_TYPE_FILE) {
    3b6c:	cmp	r3, #133	; 0x85
    3b6e:	bne.w	3924 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x78>
      memset(this, 0, sizeof(ExFatFile));
    3b72:	mov	r1, r6
    3b74:	movs	r2, #56	; 0x38
    3b76:	mov	r0, r5
      inSet = true;
    3b78:	movs	r6, #1
      memset(this, 0, sizeof(ExFatFile));
    3b7a:	bl	10104 <memset>
      m_attributes = getLe16(dirFile->attributes) & FS_ATTRIB_COPY;
    3b7e:	ldrb.w	r2, [sp, #36]	; 0x24
      m_setCount = dirFile->setCount;
    3b82:	ldrb.w	r3, [sp, #33]	; 0x21
    3b86:	strb.w	r3, [r5, #48]	; 0x30
      m_attributes = getLe16(dirFile->attributes) & FS_ATTRIB_COPY;
    3b8a:	and.w	r3, r2, #55	; 0x37
      if (!(m_attributes & FS_ATTRIB_DIRECTORY)) {
    3b8e:	lsls	r2, r2, #27
        m_attributes |= FILE_ATTR_FILE;
    3b90:	it	pl
    3b92:	orrpl.w	r3, r3, #8
    3b96:	strb.w	r3, [r5, #49]	; 0x31
      m_dirPos.position = dir->curPosition() - FS_DIR_SIZE;
    3b9a:	ldr.w	r3, [fp]
    3b9e:	ldr.w	r2, [fp, #32]
    3ba2:	subs	r3, #32
      m_vol = dir->volume();
    3ba4:	str	r2, [r5, #32]
      m_dirPos.cluster = dir->curCluster();
    3ba6:	ldr.w	r2, [fp, #24]
    3baa:	strd	r2, r3, [r5, #36]	; 0x24
  bool isContiguous() const { return m_flags & FILE_FLAG_CONTIGUOUS; }
    3bae:	ldrb.w	r3, [fp, #51]	; 0x33
    3bb2:	ubfx	r3, r3, #6, #1
      m_dirPos.isContiguous = dir->isContiguous();
    3bb6:	strb.w	r3, [r5, #44]	; 0x2c
    3bba:	b.n	3924 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x78>
    } else if (buf[0] == EXFAT_TYPE_STREAM) {
    3bbc:	cmp	r3, #192	; 0xc0
    3bbe:	beq.n	3be4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x338>
    } else if (buf[0] == EXFAT_TYPE_NAME) {
    3bc0:	cmp	r3, #193	; 0xc1
    3bc2:	bne.w	3964 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb8>
      if (!cmpName(dirName, fname)) {
    3bc6:	mov	r2, r8
    3bc8:	add	r1, sp, #32
    3bca:	mov	r0, r5
    3bcc:	bl	3324 <ExFatFile::cmpName(DirName_t const*, ExName_t*)>
    3bd0:	cbz	r0, 3bda <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32e>
      if (fname->atEnd()) {
    3bd2:	ldrd	r3, r2, [r8, #4]
    3bd6:	cmp	r2, r3
    3bd8:	beq.n	3c5e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x3b2>
        inSet = false;
    3bda:	mov	r6, r0
    3bdc:	b.n	3924 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x78>
    3bde:	nop
    3be0:	.word	0x88888889
      m_flags = modeFlags;
    3be4:	ldr	r3, [sp, #8]
    3be6:	strb.w	r3, [r5, #51]	; 0x33
      if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    3bea:	ldrb.w	r3, [sp, #33]	; 0x21
    3bee:	lsls	r3, r3, #30
    3bf0:	bmi.n	3c34 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x388>
      m_firstCluster = getLe32(dirStream->firstCluster);
    3bf2:	ldr	r3, [sp, #52]	; 0x34
    3bf4:	str	r3, [r5, #28]
      m_validLength = getLe64(dirStream->validLength);
    3bf6:	ldrd	r2, r3, [sp, #40]	; 0x28
    3bfa:	strd	r2, r3, [r5, #16]
      m_dataLength = getLe64(dirStream->dataLength);
    3bfe:	ldrd	r2, r3, [sp, #56]	; 0x38
    3c02:	strd	r2, r3, [r5, #8]
      if (!fname) {
    3c06:	cmp.w	r8, #0
    3c0a:	beq.n	3c5e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x3b2>
  void reset() { next = begin; }
    3c0c:	ldr.w	r3, [r8]
      if (fname->nameLength != dirStream->nameLength ||
    3c10:	ldr.w	r2, [r8, #12]
    3c14:	str.w	r3, [r8, #4]
    3c18:	ldrb.w	r3, [sp, #35]	; 0x23
    3c1c:	cmp	r2, r3
    3c1e:	bne.w	3964 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb8>
    3c22:	ldrh.w	r6, [r8, #16]
    3c26:	ldrh.w	r3, [sp, #36]	; 0x24
    3c2a:	subs	r6, r6, r3
    3c2c:	clz	r6, r6
    3c30:	lsrs	r6, r6, #5
    3c32:	b.n	3924 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x78>
        m_flags |= FILE_FLAG_CONTIGUOUS;
    3c34:	ldr	r3, [sp, #12]
    3c36:	strb.w	r3, [r5, #51]	; 0x33
    3c3a:	b.n	3bf2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x346>
  uint8_t freeNeed = 3;
    3c3c:	movs	r7, #3
    3c3e:	b.n	3918 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x6c>
      if (!dir->addDirCluster()) {
    3c40:	mov	r0, fp
      uint32_t saveCurCluster = dir->m_curCluster;
    3c42:	ldr.w	r6, [fp, #24]
      if (!dir->addDirCluster()) {
    3c46:	bl	4714 <ExFatFile::addDirCluster()>
    3c4a:	cmp	r0, #0
    3c4c:	beq.n	3b50 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2a4>
      dir->m_curCluster = saveCurCluster;
    3c4e:	str.w	r6, [fp, #24]
      continue;
    3c52:	b.n	39c0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x114>
        if (fname) {
    3c54:	cmp.w	r8, #0
    3c58:	bne.w	3976 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xca>
    3c5c:	b.n	3b50 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2a4>
  if (oflag & O_EXCL) {
    3c5e:	tst.w	sl, #2048	; 0x800
    3c62:	bne.w	3b50 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2a4>
  if ((oflag & (O_TRUNC | O_AT_END)) || (m_flags & FILE_FLAG_WRITE)) {
    3c66:	tst.w	sl, #17408	; 0x4400
    3c6a:	bne.n	3d08 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x45c>
    3c6c:	ldrb.w	r3, [r5, #51]	; 0x33
    3c70:	lsls	r7, r3, #30
    3c72:	bmi.n	3d08 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x45c>
  if (oflag & O_TRUNC) {
    3c74:	tst.w	sl, #1024	; 0x400
    3c78:	bne.w	3b50 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2a4>
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    3c7c:	tst.w	sl, #16384	; 0x4000
    3c80:	beq.w	3b5c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2b0>
    3c84:	mov	r0, r5
    3c86:	ldrd	r2, r3, [r5, #16]
    3c8a:	bl	37c0 <ExFatFile::seekSet(unsigned long long)>
    3c8e:	cmp	r0, #0
    3c90:	beq.w	3b50 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2a4>
  if (isWritable()) {
    3c94:	ldrb.w	r3, [r5, #51]	; 0x33
    3c98:	lsls	r2, r3, #30
    3c9a:	bpl.w	3b5c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2b0>
    m_attributes |= FS_ATTRIB_ARCHIVE;
    3c9e:	ldrb.w	r3, [r5, #49]	; 0x31
    3ca2:	orr.w	r3, r3, #32
    3ca6:	strb.w	r3, [r5, #49]	; 0x31
    3caa:	b.n	3b5c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2b0>
      dirFile->type = EXFAT_TYPE_FILE;
    3cac:	movs	r3, #133	; 0x85
    3cae:	strb	r3, [r4, #0]
      if (FsDateTime::callback) {
    3cb0:	ldr	r3, [pc, #164]	; (3d58 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x4ac>)
      m_setCount = freeNeed - 1;
    3cb2:	strb.w	fp, [r5, #48]	; 0x30
      dirFile->setCount = m_setCount;
    3cb6:	strb.w	fp, [r4, #1]
      if (FsDateTime::callback) {
    3cba:	ldr	r3, [r3, #0]
    3cbc:	cbz	r3, 3cfc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x450>
        FsDateTime::callback(&date, &time, &ms10);
    3cbe:	add.w	r2, sp, #17
    3cc2:	mov	r1, r9
    3cc4:	add.w	r0, sp, #18
    3cc8:	blx	r3
  *reinterpret_cast<uint16_t*>(dst) = src;
    3cca:	ldrh.w	r3, [sp, #18]
        dirFile->createTimeMs = ms10;
    3cce:	ldrb.w	r2, [sp, #17]
    3cd2:	strh	r3, [r4, #10]
    3cd4:	ldrh.w	r3, [sp, #20]
    3cd8:	strb	r2, [r4, #20]
    3cda:	strh	r3, [r4, #8]
    3cdc:	b.n	3b2a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x27e>
      dirStream->type = EXFAT_TYPE_STREAM;
    3cde:	mov.w	r3, #448	; 0x1c0
    3ce2:	strh	r3, [r4, #0]
      m_flags = modeFlags | FILE_FLAG_DIR_DIRTY;
    3ce4:	ldr	r3, [sp, #8]
    3ce6:	orn	r3, r3, #127	; 0x7f
    3cea:	strb.w	r3, [r5, #51]	; 0x33
      dirStream->nameLength = fname->nameLength;
    3cee:	ldr.w	r3, [r8, #12]
    3cf2:	strb	r3, [r4, #3]
      setLe16(dirStream->nameHash, fname->nameHash);
    3cf4:	ldrh.w	r3, [r8, #16]
    3cf8:	strh	r3, [r4, #4]
}
    3cfa:	b.n	3b2a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x27e>
  *reinterpret_cast<uint16_t*>(dst) = src;
    3cfc:	movw	r3, #22049	; 0x5621
    3d00:	strh	r3, [r4, #10]
    3d02:	strh	r3, [r4, #14]
    3d04:	strh	r3, [r4, #18]
        if (FS_DEFAULT_TIME) {
    3d06:	b.n	3b2a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x27e>
  bool isSubDir() const { return m_attributes & FILE_ATTR_SUBDIR; }
    3d08:	ldrb.w	r3, [r5, #49]	; 0x31
    if (isSubDir() || isReadOnly() || EXFAT_READ_ONLY) {
    3d0c:	lsls	r4, r3, #27
    3d0e:	bmi.w	3b50 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2a4>
    3d12:	lsls	r0, r3, #31
    3d14:	bmi.w	3b50 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2a4>
  if (oflag & O_TRUNC) {
    3d18:	tst.w	sl, #1024	; 0x400
    3d1c:	beq.n	3d50 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x4a4>
    if (!(m_flags & FILE_FLAG_WRITE)) {
    3d1e:	ldrb.w	r3, [r5, #51]	; 0x33
    3d22:	lsls	r1, r3, #30
    3d24:	bpl.w	3b50 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2a4>
  bool truncate(uint64_t length) { return seekSet(length) && truncate(); }
    3d28:	movs	r2, #0
    3d2a:	movs	r3, #0
    3d2c:	mov	r0, r5
    3d2e:	bl	37c0 <ExFatFile::seekSet(unsigned long long)>
    3d32:	cmp	r0, #0
    3d34:	beq.w	3b50 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2a4>
    3d38:	mov	r0, r5
    3d3a:	bl	4b94 <ExFatFile::truncate()>
    3d3e:	cmp	r0, #0
    3d40:	beq.w	3b50 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2a4>
    3d44:	b.n	3c94 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x3e8>
  return sync();
    3d46:	mov	r0, r5
    3d48:	bl	46b4 <ExFatFile::sync()>
    3d4c:	mov	r6, r0
    3d4e:	b.n	3b5c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2b0>
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    3d50:	tst.w	sl, #16384	; 0x4000
    3d54:	beq.n	3c94 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x3e8>
    3d56:	b.n	3c84 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x3d8>
    3d58:	.word	0x2000771c

00003d5c <ExFatFile::open(ExFatFile*, char const*, int)>:
bool ExFatFile::open(ExFatFile* dirFile, const char* path, oflag_t oflag) {
    3d5c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  ExFatFile() {}
    3d60:	movs	r5, #0
    3d62:	sub	sp, #92	; 0x5c
    3d64:	mov	r9, r3
  if (isOpen() || !dirFile->isDir()) {
    3d66:	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::open(ExFatFile* dirFile, const char* path, oflag_t oflag) {
    3d6a:	str	r2, [sp, #4]
    3d6c:	str	r5, [sp, #80]	; 0x50
  if (isOpen() || !dirFile->isDir()) {
    3d6e:	cmp	r3, #0
    3d70:	bne.n	3df0 <ExFatFile::open(ExFatFile*, char const*, int)+0x94>
    3d72:	ldrb.w	r3, [r1, #49]	; 0x31
    3d76:	mov	r7, r1
    3d78:	tst.w	r3, #80	; 0x50
    3d7c:	beq.n	3df0 <ExFatFile::open(ExFatFile*, char const*, int)+0x94>
  if (isDirSeparator(*path)) {
    3d7e:	ldrb	r3, [r2, #0]
    3d80:	mov	r4, r0
    3d82:	mov	r6, r2
    3d84:	cmp	r3, #47	; 0x2f
    3d86:	beq.n	3df8 <ExFatFile::open(ExFatFile*, char const*, int)+0x9c>
    if (!openPrivate(dirFile, &fname, O_RDONLY)) {
    3d88:	mov.w	r8, #0
    if (!parsePathName(path, &fname, &path)) {
    3d8c:	add	r3, sp, #4
    3d8e:	add	r2, sp, #12
    3d90:	mov	r1, r6
    3d92:	mov	r0, r4
    3d94:	bl	3544 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    3d98:	cbz	r0, 3df0 <ExFatFile::open(ExFatFile*, char const*, int)+0x94>
    if (*path == 0) {
    3d9a:	ldr	r6, [sp, #4]
    3d9c:	ldrb	r3, [r6, #0]
    3d9e:	cmp	r3, #0
    3da0:	beq.n	3e20 <ExFatFile::open(ExFatFile*, char const*, int)+0xc4>
    if (!openPrivate(dirFile, &fname, O_RDONLY)) {
    3da2:	movs	r3, #0
    3da4:	add	r2, sp, #12
    3da6:	mov	r1, r7
    3da8:	mov	r0, r4
    3daa:	bl	38ac <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    3dae:	cbz	r0, 3df0 <ExFatFile::open(ExFatFile*, char const*, int)+0x94>
    tmpDir = *this;
    3db0:	mov	ip, r4
    3db2:	add	r5, sp, #32
    3db4:	add.w	r7, r4, #48	; 0x30
    3db8:	ldr.w	r0, [ip]
    3dbc:	add.w	ip, ip, #16
    3dc0:	ldr.w	r1, [ip, #-12]
    3dc4:	mov	lr, r5
    3dc6:	ldr.w	r2, [ip, #-8]
    3dca:	adds	r5, #16
    3dcc:	ldr.w	r3, [ip, #-4]
    3dd0:	cmp	ip, r7
    3dd2:	stmia.w	lr!, {r0, r1, r2, r3}
    3dd6:	bne.n	3db8 <ExFatFile::open(ExFatFile*, char const*, int)+0x5c>
    3dd8:	ldr.w	r0, [ip]
    dirFile = &tmpDir;
    3ddc:	add	r7, sp, #32
    tmpDir = *this;
    3dde:	str	r0, [r5, #0]
  bool rtn = sync();
    3de0:	mov	r0, r4
    3de2:	bl	46b4 <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    3de6:	strb.w	r8, [r4, #49]	; 0x31
  m_flags = 0;
    3dea:	strb.w	r8, [r4, #51]	; 0x33
  return rtn;
    3dee:	b.n	3d8c <ExFatFile::open(ExFatFile*, char const*, int)+0x30>
  return false;
    3df0:	movs	r0, #0
}
    3df2:	add	sp, #92	; 0x5c
    3df4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    while (isDirSeparator(*path)) {
    3df8:	ldrb.w	r1, [r6, #1]!
    3dfc:	cmp	r1, #47	; 0x2f
    3dfe:	beq.n	3df8 <ExFatFile::open(ExFatFile*, char const*, int)+0x9c>
    3e00:	str	r6, [sp, #4]
    if (*path == 0) {
    3e02:	cbnz	r1, 3e32 <ExFatFile::open(ExFatFile*, char const*, int)+0xd6>
  memset(this, 0, sizeof(ExFatFile));
    3e04:	movs	r2, #56	; 0x38
    3e06:	mov	r0, r4
      return openRoot(dirFile->m_vol);
    3e08:	ldr	r5, [r7, #32]
  memset(this, 0, sizeof(ExFatFile));
    3e0a:	bl	10104 <memset>
  m_flags = FILE_FLAG_READ;
    3e0e:	movs	r3, #1
  m_attributes = FILE_ATTR_ROOT;
    3e10:	movs	r2, #64	; 0x40
  m_vol = vol;
    3e12:	str	r5, [r4, #32]
      return openRoot(dirFile->m_vol);
    3e14:	mov	r0, r3
  m_flags = FILE_FLAG_READ;
    3e16:	strb.w	r3, [r4, #51]	; 0x33
  m_attributes = FILE_ATTR_ROOT;
    3e1a:	strb.w	r2, [r4, #49]	; 0x31
      return openRoot(dirFile->m_vol);
    3e1e:	b.n	3df2 <ExFatFile::open(ExFatFile*, char const*, int)+0x96>
  return openPrivate(dirFile, &fname, oflag);
    3e20:	mov	r3, r9
    3e22:	add	r2, sp, #12
    3e24:	mov	r1, r7
    3e26:	mov	r0, r4
    3e28:	bl	38ac <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
}
    3e2c:	add	sp, #92	; 0x5c
    3e2e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  memset(this, 0, sizeof(ExFatFile));
    3e32:	movs	r2, #56	; 0x38
    3e34:	movs	r1, #0
    3e36:	add	r0, sp, #32
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    3e38:	ldr	r5, [r7, #32]
  memset(this, 0, sizeof(ExFatFile));
    3e3a:	bl	10104 <memset>
  m_flags = FILE_FLAG_READ;
    3e3e:	movs	r3, #1
    dirFile = &tmpDir;
    3e40:	add	r7, sp, #32
  m_vol = vol;
    3e42:	str	r5, [sp, #64]	; 0x40
  m_flags = FILE_FLAG_READ;
    3e44:	strb.w	r3, [sp, #83]	; 0x53
  m_attributes = FILE_ATTR_ROOT;
    3e48:	movs	r3, #64	; 0x40
    3e4a:	strb.w	r3, [sp, #81]	; 0x51
  return true;
    3e4e:	b.n	3d88 <ExFatFile::open(ExFatFile*, char const*, int)+0x2c>

00003e50 <ExFatFile::open(ExFatVolume*, char const*, int)>:
  return vol && open(vol->vwd(), path, oflag);
    3e50:	cbz	r1, 3e5a <ExFatFile::open(ExFatVolume*, char const*, int)+0xa>
    3e52:	add.w	r1, r1, #1096	; 0x448
    3e56:	b.w	3d5c <ExFatFile::open(ExFatFile*, char const*, int)>
}
    3e5a:	mov	r0, r1
    3e5c:	bx	lr
    3e5e:	nop

00003e60 <ExFatFile::openNext(ExFatFile*, int)>:
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    3e60:	ldrb.w	r3, [r0, #49]	; 0x31
    3e64:	cbnz	r3, 3e80 <ExFatFile::openNext(ExFatFile*, int)+0x20>
    3e66:	ldrb.w	r3, [r1, #49]	; 0x31
    3e6a:	tst.w	r3, #80	; 0x50
    3e6e:	beq.n	3e80 <ExFatFile::openNext(ExFatFile*, int)+0x20>
    3e70:	ldr	r3, [r1, #0]
    3e72:	ands.w	ip, r3, #31
    3e76:	bne.n	3e80 <ExFatFile::openNext(ExFatFile*, int)+0x20>
  return openPrivate(dir, nullptr, oflag);
    3e78:	mov	r3, r2
    3e7a:	mov	r2, ip
    3e7c:	b.w	38ac <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
}
    3e80:	movs	r0, #0
    3e82:	bx	lr

00003e84 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>:
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
    3e84:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3e88:	mov	r7, r0
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    3e8a:	mov	sl, r1
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
    3e8c:	mov	r9, r2
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    3e8e:	cmp	r1, #0
    3e90:	beq.n	3f18 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x94>
    3e92:	sub.w	r8, r1, #2
  if (start >= m_clusterCount) {
    3e96:	ldr.w	r3, [r7, #1072]	; 0x430
    3e9a:	cmp	r3, r8
    3e9c:	bls.n	3f24 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xa0>
  uint8_t mask = 1 << (start & 7);
    3e9e:	and.w	r3, r8, #7
    3ea2:	movs	r5, #1
  size_t i = (start >> 3) & (sectorSize - 1);
    3ea4:	ubfx	fp, r8, #3, #9
  uint8_t mask = 1 << (start & 7);
    3ea8:	lsls	r5, r3
    3eaa:	uxtb	r5, r5
  uint32_t bgnAlloc = start;
    3eac:	mov	r6, r8
  uint32_t endAlloc = start;
    3eae:	mov	r4, r8
    uint32_t sector =
    3eb0:	ldr.w	r1, [r7, #1068]	; 0x42c
    return m_bitmapCache.prepare(sector, option);
    3eb4:	movs	r2, #0
    3eb6:	mov	r0, r7
    3eb8:	add.w	r1, r1, r4, lsr #12
    3ebc:	bl	29b8 <FsCache::prepare(unsigned long, unsigned char)>
    if (!cache) {
    3ec0:	cbz	r0, 3efe <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x7a>
    3ec2:	add.w	fp, fp, #4294967295
    3ec6:	add	fp, r0
    3ec8:	addw	r0, r0, #511	; 0x1ff
        if (!(mask & cache[i])) {
    3ecc:	ldrb.w	r1, [fp, #1]!
    3ed0:	b.n	3ee8 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x64>
          if ((endAlloc - bgnAlloc) == count) {
    3ed2:	cmp	r2, r9
    3ed4:	beq.n	3f2e <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xaa>
        if (endAlloc == start) {
    3ed6:	cmp	r8, r4
    3ed8:	beq.n	3efc <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x78>
        if (endAlloc >= m_clusterCount) {
    3eda:	ldr.w	r5, [r7, #1072]	; 0x430
    3ede:	cmp	r5, r4
    3ee0:	bls.n	3f0c <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x88>
      for (; mask; mask <<= 1) {
    3ee2:	ands.w	r5, r3, #255	; 0xff
    3ee6:	beq.n	3f02 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x7e>
        endAlloc++;
    3ee8:	adds	r4, #1
        if (!(mask & cache[i])) {
    3eea:	tst	r1, r5
      for (; mask; mask <<= 1) {
    3eec:	mov.w	r3, r5, lsl #1
          if ((endAlloc - bgnAlloc) == count) {
    3ef0:	sub.w	r2, r4, r6
        if (!(mask & cache[i])) {
    3ef4:	beq.n	3ed2 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x4e>
        if (endAlloc == start) {
    3ef6:	cmp	r8, r4
        endAlloc++;
    3ef8:	mov	r6, r4
        if (endAlloc == start) {
    3efa:	bne.n	3eda <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x56>
          return 1;
    3efc:	movs	r0, #1
}
    3efe:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for (; i < sectorSize; i++) {
    3f02:	cmp	r0, fp
      mask = 1;
    3f04:	mov.w	r5, #1
    for (; i < sectorSize; i++) {
    3f08:	bne.n	3ecc <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x48>
    3f0a:	b.n	3f10 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x8c>
          endAlloc = bgnAlloc = 0;
    3f0c:	movs	r6, #0
    3f0e:	mov	r4, r6
  uint32_t endAlloc = start;
    3f10:	movs	r5, #1
    i = 0;
    3f12:	mov.w	fp, #0
    3f16:	b.n	3eb0 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x2c>
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    3f18:	ldr.w	r8, [r0, #1056]	; 0x420
  if (start >= m_clusterCount) {
    3f1c:	ldr.w	r3, [r7, #1072]	; 0x430
    3f20:	cmp	r3, r8
    3f22:	bhi.n	3e9e <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x1a>
    3f24:	mov.w	r8, #0
    3f28:	movs	r5, #1
    start = 0;
    3f2a:	mov	fp, r8
    3f2c:	b.n	3eac <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x28>
            if (cluster == 0 && count == 1) {
    3f2e:	cmp.w	sl, #0
    3f32:	bne.n	3f3e <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xba>
    3f34:	cmp.w	r9, #1
              m_bitmapStart = bgnAlloc;
    3f38:	it	eq
    3f3a:	streq.w	r6, [r7, #1056]	; 0x420
            return bgnAlloc + 2;
    3f3e:	adds	r0, r6, #2
}
    3f40:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00003f44 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>:
                                  bool value) {
    3f44:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3f48:	mov	r8, r0
  uint32_t start = cluster - 2;
    3f4a:	subs	r0, r1, #2
                                  bool value) {
    3f4c:	mov	r5, r2
    3f4e:	mov	r6, r3
  if ((start + count) > m_clusterCount) {
    3f50:	adds	r3, r0, r2
    3f52:	ldr.w	r2, [r8, #1072]	; 0x430
    3f56:	cmp	r3, r2
    3f58:	bhi.n	3fc8 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x84>
  if (value) {
    3f5a:	cbnz	r6, 3fce <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x8a>
    if (start < m_bitmapStart) {
    3f5c:	ldr.w	r3, [r8, #1056]	; 0x420
    3f60:	cmp	r3, r0
      m_bitmapStart = start;
    3f62:	it	hi
    3f64:	strhi.w	r0, [r8, #1056]	; 0x420
  mask = 1 << (start & 7);
    3f68:	and.w	r3, r0, #7
    3f6c:	movs	r4, #1
  sector = m_clusterHeapStartSector + (start >> (m_bytesPerSectorShift + 3));
    3f6e:	ldr.w	r7, [r8, #1068]	; 0x42c
  i = (start >> 3) & m_sectorMask;
    3f72:	ubfx	r9, r0, #3, #9
  mask = 1 << (start & 7);
    3f76:	lsls	r4, r3
  sector = m_clusterHeapStartSector + (start >> (m_bytesPerSectorShift + 3));
    3f78:	add.w	r1, r7, r0, lsr #12
  mask = 1 << (start & 7);
    3f7c:	uxtb	r4, r4
    3f7e:	movs	r2, #1
    3f80:	mov	r0, r8
    cache = bitmapCachePrepare(sector++, FsCache::CACHE_FOR_WRITE);
    3f82:	adds	r7, r1, r2
    3f84:	bl	29b8 <FsCache::prepare(unsigned long, unsigned char)>
    if (!cache) {
    3f88:	cbz	r0, 3fc8 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x84>
    3f8a:	add.w	lr, r0, r9
    3f8e:	add.w	r0, r0, #512	; 0x200
        if (value == static_cast<bool>(cache[i] & mask)) {
    3f92:	ldrb.w	ip, [lr]
      for (; mask; mask <<= 1) {
    3f96:	lsls	r2, r4, #1
        if (value == static_cast<bool>(cache[i] & mask)) {
    3f98:	tst.w	ip, r4
        cache[i] ^= mask;
    3f9c:	eor.w	ip, ip, r4
        if (value == static_cast<bool>(cache[i] & mask)) {
    3fa0:	ite	ne
    3fa2:	movne	r3, #1
    3fa4:	moveq	r3, #0
    3fa6:	cmp	r3, r6
    3fa8:	beq.n	3fc8 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x84>
        if (--count == 0) {
    3faa:	subs	r5, #1
        cache[i] ^= mask;
    3fac:	strb.w	ip, [lr]
        if (--count == 0) {
    3fb0:	beq.n	3fe6 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xa2>
      for (; mask; mask <<= 1) {
    3fb2:	ands.w	r4, r2, #255	; 0xff
    3fb6:	bne.n	3f92 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x4e>
    for (; i < m_bytesPerSector; i++) {
    3fb8:	add.w	lr, lr, #1
    i = 0;
    3fbc:	mov	r9, r4
    3fbe:	movs	r4, #1
    for (; i < m_bytesPerSector; i++) {
    3fc0:	cmp	r0, lr
    3fc2:	bne.n	3f92 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x4e>
    cache = bitmapCachePrepare(sector++, FsCache::CACHE_FOR_WRITE);
    3fc4:	mov	r1, r7
    3fc6:	b.n	3f7e <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x3a>
  return false;
    3fc8:	movs	r0, #0
}
    3fca:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (start <= m_bitmapStart && m_bitmapStart < (start + count)) {
    3fce:	ldr.w	r1, [r8, #1056]	; 0x420
    3fd2:	cmp	r3, r1
    3fd4:	bls.n	3f68 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x24>
    3fd6:	cmp	r1, r0
    3fd8:	bcc.n	3f68 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x24>
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    3fda:	cmp	r3, r2
    3fdc:	it	cs
    3fde:	movcs	r3, #0
    3fe0:	str.w	r3, [r8, #1056]	; 0x420
    3fe4:	b.n	3f68 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x24>
          return true;
    3fe6:	movs	r0, #1
}
    3fe8:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00003fec <ExFatPartition::dirCache(DirPos_t*, unsigned char)>:
//------------------------------------------------------------------------------
uint8_t* ExFatPartition::dirCache(DirPos_t* pos, uint8_t options) {
    3fec:	push	{r3, r4, r5, lr}
    3fee:	mov	r4, r1
           ((cluster - 2) << m_sectorsPerClusterShift);
    3ff0:	ldr	r3, [r1, #0]
    3ff2:	ldrb.w	ip, [r0, #1093]	; 0x445
    return m_dataCache.prepare(sector, option);
    3ff6:	add.w	r0, r0, #528	; 0x210
  uint32_t sector = clusterStartSector(pos->cluster);
  sector += (m_clusterMask & pos->position) >> m_bytesPerSectorShift;
    3ffa:	ldr.w	r1, [r0, #552]	; 0x228
           ((cluster - 2) << m_sectorsPerClusterShift);
    3ffe:	subs	r3, #2
    4000:	ldr	r5, [r4, #4]
    4002:	lsl.w	r3, r3, ip
    4006:	ands	r1, r5
    4008:	add.w	r3, r3, r1, lsr #9
    400c:	ldr.w	r1, [r0, #540]	; 0x21c
    return m_dataCache.prepare(sector, option);
    4010:	add	r1, r3
    4012:	bl	29b8 <FsCache::prepare(unsigned long, unsigned char)>
  uint8_t* cache = dataCachePrepare(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
    4016:	cbz	r0, 4020 <ExFatPartition::dirCache(DirPos_t*, unsigned char)+0x34>
    4018:	ldr	r3, [r4, #4]
    401a:	ubfx	r3, r3, #0, #9
    401e:	add	r0, r3
}
    4020:	pop	{r3, r4, r5, pc}
    4022:	nop

00004024 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>:
//------------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    4024:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4028:	mov	r5, r1
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    402a:	ldr.w	r3, [r0, #1080]	; 0x438
    402e:	ldr	r1, [r1, #4]
    4030:	ands	r3, r1
  pos->position += offset;
    4032:	add	r1, r2
    4034:	str	r1, [r5, #4]
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    4036:	add	r2, r3
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    4038:	ldrb.w	r1, [r0, #1093]	; 0x445
    403c:	add.w	r3, r1, #9
  tmp >>= bytesPerClusterShift();
    4040:	uxtb	r3, r3
    4042:	lsr.w	r3, r2, r3
  while (tmp--) {
    4046:	cbz	r3, 406c <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x48>
    4048:	mov	r7, r0
    404a:	add.w	r8, r3, #4294967295
    if (pos->isContiguous) {
      pos->cluster++;
    404e:	ldr	r4, [r5, #0]
    return m_dataCache.prepare(sector, option);
    4050:	add.w	r9, r0, #528	; 0x210
    if (pos->isContiguous) {
    4054:	ldrb	r6, [r5, #8]
    4056:	cbz	r6, 4072 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x4e>
      pos->cluster++;
    4058:	adds	r4, #1
    405a:	str	r4, [r5, #0]
  while (tmp--) {
    405c:	cmp.w	r8, #0
    4060:	beq.n	406c <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x48>
    4062:	add	r8, r4
      pos->cluster++;
    4064:	adds	r4, #1
  while (tmp--) {
    4066:	cmp	r4, r8
    4068:	bne.n	4064 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x40>
    406a:	str	r4, [r5, #0]
      if (status != 1) {
        return status;
      }
    }
  }
  return 1;
    406c:	movs	r0, #1
}
    406e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
int8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
  uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    4072:	ldr.w	r3, [r7, #1072]	; 0x430
    4076:	mov	r2, r6
    4078:	mov	r0, r9
    407a:	adds	r3, #1
    407c:	cmp	r3, r4
    407e:	bcc.n	40a8 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x84>
    DBG_FAIL_MACRO;
    return -1;
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    4080:	ldr.w	r1, [r7, #1060]	; 0x424
  while (tmp--) {
    4084:	add.w	r8, r8, #4294967295
    4088:	add.w	r1, r1, r4, lsr #7

  cache = dataCachePrepare(sector, FsCache::CACHE_FOR_READ);
  if (!cache) {
    return -1;
  }
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    408c:	lsls	r4, r4, #2
    408e:	bl	29b8 <FsCache::prepare(unsigned long, unsigned char)>
    4092:	ubfx	r4, r4, #0, #9
  if (!cache) {
    4096:	cbz	r0, 40a8 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x84>
  return *reinterpret_cast<const uint32_t*>(src);
    4098:	ldr	r4, [r0, r4]
  if (next == EXFAT_EOC) {
    409a:	adds	r3, r4, #1
    409c:	beq.n	40b0 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x8c>
  while (tmp--) {
    409e:	cmp.w	r8, #4294967295
    return 0;
  }
  *value = next;
    40a2:	str	r4, [r5, #0]
  while (tmp--) {
    40a4:	bne.n	4054 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x30>
    40a6:	b.n	406c <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x48>
    return -1;
    40a8:	mov.w	r0, #4294967295
}
    40ac:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return 0;
    40b0:	mov	r0, r6
}
    40b2:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    40b6:	nop

000040b8 <ExFatPartition::fatGet(unsigned long, unsigned long*)>:
int8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    40b8:	push	{r3, r4, r5, lr}
  if (cluster > (m_clusterCount + 1)) {
    40ba:	ldr.w	r3, [r0, #1072]	; 0x430
    40be:	adds	r3, #1
    40c0:	cmp	r3, r1
    40c2:	bcs.n	40ca <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x12>
    return -1;
    40c4:	mov.w	r0, #4294967295
  return 1;
}
    40c8:	pop	{r3, r4, r5, pc}
    40ca:	mov	r4, r1
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    40cc:	ldr.w	r1, [r0, #1060]	; 0x424
    40d0:	mov	r5, r2
    40d2:	add.w	r0, r0, #528	; 0x210
    40d6:	movs	r2, #0
    40d8:	add.w	r1, r1, r4, lsr #7
    40dc:	bl	29b8 <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    40e0:	cmp	r0, #0
    40e2:	beq.n	40c4 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0xc>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    40e4:	lsls	r4, r4, #2
    40e6:	ubfx	r4, r4, #0, #9
    40ea:	ldr	r3, [r0, r4]
  if (next == EXFAT_EOC) {
    40ec:	adds	r2, r3, #1
    40ee:	beq.n	40f6 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x3e>
  return 1;
    40f0:	movs	r0, #1
  *value = next;
    40f2:	str	r3, [r5, #0]
}
    40f4:	pop	{r3, r4, r5, pc}
    return 0;
    40f6:	movs	r0, #0
}
    40f8:	pop	{r3, r4, r5, pc}
    40fa:	nop

000040fc <ExFatPartition::fatPut(unsigned long, unsigned long)>:
//------------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    40fc:	cmp	r1, #1
    40fe:	bls.n	4138 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x3c>
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
    4100:	push	{r3, r4, r5, lr}
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    4102:	ldr.w	r3, [r0, #1072]	; 0x430
    4106:	mov	r4, r1
    4108:	adds	r3, #1
    410a:	cmp	r3, r1
    410c:	bcs.n	4112 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x16>
  }
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;

fail:
  return false;
    410e:	movs	r0, #0
}
    4110:	pop	{r3, r4, r5, pc}
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    4112:	ldr.w	r1, [r0, #1060]	; 0x424
    4116:	mov	r5, r2
    4118:	add.w	r0, r0, #528	; 0x210
    411c:	movs	r2, #1
    411e:	add.w	r1, r1, r4, lsr #7
    4122:	bl	29b8 <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    4126:	mov	r3, r0
    4128:	cmp	r0, #0
    412a:	beq.n	410e <ExFatPartition::fatPut(unsigned long, unsigned long)+0x12>
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
    412c:	lsls	r4, r4, #2
  return true;
    412e:	movs	r0, #1
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
    4130:	ubfx	r4, r4, #0, #9
  *reinterpret_cast<uint32_t*>(dst) = src;
    4134:	str	r5, [r3, r4]
}
    4136:	pop	{r3, r4, r5, pc}
  return false;
    4138:	movs	r0, #0
}
    413a:	bx	lr

0000413c <ExFatPartition::freeChain(unsigned long)>:
  if (cluster > (m_clusterCount + 1)) {
    413c:	ldr.w	r3, [r0, #1072]	; 0x430
    4140:	adds	r3, #1
    4142:	cmp	r1, r3
    4144:	bls.n	414a <ExFatPartition::freeChain(unsigned long)+0xe>

  return true;

fail:
  return false;
}
    4146:	movs	r0, #0
    4148:	bx	lr
bool ExFatPartition::freeChain(uint32_t cluster) {
    414a:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    414e:	mov	r5, r0
    4150:	sub	sp, #4
    4152:	mov	r4, r1
    4154:	add.w	r7, r0, #528	; 0x210
    4158:	mov	r8, r1
    415a:	mov.w	r9, #0
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    415e:	ldr.w	r1, [r5, #1060]	; 0x424
    4162:	movs	r2, #0
    4164:	mov	r0, r7
    4166:	add.w	r1, r1, r4, lsr #7
    416a:	bl	29b8 <FsCache::prepare(unsigned long, unsigned char)>
    416e:	lsrs	r2, r4, #7
  if (!cache) {
    4170:	cbz	r0, 41da <ExFatPartition::freeChain(unsigned long)+0x9e>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    4172:	mov.w	sl, r4, lsl #2
    4176:	ubfx	sl, sl, #0, #9
  return *reinterpret_cast<const uint32_t*>(src);
    417a:	ldr.w	r3, [r0, sl]
  if (next == EXFAT_EOC) {
    417e:	adds	r1, r3, #1
    4180:	itet	ne
    4182:	movne	r6, r3
    4184:	moveq.w	fp, #0
    4188:	movne.w	fp, #1
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    418c:	cmp	r4, #1
    418e:	bls.n	41da <ExFatPartition::freeChain(unsigned long)+0x9e>
    4190:	ldr.w	r3, [r5, #1072]	; 0x430
    4194:	adds	r3, #1
    4196:	cmp	r4, r3
    4198:	bhi.n	41da <ExFatPartition::freeChain(unsigned long)+0x9e>
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    419a:	ldr.w	r1, [r5, #1060]	; 0x424
    419e:	mov	r0, r7
    41a0:	add	r1, r2
    41a2:	movs	r2, #1
    41a4:	bl	29b8 <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    41a8:	cbz	r0, 41da <ExFatPartition::freeChain(unsigned long)+0x9e>
  *reinterpret_cast<uint32_t*>(dst) = src;
    41aa:	str.w	r9, [r0, sl]
    if (status == 0 || (cluster + 1) != next) {
    41ae:	cmp.w	fp, #0
    41b2:	beq.n	41e2 <ExFatPartition::freeChain(unsigned long)+0xa6>
    41b4:	adds	r4, #1
    41b6:	cmp	r4, r6
    41b8:	beq.n	41cc <ExFatPartition::freeChain(unsigned long)+0x90>
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    41ba:	sub.w	r2, r4, r8
    41be:	mov	r1, r8
    41c0:	movs	r3, #0
    41c2:	mov	r0, r5
    41c4:	bl	3f44 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    41c8:	cbz	r0, 41da <ExFatPartition::freeChain(unsigned long)+0x9e>
    41ca:	mov	r8, r6
  if (cluster > (m_clusterCount + 1)) {
    41cc:	ldr.w	r3, [r5, #1072]	; 0x430
    41d0:	adds	r3, #1
    41d2:	cmp	r3, r6
    41d4:	bcc.n	41da <ExFatPartition::freeChain(unsigned long)+0x9e>
    41d6:	mov	r4, r6
    41d8:	b.n	415e <ExFatPartition::freeChain(unsigned long)+0x22>
}
    41da:	movs	r0, #0
    41dc:	add	sp, #4
    41de:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    41e2:	adds	r2, r4, #1
    41e4:	mov	r3, fp
    41e6:	mov	r1, r8
    41e8:	mov	r0, r5
    41ea:	sub.w	r2, r2, r8
}
    41ee:	add	sp, #4
    41f0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    41f4:	b.w	3f44 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>

000041f8 <ExFatPartition::freeClusterCount()>:
//------------------------------------------------------------------------------
int32_t ExFatPartition::freeClusterCount() {
    41f8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t nc = 0;
  uint32_t sector = m_clusterHeapStartSector;
  uint32_t usedCount = 0;
    41fc:	movs	r5, #0
int32_t ExFatPartition::freeClusterCount() {
    41fe:	mov	r6, r0
  uint32_t sector = m_clusterHeapStartSector;
    4200:	ldr.w	r1, [r0, #1068]	; 0x42c
    4204:	add.w	r8, r0, #528	; 0x210
  uint32_t nc = 0;
    4208:	mov	r4, r5
    420a:	movs	r2, #0
    420c:	mov	r0, r8
  uint8_t* cache;

  while (true) {
    cache = dataCachePrepare(sector++, FsCache::CACHE_FOR_READ);
    420e:	adds	r7, r1, #1
    4210:	bl	29b8 <FsCache::prepare(unsigned long, unsigned char)>
    if (!cache) {
    4214:	cmp	r0, #0
    4216:	beq.n	428a <ExFatPartition::freeClusterCount()+0x92>
    4218:	subs	r2, r0, #1
    421a:	add.w	r1, r4, #4096	; 0x1000
            usedCount++;
          }
        }
      }
      nc += 8;
      if (nc >= m_clusterCount) {
    421e:	ldr.w	r0, [r6, #1072]	; 0x430
    4222:	b.n	4230 <ExFatPartition::freeClusterCount()+0x38>
      } else if (cache[i]) {
    4224:	cbnz	r3, 4246 <ExFatPartition::freeClusterCount()+0x4e>
      nc += 8;
    4226:	adds	r4, #8
      if (nc >= m_clusterCount) {
    4228:	cmp	r4, r0
    422a:	bcs.n	4240 <ExFatPartition::freeClusterCount()+0x48>
    for (size_t i = 0; i < m_bytesPerSector; i++) {
    422c:	cmp	r4, r1
    422e:	beq.n	4286 <ExFatPartition::freeClusterCount()+0x8e>
      if (cache[i] == 0XFF) {
    4230:	ldrb.w	r3, [r2, #1]!
    4234:	cmp	r3, #255	; 0xff
    4236:	bne.n	4224 <ExFatPartition::freeClusterCount()+0x2c>
      nc += 8;
    4238:	adds	r4, #8
        usedCount += 8;
    423a:	adds	r5, #8
      if (nc >= m_clusterCount) {
    423c:	cmp	r4, r0
    423e:	bcc.n	422c <ExFatPartition::freeClusterCount()+0x34>
        return m_clusterCount - usedCount;
    4240:	subs	r0, r0, r5
      }
    }
  }
}
    4242:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          if ((mask & cache[i])) {
    4246:	tst.w	r3, #1
            usedCount++;
    424a:	it	ne
    424c:	addne	r5, #1
          if ((mask & cache[i])) {
    424e:	tst.w	r3, #2
            usedCount++;
    4252:	it	ne
    4254:	addne	r5, #1
          if ((mask & cache[i])) {
    4256:	tst.w	r3, #4
            usedCount++;
    425a:	it	ne
    425c:	addne	r5, #1
          if ((mask & cache[i])) {
    425e:	tst.w	r3, #8
            usedCount++;
    4262:	it	ne
    4264:	addne	r5, #1
          if ((mask & cache[i])) {
    4266:	tst.w	r3, #16
            usedCount++;
    426a:	it	ne
    426c:	addne	r5, #1
          if ((mask & cache[i])) {
    426e:	tst.w	r3, #32
            usedCount++;
    4272:	it	ne
    4274:	addne	r5, #1
          if ((mask & cache[i])) {
    4276:	tst.w	r3, #64	; 0x40
            usedCount++;
    427a:	it	ne
    427c:	addne	r5, #1
          if ((mask & cache[i])) {
    427e:	lsls	r3, r3, #24
            usedCount++;
    4280:	it	mi
    4282:	addmi	r5, #1
        for (uint8_t mask = 1; mask; mask <<= 1) {
    4284:	b.n	4226 <ExFatPartition::freeClusterCount()+0x2e>
    cache = dataCachePrepare(sector++, FsCache::CACHE_FOR_READ);
    4286:	mov	r1, r7
    4288:	b.n	420a <ExFatPartition::freeClusterCount()+0x12>
      return -1;
    428a:	mov.w	r0, #4294967295
    428e:	b.n	4242 <ExFatPartition::freeClusterCount()+0x4a>

00004290 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)>:
//------------------------------------------------------------------------------
bool ExFatPartition::init(FsBlockDevice* dev, uint8_t part, uint32_t volStart) {
    4290:	push	{r3, r4, r5, r6, r7, lr}
  pbs_t* pbs;
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  m_fatType = 0;
    4292:	mov.w	ip, #0
  m_blockDev = dev;
  cacheInit(m_blockDev);
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    4296:	mov	r5, r2
    m_sector = 0XFFFFFFFF;
    4298:	mov.w	r2, #4294967295
bool ExFatPartition::init(FsBlockDevice* dev, uint8_t part, uint32_t volStart) {
    429c:	mov	r4, r0
  m_fatType = 0;
    429e:	strb.w	ip, [r0, #1092]	; 0x444
  m_blockDev = dev;
    42a2:	str.w	r1, [r0, #1088]	; 0x440
    m_blockDev = blockDev;
    42a6:	str	r1, [r0, #4]
    42a8:	str.w	r1, [r0, #532]	; 0x214
    m_status = 0;
    42ac:	strb.w	ip, [r0]
    42b0:	strb.w	ip, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    42b4:	str	r2, [r0, #8]
    42b6:	str.w	r2, [r0, #536]	; 0x218
  if (part) {
    42ba:	cbz	r5, 42f6 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x66>
    if (part > 4) {
    42bc:	cmp	r5, #4
    42be:	bls.n	42c4 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x34>
  bitmapFind(0, 1);
  m_fatType = FAT_TYPE_EXFAT;
  return true;

fail:
  return false;
    42c0:	movs	r0, #0
}
    42c2:	pop	{r3, r4, r5, r6, r7, pc}
    42c4:	add.w	r7, r0, #528	; 0x210
    42c8:	mov	r2, ip
    42ca:	mov	r1, ip
    42cc:	mov	r0, r7
    42ce:	bl	29b8 <FsCache::prepare(unsigned long, unsigned char)>
    if (!mbr) {
    42d2:	cmp	r0, #0
    42d4:	beq.n	42c0 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x30>
    MbrPart_t* mp = mbr->part + part - 1;
    42d6:	mvn.w	r3, #4026531840	; 0xf0000000
    42da:	add.w	r0, r0, #446	; 0x1be
    42de:	add	r3, r5
    42e0:	lsls	r1, r3, #4
    42e2:	add.w	r3, r0, r3, lsl #4
    if (mp->type == 0 || (mp->boot != 0 && mp->boot != 0X80)) {
    42e6:	ldrb	r2, [r3, #4]
    42e8:	cmp	r2, #0
    42ea:	beq.n	42c0 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x30>
    42ec:	ldrb	r2, [r0, r1]
    42ee:	lsls	r2, r2, #25
    42f0:	bne.n	42c0 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x30>
  return *reinterpret_cast<const uint32_t*>(src);
    42f2:	ldr	r6, [r3, #8]
    42f4:	b.n	42fc <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x6c>
    42f6:	mov	r6, r3
    42f8:	add.w	r7, r0, #528	; 0x210
    42fc:	movs	r2, #0
    42fe:	mov	r1, r6
    4300:	mov	r0, r7
    4302:	bl	29b8 <FsCache::prepare(unsigned long, unsigned char)>
  if (!pbs) {
    4306:	mov	r5, r0
    4308:	cmp	r0, #0
    430a:	beq.n	42c0 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x30>
  if (strncmp(pbs->oemName, "EXFAT", 5)) {
    430c:	movs	r2, #5
    430e:	ldr	r1, [pc, #104]	; (4378 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0xe8>)
    4310:	adds	r0, #3
    4312:	bl	101a8 <strncmp>
    4316:	cmp	r0, #0
    4318:	bne.n	42c0 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x30>
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    431a:	ldrb.w	r3, [r5, #108]	; 0x6c
    431e:	cmp	r3, #9
    4320:	bne.n	42c0 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x30>
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    4322:	ldr	r3, [r5, #80]	; 0x50
  bitmapFind(0, 1);
    4324:	mov	r1, r0
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    4326:	add	r3, r6
    4328:	str.w	r3, [r4, #1060]	; 0x424
    432c:	ldr	r3, [r5, #84]	; 0x54
  m_fatLength = getLe32(bpb->fatLength);
    432e:	str.w	r3, [r4, #1064]	; 0x428
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
    4332:	ldr	r3, [r5, #88]	; 0x58
    4334:	add	r3, r6
    4336:	str.w	r3, [r4, #1068]	; 0x42c
    433a:	ldr	r3, [r5, #92]	; 0x5c
  m_clusterCount = getLe32(bpb->clusterCount);
    433c:	str.w	r3, [r4, #1072]	; 0x430
    4340:	ldr	r3, [r5, #96]	; 0x60
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
    4342:	str.w	r3, [r4, #1076]	; 0x434
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    4346:	ldrb.w	r2, [r5, #109]	; 0x6d
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    434a:	movs	r5, #1
  m_bitmapStart = 0;
    434c:	str.w	r0, [r4, #1056]	; 0x420
  bitmapFind(0, 1);
    4350:	mov	r0, r4
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    4352:	add.w	r3, r2, #9
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    4356:	strb.w	r2, [r4, #1093]	; 0x445
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    435a:	lsl.w	r3, r5, r3
  m_clusterMask = m_bytesPerCluster - 1;
    435e:	subs	r2, r3, #1
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    4360:	str.w	r3, [r4, #1084]	; 0x43c
  m_clusterMask = m_bytesPerCluster - 1;
    4364:	str.w	r2, [r4, #1080]	; 0x438
  bitmapFind(0, 1);
    4368:	mov	r2, r5
    436a:	bl	3e84 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  m_fatType = FAT_TYPE_EXFAT;
    436e:	movs	r3, #64	; 0x40
  return true;
    4370:	mov	r0, r5
  m_fatType = FAT_TYPE_EXFAT;
    4372:	strb.w	r3, [r4, #1092]	; 0x444
}
    4376:	pop	{r3, r4, r5, r6, r7, pc}
    4378:	.word	0x2000072c

0000437c <ExFatPartition::rootLength()>:
//------------------------------------------------------------------------------
uint32_t ExFatPartition::rootLength() {
    437c:	push	{r3, r4, r5, r6, r7, lr}
  if (cluster > (m_clusterCount + 1)) {
    437e:	ldr.w	r3, [r0, #1072]	; 0x430
uint32_t ExFatPartition::rootLength() {
    4382:	mov	r5, r0
  uint32_t nc = chainSize(m_rootDirectoryCluster);
    4384:	ldr.w	r4, [r0, #1076]	; 0x434
  if (cluster > (m_clusterCount + 1)) {
    4388:	adds	r3, #1
    438a:	cmp	r4, r3
    438c:	bls.n	439c <ExFatPartition::rootLength()+0x20>
    if (status < 0) return 0;
    438e:	movs	r0, #0
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    4390:	ldrb.w	r3, [r5, #1093]	; 0x445
    4394:	adds	r3, #9
  return nc << bytesPerClusterShift();
    4396:	uxtb	r3, r3
}
    4398:	lsls	r0, r3
    439a:	pop	{r3, r4, r5, r6, r7, pc}
    return m_dataCache.prepare(sector, option);
    439c:	add.w	r7, r0, #528	; 0x210
  uint32_t n = 0;
    43a0:	movs	r6, #0
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    43a2:	ldr.w	r1, [r5, #1060]	; 0x424
    43a6:	movs	r2, #0
    43a8:	mov	r0, r7
    43aa:	add.w	r1, r1, r4, lsr #7
    43ae:	bl	29b8 <FsCache::prepare(unsigned long, unsigned char)>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    43b2:	lsls	r4, r4, #2
  if (!cache) {
    43b4:	cmp	r0, #0
    43b6:	beq.n	438e <ExFatPartition::rootLength()+0x12>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    43b8:	ubfx	r4, r4, #0, #9
    43bc:	ldr	r4, [r0, r4]
  if (next == EXFAT_EOC) {
    43be:	adds	r3, r4, #1
    43c0:	beq.n	43d0 <ExFatPartition::rootLength()+0x54>
  if (cluster > (m_clusterCount + 1)) {
    43c2:	ldr.w	r3, [r5, #1072]	; 0x430
    n++;
    43c6:	adds	r6, #1
  if (cluster > (m_clusterCount + 1)) {
    43c8:	adds	r3, #1
    43ca:	cmp	r3, r4
    43cc:	bcc.n	438e <ExFatPartition::rootLength()+0x12>
    43ce:	b.n	43a2 <ExFatPartition::rootLength()+0x26>
    n++;
    43d0:	adds	r0, r6, #1
  } while (status);
    43d2:	b.n	4390 <ExFatPartition::rootLength()+0x14>

000043d4 <ExFatFile::addCluster()>:
  }
  return checksum;
}
//------------------------------------------------------------------------------
bool ExFatFile::addCluster() {
  uint32_t find = m_vol->bitmapFind(m_curCluster ? m_curCluster + 1 : 0, 1);
    43d4:	ldr	r1, [r0, #24]
bool ExFatFile::addCluster() {
    43d6:	push	{r3, r4, r5, r6, r7, lr}
    43d8:	mov	r4, r0
  uint32_t find = m_vol->bitmapFind(m_curCluster ? m_curCluster + 1 : 0, 1);
    43da:	ldr	r0, [r0, #32]
    43dc:	cbz	r1, 43e0 <ExFatFile::addCluster()+0xc>
    43de:	adds	r1, #1
    43e0:	movs	r2, #1
    43e2:	bl	3e84 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  if (find < 2) {
    43e6:	cmp	r0, #1
  uint32_t find = m_vol->bitmapFind(m_curCluster ? m_curCluster + 1 : 0, 1);
    43e8:	mov	r5, r0
  if (find < 2) {
    43ea:	bls.n	4452 <ExFatFile::addCluster()+0x7e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!m_vol->bitmapModify(find, 1, 1)) {
    43ec:	movs	r3, #1
    43ee:	mov	r1, r0
    43f0:	ldr	r0, [r4, #32]
    43f2:	mov	r2, r3
    43f4:	bl	3f44 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    43f8:	mov	r6, r0
    43fa:	cbz	r0, 4452 <ExFatFile::addCluster()+0x7e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_curCluster == 0) {
    43fc:	ldr	r3, [r4, #24]
    43fe:	cbz	r3, 4458 <ExFatFile::addCluster()+0x84>
  bool isContiguous() const { return m_flags & FILE_FLAG_CONTIGUOUS; }
    4400:	ldrb.w	r2, [r4, #51]	; 0x33
    m_flags |= FILE_FLAG_CONTIGUOUS;
    goto done;
  }
  if (isContiguous()) {
    4404:	lsls	r1, r2, #25
    4406:	bpl.n	442e <ExFatFile::addCluster()+0x5a>
    if (find == (m_curCluster + 1)) {
    4408:	adds	r1, r3, #1
    440a:	cmp	r1, r5
    440c:	beq.n	4440 <ExFatFile::addCluster()+0x6c>
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    440e:	bic.w	r2, r2, #64	; 0x40

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    4412:	ldr	r1, [r4, #28]
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    4414:	strb.w	r2, [r4, #51]	; 0x33
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    4418:	b.n	4426 <ExFatFile::addCluster()+0x52>
      if (!m_vol->fatPut(c, c + 1)) {
    441a:	ldr	r0, [r4, #32]
    441c:	bl	40fc <ExFatPartition::fatPut(unsigned long, unsigned long)>
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    4420:	mov	r1, r7
      if (!m_vol->fatPut(c, c + 1)) {
    4422:	cbz	r0, 4452 <ExFatFile::addCluster()+0x7e>
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    4424:	ldr	r3, [r4, #24]
      if (!m_vol->fatPut(c, c + 1)) {
    4426:	adds	r7, r1, #1
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    4428:	cmp	r1, r3
      if (!m_vol->fatPut(c, c + 1)) {
    442a:	mov	r2, r7
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    442c:	bcc.n	441a <ExFatFile::addCluster()+0x46>
        goto fail;
      }
    }
  }
  // New cluster is EOC.
  if (!m_vol->fatPut(find, EXFAT_EOC)) {
    442e:	mov.w	r2, #4294967295
    4432:	mov	r1, r5
    4434:	ldr	r0, [r4, #32]
    4436:	bl	40fc <ExFatPartition::fatPut(unsigned long, unsigned long)>
    443a:	cbz	r0, 4452 <ExFatFile::addCluster()+0x7e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Connect new cluster to existing chain.
  if (m_curCluster) {
    443c:	ldr	r1, [r4, #24]
    443e:	cbnz	r1, 4446 <ExFatFile::addCluster()+0x72>
  m_curCluster = find;
  return true;

fail:
  return false;
}
    4440:	mov	r0, r6
  m_curCluster = find;
    4442:	str	r5, [r4, #24]
}
    4444:	pop	{r3, r4, r5, r6, r7, pc}
    if (!m_vol->fatPut(m_curCluster, find)) {
    4446:	mov	r2, r5
    4448:	ldr	r0, [r4, #32]
    444a:	bl	40fc <ExFatPartition::fatPut(unsigned long, unsigned long)>
    444e:	cmp	r0, #0
    4450:	bne.n	4440 <ExFatFile::addCluster()+0x6c>
  return false;
    4452:	movs	r6, #0
}
    4454:	mov	r0, r6
    4456:	pop	{r3, r4, r5, r6, r7, pc}
    m_flags |= FILE_FLAG_CONTIGUOUS;
    4458:	ldrb.w	r3, [r4, #51]	; 0x33
    445c:	orr.w	r3, r3, #64	; 0x40
    4460:	strb.w	r3, [r4, #51]	; 0x33
    goto done;
    4464:	b.n	4440 <ExFatFile::addCluster()+0x6c>
    4466:	nop

00004468 <ExFatFile::remove()>:
  bool isWritable() const { return m_flags & FILE_FLAG_WRITE; }
    4468:	ldrb.w	r3, [r0, #51]	; 0x33
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
  uint8_t* cache;
  if (!isWritable()) {
    446c:	lsls	r2, r3, #30
    446e:	bpl.n	44de <ExFatFile::remove()+0x76>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster) {
    4470:	ldr	r1, [r0, #28]
bool ExFatFile::remove() {
    4472:	push	{r4, r5, r6, lr}
    4474:	mov	r5, r0
  if (m_firstCluster) {
    4476:	cbnz	r1, 44a2 <ExFatFile::remove()+0x3a>
bool ExFatFile::remove() {
    4478:	movs	r4, #0
    447a:	mov	r1, r4
    447c:	b.n	448e <ExFatFile::remove()+0x26>
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Mark entry not used.
    cache[0] &= 0x7F;
    447e:	ldrb	r3, [r0, #0]
    4480:	and.w	r3, r3, #127	; 0x7f
    4484:	strb	r3, [r0, #0]
  for (uint8_t is = 0; is <= m_setCount; is++) {
    4486:	ldrb.w	r3, [r5, #48]	; 0x30
    448a:	cmp	r3, r1
    448c:	bcc.n	44e2 <ExFatFile::remove()+0x7a>
    448e:	adds	r4, #1
    cache = dirCache(is, FsCache::CACHE_FOR_WRITE);
    4490:	movs	r2, #1
    4492:	mov	r0, r5
    4494:	bl	3484 <ExFatFile::dirCache(unsigned char, unsigned char)>
  for (uint8_t is = 0; is <= m_setCount; is++) {
    4498:	uxtb	r1, r4
    if (!cache) {
    449a:	cmp	r0, #0
    449c:	bne.n	447e <ExFatFile::remove()+0x16>
  // Write entry to device.
  return m_vol->cacheSync();

fail:
  return false;
}
    449e:	movs	r0, #0
    44a0:	pop	{r4, r5, r6, pc}
    if (isContiguous()) {
    44a2:	lsls	r3, r3, #25
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    44a4:	ldr	r0, [r0, #32]
    if (isContiguous()) {
    44a6:	bpl.n	4512 <ExFatFile::remove()+0xaa>
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    44a8:	ldrb.w	r3, [r0, #1093]	; 0x445
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    44ac:	ldrd	r2, r4, [r5, #8]
    44b0:	adds	r3, #9
    44b2:	subs	r2, #1
    44b4:	uxtb	r3, r3
    44b6:	adc.w	r4, r4, #4294967295
    44ba:	rsb	ip, r3, #32
    44be:	lsrs	r2, r3
    44c0:	subs	r3, #32
    44c2:	lsl.w	ip, r4, ip
    44c6:	lsr.w	r3, r4, r3
    44ca:	orr.w	r2, r2, ip
    44ce:	orrs	r2, r3
      if (!m_vol->bitmapModify(m_firstCluster, nc, 0)) {
    44d0:	movs	r3, #0
    44d2:	adds	r2, #1
    44d4:	bl	3f44 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    44d8:	cmp	r0, #0
    44da:	bne.n	4478 <ExFatFile::remove()+0x10>
    44dc:	b.n	449e <ExFatFile::remove()+0x36>
}
    44de:	movs	r0, #0
    44e0:	bx	lr
  m_attributes = FILE_ATTR_CLOSED;
    44e2:	movs	r3, #0
  return m_vol->cacheSync();
    44e4:	ldr	r4, [r5, #32]
  m_attributes = FILE_ATTR_CLOSED;
    44e6:	strb.w	r3, [r5, #49]	; 0x31
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    44ea:	mov	r0, r4
  m_flags = 0;
    44ec:	strb.w	r3, [r5, #51]	; 0x33
    44f0:	bl	2a38 <FsCache::sync()>
    44f4:	cmp	r0, #0
    44f6:	beq.n	449e <ExFatFile::remove()+0x36>
    44f8:	add.w	r0, r4, #528	; 0x210
    44fc:	bl	2a38 <FsCache::sync()>
    4500:	cmp	r0, #0
    4502:	beq.n	449e <ExFatFile::remove()+0x36>
    4504:	ldr.w	r0, [r4, #1088]	; 0x440
  bool syncDevice() { return m_blockDev->syncDevice(); }
    4508:	ldr	r3, [r0, #0]
}
    450a:	ldmia.w	sp!, {r4, r5, r6, lr}
    450e:	ldr	r3, [r3, #28]
    4510:	bx	r3
      if (!m_vol->freeChain(m_firstCluster)) {
    4512:	bl	413c <ExFatPartition::freeChain(unsigned long)>
    4516:	cmp	r0, #0
    4518:	bne.n	4478 <ExFatFile::remove()+0x10>
    451a:	b.n	449e <ExFatFile::remove()+0x36>

0000451c <ExFatFile::rmdir()>:
//------------------------------------------------------------------------------
bool ExFatFile::rmdir() {
  int n;
  uint8_t dir[FS_DIR_SIZE];
  // must be open subdirectory
  if (!isSubDir()) {
    451c:	ldrb.w	r3, [r0, #49]	; 0x31
    4520:	lsls	r3, r3, #27
    4522:	bmi.n	4528 <ExFatFile::rmdir()+0xc>
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
  return remove();

fail:
  return false;
    4524:	movs	r0, #0
}
    4526:	bx	lr
bool ExFatFile::rmdir() {
    4528:	push	{r4, lr}
  void rewind() { seekSet(0); }
    452a:	movs	r2, #0
    452c:	sub	sp, #32
    452e:	movs	r3, #0
    4530:	mov	r4, r0
    4532:	bl	37c0 <ExFatFile::seekSet(unsigned long long)>
    4536:	b.n	454a <ExFatFile::rmdir()+0x2e>
    if (n != FS_DIR_SIZE || dir[0] & 0X80) {
    4538:	cmp	r0, #32
    453a:	bne.n	4574 <ExFatFile::rmdir()+0x58>
    453c:	ldrsb.w	r3, [sp]
    4540:	ldrb.w	r2, [sp]
    4544:	cmp	r3, #0
    4546:	blt.n	4574 <ExFatFile::rmdir()+0x58>
    if (dir[0] == 0) {
    4548:	cbz	r2, 4558 <ExFatFile::rmdir()+0x3c>
    n = read(dir, FS_DIR_SIZE);
    454a:	movs	r2, #32
    454c:	mov	r1, sp
    454e:	mov	r0, r4
    4550:	bl	35f4 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    4554:	cmp	r0, #0
    4556:	bne.n	4538 <ExFatFile::rmdir()+0x1c>
  m_flags |= FILE_FLAG_WRITE;
    4558:	ldrb.w	r3, [r4, #51]	; 0x33
  m_attributes = FILE_ATTR_FILE;
    455c:	movs	r2, #8
  return remove();
    455e:	mov	r0, r4
  m_flags |= FILE_FLAG_WRITE;
    4560:	orr.w	r3, r3, #2
  m_attributes = FILE_ATTR_FILE;
    4564:	strb.w	r2, [r4, #49]	; 0x31
  m_flags |= FILE_FLAG_WRITE;
    4568:	strb.w	r3, [r4, #51]	; 0x33
  return remove();
    456c:	bl	4468 <ExFatFile::remove()>
}
    4570:	add	sp, #32
    4572:	pop	{r4, pc}
  return false;
    4574:	movs	r0, #0
}
    4576:	add	sp, #32
    4578:	pop	{r4, pc}
    457a:	nop

0000457c <ExFatFile::syncDir()>:
fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    457c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4580:	mov.w	r8, #0
    4584:	sub	sp, #8
    }
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setLe16(df->attributes, m_attributes & FS_ATTRIB_COPY);
        if (FsDateTime::callback) {
    4586:	ldr	r7, [pc, #296]	; (46b0 <ExFatFile::syncDir()+0x134>)
bool ExFatFile::syncDir() {
    4588:	mov	r6, r0
  uint16_t checksum = 0;
    458a:	mov	r4, r8
    458c:	mov	r1, r8
    cache = dirCache(is, FsCache::CACHE_FOR_READ);
    458e:	movs	r2, #0
    4590:	mov	r0, r6
    4592:	bl	3484 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache) {
    4596:	mov	r5, r0
    4598:	cbz	r0, 45a8 <ExFatFile::syncDir()+0x2c>
    switch (cache[0]) {
    459a:	ldrb	r1, [r0, #0]
    459c:	cmp	r1, #192	; 0xc0
    459e:	beq.n	4674 <ExFatFile::syncDir()+0xf8>
    45a0:	cmp	r1, #193	; 0xc1
    45a2:	beq.n	45fc <ExFatFile::syncDir()+0x80>
    45a4:	cmp	r1, #133	; 0x85
    45a6:	beq.n	45bc <ExFatFile::syncDir()+0x40>
    goto fail;
  }
  return true;

fail:
  m_error |= WRITE_ERROR;
    45a8:	ldrb.w	r3, [r6, #50]	; 0x32
  return false;
    45ac:	movs	r0, #0
  m_error |= WRITE_ERROR;
    45ae:	orr.w	r3, r3, #1
    45b2:	strb.w	r3, [r6, #50]	; 0x32
}
    45b6:	add	sp, #8
    45b8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        setLe16(df->attributes, m_attributes & FS_ATTRIB_COPY);
    45bc:	ldrb.w	r3, [r6, #49]	; 0x31
    45c0:	and.w	r3, r3, #55	; 0x37
    45c4:	strh	r3, [r0, #4]
        if (FsDateTime::callback) {
    45c6:	ldr	r3, [r7, #0]
    45c8:	cbz	r3, 45ec <ExFatFile::syncDir()+0x70>
          FsDateTime::callback(&date, &time, &ms10);
    45ca:	add.w	r2, sp, #3
    45ce:	add.w	r1, sp, #6
    45d2:	add	r0, sp, #4
    45d4:	blx	r3
          setLe16(df->modifyTime, time);
    45d6:	ldrh.w	r3, [sp, #6]
  *reinterpret_cast<uint16_t*>(dst) = src;
    45da:	strh	r3, [r5, #12]
    45dc:	strh	r3, [r5, #16]
          setLe16(df->modifyDate, date);
    45de:	ldrh.w	r3, [sp, #4]
    45e2:	strh	r3, [r5, #14]
    45e4:	strh	r3, [r5, #18]
          df->modifyTimeMs = ms10;
    45e6:	ldrb.w	r3, [sp, #3]
    45ea:	strb	r3, [r5, #21]
        m_vol->dataCacheDirty();
    45ec:	ldr	r2, [r6, #32]
  void dirty() { m_status |= CACHE_STATUS_DIRTY; }
    45ee:	ldrb.w	r3, [r2, #528]	; 0x210
    45f2:	orr.w	r3, r3, #1
    45f6:	strb.w	r3, [r2, #528]	; 0x210
  bool skip = data[0] == EXFAT_TYPE_FILE;
    45fa:	ldrb	r1, [r5, #0]
    45fc:	sub.w	r0, r1, #133	; 0x85
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    4600:	movs	r2, #0
  bool skip = data[0] == EXFAT_TYPE_FILE;
    4602:	clz	r0, r0
    4606:	lsrs	r0, r0, #5
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    4608:	b.n	460e <ExFatFile::syncDir()+0x92>
    460a:	movs	r2, #4
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    460c:	ldrb	r1, [r5, r2]
    460e:	lsls	r3, r4, #15
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    4610:	cmp	r2, #1
    4612:	add.w	r2, r2, #1
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    4616:	orr.w	r3, r3, r4, lsr #1
    461a:	uxtah	r3, r1, r3
    461e:	uxth	r4, r3
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    4620:	bne.n	4626 <ExFatFile::syncDir()+0xaa>
    4622:	cmp	r0, #0
    4624:	bne.n	460a <ExFatFile::syncDir()+0x8e>
    4626:	cmp	r2, #31
    4628:	bls.n	460c <ExFatFile::syncDir()+0x90>
  for (uint8_t is = 0; is <= m_setCount; is++) {
    462a:	add.w	r8, r8, #1
    462e:	ldrb.w	r3, [r6, #48]	; 0x30
    4632:	uxtb.w	r1, r8
    4636:	cmp	r3, r1
    4638:	bcs.n	458e <ExFatFile::syncDir()+0x12>
      m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_WRITE));
    463a:	movs	r2, #1
    463c:	add.w	r1, r6, #36	; 0x24
    4640:	ldr	r0, [r6, #32]
    4642:	bl	3fec <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    4646:	cmp	r0, #0
    4648:	beq.n	45a8 <ExFatFile::syncDir()+0x2c>
  if (!m_vol->cacheSync()) {
    464a:	ldr	r5, [r6, #32]
    464c:	strh	r4, [r0, #2]
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    464e:	mov	r0, r5
    4650:	bl	2a38 <FsCache::sync()>
    4654:	cmp	r0, #0
    4656:	beq.n	45a8 <ExFatFile::syncDir()+0x2c>
    4658:	add.w	r0, r5, #528	; 0x210
    465c:	bl	2a38 <FsCache::sync()>
    4660:	cmp	r0, #0
    4662:	beq.n	45a8 <ExFatFile::syncDir()+0x2c>
    4664:	ldr.w	r0, [r5, #1088]	; 0x440
  bool syncDevice() { return m_blockDev->syncDevice(); }
    4668:	ldr	r3, [r0, #0]
    466a:	ldr	r3, [r3, #28]
    466c:	blx	r3
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    466e:	cmp	r0, #0
    4670:	bne.n	45b6 <ExFatFile::syncDir()+0x3a>
    4672:	b.n	45a8 <ExFatFile::syncDir()+0x2c>
        if (isContiguous()) {
    4674:	ldrb.w	r3, [r6, #51]	; 0x33
    4678:	tst.w	r3, #64	; 0x40
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
    467c:	ldrb	r3, [r0, #1]
    467e:	ite	ne
    4680:	orrne.w	r3, r3, #2
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
    4684:	andeq.w	r3, r3, #253	; 0xfd
    4688:	strb	r3, [r0, #1]
        setLe64(ds->validLength, m_validLength);
    468a:	ldrd	r0, r1, [r6, #16]
        m_vol->dataCacheDirty();
    468e:	ldrd	r3, r2, [r6, #28]
  *reinterpret_cast<uint64_t*>(dst) = src;
    4692:	strd	r0, r1, [r5, #8]
        setLe64(ds->dataLength, m_dataLength);
    4696:	ldrd	r0, r1, [r6, #8]
  *reinterpret_cast<uint32_t*>(dst) = src;
    469a:	str	r3, [r5, #20]
  *reinterpret_cast<uint64_t*>(dst) = src;
    469c:	strd	r0, r1, [r5, #24]
    46a0:	ldrb.w	r3, [r2, #528]	; 0x210
    46a4:	orr.w	r3, r3, #1
    46a8:	strb.w	r3, [r2, #528]	; 0x210
  bool skip = data[0] == EXFAT_TYPE_FILE;
    46ac:	ldrb	r1, [r5, #0]
  void dataCacheDirty() { m_dataCache.dirty(); }
    46ae:	b.n	45fc <ExFatFile::syncDir()+0x80>
    46b0:	.word	0x2000771c

000046b4 <ExFatFile::sync()>:
bool ExFatFile::sync() {
    46b4:	push	{r3, r4, r5, lr}
  if (!isOpen()) {
    46b6:	ldrb.w	r3, [r0, #49]	; 0x31
    46ba:	cbz	r3, 470e <ExFatFile::sync()+0x5a>
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    46bc:	ldrsb.w	r2, [r0, #51]	; 0x33
    46c0:	mov	r4, r0
    46c2:	ldrb.w	r3, [r0, #51]	; 0x33
    46c6:	cmp	r2, #0
    46c8:	blt.n	46e4 <ExFatFile::sync()+0x30>
  if (!m_vol->cacheSync()) {
    46ca:	ldr	r5, [r0, #32]
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    46cc:	mov	r0, r5
    46ce:	bl	2a38 <FsCache::sync()>
    46d2:	cbnz	r0, 46f4 <ExFatFile::sync()+0x40>
  m_error |= WRITE_ERROR;
    46d4:	ldrb.w	r3, [r4, #50]	; 0x32
  return false;
    46d8:	movs	r0, #0
  m_error |= WRITE_ERROR;
    46da:	orr.w	r3, r3, #1
    46de:	strb.w	r3, [r4, #50]	; 0x32
}
    46e2:	pop	{r3, r4, r5, pc}
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    46e4:	and.w	r3, r3, #127	; 0x7f
    46e8:	strb.w	r3, [r0, #51]	; 0x33
}
    46ec:	ldmia.w	sp!, {r3, r4, r5, lr}
    return syncDir();
    46f0:	b.w	457c <ExFatFile::syncDir()>
    46f4:	add.w	r0, r5, #528	; 0x210
    46f8:	bl	2a38 <FsCache::sync()>
    46fc:	cmp	r0, #0
    46fe:	beq.n	46d4 <ExFatFile::sync()+0x20>
    4700:	ldr.w	r0, [r5, #1088]	; 0x440
  bool syncDevice() { return m_blockDev->syncDevice(); }
    4704:	ldr	r3, [r0, #0]
    4706:	ldr	r3, [r3, #28]
    4708:	blx	r3
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    470a:	cmp	r0, #0
    470c:	beq.n	46d4 <ExFatFile::sync()+0x20>
    return true;
    470e:	movs	r0, #1
}
    4710:	pop	{r3, r4, r5, pc}
    4712:	nop

00004714 <ExFatFile::addDirCluster()>:
bool ExFatFile::addDirCluster() {
    4714:	push	{r4, r5, r6, lr}
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    4716:	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::addDirCluster() {
    471a:	mov	r5, r0
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    471c:	lsls	r2, r3, #25
    471e:	bmi.n	47ba <ExFatFile::addDirCluster()+0xa6>
    4720:	ldr	r0, [r0, #8]
  uint32_t bytesPerCluster() const { return m_bytesPerCluster; }
    4722:	ldr	r3, [r5, #32]
  dl += m_vol->bytesPerCluster();
    4724:	ldr.w	r3, [r3, #1084]	; 0x43c
    4728:	add	r0, r3
  if (dl >= 0X4000000) {
    472a:	cmp.w	r0, #67108864	; 0x4000000
    472e:	bcc.n	4734 <ExFatFile::addDirCluster()+0x20>
}
    4730:	movs	r0, #0
    4732:	pop	{r4, r5, r6, pc}
  if (!addCluster()) {
    4734:	mov	r0, r5
    4736:	bl	43d4 <ExFatFile::addCluster()>
    473a:	cmp	r0, #0
    473c:	beq.n	4730 <ExFatFile::addDirCluster()+0x1c>
  sector = m_vol->clusterStartSector(m_curCluster);
    473e:	ldr	r0, [r5, #32]
  for (uint32_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    4740:	movs	r4, #0
           ((cluster - 2) << m_sectorsPerClusterShift);
    4742:	ldr	r6, [r5, #24]
    4744:	ldrb.w	r3, [r0, #1093]	; 0x445
    4748:	subs	r6, #2
    474a:	lsls	r6, r3
    474c:	ldr.w	r3, [r0, #1068]	; 0x42c
    4750:	add	r6, r3
    return m_dataCache.prepare(sector, option);
    4752:	adds	r1, r6, r4
    4754:	movs	r2, #5
    4756:	add.w	r0, r0, #528	; 0x210
    475a:	adds	r4, #1
    475c:	bl	29b8 <FsCache::prepare(unsigned long, unsigned char)>
    memset(cache, 0, m_vol->bytesPerSector());
    4760:	mov.w	r2, #512	; 0x200
    4764:	movs	r1, #0
    if (!cache) {
    4766:	cmp	r0, #0
    4768:	beq.n	4730 <ExFatFile::addDirCluster()+0x1c>
    memset(cache, 0, m_vol->bytesPerSector());
    476a:	bl	10104 <memset>
  for (uint32_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    476e:	ldr	r0, [r5, #32]
  uint32_t sectorsPerCluster() const { return 1UL << m_sectorsPerClusterShift; }
    4770:	movs	r3, #1
    4772:	ldrb.w	r2, [r0, #1093]	; 0x445
    4776:	lsls	r3, r2
    4778:	cmp	r4, r3
    477a:	bcc.n	4752 <ExFatFile::addDirCluster()+0x3e>
  if (!isRoot()) {
    477c:	ldrb.w	r3, [r5, #49]	; 0x31
    4780:	lsls	r3, r3, #25
    4782:	bmi.n	47b0 <ExFatFile::addDirCluster()+0x9c>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    4784:	ldrb.w	r2, [r5, #51]	; 0x33
    4788:	orn	r2, r2, #127	; 0x7f
    m_dataLength += m_vol->bytesPerCluster();
    478c:	ldrd	r3, r1, [r5, #8]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    4790:	strb.w	r2, [r5, #51]	; 0x33
    m_dataLength += m_vol->bytesPerCluster();
    4794:	ldr.w	r2, [r0, #1084]	; 0x43c
    4798:	adds	r3, r3, r2
    479a:	adc.w	r0, r1, #0
    479e:	str	r3, [r5, #8]
    m_validLength += m_vol->bytesPerCluster();
    47a0:	ldrd	r3, r1, [r5, #16]
    m_dataLength += m_vol->bytesPerCluster();
    47a4:	str	r0, [r5, #12]
    m_validLength += m_vol->bytesPerCluster();
    47a6:	adds	r3, r3, r2
    47a8:	adc.w	r1, r1, #0
    47ac:	strd	r3, r1, [r5, #16]
  return sync();
    47b0:	mov	r0, r5
}
    47b2:	ldmia.w	sp!, {r4, r5, r6, lr}
  return sync();
    47b6:	b.w	46b4 <ExFatFile::sync()>
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    47ba:	ldr	r0, [r0, #32]
    47bc:	bl	437c <ExFatPartition::rootLength()>
    47c0:	b.n	4722 <ExFatFile::addDirCluster()+0xe>
    47c2:	nop

000047c4 <ExFatFile::rename(ExFatFile*, char const*)>:
bool ExFatFile::rename(ExFatFile* dirFile, const char* newPath) {
    47c4:	push	{r4, r5, r6, lr}
    47c6:	mov	r4, r0
  if (!(isFile() || isSubDir())) {
    47c8:	ldrb.w	r0, [r0, #49]	; 0x31
bool ExFatFile::rename(ExFatFile* dirFile, const char* newPath) {
    47cc:	sub	sp, #112	; 0x70
  ExFatFile() {}
    47ce:	movs	r3, #0
  if (!(isFile() || isSubDir())) {
    47d0:	tst.w	r0, #24
    47d4:	str	r3, [sp, #48]	; 0x30
    47d6:	str	r3, [sp, #104]	; 0x68
    47d8:	beq.n	47e2 <ExFatFile::rename(ExFatFile*, char const*)+0x1e>
  if (m_vol != dirFile->m_vol) {
    47da:	ldr	r0, [r4, #32]
    47dc:	ldr	r3, [r1, #32]
    47de:	cmp	r0, r3
    47e0:	beq.n	47e8 <ExFatFile::rename(ExFatFile*, char const*)+0x24>
  return false;
    47e2:	movs	r0, #0
}
    47e4:	add	sp, #112	; 0x70
    47e6:	pop	{r4, r5, r6, pc}
  if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    47e8:	movw	r3, #2561	; 0xa01
    47ec:	mov	r0, sp
    47ee:	bl	3d5c <ExFatFile::open(ExFatFile*, char const*, int)>
    47f2:	cmp	r0, #0
    47f4:	beq.n	47e2 <ExFatFile::rename(ExFatFile*, char const*)+0x1e>
  oldFile = *this;
    47f6:	mov	ip, r4
    47f8:	add.w	r6, r4, #48	; 0x30
    47fc:	add	r5, sp, #56	; 0x38
    47fe:	ldr.w	r0, [ip]
    4802:	add.w	ip, ip, #16
    4806:	ldr.w	r1, [ip, #-12]
    480a:	mov	lr, r5
    480c:	ldr.w	r2, [ip, #-8]
    4810:	adds	r5, #16
    4812:	ldr.w	r3, [ip, #-4]
    4816:	cmp	ip, r6
    4818:	stmia.w	lr!, {r0, r1, r2, r3}
    481c:	bne.n	47fe <ExFatFile::rename(ExFatFile*, char const*)+0x3a>
    481e:	ldr.w	r0, [ip]
  m_dirPos = file.m_dirPos;
    4822:	add	r2, sp, #36	; 0x24
    4824:	add.w	r3, r4, #36	; 0x24
  oldFile = *this;
    4828:	str	r0, [r5, #0]
  m_setCount = file.m_setCount;
    482a:	ldrb.w	r5, [sp, #48]	; 0x30
  m_dirPos = file.m_dirPos;
    482e:	ldmia	r2, {r0, r1, r2}
    4830:	stmia.w	r3, {r0, r1, r2}
  m_flags |= FILE_FLAG_DIR_DIRTY;
    4834:	ldrb.w	r3, [r4, #51]	; 0x33
  if (!sync()) {
    4838:	mov	r0, r4
  m_setCount = file.m_setCount;
    483a:	strb.w	r5, [r4, #48]	; 0x30
  m_flags |= FILE_FLAG_DIR_DIRTY;
    483e:	orn	r3, r3, #127	; 0x7f
    4842:	strb.w	r3, [r4, #51]	; 0x33
  if (!sync()) {
    4846:	bl	46b4 <ExFatFile::sync()>
    484a:	cmp	r0, #0
    484c:	beq.n	47e2 <ExFatFile::rename(ExFatFile*, char const*)+0x1e>
  oldFile.m_firstCluster = 0;
    484e:	movs	r3, #0
  oldFile.m_flags = FILE_FLAG_WRITE;
    4850:	movs	r1, #2
  oldFile.m_attributes = FILE_ATTR_FILE;
    4852:	movs	r2, #8
  oldFile.m_flags = FILE_FLAG_WRITE;
    4854:	strb.w	r1, [sp, #107]	; 0x6b
  oldFile.m_attributes = FILE_ATTR_FILE;
    4858:	mov	r4, r3
    485a:	mov	r1, r3
  oldFile.m_firstCluster = 0;
    485c:	str	r3, [sp, #84]	; 0x54
  oldFile.m_attributes = FILE_ATTR_FILE;
    485e:	strb.w	r2, [sp, #105]	; 0x69
  for (uint8_t is = 0; is <= m_setCount; is++) {
    4862:	adds	r4, #1
    cache = dirCache(is, FsCache::CACHE_FOR_WRITE);
    4864:	movs	r2, #1
    4866:	add	r0, sp, #56	; 0x38
    4868:	bl	3484 <ExFatFile::dirCache(unsigned char, unsigned char)>
  for (uint8_t is = 0; is <= m_setCount; is++) {
    486c:	uxtb	r1, r4
    if (!cache) {
    486e:	cmp	r0, #0
    4870:	beq.n	47e2 <ExFatFile::rename(ExFatFile*, char const*)+0x1e>
    cache[0] &= 0x7F;
    4872:	ldrb	r3, [r0, #0]
    4874:	and.w	r3, r3, #127	; 0x7f
    4878:	strb	r3, [r0, #0]
  for (uint8_t is = 0; is <= m_setCount; is++) {
    487a:	ldrb.w	r3, [sp, #104]	; 0x68
    487e:	cmp	r3, r1
    4880:	bcs.n	4862 <ExFatFile::rename(ExFatFile*, char const*)+0x9e>
  return m_vol->cacheSync();
    4882:	ldr	r4, [sp, #88]	; 0x58
  m_attributes = FILE_ATTR_CLOSED;
    4884:	movs	r3, #0
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    4886:	mov	r0, r4
    4888:	strb.w	r3, [sp, #105]	; 0x69
  m_flags = 0;
    488c:	strb.w	r3, [sp, #107]	; 0x6b
    4890:	bl	2a38 <FsCache::sync()>
    4894:	cmp	r0, #0
    4896:	beq.n	47e2 <ExFatFile::rename(ExFatFile*, char const*)+0x1e>
    4898:	add.w	r0, r4, #528	; 0x210
    489c:	bl	2a38 <FsCache::sync()>
    48a0:	cmp	r0, #0
    48a2:	beq.n	47e2 <ExFatFile::rename(ExFatFile*, char const*)+0x1e>
    48a4:	ldr.w	r0, [r4, #1088]	; 0x440
  bool syncDevice() { return m_blockDev->syncDevice(); }
    48a8:	ldr	r3, [r0, #0]
    48aa:	ldr	r3, [r3, #28]
    48ac:	blx	r3
    48ae:	b.n	47e4 <ExFatFile::rename(ExFatFile*, char const*)+0x20>

000048b0 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>:
bool ExFatFile::mkdir(ExFatFile* parent, const char* path, bool pFlag) {
    48b0:	push	{r4, r5, r6, r7, lr}
    48b2:	movs	r5, #0
    48b4:	sub	sp, #92	; 0x5c
    48b6:	mov	r7, r3
  if (isOpen() || !parent->isDir()) {
    48b8:	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::mkdir(ExFatFile* parent, const char* path, bool pFlag) {
    48bc:	str	r2, [sp, #4]
    48be:	str	r5, [sp, #80]	; 0x50
  if (isOpen() || !parent->isDir()) {
    48c0:	cmp	r3, #0
    48c2:	bne.n	499c <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xec>
    48c4:	ldrb.w	r3, [r1, #49]	; 0x31
    48c8:	mov	r6, r1
    48ca:	tst.w	r3, #80	; 0x50
    48ce:	beq.n	499c <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xec>
  if (isDirSeparator(*path)) {
    48d0:	ldrb	r3, [r2, #0]
    48d2:	mov	r4, r0
    48d4:	mov	r1, r2
    48d6:	cmp	r3, #47	; 0x2f
    48d8:	beq.n	49a4 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xf4>
    if (!parsePathName(path, &fname, &path)) {
    48da:	add	r3, sp, #4
    48dc:	add	r2, sp, #12
    48de:	mov	r0, r4
    48e0:	bl	3544 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    48e4:	cmp	r0, #0
    48e6:	beq.n	499c <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xec>
    if (!*path) {
    48e8:	ldr	r3, [sp, #4]
    48ea:	ldrb	r3, [r3, #0]
    48ec:	cmp	r3, #0
    48ee:	beq.n	49c0 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x110>
    if (!openPrivate(parent, &fname, O_RDONLY)) {
    48f0:	movs	r3, #0
    48f2:	add	r2, sp, #12
    48f4:	mov	r1, r6
    48f6:	mov	r0, r4
    48f8:	bl	38ac <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    48fc:	cbnz	r0, 4956 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa6>
      if (!pFlag || !mkdir(parent, &fname)) {
    48fe:	cmp	r7, #0
    4900:	beq.n	499c <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xec>
  if (!parent->isDir()) {
    4902:	ldrb.w	r3, [r6, #49]	; 0x31
    4906:	tst.w	r3, #80	; 0x50
    490a:	beq.n	499c <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xec>
  if (!openPrivate(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    490c:	movw	r3, #2562	; 0xa02
    4910:	mov	r1, r6
    4912:	add	r2, sp, #12
    4914:	mov	r0, r4
    4916:	bl	38ac <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    491a:	cmp	r0, #0
    491c:	beq.n	499c <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xec>
  m_attributes = FILE_ATTR_SUBDIR | FS_ATTRIB_ARCHIVE;
    491e:	movs	r3, #48	; 0x30
  if (!addDirCluster()) {
    4920:	mov	r0, r4
  m_attributes = FILE_ATTR_SUBDIR | FS_ATTRIB_ARCHIVE;
    4922:	strb.w	r3, [r4, #49]	; 0x31
  if (!addDirCluster()) {
    4926:	bl	4714 <ExFatFile::addDirCluster()>
    492a:	cmp	r0, #0
    492c:	beq.n	499c <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xec>
  m_firstCluster = m_curCluster;
    492e:	ldr	r3, [r4, #24]
  void rewind() { seekSet(0); }
    4930:	mov	r0, r4
    4932:	movs	r2, #0
    4934:	str	r3, [r4, #28]
    4936:	movs	r3, #0
    4938:	bl	37c0 <ExFatFile::seekSet(unsigned long long)>
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    493c:	movs	r3, #193	; 0xc1
    493e:	strb.w	r3, [r4, #51]	; 0x33
  if (!isOpen()) {
    4942:	ldrb.w	r3, [r4, #49]	; 0x31
    4946:	cbz	r3, 4956 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa6>
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    4948:	movs	r3, #65	; 0x41
    return syncDir();
    494a:	mov	r0, r4
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    494c:	strb.w	r3, [r4, #51]	; 0x33
    return syncDir();
    4950:	bl	457c <ExFatFile::syncDir()>
      if (!pFlag || !mkdir(parent, &fname)) {
    4954:	cbz	r0, 499c <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xec>
    tmpDir = *this;
    4956:	mov	ip, r4
    4958:	add	r5, sp, #32
    495a:	add.w	r6, r4, #48	; 0x30
    495e:	ldr.w	r0, [ip]
    4962:	add.w	ip, ip, #16
    4966:	ldr.w	r1, [ip, #-12]
    496a:	mov	lr, r5
    496c:	ldr.w	r2, [ip, #-8]
    4970:	adds	r5, #16
    4972:	ldr.w	r3, [ip, #-4]
    4976:	cmp	ip, r6
    4978:	stmia.w	lr!, {r0, r1, r2, r3}
    497c:	bne.n	495e <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xae>
    497e:	ldr.w	r0, [ip]
    parent = &tmpDir;
    4982:	add	r6, sp, #32
    tmpDir = *this;
    4984:	str	r0, [r5, #0]
    close();
    4986:	mov	r0, r4
    4988:	bl	34c0 <ExFatFile::close()>
    if (!parsePathName(path, &fname, &path)) {
    498c:	ldr	r1, [sp, #4]
    498e:	add	r3, sp, #4
    4990:	add	r2, sp, #12
    4992:	mov	r0, r4
    4994:	bl	3544 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    4998:	cmp	r0, #0
    499a:	bne.n	48e8 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x38>
  return false;
    499c:	movs	r5, #0
}
    499e:	mov	r0, r5
    49a0:	add	sp, #92	; 0x5c
    49a2:	pop	{r4, r5, r6, r7, pc}
      path++;
    49a4:	adds	r1, #1
    49a6:	str	r1, [sp, #4]
    while (isDirSeparator(*path)) {
    49a8:	ldrb	r3, [r1, #0]
    49aa:	cmp	r3, #47	; 0x2f
    49ac:	beq.n	49a4 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xf4>
    if (!tmpDir.openRoot(parent->m_vol)) {
    49ae:	ldr	r1, [r6, #32]
    49b0:	add	r0, sp, #32
    49b2:	bl	351c <ExFatFile::openRoot(ExFatVolume*)>
    49b6:	cmp	r0, #0
    49b8:	beq.n	499c <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xec>
    if (!parsePathName(path, &fname, &path)) {
    49ba:	ldr	r1, [sp, #4]
    parent = &tmpDir;
    49bc:	add	r6, sp, #32
    49be:	b.n	48da <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x2a>
  if (!parent->isDir()) {
    49c0:	ldrb.w	r3, [r6, #49]	; 0x31
    49c4:	tst.w	r3, #80	; 0x50
    49c8:	beq.n	499c <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xec>
  if (!openPrivate(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    49ca:	movw	r3, #2562	; 0xa02
    49ce:	add	r2, sp, #12
    49d0:	mov	r1, r6
    49d2:	mov	r0, r4
    49d4:	bl	38ac <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    49d8:	cmp	r0, #0
    49da:	beq.n	499c <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xec>
  m_attributes = FILE_ATTR_SUBDIR | FS_ATTRIB_ARCHIVE;
    49dc:	movs	r3, #48	; 0x30
  if (!addDirCluster()) {
    49de:	mov	r0, r4
  m_attributes = FILE_ATTR_SUBDIR | FS_ATTRIB_ARCHIVE;
    49e0:	strb.w	r3, [r4, #49]	; 0x31
  if (!addDirCluster()) {
    49e4:	bl	4714 <ExFatFile::addDirCluster()>
    49e8:	mov	r5, r0
    49ea:	cmp	r0, #0
    49ec:	beq.n	499c <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xec>
  m_firstCluster = m_curCluster;
    49ee:	ldr	r1, [r4, #24]
    49f0:	movs	r2, #0
    49f2:	movs	r3, #0
    49f4:	mov	r0, r4
    49f6:	str	r1, [r4, #28]
    49f8:	bl	37c0 <ExFatFile::seekSet(unsigned long long)>
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    49fc:	movs	r2, #193	; 0xc1
  if (!isOpen()) {
    49fe:	ldrb.w	r3, [r4, #49]	; 0x31
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    4a02:	strb.w	r2, [r4, #51]	; 0x33
  if (!isOpen()) {
    4a06:	cmp	r3, #0
    4a08:	beq.n	499e <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xee>
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    4a0a:	movs	r3, #65	; 0x41
    return syncDir();
    4a0c:	mov	r0, r4
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    4a0e:	strb.w	r3, [r4, #51]	; 0x33
    return syncDir();
    4a12:	bl	457c <ExFatFile::syncDir()>
    4a16:	mov	r5, r0
    4a18:	b.n	499e <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xee>
    4a1a:	nop

00004a1c <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>:
//------------------------------------------------------------------------------
bool ExFatFile::timestamp(uint8_t flags, uint16_t year, uint8_t month,
                          uint8_t day, uint8_t hour, uint8_t minute,
                          uint8_t second) {
    4a1c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t date;
  uint16_t time;
  uint8_t ms10;

  if (!isFile() || year < 1980 || year > 2107 || month < 1 || month > 12 ||
      day < 1 || day > 31 || hour > 23 || minute > 59 || second > 59) {
    4a20:	ldrb.w	r4, [r0, #49]	; 0x31
                          uint8_t second) {
    4a24:	sub	sp, #12
      day < 1 || day > 31 || hour > 23 || minute > 59 || second > 59) {
    4a26:	lsls	r4, r4, #28
                          uint8_t second) {
    4a28:	ldrb.w	r8, [sp, #48]	; 0x30
    4a2c:	ldrb.w	r9, [sp, #52]	; 0x34
    4a30:	ldrb.w	sl, [sp, #56]	; 0x38
    4a34:	ldrb.w	r6, [sp, #60]	; 0x3c
      day < 1 || day > 31 || hour > 23 || minute > 59 || second > 59) {
    4a38:	bpl.w	4b4e <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x132>
  if (!isFile() || year < 1980 || year > 2107 || month < 1 || month > 12 ||
    4a3c:	subw	r2, r2, #1980	; 0x7bc
    4a40:	uxth	r4, r2
    4a42:	cmp	r4, #127	; 0x7f
    4a44:	bhi.w	4b4e <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x132>
    4a48:	subs	r2, r3, #1
    4a4a:	cmp	r2, #11
    4a4c:	bhi.n	4b4e <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x132>
      day < 1 || day > 31 || hour > 23 || minute > 59 || second > 59) {
    4a4e:	add.w	r2, r8, #4294967295
    4a52:	cmp	r2, #30
    4a54:	bhi.n	4b4e <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x132>
    4a56:	cmp.w	sl, #59	; 0x3b
    4a5a:	it	ls
    4a5c:	cmpls.w	r9, #23
    4a60:	ite	hi
    4a62:	movhi	r7, #1
    4a64:	movls	r7, #0
    4a66:	cmp	r6, #59	; 0x3b
    4a68:	it	hi
    4a6a:	orrhi.w	r7, r7, #1
    4a6e:	cmp	r7, #0
    4a70:	bne.n	4b4e <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x132>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // update directory entry
  if (!sync()) {
    4a72:	mov	r5, r0
    4a74:	strd	r1, r3, [sp]
    4a78:	bl	46b4 <ExFatFile::sync()>
    4a7c:	cmp	r0, #0
    4a7e:	beq.n	4b4e <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x132>
    4a80:	ldr	r3, [sp, #4]
  uint16_t checksum = 0;
    4a82:	mov	fp, r7
    4a84:	ldr	r1, [sp, #0]
    4a86:	orr.w	r8, r8, r3, lsl #5
             : hour << 11 | minute << 5 | second >> 1;
    4a8a:	lsrs	r3, r6, #1
    goto fail;
  }

  date = FS_DATE(year, month, day);
  time = FS_TIME(hour, minute, second);
  ms10 = second & 1 ? 100 : 0;
    4a8c:	ands.w	r6, r6, #1
                                              : year << 9 | month << 5 | day;
    4a90:	orr.w	r8, r8, r4, lsl #9
    4a94:	and.w	r4, r1, #4
             : hour << 11 | minute << 5 | second >> 1;
    4a98:	orr.w	r3, r3, sl, lsl #5
    4a9c:	mov	sl, r7
    4a9e:	it	ne
    4aa0:	movne	r6, #100	; 0x64
    4aa2:	orr.w	r3, r3, r9, lsl #11
    4aa6:	and.w	r9, r1, #1
    4aaa:	bfi	sl, r3, #0, #16
    4aae:	bfi	sl, r8, #16, #16

  for (uint8_t is = 0; is <= m_setCount; is++) {
    4ab2:	and.w	r8, r1, #2
    4ab6:	mov	r1, r7
    cache = dirCache(is, FsCache::CACHE_FOR_READ);
    4ab8:	movs	r2, #0
    4aba:	mov	r0, r5
    4abc:	bl	3484 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache) {
    4ac0:	cmp	r0, #0
    4ac2:	beq.n	4b4e <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x132>
      DBG_FAIL_MACRO;
      goto fail;
    }
    switch (cache[0]) {
    4ac4:	ldrb.w	ip, [r0]
    4ac8:	cmp.w	ip, #133	; 0x85
    4acc:	beq.n	4b56 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x13a>
    4ace:	add.w	r3, ip, #64	; 0x40
    4ad2:	uxtb	r3, r3
    4ad4:	cmp	r3, #1
    4ad6:	bhi.n	4b4e <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x132>
  bool skip = data[0] == EXFAT_TYPE_FILE;
    4ad8:	sub.w	r1, ip, #133	; 0x85
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    4adc:	movs	r2, #0
  bool skip = data[0] == EXFAT_TYPE_FILE;
    4ade:	clz	r1, r1
    4ae2:	lsrs	r1, r1, #5
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    4ae4:	b.n	4aec <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xd0>
    4ae6:	movs	r2, #4
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    4ae8:	ldrb.w	ip, [r0, r2]
    4aec:	mov.w	r3, fp, lsl #15
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    4af0:	cmp	r2, #1
    4af2:	add.w	r2, r2, #1
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    4af6:	orr.w	r3, r3, fp, lsr #1
    4afa:	uxtah	r3, ip, r3
    4afe:	uxth.w	fp, r3
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    4b02:	bne.n	4b08 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xec>
    4b04:	cmp	r1, #0
    4b06:	bne.n	4ae6 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xca>
    4b08:	cmp	r2, #31
    4b0a:	bls.n	4ae8 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xcc>
  for (uint8_t is = 0; is <= m_setCount; is++) {
    4b0c:	adds	r7, #1
    4b0e:	ldrb.w	r3, [r5, #48]	; 0x30
    4b12:	uxtb	r1, r7
    4b14:	cmp	r3, r1
    4b16:	bcs.n	4ab8 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x9c>
        break;
    }
    checksum = exFatDirChecksum(cache, checksum);
  }
  df = reinterpret_cast<DirFile_t*>(
      m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_WRITE));
    4b18:	movs	r2, #1
    4b1a:	add.w	r1, r5, #36	; 0x24
    4b1e:	ldr	r0, [r5, #32]
    4b20:	bl	3fec <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    4b24:	cbz	r0, 4b4e <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x132>
    DBG_FAIL_MACRO;
    goto fail;
  }
  setLe16(df->setChecksum, checksum);
  if (!m_vol->cacheSync()) {
    4b26:	ldr	r4, [r5, #32]
  *reinterpret_cast<uint16_t*>(dst) = src;
    4b28:	strh.w	fp, [r0, #2]
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    4b2c:	mov	r0, r4
    4b2e:	bl	2a38 <FsCache::sync()>
    4b32:	cbz	r0, 4b4e <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x132>
    4b34:	add.w	r0, r4, #528	; 0x210
    4b38:	bl	2a38 <FsCache::sync()>
    4b3c:	cbz	r0, 4b4e <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x132>
    4b3e:	ldr.w	r0, [r4, #1088]	; 0x440
  bool syncDevice() { return m_blockDev->syncDevice(); }
    4b42:	ldr	r3, [r0, #0]
    4b44:	ldr	r3, [r3, #28]
  }
  return true;

fail:
  return false;
}
    4b46:	add	sp, #12
    4b48:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4b4c:	bx	r3
    4b4e:	movs	r0, #0
    4b50:	add	sp, #12
    4b52:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        setLe16(df->attributes, m_attributes & FS_ATTRIB_COPY);
    4b56:	ldrb.w	r3, [r5, #49]	; 0x31
        m_vol->dataCacheDirty();
    4b5a:	ldr	r2, [r5, #32]
        setLe16(df->attributes, m_attributes & FS_ATTRIB_COPY);
    4b5c:	and.w	r3, r3, #55	; 0x37
    4b60:	strh	r3, [r0, #4]
    4b62:	ldrb.w	r3, [r2, #528]	; 0x210
    4b66:	orr.w	r3, r3, #1
    4b6a:	strb.w	r3, [r2, #528]	; 0x210
        if (flags & T_ACCESS) {
    4b6e:	cmp.w	r9, #0
    4b72:	beq.n	4b78 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x15c>
    4b74:	str.w	sl, [r0, #16]
        if (flags & T_CREATE) {
    4b78:	cmp.w	r8, #0
    4b7c:	beq.n	4b84 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x168>
          df->createTimeMs = ms10;
    4b7e:	strb	r6, [r0, #20]
    4b80:	str.w	sl, [r0, #8]
        if (flags & T_WRITE) {
    4b84:	cbz	r4, 4b8c <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x170>
          df->modifyTimeMs = ms10;
    4b86:	strb	r6, [r0, #21]
    4b88:	str.w	sl, [r0, #12]
  bool skip = data[0] == EXFAT_TYPE_FILE;
    4b8c:	ldrb.w	ip, [r0]
}
    4b90:	b.n	4ad8 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xbc>
    4b92:	nop

00004b94 <ExFatFile::truncate()>:
  bool isWritable() const { return m_flags & FILE_FLAG_WRITE; }
    4b94:	ldrb.w	r3, [r0, #51]	; 0x33
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    4b98:	lsls	r2, r3, #30
    4b9a:	bpl.n	4c70 <ExFatFile::truncate()+0xdc>
bool ExFatFile::truncate() {
    4b9c:	push	{r4, r5, r6, lr}
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    4b9e:	ldr	r5, [r0, #28]
bool ExFatFile::truncate() {
    4ba0:	sub	sp, #8
    4ba2:	mov	r4, r0
  if (m_firstCluster == 0) {
    4ba4:	cmp	r5, #0
    4ba6:	beq.n	4c1c <ExFatFile::truncate()+0x88>
    return true;
  }
  if (isContiguous()) {
    4ba8:	ands.w	r6, r3, #64	; 0x40
    4bac:	beq.n	4c22 <ExFatFile::truncate()+0x8e>
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    4bae:	ldr	r0, [r0, #32]
    4bb0:	ldr	r2, [r4, #8]
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    4bb2:	ldrb.w	ip, [r0, #1093]	; 0x445
    4bb6:	subs	r2, #1
    4bb8:	ldr	r1, [r4, #12]
    4bba:	add.w	ip, ip, #9
    4bbe:	adc.w	r1, r1, #4294967295
    4bc2:	uxtb.w	ip, ip
    4bc6:	rsb	lr, ip, #32
    4bca:	lsr.w	r2, r2, ip
    4bce:	sub.w	ip, ip, #32
    4bd2:	lsl.w	lr, r1, lr
    4bd6:	lsr.w	ip, r1, ip
    if (m_curCluster) {
    4bda:	ldr	r1, [r4, #24]
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    4bdc:	orr.w	r2, r2, lr
    4be0:	orr.w	r2, r2, ip
    4be4:	adds	r2, #1
    if (m_curCluster) {
    4be6:	cbnz	r1, 4c3a <ExFatFile::truncate()+0xa6>
      toFree = m_curCluster + 1;
      nc -= 1 + m_curCluster - m_firstCluster;
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    4be8:	str	r1, [r4, #28]
    4bea:	mov	r1, r5
    4bec:	str	r1, [sp, #4]
    }
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    4bee:	cmp	r2, #0
    4bf0:	bne.n	4c60 <ExFatFile::truncate()+0xcc>
      }
    }
  }
  m_dataLength = m_curPosition;
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
    4bf2:	orn	r2, r3, #127	; 0x7f
  m_dataLength = m_curPosition;
    4bf6:	ldrd	r0, r1, [r4]
  m_flags |= FILE_FLAG_DIR_DIRTY;
    4bfa:	strb.w	r2, [r4, #51]	; 0x33
  m_dataLength = m_curPosition;
    4bfe:	strd	r0, r1, [r4, #8]
  m_validLength = m_curPosition;
    4c02:	strd	r0, r1, [r4, #16]
  if (!isOpen()) {
    4c06:	ldrb.w	r1, [r4, #49]	; 0x31
    4c0a:	cbz	r1, 4c1c <ExFatFile::truncate()+0x88>
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    4c0c:	and.w	r3, r3, #127	; 0x7f
    return syncDir();
    4c10:	mov	r0, r4
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    4c12:	strb.w	r3, [r4, #51]	; 0x33
    return syncDir();
    4c16:	bl	457c <ExFatFile::syncDir()>
    4c1a:	b.n	4c1e <ExFatFile::truncate()+0x8a>
    return true;
    4c1c:	movs	r0, #1
  return sync();

fail:
  return false;
}
    4c1e:	add	sp, #8
    4c20:	pop	{r4, r5, r6, pc}
    if (m_curCluster) {
    4c22:	ldr	r1, [r0, #24]
    4c24:	cbnz	r1, 4c44 <ExFatFile::truncate()+0xb0>
      toFree = m_firstCluster;
    4c26:	str	r5, [sp, #4]
      m_firstCluster = 0;
    4c28:	str	r1, [r0, #28]
      if (!m_vol->freeChain(toFree)) {
    4c2a:	mov	r1, r5
    4c2c:	ldr	r0, [r4, #32]
    4c2e:	bl	413c <ExFatPartition::freeChain(unsigned long)>
    4c32:	cbz	r0, 4c6a <ExFatFile::truncate()+0xd6>
  m_flags |= FILE_FLAG_DIR_DIRTY;
    4c34:	ldrb.w	r3, [r4, #51]	; 0x33
    4c38:	b.n	4bf2 <ExFatFile::truncate()+0x5e>
      nc -= 1 + m_curCluster - m_firstCluster;
    4c3a:	subs	r5, #1
    4c3c:	subs	r5, r5, r1
      toFree = m_curCluster + 1;
    4c3e:	adds	r1, #1
      nc -= 1 + m_curCluster - m_firstCluster;
    4c40:	add	r2, r5
    4c42:	b.n	4bec <ExFatFile::truncate()+0x58>
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    4c44:	add	r2, sp, #4
    4c46:	ldr	r0, [r0, #32]
      toFree = 0;
    4c48:	str	r6, [sp, #4]
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    4c4a:	bl	40b8 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
      if (fg < 0) {
    4c4e:	cmp	r0, #0
    4c50:	blt.n	4c6a <ExFatFile::truncate()+0xd6>
      if (fg) {
    4c52:	bne.n	4c74 <ExFatFile::truncate()+0xe0>
    if (toFree) {
    4c54:	ldr	r5, [sp, #4]
    4c56:	cmp	r5, #0
    4c58:	bne.n	4c2a <ExFatFile::truncate()+0x96>
  m_flags |= FILE_FLAG_DIR_DIRTY;
    4c5a:	ldrb.w	r3, [r4, #51]	; 0x33
    4c5e:	b.n	4bf2 <ExFatFile::truncate()+0x5e>
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    4c60:	movs	r3, #0
    4c62:	bl	3f44 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    4c66:	cmp	r0, #0
    4c68:	bne.n	4c34 <ExFatFile::truncate()+0xa0>
  return false;
    4c6a:	movs	r0, #0
}
    4c6c:	add	sp, #8
    4c6e:	pop	{r4, r5, r6, pc}
  return false;
    4c70:	movs	r0, #0
}
    4c72:	bx	lr
        if (!m_vol->fatPut(m_curCluster, EXFAT_EOC)) {
    4c74:	mov.w	r2, #4294967295
    4c78:	ldr	r1, [r4, #24]
    4c7a:	ldr	r0, [r4, #32]
    4c7c:	bl	40fc <ExFatPartition::fatPut(unsigned long, unsigned long)>
    4c80:	cmp	r0, #0
    4c82:	bne.n	4c54 <ExFatFile::truncate()+0xc0>
    4c84:	b.n	4c6a <ExFatFile::truncate()+0xd6>
    4c86:	nop

00004c88 <ExFatFile::write(void const*, unsigned int)>:
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
    4c88:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4c8c:	ldrb.w	r3, [r0, #51]	; 0x33
    4c90:	sub	sp, #12
    4c92:	mov	r4, r0

  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    4c94:	lsls	r5, r3, #30
    4c96:	bpl.w	4ddc <ExFatFile::write(void const*, unsigned int)+0x154>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    4c9a:	mov	r9, r2
    4c9c:	lsls	r2, r3, #28
    4c9e:	mov	r6, r1
    4ca0:	bmi.w	4dce <ExFatFile::write(void const*, unsigned int)+0x146>
    if (!seekSet(m_validLength)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    4ca4:	cmp.w	r9, #0
    4ca8:	beq.w	4efc <ExFatFile::write(void const*, unsigned int)+0x274>
    if (m_curPosition > m_validLength) {
      m_flags |= FILE_FLAG_DIR_DIRTY;
      m_validLength = m_curPosition;
    }
  }
  if (m_curPosition > m_dataLength) {
    4cac:	ldr	r3, [r4, #0]
    4cae:	mov	r5, r9
    clusterOffset = m_curPosition & m_vol->clusterMask();
    4cb0:	ldr	r0, [r4, #32]
      if (m_curCluster != 0) {
    4cb2:	ldr	r1, [r4, #24]
    clusterOffset = m_curPosition & m_vol->clusterMask();
    4cb4:	ldr.w	r2, [r0, #1080]	; 0x438
    4cb8:	and.w	r8, r2, r3
    sectorOffset = clusterOffset & m_vol->sectorMask();
    4cbc:	ubfx	r7, r8, #0, #9
    if (clusterOffset == 0) {
    4cc0:	cmp.w	r8, #0
    4cc4:	bne.w	4df0 <ExFatFile::write(void const*, unsigned int)+0x168>
      if (m_curCluster != 0) {
    4cc8:	cmp	r1, #0
    4cca:	beq.w	4e76 <ExFatFile::write(void const*, unsigned int)+0x1ee>
        if (isContiguous()) {
    4cce:	ldrb.w	r3, [r4, #51]	; 0x33
    4cd2:	lsls	r3, r3, #25
    4cd4:	bpl.w	4eb0 <ExFatFile::write(void const*, unsigned int)+0x228>
    4cd8:	ldrb.w	ip, [r0, #1093]	; 0x445
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
    4cdc:	ldrd	r3, r2, [r4, #8]
    4ce0:	add.w	ip, ip, #9
    4ce4:	subs	r3, #1
    4ce6:	uxtb.w	ip, ip
    4cea:	adc.w	r2, r2, #4294967295
    4cee:	rsb	lr, ip, #32
    4cf2:	lsr.w	r3, r3, ip
    4cf6:	sub.w	ip, ip, #32
    4cfa:	lsl.w	lr, r2, lr
    4cfe:	lsr.w	ip, r2, ip
    4d02:	ldr	r2, [r4, #28]
    4d04:	orr.w	r3, r3, lr
    4d08:	orr.w	r3, r3, ip
    4d0c:	add	r3, r2
          if (m_curCluster < lc) {
    4d0e:	cmp	r1, r3
    4d10:	bcs.w	4ebe <ExFatFile::write(void const*, unsigned int)+0x236>
            m_curCluster++;
    4d14:	adds	r1, #1
    4d16:	str	r1, [r4, #24]
           ((cluster - 2) << m_sectorsPerClusterShift);
    4d18:	ldrb.w	r2, [r0, #1093]	; 0x445
    4d1c:	subs	r1, #2
    sector = m_vol->clusterStartSector(m_curCluster) +
    4d1e:	ldr.w	r3, [r0, #1068]	; 0x42c
    4d22:	lsls	r1, r2
    4d24:	add	r1, r3
    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
    4d26:	cmp.w	r5, #512	; 0x200
    4d2a:	bcc.w	4e42 <ExFatFile::write(void const*, unsigned int)+0x1ba>
    } else if (toWrite >= 2 * m_vol->bytesPerSector()) {
    4d2e:	cmp.w	r5, #1024	; 0x400
    4d32:	bcc.w	4e82 <ExFatFile::write(void const*, unsigned int)+0x1fa>
  uint32_t sectorsPerCluster() const { return 1UL << m_sectorsPerClusterShift; }
    4d36:	movs	r3, #1
    4d38:	lsls	r3, r2
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
    4d3a:	lsrs	r2, r5, #9
                       (clusterOffset >> m_vol->bytesPerSectorShift());
    4d3c:	sub.w	r3, r3, r8
    4d40:	cmp	r3, r2
    4d42:	it	cs
    4d44:	movcs	r3, r2
    return sector <= m_sector && m_sector < (sector + count);
    4d46:	ldr.w	r2, [r0, #536]	; 0x218
    4d4a:	cmp	r2, r1
      n = ns << m_vol->bytesPerSectorShift();
    4d4c:	mov.w	r8, r3, lsl #9
    4d50:	bcc.n	4d66 <ExFatFile::write(void const*, unsigned int)+0xde>
    4d52:	adds	r7, r3, r1
    4d54:	cmp	r2, r7
    4d56:	bcs.n	4d66 <ExFatFile::write(void const*, unsigned int)+0xde>
    m_status = 0;
    4d58:	movs	r2, #0
    4d5a:	strb.w	r2, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    4d5e:	mov.w	r2, #4294967295
    4d62:	str.w	r2, [r0, #536]	; 0x218
    return m_blockDev->writeSectors(sector, src, count);
    4d66:	ldr.w	r0, [r0, #532]	; 0x214
    4d6a:	mov	r2, r6
    4d6c:	ldr	r7, [r0, #0]
    4d6e:	ldr	r7, [r7, #36]	; 0x24
    4d70:	blx	r7
      if (!m_vol->cacheSafeWrite(sector, src, ns)) {
    4d72:	cbz	r0, 4ddc <ExFatFile::write(void const*, unsigned int)+0x154>
    m_curPosition += n;
    4d74:	mov	r3, r8
    src += n;
    4d76:	add	r6, r8
    toWrite -= n;
    4d78:	sub.w	r5, r5, r8
    m_curPosition += n;
    4d7c:	ldrd	r7, r2, [r4]
    if (m_curPosition > m_validLength) {
    4d80:	ldrd	r0, r1, [r4, #16]
    m_curPosition += n;
    4d84:	adds	r3, r3, r7
    4d86:	adc.w	r2, r2, #0
    if (m_curPosition > m_validLength) {
    4d8a:	cmp	r0, r3
    4d8c:	sbcs	r1, r2
    m_curPosition += n;
    4d8e:	strd	r3, r2, [r4]
    if (m_curPosition > m_validLength) {
    4d92:	bcs.n	4da4 <ExFatFile::write(void const*, unsigned int)+0x11c>
      m_flags |= FILE_FLAG_DIR_DIRTY;
    4d94:	ldrb.w	r1, [r4, #51]	; 0x33
    4d98:	orn	r1, r1, #127	; 0x7f
      m_validLength = m_curPosition;
    4d9c:	strd	r3, r2, [r4, #16]
      m_flags |= FILE_FLAG_DIR_DIRTY;
    4da0:	strb.w	r1, [r4, #51]	; 0x33
  while (toWrite) {
    4da4:	cmp	r5, #0
    4da6:	bne.n	4cb0 <ExFatFile::write(void const*, unsigned int)+0x28>
  if (m_curPosition > m_dataLength) {
    4da8:	ldrd	r0, r1, [r4, #8]
    4dac:	cmp	r0, r3
    4dae:	sbcs	r1, r2
    4db0:	bcc.w	4ee0 <ExFatFile::write(void const*, unsigned int)+0x258>
    m_dataLength = m_curPosition;
    // update fileSize and insure sync will update dir entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    4db4:	ldr	r3, [pc, #332]	; (4f04 <ExFatFile::write(void const*, unsigned int)+0x27c>)
    4db6:	ldr	r3, [r3, #0]
    4db8:	cmp	r3, #0
    4dba:	beq.w	4ef8 <ExFatFile::write(void const*, unsigned int)+0x270>
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    4dbe:	ldrb.w	r3, [r4, #51]	; 0x33
    4dc2:	mov	r0, r9
    4dc4:	orn	r3, r3, #127	; 0x7f
    4dc8:	strb.w	r3, [r4, #51]	; 0x33
    4dcc:	b.n	4dea <ExFatFile::write(void const*, unsigned int)+0x162>
    if (!seekSet(m_validLength)) {
    4dce:	ldrd	r2, r3, [r0, #16]
    4dd2:	bl	37c0 <ExFatFile::seekSet(unsigned long long)>
    4dd6:	cmp	r0, #0
    4dd8:	bne.w	4ca4 <ExFatFile::write(void const*, unsigned int)+0x1c>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
    4ddc:	ldrb.w	r3, [r4, #50]	; 0x32
  return 0;
    4de0:	movs	r0, #0
  m_error |= WRITE_ERROR;
    4de2:	orr.w	r3, r3, #1
    4de6:	strb.w	r3, [r4, #50]	; 0x32
}
    4dea:	add	sp, #12
    4dec:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
           ((cluster - 2) << m_sectorsPerClusterShift);
    4df0:	ldrb.w	r2, [r0, #1093]	; 0x445
    4df4:	subs	r1, #2
             (clusterOffset >> m_vol->bytesPerSectorShift());
    4df6:	mov.w	r8, r8, lsr #9
    sector = m_vol->clusterStartSector(m_curCluster) +
    4dfa:	ldr.w	r3, [r0, #1068]	; 0x42c
    4dfe:	lsls	r1, r2
    4e00:	add	r1, r8
    4e02:	add	r1, r3
    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
    4e04:	cmp	r7, #0
    4e06:	beq.n	4d26 <ExFatFile::write(void const*, unsigned int)+0x9e>
      n = m_vol->bytesPerSector() - sectorOffset;
    4e08:	rsb	r8, r7, #512	; 0x200
    return m_dataCache.prepare(sector, option);
    4e0c:	movs	r2, #1
    4e0e:	add.w	r0, r0, #528	; 0x210
    4e12:	cmp	r8, r5
    4e14:	it	cs
    4e16:	movcs	r8, r5
    4e18:	bl	29b8 <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    4e1c:	cmp	r0, #0
    4e1e:	beq.n	4ddc <ExFatFile::write(void const*, unsigned int)+0x154>
      memcpy(dst, src, n);
    4e20:	add	r0, r7
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    4e22:	add	r7, r8
      memcpy(dst, src, n);
    4e24:	mov	r2, r8
    4e26:	mov	r1, r6
    4e28:	bl	b09c <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    4e2c:	cmp.w	r7, #512	; 0x200
    4e30:	ldr	r0, [r4, #32]
    4e32:	bne.n	4d74 <ExFatFile::write(void const*, unsigned int)+0xec>
  bool dataCacheSync() { return m_dataCache.sync(); }
    4e34:	add.w	r0, r0, #528	; 0x210
    4e38:	bl	2a38 <FsCache::sync()>
        if (!m_vol->dataCacheSync()) {
    4e3c:	cmp	r0, #0
    4e3e:	bne.n	4d74 <ExFatFile::write(void const*, unsigned int)+0xec>
    4e40:	b.n	4ddc <ExFatFile::write(void const*, unsigned int)+0x154>
      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
    4e42:	ldr	r2, [r4, #4]
    4e44:	ldr	r3, [r4, #20]
    4e46:	str	r2, [sp, #0]
    4e48:	str	r3, [sp, #4]
    4e4a:	ldr	r2, [r4, #16]
    4e4c:	ldr	r3, [r4, #0]
    4e4e:	cmp	r3, r2
    4e50:	ldrd	r2, r3, [sp]
    4e54:	sbcs	r2, r3
    4e56:	bcs.n	4e7e <ExFatFile::write(void const*, unsigned int)+0x1f6>
        cacheOption = FsCache::CACHE_FOR_WRITE;
    4e58:	movs	r2, #1
    return m_dataCache.prepare(sector, option);
    4e5a:	add.w	r0, r0, #528	; 0x210
    4e5e:	bl	29b8 <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    4e62:	cmp	r0, #0
    4e64:	beq.n	4ddc <ExFatFile::write(void const*, unsigned int)+0x154>
      memcpy(dst, src, n);
    4e66:	mov	r2, r5
    4e68:	mov	r1, r6
    4e6a:	add	r0, r7
    m_curPosition += n;
    4e6c:	mov	r8, r5
      memcpy(dst, src, n);
    4e6e:	bl	b09c <memcpy>
    m_curPosition += n;
    4e72:	mov	r3, r5
    4e74:	b.n	4d76 <ExFatFile::write(void const*, unsigned int)+0xee>
        if (m_firstCluster == 0) {
    4e76:	ldr	r1, [r4, #28]
    4e78:	cbz	r1, 4ece <ExFatFile::write(void const*, unsigned int)+0x246>
          m_curCluster = m_firstCluster;
    4e7a:	str	r1, [r4, #24]
    4e7c:	b.n	4d18 <ExFatFile::write(void const*, unsigned int)+0x90>
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    4e7e:	movs	r2, #5
    4e80:	b.n	4e5a <ExFatFile::write(void const*, unsigned int)+0x1d2>
    if (isCached(sector)) {
    4e82:	ldr.w	r3, [r0, #536]	; 0x218
    4e86:	cmp	r3, r1
    4e88:	bne.n	4e98 <ExFatFile::write(void const*, unsigned int)+0x210>
    m_status = 0;
    4e8a:	movs	r3, #0
    4e8c:	strb.w	r3, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    4e90:	mov.w	r3, #4294967295
    4e94:	str.w	r3, [r0, #536]	; 0x218
    return m_blockDev->writeSector(sector, src);
    4e98:	ldr.w	r0, [r0, #532]	; 0x214
    4e9c:	mov	r2, r6
    4e9e:	ldr	r3, [r0, #0]
    4ea0:	ldr	r3, [r3, #32]
    4ea2:	blx	r3
      if (!m_vol->cacheSafeWrite(sector, src)) {
    4ea4:	cmp	r0, #0
    4ea6:	beq.n	4ddc <ExFatFile::write(void const*, unsigned int)+0x154>
    4ea8:	mov.w	r3, #512	; 0x200
      n = m_vol->bytesPerSector();
    4eac:	mov	r8, r3
    4eae:	b.n	4d76 <ExFatFile::write(void const*, unsigned int)+0xee>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    4eb0:	add.w	r2, r4, #24
    4eb4:	bl	40b8 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    4eb8:	cmp	r0, #0
    4eba:	blt.n	4ddc <ExFatFile::write(void const*, unsigned int)+0x154>
        if (fg == 0) {
    4ebc:	bne.n	4ec8 <ExFatFile::write(void const*, unsigned int)+0x240>
          if (!addCluster()) {
    4ebe:	mov	r0, r4
    4ec0:	bl	43d4 <ExFatFile::addCluster()>
    4ec4:	cmp	r0, #0
    4ec6:	beq.n	4ddc <ExFatFile::write(void const*, unsigned int)+0x154>
    sector = m_vol->clusterStartSector(m_curCluster) +
    4ec8:	ldr	r1, [r4, #24]
    4eca:	ldr	r0, [r4, #32]
    4ecc:	b.n	4d18 <ExFatFile::write(void const*, unsigned int)+0x90>
          if (!addCluster()) {
    4ece:	mov	r0, r4
    4ed0:	bl	43d4 <ExFatFile::addCluster()>
    4ed4:	cmp	r0, #0
    4ed6:	beq.n	4ddc <ExFatFile::write(void const*, unsigned int)+0x154>
          m_firstCluster = m_curCluster;
    4ed8:	ldr	r1, [r4, #24]
    sector = m_vol->clusterStartSector(m_curCluster) +
    4eda:	ldr	r0, [r4, #32]
          m_firstCluster = m_curCluster;
    4edc:	str	r1, [r4, #28]
    4ede:	b.n	4d18 <ExFatFile::write(void const*, unsigned int)+0x90>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    4ee0:	ldrb.w	r1, [r4, #51]	; 0x33
    4ee4:	mov	r0, r9
    m_dataLength = m_curPosition;
    4ee6:	strd	r3, r2, [r4, #8]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    4eea:	orn	r3, r1, #127	; 0x7f
    4eee:	strb.w	r3, [r4, #51]	; 0x33
}
    4ef2:	add	sp, #12
    4ef4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    4ef8:	mov	r0, r9
    4efa:	b.n	4dea <ExFatFile::write(void const*, unsigned int)+0x162>
  if (m_curPosition > m_dataLength) {
    4efc:	ldrd	r3, r2, [r4]
    4f00:	b.n	4da8 <ExFatFile::write(void const*, unsigned int)+0x120>
    4f02:	nop
    4f04:	.word	0x2000771c

00004f08 <FatFormatter::writeMbr()>:
    return false;
  }
  return initFatDir(32, 2 * m_fatSize + m_sectorsPerCluster);
}
//------------------------------------------------------------------------------
bool FatFormatter::writeMbr() {
    4f08:	push	{r4, r5, r6, lr}
    4f0a:	mov	r4, r0
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
    4f0c:	mov.w	r2, #512	; 0x200
    4f10:	movs	r1, #0
    4f12:	ldr	r0, [r0, #36]	; 0x24
    4f14:	bl	10104 <memset>
  MbrSector_t* mbr = reinterpret_cast<MbrSector_t*>(m_secBuf);
    4f18:	ldr	r5, [r4, #36]	; 0x24

#if USE_LBA_TO_CHS
  lbaToMbrChs(mbr->part->beginCHS, m_capacityMB, m_relativeSectors);
    4f1a:	ldr	r2, [r4, #16]
    4f1c:	ldr	r1, [r4, #0]
    4f1e:	addw	r0, r5, #447	; 0x1bf
    4f22:	bl	28ec <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)>
  lbaToMbrChs(mbr->part->endCHS, m_capacityMB,
              m_relativeSectors + m_totalSectors - 1);
    4f26:	ldr	r3, [r4, #24]
    4f28:	ldr	r2, [r4, #16]
  lbaToMbrChs(mbr->part->endCHS, m_capacityMB,
    4f2a:	addw	r0, r5, #451	; 0x1c3
    4f2e:	ldr	r1, [r4, #0]
              m_relativeSectors + m_totalSectors - 1);
    4f30:	add	r2, r3
  lbaToMbrChs(mbr->part->endCHS, m_capacityMB,
    4f32:	subs	r2, #1
    4f34:	bl	28ec <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)>
  mbr->part->endCHS[0] = 0XFE;
  mbr->part->endCHS[1] = 0XFF;
  mbr->part->endCHS[2] = 0XFF;
#endif  // USE_LBA_TO_CHS

  mbr->part->type = m_partType;
    4f38:	ldrb.w	r2, [r4, #42]	; 0x2a
  *reinterpret_cast<uint16_t*>(dst) = src;
    4f3c:	movw	r3, #43605	; 0xaa55
    4f40:	strb.w	r2, [r5, #450]	; 0x1c2
  setLe32(mbr->part->relativeSectors, m_relativeSectors);
    4f44:	ldr	r2, [r4, #16]
  setLe32(mbr->part->totalSectors, m_totalSectors);
  setLe16(mbr->signature, MBR_SIGNATURE);
  return m_dev->writeSector(0, m_secBuf);
    4f46:	ldr	r0, [r4, #28]
  *reinterpret_cast<uint32_t*>(dst) = src;
    4f48:	str.w	r2, [r5, #454]	; 0x1c6
    4f4c:	ldr	r2, [r4, #36]	; 0x24
  setLe32(mbr->part->totalSectors, m_totalSectors);
    4f4e:	ldr	r1, [r4, #24]
  *reinterpret_cast<uint16_t*>(dst) = src;
    4f50:	strh.w	r3, [r5, #510]	; 0x1fe
  return m_dev->writeSector(0, m_secBuf);
    4f54:	ldr	r3, [r0, #0]
  *reinterpret_cast<uint32_t*>(dst) = src;
    4f56:	str.w	r1, [r5, #458]	; 0x1ca
    4f5a:	movs	r1, #0
    4f5c:	ldr	r3, [r3, #32]
}
    4f5e:	ldmia.w	sp!, {r4, r5, r6, lr}
  return m_dev->writeSector(0, m_secBuf);
    4f62:	bx	r3

00004f64 <FatFormatter::makeFat16()>:
bool FatFormatter::makeFat16() {
    4f64:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    nc = (m_sectorCount - m_dataStart) / m_sectorsPerCluster;
    4f68:	ldr	r6, [r0, #20]
  for (m_dataStart = 2 * BU16;; m_dataStart += BU16) {
    4f6a:	mov.w	r3, #256	; 0x100
    nc = (m_sectorCount - m_dataStart) / m_sectorsPerCluster;
    4f6e:	ldrb.w	lr, [r0, #43]	; 0x2b
bool FatFormatter::makeFat16() {
    4f72:	mov	r4, r0
    nc = (m_sectorCount - m_dataStart) / m_sectorsPerCluster;
    4f74:	sub.w	r2, r6, #256	; 0x100
  PbsFat_t* pbs = reinterpret_cast<PbsFat_t*>(m_secBuf);
    4f78:	ldr	r5, [r0, #36]	; 0x24
  for (m_dataStart = 2 * BU16;; m_dataStart += BU16) {
    4f7a:	str	r3, [r0, #4]
    nc = (m_sectorCount - m_dataStart) / m_sectorsPerCluster;
    4f7c:	udiv	r2, r2, lr
    m_fatSize = (nc + 2 + (BYTES_PER_SECTOR / 2) - 1) / (BYTES_PER_SECTOR / 2);
    4f80:	addw	r0, r2, #257	; 0x101
    4f84:	lsrs	r0, r0, #8
    4f86:	str	r0, [r4, #8]
    uint32_t r = BU16 + 1 + 2 * m_fatSize + FAT16_ROOT_SECTOR_COUNT;
    4f88:	lsls	r0, r0, #1
    4f8a:	add.w	ip, r0, #161	; 0xa1
    if (m_dataStart >= r) {
    4f8e:	cmp	ip, r3
    4f90:	bls.n	4fae <FatFormatter::makeFat16()+0x4a>
  for (m_dataStart = 2 * BU16;; m_dataStart += BU16) {
    4f92:	adds	r3, #128	; 0x80
    nc = (m_sectorCount - m_dataStart) / m_sectorsPerCluster;
    4f94:	subs	r2, r6, r3
    4f96:	udiv	r2, r2, lr
    m_fatSize = (nc + 2 + (BYTES_PER_SECTOR / 2) - 1) / (BYTES_PER_SECTOR / 2);
    4f9a:	addw	r1, r2, #257	; 0x101
    4f9e:	lsrs	r1, r1, #8
    uint32_t r = BU16 + 1 + 2 * m_fatSize + FAT16_ROOT_SECTOR_COUNT;
    4fa0:	lsls	r0, r1, #1
    4fa2:	add.w	ip, r0, #161	; 0xa1
    if (m_dataStart >= r) {
    4fa6:	cmp	r3, ip
    4fa8:	bcc.n	4f92 <FatFormatter::makeFat16()+0x2e>
    4faa:	strd	r3, r1, [r4, #4]
      m_relativeSectors = m_dataStart - r + BU16;
    4fae:	sub.w	r3, r3, ip
  if (nc < 4085 || nc >= 65525) {
    4fb2:	subw	r1, r2, #4085	; 0xff5
      m_relativeSectors = m_dataStart - r + BU16;
    4fb6:	add.w	r6, r3, #128	; 0x80
  if (nc < 4085 || nc >= 65525) {
    4fba:	cmp.w	r1, #61440	; 0xf000
      m_relativeSectors = m_dataStart - r + BU16;
    4fbe:	str	r6, [r4, #16]
  if (nc < 4085 || nc >= 65525) {
    4fc0:	bcs.w	50e2 <FatFormatter::makeFat16()+0x17e>
      nc * m_sectorsPerCluster + 2 * m_fatSize + m_reservedSectorCount + 32;
    4fc4:	adds	r0, #33	; 0x21
  m_fatStart = m_relativeSectors + m_reservedSectorCount;
    4fc6:	adds	r3, #129	; 0x81
      nc * m_sectorsPerCluster + 2 * m_fatSize + m_reservedSectorCount + 32;
    4fc8:	mla	r0, r2, lr, r0
  m_fatStart = m_relativeSectors + m_reservedSectorCount;
    4fcc:	str	r3, [r4, #12]
    m_partType = 0X06;
    4fce:	cmp.w	r0, #65536	; 0x10000
  m_totalSectors =
    4fd2:	str	r0, [r4, #24]
  if (!writeMbr()) {
    4fd4:	mov	r0, r4
    m_partType = 0X06;
    4fd6:	ite	cc
    4fd8:	movcc	r3, #4
    4fda:	movcs	r3, #6
    4fdc:	strb.w	r3, [r4, #42]	; 0x2a
  m_reservedSectorCount = 1;
    4fe0:	movs	r3, #1
    4fe2:	strh	r3, [r4, #40]	; 0x28
  if (!writeMbr()) {
    4fe4:	bl	4f08 <FatFormatter::writeMbr()>
    4fe8:	cbnz	r0, 4ff0 <FatFormatter::makeFat16()+0x8c>
}
    4fea:	movs	r0, #0
    4fec:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  PbsFat_t* pbs = reinterpret_cast<PbsFat_t*>(m_secBuf);
    4ff0:	ldr	r3, [r4, #36]	; 0x24
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
    4ff2:	mov.w	r6, #512	; 0x200
    4ff6:	movs	r1, #0
  pbs->bpb.bpb16.fatCount = 2;
    4ff8:	movs	r7, #2
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
    4ffa:	mov	r2, r6
    4ffc:	mov	r0, r3
    4ffe:	bl	10104 <memset>
  pbs->jmpInstruction[0] = 0XEB;
    5002:	movw	r2, #30443	; 0x76eb
  *reinterpret_cast<uint16_t*>(dst) = src;
    5006:	strh.w	r6, [r0, #11]
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
    500a:	mov	r3, r0
  pbs->jmpInstruction[0] = 0XEB;
    500c:	strh	r2, [r0, #0]
  pbs->jmpInstruction[2] = 0X90;
    500e:	movs	r2, #144	; 0x90
  pbs->bpb.bpb16.physicalDriveNumber = 0X80;
    5010:	mov.w	ip, #128	; 0x80
  pbs->jmpInstruction[2] = 0X90;
    5014:	strb	r2, [r0, #2]
    pbs->oemName[i] = ' ';
    5016:	mov.w	r2, #538976288	; 0x20202020
    501a:	str.w	r2, [r0, #3]
    501e:	str.w	r2, [r0, #7]
  pbs->bpb.bpb16.sectorsPerCluster = m_sectorsPerCluster;
    5022:	ldrb.w	r1, [r4, #43]	; 0x2b
    5026:	strb	r1, [r0, #13]
  pbs->bpb.bpb16.mediaType = 0XF8;
    5028:	movs	r0, #248	; 0xf8
  setLe16(pbs->bpb.bpb16.reservedSectorCount, m_reservedSectorCount);
    502a:	ldrh	r1, [r4, #40]	; 0x28
  pbs->bpb.bpb16.fatCount = 2;
    502c:	strb	r7, [r3, #16]
  pbs->bpb.bpb16.extSignature = EXTENDED_BOOT_SIGNATURE;
    502e:	movs	r7, #41	; 0x29
  pbs->bpb.bpb16.mediaType = 0XF8;
    5030:	strb	r0, [r3, #21]
    5032:	movw	r0, #43605	; 0xaa55
    5036:	strh	r1, [r3, #14]
  setLe32(pbs->bpb.bpb16.hidddenSectors, m_relativeSectors);
    5038:	ldr	r1, [r4, #16]
  *reinterpret_cast<uint32_t*>(dst) = src;
    503a:	str	r1, [r3, #28]
  setLe32(pbs->bpb.bpb16.totalSectors32, m_totalSectors);
    503c:	ldr	r1, [r4, #24]
  *reinterpret_cast<uint16_t*>(dst) = src;
    503e:	strh.w	r0, [r3, #510]	; 0x1fe
  *reinterpret_cast<uint32_t*>(dst) = src;
    5042:	str	r1, [r3, #32]
  pbs->bpb.bpb16.volumeType[4] = '6';
    5044:	movs	r1, #54	; 0x36
  pbs->bpb.bpb16.volumeType[0] = 'F';
    5046:	ldr	r0, [pc, #256]	; (5148 <FatFormatter::makeFat16()+0x1e4>)
  setLe16(pbs->bpb.bpb16.sectorsPerFat16, m_fatSize);
    5048:	ldr	r3, [r4, #8]
    pbs->bpb.bpb16.volumeLabel[i] = ' ';
    504a:	str.w	r2, [r5, #47]	; 0x2f
    504e:	str.w	r2, [r5, #43]	; 0x2b
    5052:	str.w	r2, [r5, #50]	; 0x32
  pbs->bpb.bpb16.physicalDriveNumber = 0X80;
    5056:	strb.w	ip, [r5, #36]	; 0x24
  pbs->bpb.bpb16.extSignature = EXTENDED_BOOT_SIGNATURE;
    505a:	strb.w	r7, [r5, #38]	; 0x26
  pbs->bpb.bpb16.volumeType[0] = 'F';
    505e:	str.w	r0, [r5, #54]	; 0x36
  pbs->bpb.bpb16.volumeType[4] = '6';
    5062:	strb.w	r1, [r5, #58]	; 0x3a
  if (!m_dev->writeSector(m_relativeSectors, m_secBuf)) {
    5066:	ldr	r0, [r4, #28]
    5068:	ldr	r2, [pc, #224]	; (514c <FatFormatter::makeFat16()+0x1e8>)
  setLe16(pbs->bpb.bpb16.sectorsPerFat16, m_fatSize);
    506a:	strh	r3, [r5, #22]
  if (!m_dev->writeSector(m_relativeSectors, m_secBuf)) {
    506c:	ldr	r3, [r0, #0]
  *reinterpret_cast<uint16_t*>(dst) = src;
    506e:	strh.w	r6, [r5, #17]
    5072:	ldr	r3, [r3, #32]
  *reinterpret_cast<uint32_t*>(dst) = src;
    5074:	str.w	r2, [r5, #39]	; 0x27
    5078:	ldr	r2, [r4, #36]	; 0x24
    507a:	ldr	r1, [r4, #16]
    507c:	blx	r3
    507e:	cmp	r0, #0
    5080:	beq.n	4fea <FatFormatter::makeFat16()+0x86>
  return initFatDir(16, m_dataStart - m_fatStart);
    5082:	ldr	r7, [r4, #4]
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
    5084:	mov	r2, r6
  return initFatDir(16, m_dataStart - m_fatStart);
    5086:	ldr	r3, [r4, #12]
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
    5088:	movs	r1, #0
    508a:	ldr	r0, [r4, #36]	; 0x24
  return initFatDir(16, m_dataStart - m_fatStart);
    508c:	subs	r7, r7, r3
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
    508e:	bl	10104 <memset>
  writeMsg("Writing FAT ");
    5092:	ldr	r0, [r4, #32]
    5094:	cmp	r0, #0
    5096:	beq.n	5140 <FatFormatter::makeFat16()+0x1dc>
    5098:	ldr	r3, [r0, #0]
    509a:	movs	r2, #12
    509c:	ldr	r1, [pc, #176]	; (5150 <FatFormatter::makeFat16()+0x1ec>)
    509e:	ldr	r3, [r3, #4]
    50a0:	blx	r3
  for (uint32_t i = 1; i < sectorCount; i++) {
    50a2:	cmp	r7, #1
    50a4:	bls.n	50f8 <FatFormatter::makeFat16()+0x194>
    if ((i % (sectorCount / 32)) == 0) {
    50a6:	lsrs	r6, r7, #5
    50a8:	movs	r5, #1
    50aa:	ldr.w	r8, [pc, #176]	; 515c <FatFormatter::makeFat16()+0x1f8>
    50ae:	b.n	50ce <FatFormatter::makeFat16()+0x16a>
    50b0:	udiv	r3, r5, r6
    50b4:	mls	r3, r6, r3, r5
  for (uint32_t i = 1; i < sectorCount; i++) {
    50b8:	adds	r5, #1
    if ((i % (sectorCount / 32)) == 0) {
    50ba:	cbnz	r3, 50ca <FatFormatter::makeFat16()+0x166>
      writeMsg(".");
    50bc:	ldr	r0, [r4, #32]
    50be:	cbz	r0, 50ca <FatFormatter::makeFat16()+0x166>
    50c0:	ldr	r3, [r0, #0]
    50c2:	movs	r2, #1
    50c4:	mov	r1, r8
    50c6:	ldr	r3, [r3, #4]
    50c8:	blx	r3
  for (uint32_t i = 1; i < sectorCount; i++) {
    50ca:	cmp	r7, r5
    50cc:	bls.n	50f8 <FatFormatter::makeFat16()+0x194>
    if (!m_dev->writeSector(m_fatStart + i, m_secBuf)) {
    50ce:	ldr	r0, [r4, #28]
    50d0:	ldr	r1, [r4, #12]
    50d2:	ldr	r3, [r0, #0]
    50d4:	ldr	r2, [r4, #36]	; 0x24
    50d6:	add	r1, r5
    50d8:	ldr	r3, [r3, #32]
    50da:	blx	r3
    50dc:	cmp	r0, #0
    50de:	bne.n	50b0 <FatFormatter::makeFat16()+0x14c>
    50e0:	b.n	4fea <FatFormatter::makeFat16()+0x86>
    writeMsg("Bad cluster count\r\n");
    50e2:	ldr	r0, [r4, #32]
    50e4:	cmp	r0, #0
    50e6:	beq.n	4fea <FatFormatter::makeFat16()+0x86>
    50e8:	ldr	r3, [r0, #0]
    50ea:	movs	r2, #19
    50ec:	ldr	r1, [pc, #100]	; (5154 <FatFormatter::makeFat16()+0x1f0>)
    50ee:	ldr	r3, [r3, #4]
    50f0:	blx	r3
}
    50f2:	movs	r0, #0
    50f4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  writeMsg("\r\n");
    50f8:	ldr	r0, [r4, #32]
    50fa:	cbz	r0, 5106 <FatFormatter::makeFat16()+0x1a2>
    50fc:	ldr	r3, [r0, #0]
    50fe:	movs	r2, #2
    5100:	ldr	r1, [pc, #84]	; (5158 <FatFormatter::makeFat16()+0x1f4>)
    5102:	ldr	r3, [r3, #4]
    5104:	blx	r3
  m_secBuf[0] = 0XF8;
    5106:	ldr	r2, [r4, #36]	; 0x24
    5108:	movs	r1, #248	; 0xf8
    m_secBuf[i] = 0XFF;
    510a:	movs	r3, #255	; 0xff
  m_secBuf[0] = 0XF8;
    510c:	strb	r1, [r2, #0]
    m_secBuf[i] = 0XFF;
    510e:	ldr	r2, [r4, #36]	; 0x24
    5110:	strb	r3, [r2, #1]
    5112:	ldr	r2, [r4, #36]	; 0x24
    5114:	strb	r3, [r2, #2]
    5116:	ldr	r2, [r4, #36]	; 0x24
    5118:	strb	r3, [r2, #3]
  return m_dev->writeSector(m_fatStart, m_secBuf) &&
    511a:	ldr	r0, [r4, #28]
    511c:	ldr	r2, [r4, #36]	; 0x24
    511e:	ldr	r3, [r0, #0]
    5120:	ldr	r1, [r4, #12]
    5122:	ldr	r3, [r3, #32]
    5124:	blx	r3
    5126:	cmp	r0, #0
    5128:	beq.w	4fea <FatFormatter::makeFat16()+0x86>
         m_dev->writeSector(m_fatStart + m_fatSize, m_secBuf);
    512c:	ldr	r0, [r4, #28]
    512e:	ldr	r2, [r4, #36]	; 0x24
    5130:	ldrd	r3, r1, [r4, #8]
}
    5134:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
         m_dev->writeSector(m_fatStart + m_fatSize, m_secBuf);
    5138:	add	r1, r3
    513a:	ldr	r3, [r0, #0]
    513c:	ldr	r3, [r3, #32]
    513e:	bx	r3
  for (uint32_t i = 1; i < sectorCount; i++) {
    5140:	cmp	r7, #1
    5142:	bhi.n	50a6 <FatFormatter::makeFat16()+0x142>
    5144:	b.n	5106 <FatFormatter::makeFat16()+0x1a2>
    5146:	nop
    5148:	.word	0x31544146
    514c:	.word	0x0012d687
    5150:	.word	0x200006d4
    5154:	.word	0x200006a8
    5158:	.word	0x200006f8
    515c:	.word	0x2000138c

00005160 <FatFormatter::makeFat32()>:
bool FatFormatter::makeFat32() {
    5160:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    nc = (m_sectorCount - m_dataStart) / m_sectorsPerCluster;
    5164:	ldr	r6, [r0, #20]
  m_relativeSectors = BU32;
    5166:	mov.w	r3, #8192	; 0x2000
    nc = (m_sectorCount - m_dataStart) / m_sectorsPerCluster;
    516a:	ldrb.w	ip, [r0, #43]	; 0x2b
  for (m_dataStart = 2 * BU32;; m_dataStart += BU32) {
    516e:	mov.w	r2, #16384	; 0x4000
    nc = (m_sectorCount - m_dataStart) / m_sectorsPerCluster;
    5172:	sub.w	r1, r6, #16384	; 0x4000
  m_relativeSectors = BU32;
    5176:	str	r3, [r0, #16]
    uint32_t r = m_relativeSectors + 9 + 2 * m_fatSize;
    5178:	movw	lr, #8201	; 0x2009
bool FatFormatter::makeFat32() {
    517c:	mov	r4, r0
  PbsFat_t* pbs = reinterpret_cast<PbsFat_t*>(m_secBuf);
    517e:	ldr	r5, [r0, #36]	; 0x24
  for (m_dataStart = 2 * BU32;; m_dataStart += BU32) {
    5180:	str	r2, [r0, #4]
    nc = (m_sectorCount - m_dataStart) / m_sectorsPerCluster;
    5182:	udiv	r1, r1, ip
    m_fatSize = (nc + 2 + (BYTES_PER_SECTOR / 4) - 1) / (BYTES_PER_SECTOR / 4);
    5186:	add.w	r3, r1, #129	; 0x81
    518a:	lsrs	r3, r3, #7
    518c:	str	r3, [r0, #8]
    uint32_t r = m_relativeSectors + 9 + 2 * m_fatSize;
    518e:	add.w	r0, lr, r3, lsl #1
    if (m_dataStart >= r) {
    5192:	cmp	r0, r2
    5194:	bls.w	538c <FatFormatter::makeFat32()+0x22c>
  for (m_dataStart = 2 * BU32;; m_dataStart += BU32) {
    5198:	add.w	r2, r2, #8192	; 0x2000
    nc = (m_sectorCount - m_dataStart) / m_sectorsPerCluster;
    519c:	subs	r1, r6, r2
    519e:	udiv	r1, r1, ip
    m_fatSize = (nc + 2 + (BYTES_PER_SECTOR / 4) - 1) / (BYTES_PER_SECTOR / 4);
    51a2:	add.w	r3, r1, #129	; 0x81
    51a6:	lsrs	r3, r3, #7
    uint32_t r = m_relativeSectors + 9 + 2 * m_fatSize;
    51a8:	add.w	r0, lr, r3, lsl #1
    51ac:	lsls	r7, r3, #1
    if (m_dataStart >= r) {
    51ae:	cmp	r2, r0
    51b0:	bcc.n	5198 <FatFormatter::makeFat32()+0x38>
    51b2:	strd	r2, r3, [r4, #4]
  if (nc < 65525) {
    51b6:	movw	r3, #65524	; 0xfff4
    51ba:	cmp	r1, r3
    51bc:	bls.w	5374 <FatFormatter::makeFat32()+0x214>
  m_totalSectors = nc * m_sectorsPerCluster + m_dataStart - m_relativeSectors;
    51c0:	mla	ip, r1, ip, r2
  m_reservedSectorCount = m_dataStart - m_relativeSectors - 2 * m_fatSize;
    51c4:	sub.w	r2, r2, #8192	; 0x2000
  if (!writeMbr()) {
    51c8:	mov	r0, r4
  m_reservedSectorCount = m_dataStart - m_relativeSectors - 2 * m_fatSize;
    51ca:	subs	r2, r2, r7
    51cc:	uxth	r2, r2
  m_fatStart = m_relativeSectors + m_reservedSectorCount;
    51ce:	add.w	r3, r2, #8192	; 0x2000
  m_reservedSectorCount = m_dataStart - m_relativeSectors - 2 * m_fatSize;
    51d2:	strh	r2, [r4, #40]	; 0x28
  if ((m_relativeSectors + m_totalSectors) <= 16450560) {
    51d4:	ldr	r2, [pc, #552]	; (5400 <FatFormatter::makeFat32()+0x2a0>)
  m_fatStart = m_relativeSectors + m_reservedSectorCount;
    51d6:	str	r3, [r4, #12]
  m_totalSectors = nc * m_sectorsPerCluster + m_dataStart - m_relativeSectors;
    51d8:	sub.w	r3, ip, #8192	; 0x2000
    m_partType = 0X0C;
    51dc:	cmp	ip, r2
    51de:	ite	ls
    51e0:	movls.w	ip, #11
    51e4:	movhi.w	ip, #12
  m_totalSectors = nc * m_sectorsPerCluster + m_dataStart - m_relativeSectors;
    51e8:	str	r3, [r4, #24]
  if ((m_relativeSectors + m_totalSectors) <= 16450560) {
    51ea:	strb.w	ip, [r4, #42]	; 0x2a
  if (!writeMbr()) {
    51ee:	bl	4f08 <FatFormatter::writeMbr()>
    51f2:	cbnz	r0, 51fa <FatFormatter::makeFat32()+0x9a>
}
    51f4:	movs	r0, #0
    51f6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  PbsFat_t* pbs = reinterpret_cast<PbsFat_t*>(m_secBuf);
    51fa:	ldr	r3, [r4, #36]	; 0x24
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
    51fc:	mov.w	r6, #512	; 0x200
    5200:	movs	r1, #0
  pbs->bpb.bpb16.mediaType = 0XF8;
    5202:	movs	r7, #248	; 0xf8
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
    5204:	mov	r2, r6
    5206:	mov	r0, r3
    5208:	bl	10104 <memset>
  pbs->jmpInstruction[0] = 0XEB;
    520c:	movw	r2, #30443	; 0x76eb
  *reinterpret_cast<uint16_t*>(dst) = src;
    5210:	strh.w	r6, [r0, #11]
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
    5214:	mov	r3, r0
  pbs->jmpInstruction[0] = 0XEB;
    5216:	strh	r2, [r0, #0]
  pbs->jmpInstruction[2] = 0X90;
    5218:	movs	r2, #144	; 0x90
  pbs->bpb.bpb16.fatCount = 2;
    521a:	movs	r1, #2
  pbs->bpb.bpb32.physicalDriveNumber = 0X80;
    521c:	mov.w	lr, #128	; 0x80
  pbs->jmpInstruction[2] = 0X90;
    5220:	strb	r2, [r0, #2]
    pbs->oemName[i] = ' ';
    5222:	mov.w	r2, #538976288	; 0x20202020
  pbs->bpb.bpb32.extSignature = EXTENDED_BOOT_SIGNATURE;
    5226:	mov.w	ip, #41	; 0x29
    pbs->oemName[i] = ' ';
    522a:	str.w	r2, [r0, #3]
    522e:	str.w	r2, [r0, #7]
  pbs->bpb.bpb16.sectorsPerCluster = m_sectorsPerCluster;
    5232:	ldrb.w	r0, [r4, #43]	; 0x2b
    5236:	strb	r0, [r3, #13]
  setLe16(pbs->bpb.bpb16.reservedSectorCount, m_reservedSectorCount);
    5238:	ldrh	r0, [r4, #40]	; 0x28
  pbs->bpb.bpb16.mediaType = 0XF8;
    523a:	strb	r7, [r3, #21]
    523c:	movw	r7, #43605	; 0xaa55
  pbs->bpb.bpb16.fatCount = 2;
    5240:	strb	r1, [r3, #16]
    5242:	strh	r0, [r3, #14]
  setLe32(pbs->bpb.bpb16.hidddenSectors, m_relativeSectors);
    5244:	ldr	r0, [r4, #16]
  *reinterpret_cast<uint32_t*>(dst) = src;
    5246:	str	r0, [r3, #28]
  setLe32(pbs->bpb.bpb16.totalSectors32, m_totalSectors);
    5248:	ldr	r0, [r4, #24]
  *reinterpret_cast<uint16_t*>(dst) = src;
    524a:	strh.w	r7, [r3, #510]	; 0x1fe
  *reinterpret_cast<uint32_t*>(dst) = src;
    524e:	str	r0, [r3, #32]
  pbs->bpb.bpb32.volumeType[4] = '2';
    5250:	movs	r0, #50	; 0x32
  setLe32(pbs->bpb.bpb32.sectorsPerFat32, m_fatSize);
    5252:	ldr	r3, [r4, #8]
  pbs->bpb.bpb32.volumeType[0] = 'F';
    5254:	ldr	r7, [pc, #428]	; (5404 <FatFormatter::makeFat32()+0x2a4>)
    pbs->bpb.bpb32.volumeLabel[i] = ' ';
    5256:	str.w	r2, [r5, #75]	; 0x4b
    525a:	str.w	r2, [r5, #71]	; 0x47
    525e:	str.w	r2, [r5, #78]	; 0x4e
  pbs->bpb.bpb32.physicalDriveNumber = 0X80;
    5262:	strb.w	lr, [r5, #64]	; 0x40
  pbs->bpb.bpb32.extSignature = EXTENDED_BOOT_SIGNATURE;
    5266:	strb.w	ip, [r5, #66]	; 0x42
  pbs->bpb.bpb32.volumeType[0] = 'F';
    526a:	str.w	r7, [r5, #82]	; 0x52
  pbs->bpb.bpb32.volumeType[4] = '2';
    526e:	strb.w	r0, [r5, #86]	; 0x56
    5272:	str	r3, [r5, #36]	; 0x24
  if (!m_dev->writeSector(m_relativeSectors, m_secBuf) ||
    5274:	ldr	r0, [r4, #28]
    5276:	ldr	r3, [pc, #400]	; (5408 <FatFormatter::makeFat32()+0x2a8>)
  *reinterpret_cast<uint16_t*>(dst) = src;
    5278:	ldr	r2, [pc, #400]	; (540c <FatFormatter::makeFat32()+0x2ac>)
  *reinterpret_cast<uint32_t*>(dst) = src;
    527a:	str.w	r3, [r5, #67]	; 0x43
    527e:	ldr	r3, [r0, #0]
  *reinterpret_cast<uint16_t*>(dst) = src;
    5280:	str	r2, [r5, #48]	; 0x30
    5282:	ldr	r3, [r3, #32]
    5284:	ldr	r2, [r4, #36]	; 0x24
  *reinterpret_cast<uint32_t*>(dst) = src;
    5286:	str	r1, [r5, #44]	; 0x2c
    5288:	ldr	r1, [r4, #16]
    528a:	blx	r3
    528c:	cmp	r0, #0
    528e:	beq.n	51f4 <FatFormatter::makeFat32()+0x94>
      !m_dev->writeSector(m_relativeSectors + 6, m_secBuf)) {
    5290:	ldr	r0, [r4, #28]
    5292:	ldr	r1, [r4, #16]
    5294:	ldr	r3, [r0, #0]
    5296:	adds	r1, #6
    5298:	ldr	r2, [r4, #36]	; 0x24
    529a:	ldr	r3, [r3, #32]
    529c:	blx	r3
  if (!m_dev->writeSector(m_relativeSectors, m_secBuf) ||
    529e:	cmp	r0, #0
    52a0:	beq.n	51f4 <FatFormatter::makeFat32()+0x94>
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
    52a2:	mov	r2, r6
    52a4:	movs	r1, #0
    52a6:	ldr	r0, [r4, #36]	; 0x24
    52a8:	bl	10104 <memset>
  if (!m_dev->writeSector(m_relativeSectors + 2, m_secBuf) ||
    52ac:	ldr	r0, [r4, #28]
    52ae:	ldr	r3, [pc, #352]	; (5410 <FatFormatter::makeFat32()+0x2b0>)
    52b0:	ldr	r2, [r4, #36]	; 0x24
    52b2:	str.w	r3, [r5, #508]	; 0x1fc
    52b6:	ldr	r3, [r0, #0]
    52b8:	ldr	r1, [r4, #16]
    52ba:	ldr	r3, [r3, #32]
    52bc:	adds	r1, #2
    52be:	blx	r3
    52c0:	cmp	r0, #0
    52c2:	beq.n	51f4 <FatFormatter::makeFat32()+0x94>
      !m_dev->writeSector(m_relativeSectors + 8, m_secBuf)) {
    52c4:	ldr	r0, [r4, #28]
    52c6:	ldr	r1, [r4, #16]
    52c8:	ldr	r3, [r0, #0]
    52ca:	adds	r1, #8
    52cc:	ldr	r2, [r4, #36]	; 0x24
    52ce:	ldr	r3, [r3, #32]
    52d0:	blx	r3
  if (!m_dev->writeSector(m_relativeSectors + 2, m_secBuf) ||
    52d2:	cmp	r0, #0
    52d4:	beq.n	51f4 <FatFormatter::makeFat32()+0x94>
    52d6:	mov.w	r3, #4294967295
  if (!m_dev->writeSector(m_relativeSectors + 1, m_secBuf) ||
    52da:	ldr	r0, [r4, #28]
    52dc:	ldr	r2, [pc, #308]	; (5414 <FatFormatter::makeFat32()+0x2b4>)
    52de:	strd	r3, r3, [r5, #488]	; 0x1e8
    52e2:	ldr	r3, [pc, #308]	; (5418 <FatFormatter::makeFat32()+0x2b8>)
    52e4:	str	r2, [r5, #0]
    52e6:	str.w	r3, [r5, #484]	; 0x1e4
    52ea:	ldr	r3, [r0, #0]
    52ec:	ldr	r1, [r4, #16]
    52ee:	ldr	r3, [r3, #32]
    52f0:	adds	r1, #1
    52f2:	ldr	r2, [r4, #36]	; 0x24
    52f4:	blx	r3
    52f6:	cmp	r0, #0
    52f8:	beq.w	51f4 <FatFormatter::makeFat32()+0x94>
      !m_dev->writeSector(m_relativeSectors + 7, m_secBuf)) {
    52fc:	ldr	r0, [r4, #28]
    52fe:	ldr	r1, [r4, #16]
    5300:	ldr	r3, [r0, #0]
    5302:	adds	r1, #7
    5304:	ldr	r2, [r4, #36]	; 0x24
    5306:	ldr	r3, [r3, #32]
    5308:	blx	r3
  if (!m_dev->writeSector(m_relativeSectors + 1, m_secBuf) ||
    530a:	cmp	r0, #0
    530c:	beq.w	51f4 <FatFormatter::makeFat32()+0x94>
  return initFatDir(32, 2 * m_fatSize + m_sectorsPerCluster);
    5310:	ldr	r3, [r4, #8]
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
    5312:	mov	r2, r6
  return initFatDir(32, 2 * m_fatSize + m_sectorsPerCluster);
    5314:	ldrb.w	r7, [r4, #43]	; 0x2b
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
    5318:	movs	r1, #0
    531a:	ldr	r0, [r4, #36]	; 0x24
  return initFatDir(32, 2 * m_fatSize + m_sectorsPerCluster);
    531c:	add.w	r7, r7, r3, lsl #1
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
    5320:	bl	10104 <memset>
  writeMsg("Writing FAT ");
    5324:	ldr	r0, [r4, #32]
    5326:	cmp	r0, #0
    5328:	beq.n	53f8 <FatFormatter::makeFat32()+0x298>
    532a:	ldr	r3, [r0, #0]
    532c:	movs	r2, #12
    532e:	ldr	r1, [pc, #236]	; (541c <FatFormatter::makeFat32()+0x2bc>)
    5330:	ldr	r3, [r3, #4]
    5332:	blx	r3
  for (uint32_t i = 1; i < sectorCount; i++) {
    5334:	cmp	r7, #1
    5336:	bls.n	5390 <FatFormatter::makeFat32()+0x230>
    if ((i % (sectorCount / 32)) == 0) {
    5338:	lsrs	r6, r7, #5
    533a:	movs	r5, #1
    533c:	ldr.w	r8, [pc, #232]	; 5428 <FatFormatter::makeFat32()+0x2c8>
    5340:	b.n	5360 <FatFormatter::makeFat32()+0x200>
    5342:	udiv	r3, r5, r6
    5346:	mls	r3, r6, r3, r5
  for (uint32_t i = 1; i < sectorCount; i++) {
    534a:	adds	r5, #1
    if ((i % (sectorCount / 32)) == 0) {
    534c:	cbnz	r3, 535c <FatFormatter::makeFat32()+0x1fc>
      writeMsg(".");
    534e:	ldr	r0, [r4, #32]
    5350:	cbz	r0, 535c <FatFormatter::makeFat32()+0x1fc>
    5352:	ldr	r3, [r0, #0]
    5354:	movs	r2, #1
    5356:	mov	r1, r8
    5358:	ldr	r3, [r3, #4]
    535a:	blx	r3
  for (uint32_t i = 1; i < sectorCount; i++) {
    535c:	cmp	r7, r5
    535e:	bls.n	5390 <FatFormatter::makeFat32()+0x230>
    if (!m_dev->writeSector(m_fatStart + i, m_secBuf)) {
    5360:	ldr	r0, [r4, #28]
    5362:	ldr	r1, [r4, #12]
    5364:	ldr	r3, [r0, #0]
    5366:	add	r1, r5
    5368:	ldr	r2, [r4, #36]	; 0x24
    536a:	ldr	r3, [r3, #32]
    536c:	blx	r3
    536e:	cmp	r0, #0
    5370:	bne.n	5342 <FatFormatter::makeFat32()+0x1e2>
    5372:	b.n	51f4 <FatFormatter::makeFat32()+0x94>
    writeMsg("Bad cluster count\r\n");
    5374:	ldr	r0, [r4, #32]
    5376:	cmp	r0, #0
    5378:	beq.w	51f4 <FatFormatter::makeFat32()+0x94>
    537c:	ldr	r3, [r0, #0]
    537e:	movs	r2, #19
    5380:	ldr	r1, [pc, #156]	; (5420 <FatFormatter::makeFat32()+0x2c0>)
    5382:	ldr	r3, [r3, #4]
    5384:	blx	r3
}
    5386:	movs	r0, #0
    5388:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    538c:	lsls	r7, r3, #1
    538e:	b.n	51b6 <FatFormatter::makeFat32()+0x56>
  writeMsg("\r\n");
    5390:	ldr	r0, [r4, #32]
    5392:	cbz	r0, 539e <FatFormatter::makeFat32()+0x23e>
    5394:	ldr	r3, [r0, #0]
    5396:	movs	r2, #2
    5398:	ldr	r1, [pc, #136]	; (5424 <FatFormatter::makeFat32()+0x2c4>)
    539a:	ldr	r3, [r3, #4]
    539c:	blx	r3
  m_secBuf[0] = 0XF8;
    539e:	ldr	r2, [r4, #36]	; 0x24
    53a0:	movs	r1, #248	; 0xf8
    m_secBuf[i] = 0XFF;
    53a2:	movs	r3, #255	; 0xff
  m_secBuf[0] = 0XF8;
    53a4:	strb	r1, [r2, #0]
    m_secBuf[i] = 0XFF;
    53a6:	ldr	r2, [r4, #36]	; 0x24
    53a8:	strb	r3, [r2, #1]
    53aa:	ldr	r2, [r4, #36]	; 0x24
    53ac:	strb	r3, [r2, #2]
    53ae:	ldr	r2, [r4, #36]	; 0x24
    53b0:	strb	r3, [r2, #3]
    53b2:	ldr	r2, [r4, #36]	; 0x24
    53b4:	strb	r3, [r2, #4]
    53b6:	ldr	r2, [r4, #36]	; 0x24
    53b8:	strb	r3, [r2, #5]
    53ba:	ldr	r2, [r4, #36]	; 0x24
    53bc:	strb	r3, [r2, #6]
    53be:	ldr	r2, [r4, #36]	; 0x24
    53c0:	strb	r3, [r2, #7]
    53c2:	ldr	r2, [r4, #36]	; 0x24
    53c4:	strb	r3, [r2, #8]
    53c6:	ldr	r2, [r4, #36]	; 0x24
    53c8:	strb	r3, [r2, #9]
    53ca:	ldr	r2, [r4, #36]	; 0x24
    53cc:	strb	r3, [r2, #10]
    53ce:	ldr	r2, [r4, #36]	; 0x24
    53d0:	strb	r3, [r2, #11]
  return m_dev->writeSector(m_fatStart, m_secBuf) &&
    53d2:	ldr	r0, [r4, #28]
    53d4:	ldr	r2, [r4, #36]	; 0x24
    53d6:	ldr	r3, [r0, #0]
    53d8:	ldr	r1, [r4, #12]
    53da:	ldr	r3, [r3, #32]
    53dc:	blx	r3
    53de:	cmp	r0, #0
    53e0:	beq.w	51f4 <FatFormatter::makeFat32()+0x94>
         m_dev->writeSector(m_fatStart + m_fatSize, m_secBuf);
    53e4:	ldr	r0, [r4, #28]
    53e6:	ldr	r2, [r4, #36]	; 0x24
    53e8:	ldrd	r3, r1, [r4, #8]
}
    53ec:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
         m_dev->writeSector(m_fatStart + m_fatSize, m_secBuf);
    53f0:	add	r1, r3
    53f2:	ldr	r3, [r0, #0]
    53f4:	ldr	r3, [r3, #32]
    53f6:	bx	r3
  for (uint32_t i = 1; i < sectorCount; i++) {
    53f8:	cmp	r7, #1
    53fa:	bhi.n	5338 <FatFormatter::makeFat32()+0x1d8>
    53fc:	b.n	539e <FatFormatter::makeFat32()+0x23e>
    53fe:	nop
    5400:	.word	0x00fb0400
    5404:	.word	0x33544146
    5408:	.word	0x0012d687
    540c:	.word	0x00060001
    5410:	.word	0xaa550000
    5414:	.word	0x41615252
    5418:	.word	0x61417272
    541c:	.word	0x200006d4
    5420:	.word	0x200006a8
    5424:	.word	0x200006f8
    5428:	.word	0x2000138c

0000542c <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)>:
bool FatFormatter::format(FsBlockDevice* dev, uint8_t* secBuf, print_t* pr) {
    542c:	push	{r3, r4, r5, lr}
    542e:	mov	r4, r0
  m_sectorCount = m_dev->sectorCount();
    5430:	ldr	r5, [r1, #0]
  m_dev = dev;
    5432:	str	r1, [r0, #28]
  m_sectorCount = m_dev->sectorCount();
    5434:	mov	r0, r1
  m_secBuf = secBuf;
    5436:	str	r2, [r4, #36]	; 0x24
  m_sectorCount = m_dev->sectorCount();
    5438:	ldr	r2, [r5, #24]
  m_pr = pr;
    543a:	str	r3, [r4, #32]
  m_sectorCount = m_dev->sectorCount();
    543c:	blx	r2
  m_capacityMB = (m_sectorCount + SECTORS_PER_MB - 1) / SECTORS_PER_MB;
    543e:	addw	r3, r0, #2047	; 0x7ff
  m_sectorCount = m_dev->sectorCount();
    5442:	str	r0, [r4, #20]
  m_capacityMB = (m_sectorCount + SECTORS_PER_MB - 1) / SECTORS_PER_MB;
    5444:	lsrs	r3, r3, #11
  if (m_capacityMB <= 6) {
    5446:	cmp	r3, #6
  m_capacityMB = (m_sectorCount + SECTORS_PER_MB - 1) / SECTORS_PER_MB;
    5448:	str	r3, [r4, #0]
  if (m_capacityMB <= 6) {
    544a:	bls.n	5496 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x6a>
  } else if (m_capacityMB <= 16) {
    544c:	cmp	r3, #16
    544e:	bhi.n	5478 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x4c>
    5450:	movs	r3, #2
  rtn = m_sectorCount < 0X400000 ? makeFat16() : makeFat32();
    5452:	cmp.w	r0, #4194304	; 0x400000
    m_sectorsPerCluster = 2;
    5456:	strb.w	r3, [r4, #43]	; 0x2b
  rtn = m_sectorCount < 0X400000 ? makeFat16() : makeFat32();
    545a:	mov	r0, r4
    545c:	bcs.n	54bc <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x90>
    545e:	bl	4f64 <FatFormatter::makeFat16()>
    5462:	mov	r5, r0
    writeMsg("Format Done\r\n");
    5464:	ldr	r0, [r4, #32]
  if (rtn) {
    5466:	cbz	r5, 54aa <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x7e>
    writeMsg("Format Done\r\n");
    5468:	cbz	r0, 5474 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x48>
    546a:	ldr	r3, [r0, #0]
    546c:	movs	r2, #13
    546e:	ldr	r1, [pc, #100]	; (54d4 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xa8>)
    5470:	ldr	r3, [r3, #4]
    5472:	blx	r3
}
    5474:	mov	r0, r5
    5476:	pop	{r3, r4, r5, pc}
  } else if (m_capacityMB <= 32) {
    5478:	cmp	r3, #32
    547a:	bls.n	54c4 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x98>
  } else if (m_capacityMB <= 64) {
    547c:	cmp	r3, #64	; 0x40
    547e:	bls.n	54c8 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x9c>
  } else if (m_capacityMB <= 128) {
    5480:	cmp	r3, #128	; 0x80
    5482:	bls.n	54cc <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xa0>
  } else if (m_capacityMB <= 1024) {
    5484:	cmp.w	r3, #1024	; 0x400
    5488:	bls.n	54d0 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xa4>
  } else if (m_capacityMB <= 32768) {
    548a:	cmp.w	r3, #32768	; 0x8000
    548e:	ite	hi
    5490:	movhi	r3, #128	; 0x80
    5492:	movls	r3, #64	; 0x40
    5494:	b.n	5452 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x26>
    writeMsg("Card is too small.\r\n");
    5496:	ldr	r0, [r4, #32]
    5498:	cbz	r0, 54a4 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x78>
    549a:	ldr	r3, [r0, #0]
    549c:	movs	r2, #20
    549e:	ldr	r1, [pc, #56]	; (54d8 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xac>)
    54a0:	ldr	r3, [r3, #4]
    54a2:	blx	r3
    return false;
    54a4:	movs	r5, #0
}
    54a6:	mov	r0, r5
    54a8:	pop	{r3, r4, r5, pc}
    writeMsg("Format Failed\r\n");
    54aa:	cmp	r0, #0
    54ac:	beq.n	54a4 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x78>
    54ae:	ldr	r3, [r0, #0]
    54b0:	movs	r2, #15
    54b2:	ldr	r1, [pc, #40]	; (54dc <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xb0>)
    54b4:	ldr	r3, [r3, #4]
    54b6:	blx	r3
}
    54b8:	mov	r0, r5
    54ba:	pop	{r3, r4, r5, pc}
  rtn = m_sectorCount < 0X400000 ? makeFat16() : makeFat32();
    54bc:	bl	5160 <FatFormatter::makeFat32()>
    54c0:	mov	r5, r0
    54c2:	b.n	5464 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x38>
    54c4:	movs	r3, #4
    54c6:	b.n	5452 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x26>
    54c8:	movs	r3, #8
    54ca:	b.n	5452 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x26>
    54cc:	movs	r3, #16
    54ce:	b.n	5452 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x26>
    54d0:	movs	r3, #32
    54d2:	b.n	5452 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x26>
    54d4:	.word	0x20000688
    54d8:	.word	0x20000670
    54dc:	.word	0x20000698

000054e0 <FatFile::getLfnChar(DirLfn_t*, unsigned char)>:
#include "../common/DebugMacros.h"
#include "../common/FsUtf.h"
#include "FatLib.h"
//------------------------------------------------------------------------------
uint16_t FatFile::getLfnChar(DirLfn_t* ldir, uint8_t i) {
  if (i < 5) {
    54e0:	cmp	r2, #4
    54e2:	bhi.n	54ee <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0xe>
  return *reinterpret_cast<const uint16_t*>(src);
    54e4:	add.w	r2, r1, r2, lsl #1
    54e8:	ldrh.w	r0, [r2, #1]
    return getLe16(ldir->unicode1 + 2 * i);
    54ec:	bx	lr
  } else if (i < 11) {
    54ee:	cmp	r2, #10
    54f0:	bhi.n	54fa <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0x1a>
    54f2:	add.w	r2, r1, r2, lsl #1
    54f6:	ldrh	r0, [r2, #4]
    return getLe16(ldir->unicode2 + 2 * (i - 5));
    54f8:	bx	lr
  } else if (i < 13) {
    54fa:	cmp	r2, #12
    54fc:	bhi.n	5506 <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0x26>
    54fe:	add.w	r1, r1, r2, lsl #1
    5502:	ldrh	r0, [r1, #6]
    return getLe16(ldir->unicode3 + 2 * (i - 11));
    5504:	bx	lr
  }
  DBG_HALT_IF(i >= 13);
  return 0;
    5506:	movs	r0, #0
}
    5508:	bx	lr
    550a:	nop

0000550c <FatFile::getSFN(char*, unsigned int)>:
fail:
  *name = 0;
  return 0;
}
//------------------------------------------------------------------------------
size_t FatFile::getSFN(char* name, size_t size) {
    550c:	push	{r3, r4, r5, r6, r7, lr}
  bool isOpen() const { return m_attributes; }
    550e:	ldrb	r4, [r0, #0]
    5510:	mov	r6, r1
  char c;
  uint8_t j = 0;
  uint8_t lcBit = FAT_CASE_LC_BASE;
  uint8_t* ptr;
  DirFat_t* dir;
  if (!isOpen()) {
    5512:	cbz	r4, 5530 <FatFile::getSFN(char*, unsigned int)+0x24>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isRoot()) {
    5514:	ands.w	r4, r4, #192	; 0xc0
    5518:	mov	r7, r2
    551a:	beq.n	5528 <FatFile::getSFN(char*, unsigned int)+0x1c>
    if (size < 2) {
    551c:	cmp	r2, #1
    551e:	bls.n	5530 <FatFile::getSFN(char*, unsigned int)+0x24>
      DBG_FAIL_MACRO;
      goto fail;
    }
    name[0] = '/';
    5520:	movs	r3, #47	; 0x2f
    name[1] = '\0';
    return 1;
    5522:	movs	r0, #1
    name[0] = '/';
    5524:	strh	r3, [r1, #0]
  return j;

fail:
  name[0] = '\0';
  return 0;
}
    5526:	pop	{r3, r4, r5, r6, r7, pc}
  dir = cacheDirEntry(FsCache::CACHE_FOR_READ);
    5528:	mov	r1, r4
    552a:	bl	57ec <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    552e:	cbnz	r0, 5538 <FatFile::getSFN(char*, unsigned int)+0x2c>
  name[0] = '\0';
    5530:	movs	r3, #0
  return 0;
    5532:	mov	r0, r3
  name[0] = '\0';
    5534:	strb	r3, [r6, #0]
}
    5536:	pop	{r3, r4, r5, r6, r7, pc}
  ptr = dir->name;
    5538:	mov	r3, r0
    553a:	mov	ip, r4
  uint8_t lcBit = FAT_CASE_LC_BASE;
    553c:	movs	r1, #8
    553e:	b.n	5564 <FatFile::getSFN(char*, unsigned int)+0x58>
      if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
    5540:	ldrb	r2, [r0, #12]
    5542:	tst	r1, r2
    5544:	beq.n	554e <FatFile::getSFN(char*, unsigned int)+0x42>
        c += 'a' - 'A';
    5546:	add.w	lr, lr, #32
    554a:	uxtb.w	lr, lr
    if ((j + 1u) >= size) {
    554e:	adds	r5, r4, #1
    5550:	cmp	r5, r7
    5552:	bcs.n	5530 <FatFile::getSFN(char*, unsigned int)+0x24>
  for (uint8_t i = 0; i < 12; i++) {
    5554:	add.w	ip, ip, #1
    name[j++] = c;
    5558:	strb.w	lr, [r6, r4]
    555c:	uxtb	r4, r5
  for (uint8_t i = 0; i < 12; i++) {
    555e:	cmp.w	ip, #12
    5562:	beq.n	5586 <FatFile::getSFN(char*, unsigned int)+0x7a>
    if (i == 8) {
    5564:	cmp.w	ip, #8
    5568:	beq.n	558e <FatFile::getSFN(char*, unsigned int)+0x82>
      c = *ptr++;
    556a:	ldrb.w	lr, [r3], #1
      if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
    556e:	sub.w	r2, lr, #65	; 0x41
    5572:	cmp	r2, #25
    5574:	bls.n	5540 <FatFile::getSFN(char*, unsigned int)+0x34>
      if (c == ' ') {
    5576:	cmp.w	lr, #32
    557a:	bne.n	554e <FatFile::getSFN(char*, unsigned int)+0x42>
  for (uint8_t i = 0; i < 12; i++) {
    557c:	add.w	ip, ip, #1
    5580:	cmp.w	ip, #12
    5584:	bne.n	5564 <FatFile::getSFN(char*, unsigned int)+0x58>
  name[j] = '\0';
    5586:	movs	r3, #0
    5588:	mov	r0, r4
    558a:	strb	r3, [r6, r4]
}
    558c:	pop	{r3, r4, r5, r6, r7, pc}
      if (*ptr == ' ') {
    558e:	ldrb	r2, [r3, #0]
    5590:	cmp	r2, #32
    5592:	beq.n	5586 <FatFile::getSFN(char*, unsigned int)+0x7a>
      lcBit = FAT_CASE_LC_EXT;
    5594:	movs	r1, #16
      c = '.';
    5596:	mov.w	lr, #46	; 0x2e
    559a:	b.n	554e <FatFile::getSFN(char*, unsigned int)+0x42>

0000559c <FatFile::getName(char*, unsigned int)>:
size_t FatFile::getName(char* name, size_t size) {
    559c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  FatFile() {}
    55a0:	movs	r4, #0
    55a2:	sub	sp, #44	; 0x2c
  if (!isOpen()) {
    55a4:	ldrb	r3, [r0, #0]
size_t FatFile::getName(char* name, size_t size) {
    55a6:	mov	r7, r1
    55a8:	str	r4, [sp, #4]
  if (!isOpen()) {
    55aa:	cmp	r3, #0
    55ac:	beq.n	5652 <FatFile::getName(char*, unsigned int)+0xb6>
  if (!isLFN()) {
    55ae:	ldrb	r3, [r0, #3]
    55b0:	mov	r5, r0
    55b2:	cmp	r3, #0
    55b4:	beq.n	5660 <FatFile::getName(char*, unsigned int)+0xc4>
  if (!dir.openCluster(this)) {
    55b6:	mov	r1, r0
    55b8:	add	r0, sp, #4
    55ba:	mov	r6, r2
    55bc:	bl	5d2c <FatFile::openCluster(FatFile*)>
    55c0:	cmp	r0, #0
    55c2:	beq.n	5652 <FatFile::getName(char*, unsigned int)+0xb6>
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    55c4:	ldrb	r3, [r5, #3]
    55c6:	cmp	r3, #0
    55c8:	beq.n	568c <FatFile::getName(char*, unsigned int)+0xf0>
    55ca:	mov.w	r8, #1
      name[n++] = c >= 0X7F ? '?' : c;
    55ce:	mov.w	r9, #63	; 0x3f
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(m_dirIndex - order));
    55d2:	ldrh	r1, [r5, #4]
  // private functions

  bool addCluster();
  bool addDirCluster();
  DirFat_t* cacheDir(uint16_t index) {
    return seekSet(32UL * index) ? readDirCache() : nullptr;
    55d4:	add	r0, sp, #4
    55d6:	sub.w	r1, r1, r8
    55da:	uxth	r1, r1
    55dc:	lsls	r1, r1, #5
    55de:	bl	624c <FatFile::seekSet(unsigned long)>
    55e2:	cbz	r0, 5652 <FatFile::getName(char*, unsigned int)+0xb6>
    55e4:	movs	r1, #0
    55e6:	add	r0, sp, #4
    55e8:	bl	5f8c <FatFile::readDirCache(bool)>
    if (!ldir) {
    55ec:	cbz	r0, 5652 <FatFile::getName(char*, unsigned int)+0xb6>
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    55ee:	ldrb	r3, [r0, #11]
    55f0:	cmp	r3, #15
    55f2:	bne.n	5652 <FatFile::getName(char*, unsigned int)+0xb6>
    55f4:	ldrb	r3, [r0, #0]
    55f6:	uxtb.w	r2, r8
    55fa:	and.w	r3, r3, #31
    55fe:	cmp	r2, r3
    5600:	bne.n	5652 <FatFile::getName(char*, unsigned int)+0xb6>
    5602:	subs	r1, r4, #1
    5604:	add.w	ip, r0, #1
    for (uint8_t i = 0; i < 13; i++) {
    5608:	movs	r3, #0
    560a:	add	r1, r7
  if (i < 5) {
    560c:	cmp	r3, #4
    560e:	bhi.n	566e <FatFile::getName(char*, unsigned int)+0xd2>
    5610:	ldrh.w	r2, [ip]
    for (uint8_t i = 0; i < 13; i++) {
    5614:	adds	r0, r3, #1
      if (c == 0) {
    5616:	cbz	r2, 5644 <FatFile::getName(char*, unsigned int)+0xa8>
      if ((n + 1) >= size) {
    5618:	adds	r4, #1
    for (uint8_t i = 0; i < 13; i++) {
    561a:	adds	r3, #1
      if ((n + 1) >= size) {
    561c:	cmp	r6, r4
    561e:	bls.n	5652 <FatFile::getName(char*, unsigned int)+0xb6>
      name[n++] = c >= 0X7F ? '?' : c;
    5620:	cmp	r2, #126	; 0x7e
    5622:	bls.n	567c <FatFile::getName(char*, unsigned int)+0xe0>
    for (uint8_t i = 0; i < 13; i++) {
    5624:	uxtb	r3, r0
    5626:	add.w	ip, ip, #2
      name[n++] = c >= 0X7F ? '?' : c;
    562a:	strb.w	r9, [r1, #1]!
    for (uint8_t i = 0; i < 13; i++) {
    562e:	cmp	r3, #13
    5630:	bne.n	560c <FatFile::getName(char*, unsigned int)+0x70>
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    5632:	add.w	r8, r8, #1
    5636:	ldrb	r2, [r5, #3]
    5638:	uxtb.w	r3, r8
    563c:	uxth.w	r8, r8
    5640:	cmp	r2, r3
    5642:	bcs.n	55d2 <FatFile::getName(char*, unsigned int)+0x36>
  name[n] = 0;
    5644:	add	r7, r4
    5646:	movs	r3, #0
}
    5648:	mov	r0, r4
  name[n] = 0;
    564a:	strb	r3, [r7, #0]
}
    564c:	add	sp, #44	; 0x2c
    564e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  name[0] = '\0';
    5652:	movs	r3, #0
  return 0;
    5654:	mov	r4, r3
  name[0] = '\0';
    5656:	strb	r3, [r7, #0]
}
    5658:	mov	r0, r4
    565a:	add	sp, #44	; 0x2c
    565c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return getSFN(name, size);
    5660:	bl	550c <FatFile::getSFN(char*, unsigned int)>
    5664:	mov	r4, r0
}
    5666:	mov	r0, r4
    5668:	add	sp, #44	; 0x2c
    566a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  } else if (i < 11) {
    566e:	cmp	r3, #10
    5670:	ite	ls
    5672:	ldrhls.w	r2, [ip, #3]
    5676:	ldrhhi.w	r2, [ip, #5]
    return getLe16(ldir->unicode3 + 2 * (i - 11));
    567a:	b.n	5614 <FatFile::getName(char*, unsigned int)+0x78>
    for (uint8_t i = 0; i < 13; i++) {
    567c:	uxtb	r3, r3
    567e:	add.w	ip, ip, #2
      name[n++] = c >= 0X7F ? '?' : c;
    5682:	strb.w	r2, [r1, #1]!
    for (uint8_t i = 0; i < 13; i++) {
    5686:	cmp	r3, #13
    5688:	bne.n	560c <FatFile::getName(char*, unsigned int)+0x70>
    568a:	b.n	5632 <FatFile::getName(char*, unsigned int)+0x96>
  size_t n = 0;
    568c:	mov	r4, r3
    568e:	b.n	5646 <FatFile::getName(char*, unsigned int)+0xaa>

00005690 <FatFile::sync() [clone .part.0]>:
fail:
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
    5690:	push	{r4, r5, r6, lr}
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    5692:	ldrsb.w	r3, [r0, #2]
bool FatFile::sync() {
    5696:	sub	sp, #8
    5698:	mov	r4, r0
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    569a:	cmp	r3, #0
    569c:	blt.n	56ba <FatFile::sync() [clone .part.0]+0x2a>
      setLe16(dir->modifyTime, time);
    }
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
  }
  if (m_vol->cacheSync()) {
    569e:	ldr	r5, [r4, #8]
  uint8_t* fatCachePrepare(uint32_t sector, uint8_t options) {
    options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return m_fatCache.prepare(sector, options);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    56a0:	add.w	r0, r5, #36	; 0x24
    56a4:	bl	2a38 <FsCache::sync()>
    56a8:	cmp	r0, #0
    56aa:	bne.n	572c <FatFile::sync() [clone .part.0]+0x9c>
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
    56ac:	ldrb	r3, [r4, #1]
  return false;
    56ae:	movs	r0, #0
  m_error |= WRITE_ERROR;
    56b0:	orr.w	r3, r3, #1
    56b4:	strb	r3, [r4, #1]
}
    56b6:	add	sp, #8
    56b8:	pop	{r4, r5, r6, pc}
    return dataCachePrepare(sector, options);
  }
  bool cacheSync() { return m_cache.sync() && syncDevice(); }
#endif  // USE_SEPARATE_FAT_CACHE
  uint8_t* dataCachePrepare(uint32_t sector, uint8_t options) {
    return m_cache.prepare(sector, options);
    56ba:	ldr	r0, [r0, #8]
    56bc:	movs	r2, #1
    56be:	ldr	r1, [r4, #24]
    56c0:	adds	r0, #36	; 0x24
    56c2:	bl	29b8 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    56c6:	cmp	r0, #0
    56c8:	beq.n	56ac <FatFile::sync() [clone .part.0]+0x1c>
  return dir + (m_dirIndex & 0XF);
    56ca:	ldrh	r5, [r4, #4]
    56cc:	and.w	r5, r5, #15
    56d0:	lsls	r3, r5, #5
    56d2:	add.w	r5, r0, r5, lsl #5
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
    56d6:	ldrb	r3, [r0, r3]
    56d8:	cmp	r3, #229	; 0xe5
    56da:	beq.n	56ac <FatFile::sync() [clone .part.0]+0x1c>
    dir->attributes = m_attributes & FS_ATTRIB_COPY;
    56dc:	ldrb	r3, [r4, #0]
    56de:	and.w	r3, r3, #55	; 0x37
    56e2:	strb	r3, [r5, #11]
    if (isFile()) {
    56e4:	ldrb	r3, [r4, #0]
    56e6:	lsls	r3, r3, #28
    56e8:	bpl.n	56ee <FatFile::sync() [clone .part.0]+0x5e>
      setLe32(dir->fileSize, m_fileSize);
    56ea:	ldr	r3, [r4, #28]
  *reinterpret_cast<uint32_t*>(dst) = src;
    56ec:	str	r3, [r5, #28]
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    56ee:	ldr	r3, [r4, #32]
    if (FsDateTime::callback) {
    56f0:	ldr	r1, [pc, #84]	; (5748 <FatFile::sync() [clone .part.0]+0xb8>)
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);
    56f2:	lsrs	r2, r3, #16
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    56f4:	strh	r3, [r5, #26]
    if (FsDateTime::callback) {
    56f6:	ldr	r6, [r1, #0]
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);
    56f8:	strh	r2, [r5, #20]
    if (FsDateTime::callback) {
    56fa:	cbz	r6, 5716 <FatFile::sync() [clone .part.0]+0x86>
      FsDateTime::callback(&date, &time, &ms10);
    56fc:	add.w	r2, sp, #3
    5700:	add.w	r1, sp, #6
    5704:	add	r0, sp, #4
    5706:	blx	r6
      setLe16(dir->modifyDate, date);
    5708:	ldrh.w	r3, [sp, #4]
  *reinterpret_cast<uint16_t*>(dst) = src;
    570c:	ldrh.w	r2, [sp, #6]
    5710:	strh	r3, [r5, #24]
    5712:	strh	r3, [r5, #18]
    5714:	strh	r2, [r5, #22]
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    5716:	ldrb	r3, [r4, #2]
  if (m_vol->cacheSync()) {
    5718:	ldr	r5, [r4, #8]
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    571a:	and.w	r3, r3, #127	; 0x7f
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    571e:	add.w	r0, r5, #36	; 0x24
    5722:	strb	r3, [r4, #2]
    5724:	bl	2a38 <FsCache::sync()>
    5728:	cmp	r0, #0
    572a:	beq.n	56ac <FatFile::sync() [clone .part.0]+0x1c>
    572c:	add.w	r0, r5, #564	; 0x234
    5730:	bl	2a38 <FsCache::sync()>
    5734:	cmp	r0, #0
    5736:	beq.n	56ac <FatFile::sync() [clone .part.0]+0x1c>
    5738:	ldr	r0, [r5, #0]
  bool syncDevice() { return m_blockDev->syncDevice(); }
    573a:	ldr	r3, [r0, #0]
    573c:	ldr	r3, [r3, #28]
    573e:	blx	r3
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    5740:	cmp	r0, #0
    5742:	beq.n	56ac <FatFile::sync() [clone .part.0]+0x1c>
    5744:	b.n	56b6 <FatFile::sync() [clone .part.0]+0x26>
    5746:	nop
    5748:	.word	0x2000771c

0000574c <FatFile::addDirCluster()>:
bool FatFile::addDirCluster() {
    574c:	push	{r3, r4, r5, r6, r7, lr}
  if (isRootFixed()) {
    574e:	ldrb	r3, [r0, #0]
    5750:	lsls	r3, r3, #25
    5752:	bmi.n	575e <FatFile::addDirCluster()+0x12>
  if (m_curPosition >= 512UL * 4095) {
    5754:	ldr	r3, [pc, #144]	; (57e8 <FatFile::addDirCluster()+0x9c>)
    5756:	mov	r4, r0
    5758:	ldr	r2, [r0, #20]
    575a:	cmp	r2, r3
    575c:	bcc.n	5764 <FatFile::addDirCluster()+0x18>
  return false;
    575e:	movs	r7, #0
}
    5760:	mov	r0, r7
    5762:	pop	{r3, r4, r5, r6, r7, pc}
  uint32_t cc = m_curCluster;
    5764:	mov	r2, r0
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    5766:	ldr	r0, [r0, #8]
  uint32_t cc = m_curCluster;
    5768:	ldr.w	r5, [r2, #16]!
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    576c:	mov	r1, r5
    576e:	bl	6a34 <FatPartition::allocateCluster(unsigned long, unsigned long*)>
    5772:	mov	r7, r0
    5774:	cmp	r0, #0
    5776:	beq.n	575e <FatFile::addDirCluster()+0x12>
  if (cc == 0) {
    5778:	cbz	r5, 57ca <FatFile::addDirCluster()+0x7e>
  } else if (m_curCluster != (cc + 1)) {
    577a:	ldr	r6, [r4, #16]
    577c:	adds	r5, #1
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    577e:	ldrb	r2, [r4, #2]
  } else if (m_curCluster != (cc + 1)) {
    5780:	cmp	r6, r5
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    5782:	it	ne
    5784:	andne.w	r2, r2, #191	; 0xbf
  sector = m_vol->clusterStartSector(m_curCluster);
    5788:	ldr	r0, [r4, #8]
  m_flags |= FILE_FLAG_DIR_DIRTY;
    578a:	orn	r2, r2, #127	; 0x7f
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
  }
  uint32_t clusterStartSector(uint32_t cluster) const {
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    578e:	subs	r6, #2
    5790:	strb	r2, [r4, #2]
    5792:	ldrb	r2, [r0, #6]
    5794:	ldr	r1, [r0, #20]
    5796:	lsls	r6, r2
    5798:	add	r6, r1
  for (uint8_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    579a:	ldrb	r1, [r0, #4]
    579c:	cbz	r1, 57d6 <FatFile::addDirCluster()+0x8a>
    579e:	movs	r5, #0
    57a0:	mov	r1, r5
    57a2:	b.n	57b2 <FatFile::addDirCluster()+0x66>
    memset(pc, 0, m_vol->bytesPerSector());
    57a4:	bl	10104 <memset>
  for (uint8_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    57a8:	ldr	r0, [r4, #8]
    57aa:	uxtb	r1, r5
    57ac:	ldrb	r2, [r0, #4]
    57ae:	cmp	r2, r1
    57b0:	bls.n	57d4 <FatFile::addDirCluster()+0x88>
    return m_cache.prepare(sector, options);
    57b2:	add	r1, r6
    57b4:	movs	r2, #5
    57b6:	adds	r0, #36	; 0x24
    57b8:	adds	r5, #1
    57ba:	bl	29b8 <FsCache::prepare(unsigned long, unsigned char)>
    memset(pc, 0, m_vol->bytesPerSector());
    57be:	mov.w	r2, #512	; 0x200
    57c2:	movs	r1, #0
    if (!pc) {
    57c4:	cmp	r0, #0
    57c6:	bne.n	57a4 <FatFile::addDirCluster()+0x58>
    57c8:	b.n	575e <FatFile::addDirCluster()+0x12>
    m_flags |= FILE_FLAG_CONTIGUOUS;
    57ca:	ldrb	r2, [r4, #2]
  } else if (m_curCluster != (cc + 1)) {
    57cc:	ldr	r6, [r4, #16]
    m_flags |= FILE_FLAG_CONTIGUOUS;
    57ce:	orr.w	r2, r2, #64	; 0x40
    57d2:	b.n	5788 <FatFile::addDirCluster()+0x3c>
    return m_bytesPerSector << m_sectorsPerClusterShift;
    57d4:	ldrb	r2, [r0, #6]
    57d6:	mov.w	r3, #512	; 0x200
  m_curPosition += m_vol->bytesPerCluster();
    57da:	ldr	r1, [r4, #20]
}
    57dc:	mov	r0, r7
    57de:	lsls	r3, r2
  m_curPosition += m_vol->bytesPerCluster();
    57e0:	uxtah	r3, r1, r3
    57e4:	str	r3, [r4, #20]
}
    57e6:	pop	{r3, r4, r5, r6, r7, pc}
    57e8:	.word	0x001ffe00

000057ec <FatFile::cacheDirEntry(unsigned char)>:
DirFat_t* FatFile::cacheDirEntry(uint8_t action) {
    57ec:	push	{r4, lr}
    57ee:	mov	r4, r0
    return m_cache.prepare(sector, options);
    57f0:	ldr	r0, [r0, #8]
    57f2:	mov	r2, r1
    57f4:	adds	r0, #36	; 0x24
    57f6:	ldr	r1, [r4, #24]
    57f8:	bl	29b8 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    57fc:	cbz	r0, 5808 <FatFile::cacheDirEntry(unsigned char)+0x1c>
  return dir + (m_dirIndex & 0XF);
    57fe:	ldrh	r3, [r4, #4]
    5800:	and.w	r3, r3, #15
    5804:	add.w	r0, r0, r3, lsl #5
}
    5808:	pop	{r4, pc}
    580a:	nop

0000580c <FatFile::close()>:
bool FatFile::close() {
    580c:	push	{r4, r5, r6, lr}
  if (!isOpen()) {
    580e:	ldrb	r3, [r0, #0]
bool FatFile::close() {
    5810:	sub	sp, #8
    5812:	mov	r4, r0
  if (!isOpen()) {
    5814:	cmp	r3, #0
    5816:	beq.n	58b6 <FatFile::close()+0xaa>
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    5818:	ldrsb.w	r3, [r0, #2]
    581c:	cmp	r3, #0
    581e:	blt.n	5842 <FatFile::close()+0x36>
  if (m_vol->cacheSync()) {
    5820:	ldr	r5, [r4, #8]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    5822:	add.w	r0, r5, #36	; 0x24
    5826:	bl	2a38 <FsCache::sync()>
    582a:	cmp	r0, #0
    582c:	bne.n	58c2 <FatFile::close()+0xb6>
  m_error |= WRITE_ERROR;
    582e:	ldrb	r3, [r4, #1]
  return false;
    5830:	movs	r0, #0
  m_error |= WRITE_ERROR;
    5832:	orr.w	r3, r3, #1
    5836:	strb	r3, [r4, #1]
  m_attributes = FILE_ATTR_CLOSED;
    5838:	movs	r3, #0
    583a:	strb	r3, [r4, #0]
  m_flags = 0;
    583c:	strb	r3, [r4, #2]
}
    583e:	add	sp, #8
    5840:	pop	{r4, r5, r6, pc}
    return m_cache.prepare(sector, options);
    5842:	ldr	r0, [r0, #8]
    5844:	movs	r2, #1
    5846:	ldr	r1, [r4, #24]
    5848:	adds	r0, #36	; 0x24
    584a:	bl	29b8 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    584e:	cmp	r0, #0
    5850:	beq.n	582e <FatFile::close()+0x22>
  return dir + (m_dirIndex & 0XF);
    5852:	ldrh	r5, [r4, #4]
    5854:	and.w	r5, r5, #15
    5858:	lsls	r3, r5, #5
    585a:	add.w	r5, r0, r5, lsl #5
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
    585e:	ldrb	r3, [r0, r3]
    5860:	cmp	r3, #229	; 0xe5
    5862:	beq.n	582e <FatFile::close()+0x22>
    dir->attributes = m_attributes & FS_ATTRIB_COPY;
    5864:	ldrb	r3, [r4, #0]
    5866:	and.w	r3, r3, #55	; 0x37
    586a:	strb	r3, [r5, #11]
    if (isFile()) {
    586c:	ldrb	r3, [r4, #0]
    586e:	lsls	r3, r3, #28
    5870:	bpl.n	5876 <FatFile::close()+0x6a>
      setLe32(dir->fileSize, m_fileSize);
    5872:	ldr	r3, [r4, #28]
  *reinterpret_cast<uint32_t*>(dst) = src;
    5874:	str	r3, [r5, #28]
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    5876:	ldr	r3, [r4, #32]
    if (FsDateTime::callback) {
    5878:	ldr	r1, [pc, #96]	; (58dc <FatFile::close()+0xd0>)
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);
    587a:	lsrs	r2, r3, #16
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    587c:	strh	r3, [r5, #26]
    if (FsDateTime::callback) {
    587e:	ldr	r6, [r1, #0]
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);
    5880:	strh	r2, [r5, #20]
    if (FsDateTime::callback) {
    5882:	cbz	r6, 589e <FatFile::close()+0x92>
      FsDateTime::callback(&date, &time, &ms10);
    5884:	add.w	r2, sp, #3
    5888:	add.w	r1, sp, #6
    588c:	add	r0, sp, #4
    588e:	blx	r6
      setLe16(dir->modifyDate, date);
    5890:	ldrh.w	r3, [sp, #4]
  *reinterpret_cast<uint16_t*>(dst) = src;
    5894:	ldrh.w	r2, [sp, #6]
    5898:	strh	r3, [r5, #24]
    589a:	strh	r3, [r5, #18]
    589c:	strh	r2, [r5, #22]
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    589e:	ldrb	r3, [r4, #2]
  if (m_vol->cacheSync()) {
    58a0:	ldr	r5, [r4, #8]
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    58a2:	and.w	r3, r3, #127	; 0x7f
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    58a6:	add.w	r0, r5, #36	; 0x24
    58aa:	strb	r3, [r4, #2]
    58ac:	bl	2a38 <FsCache::sync()>
    58b0:	cmp	r0, #0
    58b2:	beq.n	582e <FatFile::close()+0x22>
    58b4:	b.n	58c2 <FatFile::close()+0xb6>
  m_attributes = FILE_ATTR_CLOSED;
    58b6:	movs	r3, #0
    return true;
    58b8:	movs	r0, #1
  m_attributes = FILE_ATTR_CLOSED;
    58ba:	strb	r3, [r4, #0]
  m_flags = 0;
    58bc:	strb	r3, [r4, #2]
}
    58be:	add	sp, #8
    58c0:	pop	{r4, r5, r6, pc}
    58c2:	add.w	r0, r5, #564	; 0x234
    58c6:	bl	2a38 <FsCache::sync()>
    58ca:	cmp	r0, #0
    58cc:	beq.n	582e <FatFile::close()+0x22>
    58ce:	ldr	r0, [r5, #0]
  bool syncDevice() { return m_blockDev->syncDevice(); }
    58d0:	ldr	r3, [r0, #0]
    58d2:	ldr	r3, [r3, #28]
    58d4:	blx	r3
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    58d6:	cmp	r0, #0
    58d8:	beq.n	582e <FatFile::close()+0x22>
    58da:	b.n	5838 <FatFile::close()+0x2c>
    58dc:	.word	0x2000771c

000058e0 <FatFile::getCreateDateTime(unsigned short*, unsigned short*)>:
bool FatFile::getCreateDateTime(uint16_t* pdate, uint16_t* ptime) {
    58e0:	push	{r4, r5, r6, lr}
  if (!isOpen()) {
    58e2:	ldrb	r3, [r0, #0]
bool FatFile::getCreateDateTime(uint16_t* pdate, uint16_t* ptime) {
    58e4:	mov	r4, r0
    58e6:	mov	r5, r1
    58e8:	mov	r6, r2
  if (!isOpen()) {
    58ea:	cbz	r3, 58f2 <FatFile::getCreateDateTime(unsigned short*, unsigned short*)+0x12>
    58ec:	bl	5690 <FatFile::sync() [clone .part.0]>
  if (!sync()) {
    58f0:	cbz	r0, 5916 <FatFile::getCreateDateTime(unsigned short*, unsigned short*)+0x36>
    return m_cache.prepare(sector, options);
    58f2:	ldr	r0, [r4, #8]
    58f4:	movs	r2, #0
    58f6:	ldr	r1, [r4, #24]
    58f8:	adds	r0, #36	; 0x24
    58fa:	bl	29b8 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    58fe:	cbz	r0, 5916 <FatFile::getCreateDateTime(unsigned short*, unsigned short*)+0x36>
  return dir + (m_dirIndex & 0XF);
    5900:	ldrh	r3, [r4, #4]
    5902:	and.w	r3, r3, #15
    5906:	add.w	r0, r0, r3, lsl #5
  memcpy(dst, dir, sizeof(DirFat_t));
    590a:	ldrh	r3, [r0, #14]
    590c:	ldrh	r2, [r0, #16]
  return true;
    590e:	movs	r0, #1
  *pdate = getLe16(dir.createDate);
    5910:	strh	r2, [r5, #0]
  *ptime = getLe16(dir.createTime);
    5912:	strh	r3, [r6, #0]
}
    5914:	pop	{r4, r5, r6, pc}
  return false;
    5916:	movs	r0, #0
}
    5918:	pop	{r4, r5, r6, pc}
    591a:	nop

0000591c <FatFile::getModifyDateTime(unsigned short*, unsigned short*)>:
bool FatFile::getModifyDateTime(uint16_t* pdate, uint16_t* ptime) {
    591c:	push	{r4, r5, r6, lr}
  if (!isOpen()) {
    591e:	ldrb	r3, [r0, #0]
bool FatFile::getModifyDateTime(uint16_t* pdate, uint16_t* ptime) {
    5920:	mov	r4, r0
    5922:	mov	r5, r1
    5924:	mov	r6, r2
  if (!isOpen()) {
    5926:	cbz	r3, 592e <FatFile::getModifyDateTime(unsigned short*, unsigned short*)+0x12>
    5928:	bl	5690 <FatFile::sync() [clone .part.0]>
  if (!sync()) {
    592c:	cbz	r0, 5952 <FatFile::getModifyDateTime(unsigned short*, unsigned short*)+0x36>
    592e:	ldr	r0, [r4, #8]
    5930:	movs	r2, #0
    5932:	ldr	r1, [r4, #24]
    5934:	adds	r0, #36	; 0x24
    5936:	bl	29b8 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    593a:	cbz	r0, 5952 <FatFile::getModifyDateTime(unsigned short*, unsigned short*)+0x36>
  return dir + (m_dirIndex & 0XF);
    593c:	ldrh	r3, [r4, #4]
    593e:	and.w	r3, r3, #15
    5942:	add.w	r0, r0, r3, lsl #5
  memcpy(dst, dir, sizeof(DirFat_t));
    5946:	ldrh	r3, [r0, #22]
    5948:	ldrh	r2, [r0, #24]
  return true;
    594a:	movs	r0, #1
  *pdate = getLe16(dir.modifyDate);
    594c:	strh	r2, [r5, #0]
  *ptime = getLe16(dir.modifyTime);
    594e:	strh	r3, [r6, #0]
}
    5950:	pop	{r4, r5, r6, pc}
  return false;
    5952:	movs	r0, #0
}
    5954:	pop	{r4, r5, r6, pc}
    5956:	nop

00005958 <FatFile::mkdir(FatFile*, FatLfn_t*)>:
  if (!parent->isDir()) {
    5958:	ldrb	r3, [r1, #0]
    595a:	tst.w	r3, #208	; 0xd0
    595e:	bne.n	5964 <FatFile::mkdir(FatFile*, FatLfn_t*)+0xc>
}
    5960:	movs	r0, #0
    5962:	bx	lr
bool FatFile::mkdir(FatFile* parent, FatName_t* fname) {
    5964:	push	{r4, r5, r6, r7, lr}
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    5966:	movw	r3, #2562	; 0xa02
bool FatFile::mkdir(FatFile* parent, FatName_t* fname) {
    596a:	sub	sp, #36	; 0x24
    596c:	mov	r5, r1
    596e:	mov	r4, r0
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    5970:	bl	7504 <FatFile::open(FatFile*, FatLfn_t*, int)>
    5974:	cmp	r0, #0
    5976:	beq.w	5aa2 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x14a>
  m_flags = FILE_FLAG_READ;
    597a:	movs	r2, #1
  m_attributes = FILE_ATTR_SUBDIR;
    597c:	movs	r3, #16
  if (!addDirCluster()) {
    597e:	mov	r0, r4
  m_flags = FILE_FLAG_READ;
    5980:	strb	r2, [r4, #2]
  m_attributes = FILE_ATTR_SUBDIR;
    5982:	strb	r3, [r4, #0]
  if (!addDirCluster()) {
    5984:	bl	574c <FatFile::addDirCluster()>
    5988:	cmp	r0, #0
    598a:	beq.w	5aa2 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x14a>
  m_firstCluster = m_curCluster;
    598e:	ldr	r2, [r4, #16]
  if (!isOpen()) {
    5990:	ldrb	r3, [r4, #0]
  m_firstCluster = m_curCluster;
    5992:	str	r2, [r4, #32]
  if (!isOpen()) {
    5994:	cbz	r3, 59b2 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x5a>
  if (pos == m_curPosition) {
    5996:	ldr	r3, [r4, #20]
    5998:	cbz	r3, 59a8 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x50>
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    599a:	ldrb	r3, [r4, #2]
    m_curCluster = 0;
    599c:	movs	r2, #0
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    599e:	bic.w	r3, r3, #32
  m_curPosition = pos;
    59a2:	strd	r2, r2, [r4, #16]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    59a6:	strb	r3, [r4, #2]
  if (!isOpen()) {
    59a8:	mov	r0, r4
    59aa:	bl	5690 <FatFile::sync() [clone .part.0]>
  if (!sync()) {
    59ae:	cmp	r0, #0
    59b0:	beq.n	5aa2 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x14a>
    59b2:	ldr	r0, [r4, #8]
    59b4:	movs	r2, #1
    59b6:	ldr	r1, [r4, #24]
    59b8:	adds	r0, #36	; 0x24
    59ba:	bl	29b8 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    59be:	cmp	r0, #0
    59c0:	beq.n	5aa2 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x14a>
  return dir + (m_dirIndex & 0XF);
    59c2:	ldrh.w	ip, [r4, #4]
  dir->attributes = FS_ATTRIB_DIRECTORY;
    59c6:	movs	r2, #16
  return dir + (m_dirIndex & 0XF);
    59c8:	and.w	ip, ip, #15
    59cc:	mov.w	r3, ip, lsl #5
    59d0:	add.w	ip, r0, ip, lsl #5
  dir->attributes = FS_ATTRIB_DIRECTORY;
    59d4:	strb.w	r2, [ip, #11]
  memcpy(&dot, dir, sizeof(dot));
    59d8:	ldr	r0, [r0, r3]
  sector = m_vol->clusterStartSector(m_firstCluster);
    59da:	ldr	r7, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    59dc:	ldr	r3, [r4, #32]
    59de:	ldrb.w	lr, [r7, #6]
    59e2:	subs	r6, r3, #2
  memcpy(&dot, dir, sizeof(dot));
    59e4:	ldr.w	r1, [ip, #4]
    59e8:	ldr.w	r2, [ip, #8]
    59ec:	ldr.w	r3, [ip, #12]
    59f0:	lsl.w	r6, r6, lr
    59f4:	mov	lr, sp
    59f6:	stmia.w	lr!, {r0, r1, r2, r3}
    59fa:	ldr.w	r0, [ip, #16]
    59fe:	ldr.w	r1, [ip, #20]
    5a02:	ldr.w	r2, [ip, #24]
    5a06:	ldr.w	r3, [ip, #28]
    5a0a:	stmia.w	lr!, {r0, r1, r2, r3}
    return m_cache.prepare(sector, options);
    5a0e:	ldr	r3, [r7, #20]
    5a10:	add.w	r0, r7, #36	; 0x24
    5a14:	movs	r2, #1
    5a16:	adds	r1, r6, r3
    dot.name[i] = ' ';
    5a18:	mov.w	r3, #538976288	; 0x20202020
    5a1c:	str.w	r3, [sp, #1]
    5a20:	str.w	r3, [sp, #5]
    5a24:	strh.w	r3, [sp, #9]
    5a28:	bl	29b8 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    5a2c:	mov	ip, r0
    5a2e:	cbz	r0, 5aa2 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x14a>
  memcpy(&dir[0], &dot, sizeof(dot));
    5a30:	movs	r7, #46	; 0x2e
    5a32:	mov	lr, sp
    5a34:	strb.w	r7, [sp]
  memcpy(&dir[1], &dot, sizeof(dot));
    5a38:	mov	r6, lr
  memcpy(&dir[0], &dot, sizeof(dot));
    5a3a:	ldmia.w	lr!, {r0, r1, r2, r3}
    5a3e:	str.w	r0, [ip]
    5a42:	str.w	r1, [ip, #4]
    5a46:	str.w	r2, [ip, #8]
    5a4a:	str.w	r3, [ip, #12]
  dot.name[1] = '.';
    5a4e:	strb.w	r7, [sp, #1]
  memcpy(&dir[0], &dot, sizeof(dot));
    5a52:	ldmia.w	lr!, {r0, r1, r2, r3}
    5a56:	str.w	r0, [ip, #16]
    5a5a:	str.w	r1, [ip, #20]
    5a5e:	str.w	r2, [ip, #24]
    5a62:	str.w	r3, [ip, #28]
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
    5a66:	ldr	r3, [r5, #32]
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
    5a68:	lsrs	r2, r3, #16
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
    5a6a:	strh.w	r3, [sp, #26]
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
    5a6e:	strh.w	r2, [sp, #20]
  memcpy(&dir[1], &dot, sizeof(dot));
    5a72:	ldmia	r6!, {r0, r1, r2, r3}
    5a74:	str.w	r0, [ip, #32]
    5a78:	str.w	r1, [ip, #36]	; 0x24
    5a7c:	str.w	r2, [ip, #40]	; 0x28
    5a80:	str.w	r3, [ip, #44]	; 0x2c
    5a84:	ldmia	r6!, {r0, r1, r2, r3}
    5a86:	str.w	r0, [ip, #48]	; 0x30
    5a8a:	str.w	r1, [ip, #52]	; 0x34
    5a8e:	str.w	r2, [ip, #56]	; 0x38
    5a92:	str.w	r3, [ip, #60]	; 0x3c
  return m_vol->cacheSync();
    5a96:	ldr	r4, [r4, #8]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    5a98:	add.w	r0, r4, #36	; 0x24
    5a9c:	bl	2a38 <FsCache::sync()>
    5aa0:	cbnz	r0, 5aa8 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x150>
}
    5aa2:	movs	r0, #0
    5aa4:	add	sp, #36	; 0x24
    5aa6:	pop	{r4, r5, r6, r7, pc}
    5aa8:	add.w	r0, r4, #564	; 0x234
    5aac:	bl	2a38 <FsCache::sync()>
    5ab0:	cmp	r0, #0
    5ab2:	beq.n	5aa2 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x14a>
    5ab4:	ldr	r0, [r4, #0]
  bool syncDevice() { return m_blockDev->syncDevice(); }
    5ab6:	ldr	r3, [r0, #0]
    5ab8:	ldr	r3, [r3, #28]
    5aba:	add	sp, #36	; 0x24
    5abc:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    5ac0:	bx	r3
    5ac2:	nop

00005ac4 <FatFile::mkdir(FatFile*, char const*, bool)>:
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    5ac4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  FatFile() {}
    5ac8:	movs	r6, #0
    5aca:	sub	sp, #80	; 0x50
    5acc:	mov	r7, r3
  if (isOpen() || !parent->isDir()) {
    5ace:	ldrb	r3, [r0, #0]
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    5ad0:	str	r2, [sp, #4]
    5ad2:	str	r6, [sp, #44]	; 0x2c
  if (isOpen() || !parent->isDir()) {
    5ad4:	cmp	r3, #0
    5ad6:	bne.n	5b70 <FatFile::mkdir(FatFile*, char const*, bool)+0xac>
    5ad8:	ldrb	r3, [r1, #0]
    5ada:	mov	r5, r1
    5adc:	tst.w	r3, #208	; 0xd0
    5ae0:	beq.n	5b70 <FatFile::mkdir(FatFile*, char const*, bool)+0xac>
  if (isDirSeparator(*path)) {
    5ae2:	ldrb	r3, [r2, #0]
    5ae4:	mov	r4, r0
    5ae6:	mov	r9, r2
    5ae8:	cmp	r3, #47	; 0x2f
    5aea:	beq.n	5b78 <FatFile::mkdir(FatFile*, char const*, bool)+0xb4>
    5aec:	add.w	r8, sp, #4
    5af0:	add	r6, sp, #12
    5af2:	cmp	r7, #0
    5af4:	beq.n	5be2 <FatFile::mkdir(FatFile*, char const*, bool)+0x11e>
    if (!open(parent, &fname, O_RDONLY)) {
    5af6:	mov.w	sl, #0
    5afa:	b.n	5b54 <FatFile::mkdir(FatFile*, char const*, bool)+0x90>
    if (!*path) {
    5afc:	ldr	r7, [sp, #4]
    5afe:	ldrb.w	ip, [r7]
    5b02:	cmp.w	ip, #0
    5b06:	beq.w	5c10 <FatFile::mkdir(FatFile*, char const*, bool)+0x14c>
    if (!open(parent, &fname, O_RDONLY)) {
    5b0a:	bl	7504 <FatFile::open(FatFile*, FatLfn_t*, int)>
    5b0e:	mov	r3, r0
      if (!pFlag || !mkdir(parent, &fname)) {
    5b10:	mov	r2, r6
    5b12:	mov	r1, r5
    5b14:	mov	r0, r4
    if (!open(parent, &fname, O_RDONLY)) {
    5b16:	cbnz	r3, 5b1e <FatFile::mkdir(FatFile*, char const*, bool)+0x5a>
      if (!pFlag || !mkdir(parent, &fname)) {
    5b18:	bl	5958 <FatFile::mkdir(FatFile*, FatLfn_t*)>
    5b1c:	cbz	r0, 5b70 <FatFile::mkdir(FatFile*, char const*, bool)+0xac>
    tmpDir = *this;
    5b1e:	mov	lr, r4
    5b20:	add.w	ip, sp, #44	; 0x2c
  if (!isOpen()) {
    5b24:	ldrb	r5, [r4, #0]
    tmpDir = *this;
    5b26:	ldmia.w	lr!, {r0, r1, r2, r3}
    5b2a:	stmia.w	ip!, {r0, r1, r2, r3}
    5b2e:	ldmia.w	lr!, {r0, r1, r2, r3}
    5b32:	ldr.w	lr, [lr]
    5b36:	stmia.w	ip!, {r0, r1, r2, r3}
    5b3a:	mov	r0, r4
    5b3c:	str.w	lr, [ip]
  if (!isOpen()) {
    5b40:	cbz	r5, 5b46 <FatFile::mkdir(FatFile*, char const*, bool)+0x82>
    5b42:	bl	5690 <FatFile::sync() [clone .part.0]>
    if (!parsePathName(path, &fname, &path)) {
    5b46:	ldr.w	r9, [sp, #4]
    parent = &tmpDir;
    5b4a:	add	r5, sp, #44	; 0x2c
  m_attributes = FILE_ATTR_CLOSED;
    5b4c:	strb.w	sl, [r4]
  m_flags = 0;
    5b50:	strb.w	sl, [r4, #2]
    if (!parsePathName(path, &fname, &path)) {
    5b54:	mov	r3, r8
    5b56:	mov	r2, r6
    5b58:	mov	r1, r9
    5b5a:	mov	r0, r4
    5b5c:	bl	7828 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>
    5b60:	mov	ip, r0
    if (!open(parent, &fname, O_RDONLY)) {
    5b62:	mov	r2, r6
    5b64:	mov	r1, r5
    5b66:	movs	r3, #0
    5b68:	mov	r0, r4
    if (!parsePathName(path, &fname, &path)) {
    5b6a:	cmp.w	ip, #0
    5b6e:	bne.n	5afc <FatFile::mkdir(FatFile*, char const*, bool)+0x38>
  switch (vol->fatType()) {
    5b70:	movs	r0, #0
}
    5b72:	add	sp, #80	; 0x50
    5b74:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      path++;
    5b78:	add.w	r9, r9, #1
    5b7c:	str.w	r9, [sp, #4]
    while (isDirSeparator(*path)) {
    5b80:	ldrb.w	r3, [r9]
    5b84:	cmp	r3, #47	; 0x2f
    5b86:	beq.n	5b78 <FatFile::mkdir(FatFile*, char const*, bool)+0xb4>
    if (!tmpDir.openRoot(parent->m_vol)) {
    5b88:	ldr	r5, [r5, #8]
  memset(this, 0, sizeof(FatFile));
    5b8a:	movs	r2, #36	; 0x24
    5b8c:	movs	r1, #0
    5b8e:	add	r0, sp, #44	; 0x2c
    5b90:	bl	10104 <memset>
  m_vol = vol;
    5b94:	str	r5, [sp, #52]	; 0x34
  uint8_t fatType() const { return m_fatType; }
    5b96:	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
    5b98:	cmp	r3, #16
    5b9a:	beq.n	5c20 <FatFile::mkdir(FatFile*, char const*, bool)+0x15c>
    5b9c:	cmp	r3, #32
    5b9e:	bne.n	5b70 <FatFile::mkdir(FatFile*, char const*, bool)+0xac>
    5ba0:	movs	r3, #128	; 0x80
      m_attributes = FILE_ATTR_ROOT_FIXED;
    5ba2:	strb.w	r3, [sp, #44]	; 0x2c
  m_flags = FILE_FLAG_READ;
    5ba6:	movs	r3, #1
    parent = &tmpDir;
    5ba8:	add	r5, sp, #44	; 0x2c
  m_flags = FILE_FLAG_READ;
    5baa:	strb.w	r3, [sp, #46]	; 0x2e
  return true;
    5bae:	b.n	5aec <FatFile::mkdir(FatFile*, char const*, bool)+0x28>
    tmpDir = *this;
    5bb0:	ldmia.w	lr!, {r0, r1, r2, r3}
    parent = &tmpDir;
    5bb4:	mov	r5, ip
  if (!isOpen()) {
    5bb6:	ldrb.w	r9, [r4]
    tmpDir = *this;
    5bba:	stmia.w	ip!, {r0, r1, r2, r3}
    5bbe:	ldmia.w	lr!, {r0, r1, r2, r3}
    5bc2:	stmia.w	ip!, {r0, r1, r2, r3}
    5bc6:	ldr.w	r3, [lr]
    5bca:	str.w	r3, [ip]
  if (!isOpen()) {
    5bce:	cmp.w	r9, #0
    5bd2:	beq.n	5bda <FatFile::mkdir(FatFile*, char const*, bool)+0x116>
    5bd4:	mov	r0, r4
    5bd6:	bl	5690 <FatFile::sync() [clone .part.0]>
    if (!parsePathName(path, &fname, &path)) {
    5bda:	ldr.w	r9, [sp, #4]
  m_attributes = FILE_ATTR_CLOSED;
    5bde:	strb	r7, [r4, #0]
  m_flags = 0;
    5be0:	strb	r7, [r4, #2]
    if (!parsePathName(path, &fname, &path)) {
    5be2:	mov	r3, r8
    5be4:	mov	r1, r9
    5be6:	mov	r2, r6
    5be8:	mov	r0, r4
    5bea:	bl	7828 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>
    if (!open(parent, &fname, O_RDONLY)) {
    5bee:	mov	r2, r6
    5bf0:	mov	r1, r5
    5bf2:	movs	r3, #0
    if (!parsePathName(path, &fname, &path)) {
    5bf4:	cmp	r0, #0
    5bf6:	beq.n	5b70 <FatFile::mkdir(FatFile*, char const*, bool)+0xac>
    if (!*path) {
    5bf8:	ldr	r0, [sp, #4]
    5bfa:	ldrb	r0, [r0, #0]
    5bfc:	cbz	r0, 5c10 <FatFile::mkdir(FatFile*, char const*, bool)+0x14c>
    if (!open(parent, &fname, O_RDONLY)) {
    5bfe:	mov	r0, r4
    5c00:	bl	7504 <FatFile::open(FatFile*, FatLfn_t*, int)>
    tmpDir = *this;
    5c04:	mov	lr, r4
    5c06:	add.w	ip, sp, #44	; 0x2c
    if (!open(parent, &fname, O_RDONLY)) {
    5c0a:	cmp	r0, #0
    5c0c:	beq.n	5b70 <FatFile::mkdir(FatFile*, char const*, bool)+0xac>
    5c0e:	b.n	5bb0 <FatFile::mkdir(FatFile*, char const*, bool)+0xec>
  return mkdir(parent, &fname);
    5c10:	mov	r2, r6
    5c12:	mov	r1, r5
    5c14:	mov	r0, r4
    5c16:	bl	5958 <FatFile::mkdir(FatFile*, FatLfn_t*)>
}
    5c1a:	add	sp, #80	; 0x50
    5c1c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  switch (vol->fatType()) {
    5c20:	movs	r3, #64	; 0x40
    5c22:	b.n	5ba2 <FatFile::mkdir(FatFile*, char const*, bool)+0xde>

00005c24 <FatFile::open(FatFile*, char const*, int)>:
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    5c24:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5c28:	movs	r5, #0
    5c2a:	sub	sp, #80	; 0x50
    5c2c:	mov	r8, r3
  if (isOpen() || !dirFile->isDir()) {
    5c2e:	ldrb	r3, [r0, #0]
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    5c30:	str	r2, [sp, #4]
    5c32:	str	r5, [sp, #44]	; 0x2c
  if (isOpen() || !dirFile->isDir()) {
    5c34:	cmp	r3, #0
    5c36:	bne.n	5ca8 <FatFile::open(FatFile*, char const*, int)+0x84>
    5c38:	ldrb	r3, [r1, #0]
    5c3a:	mov	r6, r1
    5c3c:	tst.w	r3, #208	; 0xd0
    5c40:	beq.n	5ca8 <FatFile::open(FatFile*, char const*, int)+0x84>
  if (isDirSeparator(*path)) {
    5c42:	ldrb	r3, [r2, #0]
    5c44:	mov	r4, r0
    5c46:	mov	r5, r2
    5c48:	cmp	r3, #47	; 0x2f
    5c4a:	beq.n	5cb0 <FatFile::open(FatFile*, char const*, int)+0x8c>
    if (!open(dirFile, &fname, O_RDONLY)) {
    5c4c:	movs	r7, #0
    5c4e:	b.n	5c8e <FatFile::open(FatFile*, char const*, int)+0x6a>
    if (*path == 0) {
    5c50:	ldr	r5, [sp, #4]
    5c52:	ldrb	r5, [r5, #0]
    5c54:	cmp	r5, #0
    5c56:	beq.n	5cde <FatFile::open(FatFile*, char const*, int)+0xba>
    if (!open(dirFile, &fname, O_RDONLY)) {
    5c58:	bl	7504 <FatFile::open(FatFile*, FatLfn_t*, int)>
    tmpDir = *this;
    5c5c:	mov	lr, r4
    5c5e:	add.w	ip, sp, #44	; 0x2c
    if (!open(dirFile, &fname, O_RDONLY)) {
    5c62:	cbz	r0, 5ca8 <FatFile::open(FatFile*, char const*, int)+0x84>
    dirFile = &tmpDir;
    5c64:	mov	r6, ip
  if (!isOpen()) {
    5c66:	ldrb	r5, [r4, #0]
    tmpDir = *this;
    5c68:	ldmia.w	lr!, {r0, r1, r2, r3}
    5c6c:	stmia.w	ip!, {r0, r1, r2, r3}
    5c70:	ldmia.w	lr!, {r0, r1, r2, r3}
    5c74:	stmia.w	ip!, {r0, r1, r2, r3}
    5c78:	ldr.w	r3, [lr]
    5c7c:	mov	r0, r4
    5c7e:	str.w	r3, [ip]
  if (!isOpen()) {
    5c82:	cbz	r5, 5c88 <FatFile::open(FatFile*, char const*, int)+0x64>
    5c84:	bl	5690 <FatFile::sync() [clone .part.0]>
    if (!parsePathName(path, &fname, &path)) {
    5c88:	ldr	r5, [sp, #4]
  m_attributes = FILE_ATTR_CLOSED;
    5c8a:	strb	r7, [r4, #0]
  m_flags = 0;
    5c8c:	strb	r7, [r4, #2]
    if (!parsePathName(path, &fname, &path)) {
    5c8e:	mov	r1, r5
    5c90:	add	r3, sp, #4
    5c92:	add	r2, sp, #12
    5c94:	mov	r0, r4
    5c96:	bl	7828 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>
    5c9a:	mov	r5, r0
    if (!open(dirFile, &fname, O_RDONLY)) {
    5c9c:	add	r2, sp, #12
    5c9e:	mov	r1, r6
    5ca0:	movs	r3, #0
    5ca2:	mov	r0, r4
    if (!parsePathName(path, &fname, &path)) {
    5ca4:	cmp	r5, #0
    5ca6:	bne.n	5c50 <FatFile::open(FatFile*, char const*, int)+0x2c>
  return false;
    5ca8:	movs	r0, #0
}
    5caa:	add	sp, #80	; 0x50
    5cac:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      path++;
    5cb0:	adds	r5, #1
    5cb2:	str	r5, [sp, #4]
    while (isDirSeparator(*path)) {
    5cb4:	ldrb	r1, [r5, #0]
    5cb6:	cmp	r1, #47	; 0x2f
    5cb8:	beq.n	5cb0 <FatFile::open(FatFile*, char const*, int)+0x8c>
    if (*path == 0) {
    5cba:	cbnz	r1, 5cec <FatFile::open(FatFile*, char const*, int)+0xc8>
      return openRoot(dirFile->m_vol);
    5cbc:	ldr	r5, [r6, #8]
  memset(this, 0, sizeof(FatFile));
    5cbe:	movs	r2, #36	; 0x24
    5cc0:	mov	r0, r4
    5cc2:	bl	10104 <memset>
  m_vol = vol;
    5cc6:	str	r5, [r4, #8]
    5cc8:	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
    5cca:	cmp	r3, #16
    5ccc:	beq.n	5d18 <FatFile::open(FatFile*, char const*, int)+0xf4>
    5cce:	cmp	r3, #32
    5cd0:	bne.n	5ca8 <FatFile::open(FatFile*, char const*, int)+0x84>
    5cd2:	movs	r2, #128	; 0x80
  m_flags = FILE_FLAG_READ;
    5cd4:	movs	r3, #1
      m_attributes = FILE_ATTR_ROOT_FIXED;
    5cd6:	strb	r2, [r4, #0]
  return true;
    5cd8:	mov	r0, r3
  m_flags = FILE_FLAG_READ;
    5cda:	strb	r3, [r4, #2]
  return true;
    5cdc:	b.n	5caa <FatFile::open(FatFile*, char const*, int)+0x86>
  return open(dirFile, &fname, oflag);
    5cde:	mov	r3, r8
    5ce0:	add	r2, sp, #12
    5ce2:	bl	7504 <FatFile::open(FatFile*, FatLfn_t*, int)>
}
    5ce6:	add	sp, #80	; 0x50
    5ce8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    5cec:	ldr	r6, [r6, #8]
  memset(this, 0, sizeof(FatFile));
    5cee:	movs	r2, #36	; 0x24
    5cf0:	movs	r1, #0
    5cf2:	add	r0, sp, #44	; 0x2c
    5cf4:	bl	10104 <memset>
  m_vol = vol;
    5cf8:	str	r6, [sp, #52]	; 0x34
    5cfa:	ldrb	r3, [r6, #7]
  switch (vol->fatType()) {
    5cfc:	cmp	r3, #16
    5cfe:	beq.n	5d14 <FatFile::open(FatFile*, char const*, int)+0xf0>
    5d00:	cmp	r3, #32
    5d02:	bne.n	5ca8 <FatFile::open(FatFile*, char const*, int)+0x84>
    5d04:	movs	r3, #128	; 0x80
      m_attributes = FILE_ATTR_ROOT_FIXED;
    5d06:	strb.w	r3, [sp, #44]	; 0x2c
  m_flags = FILE_FLAG_READ;
    5d0a:	movs	r3, #1
    dirFile = &tmpDir;
    5d0c:	add	r6, sp, #44	; 0x2c
  m_flags = FILE_FLAG_READ;
    5d0e:	strb.w	r3, [sp, #46]	; 0x2e
  return true;
    5d12:	b.n	5c4c <FatFile::open(FatFile*, char const*, int)+0x28>
  switch (vol->fatType()) {
    5d14:	movs	r3, #64	; 0x40
    5d16:	b.n	5d06 <FatFile::open(FatFile*, char const*, int)+0xe2>
    5d18:	movs	r2, #64	; 0x40
    5d1a:	b.n	5cd4 <FatFile::open(FatFile*, char const*, int)+0xb0>

00005d1c <FatFile::open(FatVolume*, char const*, int)>:
  return vol && open(vol->vwd(), path, oflag);
    5d1c:	cbz	r1, 5d26 <FatFile::open(FatVolume*, char const*, int)+0xa>
    5d1e:	addw	r1, r1, #1092	; 0x444
    5d22:	b.w	5c24 <FatFile::open(FatFile*, char const*, int)>
}
    5d26:	mov	r0, r1
    5d28:	bx	lr
    5d2a:	nop

00005d2c <FatFile::openCluster(FatFile*)>:
  if (file->m_dirCluster == 0) {
    5d2c:	ldr	r3, [r1, #12]
bool FatFile::openCluster(FatFile* file) {
    5d2e:	push	{r4, r5, r6, lr}
    5d30:	mov	r5, r1
    5d32:	mov	r4, r0
  if (file->m_dirCluster == 0) {
    5d34:	cbnz	r3, 5d60 <FatFile::openCluster(FatFile*)+0x34>
  if (isOpen()) {
    5d36:	ldrb	r6, [r0, #0]
    5d38:	cbz	r6, 5d3e <FatFile::openCluster(FatFile*)+0x12>
  return false;
    5d3a:	mov	r0, r3
}
    5d3c:	pop	{r4, r5, r6, pc}
    return openRoot(file->m_vol);
    5d3e:	ldr	r5, [r1, #8]
  memset(this, 0, sizeof(FatFile));
    5d40:	movs	r2, #36	; 0x24
    5d42:	mov	r1, r6
    5d44:	bl	10104 <memset>
  m_vol = vol;
    5d48:	str	r5, [r4, #8]
    5d4a:	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
    5d4c:	cmp	r3, #16
    5d4e:	beq.n	5d7e <FatFile::openCluster(FatFile*)+0x52>
    5d50:	cmp	r3, #32
    5d52:	bne.n	5d7a <FatFile::openCluster(FatFile*)+0x4e>
    5d54:	movs	r2, #128	; 0x80
  m_flags = FILE_FLAG_READ;
    5d56:	movs	r3, #1
      m_attributes = FILE_ATTR_ROOT_FIXED;
    5d58:	strb	r2, [r4, #0]
  return true;
    5d5a:	mov	r0, r3
  m_flags = FILE_FLAG_READ;
    5d5c:	strb	r3, [r4, #2]
}
    5d5e:	pop	{r4, r5, r6, pc}
  memset(this, 0, sizeof(FatFile));
    5d60:	movs	r2, #36	; 0x24
    5d62:	movs	r1, #0
    5d64:	bl	10104 <memset>
  m_flags = FILE_FLAG_READ;
    5d68:	movs	r0, #1
  m_attributes = FILE_ATTR_SUBDIR;
    5d6a:	movs	r3, #16
  m_flags = FILE_FLAG_READ;
    5d6c:	strb	r0, [r4, #2]
  m_attributes = FILE_ATTR_SUBDIR;
    5d6e:	strb	r3, [r4, #0]
  m_firstCluster = file->m_dirCluster;
    5d70:	ldrd	r2, r3, [r5, #8]
  m_vol = file->m_vol;
    5d74:	str	r2, [r4, #8]
  m_firstCluster = file->m_dirCluster;
    5d76:	str	r3, [r4, #32]
}
    5d78:	pop	{r4, r5, r6, pc}
  switch (vol->fatType()) {
    5d7a:	mov	r0, r6
}
    5d7c:	pop	{r4, r5, r6, pc}
  switch (vol->fatType()) {
    5d7e:	movs	r2, #64	; 0x40
    5d80:	b.n	5d56 <FatFile::openCluster(FatFile*)+0x2a>
    5d82:	nop

00005d84 <FatFile::openRoot(FatVolume*)>:
bool FatFile::openRoot(FatVolume* vol) {
    5d84:	push	{r4, r5, r6, lr}
  if (isOpen()) {
    5d86:	ldrb	r5, [r0, #0]
    5d88:	cbz	r5, 5d8e <FatFile::openRoot(FatVolume*)+0xa>
  return false;
    5d8a:	movs	r0, #0
}
    5d8c:	pop	{r4, r5, r6, pc}
    5d8e:	mov	r6, r1
    5d90:	mov	r4, r0
  memset(this, 0, sizeof(FatFile));
    5d92:	movs	r2, #36	; 0x24
    5d94:	mov	r1, r5
    5d96:	bl	10104 <memset>
  m_vol = vol;
    5d9a:	str	r6, [r4, #8]
    5d9c:	ldrb	r3, [r6, #7]
  switch (vol->fatType()) {
    5d9e:	cmp	r3, #16
    5da0:	beq.n	5db6 <FatFile::openRoot(FatVolume*)+0x32>
    5da2:	cmp	r3, #32
    5da4:	bne.n	5db2 <FatFile::openRoot(FatVolume*)+0x2e>
    5da6:	movs	r2, #128	; 0x80
  m_flags = FILE_FLAG_READ;
    5da8:	movs	r3, #1
      m_attributes = FILE_ATTR_ROOT_FIXED;
    5daa:	strb	r2, [r4, #0]
  return true;
    5dac:	mov	r0, r3
  m_flags = FILE_FLAG_READ;
    5dae:	strb	r3, [r4, #2]
}
    5db0:	pop	{r4, r5, r6, pc}
  switch (vol->fatType()) {
    5db2:	mov	r0, r5
}
    5db4:	pop	{r4, r5, r6, pc}
  switch (vol->fatType()) {
    5db6:	movs	r2, #64	; 0x40
    5db8:	b.n	5da8 <FatFile::openRoot(FatVolume*)+0x24>
    5dba:	nop

00005dbc <FatFile::read(void*, unsigned int)>:
int FatFile::read(void* buf, size_t nbyte) {
    5dbc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5dc0:	vpush	{d8}
  bool isReadable() const { return m_flags & FILE_FLAG_READ; }
    5dc4:	ldrb	r3, [r0, #2]
    5dc6:	sub	sp, #12
    5dc8:	mov	r5, r0
  if (!isReadable()) {
    5dca:	lsls	r7, r3, #31
    5dcc:	bpl.w	5ee8 <FatFile::read(void*, unsigned int)+0x12c>
  bool isFile() const { return m_attributes & FILE_ATTR_FILE; }
    5dd0:	mov	r8, r1
    5dd2:	ldrb	r1, [r0, #0]
    5dd4:	mov	sl, r2
  if (isFile()) {
    5dd6:	lsls	r6, r1, #28
    5dd8:	bmi.w	5efe <FatFile::read(void*, unsigned int)+0x142>
  } else if (isRootFixed()) {
    5ddc:	lsls	r4, r1, #25
    5dde:	bpl.n	5df2 <FatFile::read(void*, unsigned int)+0x36>
        FS_DIR_SIZE * m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    5de0:	ldr	r3, [r0, #8]
    5de2:	ldrh	r2, [r3, #8]
    5de4:	ldr	r3, [r0, #20]
    uint16_t tmp16 =
    5de6:	rsb	r3, r3, r2, lsl #5
    if (nbyte > tmp16) {
    5dea:	uxth	r3, r3
    5dec:	cmp	sl, r3
    5dee:	it	cs
    5df0:	movcs	sl, r3
  while (toRead) {
    5df2:	cmp.w	sl, #0
    5df6:	beq.w	5f58 <FatFile::read(void*, unsigned int)+0x19c>
    uint32_t tmp32 = m_fileSize - m_curPosition;
    5dfa:	ldr	r2, [r5, #20]
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    5dfc:	add.w	r3, r5, #16
    if (isRootFixed()) {
    5e00:	lsls	r0, r1, #25
    uint32_t tmp32 = m_fileSize - m_curPosition;
    5e02:	mov	r6, sl
  uint8_t sectorOfCluster = 0;
    5e04:	mov.w	r9, #0
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    5e08:	vmov	s16, r3
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    5e0c:	ldr	r7, [r5, #8]
    5e0e:	ubfx	fp, r2, #0, #9
    if (isRootFixed()) {
    5e12:	bpl.n	5e90 <FatFile::read(void*, unsigned int)+0xd4>
      sector = m_vol->rootDirStart() +
    5e14:	ldr	r1, [r7, #32]
    5e16:	add.w	r1, r1, r2, lsr #9
    if (offset != 0 || toRead < m_vol->bytesPerSector() ||
    5e1a:	cmp.w	fp, #0
    5e1e:	bne.n	5ec4 <FatFile::read(void*, unsigned int)+0x108>
    5e20:	cmp.w	r6, #512	; 0x200
    5e24:	bcc.n	5ec4 <FatFile::read(void*, unsigned int)+0x108>
  uint32_t sector() { return m_sector; }
    5e26:	ldr	r2, [r7, #44]	; 0x2c
    5e28:	cmp	r1, r2
    5e2a:	beq.n	5ec4 <FatFile::read(void*, unsigned int)+0x108>
    } else if (toRead >= 2 * m_vol->bytesPerSector()) {
    5e2c:	cmp.w	r6, #1024	; 0x400
    5e30:	bcc.w	5f38 <FatFile::read(void*, unsigned int)+0x17c>
      if (!isRootFixed()) {
    5e34:	ldrb	r0, [r5, #0]
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    5e36:	lsrs	r3, r6, #9
      if (!isRootFixed()) {
    5e38:	lsls	r0, r0, #25
    5e3a:	bmi.n	5e48 <FatFile::read(void*, unsigned int)+0x8c>
        uint32_t mb = m_vol->sectorsPerCluster() - sectorOfCluster;
    5e3c:	ldrb	r0, [r7, #4]
    5e3e:	sub.w	r0, r0, r9
    5e42:	cmp	r3, r0
    5e44:	it	cs
    5e46:	movcs	r3, r0
    return sector <= m_sector && m_sector < (sector + count);
    5e48:	cmp	r1, r2
      n = ns << m_vol->bytesPerSectorShift();
    5e4a:	mov.w	r4, r3, lsl #9
    5e4e:	bhi.n	5e6a <FatFile::read(void*, unsigned int)+0xae>
    5e50:	adds	r0, r1, r3
    5e52:	cmp	r2, r0
    5e54:	bcs.n	5e6a <FatFile::read(void*, unsigned int)+0xae>
    if (isCached(sector, count) && !sync()) {
    5e56:	add.w	r0, r7, #36	; 0x24
    5e5a:	strd	r1, r3, [sp]
    5e5e:	bl	2a38 <FsCache::sync()>
    5e62:	ldrd	r1, r3, [sp]
    5e66:	cmp	r0, #0
    5e68:	beq.n	5ee8 <FatFile::read(void*, unsigned int)+0x12c>
    return m_blockDev->readSectors(sector, dst, count);
    5e6a:	ldr	r0, [r7, #40]	; 0x28
    5e6c:	ldr	r2, [r0, #0]
    5e6e:	ldr	r7, [r2, #20]
    5e70:	mov	r2, r8
    5e72:	blx	r7
      if (!m_vol->cacheSafeRead(sector, dst, ns)) {
    5e74:	cmp	r0, #0
    5e76:	beq.n	5ee8 <FatFile::read(void*, unsigned int)+0x12c>
    m_curPosition += n;
    5e78:	ldr	r2, [r5, #20]
  while (toRead) {
    5e7a:	subs	r6, r6, r4
    dst += n;
    5e7c:	add	r8, r4
    m_curPosition += n;
    5e7e:	add	r2, r4
    5e80:	str	r2, [r5, #20]
  while (toRead) {
    5e82:	beq.n	5f58 <FatFile::read(void*, unsigned int)+0x19c>
  bool isRootFixed() const { return m_attributes & FILE_ATTR_ROOT_FIXED; }
    5e84:	ldrb	r1, [r5, #0]
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    5e86:	ubfx	fp, r2, #0, #9
    5e8a:	ldr	r7, [r5, #8]
    if (isRootFixed()) {
    5e8c:	lsls	r0, r1, #25
    5e8e:	bmi.n	5e14 <FatFile::read(void*, unsigned int)+0x58>
    return (position >> 9) & m_clusterSectorMask;
    5e90:	ldrb.w	r9, [r7, #5]
    5e94:	and.w	r9, r9, r2, lsr #9
      if (offset == 0 && sectorOfCluster == 0) {
    5e98:	cmp.w	fp, #0
    5e9c:	bne.n	5f0c <FatFile::read(void*, unsigned int)+0x150>
    5e9e:	cmp.w	r9, #0
    5ea2:	bne.n	5f0c <FatFile::read(void*, unsigned int)+0x150>
        if (m_curPosition == 0) {
    5ea4:	cmp	r2, #0
    5ea6:	bne.n	5f10 <FatFile::read(void*, unsigned int)+0x154>
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    5ea8:	lsls	r2, r1, #24
  uint32_t rootDirStart() const { return m_rootDirStart; }
    5eaa:	ite	mi
    5eac:	ldrmi	r2, [r7, #32]
    5eae:	ldrpl	r2, [r5, #32]
          m_curCluster++;
    5eb0:	str	r2, [r5, #16]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    5eb2:	subs	r2, #2
    5eb4:	ldrb	r0, [r7, #6]
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    5eb6:	ldr	r1, [r7, #20]
    5eb8:	lsls	r2, r0
    5eba:	add	r1, r9
    5ebc:	add	r1, r2
    if (offset != 0 || toRead < m_vol->bytesPerSector() ||
    5ebe:	cmp.w	fp, #0
    5ec2:	beq.n	5e20 <FatFile::read(void*, unsigned int)+0x64>
      n = m_vol->bytesPerSector() - offset;
    5ec4:	rsb	r4, fp, #512	; 0x200
    return m_cache.prepare(sector, options);
    5ec8:	movs	r2, #0
    5eca:	add.w	r0, r7, #36	; 0x24
    5ece:	cmp	r4, r6
    5ed0:	it	cs
    5ed2:	movcs	r4, r6
    5ed4:	bl	29b8 <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    5ed8:	cbz	r0, 5ee8 <FatFile::read(void*, unsigned int)+0x12c>
      memcpy(dst, src, n);
    5eda:	add.w	r1, r0, fp
    5ede:	mov	r2, r4
    5ee0:	mov	r0, r8
    5ee2:	bl	b09c <memcpy>
    5ee6:	b.n	5e78 <FatFile::read(void*, unsigned int)+0xbc>
  m_error |= READ_ERROR;
    5ee8:	ldrb	r3, [r5, #1]
  return -1;
    5eea:	mov.w	r0, #4294967295
  m_error |= READ_ERROR;
    5eee:	orr.w	r3, r3, #2
    5ef2:	strb	r3, [r5, #1]
}
    5ef4:	add	sp, #12
    5ef6:	vpop	{d8}
    5efa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    uint32_t tmp32 = m_fileSize - m_curPosition;
    5efe:	ldr	r3, [r0, #28]
    5f00:	ldr	r2, [r0, #20]
    5f02:	subs	r3, r3, r2
    5f04:	cmp	sl, r3
    5f06:	it	cs
    5f08:	movcs	sl, r3
    5f0a:	b.n	5df2 <FatFile::read(void*, unsigned int)+0x36>
          m_curCluster++;
    5f0c:	ldr	r2, [r5, #16]
    5f0e:	b.n	5eb2 <FatFile::read(void*, unsigned int)+0xf6>
        } else if (isFile() && isContiguous()) {
    5f10:	lsls	r3, r1, #28
    5f12:	bpl.n	5f20 <FatFile::read(void*, unsigned int)+0x164>
    5f14:	ldrb	r2, [r5, #2]
    5f16:	lsls	r4, r2, #25
    5f18:	bpl.n	5f20 <FatFile::read(void*, unsigned int)+0x164>
          m_curCluster++;
    5f1a:	ldr	r2, [r5, #16]
    5f1c:	adds	r2, #1
    5f1e:	b.n	5eb0 <FatFile::read(void*, unsigned int)+0xf4>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    5f20:	vmov	r2, s16
    5f24:	mov	r0, r7
    5f26:	ldr	r1, [r5, #16]
    5f28:	bl	6958 <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    5f2c:	cmp	r0, #0
    5f2e:	blt.n	5ee8 <FatFile::read(void*, unsigned int)+0x12c>
          if (fg == 0) {
    5f30:	beq.n	5f4c <FatFile::read(void*, unsigned int)+0x190>
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    5f32:	ldr	r7, [r5, #8]
    5f34:	ldr	r2, [r5, #16]
    5f36:	b.n	5eb2 <FatFile::read(void*, unsigned int)+0xf6>
    return m_blockDev->readSector(sector, dst);
    5f38:	ldr	r0, [r7, #40]	; 0x28
    5f3a:	mov	r2, r8
    5f3c:	ldr	r3, [r0, #0]
    5f3e:	ldr	r3, [r3, #16]
    5f40:	blx	r3
      if (!m_vol->cacheSafeRead(sector, dst)) {
    5f42:	cmp	r0, #0
    5f44:	beq.n	5ee8 <FatFile::read(void*, unsigned int)+0x12c>
      n = m_vol->bytesPerSector();
    5f46:	mov.w	r4, #512	; 0x200
    5f4a:	b.n	5e78 <FatFile::read(void*, unsigned int)+0xbc>
            if (isDir()) {
    5f4c:	ldrb	r3, [r5, #0]
    5f4e:	tst.w	r3, #208	; 0xd0
    5f52:	beq.n	5ee8 <FatFile::read(void*, unsigned int)+0x12c>
  return nbyte - toRead;
    5f54:	sub.w	sl, sl, r6
    5f58:	mov	r0, sl
}
    5f5a:	add	sp, #12
    5f5c:	vpop	{d8}
    5f60:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00005f64 <FatFile::peek()>:
int FatFile::peek() {
    5f64:	push	{r4, r5, r6, lr}
    5f66:	sub	sp, #8
    return read(&b, 1) == 1 ? b : -1;
    5f68:	movs	r2, #1
    5f6a:	mov	r4, r0
    5f6c:	add.w	r1, sp, #7
  uint32_t saveCurCluster = m_curCluster;
    5f70:	ldrd	r6, r5, [r0, #16]
    5f74:	bl	5dbc <FatFile::read(void*, unsigned int)>
    5f78:	cmp	r0, #1
    5f7a:	ite	eq
    5f7c:	ldrbeq.w	r0, [sp, #7]
    5f80:	movne.w	r0, #4294967295
  m_curCluster = saveCurCluster;
    5f84:	strd	r6, r5, [r4, #16]
}
    5f88:	add	sp, #8
    5f8a:	pop	{r4, r5, r6, pc}

00005f8c <FatFile::readDirCache(bool)>:
  uint8_t i = (m_curPosition >> 5) & 0XF;
    5f8c:	ldr	r3, [r0, #20]
  if (i == 0 || !skipReadOk) {
    5f8e:	tst.w	r3, #480	; 0x1e0
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
    5f92:	push	{r4, r5, lr}
    5f94:	mov	r4, r0
    5f96:	sub	sp, #12
  uint8_t i = (m_curPosition >> 5) & 0XF;
    5f98:	ubfx	r5, r3, #5, #4
  if (i == 0 || !skipReadOk) {
    5f9c:	beq.n	5fb2 <FatFile::readDirCache(bool)+0x26>
    5f9e:	cmp	r1, #1
    5fa0:	bne.n	5fb2 <FatFile::readDirCache(bool)+0x26>
    m_curPosition += FS_DIR_SIZE;
    5fa2:	adds	r3, #32
    5fa4:	str	r3, [r0, #20]
  uint8_t* cacheBuffer() { return m_buffer; }
    5fa6:	ldr	r0, [r4, #8]
    5fa8:	adds	r0, #52	; 0x34
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    5faa:	add.w	r0, r0, r5, lsl #5
}
    5fae:	add	sp, #12
    5fb0:	pop	{r4, r5, pc}
    int8_t n = read(&n, 1);
    5fb2:	movs	r2, #1
    5fb4:	add.w	r1, sp, #7
    5fb8:	mov	r0, r4
    5fba:	bl	5dbc <FatFile::read(void*, unsigned int)>
    if (n != 1) {
    5fbe:	sxtb	r0, r0
    5fc0:	cmp	r0, #1
    5fc2:	bne.n	5fcc <FatFile::readDirCache(bool)+0x40>
    m_curPosition += FS_DIR_SIZE - 1;
    5fc4:	ldr	r3, [r4, #20]
    5fc6:	adds	r3, #31
    5fc8:	str	r3, [r4, #20]
    5fca:	b.n	5fa6 <FatFile::readDirCache(bool)+0x1a>
  return nullptr;
    5fcc:	movs	r0, #0
    5fce:	b.n	5fae <FatFile::readDirCache(bool)+0x22>

00005fd0 <FatFile::rename(FatFile*, char const*)>:
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    5fd0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!(isFile() || isSubDir())) {
    5fd4:	ldrb	r3, [r0, #0]
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    5fd6:	sub	sp, #104	; 0x68
  FatFile() {}
    5fd8:	movs	r6, #0
  if (!(isFile() || isSubDir())) {
    5fda:	tst.w	r3, #24
    5fde:	str	r6, [sp, #32]
    5fe0:	str	r6, [sp, #68]	; 0x44
    5fe2:	beq.n	5ff2 <FatFile::rename(FatFile*, char const*)+0x22>
    5fe4:	mov	r7, r2
  if (m_vol != dirFile->m_vol) {
    5fe6:	ldr	r3, [r1, #8]
    5fe8:	ldr	r2, [r0, #8]
    5fea:	mov	r4, r0
    5fec:	mov	r5, r1
    5fee:	cmp	r2, r3
    5ff0:	beq.n	5ffa <FatFile::rename(FatFile*, char const*)+0x2a>
  return false;
    5ff2:	movs	r0, #0
}
    5ff4:	add	sp, #104	; 0x68
    5ff6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!isOpen()) {
    5ffa:	bl	5690 <FatFile::sync() [clone .part.0]>
  oldFile = *this;
    5ffe:	mov	lr, r4
    6000:	add.w	ip, sp, #68	; 0x44
    6004:	ldmia.w	lr!, {r0, r1, r2, r3}
    6008:	stmia.w	ip!, {r0, r1, r2, r3}
    600c:	ldmia.w	lr!, {r0, r1, r2, r3}
    6010:	stmia.w	ip!, {r0, r1, r2, r3}
    6014:	ldr.w	r3, [lr]
    6018:	mov	r2, r6
    601a:	ldr	r1, [r4, #24]
    601c:	str.w	r3, [ip]
    6020:	ldr	r3, [r4, #8]
    6022:	add.w	r0, r3, #36	; 0x24
    6026:	bl	29b8 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    602a:	cmp	r0, #0
    602c:	beq.n	5ff2 <FatFile::rename(FatFile*, char const*)+0x22>
  return dir + (m_dirIndex & 0XF);
    602e:	ldrh	r2, [r4, #4]
  memcpy(&entry, dir, sizeof(entry));
    6030:	mov	ip, sp
  if (isFile()) {
    6032:	ldrb.w	r8, [r4]
  return dir + (m_dirIndex & 0XF);
    6036:	and.w	r2, r2, #15
  memcpy(&entry, dir, sizeof(entry));
    603a:	add.w	lr, r0, r2, lsl #5
    603e:	lsls	r2, r2, #5
    6040:	ldr.w	r1, [lr, #4]
    6044:	ldr	r0, [r0, r2]
    6046:	ldr.w	r3, [lr, #12]
    604a:	ldr.w	r2, [lr, #8]
    604e:	stmia.w	ip!, {r0, r1, r2, r3}
    6052:	ldr.w	r1, [lr, #20]
    6056:	ldr.w	r2, [lr, #24]
    605a:	ldr.w	r3, [lr, #28]
    605e:	ldr.w	r0, [lr, #16]
    6062:	stmia.w	ip!, {r0, r1, r2, r3}
  if (isFile()) {
    6066:	ands.w	r3, r8, #8
    if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    606a:	mov	r2, r7
    606c:	mov	r1, r5
  if (isFile()) {
    606e:	bne.w	61a8 <FatFile::rename(FatFile*, char const*)+0x1d8>
    if (!file.mkdir(dirFile, newPath, false)) {
    6072:	add	r0, sp, #32
    6074:	bl	5ac4 <FatFile::mkdir(FatFile*, char const*, bool)>
    6078:	cmp	r0, #0
    607a:	beq.n	5ff2 <FatFile::rename(FatFile*, char const*)+0x22>
    dirCluster = file.m_firstCluster;
    607c:	ldr	r6, [sp, #64]	; 0x40
  m_dirIndex = file.m_dirIndex;
    607e:	ldrh.w	r3, [sp, #36]	; 0x24
  file.m_attributes = FILE_ATTR_CLOSED;
    6082:	movs	r5, #0
  m_dirSector = file.m_dirSector;
    6084:	ldr	r1, [sp, #56]	; 0x38
    6086:	movs	r2, #1
  m_dirIndex = file.m_dirIndex;
    6088:	strh	r3, [r4, #4]
  m_lfnOrd = file.m_lfnOrd;
    608a:	ldrb.w	r3, [sp, #35]	; 0x23
    608e:	ldr	r0, [r4, #8]
    6090:	strb	r3, [r4, #3]
  m_dirCluster = file.m_dirCluster;
    6092:	ldr	r3, [sp, #44]	; 0x2c
    6094:	adds	r0, #36	; 0x24
  m_dirSector = file.m_dirSector;
    6096:	str	r1, [r4, #24]
  m_dirCluster = file.m_dirCluster;
    6098:	str	r3, [r4, #12]
  file.m_attributes = FILE_ATTR_CLOSED;
    609a:	strb.w	r5, [sp, #32]
  file.m_flags = 0;
    609e:	strb.w	r5, [sp, #34]	; 0x22
    60a2:	bl	29b8 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    60a6:	cmp	r0, #0
    60a8:	beq.n	5ff2 <FatFile::rename(FatFile*, char const*)+0x22>
  return dir + (m_dirIndex & 0XF);
    60aa:	ldrh	r3, [r4, #4]
    60ac:	and.w	r3, r3, #15
    60b0:	add.w	r0, r0, r3, lsl #5
  memcpy(&dir->createTimeMs, &entry.createTimeMs,
    60b4:	ldr.w	r3, [sp, #13]
    60b8:	str.w	r3, [r0, #13]
    60bc:	ldr.w	r3, [sp, #17]
    60c0:	str.w	r3, [r0, #17]
    60c4:	ldr.w	r3, [sp, #21]
    60c8:	str.w	r3, [r0, #21]
    60cc:	ldr.w	r3, [sp, #25]
    60d0:	str.w	r3, [r0, #25]
    60d4:	ldrh.w	r3, [sp, #29]
    60d8:	strh.w	r3, [r0, #29]
    60dc:	ldrb.w	r3, [sp, #31]
    60e0:	strb	r3, [r0, #31]
  dir->attributes = entry.attributes;
    60e2:	ldrb.w	r3, [sp, #11]
    60e6:	strb	r3, [r0, #11]
  if (dirCluster) {
    60e8:	cmp	r6, #0
    60ea:	beq.n	6164 <FatFile::rename(FatFile*, char const*)+0x194>
    uint32_t sector = m_vol->clusterStartSector(dirCluster);
    60ec:	ldr	r0, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    60ee:	subs	r3, r6, #2
    return m_cache.prepare(sector, options);
    60f0:	mov	r2, r5
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    60f2:	ldrb	r1, [r0, #6]
    return m_cache.prepare(sector, options);
    60f4:	adds	r0, #36	; 0x24
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    60f6:	lsls	r3, r1
    60f8:	ldr.w	r1, [r0, #-16]
    return m_cache.prepare(sector, options);
    60fc:	add	r1, r3
    60fe:	bl	29b8 <FsCache::prepare(unsigned long, unsigned char)>
    if (!dir) {
    6102:	mov	r5, r0
    6104:	cmp	r0, #0
    6106:	beq.w	5ff2 <FatFile::rename(FatFile*, char const*)+0x22>
    memcpy(&entry, &dir[1], sizeof(entry));
    610a:	ldr	r0, [r0, #32]
    610c:	mov	r7, sp
    610e:	ldr	r1, [r5, #36]	; 0x24
    6110:	ldr	r2, [r5, #40]	; 0x28
    6112:	ldr	r3, [r5, #44]	; 0x2c
    6114:	stmia	r7!, {r0, r1, r2, r3}
    6116:	ldr	r0, [r5, #48]	; 0x30
    6118:	ldr	r1, [r5, #52]	; 0x34
    611a:	ldr	r2, [r5, #56]	; 0x38
    611c:	ldr	r3, [r5, #60]	; 0x3c
    611e:	stmia	r7!, {r0, r1, r2, r3}
    if (!m_vol->freeChain(dirCluster)) {
    6120:	mov	r1, r6
    6122:	ldr	r0, [r4, #8]
    6124:	bl	6aec <FatPartition::freeChain(unsigned long)>
    6128:	cmp	r0, #0
    612a:	beq.w	5ff2 <FatFile::rename(FatFile*, char const*)+0x22>
    sector = m_vol->clusterStartSector(m_firstCluster);
    612e:	ldr	r0, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    6130:	ldr	r3, [r4, #32]
    6132:	ldrb	r2, [r0, #6]
    return m_cache.prepare(sector, options);
    6134:	adds	r0, #36	; 0x24
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    6136:	subs	r3, #2
    6138:	ldr.w	r1, [r0, #-16]
    613c:	lsls	r3, r2
    return m_cache.prepare(sector, options);
    613e:	movs	r2, #1
    6140:	add	r1, r3
    6142:	bl	29b8 <FsCache::prepare(unsigned long, unsigned char)>
    if (!dir) {
    6146:	mov	r6, r0
    6148:	cmp	r0, #0
    614a:	beq.w	5ff2 <FatFile::rename(FatFile*, char const*)+0x22>
    memcpy(&dir[1], &entry, sizeof(entry));
    614e:	mov	r5, sp
    6150:	ldmia	r5!, {r0, r1, r2, r3}
    6152:	str	r0, [r6, #32]
    6154:	str	r1, [r6, #36]	; 0x24
    6156:	str	r2, [r6, #40]	; 0x28
    6158:	str	r3, [r6, #44]	; 0x2c
    615a:	ldmia	r5!, {r0, r1, r2, r3}
    615c:	str	r0, [r6, #48]	; 0x30
    615e:	str	r1, [r6, #52]	; 0x34
    6160:	str	r2, [r6, #56]	; 0x38
    6162:	str	r3, [r6, #60]	; 0x3c
  oldFile.m_firstCluster = 0;
    6164:	movs	r1, #0
  oldFile.m_flags = FILE_FLAG_WRITE;
    6166:	movs	r2, #2
  oldFile.m_attributes = FILE_ATTR_FILE;
    6168:	movs	r3, #8
  if (!oldFile.remove()) {
    616a:	add	r0, sp, #68	; 0x44
  oldFile.m_firstCluster = 0;
    616c:	str	r1, [sp, #100]	; 0x64
  oldFile.m_flags = FILE_FLAG_WRITE;
    616e:	strb.w	r2, [sp, #70]	; 0x46
  oldFile.m_attributes = FILE_ATTR_FILE;
    6172:	strb.w	r3, [sp, #68]	; 0x44
  if (!oldFile.remove()) {
    6176:	bl	78e4 <FatFile::remove()>
    617a:	cmp	r0, #0
    617c:	beq.w	5ff2 <FatFile::rename(FatFile*, char const*)+0x22>
  return m_vol->cacheSync();
    6180:	ldr	r4, [r4, #8]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    6182:	add.w	r0, r4, #36	; 0x24
    6186:	bl	2a38 <FsCache::sync()>
    618a:	cmp	r0, #0
    618c:	beq.w	5ff2 <FatFile::rename(FatFile*, char const*)+0x22>
    6190:	add.w	r0, r4, #564	; 0x234
    6194:	bl	2a38 <FsCache::sync()>
    6198:	cmp	r0, #0
    619a:	beq.w	5ff2 <FatFile::rename(FatFile*, char const*)+0x22>
    619e:	ldr	r0, [r4, #0]
  bool syncDevice() { return m_blockDev->syncDevice(); }
    61a0:	ldr	r3, [r0, #0]
    61a2:	ldr	r3, [r3, #28]
    61a4:	blx	r3
    61a6:	b.n	5ff4 <FatFile::rename(FatFile*, char const*)+0x24>
    if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    61a8:	movw	r3, #2561	; 0xa01
    61ac:	mov	r0, ip
    61ae:	bl	5c24 <FatFile::open(FatFile*, char const*, int)>
    61b2:	cmp	r0, #0
    61b4:	bne.w	607e <FatFile::rename(FatFile*, char const*)+0xae>
    61b8:	b.n	5ff2 <FatFile::rename(FatFile*, char const*)+0x22>
    61ba:	nop

000061bc <FatFile::rmdir()>:
  if (!isSubDir() || (!USE_LONG_FILE_NAMES && isLFN())) {
    61bc:	ldrb	r3, [r0, #0]
    61be:	lsls	r2, r3, #27
    61c0:	bmi.n	61c6 <FatFile::rmdir()+0xa>
}
    61c2:	movs	r0, #0
    61c4:	bx	lr
  if (pos == m_curPosition) {
    61c6:	ldr	r3, [r0, #20]
bool FatFile::rmdir() {
    61c8:	push	{r4, r5, lr}
    61ca:	mov	r4, r0
    61cc:	sub	sp, #12
  if (pos == m_curPosition) {
    61ce:	cbz	r3, 61de <FatFile::rmdir()+0x22>
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    61d0:	ldrb	r3, [r0, #2]
    m_curCluster = 0;
    61d2:	movs	r2, #0
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    61d4:	bic.w	r3, r3, #32
  m_curPosition = pos;
    61d8:	strd	r2, r2, [r0, #16]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    61dc:	strb	r3, [r0, #2]
bool FatFile::rmdir() {
    61de:	movs	r2, #0
  if (i == 0 || !skipReadOk) {
    61e0:	tst.w	r2, #480	; 0x1e0
  uint8_t i = (m_curPosition >> 5) & 0XF;
    61e4:	ubfx	r5, r2, #5, #4
    m_curPosition += FS_DIR_SIZE;
    61e8:	add.w	r2, r2, #32
  if (i == 0 || !skipReadOk) {
    61ec:	beq.n	6212 <FatFile::rmdir()+0x56>
    m_curPosition += FS_DIR_SIZE;
    61ee:	str	r2, [r4, #20]
    61f0:	ldr	r3, [r4, #8]
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    61f2:	lsls	r1, r5, #5
    61f4:	adds	r3, #52	; 0x34
    if (dir->name[0] == FAT_NAME_FREE) {
    61f6:	ldrb	r1, [r3, r1]
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    61f8:	add.w	r3, r3, r5, lsl #5
    if (dir->name[0] == FAT_NAME_FREE) {
    61fc:	cbz	r1, 6232 <FatFile::rmdir()+0x76>
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    61fe:	cmp	r1, #229	; 0xe5
    6200:	beq.n	61e0 <FatFile::rmdir()+0x24>
    6202:	cmp	r1, #46	; 0x2e
    6204:	beq.n	61e0 <FatFile::rmdir()+0x24>
    if (isFatFileOrSubdir(dir)) {
    6206:	ldrb	r3, [r3, #11]
    6208:	lsls	r3, r3, #28
    620a:	bmi.n	61e0 <FatFile::rmdir()+0x24>
}
    620c:	movs	r0, #0
    620e:	add	sp, #12
    6210:	pop	{r4, r5, pc}
    int8_t n = read(&n, 1);
    6212:	movs	r2, #1
    6214:	add.w	r1, sp, #7
    6218:	mov	r0, r4
    621a:	bl	5dbc <FatFile::read(void*, unsigned int)>
    if (n != 1) {
    621e:	sxtb	r0, r0
    6220:	cmp	r0, #1
    6222:	bne.n	622c <FatFile::rmdir()+0x70>
    m_curPosition += FS_DIR_SIZE - 1;
    6224:	ldr	r2, [r4, #20]
    6226:	adds	r2, #31
    6228:	str	r2, [r4, #20]
    622a:	b.n	61f0 <FatFile::rmdir()+0x34>
      if (!getError()) {
    622c:	ldrb	r3, [r4, #1]
    622e:	cmp	r3, #0
    6230:	bne.n	620c <FatFile::rmdir()+0x50>
  m_flags |= FILE_FLAG_WRITE;
    6232:	ldrb	r3, [r4, #2]
  m_attributes = FILE_ATTR_FILE;
    6234:	movs	r2, #8
  return remove();
    6236:	mov	r0, r4
  m_flags |= FILE_FLAG_WRITE;
    6238:	orr.w	r3, r3, #2
  m_attributes = FILE_ATTR_FILE;
    623c:	strb	r2, [r4, #0]
  m_flags |= FILE_FLAG_WRITE;
    623e:	strb	r3, [r4, #2]
}
    6240:	add	sp, #12
    6242:	ldmia.w	sp!, {r4, r5, lr}
  return remove();
    6246:	b.w	78e4 <FatFile::remove()>
    624a:	nop

0000624c <FatFile::seekSet(unsigned long)>:
bool FatFile::seekSet(uint32_t pos) {
    624c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  bool isOpen() const { return m_attributes; }
    6250:	ldrb	r3, [r0, #0]
    6252:	mov	r4, r0
  uint32_t tmp = m_curCluster;
    6254:	ldr	r7, [r0, #16]
  if (!isOpen()) {
    6256:	cmp	r3, #0
    6258:	beq.n	62ce <FatFile::seekSet(unsigned long)+0x82>
    625a:	mov	r5, r1
  if (pos == m_curPosition) {
    625c:	ldr	r1, [r0, #20]
    625e:	cmp	r1, r5
    6260:	beq.n	62e8 <FatFile::seekSet(unsigned long)+0x9c>
  if (pos == 0) {
    6262:	cmp	r5, #0
    6264:	beq.n	62d6 <FatFile::seekSet(unsigned long)+0x8a>
  if (isFile()) {
    6266:	lsls	r0, r3, #28
    6268:	bpl.n	62c0 <FatFile::seekSet(unsigned long)+0x74>
    if (pos > m_fileSize) {
    626a:	ldr	r2, [r4, #28]
    626c:	cmp	r2, r5
    626e:	bcc.n	62ce <FatFile::seekSet(unsigned long)+0x82>
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    6270:	ldr.w	ip, [r4, #8]
    6274:	subs	r6, r5, #1
  bool isContiguous() const { return m_flags & FILE_FLAG_CONTIGUOUS; }
    6276:	ldrb	r2, [r4, #2]
    return m_sectorsPerClusterShift + m_bytesPerSectorShift;
    6278:	ldrb.w	r0, [ip, #6]
  if (isContiguous()) {
    627c:	tst.w	r2, #64	; 0x40
    6280:	add.w	r0, r0, #9
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    6284:	uxtb	r0, r0
    6286:	lsr.w	r6, r6, r0
  if (isContiguous()) {
    628a:	bne.n	62ee <FatFile::seekSet(unsigned long)+0xa2>
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());
    628c:	subs	r2, r1, #1
    628e:	lsrs	r2, r0
  if (nNew < nCur || m_curPosition == 0) {
    6290:	cbz	r1, 6296 <FatFile::seekSet(unsigned long)+0x4a>
    6292:	cmp	r6, r2
    6294:	bcs.n	62f6 <FatFile::seekSet(unsigned long)+0xaa>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    6296:	lsls	r3, r3, #24
  uint32_t rootDirStart() const { return m_rootDirStart; }
    6298:	ite	mi
    629a:	ldrmi.w	r3, [ip, #32]
    629e:	ldrpl	r3, [r4, #32]
    62a0:	str	r3, [r4, #16]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    62a2:	add.w	r8, r4, #16
    62a6:	b.n	62b6 <FatFile::seekSet(unsigned long)+0x6a>
    62a8:	ldr	r1, [r4, #16]
    62aa:	subs	r6, #1
    62ac:	ldr	r0, [r4, #8]
    62ae:	bl	6958 <FatPartition::fatGet(unsigned long, unsigned long*)>
    62b2:	cmp	r0, #0
    62b4:	ble.n	62ce <FatFile::seekSet(unsigned long)+0x82>
    62b6:	mov	r2, r8
  while (nNew--) {
    62b8:	cmp	r6, #0
    62ba:	bne.n	62a8 <FatFile::seekSet(unsigned long)+0x5c>
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    62bc:	ldrb	r2, [r4, #2]
    62be:	b.n	62da <FatFile::seekSet(unsigned long)+0x8e>
  } else if (isRootFixed()) {
    62c0:	lsls	r2, r3, #25
    62c2:	bpl.n	6270 <FatFile::seekSet(unsigned long)+0x24>
  uint16_t rootDirEntryCount() const { return m_rootDirEntryCount; }
    62c4:	ldr	r3, [r4, #8]
    if (pos <= FS_DIR_SIZE * m_vol->rootDirEntryCount()) {
    62c6:	ldrh	r3, [r3, #8]
    62c8:	cmp.w	r5, r3, lsl #5
    62cc:	bls.n	62bc <FatFile::seekSet(unsigned long)+0x70>
  return false;
    62ce:	movs	r0, #0
  m_curCluster = tmp;
    62d0:	str	r7, [r4, #16]
}
    62d2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    62d6:	ldrb	r2, [r0, #2]
    m_curCluster = 0;
    62d8:	str	r5, [r0, #16]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    62da:	bic.w	r2, r2, #32
  return true;
    62de:	movs	r0, #1
  m_curPosition = pos;
    62e0:	str	r5, [r4, #20]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    62e2:	strb	r2, [r4, #2]
}
    62e4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return true;
    62e8:	movs	r0, #1
}
    62ea:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_curCluster = m_firstCluster + nNew;
    62ee:	ldr	r3, [r4, #32]
    62f0:	add	r3, r6
    62f2:	str	r3, [r4, #16]
    goto done;
    62f4:	b.n	62da <FatFile::seekSet(unsigned long)+0x8e>
    nNew -= nCur;
    62f6:	subs	r6, r6, r2
    62f8:	b.n	62a2 <FatFile::seekSet(unsigned long)+0x56>
    62fa:	nop

000062fc <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>:
                              oflag_t oflag, uint8_t lfnOrd) {
    62fc:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6300:	mov	r8, r1
    6302:	mov	r5, r2
  memset(this, 0, sizeof(FatFile));
    6304:	movs	r1, #0
    6306:	movs	r2, #36	; 0x24
                              oflag_t oflag, uint8_t lfnOrd) {
    6308:	mov	r4, r0
    630a:	mov	r6, r3
    630c:	ldrb.w	r7, [sp, #24]
  memset(this, 0, sizeof(FatFile));
    6310:	bl	10104 <memset>
  m_vol = dirFile->m_vol;
    6314:	ldr.w	r0, [r8, #8]
  m_dirCluster = dirFile->m_firstCluster;
    6318:	ldr.w	r3, [r8, #32]
  m_dirIndex = dirIndex;
    631c:	strh	r5, [r4, #4]
  dir += 0XF & dirIndex;
    631e:	and.w	r5, r5, #15
  m_vol = dirFile->m_vol;
    6322:	strd	r0, r3, [r4, #8]
    6326:	add.w	r3, r0, #52	; 0x34
  dir += 0XF & dirIndex;
    632a:	add.w	r5, r3, r5, lsl #5
  return (dir->attributes & FAT_ATTRIB_LABEL) == 0;
    632e:	ldrb	r2, [r5, #11]
  if (!isFatFileOrSubdir(dir)) {
    6330:	lsls	r3, r2, #28
    6332:	bmi.n	6358 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5c>
  m_attributes = dir->attributes & FS_ATTRIB_COPY;
    6334:	and.w	r2, r2, #55	; 0x37
    6338:	strb	r2, [r4, #0]
  if (isFatFile(dir)) {
    633a:	ldrb	r3, [r5, #11]
    633c:	tst.w	r3, #24
    6340:	bne.n	6348 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x4c>
    m_attributes |= FILE_ATTR_FILE;
    6342:	orr.w	r2, r2, #8
    6346:	strb	r2, [r4, #0]
  switch (oflag & O_ACCMODE) {
    6348:	and.w	r3, r6, #3
  m_lfnOrd = lfnOrd;
    634c:	strb	r7, [r4, #3]
  switch (oflag & O_ACCMODE) {
    634e:	cmp	r3, #1
    6350:	beq.n	63c4 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xc8>
    6352:	cmp	r3, #2
    6354:	beq.n	6364 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x68>
    6356:	cbz	r3, 639a <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x9e>
  m_attributes = FILE_ATTR_CLOSED;
    6358:	movs	r3, #0
  return false;
    635a:	mov	r0, r3
  m_attributes = FILE_ATTR_CLOSED;
    635c:	strb	r3, [r4, #0]
  m_flags = 0;
    635e:	strb	r3, [r4, #2]
}
    6360:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (oflag & O_ACCMODE) {
    6364:	movs	r3, #3
    if (isSubDir() || isReadOnly()) {
    6366:	lsls	r1, r2, #27
      m_flags = FILE_FLAG_WRITE;
    6368:	strb	r3, [r4, #2]
    if (isSubDir() || isReadOnly()) {
    636a:	bmi.n	6358 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5c>
    636c:	lsls	r1, r2, #31
    636e:	bmi.n	6358 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5c>
    m_attributes |= FS_ATTRIB_ARCHIVE;
    6370:	orr.w	r2, r2, #32
  if (oflag & O_TRUNC) {
    6374:	lsls	r7, r6, #21
    m_attributes |= FS_ATTRIB_ARCHIVE;
    6376:	strb	r2, [r4, #0]
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    6378:	and.w	r2, r6, #8
    637c:	orr.w	r3, r3, r2
    6380:	strb	r3, [r4, #2]
  uint32_t sector() { return m_sector; }
    6382:	ldr	r2, [r0, #44]	; 0x2c
                 getLe16(dir->firstClusterLow);
    6384:	ldrh	r1, [r5, #26]
  m_dirSector = m_vol->cacheSectorNumber();
    6386:	str	r2, [r4, #24]
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16) |
    6388:	ldrh	r2, [r5, #20]
    638a:	orr.w	r1, r1, r2, lsl #16
  if (oflag & O_TRUNC) {
    638e:	bpl.n	63b4 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xb8>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    6390:	cbnz	r1, 63d6 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xda>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    6392:	orn	r3, r3, #127	; 0x7f
    6396:	strb	r3, [r4, #2]
    6398:	b.n	63ba <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xbe>
      if (oflag & O_TRUNC) {
    639a:	lsls	r7, r6, #21
    639c:	bmi.n	6358 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5c>
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    639e:	and.w	r3, r6, #8
    63a2:	orr.w	r3, r3, #1
    63a6:	strb	r3, [r4, #2]
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16) |
    63a8:	ldrh	r3, [r5, #20]
                 getLe16(dir->firstClusterLow);
    63aa:	ldrh	r1, [r5, #26]
    63ac:	ldr	r2, [r0, #44]	; 0x2c
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16) |
    63ae:	orr.w	r1, r1, r3, lsl #16
  m_dirSector = m_vol->cacheSectorNumber();
    63b2:	str	r2, [r4, #24]
    m_firstCluster = firstCluster;
    63b4:	str	r1, [r4, #32]
  return *reinterpret_cast<const uint32_t*>(src);
    63b6:	ldr	r3, [r5, #28]
    m_fileSize = getLe32(dir->fileSize);
    63b8:	str	r3, [r4, #28]
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    63ba:	lsls	r0, r6, #17
    63bc:	bmi.n	63c8 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xcc>
  return true;
    63be:	movs	r0, #1
}
    63c0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (oflag & O_ACCMODE) {
    63c4:	movs	r3, #2
    63c6:	b.n	6366 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x6a>
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    63c8:	ldr	r1, [r4, #28]
    63ca:	mov	r0, r4
    63cc:	bl	624c <FatFile::seekSet(unsigned long)>
    63d0:	cmp	r0, #0
    63d2:	bne.n	63be <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xc2>
    63d4:	b.n	6358 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5c>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    63d6:	bl	6aec <FatPartition::freeChain(unsigned long)>
    63da:	cmp	r0, #0
    63dc:	beq.n	6358 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5c>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    63de:	ldrb	r3, [r4, #2]
    63e0:	b.n	6392 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x96>
    63e2:	nop

000063e4 <FatFile::openNext(FatFile*, int)>:
  bool isOpen() const { return m_attributes; }
    63e4:	ldrb	r3, [r0, #0]
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    63e6:	cmp	r3, #0
    63e8:	bne.n	6474 <FatFile::openNext(FatFile*, int)+0x90>
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
    63ea:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    63ee:	ldrb	r3, [r1, #0]
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
    63f0:	sub	sp, #28
    63f2:	mov	r4, r1
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    63f4:	tst.w	r3, #208	; 0xd0
    63f8:	beq.n	645a <FatFile::openNext(FatFile*, int)+0x76>
  uint32_t curPosition() const { return m_curPosition; }
    63fa:	ldr	r3, [r1, #20]
    63fc:	ands.w	r5, r3, #31
    6400:	bne.n	645a <FatFile::openNext(FatFile*, int)+0x76>
    6402:	mov	r6, r0
    6404:	mov	r8, r2
    6406:	mov	r9, r5
    int8_t n = read(&n, 1);
    6408:	movs	r2, #1
    640a:	add.w	r1, sp, #23
    640e:	mov	r0, r4
  uint8_t i = (m_curPosition >> 5) & 0XF;
    6410:	ubfx	sl, r3, #5, #4
    index = dirFile->curPosition() / FS_DIR_SIZE;
    6414:	lsrs	r7, r3, #5
    int8_t n = read(&n, 1);
    6416:	bl	5dbc <FatFile::read(void*, unsigned int)>
    if (n != 1) {
    641a:	sxtb	r0, r0
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    641c:	mov.w	r2, sl, lsl #5
    if (n != 1) {
    6420:	cmp	r0, #1
    6422:	bne.n	645a <FatFile::openNext(FatFile*, int)+0x76>
    m_curPosition += FS_DIR_SIZE - 1;
    6424:	ldr	r3, [r4, #20]
  uint8_t* cacheBuffer() { return m_buffer; }
    6426:	ldr	r1, [r4, #8]
    6428:	adds	r3, #31
    642a:	adds	r1, #52	; 0x34
    642c:	str	r3, [r4, #20]
    if (dir->name[0] == FAT_NAME_FREE) {
    642e:	ldrb	r2, [r1, r2]
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    6430:	add.w	r1, r1, sl, lsl #5
    if (dir->name[0] == FAT_NAME_FREE) {
    6434:	cbz	r2, 645a <FatFile::openNext(FatFile*, int)+0x76>
    if (dir->name[0] == '.' || dir->name[0] == FAT_NAME_DELETED) {
    6436:	cmp	r2, #46	; 0x2e
    6438:	beq.n	6462 <FatFile::openNext(FatFile*, int)+0x7e>
    643a:	sub.w	r0, r2, #229	; 0xe5
    643e:	clz	r0, r0
    6442:	lsrs	r0, r0, #5
    6444:	cbnz	r0, 6462 <FatFile::openNext(FatFile*, int)+0x7e>
  return (dir->attributes & FAT_ATTRIB_LABEL) == 0;
    6446:	ldrb.w	ip, [r1, #11]
    } else if (isFatFileOrSubdir(dir)) {
    644a:	tst.w	ip, #8
    644e:	beq.n	6478 <FatFile::openNext(FatFile*, int)+0x94>
    } else if (isFatLongName(dir)) {
    6450:	cmp.w	ip, #15
    6454:	beq.n	6466 <FatFile::openNext(FatFile*, int)+0x82>
      lfnOrd = 0;
    6456:	mov	r5, r0
    6458:	b.n	6408 <FatFile::openNext(FatFile*, int)+0x24>
  return false;
    645a:	movs	r0, #0
}
    645c:	add	sp, #28
    645e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      lfnOrd = 0;
    6462:	movs	r5, #0
    6464:	b.n	6408 <FatFile::openNext(FatFile*, int)+0x24>
      if (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) {
    6466:	lsls	r0, r2, #25
    6468:	bpl.n	6408 <FatFile::openNext(FatFile*, int)+0x24>
        lfnOrd = ldir->order & 0X1F;
    646a:	and.w	r5, r2, #31
        checksum = ldir->checksum;
    646e:	ldrb.w	r9, [r1, #13]
    6472:	b.n	6408 <FatFile::openNext(FatFile*, int)+0x24>
  return false;
    6474:	movs	r0, #0
}
    6476:	bx	lr
      if (lfnOrd && checksum != lfnChecksum(dir->name)) {
    6478:	mov	fp, r1
    647a:	str	r7, [sp, #12]
    647c:	cmp	r5, #0
    647e:	beq.n	6538 <FatFile::openNext(FatFile*, int)+0x154>
  bool createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  uint16_t getLfnChar(DirLfn_t* ldir, uint8_t i);
  uint8_t lfnChecksum(const uint8_t* name) {
    uint8_t sum = 0;
    for (uint8_t i = 0; i < 11; i++) {
      sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    6480:	lsls	r3, r2, #7
    6482:	ldrb.w	sl, [fp, #4]
    6486:	ldrb.w	lr, [fp, #5]
    648a:	orr.w	r3, r3, r2, lsr #1
    648e:	ldrb	r2, [r1, #1]
    6490:	ldrb	r1, [r1, #2]
    6492:	add	r3, r2
    6494:	ldrb.w	r2, [fp, #3]
    6498:	ldrb.w	ip, [fp, #6]
    649c:	uxtb	r0, r3
    649e:	ubfx	r3, r3, #1, #7
    64a2:	ldrb.w	r7, [fp, #10]
    64a6:	orr.w	r3, r3, r0, lsl #7
    64aa:	ldrb.w	r0, [fp, #7]
    64ae:	uxtab	r3, r1, r3
    64b2:	uxtb	r1, r3
    64b4:	ubfx	r3, r3, #1, #7
    64b8:	orr.w	r3, r3, r1, lsl #7
    64bc:	ldrb.w	r1, [fp, #8]
    64c0:	uxtab	r3, r2, r3
    64c4:	ldrb.w	r2, [fp, #9]
    64c8:	uxtb.w	fp, r3
    64cc:	ubfx	r3, r3, #1, #7
    64d0:	orr.w	r3, r3, fp, lsl #7
    64d4:	uxtab	r3, sl, r3
    64d8:	uxtb.w	sl, r3
    64dc:	ubfx	r3, r3, #1, #7
    64e0:	orr.w	r3, r3, sl, lsl #7
    64e4:	uxtab	r3, lr, r3
    64e8:	uxtb.w	lr, r3
    64ec:	ubfx	r3, r3, #1, #7
    64f0:	orr.w	r3, r3, lr, lsl #7
    64f4:	uxtab	r3, ip, r3
    64f8:	uxtb.w	ip, r3
    64fc:	ubfx	r3, r3, #1, #7
    6500:	orr.w	r3, r3, ip, lsl #7
    6504:	uxtab	r3, r0, r3
    6508:	uxtb	r0, r3
    650a:	ubfx	r3, r3, #1, #7
    650e:	orr.w	r3, r3, r0, lsl #7
    6512:	uxtab	r3, r1, r3
    6516:	uxtb	r1, r3
    6518:	ubfx	r3, r3, #1, #7
    651c:	orr.w	r3, r3, r1, lsl #7
    6520:	uxtab	r3, r2, r3
    6524:	uxtb	r2, r3
    6526:	ubfx	r3, r3, #1, #7
    652a:	orr.w	r3, r3, r2, lsl #7
    652e:	uxtab	r3, r7, r3
    6532:	uxtb	r3, r3
    6534:	cmp	r3, r9
    6536:	bne.n	645a <FatFile::openNext(FatFile*, int)+0x76>
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
    6538:	mov	r3, r8
    653a:	ldrh.w	r2, [sp, #12]
    653e:	mov	r1, r4
    6540:	mov	r0, r6
    6542:	str	r5, [sp, #0]
    6544:	bl	62fc <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    6548:	b.n	645c <FatFile::openNext(FatFile*, int)+0x78>
    654a:	nop

0000654c <FatFile::sync()>:
  if (!isOpen()) {
    654c:	ldrb	r3, [r0, #0]
    654e:	cmp	r3, #0
    6550:	beq.n	65f0 <FatFile::sync()+0xa4>
bool FatFile::sync() {
    6552:	push	{r4, r5, r6, lr}
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    6554:	ldrsb.w	r3, [r0, #2]
bool FatFile::sync() {
    6558:	sub	sp, #8
    655a:	mov	r4, r0
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    655c:	cmp	r3, #0
    655e:	blt.n	657c <FatFile::sync()+0x30>
  if (m_vol->cacheSync()) {
    6560:	ldr	r5, [r4, #8]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    6562:	add.w	r0, r5, #36	; 0x24
    6566:	bl	2a38 <FsCache::sync()>
    656a:	cmp	r0, #0
    656c:	bne.n	65f4 <FatFile::sync()+0xa8>
  m_error |= WRITE_ERROR;
    656e:	ldrb	r3, [r4, #1]
  return false;
    6570:	movs	r0, #0
  m_error |= WRITE_ERROR;
    6572:	orr.w	r3, r3, #1
    6576:	strb	r3, [r4, #1]
}
    6578:	add	sp, #8
    657a:	pop	{r4, r5, r6, pc}
    return m_cache.prepare(sector, options);
    657c:	ldr	r0, [r0, #8]
    657e:	movs	r2, #1
    6580:	ldr	r1, [r4, #24]
    6582:	adds	r0, #36	; 0x24
    6584:	bl	29b8 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    6588:	cmp	r0, #0
    658a:	beq.n	656e <FatFile::sync()+0x22>
  return dir + (m_dirIndex & 0XF);
    658c:	ldrh	r5, [r4, #4]
    658e:	and.w	r5, r5, #15
    6592:	lsls	r3, r5, #5
    6594:	add.w	r5, r0, r5, lsl #5
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
    6598:	ldrb	r3, [r0, r3]
    659a:	cmp	r3, #229	; 0xe5
    659c:	beq.n	656e <FatFile::sync()+0x22>
    dir->attributes = m_attributes & FS_ATTRIB_COPY;
    659e:	ldrb	r3, [r4, #0]
    65a0:	and.w	r3, r3, #55	; 0x37
    65a4:	strb	r3, [r5, #11]
    if (isFile()) {
    65a6:	ldrb	r3, [r4, #0]
    65a8:	lsls	r3, r3, #28
    65aa:	bpl.n	65b0 <FatFile::sync()+0x64>
      setLe32(dir->fileSize, m_fileSize);
    65ac:	ldr	r3, [r4, #28]
  *reinterpret_cast<uint32_t*>(dst) = src;
    65ae:	str	r3, [r5, #28]
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    65b0:	ldr	r3, [r4, #32]
    if (FsDateTime::callback) {
    65b2:	ldr	r1, [pc, #92]	; (6610 <FatFile::sync()+0xc4>)
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);
    65b4:	lsrs	r2, r3, #16
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    65b6:	strh	r3, [r5, #26]
    if (FsDateTime::callback) {
    65b8:	ldr	r6, [r1, #0]
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);
    65ba:	strh	r2, [r5, #20]
    if (FsDateTime::callback) {
    65bc:	cbz	r6, 65d8 <FatFile::sync()+0x8c>
      FsDateTime::callback(&date, &time, &ms10);
    65be:	add.w	r2, sp, #3
    65c2:	add.w	r1, sp, #6
    65c6:	add	r0, sp, #4
    65c8:	blx	r6
      setLe16(dir->modifyDate, date);
    65ca:	ldrh.w	r3, [sp, #4]
  *reinterpret_cast<uint16_t*>(dst) = src;
    65ce:	ldrh.w	r2, [sp, #6]
    65d2:	strh	r3, [r5, #24]
    65d4:	strh	r3, [r5, #18]
    65d6:	strh	r2, [r5, #22]
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    65d8:	ldrb	r3, [r4, #2]
  if (m_vol->cacheSync()) {
    65da:	ldr	r5, [r4, #8]
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    65dc:	and.w	r3, r3, #127	; 0x7f
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    65e0:	add.w	r0, r5, #36	; 0x24
    65e4:	strb	r3, [r4, #2]
    65e6:	bl	2a38 <FsCache::sync()>
    65ea:	cmp	r0, #0
    65ec:	beq.n	656e <FatFile::sync()+0x22>
    65ee:	b.n	65f4 <FatFile::sync()+0xa8>
    return true;
    65f0:	movs	r0, #1
}
    65f2:	bx	lr
    65f4:	add.w	r0, r5, #564	; 0x234
    65f8:	bl	2a38 <FsCache::sync()>
    65fc:	cmp	r0, #0
    65fe:	beq.n	656e <FatFile::sync()+0x22>
    6600:	ldr	r0, [r5, #0]
  bool syncDevice() { return m_blockDev->syncDevice(); }
    6602:	ldr	r3, [r0, #0]
    6604:	ldr	r3, [r3, #28]
    6606:	blx	r3
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    6608:	cmp	r0, #0
    660a:	beq.n	656e <FatFile::sync()+0x22>
    660c:	b.n	6578 <FatFile::sync()+0x2c>
    660e:	nop
    6610:	.word	0x2000771c

00006614 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>:
//------------------------------------------------------------------------------
bool FatFile::timestamp(uint8_t flags, uint16_t year, uint8_t month,
                        uint8_t day, uint8_t hour, uint8_t minute,
                        uint8_t second) {
    6614:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6618:	mov	r6, r1
  uint16_t dirDate;
  uint16_t dirTime;
  DirFat_t* dir;

  if (!isFile() || year < 1980 || year > 2107 || month < 1 || month > 12 ||
      day < 1 || day > 31 || hour > 23 || minute > 59 || second > 59) {
    661a:	ldrb	r1, [r0, #0]
                        uint8_t second) {
    661c:	sub	sp, #8
      day < 1 || day > 31 || hour > 23 || minute > 59 || second > 59) {
    661e:	lsls	r1, r1, #28
                        uint8_t second) {
    6620:	ldrb.w	r7, [sp, #40]	; 0x28
    6624:	ldrb.w	r9, [sp, #44]	; 0x2c
    6628:	ldrb.w	sl, [sp, #48]	; 0x30
    662c:	ldrb.w	r8, [sp, #52]	; 0x34
      day < 1 || day > 31 || hour > 23 || minute > 59 || second > 59) {
    6630:	bpl.n	6664 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
  if (!isFile() || year < 1980 || year > 2107 || month < 1 || month > 12 ||
    6632:	subw	r2, r2, #1980	; 0x7bc
    6636:	uxth	r4, r2
    6638:	cmp	r4, #127	; 0x7f
    663a:	bhi.n	6664 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
    663c:	subs	r2, r3, #1
    663e:	str	r3, [sp, #4]
    6640:	cmp	r2, #11
    6642:	bhi.n	6664 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
      day < 1 || day > 31 || hour > 23 || minute > 59 || second > 59) {
    6644:	subs	r2, r7, #1
    6646:	cmp	r2, #30
    6648:	bhi.n	6664 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
    664a:	cmp.w	sl, #59	; 0x3b
    664e:	it	ls
    6650:	cmpls.w	r9, #23
    6654:	bhi.n	6664 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
    6656:	cmp.w	r8, #59	; 0x3b
    665a:	bhi.n	6664 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // update directory entry
  if (!sync()) {
    665c:	mov	r5, r0
  if (!isOpen()) {
    665e:	bl	5690 <FatFile::sync() [clone .part.0]>
  if (!sync()) {
    6662:	cbnz	r0, 666c <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x58>
  }
  return m_vol->cacheSync();

fail:
  return false;
}
    6664:	movs	r0, #0
    6666:	add	sp, #8
    6668:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return m_cache.prepare(sector, options);
    666c:	ldr	r0, [r5, #8]
    666e:	movs	r2, #1
    6670:	ldr	r1, [r5, #24]
    6672:	adds	r0, #36	; 0x24
    6674:	bl	29b8 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    6678:	cmp	r0, #0
    667a:	beq.n	6664 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
                                              : year << 9 | month << 5 | day;
    667c:	ldr	r3, [sp, #4]
             : hour << 11 | minute << 5 | second >> 1;
    667e:	mov.w	r2, r8, lsr #1
  return dir + (m_dirIndex & 0XF);
    6682:	ldrh	r1, [r5, #4]
                                              : year << 9 | month << 5 | day;
    6684:	orr.w	r3, r7, r3, lsl #5
  if (flags & T_ACCESS) {
    6688:	lsls	r7, r6, #31
  return dir + (m_dirIndex & 0XF);
    668a:	and.w	r1, r1, #15
             : hour << 11 | minute << 5 | second >> 1;
    668e:	orr.w	r2, r2, sl, lsl #5
                                              : year << 9 | month << 5 | day;
    6692:	orr.w	r3, r3, r4, lsl #9
    6696:	add.w	r0, r0, r1, lsl #5
    669a:	uxth	r3, r3
             : hour << 11 | minute << 5 | second >> 1;
    669c:	orr.w	r2, r2, r9, lsl #11
    66a0:	it	mi
    66a2:	strhmi	r3, [r0, #18]
  if (flags & T_CREATE) {
    66a4:	lsls	r4, r6, #30
    66a6:	uxth	r2, r2
    66a8:	bpl.n	66bc <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xa8>
    dir->createTimeMs = second & 1 ? 100 : 0;
    66aa:	ands.w	r8, r8, #1
    66ae:	strh	r3, [r0, #16]
    66b0:	strh	r2, [r0, #14]
    66b2:	it	ne
    66b4:	movne.w	r8, #100	; 0x64
    66b8:	strb.w	r8, [r0, #13]
  if (flags & T_WRITE) {
    66bc:	lsls	r1, r6, #29
    66be:	bpl.n	66c4 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xb0>
    66c0:	strh	r3, [r0, #24]
    66c2:	strh	r2, [r0, #22]
  return m_vol->cacheSync();
    66c4:	ldr	r4, [r5, #8]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    66c6:	add.w	r0, r4, #36	; 0x24
    66ca:	bl	2a38 <FsCache::sync()>
    66ce:	cmp	r0, #0
    66d0:	beq.n	6664 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
    66d2:	add.w	r0, r4, #564	; 0x234
    66d6:	bl	2a38 <FsCache::sync()>
    66da:	cmp	r0, #0
    66dc:	beq.n	6664 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
    66de:	ldr	r0, [r4, #0]
  bool syncDevice() { return m_blockDev->syncDevice(); }
    66e0:	ldr	r3, [r0, #0]
    66e2:	ldr	r3, [r3, #28]
}
    66e4:	add	sp, #8
    66e6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    66ea:	bx	r3

000066ec <FatFile::truncate()>:
//------------------------------------------------------------------------------
bool FatFile::truncate() {
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    66ec:	ldrb	r3, [r0, #2]
    66ee:	lsls	r3, r3, #30
    66f0:	bpl.n	6742 <FatFile::truncate()+0x56>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    66f2:	ldr	r3, [r0, #32]
bool FatFile::truncate() {
    66f4:	push	{r4, lr}
    66f6:	mov	r4, r0
    66f8:	sub	sp, #8
  if (m_firstCluster == 0) {
    66fa:	cbz	r3, 6728 <FatFile::truncate()+0x3c>
    return true;
  }
  if (m_curCluster) {
    66fc:	ldr	r1, [r0, #16]
    66fe:	cbnz	r1, 6746 <FatFile::truncate()+0x5a>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  } else {
    toFree = m_firstCluster;
    6700:	str	r3, [sp, #4]
    m_firstCluster = 0;
    6702:	str	r1, [r0, #32]
  }
  if (toFree) {
    if (!m_vol->freeChain(toFree)) {
    6704:	mov	r1, r3
    6706:	ldr	r0, [r4, #8]
    6708:	bl	6aec <FatPartition::freeChain(unsigned long)>
    670c:	cbz	r0, 673c <FatFile::truncate()+0x50>
    }
  }
  m_fileSize = m_curPosition;

  // need to update directory entry
  m_flags |= FILE_FLAG_DIR_DIRTY;
    670e:	ldrb	r3, [r4, #2]
  m_fileSize = m_curPosition;
    6710:	ldr	r1, [r4, #20]
  m_flags |= FILE_FLAG_DIR_DIRTY;
    6712:	orn	r3, r3, #127	; 0x7f
  if (!isOpen()) {
    6716:	ldrb	r2, [r4, #0]
  m_fileSize = m_curPosition;
    6718:	str	r1, [r4, #28]
  m_flags |= FILE_FLAG_DIR_DIRTY;
    671a:	strb	r3, [r4, #2]
  if (!isOpen()) {
    671c:	cbz	r2, 6728 <FatFile::truncate()+0x3c>
    671e:	mov	r0, r4
    6720:	bl	5690 <FatFile::sync() [clone .part.0]>
  return sync();

fail:
  return false;
}
    6724:	add	sp, #8
    6726:	pop	{r4, pc}
    return true;
    6728:	movs	r0, #1
}
    672a:	add	sp, #8
    672c:	pop	{r4, pc}
  }
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) { return fatPut(cluster, 0x0FFFFFFF); }
    672e:	mvn.w	r2, #4026531840	; 0xf0000000
    6732:	ldr	r1, [r4, #16]
    6734:	ldr	r0, [r4, #8]
    6736:	bl	69cc <FatPartition::fatPut(unsigned long, unsigned long)>
      if (!m_vol->fatPutEOC(m_curCluster)) {
    673a:	cbnz	r0, 6758 <FatFile::truncate()+0x6c>
  return false;
    673c:	movs	r0, #0
}
    673e:	add	sp, #8
    6740:	pop	{r4, pc}
  return false;
    6742:	movs	r0, #0
}
    6744:	bx	lr
    toFree = 0;
    6746:	movs	r3, #0
    int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    6748:	add	r2, sp, #4
    674a:	ldr	r0, [r0, #8]
    toFree = 0;
    674c:	str	r3, [sp, #4]
    int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    674e:	bl	6958 <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    6752:	cmp	r0, #0
    6754:	blt.n	673c <FatFile::truncate()+0x50>
    if (fg) {
    6756:	bne.n	672e <FatFile::truncate()+0x42>
  if (toFree) {
    6758:	ldr	r3, [sp, #4]
    675a:	cmp	r3, #0
    675c:	beq.n	670e <FatFile::truncate()+0x22>
    675e:	b.n	6704 <FatFile::truncate()+0x18>

00006760 <FatFile::write(void const*, unsigned int)>:
//------------------------------------------------------------------------------
size_t FatFile::write(const void* buf, size_t nbyte) {
    6760:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  bool isWritable() const { return m_flags & FILE_FLAG_WRITE; }
    6764:	ldrb	r3, [r0, #2]
    6766:	sub	sp, #12
    6768:	mov	r5, r0
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isWritable()) {
    676a:	lsls	r4, r3, #30
    676c:	bpl.n	6860 <FatFile::write(void const*, unsigned int)+0x100>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    676e:	mov	r8, r1
    6770:	lsls	r1, r3, #28
    6772:	mov	r9, r2
    6774:	bmi.w	68f4 <FatFile::write(void const*, unsigned int)+0x194>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    6778:	ldr	r3, [r5, #20]
    677a:	adds.w	r2, r3, r9
    677e:	bcs.n	6860 <FatFile::write(void const*, unsigned int)+0x100>
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    6780:	cmp.w	r9, #0
    6784:	beq.n	6808 <FatFile::write(void const*, unsigned int)+0xa8>
    6786:	mov	r7, r9
    m_status = 0;
    6788:	mov.w	sl, #0
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    678c:	ldr	r0, [r5, #8]
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    678e:	ubfx	r6, r3, #0, #9
    if (sectorOfCluster == 0 && sectorOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
    6792:	ldr	r1, [r5, #16]
    return (position >> 9) & m_clusterSectorMask;
    6794:	ldrb	r4, [r0, #5]
    if (sectorOfCluster == 0 && sectorOffset == 0) {
    6796:	ands.w	r4, r4, r3, lsr #9
    679a:	bne.n	681e <FatFile::write(void const*, unsigned int)+0xbe>
    679c:	cmp	r6, #0
    679e:	bne.n	681e <FatFile::write(void const*, unsigned int)+0xbe>
      if (m_curCluster != 0) {
    67a0:	cmp	r1, #0
    67a2:	beq.n	6886 <FatFile::write(void const*, unsigned int)+0x126>
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
    67a4:	ldrb	r2, [r5, #2]
    67a6:	lsls	r2, r2, #25
    67a8:	bpl.n	689c <FatFile::write(void const*, unsigned int)+0x13c>
    67aa:	ldr	r2, [r5, #28]
    67ac:	cmp	r2, r3
    67ae:	bls.n	689c <FatFile::write(void const*, unsigned int)+0x13c>
          m_curCluster++;
    67b0:	adds	r1, #1
    67b2:	str	r1, [r5, #16]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    67b4:	subs	r1, #2
    67b6:	ldrb	r2, [r0, #6]
    67b8:	ldr	r3, [r0, #20]
    67ba:	lsls	r1, r2
    67bc:	add	r1, r3
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    67be:	cmp.w	r7, #512	; 0x200
    67c2:	bcc.n	6870 <FatFile::write(void const*, unsigned int)+0x110>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (nToWrite >= 2 * m_vol->bytesPerSector()) {
    67c4:	cmp.w	r7, #1024	; 0x400
    67c8:	bcc.n	68b4 <FatFile::write(void const*, unsigned int)+0x154>
      // use multiple sector write command
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
    67ca:	ldrb	r3, [r0, #4]
      uint32_t nSector = nToWrite >> m_vol->bytesPerSectorShift();
    67cc:	lsrs	r2, r7, #9
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
    67ce:	subs	r3, r3, r4
    67d0:	cmp	r3, r2
    67d2:	it	cs
    67d4:	movcs	r3, r2
    return sector <= m_sector && m_sector < (sector + count);
    67d6:	ldr	r2, [r0, #44]	; 0x2c
    67d8:	cmp	r2, r1
      if (nSector > maxSectors) {
        nSector = maxSectors;
      }
      n = nSector << m_vol->bytesPerSectorShift();
    67da:	mov.w	r4, r3, lsl #9
    67de:	bcc.n	67f0 <FatFile::write(void const*, unsigned int)+0x90>
    67e0:	adds	r6, r3, r1
    67e2:	cmp	r2, r6
    67e4:	bcs.n	67f0 <FatFile::write(void const*, unsigned int)+0x90>
    m_sector = 0XFFFFFFFF;
    67e6:	mov.w	r2, #4294967295
    m_status = 0;
    67ea:	strb.w	sl, [r0, #36]	; 0x24
    m_sector = 0XFFFFFFFF;
    67ee:	str	r2, [r0, #44]	; 0x2c
    return m_blockDev->writeSectors(sector, src, count);
    67f0:	ldr	r0, [r0, #40]	; 0x28
    67f2:	mov	r2, r8
    67f4:	ldr	r6, [r0, #0]
    67f6:	ldr	r6, [r6, #36]	; 0x24
    67f8:	blx	r6
      if (!m_vol->cacheSafeWrite(sector, src, nSector)) {
    67fa:	cbz	r0, 6860 <FatFile::write(void const*, unsigned int)+0x100>
      if (!m_vol->cacheSafeWrite(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    67fc:	ldr	r3, [r5, #20]
  while (nToWrite) {
    67fe:	subs	r7, r7, r4
    src += n;
    6800:	add	r8, r4
    m_curPosition += n;
    6802:	add	r3, r4
    6804:	str	r3, [r5, #20]
  while (nToWrite) {
    6806:	bne.n	678c <FatFile::write(void const*, unsigned int)+0x2c>
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    6808:	ldr	r2, [r5, #28]
    680a:	cmp	r2, r3
    680c:	bcs.w	693c <FatFile::write(void const*, unsigned int)+0x1dc>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    m_flags |= FILE_FLAG_DIR_DIRTY;
    6810:	ldrb	r2, [r5, #2]
    6812:	mov	r0, r9
    m_fileSize = m_curPosition;
    6814:	str	r3, [r5, #28]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    6816:	orn	r3, r2, #127	; 0x7f
    681a:	strb	r3, [r5, #2]
    681c:	b.n	686a <FatFile::write(void const*, unsigned int)+0x10a>
    681e:	ldrb	r2, [r0, #6]
    6820:	subs	r1, #2
    6822:	ldr	r3, [r0, #20]
    6824:	lsls	r1, r2
    6826:	add	r1, r3
    uint32_t sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    6828:	add	r1, r4
    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    682a:	cmp	r6, #0
    682c:	beq.n	67be <FatFile::write(void const*, unsigned int)+0x5e>
      n = m_vol->bytesPerSector() - sectorOffset;
    682e:	rsb	r4, r6, #512	; 0x200
        cacheOption = FsCache::CACHE_FOR_WRITE;
    6832:	movs	r2, #1
    6834:	cmp	r4, r7
    6836:	it	cs
    6838:	movcs	r4, r7
    return m_cache.prepare(sector, options);
    683a:	adds	r0, #36	; 0x24
    683c:	bl	29b8 <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    6840:	cbz	r0, 6860 <FatFile::write(void const*, unsigned int)+0x100>
      memcpy(dst, src, n);
    6842:	add	r0, r6
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    6844:	add	r6, r4
      memcpy(dst, src, n);
    6846:	mov	r2, r4
    6848:	mov	r1, r8
    684a:	bl	b09c <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    684e:	cmp.w	r6, #512	; 0x200
    6852:	ldr	r0, [r5, #8]
    6854:	bne.n	67fc <FatFile::write(void const*, unsigned int)+0x9c>
  bool cacheSyncData() { return m_cache.sync(); }
    6856:	adds	r0, #36	; 0x24
    6858:	bl	2a38 <FsCache::sync()>
        if (!m_vol->cacheSyncData()) {
    685c:	cmp	r0, #0
    685e:	bne.n	67fc <FatFile::write(void const*, unsigned int)+0x9c>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
    6860:	ldrb	r3, [r5, #1]
  return 0;
    6862:	movs	r0, #0
  m_error |= WRITE_ERROR;
    6864:	orr.w	r3, r3, #1
    6868:	strb	r3, [r5, #1]
}
    686a:	add	sp, #12
    686c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      n = m_vol->bytesPerSector() - sectorOffset;
    6870:	rsb	r4, r6, #512	; 0x200
      if (sectorOffset == 0 &&
    6874:	ldr	r2, [r5, #20]
    6876:	ldr	r3, [r5, #28]
    6878:	cmp	r4, r7
    687a:	it	cs
    687c:	movcs	r4, r7
    687e:	cmp	r2, r3
    6880:	bcc.n	688e <FatFile::write(void const*, unsigned int)+0x12e>
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    6882:	movs	r2, #5
    6884:	b.n	683a <FatFile::write(void const*, unsigned int)+0xda>
        if (m_firstCluster == 0) {
    6886:	ldr	r1, [r5, #32]
    6888:	cbz	r1, 68d8 <FatFile::write(void const*, unsigned int)+0x178>
          m_curCluster = m_firstCluster;
    688a:	str	r1, [r5, #16]
    688c:	b.n	67b4 <FatFile::write(void const*, unsigned int)+0x54>
          (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
    688e:	ldrb	r3, [r5, #2]
        cacheOption = FsCache::CACHE_FOR_WRITE;
    6890:	tst.w	r3, #32
    6894:	ite	ne
    6896:	movne	r2, #5
    6898:	moveq	r2, #1
    689a:	b.n	683a <FatFile::write(void const*, unsigned int)+0xda>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    689c:	add.w	r2, r5, #16
    68a0:	str	r2, [sp, #4]
    68a2:	bl	6958 <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    68a6:	cmp	r0, #0
    68a8:	blt.n	6860 <FatFile::write(void const*, unsigned int)+0x100>
        if (fg == 0) {
    68aa:	ldr	r2, [sp, #4]
    68ac:	beq.n	6902 <FatFile::write(void const*, unsigned int)+0x1a2>
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    68ae:	ldr	r0, [r5, #8]
  uint32_t cc = m_curCluster;
    68b0:	ldr	r1, [r5, #16]
    68b2:	b.n	67b4 <FatFile::write(void const*, unsigned int)+0x54>
    if (isCached(sector)) {
    68b4:	ldr	r3, [r0, #44]	; 0x2c
    68b6:	cmp	r3, r1
    68b8:	bne.n	68c4 <FatFile::write(void const*, unsigned int)+0x164>
    m_sector = 0XFFFFFFFF;
    68ba:	mov.w	r3, #4294967295
    m_status = 0;
    68be:	strb.w	sl, [r0, #36]	; 0x24
    m_sector = 0XFFFFFFFF;
    68c2:	str	r3, [r0, #44]	; 0x2c
    return m_blockDev->writeSector(sector, src);
    68c4:	ldr	r0, [r0, #40]	; 0x28
    68c6:	mov	r2, r8
    68c8:	ldr	r3, [r0, #0]
    68ca:	ldr	r3, [r3, #32]
    68cc:	blx	r3
      if (!m_vol->cacheSafeWrite(sector, src)) {
    68ce:	cmp	r0, #0
    68d0:	beq.n	6860 <FatFile::write(void const*, unsigned int)+0x100>
      n = m_vol->bytesPerSector();
    68d2:	mov.w	r4, #512	; 0x200
    68d6:	b.n	67fc <FatFile::write(void const*, unsigned int)+0x9c>
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    68d8:	add.w	r2, r5, #16
    68dc:	bl	6a34 <FatPartition::allocateCluster(unsigned long, unsigned long*)>
    68e0:	cmp	r0, #0
    68e2:	beq.n	6860 <FatFile::write(void const*, unsigned int)+0x100>
  m_flags |= FILE_FLAG_DIR_DIRTY;
    68e4:	ldrb	r3, [r5, #2]
          m_firstCluster = m_curCluster;
    68e6:	ldr	r1, [r5, #16]
  m_flags |= FILE_FLAG_DIR_DIRTY;
    68e8:	orn	r3, r3, #63	; 0x3f
    uint32_t sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    68ec:	ldr	r0, [r5, #8]
          m_firstCluster = m_curCluster;
    68ee:	str	r1, [r5, #32]
  m_flags |= FILE_FLAG_DIR_DIRTY;
    68f0:	strb	r3, [r5, #2]
          m_firstCluster = m_curCluster;
    68f2:	b.n	67b4 <FatFile::write(void const*, unsigned int)+0x54>
    if (!seekSet(m_fileSize)) {
    68f4:	ldr	r1, [r0, #28]
    68f6:	bl	624c <FatFile::seekSet(unsigned long)>
    68fa:	cmp	r0, #0
    68fc:	bne.w	6778 <FatFile::write(void const*, unsigned int)+0x18>
    6900:	b.n	6860 <FatFile::write(void const*, unsigned int)+0x100>
  uint32_t cc = m_curCluster;
    6902:	ldr.w	fp, [r5, #16]
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    6906:	ldr	r0, [r5, #8]
    6908:	mov	r1, fp
    690a:	bl	6a34 <FatPartition::allocateCluster(unsigned long, unsigned long*)>
    690e:	cmp	r0, #0
    6910:	beq.n	6860 <FatFile::write(void const*, unsigned int)+0x100>
  if (cc == 0) {
    6912:	cmp.w	fp, #0
    6916:	beq.n	6932 <FatFile::write(void const*, unsigned int)+0x1d2>
  } else if (m_curCluster != (cc + 1)) {
    6918:	add.w	fp, fp, #1
    691c:	ldr	r1, [r5, #16]
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    691e:	ldrb	r3, [r5, #2]
  } else if (m_curCluster != (cc + 1)) {
    6920:	cmp	r1, fp
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    6922:	it	ne
    6924:	andne.w	r3, r3, #191	; 0xbf
  m_flags |= FILE_FLAG_DIR_DIRTY;
    6928:	orn	r3, r3, #127	; 0x7f
    uint32_t sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    692c:	ldr	r0, [r5, #8]
  m_flags |= FILE_FLAG_DIR_DIRTY;
    692e:	strb	r3, [r5, #2]
  return true;
    6930:	b.n	67b4 <FatFile::write(void const*, unsigned int)+0x54>
    m_flags |= FILE_FLAG_CONTIGUOUS;
    6932:	ldrb	r3, [r5, #2]
  } else if (m_curCluster != (cc + 1)) {
    6934:	ldr	r1, [r5, #16]
    m_flags |= FILE_FLAG_CONTIGUOUS;
    6936:	orr.w	r3, r3, #64	; 0x40
    693a:	b.n	6928 <FatFile::write(void const*, unsigned int)+0x1c8>
  } else if (FsDateTime::callback) {
    693c:	ldr	r3, [pc, #20]	; (6954 <FatFile::write(void const*, unsigned int)+0x1f4>)
    693e:	ldr	r3, [r3, #0]
    6940:	cbz	r3, 694e <FatFile::write(void const*, unsigned int)+0x1ee>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    6942:	ldrb	r3, [r5, #2]
    6944:	mov	r0, r9
    6946:	orn	r3, r3, #127	; 0x7f
    694a:	strb	r3, [r5, #2]
    694c:	b.n	686a <FatFile::write(void const*, unsigned int)+0x10a>
    694e:	mov	r0, r9
    6950:	b.n	686a <FatFile::write(void const*, unsigned int)+0x10a>
    6952:	nop
    6954:	.word	0x2000771c

00006958 <FatPartition::fatGet(unsigned long, unsigned long*)>:
  uint32_t sector;
  uint32_t next;
  uint8_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    6958:	cmp	r1, #1
    695a:	bls.n	697a <FatPartition::fatGet(unsigned long, unsigned long*)+0x22>
    695c:	ldr	r3, [r0, #28]
    695e:	cmp	r3, r1
int8_t FatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    6960:	push	{r4, r5, r6, lr}
    6962:	mov	r4, r1
    6964:	mov	r5, r0
  if (cluster < 2 || cluster > m_lastCluster) {
    6966:	bcc.n	6974 <FatPartition::fatGet(unsigned long, unsigned long*)+0x1c>
  uint8_t fatType() const { return m_fatType; }
    6968:	ldrb	r3, [r0, #7]
    696a:	mov	r6, r2
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
    696c:	cmp	r3, #32
    696e:	beq.n	69aa <FatPartition::fatGet(unsigned long, unsigned long*)+0x52>
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint16_t offset = (cluster << 2) & m_sectorMask;
    next = getLe32(pc + offset);
  } else if (fatType() == 16) {
    6970:	cmp	r3, #16
    6972:	beq.n	6980 <FatPartition::fatGet(unsigned long, unsigned long*)+0x28>
  }
  *value = next;
  return 1;

fail:
  return -1;
    6974:	mov.w	r0, #4294967295
}
    6978:	pop	{r4, r5, r6, pc}
  return -1;
    697a:	mov.w	r0, #4294967295
}
    697e:	bx	lr
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1));
    6980:	ldr	r3, [r0, #24]
    6982:	ubfx	r1, r1, #8, #8
    return m_fatCache.prepare(sector, options);
    6986:	add.w	r0, r0, #564	; 0x234
    698a:	movs	r2, #2
    698c:	add	r1, r3
    698e:	bl	29b8 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    6992:	cmp	r0, #0
    6994:	beq.n	6974 <FatPartition::fatGet(unsigned long, unsigned long*)+0x1c>
    uint16_t offset = (cluster << 1) & m_sectorMask;
    6996:	lsls	r4, r4, #1
    next = getLe16(pc + offset);
    6998:	and.w	r4, r4, #510	; 0x1fe
    699c:	ldrh	r3, [r0, r4]
  if (isEOC(next)) {
    699e:	ldr	r2, [r5, #28]
    69a0:	cmp	r2, r3
    69a2:	bcc.n	69c8 <FatPartition::fatGet(unsigned long, unsigned long*)+0x70>
  return 1;
    69a4:	movs	r0, #1
  *value = next;
    69a6:	str	r3, [r6, #0]
}
    69a8:	pop	{r4, r5, r6, pc}
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    69aa:	ldr	r1, [r0, #24]
    69ac:	movs	r2, #2
    69ae:	add.w	r0, r0, #564	; 0x234
    69b2:	add.w	r1, r1, r4, lsr #7
    69b6:	bl	29b8 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    69ba:	cmp	r0, #0
    69bc:	beq.n	6974 <FatPartition::fatGet(unsigned long, unsigned long*)+0x1c>
    uint16_t offset = (cluster << 2) & m_sectorMask;
    69be:	lsls	r4, r4, #2
    next = getLe32(pc + offset);
    69c0:	and.w	r4, r4, #508	; 0x1fc
  return *reinterpret_cast<const uint32_t*>(src);
    69c4:	ldr	r3, [r0, r4]
    69c6:	b.n	699e <FatPartition::fatGet(unsigned long, unsigned long*)+0x46>
    return 0;
    69c8:	movs	r0, #0
}
    69ca:	pop	{r4, r5, r6, pc}

000069cc <FatPartition::fatPut(unsigned long, unsigned long)>:
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    69cc:	cmp	r1, #1
    69ce:	bls.n	69ea <FatPartition::fatPut(unsigned long, unsigned long)+0x1e>
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
    69d0:	push	{r3, r4, r5, lr}
  if (cluster < 2 || cluster > m_lastCluster) {
    69d2:	ldr	r3, [r0, #28]
    69d4:	mov	r4, r1
    69d6:	cmp	r3, r1
    69d8:	bcc.n	69e6 <FatPartition::fatPut(unsigned long, unsigned long)+0x1a>
  uint8_t fatType() const { return m_fatType; }
    69da:	ldrb	r3, [r0, #7]
    69dc:	mov	r5, r2
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
    69de:	cmp	r3, #32
    69e0:	beq.n	6a12 <FatPartition::fatPut(unsigned long, unsigned long)+0x46>
    uint16_t offset = (cluster << 2) & m_sectorMask;
    setLe32(pc + offset, value);
    return true;
  }

  if (fatType() == 16) {
    69e2:	cmp	r3, #16
    69e4:	beq.n	69ee <FatPartition::fatPut(unsigned long, unsigned long)+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
    69e6:	movs	r0, #0
}
    69e8:	pop	{r3, r4, r5, pc}
  return false;
    69ea:	movs	r0, #0
}
    69ec:	bx	lr
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1));
    69ee:	ldr	r3, [r0, #24]
    69f0:	ubfx	r1, r1, #8, #8
    return m_fatCache.prepare(sector, options);
    69f4:	add.w	r0, r0, #564	; 0x234
    69f8:	movs	r2, #3
    69fa:	add	r1, r3
    69fc:	bl	29b8 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    6a00:	mov	r3, r0
    6a02:	cmp	r0, #0
    6a04:	beq.n	69e6 <FatPartition::fatPut(unsigned long, unsigned long)+0x1a>
    uint16_t offset = (cluster << 1) & m_sectorMask;
    6a06:	lsls	r4, r4, #1
    return true;
    6a08:	movs	r0, #1
    setLe16(pc + offset, value);
    6a0a:	and.w	r4, r4, #510	; 0x1fe
    6a0e:	strh	r5, [r3, r4]
}
    6a10:	pop	{r3, r4, r5, pc}
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    6a12:	ldr	r1, [r0, #24]
    6a14:	movs	r2, #3
    6a16:	add.w	r0, r0, #564	; 0x234
    6a1a:	add.w	r1, r1, r4, lsr #7
    6a1e:	bl	29b8 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    6a22:	mov	r3, r0
    6a24:	cmp	r0, #0
    6a26:	beq.n	69e6 <FatPartition::fatPut(unsigned long, unsigned long)+0x1a>
    uint16_t offset = (cluster << 2) & m_sectorMask;
    6a28:	lsls	r4, r4, #2
    return true;
    6a2a:	movs	r0, #1
    setLe32(pc + offset, value);
    6a2c:	and.w	r4, r4, #508	; 0x1fc
  *reinterpret_cast<uint32_t*>(dst) = src;
    6a30:	str	r5, [r3, r4]
}
    6a32:	pop	{r3, r4, r5, pc}

00006a34 <FatPartition::allocateCluster(unsigned long, unsigned long*)>:
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    6a34:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (m_allocSearchStart < current) {
    6a38:	ldr	r4, [r0, #12]
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    6a3a:	mov	r5, r0
    6a3c:	mov	r6, r1
    6a3e:	mov	r8, r2
  if (m_allocSearchStart < current) {
    6a40:	cmp	r4, r1
    6a42:	bcc.n	6ab6 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x82>
    setStart = true;
    6a44:	movs	r7, #1
    6a46:	add.w	r9, r5, #564	; 0x234
    find++;
    6a4a:	adds	r4, #1
    if (find > m_lastCluster) {
    6a4c:	ldr	r3, [r5, #28]
    6a4e:	cmp	r3, r4
    6a50:	bcs.n	6a66 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x32>
      if (setStart) {
    6a52:	cbnz	r7, 6a5c <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x28>
      find = m_allocSearchStart;
    6a54:	ldr	r4, [r5, #12]
    find++;
    6a56:	adds	r4, #1
    if (find > m_lastCluster) {
    6a58:	cmp	r3, r4
    6a5a:	bcs.n	6a64 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x30>
  return false;
    6a5c:	movs	r7, #0
}
    6a5e:	mov	r0, r7
    6a60:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      setStart = true;
    6a64:	movs	r7, #1
  if (cluster < 2 || cluster > m_lastCluster) {
    6a66:	cmp	r4, #1
    6a68:	bls.n	6a5c <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x28>
    6a6a:	cmp	r6, r4
    6a6c:	beq.n	6a5c <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x28>
  uint8_t fatType() const { return m_fatType; }
    6a6e:	ldrb	r3, [r5, #7]
  if (fatType() == 32) {
    6a70:	cmp	r3, #32
    6a72:	beq.n	6abc <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x88>
  } else if (fatType() == 16) {
    6a74:	cmp	r3, #16
    6a76:	bne.n	6a5c <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x28>
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1));
    6a78:	ldr	r3, [r5, #24]
    6a7a:	ubfx	r1, r4, #8, #8
    return m_fatCache.prepare(sector, options);
    6a7e:	movs	r2, #2
    6a80:	mov	r0, r9
    6a82:	add	r1, r3
    6a84:	bl	29b8 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    6a88:	cmp	r0, #0
    6a8a:	beq.n	6a5c <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x28>
    uint16_t offset = (cluster << 1) & m_sectorMask;
    6a8c:	lsls	r3, r4, #1
    next = getLe16(pc + offset);
    6a8e:	and.w	r3, r3, #510	; 0x1fe
    6a92:	ldrh	r3, [r0, r3]
    if (fg && f == 0) {
    6a94:	cmp	r3, #0
    6a96:	bne.n	6a4a <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x16>
  if (setStart) {
    6a98:	cbz	r7, 6a9c <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x68>
    m_allocSearchStart = find;
    6a9a:	str	r4, [r5, #12]
  bool fatPutEOC(uint32_t cluster) { return fatPut(cluster, 0x0FFFFFFF); }
    6a9c:	mvn.w	r2, #4026531840	; 0xf0000000
    6aa0:	mov	r1, r4
    6aa2:	mov	r0, r5
    6aa4:	bl	69cc <FatPartition::fatPut(unsigned long, unsigned long)>
  if (!fatPutEOC(find)) {
    6aa8:	mov	r7, r0
    6aaa:	cmp	r0, #0
    6aac:	beq.n	6a5c <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x28>
  if (current) {
    6aae:	cbnz	r6, 6adc <FatPartition::allocateCluster(unsigned long, unsigned long*)+0xa8>
  *next = find;
    6ab0:	str.w	r4, [r8]
  return true;
    6ab4:	b.n	6a5e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x2a>
    6ab6:	mov	r4, r1
    setStart = false;
    6ab8:	movs	r7, #0
    6aba:	b.n	6a46 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x12>
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    6abc:	ldr	r1, [r5, #24]
    return m_fatCache.prepare(sector, options);
    6abe:	movs	r2, #2
    6ac0:	mov	r0, r9
    6ac2:	add.w	r1, r1, r4, lsr #7
    6ac6:	bl	29b8 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    6aca:	cmp	r0, #0
    6acc:	beq.n	6a5c <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x28>
    uint16_t offset = (cluster << 2) & m_sectorMask;
    6ace:	lsls	r3, r4, #2
    next = getLe32(pc + offset);
    6ad0:	and.w	r3, r3, #508	; 0x1fc
  return *reinterpret_cast<const uint32_t*>(src);
    6ad4:	ldr	r3, [r0, r3]
    if (fg && f == 0) {
    6ad6:	cmp	r3, #0
    6ad8:	bne.n	6a4a <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x16>
    6ada:	b.n	6a98 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x64>
    if (!fatPut(current, find)) {
    6adc:	mov	r1, r6
    6ade:	mov	r0, r5
    6ae0:	mov	r2, r4
    6ae2:	bl	69cc <FatPartition::fatPut(unsigned long, unsigned long)>
    6ae6:	cmp	r0, #0
    6ae8:	bne.n	6ab0 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x7c>
    6aea:	b.n	6a5c <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x28>

00006aec <FatPartition::freeChain(unsigned long)>:
//------------------------------------------------------------------------------
// free a cluster chain
bool FatPartition::freeChain(uint32_t cluster) {
    6aec:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6af0:	mov	r5, r0
    6af2:	mov	r4, r1
    6af4:	add.w	r6, r0, #564	; 0x234
  if (cluster < 2 || cluster > m_lastCluster) {
    6af8:	cmp	r4, #1
    6afa:	bls.n	6b0c <FatPartition::freeChain(unsigned long)+0x20>
    6afc:	ldr	r3, [r5, #28]
    6afe:	cmp	r4, r3
    6b00:	bhi.n	6b0c <FatPartition::freeChain(unsigned long)+0x20>
  uint8_t fatType() const { return m_fatType; }
    6b02:	ldrb	r3, [r5, #7]
  if (fatType() == 32) {
    6b04:	cmp	r3, #32
    6b06:	beq.n	6b7e <FatPartition::freeChain(unsigned long)+0x92>
  } else if (fatType() == 16) {
    6b08:	cmp	r3, #16
    6b0a:	beq.n	6b12 <FatPartition::freeChain(unsigned long)+0x26>
  } while (fg);

  return true;

fail:
  return false;
    6b0c:	movs	r0, #0
}
    6b0e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1));
    6b12:	ubfx	r1, r4, #8, #8
    6b16:	ldr	r3, [r5, #24]
    return m_fatCache.prepare(sector, options);
    6b18:	movs	r2, #2
    6b1a:	mov	r0, r6
    6b1c:	add	r1, r3
    6b1e:	bl	29b8 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    6b22:	cmp	r0, #0
    6b24:	beq.n	6b0c <FatPartition::freeChain(unsigned long)+0x20>
    uint16_t offset = (cluster << 1) & m_sectorMask;
    6b26:	lsls	r3, r4, #1
    next = getLe16(pc + offset);
    6b28:	and.w	r3, r3, #510	; 0x1fe
    6b2c:	ldrh	r2, [r0, r3]
  bool freeChain(uint32_t cluster);
  bool isEOC(uint32_t cluster) const { return cluster > m_lastCluster; }
    6b2e:	ldr	r3, [r5, #28]
  if (isEOC(next)) {
    6b30:	cmp	r3, r2
    6b32:	itet	cs
    6b34:	movcs	r7, r2
    6b36:	movcc.w	r8, #0
    6b3a:	movcs.w	r8, #1
  if (cluster < 2 || cluster > m_lastCluster) {
    6b3e:	cmp	r4, r3
    6b40:	bhi.n	6b0c <FatPartition::freeChain(unsigned long)+0x20>
  uint8_t fatType() const { return m_fatType; }
    6b42:	ldrb	r3, [r5, #7]
  if (fatType() == 32) {
    6b44:	cmp	r3, #32
    6b46:	beq.n	6b9a <FatPartition::freeChain(unsigned long)+0xae>
  if (fatType() == 16) {
    6b48:	cmp	r3, #16
    6b4a:	bne.n	6b0c <FatPartition::freeChain(unsigned long)+0x20>
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1));
    6b4c:	ldr	r3, [r5, #24]
    6b4e:	ubfx	r1, r4, #8, #8
    return m_fatCache.prepare(sector, options);
    6b52:	movs	r2, #3
    6b54:	mov	r0, r6
    6b56:	add	r1, r3
    6b58:	bl	29b8 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    6b5c:	cmp	r0, #0
    6b5e:	beq.n	6b0c <FatPartition::freeChain(unsigned long)+0x20>
    uint16_t offset = (cluster << 1) & m_sectorMask;
    6b60:	lsls	r3, r4, #1
  *reinterpret_cast<uint16_t*>(dst) = src;
    6b62:	movs	r2, #0
    setLe16(pc + offset, value);
    6b64:	and.w	r3, r3, #510	; 0x1fe
    6b68:	strh	r2, [r0, r3]
    if (cluster < m_allocSearchStart) {
    6b6a:	ldr	r3, [r5, #12]
    6b6c:	cmp	r3, r4
    6b6e:	bls.n	6b74 <FatPartition::freeChain(unsigned long)+0x88>
      m_allocSearchStart = cluster - 1;
    6b70:	subs	r4, #1
    6b72:	str	r4, [r5, #12]
  } while (fg);
    6b74:	cmp.w	r8, #0
    6b78:	beq.n	6bb8 <FatPartition::freeChain(unsigned long)+0xcc>
    6b7a:	mov	r4, r7
    6b7c:	b.n	6af8 <FatPartition::freeChain(unsigned long)+0xc>
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    6b7e:	ldr	r1, [r5, #24]
    6b80:	movs	r2, #2
    6b82:	mov	r0, r6
    6b84:	add.w	r1, r1, r4, lsr #7
    6b88:	bl	29b8 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    6b8c:	cmp	r0, #0
    6b8e:	beq.n	6b0c <FatPartition::freeChain(unsigned long)+0x20>
    uint16_t offset = (cluster << 2) & m_sectorMask;
    6b90:	lsls	r3, r4, #2
    next = getLe32(pc + offset);
    6b92:	and.w	r3, r3, #508	; 0x1fc
  return *reinterpret_cast<const uint32_t*>(src);
    6b96:	ldr	r2, [r0, r3]
    6b98:	b.n	6b2e <FatPartition::freeChain(unsigned long)+0x42>
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    6b9a:	ldr	r1, [r5, #24]
    6b9c:	movs	r2, #3
    6b9e:	mov	r0, r6
    6ba0:	add.w	r1, r1, r4, lsr #7
    6ba4:	bl	29b8 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    6ba8:	cmp	r0, #0
    6baa:	beq.n	6b0c <FatPartition::freeChain(unsigned long)+0x20>
    uint16_t offset = (cluster << 2) & m_sectorMask;
    6bac:	lsls	r3, r4, #2
  *reinterpret_cast<uint32_t*>(dst) = src;
    6bae:	movs	r2, #0
    setLe32(pc + offset, value);
    6bb0:	and.w	r3, r3, #508	; 0x1fc
    6bb4:	str	r2, [r0, r3]
    return true;
    6bb6:	b.n	6b6a <FatPartition::freeChain(unsigned long)+0x7e>
  return true;
    6bb8:	movs	r0, #1
    6bba:	b.n	6b0e <FatPartition::freeChain(unsigned long)+0x22>

00006bbc <FatPartition::freeClusterCount()>:
//------------------------------------------------------------------------------
int32_t FatPartition::freeClusterCount() {
    6bbc:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint8_t fatType() const { return m_fatType; }
    6bc0:	ldrb	r3, [r0, #7]
    6bc2:	mov	r6, r0
    return m_freeClusterCount;
  }
#endif  // MAINTAIN_FREE_CLUSTER_COUNT
  uint32_t free = 0;
  uint32_t sector;
  uint32_t todo = m_lastCluster + 1;
    6bc4:	ldr	r5, [r0, #28]
      }
      if (fg && c == 0) {
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    6bc6:	cmp	r3, #32
  uint32_t todo = m_lastCluster + 1;
    6bc8:	add.w	r5, r5, #1
  } else if (fatType() == 16 || fatType() == 32) {
    6bcc:	beq.n	6bd2 <FatPartition::freeClusterCount()+0x16>
    6bce:	cmp	r3, #16
    6bd0:	bne.n	6c50 <FatPartition::freeClusterCount()+0x94>
    sector = m_fatStartSector;
    6bd2:	ldr.w	r8, [r6, #24]
    while (todo) {
    6bd6:	cmp	r5, #0
    6bd8:	beq.n	6c58 <FatPartition::freeClusterCount()+0x9c>
    return m_fatCache.prepare(sector, options);
    6bda:	add.w	r7, r6, #564	; 0x234
  uint32_t free = 0;
    6bde:	movs	r4, #0
    6be0:	mov	r1, r8
    6be2:	movs	r2, #2
    6be4:	mov	r0, r7
    6be6:	add.w	r8, r8, #1
    6bea:	bl	29b8 <FsCache::prepare(unsigned long, unsigned char)>
      uint8_t* pc = fatCachePrepare(sector++, FsCache::CACHE_FOR_READ);
      if (!pc) {
    6bee:	cbz	r0, 6c50 <FatPartition::freeClusterCount()+0x94>
        DBG_FAIL_MACRO;
        goto fail;
      }
      n = fatType() == 16 ? m_bytesPerSector / 2 : m_bytesPerSector / 4;
    6bf0:	ldrb	r3, [r6, #7]
    6bf2:	cmp	r3, #16
    6bf4:	beq.n	6c1e <FatPartition::freeClusterCount()+0x62>
      if (todo < n) {
    6bf6:	cmp	r5, #127	; 0x7f
    6bf8:	bhi.n	6c44 <FatPartition::freeClusterCount()+0x88>
        n = todo;
    6bfa:	uxth	r3, r5
    6bfc:	mov	r1, r5
    6bfe:	subs	r2, r3, #1
    6c00:	subs	r3, r0, #4
    6c02:	uxth	r2, r2
    6c04:	add.w	r0, r0, r2, lsl #2
          }
        }
      } else {
        uint32_t* p32 = reinterpret_cast<uint32_t*>(pc);
        for (uint16_t i = 0; i < n; i++) {
          if (p32[i] == 0) {
    6c08:	ldr.w	r2, [r3, #4]!
    6c0c:	cbnz	r2, 6c10 <FatPartition::freeClusterCount()+0x54>
            free++;
    6c0e:	adds	r4, #1
        for (uint16_t i = 0; i < n; i++) {
    6c10:	cmp	r0, r3
    6c12:	bne.n	6c08 <FatPartition::freeClusterCount()+0x4c>
    while (todo) {
    6c14:	subs	r5, r5, r1
    6c16:	bne.n	6be0 <FatPartition::freeClusterCount()+0x24>
  } else {
    // invalid FAT type
    DBG_FAIL_MACRO;
    goto fail;
  }
  setFreeClusterCount(free);
    6c18:	mov	r0, r4
  return free;

fail:
  return -1;
}
    6c1a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (todo < n) {
    6c1e:	cmp	r5, #255	; 0xff
    6c20:	bls.n	6c4a <FatPartition::freeClusterCount()+0x8e>
    6c22:	mov.w	r1, #256	; 0x100
      n = fatType() == 16 ? m_bytesPerSector / 2 : m_bytesPerSector / 4;
    6c26:	mov	r3, r1
    6c28:	subs	r2, r3, #1
    6c2a:	subs	r3, r0, #2
    6c2c:	uxth	r2, r2
    6c2e:	add.w	r0, r0, r2, lsl #1
          if (p16[i] == 0) {
    6c32:	ldrh.w	r2, [r3, #2]!
    6c36:	cbnz	r2, 6c3a <FatPartition::freeClusterCount()+0x7e>
            free++;
    6c38:	adds	r4, #1
        for (uint16_t i = 0; i < n; i++) {
    6c3a:	cmp	r0, r3
    6c3c:	bne.n	6c32 <FatPartition::freeClusterCount()+0x76>
    while (todo) {
    6c3e:	subs	r5, r5, r1
    6c40:	bne.n	6be0 <FatPartition::freeClusterCount()+0x24>
    6c42:	b.n	6c18 <FatPartition::freeClusterCount()+0x5c>
      if (todo < n) {
    6c44:	movs	r1, #128	; 0x80
      n = fatType() == 16 ? m_bytesPerSector / 2 : m_bytesPerSector / 4;
    6c46:	mov	r3, r1
    6c48:	b.n	6bfe <FatPartition::freeClusterCount()+0x42>
        n = todo;
    6c4a:	uxth	r3, r5
    6c4c:	mov	r1, r5
    6c4e:	b.n	6c28 <FatPartition::freeClusterCount()+0x6c>
  return -1;
    6c50:	mov.w	r0, #4294967295
}
    6c54:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    while (todo) {
    6c58:	mov	r0, r5
  return free;
    6c5a:	b.n	6c1a <FatPartition::freeClusterCount()+0x5e>

00006c5c <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)>:
//------------------------------------------------------------------------------
bool FatPartition::init(FsBlockDevice* dev, uint8_t part, uint32_t volStart) {
    6c5c:	push	{r3, r4, r5, r6, r7, lr}
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(dev);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    6c5e:	mov	r5, r2
    m_sector = 0XFFFFFFFF;
    6c60:	mov.w	r2, #4294967295
  m_fatType = 0;
    6c64:	mov.w	ip, #0
bool FatPartition::init(FsBlockDevice* dev, uint8_t part, uint32_t volStart) {
    6c68:	mov	r4, r0
    6c6a:	str	r2, [r0, #44]	; 0x2c
  m_cache.init(dev);
    6c6c:	add.w	r7, r0, #36	; 0x24
    6c70:	str.w	r2, [r0, #572]	; 0x23c
  m_allocSearchStart = 1;
    6c74:	movs	r2, #1
  m_blockDev = dev;
    6c76:	str	r1, [r0, #0]
  m_fatType = 0;
    6c78:	strb.w	ip, [r0, #7]
    m_blockDev = blockDev;
    6c7c:	str	r1, [r0, #40]	; 0x28
    6c7e:	str.w	r1, [r0, #568]	; 0x238
    m_status = 0;
    6c82:	strb.w	ip, [r0, #36]	; 0x24
    6c86:	strb.w	ip, [r0, #564]	; 0x234
  m_allocSearchStart = 1;
    6c8a:	str	r2, [r0, #12]
  if (part) {
    6c8c:	cbz	r5, 6cc4 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x68>
    if (part > 4) {
    6c8e:	cmp	r5, #4
    6c90:	bls.n	6c96 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x3a>
  m_fatCache.setMirrorOffset(m_sectorsPerFat);
#endif  // USE_SEPARATE_FAT_CACHE
  return true;

fail:
  return false;
    6c92:	movs	r0, #0
}
    6c94:	pop	{r3, r4, r5, r6, r7, pc}
    return m_cache.prepare(sector, options);
    6c96:	mov	r2, ip
    6c98:	mov	r1, ip
    6c9a:	mov	r0, r7
    6c9c:	bl	29b8 <FsCache::prepare(unsigned long, unsigned char)>
    if (!mbr) {
    6ca0:	cmp	r0, #0
    6ca2:	beq.n	6c92 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x36>
    MbrPart_t* mp = mbr->part + part - 1;
    6ca4:	mvn.w	r3, #4026531840	; 0xf0000000
    6ca8:	add.w	r0, r0, #446	; 0x1be
    6cac:	add	r3, r5
    6cae:	lsls	r1, r3, #4
    6cb0:	add.w	r3, r0, r3, lsl #4
    if (mp->type == 0 || (mp->boot != 0 && mp->boot != 0X80)) {
    6cb4:	ldrb	r2, [r3, #4]
    6cb6:	cmp	r2, #0
    6cb8:	beq.n	6c92 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x36>
    6cba:	ldrb	r2, [r0, r1]
    6cbc:	lsls	r2, r2, #25
    6cbe:	bne.n	6c92 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x36>
  return *reinterpret_cast<const uint32_t*>(src);
    6cc0:	ldr	r6, [r3, #8]
    6cc2:	b.n	6cc6 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x6a>
    6cc4:	mov	r6, r3
    6cc6:	movs	r2, #0
    6cc8:	mov	r1, r6
    6cca:	mov	r0, r7
    6ccc:	bl	29b8 <FsCache::prepare(unsigned long, unsigned char)>
  if (!pbs) {
    6cd0:	cmp	r0, #0
    6cd2:	beq.n	6c92 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x36>
  if (bpb->fatCount != 2 || getLe16(bpb->bytesPerSector) != m_bytesPerSector) {
    6cd4:	ldrb	r2, [r0, #16]
    6cd6:	cmp	r2, #2
    6cd8:	bne.n	6c92 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x36>
    6cda:	ldrh.w	r3, [r0, #11]
    6cde:	cmp.w	r3, #512	; 0x200
    6ce2:	bne.n	6c92 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x36>
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    6ce4:	ldrb	r3, [r0, #13]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    6ce6:	subs	r1, r3, #1
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    6ce8:	cmp	r3, #1
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    6cea:	strb	r3, [r4, #4]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    6cec:	strb	r1, [r4, #5]
  m_sectorsPerClusterShift = 0;
    6cee:	mov.w	r1, #0
    6cf2:	strb	r1, [r4, #6]
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    6cf4:	beq.n	6d24 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0xc8>
    6cf6:	cmp	r3, #2
    6cf8:	beq.n	6d1e <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0xc2>
    6cfa:	cmp	r3, #4
    6cfc:	beq.n	6d20 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0xc4>
    6cfe:	cmp	r3, #8
    6d00:	beq.n	6d8c <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x130>
    6d02:	cmp	r3, #16
    6d04:	beq.n	6d90 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x134>
    6d06:	cmp	r3, #32
    6d08:	beq.n	6d94 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x138>
    6d0a:	cmp	r3, #64	; 0x40
    6d0c:	beq.n	6d98 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x13c>
    6d0e:	cmp	r3, #128	; 0x80
    6d10:	beq.n	6d9c <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x140>
    6d12:	cmp	r3, #0
    6d14:	beq.n	6da0 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x144>
    if (tmp == 0) {
    6d16:	movs	r3, #8
  return false;
    6d18:	movs	r0, #0
    6d1a:	strb	r3, [r4, #6]
}
    6d1c:	pop	{r3, r4, r5, r6, r7, pc}
    m_sectorsPerClusterShift++;
    6d1e:	movs	r2, #1
  countOfClusters >>= m_sectorsPerClusterShift;
    6d20:	mov	r1, r2
    6d22:	strb	r2, [r4, #6]
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
    6d24:	ldrh	r5, [r0, #22]
    6d26:	str	r5, [r4, #16]
  if (m_sectorsPerFat == 0) {
    6d28:	cbnz	r5, 6d2e <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0xd2>
    6d2a:	ldr	r5, [r0, #36]	; 0x24
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
    6d2c:	str	r5, [r4, #16]
  m_fatStartSector = volStart + getLe16(bpb->reservedSectorCount);
    6d2e:	ldrh	r3, [r0, #14]
  return *reinterpret_cast<const uint16_t*>(src);
    6d30:	ldrh.w	r2, [r0, #17]
    6d34:	add	r3, r6
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);
    6d36:	strh	r2, [r4, #8]
      ((FS_DIR_SIZE * m_rootDirEntryCount + m_bytesPerSector - 1) /
    6d38:	lsls	r2, r2, #5
  m_fatStartSector = volStart + getLe16(bpb->reservedSectorCount);
    6d3a:	str	r3, [r4, #24]
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
    6d3c:	add.w	r3, r3, r5, lsl #1
      ((FS_DIR_SIZE * m_rootDirEntryCount + m_bytesPerSector - 1) /
    6d40:	addw	r2, r2, #511	; 0x1ff
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
    6d44:	str	r3, [r4, #32]
      m_rootDirStart +
    6d46:	add.w	r3, r3, r2, lsr #9
  totalSectors = getLe16(bpb->totalSectors16);
    6d4a:	ldrh.w	r2, [r0, #19]
  m_dataStartSector =
    6d4e:	str	r3, [r4, #20]
  if (totalSectors == 0) {
    6d50:	cbnz	r2, 6d54 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0xf8>
  return *reinterpret_cast<const uint32_t*>(src);
    6d52:	ldr	r2, [r0, #32]
  countOfClusters = totalSectors - (m_dataStartSector - volStart);
    6d54:	subs	r3, r6, r3
    6d56:	add	r3, r2
  countOfClusters >>= m_sectorsPerClusterShift;
    6d58:	lsrs	r3, r1
  m_lastCluster = countOfClusters + 1;
    6d5a:	adds	r2, r3, #1
    6d5c:	str	r2, [r4, #28]
  if (countOfClusters < 4085) {
    6d5e:	movw	r2, #4084	; 0xff4
    6d62:	cmp	r3, r2
    6d64:	bls.n	6d80 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x124>
  } else if (countOfClusters < 65525) {
    6d66:	movw	r2, #65524	; 0xfff4
    6d6a:	cmp	r3, r2
    6d6c:	bls.n	6d88 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x12c>
    6d6e:	ldr	r2, [r0, #44]	; 0x2c
    m_fatType = 32;
    6d70:	movs	r3, #32
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
    6d72:	str	r2, [r4, #32]
  return true;
    6d74:	movs	r0, #1
    6d76:	strb	r3, [r4, #7]
  /** Set the offset to the second FAT for mirroring.
   * \param[in] offset Sector offset to second FAT.
   */
  void setMirrorOffset(uint32_t offset) { m_mirrorOffset = offset; }
    6d78:	str	r5, [r4, #48]	; 0x30
    6d7a:	str.w	r5, [r4, #576]	; 0x240
}
    6d7e:	pop	{r3, r4, r5, r6, r7, pc}
    m_fatType = 12;
    6d80:	movs	r3, #12
  return false;
    6d82:	movs	r0, #0
    m_fatType = 12;
    6d84:	strb	r3, [r4, #7]
}
    6d86:	pop	{r3, r4, r5, r6, r7, pc}
    m_fatType = 16;
    6d88:	movs	r3, #16
    6d8a:	b.n	6d74 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x118>
    m_sectorsPerClusterShift++;
    6d8c:	movs	r2, #3
    6d8e:	b.n	6d20 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0xc4>
    6d90:	movs	r2, #4
    6d92:	b.n	6d20 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0xc4>
    6d94:	movs	r2, #5
    6d96:	b.n	6d20 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0xc4>
    6d98:	movs	r2, #6
    6d9a:	b.n	6d20 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0xc4>
    6d9c:	movs	r2, #7
    6d9e:	b.n	6d20 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0xc4>
    6da0:	movs	r2, #8
    6da2:	b.n	6d20 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0xc4>

00006da4 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)>:
  } else if (i < 13) {
    setLe16(ldir->unicode3 + 2 * (i - 11), c);
  }
}
//==============================================================================
bool FatFile::cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    6da4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  FatFile dir = *this;
    6da8:	mov	lr, r0
bool FatFile::cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    6daa:	sub	sp, #40	; 0x28
    6dac:	mov	r5, r2
    6dae:	ldr	r4, [r2, #0]
    6db0:	mov	r6, r0
    6db2:	mov	r8, r1
  FatFile dir = *this;
    6db4:	add.w	ip, sp, #4
  DirLfn_t* ldir;
  fname->reset();
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    6db8:	mov	r7, r3
  FatFile dir = *this;
    6dba:	ldmia.w	lr!, {r0, r1, r2, r3}
    6dbe:	stmia.w	ip!, {r0, r1, r2, r3}
    6dc2:	ldmia.w	lr!, {r0, r1, r2, r3}
    6dc6:	stmia.w	ip!, {r0, r1, r2, r3}
    6dca:	ldr.w	r3, [lr]
    6dce:	str	r4, [r5, #4]
    6dd0:	str.w	r3, [ip]
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    6dd4:	cmp	r7, #0
    6dd6:	beq.n	6e50 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xac>
    6dd8:	mov.w	r9, #1
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(index - order));
    6ddc:	sub.w	r1, r8, r9
    return seekSet(32UL * index) ? readDirCache() : nullptr;
    6de0:	add	r0, sp, #4
    6de2:	uxth	r1, r1
    6de4:	lsls	r1, r1, #5
    6de6:	bl	624c <FatFile::seekSet(unsigned long)>
    6dea:	cbz	r0, 6e54 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xb0>
    6dec:	movs	r1, #0
    6dee:	add	r0, sp, #4
    6df0:	bl	5f8c <FatFile::readDirCache(bool)>
    if (!ldir) {
    6df4:	mov	sl, r0
    6df6:	cbz	r0, 6e54 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xb0>
    6df8:	movs	r4, #0
    }
    // These should be checked in caller.
    DBG_HALT_IF(ldir->attributes != FAT_ATTRIB_LONG_NAME);
    DBG_HALT_IF(order != (ldir->order & 0X1F));
    for (uint8_t i = 0; i < 13; i++) {
      uint16_t u = getLfnChar(ldir, i);
    6dfa:	uxtb	r2, r4
    6dfc:	mov	r1, sl
    6dfe:	mov	r0, r6
    for (uint8_t i = 0; i < 13; i++) {
    6e00:	adds	r4, #1
      uint16_t u = getLfnChar(ldir, i);
    6e02:	bl	54e0 <FatFile::getLfnChar(DirLfn_t*, unsigned char)>
      DBG_HALT_IF(cp == 0XFFFF);
      if (toUpcase(u) != toUpcase(cp)) {
        return false;
      }
#else   // USE_UTF8_LONG_NAMES
      if (u > 0X7F || toUpper(u) != toUpper(fname->getch())) {
    6e06:	uxtb	r3, r0
      if (fname->atEnd()) {
    6e08:	ldrd	r1, r2, [r5, #4]
    6e0c:	cmp	r2, r1
  char getch() { return atEnd() ? 0 : *next++; }
    6e0e:	add.w	ip, r1, #1
    6e12:	beq.n	6e5c <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xb8>
      if (u > 0X7F || toUpper(u) != toUpper(fname->getch())) {
    6e14:	cmp	r0, #127	; 0x7f
inline char toUpper(char c) { return isLower(c) ? c - 'a' + 'A' : c; }
    6e16:	sub.w	r2, r3, #97	; 0x61
    6e1a:	sub.w	lr, r3, #32
      if (u > 0X7F || toUpper(u) != toUpper(fname->getch())) {
    6e1e:	bhi.n	6e54 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xb0>
inline char toUpper(char c) { return isLower(c) ? c - 'a' + 'A' : c; }
    6e20:	cmp	r2, #25
    6e22:	str.w	ip, [r5, #4]
    6e26:	ldrb	r2, [r1, #0]
    6e28:	it	ls
    6e2a:	uxtbls.w	r3, lr
    6e2e:	sub.w	r1, r2, #97	; 0x61
    6e32:	sub.w	r0, r2, #32
    6e36:	cmp	r1, #25
    6e38:	it	ls
    6e3a:	uxtbls	r2, r0
      if (u > 0X7F || toUpper(u) != toUpper(fname->getch())) {
    6e3c:	cmp	r2, r3
    6e3e:	bne.n	6e54 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xb0>
    for (uint8_t i = 0; i < 13; i++) {
    6e40:	cmp	r4, #13
    6e42:	bne.n	6dfa <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x56>
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    6e44:	add.w	r9, r9, #1
    6e48:	uxtb.w	r9, r9
    6e4c:	cmp	r7, r9
    6e4e:	bcs.n	6ddc <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x38>
        return false;
      }
#endif  // USE_UTF8_LONG_NAMES
    }
  }
  return true;
    6e50:	movs	r0, #1
    6e52:	b.n	6e56 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xb2>

fail:
  return false;
    6e54:	movs	r0, #0
}
    6e56:	add	sp, #40	; 0x28
    6e58:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return u == 0;
    6e5c:	clz	r0, r0
    6e60:	lsrs	r0, r0, #5
}
    6e62:	add	sp, #40	; 0x28
    6e64:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00006e68 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)>:
//------------------------------------------------------------------------------
bool FatFile::createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    6e68:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    6e6c:	ldrb	r5, [r2, #18]
    6e6e:	mov	r4, r2
    6e70:	ldrb	r7, [r2, #19]
  FatFile dir = *this;
    6e72:	mov	ip, r0
bool FatFile::createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    6e74:	mov	r6, r1
    6e76:	ldrb	r0, [r2, #20]
    6e78:	ldrb	r1, [r2, #21]
    6e7a:	lsls	r2, r5, #7
    6e7c:	ldrb.w	sl, [r4, #23]
    6e80:	sub	sp, #44	; 0x2c
    6e82:	orr.w	r2, r2, r5, lsr #1
    6e86:	ldrb	r5, [r4, #22]
    6e88:	ldrb.w	r9, [r4, #24]
    6e8c:	add	r2, r7
    6e8e:	ldrb.w	r8, [r4, #25]
    6e92:	uxtb	r7, r2
    6e94:	ubfx	r2, r2, #1, #7
    6e98:	orr.w	r2, r2, r7, lsl #7
    6e9c:	ldrb	r7, [r4, #26]
    6e9e:	uxtab	r2, r0, r2
    6ea2:	ldrb	r0, [r4, #27]
    6ea4:	uxtb.w	lr, r2
    6ea8:	ubfx	r2, r2, #1, #7
    6eac:	orr.w	r2, r2, lr, lsl #7
  FatFile dir = *this;
    6eb0:	add.w	lr, sp, #4
    6eb4:	uxtab	r2, r1, r2
    6eb8:	ldrb	r1, [r4, #28]
    6eba:	uxtb.w	fp, r2
    6ebe:	ubfx	r2, r2, #1, #7
    6ec2:	orr.w	r2, r2, fp, lsl #7
    6ec6:	uxtab	r2, r5, r2
  DirLfn_t* ldir;
  uint8_t checksum = lfnChecksum(fname->sfn);
  uint8_t fc = 0;
  fname->reset();

  for (uint8_t order = 1; order <= lfnOrd; order++) {
    6eca:	mov	r5, r3
    6ecc:	uxtb.w	fp, r2
    6ed0:	ubfx	r3, r2, #1, #7
    6ed4:	orr.w	r3, r3, fp, lsl #7
    6ed8:	uxtab	r3, sl, r3
    6edc:	uxtb	r2, r3
    6ede:	ubfx	r3, r3, #1, #7
    6ee2:	orr.w	r3, r3, r2, lsl #7
    6ee6:	uxtab	r3, r9, r3
    6eea:	uxtb	r2, r3
    6eec:	ubfx	r3, r3, #1, #7
    6ef0:	orr.w	r3, r3, r2, lsl #7
    6ef4:	uxtab	r3, r8, r3
    6ef8:	uxtb	r2, r3
    6efa:	ubfx	r3, r3, #1, #7
    6efe:	orr.w	r3, r3, r2, lsl #7
    6f02:	uxtab	r3, r7, r3
    6f06:	uxtb	r2, r3
    6f08:	ubfx	r3, r3, #1, #7
    6f0c:	orr.w	r3, r3, r2, lsl #7
    6f10:	uxtab	r3, r0, r3
    6f14:	uxtb	r2, r3
    6f16:	ubfx	r7, r3, #1, #7
    6f1a:	orr.w	r7, r7, r2, lsl #7
    6f1e:	uxtab	r7, r1, r7
  FatFile dir = *this;
    6f22:	ldmia.w	ip!, {r0, r1, r2, r3}
    6f26:	stmia.w	lr!, {r0, r1, r2, r3}
    6f2a:	ldmia.w	ip!, {r0, r1, r2, r3}
    6f2e:	stmia.w	lr!, {r0, r1, r2, r3}
    6f32:	ldr.w	r3, [ip]
    6f36:	str.w	r3, [lr]
  void reset() { next = begin; }
    6f3a:	ldr	r3, [r4, #0]
    6f3c:	str	r3, [r4, #4]
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    6f3e:	cmp	r5, #0
    6f40:	beq.w	711c <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x2b4>
    6f44:	uxtb	r7, r7
    6f46:	mov.w	fp, #1
  uint8_t fc = 0;
    6f4a:	mov.w	sl, #0
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dir.m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    6f4e:	orr.w	r9, r5, #64	; 0x40
  *reinterpret_cast<uint16_t*>(dst) = src;
    6f52:	ldr.w	r8, [pc, #876]	; 72c0 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x458>
    6f56:	b.n	7070 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x208>
    return seekSet(32UL * index) ? readDirCache() : nullptr;
    6f58:	movs	r1, #0
    6f5a:	add	r0, sp, #4
    6f5c:	bl	5f8c <FatFile::readDirCache(bool)>
    if (!ldir) {
    6f60:	cmp	r0, #0
    6f62:	beq.w	7084 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x21c>
    dir.m_vol->cacheDirty();
    6f66:	ldr	r2, [sp, #12]
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    6f68:	cmp	r5, fp
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    6f6a:	mov.w	r1, #15
    6f6e:	mov.w	ip, #0
  void dirty() { m_status |= CACHE_STATUS_DIRTY; }
    6f72:	ldrb.w	r3, [r2, #36]	; 0x24
    6f76:	orr.w	r3, r3, #1
    6f7a:	strb.w	r3, [r2, #36]	; 0x24
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    6f7e:	ite	ne
    6f80:	movne	r3, fp
    6f82:	moveq	r3, r9
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    6f84:	strh.w	r1, [r0, #11]
    ldir->mustBeZero1 = 0;
    ldir->checksum = checksum;
    6f88:	strb	r7, [r0, #13]
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    6f8a:	strb	r3, [r0, #0]
  bool atEnd() { return next == end; }
    6f8c:	ldrd	r1, r2, [r4, #4]
    6f90:	strh.w	ip, [r0, #26]
    setLe16(ldir->mustBeZero2, 0);
    for (uint8_t i = 0; i < 13; i++) {
      uint16_t cp;
      if (fname->atEnd()) {
    6f94:	cmp	r1, r2
    6f96:	beq.n	708c <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x224>
  uint16_t get16() { return atEnd() ? 0 : *next++; }
    6f98:	adds	r3, r1, #1
    6f9a:	str	r3, [r4, #4]
    6f9c:	cmp	r2, r3
    6f9e:	ldrb.w	ip, [r1]
    6fa2:	strh.w	ip, [r0, #1]
    6fa6:	beq.n	70a6 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x23e>
    6fa8:	adds	r3, r1, #2
    6faa:	str	r3, [r4, #4]
    6fac:	cmp	r2, r3
    6fae:	ldrb.w	ip, [r1, #1]
    6fb2:	strh.w	ip, [r0, #3]
    6fb6:	beq.w	7134 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x2cc>
    6fba:	adds	r3, r1, #3
    6fbc:	str	r3, [r4, #4]
    6fbe:	cmp	r2, r3
    6fc0:	ldrb.w	ip, [r1, #2]
    6fc4:	strh.w	ip, [r0, #5]
    6fc8:	beq.w	71ac <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x344>
    6fcc:	adds	r3, r1, #4
    6fce:	str	r3, [r4, #4]
    6fd0:	cmp	r2, r3
    6fd2:	ldrb.w	ip, [r1, #3]
    6fd6:	strh.w	ip, [r0, #7]
    6fda:	beq.w	725a <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x3f2>
    6fde:	add.w	ip, r1, #5
    6fe2:	str.w	ip, [r4, #4]
    6fe6:	ldrb	r3, [r1, #4]
    6fe8:	cmp	r2, ip
    6fea:	strh.w	r3, [r0, #9]
    6fee:	beq.w	7226 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x3be>
    6ff2:	add.w	r3, ip, #1
    6ff6:	str	r3, [r4, #4]
    6ff8:	cmp	r2, r3
    6ffa:	ldrb.w	r1, [ip]
    6ffe:	strh	r1, [r0, #14]
    7000:	beq.n	70d2 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x26a>
    7002:	adds	r1, r3, #1
    7004:	str	r1, [r4, #4]
    7006:	cmp	r2, r1
    7008:	ldrb	r3, [r3, #0]
    700a:	strh	r3, [r0, #16]
    700c:	beq.w	7162 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x2fa>
    7010:	adds	r3, r1, #1
    7012:	str	r3, [r4, #4]
    7014:	cmp	r2, r3
    7016:	ldrb	r1, [r1, #0]
    7018:	strh	r1, [r0, #18]
    701a:	beq.w	71d6 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x36e>
    701e:	adds	r1, r3, #1
    7020:	str	r1, [r4, #4]
    7022:	ldrb	r3, [r3, #0]
    7024:	cmp	r2, r1
    7026:	strh	r3, [r0, #20]
    7028:	beq.w	71f6 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x38e>
    702c:	add.w	ip, r1, #1
    7030:	str.w	ip, [r4, #4]
    7034:	ldrb	r3, [r1, #0]
    7036:	cmp	r2, ip
    7038:	strh	r3, [r0, #22]
    703a:	beq.w	7210 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x3a8>
    703e:	add.w	r3, ip, #1
    7042:	str	r3, [r4, #4]
    7044:	cmp	r2, r3
    7046:	ldrb.w	r1, [ip]
    704a:	strh	r1, [r0, #24]
    704c:	beq.n	70fa <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x292>
    704e:	adds	r1, r3, #1
    7050:	str	r1, [r4, #4]
    7052:	cmp	r2, r1
    7054:	ldrb	r3, [r3, #0]
    7056:	strh	r3, [r0, #28]
    7058:	beq.w	718e <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x326>
    705c:	adds	r3, r1, #1
    705e:	str	r3, [r4, #4]
    7060:	ldrb	r3, [r1, #0]
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    7062:	add.w	fp, fp, #1
    7066:	strh	r3, [r0, #30]
    7068:	uxtb.w	fp, fp
    706c:	cmp	r5, fp
    706e:	bcc.n	711c <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x2b4>
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(index - order));
    7070:	sub.w	r1, r6, fp
    7074:	add	r0, sp, #4
    7076:	uxth	r1, r1
    7078:	lsls	r1, r1, #5
    707a:	bl	624c <FatFile::seekSet(unsigned long)>
    707e:	cmp	r0, #0
    7080:	bne.w	6f58 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xf0>
    }
  }
  return true;

fail:
  return false;
    7084:	movs	r0, #0
}
    7086:	add	sp, #44	; 0x2c
    7088:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        cp = fc++ ? 0XFFFF : 0;
    708c:	cmp.w	sl, #0
    7090:	beq.w	7282 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x41a>
    7094:	movw	r3, #65535	; 0xffff
    7098:	add.w	sl, sl, #1
    709c:	strh.w	r3, [r0, #1]
    70a0:	uxtb.w	sl, sl
    70a4:	mov	r3, r2
    70a6:	cmp.w	sl, #0
    70aa:	bne.n	7124 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x2bc>
    70ac:	movw	r1, #65535	; 0xffff
    70b0:	mov.w	sl, #4
    70b4:	str.w	r8, [r0, #3]
    70b8:	strh.w	r1, [r0, #7]
    70bc:	strh.w	r1, [r0, #9]
    70c0:	add.w	sl, sl, #1
    70c4:	movw	r1, #65535	; 0xffff
      if (fname->atEnd()) {
    70c8:	cmp	r2, r3
        cp = fc++ ? 0XFFFF : 0;
    70ca:	uxtb.w	sl, sl
    70ce:	strh	r1, [r0, #14]
      if (fname->atEnd()) {
    70d0:	bne.n	7002 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x19a>
        cp = fc++ ? 0XFFFF : 0;
    70d2:	cmp.w	sl, #0
    70d6:	bne.n	714c <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x2e4>
    70d8:	movw	r1, #65535	; 0xffff
    70dc:	mov.w	sl, #4
    70e0:	str.w	r8, [r0, #16]
    70e4:	strh	r1, [r0, #20]
    70e6:	strh	r1, [r0, #22]
    70e8:	add.w	sl, sl, #1
    70ec:	movw	r1, #65535	; 0xffff
      if (fname->atEnd()) {
    70f0:	cmp	r2, r3
        cp = fc++ ? 0XFFFF : 0;
    70f2:	uxtb.w	sl, sl
    70f6:	strh	r1, [r0, #24]
      if (fname->atEnd()) {
    70f8:	bne.n	704e <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x1e6>
        cp = fc++ ? 0XFFFF : 0;
    70fa:	cmp.w	sl, #0
    70fe:	bne.w	72a6 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x43e>
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    7102:	add.w	fp, fp, #1
        cp = fc++ ? 0XFFFF : 0;
    7106:	movw	r3, #65535	; 0xffff
    710a:	strh.w	sl, [r0, #28]
    710e:	mov.w	sl, #2
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    7112:	uxtb.w	fp, fp
    7116:	strh	r3, [r0, #30]
    7118:	cmp	r5, fp
    711a:	bcs.n	7070 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x208>
  return true;
    711c:	movs	r0, #1
}
    711e:	add	sp, #44	; 0x2c
    7120:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        cp = fc++ ? 0XFFFF : 0;
    7124:	add.w	sl, sl, #1
    7128:	movw	r1, #65535	; 0xffff
    712c:	uxtb.w	sl, sl
    7130:	strh.w	r1, [r0, #3]
    7134:	cmp.w	sl, #0
    7138:	bne.n	719c <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x334>
    713a:	movw	r1, #65535	; 0xffff
    713e:	mov.w	sl, #4
    7142:	str.w	r8, [r0, #5]
    7146:	strh.w	r1, [r0, #9]
    714a:	strh	r1, [r0, #14]
    714c:	mov	r1, r3
    714e:	add.w	sl, sl, #1
    7152:	movw	r3, #65535	; 0xffff
      if (fname->atEnd()) {
    7156:	cmp	r2, r1
        cp = fc++ ? 0XFFFF : 0;
    7158:	uxtb.w	sl, sl
    715c:	strh	r3, [r0, #16]
      if (fname->atEnd()) {
    715e:	bne.w	7010 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x1a8>
        cp = fc++ ? 0XFFFF : 0;
    7162:	cmp.w	sl, #0
    7166:	bne.w	72b2 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x44a>
    716a:	movw	r3, #65535	; 0xffff
    716e:	mov.w	sl, #4
    7172:	str.w	r8, [r0, #18]
    7176:	strh	r3, [r0, #22]
    7178:	strh	r3, [r0, #24]
    717a:	add.w	sl, sl, #1
    717e:	movw	r3, #65535	; 0xffff
      if (fname->atEnd()) {
    7182:	cmp	r2, r1
        cp = fc++ ? 0XFFFF : 0;
    7184:	uxtb.w	sl, sl
    7188:	strh	r3, [r0, #28]
      if (fname->atEnd()) {
    718a:	bne.w	705c <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x1f4>
        cp = fc++ ? 0XFFFF : 0;
    718e:	cmp.w	sl, #0
    7192:	bne.n	71ec <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x384>
    7194:	mov	r3, sl
    7196:	mov.w	sl, #1
    719a:	b.n	7062 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x1fa>
    719c:	add.w	sl, sl, #1
    71a0:	movw	r1, #65535	; 0xffff
    71a4:	uxtb.w	sl, sl
    71a8:	strh.w	r1, [r0, #5]
    71ac:	cmp.w	sl, #0
    71b0:	bne.n	724a <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x3e2>
    71b2:	movw	r1, #65535	; 0xffff
    71b6:	mov.w	sl, #4
    71ba:	str.w	r8, [r0, #7]
    71be:	strh	r1, [r0, #14]
    71c0:	strh	r1, [r0, #16]
    71c2:	add.w	sl, sl, #1
    71c6:	movw	r1, #65535	; 0xffff
      if (fname->atEnd()) {
    71ca:	cmp	r2, r3
        cp = fc++ ? 0XFFFF : 0;
    71cc:	uxtb.w	sl, sl
    71d0:	strh	r1, [r0, #18]
      if (fname->atEnd()) {
    71d2:	bne.w	701e <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x1b6>
        cp = fc++ ? 0XFFFF : 0;
    71d6:	cmp.w	sl, #0
    71da:	bne.n	7272 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x40a>
    71dc:	movw	r3, #65535	; 0xffff
    71e0:	mov.w	sl, #4
    71e4:	str.w	r8, [r0, #20]
    71e8:	strh	r3, [r0, #24]
    71ea:	strh	r3, [r0, #28]
    71ec:	add.w	sl, sl, #1
    71f0:	uxtb.w	sl, sl
    71f4:	b.n	720a <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x3a2>
    71f6:	cmp.w	sl, #0
    71fa:	bne.n	72ba <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x452>
    71fc:	movw	r3, #65535	; 0xffff
    7200:	mov.w	sl, #4
    7204:	str.w	r8, [r0, #22]
    7208:	strh	r3, [r0, #28]
    720a:	movw	r3, #65535	; 0xffff
    720e:	b.n	7062 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x1fa>
    7210:	cmp.w	sl, #0
    7214:	bne.n	72b6 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x44e>
    7216:	movw	r3, #65535	; 0xffff
    721a:	strh.w	sl, [r0, #24]
    721e:	mov.w	sl, #3
    7222:	strh	r3, [r0, #28]
    7224:	b.n	720a <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x3a2>
    7226:	cmp.w	sl, #0
    722a:	bne.n	72ae <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x446>
    722c:	movw	r3, #65535	; 0xffff
    7230:	mov.w	sl, #4
    7234:	str.w	r8, [r0, #14]
    7238:	strh	r3, [r0, #18]
    723a:	strh	r3, [r0, #20]
    723c:	add.w	sl, sl, #1
    7240:	movw	r3, #65535	; 0xffff
    7244:	uxtb.w	sl, sl
    7248:	b.n	7036 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x1ce>
    724a:	add.w	sl, sl, #1
    724e:	movw	r1, #65535	; 0xffff
    7252:	uxtb.w	sl, sl
    7256:	strh.w	r1, [r0, #7]
    725a:	cmp.w	sl, #0
    725e:	bne.n	72aa <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x442>
    7260:	mov.w	r1, #4294967295
    7264:	strh.w	sl, [r0, #9]
    7268:	mov.w	sl, #4
    726c:	str.w	r1, [r0, #14]
    7270:	strh	r1, [r0, #18]
    7272:	add.w	sl, sl, #1
    7276:	mov	r1, r3
    7278:	movw	r3, #65535	; 0xffff
    727c:	uxtb.w	sl, sl
    7280:	b.n	7024 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x1bc>
    7282:	movw	r3, #65535	; 0xffff
    7286:	mov	ip, r2
    7288:	mov.w	sl, #4
    728c:	str.w	r8, [r0, #1]
    7290:	strh.w	r3, [r0, #5]
    7294:	strh.w	r3, [r0, #7]
    7298:	add.w	sl, sl, #1
    729c:	movw	r3, #65535	; 0xffff
    72a0:	uxtb.w	sl, sl
    72a4:	b.n	6fe8 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x180>
    72a6:	mov	r1, r2
    72a8:	b.n	717a <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x312>
    72aa:	mov	ip, r3
    72ac:	b.n	7298 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x430>
    72ae:	mov	r3, r2
    72b0:	b.n	70c0 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x258>
    72b2:	mov	r3, r2
    72b4:	b.n	71c2 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x35a>
    72b6:	mov	r3, r2
    72b8:	b.n	70e8 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x280>
    72ba:	mov	ip, r2
    72bc:	b.n	723c <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x3d4>
    72be:	nop
    72c0:	.word	0xffff0000

000072c4 <FatFile::makeSFN(FatLfn_t*)>:
  uint8_t uc = 0;
  uint8_t i = 0;
  uint8_t in = 7;
  const char* dot;
  const char* end = fname->end;
  const char* ptr = fname->begin;
    72c4:	mov	r2, r0
  // Assume blanks removed from start and end.
  DBG_HALT_IF(*ptr == ' ' || *(end - 1) == ' ' || *(end - 1) == '.');

  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
    72c6:	mov.w	r1, #538976288	; 0x20202020
  const char* ptr = fname->begin;
    72ca:	ldr.w	r3, [r2], #18
bool FatFile::makeSFN(FatLfn_t* fname) {
    72ce:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    fname->sfn[k] = ' ';
    72d2:	str.w	r1, [r0, #18]
bool FatFile::makeSFN(FatLfn_t* fname) {
    72d6:	mov	lr, r0
  const char* end = fname->end;
    72d8:	ldr	r4, [r0, #8]
    fname->sfn[k] = ' ';
    72da:	str	r1, [r2, #4]
    72dc:	str.w	r1, [r2, #7]
  }
  // Not 8.3 if starts with dot.
  is83 = *ptr == '.' ? false : true;
    72e0:	ldrb	r2, [r3, #0]
    72e2:	cmp	r2, #46	; 0x2e
    72e4:	ite	ne
    72e6:	movne	r0, #1
    72e8:	moveq	r0, #0
  // Skip leading dots.
  for (; *ptr == '.'; ptr++) {
    72ea:	bne.n	72f4 <FatFile::makeSFN(FatLfn_t*)+0x30>
    72ec:	ldrb.w	r2, [r3, #1]!
    72f0:	cmp	r2, #46	; 0x2e
    72f2:	beq.n	72ec <FatFile::makeSFN(FatLfn_t*)+0x28>
  }
  // Find last dot.
  for (dot = end - 1; dot > ptr && *dot != '.'; dot--) {
    72f4:	subs	r1, r4, #1
    72f6:	cmp	r1, r3
    72f8:	bls.n	7312 <FatFile::makeSFN(FatLfn_t*)+0x4e>
    72fa:	mov	r2, r1
    72fc:	b.n	7304 <FatFile::makeSFN(FatLfn_t*)+0x40>
    72fe:	cmp	r2, r3
    7300:	mov	r1, r2
    7302:	beq.n	7312 <FatFile::makeSFN(FatLfn_t*)+0x4e>
    7304:	mov	r1, r2
    7306:	subs	r2, #1
    7308:	ldrb.w	ip, [r1]
    730c:	cmp.w	ip, #46	; 0x2e
    7310:	bne.n	72fe <FatFile::makeSFN(FatLfn_t*)+0x3a>
  }

  for (; ptr < end; ptr++) {
    7312:	cmp	r4, r3
    7314:	mov.w	r5, #0
    7318:	bls.w	7426 <FatFile::makeSFN(FatLfn_t*)+0x162>
    731c:	movs	r6, #7
    731e:	movs	r7, #8
    7320:	mov	r9, r5
    7322:	mov	r8, r5
    7324:	b.n	7334 <FatFile::makeSFN(FatLfn_t*)+0x70>
    7326:	adds	r3, #1
    c = *ptr;
    if (c == '.' && ptr == dot) {
      in = 10;                // Max index for full 8.3 name.
    7328:	movs	r6, #10
      i = 8;                  // Place for extension.
    732a:	mov.w	r9, #8
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    732e:	movs	r7, #16
  for (; ptr < end; ptr++) {
    7330:	cmp	r3, r4
    7332:	bcs.n	73ea <FatFile::makeSFN(FatLfn_t*)+0x126>
    c = *ptr;
    7334:	ldrb	r2, [r3, #0]
    if (c == '.' && ptr == dot) {
    7336:	cmp	r2, #46	; 0x2e
    7338:	it	eq
    733a:	cmpeq	r1, r3
    733c:	beq.n	7326 <FatFile::makeSFN(FatLfn_t*)+0x62>
  if (c == '"' || c == '|' || c == '[' || c == '\\' || c == ']') {
    733e:	cmp	r2, #34	; 0x22
    7340:	beq.n	735e <FatFile::makeSFN(FatLfn_t*)+0x9a>
    7342:	cmp	r2, #124	; 0x7c
    7344:	beq.n	735e <FatFile::makeSFN(FatLfn_t*)+0x9a>
    7346:	sub.w	ip, r2, #91	; 0x5b
    734a:	cmp.w	ip, #2
    734e:	bls.n	735e <FatFile::makeSFN(FatLfn_t*)+0x9a>
  if ((0X2A <= c && c <= 0X2F && c != 0X2D) || (0X3A <= c && c <= 0X3F)) {
    7350:	sub.w	ip, r2, #42	; 0x2a
    7354:	cmp.w	ip, #5
    7358:	bhi.n	739c <FatFile::makeSFN(FatLfn_t*)+0xd8>
    735a:	cmp	r2, #45	; 0x2d
    735c:	beq.n	739c <FatFile::makeSFN(FatLfn_t*)+0xd8>
    } else {
      if (sfnReservedChar(c)) {
        is83 = false;
        // Skip UTF-8 trailing characters.
        if ((c & 0XC0) == 0X80) {
    735e:	and.w	r2, r2, #192	; 0xc0
    7362:	cmp	r2, #128	; 0x80
    7364:	beq.n	7420 <FatFile::makeSFN(FatLfn_t*)+0x15c>
          continue;
        }
        c = '_';
      }
      if (i > in) {
    7366:	cmp	r6, r9
    7368:	bcs.n	73c8 <FatFile::makeSFN(FatLfn_t*)+0x104>
        is83 = false;
        if (in == 10 || ptr > dot) {
    736a:	cmp	r1, r3
    736c:	ite	cs
    736e:	movcs	r0, #0
    7370:	movcc	r0, #1
    7372:	cmp	r6, #10
    7374:	it	eq
    7376:	orreq.w	r0, r0, #1
    737a:	cmp	r0, #0
    737c:	beq.n	740c <FatFile::makeSFN(FatLfn_t*)+0x148>
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
    737e:	ldrb.w	r3, [lr, #18]
    7382:	cmp	r3, #32
    7384:	beq.n	7406 <FatFile::makeSFN(FatLfn_t*)+0x142>
  }
  if (is83) {
    fname->flags = (lc & uc) ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    7386:	ldrb.w	r3, [lr, #16]
    fname->flags = FNAME_FLAG_LOST_CHARS;
    738a:	movs	r0, #1
    fname->sfn[fname->seqPos] = '~';
    738c:	movw	r2, #12670	; 0x317e
    7390:	add	r3, lr
    fname->flags = FNAME_FLAG_LOST_CHARS;
    7392:	strb.w	r0, [lr, #17]
    fname->sfn[fname->seqPos] = '~';
    7396:	strh	r2, [r3, #18]
  }
  return true;

fail:
  return false;
}
    7398:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    739c:	sub.w	ip, r2, #58	; 0x3a
    73a0:	cmp.w	ip, #5
    73a4:	bls.n	735e <FatFile::makeSFN(FatLfn_t*)+0x9a>
      if (sfnReservedChar(c)) {
    73a6:	sub.w	ip, r2, #33	; 0x21
    73aa:	cmp.w	ip, #93	; 0x5d
    73ae:	bhi.n	735e <FatFile::makeSFN(FatLfn_t*)+0x9a>
      if (i > in) {
    73b0:	cmp	r6, r9
    73b2:	bcc.n	736a <FatFile::makeSFN(FatLfn_t*)+0xa6>
      if (isLower(c)) {
    73b4:	sub.w	ip, r2, #97	; 0x61
    73b8:	cmp.w	ip, #25
    73bc:	bhi.n	7410 <FatFile::makeSFN(FatLfn_t*)+0x14c>
        c += 'A' - 'a';
    73be:	subs	r2, #32
        lc |= bit;
    73c0:	orrs	r5, r7
        c += 'A' - 'a';
    73c2:	uxtb	r2, r2
        lc |= bit;
    73c4:	uxtb	r5, r5
    73c6:	b.n	73cc <FatFile::makeSFN(FatLfn_t*)+0x108>
        is83 = false;
    73c8:	movs	r0, #0
        c = '_';
    73ca:	movs	r2, #95	; 0x5f
      fname->sfn[i++] = c;
    73cc:	add.w	ip, r9, #1
    73d0:	add	r9, lr
  for (; ptr < end; ptr++) {
    73d2:	adds	r3, #1
      fname->sfn[i++] = c;
    73d4:	strb.w	r2, [r9, #18]
    73d8:	uxtb.w	r2, ip
      if (i < 7) {
    73dc:	cmp	r2, #6
        fname->seqPos = i;
    73de:	mov	r9, r2
    73e0:	it	ls
    73e2:	strbls.w	r2, [lr, #16]
  for (; ptr < end; ptr++) {
    73e6:	cmp	r3, r4
    73e8:	bcc.n	7334 <FatFile::makeSFN(FatLfn_t*)+0x70>
  if (fname->sfn[0] == ' ') {
    73ea:	ldrb.w	r3, [lr, #18]
    73ee:	cmp	r3, #32
    73f0:	beq.n	7406 <FatFile::makeSFN(FatLfn_t*)+0x142>
  if (is83) {
    73f2:	cmp	r0, #0
    73f4:	beq.n	7386 <FatFile::makeSFN(FatLfn_t*)+0xc2>
    fname->flags = (lc & uc) ? FNAME_FLAG_MIXED_CASE : lc;
    73f6:	tst.w	r8, r5
    73fa:	it	ne
    73fc:	movne	r5, #2
    73fe:	strb.w	r5, [lr, #17]
}
    7402:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  return false;
    7406:	movs	r0, #0
}
    7408:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    740c:	mov	r3, r1
    740e:	b.n	7330 <FatFile::makeSFN(FatLfn_t*)+0x6c>
      } else if (isUpper(c)) {
    7410:	sub.w	ip, r2, #65	; 0x41
    7414:	cmp.w	ip, #25
        uc |= bit;
    7418:	it	ls
    741a:	orrls.w	r8, r7, r8
    741e:	b.n	73cc <FatFile::makeSFN(FatLfn_t*)+0x108>
  for (; ptr < end; ptr++) {
    7420:	adds	r3, #1
        is83 = false;
    7422:	movs	r0, #0
    7424:	b.n	7330 <FatFile::makeSFN(FatLfn_t*)+0x6c>
  for (; ptr < end; ptr++) {
    7426:	mov	r8, r5
    7428:	b.n	73ea <FatFile::makeSFN(FatLfn_t*)+0x126>
    742a:	nop

0000742c <FatFile::makeUniqueSfn(FatLfn_t*)>:
//------------------------------------------------------------------------------
bool FatFile::makeUniqueSfn(FatLfn_t* fname) {
    742c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;
    7430:	mov.w	r8, #98	; 0x62
    7434:	ldr.w	sl, [pc, #200]	; 7500 <FatFile::makeUniqueSfn(FatLfn_t*)+0xd4>
bool FatFile::makeUniqueSfn(FatLfn_t* fname) {
    7438:	mov	r6, r1
    743a:	mov	r4, r0
    for (uint8_t i = pos + 4; i > pos; i--) {
      uint8_t h = hex & 0XF;
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
      hex >>= 4;
    }
    fname->sfn[pos] = '~';
    743c:	mov.w	r9, #126	; 0x7e
  uint8_t pos = fname->seqPos;
    7440:	ldrb	r7, [r1, #16]
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFatFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    7442:	add.w	r5, r1, #18
	return systick_millis_count;
    7446:	cmp	r7, #3
    7448:	ldr.w	r3, [sl]
  void rewind() { seekSet(0); }
    744c:	mov	r0, r4
    744e:	it	cs
    7450:	movcs	r7, #3
      uint8_t h = hex & 0XF;
    7452:	and.w	r1, r3, #15
    hex += millis();
    7456:	uxth	r3, r3
    for (uint8_t i = pos + 4; i > pos; i--) {
    7458:	adds	r2, r7, #4
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    745a:	cmp	r1, #9
    for (uint8_t i = pos + 4; i > pos; i--) {
    745c:	uxtb	r2, r2
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    745e:	ite	hi
    7460:	addhi	r1, #55	; 0x37
    7462:	addls	r1, #48	; 0x30
    7464:	add	r2, r6
    7466:	strb	r1, [r2, #18]
      uint8_t h = hex & 0XF;
    7468:	ubfx	r1, r3, #4, #4
    for (uint8_t i = pos + 4; i > pos; i--) {
    746c:	adds	r2, r7, #3
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    746e:	cmp	r1, #9
    for (uint8_t i = pos + 4; i > pos; i--) {
    7470:	uxtb	r2, r2
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    7472:	ite	hi
    7474:	addhi	r1, #55	; 0x37
    7476:	addls	r1, #48	; 0x30
    7478:	add	r2, r6
    747a:	strb	r1, [r2, #18]
      uint8_t h = hex & 0XF;
    747c:	ubfx	r1, r3, #8, #4
    for (uint8_t i = pos + 4; i > pos; i--) {
    7480:	adds	r2, r7, #2
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    7482:	cmp	r1, #9
    for (uint8_t i = pos + 4; i > pos; i--) {
    7484:	uxtb	r2, r2
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    7486:	ite	hi
    7488:	addhi	r1, #55	; 0x37
    748a:	addls	r1, #48	; 0x30
    748c:	add	r2, r6
    748e:	cmp.w	r3, #40960	; 0xa000
    7492:	strb	r1, [r2, #18]
    for (uint8_t i = pos + 4; i > pos; i--) {
    7494:	add.w	r2, r7, #1
      uint8_t h = hex & 0XF;
    7498:	mov.w	r1, r3, lsr #12
    for (uint8_t i = pos + 4; i > pos; i--) {
    749c:	uxtb	r2, r2
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    749e:	ite	cs
    74a0:	addcs	r1, #55	; 0x37
    74a2:	addcc	r1, #48	; 0x30
    74a4:	adds	r3, r6, r2
    74a6:	strb	r1, [r3, #18]
    fname->sfn[pos] = '~';
    74a8:	adds	r3, r6, r7
    74aa:	movs	r1, #0
    74ac:	strb.w	r9, [r3, #18]
    74b0:	bl	624c <FatFile::seekSet(unsigned long)>
      dir = readDirCache(true);
    74b4:	movs	r1, #1
    74b6:	mov	r0, r4
    74b8:	bl	5f8c <FatFile::readDirCache(bool)>
    74bc:	mov	r3, r0
      if (isFatFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    74be:	movs	r2, #11
    74c0:	mov	r0, r5
      if (!dir) {
    74c2:	cbz	r3, 74ec <FatFile::makeUniqueSfn(FatLfn_t*)+0xc0>
      if (dir->name[0] == FAT_NAME_FREE) {
    74c4:	ldrb.w	ip, [r3]
      if (isFatFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    74c8:	mov	r1, r3
      if (dir->name[0] == FAT_NAME_FREE) {
    74ca:	cmp.w	ip, #0
    74ce:	beq.n	74f8 <FatFile::makeUniqueSfn(FatLfn_t*)+0xcc>
      if (isFatFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    74d0:	ldrb	r3, [r3, #11]
    74d2:	lsls	r3, r3, #28
    74d4:	bmi.n	74b4 <FatFile::makeUniqueSfn(FatLfn_t*)+0x88>
    74d6:	bl	ffac <memcmp>
    74da:	cmp	r0, #0
    74dc:	bne.n	74b4 <FatFile::makeUniqueSfn(FatLfn_t*)+0x88>
  for (uint8_t seq = FIRST_HASH_SEQ; seq < 100; seq++) {
    74de:	add.w	r8, r8, #4294967295
    74e2:	ands.w	r8, r8, #255	; 0xff
    74e6:	bne.n	7446 <FatFile::makeUniqueSfn(FatLfn_t*)+0x1a>
  }
  // fall inti fail - too many tries.
  DBG_FAIL_MACRO;

fail:
  return false;
    74e8:	mov	r0, r8
fail:
    74ea:	b.n	74f4 <FatFile::makeUniqueSfn(FatLfn_t*)+0xc8>
        if (!getError()) {
    74ec:	ldrb	r0, [r4, #1]
    74ee:	clz	r0, r0
    74f2:	lsrs	r0, r0, #5

done:
  return true;
}
    74f4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  return true;
    74f8:	movs	r0, #1
}
    74fa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    74fe:	nop
    7500:	.word	0x2001598c

00007504 <FatFile::open(FatFile*, FatLfn_t*, int)>:
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, FatLfn_t* fname, oflag_t oflag) {
    7504:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7508:	vpush	{d8}
    750c:	sub	sp, #44	; 0x2c
    750e:	strd	r0, r3, [sp, #8]
  uint16_t curIndex;
  uint16_t date;
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  auto vol = dirFile->m_vol;
    7512:	ldr	r3, [r1, #8]
    7514:	str	r3, [sp, #28]

  if (!dirFile->isDir() || isOpen()) {
    7516:	ldrb	r3, [r1, #0]
    7518:	tst.w	r3, #208	; 0xd0
    751c:	beq.n	75c4 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc0>
  bool isOpen() const { return m_attributes; }
    751e:	ldrb	r3, [r0, #0]
    7520:	cmp	r3, #0
    7522:	bne.n	75c4 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc0>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  nameOrd = (fname->len + 12) / 13;
    7524:	ldr	r3, [r2, #12]
    7526:	mov	r8, r2
    7528:	ldr	r2, [pc, #544]	; (774c <FatFile::open(FatFile*, FatLfn_t*, int)+0x248>)
    752a:	mov	r6, r1
    752c:	adds	r3, #12
    752e:	umull	r2, r3, r2, r3
    7532:	ubfx	r2, r3, #2, #8
  freeNeed = (fname->flags & FNAME_FLAG_NEED_LFN) ? 1 + nameOrd : 1;
    7536:	ldrb.w	r3, [r8, #17]
    753a:	lsls	r0, r3, #30
  nameOrd = (fname->len + 12) / 13;
    753c:	str	r2, [sp, #16]
  freeNeed = (fname->flags & FNAME_FLAG_NEED_LFN) ? 1 + nameOrd : 1;
    753e:	beq.w	7690 <FatFile::open(FatFile*, FatLfn_t*, int)+0x18c>
    7542:	adds	r7, r2, #1
    7544:	uxtb	r7, r7
  uint8_t checksum = 0;
    7546:	movs	r3, #0
  void rewind() { seekSet(0); }
    7548:	mov	r0, r6
    754a:	mov	r1, r3
    754c:	mov	r4, r3
    754e:	str	r3, [sp, #24]
    7550:	bl	624c <FatFile::seekSet(unsigned long)>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    7554:	add.w	r3, r8, #18
  uint8_t order = 0;
    7558:	mov	fp, r4
  uint8_t lfnOrd = 0;
    755a:	mov	r9, r4
  uint16_t freeIndex = 0;
    755c:	mov	sl, r4
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    755e:	vmov	s16, r3
  bool fnameFound = false;
    7562:	str	r4, [sp, #20]
    curIndex = dirFile->m_curPosition / FS_DIR_SIZE;
    7564:	ldr	r5, [r6, #20]
    dir = dirFile->readDirCache();
    7566:	movs	r1, #0
    7568:	mov	r0, r6
    756a:	bl	5f8c <FatFile::readDirCache(bool)>
    curIndex = dirFile->m_curPosition / FS_DIR_SIZE;
    756e:	ubfx	r5, r5, #5, #16
    if (!dir) {
    7572:	mov	r3, r0
    7574:	cbz	r0, 75c0 <FatFile::open(FatFile*, FatLfn_t*, int)+0xbc>
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
    7576:	ldrb	r2, [r0, #0]
    7578:	cmp	r2, #229	; 0xe5
    757a:	beq.n	75d0 <FatFile::open(FatFile*, FatLfn_t*, int)+0xcc>
    757c:	cbz	r2, 75d0 <FatFile::open(FatFile*, FatLfn_t*, int)+0xcc>
        freeFound = 0;
    757e:	cmp	r4, r7
    7580:	it	cc
    7582:	movcc	r4, #0
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    7584:	cmp	r2, #46	; 0x2e
    7586:	beq.n	75e0 <FatFile::open(FatFile*, FatLfn_t*, int)+0xdc>
  return dir->attributes == FAT_ATTRIB_LONG_NAME;
    7588:	ldrb.w	ip, [r0, #11]
    } else if (isFatLongName(dir)) {
    758c:	cmp.w	ip, #15
    7590:	beq.n	763c <FatFile::open(FatFile*, FatLfn_t*, int)+0x138>
    } else if (isFatFileOrSubdir(dir)) {
    7592:	tst.w	ip, #8
    7596:	bne.n	75e0 <FatFile::open(FatFile*, FatLfn_t*, int)+0xdc>
      if (lfnOrd) {
    7598:	cmp.w	r9, #0
    759c:	bne.w	7754 <FatFile::open(FatFile*, FatLfn_t*, int)+0x250>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    75a0:	movs	r2, #11
    75a2:	vmov	r1, s16
    75a6:	bl	ffac <memcmp>
    75aa:	cmp	r0, #0
    75ac:	bne.n	7564 <FatFile::open(FatFile*, FatLfn_t*, int)+0x60>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
    75ae:	ldrb.w	r3, [r8, #17]
    75b2:	ands.w	r3, r3, #1
    75b6:	beq.w	7812 <FatFile::open(FatFile*, FatLfn_t*, int)+0x30e>
          goto found;
        }
        fnameFound = true;
    75ba:	movs	r3, #1
    75bc:	str	r3, [sp, #20]
    75be:	b.n	7564 <FatFile::open(FatFile*, FatLfn_t*, int)+0x60>
      if (dirFile->getError()) {
    75c0:	ldrb	r3, [r6, #1]
    75c2:	cbz	r3, 75e6 <FatFile::open(FatFile*, FatLfn_t*, int)+0xe2>
    goto fail;
  }
  return true;

fail:
  return false;
    75c4:	movs	r0, #0
}
    75c6:	add	sp, #44	; 0x2c
    75c8:	vpop	{d8}
    75cc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    curIndex = dirFile->m_curPosition / FS_DIR_SIZE;
    75d0:	cmp	r4, #0
    75d2:	it	eq
    75d4:	moveq	sl, r5
      if (freeFound < freeNeed) {
    75d6:	cmp	r4, r7
    75d8:	bcs.n	75de <FatFile::open(FatFile*, FatLfn_t*, int)+0xda>
        freeFound++;
    75da:	adds	r4, #1
    75dc:	uxtb	r4, r4
      if (dir->name[0] == FAT_NAME_FREE) {
    75de:	cbz	r2, 75e6 <FatFile::open(FatFile*, FatLfn_t*, int)+0xe2>
      lfnOrd = 0;
    75e0:	mov.w	r9, #0
    75e4:	b.n	7564 <FatFile::open(FatFile*, FatLfn_t*, int)+0x60>
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
    75e6:	ldr	r3, [sp, #12]
    75e8:	lsls	r2, r3, #22
    75ea:	bpl.n	75c4 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc0>

#define O_READ O_RDONLY
#define O_WRITE O_WRONLY

inline bool isWriteMode(oflag_t oflag) {
  oflag &= O_ACCMODE;
    75ec:	and.w	r3, r3, #3
  return oflag == O_WRONLY || oflag == O_RDWR;
    75f0:	subs	r3, #1
    75f2:	cmp	r3, #1
    75f4:	bhi.n	75c4 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc0>
  if (freeFound == 0) {
    75f6:	cmp	r4, #0
    75f8:	it	eq
    75fa:	moveq	sl, r5
  while (freeFound < freeNeed) {
    75fc:	cmp	r4, r7
    75fe:	bcc.n	7608 <FatFile::open(FatFile*, FatLfn_t*, int)+0x104>
    7600:	b.n	7694 <FatFile::open(FatFile*, FatLfn_t*, int)+0x190>
    freeFound++;
    7602:	uxtb	r4, r3
  while (freeFound < freeNeed) {
    7604:	cmp	r7, r4
    7606:	beq.n	7694 <FatFile::open(FatFile*, FatLfn_t*, int)+0x190>
    dir = dirFile->readDirCache();
    7608:	movs	r1, #0
    760a:	mov	r0, r6
    760c:	bl	5f8c <FatFile::readDirCache(bool)>
    freeFound++;
    7610:	adds	r3, r4, #1
    if (!dir) {
    7612:	cmp	r0, #0
    7614:	bne.n	7602 <FatFile::open(FatFile*, FatLfn_t*, int)+0xfe>
      if (dirFile->getError()) {
    7616:	ldrb	r3, [r6, #1]
    7618:	cmp	r3, #0
    761a:	bne.n	75c4 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc0>
  while (freeFound < freeNeed) {
    761c:	cmp	r7, r4
    761e:	bls.n	7694 <FatFile::open(FatFile*, FatLfn_t*, int)+0x190>
    7620:	ldr	r5, [sp, #28]
    7622:	b.n	7630 <FatFile::open(FatFile*, FatLfn_t*, int)+0x12c>
    return m_sectorsPerCluster * (m_bytesPerSector / FS_DIR_SIZE);
    7624:	ldrb	r3, [r5, #4]
    freeFound += vol->dirEntriesPerCluster();
    7626:	add.w	r4, r4, r3, lsl #4
    762a:	uxtb	r4, r4
  while (freeFound < freeNeed) {
    762c:	cmp	r7, r4
    762e:	bls.n	7694 <FatFile::open(FatFile*, FatLfn_t*, int)+0x190>
    if (!dirFile->addDirCluster()) {
    7630:	mov	r0, r6
    7632:	bl	574c <FatFile::addDirCluster()>
    7636:	cmp	r0, #0
    7638:	bne.n	7624 <FatFile::open(FatFile*, FatLfn_t*, int)+0x120>
    763a:	b.n	75c4 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc0>
      if (!lfnOrd) {
    763c:	cmp.w	r9, #0
    7640:	bne.n	7676 <FatFile::open(FatFile*, FatLfn_t*, int)+0x172>
        order = ldir->order & 0X1F;
    7642:	and.w	fp, r2, #31
        if (order != nameOrd ||
    7646:	ldr	r1, [sp, #16]
    7648:	cmp	r1, fp
    764a:	bne.n	7564 <FatFile::open(FatFile*, FatLfn_t*, int)+0x60>
    764c:	ands.w	r9, r2, #64	; 0x40
    7650:	beq.n	7564 <FatFile::open(FatFile*, FatLfn_t*, int)+0x60>
        checksum = ldir->checksum;
    7652:	ldrb	r3, [r0, #13]
    7654:	mov	r9, r1
    7656:	str	r3, [sp, #24]
      if (order == 1) {
    7658:	cmp.w	fp, #1
    765c:	bne.n	7564 <FatFile::open(FatFile*, FatLfn_t*, int)+0x60>
        if (!dirFile->cmpName(curIndex + 1, fname, lfnOrd)) {
    765e:	adds	r1, r5, #1
    7660:	mov	r3, r9
    7662:	mov	r2, r8
    7664:	mov	r0, r6
    7666:	uxth	r1, r1
    7668:	bl	6da4 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)>
          lfnOrd = 0;
    766c:	cmp	r0, #0
    766e:	it	eq
    7670:	moveq.w	r9, #0
    7674:	b.n	7564 <FatFile::open(FatFile*, FatLfn_t*, int)+0x60>
      } else if (ldir->order != --order || checksum != ldir->checksum) {
    7676:	add.w	fp, fp, #4294967295
    767a:	uxtb.w	fp, fp
    767e:	cmp	r2, fp
    7680:	bne.n	75e0 <FatFile::open(FatFile*, FatLfn_t*, int)+0xdc>
    7682:	ldrb	r3, [r0, #13]
    7684:	ldr	r2, [sp, #24]
    7686:	cmp	r3, r2
    7688:	beq.n	7658 <FatFile::open(FatFile*, FatLfn_t*, int)+0x154>
      lfnOrd = 0;
    768a:	mov.w	r9, #0
    768e:	b.n	7564 <FatFile::open(FatFile*, FatLfn_t*, int)+0x60>
  freeNeed = (fname->flags & FNAME_FLAG_NEED_LFN) ? 1 + nameOrd : 1;
    7690:	movs	r7, #1
    7692:	b.n	7546 <FatFile::open(FatFile*, FatLfn_t*, int)+0x42>
  if (fnameFound) {
    7694:	ldr	r3, [sp, #20]
    7696:	cbz	r3, 76a4 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1a0>
    if (!dirFile->makeUniqueSfn(fname)) {
    7698:	mov	r1, r8
    769a:	mov	r0, r6
    769c:	bl	742c <FatFile::makeUniqueSfn(FatLfn_t*)>
    76a0:	cmp	r0, #0
    76a2:	beq.n	75c4 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc0>
  lfnOrd = freeNeed - 1;
    76a4:	subs	r7, #1
  if (!dirFile->createLFN(curIndex, fname, lfnOrd)) {
    76a6:	mov	r2, r8
    76a8:	mov	r0, r6
  lfnOrd = freeNeed - 1;
    76aa:	uxtb	r3, r7
  curIndex = freeIndex + lfnOrd;
    76ac:	add.w	r5, sl, r3
  lfnOrd = freeNeed - 1;
    76b0:	mov	r7, r3
  curIndex = freeIndex + lfnOrd;
    76b2:	uxth	r5, r5
  if (!dirFile->createLFN(curIndex, fname, lfnOrd)) {
    76b4:	mov	r1, r5
    76b6:	bl	6e68 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)>
    76ba:	cmp	r0, #0
    76bc:	beq.n	75c4 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc0>
    return seekSet(32UL * index) ? readDirCache() : nullptr;
    76be:	lsls	r1, r5, #5
    76c0:	mov	r0, r6
    76c2:	bl	624c <FatFile::seekSet(unsigned long)>
    76c6:	cmp	r0, #0
    76c8:	beq.w	75c4 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc0>
    76cc:	movs	r1, #0
    76ce:	mov	r0, r6
    76d0:	bl	5f8c <FatFile::readDirCache(bool)>
  if (!dir) {
    76d4:	mov	r4, r0
    76d6:	cmp	r0, #0
    76d8:	beq.w	75c4 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc0>
  memset(dir, 0, sizeof(DirFat_t));
    76dc:	movs	r2, #32
    76de:	movs	r1, #0
    76e0:	bl	10104 <memset>
  memcpy(dir->name, fname->sfn, 11);
    76e4:	ldr.w	r2, [r8, #18]
    76e8:	ldr.w	r3, [r8, #22]
    76ec:	str	r2, [r4, #0]
    76ee:	str	r3, [r4, #4]
    76f0:	ldrb.w	r3, [r8, #28]
    76f4:	ldrh.w	r2, [r8, #26]
    76f8:	strb	r3, [r4, #10]
    76fa:	strh	r2, [r4, #8]
  dir->caseFlags = (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;
    76fc:	ldrb.w	r3, [r8, #17]
    7700:	and.w	r3, r3, #24
    7704:	strb	r3, [r4, #12]
  if (FsDateTime::callback) {
    7706:	ldr	r3, [pc, #72]	; (7750 <FatFile::open(FatFile*, FatLfn_t*, int)+0x24c>)
    7708:	ldr	r3, [r3, #0]
    770a:	cmp	r3, #0
    770c:	beq.w	7816 <FatFile::open(FatFile*, FatLfn_t*, int)+0x312>
    FsDateTime::callback(&date, &time, &ms10);
    7710:	add.w	r2, sp, #35	; 0x23
    7714:	add.w	r1, sp, #38	; 0x26
    7718:	add	r0, sp, #36	; 0x24
    771a:	blx	r3
  *reinterpret_cast<uint16_t*>(dst) = src;
    771c:	ldrh.w	r3, [sp, #36]	; 0x24
    7720:	strh	r3, [r4, #16]
    7722:	ldrh.w	r3, [sp, #38]	; 0x26
    7726:	strh	r3, [r4, #14]
    dir->createTimeMs = ms10;
    7728:	ldrb.w	r3, [sp, #35]	; 0x23
    772c:	strb	r3, [r4, #13]
    772e:	ldr	r2, [sp, #28]
    7730:	ldrb.w	r3, [r2, #36]	; 0x24
    7734:	orr.w	r3, r3, #1
    7738:	strb.w	r3, [r2, #36]	; 0x24
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
    773c:	ldr	r3, [sp, #12]
    773e:	mov	r2, r5
    7740:	mov	r1, r6
    7742:	ldr	r0, [sp, #8]
    7744:	str	r7, [sp, #0]
    7746:	bl	62fc <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    774a:	b.n	75c6 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    774c:	.word	0x4ec4ec4f
    7750:	.word	0x2000771c
        if (1 == order && lfnChecksum(dir->name) == checksum) {
    7754:	cmp.w	fp, #1
    7758:	bne.w	75c4 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc0>
      sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    775c:	lsrs	r1, r2, #1
    775e:	ldrb.w	lr, [r3, #4]
    7762:	ldrb.w	ip, [r3, #5]
    7766:	orr.w	r2, r1, r2, lsl #7
    776a:	ldrb	r1, [r0, #1]
    776c:	ldrb	r0, [r0, #2]
    776e:	add	r2, r1
    7770:	ldrb	r1, [r3, #3]
    7772:	ldrb	r7, [r3, #6]
    7774:	uxtb	r4, r2
    7776:	ubfx	r2, r2, #1, #7
    777a:	ldrb.w	r8, [r3, #10]
    777e:	orr.w	r2, r2, r4, lsl #7
    7782:	ldrb	r4, [r3, #7]
    7784:	uxtab	r2, r0, r2
    7788:	uxtb	r0, r2
    778a:	ubfx	r2, r2, #1, #7
    778e:	orr.w	r2, r2, r0, lsl #7
    7792:	ldrb	r0, [r3, #8]
    7794:	uxtab	r2, r1, r2
    7798:	ldrb	r1, [r3, #9]
    779a:	uxtb	r3, r2
    779c:	ubfx	r2, r2, #1, #7
    77a0:	orr.w	r2, r2, r3, lsl #7
    77a4:	uxtab	r3, lr, r2
    77a8:	uxtb	r2, r3
    77aa:	ubfx	r3, r3, #1, #7
    77ae:	orr.w	r3, r3, r2, lsl #7
    77b2:	uxtab	r3, ip, r3
    77b6:	uxtb	r2, r3
    77b8:	ubfx	r3, r3, #1, #7
    77bc:	orr.w	r3, r3, r2, lsl #7
    77c0:	uxtab	r3, r7, r3
    77c4:	uxtb	r2, r3
    77c6:	ubfx	r3, r3, #1, #7
    77ca:	orr.w	r3, r3, r2, lsl #7
    77ce:	uxtab	r3, r4, r3
    77d2:	uxtb	r2, r3
    77d4:	ubfx	r3, r3, #1, #7
    77d8:	orr.w	r3, r3, r2, lsl #7
    77dc:	uxtab	r3, r0, r3
    77e0:	uxtb	r2, r3
    77e2:	ubfx	r3, r3, #1, #7
    77e6:	orr.w	r3, r3, r2, lsl #7
    77ea:	uxtab	r3, r1, r3
    77ee:	uxtb	r2, r3
    77f0:	ubfx	r3, r3, #1, #7
    77f4:	orr.w	r3, r3, r2, lsl #7
    77f8:	ldr	r2, [sp, #24]
    77fa:	uxtab	r3, r8, r3
    77fe:	uxtb	r3, r3
    7800:	cmp	r2, r3
    7802:	bne.w	75c4 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc0>
    7806:	mov	r7, r9
  if (oflag & O_EXCL) {
    7808:	ldr	r3, [sp, #12]
    780a:	lsls	r1, r3, #20
    780c:	bmi.w	75c4 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc0>
    7810:	b.n	773c <FatFile::open(FatFile*, FatLfn_t*, int)+0x238>
    7812:	mov	r7, r3
    7814:	b.n	7808 <FatFile::open(FatFile*, FatLfn_t*, int)+0x304>
    7816:	movw	r3, #22049	; 0x5621
    781a:	strh	r3, [r4, #24]
    781c:	ldr	r3, [pc, #4]	; (7824 <FatFile::open(FatFile*, FatLfn_t*, int)+0x320>)
    781e:	str	r3, [r4, #16]
    if (FS_DEFAULT_TIME) {
    7820:	b.n	772e <FatFile::open(FatFile*, FatLfn_t*, int)+0x22a>
    7822:	nop
    7824:	.word	0x56215621

00007828 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>:
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path, FatLfn_t* fname,
                            const char** ptr) {
  size_t len = 0;
  // Skip leading spaces.
  while (*path == ' ') {
    7828:	ldrb	r0, [r1, #0]
    782a:	cmp	r0, #32
                            const char** ptr) {
    782c:	push	{r4, r5}
  while (*path == ' ') {
    782e:	bne.n	7838 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x10>
    7830:	ldrb.w	r4, [r1, #1]!
    7834:	cmp	r4, #32
    7836:	beq.n	7830 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x8>
    path++;
  }
  fname->begin = path;
  fname->len = 0;
    7838:	movs	r5, #0
  fname->begin = path;
    783a:	str	r1, [r2, #0]
  fname->len = 0;
    783c:	str	r5, [r2, #12]
  while (*path && !isDirSeparator(*path)) {
    783e:	ldrb	r4, [r1, #0]
    7840:	cmp	r4, #47	; 0x2f
    7842:	beq.n	7864 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x3c>
    7844:	cbz	r4, 7864 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x3c>
    7846:	ldr	r0, [pc, #152]	; (78e0 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xb8>)
      DBG_FAIL_MACRO;
      goto fail;
    }
#else   // USE_UTF8_LONG_NAMES
    uint8_t cp = *path++;
    if (cp >= 0X80 || lfnReservedChar(cp)) {
    7848:	tst.w	r4, #128	; 0x80
    uint8_t cp = *path++;
    784c:	add.w	r1, r1, #1
    if (cp >= 0X80 || lfnReservedChar(cp)) {
    7850:	bne.n	7864 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x3c>
    7852:	cmp	r4, #60	; 0x3c
    7854:	bhi.n	78b6 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x8e>
    7856:	cmp	r4, #33	; 0x21
    7858:	bhi.n	786a <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x42>
    785a:	add.w	ip, r4, #4294967295
    785e:	cmp.w	ip, #30
    7862:	bhi.n	787c <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x54>
  *ptr = path;
  return makeSFN(fname);

fail:
  return false;
}
    7864:	movs	r0, #0
    7866:	pop	{r4, r5}
    7868:	bx	lr
    786a:	sub.w	ip, r4, #34	; 0x22
    786e:	uxtb.w	ip, ip
    7872:	lsr.w	ip, r0, ip
    7876:	tst.w	ip, #1
    787a:	bne.n	7864 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x3c>
    if (cp != '.' && cp != ' ') {
    787c:	cmp	r4, #46	; 0x2e
    len++;
    787e:	add.w	r5, r5, #1
    if (cp != '.' && cp != ' ') {
    7882:	beq.n	7888 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x60>
    7884:	cmp	r4, #32
    7886:	bne.n	78c2 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x9a>
  while (*path && !isDirSeparator(*path)) {
    7888:	ldrb	r4, [r1, #0]
    788a:	cbz	r4, 7890 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x68>
    788c:	cmp	r4, #47	; 0x2f
    788e:	bne.n	7848 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x20>
  if (!fname->len || fname->len > FAT_MAX_LFN_LENGTH) {
    7890:	ldr	r0, [r2, #12]
    7892:	subs	r0, #1
    7894:	cmp	r0, #254	; 0xfe
    7896:	bhi.n	7864 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x3c>
  for (; *path == ' ' || isDirSeparator(*path); path++) {
    7898:	cmp	r4, #32
    789a:	beq.n	78a0 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x78>
    789c:	cmp	r4, #47	; 0x2f
    789e:	bne.n	78ac <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x84>
    78a0:	ldrb.w	r0, [r1, #1]!
    78a4:	cmp	r0, #32
    78a6:	beq.n	78a0 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x78>
    78a8:	cmp	r0, #47	; 0x2f
    78aa:	beq.n	78a0 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x78>
  return makeSFN(fname);
    78ac:	mov	r0, r2
  *ptr = path;
    78ae:	str	r1, [r3, #0]
}
    78b0:	pop	{r4, r5}
  return makeSFN(fname);
    78b2:	b.w	72c4 <FatFile::makeSFN(FatLfn_t*)>
    78b6:	cmp	r4, #92	; 0x5c
    78b8:	beq.n	7864 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x3c>
    78ba:	bls.n	78d2 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xaa>
    78bc:	cmp	r4, #124	; 0x7c
    78be:	beq.n	7864 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x3c>
    len++;
    78c0:	adds	r5, #1
      fname->end = path;
    78c2:	strd	r1, r5, [r2, #8]
  while (*path && !isDirSeparator(*path)) {
    78c6:	ldrb	r4, [r1, #0]
    78c8:	cmp	r4, #47	; 0x2f
    78ca:	beq.n	7890 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x68>
    78cc:	cmp	r4, #0
    78ce:	bne.n	7848 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x20>
    78d0:	b.n	7890 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x68>
    78d2:	subs	r4, #62	; 0x3e
    78d4:	cmp	r4, #1
    78d6:	bhi.n	78c0 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x98>
}
    78d8:	movs	r0, #0
    78da:	pop	{r4, r5}
    78dc:	bx	lr
    78de:	nop
    78e0:	.word	0x05002101

000078e4 <FatFile::remove()>:
//------------------------------------------------------------------------------
bool FatFile::remove() {
    78e4:	push	{r4, r5, r6, r7, lr}
  FatFile() {}
    78e6:	movs	r3, #0
    78e8:	sub	sp, #44	; 0x2c
    78ea:	str	r3, [sp, #4]
  FatFile dirFile;
  DirFat_t* dir;
  DirLfn_t* ldir;

  // Cant' remove not open for write.
  if (!isWritable()) {
    78ec:	ldrb	r3, [r0, #2]
    78ee:	lsls	r2, r3, #30
    78f0:	bpl.n	79c2 <FatFile::remove()+0xde>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
    78f2:	ldr	r1, [r0, #32]
    78f4:	mov	r4, r0
    78f6:	cbz	r1, 7902 <FatFile::remove()+0x1e>
    78f8:	ldr	r0, [r0, #8]
    78fa:	bl	6aec <FatPartition::freeChain(unsigned long)>
    78fe:	cmp	r0, #0
    7900:	beq.n	79c2 <FatFile::remove()+0xde>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Cache directory entry.
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    7902:	movs	r1, #1
    7904:	mov	r0, r4
    7906:	bl	57ec <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    790a:	cmp	r0, #0
    790c:	beq.n	79c2 <FatFile::remove()+0xde>
      sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    790e:	ldrb	r2, [r0, #0]
    goto fail;
  }
  checksum = lfnChecksum(dir->name);

  // Mark entry deleted.
  dir->name[0] = FAT_NAME_DELETED;
    7910:	movs	r6, #229	; 0xe5
    7912:	ldrb	r1, [r0, #1]
    7914:	lsrs	r3, r2, #1
    7916:	strb	r6, [r0, #0]
  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;

  // Write entry to device.
  if (!m_vol->cacheSync()) {
    7918:	ldr	r7, [r4, #8]
    791a:	orr.w	r3, r3, r2, lsl #7
    791e:	add	r3, r1
    7920:	uxtb	r2, r3
    7922:	ubfx	r3, r3, #1, #7
    7926:	orr.w	r3, r3, r2, lsl #7
    792a:	ldrb	r2, [r0, #2]
    792c:	uxtab	r3, r2, r3
    7930:	uxtb	r2, r3
    7932:	ubfx	r3, r3, #1, #7
    7936:	orr.w	r3, r3, r2, lsl #7
    793a:	ldrb	r2, [r0, #3]
    793c:	uxtab	r3, r2, r3
    7940:	uxtb	r2, r3
    7942:	ubfx	r3, r3, #1, #7
    7946:	orr.w	r3, r3, r2, lsl #7
    794a:	ldrb	r2, [r0, #4]
    794c:	uxtab	r3, r2, r3
    7950:	uxtb	r2, r3
    7952:	ubfx	r3, r3, #1, #7
    7956:	orr.w	r3, r3, r2, lsl #7
    795a:	ldrb	r2, [r0, #5]
    795c:	uxtab	r3, r2, r3
    7960:	uxtb	r2, r3
    7962:	ubfx	r3, r3, #1, #7
    7966:	orr.w	r3, r3, r2, lsl #7
    796a:	ldrb	r2, [r0, #6]
    796c:	uxtab	r3, r2, r3
    7970:	uxtb	r2, r3
    7972:	ubfx	r3, r3, #1, #7
    7976:	orr.w	r3, r3, r2, lsl #7
    797a:	ldrb	r2, [r0, #7]
    797c:	uxtab	r3, r2, r3
    7980:	uxtb	r2, r3
    7982:	ubfx	r3, r3, #1, #7
    7986:	orr.w	r3, r3, r2, lsl #7
    798a:	ldrb	r2, [r0, #8]
    798c:	uxtab	r3, r2, r3
    7990:	uxtb	r2, r3
    7992:	ubfx	r3, r3, #1, #7
    7996:	orr.w	r3, r3, r2, lsl #7
    799a:	ldrb	r2, [r0, #9]
    799c:	uxtab	r3, r2, r3
    79a0:	uxtb	r2, r3
    79a2:	ubfx	r5, r3, #1, #7
  m_attributes = FILE_ATTR_CLOSED;
    79a6:	movs	r3, #0
    79a8:	orr.w	r5, r5, r2, lsl #7
    79ac:	ldrb	r2, [r0, #10]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    79ae:	add.w	r0, r7, #36	; 0x24
    79b2:	strb	r3, [r4, #0]
    79b4:	uxtab	r5, r2, r5
  m_flags = 0;
    79b8:	strb	r3, [r4, #2]
    79ba:	uxtb	r5, r5
    79bc:	bl	2a38 <FsCache::sync()>
    79c0:	cbnz	r0, 79c8 <FatFile::remove()+0xe4>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
    79c2:	movs	r0, #0
}
    79c4:	add	sp, #44	; 0x2c
    79c6:	pop	{r4, r5, r6, r7, pc}
    79c8:	add.w	r0, r7, #564	; 0x234
    79cc:	bl	2a38 <FsCache::sync()>
    79d0:	cmp	r0, #0
    79d2:	beq.n	79c2 <FatFile::remove()+0xde>
    79d4:	ldr	r0, [r7, #0]
  bool syncDevice() { return m_blockDev->syncDevice(); }
    79d6:	ldr	r3, [r0, #0]
    79d8:	ldr	r3, [r3, #28]
    79da:	blx	r3
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    79dc:	cmp	r0, #0
    79de:	beq.n	79c2 <FatFile::remove()+0xde>
  if (!isLFN()) {
    79e0:	ldrb	r3, [r4, #3]
    79e2:	cmp	r3, #0
    79e4:	beq.n	79c4 <FatFile::remove()+0xe0>
  if (!dirFile.openCluster(this)) {
    79e6:	mov	r1, r4
    79e8:	add	r0, sp, #4
    79ea:	bl	5d2c <FatFile::openCluster(FatFile*)>
    79ee:	cmp	r0, #0
    79f0:	beq.n	79c2 <FatFile::remove()+0xde>
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    79f2:	ldrb	r3, [r4, #3]
    79f4:	cmp	r3, #0
    79f6:	beq.n	79c2 <FatFile::remove()+0xde>
    79f8:	movs	r7, #1
    79fa:	b.n	7a40 <FatFile::remove()+0x15c>
    return seekSet(32UL * index) ? readDirCache() : nullptr;
    79fc:	add	r0, sp, #4
    79fe:	bl	5f8c <FatFile::readDirCache(bool)>
    7a02:	adds	r3, r7, #1
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    7a04:	uxtb	r1, r7
    if (!ldir) {
    7a06:	cmp	r0, #0
    7a08:	beq.n	79c2 <FatFile::remove()+0xde>
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    7a0a:	ldrb	r2, [r0, #11]
    7a0c:	cmp	r2, #15
    7a0e:	bne.n	79c2 <FatFile::remove()+0xde>
        order != (ldir->order & 0X1F) || checksum != ldir->checksum) {
    7a10:	ldrb	r2, [r0, #0]
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    7a12:	uxtb.w	ip, r3
    7a16:	uxth	r7, r3
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    7a18:	and.w	r3, r2, #31
    7a1c:	cmp	r3, r1
    7a1e:	bne.n	79c2 <FatFile::remove()+0xde>
        order != (ldir->order & 0X1F) || checksum != ldir->checksum) {
    7a20:	ldrb	r3, [r0, #13]
    7a22:	cmp	r3, r5
    7a24:	bne.n	79c2 <FatFile::remove()+0xde>
    ldir->order = FAT_NAME_DELETED;
    7a26:	strb	r6, [r0, #0]
    m_vol->cacheDirty();
    7a28:	ldr	r1, [r4, #8]
    7a2a:	ldrb.w	r3, [r1, #36]	; 0x24
    7a2e:	orr.w	r3, r3, #1
    7a32:	strb.w	r3, [r1, #36]	; 0x24
    if (last) {
    7a36:	lsls	r3, r2, #25
    7a38:	bmi.n	7a56 <FatFile::remove()+0x172>
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    7a3a:	ldrb	r3, [r4, #3]
    7a3c:	cmp	r3, ip
    7a3e:	bcc.n	79c2 <FatFile::remove()+0xde>
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.cacheDir(m_dirIndex - order));
    7a40:	ldrh	r1, [r4, #4]
    7a42:	add	r0, sp, #4
    7a44:	subs	r1, r1, r7
    7a46:	uxth	r1, r1
    7a48:	lsls	r1, r1, #5
    7a4a:	bl	624c <FatFile::seekSet(unsigned long)>
    7a4e:	movs	r1, #0
    7a50:	cmp	r0, #0
    7a52:	bne.n	79fc <FatFile::remove()+0x118>
    7a54:	b.n	79c2 <FatFile::remove()+0xde>
      if (!m_vol->cacheSync()) {
    7a56:	ldr	r4, [r4, #8]
    7a58:	add.w	r0, r4, #36	; 0x24
    7a5c:	bl	2a38 <FsCache::sync()>
    7a60:	cmp	r0, #0
    7a62:	beq.n	79c2 <FatFile::remove()+0xde>
    7a64:	add.w	r0, r4, #564	; 0x234
    7a68:	bl	2a38 <FsCache::sync()>
    7a6c:	cmp	r0, #0
    7a6e:	beq.n	79c2 <FatFile::remove()+0xde>
    7a70:	ldr	r0, [r4, #0]
  bool syncDevice() { return m_blockDev->syncDevice(); }
    7a72:	ldr	r3, [r0, #0]
    7a74:	ldr	r3, [r3, #28]
    7a76:	blx	r3
    7a78:	b.n	79c4 <FatFile::remove()+0xe0>
    7a7a:	nop

00007a7c <FsBaseFile::FsBaseFile(FsBaseFile const&)>:
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
//------------------------------------------------------------------------------
FsBaseFile::FsBaseFile(const FsBaseFile& from) {
    7a7c:	push	{r3, r4, r5, r6, r7, lr}
    7a7e:	movs	r6, #0
  m_fFile = nullptr;
  m_xFile = nullptr;
  if (from.m_fFile) {
    7a80:	ldr	r7, [r1, #56]	; 0x38
FsBaseFile::FsBaseFile(const FsBaseFile& from) {
    7a82:	mov	r5, r1
    7a84:	mov	r4, r0
    7a86:	strd	r6, r6, [r0, #56]	; 0x38
  if (from.m_fFile) {
    7a8a:	cbz	r7, 7ab4 <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x38>
    m_fFile = new (m_fileMem) FatFile;
    7a8c:	mov	r1, r0
    7a8e:	movs	r0, #36	; 0x24
    7a90:	bl	7d84 <operator new(unsigned int, unsigned long*)>
  FatFile() {}
    7a94:	strh	r6, [r0, #0]
    7a96:	strb	r6, [r0, #2]
    *m_fFile = *from.m_fFile;
    7a98:	mov	ip, r0
    7a9a:	ldr	r5, [r5, #56]	; 0x38
    m_fFile = new (m_fileMem) FatFile;
    7a9c:	str	r0, [r4, #56]	; 0x38
    *m_fFile = *from.m_fFile;
    7a9e:	ldmia	r5!, {r0, r1, r2, r3}
    7aa0:	stmia.w	ip!, {r0, r1, r2, r3}
    7aa4:	ldmia	r5!, {r0, r1, r2, r3}
    7aa6:	stmia.w	ip!, {r0, r1, r2, r3}
    7aaa:	ldr	r3, [r5, #0]
    7aac:	str.w	r3, [ip]
  } else if (from.m_xFile) {
    m_xFile = new (m_fileMem) ExFatFile;
    *m_xFile = *from.m_xFile;
  }
}
    7ab0:	mov	r0, r4
    7ab2:	pop	{r3, r4, r5, r6, r7, pc}
  } else if (from.m_xFile) {
    7ab4:	ldr	r3, [r1, #60]	; 0x3c
    7ab6:	cmp	r3, #0
    7ab8:	beq.n	7ab0 <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x34>
    m_xFile = new (m_fileMem) ExFatFile;
    7aba:	mov	r1, r0
    7abc:	movs	r0, #56	; 0x38
    7abe:	bl	7d84 <operator new(unsigned int, unsigned long*)>
  ExFatFile() {}
    7ac2:	strh.w	r7, [r0, #49]	; 0x31
    7ac6:	strb.w	r7, [r0, #51]	; 0x33
    *m_xFile = *from.m_xFile;
    7aca:	mov	r2, r0
    7acc:	ldr	r3, [r5, #60]	; 0x3c
    m_xFile = new (m_fileMem) ExFatFile;
    7ace:	str	r0, [r4, #60]	; 0x3c
    *m_xFile = *from.m_xFile;
    7ad0:	add.w	r7, r3, #48	; 0x30
    7ad4:	ldr	r6, [r3, #0]
    7ad6:	adds	r3, #16
    7ad8:	ldr.w	r5, [r3, #-12]
    7adc:	adds	r2, #16
    7ade:	ldr.w	r0, [r3, #-8]
    7ae2:	ldr.w	r1, [r3, #-4]
    7ae6:	cmp	r3, r7
    7ae8:	str.w	r6, [r2, #-16]
    7aec:	str.w	r5, [r2, #-12]
    7af0:	str.w	r0, [r2, #-8]
    7af4:	str.w	r1, [r2, #-4]
    7af8:	bne.n	7ad4 <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x58>
    7afa:	ldr	r3, [r3, #0]
}
    7afc:	mov	r0, r4
    *m_xFile = *from.m_xFile;
    7afe:	str	r3, [r2, #0]
}
    7b00:	pop	{r3, r4, r5, r6, r7, pc}
    7b02:	nop

00007b04 <FsBaseFile::close()>:
    *m_xFile = *from.m_xFile;
  }
  return *this;
}
//------------------------------------------------------------------------------
bool FsBaseFile::close() {
    7b04:	push	{r4, lr}
    7b06:	mov	r4, r0
  bool rtn = m_fFile ? m_fFile->close() : m_xFile ? m_xFile->close() : true;
    7b08:	ldr	r0, [r0, #56]	; 0x38
    7b0a:	cbz	r0, 7b18 <FsBaseFile::close()+0x14>
    7b0c:	bl	580c <FatFile::close()>
  m_fFile = nullptr;
    7b10:	movs	r3, #0
  m_xFile = nullptr;
    7b12:	strd	r3, r3, [r4, #56]	; 0x38
  return rtn;
}
    7b16:	pop	{r4, pc}
  bool rtn = m_fFile ? m_fFile->close() : m_xFile ? m_xFile->close() : true;
    7b18:	ldr	r0, [r4, #60]	; 0x3c
    7b1a:	cbz	r0, 7b28 <FsBaseFile::close()+0x24>
    7b1c:	bl	34c0 <ExFatFile::close()>
  m_fFile = nullptr;
    7b20:	movs	r3, #0
  m_xFile = nullptr;
    7b22:	strd	r3, r3, [r4, #56]	; 0x38
}
    7b26:	pop	{r4, pc}
  m_fFile = nullptr;
    7b28:	movs	r3, #0
  bool rtn = m_fFile ? m_fFile->close() : m_xFile ? m_xFile->close() : true;
    7b2a:	movs	r0, #1
  m_xFile = nullptr;
    7b2c:	strd	r3, r3, [r4, #56]	; 0x38
}
    7b30:	pop	{r4, pc}
    7b32:	nop

00007b34 <FsBaseFile::open(FsVolume*, char const*, int)>:
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
  if (!vol) {
    7b34:	cmp	r1, #0
    7b36:	beq.n	7bd0 <FsBaseFile::open(FsVolume*, char const*, int)+0x9c>
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
    7b38:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7b3c:	mov	r4, r0
  bool rtn = m_fFile ? m_fFile->close() : m_xFile ? m_xFile->close() : true;
    7b3e:	ldr	r0, [r0, #56]	; 0x38
    7b40:	mov	r5, r1
    7b42:	mov	r8, r2
    7b44:	mov	r7, r3
    7b46:	cbz	r0, 7b7e <FsBaseFile::open(FsVolume*, char const*, int)+0x4a>
    7b48:	bl	580c <FatFile::close()>
  m_fFile = nullptr;
    7b4c:	movs	r6, #0
    return false;
  }
  close();
  if (vol->m_fVol) {
    7b4e:	ldr.w	r9, [r5, #1152]	; 0x480
  m_xFile = nullptr;
    7b52:	strd	r6, r6, [r4, #56]	; 0x38
  if (vol->m_fVol) {
    7b56:	cmp.w	r9, #0
    7b5a:	beq.n	7b98 <FsBaseFile::open(FsVolume*, char const*, int)+0x64>
    m_fFile = new (m_fileMem) FatFile;
    7b5c:	mov	r1, r4
    7b5e:	movs	r0, #36	; 0x24
    7b60:	bl	7d84 <operator new(unsigned int, unsigned long*)>
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    7b64:	mov	r3, r7
    7b66:	strh	r6, [r0, #0]
    7b68:	mov	r2, r8
    7b6a:	strb	r6, [r0, #2]
    m_fFile = new (m_fileMem) FatFile;
    7b6c:	str	r0, [r4, #56]	; 0x38
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    7b6e:	ldr.w	r1, [r5, #1152]	; 0x480
    7b72:	bl	5d1c <FatFile::open(FatVolume*, char const*, int)>
    7b76:	cbnz	r0, 7bca <FsBaseFile::open(FsVolume*, char const*, int)+0x96>
      return true;
    }
    m_fFile = nullptr;
    7b78:	str	r0, [r4, #56]	; 0x38
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
    7b7a:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  bool rtn = m_fFile ? m_fFile->close() : m_xFile ? m_xFile->close() : true;
    7b7e:	ldr	r0, [r4, #60]	; 0x3c
    7b80:	cmp	r0, #0
    7b82:	beq.n	7b4c <FsBaseFile::open(FsVolume*, char const*, int)+0x18>
    7b84:	bl	34c0 <ExFatFile::close()>
  m_fFile = nullptr;
    7b88:	movs	r6, #0
  if (vol->m_fVol) {
    7b8a:	ldr.w	r9, [r5, #1152]	; 0x480
  m_xFile = nullptr;
    7b8e:	strd	r6, r6, [r4, #56]	; 0x38
  if (vol->m_fVol) {
    7b92:	cmp.w	r9, #0
    7b96:	bne.n	7b5c <FsBaseFile::open(FsVolume*, char const*, int)+0x28>
  } else if (vol->m_xVol) {
    7b98:	ldr.w	r3, [r5, #1156]	; 0x484
    7b9c:	cbz	r3, 7bc4 <FsBaseFile::open(FsVolume*, char const*, int)+0x90>
    m_xFile = new (m_fileMem) ExFatFile;
    7b9e:	mov	r1, r4
    7ba0:	movs	r0, #56	; 0x38
    7ba2:	bl	7d84 <operator new(unsigned int, unsigned long*)>
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    7ba6:	mov	r3, r7
    7ba8:	strh.w	r9, [r0, #49]	; 0x31
    7bac:	mov	r2, r8
    7bae:	strb.w	r9, [r0, #51]	; 0x33
    m_xFile = new (m_fileMem) ExFatFile;
    7bb2:	str	r0, [r4, #60]	; 0x3c
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    7bb4:	ldr.w	r1, [r5, #1156]	; 0x484
    7bb8:	bl	3e50 <ExFatFile::open(ExFatVolume*, char const*, int)>
    7bbc:	cbnz	r0, 7bca <FsBaseFile::open(FsVolume*, char const*, int)+0x96>
    m_xFile = nullptr;
    7bbe:	str	r0, [r4, #60]	; 0x3c
}
    7bc0:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return false;
    7bc4:	movs	r0, #0
}
    7bc6:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return true;
    7bca:	movs	r0, #1
}
    7bcc:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return false;
    7bd0:	movs	r0, #0
}
    7bd2:	bx	lr

00007bd4 <FsBaseFile::openNext(FsBaseFile*, int)>:
    m_xFile = nullptr;
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::openNext(FsBaseFile* dir, oflag_t oflag) {
    7bd4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7bd8:	mov	r4, r0
  bool rtn = m_fFile ? m_fFile->close() : m_xFile ? m_xFile->close() : true;
    7bda:	ldr	r0, [r0, #56]	; 0x38
bool FsBaseFile::openNext(FsBaseFile* dir, oflag_t oflag) {
    7bdc:	mov	r5, r1
    7bde:	mov	r8, r2
  bool rtn = m_fFile ? m_fFile->close() : m_xFile ? m_xFile->close() : true;
    7be0:	cbz	r0, 7c36 <FsBaseFile::openNext(FsBaseFile*, int)+0x62>
    7be2:	bl	580c <FatFile::close()>
  m_fFile = nullptr;
    7be6:	movs	r6, #0
    7be8:	str	r6, [r4, #56]	; 0x38
  close();
  if (dir->m_fFile) {
    7bea:	ldr	r7, [r5, #56]	; 0x38
  m_xFile = nullptr;
    7bec:	str	r6, [r4, #60]	; 0x3c
  if (dir->m_fFile) {
    7bee:	cbz	r7, 7c0e <FsBaseFile::openNext(FsBaseFile*, int)+0x3a>
    m_fFile = new (m_fileMem) FatFile;
    7bf0:	mov	r1, r4
    7bf2:	movs	r0, #36	; 0x24
    7bf4:	bl	7d84 <operator new(unsigned int, unsigned long*)>
    if (m_fFile->openNext(dir->m_fFile, oflag)) {
    7bf8:	mov	r2, r8
    7bfa:	strh	r6, [r0, #0]
    7bfc:	strb	r6, [r0, #2]
    m_fFile = new (m_fileMem) FatFile;
    7bfe:	str	r0, [r4, #56]	; 0x38
    if (m_fFile->openNext(dir->m_fFile, oflag)) {
    7c00:	ldr	r1, [r5, #56]	; 0x38
    7c02:	bl	63e4 <FatFile::openNext(FatFile*, int)>
    7c06:	cbnz	r0, 7c30 <FsBaseFile::openNext(FsBaseFile*, int)+0x5c>
      return true;
    }
    m_fFile = nullptr;
    7c08:	str	r0, [r4, #56]	; 0x38
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
    7c0a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (dir->m_xFile) {
    7c0e:	ldr	r0, [r5, #60]	; 0x3c
    7c10:	cmp	r0, #0
    7c12:	beq.n	7c0a <FsBaseFile::openNext(FsBaseFile*, int)+0x36>
    m_xFile = new (m_fileMem) ExFatFile;
    7c14:	mov	r1, r4
    7c16:	movs	r0, #56	; 0x38
    7c18:	bl	7d84 <operator new(unsigned int, unsigned long*)>
    if (m_xFile->openNext(dir->m_xFile, oflag)) {
    7c1c:	mov	r2, r8
    7c1e:	strh.w	r7, [r0, #49]	; 0x31
    7c22:	strb.w	r7, [r0, #51]	; 0x33
    m_xFile = new (m_fileMem) ExFatFile;
    7c26:	str	r0, [r4, #60]	; 0x3c
    if (m_xFile->openNext(dir->m_xFile, oflag)) {
    7c28:	ldr	r1, [r5, #60]	; 0x3c
    7c2a:	bl	3e60 <ExFatFile::openNext(ExFatFile*, int)>
    7c2e:	cbz	r0, 7c42 <FsBaseFile::openNext(FsBaseFile*, int)+0x6e>
      return true;
    7c30:	movs	r0, #1
}
    7c32:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  bool rtn = m_fFile ? m_fFile->close() : m_xFile ? m_xFile->close() : true;
    7c36:	ldr	r0, [r4, #60]	; 0x3c
    7c38:	cmp	r0, #0
    7c3a:	beq.n	7be6 <FsBaseFile::openNext(FsBaseFile*, int)+0x12>
    7c3c:	bl	34c0 <ExFatFile::close()>
    7c40:	b.n	7be6 <FsBaseFile::openNext(FsBaseFile*, int)+0x12>
    m_xFile = nullptr;
    7c42:	str	r0, [r4, #60]	; 0x3c
}
    7c44:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00007c48 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)>:
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part,
                     uint32_t volStart) {
    7c48:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  m_fVol = nullptr;
    7c4c:	movs	r5, #0
                     uint32_t volStart) {
    7c4e:	mov	r6, r0
    7c50:	mov	r7, r1
  m_xVol = new (m_volMem) ExFatVolume;
    7c52:	mov	r1, r0
  m_fVol = nullptr;
    7c54:	str.w	r5, [r0, #1152]	; 0x480
  m_xVol = new (m_volMem) ExFatVolume;
    7c58:	mov.w	r0, #1152	; 0x480
                     uint32_t volStart) {
    7c5c:	mov	r8, r3
    7c5e:	ldr.w	sl, [sp, #32]
    7c62:	mov	r9, r2
  m_xVol = new (m_volMem) ExFatVolume;
    7c64:	bl	7d84 <operator new(unsigned int, unsigned long*)>
    m_sector = 0XFFFFFFFF;
    7c68:	mov.w	r3, #4294967295
    m_blockDev = blockDev;
    7c6c:	str	r5, [r0, #4]
    m_status = 0;
    7c6e:	strb	r5, [r0, #0]
    if (!init(dev, part, volStart)) {
    7c70:	mov	r2, r8
    m_sector = 0XFFFFFFFF;
    7c72:	str	r3, [r0, #8]
    7c74:	mov	r1, r7
    7c76:	str.w	r3, [r0, #536]	; 0x218
    7c7a:	mov	r3, sl
    m_blockDev = blockDev;
    7c7c:	str.w	r5, [r0, #532]	; 0x214
    7c80:	mov	r4, r0
    m_status = 0;
    7c82:	strb.w	r5, [r0, #528]	; 0x210
  ExFatPartition() = default;
    7c86:	strb.w	r5, [r0, #1092]	; 0x444
    7c8a:	strh.w	r5, [r0, #1145]	; 0x479
    7c8e:	strb.w	r5, [r0, #1147]	; 0x47b
    7c92:	str.w	r0, [r6, #1156]	; 0x484
    7c96:	bl	4290 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)>
    7c9a:	cmp	r0, #0
    7c9c:	bne.n	7d1c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0xd4>
  if (m_xVol && m_xVol->begin(blockDev, false, part, volStart)) {
    goto done;
  }
  m_xVol = nullptr;
    7c9e:	movs	r5, #0
  m_fVol = new (m_volMem) FatVolume;
    7ca0:	mov	r1, r6
    7ca2:	mov.w	r0, #1128	; 0x468
  m_xVol = nullptr;
    7ca6:	str.w	r5, [r6, #1156]	; 0x484
  m_fVol = new (m_volMem) FatVolume;
    7caa:	bl	7d84 <operator new(unsigned int, unsigned long*)>
  FatPartition() = default;
    7cae:	strb	r5, [r0, #7]
    m_blockDev = blockDev;
    7cb0:	str	r5, [r0, #40]	; 0x28
    7cb2:	mov	r4, r0
    m_status = 0;
    7cb4:	strb.w	r5, [r0, #36]	; 0x24
    if (!init(dev, part, volStart)) {
    7cb8:	mov	r3, sl
    m_blockDev = blockDev;
    7cba:	str.w	r5, [r0, #568]	; 0x238
    7cbe:	mov	r2, r8
    m_status = 0;
    7cc0:	strb.w	r5, [r0, #564]	; 0x234
    7cc4:	mov	r1, r7
    7cc6:	strh.w	r5, [r0, #1092]	; 0x444
    7cca:	strb.w	r5, [r0, #1094]	; 0x446
    m_sector = 0XFFFFFFFF;
    7cce:	mov.w	r5, #4294967295
    7cd2:	str	r5, [r0, #44]	; 0x2c
    7cd4:	str.w	r5, [r0, #572]	; 0x23c
    7cd8:	addw	r5, r4, #1092	; 0x444
    7cdc:	str.w	r0, [r6, #1152]	; 0x480
    7ce0:	bl	6c5c <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)>
    7ce4:	cbnz	r0, 7cf2 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0xaa>
  if (m_fVol && m_fVol->begin(blockDev, false, part, volStart)) {
    goto done;
  }
  m_fVol = nullptr;
    7ce6:	movs	r3, #0
  return false;
    7ce8:	mov	r0, r3
  m_fVol = nullptr;
    7cea:	str.w	r3, [r6, #1152]	; 0x480
done:
  if (setCwv || !m_cwv) {
    m_cwv = this;
  }
  return true;
}
    7cee:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    m_vwd.close();
    7cf2:	mov	r0, r5
    7cf4:	bl	580c <FatFile::close()>
    return m_vwd.openRoot(this);
    7cf8:	mov	r1, r4
    7cfa:	mov	r0, r5
    7cfc:	bl	5d84 <FatFile::openRoot(FatVolume*)>
    if (!chdir()) {
    7d00:	cmp	r0, #0
    7d02:	beq.n	7ce6 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0x9e>
    if (setCwv || !m_cwv) {
    7d04:	ldr	r3, [pc, #72]	; (7d50 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0x108>)
    7d06:	ldr	r2, [r3, #0]
    7d08:	cbnz	r2, 7d3a <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0xf2>
      m_cwv = this;
    7d0a:	str	r4, [r3, #0]
  if (setCwv || !m_cwv) {
    7d0c:	ldr	r3, [pc, #68]	; (7d54 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0x10c>)
    7d0e:	cmp.w	r9, #0
    7d12:	beq.n	7d42 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0xfa>
  return true;
    7d14:	movs	r0, #1
    m_cwv = this;
    7d16:	str	r6, [r3, #0]
}
    7d18:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    m_vwd.close();
    7d1c:	add.w	r5, r4, #1096	; 0x448
    7d20:	mov	r0, r5
    7d22:	bl	34c0 <ExFatFile::close()>
    return m_vwd.openRoot(this);
    7d26:	mov	r1, r4
    7d28:	mov	r0, r5
    7d2a:	bl	351c <ExFatFile::openRoot(ExFatVolume*)>
    if (!chdir()) {
    7d2e:	cmp	r0, #0
    7d30:	beq.n	7c9e <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0x56>
    if (setCwv || !m_cwv) {
    7d32:	ldr	r3, [pc, #36]	; (7d58 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0x110>)
    7d34:	ldr	r2, [r3, #0]
    7d36:	cmp	r2, #0
    7d38:	beq.n	7d0a <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0xc2>
  if (setCwv || !m_cwv) {
    7d3a:	ldr	r3, [pc, #24]	; (7d54 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0x10c>)
    7d3c:	cmp.w	r9, #0
    7d40:	bne.n	7d14 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0xcc>
    7d42:	ldr	r2, [r3, #0]
    7d44:	cmp	r2, #0
    7d46:	beq.n	7d14 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0xcc>
  return true;
    7d48:	movs	r0, #1
}
    7d4a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7d4e:	nop
    7d50:	.word	0x200078e0
    7d54:	.word	0x200078dc
    7d58:	.word	0x200077a0

00007d5c <FsVolume::open(char const*, int)>:
bool FsVolume::ls(print_t* pr, const char* path, uint8_t flags) {
  FsBaseFile dir;
  return dir.open(this, path, O_RDONLY) && dir.ls(pr, flags);
}
//------------------------------------------------------------------------------
FsFile FsVolume::open(const char* path, oflag_t oflag) {
    7d5c:	push	{r4, r5, r6, lr}
	constexpr Print() : write_error(0) {}
    7d5e:	movs	r5, #0
    7d60:	mov.w	r6, #1000	; 0x3e8
    7d64:	mov	r4, r0
    7d66:	strb	r5, [r0, #4]
    7d68:	strb	r5, [r0, #12]
    7d6a:	str	r6, [r0, #8]
  FsBaseFile() = default;
    7d6c:	strd	r5, r5, [r0, #72]	; 0x48
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    7d70:	ldr	r5, [pc, #12]	; (7d80 <FsVolume::open(char const*, int)+0x24>)
    7d72:	str.w	r5, [r0], #16
  FsFile tmpFile;
  tmpFile.open(this, path, oflag);
    7d76:	bl	7b34 <FsBaseFile::open(FsVolume*, char const*, int)>
  return tmpFile;
}
    7d7a:	mov	r0, r4
    7d7c:	pop	{r4, r5, r6, pc}
    7d7e:	nop
    7d80:	.word	0x200009a8

00007d84 <operator new(unsigned int, unsigned long*)>:
 */
#include "FsNew.h"
void* operator new(size_t size, newalign_t* ptr) {
  (void)size;
  return ptr;
}
    7d84:	mov	r0, r1
    7d86:	bx	lr

00007d88 <SdCardInterface::status()>:
   * \param[out] sds location for 64 status bytes.
   * \return true for success or false for failure.
   */
  virtual bool readSDS(sds_t* sds) = 0;
  /** \return card status. */
  virtual uint32_t status() { return 0XFFFFFFFF; }
    7d88:	mov.w	r0, #4294967295
    7d8c:	bx	lr
    7d8e:	nop

00007d90 <SharedSpiCard::errorCode() const>:
  uint8_t errorCode() const { return m_errorCode; }
    7d90:	ldrb	r0, [r0, #18]
    7d92:	bx	lr

00007d94 <SharedSpiCard::errorData() const>:
  uint32_t errorData() const { return m_status; }
    7d94:	ldrb	r0, [r0, #21]
    7d96:	bx	lr

00007d98 <SharedSpiCard::type() const>:
  uint8_t type() const { return m_type; }
    7d98:	ldrb	r0, [r0, #22]
    7d9a:	bx	lr

00007d9c <DedicatedSpiCard::hasDedicatedSpi()>:
   * \param[in] spiConfig SPI card configuration.
   * \return true for success or false for failure.
   */
  bool begin(SdSpiConfig spiConfig);
  /** \return true, can be in dedicaded state. */
  bool hasDedicatedSpi() { return true; }
    7d9c:	movs	r0, #1
    7d9e:	bx	lr

00007da0 <DedicatedSpiCard::isDedicatedSpi()>:
  /** \return true if in dedicated SPI state. */
  bool isDedicatedSpi() { return m_dedicatedSpi; }
    7da0:	ldrb	r0, [r0, #28]
    7da2:	bx	lr

00007da4 <DedicatedSpiCard::~DedicatedSpiCard()>:
class DedicatedSpiCard : public SharedSpiCard {
    7da4:	bx	lr
    7da6:	nop

00007da8 <DedicatedSpiCard::~DedicatedSpiCard()>:
    7da8:	push	{r4, lr}
    7daa:	mov	r4, r0
    7dac:	movs	r1, #32
    7dae:	bl	f16c <operator delete(void*, unsigned int)>
    7db2:	mov	r0, r4
    7db4:	pop	{r4, pc}
    7db6:	nop

00007db8 <SharedSpiCard::writeStop()>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SharedSpiCard::writeStop() {
    7db8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7dbc:	ldr	r6, [pc, #128]	; (7e40 <SharedSpiCard::writeStop()+0x88>)
    7dbe:	mov	r7, r0
    return m_spiDriver.receive();
    7dc0:	add.w	r8, r0, #4
    7dc4:	ldr	r5, [r6, #0]
  void set(uint16_t ms) { m_endTime = ms + millis16(); }
    7dc6:	add.w	r5, r5, #600	; 0x258
    7dca:	uxth	r5, r5
  explicit Timeout(uint16_t ms) { set(ms); }
    7dcc:	b.n	7dd6 <SharedSpiCard::writeStop()+0x1e>
    7dce:	ldr	r3, [r6, #0]
  bool timedOut() { return (int16_t)(m_endTime - millis16()) < 0; }
    7dd0:	subs	r3, r5, r3
    if (timeout.timedOut()) {
    7dd2:	lsls	r3, r3, #16
    7dd4:	bmi.n	7df8 <SharedSpiCard::writeStop()+0x40>
    7dd6:	mov	r0, r8
    7dd8:	bl	aff0 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    7ddc:	cmp	r0, #255	; 0xff
    7dde:	mov	r4, r0
    7de0:	bne.n	7dce <SharedSpiCard::writeStop()+0x16>
    m_spiDriver.send(data);
    7de2:	movs	r1, #253	; 0xfd
    7de4:	mov	r0, r8
    7de6:	bl	b02c <SdSpiArduinoDriver::send(unsigned char)>
  if (m_spiActive) {
    7dea:	ldrb	r3, [r7, #19]
    7dec:	cbnz	r3, 7e22 <SharedSpiCard::writeStop()+0x6a>
  if (!waitReady(SD_WRITE_TIMEOUT)) {
    goto fail;
  }
  spiSend(STOP_TRAN_TOKEN);
  spiStop();
  m_state = IDLE_STATE;
    7dee:	movs	r3, #0
  return true;
    7df0:	movs	r0, #1
  m_state = IDLE_STATE;
    7df2:	strb	r3, [r7, #20]

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
    7df4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_errorCode = code;
    7df8:	movs	r3, #31
  if (m_spiActive) {
    7dfa:	ldrb	r0, [r7, #19]
    7dfc:	strb	r3, [r7, #18]
    7dfe:	cmp	r0, #0
    7e00:	beq.n	7df4 <SharedSpiCard::writeStop()+0x3c>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    7e02:	ldrb	r0, [r7, #17]
    7e04:	movs	r1, #1
    7e06:	bl	b098 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    7e0a:	movs	r1, #255	; 0xff
    7e0c:	mov	r0, r8
    7e0e:	bl	b02c <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    7e12:	mov	r0, r8
    7e14:	bl	af98 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    7e18:	movs	r3, #0
}
    7e1a:	mov	r0, r3
    m_spiActive = false;
    7e1c:	strb	r3, [r7, #19]
}
    7e1e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    7e22:	movs	r1, #1
    7e24:	ldrb	r0, [r7, #17]
    7e26:	bl	b098 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    7e2a:	mov	r1, r4
    7e2c:	mov	r0, r8
    7e2e:	bl	b02c <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    7e32:	mov	r0, r8
    7e34:	bl	af98 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    7e38:	movs	r3, #0
    7e3a:	strb	r3, [r7, #19]
}
    7e3c:	b.n	7dee <SharedSpiCard::writeStop()+0x36>
    7e3e:	nop
    7e40:	.word	0x2001598c

00007e44 <SharedSpiCard::isBusy()>:
bool SharedSpiCard::isBusy() {
    7e44:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (m_state == READ_STATE) {
    7e48:	ldrb	r3, [r0, #20]
    7e4a:	cmp	r3, #1
    7e4c:	beq.n	7eba <SharedSpiCard::isBusy()+0x76>
  if (!spiActive) {
    7e4e:	ldrb	r6, [r0, #19]
    7e50:	mov	r4, r0
    7e52:	cbz	r6, 7e68 <SharedSpiCard::isBusy()+0x24>
    return m_spiDriver.receive();
    7e54:	adds	r0, #4
    7e56:	bl	aff0 <SdSpiArduinoDriver::receive()>
  bool rtn = 0XFF != spiReceive();
    7e5a:	subs.w	r5, r0, #255	; 0xff
    7e5e:	it	ne
    7e60:	movne	r5, #1
}
    7e62:	mov	r0, r5
    7e64:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  void spiActivate() { m_spiDriver.activate(); }
    7e68:	adds	r7, r0, #4
    m_spiActive = true;
    7e6a:	mov.w	r8, #1
    7e6e:	mov	r0, r7
    7e70:	bl	ae68 <SdSpiArduinoDriver::activate()>
  void spiSelect() { sdCsWrite(m_csPin, false); }
    7e74:	mov	r1, r6
    7e76:	ldrb	r0, [r4, #17]
    7e78:	strb.w	r8, [r4, #19]
    7e7c:	bl	b098 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    7e80:	movs	r1, #255	; 0xff
    7e82:	mov	r0, r7
    7e84:	bl	b02c <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
    7e88:	mov	r0, r7
    7e8a:	bl	aff0 <SdSpiArduinoDriver::receive()>
  if (m_spiActive) {
    7e8e:	ldrb	r3, [r4, #19]
  bool rtn = 0XFF != spiReceive();
    7e90:	subs.w	r5, r0, #255	; 0xff
    7e94:	it	ne
    7e96:	movne	r5, #1
  if (m_spiActive) {
    7e98:	cmp	r3, #0
    7e9a:	beq.n	7e62 <SharedSpiCard::isBusy()+0x1e>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    7e9c:	mov	r1, r8
    7e9e:	ldrb	r0, [r4, #17]
    7ea0:	bl	b098 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    7ea4:	movs	r1, #255	; 0xff
    7ea6:	mov	r0, r7
    7ea8:	bl	b02c <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    7eac:	mov	r0, r7
    7eae:	bl	af98 <SdSpiArduinoDriver::deactivate()>
}
    7eb2:	mov	r0, r5
    m_spiActive = false;
    7eb4:	strb	r6, [r4, #19]
}
    7eb6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return false;
    7eba:	movs	r5, #0
}
    7ebc:	mov	r0, r5
    7ebe:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7ec2:	nop

00007ec4 <SharedSpiCard::writeData(unsigned char const*)>:
bool SharedSpiCard::writeData(const uint8_t* src) {
    7ec4:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7ec8:	ldr	r7, [pc, #192]	; (7f8c <SharedSpiCard::writeData(unsigned char const*)+0xc8>)
    7eca:	mov	r8, r0
    7ecc:	mov	r9, r1
    return m_spiDriver.receive();
    7ece:	adds	r6, r0, #4
    7ed0:	ldr	r5, [r7, #0]
  void set(uint16_t ms) { m_endTime = ms + millis16(); }
    7ed2:	add.w	r5, r5, #600	; 0x258
    7ed6:	uxth	r5, r5
  explicit Timeout(uint16_t ms) { set(ms); }
    7ed8:	b.n	7ee2 <SharedSpiCard::writeData(unsigned char const*)+0x1e>
    7eda:	ldr	r3, [r7, #0]
  bool timedOut() { return (int16_t)(m_endTime - millis16()) < 0; }
    7edc:	subs	r3, r5, r3
    if (timeout.timedOut()) {
    7ede:	lsls	r3, r3, #16
    7ee0:	bmi.n	7f2a <SharedSpiCard::writeData(unsigned char const*)+0x66>
    7ee2:	mov	r0, r6
    7ee4:	bl	aff0 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    7ee8:	cmp	r0, #255	; 0xff
    7eea:	mov	r4, r0
    7eec:	bne.n	7eda <SharedSpiCard::writeData(unsigned char const*)+0x16>
    m_spiDriver.send(data);
    7eee:	movs	r1, #252	; 0xfc
    7ef0:	mov	r0, r6
    7ef2:	bl	b02c <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.send(buf, n);
    7ef6:	mov.w	r2, #512	; 0x200
    7efa:	mov	r1, r9
    7efc:	mov	r0, r6
    7efe:	bl	b040 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>
    m_spiDriver.send(data);
    7f02:	mov	r1, r4
    7f04:	mov	r0, r6
    7f06:	bl	b02c <SdSpiArduinoDriver::send(unsigned char)>
    7f0a:	mov	r1, r4
    7f0c:	mov	r0, r6
    7f0e:	bl	b02c <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
    7f12:	mov	r0, r6
    7f14:	bl	aff0 <SdSpiArduinoDriver::receive()>
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    7f18:	and.w	r3, r0, #31
  m_status = spiReceive();
    7f1c:	strb.w	r0, [r8, #21]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    7f20:	cmp	r3, #5
    7f22:	bne.n	7f5a <SharedSpiCard::writeData(unsigned char const*)+0x96>
  return true;
    7f24:	movs	r0, #1
}
    7f26:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    m_errorCode = code;
    7f2a:	movs	r2, #37	; 0x25
  if (m_spiActive) {
    7f2c:	ldrb.w	r3, [r8, #19]
    7f30:	strb.w	r2, [r8, #18]
    7f34:	cbz	r3, 7f66 <SharedSpiCard::writeData(unsigned char const*)+0xa2>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    7f36:	ldrb.w	r0, [r8, #17]
    7f3a:	movs	r1, #1
    7f3c:	bl	b098 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    7f40:	movs	r1, #255	; 0xff
    7f42:	mov	r0, r6
    7f44:	bl	b02c <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    7f48:	mov	r0, r6
    7f4a:	bl	af98 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    7f4e:	movs	r3, #0
}
    7f50:	mov	r0, r3
    m_spiActive = false;
    7f52:	strb.w	r3, [r8, #19]
}
    7f56:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    m_errorCode = code;
    7f5a:	movs	r2, #33	; 0x21
  if (m_spiActive) {
    7f5c:	ldrb.w	r3, [r8, #19]
    7f60:	strb.w	r2, [r8, #18]
    7f64:	cbnz	r3, 7f6c <SharedSpiCard::writeData(unsigned char const*)+0xa8>
}
    7f66:	movs	r0, #0
}
    7f68:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    7f6c:	movs	r1, #1
    7f6e:	ldrb.w	r0, [r8, #17]
    7f72:	bl	b098 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    7f76:	mov	r1, r4
    7f78:	mov	r0, r6
    7f7a:	bl	b02c <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    7f7e:	mov	r0, r6
    7f80:	bl	af98 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    7f84:	movs	r3, #0
    7f86:	strb.w	r3, [r8, #19]
    7f8a:	b.n	7f66 <SharedSpiCard::writeData(unsigned char const*)+0xa2>
    7f8c:	.word	0x2001598c

00007f90 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>:
uint8_t SharedSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    7f90:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!syncDevice()) {
    7f94:	ldr	r3, [r0, #0]
uint8_t SharedSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    7f96:	sub	sp, #8
    7f98:	mov	r6, r0
    7f9a:	mov	r7, r1
  if (!syncDevice()) {
    7f9c:	ldr	r3, [r3, #28]
uint8_t SharedSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    7f9e:	str	r2, [sp, #4]
  if (!syncDevice()) {
    7fa0:	blx	r3
    7fa2:	cmp	r0, #0
    7fa4:	beq.n	8046 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xb6>
  if (!m_spiActive) {
    7fa6:	ldrb	r4, [r6, #19]
  void spiActivate() { m_spiDriver.activate(); }
    7fa8:	adds	r5, r6, #4
    7faa:	cmp	r4, #0
    7fac:	beq.n	802a <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x9a>
  if (cmd != CMD0 && cmd != CMD12 && !waitReady(SD_CMD_TIMEOUT)) {
    7fae:	cbz	r7, 7fd8 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x48>
    7fb0:	cmp	r7, #12
    7fb2:	beq.n	7fd8 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x48>
    7fb4:	ldr.w	r8, [pc, #152]	; 8050 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xc0>
    7fb8:	ldr.w	r4, [r8]
  void set(uint16_t ms) { m_endTime = ms + millis16(); }
    7fbc:	add.w	r4, r4, #300	; 0x12c
    7fc0:	uxth	r4, r4
  explicit Timeout(uint16_t ms) { set(ms); }
    7fc2:	b.n	7fce <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x3e>
    7fc4:	ldr.w	r3, [r8]
  bool timedOut() { return (int16_t)(m_endTime - millis16()) < 0; }
    7fc8:	subs	r3, r4, r3
    if (timeout.timedOut()) {
    7fca:	lsls	r1, r3, #16
    7fcc:	bmi.n	8046 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xb6>
    return m_spiDriver.receive();
    7fce:	mov	r0, r5
    7fd0:	bl	aff0 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    7fd4:	cmp	r0, #255	; 0xff
    7fd6:	bne.n	7fc4 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x34>
    m_spiDriver.send(data);
    7fd8:	add.w	r8, sp, #4
    7fdc:	add	r4, sp, #8
    7fde:	orr.w	r1, r7, #64	; 0x40
    7fe2:	mov	r0, r5
    7fe4:	bl	b02c <SdSpiArduinoDriver::send(unsigned char)>
    7fe8:	ldrb.w	r1, [r4, #-1]!
    7fec:	mov	r0, r5
    7fee:	bl	b02c <SdSpiArduinoDriver::send(unsigned char)>
  for (int8_t i = 3; i >= 0; i--) {
    7ff2:	cmp	r8, r4
    7ff4:	bne.n	7fe8 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x58>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
    7ff6:	cmp	r7, #0
    7ff8:	mov	r0, r5
    return m_spiDriver.receive();
    7ffa:	mov.w	r4, #10
    m_spiDriver.send(data);
    7ffe:	ite	eq
    8000:	moveq	r1, #149	; 0x95
    8002:	movne	r1, #135	; 0x87
    8004:	bl	b02c <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
    8008:	mov	r0, r5
    800a:	bl	aff0 <SdSpiArduinoDriver::receive()>
    800e:	mov	r0, r5
    8010:	bl	aff0 <SdSpiArduinoDriver::receive()>
  } while (m_status & 0X80 && ++n < 10);
    8014:	lsls	r2, r0, #24
    8016:	add.w	r3, r4, #4294967295
    m_status = spiReceive();
    801a:	strb	r0, [r6, #21]
  } while (m_status & 0X80 && ++n < 10);
    801c:	bpl.n	8024 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x94>
    801e:	ands.w	r4, r3, #255	; 0xff
    8022:	bne.n	800e <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x7e>
}
    8024:	add	sp, #8
    8026:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  void spiActivate() { m_spiDriver.activate(); }
    802a:	mov	r0, r5
    802c:	bl	ae68 <SdSpiArduinoDriver::activate()>
    m_spiActive = true;
    8030:	movs	r3, #1
  void spiSelect() { sdCsWrite(m_csPin, false); }
    8032:	mov	r1, r4
    8034:	ldrb	r0, [r6, #17]
    8036:	strb	r3, [r6, #19]
    8038:	bl	b098 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    803c:	movs	r1, #255	; 0xff
    803e:	mov	r0, r5
    8040:	bl	b02c <SdSpiArduinoDriver::send(unsigned char)>
}
    8044:	b.n	7fae <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x1e>
    return 0XFF;
    8046:	movs	r0, #255	; 0xff
}
    8048:	add	sp, #8
    804a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    804e:	nop
    8050:	.word	0x2001598c

00008054 <SharedSpiCard::readSCR(scr_t*)>:
bool SharedSpiCard::readSCR(scr_t* scr) {
    8054:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8058:	mov	r4, r0
    cardCommand(CMD55, 0);
    805a:	movs	r2, #0
    805c:	mov	r8, r1
    805e:	movs	r1, #55	; 0x37
    8060:	bl	7f90 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    return cardCommand(cmd, arg);
    8064:	movs	r2, #0
    8066:	movs	r1, #51	; 0x33
    8068:	mov	r0, r4
    806a:	bl	7f90 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
  if (cardAcmd(ACMD51, 0)) {
    806e:	cbz	r0, 80ac <SharedSpiCard::readSCR(scr_t*)+0x58>
    m_errorCode = code;
    8070:	movs	r2, #24
  if (m_spiActive) {
    8072:	ldrb	r3, [r4, #19]
    8074:	strb	r2, [r4, #18]
    8076:	cbz	r3, 80a4 <SharedSpiCard::readSCR(scr_t*)+0x50>
    m_spiDriver.send(data);
    8078:	adds	r5, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    807a:	ldrb	r0, [r4, #17]
    807c:	movs	r1, #1
    807e:	bl	b098 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    8082:	movs	r1, #255	; 0xff
    8084:	mov	r0, r5
    8086:	bl	b02c <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    808a:	mov	r0, r5
    808c:	bl	af98 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    8090:	movs	r3, #0
  return false;
    8092:	mov	r5, r3
    m_spiActive = false;
    8094:	strb	r3, [r4, #19]
}
    8096:	mov	r0, r5
    8098:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    809c:	movs	r2, #30
  if (m_spiActive) {
    809e:	ldrb	r3, [r4, #19]
    m_errorCode = code;
    80a0:	strb	r2, [r4, #18]
    80a2:	cbnz	r3, 80dc <SharedSpiCard::readSCR(scr_t*)+0x88>
  return false;
    80a4:	movs	r5, #0
}
    80a6:	mov	r0, r5
    80a8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    80ac:	ldr	r7, [pc, #148]	; (8144 <SharedSpiCard::readSCR(scr_t*)+0xf0>)
    m_spiDriver.send(data);
    80ae:	adds	r6, r4, #4
    80b0:	ldr	r5, [r7, #0]
  void set(uint16_t ms) { m_endTime = ms + millis16(); }
    80b2:	add.w	r5, r5, #300	; 0x12c
    80b6:	uxth	r5, r5
  explicit Timeout(uint16_t ms) { set(ms); }
    80b8:	b.n	80c2 <SharedSpiCard::readSCR(scr_t*)+0x6e>
    80ba:	ldr	r3, [r7, #0]
  bool timedOut() { return (int16_t)(m_endTime - millis16()) < 0; }
    80bc:	subs	r3, r5, r3
    if (timeout.timedOut()) {
    80be:	lsls	r3, r3, #16
    80c0:	bmi.n	809c <SharedSpiCard::readSCR(scr_t*)+0x48>
    return m_spiDriver.receive();
    80c2:	mov	r0, r6
    80c4:	bl	aff0 <SdSpiArduinoDriver::receive()>
  while ((m_status = spiReceive()) == 0XFF) {
    80c8:	cmp	r0, #255	; 0xff
    80ca:	strb	r0, [r4, #21]
    80cc:	beq.n	80ba <SharedSpiCard::readSCR(scr_t*)+0x66>
  if (m_status != DATA_START_SECTOR) {
    80ce:	cmp	r0, #254	; 0xfe
    80d0:	beq.n	80fa <SharedSpiCard::readSCR(scr_t*)+0xa6>
    80d2:	movs	r2, #25
  if (m_spiActive) {
    80d4:	ldrb	r3, [r4, #19]
    m_errorCode = code;
    80d6:	strb	r2, [r4, #18]
    80d8:	cmp	r3, #0
    80da:	beq.n	80a4 <SharedSpiCard::readSCR(scr_t*)+0x50>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    80dc:	movs	r1, #1
    80de:	ldrb	r0, [r4, #17]
    80e0:	bl	b098 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    80e4:	movs	r1, #255	; 0xff
    80e6:	mov	r0, r6
  return false;
    80e8:	movs	r5, #0
    80ea:	bl	b02c <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    80ee:	mov	r0, r6
    80f0:	bl	af98 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    80f4:	movs	r3, #0
    80f6:	strb	r3, [r4, #19]
  if (m_spiActive) {
    80f8:	b.n	80a6 <SharedSpiCard::readSCR(scr_t*)+0x52>
    return m_spiDriver.receive(buf, n);
    80fa:	movs	r2, #8
    80fc:	mov	r1, r8
    80fe:	mov	r0, r6
    8100:	bl	b008 <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>
    8104:	mov	r7, r0
  if ((m_status = spiReceive(dst, count))) {
    8106:	strb	r0, [r4, #21]
    8108:	cbz	r0, 810e <SharedSpiCard::readSCR(scr_t*)+0xba>
    810a:	movs	r2, #38	; 0x26
    810c:	b.n	809e <SharedSpiCard::readSCR(scr_t*)+0x4a>
    return m_spiDriver.receive();
    810e:	mov	r0, r6
    8110:	bl	aff0 <SdSpiArduinoDriver::receive()>
    8114:	mov	r0, r6
    8116:	bl	aff0 <SdSpiArduinoDriver::receive()>
  if (m_spiActive) {
    811a:	ldrb	r5, [r4, #19]
    811c:	cbnz	r5, 8126 <SharedSpiCard::readSCR(scr_t*)+0xd2>
    811e:	movs	r5, #1
}
    8120:	mov	r0, r5
    8122:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    8126:	ldrb	r0, [r4, #17]
    8128:	movs	r1, #1
    812a:	bl	b098 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    812e:	movs	r1, #255	; 0xff
    8130:	mov	r0, r6
    8132:	bl	b02c <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    8136:	mov	r0, r6
    8138:	bl	af98 <SdSpiArduinoDriver::deactivate()>
    813c:	mov	r0, r5
    m_spiActive = false;
    813e:	strb	r7, [r4, #19]
}
    8140:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8144:	.word	0x2001598c

00008148 <SharedSpiCard::begin(SdSpiConfig)>:
bool SharedSpiCard::begin(SdSpiConfig spiConfig) {
    8148:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    814c:	sub	sp, #32
    814e:	mov	r5, r0
    8150:	mov	sl, r2
  /** Save high speed SPISettings after SD initialization.
   *
   * \param[in] maxSck Maximum SCK frequency.
   */
  void setSckSpeed(uint32_t maxSck) {
    m_spiSettings = SPISettings(maxSck, MSBFIRST, SPI_MODE0);
    8152:	ldr	r6, [pc, #484]	; (8338 <SharedSpiCard::begin(SdSpiConfig)+0x1f0>)
    8154:	add	r4, sp, #4
  void spiBegin(SdSpiConfig spiConfig) { m_spiDriver.begin(spiConfig); }
    8156:	adds	r7, r5, #4
    8158:	stmia.w	r4, {r1, r2, r3}
    m_beginCalled = false;
    815c:	movs	r3, #0
    815e:	ldrb.w	r0, [sp, #4]
    8162:	strb	r3, [r5, #16]
  m_errorCode = SD_CARD_ERROR_NONE;
    8164:	strh	r3, [r5, #18]
    m_state = IDLE_STATE;
    8166:	strh	r3, [r5, #20]
    m_type = 0;
    8168:	strb	r3, [r5, #22]
  m_csPin = spiConfig.csPin;
    816a:	strb	r0, [r5, #17]
  sdCsInit(m_csPin);
    816c:	bl	b090 <sdCsInit(unsigned char)>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    8170:	movs	r1, #1
    8172:	ldrb	r0, [r5, #17]
    8174:	bl	b098 <sdCsWrite(unsigned char, bool)>
    8178:	movs	r2, #7
    817a:	add	r3, sp, #20
    817c:	strd	r6, r2, [r5, #8]
  spiBegin(spiConfig);
    8180:	ldmia.w	r4, {r0, r1, r2}
    8184:	stmia.w	r3, {r0, r1, r2}
  void spiBegin(SdSpiConfig spiConfig) { m_spiDriver.begin(spiConfig); }
    8188:	mov	r0, r7
  m_beginCalled = true;
    818a:	movs	r4, #1
    818c:	ldmia	r3, {r1, r2, r3}
    818e:	bl	af70 <SdSpiArduinoDriver::begin(SdSpiConfig)>
  if (!m_spiActive) {
    8192:	ldrb	r6, [r5, #19]
  m_beginCalled = true;
    8194:	strb	r4, [r5, #16]
  if (!m_spiActive) {
    8196:	cmp	r6, #0
    8198:	beq.n	8254 <SharedSpiCard::begin(SdSpiConfig)+0x10c>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    819a:	movs	r4, #10
    819c:	movs	r1, #1
    819e:	ldrb	r0, [r5, #17]
    81a0:	bl	b098 <sdCsWrite(unsigned char, bool)>
    return m_spiDriver.receive();
    81a4:	mov	r0, r7
    81a6:	bl	aff0 <SdSpiArduinoDriver::receive()>
  for (uint8_t i = 0; i < 10; i++) {
    81aa:	subs	r1, r4, #1
    81ac:	ands.w	r4, r1, #255	; 0xff
    81b0:	bne.n	81a4 <SharedSpiCard::begin(SdSpiConfig)+0x5c>
    81b2:	ldr.w	r9, [pc, #396]	; 8340 <SharedSpiCard::begin(SdSpiConfig)+0x1f8>
  void spiSelect() { sdCsWrite(m_csPin, false); }
    81b6:	mov	r1, r4
    81b8:	ldrb	r0, [r5, #17]
    81ba:	bl	b098 <sdCsWrite(unsigned char, bool)>
    81be:	ldr.w	r3, [r9]
  void set(uint16_t ms) { m_endTime = ms + millis16(); }
    81c2:	add.w	r8, r3, #2000	; 0x7d0
    81c6:	uxth.w	r8, r8
    81ca:	b.n	81d8 <SharedSpiCard::begin(SdSpiConfig)+0x90>
    81cc:	ldr.w	r3, [r9]
  bool timedOut() { return (int16_t)(m_endTime - millis16()) < 0; }
    81d0:	sub.w	r3, r8, r3
    if (timeout.timedOut()) {
    81d4:	lsls	r0, r3, #16
    81d6:	bmi.n	8244 <SharedSpiCard::begin(SdSpiConfig)+0xfc>
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
    81d8:	movs	r2, #0
    81da:	mov	r0, r5
    81dc:	mov	r1, r2
    81de:	bl	7f90 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    81e2:	cmp	r0, #1
    81e4:	mov	r6, r0
    81e6:	bne.n	81cc <SharedSpiCard::begin(SdSpiConfig)+0x84>
    if (cardCommand(CMD8, 0x1AA) & R1_ILLEGAL_COMMAND) {
    81e8:	movs	r1, #8
    81ea:	mov.w	r2, #426	; 0x1aa
    81ee:	mov	r0, r5
    81f0:	bl	7f90 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    81f4:	lsls	r1, r0, #29
    81f6:	bmi.n	826e <SharedSpiCard::begin(SdSpiConfig)+0x126>
    81f8:	movs	r4, #4
    return m_spiDriver.receive();
    81fa:	mov	r0, r7
    81fc:	bl	aff0 <SdSpiArduinoDriver::receive()>
    for (uint8_t i = 0; i < 4; i++) {
    8200:	subs	r3, r4, #1
      m_status = spiReceive();
    8202:	strb	r0, [r5, #21]
    for (uint8_t i = 0; i < 4; i++) {
    8204:	ands.w	r4, r3, #255	; 0xff
    8208:	bne.n	81fa <SharedSpiCard::begin(SdSpiConfig)+0xb2>
    if (m_status == 0XAA) {
    820a:	cmp	r0, #170	; 0xaa
    820c:	beq.n	82c2 <SharedSpiCard::begin(SdSpiConfig)+0x17a>
    820e:	ldr.w	r3, [r9]
  bool timedOut() { return (int16_t)(m_endTime - millis16()) < 0; }
    8212:	sub.w	r3, r8, r3
    if (timeout.timedOut()) {
    8216:	lsls	r2, r3, #16
    8218:	bpl.n	81e8 <SharedSpiCard::begin(SdSpiConfig)+0xa0>
    821a:	movs	r3, #6
  if (m_spiActive) {
    821c:	ldrb	r0, [r5, #19]
    m_errorCode = code;
    821e:	strb	r3, [r5, #18]
    8220:	cbz	r0, 824e <SharedSpiCard::begin(SdSpiConfig)+0x106>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    8222:	ldrb	r0, [r5, #17]
    8224:	movs	r1, #1
    8226:	bl	b098 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    822a:	movs	r1, #255	; 0xff
    822c:	mov	r0, r7
    822e:	bl	b02c <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    8232:	mov	r0, r7
    8234:	bl	af98 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    8238:	movs	r3, #0
  return false;
    823a:	mov	r0, r3
    m_spiActive = false;
    823c:	strb	r3, [r5, #19]
}
    823e:	add	sp, #32
    8240:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8244:	movs	r3, #1
  if (m_spiActive) {
    8246:	ldrb	r0, [r5, #19]
    m_errorCode = code;
    8248:	strb	r3, [r5, #18]
    824a:	cmp	r0, #0
    824c:	bne.n	8222 <SharedSpiCard::begin(SdSpiConfig)+0xda>
}
    824e:	add	sp, #32
    8250:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  void spiActivate() { m_spiDriver.activate(); }
    8254:	mov	r0, r7
    8256:	bl	ae68 <SdSpiArduinoDriver::activate()>
  void spiSelect() { sdCsWrite(m_csPin, false); }
    825a:	mov	r1, r6
    825c:	ldrb	r0, [r5, #17]
    m_spiActive = true;
    825e:	strb	r4, [r5, #19]
    8260:	bl	b098 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    8264:	movs	r1, #255	; 0xff
    8266:	mov	r0, r7
    8268:	bl	b02c <SdSpiArduinoDriver::send(unsigned char)>
}
    826c:	b.n	819a <SharedSpiCard::begin(SdSpiConfig)+0x52>
    826e:	movs	r4, #0
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
    8270:	ldr	r3, [r5, #0]
  void type(uint8_t value) { m_type = value; }
    8272:	strb	r6, [r5, #22]
    8274:	ldr	r6, [pc, #196]	; (833c <SharedSpiCard::begin(SdSpiConfig)+0x1f4>)
    8276:	ldr	r3, [r3, #92]	; 0x5c
    8278:	cmp	r3, r6
    827a:	beq.n	828a <SharedSpiCard::begin(SdSpiConfig)+0x142>
    827c:	b.n	82ce <SharedSpiCard::begin(SdSpiConfig)+0x186>
    827e:	ldr.w	r3, [r9]
  bool timedOut() { return (int16_t)(m_endTime - millis16()) < 0; }
    8282:	sub.w	r3, r8, r3
    if (timeout.timedOut()) {
    8286:	lsls	r3, r3, #16
    8288:	bmi.n	82ca <SharedSpiCard::begin(SdSpiConfig)+0x182>
    cardCommand(CMD55, 0);
    828a:	movs	r1, #55	; 0x37
    828c:	movs	r2, #0
    828e:	mov	r0, r5
    8290:	bl	7f90 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    return cardCommand(cmd, arg);
    8294:	mov	r2, r4
    8296:	movs	r1, #41	; 0x29
    8298:	mov	r0, r5
    829a:	bl	7f90 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
    829e:	cmp	r0, #0
    82a0:	bne.n	827e <SharedSpiCard::begin(SdSpiConfig)+0x136>
  if (type() == SD_CARD_TYPE_SD2) {
    82a2:	ldr	r3, [r5, #0]
    82a4:	ldr	r3, [r3, #92]	; 0x5c
    82a6:	cmp	r3, r6
    82a8:	bne.n	832e <SharedSpiCard::begin(SdSpiConfig)+0x1e6>
  uint8_t type() const { return m_type; }
    82aa:	ldrb	r0, [r5, #22]
    82ac:	cmp	r0, #2
    82ae:	beq.n	82fc <SharedSpiCard::begin(SdSpiConfig)+0x1b4>
  if (m_spiActive) {
    82b0:	ldrb	r3, [r5, #19]
    82b2:	cbnz	r3, 82e0 <SharedSpiCard::begin(SdSpiConfig)+0x198>
    82b4:	movs	r3, #7
  return true;
    82b6:	movs	r0, #1
    82b8:	strd	sl, r3, [r5, #8]
}
    82bc:	add	sp, #32
    82be:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    82c2:	movs	r6, #2
    82c4:	mov.w	r4, #1073741824	; 0x40000000
    82c8:	b.n	8270 <SharedSpiCard::begin(SdSpiConfig)+0x128>
    82ca:	movs	r3, #23
    82cc:	b.n	8246 <SharedSpiCard::begin(SdSpiConfig)+0xfe>
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
    82ce:	mov	r0, r5
    82d0:	blx	r3
    82d2:	sub.w	r0, r0, #2
    82d6:	clz	r0, r0
    82da:	lsrs	r0, r0, #5
    82dc:	lsls	r4, r0, #30
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
    82de:	b.n	828a <SharedSpiCard::begin(SdSpiConfig)+0x142>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    82e0:	movs	r1, #1
    82e2:	ldrb	r0, [r5, #17]
    82e4:	bl	b098 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    82e8:	movs	r1, #255	; 0xff
    82ea:	mov	r0, r7
    82ec:	bl	b02c <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    82f0:	mov	r0, r7
    82f2:	bl	af98 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    82f6:	movs	r3, #0
    82f8:	strb	r3, [r5, #19]
}
    82fa:	b.n	82b4 <SharedSpiCard::begin(SdSpiConfig)+0x16c>
    if (cardCommand(CMD58, 0)) {
    82fc:	movs	r2, #0
    82fe:	movs	r1, #58	; 0x3a
    8300:	mov	r0, r5
    8302:	bl	7f90 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    8306:	cbnz	r0, 8334 <SharedSpiCard::begin(SdSpiConfig)+0x1ec>
    return m_spiDriver.receive();
    8308:	mov	r0, r7
    830a:	bl	aff0 <SdSpiArduinoDriver::receive()>
    if ((spiReceive() & 0XC0) == 0XC0) {
    830e:	and.w	r0, r0, #192	; 0xc0
    8312:	cmp	r0, #192	; 0xc0
    8314:	bne.n	831a <SharedSpiCard::begin(SdSpiConfig)+0x1d2>
  void type(uint8_t value) { m_type = value; }
    8316:	movs	r3, #3
    8318:	strb	r3, [r5, #22]
    return m_spiDriver.receive();
    831a:	mov	r0, r7
    831c:	bl	aff0 <SdSpiArduinoDriver::receive()>
    8320:	mov	r0, r7
    8322:	bl	aff0 <SdSpiArduinoDriver::receive()>
    8326:	mov	r0, r7
    8328:	bl	aff0 <SdSpiArduinoDriver::receive()>
    for (uint8_t i = 0; i < 3; i++) {
    832c:	b.n	82b0 <SharedSpiCard::begin(SdSpiConfig)+0x168>
  if (type() == SD_CARD_TYPE_SD2) {
    832e:	mov	r0, r5
    8330:	blx	r3
    8332:	b.n	82ac <SharedSpiCard::begin(SdSpiConfig)+0x164>
    8334:	movs	r3, #18
    8336:	b.n	8246 <SharedSpiCard::begin(SdSpiConfig)+0xfe>
    8338:	.word	0x00061a80
    833c:	.word	0x00007d99
    8340:	.word	0x2001598c

00008344 <SharedSpiCard::cardCMD6(unsigned long, unsigned char*)>:
bool SharedSpiCard::cardCMD6(uint32_t arg, uint8_t* status) {
    8344:	mov	r3, r1
  if (cardCommand(CMD6, arg)) {
    8346:	movs	r1, #6
bool SharedSpiCard::cardCMD6(uint32_t arg, uint8_t* status) {
    8348:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    834c:	mov	r8, r2
  if (cardCommand(CMD6, arg)) {
    834e:	mov	r2, r3
bool SharedSpiCard::cardCMD6(uint32_t arg, uint8_t* status) {
    8350:	mov	r4, r0
  if (cardCommand(CMD6, arg)) {
    8352:	bl	7f90 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    8356:	cbz	r0, 8394 <SharedSpiCard::cardCMD6(unsigned long, unsigned char*)+0x50>
    m_errorCode = code;
    8358:	movs	r2, #4
  if (m_spiActive) {
    835a:	ldrb	r3, [r4, #19]
    835c:	strb	r2, [r4, #18]
    835e:	cbz	r3, 838c <SharedSpiCard::cardCMD6(unsigned long, unsigned char*)+0x48>
    m_spiDriver.send(data);
    8360:	adds	r5, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    8362:	ldrb	r0, [r4, #17]
    8364:	movs	r1, #1
    8366:	bl	b098 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    836a:	movs	r1, #255	; 0xff
    836c:	mov	r0, r5
    836e:	bl	b02c <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    8372:	mov	r0, r5
    8374:	bl	af98 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    8378:	movs	r3, #0
  return false;
    837a:	mov	r5, r3
    m_spiActive = false;
    837c:	strb	r3, [r4, #19]
}
    837e:	mov	r0, r5
    8380:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8384:	movs	r2, #30
  if (m_spiActive) {
    8386:	ldrb	r3, [r4, #19]
    m_errorCode = code;
    8388:	strb	r2, [r4, #18]
    838a:	cbnz	r3, 83c4 <SharedSpiCard::cardCMD6(unsigned long, unsigned char*)+0x80>
  return false;
    838c:	movs	r5, #0
}
    838e:	mov	r0, r5
    8390:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8394:	ldr	r7, [pc, #148]	; (842c <SharedSpiCard::cardCMD6(unsigned long, unsigned char*)+0xe8>)
    m_spiDriver.send(data);
    8396:	adds	r6, r4, #4
    8398:	ldr	r5, [r7, #0]
  void set(uint16_t ms) { m_endTime = ms + millis16(); }
    839a:	add.w	r5, r5, #300	; 0x12c
    839e:	uxth	r5, r5
  explicit Timeout(uint16_t ms) { set(ms); }
    83a0:	b.n	83aa <SharedSpiCard::cardCMD6(unsigned long, unsigned char*)+0x66>
    83a2:	ldr	r3, [r7, #0]
  bool timedOut() { return (int16_t)(m_endTime - millis16()) < 0; }
    83a4:	subs	r3, r5, r3
    if (timeout.timedOut()) {
    83a6:	lsls	r3, r3, #16
    83a8:	bmi.n	8384 <SharedSpiCard::cardCMD6(unsigned long, unsigned char*)+0x40>
    return m_spiDriver.receive();
    83aa:	mov	r0, r6
    83ac:	bl	aff0 <SdSpiArduinoDriver::receive()>
  while ((m_status = spiReceive()) == 0XFF) {
    83b0:	cmp	r0, #255	; 0xff
    83b2:	strb	r0, [r4, #21]
    83b4:	beq.n	83a2 <SharedSpiCard::cardCMD6(unsigned long, unsigned char*)+0x5e>
  if (m_status != DATA_START_SECTOR) {
    83b6:	cmp	r0, #254	; 0xfe
    83b8:	beq.n	83e2 <SharedSpiCard::cardCMD6(unsigned long, unsigned char*)+0x9e>
    83ba:	movs	r2, #25
  if (m_spiActive) {
    83bc:	ldrb	r3, [r4, #19]
    m_errorCode = code;
    83be:	strb	r2, [r4, #18]
    83c0:	cmp	r3, #0
    83c2:	beq.n	838c <SharedSpiCard::cardCMD6(unsigned long, unsigned char*)+0x48>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    83c4:	movs	r1, #1
    83c6:	ldrb	r0, [r4, #17]
    83c8:	bl	b098 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    83cc:	movs	r1, #255	; 0xff
    83ce:	mov	r0, r6
  return false;
    83d0:	movs	r5, #0
    83d2:	bl	b02c <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    83d6:	mov	r0, r6
    83d8:	bl	af98 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    83dc:	movs	r3, #0
    83de:	strb	r3, [r4, #19]
  if (m_spiActive) {
    83e0:	b.n	838e <SharedSpiCard::cardCMD6(unsigned long, unsigned char*)+0x4a>
    return m_spiDriver.receive(buf, n);
    83e2:	movs	r2, #64	; 0x40
    83e4:	mov	r1, r8
    83e6:	mov	r0, r6
    83e8:	bl	b008 <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>
    83ec:	mov	r7, r0
  if ((m_status = spiReceive(dst, count))) {
    83ee:	strb	r0, [r4, #21]
    83f0:	cbz	r0, 83f6 <SharedSpiCard::cardCMD6(unsigned long, unsigned char*)+0xb2>
    83f2:	movs	r2, #38	; 0x26
    83f4:	b.n	8386 <SharedSpiCard::cardCMD6(unsigned long, unsigned char*)+0x42>
    return m_spiDriver.receive();
    83f6:	mov	r0, r6
    83f8:	bl	aff0 <SdSpiArduinoDriver::receive()>
    83fc:	mov	r0, r6
    83fe:	bl	aff0 <SdSpiArduinoDriver::receive()>
  if (m_spiActive) {
    8402:	ldrb	r5, [r4, #19]
    8404:	cbnz	r5, 840e <SharedSpiCard::cardCMD6(unsigned long, unsigned char*)+0xca>
    8406:	movs	r5, #1
}
    8408:	mov	r0, r5
    840a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    840e:	ldrb	r0, [r4, #17]
    8410:	movs	r1, #1
    8412:	bl	b098 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    8416:	movs	r1, #255	; 0xff
    8418:	mov	r0, r6
    841a:	bl	b02c <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    841e:	mov	r0, r6
    8420:	bl	af98 <SdSpiArduinoDriver::deactivate()>
    8424:	mov	r0, r5
    m_spiActive = false;
    8426:	strb	r7, [r4, #19]
}
    8428:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    842c:	.word	0x2001598c

00008430 <SharedSpiCard::readOCR(unsigned long*)>:
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    8430:	push	{r3, r4, r5, r6, r7, lr}
  if (cardCommand(CMD58, 0)) {
    8432:	movs	r2, #0
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    8434:	mov	r5, r1
  if (cardCommand(CMD58, 0)) {
    8436:	movs	r1, #58	; 0x3a
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    8438:	mov	r6, r0
  if (cardCommand(CMD58, 0)) {
    843a:	bl	7f90 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    843e:	cbnz	r0, 847a <SharedSpiCard::readOCR(unsigned long*)+0x4a>
    m_spiDriver.send(data);
    8440:	adds	r7, r6, #4
    8442:	adds	r4, r5, #4
    return m_spiDriver.receive();
    8444:	mov	r0, r7
    8446:	bl	aff0 <SdSpiArduinoDriver::receive()>
    p[3 - i] = spiReceive();
    844a:	strb.w	r0, [r4, #-1]!
  for (uint8_t i = 0; i < 4; i++) {
    844e:	cmp	r5, r4
    8450:	bne.n	8444 <SharedSpiCard::readOCR(unsigned long*)+0x14>
  if (m_spiActive) {
    8452:	ldrb	r4, [r6, #19]
    8454:	cbnz	r4, 845c <SharedSpiCard::readOCR(unsigned long*)+0x2c>
  return true;
    8456:	movs	r4, #1
}
    8458:	mov	r0, r4
    845a:	pop	{r3, r4, r5, r6, r7, pc}
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    845c:	ldrb	r0, [r6, #17]
    845e:	movs	r1, #1
    8460:	bl	b098 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    8464:	movs	r1, #255	; 0xff
    8466:	mov	r0, r7
    8468:	bl	b02c <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    846c:	mov	r0, r7
    846e:	bl	af98 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    8472:	movs	r3, #0
}
    8474:	mov	r0, r4
    m_spiActive = false;
    8476:	strb	r3, [r6, #19]
}
    8478:	pop	{r3, r4, r5, r6, r7, pc}
    m_errorCode = code;
    847a:	movs	r3, #18
  if (m_spiActive) {
    847c:	ldrb	r4, [r6, #19]
    847e:	strb	r3, [r6, #18]
    8480:	cmp	r4, #0
    8482:	beq.n	8458 <SharedSpiCard::readOCR(unsigned long*)+0x28>
    m_spiDriver.send(data);
    8484:	adds	r4, r6, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    8486:	ldrb	r0, [r6, #17]
    8488:	movs	r1, #1
    848a:	bl	b098 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    848e:	movs	r1, #255	; 0xff
    8490:	mov	r0, r4
    8492:	bl	b02c <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    8496:	mov	r0, r4
    8498:	bl	af98 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    849c:	movs	r3, #0
}
    849e:	mov	r4, r3
    m_spiActive = false;
    84a0:	strb	r3, [r6, #19]
}
    84a2:	mov	r0, r4
    84a4:	pop	{r3, r4, r5, r6, r7, pc}
    84a6:	nop

000084a8 <SharedSpiCard::writeStart(unsigned long)>:
  if (type() != SD_CARD_TYPE_SDHC) {
    84a8:	ldr	r3, [r0, #0]
bool SharedSpiCard::writeStart(uint32_t sector) {
    84aa:	mov	r2, r1
    84ac:	push	{r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    84ae:	ldr	r3, [r3, #92]	; 0x5c
bool SharedSpiCard::writeStart(uint32_t sector) {
    84b0:	sub	sp, #12
    84b2:	ldr	r5, [pc, #88]	; (850c <SharedSpiCard::writeStart(unsigned long)+0x64>)
    84b4:	mov	r4, r0
  if (type() != SD_CARD_TYPE_SDHC) {
    84b6:	cmp	r3, r5
    84b8:	bne.n	8504 <SharedSpiCard::writeStart(unsigned long)+0x5c>
  uint8_t type() const { return m_type; }
    84ba:	ldrb	r0, [r0, #22]
    84bc:	cmp	r0, #3
  if (cardCommand(CMD25, sector)) {
    84be:	mov.w	r1, #25
    84c2:	mov	r0, r4
    sector <<= 9;
    84c4:	it	ne
    84c6:	lslne	r2, r2, #9
  if (cardCommand(CMD25, sector)) {
    84c8:	bl	7f90 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    84cc:	cbnz	r0, 84d8 <SharedSpiCard::writeStart(unsigned long)+0x30>
  m_state = WRITE_STATE;
    84ce:	movs	r3, #2
  return true;
    84d0:	movs	r0, #1
  m_state = WRITE_STATE;
    84d2:	strb	r3, [r4, #20]
}
    84d4:	add	sp, #12
    84d6:	pop	{r4, r5, pc}
    m_errorCode = code;
    84d8:	movs	r3, #14
  if (m_spiActive) {
    84da:	ldrb	r0, [r4, #19]
    84dc:	strb	r3, [r4, #18]
    84de:	cmp	r0, #0
    84e0:	beq.n	84d4 <SharedSpiCard::writeStart(unsigned long)+0x2c>
    m_spiDriver.send(data);
    84e2:	adds	r5, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    84e4:	ldrb	r0, [r4, #17]
    84e6:	movs	r1, #1
    84e8:	bl	b098 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    84ec:	movs	r1, #255	; 0xff
    84ee:	mov	r0, r5
    84f0:	bl	b02c <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    84f4:	mov	r0, r5
    84f6:	bl	af98 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    84fa:	movs	r3, #0
}
    84fc:	mov	r0, r3
    m_spiActive = false;
    84fe:	strb	r3, [r4, #19]
}
    8500:	add	sp, #12
    8502:	pop	{r4, r5, pc}
    8504:	str	r1, [sp, #4]
  if (type() != SD_CARD_TYPE_SDHC) {
    8506:	blx	r3
    8508:	ldr	r2, [sp, #4]
    850a:	b.n	84bc <SharedSpiCard::writeStart(unsigned long)+0x14>
    850c:	.word	0x00007d99

00008510 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)>:
  if (type() != SD_CARD_TYPE_SDHC) {
    8510:	ldr	r3, [r0, #0]
bool SharedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    8512:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    8516:	ldr	r3, [r3, #92]	; 0x5c
bool SharedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    8518:	mov	r7, r2
    851a:	ldr	r2, [pc, #284]	; (8638 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x128>)
    851c:	mov	r5, r0
    851e:	mov	r4, r1
  if (type() != SD_CARD_TYPE_SDHC) {
    8520:	cmp	r3, r2
    8522:	bne.n	860e <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0xfe>
  uint8_t type() const { return m_type; }
    8524:	ldrb	r0, [r0, #22]
    8526:	cmp	r0, #3
  if (cardCommand(CMD24, sector)) {
    8528:	mov.w	r1, #24
    852c:	mov	r0, r5
    sector <<= 9;
    852e:	it	ne
    8530:	lslne	r4, r4, #9
  if (cardCommand(CMD24, sector)) {
    8532:	mov	r2, r4
    8534:	bl	7f90 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    8538:	mov	r4, r0
    853a:	cbz	r0, 8570 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x60>
    853c:	movs	r3, #13
  if (m_spiActive) {
    853e:	ldrb	r2, [r5, #19]
    m_errorCode = code;
    8540:	strb	r3, [r5, #18]
    8542:	cbnz	r2, 854c <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x3c>
  return false;
    8544:	movs	r7, #0
}
    8546:	mov	r0, r7
    8548:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_spiDriver.send(data);
    854c:	adds	r4, r5, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    854e:	ldrb	r0, [r5, #17]
    8550:	movs	r1, #1
    8552:	bl	b098 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    8556:	movs	r1, #255	; 0xff
    8558:	mov	r0, r4
    855a:	bl	b02c <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    855e:	mov	r0, r4
    8560:	bl	af98 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    8564:	movs	r3, #0
  return false;
    8566:	mov	r7, r3
    m_spiActive = false;
    8568:	strb	r3, [r5, #19]
}
    856a:	mov	r0, r7
    856c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_spiDriver.send(data);
    8570:	adds	r6, r5, #4
    8572:	movs	r1, #254	; 0xfe
    8574:	mov	r0, r6
    8576:	bl	b02c <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.send(buf, n);
    857a:	mov.w	r2, #512	; 0x200
    857e:	mov	r1, r7
    8580:	mov	r0, r6
    8582:	bl	b040 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>
    m_spiDriver.send(data);
    8586:	movs	r1, #255	; 0xff
    8588:	mov	r0, r6
    858a:	bl	b02c <SdSpiArduinoDriver::send(unsigned char)>
    858e:	movs	r1, #255	; 0xff
    8590:	mov	r0, r6
    8592:	bl	b02c <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
    8596:	mov	r0, r6
    8598:	bl	aff0 <SdSpiArduinoDriver::receive()>
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    859c:	and.w	r3, r0, #31
  m_status = spiReceive();
    85a0:	strb	r0, [r5, #21]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    85a2:	cmp	r3, #5
    85a4:	beq.n	85ca <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0xba>
    m_errorCode = code;
    85a6:	movs	r2, #33	; 0x21
  if (m_spiActive) {
    85a8:	ldrb	r3, [r5, #19]
    85aa:	strb	r2, [r5, #18]
    85ac:	cmp	r3, #0
    85ae:	beq.n	8544 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x34>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    85b0:	movs	r1, #1
    85b2:	ldrb	r0, [r5, #17]
    85b4:	bl	b098 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    85b8:	movs	r1, #255	; 0xff
    85ba:	mov	r0, r6
    85bc:	bl	b02c <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    85c0:	mov	r0, r6
    85c2:	bl	af98 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    85c6:	strb	r4, [r5, #19]
    85c8:	b.n	8544 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x34>
    85ca:	ldr.w	r8, [pc, #112]	; 863c <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x12c>
    85ce:	ldr.w	r7, [r8]
  void set(uint16_t ms) { m_endTime = ms + millis16(); }
    85d2:	add.w	r7, r7, #600	; 0x258
    85d6:	uxth	r7, r7
  explicit Timeout(uint16_t ms) { set(ms); }
    85d8:	b.n	85e4 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0xd4>
    85da:	ldr.w	r3, [r8]
  bool timedOut() { return (int16_t)(m_endTime - millis16()) < 0; }
    85de:	subs	r3, r7, r3
    if (timeout.timedOut()) {
    85e0:	lsls	r3, r3, #16
    85e2:	bmi.n	8612 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x102>
    return m_spiDriver.receive();
    85e4:	mov	r0, r6
    85e6:	bl	aff0 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    85ea:	cmp	r0, #255	; 0xff
    85ec:	mov	r4, r0
    85ee:	bne.n	85da <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0xca>
  if (cardCommand(CMD13, 0) || spiReceive()) {
    85f0:	movs	r2, #0
    85f2:	movs	r1, #13
    85f4:	mov	r0, r5
    85f6:	bl	7f90 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    85fa:	cbnz	r0, 8616 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x106>
    85fc:	mov	r0, r6
    85fe:	bl	aff0 <SdSpiArduinoDriver::receive()>
    8602:	mov	r8, r0
    8604:	cbnz	r0, 8616 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x106>
  if (m_spiActive) {
    8606:	ldrb	r7, [r5, #19]
    8608:	cbnz	r7, 861a <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x10a>
  return true;
    860a:	movs	r7, #1
    860c:	b.n	8546 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x36>
  if (type() != SD_CARD_TYPE_SDHC) {
    860e:	blx	r3
    8610:	b.n	8526 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x16>
    8612:	movs	r3, #36	; 0x24
    8614:	b.n	853e <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x2e>
    goto fail;
    8616:	movs	r3, #10
    8618:	b.n	853e <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x2e>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    861a:	movs	r1, #1
    861c:	ldrb	r0, [r5, #17]
    861e:	bl	b098 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    8622:	mov	r1, r4
    8624:	mov	r0, r6
    8626:	bl	b02c <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    862a:	mov	r0, r6
    862c:	bl	af98 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    8630:	strb.w	r8, [r5, #19]
}
    8634:	b.n	8546 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x36>
    8636:	nop
    8638:	.word	0x00007d99
    863c:	.word	0x2001598c

00008640 <SharedSpiCard::readCID(cid_t*)>:
  bool readCID(cid_t* cid) { return readRegister(CMD10, cid); }
    8640:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (cardCommand(cmd, 0)) {
    8644:	movs	r2, #0
    8646:	mov	r8, r1
    8648:	movs	r1, #10
    864a:	mov	r4, r0
    864c:	bl	7f90 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    8650:	cbz	r0, 868e <SharedSpiCard::readCID(cid_t*)+0x4e>
    m_errorCode = code;
    8652:	movs	r2, #28
  if (m_spiActive) {
    8654:	ldrb	r3, [r4, #19]
    8656:	strb	r2, [r4, #18]
    8658:	cbz	r3, 8686 <SharedSpiCard::readCID(cid_t*)+0x46>
    m_spiDriver.send(data);
    865a:	adds	r5, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    865c:	ldrb	r0, [r4, #17]
    865e:	movs	r1, #1
    8660:	bl	b098 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    8664:	movs	r1, #255	; 0xff
    8666:	mov	r0, r5
    8668:	bl	b02c <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    866c:	mov	r0, r5
    866e:	bl	af98 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    8672:	movs	r3, #0
  return false;
    8674:	mov	r5, r3
    m_spiActive = false;
    8676:	strb	r3, [r4, #19]
  bool readCID(cid_t* cid) { return readRegister(CMD10, cid); }
    8678:	mov	r0, r5
    867a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    867e:	movs	r2, #30
  if (m_spiActive) {
    8680:	ldrb	r3, [r4, #19]
    m_errorCode = code;
    8682:	strb	r2, [r4, #18]
    8684:	cbnz	r3, 86be <SharedSpiCard::readCID(cid_t*)+0x7e>
  return false;
    8686:	movs	r5, #0
  bool readCID(cid_t* cid) { return readRegister(CMD10, cid); }
    8688:	mov	r0, r5
    868a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    868e:	ldr	r7, [pc, #152]	; (8728 <SharedSpiCard::readCID(cid_t*)+0xe8>)
    m_spiDriver.send(data);
    8690:	adds	r6, r4, #4
    8692:	ldr	r5, [r7, #0]
  void set(uint16_t ms) { m_endTime = ms + millis16(); }
    8694:	add.w	r5, r5, #300	; 0x12c
    8698:	uxth	r5, r5
  explicit Timeout(uint16_t ms) { set(ms); }
    869a:	b.n	86a4 <SharedSpiCard::readCID(cid_t*)+0x64>
    869c:	ldr	r3, [r7, #0]
  bool timedOut() { return (int16_t)(m_endTime - millis16()) < 0; }
    869e:	subs	r3, r5, r3
    if (timeout.timedOut()) {
    86a0:	lsls	r3, r3, #16
    86a2:	bmi.n	867e <SharedSpiCard::readCID(cid_t*)+0x3e>
    return m_spiDriver.receive();
    86a4:	mov	r0, r6
    86a6:	bl	aff0 <SdSpiArduinoDriver::receive()>
  while ((m_status = spiReceive()) == 0XFF) {
    86aa:	cmp	r0, #255	; 0xff
    86ac:	strb	r0, [r4, #21]
    86ae:	beq.n	869c <SharedSpiCard::readCID(cid_t*)+0x5c>
  if (m_status != DATA_START_SECTOR) {
    86b0:	cmp	r0, #254	; 0xfe
    86b2:	beq.n	86dc <SharedSpiCard::readCID(cid_t*)+0x9c>
    86b4:	movs	r2, #25
  if (m_spiActive) {
    86b6:	ldrb	r3, [r4, #19]
    m_errorCode = code;
    86b8:	strb	r2, [r4, #18]
    86ba:	cmp	r3, #0
    86bc:	beq.n	8686 <SharedSpiCard::readCID(cid_t*)+0x46>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    86be:	movs	r1, #1
    86c0:	ldrb	r0, [r4, #17]
    86c2:	bl	b098 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    86c6:	movs	r1, #255	; 0xff
    86c8:	mov	r0, r6
  return false;
    86ca:	movs	r5, #0
    86cc:	bl	b02c <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    86d0:	mov	r0, r6
    86d2:	bl	af98 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    86d6:	movs	r3, #0
    86d8:	strb	r3, [r4, #19]
  if (m_spiActive) {
    86da:	b.n	8688 <SharedSpiCard::readCID(cid_t*)+0x48>
    return m_spiDriver.receive(buf, n);
    86dc:	movs	r2, #16
    86de:	mov	r1, r8
    86e0:	mov	r0, r6
    86e2:	bl	b008 <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>
    86e6:	mov	r7, r0
  if ((m_status = spiReceive(dst, count))) {
    86e8:	strb	r0, [r4, #21]
    86ea:	cbz	r0, 86f0 <SharedSpiCard::readCID(cid_t*)+0xb0>
    86ec:	movs	r2, #38	; 0x26
    86ee:	b.n	8680 <SharedSpiCard::readCID(cid_t*)+0x40>
    return m_spiDriver.receive();
    86f0:	mov	r0, r6
    86f2:	bl	aff0 <SdSpiArduinoDriver::receive()>
    86f6:	mov	r0, r6
    86f8:	bl	aff0 <SdSpiArduinoDriver::receive()>
  if (m_spiActive) {
    86fc:	ldrb	r5, [r4, #19]
    86fe:	cbnz	r5, 8708 <SharedSpiCard::readCID(cid_t*)+0xc8>
    8700:	movs	r5, #1
  bool readCID(cid_t* cid) { return readRegister(CMD10, cid); }
    8702:	mov	r0, r5
    8704:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    8708:	ldrb	r0, [r4, #17]
    870a:	movs	r1, #1
    870c:	bl	b098 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    8710:	movs	r1, #255	; 0xff
    8712:	mov	r0, r6
    8714:	bl	b02c <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    8718:	mov	r0, r6
    871a:	bl	af98 <SdSpiArduinoDriver::deactivate()>
  bool readCID(cid_t* cid) { return readRegister(CMD10, cid); }
    871e:	mov	r0, r5
    m_spiActive = false;
    8720:	strb	r7, [r4, #19]
    8722:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8726:	nop
    8728:	.word	0x2001598c

0000872c <SharedSpiCard::readCSD(csd_t*)>:
  bool readCSD(csd_t* csd) { return readRegister(CMD9, csd); }
    872c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (cardCommand(cmd, 0)) {
    8730:	movs	r2, #0
    8732:	mov	r8, r1
    8734:	movs	r1, #9
    8736:	mov	r4, r0
    8738:	bl	7f90 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    873c:	cbz	r0, 877a <SharedSpiCard::readCSD(csd_t*)+0x4e>
    m_errorCode = code;
    873e:	movs	r2, #28
  if (m_spiActive) {
    8740:	ldrb	r3, [r4, #19]
    8742:	strb	r2, [r4, #18]
    8744:	cbz	r3, 8772 <SharedSpiCard::readCSD(csd_t*)+0x46>
    m_spiDriver.send(data);
    8746:	adds	r5, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    8748:	ldrb	r0, [r4, #17]
    874a:	movs	r1, #1
    874c:	bl	b098 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    8750:	movs	r1, #255	; 0xff
    8752:	mov	r0, r5
    8754:	bl	b02c <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    8758:	mov	r0, r5
    875a:	bl	af98 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    875e:	movs	r3, #0
  return false;
    8760:	mov	r5, r3
    m_spiActive = false;
    8762:	strb	r3, [r4, #19]
  bool readCSD(csd_t* csd) { return readRegister(CMD9, csd); }
    8764:	mov	r0, r5
    8766:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    876a:	movs	r2, #30
  if (m_spiActive) {
    876c:	ldrb	r3, [r4, #19]
    m_errorCode = code;
    876e:	strb	r2, [r4, #18]
    8770:	cbnz	r3, 87aa <SharedSpiCard::readCSD(csd_t*)+0x7e>
  return false;
    8772:	movs	r5, #0
  bool readCSD(csd_t* csd) { return readRegister(CMD9, csd); }
    8774:	mov	r0, r5
    8776:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    877a:	ldr	r7, [pc, #152]	; (8814 <SharedSpiCard::readCSD(csd_t*)+0xe8>)
    m_spiDriver.send(data);
    877c:	adds	r6, r4, #4
    877e:	ldr	r5, [r7, #0]
  void set(uint16_t ms) { m_endTime = ms + millis16(); }
    8780:	add.w	r5, r5, #300	; 0x12c
    8784:	uxth	r5, r5
  explicit Timeout(uint16_t ms) { set(ms); }
    8786:	b.n	8790 <SharedSpiCard::readCSD(csd_t*)+0x64>
    8788:	ldr	r3, [r7, #0]
  bool timedOut() { return (int16_t)(m_endTime - millis16()) < 0; }
    878a:	subs	r3, r5, r3
    if (timeout.timedOut()) {
    878c:	lsls	r3, r3, #16
    878e:	bmi.n	876a <SharedSpiCard::readCSD(csd_t*)+0x3e>
    return m_spiDriver.receive();
    8790:	mov	r0, r6
    8792:	bl	aff0 <SdSpiArduinoDriver::receive()>
  while ((m_status = spiReceive()) == 0XFF) {
    8796:	cmp	r0, #255	; 0xff
    8798:	strb	r0, [r4, #21]
    879a:	beq.n	8788 <SharedSpiCard::readCSD(csd_t*)+0x5c>
  if (m_status != DATA_START_SECTOR) {
    879c:	cmp	r0, #254	; 0xfe
    879e:	beq.n	87c8 <SharedSpiCard::readCSD(csd_t*)+0x9c>
    87a0:	movs	r2, #25
  if (m_spiActive) {
    87a2:	ldrb	r3, [r4, #19]
    m_errorCode = code;
    87a4:	strb	r2, [r4, #18]
    87a6:	cmp	r3, #0
    87a8:	beq.n	8772 <SharedSpiCard::readCSD(csd_t*)+0x46>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    87aa:	movs	r1, #1
    87ac:	ldrb	r0, [r4, #17]
    87ae:	bl	b098 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    87b2:	movs	r1, #255	; 0xff
    87b4:	mov	r0, r6
  return false;
    87b6:	movs	r5, #0
    87b8:	bl	b02c <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    87bc:	mov	r0, r6
    87be:	bl	af98 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    87c2:	movs	r3, #0
    87c4:	strb	r3, [r4, #19]
  if (m_spiActive) {
    87c6:	b.n	8774 <SharedSpiCard::readCSD(csd_t*)+0x48>
    return m_spiDriver.receive(buf, n);
    87c8:	movs	r2, #16
    87ca:	mov	r1, r8
    87cc:	mov	r0, r6
    87ce:	bl	b008 <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>
    87d2:	mov	r7, r0
  if ((m_status = spiReceive(dst, count))) {
    87d4:	strb	r0, [r4, #21]
    87d6:	cbz	r0, 87dc <SharedSpiCard::readCSD(csd_t*)+0xb0>
    87d8:	movs	r2, #38	; 0x26
    87da:	b.n	876c <SharedSpiCard::readCSD(csd_t*)+0x40>
    return m_spiDriver.receive();
    87dc:	mov	r0, r6
    87de:	bl	aff0 <SdSpiArduinoDriver::receive()>
    87e2:	mov	r0, r6
    87e4:	bl	aff0 <SdSpiArduinoDriver::receive()>
  if (m_spiActive) {
    87e8:	ldrb	r5, [r4, #19]
    87ea:	cbnz	r5, 87f4 <SharedSpiCard::readCSD(csd_t*)+0xc8>
    87ec:	movs	r5, #1
  bool readCSD(csd_t* csd) { return readRegister(CMD9, csd); }
    87ee:	mov	r0, r5
    87f0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    87f4:	ldrb	r0, [r4, #17]
    87f6:	movs	r1, #1
    87f8:	bl	b098 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    87fc:	movs	r1, #255	; 0xff
    87fe:	mov	r0, r6
    8800:	bl	b02c <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    8804:	mov	r0, r6
    8806:	bl	af98 <SdSpiArduinoDriver::deactivate()>
  bool readCSD(csd_t* csd) { return readRegister(CMD9, csd); }
    880a:	mov	r0, r5
    m_spiActive = false;
    880c:	strb	r7, [r4, #19]
    880e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8812:	nop
    8814:	.word	0x2001598c

00008818 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
  }
  return SharedSpiCard::writeSector(sector, src);
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::writeSectors(uint32_t sector, const uint8_t* src,
                                    size_t ns) {
    8818:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    881c:	mov	sl, r3
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    881e:	ldrb	r3, [r0, #20]
                                    size_t ns) {
    8820:	sub	sp, #4
    8822:	mov	r7, r0
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    8824:	cmp	r3, #2
                                    size_t ns) {
    8826:	mov	r4, r1
    8828:	mov	r8, r2
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    882a:	beq.w	89c0 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x1a8>
    if (!writeStart(sector)) {
    882e:	ldr	r3, [r7, #0]
    8830:	ldr	r1, [pc, #516]	; (8a38 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x220>)
    8832:	ldr	r2, [r3, #100]	; 0x64
    8834:	cmp	r2, r1
    8836:	bne.w	89d4 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x1bc>
  if (type() != SD_CARD_TYPE_SDHC) {
    883a:	ldr	r3, [r3, #92]	; 0x5c
    883c:	ldr	r2, [pc, #508]	; (8a3c <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x224>)
    883e:	cmp	r3, r2
    8840:	bne.w	89e2 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x1ca>
  uint8_t type() const { return m_type; }
    8844:	ldrb	r0, [r7, #22]
    8846:	cmp	r0, #3
  if (cardCommand(CMD25, sector)) {
    8848:	mov.w	r1, #25
    884c:	mov	r0, r7
    sector <<= 9;
    884e:	ite	ne
    8850:	lslne	r2, r4, #9
    8852:	moveq	r2, r4
  if (cardCommand(CMD25, sector)) {
    8854:	bl	7f90 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    8858:	cmp	r0, #0
    885a:	bne.n	88e0 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0xc8>
  m_state = WRITE_STATE;
    885c:	movs	r3, #2
    885e:	strb	r3, [r7, #20]
      goto fail;
    }
    m_curSector = sector;
    8860:	str	r4, [r7, #24]
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    8862:	cmp.w	sl, #0
    8866:	beq.n	8922 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x10a>
    if (!writeStart(sector)) {
    8868:	mov.w	r9, #0
    886c:	ldr	r6, [pc, #464]	; (8a40 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x228>)
    m_spiDriver.send(data);
    886e:	adds	r5, r7, #4
    if (!writeData(src)) {
    8870:	ldr	r3, [r7, #0]
    8872:	ldr	r2, [pc, #464]	; (8a44 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x22c>)
    8874:	ldr	r3, [r3, #96]	; 0x60
    8876:	cmp	r3, r2
    8878:	bne.n	890a <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0xf2>
    887a:	ldr	r4, [r6, #0]
  void set(uint16_t ms) { m_endTime = ms + millis16(); }
    887c:	add.w	r4, r4, #600	; 0x258
    8880:	uxth	r4, r4
  explicit Timeout(uint16_t ms) { set(ms); }
    8882:	b.n	888c <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x74>
    8884:	ldr	r3, [r6, #0]
  bool timedOut() { return (int16_t)(m_endTime - millis16()) < 0; }
    8886:	subs	r3, r4, r3
    if (timeout.timedOut()) {
    8888:	lsls	r2, r3, #16
    888a:	bmi.n	8976 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x15e>
    return m_spiDriver.receive();
    888c:	mov	r0, r5
    888e:	bl	aff0 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    8892:	cmp	r0, #255	; 0xff
    8894:	mov	fp, r0
    8896:	bne.n	8884 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x6c>
    m_spiDriver.send(data);
    8898:	movs	r1, #252	; 0xfc
    889a:	mov	r0, r5
    889c:	bl	b02c <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.send(buf, n);
    88a0:	mov.w	r2, #512	; 0x200
    88a4:	mov	r1, r8
    88a6:	mov	r0, r5
    88a8:	bl	b040 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>
    m_spiDriver.send(data);
    88ac:	mov	r1, fp
    88ae:	mov	r0, r5
    88b0:	bl	b02c <SdSpiArduinoDriver::send(unsigned char)>
    88b4:	mov	r1, fp
    88b6:	mov	r0, r5
    88b8:	bl	b02c <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
    88bc:	mov	r0, r5
    88be:	bl	aff0 <SdSpiArduinoDriver::receive()>
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    88c2:	and.w	r2, r0, #31
  m_status = spiReceive();
    88c6:	strb	r0, [r7, #21]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    88c8:	cmp	r2, #5
    88ca:	beq.n	8914 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0xfc>
    m_errorCode = code;
    88cc:	movs	r1, #33	; 0x21
  if (m_spiActive) {
    88ce:	ldrb	r2, [r7, #19]
    88d0:	strb	r1, [r7, #18]
    88d2:	cmp	r2, #0
    88d4:	bne.n	89a4 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x18c>
  }
  m_curSector += ns;
  return m_dedicatedSpi ? true : writeStop();

fail:
  return false;
    88d6:	movs	r5, #0
}
    88d8:	mov	r0, r5
    88da:	add	sp, #4
    88dc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    88e0:	movs	r2, #14
  if (m_spiActive) {
    88e2:	ldrb	r3, [r7, #19]
    88e4:	strb	r2, [r7, #18]
    88e6:	cmp	r3, #0
    88e8:	beq.n	88d6 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0xbe>
    m_spiDriver.send(data);
    88ea:	adds	r4, r7, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    88ec:	movs	r1, #1
    88ee:	ldrb	r0, [r7, #17]
    88f0:	bl	b098 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    88f4:	movs	r1, #255	; 0xff
    88f6:	mov	r0, r4
    88f8:	bl	b02c <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    88fc:	mov	r0, r4
    88fe:	bl	af98 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    8902:	movs	r3, #0
  return false;
    8904:	mov	r5, r3
    m_spiActive = false;
    8906:	strb	r3, [r7, #19]
    8908:	b.n	88d8 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0xc0>
    if (!writeData(src)) {
    890a:	mov	r1, r8
    890c:	mov	r0, r7
    890e:	blx	r3
    8910:	cmp	r0, #0
    8912:	beq.n	88d6 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0xbe>
  for (size_t i = 0; i < ns; i++, src += 512) {
    8914:	add.w	r9, r9, #1
    8918:	add.w	r8, r8, #512	; 0x200
    891c:	cmp	sl, r9
    891e:	bne.n	8870 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x58>
  m_curSector += ns;
    8920:	ldr	r4, [r7, #24]
    8922:	add	r4, sl
  return m_dedicatedSpi ? true : writeStop();
    8924:	ldrb	r5, [r7, #28]
  m_curSector += ns;
    8926:	str	r4, [r7, #24]
  return m_dedicatedSpi ? true : writeStop();
    8928:	cmp	r5, #0
    892a:	bne.n	88d8 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0xc0>
    892c:	ldr	r3, [r7, #0]
    892e:	ldr	r2, [pc, #280]	; (8a48 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x230>)
    8930:	ldr	r3, [r3, #104]	; 0x68
    8932:	cmp	r3, r2
    8934:	bne.n	8a2c <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x214>
    8936:	ldr.w	r9, [pc, #264]	; 8a40 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x228>
    m_spiDriver.send(data);
    893a:	add.w	r8, r7, #4
    893e:	ldr.w	r6, [r9]
  void set(uint16_t ms) { m_endTime = ms + millis16(); }
    8942:	add.w	r6, r6, #600	; 0x258
    8946:	uxth	r6, r6
  explicit Timeout(uint16_t ms) { set(ms); }
    8948:	b.n	8954 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x13c>
    894a:	ldr.w	r3, [r9]
  bool timedOut() { return (int16_t)(m_endTime - millis16()) < 0; }
    894e:	subs	r3, r6, r3
    if (timeout.timedOut()) {
    8950:	lsls	r3, r3, #16
    8952:	bmi.n	89e8 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x1d0>
    return m_spiDriver.receive();
    8954:	mov	r0, r8
    8956:	bl	aff0 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    895a:	cmp	r0, #255	; 0xff
    895c:	mov	r4, r0
    895e:	bne.n	894a <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x132>
    m_spiDriver.send(data);
    8960:	movs	r1, #253	; 0xfd
    8962:	mov	r0, r8
    8964:	bl	b02c <SdSpiArduinoDriver::send(unsigned char)>
  if (m_spiActive) {
    8968:	ldrb	r3, [r7, #19]
    896a:	cmp	r3, #0
    896c:	bne.n	8a10 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x1f8>
  m_state = IDLE_STATE;
    896e:	movs	r3, #0
  return true;
    8970:	movs	r5, #1
  m_state = IDLE_STATE;
    8972:	strb	r3, [r7, #20]
  return true;
    8974:	b.n	88d8 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0xc0>
    m_errorCode = code;
    8976:	movs	r2, #37	; 0x25
  if (m_spiActive) {
    8978:	ldrb	r3, [r7, #19]
    897a:	strb	r2, [r7, #18]
    897c:	cmp	r3, #0
    897e:	beq.n	88d6 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0xbe>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    8980:	ldrb	r0, [r7, #17]
    8982:	movs	r1, #1
    8984:	bl	b098 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    8988:	movs	r1, #255	; 0xff
    898a:	mov	r0, r5
    898c:	bl	b02c <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    8990:	mov	r0, r5
    8992:	bl	af98 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    8996:	movs	r3, #0
  return false;
    8998:	mov	r5, r3
    m_spiActive = false;
    899a:	strb	r3, [r7, #19]
}
    899c:	mov	r0, r5
    899e:	add	sp, #4
    89a0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    89a4:	movs	r1, #1
    89a6:	ldrb	r0, [r7, #17]
    89a8:	bl	b098 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    89ac:	mov	r1, fp
    89ae:	mov	r0, r5
    89b0:	bl	b02c <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    89b4:	mov	r0, r5
    89b6:	bl	af98 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    89ba:	movs	r3, #0
    89bc:	strb	r3, [r7, #19]
    89be:	b.n	88d6 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0xbe>
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    89c0:	ldr	r3, [r0, #24]
    89c2:	cmp	r3, r1
    89c4:	beq.w	8862 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x4a>
    if (!writeStart(sector)) {
    89c8:	ldr	r3, [r7, #0]
    89ca:	ldr	r1, [pc, #108]	; (8a38 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x220>)
    89cc:	ldr	r2, [r3, #100]	; 0x64
    89ce:	cmp	r2, r1
    89d0:	beq.w	883a <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x22>
    89d4:	mov	r1, r4
    89d6:	mov	r0, r7
    89d8:	blx	r2
    89da:	cmp	r0, #0
    89dc:	bne.w	8860 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x48>
    89e0:	b.n	88d6 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0xbe>
  if (type() != SD_CARD_TYPE_SDHC) {
    89e2:	mov	r0, r7
    89e4:	blx	r3
    89e6:	b.n	8846 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2e>
    m_errorCode = code;
    89e8:	movs	r2, #31
  if (m_spiActive) {
    89ea:	ldrb	r3, [r7, #19]
    89ec:	strb	r2, [r7, #18]
    89ee:	cmp	r3, #0
    89f0:	beq.w	88d6 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0xbe>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    89f4:	movs	r1, #1
    89f6:	ldrb	r0, [r7, #17]
    89f8:	bl	b098 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    89fc:	movs	r1, #255	; 0xff
    89fe:	mov	r0, r8
    8a00:	bl	b02c <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    8a04:	mov	r0, r8
    8a06:	bl	af98 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    8a0a:	movs	r3, #0
    8a0c:	strb	r3, [r7, #19]
}
    8a0e:	b.n	88d8 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0xc0>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    8a10:	movs	r1, #1
    8a12:	ldrb	r0, [r7, #17]
    8a14:	bl	b098 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    8a18:	mov	r1, r4
    8a1a:	mov	r0, r8
    8a1c:	bl	b02c <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    8a20:	mov	r0, r8
    8a22:	bl	af98 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    8a26:	movs	r3, #0
    8a28:	strb	r3, [r7, #19]
}
    8a2a:	b.n	896e <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x156>
  return m_dedicatedSpi ? true : writeStop();
    8a2c:	mov	r0, r7
}
    8a2e:	add	sp, #4
    8a30:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  return m_dedicatedSpi ? true : writeStop();
    8a34:	bx	r3
    8a36:	nop
    8a38:	.word	0x000084a9
    8a3c:	.word	0x00007d99
    8a40:	.word	0x2001598c
    8a44:	.word	0x00007ec5
    8a48:	.word	0x00007db9

00008a4c <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)>:
  if (m_dedicatedSpi) {
    8a4c:	ldrb	r3, [r0, #28]
    8a4e:	cmp	r3, #0
    8a50:	beq.n	8aca <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)+0x7e>
    return writeSectors(sector, src, 1);
    8a52:	ldr	r3, [r0, #0]
    8a54:	ldr.w	ip, [pc, #196]	; 8b1c <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)+0xd0>
bool DedicatedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    8a58:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return writeSectors(sector, src, 1);
    8a5c:	ldr	r7, [r3, #36]	; 0x24
    8a5e:	mov	r4, r0
    8a60:	cmp	r7, ip
    8a62:	bne.n	8ad6 <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)+0x8a>
    8a64:	mov	r5, r2
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    8a66:	ldrb	r2, [r0, #20]
    8a68:	mov	r6, r1
    8a6a:	cmp	r2, #2
    8a6c:	beq.n	8ace <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)+0x82>
    if (!writeStart(sector)) {
    8a6e:	ldr	r2, [r3, #100]	; 0x64
    8a70:	ldr	r1, [pc, #160]	; (8b14 <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)+0xc8>)
    8a72:	cmp	r2, r1
    8a74:	bne.n	8ae0 <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)+0x94>
  if (type() != SD_CARD_TYPE_SDHC) {
    8a76:	ldr	r3, [r3, #92]	; 0x5c
    8a78:	ldr	r2, [pc, #156]	; (8b18 <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)+0xcc>)
    8a7a:	cmp	r3, r2
    8a7c:	bne.n	8aec <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)+0xa0>
  uint8_t type() const { return m_type; }
    8a7e:	ldrb	r0, [r4, #22]
    8a80:	cmp	r0, #3
  if (cardCommand(CMD25, sector)) {
    8a82:	mov.w	r1, #25
    8a86:	mov	r0, r4
    sector <<= 9;
    8a88:	ite	ne
    8a8a:	lslne	r2, r6, #9
    8a8c:	moveq	r2, r6
  if (cardCommand(CMD25, sector)) {
    8a8e:	bl	7f90 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    8a92:	cbnz	r0, 8abc <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)+0x70>
  m_state = WRITE_STATE;
    8a94:	movs	r3, #2
    8a96:	strb	r3, [r4, #20]
    if (!writeData(src)) {
    8a98:	ldr	r3, [r4, #0]
    m_curSector = sector;
    8a9a:	str	r6, [r4, #24]
    if (!writeData(src)) {
    8a9c:	ldr	r3, [r3, #96]	; 0x60
    8a9e:	mov	r1, r5
    8aa0:	mov	r0, r4
    8aa2:	blx	r3
    8aa4:	cbz	r0, 8ac4 <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)+0x78>
  m_curSector += ns;
    8aa6:	ldr	r3, [r4, #24]
  return m_dedicatedSpi ? true : writeStop();
    8aa8:	ldrb	r0, [r4, #28]
  m_curSector += ns;
    8aaa:	adds	r3, #1
    8aac:	str	r3, [r4, #24]
  return m_dedicatedSpi ? true : writeStop();
    8aae:	cbnz	r0, 8ac6 <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)+0x7a>
    8ab0:	ldr	r3, [r4, #0]
    8ab2:	mov	r0, r4
    8ab4:	ldr	r3, [r3, #104]	; 0x68
}
    8ab6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return m_dedicatedSpi ? true : writeStop();
    8aba:	bx	r3
    m_errorCode = code;
    8abc:	movs	r2, #14
  if (m_spiActive) {
    8abe:	ldrb	r3, [r4, #19]
    8ac0:	strb	r2, [r4, #18]
    8ac2:	cbnz	r3, 8af2 <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)+0xa6>
  return false;
    8ac4:	movs	r0, #0
}
    8ac6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return SharedSpiCard::writeSector(sector, src);
    8aca:	b.w	8510 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)>
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    8ace:	ldr	r2, [r0, #24]
    8ad0:	cmp	r1, r2
    8ad2:	bne.n	8a6e <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)+0x22>
    8ad4:	b.n	8a9c <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)+0x50>
    return writeSectors(sector, src, 1);
    8ad6:	mov	ip, r7
    8ad8:	movs	r3, #1
}
    8ada:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return writeSectors(sector, src, 1);
    8ade:	bx	ip
    if (!writeStart(sector)) {
    8ae0:	mov	r1, r6
    8ae2:	mov	r0, r4
    8ae4:	blx	r2
    8ae6:	cmp	r0, #0
    8ae8:	bne.n	8a98 <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)+0x4c>
    8aea:	b.n	8ac4 <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)+0x78>
  if (type() != SD_CARD_TYPE_SDHC) {
    8aec:	mov	r0, r4
    8aee:	blx	r3
    8af0:	b.n	8a80 <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)+0x34>
    m_spiDriver.send(data);
    8af2:	adds	r5, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    8af4:	movs	r1, #1
    8af6:	ldrb	r0, [r4, #17]
    8af8:	bl	b098 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    8afc:	movs	r1, #255	; 0xff
    8afe:	mov	r0, r5
    8b00:	bl	b02c <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    8b04:	mov	r0, r5
    8b06:	bl	af98 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    8b0a:	movs	r3, #0
  return false;
    8b0c:	mov	r0, r3
    m_spiActive = false;
    8b0e:	strb	r3, [r4, #19]
    8b10:	b.n	8ac6 <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)+0x7a>
    8b12:	nop
    8b14:	.word	0x000084a9
    8b18:	.word	0x00007d99
    8b1c:	.word	0x00008819

00008b20 <DedicatedSpiCard::setDedicatedSpi(bool)>:
  if (!syncDevice()) {
    8b20:	ldr	r3, [r0, #0]
bool DedicatedSpiCard::setDedicatedSpi(bool value) {
    8b22:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (!syncDevice()) {
    8b26:	ldr	r2, [r3, #28]
bool DedicatedSpiCard::setDedicatedSpi(bool value) {
    8b28:	mov	r6, r1
    8b2a:	ldr	r1, [pc, #280]	; (8c44 <DedicatedSpiCard::setDedicatedSpi(bool)+0x124>)
    8b2c:	sub	sp, #12
    8b2e:	mov	r5, r0
    8b30:	cmp	r2, r1
    8b32:	bne.n	8b8e <DedicatedSpiCard::setDedicatedSpi(bool)+0x6e>
  if (m_state == WRITE_STATE) {
    8b34:	ldrb	r4, [r0, #20]
    8b36:	cmp	r4, #2
    8b38:	beq.n	8b48 <DedicatedSpiCard::setDedicatedSpi(bool)+0x28>
  if (m_state == READ_STATE) {
    8b3a:	cmp	r4, #1
    8b3c:	beq.n	8b9c <DedicatedSpiCard::setDedicatedSpi(bool)+0x7c>
  return true;
    8b3e:	movs	r0, #1
  m_dedicatedSpi = value;
    8b40:	strb	r6, [r5, #28]
}
    8b42:	add	sp, #12
    8b44:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  return writeStop();
    8b48:	ldr	r3, [r3, #104]	; 0x68
    8b4a:	ldr	r2, [pc, #252]	; (8c48 <DedicatedSpiCard::setDedicatedSpi(bool)+0x128>)
    8b4c:	cmp	r3, r2
    8b4e:	bne.n	8bfa <DedicatedSpiCard::setDedicatedSpi(bool)+0xda>
    8b50:	ldr.w	r9, [pc, #248]	; 8c4c <DedicatedSpiCard::setDedicatedSpi(bool)+0x12c>
    return m_spiDriver.receive();
    8b54:	add.w	r8, r0, #4
    8b58:	ldr.w	r7, [r9]
  void set(uint16_t ms) { m_endTime = ms + millis16(); }
    8b5c:	add.w	r7, r7, #600	; 0x258
    8b60:	uxth	r7, r7
  explicit Timeout(uint16_t ms) { set(ms); }
    8b62:	b.n	8b6e <DedicatedSpiCard::setDedicatedSpi(bool)+0x4e>
    8b64:	ldr.w	r3, [r9]
  bool timedOut() { return (int16_t)(m_endTime - millis16()) < 0; }
    8b68:	subs	r3, r7, r3
    if (timeout.timedOut()) {
    8b6a:	lsls	r3, r3, #16
    8b6c:	bmi.n	8bd2 <DedicatedSpiCard::setDedicatedSpi(bool)+0xb2>
    8b6e:	mov	r0, r8
    8b70:	bl	aff0 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    8b74:	cmp	r0, #255	; 0xff
    8b76:	mov	r4, r0
    8b78:	bne.n	8b64 <DedicatedSpiCard::setDedicatedSpi(bool)+0x44>
    m_spiDriver.send(data);
    8b7a:	movs	r1, #253	; 0xfd
    8b7c:	mov	r0, r8
    8b7e:	bl	b02c <SdSpiArduinoDriver::send(unsigned char)>
  if (m_spiActive) {
    8b82:	ldrb	r3, [r5, #19]
    8b84:	cmp	r3, #0
    8b86:	bne.n	8c28 <DedicatedSpiCard::setDedicatedSpi(bool)+0x108>
  m_state = IDLE_STATE;
    8b88:	movs	r3, #0
    8b8a:	strb	r3, [r5, #20]
  return true;
    8b8c:	b.n	8b3e <DedicatedSpiCard::setDedicatedSpi(bool)+0x1e>
  if (!syncDevice()) {
    8b8e:	blx	r2
    8b90:	cmp	r0, #0
    8b92:	bne.n	8b3e <DedicatedSpiCard::setDedicatedSpi(bool)+0x1e>
    return false;
    8b94:	movs	r0, #0
}
    8b96:	add	sp, #12
    8b98:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  m_state = IDLE_STATE;
    8b9c:	mov.w	r8, #0
  if (cardCommand(CMD12, 0)) {
    8ba0:	movs	r1, #12
    8ba2:	mov	r2, r8
  m_state = IDLE_STATE;
    8ba4:	strb.w	r8, [r0, #20]
  if (cardCommand(CMD12, 0)) {
    8ba8:	bl	7f90 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    8bac:	mov	r7, r0
    8bae:	cbnz	r0, 8bfe <DedicatedSpiCard::setDedicatedSpi(bool)+0xde>
  if (m_spiActive) {
    8bb0:	ldrb	r3, [r5, #19]
    8bb2:	cmp	r3, #0
    8bb4:	beq.n	8b3e <DedicatedSpiCard::setDedicatedSpi(bool)+0x1e>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    8bb6:	mov	r1, r4
    8bb8:	ldrb	r0, [r5, #17]
    8bba:	bl	b098 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    8bbe:	adds	r0, r5, #4
    8bc0:	movs	r1, #255	; 0xff
    8bc2:	str	r0, [sp, #4]
    8bc4:	bl	b02c <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    8bc8:	ldr	r0, [sp, #4]
    8bca:	bl	af98 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    8bce:	strb	r7, [r5, #19]
    8bd0:	b.n	8b3e <DedicatedSpiCard::setDedicatedSpi(bool)+0x1e>
    m_errorCode = code;
    8bd2:	movs	r2, #31
  if (m_spiActive) {
    8bd4:	ldrb	r3, [r5, #19]
    8bd6:	strb	r2, [r5, #18]
    8bd8:	cmp	r3, #0
    8bda:	beq.n	8b94 <DedicatedSpiCard::setDedicatedSpi(bool)+0x74>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    8bdc:	movs	r1, #1
    8bde:	ldrb	r0, [r5, #17]
    8be0:	bl	b098 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    8be4:	movs	r1, #255	; 0xff
    8be6:	mov	r0, r8
    8be8:	bl	b02c <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    8bec:	mov	r0, r8
    8bee:	bl	af98 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    8bf2:	movs	r3, #0
    return false;
    8bf4:	mov	r0, r3
    m_spiActive = false;
    8bf6:	strb	r3, [r5, #19]
    8bf8:	b.n	8b42 <DedicatedSpiCard::setDedicatedSpi(bool)+0x22>
  return writeStop();
    8bfa:	blx	r3
    8bfc:	b.n	8b90 <DedicatedSpiCard::setDedicatedSpi(bool)+0x70>
    m_errorCode = code;
    8bfe:	movs	r2, #9
  if (m_spiActive) {
    8c00:	ldrb	r3, [r5, #19]
    8c02:	strb	r2, [r5, #18]
    8c04:	cmp	r3, #0
    8c06:	beq.n	8b94 <DedicatedSpiCard::setDedicatedSpi(bool)+0x74>
    m_spiDriver.send(data);
    8c08:	adds	r6, r5, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    8c0a:	mov	r1, r4
    8c0c:	ldrb	r0, [r5, #17]
    8c0e:	bl	b098 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    8c12:	movs	r1, #255	; 0xff
    8c14:	mov	r0, r6
    8c16:	bl	b02c <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    8c1a:	mov	r0, r6
    8c1c:	bl	af98 <SdSpiArduinoDriver::deactivate()>
    return false;
    8c20:	mov	r0, r8
    m_spiActive = false;
    8c22:	strb.w	r8, [r5, #19]
    8c26:	b.n	8b42 <DedicatedSpiCard::setDedicatedSpi(bool)+0x22>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    8c28:	movs	r1, #1
    8c2a:	ldrb	r0, [r5, #17]
    8c2c:	bl	b098 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    8c30:	mov	r1, r4
    8c32:	mov	r0, r8
    8c34:	bl	b02c <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    8c38:	mov	r0, r8
    8c3a:	bl	af98 <SdSpiArduinoDriver::deactivate()>
    8c3e:	movs	r3, #0
    8c40:	strb	r3, [r5, #19]
}
    8c42:	b.n	8b88 <DedicatedSpiCard::setDedicatedSpi(bool)+0x68>
    8c44:	.word	0x00008dd1
    8c48:	.word	0x00007db9
    8c4c:	.word	0x2001598c

00008c50 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
bool DedicatedSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    8c50:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8c54:	mov	sl, r3
  if (sdState() != READ_STATE || sector != m_curSector) {
    8c56:	ldrb	r3, [r0, #20]
bool DedicatedSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    8c58:	sub	sp, #8
    8c5a:	mov	r5, r0
  if (sdState() != READ_STATE || sector != m_curSector) {
    8c5c:	cmp	r3, #1
bool DedicatedSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    8c5e:	mov	r4, r1
    8c60:	mov	r9, r2
  if (sdState() != READ_STATE || sector != m_curSector) {
    8c62:	bne.n	8c6a <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x1a>
    8c64:	ldr	r3, [r0, #24]
    8c66:	cmp	r3, r1
    8c68:	beq.n	8c92 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x42>
  if (type() != SD_CARD_TYPE_SDHC) {
    8c6a:	ldr	r3, [r5, #0]
    8c6c:	ldr	r2, [pc, #344]	; (8dc8 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x178>)
    8c6e:	ldr	r3, [r3, #92]	; 0x5c
    8c70:	cmp	r3, r2
    8c72:	bne.n	8d68 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x118>
  uint8_t type() const { return m_type; }
    8c74:	ldrb	r0, [r5, #22]
    8c76:	cmp	r0, #3
  if (cardCommand(CMD18, sector)) {
    8c78:	mov.w	r1, #18
    8c7c:	mov	r0, r5
    sector <<= 9;
    8c7e:	ite	ne
    8c80:	lslne	r2, r4, #9
    8c82:	moveq	r2, r4
  if (cardCommand(CMD18, sector)) {
    8c84:	bl	7f90 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    8c88:	cmp	r0, #0
    8c8a:	bne.n	8d3e <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0xee>
  m_state = READ_STATE;
    8c8c:	movs	r3, #1
    m_curSector = sector;
    8c8e:	str	r4, [r5, #24]
  m_state = READ_STATE;
    8c90:	strb	r3, [r5, #20]
  for (size_t i = 0; i < ns; i++, dst += 512) {
    8c92:	cmp.w	sl, #0
    8c96:	beq.n	8d30 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0xe0>
    m_spiDriver.send(data);
    8c98:	adds	r6, r5, #4
    8c9a:	mov.w	r8, #0
    8c9e:	ldr	r7, [pc, #300]	; (8dcc <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x17c>)
    8ca0:	ldr	r4, [r7, #0]
  void set(uint16_t ms) { m_endTime = ms + millis16(); }
    8ca2:	add.w	r4, r4, #300	; 0x12c
    8ca6:	uxth	r4, r4
  explicit Timeout(uint16_t ms) { set(ms); }
    8ca8:	b.n	8cb2 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x62>
    8caa:	ldr	r3, [r7, #0]
  bool timedOut() { return (int16_t)(m_endTime - millis16()) < 0; }
    8cac:	subs	r3, r4, r3
    if (timeout.timedOut()) {
    8cae:	lsls	r3, r3, #16
    8cb0:	bmi.n	8cd4 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x84>
    return m_spiDriver.receive();
    8cb2:	mov	r0, r6
    8cb4:	bl	aff0 <SdSpiArduinoDriver::receive()>
  while ((m_status = spiReceive()) == 0XFF) {
    8cb8:	cmp	r0, #255	; 0xff
    8cba:	strb	r0, [r5, #21]
    8cbc:	beq.n	8caa <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x5a>
  if (m_status != DATA_START_SECTOR) {
    8cbe:	cmp	r0, #254	; 0xfe
    8cc0:	beq.n	8d02 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0xb2>
    8cc2:	movs	r2, #25
  if (m_spiActive) {
    8cc4:	ldrb	r3, [r5, #19]
    m_errorCode = code;
    8cc6:	strb	r2, [r5, #18]
    8cc8:	cbnz	r3, 8cde <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x8e>
  return false;
    8cca:	movs	r4, #0
}
    8ccc:	mov	r0, r4
    8cce:	add	sp, #8
    8cd0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8cd4:	movs	r2, #30
  if (m_spiActive) {
    8cd6:	ldrb	r3, [r5, #19]
    8cd8:	strb	r2, [r5, #18]
    8cda:	cmp	r3, #0
    8cdc:	beq.n	8cca <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x7a>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    8cde:	ldrb	r0, [r5, #17]
    8ce0:	movs	r1, #1
    8ce2:	bl	b098 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    8ce6:	movs	r1, #255	; 0xff
    8ce8:	mov	r0, r6
    8cea:	bl	b02c <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    8cee:	mov	r0, r6
    8cf0:	bl	af98 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    8cf4:	movs	r3, #0
  return false;
    8cf6:	mov	r4, r3
    m_spiActive = false;
    8cf8:	strb	r3, [r5, #19]
}
    8cfa:	mov	r0, r4
    8cfc:	add	sp, #8
    8cfe:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return m_spiDriver.receive(buf, n);
    8d02:	mov.w	r2, #512	; 0x200
    8d06:	mov	r1, r9
    8d08:	mov	r0, r6
    8d0a:	bl	b008 <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>
  if ((m_status = spiReceive(dst, count))) {
    8d0e:	strb	r0, [r5, #21]
    8d10:	cbz	r0, 8d16 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0xc6>
    8d12:	movs	r2, #38	; 0x26
    8d14:	b.n	8cc4 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x74>
    return m_spiDriver.receive();
    8d16:	mov	r0, r6
  for (size_t i = 0; i < ns; i++, dst += 512) {
    8d18:	add.w	r8, r8, #1
    8d1c:	bl	aff0 <SdSpiArduinoDriver::receive()>
    8d20:	mov	r0, r6
    8d22:	bl	aff0 <SdSpiArduinoDriver::receive()>
    8d26:	cmp	sl, r8
    8d28:	add.w	r9, r9, #512	; 0x200
    8d2c:	bne.n	8ca0 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x50>
  m_curSector += ns;
    8d2e:	ldr	r4, [r5, #24]
    8d30:	add.w	r3, r4, sl
  return m_dedicatedSpi ? true : readStop();
    8d34:	ldrb	r4, [r5, #28]
  m_curSector += ns;
    8d36:	str	r3, [r5, #24]
  return m_dedicatedSpi ? true : readStop();
    8d38:	cbz	r4, 8d6e <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x11e>
    8d3a:	movs	r4, #1
    8d3c:	b.n	8ccc <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x7c>
    m_errorCode = code;
    8d3e:	movs	r2, #12
  if (m_spiActive) {
    8d40:	ldrb	r3, [r5, #19]
    8d42:	strb	r2, [r5, #18]
    8d44:	cmp	r3, #0
    8d46:	beq.n	8cca <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x7a>
    m_spiDriver.send(data);
    8d48:	adds	r4, r5, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    8d4a:	movs	r1, #1
    8d4c:	ldrb	r0, [r5, #17]
    8d4e:	bl	b098 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    8d52:	mov	r0, r4
    8d54:	movs	r1, #255	; 0xff
    8d56:	bl	b02c <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    8d5a:	mov	r0, r4
    8d5c:	bl	af98 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    8d60:	movs	r3, #0
  return false;
    8d62:	mov	r4, r3
    m_spiActive = false;
    8d64:	strb	r3, [r5, #19]
    8d66:	b.n	8ccc <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x7c>
  if (type() != SD_CARD_TYPE_SDHC) {
    8d68:	mov	r0, r5
    8d6a:	blx	r3
    8d6c:	b.n	8c76 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x26>
  if (cardCommand(CMD12, 0)) {
    8d6e:	mov	r2, r4
    8d70:	movs	r1, #12
    8d72:	mov	r0, r5
  m_state = IDLE_STATE;
    8d74:	strb	r4, [r5, #20]
  if (cardCommand(CMD12, 0)) {
    8d76:	bl	7f90 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    8d7a:	mov	r6, r0
    8d7c:	cbnz	r0, 8da0 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x150>
  if (m_spiActive) {
    8d7e:	ldrb	r4, [r5, #19]
    8d80:	cmp	r4, #0
    8d82:	beq.n	8d3a <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0xea>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    8d84:	movs	r1, #1
    8d86:	ldrb	r0, [r5, #17]
    8d88:	bl	b098 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    8d8c:	adds	r0, r5, #4
    8d8e:	movs	r1, #255	; 0xff
    8d90:	str	r0, [sp, #4]
    8d92:	bl	b02c <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    8d96:	ldr	r0, [sp, #4]
    8d98:	bl	af98 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    8d9c:	strb	r6, [r5, #19]
}
    8d9e:	b.n	8ccc <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x7c>
    m_errorCode = code;
    8da0:	movs	r2, #9
  if (m_spiActive) {
    8da2:	ldrb	r3, [r5, #19]
    8da4:	strb	r2, [r5, #18]
    8da6:	cmp	r3, #0
    8da8:	beq.n	8cca <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x7a>
    m_spiDriver.send(data);
    8daa:	adds	r6, r5, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    8dac:	movs	r1, #1
    8dae:	ldrb	r0, [r5, #17]
    8db0:	bl	b098 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    8db4:	movs	r1, #255	; 0xff
    8db6:	mov	r0, r6
    8db8:	bl	b02c <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    8dbc:	mov	r0, r6
    8dbe:	bl	af98 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    8dc2:	strb	r4, [r5, #19]
}
    8dc4:	b.n	8ccc <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x7c>
    8dc6:	nop
    8dc8:	.word	0x00007d99
    8dcc:	.word	0x2001598c

00008dd0 <SharedSpiCard::syncDevice()>:
bool SharedSpiCard::syncDevice() {
    8dd0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (m_state == WRITE_STATE) {
    8dd4:	ldrb	r4, [r0, #20]
bool SharedSpiCard::syncDevice() {
    8dd6:	sub	sp, #8
    8dd8:	mov	r5, r0
  if (m_state == WRITE_STATE) {
    8dda:	cmp	r4, #2
    8ddc:	beq.n	8dec <SharedSpiCard::syncDevice()+0x1c>
  if (m_state == READ_STATE) {
    8dde:	cmp	r4, #1
    8de0:	beq.n	8e4c <SharedSpiCard::syncDevice()+0x7c>
  return true;
    8de2:	movs	r6, #1
}
    8de4:	mov	r0, r6
    8de6:	add	sp, #8
    8de8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return writeStop();
    8dec:	ldr	r3, [r0, #0]
    8dee:	ldr	r2, [pc, #256]	; (8ef0 <SharedSpiCard::syncDevice()+0x120>)
    8df0:	ldr	r3, [r3, #104]	; 0x68
    8df2:	cmp	r3, r2
    8df4:	bne.n	8e82 <SharedSpiCard::syncDevice()+0xb2>
    8df6:	ldr.w	r8, [pc, #252]	; 8ef4 <SharedSpiCard::syncDevice()+0x124>
    return m_spiDriver.receive();
    8dfa:	adds	r7, r0, #4
    8dfc:	ldr.w	r6, [r8]
  void set(uint16_t ms) { m_endTime = ms + millis16(); }
    8e00:	add.w	r6, r6, #600	; 0x258
    8e04:	uxth	r6, r6
  explicit Timeout(uint16_t ms) { set(ms); }
    8e06:	b.n	8e12 <SharedSpiCard::syncDevice()+0x42>
    8e08:	ldr.w	r3, [r8]
  bool timedOut() { return (int16_t)(m_endTime - millis16()) < 0; }
    8e0c:	subs	r3, r6, r3
    if (timeout.timedOut()) {
    8e0e:	lsls	r3, r3, #16
    8e10:	bmi.n	8e3a <SharedSpiCard::syncDevice()+0x6a>
    8e12:	mov	r0, r7
    8e14:	bl	aff0 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    8e18:	cmp	r0, #255	; 0xff
    8e1a:	mov	r4, r0
    8e1c:	bne.n	8e08 <SharedSpiCard::syncDevice()+0x38>
    m_spiDriver.send(data);
    8e1e:	movs	r1, #253	; 0xfd
    8e20:	mov	r0, r7
    8e22:	bl	b02c <SdSpiArduinoDriver::send(unsigned char)>
  if (m_spiActive) {
    8e26:	ldrb	r3, [r5, #19]
    8e28:	cmp	r3, #0
    8e2a:	bne.n	8ed2 <SharedSpiCard::syncDevice()+0x102>
  return true;
    8e2c:	movs	r6, #1
  m_state = IDLE_STATE;
    8e2e:	movs	r3, #0
}
    8e30:	mov	r0, r6
  m_state = IDLE_STATE;
    8e32:	strb	r3, [r5, #20]
}
    8e34:	add	sp, #8
    8e36:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_errorCode = code;
    8e3a:	movs	r2, #31
  if (m_spiActive) {
    8e3c:	ldrb	r3, [r5, #19]
    8e3e:	strb	r2, [r5, #18]
    8e40:	cbnz	r3, 8e8a <SharedSpiCard::syncDevice()+0xba>
}
    8e42:	movs	r6, #0
}
    8e44:	mov	r0, r6
    8e46:	add	sp, #8
    8e48:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_state = IDLE_STATE;
    8e4c:	mov.w	r8, #0
  if (cardCommand(CMD12, 0)) {
    8e50:	movs	r1, #12
    8e52:	mov	r2, r8
  m_state = IDLE_STATE;
    8e54:	strb.w	r8, [r0, #20]
  if (cardCommand(CMD12, 0)) {
    8e58:	bl	7f90 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    8e5c:	mov	r7, r0
    8e5e:	cbnz	r0, 8ea8 <SharedSpiCard::syncDevice()+0xd8>
  if (m_spiActive) {
    8e60:	ldrb	r6, [r5, #19]
    8e62:	cmp	r6, #0
    8e64:	beq.n	8de2 <SharedSpiCard::syncDevice()+0x12>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    8e66:	mov	r1, r4
    8e68:	ldrb	r0, [r5, #17]
    8e6a:	bl	b098 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    8e6e:	adds	r0, r5, #4
    8e70:	movs	r1, #255	; 0xff
    8e72:	str	r0, [sp, #4]
    8e74:	bl	b02c <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    8e78:	ldr	r0, [sp, #4]
    8e7a:	bl	af98 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    8e7e:	strb	r7, [r5, #19]
}
    8e80:	b.n	8de4 <SharedSpiCard::syncDevice()+0x14>
}
    8e82:	add	sp, #8
    8e84:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return writeStop();
    8e88:	bx	r3
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    8e8a:	movs	r1, #1
    8e8c:	ldrb	r0, [r5, #17]
    8e8e:	bl	b098 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    8e92:	movs	r1, #255	; 0xff
    8e94:	mov	r0, r7
    8e96:	bl	b02c <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    8e9a:	mov	r0, r7
    8e9c:	bl	af98 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    8ea0:	movs	r3, #0
}
    8ea2:	mov	r6, r3
    m_spiActive = false;
    8ea4:	strb	r3, [r5, #19]
}
    8ea6:	b.n	8de4 <SharedSpiCard::syncDevice()+0x14>
    m_errorCode = code;
    8ea8:	movs	r2, #9
  if (m_spiActive) {
    8eaa:	ldrb	r3, [r5, #19]
    8eac:	strb	r2, [r5, #18]
    8eae:	cmp	r3, #0
    8eb0:	beq.n	8e42 <SharedSpiCard::syncDevice()+0x72>
    m_spiDriver.send(data);
    8eb2:	adds	r6, r5, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    8eb4:	mov	r1, r4
    8eb6:	ldrb	r0, [r5, #17]
    8eb8:	bl	b098 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    8ebc:	mov	r0, r6
    8ebe:	movs	r1, #255	; 0xff
    8ec0:	bl	b02c <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    8ec4:	mov	r0, r6
    8ec6:	bl	af98 <SdSpiArduinoDriver::deactivate()>
}
    8eca:	mov	r6, r8
    m_spiActive = false;
    8ecc:	strb.w	r8, [r5, #19]
}
    8ed0:	b.n	8de4 <SharedSpiCard::syncDevice()+0x14>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    8ed2:	movs	r1, #1
    8ed4:	ldrb	r0, [r5, #17]
    8ed6:	bl	b098 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    8eda:	mov	r1, r4
    8edc:	mov	r0, r7
    8ede:	bl	b02c <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    8ee2:	mov	r0, r7
    8ee4:	bl	af98 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    8ee8:	movs	r3, #0
    8eea:	strb	r3, [r5, #19]
}
    8eec:	b.n	8e2c <SharedSpiCard::syncDevice()+0x5c>
    8eee:	nop
    8ef0:	.word	0x00007db9
    8ef4:	.word	0x2001598c

00008ef8 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)>:
  return readSectors(sector, dst, 1);
    8ef8:	ldr	r3, [r0, #0]
bool DedicatedSpiCard::readSector(uint32_t sector, uint8_t* dst) {
    8efa:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8efe:	ldr	r7, [pc, #312]	; (9038 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x140>)
  return readSectors(sector, dst, 1);
    8f00:	ldr	r6, [r3, #20]
    8f02:	cmp	r6, r7
    8f04:	bne.n	8fd2 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0xda>
    8f06:	mov	r8, r2
  if (sdState() != READ_STATE || sector != m_curSector) {
    8f08:	ldrb	r2, [r0, #20]
    8f0a:	mov	r4, r0
    8f0c:	mov	r5, r1
    8f0e:	cmp	r2, #1
    8f10:	bne.n	8f18 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x20>
    8f12:	ldr	r2, [r0, #24]
    8f14:	cmp	r1, r2
    8f16:	beq.n	8f3c <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x44>
  if (type() != SD_CARD_TYPE_SDHC) {
    8f18:	ldr	r3, [r3, #92]	; 0x5c
    8f1a:	ldr	r2, [pc, #288]	; (903c <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x144>)
    8f1c:	cmp	r3, r2
    8f1e:	bne.n	8fdc <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0xe4>
  uint8_t type() const { return m_type; }
    8f20:	ldrb	r0, [r4, #22]
    8f22:	cmp	r0, #3
  if (cardCommand(CMD18, sector)) {
    8f24:	mov.w	r1, #18
    8f28:	mov	r0, r4
    sector <<= 9;
    8f2a:	ite	ne
    8f2c:	lslne	r2, r5, #9
    8f2e:	moveq	r2, r5
  if (cardCommand(CMD18, sector)) {
    8f30:	bl	7f90 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    8f34:	cbnz	r0, 8f72 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x7a>
  m_state = READ_STATE;
    8f36:	movs	r3, #1
    m_curSector = sector;
    8f38:	str	r5, [r4, #24]
  m_state = READ_STATE;
    8f3a:	strb	r3, [r4, #20]
    8f3c:	ldr	r7, [pc, #256]	; (9040 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x148>)
    m_spiDriver.send(data);
    8f3e:	adds	r5, r4, #4
    8f40:	ldr	r6, [r7, #0]
  void set(uint16_t ms) { m_endTime = ms + millis16(); }
    8f42:	add.w	r6, r6, #300	; 0x12c
    8f46:	uxth	r6, r6
  explicit Timeout(uint16_t ms) { set(ms); }
    8f48:	b.n	8f52 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x5a>
    8f4a:	ldr	r3, [r7, #0]
  bool timedOut() { return (int16_t)(m_endTime - millis16()) < 0; }
    8f4c:	subs	r3, r6, r3
    if (timeout.timedOut()) {
    8f4e:	lsls	r3, r3, #16
    8f50:	bmi.n	8fa0 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0xa8>
    return m_spiDriver.receive();
    8f52:	mov	r0, r5
    8f54:	bl	aff0 <SdSpiArduinoDriver::receive()>
  while ((m_status = spiReceive()) == 0XFF) {
    8f58:	cmp	r0, #255	; 0xff
    8f5a:	strb	r0, [r4, #21]
    8f5c:	beq.n	8f4a <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x52>
  if (m_status != DATA_START_SECTOR) {
    8f5e:	cmp	r0, #254	; 0xfe
    8f60:	beq.n	8fa4 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0xac>
    8f62:	movs	r2, #25
  if (m_spiActive) {
    8f64:	ldrb	r3, [r4, #19]
    m_errorCode = code;
    8f66:	strb	r2, [r4, #18]
    8f68:	cbnz	r3, 8f7e <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x86>
  return false;
    8f6a:	movs	r6, #0
}
    8f6c:	mov	r0, r6
    8f6e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8f72:	movs	r2, #12
  if (m_spiActive) {
    8f74:	ldrb	r3, [r4, #19]
    8f76:	strb	r2, [r4, #18]
    8f78:	cmp	r3, #0
    8f7a:	beq.n	8f6a <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x72>
    m_spiDriver.send(data);
    8f7c:	adds	r5, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    8f7e:	ldrb	r0, [r4, #17]
    8f80:	movs	r1, #1
    8f82:	bl	b098 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    8f86:	movs	r1, #255	; 0xff
    8f88:	mov	r0, r5
    8f8a:	bl	b02c <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    8f8e:	mov	r0, r5
    8f90:	bl	af98 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    8f94:	movs	r3, #0
  return false;
    8f96:	mov	r6, r3
    m_spiActive = false;
    8f98:	strb	r3, [r4, #19]
}
    8f9a:	mov	r0, r6
    8f9c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8fa0:	movs	r2, #30
    8fa2:	b.n	8f64 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x6c>
    return m_spiDriver.receive(buf, n);
    8fa4:	mov.w	r2, #512	; 0x200
    8fa8:	mov	r1, r8
    8faa:	mov	r0, r5
    8fac:	bl	b008 <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>
  if ((m_status = spiReceive(dst, count))) {
    8fb0:	strb	r0, [r4, #21]
    8fb2:	cbz	r0, 8fb8 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0xc0>
    8fb4:	movs	r2, #38	; 0x26
    8fb6:	b.n	8f64 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x6c>
    return m_spiDriver.receive();
    8fb8:	mov	r0, r5
    8fba:	bl	aff0 <SdSpiArduinoDriver::receive()>
    8fbe:	mov	r0, r5
    8fc0:	bl	aff0 <SdSpiArduinoDriver::receive()>
  m_curSector += ns;
    8fc4:	ldr	r3, [r4, #24]
  return m_dedicatedSpi ? true : readStop();
    8fc6:	ldrb	r6, [r4, #28]
  m_curSector += ns;
    8fc8:	adds	r3, #1
    8fca:	str	r3, [r4, #24]
  return m_dedicatedSpi ? true : readStop();
    8fcc:	cbz	r6, 8fe2 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0xea>
    8fce:	movs	r6, #1
    8fd0:	b.n	8f6c <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x74>
  return readSectors(sector, dst, 1);
    8fd2:	mov	ip, r6
    8fd4:	movs	r3, #1
}
    8fd6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return readSectors(sector, dst, 1);
    8fda:	bx	ip
  if (type() != SD_CARD_TYPE_SDHC) {
    8fdc:	mov	r0, r4
    8fde:	blx	r3
    8fe0:	b.n	8f22 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x2a>
  if (cardCommand(CMD12, 0)) {
    8fe2:	mov	r2, r6
    8fe4:	movs	r1, #12
    8fe6:	mov	r0, r4
  m_state = IDLE_STATE;
    8fe8:	strb	r6, [r4, #20]
  if (cardCommand(CMD12, 0)) {
    8fea:	bl	7f90 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    8fee:	mov	r7, r0
    8ff0:	cbnz	r0, 9012 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x11a>
  if (m_spiActive) {
    8ff2:	ldrb	r6, [r4, #19]
    8ff4:	cmp	r6, #0
    8ff6:	beq.n	8fce <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0xd6>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    8ff8:	movs	r1, #1
    8ffa:	ldrb	r0, [r4, #17]
    8ffc:	bl	b098 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    9000:	movs	r1, #255	; 0xff
    9002:	mov	r0, r5
    9004:	bl	b02c <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    9008:	mov	r0, r5
    900a:	bl	af98 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    900e:	strb	r7, [r4, #19]
}
    9010:	b.n	8f6c <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x74>
    m_errorCode = code;
    9012:	movs	r2, #9
  if (m_spiActive) {
    9014:	ldrb	r3, [r4, #19]
    9016:	strb	r2, [r4, #18]
    9018:	cmp	r3, #0
    901a:	beq.n	8f6a <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x72>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    901c:	movs	r1, #1
    901e:	ldrb	r0, [r4, #17]
    9020:	bl	b098 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    9024:	movs	r1, #255	; 0xff
    9026:	mov	r0, r5
    9028:	bl	b02c <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    902c:	mov	r0, r5
    902e:	bl	af98 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    9032:	strb	r6, [r4, #19]
}
    9034:	b.n	8f6c <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x74>
    9036:	nop
    9038:	.word	0x00008c51
    903c:	.word	0x00007d99
    9040:	.word	0x2001598c

00009044 <SharedSpiCard::end()>:
  if (m_beginCalled) {
    9044:	ldrb	r3, [r0, #16]
    9046:	cbz	r3, 9072 <SharedSpiCard::end()+0x2e>
    syncDevice();
    9048:	ldr	r3, [r0, #0]
    904a:	ldr	r1, [pc, #292]	; (9170 <SharedSpiCard::end()+0x12c>)
    904c:	ldr	r2, [r3, #28]
    904e:	cmp	r2, r1
void SharedSpiCard::end() {
    9050:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9054:	mov	r4, r0
    syncDevice();
    9056:	bne.n	9074 <SharedSpiCard::end()+0x30>
  if (m_state == WRITE_STATE) {
    9058:	ldrb	r5, [r0, #20]
    905a:	cmp	r5, #2
    905c:	beq.n	9086 <SharedSpiCard::end()+0x42>
  if (m_state == READ_STATE) {
    905e:	cmp	r5, #1
    9060:	beq.n	90f0 <SharedSpiCard::end()+0xac>
    return m_spiDriver.receive();
    9062:	adds	r6, r4, #4
  void spiEnd() { m_spiDriver.end(); }
    9064:	mov	r0, r6
    9066:	bl	afe8 <SdSpiArduinoDriver::end()>
    m_beginCalled = false;
    906a:	movs	r3, #0
    906c:	strb	r3, [r4, #16]
}
    906e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9072:	bx	lr
    return m_spiDriver.receive();
    9074:	adds	r6, r0, #4
    syncDevice();
    9076:	blx	r2
  void spiEnd() { m_spiDriver.end(); }
    9078:	mov	r0, r6
    907a:	bl	afe8 <SdSpiArduinoDriver::end()>
    m_beginCalled = false;
    907e:	movs	r3, #0
    9080:	strb	r3, [r4, #16]
}
    9082:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return writeStop();
    9086:	ldr	r3, [r3, #104]	; 0x68
    9088:	ldr	r2, [pc, #232]	; (9174 <SharedSpiCard::end()+0x130>)
    908a:	cmp	r3, r2
    908c:	bne.n	916a <SharedSpiCard::end()+0x126>
    908e:	ldr.w	r8, [pc, #232]	; 9178 <SharedSpiCard::end()+0x134>
    return m_spiDriver.receive();
    9092:	adds	r6, r0, #4
    9094:	ldr.w	r7, [r8]
  void set(uint16_t ms) { m_endTime = ms + millis16(); }
    9098:	add.w	r7, r7, #600	; 0x258
    909c:	uxth	r7, r7
  explicit Timeout(uint16_t ms) { set(ms); }
    909e:	b.n	90aa <SharedSpiCard::end()+0x66>
    90a0:	ldr.w	r3, [r8]
  bool timedOut() { return (int16_t)(m_endTime - millis16()) < 0; }
    90a4:	subs	r3, r7, r3
    if (timeout.timedOut()) {
    90a6:	lsls	r3, r3, #16
    90a8:	bmi.n	90ca <SharedSpiCard::end()+0x86>
    90aa:	mov	r0, r6
    90ac:	bl	aff0 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    90b0:	cmp	r0, #255	; 0xff
    90b2:	mov	r5, r0
    90b4:	bne.n	90a0 <SharedSpiCard::end()+0x5c>
    m_spiDriver.send(data);
    90b6:	movs	r1, #253	; 0xfd
    90b8:	mov	r0, r6
    90ba:	bl	b02c <SdSpiArduinoDriver::send(unsigned char)>
  if (m_spiActive) {
    90be:	ldrb	r3, [r4, #19]
    90c0:	cmp	r3, #0
    90c2:	bne.n	914e <SharedSpiCard::end()+0x10a>
  m_state = IDLE_STATE;
    90c4:	movs	r3, #0
    90c6:	strb	r3, [r4, #20]
  return true;
    90c8:	b.n	9064 <SharedSpiCard::end()+0x20>
    m_errorCode = code;
    90ca:	movs	r2, #31
  if (m_spiActive) {
    90cc:	ldrb	r3, [r4, #19]
    90ce:	strb	r2, [r4, #18]
    90d0:	cmp	r3, #0
    90d2:	beq.n	9064 <SharedSpiCard::end()+0x20>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    90d4:	movs	r1, #1
    90d6:	ldrb	r0, [r4, #17]
    90d8:	bl	b098 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    90dc:	movs	r1, #255	; 0xff
    90de:	mov	r0, r6
    90e0:	bl	b02c <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    90e4:	mov	r0, r6
    90e6:	bl	af98 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    90ea:	movs	r3, #0
    90ec:	strb	r3, [r4, #19]
}
    90ee:	b.n	9064 <SharedSpiCard::end()+0x20>
  m_state = IDLE_STATE;
    90f0:	mov.w	r8, #0
  if (cardCommand(CMD12, 0)) {
    90f4:	movs	r1, #12
    90f6:	mov	r2, r8
  m_state = IDLE_STATE;
    90f8:	strb.w	r8, [r0, #20]
  if (cardCommand(CMD12, 0)) {
    90fc:	bl	7f90 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    9100:	mov	r7, r0
    9102:	cbnz	r0, 9126 <SharedSpiCard::end()+0xe2>
  if (m_spiActive) {
    9104:	ldrb	r3, [r4, #19]
    9106:	cmp	r3, #0
    9108:	beq.n	9062 <SharedSpiCard::end()+0x1e>
    m_spiDriver.send(data);
    910a:	adds	r6, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    910c:	mov	r1, r5
    910e:	ldrb	r0, [r4, #17]
    9110:	bl	b098 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    9114:	movs	r1, #255	; 0xff
    9116:	mov	r0, r6
    9118:	bl	b02c <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    911c:	mov	r0, r6
    911e:	bl	af98 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    9122:	strb	r7, [r4, #19]
}
    9124:	b.n	9064 <SharedSpiCard::end()+0x20>
    m_errorCode = code;
    9126:	movs	r2, #9
  if (m_spiActive) {
    9128:	ldrb	r3, [r4, #19]
    912a:	strb	r2, [r4, #18]
    912c:	cmp	r3, #0
    912e:	beq.n	9062 <SharedSpiCard::end()+0x1e>
    m_spiDriver.send(data);
    9130:	adds	r6, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    9132:	mov	r1, r5
    9134:	ldrb	r0, [r4, #17]
    9136:	bl	b098 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    913a:	movs	r1, #255	; 0xff
    913c:	mov	r0, r6
    913e:	bl	b02c <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    9142:	mov	r0, r6
    9144:	bl	af98 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    9148:	strb.w	r8, [r4, #19]
}
    914c:	b.n	9064 <SharedSpiCard::end()+0x20>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    914e:	movs	r1, #1
    9150:	ldrb	r0, [r4, #17]
    9152:	bl	b098 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    9156:	mov	r1, r5
    9158:	mov	r0, r6
    915a:	bl	b02c <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    915e:	mov	r0, r6
    9160:	bl	af98 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    9164:	movs	r3, #0
    9166:	strb	r3, [r4, #19]
}
    9168:	b.n	90c4 <SharedSpiCard::end()+0x80>
    return m_spiDriver.receive();
    916a:	adds	r6, r0, #4
  return writeStop();
    916c:	blx	r3
    916e:	b.n	9064 <SharedSpiCard::end()+0x20>
    9170:	.word	0x00008dd1
    9174:	.word	0x00007db9
    9178:	.word	0x2001598c

0000917c <SharedSpiCard::readData(unsigned char*, unsigned int)>:
bool SharedSpiCard::readData(uint8_t* dst, size_t count) {
    917c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9180:	ldr	r7, [pc, #128]	; (9204 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x88>)
    9182:	mov	r4, r0
    9184:	mov	r8, r1
    9186:	mov	r9, r2
    9188:	ldr	r5, [r7, #0]
    918a:	adds	r6, r0, #4
  void set(uint16_t ms) { m_endTime = ms + millis16(); }
    918c:	add.w	r5, r5, #300	; 0x12c
    9190:	uxth	r5, r5
  explicit Timeout(uint16_t ms) { set(ms); }
    9192:	b.n	919c <SharedSpiCard::readData(unsigned char*, unsigned int)+0x20>
    9194:	ldr	r3, [r7, #0]
  bool timedOut() { return (int16_t)(m_endTime - millis16()) < 0; }
    9196:	subs	r3, r5, r3
    if (timeout.timedOut()) {
    9198:	lsls	r3, r3, #16
    919a:	bmi.n	91b8 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x3c>
    919c:	mov	r0, r6
    919e:	bl	aff0 <SdSpiArduinoDriver::receive()>
  while ((m_status = spiReceive()) == 0XFF) {
    91a2:	cmp	r0, #255	; 0xff
    91a4:	strb	r0, [r4, #21]
    91a6:	beq.n	9194 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x18>
  if (m_status != DATA_START_SECTOR) {
    91a8:	cmp	r0, #254	; 0xfe
    91aa:	beq.n	91e2 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x66>
    91ac:	movs	r3, #25
  if (m_spiActive) {
    91ae:	ldrb	r0, [r4, #19]
    m_errorCode = code;
    91b0:	strb	r3, [r4, #18]
    91b2:	cbnz	r0, 91c2 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x46>
}
    91b4:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    91b8:	movs	r3, #30
  if (m_spiActive) {
    91ba:	ldrb	r0, [r4, #19]
    91bc:	strb	r3, [r4, #18]
    91be:	cmp	r0, #0
    91c0:	beq.n	91b4 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x38>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    91c2:	ldrb	r0, [r4, #17]
    91c4:	movs	r1, #1
    91c6:	bl	b098 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    91ca:	movs	r1, #255	; 0xff
    91cc:	mov	r0, r6
    91ce:	bl	b02c <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    91d2:	mov	r0, r6
    91d4:	bl	af98 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    91d8:	movs	r3, #0
  return false;
    91da:	mov	r0, r3
    m_spiActive = false;
    91dc:	strb	r3, [r4, #19]
}
    91de:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return m_spiDriver.receive(buf, n);
    91e2:	mov	r2, r9
    91e4:	mov	r1, r8
    91e6:	mov	r0, r6
    91e8:	bl	b008 <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>
  if ((m_status = spiReceive(dst, count))) {
    91ec:	strb	r0, [r4, #21]
    91ee:	cbnz	r0, 9200 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x84>
    return m_spiDriver.receive();
    91f0:	mov	r0, r6
    91f2:	bl	aff0 <SdSpiArduinoDriver::receive()>
    91f6:	mov	r0, r6
    91f8:	bl	aff0 <SdSpiArduinoDriver::receive()>
  return true;
    91fc:	movs	r0, #1
    91fe:	b.n	91b4 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x38>
    9200:	movs	r3, #38	; 0x26
    9202:	b.n	91ae <SharedSpiCard::readData(unsigned char*, unsigned int)+0x32>
    9204:	.word	0x2001598c

00009208 <SharedSpiCard::readSDS(sds_t*)>:
bool SharedSpiCard::readSDS(sds_t* sds) {
    9208:	push	{r3, r4, r5, r6, r7, lr}
    920a:	mov	r4, r0
    cardCommand(CMD55, 0);
    920c:	movs	r2, #0
    920e:	mov	r5, r1
    9210:	movs	r1, #55	; 0x37
    9212:	bl	7f90 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    return cardCommand(cmd, arg);
    9216:	movs	r2, #0
    9218:	movs	r1, #13
    921a:	mov	r0, r4
    921c:	bl	7f90 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
  if (cardAcmd(ACMD13, 0) || spiReceive()) {
    9220:	cbz	r0, 924c <SharedSpiCard::readSDS(sds_t*)+0x44>
    m_errorCode = code;
    9222:	movs	r3, #21
    9224:	strb	r3, [r4, #18]
  if (m_spiActive) {
    9226:	ldrb	r0, [r4, #19]
    9228:	cbnz	r0, 922c <SharedSpiCard::readSDS(sds_t*)+0x24>
}
    922a:	pop	{r3, r4, r5, r6, r7, pc}
    m_spiDriver.send(data);
    922c:	adds	r5, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    922e:	ldrb	r0, [r4, #17]
    9230:	movs	r1, #1
    9232:	bl	b098 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    9236:	movs	r1, #255	; 0xff
    9238:	mov	r0, r5
    923a:	bl	b02c <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    923e:	mov	r0, r5
    9240:	bl	af98 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    9244:	movs	r3, #0
  return false;
    9246:	mov	r0, r3
    m_spiActive = false;
    9248:	strb	r3, [r4, #19]
}
    924a:	pop	{r3, r4, r5, r6, r7, pc}
    return m_spiDriver.receive();
    924c:	adds	r7, r4, #4
    924e:	mov	r0, r7
    9250:	bl	aff0 <SdSpiArduinoDriver::receive()>
  if (cardAcmd(ACMD13, 0) || spiReceive()) {
    9254:	mov	r6, r0
    9256:	cmp	r0, #0
    9258:	bne.n	9222 <SharedSpiCard::readSDS(sds_t*)+0x1a>
  if (!readData(dst, sizeof(sds_t))) {
    925a:	movs	r2, #64	; 0x40
    925c:	mov	r1, r5
    925e:	mov	r0, r4
    9260:	bl	917c <SharedSpiCard::readData(unsigned char*, unsigned int)>
    9264:	cmp	r0, #0
    9266:	beq.n	9226 <SharedSpiCard::readSDS(sds_t*)+0x1e>
  if (m_spiActive) {
    9268:	ldrb	r5, [r4, #19]
    926a:	cmp	r5, #0
    926c:	beq.n	922a <SharedSpiCard::readSDS(sds_t*)+0x22>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    926e:	ldrb	r0, [r4, #17]
    9270:	movs	r1, #1
    9272:	bl	b098 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    9276:	movs	r1, #255	; 0xff
    9278:	mov	r0, r7
    927a:	bl	b02c <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    927e:	mov	r0, r7
    9280:	bl	af98 <SdSpiArduinoDriver::deactivate()>
}
    9284:	mov	r0, r5
    m_spiActive = false;
    9286:	strb	r6, [r4, #19]
}
    9288:	pop	{r3, r4, r5, r6, r7, pc}
    928a:	nop

0000928c <SharedSpiCard::sectorCount()>:
  return readCSD(&csd) ? csd.capacity() : 0;
    928c:	ldr	r3, [r0, #0]
    928e:	ldr	r2, [pc, #244]	; (9384 <SharedSpiCard::sectorCount()+0xf8>)
    9290:	ldr	r3, [r3, #72]	; 0x48
    9292:	cmp	r3, r2
uint32_t SharedSpiCard::sectorCount() {
    9294:	push	{r4, r5, r6, lr}
    9296:	sub	sp, #16
    9298:	bne.n	92f4 <SharedSpiCard::sectorCount()+0x68>
  if (cardCommand(cmd, 0)) {
    929a:	movs	r2, #0
    929c:	movs	r1, #9
    929e:	mov	r4, r0
    92a0:	bl	7f90 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    92a4:	mov	r5, r0
    92a6:	cbz	r0, 92b8 <SharedSpiCard::sectorCount()+0x2c>
    m_errorCode = code;
    92a8:	movs	r3, #28
    92aa:	strb	r3, [r4, #18]
  if (m_spiActive) {
    92ac:	ldrb	r3, [r4, #19]
    92ae:	cmp	r3, #0
    92b0:	bne.n	9360 <SharedSpiCard::sectorCount()+0xd4>
  return readCSD(&csd) ? csd.capacity() : 0;
    92b2:	movs	r0, #0
}
    92b4:	add	sp, #16
    92b6:	pop	{r4, r5, r6, pc}
  if (!readData(dst, 16)) {
    92b8:	movs	r2, #16
    92ba:	mov	r1, sp
    92bc:	mov	r0, r4
    92be:	bl	917c <SharedSpiCard::readData(unsigned char*, unsigned int)>
    92c2:	cmp	r0, #0
    92c4:	beq.n	92ac <SharedSpiCard::sectorCount()+0x20>
  if (m_spiActive) {
    92c6:	ldrb	r3, [r4, #19]
    92c8:	cmp	r3, #0
    92ca:	bne.n	9344 <SharedSpiCard::sectorCount()+0xb8>
  uint8_t csd[16];
  // Extract big endian fields.
  /** \return Capacity in sectors */
  uint32_t capacity() const {
    uint32_t c_size;
    uint8_t ver = csd[0] >> 6;
    92cc:	ldrb.w	r3, [sp]
    if (ver == 0) {
    92d0:	lsrs	r3, r3, #6
    92d2:	beq.n	9304 <SharedSpiCard::sectorCount()+0x78>
      c_size = (uint32_t)(csd[6] & 3) << 10;
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
      uint8_t c_size_mult = (csd[9] & 3) << 1 | csd[10] >> 7;
      uint8_t read_bl_len = csd[5] & 15;
      return (c_size + 1) << (c_size_mult + read_bl_len + 2 - 9);
    } else if (ver == 1) {
    92d4:	cmp	r3, #1
    92d6:	bne.n	92b2 <SharedSpiCard::sectorCount()+0x26>
      c_size = (uint32_t)(csd[7] & 63) << 16;
    92d8:	ldrb.w	r3, [sp, #7]
      c_size |= (uint32_t)csd[8] << 8;
      c_size |= csd[9];
    92dc:	ldrh.w	r0, [sp, #8]
      c_size = (uint32_t)(csd[7] & 63) << 16;
    92e0:	lsls	r3, r3, #16
      c_size |= csd[9];
    92e2:	rev16	r0, r0
      c_size = (uint32_t)(csd[7] & 63) << 16;
    92e4:	and.w	r3, r3, #4128768	; 0x3f0000
      c_size |= csd[9];
    92e8:	uxth	r0, r0
    92ea:	orrs	r0, r3
      return (c_size + 1) << 10;
    92ec:	adds	r0, #1
    92ee:	lsls	r0, r0, #10
}
    92f0:	add	sp, #16
    92f2:	pop	{r4, r5, r6, pc}
  return readCSD(&csd) ? csd.capacity() : 0;
    92f4:	mov	r1, sp
    92f6:	blx	r3
    92f8:	cmp	r0, #0
    92fa:	beq.n	92b2 <SharedSpiCard::sectorCount()+0x26>
    uint8_t ver = csd[0] >> 6;
    92fc:	ldrb.w	r3, [sp]
    if (ver == 0) {
    9300:	lsrs	r3, r3, #6
    9302:	bne.n	92d4 <SharedSpiCard::sectorCount()+0x48>
      uint8_t c_size_mult = (csd[9] & 3) << 1 | csd[10] >> 7;
    9304:	ldrb.w	r3, [sp, #9]
      c_size = (uint32_t)(csd[6] & 3) << 10;
    9308:	ldrb.w	r2, [sp, #6]
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
    930c:	ldrb.w	r0, [sp, #8]
      uint8_t c_size_mult = (csd[9] & 3) << 1 | csd[10] >> 7;
    9310:	lsls	r3, r3, #1
    9312:	ldrb.w	r1, [sp, #10]
      c_size = (uint32_t)(csd[6] & 3) << 10;
    9316:	lsls	r2, r2, #10
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
    9318:	ldrb.w	r4, [sp, #7]
    931c:	lsrs	r0, r0, #6
      uint8_t c_size_mult = (csd[9] & 3) << 1 | csd[10] >> 7;
    931e:	and.w	r3, r3, #6
      c_size = (uint32_t)(csd[6] & 3) << 10;
    9322:	and.w	r2, r2, #3072	; 0xc00
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
    9326:	orr.w	r0, r0, r4, lsl #2
      return (c_size + 1) << (c_size_mult + read_bl_len + 2 - 9);
    932a:	orr.w	r3, r3, r1, lsr #7
      uint8_t read_bl_len = csd[5] & 15;
    932e:	ldrb.w	r1, [sp, #5]
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
    9332:	orrs	r0, r2
      return (c_size + 1) << (c_size_mult + read_bl_len + 2 - 9);
    9334:	and.w	r2, r1, #15
    9338:	adds	r0, #1
    933a:	add	r3, r2
    933c:	subs	r3, #7
    933e:	lsls	r0, r3
}
    9340:	add	sp, #16
    9342:	pop	{r4, r5, r6, pc}
    m_spiDriver.send(data);
    9344:	adds	r6, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    9346:	movs	r1, #1
    9348:	ldrb	r0, [r4, #17]
    934a:	bl	b098 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    934e:	movs	r1, #255	; 0xff
    9350:	mov	r0, r6
    9352:	bl	b02c <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    9356:	mov	r0, r6
    9358:	bl	af98 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    935c:	strb	r5, [r4, #19]
    935e:	b.n	92cc <SharedSpiCard::sectorCount()+0x40>
    m_spiDriver.send(data);
    9360:	adds	r5, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    9362:	ldrb	r0, [r4, #17]
    9364:	movs	r1, #1
    9366:	bl	b098 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    936a:	movs	r1, #255	; 0xff
    936c:	mov	r0, r5
    936e:	bl	b02c <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    9372:	mov	r0, r5
    9374:	bl	af98 <SdSpiArduinoDriver::deactivate()>
    9378:	movs	r3, #0
  return readCSD(&csd) ? csd.capacity() : 0;
    937a:	mov	r0, r3
    m_spiActive = false;
    937c:	strb	r3, [r4, #19]
}
    937e:	add	sp, #16
    9380:	pop	{r4, r5, r6, pc}
    9382:	nop
    9384:	.word	0x0000872d

00009388 <SharedSpiCard::erase(unsigned long, unsigned long)>:
  if (!readCSD(&csd)) {
    9388:	ldr	r3, [r0, #0]
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    938a:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!readCSD(&csd)) {
    938e:	ldr	r3, [r3, #72]	; 0x48
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    9390:	mov	r6, r2
    9392:	ldr	r2, [pc, #352]	; (94f4 <SharedSpiCard::erase(unsigned long, unsigned long)+0x16c>)
    9394:	sub	sp, #24
    9396:	mov	r4, r0
    9398:	mov	r5, r1
    939a:	cmp	r3, r2
    939c:	bne.n	9448 <SharedSpiCard::erase(unsigned long, unsigned long)+0xc0>
  if (cardCommand(cmd, 0)) {
    939e:	movs	r2, #0
    93a0:	movs	r1, #9
    93a2:	bl	7f90 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    93a6:	mov	r7, r0
    93a8:	cbz	r0, 93be <SharedSpiCard::erase(unsigned long, unsigned long)+0x36>
    m_errorCode = code;
    93aa:	movs	r3, #28
    93ac:	strb	r3, [r4, #18]
  if (m_spiActive) {
    93ae:	ldrb	r3, [r4, #19]
    93b0:	cmp	r3, #0
    93b2:	bne.n	94b4 <SharedSpiCard::erase(unsigned long, unsigned long)+0x12c>
  return false;
    93b4:	movs	r6, #0
}
    93b6:	mov	r0, r6
    93b8:	add	sp, #24
    93ba:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!readData(dst, 16)) {
    93be:	movs	r2, #16
    93c0:	add	r1, sp, #8
    93c2:	mov	r0, r4
    93c4:	bl	917c <SharedSpiCard::readData(unsigned char*, unsigned int)>
    93c8:	cmp	r0, #0
    93ca:	beq.n	93ae <SharedSpiCard::erase(unsigned long, unsigned long)+0x26>
  if (m_spiActive) {
    93cc:	ldrb	r3, [r4, #19]
    93ce:	cmp	r3, #0
    93d0:	bne.n	9492 <SharedSpiCard::erase(unsigned long, unsigned long)+0x10a>
    } else {
      return 0;
    }
  }
  /** \return true if erase granularity is single block. */
  bool eraseSingleBlock() const { return csd[10] & 0X40; }
    93d2:	ldrb.w	r3, [sp, #18]
  if (!csd.eraseSingleBlock()) {
    93d6:	lsls	r2, r3, #25
    93d8:	bmi.n	93f6 <SharedSpiCard::erase(unsigned long, unsigned long)+0x6e>
  /** \return erase size in 512 byte blocks if eraseSingleBlock is false. */
  int eraseSize() const { return ((csd[10] & 0X3F) << 1 | csd[11] >> 7) + 1; }
    93da:	lsls	r3, r3, #1
    93dc:	ldrb.w	r2, [sp, #19]
    93e0:	and.w	r3, r3, #126	; 0x7e
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    93e4:	orr.w	r3, r3, r2, lsr #7
    93e8:	adds	r2, r6, #1
    93ea:	orrs	r2, r5
    93ec:	tst	r3, r2
    93ee:	beq.n	93f6 <SharedSpiCard::erase(unsigned long, unsigned long)+0x6e>
    93f0:	movs	r3, #40	; 0x28
    93f2:	strb	r3, [r4, #18]
      goto fail;
    93f4:	b.n	941c <SharedSpiCard::erase(unsigned long, unsigned long)+0x94>
  if (m_type != SD_CARD_TYPE_SDHC) {
    93f6:	ldrb	r3, [r4, #22]
    93f8:	cmp	r3, #3
    93fa:	beq.n	9400 <SharedSpiCard::erase(unsigned long, unsigned long)+0x78>
    firstSector <<= 9;
    93fc:	lsls	r5, r5, #9
    lastSector <<= 9;
    93fe:	lsls	r6, r6, #9
  if (cardCommand(CMD32, firstSector) || cardCommand(CMD33, lastSector) ||
    9400:	mov	r2, r5
    9402:	movs	r1, #32
    9404:	mov	r0, r4
    9406:	bl	7f90 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    940a:	cbnz	r0, 9418 <SharedSpiCard::erase(unsigned long, unsigned long)+0x90>
    940c:	mov	r2, r6
    940e:	movs	r1, #33	; 0x21
    9410:	mov	r0, r4
    9412:	bl	7f90 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    9416:	cbz	r0, 9452 <SharedSpiCard::erase(unsigned long, unsigned long)+0xca>
    9418:	movs	r3, #39	; 0x27
    941a:	strb	r3, [r4, #18]
  if (m_spiActive) {
    941c:	ldrb	r3, [r4, #19]
    941e:	cmp	r3, #0
    9420:	beq.n	93b4 <SharedSpiCard::erase(unsigned long, unsigned long)+0x2c>
    m_spiDriver.send(data);
    9422:	adds	r5, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    9424:	ldrb	r0, [r4, #17]
    9426:	movs	r1, #1
    9428:	bl	b098 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    942c:	movs	r1, #255	; 0xff
    942e:	mov	r0, r5
    9430:	bl	b02c <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    9434:	mov	r0, r5
    9436:	bl	af98 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    943a:	movs	r3, #0
  return false;
    943c:	mov	r6, r3
    m_spiActive = false;
    943e:	strb	r3, [r4, #19]
}
    9440:	mov	r0, r6
    9442:	add	sp, #24
    9444:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!readCSD(&csd)) {
    9448:	add	r1, sp, #8
    944a:	blx	r3
    944c:	cmp	r0, #0
    944e:	bne.n	93d2 <SharedSpiCard::erase(unsigned long, unsigned long)+0x4a>
    9450:	b.n	941c <SharedSpiCard::erase(unsigned long, unsigned long)+0x94>
      cardCommand(CMD38, 0)) {
    9452:	mov	r2, r0
    9454:	movs	r1, #38	; 0x26
    9456:	mov	r0, r4
    9458:	bl	7f90 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
  if (cardCommand(CMD32, firstSector) || cardCommand(CMD33, lastSector) ||
    945c:	cmp	r0, #0
    945e:	bne.n	9418 <SharedSpiCard::erase(unsigned long, unsigned long)+0x90>
    9460:	ldr.w	r8, [pc, #148]	; 94f8 <SharedSpiCard::erase(unsigned long, unsigned long)+0x170>
  void set(uint16_t ms) { m_endTime = ms + millis16(); }
    9464:	movw	r6, #10000	; 0x2710
    m_spiDriver.send(data);
    9468:	adds	r7, r4, #4
    946a:	ldr.w	r3, [r8]
    946e:	add	r6, r3
    9470:	uxth	r6, r6
  explicit Timeout(uint16_t ms) { set(ms); }
    9472:	b.n	947e <SharedSpiCard::erase(unsigned long, unsigned long)+0xf6>
    9474:	ldr.w	r3, [r8]
  bool timedOut() { return (int16_t)(m_endTime - millis16()) < 0; }
    9478:	subs	r3, r6, r3
    if (timeout.timedOut()) {
    947a:	lsls	r3, r3, #16
    947c:	bmi.n	94d2 <SharedSpiCard::erase(unsigned long, unsigned long)+0x14a>
    return m_spiDriver.receive();
    947e:	mov	r0, r7
    9480:	bl	aff0 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    9484:	cmp	r0, #255	; 0xff
    9486:	mov	r5, r0
    9488:	bne.n	9474 <SharedSpiCard::erase(unsigned long, unsigned long)+0xec>
  if (m_spiActive) {
    948a:	ldrb	r6, [r4, #19]
    948c:	cbnz	r6, 94d8 <SharedSpiCard::erase(unsigned long, unsigned long)+0x150>
  return true;
    948e:	movs	r6, #1
    9490:	b.n	93b6 <SharedSpiCard::erase(unsigned long, unsigned long)+0x2e>
    m_spiDriver.send(data);
    9492:	add.w	r8, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    9496:	movs	r1, #1
    9498:	ldrb	r0, [r4, #17]
    949a:	bl	b098 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    949e:	movs	r1, #255	; 0xff
    94a0:	mov	r0, r8
    94a2:	str.w	r8, [sp, #4]
    94a6:	bl	b02c <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    94aa:	ldr	r0, [sp, #4]
    94ac:	bl	af98 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    94b0:	strb	r7, [r4, #19]
    94b2:	b.n	93d2 <SharedSpiCard::erase(unsigned long, unsigned long)+0x4a>
    m_spiDriver.send(data);
    94b4:	adds	r5, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    94b6:	movs	r1, #1
    94b8:	ldrb	r0, [r4, #17]
    94ba:	bl	b098 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    94be:	movs	r1, #255	; 0xff
    94c0:	mov	r0, r5
    94c2:	bl	b02c <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    94c6:	mov	r0, r5
    94c8:	bl	af98 <SdSpiArduinoDriver::deactivate()>
    94cc:	movs	r3, #0
    94ce:	strb	r3, [r4, #19]
    94d0:	b.n	93b4 <SharedSpiCard::erase(unsigned long, unsigned long)+0x2c>
    m_errorCode = code;
    94d2:	movs	r3, #41	; 0x29
    94d4:	strb	r3, [r4, #18]
    goto fail;
    94d6:	b.n	941c <SharedSpiCard::erase(unsigned long, unsigned long)+0x94>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    94d8:	movs	r1, #1
    94da:	ldrb	r0, [r4, #17]
    94dc:	bl	b098 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    94e0:	mov	r1, r5
    94e2:	mov	r0, r7
    94e4:	bl	b02c <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    94e8:	mov	r0, r7
    94ea:	bl	af98 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    94ee:	movs	r3, #0
    94f0:	strb	r3, [r4, #19]
}
    94f2:	b.n	93b6 <SharedSpiCard::erase(unsigned long, unsigned long)+0x2e>
    94f4:	.word	0x0000872d
    94f8:	.word	0x2001598c

000094fc <DedicatedSpiCard::begin(SdSpiConfig)>:
bool DedicatedSpiCard::begin(SdSpiConfig spiConfig) {
    94fc:	push	{r4, lr}
    94fe:	sub	sp, #16
    9500:	mov	r4, r0
    9502:	add.w	ip, sp, #4
    9506:	stmia.w	ip, {r1, r2, r3}
  if (!SharedSpiCard::begin(spiConfig)) {
    950a:	ldmia.w	ip, {r1, r2, r3}
    950e:	bl	8148 <SharedSpiCard::begin(SdSpiConfig)>
    9512:	cbz	r0, 951e <DedicatedSpiCard::begin(SdSpiConfig)+0x22>
const uint8_t USER_SPI_BEGIN = 2;
/**
 * \param[in] opt option field of SdSpiConfig.
 * \return true for dedicated SPI.
 */
inline bool spiOptionDedicated(uint8_t opt) { return opt & DEDICATED_SPI; }
    9514:	ldrb.w	r3, [sp, #5]
    9518:	and.w	r3, r3, #1
    951c:	strb	r3, [r4, #28]
}
    951e:	add	sp, #16
    9520:	pop	{r4, pc}
    9522:	nop

00009524 <SdCardInterface::hasDedicatedSpi()>:
  virtual bool hasDedicatedSpi() { return false; }
    9524:	movs	r0, #0
    9526:	bx	lr

00009528 <SdCardInterface::isDedicatedSpi()>:
  bool virtual isDedicatedSpi() { return false; }
    9528:	movs	r0, #0
    952a:	bx	lr

0000952c <SdCardInterface::setDedicatedSpi(bool)>:
  }
    952c:	movs	r0, #0
    952e:	bx	lr

00009530 <SdioCard::end()>:
   */
  bool cardCMD6(uint32_t arg, uint8_t* status);
  /** Disable an SDIO card.
   * not implemented.
   */
  void end() {}
    9530:	bx	lr
    9532:	nop

00009534 <sdIrs()>:
  return false;
}
//==============================================================================
// ISR
static void sdIrs() {
  SDHC_IRQSIGEN = 0;
    9534:	ldr	r3, [pc, #32]	; (9558 <sdIrs()+0x24>)
    9536:	movs	r1, #0
  m_irqstat = SDHC_IRQSTAT;
    9538:	ldr	r2, [pc, #32]	; (955c <sdIrs()+0x28>)
  SDHC_IRQSTAT = m_irqstat;
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
#endif
  m_dmaBusy = false;
    953a:	ldr	r0, [pc, #36]	; (9560 <sdIrs()+0x2c>)
static void sdIrs() {
    953c:	push	{r4}
  SDHC_IRQSIGEN = 0;
    953e:	str	r1, [r3, #56]	; 0x38
  m_irqstat = SDHC_IRQSTAT;
    9540:	ldr	r4, [r3, #48]	; 0x30
    9542:	str	r4, [r2, #0]
  SDHC_IRQSTAT = m_irqstat;
    9544:	ldr	r2, [r2, #0]
}
    9546:	ldr.w	r4, [sp], #4
  SDHC_IRQSTAT = m_irqstat;
    954a:	str	r2, [r3, #48]	; 0x30
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
    954c:	ldr	r2, [r3, #72]	; 0x48
    954e:	bic.w	r2, r2, #129	; 0x81
    9552:	str	r2, [r3, #72]	; 0x48
  m_dmaBusy = false;
    9554:	strb	r1, [r0, #0]
}
    9556:	bx	lr
    9558:	.word	0x402c0000
    955c:	.word	0x20007718
    9560:	.word	0x20015d13

00009564 <isBusyDat()>:
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
}
//------------------------------------------------------------------------------
static bool isBusyCommandInhibit() { return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB; }
//------------------------------------------------------------------------------
static bool isBusyDat() { return SDHC_PRSSTAT & (1 << 24) ? false : true; }
    9564:	ldr	r3, [pc, #12]	; (9574 <isBusyDat()+0x10>)
    9566:	ldr	r0, [r3, #36]	; 0x24
    9568:	eor.w	r0, r0, #16777216	; 0x1000000
    956c:	ubfx	r0, r0, #24, #1
    9570:	bx	lr
    9572:	nop
    9574:	.word	0x402c0000

00009578 <isBusyDMA()>:
//------------------------------------------------------------------------------
static bool isBusyDMA() { return m_dmaBusy; }
    9578:	ldr	r3, [pc, #4]	; (9580 <isBusyDMA()+0x8>)
    957a:	ldrb	r0, [r3, #0]
    957c:	bx	lr
    957e:	nop
    9580:	.word	0x20015d13

00009584 <setSdclk(unsigned long)>:
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    9584:	ldr	r1, [pc, #400]	; (9718 <setSdclk(unsigned long)+0x194>)
  return (528000000U * 3) / ((CCM_ANALOG_PFD_528 & 0x3F) / 6) / divider;
    9586:	ldr	r3, [pc, #404]	; (971c <setSdclk(unsigned long)+0x198>)
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    9588:	ldr	r1, [r1, #36]	; 0x24
  return (528000000U * 3) / ((CCM_ANALOG_PFD_528 & 0x3F) / 6) / divider;
    958a:	ldr.w	r3, [r3, #256]	; 0x100
    958e:	ldr	r2, [pc, #400]	; (9720 <setSdclk(unsigned long)+0x19c>)
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    9590:	ubfx	r1, r1, #11, #3
  return (528000000U * 3) / ((CCM_ANALOG_PFD_528 & 0x3F) / 6) / divider;
    9594:	and.w	r3, r3, #63	; 0x3f
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    9598:	adds	r1, #1
  }
  d[15] = 0;
  return true;
}
//------------------------------------------------------------------------------
static void setSdclk(uint32_t kHzMax) {
    959a:	push	{r4, r5, r6, r7, lr}
  return (528000000U * 3) / ((CCM_ANALOG_PFD_528 & 0x3F) / 6) / divider;
    959c:	ldr	r4, [pc, #388]	; (9724 <setSdclk(unsigned long)+0x1a0>)
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000 * kHzMax;
    959e:	mov.w	r5, #1000	; 0x3e8
  return (528000000U * 3) / ((CCM_ANALOG_PFD_528 & 0x3F) / 6) / divider;
    95a2:	umull	r4, r3, r4, r3
  uint32_t maxSdclk = 1000 * kHzMax;
    95a6:	mul.w	r0, r5, r0
  return (528000000U * 3) / ((CCM_ANALOG_PFD_528 & 0x3F) / 6) / divider;
    95aa:	lsrs	r3, r3, #2
    95ac:	udiv	r2, r2, r3
    95b0:	udiv	r2, r2, r1
  uint32_t base = baseClock();

  while ((base / (sdclkfs * DVS_LIMIT) > maxSdclk) &&
    95b4:	cmp.w	r0, r2, lsr #4
    95b8:	bcs.n	96b0 <setSdclk(unsigned long)+0x12c>
  uint32_t sdclkfs = 1;
    95ba:	movs	r3, #1
         (sdclkfs < SDCLKFS_LIMIT)) {
    sdclkfs <<= 1;
    95bc:	mov	ip, r3
    95be:	lsls	r3, r3, #1
  while ((base / (sdclkfs * DVS_LIMIT) > maxSdclk) &&
    95c0:	lsls	r1, r3, #4
    95c2:	udiv	r1, r2, r1
    95c6:	cmp	r1, r0
    95c8:	bls.n	95ce <setSdclk(unsigned long)+0x4a>
    95ca:	cmp	r3, #255	; 0xff
    95cc:	bls.n	95bc <setSdclk(unsigned long)+0x38>
  }
  while ((base / (sdclkfs * dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    95ce:	udiv	r1, r2, r3
  uint32_t sysctl =
      SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK | SDHC_SYSCTL_DVS_MASK |
                      SDHC_SYSCTL_SDCLKFS_MASK);

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs) |
                SDHC_SYSCTL_SDCLKFS(sdclkfs);
    95d2:	mov.w	ip, ip, lsl #8
  while ((base / (sdclkfs * dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    95d6:	cmp	r0, r1
    95d8:	bcs.n	96ba <setSdclk(unsigned long)+0x136>
    95da:	lsls	r1, r3, #1
    95dc:	udiv	r4, r2, r1
    95e0:	cmp	r0, r4
    95e2:	bcs.n	96be <setSdclk(unsigned long)+0x13a>
    95e4:	adds	r4, r1, r3
    95e6:	udiv	r5, r2, r4
    95ea:	cmp	r0, r5
    95ec:	bcs.n	96cc <setSdclk(unsigned long)+0x148>
    95ee:	mov.w	lr, r3, lsl #2
    95f2:	udiv	r5, r2, lr
    95f6:	cmp	r5, r0
    95f8:	bls.n	96d2 <setSdclk(unsigned long)+0x14e>
    95fa:	add.w	r5, lr, r3
    95fe:	udiv	r6, r2, r5
    9602:	cmp	r0, r6
    9604:	bcs.n	96d8 <setSdclk(unsigned long)+0x154>
    9606:	lsls	r4, r4, #1
    9608:	udiv	r6, r2, r4
    960c:	cmp	r0, r6
    960e:	bcs.n	96de <setSdclk(unsigned long)+0x15a>
    9610:	rsb	r6, r3, r3, lsl #3
    9614:	lsls	r4, r3, #3
    9616:	udiv	r7, r2, r6
    961a:	cmp	r0, r7
    961c:	bcs.n	96e4 <setSdclk(unsigned long)+0x160>
    961e:	udiv	r6, r2, r4
    9622:	cmp	r0, r6
    9624:	bcs.n	96ea <setSdclk(unsigned long)+0x166>
    9626:	adds	r6, r4, r3
    9628:	udiv	r7, r2, r6
    962c:	cmp	r0, r7
    962e:	bcs.n	96f0 <setSdclk(unsigned long)+0x16c>
    9630:	lsls	r5, r5, #1
    9632:	udiv	r6, r2, r5
    9636:	cmp	r0, r6
    9638:	bcs.n	96f6 <setSdclk(unsigned long)+0x172>
    963a:	add	lr, r3
    963c:	add.w	lr, r3, lr, lsl #1
    9640:	udiv	r5, r2, lr
    9644:	cmp	r0, r5
    9646:	bcs.n	96fc <setSdclk(unsigned long)+0x178>
    9648:	add	r1, r3
    964a:	lsls	r1, r1, #2
    964c:	udiv	r5, r2, r1
    9650:	cmp	r0, r5
    9652:	bcs.n	9702 <setSdclk(unsigned long)+0x17e>
    9654:	add	r1, r3
    9656:	udiv	r5, r2, r1
    965a:	cmp	r0, r5
    965c:	bcs.n	96c6 <setSdclk(unsigned long)+0x142>
    965e:	subs	r4, r4, r3
    9660:	lsls	r4, r4, #1
    9662:	udiv	r1, r2, r4
    9666:	cmp	r0, r1
    9668:	bcs.n	9708 <setSdclk(unsigned long)+0x184>
    966a:	lsls	r4, r3, #4
    966c:	rsb	r3, r3, r3, lsl #4
    9670:	udiv	r1, r2, r3
    9674:	cmp	r0, r1
    9676:	bcs.n	970e <setSdclk(unsigned long)+0x18a>
    9678:	mov	r3, r4
    967a:	udiv	r1, r2, r4
    967e:	cmp	r1, r0
    9680:	bls.n	9712 <setSdclk(unsigned long)+0x18e>
    9682:	movs	r0, #240	; 0xf0
  m_sdClkKhz = base / (1000 * sdclkfs * dvs);
    9684:	mov.w	r1, #1000	; 0x3e8
    9688:	ldr	r4, [pc, #156]	; (9728 <setSdclk(unsigned long)+0x1a4>)
    968a:	mul.w	r3, r1, r3
      SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK | SDHC_SYSCTL_DVS_MASK |
    968e:	ldr	r1, [pc, #156]	; (972c <setSdclk(unsigned long)+0x1a8>)
  m_sdClkKhz = base / (1000 * sdclkfs * dvs);
    9690:	udiv	r2, r2, r3
                      SDHC_SYSCTL_SDCLKFS_MASK);
    9694:	ldr	r3, [pc, #152]	; (9730 <setSdclk(unsigned long)+0x1ac>)
  m_sdClkKhz = base / (1000 * sdclkfs * dvs);
    9696:	str	r2, [r4, #0]
      SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK | SDHC_SYSCTL_DVS_MASK |
    9698:	ldr	r2, [r1, #44]	; 0x2c
                      SDHC_SYSCTL_SDCLKFS_MASK);
    969a:	ands	r3, r2
  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs) |
    969c:	orrs	r3, r0
    969e:	orr.w	r3, r3, ip
    96a2:	orr.w	r3, r3, #917504	; 0xe0000
    96a6:	str	r3, [r1, #44]	; 0x2c

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
    96a8:	ldr	r3, [r1, #36]	; 0x24
    96aa:	lsls	r3, r3, #28
    96ac:	bpl.n	96a8 <setSdclk(unsigned long)+0x124>

#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
  // Enable the SDHC clock.
  SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
}
    96ae:	pop	{r4, r5, r6, r7, pc}
  while ((base / (sdclkfs * DVS_LIMIT) > maxSdclk) &&
    96b0:	mov	r1, r2
    96b2:	mov.w	ip, #0
  uint32_t sdclkfs = 1;
    96b6:	movs	r3, #1
    96b8:	b.n	95d6 <setSdclk(unsigned long)+0x52>
  while ((base / (sdclkfs * dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    96ba:	movs	r0, #0
    96bc:	b.n	9684 <setSdclk(unsigned long)+0x100>
    96be:	mov	r3, r1
    96c0:	movs	r0, #1
  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs) |
    96c2:	lsls	r0, r0, #4
    96c4:	b.n	9684 <setSdclk(unsigned long)+0x100>
  while ((base / (sdclkfs * dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    96c6:	mov	r3, r1
    dvs++;
    96c8:	movs	r0, #12
    96ca:	b.n	96c2 <setSdclk(unsigned long)+0x13e>
  while ((base / (sdclkfs * dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    96cc:	mov	r3, r4
    dvs++;
    96ce:	movs	r0, #2
    96d0:	b.n	96c2 <setSdclk(unsigned long)+0x13e>
  while ((base / (sdclkfs * dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    96d2:	mov	r3, lr
    dvs++;
    96d4:	movs	r0, #3
    96d6:	b.n	96c2 <setSdclk(unsigned long)+0x13e>
  while ((base / (sdclkfs * dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    96d8:	mov	r3, r5
    dvs++;
    96da:	movs	r0, #4
    96dc:	b.n	96c2 <setSdclk(unsigned long)+0x13e>
  while ((base / (sdclkfs * dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    96de:	mov	r3, r4
    dvs++;
    96e0:	movs	r0, #5
    96e2:	b.n	96c2 <setSdclk(unsigned long)+0x13e>
  while ((base / (sdclkfs * dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    96e4:	mov	r3, r6
    dvs++;
    96e6:	movs	r0, #6
    96e8:	b.n	96c2 <setSdclk(unsigned long)+0x13e>
  while ((base / (sdclkfs * dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    96ea:	mov	r3, r4
    dvs++;
    96ec:	movs	r0, #7
    96ee:	b.n	96c2 <setSdclk(unsigned long)+0x13e>
  while ((base / (sdclkfs * dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    96f0:	mov	r3, r6
    dvs++;
    96f2:	movs	r0, #8
    96f4:	b.n	96c2 <setSdclk(unsigned long)+0x13e>
  while ((base / (sdclkfs * dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    96f6:	mov	r3, r5
    dvs++;
    96f8:	movs	r0, #9
    96fa:	b.n	96c2 <setSdclk(unsigned long)+0x13e>
  while ((base / (sdclkfs * dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    96fc:	mov	r3, lr
    dvs++;
    96fe:	movs	r0, #10
    9700:	b.n	96c2 <setSdclk(unsigned long)+0x13e>
  while ((base / (sdclkfs * dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    9702:	mov	r3, r1
    dvs++;
    9704:	movs	r0, #11
    9706:	b.n	96c2 <setSdclk(unsigned long)+0x13e>
  while ((base / (sdclkfs * dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    9708:	mov	r3, r4
    dvs++;
    970a:	movs	r0, #13
    970c:	b.n	96c2 <setSdclk(unsigned long)+0x13e>
    970e:	movs	r0, #14
    9710:	b.n	96c2 <setSdclk(unsigned long)+0x13e>
    9712:	movs	r0, #15
    9714:	b.n	96c2 <setSdclk(unsigned long)+0x13e>
    9716:	nop
    9718:	.word	0x400fc000
    971c:	.word	0x400d8000
    9720:	.word	0x5e69ec00
    9724:	.word	0xaaaaaaab
    9728:	.word	0x20006688
    972c:	.word	0x402c0000
    9730:	.word	0xfff0000f

00009734 <SdioCard::errorCode() const>:
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::errorCode() const { return m_errorCode; }
    9734:	ldr	r3, [pc, #4]	; (973c <SdioCard::errorCode() const+0x8>)
    9736:	ldrb	r0, [r3, #0]
    9738:	bx	lr
    973a:	nop
    973c:	.word	0x2000220c

00009740 <SdioCard::errorData() const>:
//------------------------------------------------------------------------------
uint32_t SdioCard::errorData() const { return m_irqstat; }
    9740:	ldr	r3, [pc, #4]	; (9748 <SdioCard::errorData() const+0x8>)
    9742:	ldr	r0, [r3, #0]
    9744:	bx	lr
    9746:	nop
    9748:	.word	0x20007718

0000974c <SdioCard::readCID(cid_t*)>:
  }
}
//------------------------------------------------------------------------------
uint32_t SdioCard::kHzSdClk() { return m_sdClkKhz; }
//------------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
    974c:	push	{r4}
  memcpy(cid, &m_cid, sizeof(cid_t));
    974e:	ldr	r4, [pc, #28]	; (976c <SdioCard::readCID(cid_t*)+0x20>)
bool SdioCard::readCID(cid_t* cid) {
    9750:	mov	ip, r1
  memcpy(cid, &m_cid, sizeof(cid_t));
    9752:	ldmia	r4!, {r0, r1, r2, r3}
    9754:	str.w	r0, [ip]
  return true;
}
    9758:	movs	r0, #1
  memcpy(cid, &m_cid, sizeof(cid_t));
    975a:	str.w	r1, [ip, #4]
    975e:	str.w	r2, [ip, #8]
    9762:	str.w	r3, [ip, #12]
}
    9766:	ldr.w	r4, [sp], #4
    976a:	bx	lr
    976c:	.word	0x200074a0

00009770 <SdioCard::readCSD(csd_t*)>:
//------------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
    9770:	push	{r4}
  memcpy(csd, &m_csd, sizeof(csd_t));
    9772:	ldr	r4, [pc, #28]	; (9790 <SdioCard::readCSD(csd_t*)+0x20>)
bool SdioCard::readCSD(csd_t* csd) {
    9774:	mov	ip, r1
  memcpy(csd, &m_csd, sizeof(csd_t));
    9776:	ldmia	r4!, {r0, r1, r2, r3}
    9778:	str.w	r0, [ip]
  return true;
}
    977c:	movs	r0, #1
  memcpy(csd, &m_csd, sizeof(csd_t));
    977e:	str.w	r1, [ip, #4]
    9782:	str.w	r2, [ip, #8]
    9786:	str.w	r3, [ip, #12]
}
    978a:	ldr.w	r4, [sp], #4
    978e:	bx	lr
    9790:	.word	0x200074b0

00009794 <SdioCard::readOCR(unsigned long*)>:
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
    9794:	ldr	r3, [pc, #8]	; (97a0 <SdioCard::readOCR(unsigned long*)+0xc>)
  return true;
}
    9796:	movs	r0, #1
  *ocr = m_ocr;
    9798:	ldr	r3, [r3, #0]
    979a:	str	r3, [r1, #0]
}
    979c:	bx	lr
    979e:	nop
    97a0:	.word	0x200074c0

000097a4 <SdioCard::readSCR(scr_t*)>:
//------------------------------------------------------------------------------
bool SdioCard::readSCR(scr_t* scr) {
  memcpy(scr, &m_scr, sizeof(scr_t));
    97a4:	ldr	r2, [pc, #12]	; (97b4 <SdioCard::readSCR(scr_t*)+0x10>)
bool SdioCard::readSCR(scr_t* scr) {
    97a6:	mov	r3, r1
  memcpy(scr, &m_scr, sizeof(scr_t));
    97a8:	ldmia	r2!, {r0, r1}
    97aa:	str	r0, [r3, #0]
  return true;
}
    97ac:	movs	r0, #1
  memcpy(scr, &m_scr, sizeof(scr_t));
    97ae:	str	r1, [r3, #4]
}
    97b0:	bx	lr
    97b2:	nop
    97b4:	.word	0x200074c8

000097b8 <SdioCard::readSDS(sds_t*)>:
//------------------------------------------------------------------------------
bool SdioCard::readSDS(sds_t* sds) {
    97b8:	push	{r4, r5, lr}
  memcpy(sds, &m_sds, sizeof(sds_t));
    97ba:	ldr	r4, [pc, #44]	; (97e8 <SdioCard::readSDS(sds_t*)+0x30>)
    97bc:	mov	ip, r1
    97be:	add.w	r5, r4, #64	; 0x40
    97c2:	mov	lr, r4
    97c4:	add.w	ip, ip, #16
    97c8:	adds	r4, #16
    97ca:	ldmia.w	lr!, {r0, r1, r2, r3}
    97ce:	cmp	lr, r5
    97d0:	str.w	r0, [ip, #-16]
    97d4:	str.w	r1, [ip, #-12]
    97d8:	str.w	r2, [ip, #-8]
    97dc:	str.w	r3, [ip, #-4]
    97e0:	bne.n	97c2 <SdioCard::readSDS(sds_t*)+0xa>
  return true;
}
    97e2:	movs	r0, #1
    97e4:	pop	{r4, r5, pc}
    97e6:	nop
    97e8:	.word	0x200074d0

000097ec <SdioCard::~SdioCard()>:
class SdioCard : public SdCardInterface {
    97ec:	bx	lr
    97ee:	nop

000097f0 <SdioCard::~SdioCard()>:
    97f0:	push	{r4, lr}
    97f2:	mov	r4, r0
    97f4:	movs	r1, #12
    97f6:	bl	f16c <operator delete(void*, unsigned int)>
    97fa:	mov	r0, r4
    97fc:	pop	{r4, pc}
    97fe:	nop

00009800 <SdioCard::type() const>:
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::type() const {
  return m_version2 ? m_highCapacity ? SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2
    9800:	ldr	r3, [pc, #16]	; (9814 <SdioCard::type() const+0x14>)
    9802:	ldrb	r3, [r3, #0]
    9804:	cbz	r3, 9810 <SdioCard::type() const+0x10>
    9806:	ldr	r3, [pc, #16]	; (9818 <SdioCard::type() const+0x18>)
    9808:	ldrb	r0, [r3, #0]
    980a:	adds	r0, #2
    980c:	uxtb	r0, r0
    980e:	bx	lr
    9810:	movs	r0, #1
                    : SD_CARD_TYPE_SD1;
}
    9812:	bx	lr
    9814:	.word	0x20015d0f
    9818:	.word	0x20015d10

0000981c <SdioCard::sectorCount()>:
    uint8_t ver = csd[0] >> 6;
    981c:	ldr	r2, [pc, #88]	; (9878 <SdioCard::sectorCount()+0x5c>)
    981e:	ldrb	r3, [r2, #0]
    if (ver == 0) {
    9820:	lsrs	r3, r3, #6
    9822:	beq.n	9842 <SdioCard::sectorCount()+0x26>
    } else if (ver == 1) {
    9824:	cmp	r3, #1
    9826:	beq.n	982c <SdioCard::sectorCount()+0x10>
      return 0;
    9828:	movs	r0, #0
uint32_t SdioCard::sectorCount() { return m_csd.capacity(); }
    982a:	bx	lr
      c_size = (uint32_t)(csd[7] & 63) << 16;
    982c:	ldrb	r3, [r2, #7]
      c_size |= csd[9];
    982e:	ldrh	r0, [r2, #8]
      c_size = (uint32_t)(csd[7] & 63) << 16;
    9830:	lsls	r3, r3, #16
      c_size |= csd[9];
    9832:	rev16	r0, r0
      c_size = (uint32_t)(csd[7] & 63) << 16;
    9834:	and.w	r3, r3, #4128768	; 0x3f0000
      c_size |= csd[9];
    9838:	uxth	r0, r0
    983a:	orrs	r0, r3
      return (c_size + 1) << 10;
    983c:	adds	r0, #1
    983e:	lsls	r0, r0, #10
    9840:	bx	lr
      uint8_t c_size_mult = (csd[9] & 3) << 1 | csd[10] >> 7;
    9842:	ldrb	r3, [r2, #9]
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
    9844:	ldrb	r0, [r2, #8]
    9846:	ldrb.w	ip, [r2, #7]
      uint8_t c_size_mult = (csd[9] & 3) << 1 | csd[10] >> 7;
    984a:	lsls	r3, r3, #1
      c_size = (uint32_t)(csd[6] & 3) << 10;
    984c:	ldrb	r1, [r2, #6]
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
    984e:	lsrs	r0, r0, #6
      uint8_t c_size_mult = (csd[9] & 3) << 1 | csd[10] >> 7;
    9850:	and.w	r3, r3, #6
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
    9854:	orr.w	r0, r0, ip, lsl #2
      uint8_t c_size_mult = (csd[9] & 3) << 1 | csd[10] >> 7;
    9858:	ldrb.w	ip, [r2, #10]
      c_size = (uint32_t)(csd[6] & 3) << 10;
    985c:	lsls	r1, r1, #10
      uint8_t read_bl_len = csd[5] & 15;
    985e:	ldrb	r2, [r2, #5]
      return (c_size + 1) << (c_size_mult + read_bl_len + 2 - 9);
    9860:	orr.w	r3, r3, ip, lsr #7
      c_size = (uint32_t)(csd[6] & 3) << 10;
    9864:	and.w	r1, r1, #3072	; 0xc00
      return (c_size + 1) << (c_size_mult + read_bl_len + 2 - 9);
    9868:	and.w	r2, r2, #15
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
    986c:	orrs	r0, r1
      return (c_size + 1) << (c_size_mult + read_bl_len + 2 - 9);
    986e:	add	r3, r2
    9870:	adds	r0, #1
    9872:	subs	r3, #7
    9874:	lsls	r0, r3
    9876:	bx	lr
    9878:	.word	0x200074b0

0000987c <cardCommand(unsigned long, unsigned long)>:
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    987c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9880:	mov	r7, r0
    9882:	mov	r8, r1
static bool isBusyCommandInhibit() { return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB; }
    9884:	ldr	r4, [pc, #124]	; (9904 <cardCommand(unsigned long, unsigned long)+0x88>)
  uint32_t m = micros();
    9886:	bl	cdb0 <micros>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    988a:	ldr	r6, [pc, #124]	; (9908 <cardCommand(unsigned long, unsigned long)+0x8c>)
  uint32_t m = micros();
    988c:	mov	r5, r0
  while (fcn()) {
    988e:	b.n	989a <cardCommand(unsigned long, unsigned long)+0x1e>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    9890:	bl	cdb0 <micros>
    9894:	subs	r3, r0, r5
    9896:	cmp	r3, r6
    9898:	bhi.n	98e4 <cardCommand(unsigned long, unsigned long)+0x68>
static bool isBusyCommandInhibit() { return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB; }
    989a:	ldr	r3, [r4, #36]	; 0x24
  while (fcn()) {
    989c:	lsls	r1, r3, #31
    989e:	bmi.n	9890 <cardCommand(unsigned long, unsigned long)+0x14>
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
    98a0:	lsls	r3, r7, #10
  SDHC_CMDARG = arg;
    98a2:	str.w	r8, [r4, #8]
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
    98a6:	bmi.n	98ea <cardCommand(unsigned long, unsigned long)+0x6e>
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
    98a8:	bic.w	r3, r7, #255	; 0xff
  SDHC_XFERTYP = xfertyp;
    98ac:	ldr	r4, [pc, #84]	; (9904 <cardCommand(unsigned long, unsigned long)+0x88>)
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
    98ae:	ldr	r6, [pc, #92]	; (990c <cardCommand(unsigned long, unsigned long)+0x90>)
  SDHC_XFERTYP = xfertyp;
    98b0:	str	r3, [r4, #12]
  uint32_t m = micros();
    98b2:	bl	cdb0 <micros>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    98b6:	ldr	r7, [pc, #80]	; (9908 <cardCommand(unsigned long, unsigned long)+0x8c>)
  uint32_t m = micros();
    98b8:	mov	r5, r0
  while (fcn()) {
    98ba:	b.n	98c6 <cardCommand(unsigned long, unsigned long)+0x4a>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    98bc:	bl	cdb0 <micros>
    98c0:	subs	r0, r0, r5
    98c2:	cmp	r0, r7
    98c4:	bhi.n	98e4 <cardCommand(unsigned long, unsigned long)+0x68>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
    98c6:	ldr	r3, [r4, #48]	; 0x30
  while (fcn()) {
    98c8:	tst	r3, r6
    98ca:	beq.n	98bc <cardCommand(unsigned long, unsigned long)+0x40>
  m_irqstat = SDHC_IRQSTAT;
    98cc:	ldr	r2, [r4, #48]	; 0x30
    98ce:	ldr	r3, [pc, #64]	; (9910 <cardCommand(unsigned long, unsigned long)+0x94>)
    98d0:	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    98d2:	ldr	r2, [r3, #0]
    98d4:	str	r2, [r4, #48]	; 0x30
  return (m_irqstat & SDHC_IRQSTAT_CC) && !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
    98d6:	ldr	r2, [r3, #0]
    98d8:	lsls	r2, r2, #31
    98da:	bpl.n	98e4 <cardCommand(unsigned long, unsigned long)+0x68>
    98dc:	ldr	r3, [r3, #0]
    98de:	tst.w	r3, #983040	; 0xf0000
    98e2:	beq.n	98fc <cardCommand(unsigned long, unsigned long)+0x80>
    98e4:	movs	r0, #0
}
    98e6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    98ea:	ldr	r2, [r4, #72]	; 0x48
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
    98ec:	uxtb	r3, r7
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    98ee:	bic.w	r2, r2, #255	; 0xff
    98f2:	str	r2, [r4, #72]	; 0x48
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
    98f4:	ldr	r2, [r4, #72]	; 0x48
    98f6:	orrs	r3, r2
    98f8:	str	r3, [r4, #72]	; 0x48
    98fa:	b.n	98a8 <cardCommand(unsigned long, unsigned long)+0x2c>
  return (m_irqstat & SDHC_IRQSTAT_CC) && !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
    98fc:	movs	r0, #1
}
    98fe:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9902:	nop
    9904:	.word	0x402c0000
    9908:	.word	0x000f4240
    990c:	.word	0x000f0001
    9910:	.word	0x20007718

00009914 <isBusyCMD13()>:
static bool isBusyCMD13() {
    9914:	push	{r3, lr}
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    9916:	ldr	r3, [pc, #28]	; (9934 <isBusyCMD13()+0x20>)
    9918:	ldr	r0, [pc, #28]	; (9938 <isBusyCMD13()+0x24>)
    991a:	ldr	r1, [r3, #0]
    991c:	bl	987c <cardCommand(unsigned long, unsigned long)>
    9920:	cbz	r0, 9930 <isBusyCMD13()+0x1c>
    9922:	ldr	r3, [pc, #24]	; (993c <isBusyCMD13()+0x28>)
    9924:	ldr	r0, [r3, #16]
  return !(statusCMD13() & CARD_STATUS_READY_FOR_DATA);
    9926:	eor.w	r0, r0, #256	; 0x100
    992a:	ubfx	r0, r0, #8, #1
}
    992e:	pop	{r3, pc}
    9930:	movs	r0, #1
    9932:	pop	{r3, pc}
    9934:	.word	0x200074c4
    9938:	.word	0x0d1a0000
    993c:	.word	0x402c0000

00009940 <SdioCard::status()>:
uint32_t SdioCard::status() { return statusCMD13(); }
    9940:	push	{r3, lr}
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    9942:	ldr	r3, [pc, #16]	; (9954 <SdioCard::status()+0x14>)
    9944:	ldr	r0, [pc, #16]	; (9958 <SdioCard::status()+0x18>)
    9946:	ldr	r1, [r3, #0]
    9948:	bl	987c <cardCommand(unsigned long, unsigned long)>
    994c:	cbz	r0, 9952 <SdioCard::status()+0x12>
    994e:	ldr	r3, [pc, #12]	; (995c <SdioCard::status()+0x1c>)
    9950:	ldr	r0, [r3, #16]
uint32_t SdioCard::status() { return statusCMD13(); }
    9952:	pop	{r3, pc}
    9954:	.word	0x200074c4
    9958:	.word	0x0d1a0000
    995c:	.word	0x402c0000

00009960 <SdioCard::erase(unsigned long, unsigned long)>:
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    9960:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9964:	mov	r5, r2
  if (m_curState != IDLE_STATE && !syncDevice()) {
    9966:	ldrb	r2, [r0, #9]
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    9968:	mov	r4, r1
  if (m_curState != IDLE_STATE && !syncDevice()) {
    996a:	cbz	r2, 9974 <SdioCard::erase(unsigned long, unsigned long)+0x14>
    996c:	ldr	r3, [r0, #0]
    996e:	ldr	r3, [r3, #28]
    9970:	blx	r3
    9972:	cbz	r0, 99a0 <SdioCard::erase(unsigned long, unsigned long)+0x40>
  bool eraseSingleBlock() const { return csd[10] & 0X40; }
    9974:	ldr	r2, [pc, #204]	; (9a44 <SdioCard::erase(unsigned long, unsigned long)+0xe4>)
    9976:	ldrb	r3, [r2, #10]
  if (!m_csd.eraseSingleBlock()) {
    9978:	ands.w	r0, r3, #64	; 0x40
    997c:	bne.n	99a4 <SdioCard::erase(unsigned long, unsigned long)+0x44>
  int eraseSize() const { return ((csd[10] & 0X3F) << 1 | csd[11] >> 7) + 1; }
    997e:	lsls	r3, r3, #1
    9980:	ldrb	r2, [r2, #11]
    9982:	and.w	r3, r3, #126	; 0x7e
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    9986:	orr.w	r3, r3, r2, lsr #7
    998a:	adds	r2, r5, #1
    998c:	orrs	r2, r4
    998e:	tst	r3, r2
    9990:	beq.n	99a4 <SdioCard::erase(unsigned long, unsigned long)+0x44>
  m_errorCode = code;
    9992:	ldr	r1, [pc, #180]	; (9a48 <SdioCard::erase(unsigned long, unsigned long)+0xe8>)
    9994:	movs	r4, #40	; 0x28
  m_errorLine = line;
    9996:	ldr	r3, [pc, #180]	; (9a4c <SdioCard::erase(unsigned long, unsigned long)+0xec>)
    9998:	movw	r2, #813	; 0x32d
  m_errorCode = code;
    999c:	strb	r4, [r1, #0]
  m_errorLine = line;
    999e:	str	r2, [r3, #0]
}
    99a0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!m_highCapacity) {
    99a4:	ldr	r3, [pc, #168]	; (9a50 <SdioCard::erase(unsigned long, unsigned long)+0xf0>)
    99a6:	ldrb	r3, [r3, #0]
    99a8:	cbnz	r3, 99ae <SdioCard::erase(unsigned long, unsigned long)+0x4e>
    firstSector <<= 9;
    99aa:	lsls	r4, r4, #9
    lastSector <<= 9;
    99ac:	lsls	r5, r5, #9
  if (!cardCommand(CMD32_XFERTYP, firstSector)) {
    99ae:	mov	r1, r4
    99b0:	ldr	r0, [pc, #160]	; (9a54 <SdioCard::erase(unsigned long, unsigned long)+0xf4>)
    99b2:	bl	987c <cardCommand(unsigned long, unsigned long)>
    99b6:	cbnz	r0, 99ca <SdioCard::erase(unsigned long, unsigned long)+0x6a>
  m_errorCode = code;
    99b8:	ldr	r1, [pc, #140]	; (9a48 <SdioCard::erase(unsigned long, unsigned long)+0xe8>)
    99ba:	movs	r4, #15
  m_errorLine = line;
    99bc:	ldr	r3, [pc, #140]	; (9a4c <SdioCard::erase(unsigned long, unsigned long)+0xec>)
    99be:	movw	r2, #821	; 0x335
  m_errorCode = code;
    99c2:	strb	r4, [r1, #0]
  m_errorLine = line;
    99c4:	str	r2, [r3, #0]
}
    99c6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!cardCommand(CMD33_XFERTYP, lastSector)) {
    99ca:	mov	r1, r5
    99cc:	ldr	r0, [pc, #136]	; (9a58 <SdioCard::erase(unsigned long, unsigned long)+0xf8>)
    99ce:	bl	987c <cardCommand(unsigned long, unsigned long)>
    99d2:	cbnz	r0, 99e6 <SdioCard::erase(unsigned long, unsigned long)+0x86>
  m_errorCode = code;
    99d4:	ldr	r1, [pc, #112]	; (9a48 <SdioCard::erase(unsigned long, unsigned long)+0xe8>)
    99d6:	movs	r4, #16
  m_errorLine = line;
    99d8:	ldr	r3, [pc, #112]	; (9a4c <SdioCard::erase(unsigned long, unsigned long)+0xec>)
    99da:	mov.w	r2, #824	; 0x338
  m_errorCode = code;
    99de:	strb	r4, [r1, #0]
  m_errorLine = line;
    99e0:	str	r2, [r3, #0]
}
    99e2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    99e6:	movs	r1, #0
    99e8:	ldr	r0, [pc, #112]	; (9a5c <SdioCard::erase(unsigned long, unsigned long)+0xfc>)
    99ea:	bl	987c <cardCommand(unsigned long, unsigned long)>
    99ee:	cbnz	r0, 9a00 <SdioCard::erase(unsigned long, unsigned long)+0xa0>
  m_errorCode = code;
    99f0:	ldr	r1, [pc, #84]	; (9a48 <SdioCard::erase(unsigned long, unsigned long)+0xe8>)
    99f2:	movs	r4, #17
  m_errorLine = line;
    99f4:	ldr	r3, [pc, #84]	; (9a4c <SdioCard::erase(unsigned long, unsigned long)+0xec>)
    99f6:	movw	r2, #827	; 0x33b
  m_errorCode = code;
    99fa:	strb	r4, [r1, #0]
  m_errorLine = line;
    99fc:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD38);
    99fe:	b.n	99a0 <SdioCard::erase(unsigned long, unsigned long)+0x40>
  uint32_t m = micros();
    9a00:	bl	cdb0 <micros>
    9a04:	ldr	r6, [pc, #88]	; (9a60 <SdioCard::erase(unsigned long, unsigned long)+0x100>)
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    9a06:	ldr	r5, [pc, #92]	; (9a64 <SdioCard::erase(unsigned long, unsigned long)+0x104>)
  uint32_t m = micros();
    9a08:	mov	r4, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    9a0a:	ldr.w	r8, [pc, #96]	; 9a6c <SdioCard::erase(unsigned long, unsigned long)+0x10c>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    9a0e:	ldr	r7, [pc, #88]	; (9a68 <SdioCard::erase(unsigned long, unsigned long)+0x108>)
  while (fcn()) {
    9a10:	b.n	9a1c <SdioCard::erase(unsigned long, unsigned long)+0xbc>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    9a12:	bl	cdb0 <micros>
    9a16:	subs	r0, r0, r4
    9a18:	cmp	r0, r7
    9a1a:	bhi.n	9a32 <SdioCard::erase(unsigned long, unsigned long)+0xd2>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    9a1c:	ldr	r1, [r6, #0]
    9a1e:	mov	r0, r5
    9a20:	bl	987c <cardCommand(unsigned long, unsigned long)>
    9a24:	cmp	r0, #0
    9a26:	beq.n	9a12 <SdioCard::erase(unsigned long, unsigned long)+0xb2>
    9a28:	ldr.w	r3, [r8, #16]
  while (fcn()) {
    9a2c:	lsls	r3, r3, #23
    9a2e:	bpl.n	9a12 <SdioCard::erase(unsigned long, unsigned long)+0xb2>
    9a30:	b.n	99a0 <SdioCard::erase(unsigned long, unsigned long)+0x40>
  m_errorCode = code;
    9a32:	ldr	r1, [pc, #20]	; (9a48 <SdioCard::erase(unsigned long, unsigned long)+0xe8>)
    9a34:	movs	r4, #41	; 0x29
  m_errorLine = line;
    9a36:	ldr	r3, [pc, #20]	; (9a4c <SdioCard::erase(unsigned long, unsigned long)+0xec>)
    9a38:	movw	r2, #830	; 0x33e
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
    9a3c:	movs	r0, #0
  m_errorCode = code;
    9a3e:	strb	r4, [r1, #0]
  m_errorLine = line;
    9a40:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
    9a42:	b.n	99a0 <SdioCard::erase(unsigned long, unsigned long)+0x40>
    9a44:	.word	0x200074b0
    9a48:	.word	0x2000220c
    9a4c:	.word	0x20006690
    9a50:	.word	0x20015d10
    9a54:	.word	0x201a0000
    9a58:	.word	0x211a0000
    9a5c:	.word	0x261b0000
    9a60:	.word	0x200074c4
    9a64:	.word	0x0d1a0000
    9a68:	.word	0x000f4240
    9a6c:	.word	0x402c0000

00009a70 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>:
                        size_t n) {
    9a70:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if ((3 & (uint32_t)buf) || n == 0) {
    9a74:	ands.w	r4, r2, #3
                        size_t n) {
    9a78:	sub	sp, #12
  if ((3 & (uint32_t)buf) || n == 0) {
    9a7a:	it	ne
    9a7c:	movne	r4, #1
                        size_t n) {
    9a7e:	str	r0, [sp, #4]
  if ((3 & (uint32_t)buf) || n == 0) {
    9a80:	str	r3, [sp, #0]
    9a82:	cmp	r3, #0
    9a84:	it	eq
    9a86:	orreq.w	r4, r4, #1
    9a8a:	cbz	r4, 9aa4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x34>
  m_errorCode = code;
    9a8c:	ldr	r1, [pc, #256]	; (9b90 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x120>)
    9a8e:	movs	r0, #38	; 0x26
  m_errorLine = line;
    9a90:	ldr	r3, [pc, #256]	; (9b94 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x124>)
    9a92:	movw	r2, #547	; 0x223
    return sdError(SD_CARD_ERROR_DMA);
    9a96:	movs	r4, #0
  m_errorCode = code;
    9a98:	strb	r0, [r1, #0]
  m_errorLine = line;
    9a9a:	str	r2, [r3, #0]
}
    9a9c:	mov	r0, r4
    9a9e:	add	sp, #12
    9aa0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  m_busyFcn = fcn;
    9aa4:	ldr	r3, [pc, #240]	; (9b98 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x128>)
    9aa6:	mov	r5, r2
    9aa8:	ldr	r2, [pc, #240]	; (9b9c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x12c>)
    9aaa:	mov	r6, r1
    9aac:	ldr.w	r9, [pc, #268]	; 9bbc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x14c>
    9ab0:	str	r3, [r2, #0]
  uint32_t m = micros();
    9ab2:	bl	cdb0 <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    9ab6:	ldr.w	r8, [pc, #264]	; 9bc0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x150>
  uint32_t m = micros();
    9aba:	mov	r7, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    9abc:	ldr.w	fp, [pc, #260]	; 9bc4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x154>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    9ac0:	ldr.w	sl, [pc, #240]	; 9bb4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x144>
  while (fcn()) {
    9ac4:	b.n	9ad4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x64>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    9ac6:	bl	cdb0 <micros>
    9aca:	subs	r0, r0, r7
    9acc:	cmp	r0, sl
    9ace:	bhi.n	9b5a <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xea>
    yield();
    9ad0:	bl	daa4 <yield>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    9ad4:	ldr.w	r1, [r9]
    9ad8:	mov	r0, r8
    9ada:	bl	987c <cardCommand(unsigned long, unsigned long)>
    9ade:	cmp	r0, #0
    9ae0:	beq.n	9ac6 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x56>
    9ae2:	ldr.w	r3, [fp, #16]
  while (fcn()) {
    9ae6:	lsls	r2, r3, #23
    9ae8:	bpl.n	9ac6 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x56>
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    9aea:	ldr	r2, [sp, #0]
    9aec:	ldr	r3, [pc, #176]	; (9ba0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x130>)
  m_busyFcn = 0;
    9aee:	ldr	r1, [pc, #172]	; (9b9c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x12c>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    9af0:	and.w	r3, r3, r2, lsl #16
  m_busyFcn = 0;
    9af4:	movs	r2, #0
  m_dmaBusy = true;
    9af6:	ldr	r7, [pc, #172]	; (9ba4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x134>)
  m_busyFcn = 0;
    9af8:	str	r2, [r1, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    9afa:	orr.w	r3, r3, #512	; 0x200
  m_dmaBusy = true;
    9afe:	movs	r1, #1
  m_irqstat = 0;
    9b00:	ldr.w	r8, [pc, #196]	; 9bc8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x158>
  m_dmaBusy = true;
    9b04:	strb	r1, [r7, #0]
  m_irqstat = 0;
    9b06:	str.w	r2, [r8]
  SDHC_DSADDR = (uint32_t)buf;
    9b0a:	str.w	r5, [fp]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    9b0e:	str.w	r3, [fp, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    9b12:	ldr	r3, [pc, #148]	; (9ba8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x138>)
    9b14:	str.w	r3, [fp, #56]	; 0x38
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512 * sector)) {
    9b18:	ldr	r3, [pc, #144]	; (9bac <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x13c>)
    9b1a:	ldrb	r3, [r3, #0]
    9b1c:	cbz	r3, 9b70 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x100>
    9b1e:	mov	r1, r6
    9b20:	ldr	r0, [sp, #4]
    9b22:	bl	987c <cardCommand(unsigned long, unsigned long)>
    9b26:	mov	r9, r0
    9b28:	cmp	r0, #0
    9b2a:	beq.n	9a9c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2c>
  m_busyFcn = fcn;
    9b2c:	ldr	r3, [pc, #128]	; (9bb0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x140>)
    9b2e:	ldr	r2, [pc, #108]	; (9b9c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x12c>)
    9b30:	str	r3, [r2, #0]
  uint32_t m = micros();
    9b32:	bl	cdb0 <micros>
static bool isBusyDMA() { return m_dmaBusy; }
    9b36:	ldrb	r3, [r7, #0]
  uint32_t m = micros();
    9b38:	mov	r5, r0
  while (fcn()) {
    9b3a:	cbz	r3, 9b74 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x104>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    9b3c:	ldr	r6, [pc, #116]	; (9bb4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x144>)
    9b3e:	b.n	9b48 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xd8>
    yield();
    9b40:	bl	daa4 <yield>
static bool isBusyDMA() { return m_dmaBusy; }
    9b44:	ldrb	r3, [r7, #0]
  while (fcn()) {
    9b46:	cbz	r3, 9b74 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x104>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    9b48:	bl	cdb0 <micros>
    9b4c:	subs	r0, r0, r5
    9b4e:	cmp	r0, r6
    9b50:	bls.n	9b40 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xd0>
      m_busyFcn = 0;
    9b52:	movs	r3, #0
    9b54:	ldr	r2, [pc, #68]	; (9b9c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x12c>)
    9b56:	str	r3, [r2, #0]
      return true;
    9b58:	b.n	9a9c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2c>
  m_errorCode = code;
    9b5a:	ldr	r3, [pc, #52]	; (9b90 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x120>)
    9b5c:	movs	r2, #10
      m_busyFcn = 0;
    9b5e:	movs	r1, #0
    9b60:	ldr	r0, [pc, #56]	; (9b9c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x12c>)
  m_errorCode = code;
    9b62:	strb	r2, [r3, #0]
  m_errorLine = line;
    9b64:	movw	r2, #550	; 0x226
    9b68:	ldr	r3, [pc, #40]	; (9b94 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x124>)
      m_busyFcn = 0;
    9b6a:	str	r1, [r0, #0]
  m_errorLine = line;
    9b6c:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD13);
    9b6e:	b.n	9a9c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2c>
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512 * sector)) {
    9b70:	lsls	r6, r6, #9
    9b72:	b.n	9b1e <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xae>
  m_busyFcn = 0;
    9b74:	movs	r3, #0
    9b76:	ldr	r2, [pc, #36]	; (9b9c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x12c>)
    9b78:	str	r3, [r2, #0]
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    9b7a:	ldr.w	r3, [r8]
    9b7e:	lsls	r3, r3, #30
    9b80:	bpl.n	9a9c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2c>
    9b82:	ldr.w	r2, [r8]
    9b86:	ldr	r3, [pc, #48]	; (9bb8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x148>)
    9b88:	tst	r2, r3
    9b8a:	it	eq
    9b8c:	moveq	r4, r9
    9b8e:	b.n	9a9c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2c>
    9b90:	.word	0x2000220c
    9b94:	.word	0x20006690
    9b98:	.word	0x00009915
    9b9c:	.word	0x20007714
    9ba0:	.word	0x1fff0000
    9ba4:	.word	0x20015d13
    9ba8:	.word	0x117f0002
    9bac:	.word	0x20015d10
    9bb0:	.word	0x00009579
    9bb4:	.word	0x000f4240
    9bb8:	.word	0x117f0000
    9bbc:	.word	0x200074c4
    9bc0:	.word	0x0d1a0000
    9bc4:	.word	0x402c0000
    9bc8:	.word	0x20007718

00009bcc <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    9bcc:	push	{r3, r4, r5, r6, r7, lr}
    9bce:	mov	r6, r0
  bool useDma() { return m_options & DMA_SDIO; }
    9bd0:	ldrb	r0, [r0, #8]
    9bd2:	mov	r4, r1
    9bd4:	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    9bd6:	lsls	r0, r0, #31
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    9bd8:	mov	r7, r3
  if (m_sdioConfig.useDma()) {
    9bda:	bmi.n	9c04 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x38>
    for (size_t i = 0; i < n; i++) {
    9bdc:	cbz	r3, 9c00 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    9bde:	add	r7, r1
    9be0:	b.n	9be6 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x1a>
    9be2:	cmp	r7, r4
    9be4:	beq.n	9c00 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
      if (!readSector(sector + i, dst + i * 512UL)) {
    9be6:	ldr	r3, [r6, #0]
    9be8:	mov	r2, r5
    9bea:	mov	r1, r4
    9bec:	mov	r0, r6
    9bee:	ldr	r3, [r3, #16]
    for (size_t i = 0; i < n; i++) {
    9bf0:	adds	r4, #1
    9bf2:	add.w	r5, r5, #512	; 0x200
      if (!readSector(sector + i, dst + i * 512UL)) {
    9bf6:	blx	r3
    9bf8:	cmp	r0, #0
    9bfa:	bne.n	9be2 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x16>
          return false;  // readSector will set errorCode.
    9bfc:	movs	r0, #0
}
    9bfe:	pop	{r3, r4, r5, r6, r7, pc}
  return true;
    9c00:	movs	r0, #1
}
    9c02:	pop	{r3, r4, r5, r6, r7, pc}
    if ((uint32_t)dst & 3) {
    9c04:	lsls	r0, r2, #30
    9c06:	beq.n	9c2e <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x62>
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    9c08:	cmp	r3, #0
    9c0a:	beq.n	9c00 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    9c0c:	add	r7, r1
    9c0e:	b.n	9c14 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x48>
    9c10:	cmp	r4, r7
    9c12:	beq.n	9c00 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
        if (!readSector(sector, dst)) {
    9c14:	ldr	r3, [r6, #0]
    9c16:	mov	r2, r5
    9c18:	mov	r1, r4
    9c1a:	mov	r0, r6
    9c1c:	ldr	r3, [r3, #16]
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    9c1e:	adds	r4, #1
    9c20:	add.w	r5, r5, #512	; 0x200
        if (!readSector(sector, dst)) {
    9c24:	blx	r3
    9c26:	cmp	r0, #0
    9c28:	bne.n	9c10 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x44>
          return false;  // readSector will set errorCode.
    9c2a:	movs	r0, #0
    9c2c:	b.n	9bfe <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x32>
    if (!rdWrSectors(CMD18_DMA_XFERTYP, sector, dst, n)) {
    9c2e:	ldr	r0, [pc, #24]	; (9c48 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x7c>)
    9c30:	bl	9a70 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    9c34:	cmp	r0, #0
    9c36:	bne.n	9c00 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
  m_errorCode = code;
    9c38:	ldr	r1, [pc, #16]	; (9c4c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x80>)
    9c3a:	movs	r4, #12
  m_errorLine = line;
    9c3c:	ldr	r3, [pc, #16]	; (9c50 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x84>)
    9c3e:	movw	r2, #974	; 0x3ce
  m_errorCode = code;
    9c42:	strb	r4, [r1, #0]
  m_errorLine = line;
    9c44:	str	r2, [r3, #0]
}
    9c46:	pop	{r3, r4, r5, r6, r7, pc}
    9c48:	.word	0x123a0037
    9c4c:	.word	0x2000220c
    9c50:	.word	0x20006690

00009c54 <SdioCard::writeSector(unsigned long, unsigned char const*)>:
  }
  m_transferActive = true;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    9c54:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9c58:	ldrb	r5, [r0, #8]
    9c5a:	sub.w	sp, sp, #516	; 0x204
    9c5e:	mov	r8, r1
    9c60:	mov	r7, r2
  if (m_sdioConfig.useDma()) {
    9c62:	ands.w	r5, r5, #1
    9c66:	beq.n	9ca2 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x4e>
    uint8_t* ptr;
    uint8_t aligned[512];
    if (3 & (uint32_t)src) {
    9c68:	lsls	r3, r2, #30
    9c6a:	beq.n	9c7a <SdioCard::writeSector(unsigned long, unsigned char const*)+0x26>
      ptr = aligned;
      memcpy(aligned, src, 512);
    9c6c:	mov	r0, sp
    9c6e:	mov	r1, r2
    9c70:	mov.w	r2, #512	; 0x200
      ptr = aligned;
    9c74:	mov	r7, r0
      memcpy(aligned, src, 512);
    9c76:	bl	b09c <memcpy>
    } else {
      ptr = const_cast<uint8_t*>(src);
    }
    if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
    9c7a:	movs	r3, #1
    9c7c:	mov	r2, r7
    9c7e:	mov	r1, r8
    9c80:	ldr	r0, [pc, #244]	; (9d78 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x124>)
    9c82:	bl	9a70 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    9c86:	mov	r5, r0
    9c88:	cbnz	r0, 9c98 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
  m_errorCode = code;
    9c8a:	ldr	r1, [pc, #240]	; (9d7c <SdioCard::writeSector(unsigned long, unsigned char const*)+0x128>)
    9c8c:	movs	r0, #13
  m_errorLine = line;
    9c8e:	ldr	r3, [pc, #240]	; (9d80 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x12c>)
    9c90:	mov.w	r2, #1080	; 0x438
  m_errorCode = code;
    9c94:	strb	r0, [r1, #0]
  m_errorLine = line;
    9c96:	str	r2, [r3, #0]
      return false;
    }
    m_curSector++;
  }
  return true;
}
    9c98:	mov	r0, r5
    9c9a:	add.w	sp, sp, #516	; 0x204
    9c9e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!m_transferActive) {
    9ca2:	ldr	r3, [pc, #224]	; (9d84 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x130>)
    9ca4:	mov	fp, r0
    9ca6:	ldrb	r3, [r3, #0]
    9ca8:	cbnz	r3, 9d00 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xac>
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    9caa:	ldrb.w	r3, [fp, #9]
    9cae:	cmp	r3, #2
    9cb0:	beq.n	9d58 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x104>
      if (!syncDevice()) {
    9cb2:	ldr.w	r3, [fp]
    9cb6:	mov	r0, fp
    9cb8:	ldr	r3, [r3, #28]
    9cba:	blx	r3
    9cbc:	cmp	r0, #0
    9cbe:	beq.n	9c98 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
      if (!writeStart(sector)) {
    9cc0:	ldr.w	r3, [fp]
    9cc4:	mov	r1, r8
    9cc6:	mov	r0, fp
    9cc8:	ldr	r3, [r3, #100]	; 0x64
    9cca:	blx	r3
    9ccc:	cmp	r0, #0
    9cce:	beq.n	9c98 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
      m_curState = WRITE_STATE;
    9cd0:	movs	r3, #2
      m_curSector = sector;
    9cd2:	str.w	r8, [fp, #4]
      m_curState = WRITE_STATE;
    9cd6:	strb.w	r3, [fp, #9]
    if (!writeData(src)) {
    9cda:	ldr.w	r3, [fp]
    9cde:	mov	r1, r7
    9ce0:	mov	r0, fp
    9ce2:	ldr	r3, [r3, #96]	; 0x60
    9ce4:	blx	r3
    9ce6:	cmp	r0, #0
    9ce8:	beq.n	9c98 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
    m_curSector++;
    9cea:	ldr.w	r3, [fp, #4]
  return true;
    9cee:	mov	r5, r0
    m_curSector++;
    9cf0:	adds	r3, #1
}
    9cf2:	mov	r0, r5
    m_curSector++;
    9cf4:	str.w	r3, [fp, #4]
}
    9cf8:	add.w	sp, sp, #516	; 0x204
    9cfc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint32_t m = micros();
    9d00:	bl	cdb0 <micros>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    9d04:	ldr.w	r9, [pc, #144]	; 9d98 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x144>
  uint32_t m = micros();
    9d08:	mov	sl, r0
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    9d0a:	ldr	r6, [pc, #124]	; (9d88 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x134>)
  while (fcn()) {
    9d0c:	b.n	9d1c <SdioCard::writeSector(unsigned long, unsigned char const*)+0xc8>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    9d0e:	bl	cdb0 <micros>
    9d12:	ldr	r2, [pc, #120]	; (9d8c <SdioCard::writeSector(unsigned long, unsigned char const*)+0x138>)
    9d14:	sub.w	r3, r0, sl
    9d18:	cmp	r3, r2
    9d1a:	bhi.n	9d62 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x10e>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    9d1c:	ldr.w	r4, [r9, #48]	; 0x30
  while (fcn()) {
    9d20:	ands	r4, r6
    9d22:	beq.n	9d0e <SdioCard::writeSector(unsigned long, unsigned char const*)+0xba>
  m_transferActive = false;
    9d24:	movs	r3, #0
    9d26:	ldr	r2, [pc, #92]	; (9d84 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x130>)
    9d28:	strb	r3, [r2, #0]
  m_irqstat = SDHC_IRQSTAT;
    9d2a:	ldr	r3, [pc, #100]	; (9d90 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x13c>)
    9d2c:	ldr.w	r2, [r9, #48]	; 0x30
    9d30:	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    9d32:	ldr	r2, [r3, #0]
    9d34:	str.w	r2, [r9, #48]	; 0x30
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    9d38:	ldr	r2, [r3, #0]
    9d3a:	ldr	r3, [pc, #88]	; (9d94 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x140>)
    9d3c:	tst	r2, r3
    9d3e:	beq.n	9caa <SdioCard::writeSector(unsigned long, unsigned char const*)+0x56>
  m_errorCode = code;
    9d40:	ldr	r1, [pc, #56]	; (9d7c <SdioCard::writeSector(unsigned long, unsigned char const*)+0x128>)
    9d42:	movs	r0, #32
  m_errorLine = line;
    9d44:	ldr	r3, [pc, #56]	; (9d80 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x12c>)
    9d46:	movw	r2, #682	; 0x2aa
  m_errorCode = code;
    9d4a:	strb	r0, [r1, #0]
}
    9d4c:	mov	r0, r5
  m_errorLine = line;
    9d4e:	str	r2, [r3, #0]
}
    9d50:	add.w	sp, sp, #516	; 0x204
    9d54:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    9d58:	ldr.w	r3, [fp, #4]
    9d5c:	cmp	r8, r3
    9d5e:	bne.n	9cb2 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x5e>
    9d60:	b.n	9cda <SdioCard::writeSector(unsigned long, unsigned char const*)+0x86>
  m_transferActive = false;
    9d62:	ldr	r2, [pc, #32]	; (9d84 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x130>)
  m_irqstat = SDHC_IRQSTAT;
    9d64:	ldr	r3, [pc, #40]	; (9d90 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x13c>)
  m_transferActive = false;
    9d66:	strb	r4, [r2, #0]
  m_irqstat = SDHC_IRQSTAT;
    9d68:	ldr.w	r2, [r9, #48]	; 0x30
    9d6c:	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    9d6e:	ldr	r3, [r3, #0]
    9d70:	str.w	r3, [r9, #48]	; 0x30
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    9d74:	b.n	9d40 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xec>
    9d76:	nop
    9d78:	.word	0x183a0001
    9d7c:	.word	0x2000220c
    9d80:	.word	0x20006690
    9d84:	.word	0x20015d11
    9d88:	.word	0x117f0002
    9d8c:	.word	0x000f4240
    9d90:	.word	0x20007718
    9d94:	.word	0x117f0000
    9d98:	.word	0x402c0000

00009d9c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    9d9c:	push	{r3, r4, r5, r6, r7, lr}
    9d9e:	mov	r6, r0
    9da0:	ldrb	r0, [r0, #8]
    9da2:	mov	r4, r1
    9da4:	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    9da6:	lsls	r0, r0, #31
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    9da8:	mov	r7, r3
  if (m_sdioConfig.useDma()) {
    9daa:	bmi.n	9dd4 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x38>
    }
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
      return sdError(SD_CARD_ERROR_CMD25);
    }
  } else {
    for (size_t i = 0; i < n; i++) {
    9dac:	cbz	r3, 9dd0 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    9dae:	add	r7, r1
    9db0:	b.n	9db6 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x1a>
    9db2:	cmp	r7, r4
    9db4:	beq.n	9dd0 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
      if (!writeSector(sector + i, src + i * 512UL)) {
    9db6:	ldr	r3, [r6, #0]
    9db8:	mov	r2, r5
    9dba:	mov	r1, r4
    9dbc:	mov	r0, r6
    9dbe:	ldr	r3, [r3, #32]
    for (size_t i = 0; i < n; i++) {
    9dc0:	adds	r4, #1
    9dc2:	add.w	r5, r5, #512	; 0x200
      if (!writeSector(sector + i, src + i * 512UL)) {
    9dc6:	blx	r3
    9dc8:	cmp	r0, #0
    9dca:	bne.n	9db2 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x16>
          return false;  // writeSector will set errorCode.
    9dcc:	movs	r0, #0
        return false;
      }
    }
  }
  return true;
}
    9dce:	pop	{r3, r4, r5, r6, r7, pc}
  return true;
    9dd0:	movs	r0, #1
}
    9dd2:	pop	{r3, r4, r5, r6, r7, pc}
    if (3 & (uint32_t)ptr) {
    9dd4:	lsls	r0, r2, #30
    9dd6:	beq.n	9dfe <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x62>
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    9dd8:	cmp	r3, #0
    9dda:	beq.n	9dd0 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    9ddc:	add	r7, r1
    9dde:	b.n	9de4 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x48>
    9de0:	cmp	r4, r7
    9de2:	beq.n	9dd0 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
        if (!writeSector(sector, ptr)) {
    9de4:	ldr	r3, [r6, #0]
    9de6:	mov	r2, r5
    9de8:	mov	r1, r4
    9dea:	mov	r0, r6
    9dec:	ldr	r3, [r3, #32]
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    9dee:	adds	r4, #1
    9df0:	add.w	r5, r5, #512	; 0x200
        if (!writeSector(sector, ptr)) {
    9df4:	blx	r3
    9df6:	cmp	r0, #0
    9df8:	bne.n	9de0 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x44>
          return false;  // writeSector will set errorCode.
    9dfa:	movs	r0, #0
    9dfc:	b.n	9dce <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x32>
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
    9dfe:	ldr	r0, [pc, #24]	; (9e18 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x7c>)
    9e00:	bl	9a70 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    9e04:	cmp	r0, #0
    9e06:	bne.n	9dd0 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
  m_errorCode = code;
    9e08:	ldr	r1, [pc, #16]	; (9e1c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x80>)
    9e0a:	movs	r4, #14
  m_errorLine = line;
    9e0c:	ldr	r3, [pc, #16]	; (9e20 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x84>)
    9e0e:	movw	r2, #1124	; 0x464
  m_errorCode = code;
    9e12:	strb	r4, [r1, #0]
  m_errorLine = line;
    9e14:	str	r2, [r3, #0]
}
    9e16:	pop	{r3, r4, r5, r6, r7, pc}
    9e18:	.word	0x193a0027
    9e1c:	.word	0x2000220c
    9e20:	.word	0x20006690

00009e24 <SdioCard::readStop()>:
bool SdioCard::readStop() { return transferStop(); }
    9e24:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    9e28:	ldr	r4, [pc, #148]	; (9ec0 <SdioCard::readStop()+0x9c>)
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    9e2a:	movs	r1, #0
    9e2c:	ldr	r0, [pc, #148]	; (9ec4 <SdioCard::readStop()+0xa0>)
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    9e2e:	ldr	r3, [r4, #40]	; 0x28
    9e30:	bic.w	r3, r3, #65536	; 0x10000
    9e34:	str	r3, [r4, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    9e36:	bl	987c <cardCommand(unsigned long, unsigned long)>
    9e3a:	mov	r5, r0
    9e3c:	cbnz	r0, 9e52 <SdioCard::readStop()+0x2e>
  m_errorCode = code;
    9e3e:	ldr	r1, [pc, #136]	; (9ec8 <SdioCard::readStop()+0xa4>)
    9e40:	movs	r0, #9
  m_errorLine = line;
    9e42:	ldr	r3, [pc, #136]	; (9ecc <SdioCard::readStop()+0xa8>)
    9e44:	movw	r2, #621	; 0x26d
  m_errorCode = code;
    9e48:	strb	r0, [r1, #0]
  m_errorLine = line;
    9e4a:	str	r2, [r3, #0]
bool SdioCard::readStop() { return transferStop(); }
    9e4c:	mov	r0, r5
    9e4e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_busyFcn = fcn;
    9e52:	ldr	r3, [pc, #124]	; (9ed0 <SdioCard::readStop()+0xac>)
    9e54:	ldr.w	r8, [pc, #128]	; 9ed8 <SdioCard::readStop()+0xb4>
    9e58:	str.w	r3, [r8]
  uint32_t m = micros();
    9e5c:	bl	cdb0 <micros>
static bool isBusyDat() { return SDHC_PRSSTAT & (1 << 24) ? false : true; }
    9e60:	ldr	r3, [r4, #36]	; 0x24
  uint32_t m = micros();
    9e62:	mov	r6, r0
  while (fcn()) {
    9e64:	lsls	r0, r3, #7
    9e66:	bmi.n	9e9a <SdioCard::readStop()+0x76>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    9e68:	ldr	r7, [pc, #104]	; (9ed4 <SdioCard::readStop()+0xb0>)
    9e6a:	b.n	9e76 <SdioCard::readStop()+0x52>
    yield();
    9e6c:	bl	daa4 <yield>
static bool isBusyDat() { return SDHC_PRSSTAT & (1 << 24) ? false : true; }
    9e70:	ldr	r3, [r4, #36]	; 0x24
  while (fcn()) {
    9e72:	lsls	r1, r3, #7
    9e74:	bmi.n	9e9a <SdioCard::readStop()+0x76>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    9e76:	bl	cdb0 <micros>
    9e7a:	subs	r3, r0, r6
    9e7c:	cmp	r3, r7
    9e7e:	bls.n	9e6c <SdioCard::readStop()+0x48>
  m_errorCode = code;
    9e80:	ldr	r2, [pc, #68]	; (9ec8 <SdioCard::readStop()+0xa4>)
    9e82:	movs	r1, #10
      m_busyFcn = 0;
    9e84:	movs	r5, #0
  m_errorLine = line;
    9e86:	ldr	r3, [pc, #68]	; (9ecc <SdioCard::readStop()+0xa8>)
  m_errorCode = code;
    9e88:	strb	r1, [r2, #0]
  m_errorLine = line;
    9e8a:	mov.w	r2, #624	; 0x270
bool SdioCard::readStop() { return transferStop(); }
    9e8e:	mov	r0, r5
      m_busyFcn = 0;
    9e90:	str.w	r5, [r8]
  m_errorLine = line;
    9e94:	str	r2, [r3, #0]
bool SdioCard::readStop() { return transferStop(); }
    9e96:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_busyFcn = 0;
    9e9a:	movs	r2, #0
  if (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB) {
    9e9c:	ldr	r3, [pc, #32]	; (9ec0 <SdioCard::readStop()+0x9c>)
  m_busyFcn = 0;
    9e9e:	str.w	r2, [r8]
  if (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB) {
    9ea2:	ldr	r2, [r3, #36]	; 0x24
    9ea4:	lsls	r2, r2, #30
    9ea6:	bpl.n	9e4c <SdioCard::readStop()+0x28>
    uint32_t irqsststen = SDHC_IRQSTATEN;
    9ea8:	ldr	r0, [r3, #52]	; 0x34
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    9eaa:	ldr	r2, [r3, #40]	; 0x28
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    9eac:	ldr	r1, [r3, #44]	; 0x2c
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    9eae:	bic.w	r2, r2, #65536	; 0x10000
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    9eb2:	orr.w	r1, r1, #67108864	; 0x4000000
    9eb6:	str	r1, [r3, #44]	; 0x2c
    SDHC_IRQSTATEN = irqsststen;
    9eb8:	str	r0, [r3, #52]	; 0x34
    SDHC_PROCTL = proctl;
    9eba:	str	r2, [r3, #40]	; 0x28
    9ebc:	b.n	9e4c <SdioCard::readStop()+0x28>
    9ebe:	nop
    9ec0:	.word	0x402c0000
    9ec4:	.word	0x0cdb0000
    9ec8:	.word	0x2000220c
    9ecc:	.word	0x20006690
    9ed0:	.word	0x00009565
    9ed4:	.word	0x000f4240
    9ed8:	.word	0x20007714

00009edc <SdioCard::writeStart(unsigned long)>:
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
    9edc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  m_busyFcn = fcn;
    9ee0:	ldr	r3, [pc, #164]	; (9f88 <SdioCard::writeStart(unsigned long)+0xac>)
bool SdioCard::writeStart(uint32_t sector) {
    9ee2:	mov	r9, r1
  m_busyFcn = fcn;
    9ee4:	ldr.w	sl, [pc, #192]	; 9fa8 <SdioCard::writeStart(unsigned long)+0xcc>
    9ee8:	ldr	r6, [pc, #160]	; (9f8c <SdioCard::writeStart(unsigned long)+0xb0>)
    9eea:	str.w	r3, [sl]
  uint32_t m = micros();
    9eee:	bl	cdb0 <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    9ef2:	ldr	r5, [pc, #156]	; (9f90 <SdioCard::writeStart(unsigned long)+0xb4>)
  uint32_t m = micros();
    9ef4:	mov	r4, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    9ef6:	ldr.w	r8, [pc, #180]	; 9fac <SdioCard::writeStart(unsigned long)+0xd0>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    9efa:	ldr	r7, [pc, #152]	; (9f94 <SdioCard::writeStart(unsigned long)+0xb8>)
  while (fcn()) {
    9efc:	b.n	9f0c <SdioCard::writeStart(unsigned long)+0x30>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    9efe:	bl	cdb0 <micros>
    9f02:	subs	r0, r0, r4
    9f04:	cmp	r0, r7
    9f06:	bhi.n	9f5c <SdioCard::writeStart(unsigned long)+0x80>
    yield();
    9f08:	bl	daa4 <yield>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    9f0c:	ldr	r1, [r6, #0]
    9f0e:	mov	r0, r5
    9f10:	bl	987c <cardCommand(unsigned long, unsigned long)>
    9f14:	cmp	r0, #0
    9f16:	beq.n	9efe <SdioCard::writeStart(unsigned long)+0x22>
    9f18:	ldr.w	r3, [r8, #16]
  while (fcn()) {
    9f1c:	lsls	r3, r3, #23
    9f1e:	bpl.n	9efe <SdioCard::writeStart(unsigned long)+0x22>
  m_busyFcn = 0;
    9f20:	movs	r3, #0
  }
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;

#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    9f22:	mov.w	r2, #512	; 0x200
  m_busyFcn = 0;
    9f26:	str.w	r3, [sl]
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    9f2a:	ldr.w	r3, [r8, #40]	; 0x28
    9f2e:	bic.w	r3, r3, #65536	; 0x10000
    9f32:	str.w	r3, [r8, #40]	; 0x28
#else   // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(MAX_BLKCNT) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512 * sector)) {
    9f36:	ldr	r3, [pc, #96]	; (9f98 <SdioCard::writeStart(unsigned long)+0xbc>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    9f38:	str.w	r2, [r8, #4]
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512 * sector)) {
    9f3c:	ldrb	r3, [r3, #0]
    9f3e:	cbz	r3, 9f74 <SdioCard::writeStart(unsigned long)+0x98>
    9f40:	mov	r1, r9
    9f42:	ldr	r0, [pc, #88]	; (9f9c <SdioCard::writeStart(unsigned long)+0xc0>)
    9f44:	bl	987c <cardCommand(unsigned long, unsigned long)>
    9f48:	cbnz	r0, 9f58 <SdioCard::writeStart(unsigned long)+0x7c>
  m_errorCode = code;
    9f4a:	ldr	r1, [pc, #84]	; (9fa0 <SdioCard::writeStart(unsigned long)+0xc4>)
    9f4c:	movs	r4, #14
  m_errorLine = line;
    9f4e:	ldr	r3, [pc, #84]	; (9fa4 <SdioCard::writeStart(unsigned long)+0xc8>)
    9f50:	movw	r2, #1150	; 0x47e
  m_errorCode = code;
    9f54:	strb	r4, [r1, #0]
  m_errorLine = line;
    9f56:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD25);
  }
  return true;
}
    9f58:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_errorCode = code;
    9f5c:	ldr	r2, [pc, #64]	; (9fa0 <SdioCard::writeStart(unsigned long)+0xc4>)
    9f5e:	movs	r1, #10
      m_busyFcn = 0;
    9f60:	movs	r0, #0
  m_errorLine = line;
    9f62:	ldr	r3, [pc, #64]	; (9fa4 <SdioCard::writeStart(unsigned long)+0xc8>)
  m_errorCode = code;
    9f64:	strb	r1, [r2, #0]
  m_errorLine = line;
    9f66:	movw	r2, #1138	; 0x472
      m_busyFcn = 0;
    9f6a:	str.w	r0, [sl]
  m_errorLine = line;
    9f6e:	str	r2, [r3, #0]
}
    9f70:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512 * sector)) {
    9f74:	mov.w	r9, r9, lsl #9
    9f78:	ldr	r0, [pc, #32]	; (9f9c <SdioCard::writeStart(unsigned long)+0xc0>)
    9f7a:	mov	r1, r9
    9f7c:	bl	987c <cardCommand(unsigned long, unsigned long)>
    9f80:	cmp	r0, #0
    9f82:	bne.n	9f58 <SdioCard::writeStart(unsigned long)+0x7c>
    9f84:	b.n	9f4a <SdioCard::writeStart(unsigned long)+0x6e>
    9f86:	nop
    9f88:	.word	0x00009915
    9f8c:	.word	0x200074c4
    9f90:	.word	0x0d1a0000
    9f94:	.word	0x000f4240
    9f98:	.word	0x20015d10
    9f9c:	.word	0x193a0020
    9fa0:	.word	0x2000220c
    9fa4:	.word	0x20006690
    9fa8:	.word	0x20007714
    9fac:	.word	0x402c0000

00009fb0 <SdioCard::cardCMD6(unsigned long, unsigned char*)>:
bool SdioCard::cardCMD6(uint32_t arg, uint8_t* status) {
    9fb0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9fb4:	mov	sl, r1
    9fb6:	mov	r9, r2
    9fb8:	ldr	r6, [pc, #216]	; (a094 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xe4>)
  uint32_t m = micros();
    9fba:	bl	cdb0 <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    9fbe:	ldr	r5, [pc, #216]	; (a098 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xe8>)
  uint32_t m = micros();
    9fc0:	mov	r4, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    9fc2:	ldr.w	r8, [pc, #256]	; a0c4 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x114>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    9fc6:	ldr	r7, [pc, #212]	; (a09c <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xec>)
  while (fcn()) {
    9fc8:	b.n	9fd4 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x24>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    9fca:	bl	cdb0 <micros>
    9fce:	subs	r0, r0, r4
    9fd0:	cmp	r0, r7
    9fd2:	bhi.n	a024 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x74>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    9fd4:	ldr	r1, [r6, #0]
    9fd6:	mov	r0, r5
    9fd8:	bl	987c <cardCommand(unsigned long, unsigned long)>
    9fdc:	cmp	r0, #0
    9fde:	beq.n	9fca <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x1a>
    9fe0:	ldr.w	r3, [r8, #16]
  while (fcn()) {
    9fe4:	lsls	r2, r3, #23
    9fe6:	bpl.n	9fca <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x1a>
  m_dmaBusy = true;
    9fe8:	movs	r3, #1
    9fea:	ldr	r5, [pc, #180]	; (a0a0 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xf0>)
  m_irqstat = 0;
    9fec:	ldr	r7, [pc, #180]	; (a0a4 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xf4>)
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    9fee:	mov	r1, sl
  m_dmaBusy = true;
    9ff0:	strb	r3, [r5, #0]
  m_irqstat = 0;
    9ff2:	movs	r3, #0
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    9ff4:	ldr	r0, [pc, #176]	; (a0a8 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xf8>)
  m_irqstat = 0;
    9ff6:	str	r3, [r7, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    9ff8:	ldr	r3, [pc, #176]	; (a0ac <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xfc>)
  SDHC_DSADDR = (uint32_t)status;
    9ffa:	str.w	r9, [r8]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    9ffe:	str.w	r3, [r8, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    a002:	ldr	r3, [pc, #172]	; (a0b0 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x100>)
    a004:	str.w	r3, [r8, #56]	; 0x38
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    a008:	bl	987c <cardCommand(unsigned long, unsigned long)>
    a00c:	mov	r4, r0
    a00e:	cbnz	r0, a03a <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x8a>
  m_errorCode = code;
    a010:	ldr	r1, [pc, #160]	; (a0b4 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x104>)
    a012:	movs	r0, #4
  m_errorLine = line;
    a014:	ldr	r3, [pc, #160]	; (a0b8 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x108>)
    a016:	movw	r2, #795	; 0x31b
  m_errorCode = code;
    a01a:	strb	r0, [r1, #0]
}
    a01c:	mov	r0, r4
  m_errorLine = line;
    a01e:	str	r2, [r3, #0]
}
    a020:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_errorCode = code;
    a024:	ldr	r1, [pc, #140]	; (a0b4 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x104>)
    a026:	movs	r0, #10
  m_errorLine = line;
    a028:	ldr	r3, [pc, #140]	; (a0b8 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x108>)
    a02a:	mov.w	r2, #788	; 0x314
    return sdError(SD_CARD_ERROR_CMD13);
    a02e:	movs	r4, #0
  m_errorCode = code;
    a030:	strb	r0, [r1, #0]
  m_errorLine = line;
    a032:	str	r2, [r3, #0]
}
    a034:	mov	r0, r4
    a036:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_busyFcn = fcn;
    a03a:	ldr	r3, [pc, #128]	; (a0bc <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x10c>)
    a03c:	ldr.w	r9, [pc, #136]	; a0c8 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x118>
    a040:	str.w	r3, [r9]
  uint32_t m = micros();
    a044:	bl	cdb0 <micros>
static bool isBusyDMA() { return m_dmaBusy; }
    a048:	ldrb	r3, [r5, #0]
  uint32_t m = micros();
    a04a:	mov	r6, r0
  while (fcn()) {
    a04c:	cbz	r3, a07e <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xce>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    a04e:	ldr.w	r8, [pc, #76]	; a09c <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xec>
    a052:	b.n	a05c <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xac>
    yield();
    a054:	bl	daa4 <yield>
static bool isBusyDMA() { return m_dmaBusy; }
    a058:	ldrb	r3, [r5, #0]
  while (fcn()) {
    a05a:	cbz	r3, a07e <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xce>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    a05c:	bl	cdb0 <micros>
    a060:	subs	r3, r0, r6
    a062:	cmp	r3, r8
    a064:	bls.n	a054 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xa4>
      m_busyFcn = 0;
    a066:	movs	r3, #0
    a068:	str.w	r3, [r9]
  m_errorCode = code;
    a06c:	ldr	r1, [pc, #68]	; (a0b4 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x104>)
    a06e:	movs	r0, #38	; 0x26
  m_errorLine = line;
    a070:	ldr	r3, [pc, #68]	; (a0b8 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x108>)
    a072:	movw	r2, #798	; 0x31e
    return sdError(SD_CARD_ERROR_DMA);
    a076:	movs	r4, #0
  m_errorCode = code;
    a078:	strb	r0, [r1, #0]
  m_errorLine = line;
    a07a:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_DMA);
    a07c:	b.n	a034 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x84>
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    a07e:	ldr	r3, [r7, #0]
  m_busyFcn = 0;
    a080:	movs	r2, #0
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    a082:	lsls	r3, r3, #30
  m_busyFcn = 0;
    a084:	str.w	r2, [r9]
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    a088:	bpl.n	a06c <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xbc>
    a08a:	ldr	r2, [r7, #0]
    a08c:	ldr	r3, [pc, #48]	; (a0c0 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x110>)
    a08e:	tst	r2, r3
    a090:	beq.n	a034 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x84>
    a092:	b.n	a06c <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xbc>
    a094:	.word	0x200074c4
    a098:	.word	0x0d1a0000
    a09c:	.word	0x000f4240
    a0a0:	.word	0x20015d13
    a0a4:	.word	0x20007718
    a0a8:	.word	0x063a0011
    a0ac:	.word	0x00010040
    a0b0:	.word	0x117f0002
    a0b4:	.word	0x2000220c
    a0b8:	.word	0x20006690
    a0bc:	.word	0x00009579
    a0c0:	.word	0x117f0000
    a0c4:	.word	0x402c0000
    a0c8:	.word	0x20007714

0000a0cc <SdioCard::isBusy()>:
bool SdioCard::isBusy() {
    a0cc:	push	{r4, lr}
    a0ce:	ldrb	r3, [r0, #8]
  if (m_sdioConfig.useDma()) {
    a0d0:	lsls	r3, r3, #31
    a0d2:	bpl.n	a0e0 <SdioCard::isBusy()+0x14>
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    a0d4:	ldr	r3, [pc, #84]	; (a12c <SdioCard::isBusy()+0x60>)
    a0d6:	ldr	r3, [r3, #0]
    a0d8:	cbz	r3, a108 <SdioCard::isBusy()+0x3c>
}
    a0da:	ldmia.w	sp!, {r4, lr}
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    a0de:	bx	r3
    if (m_transferActive) {
    a0e0:	ldr	r3, [pc, #76]	; (a130 <SdioCard::isBusy()+0x64>)
    a0e2:	ldrb	r3, [r3, #0]
    a0e4:	cbz	r3, a0f8 <SdioCard::isBusy()+0x2c>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    a0e6:	ldr	r3, [pc, #76]	; (a134 <SdioCard::isBusy()+0x68>)
    a0e8:	ldr	r4, [pc, #76]	; (a138 <SdioCard::isBusy()+0x6c>)
    a0ea:	ldr	r3, [r3, #48]	; 0x30
    a0ec:	ands	r4, r3
      if (isBusyTransferComplete()) {
    a0ee:	clz	r4, r4
    a0f2:	lsrs	r4, r4, #5
}
    a0f4:	mov	r0, r4
    a0f6:	pop	{r4, pc}
    return SDHC_PRSSTAT & (1 << 24) ? false : true;
    a0f8:	ldr	r3, [pc, #56]	; (a134 <SdioCard::isBusy()+0x68>)
    a0fa:	ldr	r4, [r3, #36]	; 0x24
    a0fc:	eor.w	r4, r4, #16777216	; 0x1000000
    a100:	ubfx	r4, r4, #24, #1
}
    a104:	mov	r0, r4
    a106:	pop	{r4, pc}
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    a108:	ldr	r3, [pc, #48]	; (a13c <SdioCard::isBusy()+0x70>)
    a10a:	ldrb	r4, [r3, #0]
    a10c:	cmp	r4, #0
    a10e:	beq.n	a0f4 <SdioCard::isBusy()+0x28>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    a110:	ldr	r3, [pc, #44]	; (a140 <SdioCard::isBusy()+0x74>)
    a112:	ldr	r0, [pc, #48]	; (a144 <SdioCard::isBusy()+0x78>)
    a114:	ldr	r1, [r3, #0]
    a116:	bl	987c <cardCommand(unsigned long, unsigned long)>
    a11a:	cmp	r0, #0
    a11c:	beq.n	a0f4 <SdioCard::isBusy()+0x28>
    a11e:	ldr	r3, [pc, #20]	; (a134 <SdioCard::isBusy()+0x68>)
    a120:	ldr	r4, [r3, #16]
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    a122:	eor.w	r4, r4, #256	; 0x100
    a126:	ubfx	r4, r4, #8, #1
    a12a:	b.n	a0f4 <SdioCard::isBusy()+0x28>
    a12c:	.word	0x20007714
    a130:	.word	0x20015d11
    a134:	.word	0x402c0000
    a138:	.word	0x117f0002
    a13c:	.word	0x20015d0e
    a140:	.word	0x200074c4
    a144:	.word	0x0d1a0000

0000a148 <SdioCard::syncDevice()>:
bool SdioCard::syncDevice() {
    a148:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (!m_transferActive) {
    a14c:	ldr.w	sl, [pc, #276]	; a264 <SdioCard::syncDevice()+0x11c>
bool SdioCard::syncDevice() {
    a150:	mov	r9, r0
  if (!m_transferActive) {
    a152:	ldrb.w	r3, [sl]
    a156:	cbnz	r3, a166 <SdioCard::syncDevice()+0x1e>
  if (m_curState != IDLE_STATE) {
    a158:	ldrb.w	r3, [r9, #9]
    a15c:	cbnz	r3, a1b4 <SdioCard::syncDevice()+0x6c>
  return true;
    a15e:	movs	r4, #1
}
    a160:	mov	r0, r4
    a162:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  uint32_t m = micros();
    a166:	bl	cdb0 <micros>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    a16a:	ldr	r6, [pc, #212]	; (a240 <SdioCard::syncDevice()+0xf8>)
    a16c:	ldr	r5, [pc, #212]	; (a244 <SdioCard::syncDevice()+0xfc>)
  uint32_t m = micros();
    a16e:	mov	r7, r0
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    a170:	ldr.w	r8, [pc, #236]	; a260 <SdioCard::syncDevice()+0x118>
  while (fcn()) {
    a174:	b.n	a180 <SdioCard::syncDevice()+0x38>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    a176:	bl	cdb0 <micros>
    a17a:	subs	r3, r0, r7
    a17c:	cmp	r3, r8
    a17e:	bhi.n	a212 <SdioCard::syncDevice()+0xca>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    a180:	ldr	r4, [r6, #48]	; 0x30
  while (fcn()) {
    a182:	ands	r4, r5
    a184:	beq.n	a176 <SdioCard::syncDevice()+0x2e>
  m_transferActive = false;
    a186:	movs	r2, #0
  m_irqstat = SDHC_IRQSTAT;
    a188:	ldr	r3, [pc, #188]	; (a248 <SdioCard::syncDevice()+0x100>)
  m_transferActive = false;
    a18a:	strb.w	r2, [sl]
  m_irqstat = SDHC_IRQSTAT;
    a18e:	ldr	r2, [r6, #48]	; 0x30
    a190:	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    a192:	ldr	r1, [r3, #0]
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    a194:	ldr	r2, [pc, #180]	; (a24c <SdioCard::syncDevice()+0x104>)
  SDHC_IRQSTAT = m_irqstat;
    a196:	str	r1, [r6, #48]	; 0x30
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    a198:	ldr	r3, [r3, #0]
    a19a:	tst	r3, r2
    a19c:	beq.n	a158 <SdioCard::syncDevice()+0x10>
  m_errorCode = code;
    a19e:	ldr	r1, [pc, #176]	; (a250 <SdioCard::syncDevice()+0x108>)
    a1a0:	movs	r0, #32
  m_errorLine = line;
    a1a2:	ldr	r3, [pc, #176]	; (a254 <SdioCard::syncDevice()+0x10c>)
    a1a4:	movw	r2, #682	; 0x2aa
    return false;
    a1a8:	movs	r4, #0
  m_errorCode = code;
    a1aa:	strb	r0, [r1, #0]
  m_errorLine = line;
    a1ac:	str	r2, [r3, #0]
}
    a1ae:	mov	r0, r4
    a1b0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_curState = IDLE_STATE;
    a1b4:	movs	r1, #0
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    a1b6:	ldr	r5, [pc, #136]	; (a240 <SdioCard::syncDevice()+0xf8>)
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    a1b8:	ldr	r0, [pc, #156]	; (a258 <SdioCard::syncDevice()+0x110>)
  m_curState = IDLE_STATE;
    a1ba:	strb.w	r1, [r9, #9]
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    a1be:	ldr	r3, [r5, #40]	; 0x28
    a1c0:	bic.w	r3, r3, #65536	; 0x10000
    a1c4:	str	r3, [r5, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    a1c6:	bl	987c <cardCommand(unsigned long, unsigned long)>
    a1ca:	mov	r4, r0
    a1cc:	cbz	r0, a222 <SdioCard::syncDevice()+0xda>
  m_busyFcn = fcn;
    a1ce:	ldr	r3, [pc, #140]	; (a25c <SdioCard::syncDevice()+0x114>)
    a1d0:	ldr.w	r8, [pc, #148]	; a268 <SdioCard::syncDevice()+0x120>
    a1d4:	str.w	r3, [r8]
  uint32_t m = micros();
    a1d8:	bl	cdb0 <micros>
static bool isBusyDat() { return SDHC_PRSSTAT & (1 << 24) ? false : true; }
    a1dc:	ldr	r3, [r5, #36]	; 0x24
  uint32_t m = micros();
    a1de:	mov	r6, r0
  while (fcn()) {
    a1e0:	lsls	r2, r3, #7
    a1e2:	bmi.n	a236 <SdioCard::syncDevice()+0xee>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    a1e4:	ldr	r7, [pc, #120]	; (a260 <SdioCard::syncDevice()+0x118>)
    a1e6:	b.n	a1f2 <SdioCard::syncDevice()+0xaa>
    yield();
    a1e8:	bl	daa4 <yield>
static bool isBusyDat() { return SDHC_PRSSTAT & (1 << 24) ? false : true; }
    a1ec:	ldr	r3, [r5, #36]	; 0x24
  while (fcn()) {
    a1ee:	lsls	r3, r3, #7
    a1f0:	bmi.n	a236 <SdioCard::syncDevice()+0xee>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    a1f2:	bl	cdb0 <micros>
    a1f6:	subs	r3, r0, r6
    a1f8:	cmp	r3, r7
    a1fa:	bls.n	a1e8 <SdioCard::syncDevice()+0xa0>
  m_errorCode = code;
    a1fc:	ldr	r2, [pc, #80]	; (a250 <SdioCard::syncDevice()+0x108>)
    a1fe:	movs	r1, #10
      m_busyFcn = 0;
    a200:	movs	r4, #0
  m_errorLine = line;
    a202:	ldr	r3, [pc, #80]	; (a254 <SdioCard::syncDevice()+0x10c>)
  m_errorCode = code;
    a204:	strb	r1, [r2, #0]
  m_errorLine = line;
    a206:	movw	r2, #1022	; 0x3fe
      m_busyFcn = 0;
    a20a:	str.w	r4, [r8]
  m_errorLine = line;
    a20e:	str	r2, [r3, #0]
      return sdError(SD_CARD_ERROR_CMD13);
    a210:	b.n	a160 <SdioCard::syncDevice()+0x18>
  m_irqstat = SDHC_IRQSTAT;
    a212:	ldr	r2, [r6, #48]	; 0x30
    a214:	ldr	r3, [pc, #48]	; (a248 <SdioCard::syncDevice()+0x100>)
  m_transferActive = false;
    a216:	strb.w	r4, [sl]
  m_irqstat = SDHC_IRQSTAT;
    a21a:	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    a21c:	ldr	r3, [r3, #0]
    a21e:	str	r3, [r6, #48]	; 0x30
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    a220:	b.n	a19e <SdioCard::syncDevice()+0x56>
  m_errorCode = code;
    a222:	ldr	r1, [pc, #44]	; (a250 <SdioCard::syncDevice()+0x108>)
    a224:	movs	r0, #9
  m_errorLine = line;
    a226:	ldr	r3, [pc, #44]	; (a254 <SdioCard::syncDevice()+0x10c>)
    a228:	movw	r2, #1018	; 0x3fa
  m_errorCode = code;
    a22c:	strb	r0, [r1, #0]
}
    a22e:	mov	r0, r4
  m_errorLine = line;
    a230:	str	r2, [r3, #0]
}
    a232:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_busyFcn = 0;
    a236:	movs	r3, #0
    a238:	str.w	r3, [r8]
  return false;  // Caller will set errorCode.
    a23c:	b.n	a160 <SdioCard::syncDevice()+0x18>
    a23e:	nop
    a240:	.word	0x402c0000
    a244:	.word	0x117f0002
    a248:	.word	0x20007718
    a24c:	.word	0x117f0000
    a250:	.word	0x2000220c
    a254:	.word	0x20006690
    a258:	.word	0x0cdb0000
    a25c:	.word	0x00009565
    a260:	.word	0x000f4240
    a264:	.word	0x20015d11
    a268:	.word	0x20007714

0000a26c <SdioCard::writeData(unsigned char const*)>:
bool SdioCard::writeData(const uint8_t* src) {
    a26c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (!m_transferActive) {
    a270:	ldr	r5, [pc, #324]	; (a3b8 <SdioCard::writeData(unsigned char const*)+0x14c>)
bool SdioCard::writeData(const uint8_t* src) {
    a272:	mov	r7, r1
  if (!m_transferActive) {
    a274:	ldrb	r3, [r5, #0]
    a276:	cmp	r3, #0
    a278:	bne.n	a33c <SdioCard::writeData(unsigned char const*)+0xd0>
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    a27a:	ldr	r3, [pc, #320]	; (a3bc <SdioCard::writeData(unsigned char const*)+0x150>)
    a27c:	ldr	r2, [r3, #36]	; 0x24
    a27e:	lsls	r0, r2, #23
    a280:	bpl.n	a32a <SdioCard::writeData(unsigned char const*)+0xbe>
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    a282:	ldr	r4, [pc, #312]	; (a3bc <SdioCard::writeData(unsigned char const*)+0x150>)
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    a284:	ldr.w	r8, [pc, #332]	; a3d4 <SdioCard::writeData(unsigned char const*)+0x168>
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    a288:	ldr	r3, [r4, #40]	; 0x28
    a28a:	orr.w	r3, r3, #65536	; 0x10000
    a28e:	str	r3, [r4, #40]	; 0x28
  uint32_t m = micros();
    a290:	bl	cdb0 <micros>
    a294:	mov	r6, r0
  while (fcn()) {
    a296:	b.n	a2a2 <SdioCard::writeData(unsigned char const*)+0x36>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    a298:	bl	cdb0 <micros>
    a29c:	subs	r0, r0, r6
    a29e:	cmp	r0, r8
    a2a0:	bhi.n	a392 <SdioCard::writeData(unsigned char const*)+0x126>
static bool isBusyFifoWrite() { return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN); }
    a2a2:	ldr	r3, [r4, #36]	; 0x24
  while (fcn()) {
    a2a4:	ands.w	r9, r3, #1024	; 0x400
    a2a8:	beq.n	a298 <SdioCard::writeData(unsigned char const*)+0x2c>
    a2aa:	add.w	r2, r7, #64	; 0x40
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    a2ae:	ldr	r3, [pc, #268]	; (a3bc <SdioCard::writeData(unsigned char const*)+0x150>)
    a2b0:	add.w	r7, r7, #576	; 0x240
    a2b4:	ldr	r0, [r3, #36]	; 0x24
    a2b6:	lsls	r1, r0, #21
    a2b8:	bpl.n	a2b4 <SdioCard::writeData(unsigned char const*)+0x48>
      SDHC_DATPORT = p32[i];
    a2ba:	ldr.w	r1, [r2, #-64]
  for (uint32_t iw = 0; iw < 512 / (4 * FIFO_WML); iw++) {
    a2be:	adds	r2, #64	; 0x40
      SDHC_DATPORT = p32[i];
    a2c0:	str	r1, [r3, #32]
  for (uint32_t iw = 0; iw < 512 / (4 * FIFO_WML); iw++) {
    a2c2:	cmp	r7, r2
      SDHC_DATPORT = p32[i];
    a2c4:	ldr.w	r1, [r2, #-124]
    a2c8:	str	r1, [r3, #32]
    a2ca:	ldr.w	r1, [r2, #-120]
    a2ce:	str	r1, [r3, #32]
    a2d0:	ldr.w	r1, [r2, #-116]
    a2d4:	str	r1, [r3, #32]
    a2d6:	ldr.w	r1, [r2, #-112]
    a2da:	str	r1, [r3, #32]
    a2dc:	ldr.w	r1, [r2, #-108]
    a2e0:	str	r1, [r3, #32]
    a2e2:	ldr.w	r1, [r2, #-104]
    a2e6:	str	r1, [r3, #32]
    a2e8:	ldr.w	r1, [r2, #-100]
    a2ec:	str	r1, [r3, #32]
    a2ee:	ldr.w	r1, [r2, #-96]
    a2f2:	str	r1, [r3, #32]
    a2f4:	ldr.w	r1, [r2, #-92]
    a2f8:	str	r1, [r3, #32]
    a2fa:	ldr.w	r1, [r2, #-88]
    a2fe:	str	r1, [r3, #32]
    a300:	ldr.w	r1, [r2, #-84]
    a304:	str	r1, [r3, #32]
    a306:	ldr.w	r1, [r2, #-80]
    a30a:	str	r1, [r3, #32]
    a30c:	ldr.w	r1, [r2, #-76]
    a310:	str	r1, [r3, #32]
    a312:	ldr.w	r1, [r2, #-72]
    a316:	str	r1, [r3, #32]
    a318:	ldr.w	r1, [r2, #-68]
    a31c:	str	r1, [r3, #32]
  for (uint32_t iw = 0; iw < 512 / (4 * FIFO_WML); iw++) {
    a31e:	bne.n	a2b4 <SdioCard::writeData(unsigned char const*)+0x48>
  m_transferActive = true;
    a320:	movs	r3, #1
    a322:	mov	r0, r3
    a324:	strb	r3, [r5, #0]
}
    a326:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    a32a:	ldr	r2, [r3, #40]	; 0x28
    a32c:	bic.w	r2, r2, #65536	; 0x10000
    a330:	str	r2, [r3, #40]	; 0x28
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    a332:	ldr	r2, [r3, #40]	; 0x28
    a334:	orr.w	r2, r2, #131072	; 0x20000
    a338:	str	r2, [r3, #40]	; 0x28
    a33a:	b.n	a282 <SdioCard::writeData(unsigned char const*)+0x16>
  uint32_t m = micros();
    a33c:	bl	cdb0 <micros>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    a340:	ldr.w	r8, [pc, #120]	; a3bc <SdioCard::writeData(unsigned char const*)+0x150>
    a344:	ldr	r6, [pc, #120]	; (a3c0 <SdioCard::writeData(unsigned char const*)+0x154>)
  uint32_t m = micros();
    a346:	mov	r9, r0
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    a348:	ldr.w	sl, [pc, #136]	; a3d4 <SdioCard::writeData(unsigned char const*)+0x168>
  while (fcn()) {
    a34c:	b.n	a35a <SdioCard::writeData(unsigned char const*)+0xee>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    a34e:	bl	cdb0 <micros>
    a352:	sub.w	r0, r0, r9
    a356:	cmp	r0, sl
    a358:	bhi.n	a3a6 <SdioCard::writeData(unsigned char const*)+0x13a>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    a35a:	ldr.w	r4, [r8, #48]	; 0x30
  while (fcn()) {
    a35e:	ands	r4, r6
    a360:	beq.n	a34e <SdioCard::writeData(unsigned char const*)+0xe2>
  m_transferActive = false;
    a362:	movs	r2, #0
  m_irqstat = SDHC_IRQSTAT;
    a364:	ldr	r3, [pc, #92]	; (a3c4 <SdioCard::writeData(unsigned char const*)+0x158>)
  m_transferActive = false;
    a366:	strb	r2, [r5, #0]
  m_irqstat = SDHC_IRQSTAT;
    a368:	ldr.w	r2, [r8, #48]	; 0x30
    a36c:	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    a36e:	ldr	r2, [r3, #0]
    a370:	str.w	r2, [r8, #48]	; 0x30
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    a374:	ldr	r2, [pc, #80]	; (a3c8 <SdioCard::writeData(unsigned char const*)+0x15c>)
    a376:	ldr	r3, [r3, #0]
    a378:	tst	r3, r2
    a37a:	beq.w	a27a <SdioCard::writeData(unsigned char const*)+0xe>
  m_errorCode = code;
    a37e:	ldr	r1, [pc, #76]	; (a3cc <SdioCard::writeData(unsigned char const*)+0x160>)
    a380:	movs	r4, #32
  m_errorLine = line;
    a382:	ldr	r3, [pc, #76]	; (a3d0 <SdioCard::writeData(unsigned char const*)+0x164>)
    a384:	movw	r2, #682	; 0x2aa
    return false;
    a388:	movs	r0, #0
  m_errorCode = code;
    a38a:	strb	r4, [r1, #0]
  m_errorLine = line;
    a38c:	str	r2, [r3, #0]
}
    a38e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_errorCode = code;
    a392:	ldr	r1, [pc, #56]	; (a3cc <SdioCard::writeData(unsigned char const*)+0x160>)
    a394:	movs	r4, #34	; 0x22
  m_errorLine = line;
    a396:	ldr	r3, [pc, #56]	; (a3d0 <SdioCard::writeData(unsigned char const*)+0x164>)
    a398:	movw	r2, #1055	; 0x41f
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
    a39c:	mov	r0, r9
  m_errorCode = code;
    a39e:	strb	r4, [r1, #0]
  m_errorLine = line;
    a3a0:	str	r2, [r3, #0]
}
    a3a2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_irqstat = SDHC_IRQSTAT;
    a3a6:	ldr.w	r2, [r8, #48]	; 0x30
    a3aa:	ldr	r3, [pc, #24]	; (a3c4 <SdioCard::writeData(unsigned char const*)+0x158>)
  m_transferActive = false;
    a3ac:	strb	r4, [r5, #0]
  m_irqstat = SDHC_IRQSTAT;
    a3ae:	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    a3b0:	ldr	r3, [r3, #0]
    a3b2:	str.w	r3, [r8, #48]	; 0x30
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    a3b6:	b.n	a37e <SdioCard::writeData(unsigned char const*)+0x112>
    a3b8:	.word	0x20015d11
    a3bc:	.word	0x402c0000
    a3c0:	.word	0x117f0002
    a3c4:	.word	0x20007718
    a3c8:	.word	0x117f0000
    a3cc:	.word	0x2000220c
    a3d0:	.word	0x20006690
    a3d4:	.word	0x000f4240

0000a3d8 <SdioCard::begin(SdioConfig)>:
  m_curState = IDLE_STATE;
    a3d8:	movs	r2, #0
  m_initDone = false;
    a3da:	ldr	r3, [pc, #580]	; (a620 <SdioCard::begin(SdioConfig)+0x248>)
bool SdioCard::begin(SdioConfig sdioConfig) {
    a3dc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  m_initDone = false;
    a3e0:	strb	r2, [r3, #0]
bool SdioCard::begin(SdioConfig sdioConfig) {
    a3e2:	mov	r6, r0
  CCM_ANALOG_PFD_528 |= (1 << 7);
    a3e4:	ldr	r3, [pc, #572]	; (a624 <SdioCard::begin(SdioConfig)+0x24c>)
bool SdioCard::begin(SdioConfig sdioConfig) {
    a3e6:	sub	sp, #76	; 0x4c
  m_errorCode = SD_CARD_ERROR_NONE;
    a3e8:	ldr	r4, [pc, #572]	; (a628 <SdioCard::begin(SdioConfig)+0x250>)
  m_highCapacity = false;
    a3ea:	ldr.w	sl, [pc, #632]	; a664 <SdioCard::begin(SdioConfig)+0x28c>
  m_version2 = false;
    a3ee:	ldr	r7, [pc, #572]	; (a62c <SdioCard::begin(SdioConfig)+0x254>)
  m_errorCode = SD_CARD_ERROR_NONE;
    a3f0:	strb	r2, [r4, #0]
  m_curState = IDLE_STATE;
    a3f2:	strb	r2, [r0, #9]
  m_highCapacity = false;
    a3f4:	strb.w	r2, [sl]
  m_version2 = false;
    a3f8:	strb	r2, [r7, #0]
  CCM_ANALOG_PFD_528 |= (1 << 7);
    a3fa:	ldr.w	r2, [r3, #256]	; 0x100
  m_sdioConfig = sdioConfig;
    a3fe:	strb	r1, [r0, #8]
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    a400:	movs	r1, #5
  CCM_ANALOG_PFD_528 |= (1 << 7);
    a402:	orr.w	r2, r2, #128	; 0x80
  SDHC_MIX_CTRL |= 0x80000000;
    a406:	ldr.w	r8, [pc, #576]	; a648 <SdioCard::begin(SdioConfig)+0x270>
  CCM_ANALOG_PFD_528 |= (1 << 7);
    a40a:	str.w	r2, [r3, #256]	; 0x100
  CCM_ANALOG_PFD_528 &= ~(0x3F << 0);
    a40e:	ldr.w	r2, [r3, #256]	; 0x100
    a412:	bic.w	r2, r2, #63	; 0x3f
    a416:	str.w	r2, [r3, #256]	; 0x100
  CCM_ANALOG_PFD_528 |= ((24) & 0x3F << 0);  // 12 - 35
    a41a:	ldr.w	r2, [r3, #256]	; 0x100
    a41e:	orr.w	r2, r2, #24
    a422:	str.w	r2, [r3, #256]	; 0x100
  CCM_ANALOG_PFD_528 &= ~(1 << 7);
    a426:	ldr.w	r2, [r3, #256]	; 0x100
    a42a:	bic.w	r2, r2, #128	; 0x80
    a42e:	str.w	r2, [r3, #256]	; 0x100
  CCM_CCGR6 |= CCM_CCGR6_USDHC1(CCM_CCGR_ON);
    a432:	add.w	r3, r3, #147456	; 0x24000
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    a436:	ldr	r2, [pc, #504]	; (a630 <SdioCard::begin(SdioConfig)+0x258>)
  CCM_CCGR6 |= CCM_CCGR6_USDHC1(CCM_CCGR_ON);
    a438:	ldr.w	r0, [r3, #128]	; 0x80
    a43c:	orr.w	r0, r0, #12
    a440:	str.w	r0, [r3, #128]	; 0x80
  CCM_CSCDR1 &= ~(CCM_CSCDR1_USDHC1_CLK_PODF_MASK);
    a444:	ldr	r0, [r3, #36]	; 0x24
    a446:	bic.w	r0, r0, #14336	; 0x3800
    a44a:	str	r0, [r3, #36]	; 0x24
  CCM_CSCMR1 |= CCM_CSCMR1_USDHC1_CLK_SEL;  // PLL2PFD0
    a44c:	ldr	r0, [r3, #28]
    a44e:	orr.w	r0, r0, #65536	; 0x10000
    a452:	str	r0, [r3, #28]
  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((1));
    a454:	ldr	r0, [r3, #36]	; 0x24
    a456:	orr.w	r0, r0, #2048	; 0x800
    a45a:	str	r0, [r3, #36]	; 0x24
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    a45c:	str.w	r1, [r2, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    a460:	str.w	r1, [r2, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    a464:	str.w	r1, [r2, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    a468:	str.w	r1, [r2, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    a46c:	str.w	r1, [r2, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    a470:	str.w	r1, [r2, #456]	; 0x1c8
  SDHC_MIX_CTRL |= 0x80000000;
    a474:	ldr.w	r2, [r8, #72]	; 0x48
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    a478:	ldr	r3, [pc, #440]	; (a634 <SdioCard::begin(SdioConfig)+0x25c>)
  SDHC_MIX_CTRL |= 0x80000000;
    a47a:	orr.w	r2, r2, #2147483648	; 0x80000000
    a47e:	str.w	r2, [r8, #72]	; 0x48
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    a482:	ldr.w	r2, [r8, #44]	; 0x2c
    a486:	orrs	r3, r2
    a488:	str.w	r3, [r8, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) {
    a48c:	ldr.w	r5, [r8, #44]	; 0x2c
    a490:	ands.w	r5, r5, #16777216	; 0x1000000
    a494:	bne.n	a48c <SdioCard::begin(SdioConfig)+0xb4>
  setSdclk(SD_MAX_INIT_RATE_KHZ);
    a496:	mov.w	r0, #400	; 0x190
    a49a:	bl	9584 <setSdclk(unsigned long)>
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    a49e:	ldr	r3, [pc, #400]	; (a630 <SdioCard::begin(SdioConfig)+0x258>)
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    a4a0:	movw	r2, #28856	; 0x70b8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    a4a4:	movw	r1, #4280	; 0x10b8
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    a4a8:	str.w	r5, [r3, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    a4ac:	str.w	r5, [r3, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    a4b0:	str.w	r5, [r3, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    a4b4:	str.w	r5, [r3, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    a4b8:	str.w	r5, [r3, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    a4bc:	str.w	r5, [r3, #456]	; 0x1c8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    a4c0:	str.w	r2, [r3, #956]	; 0x3bc
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;   // DAT3
    a4c4:	str.w	r2, [r3, #960]	; 0x3c0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;   // CMD
    a4c8:	str.w	r2, [r3, #940]	; 0x3ac
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    a4cc:	str.w	r1, [r3, #944]	; 0x3b0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02 = DATA_MASK;   // DAT0
    a4d0:	str.w	r2, [r3, #948]	; 0x3b4
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;   // DAT1
    a4d4:	str.w	r2, [r3, #952]	; 0x3b8
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    a4d8:	ldr	r3, [pc, #348]	; (a638 <SdioCard::begin(SdioConfig)+0x260>)
    a4da:	ldr	r2, [pc, #352]	; (a63c <SdioCard::begin(SdioConfig)+0x264>)
    a4dc:	str.w	r3, [r8, #52]	; 0x34
    a4e0:	ldr	r3, [pc, #348]	; (a640 <SdioCard::begin(SdioConfig)+0x268>)
    a4e2:	str.w	r2, [r3, #504]	; 0x1f8
  NVIC_SET_PRIORITY(IRQ_SDHC, 6 * 16);
    a4e6:	ldr	r3, [pc, #348]	; (a644 <SdioCard::begin(SdioConfig)+0x26c>)
    a4e8:	movs	r2, #96	; 0x60
    a4ea:	strb.w	r2, [r3, #110]	; 0x6e
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    a4ee:	mov.w	r3, #3758153728	; 0xe000e000
    a4f2:	mov.w	r2, #16384	; 0x4000
    a4f6:	str.w	r2, [r3, #268]	; 0x10c
  SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    a4fa:	ldr.w	r3, [r8, #44]	; 0x2c
    a4fe:	orr.w	r3, r3, #134217728	; 0x8000000
    a502:	str.w	r3, [r8, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
    a506:	ldr	r3, [pc, #320]	; (a648 <SdioCard::begin(SdioConfig)+0x270>)
    a508:	ldr	r1, [r3, #44]	; 0x2c
    a50a:	ands.w	r1, r1, #134217728	; 0x8000000
    a50e:	bne.n	a508 <SdioCard::begin(SdioConfig)+0x130>
  if (!cardCommand(CMD0_XFERTYP, 0)) {
    a510:	mov	r0, r1
    a512:	bl	987c <cardCommand(unsigned long, unsigned long)>
    a516:	mov	r5, r0
    a518:	cbnz	r0, a52e <SdioCard::begin(SdioConfig)+0x156>
  m_errorCode = code;
    a51a:	movs	r0, #1
  m_errorLine = line;
    a51c:	ldr	r2, [pc, #300]	; (a64c <SdioCard::begin(SdioConfig)+0x274>)
    a51e:	movw	r1, #702	; 0x2be
  m_errorCode = code;
    a522:	strb	r0, [r4, #0]
  m_errorLine = line;
    a524:	str	r1, [r2, #0]
}
    a526:	mov	r0, r5
    a528:	add	sp, #76	; 0x4c
    a52a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a52e:	mov.w	r8, #3
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
    a532:	ldr.w	r9, [pc, #308]	; a668 <SdioCard::begin(SdioConfig)+0x290>
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTA;
    a536:	ldr	r5, [pc, #272]	; (a648 <SdioCard::begin(SdioConfig)+0x270>)
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
    a538:	mov.w	r1, #426	; 0x1aa
    a53c:	mov	r0, r9
    a53e:	bl	987c <cardCommand(unsigned long, unsigned long)>
    a542:	cmp	r0, #0
    a544:	bne.n	a5e2 <SdioCard::begin(SdioConfig)+0x20a>
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTA;
    a546:	ldr	r3, [r5, #44]	; 0x2c
    a548:	orr.w	r3, r3, #16777216	; 0x1000000
    a54c:	str	r3, [r5, #44]	; 0x2c
    while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) {
    a54e:	ldr	r3, [r5, #44]	; 0x2c
    a550:	lsls	r0, r3, #7
    a552:	bmi.n	a54e <SdioCard::begin(SdioConfig)+0x176>
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    a554:	subs.w	r8, r8, #1
    a558:	bne.n	a538 <SdioCard::begin(SdioConfig)+0x160>
  arg = m_version2 ? 0X40300000 : 0x00300000;
    a55a:	ldrb	r3, [r7, #0]
    a55c:	cmp	r3, #0
    a55e:	ldr	r3, [pc, #240]	; (a650 <SdioCard::begin(SdioConfig)+0x278>)
    a560:	ite	eq
    a562:	moveq.w	r9, #3145728	; 0x300000
    a566:	movne	r9, r3
  int m = micros();
    a568:	bl	cdb0 <micros>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    a56c:	ldr	r7, [pc, #228]	; (a654 <SdioCard::begin(SdioConfig)+0x27c>)
  int m = micros();
    a56e:	mov	r5, r0
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    a570:	ldr.w	fp, [pc, #248]	; a66c <SdioCard::begin(SdioConfig)+0x294>
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    a574:	ldr.w	r8, [pc, #248]	; a670 <SdioCard::begin(SdioConfig)+0x298>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    a578:	movs	r1, #0
    a57a:	mov	r0, r7
    a57c:	bl	987c <cardCommand(unsigned long, unsigned long)>
    a580:	cbnz	r0, a598 <SdioCard::begin(SdioConfig)+0x1c0>
  m_errorCode = code;
    a582:	movs	r0, #23
      return sdError(SD_CARD_ERROR_ACMD41);
    a584:	movs	r5, #0
  m_errorLine = line;
    a586:	ldr	r2, [pc, #196]	; (a64c <SdioCard::begin(SdioConfig)+0x274>)
    a588:	movw	r1, #723	; 0x2d3
  m_errorCode = code;
    a58c:	strb	r0, [r4, #0]
}
    a58e:	mov	r0, r5
  m_errorLine = line;
    a590:	str	r1, [r2, #0]
}
    a592:	add	sp, #76	; 0x4c
    a594:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    a598:	mov	r1, r9
    a59a:	mov	r0, fp
    a59c:	bl	987c <cardCommand(unsigned long, unsigned long)>
    a5a0:	cmp	r0, #0
    a5a2:	beq.n	a582 <SdioCard::begin(SdioConfig)+0x1aa>
        ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
    a5a4:	bl	cdb0 <micros>
    a5a8:	subs	r0, r0, r5
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    a5aa:	ldr	r3, [pc, #156]	; (a648 <SdioCard::begin(SdioConfig)+0x270>)
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    a5ac:	cmp	r0, r8
    a5ae:	bhi.n	a582 <SdioCard::begin(SdioConfig)+0x1aa>
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    a5b0:	ldr	r2, [r3, #16]
    a5b2:	cmp	r2, #0
    a5b4:	bge.n	a578 <SdioCard::begin(SdioConfig)+0x1a0>
  m_ocr = SDHC_CMDRSP0;
    a5b6:	ldr	r1, [r3, #16]
    a5b8:	ldr	r2, [pc, #156]	; (a658 <SdioCard::begin(SdioConfig)+0x280>)
    a5ba:	str	r1, [r2, #0]
  if (SDHC_CMDRSP0 & 0x40000000) {
    a5bc:	ldr	r3, [r3, #16]
    a5be:	lsls	r1, r3, #1
    a5c0:	bpl.n	a5c8 <SdioCard::begin(SdioConfig)+0x1f0>
    m_highCapacity = true;
    a5c2:	movs	r3, #1
    a5c4:	strb.w	r3, [sl]
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    a5c8:	movs	r1, #0
    a5ca:	ldr	r0, [pc, #144]	; (a65c <SdioCard::begin(SdioConfig)+0x284>)
    a5cc:	bl	987c <cardCommand(unsigned long, unsigned long)>
    a5d0:	mov	r5, r0
    a5d2:	cbnz	r0, a606 <SdioCard::begin(SdioConfig)+0x22e>
  m_errorCode = code;
    a5d4:	movs	r0, #2
  m_errorLine = line;
    a5d6:	ldr	r2, [pc, #116]	; (a64c <SdioCard::begin(SdioConfig)+0x274>)
    a5d8:	mov.w	r1, #732	; 0x2dc
  m_errorCode = code;
    a5dc:	strb	r0, [r4, #0]
  m_errorLine = line;
    a5de:	str	r1, [r2, #0]
    return sdError(SD_CARD_ERROR_CMD2);
    a5e0:	b.n	a526 <SdioCard::begin(SdioConfig)+0x14e>
      if (SDHC_CMDRSP0 != 0X1AA) {
    a5e2:	ldr	r3, [pc, #100]	; (a648 <SdioCard::begin(SdioConfig)+0x270>)
    a5e4:	ldr	r3, [r3, #16]
    a5e6:	cmp.w	r3, #426	; 0x1aa
    a5ea:	beq.n	a5fc <SdioCard::begin(SdioConfig)+0x224>
  m_errorCode = code;
    a5ec:	movs	r0, #6
  m_errorLine = line;
    a5ee:	ldr	r2, [pc, #92]	; (a64c <SdioCard::begin(SdioConfig)+0x274>)
    a5f0:	mov.w	r1, #708	; 0x2c4
        return sdError(SD_CARD_ERROR_CMD8);
    a5f4:	movs	r5, #0
  m_errorCode = code;
    a5f6:	strb	r0, [r4, #0]
  m_errorLine = line;
    a5f8:	str	r1, [r2, #0]
        return sdError(SD_CARD_ERROR_CMD8);
    a5fa:	b.n	a526 <SdioCard::begin(SdioConfig)+0x14e>
      m_version2 = true;
    a5fc:	movs	r3, #1
  arg = m_version2 ? 0X40300000 : 0x00300000;
    a5fe:	ldr.w	r9, [pc, #80]	; a650 <SdioCard::begin(SdioConfig)+0x278>
      m_version2 = true;
    a602:	strb	r3, [r7, #0]
  arg = m_version2 ? 0X40300000 : 0x00300000;
    a604:	b.n	a568 <SdioCard::begin(SdioConfig)+0x190>
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    a606:	movs	r1, #0
    a608:	ldr	r0, [pc, #84]	; (a660 <SdioCard::begin(SdioConfig)+0x288>)
    a60a:	bl	987c <cardCommand(unsigned long, unsigned long)>
    a60e:	mov	r5, r0
    a610:	cbnz	r0, a674 <SdioCard::begin(SdioConfig)+0x29c>
  m_errorCode = code;
    a612:	movs	r0, #3
  m_errorLine = line;
    a614:	ldr	r2, [pc, #52]	; (a64c <SdioCard::begin(SdioConfig)+0x274>)
    a616:	movw	r1, #735	; 0x2df
  m_errorCode = code;
    a61a:	strb	r0, [r4, #0]
  m_errorLine = line;
    a61c:	str	r1, [r2, #0]
    return sdError(SD_CARD_ERROR_CMD3);
    a61e:	b.n	a526 <SdioCard::begin(SdioConfig)+0x14e>
    a620:	.word	0x20015d0e
    a624:	.word	0x400d8000
    a628:	.word	0x2000220c
    a62c:	.word	0x20015d0f
    a630:	.word	0x401f8000
    a634:	.word	0x01008000
    a638:	.word	0x117f000b
    a63c:	.word	0x00009535
    a640:	.word	0x20002400
    a644:	.word	0xe000e400
    a648:	.word	0x402c0000
    a64c:	.word	0x20006690
    a650:	.word	0x40300000
    a654:	.word	0x371a0000
    a658:	.word	0x200074c0
    a65c:	.word	0x02090000
    a660:	.word	0x031a0000
    a664:	.word	0x20015d10
    a668:	.word	0x081a0000
    a66c:	.word	0x29020000
    a670:	.word	0x000f4240
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    a674:	ldr.w	r8, [pc, #872]	; a9e0 <SdioCard::begin(SdioConfig)+0x608>
    a678:	ldr	r1, [pc, #784]	; (a98c <SdioCard::begin(SdioConfig)+0x5b4>)
    a67a:	ldr.w	r3, [r8, #16]
    a67e:	ldr.w	fp, [pc, #868]	; a9e4 <SdioCard::begin(SdioConfig)+0x60c>
    a682:	ands	r1, r3
  if (!cardCommand(xfertyp, m_rca)) {
    a684:	ldr	r0, [pc, #776]	; (a990 <SdioCard::begin(SdioConfig)+0x5b8>)
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    a686:	str.w	r1, [fp]
  if (!cardCommand(xfertyp, m_rca)) {
    a68a:	bl	987c <cardCommand(unsigned long, unsigned long)>
    a68e:	mov	r5, r0
    a690:	cmp	r0, #0
    a692:	beq.w	a7ac <SdioCard::begin(SdioConfig)+0x3d4>
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
    a696:	ldr.w	r2, [r8, #16]
    d[14 - i] = sr[i / 4] >> 8 * (i % 4);
    a69a:	movs	r5, #0
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
    a69c:	ldr.w	r3, [r8, #20]
    d[14 - i] = sr[i / 4] >> 8 * (i % 4);
    a6a0:	movs	r7, #0
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
    a6a2:	ldr.w	r1, [r8, #24]
    a6a6:	ldr.w	lr, [r8, #28]
    d[14 - i] = sr[i / 4] >> 8 * (i % 4);
    a6aa:	mov.w	r9, r3, lsr #16
    a6ae:	mov.w	r0, lr, lsr #16
    a6b2:	bfi	r5, r0, #0, #8
    a6b6:	lsrs	r0, r1, #16
    a6b8:	bfi	r7, r0, #0, #8
    a6bc:	movs	r0, #0
    a6be:	bfi	r0, r9, #0, #8
    a6c2:	mov.w	r9, lr, lsr #8
    a6c6:	bfi	r5, r9, #8, #8
    a6ca:	bfi	r5, lr, #16, #8
    a6ce:	mov.w	lr, r1, lsr #8
    a6d2:	bfi	r7, lr, #8, #8
    a6d6:	bfi	r7, r1, #16, #8
    a6da:	lsrs	r1, r1, #24
    a6dc:	bfi	r5, r1, #24, #8
    a6e0:	lsrs	r1, r3, #8
    a6e2:	bfi	r0, r1, #8, #8
    a6e6:	lsrs	r1, r2, #8
    a6e8:	bfi	r0, r3, #16, #8
    a6ec:	lsrs	r3, r3, #24
    a6ee:	bfi	r7, r3, #24, #8
    a6f2:	lsrs	r3, r2, #24
    a6f4:	bfi	r0, r3, #24, #8
    a6f8:	ldr	r3, [pc, #664]	; (a994 <SdioCard::begin(SdioConfig)+0x5bc>)
    a6fa:	strd	r5, r7, [r3]
    a6fe:	strb	r2, [r3, #14]
  d[15] = 0;
    a700:	movs	r7, #0
    d[14 - i] = sr[i / 4] >> 8 * (i % 4);
    a702:	lsrs	r2, r2, #16
    a704:	str	r0, [r3, #8]
    a706:	strb	r1, [r3, #13]
  if (!cardCommand(xfertyp, m_rca)) {
    a708:	ldr	r0, [pc, #652]	; (a998 <SdioCard::begin(SdioConfig)+0x5c0>)
    a70a:	ldr.w	r1, [fp]
    d[14 - i] = sr[i / 4] >> 8 * (i % 4);
    a70e:	strb	r2, [r3, #12]
  d[15] = 0;
    a710:	strb	r7, [r3, #15]
  if (!cardCommand(xfertyp, m_rca)) {
    a712:	bl	987c <cardCommand(unsigned long, unsigned long)>
    a716:	mov	r5, r0
    a718:	cmp	r0, #0
    a71a:	beq.n	a7ba <SdioCard::begin(SdioConfig)+0x3e2>
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
    a71c:	ldr.w	r2, [r8, #16]
    d[14 - i] = sr[i / 4] >> 8 * (i % 4);
    a720:	mov	lr, r7
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
    a722:	ldr.w	r3, [r8, #20]
    d[14 - i] = sr[i / 4] >> 8 * (i % 4);
    a726:	mov	r5, r7
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
    a728:	ldr.w	r1, [r8, #24]
    a72c:	ldr.w	r9, [r8, #28]
    d[14 - i] = sr[i / 4] >> 8 * (i % 4);
    a730:	mov.w	sl, r3, lsr #16
    a734:	mov.w	r0, r9, lsr #16
    a738:	bfi	lr, r0, #0, #8
    a73c:	lsrs	r0, r1, #16
    a73e:	bfi	r5, r0, #0, #8
    a742:	mov	r0, r7
    a744:	bfi	r0, sl, #0, #8
    a748:	mov.w	sl, r9, lsr #8
    a74c:	bfi	lr, sl, #8, #8
    a750:	bfi	lr, r9, #16, #8
    a754:	mov.w	r9, r1, lsr #8
    a758:	bfi	r5, r9, #8, #8
    a75c:	bfi	r5, r1, #16, #8
    a760:	lsrs	r1, r1, #24
    a762:	bfi	lr, r1, #24, #8
    a766:	lsrs	r1, r3, #8
    a768:	bfi	r0, r1, #8, #8
    a76c:	lsrs	r1, r2, #8
    a76e:	bfi	r0, r3, #16, #8
    a772:	lsrs	r3, r3, #24
    a774:	bfi	r5, r3, #24, #8
    a778:	lsrs	r3, r2, #24
    a77a:	bfi	r0, r3, #24, #8
    a77e:	ldr	r3, [pc, #540]	; (a99c <SdioCard::begin(SdioConfig)+0x5c4>)
    a780:	strb	r2, [r3, #14]
    a782:	lsrs	r2, r2, #16
    a784:	str	r0, [r3, #8]
    a786:	strb	r1, [r3, #13]
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    a788:	ldr	r0, [pc, #532]	; (a9a0 <SdioCard::begin(SdioConfig)+0x5c8>)
    a78a:	ldr.w	r1, [fp]
  d[15] = 0;
    a78e:	strb	r7, [r3, #15]
    d[14 - i] = sr[i / 4] >> 8 * (i % 4);
    a790:	strb	r2, [r3, #12]
    a792:	strd	lr, r5, [r3]
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    a796:	bl	987c <cardCommand(unsigned long, unsigned long)>
    a79a:	mov	r5, r0
    a79c:	cbnz	r0, a7c8 <SdioCard::begin(SdioConfig)+0x3f0>
  m_errorCode = code;
    a79e:	movs	r0, #5
  m_errorLine = line;
    a7a0:	ldr	r2, [pc, #512]	; (a9a4 <SdioCard::begin(SdioConfig)+0x5cc>)
    a7a2:	movw	r1, #746	; 0x2ea
  m_errorCode = code;
    a7a6:	strb	r0, [r4, #0]
  m_errorLine = line;
    a7a8:	str	r1, [r2, #0]
    return sdError(SD_CARD_ERROR_CMD7);
    a7aa:	b.n	a526 <SdioCard::begin(SdioConfig)+0x14e>
  m_errorCode = code;
    a7ac:	movs	r0, #7
  m_errorLine = line;
    a7ae:	ldr	r2, [pc, #500]	; (a9a4 <SdioCard::begin(SdioConfig)+0x5cc>)
    a7b0:	mov.w	r1, #740	; 0x2e4
  m_errorCode = code;
    a7b4:	strb	r0, [r4, #0]
  m_errorLine = line;
    a7b6:	str	r1, [r2, #0]
    return sdError(SD_CARD_ERROR_CMD9);
    a7b8:	b.n	a526 <SdioCard::begin(SdioConfig)+0x14e>
  m_errorCode = code;
    a7ba:	movs	r0, #8
  m_errorLine = line;
    a7bc:	ldr	r2, [pc, #484]	; (a9a4 <SdioCard::begin(SdioConfig)+0x5cc>)
    a7be:	movw	r1, #743	; 0x2e7
  m_errorCode = code;
    a7c2:	strb	r0, [r4, #0]
  m_errorLine = line;
    a7c4:	str	r1, [r2, #0]
    return sdError(SD_CARD_ERROR_CMD10);
    a7c6:	b.n	a526 <SdioCard::begin(SdioConfig)+0x14e>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    a7c8:	ldr.w	r1, [fp]
    a7cc:	ldr	r0, [pc, #472]	; (a9a8 <SdioCard::begin(SdioConfig)+0x5d0>)
    a7ce:	bl	987c <cardCommand(unsigned long, unsigned long)>
    a7d2:	cbnz	r0, a7e4 <SdioCard::begin(SdioConfig)+0x40c>
  m_errorCode = code;
    a7d4:	movs	r0, #20
  m_errorLine = line;
    a7d6:	ldr	r2, [pc, #460]	; (a9a4 <SdioCard::begin(SdioConfig)+0x5cc>)
    a7d8:	movw	r1, #750	; 0x2ee
    return sdError(SD_CARD_ERROR_ACMD6);
    a7dc:	movs	r5, #0
  m_errorCode = code;
    a7de:	strb	r0, [r4, #0]
  m_errorLine = line;
    a7e0:	str	r1, [r2, #0]
    return sdError(SD_CARD_ERROR_ACMD6);
    a7e2:	b.n	a526 <SdioCard::begin(SdioConfig)+0x14e>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    a7e4:	movs	r1, #2
    a7e6:	ldr	r0, [pc, #452]	; (a9ac <SdioCard::begin(SdioConfig)+0x5d4>)
    a7e8:	bl	987c <cardCommand(unsigned long, unsigned long)>
    a7ec:	cmp	r0, #0
    a7ee:	beq.n	a7d4 <SdioCard::begin(SdioConfig)+0x3fc>
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    a7f0:	ldr.w	r3, [r8, #40]	; 0x28
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    a7f4:	ldr.w	sl, [pc, #496]	; a9e8 <SdioCard::begin(SdioConfig)+0x610>
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    a7f8:	bic.w	r3, r3, #6
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    a7fc:	ldr	r5, [pc, #432]	; (a9b0 <SdioCard::begin(SdioConfig)+0x5d8>)
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    a7fe:	str.w	r3, [r8, #40]	; 0x28
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);
    a802:	ldr.w	r3, [r8, #40]	; 0x28
    a806:	orr.w	r3, r3, #2
    a80a:	str.w	r3, [r8, #40]	; 0x28
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
    a80e:	mov.w	r3, #1048592	; 0x100010
    a812:	str.w	r3, [r8, #68]	; 0x44
  uint32_t m = micros();
    a816:	bl	cdb0 <micros>
    a81a:	mov	r7, r0
  while (fcn()) {
    a81c:	b.n	a828 <SdioCard::begin(SdioConfig)+0x450>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    a81e:	bl	cdb0 <micros>
    a822:	subs	r0, r0, r7
    a824:	cmp	r0, r5
    a826:	bhi.n	a878 <SdioCard::begin(SdioConfig)+0x4a0>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    a828:	ldr.w	r1, [fp]
    a82c:	mov	r0, sl
    a82e:	bl	987c <cardCommand(unsigned long, unsigned long)>
    a832:	cmp	r0, #0
    a834:	beq.n	a81e <SdioCard::begin(SdioConfig)+0x446>
    a836:	ldr.w	r3, [r8, #16]
  while (fcn()) {
    a83a:	lsls	r2, r3, #23
    a83c:	bpl.n	a81e <SdioCard::begin(SdioConfig)+0x446>
  m_dmaBusy = true;
    a83e:	movs	r3, #1
    a840:	ldr	r2, [pc, #368]	; (a9b4 <SdioCard::begin(SdioConfig)+0x5dc>)
  m_irqstat = 0;
    a842:	ldr	r7, [pc, #372]	; (a9b8 <SdioCard::begin(SdioConfig)+0x5e0>)
    a844:	movs	r5, #0
  m_dmaBusy = true;
    a846:	strb	r3, [r2, #0]
  SDHC_DSADDR = (uint32_t)scr;
    a848:	ldr	r3, [pc, #368]	; (a9bc <SdioCard::begin(SdioConfig)+0x5e4>)
  m_irqstat = 0;
    a84a:	str	r5, [r7, #0]
  SDHC_DSADDR = (uint32_t)scr;
    a84c:	str.w	r3, [r8]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(8);
    a850:	ldr	r3, [pc, #364]	; (a9c0 <SdioCard::begin(SdioConfig)+0x5e8>)
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    a852:	ldr	r0, [pc, #340]	; (a9a8 <SdioCard::begin(SdioConfig)+0x5d0>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(8);
    a854:	str.w	r3, [r8, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    a858:	ldr	r3, [pc, #360]	; (a9c4 <SdioCard::begin(SdioConfig)+0x5ec>)
    a85a:	str.w	r3, [r8, #56]	; 0x38
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    a85e:	ldr.w	r1, [fp]
    a862:	bl	987c <cardCommand(unsigned long, unsigned long)>
    a866:	cbnz	r0, a888 <SdioCard::begin(SdioConfig)+0x4b0>
  m_errorCode = code;
    a868:	movs	r0, #24
  m_errorLine = line;
    a86a:	ldr	r2, [pc, #312]	; (a9a4 <SdioCard::begin(SdioConfig)+0x5cc>)
    a86c:	movw	r1, #471	; 0x1d7
    return false;
    a870:	movs	r5, #0
  m_errorCode = code;
    a872:	strb	r0, [r4, #0]
  m_errorLine = line;
    a874:	str	r1, [r2, #0]
  return false;
    a876:	b.n	a526 <SdioCard::begin(SdioConfig)+0x14e>
  m_errorCode = code;
    a878:	movs	r0, #10
  m_errorLine = line;
    a87a:	ldr	r2, [pc, #296]	; (a9a4 <SdioCard::begin(SdioConfig)+0x5cc>)
    a87c:	mov.w	r1, #464	; 0x1d0
    return false;
    a880:	movs	r5, #0
  m_errorCode = code;
    a882:	strb	r0, [r4, #0]
  m_errorLine = line;
    a884:	str	r1, [r2, #0]
  return false;
    a886:	b.n	a526 <SdioCard::begin(SdioConfig)+0x14e>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    a888:	mov	r1, r5
    a88a:	ldr	r0, [pc, #316]	; (a9c8 <SdioCard::begin(SdioConfig)+0x5f0>)
    a88c:	bl	987c <cardCommand(unsigned long, unsigned long)>
    a890:	cmp	r0, #0
    a892:	beq.n	a868 <SdioCard::begin(SdioConfig)+0x490>
  m_busyFcn = fcn;
    a894:	ldr	r3, [pc, #308]	; (a9cc <SdioCard::begin(SdioConfig)+0x5f4>)
    a896:	ldr.w	r8, [pc, #340]	; a9ec <SdioCard::begin(SdioConfig)+0x614>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    a89a:	ldr.w	sl, [pc, #276]	; a9b0 <SdioCard::begin(SdioConfig)+0x5d8>
  m_busyFcn = fcn;
    a89e:	str.w	r3, [r8]
  uint32_t m = micros();
    a8a2:	bl	cdb0 <micros>
    a8a6:	mov	r9, r0
  while (fcn()) {
    a8a8:	b.n	a8ba <SdioCard::begin(SdioConfig)+0x4e2>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    a8aa:	bl	cdb0 <micros>
    a8ae:	sub.w	r0, r0, r9
    a8b2:	cmp	r0, sl
    a8b4:	bhi.n	a8e8 <SdioCard::begin(SdioConfig)+0x510>
    yield();
    a8b6:	bl	daa4 <yield>
static bool isBusyDMA() { return m_dmaBusy; }
    a8ba:	ldr	r3, [pc, #248]	; (a9b4 <SdioCard::begin(SdioConfig)+0x5dc>)
    a8bc:	ldrb	r3, [r3, #0]
  while (fcn()) {
    a8be:	and.w	r5, r3, #255	; 0xff
    a8c2:	cmp	r3, #0
    a8c4:	bne.n	a8aa <SdioCard::begin(SdioConfig)+0x4d2>
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    a8c6:	ldr	r2, [r7, #0]
  m_busyFcn = 0;
    a8c8:	str.w	r5, [r8]
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    a8cc:	lsls	r3, r2, #30
    a8ce:	bpl.n	a8d8 <SdioCard::begin(SdioConfig)+0x500>
    a8d0:	ldr	r1, [r7, #0]
    a8d2:	ldr	r2, [pc, #252]	; (a9d0 <SdioCard::begin(SdioConfig)+0x5f8>)
    a8d4:	tst	r1, r2
    a8d6:	beq.n	a8f0 <SdioCard::begin(SdioConfig)+0x518>
  m_errorCode = code;
    a8d8:	movs	r0, #38	; 0x26
  m_errorLine = line;
    a8da:	ldr	r2, [pc, #200]	; (a9a4 <SdioCard::begin(SdioConfig)+0x5cc>)
    a8dc:	mov.w	r1, #474	; 0x1da
    return false;
    a8e0:	movs	r5, #0
  m_errorCode = code;
    a8e2:	strb	r0, [r4, #0]
  m_errorLine = line;
    a8e4:	str	r1, [r2, #0]
  return false;
    a8e6:	b.n	a526 <SdioCard::begin(SdioConfig)+0x14e>
      m_busyFcn = 0;
    a8e8:	movs	r3, #0
    a8ea:	str.w	r3, [r8]
      return true;
    a8ee:	b.n	a8d8 <SdioCard::begin(SdioConfig)+0x500>
  uint32_t m = micros();
    a8f0:	bl	cdb0 <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    a8f4:	ldr.w	sl, [pc, #240]	; a9e8 <SdioCard::begin(SdioConfig)+0x610>
    a8f8:	ldr.w	r9, [pc, #228]	; a9e0 <SdioCard::begin(SdioConfig)+0x608>
  uint32_t m = micros();
    a8fc:	str	r0, [sp, #4]
  while (fcn()) {
    a8fe:	b.n	a90e <SdioCard::begin(SdioConfig)+0x536>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    a900:	bl	cdb0 <micros>
    a904:	ldr	r3, [sp, #4]
    a906:	subs	r0, r0, r3
    a908:	ldr	r3, [pc, #164]	; (a9b0 <SdioCard::begin(SdioConfig)+0x5d8>)
    a90a:	cmp	r0, r3
    a90c:	bhi.n	a95e <SdioCard::begin(SdioConfig)+0x586>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    a90e:	ldr.w	r1, [fp]
    a912:	mov	r0, sl
    a914:	bl	987c <cardCommand(unsigned long, unsigned long)>
    a918:	cmp	r0, #0
    a91a:	beq.n	a900 <SdioCard::begin(SdioConfig)+0x528>
    a91c:	ldr.w	r3, [r9, #16]
  while (fcn()) {
    a920:	lsls	r0, r3, #23
    a922:	bpl.n	a900 <SdioCard::begin(SdioConfig)+0x528>
  m_dmaBusy = true;
    a924:	movs	r2, #1
    a926:	ldr	r3, [pc, #140]	; (a9b4 <SdioCard::begin(SdioConfig)+0x5dc>)
  m_irqstat = 0;
    a928:	mov.w	sl, #0
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    a92c:	ldr	r0, [pc, #120]	; (a9a8 <SdioCard::begin(SdioConfig)+0x5d0>)
  m_dmaBusy = true;
    a92e:	strb	r2, [r3, #0]
  SDHC_DSADDR = (uint32_t)scr;
    a930:	ldr	r2, [pc, #160]	; (a9d4 <SdioCard::begin(SdioConfig)+0x5fc>)
  m_irqstat = 0;
    a932:	str.w	sl, [r7]
  SDHC_DSADDR = (uint32_t)scr;
    a936:	str.w	r2, [r9]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    a93a:	ldr	r2, [pc, #156]	; (a9d8 <SdioCard::begin(SdioConfig)+0x600>)
    a93c:	str.w	r2, [r9, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    a940:	ldr	r2, [pc, #128]	; (a9c4 <SdioCard::begin(SdioConfig)+0x5ec>)
    a942:	str.w	r2, [r9, #56]	; 0x38
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    a946:	ldr.w	r1, [fp]
    a94a:	bl	987c <cardCommand(unsigned long, unsigned long)>
    a94e:	cbnz	r0, a96c <SdioCard::begin(SdioConfig)+0x594>
  m_errorCode = code;
    a950:	movs	r0, #21
  m_errorLine = line;
    a952:	ldr	r2, [pc, #80]	; (a9a4 <SdioCard::begin(SdioConfig)+0x5cc>)
    a954:	movw	r1, #453	; 0x1c5
  m_errorCode = code;
    a958:	strb	r0, [r4, #0]
  m_errorLine = line;
    a95a:	str	r1, [r2, #0]
  return false;
    a95c:	b.n	a526 <SdioCard::begin(SdioConfig)+0x14e>
  m_errorCode = code;
    a95e:	movs	r0, #10
  m_errorLine = line;
    a960:	ldr	r2, [pc, #64]	; (a9a4 <SdioCard::begin(SdioConfig)+0x5cc>)
    a962:	mov.w	r1, #446	; 0x1be
  m_errorCode = code;
    a966:	strb	r0, [r4, #0]
  m_errorLine = line;
    a968:	str	r1, [r2, #0]
  return false;
    a96a:	b.n	a526 <SdioCard::begin(SdioConfig)+0x14e>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    a96c:	mov	r1, sl
    a96e:	ldr	r0, [pc, #108]	; (a9dc <SdioCard::begin(SdioConfig)+0x604>)
    a970:	bl	987c <cardCommand(unsigned long, unsigned long)>
    a974:	mov	fp, r0
    a976:	cmp	r0, #0
    a978:	beq.n	a950 <SdioCard::begin(SdioConfig)+0x578>
  m_busyFcn = fcn;
    a97a:	ldr	r3, [pc, #80]	; (a9cc <SdioCard::begin(SdioConfig)+0x5f4>)
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    a97c:	ldr.w	sl, [pc, #48]	; a9b0 <SdioCard::begin(SdioConfig)+0x5d8>
  m_busyFcn = fcn;
    a980:	str.w	r3, [r8]
  uint32_t m = micros();
    a984:	bl	cdb0 <micros>
    a988:	mov	r9, r0
  while (fcn()) {
    a98a:	b.n	aa00 <SdioCard::begin(SdioConfig)+0x628>
    a98c:	.word	0xffff0000
    a990:	.word	0x09090000
    a994:	.word	0x200074b0
    a998:	.word	0x0a090000
    a99c:	.word	0x200074a0
    a9a0:	.word	0x071b0000
    a9a4:	.word	0x20006690
    a9a8:	.word	0x371a0000
    a9ac:	.word	0x061a0000
    a9b0:	.word	0x000f4240
    a9b4:	.word	0x20015d13
    a9b8:	.word	0x20007718
    a9bc:	.word	0x200074c8
    a9c0:	.word	0x00010008
    a9c4:	.word	0x117f0002
    a9c8:	.word	0x333a0011
    a9cc:	.word	0x00009579
    a9d0:	.word	0x117f0000
    a9d4:	.word	0x200074d0
    a9d8:	.word	0x00010040
    a9dc:	.word	0x0d3a0011
    a9e0:	.word	0x402c0000
    a9e4:	.word	0x200074c4
    a9e8:	.word	0x0d1a0000
    a9ec:	.word	0x20007714
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    a9f0:	bl	cdb0 <micros>
    a9f4:	sub.w	r0, r0, r9
    a9f8:	cmp	r0, sl
    a9fa:	bhi.n	aa2c <SdioCard::begin(SdioConfig)+0x654>
    yield();
    a9fc:	bl	daa4 <yield>
static bool isBusyDMA() { return m_dmaBusy; }
    aa00:	ldr	r3, [pc, #216]	; (aadc <SdioCard::begin(SdioConfig)+0x704>)
    aa02:	ldrb	r3, [r3, #0]
  while (fcn()) {
    aa04:	and.w	r1, r3, #255	; 0xff
    aa08:	cmp	r3, #0
    aa0a:	bne.n	a9f0 <SdioCard::begin(SdioConfig)+0x618>
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    aa0c:	ldr	r2, [r7, #0]
  m_busyFcn = 0;
    aa0e:	str.w	r1, [r8]
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    aa12:	lsls	r1, r2, #30
    aa14:	bpl.n	aa1e <SdioCard::begin(SdioConfig)+0x646>
    aa16:	ldr	r1, [r7, #0]
    aa18:	ldr	r2, [pc, #196]	; (aae0 <SdioCard::begin(SdioConfig)+0x708>)
    aa1a:	tst	r1, r2
    aa1c:	beq.n	aa34 <SdioCard::begin(SdioConfig)+0x65c>
  m_errorCode = code;
    aa1e:	movs	r0, #38	; 0x26
  m_errorLine = line;
    aa20:	ldr	r2, [pc, #192]	; (aae4 <SdioCard::begin(SdioConfig)+0x70c>)
    aa22:	mov.w	r1, #456	; 0x1c8
  m_errorCode = code;
    aa26:	strb	r0, [r4, #0]
  m_errorLine = line;
    aa28:	str	r1, [r2, #0]
  return false;
    aa2a:	b.n	a526 <SdioCard::begin(SdioConfig)+0x14e>
      m_busyFcn = 0;
    aa2c:	movs	r2, #0
    aa2e:	str.w	r2, [r8]
      return true;
    aa32:	b.n	aa1e <SdioCard::begin(SdioConfig)+0x646>
  /** Bytes 0-3 SD Association, bytes 4-7 reserved for manufacturer. */
  uint8_t scr[8];
  /** \return SCR_STRUCTURE field  - must be zero.*/
  uint8_t srcStructure() const { return scr[0] >> 4; }
  /** \return SD_SPEC field 0 - v1.0 or V1.01, 1 - 1.10, 2 - V2.00 or greater */
  uint8_t sdSpec() const { return scr[0] & 0XF; }
    aa34:	ldr	r3, [pc, #176]	; (aae8 <SdioCard::begin(SdioConfig)+0x710>)
    aa36:	ldrb	r3, [r3, #0]
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    aa38:	lsls	r2, r3, #28
    aa3a:	beq.n	aa6e <SdioCard::begin(SdioConfig)+0x696>
  if (m_scr.sdSpec() > 0 && cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    aa3c:	ldr	r3, [r6, #0]
    aa3e:	add	r2, sp, #8
    aa40:	mvn.w	r1, #4278190080	; 0xff000000
    aa44:	mov	r0, r6
    aa46:	ldr	r3, [r3, #40]	; 0x28
    aa48:	blx	r3
    aa4a:	cbz	r0, aa6e <SdioCard::begin(SdioConfig)+0x696>
    aa4c:	ldrb.w	r3, [sp, #21]
    aa50:	lsls	r3, r3, #30
    aa52:	bpl.n	aa6e <SdioCard::begin(SdioConfig)+0x696>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    aa54:	ldr	r3, [r6, #0]
    aa56:	add	r2, sp, #8
    aa58:	mov	r0, r6
    aa5a:	ldr	r1, [pc, #144]	; (aaec <SdioCard::begin(SdioConfig)+0x714>)
    aa5c:	ldr	r3, [r3, #40]	; 0x28
    aa5e:	blx	r3
  if (m_scr.sdSpec() > 0 && cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    aa60:	cbz	r0, aa6e <SdioCard::begin(SdioConfig)+0x696>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    aa62:	ldrb.w	r3, [sp, #24]
    aa66:	and.w	r3, r3, #15
    aa6a:	cmp	r3, #1
    aa6c:	beq.n	aad6 <SdioCard::begin(SdioConfig)+0x6fe>
    kHzSdClk = 25000;
    aa6e:	movw	r0, #25000	; 0x61a8
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    aa72:	ldr	r4, [pc, #124]	; (aaf0 <SdioCard::begin(SdioConfig)+0x718>)
    aa74:	movs	r2, #5
  return true;
    aa76:	mov	r5, fp
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    aa78:	str.w	r2, [r4, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    aa7c:	str.w	r2, [r4, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    aa80:	str.w	r2, [r4, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    aa84:	str.w	r2, [r4, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    aa88:	str.w	r2, [r4, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    aa8c:	str.w	r2, [r4, #456]	; 0x1c8
  setSdclk(kHzSdClk);
    aa90:	bl	9584 <setSdclk(unsigned long)>
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    aa94:	movs	r2, #0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    aa96:	movw	r1, #28856	; 0x70b8
  m_initDone = true;
    aa9a:	ldr	r3, [pc, #88]	; (aaf4 <SdioCard::begin(SdioConfig)+0x71c>)
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    aa9c:	str.w	r2, [r4, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    aaa0:	str.w	r2, [r4, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    aaa4:	str.w	r2, [r4, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    aaa8:	str.w	r2, [r4, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    aaac:	str.w	r2, [r4, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    aab0:	str.w	r2, [r4, #456]	; 0x1c8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    aab4:	movw	r2, #4280	; 0x10b8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    aab8:	str.w	r1, [r4, #956]	; 0x3bc
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;   // DAT3
    aabc:	str.w	r1, [r4, #960]	; 0x3c0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;   // CMD
    aac0:	str.w	r1, [r4, #940]	; 0x3ac
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    aac4:	str.w	r2, [r4, #944]	; 0x3b0
  m_initDone = true;
    aac8:	movs	r2, #1
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02 = DATA_MASK;   // DAT0
    aaca:	str.w	r1, [r4, #948]	; 0x3b4
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;   // DAT1
    aace:	str.w	r1, [r4, #952]	; 0x3b8
  m_initDone = true;
    aad2:	strb	r2, [r3, #0]
  return true;
    aad4:	b.n	a526 <SdioCard::begin(SdioConfig)+0x14e>
    kHzSdClk = 50000;
    aad6:	movw	r0, #50000	; 0xc350
    aada:	b.n	aa72 <SdioCard::begin(SdioConfig)+0x69a>
    aadc:	.word	0x20015d13
    aae0:	.word	0x117f0000
    aae4:	.word	0x20006690
    aae8:	.word	0x200074c8
    aaec:	.word	0x80fffff1
    aaf0:	.word	0x401f8000
    aaf4:	.word	0x20015d0e

0000aaf8 <SdioCard::readData(unsigned char*)>:
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    aaf8:	ldr	r3, [pc, #300]	; (ac28 <SdioCard::readData(unsigned char*)+0x130>)
    aafa:	ldr	r2, [r3, #36]	; 0x24
    aafc:	lsls	r0, r2, #22
bool SdioCard::readData(uint8_t* dst) {
    aafe:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ab02:	mov	r7, r1
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    ab04:	bmi.n	ab22 <SdioCard::readData(unsigned char*)+0x2a>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    ab06:	ldr	r2, [r3, #40]	; 0x28
    ab08:	bic.w	r2, r2, #65536	; 0x10000
    ab0c:	str	r2, [r3, #40]	; 0x28
    noInterrupts();
    ab0e:	cpsid	i
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    ab10:	ldr	r2, [r3, #40]	; 0x28
    ab12:	orr.w	r2, r2, #131072	; 0x20000
    ab16:	str	r2, [r3, #40]	; 0x28
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    ab18:	ldr	r2, [r3, #40]	; 0x28
    ab1a:	orr.w	r2, r2, #65536	; 0x10000
    ab1e:	str	r2, [r3, #40]	; 0x28
    interrupts();
    ab20:	cpsie	i
  uint32_t m = micros();
    ab22:	bl	cdb0 <micros>
static bool isBusyFifoRead() { return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN); }
    ab26:	ldr	r6, [pc, #256]	; (ac28 <SdioCard::readData(unsigned char*)+0x130>)
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    ab28:	ldr.w	r8, [pc, #276]	; ac40 <SdioCard::readData(unsigned char*)+0x148>
  uint32_t m = micros();
    ab2c:	mov	r5, r0
  while (fcn()) {
    ab2e:	b.n	ab3a <SdioCard::readData(unsigned char*)+0x42>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    ab30:	bl	cdb0 <micros>
    ab34:	subs	r3, r0, r5
    ab36:	cmp	r3, r8
    ab38:	bhi.n	abfa <SdioCard::readData(unsigned char*)+0x102>
static bool isBusyFifoRead() { return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN); }
    ab3a:	ldr	r4, [r6, #36]	; 0x24
  while (fcn()) {
    ab3c:	ands.w	r4, r4, #2048	; 0x800
    ab40:	beq.n	ab30 <SdioCard::readData(unsigned char*)+0x38>
    ab42:	add.w	r2, r7, #64	; 0x40
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    ab46:	ldr	r3, [pc, #224]	; (ac28 <SdioCard::readData(unsigned char*)+0x130>)
    ab48:	add.w	r7, r7, #576	; 0x240
    ab4c:	ldr	r0, [r3, #36]	; 0x24
    ab4e:	lsls	r1, r0, #20
    ab50:	bpl.n	ab4c <SdioCard::readData(unsigned char*)+0x54>
      p32[i] = SDHC_DATPORT;
    ab52:	ldr	r1, [r3, #32]
  for (uint32_t iw = 0; iw < 512 / (4 * FIFO_WML); iw++) {
    ab54:	adds	r2, #64	; 0x40
      p32[i] = SDHC_DATPORT;
    ab56:	str.w	r1, [r2, #-128]
  for (uint32_t iw = 0; iw < 512 / (4 * FIFO_WML); iw++) {
    ab5a:	cmp	r2, r7
      p32[i] = SDHC_DATPORT;
    ab5c:	ldr	r1, [r3, #32]
    ab5e:	str.w	r1, [r2, #-124]
    ab62:	ldr	r1, [r3, #32]
    ab64:	str.w	r1, [r2, #-120]
    ab68:	ldr	r1, [r3, #32]
    ab6a:	str.w	r1, [r2, #-116]
    ab6e:	ldr	r1, [r3, #32]
    ab70:	str.w	r1, [r2, #-112]
    ab74:	ldr	r1, [r3, #32]
    ab76:	str.w	r1, [r2, #-108]
    ab7a:	ldr	r1, [r3, #32]
    ab7c:	str.w	r1, [r2, #-104]
    ab80:	ldr	r1, [r3, #32]
    ab82:	str.w	r1, [r2, #-100]
    ab86:	ldr	r1, [r3, #32]
    ab88:	str.w	r1, [r2, #-96]
    ab8c:	ldr	r1, [r3, #32]
    ab8e:	str.w	r1, [r2, #-92]
    ab92:	ldr	r1, [r3, #32]
    ab94:	str.w	r1, [r2, #-88]
    ab98:	ldr	r1, [r3, #32]
    ab9a:	str.w	r1, [r2, #-84]
    ab9e:	ldr	r1, [r3, #32]
    aba0:	str.w	r1, [r2, #-80]
    aba4:	ldr	r1, [r3, #32]
    aba6:	str.w	r1, [r2, #-76]
    abaa:	ldr	r1, [r3, #32]
    abac:	str.w	r1, [r2, #-72]
    abb0:	ldr	r1, [r3, #32]
    abb2:	str.w	r1, [r2, #-68]
  for (uint32_t iw = 0; iw < 512 / (4 * FIFO_WML); iw++) {
    abb6:	bne.n	ab4c <SdioCard::readData(unsigned char*)+0x54>
  uint32_t m = micros();
    abb8:	bl	cdb0 <micros>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    abbc:	ldr	r7, [pc, #104]	; (ac28 <SdioCard::readData(unsigned char*)+0x130>)
    abbe:	ldr	r5, [pc, #108]	; (ac2c <SdioCard::readData(unsigned char*)+0x134>)
  uint32_t m = micros();
    abc0:	mov	r6, r0
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    abc2:	ldr.w	r8, [pc, #124]	; ac40 <SdioCard::readData(unsigned char*)+0x148>
  while (fcn()) {
    abc6:	b.n	abd2 <SdioCard::readData(unsigned char*)+0xda>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    abc8:	bl	cdb0 <micros>
    abcc:	subs	r3, r0, r6
    abce:	cmp	r3, r8
    abd0:	bhi.n	ac0e <SdioCard::readData(unsigned char*)+0x116>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    abd2:	ldr	r4, [r7, #48]	; 0x30
  while (fcn()) {
    abd4:	ands	r4, r5
    abd6:	beq.n	abc8 <SdioCard::readData(unsigned char*)+0xd0>
  m_irqstat = SDHC_IRQSTAT;
    abd8:	ldr	r3, [r7, #48]	; 0x30
    abda:	ldr	r2, [pc, #84]	; (ac30 <SdioCard::readData(unsigned char*)+0x138>)
    abdc:	str	r3, [r2, #0]
  SDHC_IRQSTAT = m_irqstat;
    abde:	ldr	r3, [r2, #0]
    abe0:	str	r3, [r7, #48]	; 0x30
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    abe2:	ldr	r3, [r2, #0]
    abe4:	ands.w	r3, r3, #2
    abe8:	beq.n	ac22 <SdioCard::readData(unsigned char*)+0x12a>
    abea:	ldr	r2, [r2, #0]
    abec:	ldr	r3, [pc, #68]	; (ac34 <SdioCard::readData(unsigned char*)+0x13c>)
    abee:	tst	r2, r3
    abf0:	ite	eq
    abf2:	moveq	r0, #1
    abf4:	movne	r0, #0
}
    abf6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_errorCode = code;
    abfa:	ldr	r1, [pc, #60]	; (ac38 <SdioCard::readData(unsigned char*)+0x140>)
    abfc:	movs	r5, #27
  m_errorLine = line;
    abfe:	ldr	r3, [pc, #60]	; (ac3c <SdioCard::readData(unsigned char*)+0x144>)
    ac00:	movw	r2, #889	; 0x379
    return sdError(SD_CARD_ERROR_READ_FIFO);
    ac04:	mov	r0, r4
  m_errorCode = code;
    ac06:	strb	r5, [r1, #0]
  m_errorLine = line;
    ac08:	str	r2, [r3, #0]
}
    ac0a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_errorCode = code;
    ac0e:	ldr	r1, [pc, #40]	; (ac38 <SdioCard::readData(unsigned char*)+0x140>)
    ac10:	movs	r5, #30
  m_errorLine = line;
    ac12:	ldr	r3, [pc, #40]	; (ac3c <SdioCard::readData(unsigned char*)+0x144>)
    ac14:	mov.w	r2, #900	; 0x384
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
    ac18:	mov	r0, r4
  m_errorCode = code;
    ac1a:	strb	r5, [r1, #0]
  m_errorLine = line;
    ac1c:	str	r2, [r3, #0]
}
    ac1e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    ac22:	mov	r0, r3
}
    ac24:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ac28:	.word	0x402c0000
    ac2c:	.word	0x117f0002
    ac30:	.word	0x20007718
    ac34:	.word	0x117f0000
    ac38:	.word	0x2000220c
    ac3c:	.word	0x20006690
    ac40:	.word	0x000f4240

0000ac44 <SdioCard::readStart(unsigned long)>:
bool SdioCard::readStart(uint32_t sector) {
    ac44:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  m_busyFcn = fcn;
    ac48:	ldr	r3, [pc, #164]	; (acf0 <SdioCard::readStart(unsigned long)+0xac>)
bool SdioCard::readStart(uint32_t sector) {
    ac4a:	mov	r9, r1
  m_busyFcn = fcn;
    ac4c:	ldr.w	sl, [pc, #192]	; ad10 <SdioCard::readStart(unsigned long)+0xcc>
    ac50:	ldr	r6, [pc, #160]	; (acf4 <SdioCard::readStart(unsigned long)+0xb0>)
    ac52:	str.w	r3, [sl]
  uint32_t m = micros();
    ac56:	bl	cdb0 <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    ac5a:	ldr	r5, [pc, #156]	; (acf8 <SdioCard::readStart(unsigned long)+0xb4>)
  uint32_t m = micros();
    ac5c:	mov	r4, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    ac5e:	ldr.w	r8, [pc, #180]	; ad14 <SdioCard::readStart(unsigned long)+0xd0>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    ac62:	ldr	r7, [pc, #152]	; (acfc <SdioCard::readStart(unsigned long)+0xb8>)
  while (fcn()) {
    ac64:	b.n	ac74 <SdioCard::readStart(unsigned long)+0x30>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    ac66:	bl	cdb0 <micros>
    ac6a:	subs	r0, r0, r4
    ac6c:	cmp	r0, r7
    ac6e:	bhi.n	acc4 <SdioCard::readStart(unsigned long)+0x80>
    yield();
    ac70:	bl	daa4 <yield>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    ac74:	ldr	r1, [r6, #0]
    ac76:	mov	r0, r5
    ac78:	bl	987c <cardCommand(unsigned long, unsigned long)>
    ac7c:	cmp	r0, #0
    ac7e:	beq.n	ac66 <SdioCard::readStart(unsigned long)+0x22>
    ac80:	ldr.w	r3, [r8, #16]
  while (fcn()) {
    ac84:	lsls	r3, r3, #23
    ac86:	bpl.n	ac66 <SdioCard::readStart(unsigned long)+0x22>
  m_busyFcn = 0;
    ac88:	movs	r3, #0
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    ac8a:	mov.w	r2, #512	; 0x200
  m_busyFcn = 0;
    ac8e:	str.w	r3, [sl]
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    ac92:	ldr.w	r3, [r8, #40]	; 0x28
    ac96:	orr.w	r3, r3, #65536	; 0x10000
    ac9a:	str.w	r3, [r8, #40]	; 0x28
  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512 * sector)) {
    ac9e:	ldr	r3, [pc, #96]	; (ad00 <SdioCard::readStart(unsigned long)+0xbc>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    aca0:	str.w	r2, [r8, #4]
  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512 * sector)) {
    aca4:	ldrb	r3, [r3, #0]
    aca6:	cbz	r3, acdc <SdioCard::readStart(unsigned long)+0x98>
    aca8:	mov	r1, r9
    acaa:	ldr	r0, [pc, #88]	; (ad04 <SdioCard::readStart(unsigned long)+0xc0>)
    acac:	bl	987c <cardCommand(unsigned long, unsigned long)>
    acb0:	cbnz	r0, acc0 <SdioCard::readStart(unsigned long)+0x7c>
  m_errorCode = code;
    acb2:	ldr	r1, [pc, #84]	; (ad08 <SdioCard::readStart(unsigned long)+0xc4>)
    acb4:	movs	r4, #12
  m_errorLine = line;
    acb6:	ldr	r3, [pc, #84]	; (ad0c <SdioCard::readStart(unsigned long)+0xc8>)
    acb8:	movw	r2, #1002	; 0x3ea
  m_errorCode = code;
    acbc:	strb	r4, [r1, #0]
  m_errorLine = line;
    acbe:	str	r2, [r3, #0]
}
    acc0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_errorCode = code;
    acc4:	ldr	r2, [pc, #64]	; (ad08 <SdioCard::readStart(unsigned long)+0xc4>)
    acc6:	movs	r1, #10
      m_busyFcn = 0;
    acc8:	movs	r0, #0
  m_errorLine = line;
    acca:	ldr	r3, [pc, #64]	; (ad0c <SdioCard::readStart(unsigned long)+0xc8>)
  m_errorCode = code;
    accc:	strb	r1, [r2, #0]
  m_errorLine = line;
    acce:	movw	r2, #990	; 0x3de
      m_busyFcn = 0;
    acd2:	str.w	r0, [sl]
  m_errorLine = line;
    acd6:	str	r2, [r3, #0]
}
    acd8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512 * sector)) {
    acdc:	mov.w	r9, r9, lsl #9
    ace0:	ldr	r0, [pc, #32]	; (ad04 <SdioCard::readStart(unsigned long)+0xc0>)
    ace2:	mov	r1, r9
    ace4:	bl	987c <cardCommand(unsigned long, unsigned long)>
    ace8:	cmp	r0, #0
    acea:	bne.n	acc0 <SdioCard::readStart(unsigned long)+0x7c>
    acec:	b.n	acb2 <SdioCard::readStart(unsigned long)+0x6e>
    acee:	nop
    acf0:	.word	0x00009915
    acf4:	.word	0x200074c4
    acf8:	.word	0x0d1a0000
    acfc:	.word	0x000f4240
    ad00:	.word	0x20015d10
    ad04:	.word	0x123a0030
    ad08:	.word	0x2000220c
    ad0c:	.word	0x20006690
    ad10:	.word	0x20007714
    ad14:	.word	0x402c0000

0000ad18 <SdioCard::readSector(unsigned long, unsigned char*)>:
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    ad18:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ad1c:	ldrb	r6, [r0, #8]
    ad1e:	sub.w	sp, sp, #524	; 0x20c
    ad22:	mov	r8, r2
  if (m_sdioConfig.useDma()) {
    ad24:	ands.w	r6, r6, #1
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    ad28:	str	r1, [sp, #4]
  if (m_sdioConfig.useDma()) {
    ad2a:	beq.n	ad56 <SdioCard::readSector(unsigned long, unsigned char*)+0x3e>
    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;
    ad2c:	tst.w	r2, #3
    ad30:	beq.n	ada4 <SdioCard::readSector(unsigned long, unsigned char*)+0x8c>
    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    ad32:	movs	r3, #1
    ad34:	ldr	r0, [pc, #268]	; (ae44 <SdioCard::readSector(unsigned long, unsigned char*)+0x12c>)
    ad36:	add	r2, sp, #8
    ad38:	bl	9a70 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    ad3c:	cmp	r0, #0
    ad3e:	beq.n	adb0 <SdioCard::readSector(unsigned long, unsigned char*)+0x98>
      memcpy(dst, aligned, 512);
    ad40:	mov.w	r2, #512	; 0x200
    ad44:	add	r1, sp, #8
    ad46:	mov	r0, r8
    ad48:	bl	b09c <memcpy>
}
    ad4c:	mov	r0, r6
    ad4e:	add.w	sp, sp, #524	; 0x20c
    ad52:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!m_transferActive) {
    ad56:	ldr	r3, [pc, #240]	; (ae48 <SdioCard::readSector(unsigned long, unsigned char*)+0x130>)
    ad58:	mov	r5, r0
    ad5a:	ldrb	r3, [r3, #0]
    ad5c:	cmp	r3, #0
    ad5e:	bne.n	adca <SdioCard::readSector(unsigned long, unsigned char*)+0xb2>
    if (m_curState != READ_STATE || sector != m_curSector) {
    ad60:	ldrb	r3, [r5, #9]
    ad62:	cmp	r3, #1
    ad64:	beq.n	ae24 <SdioCard::readSector(unsigned long, unsigned char*)+0x10c>
      if (!syncDevice()) {
    ad66:	ldr	r3, [r5, #0]
    ad68:	mov	r0, r5
    ad6a:	ldr	r3, [r3, #28]
    ad6c:	blx	r3
    ad6e:	cmp	r0, #0
    ad70:	beq.n	ad4c <SdioCard::readSector(unsigned long, unsigned char*)+0x34>
      if (!readStart(sector)) {
    ad72:	ldr	r4, [sp, #4]
    ad74:	mov	r0, r5
    ad76:	mov	r1, r4
    ad78:	bl	ac44 <SdioCard::readStart(unsigned long)>
    ad7c:	cmp	r0, #0
    ad7e:	beq.n	ad4c <SdioCard::readSector(unsigned long, unsigned char*)+0x34>
      m_curState = READ_STATE;
    ad80:	movs	r3, #1
      m_curSector = sector;
    ad82:	str	r4, [r5, #4]
      m_curState = READ_STATE;
    ad84:	strb	r3, [r5, #9]
    if (!readData(dst)) {
    ad86:	mov	r1, r8
    ad88:	mov	r0, r5
    ad8a:	bl	aaf8 <SdioCard::readData(unsigned char*)>
    ad8e:	cmp	r0, #0
    ad90:	beq.n	ad4c <SdioCard::readSector(unsigned long, unsigned char*)+0x34>
    m_curSector++;
    ad92:	ldr	r3, [r5, #4]
  return true;
    ad94:	mov	r6, r0
    m_curSector++;
    ad96:	adds	r3, #1
}
    ad98:	mov	r0, r6
    m_curSector++;
    ad9a:	str	r3, [r5, #4]
}
    ad9c:	add.w	sp, sp, #524	; 0x20c
    ada0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    ada4:	movs	r3, #1
    ada6:	ldr	r0, [pc, #156]	; (ae44 <SdioCard::readSector(unsigned long, unsigned char*)+0x12c>)
    ada8:	bl	9a70 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    adac:	cmp	r0, #0
    adae:	bne.n	ad4c <SdioCard::readSector(unsigned long, unsigned char*)+0x34>
  m_errorCode = code;
    adb0:	ldr	r1, [pc, #152]	; (ae4c <SdioCard::readSector(unsigned long, unsigned char*)+0x134>)
    adb2:	movs	r0, #11
      return sdError(SD_CARD_ERROR_CMD17);
    adb4:	movs	r6, #0
  m_errorLine = line;
    adb6:	ldr	r3, [pc, #152]	; (ae50 <SdioCard::readSector(unsigned long, unsigned char*)+0x138>)
    adb8:	movw	r2, #929	; 0x3a1
  m_errorCode = code;
    adbc:	strb	r0, [r1, #0]
}
    adbe:	mov	r0, r6
  m_errorLine = line;
    adc0:	str	r2, [r3, #0]
}
    adc2:	add.w	sp, sp, #524	; 0x20c
    adc6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint32_t m = micros();
    adca:	bl	cdb0 <micros>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    adce:	ldr.w	r9, [pc, #144]	; ae60 <SdioCard::readSector(unsigned long, unsigned char*)+0x148>
  uint32_t m = micros();
    add2:	mov	sl, r0
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    add4:	ldr	r7, [pc, #124]	; (ae54 <SdioCard::readSector(unsigned long, unsigned char*)+0x13c>)
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    add6:	ldr.w	fp, [pc, #140]	; ae64 <SdioCard::readSector(unsigned long, unsigned char*)+0x14c>
  while (fcn()) {
    adda:	b.n	ade8 <SdioCard::readSector(unsigned long, unsigned char*)+0xd0>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    addc:	bl	cdb0 <micros>
    ade0:	sub.w	r0, r0, sl
    ade4:	cmp	r0, fp
    ade6:	bhi.n	ae2e <SdioCard::readSector(unsigned long, unsigned char*)+0x116>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    ade8:	ldr.w	r4, [r9, #48]	; 0x30
  while (fcn()) {
    adec:	ands	r4, r7
    adee:	beq.n	addc <SdioCard::readSector(unsigned long, unsigned char*)+0xc4>
  m_transferActive = false;
    adf0:	movs	r3, #0
    adf2:	ldr	r2, [pc, #84]	; (ae48 <SdioCard::readSector(unsigned long, unsigned char*)+0x130>)
    adf4:	strb	r3, [r2, #0]
  m_irqstat = SDHC_IRQSTAT;
    adf6:	ldr	r3, [pc, #96]	; (ae58 <SdioCard::readSector(unsigned long, unsigned char*)+0x140>)
    adf8:	ldr.w	r2, [r9, #48]	; 0x30
    adfc:	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    adfe:	ldr	r2, [r3, #0]
    ae00:	str.w	r2, [r9, #48]	; 0x30
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    ae04:	ldr	r2, [r3, #0]
    ae06:	ldr	r3, [pc, #84]	; (ae5c <SdioCard::readSector(unsigned long, unsigned char*)+0x144>)
    ae08:	tst	r2, r3
    ae0a:	beq.n	ad60 <SdioCard::readSector(unsigned long, unsigned char*)+0x48>
  m_errorCode = code;
    ae0c:	ldr	r1, [pc, #60]	; (ae4c <SdioCard::readSector(unsigned long, unsigned char*)+0x134>)
    ae0e:	movs	r0, #32
  m_errorLine = line;
    ae10:	ldr	r3, [pc, #60]	; (ae50 <SdioCard::readSector(unsigned long, unsigned char*)+0x138>)
    ae12:	movw	r2, #682	; 0x2aa
  m_errorCode = code;
    ae16:	strb	r0, [r1, #0]
}
    ae18:	mov	r0, r6
  m_errorLine = line;
    ae1a:	str	r2, [r3, #0]
}
    ae1c:	add.w	sp, sp, #524	; 0x20c
    ae20:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (m_curState != READ_STATE || sector != m_curSector) {
    ae24:	ldr	r3, [r5, #4]
    ae26:	ldr	r2, [sp, #4]
    ae28:	cmp	r2, r3
    ae2a:	bne.n	ad66 <SdioCard::readSector(unsigned long, unsigned char*)+0x4e>
    ae2c:	b.n	ad86 <SdioCard::readSector(unsigned long, unsigned char*)+0x6e>
  m_transferActive = false;
    ae2e:	ldr	r2, [pc, #24]	; (ae48 <SdioCard::readSector(unsigned long, unsigned char*)+0x130>)
  m_irqstat = SDHC_IRQSTAT;
    ae30:	ldr	r3, [pc, #36]	; (ae58 <SdioCard::readSector(unsigned long, unsigned char*)+0x140>)
  m_transferActive = false;
    ae32:	strb	r4, [r2, #0]
  m_irqstat = SDHC_IRQSTAT;
    ae34:	ldr.w	r2, [r9, #48]	; 0x30
    ae38:	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    ae3a:	ldr	r3, [r3, #0]
    ae3c:	str.w	r3, [r9, #48]	; 0x30
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    ae40:	b.n	ae0c <SdioCard::readSector(unsigned long, unsigned char*)+0xf4>
    ae42:	nop
    ae44:	.word	0x113a0011
    ae48:	.word	0x20015d11
    ae4c:	.word	0x2000220c
    ae50:	.word	0x20006690
    ae54:	.word	0x117f0002
    ae58:	.word	0x20007718
    ae5c:	.word	0x117f0000
    ae60:	.word	0x402c0000
    ae64:	.word	0x000f4240

0000ae68 <SdSpiArduinoDriver::activate()>:
 */
#include "SdSpiDriver.h"
#if defined(SD_USE_CUSTOM_SPI) && defined(__arm__) && defined(CORE_TEENSY)
#define USE_BLOCK_TRANSFER 1
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::activate() { m_spi->beginTransaction(m_spiSettings); }
    ae68:	ldrd	r3, r2, [r0]
    ae6c:	push	{r4, r5, r6}
		if (interruptMasksUsed) {
    ae6e:	ldrb	r1, [r3, #19]
    ae70:	ldr	r0, [r0, #8]
    ae72:	cmp	r1, #0
    ae74:	beq.n	aed8 <SdSpiArduinoDriver::activate()+0x70>
			__disable_irq();
    ae76:	cpsid	i
			if (interruptMasksUsed & 0x01) {
    ae78:	ldrb	r1, [r3, #19]
    ae7a:	lsls	r4, r1, #31
    ae7c:	bpl.n	ae90 <SdSpiArduinoDriver::activate()+0x28>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    ae7e:	mov.w	r5, #3758153728	; 0xe000e000
    ae82:	ldr	r6, [r3, #20]
    ae84:	ldr.w	r4, [r5, #384]	; 0x180
    ae88:	ands	r4, r6
    ae8a:	str	r4, [r3, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    ae8c:	str.w	r4, [r5, #384]	; 0x180
			if (interruptMasksUsed & 0x02) {
    ae90:	lsls	r6, r1, #30
    ae92:	bpl.n	aea6 <SdSpiArduinoDriver::activate()+0x3e>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    ae94:	mov.w	r5, #3758153728	; 0xe000e000
    ae98:	ldr	r6, [r3, #24]
    ae9a:	ldr.w	r4, [r5, #388]	; 0x184
    ae9e:	ands	r4, r6
    aea0:	str	r4, [r3, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    aea2:	str.w	r4, [r5, #388]	; 0x184
			if (interruptMasksUsed & 0x04) {
    aea6:	lsls	r5, r1, #29
    aea8:	bpl.n	aebc <SdSpiArduinoDriver::activate()+0x54>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    aeaa:	mov.w	r5, #3758153728	; 0xe000e000
    aeae:	ldr	r6, [r3, #28]
    aeb0:	ldr.w	r4, [r5, #392]	; 0x188
    aeb4:	ands	r4, r6
    aeb6:	str	r4, [r3, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    aeb8:	str.w	r4, [r5, #392]	; 0x188
			if (interruptMasksUsed & 0x08) {
    aebc:	lsls	r4, r1, #28
    aebe:	bpl.n	aed2 <SdSpiArduinoDriver::activate()+0x6a>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    aec0:	mov.w	r5, #3758153728	; 0xe000e000
    aec4:	ldr	r6, [r3, #32]
    aec6:	ldr.w	r4, [r5, #396]	; 0x18c
    aeca:	ands	r4, r6
    aecc:	str	r4, [r3, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    aece:	str.w	r4, [r5, #396]	; 0x18c
			if (interruptMasksUsed & 0x10) {
    aed2:	lsls	r1, r1, #27
    aed4:	bmi.n	af32 <SdSpiArduinoDriver::activate()+0xca>
			__enable_irq();
    aed6:	cpsie	i
		if (settings.clock() != _clock) {
    aed8:	ldr	r1, [r3, #8]
    aeda:	cmp	r1, r2
    aedc:	beq.n	af46 <SdSpiArduinoDriver::activate()+0xde>
			uint32_t cbcmr = CCM_CBCMR;
    aede:	ldr	r1, [pc, #132]	; (af64 <SdSpiArduinoDriver::activate()+0xfc>)
		    _clock = settings.clock();
    aee0:	str	r2, [r3, #8]
			uint32_t cbcmr = CCM_CBCMR;
    aee2:	ldr	r1, [r1, #24]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    aee4:	ldr	r4, [pc, #128]	; (af68 <SdSpiArduinoDriver::activate()+0x100>)
    aee6:	ubfx	r5, r1, #4, #2
    aeea:	ubfx	r1, r1, #26, #3
    aeee:	ldr.w	r5, [r4, r5, lsl #2]
    aef2:	adds	r1, #1
    aef4:	udiv	r4, r5, r1
			d = _clock ? clkhz/_clock : clkhz;
    aef8:	cbz	r2, af2a <SdSpiArduinoDriver::activate()+0xc2>
			if (d && clkhz/d > _clock) d++;
    aefa:	cmp	r4, r2
    aefc:	bcc.n	af4a <SdSpiArduinoDriver::activate()+0xe2>
			d = _clock ? clkhz/_clock : clkhz;
    aefe:	udiv	r1, r4, r2
			if (d && clkhz/d > _clock) d++;
    af02:	udiv	r4, r4, r1
    af06:	cmp	r4, r2
    af08:	bhi.n	af60 <SdSpiArduinoDriver::activate()+0xf8>
			if (d > 257) d= 257;  // max div
    af0a:	cmp.w	r1, #258	; 0x102
    af0e:	bcc.n	af4e <SdSpiArduinoDriver::activate()+0xe6>
    af10:	ldr	r2, [pc, #88]	; (af6c <SdSpiArduinoDriver::activate()+0x104>)
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    af12:	str	r2, [r3, #12]
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    af14:	ldr	r3, [r3, #0]
		port().CR = 0;
    af16:	movs	r4, #0
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    af18:	movs	r1, #3
		port().CR = 0;
    af1a:	str	r4, [r3, #16]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    af1c:	str	r1, [r3, #36]	; 0x24
		port().CR = LPSPI_CR_MEN;
    af1e:	movs	r1, #1
		port().CCR = _ccr;
    af20:	str	r2, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
    af22:	str	r0, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    af24:	str	r1, [r3, #16]
    af26:	pop	{r4, r5, r6}
    af28:	bx	lr
			if (d && clkhz/d > _clock) d++;
    af2a:	cmp	r5, r1
    af2c:	bcc.n	af12 <SdSpiArduinoDriver::activate()+0xaa>
    af2e:	adds	r1, r4, #1
    af30:	b.n	af0a <SdSpiArduinoDriver::activate()+0xa2>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    af32:	mov.w	r4, #3758153728	; 0xe000e000
    af36:	ldr	r5, [r3, #36]	; 0x24
    af38:	ldr.w	r1, [r4, #400]	; 0x190
    af3c:	ands	r1, r5
    af3e:	str	r1, [r3, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    af40:	str.w	r1, [r4, #400]	; 0x190
    af44:	b.n	aed6 <SdSpiArduinoDriver::activate()+0x6e>
		port().CCR = _ccr;
    af46:	ldr	r2, [r3, #12]
    af48:	b.n	af14 <SdSpiArduinoDriver::activate()+0xac>
    af4a:	movs	r2, #0
    af4c:	b.n	af12 <SdSpiArduinoDriver::activate()+0xaa>
			if (d > 2) {
    af4e:	cmp	r1, #2
    af50:	bls.n	af4a <SdSpiArduinoDriver::activate()+0xe2>
				div = d-2;
    af52:	subs	r1, #2
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    af54:	lsrs	r4, r1, #1
    af56:	lsls	r2, r4, #16
    af58:	orr.w	r2, r2, r4, lsl #8
    af5c:	orrs	r2, r1
    af5e:	b.n	af12 <SdSpiArduinoDriver::activate()+0xaa>
			d = _clock ? clkhz/_clock : clkhz;
    af60:	mov	r4, r1
    af62:	b.n	af2e <SdSpiArduinoDriver::activate()+0xc6>
    af64:	.word	0x400fc000
    af68:	.word	0x20000b18
    af6c:	.word	0x007f7fff

0000af70 <SdSpiArduinoDriver::begin(SdSpiConfig)>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::begin(SdSpiConfig spiConfig) {
    af70:	sub	sp, #16
    af72:	add.w	ip, sp, #16
    af76:	stmdb	ip, {r1, r2, r3}
    af7a:	mov	r2, r0
  if (spiConfig.spiPort) {
    af7c:	cbz	r3, af88 <SdSpiArduinoDriver::begin(SdSpiConfig)+0x18>
    m_spi->setSCK(SDCARD_SCK_PIN);
#endif  // defined(SDCARD_SPI) && defined(SDCARD_SS_PIN)
  } else {
    m_spi = &SPI;
  }
  m_spi->begin();
    af7e:	mov	r0, r3
    af80:	str	r3, [r2, #0]
}
    af82:	add	sp, #16
  m_spi->begin();
    af84:	b.w	1dfc <SPIClass::begin()>
    m_spi = &SPI;
    af88:	ldr	r3, [pc, #8]	; (af94 <SdSpiArduinoDriver::begin(SdSpiConfig)+0x24>)
  m_spi->begin();
    af8a:	mov	r0, r3
    af8c:	str	r3, [r2, #0]
}
    af8e:	add	sp, #16
  m_spi->begin();
    af90:	b.w	1dfc <SPIClass::begin()>
    af94:	.word	0x200061d8

0000af98 <SdSpiArduinoDriver::deactivate()>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::deactivate() { m_spi->endTransaction(); }
    af98:	ldr	r2, [r0, #0]
		if (interruptMasksUsed) {
    af9a:	ldrb	r3, [r2, #19]
    af9c:	cbz	r3, afe4 <SdSpiArduinoDriver::deactivate()+0x4c>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    af9e:	lsls	r0, r3, #31
    afa0:	bpl.n	afac <SdSpiArduinoDriver::deactivate()+0x14>
    afa2:	ldr	r0, [r2, #40]	; 0x28
    afa4:	mov.w	r1, #3758153728	; 0xe000e000
    afa8:	str.w	r0, [r1, #256]	; 0x100
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    afac:	lsls	r1, r3, #30
    afae:	bpl.n	afba <SdSpiArduinoDriver::deactivate()+0x22>
    afb0:	ldr	r0, [r2, #44]	; 0x2c
    afb2:	mov.w	r1, #3758153728	; 0xe000e000
    afb6:	str.w	r0, [r1, #260]	; 0x104
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    afba:	lsls	r0, r3, #29
    afbc:	bpl.n	afc8 <SdSpiArduinoDriver::deactivate()+0x30>
    afbe:	ldr	r0, [r2, #48]	; 0x30
    afc0:	mov.w	r1, #3758153728	; 0xe000e000
    afc4:	str.w	r0, [r1, #264]	; 0x108
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    afc8:	lsls	r1, r3, #28
    afca:	bpl.n	afd6 <SdSpiArduinoDriver::deactivate()+0x3e>
    afcc:	ldr	r0, [r2, #52]	; 0x34
    afce:	mov.w	r1, #3758153728	; 0xe000e000
    afd2:	str.w	r0, [r1, #268]	; 0x10c
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    afd6:	lsls	r3, r3, #27
    afd8:	bpl.n	afe4 <SdSpiArduinoDriver::deactivate()+0x4c>
    afda:	ldr	r2, [r2, #56]	; 0x38
    afdc:	mov.w	r3, #3758153728	; 0xe000e000
    afe0:	str.w	r2, [r3, #272]	; 0x110
    afe4:	bx	lr
    afe6:	nop

0000afe8 <SdSpiArduinoDriver::end()>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::end() { m_spi->end(); }
    afe8:	ldr	r0, [r0, #0]
    afea:	b.w	208c <SPIClass::end()>
    afee:	nop

0000aff0 <SdSpiArduinoDriver::receive()>:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    aff0:	ldr	r2, [r0, #0]
		port().TDR = data;
    aff2:	movs	r3, #255	; 0xff
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    aff4:	ldr	r2, [r2, #0]
		port().TDR = data;
    aff6:	str	r3, [r2, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    aff8:	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    affa:	tst.w	r3, #2031616	; 0x1f0000
    affe:	beq.n	aff8 <SdSpiArduinoDriver::receive()+0x8>
    b000:	ldr	r0, [r2, #116]	; 0x74
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive() { return m_spi->transfer(0XFF); }
    b002:	uxtb	r0, r0
    b004:	bx	lr
    b006:	nop

0000b008 <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>:
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
    b008:	push	{r4, r5, lr}
    b00a:	mov	r4, r1
    b00c:	sub	sp, #12
    b00e:	mov	r5, r0
#if USE_BLOCK_TRANSFER
  memset(buf, 0XFF, count);
    b010:	movs	r1, #255	; 0xff
    b012:	mov	r0, r4
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
    b014:	str	r2, [sp, #4]
  memset(buf, 0XFF, count);
    b016:	bl	10104 <memset>
		transfer(buf, buf, count);
    b01a:	ldr	r0, [r5, #0]
    b01c:	ldr	r3, [sp, #4]
    b01e:	mov	r2, r4
    b020:	mov	r1, r4
    b022:	bl	2030 <SPIClass::transfer(void const*, void*, unsigned int)>
  for (size_t i = 0; i < count; i++) {
    buf[i] = m_spi->transfer(0XFF);
  }
#endif  // USE_BLOCK_TRANSFER
  return 0;
}
    b026:	movs	r0, #0
    b028:	add	sp, #12
    b02a:	pop	{r4, r5, pc}

0000b02c <SdSpiArduinoDriver::send(unsigned char)>:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    b02c:	ldr	r3, [r0, #0]
    b02e:	ldr	r2, [r3, #0]
		port().TDR = data;
    b030:	str	r1, [r2, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    b032:	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    b034:	tst.w	r3, #2031616	; 0x1f0000
    b038:	beq.n	b032 <SdSpiArduinoDriver::send(unsigned char)+0x6>
    b03a:	ldr	r3, [r2, #116]	; 0x74
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(uint8_t data) { m_spi->transfer(data); }
    b03c:	bx	lr
    b03e:	nop

0000b040 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf, size_t count) {
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    b040:	subs	r3, r2, #1
    b042:	cmp.w	r3, #512	; 0x200
void SdSpiArduinoDriver::send(const uint8_t* buf, size_t count) {
    b046:	push	{r4, r5, lr}
    b048:	mov	r4, r2
    b04a:	sub.w	sp, sp, #516	; 0x204
    b04e:	mov	r5, r0
  if (0 < count && count <= 512) {
    b050:	bcc.n	b076 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x36>
    memcpy(tmp, buf, count);
    m_spi->transfer(tmp, count);
    return;
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    b052:	cbz	r2, b070 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x30>
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    b054:	ldr	r3, [r0, #0]
    b056:	subs	r0, r1, #1
    b058:	ldr	r1, [r3, #0]
    b05a:	adds	r2, r0, r2
		port().TDR = data;
    b05c:	ldrb.w	r3, [r0, #1]!
    b060:	str	r3, [r1, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    b062:	ldr	r3, [r1, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    b064:	tst.w	r3, #2031616	; 0x1f0000
    b068:	beq.n	b062 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x22>
    b06a:	cmp	r0, r2
    b06c:	ldr	r3, [r1, #116]	; 0x74
    b06e:	bne.n	b05c <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x1c>
    m_spi->transfer(buf[i]);
  }
}
    b070:	add.w	sp, sp, #516	; 0x204
    b074:	pop	{r4, r5, pc}
    memcpy(tmp, buf, count);
    b076:	mov	r0, sp
    b078:	bl	b09c <memcpy>
		transfer(buf, buf, count);
    b07c:	mov	r2, sp
    b07e:	mov	r3, r4
    b080:	ldr	r0, [r5, #0]
    b082:	mov	r1, r2
    b084:	bl	2030 <SPIClass::transfer(void const*, void*, unsigned int)>
}
    b088:	add.w	sp, sp, #516	; 0x204
    b08c:	pop	{r4, r5, pc}
    b08e:	nop

0000b090 <sdCsInit(unsigned char)>:
 */
#include "SdSpiDriver.h"
#if ENABLE_ARDUINO_FEATURES
#if SD_CHIP_SELECT_MODE == 0
//------------------------------------------------------------------------------
void sdCsInit(SdCsPin_t pin) { pinMode(pin, OUTPUT); }
    b090:	movs	r1, #1
    b092:	b.w	d17c <pinMode>
    b096:	nop

0000b098 <sdCsWrite(unsigned char, bool)>:
//------------------------------------------------------------------------------
void sdCsWrite(SdCsPin_t pin, bool level) { digitalWrite(pin, level); }
    b098:	b.w	d104 <digitalWrite>

0000b09c <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    b09c:	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    b09e:	orr.w	r3, r1, r0
	ands	r3, r3, #3
    b0a2:	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    b0a6:	bne.n	b184 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    b0a8:	subs	r2, #64	; 0x40
	blo	.Lmid_block
    b0aa:	bcc.n	b130 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    b0ac:	ldr.w	r3, [r1], #4
    b0b0:	str.w	r3, [r0], #4
    b0b4:	ldr.w	r3, [r1], #4
    b0b8:	str.w	r3, [r0], #4
    b0bc:	ldr.w	r3, [r1], #4
    b0c0:	str.w	r3, [r0], #4
    b0c4:	ldr.w	r3, [r1], #4
    b0c8:	str.w	r3, [r0], #4
    b0cc:	ldr.w	r3, [r1], #4
    b0d0:	str.w	r3, [r0], #4
    b0d4:	ldr.w	r3, [r1], #4
    b0d8:	str.w	r3, [r0], #4
    b0dc:	ldr.w	r3, [r1], #4
    b0e0:	str.w	r3, [r0], #4
    b0e4:	ldr.w	r3, [r1], #4
    b0e8:	str.w	r3, [r0], #4
    b0ec:	ldr.w	r3, [r1], #4
    b0f0:	str.w	r3, [r0], #4
    b0f4:	ldr.w	r3, [r1], #4
    b0f8:	str.w	r3, [r0], #4
    b0fc:	ldr.w	r3, [r1], #4
    b100:	str.w	r3, [r0], #4
    b104:	ldr.w	r3, [r1], #4
    b108:	str.w	r3, [r0], #4
    b10c:	ldr.w	r3, [r1], #4
    b110:	str.w	r3, [r0], #4
    b114:	ldr.w	r3, [r1], #4
    b118:	str.w	r3, [r0], #4
    b11c:	ldr.w	r3, [r1], #4
    b120:	str.w	r3, [r0], #4
    b124:	ldr.w	r3, [r1], #4
    b128:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    b12c:	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    b12e:	bcs.n	b0ac <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    b130:	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    b132:	bcc.n	b158 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    b134:	ldr.w	r3, [r1], #4
    b138:	str.w	r3, [r0], #4
    b13c:	ldr.w	r3, [r1], #4
    b140:	str.w	r3, [r0], #4
    b144:	ldr.w	r3, [r1], #4
    b148:	str.w	r3, [r0], #4
    b14c:	ldr.w	r3, [r1], #4
    b150:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    b154:	subs	r2, #16
	bhs	.Lmid_block_loop
    b156:	bcs.n	b134 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    b158:	adds	r2, #12
	blo	.Lcopy_less_than_4
    b15a:	bcc.n	b168 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    b15c:	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    b160:	str.w	r3, [r0], #4
	subs	r2, #4
    b164:	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    b166:	bcs.n	b15c <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    b168:	adds	r2, #4
	beq	.Ldone
    b16a:	beq.n	b17e <memcpy+0xe2>

	lsls	r2, r2, #31
    b16c:	lsls	r2, r2, #31
	itt ne
    b16e:	itt	ne
	ldrbne  r3, [r1], #1
    b170:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    b174:	strbne.w	r3, [r0], #1

	bcc	.Ldone
    b178:	bcc.n	b17e <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    b17a:	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    b17c:	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    b17e:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    b180:	bx	lr
    b182:	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    b184:	cmp	r2, #8
	blo	.Lbyte_copy
    b186:	bcc.n	b1b0 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    b188:	lsls	r3, r1, #30
	beq	.Ldst_aligned
    b18a:	beq.n	b0a8 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    b18c:	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    b190:	beq.n	b0a8 <memcpy+0xc>

	rsb	r3, #4
    b192:	rsb	r3, r3, #4
	subs	r2, r3
    b196:	subs	r2, r2, r3

	lsls    r3, r3, #31
    b198:	lsls	r3, r3, #31
	itt ne
    b19a:	itt	ne
	ldrbne  r3, [r1], #1
    b19c:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    b1a0:	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    b1a4:	bcc.n	b0a8 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    b1a6:	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    b1aa:	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    b1ae:	b.n	b0a8 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    b1b0:	subs	r2, #4
	blo	.Lcopy_less_than_4
    b1b2:	bcc.n	b168 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    b1b4:	subs	r2, #1
	ldrb    r3, [r1], #1
    b1b6:	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    b1ba:	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    b1be:	bcs.n	b1b4 <memcpy+0x118>

	ldrb	r3, [r1]
    b1c0:	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    b1c2:	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    b1c4:	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    b1c6:	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    b1c8:	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    b1ca:	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    b1cc:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    b1ce:	bx	lr

0000b1d0 <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    b1d0:	ldr	r3, [pc, #116]	; (b248 <usb_serial_flush_callback+0x78>)
    b1d2:	ldrb	r2, [r3, #0]
    b1d4:	cmp	r2, #0
    b1d6:	bne.n	b246 <usb_serial_flush_callback+0x76>
	if (!usb_configuration) return;
    b1d8:	and.w	r3, r2, #255	; 0xff
    b1dc:	ldr	r2, [pc, #108]	; (b24c <usb_serial_flush_callback+0x7c>)
    b1de:	ldrb	r2, [r2, #0]
    b1e0:	cbz	r2, b246 <usb_serial_flush_callback+0x76>
{
    b1e2:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_available == 0) return;
    b1e6:	ldr	r5, [pc, #104]	; (b250 <usb_serial_flush_callback+0x80>)
    b1e8:	ldrh	r2, [r5, #0]
    b1ea:	cbz	r2, b242 <usb_serial_flush_callback+0x72>
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    b1ec:	ldr	r6, [pc, #100]	; (b254 <usb_serial_flush_callback+0x84>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    b1ee:	rsb	r8, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    b1f2:	ldr	r7, [pc, #100]	; (b258 <usb_serial_flush_callback+0x88>)
    b1f4:	ldrb	r2, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    b1f6:	ldr	r4, [pc, #100]	; (b25c <usb_serial_flush_callback+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    b1f8:	add.w	r7, r7, r2, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    b1fc:	add.w	r4, r4, r2, lsl #11
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    b200:	mov	r2, r8
    b202:	mov	r0, r7
    b204:	mov	r1, r4
    b206:	bl	cb64 <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    b20a:	add.w	r2, r4, r8
	asm("dsb");
    b20e:	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    b212:	mov.w	r3, #3758153728	; 0xe000e000
    b216:	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    b21a:	adds	r4, #32
	} while (location < end_addr);
    b21c:	cmp	r2, r4
    b21e:	bhi.n	b216 <usb_serial_flush_callback+0x46>
	asm("dsb");
    b220:	dsb	sy
	asm("isb");
    b224:	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    b228:	movs	r0, #3
    b22a:	mov	r1, r7
    b22c:	bl	cb94 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    b230:	ldrb	r3, [r6, #0]
    b232:	adds	r3, #1
    b234:	uxtb	r3, r3
    b236:	cmp	r3, #3
    b238:	it	hi
    b23a:	movhi	r3, #0
    b23c:	strb	r3, [r6, #0]
	tx_available = 0;
    b23e:	movs	r3, #0
    b240:	strh	r3, [r5, #0]
}
    b242:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b246:	bx	lr
    b248:	.word	0x20015d27
    b24c:	.word	0x20015d2e
    b250:	.word	0x20015d06
    b254:	.word	0x20015d25
    b258:	.word	0x20003920
    b25c:	.word	0x20003a40

0000b260 <usb_serial_write.part.0>:
int usb_serial_write(const void *buffer, uint32_t size)
    b260:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b264:	sub	sp, #20
	while (size > 0) {
    b266:	strd	r1, r0, [sp, #4]
    b26a:	cmp	r1, #0
    b26c:	beq.w	b406 <usb_serial_write.part.0+0x1a6>
	uint32_t sent=0;
    b270:	movs	r3, #0
    b272:	ldr	r4, [pc, #408]	; (b40c <usb_serial_write.part.0+0x1ac>)
    b274:	ldr.w	r8, [pc, #432]	; b428 <usb_serial_write.part.0+0x1c8>
    b278:	ldr.w	sl, [pc, #432]	; b42c <usb_serial_write.part.0+0x1cc>
				wait_begin_at = systick_millis_count;
    b27c:	ldr	r7, [pc, #400]	; (b410 <usb_serial_write.part.0+0x1b0>)
	uint32_t sent=0;
    b27e:	str	r3, [sp, #0]
		tx_noautoflush = 1;
    b280:	movs	r3, #1
		transfer_t *xfer = tx_transfer + tx_head;
    b282:	ldr	r2, [pc, #400]	; (b414 <usb_serial_write.part.0+0x1b4>)
		tx_noautoflush = 1;
    b284:	strb	r3, [r4, #0]
		transfer_t *xfer = tx_transfer + tx_head;
    b286:	ldr	r3, [pc, #400]	; (b418 <usb_serial_write.part.0+0x1b8>)
    b288:	ldrb	r1, [r3, #0]
		while (!tx_available) {
    b28a:	ldrh.w	r3, [r8]
		transfer_t *xfer = tx_transfer + tx_head;
    b28e:	add.w	r9, r2, r1, lsl #5
		while (!tx_available) {
    b292:	cmp	r3, #0
    b294:	bne.w	b3fe <usb_serial_write.part.0+0x19e>
		uint32_t wait_begin_at=0;
    b298:	mov	r6, r3
		int waiting=0;
    b29a:	mov	r5, r3
			tx_noautoflush = 0;
    b29c:	mov	fp, r3
			uint32_t status = usb_transfer_status(xfer);
    b29e:	mov	r0, r9
    b2a0:	bl	cd04 <usb_transfer_status>
			if (!(status & 0x80)) {
    b2a4:	ands.w	r0, r0, #128	; 0x80
    b2a8:	beq.w	b3be <usb_serial_write.part.0+0x15e>
			asm("dsb" ::: "memory");
    b2ac:	dsb	sy
			if (transmit_previous_timeout) return sent;
    b2b0:	ldrb.w	r3, [sl]
			tx_noautoflush = 0;
    b2b4:	strb.w	fp, [r4]
			if (!waiting) {
    b2b8:	cbnz	r5, b2bc <usb_serial_write.part.0+0x5c>
				wait_begin_at = systick_millis_count;
    b2ba:	ldr	r6, [r7, #0]
			if (transmit_previous_timeout) return sent;
    b2bc:	cmp	r3, #0
    b2be:	bne.n	b3b6 <usb_serial_write.part.0+0x156>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    b2c0:	ldr	r3, [r7, #0]
    b2c2:	subs	r3, r3, r6
    b2c4:	cmp	r3, #120	; 0x78
    b2c6:	bhi.w	b3d2 <usb_serial_write.part.0+0x172>
			if (!usb_configuration) return sent;
    b2ca:	ldr	r3, [pc, #336]	; (b41c <usb_serial_write.part.0+0x1bc>)
    b2cc:	ldrb	r3, [r3, #0]
    b2ce:	cmp	r3, #0
    b2d0:	beq.n	b3b6 <usb_serial_write.part.0+0x156>
			yield();
    b2d2:	bl	daa4 <yield>
			tx_noautoflush = 1;
    b2d6:	movs	r2, #1
		while (!tx_available) {
    b2d8:	ldrh.w	r3, [r8]
    b2dc:	mov	r5, r2
			tx_noautoflush = 1;
    b2de:	strb	r2, [r4, #0]
		while (!tx_available) {
    b2e0:	cmp	r3, #0
    b2e2:	beq.n	b29e <usb_serial_write.part.0+0x3e>
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    b2e4:	ldr	r2, [pc, #304]	; (b418 <usb_serial_write.part.0+0x1b8>)
    b2e6:	rsb	r0, r3, #2048	; 0x800
    b2ea:	ldrb	r1, [r2, #0]
    b2ec:	mov	r2, r3
    b2ee:	add.w	r0, r0, r1, lsl #11
    b2f2:	ldr	r5, [pc, #300]	; (b420 <usb_serial_write.part.0+0x1c0>)
    b2f4:	lsls	r1, r1, #11
    b2f6:	add	r0, r5
		if (size >= tx_available) {
    b2f8:	ldr	r5, [sp, #4]
    b2fa:	cmp	r5, r2
    b2fc:	bcs.n	b32c <usb_serial_write.part.0+0xcc>
			memcpy(txdata, data, size);
    b2fe:	mov	r2, r5
    b300:	ldr	r1, [sp, #8]
    b302:	str	r3, [sp, #12]
    b304:	bl	b09c <memcpy>
			tx_available -= size;
    b308:	ldr	r3, [sp, #12]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    b30a:	mov.w	r2, #3221225472	; 0xc0000000
			tx_available -= size;
    b30e:	subs	r3, r3, r5
    b310:	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    b314:	ldr	r3, [pc, #268]	; (b424 <usb_serial_write.part.0+0x1c4>)
    b316:	str.w	r2, [r3, #132]	; 0x84
		asm("dsb" ::: "memory");
    b31a:	dsb	sy
			sent += size;
    b31e:	ldr	r0, [sp, #0]
		tx_noautoflush = 0;
    b320:	movs	r3, #0
			sent += size;
    b322:	add	r0, r5
		tx_noautoflush = 0;
    b324:	strb	r3, [r4, #0]
}
    b326:	add	sp, #20
    b328:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    b32c:	ldr	r3, [pc, #240]	; (b420 <usb_serial_write.part.0+0x1c0>)
    b32e:	adds	r5, r1, r3
			memcpy(txdata, data, tx_available);
    b330:	ldr	r1, [sp, #8]
    b332:	bl	b09c <memcpy>
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    b336:	movs	r3, #0
    b338:	mov.w	r2, #2048	; 0x800
    b33c:	mov	r1, r5
    b33e:	mov	r0, r9
    b340:	bl	cb64 <usb_prepare_transfer>
	asm("dsb");
    b344:	dsb	sy
    b348:	add.w	r2, r5, #32
    b34c:	add.w	r3, r5, #2048	; 0x800
    b350:	cmp	r3, r2
    b352:	ite	cc
    b354:	movcc	r3, #1
    b356:	movcs	r3, #64	; 0x40
		SCB_CACHE_DCCIMVAC = location;
    b358:	mov.w	r2, #3758153728	; 0xe000e000
    b35c:	add.w	r3, r5, r3, lsl #5
    b360:	str.w	r5, [r2, #3952]	; 0xf70
		location += 32;
    b364:	adds	r5, #32
	} while (location < end_addr);
    b366:	cmp	r5, r3
    b368:	bne.n	b360 <usb_serial_write.part.0+0x100>
	asm("dsb");
    b36a:	dsb	sy
	asm("isb");
    b36e:	isb	sy
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    b372:	movs	r0, #3
    b374:	mov	r1, r9
    b376:	bl	cb94 <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    b37a:	ldr	r2, [pc, #156]	; (b418 <usb_serial_write.part.0+0x1b8>)
    b37c:	ldrb	r3, [r2, #0]
    b37e:	adds	r3, #1
    b380:	uxtb	r3, r3
    b382:	cmp	r3, #3
    b384:	bhi.n	b3e0 <usb_serial_write.part.0+0x180>
    b386:	strb	r3, [r2, #0]
			size -= tx_available;
    b388:	ldrh.w	r3, [r8]
    b38c:	ldr	r2, [sp, #4]
    b38e:	subs	r1, r2, r3
			sent += tx_available;
    b390:	ldr	r2, [sp, #0]
    b392:	add	r2, r3
			size -= tx_available;
    b394:	str	r1, [sp, #4]
			sent += tx_available;
    b396:	str	r2, [sp, #0]
			data += tx_available;
    b398:	ldr	r2, [sp, #8]
    b39a:	add	r2, r3
			tx_available = 0;
    b39c:	movs	r3, #0
			data += tx_available;
    b39e:	str	r2, [sp, #8]
	USB1_GPTIMER0CTRL = 0;
    b3a0:	ldr	r2, [pc, #128]	; (b424 <usb_serial_write.part.0+0x1c4>)
			tx_available = 0;
    b3a2:	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = 0;
    b3a6:	str.w	r3, [r2, #132]	; 0x84
		asm("dsb" ::: "memory");
    b3aa:	dsb	sy
		tx_noautoflush = 0;
    b3ae:	strb	r3, [r4, #0]
	while (size > 0) {
    b3b0:	cmp	r1, #0
    b3b2:	bne.w	b280 <usb_serial_write.part.0+0x20>
	return sent;
    b3b6:	ldr	r0, [sp, #0]
}
    b3b8:	add	sp, #20
    b3ba:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				tx_available = TX_SIZE;
    b3be:	mov.w	r2, #2048	; 0x800
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    b3c2:	ldr	r3, [pc, #84]	; (b418 <usb_serial_write.part.0+0x1b8>)
				transmit_previous_timeout = 0;
    b3c4:	strb.w	r0, [sl]
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    b3c8:	ldrb	r1, [r3, #0]
				break;
    b3ca:	mov	r3, r2
				tx_available = TX_SIZE;
    b3cc:	strh.w	r2, [r8]
				break;
    b3d0:	b.n	b2ee <usb_serial_write.part.0+0x8e>
				transmit_previous_timeout = 1;
    b3d2:	movs	r3, #1
				return sent;
    b3d4:	ldr	r0, [sp, #0]
				transmit_previous_timeout = 1;
    b3d6:	strb.w	r3, [sl]
}
    b3da:	add	sp, #20
    b3dc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			size -= tx_available;
    b3e0:	ldrh.w	r3, [r8]
    b3e4:	ldr	r2, [sp, #4]
    b3e6:	subs	r1, r2, r3
			sent += tx_available;
    b3e8:	ldr	r2, [sp, #0]
    b3ea:	add	r2, r3
			size -= tx_available;
    b3ec:	str	r1, [sp, #4]
			sent += tx_available;
    b3ee:	str	r2, [sp, #0]
			data += tx_available;
    b3f0:	ldr	r2, [sp, #8]
    b3f2:	add	r2, r3
			if (++tx_head >= TX_NUM) tx_head = 0;
    b3f4:	movs	r3, #0
			data += tx_available;
    b3f6:	str	r2, [sp, #8]
			if (++tx_head >= TX_NUM) tx_head = 0;
    b3f8:	ldr	r2, [pc, #28]	; (b418 <usb_serial_write.part.0+0x1b8>)
    b3fa:	strb	r3, [r2, #0]
    b3fc:	b.n	b3a0 <usb_serial_write.part.0+0x140>
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    b3fe:	mov	r2, r3
    b400:	rsb	r0, r3, #2048	; 0x800
    b404:	b.n	b2ee <usb_serial_write.part.0+0x8e>
    b406:	mov	r0, r1
	return sent;
    b408:	b.n	b3b8 <usb_serial_write.part.0+0x158>
    b40a:	nop
    b40c:	.word	0x20015d27
    b410:	.word	0x2001598c
    b414:	.word	0x20003920
    b418:	.word	0x20015d25
    b41c:	.word	0x20015d2e
    b420:	.word	0x20003a40
    b424:	.word	0x402e0000
    b428:	.word	0x20015d06
    b42c:	.word	0x20015d23

0000b430 <rx_event>:
{
    b430:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    b434:	ldr	r5, [pc, #292]	; (b55c <rx_event+0x12c>)
{
    b436:	sub	sp, #12
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    b438:	ldr	r4, [r0, #4]
    b43a:	ldrh	r7, [r5, #0]
    b43c:	ubfx	r4, r4, #16, #15
	int i = t->callback_param;
    b440:	ldr	r6, [r0, #28]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    b442:	subs	r4, r7, r4
	if (len > 0) {
    b444:	cmp	r4, #0
    b446:	ble.n	b494 <rx_event+0x64>
		if (head != rx_tail) {
    b448:	ldr	r2, [pc, #276]	; (b560 <rx_event+0x130>)
		uint32_t head = rx_head;
    b44a:	ldr	r1, [pc, #280]	; (b564 <rx_event+0x134>)
			uint32_t count = rx_count[ii];
    b44c:	ldr.w	r8, [pc, #300]	; b57c <rx_event+0x14c>
		uint32_t head = rx_head;
    b450:	ldrb	r3, [r1, #0]
		if (head != rx_tail) {
    b452:	ldrb	r0, [r2, #0]
		uint32_t head = rx_head;
    b454:	uxtb	r2, r3
		if (head != rx_tail) {
    b456:	cmp	r3, r0
			uint32_t ii = rx_list[head];
    b458:	ldr	r0, [pc, #268]	; (b568 <rx_event+0x138>)
		if (head != rx_tail) {
    b45a:	beq.n	b46c <rx_event+0x3c>
			uint32_t ii = rx_list[head];
    b45c:	ldrb.w	fp, [r0, r2]
			uint32_t count = rx_count[ii];
    b460:	ldrh.w	r9, [r8, fp, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    b464:	rsb	r3, r9, #512	; 0x200
    b468:	cmp	r4, r3
    b46a:	bls.n	b4e8 <rx_event+0xb8>
		if (++head > RX_NUM) head = 0;
    b46c:	adds	r2, #1
		rx_index[i] = 0;
    b46e:	movs	r3, #0
    b470:	ldr	r5, [pc, #248]	; (b56c <rx_event+0x13c>)
		if (++head > RX_NUM) head = 0;
    b472:	cmp	r2, #8
		rx_count[i] = len;
    b474:	strh.w	r4, [r8, r6, lsl #1]
		rx_index[i] = 0;
    b478:	strh.w	r3, [r5, r6, lsl #1]
		rx_head = head;
    b47c:	ite	ls
    b47e:	uxtbls	r3, r2
		if (++head > RX_NUM) head = 0;
    b480:	movhi	r2, r3
		rx_head = head;
    b482:	strb	r3, [r1, #0]
		rx_available += len;
    b484:	ldr	r3, [pc, #232]	; (b570 <rx_event+0x140>)
		rx_list[head] = i;
    b486:	strb	r6, [r0, r2]
		rx_available += len;
    b488:	ldr	r2, [r3, #0]
    b48a:	add	r4, r2
    b48c:	str	r4, [r3, #0]
}
    b48e:	add	sp, #12
    b490:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    b494:	mov	r2, r7
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    b496:	ldr	r4, [pc, #220]	; (b574 <rx_event+0x144>)
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    b498:	ldr	r7, [pc, #220]	; (b578 <rx_event+0x148>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    b49a:	mov.w	r8, #3758153728	; 0xe000e000
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    b49e:	add.w	r4, r4, r6, lsl #9
	NVIC_DISABLE_IRQ(IRQ_USB1);
    b4a2:	mov.w	r3, #131072	; 0x20000
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    b4a6:	add.w	r7, r7, r6, lsl #5
	NVIC_DISABLE_IRQ(IRQ_USB1);
    b4aa:	str.w	r3, [r8, #396]	; 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    b4ae:	mov	r1, r4
    b4b0:	mov	r3, r6
    b4b2:	mov	r0, r7
    b4b4:	bl	cb64 <usb_prepare_transfer>
	arm_dcache_delete(buffer, rx_packet_size);
    b4b8:	ldrh	r3, [r5, #0]
	uint32_t end_addr = (uint32_t)addr + size;
    b4ba:	add	r3, r4
	asm("dsb");
    b4bc:	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    b4c0:	str.w	r4, [r8, #3932]	; 0xf5c
		location += 32;
    b4c4:	adds	r4, #32
	} while (location < end_addr);
    b4c6:	cmp	r3, r4
    b4c8:	bhi.n	b4c0 <rx_event+0x90>
	asm("dsb");
    b4ca:	dsb	sy
	asm("isb");
    b4ce:	isb	sy
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    b4d2:	movs	r0, #3
    b4d4:	mov	r1, r7
    b4d6:	bl	cc4c <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    b4da:	mov.w	r3, #131072	; 0x20000
    b4de:	str.w	r3, [r8, #268]	; 0x10c
}
    b4e2:	add	sp, #12
    b4e4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    b4e8:	add.w	r0, r9, fp, lsl #9
    b4ec:	ldr	r1, [pc, #132]	; (b574 <rx_event+0x144>)
    b4ee:	mov	r2, r4
	NVIC_DISABLE_IRQ(IRQ_USB1);
    b4f0:	mov.w	sl, #3758153728	; 0xe000e000
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    b4f4:	add	r0, r1
    b4f6:	add.w	r1, r1, r6, lsl #9
				rx_count[ii] = count + len;
    b4fa:	add	r9, r4
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    b4fc:	str	r1, [sp, #4]
    b4fe:	bl	b09c <memcpy>
				rx_available += len;
    b502:	ldr.w	ip, [pc, #108]	; b570 <rx_event+0x140>
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    b506:	mov	r2, r7
    b508:	ldr	r7, [pc, #108]	; (b578 <rx_event+0x148>)
    b50a:	mov	r3, r6
				rx_available += len;
    b50c:	ldr.w	r0, [ip]
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    b510:	add.w	r7, r7, r6, lsl #5
    b514:	ldr	r1, [sp, #4]
				rx_available += len;
    b516:	add	r0, r4
				rx_count[ii] = count + len;
    b518:	strh.w	r9, [r8, fp, lsl #1]
				rx_available += len;
    b51c:	str.w	r0, [ip]
	NVIC_DISABLE_IRQ(IRQ_USB1);
    b520:	mov.w	r0, #131072	; 0x20000
    b524:	str.w	r0, [sl, #396]	; 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    b528:	mov	r0, r7
    b52a:	bl	cb64 <usb_prepare_transfer>
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    b52e:	ldr	r1, [sp, #4]
	arm_dcache_delete(buffer, rx_packet_size);
    b530:	ldrh	r3, [r5, #0]
	uint32_t end_addr = (uint32_t)addr + size;
    b532:	add	r3, r1
	asm("dsb");
    b534:	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    b538:	str.w	r1, [sl, #3932]	; 0xf5c
		location += 32;
    b53c:	adds	r1, #32
	} while (location < end_addr);
    b53e:	cmp	r3, r1
    b540:	bhi.n	b538 <rx_event+0x108>
	asm("dsb");
    b542:	dsb	sy
	asm("isb");
    b546:	isb	sy
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    b54a:	movs	r0, #3
    b54c:	mov	r1, r7
    b54e:	bl	cc4c <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    b552:	mov.w	r3, #131072	; 0x20000
    b556:	str.w	r3, [sl, #268]	; 0x10c
}
    b55a:	b.n	b48e <rx_event+0x5e>
    b55c:	.word	0x20015d02
    b560:	.word	0x20015d20
    b564:	.word	0x20015d1e
    b568:	.word	0x20015960
    b56c:	.word	0x20015944
    b570:	.word	0x20015920
    b574:	.word	0x20002720
    b578:	.word	0x20003720
    b57c:	.word	0x20015928

0000b580 <usb_serial_reset>:
}
    b580:	bx	lr
    b582:	nop

0000b584 <usb_serial_configure>:
{
    b584:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (usb_high_speed) {
    b588:	ldr	r3, [pc, #240]	; (b67c <usb_serial_configure+0xf8>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
    b58a:	movs	r1, #0
    b58c:	ldr	r5, [pc, #240]	; (b680 <usb_serial_configure+0xfc>)
    b58e:	movs	r2, #128	; 0x80
	if (usb_high_speed) {
    b590:	ldrb	r3, [r3, #0]
	tx_head = 0;
    b592:	movs	r4, #0
    b594:	ldr	r7, [pc, #236]	; (b684 <usb_serial_configure+0x100>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    b596:	mov.w	r8, #131072	; 0x20000
		tx_packet_size = CDC_TX_SIZE_12;
    b59a:	cmp	r3, r1
	memset(tx_transfer, 0, sizeof(tx_transfer));
    b59c:	ldr	r0, [pc, #232]	; (b688 <usb_serial_configure+0x104>)
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    b59e:	mov	r9, r4
    b5a0:	ldr	r6, [pc, #232]	; (b68c <usb_serial_configure+0x108>)
		tx_packet_size = CDC_TX_SIZE_12;
    b5a2:	ite	ne
    b5a4:	movne.w	r3, #512	; 0x200
    b5a8:	moveq	r3, #64	; 0x40
    b5aa:	strh	r3, [r5, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    b5ac:	strh	r3, [r7, #0]
    b5ae:	bl	10104 <memset>
	tx_head = 0;
    b5b2:	ldr	r2, [pc, #220]	; (b690 <usb_serial_configure+0x10c>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    b5b4:	mov	r1, r4
	tx_available = 0;
    b5b6:	ldr	r3, [pc, #220]	; (b694 <usb_serial_configure+0x110>)
	tx_head = 0;
    b5b8:	strb	r4, [r2, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    b5ba:	mov.w	r2, #256	; 0x100
    b5be:	ldr	r0, [pc, #204]	; (b68c <usb_serial_configure+0x108>)
	tx_available = 0;
    b5c0:	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    b5c2:	bl	10104 <memset>
	memset(rx_count, 0, sizeof(rx_count));
    b5c6:	ldr	r2, [pc, #208]	; (b698 <usb_serial_configure+0x114>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    b5c8:	movs	r1, #16
	memset(rx_index, 0, sizeof(rx_index));
    b5ca:	ldr	r3, [pc, #208]	; (b69c <usb_serial_configure+0x118>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    b5cc:	movs	r0, #2
	memset(rx_count, 0, sizeof(rx_count));
    b5ce:	strd	r4, r4, [r2]
    b5d2:	strd	r4, r4, [r2, #8]
	rx_head = 0;
    b5d6:	ldr	r2, [pc, #200]	; (b6a0 <usb_serial_configure+0x11c>)
	memset(rx_index, 0, sizeof(rx_index));
    b5d8:	strd	r4, r4, [r3]
	rx_head = 0;
    b5dc:	strb	r4, [r2, #0]
	rx_available = 0;
    b5de:	ldr	r2, [pc, #196]	; (b6a4 <usb_serial_configure+0x120>)
	memset(rx_index, 0, sizeof(rx_index));
    b5e0:	strd	r4, r4, [r3, #8]
	rx_tail = 0;
    b5e4:	ldr	r3, [pc, #192]	; (b6a8 <usb_serial_configure+0x124>)
    b5e6:	strb	r4, [r3, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    b5e8:	mov	r3, r4
	rx_available = 0;
    b5ea:	str	r4, [r2, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    b5ec:	mov	r2, r4
    b5ee:	bl	ca30 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    b5f2:	mov	r2, r4
    b5f4:	ldrh	r1, [r7, #0]
    b5f6:	movs	r0, #3
    b5f8:	ldr	r3, [pc, #176]	; (b6ac <usb_serial_configure+0x128>)
    b5fa:	bl	c9cc <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    b5fe:	mov	r3, r4
    b600:	ldrh	r1, [r5, #0]
    b602:	movs	r2, #1
    b604:	movs	r0, #3
    b606:	ldr	r5, [pc, #168]	; (b6b0 <usb_serial_configure+0x12c>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    b608:	mov.w	r4, #3758153728	; 0xe000e000
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    b60c:	bl	ca30 <usb_config_tx>
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    b610:	mov	r1, r5
    b612:	mov	r3, r9
    b614:	ldrh	r2, [r7, #0]
    b616:	mov	r0, r6
	NVIC_DISABLE_IRQ(IRQ_USB1);
    b618:	str.w	r8, [r4, #396]	; 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    b61c:	bl	cb64 <usb_prepare_transfer>
	arm_dcache_delete(buffer, rx_packet_size);
    b620:	ldrh	r1, [r7, #0]
	uint32_t end_addr = (uint32_t)addr + size;
    b622:	add	r1, r5
	asm("dsb");
    b624:	dsb	sy
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    b628:	mov	r2, r5
		SCB_CACHE_DCIMVAC = location;
    b62a:	str.w	r2, [r4, #3932]	; 0xf5c
		location += 32;
    b62e:	adds	r2, #32
	} while (location < end_addr);
    b630:	cmp	r1, r2
    b632:	bhi.n	b62a <usb_serial_configure+0xa6>
	asm("dsb");
    b634:	dsb	sy
	asm("isb");
    b638:	isb	sy
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    b63c:	add.w	r9, r9, #1
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    b640:	mov	r1, r6
    b642:	movs	r0, #3
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    b644:	adds	r6, #32
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    b646:	bl	cc4c <usb_receive>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    b64a:	cmp.w	r9, #8
    b64e:	add.w	r5, r5, #512	; 0x200
	NVIC_ENABLE_IRQ(IRQ_USB1);
    b652:	str.w	r8, [r4, #268]	; 0x10c
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    b656:	bne.n	b610 <usb_serial_configure+0x8c>
	USB1_GPTIMER0CTRL = 0;
    b658:	ldr	r3, [pc, #88]	; (b6b4 <usb_serial_configure+0x130>)
	USB1_GPTIMER0LD = microseconds - 1;
    b65a:	movs	r2, #74	; 0x4a
	usb_timer0_callback = callback;
    b65c:	ldr	r0, [pc, #88]	; (b6b8 <usb_serial_configure+0x134>)
	USB1_GPTIMER0CTRL = 0;
    b65e:	movs	r1, #0
	usb_timer0_callback = callback;
    b660:	ldr	r4, [pc, #88]	; (b6bc <usb_serial_configure+0x138>)
    b662:	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
    b664:	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    b668:	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    b66c:	ldr.w	r2, [r3, #328]	; 0x148
    b670:	orr.w	r2, r2, #16777216	; 0x1000000
    b674:	str.w	r2, [r3, #328]	; 0x148
}
    b678:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    b67c:	.word	0x20015d2f
    b680:	.word	0x20015d0a
    b684:	.word	0x20015d02
    b688:	.word	0x20003920
    b68c:	.word	0x20003720
    b690:	.word	0x20015d25
    b694:	.word	0x20015d06
    b698:	.word	0x20015928
    b69c:	.word	0x20015944
    b6a0:	.word	0x20015d1e
    b6a4:	.word	0x20015920
    b6a8:	.word	0x20015d20
    b6ac:	.word	0x0000b431
    b6b0:	.word	0x20002720
    b6b4:	.word	0x402e0000
    b6b8:	.word	0x20015ce8
    b6bc:	.word	0x0000b1d1

0000b6c0 <usb_serial_read>:
	NVIC_DISABLE_IRQ(IRQ_USB1);
    b6c0:	mov.w	r3, #3758153728	; 0xe000e000
    b6c4:	mov.w	r2, #131072	; 0x20000
{
    b6c8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
    b6cc:	str.w	r2, [r3, #396]	; 0x18c
{
    b6d0:	sub	sp, #12
	uint32_t tail = rx_tail;
    b6d2:	ldr	r3, [pc, #248]	; (b7cc <usb_serial_read+0x10c>)
	while (count < size && tail != rx_head) {
    b6d4:	mov	r7, r1
	uint32_t tail = rx_tail;
    b6d6:	ldrb	r4, [r3, #0]
	while (count < size && tail != rx_head) {
    b6d8:	cmp	r1, #0
    b6da:	beq.n	b7c8 <usb_serial_read+0x108>
    b6dc:	mov	r9, r0
    b6de:	uxtb	r4, r4
	uint32_t count=0;
    b6e0:	movs	r6, #0
		uint32_t avail = rx_count[i] - rx_index[i];
    b6e2:	ldr.w	sl, [pc, #260]	; b7e8 <usb_serial_read+0x128>
	while (count < size && tail != rx_head) {
    b6e6:	ldr	r3, [pc, #232]	; (b7d0 <usb_serial_read+0x110>)
    b6e8:	ldrb	r3, [r3, #0]
    b6ea:	cmp	r4, r3
    b6ec:	beq.n	b7c4 <usb_serial_read+0x104>
		if (++tail > RX_NUM) tail = 0;
    b6ee:	adds	r4, #1
		uint32_t i = rx_list[tail];
    b6f0:	ldr	r3, [pc, #224]	; (b7d4 <usb_serial_read+0x114>)
		uint32_t len = size - count;
    b6f2:	subs	r5, r7, r6
		if (++tail > RX_NUM) tail = 0;
    b6f4:	cmp	r4, #9
    b6f6:	it	cs
    b6f8:	movcs	r4, #0
		uint32_t i = rx_list[tail];
    b6fa:	ldrb.w	fp, [r3, r4]
		uint32_t avail = rx_count[i] - rx_index[i];
    b6fe:	ldr	r3, [pc, #216]	; (b7d8 <usb_serial_read+0x118>)
    b700:	ldrh.w	r1, [sl, fp, lsl #1]
    b704:	ldrh.w	r8, [r3, fp, lsl #1]
    b708:	sub.w	r8, r8, r1
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    b70c:	add.w	r1, r1, fp, lsl #9
		if (avail > len) {
    b710:	cmp	r5, r8
    b712:	bcs.n	b748 <usb_serial_read+0x88>
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    b714:	ldr	r3, [pc, #196]	; (b7dc <usb_serial_read+0x11c>)
    b716:	mov	r2, r5
    b718:	mov	r0, r9
    b71a:	add	r1, r3
    b71c:	bl	b09c <memcpy>
			rx_available -= len;
    b720:	ldr	r2, [pc, #188]	; (b7e0 <usb_serial_read+0x120>)
			rx_index[i] += len;
    b722:	ldrh.w	r1, [sl, fp, lsl #1]
	return count;
    b726:	mov	r0, r7
			rx_available -= len;
    b728:	ldr	r3, [r2, #0]
			rx_index[i] += len;
    b72a:	add	r5, r1
			rx_available -= len;
    b72c:	subs	r3, r3, r7
			rx_index[i] += len;
    b72e:	strh.w	r5, [sl, fp, lsl #1]
			rx_available -= len;
    b732:	add	r3, r6
    b734:	str	r3, [r2, #0]
	NVIC_ENABLE_IRQ(IRQ_USB1);
    b736:	mov.w	r3, #3758153728	; 0xe000e000
    b73a:	mov.w	r2, #131072	; 0x20000
    b73e:	str.w	r2, [r3, #268]	; 0x10c
}
    b742:	add	sp, #12
    b744:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    b748:	ldr	r5, [pc, #144]	; (b7dc <usb_serial_read+0x11c>)
    b74a:	mov	r2, r8
    b74c:	mov	r0, r9
			count += avail;
    b74e:	add	r6, r8
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    b750:	add	r1, r5
			p += avail;
    b752:	add	r9, r8
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    b754:	bl	b09c <memcpy>
			rx_available -= avail;
    b758:	ldr	r2, [pc, #132]	; (b7e0 <usb_serial_read+0x120>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    b75a:	mov.w	r1, fp, lsl #9
			rx_available -= avail;
    b75e:	ldr	r3, [r2, #0]
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    b760:	add	r1, r5
	NVIC_DISABLE_IRQ(IRQ_USB1);
    b762:	mov.w	r5, #3758153728	; 0xe000e000
			rx_available -= avail;
    b766:	sub.w	r3, r3, r8
    b76a:	str	r3, [r2, #0]
			rx_tail = tail;
    b76c:	uxtb	r3, r4
    b76e:	ldr	r2, [pc, #92]	; (b7cc <usb_serial_read+0x10c>)
    b770:	strb	r3, [r2, #0]
	NVIC_DISABLE_IRQ(IRQ_USB1);
    b772:	mov.w	r2, #131072	; 0x20000
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    b776:	ldr	r3, [pc, #108]	; (b7e4 <usb_serial_read+0x124>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    b778:	str.w	r2, [r5, #396]	; 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    b77c:	add.w	r8, r3, fp, lsl #5
    b780:	mov	r3, fp
    b782:	ldr.w	fp, [pc, #104]	; b7ec <usb_serial_read+0x12c>
    b786:	mov	r0, r8
    b788:	str	r1, [sp, #4]
    b78a:	ldrh.w	r2, [fp]
    b78e:	bl	cb64 <usb_prepare_transfer>
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    b792:	ldr	r1, [sp, #4]
	arm_dcache_delete(buffer, rx_packet_size);
    b794:	ldrh.w	r3, [fp]
	uint32_t end_addr = (uint32_t)addr + size;
    b798:	add	r3, r1
	asm("dsb");
    b79a:	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    b79e:	str.w	r1, [r5, #3932]	; 0xf5c
		location += 32;
    b7a2:	adds	r1, #32
	} while (location < end_addr);
    b7a4:	cmp	r3, r1
    b7a6:	bhi.n	b79e <usb_serial_read+0xde>
	asm("dsb");
    b7a8:	dsb	sy
	asm("isb");
    b7ac:	isb	sy
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    b7b0:	movs	r0, #3
    b7b2:	mov	r1, r8
    b7b4:	bl	cc4c <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    b7b8:	mov.w	r3, #131072	; 0x20000
	while (count < size && tail != rx_head) {
    b7bc:	cmp	r7, r6
	NVIC_ENABLE_IRQ(IRQ_USB1);
    b7be:	str.w	r3, [r5, #268]	; 0x10c
	while (count < size && tail != rx_head) {
    b7c2:	bhi.n	b6e6 <usb_serial_read+0x26>
	return count;
    b7c4:	mov	r0, r6
    b7c6:	b.n	b736 <usb_serial_read+0x76>
	while (count < size && tail != rx_head) {
    b7c8:	mov	r0, r1
    b7ca:	b.n	b736 <usb_serial_read+0x76>
    b7cc:	.word	0x20015d20
    b7d0:	.word	0x20015d1e
    b7d4:	.word	0x20015960
    b7d8:	.word	0x20015928
    b7dc:	.word	0x20002720
    b7e0:	.word	0x20015920
    b7e4:	.word	0x20003720
    b7e8:	.word	0x20015944
    b7ec:	.word	0x20015d02

0000b7f0 <usb_serial_peekchar>:
	if (tail == rx_head) return -1;
    b7f0:	ldr	r3, [pc, #44]	; (b820 <usb_serial_peekchar+0x30>)
	uint32_t tail = rx_tail;
    b7f2:	ldr	r2, [pc, #48]	; (b824 <usb_serial_peekchar+0x34>)
    b7f4:	ldrb	r2, [r2, #0]
	if (tail == rx_head) return -1;
    b7f6:	ldrb	r1, [r3, #0]
	uint32_t tail = rx_tail;
    b7f8:	uxtb	r3, r2
	if (tail == rx_head) return -1;
    b7fa:	cmp	r2, r1
    b7fc:	beq.n	b81a <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
    b7fe:	adds	r3, #1
	uint32_t i = rx_list[tail];
    b800:	ldr	r0, [pc, #36]	; (b828 <usb_serial_peekchar+0x38>)
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    b802:	ldr	r2, [pc, #40]	; (b82c <usb_serial_peekchar+0x3c>)
	if (++tail > RX_NUM) tail = 0;
    b804:	cmp	r3, #9
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    b806:	ldr	r1, [pc, #40]	; (b830 <usb_serial_peekchar+0x40>)
	if (++tail > RX_NUM) tail = 0;
    b808:	it	cs
    b80a:	movcs	r3, #0
	uint32_t i = rx_list[tail];
    b80c:	ldrb	r3, [r0, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    b80e:	ldrh.w	r1, [r1, r3, lsl #1]
    b812:	add.w	r3, r2, r3, lsl #9
    b816:	ldrb	r0, [r3, r1]
    b818:	bx	lr
	if (tail == rx_head) return -1;
    b81a:	mov.w	r0, #4294967295
}
    b81e:	bx	lr
    b820:	.word	0x20015d1e
    b824:	.word	0x20015d20
    b828:	.word	0x20015960
    b82c:	.word	0x20002720
    b830:	.word	0x20015944

0000b834 <usb_serial_available>:
	uint32_t n = rx_available;
    b834:	ldr	r3, [pc, #16]	; (b848 <usb_serial_available+0x14>)
{
    b836:	push	{r4, lr}
	uint32_t n = rx_available;
    b838:	ldr	r4, [r3, #0]
	if (n == 0) yield();
    b83a:	cbz	r4, b840 <usb_serial_available+0xc>
}
    b83c:	mov	r0, r4
    b83e:	pop	{r4, pc}
	if (n == 0) yield();
    b840:	bl	daa4 <yield>
}
    b844:	mov	r0, r4
    b846:	pop	{r4, pc}
    b848:	.word	0x20015920

0000b84c <usb_serial_flush_input>:
{
    b84c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	while (tail != rx_head) {
    b850:	ldr	r2, [pc, #160]	; (b8f4 <usb_serial_flush_input+0xa8>)
{
    b852:	sub	sp, #12
	uint32_t tail = rx_tail;
    b854:	ldr.w	fp, [pc, #184]	; b910 <usb_serial_flush_input+0xc4>
    b858:	ldrb.w	r3, [fp]
	while (tail != rx_head) {
    b85c:	ldrb	r2, [r2, #0]
    b85e:	cmp	r3, r2
    b860:	beq.n	b8e6 <usb_serial_flush_input+0x9a>
    b862:	uxtb	r5, r3
    b864:	ldr.w	r8, [pc, #172]	; b914 <usb_serial_flush_input+0xc8>
    b868:	ldr	r7, [pc, #140]	; (b8f8 <usb_serial_flush_input+0xac>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    b86a:	mov.w	r4, #3758153728	; 0xe000e000
    b86e:	mov.w	r6, #131072	; 0x20000
		if (++tail > RX_NUM) tail = 0;
    b872:	adds	r5, #1
    b874:	cmp	r5, #8
    b876:	bhi.n	b8ec <usb_serial_flush_input+0xa0>
		rx_tail = tail;
    b878:	uxtb.w	r9, r5
		uint32_t i = rx_list[tail];
    b87c:	ldr	r3, [pc, #124]	; (b8fc <usb_serial_flush_input+0xb0>)
		rx_available -= rx_count[i] - rx_index[i];
    b87e:	ldr	r1, [pc, #128]	; (b900 <usb_serial_flush_input+0xb4>)
		uint32_t i = rx_list[tail];
    b880:	ldrb	r3, [r3, r5]
		rx_available -= rx_count[i] - rx_index[i];
    b882:	ldr	r0, [pc, #128]	; (b904 <usb_serial_flush_input+0xb8>)
    b884:	ldrh.w	r1, [r1, r3, lsl #1]
    b888:	ldrh.w	r0, [r0, r3, lsl #1]
    b88c:	ldr.w	r2, [r8]
    b890:	subs	r1, r1, r0
    b892:	subs	r2, r2, r1
    b894:	str.w	r2, [r8]
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    b898:	ldr	r2, [pc, #108]	; (b908 <usb_serial_flush_input+0xbc>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    b89a:	str.w	r6, [r4, #396]	; 0x18c
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    b89e:	add.w	r1, r2, r3, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    b8a2:	ldr	r2, [pc, #104]	; (b90c <usb_serial_flush_input+0xc0>)
    b8a4:	add.w	sl, r2, r3, lsl #5
    b8a8:	ldrh	r2, [r7, #0]
    b8aa:	str	r1, [sp, #4]
    b8ac:	mov	r0, sl
    b8ae:	bl	cb64 <usb_prepare_transfer>
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    b8b2:	ldr	r1, [sp, #4]
	arm_dcache_delete(buffer, rx_packet_size);
    b8b4:	ldrh	r3, [r7, #0]
	uint32_t end_addr = (uint32_t)addr + size;
    b8b6:	add	r3, r1
	asm("dsb");
    b8b8:	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    b8bc:	str.w	r1, [r4, #3932]	; 0xf5c
		location += 32;
    b8c0:	adds	r1, #32
	} while (location < end_addr);
    b8c2:	cmp	r3, r1
    b8c4:	bhi.n	b8bc <usb_serial_flush_input+0x70>
	asm("dsb");
    b8c6:	dsb	sy
	asm("isb");
    b8ca:	isb	sy
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    b8ce:	movs	r0, #3
    b8d0:	mov	r1, sl
    b8d2:	bl	cc4c <usb_receive>
	while (tail != rx_head) {
    b8d6:	ldr	r3, [pc, #28]	; (b8f4 <usb_serial_flush_input+0xa8>)
	NVIC_ENABLE_IRQ(IRQ_USB1);
    b8d8:	str.w	r6, [r4, #268]	; 0x10c
		rx_tail = tail;
    b8dc:	strb.w	r9, [fp]
	while (tail != rx_head) {
    b8e0:	ldrb	r3, [r3, #0]
    b8e2:	cmp	r3, r5
    b8e4:	bne.n	b872 <usb_serial_flush_input+0x26>
}
    b8e6:	add	sp, #12
    b8e8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b8ec:	movs	r5, #0
		if (++tail > RX_NUM) tail = 0;
    b8ee:	mov	r9, r5
    b8f0:	b.n	b87c <usb_serial_flush_input+0x30>
    b8f2:	nop
    b8f4:	.word	0x20015d1e
    b8f8:	.word	0x20015d02
    b8fc:	.word	0x20015960
    b900:	.word	0x20015928
    b904:	.word	0x20015944
    b908:	.word	0x20002720
    b90c:	.word	0x20003720
    b910:	.word	0x20015d20
    b914:	.word	0x20015920

0000b918 <usb_serial_getchar>:
{
    b918:	push	{lr}
    b91a:	sub	sp, #12
	if (usb_serial_read(&c, 1)) return c;
    b91c:	movs	r1, #1
    b91e:	add.w	r0, sp, #7
    b922:	bl	b6c0 <usb_serial_read>
    b926:	cbz	r0, b932 <usb_serial_getchar+0x1a>
    b928:	ldrb.w	r0, [sp, #7]
}
    b92c:	add	sp, #12
    b92e:	ldr.w	pc, [sp], #4
	return -1;
    b932:	mov.w	r0, #4294967295
    b936:	b.n	b92c <usb_serial_getchar+0x14>

0000b938 <usb_serial_putchar>:
	if (!usb_configuration) return 0;
    b938:	ldr	r3, [pc, #36]	; (b960 <usb_serial_putchar+0x28>)
{
    b93a:	push	{lr}
    b93c:	sub	sp, #12
	if (!usb_configuration) return 0;
    b93e:	ldrb	r3, [r3, #0]
{
    b940:	strb.w	r0, [sp, #7]
	if (!usb_configuration) return 0;
    b944:	cbz	r3, b956 <usb_serial_putchar+0x1e>
    b946:	movs	r1, #1
    b948:	add.w	r0, sp, #7
    b94c:	bl	b260 <usb_serial_write.part.0>
}
    b950:	add	sp, #12
    b952:	ldr.w	pc, [sp], #4
    b956:	and.w	r0, r3, #255	; 0xff
    b95a:	add	sp, #12
    b95c:	ldr.w	pc, [sp], #4
    b960:	.word	0x20015d2e

0000b964 <usb_serial_write>:
	if (!usb_configuration) return 0;
    b964:	ldr	r3, [pc, #16]	; (b978 <usb_serial_write+0x14>)
    b966:	ldrb	r3, [r3, #0]
    b968:	and.w	r2, r3, #255	; 0xff
    b96c:	cbz	r3, b972 <usb_serial_write+0xe>
    b96e:	b.w	b260 <usb_serial_write.part.0>
}
    b972:	mov	r0, r2
    b974:	bx	lr
    b976:	nop
    b978:	.word	0x20015d2e

0000b97c <usb_serial_write_buffer_free>:
{
    b97c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (uint32_t i=0; i < TX_NUM; i++) {
    b980:	movs	r4, #0
	tx_noautoflush = 1;
    b982:	ldr.w	r8, [pc, #68]	; b9c8 <usb_serial_write_buffer_free+0x4c>
    b986:	movs	r3, #1
    b988:	ldr	r5, [pc, #52]	; (b9c0 <usb_serial_write_buffer_free+0x44>)
	uint32_t sum = 0;
    b98a:	mov	r7, r4
    b98c:	ldr	r6, [pc, #52]	; (b9c4 <usb_serial_write_buffer_free+0x48>)
	tx_noautoflush = 1;
    b98e:	strb.w	r3, [r8]
		if (i == tx_head) continue;
    b992:	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    b994:	mov	r0, r5
	for (uint32_t i=0; i < TX_NUM; i++) {
    b996:	adds	r5, #32
		if (i == tx_head) continue;
    b998:	cmp	r3, r4
	for (uint32_t i=0; i < TX_NUM; i++) {
    b99a:	add.w	r4, r4, #1
		if (i == tx_head) continue;
    b99e:	beq.n	b9ac <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    b9a0:	bl	cd04 <usb_transfer_status>
    b9a4:	lsls	r3, r0, #24
    b9a6:	it	pl
    b9a8:	addpl.w	r7, r7, #2048	; 0x800
	for (uint32_t i=0; i < TX_NUM; i++) {
    b9ac:	cmp	r4, #4
    b9ae:	bne.n	b992 <usb_serial_write_buffer_free+0x16>
	asm("dsb" ::: "memory");
    b9b0:	dsb	sy
	tx_noautoflush = 0;
    b9b4:	movs	r3, #0
}
    b9b6:	mov	r0, r7
	tx_noautoflush = 0;
    b9b8:	strb.w	r3, [r8]
}
    b9bc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b9c0:	.word	0x20003920
    b9c4:	.word	0x20015d25
    b9c8:	.word	0x20015d27

0000b9cc <usb_serial_flush_output>:
{
    b9cc:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!usb_configuration) return;
    b9d0:	ldr	r3, [pc, #116]	; (ba48 <usb_serial_flush_output+0x7c>)
    b9d2:	ldrb	r3, [r3, #0]
    b9d4:	cbz	r3, b9dc <usb_serial_flush_output+0x10>
	if (tx_available == 0) return;
    b9d6:	ldr	r5, [pc, #116]	; (ba4c <usb_serial_flush_output+0x80>)
    b9d8:	ldrh	r2, [r5, #0]
    b9da:	cbnz	r2, b9e0 <usb_serial_flush_output+0x14>
}
    b9dc:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	transfer_t *xfer = tx_transfer + tx_head;
    b9e0:	ldr	r6, [pc, #108]	; (ba50 <usb_serial_flush_output+0x84>)
	uint32_t txnum = TX_SIZE - tx_available;
    b9e2:	rsb	r9, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    b9e6:	ldr	r1, [pc, #108]	; (ba54 <usb_serial_flush_output+0x88>)
    b9e8:	ldrb	r3, [r6, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    b9ea:	mov	r2, r9
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    b9ec:	ldr	r4, [pc, #104]	; (ba58 <usb_serial_flush_output+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    b9ee:	add.w	r8, r1, r3, lsl #5
	tx_noautoflush = 1;
    b9f2:	ldr	r7, [pc, #104]	; (ba5c <usb_serial_flush_output+0x90>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    b9f4:	add.w	r4, r4, r3, lsl #11
	tx_noautoflush = 1;
    b9f8:	movs	r3, #1
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    b9fa:	mov	r0, r8
	tx_noautoflush = 1;
    b9fc:	strb	r3, [r7, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    b9fe:	mov	r1, r4
    ba00:	movs	r3, #0
    ba02:	bl	cb64 <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    ba06:	add.w	r2, r4, r9
	asm("dsb");
    ba0a:	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    ba0e:	mov.w	r3, #3758153728	; 0xe000e000
    ba12:	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    ba16:	adds	r4, #32
	} while (location < end_addr);
    ba18:	cmp	r2, r4
    ba1a:	bhi.n	ba12 <usb_serial_flush_output+0x46>
	asm("dsb");
    ba1c:	dsb	sy
	asm("isb");
    ba20:	isb	sy
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    ba24:	movs	r0, #3
    ba26:	mov	r1, r8
    ba28:	bl	cb94 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    ba2c:	ldrb	r3, [r6, #0]
    ba2e:	adds	r3, #1
    ba30:	uxtb	r3, r3
    ba32:	cmp	r3, #3
    ba34:	it	hi
    ba36:	movhi	r3, #0
    ba38:	strb	r3, [r6, #0]
	tx_available = 0;
    ba3a:	movs	r3, #0
    ba3c:	strh	r3, [r5, #0]
	asm("dsb" ::: "memory");
    ba3e:	dsb	sy
	tx_noautoflush = 0;
    ba42:	strb	r3, [r7, #0]
}
    ba44:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ba48:	.word	0x20015d2e
    ba4c:	.word	0x20015d06
    ba50:	.word	0x20015d25
    ba54:	.word	0x20003920
    ba58:	.word	0x20003a40
    ba5c:	.word	0x20015d27

0000ba60 <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    ba60:	ldr	r1, [pc, #648]	; (bcec <set_arm_clock+0x28c>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    ba62:	ldr	r3, [pc, #652]	; (bcf0 <set_arm_clock+0x290>)
	if (frequency > 528000000) {
    ba64:	cmp	r0, r1
{
    ba66:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t dcdc = DCDC_REG3;
    ba6a:	ldr	r4, [pc, #648]	; (bcf4 <set_arm_clock+0x294>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    ba6c:	ldr	r6, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    ba6e:	ldr	r2, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    ba70:	ldr.w	r8, [r4, #12]
	if (frequency > 528000000) {
    ba74:	bls.n	baae <set_arm_clock+0x4e>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    ba76:	ldr	r3, [pc, #640]	; (bcf8 <set_arm_clock+0x298>)
    ba78:	cmp	r0, r3
    ba7a:	bls.w	bc82 <set_arm_clock+0x222>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    ba7e:	subs	r3, r0, r3
    ba80:	ldr	r1, [pc, #632]	; (bcfc <set_arm_clock+0x29c>)
    ba82:	lsrs	r3, r3, #8
    ba84:	umull	r1, r3, r1, r3
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    ba88:	movw	r1, #1575	; 0x627
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    ba8c:	lsrs	r3, r3, #7
    ba8e:	add.w	r3, r3, r3, lsl #2
    ba92:	add.w	r3, r3, r3, lsl #2
    ba96:	addw	r3, r3, #1250	; 0x4e2
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    ba9a:	cmp	r3, r1
    ba9c:	it	cs
    ba9e:	movcs	r3, r1
    baa0:	sub.w	r7, r3, #800	; 0x320
    baa4:	ldr	r3, [pc, #600]	; (bd00 <set_arm_clock+0x2a0>)
    baa6:	umull	r3, r7, r3, r7
    baaa:	lsrs	r7, r7, #3
    baac:	b.n	bab8 <set_arm_clock+0x58>
	} else if (frequency <= 24000000) {
    baae:	ldr	r7, [pc, #596]	; (bd04 <set_arm_clock+0x2a4>)
    bab0:	cmp	r0, r7
    bab2:	ite	hi
    bab4:	movhi	r7, #14
    bab6:	movls	r7, #6
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    bab8:	ldr	r1, [pc, #564]	; (bcf0 <set_arm_clock+0x290>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    baba:	and.w	r9, r8, #31
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    babe:	ldr.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    bac2:	cmp	r9, r7
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    bac4:	orr.w	r3, r3, #192	; 0xc0
    bac8:	str.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    bacc:	bcs.n	bae8 <set_arm_clock+0x88>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    bace:	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    bad2:	sub.w	r1, r1, #507904	; 0x7c000
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    bad6:	orr.w	r8, r8, r7
		DCDC_REG3 = dcdc;
    bada:	str.w	r8, [r1, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    bade:	ldr	r3, [r1, #0]
    bae0:	cmp	r3, #0
    bae2:	bge.n	bade <set_arm_clock+0x7e>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    bae4:	and.w	r9, r8, #31
	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    bae8:	ands.w	r3, r6, #33554432	; 0x2000000
    baec:	bne.n	bb38 <set_arm_clock+0xd8>
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    baee:	ldr	r1, [pc, #536]	; (bd08 <set_arm_clock+0x2a8>)
    baf0:	ldr	r4, [r1, #16]
    baf2:	ldr	r1, [pc, #536]	; (bd0c <set_arm_clock+0x2ac>)
    baf4:	bics	r1, r4
    baf6:	beq.w	bcce <set_arm_clock+0x26e>
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    bafa:	eor.w	r1, r2, #4096	; 0x1000
    bafe:	mov	r4, r6
    bb00:	mov.w	r5, #4096	; 0x1000
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    bb04:	tst.w	r4, #939524096	; 0x38000000
    bb08:	beq.n	bb14 <set_arm_clock+0xb4>
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    bb0a:	bic.w	r6, r6, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    bb0e:	orrs	r6, r3
			CCM_CBCDR = cbcdr;
    bb10:	ldr	r3, [pc, #476]	; (bcf0 <set_arm_clock+0x290>)
    bb12:	str	r6, [r3, #20]
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    bb14:	tst.w	r1, #12288	; 0x3000
    bb18:	beq.n	bb2a <set_arm_clock+0xca>
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    bb1a:	bic.w	r2, r2, #12288	; 0x3000
			CCM_CBCMR = cbcmr;
    bb1e:	ldr	r1, [pc, #464]	; (bcf0 <set_arm_clock+0x290>)
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    bb20:	orrs	r2, r5
			CCM_CBCMR = cbcmr;
    bb22:	str	r2, [r1, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    bb24:	ldr	r3, [r1, #72]	; 0x48
    bb26:	lsls	r2, r3, #28
    bb28:	bmi.n	bb24 <set_arm_clock+0xc4>
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    bb2a:	orr.w	r6, r6, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    bb2e:	ldr	r2, [pc, #448]	; (bcf0 <set_arm_clock+0x290>)
    bb30:	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    bb32:	ldr	r3, [r2, #72]	; 0x48
    bb34:	lsls	r3, r3, #26
    bb36:	bmi.n	bb32 <set_arm_clock+0xd2>
	while (frequency * div_arm * div_ahb < 648000000) {
    bb38:	ldr	r4, [pc, #468]	; (bd10 <set_arm_clock+0x2b0>)
    bb3a:	cmp	r0, r4
    bb3c:	bhi.w	bcdc <set_arm_clock+0x27c>
	uint32_t div_ahb = 1;
    bb40:	mov.w	ip, #1
    bb44:	mov	r1, r0
	uint32_t div_arm = 1;
    bb46:	mov	r3, ip
	while (frequency * div_arm * div_ahb < 648000000) {
    bb48:	mla	r2, r3, r1, r1
			div_arm = div_arm + 1;
    bb4c:	add.w	lr, r3, #1
				div_ahb = div_ahb + 1;
    bb50:	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    bb54:	cmp	r2, r4
    bb56:	bhi.n	bb8a <set_arm_clock+0x12a>
		if (div_arm < 8) {
    bb58:	cmp.w	lr, #8
				div_arm = 1;
    bb5c:	mov.w	r3, #1
		if (div_arm < 8) {
    bb60:	bne.w	bc7e <set_arm_clock+0x21e>
			if (div_ahb < 5) {
    bb64:	cmp.w	ip, #4
    bb68:	bhi.w	bc8e <set_arm_clock+0x22e>
	while (frequency * div_arm * div_ahb < 648000000) {
    bb6c:	adds	r2, r1, r0
    bb6e:	cmp	r2, r4
    bb70:	bhi.w	bcbc <set_arm_clock+0x25c>
    bb74:	mul.w	r1, r5, r0
				div_ahb = div_ahb + 1;
    bb78:	mov	ip, r5
			div_arm = div_arm + 1;
    bb7a:	add.w	lr, r3, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    bb7e:	mla	r2, r3, r1, r1
				div_ahb = div_ahb + 1;
    bb82:	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    bb86:	cmp	r2, r4
    bb88:	bls.n	bb58 <set_arm_clock+0xf8>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    bb8a:	add.w	r1, ip, #4294967295
    bb8e:	lsls	r4, r1, #10
    bb90:	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    bb94:	ldr	r0, [pc, #380]	; (bd14 <set_arm_clock+0x2b4>)
    bb96:	add	r0, r2
	if (mult > 108) mult = 108;
    bb98:	ldr	r2, [pc, #380]	; (bd18 <set_arm_clock+0x2b8>)
    bb9a:	cmp	r0, r2
    bb9c:	bls.n	bc9e <set_arm_clock+0x23e>
    bb9e:	ldr.w	sl, [pc, #420]	; bd44 <set_arm_clock+0x2e4>
    bba2:	movs	r2, #108	; 0x6c
    bba4:	ldr	r0, [pc, #372]	; (bd1c <set_arm_clock+0x2bc>)
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    bba6:	ldr	r5, [pc, #352]	; (bd08 <set_arm_clock+0x2a8>)
	frequency = mult * 12000000 / div_arm / div_ahb;
    bba8:	udiv	r0, r0, lr
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    bbac:	ldr.w	lr, [r5]
	frequency = mult * 12000000 / div_arm / div_ahb;
    bbb0:	udiv	r0, r0, ip
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    bbb4:	ldr.w	ip, [pc, #400]	; bd48 <set_arm_clock+0x2e8>
    bbb8:	and.w	ip, lr, ip
    bbbc:	cmp	ip, sl
    bbbe:	beq.n	bbd4 <set_arm_clock+0x174>
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    bbc0:	orr.w	r2, r2, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    bbc4:	mov.w	ip, #4096	; 0x1000
    bbc8:	str.w	ip, [r5]
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    bbcc:	str	r2, [r5, #0]
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    bbce:	ldr	r2, [r5, #0]
    bbd0:	cmp	r2, #0
    bbd2:	bge.n	bbce <set_arm_clock+0x16e>
	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    bbd4:	ldr	r2, [pc, #280]	; (bcf0 <set_arm_clock+0x290>)
    bbd6:	ldr	r5, [r2, #16]
    bbd8:	and.w	r5, r5, #7
    bbdc:	cmp	r5, r3
    bbde:	beq.n	bbe8 <set_arm_clock+0x188>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    bbe0:	str	r3, [r2, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    bbe2:	ldr	r3, [r2, #72]	; 0x48
    bbe4:	lsls	r5, r3, #15
    bbe6:	bmi.n	bbe2 <set_arm_clock+0x182>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    bbe8:	tst.w	r1, #7168	; 0x1c00
    bbec:	beq.n	bc02 <set_arm_clock+0x1a2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    bbee:	bic.w	r6, r6, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    bbf2:	and.w	r4, r4, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
    bbf6:	ldr	r2, [pc, #248]	; (bcf0 <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    bbf8:	orrs	r6, r4
		CCM_CBCDR = cbcdr;
    bbfa:	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    bbfc:	ldr	r3, [r2, #72]	; 0x48
    bbfe:	lsls	r1, r3, #30
    bc00:	bmi.n	bbfc <set_arm_clock+0x19c>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    bc02:	ldr	r1, [pc, #284]	; (bd20 <set_arm_clock+0x2c0>)
	if (div_ipg > 4) div_ipg = 4;
    bc04:	ldr	r2, [pc, #284]	; (bd24 <set_arm_clock+0x2c4>)
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    bc06:	add	r1, r0
	if (div_ipg > 4) div_ipg = 4;
    bc08:	cmp	r1, r2
    bc0a:	bhi.n	bc86 <set_arm_clock+0x226>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    bc0c:	ldr	r3, [pc, #280]	; (bd28 <set_arm_clock+0x2c8>)
    bc0e:	lsrs	r1, r1, #7
    bc10:	umull	r3, r1, r3, r1
    bc14:	lsrs	r1, r1, #12
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    bc16:	subs	r3, r1, #1
    bc18:	lsls	r3, r3, #8
    bc1a:	eor.w	r2, r6, r3
    bc1e:	tst.w	r2, #768	; 0x300
    bc22:	beq.n	bc32 <set_arm_clock+0x1d2>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    bc24:	bic.w	r6, r6, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    bc28:	and.w	r3, r3, #768	; 0x300
		CCM_CBCDR = cbcdr;
    bc2c:	ldr	r2, [pc, #192]	; (bcf0 <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    bc2e:	orrs	r3, r6
		CCM_CBCDR = cbcdr;
    bc30:	str	r3, [r2, #20]
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    bc32:	ldr	r2, [pc, #188]	; (bcf0 <set_arm_clock+0x290>)
    bc34:	ldr	r3, [r2, #20]
    bc36:	bic.w	r3, r3, #33554432	; 0x2000000
    bc3a:	str	r3, [r2, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    bc3c:	ldr	r3, [r2, #72]	; 0x48
    bc3e:	lsls	r3, r3, #26
    bc40:	bmi.n	bc3c <set_arm_clock+0x1dc>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    bc42:	ldr	r3, [pc, #232]	; (bd2c <set_arm_clock+0x2cc>)
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    bc44:	cmp	r7, r9
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    bc46:	umull	r2, r3, r3, r0
    bc4a:	mov.w	r2, #4294967295
    bc4e:	mov.w	r3, r3, lsr #18
	F_BUS_ACTUAL = frequency / div_ipg;
    bc52:	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    bc56:	udiv	r3, r2, r3
	F_CPU_ACTUAL = frequency;
    bc5a:	ldr	r2, [pc, #212]	; (bd30 <set_arm_clock+0x2d0>)
    bc5c:	str	r0, [r2, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
    bc5e:	ldr	r2, [pc, #212]	; (bd34 <set_arm_clock+0x2d4>)
    bc60:	str	r1, [r2, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    bc62:	ldr	r2, [pc, #212]	; (bd38 <set_arm_clock+0x2d8>)
    bc64:	str	r3, [r2, #0]
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    bc66:	bcs.n	bc7a <set_arm_clock+0x21a>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    bc68:	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    bc6c:	ldr	r2, [pc, #132]	; (bcf4 <set_arm_clock+0x294>)
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    bc6e:	orr.w	r7, r8, r7
		DCDC_REG3 = dcdc;
    bc72:	str	r7, [r2, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    bc74:	ldr	r3, [r2, #0]
    bc76:	cmp	r3, #0
    bc78:	bge.n	bc74 <set_arm_clock+0x214>
	}

	return frequency;
}
    bc7a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    bc7e:	mov	r3, lr
    bc80:	b.n	bb48 <set_arm_clock+0xe8>
    bc82:	movs	r7, #18
    bc84:	b.n	bab8 <set_arm_clock+0x58>
    bc86:	mov.w	r3, #768	; 0x300
	if (div_ipg > 4) div_ipg = 4;
    bc8a:	movs	r1, #4
    bc8c:	b.n	bc1a <set_arm_clock+0x1ba>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    bc8e:	add.w	r1, ip, #4294967295
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    bc92:	ldr	r0, [pc, #128]	; (bd14 <set_arm_clock+0x2b4>)
    bc94:	movs	r3, #7
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    bc96:	lsls	r4, r1, #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    bc98:	add	r0, r2
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    bc9a:	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    bc9e:	ldr	r2, [pc, #156]	; (bd3c <set_arm_clock+0x2dc>)
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    bca0:	ldr.w	sl, [pc, #168]	; bd4c <set_arm_clock+0x2ec>
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    bca4:	umull	r2, r0, r2, r0
    bca8:	lsrs	r2, r0, #20
	frequency = mult * 12000000 / div_arm / div_ahb;
    bcaa:	ldr	r0, [pc, #148]	; (bd40 <set_arm_clock+0x2e0>)
    bcac:	cmp	r2, #54	; 0x36
    bcae:	it	cc
    bcb0:	movcc	r2, #54	; 0x36
    bcb2:	mul.w	r0, r2, r0
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    bcb6:	orr.w	sl, r2, sl
    bcba:	b.n	bba6 <set_arm_clock+0x146>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    bcbc:	mov.w	r4, ip, lsl #10
    bcc0:	movs	r3, #0
    bcc2:	eor.w	r1, r6, ip, lsl #10
				div_arm = 1;
    bcc6:	mov.w	lr, #1
				div_ahb = div_ahb + 1;
    bcca:	mov	ip, r5
    bccc:	b.n	bb94 <set_arm_clock+0x134>
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    bcce:	mov	r5, r3
    bcd0:	eor.w	r4, r6, #402653184	; 0x18000000
    bcd4:	mov	r1, r2
    bcd6:	mov.w	r3, #402653184	; 0x18000000
    bcda:	b.n	bb04 <set_arm_clock+0xa4>
	while (frequency * div_arm * div_ahb < 648000000) {
    bcdc:	movs	r4, #0
	uint32_t div_ahb = 1;
    bcde:	mov.w	ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    bce2:	mov	r2, r0
    bce4:	mov	r1, r6
    bce6:	mov	r3, r4
	uint32_t div_arm = 1;
    bce8:	mov	lr, ip
    bcea:	b.n	bb94 <set_arm_clock+0x134>
    bcec:	.word	0x1f78a400
    bcf0:	.word	0x400fc000
    bcf4:	.word	0x40080000
    bcf8:	.word	0x23c34600
    bcfc:	.word	0x004cb223
    bd00:	.word	0x51eb851f
    bd04:	.word	0x016e3600
    bd08:	.word	0x400d8000
    bd0c:	.word	0x80003040
    bd10:	.word	0x269fb1ff
    bd14:	.word	0x005b8d80
    bd18:	.word	0x4df67eff
    bd1c:	.word	0x4d3f6400
    bd20:	.word	0x08f0d17f
    bd24:	.word	0x2cb4177f
    bd28:	.word	0x00e5109f
    bd2c:	.word	0x431bde83
    bd30:	.word	0x20001c10
    bd34:	.word	0x20001c0c
    bd38:	.word	0x20015984
    bd3c:	.word	0x165e9f81
    bd40:	.word	0x00b71b00
    bd44:	.word	0x8000206c
    bd48:	.word	0x8001307f
    bd4c:	.word	0x80002000

0000bd50 <usb_isr>:
{
    bd50:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t status = USB1_USBSTS;
    bd54:	ldr	r4, [pc, #600]	; (bfb0 <usb_isr+0x260>)
{
    bd56:	sub	sp, #28
	uint32_t status = USB1_USBSTS;
    bd58:	ldr.w	r6, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    bd5c:	lsls	r1, r6, #31
	USB1_USBSTS = status;
    bd5e:	str.w	r6, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    bd62:	bpl.w	bf0e <usb_isr+0x1be>
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    bd66:	ldr.w	r3, [r4, #428]	; 0x1ac
		while (setupstatus) {
    bd6a:	cmp	r3, #0
    bd6c:	beq.n	be38 <usb_isr+0xe8>
			}
		}
		break;
	  case 0x81A2: // GET_CUR (wValue=0, wIndex=interface, wLength=len)
		if (setup.wLength >= 3) {
			endpoint0_buffer[0] = 44100 & 255;
    bd6e:	ldr.w	r8, [pc, #612]	; bfd4 <usb_isr+0x284>
    bd72:	ldr	r5, [pc, #576]	; (bfb4 <usb_isr+0x264>)
    bd74:	ldr	r7, [pc, #576]	; (bfb8 <usb_isr+0x268>)
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    bd76:	add.w	r9, r8, #4096	; 0x1000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    bd7a:	ldr.w	fp, [pc, #604]	; bfd8 <usb_isr+0x288>
		endpoint0_transfer_data.pointer2 = addr + 8192;
    bd7e:	add.w	sl, r8, #8192	; 0x2000
			USB1_ENDPTSETUPSTAT = setupstatus;
    bd82:	str.w	r3, [r4, #428]	; 0x1ac
				s.word1 = endpoint_queue_head[0].setup0;
    bd86:	ldrd	r2, r0, [r5, #40]	; 0x28
				USB1_USBCMD |= USB_USBCMD_SUTW;
    bd8a:	ldr.w	r3, [r4, #320]	; 0x140
    bd8e:	orr.w	r3, r3, #8192	; 0x2000
    bd92:	str.w	r3, [r4, #320]	; 0x140
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    bd96:	ldr.w	r3, [r4, #320]	; 0x140
    bd9a:	lsls	r3, r3, #18
    bd9c:	bpl.n	bd8a <usb_isr+0x3a>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    bd9e:	ldr.w	r3, [r4, #320]	; 0x140
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    bda2:	mov.w	r1, #65537	; 0x10001
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    bda6:	bic.w	r3, r3, #8192	; 0x2000
    bdaa:	str.w	r3, [r4, #320]	; 0x140
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    bdae:	str.w	r1, [r4, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    bdb2:	ldr.w	r3, [r4, #436]	; 0x1b4
    bdb6:	ands.w	r3, r3, #65537	; 0x10001
    bdba:	bne.n	bdb2 <usb_isr+0x62>
			endpoint0_notify_mask = 0;
    bdbc:	uxth	r1, r2
    bdbe:	str	r3, [r7, #0]
	switch (setup.wRequestAndType) {
    bdc0:	cmp.w	r1, #2304	; 0x900
	setup.bothwords = setupdata;
    bdc4:	strd	r2, r0, [sp, #16]
	switch (setup.wRequestAndType) {
    bdc8:	beq.w	c42a <usb_isr+0x6da>
    bdcc:	bhi.w	c054 <usb_isr+0x304>
    bdd0:	movw	ip, #770	; 0x302
    bdd4:	cmp	r1, ip
    bdd6:	beq.w	c5c2 <usb_isr+0x872>
    bdda:	bls.w	c0fe <usb_isr+0x3ae>
    bdde:	movw	ip, #1665	; 0x681
    bde2:	cmp	r1, ip
    bde4:	bhi.w	bfdc <usb_isr+0x28c>
    bde8:	cmp.w	r1, #1664	; 0x680
    bdec:	bcs.w	c492 <usb_isr+0x742>
    bdf0:	cmp.w	r1, #1280	; 0x500
    bdf4:	bne.w	bfa0 <usb_isr+0x250>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    bdf8:	ldr	r1, [pc, #448]	; (bfbc <usb_isr+0x26c>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    bdfa:	str	r3, [r5, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    bdfc:	str	r3, [r1, #8]
	endpoint0_transfer_ack.next = 1;
    bdfe:	movs	r3, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    be00:	str	r1, [r5, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    be02:	str	r3, [r1, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    be04:	movs	r3, #128	; 0x80
    be06:	str	r3, [r1, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    be08:	mov.w	r3, #65537	; 0x10001
    be0c:	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    be10:	ldr.w	r3, [r4, #432]	; 0x1b0
    be14:	orr.w	r3, r3, #65536	; 0x10000
    be18:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    be1c:	ldr.w	r3, [r4, #432]	; 0x1b0
    be20:	cmp	r3, #0
    be22:	bne.n	be1c <usb_isr+0xcc>
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    be24:	lsrs	r3, r2, #16
    be26:	lsls	r3, r3, #25
    be28:	orr.w	r3, r3, #16777216	; 0x1000000
    be2c:	str.w	r3, [r4, #340]	; 0x154
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    be30:	ldr.w	r3, [r4, #428]	; 0x1ac
		while (setupstatus) {
    be34:	cmp	r3, #0
    be36:	bne.n	bd82 <usb_isr+0x32>
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    be38:	ldr	r3, [pc, #372]	; (bfb0 <usb_isr+0x260>)
    be3a:	ldr.w	r7, [r3, #444]	; 0x1bc
		if (completestatus) {
    be3e:	cmp	r7, #0
    be40:	beq.n	bf0e <usb_isr+0x1be>
			if (completestatus & endpoint0_notify_mask) {
    be42:	ldr	r2, [pc, #372]	; (bfb8 <usb_isr+0x268>)
			USB1_ENDPTCOMPLETE = completestatus;
    be44:	str.w	r7, [r3, #444]	; 0x1bc
			if (completestatus & endpoint0_notify_mask) {
    be48:	ldr	r1, [r2, #0]
    be4a:	tst	r7, r1
    be4c:	bne.w	c77e <usb_isr+0xa2e>
			completestatus &= endpointN_notify_mask;
    be50:	ldr	r3, [pc, #364]	; (bfc0 <usb_isr+0x270>)
    be52:	ldr	r3, [r3, #0]
			if (completestatus) {
    be54:	ands	r3, r7
    be56:	str	r3, [sp, #0]
    be58:	beq.n	bf0e <usb_isr+0x1be>
				while (tx) {
    be5a:	movs.w	r9, r3, lsr #16
    be5e:	beq.n	beb6 <usb_isr+0x166>
    be60:	ldr	r5, [pc, #336]	; (bfb4 <usb_isr+0x264>)
					tx &= ~(1<<p);
    be62:	mov.w	sl, #1
    be66:	mov	r8, r6
					int p=__builtin_ctz(tx);
    be68:	rbit	r7, r9
    be6c:	clz	r7, r7
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    be70:	add.w	fp, r5, r7, lsl #7
};*/

static void run_callbacks(endpoint_t *ep)
{
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    be74:	ldr.w	r6, [fp, #112]	; 0x70
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    be78:	add.w	fp, fp, #64	; 0x40
	if (first == NULL) return;
    be7c:	cbz	r6, beaa <usb_isr+0x15a>
    be7e:	mov	r2, r6

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
    be80:	movs	r4, #0
    be82:	b.n	be8e <usb_isr+0x13e>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
    be84:	ldr	r2, [r2, #0]
		count++;
    be86:	adds	r4, #1
		if ((uint32_t)t == 1) {
    be88:	cmp	r2, #1
    be8a:	beq.w	c7b8 <usb_isr+0xa68>
		if (t->status & (1<<7)) {
    be8e:	ldr	r3, [r2, #4]
    be90:	ands.w	r3, r3, #128	; 0x80
    be94:	beq.n	be84 <usb_isr+0x134>
			ep->first_transfer = t;
    be96:	str.w	r2, [fp, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    be9a:	cbz	r4, beaa <usb_isr+0x15a>
		transfer_t *next = (transfer_t *)first->next;
    be9c:	mov	r0, r6
		ep->callback_function(first);
    be9e:	ldr.w	r3, [fp, #56]	; 0x38
		transfer_t *next = (transfer_t *)first->next;
    bea2:	ldr	r6, [r6, #0]
		ep->callback_function(first);
    bea4:	blx	r3
	while (count) {
    bea6:	subs	r4, #1
    bea8:	bne.n	be9c <usb_isr+0x14c>
					tx &= ~(1<<p);
    beaa:	lsl.w	r7, sl, r7
				while (tx) {
    beae:	bics.w	r9, r9, r7
    beb2:	bne.n	be68 <usb_isr+0x118>
    beb4:	mov	r6, r8
				uint32_t rx = completestatus & 0xffff;
    beb6:	ldrh.w	r7, [sp]
				while(rx) {
    beba:	cbz	r7, bf0e <usb_isr+0x1be>
    bebc:	ldr	r5, [pc, #244]	; (bfb4 <usb_isr+0x264>)
					rx &= ~(1<<p);
    bebe:	mov.w	r9, #1
    bec2:	mov	sl, r6
					int p=__builtin_ctz(rx);
    bec4:	rbit	r8, r7
    bec8:	clz	r8, r8
					run_callbacks(endpoint_queue_head + p * 2);
    becc:	add.w	fp, r5, r8, lsl #7
	transfer_t *first = ep->first_transfer;
    bed0:	ldr.w	r6, [fp, #48]	; 0x30
	if (first == NULL) return;
    bed4:	cbz	r6, bf02 <usb_isr+0x1b2>
    bed6:	mov	r2, r6
	uint32_t count = 0;
    bed8:	movs	r4, #0
    beda:	b.n	bee6 <usb_isr+0x196>
		t = (transfer_t *)t->next;
    bedc:	ldr	r2, [r2, #0]
		count++;
    bede:	adds	r4, #1
		if ((uint32_t)t == 1) {
    bee0:	cmp	r2, #1
    bee2:	beq.w	c7c0 <usb_isr+0xa70>
		if (t->status & (1<<7)) {
    bee6:	ldr	r3, [r2, #4]
    bee8:	ands.w	r3, r3, #128	; 0x80
    beec:	beq.n	bedc <usb_isr+0x18c>
			ep->first_transfer = t;
    beee:	str.w	r2, [fp, #48]	; 0x30
	while (count) {
    bef2:	cbz	r4, bf02 <usb_isr+0x1b2>
		transfer_t *next = (transfer_t *)first->next;
    bef4:	mov	r0, r6
		ep->callback_function(first);
    bef6:	ldr.w	r3, [fp, #56]	; 0x38
		transfer_t *next = (transfer_t *)first->next;
    befa:	ldr	r6, [r6, #0]
		ep->callback_function(first);
    befc:	blx	r3
	while (count) {
    befe:	subs	r4, #1
    bf00:	bne.n	bef4 <usb_isr+0x1a4>
					rx &= ~(1<<p);
    bf02:	lsl.w	r8, r9, r8
				while(rx) {
    bf06:	bics.w	r7, r7, r8
    bf0a:	bne.n	bec4 <usb_isr+0x174>
    bf0c:	mov	r6, sl
	if (status & USB_USBSTS_URI) { // page 3164
    bf0e:	lsls	r2, r6, #25
    bf10:	bpl.n	bf40 <usb_isr+0x1f0>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    bf12:	ldr	r3, [pc, #156]	; (bfb0 <usb_isr+0x260>)
    bf14:	ldr.w	r2, [r3, #428]	; 0x1ac
    bf18:	str.w	r2, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    bf1c:	ldr.w	r2, [r3, #444]	; 0x1bc
    bf20:	str.w	r2, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    bf24:	ldr.w	r4, [r3, #432]	; 0x1b0
    bf28:	cmp	r4, #0
    bf2a:	bne.n	bf24 <usb_isr+0x1d4>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    bf2c:	mov.w	r2, #4294967295
    bf30:	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    bf34:	ldr.w	r3, [r3, #388]	; 0x184
		usb_serial_reset();
    bf38:	bl	b580 <usb_serial_reset>
		endpointN_notify_mask = 0;
    bf3c:	ldr	r3, [pc, #128]	; (bfc0 <usb_isr+0x270>)
    bf3e:	str	r4, [r3, #0]
	if (status & USB_USBSTS_TI0) {
    bf40:	lsls	r5, r6, #7
    bf42:	bpl.n	bf4c <usb_isr+0x1fc>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    bf44:	ldr	r3, [pc, #124]	; (bfc4 <usb_isr+0x274>)
    bf46:	ldr	r3, [r3, #0]
    bf48:	cbz	r3, bf4c <usb_isr+0x1fc>
    bf4a:	blx	r3
	if (status & USB_USBSTS_TI1) {
    bf4c:	lsls	r4, r6, #6
    bf4e:	bpl.n	bf58 <usb_isr+0x208>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    bf50:	ldr	r3, [pc, #116]	; (bfc8 <usb_isr+0x278>)
    bf52:	ldr	r3, [r3, #0]
    bf54:	cbz	r3, bf58 <usb_isr+0x208>
    bf56:	blx	r3
	if (status & USB_USBSTS_PCI) {
    bf58:	lsls	r0, r6, #29
    bf5a:	bpl.n	bf70 <usb_isr+0x220>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    bf5c:	ldr	r3, [pc, #80]	; (bfb0 <usb_isr+0x260>)
    bf5e:	ldr.w	r3, [r3, #388]	; 0x184
    bf62:	ands.w	r3, r3, #512	; 0x200
    bf66:	beq.w	c418 <usb_isr+0x6c8>
			usb_high_speed = 1;
    bf6a:	ldr	r3, [pc, #96]	; (bfcc <usb_isr+0x27c>)
    bf6c:	movs	r2, #1
    bf6e:	strb	r2, [r3, #0]
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    bf70:	ldr	r3, [pc, #60]	; (bfb0 <usb_isr+0x260>)
    bf72:	ldr.w	r2, [r3, #328]	; 0x148
    bf76:	lsls	r1, r2, #24
    bf78:	bpl.n	bf9a <usb_isr+0x24a>
    bf7a:	lsls	r2, r6, #24
    bf7c:	bpl.n	bf9a <usb_isr+0x24a>
		if (usb_reboot_timer) {
    bf7e:	ldr	r1, [pc, #80]	; (bfd0 <usb_isr+0x280>)
    bf80:	ldrb	r2, [r1, #0]
    bf82:	cbz	r2, bf90 <usb_isr+0x240>
			if (--usb_reboot_timer == 0) {
    bf84:	subs	r2, #1
    bf86:	uxtb	r2, r2
    bf88:	strb	r2, [r1, #0]
    bf8a:	cmp	r2, #0
    bf8c:	beq.w	c94e <usb_isr+0xbfe>
}
    bf90:	add	sp, #28
    bf92:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		usb_midi_flush_output();
    bf96:	b.w	d8a0 <usb_midi_flush_output>
}
    bf9a:	add	sp, #28
    bf9c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (setup.wRequestAndType) {
    bfa0:	bls.w	c164 <usb_isr+0x414>
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    bfa4:	mov.w	r3, #65537	; 0x10001
    bfa8:	str.w	r3, [r4, #448]	; 0x1c0
    bfac:	b.n	be30 <usb_isr+0xe0>
    bfae:	nop
    bfb0:	.word	0x402e0000
    bfb4:	.word	0x20000000
    bfb8:	.word	0x2001582c
    bfbc:	.word	0x200026e0
    bfc0:	.word	0x20015830
    bfc4:	.word	0x20015ce8
    bfc8:	.word	0x20015cec
    bfcc:	.word	0x20015d2f
    bfd0:	.word	0x20015d30
    bfd4:	.word	0x20015824
    bfd8:	.word	0x402e01c0
	switch (setup.wRequestAndType) {
    bfdc:	cmp.w	r1, #2176	; 0x880
    bfe0:	bne.n	bfa4 <usb_isr+0x254>
		endpoint_queue_head[1].status = 0;
    bfe2:	str	r3, [r5, #76]	; 0x4c
		reply_buffer[0] = usb_configuration;
    bfe4:	ldr	r3, [pc, #592]	; (c238 <usb_isr+0x4e8>)
    bfe6:	ldr	r2, [pc, #596]	; (c23c <usb_isr+0x4ec>)
    bfe8:	ldrb	r1, [r3, #0]
		endpoint0_transfer_data.next = 1;
    bfea:	ldr	r3, [pc, #596]	; (c240 <usb_isr+0x4f0>)
		reply_buffer[0] = usb_configuration;
    bfec:	strb	r1, [r2, #0]
		endpoint0_transfer_data.next = 1;
    bfee:	movs	r1, #1
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    bff0:	str	r2, [r3, #8]
		endpoint0_transfer_data.next = 1;
    bff2:	str	r1, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    bff4:	ldr	r1, [pc, #588]	; (c244 <usb_isr+0x4f4>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    bff6:	str	r3, [r5, #72]	; 0x48
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    bff8:	str	r1, [r3, #4]
		USB1_ENDPTPRIME |= (1<<16);
    bffa:	ldr.w	r1, [r4, #432]	; 0x1b0
    bffe:	orr.w	r1, r1, #65536	; 0x10000
    c002:	str.w	r1, [r4, #432]	; 0x1b0
		endpoint0_transfer_data.pointer1 = addr + 4096;
    c006:	add.w	r1, r2, #4096	; 0x1000
    c00a:	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    c00c:	add.w	r1, r2, #8192	; 0x2000
    c010:	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    c012:	add.w	r1, r2, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    c016:	add.w	r2, r2, #16384	; 0x4000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    c01a:	str	r1, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    c01c:	str	r2, [r3, #24]
		while (USB1_ENDPTPRIME) ;
    c01e:	ldr.w	r3, [r4, #432]	; 0x1b0
    c022:	cmp	r3, #0
    c024:	bne.n	c01e <usb_isr+0x2ce>
	endpoint0_transfer_ack.next = 1;
    c026:	ldr	r2, [pc, #544]	; (c248 <usb_isr+0x4f8>)
	endpoint_queue_head[0].status = 0;
    c028:	str	r3, [r5, #12]
	endpoint0_transfer_ack.pointer0 = 0;
    c02a:	str	r3, [r2, #8]
	endpoint0_transfer_ack.next = 1;
    c02c:	movs	r3, #1
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
    c02e:	str	r2, [r5, #8]
	endpoint0_transfer_ack.next = 1;
    c030:	str	r3, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    c032:	movs	r3, #128	; 0x80
    c034:	str	r3, [r2, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    c036:	mov.w	r3, #65537	; 0x10001
    c03a:	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    c03e:	ldr.w	r3, [r4, #432]	; 0x1b0
    c042:	orr.w	r3, r3, #1
    c046:	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    c04a:	ldr.w	r3, [r4, #432]	; 0x1b0
    c04e:	cmp	r3, #0
    c050:	bne.n	c04a <usb_isr+0x2fa>
    c052:	b.n	be30 <usb_isr+0xe0>
	switch (setup.wRequestAndType) {
    c054:	movw	ip, #8737	; 0x2221
    c058:	cmp	r1, ip
    c05a:	beq.w	c764 <usb_isr+0xa14>
    c05e:	bls.w	c25c <usb_isr+0x50c>
    c062:	movw	r2, #33186	; 0x81a2
    c066:	cmp	r1, r2
    c068:	beq.w	c6ea <usb_isr+0x99a>
    c06c:	bls.w	c1fe <usb_isr+0x4ae>
    c070:	movw	r3, #33953	; 0x84a1
    c074:	cmp	r1, r3
    c076:	bne.w	c37a <usb_isr+0x62a>
		if (setup.wLength <= sizeof(endpoint0_buffer)) {
    c07a:	cmp.w	r0, #589824	; 0x90000
    c07e:	bcs.n	bfa4 <usb_isr+0x254>
			if (usb_audio_get_feature(&setup, endpoint0_buffer, &len)) {
    c080:	add	r2, sp, #12
    c082:	ldr	r1, [pc, #456]	; (c24c <usb_isr+0x4fc>)
    c084:	add	r0, sp, #16
    c086:	bl	eab4 <usb_audio_get_feature>
    c08a:	cmp	r0, #0
    c08c:	beq.n	bfa4 <usb_isr+0x254>
				endpoint0_transmit(endpoint0_buffer, len, 0);
    c08e:	ldr	r3, [sp, #12]
	if (len > 0) {
    c090:	cbz	r3, c0cc <usb_isr+0x37c>
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    c092:	lsls	r3, r3, #16
    c094:	orr.w	r2, r3, #128	; 0x80
		endpoint0_transfer_data.next = 1;
    c098:	ldr	r3, [pc, #420]	; (c240 <usb_isr+0x4f0>)
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    c09a:	str	r2, [r3, #4]
		endpoint0_transfer_data.next = 1;
    c09c:	movs	r2, #1
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    c09e:	str	r3, [r5, #72]	; 0x48
		endpoint0_transfer_data.next = 1;
    c0a0:	str	r2, [r3, #0]
		endpoint_queue_head[1].status = 0;
    c0a2:	movs	r2, #0
		endpoint0_transfer_data.pointer2 = addr + 8192;
    c0a4:	str.w	sl, [r3, #16]
		endpoint_queue_head[1].status = 0;
    c0a8:	str	r2, [r5, #76]	; 0x4c
		endpoint0_transfer_data.pointer3 = addr + 12288;
    c0aa:	ldr	r2, [pc, #420]	; (c250 <usb_isr+0x500>)
    c0ac:	str	r2, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    c0ae:	add.w	r2, r2, #4096	; 0x1000
		endpoint0_transfer_data.pointer1 = addr + 4096;
    c0b2:	strd	r8, r9, [r3, #8]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    c0b6:	str	r2, [r3, #24]
		USB1_ENDPTPRIME |= (1<<16);
    c0b8:	ldr.w	r3, [r4, #432]	; 0x1b0
    c0bc:	orr.w	r3, r3, #65536	; 0x10000
    c0c0:	str.w	r3, [r4, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    c0c4:	ldr.w	r3, [r4, #432]	; 0x1b0
    c0c8:	cmp	r3, #0
    c0ca:	bne.n	c0c4 <usb_isr+0x374>
	endpoint0_transfer_ack.next = 1;
    c0cc:	ldr	r3, [pc, #376]	; (c248 <usb_isr+0x4f8>)
    c0ce:	movs	r1, #1
	endpoint0_transfer_ack.pointer0 = 0;
    c0d0:	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    c0d2:	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    c0d4:	movs	r1, #128	; 0x80
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
    c0d6:	str	r3, [r5, #8]
	endpoint0_transfer_ack.pointer0 = 0;
    c0d8:	str	r2, [r3, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    c0da:	str	r1, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    c0dc:	mov.w	r3, #65537	; 0x10001
	endpoint_queue_head[0].status = 0;
    c0e0:	str	r2, [r5, #12]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    c0e2:	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    c0e6:	ldr.w	r3, [r4, #432]	; 0x1b0
    c0ea:	orr.w	r3, r3, #1
    c0ee:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    c0f2:	str	r2, [r7, #0]
	while (USB1_ENDPTPRIME) ;
    c0f4:	ldr.w	r3, [r4, #432]	; 0x1b0
    c0f8:	cmp	r3, #0
    c0fa:	bne.n	c0f4 <usb_isr+0x3a4>
    c0fc:	b.n	be30 <usb_isr+0xe0>
	switch (setup.wRequestAndType) {
    c0fe:	cmp	r1, #130	; 0x82
    c100:	beq.w	c65c <usb_isr+0x90c>
    c104:	bls.w	c3a4 <usb_isr+0x654>
    c108:	cmp.w	r1, #258	; 0x102
    c10c:	bne.w	c38a <usb_isr+0x63a>
		if (endpoint > 7) break;
    c110:	tst.w	r0, #120	; 0x78
    c114:	uxth	r3, r0
    c116:	bne.w	bfa4 <usb_isr+0x254>
		endpoint = setup.wIndex & 0x7F;
    c11a:	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    c11e:	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    c122:	ldr.w	r3, [fp, r2, lsl #2]
    c126:	ite	ne
    c128:	bicne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    c12c:	biceq.w	r3, r3, #1
    c130:	str.w	r3, [fp, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    c134:	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    c136:	ldr	r3, [pc, #272]	; (c248 <usb_isr+0x4f8>)
	endpoint_queue_head[1].status = 0;
    c138:	str	r2, [r5, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    c13a:	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    c13c:	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    c13e:	str	r3, [r5, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    c140:	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    c142:	movs	r2, #128	; 0x80
    c144:	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    c146:	mov.w	r3, #65537	; 0x10001
    c14a:	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    c14e:	ldr.w	r3, [r4, #432]	; 0x1b0
    c152:	orr.w	r3, r3, #65536	; 0x10000
    c156:	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    c15a:	ldr.w	r3, [r4, #432]	; 0x1b0
    c15e:	cmp	r3, #0
    c160:	bne.n	c15a <usb_isr+0x40a>
    c162:	b.n	be30 <usb_isr+0xe0>
	switch (setup.wRequestAndType) {
    c164:	movw	r3, #801	; 0x321
    c168:	cmp	r1, r3
    c16a:	beq.n	c176 <usb_isr+0x426>
    c16c:	movw	r3, #1057	; 0x421
    c170:	cmp	r1, r3
    c172:	bne.w	bfa4 <usb_isr+0x254>
		if (setup.wLength <= sizeof(endpoint0_buffer)) {
    c176:	cmp.w	r0, #589824	; 0x90000
    c17a:	mov.w	r3, r0, lsr #16
    c17e:	bcs.w	bfa4 <usb_isr+0x254>
			endpoint0_setupdata.bothwords = setupdata;
    c182:	ldr	r1, [pc, #208]	; (c254 <usb_isr+0x504>)
    c184:	strd	r2, r0, [r1]
	if (len > 0) {
    c188:	cbz	r3, c1c6 <usb_isr+0x476>
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    c18a:	lsls	r3, r3, #16
		endpoint0_transfer_data.next = 1;
    c18c:	ldr	r2, [pc, #176]	; (c240 <usb_isr+0x4f0>)
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    c18e:	orr.w	r3, r3, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    c192:	str	r2, [r5, #8]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    c194:	str	r3, [r2, #4]
		endpoint0_transfer_data.next = 1;
    c196:	movs	r3, #1
    c198:	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
    c19a:	movs	r3, #0
    c19c:	str	r3, [r5, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    c19e:	ldr	r3, [pc, #184]	; (c258 <usb_isr+0x508>)
		endpoint0_transfer_data.pointer1 = addr + 4096;
    c1a0:	strd	r8, r9, [r2, #8]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    c1a4:	str	r3, [r2, #16]
		USB1_ENDPTPRIME |= (1<<0);
    c1a6:	ldr.w	r1, [r4, #432]	; 0x1b0
    c1aa:	orr.w	r1, r1, #1
    c1ae:	str.w	r1, [r4, #432]	; 0x1b0
		endpoint0_transfer_data.pointer3 = addr + 12288;
    c1b2:	add.w	r1, r3, #4096	; 0x1000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    c1b6:	add.w	r3, r3, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    c1ba:	str	r1, [r2, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    c1bc:	str	r3, [r2, #24]
		while (USB1_ENDPTPRIME) ;
    c1be:	ldr.w	r3, [r4, #432]	; 0x1b0
    c1c2:	cmp	r3, #0
    c1c4:	bne.n	c1be <usb_isr+0x46e>
	endpoint0_transfer_ack.next = 1;
    c1c6:	ldr	r3, [pc, #128]	; (c248 <usb_isr+0x4f8>)
	endpoint0_transfer_ack.pointer0 = 0;
    c1c8:	movs	r2, #0
    c1ca:	str	r2, [r3, #8]
	endpoint_queue_head[1].status = 0;
    c1cc:	str	r2, [r5, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
    c1ce:	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    c1d0:	str	r3, [r5, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    c1d2:	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    c1d4:	movw	r2, #32896	; 0x8080
    c1d8:	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    c1da:	mov.w	r3, #65537	; 0x10001
    c1de:	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    c1e2:	ldr.w	r3, [r4, #432]	; 0x1b0
    c1e6:	orr.w	r3, r3, #65536	; 0x10000
    c1ea:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    c1ee:	mov.w	r3, #65536	; 0x10000
    c1f2:	str	r3, [r7, #0]
	while (USB1_ENDPTPRIME) ;
    c1f4:	ldr.w	r3, [r4, #432]	; 0x1b0
    c1f8:	cmp	r3, #0
    c1fa:	bne.n	c1f4 <usb_isr+0x4a4>
    c1fc:	b.n	be30 <usb_isr+0xe0>
	switch (setup.wRequestAndType) {
    c1fe:	movw	r3, #8993	; 0x2321
    c202:	cmp	r1, r3
    c204:	bne.n	c2e8 <usb_isr+0x598>
	endpoint0_transfer_ack.next = 1;
    c206:	ldr	r3, [pc, #64]	; (c248 <usb_isr+0x4f8>)
	endpoint0_transfer_ack.pointer0 = 0;
    c208:	movs	r2, #0
    c20a:	str	r2, [r3, #8]
	endpoint_queue_head[1].status = 0;
    c20c:	str	r2, [r5, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
    c20e:	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    c210:	str	r3, [r5, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    c212:	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    c214:	movs	r2, #128	; 0x80
    c216:	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    c218:	mov.w	r3, #65537	; 0x10001
    c21c:	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    c220:	ldr.w	r3, [r4, #432]	; 0x1b0
    c224:	orr.w	r3, r3, #65536	; 0x10000
    c228:	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    c22c:	ldr.w	r3, [r4, #432]	; 0x1b0
    c230:	cmp	r3, #0
    c232:	bne.n	c22c <usb_isr+0x4dc>
    c234:	b.n	be30 <usb_isr+0xe0>
    c236:	nop
    c238:	.word	0x20015d2e
    c23c:	.word	0x20015918
    c240:	.word	0x20002700
    c244:	.word	0x00010080
    c248:	.word	0x200026e0
    c24c:	.word	0x20015824
    c250:	.word	0x20018824
    c254:	.word	0x20005d00
    c258:	.word	0x20017824
	switch (setup.wRequestAndType) {
    c25c:	movw	ip, #2817	; 0xb01
    c260:	cmp	r1, ip
    c262:	beq.w	c616 <usb_isr+0x8c6>
    c266:	movw	ip, #8225	; 0x2021
    c26a:	cmp	r1, ip
    c26c:	bne.n	c2f4 <usb_isr+0x5a4>
		if (setup.wLength != 7) break;
    c26e:	lsrs	r1, r0, #16
    c270:	cmp	r1, #7
    c272:	bne.w	bfa4 <usb_isr+0x254>
		endpoint0_setupdata.bothwords = setupdata;
    c276:	ldr	r1, [pc, #556]	; (c4a4 <usb_isr+0x754>)
		endpoint_queue_head[0].status = 0;
    c278:	str	r3, [r5, #12]
		endpoint0_transfer_data.next = 1;
    c27a:	ldr	r3, [pc, #556]	; (c4a8 <usb_isr+0x758>)
		endpoint0_setupdata.bothwords = setupdata;
    c27c:	strd	r2, r0, [r1]
		endpoint0_transfer_data.next = 1;
    c280:	movs	r2, #1
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    c282:	str	r3, [r5, #8]
		endpoint0_transfer_data.next = 1;
    c284:	str	r2, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    c286:	ldr	r2, [pc, #548]	; (c4ac <usb_isr+0x75c>)
    c288:	str	r2, [r3, #4]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    c28a:	ldr	r2, [pc, #548]	; (c4b0 <usb_isr+0x760>)
		endpoint0_transfer_data.pointer1 = addr + 4096;
    c28c:	strd	r8, r9, [r3, #8]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    c290:	str	r2, [r3, #16]
		USB1_ENDPTPRIME |= (1<<0);
    c292:	ldr.w	r1, [r4, #432]	; 0x1b0
    c296:	orr.w	r1, r1, #1
    c29a:	str.w	r1, [r4, #432]	; 0x1b0
		endpoint0_transfer_data.pointer3 = addr + 12288;
    c29e:	add.w	r1, r2, #4096	; 0x1000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    c2a2:	add.w	r2, r2, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    c2a6:	str	r1, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    c2a8:	str	r2, [r3, #24]
		while (USB1_ENDPTPRIME) ;
    c2aa:	ldr.w	r3, [r4, #432]	; 0x1b0
    c2ae:	cmp	r3, #0
    c2b0:	bne.n	c2aa <usb_isr+0x55a>
	endpoint0_transfer_ack.next = 1;
    c2b2:	ldr	r2, [pc, #512]	; (c4b4 <usb_isr+0x764>)
	endpoint_queue_head[1].status = 0;
    c2b4:	str	r3, [r5, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    c2b6:	str	r3, [r2, #8]
	endpoint0_transfer_ack.next = 1;
    c2b8:	movs	r3, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    c2ba:	str	r2, [r5, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    c2bc:	str	r3, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    c2be:	movw	r3, #32896	; 0x8080
    c2c2:	str	r3, [r2, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    c2c4:	mov.w	r3, #65537	; 0x10001
    c2c8:	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    c2cc:	ldr.w	r3, [r4, #432]	; 0x1b0
    c2d0:	orr.w	r3, r3, #65536	; 0x10000
    c2d4:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    c2d8:	mov.w	r3, #65536	; 0x10000
    c2dc:	str	r3, [r7, #0]
	while (USB1_ENDPTPRIME) ;
    c2de:	ldr.w	r3, [r4, #432]	; 0x1b0
    c2e2:	cmp	r3, #0
    c2e4:	bne.n	c2de <usb_isr+0x58e>
    c2e6:	b.n	be30 <usb_isr+0xe0>
	switch (setup.wRequestAndType) {
    c2e8:	movw	r3, #33185	; 0x81a1
    c2ec:	cmp	r1, r3
    c2ee:	beq.w	c07a <usb_isr+0x32a>
    c2f2:	b.n	bfa4 <usb_isr+0x254>
    c2f4:	movw	r2, #2689	; 0xa81
    c2f8:	cmp	r1, r2
    c2fa:	bne.w	bfa4 <usb_isr+0x254>
		if (setup.wIndex == AUDIO_INTERFACE+1) {
    c2fe:	uxth	r0, r0
    c300:	cmp	r0, #4
    c302:	beq.w	c8ce <usb_isr+0xb7e>
		} else if (setup.wIndex == AUDIO_INTERFACE+2) {
    c306:	cmp	r0, #5
    c308:	bne.w	bfa4 <usb_isr+0x254>
			endpoint0_buffer[0] = usb_audio_receive_setting;
    c30c:	ldr	r3, [pc, #424]	; (c4b8 <usb_isr+0x768>)
		endpoint0_transfer_data.next = 1;
    c30e:	movs	r2, #1
			endpoint0_buffer[0] = usb_audio_receive_setting;
    c310:	ldrb	r3, [r3, #0]
    c312:	strb.w	r3, [r8]
		endpoint0_transfer_data.next = 1;
    c316:	ldr	r3, [pc, #400]	; (c4a8 <usb_isr+0x758>)
    c318:	str	r2, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    c31a:	ldr	r2, [pc, #416]	; (c4bc <usb_isr+0x76c>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    c31c:	str	r3, [r5, #72]	; 0x48
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    c31e:	str	r2, [r3, #4]
		endpoint_queue_head[1].status = 0;
    c320:	movs	r2, #0
    c322:	str	r2, [r5, #76]	; 0x4c
		endpoint0_transfer_data.pointer2 = addr + 8192;
    c324:	ldr	r2, [pc, #392]	; (c4b0 <usb_isr+0x760>)
		endpoint0_transfer_data.pointer1 = addr + 4096;
    c326:	strd	r8, r9, [r3, #8]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    c32a:	str	r2, [r3, #16]
		USB1_ENDPTPRIME |= (1<<16);
    c32c:	ldr.w	r1, [r4, #432]	; 0x1b0
    c330:	orr.w	r1, r1, #65536	; 0x10000
    c334:	str.w	r1, [r4, #432]	; 0x1b0
		endpoint0_transfer_data.pointer3 = addr + 12288;
    c338:	add.w	r1, r2, #4096	; 0x1000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    c33c:	add.w	r2, r2, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    c340:	str	r1, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    c342:	str	r2, [r3, #24]
		while (USB1_ENDPTPRIME) ;
    c344:	ldr.w	r3, [r4, #432]	; 0x1b0
    c348:	cmp	r3, #0
    c34a:	bne.n	c344 <usb_isr+0x5f4>
	endpoint0_transfer_ack.next = 1;
    c34c:	ldr	r2, [pc, #356]	; (c4b4 <usb_isr+0x764>)
	endpoint_queue_head[0].status = 0;
    c34e:	str	r3, [r5, #12]
	endpoint0_transfer_ack.pointer0 = 0;
    c350:	str	r3, [r2, #8]
	endpoint0_transfer_ack.next = 1;
    c352:	movs	r3, #1
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
    c354:	str	r2, [r5, #8]
	endpoint0_transfer_ack.next = 1;
    c356:	str	r3, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    c358:	movs	r3, #128	; 0x80
    c35a:	str	r3, [r2, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    c35c:	mov.w	r3, #65537	; 0x10001
    c360:	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    c364:	ldr.w	r3, [r4, #432]	; 0x1b0
    c368:	orr.w	r3, r3, #1
    c36c:	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    c370:	ldr.w	r3, [r4, #432]	; 0x1b0
    c374:	cmp	r3, #0
    c376:	bne.n	c370 <usb_isr+0x620>
    c378:	b.n	be30 <usb_isr+0xe0>
	switch (setup.wRequestAndType) {
    c37a:	bic.w	r1, r1, #256	; 0x100
    c37e:	movw	r3, #33441	; 0x82a1
    c382:	cmp	r1, r3
    c384:	beq.w	c07a <usb_isr+0x32a>
    c388:	b.n	bfa4 <usb_isr+0x254>
    c38a:	bcc.w	bfa4 <usb_isr+0x254>
    c38e:	movw	r3, #289	; 0x121
    c392:	cmp	r1, r3
    c394:	beq.w	c176 <usb_isr+0x426>
    c398:	movw	r3, #545	; 0x221
    c39c:	cmp	r1, r3
    c39e:	beq.w	c176 <usb_isr+0x426>
    c3a2:	b.n	bfa4 <usb_isr+0x254>
    c3a4:	cmp	r1, #128	; 0x80
    c3a6:	bne.w	bfa4 <usb_isr+0x254>
		reply_buffer[0] = 0;
    c3aa:	ldr	r1, [pc, #276]	; (c4c0 <usb_isr+0x770>)
		endpoint0_transfer_data.next = 1;
    c3ac:	ldr	r2, [pc, #248]	; (c4a8 <usb_isr+0x758>)
		reply_buffer[0] = 0;
    c3ae:	strh	r3, [r1, #0]
		endpoint_queue_head[1].status = 0;
    c3b0:	str	r3, [r5, #76]	; 0x4c
		endpoint0_transfer_data.next = 1;
    c3b2:	movs	r3, #1
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    c3b4:	str	r1, [r2, #8]
		endpoint0_transfer_data.next = 1;
    c3b6:	str	r3, [r2, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    c3b8:	ldr	r3, [pc, #264]	; (c4c4 <usb_isr+0x774>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    c3ba:	str	r2, [r5, #72]	; 0x48
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    c3bc:	str	r3, [r2, #4]
		USB1_ENDPTPRIME |= (1<<16);
    c3be:	ldr.w	r3, [r4, #432]	; 0x1b0
    c3c2:	orr.w	r3, r3, #65536	; 0x10000
    c3c6:	str.w	r3, [r4, #432]	; 0x1b0
		endpoint0_transfer_data.pointer1 = addr + 4096;
    c3ca:	add.w	r3, r1, #4096	; 0x1000
    c3ce:	str	r3, [r2, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    c3d0:	add.w	r3, r1, #8192	; 0x2000
    c3d4:	str	r3, [r2, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    c3d6:	add.w	r3, r1, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    c3da:	add.w	r1, r1, #16384	; 0x4000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    c3de:	str	r3, [r2, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    c3e0:	str	r1, [r2, #24]
		while (USB1_ENDPTPRIME) ;
    c3e2:	ldr.w	r3, [r4, #432]	; 0x1b0
    c3e6:	cmp	r3, #0
    c3e8:	bne.n	c3e2 <usb_isr+0x692>
	endpoint0_transfer_ack.next = 1;
    c3ea:	ldr	r2, [pc, #200]	; (c4b4 <usb_isr+0x764>)
	endpoint_queue_head[0].status = 0;
    c3ec:	str	r3, [r5, #12]
	endpoint0_transfer_ack.pointer0 = 0;
    c3ee:	str	r3, [r2, #8]
	endpoint0_transfer_ack.next = 1;
    c3f0:	movs	r3, #1
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
    c3f2:	str	r2, [r5, #8]
	endpoint0_transfer_ack.next = 1;
    c3f4:	str	r3, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    c3f6:	movs	r3, #128	; 0x80
    c3f8:	str	r3, [r2, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    c3fa:	mov.w	r3, #65537	; 0x10001
    c3fe:	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    c402:	ldr.w	r3, [r4, #432]	; 0x1b0
    c406:	orr.w	r3, r3, #1
    c40a:	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    c40e:	ldr.w	r3, [r4, #432]	; 0x1b0
    c412:	cmp	r3, #0
    c414:	bne.n	c40e <usb_isr+0x6be>
    c416:	b.n	be30 <usb_isr+0xe0>
			usb_high_speed = 0;
    c418:	ldr	r2, [pc, #172]	; (c4c8 <usb_isr+0x778>)
    c41a:	strb	r3, [r2, #0]
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    c41c:	ldr	r3, [pc, #172]	; (c4cc <usb_isr+0x77c>)
    c41e:	ldr.w	r2, [r3, #328]	; 0x148
    c422:	lsls	r1, r2, #24
    c424:	bpl.w	bf9a <usb_isr+0x24a>
    c428:	b.n	bf7a <usb_isr+0x22a>
		usb_configuration = setup.wValue;
    c42a:	ldr	r0, [pc, #164]	; (c4d0 <usb_isr+0x780>)
    c42c:	ubfx	r2, r2, #16, #8
    c430:	str	r3, [sp, #0]
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    c432:	mov.w	r1, #13107400	; 0xc800c8
		usb_configuration = setup.wValue;
    c436:	strb	r2, [r0, #0]
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    c438:	ldr	r2, [pc, #152]	; (c4d4 <usb_isr+0x784>)
    c43a:	str.w	r2, [r4, #456]	; 0x1c8
		USB1_ENDPTCTRL5 = ENDPOINT5_CONFIG;
    c43e:	mov.w	r2, #12845252	; 0xc400c4
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    c442:	str.w	r1, [r4, #460]	; 0x1cc
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    c446:	str.w	r1, [r4, #464]	; 0x1d0
		USB1_ENDPTCTRL5 = ENDPOINT5_CONFIG;
    c44a:	str.w	r2, [r4, #468]	; 0x1d4
		USB1_ENDPTCTRL6 = ENDPOINT6_CONFIG;
    c44e:	subs	r2, #194	; 0xc2
    c450:	str.w	r2, [r4, #472]	; 0x1d8
		usb_serial_configure();
    c454:	bl	b584 <usb_serial_configure>
		usb_midi_configure();
    c458:	bl	d788 <usb_midi_configure>
		usb_audio_configure();
    c45c:	bl	e950 <usb_audio_configure>
	endpoint0_transfer_ack.next = 1;
    c460:	ldr	r2, [pc, #80]	; (c4b4 <usb_isr+0x764>)
    c462:	movs	r1, #1
	endpoint_queue_head[1].status = 0;
    c464:	ldr	r3, [sp, #0]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    c466:	str	r2, [r5, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    c468:	str	r1, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    c46a:	movs	r1, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
    c46c:	str	r3, [r2, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    c46e:	str	r1, [r2, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    c470:	mov.w	r2, #65537	; 0x10001
	endpoint_queue_head[1].status = 0;
    c474:	str	r3, [r5, #76]	; 0x4c
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    c476:	str.w	r2, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    c47a:	ldr.w	r2, [r4, #432]	; 0x1b0
    c47e:	orr.w	r2, r2, #65536	; 0x10000
    c482:	str.w	r2, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    c486:	str	r3, [r7, #0]
	while (USB1_ENDPTPRIME) ;
    c488:	ldr.w	r3, [r4, #432]	; 0x1b0
    c48c:	cmp	r3, #0
    c48e:	bne.n	c488 <usb_isr+0x738>
    c490:	b.n	be30 <usb_isr+0xe0>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    c492:	ldr	r3, [pc, #68]	; (c4d8 <usb_isr+0x788>)
    c494:	ldr	r1, [r3, #4]
    c496:	cmp	r1, #0
    c498:	beq.w	bfa4 <usb_isr+0x254>
    c49c:	mov.w	lr, r2, lsr #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    c4a0:	uxth	r2, r0
    c4a2:	b.n	c4e6 <usb_isr+0x796>
    c4a4:	.word	0x20005d00
    c4a8:	.word	0x20002700
    c4ac:	.word	0x00070080
    c4b0:	.word	0x20017824
    c4b4:	.word	0x200026e0
    c4b8:	.word	0x20015d29
    c4bc:	.word	0x00010080
    c4c0:	.word	0x20015918
    c4c4:	.word	0x00020080
    c4c8:	.word	0x20015d2f
    c4cc:	.word	0x402e0000
    c4d0:	.word	0x20015d2e
    c4d4:	.word	0x00cc0002
    c4d8:	.word	0x20001a58
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    c4dc:	ldr	r1, [r3, #16]
    c4de:	adds	r3, #12
    c4e0:	cmp	r1, #0
    c4e2:	beq.w	bfa4 <usb_isr+0x254>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    c4e6:	ldrh.w	ip, [r3]
    c4ea:	cmp	ip, lr
    c4ec:	bne.n	c4dc <usb_isr+0x78c>
    c4ee:	ldrh.w	ip, [r3, #2]
    c4f2:	cmp	ip, r2
    c4f4:	bne.n	c4dc <usb_isr+0x78c>
				if ((setup.wValue >> 8) == 3) {
    c4f6:	mov.w	r2, lr, lsr #8
    c4fa:	cmp	r2, #3
    c4fc:	beq.w	c850 <usb_isr+0xb00>
					datalen = list->length;
    c500:	ldrh	r2, [r3, #8]
				if (datalen > setup.wLength) datalen = setup.wLength;
    c502:	lsrs	r0, r0, #16
    c504:	cmp	r2, r0
    c506:	it	cs
    c508:	movcs	r2, r0
				if (setup.wValue == 0x200) {
    c50a:	cmp.w	lr, #512	; 0x200
    c50e:	bne.w	c85a <usb_isr+0xb0a>
					if (usb_high_speed) src = usb_config_descriptor_480;
    c512:	ldr	r3, [pc, #692]	; (c7c8 <usb_isr+0xa78>)
    c514:	ldr	r1, [pc, #692]	; (c7cc <usb_isr+0xa7c>)
    c516:	ldrb	r0, [r3, #0]
    c518:	ldr	r3, [pc, #692]	; (c7d0 <usb_isr+0xa80>)
					memcpy(usb_descriptor_buffer, src, datalen);
    c51a:	str	r2, [sp, #0]
    c51c:	cmp	r0, #0
    c51e:	it	ne
    c520:	movne	r1, r3
    c522:	ldr	r0, [pc, #688]	; (c7d4 <usb_isr+0xa84>)
    c524:	bl	b09c <memcpy>
    c528:	ldr	r3, [pc, #680]	; (c7d4 <usb_isr+0xa84>)
    c52a:	ldr	r2, [sp, #0]
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    c52c:	bic.w	r1, r3, #31
	uint32_t end_addr = (uint32_t)addr + size;
    c530:	add.w	ip, r3, r2
	asm("dsb");
    c534:	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    c538:	mov.w	r0, #3758153728	; 0xe000e000
    c53c:	str.w	r1, [r0, #3952]	; 0xf70
		location += 32;
    c540:	adds	r1, #32
	} while (location < end_addr);
    c542:	cmp	ip, r1
    c544:	bhi.n	c53c <usb_isr+0x7ec>
	asm("dsb");
    c546:	dsb	sy
	asm("isb");
    c54a:	isb	sy
	if (len > 0) {
    c54e:	cbz	r2, c590 <usb_isr+0x840>
		endpoint0_transfer_data.next = 1;
    c550:	ldr	r1, [pc, #644]	; (c7d8 <usb_isr+0xa88>)
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    c552:	lsls	r2, r2, #16
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    c554:	str	r3, [r1, #8]
		endpoint0_transfer_data.next = 1;
    c556:	movs	r3, #1
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    c558:	orr.w	r2, r2, #128	; 0x80
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    c55c:	str	r1, [r5, #72]	; 0x48
		endpoint0_transfer_data.next = 1;
    c55e:	str	r3, [r1, #0]
		endpoint_queue_head[1].status = 0;
    c560:	movs	r3, #0
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    c562:	str	r2, [r1, #4]
		endpoint_queue_head[1].status = 0;
    c564:	str	r3, [r5, #76]	; 0x4c
		endpoint0_transfer_data.pointer1 = addr + 4096;
    c566:	ldr	r3, [pc, #628]	; (c7dc <usb_isr+0xa8c>)
    c568:	str	r3, [r1, #12]
		USB1_ENDPTPRIME |= (1<<16);
    c56a:	ldr.w	r2, [r4, #432]	; 0x1b0
    c56e:	orr.w	r2, r2, #65536	; 0x10000
    c572:	str.w	r2, [r4, #432]	; 0x1b0
		endpoint0_transfer_data.pointer2 = addr + 8192;
    c576:	add.w	r2, r3, #4096	; 0x1000
    c57a:	str	r2, [r1, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    c57c:	add.w	r2, r3, #8192	; 0x2000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    c580:	add.w	r3, r3, #12288	; 0x3000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    c584:	str	r2, [r1, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    c586:	str	r3, [r1, #24]
		while (USB1_ENDPTPRIME) ;
    c588:	ldr.w	r3, [r4, #432]	; 0x1b0
    c58c:	cmp	r3, #0
    c58e:	bne.n	c588 <usb_isr+0x838>
	endpoint0_transfer_ack.next = 1;
    c590:	ldr	r3, [pc, #588]	; (c7e0 <usb_isr+0xa90>)
    c592:	movs	r1, #1
	endpoint0_transfer_ack.pointer0 = 0;
    c594:	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    c596:	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    c598:	movs	r1, #128	; 0x80
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
    c59a:	str	r3, [r5, #8]
	endpoint0_transfer_ack.pointer0 = 0;
    c59c:	str	r2, [r3, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    c59e:	str	r1, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    c5a0:	mov.w	r3, #65537	; 0x10001
	endpoint_queue_head[0].status = 0;
    c5a4:	str	r2, [r5, #12]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    c5a6:	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    c5aa:	ldr.w	r3, [r4, #432]	; 0x1b0
    c5ae:	orr.w	r3, r3, #1
    c5b2:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    c5b6:	str	r2, [r7, #0]
	while (USB1_ENDPTPRIME) ;
    c5b8:	ldr.w	r3, [r4, #432]	; 0x1b0
    c5bc:	cmp	r3, #0
    c5be:	bne.n	c5b8 <usb_isr+0x868>
    c5c0:	b.n	be30 <usb_isr+0xe0>
		if (endpoint > 7) break;
    c5c2:	tst.w	r0, #120	; 0x78
    c5c6:	uxth	r3, r0
    c5c8:	bne.w	bfa4 <usb_isr+0x254>
		endpoint = setup.wIndex & 0x7F;
    c5cc:	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    c5d0:	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    c5d4:	ldr.w	r3, [fp, r2, lsl #2]
    c5d8:	ite	ne
    c5da:	orrne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    c5de:	orreq.w	r3, r3, #1
    c5e2:	str.w	r3, [fp, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    c5e6:	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    c5e8:	ldr	r3, [pc, #500]	; (c7e0 <usb_isr+0xa90>)
	endpoint_queue_head[1].status = 0;
    c5ea:	str	r2, [r5, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    c5ec:	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    c5ee:	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    c5f0:	str	r3, [r5, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    c5f2:	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    c5f4:	movs	r2, #128	; 0x80
    c5f6:	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    c5f8:	mov.w	r3, #65537	; 0x10001
    c5fc:	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    c600:	ldr.w	r3, [r4, #432]	; 0x1b0
    c604:	orr.w	r3, r3, #65536	; 0x10000
    c608:	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    c60c:	ldr.w	r3, [r4, #432]	; 0x1b0
    c610:	cmp	r3, #0
    c612:	bne.n	c60c <usb_isr+0x8bc>
    c614:	b.n	be30 <usb_isr+0xe0>
		if (setup.wIndex == AUDIO_INTERFACE+1) {
    c616:	uxth	r0, r0
    c618:	cmp	r0, #4
    c61a:	beq.w	c818 <usb_isr+0xac8>
		} else if (setup.wIndex == AUDIO_INTERFACE+2) {
    c61e:	cmp	r0, #5
    c620:	bne.w	bfa4 <usb_isr+0x254>
	endpoint0_transfer_ack.next = 1;
    c624:	ldr	r1, [pc, #440]	; (c7e0 <usb_isr+0xa90>)
			usb_audio_receive_setting = setup.wValue;
    c626:	ubfx	r2, r2, #16, #16
	endpoint_queue_head[1].status = 0;
    c62a:	str	r3, [r5, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    c62c:	str	r3, [r1, #8]
			usb_audio_receive_setting = setup.wValue;
    c62e:	ldr	r3, [pc, #436]	; (c7e4 <usb_isr+0xa94>)
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    c630:	str	r1, [r5, #72]	; 0x48
			usb_audio_receive_setting = setup.wValue;
    c632:	strb	r2, [r3, #0]
	endpoint0_transfer_ack.next = 1;
    c634:	movs	r3, #1
    c636:	str	r3, [r1, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    c638:	movs	r3, #128	; 0x80
    c63a:	str	r3, [r1, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    c63c:	mov.w	r3, #65537	; 0x10001
    c640:	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    c644:	ldr.w	r3, [r4, #432]	; 0x1b0
    c648:	orr.w	r3, r3, #65536	; 0x10000
    c64c:	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    c650:	ldr.w	r3, [r4, #432]	; 0x1b0
    c654:	cmp	r3, #0
    c656:	bne.n	c650 <usb_isr+0x900>
    c658:	b.w	be30 <usb_isr+0xe0>
		endpoint = setup.wIndex & 0x7F;
    c65c:	uxth	r3, r0
		if (endpoint > 7) break;
    c65e:	ands.w	r0, r0, #120	; 0x78
    c662:	bne.w	bfa4 <usb_isr+0x254>
		endpoint = setup.wIndex & 0x7F;
    c666:	and.w	r2, r3, #127	; 0x7f
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    c66a:	ldr.w	r1, [fp, r2, lsl #2]
		reply_buffer[0] = 0;
    c66e:	ldr	r2, [pc, #376]	; (c7e8 <usb_isr+0xa98>)
    c670:	strh	r0, [r2, #0]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    c672:	lsls	r0, r3, #24
    c674:	bmi.w	c7ac <usb_isr+0xa5c>
    c678:	lsls	r3, r1, #31
    c67a:	bmi.w	c7b2 <usb_isr+0xa62>
		endpoint0_transfer_data.next = 1;
    c67e:	ldr	r3, [pc, #344]	; (c7d8 <usb_isr+0xa88>)
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    c680:	str	r2, [r3, #8]
		endpoint0_transfer_data.next = 1;
    c682:	movs	r2, #1
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    c684:	str	r3, [r5, #72]	; 0x48
		endpoint0_transfer_data.next = 1;
    c686:	str	r2, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    c688:	ldr	r2, [pc, #352]	; (c7ec <usb_isr+0xa9c>)
    c68a:	str	r2, [r3, #4]
		endpoint_queue_head[1].status = 0;
    c68c:	movs	r2, #0
    c68e:	str	r2, [r5, #76]	; 0x4c
		endpoint0_transfer_data.pointer1 = addr + 4096;
    c690:	ldr	r2, [pc, #348]	; (c7f0 <usb_isr+0xaa0>)
    c692:	str	r2, [r3, #12]
		USB1_ENDPTPRIME |= (1<<16);
    c694:	ldr.w	r1, [r4, #432]	; 0x1b0
    c698:	orr.w	r1, r1, #65536	; 0x10000
    c69c:	str.w	r1, [r4, #432]	; 0x1b0
		endpoint0_transfer_data.pointer2 = addr + 8192;
    c6a0:	add.w	r1, r2, #4096	; 0x1000
    c6a4:	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    c6a6:	add.w	r1, r2, #8192	; 0x2000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    c6aa:	add.w	r2, r2, #12288	; 0x3000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    c6ae:	str	r1, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    c6b0:	str	r2, [r3, #24]
		while (USB1_ENDPTPRIME) ;
    c6b2:	ldr.w	r3, [r4, #432]	; 0x1b0
    c6b6:	cmp	r3, #0
    c6b8:	bne.n	c6b2 <usb_isr+0x962>
	endpoint0_transfer_ack.next = 1;
    c6ba:	ldr	r2, [pc, #292]	; (c7e0 <usb_isr+0xa90>)
	endpoint_queue_head[0].status = 0;
    c6bc:	str	r3, [r5, #12]
	endpoint0_transfer_ack.pointer0 = 0;
    c6be:	str	r3, [r2, #8]
	endpoint0_transfer_ack.next = 1;
    c6c0:	movs	r3, #1
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
    c6c2:	str	r2, [r5, #8]
	endpoint0_transfer_ack.next = 1;
    c6c4:	str	r3, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    c6c6:	movs	r3, #128	; 0x80
    c6c8:	str	r3, [r2, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    c6ca:	mov.w	r3, #65537	; 0x10001
    c6ce:	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    c6d2:	ldr.w	r3, [r4, #432]	; 0x1b0
    c6d6:	orr.w	r3, r3, #1
    c6da:	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    c6de:	ldr.w	r3, [r4, #432]	; 0x1b0
    c6e2:	cmp	r3, #0
    c6e4:	bne.n	c6de <usb_isr+0x98e>
    c6e6:	b.w	be30 <usb_isr+0xe0>
		if (setup.wLength >= 3) {
    c6ea:	cmp.w	r0, #196608	; 0x30000
    c6ee:	bcc.w	bfa4 <usb_isr+0x254>
			endpoint0_buffer[0] = 44100 & 255;
    c6f2:	movw	r2, #44100	; 0xac44
			endpoint0_buffer[2] = 0;
    c6f6:	strb.w	r3, [r8, #2]
		endpoint_queue_head[1].status = 0;
    c6fa:	str	r3, [r5, #76]	; 0x4c
			endpoint0_buffer[0] = 44100 & 255;
    c6fc:	strh.w	r2, [r8]
		endpoint0_transfer_data.next = 1;
    c700:	movs	r2, #1
    c702:	ldr	r3, [pc, #212]	; (c7d8 <usb_isr+0xa88>)
    c704:	str	r2, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    c706:	ldr	r2, [pc, #236]	; (c7f4 <usb_isr+0xaa4>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    c708:	str	r3, [r5, #72]	; 0x48
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    c70a:	str	r2, [r3, #4]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    c70c:	ldr	r2, [pc, #232]	; (c7f8 <usb_isr+0xaa8>)
		endpoint0_transfer_data.pointer1 = addr + 4096;
    c70e:	strd	r8, r9, [r3, #8]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    c712:	str	r2, [r3, #16]
		USB1_ENDPTPRIME |= (1<<16);
    c714:	ldr.w	r1, [r4, #432]	; 0x1b0
    c718:	orr.w	r1, r1, #65536	; 0x10000
    c71c:	str.w	r1, [r4, #432]	; 0x1b0
		endpoint0_transfer_data.pointer3 = addr + 12288;
    c720:	add.w	r1, r2, #4096	; 0x1000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    c724:	add.w	r2, r2, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    c728:	str	r1, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    c72a:	str	r2, [r3, #24]
		while (USB1_ENDPTPRIME) ;
    c72c:	ldr.w	r3, [r4, #432]	; 0x1b0
    c730:	cmp	r3, #0
    c732:	bne.n	c72c <usb_isr+0x9dc>
	endpoint0_transfer_ack.next = 1;
    c734:	ldr	r2, [pc, #168]	; (c7e0 <usb_isr+0xa90>)
	endpoint_queue_head[0].status = 0;
    c736:	str	r3, [r5, #12]
	endpoint0_transfer_ack.pointer0 = 0;
    c738:	str	r3, [r2, #8]
	endpoint0_transfer_ack.next = 1;
    c73a:	movs	r3, #1
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
    c73c:	str	r2, [r5, #8]
	endpoint0_transfer_ack.next = 1;
    c73e:	str	r3, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    c740:	movs	r3, #128	; 0x80
    c742:	str	r3, [r2, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    c744:	mov.w	r3, #65537	; 0x10001
    c748:	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    c74c:	ldr.w	r3, [r4, #432]	; 0x1b0
    c750:	orr.w	r3, r3, #1
    c754:	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    c758:	ldr.w	r3, [r4, #432]	; 0x1b0
    c75c:	cmp	r3, #0
    c75e:	bne.n	c758 <usb_isr+0xa08>
    c760:	b.w	be30 <usb_isr+0xe0>
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
    c764:	uxth	r0, r0
    c766:	cmp	r0, #0
    c768:	bne.w	c206 <usb_isr+0x4b6>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    c76c:	ldr	r3, [pc, #140]	; (c7fc <usb_isr+0xaac>)
			usb_cdc_line_rtsdtr = setup.wValue;
    c76e:	ubfx	r2, r2, #16, #8
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    c772:	ldr	r1, [r3, #0]
    c774:	ldr	r3, [pc, #136]	; (c800 <usb_isr+0xab0>)
    c776:	str	r1, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    c778:	ldr	r3, [pc, #136]	; (c804 <usb_isr+0xab4>)
    c77a:	strb	r2, [r3, #0]
    c77c:	b.n	c206 <usb_isr+0x4b6>
				endpoint0_notify_mask = 0;
    c77e:	movs	r1, #0
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    c780:	movw	r0, #8225	; 0x2021
				endpoint0_notify_mask = 0;
    c784:	str	r1, [r2, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
    c786:	ldr	r1, [pc, #128]	; (c808 <usb_isr+0xab8>)
    c788:	ldrd	r2, r1, [r1]
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    c78c:	uxth	r4, r2
    c78e:	cmp	r4, r0
    c790:	beq.n	c886 <usb_isr+0xb36>
	if (setup.word1 == 0x02010121 || setup.word1 == 0x01000121 /* TODO: check setup.word2 */) {
    c792:	ldr	r3, [pc, #120]	; (c80c <usb_isr+0xabc>)
    c794:	cmp	r2, r3
    c796:	beq.n	c7a0 <usb_isr+0xa50>
    c798:	ldr	r3, [pc, #116]	; (c810 <usb_isr+0xac0>)
    c79a:	cmp	r2, r3
    c79c:	bne.w	be50 <usb_isr+0x100>
		usb_audio_set_feature(&endpoint0_setupdata, endpoint0_buffer);
    c7a0:	ldr	r1, [pc, #112]	; (c814 <usb_isr+0xac4>)
    c7a2:	ldr	r0, [pc, #100]	; (c808 <usb_isr+0xab8>)
    c7a4:	bl	eb18 <usb_audio_set_feature>
}
    c7a8:	b.w	be50 <usb_isr+0x100>
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    c7ac:	lsls	r1, r1, #15
    c7ae:	bpl.w	c67e <usb_isr+0x92e>
			reply_buffer[0] = 1;
    c7b2:	movs	r3, #1
    c7b4:	strb	r3, [r2, #0]
    c7b6:	b.n	c67e <usb_isr+0x92e>
			ep->last_transfer = NULL;
    c7b8:	strd	r3, r3, [fp, #48]	; 0x30
			break;
    c7bc:	b.w	be9a <usb_isr+0x14a>
			ep->last_transfer = NULL;
    c7c0:	strd	r3, r3, [fp, #48]	; 0x30
			break;
    c7c4:	b.w	bef2 <usb_isr+0x1a2>
    c7c8:	.word	0x20015d2f
    c7cc:	.word	0x600028e4
    c7d0:	.word	0x60002a3c
    c7d4:	.word	0x20201e40
    c7d8:	.word	0x20002700
    c7dc:	.word	0x20202e40
    c7e0:	.word	0x200026e0
    c7e4:	.word	0x20015d29
    c7e8:	.word	0x20015918
    c7ec:	.word	0x00020080
    c7f0:	.word	0x20016918
    c7f4:	.word	0x00030080
    c7f8:	.word	0x20017824
    c7fc:	.word	0x2001598c
    c800:	.word	0x20015ce4
    c804:	.word	0x20015d2d
    c808:	.word	0x20005d00
    c80c:	.word	0x02010121
    c810:	.word	0x01000121
    c814:	.word	0x20015824
	endpoint0_transfer_ack.next = 1;
    c818:	ldr	r1, [pc, #336]	; (c96c <usb_isr+0xc1c>)
			usb_audio_transmit_setting = setup.wValue;
    c81a:	ubfx	r2, r2, #16, #16
	endpoint_queue_head[1].status = 0;
    c81e:	str	r3, [r5, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    c820:	str	r3, [r1, #8]
			usb_audio_transmit_setting = setup.wValue;
    c822:	ldr	r3, [pc, #332]	; (c970 <usb_isr+0xc20>)
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    c824:	str	r1, [r5, #72]	; 0x48
			usb_audio_transmit_setting = setup.wValue;
    c826:	strb	r2, [r3, #0]
	endpoint0_transfer_ack.next = 1;
    c828:	movs	r3, #1
    c82a:	str	r3, [r1, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    c82c:	movs	r3, #128	; 0x80
    c82e:	str	r3, [r1, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    c830:	mov.w	r3, #65537	; 0x10001
    c834:	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    c838:	ldr.w	r3, [r4, #432]	; 0x1b0
    c83c:	orr.w	r3, r3, #65536	; 0x10000
    c840:	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    c844:	ldr.w	r3, [r4, #432]	; 0x1b0
    c848:	cmp	r3, #0
    c84a:	bne.n	c844 <usb_isr+0xaf4>
    c84c:	b.w	be30 <usb_isr+0xe0>
				if (datalen > setup.wLength) datalen = setup.wLength;
    c850:	lsrs	r0, r0, #16
					datalen = *(list->addr);
    c852:	ldrb	r2, [r1, #0]
    c854:	cmp	r2, r0
    c856:	it	cs
    c858:	movcs	r2, r0
				} else if (setup.wValue == 0x700) {
    c85a:	cmp.w	lr, #1792	; 0x700
    c85e:	bne.n	c93c <usb_isr+0xbec>
					if (usb_high_speed) src = usb_config_descriptor_12;
    c860:	ldr	r3, [pc, #272]	; (c974 <usb_isr+0xc24>)
    c862:	ldr	r0, [pc, #276]	; (c978 <usb_isr+0xc28>)
    c864:	ldrb.w	ip, [r3]
    c868:	ldr	r1, [pc, #272]	; (c97c <usb_isr+0xc2c>)
					memcpy(usb_descriptor_buffer, src, datalen);
    c86a:	ldr	r3, [pc, #276]	; (c980 <usb_isr+0xc30>)
    c86c:	cmp.w	ip, #0
    c870:	it	ne
    c872:	movne	r1, r0
    c874:	str	r2, [sp, #0]
    c876:	mov	r0, r3
    c878:	bl	b09c <memcpy>
					usb_descriptor_buffer[1] = 7;
    c87c:	movs	r1, #7
					memcpy(usb_descriptor_buffer, src, datalen);
    c87e:	mov	r3, r0
					usb_descriptor_buffer[1] = 7;
    c880:	strb	r1, [r0, #1]
    c882:	ldr	r2, [sp, #0]
    c884:	b.n	c52c <usb_isr+0x7dc>
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    c886:	uxth	r1, r1
    c888:	cmp	r1, #0
    c88a:	bne.n	c792 <usb_isr+0xa42>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    c88c:	ldr	r1, [pc, #244]	; (c984 <usb_isr+0xc34>)
    c88e:	ldr	r4, [pc, #248]	; (c988 <usb_isr+0xc38>)
    c890:	ldmia	r1, {r0, r1}
    c892:	strh	r1, [r4, #4]
		if (usb_cdc_line_coding[0] == 134) {
    c894:	cmp	r0, #134	; 0x86
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    c896:	mov.w	r1, r1, lsr #16
    c89a:	str	r0, [r4, #0]
    c89c:	strb	r1, [r4, #6]
		if (usb_cdc_line_coding[0] == 134) {
    c89e:	bne.w	c792 <usb_isr+0xa42>
	__disable_irq();
    c8a2:	cpsid	i
	sof_usage |= (1 << interface);
    c8a4:	ldr	r0, [pc, #228]	; (c98c <usb_isr+0xc3c>)
    c8a6:	ldrb	r1, [r0, #0]
    c8a8:	orr.w	r1, r1, #64	; 0x40
    c8ac:	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
    c8ae:	ldr.w	r1, [r3, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    c8b2:	lsls	r0, r1, #24
    c8b4:	bmi.n	c8c4 <usb_isr+0xb74>
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    c8b6:	orr.w	r1, r1, #128	; 0x80
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    c8ba:	movs	r0, #128	; 0x80
    c8bc:	str.w	r0, [r3, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    c8c0:	str.w	r1, [r3, #328]	; 0x148
	__enable_irq();
    c8c4:	cpsie	i
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    c8c6:	ldr	r3, [pc, #200]	; (c990 <usb_isr+0xc40>)
    c8c8:	movs	r1, #80	; 0x50
    c8ca:	strb	r1, [r3, #0]
    c8cc:	b.n	c792 <usb_isr+0xa42>
		endpoint_queue_head[1].status = 0;
    c8ce:	str	r3, [r5, #76]	; 0x4c
		endpoint0_transfer_data.next = 1;
    c8d0:	movs	r2, #1
			endpoint0_buffer[0] = usb_audio_transmit_setting;
    c8d2:	ldr	r3, [pc, #156]	; (c970 <usb_isr+0xc20>)
    c8d4:	ldrb	r3, [r3, #0]
    c8d6:	strb.w	r3, [r8]
		endpoint0_transfer_data.next = 1;
    c8da:	ldr	r3, [pc, #184]	; (c994 <usb_isr+0xc44>)
    c8dc:	str	r2, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    c8de:	ldr	r2, [pc, #184]	; (c998 <usb_isr+0xc48>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    c8e0:	str	r3, [r5, #72]	; 0x48
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    c8e2:	str	r2, [r3, #4]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    c8e4:	ldr	r2, [pc, #180]	; (c99c <usb_isr+0xc4c>)
		endpoint0_transfer_data.pointer1 = addr + 4096;
    c8e6:	strd	r8, r9, [r3, #8]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    c8ea:	str	r2, [r3, #16]
		USB1_ENDPTPRIME |= (1<<16);
    c8ec:	ldr.w	r1, [r4, #432]	; 0x1b0
    c8f0:	orr.w	r1, r1, #65536	; 0x10000
    c8f4:	str.w	r1, [r4, #432]	; 0x1b0
		endpoint0_transfer_data.pointer3 = addr + 12288;
    c8f8:	add.w	r1, r2, #4096	; 0x1000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    c8fc:	add.w	r2, r2, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    c900:	str	r1, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    c902:	str	r2, [r3, #24]
		while (USB1_ENDPTPRIME) ;
    c904:	ldr.w	r3, [r4, #432]	; 0x1b0
    c908:	cmp	r3, #0
    c90a:	bne.n	c904 <usb_isr+0xbb4>
	endpoint0_transfer_ack.next = 1;
    c90c:	ldr	r2, [pc, #92]	; (c96c <usb_isr+0xc1c>)
	endpoint_queue_head[0].status = 0;
    c90e:	str	r3, [r5, #12]
	endpoint0_transfer_ack.pointer0 = 0;
    c910:	str	r3, [r2, #8]
	endpoint0_transfer_ack.next = 1;
    c912:	movs	r3, #1
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
    c914:	str	r2, [r5, #8]
	endpoint0_transfer_ack.next = 1;
    c916:	str	r3, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    c918:	movs	r3, #128	; 0x80
    c91a:	str	r3, [r2, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    c91c:	mov.w	r3, #65537	; 0x10001
    c920:	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    c924:	ldr.w	r3, [r4, #432]	; 0x1b0
    c928:	orr.w	r3, r3, #1
    c92c:	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    c930:	ldr.w	r3, [r4, #432]	; 0x1b0
    c934:	cmp	r3, #0
    c936:	bne.n	c930 <usb_isr+0xbe0>
    c938:	b.w	be30 <usb_isr+0xe0>
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    c93c:	ldr	r3, [pc, #64]	; (c980 <usb_isr+0xc30>)
    c93e:	mov	r0, r3
    c940:	strd	r2, r3, [sp]
    c944:	bl	b09c <memcpy>
    c948:	ldrd	r2, r3, [sp]
    c94c:	b.n	c52c <usb_isr+0x7dc>
	sof_usage &= ~(1 << interface);
    c94e:	ldr	r1, [pc, #60]	; (c98c <usb_isr+0xc3c>)
    c950:	ldrb	r2, [r1, #0]
    c952:	and.w	r2, r2, #191	; 0xbf
    c956:	strb	r2, [r1, #0]
	if (sof_usage == 0) {
    c958:	cbnz	r2, c966 <usb_isr+0xc16>
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    c95a:	ldr.w	r2, [r3, #328]	; 0x148
    c95e:	bic.w	r2, r2, #128	; 0x80
    c962:	str.w	r2, [r3, #328]	; 0x148
				_reboot_Teensyduino_();
    c966:	bl	15720 <___reboot_Teensyduino__veneer>
    c96a:	nop
    c96c:	.word	0x200026e0
    c970:	.word	0x20015d2c
    c974:	.word	0x20015d2f
    c978:	.word	0x600028e4
    c97c:	.word	0x60002a3c
    c980:	.word	0x20201e40
    c984:	.word	0x20015824
    c988:	.word	0x20015cdc
    c98c:	.word	0x20015d22
    c990:	.word	0x20015d30
    c994:	.word	0x20002700
    c998:	.word	0x00010080
    c99c:	.word	0x20017824

0000c9a0 <usb_stop_sof_interrupts>:
	sof_usage &= ~(1 << interface);
    c9a0:	ldr	r1, [pc, #32]	; (c9c4 <usb_stop_sof_interrupts+0x24>)
    c9a2:	movs	r2, #1
    c9a4:	ldrb	r3, [r1, #0]
    c9a6:	lsl.w	r0, r2, r0
    c9aa:	bic.w	r0, r3, r0
    c9ae:	strb	r0, [r1, #0]
	if (sof_usage == 0) {
    c9b0:	cbnz	r0, c9c0 <usb_stop_sof_interrupts+0x20>
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    c9b2:	ldr	r2, [pc, #20]	; (c9c8 <usb_stop_sof_interrupts+0x28>)
    c9b4:	ldr.w	r3, [r2, #328]	; 0x148
    c9b8:	bic.w	r3, r3, #128	; 0x80
    c9bc:	str.w	r3, [r2, #328]	; 0x148
}
    c9c0:	bx	lr
    c9c2:	nop
    c9c4:	.word	0x20015d22
    c9c8:	.word	0x402e0000

0000c9cc <usb_config_rx>:
{
    c9cc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c9d0:	mov	r7, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    c9d2:	subs	r3, r0, #2
    c9d4:	cmp	r3, #4
    c9d6:	bls.n	c9dc <usb_config_rx+0x10>
}
    c9d8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    c9dc:	ldr.w	r9, [pc, #76]	; ca2c <usb_config_rx+0x60>
    c9e0:	mov	r5, r2
    c9e2:	mov	r4, r1
	memset(qh, 0, sizeof(endpoint_t));
    c9e4:	movs	r2, #60	; 0x3c
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    c9e6:	add.w	r8, r9, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    c9ea:	mov	r6, r0
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    c9ec:	mov.w	sl, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    c9f0:	movs	r1, #0
    c9f2:	add.w	r0, r8, #4
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    c9f6:	lsls	r4, r4, #16
	memset(qh, 0, sizeof(endpoint_t));
    c9f8:	bl	10104 <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    c9fc:	clz	r2, r5
	qh->next = 1; // Terminate bit = 1
    ca00:	movs	r3, #1
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    ca02:	lsrs	r2, r2, #5
    ca04:	orr.w	r4, r4, r2, lsl #29
	qh->config = config;
    ca08:	str.w	r4, [r9, sl]
	qh->callback_function = callback;
    ca0c:	str.w	r7, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    ca10:	str.w	r3, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << ep);
    ca14:	cmp	r7, #0
    ca16:	beq.n	c9d8 <usb_config_rx+0xc>
    ca18:	ldr	r2, [pc, #12]	; (ca28 <usb_config_rx+0x5c>)
    ca1a:	lsls	r3, r6
    ca1c:	ldr	r1, [r2, #0]
    ca1e:	orrs	r3, r1
    ca20:	str	r3, [r2, #0]
}
    ca22:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ca26:	nop
    ca28:	.word	0x20015830
    ca2c:	.word	0x20000000

0000ca30 <usb_config_tx>:
{
    ca30:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ca34:	mov	r5, r1
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    ca36:	subs	r1, r0, #2
    ca38:	cmp	r1, #4
    ca3a:	bls.n	ca40 <usb_config_tx+0x10>
}
    ca3c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    ca40:	lsls	r7, r0, #7
    ca42:	ldr.w	r9, [pc, #76]	; ca90 <usb_config_tx+0x60>
    ca46:	mov	sl, r2
    ca48:	mov	r4, r0
    ca4a:	adds	r7, #64	; 0x40
	memset(qh, 0, sizeof(endpoint_t));
    ca4c:	movs	r2, #60	; 0x3c
    ca4e:	movs	r1, #0
    ca50:	mov	r6, r3
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    ca52:	add.w	r8, r9, r7
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    ca56:	lsls	r5, r5, #16
	memset(qh, 0, sizeof(endpoint_t));
    ca58:	add.w	r0, r8, #4
    ca5c:	bl	10104 <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    ca60:	clz	r2, sl
    ca64:	lsrs	r2, r2, #5
    ca66:	orr.w	r2, r5, r2, lsl #29
	qh->config = config;
    ca6a:	str.w	r2, [r9, r7]
	qh->next = 1; // Terminate bit = 1
    ca6e:	movs	r2, #1
	qh->callback_function = callback;
    ca70:	str.w	r6, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    ca74:	str.w	r2, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    ca78:	cmp	r6, #0
    ca7a:	beq.n	ca3c <usb_config_tx+0xc>
    ca7c:	ldr	r3, [pc, #12]	; (ca8c <usb_config_tx+0x5c>)
    ca7e:	adds	r4, #16
    ca80:	ldr	r1, [r3, #0]
    ca82:	lsls	r2, r4
    ca84:	orrs	r2, r1
    ca86:	str	r2, [r3, #0]
}
    ca88:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ca8c:	.word	0x20015830
    ca90:	.word	0x20000000

0000ca94 <usb_config_rx_iso>:
{
    ca94:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ca98:	mov	r4, r2
	if (mult < 1 || mult > 3) return;
    ca9a:	subs	r2, #1
    ca9c:	cmp	r2, #2
    ca9e:	bhi.n	caaa <usb_config_rx_iso+0x16>
    caa0:	mov	r5, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    caa2:	subs	r3, r0, #2
    caa4:	mov	r7, r0
    caa6:	cmp	r3, #4
    caa8:	bls.n	caae <usb_config_rx_iso+0x1a>
}
    caaa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    caae:	ldr.w	r9, [pc, #68]	; caf4 <usb_config_rx_iso+0x60>
    cab2:	mov	r6, r1
	uint32_t config = (packet_size << 16) | (mult << 30);
    cab4:	lsls	r4, r4, #30
	memset(qh, 0, sizeof(endpoint_t));
    cab6:	movs	r2, #60	; 0x3c
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    cab8:	add.w	r8, r9, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    cabc:	movs	r1, #0
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    cabe:	mov.w	sl, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    cac2:	add.w	r0, r8, #4
	uint32_t config = (packet_size << 16) | (mult << 30);
    cac6:	orr.w	r4, r4, r6, lsl #16
	memset(qh, 0, sizeof(endpoint_t));
    caca:	bl	10104 <memset>
	qh->next = 1; // Terminate bit = 1
    cace:	movs	r3, #1
	qh->config = config;
    cad0:	str.w	r4, [r9, sl]
	qh->callback_function = callback;
    cad4:	str.w	r5, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    cad8:	str.w	r3, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << ep);
    cadc:	cmp	r5, #0
    cade:	beq.n	caaa <usb_config_rx_iso+0x16>
    cae0:	ldr	r2, [pc, #12]	; (caf0 <usb_config_rx_iso+0x5c>)
    cae2:	lsls	r3, r7
    cae4:	ldr	r1, [r2, #0]
    cae6:	orrs	r3, r1
    cae8:	str	r3, [r2, #0]
}
    caea:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    caee:	nop
    caf0:	.word	0x20015830
    caf4:	.word	0x20000000

0000caf8 <usb_config_tx_iso>:
{
    caf8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    cafc:	mov	r4, r2
	if (mult < 1 || mult > 3) return;
    cafe:	subs	r2, #1
    cb00:	cmp	r2, #2
    cb02:	bhi.n	cb0e <usb_config_tx_iso+0x16>
    cb04:	mov	r5, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    cb06:	subs	r3, r0, #2
    cb08:	mov	r7, r0
    cb0a:	cmp	r3, #4
    cb0c:	bls.n	cb12 <usb_config_tx_iso+0x1a>
}
    cb0e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    cb12:	mov.w	r8, r0, lsl #7
    cb16:	ldr.w	sl, [pc, #72]	; cb60 <usb_config_tx_iso+0x68>
    cb1a:	mov	r6, r1
	uint32_t config = (packet_size << 16) | (mult << 30);
    cb1c:	lsls	r4, r4, #30
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    cb1e:	add.w	r8, r8, #64	; 0x40
	memset(qh, 0, sizeof(endpoint_t));
    cb22:	movs	r2, #60	; 0x3c
    cb24:	movs	r1, #0
	uint32_t config = (packet_size << 16) | (mult << 30);
    cb26:	orr.w	r4, r4, r6, lsl #16
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    cb2a:	add.w	r9, sl, r8
	memset(qh, 0, sizeof(endpoint_t));
    cb2e:	add.w	r0, r9, #4
    cb32:	bl	10104 <memset>
	qh->next = 1; // Terminate bit = 1
    cb36:	movs	r3, #1
	qh->config = config;
    cb38:	str.w	r4, [sl, r8]
	qh->callback_function = callback;
    cb3c:	str.w	r5, [r9, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    cb40:	str.w	r3, [r9, #8]
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    cb44:	cmp	r5, #0
    cb46:	beq.n	cb0e <usb_config_tx_iso+0x16>
    cb48:	ldr	r2, [pc, #16]	; (cb5c <usb_config_tx_iso+0x64>)
    cb4a:	add.w	r0, r7, #16
    cb4e:	ldr	r1, [r2, #0]
    cb50:	lsls	r3, r0
    cb52:	orrs	r3, r1
    cb54:	str	r3, [r2, #0]
}
    cb56:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    cb5a:	nop
    cb5c:	.word	0x20015830
    cb60:	.word	0x20000000

0000cb64 <usb_prepare_transfer>:
	transfer->status = (len << 16) | (1<<7);
    cb64:	lsls	r2, r2, #16
	transfer->pointer0 = addr;
    cb66:	str	r1, [r0, #8]
	transfer->callback_param = param;
    cb68:	str	r3, [r0, #28]
	transfer->pointer3 = addr + 12288;
    cb6a:	add.w	r3, r1, #12288	; 0x3000
	transfer->status = (len << 16) | (1<<7);
    cb6e:	orr.w	r2, r2, #128	; 0x80
{
    cb72:	push	{r4}
	transfer->next = 1;
    cb74:	movs	r4, #1
	transfer->status = (len << 16) | (1<<7);
    cb76:	str	r2, [r0, #4]
	transfer->pointer2 = addr + 8192;
    cb78:	add.w	r2, r1, #8192	; 0x2000
	transfer->next = 1;
    cb7c:	str	r4, [r0, #0]
	transfer->pointer1 = addr + 4096;
    cb7e:	add.w	r4, r1, #4096	; 0x1000
	transfer->pointer4 = addr + 16384;
    cb82:	add.w	r1, r1, #16384	; 0x4000
	transfer->pointer1 = addr + 4096;
    cb86:	str	r4, [r0, #12]
	transfer->pointer4 = addr + 16384;
    cb88:	str	r1, [r0, #24]
}
    cb8a:	ldr.w	r4, [sp], #4
	transfer->pointer3 = addr + 12288;
    cb8e:	strd	r2, r3, [r0, #16]
}
    cb92:	bx	lr

0000cb94 <usb_transmit>:
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    cb94:	subs	r3, r0, #2
    cb96:	cmp	r3, #4
    cb98:	bls.n	cb9c <usb_transmit+0x8>
    cb9a:	bx	lr
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    cb9c:	ldr	r3, [pc, #160]	; (cc40 <usb_transmit+0xac>)
	uint32_t mask = 1 << (endpoint_number + 16);
    cb9e:	add.w	r2, r0, #16
    cba2:	mov.w	ip, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    cba6:	add.w	r0, r3, r0, lsl #7
	uint32_t mask = 1 << (endpoint_number + 16);
    cbaa:	lsl.w	ip, ip, r2
	if (endpoint->callback_function) {
    cbae:	ldr	r3, [r0, #120]	; 0x78
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    cbb0:	adds	r0, #64	; 0x40
{
    cbb2:	push	{r4, r5, r6}
	if (endpoint->callback_function) {
    cbb4:	cbz	r3, cbbe <usb_transmit+0x2a>
		transfer->status |= (1<<15);
    cbb6:	ldr	r3, [r1, #4]
    cbb8:	orr.w	r3, r3, #32768	; 0x8000
    cbbc:	str	r3, [r1, #4]
	__disable_irq();
    cbbe:	cpsid	i
	transfer_t *last = endpoint->last_transfer;
    cbc0:	ldr	r2, [r0, #52]	; 0x34
	if (last) {
    cbc2:	cbz	r2, cc22 <usb_transmit+0x8e>
		if (USB1_ENDPTPRIME & epmask) goto end;
    cbc4:	ldr	r3, [pc, #124]	; (cc44 <usb_transmit+0xb0>)
		last->next = (uint32_t)transfer;
    cbc6:	str	r1, [r2, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    cbc8:	ldr.w	r2, [r3, #432]	; 0x1b0
    cbcc:	tst.w	ip, r2
    cbd0:	bne.n	cc00 <usb_transmit+0x6c>
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    cbd2:	ldr	r5, [pc, #116]	; (cc48 <usb_transmit+0xb4>)
    cbd4:	ldr	r6, [r5, #4]
    cbd6:	b.n	cbe2 <usb_transmit+0x4e>
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    cbd8:	ldr	r2, [r5, #4]
    cbda:	subs	r2, r2, r6
    cbdc:	cmp.w	r2, #2400	; 0x960
    cbe0:	bcs.n	cbfa <usb_transmit+0x66>
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    cbe2:	ldr.w	r2, [r3, #320]	; 0x140
    cbe6:	orr.w	r2, r2, #16384	; 0x4000
    cbea:	str.w	r2, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    cbee:	ldr.w	r4, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    cbf2:	ldr.w	r2, [r3, #320]	; 0x140
    cbf6:	lsls	r2, r2, #17
    cbf8:	bpl.n	cbd8 <usb_transmit+0x44>
		if (status & epmask) goto end;
    cbfa:	ands.w	r4, ip, r4
    cbfe:	beq.n	cc08 <usb_transmit+0x74>
	endpoint->last_transfer = transfer;
    cc00:	str	r1, [r0, #52]	; 0x34
	__enable_irq();
    cc02:	cpsie	i
	schedule_transfer(endpoint, mask, transfer);
}
    cc04:	pop	{r4, r5, r6}
    cc06:	bx	lr
		USB1_ENDPTPRIME |= epmask;
    cc08:	ldr	r2, [pc, #56]	; (cc44 <usb_transmit+0xb0>)
		endpoint->status = 0;
    cc0a:	strd	r1, r4, [r0, #8]
		USB1_ENDPTPRIME |= epmask;
    cc0e:	ldr.w	r3, [r2, #432]	; 0x1b0
    cc12:	orr.w	r3, ip, r3
    cc16:	str.w	r3, [r2, #432]	; 0x1b0
	endpoint->last_transfer = transfer;
    cc1a:	str	r1, [r0, #52]	; 0x34
	__enable_irq();
    cc1c:	cpsie	i
}
    cc1e:	pop	{r4, r5, r6}
    cc20:	bx	lr
	USB1_ENDPTPRIME |= epmask;
    cc22:	ldr	r4, [pc, #32]	; (cc44 <usb_transmit+0xb0>)
	endpoint->status = 0;
    cc24:	strd	r1, r2, [r0, #8]
	USB1_ENDPTPRIME |= epmask;
    cc28:	ldr.w	r3, [r4, #432]	; 0x1b0
    cc2c:	orr.w	r3, ip, r3
    cc30:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    cc34:	str	r1, [r0, #48]	; 0x30
	endpoint->last_transfer = transfer;
    cc36:	str	r1, [r0, #52]	; 0x34
	__enable_irq();
    cc38:	cpsie	i
}
    cc3a:	pop	{r4, r5, r6}
    cc3c:	bx	lr
    cc3e:	nop
    cc40:	.word	0x20000000
    cc44:	.word	0x402e0000
    cc48:	.word	0xe0001000

0000cc4c <usb_receive>:

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    cc4c:	subs	r3, r0, #2
    cc4e:	cmp	r3, #4
    cc50:	bls.n	cc54 <usb_receive+0x8>
    cc52:	bx	lr
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
    cc54:	ldr	r3, [pc, #160]	; (ccf8 <usb_receive+0xac>)
    cc56:	add.w	ip, r3, r0, lsl #7
{
    cc5a:	push	{r4, r5, lr}
	if (endpoint->callback_function) {
    cc5c:	ldr.w	r3, [ip, #56]	; 0x38
	uint32_t mask = 1 << endpoint_number;
    cc60:	mov.w	lr, #1
    cc64:	lsl.w	lr, lr, r0
	if (endpoint->callback_function) {
    cc68:	cbz	r3, cc72 <usb_receive+0x26>
		transfer->status |= (1<<15);
    cc6a:	ldr	r3, [r1, #4]
    cc6c:	orr.w	r3, r3, #32768	; 0x8000
    cc70:	str	r3, [r1, #4]
	__disable_irq();
    cc72:	cpsid	i
	transfer_t *last = endpoint->last_transfer;
    cc74:	ldr.w	r2, [ip, #52]	; 0x34
	if (last) {
    cc78:	cbz	r2, ccd8 <usb_receive+0x8c>
		if (USB1_ENDPTPRIME & epmask) goto end;
    cc7a:	ldr	r3, [pc, #128]	; (ccfc <usb_receive+0xb0>)
		last->next = (uint32_t)transfer;
    cc7c:	str	r1, [r2, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    cc7e:	ldr.w	r2, [r3, #432]	; 0x1b0
    cc82:	tst.w	lr, r2
    cc86:	bne.n	ccb6 <usb_receive+0x6a>
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    cc88:	ldr	r4, [pc, #116]	; (cd00 <usb_receive+0xb4>)
    cc8a:	ldr	r5, [r4, #4]
    cc8c:	b.n	cc98 <usb_receive+0x4c>
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    cc8e:	ldr	r2, [r4, #4]
    cc90:	subs	r2, r2, r5
    cc92:	cmp.w	r2, #2400	; 0x960
    cc96:	bcs.n	ccb0 <usb_receive+0x64>
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    cc98:	ldr.w	r2, [r3, #320]	; 0x140
    cc9c:	orr.w	r2, r2, #16384	; 0x4000
    cca0:	str.w	r2, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    cca4:	ldr.w	r0, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    cca8:	ldr.w	r2, [r3, #320]	; 0x140
    ccac:	lsls	r2, r2, #17
    ccae:	bpl.n	cc8e <usb_receive+0x42>
		if (status & epmask) goto end;
    ccb0:	ands.w	r0, lr, r0
    ccb4:	beq.n	ccbe <usb_receive+0x72>
	endpoint->last_transfer = transfer;
    ccb6:	str.w	r1, [ip, #52]	; 0x34
	__enable_irq();
    ccba:	cpsie	i
	schedule_transfer(endpoint, mask, transfer);
}
    ccbc:	pop	{r4, r5, pc}
		USB1_ENDPTPRIME |= epmask;
    ccbe:	ldr	r2, [pc, #60]	; (ccfc <usb_receive+0xb0>)
		endpoint->status = 0;
    ccc0:	strd	r1, r0, [ip, #8]
		USB1_ENDPTPRIME |= epmask;
    ccc4:	ldr.w	r3, [r2, #432]	; 0x1b0
    ccc8:	orr.w	r3, lr, r3
    cccc:	str.w	r3, [r2, #432]	; 0x1b0
	endpoint->last_transfer = transfer;
    ccd0:	str.w	r1, [ip, #52]	; 0x34
	__enable_irq();
    ccd4:	cpsie	i
}
    ccd6:	pop	{r4, r5, pc}
	USB1_ENDPTPRIME |= epmask;
    ccd8:	ldr	r0, [pc, #32]	; (ccfc <usb_receive+0xb0>)
	endpoint->status = 0;
    ccda:	strd	r1, r2, [ip, #8]
	USB1_ENDPTPRIME |= epmask;
    ccde:	ldr.w	r3, [r0, #432]	; 0x1b0
    cce2:	orr.w	r3, lr, r3
    cce6:	str.w	r3, [r0, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    ccea:	str.w	r1, [ip, #48]	; 0x30
	endpoint->last_transfer = transfer;
    ccee:	str.w	r1, [ip, #52]	; 0x34
	__enable_irq();
    ccf2:	cpsie	i
}
    ccf4:	pop	{r4, r5, pc}
    ccf6:	nop
    ccf8:	.word	0x20000000
    ccfc:	.word	0x402e0000
    cd00:	.word	0xe0001000

0000cd04 <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
    cd04:	ldr	r0, [r0, #4]
#endif
}
    cd06:	bx	lr

0000cd08 <delay>:
// or delayNanoseconds().
void delay(uint32_t msec)
{
	uint32_t start;

	if (msec == 0) return;
    cd08:	cmp	r0, #0
    cd0a:	beq.n	cd9a <delay+0x92>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    cd0c:	movs	r1, #1
{
    cd0e:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cd12:	mov	r9, r0
    cd14:	ldr	r4, [pc, #132]	; (cd9c <delay+0x94>)
    cd16:	ldr	r5, [pc, #136]	; (cda0 <delay+0x98>)
    cd18:	ldr	r6, [pc, #136]	; (cda4 <delay+0x9c>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    cd1a:	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    cd1e:	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    cd20:	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    cd22:	strex	r3, r1, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    cd26:	cmp	r3, #0
    cd28:	bne.n	cd1a <delay+0x12>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    cd2a:	ldr	r1, [pc, #124]	; (cda8 <delay+0xa0>)
    cd2c:	ldr	r3, [r1, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    cd2e:	mov.w	fp, #1000	; 0x3e8
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    cd32:	ldr.w	sl, [pc, #120]	; cdac <delay+0xa4>
	uint32_t ccdelta = cyccnt - scc;
    cd36:	subs	r3, r3, r0
    cd38:	movs	r7, #1
	uint32_t usec = 1000*smc + frac;
    cd3a:	mul.w	r8, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    cd3e:	ldr.w	r2, [sl]
    cd42:	umull	r3, r2, r3, r2
	uint32_t usec = 1000*smc + frac;
    cd46:	cmp	r2, fp
    cd48:	ite	ls
    cd4a:	addls	r8, r2
    cd4c:	addhi	r8, fp
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    cd4e:	ldrex	r3, [r4]
		smc = systick_millis_count;
    cd52:	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    cd54:	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    cd56:	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    cd5a:	cmp	r3, #0
    cd5c:	bne.n	cd4e <delay+0x46>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    cd5e:	ldr	r3, [r1, #4]
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    cd60:	ldr.w	ip, [sl]
	uint32_t ccdelta = cyccnt - scc;
    cd64:	subs	r3, r3, r0
	uint32_t usec = 1000*smc + frac;
    cd66:	mul.w	r2, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    cd6a:	umull	r3, ip, r3, ip
	uint32_t usec = 1000*smc + frac;
    cd6e:	cmp.w	ip, #1000	; 0x3e8
    cd72:	ite	ls
    cd74:	addls	r2, ip
    cd76:	addhi.w	r2, r2, #1000	; 0x3e8
		while ((micros() - start) >= 1000) {
    cd7a:	sub.w	r2, r2, r8
    cd7e:	cmp.w	r2, #1000	; 0x3e8
    cd82:	bcc.n	cd92 <delay+0x8a>
			if (--msec == 0) return;
    cd84:	subs.w	r9, r9, #1
			start += 1000;
    cd88:	add.w	r8, r8, #1000	; 0x3e8
			if (--msec == 0) return;
    cd8c:	bne.n	cd4e <delay+0x46>
}
    cd8e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		yield();
    cd92:	bl	daa4 <yield>
		while ((micros() - start) >= 1000) {
    cd96:	ldr	r1, [pc, #16]	; (cda8 <delay+0xa0>)
    cd98:	b.n	cd4e <delay+0x46>
    cd9a:	bx	lr
    cd9c:	.word	0x20015990
    cda0:	.word	0x2001598c
    cda4:	.word	0x20015988
    cda8:	.word	0xe0001000
    cdac:	.word	0x20015984

0000cdb0 <micros>:
{
    cdb0:	push	{r4, r5}
    cdb2:	ldr	r3, [pc, #60]	; (cdf0 <micros+0x40>)
    cdb4:	mov.w	ip, #1
    cdb8:	ldr	r5, [pc, #56]	; (cdf4 <micros+0x44>)
    cdba:	ldr	r4, [pc, #60]	; (cdf8 <micros+0x48>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    cdbc:	ldrex	r2, [r3]
		smc = systick_millis_count;
    cdc0:	ldr	r0, [r5, #0]
		scc = systick_cycle_count;
    cdc2:	ldr	r1, [r4, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    cdc4:	strex	r2, ip, [r3]
	} while ( __STREXW(1, &systick_safe_read));
    cdc8:	cmp	r2, #0
    cdca:	bne.n	cdbc <micros+0xc>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    cdcc:	ldr	r3, [pc, #44]	; (cdfc <micros+0x4c>)
    cdce:	ldr	r3, [r3, #4]
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    cdd0:	ldr	r2, [pc, #44]	; (ce00 <micros+0x50>)
	uint32_t ccdelta = cyccnt - scc;
    cdd2:	subs	r3, r3, r1
	uint32_t usec = 1000*smc + frac;
    cdd4:	mov.w	r1, #1000	; 0x3e8
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    cdd8:	ldr	r2, [r2, #0]
	uint32_t usec = 1000*smc + frac;
    cdda:	mul.w	r0, r1, r0
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    cdde:	umull	r3, r2, r3, r2
	return usec;
}
    cde2:	pop	{r4, r5}
    cde4:	cmp	r2, r1
    cde6:	ite	ls
    cde8:	addls	r0, r0, r2
    cdea:	addhi	r0, r0, r1
    cdec:	bx	lr
    cdee:	nop
    cdf0:	.word	0x20015990
    cdf4:	.word	0x2001598c
    cdf8:	.word	0x20015988
    cdfc:	.word	0xe0001000
    ce00:	.word	0x20015984

0000ce04 <unused_interrupt_vector>:
	__disable_irq();
    ce04:	cpsid	i
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
    ce06:	mrs	r3, IPSR
	info->ipsr = ipsr;
    ce0a:	ldr	r4, [pc, #312]	; (cf44 <unused_interrupt_vector+0x140>)
    ce0c:	str.w	r3, [r4, #132]	; 0x84
	asm volatile("mrs %0, msp\n" : "=r" (stack) :: "memory");
    ce10:	mrs	r2, MSP
	info->cfsr = SCB_CFSR;
    ce14:	mov.w	r3, #3758153728	; 0xe000e000
	p = (uint32_t *)info;
    ce18:	ldr	r5, [pc, #300]	; (cf48 <unused_interrupt_vector+0x144>)
	info->cfsr = SCB_CFSR;
    ce1a:	ldr.w	r0, [r3, #3368]	; 0xd28
	info->hfsr = SCB_HFSR;
    ce1e:	ldr.w	r1, [r3, #3372]	; 0xd2c
    ce22:	strd	r0, r1, [r4, #136]	; 0x88
	info->mmfar = SCB_MMFAR;
    ce26:	ldr.w	r1, [r3, #3380]	; 0xd34
	info->bfar = SCB_BFAR;
    ce2a:	ldr.w	r3, [r3, #3384]	; 0xd38
    ce2e:	strd	r1, r3, [r4, #144]	; 0x90
	info->ret = stack[6];
    ce32:	ldr	r3, [r2, #24]
    ce34:	str.w	r3, [r4, #152]	; 0x98
	info->xpsr = stack[7];
    ce38:	ldr	r3, [r2, #28]
    ce3a:	str.w	r3, [r4, #156]	; 0x9c
	info->temp = tempmonGetTemp();
    ce3e:	bl	d0a4 <tempmonGetTemp>
    ce42:	vstr	s0, [r4, #160]	; 0xa0
	info->time = rtc_get();
    ce46:	bl	cfe0 <rtc_get>
	info->len = sizeof(*info) / 4;
    ce4a:	movs	r3, #11
	info->time = rtc_get();
    ce4c:	str.w	r0, [r4, #164]	; 0xa4
	crc = 0xFFFFFFFF;
    ce50:	mov.w	r2, #4294967295
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    ce54:	ldr	r1, [pc, #244]	; (cf4c <unused_interrupt_vector+0x148>)
	while (p < end) {
    ce56:	ldr	r0, [pc, #248]	; (cf50 <unused_interrupt_vector+0x14c>)
	info->len = sizeof(*info) / 4;
    ce58:	str.w	r3, [r4, #128]	; 0x80
		crc ^= *p++;
    ce5c:	ldr	r3, [r5, #0]
    ce5e:	movs	r4, #32
    ce60:	adds	r5, #4
    ce62:	eors	r2, r3
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    ce64:	and.w	r3, r2, #1
    ce68:	subs	r4, #1
    ce6a:	mul.w	r3, r1, r3
    ce6e:	eor.w	r2, r3, r2, lsr #1
    ce72:	bne.n	ce64 <unused_interrupt_vector+0x60>
	while (p < end) {
    ce74:	cmp	r5, r0
    ce76:	bne.n	ce5c <unused_interrupt_vector+0x58>
	info->crc = crc;
    ce78:	ldr	r3, [pc, #200]	; (cf44 <unused_interrupt_vector+0x140>)
    ce7a:	str.w	r2, [r3, #168]	; 0xa8
	asm("dsb");
    ce7e:	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    ce82:	mov.w	r3, #3758153728	; 0xe000e000
    ce86:	ldr	r1, [pc, #192]	; (cf48 <unused_interrupt_vector+0x144>)
    ce88:	ldr	r2, [pc, #200]	; (cf54 <unused_interrupt_vector+0x150>)
    ce8a:	str.w	r1, [r3, #3952]	; 0xf70
    ce8e:	str.w	r2, [r3, #3952]	; 0xf70
	asm("dsb");
    ce92:	dsb	sy
	asm("isb");
    ce96:	isb	sy
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    ce9a:	ldr	r2, [pc, #188]	; (cf58 <unused_interrupt_vector+0x154>)
	PIT_MCR = PIT_MCR_MDIS;
    ce9c:	movs	r5, #2
    ce9e:	ldr	r0, [pc, #188]	; (cf5c <unused_interrupt_vector+0x158>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    cea0:	ldr	r3, [r2, #108]	; 0x6c
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    cea2:	ldr	r1, [pc, #188]	; (cf60 <unused_interrupt_vector+0x15c>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    cea4:	orr.w	r3, r3, #12288	; 0x3000
    cea8:	str	r3, [r2, #108]	; 0x6c
	PIT_MCR = PIT_MCR_MDIS;
    ceaa:	str	r5, [r0, #0]
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    ceac:	ldr	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    ceae:	ldr	r0, [pc, #180]	; (cf64 <unused_interrupt_vector+0x160>)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    ceb0:	bic.w	r3, r3, #127	; 0x7f
    ceb4:	orr.w	r3, r3, #64	; 0x40
    ceb8:	str	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    ceba:	ldr	r3, [r1, #0]
    cebc:	cmp	r3, r0
    cebe:	bhi.n	cf3c <unused_interrupt_vector+0x138>
	PIT_MCR = 0;
    cec0:	ldr	r5, [pc, #152]	; (cf5c <unused_interrupt_vector+0x158>)
    cec2:	movs	r1, #0
	NVIC_ICER0 = 0xFFFFFFFF;
    cec4:	mov.w	r3, #3758153728	; 0xe000e000
    cec8:	mov.w	r2, #4294967295
	PIT_MCR = 0;
    cecc:	str	r1, [r5, #0]
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    cece:	movs	r6, #1
	PIT_TCTRL0 = 0;
    ced0:	str.w	r1, [r5, #264]	; 0x108
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
    ced4:	ldr	r1, [pc, #144]	; (cf68 <unused_interrupt_vector+0x164>)
    ced6:	str.w	r1, [r5, #256]	; 0x100
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    ceda:	str.w	r6, [r5, #264]	; 0x108
	NVIC_ICER0 = 0xFFFFFFFF;
    cede:	str.w	r2, [r3, #384]	; 0x180
	NVIC_ICER1 = 0xFFFFFFFF;
    cee2:	str.w	r2, [r3, #388]	; 0x184
	NVIC_ICER2 = 0xFFFFFFFF;
    cee6:	str.w	r2, [r3, #392]	; 0x188
	NVIC_ICER3 = 0xFFFFFFFF;
    ceea:	str.w	r2, [r3, #396]	; 0x18c
	NVIC_ICER4 = 0xFFFFFFFF;
    ceee:	str.w	r2, [r3, #400]	; 0x190
	count = 0;
    cef2:	b.n	cef8 <unused_interrupt_vector+0xf4>
		usb_isr();
    cef4:	bl	bd50 <usb_isr>
		if (PIT_TFLG0) {
    cef8:	ldr.w	r3, [r5, #268]	; 0x10c
    cefc:	cmp	r3, #0
    cefe:	beq.n	cef4 <unused_interrupt_vector+0xf0>
			if (++count >= 80) break;  // reboot after 8 seconds
    cf00:	adds	r4, #1
			PIT_TFLG0 = 1;
    cf02:	str.w	r6, [r5, #268]	; 0x10c
			if (++count >= 80) break;  // reboot after 8 seconds
    cf06:	cmp	r4, #79	; 0x4f
    cf08:	bls.n	cef4 <unused_interrupt_vector+0xf0>
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    cf0a:	ldr	r3, [pc, #96]	; (cf6c <unused_interrupt_vector+0x168>)
	USB1_USBCMD = USB_USBCMD_RST;
    cf0c:	movs	r0, #2
    cf0e:	ldr	r1, [pc, #96]	; (cf70 <unused_interrupt_vector+0x16c>)
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    cf10:	mov.w	r2, #2147483648	; 0x80000000
	USB1_USBCMD = USB_USBCMD_RST;
    cf14:	str.w	r0, [r1, #320]	; 0x140
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    cf18:	str	r2, [r3, #52]	; 0x34
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    cf1a:	ldr.w	r3, [r5, #268]	; 0x10c
    cf1e:	cbnz	r3, cf30 <unused_interrupt_vector+0x12c>
	SRC_GPR5 = 0x0BAD00F1;
    cf20:	ldr	r0, [pc, #80]	; (cf74 <unused_interrupt_vector+0x170>)
    cf22:	ldr	r1, [pc, #84]	; (cf78 <unused_interrupt_vector+0x174>)
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    cf24:	ldr	r2, [pc, #52]	; (cf5c <unused_interrupt_vector+0x158>)
	SRC_GPR5 = 0x0BAD00F1;
    cf26:	str	r1, [r0, #48]	; 0x30
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    cf28:	ldr.w	r3, [r2, #268]	; 0x10c
    cf2c:	cmp	r3, #0
    cf2e:	beq.n	cf26 <unused_interrupt_vector+0x122>
	SCB_AIRCR = 0x05FA0004;
    cf30:	mov.w	r3, #3758153728	; 0xe000e000
    cf34:	ldr	r2, [pc, #68]	; (cf7c <unused_interrupt_vector+0x178>)
    cf36:	str.w	r2, [r3, #3340]	; 0xd0c
	while (1) ;
    cf3a:	b.n	cf3a <unused_interrupt_vector+0x136>
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    cf3c:	bl	ba60 <set_arm_clock>
    cf40:	b.n	cec0 <unused_interrupt_vector+0xbc>
    cf42:	nop
    cf44:	.word	0x2027ff00
    cf48:	.word	0x2027ff80
    cf4c:	.word	0xedb88320
    cf50:	.word	0x2027ffa8
    cf54:	.word	0x2027ffa0
    cf58:	.word	0x400fc000
    cf5c:	.word	0x40084000
    cf60:	.word	0x20001c10
    cf64:	.word	0x0bcd3d80
    cf68:	.word	0x00249f00
    cf6c:	.word	0x400d9000
    cf70:	.word	0x402e0000
    cf74:	.word	0x400f8000
    cf78:	.word	0x0bad00f1
    cf7c:	.word	0x05fa0004

0000cf80 <_sbrk>:

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
        char *prev = __brkval;
    cf80:	ldr	r1, [pc, #40]	; (cfac <_sbrk+0x2c>)
    cf82:	ldr	r2, [r1, #0]
        if (incr != 0) {
    cf84:	cbz	r0, cf96 <_sbrk+0x16>
{
    cf86:	push	{r3, lr}
                if (prev + incr > (char *)&_heap_end) {
    cf88:	adds	r3, r2, r0
    cf8a:	ldr	r0, [pc, #36]	; (cfb0 <_sbrk+0x30>)
    cf8c:	cmp	r3, r0
    cf8e:	bhi.n	cf9a <_sbrk+0x1a>
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
    cf90:	mov	r0, r2
                __brkval = prev + incr;
    cf92:	str	r3, [r1, #0]
}
    cf94:	pop	{r3, pc}
    cf96:	mov	r0, r2
    cf98:	bx	lr
                        errno = ENOMEM;
    cf9a:	bl	10370 <__errno>
    cf9e:	movs	r3, #12
                        return (void *)-1;
    cfa0:	mov.w	r2, #4294967295
                        errno = ENOMEM;
    cfa4:	str	r3, [r0, #0]
}
    cfa6:	mov	r0, r2
    cfa8:	pop	{r3, pc}
    cfaa:	nop
    cfac:	.word	0x20001c40
    cfb0:	.word	0x20280000

0000cfb4 <_read>:

__attribute__((weak))
int _read(int file, char *ptr, int len)
{
	return 0;
}
    cfb4:	movs	r0, #0
    cfb6:	bx	lr

0000cfb8 <_close>:

__attribute__((weak))
int _close(int fd)
{
	return -1;
}
    cfb8:	mov.w	r0, #4294967295
    cfbc:	bx	lr
    cfbe:	nop

0000cfc0 <_fstat>:
#include <sys/stat.h>

__attribute__((weak))
int _fstat(int fd, struct stat *st)
{
	st->st_mode = S_IFCHR;
    cfc0:	mov.w	r3, #8192	; 0x2000
	return 0;
}
    cfc4:	movs	r0, #0
	st->st_mode = S_IFCHR;
    cfc6:	str	r3, [r1, #4]
}
    cfc8:	bx	lr
    cfca:	nop

0000cfcc <_isatty>:

__attribute__((weak))
int _isatty(int fd)
{
	return 1;
}
    cfcc:	movs	r0, #1
    cfce:	bx	lr

0000cfd0 <_lseek>:

__attribute__((weak))
int _lseek(int fd, long long offset, int whence)
{
	return -1;
}
    cfd0:	mov.w	r0, #4294967295
    cfd4:	bx	lr
    cfd6:	nop

0000cfd8 <__cxa_pure_virtual>:
}

__attribute__((weak))
void __cxa_pure_virtual()
{
	while (1) asm ("WFI");
    cfd8:	wfi
    cfda:	b.n	cfd8 <__cxa_pure_virtual>

0000cfdc <abort>:
}

__attribute__((weak))
void abort(void)
{
	while (1) asm ("WFI");
    cfdc:	wfi
    cfde:	b.n	cfdc <abort>

0000cfe0 <rtc_get>:
	uint32_t hi1 = SNVS_HPRTCMR;
    cfe0:	ldr	r2, [pc, #28]	; (d000 <rtc_get+0x20>)
    cfe2:	ldr	r0, [r2, #36]	; 0x24
	uint32_t lo1 = SNVS_HPRTCLR;
    cfe4:	ldr	r3, [r2, #40]	; 0x28
		uint32_t hi2 = SNVS_HPRTCMR;
    cfe6:	mov	r1, r3
    cfe8:	mov	ip, r0
    cfea:	ldr	r0, [r2, #36]	; 0x24
		uint32_t lo2 = SNVS_HPRTCLR;
    cfec:	ldr	r3, [r2, #40]	; 0x28
		if (lo1 == lo2 && hi1 == hi2) {
    cfee:	cmp	r1, r3
    cff0:	bne.n	cfe6 <rtc_get+0x6>
    cff2:	cmp	ip, r0
    cff4:	bne.n	cfe6 <rtc_get+0x6>
			return (hi2 << 17) | (lo2 >> 15);
    cff6:	lsrs	r3, r3, #15
}
    cff8:	orr.w	r0, r3, r0, lsl #17
    cffc:	bx	lr
    cffe:	nop
    d000:	.word	0x400d4000

0000d004 <sm_set_pool>:

	return 1;
}

int sm_set_pool(struct smalloc_pool *spool, void *new_pool, size_t new_pool_size, int do_zero, smalloc_oom_handler oom_handler)
{
    d004:	push	{r4, r5, r6, lr}
	if (!spool) {
    d006:	mov	r4, r0
    d008:	cbz	r0, d05e <sm_set_pool+0x5a>
		errno = EINVAL;
		return 0;
	}

	if (!new_pool || !new_pool_size) {
    d00a:	mov	r5, r1
    d00c:	cbz	r1, d016 <sm_set_pool+0x12>
    d00e:	clz	r6, r2
    d012:	lsrs	r6, r6, #5
    d014:	cbnz	r2, d03e <sm_set_pool+0x3a>
	if (!spool->pool || !spool->pool_size) return 0;
    d016:	ldr	r0, [r4, #0]
    d018:	cbz	r0, d05e <sm_set_pool+0x5a>
    d01a:	ldr	r2, [r4, #4]
    d01c:	cbz	r2, d05e <sm_set_pool+0x5a>
	if (spool->pool_size % HEADER_SZ) return 0;
    d01e:	ldr	r3, [pc, #120]	; (d098 <sm_set_pool+0x94>)
    d020:	ldr	r1, [pc, #120]	; (d09c <sm_set_pool+0x98>)
    d022:	mul.w	r3, r2, r3
    d026:	cmp.w	r1, r3, ror #2
    d02a:	bcc.n	d05e <sm_set_pool+0x5a>
		if (smalloc_verify_pool(spool)) {
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    d02c:	ldr	r3, [r4, #8]
    d02e:	cbnz	r3, d082 <sm_set_pool+0x7e>
			memset(spool, 0, sizeof(struct smalloc_pool));
    d030:	movs	r3, #0
			return 1;
    d032:	movs	r0, #1
			memset(spool, 0, sizeof(struct smalloc_pool));
    d034:	str	r3, [r4, #0]
    d036:	str	r3, [r4, #4]
    d038:	str	r3, [r4, #8]
    d03a:	str	r3, [r4, #12]
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
}
    d03c:	pop	{r4, r5, r6, pc}
	spool->pool_size = new_pool_size;
    d03e:	strd	r1, r2, [r0]
	spool->oomfn = oom_handler;
    d042:	ldr	r1, [sp, #16]
    d044:	str	r1, [r0, #12]
	if (spool->pool_size % HEADER_SZ) return 0;
    d046:	ldr	r1, [pc, #80]	; (d098 <sm_set_pool+0x94>)
    d048:	umull	r0, r1, r1, r2
    d04c:	lsrs	r1, r1, #3
    d04e:	add.w	r1, r1, r1, lsl #1
    d052:	subs.w	r1, r2, r1, lsl #2
    d056:	bne.n	d06c <sm_set_pool+0x68>
	if (do_zero) {
    d058:	cbnz	r3, d08a <sm_set_pool+0x86>
	return 1;
    d05a:	movs	r0, #1
}
    d05c:	pop	{r4, r5, r6, pc}
		errno = EINVAL;
    d05e:	bl	10370 <__errno>
    d062:	movs	r2, #22
    d064:	mov	r3, r0
		return 0;
    d066:	movs	r0, #0
		errno = EINVAL;
    d068:	str	r2, [r3, #0]
}
    d06a:	pop	{r4, r5, r6, pc}
	if (x) spool->pool_size -= x;
    d06c:	subs	r2, r2, r1
	if (spool->pool_size <= MIN_POOL_SZ) {
    d06e:	cmp	r2, #240	; 0xf0
	if (x) spool->pool_size -= x;
    d070:	str	r2, [r4, #4]
	if (spool->pool_size <= MIN_POOL_SZ) {
    d072:	bhi.n	d058 <sm_set_pool+0x54>
		errno = ENOSPC;
    d074:	bl	10370 <__errno>
    d078:	movs	r2, #28
    d07a:	mov	r3, r0
	if (!sm_align_pool(spool)) return 0;
    d07c:	mov	r0, r6
		errno = ENOSPC;
    d07e:	str	r2, [r3, #0]
}
    d080:	pop	{r4, r5, r6, pc}
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    d082:	movs	r1, #0
    d084:	bl	10104 <memset>
    d088:	b.n	d030 <sm_set_pool+0x2c>
		memset(spool->pool, 0, spool->pool_size);
    d08a:	movs	r1, #0
    d08c:	mov	r0, r5
		spool->do_zero = do_zero;
    d08e:	str	r3, [r4, #8]
		memset(spool->pool, 0, spool->pool_size);
    d090:	bl	10104 <memset>
	return 1;
    d094:	movs	r0, #1
}
    d096:	pop	{r4, r5, r6, pc}
    d098:	.word	0xaaaaaaab
    d09c:	.word	0x15555555

0000d0a0 <Panic_Temp_isr>:
  unused_interrupt_vector();
    d0a0:	b.w	ce04 <unused_interrupt_vector>

0000d0a4 <tempmonGetTemp>:
float tempmonGetTemp(void)
{
    uint32_t nmeas;
    float tmeas;

    while (!(TEMPMON_TEMPSENSE0 & 0x4U))
    d0a4:	ldr	r2, [pc, #72]	; (d0f0 <tempmonGetTemp+0x4c>)
    d0a6:	ldr.w	r3, [r2, #128]	; 0x80
    d0aa:	lsls	r3, r3, #29
    d0ac:	bpl.n	d0a6 <tempmonGetTemp+0x2>
    {
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    d0ae:	ldr.w	r3, [r2, #128]	; 0x80
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    d0b2:	ldr	r0, [pc, #64]	; (d0f4 <tempmonGetTemp+0x50>)
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    d0b4:	ubfx	r3, r3, #8, #12
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    d0b8:	ldr	r1, [pc, #60]	; (d0f8 <tempmonGetTemp+0x54>)
    d0ba:	vldr	s14, [r0]
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    d0be:	vmov	s15, r3
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    d0c2:	vldr	s12, [r1]
    d0c6:	vcvt.f32.u32	s14, s14
    d0ca:	ldr	r2, [pc, #48]	; (d0fc <tempmonGetTemp+0x58>)
    d0cc:	vcvt.f32.s32	s15, s15
    d0d0:	ldr	r3, [pc, #44]	; (d100 <tempmonGetTemp+0x5c>)
    d0d2:	vldr	s13, [r2]
    d0d6:	vsub.f32	s15, s15, s14
    d0da:	vldr	s14, [r3]
    d0de:	vcvt.f32.u32	s14, s14
    d0e2:	vmul.f32	s15, s15, s12
    d0e6:	vdiv.f32	s0, s15, s13

    return tmeas;
}
    d0ea:	vsub.f32	s0, s14, s0
    d0ee:	bx	lr
    d0f0:	.word	0x400d8100
    d0f4:	.word	0x20015974
    d0f8:	.word	0x2001597c
    d0fc:	.word	0x20015980
    d100:	.word	0x20015978

0000d104 <digitalWrite>:
void digitalWrite(uint8_t pin, uint8_t val)
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
    d104:	cmp	r0, #54	; 0x36
    d106:	bhi.n	d136 <digitalWrite+0x32>
	p = digital_pin_to_info_PGM + pin;
    d108:	lsls	r2, r0, #4
    d10a:	ldr	r3, [pc, #64]	; (d14c <digitalWrite+0x48>)
    d10c:	add.w	r0, r3, r0, lsl #4
	pinmode = *(p->reg + 1);
    d110:	ldr	r3, [r3, r2]
{
    d112:	push	{r4}
	mask = p->mask;
    d114:	ldr	r2, [r0, #12]
	pinmode = *(p->reg + 1);
    d116:	ldr	r4, [r3, #4]
	if (pinmode & mask) {
    d118:	tst	r4, r2
    d11a:	beq.n	d128 <digitalWrite+0x24>
		// pin is configured for output mode
		if (val) {
    d11c:	cbnz	r1, d138 <digitalWrite+0x34>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
    d11e:	ldr.w	r4, [sp], #4
			*(p->reg + 0x22) = mask; // clear register
    d122:	str.w	r2, [r3, #136]	; 0x88
}
    d126:	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    d128:	ldr	r3, [r0, #8]
		if (val) {
    d12a:	cbz	r1, d142 <digitalWrite+0x3e>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    d12c:	ldr	r2, [pc, #32]	; (d150 <digitalWrite+0x4c>)
}
    d12e:	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    d132:	str	r2, [r3, #0]
}
    d134:	bx	lr
    d136:	bx	lr
    d138:	ldr.w	r4, [sp], #4
			*(p->reg + 0x21) = mask; // set register
    d13c:	str.w	r2, [r3, #132]	; 0x84
}
    d140:	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    d142:	ldr	r2, [pc, #16]	; (d154 <digitalWrite+0x50>)
}
    d144:	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    d148:	str	r2, [r3, #0]
}
    d14a:	bx	lr
    d14c:	.word	0x20000da4
    d150:	.word	0x0001f038
    d154:	.word	0x00013038

0000d158 <digitalRead>:

uint8_t digitalRead(uint8_t pin)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return 0;
    d158:	cmp	r0, #54	; 0x36
    d15a:	bhi.n	d174 <digitalRead+0x1c>
	p = digital_pin_to_info_PGM + pin;
    d15c:	ldr	r3, [pc, #24]	; (d178 <digitalRead+0x20>)
    d15e:	lsls	r2, r0, #4
    d160:	add.w	r0, r3, r0, lsl #4
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
    d164:	ldr	r2, [r3, r2]
    d166:	ldr	r3, [r0, #12]
    d168:	ldr	r2, [r2, #8]
    d16a:	tst	r2, r3
    d16c:	ite	ne
    d16e:	movne	r0, #1
    d170:	moveq	r0, #0
    d172:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return 0;
    d174:	movs	r0, #0
}
    d176:	bx	lr
    d178:	.word	0x20000da4

0000d17c <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    d17c:	cmp	r0, #54	; 0x36
    d17e:	bhi.n	d1d4 <pinMode+0x58>
	p = digital_pin_to_info_PGM + pin;
    d180:	ldr	r3, [pc, #88]	; (d1dc <pinMode+0x60>)
    d182:	lsls	r2, r0, #4
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    d184:	cmp	r1, #1
	p = digital_pin_to_info_PGM + pin;
    d186:	add.w	r0, r3, r0, lsl #4
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    d18a:	ldr	r2, [r3, r2]
{
    d18c:	push	{r4}
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    d18e:	ldr	r3, [r2, #4]
    d190:	ldr	r4, [r0, #12]
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    d192:	beq.n	d1b2 <pinMode+0x36>
    d194:	cmp	r1, #4
    d196:	beq.n	d1b2 <pinMode+0x36>
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    d198:	bic.w	r3, r3, r4
    d19c:	str	r3, [r2, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    d19e:	ldr	r3, [r0, #8]
		if (mode == INPUT) {
    d1a0:	cbz	r1, d1ce <pinMode+0x52>
		} else if (mode == INPUT_PULLUP) {
    d1a2:	cmp	r1, #2
    d1a4:	beq.n	d1d6 <pinMode+0x5a>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
    d1a6:	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    d1a8:	ite	eq
    d1aa:	ldreq	r2, [pc, #52]	; (d1e0 <pinMode+0x64>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    d1ac:	ldrne	r2, [pc, #52]	; (d1e4 <pinMode+0x68>)
    d1ae:	str	r2, [r3, #0]
    d1b0:	b.n	d1c2 <pinMode+0x46>
		*(p->reg + 1) |= p->mask; // TODO: atomic
    d1b2:	orrs	r3, r4
		if (mode == OUTPUT) {
    d1b4:	cmp	r1, #1
		*(p->reg + 1) |= p->mask; // TODO: atomic
    d1b6:	str	r3, [r2, #4]
			*(p->pad) = IOMUXC_PAD_DSE(7);
    d1b8:	ldr	r3, [r0, #8]
		if (mode == OUTPUT) {
    d1ba:	beq.n	d1ce <pinMode+0x52>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    d1bc:	movw	r2, #2104	; 0x838
    d1c0:	str	r2, [r3, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    d1c2:	ldr	r3, [r0, #4]
    d1c4:	movs	r2, #21
}
    d1c6:	ldr.w	r4, [sp], #4
	*(p->mux) = 5 | 0x10;
    d1ca:	str	r2, [r3, #0]
}
    d1cc:	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7);
    d1ce:	movs	r2, #56	; 0x38
    d1d0:	str	r2, [r3, #0]
    d1d2:	b.n	d1c2 <pinMode+0x46>
    d1d4:	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    d1d6:	ldr	r2, [pc, #16]	; (d1e8 <pinMode+0x6c>)
    d1d8:	str	r2, [r3, #0]
    d1da:	b.n	d1c2 <pinMode+0x46>
    d1dc:	.word	0x20000da4
    d1e0:	.word	0x00013038
    d1e4:	.word	0x00010038
    d1e8:	.word	0x0001f038

0000d1ec <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    d1ec:	ldr	r1, [pc, #900]	; (d574 <pwm_init+0x388>)
	p->FFILT0 = 0;
    d1ee:	movs	r3, #0
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    d1f0:	ldr	r0, [pc, #900]	; (d578 <pwm_init+0x38c>)
	p->FSTS0 = 0x000F; // clear fault status
    d1f2:	mov.w	ip, #15
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    d1f6:	ldr	r2, [pc, #900]	; (d57c <pwm_init+0x390>)
{
    d1f8:	push	{r4, r5, lr}
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    d1fa:	ldr	r4, [r1, #120]	; 0x78
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    d1fc:	mov.w	r5, #61440	; 0xf000
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    d200:	mov.w	lr, #57344	; 0xe000
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    d204:	orr.w	r4, r4, #16711680	; 0xff0000
    d208:	str	r4, [r1, #120]	; 0x78
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    d20a:	ldr.w	r4, [r1, #128]	; 0x80
    d20e:	orrs	r0, r4
    d210:	str.w	r0, [r1, #128]	; 0x80
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    d214:	mov.w	r0, #1024	; 0x400
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    d218:	strh.w	r5, [r2, #396]	; 0x18c
	p->FSTS0 = 0x000F; // clear fault status
    d21c:	strh.w	ip, [r2, #398]	; 0x18e
	p->FFILT0 = 0;
    d220:	strh.w	r3, [r2, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    d224:	ldrh.w	r1, [r2, #392]	; 0x188
    d228:	uxth	r1, r1
    d22a:	orr.w	r1, r1, #240	; 0xf0
    d22e:	strh.w	r1, [r2, #392]	; 0x188
		p->SM[i].VAL1 = 33464;
    d232:	movw	r1, #33464	; 0x82b8
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    d236:	strh.w	lr, [r2, #4]
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    d23a:	strh	r0, [r2, #6]
		p->SM[i].OCTRL = 0;
    d23c:	strh	r3, [r2, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    d23e:	strh	r3, [r2, #48]	; 0x30
		p->SM[i].INIT = 0;
    d240:	strh	r3, [r2, #2]
		p->SM[i].VAL0 = 0;
    d242:	strh	r3, [r2, #10]
		p->SM[i].VAL1 = 33464;
    d244:	strh	r1, [r2, #14]
		p->SM[i].VAL2 = 0;
    d246:	strh	r3, [r2, #18]
		p->SM[i].VAL3 = 0;
    d248:	strh	r3, [r2, #22]
		p->SM[i].VAL4 = 0;
    d24a:	strh	r3, [r2, #26]
		p->SM[i].VAL5 = 0;
    d24c:	strh	r3, [r2, #30]
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    d24e:	strh.w	lr, [r2, #100]	; 0x64
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    d252:	strh.w	r0, [r2, #102]	; 0x66
		p->SM[i].OCTRL = 0;
    d256:	strh.w	r3, [r2, #130]	; 0x82
		p->SM[i].DTCNT0 = 0;
    d25a:	strh.w	r3, [r2, #144]	; 0x90
		p->SM[i].INIT = 0;
    d25e:	strh.w	r3, [r2, #98]	; 0x62
		p->SM[i].VAL0 = 0;
    d262:	strh.w	r3, [r2, #106]	; 0x6a
		p->SM[i].VAL1 = 33464;
    d266:	strh.w	r1, [r2, #110]	; 0x6e
		p->SM[i].VAL2 = 0;
    d26a:	strh.w	r3, [r2, #114]	; 0x72
		p->SM[i].VAL3 = 0;
    d26e:	strh.w	r3, [r2, #118]	; 0x76
		p->SM[i].VAL4 = 0;
    d272:	strh.w	r3, [r2, #122]	; 0x7a
		p->SM[i].VAL5 = 0;
    d276:	strh.w	r3, [r2, #126]	; 0x7e
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    d27a:	strh.w	lr, [r2, #196]	; 0xc4
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    d27e:	strh.w	r0, [r2, #198]	; 0xc6
		p->SM[i].OCTRL = 0;
    d282:	strh.w	r3, [r2, #226]	; 0xe2
		p->SM[i].DTCNT0 = 0;
    d286:	strh.w	r3, [r2, #240]	; 0xf0
		p->SM[i].INIT = 0;
    d28a:	strh.w	r3, [r2, #194]	; 0xc2
		p->SM[i].VAL0 = 0;
    d28e:	strh.w	r3, [r2, #202]	; 0xca
		p->SM[i].VAL1 = 33464;
    d292:	strh.w	r1, [r2, #206]	; 0xce
		p->SM[i].VAL2 = 0;
    d296:	strh.w	r3, [r2, #210]	; 0xd2
		p->SM[i].VAL3 = 0;
    d29a:	strh.w	r3, [r2, #214]	; 0xd6
		p->SM[i].VAL4 = 0;
    d29e:	strh.w	r3, [r2, #218]	; 0xda
		p->SM[i].VAL5 = 0;
    d2a2:	strh.w	r3, [r2, #222]	; 0xde
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    d2a6:	strh.w	lr, [r2, #292]	; 0x124
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    d2aa:	strh.w	r0, [r2, #294]	; 0x126
		p->SM[i].OCTRL = 0;
    d2ae:	strh.w	r3, [r2, #322]	; 0x142
		p->SM[i].DTCNT0 = 0;
    d2b2:	strh.w	r3, [r2, #336]	; 0x150
		p->SM[i].INIT = 0;
    d2b6:	strh.w	r3, [r2, #290]	; 0x122
		p->SM[i].VAL0 = 0;
    d2ba:	strh.w	r3, [r2, #298]	; 0x12a
		p->SM[i].VAL1 = 33464;
    d2be:	strh.w	r1, [r2, #302]	; 0x12e
		p->SM[i].VAL2 = 0;
    d2c2:	strh.w	r3, [r2, #306]	; 0x132
		p->SM[i].VAL3 = 0;
    d2c6:	strh.w	r3, [r2, #310]	; 0x136
		p->SM[i].VAL4 = 0;
    d2ca:	strh.w	r3, [r2, #314]	; 0x13a
		p->SM[i].VAL5 = 0;
    d2ce:	strh.w	r3, [r2, #318]	; 0x13e
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    d2d2:	ldrh.w	r4, [r2, #392]	; 0x188
    d2d6:	uxth	r4, r4
    d2d8:	orr.w	r4, r4, ip
    d2dc:	strh.w	r4, [r2, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    d2e0:	ldrh.w	r4, [r2, #392]	; 0x188
    d2e4:	uxth	r4, r4
    d2e6:	orr.w	r4, r4, #3840	; 0xf00
    d2ea:	strh.w	r4, [r2, #392]	; 0x188
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    d2ee:	add.w	r2, r2, #16384	; 0x4000
    d2f2:	strh.w	r5, [r2, #396]	; 0x18c
	p->FSTS0 = 0x000F; // clear fault status
    d2f6:	strh.w	ip, [r2, #398]	; 0x18e
	p->FFILT0 = 0;
    d2fa:	strh.w	r3, [r2, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    d2fe:	ldrh.w	r4, [r2, #392]	; 0x188
    d302:	uxth	r4, r4
    d304:	orr.w	r4, r4, #240	; 0xf0
    d308:	strh.w	r4, [r2, #392]	; 0x188
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    d30c:	strh.w	lr, [r2, #4]
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    d310:	strh	r0, [r2, #6]
		p->SM[i].OCTRL = 0;
    d312:	strh	r3, [r2, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    d314:	strh	r3, [r2, #48]	; 0x30
		p->SM[i].INIT = 0;
    d316:	strh	r3, [r2, #2]
		p->SM[i].VAL0 = 0;
    d318:	strh	r3, [r2, #10]
		p->SM[i].VAL1 = 33464;
    d31a:	strh	r1, [r2, #14]
		p->SM[i].VAL2 = 0;
    d31c:	strh	r3, [r2, #18]
		p->SM[i].VAL3 = 0;
    d31e:	strh	r3, [r2, #22]
		p->SM[i].VAL4 = 0;
    d320:	strh	r3, [r2, #26]
		p->SM[i].VAL5 = 0;
    d322:	strh	r3, [r2, #30]
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    d324:	strh.w	lr, [r2, #100]	; 0x64
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    d328:	strh.w	r0, [r2, #102]	; 0x66
		p->SM[i].OCTRL = 0;
    d32c:	strh.w	r3, [r2, #130]	; 0x82
		p->SM[i].DTCNT0 = 0;
    d330:	strh.w	r3, [r2, #144]	; 0x90
		p->SM[i].INIT = 0;
    d334:	strh.w	r3, [r2, #98]	; 0x62
		p->SM[i].VAL0 = 0;
    d338:	strh.w	r3, [r2, #106]	; 0x6a
		p->SM[i].VAL1 = 33464;
    d33c:	strh.w	r1, [r2, #110]	; 0x6e
		p->SM[i].VAL2 = 0;
    d340:	strh.w	r3, [r2, #114]	; 0x72
		p->SM[i].VAL3 = 0;
    d344:	strh.w	r3, [r2, #118]	; 0x76
		p->SM[i].VAL4 = 0;
    d348:	strh.w	r3, [r2, #122]	; 0x7a
		p->SM[i].VAL5 = 0;
    d34c:	strh.w	r3, [r2, #126]	; 0x7e
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    d350:	strh.w	lr, [r2, #196]	; 0xc4
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    d354:	strh.w	r0, [r2, #198]	; 0xc6
		p->SM[i].OCTRL = 0;
    d358:	strh.w	r3, [r2, #226]	; 0xe2
		p->SM[i].DTCNT0 = 0;
    d35c:	strh.w	r3, [r2, #240]	; 0xf0
		p->SM[i].INIT = 0;
    d360:	strh.w	r3, [r2, #194]	; 0xc2
		p->SM[i].VAL0 = 0;
    d364:	strh.w	r3, [r2, #202]	; 0xca
		p->SM[i].VAL1 = 33464;
    d368:	strh.w	r1, [r2, #206]	; 0xce
		p->SM[i].VAL2 = 0;
    d36c:	strh.w	r3, [r2, #210]	; 0xd2
		p->SM[i].VAL3 = 0;
    d370:	strh.w	r3, [r2, #214]	; 0xd6
		p->SM[i].VAL4 = 0;
    d374:	strh.w	r3, [r2, #218]	; 0xda
		p->SM[i].VAL5 = 0;
    d378:	strh.w	r3, [r2, #222]	; 0xde
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    d37c:	strh.w	lr, [r2, #292]	; 0x124
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    d380:	strh.w	r0, [r2, #294]	; 0x126
		p->SM[i].OCTRL = 0;
    d384:	strh.w	r3, [r2, #322]	; 0x142
		p->SM[i].DTCNT0 = 0;
    d388:	strh.w	r3, [r2, #336]	; 0x150
		p->SM[i].INIT = 0;
    d38c:	strh.w	r3, [r2, #290]	; 0x122
		p->SM[i].VAL0 = 0;
    d390:	strh.w	r3, [r2, #298]	; 0x12a
		p->SM[i].VAL1 = 33464;
    d394:	strh.w	r1, [r2, #302]	; 0x12e
		p->SM[i].VAL2 = 0;
    d398:	strh.w	r3, [r2, #306]	; 0x132
		p->SM[i].VAL3 = 0;
    d39c:	strh.w	r3, [r2, #310]	; 0x136
		p->SM[i].VAL4 = 0;
    d3a0:	strh.w	r3, [r2, #314]	; 0x13a
		p->SM[i].VAL5 = 0;
    d3a4:	strh.w	r3, [r2, #318]	; 0x13e
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    d3a8:	ldrh.w	r4, [r2, #392]	; 0x188
    d3ac:	uxth	r4, r4
    d3ae:	orr.w	r4, r4, ip
    d3b2:	strh.w	r4, [r2, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    d3b6:	ldrh.w	r4, [r2, #392]	; 0x188
    d3ba:	uxth	r4, r4
    d3bc:	orr.w	r4, r4, #3840	; 0xf00
    d3c0:	strh.w	r4, [r2, #392]	; 0x188
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    d3c4:	add.w	r2, r2, #16384	; 0x4000
    d3c8:	strh.w	r5, [r2, #396]	; 0x18c
	p->FSTS0 = 0x000F; // clear fault status
    d3cc:	strh.w	ip, [r2, #398]	; 0x18e
	p->FFILT0 = 0;
    d3d0:	strh.w	r3, [r2, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    d3d4:	ldrh.w	r4, [r2, #392]	; 0x188
    d3d8:	uxth	r4, r4
    d3da:	orr.w	r4, r4, #240	; 0xf0
    d3de:	strh.w	r4, [r2, #392]	; 0x188
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    d3e2:	strh.w	lr, [r2, #4]
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    d3e6:	strh	r0, [r2, #6]
		p->SM[i].OCTRL = 0;
    d3e8:	strh	r3, [r2, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    d3ea:	strh	r3, [r2, #48]	; 0x30
		p->SM[i].INIT = 0;
    d3ec:	strh	r3, [r2, #2]
		p->SM[i].VAL0 = 0;
    d3ee:	strh	r3, [r2, #10]
		p->SM[i].VAL1 = 33464;
    d3f0:	strh	r1, [r2, #14]
		p->SM[i].VAL2 = 0;
    d3f2:	strh	r3, [r2, #18]
		p->SM[i].VAL3 = 0;
    d3f4:	strh	r3, [r2, #22]
		p->SM[i].VAL4 = 0;
    d3f6:	strh	r3, [r2, #26]
		p->SM[i].VAL5 = 0;
    d3f8:	strh	r3, [r2, #30]
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    d3fa:	strh.w	lr, [r2, #100]	; 0x64
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    d3fe:	strh.w	r0, [r2, #102]	; 0x66
		p->SM[i].OCTRL = 0;
    d402:	strh.w	r3, [r2, #130]	; 0x82
		p->SM[i].DTCNT0 = 0;
    d406:	strh.w	r3, [r2, #144]	; 0x90
		p->SM[i].INIT = 0;
    d40a:	strh.w	r3, [r2, #98]	; 0x62
		p->SM[i].VAL0 = 0;
    d40e:	strh.w	r3, [r2, #106]	; 0x6a
		p->SM[i].VAL1 = 33464;
    d412:	strh.w	r1, [r2, #110]	; 0x6e
		p->SM[i].VAL2 = 0;
    d416:	strh.w	r3, [r2, #114]	; 0x72
		p->SM[i].VAL3 = 0;
    d41a:	strh.w	r3, [r2, #118]	; 0x76
		p->SM[i].VAL4 = 0;
    d41e:	strh.w	r3, [r2, #122]	; 0x7a
		p->SM[i].VAL5 = 0;
    d422:	strh.w	r3, [r2, #126]	; 0x7e
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    d426:	strh.w	lr, [r2, #196]	; 0xc4
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    d42a:	strh.w	r0, [r2, #198]	; 0xc6
		p->SM[i].OCTRL = 0;
    d42e:	strh.w	r3, [r2, #226]	; 0xe2
		p->SM[i].DTCNT0 = 0;
    d432:	strh.w	r3, [r2, #240]	; 0xf0
		p->SM[i].INIT = 0;
    d436:	strh.w	r3, [r2, #194]	; 0xc2
		p->SM[i].VAL0 = 0;
    d43a:	strh.w	r3, [r2, #202]	; 0xca
		p->SM[i].VAL1 = 33464;
    d43e:	strh.w	r1, [r2, #206]	; 0xce
		p->SM[i].VAL2 = 0;
    d442:	strh.w	r3, [r2, #210]	; 0xd2
		p->SM[i].VAL3 = 0;
    d446:	strh.w	r3, [r2, #214]	; 0xd6
		p->SM[i].VAL4 = 0;
    d44a:	strh.w	r3, [r2, #218]	; 0xda
		p->SM[i].VAL5 = 0;
    d44e:	strh.w	r3, [r2, #222]	; 0xde
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    d452:	strh.w	lr, [r2, #292]	; 0x124
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    d456:	strh.w	r0, [r2, #294]	; 0x126
		p->SM[i].OCTRL = 0;
    d45a:	strh.w	r3, [r2, #322]	; 0x142
		p->SM[i].DTCNT0 = 0;
    d45e:	strh.w	r3, [r2, #336]	; 0x150
		p->SM[i].INIT = 0;
    d462:	strh.w	r3, [r2, #290]	; 0x122
		p->SM[i].VAL0 = 0;
    d466:	strh.w	r3, [r2, #298]	; 0x12a
		p->SM[i].VAL1 = 33464;
    d46a:	strh.w	r1, [r2, #302]	; 0x12e
		p->SM[i].VAL2 = 0;
    d46e:	strh.w	r3, [r2, #306]	; 0x132
		p->SM[i].VAL3 = 0;
    d472:	strh.w	r3, [r2, #310]	; 0x136
		p->SM[i].VAL4 = 0;
    d476:	strh.w	r3, [r2, #314]	; 0x13a
		p->SM[i].VAL5 = 0;
    d47a:	strh.w	r3, [r2, #318]	; 0x13e
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    d47e:	ldrh.w	r4, [r2, #392]	; 0x188
    d482:	uxth	r4, r4
    d484:	orr.w	r4, r4, ip
    d488:	strh.w	r4, [r2, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    d48c:	ldrh.w	r4, [r2, #392]	; 0x188
    d490:	uxth	r4, r4
    d492:	orr.w	r4, r4, #3840	; 0xf00
    d496:	strh.w	r4, [r2, #392]	; 0x188
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    d49a:	add.w	r2, r2, #16384	; 0x4000
    d49e:	strh.w	r5, [r2, #396]	; 0x18c
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    d4a2:	movw	r5, #4097	; 0x1001
	p->FSTS0 = 0x000F; // clear fault status
    d4a6:	strh.w	ip, [r2, #398]	; 0x18e
	p->FFILT0 = 0;
    d4aa:	strh.w	r3, [r2, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    d4ae:	ldrh.w	r4, [r2, #392]	; 0x188
    d4b2:	uxth	r4, r4
    d4b4:	orr.w	r4, r4, #240	; 0xf0
    d4b8:	strh.w	r4, [r2, #392]	; 0x188
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    d4bc:	movw	r4, #24000	; 0x5dc0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    d4c0:	strh.w	lr, [r2, #4]
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    d4c4:	strh	r0, [r2, #6]
		p->SM[i].OCTRL = 0;
    d4c6:	strh	r3, [r2, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    d4c8:	strh	r3, [r2, #48]	; 0x30
		p->SM[i].INIT = 0;
    d4ca:	strh	r3, [r2, #2]
		p->SM[i].VAL0 = 0;
    d4cc:	strh	r3, [r2, #10]
		p->SM[i].VAL1 = 33464;
    d4ce:	strh	r1, [r2, #14]
		p->SM[i].VAL2 = 0;
    d4d0:	strh	r3, [r2, #18]
		p->SM[i].VAL3 = 0;
    d4d2:	strh	r3, [r2, #22]
		p->SM[i].VAL4 = 0;
    d4d4:	strh	r3, [r2, #26]
		p->SM[i].VAL5 = 0;
    d4d6:	strh	r3, [r2, #30]
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    d4d8:	strh.w	lr, [r2, #100]	; 0x64
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    d4dc:	strh.w	r0, [r2, #102]	; 0x66
		p->SM[i].OCTRL = 0;
    d4e0:	strh.w	r3, [r2, #130]	; 0x82
		p->SM[i].DTCNT0 = 0;
    d4e4:	strh.w	r3, [r2, #144]	; 0x90
		p->SM[i].INIT = 0;
    d4e8:	strh.w	r3, [r2, #98]	; 0x62
		p->SM[i].VAL0 = 0;
    d4ec:	strh.w	r3, [r2, #106]	; 0x6a
		p->SM[i].VAL1 = 33464;
    d4f0:	strh.w	r1, [r2, #110]	; 0x6e
		p->SM[i].VAL2 = 0;
    d4f4:	strh.w	r3, [r2, #114]	; 0x72
		p->SM[i].VAL3 = 0;
    d4f8:	strh.w	r3, [r2, #118]	; 0x76
		p->SM[i].VAL4 = 0;
    d4fc:	strh.w	r3, [r2, #122]	; 0x7a
		p->SM[i].VAL5 = 0;
    d500:	strh.w	r3, [r2, #126]	; 0x7e
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    d504:	strh.w	lr, [r2, #196]	; 0xc4
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    d508:	strh.w	r0, [r2, #198]	; 0xc6
		p->SM[i].OCTRL = 0;
    d50c:	strh.w	r3, [r2, #226]	; 0xe2
		p->SM[i].DTCNT0 = 0;
    d510:	strh.w	r3, [r2, #240]	; 0xf0
		p->SM[i].INIT = 0;
    d514:	strh.w	r3, [r2, #194]	; 0xc2
		p->SM[i].VAL0 = 0;
    d518:	strh.w	r3, [r2, #202]	; 0xca
		p->SM[i].VAL1 = 33464;
    d51c:	strh.w	r1, [r2, #206]	; 0xce
		p->SM[i].VAL2 = 0;
    d520:	strh.w	r3, [r2, #210]	; 0xd2
		p->SM[i].VAL3 = 0;
    d524:	strh.w	r3, [r2, #214]	; 0xd6
		p->SM[i].VAL4 = 0;
    d528:	strh.w	r3, [r2, #218]	; 0xda
		p->SM[i].VAL5 = 0;
    d52c:	strh.w	r3, [r2, #222]	; 0xde
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    d530:	strh.w	lr, [r2, #292]	; 0x124
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    d534:	movw	lr, #12326	; 0x3026
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    d538:	strh.w	r0, [r2, #294]	; 0x126
		p->SM[i].OCTRL = 0;
    d53c:	strh.w	r3, [r2, #322]	; 0x142
		p->SM[i].DTCNT0 = 0;
    d540:	strh.w	r3, [r2, #336]	; 0x150
		p->SM[i].INIT = 0;
    d544:	strh.w	r3, [r2, #290]	; 0x122
		p->SM[i].VAL0 = 0;
    d548:	strh.w	r3, [r2, #298]	; 0x12a
		p->SM[i].VAL1 = 33464;
    d54c:	strh.w	r1, [r2, #302]	; 0x12e
		p->SM[i].VAL2 = 0;
    d550:	strh.w	r3, [r2, #306]	; 0x132
		p->SM[i].VAL3 = 0;
    d554:	strh.w	r3, [r2, #310]	; 0x136
		p->SM[i].VAL4 = 0;
    d558:	strh.w	r3, [r2, #314]	; 0x13a
		p->SM[i].VAL5 = 0;
    d55c:	strh.w	r3, [r2, #318]	; 0x13e
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    d560:	ldrh.w	r1, [r2, #392]	; 0x188
		p->CH[i].CTRL = 0; // stop timer
    d564:	ldr	r0, [pc, #24]	; (d580 <pwm_init+0x394>)
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    d566:	uxth	r1, r1
    d568:	orr.w	r1, r1, ip
    d56c:	strh.w	r1, [r2, #392]	; 0x188
    d570:	b.n	d584 <pwm_init+0x398>
    d572:	nop
    d574:	.word	0x400fc000
    d578:	.word	0xfc030000
    d57c:	.word	0x403dc000
    d580:	.word	0x401dc000
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    d584:	ldrh.w	r1, [r2, #392]	; 0x188
    d588:	uxth	r1, r1
    d58a:	orr.w	r1, r1, #3840	; 0xf00
    d58e:	strh.w	r1, [r2, #392]	; 0x188
		p->CH[i].CTRL = 0; // stop timer
    d592:	sub.w	r2, r2, #2113536	; 0x204000
    d596:	ldr	r1, [pc, #316]	; (d6d4 <pwm_init+0x4e8>)
    d598:	strh	r3, [r0, #12]
		p->CH[i].CNTR = 0;
    d59a:	strh	r3, [r0, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    d59c:	strh.w	ip, [r0, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    d5a0:	strh	r5, [r0, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    d5a2:	strh	r4, [r0, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    d5a4:	strh	r3, [r0, #0]
		p->CH[i].CMPLD1 = 0;
    d5a6:	strh	r3, [r0, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    d5a8:	strh.w	lr, [r0, #12]
		p->CH[i].CTRL = 0; // stop timer
    d5ac:	strh	r3, [r0, #44]	; 0x2c
		p->CH[i].CNTR = 0;
    d5ae:	strh	r3, [r0, #42]	; 0x2a
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    d5b0:	strh.w	ip, [r0, #46]	; 0x2e
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    d5b4:	strh	r5, [r0, #52]	; 0x34
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    d5b6:	strh	r4, [r0, #38]	; 0x26
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    d5b8:	strh	r3, [r0, #32]
		p->CH[i].CMPLD1 = 0;
    d5ba:	strh	r3, [r0, #48]	; 0x30
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    d5bc:	strh.w	lr, [r0, #44]	; 0x2c
		p->CH[i].CTRL = 0; // stop timer
    d5c0:	strh.w	r3, [r0, #76]	; 0x4c
		p->CH[i].CNTR = 0;
    d5c4:	strh.w	r3, [r0, #74]	; 0x4a
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    d5c8:	strh.w	ip, [r0, #78]	; 0x4e
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    d5cc:	strh.w	r5, [r0, #84]	; 0x54
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    d5d0:	strh.w	r4, [r0, #70]	; 0x46
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    d5d4:	strh.w	r3, [r0, #64]	; 0x40
		p->CH[i].CMPLD1 = 0;
    d5d8:	strh.w	r3, [r0, #80]	; 0x50
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    d5dc:	strh.w	lr, [r0, #76]	; 0x4c
		p->CH[i].CTRL = 0; // stop timer
    d5e0:	strh.w	r3, [r0, #108]	; 0x6c
		p->CH[i].CNTR = 0;
    d5e4:	strh.w	r3, [r0, #106]	; 0x6a
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    d5e8:	strh.w	ip, [r0, #110]	; 0x6e
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    d5ec:	strh.w	r5, [r0, #116]	; 0x74
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    d5f0:	strh.w	r4, [r0, #102]	; 0x66
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    d5f4:	strh.w	r3, [r0, #96]	; 0x60
		p->CH[i].CMPLD1 = 0;
    d5f8:	strh.w	r3, [r0, #112]	; 0x70
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    d5fc:	strh.w	lr, [r0, #108]	; 0x6c
		p->CH[i].CTRL = 0; // stop timer
    d600:	strh	r3, [r1, #12]
		p->CH[i].CNTR = 0;
    d602:	strh	r3, [r1, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    d604:	strh.w	ip, [r1, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    d608:	strh	r5, [r1, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    d60a:	strh	r4, [r1, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    d60c:	strh	r3, [r1, #0]
		p->CH[i].CMPLD1 = 0;
    d60e:	strh	r3, [r1, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    d610:	strh.w	lr, [r1, #12]
		p->CH[i].CTRL = 0; // stop timer
    d614:	strh	r3, [r1, #44]	; 0x2c
		p->CH[i].CNTR = 0;
    d616:	strh	r3, [r1, #42]	; 0x2a
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    d618:	strh.w	ip, [r1, #46]	; 0x2e
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    d61c:	strh	r5, [r1, #52]	; 0x34
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    d61e:	strh	r4, [r1, #38]	; 0x26
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    d620:	strh	r3, [r1, #32]
		p->CH[i].CMPLD1 = 0;
    d622:	strh	r3, [r1, #48]	; 0x30
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    d624:	strh.w	lr, [r1, #44]	; 0x2c
		p->CH[i].CTRL = 0; // stop timer
    d628:	strh.w	r3, [r1, #76]	; 0x4c
		p->CH[i].CNTR = 0;
    d62c:	strh.w	r3, [r1, #74]	; 0x4a
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    d630:	strh.w	ip, [r1, #78]	; 0x4e
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    d634:	strh.w	r5, [r1, #84]	; 0x54
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    d638:	strh.w	r4, [r1, #70]	; 0x46
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    d63c:	strh.w	r3, [r1, #64]	; 0x40
		p->CH[i].CMPLD1 = 0;
    d640:	strh.w	r3, [r1, #80]	; 0x50
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    d644:	strh.w	lr, [r1, #76]	; 0x4c
		p->CH[i].CTRL = 0; // stop timer
    d648:	strh.w	r3, [r1, #108]	; 0x6c
		p->CH[i].CNTR = 0;
    d64c:	strh.w	r3, [r1, #106]	; 0x6a
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    d650:	strh.w	ip, [r1, #110]	; 0x6e
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    d654:	strh.w	r5, [r1, #116]	; 0x74
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    d658:	strh.w	r4, [r1, #102]	; 0x66
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    d65c:	strh.w	r3, [r1, #96]	; 0x60
		p->CH[i].CMPLD1 = 0;
    d660:	strh.w	r3, [r1, #112]	; 0x70
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    d664:	strh.w	lr, [r1, #108]	; 0x6c
		p->CH[i].CTRL = 0; // stop timer
    d668:	strh	r3, [r2, #12]
		p->CH[i].CNTR = 0;
    d66a:	strh	r3, [r2, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    d66c:	strh.w	ip, [r2, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    d670:	strh	r5, [r2, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    d672:	strh	r4, [r2, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    d674:	strh	r3, [r2, #0]
		p->CH[i].CMPLD1 = 0;
    d676:	strh	r3, [r2, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    d678:	strh.w	lr, [r2, #12]
		p->CH[i].CTRL = 0; // stop timer
    d67c:	strh	r3, [r2, #44]	; 0x2c
		p->CH[i].CNTR = 0;
    d67e:	strh	r3, [r2, #42]	; 0x2a
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    d680:	strh.w	ip, [r2, #46]	; 0x2e
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    d684:	strh	r5, [r2, #52]	; 0x34
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    d686:	strh	r4, [r2, #38]	; 0x26
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    d688:	strh	r3, [r2, #32]
		p->CH[i].CMPLD1 = 0;
    d68a:	strh	r3, [r2, #48]	; 0x30
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    d68c:	strh.w	lr, [r2, #44]	; 0x2c
		p->CH[i].CTRL = 0; // stop timer
    d690:	strh.w	r3, [r2, #76]	; 0x4c
		p->CH[i].CNTR = 0;
    d694:	strh.w	r3, [r2, #74]	; 0x4a
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    d698:	strh.w	ip, [r2, #78]	; 0x4e
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    d69c:	strh.w	r5, [r2, #84]	; 0x54
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    d6a0:	strh.w	r4, [r2, #70]	; 0x46
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    d6a4:	strh.w	r3, [r2, #64]	; 0x40
		p->CH[i].CMPLD1 = 0;
    d6a8:	strh.w	r3, [r2, #80]	; 0x50
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    d6ac:	strh.w	lr, [r2, #76]	; 0x4c
		p->CH[i].CTRL = 0; // stop timer
    d6b0:	strh.w	r3, [r2, #108]	; 0x6c
		p->CH[i].CNTR = 0;
    d6b4:	strh.w	r3, [r2, #106]	; 0x6a
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    d6b8:	strh.w	ip, [r2, #110]	; 0x6e
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    d6bc:	strh.w	r5, [r2, #116]	; 0x74
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    d6c0:	strh.w	r4, [r2, #102]	; 0x66
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    d6c4:	strh.w	r3, [r2, #96]	; 0x60
		p->CH[i].CMPLD1 = 0;
    d6c8:	strh.w	r3, [r2, #112]	; 0x70
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    d6cc:	strh.w	lr, [r2, #108]	; 0x6c
	flexpwm_init(&IMXRT_FLEXPWM3);
	flexpwm_init(&IMXRT_FLEXPWM4);
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    d6d0:	pop	{r4, r5, pc}
    d6d2:	nop
    d6d4:	.word	0x401e0000

0000d6d8 <rx_event>:



// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
    d6d8:	push	{r3, r4, r5, r6, r7, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    d6da:	ldr	r1, [r0, #4]
	len &= 0xFFFC; // MIDI packets must be multiple of 4 bytes
    d6dc:	movw	r4, #65532	; 0xfffc
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    d6e0:	ldr	r5, [pc, #132]	; (d768 <rx_event+0x90>)
    d6e2:	ubfx	r1, r1, #16, #15
	int i = t->callback_param;
    d6e6:	ldr	r3, [r0, #28]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    d6e8:	ldrh	r2, [r5, #0]
    d6ea:	subs	r1, r2, r1
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    d6ec:	ands	r1, r4
    d6ee:	beq.n	d71c <rx_event+0x44>
		uint32_t head = rx_head;
    d6f0:	ldr	r4, [pc, #120]	; (d76c <rx_event+0x94>)
		rx_count[i] = len;
    d6f2:	ldr	r0, [pc, #124]	; (d770 <rx_event+0x98>)
		uint32_t head = rx_head;
    d6f4:	ldrb	r2, [r4, #0]
		rx_count[i] = len;
    d6f6:	strh.w	r1, [r0, r3, lsl #1]
		rx_index[i] = 0;
    d6fa:	movs	r0, #0
		if (++head > RX_NUM) head = 0;
    d6fc:	adds	r2, #1
		rx_index[i] = 0;
    d6fe:	ldr	r5, [pc, #116]	; (d774 <rx_event+0x9c>)
		if (++head > RX_NUM) head = 0;
    d700:	cmp	r2, #6
		rx_index[i] = 0;
    d702:	strh.w	r0, [r5, r3, lsl #1]
		rx_list[head] = i;
		rx_head = head;
    d706:	ite	ls
    d708:	uxtbls	r0, r2
		if (++head > RX_NUM) head = 0;
    d70a:	movhi	r2, r0
		rx_head = head;
    d70c:	strb	r0, [r4, #0]
		rx_available += len;
    d70e:	ldr	r0, [pc, #104]	; (d778 <rx_event+0xa0>)
    d710:	ldr	r4, [r0, #0]
    d712:	add	r1, r4
    d714:	str	r1, [r0, #0]
		rx_list[head] = i;
    d716:	ldr	r1, [pc, #100]	; (d77c <rx_event+0xa4>)
    d718:	strb	r3, [r1, r2]
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
    d71a:	pop	{r3, r4, r5, r6, r7, pc}
	void *buffer = rx_buffer + i * MIDI_RX_SIZE_480;
    d71c:	ldr	r4, [pc, #96]	; (d780 <rx_event+0xa8>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    d71e:	mov.w	r6, #3758153728	; 0xe000e000
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    d722:	ldr	r7, [pc, #96]	; (d784 <rx_event+0xac>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    d724:	mov.w	r1, #131072	; 0x20000
	void *buffer = rx_buffer + i * MIDI_RX_SIZE_480;
    d728:	add.w	r4, r4, r3, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    d72c:	add.w	r7, r7, r3, lsl #5
	NVIC_DISABLE_IRQ(IRQ_USB1);
    d730:	str.w	r1, [r6, #396]	; 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    d734:	mov	r1, r4
    d736:	mov	r0, r7
    d738:	bl	cb64 <usb_prepare_transfer>
	arm_dcache_delete(buffer, rx_packet_size);
    d73c:	ldrh	r3, [r5, #0]
	uint32_t end_addr = (uint32_t)addr + size;
    d73e:	add	r3, r4
	asm("dsb");
    d740:	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    d744:	str.w	r4, [r6, #3932]	; 0xf5c
		location += 32;
    d748:	adds	r4, #32
	} while (location < end_addr);
    d74a:	cmp	r3, r4
    d74c:	bhi.n	d744 <rx_event+0x6c>
	asm("dsb");
    d74e:	dsb	sy
	asm("isb");
    d752:	isb	sy
	usb_receive(MIDI_RX_ENDPOINT, rx_transfer + i);
    d756:	movs	r0, #4
    d758:	mov	r1, r7
    d75a:	bl	cc4c <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    d75e:	mov.w	r3, #131072	; 0x20000
    d762:	str.w	r3, [r6, #268]	; 0x10c
}
    d766:	pop	{r3, r4, r5, r6, r7, pc}
    d768:	.word	0x20015d04
    d76c:	.word	0x20015d1f
    d770:	.word	0x20015938
    d774:	.word	0x20015954
    d778:	.word	0x20015924
    d77c:	.word	0x2001596c
    d780:	.word	0x20201240
    d784:	.word	0x20003820

0000d788 <usb_midi_configure>:
{
    d788:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (usb_high_speed) {
    d78c:	ldr	r3, [pc, #208]	; (d860 <usb_midi_configure+0xd8>)
    d78e:	ldrb	r3, [r3, #0]
    d790:	cmp	r3, #0
    d792:	bne.n	d856 <usb_midi_configure+0xce>
    d794:	movs	r6, #64	; 0x40
		tx_packet_size = MIDI_TX_SIZE_12;
    d796:	mov	r3, r6
	tx_head = 0;
    d798:	movs	r4, #0
    d79a:	ldr	r5, [pc, #200]	; (d864 <usb_midi_configure+0xdc>)
    d79c:	ldr	r7, [pc, #200]	; (d868 <usb_midi_configure+0xe0>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
    d79e:	movs	r2, #128	; 0x80
    d7a0:	mov	r1, r4
    d7a2:	ldr	r0, [pc, #200]	; (d86c <usb_midi_configure+0xe4>)
    d7a4:	strh	r3, [r5, #0]
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    d7a6:	mov	r9, r4
    d7a8:	strh	r3, [r7, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    d7aa:	bl	10104 <memset>
	tx_head = 0;
    d7ae:	ldr	r3, [pc, #192]	; (d870 <usb_midi_configure+0xe8>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    d7b0:	mov	r1, r4
    d7b2:	movs	r2, #192	; 0xc0
    d7b4:	ldr	r0, [pc, #188]	; (d874 <usb_midi_configure+0xec>)
	tx_head = 0;
    d7b6:	strb	r4, [r3, #0]
	NVIC_DISABLE_IRQ(IRQ_USB1);
    d7b8:	mov.w	r8, #131072	; 0x20000
	tx_available = 0;
    d7bc:	ldr	r3, [pc, #184]	; (d878 <usb_midi_configure+0xf0>)
    d7be:	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    d7c0:	bl	10104 <memset>
	memset(rx_count, 0, sizeof(rx_count));
    d7c4:	ldr	r3, [pc, #180]	; (d87c <usb_midi_configure+0xf4>)
	usb_config_rx(MIDI_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    d7c6:	mov	r1, r6
    d7c8:	mov	r2, r4
    d7ca:	movs	r0, #4
	memset(rx_count, 0, sizeof(rx_count));
    d7cc:	str	r4, [r3, #8]
	memset(rx_index, 0, sizeof(rx_index));
    d7ce:	ldr	r6, [pc, #164]	; (d874 <usb_midi_configure+0xec>)
	memset(rx_count, 0, sizeof(rx_count));
    d7d0:	strd	r4, r4, [r3]
	memset(rx_index, 0, sizeof(rx_index));
    d7d4:	ldr	r3, [pc, #168]	; (d880 <usb_midi_configure+0xf8>)
    d7d6:	strd	r4, r4, [r3]
    d7da:	str	r4, [r3, #8]
	rx_head = 0;
    d7dc:	ldr	r3, [pc, #164]	; (d884 <usb_midi_configure+0xfc>)
    d7de:	strb	r4, [r3, #0]
	rx_tail = 0;
    d7e0:	ldr	r3, [pc, #164]	; (d888 <usb_midi_configure+0x100>)
    d7e2:	strb	r4, [r3, #0]
	rx_available = 0;
    d7e4:	ldr	r3, [pc, #164]	; (d88c <usb_midi_configure+0x104>)
    d7e6:	str	r4, [r3, #0]
	usb_config_rx(MIDI_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    d7e8:	ldr	r3, [pc, #164]	; (d890 <usb_midi_configure+0x108>)
    d7ea:	bl	c9cc <usb_config_rx>
	usb_config_tx(MIDI_TX_ENDPOINT, tx_packet_size, 0, NULL); // TODO: is ZLP needed?
    d7ee:	mov	r3, r4
    d7f0:	mov	r2, r4
    d7f2:	ldrh	r1, [r5, #0]
    d7f4:	movs	r0, #4
    d7f6:	ldr	r5, [pc, #156]	; (d894 <usb_midi_configure+0x10c>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    d7f8:	mov.w	r4, #3758153728	; 0xe000e000
	usb_config_tx(MIDI_TX_ENDPOINT, tx_packet_size, 0, NULL); // TODO: is ZLP needed?
    d7fc:	bl	ca30 <usb_config_tx>
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    d800:	mov	r1, r5
    d802:	mov	r3, r9
    d804:	ldrh	r2, [r7, #0]
    d806:	mov	r0, r6
	NVIC_DISABLE_IRQ(IRQ_USB1);
    d808:	str.w	r8, [r4, #396]	; 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    d80c:	bl	cb64 <usb_prepare_transfer>
	arm_dcache_delete(buffer, rx_packet_size);
    d810:	ldrh	r1, [r7, #0]
	uint32_t end_addr = (uint32_t)addr + size;
    d812:	add	r1, r5
	asm("dsb");
    d814:	dsb	sy
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    d818:	mov	r2, r5
		SCB_CACHE_DCIMVAC = location;
    d81a:	str.w	r2, [r4, #3932]	; 0xf5c
		location += 32;
    d81e:	adds	r2, #32
	} while (location < end_addr);
    d820:	cmp	r1, r2
    d822:	bhi.n	d81a <usb_midi_configure+0x92>
	asm("dsb");
    d824:	dsb	sy
	asm("isb");
    d828:	isb	sy
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    d82c:	add.w	r9, r9, #1
	usb_receive(MIDI_RX_ENDPOINT, rx_transfer + i);
    d830:	mov	r1, r6
    d832:	movs	r0, #4
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    d834:	adds	r6, #32
	usb_receive(MIDI_RX_ENDPOINT, rx_transfer + i);
    d836:	bl	cc4c <usb_receive>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    d83a:	cmp.w	r9, #6
    d83e:	add.w	r5, r5, #512	; 0x200
	NVIC_ENABLE_IRQ(IRQ_USB1);
    d842:	str.w	r8, [r4, #268]	; 0x10c
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    d846:	bne.n	d800 <usb_midi_configure+0x78>
	transmit_previous_timeout = 0;
    d848:	movs	r3, #0
    d84a:	ldr	r1, [pc, #76]	; (d898 <usb_midi_configure+0x110>)
	tx_noautoflush = 0;
    d84c:	ldr	r2, [pc, #76]	; (d89c <usb_midi_configure+0x114>)
	transmit_previous_timeout = 0;
    d84e:	strb	r3, [r1, #0]
	tx_noautoflush = 0;
    d850:	strb	r3, [r2, #0]
}
    d852:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d856:	mov.w	r6, #512	; 0x200
		tx_packet_size = MIDI_TX_SIZE_480;
    d85a:	mov	r3, r6
    d85c:	b.n	d798 <usb_midi_configure+0x10>
    d85e:	nop
    d860:	.word	0x20015d2f
    d864:	.word	0x20015d0c
    d868:	.word	0x20015d04
    d86c:	.word	0x200039a0
    d870:	.word	0x20015d26
    d874:	.word	0x20003820
    d878:	.word	0x20015d08
    d87c:	.word	0x20015938
    d880:	.word	0x20015954
    d884:	.word	0x20015d1f
    d888:	.word	0x20015d21
    d88c:	.word	0x20015924
    d890:	.word	0x0000d6d9
    d894:	.word	0x20201240
    d898:	.word	0x20015d24
    d89c:	.word	0x20015d28

0000d8a0 <usb_midi_flush_output>:
{
    d8a0:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (tx_noautoflush == 0 && tx_available > 0) {
    d8a4:	ldr	r3, [pc, #300]	; (d9d4 <usb_midi_flush_output+0x134>)
    d8a6:	ldrb	r4, [r3, #0]
    d8a8:	cbnz	r4, d8b0 <usb_midi_flush_output+0x10>
    d8aa:	ldr	r6, [pc, #300]	; (d9d8 <usb_midi_flush_output+0x138>)
    d8ac:	ldrh	r3, [r6, #0]
    d8ae:	cbnz	r3, d8b4 <usb_midi_flush_output+0x14>
}
    d8b0:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		uint32_t head = tx_head;
    d8b4:	ldr.w	r8, [pc, #304]	; d9e8 <usb_midi_flush_output+0x148>
		transfer_t *xfer = tx_transfer + head;
    d8b8:	ldr	r2, [pc, #288]	; (d9dc <usb_midi_flush_output+0x13c>)
		uint32_t head = tx_head;
    d8ba:	ldrb.w	r7, [r8]
		uint8_t *txbuf = txbuffer + (head * TX_SIZE);
    d8be:	ldr	r5, [pc, #288]	; (d9e0 <usb_midi_flush_output+0x140>)
		transfer_t *xfer = tx_transfer + head;
    d8c0:	add.w	r9, r2, r7, lsl #5
		uint32_t len = tx_packet_size - tx_available;
    d8c4:	ldr	r2, [pc, #284]	; (d9e4 <usb_midi_flush_output+0x144>)
		uint8_t *txbuf = txbuffer + (head * TX_SIZE);
    d8c6:	add.w	r5, r5, r7, lsl #9
		uint32_t len = tx_packet_size - tx_available;
    d8ca:	ldrh	r2, [r2, #0]
		usb_prepare_transfer(xfer, txbuf, len, 0);
    d8cc:	mov	r0, r9
    d8ce:	mov	r1, r5
    d8d0:	subs	r2, r2, r3
    d8d2:	mov	r3, r4
    d8d4:	bl	cb64 <usb_prepare_transfer>
	asm("dsb");
    d8d8:	dsb	sy
    d8dc:	add.w	r1, r5, #32
    d8e0:	add.w	r3, r5, #512	; 0x200
		SCB_CACHE_DCCIMVAC = location;
    d8e4:	mov.w	r2, #3758153728	; 0xe000e000
    d8e8:	cmp	r1, r3
    d8ea:	ite	hi
    d8ec:	movhi	r3, #1
    d8ee:	movls	r3, #16
    d8f0:	str.w	r5, [r2, #3952]	; 0xf70
	} while (location < end_addr);
    d8f4:	cmp	r3, #1
    d8f6:	beq.n	d9a4 <usb_midi_flush_output+0x104>
    d8f8:	cmp	r3, #2
		SCB_CACHE_DCCIMVAC = location;
    d8fa:	str.w	r1, [r2, #3952]	; 0xf70
		location += 32;
    d8fe:	add.w	r1, r5, #64	; 0x40
	} while (location < end_addr);
    d902:	beq.n	d9a4 <usb_midi_flush_output+0x104>
    d904:	cmp	r3, #3
		SCB_CACHE_DCCIMVAC = location;
    d906:	str.w	r1, [r2, #3952]	; 0xf70
		location += 32;
    d90a:	add.w	r1, r5, #96	; 0x60
	} while (location < end_addr);
    d90e:	beq.n	d9a4 <usb_midi_flush_output+0x104>
    d910:	cmp	r3, #4
		SCB_CACHE_DCCIMVAC = location;
    d912:	str.w	r1, [r2, #3952]	; 0xf70
		location += 32;
    d916:	add.w	r1, r5, #128	; 0x80
	} while (location < end_addr);
    d91a:	beq.n	d9a4 <usb_midi_flush_output+0x104>
    d91c:	cmp	r3, #5
		SCB_CACHE_DCCIMVAC = location;
    d91e:	str.w	r1, [r2, #3952]	; 0xf70
		location += 32;
    d922:	add.w	r1, r5, #160	; 0xa0
	} while (location < end_addr);
    d926:	beq.n	d9a4 <usb_midi_flush_output+0x104>
    d928:	cmp	r3, #6
		SCB_CACHE_DCCIMVAC = location;
    d92a:	str.w	r1, [r2, #3952]	; 0xf70
		location += 32;
    d92e:	add.w	r1, r5, #192	; 0xc0
	} while (location < end_addr);
    d932:	beq.n	d9a4 <usb_midi_flush_output+0x104>
    d934:	cmp	r3, #7
		SCB_CACHE_DCCIMVAC = location;
    d936:	str.w	r1, [r2, #3952]	; 0xf70
		location += 32;
    d93a:	add.w	r1, r5, #224	; 0xe0
	} while (location < end_addr);
    d93e:	beq.n	d9a4 <usb_midi_flush_output+0x104>
    d940:	cmp	r3, #8
		SCB_CACHE_DCCIMVAC = location;
    d942:	str.w	r1, [r2, #3952]	; 0xf70
		location += 32;
    d946:	add.w	r1, r5, #256	; 0x100
	} while (location < end_addr);
    d94a:	beq.n	d9a4 <usb_midi_flush_output+0x104>
    d94c:	cmp	r3, #9
		SCB_CACHE_DCCIMVAC = location;
    d94e:	str.w	r1, [r2, #3952]	; 0xf70
		location += 32;
    d952:	add.w	r1, r5, #288	; 0x120
	} while (location < end_addr);
    d956:	beq.n	d9a4 <usb_midi_flush_output+0x104>
    d958:	cmp	r3, #10
		SCB_CACHE_DCCIMVAC = location;
    d95a:	str.w	r1, [r2, #3952]	; 0xf70
		location += 32;
    d95e:	add.w	r1, r5, #320	; 0x140
	} while (location < end_addr);
    d962:	beq.n	d9a4 <usb_midi_flush_output+0x104>
    d964:	cmp	r3, #11
		SCB_CACHE_DCCIMVAC = location;
    d966:	str.w	r1, [r2, #3952]	; 0xf70
		location += 32;
    d96a:	add.w	r1, r5, #352	; 0x160
	} while (location < end_addr);
    d96e:	beq.n	d9a4 <usb_midi_flush_output+0x104>
    d970:	cmp	r3, #12
		SCB_CACHE_DCCIMVAC = location;
    d972:	str.w	r1, [r2, #3952]	; 0xf70
		location += 32;
    d976:	add.w	r1, r5, #384	; 0x180
	} while (location < end_addr);
    d97a:	beq.n	d9a4 <usb_midi_flush_output+0x104>
    d97c:	cmp	r3, #13
		SCB_CACHE_DCCIMVAC = location;
    d97e:	str.w	r1, [r2, #3952]	; 0xf70
		location += 32;
    d982:	add.w	r1, r5, #416	; 0x1a0
	} while (location < end_addr);
    d986:	beq.n	d9a4 <usb_midi_flush_output+0x104>
    d988:	subs	r3, #14
		SCB_CACHE_DCCIMVAC = location;
    d98a:	str.w	r1, [r2, #3952]	; 0xf70
		location += 32;
    d98e:	add.w	r1, r5, #448	; 0x1c0
	} while (location < end_addr);
    d992:	beq.n	d9a4 <usb_midi_flush_output+0x104>
    d994:	cmp	r3, #1
		location += 32;
    d996:	add.w	r5, r5, #480	; 0x1e0
		SCB_CACHE_DCCIMVAC = location;
    d99a:	str.w	r1, [r2, #3952]	; 0xf70
	} while (location < end_addr);
    d99e:	beq.n	d9a4 <usb_midi_flush_output+0x104>
		SCB_CACHE_DCCIMVAC = location;
    d9a0:	str.w	r5, [r2, #3952]	; 0xf70
	asm("dsb");
    d9a4:	dsb	sy
	asm("isb");
    d9a8:	isb	sy
		if (++head >= TX_NUM) head = 0;
    d9ac:	adds	r7, #1
		usb_transmit(MIDI_TX_ENDPOINT, xfer);
    d9ae:	mov	r1, r9
    d9b0:	movs	r0, #4
    d9b2:	bl	cb94 <usb_transmit>
		if (++head >= TX_NUM) head = 0;
    d9b6:	cmp	r7, #3
		tx_available = 0;
    d9b8:	mov.w	r3, #0
		usb_stop_sof_interrupts(MIDI_INTERFACE);
    d9bc:	mov.w	r0, #2
		tx_head = head;
    d9c0:	it	ls
    d9c2:	uxtbls	r4, r7
		tx_available = 0;
    d9c4:	strh	r3, [r6, #0]
		tx_head = head;
    d9c6:	strb.w	r4, [r8]
}
    d9ca:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		usb_stop_sof_interrupts(MIDI_INTERFACE);
    d9ce:	b.w	c9a0 <usb_stop_sof_interrupts>
    d9d2:	nop
    d9d4:	.word	0x20015d28
    d9d8:	.word	0x20015d08
    d9dc:	.word	0x200039a0
    d9e0:	.word	0x20200a40
    d9e4:	.word	0x20015d0c
    d9e8:	.word	0x20015d26

0000d9ec <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    d9ec:	ldr	r2, [pc, #168]	; (da98 <usb_init_serialnumber+0xac>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    d9ee:	ldr	r3, [pc, #172]	; (da9c <usb_init_serialnumber+0xb0>)
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    d9f0:	ldr.w	r0, [r2, #544]	; 0x220
    d9f4:	bic.w	r0, r0, #4278190080	; 0xff000000
	if (num < 10000000) num = num * 10;
    d9f8:	cmp	r0, r3
{
    d9fa:	push	{lr}
    d9fc:	sub	sp, #20
	if (num < 10000000) num = num * 10;
    d9fe:	bcs.n	da06 <usb_init_serialnumber+0x1a>
    da00:	add.w	r0, r0, r0, lsl #2
    da04:	lsls	r0, r0, #1
	ultoa(num, buf, 10);
    da06:	movs	r2, #10
    da08:	add	r1, sp, #4
    da0a:	bl	f170 <ultoa>
	for (i=0; i<10; i++) {
		char c = buf[i];
    da0e:	ldrb.w	r2, [sp, #4]
		if (!c) break;
    da12:	ldr	r3, [pc, #140]	; (daa0 <usb_init_serialnumber+0xb4>)
    da14:	cbz	r2, da6c <usb_init_serialnumber+0x80>
		char c = buf[i];
    da16:	ldrb.w	r1, [sp, #5]
		usb_string_serial_number_default.wString[i] = c;
    da1a:	strh	r2, [r3, #2]
		if (!c) break;
    da1c:	cbz	r1, da6a <usb_init_serialnumber+0x7e>
		char c = buf[i];
    da1e:	ldrb.w	r2, [sp, #6]
		usb_string_serial_number_default.wString[i] = c;
    da22:	strh	r1, [r3, #4]
		if (!c) break;
    da24:	cbz	r2, da78 <usb_init_serialnumber+0x8c>
		char c = buf[i];
    da26:	ldrb.w	r1, [sp, #7]
		usb_string_serial_number_default.wString[i] = c;
    da2a:	strh	r2, [r3, #6]
		if (!c) break;
    da2c:	cbz	r1, da7c <usb_init_serialnumber+0x90>
		char c = buf[i];
    da2e:	ldrb.w	r2, [sp, #8]
		usb_string_serial_number_default.wString[i] = c;
    da32:	strh	r1, [r3, #8]
		if (!c) break;
    da34:	cbz	r2, da80 <usb_init_serialnumber+0x94>
		char c = buf[i];
    da36:	ldrb.w	r1, [sp, #9]
		usb_string_serial_number_default.wString[i] = c;
    da3a:	strh	r2, [r3, #10]
		if (!c) break;
    da3c:	cbz	r1, da84 <usb_init_serialnumber+0x98>
		char c = buf[i];
    da3e:	ldrb.w	r2, [sp, #10]
		usb_string_serial_number_default.wString[i] = c;
    da42:	strh	r1, [r3, #12]
		if (!c) break;
    da44:	cbz	r2, da88 <usb_init_serialnumber+0x9c>
		char c = buf[i];
    da46:	ldrb.w	r1, [sp, #11]
		usb_string_serial_number_default.wString[i] = c;
    da4a:	strh	r2, [r3, #14]
		if (!c) break;
    da4c:	cbz	r1, da8c <usb_init_serialnumber+0xa0>
		char c = buf[i];
    da4e:	ldrb.w	r2, [sp, #12]
		usb_string_serial_number_default.wString[i] = c;
    da52:	strh	r1, [r3, #16]
		if (!c) break;
    da54:	cbz	r2, da90 <usb_init_serialnumber+0xa4>
		char c = buf[i];
    da56:	ldrb.w	r1, [sp, #13]
		usb_string_serial_number_default.wString[i] = c;
    da5a:	strh	r2, [r3, #18]
		if (!c) break;
    da5c:	cbz	r1, da94 <usb_init_serialnumber+0xa8>
		usb_string_serial_number_default.wString[i] = c;
    da5e:	movs	r2, #22
    da60:	strh	r1, [r3, #20]
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    da62:	strb	r2, [r3, #0]
}
    da64:	add	sp, #20
    da66:	ldr.w	pc, [sp], #4
	for (i=0; i<10; i++) {
    da6a:	movs	r2, #1
	usb_string_serial_number_default.bLength = i * 2 + 2;
    da6c:	lsls	r2, r2, #1
    da6e:	adds	r2, #2
    da70:	strb	r2, [r3, #0]
}
    da72:	add	sp, #20
    da74:	ldr.w	pc, [sp], #4
	for (i=0; i<10; i++) {
    da78:	movs	r2, #2
    da7a:	b.n	da6c <usb_init_serialnumber+0x80>
    da7c:	movs	r2, #3
    da7e:	b.n	da6c <usb_init_serialnumber+0x80>
    da80:	movs	r2, #4
    da82:	b.n	da6c <usb_init_serialnumber+0x80>
    da84:	movs	r2, #5
    da86:	b.n	da6c <usb_init_serialnumber+0x80>
    da88:	movs	r2, #6
    da8a:	b.n	da6c <usb_init_serialnumber+0x80>
    da8c:	movs	r2, #7
    da8e:	b.n	da6c <usb_init_serialnumber+0x80>
    da90:	movs	r2, #8
    da92:	b.n	da6c <usb_init_serialnumber+0x80>
    da94:	movs	r2, #9
    da96:	b.n	da6c <usb_init_serialnumber+0x80>
    da98:	.word	0x401f4400
    da9c:	.word	0x00989680
    daa0:	.word	0x200021f4

0000daa4 <yield>:

extern const uint8_t _serialEvent_default;	

void yield(void) __attribute__ ((weak));
void yield(void)
{
    daa4:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
    daa8:	ldr	r6, [pc, #212]	; (db80 <yield+0xdc>)
    daaa:	ldrb	r3, [r6, #0]
    daac:	cmp	r3, #0
    daae:	beq.n	db08 <yield+0x64>
	if (running) return; // TODO: does this need to be atomic?
    dab0:	ldr	r7, [pc, #208]	; (db84 <yield+0xe0>)
    dab2:	ldrb	r2, [r7, #0]
    dab4:	cmp	r2, #0
    dab6:	bne.n	db08 <yield+0x64>
	running = 1;
    dab8:	movs	r2, #1


	// USB Serial - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    daba:	lsls	r1, r3, #31
	running = 1;
    dabc:	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    dabe:	bmi.n	db52 <yield+0xae>
		if (_serialEventUSB2_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIALUSB2;
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) HardwareSerial::processSerialEventsList();
    dac0:	lsls	r2, r3, #30
    dac2:	bmi.n	db0c <yield+0x68>

	running = 0;
    dac4:	movs	r2, #0
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    dac6:	lsls	r3, r3, #29
	running = 0;
    dac8:	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    daca:	bpl.n	db08 <yield+0x64>
	// Wait for event(s) to occur.  These are most likely to be useful when
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);
	static void runFromYield() {
		if (!firstYield) return;  
    dacc:	ldr	r3, [pc, #184]	; (db88 <yield+0xe4>)
    dace:	ldr	r2, [r3, #0]
    dad0:	cbz	r2, db08 <yield+0x64>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    dad2:	mrs	r2, IPSR
		if (ipsr != 0) return;
    dad6:	cbnz	r2, db08 <yield+0x64>
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    dad8:	mrs	r5, PRIMASK
		__disable_irq();
    dadc:	cpsid	i
		EventResponder *first = firstYield;
    dade:	ldr	r0, [r3, #0]
		if (first == nullptr) {
    dae0:	cmp	r0, #0
    dae2:	beq.n	db6c <yield+0xc8>
		if (runningFromYield) {
    dae4:	ldr	r4, [pc, #164]	; (db8c <yield+0xe8>)
    dae6:	ldrb	r1, [r4, #0]
    dae8:	cmp	r1, #0
    daea:	bne.n	db6c <yield+0xc8>
		runningFromYield = true;
    daec:	movs	r2, #1
    daee:	strb	r2, [r4, #0]
		firstYield = first->_next;
    daf0:	ldr	r2, [r0, #20]
    daf2:	str	r2, [r3, #0]
		if (firstYield) {
    daf4:	cmp	r2, #0
    daf6:	beq.n	db74 <yield+0xd0>
			firstYield->_prev = nullptr;
    daf8:	str	r1, [r2, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    dafa:	cbnz	r5, dafe <yield+0x5a>
    dafc:	cpsie	i
		first->_triggered = false;
    dafe:	movs	r5, #0
		(*(first->_function))(*first);
    db00:	ldr	r3, [r0, #8]
		first->_triggered = false;
    db02:	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    db04:	blx	r3
		runningFromYield = false;
    db06:	strb	r5, [r4, #0]
	
};
    db08:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	*/

	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    db0c:	ldr.w	r8, [pc, #136]	; db98 <yield+0xf4>
    db10:	ldrb.w	r2, [r8]
    db14:	cmp	r2, #0
    db16:	beq.n	dac4 <yield+0x20>
    db18:	movs	r5, #0
    db1a:	ldr.w	r9, [pc, #128]	; db9c <yield+0xf8>
    db1e:	mov	r3, r5
			s_serials_with_serial_events[i]->doYieldCode();
    db20:	ldr.w	r4, [r9, r3, lsl #2]
	static HardwareSerial 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
    db24:	ldr	r3, [r4, #0]
    db26:	mov	r0, r4
    db28:	ldr	r3, [r3, #16]
    db2a:	blx	r3
    db2c:	cbz	r0, db44 <yield+0xa0>
    db2e:	ldr	r3, [r4, #20]
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    db30:	adds	r5, #1
		if (available()) (*hardware->_serialEvent)();
    db32:	ldr	r3, [r3, #8]
    db34:	blx	r3
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    db36:	ldrb.w	r2, [r8]
    db3a:	uxtb	r3, r5
    db3c:	cmp	r2, r3
    db3e:	bhi.n	db20 <yield+0x7c>
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    db40:	ldrb	r3, [r6, #0]
    db42:	b.n	dac4 <yield+0x20>
    db44:	adds	r5, #1
    db46:	ldrb.w	r2, [r8]
    db4a:	uxtb	r3, r5
    db4c:	cmp	r2, r3
    db4e:	bhi.n	db20 <yield+0x7c>
    db50:	b.n	db40 <yield+0x9c>
        virtual int available() { return usb_serial_available(); }
    db52:	bl	b834 <usb_serial_available>
		if (Serial.available()) serialEvent();
    db56:	cbnz	r0, db7a <yield+0xd6>
		if (_serialEvent_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIAL;
    db58:	ldr	r3, [pc, #52]	; (db90 <yield+0xec>)
    db5a:	ldrb	r3, [r3, #0]
    db5c:	cbnz	r3, db62 <yield+0xbe>
    db5e:	ldrb	r3, [r6, #0]
    db60:	b.n	dac0 <yield+0x1c>
    db62:	ldrb	r3, [r6, #0]
    db64:	and.w	r3, r3, #254	; 0xfe
    db68:	strb	r3, [r6, #0]
    db6a:	b.n	dac0 <yield+0x1c>
		if (doit) __enable_irq();
    db6c:	cmp	r5, #0
    db6e:	bne.n	db08 <yield+0x64>
    db70:	cpsie	i
    db72:	b.n	db08 <yield+0x64>
			lastYield = nullptr;
    db74:	ldr	r3, [pc, #28]	; (db94 <yield+0xf0>)
    db76:	str	r2, [r3, #0]
    db78:	b.n	dafa <yield+0x56>
		if (Serial.available()) serialEvent();
    db7a:	bl	f164 <serialEvent()>
    db7e:	b.n	db58 <yield+0xb4>
    db80:	.word	0x2000220d
    db84:	.word	0x20015d1a
    db88:	.word	0x2000781c
    db8c:	.word	0x20015d17
    db90:	.word	0x60002b9e
    db94:	.word	0x20007828
    db98:	.word	0x20015d18
    db9c:	.word	0x2000782c

0000dba0 <EventResponder::triggerEventNotImmediate()>:
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    dba0:	mrs	r2, PRIMASK
		__disable_irq();
    dba4:	cpsid	i
	if (_triggered == false) {
    dba6:	ldrb	r3, [r0, #29]
    dba8:	cbnz	r3, dbc2 <EventResponder::triggerEventNotImmediate()+0x22>
		if (_type == EventTypeYield) {
    dbaa:	ldrb	r1, [r0, #28]
    dbac:	cmp	r1, #1
{
    dbae:	push	{r4, r5}
		if (_type == EventTypeYield) {
    dbb0:	beq.n	dbca <EventResponder::triggerEventNotImmediate()+0x2a>
		} else if (_type == EventTypeInterrupt) {
    dbb2:	cmp	r1, #3
    dbb4:	beq.n	dbde <EventResponder::triggerEventNotImmediate()+0x3e>
		_triggered = true;
    dbb6:	movs	r3, #1
    dbb8:	strb	r3, [r0, #29]
		if (doit) __enable_irq();
    dbba:	cbnz	r2, dbbe <EventResponder::triggerEventNotImmediate()+0x1e>
    dbbc:	cpsie	i
}
    dbbe:	pop	{r4, r5}
    dbc0:	bx	lr
    dbc2:	cbnz	r2, dbc8 <EventResponder::triggerEventNotImmediate()+0x28>
    dbc4:	cpsie	i
    dbc6:	bx	lr
    dbc8:	bx	lr
			if (firstYield == nullptr) {
    dbca:	ldr	r4, [pc, #72]	; (dc14 <EventResponder::triggerEventNotImmediate()+0x74>)
    dbcc:	ldr	r1, [r4, #0]
    dbce:	cbz	r1, dbfe <EventResponder::triggerEventNotImmediate()+0x5e>
				_prev = lastYield;
    dbd0:	ldr	r1, [pc, #68]	; (dc18 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
    dbd2:	str	r3, [r0, #20]
				_prev = lastYield;
    dbd4:	ldr	r3, [r1, #0]
				lastYield = this;
    dbd6:	str	r0, [r1, #0]
				_prev = lastYield;
    dbd8:	str	r3, [r0, #24]
				_prev->_next = this;
    dbda:	str	r0, [r3, #20]
				lastYield = this;
    dbdc:	b.n	dbb6 <EventResponder::triggerEventNotImmediate()+0x16>
			if (firstInterrupt == nullptr) {
    dbde:	ldr	r5, [pc, #60]	; (dc1c <EventResponder::triggerEventNotImmediate()+0x7c>)
    dbe0:	ldr	r1, [pc, #60]	; (dc20 <EventResponder::triggerEventNotImmediate()+0x80>)
    dbe2:	ldr	r4, [r5, #0]
    dbe4:	cbz	r4, dc0a <EventResponder::triggerEventNotImmediate()+0x6a>
				_next = nullptr;
    dbe6:	str	r3, [r0, #20]
				_prev = lastInterrupt;
    dbe8:	ldr	r3, [r1, #0]
    dbea:	str	r3, [r0, #24]
				_prev->_next = this;
    dbec:	str	r0, [r3, #20]
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    dbee:	mov.w	r3, #3758153728	; 0xe000e000
    dbf2:	mov.w	r4, #268435456	; 0x10000000
				lastInterrupt = this;
    dbf6:	str	r0, [r1, #0]
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    dbf8:	str.w	r4, [r3, #3332]	; 0xd04
    dbfc:	b.n	dbb6 <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
    dbfe:	ldr	r3, [pc, #24]	; (dc18 <EventResponder::triggerEventNotImmediate()+0x78>)
				firstYield = this;
    dc00:	str	r0, [r4, #0]
				lastYield = this;
    dc02:	str	r0, [r3, #0]
				_prev = nullptr;
    dc04:	strd	r1, r1, [r0, #20]
				lastYield = this;
    dc08:	b.n	dbb6 <EventResponder::triggerEventNotImmediate()+0x16>
				_prev = nullptr;
    dc0a:	strd	r4, r4, [r0, #20]
				firstInterrupt = this;
    dc0e:	str	r0, [r5, #0]
				lastInterrupt = this;
    dc10:	b.n	dbee <EventResponder::triggerEventNotImmediate()+0x4e>
    dc12:	nop
    dc14:	.word	0x2000781c
    dc18:	.word	0x20007828
    dc1c:	.word	0x20007824
    dc20:	.word	0x20007820

0000dc24 <pendablesrvreq_isr>:
{
    dc24:	push	{r4, r5, r6, lr}
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    dc26:	mrs	r1, PRIMASK
		__disable_irq();
    dc2a:	cpsid	i
		EventResponder *first = firstInterrupt;
    dc2c:	ldr	r4, [pc, #56]	; (dc68 <pendablesrvreq_isr+0x44>)
    dc2e:	ldr	r3, [r4, #0]
		if (first) {
    dc30:	cbz	r3, dc62 <pendablesrvreq_isr+0x3e>
				lastInterrupt = nullptr;
    dc32:	ldr	r6, [pc, #56]	; (dc6c <pendablesrvreq_isr+0x48>)
				firstInterrupt->_prev = nullptr;
    dc34:	movs	r5, #0
    dc36:	b.n	dc4a <pendablesrvreq_isr+0x26>
		if (doit) __enable_irq();
    dc38:	cpsie	i
			(*(first->_function))(*first);
    dc3a:	ldr	r2, [r3, #8]
			first->_triggered = false;
    dc3c:	strb	r1, [r3, #29]
			(*(first->_function))(*first);
    dc3e:	blx	r2
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    dc40:	mrs	r1, PRIMASK
		__disable_irq();
    dc44:	cpsid	i
		EventResponder *first = firstInterrupt;
    dc46:	ldr	r3, [r4, #0]
		if (first) {
    dc48:	cbz	r3, dc62 <pendablesrvreq_isr+0x3e>
			firstInterrupt = first->_next;
    dc4a:	ldr	r2, [r3, #20]
    dc4c:	str	r2, [r4, #0]
			if (firstInterrupt) {
    dc4e:	cbz	r2, dc5e <pendablesrvreq_isr+0x3a>
				firstInterrupt->_prev = nullptr;
    dc50:	str	r5, [r2, #24]
			(*(first->_function))(*first);
    dc52:	mov	r0, r3
		if (doit) __enable_irq();
    dc54:	cmp	r1, #0
    dc56:	beq.n	dc38 <pendablesrvreq_isr+0x14>
    dc58:	ldr	r2, [r3, #8]
			first->_triggered = false;
    dc5a:	strb	r5, [r3, #29]
    dc5c:	b.n	dc3e <pendablesrvreq_isr+0x1a>
				lastInterrupt = nullptr;
    dc5e:	str	r2, [r6, #0]
    dc60:	b.n	dc52 <pendablesrvreq_isr+0x2e>
    dc62:	cbnz	r1, dc66 <pendablesrvreq_isr+0x42>
    dc64:	cpsie	i
}
    dc66:	pop	{r4, r5, r6, pc}
    dc68:	.word	0x20007824
    dc6c:	.word	0x20007820

0000dc70 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    dc70:	ldr	r1, [pc, #16]	; (dc84 <systick_isr+0x14>)
	systick_millis_count++;
    dc72:	ldr	r2, [pc, #20]	; (dc88 <systick_isr+0x18>)
	systick_cycle_count = ARM_DWT_CYCCNT;
    dc74:	ldr	r1, [r1, #4]
    dc76:	ldr	r3, [pc, #20]	; (dc8c <systick_isr+0x1c>)
    dc78:	str	r1, [r3, #0]
	systick_millis_count++;
    dc7a:	ldr	r3, [r2, #0]
    dc7c:	adds	r3, #1
    dc7e:	str	r3, [r2, #0]
}
    dc80:	bx	lr
    dc82:	nop
    dc84:	.word	0xe0001000
    dc88:	.word	0x2001598c
    dc8c:	.word	0x20015988

0000dc90 <DMAChannel::begin(bool)>:
#warning "CR is defined as something?"
#endif


void DMAChannel::begin(bool force_initialization)
{
    dc90:	push	{r4}
	uint32_t ch = 0;

	__disable_irq();
    dc92:	cpsid	i
	if (!force_initialization && TCD && channel < DMA_MAX_CHANNELS
    dc94:	cbnz	r1, dca4 <DMAChannel::begin(bool)+0x14>
    dc96:	ldr	r2, [r0, #0]
    dc98:	cbz	r2, dca4 <DMAChannel::begin(bool)+0x14>
    dc9a:	ldrb.w	ip, [r0, #4]
    dc9e:	cmp.w	ip, #15
    dca2:	bls.n	dd5a <DMAChannel::begin(bool)+0xca>
	  && (dma_channel_allocated_mask & (1 << channel))
    dca4:	ldr	r1, [pc, #272]	; (ddb8 <DMAChannel::begin(bool)+0x128>)
    dca6:	ldrh	r3, [r1, #0]
		// DMA channel already allocated
		__enable_irq();
		return;
	}
	while (1) {
		if (!(dma_channel_allocated_mask & (1 << ch))) {
    dca8:	ands.w	r2, r3, #1
    dcac:	beq.n	dcfc <DMAChannel::begin(bool)+0x6c>
    dcae:	lsls	r4, r3, #30
    dcb0:	bpl.n	dcfa <DMAChannel::begin(bool)+0x6a>
    dcb2:	lsls	r2, r3, #29
    dcb4:	bpl.n	dd78 <DMAChannel::begin(bool)+0xe8>
    dcb6:	lsls	r4, r3, #28
    dcb8:	bpl.n	dd7c <DMAChannel::begin(bool)+0xec>
    dcba:	lsls	r2, r3, #27
    dcbc:	bpl.n	dd80 <DMAChannel::begin(bool)+0xf0>
    dcbe:	lsls	r4, r3, #26
    dcc0:	bpl.n	dd84 <DMAChannel::begin(bool)+0xf4>
    dcc2:	lsls	r2, r3, #25
    dcc4:	bpl.n	dd88 <DMAChannel::begin(bool)+0xf8>
    dcc6:	lsls	r4, r3, #24
    dcc8:	bpl.n	dd8c <DMAChannel::begin(bool)+0xfc>
    dcca:	lsls	r2, r3, #23
    dccc:	bpl.n	dd90 <DMAChannel::begin(bool)+0x100>
    dcce:	lsls	r4, r3, #22
    dcd0:	bpl.n	dd94 <DMAChannel::begin(bool)+0x104>
    dcd2:	lsls	r2, r3, #21
    dcd4:	bpl.n	dd98 <DMAChannel::begin(bool)+0x108>
    dcd6:	lsls	r4, r3, #20
    dcd8:	bpl.n	dd74 <DMAChannel::begin(bool)+0xe4>
    dcda:	lsls	r2, r3, #19
    dcdc:	bpl.n	dd9c <DMAChannel::begin(bool)+0x10c>
    dcde:	lsls	r4, r3, #18
    dce0:	bpl.n	dda0 <DMAChannel::begin(bool)+0x110>
    dce2:	lsls	r2, r3, #17
    dce4:	bpl.n	dda4 <DMAChannel::begin(bool)+0x114>
    dce6:	lsrs	r2, r3, #15
    dce8:	beq.n	dda8 <DMAChannel::begin(bool)+0x118>
			dma_channel_allocated_mask |= (1 << ch);
			__enable_irq();
			break;
		}
		if (++ch >= DMA_MAX_CHANNELS) {
			__enable_irq();
    dcea:	cpsie	i
			TCD = (TCD_t *)0;
    dcec:	movs	r2, #0
			channel = DMA_MAX_CHANNELS;
    dcee:	movs	r3, #16
			TCD = (TCD_t *)0;
    dcf0:	str	r2, [r0, #0]
			channel = DMA_MAX_CHANNELS;
    dcf2:	strb	r3, [r0, #4]
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
}
    dcf4:	ldr.w	r4, [sp], #4
    dcf8:	bx	lr
		if (++ch >= DMA_MAX_CHANNELS) {
    dcfa:	movs	r2, #1
			dma_channel_allocated_mask |= (1 << ch);
    dcfc:	mov.w	ip, #1
    dd00:	lsl.w	ip, ip, r2
    dd04:	orr.w	r3, r3, ip
    dd08:	strh	r3, [r1, #0]
			__enable_irq();
    dd0a:	cpsie	i
	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    dd0c:	ldr	r1, [pc, #172]	; (ddbc <DMAChannel::begin(bool)+0x12c>)
	channel = ch;
    dd0e:	uxtb.w	ip, r2
    dd12:	strb.w	ip, [r0, #4]
	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    dd16:	ldr	r3, [r1, #124]	; 0x7c
    dd18:	orr.w	r3, r3, #192	; 0xc0
    dd1c:	str	r3, [r1, #124]	; 0x7c
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
    dd1e:	sub.w	r1, r1, #81920	; 0x14000
    dd22:	movw	r3, #1154	; 0x482
    dd26:	str	r3, [r1, #0]
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    dd28:	ldr	r3, [pc, #148]	; (ddc0 <DMAChannel::begin(bool)+0x130>)
	DMA_CERQ = ch;
    dd2a:	strb.w	ip, [r1, #26]
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    dd2e:	add	r3, r2
	DMA_CERR = ch;
    dd30:	strb.w	ip, [r1, #30]
	DMA_CEEI = ch;
    dd34:	strb.w	ip, [r1, #24]
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    dd38:	lsls	r3, r3, #5
	DMA_CINT = ch;
    dd3a:	strb.w	ip, [r1, #31]
}
    dd3e:	ldr.w	r4, [sp], #4
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    dd42:	str	r3, [r0, #0]
	*p++ = 0;
    dd44:	vldr	d7, [pc, #104]	; ddb0 <DMAChannel::begin(bool)+0x120>
    dd48:	vstr	d7, [r3]
    dd4c:	vstr	d7, [r3, #8]
    dd50:	vstr	d7, [r3, #16]
    dd54:	vstr	d7, [r3, #24]
}
    dd58:	bx	lr
	  && (dma_channel_allocated_mask & (1 << channel))
    dd5a:	ldr	r1, [pc, #92]	; (ddb8 <DMAChannel::begin(bool)+0x128>)
    dd5c:	ldrh	r3, [r1, #0]
    dd5e:	asr.w	r4, r3, ip
    dd62:	lsls	r4, r4, #31
    dd64:	bpl.n	dca8 <DMAChannel::begin(bool)+0x18>
	  && (uint32_t)TCD == (uint32_t)(0x400E9000 + channel * 32)) {
    dd66:	ldr	r4, [pc, #88]	; (ddc0 <DMAChannel::begin(bool)+0x130>)
    dd68:	add	r4, ip
    dd6a:	cmp.w	r2, r4, lsl #5
    dd6e:	bne.n	dca8 <DMAChannel::begin(bool)+0x18>
		__enable_irq();
    dd70:	cpsie	i
		return;
    dd72:	b.n	dcf4 <DMAChannel::begin(bool)+0x64>
		if (++ch >= DMA_MAX_CHANNELS) {
    dd74:	movs	r2, #11
    dd76:	b.n	dcfc <DMAChannel::begin(bool)+0x6c>
    dd78:	movs	r2, #2
    dd7a:	b.n	dcfc <DMAChannel::begin(bool)+0x6c>
    dd7c:	movs	r2, #3
    dd7e:	b.n	dcfc <DMAChannel::begin(bool)+0x6c>
    dd80:	movs	r2, #4
    dd82:	b.n	dcfc <DMAChannel::begin(bool)+0x6c>
    dd84:	movs	r2, #5
    dd86:	b.n	dcfc <DMAChannel::begin(bool)+0x6c>
    dd88:	movs	r2, #6
    dd8a:	b.n	dcfc <DMAChannel::begin(bool)+0x6c>
    dd8c:	movs	r2, #7
    dd8e:	b.n	dcfc <DMAChannel::begin(bool)+0x6c>
    dd90:	movs	r2, #8
    dd92:	b.n	dcfc <DMAChannel::begin(bool)+0x6c>
    dd94:	movs	r2, #9
    dd96:	b.n	dcfc <DMAChannel::begin(bool)+0x6c>
    dd98:	movs	r2, #10
    dd9a:	b.n	dcfc <DMAChannel::begin(bool)+0x6c>
    dd9c:	movs	r2, #12
    dd9e:	b.n	dcfc <DMAChannel::begin(bool)+0x6c>
    dda0:	movs	r2, #13
    dda2:	b.n	dcfc <DMAChannel::begin(bool)+0x6c>
    dda4:	movs	r2, #14
    dda6:	b.n	dcfc <DMAChannel::begin(bool)+0x6c>
    dda8:	movs	r2, #15
    ddaa:	b.n	dcfc <DMAChannel::begin(bool)+0x6c>
    ddac:	nop.w
	...
    ddb8:	.word	0x20015d00
    ddbc:	.word	0x400fc000
    ddc0:	.word	0x02007480

0000ddc4 <DMAChannel::release()>:

void DMAChannel::release(void)
{
	if (channel >= DMA_MAX_CHANNELS) return;
    ddc4:	ldrb	r3, [r0, #4]
    ddc6:	cmp	r3, #15
    ddc8:	bhi.n	ddee <DMAChannel::release()+0x2a>
	DMA_CERQ = channel;
    ddca:	ldr	r2, [pc, #36]	; (ddf0 <DMAChannel::release()+0x2c>)
    ddcc:	strb	r3, [r2, #26]
	__disable_irq();
    ddce:	cpsid	i
	dma_channel_allocated_mask &= ~(1 << channel);
    ddd0:	ldr	r1, [pc, #32]	; (ddf4 <DMAChannel::release()+0x30>)
    ddd2:	movs	r2, #1
    ddd4:	ldrb.w	ip, [r0, #4]
    ddd8:	ldrh	r3, [r1, #0]
    ddda:	lsl.w	r2, r2, ip
    ddde:	bic.w	r3, r3, r2
    dde2:	strh	r3, [r1, #0]
	__enable_irq();
    dde4:	cpsie	i
	channel = DMA_MAX_CHANNELS;
    dde6:	movs	r2, #16
	TCD = (TCD_t *)0;
    dde8:	movs	r3, #0
	channel = DMA_MAX_CHANNELS;
    ddea:	strb	r2, [r0, #4]
	TCD = (TCD_t *)0;
    ddec:	str	r3, [r0, #0]
}
    ddee:	bx	lr
    ddf0:	.word	0x400e8000
    ddf4:	.word	0x20015d00

0000ddf8 <usb_serial_class::clear()>:
        virtual void clear(void) { usb_serial_flush_input(); }
    ddf8:	b.w	b84c <usb_serial_flush_input>

0000ddfc <usb_serial_class::peek()>:
        virtual int peek() { return usb_serial_peekchar(); }
    ddfc:	b.w	b7f0 <usb_serial_peekchar>

0000de00 <usb_serial_class::read()>:
        virtual int read() { return usb_serial_getchar(); }
    de00:	b.w	b918 <usb_serial_getchar>

0000de04 <usb_serial_class::available()>:
        virtual int available() { return usb_serial_available(); }
    de04:	b.w	b834 <usb_serial_available>

0000de08 <usb_serial_class::flush()>:
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    de08:	b.w	b9cc <usb_serial_flush_output>

0000de0c <usb_serial_class::availableForWrite()>:
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    de0c:	b.w	b97c <usb_serial_write_buffer_free>

0000de10 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    de10:	mov	r0, r1
    de12:	mov	r1, r2
    de14:	b.w	b964 <usb_serial_write>

0000de18 <usb_serial_class::write(unsigned char)>:
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    de18:	mov	r0, r1
    de1a:	b.w	b938 <usb_serial_putchar>
    de1e:	nop

0000de20 <breakTime(unsigned long, DateTimeFields&)>:
  uint8_t year;
  uint8_t month, monthLength;
  unsigned long days;

  tm.sec = time % 60;
  time /= 60; // now it is minutes
    de20:	ldr	r2, [pc, #420]	; (dfc8 <breakTime(unsigned long, DateTimeFields&)+0x1a8>)
{
    de22:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  time /= 60; // now it is minutes
    de26:	umull	r4, r3, r2, r0
  tm.min = time % 60;
  time /= 60; // now it is hours
  tm.hour = time % 24;
  time /= 24; // now it is days
    de2a:	ldr	r4, [pc, #416]	; (dfcc <breakTime(unsigned long, DateTimeFields&)+0x1ac>)
  tm.wday = ((time + 4) % 7);  // Sunday is day 0

  year = 0;
  days = 0;
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    de2c:	movw	sl, #365	; 0x16d
    de30:	ldr.w	r8, [pc, #424]	; dfdc <breakTime(unsigned long, DateTimeFields&)+0x1bc>
  time /= 60; // now it is minutes
    de34:	lsrs	r7, r3, #5
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    de36:	ldr.w	r9, [pc, #416]	; dfd8 <breakTime(unsigned long, DateTimeFields&)+0x1b8>
  time /= 60; // now it is hours
    de3a:	umull	r3, r2, r2, r7
  tm.sec = time % 60;
    de3e:	rsb	r5, r7, r7, lsl #4
  time /= 60; // now it is hours
    de42:	lsrs	r2, r2, #5
  tm.sec = time % 60;
    de44:	sub.w	r0, r0, r5, lsl #2
  time /= 24; // now it is days
    de48:	umull	r3, r4, r4, r2
  tm.wday = ((time + 4) % 7);  // Sunday is day 0
    de4c:	ldr	r3, [pc, #384]	; (dfd0 <breakTime(unsigned long, DateTimeFields&)+0x1b0>)
  time /= 24; // now it is days
    de4e:	lsrs	r4, r4, #4
  tm.wday = ((time + 4) % 7);  // Sunday is day 0
    de50:	adds	r6, r4, #4
    de52:	umull	r5, r3, r3, r6
  tm.sec = time % 60;
    de56:	movs	r5, #0
    de58:	bfi	r5, r0, #0, #8
  tm.wday = ((time + 4) % 7);  // Sunday is day 0
    de5c:	subs	r0, r6, r3
    de5e:	add.w	r3, r3, r0, lsr #1
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    de62:	movs	r0, #0
  tm.wday = ((time + 4) % 7);  // Sunday is day 0
    de64:	lsrs	r3, r3, #2
    de66:	rsb	r3, r3, r3, lsl #3
    de6a:	subs	r6, r6, r3
  tm.min = time % 60;
    de6c:	rsb	r3, r2, r2, lsl #4
    de70:	sub.w	r3, r7, r3, lsl #2
    de74:	ldr	r7, [pc, #348]	; (dfd4 <breakTime(unsigned long, DateTimeFields&)+0x1b4>)
  tm.sec = time % 60;
    de76:	bfi	r5, r3, #8, #8
  tm.hour = time % 24;
    de7a:	add.w	r3, r4, r4, lsl #1
    de7e:	sub.w	r2, r2, r3, lsl #3
  days = 0;
    de82:	mov	r3, r0
  tm.sec = time % 60;
    de84:	bfi	r5, r2, #16, #8
    de88:	bfi	r5, r6, #24, #8
    de8c:	str	r5, [r1, #0]
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    de8e:	uxtb.w	lr, r0
    de92:	movw	ip, #365	; 0x16d
    de96:	addw	r2, lr, #1970	; 0x7b2
    de9a:	ands.w	r6, r2, #3
    de9e:	mul.w	r5, r7, r2
    dea2:	bne.n	deb6 <breakTime(unsigned long, DateTimeFields&)+0x96>
    dea4:	cmp.w	r8, r5, ror #2
    dea8:	mov.w	ip, #366	; 0x16e
    deac:	bcc.n	deb6 <breakTime(unsigned long, DateTimeFields&)+0x96>
    deae:	cmp.w	r9, r5, ror #4
    deb2:	it	cc
    deb4:	movcc	ip, sl
    deb6:	add	r3, ip
    deb8:	adds	r0, #1
    deba:	cmp	r4, r3
    debc:	bcs.n	de8e <breakTime(unsigned long, DateTimeFields&)+0x6e>
    year++;
  }
  tm.year = year + 70; // year is offset from 1970
    debe:	add.w	lr, lr, #70	; 0x46
    dec2:	ldr	r0, [pc, #272]	; (dfd4 <breakTime(unsigned long, DateTimeFields&)+0x1b4>)
    dec4:	strb.w	lr, [r1, #6]

  days -= LEAP_YEAR(year) ? 366 : 365;
    dec8:	cbz	r6, df3c <breakTime(unsigned long, DateTimeFields&)+0x11c>
  time  -= days; // now it is days in this year, starting at 0
    deca:	subs	r3, r4, r3
    decc:	addw	r4, r3, #365	; 0x16d
      }
    } else {
      monthLength = monthDays[month];
    }

    if (time >= monthLength) {
    ded0:	cmp	r4, #30
    ded2:	bls.n	df88 <breakTime(unsigned long, DateTimeFields&)+0x168>
      time -= monthLength;
    ded4:	add.w	r2, r3, #334	; 0x14e
    if (time >= monthLength) {
    ded8:	cmp	r2, #27
    deda:	bls.n	df5e <breakTime(unsigned long, DateTimeFields&)+0x13e>
      time -= monthLength;
    dedc:	add.w	r2, r3, #306	; 0x132
    if (time >= monthLength) {
    dee0:	cmp	r2, #30
    dee2:	bls.n	df94 <breakTime(unsigned long, DateTimeFields&)+0x174>
      time -= monthLength;
    dee4:	addw	r2, r3, #275	; 0x113
    if (time >= monthLength) {
    dee8:	cmp	r2, #29
    deea:	bls.n	df9a <breakTime(unsigned long, DateTimeFields&)+0x17a>
      time -= monthLength;
    deec:	add.w	r2, r3, #245	; 0xf5
    if (time >= monthLength) {
    def0:	cmp	r2, #30
    def2:	bls.n	dfa0 <breakTime(unsigned long, DateTimeFields&)+0x180>
      time -= monthLength;
    def4:	add.w	r2, r3, #214	; 0xd6
    if (time >= monthLength) {
    def8:	cmp	r2, #29
    defa:	bls.n	df8e <breakTime(unsigned long, DateTimeFields&)+0x16e>
      time -= monthLength;
    defc:	add.w	r2, r3, #184	; 0xb8
    if (time >= monthLength) {
    df00:	cmp	r2, #30
    df02:	bls.n	dfa6 <breakTime(unsigned long, DateTimeFields&)+0x186>
      time -= monthLength;
    df04:	add.w	r2, r3, #153	; 0x99
    if (time >= monthLength) {
    df08:	cmp	r2, #30
    df0a:	bls.n	dfac <breakTime(unsigned long, DateTimeFields&)+0x18c>
      time -= monthLength;
    df0c:	add.w	r2, r3, #122	; 0x7a
    if (time >= monthLength) {
    df10:	cmp	r2, #29
    df12:	bls.n	dfb2 <breakTime(unsigned long, DateTimeFields&)+0x192>
      time -= monthLength;
    df14:	add.w	r2, r3, #92	; 0x5c
    if (time >= monthLength) {
    df18:	cmp	r2, #30
    df1a:	bls.n	dfb8 <breakTime(unsigned long, DateTimeFields&)+0x198>
      time -= monthLength;
    df1c:	add.w	r2, r3, #61	; 0x3d
    if (time >= monthLength) {
    df20:	cmp	r2, #29
    df22:	bls.n	dfbe <breakTime(unsigned long, DateTimeFields&)+0x19e>
      time -= monthLength;
    df24:	add.w	r2, r3, #31
    if (time >= monthLength) {
    df28:	cmp	r2, #30
    df2a:	itet	ls
    df2c:	movls	r3, r2
    df2e:	movhi	r6, #12
    df30:	movls	r6, #11
    } else {
        break;
    }
  }
  tm.mon = month;  // jan is month 0
  tm.mday = time + 1;     // day of month
    df32:	adds	r3, #1
  tm.mon = month;  // jan is month 0
    df34:	strb	r6, [r1, #5]
  tm.mday = time + 1;     // day of month
    df36:	strb	r3, [r1, #4]
}
    df38:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    df3c:	mul.w	r2, r0, r2
  days -= LEAP_YEAR(year) ? 366 : 365;
    df40:	add.w	r0, r0, #1073741824	; 0x40000000
    df44:	subs	r0, #1
    df46:	cmp.w	r0, r2, ror #2
    df4a:	bcs.n	df64 <breakTime(unsigned long, DateTimeFields&)+0x144>
  time  -= days; // now it is days in this year, starting at 0
    df4c:	subs	r3, r4, r3
    df4e:	add.w	r4, r3, #366	; 0x16e
    if (time >= monthLength) {
    df52:	cmp	r4, #30
    df54:	bls.n	dfc4 <breakTime(unsigned long, DateTimeFields&)+0x1a4>
      time -= monthLength;
    df56:	addw	r2, r3, #335	; 0x14f
    if (time >= monthLength) {
    df5a:	cmp	r2, #28
    df5c:	bhi.n	dedc <breakTime(unsigned long, DateTimeFields&)+0xbc>
    df5e:	mov	r3, r2
    df60:	movs	r6, #1
    df62:	b.n	df32 <breakTime(unsigned long, DateTimeFields&)+0x112>
  days -= LEAP_YEAR(year) ? 366 : 365;
    df64:	ldr	r0, [pc, #112]	; (dfd8 <breakTime(unsigned long, DateTimeFields&)+0x1b8>)
    df66:	cmp.w	r0, r2, ror #4
    df6a:	bcc.n	df7a <breakTime(unsigned long, DateTimeFields&)+0x15a>
  time  -= days; // now it is days in this year, starting at 0
    df6c:	subs	r3, r4, r3
    df6e:	add.w	r2, r3, #366	; 0x16e
    if (time >= monthLength) {
    df72:	cmp	r2, #30
    df74:	bhi.n	df56 <breakTime(unsigned long, DateTimeFields&)+0x136>
    df76:	mov	r3, r2
    df78:	b.n	df32 <breakTime(unsigned long, DateTimeFields&)+0x112>
  time  -= days; // now it is days in this year, starting at 0
    df7a:	subs	r3, r4, r3
    df7c:	addw	r2, r3, #365	; 0x16d
    if (time >= monthLength) {
    df80:	cmp	r2, #30
    df82:	bhi.n	ded4 <breakTime(unsigned long, DateTimeFields&)+0xb4>
    df84:	mov	r3, r2
    df86:	b.n	df32 <breakTime(unsigned long, DateTimeFields&)+0x112>
  time  -= days; // now it is days in this year, starting at 0
    df88:	mov	r3, r4
  for (month=0; month<12; month++) {
    df8a:	movs	r6, #0
    df8c:	b.n	df32 <breakTime(unsigned long, DateTimeFields&)+0x112>
    if (time >= monthLength) {
    df8e:	mov	r3, r2
    df90:	movs	r6, #5
    df92:	b.n	df32 <breakTime(unsigned long, DateTimeFields&)+0x112>
    df94:	mov	r3, r2
    df96:	movs	r6, #2
    df98:	b.n	df32 <breakTime(unsigned long, DateTimeFields&)+0x112>
    df9a:	mov	r3, r2
    df9c:	movs	r6, #3
    df9e:	b.n	df32 <breakTime(unsigned long, DateTimeFields&)+0x112>
    dfa0:	mov	r3, r2
    dfa2:	movs	r6, #4
    dfa4:	b.n	df32 <breakTime(unsigned long, DateTimeFields&)+0x112>
    dfa6:	mov	r3, r2
    dfa8:	movs	r6, #6
    dfaa:	b.n	df32 <breakTime(unsigned long, DateTimeFields&)+0x112>
    dfac:	mov	r3, r2
    dfae:	movs	r6, #7
    dfb0:	b.n	df32 <breakTime(unsigned long, DateTimeFields&)+0x112>
    dfb2:	mov	r3, r2
    dfb4:	movs	r6, #8
    dfb6:	b.n	df32 <breakTime(unsigned long, DateTimeFields&)+0x112>
    dfb8:	mov	r3, r2
    dfba:	movs	r6, #9
    dfbc:	b.n	df32 <breakTime(unsigned long, DateTimeFields&)+0x112>
    dfbe:	mov	r3, r2
    dfc0:	movs	r6, #10
    dfc2:	b.n	df32 <breakTime(unsigned long, DateTimeFields&)+0x112>
  time  -= days; // now it is days in this year, starting at 0
    dfc4:	mov	r3, r4
    dfc6:	b.n	df32 <breakTime(unsigned long, DateTimeFields&)+0x112>
    dfc8:	.word	0x88888889
    dfcc:	.word	0xaaaaaaab
    dfd0:	.word	0x24924925
    dfd4:	.word	0xc28f5c29
    dfd8:	.word	0x00a3d70a
    dfdc:	.word	0x028f5c28

0000dfe0 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    dfe0:	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    dfe2:	bl	1238 <setup>
	while (1) {
		loop();
    dfe6:	bl	1068 <loop>
		yield();
    dfea:	bl	daa4 <yield>
	while (1) {
    dfee:	b.n	dfe6 <main+0x6>

0000dff0 <AudioStream::update_all()>:
	static void update_all(void) { NVIC_SET_PENDING(IRQ_SOFTWARE); }
    dff0:	mov.w	r3, #3758153728	; 0xe000e000
    dff4:	movs	r2, #64	; 0x40
    dff6:	str.w	r2, [r3, #520]	; 0x208
    dffa:	bx	lr

0000dffc <software_isr()>:
}

AudioStream * AudioStream::first_update = NULL;

void software_isr(void) // AudioStream::update_all()
{
    dffc:	push	{r3, r4, r5, r6, r7, lr}
	AudioStream *p;

	uint32_t totalcycles = ARM_DWT_CYCCNT;
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
    dffe:	ldr	r3, [pc, #80]	; (e050 <software_isr()+0x54>)
	uint32_t totalcycles = ARM_DWT_CYCCNT;
    e000:	ldr	r5, [pc, #80]	; (e054 <software_isr()+0x58>)
	for (p = AudioStream::first_update; p; p = p->next_update) {
    e002:	ldr	r4, [r3, #0]
	uint32_t totalcycles = ARM_DWT_CYCCNT;
    e004:	ldr	r6, [r5, #4]
	for (p = AudioStream::first_update; p; p = p->next_update) {
    e006:	cbz	r4, e030 <software_isr()+0x34>
		if (p->active) {
    e008:	ldrb	r3, [r4, #8]
			uint32_t cycles = ARM_DWT_CYCCNT;
			p->update();
    e00a:	mov	r0, r4
		if (p->active) {
    e00c:	cbz	r3, e02a <software_isr()+0x2e>
			p->update();
    e00e:	ldr	r3, [r4, #0]
			uint32_t cycles = ARM_DWT_CYCCNT;
    e010:	ldr	r7, [r5, #4]
			p->update();
    e012:	ldr	r3, [r3, #0]
    e014:	blx	r3
			// TODO: traverse inputQueueArray and release
			// any input blocks that weren't consumed?
			cycles = (ARM_DWT_CYCCNT - cycles) >> 6;
    e016:	ldr	r3, [r5, #4]
			p->cpu_cycles = cycles;
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
    e018:	ldrh	r1, [r4, #6]
			cycles = (ARM_DWT_CYCCNT - cycles) >> 6;
    e01a:	subs	r3, r3, r7
			p->cpu_cycles = cycles;
    e01c:	ubfx	r2, r3, #6, #16
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
    e020:	cmp.w	r1, r3, lsr #6
			p->cpu_cycles = cycles;
    e024:	strh	r2, [r4, #4]
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
    e026:	it	cc
    e028:	strhcc	r2, [r4, #6]
	for (p = AudioStream::first_update; p; p = p->next_update) {
    e02a:	ldr	r4, [r4, #20]
    e02c:	cmp	r4, #0
    e02e:	bne.n	e008 <software_isr()+0xc>
		}
	}
	//digitalWriteFast(2, LOW);
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 6;
    e030:	ldr	r3, [pc, #32]	; (e054 <software_isr()+0x58>)
	AudioStream::cpu_cycles_total = totalcycles;
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    e032:	ldr	r2, [pc, #36]	; (e058 <software_isr()+0x5c>)
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 6;
    e034:	ldr	r3, [r3, #4]
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    e036:	ldrh	r0, [r2, #0]
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 6;
    e038:	subs	r3, r3, r6
	AudioStream::cpu_cycles_total = totalcycles;
    e03a:	ldr	r4, [pc, #32]	; (e05c <software_isr()+0x60>)
    e03c:	ubfx	r1, r3, #6, #16
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    e040:	cmp.w	r0, r3, lsr #6
	AudioStream::cpu_cycles_total = totalcycles;
    e044:	strh	r1, [r4, #0]
		AudioStream::cpu_cycles_total_max = totalcycles;
    e046:	it	cc
    e048:	strhcc	r1, [r2, #0]

	asm("DSB");
    e04a:	dsb	sy
}
    e04e:	pop	{r3, r4, r5, r6, r7, pc}
    e050:	.word	0x20007728
    e054:	.word	0xe0001000
    e058:	.word	0x20015cf6
    e05c:	.word	0x20015cf4

0000e060 <AudioStream::allocate()>:
{
    e060:	push	{r4, r5}
	__disable_irq();
    e062:	cpsid	i
	index = memory_pool_first_mask;
    e064:	ldr	r5, [pc, #144]	; (e0f8 <AudioStream::allocate()+0x98>)
	p += index;
    e066:	ldr	r4, [pc, #148]	; (e0fc <AudioStream::allocate()+0x9c>)
	index = memory_pool_first_mask;
    e068:	ldrh	r2, [r5, #0]
		if (p >= end) {
    e06a:	add.w	r1, r4, #112	; 0x70
	p += index;
    e06e:	add.w	r3, r4, r2, lsl #2
		if (p >= end) {
    e072:	cmp	r3, r1
    e074:	bcs.n	e0f0 <AudioStream::allocate()+0x90>
    e076:	add.w	r1, r4, #111	; 0x6f
    e07a:	adds	r0, r2, #1
    e07c:	subs	r1, r1, r3
    e07e:	add.w	r0, r0, r1, lsr #2
    e082:	b.n	e08a <AudioStream::allocate()+0x2a>
		index++;
    e084:	adds	r2, #1
		if (p >= end) {
    e086:	cmp	r2, r0
    e088:	beq.n	e0f0 <AudioStream::allocate()+0x90>
		index++;
    e08a:	mov	ip, r3
		avail = *p;
    e08c:	ldr.w	r1, [r3], #4
		if (avail) break;
    e090:	cmp	r1, #0
    e092:	beq.n	e084 <AudioStream::allocate()+0x24>
	n = __builtin_clz(avail);
    e094:	clz	r0, r1
	avail &= ~(0x80000000 >> n);
    e098:	mov.w	r3, #2147483648	; 0x80000000
    e09c:	lsrs	r3, r0
    e09e:	bic.w	r1, r1, r3
	*p = avail;
    e0a2:	str.w	r1, [ip]
	if (!avail) index++;
    e0a6:	cbnz	r1, e0aa <AudioStream::allocate()+0x4a>
    e0a8:	adds	r2, #1
	used = memory_used + 1;
    e0aa:	ldr	r3, [pc, #84]	; (e100 <AudioStream::allocate()+0xa0>)
	memory_pool_first_mask = index;
    e0ac:	strh	r2, [r5, #0]
	used = memory_used + 1;
    e0ae:	ldrh	r2, [r3, #0]
	memory_used = used;
    e0b0:	adds	r2, #1
    e0b2:	uxth	r1, r2
    e0b4:	strh	r1, [r3, #0]
	__enable_irq();
    e0b6:	cpsie	i
	index = p - memory_pool_available_mask;
    e0b8:	sub.w	ip, ip, r4
	block = memory_pool + ((index << 5) + (31 - n));
    e0bc:	movw	r3, #8060	; 0x1f7c
    e0c0:	rsb	r4, r0, r0, lsl #24
	index = p - memory_pool_available_mask;
    e0c4:	mov.w	ip, ip, asr #2
	block = memory_pool + ((index << 5) + (31 - n));
    e0c8:	rsb	r0, r0, r4, lsl #6
	block->ref_count = 1;
    e0cc:	movs	r4, #1
	block = memory_pool + ((index << 5) + (31 - n));
    e0ce:	add.w	ip, ip, ip, lsl #6
    e0d2:	add.w	r3, r3, ip, lsl #7
    e0d6:	add.w	r3, r3, r0, lsl #2
    e0da:	ldr	r0, [pc, #40]	; (e104 <AudioStream::allocate()+0xa4>)
    e0dc:	ldr	r0, [r0, #0]
	block->ref_count = 1;
    e0de:	strb	r4, [r0, r3]
	block = memory_pool + ((index << 5) + (31 - n));
    e0e0:	add	r0, r3
	if (used > memory_used_max) memory_used_max = used;
    e0e2:	ldr	r3, [pc, #36]	; (e108 <AudioStream::allocate()+0xa8>)
    e0e4:	ldrh	r4, [r3, #0]
    e0e6:	cmp	r4, r2
}
    e0e8:	pop	{r4, r5}
	if (used > memory_used_max) memory_used_max = used;
    e0ea:	it	cc
    e0ec:	strhcc	r1, [r3, #0]
}
    e0ee:	bx	lr
			__enable_irq();
    e0f0:	cpsie	i
			return NULL;
    e0f2:	movs	r0, #0
}
    e0f4:	pop	{r4, r5}
    e0f6:	bx	lr
    e0f8:	.word	0x20015cf8
    e0fc:	.word	0x2000772c
    e100:	.word	0x20015cf0
    e104:	.word	0x20007724
    e108:	.word	0x20015cf2

0000e10c <AudioStream::release(audio_block_struct*)>:
	uint32_t mask = (0x80000000 >> (31 - (block->memory_pool_index & 0x1F)));
    e10c:	ldrh	r2, [r0, #2]
	__disable_irq();
    e10e:	cpsid	i
	if (block->ref_count > 1) {
    e110:	ldrb	r3, [r0, #0]
    e112:	cmp	r3, #1
    e114:	bls.n	e11e <AudioStream::release(audio_block_struct*)+0x12>
		block->ref_count--;
    e116:	subs	r3, #1
    e118:	strb	r3, [r0, #0]
	__enable_irq();
    e11a:	cpsie	i
}
    e11c:	bx	lr
	uint32_t mask = (0x80000000 >> (31 - (block->memory_pool_index & 0x1F)));
    e11e:	mvns	r1, r2
	uint32_t index = block->memory_pool_index >> 5;
    e120:	lsrs	r3, r2, #5
		memory_pool_available_mask[index] |= mask;
    e122:	ldr	r0, [pc, #44]	; (e150 <AudioStream::release(audio_block_struct*)+0x44>)
	uint32_t mask = (0x80000000 >> (31 - (block->memory_pool_index & 0x1F)));
    e124:	mov.w	r2, #2147483648	; 0x80000000
    e128:	and.w	r1, r1, #31
    e12c:	lsrs	r2, r1
		memory_pool_available_mask[index] |= mask;
    e12e:	ldr.w	r1, [r0, r3, lsl #2]
    e132:	orrs	r2, r1
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
    e134:	ldr	r1, [pc, #28]	; (e154 <AudioStream::release(audio_block_struct*)+0x48>)
    e136:	ldrh.w	ip, [r1]
		memory_pool_available_mask[index] |= mask;
    e13a:	str.w	r2, [r0, r3, lsl #2]
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
    e13e:	cmp	ip, r3
		memory_used--;
    e140:	ldr	r2, [pc, #20]	; (e158 <AudioStream::release(audio_block_struct*)+0x4c>)
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
    e142:	it	hi
    e144:	strhhi	r3, [r1, #0]
		memory_used--;
    e146:	ldrh	r3, [r2, #0]
    e148:	subs	r3, #1
    e14a:	strh	r3, [r2, #0]
	__enable_irq();
    e14c:	cpsie	i
}
    e14e:	bx	lr
    e150:	.word	0x2000772c
    e154:	.word	0x20015cf8
    e158:	.word	0x20015cf0

0000e15c <AudioStream::transmit(audio_block_struct*, unsigned char)>:
	for (AudioConnection *c = destination_list; c != NULL; c = c->next_dest) {
    e15c:	ldr	r3, [r0, #12]
    e15e:	cbnz	r3, e166 <AudioStream::transmit(audio_block_struct*, unsigned char)+0xa>
    e160:	b.n	e19e <AudioStream::transmit(audio_block_struct*, unsigned char)+0x42>
    e162:	ldr	r3, [r3, #12]
    e164:	cbz	r3, e1a0 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x44>
		if (c->src_index == index) {
    e166:	ldrb	r0, [r3, #8]
    e168:	cmp	r0, r2
    e16a:	bne.n	e162 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x6>
{
    e16c:	push	{r4}
			if (c->dst->inputQueue[c->dest_index] == NULL) {
    e16e:	ldr	r0, [r3, #4]
    e170:	ldrb.w	ip, [r3, #9]
    e174:	ldr	r0, [r0, #16]
    e176:	ldr.w	r4, [r0, ip, lsl #2]
    e17a:	cbz	r4, e192 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x36>
	for (AudioConnection *c = destination_list; c != NULL; c = c->next_dest) {
    e17c:	ldr	r3, [r3, #12]
    e17e:	cbz	r3, e18c <AudioStream::transmit(audio_block_struct*, unsigned char)+0x30>
		if (c->src_index == index) {
    e180:	ldrb	r0, [r3, #8]
    e182:	cmp	r0, r2
    e184:	beq.n	e16e <AudioStream::transmit(audio_block_struct*, unsigned char)+0x12>
	for (AudioConnection *c = destination_list; c != NULL; c = c->next_dest) {
    e186:	ldr	r3, [r3, #12]
    e188:	cmp	r3, #0
    e18a:	bne.n	e180 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x24>
}
    e18c:	ldr.w	r4, [sp], #4
    e190:	bx	lr
				c->dst->inputQueue[c->dest_index] = block;
    e192:	str.w	r1, [r0, ip, lsl #2]
				block->ref_count++;
    e196:	ldrb	r0, [r1, #0]
    e198:	adds	r0, #1
    e19a:	strb	r0, [r1, #0]
    e19c:	b.n	e17c <AudioStream::transmit(audio_block_struct*, unsigned char)+0x20>
    e19e:	bx	lr
    e1a0:	bx	lr
    e1a2:	nop

0000e1a4 <AudioStream::receiveWritable(unsigned int)>:
{
    e1a4:	push	{r3, r4, r5, lr}
	if (index >= num_inputs) return NULL;
    e1a6:	ldrb	r3, [r0, #9]
    e1a8:	cmp	r3, r1
    e1aa:	bls.n	e1e4 <AudioStream::receiveWritable(unsigned int)+0x40>
	in = inputQueue[index];
    e1ac:	ldr	r3, [r0, #16]
	inputQueue[index] = NULL;
    e1ae:	movs	r2, #0
	in = inputQueue[index];
    e1b0:	ldr.w	r4, [r3, r1, lsl #2]
	inputQueue[index] = NULL;
    e1b4:	str.w	r2, [r3, r1, lsl #2]
	if (in && in->ref_count > 1) {
    e1b8:	cbz	r4, e1e4 <AudioStream::receiveWritable(unsigned int)+0x40>
    e1ba:	ldrb	r3, [r4, #0]
    e1bc:	cmp	r3, #1
    e1be:	bhi.n	e1c4 <AudioStream::receiveWritable(unsigned int)+0x20>
}
    e1c0:	mov	r0, r4
    e1c2:	pop	{r3, r4, r5, pc}
		p = allocate();
    e1c4:	bl	e060 <AudioStream::allocate()>
		if (p) memcpy(p->data, in->data, sizeof(p->data));
    e1c8:	mov	r5, r0
    e1ca:	cbz	r0, e1d8 <AudioStream::receiveWritable(unsigned int)+0x34>
    e1cc:	mov.w	r2, #256	; 0x100
    e1d0:	adds	r1, r4, #4
    e1d2:	adds	r0, #4
    e1d4:	bl	b09c <memcpy>
		in->ref_count--;
    e1d8:	ldrb	r3, [r4, #0]
    e1da:	subs	r3, #1
    e1dc:	strb	r3, [r4, #0]
		p = allocate();
    e1de:	mov	r4, r5
}
    e1e0:	mov	r0, r4
    e1e2:	pop	{r3, r4, r5, pc}
	if (index >= num_inputs) return NULL;
    e1e4:	movs	r4, #0
}
    e1e6:	mov	r0, r4
    e1e8:	pop	{r3, r4, r5, pc}
    e1ea:	nop

0000e1ec <AudioConnection::AudioConnection(AudioStream&, unsigned char, AudioStream&, unsigned char)>:
AudioConnection::AudioConnection(AudioStream &source, unsigned char sourceOutput,
    e1ec:	push	{r4, r5}
	next_dest = AudioStream::unused;
    e1ee:	ldr	r4, [pc, #176]	; (e2a0 <AudioConnection::AudioConnection(AudioStream&, unsigned char, AudioStream&, unsigned char)+0xb4>)
		src = &source;
    e1f0:	str	r1, [r0, #0]
		src_index = sourceOutput;
    e1f2:	strb	r2, [r0, #8]
AudioConnection::AudioConnection(AudioStream &source, unsigned char sourceOutput,
    e1f4:	ldrb.w	r1, [sp, #8]
	next_dest = AudioStream::unused;
    e1f8:	ldr	r2, [r4, #0]
		dst = &destination;
    e1fa:	str	r3, [r0, #4]
		if (dest_index >= dst->num_inputs) // input number too high
    e1fc:	ldrb	r3, [r3, #9]
	next_dest = AudioStream::unused;
    e1fe:	str	r2, [r0, #12]
	isConnected = false;	  
    e200:	movs	r2, #0
		if (dest_index >= dst->num_inputs) // input number too high
    e202:	cmp	r3, r1
		dest_index = destinationInput;
    e204:	strb	r1, [r0, #9]
	AudioStream::unused = this;
    e206:	str	r0, [r4, #0]
	isConnected = false;	  
    e208:	strb	r2, [r0, #16]
		if (dest_index >= dst->num_inputs) // input number too high
    e20a:	bls.n	e230 <AudioConnection::AudioConnection(AudioStream&, unsigned char, AudioStream&, unsigned char)+0x44>
		__disable_irq();
    e20c:	cpsid	i
		s = AudioStream::first_update; // first AudioStream in the stream list
    e20e:	ldr	r3, [pc, #148]	; (e2a4 <AudioConnection::AudioConnection(AudioStream&, unsigned char, AudioStream&, unsigned char)+0xb8>)
    e210:	ldr	r5, [r3, #0]
		while (s) // go through all AudioStream objects
    e212:	cbz	r5, e23c <AudioConnection::AudioConnection(AudioStream&, unsigned char, AudioStream&, unsigned char)+0x50>
			p = s->destination_list;	// first patchCord in this stream's list
    e214:	ldr	r3, [r5, #12]
			while (p)
    e216:	cbz	r3, e236 <AudioConnection::AudioConnection(AudioStream&, unsigned char, AudioStream&, unsigned char)+0x4a>
				if (p->dst == dst && p->dest_index == dest_index) // same destination - it's in use!
    e218:	ldr	r1, [r0, #4]
    e21a:	b.n	e220 <AudioConnection::AudioConnection(AudioStream&, unsigned char, AudioStream&, unsigned char)+0x34>
				p = p->next_dest;
    e21c:	ldr	r3, [r3, #12]
			while (p)
    e21e:	cbz	r3, e236 <AudioConnection::AudioConnection(AudioStream&, unsigned char, AudioStream&, unsigned char)+0x4a>
				if (p->dst == dst && p->dest_index == dest_index) // same destination - it's in use!
    e220:	ldr	r2, [r3, #4]
    e222:	cmp	r2, r1
    e224:	bne.n	e21c <AudioConnection::AudioConnection(AudioStream&, unsigned char, AudioStream&, unsigned char)+0x30>
    e226:	ldrb.w	ip, [r3, #9]
    e22a:	ldrb	r2, [r0, #9]
    e22c:	cmp	ip, r2
    e22e:	bne.n	e21c <AudioConnection::AudioConnection(AudioStream&, unsigned char, AudioStream&, unsigned char)+0x30>
	__enable_irq();
    e230:	cpsie	i
}
    e232:	pop	{r4, r5}
    e234:	bx	lr
			s = s->next_update;
    e236:	ldr	r5, [r5, #20]
		while (s) // go through all AudioStream objects
    e238:	cmp	r5, #0
    e23a:	bne.n	e214 <AudioConnection::AudioConnection(AudioStream&, unsigned char, AudioStream&, unsigned char)+0x28>
		pp = &AudioStream::unused;
    e23c:	ldr	r3, [r4, #0]
		while (*pp && *pp != this)
    e23e:	cmp	r3, #0
    e240:	beq.n	e230 <AudioConnection::AudioConnection(AudioStream&, unsigned char, AudioStream&, unsigned char)+0x44>
    e242:	cmp	r0, r3
    e244:	bne.n	e24c <AudioConnection::AudioConnection(AudioStream&, unsigned char, AudioStream&, unsigned char)+0x60>
    e246:	b.n	e29c <AudioConnection::AudioConnection(AudioStream&, unsigned char, AudioStream&, unsigned char)+0xb0>
    e248:	cmp	r0, r3
    e24a:	beq.n	e256 <AudioConnection::AudioConnection(AudioStream&, unsigned char, AudioStream&, unsigned char)+0x6a>
			pp = &((*pp)->next_dest);
    e24c:	mov	r2, r3
    e24e:	ldr	r3, [r3, #12]
		while (*pp && *pp != this)
    e250:	cmp	r3, #0
    e252:	bne.n	e248 <AudioConnection::AudioConnection(AudioStream&, unsigned char, AudioStream&, unsigned char)+0x5c>
    e254:	b.n	e230 <AudioConnection::AudioConnection(AudioStream&, unsigned char, AudioStream&, unsigned char)+0x44>
			pp = &((*pp)->next_dest);
    e256:	add.w	r4, r2, #12
		p = src->destination_list; // first AudioConnection
    e25a:	ldr	r5, [r0, #0]
    e25c:	ldr	r1, [r5, #12]
		if (p == NULL) 
    e25e:	cbz	r1, e298 <AudioConnection::AudioConnection(AudioStream&, unsigned char, AudioStream&, unsigned char)+0xac>
			while (p->next_dest)  // scan source Stream's connection list for duplicates
    e260:	ldr	r3, [r1, #12]
    e262:	cbnz	r3, e26c <AudioConnection::AudioConnection(AudioStream&, unsigned char, AudioStream&, unsigned char)+0x80>
    e264:	b.n	e274 <AudioConnection::AudioConnection(AudioStream&, unsigned char, AudioStream&, unsigned char)+0x88>
    e266:	ldr	r2, [r3, #12]
    e268:	cbz	r2, e276 <AudioConnection::AudioConnection(AudioStream&, unsigned char, AudioStream&, unsigned char)+0x8a>
    e26a:	mov	r3, r2
				if (&p->src == &this->src && &p->dst == &this->dst
    e26c:	cmp	r0, r1
    e26e:	mov	r1, r3
    e270:	bne.n	e266 <AudioConnection::AudioConnection(AudioStream&, unsigned char, AudioStream&, unsigned char)+0x7a>
    e272:	b.n	e230 <AudioConnection::AudioConnection(AudioStream&, unsigned char, AudioStream&, unsigned char)+0x44>
			while (p->next_dest)  // scan source Stream's connection list for duplicates
    e274:	mov	r3, r1
			p->next_dest = this; // end of list, can link ourselves in
    e276:	str	r0, [r3, #12]
		*pp = next_dest;  // remove ourselves from the unused list
    e278:	ldr	r2, [r0, #12]
		next_dest = NULL; // we're last in the source's destination list
    e27a:	movs	r3, #0
		*pp = next_dest;  // remove ourselves from the unused list
    e27c:	str	r2, [r4, #0]
		next_dest = NULL; // we're last in the source's destination list
    e27e:	str	r3, [r0, #12]
		src->active = true;
    e280:	movs	r3, #1
		src->numConnections++;
    e282:	ldrb	r2, [r5, #10]
		src->active = true;
    e284:	strb	r3, [r5, #8]
		src->numConnections++;
    e286:	add	r2, r3
    e288:	strb	r2, [r5, #10]
		dst->numConnections++;
    e28a:	ldr	r2, [r0, #4]
    e28c:	ldrb	r1, [r2, #10]
		dst->active = true;
    e28e:	strb	r3, [r2, #8]
		dst->numConnections++;
    e290:	add	r1, r3
    e292:	strb	r1, [r2, #10]
		isConnected = true;
    e294:	strb	r3, [r0, #16]
		result = 0;
    e296:	b.n	e230 <AudioConnection::AudioConnection(AudioStream&, unsigned char, AudioStream&, unsigned char)+0x44>
			src->destination_list = this;
    e298:	str	r0, [r5, #12]
    e29a:	b.n	e278 <AudioConnection::AudioConnection(AudioStream&, unsigned char, AudioStream&, unsigned char)+0x8c>
		pp = &AudioStream::unused;
    e29c:	ldr	r4, [pc, #0]	; (e2a0 <AudioConnection::AudioConnection(AudioStream&, unsigned char, AudioStream&, unsigned char)+0xb4>)
    e29e:	b.n	e25a <AudioConnection::AudioConnection(AudioStream&, unsigned char, AudioStream&, unsigned char)+0x6e>
    e2a0:	.word	0x2000779c
    e2a4:	.word	0x20007728

0000e2a8 <AudioConnection::disconnect()>:
	if (!isConnected) return 1;
    e2a8:	ldrb	r3, [r0, #16]
    e2aa:	cmp	r3, #0
    e2ac:	beq.n	e330 <AudioConnection::disconnect()+0x88>
	if (dest_index >= dst->num_inputs) return 2; // should never happen!
    e2ae:	ldr	r3, [r0, #4]
    e2b0:	ldrb	r2, [r0, #9]
    e2b2:	ldrb	r3, [r3, #9]
    e2b4:	cmp	r2, r3
    e2b6:	bcs.n	e36e <AudioConnection::disconnect()+0xc6>
	__disable_irq();
    e2b8:	cpsid	i
	p = src->destination_list;
    e2ba:	ldr	r1, [r0, #0]
    e2bc:	ldr	r3, [r1, #12]
	if (p == NULL) {
    e2be:	cmp	r3, #0
    e2c0:	beq.n	e362 <AudioConnection::disconnect()+0xba>
	} else if (p == this) {
    e2c2:	cmp	r0, r3
{
    e2c4:	push	{r4, r5}
	} else if (p == this) {
    e2c6:	beq.n	e372 <AudioConnection::disconnect()+0xca>
			if (p->next_dest == this) // found the parent of the disconnecting object
    e2c8:	mov	r2, r3
    e2ca:	ldr	r3, [r3, #12]
    e2cc:	cmp	r3, r0
    e2ce:	beq.n	e368 <AudioConnection::disconnect()+0xc0>
		while (p)
    e2d0:	cmp	r3, #0
    e2d2:	bne.n	e2c8 <AudioConnection::disconnect()+0x20>
	if(dst->inputQueue[dest_index] != NULL) {
    e2d4:	ldr	r2, [r0, #4]
    e2d6:	ldrb.w	ip, [r0, #9]
    e2da:	ldr	r3, [r2, #16]
    e2dc:	ldr.w	r3, [r3, ip, lsl #2]
    e2e0:	cbz	r3, e304 <AudioConnection::disconnect()+0x5c>
	uint32_t mask = (0x80000000 >> (31 - (block->memory_pool_index & 0x1F)));
    e2e2:	ldrh	r1, [r3, #2]
	__disable_irq();
    e2e4:	cpsid	i
	if (block->ref_count > 1) {
    e2e6:	ldrb	r2, [r3, #0]
    e2e8:	cmp	r2, #1
    e2ea:	bls.n	e334 <AudioConnection::disconnect()+0x8c>
		block->ref_count--;
    e2ec:	subs	r2, #1
    e2ee:	strb	r2, [r3, #0]
	__enable_irq();
    e2f0:	cpsie	i
		__disable_irq();
    e2f2:	cpsid	i
		dst->inputQueue[dest_index] = NULL;
    e2f4:	ldr	r2, [r0, #4]
    e2f6:	movs	r4, #0
    e2f8:	ldrb.w	ip, [r0, #9]
    e2fc:	ldr	r3, [r2, #16]
	src->numConnections--;
    e2fe:	ldr	r1, [r0, #0]
		dst->inputQueue[dest_index] = NULL;
    e300:	str.w	r4, [r3, ip, lsl #2]
	src->numConnections--;
    e304:	ldrb	r3, [r1, #10]
    e306:	subs	r3, #1
    e308:	uxtb	r3, r3
    e30a:	strb	r3, [r1, #10]
	if (src->numConnections == 0) {
    e30c:	cbnz	r3, e310 <AudioConnection::disconnect()+0x68>
		src->active = false;
    e30e:	strb	r3, [r1, #8]
	dst->numConnections--;
    e310:	ldrb	r3, [r2, #10]
    e312:	subs	r3, #1
    e314:	uxtb	r3, r3
    e316:	strb	r3, [r2, #10]
	if (dst->numConnections == 0) {
    e318:	cbnz	r3, e31c <AudioConnection::disconnect()+0x74>
		dst->active = false;
    e31a:	strb	r3, [r2, #8]
	next_dest = dst->unused;
    e31c:	ldr	r2, [pc, #88]	; (e378 <AudioConnection::disconnect()+0xd0>)
	isConnected = false;
    e31e:	movs	r3, #0
	next_dest = dst->unused;
    e320:	ldr	r1, [r2, #0]
	isConnected = false;
    e322:	strb	r3, [r0, #16]
	dst->unused = this;
    e324:	str	r0, [r2, #0]
	next_dest = dst->unused;
    e326:	str	r1, [r0, #12]
	__enable_irq();
    e328:	cpsie	i
    e32a:	mov	r0, r3
}
    e32c:	pop	{r4, r5}
    e32e:	bx	lr
	if (!isConnected) return 1;
    e330:	movs	r0, #1
    e332:	bx	lr
	uint32_t mask = (0x80000000 >> (31 - (block->memory_pool_index & 0x1F)));
    e334:	mvns	r4, r1
	uint32_t index = block->memory_pool_index >> 5;
    e336:	lsrs	r3, r1, #5
		memory_pool_available_mask[index] |= mask;
    e338:	ldr	r5, [pc, #64]	; (e37c <AudioConnection::disconnect()+0xd4>)
	uint32_t mask = (0x80000000 >> (31 - (block->memory_pool_index & 0x1F)));
    e33a:	mov.w	r2, #2147483648	; 0x80000000
    e33e:	and.w	r1, r4, #31
    e342:	lsrs	r2, r1
		memory_pool_available_mask[index] |= mask;
    e344:	ldr.w	r1, [r5, r3, lsl #2]
    e348:	orrs	r2, r1
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
    e34a:	ldr	r1, [pc, #52]	; (e380 <AudioConnection::disconnect()+0xd8>)
		memory_pool_available_mask[index] |= mask;
    e34c:	str.w	r2, [r5, r3, lsl #2]
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
    e350:	ldrh	r2, [r1, #0]
    e352:	cmp	r2, r3
		memory_used--;
    e354:	ldr	r2, [pc, #44]	; (e384 <AudioConnection::disconnect()+0xdc>)
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
    e356:	it	hi
    e358:	strhhi	r3, [r1, #0]
		memory_used--;
    e35a:	ldrh	r3, [r2, #0]
    e35c:	subs	r3, #1
    e35e:	strh	r3, [r2, #0]
    e360:	b.n	e2f0 <AudioConnection::disconnect()+0x48>
		__enable_irq();
    e362:	cpsie	i
		return 3;
    e364:	movs	r0, #3
    e366:	bx	lr
				p-> next_dest = this->next_dest; // skip parent's link past us
    e368:	ldr	r3, [r0, #12]
    e36a:	str	r3, [r2, #12]
				break;
    e36c:	b.n	e2d4 <AudioConnection::disconnect()+0x2c>
	if (dest_index >= dst->num_inputs) return 2; // should never happen!
    e36e:	movs	r0, #2
}
    e370:	bx	lr
		if (p->next_dest) {
    e372:	ldr	r3, [r0, #12]
			src->destination_list = NULL;
    e374:	str	r3, [r1, #12]
    e376:	b.n	e2d4 <AudioConnection::disconnect()+0x2c>
    e378:	.word	0x2000779c
    e37c:	.word	0x2000772c
    e380:	.word	0x20015cf8
    e384:	.word	0x20015cf0

0000e388 <AudioConnection::~AudioConnection()>:
AudioConnection::~AudioConnection()
    e388:	push	{r4, lr}
    e38a:	mov	r4, r0
	disconnect(); // disconnect ourselves: puts us on the unused list
    e38c:	bl	e2a8 <AudioConnection::disconnect()>
	pp = &AudioStream::unused;
    e390:	ldr	r2, [pc, #36]	; (e3b8 <AudioConnection::~AudioConnection()+0x30>)
    e392:	ldr	r3, [r2, #0]
	while (*pp && *pp != this)
    e394:	cbz	r3, e3a8 <AudioConnection::~AudioConnection()+0x20>
    e396:	cmp	r4, r3
    e398:	bne.n	e3a0 <AudioConnection::~AudioConnection()+0x18>
    e39a:	b.n	e3ae <AudioConnection::~AudioConnection()+0x26>
    e39c:	cmp	r4, r3
    e39e:	beq.n	e3ac <AudioConnection::~AudioConnection()+0x24>
		pp = &((*pp)->next_dest);
    e3a0:	mov	r2, r3
    e3a2:	ldr	r3, [r3, #12]
	while (*pp && *pp != this)
    e3a4:	cmp	r3, #0
    e3a6:	bne.n	e39c <AudioConnection::~AudioConnection()+0x14>
}
    e3a8:	mov	r0, r4
    e3aa:	pop	{r4, pc}
		pp = &((*pp)->next_dest);
    e3ac:	adds	r2, #12
		*pp = next_dest; // remove ourselves from the unused list
    e3ae:	ldr	r3, [r4, #12]
}
    e3b0:	mov	r0, r4
		*pp = next_dest; // remove ourselves from the unused list
    e3b2:	str	r3, [r2, #0]
}
    e3b4:	pop	{r4, pc}
    e3b6:	nop
    e3b8:	.word	0x2000779c

0000e3bc <AudioStream::update_setup()>:
	if (update_scheduled) return false;
    e3bc:	ldr	r3, [pc, #48]	; (e3f0 <AudioStream::update_setup()+0x34>)
    e3be:	ldrb	r2, [r3, #0]
    e3c0:	cbnz	r2, e3ea <AudioStream::update_setup()+0x2e>
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
    e3c2:	ldr	r2, [pc, #48]	; (e3f4 <AudioStream::update_setup()+0x38>)
    e3c4:	ldr	r1, [pc, #48]	; (e3f8 <AudioStream::update_setup()+0x3c>)
{
    e3c6:	push	{r4}
    e3c8:	str.w	r1, [r2, #344]	; 0x158
	NVIC_SET_PRIORITY(IRQ_SOFTWARE, 208); // 255 = lowest priority
    e3cc:	ldr	r0, [pc, #44]	; (e3fc <AudioStream::update_setup()+0x40>)
    e3ce:	movs	r4, #208	; 0xd0
	update_scheduled = true;
    e3d0:	movs	r2, #1
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
    e3d2:	mov.w	r1, #3758153728	; 0xe000e000
	NVIC_SET_PRIORITY(IRQ_SOFTWARE, 208); // 255 = lowest priority
    e3d6:	strb.w	r4, [r0, #70]	; 0x46
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
    e3da:	movs	r4, #64	; 0x40
	update_scheduled = true;
    e3dc:	mov	r0, r2
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
    e3de:	str.w	r4, [r1, #264]	; 0x108
}
    e3e2:	ldr.w	r4, [sp], #4
	update_scheduled = true;
    e3e6:	strb	r2, [r3, #0]
}
    e3e8:	bx	lr
	if (update_scheduled) return false;
    e3ea:	movs	r0, #0
}
    e3ec:	bx	lr
    e3ee:	nop
    e3f0:	.word	0x20015d14
    e3f4:	.word	0x20002400
    e3f8:	.word	0x0000dffd
    e3fc:	.word	0xe000e400

0000e400 <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)>:
	update_responsibility = false;
}

static void copy_to_buffers(const uint32_t *src, int16_t *left, int16_t *right, unsigned int len)
{
	uint32_t *target = (uint32_t*) src + len; 
    e400:	add.w	r3, r0, r3, lsl #2
	while ((src < target) && (((uintptr_t) left & 0x02) != 0)) {
    e404:	cmp	r0, r3
{
    e406:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	while ((src < target) && (((uintptr_t) left & 0x02) != 0)) {
    e40a:	bcc.n	e420 <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)+0x20>
    e40c:	b.n	e424 <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)+0x24>
		uint32_t n = *src++;
    e40e:	ldr.w	r4, [r0], #4
		*left++ = n & 0xFFFF;
		*right++ = n >> 16;
    e412:	lsrs	r5, r4, #16
	while ((src < target) && (((uintptr_t) left & 0x02) != 0)) {
    e414:	cmp	r3, r0
		*left++ = n & 0xFFFF;
    e416:	strh.w	r4, [r1], #2
		*right++ = n >> 16;
    e41a:	strh.w	r5, [r2], #2
	while ((src < target) && (((uintptr_t) left & 0x02) != 0)) {
    e41e:	bls.n	e424 <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)+0x24>
    e420:	lsls	r4, r1, #30
    e422:	bmi.n	e40e <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)+0xe>
	}

	while ((src < target - 2)) {
    e424:	sub.w	r4, r3, #8
    e428:	cmp	r0, r4
    e42a:	bcs.n	e4a6 <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)+0xa6>
    e42c:	sub.w	r8, r3, #9
    e430:	add.w	ip, r0, #8
    e434:	mov	lr, r2
		uint32_t n1 = *src++;
		uint32_t n = *src++;
		*(uint32_t *)left = (n1 & 0xFFFF) | ((n & 0xFFFF) << 16);
		left+=2;
		*(uint32_t *)right = (n1 >> 16) | ((n & 0xFFFF0000)) ;
    e436:	ldr	r7, [pc, #116]	; (e4ac <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)+0xac>)
    e438:	sub.w	r8, r8, r0
    e43c:	mov.w	r8, r8, lsr #3
    e440:	add.w	r8, r8, #1
    e444:	mov.w	r9, r8, lsl #2
    e448:	add.w	r6, r1, r8, lsl #2
		uint32_t n = *src++;
    e44c:	ldrd	sl, r4, [ip, #-8]
	while ((src < target - 2)) {
    e450:	add.w	ip, ip, #8
		*(uint32_t *)left = (n1 & 0xFFFF) | ((n & 0xFFFF) << 16);
    e454:	uxth.w	r5, sl
    e458:	orr.w	r5, r5, r4, lsl #16
		*(uint32_t *)right = (n1 >> 16) | ((n & 0xFFFF0000)) ;
    e45c:	ands	r4, r7
		*(uint32_t *)left = (n1 & 0xFFFF) | ((n & 0xFFFF) << 16);
    e45e:	str.w	r5, [r1], #4
		*(uint32_t *)right = (n1 >> 16) | ((n & 0xFFFF0000)) ;
    e462:	orr.w	r4, r4, sl, lsr #16
	while ((src < target - 2)) {
    e466:	cmp	r6, r1
		*(uint32_t *)right = (n1 >> 16) | ((n & 0xFFFF0000)) ;
    e468:	str.w	r4, [lr], #4
	while ((src < target - 2)) {
    e46c:	bne.n	e44c <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)+0x4c>
		uint32_t n = *src++;
    e46e:	add.w	r0, r0, r8, lsl #3
		right+=2;
    e472:	add	r2, r9
	}

	while ((src < target)) {
    e474:	cmp	r3, r0
    e476:	bls.n	e4a2 <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)+0xa2>
		uint32_t n = *src++;
    e478:	mov	r4, r0
    e47a:	ldr.w	r1, [r4], #4
		*left++ = n & 0xFFFF;
    e47e:	strh	r1, [r6, #0]
	while ((src < target)) {
    e480:	cmp	r3, r4
		*right++ = n >> 16;
    e482:	mov.w	r1, r1, lsr #16
    e486:	strh	r1, [r2, #0]
	while ((src < target)) {
    e488:	bls.n	e4a2 <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)+0xa2>
		uint32_t n = *src++;
    e48a:	ldr	r1, [r0, #4]
		*left++ = n & 0xFFFF;
    e48c:	strh	r1, [r6, #2]
		*right++ = n >> 16;
    e48e:	lsrs	r1, r1, #16
    e490:	strh	r1, [r2, #2]
		uint32_t n = *src++;
    e492:	add.w	r1, r0, #8
	while ((src < target)) {
    e496:	cmp	r3, r1
    e498:	bls.n	e4a2 <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)+0xa2>
		uint32_t n = *src++;
    e49a:	ldr	r3, [r0, #8]
		*right++ = n >> 16;
    e49c:	lsrs	r1, r3, #16
		*left++ = n & 0xFFFF;
    e49e:	strh	r3, [r6, #4]
		*right++ = n >> 16;
    e4a0:	strh	r1, [r2, #4]
	}
}
    e4a2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	while ((src < target - 2)) {
    e4a6:	mov	r6, r1
    e4a8:	b.n	e474 <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)+0x74>
    e4aa:	nop
    e4ac:	.word	0xffff0000

0000e4b0 <sync_event(transfer_struct*)>:
{
    e4b0:	push	{r3, r4, r5, lr}
	usb_audio_sync_feedback = feedback_accumulator >> usb_audio_sync_rshift;
    e4b2:	ldr	r2, [pc, #68]	; (e4f8 <sync_event(transfer_struct*)+0x48>)
    e4b4:	ldr	r3, [pc, #68]	; (e4fc <sync_event(transfer_struct*)+0x4c>)
    e4b6:	ldrb	r1, [r2, #0]
    e4b8:	ldr	r2, [r3, #0]
	usb_prepare_transfer(&sync_transfer, &usb_audio_sync_feedback, usb_audio_sync_nbytes, 0);
    e4ba:	movs	r3, #0
	usb_audio_sync_feedback = feedback_accumulator >> usb_audio_sync_rshift;
    e4bc:	ldr	r4, [pc, #64]	; (e500 <sync_event(transfer_struct*)+0x50>)
	usb_prepare_transfer(&sync_transfer, &usb_audio_sync_feedback, usb_audio_sync_nbytes, 0);
    e4be:	ldr	r5, [pc, #68]	; (e504 <sync_event(transfer_struct*)+0x54>)
	usb_audio_sync_feedback = feedback_accumulator >> usb_audio_sync_rshift;
    e4c0:	lsrs	r2, r1
	usb_prepare_transfer(&sync_transfer, &usb_audio_sync_feedback, usb_audio_sync_nbytes, 0);
    e4c2:	ldr	r0, [pc, #68]	; (e508 <sync_event(transfer_struct*)+0x58>)
    e4c4:	mov	r1, r4
	usb_audio_sync_feedback = feedback_accumulator >> usb_audio_sync_rshift;
    e4c6:	str	r2, [r4, #0]
	usb_prepare_transfer(&sync_transfer, &usb_audio_sync_feedback, usb_audio_sync_nbytes, 0);
    e4c8:	ldrb	r2, [r5, #0]
    e4ca:	bl	cb64 <usb_prepare_transfer>
	arm_dcache_flush(&usb_audio_sync_feedback, usb_audio_sync_nbytes);
    e4ce:	ldrb	r3, [r5, #0]
	uint32_t end_addr = (uint32_t)addr + size;
    e4d0:	add	r3, r4
	asm("dsb");
    e4d2:	dsb	sy
		SCB_CACHE_DCCMVAC = location;
    e4d6:	mov.w	r2, #3758153728	; 0xe000e000
    e4da:	str.w	r4, [r2, #3944]	; 0xf68
		location += 32;
    e4de:	adds	r4, #32
	} while (location < end_addr);
    e4e0:	cmp	r3, r4
    e4e2:	bhi.n	e4da <sync_event(transfer_struct*)+0x2a>
	asm("dsb");
    e4e4:	dsb	sy
	asm("isb");
    e4e8:	isb	sy
	usb_transmit(AUDIO_SYNC_ENDPOINT, &sync_transfer);
    e4ec:	ldr	r1, [pc, #24]	; (e508 <sync_event(transfer_struct*)+0x58>)
    e4ee:	movs	r0, #6
}
    e4f0:	ldmia.w	sp!, {r3, r4, r5, lr}
	usb_transmit(AUDIO_SYNC_ENDPOINT, &sync_transfer);
    e4f4:	b.w	cb94 <usb_transmit>
    e4f8:	.word	0x20015d2b
    e4fc:	.word	0x20015848
    e500:	.word	0x20201fa0
    e504:	.word	0x20015d2a
    e508:	.word	0x20003900

0000e50c <AudioOutputUSB::update()>:
		len--;
	}
}

void AudioOutputUSB::update(void)
{
    e50c:	push	{r3, r4, r5, lr}
    e50e:	mov	r5, r0
	audio_block_t *left, *right;

	// TODO: we shouldn't be writing to these......
	//left = receiveReadOnly(0); // input 0 = left channel
	//right = receiveReadOnly(1); // input 1 = right channel
	left = receiveWritable(0); // input 0 = left channel
    e510:	movs	r1, #0
    e512:	bl	e1a4 <AudioStream::receiveWritable(unsigned int)>
	right = receiveWritable(1); // input 1 = right channel
    e516:	movs	r1, #1
	left = receiveWritable(0); // input 0 = left channel
    e518:	mov	r4, r0
	right = receiveWritable(1); // input 1 = right channel
    e51a:	mov	r0, r5
    e51c:	bl	e1a4 <AudioStream::receiveWritable(unsigned int)>
	if (usb_audio_transmit_setting == 0) {
    e520:	ldr	r3, [pc, #236]	; (e610 <AudioOutputUSB::update()+0x104>)
	right = receiveWritable(1); // input 1 = right channel
    e522:	mov	r5, r0
	if (usb_audio_transmit_setting == 0) {
    e524:	ldrb	r3, [r3, #0]
    e526:	cbz	r3, e566 <AudioOutputUSB::update()+0x5a>
		if (right_1st) { release(right_1st); right_1st = NULL; }
		if (right_2nd) { release(right_2nd); right_2nd = NULL; }
		offset_1st = 0;
		return;
	}
	if (left == NULL) {
    e528:	cmp	r4, #0
    e52a:	beq.n	e5c2 <AudioOutputUSB::update()+0xb6>
			if (right) release(right);
			return;
		}
		memset(left->data, 0, sizeof(left->data));
	}
	if (right == NULL) {
    e52c:	cmp	r5, #0
    e52e:	beq.n	e5da <AudioOutputUSB::update()+0xce>
			release(left);
			return;
		}
		memset(right->data, 0, sizeof(right->data));
	}
	__disable_irq();
    e530:	cpsid	i
	if (left_1st == NULL) {
    e532:	ldr	r3, [pc, #224]	; (e614 <AudioOutputUSB::update()+0x108>)
    e534:	ldr	r0, [r3, #0]
    e536:	cmp	r0, #0
    e538:	beq.n	e5b6 <AudioOutputUSB::update()+0xaa>
		left_1st = left;
		right_1st = right;
		offset_1st = 0;
	} else if (left_2nd == NULL) {
    e53a:	ldr	r2, [pc, #220]	; (e618 <AudioOutputUSB::update()+0x10c>)
    e53c:	ldr	r1, [r2, #0]
    e53e:	cmp	r1, #0
    e540:	beq.n	e5f0 <AudioOutputUSB::update()+0xe4>
		left_2nd = left;
		right_2nd = right;
	} else {
		// buffer overrun - PC is consuming too slowly
		audio_block_t *discard1 = left_1st;
		left_1st = left_2nd;
    e542:	str	r1, [r3, #0]
		left_2nd = left;
		audio_block_t *discard2 = right_1st;
		right_1st = right_2nd;
    e544:	ldr	r1, [pc, #212]	; (e61c <AudioOutputUSB::update()+0x110>)
		audio_block_t *discard2 = right_1st;
    e546:	ldr	r3, [pc, #216]	; (e620 <AudioOutputUSB::update()+0x114>)
		left_2nd = left;
    e548:	str	r4, [r2, #0]
		right_2nd = right;
		offset_1st = 0; // TODO: discard part of this data?
    e54a:	movs	r4, #0
		right_1st = right_2nd;
    e54c:	ldr	r2, [r1, #0]
		right_2nd = right;
    e54e:	str	r5, [r1, #0]
		offset_1st = 0; // TODO: discard part of this data?
    e550:	ldr	r1, [pc, #208]	; (e624 <AudioOutputUSB::update()+0x118>)
    e552:	strh	r4, [r1, #0]
		audio_block_t *discard2 = right_1st;
    e554:	ldr	r4, [r3, #0]
		right_1st = right_2nd;
    e556:	str	r2, [r3, #0]
		//serial_print("*");
		release(discard1);
    e558:	bl	e10c <AudioStream::release(audio_block_struct*)>
		release(discard2);
    e55c:	mov	r0, r4
    e55e:	bl	e10c <AudioStream::release(audio_block_struct*)>
	}
	__enable_irq();
    e562:	cpsie	i
}
    e564:	pop	{r3, r4, r5, pc}
		if (left) release(left);
    e566:	cbz	r4, e56e <AudioOutputUSB::update()+0x62>
    e568:	mov	r0, r4
    e56a:	bl	e10c <AudioStream::release(audio_block_struct*)>
		if (right) release(right);
    e56e:	cbz	r5, e576 <AudioOutputUSB::update()+0x6a>
    e570:	mov	r0, r5
    e572:	bl	e10c <AudioStream::release(audio_block_struct*)>
		if (left_1st) { release(left_1st); left_1st = NULL; }
    e576:	ldr	r4, [pc, #156]	; (e614 <AudioOutputUSB::update()+0x108>)
    e578:	ldr	r0, [r4, #0]
    e57a:	cbz	r0, e584 <AudioOutputUSB::update()+0x78>
    e57c:	bl	e10c <AudioStream::release(audio_block_struct*)>
    e580:	movs	r3, #0
    e582:	str	r3, [r4, #0]
		if (left_2nd) { release(left_2nd); left_2nd = NULL; }
    e584:	ldr	r4, [pc, #144]	; (e618 <AudioOutputUSB::update()+0x10c>)
    e586:	ldr	r0, [r4, #0]
    e588:	cbz	r0, e592 <AudioOutputUSB::update()+0x86>
    e58a:	bl	e10c <AudioStream::release(audio_block_struct*)>
    e58e:	movs	r3, #0
    e590:	str	r3, [r4, #0]
		if (right_1st) { release(right_1st); right_1st = NULL; }
    e592:	ldr	r4, [pc, #140]	; (e620 <AudioOutputUSB::update()+0x114>)
    e594:	ldr	r0, [r4, #0]
    e596:	cbz	r0, e5a0 <AudioOutputUSB::update()+0x94>
    e598:	bl	e10c <AudioStream::release(audio_block_struct*)>
    e59c:	movs	r3, #0
    e59e:	str	r3, [r4, #0]
		if (right_2nd) { release(right_2nd); right_2nd = NULL; }
    e5a0:	ldr	r4, [pc, #120]	; (e61c <AudioOutputUSB::update()+0x110>)
    e5a2:	ldr	r0, [r4, #0]
    e5a4:	cbz	r0, e5ae <AudioOutputUSB::update()+0xa2>
    e5a6:	bl	e10c <AudioStream::release(audio_block_struct*)>
    e5aa:	movs	r3, #0
    e5ac:	str	r3, [r4, #0]
		offset_1st = 0;
    e5ae:	ldr	r3, [pc, #116]	; (e624 <AudioOutputUSB::update()+0x118>)
    e5b0:	movs	r2, #0
    e5b2:	strh	r2, [r3, #0]
}
    e5b4:	pop	{r3, r4, r5, pc}
		left_1st = left;
    e5b6:	str	r4, [r3, #0]
		right_1st = right;
    e5b8:	ldr	r2, [pc, #100]	; (e620 <AudioOutputUSB::update()+0x114>)
		offset_1st = 0;
    e5ba:	ldr	r3, [pc, #104]	; (e624 <AudioOutputUSB::update()+0x118>)
		right_1st = right;
    e5bc:	str	r5, [r2, #0]
		offset_1st = 0;
    e5be:	strh	r0, [r3, #0]
    e5c0:	b.n	e562 <AudioOutputUSB::update()+0x56>
		left = allocate();
    e5c2:	bl	e060 <AudioStream::allocate()>
		if (left == NULL) {
    e5c6:	mov	r4, r0
    e5c8:	cbz	r0, e5f8 <AudioOutputUSB::update()+0xec>
		memset(left->data, 0, sizeof(left->data));
    e5ca:	mov.w	r2, #256	; 0x100
    e5ce:	movs	r1, #0
    e5d0:	adds	r0, #4
    e5d2:	bl	10104 <memset>
	if (right == NULL) {
    e5d6:	cmp	r5, #0
    e5d8:	bne.n	e530 <AudioOutputUSB::update()+0x24>
		right = allocate();
    e5da:	bl	e060 <AudioStream::allocate()>
		if (right == NULL) {
    e5de:	mov	r5, r0
    e5e0:	cbz	r0, e606 <AudioOutputUSB::update()+0xfa>
		memset(right->data, 0, sizeof(right->data));
    e5e2:	mov.w	r2, #256	; 0x100
    e5e6:	movs	r1, #0
    e5e8:	adds	r0, #4
    e5ea:	bl	10104 <memset>
    e5ee:	b.n	e530 <AudioOutputUSB::update()+0x24>
		right_2nd = right;
    e5f0:	ldr	r3, [pc, #40]	; (e61c <AudioOutputUSB::update()+0x110>)
		left_2nd = left;
    e5f2:	str	r4, [r2, #0]
		right_2nd = right;
    e5f4:	str	r5, [r3, #0]
    e5f6:	b.n	e562 <AudioOutputUSB::update()+0x56>
			if (right) release(right);
    e5f8:	cmp	r5, #0
    e5fa:	beq.n	e564 <AudioOutputUSB::update()+0x58>
    e5fc:	mov	r0, r5
}
    e5fe:	ldmia.w	sp!, {r3, r4, r5, lr}
			if (right) release(right);
    e602:	b.w	e10c <AudioStream::release(audio_block_struct*)>
			release(left);
    e606:	mov	r0, r4
}
    e608:	ldmia.w	sp!, {r3, r4, r5, lr}
			release(left);
    e60c:	b.w	e10c <AudioStream::release(audio_block_struct*)>
    e610:	.word	0x20015d2c
    e614:	.word	0x2000780c
    e618:	.word	0x20007810
    e61c:	.word	0x20007818
    e620:	.word	0x20007814
    e624:	.word	0x20015cfc

0000e628 <usb_audio_receive_callback>:
{
    e628:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	AudioInputUSB::receive_flag = 1;
    e62c:	movs	r2, #1
    e62e:	ldr	r3, [pc, #296]	; (e758 <usb_audio_receive_callback+0x130>)
	left = AudioInputUSB::incoming_left;
    e630:	ldr.w	sl, [pc, #312]	; e76c <usb_audio_receive_callback+0x144>
	len >>= 2; // 1 sample = 4 bytes: 2 left, 2 right
    e634:	lsrs	r6, r0, #2
	AudioInputUSB::receive_flag = 1;
    e636:	strb	r2, [r3, #0]
	count = AudioInputUSB::incoming_count;
    e638:	ldr	r3, [pc, #288]	; (e75c <usb_audio_receive_callback+0x134>)
	left = AudioInputUSB::incoming_left;
    e63a:	ldr.w	r4, [sl]
	count = AudioInputUSB::incoming_count;
    e63e:	ldrh	r7, [r3, #0]
	right = AudioInputUSB::incoming_right;
    e640:	ldr	r3, [pc, #284]	; (e760 <usb_audio_receive_callback+0x138>)
	count = AudioInputUSB::incoming_count;
    e642:	mov	r9, r7
	right = AudioInputUSB::incoming_right;
    e644:	ldr	r5, [r3, #0]
	if (left == NULL) {
    e646:	cmp	r4, #0
    e648:	beq.n	e6e0 <usb_audio_receive_callback+0xb8>
	if (right == NULL) {
    e64a:	cmp	r5, #0
    e64c:	beq.n	e6f2 <usb_audio_receive_callback+0xca>
	while (len > 0) {
    e64e:	cmp	r6, #0
    e650:	beq.n	e704 <usb_audio_receive_callback+0xdc>
		avail = AUDIO_BLOCK_SAMPLES - count;
    e652:	rsb	r3, r7, #128	; 0x80
		if (len < avail) {
    e656:	cmp	r6, r3
    e658:	bcc.n	e750 <usb_audio_receive_callback+0x128>
    e65a:	ldr.w	fp, [pc, #276]	; e770 <usb_audio_receive_callback+0x148>
    e65e:	ldr	r7, [pc, #260]	; (e764 <usb_audio_receive_callback+0x13c>)
			if (AudioInputUSB::ready_left || AudioInputUSB::ready_right) return;
    e660:	ldr.w	r8, [pc, #272]	; e774 <usb_audio_receive_callback+0x14c>
		} else if (avail > 0) {
    e664:	cbnz	r3, e6a6 <usb_audio_receive_callback+0x7e>
			if (AudioInputUSB::ready_left || AudioInputUSB::ready_right) return;
    e666:	ldr	r3, [r7, #0]
    e668:	cmp	r3, #0
    e66a:	bne.n	e6dc <usb_audio_receive_callback+0xb4>
    e66c:	ldr.w	r3, [r8]
    e670:	cmp	r3, #0
    e672:	bne.n	e6dc <usb_audio_receive_callback+0xb4>
			AudioInputUSB::ready_left = left;
    e674:	str	r4, [r7, #0]
			AudioInputUSB::ready_right = right;
    e676:	str.w	r5, [r8]
			left = AudioStream::allocate();
    e67a:	bl	e060 <AudioStream::allocate()>
			if (left == NULL) {
    e67e:	mov	r4, r0
    e680:	cmp	r0, #0
    e682:	beq.n	e70c <usb_audio_receive_callback+0xe4>
			right = AudioStream::allocate();
    e684:	bl	e060 <AudioStream::allocate()>
			if (right == NULL) {
    e688:	mov	r5, r0
    e68a:	cmp	r0, #0
    e68c:	beq.n	e71c <usb_audio_receive_callback+0xf4>
			AudioInputUSB::incoming_right = right;
    e68e:	ldr	r3, [pc, #208]	; (e760 <usb_audio_receive_callback+0x138>)
			AudioInputUSB::incoming_left = left;
    e690:	str.w	r4, [sl]
			AudioInputUSB::incoming_right = right;
    e694:	str	r0, [r3, #0]
	while (len > 0) {
    e696:	cmp	r6, #0
    e698:	beq.n	e702 <usb_audio_receive_callback+0xda>
		if (len < avail) {
    e69a:	cmp	r6, #127	; 0x7f
			count = 0;
    e69c:	mov.w	r9, #0
		avail = AUDIO_BLOCK_SAMPLES - count;
    e6a0:	mov.w	r3, #128	; 0x80
		if (len < avail) {
    e6a4:	bls.n	e732 <usb_audio_receive_callback+0x10a>
			copy_to_buffers(data, left->data + count, right->data + count, avail);
    e6a6:	adds	r2, r5, #4
    e6a8:	adds	r1, r4, #4
    e6aa:	mov	r0, fp
    e6ac:	add	r6, r9
    e6ae:	add.w	r2, r2, r9, lsl #1
    e6b2:	add.w	r1, r1, r9, lsl #1
			len -= avail;
    e6b6:	subs	r6, #128	; 0x80
			data += avail;
    e6b8:	add.w	fp, fp, r3, lsl #2
			copy_to_buffers(data, left->data + count, right->data + count, avail);
    e6bc:	bl	e400 <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)>
			if (AudioInputUSB::ready_left || AudioInputUSB::ready_right) {
    e6c0:	ldr	r3, [r7, #0]
    e6c2:	cbnz	r3, e6cc <usb_audio_receive_callback+0xa4>
    e6c4:	ldr.w	r3, [r8]
    e6c8:	cmp	r3, #0
    e6ca:	beq.n	e674 <usb_audio_receive_callback+0x4c>
				AudioInputUSB::incoming_count = count + avail;
    e6cc:	movs	r3, #128	; 0x80
    e6ce:	ldr	r2, [pc, #140]	; (e75c <usb_audio_receive_callback+0x134>)
    e6d0:	strh	r3, [r2, #0]
				if (len > 0) {
    e6d2:	cbz	r6, e6dc <usb_audio_receive_callback+0xb4>
					usb_audio_overrun_count++;
    e6d4:	ldr	r2, [pc, #144]	; (e768 <usb_audio_receive_callback+0x140>)
    e6d6:	ldr	r3, [r2, #0]
    e6d8:	adds	r3, #1
    e6da:	str	r3, [r2, #0]
}
    e6dc:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		left = AudioStream::allocate();
    e6e0:	bl	e060 <AudioStream::allocate()>
		if (left == NULL) return;
    e6e4:	mov	r4, r0
    e6e6:	cmp	r0, #0
    e6e8:	beq.n	e6dc <usb_audio_receive_callback+0xb4>
		AudioInputUSB::incoming_left = left;
    e6ea:	str.w	r0, [sl]
	if (right == NULL) {
    e6ee:	cmp	r5, #0
    e6f0:	bne.n	e64e <usb_audio_receive_callback+0x26>
		right = AudioStream::allocate();
    e6f2:	bl	e060 <AudioStream::allocate()>
		if (right == NULL) return;
    e6f6:	mov	r5, r0
    e6f8:	cmp	r0, #0
    e6fa:	beq.n	e6dc <usb_audio_receive_callback+0xb4>
		AudioInputUSB::incoming_right = right;
    e6fc:	ldr	r3, [pc, #96]	; (e760 <usb_audio_receive_callback+0x138>)
    e6fe:	str	r0, [r3, #0]
    e700:	b.n	e64e <usb_audio_receive_callback+0x26>
    e702:	mov	r7, r6
	AudioInputUSB::incoming_count = count;
    e704:	ldr	r3, [pc, #84]	; (e75c <usb_audio_receive_callback+0x134>)
    e706:	strh	r7, [r3, #0]
}
    e708:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				AudioInputUSB::incoming_right = NULL;
    e70c:	ldr	r3, [pc, #80]	; (e760 <usb_audio_receive_callback+0x138>)
				AudioInputUSB::incoming_left = NULL;
    e70e:	str.w	r0, [sl]
				AudioInputUSB::incoming_right = NULL;
    e712:	str	r0, [r3, #0]
				AudioInputUSB::incoming_count = 0;
    e714:	ldr	r3, [pc, #68]	; (e75c <usb_audio_receive_callback+0x134>)
    e716:	strh	r0, [r3, #0]
}
    e718:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				AudioStream::release(left);
    e71c:	mov	r0, r4
    e71e:	bl	e10c <AudioStream::release(audio_block_struct*)>
				AudioInputUSB::incoming_right = NULL;
    e722:	ldr	r3, [pc, #60]	; (e760 <usb_audio_receive_callback+0x138>)
				AudioInputUSB::incoming_left = NULL;
    e724:	str.w	r5, [sl]
				AudioInputUSB::incoming_right = NULL;
    e728:	str	r5, [r3, #0]
				AudioInputUSB::incoming_count = 0;
    e72a:	ldr	r3, [pc, #48]	; (e75c <usb_audio_receive_callback+0x134>)
    e72c:	strh	r5, [r3, #0]
}
    e72e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e732:	mov	r7, r9
    e734:	mov	r3, r9
			copy_to_buffers(data, left->data + count, right->data + count, len);
    e736:	adds	r2, r5, #4
    e738:	adds	r1, r4, #4
    e73a:	mov	r0, fp
			AudioInputUSB::incoming_count = count + len;
    e73c:	add	r7, r6
			copy_to_buffers(data, left->data + count, right->data + count, len);
    e73e:	add	r2, r3
    e740:	add	r1, r3
    e742:	mov	r3, r6
    e744:	bl	e400 <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)>
			AudioInputUSB::incoming_count = count + len;
    e748:	ldr	r3, [pc, #16]	; (e75c <usb_audio_receive_callback+0x134>)
    e74a:	strh	r7, [r3, #0]
}
    e74c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			copy_to_buffers(data, left->data + count, right->data + count, len);
    e750:	lsls	r3, r7, #1
    e752:	ldr.w	fp, [pc, #28]	; e770 <usb_audio_receive_callback+0x148>
    e756:	b.n	e736 <usb_audio_receive_callback+0x10e>
    e758:	.word	0x20015d15
    e75c:	.word	0x20015cfa
    e760:	.word	0x200077c8
    e764:	.word	0x200077bc
    e768:	.word	0x20015cd4
    e76c:	.word	0x200077c4
    e770:	.word	0x20201fc0
    e774:	.word	0x200077c0

0000e778 <rx_event(transfer_struct*)>:
{
    e778:	push	{r3, lr}
	if (t) {
    e77a:	cbz	r0, e78c <rx_event(transfer_struct*)+0x14>
		int len = AUDIO_RX_SIZE - ((rx_transfer.status >> 16) & 0x7FFF);
    e77c:	ldr	r3, [pc, #68]	; (e7c4 <rx_event(transfer_struct*)+0x4c>)
    e77e:	ldr	r0, [r3, #4]
    e780:	ubfx	r0, r0, #16, #15
		usb_audio_receive_callback(len);
    e784:	rsb	r0, r0, #180	; 0xb4
    e788:	bl	e628 <usb_audio_receive_callback>
	usb_prepare_transfer(&rx_transfer, rx_buffer, AUDIO_RX_SIZE, 0);
    e78c:	movs	r3, #0
    e78e:	movs	r2, #180	; 0xb4
    e790:	ldr	r1, [pc, #52]	; (e7c8 <rx_event(transfer_struct*)+0x50>)
    e792:	ldr	r0, [pc, #48]	; (e7c4 <rx_event(transfer_struct*)+0x4c>)
    e794:	bl	cb64 <usb_prepare_transfer>
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    e798:	ldr	r3, [pc, #44]	; (e7c8 <rx_event(transfer_struct*)+0x50>)
	uint32_t end_addr = (uint32_t)addr + size;
    e79a:	add.w	r1, r3, #180	; 0xb4
	asm("dsb");
    e79e:	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    e7a2:	mov.w	r2, #3758153728	; 0xe000e000
    e7a6:	str.w	r3, [r2, #3932]	; 0xf5c
		location += 32;
    e7aa:	adds	r3, #32
	} while (location < end_addr);
    e7ac:	cmp	r1, r3
    e7ae:	bhi.n	e7a6 <rx_event(transfer_struct*)+0x2e>
	asm("dsb");
    e7b0:	dsb	sy
	asm("isb");
    e7b4:	isb	sy
	usb_receive(AUDIO_RX_ENDPOINT, &rx_transfer);
    e7b8:	ldr	r1, [pc, #8]	; (e7c4 <rx_event(transfer_struct*)+0x4c>)
    e7ba:	movs	r0, #5
}
    e7bc:	ldmia.w	sp!, {r3, lr}
	usb_receive(AUDIO_RX_ENDPOINT, &rx_transfer);
    e7c0:	b.w	cc4c <usb_receive>
    e7c4:	.word	0x200038e0
    e7c8:	.word	0x20201fc0

0000e7cc <AudioOutputUSB::begin()>:
	update_responsibility = false;
    e7cc:	movs	r3, #0
    e7ce:	ldr	r0, [pc, #12]	; (e7dc <AudioOutputUSB::begin()+0x10>)
	left_1st = NULL;
    e7d0:	ldr	r1, [pc, #12]	; (e7e0 <AudioOutputUSB::begin()+0x14>)
	right_1st = NULL;
    e7d2:	ldr	r2, [pc, #16]	; (e7e4 <AudioOutputUSB::begin()+0x18>)
	update_responsibility = false;
    e7d4:	strb	r3, [r0, #0]
	left_1st = NULL;
    e7d6:	str	r3, [r1, #0]
	right_1st = NULL;
    e7d8:	str	r3, [r2, #0]
}
    e7da:	bx	lr
    e7dc:	.word	0x20015d16
    e7e0:	.word	0x2000780c
    e7e4:	.word	0x20007814

0000e7e8 <usb_audio_transmit_callback>:
{
	static uint32_t count=5;
	uint32_t avail, num, target, offset, len=0;
	audio_block_t *left, *right;

	if (++count < 10) {   // TODO: dynamic adjust to match USB rate
    e7e8:	ldr	r2, [pc, #232]	; (e8d4 <usb_audio_transmit_callback+0xec>)
{
    e7ea:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (++count < 10) {   // TODO: dynamic adjust to match USB rate
    e7ee:	ldr	r3, [r2, #0]
    e7f0:	adds	r3, #1
    e7f2:	cmp	r3, #9
{
    e7f4:	vpush	{d8}
	if (++count < 10) {   // TODO: dynamic adjust to match USB rate
    e7f8:	bls.n	e8c6 <usb_audio_transmit_callback+0xde>
		target = 44;
	} else {
		count = 0;
    e7fa:	movs	r1, #180	; 0xb4
    e7fc:	movs	r3, #0
		target = 45;
    e7fe:	mov.w	r9, #45	; 0x2d
		count = 0;
    e802:	vmov	s16, r1
    e806:	str	r3, [r2, #0]
	}
	while (len < target) {
		num = target - len;
		left = AudioOutputUSB::left_1st;
    e808:	ldr	r3, [pc, #204]	; (e8d8 <usb_audio_transmit_callback+0xf0>)
    e80a:	movs	r7, #0
			// buffer underrun - PC is consuming too quickly
			memset(usb_audio_transmit_buffer + len, 0, num * 4);
			//serial_print("%");
			break;
		}
		right = AudioOutputUSB::right_1st;
    e80c:	ldr.w	fp, [pc, #216]	; e8e8 <usb_audio_transmit_callback+0x100>
		left = AudioOutputUSB::left_1st;
    e810:	ldr	r0, [r3, #0]
		offset = AudioOutputUSB::offset_1st;
    e812:	ldr.w	sl, [pc, #216]	; e8ec <usb_audio_transmit_callback+0x104>
		num = target - len;
    e816:	sub.w	r2, r9, r7
		if (left == NULL) {
    e81a:	cmp	r0, #0
    e81c:	beq.n	e8ac <usb_audio_transmit_callback+0xc4>
		offset = AudioOutputUSB::offset_1st;
    e81e:	ldrh.w	ip, [sl]

		avail = AUDIO_BLOCK_SAMPLES - offset;
		if (num > avail) num = avail;

		copy_from_buffers((uint32_t *)usb_audio_transmit_buffer + len,
			left->data + offset, right->data + offset, num);
    e822:	adds	r5, r0, #4
		right = AudioOutputUSB::right_1st;
    e824:	ldr.w	r8, [fp]
		avail = AUDIO_BLOCK_SAMPLES - offset;
    e828:	rsb	r3, ip, #128	; 0x80
		copy_from_buffers((uint32_t *)usb_audio_transmit_buffer + len,
    e82c:	add.w	r5, r5, ip, lsl #1
			left->data + offset, right->data + offset, num);
    e830:	add.w	r4, r8, #4
    e834:	cmp	r2, r3
		copy_from_buffers((uint32_t *)usb_audio_transmit_buffer + len,
    e836:	add.w	r4, r4, ip, lsl #1
    e83a:	it	cs
    e83c:	movcs	r2, r3
    e83e:	ldr	r3, [pc, #156]	; (e8dc <usb_audio_transmit_callback+0xf4>)
    e840:	add.w	r6, r3, r7, lsl #2
	while (len > 0) {
    e844:	cbz	r2, e85e <usb_audio_transmit_callback+0x76>
    e846:	mov	r1, r2
		*dst++ = (*right++ << 16) | (*left++ & 0xFFFF);
    e848:	ldrsh.w	r3, [r5], #2
	while (len > 0) {
    e84c:	subs	r1, #1
		*dst++ = (*right++ << 16) | (*left++ & 0xFFFF);
    e84e:	ldrsh.w	lr, [r4], #2
    e852:	uxth	r3, r3
    e854:	orr.w	r3, r3, lr, lsl #16
    e858:	str.w	r3, [r6], #4
	while (len > 0) {
    e85c:	bne.n	e848 <usb_audio_transmit_callback+0x60>
		len += num;
		offset += num;
    e85e:	add	ip, r2
		len += num;
    e860:	add	r7, r2
		if (offset >= AUDIO_BLOCK_SAMPLES) {
    e862:	cmp.w	ip, #127	; 0x7f
    e866:	bhi.n	e87c <usb_audio_transmit_callback+0x94>
	while (len < target) {
    e868:	cmp	r7, r9
			AudioOutputUSB::left_2nd = NULL;
			AudioOutputUSB::right_1st = AudioOutputUSB::right_2nd;
			AudioOutputUSB::right_2nd = NULL;
			AudioOutputUSB::offset_1st = 0;
		} else {
			AudioOutputUSB::offset_1st = offset;
    e86a:	strh.w	ip, [sl]
	while (len < target) {
    e86e:	bcc.n	e816 <usb_audio_transmit_callback+0x2e>
		}
	}
	return target * 4;
}
    e870:	vmov	r0, s16
    e874:	vpop	{d8}
    e878:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			AudioStream::release(left);
    e87c:	bl	e10c <AudioStream::release(audio_block_struct*)>
			AudioStream::release(right);
    e880:	mov	r0, r8
    e882:	bl	e10c <AudioStream::release(audio_block_struct*)>
			AudioOutputUSB::left_2nd = NULL;
    e886:	movs	r3, #0
			AudioOutputUSB::left_1st = AudioOutputUSB::left_2nd;
    e888:	ldr	r1, [pc, #84]	; (e8e0 <usb_audio_transmit_callback+0xf8>)
	while (len < target) {
    e88a:	cmp	r7, r9
			AudioOutputUSB::right_1st = AudioOutputUSB::right_2nd;
    e88c:	ldr	r2, [pc, #84]	; (e8e4 <usb_audio_transmit_callback+0xfc>)
			AudioOutputUSB::left_1st = AudioOutputUSB::left_2nd;
    e88e:	ldr	r0, [r1, #0]
    e890:	ldr	r4, [pc, #68]	; (e8d8 <usb_audio_transmit_callback+0xf0>)
			AudioOutputUSB::left_2nd = NULL;
    e892:	str	r3, [r1, #0]
			AudioOutputUSB::right_1st = AudioOutputUSB::right_2nd;
    e894:	ldr	r1, [r2, #0]
			AudioOutputUSB::offset_1st = offset;
    e896:	strh.w	r3, [sl]
			AudioOutputUSB::left_1st = AudioOutputUSB::left_2nd;
    e89a:	str	r0, [r4, #0]
			AudioOutputUSB::right_2nd = NULL;
    e89c:	str	r3, [r2, #0]
			AudioOutputUSB::right_1st = AudioOutputUSB::right_2nd;
    e89e:	str.w	r1, [fp]
	while (len < target) {
    e8a2:	bcs.n	e870 <usb_audio_transmit_callback+0x88>
		num = target - len;
    e8a4:	sub.w	r2, r9, r7
		if (left == NULL) {
    e8a8:	cmp	r0, #0
    e8aa:	bne.n	e81e <usb_audio_transmit_callback+0x36>
			memset(usb_audio_transmit_buffer + len, 0, num * 4);
    e8ac:	ldr	r3, [pc, #44]	; (e8dc <usb_audio_transmit_callback+0xf4>)
    e8ae:	mov	r1, r0
    e8b0:	lsls	r2, r2, #2
    e8b2:	add.w	r0, r3, r7, lsl #1
    e8b6:	bl	10104 <memset>
}
    e8ba:	vmov	r0, s16
    e8be:	vpop	{d8}
    e8c2:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (++count < 10) {   // TODO: dynamic adjust to match USB rate
    e8c6:	movs	r1, #176	; 0xb0
		target = 44;
    e8c8:	mov.w	r9, #44	; 0x2c
	if (++count < 10) {   // TODO: dynamic adjust to match USB rate
    e8cc:	str	r3, [r2, #0]
    e8ce:	vmov	s16, r1
    e8d2:	b.n	e808 <usb_audio_transmit_callback+0x20>
    e8d4:	.word	0x20001c38
    e8d8:	.word	0x2000780c
    e8dc:	.word	0x20005a40
    e8e0:	.word	0x20007810
    e8e4:	.word	0x20007818
    e8e8:	.word	0x20007814
    e8ec:	.word	0x20015cfc

0000e8f0 <tx_event(transfer_struct*)>:
{
    e8f0:	push	{r3, r4, r5, lr}
	int len = usb_audio_transmit_callback();
    e8f2:	bl	e7e8 <usb_audio_transmit_callback>
	usb_audio_sync_feedback = feedback_accumulator >> usb_audio_sync_rshift;
    e8f6:	ldr	r2, [pc, #68]	; (e93c <tx_event(transfer_struct*)+0x4c>)
    e8f8:	ldr	r3, [pc, #68]	; (e940 <tx_event(transfer_struct*)+0x50>)
	int len = usb_audio_transmit_callback();
    e8fa:	mov	r5, r0
	usb_audio_sync_feedback = feedback_accumulator >> usb_audio_sync_rshift;
    e8fc:	ldr	r2, [r2, #0]
    e8fe:	ldrb	r3, [r3, #0]
	usb_prepare_transfer(&tx_transfer, usb_audio_transmit_buffer, len, 0);
    e900:	ldr	r4, [pc, #64]	; (e944 <tx_event(transfer_struct*)+0x54>)
	usb_audio_sync_feedback = feedback_accumulator >> usb_audio_sync_rshift;
    e902:	lsrs	r2, r3
    e904:	ldr	r1, [pc, #64]	; (e948 <tx_event(transfer_struct*)+0x58>)
	usb_prepare_transfer(&tx_transfer, usb_audio_transmit_buffer, len, 0);
    e906:	movs	r3, #0
	usb_audio_sync_feedback = feedback_accumulator >> usb_audio_sync_rshift;
    e908:	str	r2, [r1, #0]
	usb_prepare_transfer(&tx_transfer, usb_audio_transmit_buffer, len, 0);
    e90a:	mov	r2, r0
    e90c:	mov	r1, r4
    e90e:	ldr	r0, [pc, #60]	; (e94c <tx_event(transfer_struct*)+0x5c>)
    e910:	bl	cb64 <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    e914:	adds	r0, r4, r5
	asm("dsb");
    e916:	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    e91a:	mov.w	r3, #3758153728	; 0xe000e000
    e91e:	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    e922:	adds	r4, #32
	} while (location < end_addr);
    e924:	cmp	r0, r4
    e926:	bhi.n	e91e <tx_event(transfer_struct*)+0x2e>
	asm("dsb");
    e928:	dsb	sy
	asm("isb");
    e92c:	isb	sy
	usb_transmit(AUDIO_TX_ENDPOINT, &tx_transfer);
    e930:	ldr	r1, [pc, #24]	; (e94c <tx_event(transfer_struct*)+0x5c>)
    e932:	movs	r0, #5
}
    e934:	ldmia.w	sp!, {r3, r4, r5, lr}
	usb_transmit(AUDIO_TX_ENDPOINT, &tx_transfer);
    e938:	b.w	cb94 <usb_transmit>
    e93c:	.word	0x20015848
    e940:	.word	0x20015d2b
    e944:	.word	0x20005a40
    e948:	.word	0x20201fa0
    e94c:	.word	0x20003a20

0000e950 <usb_audio_configure>:
{
    e950:	push	{r3, r4, r5, r6, r7, lr}
	usb_audio_underrun_count = 0;
    e952:	ldr	r1, [pc, #288]	; (ea74 <usb_audio_configure+0x124>)
    e954:	movs	r6, #0
	usb_audio_overrun_count = 0;
    e956:	ldr	r2, [pc, #288]	; (ea78 <usb_audio_configure+0x128>)
	if (usb_high_speed) {
    e958:	ldr	r3, [pc, #288]	; (ea7c <usb_audio_configure+0x12c>)
	usb_audio_underrun_count = 0;
    e95a:	str	r6, [r1, #0]
	memset(&rx_transfer, 0, sizeof(rx_transfer));
    e95c:	mov	r1, r6
	usb_audio_overrun_count = 0;
    e95e:	str	r6, [r2, #0]
	if (usb_high_speed) {
    e960:	ldrb	r2, [r3, #0]
	feedback_accumulator = 739875226; // 44.1 * 2^24
    e962:	ldr	r4, [pc, #284]	; (ea80 <usb_audio_configure+0x130>)
		usb_audio_sync_rshift = 10;
    e964:	cmp	r2, r6
	feedback_accumulator = 739875226; // 44.1 * 2^24
    e966:	ldr	r3, [pc, #284]	; (ea84 <usb_audio_configure+0x134>)
    e968:	ldr	r5, [pc, #284]	; (ea88 <usb_audio_configure+0x138>)
		usb_audio_sync_rshift = 10;
    e96a:	ite	ne
    e96c:	movne	r2, #8
    e96e:	moveq	r2, #10
	feedback_accumulator = 739875226; // 44.1 * 2^24
    e970:	str	r3, [r4, #0]
		usb_audio_sync_rshift = 10;
    e972:	ite	ne
    e974:	movne	r3, #4
    e976:	moveq	r3, #3
    e978:	ldr	r7, [pc, #272]	; (ea8c <usb_audio_configure+0x13c>)
    e97a:	strb	r2, [r5, #0]
	memset(&rx_transfer, 0, sizeof(rx_transfer));
    e97c:	movs	r2, #32
    e97e:	ldr	r0, [pc, #272]	; (ea90 <usb_audio_configure+0x140>)
    e980:	strb	r3, [r7, #0]
    e982:	bl	10104 <memset>
	usb_config_rx_iso(AUDIO_RX_ENDPOINT, AUDIO_RX_SIZE, 1, rx_event);
    e986:	ldr	r3, [pc, #268]	; (ea94 <usb_audio_configure+0x144>)
    e988:	movs	r2, #1
    e98a:	movs	r1, #180	; 0xb4
    e98c:	movs	r0, #5
    e98e:	bl	ca94 <usb_config_rx_iso>
	usb_prepare_transfer(&rx_transfer, rx_buffer, AUDIO_RX_SIZE, 0);
    e992:	mov	r3, r6
    e994:	movs	r2, #180	; 0xb4
    e996:	ldr	r1, [pc, #256]	; (ea98 <usb_audio_configure+0x148>)
    e998:	ldr	r0, [pc, #244]	; (ea90 <usb_audio_configure+0x140>)
    e99a:	bl	cb64 <usb_prepare_transfer>
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    e99e:	ldr	r3, [pc, #248]	; (ea98 <usb_audio_configure+0x148>)
	uint32_t end_addr = (uint32_t)addr + size;
    e9a0:	add.w	r1, r3, #180	; 0xb4
	asm("dsb");
    e9a4:	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    e9a8:	mov.w	r2, #3758153728	; 0xe000e000
    e9ac:	str.w	r3, [r2, #3932]	; 0xf5c
		location += 32;
    e9b0:	adds	r3, #32
	} while (location < end_addr);
    e9b2:	cmp	r1, r3
    e9b4:	bhi.n	e9ac <usb_audio_configure+0x5c>
	asm("dsb");
    e9b6:	dsb	sy
	asm("isb");
    e9ba:	isb	sy
	usb_receive(AUDIO_RX_ENDPOINT, &rx_transfer);
    e9be:	ldr	r1, [pc, #208]	; (ea90 <usb_audio_configure+0x140>)
    e9c0:	movs	r0, #5
    e9c2:	bl	cc4c <usb_receive>
	memset(&sync_transfer, 0, sizeof(sync_transfer));
    e9c6:	movs	r2, #32
    e9c8:	movs	r1, #0
    e9ca:	ldr	r0, [pc, #208]	; (ea9c <usb_audio_configure+0x14c>)
    e9cc:	bl	10104 <memset>
	usb_config_tx_iso(AUDIO_SYNC_ENDPOINT, usb_audio_sync_nbytes, 1, sync_event);
    e9d0:	ldrb	r1, [r7, #0]
    e9d2:	ldr	r3, [pc, #204]	; (eaa0 <usb_audio_configure+0x150>)
    e9d4:	movs	r2, #1
    e9d6:	movs	r0, #6
	usb_audio_sync_feedback = feedback_accumulator >> usb_audio_sync_rshift;
    e9d8:	ldr	r6, [pc, #200]	; (eaa4 <usb_audio_configure+0x154>)
	usb_config_tx_iso(AUDIO_SYNC_ENDPOINT, usb_audio_sync_nbytes, 1, sync_event);
    e9da:	bl	caf8 <usb_config_tx_iso>
	usb_audio_sync_feedback = feedback_accumulator >> usb_audio_sync_rshift;
    e9de:	ldrb	r2, [r5, #0]
    e9e0:	ldr	r3, [r4, #0]
	usb_prepare_transfer(&sync_transfer, &usb_audio_sync_feedback, usb_audio_sync_nbytes, 0);
    e9e2:	mov	r1, r6
    e9e4:	ldr	r0, [pc, #180]	; (ea9c <usb_audio_configure+0x14c>)
	usb_audio_sync_feedback = feedback_accumulator >> usb_audio_sync_rshift;
    e9e6:	lsrs	r3, r2
	usb_prepare_transfer(&sync_transfer, &usb_audio_sync_feedback, usb_audio_sync_nbytes, 0);
    e9e8:	ldrb	r2, [r7, #0]
	usb_audio_sync_feedback = feedback_accumulator >> usb_audio_sync_rshift;
    e9ea:	str	r3, [r6, #0]
	usb_prepare_transfer(&sync_transfer, &usb_audio_sync_feedback, usb_audio_sync_nbytes, 0);
    e9ec:	movs	r3, #0
    e9ee:	bl	cb64 <usb_prepare_transfer>
	arm_dcache_flush(&usb_audio_sync_feedback, usb_audio_sync_nbytes);
    e9f2:	ldrb	r2, [r7, #0]
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    e9f4:	mov	r3, r6
	uint32_t end_addr = (uint32_t)addr + size;
    e9f6:	add	r2, r6
	asm("dsb");
    e9f8:	dsb	sy
		SCB_CACHE_DCCMVAC = location;
    e9fc:	mov.w	r1, #3758153728	; 0xe000e000
    ea00:	str.w	r3, [r1, #3944]	; 0xf68
		location += 32;
    ea04:	adds	r3, #32
	} while (location < end_addr);
    ea06:	cmp	r2, r3
    ea08:	bhi.n	ea00 <usb_audio_configure+0xb0>
	asm("dsb");
    ea0a:	dsb	sy
	asm("isb");
    ea0e:	isb	sy
	usb_transmit(AUDIO_SYNC_ENDPOINT, &sync_transfer);
    ea12:	ldr	r1, [pc, #136]	; (ea9c <usb_audio_configure+0x14c>)
    ea14:	movs	r0, #6
    ea16:	bl	cb94 <usb_transmit>
	memset(&tx_transfer, 0, sizeof(tx_transfer));
    ea1a:	movs	r2, #32
    ea1c:	movs	r1, #0
    ea1e:	ldr	r0, [pc, #136]	; (eaa8 <usb_audio_configure+0x158>)
    ea20:	bl	10104 <memset>
	usb_config_tx_iso(AUDIO_TX_ENDPOINT, AUDIO_TX_SIZE, 1, tx_event);
    ea24:	ldr	r3, [pc, #132]	; (eaac <usb_audio_configure+0x15c>)
    ea26:	movs	r2, #1
    ea28:	movs	r1, #180	; 0xb4
    ea2a:	movs	r0, #5
    ea2c:	bl	caf8 <usb_config_tx_iso>
	int len = usb_audio_transmit_callback();
    ea30:	bl	e7e8 <usb_audio_transmit_callback>
	usb_audio_sync_feedback = feedback_accumulator >> usb_audio_sync_rshift;
    ea34:	ldrb	r2, [r5, #0]
    ea36:	ldr	r3, [r4, #0]
	int len = usb_audio_transmit_callback();
    ea38:	mov	r5, r0
	usb_prepare_transfer(&tx_transfer, usb_audio_transmit_buffer, len, 0);
    ea3a:	ldr	r4, [pc, #116]	; (eab0 <usb_audio_configure+0x160>)
	usb_audio_sync_feedback = feedback_accumulator >> usb_audio_sync_rshift;
    ea3c:	lsrs	r3, r2
	usb_prepare_transfer(&tx_transfer, usb_audio_transmit_buffer, len, 0);
    ea3e:	mov	r2, r0
    ea40:	mov	r1, r4
    ea42:	ldr	r0, [pc, #100]	; (eaa8 <usb_audio_configure+0x158>)
	usb_audio_sync_feedback = feedback_accumulator >> usb_audio_sync_rshift;
    ea44:	str	r3, [r6, #0]
	usb_prepare_transfer(&tx_transfer, usb_audio_transmit_buffer, len, 0);
    ea46:	movs	r3, #0
    ea48:	bl	cb64 <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    ea4c:	adds	r0, r4, r5
	asm("dsb");
    ea4e:	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    ea52:	mov.w	r3, #3758153728	; 0xe000e000
    ea56:	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    ea5a:	adds	r4, #32
	} while (location < end_addr);
    ea5c:	cmp	r0, r4
    ea5e:	bhi.n	ea56 <usb_audio_configure+0x106>
	asm("dsb");
    ea60:	dsb	sy
	asm("isb");
    ea64:	isb	sy
	usb_transmit(AUDIO_TX_ENDPOINT, &tx_transfer);
    ea68:	ldr	r1, [pc, #60]	; (eaa8 <usb_audio_configure+0x158>)
    ea6a:	movs	r0, #5
}
    ea6c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	usb_transmit(AUDIO_TX_ENDPOINT, &tx_transfer);
    ea70:	b.w	cb94 <usb_transmit>
    ea74:	.word	0x20015cd8
    ea78:	.word	0x20015cd4
    ea7c:	.word	0x20015d2f
    ea80:	.word	0x20015848
    ea84:	.word	0x2c19999a
    ea88:	.word	0x20015d2b
    ea8c:	.word	0x20015d2a
    ea90:	.word	0x200038e0
    ea94:	.word	0x0000e779
    ea98:	.word	0x20201fc0
    ea9c:	.word	0x20003900
    eaa0:	.word	0x0000e4b1
    eaa4:	.word	0x20201fa0
    eaa8:	.word	0x20003a20
    eaac:	.word	0x0000e8f1
    eab0:	.word	0x20005a40

0000eab4 <usb_audio_get_feature>:
};

int usb_audio_get_feature(void *stp, uint8_t *data, uint32_t *datalen)
{
	struct setup_struct setup = *((struct setup_struct *)stp);
	if (setup.bmRequestType==0xA1) { // should check bRequest, bChannel, and UnitID
    eab4:	ldrb	r3, [r0, #0]
    eab6:	cmp	r3, #161	; 0xa1
    eab8:	beq.n	eabe <usb_audio_get_feature+0xa>
			if (setup.bCS==0x01) { // mute
				data[0] = AudioInputUSB::features.mute;  // 1=mute, 0=unmute
				*datalen = 1;
				return 1;
			}
			else if (setup.bCS==0x02) { // volume
    eaba:	movs	r0, #0
				*datalen = 2;
				return 1;
			}
	}
	return 0;
}
    eabc:	bx	lr
	struct setup_struct setup = *((struct setup_struct *)stp);
    eabe:	ldrb	r3, [r0, #3]
    eac0:	ldrb	r0, [r0, #1]
			if (setup.bCS==0x01) { // mute
    eac2:	cmp	r3, #1
    eac4:	beq.n	ead8 <usb_audio_get_feature+0x24>
			else if (setup.bCS==0x02) { // volume
    eac6:	cmp	r3, #2
    eac8:	bne.n	eaba <usb_audio_get_feature+0x6>
				if (setup.bRequest==0x81) { // GET_CURR
    eaca:	subs	r0, #129	; 0x81
    eacc:	cmp	r0, #3
    eace:	bhi.n	eaba <usb_audio_get_feature+0x6>
    ead0:	tbb	[pc, r0]
    ead4:	.word	0x0b13171b
{
    ead8:	push	{r4}
				data[0] = AudioInputUSB::features.mute;  // 1=mute, 0=unmute
    eada:	ldr	r4, [pc, #56]	; (eb14 <usb_audio_get_feature+0x60>)
				return 1;
    eadc:	mov	r0, r3
				data[0] = AudioInputUSB::features.mute;  // 1=mute, 0=unmute
    eade:	ldr	r4, [r4, #4]
    eae0:	strb	r4, [r1, #0]
}
    eae2:	ldr.w	r4, [sp], #4
				*datalen = 1;
    eae6:	str	r3, [r2, #0]
}
    eae8:	bx	lr
					data[0] = 1; // increment vol by by 1
    eaea:	movs	r3, #1
    eaec:	movs	r0, #0
    eaee:	strb	r3, [r1, #0]
				*datalen = 2;
    eaf0:	movs	r3, #2
					data[1] = (AudioInputUSB::features.volume>>8) & 0xFF;
    eaf2:	strb	r0, [r1, #1]
				return 1;
    eaf4:	movs	r0, #1
				*datalen = 2;
    eaf6:	str	r3, [r2, #0]
				return 1;
    eaf8:	bx	lr
					data[0] = FEATURE_MAX_VOLUME;  // max level, for range of 0 to MAX
    eafa:	movs	r3, #255	; 0xff
    eafc:	movs	r0, #0
    eafe:	strb	r3, [r1, #0]
					data[1] = 0;
    eb00:	b.n	eaf0 <usb_audio_get_feature+0x3c>
					data[0] = 0;     // min level is 0
    eb02:	movs	r3, #0
    eb04:	mov	r0, r3
    eb06:	strb	r3, [r1, #0]
					data[1] = 0;
    eb08:	b.n	eaf0 <usb_audio_get_feature+0x3c>
					data[0] = AudioInputUSB::features.volume & 0xFF;
    eb0a:	ldr	r3, [pc, #8]	; (eb14 <usb_audio_get_feature+0x60>)
    eb0c:	ldr	r0, [r3, #8]
    eb0e:	strb	r0, [r1, #0]
					data[1] = (AudioInputUSB::features.volume>>8) & 0xFF;
    eb10:	ldrb	r0, [r3, #9]
    eb12:	b.n	eaf0 <usb_audio_get_feature+0x3c>
    eb14:	.word	0x20001c28

0000eb18 <usb_audio_set_feature>:

int usb_audio_set_feature(void *stp, uint8_t *buf) 
{
	struct setup_struct setup = *((struct setup_struct *)stp);
	if (setup.bmRequestType==0x21) { // should check bRequest, bChannel and UnitID
    eb18:	ldrb	r3, [r0, #0]
    eb1a:	cmp	r3, #33	; 0x21
    eb1c:	beq.n	eb22 <usb_audio_set_feature+0xa>
					AudioInputUSB::features.change = 1;
					return 1;
				}
			}
	}
	return 0;
    eb1e:	movs	r0, #0
}
    eb20:	bx	lr
	struct setup_struct setup = *((struct setup_struct *)stp);
    eb22:	ldrb	r3, [r0, #3]
    eb24:	ldrb	r2, [r0, #1]
			if (setup.bCS==0x01) { // mute
    eb26:	cmp	r3, #1
    eb28:	beq.n	eb3e <usb_audio_set_feature+0x26>
				if (setup.bRequest==0x01) { // SET_CUR
    eb2a:	cmp	r3, #2
    eb2c:	bne.n	eb1e <usb_audio_set_feature+0x6>
    eb2e:	cmp	r2, #1
    eb30:	bne.n	eb1e <usb_audio_set_feature+0x6>
					AudioInputUSB::features.volume = buf[0];
    eb32:	ldr	r3, [pc, #28]	; (eb50 <usb_audio_set_feature+0x38>)
					return 1;
    eb34:	mov	r0, r2
					AudioInputUSB::features.volume = buf[0];
    eb36:	ldrb	r1, [r1, #0]
					AudioInputUSB::features.change = 1;
    eb38:	str	r2, [r3, #0]
					AudioInputUSB::features.volume = buf[0];
    eb3a:	str	r1, [r3, #8]
					return 1;
    eb3c:	bx	lr
				if (setup.bRequest==0x01) { // SET_CUR
    eb3e:	cmp	r2, #1
    eb40:	bne.n	eb1e <usb_audio_set_feature+0x6>
					AudioInputUSB::features.mute = buf[0]; // 1=mute,0=unmute
    eb42:	ldr	r3, [pc, #12]	; (eb50 <usb_audio_set_feature+0x38>)
					return 1;
    eb44:	mov	r0, r2
					AudioInputUSB::features.mute = buf[0]; // 1=mute,0=unmute
    eb46:	ldrb	r1, [r1, #0]
					AudioInputUSB::features.change = 1;
    eb48:	strd	r2, r1, [r3]
					return 1;
    eb4c:	bx	lr
    eb4e:	nop
    eb50:	.word	0x20001c28

0000eb54 <Print::write(unsigned char const*, unsigned int)>:

#include "debug/printf.h"
#undef printf

size_t Print::write(const uint8_t *buffer, size_t size)
{
    eb54:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (buffer == nullptr) return 0;
    eb58:	mov	r4, r1
    eb5a:	cbz	r1, eb96 <Print::write(unsigned char const*, unsigned int)+0x42>
	size_t count = 0;
	while (size--) count += write(*buffer++);
    eb5c:	cbz	r2, eb9e <Print::write(unsigned char const*, unsigned int)+0x4a>
    eb5e:	mov	r6, r0
    eb60:	add.w	r8, r1, r2
	size_t count = 0;
    eb64:	movs	r5, #0
    eb66:	ldr	r7, [pc, #60]	; (eba4 <Print::write(unsigned char const*, unsigned int)+0x50>)
	while (size--) count += write(*buffer++);
    eb68:	ldr	r3, [r6, #0]
    eb6a:	ldrb.w	r0, [r4], #1
    eb6e:	ldr	r3, [r3, #0]
    eb70:	cmp	r3, r7
    eb72:	bne.n	eb84 <Print::write(unsigned char const*, unsigned int)+0x30>
    eb74:	bl	b938 <usb_serial_putchar>
    eb78:	cmp	r4, r8
    eb7a:	add	r5, r0
    eb7c:	bne.n	eb68 <Print::write(unsigned char const*, unsigned int)+0x14>
	return count;
}
    eb7e:	mov	r0, r5
    eb80:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	while (size--) count += write(*buffer++);
    eb84:	mov	r1, r0
    eb86:	mov	r0, r6
    eb88:	blx	r3
    eb8a:	cmp	r4, r8
    eb8c:	add	r5, r0
    eb8e:	bne.n	eb68 <Print::write(unsigned char const*, unsigned int)+0x14>
}
    eb90:	mov	r0, r5
    eb92:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (buffer == nullptr) return 0;
    eb96:	mov	r5, r1
}
    eb98:	mov	r0, r5
    eb9a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (buffer == nullptr) return 0;
    eb9e:	mov	r5, r2
    eba0:	b.n	eb7e <Print::write(unsigned char const*, unsigned int)+0x2a>
    eba2:	nop
    eba4:	.word	0x0000de19

0000eba8 <Print::print(long)>:

size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
    eba8:	cmp	r1, #0
{
    ebaa:	push	{r4, r5, r6, r7, lr}
    ebac:	sub	sp, #44	; 0x2c
	if (n < 0) {
    ebae:	blt.n	ec36 <Print::print(long)+0x8e>
	} else if (base == 1) {
		base = 10;
	}


	if (n == 0) {
    ebb0:	beq.n	ec2a <Print::print(long)+0x82>
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
    ebb2:	ldr	r3, [pc, #188]	; (ec70 <Print::print(long)+0xc8>)
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
    ebb4:	cmp	r1, #9
			digit = n % base;
    ebb6:	umull	r3, ip, r3, r1
    ebba:	mov.w	ip, ip, lsr #3
    ebbe:	add.w	r3, ip, ip, lsl #2
    ebc2:	sub.w	r3, r1, r3, lsl #1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    ebc6:	add.w	r3, r3, #48	; 0x30
    ebca:	strb.w	r3, [sp, #37]	; 0x25
			if (n == 0) break;
    ebce:	ble.n	ec68 <Print::print(long)+0xc0>
	uint8_t sign=0;
    ebd0:	movs	r7, #0
		i = sizeof(buf) - 1;
    ebd2:	movs	r1, #33	; 0x21
			digit = n % base;
    ebd4:	ldr	r6, [pc, #152]	; (ec70 <Print::print(long)+0xc8>)
    ebd6:	umull	r3, r2, r6, ip
			i--;
    ebda:	subs	r3, r1, #1
    ebdc:	mov	r5, r1
    ebde:	mov	lr, ip
			digit = n % base;
    ebe0:	lsrs	r2, r2, #3
			i--;
    ebe2:	uxtb	r1, r3
			if (n == 0) break;
    ebe4:	cmp.w	lr, #9
			digit = n % base;
    ebe8:	add.w	r3, r2, r2, lsl #2
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    ebec:	add.w	r4, r1, #40	; 0x28
			digit = n % base;
    ebf0:	sub.w	r3, ip, r3, lsl #1
			n /= base;
    ebf4:	mov	ip, r2
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    ebf6:	add	r4, sp
    ebf8:	add.w	r3, r3, #48	; 0x30
    ebfc:	strb.w	r3, [r4, #-36]
			if (n == 0) break;
    ec00:	bhi.n	ebd6 <Print::print(long)+0x2e>
		}
	}
	if (sign) {
    ec02:	cbz	r7, ec5a <Print::print(long)+0xb2>
		i--;
    ec04:	subs	r5, #2
    ec06:	uxtb	r5, r5
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
    ec08:	mov	r1, r5
    ec0a:	rsb	r2, r5, #34	; 0x22
		buf[i] = '-';
    ec0e:	add.w	r3, r5, #40	; 0x28
    ec12:	add.w	r5, sp, r3
    ec16:	movs	r3, #45	; 0x2d
    ec18:	strb.w	r3, [r5, #-36]
	return write(buf + i, sizeof(buf) - i);
    ec1c:	ldr	r3, [r0, #0]
    ec1e:	add	r4, sp, #4
    ec20:	ldr	r3, [r3, #4]
    ec22:	add	r1, r4
    ec24:	blx	r3
}
    ec26:	add	sp, #44	; 0x2c
    ec28:	pop	{r4, r5, r6, r7, pc}
		buf[sizeof(buf) - 1] = '0';
    ec2a:	movs	r3, #48	; 0x30
    ec2c:	movs	r2, #1
    ec2e:	movs	r1, #33	; 0x21
    ec30:	strb.w	r3, [sp, #37]	; 0x25
	if (sign) {
    ec34:	b.n	ec1c <Print::print(long)+0x74>
		n = -n;
    ec36:	negs	r2, r1
			digit = n % base;
    ec38:	ldr	r3, [pc, #52]	; (ec70 <Print::print(long)+0xc8>)
			if (n == 0) break;
    ec3a:	adds	r1, #9
			digit = n % base;
    ec3c:	umull	r3, ip, r3, r2
    ec40:	mov.w	ip, ip, lsr #3
    ec44:	add.w	r3, ip, ip, lsl #2
    ec48:	sub.w	r2, r2, r3, lsl #1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    ec4c:	add.w	r2, r2, #48	; 0x30
    ec50:	strb.w	r2, [sp, #37]	; 0x25
			if (n == 0) break;
    ec54:	bge.n	ec60 <Print::print(long)+0xb8>
		sign = '-';
    ec56:	movs	r7, #45	; 0x2d
    ec58:	b.n	ebd2 <Print::print(long)+0x2a>
	return write(buf + i, sizeof(buf) - i);
    ec5a:	rsb	r2, r1, #34	; 0x22
    ec5e:	b.n	ec1c <Print::print(long)+0x74>
			if (n == 0) break;
    ec60:	movs	r1, #32
    ec62:	movs	r2, #2
    ec64:	mov	r5, r1
    ec66:	b.n	ec0e <Print::print(long)+0x66>
    ec68:	movs	r2, #1
    ec6a:	movs	r1, #33	; 0x21
    ec6c:	b.n	ec1c <Print::print(long)+0x74>
    ec6e:	nop
    ec70:	.word	0xcccccccd

0000ec74 <Print::println()>:
{
    ec74:	push	{lr}
	return write(buf, 2);
    ec76:	ldr	r3, [r0, #0]
{
    ec78:	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
    ec7a:	movw	ip, #2573	; 0xa0d
	return write(buf, 2);
    ec7e:	movs	r2, #2
    ec80:	add	r1, sp, #4
    ec82:	ldr	r3, [r3, #4]
	uint8_t buf[2]={'\r', '\n'};
    ec84:	strh.w	ip, [sp, #4]
	return write(buf, 2);
    ec88:	blx	r3
}
    ec8a:	add	sp, #12
    ec8c:	ldr.w	pc, [sp], #4

0000ec90 <_write>:
	((class Print *)file)->write((uint8_t *)ptr, len);
    ec90:	ldr	r3, [r0, #0]
{
    ec92:	push	{r4, lr}
    ec94:	mov	r4, r2
	((class Print *)file)->write((uint8_t *)ptr, len);
    ec96:	ldr	r3, [r3, #4]
    ec98:	blx	r3
}
    ec9a:	mov	r0, r4
    ec9c:	pop	{r4, pc}
    ec9e:	nop

0000eca0 <Print::printf(char const*, ...)>:
{
    eca0:	push	{r1, r2, r3}
    eca2:	push	{lr}
    eca4:	sub	sp, #8
    eca6:	add	r2, sp, #12
    eca8:	ldr.w	r1, [r2], #4
	va_start(ap, format);
    ecac:	str	r2, [sp, #4]
	int retval = vdprintf((int)this, format, ap);
    ecae:	bl	ff2c <vdprintf>
}
    ecb2:	add	sp, #8
    ecb4:	ldr.w	lr, [sp], #4
    ecb8:	add	sp, #12
    ecba:	bx	lr

0000ecbc <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
{
    ecbc:	push	{r4, r5, r6, lr}
    ecbe:	mov	r6, r0
    ecc0:	sub	sp, #40	; 0x28
	if (base == 0) {
    ecc2:	cbnz	r2, ecdc <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x20>
		return write((uint8_t)n);
    ecc4:	ldr	r3, [r0, #0]
    ecc6:	uxtb	r1, r1
    ecc8:	ldr	r2, [pc, #148]	; (ed60 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0xa4>)
    ecca:	ldr	r3, [r3, #0]
    eccc:	cmp	r3, r2
    ecce:	bne.n	ed58 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x9c>
    ecd0:	mov	r0, r1
}
    ecd2:	add	sp, #40	; 0x28
    ecd4:	ldmia.w	sp!, {r4, r5, r6, lr}
    ecd8:	b.w	b938 <usb_serial_putchar>
		base = 10;
    ecdc:	cmp	r2, #1
    ecde:	it	eq
    ece0:	moveq	r2, #10
	if (n == 0) {
    ece2:	cbz	r1, ed4c <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x90>
		i = sizeof(buf) - 1;
    ece4:	mov.w	lr, #33	; 0x21
    ece8:	b.n	ecee <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x32>
			i--;
    ecea:	uxtb.w	lr, r0
    ecee:	add.w	r0, lr, #4294967295
			digit = n % base;
    ecf2:	udiv	r5, r1, r2
    ecf6:	mls	r4, r2, r5, r1
    ecfa:	uxtb.w	ip, r4
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    ecfe:	cmp	r4, #9
    ed00:	add.w	r4, ip, #55	; 0x37
    ed04:	add.w	ip, ip, #48	; 0x30
    ed08:	it	ls
    ed0a:	uxtbls.w	r4, ip
    ed0e:	add.w	ip, lr, #40	; 0x28
    ed12:	it	hi
    ed14:	uxtbhi	r4, r4
			if (n == 0) break;
    ed16:	cmp	r1, r2
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    ed18:	add	ip, sp
			n /= base;
    ed1a:	mov	r1, r5
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    ed1c:	strb.w	r4, [ip, #-36]
			if (n == 0) break;
    ed20:	bcs.n	ecea <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x2e>
	if (sign) {
    ed22:	cbz	r3, ed38 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x7c>
		i--;
    ed24:	add.w	lr, lr, #4294967295
		buf[i] = '-';
    ed28:	movs	r2, #45	; 0x2d
		i--;
    ed2a:	uxtb.w	lr, lr
		buf[i] = '-';
    ed2e:	add.w	r3, lr, #40	; 0x28
    ed32:	add	r3, sp
    ed34:	strb.w	r2, [r3, #-36]
	return write(buf + i, sizeof(buf) - i);
    ed38:	ldr	r3, [r6, #0]
    ed3a:	add	r1, sp, #4
    ed3c:	rsb	r2, lr, #34	; 0x22
    ed40:	mov	r0, r6
    ed42:	ldr	r3, [r3, #4]
    ed44:	add	r1, lr
    ed46:	blx	r3
}
    ed48:	add	sp, #40	; 0x28
    ed4a:	pop	{r4, r5, r6, pc}
		buf[sizeof(buf) - 1] = '0';
    ed4c:	movs	r2, #48	; 0x30
		i = sizeof(buf) - 1;
    ed4e:	mov.w	lr, #33	; 0x21
		buf[sizeof(buf) - 1] = '0';
    ed52:	strb.w	r2, [sp, #37]	; 0x25
		i = sizeof(buf) - 1;
    ed56:	b.n	ed22 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x66>
}
    ed58:	add	sp, #40	; 0x28
    ed5a:	ldmia.w	sp!, {r4, r5, r6, lr}
		return write((uint8_t)n);
    ed5e:	bx	r3
    ed60:	.word	0x0000de19
    ed64:	.word	0x00000000

0000ed68 <Print::printFloat(double, unsigned char)>:
size_t Print::printFloat(double number, uint8_t digits) 
{
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    ed68:	vcmp.f64	d0, d0
{
    ed6c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (isnan(number)) return print("nan");
    ed70:	vmrs	APSR_nzcv, fpscr
{
    ed74:	mov	r5, r0
    ed76:	vpush	{d8}
    ed7a:	sub	sp, #48	; 0x30
	if (isnan(number)) return print("nan");
    ed7c:	bvs.w	f152 <Print::printFloat(double, unsigned char)+0x3ea>
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
    ed80:	vabs.f64	d7, d0
    	if (isinf(number)) return print("inf");
    ed84:	vldr	d6, [pc, #848]	; f0d8 <Print::printFloat(double, unsigned char)+0x370>
    ed88:	vcmp.f64	d7, d6
    ed8c:	vmrs	APSR_nzcv, fpscr
    ed90:	bgt.w	f0c4 <Print::printFloat(double, unsigned char)+0x35c>
    	if (number > 4294967040.0f) return print("ovf");  // constant determined empirically
    ed94:	vldr	d7, [pc, #840]	; f0e0 <Print::printFloat(double, unsigned char)+0x378>
    ed98:	vcmpe.f64	d0, d7
    ed9c:	vmrs	APSR_nzcv, fpscr
    eda0:	bgt.w	f0b0 <Print::printFloat(double, unsigned char)+0x348>
    	if (number <-4294967040.0f) return print("ovf");  // constant determined empirically
    eda4:	vldr	d7, [pc, #832]	; f0e8 <Print::printFloat(double, unsigned char)+0x380>
    eda8:	vcmpe.f64	d0, d7
    edac:	vmrs	APSR_nzcv, fpscr
    edb0:	bmi.w	f0b0 <Print::printFloat(double, unsigned char)+0x348>
	
	// Handle negative numbers
	if (number < 0.0) {
    edb4:	vcmpe.f64	d0, #0.0
    edb8:	mov	r4, r1
    edba:	vmrs	APSR_nzcv, fpscr
    edbe:	bmi.w	f0cc <Print::printFloat(double, unsigned char)+0x364>
	uint8_t sign=0;
    edc2:	movs	r6, #0
		sign = 1;
		number = -number;
	}

	// Round correctly so that print(1.999, 2) prints as "2.00"
	double rounding = 0.5;
    edc4:	vmov.f64	d8, #96	; 0x3f000000  0.5
	for (uint8_t i=0; i<digits; ++i) {
    edc8:	cbz	r4, eddc <Print::printFloat(double, unsigned char)+0x74>
    edca:	movs	r3, #0
		rounding *= 0.1;
    edcc:	vldr	d6, [pc, #800]	; f0f0 <Print::printFloat(double, unsigned char)+0x388>
	for (uint8_t i=0; i<digits; ++i) {
    edd0:	adds	r3, #1
		rounding *= 0.1;
    edd2:	vmul.f64	d8, d8, d6
	for (uint8_t i=0; i<digits; ++i) {
    edd6:	uxtb	r2, r3
    edd8:	cmp	r4, r2
    edda:	bhi.n	edd0 <Print::printFloat(double, unsigned char)+0x68>
	}
	number += rounding;
    eddc:	vadd.f64	d8, d0, d8

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
    ede0:	vcvt.u32.f64	s15, d8
    ede4:	vmov	r8, s15
	if (n == 0) {
    ede8:	cmp.w	r8, #0
    edec:	bne.w	f100 <Print::printFloat(double, unsigned char)+0x398>
		buf[sizeof(buf) - 1] = '0';
    edf0:	movs	r3, #48	; 0x30
    edf2:	strb.w	r3, [sp, #45]	; 0x2d
		i = sizeof(buf) - 1;
    edf6:	movs	r3, #33	; 0x21
	if (sign) {
    edf8:	cbz	r6, ee0a <Print::printFloat(double, unsigned char)+0xa2>
		i--;
    edfa:	subs	r3, #1
		buf[i] = '-';
    edfc:	movs	r1, #45	; 0x2d
		i--;
    edfe:	uxtb	r3, r3
		buf[i] = '-';
    ee00:	add.w	r2, r3, #48	; 0x30
    ee04:	add	r2, sp
    ee06:	strb.w	r1, [r2, #-36]
	return write(buf + i, sizeof(buf) - i);
    ee0a:	ldr	r2, [r5, #0]
    ee0c:	add	r1, sp, #12
    ee0e:	mov	r0, r5
    ee10:	ldr	r6, [r2, #4]
    ee12:	add	r1, r3
    ee14:	rsb	r2, r3, #34	; 0x22
    ee18:	blx	r6
    ee1a:	mov	r6, r0
	double remainder = number - (double)int_part;
	count += printNumber(int_part, 10, sign);

	// Print the decimal point, but only if there are digits beyond
	if (digits > 0) {
    ee1c:	cmp	r4, #0
    ee1e:	beq.w	f0a4 <Print::printFloat(double, unsigned char)+0x33c>
	double remainder = number - (double)int_part;
    ee22:	vmov	s15, r8
		uint8_t n, buf[16], count=1;
		buf[0] = '.';
    ee26:	movs	r3, #46	; 0x2e
    ee28:	cmp	r4, #15
    ee2a:	mov	r2, r4
	double remainder = number - (double)int_part;
    ee2c:	vcvt.f64.u32	d0, s15
		buf[0] = '.';
    ee30:	strb.w	r3, [sp, #12]

		// Extract digits from the remainder one at a time
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
			remainder *= 10.0;
    ee34:	vmov.f64	d7, #36	; 0x41200000  10.0
    ee38:	it	cs
    ee3a:	movcs	r2, #15
		while (digits-- > 0) {
    ee3c:	cmp	r4, #1
	double remainder = number - (double)int_part;
    ee3e:	vsub.f64	d0, d8, d0
			remainder *= 10.0;
    ee42:	vmul.f64	d0, d0, d7
			n = (uint8_t)(remainder);
    ee46:	vcvt.u32.f64	s13, d0
    ee4a:	vstr	s13, [sp, #4]
    ee4e:	ldrb.w	r3, [sp, #4]
			buf[count++] = '0' + n;
			remainder -= n; 
    ee52:	vmov	s13, r3
			buf[count++] = '0' + n;
    ee56:	add.w	r3, r3, #48	; 0x30
			remainder -= n; 
    ee5a:	vcvt.f64.s32	d6, s13
			buf[count++] = '0' + n;
    ee5e:	strb.w	r3, [sp, #13]
			remainder -= n; 
    ee62:	vsub.f64	d0, d0, d6
		while (digits-- > 0) {
    ee66:	beq.w	f096 <Print::printFloat(double, unsigned char)+0x32e>
			remainder *= 10.0;
    ee6a:	vmul.f64	d0, d0, d7
		while (digits-- > 0) {
    ee6e:	cmp	r4, #2
			n = (uint8_t)(remainder);
    ee70:	vcvt.u32.f64	s13, d0
    ee74:	vstr	s13, [sp, #4]
    ee78:	ldrb.w	r3, [sp, #4]
			remainder -= n; 
    ee7c:	vmov	s13, r3
			buf[count++] = '0' + n;
    ee80:	add.w	r3, r3, #48	; 0x30
			remainder -= n; 
    ee84:	vcvt.f64.s32	d6, s13
			buf[count++] = '0' + n;
    ee88:	strb.w	r3, [sp, #14]
			remainder -= n; 
    ee8c:	vsub.f64	d0, d0, d6
		while (digits-- > 0) {
    ee90:	beq.w	f096 <Print::printFloat(double, unsigned char)+0x32e>
			remainder *= 10.0;
    ee94:	vmul.f64	d0, d0, d7
		while (digits-- > 0) {
    ee98:	cmp	r4, #3
			n = (uint8_t)(remainder);
    ee9a:	vcvt.u32.f64	s13, d0
    ee9e:	vstr	s13, [sp, #4]
    eea2:	ldrb.w	r3, [sp, #4]
			remainder -= n; 
    eea6:	vmov	s13, r3
			buf[count++] = '0' + n;
    eeaa:	add.w	r3, r3, #48	; 0x30
			remainder -= n; 
    eeae:	vcvt.f64.s32	d6, s13
			buf[count++] = '0' + n;
    eeb2:	strb.w	r3, [sp, #15]
			remainder -= n; 
    eeb6:	vsub.f64	d0, d0, d6
		while (digits-- > 0) {
    eeba:	beq.w	f096 <Print::printFloat(double, unsigned char)+0x32e>
			remainder *= 10.0;
    eebe:	vmul.f64	d0, d0, d7
		while (digits-- > 0) {
    eec2:	cmp	r4, #4
			n = (uint8_t)(remainder);
    eec4:	vcvt.u32.f64	s13, d0
    eec8:	vstr	s13, [sp, #4]
    eecc:	ldrb.w	r3, [sp, #4]
			remainder -= n; 
    eed0:	vmov	s13, r3
			buf[count++] = '0' + n;
    eed4:	add.w	r3, r3, #48	; 0x30
			remainder -= n; 
    eed8:	vcvt.f64.s32	d6, s13
			buf[count++] = '0' + n;
    eedc:	strb.w	r3, [sp, #16]
			remainder -= n; 
    eee0:	vsub.f64	d0, d0, d6
		while (digits-- > 0) {
    eee4:	beq.w	f096 <Print::printFloat(double, unsigned char)+0x32e>
			remainder *= 10.0;
    eee8:	vmul.f64	d0, d0, d7
		while (digits-- > 0) {
    eeec:	cmp	r4, #5
			n = (uint8_t)(remainder);
    eeee:	vcvt.u32.f64	s13, d0
    eef2:	vstr	s13, [sp, #4]
    eef6:	ldrb.w	r3, [sp, #4]
			remainder -= n; 
    eefa:	vmov	s13, r3
			buf[count++] = '0' + n;
    eefe:	add.w	r3, r3, #48	; 0x30
			remainder -= n; 
    ef02:	vcvt.f64.s32	d6, s13
			buf[count++] = '0' + n;
    ef06:	strb.w	r3, [sp, #17]
			remainder -= n; 
    ef0a:	vsub.f64	d0, d0, d6
		while (digits-- > 0) {
    ef0e:	beq.w	f096 <Print::printFloat(double, unsigned char)+0x32e>
			remainder *= 10.0;
    ef12:	vmul.f64	d0, d0, d7
		while (digits-- > 0) {
    ef16:	cmp	r4, #6
			n = (uint8_t)(remainder);
    ef18:	vcvt.u32.f64	s13, d0
    ef1c:	vstr	s13, [sp, #4]
    ef20:	ldrb.w	r3, [sp, #4]
			remainder -= n; 
    ef24:	vmov	s13, r3
			buf[count++] = '0' + n;
    ef28:	add.w	r3, r3, #48	; 0x30
			remainder -= n; 
    ef2c:	vcvt.f64.s32	d6, s13
			buf[count++] = '0' + n;
    ef30:	strb.w	r3, [sp, #18]
			remainder -= n; 
    ef34:	vsub.f64	d0, d0, d6
		while (digits-- > 0) {
    ef38:	beq.w	f096 <Print::printFloat(double, unsigned char)+0x32e>
			remainder *= 10.0;
    ef3c:	vmul.f64	d0, d0, d7
		while (digits-- > 0) {
    ef40:	cmp	r4, #7
			n = (uint8_t)(remainder);
    ef42:	vcvt.u32.f64	s13, d0
    ef46:	vstr	s13, [sp, #4]
    ef4a:	ldrb.w	r3, [sp, #4]
			remainder -= n; 
    ef4e:	vmov	s13, r3
			buf[count++] = '0' + n;
    ef52:	add.w	r3, r3, #48	; 0x30
			remainder -= n; 
    ef56:	vcvt.f64.s32	d6, s13
			buf[count++] = '0' + n;
    ef5a:	strb.w	r3, [sp, #19]
			remainder -= n; 
    ef5e:	vsub.f64	d0, d0, d6
		while (digits-- > 0) {
    ef62:	beq.w	f096 <Print::printFloat(double, unsigned char)+0x32e>
			remainder *= 10.0;
    ef66:	vmul.f64	d0, d0, d7
		while (digits-- > 0) {
    ef6a:	cmp	r4, #8
			n = (uint8_t)(remainder);
    ef6c:	vcvt.u32.f64	s13, d0
    ef70:	vstr	s13, [sp, #4]
    ef74:	ldrb.w	r3, [sp, #4]
			remainder -= n; 
    ef78:	vmov	s13, r3
			buf[count++] = '0' + n;
    ef7c:	add.w	r3, r3, #48	; 0x30
			remainder -= n; 
    ef80:	vcvt.f64.s32	d6, s13
			buf[count++] = '0' + n;
    ef84:	strb.w	r3, [sp, #20]
			remainder -= n; 
    ef88:	vsub.f64	d0, d0, d6
		while (digits-- > 0) {
    ef8c:	beq.w	f096 <Print::printFloat(double, unsigned char)+0x32e>
			remainder *= 10.0;
    ef90:	vmul.f64	d0, d0, d7
		while (digits-- > 0) {
    ef94:	cmp	r4, #9
			n = (uint8_t)(remainder);
    ef96:	vcvt.u32.f64	s15, d0
    ef9a:	vstr	s15, [sp, #4]
    ef9e:	ldrb.w	r3, [sp, #4]
			remainder -= n; 
    efa2:	vmov	s15, r3
			buf[count++] = '0' + n;
    efa6:	add.w	r3, r3, #48	; 0x30
			remainder -= n; 
    efaa:	vcvt.f64.s32	d7, s15
			buf[count++] = '0' + n;
    efae:	strb.w	r3, [sp, #21]
			remainder -= n; 
    efb2:	vsub.f64	d0, d0, d7
		while (digits-- > 0) {
    efb6:	beq.n	f096 <Print::printFloat(double, unsigned char)+0x32e>
			remainder *= 10.0;
    efb8:	vmov.f64	d6, #36	; 0x41200000  10.0
		while (digits-- > 0) {
    efbc:	cmp	r4, #10
			remainder *= 10.0;
    efbe:	vmul.f64	d0, d0, d6
			n = (uint8_t)(remainder);
    efc2:	vcvt.u32.f64	s15, d0
    efc6:	vstr	s15, [sp, #4]
    efca:	ldrb.w	r3, [sp, #4]
			remainder -= n; 
    efce:	vmov	s15, r3
			buf[count++] = '0' + n;
    efd2:	add.w	r3, r3, #48	; 0x30
			remainder -= n; 
    efd6:	vcvt.f64.s32	d7, s15
			buf[count++] = '0' + n;
    efda:	strb.w	r3, [sp, #22]
			remainder -= n; 
    efde:	vsub.f64	d0, d0, d7
		while (digits-- > 0) {
    efe2:	beq.n	f096 <Print::printFloat(double, unsigned char)+0x32e>
			remainder *= 10.0;
    efe4:	vmul.f64	d0, d0, d6
		while (digits-- > 0) {
    efe8:	cmp	r4, #11
			n = (uint8_t)(remainder);
    efea:	vcvt.u32.f64	s15, d0
    efee:	vstr	s15, [sp, #4]
    eff2:	ldrb.w	r3, [sp, #4]
			remainder -= n; 
    eff6:	vmov	s15, r3
			buf[count++] = '0' + n;
    effa:	add.w	r3, r3, #48	; 0x30
			remainder -= n; 
    effe:	vcvt.f64.s32	d7, s15
			buf[count++] = '0' + n;
    f002:	strb.w	r3, [sp, #23]
			remainder -= n; 
    f006:	vsub.f64	d7, d0, d7
		while (digits-- > 0) {
    f00a:	beq.n	f096 <Print::printFloat(double, unsigned char)+0x32e>
			remainder *= 10.0;
    f00c:	vmul.f64	d7, d7, d6
		while (digits-- > 0) {
    f010:	cmp	r4, #12
			n = (uint8_t)(remainder);
    f012:	vcvt.u32.f64	s11, d7
    f016:	vstr	s11, [sp, #4]
    f01a:	ldrb.w	r3, [sp, #4]
			remainder -= n; 
    f01e:	vmov	s11, r3
			buf[count++] = '0' + n;
    f022:	add.w	r3, r3, #48	; 0x30
			remainder -= n; 
    f026:	vcvt.f64.s32	d5, s11
			buf[count++] = '0' + n;
    f02a:	strb.w	r3, [sp, #24]
			remainder -= n; 
    f02e:	vsub.f64	d7, d7, d5
		while (digits-- > 0) {
    f032:	beq.n	f096 <Print::printFloat(double, unsigned char)+0x32e>
			remainder *= 10.0;
    f034:	vmul.f64	d7, d7, d6
		while (digits-- > 0) {
    f038:	cmp	r4, #13
			n = (uint8_t)(remainder);
    f03a:	vcvt.u32.f64	s11, d7
    f03e:	vstr	s11, [sp, #4]
    f042:	ldrb.w	r3, [sp, #4]
			remainder -= n; 
    f046:	vmov	s11, r3
			buf[count++] = '0' + n;
    f04a:	add.w	r3, r3, #48	; 0x30
			remainder -= n; 
    f04e:	vcvt.f64.s32	d5, s11
			buf[count++] = '0' + n;
    f052:	strb.w	r3, [sp, #25]
			remainder -= n; 
    f056:	vsub.f64	d7, d7, d5
		while (digits-- > 0) {
    f05a:	beq.n	f096 <Print::printFloat(double, unsigned char)+0x32e>
			remainder *= 10.0;
    f05c:	vmul.f64	d7, d7, d6
		while (digits-- > 0) {
    f060:	cmp	r4, #14
			n = (uint8_t)(remainder);
    f062:	vcvt.u32.f64	s11, d7
    f066:	vstr	s11, [sp, #4]
    f06a:	ldrb.w	r3, [sp, #4]
			remainder -= n; 
    f06e:	vmov	s11, r3
			buf[count++] = '0' + n;
    f072:	add.w	r3, r3, #48	; 0x30
			remainder -= n; 
    f076:	vcvt.f64.s32	d5, s11
			buf[count++] = '0' + n;
    f07a:	strb.w	r3, [sp, #26]
			remainder -= n; 
    f07e:	vsub.f64	d7, d7, d5
		while (digits-- > 0) {
    f082:	beq.n	f096 <Print::printFloat(double, unsigned char)+0x32e>
			remainder *= 10.0;
    f084:	vmul.f64	d7, d7, d6
			n = (uint8_t)(remainder);
    f088:	vcvt.u32.f64	s14, d7
			buf[count++] = '0' + n;
    f08c:	vmov	r3, s14
    f090:	adds	r3, #48	; 0x30
    f092:	strb.w	r3, [sp, #27]
    f096:	adds	r2, #1
		}
		count += write(buf, count);
    f098:	ldr	r3, [r5, #0]
    f09a:	add	r1, sp, #12
    f09c:	mov	r0, r5
    f09e:	ldr	r3, [r3, #4]
    f0a0:	uxtb	r2, r2
    f0a2:	blx	r3
	}
	return count;
}
    f0a4:	mov	r0, r6
    f0a6:	add	sp, #48	; 0x30
    f0a8:	vpop	{d8}
    f0ac:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    f0b0:	ldr	r3, [r5, #0]
    f0b2:	movs	r2, #3
    f0b4:	ldr	r1, [pc, #64]	; (f0f8 <Print::printFloat(double, unsigned char)+0x390>)
    f0b6:	ldr	r3, [r3, #4]
    f0b8:	add	sp, #48	; 0x30
    f0ba:	vpop	{d8}
    f0be:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    f0c2:	bx	r3
    f0c4:	ldr	r3, [r0, #0]
    f0c6:	movs	r2, #3
    f0c8:	ldr	r1, [pc, #48]	; (f0fc <Print::printFloat(double, unsigned char)+0x394>)
    f0ca:	b.n	f0b6 <Print::printFloat(double, unsigned char)+0x34e>
		number = -number;
    f0cc:	vneg.f64	d0, d0
		sign = 1;
    f0d0:	movs	r6, #1
    f0d2:	b.n	edc4 <Print::printFloat(double, unsigned char)+0x5c>
    f0d4:	nop.w
    f0d8:	.word	0xffffffff
    f0dc:	.word	0x7fefffff
    f0e0:	.word	0xe0000000
    f0e4:	.word	0x41efffff
    f0e8:	.word	0xe0000000
    f0ec:	.word	0xc1efffff
    f0f0:	.word	0xa0000000
    f0f4:	.word	0x3fb99999
    f0f8:	.word	0x2000073c
    f0fc:	.word	0x20000738
			digit = n % base;
    f100:	ldr	r7, [pc, #88]	; (f15c <Print::printFloat(double, unsigned char)+0x3f4>)
			if (n == 0) break;
    f102:	cmp.w	r8, #9
			digit = n % base;
    f106:	umull	r3, lr, r7, r8
    f10a:	mov.w	lr, lr, lsr #3
    f10e:	add.w	r3, lr, lr, lsl #2
    f112:	sub.w	r3, r8, r3, lsl #1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    f116:	add.w	r3, r3, #48	; 0x30
    f11a:	strb.w	r3, [sp, #45]	; 0x2d
		i = sizeof(buf) - 1;
    f11e:	mov.w	r3, #33	; 0x21
			if (n == 0) break;
    f122:	bls.w	edf8 <Print::printFloat(double, unsigned char)+0x90>
			i--;
    f126:	subs	r3, #1
			digit = n % base;
    f128:	umull	r2, r1, r7, lr
    f12c:	mov	r0, lr
			i--;
    f12e:	uxtb	r3, r3
			digit = n % base;
    f130:	lsrs	r1, r1, #3
			if (n == 0) break;
    f132:	cmp	r0, #9
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    f134:	add.w	r2, r3, #48	; 0x30
    f138:	add.w	ip, sp, r2
			digit = n % base;
    f13c:	add.w	r2, r1, r1, lsl #2
    f140:	sub.w	r2, lr, r2, lsl #1
			n /= base;
    f144:	mov	lr, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    f146:	add.w	r2, r2, #48	; 0x30
    f14a:	strb.w	r2, [ip, #-36]
			if (n == 0) break;
    f14e:	bhi.n	f126 <Print::printFloat(double, unsigned char)+0x3be>
    f150:	b.n	edf8 <Print::printFloat(double, unsigned char)+0x90>
    f152:	ldr	r3, [r0, #0]
    f154:	movs	r2, #3
    f156:	ldr	r1, [pc, #8]	; (f160 <Print::printFloat(double, unsigned char)+0x3f8>)
    f158:	b.n	f0b6 <Print::printFloat(double, unsigned char)+0x34e>
    f15a:	nop
    f15c:	.word	0xcccccccd
    f160:	.word	0x20000734

0000f164 <serialEvent()>:

#include <Arduino.h>
void serialEvent() __attribute__((weak));
void serialEvent() {
}
    f164:	bx	lr
    f166:	nop

0000f168 <operator new(unsigned int)>:

#include <stdlib.h>

void * operator new(size_t size)
{
	return malloc(size);
    f168:	b.w	f310 <malloc>

0000f16c <operator delete(void*, unsigned int)>:
	free(ptr);
}

void operator delete(void * ptr, size_t size)
{
	free(ptr);
    f16c:	b.w	f320 <free>

0000f170 <ultoa>:
	int i=0, j;
    f170:	add.w	ip, r1, #4294967295
{
    f174:	push	{r4, r5, r6, r7, lr}
		digit = val % radix;
    f176:	mov	r5, ip
	int i=0, j;
    f178:	movs	r4, #0
    f17a:	b.n	f188 <ultoa+0x18>
		if (val == 0) break;
    f17c:	cmp	r0, r2
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    f17e:	strb.w	r7, [r5, #1]!
		if (val == 0) break;
    f182:	bcc.n	f1a4 <ultoa+0x34>
		i++;
    f184:	adds	r4, #1
		digit = val % radix;
    f186:	mov	r0, lr
    f188:	udiv	lr, r0, r2
    f18c:	mls	r3, r2, lr, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    f190:	cmp	r3, #9
    f192:	add.w	r7, r3, #48	; 0x30
    f196:	add.w	r6, r3, #55	; 0x37
    f19a:	bls.n	f17c <ultoa+0xc>
		if (val == 0) break;
    f19c:	cmp	r0, r2
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    f19e:	strb.w	r6, [r5, #1]!
		if (val == 0) break;
    f1a2:	bcs.n	f184 <ultoa+0x14>
	buf[i + 1] = 0;
    f1a4:	adds	r3, r4, #1
    f1a6:	movs	r2, #0
    f1a8:	adds	r0, r1, r3
    f1aa:	strb	r2, [r1, r3]
	for (j=0; j < i; j++, i--) {
    f1ac:	cbz	r4, f1ce <ultoa+0x5e>
		t = buf[j];
    f1ae:	mov	r2, ip
    f1b0:	ldrb.w	r5, [ip, #1]!
		buf[j] = buf[i];
    f1b4:	ldrb.w	lr, [r0, #-1]!
	for (j=0; j < i; j++, i--) {
    f1b8:	sub.w	r3, r1, ip
    f1bc:	adds	r2, #2
		buf[j] = buf[i];
    f1be:	strb.w	lr, [ip]
	for (j=0; j < i; j++, i--) {
    f1c2:	subs	r3, #1
    f1c4:	subs	r2, r2, r1
		buf[i] = t;
    f1c6:	strb	r5, [r0, #0]
	for (j=0; j < i; j++, i--) {
    f1c8:	add	r3, r4
    f1ca:	cmp	r2, r3
    f1cc:	blt.n	f1ae <ultoa+0x3e>
}
    f1ce:	mov	r0, r1
    f1d0:	pop	{r4, r5, r6, r7, pc}
    f1d2:	nop

0000f1d4 <pit_isr()>:

//FASTRUN
static void pit_isr()
{
    f1d4:	push	{r4, lr}

		}
	}
#else
	IMXRT_PIT_CHANNEL_t *channel= IMXRT_PIT_CHANNELS;
	if (funct_table[0] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[0]();}
    f1d6:	ldr	r4, [pc, #76]	; (f224 <pit_isr()+0x50>)
    f1d8:	ldr	r3, [r4, #0]
    f1da:	cbz	r3, f1e2 <pit_isr()+0xe>
    f1dc:	ldr	r2, [pc, #72]	; (f228 <pit_isr()+0x54>)
    f1de:	ldr	r1, [r2, #12]
    f1e0:	cbnz	r1, f21c <pit_isr()+0x48>
	channel++;
	if (funct_table[1] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[1]();}
    f1e2:	ldr	r3, [r4, #4]
    f1e4:	cbz	r3, f1ec <pit_isr()+0x18>
    f1e6:	ldr	r2, [pc, #64]	; (f228 <pit_isr()+0x54>)
    f1e8:	ldr	r1, [r2, #28]
    f1ea:	cbnz	r1, f214 <pit_isr()+0x40>
	channel++;
	if (funct_table[2] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[2]();}
    f1ec:	ldr	r3, [r4, #8]
    f1ee:	cbz	r3, f1f6 <pit_isr()+0x22>
    f1f0:	ldr	r2, [pc, #52]	; (f228 <pit_isr()+0x54>)
    f1f2:	ldr	r1, [r2, #44]	; 0x2c
    f1f4:	cbnz	r1, f20c <pit_isr()+0x38>
	channel++;
	if (funct_table[3] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[3]();}
    f1f6:	ldr	r3, [r4, #12]
    f1f8:	cbz	r3, f20a <pit_isr()+0x36>
    f1fa:	ldr	r2, [pc, #44]	; (f228 <pit_isr()+0x54>)
    f1fc:	ldr	r1, [r2, #60]	; 0x3c
    f1fe:	cbz	r1, f20a <pit_isr()+0x36>
    f200:	movs	r1, #1
#endif
}
    f202:	ldmia.w	sp!, {r4, lr}
	if (funct_table[3] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[3]();}
    f206:	str	r1, [r2, #60]	; 0x3c
    f208:	bx	r3
}
    f20a:	pop	{r4, pc}
	if (funct_table[2] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[2]();}
    f20c:	movs	r1, #1
    f20e:	str	r1, [r2, #44]	; 0x2c
    f210:	blx	r3
    f212:	b.n	f1f6 <pit_isr()+0x22>
	if (funct_table[1] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[1]();}
    f214:	movs	r1, #1
    f216:	str	r1, [r2, #28]
    f218:	blx	r3
    f21a:	b.n	f1ec <pit_isr()+0x18>
	if (funct_table[0] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[0]();}
    f21c:	movs	r1, #1
    f21e:	str	r1, [r2, #12]
    f220:	blx	r3
    f222:	b.n	f1e2 <pit_isr()+0xe>
    f224:	.word	0x200026c0
    f228:	.word	0x40084100

0000f22c <IntervalTimer::beginCycles(void (*)(), unsigned long)>:
	if (channel) {
    f22c:	ldr	r3, [r0, #0]
{
    f22e:	mov	ip, r0
    f230:	push	{r4, r5, r6, r7}
	if (channel) {
    f232:	cbz	r3, f290 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0x64>
		channel->TCTRL = 0;
    f234:	movs	r0, #0
    f236:	str	r0, [r3, #8]
		channel->TFLG = 1;
    f238:	movs	r0, #1
    f23a:	str	r0, [r3, #12]
	channel->LDVAL = cycles;
    f23c:	str	r2, [r3, #0]
	int index = channel - IMXRT_PIT_CHANNELS;
    f23e:	ldr	r2, [pc, #156]	; (f2dc <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xb0>)
	funct_table[index] = funct;
    f240:	ldr	r0, [pc, #156]	; (f2e0 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xb4>)
	int index = channel - IMXRT_PIT_CHANNELS;
    f242:	add	r2, r3
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
    f244:	ldr	r4, [pc, #156]	; (f2e4 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xb8>)
    f246:	asrs	r2, r2, #4
	funct_table[index] = funct;
    f248:	str.w	r1, [r0, r2, lsl #2]
	channel->TCTRL = 3;
    f24c:	movs	r0, #3
	nvic_priorites[index] = nvic_priority;
    f24e:	ldr	r1, [pc, #152]	; (f2e8 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xbc>)
	channel->TCTRL = 3;
    f250:	str	r0, [r3, #8]
	nvic_priorites[index] = nvic_priority;
    f252:	ldrb.w	r3, [ip, #4]
    f256:	ldr	r0, [pc, #148]	; (f2ec <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xc0>)
    f258:	strb	r3, [r1, r2]
		if (top_priority > nvic_priorites[i]) top_priority = nvic_priorites[i];
    f25a:	ldrb	r3, [r1, #0]
    f25c:	ldrb	r2, [r1, #1]
    f25e:	str.w	r4, [r0, #552]	; 0x228
    f262:	cmp	r3, r2
    f264:	ldrb	r0, [r1, #2]
    f266:	it	cs
    f268:	movcs	r3, r2
    f26a:	ldrb	r2, [r1, #3]
    f26c:	cmp	r3, r0
    f26e:	it	cs
    f270:	movcs	r3, r0
    f272:	cmp	r3, r2
    f274:	it	cs
    f276:	movcs	r3, r2
	NVIC_SET_PRIORITY(IRQ_PIT, top_priority);
    f278:	ldr	r4, [pc, #116]	; (f2f0 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xc4>)
	NVIC_ENABLE_IRQ(IRQ_PIT);
    f27a:	mov.w	r2, #3758153728	; 0xe000e000
    f27e:	mov.w	r1, #67108864	; 0x4000000
	return true;
    f282:	movs	r0, #1
	NVIC_SET_PRIORITY(IRQ_PIT, top_priority);
    f284:	strb.w	r3, [r4, #122]	; 0x7a
	NVIC_ENABLE_IRQ(IRQ_PIT);
    f288:	str.w	r1, [r2, #268]	; 0x10c
}
    f28c:	pop	{r4, r5, r6, r7}
    f28e:	bx	lr
		CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    f290:	ldr	r5, [pc, #96]	; (f2f4 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xc8>)
		PIT_MCR = 1;
    f292:	movs	r7, #1
		channel = IMXRT_PIT_CHANNELS;
    f294:	ldr	r0, [pc, #96]	; (f2f8 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xcc>)
		CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    f296:	ldr	r4, [r5, #108]	; 0x6c
		PIT_MCR = 1;
    f298:	ldr	r6, [pc, #96]	; (f2fc <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xd0>)
		CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    f29a:	orr.w	r4, r4, #12288	; 0x3000
    f29e:	str	r4, [r5, #108]	; 0x6c
		PIT_MCR = 1;
    f2a0:	str	r7, [r6, #0]
			if (channel->TCTRL == 0) break;
    f2a2:	ldr	r4, [r0, #8]
		channel = IMXRT_PIT_CHANNELS;
    f2a4:	str.w	r0, [ip]
			if (channel->TCTRL == 0) break;
    f2a8:	cbz	r4, f2d2 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xa6>
			if (++channel >= IMXRT_PIT_CHANNELS + NUM_CHANNELS) {
    f2aa:	ldr	r4, [pc, #84]	; (f300 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xd4>)
			if (channel->TCTRL == 0) break;
    f2ac:	ldr	r5, [r0, #24]
			if (++channel >= IMXRT_PIT_CHANNELS + NUM_CHANNELS) {
    f2ae:	str.w	r4, [ip]
			if (channel->TCTRL == 0) break;
    f2b2:	cbz	r5, f2d6 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xaa>
			if (++channel >= IMXRT_PIT_CHANNELS + NUM_CHANNELS) {
    f2b4:	adds	r4, #16
			if (channel->TCTRL == 0) break;
    f2b6:	ldr	r5, [r0, #40]	; 0x28
			if (++channel >= IMXRT_PIT_CHANNELS + NUM_CHANNELS) {
    f2b8:	str.w	r4, [ip]
			if (channel->TCTRL == 0) break;
    f2bc:	cbz	r5, f2d6 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xaa>
    f2be:	ldr	r4, [r0, #56]	; 0x38
			if (++channel >= IMXRT_PIT_CHANNELS + NUM_CHANNELS) {
    f2c0:	adds	r0, #48	; 0x30
    f2c2:	str.w	r0, [ip]
			if (channel->TCTRL == 0) break;
    f2c6:	cbz	r4, f2d2 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xa6>
				return false;
    f2c8:	mov	r0, r3
				channel = NULL;
    f2ca:	str.w	r3, [ip]
}
    f2ce:	pop	{r4, r5, r6, r7}
    f2d0:	bx	lr
			if (++channel >= IMXRT_PIT_CHANNELS + NUM_CHANNELS) {
    f2d2:	mov	r3, r0
    f2d4:	b.n	f23c <IntervalTimer::beginCycles(void (*)(), unsigned long)+0x10>
    f2d6:	mov	r3, r4
    f2d8:	b.n	f23c <IntervalTimer::beginCycles(void (*)(), unsigned long)+0x10>
    f2da:	nop
    f2dc:	.word	0xbff7bf00
    f2e0:	.word	0x200026c0
    f2e4:	.word	0x0000f1d5
    f2e8:	.word	0x20001c34
    f2ec:	.word	0x20002400
    f2f0:	.word	0xe000e400
    f2f4:	.word	0x400fc000
    f2f8:	.word	0x40084100
    f2fc:	.word	0x40084000
    f300:	.word	0x40084110

0000f304 <__aeabi_atexit>:
    f304:	mov	r3, r0
    f306:	mov	r0, r1
    f308:	mov	r1, r3
    f30a:	b.w	fc80 <__cxa_atexit>
    f30e:	nop

0000f310 <malloc>:
    f310:	ldr	r3, [pc, #8]	; (f31c <malloc+0xc>)
    f312:	mov	r1, r0
    f314:	ldr	r0, [r3, #0]
    f316:	b.w	f330 <_malloc_r>
    f31a:	nop
    f31c:	.word	0x200021d0

0000f320 <free>:
    f320:	ldr	r3, [pc, #8]	; (f32c <free+0xc>)
    f322:	mov	r1, r0
    f324:	ldr	r0, [r3, #0]
    f326:	b.w	10684 <_free_r>
    f32a:	nop
    f32c:	.word	0x200021d0

0000f330 <_malloc_r>:
    f330:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f334:	add.w	r6, r1, #11
    f338:	cmp	r6, #22
    f33a:	sub	sp, #12
    f33c:	mov	r4, r0
    f33e:	bhi.n	f38a <_malloc_r+0x5a>
    f340:	cmp	r1, #16
    f342:	bhi.w	f4ba <_malloc_r+0x18a>
    f346:	bl	f890 <__malloc_lock>
    f34a:	movs	r6, #16
    f34c:	movs	r2, #24
    f34e:	movs	r0, #2
    f350:	ldr	r7, [pc, #724]	; (f628 <_malloc_r+0x2f8>)
    f352:	add	r2, r7
    f354:	sub.w	r1, r2, #8
    f358:	ldr	r3, [r2, #4]
    f35a:	cmp	r3, r1
    f35c:	beq.w	f4d4 <_malloc_r+0x1a4>
    f360:	ldr	r2, [r3, #4]
    f362:	ldr	r1, [r3, #12]
    f364:	bic.w	r2, r2, #3
    f368:	add	r2, r3
    f36a:	ldr	r5, [r3, #8]
    f36c:	str	r1, [r5, #12]
    f36e:	str	r5, [r1, #8]
    f370:	ldr	r1, [r2, #4]
    f372:	orr.w	r1, r1, #1
    f376:	mov	r0, r4
    f378:	str	r1, [r2, #4]
    f37a:	add.w	r5, r3, #8
    f37e:	bl	f89c <__malloc_unlock>
    f382:	mov	r0, r5
    f384:	add	sp, #12
    f386:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f38a:	bics.w	r6, r6, #7
    f38e:	bmi.w	f4ba <_malloc_r+0x18a>
    f392:	cmp	r1, r6
    f394:	bhi.w	f4ba <_malloc_r+0x18a>
    f398:	bl	f890 <__malloc_lock>
    f39c:	cmp.w	r6, #504	; 0x1f8
    f3a0:	bcc.w	f6d8 <_malloc_r+0x3a8>
    f3a4:	lsrs	r3, r6, #9
    f3a6:	beq.w	f4c8 <_malloc_r+0x198>
    f3aa:	cmp	r3, #4
    f3ac:	bhi.w	f68e <_malloc_r+0x35e>
    f3b0:	lsrs	r3, r6, #6
    f3b2:	add.w	r0, r3, #57	; 0x39
    f3b6:	add.w	ip, r3, #56	; 0x38
    f3ba:	lsls	r3, r0, #3
    f3bc:	ldr	r7, [pc, #616]	; (f628 <_malloc_r+0x2f8>)
    f3be:	add	r3, r7
    f3c0:	sub.w	r5, r3, #8
    f3c4:	ldr	r3, [r3, #4]
    f3c6:	cmp	r5, r3
    f3c8:	bne.n	f3d8 <_malloc_r+0xa8>
    f3ca:	b.n	f3e6 <_malloc_r+0xb6>
    f3cc:	cmp	r1, #0
    f3ce:	bge.w	f620 <_malloc_r+0x2f0>
    f3d2:	ldr	r3, [r3, #12]
    f3d4:	cmp	r5, r3
    f3d6:	beq.n	f3e6 <_malloc_r+0xb6>
    f3d8:	ldr	r2, [r3, #4]
    f3da:	bic.w	r2, r2, #3
    f3de:	subs	r1, r2, r6
    f3e0:	cmp	r1, #15
    f3e2:	ble.n	f3cc <_malloc_r+0x9c>
    f3e4:	mov	r0, ip
    f3e6:	ldr	r5, [r7, #16]
    f3e8:	ldr.w	ip, [pc, #592]	; f63c <_malloc_r+0x30c>
    f3ec:	cmp	r5, ip
    f3ee:	beq.n	f4ea <_malloc_r+0x1ba>
    f3f0:	ldr	r2, [r5, #4]
    f3f2:	bic.w	r2, r2, #3
    f3f6:	subs	r3, r2, r6
    f3f8:	cmp	r3, #15
    f3fa:	bgt.w	f6f4 <_malloc_r+0x3c4>
    f3fe:	cmp	r3, #0
    f400:	strd	ip, ip, [r7, #16]
    f404:	bge.w	f6e0 <_malloc_r+0x3b0>
    f408:	cmp.w	r2, #512	; 0x200
    f40c:	bcs.w	f644 <_malloc_r+0x314>
    f410:	lsrs	r3, r2, #3
    f412:	ldr	r1, [r7, #4]
    f414:	adds	r3, #1
    f416:	mov.w	lr, r2, lsr #5
    f41a:	movs	r2, #1
    f41c:	lsl.w	r2, r2, lr
    f420:	orrs	r2, r1
    f422:	ldr.w	lr, [r7, r3, lsl #3]
    f426:	str.w	lr, [r5, #8]
    f42a:	add.w	r1, r7, r3, lsl #3
    f42e:	subs	r1, #8
    f430:	str	r1, [r5, #12]
    f432:	str	r2, [r7, #4]
    f434:	str.w	r5, [r7, r3, lsl #3]
    f438:	str.w	r5, [lr, #12]
    f43c:	asrs	r3, r0, #2
    f43e:	movs	r1, #1
    f440:	lsls	r1, r3
    f442:	cmp	r1, r2
    f444:	bhi.n	f4f6 <_malloc_r+0x1c6>
    f446:	tst	r1, r2
    f448:	bne.n	f458 <_malloc_r+0x128>
    f44a:	bic.w	r0, r0, #3
    f44e:	lsls	r1, r1, #1
    f450:	tst	r1, r2
    f452:	add.w	r0, r0, #4
    f456:	beq.n	f44e <_malloc_r+0x11e>
    f458:	add.w	r9, r7, r0, lsl #3
    f45c:	mov	r5, r9
    f45e:	mov	lr, r0
    f460:	ldr.w	r8, [r5, #12]
    f464:	cmp	r5, r8
    f466:	bne.n	f47a <_malloc_r+0x14a>
    f468:	b.n	f6a6 <_malloc_r+0x376>
    f46a:	cmp	r3, #0
    f46c:	bge.w	f6b8 <_malloc_r+0x388>
    f470:	ldr.w	r8, [r8, #12]
    f474:	cmp	r5, r8
    f476:	beq.w	f6a6 <_malloc_r+0x376>
    f47a:	ldr.w	r2, [r8, #4]
    f47e:	bic.w	r2, r2, #3
    f482:	subs	r3, r2, r6
    f484:	cmp	r3, #15
    f486:	ble.n	f46a <_malloc_r+0x13a>
    f488:	mov	r0, r4
    f48a:	ldrd	r5, r4, [r8, #8]
    f48e:	add.w	r1, r8, r6
    f492:	orr.w	r6, r6, #1
    f496:	str.w	r6, [r8, #4]
    f49a:	str	r4, [r5, #12]
    f49c:	str	r5, [r4, #8]
    f49e:	orr.w	r4, r3, #1
    f4a2:	strd	r1, r1, [r7, #16]
    f4a6:	strd	ip, ip, [r1, #8]
    f4aa:	str	r4, [r1, #4]
    f4ac:	str.w	r3, [r8, r2]
    f4b0:	bl	f89c <__malloc_unlock>
    f4b4:	add.w	r5, r8, #8
    f4b8:	b.n	f4c0 <_malloc_r+0x190>
    f4ba:	movs	r3, #12
    f4bc:	str	r3, [r4, #0]
    f4be:	movs	r5, #0
    f4c0:	mov	r0, r5
    f4c2:	add	sp, #12
    f4c4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f4c8:	mov.w	r3, #512	; 0x200
    f4cc:	movs	r0, #64	; 0x40
    f4ce:	mov.w	ip, #63	; 0x3f
    f4d2:	b.n	f3bc <_malloc_r+0x8c>
    f4d4:	ldr	r3, [r2, #12]
    f4d6:	cmp	r2, r3
    f4d8:	it	eq
    f4da:	addeq	r0, #2
    f4dc:	bne.w	f360 <_malloc_r+0x30>
    f4e0:	ldr	r5, [r7, #16]
    f4e2:	ldr.w	ip, [pc, #344]	; f63c <_malloc_r+0x30c>
    f4e6:	cmp	r5, ip
    f4e8:	bne.n	f3f0 <_malloc_r+0xc0>
    f4ea:	ldr	r2, [r7, #4]
    f4ec:	asrs	r3, r0, #2
    f4ee:	movs	r1, #1
    f4f0:	lsls	r1, r3
    f4f2:	cmp	r1, r2
    f4f4:	bls.n	f446 <_malloc_r+0x116>
    f4f6:	ldr	r5, [r7, #8]
    f4f8:	ldr	r3, [r5, #4]
    f4fa:	bic.w	r9, r3, #3
    f4fe:	cmp	r6, r9
    f500:	bhi.n	f50a <_malloc_r+0x1da>
    f502:	sub.w	r3, r9, r6
    f506:	cmp	r3, #15
    f508:	bgt.n	f600 <_malloc_r+0x2d0>
    f50a:	ldr.w	fp, [pc, #308]	; f640 <_malloc_r+0x310>
    f50e:	ldr	r3, [pc, #284]	; (f62c <_malloc_r+0x2fc>)
    f510:	ldr.w	r2, [fp]
    f514:	ldr	r3, [r3, #0]
    f516:	adds	r2, #1
    f518:	add	r3, r6
    f51a:	add.w	sl, r5, r9
    f51e:	beq.w	f788 <_malloc_r+0x458>
    f522:	add.w	r3, r3, #4096	; 0x1000
    f526:	adds	r3, #15
    f528:	bic.w	r8, r3, #4080	; 0xff0
    f52c:	bic.w	r8, r8, #15
    f530:	mov	r1, r8
    f532:	mov	r0, r4
    f534:	bl	10320 <_sbrk_r>
    f538:	adds	r1, r0, #1
    f53a:	mov	r2, r0
    f53c:	beq.w	f726 <_malloc_r+0x3f6>
    f540:	cmp	sl, r0
    f542:	bhi.w	f722 <_malloc_r+0x3f2>
    f546:	ldr	r3, [pc, #232]	; (f630 <_malloc_r+0x300>)
    f548:	ldr	r1, [r3, #0]
    f54a:	add	r1, r8
    f54c:	str	r1, [r3, #0]
    f54e:	mov	r0, r1
    f550:	beq.w	f7f0 <_malloc_r+0x4c0>
    f554:	ldr.w	r1, [fp]
    f558:	str	r3, [sp, #4]
    f55a:	adds	r1, #1
    f55c:	ittet	ne
    f55e:	subne.w	r1, r2, sl
    f562:	addne	r1, r1, r0
    f564:	streq.w	r2, [fp]
    f568:	strne	r1, [r3, #0]
    f56a:	ands.w	fp, r2, #7
    f56e:	beq.w	f7a0 <_malloc_r+0x470>
    f572:	rsb	r1, fp, #8
    f576:	add	r2, r1
    f578:	rsb	r1, fp, #4096	; 0x1000
    f57c:	add	r8, r2
    f57e:	adds	r1, #8
    f580:	sub.w	r1, r1, r8
    f584:	ubfx	sl, r1, #0, #12
    f588:	mov	r1, sl
    f58a:	mov	r0, r4
    f58c:	str	r2, [sp, #0]
    f58e:	bl	10320 <_sbrk_r>
    f592:	adds	r2, r0, #1
    f594:	ldrd	r2, r3, [sp]
    f598:	beq.w	f83a <_malloc_r+0x50a>
    f59c:	subs	r0, r0, r2
    f59e:	add.w	r8, r0, sl
    f5a2:	ldr	r1, [r3, #0]
    f5a4:	str	r2, [r7, #8]
    f5a6:	orr.w	r0, r8, #1
    f5aa:	add	r1, sl
    f5ac:	cmp	r5, r7
    f5ae:	str	r0, [r2, #4]
    f5b0:	str	r1, [r3, #0]
    f5b2:	beq.w	f808 <_malloc_r+0x4d8>
    f5b6:	cmp.w	r9, #15
    f5ba:	bls.w	f80c <_malloc_r+0x4dc>
    f5be:	ldr	r0, [r5, #4]
    f5c0:	sub.w	ip, r9, #12
    f5c4:	bic.w	ip, ip, #7
    f5c8:	and.w	r0, r0, #1
    f5cc:	orr.w	r0, r0, ip
    f5d0:	str	r0, [r5, #4]
    f5d2:	mov.w	lr, #5
    f5d6:	add.w	r0, r5, ip
    f5da:	cmp.w	ip, #15
    f5de:	strd	lr, lr, [r0, #4]
    f5e2:	bhi.w	f84a <_malloc_r+0x51a>
    f5e6:	ldr	r0, [r2, #4]
    f5e8:	mov	r5, r2
    f5ea:	ldr	r3, [pc, #72]	; (f634 <_malloc_r+0x304>)
    f5ec:	ldr	r2, [r3, #0]
    f5ee:	cmp	r2, r1
    f5f0:	it	cc
    f5f2:	strcc	r1, [r3, #0]
    f5f4:	ldr	r3, [pc, #64]	; (f638 <_malloc_r+0x308>)
    f5f6:	ldr	r2, [r3, #0]
    f5f8:	cmp	r2, r1
    f5fa:	it	cc
    f5fc:	strcc	r1, [r3, #0]
    f5fe:	b.n	f72a <_malloc_r+0x3fa>
    f600:	adds	r2, r5, r6
    f602:	orr.w	r3, r3, #1
    f606:	orr.w	r6, r6, #1
    f60a:	str	r6, [r5, #4]
    f60c:	mov	r0, r4
    f60e:	str	r2, [r7, #8]
    f610:	str	r3, [r2, #4]
    f612:	bl	f89c <__malloc_unlock>
    f616:	adds	r5, #8
    f618:	mov	r0, r5
    f61a:	add	sp, #12
    f61c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f620:	ldr	r1, [r3, #12]
    f622:	add	r2, r3
    f624:	b.n	f36a <_malloc_r+0x3a>
    f626:	nop
    f628:	.word	0x20001db4
    f62c:	.word	0x20007ac4
    f630:	.word	0x20007a94
    f634:	.word	0x20007abc
    f638:	.word	0x20007ac0
    f63c:	.word	0x20001dbc
    f640:	.word	0x200021bc
    f644:	cmp.w	r2, #2560	; 0xa00
    f648:	mov.w	r3, r2, lsr #9
    f64c:	bcc.n	f716 <_malloc_r+0x3e6>
    f64e:	cmp	r3, #20
    f650:	bhi.w	f7c2 <_malloc_r+0x492>
    f654:	add.w	r1, r3, #92	; 0x5c
    f658:	lsls	r1, r1, #3
    f65a:	adds	r3, #91	; 0x5b
    f65c:	add.w	lr, r7, r1
    f660:	ldr	r1, [r7, r1]
    f662:	sub.w	lr, lr, #8
    f666:	cmp	lr, r1
    f668:	beq.w	f78e <_malloc_r+0x45e>
    f66c:	ldr	r3, [r1, #4]
    f66e:	bic.w	r3, r3, #3
    f672:	cmp	r3, r2
    f674:	bls.n	f67c <_malloc_r+0x34c>
    f676:	ldr	r1, [r1, #8]
    f678:	cmp	lr, r1
    f67a:	bne.n	f66c <_malloc_r+0x33c>
    f67c:	ldr.w	lr, [r1, #12]
    f680:	ldr	r2, [r7, #4]
    f682:	strd	r1, lr, [r5, #8]
    f686:	str.w	r5, [lr, #8]
    f68a:	str	r5, [r1, #12]
    f68c:	b.n	f43c <_malloc_r+0x10c>
    f68e:	cmp	r3, #20
    f690:	bls.n	f746 <_malloc_r+0x416>
    f692:	cmp	r3, #84	; 0x54
    f694:	bhi.w	f7d2 <_malloc_r+0x4a2>
    f698:	lsrs	r3, r6, #12
    f69a:	add.w	r0, r3, #111	; 0x6f
    f69e:	add.w	ip, r3, #110	; 0x6e
    f6a2:	lsls	r3, r0, #3
    f6a4:	b.n	f3bc <_malloc_r+0x8c>
    f6a6:	add.w	lr, lr, #1
    f6aa:	tst.w	lr, #3
    f6ae:	add.w	r5, r5, #8
    f6b2:	bne.w	f460 <_malloc_r+0x130>
    f6b6:	b.n	f75c <_malloc_r+0x42c>
    f6b8:	add	r2, r8
    f6ba:	mov	r5, r8
    f6bc:	ldr	r3, [r2, #4]
    f6be:	ldr.w	r1, [r8, #12]
    f6c2:	orr.w	r3, r3, #1
    f6c6:	str	r3, [r2, #4]
    f6c8:	ldr.w	r3, [r5, #8]!
    f6cc:	mov	r0, r4
    f6ce:	str	r1, [r3, #12]
    f6d0:	str	r3, [r1, #8]
    f6d2:	bl	f89c <__malloc_unlock>
    f6d6:	b.n	f4c0 <_malloc_r+0x190>
    f6d8:	lsrs	r0, r6, #3
    f6da:	add.w	r2, r6, #8
    f6de:	b.n	f350 <_malloc_r+0x20>
    f6e0:	add	r2, r5
    f6e2:	mov	r0, r4
    f6e4:	ldr	r3, [r2, #4]
    f6e6:	orr.w	r3, r3, #1
    f6ea:	str	r3, [r2, #4]
    f6ec:	adds	r5, #8
    f6ee:	bl	f89c <__malloc_unlock>
    f6f2:	b.n	f4c0 <_malloc_r+0x190>
    f6f4:	adds	r1, r5, r6
    f6f6:	mov	r0, r4
    f6f8:	orr.w	r6, r6, #1
    f6fc:	orr.w	r4, r3, #1
    f700:	str	r6, [r5, #4]
    f702:	strd	r1, r1, [r7, #16]
    f706:	strd	ip, ip, [r1, #8]
    f70a:	str	r4, [r1, #4]
    f70c:	str	r3, [r5, r2]
    f70e:	bl	f89c <__malloc_unlock>
    f712:	adds	r5, #8
    f714:	b.n	f4c0 <_malloc_r+0x190>
    f716:	lsrs	r3, r2, #6
    f718:	add.w	r1, r3, #57	; 0x39
    f71c:	lsls	r1, r1, #3
    f71e:	adds	r3, #56	; 0x38
    f720:	b.n	f65c <_malloc_r+0x32c>
    f722:	cmp	r5, r7
    f724:	beq.n	f7e6 <_malloc_r+0x4b6>
    f726:	ldr	r5, [r7, #8]
    f728:	ldr	r0, [r5, #4]
    f72a:	bic.w	r8, r0, #3
    f72e:	cmp	r6, r8
    f730:	sub.w	r3, r8, r6
    f734:	bhi.n	f73c <_malloc_r+0x40c>
    f736:	cmp	r3, #15
    f738:	bgt.w	f600 <_malloc_r+0x2d0>
    f73c:	mov	r0, r4
    f73e:	bl	f89c <__malloc_unlock>
    f742:	movs	r5, #0
    f744:	b.n	f4c0 <_malloc_r+0x190>
    f746:	add.w	r0, r3, #92	; 0x5c
    f74a:	add.w	ip, r3, #91	; 0x5b
    f74e:	lsls	r3, r0, #3
    f750:	b.n	f3bc <_malloc_r+0x8c>
    f752:	ldr.w	r3, [r9], #-8
    f756:	cmp	r3, r9
    f758:	bne.w	f888 <_malloc_r+0x558>
    f75c:	tst.w	r0, #3
    f760:	add.w	r0, r0, #4294967295
    f764:	bne.n	f752 <_malloc_r+0x422>
    f766:	ldr	r3, [r7, #4]
    f768:	bic.w	r3, r3, r1
    f76c:	str	r3, [r7, #4]
    f76e:	lsls	r1, r1, #1
    f770:	cmp	r1, r3
    f772:	bhi.w	f4f6 <_malloc_r+0x1c6>
    f776:	cbnz	r1, f780 <_malloc_r+0x450>
    f778:	b.n	f4f6 <_malloc_r+0x1c6>
    f77a:	lsls	r1, r1, #1
    f77c:	add.w	lr, lr, #4
    f780:	tst	r1, r3
    f782:	beq.n	f77a <_malloc_r+0x44a>
    f784:	mov	r0, lr
    f786:	b.n	f458 <_malloc_r+0x128>
    f788:	add.w	r8, r3, #16
    f78c:	b.n	f530 <_malloc_r+0x200>
    f78e:	asrs	r2, r3, #2
    f790:	mov.w	r8, #1
    f794:	ldr	r3, [r7, #4]
    f796:	lsl.w	r2, r8, r2
    f79a:	orrs	r2, r3
    f79c:	str	r2, [r7, #4]
    f79e:	b.n	f682 <_malloc_r+0x352>
    f7a0:	add.w	r1, r2, r8
    f7a4:	negs	r1, r1
    f7a6:	ubfx	sl, r1, #0, #12
    f7aa:	mov	r1, sl
    f7ac:	mov	r0, r4
    f7ae:	str	r2, [sp, #0]
    f7b0:	bl	10320 <_sbrk_r>
    f7b4:	adds	r3, r0, #1
    f7b6:	ldrd	r2, r3, [sp]
    f7ba:	bne.w	f59c <_malloc_r+0x26c>
    f7be:	mov	sl, fp
    f7c0:	b.n	f5a2 <_malloc_r+0x272>
    f7c2:	cmp	r3, #84	; 0x54
    f7c4:	bhi.n	f812 <_malloc_r+0x4e2>
    f7c6:	lsrs	r3, r2, #12
    f7c8:	add.w	r1, r3, #111	; 0x6f
    f7cc:	lsls	r1, r1, #3
    f7ce:	adds	r3, #110	; 0x6e
    f7d0:	b.n	f65c <_malloc_r+0x32c>
    f7d2:	cmp.w	r3, #340	; 0x154
    f7d6:	bhi.n	f824 <_malloc_r+0x4f4>
    f7d8:	lsrs	r3, r6, #15
    f7da:	add.w	r0, r3, #120	; 0x78
    f7de:	add.w	ip, r3, #119	; 0x77
    f7e2:	lsls	r3, r0, #3
    f7e4:	b.n	f3bc <_malloc_r+0x8c>
    f7e6:	ldr	r3, [pc, #164]	; (f88c <_malloc_r+0x55c>)
    f7e8:	ldr	r0, [r3, #0]
    f7ea:	add	r0, r8
    f7ec:	str	r0, [r3, #0]
    f7ee:	b.n	f554 <_malloc_r+0x224>
    f7f0:	ubfx	ip, sl, #0, #12
    f7f4:	cmp.w	ip, #0
    f7f8:	bne.w	f554 <_malloc_r+0x224>
    f7fc:	ldr	r5, [r7, #8]
    f7fe:	add	r8, r9
    f800:	orr.w	r0, r8, #1
    f804:	str	r0, [r5, #4]
    f806:	b.n	f5ea <_malloc_r+0x2ba>
    f808:	mov	r5, r2
    f80a:	b.n	f5ea <_malloc_r+0x2ba>
    f80c:	movs	r3, #1
    f80e:	str	r3, [r2, #4]
    f810:	b.n	f73c <_malloc_r+0x40c>
    f812:	cmp.w	r3, #340	; 0x154
    f816:	bhi.n	f860 <_malloc_r+0x530>
    f818:	lsrs	r3, r2, #15
    f81a:	add.w	r1, r3, #120	; 0x78
    f81e:	lsls	r1, r1, #3
    f820:	adds	r3, #119	; 0x77
    f822:	b.n	f65c <_malloc_r+0x32c>
    f824:	movw	r2, #1364	; 0x554
    f828:	cmp	r3, r2
    f82a:	bhi.n	f874 <_malloc_r+0x544>
    f82c:	lsrs	r3, r6, #18
    f82e:	add.w	r0, r3, #125	; 0x7d
    f832:	add.w	ip, r3, #124	; 0x7c
    f836:	lsls	r3, r0, #3
    f838:	b.n	f3bc <_malloc_r+0x8c>
    f83a:	sub.w	fp, fp, #8
    f83e:	add	r8, fp
    f840:	sub.w	r8, r8, r2
    f844:	mov.w	sl, #0
    f848:	b.n	f5a2 <_malloc_r+0x272>
    f84a:	add.w	r1, r5, #8
    f84e:	mov	r0, r4
    f850:	str	r3, [sp, #0]
    f852:	bl	10684 <_free_r>
    f856:	ldr	r5, [r7, #8]
    f858:	ldr	r3, [sp, #0]
    f85a:	ldr	r0, [r5, #4]
    f85c:	ldr	r1, [r3, #0]
    f85e:	b.n	f5ea <_malloc_r+0x2ba>
    f860:	movw	r1, #1364	; 0x554
    f864:	cmp	r3, r1
    f866:	bhi.n	f880 <_malloc_r+0x550>
    f868:	lsrs	r3, r2, #18
    f86a:	add.w	r1, r3, #125	; 0x7d
    f86e:	lsls	r1, r1, #3
    f870:	adds	r3, #124	; 0x7c
    f872:	b.n	f65c <_malloc_r+0x32c>
    f874:	mov.w	r3, #1016	; 0x3f8
    f878:	movs	r0, #127	; 0x7f
    f87a:	mov.w	ip, #126	; 0x7e
    f87e:	b.n	f3bc <_malloc_r+0x8c>
    f880:	mov.w	r1, #1016	; 0x3f8
    f884:	movs	r3, #126	; 0x7e
    f886:	b.n	f65c <_malloc_r+0x32c>
    f888:	ldr	r3, [r7, #4]
    f88a:	b.n	f76e <_malloc_r+0x43e>
    f88c:	.word	0x20007a94

0000f890 <__malloc_lock>:
    f890:	ldr	r0, [pc, #4]	; (f898 <__malloc_lock+0x8>)
    f892:	b.w	103cc <__retarget_lock_acquire_recursive>
    f896:	nop
    f898:	.word	0x20007a8c

0000f89c <__malloc_unlock>:
    f89c:	ldr	r0, [pc, #4]	; (f8a4 <__malloc_unlock+0x8>)
    f89e:	b.w	103d0 <__retarget_lock_release_recursive>
    f8a2:	nop
    f8a4:	.word	0x20007a8c

0000f8a8 <_realloc_r>:
    f8a8:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f8ac:	mov	r7, r2
    f8ae:	cmp	r1, #0
    f8b0:	beq.w	f9e4 <_realloc_r+0x13c>
    f8b4:	mov	r4, r1
    f8b6:	add.w	r5, r7, #11
    f8ba:	mov	r8, r0
    f8bc:	bl	f890 <__malloc_lock>
    f8c0:	cmp	r5, #22
    f8c2:	ldr.w	r1, [r4, #-4]
    f8c6:	bhi.n	f980 <_realloc_r+0xd8>
    f8c8:	movs	r5, #16
    f8ca:	mov	r2, r5
    f8cc:	cmp	r7, r5
    f8ce:	bhi.n	f98a <_realloc_r+0xe2>
    f8d0:	bic.w	r6, r1, #3
    f8d4:	cmp	r6, r2
    f8d6:	sub.w	r9, r4, #8
    f8da:	bge.n	f9a2 <_realloc_r+0xfa>
    f8dc:	ldr	r3, [pc, #752]	; (fbd0 <_realloc_r+0x328>)
    f8de:	ldr.w	ip, [r3, #8]
    f8e2:	add.w	r0, r9, r6
    f8e6:	cmp	ip, r0
    f8e8:	beq.w	fa1a <_realloc_r+0x172>
    f8ec:	ldr.w	ip, [r0, #4]
    f8f0:	bic.w	r3, ip, #1
    f8f4:	add	r3, r0
    f8f6:	ldr	r3, [r3, #4]
    f8f8:	lsls	r3, r3, #31
    f8fa:	bmi.n	f9ce <_realloc_r+0x126>
    f8fc:	bic.w	ip, ip, #3
    f900:	add.w	r3, r6, ip
    f904:	cmp	r3, r2
    f906:	bge.n	f998 <_realloc_r+0xf0>
    f908:	lsls	r3, r1, #31
    f90a:	bmi.n	f92e <_realloc_r+0x86>
    f90c:	ldr.w	r3, [r4, #-8]
    f910:	sub.w	sl, r9, r3
    f914:	ldr.w	r3, [sl, #4]
    f918:	bic.w	r1, r3, #3
    f91c:	add	ip, r1
    f91e:	add	ip, r6
    f920:	cmp	ip, r2
    f922:	bge.w	fb48 <_realloc_r+0x2a0>
    f926:	adds	r3, r6, r1
    f928:	cmp	r3, r2
    f92a:	bge.w	fafe <_realloc_r+0x256>
    f92e:	mov	r1, r7
    f930:	mov	r0, r8
    f932:	bl	f330 <_malloc_r>
    f936:	mov	r7, r0
    f938:	cbz	r0, f974 <_realloc_r+0xcc>
    f93a:	ldr.w	r3, [r4, #-4]
    f93e:	bic.w	r3, r3, #1
    f942:	add	r3, r9
    f944:	sub.w	r2, r0, #8
    f948:	cmp	r3, r2
    f94a:	beq.w	faf2 <_realloc_r+0x24a>
    f94e:	subs	r2, r6, #4
    f950:	cmp	r2, #36	; 0x24
    f952:	bhi.w	fb40 <_realloc_r+0x298>
    f956:	cmp	r2, #19
    f958:	bhi.w	fab4 <_realloc_r+0x20c>
    f95c:	mov	r3, r0
    f95e:	mov	r2, r4
    f960:	ldr	r1, [r2, #0]
    f962:	str	r1, [r3, #0]
    f964:	ldr	r1, [r2, #4]
    f966:	str	r1, [r3, #4]
    f968:	ldr	r2, [r2, #8]
    f96a:	str	r2, [r3, #8]
    f96c:	mov	r1, r4
    f96e:	mov	r0, r8
    f970:	bl	10684 <_free_r>
    f974:	mov	r0, r8
    f976:	bl	f89c <__malloc_unlock>
    f97a:	mov	r0, r7
    f97c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f980:	bic.w	r5, r5, #7
    f984:	cmp	r5, #0
    f986:	mov	r2, r5
    f988:	bge.n	f8cc <_realloc_r+0x24>
    f98a:	movs	r3, #12
    f98c:	str.w	r3, [r8]
    f990:	movs	r7, #0
    f992:	mov	r0, r7
    f994:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f998:	mov	r6, r3
    f99a:	ldrd	r2, r3, [r0, #8]
    f99e:	str	r3, [r2, #12]
    f9a0:	str	r2, [r3, #8]
    f9a2:	subs	r3, r6, r5
    f9a4:	cmp	r3, #15
    f9a6:	bhi.n	f9ee <_realloc_r+0x146>
    f9a8:	ldr.w	r3, [r9, #4]
    f9ac:	and.w	r3, r3, #1
    f9b0:	orrs	r3, r6
    f9b2:	add	r6, r9
    f9b4:	str.w	r3, [r9, #4]
    f9b8:	ldr	r3, [r6, #4]
    f9ba:	orr.w	r3, r3, #1
    f9be:	str	r3, [r6, #4]
    f9c0:	mov	r0, r8
    f9c2:	mov	r7, r4
    f9c4:	bl	f89c <__malloc_unlock>
    f9c8:	mov	r0, r7
    f9ca:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f9ce:	lsls	r1, r1, #31
    f9d0:	bmi.n	f92e <_realloc_r+0x86>
    f9d2:	ldr.w	r3, [r4, #-8]
    f9d6:	sub.w	sl, r9, r3
    f9da:	ldr.w	r1, [sl, #4]
    f9de:	bic.w	r1, r1, #3
    f9e2:	b.n	f926 <_realloc_r+0x7e>
    f9e4:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f9e8:	mov	r1, r2
    f9ea:	b.w	f330 <_malloc_r>
    f9ee:	ldr.w	r2, [r9, #4]
    f9f2:	add.w	r1, r9, r5
    f9f6:	and.w	r2, r2, #1
    f9fa:	add	r6, r9
    f9fc:	orr.w	r3, r3, #1
    fa00:	orrs	r2, r5
    fa02:	str.w	r2, [r9, #4]
    fa06:	str	r3, [r1, #4]
    fa08:	ldr	r3, [r6, #4]
    fa0a:	orr.w	r3, r3, #1
    fa0e:	adds	r1, #8
    fa10:	str	r3, [r6, #4]
    fa12:	mov	r0, r8
    fa14:	bl	10684 <_free_r>
    fa18:	b.n	f9c0 <_realloc_r+0x118>
    fa1a:	ldr.w	r0, [ip, #4]
    fa1e:	bic.w	fp, r0, #3
    fa22:	add.w	ip, r6, fp
    fa26:	add.w	r0, r5, #16
    fa2a:	cmp	ip, r0
    fa2c:	bge.n	faca <_realloc_r+0x222>
    fa2e:	lsls	r1, r1, #31
    fa30:	bmi.w	f92e <_realloc_r+0x86>
    fa34:	ldr.w	r1, [r4, #-8]
    fa38:	sub.w	sl, r9, r1
    fa3c:	ldr.w	r1, [sl, #4]
    fa40:	bic.w	r1, r1, #3
    fa44:	add	fp, r1
    fa46:	add	fp, r6
    fa48:	cmp	r0, fp
    fa4a:	bgt.w	f926 <_realloc_r+0x7e>
    fa4e:	mov	r7, sl
    fa50:	ldr.w	r1, [sl, #12]
    fa54:	ldr.w	r0, [r7, #8]!
    fa58:	subs	r2, r6, #4
    fa5a:	cmp	r2, #36	; 0x24
    fa5c:	str	r1, [r0, #12]
    fa5e:	str	r0, [r1, #8]
    fa60:	bhi.w	fc1a <_realloc_r+0x372>
    fa64:	cmp	r2, #19
    fa66:	bls.w	fc16 <_realloc_r+0x36e>
    fa6a:	ldr	r1, [r4, #0]
    fa6c:	str.w	r1, [sl, #8]
    fa70:	ldr	r1, [r4, #4]
    fa72:	str.w	r1, [sl, #12]
    fa76:	cmp	r2, #27
    fa78:	bhi.w	fc3a <_realloc_r+0x392>
    fa7c:	adds	r4, #8
    fa7e:	add.w	r2, sl, #16
    fa82:	ldr	r1, [r4, #0]
    fa84:	str	r1, [r2, #0]
    fa86:	ldr	r1, [r4, #4]
    fa88:	str	r1, [r2, #4]
    fa8a:	ldr	r1, [r4, #8]
    fa8c:	str	r1, [r2, #8]
    fa8e:	add.w	r1, sl, r5
    fa92:	sub.w	r2, fp, r5
    fa96:	orr.w	r2, r2, #1
    fa9a:	str	r1, [r3, #8]
    fa9c:	str	r2, [r1, #4]
    fa9e:	ldr.w	r3, [sl, #4]
    faa2:	and.w	r3, r3, #1
    faa6:	orrs	r3, r5
    faa8:	mov	r0, r8
    faaa:	str.w	r3, [sl, #4]
    faae:	bl	f89c <__malloc_unlock>
    fab2:	b.n	f992 <_realloc_r+0xea>
    fab4:	ldr	r3, [r4, #0]
    fab6:	str	r3, [r0, #0]
    fab8:	ldr	r3, [r4, #4]
    faba:	str	r3, [r0, #4]
    fabc:	cmp	r2, #27
    fabe:	bhi.n	fb92 <_realloc_r+0x2ea>
    fac0:	add.w	r2, r4, #8
    fac4:	add.w	r3, r0, #8
    fac8:	b.n	f960 <_realloc_r+0xb8>
    faca:	add.w	r2, r9, r5
    face:	str	r2, [r3, #8]
    fad0:	sub.w	r3, ip, r5
    fad4:	orr.w	r3, r3, #1
    fad8:	str	r3, [r2, #4]
    fada:	ldr.w	r3, [r4, #-4]
    fade:	and.w	r3, r3, #1
    fae2:	orrs	r3, r5
    fae4:	mov	r0, r8
    fae6:	str.w	r3, [r4, #-4]
    faea:	bl	f89c <__malloc_unlock>
    faee:	mov	r7, r4
    faf0:	b.n	f992 <_realloc_r+0xea>
    faf2:	ldr.w	r3, [r0, #-4]
    faf6:	bic.w	r3, r3, #3
    fafa:	add	r6, r3
    fafc:	b.n	f9a2 <_realloc_r+0xfa>
    fafe:	mov	r7, sl
    fb00:	ldr.w	r1, [sl, #12]
    fb04:	ldr.w	r0, [r7, #8]!
    fb08:	subs	r2, r6, #4
    fb0a:	cmp	r2, #36	; 0x24
    fb0c:	str	r1, [r0, #12]
    fb0e:	str	r0, [r1, #8]
    fb10:	bhi.n	fbac <_realloc_r+0x304>
    fb12:	cmp	r2, #19
    fb14:	bls.n	fba8 <_realloc_r+0x300>
    fb16:	ldr	r1, [r4, #0]
    fb18:	str.w	r1, [sl, #8]
    fb1c:	ldr	r1, [r4, #4]
    fb1e:	str.w	r1, [sl, #12]
    fb22:	cmp	r2, #27
    fb24:	bhi.n	fbd4 <_realloc_r+0x32c>
    fb26:	adds	r4, #8
    fb28:	add.w	r2, sl, #16
    fb2c:	mov	r6, r3
    fb2e:	ldr	r3, [r4, #0]
    fb30:	str	r3, [r2, #0]
    fb32:	ldr	r3, [r4, #4]
    fb34:	str	r3, [r2, #4]
    fb36:	ldr	r3, [r4, #8]
    fb38:	str	r3, [r2, #8]
    fb3a:	mov	r9, sl
    fb3c:	mov	r4, r7
    fb3e:	b.n	f9a2 <_realloc_r+0xfa>
    fb40:	mov	r1, r4
    fb42:	bl	1000c <memmove>
    fb46:	b.n	f96c <_realloc_r+0xc4>
    fb48:	ldrd	r1, r3, [r0, #8]
    fb4c:	mov	r7, sl
    fb4e:	str	r3, [r1, #12]
    fb50:	str	r1, [r3, #8]
    fb52:	ldr.w	r1, [r7, #8]!
    fb56:	ldr.w	r3, [sl, #12]
    fb5a:	str	r3, [r1, #12]
    fb5c:	subs	r2, r6, #4
    fb5e:	cmp	r2, #36	; 0x24
    fb60:	str	r1, [r3, #8]
    fb62:	bhi.n	fbc0 <_realloc_r+0x318>
    fb64:	cmp	r2, #19
    fb66:	bls.n	fbbc <_realloc_r+0x314>
    fb68:	ldr	r3, [r4, #0]
    fb6a:	str.w	r3, [sl, #8]
    fb6e:	ldr	r3, [r4, #4]
    fb70:	str.w	r3, [sl, #12]
    fb74:	cmp	r2, #27
    fb76:	bhi.n	fbfe <_realloc_r+0x356>
    fb78:	adds	r4, #8
    fb7a:	add.w	r3, sl, #16
    fb7e:	ldr	r2, [r4, #0]
    fb80:	str	r2, [r3, #0]
    fb82:	ldr	r2, [r4, #4]
    fb84:	str	r2, [r3, #4]
    fb86:	ldr	r2, [r4, #8]
    fb88:	str	r2, [r3, #8]
    fb8a:	mov	r6, ip
    fb8c:	mov	r9, sl
    fb8e:	mov	r4, r7
    fb90:	b.n	f9a2 <_realloc_r+0xfa>
    fb92:	ldr	r3, [r4, #8]
    fb94:	str	r3, [r0, #8]
    fb96:	ldr	r3, [r4, #12]
    fb98:	str	r3, [r0, #12]
    fb9a:	cmp	r2, #36	; 0x24
    fb9c:	beq.n	fbec <_realloc_r+0x344>
    fb9e:	add.w	r2, r4, #16
    fba2:	add.w	r3, r0, #16
    fba6:	b.n	f960 <_realloc_r+0xb8>
    fba8:	mov	r2, r7
    fbaa:	b.n	fb2c <_realloc_r+0x284>
    fbac:	mov	r1, r4
    fbae:	mov	r0, r7
    fbb0:	mov	r6, r3
    fbb2:	mov	r9, sl
    fbb4:	bl	1000c <memmove>
    fbb8:	mov	r4, r7
    fbba:	b.n	f9a2 <_realloc_r+0xfa>
    fbbc:	mov	r3, r7
    fbbe:	b.n	fb7e <_realloc_r+0x2d6>
    fbc0:	mov	r1, r4
    fbc2:	mov	r0, r7
    fbc4:	mov	r6, ip
    fbc6:	mov	r9, sl
    fbc8:	bl	1000c <memmove>
    fbcc:	mov	r4, r7
    fbce:	b.n	f9a2 <_realloc_r+0xfa>
    fbd0:	.word	0x20001db4
    fbd4:	ldr	r1, [r4, #8]
    fbd6:	str.w	r1, [sl, #16]
    fbda:	ldr	r1, [r4, #12]
    fbdc:	str.w	r1, [sl, #20]
    fbe0:	cmp	r2, #36	; 0x24
    fbe2:	beq.n	fc26 <_realloc_r+0x37e>
    fbe4:	adds	r4, #16
    fbe6:	add.w	r2, sl, #24
    fbea:	b.n	fb2c <_realloc_r+0x284>
    fbec:	ldr	r3, [r4, #16]
    fbee:	str	r3, [r0, #16]
    fbf0:	ldr	r1, [r4, #20]
    fbf2:	str	r1, [r0, #20]
    fbf4:	add.w	r2, r4, #24
    fbf8:	add.w	r3, r0, #24
    fbfc:	b.n	f960 <_realloc_r+0xb8>
    fbfe:	ldr	r3, [r4, #8]
    fc00:	str.w	r3, [sl, #16]
    fc04:	ldr	r3, [r4, #12]
    fc06:	str.w	r3, [sl, #20]
    fc0a:	cmp	r2, #36	; 0x24
    fc0c:	beq.n	fc52 <_realloc_r+0x3aa>
    fc0e:	adds	r4, #16
    fc10:	add.w	r3, sl, #24
    fc14:	b.n	fb7e <_realloc_r+0x2d6>
    fc16:	mov	r2, r7
    fc18:	b.n	fa82 <_realloc_r+0x1da>
    fc1a:	mov	r1, r4
    fc1c:	mov	r0, r7
    fc1e:	bl	1000c <memmove>
    fc22:	ldr	r3, [pc, #88]	; (fc7c <_realloc_r+0x3d4>)
    fc24:	b.n	fa8e <_realloc_r+0x1e6>
    fc26:	ldr	r2, [r4, #16]
    fc28:	str.w	r2, [sl, #24]
    fc2c:	ldr	r2, [r4, #20]
    fc2e:	str.w	r2, [sl, #28]
    fc32:	adds	r4, #24
    fc34:	add.w	r2, sl, #32
    fc38:	b.n	fb2c <_realloc_r+0x284>
    fc3a:	ldr	r1, [r4, #8]
    fc3c:	str.w	r1, [sl, #16]
    fc40:	ldr	r1, [r4, #12]
    fc42:	str.w	r1, [sl, #20]
    fc46:	cmp	r2, #36	; 0x24
    fc48:	beq.n	fc66 <_realloc_r+0x3be>
    fc4a:	adds	r4, #16
    fc4c:	add.w	r2, sl, #24
    fc50:	b.n	fa82 <_realloc_r+0x1da>
    fc52:	ldr	r3, [r4, #16]
    fc54:	str.w	r3, [sl, #24]
    fc58:	ldr	r3, [r4, #20]
    fc5a:	str.w	r3, [sl, #28]
    fc5e:	adds	r4, #24
    fc60:	add.w	r3, sl, #32
    fc64:	b.n	fb7e <_realloc_r+0x2d6>
    fc66:	ldr	r2, [r4, #16]
    fc68:	str.w	r2, [sl, #24]
    fc6c:	ldr	r2, [r4, #20]
    fc6e:	str.w	r2, [sl, #28]
    fc72:	adds	r4, #24
    fc74:	add.w	r2, sl, #32
    fc78:	b.n	fa82 <_realloc_r+0x1da>
    fc7a:	nop
    fc7c:	.word	0x20001db4

0000fc80 <__cxa_atexit>:
    fc80:	mov	r3, r2
    fc82:	mov	r2, r1
    fc84:	mov	r1, r0
    fc86:	movs	r0, #2
    fc88:	b.w	1055c <__register_exitproc>

0000fc8c <stdio_exit_handler>:
    fc8c:	ldr	r2, [pc, #8]	; (fc98 <stdio_exit_handler+0xc>)
    fc8e:	ldr	r1, [pc, #12]	; (fc9c <stdio_exit_handler+0x10>)
    fc90:	ldr	r0, [pc, #12]	; (fca0 <stdio_exit_handler+0x14>)
    fc92:	b.w	fe0c <_fwalk_sglue>
    fc96:	nop
    fc98:	.word	0x200021c4
    fc9c:	.word	0x00012b95
    fca0:	.word	0x20001ae8

0000fca4 <cleanup_stdio>:
    fca4:	ldr	r3, [pc, #48]	; (fcd8 <cleanup_stdio+0x34>)
    fca6:	ldr	r1, [r0, #4]
    fca8:	cmp	r1, r3
    fcaa:	push	{r4, lr}
    fcac:	mov	r4, r0
    fcae:	beq.n	fcb4 <cleanup_stdio+0x10>
    fcb0:	bl	12b94 <_fclose_r>
    fcb4:	ldr	r1, [r4, #8]
    fcb6:	ldr	r3, [pc, #36]	; (fcdc <cleanup_stdio+0x38>)
    fcb8:	cmp	r1, r3
    fcba:	beq.n	fcc2 <cleanup_stdio+0x1e>
    fcbc:	mov	r0, r4
    fcbe:	bl	12b94 <_fclose_r>
    fcc2:	ldr	r1, [r4, #12]
    fcc4:	ldr	r3, [pc, #24]	; (fce0 <cleanup_stdio+0x3c>)
    fcc6:	cmp	r1, r3
    fcc8:	beq.n	fcd4 <cleanup_stdio+0x30>
    fcca:	mov	r0, r4
    fccc:	ldmia.w	sp!, {r4, lr}
    fcd0:	b.w	12b94 <_fclose_r>
    fcd4:	pop	{r4, pc}
    fcd6:	nop
    fcd8:	.word	0x20007ac8
    fcdc:	.word	0x20007b30
    fce0:	.word	0x20007b98

0000fce4 <global_stdio_init.part.0>:
    fce4:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    fce8:	ldr	r4, [pc, #168]	; (fd94 <global_stdio_init.part.0+0xb0>)
    fcea:	ldr	r3, [pc, #172]	; (fd98 <global_stdio_init.part.0+0xb4>)
    fcec:	ldr	r0, [pc, #172]	; (fd9c <global_stdio_init.part.0+0xb8>)
    fcee:	ldr.w	r9, [pc, #192]	; fdb0 <global_stdio_init.part.0+0xcc>
    fcf2:	ldr.w	r8, [pc, #192]	; fdb4 <global_stdio_init.part.0+0xd0>
    fcf6:	ldr	r7, [pc, #168]	; (fda0 <global_stdio_init.part.0+0xbc>)
    fcf8:	str	r0, [r3, #0]
    fcfa:	movs	r5, #0
    fcfc:	movs	r3, #4
    fcfe:	movs	r2, #8
    fd00:	mov	r1, r5
    fd02:	add.w	r0, r4, #92	; 0x5c
    fd06:	ldr	r6, [pc, #156]	; (fda4 <global_stdio_init.part.0+0xc0>)
    fd08:	str	r5, [r4, #100]	; 0x64
    fd0a:	strd	r5, r3, [r4, #8]
    fd0e:	strd	r5, r5, [r4]
    fd12:	strd	r5, r5, [r4, #16]
    fd16:	str	r5, [r4, #24]
    fd18:	bl	10104 <memset>
    fd1c:	ldr	r3, [pc, #136]	; (fda8 <global_stdio_init.part.0+0xc4>)
    fd1e:	str	r3, [r4, #116]	; 0x74
    fd20:	movs	r2, #8
    fd22:	mov	r1, r5
    fd24:	add.w	r0, r4, #196	; 0xc4
    fd28:	strd	r4, r9, [r4, #28]
    fd2c:	strd	r8, r7, [r4, #36]	; 0x24
    fd30:	strd	r5, r5, [r4, #104]	; 0x68
    fd34:	strd	r5, r5, [r4, #120]	; 0x78
    fd38:	str.w	r5, [r4, #204]	; 0xcc
    fd3c:	str	r5, [r4, #112]	; 0x70
    fd3e:	str.w	r5, [r4, #128]	; 0x80
    fd42:	str	r6, [r4, #44]	; 0x2c
    fd44:	bl	10104 <memset>
    fd48:	ldr	r3, [pc, #96]	; (fdac <global_stdio_init.part.0+0xc8>)
    fd4a:	str.w	r3, [r4, #220]	; 0xdc
    fd4e:	mov	r1, r5
    fd50:	add.w	r3, r4, #104	; 0x68
    fd54:	movs	r2, #8
    fd56:	add.w	r0, r4, #300	; 0x12c
    fd5a:	str.w	r3, [r4, #132]	; 0x84
    fd5e:	strd	r9, r8, [r4, #136]	; 0x88
    fd62:	strd	r7, r6, [r4, #144]	; 0x90
    fd66:	strd	r5, r5, [r4, #208]	; 0xd0
    fd6a:	strd	r5, r5, [r4, #224]	; 0xe0
    fd6e:	str.w	r5, [r4, #308]	; 0x134
    fd72:	str.w	r5, [r4, #216]	; 0xd8
    fd76:	str.w	r5, [r4, #232]	; 0xe8
    fd7a:	bl	10104 <memset>
    fd7e:	add.w	r3, r4, #208	; 0xd0
    fd82:	strd	r9, r8, [r4, #240]	; 0xf0
    fd86:	strd	r7, r6, [r4, #248]	; 0xf8
    fd8a:	str.w	r3, [r4, #236]	; 0xec
    fd8e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    fd92:	nop
    fd94:	.word	0x20007ac8
    fd98:	.word	0x20007c00
    fd9c:	.word	0x0000fc8d
    fda0:	.word	0x0000feb9
    fda4:	.word	0x0000fed9
    fda8:	.word	0x00010009
    fdac:	.word	0x00020012
    fdb0:	.word	0x0000fe55
    fdb4:	.word	0x0000fe79

0000fdb8 <__sinit>:
    fdb8:	push	{r4, lr}
    fdba:	mov	r4, r0
    fdbc:	ldr	r0, [pc, #40]	; (fde8 <__sinit+0x30>)
    fdbe:	bl	103cc <__retarget_lock_acquire_recursive>
    fdc2:	ldr	r3, [r4, #52]	; 0x34
    fdc4:	cbnz	r3, fdd0 <__sinit+0x18>
    fdc6:	ldr	r3, [pc, #36]	; (fdec <__sinit+0x34>)
    fdc8:	ldr	r2, [pc, #36]	; (fdf0 <__sinit+0x38>)
    fdca:	ldr	r3, [r3, #0]
    fdcc:	str	r2, [r4, #52]	; 0x34
    fdce:	cbz	r3, fdda <__sinit+0x22>
    fdd0:	ldmia.w	sp!, {r4, lr}
    fdd4:	ldr	r0, [pc, #16]	; (fde8 <__sinit+0x30>)
    fdd6:	b.w	103d0 <__retarget_lock_release_recursive>
    fdda:	bl	fce4 <global_stdio_init.part.0>
    fdde:	ldmia.w	sp!, {r4, lr}
    fde2:	ldr	r0, [pc, #4]	; (fde8 <__sinit+0x30>)
    fde4:	b.w	103d0 <__retarget_lock_release_recursive>
    fde8:	.word	0x20007a90
    fdec:	.word	0x20007c00
    fdf0:	.word	0x0000fca5

0000fdf4 <__sfp_lock_acquire>:
    fdf4:	ldr	r0, [pc, #4]	; (fdfc <__sfp_lock_acquire+0x8>)
    fdf6:	b.w	103cc <__retarget_lock_acquire_recursive>
    fdfa:	nop
    fdfc:	.word	0x20007a90

0000fe00 <__sfp_lock_release>:
    fe00:	ldr	r0, [pc, #4]	; (fe08 <__sfp_lock_release+0x8>)
    fe02:	b.w	103d0 <__retarget_lock_release_recursive>
    fe06:	nop
    fe08:	.word	0x20007a90

0000fe0c <_fwalk_sglue>:
    fe0c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    fe10:	mov	r8, r0
    fe12:	mov	r7, r1
    fe14:	mov	r6, r2
    fe16:	mov.w	r9, #0
    fe1a:	ldrd	r5, r4, [r6, #4]
    fe1e:	subs	r5, #1
    fe20:	bmi.n	fe46 <_fwalk_sglue+0x3a>
    fe22:	ldrh	r3, [r4, #12]
    fe24:	cmp	r3, #1
    fe26:	add.w	r5, r5, #4294967295
    fe2a:	bls.n	fe3e <_fwalk_sglue+0x32>
    fe2c:	ldrsh.w	r3, [r4, #14]
    fe30:	adds	r3, #1
    fe32:	mov	r1, r4
    fe34:	beq.n	fe3e <_fwalk_sglue+0x32>
    fe36:	mov	r0, r8
    fe38:	blx	r7
    fe3a:	orr.w	r9, r9, r0
    fe3e:	adds	r3, r5, #1
    fe40:	add.w	r4, r4, #104	; 0x68
    fe44:	bne.n	fe22 <_fwalk_sglue+0x16>
    fe46:	ldr	r6, [r6, #0]
    fe48:	cmp	r6, #0
    fe4a:	bne.n	fe1a <_fwalk_sglue+0xe>
    fe4c:	mov	r0, r9
    fe4e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    fe52:	nop

0000fe54 <__sread>:
    fe54:	push	{r4, lr}
    fe56:	mov	r4, r1
    fe58:	ldrsh.w	r1, [r1, #14]
    fe5c:	bl	102f4 <_read_r>
    fe60:	cmp	r0, #0
    fe62:	blt.n	fe6c <__sread+0x18>
    fe64:	ldr	r3, [r4, #80]	; 0x50
    fe66:	add	r3, r0
    fe68:	str	r3, [r4, #80]	; 0x50
    fe6a:	pop	{r4, pc}
    fe6c:	ldrh	r3, [r4, #12]
    fe6e:	bic.w	r3, r3, #4096	; 0x1000
    fe72:	strh	r3, [r4, #12]
    fe74:	pop	{r4, pc}
    fe76:	nop

0000fe78 <__swrite>:
    fe78:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fe7c:	mov	r4, r1
    fe7e:	ldrsh.w	r1, [r1, #12]
    fe82:	mov	r7, r3
    fe84:	lsls	r3, r1, #23
    fe86:	mov	r5, r0
    fe88:	mov	r6, r2
    fe8a:	bmi.n	fea4 <__swrite+0x2c>
    fe8c:	bic.w	r1, r1, #4096	; 0x1000
    fe90:	strh	r1, [r4, #12]
    fe92:	mov	r3, r7
    fe94:	ldrsh.w	r1, [r4, #14]
    fe98:	mov	r2, r6
    fe9a:	mov	r0, r5
    fe9c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    fea0:	b.w	10344 <_write_r>
    fea4:	ldrsh.w	r1, [r4, #14]
    fea8:	movs	r3, #2
    feaa:	movs	r2, #0
    feac:	bl	102c8 <_lseek_r>
    feb0:	ldrsh.w	r1, [r4, #12]
    feb4:	b.n	fe8c <__swrite+0x14>
    feb6:	nop

0000feb8 <__sseek>:
    feb8:	push	{r4, lr}
    feba:	mov	r4, r1
    febc:	ldrsh.w	r1, [r1, #14]
    fec0:	bl	102c8 <_lseek_r>
    fec4:	ldrh	r3, [r4, #12]
    fec6:	adds	r2, r0, #1
    fec8:	itee	eq
    feca:	biceq.w	r3, r3, #4096	; 0x1000
    fece:	orrne.w	r3, r3, #4096	; 0x1000
    fed2:	strne	r0, [r4, #80]	; 0x50
    fed4:	strh	r3, [r4, #12]
    fed6:	pop	{r4, pc}

0000fed8 <__sclose>:
    fed8:	ldrsh.w	r1, [r1, #14]
    fedc:	b.w	102a4 <_close_r>

0000fee0 <_vdprintf_r>:
    fee0:	push	{r4, r5, r6, r7, lr}
    fee2:	sub.w	sp, sp, #532	; 0x214
    fee6:	add	r7, sp, #16
    fee8:	str	r3, [sp, #0]
    feea:	mov	r3, r2
    feec:	mov.w	r2, #512	; 0x200
    fef0:	mov	r6, r1
    fef2:	str	r2, [sp, #12]
    fef4:	mov	r1, r7
    fef6:	add	r2, sp, #12
    fef8:	mov	r5, r0
    fefa:	bl	ff48 <_vasnprintf_r>
    fefe:	cbz	r0, ff24 <_vdprintf_r+0x44>
    ff00:	mov	r4, r0
    ff02:	mov	r2, r0
    ff04:	ldr	r3, [sp, #12]
    ff06:	mov	r1, r6
    ff08:	mov	r0, r5
    ff0a:	bl	10344 <_write_r>
    ff0e:	cmp	r4, r7
    ff10:	str	r0, [sp, #12]
    ff12:	beq.n	ff1e <_vdprintf_r+0x3e>
    ff14:	mov	r0, r5
    ff16:	mov	r1, r4
    ff18:	bl	10684 <_free_r>
    ff1c:	ldr	r0, [sp, #12]
    ff1e:	add.w	sp, sp, #532	; 0x214
    ff22:	pop	{r4, r5, r6, r7, pc}
    ff24:	mov.w	r0, #4294967295
    ff28:	b.n	ff1e <_vdprintf_r+0x3e>
    ff2a:	nop

0000ff2c <vdprintf>:
    ff2c:	push	{r4}
    ff2e:	ldr	r4, [pc, #20]	; (ff44 <vdprintf+0x18>)
    ff30:	mov	ip, r0
    ff32:	mov	r3, r2
    ff34:	ldr	r0, [r4, #0]
    ff36:	ldr.w	r4, [sp], #4
    ff3a:	mov	r2, r1
    ff3c:	mov	r1, ip
    ff3e:	b.w	fee0 <_vdprintf_r>
    ff42:	nop
    ff44:	.word	0x200021d0

0000ff48 <_vasnprintf_r>:
    ff48:	push	{r4, r5, lr}
    ff4a:	ldr	r4, [r2, #0]
    ff4c:	mov	r5, r2
    ff4e:	sub	sp, #108	; 0x6c
    ff50:	mov	r2, r3
    ff52:	cbz	r1, ff58 <_vasnprintf_r+0x10>
    ff54:	cmp	r4, #0
    ff56:	bne.n	ff8c <_vasnprintf_r+0x44>
    ff58:	movs	r1, #0
    ff5a:	mov.w	r3, #648	; 0x288
    ff5e:	strh.w	r3, [sp, #12]
    ff62:	str	r1, [sp, #0]
    ff64:	str	r1, [sp, #16]
    ff66:	movw	r3, #65535	; 0xffff
    ff6a:	str	r1, [sp, #8]
    ff6c:	str	r1, [sp, #20]
    ff6e:	strh.w	r3, [sp, #14]
    ff72:	mov	r1, sp
    ff74:	ldr	r3, [sp, #120]	; 0x78
    ff76:	bl	11050 <_svfprintf_r>
    ff7a:	cmp	r0, #0
    ff7c:	blt.n	ffa6 <_vasnprintf_r+0x5e>
    ff7e:	ldr	r3, [sp, #0]
    ff80:	str	r0, [r5, #0]
    ff82:	movs	r2, #0
    ff84:	strb	r2, [r3, #0]
    ff86:	ldr	r0, [sp, #16]
    ff88:	add	sp, #108	; 0x6c
    ff8a:	pop	{r4, r5, pc}
    ff8c:	mov.w	r3, #1544	; 0x608
    ff90:	str	r1, [sp, #0]
    ff92:	str	r1, [sp, #16]
    ff94:	strh.w	r3, [sp, #12]
    ff98:	mov	r1, r4
    ff9a:	bge.n	ff66 <_vasnprintf_r+0x1e>
    ff9c:	movs	r3, #139	; 0x8b
    ff9e:	str	r3, [r0, #0]
    ffa0:	movs	r0, #0
    ffa2:	add	sp, #108	; 0x6c
    ffa4:	pop	{r4, r5, pc}
    ffa6:	movs	r0, #0
    ffa8:	b.n	ff88 <_vasnprintf_r+0x40>
    ffaa:	nop

0000ffac <memcmp>:
    ffac:	cmp	r2, #3
    ffae:	push	{r4, r5, r6, lr}
    ffb0:	bls.n	ffdc <memcmp+0x30>
    ffb2:	orr.w	r3, r0, r1
    ffb6:	lsls	r3, r3, #30
    ffb8:	bne.n	10000 <memcmp+0x54>
    ffba:	mov	r4, r0
    ffbc:	mov	r3, r1
    ffbe:	mov	r1, r3
    ffc0:	mov	r0, r4
    ffc2:	ldr	r6, [r1, #0]
    ffc4:	ldr	r5, [r0, #0]
    ffc6:	cmp	r5, r6
    ffc8:	add.w	r4, r4, #4
    ffcc:	add.w	r3, r3, #4
    ffd0:	bne.n	10000 <memcmp+0x54>
    ffd2:	subs	r2, #4
    ffd4:	cmp	r2, #3
    ffd6:	mov	r0, r4
    ffd8:	mov	r1, r3
    ffda:	bhi.n	ffbe <memcmp+0x12>
    ffdc:	subs	r4, r2, #1
    ffde:	cbz	r2, 10008 <memcmp+0x5c>
    ffe0:	subs	r2, r0, #1
    ffe2:	subs	r1, #1
    ffe4:	b.n	ffea <memcmp+0x3e>
    ffe6:	adds	r3, r0, r3
    ffe8:	beq.n	10004 <memcmp+0x58>
    ffea:	ldrb.w	lr, [r2, #1]!
    ffee:	ldrb.w	ip, [r1, #1]!
    fff2:	cmp	lr, ip
    fff4:	sub.w	r3, r4, r2
    fff8:	beq.n	ffe6 <memcmp+0x3a>
    fffa:	sub.w	r0, lr, ip
    fffe:	pop	{r4, r5, r6, pc}
   10000:	subs	r4, r2, #1
   10002:	b.n	ffe0 <memcmp+0x34>
   10004:	mov	r0, r3
   10006:	pop	{r4, r5, r6, pc}
   10008:	mov	r0, r2
   1000a:	pop	{r4, r5, r6, pc}

0001000c <memmove>:
   1000c:	cmp	r0, r1
   1000e:	bls.n	1002c <memmove+0x20>
   10010:	adds	r3, r1, r2
   10012:	cmp	r3, r0
   10014:	bls.n	1002c <memmove+0x20>
   10016:	add.w	ip, r0, r2
   1001a:	cbz	r2, 1004c <memmove+0x40>
   1001c:	mov	r2, ip
   1001e:	ldrb.w	ip, [r3, #-1]!
   10022:	strb.w	ip, [r2, #-1]!
   10026:	cmp	r1, r3
   10028:	bne.n	1001e <memmove+0x12>
   1002a:	bx	lr
   1002c:	cmp	r2, #15
   1002e:	bhi.n	1004e <memmove+0x42>
   10030:	mov	r3, r0
   10032:	add.w	ip, r2, #4294967295
   10036:	cbz	r2, 1004c <memmove+0x40>
   10038:	add.w	ip, ip, #1
   1003c:	subs	r3, #1
   1003e:	add	ip, r1
   10040:	ldrb.w	r2, [r1], #1
   10044:	strb.w	r2, [r3, #1]!
   10048:	cmp	r1, ip
   1004a:	bne.n	10040 <memmove+0x34>
   1004c:	bx	lr
   1004e:	orr.w	r3, r0, r1
   10052:	lsls	r3, r3, #30
   10054:	bne.n	100f8 <memmove+0xec>
   10056:	sub.w	r3, r2, #16
   1005a:	push	{r4, r5, r6, lr}
   1005c:	add.w	ip, r1, #32
   10060:	bic.w	r5, r3, #15
   10064:	add.w	lr, r1, #16
   10068:	add.w	r4, r0, #16
   1006c:	add	ip, r5
   1006e:	lsrs	r3, r3, #4
   10070:	ldr.w	r5, [lr, #-16]
   10074:	str.w	r5, [r4, #-16]
   10078:	ldr.w	r5, [lr, #-12]
   1007c:	str.w	r5, [r4, #-12]
   10080:	ldr.w	r5, [lr, #-8]
   10084:	str.w	r5, [r4, #-8]
   10088:	ldr.w	r5, [lr, #-4]
   1008c:	str.w	r5, [r4, #-4]
   10090:	add.w	lr, lr, #16
   10094:	cmp	lr, ip
   10096:	add.w	r4, r4, #16
   1009a:	bne.n	10070 <memmove+0x64>
   1009c:	adds	r3, #1
   1009e:	tst.w	r2, #12
   100a2:	add.w	r1, r1, r3, lsl #4
   100a6:	and.w	r4, r2, #15
   100aa:	add.w	r3, r0, r3, lsl #4
   100ae:	beq.n	10100 <memmove+0xf4>
   100b0:	subs	r4, #4
   100b2:	bic.w	r6, r4, #3
   100b6:	mov.w	ip, r4, lsr #2
   100ba:	add	r6, r3
   100bc:	subs	r4, r3, #4
   100be:	mov	lr, r1
   100c0:	ldr.w	r5, [lr], #4
   100c4:	str.w	r5, [r4, #4]!
   100c8:	cmp	r4, r6
   100ca:	bne.n	100c0 <memmove+0xb4>
   100cc:	add.w	r4, ip, #1
   100d0:	and.w	r2, r2, #3
   100d4:	add.w	r3, r3, r4, lsl #2
   100d8:	add.w	r1, r1, r4, lsl #2
   100dc:	add.w	ip, r2, #4294967295
   100e0:	cbz	r2, 100f6 <memmove+0xea>
   100e2:	add.w	ip, ip, #1
   100e6:	subs	r3, #1
   100e8:	add	ip, r1
   100ea:	ldrb.w	r2, [r1], #1
   100ee:	strb.w	r2, [r3, #1]!
   100f2:	cmp	r1, ip
   100f4:	bne.n	100ea <memmove+0xde>
   100f6:	pop	{r4, r5, r6, pc}
   100f8:	add.w	ip, r2, #4294967295
   100fc:	mov	r3, r0
   100fe:	b.n	10038 <memmove+0x2c>
   10100:	mov	r2, r4
   10102:	b.n	100dc <memmove+0xd0>

00010104 <memset>:
   10104:	lsls	r3, r0, #30
   10106:	push	{r4, r5, lr}
   10108:	beq.n	1019c <memset+0x98>
   1010a:	subs	r4, r2, #1
   1010c:	cmp	r2, #0
   1010e:	beq.n	10190 <memset+0x8c>
   10110:	uxtb	r2, r1
   10112:	mov	r3, r0
   10114:	b.n	1011a <memset+0x16>
   10116:	subs	r4, #1
   10118:	bcc.n	10190 <memset+0x8c>
   1011a:	strb.w	r2, [r3], #1
   1011e:	lsls	r5, r3, #30
   10120:	bne.n	10116 <memset+0x12>
   10122:	cmp	r4, #3
   10124:	bls.n	10182 <memset+0x7e>
   10126:	uxtb	r5, r1
   10128:	orr.w	r5, r5, r5, lsl #8
   1012c:	cmp	r4, #15
   1012e:	orr.w	r5, r5, r5, lsl #16
   10132:	bls.n	101a2 <memset+0x9e>
   10134:	sub.w	r2, r4, #16
   10138:	bic.w	ip, r2, #15
   1013c:	add.w	lr, r3, #32
   10140:	add	lr, ip
   10142:	mov.w	ip, r2, lsr #4
   10146:	add.w	r2, r3, #16
   1014a:	strd	r5, r5, [r2, #-16]
   1014e:	strd	r5, r5, [r2, #-8]
   10152:	adds	r2, #16
   10154:	cmp	r2, lr
   10156:	bne.n	1014a <memset+0x46>
   10158:	add.w	r2, ip, #1
   1015c:	tst.w	r4, #12
   10160:	add.w	r2, r3, r2, lsl #4
   10164:	and.w	ip, r4, #15
   10168:	beq.n	10192 <memset+0x8e>
   1016a:	sub.w	r3, ip, #4
   1016e:	bic.w	r3, r3, #3
   10172:	adds	r3, #4
   10174:	add	r3, r2
   10176:	str.w	r5, [r2], #4
   1017a:	cmp	r3, r2
   1017c:	bne.n	10176 <memset+0x72>
   1017e:	and.w	r4, ip, #3
   10182:	cbz	r4, 10190 <memset+0x8c>
   10184:	uxtb	r1, r1
   10186:	add	r4, r3
   10188:	strb.w	r1, [r3], #1
   1018c:	cmp	r4, r3
   1018e:	bne.n	10188 <memset+0x84>
   10190:	pop	{r4, r5, pc}
   10192:	mov	r4, ip
   10194:	mov	r3, r2
   10196:	cmp	r4, #0
   10198:	bne.n	10184 <memset+0x80>
   1019a:	b.n	10190 <memset+0x8c>
   1019c:	mov	r3, r0
   1019e:	mov	r4, r2
   101a0:	b.n	10122 <memset+0x1e>
   101a2:	mov	r2, r3
   101a4:	mov	ip, r4
   101a6:	b.n	1016a <memset+0x66>

000101a8 <strncmp>:
   101a8:	cmp	r2, #0
   101aa:	beq.n	1022a <strncmp+0x82>
   101ac:	orr.w	r3, r0, r1
   101b0:	lsls	r3, r3, #30
   101b2:	push	{r4, r5, lr}
   101b4:	mov	ip, r0
   101b6:	bne.n	10218 <strncmp+0x70>
   101b8:	cmp	r2, #3
   101ba:	bls.n	10218 <strncmp+0x70>
   101bc:	mov	r3, r1
   101be:	b.n	101d2 <strncmp+0x2a>
   101c0:	subs	r2, #4
   101c2:	mov	ip, r0
   101c4:	mov	r1, r3
   101c6:	beq.n	10214 <strncmp+0x6c>
   101c8:	tst.w	lr, #2155905152	; 0x80808080
   101cc:	bne.n	10214 <strncmp+0x6c>
   101ce:	cmp	r2, #3
   101d0:	bls.n	10218 <strncmp+0x70>
   101d2:	ldr	r4, [r0, #0]
   101d4:	mov	r1, r3
   101d6:	ldr.w	r5, [r3], #4
   101da:	sub.w	lr, r4, #16843009	; 0x1010101
   101de:	cmp	r4, r5
   101e0:	mov	ip, r0
   101e2:	bic.w	lr, lr, r4
   101e6:	add.w	r0, r0, #4
   101ea:	beq.n	101c0 <strncmp+0x18>
   101ec:	ldrb.w	r0, [ip]
   101f0:	ldrb	r4, [r1, #0]
   101f2:	cmp	r0, r4
   101f4:	bne.n	1022e <strncmp+0x86>
   101f6:	mov	lr, ip
   101f8:	cbz	r0, 10216 <strncmp+0x6e>
   101fa:	ldrb.w	r0, [lr, #1]!
   101fe:	ldrb.w	r4, [r1, #1]!
   10202:	sub.w	r3, r2, lr
   10206:	cmp	r0, r4
   10208:	add.w	r3, r3, #4294967295
   1020c:	bne.n	1022e <strncmp+0x86>
   1020e:	adds.w	r3, ip, r3
   10212:	bne.n	101f8 <strncmp+0x50>
   10214:	movs	r0, #0
   10216:	pop	{r4, r5, pc}
   10218:	ldrb.w	r0, [ip]
   1021c:	ldrb	r4, [r1, #0]
   1021e:	cmp	r4, r0
   10220:	bne.n	1022e <strncmp+0x86>
   10222:	cmp	r2, #1
   10224:	beq.n	10214 <strncmp+0x6c>
   10226:	mov	lr, ip
   10228:	b.n	101f8 <strncmp+0x50>
   1022a:	mov	r0, r2
   1022c:	bx	lr
   1022e:	subs	r0, r0, r4
   10230:	pop	{r4, r5, pc}
   10232:	nop

00010234 <strncpy>:
   10234:	orr.w	r3, r0, r1
   10238:	lsls	r3, r3, #30
   1023a:	push	{r4, r5, lr}
   1023c:	bne.n	10242 <strncpy+0xe>
   1023e:	cmp	r2, #3
   10240:	bhi.n	10262 <strncpy+0x2e>
   10242:	mov	ip, r0
   10244:	add.w	lr, r1, #4294967295
   10248:	b.n	1025a <strncpy+0x26>
   1024a:	ldrb.w	r1, [lr, #1]!
   1024e:	strb.w	r1, [r3], #1
   10252:	subs	r4, r2, #1
   10254:	cbz	r1, 10288 <strncpy+0x54>
   10256:	mov	ip, r3
   10258:	mov	r2, r4
   1025a:	mov	r3, ip
   1025c:	cmp	r2, #0
   1025e:	bne.n	1024a <strncpy+0x16>
   10260:	pop	{r4, r5, pc}
   10262:	mov	r3, r1
   10264:	mov	ip, r0
   10266:	mov	r1, r3
   10268:	ldr.w	r5, [r3], #4
   1026c:	sub.w	r4, r5, #16843009	; 0x1010101
   10270:	bic.w	r4, r4, r5
   10274:	tst.w	r4, #2155905152	; 0x80808080
   10278:	bne.n	10244 <strncpy+0x10>
   1027a:	subs	r2, #4
   1027c:	cmp	r2, #3
   1027e:	str.w	r5, [ip], #4
   10282:	mov	r1, r3
   10284:	bhi.n	10266 <strncpy+0x32>
   10286:	b.n	10244 <strncpy+0x10>
   10288:	add	ip, r2
   1028a:	cmp	r4, #0
   1028c:	beq.n	10260 <strncpy+0x2c>
   1028e:	strb.w	r1, [r3], #1
   10292:	cmp	r3, ip
   10294:	bne.n	1028e <strncpy+0x5a>
   10296:	pop	{r4, r5, pc}

00010298 <__locale_mb_cur_max>:
   10298:	ldr	r3, [pc, #4]	; (102a0 <__locale_mb_cur_max+0x8>)
   1029a:	ldrb.w	r0, [r3, #296]	; 0x128
   1029e:	bx	lr
   102a0:	.word	0x20001c48

000102a4 <_close_r>:
   102a4:	push	{r3, r4, r5, lr}
   102a6:	ldr	r5, [pc, #28]	; (102c4 <_close_r+0x20>)
   102a8:	movs	r2, #0
   102aa:	mov	r4, r0
   102ac:	mov	r0, r1
   102ae:	str	r2, [r5, #0]
   102b0:	bl	cfb8 <_close>
   102b4:	adds	r3, r0, #1
   102b6:	beq.n	102ba <_close_r+0x16>
   102b8:	pop	{r3, r4, r5, pc}
   102ba:	ldr	r3, [r5, #0]
   102bc:	cmp	r3, #0
   102be:	beq.n	102b8 <_close_r+0x14>
   102c0:	str	r3, [r4, #0]
   102c2:	pop	{r3, r4, r5, pc}
   102c4:	.word	0x20015834

000102c8 <_lseek_r>:
   102c8:	push	{r3, r4, r5, lr}
   102ca:	mov	r4, r1
   102cc:	ldr	r5, [pc, #32]	; (102f0 <_lseek_r+0x28>)
   102ce:	mov	ip, r0
   102d0:	mov	r1, r2
   102d2:	mov	r0, r4
   102d4:	mov	r2, r3
   102d6:	movs	r3, #0
   102d8:	str	r3, [r5, #0]
   102da:	mov	r4, ip
   102dc:	bl	cfd0 <_lseek>
   102e0:	adds	r3, r0, #1
   102e2:	beq.n	102e6 <_lseek_r+0x1e>
   102e4:	pop	{r3, r4, r5, pc}
   102e6:	ldr	r3, [r5, #0]
   102e8:	cmp	r3, #0
   102ea:	beq.n	102e4 <_lseek_r+0x1c>
   102ec:	str	r3, [r4, #0]
   102ee:	pop	{r3, r4, r5, pc}
   102f0:	.word	0x20015834

000102f4 <_read_r>:
   102f4:	push	{r3, r4, r5, lr}
   102f6:	mov	r4, r1
   102f8:	ldr	r5, [pc, #32]	; (1031c <_read_r+0x28>)
   102fa:	mov	ip, r0
   102fc:	mov	r1, r2
   102fe:	mov	r0, r4
   10300:	mov	r2, r3
   10302:	movs	r3, #0
   10304:	str	r3, [r5, #0]
   10306:	mov	r4, ip
   10308:	bl	cfb4 <_read>
   1030c:	adds	r3, r0, #1
   1030e:	beq.n	10312 <_read_r+0x1e>
   10310:	pop	{r3, r4, r5, pc}
   10312:	ldr	r3, [r5, #0]
   10314:	cmp	r3, #0
   10316:	beq.n	10310 <_read_r+0x1c>
   10318:	str	r3, [r4, #0]
   1031a:	pop	{r3, r4, r5, pc}
   1031c:	.word	0x20015834

00010320 <_sbrk_r>:
   10320:	push	{r3, r4, r5, lr}
   10322:	ldr	r5, [pc, #28]	; (10340 <_sbrk_r+0x20>)
   10324:	movs	r2, #0
   10326:	mov	r4, r0
   10328:	mov	r0, r1
   1032a:	str	r2, [r5, #0]
   1032c:	bl	cf80 <_sbrk>
   10330:	adds	r3, r0, #1
   10332:	beq.n	10336 <_sbrk_r+0x16>
   10334:	pop	{r3, r4, r5, pc}
   10336:	ldr	r3, [r5, #0]
   10338:	cmp	r3, #0
   1033a:	beq.n	10334 <_sbrk_r+0x14>
   1033c:	str	r3, [r4, #0]
   1033e:	pop	{r3, r4, r5, pc}
   10340:	.word	0x20015834

00010344 <_write_r>:
   10344:	push	{r3, r4, r5, lr}
   10346:	mov	r4, r1
   10348:	ldr	r5, [pc, #32]	; (1036c <_write_r+0x28>)
   1034a:	mov	ip, r0
   1034c:	mov	r1, r2
   1034e:	mov	r0, r4
   10350:	mov	r2, r3
   10352:	movs	r3, #0
   10354:	str	r3, [r5, #0]
   10356:	mov	r4, ip
   10358:	bl	ec90 <_write>
   1035c:	adds	r3, r0, #1
   1035e:	beq.n	10362 <_write_r+0x1e>
   10360:	pop	{r3, r4, r5, pc}
   10362:	ldr	r3, [r5, #0]
   10364:	cmp	r3, #0
   10366:	beq.n	10360 <_write_r+0x1c>
   10368:	str	r3, [r4, #0]
   1036a:	pop	{r3, r4, r5, pc}
   1036c:	.word	0x20015834

00010370 <__errno>:
   10370:	ldr	r3, [pc, #4]	; (10378 <__errno+0x8>)
   10372:	ldr	r0, [r3, #0]
   10374:	bx	lr
   10376:	nop
   10378:	.word	0x200021d0

0001037c <__libc_init_array>:
   1037c:	push	{r4, r5, r6, lr}
   1037e:	ldr	r6, [pc, #52]	; (103b4 <__libc_init_array+0x38>)
   10380:	ldr	r5, [pc, #52]	; (103b8 <__libc_init_array+0x3c>)
   10382:	subs	r6, r6, r5
   10384:	asrs	r6, r6, #2
   10386:	beq.n	10396 <__libc_init_array+0x1a>
   10388:	movs	r4, #0
   1038a:	ldr.w	r3, [r5], #4
   1038e:	adds	r4, #1
   10390:	blx	r3
   10392:	cmp	r6, r4
   10394:	bne.n	1038a <__libc_init_array+0xe>
   10396:	ldr	r6, [pc, #36]	; (103bc <__libc_init_array+0x40>)
   10398:	ldr	r5, [pc, #36]	; (103c0 <__libc_init_array+0x44>)
   1039a:	subs	r6, r6, r5
   1039c:	bl	15718 <___init_veneer>
   103a0:	asrs	r6, r6, #2
   103a2:	beq.n	103b2 <__libc_init_array+0x36>
   103a4:	movs	r4, #0
   103a6:	ldr.w	r3, [r5], #4
   103aa:	adds	r4, #1
   103ac:	blx	r3
   103ae:	cmp	r6, r4
   103b0:	bne.n	103a6 <__libc_init_array+0x2a>
   103b2:	pop	{r4, r5, r6, pc}
   103b4:	.word	0x60002738
   103b8:	.word	0x60002738
   103bc:	.word	0x600027b4
   103c0:	.word	0x60002738

000103c4 <__retarget_lock_init_recursive>:
   103c4:	bx	lr
   103c6:	nop

000103c8 <__retarget_lock_close_recursive>:
   103c8:	bx	lr
   103ca:	nop

000103cc <__retarget_lock_acquire_recursive>:
   103cc:	bx	lr
   103ce:	nop

000103d0 <__retarget_lock_release_recursive>:
   103d0:	bx	lr
   103d2:	nop
	...

000103e0 <memchr>:
   103e0:	and.w	r1, r1, #255	; 0xff
   103e4:	cmp	r2, #16
   103e6:	blt.n	10440 <memchr+0x60>
   103e8:	tst.w	r0, #7
   103ec:	beq.n	10400 <memchr+0x20>
   103ee:	ldrb.w	r3, [r0], #1
   103f2:	subs	r2, #1
   103f4:	cmp	r3, r1
   103f6:	beq.n	10454 <memchr+0x74>
   103f8:	tst.w	r0, #7
   103fc:	cbz	r2, 10450 <memchr+0x70>
   103fe:	bne.n	103ee <memchr+0xe>
   10400:	push	{r4, r5, r6, r7}
   10402:	orr.w	r1, r1, r1, lsl #8
   10406:	orr.w	r1, r1, r1, lsl #16
   1040a:	bic.w	r4, r2, #7
   1040e:	mvns.w	r7, #0
   10412:	movs	r3, #0
   10414:	ldrd	r5, r6, [r0], #8
   10418:	subs	r4, #8
   1041a:	eor.w	r5, r5, r1
   1041e:	eor.w	r6, r6, r1
   10422:	uadd8	r5, r5, r7
   10426:	sel	r5, r3, r7
   1042a:	uadd8	r6, r6, r7
   1042e:	sel	r6, r5, r7
   10432:	cbnz	r6, 10458 <memchr+0x78>
   10434:	bne.n	10414 <memchr+0x34>
   10436:	pop	{r4, r5, r6, r7}
   10438:	and.w	r1, r1, #255	; 0xff
   1043c:	and.w	r2, r2, #7
   10440:	cbz	r2, 10450 <memchr+0x70>
   10442:	ldrb.w	r3, [r0], #1
   10446:	subs	r2, #1
   10448:	eor.w	r3, r3, r1
   1044c:	cbz	r3, 10454 <memchr+0x74>
   1044e:	bne.n	10442 <memchr+0x62>
   10450:	movs	r0, #0
   10452:	bx	lr
   10454:	subs	r0, #1
   10456:	bx	lr
   10458:	cmp	r5, #0
   1045a:	itte	eq
   1045c:	moveq	r5, r6
   1045e:	subeq	r0, #3
   10460:	subne	r0, #7
   10462:	tst.w	r5, #1
   10466:	bne.n	10478 <memchr+0x98>
   10468:	adds	r0, #1
   1046a:	tst.w	r5, #256	; 0x100
   1046e:	ittt	eq
   10470:	addeq	r0, #1
   10472:	tsteq.w	r5, #98304	; 0x18000
   10476:	addeq	r0, #1
   10478:	pop	{r4, r5, r6, r7}
   1047a:	subs	r0, #1
   1047c:	bx	lr
   1047e:	nop

00010480 <strlen>:
   10480:	pld	[r0]
   10484:	strd	r4, r5, [sp, #-8]!
   10488:	bic.w	r1, r0, #7
   1048c:	mvn.w	ip, #0
   10490:	ands.w	r4, r0, #7
   10494:	pld	[r1, #32]
   10498:	bne.w	1052e <strlen+0xae>
   1049c:	mov.w	r4, #0
   104a0:	mvn.w	r0, #7
   104a4:	ldrd	r2, r3, [r1]
   104a8:	pld	[r1, #64]	; 0x40
   104ac:	add.w	r0, r0, #8
   104b0:	uadd8	r2, r2, ip
   104b4:	sel	r2, r4, ip
   104b8:	uadd8	r3, r3, ip
   104bc:	sel	r3, r2, ip
   104c0:	cbnz	r3, 10516 <strlen+0x96>
   104c2:	ldrd	r2, r3, [r1, #8]
   104c6:	uadd8	r2, r2, ip
   104ca:	add.w	r0, r0, #8
   104ce:	sel	r2, r4, ip
   104d2:	uadd8	r3, r3, ip
   104d6:	sel	r3, r2, ip
   104da:	cbnz	r3, 10516 <strlen+0x96>
   104dc:	ldrd	r2, r3, [r1, #16]
   104e0:	uadd8	r2, r2, ip
   104e4:	add.w	r0, r0, #8
   104e8:	sel	r2, r4, ip
   104ec:	uadd8	r3, r3, ip
   104f0:	sel	r3, r2, ip
   104f4:	cbnz	r3, 10516 <strlen+0x96>
   104f6:	ldrd	r2, r3, [r1, #24]
   104fa:	add.w	r1, r1, #32
   104fe:	uadd8	r2, r2, ip
   10502:	add.w	r0, r0, #8
   10506:	sel	r2, r4, ip
   1050a:	uadd8	r3, r3, ip
   1050e:	sel	r3, r2, ip
   10512:	cmp	r3, #0
   10514:	beq.n	104a4 <strlen+0x24>
   10516:	cmp	r2, #0
   10518:	itt	eq
   1051a:	addeq	r0, #4
   1051c:	moveq	r2, r3
   1051e:	rev	r2, r2
   10520:	clz	r2, r2
   10524:	ldrd	r4, r5, [sp], #8
   10528:	add.w	r0, r0, r2, lsr #3
   1052c:	bx	lr
   1052e:	ldrd	r2, r3, [r1]
   10532:	and.w	r5, r4, #3
   10536:	rsb	r0, r4, #0
   1053a:	mov.w	r5, r5, lsl #3
   1053e:	tst.w	r4, #4
   10542:	pld	[r1, #64]	; 0x40
   10546:	lsl.w	r5, ip, r5
   1054a:	orn	r2, r2, r5
   1054e:	itt	ne
   10550:	ornne	r3, r3, r5
   10554:	movne	r2, ip
   10556:	mov.w	r4, #0
   1055a:	b.n	104b0 <strlen+0x30>

0001055c <__register_exitproc>:
   1055c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10560:	ldr.w	sl, [pc, #124]	; 105e0 <__register_exitproc+0x84>
   10564:	mov	r6, r0
   10566:	ldr.w	r0, [sl]
   1056a:	mov	r8, r3
   1056c:	mov	r7, r1
   1056e:	mov	r9, r2
   10570:	bl	103cc <__retarget_lock_acquire_recursive>
   10574:	ldr	r3, [pc, #96]	; (105d8 <__register_exitproc+0x7c>)
   10576:	ldr	r4, [r3, #0]
   10578:	cbz	r4, 105c4 <__register_exitproc+0x68>
   1057a:	ldr	r5, [r4, #4]
   1057c:	cmp	r5, #31
   1057e:	bgt.n	105ca <__register_exitproc+0x6e>
   10580:	cbnz	r6, 1059a <__register_exitproc+0x3e>
   10582:	adds	r3, r5, #1
   10584:	adds	r5, #2
   10586:	ldr.w	r0, [sl]
   1058a:	str	r3, [r4, #4]
   1058c:	str.w	r7, [r4, r5, lsl #2]
   10590:	bl	103d0 <__retarget_lock_release_recursive>
   10594:	movs	r0, #0
   10596:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1059a:	add.w	r1, r4, r5, lsl #2
   1059e:	movs	r3, #1
   105a0:	str.w	r9, [r1, #136]	; 0x88
   105a4:	ldr.w	r2, [r4, #392]	; 0x188
   105a8:	lsls	r3, r5
   105aa:	orrs	r2, r3
   105ac:	cmp	r6, #2
   105ae:	str.w	r2, [r4, #392]	; 0x188
   105b2:	str.w	r8, [r1, #264]	; 0x108
   105b6:	bne.n	10582 <__register_exitproc+0x26>
   105b8:	ldr.w	r2, [r4, #396]	; 0x18c
   105bc:	orrs	r2, r3
   105be:	str.w	r2, [r4, #396]	; 0x18c
   105c2:	b.n	10582 <__register_exitproc+0x26>
   105c4:	ldr	r4, [pc, #20]	; (105dc <__register_exitproc+0x80>)
   105c6:	str	r4, [r3, #0]
   105c8:	b.n	1057a <__register_exitproc+0x1e>
   105ca:	ldr.w	r0, [sl]
   105ce:	bl	103d0 <__retarget_lock_release_recursive>
   105d2:	mov.w	r0, #4294967295
   105d6:	b.n	10596 <__register_exitproc+0x3a>
   105d8:	.word	0x200078f4
   105dc:	.word	0x200078f8
   105e0:	.word	0x20001c3c

000105e4 <_malloc_trim_r>:
   105e4:	push	{r3, r4, r5, r6, r7, lr}
   105e6:	ldr	r7, [pc, #144]	; (10678 <_malloc_trim_r+0x94>)
   105e8:	mov	r4, r1
   105ea:	mov	r6, r0
   105ec:	bl	f890 <__malloc_lock>
   105f0:	ldr	r3, [r7, #8]
   105f2:	ldr	r5, [r3, #4]
   105f4:	rsb	r1, r4, #4064	; 0xfe0
   105f8:	adds	r1, #15
   105fa:	bic.w	r5, r5, #3
   105fe:	adds	r3, r1, r5
   10600:	bic.w	r3, r3, #4080	; 0xff0
   10604:	bic.w	r3, r3, #15
   10608:	sub.w	r4, r3, #4096	; 0x1000
   1060c:	cmp.w	r4, #4096	; 0x1000
   10610:	blt.n	10622 <_malloc_trim_r+0x3e>
   10612:	movs	r1, #0
   10614:	mov	r0, r6
   10616:	bl	10320 <_sbrk_r>
   1061a:	ldr	r3, [r7, #8]
   1061c:	add	r3, r5
   1061e:	cmp	r0, r3
   10620:	beq.n	1062c <_malloc_trim_r+0x48>
   10622:	mov	r0, r6
   10624:	bl	f89c <__malloc_unlock>
   10628:	movs	r0, #0
   1062a:	pop	{r3, r4, r5, r6, r7, pc}
   1062c:	negs	r1, r4
   1062e:	mov	r0, r6
   10630:	bl	10320 <_sbrk_r>
   10634:	adds	r0, #1
   10636:	beq.n	10654 <_malloc_trim_r+0x70>
   10638:	ldr	r2, [pc, #64]	; (1067c <_malloc_trim_r+0x98>)
   1063a:	ldr	r3, [r7, #8]
   1063c:	subs	r5, r5, r4
   1063e:	orr.w	r5, r5, #1
   10642:	str	r5, [r3, #4]
   10644:	ldr	r3, [r2, #0]
   10646:	mov	r0, r6
   10648:	subs	r3, r3, r4
   1064a:	str	r3, [r2, #0]
   1064c:	bl	f89c <__malloc_unlock>
   10650:	movs	r0, #1
   10652:	pop	{r3, r4, r5, r6, r7, pc}
   10654:	movs	r1, #0
   10656:	mov	r0, r6
   10658:	bl	10320 <_sbrk_r>
   1065c:	ldr	r2, [r7, #8]
   1065e:	subs	r3, r0, r2
   10660:	cmp	r3, #15
   10662:	ble.n	10622 <_malloc_trim_r+0x3e>
   10664:	orr.w	r3, r3, #1
   10668:	str	r3, [r2, #4]
   1066a:	ldr	r3, [pc, #20]	; (10680 <_malloc_trim_r+0x9c>)
   1066c:	ldr	r1, [pc, #12]	; (1067c <_malloc_trim_r+0x98>)
   1066e:	ldr	r3, [r3, #0]
   10670:	subs	r0, r0, r3
   10672:	str	r0, [r1, #0]
   10674:	b.n	10622 <_malloc_trim_r+0x3e>
   10676:	nop
   10678:	.word	0x20001db4
   1067c:	.word	0x20007a94
   10680:	.word	0x200021bc

00010684 <_free_r>:
   10684:	cmp	r1, #0
   10686:	beq.n	1074c <_free_r+0xc8>
   10688:	push	{r3, r4, r5, r6, r7, lr}
   1068a:	mov	r4, r1
   1068c:	mov	r6, r0
   1068e:	bl	f890 <__malloc_lock>
   10692:	ldr.w	r2, [r4, #-4]
   10696:	ldr	r7, [pc, #492]	; (10884 <_free_r+0x200>)
   10698:	sub.w	r5, r4, #8
   1069c:	bic.w	r1, r2, #1
   106a0:	add.w	ip, r5, r1
   106a4:	ldr	r0, [r7, #8]
   106a6:	ldr.w	r3, [ip, #4]
   106aa:	cmp	r0, ip
   106ac:	bic.w	r3, r3, #3
   106b0:	beq.w	107ca <_free_r+0x146>
   106b4:	lsls	r2, r2, #31
   106b6:	str.w	r3, [ip, #4]
   106ba:	bmi.n	10722 <_free_r+0x9e>
   106bc:	ldr.w	r2, [r4, #-8]
   106c0:	subs	r5, r5, r2
   106c2:	add	r1, r2
   106c4:	ldr	r2, [r5, #8]
   106c6:	add.w	r0, r7, #8
   106ca:	cmp	r2, r0
   106cc:	beq.n	107a4 <_free_r+0x120>
   106ce:	add.w	r4, ip, r3
   106d2:	ldr.w	lr, [r4, #4]
   106d6:	ldr	r4, [r5, #12]
   106d8:	str	r4, [r2, #12]
   106da:	tst.w	lr, #1
   106de:	str	r2, [r4, #8]
   106e0:	beq.w	10812 <_free_r+0x18e>
   106e4:	orr.w	r3, r1, #1
   106e8:	str	r3, [r5, #4]
   106ea:	str.w	r1, [ip]
   106ee:	cmp.w	r1, #512	; 0x200
   106f2:	bcs.n	10760 <_free_r+0xdc>
   106f4:	ldr	r0, [r7, #4]
   106f6:	lsrs	r3, r1, #3
   106f8:	movs	r2, #1
   106fa:	lsrs	r1, r1, #5
   106fc:	adds	r3, #1
   106fe:	lsls	r2, r1
   10700:	orrs	r2, r0
   10702:	ldr.w	r1, [r7, r3, lsl #3]
   10706:	str	r2, [r7, #4]
   10708:	add.w	r2, r7, r3, lsl #3
   1070c:	subs	r2, #8
   1070e:	strd	r1, r2, [r5, #8]
   10712:	str.w	r5, [r7, r3, lsl #3]
   10716:	str	r5, [r1, #12]
   10718:	mov	r0, r6
   1071a:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1071e:	b.w	f89c <__malloc_unlock>
   10722:	add.w	r2, ip, r3
   10726:	ldr	r2, [r2, #4]
   10728:	lsls	r0, r2, #31
   1072a:	bmi.n	1074e <_free_r+0xca>
   1072c:	add	r1, r3
   1072e:	add.w	r0, r7, #8
   10732:	ldr.w	r3, [ip, #8]
   10736:	cmp	r3, r0
   10738:	beq.n	10822 <_free_r+0x19e>
   1073a:	ldr.w	r2, [ip, #12]
   1073e:	str	r2, [r3, #12]
   10740:	str	r3, [r2, #8]
   10742:	orr.w	r3, r1, #1
   10746:	str	r3, [r5, #4]
   10748:	str	r1, [r5, r1]
   1074a:	b.n	106ee <_free_r+0x6a>
   1074c:	bx	lr
   1074e:	orr.w	r3, r1, #1
   10752:	cmp.w	r1, #512	; 0x200
   10756:	str.w	r3, [r4, #-4]
   1075a:	str.w	r1, [ip]
   1075e:	bcc.n	106f4 <_free_r+0x70>
   10760:	cmp.w	r1, #2560	; 0xa00
   10764:	mov.w	r3, r1, lsr #9
   10768:	bcs.n	107fc <_free_r+0x178>
   1076a:	lsrs	r3, r1, #6
   1076c:	add.w	r0, r3, #57	; 0x39
   10770:	add.w	r2, r3, #56	; 0x38
   10774:	lsls	r3, r0, #3
   10776:	adds	r0, r7, r3
   10778:	ldr	r3, [r7, r3]
   1077a:	subs	r0, #8
   1077c:	cmp	r0, r3
   1077e:	beq.n	10834 <_free_r+0x1b0>
   10780:	ldr	r2, [r3, #4]
   10782:	bic.w	r2, r2, #3
   10786:	cmp	r2, r1
   10788:	bls.n	10790 <_free_r+0x10c>
   1078a:	ldr	r3, [r3, #8]
   1078c:	cmp	r0, r3
   1078e:	bne.n	10780 <_free_r+0xfc>
   10790:	ldr	r0, [r3, #12]
   10792:	strd	r3, r0, [r5, #8]
   10796:	str	r5, [r0, #8]
   10798:	str	r5, [r3, #12]
   1079a:	mov	r0, r6
   1079c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   107a0:	b.w	f89c <__malloc_unlock>
   107a4:	add.w	r2, ip, r3
   107a8:	ldr	r2, [r2, #4]
   107aa:	lsls	r2, r2, #31
   107ac:	bmi.n	10876 <_free_r+0x1f2>
   107ae:	add	r3, r1
   107b0:	ldrd	r1, r2, [ip, #8]
   107b4:	str	r2, [r1, #12]
   107b6:	str	r1, [r2, #8]
   107b8:	orr.w	r2, r3, #1
   107bc:	str	r2, [r5, #4]
   107be:	mov	r0, r6
   107c0:	str	r3, [r5, r3]
   107c2:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   107c6:	b.w	f89c <__malloc_unlock>
   107ca:	add	r3, r1
   107cc:	lsls	r1, r2, #31
   107ce:	bmi.n	107e0 <_free_r+0x15c>
   107d0:	ldr.w	r2, [r4, #-8]
   107d4:	subs	r5, r5, r2
   107d6:	add	r3, r2
   107d8:	ldrd	r1, r2, [r5, #8]
   107dc:	str	r2, [r1, #12]
   107de:	str	r1, [r2, #8]
   107e0:	orr.w	r2, r3, #1
   107e4:	str	r2, [r5, #4]
   107e6:	ldr	r2, [pc, #160]	; (10888 <_free_r+0x204>)
   107e8:	str	r5, [r7, #8]
   107ea:	ldr	r2, [r2, #0]
   107ec:	cmp	r2, r3
   107ee:	bhi.n	10718 <_free_r+0x94>
   107f0:	ldr	r3, [pc, #152]	; (1088c <_free_r+0x208>)
   107f2:	mov	r0, r6
   107f4:	ldr	r1, [r3, #0]
   107f6:	bl	105e4 <_malloc_trim_r>
   107fa:	b.n	10718 <_free_r+0x94>
   107fc:	cmp	r3, #20
   107fe:	bls.n	10816 <_free_r+0x192>
   10800:	cmp	r3, #84	; 0x54
   10802:	bhi.n	10844 <_free_r+0x1c0>
   10804:	lsrs	r3, r1, #12
   10806:	add.w	r0, r3, #111	; 0x6f
   1080a:	add.w	r2, r3, #110	; 0x6e
   1080e:	lsls	r3, r0, #3
   10810:	b.n	10776 <_free_r+0xf2>
   10812:	add	r1, r3
   10814:	b.n	10732 <_free_r+0xae>
   10816:	add.w	r0, r3, #92	; 0x5c
   1081a:	add.w	r2, r3, #91	; 0x5b
   1081e:	lsls	r3, r0, #3
   10820:	b.n	10776 <_free_r+0xf2>
   10822:	orr.w	r3, r1, #1
   10826:	strd	r5, r5, [r7, #16]
   1082a:	strd	r0, r0, [r5, #8]
   1082e:	str	r3, [r5, #4]
   10830:	str	r1, [r5, r1]
   10832:	b.n	10718 <_free_r+0x94>
   10834:	ldr	r1, [r7, #4]
   10836:	asrs	r2, r2, #2
   10838:	movs	r4, #1
   1083a:	lsl.w	r2, r4, r2
   1083e:	orrs	r2, r1
   10840:	str	r2, [r7, #4]
   10842:	b.n	10792 <_free_r+0x10e>
   10844:	cmp.w	r3, #340	; 0x154
   10848:	bhi.n	10858 <_free_r+0x1d4>
   1084a:	lsrs	r3, r1, #15
   1084c:	add.w	r0, r3, #120	; 0x78
   10850:	add.w	r2, r3, #119	; 0x77
   10854:	lsls	r3, r0, #3
   10856:	b.n	10776 <_free_r+0xf2>
   10858:	movw	r2, #1364	; 0x554
   1085c:	cmp	r3, r2
   1085e:	bhi.n	1086e <_free_r+0x1ea>
   10860:	lsrs	r3, r1, #18
   10862:	add.w	r0, r3, #125	; 0x7d
   10866:	add.w	r2, r3, #124	; 0x7c
   1086a:	lsls	r3, r0, #3
   1086c:	b.n	10776 <_free_r+0xf2>
   1086e:	mov.w	r3, #1016	; 0x3f8
   10872:	movs	r2, #126	; 0x7e
   10874:	b.n	10776 <_free_r+0xf2>
   10876:	orr.w	r3, r1, #1
   1087a:	str	r3, [r5, #4]
   1087c:	str.w	r1, [ip]
   10880:	b.n	10718 <_free_r+0x94>
   10882:	nop
   10884:	.word	0x20001db4
   10888:	.word	0x200021c0
   1088c:	.word	0x20007ac4

00010890 <__ascii_mbtowc>:
   10890:	sub	sp, #8
   10892:	cbz	r1, 108a8 <__ascii_mbtowc+0x18>
   10894:	cbz	r2, 108ae <__ascii_mbtowc+0x1e>
   10896:	cbz	r3, 108b4 <__ascii_mbtowc+0x24>
   10898:	ldrb	r3, [r2, #0]
   1089a:	str	r3, [r1, #0]
   1089c:	ldrb	r2, [r2, #0]
   1089e:	subs	r0, r2, #0
   108a0:	it	ne
   108a2:	movne	r0, #1
   108a4:	add	sp, #8
   108a6:	bx	lr
   108a8:	add	r1, sp, #4
   108aa:	cmp	r2, #0
   108ac:	bne.n	10896 <__ascii_mbtowc+0x6>
   108ae:	mov	r0, r2
   108b0:	add	sp, #8
   108b2:	bx	lr
   108b4:	mvn.w	r0, #1
   108b8:	b.n	108a4 <__ascii_mbtowc+0x14>
   108ba:	nop

000108bc <_Balloc>:
   108bc:	ldr	r3, [r0, #68]	; 0x44
   108be:	push	{r4, r5, r6, lr}
   108c0:	mov	r5, r0
   108c2:	mov	r4, r1
   108c4:	cbz	r3, 108da <_Balloc+0x1e>
   108c6:	ldr.w	r0, [r3, r4, lsl #2]
   108ca:	cbz	r0, 108ee <_Balloc+0x32>
   108cc:	ldr	r2, [r0, #0]
   108ce:	str.w	r2, [r3, r4, lsl #2]
   108d2:	movs	r3, #0
   108d4:	strd	r3, r3, [r0, #12]
   108d8:	pop	{r4, r5, r6, pc}
   108da:	movs	r2, #33	; 0x21
   108dc:	movs	r1, #4
   108de:	bl	12ea0 <_calloc_r>
   108e2:	mov	r3, r0
   108e4:	str	r0, [r5, #68]	; 0x44
   108e6:	cmp	r0, #0
   108e8:	bne.n	108c6 <_Balloc+0xa>
   108ea:	movs	r0, #0
   108ec:	pop	{r4, r5, r6, pc}
   108ee:	movs	r1, #1
   108f0:	lsl.w	r6, r1, r4
   108f4:	adds	r2, r6, #5
   108f6:	lsls	r2, r2, #2
   108f8:	mov	r0, r5
   108fa:	bl	12ea0 <_calloc_r>
   108fe:	cmp	r0, #0
   10900:	beq.n	108ea <_Balloc+0x2e>
   10902:	strd	r4, r6, [r0, #4]
   10906:	b.n	108d2 <_Balloc+0x16>

00010908 <_Bfree>:
   10908:	cbz	r1, 10918 <_Bfree+0x10>
   1090a:	ldr	r3, [r0, #68]	; 0x44
   1090c:	ldr	r2, [r1, #4]
   1090e:	ldr.w	r0, [r3, r2, lsl #2]
   10912:	str	r0, [r1, #0]
   10914:	str.w	r1, [r3, r2, lsl #2]
   10918:	bx	lr
   1091a:	nop

0001091c <__multadd>:
   1091c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10920:	ldr	r6, [r1, #16]
   10922:	mov	r8, r0
   10924:	mov	r7, r1
   10926:	mov	r5, r3
   10928:	add.w	lr, r1, #20
   1092c:	movs	r0, #0
   1092e:	ldr.w	r1, [lr]
   10932:	uxth	r4, r1
   10934:	mla	r3, r2, r4, r5
   10938:	lsrs	r1, r1, #16
   1093a:	mov.w	ip, r3, lsr #16
   1093e:	mla	ip, r2, r1, ip
   10942:	adds	r0, #1
   10944:	uxth	r4, r3
   10946:	add.w	r4, r4, ip, lsl #16
   1094a:	cmp	r6, r0
   1094c:	str.w	r4, [lr], #4
   10950:	mov.w	r5, ip, lsr #16
   10954:	bgt.n	1092e <__multadd+0x12>
   10956:	cbz	r5, 10968 <__multadd+0x4c>
   10958:	ldr	r3, [r7, #8]
   1095a:	cmp	r3, r6
   1095c:	ble.n	1096e <__multadd+0x52>
   1095e:	add.w	r3, r7, r6, lsl #2
   10962:	adds	r6, #1
   10964:	str	r5, [r3, #20]
   10966:	str	r6, [r7, #16]
   10968:	mov	r0, r7
   1096a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1096e:	ldr	r1, [r7, #4]
   10970:	mov	r0, r8
   10972:	adds	r1, #1
   10974:	bl	108bc <_Balloc>
   10978:	mov	r4, r0
   1097a:	cbz	r0, 109aa <__multadd+0x8e>
   1097c:	ldr	r2, [r7, #16]
   1097e:	adds	r2, #2
   10980:	add.w	r1, r7, #12
   10984:	lsls	r2, r2, #2
   10986:	adds	r0, #12
   10988:	bl	b09c <memcpy>
   1098c:	ldr.w	r3, [r8, #68]	; 0x44
   10990:	ldr	r2, [r7, #4]
   10992:	ldr.w	r1, [r3, r2, lsl #2]
   10996:	str	r1, [r7, #0]
   10998:	str.w	r7, [r3, r2, lsl #2]
   1099c:	mov	r7, r4
   1099e:	add.w	r3, r7, r6, lsl #2
   109a2:	adds	r6, #1
   109a4:	str	r5, [r3, #20]
   109a6:	str	r6, [r7, #16]
   109a8:	b.n	10968 <__multadd+0x4c>
   109aa:	ldr	r3, [pc, #12]	; (109b8 <__multadd+0x9c>)
   109ac:	ldr	r0, [pc, #12]	; (109bc <__multadd+0xa0>)
   109ae:	mov	r2, r4
   109b0:	movs	r1, #186	; 0xba
   109b2:	bl	12e60 <__assert_func>
   109b6:	nop
   109b8:	.word	0x20000b68
   109bc:	.word	0x20000b7c

000109c0 <__hi0bits>:
   109c0:	lsrs	r3, r0, #16
   109c2:	lsls	r3, r3, #16
   109c4:	cbnz	r3, 109fc <__hi0bits+0x3c>
   109c6:	lsls	r0, r0, #16
   109c8:	movs	r3, #16
   109ca:	tst.w	r0, #4278190080	; 0xff000000
   109ce:	itt	eq
   109d0:	lsleq	r0, r0, #8
   109d2:	addeq	r3, #8
   109d4:	tst.w	r0, #4026531840	; 0xf0000000
   109d8:	itt	eq
   109da:	lsleq	r0, r0, #4
   109dc:	addeq	r3, #4
   109de:	tst.w	r0, #3221225472	; 0xc0000000
   109e2:	itt	eq
   109e4:	lsleq	r0, r0, #2
   109e6:	addeq	r3, #2
   109e8:	cmp	r0, #0
   109ea:	blt.n	109f8 <__hi0bits+0x38>
   109ec:	tst.w	r0, #1073741824	; 0x40000000
   109f0:	add.w	r3, r3, #1
   109f4:	it	eq
   109f6:	moveq	r3, #32
   109f8:	mov	r0, r3
   109fa:	bx	lr
   109fc:	movs	r3, #0
   109fe:	b.n	109ca <__hi0bits+0xa>

00010a00 <__lo0bits>:
   10a00:	ldr	r3, [r0, #0]
   10a02:	ands.w	r2, r3, #7
   10a06:	beq.n	10a1a <__lo0bits+0x1a>
   10a08:	lsls	r1, r3, #31
   10a0a:	bmi.n	10a4c <__lo0bits+0x4c>
   10a0c:	lsls	r2, r3, #30
   10a0e:	bpl.n	10a56 <__lo0bits+0x56>
   10a10:	lsrs	r3, r3, #1
   10a12:	str	r3, [r0, #0]
   10a14:	movs	r2, #1
   10a16:	mov	r0, r2
   10a18:	bx	lr
   10a1a:	uxth	r1, r3
   10a1c:	cbnz	r1, 10a22 <__lo0bits+0x22>
   10a1e:	lsrs	r3, r3, #16
   10a20:	movs	r2, #16
   10a22:	uxtb	r1, r3
   10a24:	cbnz	r1, 10a2a <__lo0bits+0x2a>
   10a26:	adds	r2, #8
   10a28:	lsrs	r3, r3, #8
   10a2a:	lsls	r1, r3, #28
   10a2c:	itt	eq
   10a2e:	lsreq	r3, r3, #4
   10a30:	addeq	r2, #4
   10a32:	lsls	r1, r3, #30
   10a34:	itt	eq
   10a36:	lsreq	r3, r3, #2
   10a38:	addeq	r2, #2
   10a3a:	lsls	r1, r3, #31
   10a3c:	bmi.n	10a46 <__lo0bits+0x46>
   10a3e:	lsrs	r3, r3, #1
   10a40:	add.w	r2, r2, #1
   10a44:	beq.n	10a52 <__lo0bits+0x52>
   10a46:	str	r3, [r0, #0]
   10a48:	mov	r0, r2
   10a4a:	bx	lr
   10a4c:	movs	r2, #0
   10a4e:	mov	r0, r2
   10a50:	bx	lr
   10a52:	movs	r2, #32
   10a54:	b.n	10a16 <__lo0bits+0x16>
   10a56:	lsrs	r3, r3, #2
   10a58:	movs	r2, #2
   10a5a:	str	r3, [r0, #0]
   10a5c:	mov	r0, r2
   10a5e:	bx	lr

00010a60 <__i2b>:
   10a60:	push	{r3, r4, r5, lr}
   10a62:	ldr	r3, [r0, #68]	; 0x44
   10a64:	mov	r4, r0
   10a66:	mov	r5, r1
   10a68:	cbz	r3, 10a7e <__i2b+0x1e>
   10a6a:	ldr	r0, [r3, #4]
   10a6c:	cbz	r0, 10a9c <__i2b+0x3c>
   10a6e:	ldr	r2, [r0, #0]
   10a70:	str	r2, [r3, #4]
   10a72:	movs	r2, #0
   10a74:	movs	r3, #1
   10a76:	strd	r3, r5, [r0, #16]
   10a7a:	str	r2, [r0, #12]
   10a7c:	pop	{r3, r4, r5, pc}
   10a7e:	movs	r2, #33	; 0x21
   10a80:	movs	r1, #4
   10a82:	bl	12ea0 <_calloc_r>
   10a86:	mov	r3, r0
   10a88:	str	r0, [r4, #68]	; 0x44
   10a8a:	cmp	r0, #0
   10a8c:	bne.n	10a6a <__i2b+0xa>
   10a8e:	ldr	r3, [pc, #36]	; (10ab4 <__i2b+0x54>)
   10a90:	ldr	r0, [pc, #36]	; (10ab8 <__i2b+0x58>)
   10a92:	movs	r2, #0
   10a94:	movw	r1, #325	; 0x145
   10a98:	bl	12e60 <__assert_func>
   10a9c:	movs	r2, #28
   10a9e:	movs	r1, #1
   10aa0:	mov	r0, r4
   10aa2:	bl	12ea0 <_calloc_r>
   10aa6:	cmp	r0, #0
   10aa8:	beq.n	10a8e <__i2b+0x2e>
   10aaa:	movs	r2, #1
   10aac:	movs	r3, #2
   10aae:	strd	r2, r3, [r0, #4]
   10ab2:	b.n	10a72 <__i2b+0x12>
   10ab4:	.word	0x20000b68
   10ab8:	.word	0x20000b7c

00010abc <__multiply>:
   10abc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10ac0:	ldr	r6, [r1, #16]
   10ac2:	ldr	r5, [r2, #16]
   10ac4:	cmp	r6, r5
   10ac6:	sub	sp, #20
   10ac8:	mov	r8, r1
   10aca:	mov	r4, r2
   10acc:	blt.n	10ada <__multiply+0x1e>
   10ace:	mov	r2, r5
   10ad0:	mov	r3, r4
   10ad2:	mov	r5, r6
   10ad4:	mov	r4, r1
   10ad6:	mov	r6, r2
   10ad8:	mov	r8, r3
   10ada:	ldr	r3, [r4, #8]
   10adc:	ldr	r1, [r4, #4]
   10ade:	adds	r7, r5, r6
   10ae0:	cmp	r3, r7
   10ae2:	it	lt
   10ae4:	addlt	r1, #1
   10ae6:	bl	108bc <_Balloc>
   10aea:	str	r0, [sp, #4]
   10aec:	cmp	r0, #0
   10aee:	beq.w	10c00 <__multiply+0x144>
   10af2:	ldr	r3, [sp, #4]
   10af4:	add.w	r9, r3, #20
   10af8:	add.w	sl, r9, r7, lsl #2
   10afc:	cmp	r9, sl
   10afe:	bcs.n	10b0c <__multiply+0x50>
   10b00:	mov	r3, r9
   10b02:	movs	r2, #0
   10b04:	str.w	r2, [r3], #4
   10b08:	cmp	sl, r3
   10b0a:	bhi.n	10b04 <__multiply+0x48>
   10b0c:	add.w	r8, r8, #20
   10b10:	add.w	fp, r8, r6, lsl #2
   10b14:	add.w	r3, r4, #20
   10b18:	cmp	r8, fp
   10b1a:	mov	r2, r3
   10b1c:	add.w	r5, r3, r5, lsl #2
   10b20:	bcs.n	10be2 <__multiply+0x126>
   10b22:	subs	r3, r5, r4
   10b24:	subs	r3, #21
   10b26:	bic.w	r3, r3, #3
   10b2a:	adds	r3, #4
   10b2c:	adds	r4, #21
   10b2e:	cmp	r5, r4
   10b30:	it	cc
   10b32:	movcc	r3, #4
   10b34:	strd	sl, r7, [sp, #8]
   10b38:	mov	ip, r5
   10b3a:	mov	r7, r3
   10b3c:	mov	sl, r2
   10b3e:	b.n	10b4c <__multiply+0x90>
   10b40:	lsrs	r1, r1, #16
   10b42:	bne.n	10b98 <__multiply+0xdc>
   10b44:	cmp	fp, r8
   10b46:	add.w	r9, r9, #4
   10b4a:	bls.n	10bde <__multiply+0x122>
   10b4c:	ldr.w	r1, [r8], #4
   10b50:	uxth	r5, r1
   10b52:	cmp	r5, #0
   10b54:	beq.n	10b40 <__multiply+0x84>
   10b56:	mov	r6, sl
   10b58:	mov	r4, r9
   10b5a:	movs	r3, #0
   10b5c:	ldr.w	r1, [r6], #4
   10b60:	ldr	r2, [r4, #0]
   10b62:	uxth.w	lr, r1
   10b66:	uxth	r0, r2
   10b68:	lsrs	r1, r1, #16
   10b6a:	mla	r0, r5, lr, r0
   10b6e:	lsrs	r2, r2, #16
   10b70:	add	r3, r0
   10b72:	mla	r2, r5, r1, r2
   10b76:	add.w	r2, r2, r3, lsr #16
   10b7a:	uxth	r3, r3
   10b7c:	orr.w	r3, r3, r2, lsl #16
   10b80:	cmp	ip, r6
   10b82:	str.w	r3, [r4], #4
   10b86:	mov.w	r3, r2, lsr #16
   10b8a:	bhi.n	10b5c <__multiply+0xa0>
   10b8c:	str.w	r3, [r9, r7]
   10b90:	ldr.w	r1, [r8, #-4]
   10b94:	lsrs	r1, r1, #16
   10b96:	beq.n	10b44 <__multiply+0x88>
   10b98:	ldr.w	r3, [r9]
   10b9c:	mov	r0, sl
   10b9e:	mov	r2, r3
   10ba0:	mov	r4, r9
   10ba2:	movs	r6, #0
   10ba4:	ldrh	r5, [r0, #0]
   10ba6:	lsrs	r2, r2, #16
   10ba8:	mla	r2, r1, r5, r2
   10bac:	add	r6, r2
   10bae:	uxth	r3, r3
   10bb0:	orr.w	r3, r3, r6, lsl #16
   10bb4:	str.w	r3, [r4], #4
   10bb8:	ldr.w	r5, [r0], #4
   10bbc:	ldr	r2, [r4, #0]
   10bbe:	lsrs	r5, r5, #16
   10bc0:	uxth	r3, r2
   10bc2:	mla	r3, r1, r5, r3
   10bc6:	add.w	r3, r3, r6, lsr #16
   10bca:	cmp	ip, r0
   10bcc:	mov.w	r6, r3, lsr #16
   10bd0:	bhi.n	10ba4 <__multiply+0xe8>
   10bd2:	cmp	fp, r8
   10bd4:	str.w	r3, [r9, r7]
   10bd8:	add.w	r9, r9, #4
   10bdc:	bhi.n	10b4c <__multiply+0x90>
   10bde:	ldrd	sl, r7, [sp, #8]
   10be2:	cmp	r7, #0
   10be4:	bgt.n	10bec <__multiply+0x130>
   10be6:	b.n	10bf4 <__multiply+0x138>
   10be8:	subs	r7, #1
   10bea:	beq.n	10bf4 <__multiply+0x138>
   10bec:	ldr.w	r3, [sl, #-4]!
   10bf0:	cmp	r3, #0
   10bf2:	beq.n	10be8 <__multiply+0x12c>
   10bf4:	ldr	r3, [sp, #4]
   10bf6:	mov	r0, r3
   10bf8:	str	r7, [r3, #16]
   10bfa:	add	sp, #20
   10bfc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10c00:	ldr	r3, [pc, #12]	; (10c10 <__multiply+0x154>)
   10c02:	ldr	r0, [pc, #16]	; (10c14 <__multiply+0x158>)
   10c04:	ldr	r2, [sp, #4]
   10c06:	mov.w	r1, #354	; 0x162
   10c0a:	bl	12e60 <__assert_func>
   10c0e:	nop
   10c10:	.word	0x20000b68
   10c14:	.word	0x20000b7c

00010c18 <__pow5mult>:
   10c18:	ands.w	r3, r2, #3
   10c1c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10c20:	mov	r4, r2
   10c22:	mov	r6, r0
   10c24:	bne.n	10c8c <__pow5mult+0x74>
   10c26:	mov	r5, r1
   10c28:	asrs	r4, r4, #2
   10c2a:	beq.n	10c6e <__pow5mult+0x56>
   10c2c:	ldr.w	r8, [r6, #64]	; 0x40
   10c30:	cmp.w	r8, #0
   10c34:	beq.n	10c9e <__pow5mult+0x86>
   10c36:	lsls	r3, r4, #31
   10c38:	mov.w	r7, #0
   10c3c:	bmi.n	10c4e <__pow5mult+0x36>
   10c3e:	asrs	r4, r4, #1
   10c40:	beq.n	10c6e <__pow5mult+0x56>
   10c42:	ldr.w	r0, [r8]
   10c46:	cbz	r0, 10c74 <__pow5mult+0x5c>
   10c48:	mov	r8, r0
   10c4a:	lsls	r3, r4, #31
   10c4c:	bpl.n	10c3e <__pow5mult+0x26>
   10c4e:	mov	r2, r8
   10c50:	mov	r1, r5
   10c52:	mov	r0, r6
   10c54:	bl	10abc <__multiply>
   10c58:	cbz	r5, 10c88 <__pow5mult+0x70>
   10c5a:	ldr	r1, [r5, #4]
   10c5c:	ldr	r3, [r6, #68]	; 0x44
   10c5e:	asrs	r4, r4, #1
   10c60:	ldr.w	r2, [r3, r1, lsl #2]
   10c64:	str	r2, [r5, #0]
   10c66:	str.w	r5, [r3, r1, lsl #2]
   10c6a:	mov	r5, r0
   10c6c:	bne.n	10c42 <__pow5mult+0x2a>
   10c6e:	mov	r0, r5
   10c70:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10c74:	mov	r2, r8
   10c76:	mov	r1, r8
   10c78:	mov	r0, r6
   10c7a:	bl	10abc <__multiply>
   10c7e:	str.w	r0, [r8]
   10c82:	str	r7, [r0, #0]
   10c84:	mov	r8, r0
   10c86:	b.n	10c4a <__pow5mult+0x32>
   10c88:	mov	r5, r0
   10c8a:	b.n	10c3e <__pow5mult+0x26>
   10c8c:	subs	r3, #1
   10c8e:	ldr	r2, [pc, #60]	; (10ccc <__pow5mult+0xb4>)
   10c90:	ldr.w	r2, [r2, r3, lsl #2]
   10c94:	movs	r3, #0
   10c96:	bl	1091c <__multadd>
   10c9a:	mov	r5, r0
   10c9c:	b.n	10c28 <__pow5mult+0x10>
   10c9e:	movs	r1, #1
   10ca0:	mov	r0, r6
   10ca2:	bl	108bc <_Balloc>
   10ca6:	mov	r8, r0
   10ca8:	cbz	r0, 10cbc <__pow5mult+0xa4>
   10caa:	movs	r3, #1
   10cac:	movw	r2, #625	; 0x271
   10cb0:	strd	r3, r2, [r0, #16]
   10cb4:	movs	r3, #0
   10cb6:	str	r0, [r6, #64]	; 0x40
   10cb8:	str	r3, [r0, #0]
   10cba:	b.n	10c36 <__pow5mult+0x1e>
   10cbc:	ldr	r3, [pc, #16]	; (10cd0 <__pow5mult+0xb8>)
   10cbe:	ldr	r0, [pc, #20]	; (10cd4 <__pow5mult+0xbc>)
   10cc0:	mov	r2, r8
   10cc2:	movw	r1, #325	; 0x145
   10cc6:	bl	12e60 <__assert_func>
   10cca:	nop
   10ccc:	.word	0x2000112c
   10cd0:	.word	0x20000b68
   10cd4:	.word	0x20000b7c

00010cd8 <__lshift>:
   10cd8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10cdc:	mov	r5, r1
   10cde:	mov	r4, r2
   10ce0:	ldr	r7, [r5, #16]
   10ce2:	ldr	r3, [r5, #8]
   10ce4:	ldr	r1, [r1, #4]
   10ce6:	add.w	r7, r7, r2, asr #5
   10cea:	adds	r6, r7, #1
   10cec:	cmp	r6, r3
   10cee:	mov	r8, r0
   10cf0:	mov.w	r9, r2, asr #5
   10cf4:	ble.n	10d00 <__lshift+0x28>
   10cf6:	lsls	r3, r3, #1
   10cf8:	cmp	r6, r3
   10cfa:	add.w	r1, r1, #1
   10cfe:	bgt.n	10cf6 <__lshift+0x1e>
   10d00:	mov	r0, r8
   10d02:	bl	108bc <_Balloc>
   10d06:	mov	ip, r0
   10d08:	cmp	r0, #0
   10d0a:	beq.n	10db2 <__lshift+0xda>
   10d0c:	cmp.w	r9, #0
   10d10:	add.w	r2, r0, #20
   10d14:	ble.n	10d34 <__lshift+0x5c>
   10d16:	add.w	r1, r9, #5
   10d1a:	mov.w	lr, r1, lsl #2
   10d1e:	mov	r3, r2
   10d20:	add.w	r1, r0, r1, lsl #2
   10d24:	movs	r0, #0
   10d26:	str.w	r0, [r3], #4
   10d2a:	cmp	r3, r1
   10d2c:	bne.n	10d26 <__lshift+0x4e>
   10d2e:	sub.w	r3, lr, #20
   10d32:	add	r2, r3
   10d34:	ldr	r1, [r5, #16]
   10d36:	add.w	r3, r5, #20
   10d3a:	ands.w	lr, r4, #31
   10d3e:	add.w	r1, r3, r1, lsl #2
   10d42:	beq.n	10da2 <__lshift+0xca>
   10d44:	rsb	r9, lr, #32
   10d48:	mov	r0, r2
   10d4a:	mov.w	sl, #0
   10d4e:	ldr	r4, [r3, #0]
   10d50:	lsl.w	r4, r4, lr
   10d54:	orr.w	r4, r4, sl
   10d58:	str.w	r4, [r0], #4
   10d5c:	ldr.w	r4, [r3], #4
   10d60:	cmp	r1, r3
   10d62:	lsr.w	sl, r4, r9
   10d66:	bhi.n	10d4e <__lshift+0x76>
   10d68:	subs	r3, r1, r5
   10d6a:	subs	r3, #21
   10d6c:	bic.w	r3, r3, #3
   10d70:	adds	r3, #4
   10d72:	add.w	r0, r5, #21
   10d76:	cmp	r1, r0
   10d78:	it	cc
   10d7a:	movcc	r3, #4
   10d7c:	cmp.w	sl, #0
   10d80:	it	ne
   10d82:	movne	r7, r6
   10d84:	str.w	sl, [r2, r3]
   10d88:	ldr.w	r3, [r8, #68]	; 0x44
   10d8c:	ldr	r2, [r5, #4]
   10d8e:	str.w	r7, [ip, #16]
   10d92:	ldr.w	r1, [r3, r2, lsl #2]
   10d96:	str	r1, [r5, #0]
   10d98:	mov	r0, ip
   10d9a:	str.w	r5, [r3, r2, lsl #2]
   10d9e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10da2:	subs	r2, #4
   10da4:	ldr.w	r0, [r3], #4
   10da8:	str.w	r0, [r2, #4]!
   10dac:	cmp	r1, r3
   10dae:	bhi.n	10da4 <__lshift+0xcc>
   10db0:	b.n	10d88 <__lshift+0xb0>
   10db2:	ldr	r3, [pc, #12]	; (10dc0 <__lshift+0xe8>)
   10db4:	ldr	r0, [pc, #12]	; (10dc4 <__lshift+0xec>)
   10db6:	mov	r2, ip
   10db8:	mov.w	r1, #478	; 0x1de
   10dbc:	bl	12e60 <__assert_func>
   10dc0:	.word	0x20000b68
   10dc4:	.word	0x20000b7c

00010dc8 <__mcmp>:
   10dc8:	ldr	r3, [r1, #16]
   10dca:	mov	ip, r0
   10dcc:	ldr	r0, [r0, #16]
   10dce:	subs	r0, r0, r3
   10dd0:	bne.n	10e00 <__mcmp+0x38>
   10dd2:	add.w	ip, ip, #20
   10dd6:	adds	r1, #20
   10dd8:	add.w	r2, ip, r3, lsl #2
   10ddc:	push	{r4}
   10dde:	add.w	r3, r1, r3, lsl #2
   10de2:	b.n	10de8 <__mcmp+0x20>
   10de4:	cmp	ip, r2
   10de6:	bcs.n	10dfa <__mcmp+0x32>
   10de8:	ldr.w	r4, [r2, #-4]!
   10dec:	ldr.w	r1, [r3, #-4]!
   10df0:	cmp	r4, r1
   10df2:	beq.n	10de4 <__mcmp+0x1c>
   10df4:	bcs.n	10e02 <__mcmp+0x3a>
   10df6:	mov.w	r0, #4294967295
   10dfa:	ldr.w	r4, [sp], #4
   10dfe:	bx	lr
   10e00:	bx	lr
   10e02:	movs	r0, #1
   10e04:	ldr.w	r4, [sp], #4
   10e08:	bx	lr
   10e0a:	nop

00010e0c <__mdiff>:
   10e0c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10e10:	ldr	r7, [r1, #16]
   10e12:	ldr	r3, [r2, #16]
   10e14:	subs	r7, r7, r3
   10e16:	cmp	r7, #0
   10e18:	mov	r6, r1
   10e1a:	mov	r8, r2
   10e1c:	bne.n	10f1e <__mdiff+0x112>
   10e1e:	add.w	r5, r1, #20
   10e22:	adds	r2, #20
   10e24:	add.w	r2, r2, r3, lsl #2
   10e28:	add.w	r3, r5, r3, lsl #2
   10e2c:	b.n	10e32 <__mdiff+0x26>
   10e2e:	cmp	r5, r3
   10e30:	bcs.n	10f24 <__mdiff+0x118>
   10e32:	ldr.w	r1, [r3, #-4]!
   10e36:	ldr.w	r4, [r2, #-4]!
   10e3a:	cmp	r1, r4
   10e3c:	beq.n	10e2e <__mdiff+0x22>
   10e3e:	bcc.n	10f14 <__mdiff+0x108>
   10e40:	ldr	r1, [r6, #4]
   10e42:	bl	108bc <_Balloc>
   10e46:	mov	r9, r0
   10e48:	cmp	r0, #0
   10e4a:	beq.n	10f3c <__mdiff+0x130>
   10e4c:	ldr	r5, [r6, #16]
   10e4e:	ldr.w	r2, [r8, #16]
   10e52:	str	r7, [r0, #12]
   10e54:	add.w	lr, r8, #20
   10e58:	add.w	r0, r6, #20
   10e5c:	add.w	sl, r9, #20
   10e60:	add.w	r1, r6, #16
   10e64:	add.w	r2, lr, r2, lsl #2
   10e68:	add.w	r7, r0, r5, lsl #2
   10e6c:	mov	r6, sl
   10e6e:	mov.w	ip, #0
   10e72:	ldr.w	r4, [lr], #4
   10e76:	ldr.w	fp, [r1, #4]!
   10e7a:	uxth	r3, r4
   10e7c:	uxtah	ip, ip, fp
   10e80:	sub.w	r3, ip, r3
   10e84:	mov.w	ip, r4, lsr #16
   10e88:	rsb	ip, ip, fp, lsr #16
   10e8c:	add.w	ip, ip, r3, asr #16
   10e90:	uxth	r3, r3
   10e92:	orr.w	r3, r3, ip, lsl #16
   10e96:	cmp	r2, lr
   10e98:	str.w	r3, [r6], #4
   10e9c:	mov.w	ip, ip, asr #16
   10ea0:	bhi.n	10e72 <__mdiff+0x66>
   10ea2:	sub.w	r1, r2, r8
   10ea6:	subs	r1, #21
   10ea8:	add.w	r8, r8, #21
   10eac:	cmp	r2, r8
   10eae:	bic.w	r4, r1, #3
   10eb2:	add.w	r4, r4, #4
   10eb6:	it	cc
   10eb8:	movcc	r4, #4
   10eba:	add	r0, r4
   10ebc:	bic.w	r2, r1, #3
   10ec0:	it	cc
   10ec2:	movcc	r2, #0
   10ec4:	cmp	r7, r0
   10ec6:	add	r2, sl
   10ec8:	add	r4, sl
   10eca:	bls.n	10efe <__mdiff+0xf2>
   10ecc:	mov	r6, r4
   10ece:	mov	r1, r0
   10ed0:	ldr.w	r3, [r1], #4
   10ed4:	uxtah	ip, ip, r3
   10ed8:	mov.w	r2, ip, asr #16
   10edc:	add.w	r2, r2, r3, lsr #16
   10ee0:	uxth.w	ip, ip
   10ee4:	orr.w	r3, ip, r2, lsl #16
   10ee8:	cmp	r7, r1
   10eea:	str.w	r3, [r6], #4
   10eee:	mov.w	ip, r2, asr #16
   10ef2:	bhi.n	10ed0 <__mdiff+0xc4>
   10ef4:	subs	r7, #1
   10ef6:	subs	r7, r7, r0
   10ef8:	bic.w	r7, r7, #3
   10efc:	adds	r2, r4, r7
   10efe:	cbnz	r3, 10f0a <__mdiff+0xfe>
   10f00:	ldr.w	r3, [r2, #-4]!
   10f04:	subs	r5, #1
   10f06:	cmp	r3, #0
   10f08:	beq.n	10f00 <__mdiff+0xf4>
   10f0a:	str.w	r5, [r9, #16]
   10f0e:	mov	r0, r9
   10f10:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10f14:	mov	r3, r6
   10f16:	movs	r7, #1
   10f18:	mov	r6, r8
   10f1a:	mov	r8, r3
   10f1c:	b.n	10e40 <__mdiff+0x34>
   10f1e:	blt.n	10f14 <__mdiff+0x108>
   10f20:	movs	r7, #0
   10f22:	b.n	10e40 <__mdiff+0x34>
   10f24:	movs	r1, #0
   10f26:	bl	108bc <_Balloc>
   10f2a:	mov	r9, r0
   10f2c:	cbz	r0, 10f4a <__mdiff+0x13e>
   10f2e:	movs	r2, #1
   10f30:	movs	r3, #0
   10f32:	strd	r2, r3, [r9, #16]
   10f36:	mov	r0, r9
   10f38:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10f3c:	ldr	r3, [pc, #24]	; (10f58 <__mdiff+0x14c>)
   10f3e:	ldr	r0, [pc, #28]	; (10f5c <__mdiff+0x150>)
   10f40:	mov	r2, r9
   10f42:	movw	r1, #581	; 0x245
   10f46:	bl	12e60 <__assert_func>
   10f4a:	ldr	r3, [pc, #12]	; (10f58 <__mdiff+0x14c>)
   10f4c:	ldr	r0, [pc, #12]	; (10f5c <__mdiff+0x150>)
   10f4e:	mov	r2, r9
   10f50:	movw	r1, #567	; 0x237
   10f54:	bl	12e60 <__assert_func>
   10f58:	.word	0x20000b68
   10f5c:	.word	0x20000b7c

00010f60 <__d2b>:
   10f60:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   10f64:	mov	r8, r1
   10f66:	sub	sp, #12
   10f68:	movs	r1, #1
   10f6a:	vmov	r6, r7, d0
   10f6e:	mov	r5, r2
   10f70:	bl	108bc <_Balloc>
   10f74:	mov	r4, r0
   10f76:	cmp	r0, #0
   10f78:	beq.n	1101e <__d2b+0xbe>
   10f7a:	ubfx	r9, r7, #20, #11
   10f7e:	ubfx	r3, r7, #0, #20
   10f82:	cmp.w	r9, #0
   10f86:	beq.n	10f8c <__d2b+0x2c>
   10f88:	orr.w	r3, r3, #1048576	; 0x100000
   10f8c:	cmp	r6, #0
   10f8e:	str	r3, [sp, #4]
   10f90:	bne.n	10fc4 <__d2b+0x64>
   10f92:	add	r0, sp, #4
   10f94:	bl	10a00 <__lo0bits>
   10f98:	ldr	r2, [sp, #4]
   10f9a:	str	r2, [r4, #20]
   10f9c:	movs	r2, #1
   10f9e:	add.w	r3, r0, #32
   10fa2:	str	r2, [r4, #16]
   10fa4:	cmp.w	r9, #0
   10fa8:	beq.n	10ff6 <__d2b+0x96>
   10faa:	subw	r9, r9, #1075	; 0x433
   10fae:	add.w	r2, r9, r3
   10fb2:	mov	r0, r4
   10fb4:	rsb	r3, r3, #53	; 0x35
   10fb8:	str.w	r2, [r8]
   10fbc:	str	r3, [r5, #0]
   10fbe:	add	sp, #12
   10fc0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   10fc4:	mov	r0, sp
   10fc6:	str	r6, [sp, #0]
   10fc8:	bl	10a00 <__lo0bits>
   10fcc:	mov	r3, r0
   10fce:	cbz	r0, 11016 <__d2b+0xb6>
   10fd0:	ldrd	r0, r2, [sp]
   10fd4:	rsb	r1, r3, #32
   10fd8:	lsl.w	r1, r2, r1
   10fdc:	orrs	r1, r0
   10fde:	lsrs	r2, r3
   10fe0:	str	r1, [r4, #20]
   10fe2:	str	r2, [sp, #4]
   10fe4:	cmp	r2, #0
   10fe6:	str	r2, [r4, #24]
   10fe8:	ite	ne
   10fea:	movne	r2, #2
   10fec:	moveq	r2, #1
   10fee:	str	r2, [r4, #16]
   10ff0:	cmp.w	r9, #0
   10ff4:	bne.n	10faa <__d2b+0x4a>
   10ff6:	subw	r3, r3, #1074	; 0x432
   10ffa:	str.w	r3, [r8]
   10ffe:	add.w	r3, r4, r2, lsl #2
   11002:	ldr	r0, [r3, #16]
   11004:	bl	109c0 <__hi0bits>
   11008:	rsb	r3, r0, r2, lsl #5
   1100c:	mov	r0, r4
   1100e:	str	r3, [r5, #0]
   11010:	add	sp, #12
   11012:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   11016:	ldr	r2, [sp, #0]
   11018:	str	r2, [r4, #20]
   1101a:	ldr	r2, [sp, #4]
   1101c:	b.n	10fe4 <__d2b+0x84>
   1101e:	ldr	r3, [pc, #12]	; (1102c <__d2b+0xcc>)
   11020:	ldr	r0, [pc, #12]	; (11030 <__d2b+0xd0>)
   11022:	mov	r2, r4
   11024:	movw	r1, #783	; 0x30f
   11028:	bl	12e60 <__assert_func>
   1102c:	.word	0x20000b68
   11030:	.word	0x20000b7c

00011034 <__ascii_wctomb>:
   11034:	cbz	r1, 1104a <__ascii_wctomb+0x16>
   11036:	cmp	r2, #255	; 0xff
   11038:	bhi.n	11040 <__ascii_wctomb+0xc>
   1103a:	strb	r2, [r1, #0]
   1103c:	movs	r0, #1
   1103e:	bx	lr
   11040:	movs	r3, #138	; 0x8a
   11042:	str	r3, [r0, #0]
   11044:	mov.w	r0, #4294967295
   11048:	bx	lr
   1104a:	mov	r0, r1
   1104c:	bx	lr
   1104e:	nop

00011050 <_svfprintf_r>:
   11050:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11054:	vpush	{d8-d11}
   11058:	sub	sp, #324	; 0x144
   1105a:	mov	r4, r1
   1105c:	vmov	s22, r1
   11060:	mov	r8, r2
   11062:	str	r3, [sp, #32]
   11064:	mov	fp, r0
   11066:	bl	12de0 <_localeconv_r>
   1106a:	ldr	r3, [r0, #0]
   1106c:	str	r3, [sp, #72]	; 0x48
   1106e:	mov	r0, r3
   11070:	bl	10480 <strlen>
   11074:	add	r7, sp, #128	; 0x80
   11076:	str	r0, [sp, #64]	; 0x40
   11078:	movs	r2, #8
   1107a:	movs	r1, #0
   1107c:	mov	r0, r7
   1107e:	bl	10104 <memset>
   11082:	ldrh	r3, [r4, #12]
   11084:	lsls	r3, r3, #24
   11086:	bpl.n	11090 <_svfprintf_r+0x40>
   11088:	ldr	r3, [r4, #16]
   1108a:	cmp	r3, #0
   1108c:	beq.w	11f3a <_svfprintf_r+0xeea>
   11090:	movs	r3, #0
   11092:	vldr	d8, [pc, #524]	; 112a0 <_svfprintf_r+0x250>
   11096:	vldr	d9, [pc, #528]	; 112a8 <_svfprintf_r+0x258>
   1109a:	strd	r3, r3, [sp, #148]	; 0x94
   1109e:	strd	r3, r3, [sp, #76]	; 0x4c
   110a2:	strd	r3, r3, [sp, #84]	; 0x54
   110a6:	add	r2, sp, #156	; 0x9c
   110a8:	str	r3, [sp, #56]	; 0x38
   110aa:	str	r2, [sp, #144]	; 0x90
   110ac:	mov	sl, r2
   110ae:	str	r3, [sp, #68]	; 0x44
   110b0:	str	r3, [sp, #16]
   110b2:	mov	r4, r8
   110b4:	mov	r9, r4
   110b6:	ldr	r3, [pc, #504]	; (112b0 <_svfprintf_r+0x260>)
   110b8:	ldr.w	r5, [r3, #228]	; 0xe4
   110bc:	bl	10298 <__locale_mb_cur_max>
   110c0:	mov	r2, r9
   110c2:	mov	r3, r0
   110c4:	add	r1, sp, #112	; 0x70
   110c6:	str	r7, [sp, #0]
   110c8:	mov	r0, fp
   110ca:	blx	r5
   110cc:	cmp	r0, #0
   110ce:	beq.w	11232 <_svfprintf_r+0x1e2>
   110d2:	blt.w	11222 <_svfprintf_r+0x1d2>
   110d6:	ldr	r2, [sp, #112]	; 0x70
   110d8:	cmp	r2, #37	; 0x25
   110da:	mov	r3, r0
   110dc:	beq.n	110e2 <_svfprintf_r+0x92>
   110de:	add	r9, r3
   110e0:	b.n	110b6 <_svfprintf_r+0x66>
   110e2:	subs.w	r5, r9, r4
   110e6:	mov	r6, r0
   110e8:	bne.w	1123a <_svfprintf_r+0x1ea>
   110ec:	movs	r3, #0
   110ee:	mov.w	r2, #4294967295
   110f2:	strb.w	r3, [sp, #103]	; 0x67
   110f6:	mov	r8, r3
   110f8:	str	r3, [sp, #24]
   110fa:	add.w	r9, r9, #1
   110fe:	ldrb.w	r3, [r9]
   11102:	str	r2, [sp, #12]
   11104:	movs	r5, #43	; 0x2b
   11106:	movs	r6, #32
   11108:	add.w	r9, r9, #1
   1110c:	sub.w	r2, r3, #32
   11110:	cmp	r2, #90	; 0x5a
   11112:	bhi.w	112b4 <_svfprintf_r+0x264>
   11116:	tbh	[pc, r2, lsl #1]
   1111a:	.short	0x02e8
   1111c:	.word	0x00cd00cd
   11120:	.word	0x00cd02e3
   11124:	.word	0x00cd00cd
   11128:	.word	0x00cd006a
   1112c:	.word	0x020500cd
   11130:	.word	0x00cd0284
   11134:	.word	0x02c90210
   11138:	.word	0x02bd00cd
   1113c:	.word	0x005b005b
   11140:	.word	0x005b005b
   11144:	.word	0x005b005b
   11148:	.word	0x005b005b
   1114c:	.word	0x00cd005b
   11150:	.word	0x00cd00cd
   11154:	.word	0x00cd00cd
   11158:	.word	0x00cd00cd
   1115c:	.word	0x00cd0153
   11160:	.word	0x021a0183
   11164:	.word	0x01530153
   11168:	.word	0x00cd0153
   1116c:	.word	0x00cd00cd
   11170:	.word	0x021500cd
   11174:	.word	0x00cd00cd
   11178:	.word	0x00cd0296
   1117c:	.word	0x00cd00cd
   11180:	.word	0x00cd01ab
   11184:	.word	0x00cd02aa
   11188:	.word	0x06e300cd
   1118c:	.word	0x00cd00cd
   11190:	.word	0x00cd00cd
   11194:	.word	0x00cd00cd
   11198:	.word	0x00cd00cd
   1119c:	.word	0x00cd0153
   111a0:	.word	0x01de0183
   111a4:	.word	0x01530153
   111a8:	.word	0x02770153
   111ac:	.word	0x007f01de
   111b0:	.word	0x028900cd
   111b4:	.word	0x025f00cd
   111b8:	.word	0x022f06e0
   111bc:	.word	0x00cd007f
   111c0:	.word	0x007c01ab
   111c4:	.word	0x00cd06b8
   111c8:	.word	0x06bd00cd
   111cc:	.word	0x007c00cd
   111d0:	sub.w	r2, r3, #48	; 0x30
   111d4:	movs	r1, #0
   111d6:	ldrb.w	r3, [r9], #1
   111da:	add.w	r1, r1, r1, lsl #2
   111de:	add.w	r1, r2, r1, lsl #1
   111e2:	sub.w	r2, r3, #48	; 0x30
   111e6:	cmp	r2, #9
   111e8:	bls.n	111d6 <_svfprintf_r+0x186>
   111ea:	str	r1, [sp, #24]
   111ec:	b.n	1110c <_svfprintf_r+0xbc>
   111ee:	mov	r0, fp
   111f0:	bl	12de0 <_localeconv_r>
   111f4:	ldr	r3, [r0, #4]
   111f6:	str	r3, [sp, #84]	; 0x54
   111f8:	mov	r0, r3
   111fa:	bl	10480 <strlen>
   111fe:	str	r0, [sp, #88]	; 0x58
   11200:	mov	r0, fp
   11202:	bl	12de0 <_localeconv_r>
   11206:	ldr	r3, [r0, #8]
   11208:	str	r3, [sp, #76]	; 0x4c
   1120a:	ldr	r3, [sp, #88]	; 0x58
   1120c:	cmp	r3, #0
   1120e:	bne.w	11e6c <_svfprintf_r+0xe1c>
   11212:	ldrb.w	r3, [r9]
   11216:	b.n	11108 <_svfprintf_r+0xb8>
   11218:	ldrb.w	r3, [r9]
   1121c:	orr.w	r8, r8, #32
   11220:	b.n	11108 <_svfprintf_r+0xb8>
   11222:	movs	r2, #8
   11224:	movs	r1, #0
   11226:	mov	r0, r7
   11228:	bl	10104 <memset>
   1122c:	movs	r3, #1
   1122e:	add	r9, r3
   11230:	b.n	110b6 <_svfprintf_r+0x66>
   11232:	subs.w	r5, r9, r4
   11236:	mov	r6, r0
   11238:	beq.n	1125e <_svfprintf_r+0x20e>
   1123a:	ldr	r3, [sp, #152]	; 0x98
   1123c:	add	r3, r5
   1123e:	str	r3, [sp, #152]	; 0x98
   11240:	ldr	r3, [sp, #148]	; 0x94
   11242:	adds	r3, #1
   11244:	cmp	r3, #7
   11246:	strd	r4, r5, [sl]
   1124a:	str	r3, [sp, #148]	; 0x94
   1124c:	bgt.n	11288 <_svfprintf_r+0x238>
   1124e:	add.w	sl, sl, #8
   11252:	ldr	r3, [sp, #16]
   11254:	add	r3, r5
   11256:	str	r3, [sp, #16]
   11258:	cmp	r6, #0
   1125a:	bne.w	110ec <_svfprintf_r+0x9c>
   1125e:	ldr	r3, [sp, #152]	; 0x98
   11260:	cmp	r3, #0
   11262:	bne.w	1267c <_svfprintf_r+0x162c>
   11266:	vmov	r3, s22
   1126a:	ldrsh.w	r3, [r3, #12]
   1126e:	tst.w	r3, #64	; 0x40
   11272:	ldr	r3, [sp, #16]
   11274:	it	ne
   11276:	movne.w	r3, #4294967295
   1127a:	str	r3, [sp, #16]
   1127c:	ldr	r0, [sp, #16]
   1127e:	add	sp, #324	; 0x144
   11280:	vpop	{d8-d11}
   11284:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11288:	vmov	r1, s22
   1128c:	add	r2, sp, #144	; 0x90
   1128e:	mov	r0, fp
   11290:	bl	13db8 <__ssprint_r>
   11294:	cmp	r0, #0
   11296:	bne.n	11266 <_svfprintf_r+0x216>
   11298:	add.w	sl, sp, #156	; 0x9c
   1129c:	b.n	11252 <_svfprintf_r+0x202>
   1129e:	nop
	...
   112a8:	.word	0xffffffff
   112ac:	.word	0x7fefffff
   112b0:	.word	0x20001c48
   112b4:	str	r3, [sp, #44]	; 0x2c
   112b6:	cmp	r3, #0
   112b8:	beq.n	1125e <_svfprintf_r+0x20e>
   112ba:	movs	r1, #0
   112bc:	strd	r1, r1, [sp, #48]	; 0x30
   112c0:	strb.w	r3, [sp, #220]	; 0xdc
   112c4:	movs	r3, #1
   112c6:	strb.w	r1, [sp, #103]	; 0x67
   112ca:	str	r3, [sp, #8]
   112cc:	str	r1, [sp, #28]
   112ce:	str	r3, [sp, #20]
   112d0:	str	r1, [sp, #12]
   112d2:	str	r1, [sp, #60]	; 0x3c
   112d4:	add	r4, sp, #220	; 0xdc
   112d6:	ands.w	r3, r8, #2
   112da:	str	r3, [sp, #36]	; 0x24
   112dc:	beq.n	112e4 <_svfprintf_r+0x294>
   112de:	ldr	r3, [sp, #8]
   112e0:	adds	r3, #2
   112e2:	str	r3, [sp, #8]
   112e4:	ands.w	r3, r8, #132	; 0x84
   112e8:	str	r3, [sp, #40]	; 0x28
   112ea:	bne.n	112f8 <_svfprintf_r+0x2a8>
   112ec:	ldr	r3, [sp, #24]
   112ee:	ldr	r2, [sp, #8]
   112f0:	subs	r5, r3, r2
   112f2:	cmp	r5, #0
   112f4:	bgt.w	119ca <_svfprintf_r+0x97a>
   112f8:	ldr	r2, [sp, #152]	; 0x98
   112fa:	cbz	r1, 11320 <_svfprintf_r+0x2d0>
   112fc:	ldr	r1, [sp, #148]	; 0x94
   112fe:	add.w	r0, sp, #103	; 0x67
   11302:	adds	r1, #1
   11304:	adds	r2, #1
   11306:	str.w	r0, [sl]
   1130a:	cmp	r1, #7
   1130c:	mov.w	r0, #1
   11310:	str	r2, [sp, #152]	; 0x98
   11312:	str	r1, [sp, #148]	; 0x94
   11314:	str.w	r0, [sl, #4]
   11318:	bgt.w	11a60 <_svfprintf_r+0xa10>
   1131c:	add.w	sl, sl, #8
   11320:	ldr	r3, [sp, #36]	; 0x24
   11322:	cbz	r3, 11346 <_svfprintf_r+0x2f6>
   11324:	ldr	r3, [sp, #148]	; 0x94
   11326:	add	r1, sp, #104	; 0x68
   11328:	adds	r3, #1
   1132a:	adds	r2, #2
   1132c:	str.w	r1, [sl]
   11330:	cmp	r3, #7
   11332:	mov.w	r1, #2
   11336:	str	r2, [sp, #152]	; 0x98
   11338:	str	r3, [sp, #148]	; 0x94
   1133a:	str.w	r1, [sl, #4]
   1133e:	bgt.w	11a88 <_svfprintf_r+0xa38>
   11342:	add.w	sl, sl, #8
   11346:	ldr	r3, [sp, #40]	; 0x28
   11348:	cmp	r3, #128	; 0x80
   1134a:	beq.w	11826 <_svfprintf_r+0x7d6>
   1134e:	ldr	r3, [sp, #12]
   11350:	ldr	r1, [sp, #20]
   11352:	subs	r5, r3, r1
   11354:	cmp	r5, #0
   11356:	bgt.w	118a4 <_svfprintf_r+0x854>
   1135a:	tst.w	r8, #256	; 0x100
   1135e:	bne.w	1177c <_svfprintf_r+0x72c>
   11362:	ldr	r3, [sp, #20]
   11364:	str.w	r3, [sl, #4]
   11368:	add	r2, r3
   1136a:	ldr	r3, [sp, #148]	; 0x94
   1136c:	str.w	r4, [sl]
   11370:	adds	r3, #1
   11372:	cmp	r3, #7
   11374:	str	r2, [sp, #152]	; 0x98
   11376:	str	r3, [sp, #148]	; 0x94
   11378:	bgt.w	119b2 <_svfprintf_r+0x962>
   1137c:	add.w	sl, sl, #8
   11380:	tst.w	r8, #4
   11384:	beq.n	11392 <_svfprintf_r+0x342>
   11386:	ldr	r3, [sp, #24]
   11388:	ldr	r1, [sp, #8]
   1138a:	subs	r4, r3, r1
   1138c:	cmp	r4, #0
   1138e:	bgt.w	11aa2 <_svfprintf_r+0xa52>
   11392:	ldr	r3, [sp, #16]
   11394:	ldr	r1, [sp, #24]
   11396:	ldr	r0, [sp, #8]
   11398:	cmp	r1, r0
   1139a:	ite	ge
   1139c:	addge	r3, r3, r1
   1139e:	addlt	r3, r3, r0
   113a0:	str	r3, [sp, #16]
   113a2:	cmp	r2, #0
   113a4:	bne.w	11908 <_svfprintf_r+0x8b8>
   113a8:	movs	r3, #0
   113aa:	str	r3, [sp, #148]	; 0x94
   113ac:	ldr	r3, [sp, #28]
   113ae:	cbz	r3, 113b8 <_svfprintf_r+0x368>
   113b0:	ldr	r1, [sp, #28]
   113b2:	mov	r0, fp
   113b4:	bl	10684 <_free_r>
   113b8:	add.w	sl, sp, #156	; 0x9c
   113bc:	mov	r4, r9
   113be:	b.n	110b4 <_svfprintf_r+0x64>
   113c0:	str	r3, [sp, #44]	; 0x2c
   113c2:	ldr	r3, [sp, #32]
   113c4:	adds	r3, #7
   113c6:	bic.w	r3, r3, #7
   113ca:	vldmia	r3!, {d8}
   113ce:	vabs.f64	d7, d8
   113d2:	vcmp.f64	d7, d9
   113d6:	vmrs	APSR_nzcv, fpscr
   113da:	str	r3, [sp, #32]
   113dc:	ble.w	11db2 <_svfprintf_r+0xd62>
   113e0:	vcmpe.f64	d8, #0.0
   113e4:	vmrs	APSR_nzcv, fpscr
   113e8:	bmi.w	1249e <_svfprintf_r+0x144e>
   113ec:	ldrb.w	r1, [sp, #103]	; 0x67
   113f0:	ldr	r4, [pc, #684]	; (116a0 <_svfprintf_r+0x650>)
   113f2:	ldr	r3, [pc, #688]	; (116a4 <_svfprintf_r+0x654>)
   113f4:	bic.w	r8, r8, #128	; 0x80
   113f8:	ldr	r2, [sp, #44]	; 0x2c
   113fa:	cmp	r2, #71	; 0x47
   113fc:	it	gt
   113fe:	movgt	r4, r3
   11400:	movs	r3, #0
   11402:	strd	r3, r3, [sp, #48]	; 0x30
   11406:	movs	r2, #3
   11408:	str	r3, [sp, #28]
   1140a:	str	r2, [sp, #8]
   1140c:	str	r2, [sp, #20]
   1140e:	str	r3, [sp, #12]
   11410:	str	r3, [sp, #60]	; 0x3c
   11412:	cmp	r1, #0
   11414:	beq.w	112d6 <_svfprintf_r+0x286>
   11418:	ldr	r3, [sp, #8]
   1141a:	adds	r3, #1
   1141c:	str	r3, [sp, #8]
   1141e:	b.n	112d6 <_svfprintf_r+0x286>
   11420:	cmp	r3, #67	; 0x43
   11422:	str	r3, [sp, #44]	; 0x2c
   11424:	beq.n	1142e <_svfprintf_r+0x3de>
   11426:	tst.w	r8, #16
   1142a:	beq.w	11ee8 <_svfprintf_r+0xe98>
   1142e:	ldr	r5, [sp, #32]
   11430:	movs	r2, #8
   11432:	movs	r1, #0
   11434:	add	r0, sp, #136	; 0x88
   11436:	add	r4, sp, #220	; 0xdc
   11438:	bl	10104 <memset>
   1143c:	add	r3, sp, #136	; 0x88
   1143e:	ldr.w	r2, [r5], #4
   11442:	mov	r1, r4
   11444:	mov	r0, fp
   11446:	bl	13d2c <_wcrtomb_r>
   1144a:	mov	r3, r0
   1144c:	adds	r3, #1
   1144e:	str	r0, [sp, #20]
   11450:	beq.w	12a30 <_svfprintf_r+0x19e0>
   11454:	ldr	r3, [sp, #20]
   11456:	str	r5, [sp, #32]
   11458:	bic.w	r3, r3, r3, asr #31
   1145c:	str	r3, [sp, #8]
   1145e:	movs	r1, #0
   11460:	strd	r1, r1, [sp, #48]	; 0x30
   11464:	strb.w	r1, [sp, #103]	; 0x67
   11468:	str	r1, [sp, #28]
   1146a:	str	r1, [sp, #12]
   1146c:	str	r1, [sp, #60]	; 0x3c
   1146e:	b.n	112d6 <_svfprintf_r+0x286>
   11470:	str	r3, [sp, #44]	; 0x2c
   11472:	ldr	r3, [sp, #32]
   11474:	mov	r2, r3
   11476:	movs	r3, #0
   11478:	strb.w	r3, [sp, #103]	; 0x67
   1147c:	mov	r3, r2
   1147e:	ldr.w	r4, [r3], #4
   11482:	str	r3, [sp, #32]
   11484:	cmp	r4, #0
   11486:	beq.w	11f1a <_svfprintf_r+0xeca>
   1148a:	ldr	r3, [sp, #44]	; 0x2c
   1148c:	cmp	r3, #83	; 0x53
   1148e:	beq.w	1226a <_svfprintf_r+0x121a>
   11492:	ands.w	r3, r8, #16
   11496:	str	r3, [sp, #48]	; 0x30
   11498:	bne.w	1226a <_svfprintf_r+0x121a>
   1149c:	ldr	r3, [sp, #12]
   1149e:	adds	r5, r3, #1
   114a0:	beq.w	1266e <_svfprintf_r+0x161e>
   114a4:	ldr	r1, [sp, #48]	; 0x30
   114a6:	mov	r2, r3
   114a8:	mov	r0, r4
   114aa:	bl	103e0 <memchr>
   114ae:	str	r0, [sp, #28]
   114b0:	cmp	r0, #0
   114b2:	beq.w	12b06 <_svfprintf_r+0x1ab6>
   114b6:	ldr	r3, [sp, #28]
   114b8:	subs	r2, r3, r4
   114ba:	str	r2, [sp, #20]
   114bc:	ldr	r3, [sp, #48]	; 0x30
   114be:	str	r3, [sp, #12]
   114c0:	bic.w	r2, r2, r2, asr #31
   114c4:	str	r3, [sp, #60]	; 0x3c
   114c6:	str	r3, [sp, #52]	; 0x34
   114c8:	str	r3, [sp, #28]
   114ca:	movs	r3, #115	; 0x73
   114cc:	ldrb.w	r1, [sp, #103]	; 0x67
   114d0:	str	r2, [sp, #8]
   114d2:	str	r3, [sp, #44]	; 0x2c
   114d4:	b.n	11412 <_svfprintf_r+0x3c2>
   114d6:	tst.w	r8, #32
   114da:	str	r3, [sp, #44]	; 0x2c
   114dc:	ldr	r3, [sp, #32]
   114de:	beq.n	1155c <_svfprintf_r+0x50c>
   114e0:	adds	r3, #7
   114e2:	bic.w	r3, r3, #7
   114e6:	mov	r2, r3
   114e8:	mov	r1, r2
   114ea:	ldr	r3, [r3, #4]
   114ec:	ldr.w	r2, [r1], #8
   114f0:	str	r1, [sp, #32]
   114f2:	mov	r1, r3
   114f4:	cmp	r3, #0
   114f6:	blt.w	11d12 <_svfprintf_r+0xcc2>
   114fa:	ldr	r3, [sp, #12]
   114fc:	adds	r3, #1
   114fe:	beq.w	11a3e <_svfprintf_r+0x9ee>
   11502:	bic.w	r0, r8, #128	; 0x80
   11506:	orrs.w	r3, r2, r1
   1150a:	str	r0, [sp, #8]
   1150c:	bne.w	11a42 <_svfprintf_r+0x9f2>
   11510:	ldr	r3, [sp, #12]
   11512:	cmp	r3, #0
   11514:	bne.w	11a4c <_svfprintf_r+0x9fc>
   11518:	mov	r8, r0
   1151a:	movs	r3, #0
   1151c:	str	r3, [sp, #12]
   1151e:	str	r3, [sp, #20]
   11520:	add	r4, sp, #320	; 0x140
   11522:	b.n	11732 <_svfprintf_r+0x6e2>
   11524:	ldr	r3, [sp, #32]
   11526:	ldr.w	r2, [r3], #4
   1152a:	str	r2, [sp, #24]
   1152c:	cmp	r2, #0
   1152e:	bge.w	11d64 <_svfprintf_r+0xd14>
   11532:	ldr	r2, [sp, #24]
   11534:	str	r3, [sp, #32]
   11536:	negs	r2, r2
   11538:	str	r2, [sp, #24]
   1153a:	ldrb.w	r3, [r9]
   1153e:	orr.w	r8, r8, #4
   11542:	b.n	11108 <_svfprintf_r+0xb8>
   11544:	ldrb.w	r3, [r9]
   11548:	orr.w	r8, r8, #8
   1154c:	b.n	11108 <_svfprintf_r+0xb8>
   1154e:	orr.w	r8, r8, #16
   11552:	tst.w	r8, #32
   11556:	str	r3, [sp, #44]	; 0x2c
   11558:	ldr	r3, [sp, #32]
   1155a:	bne.n	114e0 <_svfprintf_r+0x490>
   1155c:	tst.w	r8, #16
   11560:	bne.w	11d7a <_svfprintf_r+0xd2a>
   11564:	tst.w	r8, #64	; 0x40
   11568:	beq.w	11d72 <_svfprintf_r+0xd22>
   1156c:	ldrsh.w	r2, [r3], #4
   11570:	str	r3, [sp, #32]
   11572:	asrs	r1, r2, #31
   11574:	mov	r3, r1
   11576:	b.n	114f4 <_svfprintf_r+0x4a4>
   11578:	ldr	r3, [sp, #32]
   1157a:	orr.w	r2, r8, #2
   1157e:	str	r2, [sp, #8]
   11580:	ldr.w	r2, [r3], #4
   11584:	str	r3, [sp, #32]
   11586:	movw	r3, #30768	; 0x7830
   1158a:	strh.w	r3, [sp, #104]	; 0x68
   1158e:	movs	r0, #120	; 0x78
   11590:	ldr	r3, [pc, #276]	; (116a8 <_svfprintf_r+0x658>)
   11592:	str	r3, [sp, #68]	; 0x44
   11594:	movs	r1, #0
   11596:	movs	r3, #2
   11598:	str	r0, [sp, #44]	; 0x2c
   1159a:	movs	r0, #0
   1159c:	ldr	r4, [sp, #12]
   1159e:	strb.w	r0, [sp, #103]	; 0x67
   115a2:	adds	r0, r4, #1
   115a4:	beq.w	11702 <_svfprintf_r+0x6b2>
   115a8:	ldr	r0, [sp, #8]
   115aa:	bic.w	r8, r0, #128	; 0x80
   115ae:	orrs.w	r0, r2, r1
   115b2:	bne.w	116fe <_svfprintf_r+0x6ae>
   115b6:	cmp	r4, #0
   115b8:	bne.w	12318 <_svfprintf_r+0x12c8>
   115bc:	cmp	r3, #0
   115be:	bne.n	1151a <_svfprintf_r+0x4ca>
   115c0:	ldr	r3, [sp, #8]
   115c2:	ands.w	r3, r3, #1
   115c6:	str	r3, [sp, #20]
   115c8:	beq.w	11d6e <_svfprintf_r+0xd1e>
   115cc:	movs	r3, #48	; 0x30
   115ce:	strb.w	r3, [sp, #319]	; 0x13f
   115d2:	addw	r4, sp, #319	; 0x13f
   115d6:	b.n	11732 <_svfprintf_r+0x6e2>
   115d8:	tst.w	r8, #32
   115dc:	bne.w	11d88 <_svfprintf_r+0xd38>
   115e0:	tst.w	r8, #16
   115e4:	bne.w	12326 <_svfprintf_r+0x12d6>
   115e8:	tst.w	r8, #64	; 0x40
   115ec:	bne.w	1251e <_svfprintf_r+0x14ce>
   115f0:	tst.w	r8, #512	; 0x200
   115f4:	beq.w	12326 <_svfprintf_r+0x12d6>
   115f8:	ldr	r3, [sp, #32]
   115fa:	ldr	r1, [sp, #16]
   115fc:	ldr.w	r2, [r3], #4
   11600:	str	r3, [sp, #32]
   11602:	strb	r1, [r2, #0]
   11604:	mov	r4, r9
   11606:	b.n	110b4 <_svfprintf_r+0x64>
   11608:	ldrb.w	r3, [r9]
   1160c:	cmp	r3, #104	; 0x68
   1160e:	ittte	eq
   11610:	ldrbeq.w	r3, [r9, #1]
   11614:	orreq.w	r8, r8, #512	; 0x200
   11618:	addeq.w	r9, r9, #1
   1161c:	orrne.w	r8, r8, #64	; 0x40
   11620:	b.n	11108 <_svfprintf_r+0xb8>
   11622:	ldrb.w	r3, [r9]
   11626:	strb.w	r5, [sp, #103]	; 0x67
   1162a:	b.n	11108 <_svfprintf_r+0xb8>
   1162c:	ldrb.w	r3, [r9]
   11630:	cmp	r3, #108	; 0x6c
   11632:	ittte	eq
   11634:	ldrbeq.w	r3, [r9, #1]
   11638:	orreq.w	r8, r8, #32
   1163c:	addeq.w	r9, r9, #1
   11640:	orrne.w	r8, r8, #16
   11644:	b.n	11108 <_svfprintf_r+0xb8>
   11646:	str	r3, [sp, #44]	; 0x2c
   11648:	orr.w	r8, r8, #16
   1164c:	ands.w	r1, r8, #32
   11650:	beq.w	11cf6 <_svfprintf_r+0xca6>
   11654:	ldr	r3, [sp, #32]
   11656:	adds	r3, #7
   11658:	bic.w	r3, r3, #7
   1165c:	ldr	r1, [r3, #4]
   1165e:	ldr.w	r2, [r3], #8
   11662:	str	r3, [sp, #32]
   11664:	bic.w	r3, r8, #1024	; 0x400
   11668:	str	r3, [sp, #8]
   1166a:	movs	r3, #0
   1166c:	b.n	1159a <_svfprintf_r+0x54a>
   1166e:	str	r3, [sp, #44]	; 0x2c
   11670:	orr.w	r3, r8, #16
   11674:	str	r3, [sp, #8]
   11676:	ldr	r3, [sp, #8]
   11678:	ands.w	r1, r3, #32
   1167c:	beq.w	11cd2 <_svfprintf_r+0xc82>
   11680:	ldr	r3, [sp, #32]
   11682:	adds	r3, #7
   11684:	bic.w	r3, r3, #7
   11688:	ldr	r1, [r3, #4]
   1168a:	ldr.w	r2, [r3], #8
   1168e:	str	r3, [sp, #32]
   11690:	movs	r3, #1
   11692:	b.n	1159a <_svfprintf_r+0x54a>
   11694:	ldrb.w	r3, [r9]
   11698:	orr.w	r8, r8, #128	; 0x80
   1169c:	b.n	11108 <_svfprintf_r+0xb8>
   1169e:	nop
   116a0:	.word	0x20000d48
   116a4:	.word	0x20000738
   116a8:	.word	0x20000d50
   116ac:	mov	r1, r9
   116ae:	ldrb.w	r3, [r1], #1
   116b2:	cmp	r3, #42	; 0x2a
   116b4:	beq.w	12b4a <_svfprintf_r+0x1afa>
   116b8:	sub.w	r2, r3, #48	; 0x30
   116bc:	cmp	r2, #9
   116be:	mov	r9, r1
   116c0:	it	ls
   116c2:	movls	r1, #0
   116c4:	bhi.w	12950 <_svfprintf_r+0x1900>
   116c8:	ldrb.w	r3, [r9], #1
   116cc:	add.w	r1, r1, r1, lsl #2
   116d0:	add.w	r1, r2, r1, lsl #1
   116d4:	sub.w	r2, r3, #48	; 0x30
   116d8:	cmp	r2, #9
   116da:	bls.n	116c8 <_svfprintf_r+0x678>
   116dc:	str	r1, [sp, #12]
   116de:	b.n	1110c <_svfprintf_r+0xbc>
   116e0:	ldrb.w	r3, [r9]
   116e4:	orr.w	r8, r8, #1
   116e8:	b.n	11108 <_svfprintf_r+0xb8>
   116ea:	ldrb.w	r3, [sp, #103]	; 0x67
   116ee:	cmp	r3, #0
   116f0:	bne.w	11212 <_svfprintf_r+0x1c2>
   116f4:	ldrb.w	r3, [r9]
   116f8:	strb.w	r6, [sp, #103]	; 0x67
   116fc:	b.n	11108 <_svfprintf_r+0xb8>
   116fe:	str.w	r8, [sp, #8]
   11702:	cmp	r3, #1
   11704:	beq.w	11a42 <_svfprintf_r+0x9f2>
   11708:	cmp	r3, #2
   1170a:	add	r4, sp, #320	; 0x140
   1170c:	bne.n	11750 <_svfprintf_r+0x700>
   1170e:	ldr	r0, [sp, #68]	; 0x44
   11710:	and.w	r3, r2, #15
   11714:	lsrs	r2, r2, #4
   11716:	ldrb	r3, [r0, r3]
   11718:	strb.w	r3, [r4, #-1]!
   1171c:	orr.w	r2, r2, r1, lsl #28
   11720:	lsrs	r1, r1, #4
   11722:	orrs.w	r3, r2, r1
   11726:	bne.n	11710 <_svfprintf_r+0x6c0>
   11728:	add	r3, sp, #320	; 0x140
   1172a:	subs	r3, r3, r4
   1172c:	ldr.w	r8, [sp, #8]
   11730:	str	r3, [sp, #20]
   11732:	ldr	r2, [sp, #20]
   11734:	ldr	r0, [sp, #12]
   11736:	ldrb.w	r1, [sp, #103]	; 0x67
   1173a:	cmp	r2, r0
   1173c:	mov.w	r3, #0
   11740:	it	lt
   11742:	movlt	r2, r0
   11744:	strd	r3, r3, [sp, #48]	; 0x30
   11748:	str	r3, [sp, #28]
   1174a:	str	r2, [sp, #8]
   1174c:	str	r3, [sp, #60]	; 0x3c
   1174e:	b.n	11412 <_svfprintf_r+0x3c2>
   11750:	and.w	r3, r2, #7
   11754:	lsrs	r2, r2, #3
   11756:	orr.w	r2, r2, r1, lsl #29
   1175a:	lsrs	r1, r1, #3
   1175c:	adds	r3, #48	; 0x30
   1175e:	orrs.w	r5, r2, r1
   11762:	mov	r0, r4
   11764:	strb.w	r3, [r4, #-1]!
   11768:	bne.n	11750 <_svfprintf_r+0x700>
   1176a:	ldr	r2, [sp, #8]
   1176c:	lsls	r1, r2, #31
   1176e:	bmi.w	11c0c <_svfprintf_r+0xbbc>
   11772:	add	r3, sp, #320	; 0x140
   11774:	subs	r3, r3, r4
   11776:	mov	r8, r2
   11778:	str	r3, [sp, #20]
   1177a:	b.n	11732 <_svfprintf_r+0x6e2>
   1177c:	ldr	r3, [sp, #44]	; 0x2c
   1177e:	cmp	r3, #101	; 0x65
   11780:	ble.w	1192c <_svfprintf_r+0x8dc>
   11784:	vcmp.f64	d8, #0.0
   11788:	vmrs	APSR_nzcv, fpscr
   1178c:	bne.w	11b12 <_svfprintf_r+0xac2>
   11790:	ldr	r3, [sp, #148]	; 0x94
   11792:	ldr	r1, [pc, #744]	; (11a7c <_svfprintf_r+0xa2c>)
   11794:	str.w	r1, [sl]
   11798:	adds	r3, #1
   1179a:	adds	r2, #1
   1179c:	movs	r1, #1
   1179e:	cmp	r3, #7
   117a0:	str	r2, [sp, #152]	; 0x98
   117a2:	str	r3, [sp, #148]	; 0x94
   117a4:	str.w	r1, [sl, #4]
   117a8:	bgt.w	1224e <_svfprintf_r+0x11fe>
   117ac:	add.w	sl, sl, #8
   117b0:	ldr	r3, [sp, #108]	; 0x6c
   117b2:	ldr	r1, [sp, #56]	; 0x38
   117b4:	cmp	r3, r1
   117b6:	bge.w	11d5a <_svfprintf_r+0xd0a>
   117ba:	ldr	r3, [sp, #64]	; 0x40
   117bc:	ldr	r1, [sp, #72]	; 0x48
   117be:	add	r2, r3
   117c0:	strd	r1, r3, [sl]
   117c4:	ldr	r3, [sp, #148]	; 0x94
   117c6:	str	r2, [sp, #152]	; 0x98
   117c8:	adds	r3, #1
   117ca:	cmp	r3, #7
   117cc:	str	r3, [sp, #148]	; 0x94
   117ce:	bgt.w	11f00 <_svfprintf_r+0xeb0>
   117d2:	add.w	sl, sl, #8
   117d6:	ldr	r3, [sp, #56]	; 0x38
   117d8:	subs	r4, r3, #1
   117da:	cmp	r4, #0
   117dc:	ble.w	11380 <_svfprintf_r+0x330>
   117e0:	cmp	r4, #16
   117e2:	ldr	r3, [sp, #148]	; 0x94
   117e4:	ble.w	122c4 <_svfprintf_r+0x1274>
   117e8:	vmov	r6, s22
   117ec:	movs	r5, #16
   117ee:	b.n	117fc <_svfprintf_r+0x7ac>
   117f0:	add.w	sl, sl, #8
   117f4:	subs	r4, #16
   117f6:	cmp	r4, #16
   117f8:	ble.w	122c4 <_svfprintf_r+0x1274>
   117fc:	adds	r3, #1
   117fe:	ldr	r1, [pc, #640]	; (11a80 <_svfprintf_r+0xa30>)
   11800:	adds	r2, #16
   11802:	cmp	r3, #7
   11804:	strd	r1, r5, [sl]
   11808:	strd	r3, r2, [sp, #148]	; 0x94
   1180c:	ble.n	117f0 <_svfprintf_r+0x7a0>
   1180e:	add	r2, sp, #144	; 0x90
   11810:	mov	r1, r6
   11812:	mov	r0, fp
   11814:	bl	13db8 <__ssprint_r>
   11818:	cmp	r0, #0
   1181a:	bne.n	1191a <_svfprintf_r+0x8ca>
   1181c:	ldrd	r3, r2, [sp, #148]	; 0x94
   11820:	add.w	sl, sp, #156	; 0x9c
   11824:	b.n	117f4 <_svfprintf_r+0x7a4>
   11826:	ldr	r3, [sp, #24]
   11828:	ldr	r1, [sp, #8]
   1182a:	subs	r5, r3, r1
   1182c:	cmp	r5, #0
   1182e:	ble.w	1134e <_svfprintf_r+0x2fe>
   11832:	cmp	r5, #16
   11834:	ldr	r3, [sp, #148]	; 0x94
   11836:	ble.n	1187c <_svfprintf_r+0x82c>
   11838:	str	r4, [sp, #36]	; 0x24
   1183a:	movs	r6, #16
   1183c:	vmov	r4, s22
   11840:	b.n	1184c <_svfprintf_r+0x7fc>
   11842:	subs	r5, #16
   11844:	cmp	r5, #16
   11846:	add.w	sl, sl, #8
   1184a:	ble.n	1187a <_svfprintf_r+0x82a>
   1184c:	adds	r3, #1
   1184e:	ldr	r1, [pc, #560]	; (11a80 <_svfprintf_r+0xa30>)
   11850:	adds	r2, #16
   11852:	cmp	r3, #7
   11854:	strd	r1, r6, [sl]
   11858:	strd	r3, r2, [sp, #148]	; 0x94
   1185c:	ble.n	11842 <_svfprintf_r+0x7f2>
   1185e:	add	r2, sp, #144	; 0x90
   11860:	mov	r1, r4
   11862:	mov	r0, fp
   11864:	add.w	sl, sp, #156	; 0x9c
   11868:	bl	13db8 <__ssprint_r>
   1186c:	cmp	r0, #0
   1186e:	bne.n	1191a <_svfprintf_r+0x8ca>
   11870:	subs	r5, #16
   11872:	cmp	r5, #16
   11874:	ldrd	r3, r2, [sp, #148]	; 0x94
   11878:	bgt.n	1184c <_svfprintf_r+0x7fc>
   1187a:	ldr	r4, [sp, #36]	; 0x24
   1187c:	ldr	r1, [pc, #512]	; (11a80 <_svfprintf_r+0xa30>)
   1187e:	str.w	r5, [sl, #4]
   11882:	adds	r3, #1
   11884:	add	r2, r5
   11886:	cmp	r3, #7
   11888:	strd	r3, r2, [sp, #148]	; 0x94
   1188c:	str.w	r1, [sl]
   11890:	bgt.w	122e0 <_svfprintf_r+0x1290>
   11894:	ldr	r3, [sp, #12]
   11896:	ldr	r1, [sp, #20]
   11898:	subs	r5, r3, r1
   1189a:	cmp	r5, #0
   1189c:	add.w	sl, sl, #8
   118a0:	ble.w	1135a <_svfprintf_r+0x30a>
   118a4:	cmp	r5, #16
   118a6:	ldr	r3, [sp, #148]	; 0x94
   118a8:	ble.n	118ea <_svfprintf_r+0x89a>
   118aa:	mov	r1, sl
   118ac:	movs	r6, #16
   118ae:	vmov	sl, s22
   118b2:	b.n	118be <_svfprintf_r+0x86e>
   118b4:	subs	r5, #16
   118b6:	cmp	r5, #16
   118b8:	add.w	r1, r1, #8
   118bc:	ble.n	118e8 <_svfprintf_r+0x898>
   118be:	adds	r3, #1
   118c0:	ldr	r0, [pc, #444]	; (11a80 <_svfprintf_r+0xa30>)
   118c2:	adds	r2, #16
   118c4:	cmp	r3, #7
   118c6:	strd	r0, r6, [r1]
   118ca:	strd	r3, r2, [sp, #148]	; 0x94
   118ce:	ble.n	118b4 <_svfprintf_r+0x864>
   118d0:	add	r2, sp, #144	; 0x90
   118d2:	mov	r1, sl
   118d4:	mov	r0, fp
   118d6:	bl	13db8 <__ssprint_r>
   118da:	cbnz	r0, 1191a <_svfprintf_r+0x8ca>
   118dc:	subs	r5, #16
   118de:	cmp	r5, #16
   118e0:	ldrd	r3, r2, [sp, #148]	; 0x94
   118e4:	add	r1, sp, #156	; 0x9c
   118e6:	bgt.n	118be <_svfprintf_r+0x86e>
   118e8:	mov	sl, r1
   118ea:	adds	r3, #1
   118ec:	ldr	r1, [pc, #400]	; (11a80 <_svfprintf_r+0xa30>)
   118ee:	str.w	r5, [sl, #4]
   118f2:	add	r2, r5
   118f4:	cmp	r3, #7
   118f6:	strd	r3, r2, [sp, #148]	; 0x94
   118fa:	str.w	r1, [sl]
   118fe:	bgt.w	11cb6 <_svfprintf_r+0xc66>
   11902:	add.w	sl, sl, #8
   11906:	b.n	1135a <_svfprintf_r+0x30a>
   11908:	vmov	r1, s22
   1190c:	add	r2, sp, #144	; 0x90
   1190e:	mov	r0, fp
   11910:	bl	13db8 <__ssprint_r>
   11914:	cmp	r0, #0
   11916:	beq.w	113a8 <_svfprintf_r+0x358>
   1191a:	ldr	r3, [sp, #28]
   1191c:	cmp	r3, #0
   1191e:	beq.w	11266 <_svfprintf_r+0x216>
   11922:	ldr	r1, [sp, #28]
   11924:	mov	r0, fp
   11926:	bl	10684 <_free_r>
   1192a:	b.n	11266 <_svfprintf_r+0x216>
   1192c:	ldr	r3, [sp, #56]	; 0x38
   1192e:	cmp	r3, #1
   11930:	ble.w	11c28 <_svfprintf_r+0xbd8>
   11934:	ldr	r3, [sp, #148]	; 0x94
   11936:	str.w	r4, [sl]
   1193a:	adds	r3, #1
   1193c:	adds	r2, #1
   1193e:	movs	r1, #1
   11940:	cmp	r3, #7
   11942:	str	r2, [sp, #152]	; 0x98
   11944:	str	r3, [sp, #148]	; 0x94
   11946:	str.w	r1, [sl, #4]
   1194a:	bgt.w	11d3e <_svfprintf_r+0xcee>
   1194e:	add.w	sl, sl, #8
   11952:	ldr	r1, [sp, #64]	; 0x40
   11954:	ldr	r0, [sp, #72]	; 0x48
   11956:	adds	r3, #1
   11958:	add	r2, r1
   1195a:	cmp	r3, #7
   1195c:	strd	r0, r1, [sl]
   11960:	strd	r3, r2, [sp, #148]	; 0x94
   11964:	bgt.w	11d22 <_svfprintf_r+0xcd2>
   11968:	add.w	sl, sl, #8
   1196c:	vcmp.f64	d8, #0.0
   11970:	vmrs	APSR_nzcv, fpscr
   11974:	beq.w	11c66 <_svfprintf_r+0xc16>
   11978:	ldr	r1, [sp, #56]	; 0x38
   1197a:	adds	r3, #1
   1197c:	subs	r1, #1
   1197e:	adds	r4, #1
   11980:	add	r2, r1
   11982:	cmp	r3, #7
   11984:	str.w	r4, [sl]
   11988:	str	r3, [sp, #148]	; 0x94
   1198a:	str.w	r1, [sl, #4]
   1198e:	str	r2, [sp, #152]	; 0x98
   11990:	bgt.w	11c4a <_svfprintf_r+0xbfa>
   11994:	add.w	sl, sl, #8
   11998:	ldr	r1, [sp, #80]	; 0x50
   1199a:	str.w	r1, [sl, #4]
   1199e:	adds	r3, #1
   119a0:	add	r2, r1
   119a2:	cmp	r3, #7
   119a4:	add	r1, sp, #120	; 0x78
   119a6:	strd	r3, r2, [sp, #148]	; 0x94
   119aa:	str.w	r1, [sl]
   119ae:	ble.w	1137c <_svfprintf_r+0x32c>
   119b2:	vmov	r1, s22
   119b6:	add	r2, sp, #144	; 0x90
   119b8:	mov	r0, fp
   119ba:	bl	13db8 <__ssprint_r>
   119be:	cmp	r0, #0
   119c0:	bne.n	1191a <_svfprintf_r+0x8ca>
   119c2:	ldr	r2, [sp, #152]	; 0x98
   119c4:	add.w	sl, sp, #156	; 0x9c
   119c8:	b.n	11380 <_svfprintf_r+0x330>
   119ca:	cmp	r5, #16
   119cc:	ldrd	r1, r2, [sp, #148]	; 0x94
   119d0:	ldr	r6, [pc, #176]	; (11a84 <_svfprintf_r+0xa34>)
   119d2:	ble.n	11a1e <_svfprintf_r+0x9ce>
   119d4:	str	r4, [sp, #92]	; 0x5c
   119d6:	movs	r3, #16
   119d8:	vmov	r4, s22
   119dc:	mov	r0, r1
   119de:	b.n	119ea <_svfprintf_r+0x99a>
   119e0:	subs	r5, #16
   119e2:	cmp	r5, #16
   119e4:	add.w	sl, sl, #8
   119e8:	ble.n	11a1a <_svfprintf_r+0x9ca>
   119ea:	adds	r0, #1
   119ec:	adds	r2, #16
   119ee:	cmp	r0, #7
   119f0:	strd	r6, r3, [sl]
   119f4:	strd	r0, r2, [sp, #148]	; 0x94
   119f8:	ble.n	119e0 <_svfprintf_r+0x990>
   119fa:	add	r2, sp, #144	; 0x90
   119fc:	mov	r1, r4
   119fe:	mov	r0, fp
   11a00:	add.w	sl, sp, #156	; 0x9c
   11a04:	bl	13db8 <__ssprint_r>
   11a08:	cmp	r0, #0
   11a0a:	bne.n	1191a <_svfprintf_r+0x8ca>
   11a0c:	subs	r5, #16
   11a0e:	cmp	r5, #16
   11a10:	ldrd	r0, r2, [sp, #148]	; 0x94
   11a14:	mov.w	r3, #16
   11a18:	bgt.n	119ea <_svfprintf_r+0x99a>
   11a1a:	ldr	r4, [sp, #92]	; 0x5c
   11a1c:	mov	r1, r0
   11a1e:	adds	r1, #1
   11a20:	add	r2, r5
   11a22:	cmp	r1, #7
   11a24:	strd	r1, r2, [sp, #148]	; 0x94
   11a28:	str.w	r6, [sl]
   11a2c:	str.w	r5, [sl, #4]
   11a30:	bgt.w	121ae <_svfprintf_r+0x115e>
   11a34:	ldrb.w	r1, [sp, #103]	; 0x67
   11a38:	add.w	sl, sl, #8
   11a3c:	b.n	112fa <_svfprintf_r+0x2aa>
   11a3e:	str.w	r8, [sp, #8]
   11a42:	cmp	r2, #10
   11a44:	sbcs.w	r3, r1, #0
   11a48:	bcs.w	120d6 <_svfprintf_r+0x1086>
   11a4c:	adds	r2, #48	; 0x30
   11a4e:	movs	r3, #1
   11a50:	ldr.w	r8, [sp, #8]
   11a54:	strb.w	r2, [sp, #319]	; 0x13f
   11a58:	str	r3, [sp, #20]
   11a5a:	addw	r4, sp, #319	; 0x13f
   11a5e:	b.n	11732 <_svfprintf_r+0x6e2>
   11a60:	vmov	r1, s22
   11a64:	add	r2, sp, #144	; 0x90
   11a66:	mov	r0, fp
   11a68:	bl	13db8 <__ssprint_r>
   11a6c:	cmp	r0, #0
   11a6e:	bne.w	1191a <_svfprintf_r+0x8ca>
   11a72:	ldr	r2, [sp, #152]	; 0x98
   11a74:	add.w	sl, sp, #156	; 0x9c
   11a78:	b.n	11320 <_svfprintf_r+0x2d0>
   11a7a:	nop
   11a7c:	.word	0x20000d80
   11a80:	.word	0x20001ac4
   11a84:	.word	0x20000d84
   11a88:	vmov	r1, s22
   11a8c:	add	r2, sp, #144	; 0x90
   11a8e:	mov	r0, fp
   11a90:	bl	13db8 <__ssprint_r>
   11a94:	cmp	r0, #0
   11a96:	bne.w	1191a <_svfprintf_r+0x8ca>
   11a9a:	ldr	r2, [sp, #152]	; 0x98
   11a9c:	add.w	sl, sp, #156	; 0x9c
   11aa0:	b.n	11346 <_svfprintf_r+0x2f6>
   11aa2:	cmp	r4, #16
   11aa4:	ldr	r3, [sp, #148]	; 0x94
   11aa6:	ldr	r6, [pc, #760]	; (11da0 <_svfprintf_r+0xd50>)
   11aa8:	ble.n	11aea <_svfprintf_r+0xa9a>
   11aaa:	vmov	r8, s22
   11aae:	movs	r5, #16
   11ab0:	b.n	11abc <_svfprintf_r+0xa6c>
   11ab2:	subs	r4, #16
   11ab4:	cmp	r4, #16
   11ab6:	add.w	sl, sl, #8
   11aba:	ble.n	11aea <_svfprintf_r+0xa9a>
   11abc:	adds	r3, #1
   11abe:	adds	r2, #16
   11ac0:	cmp	r3, #7
   11ac2:	strd	r6, r5, [sl]
   11ac6:	strd	r3, r2, [sp, #148]	; 0x94
   11aca:	ble.n	11ab2 <_svfprintf_r+0xa62>
   11acc:	add	r2, sp, #144	; 0x90
   11ace:	mov	r1, r8
   11ad0:	mov	r0, fp
   11ad2:	add.w	sl, sp, #156	; 0x9c
   11ad6:	bl	13db8 <__ssprint_r>
   11ada:	cmp	r0, #0
   11adc:	bne.w	1191a <_svfprintf_r+0x8ca>
   11ae0:	subs	r4, #16
   11ae2:	cmp	r4, #16
   11ae4:	ldrd	r3, r2, [sp, #148]	; 0x94
   11ae8:	bgt.n	11abc <_svfprintf_r+0xa6c>
   11aea:	adds	r3, #1
   11aec:	add	r2, r4
   11aee:	cmp	r3, #7
   11af0:	strd	r6, r4, [sl]
   11af4:	strd	r3, r2, [sp, #148]	; 0x94
   11af8:	ble.w	11392 <_svfprintf_r+0x342>
   11afc:	vmov	r1, s22
   11b00:	add	r2, sp, #144	; 0x90
   11b02:	mov	r0, fp
   11b04:	bl	13db8 <__ssprint_r>
   11b08:	cmp	r0, #0
   11b0a:	bne.w	1191a <_svfprintf_r+0x8ca>
   11b0e:	ldr	r2, [sp, #152]	; 0x98
   11b10:	b.n	11392 <_svfprintf_r+0x342>
   11b12:	ldr	r1, [sp, #108]	; 0x6c
   11b14:	cmp	r1, #0
   11b16:	ble.w	121ce <_svfprintf_r+0x117e>
   11b1a:	ldr	r6, [sp, #48]	; 0x30
   11b1c:	ldr	r3, [sp, #56]	; 0x38
   11b1e:	cmp	r6, r3
   11b20:	it	ge
   11b22:	movge	r6, r3
   11b24:	cmp	r6, #0
   11b26:	ble.n	11b40 <_svfprintf_r+0xaf0>
   11b28:	ldr	r3, [sp, #148]	; 0x94
   11b2a:	adds	r3, #1
   11b2c:	add	r2, r6
   11b2e:	cmp	r3, #7
   11b30:	strd	r4, r6, [sl]
   11b34:	str	r2, [sp, #152]	; 0x98
   11b36:	str	r3, [sp, #148]	; 0x94
   11b38:	bgt.w	1284e <_svfprintf_r+0x17fe>
   11b3c:	add.w	sl, sl, #8
   11b40:	ldr	r5, [sp, #48]	; 0x30
   11b42:	cmp	r6, #0
   11b44:	it	ge
   11b46:	subge	r5, r5, r6
   11b48:	cmp	r5, #0
   11b4a:	bgt.w	11f54 <_svfprintf_r+0xf04>
   11b4e:	ldr	r3, [sp, #48]	; 0x30
   11b50:	tst.w	r8, #1024	; 0x400
   11b54:	add	r3, r4
   11b56:	str	r3, [sp, #20]
   11b58:	bne.w	11f9a <_svfprintf_r+0xf4a>
   11b5c:	ldr	r3, [sp, #108]	; 0x6c
   11b5e:	ldr	r1, [sp, #56]	; 0x38
   11b60:	cmp	r3, r1
   11b62:	blt.n	11b6c <_svfprintf_r+0xb1c>
   11b64:	tst.w	r8, #1
   11b68:	beq.w	1250a <_svfprintf_r+0x14ba>
   11b6c:	ldr	r1, [sp, #64]	; 0x40
   11b6e:	ldr	r0, [sp, #72]	; 0x48
   11b70:	add	r2, r1
   11b72:	strd	r0, r1, [sl]
   11b76:	ldr	r1, [sp, #148]	; 0x94
   11b78:	str	r2, [sp, #152]	; 0x98
   11b7a:	adds	r1, #1
   11b7c:	cmp	r1, #7
   11b7e:	str	r1, [sp, #148]	; 0x94
   11b80:	bgt.w	128ce <_svfprintf_r+0x187e>
   11b84:	add.w	sl, sl, #8
   11b88:	ldr	r1, [sp, #56]	; 0x38
   11b8a:	adds	r5, r4, r1
   11b8c:	subs	r4, r1, r3
   11b8e:	ldr	r3, [sp, #20]
   11b90:	subs	r5, r5, r3
   11b92:	cmp	r5, r4
   11b94:	it	ge
   11b96:	movge	r5, r4
   11b98:	cmp	r5, #0
   11b9a:	ble.n	11bb8 <_svfprintf_r+0xb68>
   11b9c:	str.w	r3, [sl]
   11ba0:	ldr	r3, [sp, #148]	; 0x94
   11ba2:	str.w	r5, [sl, #4]
   11ba6:	adds	r3, #1
   11ba8:	add	r2, r5
   11baa:	cmp	r3, #7
   11bac:	str	r2, [sp, #152]	; 0x98
   11bae:	str	r3, [sp, #148]	; 0x94
   11bb0:	bgt.w	1292a <_svfprintf_r+0x18da>
   11bb4:	add.w	sl, sl, #8
   11bb8:	cmp	r5, #0
   11bba:	it	ge
   11bbc:	subge	r4, r4, r5
   11bbe:	cmp	r4, #0
   11bc0:	ble.w	11380 <_svfprintf_r+0x330>
   11bc4:	cmp	r4, #16
   11bc6:	ldr	r3, [sp, #148]	; 0x94
   11bc8:	ble.w	122c4 <_svfprintf_r+0x1274>
   11bcc:	vmov	r6, s22
   11bd0:	movs	r5, #16
   11bd2:	b.n	11be0 <_svfprintf_r+0xb90>
   11bd4:	add.w	sl, sl, #8
   11bd8:	subs	r4, #16
   11bda:	cmp	r4, #16
   11bdc:	ble.w	122c4 <_svfprintf_r+0x1274>
   11be0:	adds	r3, #1
   11be2:	ldr	r1, [pc, #448]	; (11da4 <_svfprintf_r+0xd54>)
   11be4:	adds	r2, #16
   11be6:	cmp	r3, #7
   11be8:	strd	r1, r5, [sl]
   11bec:	strd	r3, r2, [sp, #148]	; 0x94
   11bf0:	ble.n	11bd4 <_svfprintf_r+0xb84>
   11bf2:	add	r2, sp, #144	; 0x90
   11bf4:	mov	r1, r6
   11bf6:	mov	r0, fp
   11bf8:	bl	13db8 <__ssprint_r>
   11bfc:	cmp	r0, #0
   11bfe:	bne.w	1191a <_svfprintf_r+0x8ca>
   11c02:	ldrd	r3, r2, [sp, #148]	; 0x94
   11c06:	add.w	sl, sp, #156	; 0x9c
   11c0a:	b.n	11bd8 <_svfprintf_r+0xb88>
   11c0c:	cmp	r3, #48	; 0x30
   11c0e:	beq.w	11728 <_svfprintf_r+0x6d8>
   11c12:	movs	r3, #48	; 0x30
   11c14:	subs	r0, #2
   11c16:	strb.w	r3, [r4, #-1]
   11c1a:	add	r3, sp, #320	; 0x140
   11c1c:	subs	r3, r3, r0
   11c1e:	ldr.w	r8, [sp, #8]
   11c22:	str	r3, [sp, #20]
   11c24:	mov	r4, r0
   11c26:	b.n	11732 <_svfprintf_r+0x6e2>
   11c28:	tst.w	r8, #1
   11c2c:	bne.w	11934 <_svfprintf_r+0x8e4>
   11c30:	ldr	r3, [sp, #148]	; 0x94
   11c32:	str.w	r4, [sl]
   11c36:	adds	r3, #1
   11c38:	adds	r2, #1
   11c3a:	movs	r1, #1
   11c3c:	cmp	r3, #7
   11c3e:	str	r2, [sp, #152]	; 0x98
   11c40:	str	r3, [sp, #148]	; 0x94
   11c42:	str.w	r1, [sl, #4]
   11c46:	ble.w	11994 <_svfprintf_r+0x944>
   11c4a:	vmov	r1, s22
   11c4e:	add	r2, sp, #144	; 0x90
   11c50:	mov	r0, fp
   11c52:	bl	13db8 <__ssprint_r>
   11c56:	cmp	r0, #0
   11c58:	bne.w	1191a <_svfprintf_r+0x8ca>
   11c5c:	ldrd	r3, r2, [sp, #148]	; 0x94
   11c60:	add.w	sl, sp, #156	; 0x9c
   11c64:	b.n	11998 <_svfprintf_r+0x948>
   11c66:	ldr	r1, [sp, #56]	; 0x38
   11c68:	subs	r4, r1, #1
   11c6a:	cmp	r4, #0
   11c6c:	ble.w	11998 <_svfprintf_r+0x948>
   11c70:	cmp	r4, #16
   11c72:	ble.w	12338 <_svfprintf_r+0x12e8>
   11c76:	vmov	r6, s22
   11c7a:	movs	r5, #16
   11c7c:	b.n	11c8a <_svfprintf_r+0xc3a>
   11c7e:	add.w	sl, sl, #8
   11c82:	subs	r4, #16
   11c84:	cmp	r4, #16
   11c86:	ble.w	12338 <_svfprintf_r+0x12e8>
   11c8a:	adds	r3, #1
   11c8c:	ldr	r1, [pc, #276]	; (11da4 <_svfprintf_r+0xd54>)
   11c8e:	adds	r2, #16
   11c90:	cmp	r3, #7
   11c92:	strd	r1, r5, [sl]
   11c96:	strd	r3, r2, [sp, #148]	; 0x94
   11c9a:	ble.n	11c7e <_svfprintf_r+0xc2e>
   11c9c:	add	r2, sp, #144	; 0x90
   11c9e:	mov	r1, r6
   11ca0:	mov	r0, fp
   11ca2:	bl	13db8 <__ssprint_r>
   11ca6:	cmp	r0, #0
   11ca8:	bne.w	1191a <_svfprintf_r+0x8ca>
   11cac:	ldrd	r3, r2, [sp, #148]	; 0x94
   11cb0:	add.w	sl, sp, #156	; 0x9c
   11cb4:	b.n	11c82 <_svfprintf_r+0xc32>
   11cb6:	vmov	r1, s22
   11cba:	add	r2, sp, #144	; 0x90
   11cbc:	mov	r0, fp
   11cbe:	bl	13db8 <__ssprint_r>
   11cc2:	cmp	r0, #0
   11cc4:	bne.w	1191a <_svfprintf_r+0x8ca>
   11cc8:	ldr	r2, [sp, #152]	; 0x98
   11cca:	add.w	sl, sp, #156	; 0x9c
   11cce:	b.w	1135a <_svfprintf_r+0x30a>
   11cd2:	ldr	r3, [sp, #8]
   11cd4:	ands.w	r3, r3, #16
   11cd8:	bne.w	11e5e <_svfprintf_r+0xe0e>
   11cdc:	ldr	r2, [sp, #8]
   11cde:	ands.w	r2, r2, #64	; 0x40
   11ce2:	beq.w	123da <_svfprintf_r+0x138a>
   11ce6:	ldr	r0, [sp, #32]
   11ce8:	ldr.w	r2, [r0], #4
   11cec:	str	r0, [sp, #32]
   11cee:	mov	r1, r3
   11cf0:	uxth	r2, r2
   11cf2:	movs	r3, #1
   11cf4:	b.n	1159a <_svfprintf_r+0x54a>
   11cf6:	ands.w	r3, r8, #16
   11cfa:	bne.n	11da8 <_svfprintf_r+0xd58>
   11cfc:	ands.w	r2, r8, #64	; 0x40
   11d00:	beq.w	123be <_svfprintf_r+0x136e>
   11d04:	ldr	r0, [sp, #32]
   11d06:	ldr.w	r2, [r0], #4
   11d0a:	str	r0, [sp, #32]
   11d0c:	mov	r1, r3
   11d0e:	uxth	r2, r2
   11d10:	b.n	11664 <_svfprintf_r+0x614>
   11d12:	negs	r2, r2
   11d14:	sbc.w	r1, r1, r1, lsl #1
   11d18:	str.w	r8, [sp, #8]
   11d1c:	movs	r0, #45	; 0x2d
   11d1e:	movs	r3, #1
   11d20:	b.n	1159c <_svfprintf_r+0x54c>
   11d22:	vmov	r1, s22
   11d26:	add	r2, sp, #144	; 0x90
   11d28:	mov	r0, fp
   11d2a:	bl	13db8 <__ssprint_r>
   11d2e:	cmp	r0, #0
   11d30:	bne.w	1191a <_svfprintf_r+0x8ca>
   11d34:	ldrd	r3, r2, [sp, #148]	; 0x94
   11d38:	add.w	sl, sp, #156	; 0x9c
   11d3c:	b.n	1196c <_svfprintf_r+0x91c>
   11d3e:	vmov	r1, s22
   11d42:	add	r2, sp, #144	; 0x90
   11d44:	mov	r0, fp
   11d46:	bl	13db8 <__ssprint_r>
   11d4a:	cmp	r0, #0
   11d4c:	bne.w	1191a <_svfprintf_r+0x8ca>
   11d50:	ldrd	r3, r2, [sp, #148]	; 0x94
   11d54:	add.w	sl, sp, #156	; 0x9c
   11d58:	b.n	11952 <_svfprintf_r+0x902>
   11d5a:	tst.w	r8, #1
   11d5e:	beq.w	11380 <_svfprintf_r+0x330>
   11d62:	b.n	117ba <_svfprintf_r+0x76a>
   11d64:	str	r3, [sp, #32]
   11d66:	ldrb.w	r3, [r9]
   11d6a:	b.w	11108 <_svfprintf_r+0xb8>
   11d6e:	add	r4, sp, #320	; 0x140
   11d70:	b.n	11732 <_svfprintf_r+0x6e2>
   11d72:	tst.w	r8, #512	; 0x200
   11d76:	bne.w	12530 <_svfprintf_r+0x14e0>
   11d7a:	ldr.w	r2, [r3], #4
   11d7e:	str	r3, [sp, #32]
   11d80:	asrs	r1, r2, #31
   11d82:	mov	r3, r1
   11d84:	b.w	114f4 <_svfprintf_r+0x4a4>
   11d88:	ldr	r3, [sp, #32]
   11d8a:	ldr	r0, [sp, #16]
   11d8c:	ldr.w	r1, [r3], #4
   11d90:	str	r3, [sp, #32]
   11d92:	asrs	r2, r0, #31
   11d94:	strd	r0, r2, [r1]
   11d98:	mov	r4, r9
   11d9a:	b.w	110b4 <_svfprintf_r+0x64>
   11d9e:	nop
   11da0:	.word	0x20000d84
   11da4:	.word	0x20001ac4
   11da8:	ldr	r3, [sp, #32]
   11daa:	ldr.w	r2, [r3], #4
   11dae:	str	r3, [sp, #32]
   11db0:	b.n	11664 <_svfprintf_r+0x614>
   11db2:	vcmp.f64	d8, d8
   11db6:	vmrs	APSR_nzcv, fpscr
   11dba:	bvs.w	12ae6 <_svfprintf_r+0x1a96>
   11dbe:	ldr	r3, [sp, #44]	; 0x2c
   11dc0:	cmp	r3, #97	; 0x61
   11dc2:	beq.w	1286a <_svfprintf_r+0x181a>
   11dc6:	cmp	r3, #65	; 0x41
   11dc8:	beq.w	1294c <_svfprintf_r+0x18fc>
   11dcc:	ldr	r3, [sp, #12]
   11dce:	adds	r3, #1
   11dd0:	ldr	r3, [sp, #44]	; 0x2c
   11dd2:	bic.w	r5, r3, #32
   11dd6:	beq.w	126da <_svfprintf_r+0x168a>
   11dda:	cmp	r5, #71	; 0x47
   11ddc:	bne.n	11de8 <_svfprintf_r+0xd98>
   11dde:	ldr	r3, [sp, #12]
   11de0:	cmp	r3, #0
   11de2:	it	eq
   11de4:	moveq	r3, #1
   11de6:	str	r3, [sp, #12]
   11de8:	vmov	r3, s17
   11dec:	cmp	r3, #0
   11dee:	orr.w	r2, r8, #256	; 0x100
   11df2:	mov	r6, r8
   11df4:	blt.w	12a28 <_svfprintf_r+0x19d8>
   11df8:	vmov.f64	d10, d8
   11dfc:	movs	r3, #0
   11dfe:	mov	r8, r2
   11e00:	str	r3, [sp, #36]	; 0x24
   11e02:	str	r3, [sp, #28]
   11e04:	ldr	r3, [sp, #44]	; 0x2c
   11e06:	subs	r3, #65	; 0x41
   11e08:	cmp	r3, #37	; 0x25
   11e0a:	bhi.w	1253e <_svfprintf_r+0x14ee>
   11e0e:	tbh	[pc, r3, lsl #1]
   11e12:	.short	0x046f
   11e14:	.word	0x03960396
   11e18:	.word	0x04680396
   11e1c:	.word	0x0396046c
   11e20:	.word	0x03960396
   11e24:	.word	0x03960396
   11e28:	.word	0x03960396
   11e2c:	.word	0x03960396
   11e30:	.word	0x03960396
   11e34:	.word	0x03960396
   11e38:	.word	0x03960396
   11e3c:	.word	0x03960396
   11e40:	.word	0x03960396
   11e44:	.word	0x03960396
   11e48:	.word	0x03960396
   11e4c:	.word	0x03960396
   11e50:	.word	0x03960396
   11e54:	.word	0x03960396
   11e58:	.word	0x04680396
   11e5c:	.short	0x046c
   11e5e:	ldr	r3, [sp, #32]
   11e60:	ldr.w	r2, [r3], #4
   11e64:	str	r3, [sp, #32]
   11e66:	movs	r3, #1
   11e68:	b.w	1159a <_svfprintf_r+0x54a>
   11e6c:	ldr	r3, [sp, #76]	; 0x4c
   11e6e:	cmp	r3, #0
   11e70:	beq.w	11212 <_svfprintf_r+0x1c2>
   11e74:	ldr	r3, [sp, #76]	; 0x4c
   11e76:	ldrb	r3, [r3, #0]
   11e78:	cmp	r3, #0
   11e7a:	beq.w	11212 <_svfprintf_r+0x1c2>
   11e7e:	ldrb.w	r3, [r9]
   11e82:	orr.w	r8, r8, #1024	; 0x400
   11e86:	b.w	11108 <_svfprintf_r+0xb8>
   11e8a:	str	r3, [sp, #44]	; 0x2c
   11e8c:	str.w	r8, [sp, #8]
   11e90:	b.w	11676 <_svfprintf_r+0x626>
   11e94:	str	r3, [sp, #44]	; 0x2c
   11e96:	ldr	r3, [pc, #616]	; (12100 <_svfprintf_r+0x10b0>)
   11e98:	str	r3, [sp, #68]	; 0x44
   11e9a:	ands.w	r1, r8, #32
   11e9e:	beq.w	120ac <_svfprintf_r+0x105c>
   11ea2:	ldr	r3, [sp, #32]
   11ea4:	adds	r3, #7
   11ea6:	bic.w	r3, r3, #7
   11eaa:	ldr	r1, [r3, #4]
   11eac:	ldr.w	r2, [r3], #8
   11eb0:	str	r3, [sp, #32]
   11eb2:	tst.w	r8, #1
   11eb6:	beq.n	11ece <_svfprintf_r+0xe7e>
   11eb8:	orrs.w	r3, r2, r1
   11ebc:	beq.n	11ece <_svfprintf_r+0xe7e>
   11ebe:	ldr	r3, [sp, #44]	; 0x2c
   11ec0:	strb.w	r3, [sp, #105]	; 0x69
   11ec4:	movs	r3, #48	; 0x30
   11ec6:	orr.w	r8, r8, #2
   11eca:	strb.w	r3, [sp, #104]	; 0x68
   11ece:	bic.w	r3, r8, #1024	; 0x400
   11ed2:	str	r3, [sp, #8]
   11ed4:	movs	r3, #2
   11ed6:	b.w	1159a <_svfprintf_r+0x54a>
   11eda:	str	r3, [sp, #44]	; 0x2c
   11edc:	b.w	1164c <_svfprintf_r+0x5fc>
   11ee0:	str	r3, [sp, #44]	; 0x2c
   11ee2:	ldr	r3, [pc, #544]	; (12104 <_svfprintf_r+0x10b4>)
   11ee4:	str	r3, [sp, #68]	; 0x44
   11ee6:	b.n	11e9a <_svfprintf_r+0xe4a>
   11ee8:	ldr	r3, [sp, #32]
   11eea:	movs	r1, #1
   11eec:	ldr.w	r2, [r3], #4
   11ef0:	str	r1, [sp, #8]
   11ef2:	strb.w	r2, [sp, #220]	; 0xdc
   11ef6:	str	r3, [sp, #32]
   11ef8:	str	r1, [sp, #20]
   11efa:	add	r4, sp, #220	; 0xdc
   11efc:	b.w	1145e <_svfprintf_r+0x40e>
   11f00:	vmov	r1, s22
   11f04:	add	r2, sp, #144	; 0x90
   11f06:	mov	r0, fp
   11f08:	bl	13db8 <__ssprint_r>
   11f0c:	cmp	r0, #0
   11f0e:	bne.w	1191a <_svfprintf_r+0x8ca>
   11f12:	ldr	r2, [sp, #152]	; 0x98
   11f14:	add.w	sl, sp, #156	; 0x9c
   11f18:	b.n	117d6 <_svfprintf_r+0x786>
   11f1a:	ldr	r3, [sp, #12]
   11f1c:	str	r4, [sp, #28]
   11f1e:	cmp	r3, #6
   11f20:	mov	r2, r4
   11f22:	it	cs
   11f24:	movcs	r3, #6
   11f26:	str	r4, [sp, #12]
   11f28:	mov	r1, r4
   11f2a:	strd	r2, r2, [sp, #48]	; 0x30
   11f2e:	ldr	r4, [pc, #472]	; (12108 <_svfprintf_r+0x10b8>)
   11f30:	str	r3, [sp, #8]
   11f32:	str	r3, [sp, #20]
   11f34:	str	r2, [sp, #60]	; 0x3c
   11f36:	b.w	11412 <_svfprintf_r+0x3c2>
   11f3a:	movs	r1, #64	; 0x40
   11f3c:	mov	r0, fp
   11f3e:	bl	f330 <_malloc_r>
   11f42:	str	r0, [r4, #0]
   11f44:	str	r0, [r4, #16]
   11f46:	cmp	r0, #0
   11f48:	beq.w	12b6a <_svfprintf_r+0x1b1a>
   11f4c:	movs	r3, #64	; 0x40
   11f4e:	str	r3, [r4, #20]
   11f50:	b.w	11090 <_svfprintf_r+0x40>
   11f54:	cmp	r5, #16
   11f56:	ldr	r3, [sp, #148]	; 0x94
   11f58:	ble.w	12416 <_svfprintf_r+0x13c6>
   11f5c:	mov	r1, sl
   11f5e:	movs	r6, #16
   11f60:	vmov	sl, s22
   11f64:	b.n	11f70 <_svfprintf_r+0xf20>
   11f66:	adds	r1, #8
   11f68:	subs	r5, #16
   11f6a:	cmp	r5, #16
   11f6c:	ble.w	12414 <_svfprintf_r+0x13c4>
   11f70:	adds	r3, #1
   11f72:	ldr	r0, [pc, #408]	; (1210c <_svfprintf_r+0x10bc>)
   11f74:	adds	r2, #16
   11f76:	cmp	r3, #7
   11f78:	strd	r0, r6, [r1]
   11f7c:	strd	r3, r2, [sp, #148]	; 0x94
   11f80:	ble.n	11f66 <_svfprintf_r+0xf16>
   11f82:	add	r2, sp, #144	; 0x90
   11f84:	mov	r1, sl
   11f86:	mov	r0, fp
   11f88:	bl	13db8 <__ssprint_r>
   11f8c:	cmp	r0, #0
   11f8e:	bne.w	1191a <_svfprintf_r+0x8ca>
   11f92:	ldrd	r3, r2, [sp, #148]	; 0x94
   11f96:	add	r1, sp, #156	; 0x9c
   11f98:	b.n	11f68 <_svfprintf_r+0xf18>
   11f9a:	ldr	r3, [sp, #56]	; 0x38
   11f9c:	str.w	r9, [sp, #36]	; 0x24
   11fa0:	adds	r3, r4, r3
   11fa2:	str	r3, [sp, #12]
   11fa4:	ldr	r3, [sp, #52]	; 0x34
   11fa6:	str.w	r8, [sp, #40]	; 0x28
   11faa:	ldr	r6, [sp, #76]	; 0x4c
   11fac:	ldr	r5, [sp, #20]
   11fae:	ldr.w	r9, [sp, #88]	; 0x58
   11fb2:	ldr.w	r8, [sp, #60]	; 0x3c
   11fb6:	str	r4, [sp, #44]	; 0x2c
   11fb8:	vmov	r1, s22
   11fbc:	mov	r0, sl
   11fbe:	cmp	r3, #0
   11fc0:	beq.n	1202c <_svfprintf_r+0xfdc>
   11fc2:	cmp.w	r8, #0
   11fc6:	bne.n	12034 <_svfprintf_r+0xfe4>
   11fc8:	ldr	r3, [sp, #52]	; 0x34
   11fca:	subs	r3, #1
   11fcc:	subs	r6, #1
   11fce:	str	r3, [sp, #52]	; 0x34
   11fd0:	ldr	r3, [sp, #84]	; 0x54
   11fd2:	strd	r3, r9, [r0]
   11fd6:	ldr	r3, [sp, #148]	; 0x94
   11fd8:	adds	r3, #1
   11fda:	add	r2, r9
   11fdc:	cmp	r3, #7
   11fde:	str	r2, [sp, #152]	; 0x98
   11fe0:	str	r3, [sp, #148]	; 0x94
   11fe2:	bgt.n	120be <_svfprintf_r+0x106e>
   11fe4:	adds	r0, #8
   11fe6:	ldr	r3, [sp, #12]
   11fe8:	ldrb.w	ip, [r6]
   11fec:	subs	r3, r3, r5
   11fee:	cmp	r3, ip
   11ff0:	it	ge
   11ff2:	movge	r3, ip
   11ff4:	cmp	r3, #0
   11ff6:	mov	sl, r3
   11ff8:	ble.n	12014 <_svfprintf_r+0xfc4>
   11ffa:	ldr	r4, [sp, #148]	; 0x94
   11ffc:	adds	r4, #1
   11ffe:	add	r2, r3
   12000:	cmp	r4, #7
   12002:	strd	r5, r3, [r0]
   12006:	str	r2, [sp, #152]	; 0x98
   12008:	str	r4, [sp, #148]	; 0x94
   1200a:	bgt.w	122fc <_svfprintf_r+0x12ac>
   1200e:	ldrb.w	ip, [r6]
   12012:	adds	r0, #8
   12014:	cmp.w	sl, #0
   12018:	ite	ge
   1201a:	subge.w	r4, ip, sl
   1201e:	movlt	r4, ip
   12020:	cmp	r4, #0
   12022:	bgt.n	1203a <_svfprintf_r+0xfea>
   12024:	add	r5, ip
   12026:	ldr	r3, [sp, #52]	; 0x34
   12028:	cmp	r3, #0
   1202a:	bne.n	11fc2 <_svfprintf_r+0xf72>
   1202c:	cmp.w	r8, #0
   12030:	beq.w	1278c <_svfprintf_r+0x173c>
   12034:	add.w	r8, r8, #4294967295
   12038:	b.n	11fd0 <_svfprintf_r+0xf80>
   1203a:	cmp	r4, #16
   1203c:	ldr.w	ip, [sp, #148]	; 0x94
   12040:	ble.n	1208c <_svfprintf_r+0x103c>
   12042:	str	r5, [sp, #20]
   12044:	mov.w	sl, #16
   12048:	mov	r3, ip
   1204a:	mov	r5, r1
   1204c:	b.n	12058 <_svfprintf_r+0x1008>
   1204e:	subs	r4, #16
   12050:	cmp	r4, #16
   12052:	add.w	r0, r0, #8
   12056:	ble.n	12086 <_svfprintf_r+0x1036>
   12058:	adds	r3, #1
   1205a:	ldr	r1, [pc, #176]	; (1210c <_svfprintf_r+0x10bc>)
   1205c:	adds	r2, #16
   1205e:	cmp	r3, #7
   12060:	strd	r1, sl, [r0]
   12064:	strd	r3, r2, [sp, #148]	; 0x94
   12068:	ble.n	1204e <_svfprintf_r+0xffe>
   1206a:	add	r2, sp, #144	; 0x90
   1206c:	mov	r1, r5
   1206e:	mov	r0, fp
   12070:	bl	13db8 <__ssprint_r>
   12074:	cmp	r0, #0
   12076:	bne.w	1191a <_svfprintf_r+0x8ca>
   1207a:	subs	r4, #16
   1207c:	cmp	r4, #16
   1207e:	ldrd	r3, r2, [sp, #148]	; 0x94
   12082:	add	r0, sp, #156	; 0x9c
   12084:	bgt.n	12058 <_svfprintf_r+0x1008>
   12086:	mov	r1, r5
   12088:	ldr	r5, [sp, #20]
   1208a:	mov	ip, r3
   1208c:	add.w	r3, ip, #1
   12090:	add	r2, r4
   12092:	str	r4, [r0, #4]
   12094:	cmp	r3, #7
   12096:	ldr	r4, [pc, #116]	; (1210c <_svfprintf_r+0x10bc>)
   12098:	str	r4, [r0, #0]
   1209a:	strd	r3, r2, [sp, #148]	; 0x94
   1209e:	bgt.w	1282e <_svfprintf_r+0x17de>
   120a2:	ldrb.w	ip, [r6]
   120a6:	adds	r0, #8
   120a8:	add	r5, ip
   120aa:	b.n	12026 <_svfprintf_r+0xfd6>
   120ac:	ands.w	r3, r8, #16
   120b0:	beq.w	12238 <_svfprintf_r+0x11e8>
   120b4:	ldr	r3, [sp, #32]
   120b6:	ldr.w	r2, [r3], #4
   120ba:	str	r3, [sp, #32]
   120bc:	b.n	11eb2 <_svfprintf_r+0xe62>
   120be:	add	r2, sp, #144	; 0x90
   120c0:	mov	r0, fp
   120c2:	str	r1, [sp, #20]
   120c4:	bl	13db8 <__ssprint_r>
   120c8:	cmp	r0, #0
   120ca:	bne.w	1191a <_svfprintf_r+0x8ca>
   120ce:	ldr	r2, [sp, #152]	; 0x98
   120d0:	ldr	r1, [sp, #20]
   120d2:	add	r0, sp, #156	; 0x9c
   120d4:	b.n	11fe6 <_svfprintf_r+0xf96>
   120d6:	ldr	r0, [sp, #8]
   120d8:	str.w	sl, [sp, #28]
   120dc:	add	r4, sp, #320	; 0x140
   120de:	and.w	r0, r0, #1024	; 0x400
   120e2:	movs	r5, #0
   120e4:	vmov	s20, fp
   120e8:	ldr	r3, [pc, #36]	; (12110 <_svfprintf_r+0x10c0>)
   120ea:	ldr.w	sl, [sp, #76]	; 0x4c
   120ee:	str.w	r9, [sp, #20]
   120f2:	mov	fp, r4
   120f4:	mov.w	r8, #5
   120f8:	mov	ip, r5
   120fa:	mov	r4, r0
   120fc:	b.n	12120 <_svfprintf_r+0x10d0>
   120fe:	nop
   12100:	.word	0x20000d50
   12104:	.word	0x20000d64
   12108:	.word	0x20000d78
   1210c:	.word	0x20001ac4
   12110:	.word	0xcccccccd
   12114:	cmp	r2, #10
   12116:	sbcs.w	r1, r1, #0
   1211a:	bcc.n	1218a <_svfprintf_r+0x113a>
   1211c:	mov	r2, r9
   1211e:	mov	r1, r6
   12120:	adds	r0, r2, r1
   12122:	adc.w	r0, r0, #0
   12126:	umull	r5, r6, r3, r0
   1212a:	bic.w	r5, r6, #3
   1212e:	add.w	r5, r5, r6, lsr #2
   12132:	subs	r0, r0, r5
   12134:	subs	r5, r2, r0
   12136:	mov.w	r6, #3435973836	; 0xcccccccc
   1213a:	sbc.w	lr, r1, #0
   1213e:	mul.w	r6, r6, r5
   12142:	umull	r9, r5, r5, r3
   12146:	mla	r6, r3, lr, r6
   1214a:	and.w	lr, r9, #1
   1214e:	add	r6, r5
   12150:	umull	r5, lr, lr, r8
   12154:	adds	r5, r5, r0
   12156:	mov.w	r9, r9, lsr #1
   1215a:	adds	r5, #48	; 0x30
   1215c:	strb.w	r5, [fp, #-1]
   12160:	orr.w	r9, r9, r6, lsl #31
   12164:	add.w	ip, ip, #1
   12168:	add.w	fp, fp, #4294967295
   1216c:	lsrs	r6, r6, #1
   1216e:	cmp	r4, #0
   12170:	beq.n	12114 <_svfprintf_r+0x10c4>
   12172:	ldrb.w	r0, [sl]
   12176:	cmp	ip, r0
   12178:	bne.n	12114 <_svfprintf_r+0x10c4>
   1217a:	cmp.w	ip, #255	; 0xff
   1217e:	beq.n	12114 <_svfprintf_r+0x10c4>
   12180:	cmp	r2, #10
   12182:	sbcs.w	r1, r1, #0
   12186:	bcs.w	124a8 <_svfprintf_r+0x1458>
   1218a:	mov	r4, fp
   1218c:	add	r3, sp, #320	; 0x140
   1218e:	subs	r3, r3, r4
   12190:	ldr.w	r9, [sp, #20]
   12194:	str.w	sl, [sp, #76]	; 0x4c
   12198:	vmov	fp, s20
   1219c:	ldr.w	sl, [sp, #28]
   121a0:	ldr.w	r8, [sp, #8]
   121a4:	str.w	ip, [sp, #56]	; 0x38
   121a8:	str	r3, [sp, #20]
   121aa:	b.w	11732 <_svfprintf_r+0x6e2>
   121ae:	vmov	r1, s22
   121b2:	add	r2, sp, #144	; 0x90
   121b4:	mov	r0, fp
   121b6:	bl	13db8 <__ssprint_r>
   121ba:	cmp	r0, #0
   121bc:	bne.w	1191a <_svfprintf_r+0x8ca>
   121c0:	ldrb.w	r1, [sp, #103]	; 0x67
   121c4:	ldr	r2, [sp, #152]	; 0x98
   121c6:	add.w	sl, sp, #156	; 0x9c
   121ca:	b.w	112fa <_svfprintf_r+0x2aa>
   121ce:	ldr	r3, [sp, #148]	; 0x94
   121d0:	ldr	r0, [pc, #760]	; (124cc <_svfprintf_r+0x147c>)
   121d2:	str.w	r0, [sl]
   121d6:	adds	r3, #1
   121d8:	adds	r2, #1
   121da:	movs	r0, #1
   121dc:	cmp	r3, #7
   121de:	str	r2, [sp, #152]	; 0x98
   121e0:	str	r3, [sp, #148]	; 0x94
   121e2:	str.w	r0, [sl, #4]
   121e6:	bgt.w	124d8 <_svfprintf_r+0x1488>
   121ea:	add.w	sl, sl, #8
   121ee:	cmp	r1, #0
   121f0:	bne.w	12352 <_svfprintf_r+0x1302>
   121f4:	ldr	r1, [sp, #56]	; 0x38
   121f6:	and.w	r3, r8, #1
   121fa:	orrs	r3, r1
   121fc:	beq.w	11380 <_svfprintf_r+0x330>
   12200:	ldr	r3, [sp, #64]	; 0x40
   12202:	ldr	r1, [sp, #72]	; 0x48
   12204:	add	r2, r3
   12206:	strd	r1, r3, [sl]
   1220a:	ldr	r3, [sp, #148]	; 0x94
   1220c:	str	r2, [sp, #152]	; 0x98
   1220e:	adds	r3, #1
   12210:	cmp	r3, #7
   12212:	str	r3, [sp, #148]	; 0x94
   12214:	bgt.w	126bc <_svfprintf_r+0x166c>
   12218:	add.w	sl, sl, #8
   1221c:	ldr	r1, [sp, #56]	; 0x38
   1221e:	str.w	r4, [sl]
   12222:	adds	r3, #1
   12224:	add	r2, r1
   12226:	cmp	r3, #7
   12228:	strd	r3, r2, [sp, #148]	; 0x94
   1222c:	str.w	r1, [sl, #4]
   12230:	ble.w	1137c <_svfprintf_r+0x32c>
   12234:	b.w	119b2 <_svfprintf_r+0x962>
   12238:	ands.w	r2, r8, #64	; 0x40
   1223c:	beq.w	123fa <_svfprintf_r+0x13aa>
   12240:	ldr	r0, [sp, #32]
   12242:	ldr.w	r2, [r0], #4
   12246:	str	r0, [sp, #32]
   12248:	mov	r1, r3
   1224a:	uxth	r2, r2
   1224c:	b.n	11eb2 <_svfprintf_r+0xe62>
   1224e:	vmov	r1, s22
   12252:	add	r2, sp, #144	; 0x90
   12254:	mov	r0, fp
   12256:	bl	13db8 <__ssprint_r>
   1225a:	cmp	r0, #0
   1225c:	bne.w	1191a <_svfprintf_r+0x8ca>
   12260:	ldr	r2, [sp, #152]	; 0x98
   12262:	add.w	sl, sp, #156	; 0x9c
   12266:	b.w	117b0 <_svfprintf_r+0x760>
   1226a:	add	r6, sp, #136	; 0x88
   1226c:	movs	r2, #8
   1226e:	movs	r1, #0
   12270:	mov	r0, r6
   12272:	str	r4, [sp, #116]	; 0x74
   12274:	bl	10104 <memset>
   12278:	ldr	r3, [sp, #12]
   1227a:	adds	r2, r3, #1
   1227c:	beq.w	12436 <_svfprintf_r+0x13e6>
   12280:	movs	r5, #0
   12282:	str.w	r9, [sp, #8]
   12286:	str.w	r8, [sp, #28]
   1228a:	mov	r9, r3
   1228c:	mov	r8, r5
   1228e:	b.n	122aa <_svfprintf_r+0x125a>
   12290:	add	r1, sp, #220	; 0xdc
   12292:	mov	r0, fp
   12294:	bl	13d2c <_wcrtomb_r>
   12298:	adds	r3, r0, #1
   1229a:	add	r0, r8
   1229c:	beq.w	12a30 <_svfprintf_r+0x19e0>
   122a0:	cmp	r0, r9
   122a2:	bgt.n	122b6 <_svfprintf_r+0x1266>
   122a4:	beq.w	12ad8 <_svfprintf_r+0x1a88>
   122a8:	mov	r8, r0
   122aa:	ldr	r2, [sp, #116]	; 0x74
   122ac:	ldr	r2, [r2, r5]
   122ae:	mov	r3, r6
   122b0:	adds	r5, #4
   122b2:	cmp	r2, #0
   122b4:	bne.n	12290 <_svfprintf_r+0x1240>
   122b6:	str.w	r8, [sp, #20]
   122ba:	ldr.w	r9, [sp, #8]
   122be:	ldr.w	r8, [sp, #28]
   122c2:	b.n	12450 <_svfprintf_r+0x1400>
   122c4:	adds	r3, #1
   122c6:	ldr	r1, [pc, #520]	; (124d0 <_svfprintf_r+0x1480>)
   122c8:	str.w	r4, [sl, #4]
   122cc:	add	r2, r4
   122ce:	cmp	r3, #7
   122d0:	str.w	r1, [sl]
   122d4:	strd	r3, r2, [sp, #148]	; 0x94
   122d8:	ble.w	1137c <_svfprintf_r+0x32c>
   122dc:	b.w	119b2 <_svfprintf_r+0x962>
   122e0:	vmov	r1, s22
   122e4:	add	r2, sp, #144	; 0x90
   122e6:	mov	r0, fp
   122e8:	bl	13db8 <__ssprint_r>
   122ec:	cmp	r0, #0
   122ee:	bne.w	1191a <_svfprintf_r+0x8ca>
   122f2:	ldr	r2, [sp, #152]	; 0x98
   122f4:	add.w	sl, sp, #156	; 0x9c
   122f8:	b.w	1134e <_svfprintf_r+0x2fe>
   122fc:	add	r2, sp, #144	; 0x90
   122fe:	mov	r0, fp
   12300:	str	r1, [sp, #20]
   12302:	bl	13db8 <__ssprint_r>
   12306:	cmp	r0, #0
   12308:	bne.w	1191a <_svfprintf_r+0x8ca>
   1230c:	ldrb.w	ip, [r6]
   12310:	ldr	r2, [sp, #152]	; 0x98
   12312:	ldr	r1, [sp, #20]
   12314:	add	r0, sp, #156	; 0x9c
   12316:	b.n	12014 <_svfprintf_r+0xfc4>
   12318:	cmp	r3, #1
   1231a:	str.w	r8, [sp, #8]
   1231e:	bne.w	11708 <_svfprintf_r+0x6b8>
   12322:	b.w	11a4c <_svfprintf_r+0x9fc>
   12326:	ldr	r3, [sp, #32]
   12328:	ldr	r1, [sp, #16]
   1232a:	ldr.w	r2, [r3], #4
   1232e:	mov	r4, r9
   12330:	str	r1, [r2, #0]
   12332:	str	r3, [sp, #32]
   12334:	b.w	110b4 <_svfprintf_r+0x64>
   12338:	adds	r3, #1
   1233a:	ldr	r1, [pc, #404]	; (124d0 <_svfprintf_r+0x1480>)
   1233c:	str.w	r4, [sl, #4]
   12340:	add	r2, r4
   12342:	cmp	r3, #7
   12344:	strd	r3, r2, [sp, #148]	; 0x94
   12348:	str.w	r1, [sl]
   1234c:	ble.w	11994 <_svfprintf_r+0x944>
   12350:	b.n	11c4a <_svfprintf_r+0xbfa>
   12352:	ldr	r3, [sp, #64]	; 0x40
   12354:	ldr	r0, [sp, #72]	; 0x48
   12356:	add	r2, r3
   12358:	strd	r0, r3, [sl]
   1235c:	ldr	r3, [sp, #148]	; 0x94
   1235e:	str	r2, [sp, #152]	; 0x98
   12360:	adds	r3, #1
   12362:	cmp	r3, #7
   12364:	str	r3, [sp, #148]	; 0x94
   12366:	bgt.w	126bc <_svfprintf_r+0x166c>
   1236a:	add.w	sl, sl, #8
   1236e:	cmp	r1, #0
   12370:	bge.w	1221c <_svfprintf_r+0x11cc>
   12374:	negs	r5, r1
   12376:	adds	r1, #16
   12378:	bge.w	1299a <_svfprintf_r+0x194a>
   1237c:	vmov	r1, s22
   12380:	movs	r6, #16
   12382:	b.n	12390 <_svfprintf_r+0x1340>
   12384:	add.w	sl, sl, #8
   12388:	subs	r5, #16
   1238a:	cmp	r5, #16
   1238c:	ble.w	1299a <_svfprintf_r+0x194a>
   12390:	adds	r3, #1
   12392:	ldr	r0, [pc, #316]	; (124d0 <_svfprintf_r+0x1480>)
   12394:	adds	r2, #16
   12396:	cmp	r3, #7
   12398:	strd	r0, r6, [sl]
   1239c:	strd	r3, r2, [sp, #148]	; 0x94
   123a0:	ble.n	12384 <_svfprintf_r+0x1334>
   123a2:	add	r2, sp, #144	; 0x90
   123a4:	mov	r0, fp
   123a6:	str	r1, [sp, #12]
   123a8:	bl	13db8 <__ssprint_r>
   123ac:	cmp	r0, #0
   123ae:	bne.w	1191a <_svfprintf_r+0x8ca>
   123b2:	ldrd	r3, r2, [sp, #148]	; 0x94
   123b6:	ldr	r1, [sp, #12]
   123b8:	add.w	sl, sp, #156	; 0x9c
   123bc:	b.n	12388 <_svfprintf_r+0x1338>
   123be:	ldr	r3, [sp, #32]
   123c0:	ands.w	r1, r8, #512	; 0x200
   123c4:	itte	ne
   123c6:	movne	r1, r2
   123c8:	ldrne.w	r2, [r3], #4
   123cc:	ldreq.w	r2, [r3], #4
   123d0:	str	r3, [sp, #32]
   123d2:	it	ne
   123d4:	uxtbne	r2, r2
   123d6:	b.w	11664 <_svfprintf_r+0x614>
   123da:	ldr	r3, [sp, #8]
   123dc:	ands.w	r1, r3, #512	; 0x200
   123e0:	ldr	r3, [sp, #32]
   123e2:	itte	ne
   123e4:	movne	r1, r2
   123e6:	ldrne.w	r2, [r3], #4
   123ea:	ldreq.w	r2, [r3], #4
   123ee:	str	r3, [sp, #32]
   123f0:	it	ne
   123f2:	uxtbne	r2, r2
   123f4:	movs	r3, #1
   123f6:	b.w	1159a <_svfprintf_r+0x54a>
   123fa:	ldr	r3, [sp, #32]
   123fc:	ands.w	r1, r8, #512	; 0x200
   12400:	itte	ne
   12402:	movne	r1, r2
   12404:	ldrne.w	r2, [r3], #4
   12408:	ldreq.w	r2, [r3], #4
   1240c:	str	r3, [sp, #32]
   1240e:	it	ne
   12410:	uxtbne	r2, r2
   12412:	b.n	11eb2 <_svfprintf_r+0xe62>
   12414:	mov	sl, r1
   12416:	adds	r3, #1
   12418:	ldr	r1, [pc, #180]	; (124d0 <_svfprintf_r+0x1480>)
   1241a:	str.w	r5, [sl, #4]
   1241e:	add	r2, r5
   12420:	cmp	r3, #7
   12422:	strd	r3, r2, [sp, #148]	; 0x94
   12426:	str.w	r1, [sl]
   1242a:	bgt.w	126a0 <_svfprintf_r+0x1650>
   1242e:	add.w	sl, sl, #8
   12432:	b.w	11b4e <_svfprintf_r+0xafe>
   12436:	movs	r3, #0
   12438:	mov	r1, r3
   1243a:	str	r6, [sp, #0]
   1243c:	add	r2, sp, #116	; 0x74
   1243e:	mov	r0, fp
   12440:	bl	13d78 <_wcsrtombs_r>
   12444:	mov	r3, r0
   12446:	adds	r3, #1
   12448:	str	r0, [sp, #20]
   1244a:	beq.w	12a30 <_svfprintf_r+0x19e0>
   1244e:	str	r4, [sp, #116]	; 0x74
   12450:	ldr	r3, [sp, #20]
   12452:	cmp	r3, #0
   12454:	beq.n	124f4 <_svfprintf_r+0x14a4>
   12456:	cmp	r3, #99	; 0x63
   12458:	bgt.w	1268c <_svfprintf_r+0x163c>
   1245c:	movs	r3, #0
   1245e:	str	r3, [sp, #28]
   12460:	add	r4, sp, #220	; 0xdc
   12462:	movs	r2, #8
   12464:	movs	r1, #0
   12466:	mov	r0, r6
   12468:	bl	10104 <memset>
   1246c:	ldr	r5, [sp, #20]
   1246e:	str	r6, [sp, #0]
   12470:	mov	r3, r5
   12472:	add	r2, sp, #116	; 0x74
   12474:	mov	r1, r4
   12476:	mov	r0, fp
   12478:	bl	13d78 <_wcsrtombs_r>
   1247c:	cmp	r5, r0
   1247e:	bne.w	12b7a <_svfprintf_r+0x1b2a>
   12482:	ldr	r2, [sp, #20]
   12484:	movs	r3, #0
   12486:	strb	r3, [r4, r2]
   12488:	bic.w	r2, r2, r2, asr #31
   1248c:	strd	r3, r3, [sp, #48]	; 0x30
   12490:	ldrb.w	r1, [sp, #103]	; 0x67
   12494:	str	r3, [sp, #12]
   12496:	str	r2, [sp, #8]
   12498:	str	r3, [sp, #60]	; 0x3c
   1249a:	b.w	11412 <_svfprintf_r+0x3c2>
   1249e:	movs	r1, #45	; 0x2d
   124a0:	strb.w	r1, [sp, #103]	; 0x67
   124a4:	b.w	113f0 <_svfprintf_r+0x3a0>
   124a8:	ldr	r3, [sp, #88]	; 0x58
   124aa:	ldr	r1, [sp, #84]	; 0x54
   124ac:	sub.w	fp, fp, r3
   124b0:	mov	r2, r3
   124b2:	mov	r0, fp
   124b4:	bl	10234 <strncpy>
   124b8:	ldrb.w	r2, [sl, #1]
   124bc:	ldr	r3, [pc, #20]	; (124d4 <_svfprintf_r+0x1484>)
   124be:	cbz	r2, 124c4 <_svfprintf_r+0x1474>
   124c0:	add.w	sl, sl, #1
   124c4:	mov.w	ip, #0
   124c8:	b.n	1211c <_svfprintf_r+0x10cc>
   124ca:	nop
   124cc:	.word	0x20000d80
   124d0:	.word	0x20001ac4
   124d4:	.word	0xcccccccd
   124d8:	vmov	r1, s22
   124dc:	add	r2, sp, #144	; 0x90
   124de:	mov	r0, fp
   124e0:	bl	13db8 <__ssprint_r>
   124e4:	cmp	r0, #0
   124e6:	bne.w	1191a <_svfprintf_r+0x8ca>
   124ea:	ldr	r1, [sp, #108]	; 0x6c
   124ec:	ldr	r2, [sp, #152]	; 0x98
   124ee:	add.w	sl, sp, #156	; 0x9c
   124f2:	b.n	121ee <_svfprintf_r+0x119e>
   124f4:	ldr	r3, [sp, #20]
   124f6:	ldrb.w	r1, [sp, #103]	; 0x67
   124fa:	str	r3, [sp, #60]	; 0x3c
   124fc:	strd	r3, r3, [sp, #8]
   12500:	strd	r3, r3, [sp, #48]	; 0x30
   12504:	str	r3, [sp, #28]
   12506:	b.w	11412 <_svfprintf_r+0x3c2>
   1250a:	ldr	r1, [sp, #56]	; 0x38
   1250c:	ldr	r0, [sp, #20]
   1250e:	adds	r5, r4, r1
   12510:	subs	r5, r5, r0
   12512:	subs	r4, r1, r3
   12514:	cmp	r5, r4
   12516:	it	ge
   12518:	movge	r5, r4
   1251a:	b.w	11bb8 <_svfprintf_r+0xb68>
   1251e:	ldr	r3, [sp, #32]
   12520:	ldr	r1, [sp, #16]
   12522:	ldr.w	r2, [r3], #4
   12526:	str	r3, [sp, #32]
   12528:	strh	r1, [r2, #0]
   1252a:	mov	r4, r9
   1252c:	b.w	110b4 <_svfprintf_r+0x64>
   12530:	ldrsb.w	r2, [r3], #4
   12534:	str	r3, [sp, #32]
   12536:	asrs	r1, r2, #31
   12538:	mov	r3, r1
   1253a:	b.w	114f4 <_svfprintf_r+0x4a4>
   1253e:	ldr	r2, [sp, #12]
   12540:	movs	r1, #2
   12542:	add	r3, sp, #136	; 0x88
   12544:	str	r3, [sp, #4]
   12546:	add	r3, sp, #116	; 0x74
   12548:	str	r3, [sp, #0]
   1254a:	mov	r0, fp
   1254c:	add	r3, sp, #108	; 0x6c
   1254e:	vmov.f64	d0, d10
   12552:	str	r2, [sp, #8]
   12554:	bl	13040 <_dtoa_r>
   12558:	cmp	r5, #71	; 0x47
   1255a:	ldr	r2, [sp, #8]
   1255c:	mov	r4, r0
   1255e:	beq.w	12824 <_svfprintf_r+0x17d4>
   12562:	cmp	r5, #70	; 0x46
   12564:	add	r0, r2
   12566:	bne.n	12574 <_svfprintf_r+0x1524>
   12568:	ldrb	r3, [r4, #0]
   1256a:	cmp	r3, #48	; 0x30
   1256c:	beq.w	12a4e <_svfprintf_r+0x19fe>
   12570:	ldr	r2, [sp, #108]	; 0x6c
   12572:	add	r0, r2
   12574:	vcmp.f64	d10, #0.0
   12578:	vmrs	APSR_nzcv, fpscr
   1257c:	bne.w	1280c <_svfprintf_r+0x17bc>
   12580:	mov	r3, r0
   12582:	subs	r3, r3, r4
   12584:	str	r3, [sp, #56]	; 0x38
   12586:	cmp	r5, #71	; 0x47
   12588:	beq.w	127ac <_svfprintf_r+0x175c>
   1258c:	cmp	r5, #70	; 0x46
   1258e:	beq.w	128fc <_svfprintf_r+0x18ac>
   12592:	ldr	r3, [sp, #108]	; 0x6c
   12594:	str	r3, [sp, #48]	; 0x30
   12596:	ldr	r3, [sp, #48]	; 0x30
   12598:	cmp	r5, #65	; 0x41
   1259a:	add.w	r3, r3, #4294967295
   1259e:	str	r3, [sp, #108]	; 0x6c
   125a0:	beq.w	1296e <_svfprintf_r+0x191e>
   125a4:	ldrb.w	r2, [sp, #44]	; 0x2c
   125a8:	movs	r1, #0
   125aa:	cmp	r3, #0
   125ac:	it	lt
   125ae:	ldrlt	r3, [sp, #48]	; 0x30
   125b0:	strb.w	r2, [sp, #120]	; 0x78
   125b4:	itte	lt
   125b6:	rsblt	r3, r3, #1
   125ba:	movlt	r2, #45	; 0x2d
   125bc:	movge	r2, #43	; 0x2b
   125be:	cmp	r3, #9
   125c0:	strb.w	r2, [sp, #121]	; 0x79
   125c4:	ble.w	1297c <_svfprintf_r+0x192c>
   125c8:	add.w	r5, sp, #143	; 0x8f
   125cc:	ldr.w	ip, [pc, #1052]	; 129ec <_svfprintf_r+0x199c>
   125d0:	mov	r2, r5
   125d2:	mov	r0, r2
   125d4:	smull	r2, r1, ip, r3
   125d8:	asrs	r2, r3, #31
   125da:	rsb	r2, r2, r1, asr #2
   125de:	add.w	r1, r2, r2, lsl #2
   125e2:	sub.w	r1, r3, r1, lsl #1
   125e6:	adds	r1, #48	; 0x30
   125e8:	strb.w	r1, [r0, #-1]
   125ec:	mov	r1, r3
   125ee:	cmp	r1, #99	; 0x63
   125f0:	mov	r3, r2
   125f2:	add.w	r2, r0, #4294967295
   125f6:	bgt.n	125d2 <_svfprintf_r+0x1582>
   125f8:	adds	r3, #48	; 0x30
   125fa:	uxtb	r1, r3
   125fc:	subs	r3, r0, #2
   125fe:	cmp	r5, r3
   12600:	strb.w	r1, [r2, #-1]
   12604:	bls.w	12b1e <_svfprintf_r+0x1ace>
   12608:	mov	r3, r2
   1260a:	add.w	r2, sp, #122	; 0x7a
   1260e:	b.n	12614 <_svfprintf_r+0x15c4>
   12610:	ldrb.w	r1, [r3], #1
   12614:	strb.w	r1, [r2], #1
   12618:	cmp	r5, r3
   1261a:	bne.n	12610 <_svfprintf_r+0x15c0>
   1261c:	add.w	r3, sp, #145	; 0x91
   12620:	add.w	r2, sp, #122	; 0x7a
   12624:	subs	r3, r3, r0
   12626:	add	r3, r2
   12628:	add	r2, sp, #120	; 0x78
   1262a:	subs	r3, r3, r2
   1262c:	str	r3, [sp, #80]	; 0x50
   1262e:	ldr	r3, [sp, #56]	; 0x38
   12630:	ldr	r2, [sp, #80]	; 0x50
   12632:	cmp	r3, #1
   12634:	add	r2, r3
   12636:	str	r2, [sp, #20]
   12638:	ble.w	12a42 <_svfprintf_r+0x19f2>
   1263c:	ldr	r3, [sp, #20]
   1263e:	ldr	r2, [sp, #64]	; 0x40
   12640:	add	r3, r2
   12642:	str	r3, [sp, #20]
   12644:	bic.w	r3, r6, #1024	; 0x400
   12648:	ldr	r2, [sp, #20]
   1264a:	orr.w	r8, r3, #256	; 0x100
   1264e:	movs	r3, #0
   12650:	strd	r3, r3, [sp, #48]	; 0x30
   12654:	bic.w	r2, r2, r2, asr #31
   12658:	str	r3, [sp, #60]	; 0x3c
   1265a:	str	r2, [sp, #8]
   1265c:	ldr	r3, [sp, #36]	; 0x24
   1265e:	cmp	r3, #0
   12660:	bne.w	127c6 <_svfprintf_r+0x1776>
   12664:	ldrb.w	r1, [sp, #103]	; 0x67
   12668:	str	r3, [sp, #12]
   1266a:	b.w	11412 <_svfprintf_r+0x3c2>
   1266e:	mov	r0, r4
   12670:	bl	10480 <strlen>
   12674:	mov	r2, r0
   12676:	str	r0, [sp, #20]
   12678:	b.w	114bc <_svfprintf_r+0x46c>
   1267c:	vmov	r1, s22
   12680:	add	r2, sp, #144	; 0x90
   12682:	mov	r0, fp
   12684:	bl	13db8 <__ssprint_r>
   12688:	b.w	11266 <_svfprintf_r+0x216>
   1268c:	adds	r1, r3, #1
   1268e:	mov	r0, fp
   12690:	bl	f330 <_malloc_r>
   12694:	mov	r4, r0
   12696:	cmp	r0, #0
   12698:	beq.w	12a30 <_svfprintf_r+0x19e0>
   1269c:	str	r0, [sp, #28]
   1269e:	b.n	12462 <_svfprintf_r+0x1412>
   126a0:	vmov	r1, s22
   126a4:	add	r2, sp, #144	; 0x90
   126a6:	mov	r0, fp
   126a8:	bl	13db8 <__ssprint_r>
   126ac:	cmp	r0, #0
   126ae:	bne.w	1191a <_svfprintf_r+0x8ca>
   126b2:	ldr	r2, [sp, #152]	; 0x98
   126b4:	add.w	sl, sp, #156	; 0x9c
   126b8:	b.w	11b4e <_svfprintf_r+0xafe>
   126bc:	vmov	r1, s22
   126c0:	add	r2, sp, #144	; 0x90
   126c2:	mov	r0, fp
   126c4:	bl	13db8 <__ssprint_r>
   126c8:	cmp	r0, #0
   126ca:	bne.w	1191a <_svfprintf_r+0x8ca>
   126ce:	ldrd	r3, r2, [sp, #148]	; 0x94
   126d2:	ldr	r1, [sp, #108]	; 0x6c
   126d4:	add.w	sl, sp, #156	; 0x9c
   126d8:	b.n	1236e <_svfprintf_r+0x131e>
   126da:	movs	r3, #6
   126dc:	str	r3, [sp, #12]
   126de:	b.w	11de8 <_svfprintf_r+0xd98>
   126e2:	ldr	r3, [sp, #12]
   126e4:	movs	r1, #2
   126e6:	adds	r2, r3, #1
   126e8:	b.n	12542 <_svfprintf_r+0x14f2>
   126ea:	ldr	r2, [sp, #12]
   126ec:	movs	r1, #3
   126ee:	b.n	12542 <_svfprintf_r+0x14f2>
   126f0:	add	r0, sp, #108	; 0x6c
   126f2:	vmov.f64	d0, d10
   126f6:	bl	12de8 <frexp>
   126fa:	vmov.f64	d7, #64	; 0x3e000000  0.125
   126fe:	vmul.f64	d0, d0, d7
   12702:	vcmp.f64	d0, #0.0
   12706:	vmrs	APSR_nzcv, fpscr
   1270a:	bne.n	12710 <_svfprintf_r+0x16c0>
   1270c:	movs	r3, #1
   1270e:	str	r3, [sp, #108]	; 0x6c
   12710:	ldr	r0, [pc, #716]	; (129e0 <_svfprintf_r+0x1990>)
   12712:	ldr	r3, [sp, #12]
   12714:	vmov.f64	d5, #48	; 0x41800000  16.0
   12718:	subs	r3, #1
   1271a:	mov	r2, r4
   1271c:	b.n	12728 <_svfprintf_r+0x16d8>
   1271e:	vcmp.f64	d0, #0.0
   12722:	vmrs	APSR_nzcv, fpscr
   12726:	beq.n	12750 <_svfprintf_r+0x1700>
   12728:	vmul.f64	d0, d0, d5
   1272c:	vcvt.s32.f64	s15, d0
   12730:	cmp.w	r3, #4294967295
   12734:	vmov	r1, s15
   12738:	ldrb	r1, [r0, r1]
   1273a:	vcvt.f64.s32	d6, s15
   1273e:	mov	ip, r2
   12740:	vsub.f64	d0, d0, d6
   12744:	strb.w	r1, [r2], #1
   12748:	mov	r1, r3
   1274a:	add.w	r3, r3, #4294967295
   1274e:	bne.n	1271e <_svfprintf_r+0x16ce>
   12750:	vmov.f64	d6, #96	; 0x3f000000  0.5
   12754:	vcmpe.f64	d0, d6
   12758:	vmrs	APSR_nzcv, fpscr
   1275c:	bgt.w	129f0 <_svfprintf_r+0x19a0>
   12760:	vcmp.f64	d0, d6
   12764:	vmrs	APSR_nzcv, fpscr
   12768:	bne.n	12774 <_svfprintf_r+0x1724>
   1276a:	vmov	r3, s15
   1276e:	lsls	r3, r3, #31
   12770:	bmi.w	129f0 <_svfprintf_r+0x19a0>
   12774:	cmp	r1, #0
   12776:	blt.n	12786 <_svfprintf_r+0x1736>
   12778:	adds	r3, r1, #1
   1277a:	add	r3, r2
   1277c:	movs	r1, #48	; 0x30
   1277e:	strb.w	r1, [r2], #1
   12782:	cmp	r3, r2
   12784:	bne.n	1277e <_svfprintf_r+0x172e>
   12786:	subs	r3, r2, r4
   12788:	str	r3, [sp, #56]	; 0x38
   1278a:	b.n	12586 <_svfprintf_r+0x1536>
   1278c:	ldr	r4, [sp, #44]	; 0x2c
   1278e:	ldr	r3, [sp, #56]	; 0x38
   12790:	ldr.w	r9, [sp, #36]	; 0x24
   12794:	ldr.w	r8, [sp, #40]	; 0x28
   12798:	str	r6, [sp, #76]	; 0x4c
   1279a:	adds	r3, r4, r3
   1279c:	cmp	r5, r3
   1279e:	mov	r1, r5
   127a0:	it	cs
   127a2:	movcs	r1, r3
   127a4:	mov	sl, r0
   127a6:	str	r1, [sp, #20]
   127a8:	b.w	11b5c <_svfprintf_r+0xb0c>
   127ac:	ldr	r3, [sp, #108]	; 0x6c
   127ae:	str	r3, [sp, #48]	; 0x30
   127b0:	adds	r2, r3, #3
   127b2:	blt.n	127ba <_svfprintf_r+0x176a>
   127b4:	ldr	r2, [sp, #12]
   127b6:	cmp	r3, r2
   127b8:	ble.n	127d4 <_svfprintf_r+0x1784>
   127ba:	ldr	r3, [sp, #44]	; 0x2c
   127bc:	subs	r3, #2
   127be:	str	r3, [sp, #44]	; 0x2c
   127c0:	bic.w	r5, r3, #32
   127c4:	b.n	12596 <_svfprintf_r+0x1546>
   127c6:	movs	r1, #45	; 0x2d
   127c8:	movs	r3, #0
   127ca:	strb.w	r1, [sp, #103]	; 0x67
   127ce:	str	r3, [sp, #12]
   127d0:	b.w	11418 <_svfprintf_r+0x3c8>
   127d4:	ldr	r3, [sp, #48]	; 0x30
   127d6:	ldr	r2, [sp, #56]	; 0x38
   127d8:	cmp	r3, r2
   127da:	blt.w	12958 <_svfprintf_r+0x1908>
   127de:	lsls	r0, r6, #31
   127e0:	ldr	r3, [sp, #48]	; 0x30
   127e2:	bpl.w	12a4a <_svfprintf_r+0x19fa>
   127e6:	ldr	r2, [sp, #64]	; 0x40
   127e8:	add	r3, r2
   127ea:	str	r3, [sp, #20]
   127ec:	lsls	r1, r6, #21
   127ee:	bpl.n	127f8 <_svfprintf_r+0x17a8>
   127f0:	ldr	r3, [sp, #48]	; 0x30
   127f2:	cmp	r3, #0
   127f4:	bgt.w	12a62 <_svfprintf_r+0x1a12>
   127f8:	ldr	r3, [sp, #20]
   127fa:	bic.w	r3, r3, r3, asr #31
   127fe:	str	r3, [sp, #8]
   12800:	movs	r3, #103	; 0x67
   12802:	str	r3, [sp, #44]	; 0x2c
   12804:	movs	r3, #0
   12806:	str	r3, [sp, #60]	; 0x3c
   12808:	str	r3, [sp, #52]	; 0x34
   1280a:	b.n	1265c <_svfprintf_r+0x160c>
   1280c:	ldr	r3, [sp, #136]	; 0x88
   1280e:	cmp	r3, r0
   12810:	bcs.w	12582 <_svfprintf_r+0x1532>
   12814:	movs	r1, #48	; 0x30
   12816:	adds	r2, r3, #1
   12818:	str	r2, [sp, #136]	; 0x88
   1281a:	strb	r1, [r3, #0]
   1281c:	ldr	r3, [sp, #136]	; 0x88
   1281e:	cmp	r0, r3
   12820:	bhi.n	12816 <_svfprintf_r+0x17c6>
   12822:	b.n	12582 <_svfprintf_r+0x1532>
   12824:	lsls	r3, r6, #31
   12826:	bmi.w	12978 <_svfprintf_r+0x1928>
   1282a:	ldr	r3, [sp, #136]	; 0x88
   1282c:	b.n	12582 <_svfprintf_r+0x1532>
   1282e:	add	r2, sp, #144	; 0x90
   12830:	mov	r0, fp
   12832:	str	r1, [sp, #20]
   12834:	bl	13db8 <__ssprint_r>
   12838:	cmp	r0, #0
   1283a:	bne.w	1191a <_svfprintf_r+0x8ca>
   1283e:	ldrb.w	ip, [r6]
   12842:	ldr	r2, [sp, #152]	; 0x98
   12844:	ldr	r1, [sp, #20]
   12846:	add	r0, sp, #156	; 0x9c
   12848:	add	r5, ip
   1284a:	b.w	12026 <_svfprintf_r+0xfd6>
   1284e:	vmov	r1, s22
   12852:	add	r2, sp, #144	; 0x90
   12854:	mov	r0, fp
   12856:	bl	13db8 <__ssprint_r>
   1285a:	cmp	r0, #0
   1285c:	bne.w	1191a <_svfprintf_r+0x8ca>
   12860:	ldr	r2, [sp, #152]	; 0x98
   12862:	add.w	sl, sp, #156	; 0x9c
   12866:	b.w	11b40 <_svfprintf_r+0xaf0>
   1286a:	movs	r3, #120	; 0x78
   1286c:	strb.w	r3, [sp, #105]	; 0x69
   12870:	movs	r3, #48	; 0x30
   12872:	strb.w	r3, [sp, #104]	; 0x68
   12876:	ldr	r3, [sp, #12]
   12878:	cmp	r3, #99	; 0x63
   1287a:	orr.w	r6, r8, #2
   1287e:	bgt.w	129ce <_svfprintf_r+0x197e>
   12882:	movs	r3, #0
   12884:	str	r3, [sp, #28]
   12886:	add	r4, sp, #220	; 0xdc
   12888:	vmov	r3, s17
   1288c:	cmp	r3, #0
   1288e:	orr.w	r8, r8, #258	; 0x102
   12892:	blt.n	128ec <_svfprintf_r+0x189c>
   12894:	vmov.f64	d10, d8
   12898:	ldr	r3, [sp, #44]	; 0x2c
   1289a:	bic.w	r5, r3, #32
   1289e:	movs	r3, #0
   128a0:	str	r3, [sp, #36]	; 0x24
   128a2:	ldr	r3, [sp, #44]	; 0x2c
   128a4:	cmp	r3, #97	; 0x61
   128a6:	bne.w	11e04 <_svfprintf_r+0xdb4>
   128aa:	vmov.f64	d0, d10
   128ae:	add	r0, sp, #108	; 0x6c
   128b0:	bl	12de8 <frexp>
   128b4:	vmov.f64	d7, #64	; 0x3e000000  0.125
   128b8:	vmul.f64	d0, d0, d7
   128bc:	vcmp.f64	d0, #0.0
   128c0:	vmrs	APSR_nzcv, fpscr
   128c4:	bne.n	128ca <_svfprintf_r+0x187a>
   128c6:	movs	r3, #1
   128c8:	str	r3, [sp, #108]	; 0x6c
   128ca:	ldr	r0, [pc, #280]	; (129e4 <_svfprintf_r+0x1994>)
   128cc:	b.n	12712 <_svfprintf_r+0x16c2>
   128ce:	vmov	r1, s22
   128d2:	add	r2, sp, #144	; 0x90
   128d4:	mov	r0, fp
   128d6:	bl	13db8 <__ssprint_r>
   128da:	cmp	r0, #0
   128dc:	bne.w	1191a <_svfprintf_r+0x8ca>
   128e0:	ldr	r3, [sp, #108]	; 0x6c
   128e2:	ldr	r2, [sp, #152]	; 0x98
   128e4:	add.w	sl, sp, #156	; 0x9c
   128e8:	b.w	11b88 <_svfprintf_r+0xb38>
   128ec:	ldr	r3, [sp, #44]	; 0x2c
   128ee:	bic.w	r5, r3, #32
   128f2:	movs	r3, #45	; 0x2d
   128f4:	str	r3, [sp, #36]	; 0x24
   128f6:	vneg.f64	d10, d8
   128fa:	b.n	128a2 <_svfprintf_r+0x1852>
   128fc:	ldr	r2, [sp, #108]	; 0x6c
   128fe:	str	r2, [sp, #48]	; 0x30
   12900:	cmp	r2, #0
   12902:	and.w	r3, r6, #1
   12906:	ble.w	12b24 <_svfprintf_r+0x1ad4>
   1290a:	ldr	r1, [sp, #12]
   1290c:	orrs	r3, r1
   1290e:	bne.w	12ab0 <_svfprintf_r+0x1a60>
   12912:	ldr	r3, [sp, #48]	; 0x30
   12914:	str	r3, [sp, #20]
   12916:	movs	r3, #102	; 0x66
   12918:	str	r3, [sp, #44]	; 0x2c
   1291a:	lsls	r2, r6, #21
   1291c:	bmi.w	12a66 <_svfprintf_r+0x1a16>
   12920:	ldr	r3, [sp, #20]
   12922:	bic.w	r3, r3, r3, asr #31
   12926:	str	r3, [sp, #8]
   12928:	b.n	12804 <_svfprintf_r+0x17b4>
   1292a:	vmov	r1, s22
   1292e:	add	r2, sp, #144	; 0x90
   12930:	mov	r0, fp
   12932:	bl	13db8 <__ssprint_r>
   12936:	cmp	r0, #0
   12938:	bne.w	1191a <_svfprintf_r+0x8ca>
   1293c:	ldr	r4, [sp, #108]	; 0x6c
   1293e:	ldr	r3, [sp, #56]	; 0x38
   12940:	ldr	r2, [sp, #152]	; 0x98
   12942:	subs	r4, r3, r4
   12944:	add.w	sl, sp, #156	; 0x9c
   12948:	b.w	11bb8 <_svfprintf_r+0xb68>
   1294c:	movs	r3, #88	; 0x58
   1294e:	b.n	1286c <_svfprintf_r+0x181c>
   12950:	movs	r2, #0
   12952:	str	r2, [sp, #12]
   12954:	b.w	1110c <_svfprintf_r+0xbc>
   12958:	ldr	r3, [sp, #56]	; 0x38
   1295a:	ldr	r2, [sp, #64]	; 0x40
   1295c:	adds	r2, r3, r2
   1295e:	ldr	r3, [sp, #48]	; 0x30
   12960:	str	r2, [sp, #20]
   12962:	cmp	r3, #0
   12964:	ble.w	12abe <_svfprintf_r+0x1a6e>
   12968:	movs	r3, #103	; 0x67
   1296a:	str	r3, [sp, #44]	; 0x2c
   1296c:	b.n	1291a <_svfprintf_r+0x18ca>
   1296e:	ldr	r2, [sp, #44]	; 0x2c
   12970:	adds	r2, #15
   12972:	uxtb	r2, r2
   12974:	movs	r1, #1
   12976:	b.n	125aa <_svfprintf_r+0x155a>
   12978:	adds	r0, r4, r2
   1297a:	b.n	12574 <_svfprintf_r+0x1524>
   1297c:	cmp	r1, #0
   1297e:	bne.w	12ad2 <_svfprintf_r+0x1a82>
   12982:	movs	r2, #48	; 0x30
   12984:	strb.w	r2, [sp, #122]	; 0x7a
   12988:	add.w	r2, sp, #123	; 0x7b
   1298c:	adds	r3, #48	; 0x30
   1298e:	strb.w	r3, [r2], #1
   12992:	add	r3, sp, #120	; 0x78
   12994:	subs	r3, r2, r3
   12996:	str	r3, [sp, #80]	; 0x50
   12998:	b.n	1262e <_svfprintf_r+0x15de>
   1299a:	adds	r3, #1
   1299c:	ldr	r1, [pc, #72]	; (129e8 <_svfprintf_r+0x1998>)
   1299e:	str.w	r5, [sl, #4]
   129a2:	add	r2, r5
   129a4:	cmp	r3, #7
   129a6:	strd	r3, r2, [sp, #148]	; 0x94
   129aa:	str.w	r1, [sl]
   129ae:	ble.w	12218 <_svfprintf_r+0x11c8>
   129b2:	vmov	r1, s22
   129b6:	add	r2, sp, #144	; 0x90
   129b8:	mov	r0, fp
   129ba:	bl	13db8 <__ssprint_r>
   129be:	cmp	r0, #0
   129c0:	bne.w	1191a <_svfprintf_r+0x8ca>
   129c4:	ldrd	r3, r2, [sp, #148]	; 0x94
   129c8:	add.w	sl, sp, #156	; 0x9c
   129cc:	b.n	1221c <_svfprintf_r+0x11cc>
   129ce:	adds	r1, r3, #1
   129d0:	mov	r0, fp
   129d2:	bl	f330 <_malloc_r>
   129d6:	mov	r4, r0
   129d8:	cbz	r0, 12a30 <_svfprintf_r+0x19e0>
   129da:	str	r0, [sp, #28]
   129dc:	b.n	12888 <_svfprintf_r+0x1838>
   129de:	nop
   129e0:	.word	0x20000d64
   129e4:	.word	0x20000d50
   129e8:	.word	0x20001ac4
   129ec:	.word	0x66666667
   129f0:	str.w	ip, [sp, #136]	; 0x88
   129f4:	ldrb.w	r1, [r2, #-1]
   129f8:	ldrb.w	ip, [r0, #15]
   129fc:	cmp	r1, ip
   129fe:	mov	r3, r2
   12a00:	bne.n	12a18 <_svfprintf_r+0x19c8>
   12a02:	mov.w	lr, #48	; 0x30
   12a06:	strb.w	lr, [r3, #-1]
   12a0a:	ldr	r3, [sp, #136]	; 0x88
   12a0c:	subs	r1, r3, #1
   12a0e:	str	r1, [sp, #136]	; 0x88
   12a10:	ldrb.w	r1, [r3, #-1]
   12a14:	cmp	ip, r1
   12a16:	beq.n	12a06 <_svfprintf_r+0x19b6>
   12a18:	cmp	r1, #57	; 0x39
   12a1a:	itet	ne
   12a1c:	addne	r1, #1
   12a1e:	ldrbeq	r1, [r0, #10]
   12a20:	uxtbne	r1, r1
   12a22:	strb.w	r1, [r3, #-1]
   12a26:	b.n	12786 <_svfprintf_r+0x1736>
   12a28:	movs	r3, #0
   12a2a:	mov	r8, r2
   12a2c:	str	r3, [sp, #28]
   12a2e:	b.n	128f2 <_svfprintf_r+0x18a2>
   12a30:	vmov	r2, s22
   12a34:	ldrsh.w	r3, [r2, #12]
   12a38:	orr.w	r3, r3, #64	; 0x40
   12a3c:	strh	r3, [r2, #12]
   12a3e:	b.w	1126e <_svfprintf_r+0x21e>
   12a42:	lsls	r5, r6, #31
   12a44:	bpl.w	12644 <_svfprintf_r+0x15f4>
   12a48:	b.n	1263c <_svfprintf_r+0x15ec>
   12a4a:	str	r3, [sp, #20]
   12a4c:	b.n	127ec <_svfprintf_r+0x179c>
   12a4e:	vcmp.f64	d10, #0.0
   12a52:	vmrs	APSR_nzcv, fpscr
   12a56:	beq.w	12570 <_svfprintf_r+0x1520>
   12a5a:	rsb	r2, r2, #1
   12a5e:	str	r2, [sp, #108]	; 0x6c
   12a60:	b.n	12572 <_svfprintf_r+0x1522>
   12a62:	movs	r3, #103	; 0x67
   12a64:	str	r3, [sp, #44]	; 0x2c
   12a66:	ldr	r1, [sp, #76]	; 0x4c
   12a68:	ldrb	r3, [r1, #0]
   12a6a:	cmp	r3, #255	; 0xff
   12a6c:	beq.n	12b62 <_svfprintf_r+0x1b12>
   12a6e:	movs	r5, #0
   12a70:	ldr	r2, [sp, #48]	; 0x30
   12a72:	mov	r0, r5
   12a74:	b.n	12a7e <_svfprintf_r+0x1a2e>
   12a76:	adds	r0, #1
   12a78:	adds	r1, #1
   12a7a:	cmp	r3, #255	; 0xff
   12a7c:	beq.n	12a90 <_svfprintf_r+0x1a40>
   12a7e:	cmp	r3, r2
   12a80:	bge.n	12a90 <_svfprintf_r+0x1a40>
   12a82:	subs	r2, r2, r3
   12a84:	ldrb	r3, [r1, #1]
   12a86:	cmp	r3, #0
   12a88:	bne.n	12a76 <_svfprintf_r+0x1a26>
   12a8a:	ldrb	r3, [r1, #0]
   12a8c:	adds	r5, #1
   12a8e:	b.n	12a7a <_svfprintf_r+0x1a2a>
   12a90:	str	r2, [sp, #48]	; 0x30
   12a92:	str	r1, [sp, #76]	; 0x4c
   12a94:	str	r0, [sp, #52]	; 0x34
   12a96:	str	r5, [sp, #60]	; 0x3c
   12a98:	ldr	r2, [sp, #60]	; 0x3c
   12a9a:	ldr	r3, [sp, #52]	; 0x34
   12a9c:	ldr	r1, [sp, #88]	; 0x58
   12a9e:	add	r3, r2
   12aa0:	ldr	r2, [sp, #20]
   12aa2:	mla	r3, r1, r3, r2
   12aa6:	str	r3, [sp, #20]
   12aa8:	bic.w	r3, r3, r3, asr #31
   12aac:	str	r3, [sp, #8]
   12aae:	b.n	1265c <_svfprintf_r+0x160c>
   12ab0:	ldr	r3, [sp, #64]	; 0x40
   12ab2:	adds	r3, r2, r3
   12ab4:	add	r1, r3
   12ab6:	movs	r3, #102	; 0x66
   12ab8:	str	r1, [sp, #20]
   12aba:	str	r3, [sp, #44]	; 0x2c
   12abc:	b.n	1291a <_svfprintf_r+0x18ca>
   12abe:	rsb	r3, r3, #1
   12ac2:	add	r2, r3
   12ac4:	bic.w	r3, r2, r2, asr #31
   12ac8:	str	r3, [sp, #8]
   12aca:	movs	r3, #103	; 0x67
   12acc:	str	r2, [sp, #20]
   12ace:	str	r3, [sp, #44]	; 0x2c
   12ad0:	b.n	12804 <_svfprintf_r+0x17b4>
   12ad2:	add.w	r2, sp, #122	; 0x7a
   12ad6:	b.n	1298c <_svfprintf_r+0x193c>
   12ad8:	ldr	r3, [sp, #12]
   12ada:	ldr.w	r9, [sp, #8]
   12ade:	ldr.w	r8, [sp, #28]
   12ae2:	str	r3, [sp, #20]
   12ae4:	b.n	12450 <_svfprintf_r+0x1400>
   12ae6:	vmov	r3, s17
   12aea:	cmp	r3, #0
   12aec:	ite	lt
   12aee:	movlt	r1, #45	; 0x2d
   12af0:	ldrbge.w	r1, [sp, #103]	; 0x67
   12af4:	ldr	r4, [pc, #148]	; (12b8c <_svfprintf_r+0x1b3c>)
   12af6:	ldr	r3, [pc, #152]	; (12b90 <_svfprintf_r+0x1b40>)
   12af8:	it	lt
   12afa:	strblt.w	r1, [sp, #103]	; 0x67
   12afe:	bic.w	r8, r8, #128	; 0x80
   12b02:	b.w	113f8 <_svfprintf_r+0x3a8>
   12b06:	ldr	r3, [sp, #12]
   12b08:	str	r3, [sp, #8]
   12b0a:	str	r3, [sp, #20]
   12b0c:	movs	r3, #115	; 0x73
   12b0e:	ldrb.w	r1, [sp, #103]	; 0x67
   12b12:	str	r0, [sp, #12]
   12b14:	str	r0, [sp, #60]	; 0x3c
   12b16:	str	r0, [sp, #52]	; 0x34
   12b18:	str	r3, [sp, #44]	; 0x2c
   12b1a:	b.w	11412 <_svfprintf_r+0x3c2>
   12b1e:	movs	r3, #2
   12b20:	str	r3, [sp, #80]	; 0x50
   12b22:	b.n	1262e <_svfprintf_r+0x15de>
   12b24:	ldr	r2, [sp, #12]
   12b26:	orrs	r3, r2
   12b28:	bne.n	12b36 <_svfprintf_r+0x1ae6>
   12b2a:	movs	r3, #1
   12b2c:	movs	r2, #102	; 0x66
   12b2e:	str	r3, [sp, #8]
   12b30:	str	r2, [sp, #44]	; 0x2c
   12b32:	str	r3, [sp, #20]
   12b34:	b.n	12804 <_svfprintf_r+0x17b4>
   12b36:	ldr	r3, [sp, #64]	; 0x40
   12b38:	adds	r3, #1
   12b3a:	add	r2, r3
   12b3c:	bic.w	r3, r2, r2, asr #31
   12b40:	str	r3, [sp, #8]
   12b42:	movs	r3, #102	; 0x66
   12b44:	str	r2, [sp, #20]
   12b46:	str	r3, [sp, #44]	; 0x2c
   12b48:	b.n	12804 <_svfprintf_r+0x17b4>
   12b4a:	ldr	r2, [sp, #32]
   12b4c:	ldrb.w	r3, [r9, #1]
   12b50:	mov	r9, r1
   12b52:	ldr.w	r1, [r2], #4
   12b56:	str	r2, [sp, #32]
   12b58:	orr.w	r1, r1, r1, asr #31
   12b5c:	str	r1, [sp, #12]
   12b5e:	b.w	11108 <_svfprintf_r+0xb8>
   12b62:	movs	r3, #0
   12b64:	str	r3, [sp, #60]	; 0x3c
   12b66:	str	r3, [sp, #52]	; 0x34
   12b68:	b.n	12a98 <_svfprintf_r+0x1a48>
   12b6a:	movs	r3, #12
   12b6c:	str.w	r3, [fp]
   12b70:	mov.w	r3, #4294967295
   12b74:	str	r3, [sp, #16]
   12b76:	b.w	1127c <_svfprintf_r+0x22c>
   12b7a:	vmov	r2, s22
   12b7e:	ldrh	r3, [r2, #12]
   12b80:	orr.w	r3, r3, #64	; 0x40
   12b84:	strh	r3, [r2, #12]
   12b86:	b.w	1191a <_svfprintf_r+0x8ca>
   12b8a:	nop
   12b8c:	.word	0x20000d4c
   12b90:	.word	0x20000734

00012b94 <_fclose_r>:
   12b94:	push	{r4, r5, r6, lr}
   12b96:	cmp	r1, #0
   12b98:	beq.n	12c32 <_fclose_r+0x9e>
   12b9a:	mov	r6, r0
   12b9c:	mov	r4, r1
   12b9e:	cbz	r0, 12ba6 <_fclose_r+0x12>
   12ba0:	ldr	r3, [r0, #52]	; 0x34
   12ba2:	cmp	r3, #0
   12ba4:	beq.n	12c38 <_fclose_r+0xa4>
   12ba6:	ldr	r3, [r4, #100]	; 0x64
   12ba8:	lsls	r0, r3, #31
   12baa:	bpl.n	12c16 <_fclose_r+0x82>
   12bac:	ldrsh.w	r3, [r4, #12]
   12bb0:	cmp	r3, #0
   12bb2:	beq.n	12c32 <_fclose_r+0x9e>
   12bb4:	mov	r1, r4
   12bb6:	mov	r0, r6
   12bb8:	bl	12c5c <__sflush_r>
   12bbc:	ldr	r3, [r4, #44]	; 0x2c
   12bbe:	mov	r5, r0
   12bc0:	cbz	r3, 12bd0 <_fclose_r+0x3c>
   12bc2:	ldr	r1, [r4, #28]
   12bc4:	mov	r0, r6
   12bc6:	blx	r3
   12bc8:	cmp	r0, #0
   12bca:	it	lt
   12bcc:	movlt.w	r5, #4294967295
   12bd0:	ldrh	r3, [r4, #12]
   12bd2:	lsls	r2, r3, #24
   12bd4:	bmi.n	12c50 <_fclose_r+0xbc>
   12bd6:	ldr	r1, [r4, #48]	; 0x30
   12bd8:	cbz	r1, 12bec <_fclose_r+0x58>
   12bda:	add.w	r3, r4, #64	; 0x40
   12bde:	cmp	r1, r3
   12be0:	beq.n	12be8 <_fclose_r+0x54>
   12be2:	mov	r0, r6
   12be4:	bl	10684 <_free_r>
   12be8:	movs	r3, #0
   12bea:	str	r3, [r4, #48]	; 0x30
   12bec:	ldr	r1, [r4, #68]	; 0x44
   12bee:	cbz	r1, 12bfa <_fclose_r+0x66>
   12bf0:	mov	r0, r6
   12bf2:	bl	10684 <_free_r>
   12bf6:	movs	r3, #0
   12bf8:	str	r3, [r4, #68]	; 0x44
   12bfa:	bl	fdf4 <__sfp_lock_acquire>
   12bfe:	ldr	r3, [r4, #100]	; 0x64
   12c00:	movs	r2, #0
   12c02:	lsls	r3, r3, #31
   12c04:	strh	r2, [r4, #12]
   12c06:	bpl.n	12c48 <_fclose_r+0xb4>
   12c08:	ldr	r0, [r4, #88]	; 0x58
   12c0a:	bl	103c8 <__retarget_lock_close_recursive>
   12c0e:	bl	fe00 <__sfp_lock_release>
   12c12:	mov	r0, r5
   12c14:	pop	{r4, r5, r6, pc}
   12c16:	ldrh	r3, [r4, #12]
   12c18:	lsls	r1, r3, #22
   12c1a:	bmi.n	12bb4 <_fclose_r+0x20>
   12c1c:	ldr	r0, [r4, #88]	; 0x58
   12c1e:	bl	103cc <__retarget_lock_acquire_recursive>
   12c22:	ldrsh.w	r3, [r4, #12]
   12c26:	cmp	r3, #0
   12c28:	bne.n	12bb4 <_fclose_r+0x20>
   12c2a:	ldr	r5, [r4, #100]	; 0x64
   12c2c:	ands.w	r5, r5, #1
   12c30:	beq.n	12c3e <_fclose_r+0xaa>
   12c32:	movs	r5, #0
   12c34:	mov	r0, r5
   12c36:	pop	{r4, r5, r6, pc}
   12c38:	bl	fdb8 <__sinit>
   12c3c:	b.n	12ba6 <_fclose_r+0x12>
   12c3e:	ldr	r0, [r4, #88]	; 0x58
   12c40:	bl	103d0 <__retarget_lock_release_recursive>
   12c44:	mov	r0, r5
   12c46:	pop	{r4, r5, r6, pc}
   12c48:	ldr	r0, [r4, #88]	; 0x58
   12c4a:	bl	103d0 <__retarget_lock_release_recursive>
   12c4e:	b.n	12c08 <_fclose_r+0x74>
   12c50:	ldr	r1, [r4, #16]
   12c52:	mov	r0, r6
   12c54:	bl	10684 <_free_r>
   12c58:	b.n	12bd6 <_fclose_r+0x42>
   12c5a:	nop

00012c5c <__sflush_r>:
   12c5c:	ldrsh.w	r2, [r1, #12]
   12c60:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12c64:	mov	r4, r1
   12c66:	lsls	r1, r2, #28
   12c68:	mov	r8, r0
   12c6a:	bmi.n	12cfc <__sflush_r+0xa0>
   12c6c:	ldr	r3, [r4, #4]
   12c6e:	orr.w	r2, r2, #2048	; 0x800
   12c72:	cmp	r3, #0
   12c74:	strh	r2, [r4, #12]
   12c76:	ble.n	12d36 <__sflush_r+0xda>
   12c78:	ldr	r5, [r4, #40]	; 0x28
   12c7a:	cmp	r5, #0
   12c7c:	beq.n	12d30 <__sflush_r+0xd4>
   12c7e:	movs	r3, #0
   12c80:	ldr.w	r6, [r8]
   12c84:	str.w	r3, [r8]
   12c88:	uxth	r3, r2
   12c8a:	ands.w	r2, r2, #4096	; 0x1000
   12c8e:	bne.n	12d3e <__sflush_r+0xe2>
   12c90:	movs	r3, #1
   12c92:	ldr	r1, [r4, #28]
   12c94:	mov	r0, r8
   12c96:	blx	r5
   12c98:	adds	r3, r0, #1
   12c9a:	beq.n	12d6c <__sflush_r+0x110>
   12c9c:	ldrh	r3, [r4, #12]
   12c9e:	ldr	r5, [r4, #40]	; 0x28
   12ca0:	lsls	r7, r3, #29
   12ca2:	bpl.n	12cb0 <__sflush_r+0x54>
   12ca4:	ldr	r3, [r4, #4]
   12ca6:	subs	r0, r0, r3
   12ca8:	ldr	r3, [r4, #48]	; 0x30
   12caa:	cbz	r3, 12cb0 <__sflush_r+0x54>
   12cac:	ldr	r3, [r4, #60]	; 0x3c
   12cae:	subs	r0, r0, r3
   12cb0:	ldr	r1, [r4, #28]
   12cb2:	mov	r2, r0
   12cb4:	movs	r3, #0
   12cb6:	mov	r0, r8
   12cb8:	blx	r5
   12cba:	adds	r1, r0, #1
   12cbc:	bne.n	12d42 <__sflush_r+0xe6>
   12cbe:	ldr.w	r3, [r8]
   12cc2:	cmp	r3, #0
   12cc4:	beq.n	12d42 <__sflush_r+0xe6>
   12cc6:	cmp	r3, #29
   12cc8:	beq.n	12cce <__sflush_r+0x72>
   12cca:	cmp	r3, #22
   12ccc:	bne.n	12d7c <__sflush_r+0x120>
   12cce:	ldrh	r3, [r4, #12]
   12cd0:	ldr	r2, [r4, #16]
   12cd2:	str	r2, [r4, #0]
   12cd4:	bic.w	r3, r3, #2048	; 0x800
   12cd8:	movs	r1, #0
   12cda:	str	r1, [r4, #4]
   12cdc:	strh	r3, [r4, #12]
   12cde:	ldr	r1, [r4, #48]	; 0x30
   12ce0:	str.w	r6, [r8]
   12ce4:	cbz	r1, 12d30 <__sflush_r+0xd4>
   12ce6:	add.w	r3, r4, #64	; 0x40
   12cea:	cmp	r1, r3
   12cec:	beq.n	12cf4 <__sflush_r+0x98>
   12cee:	mov	r0, r8
   12cf0:	bl	10684 <_free_r>
   12cf4:	movs	r0, #0
   12cf6:	str	r0, [r4, #48]	; 0x30
   12cf8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12cfc:	ldr	r6, [r4, #16]
   12cfe:	cbz	r6, 12d30 <__sflush_r+0xd4>
   12d00:	uxth	r3, r2
   12d02:	ldr	r5, [r4, #0]
   12d04:	str	r6, [r4, #0]
   12d06:	lsls	r2, r3, #30
   12d08:	ite	eq
   12d0a:	ldreq	r3, [r4, #20]
   12d0c:	movne	r3, #0
   12d0e:	subs	r5, r5, r6
   12d10:	str	r3, [r4, #8]
   12d12:	b.n	12d2c <__sflush_r+0xd0>
   12d14:	mov	r3, r5
   12d16:	mov	r2, r6
   12d18:	ldr	r1, [r4, #28]
   12d1a:	ldr	r7, [r4, #36]	; 0x24
   12d1c:	mov	r0, r8
   12d1e:	blx	r7
   12d20:	subs.w	ip, r0, #0
   12d24:	sub.w	r5, r5, ip
   12d28:	add	r6, ip
   12d2a:	ble.n	12d5c <__sflush_r+0x100>
   12d2c:	cmp	r5, #0
   12d2e:	bgt.n	12d14 <__sflush_r+0xb8>
   12d30:	movs	r0, #0
   12d32:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12d36:	ldr	r3, [r4, #60]	; 0x3c
   12d38:	cmp	r3, #0
   12d3a:	bgt.n	12c78 <__sflush_r+0x1c>
   12d3c:	b.n	12d30 <__sflush_r+0xd4>
   12d3e:	ldr	r0, [r4, #80]	; 0x50
   12d40:	b.n	12ca0 <__sflush_r+0x44>
   12d42:	ldrsh.w	r3, [r4, #12]
   12d46:	ldr	r2, [r4, #16]
   12d48:	str	r2, [r4, #0]
   12d4a:	bic.w	r3, r3, #2048	; 0x800
   12d4e:	strh	r3, [r4, #12]
   12d50:	movs	r2, #0
   12d52:	lsls	r3, r3, #19
   12d54:	str	r2, [r4, #4]
   12d56:	bpl.n	12cde <__sflush_r+0x82>
   12d58:	str	r0, [r4, #80]	; 0x50
   12d5a:	b.n	12cde <__sflush_r+0x82>
   12d5c:	ldrh	r3, [r4, #12]
   12d5e:	orr.w	r3, r3, #64	; 0x40
   12d62:	mov.w	r0, #4294967295
   12d66:	strh	r3, [r4, #12]
   12d68:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12d6c:	ldr.w	r3, [r8]
   12d70:	cmp	r3, #0
   12d72:	beq.n	12c9c <__sflush_r+0x40>
   12d74:	cmp	r3, #29
   12d76:	beq.n	12d86 <__sflush_r+0x12a>
   12d78:	cmp	r3, #22
   12d7a:	beq.n	12d86 <__sflush_r+0x12a>
   12d7c:	ldrh	r3, [r4, #12]
   12d7e:	orr.w	r3, r3, #64	; 0x40
   12d82:	strh	r3, [r4, #12]
   12d84:	b.n	12d32 <__sflush_r+0xd6>
   12d86:	str.w	r6, [r8]
   12d8a:	b.n	12d30 <__sflush_r+0xd4>

00012d8c <_fflush_r>:
   12d8c:	push	{r3, r4, r5, lr}
   12d8e:	mov	r4, r1
   12d90:	mov	r5, r0
   12d92:	cbz	r0, 12d98 <_fflush_r+0xc>
   12d94:	ldr	r3, [r0, #52]	; 0x34
   12d96:	cbz	r3, 12dda <_fflush_r+0x4e>
   12d98:	ldrsh.w	r0, [r4, #12]
   12d9c:	cbz	r0, 12dc2 <_fflush_r+0x36>
   12d9e:	ldr	r3, [r4, #100]	; 0x64
   12da0:	lsls	r3, r3, #31
   12da2:	bmi.n	12da8 <_fflush_r+0x1c>
   12da4:	lsls	r1, r0, #22
   12da6:	bpl.n	12dc8 <_fflush_r+0x3c>
   12da8:	mov	r0, r5
   12daa:	mov	r1, r4
   12dac:	bl	12c5c <__sflush_r>
   12db0:	ldr	r3, [r4, #100]	; 0x64
   12db2:	lsls	r2, r3, #31
   12db4:	mov	r5, r0
   12db6:	bmi.n	12dbe <_fflush_r+0x32>
   12db8:	ldrh	r3, [r4, #12]
   12dba:	lsls	r3, r3, #22
   12dbc:	bpl.n	12dd0 <_fflush_r+0x44>
   12dbe:	mov	r0, r5
   12dc0:	pop	{r3, r4, r5, pc}
   12dc2:	mov	r5, r0
   12dc4:	mov	r0, r5
   12dc6:	pop	{r3, r4, r5, pc}
   12dc8:	ldr	r0, [r4, #88]	; 0x58
   12dca:	bl	103cc <__retarget_lock_acquire_recursive>
   12dce:	b.n	12da8 <_fflush_r+0x1c>
   12dd0:	ldr	r0, [r4, #88]	; 0x58
   12dd2:	bl	103d0 <__retarget_lock_release_recursive>
   12dd6:	mov	r0, r5
   12dd8:	pop	{r3, r4, r5, pc}
   12dda:	bl	fdb8 <__sinit>
   12dde:	b.n	12d98 <_fflush_r+0xc>

00012de0 <_localeconv_r>:
   12de0:	ldr	r0, [pc, #0]	; (12de4 <_localeconv_r+0x4>)
   12de2:	bx	lr
   12de4:	.word	0x20001d38

00012de8 <frexp>:
   12de8:	push	{r4, r5}
   12dea:	sub	sp, #8
   12dec:	vstr	d0, [sp]
   12df0:	ldr	r2, [sp, #4]
   12df2:	ldr	r4, [pc, #100]	; (12e58 <frexp+0x70>)
   12df4:	bic.w	r3, r2, #2147483648	; 0x80000000
   12df8:	movs	r1, #0
   12dfa:	cmp	r3, r4
   12dfc:	str	r1, [r0, #0]
   12dfe:	bgt.n	12e44 <frexp+0x5c>
   12e00:	ldr	r4, [sp, #0]
   12e02:	orrs	r4, r3
   12e04:	beq.n	12e44 <frexp+0x5c>
   12e06:	ldr	r4, [pc, #84]	; (12e5c <frexp+0x74>)
   12e08:	ands	r4, r2
   12e0a:	cbnz	r4, 12e22 <frexp+0x3a>
   12e0c:	vldr	d7, [pc, #64]	; 12e50 <frexp+0x68>
   12e10:	vmul.f64	d7, d0, d7
   12e14:	vstr	d7, [sp]
   12e18:	ldr	r2, [sp, #4]
   12e1a:	mvn.w	r1, #53	; 0x35
   12e1e:	bic.w	r3, r2, #2147483648	; 0x80000000
   12e22:	bic.w	r2, r2, #2139095040	; 0x7f800000
   12e26:	ldrd	r4, r5, [sp]
   12e2a:	bic.w	r2, r2, #7340032	; 0x700000
   12e2e:	orr.w	r5, r2, #1069547520	; 0x3fc00000
   12e32:	asrs	r3, r3, #20
   12e34:	orr.w	r5, r5, #2097152	; 0x200000
   12e38:	subw	r3, r3, #1022	; 0x3fe
   12e3c:	strd	r4, r5, [sp]
   12e40:	add	r3, r1
   12e42:	str	r3, [r0, #0]
   12e44:	vldr	d0, [sp]
   12e48:	add	sp, #8
   12e4a:	pop	{r4, r5}
   12e4c:	bx	lr
   12e4e:	nop
   12e50:	.word	0x00000000
   12e54:	.word	0x43500000
   12e58:	.word	0x7fefffff
   12e5c:	.word	0x7ff00000

00012e60 <__assert_func>:
   12e60:	push	{lr}
   12e62:	ldr	r4, [pc, #44]	; (12e90 <__assert_func+0x30>)
   12e64:	ldr	r5, [r4, #0]
   12e66:	mov	r4, r2
   12e68:	ldr	r6, [r5, #12]
   12e6a:	mov	r2, r3
   12e6c:	sub	sp, #20
   12e6e:	mov	r3, r0
   12e70:	mov	r5, r1
   12e72:	cbz	r4, 12e88 <__assert_func+0x28>
   12e74:	ldr	r1, [pc, #28]	; (12e94 <__assert_func+0x34>)
   12e76:	str	r5, [sp, #0]
   12e78:	strd	r1, r4, [sp, #4]
   12e7c:	mov	r0, r6
   12e7e:	ldr	r1, [pc, #24]	; (12e98 <__assert_func+0x38>)
   12e80:	bl	13d90 <fiprintf>
   12e84:	bl	cfdc <abort>
   12e88:	ldr	r1, [pc, #16]	; (12e9c <__assert_func+0x3c>)
   12e8a:	mov	r4, r1
   12e8c:	b.n	12e76 <__assert_func+0x16>
   12e8e:	nop
   12e90:	.word	0x200021d0
   12e94:	.word	0x20000b28
   12e98:	.word	0x20000b38
   12e9c:	.word	0x20000684

00012ea0 <_calloc_r>:
   12ea0:	push	{r3, r4, r5, lr}
   12ea2:	umull	r1, r4, r1, r2
   12ea6:	cbnz	r4, 12f0c <_calloc_r+0x6c>
   12ea8:	bl	f330 <_malloc_r>
   12eac:	mov	r5, r0
   12eae:	cbz	r0, 12eea <_calloc_r+0x4a>
   12eb0:	ldr.w	r2, [r0, #-4]
   12eb4:	bic.w	r2, r2, #3
   12eb8:	subs	r2, #4
   12eba:	cmp	r2, #36	; 0x24
   12ebc:	bhi.n	12eee <_calloc_r+0x4e>
   12ebe:	cmp	r2, #19
   12ec0:	bls.n	12ef8 <_calloc_r+0x58>
   12ec2:	cmp	r2, #27
   12ec4:	strd	r4, r4, [r0]
   12ec8:	bls.n	12f06 <_calloc_r+0x66>
   12eca:	cmp	r2, #36	; 0x24
   12ecc:	ite	ne
   12ece:	addne.w	r2, r0, #16
   12ed2:	addeq.w	r2, r0, #24
   12ed6:	mov.w	r3, #0
   12eda:	strd	r4, r4, [r0, #8]
   12ede:	itt	eq
   12ee0:	streq	r4, [r0, #16]
   12ee2:	streq	r4, [r0, #20]
   12ee4:	strd	r3, r3, [r2]
   12ee8:	str	r3, [r2, #8]
   12eea:	mov	r0, r5
   12eec:	pop	{r3, r4, r5, pc}
   12eee:	mov	r1, r4
   12ef0:	bl	10104 <memset>
   12ef4:	mov	r0, r5
   12ef6:	pop	{r3, r4, r5, pc}
   12ef8:	mov	r2, r0
   12efa:	movs	r3, #0
   12efc:	strd	r3, r3, [r2]
   12f00:	str	r3, [r2, #8]
   12f02:	mov	r0, r5
   12f04:	pop	{r3, r4, r5, pc}
   12f06:	add.w	r2, r0, #8
   12f0a:	b.n	12efa <_calloc_r+0x5a>
   12f0c:	bl	10370 <__errno>
   12f10:	movs	r3, #12
   12f12:	movs	r5, #0
   12f14:	str	r3, [r0, #0]
   12f16:	b.n	12eea <_calloc_r+0x4a>

00012f18 <quorem>:
   12f18:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12f1c:	ldr	r3, [r0, #16]
   12f1e:	ldr	r4, [r1, #16]
   12f20:	cmp	r3, r4
   12f22:	sub	sp, #12
   12f24:	blt.w	13036 <quorem+0x11e>
   12f28:	subs	r4, #1
   12f2a:	add.w	r5, r1, #20
   12f2e:	lsls	r3, r4, #2
   12f30:	add.w	r8, r0, #20
   12f34:	str	r3, [sp, #0]
   12f36:	ldr.w	r3, [r5, r4, lsl #2]
   12f3a:	ldr.w	r2, [r8, r4, lsl #2]
   12f3e:	adds	r3, #1
   12f40:	mov	r9, r0
   12f42:	cmp	r2, r3
   12f44:	add.w	r0, r8, r4, lsl #2
   12f48:	add.w	r7, r5, r4, lsl #2
   12f4c:	str	r0, [sp, #4]
   12f4e:	udiv	r6, r2, r3
   12f52:	bcc.n	12fcc <quorem+0xb4>
   12f54:	mov.w	ip, #0
   12f58:	mov	lr, r5
   12f5a:	mov	r0, r8
   12f5c:	mov	sl, ip
   12f5e:	mov	r3, ip
   12f60:	ldr.w	fp, [lr], #4
   12f64:	ldr	r2, [r0, #0]
   12f66:	uxth.w	ip, fp
   12f6a:	mla	r3, r6, ip, r3
   12f6e:	mov.w	ip, r3, lsr #16
   12f72:	mov.w	fp, fp, lsr #16
   12f76:	mla	ip, r6, fp, ip
   12f7a:	uxth	r3, r3
   12f7c:	sub.w	r3, sl, r3
   12f80:	uxth.w	sl, ip
   12f84:	uxtah	r3, r3, r2
   12f88:	rsb	r2, sl, r2, lsr #16
   12f8c:	add.w	r2, r2, r3, asr #16
   12f90:	uxth	r3, r3
   12f92:	orr.w	r3, r3, r2, lsl #16
   12f96:	cmp	r7, lr
   12f98:	str.w	r3, [r0], #4
   12f9c:	mov.w	sl, r2, asr #16
   12fa0:	mov.w	r3, ip, lsr #16
   12fa4:	bcs.n	12f60 <quorem+0x48>
   12fa6:	ldr	r3, [sp, #0]
   12fa8:	ldr.w	r3, [r8, r3]
   12fac:	cbnz	r3, 12fcc <quorem+0xb4>
   12fae:	ldr	r3, [sp, #4]
   12fb0:	subs	r3, #4
   12fb2:	cmp	r8, r3
   12fb4:	bcc.n	12fc0 <quorem+0xa8>
   12fb6:	b.n	12fc8 <quorem+0xb0>
   12fb8:	cmp	r8, r3
   12fba:	add.w	r4, r4, #4294967295
   12fbe:	bcs.n	12fc8 <quorem+0xb0>
   12fc0:	ldr.w	r2, [r3], #-4
   12fc4:	cmp	r2, #0
   12fc6:	beq.n	12fb8 <quorem+0xa0>
   12fc8:	str.w	r4, [r9, #16]
   12fcc:	mov	r0, r9
   12fce:	bl	10dc8 <__mcmp>
   12fd2:	cmp	r0, #0
   12fd4:	blt.n	1302e <quorem+0x116>
   12fd6:	adds	r6, #1
   12fd8:	mov	r1, r8
   12fda:	movs	r3, #0
   12fdc:	ldr.w	r0, [r5], #4
   12fe0:	ldr.w	ip, [r1]
   12fe4:	uxth	r2, r0
   12fe6:	subs	r2, r3, r2
   12fe8:	lsrs	r3, r0, #16
   12fea:	uxtah	r2, r2, ip
   12fee:	rsb	r3, r3, ip, lsr #16
   12ff2:	add.w	r3, r3, r2, asr #16
   12ff6:	uxth	r2, r2
   12ff8:	orr.w	r2, r2, r3, lsl #16
   12ffc:	cmp	r7, r5
   12ffe:	str.w	r2, [r1], #4
   13002:	mov.w	r3, r3, asr #16
   13006:	bcs.n	12fdc <quorem+0xc4>
   13008:	ldr.w	r2, [r8, r4, lsl #2]
   1300c:	add.w	r3, r8, r4, lsl #2
   13010:	cbnz	r2, 1302e <quorem+0x116>
   13012:	subs	r3, #4
   13014:	cmp	r8, r3
   13016:	bcc.n	13022 <quorem+0x10a>
   13018:	b.n	1302a <quorem+0x112>
   1301a:	cmp	r8, r3
   1301c:	add.w	r4, r4, #4294967295
   13020:	bcs.n	1302a <quorem+0x112>
   13022:	ldr.w	r2, [r3], #-4
   13026:	cmp	r2, #0
   13028:	beq.n	1301a <quorem+0x102>
   1302a:	str.w	r4, [r9, #16]
   1302e:	mov	r0, r6
   13030:	add	sp, #12
   13032:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13036:	movs	r0, #0
   13038:	add	sp, #12
   1303a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1303e:	nop

00013040 <_dtoa_r>:
   13040:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13044:	vpush	{d8}
   13048:	sub	sp, #60	; 0x3c
   1304a:	vstr	d0, [sp, #8]
   1304e:	str	r1, [sp, #4]
   13050:	ldr	r1, [r0, #56]	; 0x38
   13052:	ldr	r5, [sp, #104]	; 0x68
   13054:	str	r3, [sp, #20]
   13056:	vmov	r6, r7, d0
   1305a:	mov	r4, r0
   1305c:	mov	fp, r2
   1305e:	cbz	r1, 13072 <_dtoa_r+0x32>
   13060:	ldr	r2, [r0, #60]	; 0x3c
   13062:	str	r2, [r1, #4]
   13064:	movs	r3, #1
   13066:	lsls	r3, r2
   13068:	str	r3, [r1, #8]
   1306a:	bl	10908 <_Bfree>
   1306e:	movs	r3, #0
   13070:	str	r3, [r4, #56]	; 0x38
   13072:	subs.w	r8, r7, #0
   13076:	ite	lt
   13078:	movlt	r3, #1
   1307a:	movge	r3, #0
   1307c:	str	r3, [r5, #0]
   1307e:	ldr	r3, [pc, #760]	; (13378 <_dtoa_r+0x338>)
   13080:	itt	lt
   13082:	biclt.w	r8, r8, #2147483648	; 0x80000000
   13086:	strlt.w	r8, [sp, #12]
   1308a:	bics.w	r3, r3, r8
   1308e:	beq.w	131d0 <_dtoa_r+0x190>
   13092:	vldr	d8, [sp, #8]
   13096:	vcmp.f64	d8, #0.0
   1309a:	vmrs	APSR_nzcv, fpscr
   1309e:	bne.n	130c4 <_dtoa_r+0x84>
   130a0:	ldr	r2, [sp, #20]
   130a2:	movs	r3, #1
   130a4:	str	r3, [r2, #0]
   130a6:	ldr	r3, [sp, #108]	; 0x6c
   130a8:	cmp	r3, #0
   130aa:	beq.w	1352c <_dtoa_r+0x4ec>
   130ae:	ldr	r3, [pc, #716]	; (1337c <_dtoa_r+0x33c>)
   130b0:	ldr	r2, [sp, #108]	; 0x6c
   130b2:	str	r3, [r2, #0]
   130b4:	subs	r3, #1
   130b6:	str	r3, [sp, #0]
   130b8:	ldr	r0, [sp, #0]
   130ba:	add	sp, #60	; 0x3c
   130bc:	vpop	{d8}
   130c0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   130c4:	add	r2, sp, #48	; 0x30
   130c6:	add	r1, sp, #52	; 0x34
   130c8:	mov	r0, r4
   130ca:	vmov.f64	d0, d8
   130ce:	bl	10f60 <__d2b>
   130d2:	movs.w	r3, r8, lsr #20
   130d6:	mov	r5, r0
   130d8:	bne.w	13200 <_dtoa_r+0x1c0>
   130dc:	ldrd	r1, r3, [sp, #48]	; 0x30
   130e0:	add	r3, r1
   130e2:	addw	r2, r3, #1074	; 0x432
   130e6:	cmp	r2, #32
   130e8:	ble.w	136e0 <_dtoa_r+0x6a0>
   130ec:	rsb	r2, r2, #64	; 0x40
   130f0:	lsl.w	r8, r8, r2
   130f4:	addw	r2, r3, #1042	; 0x412
   130f8:	lsrs	r6, r2
   130fa:	orr.w	r2, r8, r6
   130fe:	vmov	s14, r2
   13102:	vcvt.f64.u32	d7, s14
   13106:	subs	r0, r3, #1
   13108:	vmov	r6, s15
   1310c:	vmov	r2, r3, d7
   13110:	mov.w	sl, #1
   13114:	sub.w	r3, r6, #32505856	; 0x1f00000
   13118:	vldr	d3, [pc, #580]	; 13360 <_dtoa_r+0x320>
   1311c:	vldr	d7, [pc, #584]	; 13368 <_dtoa_r+0x328>
   13120:	vldr	d5, [pc, #588]	; 13370 <_dtoa_r+0x330>
   13124:	vmov	s13, r0
   13128:	vmov	d2, r2, r3
   1312c:	vcvt.f64.s32	d4, s13
   13130:	vmov.f64	d6, #120	; 0x3fc00000  1.5
   13134:	vsub.f64	d6, d2, d6
   13138:	vfma.f64	d7, d6, d3
   1313c:	vfma.f64	d7, d4, d5
   13140:	vcvt.s32.f64	s13, d7
   13144:	vcmpe.f64	d7, #0.0
   13148:	vmrs	APSR_nzcv, fpscr
   1314c:	vmov	r7, s13
   13150:	bpl.n	13164 <_dtoa_r+0x124>
   13152:	vcvt.f64.s32	d6, s13
   13156:	vcmp.f64	d6, d7
   1315a:	vmrs	APSR_nzcv, fpscr
   1315e:	it	ne
   13160:	addne.w	r7, r7, #4294967295
   13164:	cmp	r7, #22
   13166:	bhi.w	133f4 <_dtoa_r+0x3b4>
   1316a:	ldr	r3, [pc, #532]	; (13380 <_dtoa_r+0x340>)
   1316c:	add.w	r3, r3, r7, lsl #3
   13170:	vldr	d7, [r3]
   13174:	vcmpe.f64	d8, d7
   13178:	vmrs	APSR_nzcv, fpscr
   1317c:	bpl.n	1322e <_dtoa_r+0x1ee>
   1317e:	subs	r1, r1, r0
   13180:	movs	r3, #0
   13182:	subs.w	r8, r1, #1
   13186:	add.w	r7, r7, #4294967295
   1318a:	str	r3, [sp, #40]	; 0x28
   1318c:	bmi.w	13402 <_dtoa_r+0x3c2>
   13190:	movs	r3, #0
   13192:	str	r3, [sp, #24]
   13194:	cmp	r7, #0
   13196:	bge.n	1323e <_dtoa_r+0x1fe>
   13198:	ldr	r3, [sp, #24]
   1319a:	str	r7, [sp, #16]
   1319c:	subs	r3, r3, r7
   1319e:	str	r3, [sp, #24]
   131a0:	negs	r3, r7
   131a2:	str	r3, [sp, #32]
   131a4:	ldr	r3, [sp, #4]
   131a6:	cmp	r3, #9
   131a8:	mov.w	r7, #0
   131ac:	bhi.n	1324c <_dtoa_r+0x20c>
   131ae:	cmp	r3, #5
   131b0:	ble.w	136ee <_dtoa_r+0x6ae>
   131b4:	subs	r3, #4
   131b6:	str	r3, [sp, #4]
   131b8:	movs	r6, #0
   131ba:	ldr	r3, [sp, #4]
   131bc:	subs	r2, r3, #2
   131be:	cmp	r2, #3
   131c0:	bhi.w	1340e <_dtoa_r+0x3ce>
   131c4:	tbh	[pc, r2, lsl #1]
   131c8:	.word	0x03a703aa
   131cc:	.word	0x037e039d
   131d0:	ldr	r2, [sp, #20]
   131d2:	ubfx	r8, r8, #0, #20
   131d6:	movw	r3, #9999	; 0x270f
   131da:	orrs.w	r8, r8, r6
   131de:	str	r3, [r2, #0]
   131e0:	bne.n	13220 <_dtoa_r+0x1e0>
   131e2:	ldr	r3, [sp, #108]	; 0x6c
   131e4:	cmp	r3, #0
   131e6:	beq.w	13d0c <_dtoa_r+0xccc>
   131ea:	ldr	r3, [pc, #408]	; (13384 <_dtoa_r+0x344>)
   131ec:	str	r3, [sp, #0]
   131ee:	adds	r3, #8
   131f0:	ldr	r2, [sp, #108]	; 0x6c
   131f2:	ldr	r0, [sp, #0]
   131f4:	str	r3, [r2, #0]
   131f6:	add	sp, #60	; 0x3c
   131f8:	vpop	{d8}
   131fc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13200:	vmov	r6, s17
   13204:	ubfx	r6, r6, #0, #20
   13208:	subw	r0, r3, #1023	; 0x3ff
   1320c:	vmov	r2, r3, d8
   13210:	orr.w	r3, r6, #1069547520	; 0x3fc00000
   13214:	ldr	r1, [sp, #48]	; 0x30
   13216:	mov.w	sl, #0
   1321a:	orr.w	r3, r3, #3145728	; 0x300000
   1321e:	b.n	13118 <_dtoa_r+0xd8>
   13220:	ldr	r3, [sp, #108]	; 0x6c
   13222:	cmp	r3, #0
   13224:	bne.w	1389e <_dtoa_r+0x85e>
   13228:	ldr	r3, [pc, #348]	; (13388 <_dtoa_r+0x348>)
   1322a:	str	r3, [sp, #0]
   1322c:	b.n	130b8 <_dtoa_r+0x78>
   1322e:	subs	r1, r1, r0
   13230:	movs	r3, #0
   13232:	subs.w	r8, r1, #1
   13236:	str	r3, [sp, #40]	; 0x28
   13238:	bmi.w	13402 <_dtoa_r+0x3c2>
   1323c:	str	r3, [sp, #24]
   1323e:	movs	r3, #0
   13240:	str	r3, [sp, #32]
   13242:	ldr	r3, [sp, #4]
   13244:	str	r7, [sp, #16]
   13246:	cmp	r3, #9
   13248:	add	r8, r7
   1324a:	bls.n	131ae <_dtoa_r+0x16e>
   1324c:	movs	r3, #0
   1324e:	movs	r6, #1
   13250:	str	r3, [sp, #4]
   13252:	str	r6, [sp, #28]
   13254:	mov.w	r9, #4294967295
   13258:	mov	fp, r3
   1325a:	movs	r1, #0
   1325c:	str	r1, [r4, #60]	; 0x3c
   1325e:	str.w	r9, [sp, #44]	; 0x2c
   13262:	mov	r0, r4
   13264:	bl	108bc <_Balloc>
   13268:	str	r0, [sp, #0]
   1326a:	cmp	r0, #0
   1326c:	beq.w	13cf0 <_dtoa_r+0xcb0>
   13270:	ldr	r3, [sp, #0]
   13272:	str	r3, [r4, #56]	; 0x38
   13274:	cmp.w	r9, #14
   13278:	bhi.w	13434 <_dtoa_r+0x3f4>
   1327c:	cmp	r6, #0
   1327e:	beq.w	13434 <_dtoa_r+0x3f4>
   13282:	ldr	r3, [sp, #16]
   13284:	cmp	r3, #0
   13286:	ble.w	13a46 <_dtoa_r+0xa06>
   1328a:	ldr	r2, [pc, #244]	; (13380 <_dtoa_r+0x340>)
   1328c:	and.w	r1, r3, #15
   13290:	add.w	r2, r2, r1, lsl #3
   13294:	vldr	d7, [r2]
   13298:	asrs	r2, r3, #4
   1329a:	lsls	r3, r3, #23
   1329c:	bpl.w	139a4 <_dtoa_r+0x964>
   132a0:	ldr	r1, [pc, #232]	; (1338c <_dtoa_r+0x34c>)
   132a2:	vldr	d6, [r1, #32]
   132a6:	and.w	r2, r2, #15
   132aa:	movs	r0, #3
   132ac:	vdiv.f64	d5, d8, d6
   132b0:	cbz	r2, 132ca <_dtoa_r+0x28a>
   132b2:	ldr	r1, [pc, #216]	; (1338c <_dtoa_r+0x34c>)
   132b4:	lsls	r6, r2, #31
   132b6:	bpl.n	132c2 <_dtoa_r+0x282>
   132b8:	vldr	d6, [r1]
   132bc:	adds	r0, #1
   132be:	vmul.f64	d7, d7, d6
   132c2:	asrs	r2, r2, #1
   132c4:	add.w	r1, r1, #8
   132c8:	bne.n	132b4 <_dtoa_r+0x274>
   132ca:	vdiv.f64	d6, d5, d7
   132ce:	ldr	r3, [sp, #40]	; 0x28
   132d0:	cbz	r3, 132e2 <_dtoa_r+0x2a2>
   132d2:	vmov.f64	d7, #112	; 0x3f800000  1.0
   132d6:	vcmpe.f64	d6, d7
   132da:	vmrs	APSR_nzcv, fpscr
   132de:	bmi.w	13c3e <_dtoa_r+0xbfe>
   132e2:	vmov	s15, r0
   132e6:	vcvt.f64.s32	d5, s15
   132ea:	vmov.f64	d7, #28	; 0x40e00000  7.0
   132ee:	vfma.f64	d7, d5, d6
   132f2:	vmov	r2, s15
   132f6:	vmov	r0, r1, d7
   132fa:	sub.w	r1, r2, #54525952	; 0x3400000
   132fe:	cmp.w	r9, #0
   13302:	beq.w	13a16 <_dtoa_r+0x9d6>
   13306:	ldr	r6, [sp, #16]
   13308:	mov	r2, r9
   1330a:	ldr	r3, [sp, #28]
   1330c:	cmp	r3, #0
   1330e:	beq.w	13ba0 <_dtoa_r+0xb60>
   13312:	vmov.f64	d3, #96	; 0x3f000000  0.5
   13316:	ldr	r3, [pc, #104]	; (13380 <_dtoa_r+0x340>)
   13318:	vcvt.s32.f64	s9, d6
   1331c:	add.w	ip, r3, r2, lsl #3
   13320:	vcvt.f64.s32	d7, s9
   13324:	vsub.f64	d7, d6, d7
   13328:	vldr	d6, [ip, #-8]
   1332c:	vdiv.f64	d5, d3, d6
   13330:	vmov	d6, r0, r1
   13334:	vmov	r0, s9
   13338:	vsub.f64	d5, d5, d6
   1333c:	ldr	r1, [sp, #0]
   1333e:	vcmpe.f64	d5, d7
   13342:	adds	r0, #48	; 0x30
   13344:	vmrs	APSR_nzcv, fpscr
   13348:	strb.w	r0, [r1], #1
   1334c:	bgt.w	13ca8 <_dtoa_r+0xc68>
   13350:	vmov.f64	d2, #112	; 0x3f800000  1.0
   13354:	vmov.f64	d4, #36	; 0x41200000  10.0
   13358:	mov.w	ip, #0
   1335c:	b.n	133c2 <_dtoa_r+0x382>
   1335e:	nop
   13360:	.word	0x636f4361
   13364:	.word	0x3fd287a7
   13368:	.word	0x8b60c8b3
   1336c:	.word	0x3fc68a28
   13370:	.word	0x509f79fb
   13374:	.word	0x3fd34413
   13378:	.word	0x7ff00000
   1337c:	.word	0x20000d81
   13380:	.word	0x200003a8
   13384:	.word	0x20000cdc
   13388:	.word	0x20000ce8
   1338c:	.word	0x20000380
   13390:	add.w	ip, ip, #1
   13394:	cmp	ip, r2
   13396:	bge.n	13434 <_dtoa_r+0x3f4>
   13398:	vmul.f64	d7, d7, d4
   1339c:	vmul.f64	d5, d5, d4
   133a0:	vcvt.s32.f64	s13, d7
   133a4:	vmov	r3, s13
   133a8:	vcvt.f64.s32	d3, s13
   133ac:	adds	r3, #48	; 0x30
   133ae:	vsub.f64	d7, d7, d3
   133b2:	vcmpe.f64	d7, d5
   133b6:	vmrs	APSR_nzcv, fpscr
   133ba:	strb.w	r3, [r1], #1
   133be:	bmi.w	13ca8 <_dtoa_r+0xc68>
   133c2:	vsub.f64	d6, d2, d7
   133c6:	vcmpe.f64	d6, d5
   133ca:	vmrs	APSR_nzcv, fpscr
   133ce:	bpl.n	13390 <_dtoa_r+0x350>
   133d0:	ldr	r2, [sp, #0]
   133d2:	str	r6, [sp, #16]
   133d4:	b.n	133dc <_dtoa_r+0x39c>
   133d6:	cmp	r2, r1
   133d8:	beq.w	13c7c <_dtoa_r+0xc3c>
   133dc:	mov	r9, r1
   133de:	ldrb.w	r3, [r1, #-1]!
   133e2:	cmp	r3, #57	; 0x39
   133e4:	beq.n	133d6 <_dtoa_r+0x396>
   133e6:	adds	r3, #1
   133e8:	uxtb	r3, r3
   133ea:	strb	r3, [r1, #0]
   133ec:	ldr	r3, [sp, #16]
   133ee:	adds	r3, #1
   133f0:	str	r3, [sp, #16]
   133f2:	b.n	136a0 <_dtoa_r+0x660>
   133f4:	subs	r1, r1, r0
   133f6:	movs	r3, #1
   133f8:	subs.w	r8, r1, #1
   133fc:	str	r3, [sp, #40]	; 0x28
   133fe:	bpl.w	13190 <_dtoa_r+0x150>
   13402:	rsb	r3, r1, #1
   13406:	str	r3, [sp, #24]
   13408:	mov.w	r8, #0
   1340c:	b.n	13194 <_dtoa_r+0x154>
   1340e:	movs	r6, #0
   13410:	str	r6, [r4, #60]	; 0x3c
   13412:	mov	r1, r6
   13414:	mov	r0, r4
   13416:	bl	108bc <_Balloc>
   1341a:	str	r0, [sp, #0]
   1341c:	cmp	r0, #0
   1341e:	beq.w	13cf0 <_dtoa_r+0xcb0>
   13422:	ldr	r3, [sp, #0]
   13424:	str	r3, [r4, #56]	; 0x38
   13426:	mov.w	r3, #4294967295
   1342a:	str	r3, [sp, #44]	; 0x2c
   1342c:	mov	r9, r3
   1342e:	movs	r3, #1
   13430:	mov	fp, r6
   13432:	str	r3, [sp, #28]
   13434:	ldr	r2, [sp, #52]	; 0x34
   13436:	cmp	r2, #0
   13438:	blt.n	134e6 <_dtoa_r+0x4a6>
   1343a:	ldr	r1, [sp, #16]
   1343c:	cmp	r1, #14
   1343e:	bgt.n	134e6 <_dtoa_r+0x4a6>
   13440:	ldr	r3, [pc, #732]	; (13720 <_dtoa_r+0x6e0>)
   13442:	cmp.w	fp, #0
   13446:	add.w	r3, r3, r1, lsl #3
   1344a:	vldr	d6, [r3]
   1344e:	bge.n	1347c <_dtoa_r+0x43c>
   13450:	cmp.w	r9, #0
   13454:	bgt.n	1347c <_dtoa_r+0x43c>
   13456:	bne.w	13a3e <_dtoa_r+0x9fe>
   1345a:	vmov.f64	d7, #20	; 0x40a00000  5.0
   1345e:	vmul.f64	d7, d6, d7
   13462:	vcmpe.f64	d8, d7
   13466:	vmrs	APSR_nzcv, fpscr
   1346a:	mov	sl, r9
   1346c:	mov	r6, r9
   1346e:	bhi.w	1394c <_dtoa_r+0x90c>
   13472:	ldr.w	r8, [sp]
   13476:	mvn.w	fp, fp
   1347a:	b.n	1395e <_dtoa_r+0x91e>
   1347c:	vdiv.f64	d7, d8, d6
   13480:	vcvt.s32.f64	s14, d7
   13484:	ldr	r1, [sp, #0]
   13486:	vmov	r3, s14
   1348a:	cmp.w	r9, #1
   1348e:	add.w	r3, r3, #48	; 0x30
   13492:	vcvt.f64.s32	d5, s14
   13496:	strb.w	r3, [r1], #1
   1349a:	vfms.f64	d8, d5, d6
   1349e:	beq.w	13b0a <_dtoa_r+0xaca>
   134a2:	vmov.f64	d4, #36	; 0x41200000  10.0
   134a6:	movs	r3, #1
   134a8:	b.n	134ce <_dtoa_r+0x48e>
   134aa:	vdiv.f64	d7, d8, d6
   134ae:	vcvt.s32.f64	s14, d7
   134b2:	adds	r3, #1
   134b4:	vmov	r2, s14
   134b8:	cmp	r3, r9
   134ba:	add.w	r2, r2, #48	; 0x30
   134be:	vcvt.f64.s32	d5, s14
   134c2:	strb.w	r2, [r1], #1
   134c6:	vfms.f64	d8, d5, d6
   134ca:	beq.w	13b0a <_dtoa_r+0xaca>
   134ce:	vmul.f64	d8, d8, d4
   134d2:	vcmp.f64	d8, #0.0
   134d6:	vmrs	APSR_nzcv, fpscr
   134da:	bne.n	134aa <_dtoa_r+0x46a>
   134dc:	ldr	r3, [sp, #16]
   134de:	adds	r3, #1
   134e0:	str	r3, [sp, #16]
   134e2:	mov	r9, r1
   134e4:	b.n	136a0 <_dtoa_r+0x660>
   134e6:	ldr	r3, [sp, #28]
   134e8:	cbz	r3, 1353c <_dtoa_r+0x4fc>
   134ea:	ldr	r3, [sp, #4]
   134ec:	cmp	r3, #1
   134ee:	ble.w	139de <_dtoa_r+0x99e>
   134f2:	ldr	r3, [sp, #32]
   134f4:	add.w	sl, r9, #4294967295
   134f8:	cmp	r3, sl
   134fa:	bge.w	1397c <_dtoa_r+0x93c>
   134fe:	ldr	r3, [sp, #32]
   13500:	str.w	sl, [sp, #32]
   13504:	sub.w	r2, sl, r3
   13508:	add	r7, r2
   1350a:	mov.w	sl, #0
   1350e:	cmp.w	r9, #0
   13512:	blt.w	13b60 <_dtoa_r+0xb20>
   13516:	ldr	r3, [sp, #24]
   13518:	str	r3, [sp, #36]	; 0x24
   1351a:	add	r3, r9
   1351c:	add	r8, r9
   1351e:	str	r3, [sp, #24]
   13520:	movs	r1, #1
   13522:	mov	r0, r4
   13524:	bl	10a60 <__i2b>
   13528:	mov	r6, r0
   1352a:	b.n	13546 <_dtoa_r+0x506>
   1352c:	ldr	r3, [pc, #500]	; (13724 <_dtoa_r+0x6e4>)
   1352e:	str	r3, [sp, #0]
   13530:	ldr	r0, [sp, #0]
   13532:	add	sp, #60	; 0x3c
   13534:	vpop	{d8}
   13538:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1353c:	ldr	r3, [sp, #24]
   1353e:	ldr.w	sl, [sp, #32]
   13542:	ldr	r6, [sp, #28]
   13544:	str	r3, [sp, #36]	; 0x24
   13546:	ldr	r3, [sp, #36]	; 0x24
   13548:	cbz	r3, 13566 <_dtoa_r+0x526>
   1354a:	cmp.w	r8, #0
   1354e:	ble.n	13566 <_dtoa_r+0x526>
   13550:	cmp	r3, r8
   13552:	ldr	r1, [sp, #24]
   13554:	mov	r2, r3
   13556:	it	ge
   13558:	movge	r2, r8
   1355a:	subs	r1, r1, r2
   1355c:	subs	r3, r3, r2
   1355e:	str	r1, [sp, #24]
   13560:	str	r3, [sp, #36]	; 0x24
   13562:	sub.w	r8, r8, r2
   13566:	ldr	r3, [sp, #32]
   13568:	cbz	r3, 13584 <_dtoa_r+0x544>
   1356a:	ldr	r3, [sp, #28]
   1356c:	cmp	r3, #0
   1356e:	beq.w	13ac0 <_dtoa_r+0xa80>
   13572:	cmp.w	sl, #0
   13576:	bgt.w	13982 <_dtoa_r+0x942>
   1357a:	ldr	r3, [sp, #32]
   1357c:	subs.w	r2, r3, sl
   13580:	bne.w	13b82 <_dtoa_r+0xb42>
   13584:	movs	r1, #1
   13586:	mov	r0, r4
   13588:	bl	10a60 <__i2b>
   1358c:	cmp	r7, #0
   1358e:	mov	sl, r0
   13590:	bgt.w	136f2 <_dtoa_r+0x6b2>
   13594:	ldr	r3, [sp, #4]
   13596:	cmp	r3, #1
   13598:	ble.w	138aa <_dtoa_r+0x86a>
   1359c:	movs	r3, #0
   1359e:	str	r3, [sp, #32]
   135a0:	movs	r0, #1
   135a2:	cmp	r7, #0
   135a4:	bne.w	1370a <_dtoa_r+0x6ca>
   135a8:	add	r0, r8
   135aa:	ands.w	r0, r0, #31
   135ae:	beq.w	138a6 <_dtoa_r+0x866>
   135b2:	rsb	r2, r0, #32
   135b6:	cmp	r2, #4
   135b8:	bgt.w	136cc <_dtoa_r+0x68c>
   135bc:	bne.w	139ac <_dtoa_r+0x96c>
   135c0:	ldr	r3, [sp, #24]
   135c2:	cmp	r3, #0
   135c4:	ble.n	135d2 <_dtoa_r+0x592>
   135c6:	mov	r1, r5
   135c8:	mov	r2, r3
   135ca:	mov	r0, r4
   135cc:	bl	10cd8 <__lshift>
   135d0:	mov	r5, r0
   135d2:	cmp.w	r8, #0
   135d6:	ble.n	135e4 <_dtoa_r+0x5a4>
   135d8:	mov	r1, sl
   135da:	mov	r2, r8
   135dc:	mov	r0, r4
   135de:	bl	10cd8 <__lshift>
   135e2:	mov	sl, r0
   135e4:	ldr	r3, [sp, #40]	; 0x28
   135e6:	cmp	r3, #0
   135e8:	bne.w	1386a <_dtoa_r+0x82a>
   135ec:	cmp.w	r9, #0
   135f0:	ble.w	1383e <_dtoa_r+0x7fe>
   135f4:	ldr	r3, [sp, #28]
   135f6:	cmp	r3, #0
   135f8:	bne.w	13742 <_dtoa_r+0x702>
   135fc:	ldr	r3, [sp, #16]
   135fe:	adds	r3, #1
   13600:	str	r3, [sp, #16]
   13602:	ldr.w	r8, [sp]
   13606:	movs	r7, #1
   13608:	b.n	1361a <_dtoa_r+0x5da>
   1360a:	mov	r1, r5
   1360c:	movs	r3, #0
   1360e:	movs	r2, #10
   13610:	mov	r0, r4
   13612:	bl	1091c <__multadd>
   13616:	adds	r7, #1
   13618:	mov	r5, r0
   1361a:	mov	r1, sl
   1361c:	mov	r0, r5
   1361e:	bl	12f18 <quorem>
   13622:	cmp	r9, r7
   13624:	add.w	r0, r0, #48	; 0x30
   13628:	strb.w	r0, [r8], #1
   1362c:	bgt.n	1360a <_dtoa_r+0x5ca>
   1362e:	cmp.w	r9, #0
   13632:	ldr	r2, [sp, #0]
   13634:	ite	gt
   13636:	movgt	fp, r9
   13638:	movle.w	fp, #1
   1363c:	mov	r3, r0
   1363e:	add	fp, r2
   13640:	movs	r7, #0
   13642:	mov	r1, r5
   13644:	movs	r2, #1
   13646:	mov	r0, r4
   13648:	str	r3, [sp, #4]
   1364a:	bl	10cd8 <__lshift>
   1364e:	mov	r1, sl
   13650:	mov	r5, r0
   13652:	bl	10dc8 <__mcmp>
   13656:	cmp	r0, #0
   13658:	ble.w	139ba <_dtoa_r+0x97a>
   1365c:	ldrb.w	r3, [fp, #-1]
   13660:	ldr	r2, [sp, #0]
   13662:	add.w	fp, fp, #4294967295
   13666:	b.n	13672 <_dtoa_r+0x632>
   13668:	cmp	r2, fp
   1366a:	beq.w	139d0 <_dtoa_r+0x990>
   1366e:	ldrb.w	r3, [fp, #-1]!
   13672:	cmp	r3, #57	; 0x39
   13674:	add.w	r9, fp, #1
   13678:	beq.n	13668 <_dtoa_r+0x628>
   1367a:	adds	r3, #1
   1367c:	strb.w	r3, [fp]
   13680:	mov	r1, sl
   13682:	mov	r0, r4
   13684:	bl	10908 <_Bfree>
   13688:	cbz	r6, 136a0 <_dtoa_r+0x660>
   1368a:	cbz	r7, 13698 <_dtoa_r+0x658>
   1368c:	cmp	r7, r6
   1368e:	beq.n	13698 <_dtoa_r+0x658>
   13690:	mov	r1, r7
   13692:	mov	r0, r4
   13694:	bl	10908 <_Bfree>
   13698:	mov	r1, r6
   1369a:	mov	r0, r4
   1369c:	bl	10908 <_Bfree>
   136a0:	mov	r1, r5
   136a2:	mov	r0, r4
   136a4:	bl	10908 <_Bfree>
   136a8:	movs	r3, #0
   136aa:	strb.w	r3, [r9]
   136ae:	ldrd	r2, r3, [sp, #16]
   136b2:	str	r2, [r3, #0]
   136b4:	ldr	r3, [sp, #108]	; 0x6c
   136b6:	cmp	r3, #0
   136b8:	beq.w	130b8 <_dtoa_r+0x78>
   136bc:	ldr	r0, [sp, #0]
   136be:	str.w	r9, [r3]
   136c2:	add	sp, #60	; 0x3c
   136c4:	vpop	{d8}
   136c8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   136cc:	rsb	r0, r0, #28
   136d0:	ldr	r3, [sp, #24]
   136d2:	add	r3, r0
   136d4:	str	r3, [sp, #24]
   136d6:	ldr	r3, [sp, #36]	; 0x24
   136d8:	add	r3, r0
   136da:	str	r3, [sp, #36]	; 0x24
   136dc:	add	r8, r0
   136de:	b.n	135c0 <_dtoa_r+0x580>
   136e0:	rsb	r2, r2, #32
   136e4:	lsl.w	r2, r6, r2
   136e8:	vmov	s14, r2
   136ec:	b.n	13102 <_dtoa_r+0xc2>
   136ee:	movs	r6, #1
   136f0:	b.n	131ba <_dtoa_r+0x17a>
   136f2:	mov	r1, r0
   136f4:	mov	r2, r7
   136f6:	mov	r0, r4
   136f8:	bl	10c18 <__pow5mult>
   136fc:	ldr	r3, [sp, #4]
   136fe:	cmp	r3, #1
   13700:	mov	sl, r0
   13702:	ble.w	13a90 <_dtoa_r+0xa50>
   13706:	movs	r3, #0
   13708:	str	r3, [sp, #32]
   1370a:	ldr.w	r2, [sl, #16]
   1370e:	add.w	r2, sl, r2, lsl #2
   13712:	ldr	r0, [r2, #16]
   13714:	bl	109c0 <__hi0bits>
   13718:	rsb	r0, r0, #32
   1371c:	b.n	135a8 <_dtoa_r+0x568>
   1371e:	nop
   13720:	.word	0x200003a8
   13724:	.word	0x20000d80
   13728:	mov	r1, r6
   1372a:	movs	r3, #0
   1372c:	movs	r2, #10
   1372e:	mov	r0, r4
   13730:	bl	1091c <__multadd>
   13734:	ldr	r3, [sp, #44]	; 0x2c
   13736:	cmp	r3, #0
   13738:	mov	r6, r0
   1373a:	ble.w	13cda <_dtoa_r+0xc9a>
   1373e:	str	r7, [sp, #16]
   13740:	mov	r9, r3
   13742:	ldr	r3, [sp, #36]	; 0x24
   13744:	cmp	r3, #0
   13746:	ble.n	13754 <_dtoa_r+0x714>
   13748:	mov	r1, r6
   1374a:	mov	r2, r3
   1374c:	mov	r0, r4
   1374e:	bl	10cd8 <__lshift>
   13752:	mov	r6, r0
   13754:	ldr	r3, [sp, #32]
   13756:	cmp	r3, #0
   13758:	bne.w	13b32 <_dtoa_r+0xaf2>
   1375c:	mov	r8, r6
   1375e:	ldr	r3, [sp, #8]
   13760:	ldr	r7, [sp, #0]
   13762:	and.w	r2, r3, #1
   13766:	subs	r3, r7, #1
   13768:	add	r3, r9
   1376a:	str	r3, [sp, #32]
   1376c:	ldr	r3, [sp, #4]
   1376e:	str	r2, [sp, #40]	; 0x28
   13770:	orrs	r3, r2
   13772:	str	r3, [sp, #36]	; 0x24
   13774:	mov	r1, sl
   13776:	mov	r0, r5
   13778:	bl	12f18 <quorem>
   1377c:	mov	r1, r6
   1377e:	mov	fp, r0
   13780:	mov	r0, r5
   13782:	bl	10dc8 <__mcmp>
   13786:	mov	r2, r8
   13788:	mov	r1, sl
   1378a:	mov	r9, r0
   1378c:	mov	r0, r4
   1378e:	bl	10e0c <__mdiff>
   13792:	ldr	r2, [r0, #12]
   13794:	mov	r1, r0
   13796:	add.w	r3, fp, #48	; 0x30
   1379a:	cmp	r2, #0
   1379c:	bne.n	13824 <_dtoa_r+0x7e4>
   1379e:	strd	r0, r3, [sp, #24]
   137a2:	mov	r0, r5
   137a4:	bl	10dc8 <__mcmp>
   137a8:	ldr	r1, [sp, #24]
   137aa:	str	r0, [sp, #8]
   137ac:	mov	r0, r4
   137ae:	bl	10908 <_Bfree>
   137b2:	ldr	r2, [sp, #8]
   137b4:	ldr	r3, [sp, #28]
   137b6:	cbnz	r2, 137c0 <_dtoa_r+0x780>
   137b8:	ldr	r1, [sp, #36]	; 0x24
   137ba:	cmp	r1, #0
   137bc:	beq.w	13cbc <_dtoa_r+0xc7c>
   137c0:	cmp.w	r9, #0
   137c4:	blt.w	13ace <_dtoa_r+0xa8e>
   137c8:	ldr	r1, [sp, #4]
   137ca:	orr.w	r9, r9, r1
   137ce:	ldr	r1, [sp, #40]	; 0x28
   137d0:	orrs.w	r9, r1, r9
   137d4:	beq.w	13ace <_dtoa_r+0xa8e>
   137d8:	cmp	r2, #0
   137da:	bgt.w	13b6a <_dtoa_r+0xb2a>
   137de:	ldr	r2, [sp, #32]
   137e0:	strb	r3, [r7, #0]
   137e2:	add.w	r9, r7, #1
   137e6:	cmp	r7, r2
   137e8:	mov	fp, r9
   137ea:	beq.w	13b76 <_dtoa_r+0xb36>
   137ee:	mov	r1, r5
   137f0:	movs	r3, #0
   137f2:	movs	r2, #10
   137f4:	mov	r0, r4
   137f6:	bl	1091c <__multadd>
   137fa:	cmp	r6, r8
   137fc:	mov	r5, r0
   137fe:	mov	r1, r6
   13800:	mov.w	r3, #0
   13804:	mov.w	r2, #10
   13808:	mov	r0, r4
   1380a:	beq.n	13832 <_dtoa_r+0x7f2>
   1380c:	bl	1091c <__multadd>
   13810:	mov	r1, r8
   13812:	mov	r6, r0
   13814:	movs	r3, #0
   13816:	movs	r2, #10
   13818:	mov	r0, r4
   1381a:	bl	1091c <__multadd>
   1381e:	mov	r7, r9
   13820:	mov	r8, r0
   13822:	b.n	13774 <_dtoa_r+0x734>
   13824:	mov	r0, r4
   13826:	str	r3, [sp, #8]
   13828:	bl	10908 <_Bfree>
   1382c:	ldr	r3, [sp, #8]
   1382e:	movs	r2, #1
   13830:	b.n	137c0 <_dtoa_r+0x780>
   13832:	bl	1091c <__multadd>
   13836:	mov	r7, r9
   13838:	mov	r6, r0
   1383a:	mov	r8, r0
   1383c:	b.n	13774 <_dtoa_r+0x734>
   1383e:	ldr	r3, [sp, #4]
   13840:	cmp	r3, #2
   13842:	bgt.n	13928 <_dtoa_r+0x8e8>
   13844:	ldr	r3, [sp, #28]
   13846:	cmp	r3, #0
   13848:	bne.w	13742 <_dtoa_r+0x702>
   1384c:	ldr	r3, [sp, #16]
   1384e:	mov	r1, sl
   13850:	adds	r3, #1
   13852:	mov	r0, r5
   13854:	str	r3, [sp, #16]
   13856:	bl	12f18 <quorem>
   1385a:	ldr.w	fp, [sp]
   1385e:	add.w	r3, r0, #48	; 0x30
   13862:	strb.w	r3, [fp], #1
   13866:	movs	r7, #0
   13868:	b.n	13642 <_dtoa_r+0x602>
   1386a:	mov	r1, sl
   1386c:	mov	r0, r5
   1386e:	bl	10dc8 <__mcmp>
   13872:	cmp	r0, #0
   13874:	bge.w	135ec <_dtoa_r+0x5ac>
   13878:	mov	r1, r5
   1387a:	movs	r3, #0
   1387c:	movs	r2, #10
   1387e:	mov	r0, r4
   13880:	bl	1091c <__multadd>
   13884:	ldr	r3, [sp, #16]
   13886:	subs	r7, r3, #1
   13888:	ldr	r3, [sp, #28]
   1388a:	mov	r5, r0
   1388c:	cmp	r3, #0
   1388e:	bne.w	13728 <_dtoa_r+0x6e8>
   13892:	ldr	r3, [sp, #44]	; 0x2c
   13894:	cmp	r3, #0
   13896:	ble.w	13cca <_dtoa_r+0xc8a>
   1389a:	mov	r9, r3
   1389c:	b.n	13602 <_dtoa_r+0x5c2>
   1389e:	ldr	r3, [pc, #752]	; (13b90 <_dtoa_r+0xb50>)
   138a0:	str	r3, [sp, #0]
   138a2:	adds	r3, #3
   138a4:	b.n	131f0 <_dtoa_r+0x1b0>
   138a6:	movs	r0, #28
   138a8:	b.n	136d0 <_dtoa_r+0x690>
   138aa:	ldrd	r0, r1, [sp, #8]
   138ae:	cmp	r0, #0
   138b0:	bne.w	1359c <_dtoa_r+0x55c>
   138b4:	ubfx	r2, r1, #0, #20
   138b8:	cmp	r2, #0
   138ba:	beq.w	13aa6 <_dtoa_r+0xa66>
   138be:	ldr	r3, [sp, #8]
   138c0:	str	r3, [sp, #32]
   138c2:	b.n	135a0 <_dtoa_r+0x560>
   138c4:	movs	r3, #1
   138c6:	str	r3, [sp, #28]
   138c8:	ldr	r3, [sp, #16]
   138ca:	add	r3, fp
   138cc:	add.w	r9, r3, #1
   138d0:	cmp.w	r9, #1
   138d4:	mov	ip, r9
   138d6:	str	r3, [sp, #44]	; 0x2c
   138d8:	it	lt
   138da:	movlt.w	ip, #1
   138de:	movs	r1, #0
   138e0:	cmp.w	ip, #23
   138e4:	str	r1, [r4, #60]	; 0x3c
   138e6:	ble.w	13262 <_dtoa_r+0x222>
   138ea:	movs	r0, #1
   138ec:	movs	r2, #4
   138ee:	lsls	r2, r2, #1
   138f0:	add.w	r3, r2, #20
   138f4:	cmp	r3, ip
   138f6:	mov	r1, r0
   138f8:	add.w	r0, r0, #1
   138fc:	bls.n	138ee <_dtoa_r+0x8ae>
   138fe:	str	r1, [r4, #60]	; 0x3c
   13900:	b.n	13262 <_dtoa_r+0x222>
   13902:	movs	r3, #1
   13904:	str	r3, [sp, #28]
   13906:	cmp.w	fp, #0
   1390a:	ble.n	139b2 <_dtoa_r+0x972>
   1390c:	str.w	fp, [sp, #44]	; 0x2c
   13910:	mov	r9, fp
   13912:	mov	ip, fp
   13914:	b.n	138de <_dtoa_r+0x89e>
   13916:	movs	r3, #0
   13918:	str	r3, [sp, #28]
   1391a:	b.n	138c8 <_dtoa_r+0x888>
   1391c:	movs	r3, #0
   1391e:	str	r3, [sp, #28]
   13920:	b.n	13906 <_dtoa_r+0x8c6>
   13922:	ldr.w	r9, [sp, #44]	; 0x2c
   13926:	str	r7, [sp, #16]
   13928:	cmp.w	r9, #0
   1392c:	bne.w	13472 <_dtoa_r+0x432>
   13930:	mov	r1, sl
   13932:	mov	r3, r9
   13934:	movs	r2, #5
   13936:	mov	r0, r4
   13938:	bl	1091c <__multadd>
   1393c:	mov	r1, r0
   1393e:	mov	sl, r0
   13940:	mov	r0, r5
   13942:	bl	10dc8 <__mcmp>
   13946:	cmp	r0, #0
   13948:	ble.w	13472 <_dtoa_r+0x432>
   1394c:	ldr	r3, [sp, #16]
   1394e:	add.w	fp, r3, #1
   13952:	ldr	r3, [sp, #0]
   13954:	movs	r2, #49	; 0x31
   13956:	mov	r8, r3
   13958:	strb.w	r2, [r3], #1
   1395c:	str	r3, [sp, #0]
   1395e:	mov	r1, sl
   13960:	mov	r0, r4
   13962:	bl	10908 <_Bfree>
   13966:	add.w	r3, fp, #1
   1396a:	ldr.w	r9, [sp]
   1396e:	str	r3, [sp, #16]
   13970:	str.w	r8, [sp]
   13974:	cmp	r6, #0
   13976:	bne.w	13698 <_dtoa_r+0x658>
   1397a:	b.n	136a0 <_dtoa_r+0x660>
   1397c:	sub.w	sl, r3, sl
   13980:	b.n	1350e <_dtoa_r+0x4ce>
   13982:	mov	r1, r6
   13984:	mov	r2, sl
   13986:	mov	r0, r4
   13988:	bl	10c18 <__pow5mult>
   1398c:	mov	r2, r5
   1398e:	mov	r1, r0
   13990:	mov	r6, r0
   13992:	mov	r0, r4
   13994:	bl	10abc <__multiply>
   13998:	mov	r1, r5
   1399a:	mov	r5, r0
   1399c:	mov	r0, r4
   1399e:	bl	10908 <_Bfree>
   139a2:	b.n	1357a <_dtoa_r+0x53a>
   139a4:	movs	r0, #2
   139a6:	vmov.f64	d5, d8
   139aa:	b.n	132b0 <_dtoa_r+0x270>
   139ac:	rsb	r0, r0, #60	; 0x3c
   139b0:	b.n	136d0 <_dtoa_r+0x690>
   139b2:	mov.w	fp, #1
   139b6:	mov	r9, fp
   139b8:	b.n	1325a <_dtoa_r+0x21a>
   139ba:	bne.n	139c4 <_dtoa_r+0x984>
   139bc:	ldr	r3, [sp, #4]
   139be:	lsls	r3, r3, #31
   139c0:	bmi.w	1365c <_dtoa_r+0x61c>
   139c4:	mov	r9, fp
   139c6:	ldrb.w	r3, [fp, #-1]!
   139ca:	cmp	r3, #48	; 0x30
   139cc:	beq.n	139c4 <_dtoa_r+0x984>
   139ce:	b.n	13680 <_dtoa_r+0x640>
   139d0:	ldr	r3, [sp, #16]
   139d2:	ldr	r2, [sp, #0]
   139d4:	adds	r3, #1
   139d6:	str	r3, [sp, #16]
   139d8:	movs	r3, #49	; 0x31
   139da:	strb	r3, [r2, #0]
   139dc:	b.n	13680 <_dtoa_r+0x640>
   139de:	cmp.w	sl, #0
   139e2:	beq.w	13c2c <_dtoa_r+0xbec>
   139e6:	addw	r2, r2, #1075	; 0x433
   139ea:	ldr	r3, [sp, #24]
   139ec:	str	r3, [sp, #36]	; 0x24
   139ee:	add	r3, r2
   139f0:	ldr.w	sl, [sp, #32]
   139f4:	str	r3, [sp, #24]
   139f6:	add	r8, r2
   139f8:	b.n	13520 <_dtoa_r+0x4e0>
   139fa:	vmov	s15, r0
   139fe:	vmov.f64	d5, #28	; 0x40e00000  7.0
   13a02:	vcvt.f64.s32	d7, s15
   13a06:	vfma.f64	d5, d6, d7
   13a0a:	vmov	r2, s11
   13a0e:	vmov	r0, r1, d5
   13a12:	sub.w	r1, r2, #54525952	; 0x3400000
   13a16:	vmov	d5, r0, r1
   13a1a:	vmov.f64	d7, #20	; 0x40a00000  5.0
   13a1e:	vsub.f64	d7, d6, d7
   13a22:	vcmpe.f64	d7, d5
   13a26:	vmrs	APSR_nzcv, fpscr
   13a2a:	bgt.w	13c9c <_dtoa_r+0xc5c>
   13a2e:	vneg.f64	d5, d5
   13a32:	vcmpe.f64	d7, d5
   13a36:	vmrs	APSR_nzcv, fpscr
   13a3a:	bpl.w	13434 <_dtoa_r+0x3f4>
   13a3e:	mov.w	sl, #0
   13a42:	mov	r6, sl
   13a44:	b.n	13472 <_dtoa_r+0x432>
   13a46:	beq.w	13c34 <_dtoa_r+0xbf4>
   13a4a:	ldr	r3, [sp, #16]
   13a4c:	ldr	r1, [pc, #324]	; (13b94 <_dtoa_r+0xb54>)
   13a4e:	negs	r2, r3
   13a50:	and.w	r0, r2, #15
   13a54:	add.w	r1, r1, r0, lsl #3
   13a58:	vldr	d6, [r1]
   13a5c:	asrs	r2, r2, #4
   13a5e:	vmul.f64	d6, d8, d6
   13a62:	beq.w	13cea <_dtoa_r+0xcaa>
   13a66:	vmov.f64	d7, d6
   13a6a:	ldr	r1, [pc, #300]	; (13b98 <_dtoa_r+0xb58>)
   13a6c:	movs	r6, #0
   13a6e:	movs	r0, #2
   13a70:	lsls	r3, r2, #31
   13a72:	bpl.n	13a80 <_dtoa_r+0xa40>
   13a74:	vldr	d5, [r1]
   13a78:	adds	r0, #1
   13a7a:	movs	r6, #1
   13a7c:	vmul.f64	d7, d7, d5
   13a80:	asrs	r2, r2, #1
   13a82:	add.w	r1, r1, #8
   13a86:	bne.n	13a70 <_dtoa_r+0xa30>
   13a88:	cmp	r6, #0
   13a8a:	vseleq.f64	d6, d6, d7
   13a8e:	b.n	132ce <_dtoa_r+0x28e>
   13a90:	ldr	r3, [sp, #8]
   13a92:	cmp	r3, #0
   13a94:	bne.w	13706 <_dtoa_r+0x6c6>
   13a98:	ldrd	r0, r1, [sp, #8]
   13a9c:	ubfx	r2, r1, #0, #20
   13aa0:	cmp	r2, #0
   13aa2:	bne.w	13d14 <_dtoa_r+0xcd4>
   13aa6:	ldr	r2, [pc, #244]	; (13b9c <_dtoa_r+0xb5c>)
   13aa8:	ands	r2, r1
   13aaa:	cmp	r2, #0
   13aac:	beq.w	13ca4 <_dtoa_r+0xc64>
   13ab0:	ldr	r3, [sp, #24]
   13ab2:	adds	r3, #1
   13ab4:	str	r3, [sp, #24]
   13ab6:	movs	r3, #1
   13ab8:	add.w	r8, r8, #1
   13abc:	str	r3, [sp, #32]
   13abe:	b.n	135a0 <_dtoa_r+0x560>
   13ac0:	mov	r1, r5
   13ac2:	ldr	r2, [sp, #32]
   13ac4:	mov	r0, r4
   13ac6:	bl	10c18 <__pow5mult>
   13aca:	mov	r5, r0
   13acc:	b.n	13584 <_dtoa_r+0x544>
   13ace:	cmp	r2, #0
   13ad0:	ble.n	13af8 <_dtoa_r+0xab8>
   13ad2:	mov	r1, r5
   13ad4:	movs	r2, #1
   13ad6:	mov	r0, r4
   13ad8:	str	r3, [sp, #4]
   13ada:	bl	10cd8 <__lshift>
   13ade:	mov	r1, sl
   13ae0:	mov	r5, r0
   13ae2:	bl	10dc8 <__mcmp>
   13ae6:	cmp	r0, #0
   13ae8:	ldr	r3, [sp, #4]
   13aea:	ble.w	13cb0 <_dtoa_r+0xc70>
   13aee:	cmp	r3, #57	; 0x39
   13af0:	beq.w	13c88 <_dtoa_r+0xc48>
   13af4:	add.w	r3, fp, #49	; 0x31
   13af8:	mov	r9, r7
   13afa:	strb.w	r3, [r9], #1
   13afe:	ldr	r3, [sp, #16]
   13b00:	adds	r3, #1
   13b02:	mov	r7, r6
   13b04:	str	r3, [sp, #16]
   13b06:	mov	r6, r8
   13b08:	b.n	13680 <_dtoa_r+0x640>
   13b0a:	vadd.f64	d8, d8, d8
   13b0e:	vcmpe.f64	d8, d6
   13b12:	vmrs	APSR_nzcv, fpscr
   13b16:	bgt.n	13b2e <_dtoa_r+0xaee>
   13b18:	vcmp.f64	d8, d6
   13b1c:	vmrs	APSR_nzcv, fpscr
   13b20:	bne.w	134dc <_dtoa_r+0x49c>
   13b24:	vmov	r3, s14
   13b28:	lsls	r0, r3, #31
   13b2a:	bpl.w	134dc <_dtoa_r+0x49c>
   13b2e:	ldr	r2, [sp, #0]
   13b30:	b.n	133dc <_dtoa_r+0x39c>
   13b32:	ldr	r1, [r6, #4]
   13b34:	mov	r0, r4
   13b36:	bl	108bc <_Balloc>
   13b3a:	mov	r7, r0
   13b3c:	cmp	r0, #0
   13b3e:	beq.w	13cfe <_dtoa_r+0xcbe>
   13b42:	ldr	r3, [r6, #16]
   13b44:	adds	r3, #2
   13b46:	lsls	r2, r3, #2
   13b48:	add.w	r1, r6, #12
   13b4c:	adds	r0, #12
   13b4e:	bl	b09c <memcpy>
   13b52:	mov	r1, r7
   13b54:	movs	r2, #1
   13b56:	mov	r0, r4
   13b58:	bl	10cd8 <__lshift>
   13b5c:	mov	r8, r0
   13b5e:	b.n	1375e <_dtoa_r+0x71e>
   13b60:	ldr	r3, [sp, #24]
   13b62:	sub.w	r3, r3, r9
   13b66:	str	r3, [sp, #36]	; 0x24
   13b68:	b.n	13520 <_dtoa_r+0x4e0>
   13b6a:	cmp	r3, #57	; 0x39
   13b6c:	beq.w	13c88 <_dtoa_r+0xc48>
   13b70:	mov	r9, r7
   13b72:	adds	r3, #1
   13b74:	b.n	13afa <_dtoa_r+0xaba>
   13b76:	ldr	r2, [sp, #16]
   13b78:	adds	r2, #1
   13b7a:	mov	r7, r6
   13b7c:	str	r2, [sp, #16]
   13b7e:	mov	r6, r8
   13b80:	b.n	13642 <_dtoa_r+0x602>
   13b82:	mov	r1, r5
   13b84:	mov	r0, r4
   13b86:	bl	10c18 <__pow5mult>
   13b8a:	mov	r5, r0
   13b8c:	b.n	13584 <_dtoa_r+0x544>
   13b8e:	nop
   13b90:	.word	0x20000ce8
   13b94:	.word	0x200003a8
   13b98:	.word	0x20000380
   13b9c:	.word	0x7ff00000
   13ba0:	ldr	r3, [pc, #376]	; (13d1c <_dtoa_r+0xcdc>)
   13ba2:	vcvt.s32.f64	s11, d6
   13ba6:	add.w	ip, r3, r2, lsl #3
   13baa:	vldr	d3, [ip, #-8]
   13bae:	vcvt.f64.s32	d7, s11
   13bb2:	vsub.f64	d7, d6, d7
   13bb6:	vmov	d6, r0, r1
   13bba:	vmov	r1, s11
   13bbe:	vmul.f64	d3, d3, d6
   13bc2:	ldr	r0, [sp, #0]
   13bc4:	adds	r1, #48	; 0x30
   13bc6:	cmp	r2, #1
   13bc8:	strb.w	r1, [r0], #1
   13bcc:	beq.w	13cd6 <_dtoa_r+0xc96>
   13bd0:	vmov.f64	d4, #36	; 0x41200000  10.0
   13bd4:	ldr	r3, [sp, #0]
   13bd6:	adds	r1, r3, r2
   13bd8:	vmul.f64	d7, d7, d4
   13bdc:	vcvt.s32.f64	s13, d7
   13be0:	vmov	r3, s13
   13be4:	adds	r3, #48	; 0x30
   13be6:	strb.w	r3, [r0], #1
   13bea:	cmp	r1, r0
   13bec:	vcvt.f64.s32	d5, s13
   13bf0:	vsub.f64	d7, d7, d5
   13bf4:	bne.n	13bd8 <_dtoa_r+0xb98>
   13bf6:	vmov.f64	d6, #96	; 0x3f000000  0.5
   13bfa:	vadd.f64	d5, d3, d6
   13bfe:	vcmpe.f64	d5, d7
   13c02:	vmrs	APSR_nzcv, fpscr
   13c06:	bmi.w	133d0 <_dtoa_r+0x390>
   13c0a:	vsub.f64	d6, d6, d3
   13c0e:	vcmpe.f64	d6, d7
   13c12:	vmrs	APSR_nzcv, fpscr
   13c16:	ble.w	13434 <_dtoa_r+0x3f4>
   13c1a:	mov	r9, r1
   13c1c:	subs	r1, #1
   13c1e:	ldrb.w	r3, [r9, #-1]
   13c22:	cmp	r3, #48	; 0x30
   13c24:	beq.n	13c1a <_dtoa_r+0xbda>
   13c26:	adds	r3, r6, #1
   13c28:	str	r3, [sp, #16]
   13c2a:	b.n	136a0 <_dtoa_r+0x660>
   13c2c:	ldr	r2, [sp, #48]	; 0x30
   13c2e:	rsb	r2, r2, #54	; 0x36
   13c32:	b.n	139ea <_dtoa_r+0x9aa>
   13c34:	movs	r0, #2
   13c36:	vmov.f64	d6, d8
   13c3a:	b.w	132ce <_dtoa_r+0x28e>
   13c3e:	cmp.w	r9, #0
   13c42:	beq.w	139fa <_dtoa_r+0x9ba>
   13c46:	ldr	r2, [sp, #44]	; 0x2c
   13c48:	cmp	r2, #0
   13c4a:	ble.w	13434 <_dtoa_r+0x3f4>
   13c4e:	vmov.f64	d4, #36	; 0x41200000  10.0
   13c52:	vmul.f64	d6, d6, d4
   13c56:	adds	r0, #1
   13c58:	vmov	s15, r0
   13c5c:	ldr	r3, [sp, #16]
   13c5e:	vcvt.f64.s32	d5, s15
   13c62:	vmov.f64	d7, #28	; 0x40e00000  7.0
   13c66:	vfma.f64	d7, d6, d5
   13c6a:	vmov	ip, s15
   13c6e:	vmov	r0, r1, d7
   13c72:	subs	r6, r3, #1
   13c74:	sub.w	r1, ip, #54525952	; 0x3400000
   13c78:	b.w	1330a <_dtoa_r+0x2ca>
   13c7c:	ldr	r3, [sp, #16]
   13c7e:	adds	r3, #1
   13c80:	str	r3, [sp, #16]
   13c82:	movs	r3, #49	; 0x31
   13c84:	b.w	133ea <_dtoa_r+0x3aa>
   13c88:	ldr	r3, [sp, #16]
   13c8a:	mov	fp, r7
   13c8c:	adds	r3, #1
   13c8e:	str	r3, [sp, #16]
   13c90:	movs	r3, #57	; 0x39
   13c92:	mov	r7, r6
   13c94:	strb.w	r3, [fp], #1
   13c98:	mov	r6, r8
   13c9a:	b.n	13660 <_dtoa_r+0x620>
   13c9c:	mov.w	sl, #0
   13ca0:	mov	r6, sl
   13ca2:	b.n	1394c <_dtoa_r+0x90c>
   13ca4:	str	r2, [sp, #32]
   13ca6:	b.n	135a0 <_dtoa_r+0x560>
   13ca8:	adds	r3, r6, #1
   13caa:	str	r3, [sp, #16]
   13cac:	mov	r9, r1
   13cae:	b.n	136a0 <_dtoa_r+0x660>
   13cb0:	bne.w	13af8 <_dtoa_r+0xab8>
   13cb4:	lsls	r2, r3, #31
   13cb6:	bpl.w	13af8 <_dtoa_r+0xab8>
   13cba:	b.n	13aee <_dtoa_r+0xaae>
   13cbc:	cmp	r3, #57	; 0x39
   13cbe:	beq.n	13c88 <_dtoa_r+0xc48>
   13cc0:	cmp.w	r9, #0
   13cc4:	bgt.w	13af4 <_dtoa_r+0xab4>
   13cc8:	b.n	13af8 <_dtoa_r+0xab8>
   13cca:	ldr	r3, [sp, #4]
   13ccc:	cmp	r3, #2
   13cce:	bgt.w	13922 <_dtoa_r+0x8e2>
   13cd2:	str	r7, [sp, #16]
   13cd4:	b.n	1384c <_dtoa_r+0x80c>
   13cd6:	mov	r1, r0
   13cd8:	b.n	13bf6 <_dtoa_r+0xbb6>
   13cda:	ldr	r3, [sp, #4]
   13cdc:	cmp	r3, #2
   13cde:	bgt.w	13922 <_dtoa_r+0x8e2>
   13ce2:	ldr.w	r9, [sp, #44]	; 0x2c
   13ce6:	str	r7, [sp, #16]
   13ce8:	b.n	13742 <_dtoa_r+0x702>
   13cea:	movs	r0, #2
   13cec:	b.w	132ce <_dtoa_r+0x28e>
   13cf0:	ldr	r3, [pc, #44]	; (13d20 <_dtoa_r+0xce0>)
   13cf2:	ldr	r0, [pc, #48]	; (13d24 <_dtoa_r+0xce4>)
   13cf4:	movs	r2, #0
   13cf6:	movw	r1, #431	; 0x1af
   13cfa:	bl	12e60 <__assert_func>
   13cfe:	ldr	r3, [pc, #32]	; (13d20 <_dtoa_r+0xce0>)
   13d00:	ldr	r0, [pc, #32]	; (13d24 <_dtoa_r+0xce4>)
   13d02:	mov	r2, r7
   13d04:	movw	r1, #751	; 0x2ef
   13d08:	bl	12e60 <__assert_func>
   13d0c:	ldr	r3, [pc, #24]	; (13d28 <_dtoa_r+0xce8>)
   13d0e:	str	r3, [sp, #0]
   13d10:	b.w	130b8 <_dtoa_r+0x78>
   13d14:	ldr	r3, [sp, #8]
   13d16:	str	r3, [sp, #32]
   13d18:	b.n	1370a <_dtoa_r+0x6ca>
   13d1a:	nop
   13d1c:	.word	0x200003a8
   13d20:	.word	0x20000b68
   13d24:	.word	0x20000cec
   13d28:	.word	0x20000cdc

00013d2c <_wcrtomb_r>:
   13d2c:	push	{r4, r5, r6, lr}
   13d2e:	mov	r5, r0
   13d30:	sub	sp, #16
   13d32:	cbz	r3, 13d4c <_wcrtomb_r+0x20>
   13d34:	mov	r4, r3
   13d36:	cbz	r1, 13d54 <_wcrtomb_r+0x28>
   13d38:	ldr	r3, [pc, #56]	; (13d74 <_wcrtomb_r+0x48>)
   13d3a:	mov	r0, r5
   13d3c:	ldr.w	r6, [r3, #224]	; 0xe0
   13d40:	mov	r3, r4
   13d42:	blx	r6
   13d44:	adds	r3, r0, #1
   13d46:	beq.n	13d68 <_wcrtomb_r+0x3c>
   13d48:	add	sp, #16
   13d4a:	pop	{r4, r5, r6, pc}
   13d4c:	add.w	r4, r0, #260	; 0x104
   13d50:	cmp	r1, #0
   13d52:	bne.n	13d38 <_wcrtomb_r+0xc>
   13d54:	ldr	r2, [pc, #28]	; (13d74 <_wcrtomb_r+0x48>)
   13d56:	mov	r3, r4
   13d58:	ldr.w	r6, [r2, #224]	; 0xe0
   13d5c:	mov	r0, r5
   13d5e:	mov	r2, r1
   13d60:	add	r1, sp, #4
   13d62:	blx	r6
   13d64:	adds	r3, r0, #1
   13d66:	bne.n	13d48 <_wcrtomb_r+0x1c>
   13d68:	movs	r2, #0
   13d6a:	movs	r3, #138	; 0x8a
   13d6c:	str	r2, [r4, #0]
   13d6e:	str	r3, [r5, #0]
   13d70:	add	sp, #16
   13d72:	pop	{r4, r5, r6, pc}
   13d74:	.word	0x20001c48

00013d78 <_wcsrtombs_r>:
   13d78:	push	{r4, lr}
   13d7a:	sub	sp, #8
   13d7c:	ldr	r4, [sp, #16]
   13d7e:	strd	r3, r4, [sp]
   13d82:	mov.w	r3, #4294967295
   13d86:	bl	15518 <_wcsnrtombs_r>
   13d8a:	add	sp, #8
   13d8c:	pop	{r4, pc}
   13d8e:	nop

00013d90 <fiprintf>:
   13d90:	push	{r1, r2, r3}
   13d92:	push	{r4, lr}
   13d94:	sub	sp, #12
   13d96:	add	r3, sp, #20
   13d98:	ldr	r4, [pc, #24]	; (13db4 <fiprintf+0x24>)
   13d9a:	ldr.w	r2, [r3], #4
   13d9e:	str	r3, [sp, #4]
   13da0:	mov	r1, r0
   13da2:	ldr	r0, [r4, #0]
   13da4:	bl	13f30 <_vfiprintf_r>
   13da8:	add	sp, #12
   13daa:	ldmia.w	sp!, {r4, lr}
   13dae:	add	sp, #12
   13db0:	bx	lr
   13db2:	nop
   13db4:	.word	0x200021d0

00013db8 <__ssprint_r>:
   13db8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13dbc:	ldr	r3, [r2, #8]
   13dbe:	ldr	r7, [r2, #0]
   13dc0:	sub	sp, #12
   13dc2:	mov	sl, r2
   13dc4:	cmp	r3, #0
   13dc6:	beq.n	13eaa <__ssprint_r+0xf2>
   13dc8:	mov	r9, r0
   13dca:	ldr	r2, [r1, #8]
   13dcc:	ldr	r0, [r1, #0]
   13dce:	mov	r4, r1
   13dd0:	adds	r7, #8
   13dd2:	b.n	13e5c <__ssprint_r+0xa4>
   13dd4:	ldrh	r3, [r4, #12]
   13dd6:	tst.w	r3, #1152	; 0x480
   13dda:	beq.n	13e3a <__ssprint_r+0x82>
   13ddc:	ldrd	r1, r6, [r4, #16]
   13de0:	sub.w	r8, r0, r1
   13de4:	add.w	r6, r6, r6, lsl #1
   13de8:	add.w	r6, r6, r6, lsr #31
   13dec:	add.w	r0, r8, #1
   13df0:	asrs	r6, r6, #1
   13df2:	add	r0, r5
   13df4:	cmp	r0, r6
   13df6:	mov	r2, r6
   13df8:	itt	hi
   13dfa:	movhi	r6, r0
   13dfc:	movhi	r2, r6
   13dfe:	lsls	r3, r3, #21
   13e00:	bpl.n	13e72 <__ssprint_r+0xba>
   13e02:	mov	r1, r2
   13e04:	mov	r0, r9
   13e06:	bl	f330 <_malloc_r>
   13e0a:	str	r0, [sp, #4]
   13e0c:	cmp	r0, #0
   13e0e:	beq.n	13e86 <__ssprint_r+0xce>
   13e10:	mov	r2, r8
   13e12:	ldr	r1, [r4, #16]
   13e14:	bl	b09c <memcpy>
   13e18:	ldrh	r2, [r4, #12]
   13e1a:	ldr	r3, [sp, #4]
   13e1c:	bic.w	r2, r2, #1152	; 0x480
   13e20:	orr.w	r2, r2, #128	; 0x80
   13e24:	strh	r2, [r4, #12]
   13e26:	sub.w	r2, r6, r8
   13e2a:	add.w	r0, r3, r8
   13e2e:	str	r6, [r4, #20]
   13e30:	str	r2, [r4, #8]
   13e32:	str	r3, [r4, #16]
   13e34:	str	r0, [r4, #0]
   13e36:	mov	r6, r5
   13e38:	mov	r8, r5
   13e3a:	mov	r2, r8
   13e3c:	mov	r1, fp
   13e3e:	bl	1000c <memmove>
   13e42:	ldr.w	r3, [sl, #8]
   13e46:	ldr	r2, [r4, #8]
   13e48:	ldr	r0, [r4, #0]
   13e4a:	subs	r2, r2, r6
   13e4c:	add	r0, r8
   13e4e:	subs	r3, r3, r5
   13e50:	str	r2, [r4, #8]
   13e52:	str	r0, [r4, #0]
   13e54:	str.w	r3, [sl, #8]
   13e58:	cbz	r3, 13eaa <__ssprint_r+0xf2>
   13e5a:	adds	r7, #8
   13e5c:	ldrd	fp, r5, [r7, #-8]
   13e60:	cmp	r5, #0
   13e62:	beq.n	13e5a <__ssprint_r+0xa2>
   13e64:	cmp	r2, r5
   13e66:	mov	r6, r2
   13e68:	mov	r8, r2
   13e6a:	bls.n	13dd4 <__ssprint_r+0x1c>
   13e6c:	mov	r6, r5
   13e6e:	mov	r8, r5
   13e70:	b.n	13e3a <__ssprint_r+0x82>
   13e72:	mov	r0, r9
   13e74:	bl	f8a8 <_realloc_r>
   13e78:	mov	r3, r0
   13e7a:	cmp	r0, #0
   13e7c:	bne.n	13e26 <__ssprint_r+0x6e>
   13e7e:	ldr	r1, [r4, #16]
   13e80:	mov	r0, r9
   13e82:	bl	10684 <_free_r>
   13e86:	ldrh	r3, [r4, #12]
   13e88:	movs	r2, #12
   13e8a:	orr.w	r3, r3, #64	; 0x40
   13e8e:	str.w	r2, [r9]
   13e92:	mov.w	r0, #4294967295
   13e96:	strh	r3, [r4, #12]
   13e98:	movs	r2, #0
   13e9a:	movs	r3, #0
   13e9c:	str.w	r2, [sl, #8]
   13ea0:	str.w	r3, [sl, #4]
   13ea4:	add	sp, #12
   13ea6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13eaa:	movs	r0, #0
   13eac:	movs	r3, #0
   13eae:	str.w	r3, [sl, #4]
   13eb2:	add	sp, #12
   13eb4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00013eb8 <__sprint_r.part.0>:
   13eb8:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13ebc:	ldr	r3, [r1, #100]	; 0x64
   13ebe:	lsls	r4, r3, #18
   13ec0:	mov	r8, r2
   13ec2:	bpl.n	13f20 <__sprint_r.part.0+0x68>
   13ec4:	ldr	r3, [r2, #8]
   13ec6:	ldr	r2, [r2, #0]
   13ec8:	cbz	r3, 13f1c <__sprint_r.part.0+0x64>
   13eca:	mov	fp, r1
   13ecc:	mov	r6, r0
   13ece:	add.w	r9, r2, #8
   13ed2:	ldrd	r5, sl, [r9, #-8]
   13ed6:	movs.w	r7, sl, lsr #2
   13eda:	beq.n	13f08 <__sprint_r.part.0+0x50>
   13edc:	subs	r5, #4
   13ede:	movs	r4, #0
   13ee0:	b.n	13ee6 <__sprint_r.part.0+0x2e>
   13ee2:	cmp	r7, r4
   13ee4:	beq.n	13f04 <__sprint_r.part.0+0x4c>
   13ee6:	ldr.w	r1, [r5, #4]!
   13eea:	mov	r2, fp
   13eec:	mov	r0, r6
   13eee:	bl	153a8 <_fputwc_r>
   13ef2:	adds	r3, r0, #1
   13ef4:	add.w	r4, r4, #1
   13ef8:	bne.n	13ee2 <__sprint_r.part.0+0x2a>
   13efa:	movs	r3, #0
   13efc:	strd	r3, r3, [r8, #4]
   13f00:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13f04:	ldr.w	r3, [r8, #8]
   13f08:	bic.w	sl, sl, #3
   13f0c:	sub.w	r3, r3, sl
   13f10:	str.w	r3, [r8, #8]
   13f14:	add.w	r9, r9, #8
   13f18:	cmp	r3, #0
   13f1a:	bne.n	13ed2 <__sprint_r.part.0+0x1a>
   13f1c:	movs	r0, #0
   13f1e:	b.n	13efa <__sprint_r.part.0+0x42>
   13f20:	bl	14f3c <__sfvwrite_r>
   13f24:	movs	r3, #0
   13f26:	strd	r3, r3, [r8, #4]
   13f2a:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13f2e:	nop

00013f30 <_vfiprintf_r>:
   13f30:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13f34:	vpush	{d8}
   13f38:	sub	sp, #276	; 0x114
   13f3a:	add.w	sl, sp, #80	; 0x50
   13f3e:	mov	fp, r0
   13f40:	vmov	s16, r1
   13f44:	mov	r6, r2
   13f46:	movs	r1, #0
   13f48:	movs	r2, #8
   13f4a:	mov	r0, sl
   13f4c:	mov	r4, r3
   13f4e:	str	r3, [sp, #28]
   13f50:	bl	10104 <memset>
   13f54:	cmp.w	fp, #0
   13f58:	beq.n	13f64 <_vfiprintf_r+0x34>
   13f5a:	ldr.w	r3, [fp, #52]	; 0x34
   13f5e:	cmp	r3, #0
   13f60:	beq.w	14ca4 <_vfiprintf_r+0xd74>
   13f64:	vmov	r2, s16
   13f68:	ldr	r3, [r2, #100]	; 0x64
   13f6a:	lsls	r3, r3, #31
   13f6c:	bpl.w	14996 <_vfiprintf_r+0xa66>
   13f70:	ldrsh.w	r1, [r2, #12]
   13f74:	uxth	r2, r1
   13f76:	lsls	r5, r2, #18
   13f78:	bmi.n	13f92 <_vfiprintf_r+0x62>
   13f7a:	vmov	r3, s16
   13f7e:	orr.w	r1, r1, #8192	; 0x2000
   13f82:	strh	r1, [r3, #12]
   13f84:	ldr	r3, [r3, #100]	; 0x64
   13f86:	uxth	r2, r1
   13f88:	vmov	r1, s16
   13f8c:	bic.w	r3, r3, #8192	; 0x2000
   13f90:	str	r3, [r1, #100]	; 0x64
   13f92:	lsls	r0, r2, #28
   13f94:	bpl.w	141a2 <_vfiprintf_r+0x272>
   13f98:	vmov	r3, s16
   13f9c:	ldr	r3, [r3, #16]
   13f9e:	cmp	r3, #0
   13fa0:	beq.w	141a2 <_vfiprintf_r+0x272>
   13fa4:	and.w	r3, r2, #26
   13fa8:	cmp	r3, #10
   13faa:	beq.w	141c2 <_vfiprintf_r+0x292>
   13fae:	movs	r3, #0
   13fb0:	strd	r3, r3, [sp, #100]	; 0x64
   13fb4:	strd	r3, r3, [sp, #52]	; 0x34
   13fb8:	add	r2, sp, #108	; 0x6c
   13fba:	str	r3, [sp, #48]	; 0x30
   13fbc:	str	r2, [sp, #96]	; 0x60
   13fbe:	mov	r9, r2
   13fc0:	str	r3, [sp, #44]	; 0x2c
   13fc2:	str	r3, [sp, #20]
   13fc4:	mov	r8, r6
   13fc6:	mov	r4, r8
   13fc8:	ldr	r3, [pc, #672]	; (1426c <_vfiprintf_r+0x33c>)
   13fca:	ldr.w	r5, [r3, #228]	; 0xe4
   13fce:	bl	10298 <__locale_mb_cur_max>
   13fd2:	mov	r2, r4
   13fd4:	mov	r3, r0
   13fd6:	add	r1, sp, #72	; 0x48
   13fd8:	str.w	sl, [sp]
   13fdc:	mov	r0, fp
   13fde:	blx	r5
   13fe0:	cmp	r0, #0
   13fe2:	beq.w	14270 <_vfiprintf_r+0x340>
   13fe6:	blt.w	1425c <_vfiprintf_r+0x32c>
   13fea:	ldr	r2, [sp, #72]	; 0x48
   13fec:	cmp	r2, #37	; 0x25
   13fee:	mov	r3, r0
   13ff0:	beq.n	13ff6 <_vfiprintf_r+0xc6>
   13ff2:	add	r4, r3
   13ff4:	b.n	13fc8 <_vfiprintf_r+0x98>
   13ff6:	subs.w	r6, r4, r8
   13ffa:	mov	r5, r0
   13ffc:	bne.w	14278 <_vfiprintf_r+0x348>
   14000:	movs	r3, #0
   14002:	ldrb	r1, [r4, #1]
   14004:	strb.w	r3, [sp, #67]	; 0x43
   14008:	add.w	r8, r4, #1
   1400c:	str	r3, [sp, #24]
   1400e:	mov.w	r7, #4294967295
   14012:	mov	r6, r3
   14014:	movs	r4, #43	; 0x2b
   14016:	add.w	r8, r8, #1
   1401a:	sub.w	r3, r1, #32
   1401e:	cmp	r3, #90	; 0x5a
   14020:	bhi.w	14314 <_vfiprintf_r+0x3e4>
   14024:	tbh	[pc, r3, lsl #1]
   14028:	.word	0x017602b5
   1402c:	.word	0x02b00176
   14030:	.word	0x01760176
   14034:	.word	0x006a0176
   14038:	.word	0x01760176
   1403c:	.word	0x028d027d
   14040:	.word	0x02880176
   14044:	.word	0x01760297
   14048:	.word	0x005b0292
   1404c:	.word	0x005b005b
   14050:	.word	0x005b005b
   14054:	.word	0x005b005b
   14058:	.word	0x005b005b
   1405c:	.word	0x01760176
   14060:	.word	0x01760176
   14064:	.word	0x01760176
   14068:	.word	0x01760176
   1406c:	.word	0x025c0176
   14070:	.word	0x01760084
   14074:	.word	0x01760176
   14078:	.word	0x01760176
   1407c:	.word	0x01760176
   14080:	.word	0x01760176
   14084:	.word	0x00e80176
   14088:	.word	0x01760176
   1408c:	.word	0x02330176
   14090:	.word	0x02da0176
   14094:	.word	0x01760176
   14098:	.word	0x0176058b
   1409c:	.word	0x01760176
   140a0:	.word	0x01760176
   140a4:	.word	0x01760176
   140a8:	.word	0x01760176
   140ac:	.word	0x025c0176
   140b0:	.word	0x01760086
   140b4:	.word	0x01760176
   140b8:	.word	0x008602cd
   140bc:	.word	0x0176007f
   140c0:	.word	0x017602c0
   140c4:	.word	0x00ea02fd
   140c8:	.word	0x007f02ed
   140cc:	.word	0x02330176
   140d0:	.word	0x0569007c
   140d4:	.word	0x01760176
   140d8:	.word	0x0176056b
   140dc:	.short	0x007c
   140de:	sub.w	r3, r1, #48	; 0x30
   140e2:	movs	r2, #0
   140e4:	ldrb.w	r1, [r8], #1
   140e8:	add.w	r2, r2, r2, lsl #2
   140ec:	add.w	r2, r3, r2, lsl #1
   140f0:	sub.w	r3, r1, #48	; 0x30
   140f4:	cmp	r3, #9
   140f6:	bls.n	140e4 <_vfiprintf_r+0x1b4>
   140f8:	str	r2, [sp, #24]
   140fa:	b.n	1401a <_vfiprintf_r+0xea>
   140fc:	mov	r0, fp
   140fe:	bl	12de0 <_localeconv_r>
   14102:	ldr	r3, [r0, #4]
   14104:	str	r3, [sp, #52]	; 0x34
   14106:	mov	r0, r3
   14108:	bl	10480 <strlen>
   1410c:	str	r0, [sp, #56]	; 0x38
   1410e:	mov	r5, r0
   14110:	mov	r0, fp
   14112:	bl	12de0 <_localeconv_r>
   14116:	ldr	r3, [r0, #8]
   14118:	str	r3, [sp, #44]	; 0x2c
   1411a:	cmp	r5, #0
   1411c:	bne.w	14acc <_vfiprintf_r+0xb9c>
   14120:	ldrb.w	r1, [r8]
   14124:	b.n	14016 <_vfiprintf_r+0xe6>
   14126:	ldrb.w	r1, [r8]
   1412a:	orr.w	r6, r6, #32
   1412e:	b.n	14016 <_vfiprintf_r+0xe6>
   14130:	orr.w	r6, r6, #16
   14134:	lsls	r4, r6, #26
   14136:	bpl.w	14456 <_vfiprintf_r+0x526>
   1413a:	ldr	r3, [sp, #28]
   1413c:	adds	r3, #7
   1413e:	bic.w	r3, r3, #7
   14142:	mov	r2, r3
   14144:	ldr	r1, [r3, #4]
   14146:	ldr.w	r3, [r2], #8
   1414a:	str	r2, [sp, #28]
   1414c:	mov	r2, r1
   1414e:	cmp	r1, #0
   14150:	blt.w	14a34 <_vfiprintf_r+0xb04>
   14154:	adds	r1, r7, #1
   14156:	beq.w	14c9e <_vfiprintf_r+0xd6e>
   1415a:	bic.w	r1, r6, #128	; 0x80
   1415e:	str	r1, [sp, #12]
   14160:	orrs.w	r1, r3, r2
   14164:	beq.w	149e6 <_vfiprintf_r+0xab6>
   14168:	cmp	r3, #10
   1416a:	sbcs.w	r1, r2, #0
   1416e:	bcs.w	14bf4 <_vfiprintf_r+0xcc4>
   14172:	adds	r3, #48	; 0x30
   14174:	strb.w	r3, [sp, #271]	; 0x10f
   14178:	ldr	r6, [sp, #12]
   1417a:	movs	r3, #1
   1417c:	str	r3, [sp, #16]
   1417e:	addw	r4, sp, #271	; 0x10f
   14182:	ldr	r3, [sp, #16]
   14184:	cmp	r3, r7
   14186:	it	lt
   14188:	movlt	r3, r7
   1418a:	str	r3, [sp, #12]
   1418c:	movs	r3, #0
   1418e:	str	r3, [sp, #32]
   14190:	ldrb.w	r3, [sp, #67]	; 0x43
   14194:	cmp	r3, #0
   14196:	beq.w	14330 <_vfiprintf_r+0x400>
   1419a:	ldr	r3, [sp, #12]
   1419c:	adds	r3, #1
   1419e:	str	r3, [sp, #12]
   141a0:	b.n	14330 <_vfiprintf_r+0x400>
   141a2:	vmov	r1, s16
   141a6:	mov	r0, fp
   141a8:	vmov	r5, s16
   141ac:	bl	15230 <__swsetup_r>
   141b0:	cmp	r0, #0
   141b2:	bne.w	14e5a <_vfiprintf_r+0xf2a>
   141b6:	ldrh	r2, [r5, #12]
   141b8:	and.w	r3, r2, #26
   141bc:	cmp	r3, #10
   141be:	bne.w	13fae <_vfiprintf_r+0x7e>
   141c2:	vmov	r1, s16
   141c6:	ldrsh.w	r3, [r1, #14]
   141ca:	cmp	r3, #0
   141cc:	blt.w	13fae <_vfiprintf_r+0x7e>
   141d0:	ldr	r3, [r1, #100]	; 0x64
   141d2:	lsls	r3, r3, #31
   141d4:	bmi.n	141dc <_vfiprintf_r+0x2ac>
   141d6:	lsls	r7, r2, #22
   141d8:	bpl.w	14e00 <_vfiprintf_r+0xed0>
   141dc:	vmov	r1, s16
   141e0:	mov	r3, r4
   141e2:	mov	r2, r6
   141e4:	mov	r0, fp
   141e6:	bl	14ebc <__sbprintf>
   141ea:	str	r0, [sp, #20]
   141ec:	ldr	r0, [sp, #20]
   141ee:	add	sp, #276	; 0x114
   141f0:	vpop	{d8}
   141f4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   141f8:	orr.w	r6, r6, #16
   141fc:	ands.w	r2, r6, #32
   14200:	beq.w	14470 <_vfiprintf_r+0x540>
   14204:	ldr	r3, [sp, #28]
   14206:	adds	r3, #7
   14208:	bic.w	r3, r3, #7
   1420c:	mov	r1, r3
   1420e:	ldr	r2, [r3, #4]
   14210:	ldr.w	r3, [r1], #8
   14214:	str	r1, [sp, #28]
   14216:	bic.w	r1, r6, #1024	; 0x400
   1421a:	str	r1, [sp, #12]
   1421c:	movs	r1, #0
   1421e:	movs	r0, #0
   14220:	strb.w	r0, [sp, #67]	; 0x43
   14224:	adds	r0, r7, #1
   14226:	beq.w	1464a <_vfiprintf_r+0x71a>
   1422a:	ldr	r0, [sp, #12]
   1422c:	bic.w	r6, r0, #128	; 0x80
   14230:	orrs.w	r0, r3, r2
   14234:	bne.w	14648 <_vfiprintf_r+0x718>
   14238:	cmp	r7, #0
   1423a:	bne.w	14cae <_vfiprintf_r+0xd7e>
   1423e:	cmp	r1, #0
   14240:	bne.w	149ee <_vfiprintf_r+0xabe>
   14244:	ldr	r3, [sp, #12]
   14246:	ands.w	r3, r3, #1
   1424a:	str	r3, [sp, #16]
   1424c:	beq.w	14a72 <_vfiprintf_r+0xb42>
   14250:	movs	r3, #48	; 0x30
   14252:	strb.w	r3, [sp, #271]	; 0x10f
   14256:	addw	r4, sp, #271	; 0x10f
   1425a:	b.n	14182 <_vfiprintf_r+0x252>
   1425c:	movs	r2, #8
   1425e:	movs	r1, #0
   14260:	mov	r0, sl
   14262:	bl	10104 <memset>
   14266:	movs	r3, #1
   14268:	add	r4, r3
   1426a:	b.n	13fc8 <_vfiprintf_r+0x98>
   1426c:	.word	0x20001c48
   14270:	subs.w	r6, r4, r8
   14274:	mov	r5, r0
   14276:	beq.n	142b0 <_vfiprintf_r+0x380>
   14278:	ldr	r3, [sp, #100]	; 0x64
   1427a:	ldr	r2, [sp, #104]	; 0x68
   1427c:	adds	r3, #1
   1427e:	add	r2, r6
   14280:	cmp	r3, #7
   14282:	strd	r8, r6, [r9]
   14286:	str	r2, [sp, #104]	; 0x68
   14288:	str	r3, [sp, #100]	; 0x64
   1428a:	ble.n	142c6 <_vfiprintf_r+0x396>
   1428c:	cmp	r2, #0
   1428e:	beq.w	149de <_vfiprintf_r+0xaae>
   14292:	vmov	r1, s16
   14296:	add	r2, sp, #96	; 0x60
   14298:	mov	r0, fp
   1429a:	bl	13eb8 <__sprint_r.part.0>
   1429e:	cbnz	r0, 142ea <_vfiprintf_r+0x3ba>
   142a0:	add.w	r9, sp, #108	; 0x6c
   142a4:	ldr	r3, [sp, #20]
   142a6:	add	r3, r6
   142a8:	str	r3, [sp, #20]
   142aa:	cmp	r5, #0
   142ac:	bne.w	14000 <_vfiprintf_r+0xd0>
   142b0:	ldr	r3, [sp, #104]	; 0x68
   142b2:	cmp	r3, #0
   142b4:	bne.w	14e3a <_vfiprintf_r+0xf0a>
   142b8:	vmov	r3, s16
   142bc:	movs	r2, #0
   142be:	ldrsh.w	r3, [r3, #12]
   142c2:	str	r2, [sp, #100]	; 0x64
   142c4:	b.n	142f2 <_vfiprintf_r+0x3c2>
   142c6:	add.w	r9, r9, #8
   142ca:	b.n	142a4 <_vfiprintf_r+0x374>
   142cc:	vmov	r1, s16
   142d0:	add	r2, sp, #96	; 0x60
   142d2:	mov	r0, fp
   142d4:	bl	13eb8 <__sprint_r.part.0>
   142d8:	cmp	r0, #0
   142da:	beq.w	1442a <_vfiprintf_r+0x4fa>
   142de:	ldr	r3, [sp, #32]
   142e0:	cbz	r3, 142ea <_vfiprintf_r+0x3ba>
   142e2:	ldr	r1, [sp, #32]
   142e4:	mov	r0, fp
   142e6:	bl	10684 <_free_r>
   142ea:	vmov	r3, s16
   142ee:	ldrsh.w	r3, [r3, #12]
   142f2:	vmov	r2, s16
   142f6:	ldr	r2, [r2, #100]	; 0x64
   142f8:	tst.w	r2, #1
   142fc:	uxth	r2, r3
   142fe:	beq.w	14442 <_vfiprintf_r+0x512>
   14302:	lsls	r0, r2, #25
   14304:	bmi.w	14e6c <_vfiprintf_r+0xf3c>
   14308:	ldr	r0, [sp, #20]
   1430a:	add	sp, #276	; 0x114
   1430c:	vpop	{d8}
   14310:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14314:	cmp	r1, #0
   14316:	beq.n	142b0 <_vfiprintf_r+0x380>
   14318:	movs	r3, #0
   1431a:	strb.w	r3, [sp, #67]	; 0x43
   1431e:	movs	r3, #1
   14320:	strd	r3, r3, [sp, #12]
   14324:	strb.w	r1, [sp, #172]	; 0xac
   14328:	add	r4, sp, #172	; 0xac
   1432a:	movs	r3, #0
   1432c:	str	r3, [sp, #32]
   1432e:	mov	r7, r3
   14330:	ands.w	r3, r6, #2
   14334:	str	r3, [sp, #36]	; 0x24
   14336:	beq.n	1433e <_vfiprintf_r+0x40e>
   14338:	ldr	r3, [sp, #12]
   1433a:	adds	r3, #2
   1433c:	str	r3, [sp, #12]
   1433e:	ands.w	r3, r6, #132	; 0x84
   14342:	str	r3, [sp, #40]	; 0x28
   14344:	bne.n	14352 <_vfiprintf_r+0x422>
   14346:	ldr	r3, [sp, #24]
   14348:	ldr	r2, [sp, #12]
   1434a:	subs	r5, r3, r2
   1434c:	cmp	r5, #0
   1434e:	bgt.w	14848 <_vfiprintf_r+0x918>
   14352:	ldrd	r0, r3, [sp, #100]	; 0x64
   14356:	adds	r1, r0, #1
   14358:	ldrb.w	r2, [sp, #67]	; 0x43
   1435c:	cbz	r2, 14380 <_vfiprintf_r+0x450>
   1435e:	movs	r2, #1
   14360:	adds	r3, #1
   14362:	str.w	r2, [r9, #4]
   14366:	cmp	r1, #7
   14368:	add.w	r2, sp, #67	; 0x43
   1436c:	strd	r1, r3, [sp, #100]	; 0x64
   14370:	str.w	r2, [r9]
   14374:	bgt.w	1480c <_vfiprintf_r+0x8dc>
   14378:	mov	r0, r1
   1437a:	add.w	r9, r9, #8
   1437e:	adds	r1, #1
   14380:	ldr	r2, [sp, #36]	; 0x24
   14382:	cbz	r2, 143be <_vfiprintf_r+0x48e>
   14384:	add	r2, sp, #68	; 0x44
   14386:	adds	r3, #2
   14388:	str.w	r2, [r9]
   1438c:	cmp	r1, #7
   1438e:	mov.w	r2, #2
   14392:	strd	r1, r3, [sp, #100]	; 0x64
   14396:	str.w	r2, [r9, #4]
   1439a:	ble.w	1483e <_vfiprintf_r+0x90e>
   1439e:	cmp	r3, #0
   143a0:	beq.w	14a2a <_vfiprintf_r+0xafa>
   143a4:	vmov	r1, s16
   143a8:	add	r2, sp, #96	; 0x60
   143aa:	mov	r0, fp
   143ac:	bl	13eb8 <__sprint_r.part.0>
   143b0:	cmp	r0, #0
   143b2:	bne.n	142de <_vfiprintf_r+0x3ae>
   143b4:	ldrd	r0, r3, [sp, #100]	; 0x64
   143b8:	add.w	r9, sp, #108	; 0x6c
   143bc:	adds	r1, r0, #1
   143be:	ldr	r2, [sp, #40]	; 0x28
   143c0:	cmp	r2, #128	; 0x80
   143c2:	beq.w	146ce <_vfiprintf_r+0x79e>
   143c6:	ldr	r2, [sp, #16]
   143c8:	subs	r5, r7, r2
   143ca:	cmp	r5, #0
   143cc:	bgt.w	1477e <_vfiprintf_r+0x84e>
   143d0:	ldr	r2, [sp, #16]
   143d2:	str.w	r4, [r9]
   143d6:	add	r3, r2
   143d8:	cmp	r1, #7
   143da:	strd	r1, r3, [sp, #100]	; 0x64
   143de:	str.w	r2, [r9, #4]
   143e2:	ble.w	146c2 <_vfiprintf_r+0x792>
   143e6:	cmp	r3, #0
   143e8:	beq.w	148d6 <_vfiprintf_r+0x9a6>
   143ec:	vmov	r1, s16
   143f0:	add	r2, sp, #96	; 0x60
   143f2:	mov	r0, fp
   143f4:	bl	13eb8 <__sprint_r.part.0>
   143f8:	cmp	r0, #0
   143fa:	bne.w	142de <_vfiprintf_r+0x3ae>
   143fe:	ldr	r3, [sp, #104]	; 0x68
   14400:	add.w	r9, sp, #108	; 0x6c
   14404:	lsls	r5, r6, #29
   14406:	bpl.n	14414 <_vfiprintf_r+0x4e4>
   14408:	ldr	r2, [sp, #24]
   1440a:	ldr	r1, [sp, #12]
   1440c:	subs	r4, r2, r1
   1440e:	cmp	r4, #0
   14410:	bgt.w	148ea <_vfiprintf_r+0x9ba>
   14414:	ldrd	r2, r1, [sp, #20]
   14418:	ldr	r0, [sp, #12]
   1441a:	cmp	r1, r0
   1441c:	ite	ge
   1441e:	addge	r2, r2, r1
   14420:	addlt	r2, r2, r0
   14422:	str	r2, [sp, #20]
   14424:	cmp	r3, #0
   14426:	bne.w	142cc <_vfiprintf_r+0x39c>
   1442a:	ldr	r1, [sp, #32]
   1442c:	movs	r3, #0
   1442e:	str	r3, [sp, #100]	; 0x64
   14430:	cmp	r1, #0
   14432:	beq.w	146c8 <_vfiprintf_r+0x798>
   14436:	mov	r0, fp
   14438:	bl	10684 <_free_r>
   1443c:	add.w	r9, sp, #108	; 0x6c
   14440:	b.n	13fc6 <_vfiprintf_r+0x96>
   14442:	lsls	r4, r3, #22
   14444:	bmi.w	14302 <_vfiprintf_r+0x3d2>
   14448:	vmov	r4, s16
   1444c:	ldr	r0, [r4, #88]	; 0x58
   1444e:	bl	103d0 <__retarget_lock_release_recursive>
   14452:	ldrh	r2, [r4, #12]
   14454:	b.n	14302 <_vfiprintf_r+0x3d2>
   14456:	lsls	r0, r6, #27
   14458:	ldr	r2, [sp, #28]
   1445a:	bmi.w	14a9c <_vfiprintf_r+0xb6c>
   1445e:	lsls	r1, r6, #25
   14460:	bpl.w	14a96 <_vfiprintf_r+0xb66>
   14464:	ldrsh.w	r3, [r2], #4
   14468:	str	r2, [sp, #28]
   1446a:	asrs	r2, r3, #31
   1446c:	mov	r1, r2
   1446e:	b.n	1414e <_vfiprintf_r+0x21e>
   14470:	ands.w	r3, r6, #16
   14474:	ldr	r1, [sp, #28]
   14476:	bne.w	14a8c <_vfiprintf_r+0xb5c>
   1447a:	ands.w	r0, r6, #64	; 0x40
   1447e:	beq.w	14a84 <_vfiprintf_r+0xb54>
   14482:	mov	r2, r3
   14484:	ldr.w	r3, [r1], #4
   14488:	str	r1, [sp, #28]
   1448a:	uxth	r3, r3
   1448c:	b.n	14216 <_vfiprintf_r+0x2e6>
   1448e:	ldr	r3, [sp, #28]
   14490:	mov	r2, r3
   14492:	movs	r3, #0
   14494:	strb.w	r3, [sp, #67]	; 0x43
   14498:	mov	r3, r2
   1449a:	ldr.w	r4, [r3], #4
   1449e:	str	r3, [sp, #12]
   144a0:	cmp	r4, #0
   144a2:	beq.w	14cca <_vfiprintf_r+0xd9a>
   144a6:	cmp	r1, #83	; 0x53
   144a8:	beq.w	14b76 <_vfiprintf_r+0xc46>
   144ac:	ands.w	r5, r6, #16
   144b0:	bne.w	14b76 <_vfiprintf_r+0xc46>
   144b4:	adds	r3, r7, #1
   144b6:	beq.w	14e20 <_vfiprintf_r+0xef0>
   144ba:	mov	r2, r7
   144bc:	mov	r1, r5
   144be:	mov	r0, r4
   144c0:	bl	103e0 <memchr>
   144c4:	str	r0, [sp, #32]
   144c6:	cmp	r0, #0
   144c8:	beq.w	14e0a <_vfiprintf_r+0xeda>
   144cc:	subs	r3, r0, r4
   144ce:	ldr	r2, [sp, #12]
   144d0:	str	r3, [sp, #16]
   144d2:	bic.w	r3, r3, r3, asr #31
   144d6:	mov	r7, r5
   144d8:	str	r2, [sp, #28]
   144da:	str	r3, [sp, #12]
   144dc:	str	r5, [sp, #32]
   144de:	b.n	14190 <_vfiprintf_r+0x260>
   144e0:	cmp	r1, #67	; 0x43
   144e2:	beq.n	144ea <_vfiprintf_r+0x5ba>
   144e4:	lsls	r5, r6, #27
   144e6:	bpl.w	14b44 <_vfiprintf_r+0xc14>
   144ea:	ldr	r5, [sp, #28]
   144ec:	movs	r2, #8
   144ee:	movs	r1, #0
   144f0:	add	r0, sp, #88	; 0x58
   144f2:	add	r4, sp, #172	; 0xac
   144f4:	bl	10104 <memset>
   144f8:	add	r3, sp, #88	; 0x58
   144fa:	ldr.w	r2, [r5], #4
   144fe:	mov	r1, r4
   14500:	mov	r0, fp
   14502:	bl	13d2c <_wcrtomb_r>
   14506:	mov	r3, r0
   14508:	adds	r3, #1
   1450a:	str	r0, [sp, #16]
   1450c:	beq.w	14e76 <_vfiprintf_r+0xf46>
   14510:	ldr	r3, [sp, #16]
   14512:	str	r5, [sp, #28]
   14514:	bic.w	r3, r3, r3, asr #31
   14518:	str	r3, [sp, #12]
   1451a:	movs	r3, #0
   1451c:	strb.w	r3, [sp, #67]	; 0x43
   14520:	b.n	1432a <_vfiprintf_r+0x3fa>
   14522:	ldr	r3, [sp, #28]
   14524:	ldr.w	r2, [r3], #4
   14528:	str	r2, [sp, #24]
   1452a:	cmp	r2, #0
   1452c:	bge.w	14a68 <_vfiprintf_r+0xb38>
   14530:	ldr	r2, [sp, #24]
   14532:	negs	r2, r2
   14534:	strd	r2, r3, [sp, #24]
   14538:	ldrb.w	r1, [r8]
   1453c:	orr.w	r6, r6, #4
   14540:	b.n	14016 <_vfiprintf_r+0xe6>
   14542:	ldrb.w	r1, [r8]
   14546:	strb.w	r4, [sp, #67]	; 0x43
   1454a:	b.n	14016 <_vfiprintf_r+0xe6>
   1454c:	ldrb.w	r1, [r8]
   14550:	orr.w	r6, r6, #128	; 0x80
   14554:	b.n	14016 <_vfiprintf_r+0xe6>
   14556:	mov	r2, r8
   14558:	ldrb.w	r1, [r2], #1
   1455c:	cmp	r1, #42	; 0x2a
   1455e:	beq.w	14e8e <_vfiprintf_r+0xf5e>
   14562:	sub.w	r3, r1, #48	; 0x30
   14566:	cmp	r3, #9
   14568:	mov	r8, r2
   1456a:	mov.w	r7, #0
   1456e:	bhi.w	1401a <_vfiprintf_r+0xea>
   14572:	ldrb.w	r1, [r8], #1
   14576:	add.w	r7, r7, r7, lsl #2
   1457a:	add.w	r7, r3, r7, lsl #1
   1457e:	sub.w	r3, r1, #48	; 0x30
   14582:	cmp	r3, #9
   14584:	bls.n	14572 <_vfiprintf_r+0x642>
   14586:	b.n	1401a <_vfiprintf_r+0xea>
   14588:	ldrb.w	r1, [r8]
   1458c:	orr.w	r6, r6, #1
   14590:	b.n	14016 <_vfiprintf_r+0xe6>
   14592:	ldrb.w	r3, [sp, #67]	; 0x43
   14596:	cmp	r3, #0
   14598:	bne.w	14120 <_vfiprintf_r+0x1f0>
   1459c:	movs	r3, #32
   1459e:	ldrb.w	r1, [r8]
   145a2:	strb.w	r3, [sp, #67]	; 0x43
   145a6:	b.n	14016 <_vfiprintf_r+0xe6>
   145a8:	ldrb.w	r1, [r8]
   145ac:	cmp	r1, #108	; 0x6c
   145ae:	ittte	eq
   145b0:	ldrbeq.w	r1, [r8, #1]
   145b4:	orreq.w	r6, r6, #32
   145b8:	addeq.w	r8, r8, #1
   145bc:	orrne.w	r6, r6, #16
   145c0:	b.n	14016 <_vfiprintf_r+0xe6>
   145c2:	ldrb.w	r1, [r8]
   145c6:	cmp	r1, #104	; 0x68
   145c8:	ittte	eq
   145ca:	ldrbeq.w	r1, [r8, #1]
   145ce:	orreq.w	r6, r6, #512	; 0x200
   145d2:	addeq.w	r8, r8, #1
   145d6:	orrne.w	r6, r6, #64	; 0x40
   145da:	b.n	14016 <_vfiprintf_r+0xe6>
   145dc:	orr.w	r3, r6, #16
   145e0:	str	r3, [sp, #12]
   145e2:	ldr	r3, [sp, #12]
   145e4:	ands.w	r2, r3, #32
   145e8:	beq.w	149f8 <_vfiprintf_r+0xac8>
   145ec:	ldr	r3, [sp, #28]
   145ee:	adds	r3, #7
   145f0:	bic.w	r3, r3, #7
   145f4:	mov	r1, r3
   145f6:	ldr	r2, [r3, #4]
   145f8:	ldr.w	r3, [r1], #8
   145fc:	str	r1, [sp, #28]
   145fe:	movs	r1, #1
   14600:	b.n	1421e <_vfiprintf_r+0x2ee>
   14602:	ldr	r2, [sp, #28]
   14604:	orr.w	r3, r6, #2
   14608:	str	r3, [sp, #12]
   1460a:	ldr.w	r3, [r2], #4
   1460e:	str	r2, [sp, #28]
   14610:	movw	r2, #30768	; 0x7830
   14614:	strh.w	r2, [sp, #68]	; 0x44
   14618:	ldr	r2, [pc, #736]	; (148fc <_vfiprintf_r+0x9cc>)
   1461a:	str	r2, [sp, #48]	; 0x30
   1461c:	movs	r1, #2
   1461e:	movs	r2, #0
   14620:	b.n	1421e <_vfiprintf_r+0x2ee>
   14622:	lsls	r7, r6, #26
   14624:	bmi.w	14ab8 <_vfiprintf_r+0xb88>
   14628:	lsls	r5, r6, #27
   1462a:	bmi.w	14cba <_vfiprintf_r+0xd8a>
   1462e:	lsls	r4, r6, #25
   14630:	bmi.w	14dde <_vfiprintf_r+0xeae>
   14634:	lsls	r0, r6, #22
   14636:	bpl.w	14cba <_vfiprintf_r+0xd8a>
   1463a:	ldr	r3, [sp, #28]
   1463c:	ldr	r1, [sp, #20]
   1463e:	ldr.w	r2, [r3], #4
   14642:	str	r3, [sp, #28]
   14644:	strb	r1, [r2, #0]
   14646:	b.n	13fc6 <_vfiprintf_r+0x96>
   14648:	str	r6, [sp, #12]
   1464a:	cmp	r1, #1
   1464c:	beq.w	14168 <_vfiprintf_r+0x238>
   14650:	cmp	r1, #2
   14652:	add	r4, sp, #272	; 0x110
   14654:	bne.n	1467a <_vfiprintf_r+0x74a>
   14656:	ldr	r0, [sp, #48]	; 0x30
   14658:	and.w	r1, r3, #15
   1465c:	lsrs	r3, r3, #4
   1465e:	ldrb	r1, [r0, r1]
   14660:	strb.w	r1, [r4, #-1]!
   14664:	orr.w	r3, r3, r2, lsl #28
   14668:	lsrs	r2, r2, #4
   1466a:	orrs.w	r1, r3, r2
   1466e:	bne.n	14658 <_vfiprintf_r+0x728>
   14670:	ldr	r6, [sp, #12]
   14672:	add	r3, sp, #272	; 0x110
   14674:	subs	r3, r3, r4
   14676:	str	r3, [sp, #16]
   14678:	b.n	14182 <_vfiprintf_r+0x252>
   1467a:	and.w	r1, r3, #7
   1467e:	lsrs	r3, r3, #3
   14680:	orr.w	r3, r3, r2, lsl #29
   14684:	lsrs	r2, r2, #3
   14686:	adds	r1, #48	; 0x30
   14688:	orrs.w	r5, r3, r2
   1468c:	mov	r0, r4
   1468e:	strb.w	r1, [r4, #-1]!
   14692:	bne.n	1467a <_vfiprintf_r+0x74a>
   14694:	ldr	r6, [sp, #12]
   14696:	lsls	r3, r6, #31
   14698:	bpl.n	14672 <_vfiprintf_r+0x742>
   1469a:	cmp	r1, #48	; 0x30
   1469c:	beq.n	14670 <_vfiprintf_r+0x740>
   1469e:	movs	r3, #48	; 0x30
   146a0:	subs	r0, #2
   146a2:	strb.w	r3, [r4, #-1]
   146a6:	add	r3, sp, #272	; 0x110
   146a8:	subs	r3, r3, r0
   146aa:	ldr	r6, [sp, #12]
   146ac:	str	r3, [sp, #16]
   146ae:	mov	r4, r0
   146b0:	b.n	14182 <_vfiprintf_r+0x252>
   146b2:	ldr	r3, [sp, #16]
   146b4:	str	r4, [sp, #108]	; 0x6c
   146b6:	movs	r2, #1
   146b8:	str	r3, [sp, #112]	; 0x70
   146ba:	str	r3, [sp, #104]	; 0x68
   146bc:	str	r2, [sp, #100]	; 0x64
   146be:	add.w	r9, sp, #108	; 0x6c
   146c2:	add.w	r9, r9, #8
   146c6:	b.n	14404 <_vfiprintf_r+0x4d4>
   146c8:	add.w	r9, sp, #108	; 0x6c
   146cc:	b.n	13fc6 <_vfiprintf_r+0x96>
   146ce:	ldr	r2, [sp, #24]
   146d0:	ldr	r5, [sp, #12]
   146d2:	subs	r5, r2, r5
   146d4:	cmp	r5, #0
   146d6:	ble.w	143c6 <_vfiprintf_r+0x496>
   146da:	cmp	r5, #16
   146dc:	ble.w	14e56 <_vfiprintf_r+0xf26>
   146e0:	str	r4, [sp, #36]	; 0x24
   146e2:	vmov	r4, s16
   146e6:	b.n	146f8 <_vfiprintf_r+0x7c8>
   146e8:	add.w	ip, r0, #2
   146ec:	add.w	r9, r9, #8
   146f0:	mov	r0, r2
   146f2:	subs	r5, #16
   146f4:	cmp	r5, #16
   146f6:	ble.n	14736 <_vfiprintf_r+0x806>
   146f8:	ldr	r1, [pc, #516]	; (14900 <_vfiprintf_r+0x9d0>)
   146fa:	str.w	r1, [r9]
   146fe:	adds	r2, r0, #1
   14700:	adds	r3, #16
   14702:	movs	r1, #16
   14704:	cmp	r2, #7
   14706:	strd	r2, r3, [sp, #100]	; 0x64
   1470a:	str.w	r1, [r9, #4]
   1470e:	ble.n	146e8 <_vfiprintf_r+0x7b8>
   14710:	add	r2, sp, #96	; 0x60
   14712:	cmp	r3, #0
   14714:	beq.n	14800 <_vfiprintf_r+0x8d0>
   14716:	mov	r1, r4
   14718:	mov	r0, fp
   1471a:	add.w	r9, sp, #108	; 0x6c
   1471e:	bl	13eb8 <__sprint_r.part.0>
   14722:	cmp	r0, #0
   14724:	bne.w	142de <_vfiprintf_r+0x3ae>
   14728:	ldrd	r0, r3, [sp, #100]	; 0x64
   1472c:	subs	r5, #16
   1472e:	cmp	r5, #16
   14730:	add.w	ip, r0, #1
   14734:	bgt.n	146f8 <_vfiprintf_r+0x7c8>
   14736:	ldr	r4, [sp, #36]	; 0x24
   14738:	ldr	r2, [pc, #452]	; (14900 <_vfiprintf_r+0x9d0>)
   1473a:	str.w	r5, [r9, #4]
   1473e:	add	r3, r5
   14740:	cmp.w	ip, #7
   14744:	strd	ip, r3, [sp, #100]	; 0x64
   14748:	str.w	r2, [r9]
   1474c:	ble.w	14a78 <_vfiprintf_r+0xb48>
   14750:	cmp	r3, #0
   14752:	beq.w	14d94 <_vfiprintf_r+0xe64>
   14756:	vmov	r1, s16
   1475a:	add	r2, sp, #96	; 0x60
   1475c:	mov	r0, fp
   1475e:	bl	13eb8 <__sprint_r.part.0>
   14762:	cmp	r0, #0
   14764:	bne.w	142de <_vfiprintf_r+0x3ae>
   14768:	ldr	r2, [sp, #16]
   1476a:	ldrd	r0, r3, [sp, #100]	; 0x64
   1476e:	subs	r5, r7, r2
   14770:	cmp	r5, #0
   14772:	add.w	r1, r0, #1
   14776:	add.w	r9, sp, #108	; 0x6c
   1477a:	ble.w	143d0 <_vfiprintf_r+0x4a0>
   1477e:	cmp	r5, #16
   14780:	ble.n	147d6 <_vfiprintf_r+0x8a6>
   14782:	str	r4, [sp, #36]	; 0x24
   14784:	movs	r7, #16
   14786:	vmov	r4, s16
   1478a:	b.n	1479c <_vfiprintf_r+0x86c>
   1478c:	add.w	ip, r0, #2
   14790:	add.w	r9, r9, #8
   14794:	mov	r0, r2
   14796:	subs	r5, #16
   14798:	cmp	r5, #16
   1479a:	ble.n	147d2 <_vfiprintf_r+0x8a2>
   1479c:	adds	r2, r0, #1
   1479e:	ldr	r1, [pc, #352]	; (14900 <_vfiprintf_r+0x9d0>)
   147a0:	adds	r3, #16
   147a2:	cmp	r2, #7
   147a4:	strd	r1, r7, [r9]
   147a8:	strd	r2, r3, [sp, #100]	; 0x64
   147ac:	ble.n	1478c <_vfiprintf_r+0x85c>
   147ae:	add	r2, sp, #96	; 0x60
   147b0:	cbz	r3, 147f4 <_vfiprintf_r+0x8c4>
   147b2:	mov	r1, r4
   147b4:	mov	r0, fp
   147b6:	add.w	r9, sp, #108	; 0x6c
   147ba:	bl	13eb8 <__sprint_r.part.0>
   147be:	cmp	r0, #0
   147c0:	bne.w	142de <_vfiprintf_r+0x3ae>
   147c4:	ldrd	r0, r3, [sp, #100]	; 0x64
   147c8:	subs	r5, #16
   147ca:	cmp	r5, #16
   147cc:	add.w	ip, r0, #1
   147d0:	bgt.n	1479c <_vfiprintf_r+0x86c>
   147d2:	ldr	r4, [sp, #36]	; 0x24
   147d4:	mov	r1, ip
   147d6:	ldr	r2, [pc, #296]	; (14900 <_vfiprintf_r+0x9d0>)
   147d8:	str.w	r5, [r9, #4]
   147dc:	add	r3, r5
   147de:	cmp	r1, #7
   147e0:	strd	r1, r3, [sp, #100]	; 0x64
   147e4:	str.w	r2, [r9]
   147e8:	bgt.w	149ba <_vfiprintf_r+0xa8a>
   147ec:	add.w	r9, r9, #8
   147f0:	adds	r1, #1
   147f2:	b.n	143d0 <_vfiprintf_r+0x4a0>
   147f4:	mov.w	ip, #1
   147f8:	mov	r0, r3
   147fa:	add.w	r9, sp, #108	; 0x6c
   147fe:	b.n	14796 <_vfiprintf_r+0x866>
   14800:	mov.w	ip, #1
   14804:	mov	r0, r3
   14806:	add.w	r9, sp, #108	; 0x6c
   1480a:	b.n	146f2 <_vfiprintf_r+0x7c2>
   1480c:	cmp	r3, #0
   1480e:	beq.w	14a1a <_vfiprintf_r+0xaea>
   14812:	vmov	r1, s16
   14816:	add	r2, sp, #96	; 0x60
   14818:	mov	r0, fp
   1481a:	bl	13eb8 <__sprint_r.part.0>
   1481e:	cmp	r0, #0
   14820:	bne.w	142de <_vfiprintf_r+0x3ae>
   14824:	ldrd	r0, r3, [sp, #100]	; 0x64
   14828:	add.w	r9, sp, #108	; 0x6c
   1482c:	adds	r1, r0, #1
   1482e:	b.n	14380 <_vfiprintf_r+0x450>
   14830:	movs	r3, #2
   14832:	add	r2, sp, #68	; 0x44
   14834:	str	r3, [sp, #112]	; 0x70
   14836:	str	r2, [sp, #108]	; 0x6c
   14838:	movs	r1, #1
   1483a:	add.w	r9, sp, #108	; 0x6c
   1483e:	mov	r0, r1
   14840:	add.w	r9, r9, #8
   14844:	adds	r1, r0, #1
   14846:	b.n	143be <_vfiprintf_r+0x48e>
   14848:	cmp	r5, #16
   1484a:	ble.w	14e18 <_vfiprintf_r+0xee8>
   1484e:	ldrd	r1, r3, [sp, #100]	; 0x64
   14852:	str	r4, [sp, #60]	; 0x3c
   14854:	mov	r0, r1
   14856:	vmov	r4, s16
   1485a:	b.n	1486c <_vfiprintf_r+0x93c>
   1485c:	add.w	ip, r0, #2
   14860:	add.w	r9, r9, #8
   14864:	mov	r0, r2
   14866:	subs	r5, #16
   14868:	cmp	r5, #16
   1486a:	ble.n	148a8 <_vfiprintf_r+0x978>
   1486c:	ldr	r1, [pc, #148]	; (14904 <_vfiprintf_r+0x9d4>)
   1486e:	str.w	r1, [r9]
   14872:	adds	r2, r0, #1
   14874:	adds	r3, #16
   14876:	movs	r1, #16
   14878:	cmp	r2, #7
   1487a:	strd	r2, r3, [sp, #100]	; 0x64
   1487e:	str.w	r1, [r9, #4]
   14882:	ble.n	1485c <_vfiprintf_r+0x92c>
   14884:	add	r2, sp, #96	; 0x60
   14886:	cbz	r3, 148ca <_vfiprintf_r+0x99a>
   14888:	mov	r1, r4
   1488a:	mov	r0, fp
   1488c:	add.w	r9, sp, #108	; 0x6c
   14890:	bl	13eb8 <__sprint_r.part.0>
   14894:	cmp	r0, #0
   14896:	bne.w	142de <_vfiprintf_r+0x3ae>
   1489a:	ldrd	r0, r3, [sp, #100]	; 0x64
   1489e:	subs	r5, #16
   148a0:	cmp	r5, #16
   148a2:	add.w	ip, r0, #1
   148a6:	bgt.n	1486c <_vfiprintf_r+0x93c>
   148a8:	ldr	r4, [sp, #60]	; 0x3c
   148aa:	mov	r0, ip
   148ac:	ldr	r2, [pc, #84]	; (14904 <_vfiprintf_r+0x9d4>)
   148ae:	str.w	r5, [r9, #4]
   148b2:	add	r3, r5
   148b4:	cmp	r0, #7
   148b6:	strd	r0, r3, [sp, #100]	; 0x64
   148ba:	str.w	r2, [r9]
   148be:	bgt.w	14a44 <_vfiprintf_r+0xb14>
   148c2:	add.w	r9, r9, #8
   148c6:	adds	r1, r0, #1
   148c8:	b.n	14358 <_vfiprintf_r+0x428>
   148ca:	mov	r0, r3
   148cc:	mov.w	ip, #1
   148d0:	add.w	r9, sp, #108	; 0x6c
   148d4:	b.n	14866 <_vfiprintf_r+0x936>
   148d6:	lsls	r6, r6, #29
   148d8:	str	r3, [sp, #100]	; 0x64
   148da:	bpl.n	14984 <_vfiprintf_r+0xa54>
   148dc:	ldr	r2, [sp, #24]
   148de:	ldr	r1, [sp, #12]
   148e0:	subs	r4, r2, r1
   148e2:	cmp	r4, #0
   148e4:	ble.n	14984 <_vfiprintf_r+0xa54>
   148e6:	add.w	r9, sp, #108	; 0x6c
   148ea:	cmp	r4, #16
   148ec:	ble.w	14e50 <_vfiprintf_r+0xf20>
   148f0:	ldr	r1, [sp, #100]	; 0x64
   148f2:	vmov	r6, s16
   148f6:	movs	r5, #16
   148f8:	b.n	14916 <_vfiprintf_r+0x9e6>
   148fa:	nop
   148fc:	.word	0x20000d50
   14900:	.word	0x20001ad4
   14904:	.word	0x20000d94
   14908:	adds	r0, r1, #2
   1490a:	add.w	r9, r9, #8
   1490e:	mov	r1, r2
   14910:	subs	r4, #16
   14912:	cmp	r4, #16
   14914:	ble.n	1494c <_vfiprintf_r+0xa1c>
   14916:	adds	r2, r1, #1
   14918:	ldr	r0, [pc, #716]	; (14be8 <_vfiprintf_r+0xcb8>)
   1491a:	adds	r3, #16
   1491c:	cmp	r2, #7
   1491e:	strd	r0, r5, [r9]
   14922:	strd	r2, r3, [sp, #100]	; 0x64
   14926:	ble.n	14908 <_vfiprintf_r+0x9d8>
   14928:	add	r2, sp, #96	; 0x60
   1492a:	cbz	r3, 1497a <_vfiprintf_r+0xa4a>
   1492c:	mov	r1, r6
   1492e:	mov	r0, fp
   14930:	bl	13eb8 <__sprint_r.part.0>
   14934:	cmp	r0, #0
   14936:	bne.w	142de <_vfiprintf_r+0x3ae>
   1493a:	ldrd	r1, r3, [sp, #100]	; 0x64
   1493e:	subs	r4, #16
   14940:	cmp	r4, #16
   14942:	add.w	r0, r1, #1
   14946:	add.w	r9, sp, #108	; 0x6c
   1494a:	bgt.n	14916 <_vfiprintf_r+0x9e6>
   1494c:	ldr	r2, [pc, #664]	; (14be8 <_vfiprintf_r+0xcb8>)
   1494e:	str.w	r4, [r9, #4]
   14952:	add	r3, r4
   14954:	cmp	r0, #7
   14956:	strd	r0, r3, [sp, #100]	; 0x64
   1495a:	str.w	r2, [r9]
   1495e:	ble.w	14414 <_vfiprintf_r+0x4e4>
   14962:	cbz	r3, 14984 <_vfiprintf_r+0xa54>
   14964:	vmov	r1, s16
   14968:	add	r2, sp, #96	; 0x60
   1496a:	mov	r0, fp
   1496c:	bl	13eb8 <__sprint_r.part.0>
   14970:	cmp	r0, #0
   14972:	bne.w	142de <_vfiprintf_r+0x3ae>
   14976:	ldr	r3, [sp, #104]	; 0x68
   14978:	b.n	14414 <_vfiprintf_r+0x4e4>
   1497a:	movs	r0, #1
   1497c:	mov	r1, r3
   1497e:	add.w	r9, sp, #108	; 0x6c
   14982:	b.n	14910 <_vfiprintf_r+0x9e0>
   14984:	ldrd	r3, r2, [sp, #20]
   14988:	ldr	r1, [sp, #12]
   1498a:	cmp	r2, r1
   1498c:	ite	ge
   1498e:	addge	r3, r3, r2
   14990:	addlt	r3, r3, r1
   14992:	str	r3, [sp, #20]
   14994:	b.n	1442a <_vfiprintf_r+0x4fa>
   14996:	ldrsh.w	r1, [r2, #12]
   1499a:	lsls	r7, r1, #22
   1499c:	vmov	r3, s16
   149a0:	uxth	r2, r1
   149a2:	bmi.w	13f76 <_vfiprintf_r+0x46>
   149a6:	vmov	r5, s16
   149aa:	ldr	r0, [r3, #88]	; 0x58
   149ac:	bl	103cc <__retarget_lock_acquire_recursive>
   149b0:	ldrsh.w	r1, [r5, #12]
   149b4:	uxth	r2, r1
   149b6:	b.w	13f76 <_vfiprintf_r+0x46>
   149ba:	cmp	r3, #0
   149bc:	beq.w	146b2 <_vfiprintf_r+0x782>
   149c0:	vmov	r1, s16
   149c4:	add	r2, sp, #96	; 0x60
   149c6:	mov	r0, fp
   149c8:	bl	13eb8 <__sprint_r.part.0>
   149cc:	cmp	r0, #0
   149ce:	bne.w	142de <_vfiprintf_r+0x3ae>
   149d2:	ldr	r1, [sp, #100]	; 0x64
   149d4:	ldr	r3, [sp, #104]	; 0x68
   149d6:	adds	r1, #1
   149d8:	add.w	r9, sp, #108	; 0x6c
   149dc:	b.n	143d0 <_vfiprintf_r+0x4a0>
   149de:	str	r2, [sp, #100]	; 0x64
   149e0:	add.w	r9, sp, #108	; 0x6c
   149e4:	b.n	142a4 <_vfiprintf_r+0x374>
   149e6:	cmp	r7, #0
   149e8:	bne.w	14172 <_vfiprintf_r+0x242>
   149ec:	ldr	r6, [sp, #12]
   149ee:	movs	r7, #0
   149f0:	str	r7, [sp, #16]
   149f2:	add	r4, sp, #272	; 0x110
   149f4:	b.w	14182 <_vfiprintf_r+0x252>
   149f8:	ldr	r3, [sp, #12]
   149fa:	ands.w	r3, r3, #16
   149fe:	bne.n	14aaa <_vfiprintf_r+0xb7a>
   14a00:	ldr	r2, [sp, #12]
   14a02:	ands.w	r0, r2, #64	; 0x40
   14a06:	beq.w	14ce0 <_vfiprintf_r+0xdb0>
   14a0a:	ldr	r1, [sp, #28]
   14a0c:	mov	r2, r3
   14a0e:	ldr.w	r3, [r1], #4
   14a12:	str	r1, [sp, #28]
   14a14:	uxth	r3, r3
   14a16:	movs	r1, #1
   14a18:	b.n	1421e <_vfiprintf_r+0x2ee>
   14a1a:	ldr	r2, [sp, #36]	; 0x24
   14a1c:	cmp	r2, #0
   14a1e:	bne.n	14aea <_vfiprintf_r+0xbba>
   14a20:	mov	r0, r3
   14a22:	movs	r1, #1
   14a24:	add.w	r9, sp, #108	; 0x6c
   14a28:	b.n	143be <_vfiprintf_r+0x48e>
   14a2a:	movs	r1, #1
   14a2c:	mov	r0, r3
   14a2e:	add.w	r9, sp, #108	; 0x6c
   14a32:	b.n	143be <_vfiprintf_r+0x48e>
   14a34:	negs	r3, r3
   14a36:	sbc.w	r2, r2, r2, lsl #1
   14a3a:	str	r6, [sp, #12]
   14a3c:	movs	r0, #45	; 0x2d
   14a3e:	movs	r1, #1
   14a40:	b.w	14220 <_vfiprintf_r+0x2f0>
   14a44:	cmp	r3, #0
   14a46:	beq.w	14b5a <_vfiprintf_r+0xc2a>
   14a4a:	vmov	r1, s16
   14a4e:	add	r2, sp, #96	; 0x60
   14a50:	mov	r0, fp
   14a52:	bl	13eb8 <__sprint_r.part.0>
   14a56:	cmp	r0, #0
   14a58:	bne.w	142de <_vfiprintf_r+0x3ae>
   14a5c:	ldrd	r0, r3, [sp, #100]	; 0x64
   14a60:	add.w	r9, sp, #108	; 0x6c
   14a64:	adds	r1, r0, #1
   14a66:	b.n	14358 <_vfiprintf_r+0x428>
   14a68:	ldrb.w	r1, [r8]
   14a6c:	str	r3, [sp, #28]
   14a6e:	b.w	14016 <_vfiprintf_r+0xe6>
   14a72:	add	r4, sp, #272	; 0x110
   14a74:	b.w	14182 <_vfiprintf_r+0x252>
   14a78:	add.w	r9, r9, #8
   14a7c:	add.w	r1, ip, #1
   14a80:	mov	r0, ip
   14a82:	b.n	143c6 <_vfiprintf_r+0x496>
   14a84:	ands.w	r2, r6, #512	; 0x200
   14a88:	bne.w	14dba <_vfiprintf_r+0xe8a>
   14a8c:	ldr.w	r3, [r1], #4
   14a90:	str	r1, [sp, #28]
   14a92:	b.w	14216 <_vfiprintf_r+0x2e6>
   14a96:	lsls	r3, r6, #22
   14a98:	bmi.w	14dac <_vfiprintf_r+0xe7c>
   14a9c:	ldr.w	r3, [r2], #4
   14aa0:	str	r2, [sp, #28]
   14aa2:	asrs	r2, r3, #31
   14aa4:	mov	r1, r2
   14aa6:	b.w	1414e <_vfiprintf_r+0x21e>
   14aaa:	ldr	r1, [sp, #28]
   14aac:	ldr.w	r3, [r1], #4
   14ab0:	str	r1, [sp, #28]
   14ab2:	movs	r1, #1
   14ab4:	b.w	1421e <_vfiprintf_r+0x2ee>
   14ab8:	ldr	r3, [sp, #28]
   14aba:	ldr	r0, [sp, #20]
   14abc:	ldr.w	r1, [r3], #4
   14ac0:	str	r3, [sp, #28]
   14ac2:	asrs	r2, r0, #31
   14ac4:	strd	r0, r2, [r1]
   14ac8:	b.w	13fc6 <_vfiprintf_r+0x96>
   14acc:	ldr	r3, [sp, #44]	; 0x2c
   14ace:	cmp	r3, #0
   14ad0:	beq.w	14120 <_vfiprintf_r+0x1f0>
   14ad4:	ldr	r3, [sp, #44]	; 0x2c
   14ad6:	ldrb	r3, [r3, #0]
   14ad8:	cmp	r3, #0
   14ada:	beq.w	14120 <_vfiprintf_r+0x1f0>
   14ade:	ldrb.w	r1, [r8]
   14ae2:	orr.w	r6, r6, #1024	; 0x400
   14ae6:	b.w	14016 <_vfiprintf_r+0xe6>
   14aea:	movs	r3, #2
   14aec:	add	r2, sp, #68	; 0x44
   14aee:	str	r3, [sp, #112]	; 0x70
   14af0:	str	r2, [sp, #108]	; 0x6c
   14af2:	movs	r0, #1
   14af4:	add.w	r9, sp, #108	; 0x6c
   14af8:	b.n	14840 <_vfiprintf_r+0x910>
   14afa:	str	r6, [sp, #12]
   14afc:	b.n	145e2 <_vfiprintf_r+0x6b2>
   14afe:	ldr	r3, [pc, #236]	; (14bec <_vfiprintf_r+0xcbc>)
   14b00:	str	r3, [sp, #48]	; 0x30
   14b02:	ands.w	r2, r6, #32
   14b06:	beq.n	14bbc <_vfiprintf_r+0xc8c>
   14b08:	ldr	r3, [sp, #28]
   14b0a:	adds	r3, #7
   14b0c:	bic.w	r3, r3, #7
   14b10:	mov	r0, r3
   14b12:	ldr	r2, [r3, #4]
   14b14:	ldr.w	r3, [r0], #8
   14b18:	str	r0, [sp, #28]
   14b1a:	lsls	r4, r6, #31
   14b1c:	bpl.n	14b32 <_vfiprintf_r+0xc02>
   14b1e:	orrs.w	r0, r3, r2
   14b22:	beq.n	14b32 <_vfiprintf_r+0xc02>
   14b24:	strb.w	r1, [sp, #69]	; 0x45
   14b28:	movs	r1, #48	; 0x30
   14b2a:	orr.w	r6, r6, #2
   14b2e:	strb.w	r1, [sp, #68]	; 0x44
   14b32:	bic.w	r1, r6, #1024	; 0x400
   14b36:	str	r1, [sp, #12]
   14b38:	movs	r1, #2
   14b3a:	b.w	1421e <_vfiprintf_r+0x2ee>
   14b3e:	ldr	r3, [pc, #176]	; (14bf0 <_vfiprintf_r+0xcc0>)
   14b40:	str	r3, [sp, #48]	; 0x30
   14b42:	b.n	14b02 <_vfiprintf_r+0xbd2>
   14b44:	ldr	r3, [sp, #28]
   14b46:	movs	r1, #1
   14b48:	ldr.w	r2, [r3], #4
   14b4c:	str	r1, [sp, #12]
   14b4e:	strb.w	r2, [sp, #172]	; 0xac
   14b52:	str	r3, [sp, #28]
   14b54:	str	r1, [sp, #16]
   14b56:	add	r4, sp, #172	; 0xac
   14b58:	b.n	1451a <_vfiprintf_r+0x5ea>
   14b5a:	ldrb.w	r2, [sp, #67]	; 0x43
   14b5e:	cmp	r2, #0
   14b60:	bne.w	14dc8 <_vfiprintf_r+0xe98>
   14b64:	ldr	r2, [sp, #36]	; 0x24
   14b66:	cmp	r2, #0
   14b68:	bne.w	14830 <_vfiprintf_r+0x900>
   14b6c:	mov	r0, r3
   14b6e:	movs	r1, #1
   14b70:	add.w	r9, sp, #108	; 0x6c
   14b74:	b.n	143c6 <_vfiprintf_r+0x496>
   14b76:	movs	r1, #0
   14b78:	movs	r2, #8
   14b7a:	add	r0, sp, #88	; 0x58
   14b7c:	str	r4, [sp, #76]	; 0x4c
   14b7e:	bl	10104 <memset>
   14b82:	adds	r1, r7, #1
   14b84:	beq.w	14d00 <_vfiprintf_r+0xdd0>
   14b88:	movs	r5, #0
   14b8a:	str	r4, [sp, #28]
   14b8c:	mov	r4, r5
   14b8e:	b.n	14baa <_vfiprintf_r+0xc7a>
   14b90:	add	r1, sp, #172	; 0xac
   14b92:	mov	r0, fp
   14b94:	bl	13d2c <_wcrtomb_r>
   14b98:	adds	r2, r0, #1
   14b9a:	add	r0, r4
   14b9c:	beq.w	14e76 <_vfiprintf_r+0xf46>
   14ba0:	cmp	r0, r7
   14ba2:	bgt.n	14bb6 <_vfiprintf_r+0xc86>
   14ba4:	beq.w	14e88 <_vfiprintf_r+0xf58>
   14ba8:	mov	r4, r0
   14baa:	ldr	r2, [sp, #76]	; 0x4c
   14bac:	ldr	r2, [r2, r5]
   14bae:	add	r3, sp, #88	; 0x58
   14bb0:	adds	r5, #4
   14bb2:	cmp	r2, #0
   14bb4:	bne.n	14b90 <_vfiprintf_r+0xc60>
   14bb6:	str	r4, [sp, #16]
   14bb8:	ldr	r4, [sp, #28]
   14bba:	b.n	14d1c <_vfiprintf_r+0xdec>
   14bbc:	ands.w	r3, r6, #16
   14bc0:	ldr	r0, [sp, #28]
   14bc2:	bne.n	14bde <_vfiprintf_r+0xcae>
   14bc4:	ands.w	r4, r6, #64	; 0x40
   14bc8:	beq.n	14bd6 <_vfiprintf_r+0xca6>
   14bca:	mov	r2, r3
   14bcc:	ldr.w	r3, [r0], #4
   14bd0:	str	r0, [sp, #28]
   14bd2:	uxth	r3, r3
   14bd4:	b.n	14b1a <_vfiprintf_r+0xbea>
   14bd6:	ands.w	r2, r6, #512	; 0x200
   14bda:	bne.w	14da0 <_vfiprintf_r+0xe70>
   14bde:	ldr.w	r3, [r0], #4
   14be2:	str	r0, [sp, #28]
   14be4:	b.n	14b1a <_vfiprintf_r+0xbea>
   14be6:	nop
   14be8:	.word	0x20000d94
   14bec:	.word	0x20000d50
   14bf0:	.word	0x20000d64
   14bf4:	ldr	r1, [sp, #12]
   14bf6:	str	r7, [sp, #16]
   14bf8:	add	r4, sp, #272	; 0x110
   14bfa:	mov	lr, r3
   14bfc:	vmov	s17, fp
   14c00:	and.w	r6, r1, #1024	; 0x400
   14c04:	mov.w	ip, #0
   14c08:	mov	r3, r4
   14c0a:	b.n	14c1a <_vfiprintf_r+0xcea>
   14c0c:	cmp.w	lr, #10
   14c10:	sbcs.w	r2, r2, #0
   14c14:	bcc.n	14c8a <_vfiprintf_r+0xd5a>
   14c16:	mov	lr, r4
   14c18:	mov	r2, r5
   14c1a:	ldr	r1, [pc, #664]	; (14eb4 <_vfiprintf_r+0xf84>)
   14c1c:	adds.w	r0, lr, r2
   14c20:	adc.w	r0, r0, #0
   14c24:	mov	r7, r1
   14c26:	umull	r1, r4, r1, r0
   14c2a:	bic.w	r1, r4, #3
   14c2e:	add.w	r1, r1, r4, lsr #2
   14c32:	subs	r0, r0, r1
   14c34:	subs.w	r1, lr, r0
   14c38:	mov.w	r5, #3435973836	; 0xcccccccc
   14c3c:	sbc.w	r4, r2, #0
   14c40:	mul.w	r5, r5, r1
   14c44:	mla	r5, r7, r4, r5
   14c48:	umull	r4, r1, r1, r7
   14c4c:	add	r5, r1
   14c4e:	movs	r7, #5
   14c50:	and.w	r1, r4, #1
   14c54:	umull	r1, fp, r1, r7
   14c58:	adds	r1, r1, r0
   14c5a:	lsrs	r4, r4, #1
   14c5c:	adds	r1, #48	; 0x30
   14c5e:	strb.w	r1, [r3, #-1]
   14c62:	orr.w	r4, r4, r5, lsl #31
   14c66:	add.w	ip, ip, #1
   14c6a:	subs	r3, #1
   14c6c:	lsrs	r5, r5, #1
   14c6e:	cmp	r6, #0
   14c70:	beq.n	14c0c <_vfiprintf_r+0xcdc>
   14c72:	ldr	r1, [sp, #44]	; 0x2c
   14c74:	ldrb	r1, [r1, #0]
   14c76:	cmp	r1, ip
   14c78:	bne.n	14c0c <_vfiprintf_r+0xcdc>
   14c7a:	cmp.w	ip, #255	; 0xff
   14c7e:	beq.n	14c0c <_vfiprintf_r+0xcdc>
   14c80:	cmp.w	lr, #10
   14c84:	sbcs.w	r2, r2, #0
   14c88:	bcs.n	14d64 <_vfiprintf_r+0xe34>
   14c8a:	mov	r4, r3
   14c8c:	add	r3, sp, #272	; 0x110
   14c8e:	subs	r3, r3, r4
   14c90:	ldr	r7, [sp, #16]
   14c92:	ldr	r6, [sp, #12]
   14c94:	str	r3, [sp, #16]
   14c96:	vmov	fp, s17
   14c9a:	b.w	14182 <_vfiprintf_r+0x252>
   14c9e:	str	r6, [sp, #12]
   14ca0:	b.w	14168 <_vfiprintf_r+0x238>
   14ca4:	mov	r0, fp
   14ca6:	bl	fdb8 <__sinit>
   14caa:	b.w	13f64 <_vfiprintf_r+0x34>
   14cae:	cmp	r1, #1
   14cb0:	str	r6, [sp, #12]
   14cb2:	bne.w	14650 <_vfiprintf_r+0x720>
   14cb6:	b.w	14172 <_vfiprintf_r+0x242>
   14cba:	ldr	r3, [sp, #28]
   14cbc:	ldr	r1, [sp, #20]
   14cbe:	ldr.w	r2, [r3], #4
   14cc2:	str	r1, [r2, #0]
   14cc4:	str	r3, [sp, #28]
   14cc6:	b.w	13fc6 <_vfiprintf_r+0x96>
   14cca:	cmp	r7, #6
   14ccc:	mov	r3, r7
   14cce:	ldr	r2, [sp, #12]
   14cd0:	ldr	r4, [pc, #484]	; (14eb8 <_vfiprintf_r+0xf88>)
   14cd2:	str	r2, [sp, #28]
   14cd4:	it	cs
   14cd6:	movcs	r3, #6
   14cd8:	str	r3, [sp, #16]
   14cda:	str	r3, [sp, #12]
   14cdc:	b.w	1432a <_vfiprintf_r+0x3fa>
   14ce0:	ldr	r3, [sp, #12]
   14ce2:	ldr	r1, [sp, #28]
   14ce4:	ands.w	r2, r3, #512	; 0x200
   14ce8:	ite	ne
   14cea:	ldrne.w	r3, [r1], #4
   14cee:	ldreq.w	r3, [r1], #4
   14cf2:	str	r1, [sp, #28]
   14cf4:	itt	ne
   14cf6:	movne	r2, r0
   14cf8:	uxtbne	r3, r3
   14cfa:	movs	r1, #1
   14cfc:	b.w	1421e <_vfiprintf_r+0x2ee>
   14d00:	add	r3, sp, #88	; 0x58
   14d02:	str	r3, [sp, #0]
   14d04:	movs	r3, #0
   14d06:	mov	r1, r3
   14d08:	add	r2, sp, #76	; 0x4c
   14d0a:	mov	r0, fp
   14d0c:	bl	13d78 <_wcsrtombs_r>
   14d10:	mov	r3, r0
   14d12:	adds	r3, #1
   14d14:	str	r0, [sp, #16]
   14d16:	beq.w	14e76 <_vfiprintf_r+0xf46>
   14d1a:	str	r4, [sp, #76]	; 0x4c
   14d1c:	ldr	r3, [sp, #16]
   14d1e:	cmp	r3, #0
   14d20:	beq.n	14d84 <_vfiprintf_r+0xe54>
   14d22:	cmp	r3, #99	; 0x63
   14d24:	bgt.n	14dee <_vfiprintf_r+0xebe>
   14d26:	movs	r3, #0
   14d28:	str	r3, [sp, #32]
   14d2a:	add	r4, sp, #172	; 0xac
   14d2c:	movs	r2, #8
   14d2e:	movs	r1, #0
   14d30:	add	r0, sp, #88	; 0x58
   14d32:	bl	10104 <memset>
   14d36:	ldr	r5, [sp, #16]
   14d38:	add	r3, sp, #88	; 0x58
   14d3a:	str	r3, [sp, #0]
   14d3c:	add	r2, sp, #76	; 0x4c
   14d3e:	mov	r3, r5
   14d40:	mov	r1, r4
   14d42:	mov	r0, fp
   14d44:	bl	13d78 <_wcsrtombs_r>
   14d48:	cmp	r5, r0
   14d4a:	bne.w	14ea4 <_vfiprintf_r+0xf74>
   14d4e:	ldr	r3, [sp, #12]
   14d50:	ldr	r2, [sp, #16]
   14d52:	str	r3, [sp, #28]
   14d54:	movs	r3, #0
   14d56:	strb	r3, [r4, r2]
   14d58:	mov	r7, r3
   14d5a:	bic.w	r3, r2, r2, asr #31
   14d5e:	str	r3, [sp, #12]
   14d60:	b.w	14190 <_vfiprintf_r+0x260>
   14d64:	ldr	r2, [sp, #56]	; 0x38
   14d66:	ldr	r1, [sp, #52]	; 0x34
   14d68:	subs	r3, r3, r2
   14d6a:	mov	r0, r3
   14d6c:	str	r3, [sp, #32]
   14d6e:	bl	10234 <strncpy>
   14d72:	ldr	r1, [sp, #44]	; 0x2c
   14d74:	ldr	r3, [sp, #32]
   14d76:	ldrb	r2, [r1, #1]
   14d78:	cbz	r2, 14d7e <_vfiprintf_r+0xe4e>
   14d7a:	adds	r1, #1
   14d7c:	str	r1, [sp, #44]	; 0x2c
   14d7e:	mov.w	ip, #0
   14d82:	b.n	14c16 <_vfiprintf_r+0xce6>
   14d84:	ldr	r3, [sp, #12]
   14d86:	str	r3, [sp, #28]
   14d88:	ldr	r3, [sp, #16]
   14d8a:	str	r3, [sp, #12]
   14d8c:	mov	r7, r3
   14d8e:	str	r3, [sp, #32]
   14d90:	b.w	14190 <_vfiprintf_r+0x260>
   14d94:	movs	r1, #1
   14d96:	mov	r0, r3
   14d98:	add.w	r9, sp, #108	; 0x6c
   14d9c:	b.w	143c6 <_vfiprintf_r+0x496>
   14da0:	ldr.w	r3, [r0], #4
   14da4:	str	r0, [sp, #28]
   14da6:	mov	r2, r4
   14da8:	uxtb	r3, r3
   14daa:	b.n	14b1a <_vfiprintf_r+0xbea>
   14dac:	ldrsb.w	r3, [r2], #4
   14db0:	str	r2, [sp, #28]
   14db2:	asrs	r2, r3, #31
   14db4:	mov	r1, r2
   14db6:	b.w	1414e <_vfiprintf_r+0x21e>
   14dba:	ldr.w	r3, [r1], #4
   14dbe:	str	r1, [sp, #28]
   14dc0:	mov	r2, r0
   14dc2:	uxtb	r3, r3
   14dc4:	b.w	14216 <_vfiprintf_r+0x2e6>
   14dc8:	movs	r3, #1
   14dca:	str	r3, [sp, #112]	; 0x70
   14dcc:	movs	r1, #1
   14dce:	add.w	r3, sp, #67	; 0x43
   14dd2:	str	r3, [sp, #108]	; 0x6c
   14dd4:	add.w	r9, sp, #108	; 0x6c
   14dd8:	mov	r3, r1
   14dda:	b.w	14378 <_vfiprintf_r+0x448>
   14dde:	ldr	r3, [sp, #28]
   14de0:	ldr	r1, [sp, #20]
   14de2:	ldr.w	r2, [r3], #4
   14de6:	str	r3, [sp, #28]
   14de8:	strh	r1, [r2, #0]
   14dea:	b.w	13fc6 <_vfiprintf_r+0x96>
   14dee:	adds	r1, r3, #1
   14df0:	mov	r0, fp
   14df2:	bl	f330 <_malloc_r>
   14df6:	mov	r4, r0
   14df8:	cmp	r0, #0
   14dfa:	beq.n	14e76 <_vfiprintf_r+0xf46>
   14dfc:	str	r0, [sp, #32]
   14dfe:	b.n	14d2c <_vfiprintf_r+0xdfc>
   14e00:	ldr	r0, [r1, #88]	; 0x58
   14e02:	bl	103d0 <__retarget_lock_release_recursive>
   14e06:	b.w	141dc <_vfiprintf_r+0x2ac>
   14e0a:	ldr	r3, [sp, #12]
   14e0c:	str	r3, [sp, #28]
   14e0e:	strd	r7, r7, [sp, #12]
   14e12:	ldr	r7, [sp, #32]
   14e14:	b.w	14190 <_vfiprintf_r+0x260>
   14e18:	ldr	r0, [sp, #100]	; 0x64
   14e1a:	ldr	r3, [sp, #104]	; 0x68
   14e1c:	adds	r0, #1
   14e1e:	b.n	148ac <_vfiprintf_r+0x97c>
   14e20:	ldr	r3, [sp, #12]
   14e22:	str	r3, [sp, #28]
   14e24:	mov	r0, r4
   14e26:	bl	10480 <strlen>
   14e2a:	bic.w	r3, r0, r0, asr #31
   14e2e:	mov	r7, r5
   14e30:	str	r0, [sp, #16]
   14e32:	str	r3, [sp, #12]
   14e34:	str	r5, [sp, #32]
   14e36:	b.w	14190 <_vfiprintf_r+0x260>
   14e3a:	vmov	r1, s16
   14e3e:	add	r2, sp, #96	; 0x60
   14e40:	mov	r0, fp
   14e42:	bl	13eb8 <__sprint_r.part.0>
   14e46:	cmp	r0, #0
   14e48:	beq.w	142b8 <_vfiprintf_r+0x388>
   14e4c:	b.w	142ea <_vfiprintf_r+0x3ba>
   14e50:	ldr	r0, [sp, #100]	; 0x64
   14e52:	adds	r0, #1
   14e54:	b.n	1494c <_vfiprintf_r+0xa1c>
   14e56:	mov	ip, r1
   14e58:	b.n	14738 <_vfiprintf_r+0x808>
   14e5a:	ldr	r3, [r5, #100]	; 0x64
   14e5c:	lsls	r1, r3, #31
   14e5e:	bmi.n	14e6c <_vfiprintf_r+0xf3c>
   14e60:	ldrh	r3, [r5, #12]
   14e62:	lsls	r2, r3, #22
   14e64:	bmi.n	14e6c <_vfiprintf_r+0xf3c>
   14e66:	ldr	r0, [r5, #88]	; 0x58
   14e68:	bl	103d0 <__retarget_lock_release_recursive>
   14e6c:	mov.w	r3, #4294967295
   14e70:	str	r3, [sp, #20]
   14e72:	b.w	14308 <_vfiprintf_r+0x3d8>
   14e76:	vmov	r2, s16
   14e7a:	ldrsh.w	r3, [r2, #12]
   14e7e:	orr.w	r3, r3, #64	; 0x40
   14e82:	strh	r3, [r2, #12]
   14e84:	b.w	142f2 <_vfiprintf_r+0x3c2>
   14e88:	ldr	r4, [sp, #28]
   14e8a:	str	r7, [sp, #16]
   14e8c:	b.n	14d1c <_vfiprintf_r+0xdec>
   14e8e:	ldr	r3, [sp, #28]
   14e90:	ldrb.w	r1, [r8, #1]
   14e94:	ldr.w	r7, [r3], #4
   14e98:	str	r3, [sp, #28]
   14e9a:	mov	r8, r2
   14e9c:	orr.w	r7, r7, r7, asr #31
   14ea0:	b.w	14016 <_vfiprintf_r+0xe6>
   14ea4:	vmov	r2, s16
   14ea8:	ldrh	r3, [r2, #12]
   14eaa:	orr.w	r3, r3, #64	; 0x40
   14eae:	strh	r3, [r2, #12]
   14eb0:	b.w	142de <_vfiprintf_r+0x3ae>
   14eb4:	.word	0xcccccccd
   14eb8:	.word	0x20000d78

00014ebc <__sbprintf>:
   14ebc:	push	{r4, r5, r6, lr}
   14ebe:	mov	r4, r1
   14ec0:	ldrh	r1, [r1, #12]
   14ec2:	sub.w	sp, sp, #1136	; 0x470
   14ec6:	bic.w	r1, r1, #2
   14eca:	strh.w	r1, [sp, #20]
   14ece:	ldr	r1, [r4, #100]	; 0x64
   14ed0:	str	r1, [sp, #108]	; 0x6c
   14ed2:	ldrh	r1, [r4, #14]
   14ed4:	strh.w	r1, [sp, #22]
   14ed8:	ldr	r1, [r4, #28]
   14eda:	str	r1, [sp, #36]	; 0x24
   14edc:	ldr	r1, [r4, #36]	; 0x24
   14ede:	str	r1, [sp, #44]	; 0x2c
   14ee0:	add	r1, sp, #112	; 0x70
   14ee2:	str	r1, [sp, #8]
   14ee4:	str	r1, [sp, #24]
   14ee6:	mov.w	r1, #1024	; 0x400
   14eea:	mov	r6, r0
   14eec:	str	r1, [sp, #16]
   14eee:	str	r1, [sp, #28]
   14ef0:	add	r0, sp, #96	; 0x60
   14ef2:	movs	r1, #0
   14ef4:	strd	r3, r2, [sp]
   14ef8:	str	r1, [sp, #32]
   14efa:	bl	103c4 <__retarget_lock_init_recursive>
   14efe:	ldrd	r3, r2, [sp]
   14f02:	add	r1, sp, #8
   14f04:	mov	r0, r6
   14f06:	bl	13f30 <_vfiprintf_r>
   14f0a:	subs	r5, r0, #0
   14f0c:	blt.n	14f1e <__sbprintf+0x62>
   14f0e:	add	r1, sp, #8
   14f10:	mov	r0, r6
   14f12:	bl	12d8c <_fflush_r>
   14f16:	cmp	r0, #0
   14f18:	it	ne
   14f1a:	movne.w	r5, #4294967295
   14f1e:	ldrh.w	r3, [sp, #20]
   14f22:	lsls	r3, r3, #25
   14f24:	bpl.n	14f2e <__sbprintf+0x72>
   14f26:	ldrh	r3, [r4, #12]
   14f28:	orr.w	r3, r3, #64	; 0x40
   14f2c:	strh	r3, [r4, #12]
   14f2e:	ldr	r0, [sp, #96]	; 0x60
   14f30:	bl	103c8 <__retarget_lock_close_recursive>
   14f34:	mov	r0, r5
   14f36:	add.w	sp, sp, #1136	; 0x470
   14f3a:	pop	{r4, r5, r6, pc}

00014f3c <__sfvwrite_r>:
   14f3c:	ldr	r3, [r2, #8]
   14f3e:	cmp	r3, #0
   14f40:	beq.w	1504e <__sfvwrite_r+0x112>
   14f44:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14f48:	ldrsh.w	r3, [r1, #12]
   14f4c:	mov	r4, r1
   14f4e:	lsls	r1, r3, #28
   14f50:	mov	r8, r0
   14f52:	sub	sp, #12
   14f54:	mov	r7, r2
   14f56:	uxth	r0, r3
   14f58:	bpl.n	14fa6 <__sfvwrite_r+0x6a>
   14f5a:	ldr	r3, [r4, #16]
   14f5c:	cbz	r3, 14fa6 <__sfvwrite_r+0x6a>
   14f5e:	ands.w	r3, r0, #2
   14f62:	ldr	r5, [r7, #0]
   14f64:	beq.n	14fc2 <__sfvwrite_r+0x86>
   14f66:	mov.w	sl, #0
   14f6a:	ldr.w	fp, [pc, #704]	; 1522c <__sfvwrite_r+0x2f0>
   14f6e:	mov	r6, sl
   14f70:	mov	r9, r7
   14f72:	cmp	r6, fp
   14f74:	mov	r3, r6
   14f76:	mov	r2, sl
   14f78:	it	cs
   14f7a:	movcs	r3, fp
   14f7c:	mov	r0, r8
   14f7e:	cmp	r6, #0
   14f80:	beq.n	15028 <__sfvwrite_r+0xec>
   14f82:	ldr	r1, [r4, #28]
   14f84:	ldr	r7, [r4, #36]	; 0x24
   14f86:	blx	r7
   14f88:	cmp	r0, #0
   14f8a:	ble.n	1503a <__sfvwrite_r+0xfe>
   14f8c:	ldr.w	r3, [r9, #8]
   14f90:	subs	r3, r3, r0
   14f92:	add	sl, r0
   14f94:	subs	r6, r6, r0
   14f96:	str.w	r3, [r9, #8]
   14f9a:	cmp	r3, #0
   14f9c:	bne.n	14f72 <__sfvwrite_r+0x36>
   14f9e:	movs	r0, #0
   14fa0:	add	sp, #12
   14fa2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14fa6:	mov	r1, r4
   14fa8:	mov	r0, r8
   14faa:	bl	15230 <__swsetup_r>
   14fae:	cmp	r0, #0
   14fb0:	bne.w	15224 <__sfvwrite_r+0x2e8>
   14fb4:	ldrsh.w	r3, [r4, #12]
   14fb8:	ldr	r5, [r7, #0]
   14fba:	uxth	r0, r3
   14fbc:	ands.w	r3, r0, #2
   14fc0:	bne.n	14f66 <__sfvwrite_r+0x2a>
   14fc2:	ands.w	r9, r0, #1
   14fc6:	bne.n	15052 <__sfvwrite_r+0x116>
   14fc8:	mov	r6, r9
   14fca:	str	r7, [sp, #0]
   14fcc:	cbz	r6, 15020 <__sfvwrite_r+0xe4>
   14fce:	lsls	r2, r0, #22
   14fd0:	ldr.w	fp, [r4, #8]
   14fd4:	bpl.w	150e2 <__sfvwrite_r+0x1a6>
   14fd8:	cmp	fp, r6
   14fda:	mov	r2, fp
   14fdc:	bhi.w	15148 <__sfvwrite_r+0x20c>
   14fe0:	tst.w	r0, #1152	; 0x480
   14fe4:	bne.w	1516a <__sfvwrite_r+0x22e>
   14fe8:	ldr	r0, [r4, #0]
   14fea:	str	r2, [sp, #4]
   14fec:	mov	r1, r9
   14fee:	bl	1000c <memmove>
   14ff2:	ldr	r3, [r4, #8]
   14ff4:	ldr	r2, [sp, #4]
   14ff6:	sub.w	r1, r3, fp
   14ffa:	ldr	r3, [r4, #0]
   14ffc:	str	r1, [r4, #8]
   14ffe:	add	r3, r2
   15000:	mov	sl, r6
   15002:	str	r3, [r4, #0]
   15004:	movs	r6, #0
   15006:	ldr	r2, [sp, #0]
   15008:	ldr	r3, [r2, #8]
   1500a:	sub.w	r3, r3, sl
   1500e:	add	r9, sl
   15010:	str	r3, [r2, #8]
   15012:	cmp	r3, #0
   15014:	beq.n	14f9e <__sfvwrite_r+0x62>
   15016:	ldrsh.w	r0, [r4, #12]
   1501a:	uxth	r0, r0
   1501c:	cmp	r6, #0
   1501e:	bne.n	14fce <__sfvwrite_r+0x92>
   15020:	ldrd	r9, r6, [r5]
   15024:	adds	r5, #8
   15026:	b.n	14fcc <__sfvwrite_r+0x90>
   15028:	ldrd	sl, r6, [r5]
   1502c:	adds	r5, #8
   1502e:	b.n	14f72 <__sfvwrite_r+0x36>
   15030:	mov	r1, r4
   15032:	mov	r0, r8
   15034:	bl	12d8c <_fflush_r>
   15038:	cbz	r0, 1509e <__sfvwrite_r+0x162>
   1503a:	ldrsh.w	r3, [r4, #12]
   1503e:	orr.w	r3, r3, #64	; 0x40
   15042:	mov.w	r0, #4294967295
   15046:	strh	r3, [r4, #12]
   15048:	add	sp, #12
   1504a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1504e:	movs	r0, #0
   15050:	bx	lr
   15052:	mov	r6, r3
   15054:	mov	sl, r7
   15056:	mov	r9, r3
   15058:	mov	r0, r3
   1505a:	str	r5, [sp, #0]
   1505c:	mov	r7, r3
   1505e:	cbz	r6, 150ba <__sfvwrite_r+0x17e>
   15060:	cmp	r0, #0
   15062:	beq.n	150ca <__sfvwrite_r+0x18e>
   15064:	mov	r2, r9
   15066:	ldrd	r1, r3, [r4, #16]
   1506a:	ldr	r0, [r4, #0]
   1506c:	ldr	r5, [r4, #8]
   1506e:	cmp	r2, r6
   15070:	it	cs
   15072:	movcs	r2, r6
   15074:	cmp	r0, r1
   15076:	bls.n	15082 <__sfvwrite_r+0x146>
   15078:	add.w	fp, r5, r3
   1507c:	cmp	r2, fp
   1507e:	bgt.w	151d0 <__sfvwrite_r+0x294>
   15082:	cmp	r3, r2
   15084:	bgt.n	15150 <__sfvwrite_r+0x214>
   15086:	ldr	r1, [r4, #28]
   15088:	ldr	r5, [r4, #36]	; 0x24
   1508a:	mov	r2, r7
   1508c:	mov	r0, r8
   1508e:	blx	r5
   15090:	subs.w	fp, r0, #0
   15094:	ble.n	1503a <__sfvwrite_r+0xfe>
   15096:	subs.w	r9, r9, fp
   1509a:	beq.n	15030 <__sfvwrite_r+0xf4>
   1509c:	movs	r0, #1
   1509e:	ldr.w	r3, [sl, #8]
   150a2:	sub.w	r3, r3, fp
   150a6:	add	r7, fp
   150a8:	sub.w	r6, r6, fp
   150ac:	str.w	r3, [sl, #8]
   150b0:	cmp	r3, #0
   150b2:	beq.w	14f9e <__sfvwrite_r+0x62>
   150b6:	cmp	r6, #0
   150b8:	bne.n	15060 <__sfvwrite_r+0x124>
   150ba:	ldr	r2, [sp, #0]
   150bc:	ldr	r6, [r2, #4]
   150be:	mov	r3, r2
   150c0:	adds	r2, #8
   150c2:	str	r2, [sp, #0]
   150c4:	cmp	r6, #0
   150c6:	beq.n	150ba <__sfvwrite_r+0x17e>
   150c8:	ldr	r7, [r3, #0]
   150ca:	mov	r2, r6
   150cc:	movs	r1, #10
   150ce:	mov	r0, r7
   150d0:	bl	103e0 <memchr>
   150d4:	cmp	r0, #0
   150d6:	beq.w	15212 <__sfvwrite_r+0x2d6>
   150da:	adds	r0, #1
   150dc:	sub.w	r9, r0, r7
   150e0:	b.n	15064 <__sfvwrite_r+0x128>
   150e2:	ldr	r0, [r4, #0]
   150e4:	ldr	r3, [r4, #16]
   150e6:	cmp	r0, r3
   150e8:	bhi.n	15118 <__sfvwrite_r+0x1dc>
   150ea:	ldr	r2, [r4, #20]
   150ec:	cmp	r2, r6
   150ee:	bhi.n	15118 <__sfvwrite_r+0x1dc>
   150f0:	mvn.w	r3, #2147483648	; 0x80000000
   150f4:	cmp	r3, r6
   150f6:	it	cs
   150f8:	movcs	r3, r6
   150fa:	ldr	r1, [r4, #28]
   150fc:	sdiv	r3, r3, r2
   15100:	ldr	r7, [r4, #36]	; 0x24
   15102:	mul.w	r3, r2, r3
   15106:	mov	r0, r8
   15108:	mov	r2, r9
   1510a:	blx	r7
   1510c:	subs.w	sl, r0, #0
   15110:	ble.n	1503a <__sfvwrite_r+0xfe>
   15112:	sub.w	r6, r6, sl
   15116:	b.n	15006 <__sfvwrite_r+0xca>
   15118:	cmp	fp, r6
   1511a:	mov	sl, fp
   1511c:	it	cs
   1511e:	movcs	sl, r6
   15120:	mov	r2, sl
   15122:	mov	r1, r9
   15124:	bl	1000c <memmove>
   15128:	ldr	r3, [r4, #8]
   1512a:	ldr	r2, [r4, #0]
   1512c:	sub.w	r3, r3, sl
   15130:	add	r2, sl
   15132:	str	r3, [r4, #8]
   15134:	str	r2, [r4, #0]
   15136:	cmp	r3, #0
   15138:	bne.n	15112 <__sfvwrite_r+0x1d6>
   1513a:	mov	r1, r4
   1513c:	mov	r0, r8
   1513e:	bl	12d8c <_fflush_r>
   15142:	cmp	r0, #0
   15144:	beq.n	15112 <__sfvwrite_r+0x1d6>
   15146:	b.n	1503a <__sfvwrite_r+0xfe>
   15148:	ldr	r0, [r4, #0]
   1514a:	mov	fp, r6
   1514c:	mov	r2, r6
   1514e:	b.n	14fea <__sfvwrite_r+0xae>
   15150:	mov	r1, r7
   15152:	str	r2, [sp, #4]
   15154:	bl	1000c <memmove>
   15158:	ldr	r2, [sp, #4]
   1515a:	ldr	r3, [r4, #8]
   1515c:	subs	r3, r3, r2
   1515e:	str	r3, [r4, #8]
   15160:	ldr	r3, [r4, #0]
   15162:	add	r3, r2
   15164:	str	r3, [r4, #0]
   15166:	mov	fp, r2
   15168:	b.n	15096 <__sfvwrite_r+0x15a>
   1516a:	ldr	r3, [r4, #0]
   1516c:	ldr	r1, [r4, #16]
   1516e:	sub.w	fp, r3, r1
   15172:	ldr	r3, [r4, #20]
   15174:	add.w	sl, r3, r3, lsl #1
   15178:	add.w	sl, sl, sl, lsr #31
   1517c:	add.w	r3, fp, #1
   15180:	mov.w	sl, sl, asr #1
   15184:	add	r3, r6
   15186:	cmp	r3, sl
   15188:	mov	r2, sl
   1518a:	itt	hi
   1518c:	movhi	sl, r3
   1518e:	movhi	r2, sl
   15190:	lsls	r3, r0, #21
   15192:	bpl.n	151ee <__sfvwrite_r+0x2b2>
   15194:	mov	r1, r2
   15196:	mov	r0, r8
   15198:	bl	f330 <_malloc_r>
   1519c:	cmp	r0, #0
   1519e:	beq.n	15218 <__sfvwrite_r+0x2dc>
   151a0:	mov	r2, fp
   151a2:	ldr	r1, [r4, #16]
   151a4:	str	r0, [sp, #4]
   151a6:	bl	b09c <memcpy>
   151aa:	ldrh	r2, [r4, #12]
   151ac:	ldr	r3, [sp, #4]
   151ae:	bic.w	r2, r2, #1152	; 0x480
   151b2:	orr.w	r2, r2, #128	; 0x80
   151b6:	strh	r2, [r4, #12]
   151b8:	add.w	r0, r3, fp
   151bc:	str	r3, [r4, #16]
   151be:	sub.w	r3, sl, fp
   151c2:	str.w	sl, [r4, #20]
   151c6:	str	r3, [r4, #8]
   151c8:	str	r0, [r4, #0]
   151ca:	mov	fp, r6
   151cc:	mov	r2, r6
   151ce:	b.n	14fea <__sfvwrite_r+0xae>
   151d0:	mov	r1, r7
   151d2:	mov	r2, fp
   151d4:	bl	1000c <memmove>
   151d8:	ldr	r3, [r4, #0]
   151da:	add	r3, fp
   151dc:	str	r3, [r4, #0]
   151de:	mov	r1, r4
   151e0:	mov	r0, r8
   151e2:	bl	12d8c <_fflush_r>
   151e6:	cmp	r0, #0
   151e8:	beq.w	15096 <__sfvwrite_r+0x15a>
   151ec:	b.n	1503a <__sfvwrite_r+0xfe>
   151ee:	mov	r0, r8
   151f0:	bl	f8a8 <_realloc_r>
   151f4:	mov	r3, r0
   151f6:	cmp	r0, #0
   151f8:	bne.n	151b8 <__sfvwrite_r+0x27c>
   151fa:	ldr	r1, [r4, #16]
   151fc:	mov	r0, r8
   151fe:	bl	10684 <_free_r>
   15202:	ldrsh.w	r3, [r4, #12]
   15206:	movs	r2, #12
   15208:	bic.w	r3, r3, #128	; 0x80
   1520c:	str.w	r2, [r8]
   15210:	b.n	1503e <__sfvwrite_r+0x102>
   15212:	adds	r2, r6, #1
   15214:	mov	r9, r2
   15216:	b.n	15066 <__sfvwrite_r+0x12a>
   15218:	movs	r2, #12
   1521a:	ldrsh.w	r3, [r4, #12]
   1521e:	str.w	r2, [r8]
   15222:	b.n	1503e <__sfvwrite_r+0x102>
   15224:	mov.w	r0, #4294967295
   15228:	b.n	14fa0 <__sfvwrite_r+0x64>
   1522a:	nop
   1522c:	.word	0x7ffffc00

00015230 <__swsetup_r>:
   15230:	push	{r3, r4, r5, lr}
   15232:	ldr	r3, [pc, #196]	; (152f8 <__swsetup_r+0xc8>)
   15234:	ldr	r3, [r3, #0]
   15236:	mov	r5, r0
   15238:	mov	r4, r1
   1523a:	cbz	r3, 15242 <__swsetup_r+0x12>
   1523c:	ldr	r2, [r3, #52]	; 0x34
   1523e:	cmp	r2, #0
   15240:	beq.n	152e0 <__swsetup_r+0xb0>
   15242:	ldrsh.w	r3, [r4, #12]
   15246:	lsls	r0, r3, #28
   15248:	uxth	r2, r3
   1524a:	bpl.n	15286 <__swsetup_r+0x56>
   1524c:	ldr	r1, [r4, #16]
   1524e:	cbz	r1, 1529c <__swsetup_r+0x6c>
   15250:	ands.w	r0, r2, #1
   15254:	beq.n	15266 <__swsetup_r+0x36>
   15256:	movs	r0, #0
   15258:	str	r0, [r4, #8]
   1525a:	ldr	r0, [r4, #20]
   1525c:	negs	r0, r0
   1525e:	str	r0, [r4, #24]
   15260:	cbz	r1, 15272 <__swsetup_r+0x42>
   15262:	movs	r0, #0
   15264:	pop	{r3, r4, r5, pc}
   15266:	lsls	r5, r2, #30
   15268:	it	pl
   1526a:	ldrpl	r0, [r4, #20]
   1526c:	str	r0, [r4, #8]
   1526e:	cmp	r1, #0
   15270:	bne.n	15262 <__swsetup_r+0x32>
   15272:	lsls	r2, r2, #24
   15274:	it	pl
   15276:	movpl	r0, r1
   15278:	bpl.n	15264 <__swsetup_r+0x34>
   1527a:	orr.w	r3, r3, #64	; 0x40
   1527e:	strh	r3, [r4, #12]
   15280:	mov.w	r0, #4294967295
   15284:	pop	{r3, r4, r5, pc}
   15286:	lsls	r1, r2, #27
   15288:	bpl.n	152e8 <__swsetup_r+0xb8>
   1528a:	lsls	r2, r2, #29
   1528c:	bmi.n	152b8 <__swsetup_r+0x88>
   1528e:	ldr	r1, [r4, #16]
   15290:	orr.w	r3, r3, #8
   15294:	strh	r3, [r4, #12]
   15296:	uxth	r2, r3
   15298:	cmp	r1, #0
   1529a:	bne.n	15250 <__swsetup_r+0x20>
   1529c:	and.w	r0, r2, #640	; 0x280
   152a0:	cmp.w	r0, #512	; 0x200
   152a4:	beq.n	15250 <__swsetup_r+0x20>
   152a6:	mov	r1, r4
   152a8:	mov	r0, r5
   152aa:	bl	1553c <__smakebuf_r>
   152ae:	ldrsh.w	r3, [r4, #12]
   152b2:	ldr	r1, [r4, #16]
   152b4:	uxth	r2, r3
   152b6:	b.n	15250 <__swsetup_r+0x20>
   152b8:	ldr	r1, [r4, #48]	; 0x30
   152ba:	cbz	r1, 152d2 <__swsetup_r+0xa2>
   152bc:	add.w	r2, r4, #64	; 0x40
   152c0:	cmp	r1, r2
   152c2:	beq.n	152ce <__swsetup_r+0x9e>
   152c4:	mov	r0, r5
   152c6:	bl	10684 <_free_r>
   152ca:	ldrsh.w	r3, [r4, #12]
   152ce:	movs	r2, #0
   152d0:	str	r2, [r4, #48]	; 0x30
   152d2:	ldr	r1, [r4, #16]
   152d4:	movs	r2, #0
   152d6:	strd	r1, r2, [r4]
   152da:	bic.w	r3, r3, #36	; 0x24
   152de:	b.n	15290 <__swsetup_r+0x60>
   152e0:	mov	r0, r3
   152e2:	bl	fdb8 <__sinit>
   152e6:	b.n	15242 <__swsetup_r+0x12>
   152e8:	movs	r2, #9
   152ea:	orr.w	r3, r3, #64	; 0x40
   152ee:	str	r2, [r5, #0]
   152f0:	mov.w	r0, #4294967295
   152f4:	strh	r3, [r4, #12]
   152f6:	pop	{r3, r4, r5, pc}
   152f8:	.word	0x200021d0

000152fc <__fputwc>:
   152fc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15300:	sub	sp, #8
   15302:	mov	sl, r0
   15304:	mov	r8, r1
   15306:	mov	r4, r2
   15308:	bl	10298 <__locale_mb_cur_max>
   1530c:	cmp	r0, #1
   1530e:	bne.n	15318 <__fputwc+0x1c>
   15310:	add.w	r3, r8, #4294967295
   15314:	cmp	r3, #254	; 0xfe
   15316:	bls.n	15386 <__fputwc+0x8a>
   15318:	add.w	r9, sp, #4
   1531c:	mov	r2, r8
   1531e:	add.w	r3, r4, #92	; 0x5c
   15322:	mov	r1, r9
   15324:	mov	r0, sl
   15326:	bl	13d2c <_wcrtomb_r>
   1532a:	adds	r2, r0, #1
   1532c:	mov	r6, r0
   1532e:	beq.n	15396 <__fputwc+0x9a>
   15330:	cbz	r0, 1537c <__fputwc+0x80>
   15332:	ldrb.w	ip, [sp, #4]
   15336:	movs	r5, #0
   15338:	b.n	1534e <__fputwc+0x52>
   1533a:	ldr	r3, [r4, #0]
   1533c:	adds	r2, r3, #1
   1533e:	str	r2, [r4, #0]
   15340:	strb.w	ip, [r3]
   15344:	adds	r5, #1
   15346:	cmp	r5, r6
   15348:	bcs.n	1537c <__fputwc+0x80>
   1534a:	ldrb.w	ip, [r9, #1]!
   1534e:	ldr	r3, [r4, #8]
   15350:	subs	r3, #1
   15352:	cmp	r3, #0
   15354:	str	r3, [r4, #8]
   15356:	bge.n	1533a <__fputwc+0x3e>
   15358:	ldr	r7, [r4, #24]
   1535a:	cmp	r3, r7
   1535c:	mov	r1, ip
   1535e:	mov	r2, r4
   15360:	mov	r0, sl
   15362:	blt.n	1536a <__fputwc+0x6e>
   15364:	cmp.w	ip, #10
   15368:	bne.n	1533a <__fputwc+0x3e>
   1536a:	bl	15614 <__swbuf_r>
   1536e:	adds	r3, r0, #1
   15370:	bne.n	15344 <__fputwc+0x48>
   15372:	mov	r6, r0
   15374:	mov	r0, r6
   15376:	add	sp, #8
   15378:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1537c:	mov	r6, r8
   1537e:	mov	r0, r6
   15380:	add	sp, #8
   15382:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   15386:	uxtb.w	ip, r8
   1538a:	strb.w	ip, [sp, #4]
   1538e:	mov	r6, r0
   15390:	add.w	r9, sp, #4
   15394:	b.n	15336 <__fputwc+0x3a>
   15396:	ldrh	r3, [r4, #12]
   15398:	mov	r0, r6
   1539a:	orr.w	r3, r3, #64	; 0x40
   1539e:	strh	r3, [r4, #12]
   153a0:	add	sp, #8
   153a2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   153a6:	nop

000153a8 <_fputwc_r>:
   153a8:	push	{r4, r5, lr}
   153aa:	ldr	r3, [r2, #100]	; 0x64
   153ac:	tst.w	r3, #1
   153b0:	ldrsh.w	r3, [r2, #12]
   153b4:	mov	r4, r2
   153b6:	sub	sp, #12
   153b8:	mov	r5, r0
   153ba:	uxth	r2, r3
   153bc:	bne.n	153c2 <_fputwc_r+0x1a>
   153be:	lsls	r0, r3, #22
   153c0:	bpl.n	153fc <_fputwc_r+0x54>
   153c2:	lsls	r0, r2, #18
   153c4:	bmi.n	153d4 <_fputwc_r+0x2c>
   153c6:	ldr	r2, [r4, #100]	; 0x64
   153c8:	orr.w	r3, r3, #8192	; 0x2000
   153cc:	orr.w	r2, r2, #8192	; 0x2000
   153d0:	strh	r3, [r4, #12]
   153d2:	str	r2, [r4, #100]	; 0x64
   153d4:	mov	r2, r4
   153d6:	mov	r0, r5
   153d8:	bl	152fc <__fputwc>
   153dc:	ldr	r3, [r4, #100]	; 0x64
   153de:	lsls	r2, r3, #31
   153e0:	mov	r5, r0
   153e2:	bmi.n	153ea <_fputwc_r+0x42>
   153e4:	ldrh	r3, [r4, #12]
   153e6:	lsls	r3, r3, #22
   153e8:	bpl.n	153f0 <_fputwc_r+0x48>
   153ea:	mov	r0, r5
   153ec:	add	sp, #12
   153ee:	pop	{r4, r5, pc}
   153f0:	ldr	r0, [r4, #88]	; 0x58
   153f2:	bl	103d0 <__retarget_lock_release_recursive>
   153f6:	mov	r0, r5
   153f8:	add	sp, #12
   153fa:	pop	{r4, r5, pc}
   153fc:	ldr	r0, [r4, #88]	; 0x58
   153fe:	str	r1, [sp, #4]
   15400:	bl	103cc <__retarget_lock_acquire_recursive>
   15404:	ldrsh.w	r3, [r4, #12]
   15408:	ldr	r1, [sp, #4]
   1540a:	uxth	r2, r3
   1540c:	b.n	153c2 <_fputwc_r+0x1a>
   1540e:	nop

00015410 <_wcsnrtombs_l>:
   15410:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15414:	sub	sp, #44	; 0x2c
   15416:	ldrd	r8, sl, [sp, #84]	; 0x54
   1541a:	ldr	r7, [sp, #80]	; 0x50
   1541c:	str	r1, [sp, #12]
   1541e:	mov	r9, r0
   15420:	str	r2, [sp, #20]
   15422:	mov	r6, r3
   15424:	cmp.w	r8, #0
   15428:	beq.n	154e4 <_wcsnrtombs_l+0xd4>
   1542a:	ldr	r3, [sp, #12]
   1542c:	cmp	r3, #0
   1542e:	beq.n	154ee <_wcsnrtombs_l+0xde>
   15430:	ldr	r3, [sp, #20]
   15432:	ldr	r5, [r3, #0]
   15434:	cmp	r7, #0
   15436:	beq.n	1550e <_wcsnrtombs_l+0xfe>
   15438:	subs	r4, r6, #1
   1543a:	cbz	r6, 15490 <_wcsnrtombs_l+0x80>
   1543c:	ldr	r3, [sp, #12]
   1543e:	str	r3, [sp, #16]
   15440:	subs	r5, #4
   15442:	movs	r6, #0
   15444:	str	r5, [sp, #4]
   15446:	b.n	15460 <_wcsnrtombs_l+0x50>
   15448:	ldr	r3, [sp, #12]
   1544a:	cbnz	r3, 15498 <_wcsnrtombs_l+0x88>
   1544c:	ldr	r3, [sp, #4]
   1544e:	ldr	r2, [r3, #0]
   15450:	cmp	r2, #0
   15452:	beq.n	154ca <_wcsnrtombs_l+0xba>
   15454:	cmp	ip, r7
   15456:	bcs.n	15512 <_wcsnrtombs_l+0x102>
   15458:	subs	r4, #1
   1545a:	adds	r3, r4, #1
   1545c:	mov	r6, ip
   1545e:	beq.n	15490 <_wcsnrtombs_l+0x80>
   15460:	ldr.w	r3, [r8]
   15464:	str	r3, [sp, #8]
   15466:	ldr	r3, [sp, #4]
   15468:	ldr.w	r5, [sl, #224]	; 0xe0
   1546c:	ldr.w	r2, [r3, #4]!
   15470:	str	r3, [sp, #4]
   15472:	add	r1, sp, #28
   15474:	mov	r3, r8
   15476:	mov	r0, r9
   15478:	ldr.w	fp, [r8, #4]
   1547c:	blx	r5
   1547e:	adds	r2, r0, #1
   15480:	beq.n	154f8 <_wcsnrtombs_l+0xe8>
   15482:	add.w	ip, r0, r6
   15486:	cmp	ip, r7
   15488:	bls.n	15448 <_wcsnrtombs_l+0x38>
   1548a:	ldr	r3, [sp, #8]
   1548c:	strd	r3, fp, [r8]
   15490:	mov	r0, r6
   15492:	add	sp, #44	; 0x2c
   15494:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15498:	cmp	r0, #0
   1549a:	ble.n	154ba <_wcsnrtombs_l+0xaa>
   1549c:	ldr	r3, [sp, #16]
   1549e:	ldr	r5, [sp, #4]
   154a0:	add	r0, r3
   154a2:	subs	r2, r3, #1
   154a4:	add	r1, sp, #28
   154a6:	add.w	lr, r0, #4294967295
   154aa:	ldrb.w	r3, [r1], #1
   154ae:	strb.w	r3, [r2, #1]!
   154b2:	cmp	r2, lr
   154b4:	bne.n	154aa <_wcsnrtombs_l+0x9a>
   154b6:	str	r5, [sp, #4]
   154b8:	str	r0, [sp, #16]
   154ba:	ldr	r3, [sp, #20]
   154bc:	ldr	r2, [r3, #0]
   154be:	adds	r2, #4
   154c0:	str	r2, [r3, #0]
   154c2:	ldr	r3, [sp, #4]
   154c4:	ldr	r2, [r3, #0]
   154c6:	cmp	r2, #0
   154c8:	bne.n	15454 <_wcsnrtombs_l+0x44>
   154ca:	ldr	r3, [sp, #12]
   154cc:	cbz	r3, 154d2 <_wcsnrtombs_l+0xc2>
   154ce:	ldr	r3, [sp, #20]
   154d0:	str	r2, [r3, #0]
   154d2:	add.w	r6, ip, #4294967295
   154d6:	movs	r2, #0
   154d8:	mov	r0, r6
   154da:	str.w	r2, [r8]
   154de:	add	sp, #44	; 0x2c
   154e0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   154e4:	ldr	r3, [sp, #12]
   154e6:	add.w	r8, r0, #268	; 0x10c
   154ea:	cmp	r3, #0
   154ec:	bne.n	15430 <_wcsnrtombs_l+0x20>
   154ee:	ldr	r3, [sp, #20]
   154f0:	mov.w	r7, #4294967295
   154f4:	ldr	r5, [r3, #0]
   154f6:	b.n	15438 <_wcsnrtombs_l+0x28>
   154f8:	mov	r6, r0
   154fa:	movs	r1, #138	; 0x8a
   154fc:	movs	r2, #0
   154fe:	mov	r0, r6
   15500:	str.w	r1, [r9]
   15504:	str.w	r2, [r8]
   15508:	add	sp, #44	; 0x2c
   1550a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1550e:	mov	r6, r7
   15510:	b.n	15490 <_wcsnrtombs_l+0x80>
   15512:	mov	r6, ip
   15514:	b.n	15490 <_wcsnrtombs_l+0x80>
   15516:	nop

00015518 <_wcsnrtombs_r>:
   15518:	push	{r4, lr}
   1551a:	sub	sp, #16
   1551c:	ldr	r4, [pc, #20]	; (15534 <_wcsnrtombs_r+0x1c>)
   1551e:	ldr	r0, [sp, #24]
   15520:	str	r0, [sp, #0]
   15522:	ldr	r0, [sp, #28]
   15524:	str	r0, [sp, #4]
   15526:	ldr	r0, [pc, #16]	; (15538 <_wcsnrtombs_r+0x20>)
   15528:	ldr	r0, [r0, #0]
   1552a:	str	r4, [sp, #8]
   1552c:	bl	15410 <_wcsnrtombs_l>
   15530:	add	sp, #16
   15532:	pop	{r4, pc}
   15534:	.word	0x20001c48
   15538:	.word	0x200021d0

0001553c <__smakebuf_r>:
   1553c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15540:	ldrh	r3, [r1, #12]
   15542:	mov	r4, r1
   15544:	lsls	r1, r3, #30
   15546:	sub	sp, #88	; 0x58
   15548:	bpl.n	1555c <__smakebuf_r+0x20>
   1554a:	add.w	r3, r4, #67	; 0x43
   1554e:	movs	r2, #1
   15550:	strd	r3, r2, [r4, #16]
   15554:	str	r3, [r4, #0]
   15556:	add	sp, #88	; 0x58
   15558:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1555c:	ldrsh.w	r1, [r4, #14]
   15560:	cmp	r1, #0
   15562:	mov	r6, r0
   15564:	blt.n	155b2 <__smakebuf_r+0x76>
   15566:	mov	r2, sp
   15568:	bl	156c4 <_fstat_r>
   1556c:	cmp	r0, #0
   1556e:	blt.n	155b0 <__smakebuf_r+0x74>
   15570:	ldr	r5, [sp, #4]
   15572:	and.w	r5, r5, #61440	; 0xf000
   15576:	sub.w	r5, r5, #8192	; 0x2000
   1557a:	clz	r5, r5
   1557e:	mov.w	r8, #1024	; 0x400
   15582:	lsrs	r5, r5, #5
   15584:	mov.w	r7, #2048	; 0x800
   15588:	mov	r1, r8
   1558a:	mov	r0, r6
   1558c:	bl	f330 <_malloc_r>
   15590:	cbz	r0, 155cc <__smakebuf_r+0x90>
   15592:	ldrsh.w	r3, [r4, #12]
   15596:	str.w	r8, [r4, #20]
   1559a:	orr.w	r3, r3, #128	; 0x80
   1559e:	str	r0, [r4, #0]
   155a0:	str	r0, [r4, #16]
   155a2:	strh	r3, [r4, #12]
   155a4:	cbnz	r5, 155f4 <__smakebuf_r+0xb8>
   155a6:	orrs	r3, r7
   155a8:	strh	r3, [r4, #12]
   155aa:	add	sp, #88	; 0x58
   155ac:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   155b0:	ldrh	r3, [r4, #12]
   155b2:	ands.w	r5, r3, #128	; 0x80
   155b6:	beq.n	155ec <__smakebuf_r+0xb0>
   155b8:	mov.w	r8, #64	; 0x40
   155bc:	movs	r5, #0
   155be:	mov	r1, r8
   155c0:	mov	r0, r6
   155c2:	mov	r7, r5
   155c4:	bl	f330 <_malloc_r>
   155c8:	cmp	r0, #0
   155ca:	bne.n	15592 <__smakebuf_r+0x56>
   155cc:	ldrsh.w	r3, [r4, #12]
   155d0:	lsls	r2, r3, #22
   155d2:	bmi.n	15556 <__smakebuf_r+0x1a>
   155d4:	bic.w	r3, r3, #3
   155d8:	add.w	r2, r4, #67	; 0x43
   155dc:	orr.w	r3, r3, #2
   155e0:	movs	r1, #1
   155e2:	strd	r2, r1, [r4, #16]
   155e6:	strh	r3, [r4, #12]
   155e8:	str	r2, [r4, #0]
   155ea:	b.n	15556 <__smakebuf_r+0x1a>
   155ec:	mov.w	r8, #1024	; 0x400
   155f0:	mov	r7, r5
   155f2:	b.n	15588 <__smakebuf_r+0x4c>
   155f4:	ldrsh.w	r1, [r4, #14]
   155f8:	mov	r0, r6
   155fa:	bl	156f0 <_isatty_r>
   155fe:	cbnz	r0, 15606 <__smakebuf_r+0xca>
   15600:	ldrsh.w	r3, [r4, #12]
   15604:	b.n	155a6 <__smakebuf_r+0x6a>
   15606:	ldrh	r3, [r4, #12]
   15608:	bic.w	r3, r3, #3
   1560c:	orr.w	r3, r3, #1
   15610:	sxth	r3, r3
   15612:	b.n	155a6 <__smakebuf_r+0x6a>

00015614 <__swbuf_r>:
   15614:	push	{r3, r4, r5, r6, r7, lr}
   15616:	mov	r5, r1
   15618:	mov	r4, r2
   1561a:	mov	r6, r0
   1561c:	cbz	r0, 15624 <__swbuf_r+0x10>
   1561e:	ldr	r3, [r0, #52]	; 0x34
   15620:	cmp	r3, #0
   15622:	beq.n	156be <__swbuf_r+0xaa>
   15624:	ldrsh.w	r2, [r4, #12]
   15628:	ldr	r3, [r4, #24]
   1562a:	str	r3, [r4, #8]
   1562c:	lsls	r7, r2, #28
   1562e:	uxth	r0, r2
   15630:	bpl.n	1566a <__swbuf_r+0x56>
   15632:	ldr	r3, [r4, #16]
   15634:	cbz	r3, 1566a <__swbuf_r+0x56>
   15636:	uxtb	r5, r5
   15638:	lsls	r1, r0, #18
   1563a:	mov	r7, r5
   1563c:	bpl.n	15684 <__swbuf_r+0x70>
   1563e:	ldr	r2, [r4, #0]
   15640:	ldr	r1, [r4, #20]
   15642:	subs	r3, r2, r3
   15644:	cmp	r1, r3
   15646:	ble.n	1569c <__swbuf_r+0x88>
   15648:	adds	r3, #1
   1564a:	ldr	r1, [r4, #8]
   1564c:	subs	r1, #1
   1564e:	str	r1, [r4, #8]
   15650:	adds	r1, r2, #1
   15652:	str	r1, [r4, #0]
   15654:	strb	r5, [r2, #0]
   15656:	ldr	r2, [r4, #20]
   15658:	cmp	r2, r3
   1565a:	beq.n	156ac <__swbuf_r+0x98>
   1565c:	ldrh	r3, [r4, #12]
   1565e:	lsls	r3, r3, #31
   15660:	bpl.n	15666 <__swbuf_r+0x52>
   15662:	cmp	r5, #10
   15664:	beq.n	156ac <__swbuf_r+0x98>
   15666:	mov	r0, r7
   15668:	pop	{r3, r4, r5, r6, r7, pc}
   1566a:	mov	r1, r4
   1566c:	mov	r0, r6
   1566e:	bl	15230 <__swsetup_r>
   15672:	cbnz	r0, 156b8 <__swbuf_r+0xa4>
   15674:	ldrsh.w	r2, [r4, #12]
   15678:	ldr	r3, [r4, #16]
   1567a:	uxth	r0, r2
   1567c:	uxtb	r5, r5
   1567e:	lsls	r1, r0, #18
   15680:	mov	r7, r5
   15682:	bmi.n	1563e <__swbuf_r+0x2a>
   15684:	orr.w	r2, r2, #8192	; 0x2000
   15688:	strh	r2, [r4, #12]
   1568a:	ldr	r2, [r4, #100]	; 0x64
   1568c:	ldr	r1, [r4, #20]
   1568e:	bic.w	r2, r2, #8192	; 0x2000
   15692:	str	r2, [r4, #100]	; 0x64
   15694:	ldr	r2, [r4, #0]
   15696:	subs	r3, r2, r3
   15698:	cmp	r1, r3
   1569a:	bgt.n	15648 <__swbuf_r+0x34>
   1569c:	mov	r1, r4
   1569e:	mov	r0, r6
   156a0:	bl	12d8c <_fflush_r>
   156a4:	cbnz	r0, 156b8 <__swbuf_r+0xa4>
   156a6:	ldr	r2, [r4, #0]
   156a8:	movs	r3, #1
   156aa:	b.n	1564a <__swbuf_r+0x36>
   156ac:	mov	r1, r4
   156ae:	mov	r0, r6
   156b0:	bl	12d8c <_fflush_r>
   156b4:	cmp	r0, #0
   156b6:	beq.n	15666 <__swbuf_r+0x52>
   156b8:	mov.w	r7, #4294967295
   156bc:	b.n	15666 <__swbuf_r+0x52>
   156be:	bl	fdb8 <__sinit>
   156c2:	b.n	15624 <__swbuf_r+0x10>

000156c4 <_fstat_r>:
   156c4:	push	{r4, r5, r6, lr}
   156c6:	mov	r4, r1
   156c8:	ldr	r5, [pc, #32]	; (156ec <_fstat_r+0x28>)
   156ca:	mov	r3, r0
   156cc:	movs	r6, #0
   156ce:	mov	r0, r4
   156d0:	mov	r1, r2
   156d2:	mov	r4, r3
   156d4:	str	r6, [r5, #0]
   156d6:	bl	cfc0 <_fstat>
   156da:	adds	r3, r0, #1
   156dc:	beq.n	156e0 <_fstat_r+0x1c>
   156de:	pop	{r4, r5, r6, pc}
   156e0:	ldr	r3, [r5, #0]
   156e2:	cmp	r3, #0
   156e4:	beq.n	156de <_fstat_r+0x1a>
   156e6:	str	r3, [r4, #0]
   156e8:	pop	{r4, r5, r6, pc}
   156ea:	nop
   156ec:	.word	0x20015834

000156f0 <_isatty_r>:
   156f0:	push	{r3, r4, r5, lr}
   156f2:	ldr	r5, [pc, #28]	; (15710 <_isatty_r+0x20>)
   156f4:	movs	r2, #0
   156f6:	mov	r4, r0
   156f8:	mov	r0, r1
   156fa:	str	r2, [r5, #0]
   156fc:	bl	cfcc <_isatty>
   15700:	adds	r3, r0, #1
   15702:	beq.n	15706 <_isatty_r+0x16>
   15704:	pop	{r3, r4, r5, pc}
   15706:	ldr	r3, [r5, #0]
   15708:	cmp	r3, #0
   1570a:	beq.n	15704 <_isatty_r+0x14>
   1570c:	str	r3, [r4, #0]
   1570e:	pop	{r3, r4, r5, pc}
   15710:	.word	0x20015834
   15714:	.word	0x00000000

00015718 <___init_veneer>:
   15718:	ldr.w	pc, [pc]	; 1571c <___init_veneer+0x4>
   1571c:	.word	0x600026bd

00015720 <___reboot_Teensyduino__veneer>:
   15720:	ldr.w	pc, [pc]	; 15724 <___reboot_Teensyduino__veneer+0x4>
   15724:	.word	0x60001731

00015728 <___ZNK16CrashReportClass7printToER5Print_veneer>:
   15728:	ldr.w	pc, [pc]	; 1572c <___ZNK16CrashReportClass7printToER5Print_veneer+0x4>
   1572c:	.word	0x60001d99

00015730 <___ZN11AudioStream17initialize_memoryEP18audio_block_structj_veneer>:
   15730:	ldr.w	pc, [pc]	; 15734 <___ZN11AudioStream17initialize_memoryEP18audio_block_structj_veneer+0x4>
   15734:	.word	0x600025a1

00015738 <___ZN16CrashReportClasscvbEv_veneer>:
   15738:	ldr.w	pc, [pc]	; 1573c <___ZN16CrashReportClasscvbEv_veneer+0x4>
   1573c:	.word	0x60002549

Disassembly of section .fini:

00015740 <_fini>:
   15740:	push	{r3, r4, r5, r6, r7, lr}
   15742:	nop

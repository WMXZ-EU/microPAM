
.vsteensy/build/microPAM_T41.elf:     file format elf32-littlearm

SYMBOL TABLE:
60000000 l    d  .text.headers	00000000 .text.headers
60001400 l    d  .text.code	00000000 .text.code
60001f8c l    d  .text.progmem	00000000 .text.progmem
00000000 l    d  .text.itcm	00000000 .text.itcm
00013730 l    d  .fini	00000000 .fini
00013734 l    d  .ARM.exidx	00000000 .ARM.exidx
20000000 l    d  .data	00000000 .data
20001ec0 l    d  .bss	00000000 .bss
20200000 l    d  .bss.dma	00000000 .bss.dma
70000000 l    d  .bss.extram	00000000 .bss.extram
60017974 l    d  .text.csf	00000000 .text.csf
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_loclists	00000000 .debug_loclists
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_rnglists	00000000 .debug_rnglists
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 l    df *ABS*	00000000 bootdata.c
00000000 l    df *ABS*	00000000 startup.c
60001400 l     F .text.code	00000016 memory_copy
60001418 l     F .text.code	00000010 memory_clear
00000000 l    df *ABS*	00000000 usb.c
0000acd4 l     F .text.itcm	000000c8 endpoint0_receive
0000ad9c l     F .text.itcm	00000088 schedule_transfer
0000ae24 l     F .text.itcm	00000036 run_callbacks
0000ae5c l     F .text.itcm	00000098 endpoint0_transmit.constprop.0
200073a4 l     O .bss	00000008 endpoint0_buffer
200073ac l     O .bss	00000004 endpoint0_notify_mask
20005300 l     O .bss	00000008 endpoint0_setupdata
200073b0 l     O .bss	00000004 endpointN_notify_mask
20007a94 l     O .bss	00000008 reply_buffer
20007b84 l     O .bss	00000001 sof_usage
20007b92 l     O .bss	00000001 usb_reboot_timer
00000000 l    df *ABS*	00000000 tempmon.c
20007af0 l     O .bss	00000004 s_hotCount
20007af4 l     O .bss	00000004 s_hotTemp
20007af8 l     O .bss	00000004 s_hot_ROOM
20007afc l     O .bss	00000004 s_roomC_hotC
00000000 l    df *ABS*	00000000 audiostream.cpp
00000000 l    df *ABS*	00000000 analog.c
20007b7e l     O .bss	00000001 calibrating
00000000 l    df *ABS*	00000000 crti.o
00000000 l    df *ABS*	00000000 crtn.o
00000000 l    df *ABS*	00000000 crtstuff.c
00000020 l     F .text.itcm	00000000 register_tm_clones
00000044 l     F .text.itcm	00000000 frame_dummy
20007668 l     O .bss	00000000 object.0
60001f10 l     O .text.code	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 main.cpp
00001208 l     F .text.itcm	00000648 storeData(int) [clone .part.0]
20200000 l     O .bss.dma	00003cf0 setup::data
00001a14 l     F .text.itcm	000001c4 _GLOBAL__sub_I__Z7getTimev
20005c9c l     O .bss	00000400 i2s_rx_buffer_32
200060a4 l     O .bss	00000100 dout
20006214 l     O .bss	00000100 outData
20006318 l     O .bss	00000100 tempData
200065f0 l     O .bss	00000004 loop::ic
200065f4 l     O .bss	00000004 loop::t0
200065f8 l     O .bss	00000004 AudioCompress::compress(void*)::nout
20001a48 l     O .data	00000002 loop::status
00000000 l    df *ABS*	00000000 output_i2s_oct.cpp
00001bd8 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN17AudioOutputI2SOct13block_ch1_1stE
00000000 l    df *ABS*	00000000 output_pwm.cpp
00001bf0 l     F .text.itcm	0000001c __tcf_0
00001c0c l     F .text.itcm	00000030 _GLOBAL__sub_I__ZN14AudioOutputPWM21update_responsibilityE
00000000 l    df *ABS*	00000000 input_i2s.cpp
00001c3c l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE
00000000 l    df *ABS*	00000000 output_pt8211_2.cpp
00001c54 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN19AudioOutputPT8211_214block_left_1stE
00000000 l    df *ABS*	00000000 output_pt8211.cpp
00001c6c l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE
00000000 l    df *ABS*	00000000 input_spdif3.cpp
00001c84 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN16AudioInputSPDIF310block_leftE
00000000 l    df *ABS*	00000000 input_tdm2.cpp
00001c9c l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN14AudioInputTDM214block_incomingE
00000000 l    df *ABS*	00000000 input_adc.cpp
00001cb4 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN16AudioInputAnalog3dmaE
00000000 l    df *ABS*	00000000 input_pdm_i2s2.cpp
00001ccc l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN14AudioInputPDM210block_leftE
00000000 l    df *ABS*	00000000 input_i2s2.cpp
00001ce4 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN14AudioInputI2S210block_leftE
00000000 l    df *ABS*	00000000 input_i2s_quad.cpp
00001cfc l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E
00000000 l    df *ABS*	00000000 output_i2s_quad.cpp
00001d14 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE
00000000 l    df *ABS*	00000000 output_tdm2.cpp
00001e3c l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN15AudioOutputTDM211block_inputE
00000000 l    df *ABS*	00000000 output_i2s2.cpp
00001e54 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN15AudioOutputI2S214block_left_1stE
00000000 l    df *ABS*	00000000 output_i2s_hex.cpp
00001e6c l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN17AudioOutputI2SHex13block_ch1_1stE
00000000 l    df *ABS*	00000000 input_i2s_oct.cpp
00001e84 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E
00000000 l    df *ABS*	00000000 output_tdm.cpp
00001e9c l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE
00000000 l    df *ABS*	00000000 input_tdm.cpp
00001eb4 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE
00000000 l    df *ABS*	00000000 input_i2s_hex.cpp
00001ecc l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E
00000000 l    df *ABS*	00000000 output_spdif3.cpp
00001ee4 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN17AudioOutputSPDIF314block_left_1stE
00000000 l    df *ABS*	00000000 output_mqs.cpp
00001efc l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN14AudioOutputMQS14block_left_1stE
00000000 l    df *ABS*	00000000 async_input_spdif3.cpp
00002008 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN21AsyncAudioInputSPDIF310microsLastE
00000000 l    df *ABS*	00000000 input_pdm.cpp
00002020 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE
00000000 l    df *ABS*	00000000 output_i2s.cpp
00002038 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE
00000000 l    df *ABS*	00000000 output_spdif2.cpp
00002050 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN17AudioOutputSPDIF214block_left_1stE
00000000 l    df *ABS*	00000000 output_spdif.cpp
00002068 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE
00000000 l    df *ABS*	00000000 wireimxrt.cpp
000024bc l     F .text.itcm	00000044 _GLOBAL__sub_I__ZN7TwoWire5beginEv
00000000 l    df *ABS*	00000000 spi.cpp
00002518 l     F .text.itcm	00000060 SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]
000029e0 l     F .text.itcm	00000048 _GLOBAL__sub_I__ZN8SPIClass5beginEv
00000000 l    df *ABS*	00000000 sd.cpp
000030f4 l     F .text.itcm	0000008c _GLOBAL__sub_I_SD
00000000 l    df *ABS*	00000000 usb_desc.c
20001a18 l     O .data	00000012 device_descriptor
6000236c l     O .text.progmem	0000000a qualifier_descriptor
00000000 l    df *ABS*	00000000 serialevent.cpp
00000000 l    df *ABS*	00000000 effect_delay_ext.cpp
00000000 l    df *ABS*	00000000 record_queue.cpp
00000000 l    df *ABS*	00000000 time.cpp
20005c90 l     O .bss	00000004 prevMillis
20005c98 l     O .bss	00000004 nextSyncTime
2000609c l     O .bss	00000007 tm
20007b74 l     O .bss	00000001 Status
20006314 l     O .bss	00000004 sysTime
200052f8 l     O .bss	00000008 cacheTime
20001468 l     O .data	00000004 syncInterval
20000764 l     O .data	0000000c monthDays
00000000 l    df *ABS*	00000000 fsstructs.cpp
00000000 l    df *ABS*	00000000 fscache.cpp
00000000 l    df *ABS*	00000000 upcase.cpp
20000564 l     O .data	0000012c lookupTable
20000690 l     O .data	000000d4 mapTable
00000000 l    df *ABS*	00000000 fsdatetime.cpp
00003380 l     F .text.itcm	00000014 dateTimeMs10(unsigned short*, unsigned short*, unsigned char*)
00000000 l    df *ABS*	00000000 exfatformatter.cpp
000033ac l     F .text.itcm	00000020 Print::write(char const*) [clone .isra.0]
00000000 l    df *ABS*	00000000 exfatname.cpp
00000000 l    df *ABS*	00000000 exfatfile.cpp
00000000 l    df *ABS*	00000000 exfatpartition.cpp
00000000 l    df *ABS*	00000000 exfatfilewrite.cpp
00000000 l    df *ABS*	00000000 fatformatter.cpp
00000000 l    df *ABS*	00000000 fatname.cpp
00000000 l    df *ABS*	00000000 fatfile.cpp
00005b4c l     F .text.itcm	000000bc FatFile::sync() [clone .part.0]
00000000 l    df *ABS*	00000000 fatpartition.cpp
00006b74 l     F .text.itcm	00000068 FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]
00006bdc l     F .text.itcm	0000005a FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]
00000000 l    df *ABS*	00000000 fatfilelfn.cpp
00000000 l    df *ABS*	00000000 fsfile.cpp
00000000 l    df *ABS*	00000000 fsvolume.cpp
00000000 l    df *ABS*	00000000 fsnew.cpp
00000000 l    df *ABS*	00000000 sdspicard.cpp
00000000 l    df *ABS*	00000000 sdioteensy.cpp
00008a7c l     F .text.itcm	00000030 sdIrs()
00008aac l     F .text.itcm	00000014 isBusyDat()
00008ac0 l     F .text.itcm	0000000c isBusyDMA()
00008acc l     F .text.itcm	000000cc setSdclk(unsigned long)
00008ce0 l     F .text.itcm	00000068 waitDmaStatus()
00008d48 l     F .text.itcm	00000088 waitTransferComplete() [clone .part.0]
00008e84 l     F .text.itcm	00000098 cardCommand(unsigned long, unsigned long)
00008f1c l     F .text.itcm	00000060 readReg16(unsigned long, void*)
00009018 l     F .text.itcm	0000002c isBusyCMD13()
00009298 l     F .text.itcm	0000010c rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)
20007b70 l     O .bss	00000001 m_initDone
20005c8c l     O .bss	00000004 m_sdClkKhz
20007b71 l     O .bss	00000001 m_version2
20005c94 l     O .bss	00000004 m_errorLine
20007b72 l     O .bss	00000001 m_highCapacity
20007b73 l     O .bss	00000001 m_transferActive
200061a4 l     O .bss	00000010 m_cid
200061b4 l     O .bss	00000010 m_csd
200061c4 l     O .bss	00000004 m_ocr
200061c8 l     O .bss	00000004 m_rca
200061cc l     O .bss	00000008 m_scr
200061d4 l     O .bss	00000040 m_sds
20006418 l     O .bss	00000004 m_busyFcn
20007b75 l     O .bss	00000001 m_dmaBusy
2000641c l     O .bss	00000004 m_irqstat
20001a4a l     O .data	00000001 m_errorCode
00000000 l    df *ABS*	00000000 sdspiteensy3.cpp
00000000 l    df *ABS*	00000000 sdspichipselect.cpp
00000000 l    df *ABS*	00000000 memcpy-armv7m.o
00000000 l    df *ABS*	00000000 usb_serial.c
0000a2a4 l     F .text.itcm	00000060 rx_queue_transfer
20001f20 l     O .bss	00001000 rx_buffer
0000a304 l     F .text.itcm	000000b4 rx_event
0000a3b8 l     F .text.itcm	00000090 usb_serial_flush_callback
20003240 l     O .bss	00002000 txbuffer
0000a448 l     F .text.itcm	000001b8 usb_serial_write.part.0
20007a9c l     O .bss	00000004 rx_available
20007aa4 l     O .bss	00000010 rx_count
20007b80 l     O .bss	00000001 rx_head
20007ac0 l     O .bss	00000010 rx_index
20007adc l     O .bss	00000009 rx_list
20007b64 l     O .bss	00000002 rx_packet_size
20007b82 l     O .bss	00000001 rx_tail
20002f20 l     O .bss	00000100 rx_transfer
20007b85 l     O .bss	00000001 transmit_previous_timeout
20007b68 l     O .bss	00000002 tx_available
20007b87 l     O .bss	00000001 tx_head
20007b89 l     O .bss	00000001 tx_noautoflush
20007b6c l     O .bss	00000002 tx_packet_size
20003120 l     O .bss	00000080 tx_transfer
00000000 l    df *ABS*	00000000 clockspeed.c
00000000 l    df *ABS*	00000000 delay.c
00000000 l    df *ABS*	00000000 rtc.c
00000000 l    df *ABS*	00000000 sm_pool.c
00000000 l    df *ABS*	00000000 digital.c
00000000 l    df *ABS*	00000000 pwm.c
00000000 l    df *ABS*	00000000 usb_midi.c
0000befc l     F .text.itcm	00000060 rx_queue_transfer
0000bf5c l     F .text.itcm	00000064 rx_event
20007aa0 l     O .bss	00000004 rx_available
20007ab4 l     O .bss	0000000c rx_count
20007b81 l     O .bss	00000001 rx_head
20007ad0 l     O .bss	0000000c rx_index
20007ae8 l     O .bss	00000007 rx_list
20007b66 l     O .bss	00000002 rx_packet_size
20007b83 l     O .bss	00000001 rx_tail
20003020 l     O .bss	000000c0 rx_transfer
20007b86 l     O .bss	00000001 transmit_previous_timeout
20007b6a l     O .bss	00000002 tx_available
20007b88 l     O .bss	00000001 tx_head
20007b8a l     O .bss	00000001 tx_noautoflush
20007b6e l     O .bss	00000002 tx_packet_size
200031a0 l     O .bss	00000080 tx_transfer
20203d00 l     O .bss.dma	00000c00 rx_buffer
20204900 l     O .bss.dma	00000800 txbuffer
00000000 l    df *ABS*	00000000 yield.cpp
20007b7c l     O .bss	00000001 yield::running
00000000 l    df *ABS*	00000000 eventresponder.cpp
00000000 l    df *ABS*	00000000 dmachannel.cpp
00000000 l    df *ABS*	00000000 usb_inst.cpp
00000000 l    df *ABS*	00000000 time.cpp
20000770 l     O .data	0000000c monthDays
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 usb_audio.cpp
0000c9ec l     F .text.itcm	00000098 copy_to_buffers(unsigned long const*, short*, short*, unsigned int)
0000ca84 l     F .text.itcm	0000005c sync_event(transfer_struct*)
0000cd4c l     F .text.itcm	00000054 rx_event(transfer_struct*)
0000cec0 l     F .text.itcm	00000060 tx_event(transfer_struct*)
2000147c l     O .data	00000004 usb_audio_transmit_callback::count
20205280 l     O .bss.dma	000000b4 rx_buffer
20205340 l     O .bss.dma	000000b4 tx_buffer
00000000 l    df *ABS*	00000000 print.cpp
00000000 l    df *ABS*	00000000 new.cpp
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 intervaltimer.cpp
0000d1b0 l     F .text.itcm	00000058 pit_isr()
20001ec0 l     O .bss	00000010 funct_table
00000000 l    df *ABS*	00000000 atexit_arm.o
00000000 l    df *ABS*	00000000 libc_a-malloc.o
00000000 l    df *ABS*	00000000 libc_a-mallocr.o
00000000 l    df *ABS*	00000000 libc_a-mlock.o
00000000 l    df *ABS*	00000000 libc_a-reallocr.o
00000000 l    df *ABS*	00000000 libc_a-cxa_atexit.o
00000000 l    df *ABS*	00000000 libc_a-findfp.o
0000dc58 l     F .text.itcm	00000018 stdio_exit_handler
0000dc70 l     F .text.itcm	00000040 cleanup_stdio
0000dcb0 l     F .text.itcm	000000d4 global_stdio_init.part.0
00000000 l    df *ABS*	00000000 libc_a-fwalk.o
00000000 l    df *ABS*	00000000 libc_a-sprintf.o
00000000 l    df *ABS*	00000000 libc_a-stdio.o
00000000 l    df *ABS*	00000000 libc_a-vdprintf.o
00000000 l    df *ABS*	00000000 libc_a-vasnprintf.o
00000000 l    df *ABS*	00000000 libc_a-memcmp.o
00000000 l    df *ABS*	00000000 libc_a-memmove.o
00000000 l    df *ABS*	00000000 libc_a-memset.o
00000000 l    df *ABS*	00000000 libc_a-strncmp.o
00000000 l    df *ABS*	00000000 libc_a-strncpy.o
00000000 l    df *ABS*	00000000 libc_a-locale.o
00000000 l    df *ABS*	00000000 libc_a-closer.o
00000000 l    df *ABS*	00000000 libc_a-lseekr.o
00000000 l    df *ABS*	00000000 libc_a-readr.o
00000000 l    df *ABS*	00000000 libc_a-sbrkr.o
00000000 l    df *ABS*	00000000 libc_a-writer.o
00000000 l    df *ABS*	00000000 libc_a-errno.o
00000000 l    df *ABS*	00000000 libc_a-init.o
00000000 l    df *ABS*	00000000 libc_a-lock.o
00000000 l    df *ABS*	00000000 libc_a-memchr.o
00000000 l    df *ABS*	00000000 libc_a-strlen.o
00000000 l    df *ABS*	00000000 libc_a-__atexit.o
00000000 l    df *ABS*	00000000 libc_a-freer.o
00000000 l    df *ABS*	00000000 libc_a-mbtowc_r.o
00000000 l    df *ABS*	00000000 libc_a-mprec.o
00000000 l    df *ABS*	00000000 libc_a-wctomb_r.o
00000000 l    df *ABS*	00000000 libc_a-svfprintf.o
00000000 l    df *ABS*	00000000 libc_a-fclose.o
00000000 l    df *ABS*	00000000 libc_a-fflush.o
00000000 l    df *ABS*	00000000 libc_a-localeconv.o
00000000 l    df *ABS*	00000000 libm_a-s_frexp.o
00000000 l    df *ABS*	00000000 libc_a-assert.o
00000000 l    df *ABS*	00000000 libc_a-callocr.o
00000000 l    df *ABS*	00000000 libc_a-dtoa.o
00010f18 l     F .text.itcm	00000126 quorem
00000000 l    df *ABS*	00000000 libc_a-wcrtomb.o
00000000 l    df *ABS*	00000000 libc_a-wcsrtombs.o
00000000 l    df *ABS*	00000000 libc_a-fiprintf.o
00000000 l    df *ABS*	00000000 libc_a-svfiprintf.o
00000000 l    df *ABS*	00000000 libc_a-vfiprintf.o
00011eb8 l     F .text.itcm	00000076 __sprint_r.part.0
00012ebc l     F .text.itcm	00000080 __sbprintf
00000000 l    df *ABS*	00000000 libc_a-fvwrite.o
00000000 l    df *ABS*	00000000 libc_a-wsetup.o
00000000 l    df *ABS*	00000000 libc_a-fputwc.o
00000000 l    df *ABS*	00000000 libc_a-wcsnrtombs.o
00000000 l    df *ABS*	00000000 libc_a-makebuf.o
00000000 l    df *ABS*	00000000 libc_a-wbuf.o
00000000 l    df *ABS*	00000000 libc_a-fstatr.o
00000000 l    df *ABS*	00000000 libc_a-isattyr.o
00000000 l    df *ABS*	00000000 libc_a-ctype_.o
00000000 l    df *ABS*	00000000 libc_a-impure.o
00000000 l    df *ABS*	00000000 libc_a-__call_atexit.o
00000000 l    df *ABS*	00000000 exfatvolume.cpp
00000000 l    df *ABS*	00000000 fatvolume.cpp
00000000 l    df *ABS*	00000000 hardwareserial.cpp
00013718 l     F .text.itcm	00000008 ___init_veneer
00013720 l     F .text.itcm	00000008 ___ZN11AudioStream17initialize_memoryEP18audio_block_structj_veneer
00013728 l     F .text.itcm	00000008 ___reboot_Teensyduino__veneer
60001ec0 l     F .text.code	00000008 __pwm_init_veneer
60001ec8 l     F .text.code	00000008 ___Znwj_veneer
60001ed0 l     F .text.code	00000008 __sm_set_pool_veneer
60001ed8 l     F .text.code	00000008 __delay_veneer
60001ee0 l     F .text.code	00000008 __memset_veneer
60001ee8 l     F .text.code	00000008 __main_veneer
60001ef0 l     F .text.code	00000008 __set_arm_clock_veneer
60001ef8 l     F .text.code	00000008 __usb_init_serialnumber_veneer
60001f00 l     F .text.code	00000008 ___ZN13IntervalTimer11beginCyclesEPFvvEm_veneer
60001f08 l     F .text.code	00000008 ____libc_init_array_veneer
00000394  w    F .text.itcm	0000006e SDFile::getModifyTime(DateTimeFields&)
200064cc g     O .bss	00000004 AudioInputUSB::incoming_right
000032c8 g     F .text.itcm	000000b8 toUpcase(unsigned short)
00001f54 g     F .text.itcm	00000016 AudioRecordQueue::available()
0000a814 g     F .text.itcm	00000018 usb_serial_available
20006514 g     O .bss	00000004 AudioOutputUSB::left_2nd
200065d8 g     O .bss	00000008 I2S_32::dma
000136f0 g     F .text.itcm	00000024 _isatty_r
200065c8 g     O .bss	00000008 AsyncAudioInputSPDIF3::dma
20007b5a g     O .bss	00000002 AudioInputUSB::incoming_count
6000178c g     F .text.code	00000002 startup_default_late_hook
0000e2d4 g     F .text.itcm	0000002c _lseek_r
20006428 g     O .bss	00000004 AudioStream::memory_pool
000093a4 g     F .text.itcm	00000088 SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)
0000c180  w    F .text.itcm	000000f0 yield
00009118 g     F .text.itcm	000000c8 SdioCard::cardCMD6(unsigned long, unsigned char*)
00007acc  w    F .text.itcm	0000000e DedicatedSpiCard::~DedicatedSpiCard()
200076ec g     O .bss	00000040 proc_stat
20007b4c g     O .bss	00000004 usb_timer1_callback
200009c4 g     O .data	0000000c vtable for AudioCompress
000069c0 g     F .text.itcm	000001b4 FatFile::write(void const*, unsigned int)
20005240 g     O .bss	000000b4 usb_audio_transmit_buffer
600020a0 g     O .text.progmem	00000018 usb_string_manufacturer_name_default
200076d0 g     O .bss	0000001c proc
60001888 g     F .text.code	00000384 configure_external_ram
00007ac4  w    F .text.itcm	00000004 DedicatedSpiCard::isDedicatedSpi()
0000694c g     F .text.itcm	00000074 FatFile::truncate()
20005a0c g     O .bss	00000140 Wire1
000022b4 g     F .text.itcm	0000001c setSyncProvider(long long (*)())
00007130 g     F .text.itcm	00000168 FatFile::makeSFN(FatLfn_t*)
20007b76 g     O .bss	00000001 AudioStream::update_scheduled
20006420 g     O .bss	00000004 FsDateTime::callback
20006790 g     O .bss	00000001 __lock___atexit_recursive_mutex
00011d2c g     F .text.itcm	0000004c _wcrtomb_r
20007b8e g     O .bss	00000001 usb_audio_transmit_setting
00007298 g     F .text.itcm	000000b4 FatFile::makeUniqueSfn(FatLfn_t*)
000082cc g     F .text.itcm	00000068 SharedSpiCard::writeStart(unsigned long)
0000555c g     F .text.itcm	00000056 FatFormatter::initPbs()
0000d0f8 g     F .text.itcm	0000001c Print::println()
00008a44 g     F .text.itcm	00000026 DedicatedSpiCard::begin(SdSpiConfig)
000023ec g     F .text.itcm	000000ac TwoWire::isr()
200009e8 g     O .data	00000074 vtable for DedicatedSpiCard
20007b50 g     O .bss	00000002 AudioStream::memory_used
0000dec4 g     F .text.itcm	00000020 __sseek
0000dd84 g     F .text.itcm	0000003c __sinit
00003edc g     F .text.itcm	000000ea ExFatFile::seekSet(unsigned long long)
00013614 g     F .text.itcm	000000b0 __swbuf_r
000004d4  w    F .text.itcm	00000028 File::flush()
00000404  w    F .text.itcm	0000006e SDFile::getCreateTime(DateTimeFields&)
20007b34 g     O .bss	00000004 usb_audio_overrun_count
0000d868 g     F .text.itcm	0000000c __malloc_unlock
000005b8  w    F .text.itcm	000000b0 SDFile::openNextFile(unsigned char)
200065e8 g     O .bss	00000004 FsVolume::m_cwv
00005fd8 g     F .text.itcm	000000f8 FatFile::open(FatFile*, char const*, int)
200058c8 g     O .bss	00000004 SerNum
00007ab8  w    F .text.itcm	00000004 SharedSpiCard::errorData() const
60001e60 g     F .text.code	00000054 analog_init
00001850 g     F .text.itcm	00000054 storeBegin()
0000deec g     F .text.itcm	0000004a _vdprintf_r
00005d48 g     F .text.itcm	00000020 FatFile::getCreateDateTime(unsigned short*, unsigned short*)
00008078 g     F .text.itcm	00000076 SharedSpiCard::readOCR(unsigned long*)
20001450 g     O .data	00000004 F_CPU_ACTUAL
20000ae0  w    O .data	0000005c vtable for SDFile
200064c4 g     O .bss	00000004 AudioInputUSB::ready_right
0000e018 g     F .text.itcm	000000f8 memmove
00000190 g     F .text.itcm	0000000a getTime()
00009c20 g     F .text.itcm	00000098 SdioCard::stopTransmission(bool)
0000e8bc g     F .text.itcm	0000004c _Balloc
0001373c g       .ARM.exidx	00000000 __exidx_end
200073c8 g     O .bss	00000004 feedback_accumulator
00006d44 g     F .text.itcm	0000004a FatPartition::freeChain(unsigned long)
20007b79 g     O .bss	00000001 EventResponder::runningFromYield
0000cda0 g     F .text.itcm	0000001c AudioOutputUSB::begin()
0000a0c4 g     F .text.itcm	00000016 SdSpiArduinoDriver::receive()
0000bc44 g     F .text.itcm	00000060 tempmonGetTemp
00005a64 g     F .text.itcm	000000e4 FatFile::getName7(char*, unsigned int)
0000d0a8 g     F .text.itcm	00000050 Print::write(unsigned char const*, unsigned int)
20001480 g     O .data	00000004 __atexit_recursive_mutex
0000e37c g     F .text.itcm	0000000c __errno
00000698  w    F .text.itcm	00000026 SDFile::isDirectory()
00004fac g     F .text.itcm	00000176 ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
000008d4  w    F .text.itcm	00000044 File::write(unsigned char const*, unsigned int)
20003220 g     O .bss	00000020 tx_transfer
60001000 g     O .text.headers	00000020 ImageVectorTable
00002730  w    F .text.itcm	0000002c SPIClass::SPIClass(unsigned int, unsigned int)
00000a30  w    F .text.itcm	000000a8 File::~File()
20006528 g     O .bss	00000004 EventResponder::firstInterrupt
0000b86c g     F .text.itcm	00000004 usb_transfer_status
20007694 g     O .bss	00000014 patchCord2
0000bbbc g     F .text.itcm	00000084 sm_set_pool
0000343c g     F .text.itcm	0000004c ExFatFormatter::writeUpcaseUnicode(unsigned short)
0000cae0 g     F .text.itcm	0000011c AudioOutputUSB::update()
20006908 g     O .bss	00000004 __stdio_exit_handler
000077a4 g     F .text.itcm	00000084 FsBaseFile::FsBaseFile(FsBaseFile const&)
000049cc g     F .text.itcm	00000018 ExFatPartition::rootLength()
200065b0 g     O .bss	00000008 AudioOutputSPDIF3::dma
000002f8  w    F .text.itcm	00000054 SDFile::setCreateTime(DateTimeFields const&)
0000c45c  w    F .text.itcm	00000008 usb_serial_class::write(unsigned char const*, unsigned int)
000136c4 g     F .text.itcm	0000002c _fstat_r
20000ebc g     O .data	00000370 digital_pin_to_info_PGM
200073b4 g     O .bss	00000004 errno
0000a0dc g     F .text.itcm	00000024 SdSpiArduinoDriver::receive(unsigned char*, unsigned int)
0000472c g     F .text.itcm	00000042 ExFatPartition::fatGet(unsigned long, unsigned long*)
60001fdc g     O .text.progmem	00000050 TwoWire::i2c3_hardware
00013738 g       .text.itcm	00000000 _etext
00002654 g     F .text.itcm	000000dc _spi_dma_rxISR0()
000075e4 g     F .text.itcm	000000b0 FatFile::parsePathName(char const*, FatLfn_t*, char const**)
20001ec0 g       .bss	00000000 _sbss
000055b4 g     F .text.itcm	0000005c FatFormatter::writeMbr()
0000a164 g     F .text.itcm	00000006 sdCsInit(unsigned char)
00002f08 g     F .text.itcm	00000114 SDClass::mediaPresent()
00008ba4 g     F .text.itcm	0000000c SdioCard::errorData() const
00009f3c g     F .text.itcm	000000f4 SdioCard::writeSector(unsigned long, unsigned char const*)
00003538 g     F .text.itcm	0000052c ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)
0000bcf8 g     F .text.itcm	00000024 digitalRead
60002378 g       *ABS*	00000000 _stextload
000018f4 g     F .text.itcm	00000120 loop
0000c788 g     F .text.itcm	00000018 AudioStream::receiveReadOnly(unsigned int)
0000bd8c g     F .text.itcm	0000007a flexpwm_init
0000d06c g     F .text.itcm	0000003c usb_audio_set_feature
0000c084 g     F .text.itcm	000000a4 usb_midi_flush_output
20007b62 g     O .bss	00000002 haveSD
0000b660 g     F .text.itcm	00000064 usb_config_rx
00003c70 g     F .text.itcm	000000a0 ExFatFile::parsePathName(char const*, ExName_t*, char const**)
200076a8 g     O .bss	00000014 patchCord3
00009a50 g     F .text.itcm	000000fc SdioCard::readData(unsigned char*)
20006524 g     O .bss	00000004 EventResponder::lastInterrupt
00007828 g     F .text.itcm	0000002e FsBaseFile::close()
00002998 g     F .text.itcm	00000048 SPIClass::end()
0000a170 g     F .text.itcm	00000134 memcpy
00000474  w    F .text.itcm	00000060 File::available()
00007afc g     F .text.itcm	0000008c SharedSpiCard::writeStop()
20001ec0 g     O .data	00000000 .hidden __TMC_END__
200073e0 g     O .bss	00000080 fileName
000047b0 g     F .text.itcm	000000be ExFatPartition::freeChain(unsigned long)
00006318 g     F .text.itcm	00000028 FatFile::peek()
0000f050 g     F .text.itcm	00001b44 _svfprintf_r
20007b7d  w    O .bss	00000001 SDFile::name()::zeroterm
20007b08 g     O .bss	00000004 systick_millis_count
00004dd4 g     F .text.itcm	000000a2 ExFatFile::rename(ExFatFile*, char const*)
000002bc  w    F .text.itcm	0000003c SDFile::truncate(unsigned long long)
20006510 g     O .bss	00000004 AudioOutputUSB::left_1st
20007b90 g     O .bss	00000001 usb_configuration
00007aac  w    F .text.itcm	00000006 SdCardInterface::status()
60000000 g     O .text.headers	00000200 FlexSPI_NOR_Config
0000bb70 g     F .text.itcm	0000004c sm_align_pool
00009cb8 g     F .text.itcm	00000030 SdioCard::syncDevice()
00008dd0 g     F .text.itcm	000000b4 SdioCard::writeData(unsigned char const*)
00001188 g     F .text.itcm	00000080 makeHeader(char*)
00000834  w    F .text.itcm	0000004c StreamFile<FsBaseFile, unsigned long long>::available()
00006340 g     F .text.itcm	00000044 FatFile::readDirCache(bool)
00008164 g     F .text.itcm	00000098 SharedSpiCard::sectorCount()
20006430 g     O .bss	00000070 AudioStream::memory_pool_available_mask
600020a0  w    O .text.progmem	00000018 usb_string_manufacturer_name
0000d2dc g     F .text.itcm	00000010 malloc
20001454 g     O .data	00000004 FilePrefix
60001f8c g     O .text.progmem	00000050 TwoWire::i2c1_hardware
00002e24 g     F .text.itcm	000000e2 SDClass::format(int, char, Print&)
20000ab0  w    O .data	00000024 vtable for FsFile
0000bb2c  w    F .text.itcm	0000000a _fstat
000022dc  w    F .text.itcm	0000001e TwoWire::read()
00010e60 g     F .text.itcm	00000040 __assert_func
00002500  w    F .text.itcm	00000016 EventResponder::triggerEvent(int, void*)
20007b5c g     O .bss	00000002 AudioOutputUSB::offset_1st
200003a8 g     O .data	000000c8 __mprec_tens
60001648 g     F .text.code	000000e8 usb_init
20007b58 g     O .bss	00000002 AudioStream::memory_pool_first_mask
20205260 g     O .bss.dma	00000004 usb_audio_sync_feedback
00007ab4  w    F .text.itcm	00000004 SharedSpiCard::errorCode() const
000009a0  w    F .text.itcm	0000008e SDFile::seek(unsigned long long, int)
200067cc g     O .bss	00000004 __malloc_top_pad
20005828 g     O .bss	00000050 SPI1
20007b0c g     O .bss	00000004 systick_safe_read
aaaaaabf g       *ABS*	00000000 _flexram_bank_config
00005124 g     F .text.itcm	000000e4 ExFatFile::truncate()
20001488 g     O .data	00000000 .hidden __dso_handle
00010de0 g     F .text.itcm	00000008 _localeconv_r
0000a06c g     F .text.itcm	0000004e SdSpiArduinoDriver::deactivate()
00012f3c g     F .text.itcm	000002f4 __sfvwrite_r
0000ea60 g     F .text.itcm	0000005c __i2b
20000000 g       .data	00000000 _sdata
0000572c g     F .text.itcm	000001c4 FatFormatter::makeFat32()
60002214 g     O .text.progmem	00000155 usb_config_descriptor_480
0000a0bc g     F .text.itcm	00000006 SdSpiArduinoDriver::end()
00005c08 g     F .text.itcm	00000034 FatFile::addCluster()
0000e32c g     F .text.itcm	00000024 _sbrk_r
00008c64 g     F .text.itcm	0000001c SdioCard::type() const
60001784 g     F .text.code	00000002 startup_default_early_hook
60001428 g     F .text.code	00000220 ResetHandler
0000a89c g     F .text.itcm	00000020 usb_serial_getchar
0000026c  w    F .text.itcm	00000050 SDFile::name()
20007b3c g     O .bss	00000008 usb_cdc_line_coding
0000bca4 g     F .text.itcm	00000054 digitalWrite
2000652c g     O .bss	00000004 EventResponder::lastYield
00003c48 g     F .text.itcm	00000028 ExFatFile::openRoot(ExFatVolume*)
0000e300 g     F .text.itcm	0000002c _read_r
0000bfc0 g     F .text.itcm	000000c4 usb_midi_configure
000006d8  w    F .text.itcm	00000038 StreamFile<FsBaseFile, unsigned long long>::read()
00007ac8  w    F .text.itcm	00000002 DedicatedSpiCard::~DedicatedSpiCard()
000033cc g     F .text.itcm	0000002e ExFatFormatter::syncUpcase()
00000794  w    F .text.itcm	00000054 SDFile::setModifyTime(DateTimeFields const&)
00010b94 g     F .text.itcm	000000c6 _fclose_r
00008bb0 g     F .text.itcm	00000024 SdioCard::readCID(cid_t*)
200073b8 g     O .bss	00000010 extmem_smalloc_pool
200067c4 g     O .bss	00000004 __malloc_max_sbrked_mem
00008640 g     F .text.itcm	000000b6 DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)
20007b78 g     O .bss	00000001 AudioOutputUSB::update_responsibility
00000580  w    F .text.itcm	0000001a SDFile::position()
0000bd1c g     F .text.itcm	00000070 pinMode
200064c0 g     O .bss	00000004 AudioInputUSB::ready_left
200064e0 g     O .bss	00000008 AudioInputTDM2::dma
20005b4c g     O .bss	00000140 Wire2
60017c00 g     O .text.csf	00000c00 hab_csf
000004fc  w    F .text.itcm	0000002c File::peek()
00006d90 g     F .text.itcm	000000a0 FatPartition::freeClusterCount()
20280000 g       .text.csf	00000000 _heap_end
00002ab0  w    F .text.itcm	000000c8 SDClass::open(char const*, unsigned char)
00013734 g       .ARM.exidx	00000000 __exidx_start
70000000 g       .bss.extram	00000000 _extram_end
00000260  w    F .text.itcm	0000000c DMAChannel::~DMAChannel()
0000bb38  w    F .text.itcm	00000004 _isatty
20006520 g     O .bss	00000004 EventResponder::firstYield
20001448 g     O .data	00000004 DirPrefix
00000760  w    F .text.itcm	00000034 StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)
0000d874 g     F .text.itcm	000003d8 _realloc_r
000006c0  w    F .text.itcm	00000018 SDFile::read(void*, unsigned int)
0000e388 g     F .text.itcm	00000048 __libc_init_array
0000034c  w    F .text.itcm	00000046 SDFile::rewindDirectory()
000022d0  w    F .text.itcm	0000000c TwoWire::available()
00004484 g     F .text.itcm	0000000e ExFatFile::open(ExFatVolume*, char const*, int)
00002a2c g     F .text.itcm	00000084 SDClass::dateTime(unsigned short*, unsigned short*)
00004d24 g     F .text.itcm	000000ae ExFatFile::addDirCluster()
0000d008 g     F .text.itcm	00000064 usb_audio_get_feature
000133a8 g     F .text.itcm	00000066 _fputwc_r
00002730  w    F .text.itcm	0000002c SPIClass::SPIClass(unsigned int, unsigned int)
20000380 g     O .data	00000028 __mprec_bigtens
0000bb48  w    F .text.itcm	00000004 abort
0000c444  w    F .text.itcm	00000004 usb_serial_class::clear()
0000baec g     F .text.itcm	00000034 _sbrk
60015ab4 g       *ABS*	00000000 _sdataload
00000084 g     F .text.itcm	0000010c I2S_32::isr32()
0000edc8 g     F .text.itcm	00000042 __mcmp
20000b60 g     O .data	00000030 vtable for SDClass
20006508 g     O .bss	00000008 AudioOutputTDM::dma
20001484 g     O .data	00000004 __brkval
20007b8f g     O .bss	00000001 usb_cdc_line_rtsdtr
60001eb4 g     F .text.code	00000000 _init
0000a600 g     F .text.itcm	00000002 usb_serial_reset
00005cb4 g     F .text.itcm	0000001e FatFile::cacheDirEntry(unsigned char)
20000844 g     O .data	00000070 SPIClass::spiclass_lpspi1_hardware
20007b8c g     O .bss	00000001 usb_audio_sync_nbytes
60001d98 g     F .text.code	000000c8 AudioStream::initialize_memory(audio_block_struct*, unsigned int)
00002c30  w    F .text.itcm	00000054 SDClass::remove(char const*)
00000238  w    F .text.itcm	00000028 SDFile::close()
00000918  w    F .text.itcm	00000040 SDFile::~SDFile()
600020bc g     O .text.progmem	00000155 usb_config_descriptor_12
20000b90 g     O .data	00000024 vtable for TwoWire
0000a044 g     F .text.itcm	00000028 SdSpiArduinoDriver::begin(SdSpiConfig)
2000690c g     O .bss	00000018 acq
20007bc0 g       .bss	00000000 _ebss
0000942c g     F .text.itcm	00000088 SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)
20007664 g     O .bss	00000004 hour_
00000724  w    F .text.itcm	00000014 StreamFile<FsBaseFile, unsigned long long>::flush()
0000e9c0 g     F .text.itcm	00000040 __hi0bits
00003bb0 g     F .text.itcm	0000003c ExFatFile::dirCache(unsigned char, unsigned char)
000024a4 g     F .text.itcm	0000000c lpi2c3_isr()
0000301c g     F .text.itcm	000000d8 SDClass::begin(unsigned char)
00004e78 g     F .text.itcm	0000005e ExFatFile::mkdir(ExFatFile*, ExName_t*)
20205400 g       .bss.dma	00000000 _heap_start
20006794 g     O .bss	00000001 __lock___malloc_recursive_mutex
20007b14 g     O .bss	00000020 usb1
00002a28  w    F .text.itcm	00000002 SDClass::~SDClass()
6000202c g     O .text.progmem	00000050 TwoWire::i2c4_hardware
00000260  w    F .text.itcm	0000000c DMAChannel::~DMAChannel()
200067d0 g     O .bss	00000138 __sf
200069a4 g     O .bss	00000a00 diskBuffer
20006518 g     O .bss	00000004 AudioOutputUSB::right_1st
00008550  w    F .text.itcm	00000076 SharedSpiCard::readCID(cid_t*)
00007d1c g     F .text.itcm	000000ec SharedSpiCard::cardCommand(unsigned char, unsigned long)
00000a30  w    F .text.itcm	000000a8 File::~File()
00000003 g       *ABS*	00000000 _itcm_block_count
20001f00 g     O .bss	00000020 endpoint0_transfer_data
000059a4 g     F .text.itcm	0000002a FatFile::getLfnChar(DirLfn_t*, unsigned char)
00003278 g     F .text.itcm	0000004e FsCache::prepare(unsigned long, unsigned char)
0000d148 g     F .text.itcm	00000004 operator delete(void*, unsigned int)
0000be08 g     F .text.itcm	000000f4 pwm_init
0000cbfc g     F .text.itcm	00000150 usb_audio_receive_callback
200073cc g     O .bss	00000014 file
00002380  w    F .text.itcm	0000006c TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)
00000c84 g     F .text.itcm	000000d0 I2S_32::begin()
60018800 g       .text.csf	00000000 __text_csf_end
60001c0c g     F .text.code	0000005c usb_pll_start
0000ec18 g     F .text.itcm	000000c0 __pow5mult
00006570 g     F .text.itcm	00000090 FatFile::rmdir()
200009dc g     O .data	0000000c vtable for AudioRecordQueue
000024b0 g     F .text.itcm	0000000c lpi2c4_isr()
00006cc4 g     F .text.itcm	00000080 FatPartition::allocateCluster(unsigned long, unsigned long*)
00002380  w    F .text.itcm	0000006c TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)
00008a78  w    F .text.itcm	00000002 SdioCard::end()
00002cc0  w    F .text.itcm	00000036 SDClass::exists(char const*)
20007b10 g     O .bss	00000004 tx_
200064a0 g     O .bss	00000004 AudioStream::unused
20001ee0 g     O .bss	00000020 endpoint0_transfer_ack
20007b44 g     O .bss	00000004 usb_cdc_line_rtsdtr_millis
0000b828 g     F .text.itcm	00000028 usb_transmit
0000c5e0 g     F .text.itcm	00000064 software_isr()
0000c33c g     F .text.itcm	00000020 systick_isr
00003ac8 g     F .text.itcm	00000082 ExFatFile::getName7(char*, unsigned int)
0000e3dc g     F .text.itcm	00000002 __retarget_lock_release_recursive
2000642c g     O .bss	00000004 AudioStream::first_update
20001458 g     O .data	00000010 Serial
20007b52 g     O .bss	00000002 AudioStream::memory_used_max
0000c974 g     F .text.itcm	00000034 AudioConnection::~AudioConnection()
0000c464  w    F .text.itcm	00000006 usb_serial_class::write(unsigned char)
000078f8 g     F .text.itcm	00000072 FsBaseFile::openNext(FsBaseFile*, int)
60001784  w    F .text.code	00000002 startup_early_hook
20007b8b g     O .bss	00000001 usb_audio_receive_setting
000049e4 g     F .text.itcm	00000092 ExFatFile::addCluster()
20006424 g     O .bss	00000004 FsDateTime::callback2
20000a84  w    O .data	0000002c vtable for File
00007c08 g     F .text.itcm	0000008c SharedSpiCard::readData(unsigned char*, unsigned int)
00002cf8  w    F .text.itcm	000000f0 SDClass::usedSize()
0000a7d0 g     F .text.itcm	00000044 usb_serial_peekchar
0000ddc0 g     F .text.itcm	0000000c __sfp_lock_acquire
0000e3e0 g     F .text.itcm	00000000 memchr
00006c5c g     F .text.itcm	00000068 FatPartition::fatPut(unsigned long, unsigned long)
0000a9e4 g     F .text.itcm	000002f0 set_arm_clock
20007b04 g     O .bss	00000004 systick_cycle_count
20001a30 g     O .data	00000016 usb_string_serial_number_default
0000e684 g     F .text.itcm	0000020c _free_r
00008334 g     F .text.itcm	00000118 SharedSpiCard::erase(unsigned long, unsigned long)
00008798 g     F .text.itcm	00000066 SharedSpiCard::writeData(unsigned char, unsigned char const*)
000091e0 g     F .text.itcm	000000b8 SdioCard::readStop()
00007abc  w    F .text.itcm	00000004 SharedSpiCard::type() const
0000e2a4 g     F .text.itcm	0000000c __locale_mb_cur_max
00011d78 g     F .text.itcm	00000016 _wcsrtombs_r
20006600 g     O .bss	00000190 __atexit0
0000c454  w    F .text.itcm	00000004 usb_serial_class::flush()
0000844c g     F .text.itcm	00000080 SharedSpiCard::readSCR(scr_t*)
00003488 g     F .text.itcm	000000b0 ExFatFormatter::writeUpcase(unsigned long)
20001a00 g     O .data	00000004 __malloc_sbrk_base
0000c44c  w    F .text.itcm	00000004 usb_serial_class::read()
20006598 g     O .bss	00000008 AudioOutputI2SOct::dma
20007b5e g     O .bss	00000002 I2S_32::block_offset
00007694 g     F .text.itcm	00000110 FatFile::remove()
0000bb3c  w    F .text.itcm	00000006 _lseek
0000bb44  w    F .text.itcm	00000004 __cxa_pure_virtual
0000ecd8 g     F .text.itcm	000000f0 __lshift
00005ef4 g     F .text.itcm	000000e2 FatFile::mkdir(FatFile*, char const*, bool)
0000b7f8 g     F .text.itcm	00000030 usb_prepare_transfer
00007ac0  w    F .text.itcm	00000004 DedicatedSpiCard::hasDedicatedSpi()
0000b96c g     F .text.itcm	00000180 unused_interrupt_vector
200064c8 g     O .bss	00000004 AudioInputUSB::incoming_left
00011db8 g     F .text.itcm	00000100 __ssprint_r
60001c68 g     F .text.code	00000130 tempmon_init
20007b48 g     O .bss	00000004 usb_timer0_callback
00007014 g     F .text.itcm	0000011c FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)
0000df54 g     F .text.itcm	00000062 _vasnprintf_r
0000d140  w    F .text.itcm	00000002 serialEvent()
200064f8 g     O .bss	00000010 AudioOutputPWM::dma
0000e55c g     F .text.itcm	00000088 __register_exitproc
00004390 g     F .text.itcm	000000f4 ExFatFile::open(ExFatFile*, char const*, int)
0000c7a0 g     F .text.itcm	00000046 AudioStream::receiveWritable(unsigned int)
0000e1b4 g     F .text.itcm	0000008a strncmp
00006f50 g     F .text.itcm	000000c4 FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)
0000796c g     F .text.itcm	00000114 FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)
00004ed8 g     F .text.itcm	000000d2 ExFatFile::mkdir(ExFatFile*, char const*, bool)
00005610 g     F .text.itcm	0000011c FatFormatter::makeFat16()
0000c8b8 g     F .text.itcm	00000028 AudioConnection::AudioConnection(AudioStream&, unsigned char, AudioStream&, unsigned char)
0000a82c g     F .text.itcm	00000070 usb_serial_flush_input
00004870 g     F .text.itcm	00000070 ExFatPartition::freeClusterCount()
20000ad4 g     O .data	0000000c vtable for I2S_32
0000eabc g     F .text.itcm	0000015c __multiply
0000a8bc g     F .text.itcm	0000002c usb_serial_putchar
00000025 g       *ABS*	00000000 _teensy_model_identifier
00007e08 g     F .text.itcm	000001f8 SharedSpiCard::begin(SdSpiConfig)
20006550 g     O .bss	00000008 AudioOutputI2S2::dma
0000e240 g     F .text.itcm	00000064 strncpy
2000679c g     O .bss	00000028 __malloc_current_mallinfo
200064d0 g     O .bss	00000008 AudioInputI2S2::dma
20000924 g     O .data	00000070 SPIClass::spiclass_lpspi4_hardware
0000ef60 g     F .text.itcm	000000d4 __d2b
00008800 g     F .text.itcm	00000068 SharedSpiCard::writeData(unsigned char const*)
20006530 g     O .bss	00000020 HardwareSerial::s_serials_with_serial_events
00008a70  w    F .text.itcm	00000004 SdCardInterface::isDedicatedSpi()
60001730 g     F .text.code	00000054 _reboot_Teensyduino_
0000d208 g     F .text.itcm	000000c8 IntervalTimer::beginCycles(void (*)(), unsigned long)
00008c54  w    F .text.itcm	0000000e SdioCard::~SdioCard()
0000c8b8 g     F .text.itcm	00000028 AudioConnection::AudioConnection(AudioStream&, unsigned char, AudioStream&, unsigned char)
00000b88 g     F .text.itcm	000000fc I2S_32::config_i2s()
60001788 g     F .text.code	00000002 startup_default_middle_hook
0000896c g     F .text.itcm	000000d8 DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)
000080f0 g     F .text.itcm	00000074 SharedSpiCard::readRegister(unsigned char, void*)
00000d54 g     F .text.itcm	000002e8 AudioCompress::compress(void*)
00009044 g     F .text.itcm	000000d4 SdioCard::writeStart(unsigned long)
0000af20 g     F .text.itcm	00000740 usb_isr
0000dc4c g     F .text.itcm	0000000c __cxa_atexit
00003d10 g     F .text.itcm	0000019e ExFatFile::read(void*, unsigned int)
0000c9a8 g     F .text.itcm	00000044 AudioStream::update_setup()
0000e2b0 g     F .text.itcm	00000024 _close_r
00007c94 g     F .text.itcm	0000006e SharedSpiCard::readStop()
00000680  w    F .text.itcm	00000018 SDFile::peek()
00003220 g     F .text.itcm	00000056 FsCache::sync()
200065c0 g     O .bss	00000008 AudioOutputPT8211_2::dma
200057d8 g     O .bss	00000050 SPI
0000dfb8 g     F .text.itcm	00000060 memcmp
200065d4 g     O .bss	00000004 I2S_32::block_right
20000a5c  w    O .data	00000028 vtable for usb_serial_class
0000a100 g     F .text.itcm	00000012 SdSpiArduinoDriver::send(unsigned char)
0000e3d4 g     F .text.itcm	00000002 __retarget_lock_close_recursive
0000a16c g     F .text.itcm	00000004 sdCsWrite(unsigned char, bool)
20007b00 g     O .bss	00000004 scale_cpu_cycles_to_microseconds
20005878 g     O .bss	00000050 SPI2
00013230 g     F .text.itcm	000000cc __swsetup_r
00004b2c g     F .text.itcm	0000005e ExFatFile::rmdir()
20006568 g     O .bss	00000008 AudioInputI2SHex::dma
000081fc g     F .text.itcm	00000068 SharedSpiCard::readStart(unsigned long)
200015f8 g     O .data	00000408 __malloc_av_
200065fc g     O .bss	00000004 __atexit
00000710  w    F .text.itcm	00000014 SDFile::flush()
0000de60 g     F .text.itcm	00000022 __sread
200030e0 g     O .bss	00000020 rx_transfer
0000a950 g     F .text.itcm	00000094 usb_serial_flush_output
200064a8 g     O .bss	00000008 AudioInputI2S::dma
0000d85c g     F .text.itcm	0000000c __malloc_lock
00003394 g     F .text.itcm	00000018 FsDateTime::setCallback(void (*)(unsigned short*, unsigned short*))
200009d0 g     O .data	0000000c vtable for AudioOutputUSB
20001c00 g     O .data	000002c0 _VectorsRam
2000772c g     O .bss	00000368 queue1
0000a114 g     F .text.itcm	0000004e SdSpiArduinoDriver::send(unsigned char const*, unsigned int)
00005488 g     F .text.itcm	000000d4 FatFormatter::initFatDir(unsigned char, unsigned long)
00010d8c g     F .text.itcm	00000054 _fflush_r
00001f14 g     F .text.itcm	0000003e AudioRecordQueue::update()
00010ea0 g     F .text.itcm	00000078 _calloc_r
0000275c g     F .text.itcm	00000234 SPIClass::begin()
20007460 g     O .bss	00000004 getTimePtr
0000734c g     F .text.itcm	00000298 FatFile::open(FatFile*, FatLfn_t*, int)
20001a4b g     O .data	00000001 yield_active_check_flags
00004cc4 g     F .text.itcm	0000005e ExFatFile::sync()
0000e3d8 g     F .text.itcm	00000002 __retarget_lock_acquire_recursive
20007b91 g     O .bss	00000001 usb_high_speed
00006384 g     F .text.itcm	000001ea FatFile::rename(FatFile*, char const*)
00008f7c g     F .text.itcm	0000007c SdioCard::isBusy()
20006588 g     O .bss	00000008 AudioInputI2SQuad::dma
0000e110 g     F .text.itcm	000000a4 memset
0000c5c4 g     F .text.itcm	00000010 main
200064e8 g     O .bss	00000008 AudioOutputI2S::dma
200067c8 g     O .bss	00000004 __malloc_max_total_mem
000044b8 g     F .text.itcm	000000c0 ExFatPartition::bitmapFind(unsigned long, unsigned long)
0000e3d0 g     F .text.itcm	00000002 __retarget_lock_init_recursive
20205100 g     O .bss.dma	00000155 usb_descriptor_buffer
00008868 g     F .text.itcm	000000e8 SharedSpiCard::writeSector(unsigned long, unsigned char const*)
200065d0 g     O .bss	00000004 I2S_32::block_left
000021f0 g     F .text.itcm	00000094 now()
00005208 g     F .text.itcm	00000280 ExFatFile::write(void const*, unsigned int)
00003180 g     F .text.itcm	000000a0 lbaToMbrChs(unsigned char*, unsigned long, unsigned long)
00005cf4 g     F .text.itcm	00000052 FatFile::dirEntry(DirFat_t*)
000007e8  w    F .text.itcm	0000004c SDFile::available()
0000dee4 g     F .text.itcm	00000008 __sclose
0000c128 g     F .text.itcm	00000058 usb_init_serialnumber
60001f8c g       .text.code	00000000 __init_array_end
00011040 g     F .text.itcm	00000cec _dtoa_r
0000d2fc g     F .text.itcm	00000560 _malloc_r
00008264 g     F .text.itcm	00000068 DedicatedSpiCard::readSector(unsigned long, unsigned char*)
20007b7a g     O .bss	00000001 HardwareSerial::s_count_serials_with_serial_events
0000f034 g     F .text.itcm	0000001a __ascii_wctomb
20007b8d g     O .bss	00000001 usb_audio_sync_rshift
00000070  w    F .text.itcm	00000012 SDFile::isOpen()
000077a4 g     F .text.itcm	00000084 FsBaseFile::FsBaseFile(FsBaseFile const&)
200065ec g     O .bss	00000004 FatVolume::m_cwv
20006570 g     O .bss	00000008 AudioInputI2SOct::dma
20000c28  w    O .data	00000010 SPIClass::beginTransaction(SPISettings)::clk_sel
0000c270 g     F .text.itcm	00000084 EventResponder::triggerEventNotImmediate()
00002990 g     F .text.itcm	00000008 SPIClass::transfer(void const*, void*, unsigned int)
0000b918 g     F .text.itcm	00000054 micros
00004b8c g     F .text.itcm	00000138 ExFatFile::syncDir()
000084cc g     F .text.itcm	00000082 SharedSpiCard::readSDS(sds_t*)
0000e5e4 g     F .text.itcm	000000a0 _malloc_trim_r
00013410 g     F .text.itcm	00000106 _wcsnrtombs_l
600020b8 g     O .text.progmem	00000004 string0
0000a8e8 g     F .text.itcm	00000018 usb_serial_write
6000178c  w    F .text.code	00000002 startup_late_hook
00008950 g     F .text.itcm	0000001c DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)
0000c450  w    F .text.itcm	00000004 usb_serial_class::available()
60002376 g     O .text.progmem	00000001 _serialEvent_default
00006868 g     F .text.itcm	0000000c FatFile::sync()
000058f0 g     F .text.itcm	000000b4 FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)
00002c84  w    F .text.itcm	0000003a SDClass::mkdir(char const*)
20000000 g     O .data	00000380 endpoint_queue_head
20006924 g     O .bss	00000080 dirName
6000207c  w    O .text.progmem	00000024 usb_string_product_name
0000b870 g     F .text.itcm	000000a8 delay
20007b60 g     O .bss	00000002 dma_channel_allocated_mask
00003c24 g     F .text.itcm	00000022 ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)
00013730 g     F .fini	00000000 _fini
200065e4 g     O .bss	00000004 I2S_32::DC_right
00002318 g     F .text.itcm	0000002a TwoWire::write(unsigned char)
00007b88 g     F .text.itcm	0000007e SharedSpiCard::isBusy()
200065a0 g     O .bss	00000008 AudioOutputPT8211::dma
60001020 g     O .text.headers	0000000c BootData
200064f0 g     O .bss	00000008 AudioOutputMQS::dma
20007b38 g     O .bss	00000004 usb_audio_underrun_count
00004494 g     F .text.itcm	00000024 ExFatFile::openNext(ExFatFile*, int)
0000d124 g     F .text.itcm	0000001c Print::printf(char const*, ...)
0000de20 g     F .text.itcm	00000040 sprintf
00001f6c g     F .text.itcm	00000048 AudioRecordQueue::clear()
00005cd4 g     F .text.itcm	0000001e FatFile::close()
0000bc40 g     F .text.itcm	00000004 Panic_Temp_isr
00000958  w    F .text.itcm	00000048 SDFile::~SDFile()
00005d88 g     F .text.itcm	0000016a FatFile::mkdir(FatFile*, FatLfn_t*)
00013518 g     F .text.itcm	00000024 _wcsnrtombs_r
00008c50  w    F .text.itcm	00000002 SdioCard::~SdioCard()
00000668  w    F .text.itcm	00000018 StreamFile<FsBaseFile, unsigned long long>::peek()
00000880  w    F .text.itcm	00000054 File::write(unsigned char)
0000e350 g     F .text.itcm	0000002c _write_r
0000cf20 g     F .text.itcm	000000e8 usb_audio_configure
0000019c g     F .text.itcm	0000009c I2S_32::update()
20005308 g     O .bss	000004d0 SD
00009ce8 g     F .text.itcm	00000144 SdioCard::erase(unsigned long, unsigned long)
20007b7b g     O .bss	00000001 I2S_32::update_responsibility
0000c6f0 g     F .text.itcm	00000050 AudioStream::release(audio_block_struct*)
20003100 g     O .bss	00000020 sync_transfer
20001a14 g     O .data	00000004 _impure_ptr
20000b3c  w    O .data	00000024 vtable for Stream
00003eb0 g     F .text.itcm	0000002c ExFatFile::peek()
00010c5c g     F .text.itcm	00000130 __sflush_r
20000994  w    O .data	00000024 vtable for StreamFile<FsBaseFile, unsigned long long>
20006580 g     O .bss	00000008 AudioOutputSPDIF::dma
200058cc g     O .bss	00000140 Wire
00000738  w    F .text.itcm	00000014 SDFile::write(void const*, unsigned int)
0000c740 g     F .text.itcm	00000046 AudioStream::transmit(audio_block_struct*, unsigned char)
00007a80 g     F .text.itcm	00000028 FsVolume::open(char const*, int)
0000ddd8 g     F .text.itcm	00000046 _fwalk_sglue
00008b98 g     F .text.itcm	0000000c SdioCard::errorCode() const
000060d0 g     F .text.itcm	0000000e FatFile::open(FatVolume*, char const*, int)
0000074c  w    F .text.itcm	00000014 StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)
60001f10 g       .text.code	00000000 __preinit_array_end
200064b8 g     O .bss	00000008 AudioInputTDM::dma
000010f8 g     F .text.itcm	00000090 newFileName(char*)
20006558 g     O .bss	00000008 AudioOutputTDM2::dma
00004670 g     F .text.itcm	00000036 ExFatPartition::dirCache(DirPos_t*, unsigned char)
0000e890 g     F .text.itcm	0000002a __ascii_mbtowc
0000c644 g     F .text.itcm	000000ac AudioStream::allocate()
20007464 g     O .bss	00000200 header
00006e30 g     F .text.itcm	00000120 FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)
0000aef4 g     F .text.itcm	0000002c usb_stop_sof_interrupts
000022fc  w    F .text.itcm	00000018 TwoWire::peek()
00002314  w    F .text.itcm	00000002 TwoWire::flush()
000018a4 g     F .text.itcm	00000050 setup
20001298 g     O .data	0000006c usb_descriptor_list
00008ff8 g     F .text.itcm	00000020 SdioCard::status()
00005d68 g     F .text.itcm	00000020 FatFile::getModifyDateTime(unsigned short*, unsigned short*)
0000b728 g     F .text.itcm	00000064 usb_config_rx_iso
0000006c  w    F .text.itcm	00000002 Print::flush()
00001fb4 g     F .text.itcm	0000003a AudioRecordQueue::readBuffer()
20007680 g     O .bss	00000014 patchCord1
200076bc g     O .bss	00000014 patchCord4
00002b78  w    F .text.itcm	00000052 SDClass::rmdir(char const*)
00006170 g     F .text.itcm	000001a8 FatFile::read(void*, unsigned int)
00006138 g     F .text.itcm	00000036 FatFile::openRoot(FatVolume*)
200064a4 g     O .bss	00000004 ExFatVolume::m_cwv
200065e0 g     O .bss	00000004 I2S_32::DC_left
20068000 g       .text.csf	00000000 _estack
00007aa8 g     F .text.itcm	00000004 operator new(unsigned int, unsigned long*)
0000c410 g     F .text.itcm	00000034 DMAChannel::release()
00000528  w    F .text.itcm	00000058 File::read()
00001ff0 g     F .text.itcm	00000016 AudioRecordQueue::freeBuffer()
0000a900 g     F .text.itcm	00000050 usb_serial_write_buffer_free
0000c7e8 g     F .text.itcm	000000d0 AudioConnection::connect()
20001a08 g     O .data	0000000c __sglue
200064b0 g     O .bss	00000008 AudioInputPDM::dma
0000a604 g     F .text.itcm	000000ec usb_serial_configure
00002344 g     F .text.itcm	0000003c TwoWire::write(unsigned char const*, unsigned int)
20007b77 g     O .bss	00000001 AudioInputUSB::receive_flag
00000ad8  w    F .text.itcm	000000b0 File::~File()
0000d114  w    F .text.itcm	0000000e _write
200064d8 g     O .bss	00000008 AudioInputPDM2::dma
20001ec0 g       .data	00000000 _edata
00004770 g     F .text.itcm	00000040 ExFatPartition::fatPut(unsigned long, unsigned long)
20007b7f g     O .bss	00000001 external_psram_size
00008c50  w    F .text.itcm	00000002 SdioCard::~SdioCard()
000048e0 g     F .text.itcm	000000ec ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)
00007ac8  w    F .text.itcm	00000002 DedicatedSpiCard::~DedicatedSpiCard()
000086f8 g     F .text.itcm	000000a0 DedicatedSpiCard::setDedicatedSpi(bool)
00003b4c g     F .text.itcm	00000064 ExFatFile::hashName(ExName_t*)
2000146c g     O .data	0000000c AudioInputUSB::features
00005c3c g     F .text.itcm	00000078 FatFile::addDirCluster()
000132fc g     F .text.itcm	000000aa __fputwc
0000c458  w    F .text.itcm	00000004 usb_serial_class::availableForWrite()
20001a46 g     O .data	00000002 I2S_32::shift
00002498 g     F .text.itcm	0000000c lpi2c1_isr()
0000d14c g     F .text.itcm	00000062 ultoa
00002a28  w    F .text.itcm	00000002 SDClass::~SDClass()
00002284 g     F .text.itcm	00000030 second()
00007858 g     F .text.itcm	000000a0 FsBaseFile::open(FsVolume*, char const*, int)
0000de84 g     F .text.itcm	0000003e __swrite
0000d144 g     F .text.itcm	00000004 operator new(unsigned int)
0000c2f4 g     F .text.itcm	00000044 EventResponder::runFromInterrupt()
20001a04 g     O .data	00000004 __malloc_trim_threshold
0000c8e0 g     F .text.itcm	00000094 AudioConnection::disconnect()
0000c448  w    F .text.itcm	00000004 usb_serial_class::peek()
00008a74  w    F .text.itcm	00000004 SdCardInterface::setDedicatedSpi(bool)
00008000 g     F .text.itcm	00000078 SharedSpiCard::cardCMD6(unsigned long, unsigned char*)
00011d90 g     F .text.itcm	00000028 fiprintf
0000cdbc g     F .text.itcm	00000104 usb_audio_transmit_callback
00011f30 g     F .text.itcm	00000f8c _vfiprintf_r
00001d2c  w    F .text.itcm	00000110 SPIClass::beginTransaction(SPISettings)
0000ee0c g     F .text.itcm	00000154 __mdiff
00008bf8 g     F .text.itcm	00000010 SdioCard::readOCR(unsigned long*)
200008b4 g     O .data	00000070 SPIClass::spiclass_lpspi3_hardware
000046a8 g     F .text.itcm	00000082 ExFatPartition::dirSeek(DirPos_t*, unsigned long)
00002578 g     F .text.itcm	000000dc _spi_dma_rxISR1()
20006590 g     O .bss	00000008 AudioOutputI2SHex::dma
20001328 g     O .data	00000120 _impure_data
00003fc8 g     F .text.itcm	000003c6 ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)
20007b54 g     O .bss	00000002 AudioStream::cpu_cycles_total
0000ddcc g     F .text.itcm	0000000c __sfp_lock_release
000091e0 g     F .text.itcm	000000b8 SdioCard::writeStop()
00003bec g     F .text.itcm	00000014 ExFatFile::close()
20000ce8 g     O .data	00000101 _ctype_
0000bb20  w    F .text.itcm	00000004 _read
60001f10 g       .text.code	00000000 __init_array_start
2000144c g     O .data	00000004 F_BUS_ACTUAL
000033fc g     F .text.itcm	00000040 ExFatFormatter::writeUpcaseByte(unsigned char)
00002bcc  w    F .text.itcm	00000064 SDClass::rename(char const*, char const*)
00008c08 g     F .text.itcm	00000014 SdioCard::readSCR(scr_t*)
0000c5d4  w    F .text.itcm	0000000c AudioStream::update_all()
0001353c g     F .text.itcm	000000d8 __smakebuf_r
00000000 g       .text.itcm	00000000 _stext
0000c35c g     F .text.itcm	000000b4 DMAChannel::begin(bool)
20001478 g     O .data	00000004 IntervalTimer::nvic_priorites
00007adc g     F .text.itcm	0000001e SharedSpiCard::end()
0000e480 g     F .text.itcm	000000dc strlen
000060e0 g     F .text.itcm	00000056 FatFile::openCluster(FatFile*)
00006600 g     F .text.itcm	000000ae FatFile::seekSet(unsigned long)
6000207c g     O .text.progmem	00000024 usb_string_product_name_default
200065b8 g     O .bss	00000008 AudioOutputI2SQuad::dma
0000df38 g     F .text.itcm	0000001c vdprintf
00008c80 g     F .text.itcm	00000060 SdioCard::sectorCount()
00008c1c g     F .text.itcm	00000034 SdioCard::readSDS(sds_t*)
0000679c g     F .text.itcm	000000ca FatFile::openNext(FatFile*, int)
2000651c g     O .bss	00000004 AudioOutputUSB::right_2nd
60001788  w    F .text.code	00000002 startup_middle_hook
20000bb4 g     O .data	00000074 vtable for SdioCard
00005b48 g     F .text.itcm	00000004 FatFile::getName(char*, unsigned int)
60001790 g     F .text.code	000000f8 configure_cache
00008a6c  w    F .text.itcm	00000004 SdCardInterface::hasDedicatedSpi()
0000c46c g     F .text.itcm	00000158 breakTime(unsigned long, DateTimeFields&)
000085c8  w    F .text.itcm	00000076 SharedSpiCard::readCSD(csd_t*)
200065a8 g     O .bss	00000008 AudioOutputSPDIF2::dma
00001060 g     F .text.itcm	00000098 newDirectory(char*)
00009b4c g     F .text.itcm	000000d4 SdioCard::readStart(unsigned long)
0000b78c g     F .text.itcm	0000006c usb_config_tx_iso
20006560 g     O .bss	00000008 AudioInputAnalog::dma
20007b56 g     O .bss	00000002 AudioStream::cpu_cycles_total_max
0000a030 g     F .text.itcm	00000012 SdSpiArduinoDriver::activate()
60001f10 g       .text.code	00000000 __preinit_array_start
0000b850 g     F .text.itcm	0000001c usb_receive
200009b8  w    O .data	0000000c vtable for AudioStream
00004578 g     F .text.itcm	000000aa ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)
0000ea00 g     F .text.itcm	00000060 __lo0bits
00004624 g     F .text.itcm	0000004c ExFatPartition::chainSize(unsigned long)
20001a2c g     O .data	00000004 tempDatai
000066b0 g     F .text.itcm	000000ea FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)
00018800 g       *ABS*	00000000 _flashimagelen
00006874 g     F .text.itcm	000000d8 FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
00007d04 g     F .text.itcm	00000018 SharedSpiCard::syncDevice()
0000d2d0 g     F .text.itcm	0000000a __aeabi_atexit
0000bb4c g     F .text.itcm	00000024 rtc_get
00004a78 g     F .text.itcm	000000b4 ExFatFile::remove()
00010de8 g     F .text.itcm	00000078 frexp
70000000 g       .bss.extram	00000000 _extram_start
0000c338 g     F .text.itcm	00000004 pendablesrvreq_isr
00002de8  w    F .text.itcm	0000003c SDClass::totalSize()
20006578 g     O .bss	00000008 AudioInputSPDIF3::dma
0000c974 g     F .text.itcm	00000034 AudioConnection::~AudioConnection()
00000068  w    F .text.itcm	00000004 Print::availableForWrite()
2000148c g     O .data	0000016c __global_locale
000094b4 g     F .text.itcm	0000059c SdioCard::begin(SdioConfig)
0000103c g     F .text.itcm	00000022 AudioCompress::update()
00002080 g     F .text.itcm	00000170 breakTime(long long, tmElements_t&)
00003c00 g     F .text.itcm	00000022 ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)
0000a6f0 g     F .text.itcm	000000e0 usb_serial_read
20006798 g     O .bss	00000001 __lock___sfp_recursive_mutex
0000b6c4 g     F .text.itcm	00000064 usb_config_tx
0000bb24  w    F .text.itcm	00000006 _close
00006c38 g     F .text.itcm	00000024 FatPartition::fatGet(unsigned long, unsigned long*)
0000d2ec g     F .text.itcm	00000010 free
00003a64 g     F .text.itcm	00000064 ExFatFile::cmpName(DirName_t const*, ExName_t*)
0000e91c g     F .text.itcm	000000a4 __multadd
0000e908 g     F .text.itcm	00000012 _Bfree
0000059c  w    F .text.itcm	0000001a SDFile::size()
000059d0 g     F .text.itcm	00000094 FatFile::getSFN(char*, unsigned int)
00000918  w    F .text.itcm	00000040 SDFile::~SDFile()
20001a30  w    O .data	00000016 usb_string_serial_number
00009e2c g     F .text.itcm	00000110 SdioCard::readSector(unsigned long, unsigned char*)
00008bd4 g     F .text.itcm	00000024 SdioCard::readCSD(csd_t*)



Disassembly of section .text.code:

60001400 <memory_copy>:
}

__attribute__((section(".startup"), optimize("O1")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001400:	cmp	r0, r1
60001402:	beq.n	60001414 <memory_copy+0x14>
	while (dest < dest_end) {
60001404:	cmp	r0, r2
60001406:	bcs.n	60001414 <memory_copy+0x14>
		*dest++ = *src++;
60001408:	ldr.w	r3, [r1], #4
6000140c:	str.w	r3, [r0], #4
	while (dest < dest_end) {
60001410:	cmp	r2, r0
60001412:	bhi.n	60001408 <memory_copy+0x8>
	}
}
60001414:	bx	lr
60001416:	nop

60001418 <memory_clear>:

__attribute__((section(".startup"), optimize("O1")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
60001418:	cmp	r0, r1
6000141a:	bcs.n	60001426 <memory_clear+0xe>
		*dest++ = 0;
6000141c:	movs	r3, #0
6000141e:	str.w	r3, [r0], #4
	while (dest < dest_end) {
60001422:	cmp	r1, r0
60001424:	bhi.n	6000141e <memory_clear+0x6>
	}
}
60001426:	bx	lr

60001428 <ResetHandler>:
{
60001428:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000142c:	ldr	r2, [pc, #416]	; (600015d0 <ResetHandler+0x1a8>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000142e:	mov.w	r1, #11141120	; 0xaa0000
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001432:	ldr	r3, [pc, #416]	; (600015d4 <ResetHandler+0x1ac>)
	IOMUXC_GPR_GPR16 = 0x00200007;
60001434:	ldr	r0, [pc, #416]	; (600015d8 <ResetHandler+0x1b0>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001436:	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001438:	str	r0, [r3, #64]	; 0x40
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
6000143a:	ldr	r2, [pc, #416]	; (600015dc <ResetHandler+0x1b4>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000143c:	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
6000143e:	mov	sp, r2
	__asm__ volatile("dsb":::"memory");
60001440:	dsb	sy
	__asm__ volatile("isb":::"memory");
60001444:	isb	sy
	startup_early_hook(); // must be in FLASHMEM, as ITCM is not yet initialized!
60001448:	bl	60001784 <startup_default_early_hook>
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
6000144c:	movs	r4, #8
6000144e:	ldr	r3, [pc, #400]	; (600015e0 <ResetHandler+0x1b8>)
	memory_copy(&_stext, &_stextload, &_etext);
60001450:	ldr	r2, [pc, #400]	; (600015e4 <ResetHandler+0x1bc>)
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001452:	str.w	r4, [r3, #340]	; 0x154
	memory_copy(&_stext, &_stextload, &_etext);
60001456:	ldr	r1, [pc, #400]	; (600015e8 <ResetHandler+0x1c0>)
60001458:	ldr	r0, [pc, #400]	; (600015ec <ResetHandler+0x1c4>)
6000145a:	bl	60001400 <memory_copy>
	memory_copy(&_sdata, &_sdataload, &_edata);
6000145e:	ldr	r2, [pc, #400]	; (600015f0 <ResetHandler+0x1c8>)
60001460:	ldr	r1, [pc, #400]	; (600015f4 <ResetHandler+0x1cc>)
60001462:	ldr	r0, [pc, #404]	; (600015f8 <ResetHandler+0x1d0>)
60001464:	bl	60001400 <memory_copy>
	memory_clear(&_sbss, &_ebss);
60001468:	ldr	r1, [pc, #400]	; (600015fc <ResetHandler+0x1d4>)
6000146a:	ldr	r0, [pc, #404]	; (60001600 <ResetHandler+0x1d8>)
6000146c:	bl	60001418 <memory_clear>
	SCB_CPACR = 0x00F00000;
60001470:	ldr	r4, [pc, #400]	; (60001604 <ResetHandler+0x1dc>)
60001472:	mov.w	r1, #3758153728	; 0xe000e000
60001476:	mov.w	r0, #15728640	; 0xf00000
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
6000147a:	movs	r3, #0
6000147c:	ldr	r2, [pc, #392]	; (60001608 <ResetHandler+0x1e0>)
	SCB_CPACR = 0x00F00000;
6000147e:	str.w	r0, [r1, #3464]	; 0xd88
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
60001482:	str.w	r2, [r4, r3, lsl #2]
60001486:	adds	r3, #1
60001488:	cmp	r3, #176	; 0xb0
6000148a:	bne.n	60001482 <ResetHandler+0x5a>
6000148c:	ldr	r3, [pc, #380]	; (6000160c <ResetHandler+0x1e4>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
6000148e:	movs	r1, #128	; 0x80
60001490:	ldr	r2, [pc, #380]	; (60001610 <ResetHandler+0x1e8>)
60001492:	strb.w	r1, [r3], #1
60001496:	cmp	r3, r2
60001498:	bne.n	60001492 <ResetHandler+0x6a>
	SCB_VTOR = (uint32_t)_VectorsRam;
6000149a:	mov.w	r5, #3758153728	; 0xe000e000
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
6000149e:	ldr	r6, [pc, #320]	; (600015e0 <ResetHandler+0x1b8>)
600014a0:	mov.w	r9, #2155905152	; 0x80808080
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014a4:	ldr.w	fp, [pc, #404]	; 6000163c <ResetHandler+0x214>
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014a8:	ldr.w	sl, [pc, #404]	; 60001640 <ResetHandler+0x218>
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014ac:	mov.w	r1, #4294967295
	SCB_VTOR = (uint32_t)_VectorsRam;
600014b0:	str.w	r4, [r5, #3336]	; 0xd08
	SYST_CVR = 0;
600014b4:	movs	r7, #0
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014b6:	str.w	r9, [r6, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014ba:	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
600014be:	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014c2:	str.w	sl, [r6, #240]	; 0xf0
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014c6:	ldr.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014ca:	ldr.w	r8, [pc, #376]	; 60001644 <ResetHandler+0x21c>
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014ce:	orr.w	r3, r3, #458752	; 0x70000
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014d2:	ldr	r2, [pc, #256]	; (600015d4 <ResetHandler+0x1ac>)
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014d4:	str.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014d8:	ldr.w	r3, [r8, #28]
600014dc:	bic.w	r3, r3, #127	; 0x7f
600014e0:	orr.w	r3, r3, #64	; 0x40
600014e4:	str.w	r3, [r8, #28]
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
600014e8:	ldr.w	r3, [r8, #36]	; 0x24
600014ec:	bic.w	r3, r3, #127	; 0x7f
600014f0:	orr.w	r3, r3, #64	; 0x40
600014f4:	str.w	r3, [r8, #36]	; 0x24
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014f8:	str	r1, [r2, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
600014fa:	str	r1, [r2, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
600014fc:	str	r1, [r2, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
600014fe:	str	r1, [r2, #116]	; 0x74
	configure_cache();
60001500:	bl	60001790 <configure_cache>
	_VectorsRam[14] = pendablesrvreq_isr;
60001504:	ldr	r3, [pc, #268]	; (60001614 <ResetHandler+0x1ec>)
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001506:	ldr	r1, [pc, #272]	; (60001618 <ResetHandler+0x1f0>)
	_VectorsRam[14] = pendablesrvreq_isr;
60001508:	str	r3, [r4, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
6000150a:	ldr	r3, [pc, #272]	; (6000161c <ResetHandler+0x1f4>)
6000150c:	str	r3, [r4, #60]	; 0x3c
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
6000150e:	movs	r3, #99	; 0x63
60001510:	str	r3, [r5, #20]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001512:	movs	r3, #3
	SYST_CVR = 0;
60001514:	str	r7, [r5, #24]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001516:	str	r3, [r5, #16]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
60001518:	ldr	r3, [pc, #260]	; (60001620 <ResetHandler+0x1f8>)
6000151a:	str.w	r3, [r5, #3360]	; 0xd20
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
6000151e:	ldr.w	r3, [r5, #3580]	; 0xdfc
60001522:	orr.w	r3, r3, #16777216	; 0x1000000
60001526:	str.w	r3, [r5, #3580]	; 0xdfc
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000152a:	ldr	r3, [pc, #248]	; (60001624 <ResetHandler+0x1fc>)
6000152c:	ldr	r2, [r3, #0]
6000152e:	orr.w	r2, r2, #1
60001532:	str	r2, [r3, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001534:	ldr	r3, [r3, #4]
60001536:	str	r3, [r1, #0]
	usb_pll_start();	
60001538:	bl	60001c0c <usb_pll_start>
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
6000153c:	str.w	r9, [r6, #260]	; 0x104
	set_arm_clock(F_CPU);
60001540:	ldr	r0, [pc, #228]	; (60001628 <ResetHandler+0x200>)
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001542:	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
60001546:	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000154a:	str.w	sl, [r6, #240]	; 0xf0
	set_arm_clock(F_CPU);
6000154e:	bl	60001ef0 <__set_arm_clock_veneer>
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001552:	ldr.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
60001556:	ldr	r3, [pc, #212]	; (6000162c <ResetHandler+0x204>)
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
60001558:	ldr	r2, [pc, #212]	; (60001630 <ResetHandler+0x208>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000155a:	orr.w	r1, r1, #12288	; 0x3000
6000155e:	str.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
60001562:	str	r7, [r3, #0]
	PIT_TCTRL0 = 0;
60001564:	str.w	r7, [r3, #264]	; 0x108
	PIT_TCTRL1 = 0;
60001568:	str.w	r7, [r3, #280]	; 0x118
	PIT_TCTRL2 = 0;
6000156c:	str.w	r7, [r3, #296]	; 0x128
	PIT_TCTRL3 = 0;
60001570:	str.w	r7, [r3, #312]	; 0x138
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
60001574:	ldr	r3, [r2, #56]	; 0x38
60001576:	lsls	r3, r3, #31
60001578:	bmi.n	6000158c <ResetHandler+0x164>
		SNVS_LPSRTCMR = 1546300800u >> 17;
6000157a:	movw	r3, #11797	; 0x2e15
		SNVS_LPSRTCLR = 1546300800u << 15;
6000157e:	ldr	r1, [pc, #180]	; (60001634 <ResetHandler+0x20c>)
60001580:	str	r1, [r2, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
60001582:	str	r3, [r2, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
60001584:	ldr	r3, [r2, #56]	; 0x38
60001586:	orr.w	r3, r3, #1
6000158a:	str	r3, [r2, #56]	; 0x38
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
6000158c:	ldr	r2, [pc, #160]	; (60001630 <ResetHandler+0x208>)
6000158e:	ldr	r4, [pc, #168]	; (60001638 <ResetHandler+0x210>)
60001590:	ldr	r3, [r2, #8]
60001592:	orr.w	r3, r3, #65537	; 0x10001
60001596:	str	r3, [r2, #8]
	configure_external_ram();
60001598:	bl	60001888 <configure_external_ram>
	analog_init();
6000159c:	bl	60001e60 <analog_init>
	pwm_init();
600015a0:	bl	60001ec0 <__pwm_init_veneer>
	tempmon_init();
600015a4:	bl	60001c68 <tempmon_init>
	startup_middle_hook();
600015a8:	bl	60001788 <startup_default_middle_hook>
// Returns the number of milliseconds since your program started running.
// This 32 bit number will roll back to zero after about 49.7 days.  For a
// simpler way to build delays or timeouts, consider using elapsedMillis.
static inline uint32_t millis(void)
{
	return systick_millis_count;
600015ac:	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015ae:	cmp	r3, #19
600015b0:	bls.n	600015ac <ResetHandler+0x184>
	usb_init();
600015b2:	bl	60001648 <usb_init>
600015b6:	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_AFTER + TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015b8:	cmp.w	r3, #300	; 0x12c
600015bc:	bcc.n	600015b6 <ResetHandler+0x18e>
	startup_late_hook();
600015be:	bl	6000178c <startup_default_late_hook>
	__libc_init_array();
600015c2:	bl	60001f08 <____libc_init_array_veneer>
	main();
600015c6:	bl	60001ee8 <__main_veneer>
	while (1) asm("WFI");
600015ca:	wfi
600015cc:	b.n	600015ca <ResetHandler+0x1a2>
600015ce:	nop
600015d0:	.word	0xaaaaaabf
600015d4:	.word	0x400ac000
600015d8:	.word	0x00200007
600015dc:	.word	0x20068000
600015e0:	.word	0x400d8000
600015e4:	.word	0x00013738
600015e8:	.word	0x60002378
600015ec:	.word	0x00000000
600015f0:	.word	0x20001ec0
600015f4:	.word	0x60015ab4
600015f8:	.word	0x20000000
600015fc:	.word	0x20007bc0
60001600:	.word	0x20001ec0
60001604:	.word	0x20001c00
60001608:	.word	0x0000b96d
6000160c:	.word	0xe000e400
60001610:	.word	0xe000e4a0
60001614:	.word	0x0000c339
60001618:	.word	0x20007b04
6000161c:	.word	0x0000c33d
60001620:	.word	0x20200000
60001624:	.word	0xe0001000
60001628:	.word	0x016e3600
6000162c:	.word	0x40084000
60001630:	.word	0x400d4000
60001634:	.word	0x56c00000
60001638:	.word	0x20007b08
6000163c:	.word	0x2018101b
60001640:	.word	0x13110d0c
60001644:	.word	0x400fc000

60001648 <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001648:	ldr	r3, [pc, #196]	; (60001710 <usb_init+0xc8>)
6000164a:	movw	r2, #3937	; 0xf61
{
6000164e:	push	{r4, lr}
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001650:	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001654:	movw	r4, #1028	; 0x404
	usb_init_serialnumber();
60001658:	bl	60001ef8 <__usb_init_serialnumber_veneer>
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
6000165c:	ldr	r2, [pc, #180]	; (60001714 <usb_init+0xcc>)
	USB1_BURSTSIZE = 0x0404;
6000165e:	ldr	r1, [pc, #184]	; (60001718 <usb_init+0xd0>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001660:	ldr.w	r3, [r2, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001664:	ldr	r0, [pc, #180]	; (6000171c <usb_init+0xd4>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001666:	orr.w	r3, r3, #3
6000166a:	str.w	r3, [r2, #128]	; 0x80
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
6000166e:	ldr	r3, [pc, #176]	; (60001720 <usb_init+0xd8>)
	USB1_BURSTSIZE = 0x0404;
60001670:	str.w	r4, [r1, #352]	; 0x160
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001674:	ldr	r2, [r0, #0]
60001676:	tst	r2, r3
60001678:	bne.n	60001682 <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
6000167a:	ldr.w	r3, [r1, #424]	; 0x1a8
6000167e:	lsls	r2, r3, #30
60001680:	beq.n	600016ba <usb_init+0x72>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001682:	ldr	r2, [pc, #148]	; (60001718 <usb_init+0xd0>)
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
60001684:	mov.w	r1, #2147483648	; 0x80000000
60001688:	ldr	r3, [pc, #144]	; (6000171c <usb_init+0xd4>)
6000168a:	str	r1, [r3, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
6000168c:	ldr.w	r3, [r2, #320]	; 0x140
60001690:	orr.w	r3, r3, #2
60001694:	str.w	r3, [r2, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
60001698:	ldr.w	r3, [r2, #320]	; 0x140
6000169c:	lsls	r3, r3, #30
6000169e:	bmi.n	60001698 <usb_init+0x50>
		NVIC_CLEAR_PENDING(IRQ_USB1);
600016a0:	mov.w	r0, #131072	; 0x20000
600016a4:	mov.w	r1, #3758153728	; 0xe000e000
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
600016a8:	ldr	r3, [pc, #112]	; (6000171c <usb_init+0xd4>)
600016aa:	mov.w	r2, #2147483648	; 0x80000000
		NVIC_CLEAR_PENDING(IRQ_USB1);
600016ae:	str.w	r0, [r1, #652]	; 0x28c
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
600016b2:	movs	r0, #25
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
600016b4:	str	r2, [r3, #56]	; 0x38
		delay(25);
600016b6:	bl	60001ed8 <__delay_veneer>
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
600016ba:	ldr	r2, [pc, #96]	; (6000171c <usb_init+0xd4>)
600016bc:	mov.w	r0, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600016c0:	ldr	r4, [pc, #84]	; (60001718 <usb_init+0xd0>)
	USBPHY1_PWD = 0;
600016c2:	movs	r1, #0
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
600016c4:	str	r0, [r2, #56]	; 0x38
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600016c6:	movs	r0, #10
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600016c8:	ldr	r3, [pc, #88]	; (60001724 <usb_init+0xdc>)
	USBPHY1_PWD = 0;
600016ca:	str	r1, [r2, #0]
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600016cc:	mov.w	r2, #896	; 0x380
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600016d0:	str.w	r0, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600016d4:	mov	r0, r3
600016d6:	bl	60001ee0 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
	endpoint_queue_head[1].config = (64 << 16);
600016da:	mov.w	r2, #4194304	; 0x400000
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600016de:	mov	r3, r0
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
600016e0:	mov.w	r0, #4227072	; 0x408000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
600016e4:	movw	r1, #323	; 0x143
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
600016e8:	str	r0, [r3, #0]
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
600016ea:	str.w	r3, [r4, #344]	; 0x158
	endpoint_queue_head[1].config = (64 << 16);
600016ee:	str	r2, [r3, #64]	; 0x40
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* volatile _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
600016f0:	ldr	r3, [pc, #52]	; (60001728 <usb_init+0xe0>)
600016f2:	ldr	r2, [pc, #56]	; (6000172c <usb_init+0xe4>)
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
600016f4:	str.w	r1, [r4, #328]	; 0x148
600016f8:	str.w	r2, [r3, #516]	; 0x204
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &usb_isr;
	attachInterruptVector(IRQ_USB1, &usb_isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
600016fc:	mov.w	r2, #3758153728	; 0xe000e000
60001700:	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001704:	movs	r3, #1
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001706:	str.w	r1, [r2, #268]	; 0x10c
	USB1_USBCMD = USB_USBCMD_RS;
6000170a:	str.w	r3, [r4, #320]	; 0x140
	//transfer_log_head = 0;
	//transfer_log_count = 0;
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}
6000170e:	pop	{r4, pc}
60001710:	.word	0x400d8000
60001714:	.word	0x400fc000
60001718:	.word	0x402e0000
6000171c:	.word	0x400d9000
60001720:	.word	0x001e1c00
60001724:	.word	0x20000000
60001728:	.word	0x20001c00
6000172c:	.word	0x0000af21

60001730 <_reboot_Teensyduino_>:


FLASHMEM void _reboot_Teensyduino_(void)
{
60001730:	push	{r3, lr}
	if (!(HW_OCOTP_CFG5 & 0x02)) {
60001732:	ldr	r3, [pc, #56]	; (6000176c <_reboot_Teensyduino_+0x3c>)
60001734:	ldr	r3, [r3, #96]	; 0x60
60001736:	lsls	r3, r3, #30
60001738:	bmi.n	6000173c <_reboot_Teensyduino_+0xc>
		asm("bkpt #251"); // run bootloader
6000173a:	bkpt	0x00fb
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
6000173c:	cpsid	i
		USB1_USBCMD = 0;
6000173e:	ldr	r3, [pc, #48]	; (60001770 <_reboot_Teensyduino_+0x40>)
60001740:	movs	r0, #0
		IOMUXC_GPR_GPR16 = 0x00200003;
60001742:	ldr	r2, [pc, #48]	; (60001774 <_reboot_Teensyduino_+0x44>)
		USB1_USBCMD = 0;
60001744:	str.w	r0, [r3, #320]	; 0x140
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001748:	add.w	r3, r3, #3758096384	; 0xe0000000
		IOMUXC_GPR_GPR16 = 0x00200003;
6000174c:	ldr	r1, [pc, #40]	; (60001778 <_reboot_Teensyduino_+0x48>)
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
6000174e:	sub.w	r3, r3, #913408	; 0xdf000
		IOMUXC_GPR_GPR16 = 0x00200003;
60001752:	str	r1, [r2, #64]	; 0x40
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001754:	mov	sp, r3
		__asm__ volatile("dsb":::"memory");
60001756:	dsb	sy
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
6000175a:	mov.w	r3, #2097152	; 0x200000
		*p = 0xEB120000;
6000175e:	ldr	r0, [pc, #28]	; (6000177c <_reboot_Teensyduino_+0x4c>)
60001760:	ldr	r2, [pc, #28]	; (60001780 <_reboot_Teensyduino_+0x50>)
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001762:	ldr	r3, [r3, #28]
		*p = 0xEB120000;
60001764:	str	r2, [r0, #0]
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001766:	ldr	r3, [r3, #8]
60001768:	blx	r3
	}
	__builtin_unreachable();
6000176a:	nop
6000176c:	.word	0x401f4400
60001770:	.word	0x402e0000
60001774:	.word	0x400ac000
60001778:	.word	0x00200003
6000177c:	.word	0x20208000
60001780:	.word	0xeb120000

60001784 <startup_default_early_hook>:
FLASHMEM void startup_default_early_hook(void) {}
60001784:	bx	lr
60001786:	nop

60001788 <startup_default_middle_hook>:
60001788:	bx	lr
6000178a:	nop

6000178c <startup_default_late_hook>:
6000178c:	bx	lr
6000178e:	nop

60001790 <configure_cache>:
{
60001790:	push	{r4}
	SCB_MPU_CTRL = 0; // turn off MPU
60001792:	mov.w	r3, #3758153728	; 0xe000e000
60001796:	movs	r1, #0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001798:	movs	r4, #16
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
6000179a:	ldr	r0, [pc, #172]	; (60001848 <configure_cache+0xb8>)
	SCB_MPU_CTRL = 0; // turn off MPU
6000179c:	str.w	r1, [r3, #3476]	; 0xd94
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600017a0:	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
600017a4:	movs	r4, #17
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600017a6:	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600017aa:	ldr	r0, [pc, #160]	; (6000184c <configure_cache+0xbc>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
600017ac:	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
600017b0:	movs	r4, #18
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600017b2:	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600017b6:	ldr	r0, [pc, #152]	; (60001850 <configure_cache+0xc0>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
600017b8:	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600017bc:	ldr	r2, [pc, #148]	; (60001854 <configure_cache+0xc4>)
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600017be:	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
600017c2:	ldr	r4, [pc, #148]	; (60001858 <configure_cache+0xc8>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600017c4:	orr.w	r2, r2, #21
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600017c8:	ldr	r0, [pc, #144]	; (6000185c <configure_cache+0xcc>)
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
600017ca:	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600017ce:	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600017d2:	ldr	r4, [pc, #140]	; (60001860 <configure_cache+0xd0>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600017d4:	ldr	r0, [pc, #140]	; (60001864 <configure_cache+0xd4>)
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600017d6:	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600017da:	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600017de:	ldr	r4, [pc, #136]	; (60001868 <configure_cache+0xd8>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600017e0:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
600017e4:	ldr	r0, [pc, #132]	; (6000186c <configure_cache+0xdc>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600017e6:	ldr	r2, [pc, #136]	; (60001870 <configure_cache+0xe0>)
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600017e8:	str.w	r4, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
600017ec:	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600017f0:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600017f4:	add.w	r2, r2, #327680	; 0x50000
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
600017f8:	ldr	r4, [pc, #120]	; (60001874 <configure_cache+0xe4>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600017fa:	adds	r2, #12
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
600017fc:	ldr	r0, [pc, #120]	; (60001878 <configure_cache+0xe8>)
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
600017fe:	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001802:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001806:	ldr	r2, [pc, #116]	; (6000187c <configure_cache+0xec>)
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
60001808:	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
6000180c:	ldr	r4, [pc, #112]	; (60001880 <configure_cache+0xf0>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
6000180e:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
60001812:	movs	r2, #1
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001814:	ldr	r0, [pc, #108]	; (60001884 <configure_cache+0xf4>)
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001816:	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
6000181a:	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
6000181e:	str.w	r2, [r3, #3476]	; 0xd94
	asm("dsb");
60001822:	dsb	sy
	asm("isb");
60001826:	isb	sy
	SCB_CACHE_ICIALLU = 0;
6000182a:	str.w	r1, [r3, #3920]	; 0xf50
	asm("dsb");
6000182e:	dsb	sy
	asm("isb");
60001832:	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001836:	ldr.w	r2, [r3, #3348]	; 0xd14
}
6000183a:	ldr.w	r4, [sp], #4
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
6000183e:	orr.w	r2, r2, #196608	; 0x30000
60001842:	str.w	r2, [r3, #3348]	; 0xd14
}
60001846:	bx	lr
60001848:	.word	0x1000003f
6000184c:	.word	0x03080025
60001850:	.word	0x00100009
60001854:	.word	0x20007bc0
60001858:	.word	0x00200013
6000185c:	.word	0x07020021
60001860:	.word	0x20000014
60001864:	.word	0x13080025
60001868:	.word	0x10000009
6000186c:	.word	0x20200016
60001870:	.word	0x130b0027
60001874:	.word	0x40000017
60001878:	.word	0x60000018
6000187c:	.word	0x070b002f
60001880:	.word	0x70000019
60001884:	.word	0x130b002f

60001888 <configure_external_ram>:
{
60001888:	push	{r4, r5, r6, r7, lr}
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
6000188a:	ldr	r3, [pc, #736]	; (60001b6c <configure_external_ram+0x2e4>)
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
6000188c:	movs	r2, #24
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
6000188e:	ldr	r6, [pc, #736]	; (60001b70 <configure_external_ram+0x2e8>)
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
60001890:	movs	r0, #1
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
60001892:	ldr	r7, [pc, #736]	; (60001b74 <configure_external_ram+0x2ec>)
{
60001894:	sub	sp, #12
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001896:	str.w	r6, [r3, #604]	; 0x25c
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
6000189a:	ldr	r1, [pc, #732]	; (60001b78 <configure_external_ram+0x2f0>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
6000189c:	str.w	r7, [r3, #608]	; 0x260
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600018a0:	ldr	r5, [pc, #728]	; (60001b7c <configure_external_ram+0x2f4>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600018a2:	str.w	r6, [r3, #612]	; 0x264
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
600018a6:	sub.w	r6, r6, #45056	; 0xb000
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
600018aa:	ldr	r4, [pc, #724]	; (60001b80 <configure_external_ram+0x2f8>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
600018ac:	str.w	r6, [r3, #616]	; 0x268
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600018b0:	str.w	r5, [r3, #620]	; 0x26c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600018b4:	str.w	r5, [r3, #624]	; 0x270
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600018b8:	str.w	r5, [r3, #628]	; 0x274
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600018bc:	str.w	r5, [r3, #632]	; 0x278
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
600018c0:	movw	r5, #34572	; 0x870c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
600018c4:	str	r2, [r3, #108]	; 0x6c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_23 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DQS
600018c6:	str	r2, [r3, #112]	; 0x70
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_24 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS0_B (RAM)
600018c8:	str	r2, [r3, #116]	; 0x74
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_25 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SCLK
600018ca:	str	r2, [r3, #120]	; 0x78
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
600018cc:	str	r2, [r3, #124]	; 0x7c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
600018ce:	str.w	r2, [r3, #128]	; 0x80
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
600018d2:	str.w	r2, [r3, #132]	; 0x84
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3
600018d6:	str.w	r2, [r3, #136]	; 0x88
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
600018da:	str.w	r0, [r1, #812]	; 0x32c
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
600018de:	ldr	r2, [pc, #676]	; (60001b84 <configure_external_ram+0x2fc>)
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT = 1; // GPIO_EMC_26 for Mode: ALT8
600018e0:	str.w	r0, [r1, #816]	; 0x330
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT = 1; // GPIO_EMC_27 for Mode: ALT8
600018e4:	str.w	r0, [r1, #820]	; 0x334
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
600018e8:	str.w	r0, [r1, #824]	; 0x338
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
600018ec:	str.w	r0, [r1, #828]	; 0x33c
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8
600018f0:	str.w	r0, [r1, #848]	; 0x350
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
600018f4:	ldr	r1, [r4, #24]
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
600018f6:	ldr	r3, [pc, #656]	; (60001b88 <configure_external_ram+0x300>)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
600018f8:	ands	r2, r1
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
600018fa:	ldr	r0, [pc, #656]	; (60001b8c <configure_external_ram+0x304>)
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
600018fc:	ldr	r1, [pc, #656]	; (60001b90 <configure_external_ram+0x308>)
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
600018fe:	orrs	r3, r2
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001900:	ldr	r2, [pc, #656]	; (60001b94 <configure_external_ram+0x30c>)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001902:	str	r3, [r4, #24]
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);
60001904:	ldr.w	r3, [r4, #132]	; 0x84
60001908:	orr.w	r3, r3, #12
6000190c:	str.w	r3, [r4, #132]	; 0x84
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
60001910:	mov.w	r4, #4294967295
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
60001914:	ldr	r3, [r0, #0]
60001916:	orr.w	r3, r3, #2
6000191a:	str	r3, [r0, #0]
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
6000191c:	ldr	r3, [r0, #0]
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
6000191e:	ands	r3, r5
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
60001920:	mov.w	r5, #8192	; 0x2000
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001924:	orrs	r2, r3
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001926:	ldr	r3, [pc, #624]	; (60001b98 <configure_external_ram+0x310>)
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60001928:	str	r2, [r0, #0]
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
6000192a:	str	r4, [r0, #4]
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
6000192c:	ldr	r2, [r1, #8]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
6000192e:	ldr	r4, [pc, #620]	; (60001b9c <configure_external_ram+0x314>)
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001930:	ands	r3, r2
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001932:	ldr	r2, [pc, #620]	; (60001ba0 <configure_external_ram+0x318>)
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
60001934:	orr.w	r3, r3, #536870912	; 0x20000000
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001938:	str	r3, [r0, #8]
	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
6000193a:	ldr	r3, [r0, #12]
6000193c:	bic.w	r3, r3, #120	; 0x78
60001940:	str	r3, [r0, #12]
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001942:	ldr	r3, [r0, #32]
60001944:	ands	r3, r2
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001946:	orrs	r3, r4
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001948:	str	r3, [r0, #32]
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
6000194a:	ldr	r3, [r0, #32]
6000194c:	ands	r3, r2
	FLEXSPI2_AHBRXBUF2CR0 = mask;
6000194e:	ldr	r2, [pc, #596]	; (60001ba4 <configure_external_ram+0x31c>)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001950:	orrs	r3, r4
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001952:	ldr	r4, [pc, #596]	; (60001ba8 <configure_external_ram+0x320>)
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001954:	str	r3, [r0, #36]	; 0x24
	FLEXSPI2_AHBRXBUF2CR0 = mask;
60001956:	str	r2, [r0, #40]	; 0x28
	FLEXSPI2_AHBRXBUF3CR0 = mask;
60001958:	str	r2, [r0, #44]	; 0x2c
	FLEXSPI2_INTEN = 0;
6000195a:	movs	r2, #0
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
6000195c:	ldr.w	r3, [r1, #184]	; 0xb8
60001960:	bic.w	r3, r3, #63	; 0x3f
60001964:	orr.w	r3, r3, #1
60001968:	str.w	r3, [r0, #184]	; 0xb8
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
6000196c:	ldr.w	r3, [r1, #188]	; 0xbc
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001970:	ldr	r1, [pc, #568]	; (60001bac <configure_external_ram+0x324>)
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
60001972:	bic.w	r3, r3, #63	; 0x3f
60001976:	orr.w	r3, r3, #1
6000197a:	str.w	r3, [r0, #188]	; 0xbc
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
6000197e:	movw	r3, #1541	; 0x605
	FLEXSPI2_INTEN = 0;
60001982:	str	r2, [r0, #16]
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
60001984:	str	r5, [r0, #96]	; 0x60
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001986:	str	r4, [r0, #112]	; 0x70
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001988:	str.w	r3, [r0, #128]	; 0x80
	FLEXSPI2_FLSHA2CR0 = 0x2000; // 8 MByte
6000198c:	str	r5, [r0, #100]	; 0x64
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
6000198e:	str	r4, [r0, #116]	; 0x74
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001990:	movs	r4, #2
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001992:	str.w	r3, [r0, #132]	; 0x84
	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
60001996:	ldr	r3, [r0, #0]
60001998:	bic.w	r3, r3, #2
6000199c:	str	r3, [r0, #0]
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
6000199e:	str	r1, [r0, #24]
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600019a0:	ldr	r3, [pc, #524]	; (60001bb0 <configure_external_ram+0x328>)
	for (int i=0; i < 64; i++) luttable[i] = 0;
600019a2:	ldr	r1, [pc, #528]	; (60001bb4 <configure_external_ram+0x32c>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600019a4:	str	r4, [r0, #28]
	for (int i=0; i < 64; i++) luttable[i] = 0;
600019a6:	str.w	r2, [r3], #4
600019aa:	cmp	r3, r1
600019ac:	bne.n	600019a6 <configure_external_ram+0x11e>
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
600019ae:	ldr	r2, [pc, #476]	; (60001b8c <configure_external_ram+0x304>)
600019b0:	ldr	r3, [r2, #0]
600019b2:	orr.w	r3, r3, #1
600019b6:	str	r3, [r2, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
600019b8:	ldr	r3, [r2, #0]
600019ba:	ands.w	r3, r3, #1
600019be:	bne.n	600019b8 <configure_external_ram+0x130>
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600019c0:	ldr	r0, [pc, #488]	; (60001bac <configure_external_ram+0x324>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600019c2:	movs	r1, #2
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
600019c4:	movw	r4, #1781	; 0x6f5
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600019c8:	str	r0, [r2, #24]
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
600019ca:	movw	r0, #1177	; 0x499
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600019ce:	str	r1, [r2, #28]
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
600019d0:	movw	r1, #1126	; 0x466
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
600019d4:	str.w	r4, [r2, #512]	; 0x200
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
600019d8:	movw	r4, #9217	; 0x2401
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
600019dc:	str.w	r1, [r2, #528]	; 0x210
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
600019e0:	ldr	r1, [pc, #468]	; (60001bb8 <configure_external_ram+0x330>)
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
600019e2:	str.w	r0, [r2, #544]	; 0x220
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
600019e6:	str.w	r1, [r2, #560]	; 0x230
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
600019ea:	movw	r1, #1077	; 0x435
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
600019ee:	ldr	r0, [pc, #460]	; (60001bbc <configure_external_ram+0x334>)
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
600019f0:	str.w	r4, [r2, #564]	; 0x234
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
600019f4:	str.w	r1, [r2, #576]	; 0x240
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
600019f8:	ldr	r4, [pc, #452]	; (60001bc0 <configure_external_ram+0x338>)
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
600019fa:	str.w	r0, [r2, #592]	; 0x250
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
600019fe:	movw	r0, #8705	; 0x2201
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
60001a02:	ldr	r1, [pc, #448]	; (60001bc4 <configure_external_ram+0x33c>)
60001a04:	str.w	r1, [r2, #596]	; 0x254
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a08:	movs	r1, #1
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
60001a0a:	str.w	r4, [r2, #608]	; 0x260
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
60001a0e:	str.w	r0, [r2, #612]	; 0x264
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a12:	ldr	r0, [pc, #376]	; (60001b8c <configure_external_ram+0x304>)
	FLEXSPI2_IPCR0 = addr;
60001a14:	str.w	r3, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a18:	str.w	r3, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a1c:	str.w	r1, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a20:	ldr	r3, [r0, #20]
60001a22:	lsls	r2, r3, #31
60001a24:	bpl.n	60001a20 <configure_external_ram+0x198>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a26:	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001a28:	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a2a:	mov.w	r2, #65536	; 0x10000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a2e:	ldr	r1, [pc, #348]	; (60001b8c <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a30:	str	r3, [r0, #20]
	FLEXSPI2_IPCR0 = addr;
60001a32:	str.w	r4, [r0, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a36:	str.w	r2, [r0, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a3a:	str.w	r3, [r0, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a3e:	ldr	r3, [r1, #20]
60001a40:	lsls	r3, r3, #31
60001a42:	bpl.n	60001a3e <configure_external_ram+0x1b6>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a44:	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001a46:	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a48:	mov.w	r0, #131072	; 0x20000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a4c:	ldr	r2, [pc, #316]	; (60001b8c <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a4e:	str	r3, [r1, #20]
	FLEXSPI2_IPCR0 = addr;
60001a50:	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a54:	str.w	r0, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a58:	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a5c:	ldr	r3, [r2, #20]
60001a5e:	lsls	r7, r3, #31
60001a60:	bpl.n	60001a5c <configure_external_ram+0x1d4>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a62:	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001a64:	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001a66:	ldr	r0, [pc, #352]	; (60001bc8 <configure_external_ram+0x340>)
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a68:	ldr	r1, [pc, #288]	; (60001b8c <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a6a:	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
60001a6c:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001a70:	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a74:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a78:	ldr	r3, [r1, #20]
60001a7a:	lsls	r6, r3, #31
60001a7c:	bpl.n	60001a78 <configure_external_ram+0x1f0>
	uint32_t id = FLEXSPI2_RFDR0;
60001a7e:	ldr.w	r3, [r1, #256]	; 0x100
	if (flexspi2_psram_id(0) == 0x5D0D) {
60001a82:	movw	r2, #23821	; 0x5d0d
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001a86:	movs	r0, #33	; 0x21
	return id & 0xFFFF;
60001a88:	uxth	r3, r3
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001a8a:	str	r0, [r1, #20]
	if (flexspi2_psram_id(0) == 0x5D0D) {
60001a8c:	cmp	r3, r2
60001a8e:	bne.n	60001b5c <configure_external_ram+0x2d4>
	FLEXSPI2_IPCR0 = addr;
60001a90:	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a92:	mov.w	r2, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a96:	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a98:	ldr	r0, [pc, #240]	; (60001b8c <configure_external_ram+0x304>)
	FLEXSPI2_IPCR0 = addr;
60001a9a:	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a9e:	str.w	r2, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001aa2:	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001aa6:	ldr	r3, [r0, #20]
60001aa8:	lsls	r5, r3, #31
60001aaa:	bpl.n	60001aa6 <configure_external_ram+0x21e>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001aac:	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001aae:	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001ab2:	movs	r1, #0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001ab4:	ldr	r2, [pc, #212]	; (60001b8c <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001ab6:	str	r3, [r0, #20]
	FLEXSPI2_IPCR0 = addr;
60001ab8:	str.w	r4, [r0, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001abc:	str.w	r1, [r0, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001ac0:	str.w	r3, [r0, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001ac4:	ldr	r3, [r2, #20]
60001ac6:	lsls	r4, r3, #31
60001ac8:	bpl.n	60001ac4 <configure_external_ram+0x23c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001aca:	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001acc:	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001ad0:	mov.w	r0, #65536	; 0x10000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001ad4:	ldr	r1, [pc, #180]	; (60001b8c <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001ad6:	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
60001ad8:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001adc:	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001ae0:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001ae4:	ldr	r3, [r1, #20]
60001ae6:	lsls	r0, r3, #31
60001ae8:	bpl.n	60001ae4 <configure_external_ram+0x25c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001aea:	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001aec:	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001af0:	mov.w	r0, #131072	; 0x20000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001af4:	ldr	r2, [pc, #148]	; (60001b8c <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001af6:	str	r3, [r1, #20]
	FLEXSPI2_IPCR0 = addr;
60001af8:	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001afc:	str.w	r0, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001b00:	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b04:	ldr	r3, [r2, #20]
60001b06:	lsls	r1, r3, #31
60001b08:	bpl.n	60001b04 <configure_external_ram+0x27c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b0a:	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001b0c:	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001b10:	ldr	r0, [pc, #180]	; (60001bc8 <configure_external_ram+0x340>)
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b12:	ldr	r1, [pc, #120]	; (60001b8c <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b14:	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
60001b16:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001b1a:	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001b1e:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b22:	ldr	r3, [r1, #20]
60001b24:	lsls	r2, r3, #31
60001b26:	bpl.n	60001b22 <configure_external_ram+0x29a>
	uint32_t id = FLEXSPI2_RFDR0;
60001b28:	ldr.w	r3, [r1, #256]	; 0x100
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001b2c:	movw	r2, #23821	; 0x5d0d
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001b30:	movs	r0, #33	; 0x21
	return id & 0xFFFF;
60001b32:	uxth	r3, r3
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001b34:	str	r0, [r1, #20]
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001b36:	cmp	r3, r2
60001b38:	beq.n	60001bdc <configure_external_ram+0x354>
60001b3a:	movs	r5, #8
60001b3c:	mov.w	r4, #8388608	; 0x800000
			external_psram_size * 0x100000 -
60001b40:	ldr	r1, [pc, #136]	; (60001bcc <configure_external_ram+0x344>)
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001b42:	movs	r0, #0
			external_psram_size * 0x100000 -
60001b44:	ldr	r3, [pc, #136]	; (60001bd0 <configure_external_ram+0x348>)
			external_psram_size = 16;
60001b46:	ldr	r2, [pc, #140]	; (60001bd4 <configure_external_ram+0x34c>)
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001b48:	str	r0, [sp, #0]
			external_psram_size = 16;
60001b4a:	strb	r5, [r2, #0]
			external_psram_size * 0x100000 -
60001b4c:	subs	r2, r3, r1
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001b4e:	movs	r3, #1
60001b50:	ldr	r0, [pc, #132]	; (60001bd8 <configure_external_ram+0x350>)
60001b52:	add	r2, r4
60001b54:	bl	60001ed0 <__sm_set_pool_veneer>
}
60001b58:	add	sp, #12
60001b5a:	pop	{r4, r5, r6, r7, pc}
		memset(&extmem_smalloc_pool, 0, sizeof(extmem_smalloc_pool));
60001b5c:	ldr	r3, [pc, #120]	; (60001bd8 <configure_external_ram+0x350>)
60001b5e:	movs	r2, #0
60001b60:	strd	r2, r2, [r3]
60001b64:	strd	r2, r2, [r3, #8]
}
60001b68:	add	sp, #12
60001b6a:	pop	{r4, r5, r6, r7, pc}
60001b6c:	.word	0x401f8000
60001b70:	.word	0x0001b0f9
60001b74:	.word	0x000110f9
60001b78:	.word	0x401f8400
60001b7c:	.word	0x000170f9
60001b80:	.word	0x400fc000
60001b84:	.word	0x1ffffcff
60001b88:	.word	0xa0000300
60001b8c:	.word	0x402a4000
60001b90:	.word	0x402a8000
60001b94:	.word	0xffff0012
60001b98:	.word	0x00f737ff
60001b9c:	.word	0x80000040
60001ba0:	.word	0x7cf0ff00
60001ba4:	.word	0x830f00ff
60001ba8:	.word	0x00020063
60001bac:	.word	0x5af05af0
60001bb0:	.word	0x402a4200
60001bb4:	.word	0x402a4300
60001bb8:	.word	0x3018049f
60001bbc:	.word	0x0a1806eb
60001bc0:	.word	0x0a180638
60001bc4:	.word	0x26013206
60001bc8:	.word	0x00030004
60001bcc:	.word	0x70000000
60001bd0:	.word	0x70000000
60001bd4:	.word	0x20007b7f
60001bd8:	.word	0x200073b8
	FLEXSPI2_IPCR0 = addr;
60001bdc:	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001be0:	mov.w	r2, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001be4:	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001be6:	ldr	r0, [pc, #32]	; (60001c08 <configure_external_ram+0x380>)
	FLEXSPI2_IPCR0 = addr;
60001be8:	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001bec:	str.w	r2, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001bf0:	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001bf4:	ldr	r3, [r0, #20]
60001bf6:	lsls	r3, r3, #31
60001bf8:	bpl.n	60001bf4 <configure_external_ram+0x36c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001bfa:	movs	r3, #1
60001bfc:	movs	r5, #16
60001bfe:	mov.w	r4, #16777216	; 0x1000000
60001c02:	str	r3, [r0, #20]
			external_psram_size = 16;
60001c04:	b.n	60001b40 <configure_external_ram+0x2b8>
60001c06:	nop
60001c08:	.word	0x402a4000

60001c0c <usb_pll_start>:
{
60001c0c:	push	{r4, r5, r6, r7}
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001c0e:	ldr	r2, [pc, #84]	; (60001c64 <usb_pll_start+0x58>)
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001c10:	movs	r7, #64	; 0x40
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001c12:	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001c16:	mov.w	r6, #4096	; 0x1000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001c1a:	mov.w	r5, #8192	; 0x2000
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001c1e:	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001c22:	movw	r0, #12354	; 0x3042
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001c26:	ldr	r3, [r2, #16]
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001c28:	tst.w	r3, #2
60001c2c:	bne.n	60001c4c <usb_pll_start+0x40>
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
60001c2e:	tst.w	r3, #8192	; 0x2000
60001c32:	beq.n	60001c54 <usb_pll_start+0x48>
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
60001c34:	tst.w	r3, #4096	; 0x1000
60001c38:	beq.n	60001c58 <usb_pll_start+0x4c>
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
60001c3a:	cmp	r3, #0
60001c3c:	bge.n	60001c26 <usb_pll_start+0x1a>
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
60001c3e:	tst.w	r3, #65536	; 0x10000
60001c42:	bne.n	60001c5c <usb_pll_start+0x50>
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
60001c44:	lsls	r3, r3, #25
60001c46:	bpl.n	60001c60 <usb_pll_start+0x54>
}
60001c48:	pop	{r4, r5, r6, r7}
60001c4a:	bx	lr
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001c4c:	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60001c4e:	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001c50:	str	r0, [r2, #24]
			continue;
60001c52:	b.n	60001c26 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001c54:	str	r5, [r2, #20]
			continue;
60001c56:	b.n	60001c26 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001c58:	str	r6, [r2, #20]
			continue;
60001c5a:	b.n	60001c26 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001c5c:	str	r1, [r2, #24]
			continue;
60001c5e:	b.n	60001c26 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001c60:	str	r7, [r2, #20]
			continue;
60001c62:	b.n	60001c26 <usb_pll_start+0x1a>
60001c64:	.word	0x400d8000

60001c68 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001c68:	ldr	r2, [pc, #252]	; (60001d68 <tempmon_init+0x100>)

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001c6a:	movs	r0, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
60001c6c:	ldr	r1, [pc, #252]	; (60001d6c <tempmon_init+0x104>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001c6e:	vmov.f32	s11, #57	; 0x41c80000  25.0
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001c72:	ldr.w	r3, [r2, #128]	; 0x80
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001c76:	mov.w	ip, #0
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c7a:	vldr	s12, [pc, #244]	; 60001d70 <tempmon_init+0x108>
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001c7e:	bic.w	r3, r3, #1
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c82:	vldr	s10, [pc, #240]	; 60001d74 <tempmon_init+0x10c>
{
60001c86:	push	{r4, r5}
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001c88:	str.w	r3, [r2, #128]	; 0x80
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001c8c:	str.w	r0, [r2, #144]	; 0x90
  calibrationData = HW_OCOTP_ANA1;
60001c90:	ldr.w	r1, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001c94:	ldr	r5, [pc, #224]	; (60001d78 <tempmon_init+0x110>)
60001c96:	uxtb	r3, r1
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001c98:	ldr	r4, [pc, #224]	; (60001d7c <tempmon_init+0x114>)
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001c9a:	ldr	r0, [pc, #228]	; (60001d80 <tempmon_init+0x118>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001c9c:	str	r3, [r5, #0]
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001c9e:	vmov	s15, r3
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001ca2:	lsrs	r3, r1, #20
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001ca4:	ubfx	r1, r1, #8, #12
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001ca8:	vcvt.f32.s32	s15, s15
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001cac:	vmov	s13, r3
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001cb0:	vmov	s14, r1
60001cb4:	ldr	r3, [pc, #204]	; (60001d84 <tempmon_init+0x11c>)
60001cb6:	vcvt.f32.s32	s14, s14
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001cba:	str	r1, [r4, #0]
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001cbc:	vcvt.f32.s32	s13, s13
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001cc0:	ldr	r1, [pc, #196]	; (60001d88 <tempmon_init+0x120>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001cc2:	vsub.f32	s12, s15, s12
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001cc6:	vsub.f32	s10, s15, s10
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001cca:	vsub.f32	s13, s13, s14
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001cce:	vsub.f32	s15, s15, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001cd2:	vmul.f32	s12, s12, s13
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001cd6:	vstr	s13, [r3]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001cda:	vmul.f32	s10, s10, s13
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001cde:	ldr.w	r3, [r2, #128]	; 0x80
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001ce2:	vmul.f32	s9, s15, s13
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001ce6:	vstr	s15, [r0]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001cea:	vdiv.f32	s11, s12, s15
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001cee:	ldr	r0, [pc, #156]	; (60001d8c <tempmon_init+0x124>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001cf0:	vdiv.f32	s12, s10, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001cf4:	vdiv.f32	s13, s9, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001cf8:	vadd.f32	s11, s11, s14
60001cfc:	vcvt.u32.f32	s11, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d00:	vadd.f32	s12, s12, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001d04:	vmov	r4, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d08:	vcvt.u32.f32	s12, s12
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001d0c:	orr.w	r3, r3, r4, lsl #20
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d10:	vadd.f32	s15, s13, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001d14:	str.w	r3, [r2, #128]	; 0x80
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001d18:	vmov	r3, s12
60001d1c:	ldr.w	r4, [r2, #400]	; 0x190
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d20:	vcvt.u32.f32	s15, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001d24:	and.w	r1, r1, r3, lsl #16
60001d28:	orrs	r1, r4
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d2a:	vmov	r3, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001d2e:	str.w	r1, [r2, #400]	; 0x190
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001d32:	ubfx	r3, r3, #0, #12
60001d36:	ldr.w	r1, [r2, #400]	; 0x190
60001d3a:	orrs	r3, r1
60001d3c:	ldr	r1, [pc, #80]	; (60001d90 <tempmon_init+0x128>)
60001d3e:	str.w	r3, [r2, #400]	; 0x190
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
60001d42:	ldr.w	r3, [r2, #128]	; 0x80
60001d46:	orr.w	r3, r3, #2
60001d4a:	str.w	r3, [r2, #128]	; 0x80
60001d4e:	ldr	r3, [pc, #68]	; (60001d94 <tempmon_init+0x12c>)
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001d50:	strb.w	ip, [r0, #64]	; 0x40
60001d54:	str.w	r3, [r1, #320]	; 0x140
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001d58:	mov.w	r3, #3758153728	; 0xe000e000
60001d5c:	movs	r2, #1
}
60001d5e:	pop	{r4, r5}
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001d60:	str.w	r2, [r3, #264]	; 0x108
}
60001d64:	bx	lr
60001d66:	nop
60001d68:	.word	0x400d8100
60001d6c:	.word	0x401f4400
60001d70:	.word	0x42aa0000
60001d74:	.word	0x42b40000
60001d78:	.word	0x20007af4
60001d7c:	.word	0x20007af0
60001d80:	.word	0x20007af8
60001d84:	.word	0x20007afc
60001d88:	.word	0x0fff0000
60001d8c:	.word	0xe000e400
60001d90:	.word	0x20001c00
60001d94:	.word	0x0000bc41

60001d98 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)>:
	unsigned int i;
	unsigned int maxnum = MAX_AUDIO_MEMORY / AUDIO_BLOCK_SAMPLES / 2;

	//Serial.println("AudioStream initialize_memory");
	//delay(10);
	if (num > maxnum) num = maxnum;
60001d98:	cmp.w	r1, #896	; 0x380
{
60001d9c:	push	{r3, r4, r5, r6, r7, lr}
60001d9e:	mov	r6, r1
60001da0:	mov	r7, r1
60001da2:	it	cs
60001da4:	movcs.w	r6, #896	; 0x380
60001da8:	mov	r5, r0
	__disable_irq();
60001daa:	cpsid	i
	memory_pool = data;
60001dac:	ldr	r3, [pc, #140]	; (60001e3c <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xa4>)
	memory_pool_first_mask = 0;
60001dae:	movs	r4, #0
	for (i=0; i < NUM_MASKS; i++) {
		memory_pool_available_mask[i] = 0;
60001db0:	movs	r2, #112	; 0x70
	memory_pool = data;
60001db2:	str	r0, [r3, #0]
		memory_pool_available_mask[i] = 0;
60001db4:	mov	r1, r4
	memory_pool_first_mask = 0;
60001db6:	ldr	r3, [pc, #136]	; (60001e40 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xa8>)
		memory_pool_available_mask[i] = 0;
60001db8:	ldr	r0, [pc, #136]	; (60001e44 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xac>)
	memory_pool_first_mask = 0;
60001dba:	strh	r4, [r3, #0]
		memory_pool_available_mask[i] = 0;
60001dbc:	bl	60001ee0 <__memset_veneer>
	}
	for (i=0; i < num; i++) {
60001dc0:	cbz	r7, 60001df6 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x5e>
60001dc2:	mov	r1, r4
60001dc4:	ldr	r0, [pc, #124]	; (60001e44 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xac>)
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
60001dc6:	mov.w	ip, #1
60001dca:	lsrs	r2, r1, #5
60001dcc:	and.w	r3, r1, #31
	for (i=0; i < num; i++) {
60001dd0:	adds	r1, #1
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
60001dd2:	ldr.w	r4, [r0, r2, lsl #2]
60001dd6:	lsl.w	r3, ip, r3
	for (i=0; i < num; i++) {
60001dda:	cmp	r6, r1
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
60001ddc:	orr.w	r3, r3, r4
60001de0:	str.w	r3, [r0, r2, lsl #2]
	for (i=0; i < num; i++) {
60001de4:	bhi.n	60001dca <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x32>
60001de6:	mov	r0, r5
60001de8:	movs	r3, #0
	}
	for (i=0; i < num; i++) {
		data[i].memory_pool_index = i;
60001dea:	strh	r3, [r0, #2]
	for (i=0; i < num; i++) {
60001dec:	adds	r3, #1
60001dee:	add.w	r0, r0, #260	; 0x104
60001df2:	cmp	r6, r3
60001df4:	bhi.n	60001dea <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x52>
	}
	if (update_scheduled == false) {
60001df6:	ldr	r4, [pc, #80]	; (60001e48 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xb0>)
60001df8:	ldrb	r5, [r4, #0]
60001dfa:	cbz	r5, 60001e00 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x68>
			float usec = 1e6 * AUDIO_BLOCK_SAMPLES / AUDIO_SAMPLE_RATE_EXACT;
			timer->begin(update_all, usec);
			update_setup();
		}
	}
	__enable_irq();
60001dfc:	cpsie	i
}
60001dfe:	pop	{r3, r4, r5, r6, r7, pc}
		IntervalTimer *timer = new IntervalTimer();
60001e00:	movs	r0, #8
60001e02:	bl	60001ec8 <___Znwj_veneer>
// some of these 4 possible instances may be in use by libraries.
class IntervalTimer {
private:
	static const uint32_t MAX_PERIOD = UINT32_MAX / (24000000 / 1000000);
public:
	constexpr IntervalTimer() {
60001e06:	movs	r2, #128	; 0x80
	// or false if all hardware timers are already in use.
	bool begin(void (*funct)(), float microseconds) {
		if (microseconds <= 0 || microseconds > MAX_PERIOD) return false;
		uint32_t cycles = (float)(24000000 / 1000000) * microseconds - 0.5f;
		if (cycles < 17) return false;
		return beginCycles(funct, cycles);
60001e08:	ldr	r1, [pc, #64]	; (60001e4c <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xb4>)
	constexpr IntervalTimer() {
60001e0a:	strb	r2, [r0, #4]
60001e0c:	str	r5, [r0, #0]
		return beginCycles(funct, cycles);
60001e0e:	ldr	r2, [pc, #64]	; (60001e50 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xb8>)
60001e10:	bl	60001f00 <___ZN13IntervalTimer11beginCyclesEPFvvEm_veneer>
// their constructors.
bool AudioStream::update_scheduled = false;

bool AudioStream::update_setup(void)
{
	if (update_scheduled) return false;
60001e14:	ldrb	r3, [r4, #0]
60001e16:	cmp	r3, #0
60001e18:	bne.n	60001dfc <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x64>
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
60001e1a:	ldr	r3, [pc, #56]	; (60001e54 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xbc>)
60001e1c:	ldr	r2, [pc, #56]	; (60001e58 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xc0>)
60001e1e:	str.w	r2, [r3, #344]	; 0x158
	attachInterruptVector(IRQ_SOFTWARE, software_isr);
	NVIC_SET_PRIORITY(IRQ_SOFTWARE, 208); // 255 = lowest priority
60001e22:	ldr	r1, [pc, #56]	; (60001e5c <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xc4>)
60001e24:	movs	r0, #208	; 0xd0
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
60001e26:	mov.w	r3, #3758153728	; 0xe000e000
60001e2a:	movs	r2, #64	; 0x40
	NVIC_SET_PRIORITY(IRQ_SOFTWARE, 208); // 255 = lowest priority
60001e2c:	strb.w	r0, [r1, #70]	; 0x46
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
60001e30:	str.w	r2, [r3, #264]	; 0x108
	update_scheduled = true;
60001e34:	movs	r3, #1
60001e36:	strb	r3, [r4, #0]
	__enable_irq();
60001e38:	cpsie	i
}
60001e3a:	pop	{r3, r4, r5, r6, r7, pc}
60001e3c:	.word	0x20006428
60001e40:	.word	0x20007b58
60001e44:	.word	0x20006430
60001e48:	.word	0x20007b76
60001e4c:	.word	0x0000c5d5
60001e50:	.word	0x0001101b
60001e54:	.word	0x20001c00
60001e58:	.word	0x0000c5e1
60001e5c:	.word	0xe000e400

60001e60 <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001e60:	ldr	r3, [pc, #64]	; (60001ea4 <analog_init+0x44>)
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001e62:	movs	r0, #160	; 0xa0
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001e64:	ldr	r2, [pc, #64]	; (60001ea8 <analog_init+0x48>)
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001e66:	ldr	r1, [r3, #108]	; 0x6c
60001e68:	orr.w	r1, r1, #196608	; 0x30000
{
60001e6c:	push	{r4}
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001e6e:	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001e70:	movw	r4, #1591	; 0x637
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
60001e74:	ldr	r1, [r3, #108]	; 0x6c
60001e76:	orr.w	r1, r1, #768	; 0x300
60001e7a:	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001e7c:	str	r4, [r2, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001e7e:	str	r0, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) {
60001e80:	ldr	r3, [r2, #72]	; 0x48
60001e82:	lsls	r3, r3, #24
60001e84:	bmi.n	60001e80 <analog_init+0x20>
		//yield();
	}
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001e86:	ldr	r2, [pc, #36]	; (60001eac <analog_init+0x4c>)
60001e88:	movw	r1, #1591	; 0x637
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001e8c:	movs	r3, #160	; 0xa0
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001e8e:	str	r1, [r2, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001e90:	str	r3, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) {
60001e92:	ldr	r3, [r2, #72]	; 0x48
60001e94:	ands.w	r3, r3, #128	; 0x80
60001e98:	bne.n	60001e92 <analog_init+0x32>
		//yield();
	}
	calibrating = 0;
60001e9a:	ldr	r2, [pc, #20]	; (60001eb0 <analog_init+0x50>)
60001e9c:	strb	r3, [r2, #0]
}
60001e9e:	ldr.w	r4, [sp], #4
60001ea2:	bx	lr
60001ea4:	.word	0x400fc000
60001ea8:	.word	0x400c4000
60001eac:	.word	0x400c8000
60001eb0:	.word	0x20007b7e

60001eb4 <_init>:
60001eb4:	push	{r3, r4, r5, r6, r7, lr}
60001eb6:	nop
60001eb8:	pop	{r3, r4, r5, r6, r7}
60001eba:	pop	{r3}
60001ebc:	mov	lr, r3
60001ebe:	bx	lr

60001ec0 <__pwm_init_veneer>:
60001ec0:	ldr.w	pc, [pc]	; 60001ec4 <__pwm_init_veneer+0x4>
60001ec4:	.word	0x0000be09

60001ec8 <___Znwj_veneer>:
60001ec8:	ldr.w	pc, [pc]	; 60001ecc <___Znwj_veneer+0x4>
60001ecc:	.word	0x0000d145

60001ed0 <__sm_set_pool_veneer>:
60001ed0:	ldr.w	pc, [pc]	; 60001ed4 <__sm_set_pool_veneer+0x4>
60001ed4:	.word	0x0000bbbd

60001ed8 <__delay_veneer>:
60001ed8:	ldr.w	pc, [pc]	; 60001edc <__delay_veneer+0x4>
60001edc:	.word	0x0000b871

60001ee0 <__memset_veneer>:
60001ee0:	ldr.w	pc, [pc]	; 60001ee4 <__memset_veneer+0x4>
60001ee4:	.word	0x0000e111

60001ee8 <__main_veneer>:
60001ee8:	ldr.w	pc, [pc]	; 60001eec <__main_veneer+0x4>
60001eec:	.word	0x0000c5c5

60001ef0 <__set_arm_clock_veneer>:
60001ef0:	ldr.w	pc, [pc]	; 60001ef4 <__set_arm_clock_veneer+0x4>
60001ef4:	.word	0x0000a9e5

60001ef8 <__usb_init_serialnumber_veneer>:
60001ef8:	ldr.w	pc, [pc]	; 60001efc <__usb_init_serialnumber_veneer+0x4>
60001efc:	.word	0x0000c129

60001f00 <___ZN13IntervalTimer11beginCyclesEPFvvEm_veneer>:
60001f00:	ldr.w	pc, [pc]	; 60001f04 <___ZN13IntervalTimer11beginCyclesEPFvvEm_veneer+0x4>
60001f04:	.word	0x0000d209

60001f08 <____libc_init_array_veneer>:
60001f08:	ldr.w	pc, [pc]	; 60001f0c <____libc_init_array_veneer+0x4>
60001f0c:	.word	0x0000e389

60001f10 <__frame_dummy_init_array_entry>:
60001f10:	E...............
60001f20:	=...U...m.......
60001f30:	................
60001f40:	........=...U...
60001f50:	m...............
60001f60:	............. ..
60001f70:	! ..9 ..Q ..i ..
60001f80:	.$...)...0..

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <register_tm_clones>:
}
      20:	ldr	r0, [pc, #20]	; (38 <_teensy_model_identifier+0x13>)
      22:	ldr	r3, [pc, #24]	; (3c <_teensy_model_identifier+0x17>)
	__disable_irq();
	sof_usage |= (1 << interface);
	uint32_t intr = USB1_USBINTR;
	if (!(intr & USB_USBINTR_SRE)) {
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
		USB1_USBINTR = intr | USB_USBINTR_SRE;
      24:	subs	r3, r3, r0
      26:	lsrs	r1, r3, #31
	}
	__enable_irq();
      28:	add.w	r1, r1, r3, asr #2
}
      2c:	asrs	r1, r1, #1
      2e:	beq.n	36 <_teensy_model_identifier+0x11>
      30:	ldr	r3, [pc, #12]	; (40 <_teensy_model_identifier+0x1b>)
      32:	cbz	r3, 36 <_teensy_model_identifier+0x11>
      34:	bx	r3
      36:	bx	lr
	SNVS_LPSRTCMR = t >> 17;
	// start the SRTC
	SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
	while (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)); // wait
	// start the RTC and sync it to the SRTC
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
      38:	.word	0x20001ec0
      3c:	.word	0x20001ec0
}
      40:	.word	0x00000000

00000044 <frame_dummy>:
      44:	push	{r3, lr}
      46:	ldr	r3, [pc, #20]	; (5c <frame_dummy+0x18>)
  }
  m_vwd = dir;
  return true;

fail:
  return false;
      48:	cbz	r3, 52 <frame_dummy+0xe>
}
      4a:	ldr	r1, [pc, #20]	; (60 <frame_dummy+0x1c>)
      4c:	ldr	r0, [pc, #20]	; (64 <frame_dummy+0x20>)
      4e:	nop.w
		}
		NVIC_SET_PRIORITY(IRQ_PIT, top_priority);
		channel = 0;
	}
#endif
}
      52:	ldmia.w	sp!, {r3, lr}
      56:	b.w	20 <register_tm_clones>
	if (pin < NUM_DIGITAL_PINS) {
		cdPin_ = pin;
		pinMode(cdPin_, INPUT_PULLUP);
	} else {
		cdPin_ = 0xff;
		return false;
      5a:	nop
  m_vwd = dir;
  return true;

fail:
  return false;
}
      5c:	.word	0x00000000
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::open(uint32_t index, oflag_t oflag) {
  ExFatVolume* vol = ExFatVolume::cwv();
  return vol ? open(vol->vwd(), index, oflag) : false;
      60:	.word	0x20007668
  m_attributes = FILE_ATTR_CLOSED;
      64:	.word	0x60018800

00000068 <Print::availableForWrite()>:
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
	virtual size_t write(const uint8_t *buffer, size_t size);
	virtual int availableForWrite(void)		{ return 0; }
      68:	movs	r0, #0
      6a:	bx	lr

0000006c <Print::flush()>:
	virtual void flush()				{ }
      6c:	bx	lr
  return rtn;
      6e:	nop

00000070 <SDFile::isOpen()>:
    return m_fFile   ? m_fFile->isHidden()
           : m_xFile ? m_xFile->isHidden()
                     : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() const { return m_fFile || m_xFile; }
      70:	ldr	r3, [r0, #80]	; 0x50
      72:	cbz	r3, 78 <SDFile::isOpen()+0x8>
      74:	movs	r0, #1
			sdfatfile.close();
		}
	}
	virtual bool isOpen() {
		return sdfatfile.isOpen();
	}
      76:	bx	lr
      78:	ldr	r0, [r0, #84]	; 0x54
      7a:	subs	r0, #0
      7c:	it	ne
      7e:	movne	r0, #1
      80:	bx	lr
  if (sep) {
    *--str = sep;
  }
  str = fmtBase10(str, n);
  if (n < 10) {
    *--str = '0';
      82:	nop

00000084 <I2S_32::isr32()>:
      84:	ldr	r3, [pc, #224]	; (168 <I2S_32::isr32()+0xe4>)
    char sign;
    if (tz & 0X40) {
      sign = '-';
      tz = -tz;
    } else {
      sign = '+';
      86:	ldr	r1, [pc, #228]	; (16c <I2S_32::isr32()+0xe8>)
      88:	ldr	r2, [pc, #228]	; (170 <I2S_32::isr32()+0xec>)
}
      8a:	push	{r4, r5, r6, r7, lr}
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
			break;
      8c:	ldr	r4, [r3, #0]
      8e:	ldrb	r0, [r3, #4]
      90:	ldr	r3, [r4, #16]
      92:	strb	r0, [r2, #31]
  if (from.m_fFile) {
    m_fFile = new (m_fileMem) FatFile;
    *m_fFile = *from.m_fFile;
  } else if (from.m_xFile) {
    m_xFile = new (m_fileMem) ExFatFile;
    *m_xFile = *from.m_xFile;
      94:	cmp	r3, r1
  }
  return *this;
}
      96:	bcs.n	b0 <I2S_32::isr32()+0x2c>
      98:	ldr	r3, [pc, #216]	; (174 <I2S_32::isr32()+0xf0>)
	dma.enable();

	I2S1_RCSR = I2S_RCSR_RE | I2S_RCSR_BCE | I2S_RCSR_FRDE | I2S_RCSR_FR;
	dma.attachInterrupt(isr);	
#endif	
}
      9a:	ldrb	r3, [r3, #0]
      9c:	cmp	r3, #0
      9e:	beq.n	162 <I2S_32::isr32()+0xde>
      a0:	mov.w	r3, #3758153728	; 0xe000e000
      a4:	movs	r2, #64	; 0x40
      a6:	add.w	ip, r1, #512	; 0x200
      aa:	str.w	r2, [r3, #520]	; 0x208
      ae:	b.n	b6 <I2S_32::isr32()+0x32>
      b0:	mov	ip, r1
      b2:	sub.w	r1, r1, #512	; 0x200
      b6:	movs	r3, #0
      b8:	mov	r2, r3
      ba:	ldr.w	r0, [r1, r3, lsl #3]
      be:	adds	r3, #1
      c0:	cmp	r3, #64	; 0x40
      c2:	add	r2, r0
      c4:	bne.n	ba <I2S_32::isr32()+0x36>
      c6:	cmp	r2, #0
      c8:	ldr	r7, [pc, #172]	; (178 <I2S_32::isr32()+0xf4>)
      ca:	ldr	r5, [pc, #176]	; (17c <I2S_32::isr32()+0xf8>)
  // Maintain count of free clusters.
  updateFreeClusterCount(-count);

  // return first cluster number to caller
  *firstCluster = bgnCluster;
  return true;
      cc:	mov.w	r3, #0
	I2S1_RCSR = 0;
	I2S1_RCSR = I2S_RCSR_RE | I2S_RCSR_BCE | I2S_RCSR_FRDE | I2S_RCSR_FR;
	update_responsibility = update_setup();
	dma.attachInterrupt(isr);
#endif
}
      d0:	it	lt
      d2:	addlt	r2, #63	; 0x3f

	I2S2_RCSR |= I2S_RCSR_RE | I2S_RCSR_BCE | I2S_RCSR_FRDE | I2S_RCSR_FR;
	I2S2_TCSR |= I2S_TCSR_TE | I2S_TCSR_BCE;
	dma.attachInterrupt(isr);	

}
      d4:	ldr	r4, [r7, #0]
      d6:	adds	r0, r1, #4
      }
    }
  }
  // don't try to delete root
  if (!isRoot()) {
    if (!rmdir()) {
      d8:	ldr	r6, [r5, #0]
      da:	mov.w	lr, r2, asr #6
  return writeStop();

fail:
  spiStop();
  return false;
}
      de:	ldr.w	r2, [r1, r3, lsl #3]
  seconds+= (tm.Day-1) * SECS_PER_DAY;
  seconds+= tm.Hour * SECS_PER_HOUR;
  seconds+= tm.Minute * SECS_PER_MIN;
  seconds+= tm.Second;
  return (time_t)seconds; 
}
      e2:	subs	r2, r2, r4
      e4:	str.w	r2, [r1, r3, lsl #3]
      e8:	ldr.w	r2, [r0, r3, lsl #3]
      ec:	subs	r2, r2, r6
      ee:	str.w	r2, [r0, r3, lsl #3]
  seconds += (tm.mday-1) * SECS_PER_DAY;
  seconds += tm.hour * SECS_PER_HOUR;
  seconds += tm.min * SECS_PER_MIN;
  seconds += tm.sec;
  return /*(time_t)*/ seconds;
}
      f2:	adds	r3, #1
    // Select MCLK
    IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
      & ~(IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL_MASK))
      | (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));

  }
      f4:	cmp	r3, #64	; 0x40
      f6:	bne.n	de <I2S_32::isr32()+0x5a>
      f8:	sub.w	r3, lr, r4
      fc:	ldr	r2, [pc, #128]	; (180 <I2S_32::isr32()+0xfc>)
      fe:	adds.w	r3, r3, r4, lsl #4
     102:	ldr	r0, [r2, #0]
    data[1+2*ii] -= I2S_32::DC_right;
  }

  int32_t dco0=I2S_32::DC_left;
  int32_t dco1=I2S_32::DC_right;
  I2S_32::DC_left  = (NAVG * dco0 +(dc0-dco0))/NAVG;
     104:	it	mi
     106:	addmi	r3, #15
     108:	asrs	r3, r3, #4
     10a:	str	r3, [r7, #0]
  I2S_32::DC_right = (NAVG * dco1 +(dc0-dco1))/NAVG;
     10c:	sub.w	r3, lr, r6
     110:	adds.w	r3, r3, r6, lsl #4
     114:	it	mi
     116:	addmi	r3, #15
     118:	asrs	r3, r3, #4
     11a:	str	r3, [r5, #0]

   // extract 16/32 bit from 32 bit I2S buffer but shift to right first
   // there will be two buffers with each having "AUDIO_BLOCK_SAMPLES_NCH" samples
  left  = I2S_32::block_left;
  right = I2S_32::block_right;
     11c:	ldr	r3, [pc, #100]	; (184 <I2S_32::isr32()+0x100>)
     11e:	ldr	r4, [r3, #0]
  if (left != NULL && right != NULL) {
     120:	cbz	r0, 160 <I2S_32::isr32()+0xdc>
     122:	cbz	r4, 160 <I2S_32::isr32()+0xdc>
    offset = I2S_32::block_offset;
     124:	ldr	r2, [pc, #96]	; (188 <I2S_32::isr32()+0x104>)
     126:	ldrh	r3, [r2, #0]
    if (offset <= AUDIO_BLOCK_SAMPLES/2) {
     128:	cmp	r3, #64	; 0x40
     12a:	bhi.n	160 <I2S_32::isr32()+0xdc>
      dest_left  = &(left->data[offset]);
     12c:	adds	r5, r3, #2
      dest_right = &(right->data[offset]);
      I2S_32::block_offset = offset + AUDIO_BLOCK_SAMPLES/2; 
     12e:	adds	r3, #64	; 0x40
      dest_left  = &(left->data[offset]);
     130:	add.w	r0, r0, r5, lsl #1
      I2S_32::block_offset = offset + AUDIO_BLOCK_SAMPLES/2; 
     134:	strh	r3, [r2, #0]
      dest_right = &(right->data[offset]);
     136:	add.w	r4, r4, r5, lsl #1
      I2S_32::block_offset = offset + AUDIO_BLOCK_SAMPLES/2; 
     13a:	ldr	r5, [pc, #80]	; (18c <I2S_32::isr32()+0x108>)

      do {
        *dest_left++  = (*src++)>>I2S_32::shift; // left side may be 16 or 32 bit
     13c:	ldr.w	r2, [r1], #8
     140:	ldrsh.w	r3, [r5]
        *dest_right++ = (*src++)>>I2S_32::shift;
      } while (src < end);
     144:	cmp	ip, r1
        *dest_left++  = (*src++)>>I2S_32::shift; // left side may be 16 or 32 bit
     146:	asr.w	r2, r2, r3
        *dest_right++ = (*src++)>>I2S_32::shift;
     14a:	ldr.w	r3, [r1, #-4]
        *dest_left++  = (*src++)>>I2S_32::shift; // left side may be 16 or 32 bit
     14e:	strh.w	r2, [r0], #2
        *dest_right++ = (*src++)>>I2S_32::shift;
     152:	ldrsh.w	r2, [r5]
     156:	asr.w	r3, r3, r2
     15a:	strh.w	r3, [r4], #2
      } while (src < end);
     15e:	bhi.n	13c <I2S_32::isr32()+0xb8>
    }
  }
}
     160:	pop	{r4, r5, r6, r7, pc}
    end = (int32_t *)&i2s_rx_buffer_32[AUDIO_BLOCK_SAMPLES*2];
     162:	add.w	ip, r1, #512	; 0x200
     166:	b.n	b6 <I2S_32::isr32()+0x32>
     168:	.word	0x200065d8
     16c:	.word	0x20005e9c
     170:	.word	0x400e8000
     174:	.word	0x20007b7b
     178:	.word	0x200065e0
     17c:	.word	0x200065e4
     180:	.word	0x200065d0
     184:	.word	0x200065d4
     188:	.word	0x20007b5e
     18c:	.word	0x20001a46

00000190 <getTime()>:
#include <SPI.h>
#include <SD.h>
#include <SerialFlash.h>

#include <TimeLib.h>
time_t getTime() { return Teensy3Clock.get(); }
     190:	push	{r3, lr}
uint32_t makeTime(const DateTimeFields &tm); // convert DateTimeFields to 32 bit time

class teensy3_clock_class
{
public:
        static unsigned long get(void) __attribute__((always_inline)) { return rtc_get(); }
     192:	bl	bb4c <rtc_get>
     196:	movs	r1, #0
     198:	pop	{r3, pc}
			ch1_offset = AUDIO_BLOCK_SAMPLES/2;
		} else {
			ch1_offset = 0;
			release(block_ch1_1st);
			block_ch1_1st = block_ch1_2nd;
			block_ch1_2nd = NULL;
     19a:	nop

0000019c <I2S_32::update()>:

void I2S_32::update(void)
{
     19c:	push	{r3, r4, r5, r6, r7, lr}
     19e:	mov	r6, r0
  audio_block_t *new_left=NULL, *new_right=NULL, *out_left=NULL, *out_right=NULL;

  // allocate 2 new blocks, but if one fails, allocate neither
  new_left = allocate();
     1a0:	bl	c644 <AudioStream::allocate()>
  if (new_left != NULL) {
     1a4:	cbz	r0, 1d8 <I2S_32::update()+0x3c>
    new_right = allocate();
     1a6:	mov	r4, r0
     1a8:	bl	c644 <AudioStream::allocate()>
    if (new_right == NULL) {
     1ac:	mov	r5, r0
     1ae:	cbz	r0, 1d2 <I2S_32::update()+0x36>
      release(new_left);
      new_left = NULL;
    }
  }
  __disable_irq();
     1b0:	cpsid	i
  if (block_offset >= AUDIO_BLOCK_SAMPLES) {
     1b2:	ldr	r3, [pc, #120]	; (22c <I2S_32::update()+0x90>)
     1b4:	ldrh	r2, [r3, #0]
     1b6:	cmp	r2, #127	; 0x7f
     1b8:	bhi.n	1ea <I2S_32::update()+0x4e>
    release(out_left);
    transmit(out_right, 1);
    release(out_right);
  } else if (new_left != NULL) {
    // the DMA didn't fill blocks, but we allocated blocks
    if (block_left == NULL) {
     1ba:	ldr	r1, [pc, #116]	; (230 <I2S_32::update()+0x94>)
     1bc:	ldr	r2, [r1, #0]
     1be:	cbz	r2, 21e <I2S_32::update()+0x82>
      block_right = new_right;
      block_offset = 0;
      __enable_irq();
    } else {
      // the DMA already has blocks, doesn't need these
      __enable_irq();
     1c0:	cpsie	i
      release(new_left);
     1c2:	mov	r0, r4
     1c4:	bl	c6f0 <AudioStream::release(audio_block_struct*)>
      release(new_right);
     1c8:	mov	r0, r5
    // The DMA didn't fill blocks, and we could not allocate
    // memory... the system is likely starving for memory!
    // Sadly, there's nothing we can do.
    __enable_irq();
  }
}
     1ca:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      release(new_right);
     1ce:	b.w	c6f0 <AudioStream::release(audio_block_struct*)>
      release(new_left);
     1d2:	mov	r0, r4
     1d4:	bl	c6f0 <AudioStream::release(audio_block_struct*)>
  __disable_irq();
     1d8:	cpsid	i
  if (block_offset >= AUDIO_BLOCK_SAMPLES) {
     1da:	ldr	r3, [pc, #80]	; (22c <I2S_32::update()+0x90>)
     1dc:	ldrh	r2, [r3, #0]
     1de:	cmp	r2, #127	; 0x7f
     1e0:	bhi.n	1e6 <I2S_32::update()+0x4a>
    __enable_irq();
     1e2:	cpsie	i
}
     1e4:	pop	{r3, r4, r5, r6, r7, pc}
  audio_block_t *new_left=NULL, *new_right=NULL, *out_left=NULL, *out_right=NULL;
     1e6:	movs	r5, #0
  new_left = allocate();
     1e8:	mov	r4, r5
    out_left = block_left;
     1ea:	ldr	r0, [pc, #68]	; (230 <I2S_32::update()+0x94>)
    block_offset = 0;
     1ec:	movs	r2, #0
    out_right = block_right;
     1ee:	ldr	r1, [pc, #68]	; (234 <I2S_32::update()+0x98>)
    out_left = block_left;
     1f0:	ldr	r7, [r0, #0]
    block_offset = 0;
     1f2:	strh	r2, [r3, #0]
    block_left = new_left;
     1f4:	str	r4, [r0, #0]
    out_right = block_right;
     1f6:	ldr	r4, [r1, #0]
    block_right = new_right;
     1f8:	str	r5, [r1, #0]
    __enable_irq();
     1fa:	cpsie	i
    transmit(out_left, 0);
     1fc:	mov	r1, r7
     1fe:	mov	r0, r6
     200:	bl	c740 <AudioStream::transmit(audio_block_struct*, unsigned char)>
    release(out_left);
     204:	mov	r0, r7
     206:	bl	c6f0 <AudioStream::release(audio_block_struct*)>
    transmit(out_right, 1);
     20a:	mov	r0, r6
     20c:	mov	r1, r4
     20e:	movs	r2, #1
     210:	bl	c740 <AudioStream::transmit(audio_block_struct*, unsigned char)>
    release(out_right);
     214:	mov	r0, r4
}
     216:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    release(out_right);
     21a:	b.w	c6f0 <AudioStream::release(audio_block_struct*)>
      block_left = new_left;
     21e:	str	r4, [r1, #0]
      block_right = new_right;
     220:	ldr	r1, [pc, #16]	; (234 <I2S_32::update()+0x98>)
      block_offset = 0;
     222:	strh	r2, [r3, #0]
      block_right = new_right;
     224:	str	r0, [r1, #0]
      __enable_irq();
     226:	cpsie	i
}
     228:	pop	{r3, r4, r5, r6, r7, pc}
     22a:	nop
     22c:	.word	0x20007b5e
     230:	.word	0x200065d0
     234:	.word	0x200065d4

00000238 <SDFile::close()>:
	virtual void close() {
     238:	push	{r4, lr}
     23a:	mov	r4, r0
		if (filename) {
     23c:	ldr	r0, [r0, #88]	; 0x58
     23e:	cbz	r0, 248 <SDFile::close()+0x10>
			free(filename);
     240:	bl	d2ec <free>
			filename = nullptr;
     244:	movs	r3, #0
     246:	str	r3, [r4, #88]	; 0x58
     248:	ldr	r3, [r4, #80]	; 0x50
     24a:	cbz	r3, 258 <SDFile::close()+0x20>
			sdfatfile.close();
     24c:	add.w	r0, r4, #24
	}
     250:	ldmia.w	sp!, {r4, lr}
			sdfatfile.close();
     254:	b.w	7828 <FsBaseFile::close()>
     258:	ldr	r3, [r4, #84]	; 0x54
     25a:	cmp	r3, #0
     25c:	bne.n	24c <SDFile::close()+0x14>
	}
     25e:	pop	{r4, pc}

00000260 <DMAChannel::~DMAChannel()>:
	}
	DMAChannel & operator = (const DMASetting &rhs) {
		copy_tcd(TCD, rhs.TCD);
		return *this;
	}
	~DMAChannel() {
     260:	push	{r4, lr}
     262:	mov	r4, r0
		release();
     264:	bl	c410 <DMAChannel::release()>
	}
     268:	mov	r0, r4
     26a:	pop	{r4, pc}

0000026c <SDFile::name()>:
	virtual const char * name() {
     26c:	push	{r4, lr}
     26e:	mov	r4, r0
		if (!filename) {
     270:	ldr	r0, [r0, #88]	; 0x58
     272:	cbz	r0, 276 <SDFile::name()+0xa>
				static char zeroterm = 0;
				filename = &zeroterm;
			}
		}
		return filename;
	}
     274:	pop	{r4, pc}
			filename = (char *)malloc(MAX_FILENAME_LEN);
     276:	mov.w	r0, #256	; 0x100
     27a:	bl	d2dc <malloc>
     27e:	str	r0, [r4, #88]	; 0x58
			if (filename) {
     280:	cbz	r0, 2b0 <SDFile::name()+0x44>
    *name = 0;
     282:	movs	r2, #0
    return m_fFile   ? m_fFile->getName(name, len)
     284:	ldr	r3, [r4, #80]	; 0x50
    *name = 0;
     286:	strb	r2, [r0, #0]
    return m_fFile   ? m_fFile->getName(name, len)
     288:	cbz	r3, 29a <SDFile::name()+0x2e>
     28a:	mov	r1, r0
     28c:	mov.w	r2, #256	; 0x100
     290:	mov	r0, r3
     292:	bl	5b48 <FatFile::getName(char*, unsigned int)>
		return filename;
     296:	ldr	r0, [r4, #88]	; 0x58
	}
     298:	pop	{r4, pc}
     29a:	ldr	r3, [r4, #84]	; 0x54
           : m_xFile ? m_xFile->getName(name, len)
     29c:	cmp	r3, #0
     29e:	beq.n	274 <SDFile::name()+0x8>
   */
  size_t getName(char* name, size_t size) {
#if USE_UTF8_LONG_NAMES
    return getName8(name, size);
#else   // USE_UTF8_LONG_NAMES
    return getName7(name, size);
     2a0:	mov	r1, r0
     2a2:	mov.w	r2, #256	; 0x100
     2a6:	mov	r0, r3
     2a8:	bl	3ac8 <ExFatFile::getName7(char*, unsigned int)>
		return filename;
     2ac:	ldr	r0, [r4, #88]	; 0x58
	}
     2ae:	pop	{r4, pc}
				filename = &zeroterm;
     2b0:	ldr	r3, [pc, #4]	; (2b8 <SDFile::name()+0x4c>)
     2b2:	mov	r0, r3
     2b4:	str	r3, [r4, #88]	; 0x58
	}
     2b6:	pop	{r4, pc}
     2b8:	.word	0x20007b7d

000002bc <SDFile::truncate(unsigned long long)>:
	virtual bool truncate(uint64_t size=0) {
     2bc:	push	{r3, r4, r5, lr}
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint64_t length) {
    return m_fFile   ? length < (1ULL << 32) && m_fFile->truncate(length)
     2be:	ldr	r5, [r0, #80]	; 0x50
     2c0:	cbz	r5, 2de <SDFile::truncate(unsigned long long)+0x22>
     2c2:	cbz	r3, 2c8 <SDFile::truncate(unsigned long long)+0xc>
	}
     2c4:	movs	r0, #0
     2c6:	pop	{r3, r4, r5, pc}
   *
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint32_t length) { return seekSet(length) && truncate(); }
     2c8:	mov	r1, r2
     2ca:	mov	r0, r5
     2cc:	bl	6600 <FatFile::seekSet(unsigned long)>
     2d0:	cmp	r0, #0
     2d2:	beq.n	2c4 <SDFile::truncate(unsigned long long)+0x8>
     2d4:	mov	r0, r5
     2d6:	ldmia.w	sp!, {r3, r4, r5, lr}
     2da:	b.w	694c <FatFile::truncate()>
     2de:	ldr	r4, [r0, #84]	; 0x54
           : m_xFile ? m_xFile->truncate(length)
     2e0:	cmp	r4, #0
     2e2:	beq.n	2c4 <SDFile::truncate(unsigned long long)+0x8>
   *
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint64_t length) { return seekSet(length) && truncate(); }
     2e4:	mov	r0, r4
     2e6:	bl	3edc <ExFatFile::seekSet(unsigned long long)>
     2ea:	cmp	r0, #0
     2ec:	beq.n	2c4 <SDFile::truncate(unsigned long long)+0x8>
     2ee:	mov	r0, r4
     2f0:	ldmia.w	sp!, {r3, r4, r5, lr}
     2f4:	b.w	5124 <ExFatFile::truncate()>

000002f8 <SDFile::setCreateTime(DateTimeFields const&)>:
		tm.mon = FS_MONTH(fat_date) - 1;
		tm.year = FS_YEAR(fat_date) - 1900;
		return true;
	}
	virtual bool setCreateTime(const DateTimeFields &tm) {
		if (tm.year < 80 || tm.year > 207) return false;
     2f8:	ldrb	r2, [r1, #6]
     2fa:	sub.w	r3, r2, #80	; 0x50
     2fe:	lsls	r3, r3, #24
     300:	bmi.n	348 <SDFile::setCreateTime(DateTimeFields const&)+0x50>
		return sdfatfile.timestamp(T_CREATE, tm.year + 1900, tm.mon + 1,
     302:	addw	r2, r2, #1900	; 0x76c
	virtual bool setCreateTime(const DateTimeFields &tm) {
     306:	push	{r4, r5, r6, r7, lr}
		return sdfatfile.timestamp(T_CREATE, tm.year + 1900, tm.mon + 1,
     308:	ldrb	r3, [r1, #5]
	virtual bool setCreateTime(const DateTimeFields &tm) {
     30a:	sub	sp, #20
    return m_fFile   ? m_fFile->timestamp(flags, year, month, day, hour, minute,
     30c:	ldr	r4, [r0, #80]	; 0x50
		return sdfatfile.timestamp(T_CREATE, tm.year + 1900, tm.mon + 1,
     30e:	adds	r3, #1
			tm.mday, tm.hour, tm.min, tm.sec);
     310:	ldrb	r5, [r1, #4]
     312:	ldrb	r6, [r1, #2]
     314:	ldrb	r7, [r1, #1]
		return sdfatfile.timestamp(T_CREATE, tm.year + 1900, tm.mon + 1,
     316:	uxtb	r3, r3
			tm.mday, tm.hour, tm.min, tm.sec);
     318:	ldrb	r1, [r1, #0]
     31a:	cbz	r4, 330 <SDFile::setCreateTime(DateTimeFields const&)+0x38>
     31c:	mov	r0, r4
     31e:	str	r6, [sp, #4]
     320:	str	r5, [sp, #0]
     322:	strd	r7, r1, [sp, #8]
     326:	movs	r1, #2
     328:	bl	6874 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
	}
     32c:	add	sp, #20
     32e:	pop	{r4, r5, r6, r7, pc}
     330:	ldr	r0, [r0, #84]	; 0x54
           : m_xFile ? m_xFile->timestamp(flags, year, month, day, hour, minute,
     332:	cmp	r0, #0
     334:	beq.n	32c <SDFile::setCreateTime(DateTimeFields const&)+0x34>
     336:	str	r6, [sp, #4]
     338:	str	r5, [sp, #0]
     33a:	strd	r7, r1, [sp, #8]
     33e:	movs	r1, #2
     340:	bl	4fac <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
     344:	add	sp, #20
     346:	pop	{r4, r5, r6, r7, pc}
		if (tm.year < 80 || tm.year > 207) return false;
     348:	movs	r0, #0
	}
     34a:	bx	lr

0000034c <SDFile::rewindDirectory()>:
	virtual void rewindDirectory(void) {
     34c:	push	{r4, lr}
     34e:	mov	r4, r0
    return m_fFile ? m_fFile->isDir() : m_xFile ? m_xFile->isDir() : false;
     350:	ldr	r0, [r0, #80]	; 0x50
     352:	cbz	r0, 376 <SDFile::rewindDirectory()+0x2a>
   * If an error occurs or end of file is reached return -1.
   */
  int read() { return BaseFile::read(); }
  /** Rewind a file if it is a directory */
  void rewindDirectory() {
    if (BaseFile::isDir()) {
     354:	ldrb	r3, [r0, #0]
     356:	tst.w	r3, #208	; 0xd0
     35a:	bne.n	35e <SDFile::rewindDirectory()+0x12>
	}
     35c:	pop	{r4, pc}
  void rewind() { seekSet(0); }
     35e:	movs	r1, #0
     360:	bl	6600 <FatFile::seekSet(unsigned long)>
    if (m_xFile) m_xFile->rewind();
     364:	ldr	r0, [r4, #84]	; 0x54
     366:	cmp	r0, #0
     368:	beq.n	35c <SDFile::rewindDirectory()+0x10>
  void rewind() { seekSet(0); }
     36a:	movs	r2, #0
     36c:	movs	r3, #0
     36e:	ldmia.w	sp!, {r4, lr}
     372:	b.w	3edc <ExFatFile::seekSet(unsigned long long)>
     376:	ldr	r0, [r4, #84]	; 0x54
    return m_fFile ? m_fFile->isDir() : m_xFile ? m_xFile->isDir() : false;
     378:	cmp	r0, #0
     37a:	beq.n	35c <SDFile::rewindDirectory()+0x10>
     37c:	ldrb.w	r3, [r0, #49]	; 0x31
     380:	tst.w	r3, #80	; 0x50
     384:	beq.n	35c <SDFile::rewindDirectory()+0x10>
     386:	movs	r2, #0
     388:	movs	r3, #0
     38a:	ldmia.w	sp!, {r4, lr}
     38e:	b.w	3edc <ExFatFile::seekSet(unsigned long long)>
			}
			break;
		  case 0xFA: // usbMIDI.Start
			if (usb_midi_handleStart) {
				(*usb_midi_handleStart)();
			} else if (usb_midi_handleRealTimeSystem) {
     392:	nop

00000394 <SDFile::getModifyTime(DateTimeFields&)>:
    return m_fFile   ? m_fFile->getModifyDateTime(pdate, ptime)
     394:	ldr	r3, [r0, #80]	; 0x50
	virtual bool getModifyTime(DateTimeFields &tm) {
     396:	push	{r4, lr}
     398:	mov	r4, r1
     39a:	sub	sp, #8
     39c:	cbz	r3, 3ea <SDFile::getModifyTime(DateTimeFields&)+0x56>
     39e:	add.w	r2, sp, #6
     3a2:	add	r1, sp, #4
     3a4:	mov	r0, r3
     3a6:	bl	5d68 <FatFile::getModifyDateTime(unsigned short*, unsigned short*)>
		if (!sdfatfile.getModifyDateTime(&fat_date, &fat_time)) return false;
     3aa:	cbz	r0, 3fc <SDFile::getModifyTime(DateTimeFields&)+0x68>
		if ((fat_date == 0) && (fat_time == 0)) return false;
     3ac:	ldrh.w	r3, [sp, #4]
     3b0:	ldrh.w	r2, [sp, #6]
     3b4:	orrs.w	r1, r3, r2
     3b8:	beq.n	3fc <SDFile::getModifyTime(DateTimeFields&)+0x68>
 * \param[in] fatTime Time in packed dir format.
 *
 * \return Extracted minute [0,59]
 */
static inline uint8_t FS_MINUTE(uint16_t fatTime) {
  return (fatTime >> 5) & 0X3F;
     3ba:	ubfx	ip, r2, #5, #6
 * \param[in] fatTime Time in packed dir format.
 *
 * \return Extracted second [0,58]
 */
static inline uint8_t FS_SECOND(uint16_t fatTime) {
  return 2 * (fatTime & 0X1F);
     3be:	and.w	r0, r2, #31
static inline uint8_t FS_HOUR(uint16_t fatTime) { return fatTime >> 11; }
     3c2:	lsrs	r2, r2, #11
  return (fatDate >> 5) & 0XF;
     3c4:	ubfx	r1, r3, #5, #4
  return 2 * (fatTime & 0X1F);
     3c8:	lsls	r0, r0, #1
		tm.min = FS_MINUTE(fat_time);
     3ca:	strb.w	ip, [r4, #1]
static inline uint8_t FS_HOUR(uint16_t fatTime) { return fatTime >> 11; }
     3ce:	strb	r2, [r4, #2]
  return 1980 + (fatDate >> 9);
     3d0:	lsrs	r2, r3, #9
		tm.mon = FS_MONTH(fat_date) - 1;
     3d2:	subs	r1, #1
static inline uint8_t FS_DAY(uint16_t fatDate) { return fatDate & 0X1F; }
     3d4:	and.w	r3, r3, #31
		tm.year = FS_YEAR(fat_date) - 1900;
     3d8:	add.w	r2, r2, #1872	; 0x750
		tm.sec = FS_SECOND(fat_time);
     3dc:	strb	r0, [r4, #0]
		return true;
     3de:	movs	r0, #1
		tm.mon = FS_MONTH(fat_date) - 1;
     3e0:	strb	r1, [r4, #5]
		tm.mday = FS_DAY(fat_date);
     3e2:	strb	r3, [r4, #4]
		tm.year = FS_YEAR(fat_date) - 1900;
     3e4:	strb	r2, [r4, #6]
	}
     3e6:	add	sp, #8
     3e8:	pop	{r4, pc}
     3ea:	ldr	r0, [r0, #84]	; 0x54
           : m_xFile ? m_xFile->getModifyDateTime(pdate, ptime)
     3ec:	cbz	r0, 3fc <SDFile::getModifyTime(DateTimeFields&)+0x68>
     3ee:	add.w	r2, sp, #6
     3f2:	add	r1, sp, #4
     3f4:	bl	3c24 <ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)>
     3f8:	cmp	r0, #0
     3fa:	bne.n	3ac <SDFile::getModifyTime(DateTimeFields&)+0x18>
		if (!sdfatfile.getModifyDateTime(&fat_date, &fat_time)) return false;
     3fc:	movs	r0, #0
	}
     3fe:	add	sp, #8
     400:	pop	{r4, pc}
			#endif //defined(AUDIO_PT8211_INTERPOLATION_LINEAR)
		#else
			memcpy_tointerleaveL(dest, blockL->data + offsetL);
			offsetL += (AUDIO_BLOCK_SAMPLES / 2);
		#endif //defined(AUDIO_PT8211_OVERSAMPLING)
	} else if (blockR) {
     402:	nop

00000404 <SDFile::getCreateTime(DateTimeFields&)>:
    return m_fFile   ? m_fFile->getCreateDateTime(pdate, ptime)
     404:	ldr	r3, [r0, #80]	; 0x50
	virtual bool getCreateTime(DateTimeFields &tm) {
     406:	push	{r4, lr}
     408:	mov	r4, r1
     40a:	sub	sp, #8
     40c:	cbz	r3, 45a <SDFile::getCreateTime(DateTimeFields&)+0x56>
     40e:	add.w	r2, sp, #6
     412:	add	r1, sp, #4
     414:	mov	r0, r3
     416:	bl	5d48 <FatFile::getCreateDateTime(unsigned short*, unsigned short*)>
		if (!sdfatfile.getCreateDateTime(&fat_date, &fat_time)) return false;
     41a:	cbz	r0, 46c <SDFile::getCreateTime(DateTimeFields&)+0x68>
		if ((fat_date == 0) && (fat_time == 0)) return false;
     41c:	ldrh.w	r3, [sp, #4]
     420:	ldrh.w	r2, [sp, #6]
     424:	orrs.w	r1, r3, r2
     428:	beq.n	46c <SDFile::getCreateTime(DateTimeFields&)+0x68>
  return (fatTime >> 5) & 0X3F;
     42a:	ubfx	ip, r2, #5, #6
  return 2 * (fatTime & 0X1F);
     42e:	and.w	r0, r2, #31
static inline uint8_t FS_HOUR(uint16_t fatTime) { return fatTime >> 11; }
     432:	lsrs	r2, r2, #11
  return (fatDate >> 5) & 0XF;
     434:	ubfx	r1, r3, #5, #4
  return 2 * (fatTime & 0X1F);
     438:	lsls	r0, r0, #1
		tm.min = FS_MINUTE(fat_time);
     43a:	strb.w	ip, [r4, #1]
static inline uint8_t FS_HOUR(uint16_t fatTime) { return fatTime >> 11; }
     43e:	strb	r2, [r4, #2]
  return 1980 + (fatDate >> 9);
     440:	lsrs	r2, r3, #9
		tm.mon = FS_MONTH(fat_date) - 1;
     442:	subs	r1, #1
static inline uint8_t FS_DAY(uint16_t fatDate) { return fatDate & 0X1F; }
     444:	and.w	r3, r3, #31
		tm.year = FS_YEAR(fat_date) - 1900;
     448:	add.w	r2, r2, #1872	; 0x750
		tm.sec = FS_SECOND(fat_time);
     44c:	strb	r0, [r4, #0]
		return true;
     44e:	movs	r0, #1
		tm.mon = FS_MONTH(fat_date) - 1;
     450:	strb	r1, [r4, #5]
		tm.mday = FS_DAY(fat_date);
     452:	strb	r3, [r4, #4]
		tm.year = FS_YEAR(fat_date) - 1900;
     454:	strb	r2, [r4, #6]
	}
     456:	add	sp, #8
     458:	pop	{r4, pc}
     45a:	ldr	r0, [r0, #84]	; 0x54
           : m_xFile ? m_xFile->getCreateDateTime(pdate, ptime)
     45c:	cbz	r0, 46c <SDFile::getCreateTime(DateTimeFields&)+0x68>
     45e:	add.w	r2, sp, #6
     462:	add	r1, sp, #4
     464:	bl	3c00 <ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)>
     468:	cmp	r0, #0
     46a:	bne.n	41c <SDFile::getCreateTime(DateTimeFields&)+0x18>
		if (!sdfatfile.getCreateDateTime(&fat_date, &fat_time)) return false;
     46c:	movs	r0, #0
	}
     46e:	add	sp, #8
     470:	pop	{r4, pc}
						static int32_t integrateROld[3] = {0};
						integrateR[0] = ( (j==0) ? (combR[2]) : (0) ) + integrateROld[0];
						integrateR[1] = integrateR[0] + integrateROld[1];
						integrateR[2] = integrateR[1] + integrateROld[2];
						// integrateR[2] now holds j'th upsampled value
						*(dest+j*2+1) = integrateR[2] >> 4;
     472:	nop

00000474 <File::available()>:
	size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
	}
	// Returns the number of bytes which may be read from a file
	int available() {
		return (f) ? f->available() : 0;
     474:	ldr	r0, [r0, #16]
     476:	cbz	r0, 49e <File::available()+0x2a>
     478:	ldr	r3, [r0, #0]
     47a:	ldr	r2, [pc, #84]	; (4d0 <File::available()+0x5c>)
     47c:	ldr	r3, [r3, #16]
     47e:	cmp	r3, r2
     480:	bne.n	4ce <File::available()+0x5a>
    return m_fFile ? m_fFile->available() : m_xFile ? m_xFile->available() : 0;
     482:	ldr	r3, [r0, #80]	; 0x50
     484:	cbz	r3, 4a0 <File::available()+0x2c>
    return isFile() ? fileSize() - curPosition() : 0;
     486:	ldrb	r0, [r3, #0]
     488:	ands.w	r0, r0, #8
     48c:	beq.n	49e <File::available()+0x2a>
     48e:	ldr	r0, [r3, #28]
     490:	ldr	r3, [r3, #20]
    return n > INT_MAX ? INT_MAX : n;
     492:	subs	r0, r0, r3
     494:	it	mi
     496:	mvnmi.w	r0, #2147483648	; 0x80000000
     49a:	bx	lr
     49c:	mov	r0, r3
	}
     49e:	bx	lr
     4a0:	ldr	r3, [r0, #84]	; 0x54
     4a2:	cmp	r3, #0
     4a4:	beq.n	49c <File::available()+0x28>
  uint64_t available64() { return isFile() ? fileSize() - curPosition() : 0; }
     4a6:	ldrb.w	r0, [r3, #49]	; 0x31
     4aa:	ands.w	r0, r0, #8
     4ae:	beq.n	49e <File::available()+0x2a>
     4b0:	ldr	r0, [r3, #16]
     4b2:	ldr	r1, [r3, #0]
     4b4:	ldr	r2, [r3, #20]
     4b6:	subs	r0, r0, r1
     4b8:	ldr	r3, [r3, #4]
     4ba:	sbc.w	r3, r2, r3
    return n > INT_MAX ? INT_MAX : n;
     4be:	cmp.w	r0, #2147483648	; 0x80000000
     4c2:	sbcs.w	r3, r3, #0
     4c6:	bcc.n	49e <File::available()+0x2a>
     4c8:	mvn.w	r0, #2147483648	; 0x80000000
     4cc:	bx	lr
		return (f) ? f->available() : 0;
     4ce:	bx	r3
     4d0:	.word	0x000007e9

000004d4 <File::flush()>:
	int peek() {
		return (f) ? f->peek() : -1;
	}
	void flush() {
		if (f) f->flush();
     4d4:	ldr	r3, [r0, #16]
     4d6:	cbz	r3, 4f2 <File::flush()+0x1e>
     4d8:	ldr	r2, [r3, #0]
     4da:	ldr	r1, [pc, #28]	; (4f8 <File::flush()+0x24>)
     4dc:	ldr	r2, [r2, #24]
     4de:	cmp	r2, r1
     4e0:	bne.n	4f4 <File::flush()+0x20>
    return m_fFile ? m_fFile->sync() : m_xFile ? m_xFile->sync() : false;
     4e2:	ldr	r0, [r3, #80]	; 0x50
     4e4:	cbz	r0, 4ea <File::flush()+0x16>
     4e6:	b.w	6868 <FatFile::sync()>
     4ea:	ldr	r0, [r3, #84]	; 0x54
     4ec:	cbz	r0, 4f2 <File::flush()+0x1e>
     4ee:	b.w	4cc4 <ExFatFile::sync()>
	}
     4f2:	bx	lr
		if (f) f->flush();
     4f4:	mov	r0, r3
     4f6:	bx	r2
     4f8:	.word	0x00000711

000004fc <File::peek()>:
		return (f) ? f->peek() : -1;
     4fc:	ldr	r3, [r0, #16]
     4fe:	cbz	r3, 51e <File::peek()+0x22>
     500:	ldr	r2, [r3, #0]
     502:	ldr	r1, [pc, #32]	; (524 <File::peek()+0x28>)
     504:	ldr	r2, [r2, #20]
     506:	cmp	r2, r1
     508:	bne.n	51a <File::peek()+0x1e>
    return m_fFile ? m_fFile->peek() : m_xFile ? m_xFile->peek() : -1;
     50a:	ldr	r0, [r3, #80]	; 0x50
     50c:	cbz	r0, 512 <File::peek()+0x16>
     50e:	b.w	6318 <FatFile::peek()>
     512:	ldr	r0, [r3, #84]	; 0x54
     514:	cbz	r0, 51e <File::peek()+0x22>
     516:	b.w	3eb0 <ExFatFile::peek()>
     51a:	mov	r0, r3
     51c:	bx	r2
	}
     51e:	mov.w	r0, #4294967295
     522:	bx	lr
     524:	.word	0x00000681

00000528 <File::read()>:
	}
	bool seek(uint64_t pos) {
		return seek(pos, SeekSet);
	}
	int read() {
		if (!f) return -1;
     528:	ldr	r3, [r0, #16]
     52a:	cbz	r3, 576 <File::read()+0x4e>
		unsigned char b;
		if (f->read(&b, 1) < 1) return -1;
     52c:	ldr	r1, [r3, #0]
     52e:	ldr	r2, [pc, #76]	; (57c <File::read()+0x54>)
	int read() {
     530:	push	{r4, lr}
		if (f->read(&b, 1) < 1) return -1;
     532:	ldr	r4, [r1, #8]
	int read() {
     534:	sub	sp, #8
     536:	cmp	r4, r2
     538:	bne.n	564 <File::read()+0x3c>
    return m_fFile   ? m_fFile->read(buf, count)
     53a:	ldr	r0, [r3, #80]	; 0x50
     53c:	cbz	r0, 552 <File::read()+0x2a>
     53e:	movs	r2, #1
     540:	add.w	r1, sp, #7
     544:	bl	6170 <FatFile::read(void*, unsigned int)>
		if (f->read(&b, 1) < 1) return -1;
     548:	cbz	r0, 570 <File::read()+0x48>
		return b;
     54a:	ldrb.w	r0, [sp, #7]
	}
     54e:	add	sp, #8
     550:	pop	{r4, pc}
     552:	ldr	r0, [r3, #84]	; 0x54
           : m_xFile ? m_xFile->read(buf, count)
     554:	cmp	r0, #0
     556:	beq.n	54a <File::read()+0x22>
     558:	movs	r2, #1
     55a:	add.w	r1, sp, #7
     55e:	bl	3d10 <ExFatFile::read(void*, unsigned int)>
     562:	b.n	548 <File::read()+0x20>
		if (f->read(&b, 1) < 1) return -1;
     564:	movs	r2, #1
     566:	add.w	r1, sp, #7
     56a:	mov	r0, r3
     56c:	blx	r4
     56e:	b.n	548 <File::read()+0x20>
		if (!f) return -1;
     570:	mov.w	r0, #4294967295
     574:	b.n	54e <File::read()+0x26>
     576:	mov.w	r0, #4294967295
	}
     57a:	bx	lr
     57c:	.word	0x000006c1

00000580 <SDFile::position()>:
    return m_fFile   ? m_fFile->curPosition()
     580:	ldr	r3, [r0, #80]	; 0x50
     582:	cbz	r3, 58a <SDFile::position()+0xa>
     584:	ldr	r0, [r3, #20]
     586:	movs	r1, #0
     588:	bx	lr
     58a:	ldr	r3, [r0, #84]	; 0x54
           : m_xFile ? m_xFile->curPosition()
     58c:	cbz	r3, 594 <SDFile::position()+0x14>
  uint64_t curPosition() const { return m_curPosition; }
     58e:	ldrd	r0, r1, [r3]
     592:	bx	lr
     594:	mov	r0, r3
     596:	mov	r1, r3
	}
     598:	bx	lr
     59a:	nop

0000059c <SDFile::size()>:
    return m_fFile ? m_fFile->fileSize() : m_xFile ? m_xFile->fileSize() : 0;
     59c:	ldr	r3, [r0, #80]	; 0x50
     59e:	cbz	r3, 5a6 <SDFile::size()+0xa>
     5a0:	ldr	r0, [r3, #28]
     5a2:	movs	r1, #0
     5a4:	bx	lr
     5a6:	ldr	r3, [r0, #84]	; 0x54
     5a8:	cbz	r3, 5b0 <SDFile::size()+0x14>
  uint64_t fileSize() const { return m_validLength; }
     5aa:	ldrd	r0, r1, [r3, #16]
     5ae:	bx	lr
     5b0:	mov	r0, r3
     5b2:	mov	r1, r3
	}
     5b4:	bx	lr
     5b6:	nop

000005b8 <SDFile::openNextFile(unsigned char)>:
	virtual File openNextFile(uint8_t mode=0) {
     5b8:	push	{r4, r5, r6, r7, lr}
     5ba:	sub	sp, #84	; 0x54
	constexpr Print() : write_error(0) {}
     5bc:	movs	r2, #0
#include "Print.h"

class Stream : public Print
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     5be:	mov.w	r4, #1000	; 0x3e8
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     5c2:	ldr	r7, [pc, #144]	; (654 <SDFile::openNextFile(unsigned char)+0x9c>)
   * \param[in] oflag open flags.
   * \return a FatStream object.
   */
  FsFile openNextFile(oflag_t oflag = O_RDONLY) {
    FsFile tmpFile;
    tmpFile.openNext(this, oflag);
     5c4:	adds	r1, #24
     5c6:	mov	r5, r0
     5c8:	add	r0, sp, #16
     5ca:	strb.w	r2, [sp, #4]
     5ce:	str	r4, [sp, #8]
     5d0:	strb.w	r2, [sp, #12]
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     5d4:	str	r7, [sp, #0]
  FsBaseFile() = default;
     5d6:	strd	r2, r2, [sp, #72]	; 0x48
    tmpFile.openNext(this, oflag);
     5da:	bl	78f8 <FsBaseFile::openNext(FsBaseFile*, int)>
  bool isOpen() const { return m_fFile || m_xFile; }
     5de:	ldr	r3, [sp, #72]	; 0x48
     5e0:	cbz	r3, 640 <SDFile::openNextFile(unsigned char)+0x88>
		if (file) return File(new SDFile(file));
     5e2:	movs	r0, #92	; 0x5c
class FileImpl {
     5e4:	movs	r6, #0
     5e6:	bl	d144 <operator new(unsigned int)>
class Print
     5ea:	ldrb.w	r3, [sp, #4]
     5ee:	mov	r4, r0
     5f0:	str	r6, [r0, #4]
     5f2:	strb	r3, [r0, #12]
class StreamFile : public stream_t, public BaseFile {
     5f4:	add	r1, sp, #16
class Stream : public Print
     5f6:	ldr	r3, [sp, #8]
     5f8:	adds	r0, #24
     5fa:	str.w	r3, [r0, #-8]
     5fe:	ldrb.w	r3, [sp, #12]
     602:	strb.w	r3, [r0, #-4]
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
     606:	ldr	r3, [pc, #80]	; (658 <SDFile::openNextFile(unsigned char)+0xa0>)
     608:	str.w	r3, [r0, #-24]
     60c:	ldr	r3, [pc, #76]	; (65c <SDFile::openNextFile(unsigned char)+0xa4>)
     60e:	str.w	r3, [r0, #-16]
     612:	bl	77a4 <FsBaseFile::FsBaseFile(FsBaseFile const&)>
	File(FileImpl *file) {
     616:	ldr	r3, [pc, #72]	; (660 <SDFile::openNextFile(unsigned char)+0xa8>)
	constexpr Stream() : _timeout(1000), read_error(0) {}
     618:	mov.w	r2, #1000	; 0x3e8
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     61c:	str	r7, [r4, #8]
     61e:	str	r3, [r5, #0]
		if (f) f->refcount++;
     620:	ldr	r3, [r4, #4]
     622:	str	r6, [r4, #88]	; 0x58
     624:	adds	r3, #1
	constexpr Print() : write_error(0) {}
     626:	strb	r6, [r5, #4]
     628:	strb	r6, [r5, #12]
     62a:	str	r2, [r5, #8]
		f = file;
     62c:	str	r4, [r5, #16]
		if (f) f->refcount++;
     62e:	str	r3, [r4, #4]
     630:	ldr	r3, [pc, #48]	; (664 <SDFile::openNextFile(unsigned char)+0xac>)
  ~FsBaseFile() { close(); }
     632:	add	r0, sp, #16
     634:	str	r3, [sp, #0]
     636:	bl	7828 <FsBaseFile::close()>
	}
     63a:	mov	r0, r5
     63c:	add	sp, #84	; 0x54
     63e:	pop	{r4, r5, r6, r7, pc}
  bool isOpen() const { return m_fFile || m_xFile; }
     640:	ldr	r3, [sp, #76]	; 0x4c
     642:	cmp	r3, #0
     644:	bne.n	5e2 <SDFile::openNextFile(unsigned char)+0x2a>
	constexpr File() : f(nullptr) { }
     646:	ldr	r2, [pc, #24]	; (660 <SDFile::openNextFile(unsigned char)+0xa8>)
     648:	strb	r3, [r5, #4]
     64a:	str	r4, [r5, #8]
     64c:	strb	r3, [r5, #12]
     64e:	str	r2, [r5, #0]
     650:	str	r3, [r5, #16]
     652:	b.n	630 <SDFile::openNextFile(unsigned char)+0x78>
     654:	.word	0x20000ab8
     658:	.word	0x20000ae8
     65c:	.word	0x20000b44
     660:	.word	0x20000a8c
     664:	.word	0x2000099c

00000668 <StreamFile<FsBaseFile, unsigned long long>::peek()>:
    return m_fFile ? m_fFile->peek() : m_xFile ? m_xFile->peek() : -1;
     668:	ldr	r3, [r0, #72]	; 0x48
     66a:	cbz	r3, 672 <StreamFile<FsBaseFile, unsigned long long>::peek()+0xa>
     66c:	mov	r0, r3
     66e:	b.w	6318 <FatFile::peek()>
     672:	ldr	r0, [r0, #76]	; 0x4c
     674:	cbz	r0, 67a <StreamFile<FsBaseFile, unsigned long long>::peek()+0x12>
     676:	b.w	3eb0 <ExFatFile::peek()>
  int peek() { return BaseFile::peek(); }
     67a:	mov.w	r0, #4294967295
     67e:	bx	lr

00000680 <SDFile::peek()>:
     680:	ldr	r3, [r0, #80]	; 0x50
     682:	cbz	r3, 68a <SDFile::peek()+0xa>
     684:	mov	r0, r3
     686:	b.w	6318 <FatFile::peek()>
     68a:	ldr	r0, [r0, #84]	; 0x54
     68c:	cbz	r0, 692 <SDFile::peek()+0x12>
     68e:	b.w	3eb0 <ExFatFile::peek()>
	}
     692:	mov.w	r0, #4294967295
     696:	bx	lr

00000698 <SDFile::isDirectory()>:
    return m_fFile ? m_fFile->isDir() : m_xFile ? m_xFile->isDir() : false;
     698:	ldr	r3, [r0, #80]	; 0x50
     69a:	cbz	r3, 6aa <SDFile::isDirectory()+0x12>
  bool isDir() const { return m_attributes & FILE_ATTR_DIR; }
     69c:	ldrb	r3, [r3, #0]
     69e:	tst.w	r3, #208	; 0xd0
     6a2:	ite	ne
     6a4:	movne	r0, #1
     6a6:	moveq	r0, #0
     6a8:	bx	lr
     6aa:	ldr	r0, [r0, #84]	; 0x54
     6ac:	cbz	r0, 6bc <SDFile::isDirectory()+0x24>
     6ae:	ldrb.w	r3, [r0, #49]	; 0x31
     6b2:	tst.w	r3, #80	; 0x50
     6b6:	ite	ne
     6b8:	movne	r0, #1
     6ba:	moveq	r0, #0
	}
     6bc:	bx	lr
     6be:	nop

000006c0 <SDFile::read(void*, unsigned int)>:
    return m_fFile   ? m_fFile->read(buf, count)
     6c0:	ldr	r3, [r0, #80]	; 0x50
     6c2:	cbz	r3, 6ca <SDFile::read(void*, unsigned int)+0xa>
     6c4:	mov	r0, r3
     6c6:	b.w	6170 <FatFile::read(void*, unsigned int)>
     6ca:	ldr	r0, [r0, #84]	; 0x54
           : m_xFile ? m_xFile->read(buf, count)
     6cc:	cbz	r0, 6d2 <SDFile::read(void*, unsigned int)+0x12>
     6ce:	b.w	3d10 <ExFatFile::read(void*, unsigned int)>
	}
     6d2:	mov.w	r0, #4294967295
     6d6:	bx	lr

000006d8 <StreamFile<FsBaseFile, unsigned long long>::read()>:
    return m_fFile   ? m_fFile->read(buf, count)
     6d8:	ldr	r3, [r0, #72]	; 0x48
  int read() { return BaseFile::read(); }
     6da:	push	{lr}
     6dc:	sub	sp, #12
     6de:	cbz	r3, 6fa <StreamFile<FsBaseFile, unsigned long long>::read()+0x22>
     6e0:	movs	r2, #1
     6e2:	add.w	r1, sp, #7
     6e6:	mov	r0, r3
     6e8:	bl	6170 <FatFile::read(void*, unsigned int)>
    return read(&b, 1) == 1 ? b : -1;
     6ec:	cmp	r0, #1
     6ee:	bne.n	70a <StreamFile<FsBaseFile, unsigned long long>::read()+0x32>
     6f0:	ldrb.w	r0, [sp, #7]
     6f4:	add	sp, #12
     6f6:	ldr.w	pc, [sp], #4
     6fa:	ldr	r0, [r0, #76]	; 0x4c
           : m_xFile ? m_xFile->read(buf, count)
     6fc:	cbz	r0, 70a <StreamFile<FsBaseFile, unsigned long long>::read()+0x32>
     6fe:	movs	r2, #1
     700:	add.w	r1, sp, #7
     704:	bl	3d10 <ExFatFile::read(void*, unsigned int)>
     708:	b.n	6ec <StreamFile<FsBaseFile, unsigned long long>::read()+0x14>
    return read(&b, 1) == 1 ? b : -1;
     70a:	mov.w	r0, #4294967295
     70e:	b.n	6f4 <StreamFile<FsBaseFile, unsigned long long>::read()+0x1c>

00000710 <SDFile::flush()>:
    return m_fFile ? m_fFile->sync() : m_xFile ? m_xFile->sync() : false;
     710:	ldr	r3, [r0, #80]	; 0x50
     712:	cbz	r3, 71a <SDFile::flush()+0xa>
     714:	mov	r0, r3
     716:	b.w	6868 <FatFile::sync()>
     71a:	ldr	r0, [r0, #84]	; 0x54
     71c:	cbz	r0, 722 <SDFile::flush()+0x12>
     71e:	b.w	4cc4 <ExFatFile::sync()>
	}
     722:	bx	lr

00000724 <StreamFile<FsBaseFile, unsigned long long>::flush()>:
     724:	ldr	r3, [r0, #72]	; 0x48
     726:	cbz	r3, 72e <StreamFile<FsBaseFile, unsigned long long>::flush()+0xa>
     728:	mov	r0, r3
     72a:	b.w	6868 <FatFile::sync()>
     72e:	ldr	r0, [r0, #76]	; 0x4c
     730:	cbz	r0, 736 <StreamFile<FsBaseFile, unsigned long long>::flush()+0x12>
     732:	b.w	4cc4 <ExFatFile::sync()>
  void flush() { BaseFile::sync(); }
     736:	bx	lr

00000738 <SDFile::write(void const*, unsigned int)>:
    return m_fFile   ? m_fFile->write(buf, count)
     738:	ldr	r3, [r0, #80]	; 0x50
     73a:	cbz	r3, 742 <SDFile::write(void const*, unsigned int)+0xa>
     73c:	mov	r0, r3
     73e:	b.w	69c0 <FatFile::write(void const*, unsigned int)>
     742:	ldr	r0, [r0, #84]	; 0x54
           : m_xFile ? m_xFile->write(buf, count)
     744:	cbz	r0, 74a <SDFile::write(void const*, unsigned int)+0x12>
     746:	b.w	5208 <ExFatFile::write(void const*, unsigned int)>
	}
     74a:	bx	lr

0000074c <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)>:
    return m_fFile   ? m_fFile->write(buf, count)
     74c:	ldr	r3, [r0, #72]	; 0x48
     74e:	cbz	r3, 756 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0xa>
     750:	mov	r0, r3
     752:	b.w	69c0 <FatFile::write(void const*, unsigned int)>
     756:	ldr	r0, [r0, #76]	; 0x4c
           : m_xFile ? m_xFile->write(buf, count)
     758:	cbz	r0, 75e <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0x12>
     75a:	b.w	5208 <ExFatFile::write(void const*, unsigned int)>
   * \return For success write() returns the number of bytes written, always
   * \a size.
   */
  size_t write(const uint8_t* buffer, size_t size) {
    return BaseFile::write(buffer, size);
  }
     75e:	bx	lr

00000760 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)>:
  size_t write(uint8_t b) { return BaseFile::write(b); }
     760:	push	{lr}
    return m_fFile   ? m_fFile->write(buf, count)
     762:	ldr	r3, [r0, #72]	; 0x48
     764:	sub	sp, #12
     766:	strb.w	r1, [sp, #7]
     76a:	cbz	r3, 77e <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x1e>
     76c:	movs	r2, #1
     76e:	add.w	r1, sp, #7
     772:	mov	r0, r3
     774:	bl	69c0 <FatFile::write(void const*, unsigned int)>
     778:	add	sp, #12
     77a:	ldr.w	pc, [sp], #4
     77e:	ldr	r0, [r0, #76]	; 0x4c
           : m_xFile ? m_xFile->write(buf, count)
     780:	cmp	r0, #0
     782:	beq.n	778 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x18>
     784:	movs	r2, #1
     786:	add.w	r1, sp, #7
     78a:	bl	5208 <ExFatFile::write(void const*, unsigned int)>
     78e:	add	sp, #12
     790:	ldr.w	pc, [sp], #4

00000794 <SDFile::setModifyTime(DateTimeFields const&)>:
	virtual bool setModifyTime(const DateTimeFields &tm) {
		if (tm.year < 80 || tm.year > 207) return false;
     794:	ldrb	r2, [r1, #6]
     796:	sub.w	r3, r2, #80	; 0x50
     79a:	lsls	r3, r3, #24
     79c:	bmi.n	7e4 <SDFile::setModifyTime(DateTimeFields const&)+0x50>
		return sdfatfile.timestamp(T_WRITE, tm.year + 1900, tm.mon + 1,
     79e:	addw	r2, r2, #1900	; 0x76c
	virtual bool setModifyTime(const DateTimeFields &tm) {
     7a2:	push	{r4, r5, r6, r7, lr}
		return sdfatfile.timestamp(T_WRITE, tm.year + 1900, tm.mon + 1,
     7a4:	ldrb	r3, [r1, #5]
	virtual bool setModifyTime(const DateTimeFields &tm) {
     7a6:	sub	sp, #20
    return m_fFile   ? m_fFile->timestamp(flags, year, month, day, hour, minute,
     7a8:	ldr	r4, [r0, #80]	; 0x50
		return sdfatfile.timestamp(T_WRITE, tm.year + 1900, tm.mon + 1,
     7aa:	adds	r3, #1
			tm.mday, tm.hour, tm.min, tm.sec);
     7ac:	ldrb	r5, [r1, #4]
     7ae:	ldrb	r6, [r1, #2]
     7b0:	ldrb	r7, [r1, #1]
		return sdfatfile.timestamp(T_WRITE, tm.year + 1900, tm.mon + 1,
     7b2:	uxtb	r3, r3
			tm.mday, tm.hour, tm.min, tm.sec);
     7b4:	ldrb	r1, [r1, #0]
     7b6:	cbz	r4, 7cc <SDFile::setModifyTime(DateTimeFields const&)+0x38>
     7b8:	mov	r0, r4
     7ba:	str	r6, [sp, #4]
     7bc:	str	r5, [sp, #0]
     7be:	strd	r7, r1, [sp, #8]
     7c2:	movs	r1, #4
     7c4:	bl	6874 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
	}
     7c8:	add	sp, #20
     7ca:	pop	{r4, r5, r6, r7, pc}
     7cc:	ldr	r0, [r0, #84]	; 0x54
           : m_xFile ? m_xFile->timestamp(flags, year, month, day, hour, minute,
     7ce:	cmp	r0, #0
     7d0:	beq.n	7c8 <SDFile::setModifyTime(DateTimeFields const&)+0x34>
     7d2:	str	r6, [sp, #4]
     7d4:	str	r5, [sp, #0]
     7d6:	strd	r7, r1, [sp, #8]
     7da:	movs	r1, #4
     7dc:	bl	4fac <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
     7e0:	add	sp, #20
     7e2:	pop	{r4, r5, r6, r7, pc}
		if (tm.year < 80 || tm.year > 207) return false;
     7e4:	movs	r0, #0
	}
     7e6:	bx	lr

000007e8 <SDFile::available()>:
    return m_fFile ? m_fFile->available() : m_xFile ? m_xFile->available() : 0;
     7e8:	ldr	r3, [r0, #80]	; 0x50
     7ea:	cbz	r3, 802 <SDFile::available()+0x1a>
    return isFile() ? fileSize() - curPosition() : 0;
     7ec:	ldrb	r0, [r3, #0]
     7ee:	ands.w	r0, r0, #8
     7f2:	beq.n	810 <SDFile::available()+0x28>
     7f4:	ldr	r0, [r3, #28]
     7f6:	ldr	r3, [r3, #20]
    return n > INT_MAX ? INT_MAX : n;
     7f8:	subs	r0, r0, r3
     7fa:	it	mi
     7fc:	mvnmi.w	r0, #2147483648	; 0x80000000
     800:	bx	lr
     802:	ldr	r3, [r0, #84]	; 0x54
     804:	cbz	r3, 830 <SDFile::available()+0x48>
  uint64_t available64() { return isFile() ? fileSize() - curPosition() : 0; }
     806:	ldrb.w	r0, [r3, #49]	; 0x31
     80a:	ands.w	r0, r0, #8
     80e:	bne.n	812 <SDFile::available()+0x2a>
	}
     810:	bx	lr
     812:	ldr	r0, [r3, #16]
     814:	ldr	r1, [r3, #0]
     816:	ldr	r2, [r3, #20]
     818:	subs	r0, r0, r1
     81a:	ldr	r3, [r3, #4]
     81c:	sbc.w	r3, r2, r3
    return n > INT_MAX ? INT_MAX : n;
     820:	cmp.w	r0, #2147483648	; 0x80000000
     824:	sbcs.w	r3, r3, #0
     828:	bcc.n	810 <SDFile::available()+0x28>
     82a:	mvn.w	r0, #2147483648	; 0x80000000
     82e:	bx	lr
     830:	mov	r0, r3
		return sdfatfile.available();
     832:	b.n	810 <SDFile::available()+0x28>

00000834 <StreamFile<FsBaseFile, unsigned long long>::available()>:
     834:	ldr	r3, [r0, #72]	; 0x48
     836:	cbz	r3, 84e <StreamFile<FsBaseFile, unsigned long long>::available()+0x1a>
    return isFile() ? fileSize() - curPosition() : 0;
     838:	ldrb	r0, [r3, #0]
     83a:	ands.w	r0, r0, #8
     83e:	beq.n	85c <StreamFile<FsBaseFile, unsigned long long>::available()+0x28>
     840:	ldr	r0, [r3, #28]
     842:	ldr	r3, [r3, #20]
    return n > INT_MAX ? INT_MAX : n;
     844:	subs	r0, r0, r3
     846:	it	mi
     848:	mvnmi.w	r0, #2147483648	; 0x80000000
     84c:	bx	lr
     84e:	ldr	r3, [r0, #76]	; 0x4c
     850:	cbz	r3, 87c <StreamFile<FsBaseFile, unsigned long long>::available()+0x48>
  uint64_t available64() { return isFile() ? fileSize() - curPosition() : 0; }
     852:	ldrb.w	r0, [r3, #49]	; 0x31
     856:	ands.w	r0, r0, #8
     85a:	bne.n	85e <StreamFile<FsBaseFile, unsigned long long>::available()+0x2a>
  int available() { return BaseFile::available(); }
     85c:	bx	lr
     85e:	ldr	r0, [r3, #16]
     860:	ldr	r1, [r3, #0]
     862:	ldr	r2, [r3, #20]
     864:	subs	r0, r0, r1
     866:	ldr	r3, [r3, #4]
     868:	sbc.w	r3, r2, r3
    return n > INT_MAX ? INT_MAX : n;
     86c:	cmp.w	r0, #2147483648	; 0x80000000
     870:	sbcs.w	r3, r3, #0
     874:	bcc.n	85c <StreamFile<FsBaseFile, unsigned long long>::available()+0x28>
     876:	mvn.w	r0, #2147483648	; 0x80000000
     87a:	bx	lr
     87c:	mov	r0, r3
     87e:	b.n	85c <StreamFile<FsBaseFile, unsigned long long>::available()+0x28>

00000880 <File::write(unsigned char)>:
	size_t write(uint8_t b) {
     880:	push	{lr}
		return (f) ? f->write(&b, 1) : 0;
     882:	ldr	r0, [r0, #16]
	size_t write(uint8_t b) {
     884:	sub	sp, #12
     886:	strb.w	r1, [sp, #7]
		return (f) ? f->write(&b, 1) : 0;
     88a:	cbz	r0, 8a6 <File::write(unsigned char)+0x26>
     88c:	ldr	r3, [r0, #0]
     88e:	ldr	r2, [pc, #64]	; (8d0 <File::write(unsigned char)+0x50>)
     890:	ldr	r3, [r3, #12]
     892:	cmp	r3, r2
     894:	bne.n	8c2 <File::write(unsigned char)+0x42>
    return m_fFile   ? m_fFile->write(buf, count)
     896:	ldr	r3, [r0, #80]	; 0x50
     898:	cbz	r3, 8ac <File::write(unsigned char)+0x2c>
     89a:	movs	r2, #1
     89c:	add.w	r1, sp, #7
     8a0:	mov	r0, r3
     8a2:	bl	69c0 <FatFile::write(void const*, unsigned int)>
	}
     8a6:	add	sp, #12
     8a8:	ldr.w	pc, [sp], #4
     8ac:	ldr	r0, [r0, #84]	; 0x54
           : m_xFile ? m_xFile->write(buf, count)
     8ae:	cmp	r0, #0
     8b0:	beq.n	8a6 <File::write(unsigned char)+0x26>
     8b2:	movs	r2, #1
     8b4:	add.w	r1, sp, #7
     8b8:	bl	5208 <ExFatFile::write(void const*, unsigned int)>
     8bc:	add	sp, #12
     8be:	ldr.w	pc, [sp], #4
		return (f) ? f->write(&b, 1) : 0;
     8c2:	movs	r2, #1
     8c4:	add.w	r1, sp, #7
     8c8:	blx	r3
	}
     8ca:	add	sp, #12
     8cc:	ldr.w	pc, [sp], #4
     8d0:	.word	0x00000739

000008d4 <File::write(unsigned char const*, unsigned int)>:
		return (f) ? f->write((void*)buf, size) : 0;
     8d4:	ldr	r3, [r0, #16]
     8d6:	cbz	r3, 90e <File::write(unsigned char const*, unsigned int)+0x3a>
     8d8:	ldr	r0, [pc, #56]	; (914 <File::write(unsigned char const*, unsigned int)+0x40>)
	virtual size_t write(const uint8_t *buf, size_t size) {
     8da:	push	{r4}
		return (f) ? f->write((void*)buf, size) : 0;
     8dc:	ldr	r4, [r3, #0]
     8de:	ldr	r4, [r4, #12]
     8e0:	cmp	r4, r0
     8e2:	bne.n	904 <File::write(unsigned char const*, unsigned int)+0x30>
    return m_fFile   ? m_fFile->write(buf, count)
     8e4:	ldr	r0, [r3, #80]	; 0x50
     8e6:	cbz	r0, 8f0 <File::write(unsigned char const*, unsigned int)+0x1c>
	}
     8e8:	ldr.w	r4, [sp], #4
     8ec:	b.w	69c0 <FatFile::write(void const*, unsigned int)>
     8f0:	ldr	r0, [r3, #84]	; 0x54
           : m_xFile ? m_xFile->write(buf, count)
     8f2:	cbz	r0, 8fc <File::write(unsigned char const*, unsigned int)+0x28>
     8f4:	ldr.w	r4, [sp], #4
     8f8:	b.w	5208 <ExFatFile::write(void const*, unsigned int)>
     8fc:	movs	r0, #0
     8fe:	ldr.w	r4, [sp], #4
     902:	bx	lr
		return (f) ? f->write((void*)buf, size) : 0;
     904:	mov	r0, r3
     906:	mov	r3, r4
	}
     908:	ldr.w	r4, [sp], #4
		return (f) ? f->write((void*)buf, size) : 0;
     90c:	bx	r3
	}
     90e:	movs	r0, #0
     910:	bx	lr
     912:	nop
     914:	.word	0x00000739

00000918 <SDFile::~SDFile()>:
	virtual ~SDFile(void) {
     918:	push	{r3, r4, r5, lr}
     91a:	mov	r4, r0
     91c:	ldr	r3, [pc, #48]	; (950 <SDFile::~SDFile()+0x38>)
		if (filename) {
     91e:	ldr	r0, [r0, #88]	; 0x58
	virtual ~SDFile(void) {
     920:	str	r3, [r4, #0]
		if (filename) {
     922:	cbz	r0, 92c <SDFile::~SDFile()+0x14>
			free(filename);
     924:	bl	d2ec <free>
			filename = nullptr;
     928:	movs	r3, #0
     92a:	str	r3, [r4, #88]	; 0x58
  bool isOpen() const { return m_fFile || m_xFile; }
     92c:	ldr	r3, [r4, #80]	; 0x50
			sdfatfile.close();
     92e:	add.w	r5, r4, #24
     932:	cbz	r3, 948 <SDFile::~SDFile()+0x30>
     934:	mov	r0, r5
     936:	bl	7828 <FsBaseFile::close()>
class StreamFile : public stream_t, public BaseFile {
     93a:	ldr	r3, [pc, #24]	; (954 <SDFile::~SDFile()+0x3c>)
  ~FsBaseFile() { close(); }
     93c:	mov	r0, r5
     93e:	str	r3, [r4, #8]
     940:	bl	7828 <FsBaseFile::close()>
	}
     944:	mov	r0, r4
     946:	pop	{r3, r4, r5, pc}
  bool isOpen() const { return m_fFile || m_xFile; }
     948:	ldr	r3, [r4, #84]	; 0x54
     94a:	cmp	r3, #0
     94c:	bne.n	934 <SDFile::~SDFile()+0x1c>
     94e:	b.n	93a <SDFile::~SDFile()+0x22>
     950:	.word	0x20000ae8
     954:	.word	0x2000099c

00000958 <SDFile::~SDFile()>:
	virtual ~SDFile(void) {
     958:	push	{r3, r4, r5, lr}
     95a:	mov	r4, r0
     95c:	ldr	r3, [pc, #56]	; (998 <SDFile::~SDFile()+0x40>)
		if (filename) {
     95e:	ldr	r0, [r0, #88]	; 0x58
	virtual ~SDFile(void) {
     960:	str	r3, [r4, #0]
		if (filename) {
     962:	cbz	r0, 96c <SDFile::~SDFile()+0x14>
			free(filename);
     964:	bl	d2ec <free>
			filename = nullptr;
     968:	movs	r3, #0
     96a:	str	r3, [r4, #88]	; 0x58
     96c:	ldr	r3, [r4, #80]	; 0x50
			sdfatfile.close();
     96e:	add.w	r5, r4, #24
     972:	cbz	r3, 990 <SDFile::~SDFile()+0x38>
     974:	mov	r0, r5
     976:	bl	7828 <FsBaseFile::close()>
     97a:	ldr	r3, [pc, #32]	; (99c <SDFile::~SDFile()+0x44>)
  ~FsBaseFile() { close(); }
     97c:	mov	r0, r5
     97e:	str	r3, [r4, #8]
     980:	bl	7828 <FsBaseFile::close()>
	}
     984:	mov	r0, r4
     986:	movs	r1, #92	; 0x5c
     988:	bl	d148 <operator delete(void*, unsigned int)>
     98c:	mov	r0, r4
     98e:	pop	{r3, r4, r5, pc}
  bool isOpen() const { return m_fFile || m_xFile; }
     990:	ldr	r3, [r4, #84]	; 0x54
     992:	cmp	r3, #0
     994:	bne.n	974 <SDFile::~SDFile()+0x1c>
     996:	b.n	97a <SDFile::~SDFile()+0x22>
     998:	.word	0x20000ae8
     99c:	.word	0x2000099c

000009a0 <SDFile::seek(unsigned long long, int)>:
	virtual bool seek(uint64_t pos, int mode = SeekSet) {
     9a0:	push	{r4, r5}
     9a2:	ldr	r4, [sp, #8]
     9a4:	mov	r1, r2
     9a6:	mov	ip, r3
		if (mode == SeekSet) return sdfatfile.seekSet(pos);
     9a8:	cbz	r4, 9b8 <SDFile::seek(unsigned long long, int)+0x18>
		if (mode == SeekCur) return sdfatfile.seekCur(pos);
     9aa:	cmp	r4, #1
     9ac:	beq.n	9e8 <SDFile::seek(unsigned long long, int)+0x48>
		if (mode == SeekEnd) return sdfatfile.seekEnd(pos);
     9ae:	cmp	r4, #2
     9b0:	beq.n	9d0 <SDFile::seek(unsigned long long, int)+0x30>
	}
     9b2:	movs	r0, #0
     9b4:	pop	{r4, r5}
     9b6:	bx	lr
    return m_fFile   ? pos < (1ULL << 32) && m_fFile->seekSet(pos)
     9b8:	ldr	r5, [r0, #80]	; 0x50
     9ba:	cbz	r5, 9fa <SDFile::seek(unsigned long long, int)+0x5a>
     9bc:	mov.w	r3, #4294967295
     9c0:	cmp	r3, r2
     9c2:	sbcs.w	r4, r4, ip
     9c6:	bcc.n	9b2 <SDFile::seek(unsigned long long, int)+0x12>
     9c8:	mov	r0, r5
     9ca:	pop	{r4, r5}
     9cc:	b.w	6600 <FatFile::seekSet(unsigned long)>
    return m_fFile ? m_fFile->fileSize() : m_xFile ? m_xFile->fileSize() : 0;
     9d0:	ldr	r2, [r0, #80]	; 0x50
     9d2:	cbz	r2, a18 <SDFile::seek(unsigned long long, int)+0x78>
     9d4:	ldr	r3, [r2, #28]
  bool seekEnd(int64_t offset = 0) { return seekSet(fileSize() + offset); }
     9d6:	adds	r1, r3, r1
     9d8:	adc.w	r3, ip, #0
    return m_fFile   ? pos < (1ULL << 32) && m_fFile->seekSet(pos)
     9dc:	cmp	r3, #0
     9de:	bne.n	9b2 <SDFile::seek(unsigned long long, int)+0x12>
     9e0:	mov	r0, r2
     9e2:	pop	{r4, r5}
     9e4:	b.w	6600 <FatFile::seekSet(unsigned long)>
    return m_fFile   ? m_fFile->curPosition()
     9e8:	ldr	r2, [r0, #80]	; 0x50
     9ea:	cbz	r2, a06 <SDFile::seek(unsigned long long, int)+0x66>
     9ec:	ldr	r3, [r2, #20]
  bool seekCur(int64_t offset) { return seekSet(curPosition() + offset); }
     9ee:	adds	r1, r3, r1
     9f0:	adc.w	r3, ip, #0
    return m_fFile   ? pos < (1ULL << 32) && m_fFile->seekSet(pos)
     9f4:	cmp	r3, #0
     9f6:	bne.n	9b2 <SDFile::seek(unsigned long long, int)+0x12>
     9f8:	b.n	9e0 <SDFile::seek(unsigned long long, int)+0x40>
     9fa:	ldr	r0, [r0, #84]	; 0x54
           : m_xFile ? m_xFile->seekSet(pos)
     9fc:	cmp	r0, #0
     9fe:	beq.n	9b2 <SDFile::seek(unsigned long long, int)+0x12>
     a00:	pop	{r4, r5}
     a02:	b.w	3edc <ExFatFile::seekSet(unsigned long long)>
     a06:	ldr	r0, [r0, #84]	; 0x54
           : m_xFile ? m_xFile->curPosition()
     a08:	cmp	r0, #0
     a0a:	beq.n	9b2 <SDFile::seek(unsigned long long, int)+0x12>
  bool seekCur(int64_t offset) { return seekSet(curPosition() + offset); }
     a0c:	ldrd	r2, r3, [r0]
     a10:	adds	r2, r1, r2
           : m_xFile ? m_xFile->seekSet(pos)
     a12:	adc.w	r3, ip, r3
     a16:	b.n	a00 <SDFile::seek(unsigned long long, int)+0x60>
     a18:	ldr	r0, [r0, #84]	; 0x54
    return m_fFile ? m_fFile->fileSize() : m_xFile ? m_xFile->fileSize() : 0;
     a1a:	cmp	r0, #0
     a1c:	beq.n	9b2 <SDFile::seek(unsigned long long, int)+0x12>
  bool seekEnd(int64_t offset = 0) { return seekSet(fileSize() + offset); }
     a1e:	ldrd	r2, r3, [r0, #16]
     a22:	pop	{r4, r5}
     a24:	adds	r2, r1, r2
           : m_xFile ? m_xFile->seekSet(pos)
     a26:	adc.w	r3, ip, r3
     a2a:	b.w	3edc <ExFatFile::seekSet(unsigned long long)>
     a2e:	nop

00000a30 <File::~File()>:
	virtual ~File() {
     a30:	push	{r4, r5, r6, lr}
     a32:	ldr	r3, [pc, #144]	; (ac4 <File::~File()+0x94>)
     a34:	mov	r4, r0
		if (f) dec_refcount();
     a36:	ldr	r5, [r0, #16]
	virtual ~File() {
     a38:	str	r3, [r0, #0]
		if (f) dec_refcount();
     a3a:	cmp	r5, #0
     a3c:	beq.n	aa4 <File::~File()+0x74>
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	using Print::write;
private:
	void dec_refcount() {
		if (--(f->refcount) == 0) {
     a3e:	ldr	r6, [r5, #4]
     a40:	subs	r6, #1
     a42:	str	r6, [r5, #4]
     a44:	cbnz	r6, aa4 <File::~File()+0x74>
			f->close();
     a46:	ldr	r3, [r5, #0]
     a48:	ldr	r2, [pc, #124]	; (ac8 <File::~File()+0x98>)
     a4a:	ldr	r3, [r3, #44]	; 0x2c
     a4c:	cmp	r3, r2
     a4e:	bne.n	ab0 <File::~File()+0x80>
		if (filename) {
     a50:	ldr	r0, [r5, #88]	; 0x58
     a52:	cbz	r0, a5a <File::~File()+0x2a>
			free(filename);
     a54:	bl	d2ec <free>
			filename = nullptr;
     a58:	str	r6, [r5, #88]	; 0x58
  bool isOpen() const { return m_fFile || m_xFile; }
     a5a:	ldr	r3, [r5, #80]	; 0x50
     a5c:	cbz	r3, aa8 <File::~File()+0x78>
			sdfatfile.close();
     a5e:	add.w	r0, r5, #24
     a62:	bl	7828 <FsBaseFile::close()>
			delete f;
     a66:	ldr	r5, [r4, #16]
     a68:	cbz	r5, aa4 <File::~File()+0x74>
     a6a:	ldr	r3, [r5, #0]
     a6c:	ldr	r2, [pc, #92]	; (acc <File::~File()+0x9c>)
     a6e:	ldr	r3, [r3, #4]
     a70:	cmp	r3, r2
     a72:	bne.n	abe <File::~File()+0x8e>
	virtual ~SDFile(void) {
     a74:	ldr	r3, [pc, #88]	; (ad0 <File::~File()+0xa0>)
		if (filename) {
     a76:	ldr	r0, [r5, #88]	; 0x58
	virtual ~SDFile(void) {
     a78:	str	r3, [r5, #0]
		if (filename) {
     a7a:	cbz	r0, a84 <File::~File()+0x54>
			free(filename);
     a7c:	bl	d2ec <free>
			filename = nullptr;
     a80:	movs	r3, #0
     a82:	str	r3, [r5, #88]	; 0x58
     a84:	ldr	r3, [r5, #80]	; 0x50
			sdfatfile.close();
     a86:	add.w	r6, r5, #24
     a8a:	cbz	r3, ab6 <File::~File()+0x86>
     a8c:	mov	r0, r6
     a8e:	bl	7828 <FsBaseFile::close()>
     a92:	ldr	r3, [pc, #64]	; (ad4 <File::~File()+0xa4>)
  ~FsBaseFile() { close(); }
     a94:	mov	r0, r6
     a96:	str	r3, [r5, #8]
     a98:	bl	7828 <FsBaseFile::close()>
	}
     a9c:	movs	r1, #92	; 0x5c
     a9e:	mov	r0, r5
     aa0:	bl	d148 <operator delete(void*, unsigned int)>
	}
     aa4:	mov	r0, r4
     aa6:	pop	{r4, r5, r6, pc}
  bool isOpen() const { return m_fFile || m_xFile; }
     aa8:	ldr	r3, [r5, #84]	; 0x54
     aaa:	cmp	r3, #0
     aac:	bne.n	a5e <File::~File()+0x2e>
     aae:	b.n	a66 <File::~File()+0x36>
			f->close();
     ab0:	mov	r0, r5
     ab2:	blx	r3
     ab4:	b.n	a66 <File::~File()+0x36>
     ab6:	ldr	r3, [r5, #84]	; 0x54
     ab8:	cmp	r3, #0
     aba:	bne.n	a8c <File::~File()+0x5c>
     abc:	b.n	a92 <File::~File()+0x62>
			delete f;
     abe:	mov	r0, r5
     ac0:	blx	r3
     ac2:	b.n	aa4 <File::~File()+0x74>
     ac4:	.word	0x20000a8c
     ac8:	.word	0x00000239
     acc:	.word	0x00000959
     ad0:	.word	0x20000ae8
     ad4:	.word	0x2000099c

00000ad8 <File::~File()>:
	virtual ~File() {
     ad8:	push	{r4, r5, r6, lr}
     ada:	ldr	r3, [pc, #152]	; (b74 <File::~File()+0x9c>)
     adc:	mov	r4, r0
		if (f) dec_refcount();
     ade:	ldr	r5, [r0, #16]
	virtual ~File() {
     ae0:	str	r3, [r0, #0]
		if (f) dec_refcount();
     ae2:	cmp	r5, #0
     ae4:	beq.n	b4c <File::~File()+0x74>
		if (--(f->refcount) == 0) {
     ae6:	ldr	r6, [r5, #4]
     ae8:	subs	r6, #1
     aea:	str	r6, [r5, #4]
     aec:	cbnz	r6, b4c <File::~File()+0x74>
			f->close();
     aee:	ldr	r3, [r5, #0]
     af0:	ldr	r2, [pc, #132]	; (b78 <File::~File()+0xa0>)
     af2:	ldr	r3, [r3, #44]	; 0x2c
     af4:	cmp	r3, r2
     af6:	bne.n	b60 <File::~File()+0x88>
		if (filename) {
     af8:	ldr	r0, [r5, #88]	; 0x58
     afa:	cbz	r0, b02 <File::~File()+0x2a>
			free(filename);
     afc:	bl	d2ec <free>
			filename = nullptr;
     b00:	str	r6, [r5, #88]	; 0x58
     b02:	ldr	r3, [r5, #80]	; 0x50
     b04:	cbz	r3, b58 <File::~File()+0x80>
			sdfatfile.close();
     b06:	add.w	r0, r5, #24
     b0a:	bl	7828 <FsBaseFile::close()>
			delete f;
     b0e:	ldr	r5, [r4, #16]
     b10:	cbz	r5, b4c <File::~File()+0x74>
     b12:	ldr	r3, [r5, #0]
     b14:	ldr	r2, [pc, #100]	; (b7c <File::~File()+0xa4>)
     b16:	ldr	r3, [r3, #4]
     b18:	cmp	r3, r2
     b1a:	bne.n	b6e <File::~File()+0x96>
	virtual ~SDFile(void) {
     b1c:	ldr	r3, [pc, #96]	; (b80 <File::~File()+0xa8>)
		if (filename) {
     b1e:	ldr	r0, [r5, #88]	; 0x58
	virtual ~SDFile(void) {
     b20:	str	r3, [r5, #0]
		if (filename) {
     b22:	cbz	r0, b2c <File::~File()+0x54>
			free(filename);
     b24:	bl	d2ec <free>
			filename = nullptr;
     b28:	movs	r3, #0
     b2a:	str	r3, [r5, #88]	; 0x58
     b2c:	ldr	r3, [r5, #80]	; 0x50
			sdfatfile.close();
     b2e:	add.w	r6, r5, #24
     b32:	cbz	r3, b66 <File::~File()+0x8e>
     b34:	mov	r0, r6
     b36:	bl	7828 <FsBaseFile::close()>
     b3a:	ldr	r3, [pc, #72]	; (b84 <File::~File()+0xac>)
  ~FsBaseFile() { close(); }
     b3c:	mov	r0, r6
     b3e:	str	r3, [r5, #8]
     b40:	bl	7828 <FsBaseFile::close()>
	}
     b44:	movs	r1, #92	; 0x5c
     b46:	mov	r0, r5
     b48:	bl	d148 <operator delete(void*, unsigned int)>
	}
     b4c:	mov	r0, r4
     b4e:	movs	r1, #20
     b50:	bl	d148 <operator delete(void*, unsigned int)>
     b54:	mov	r0, r4
     b56:	pop	{r4, r5, r6, pc}
  bool isOpen() const { return m_fFile || m_xFile; }
     b58:	ldr	r3, [r5, #84]	; 0x54
     b5a:	cmp	r3, #0
     b5c:	bne.n	b06 <File::~File()+0x2e>
     b5e:	b.n	b0e <File::~File()+0x36>
			f->close();
     b60:	mov	r0, r5
     b62:	blx	r3
     b64:	b.n	b0e <File::~File()+0x36>
     b66:	ldr	r3, [r5, #84]	; 0x54
     b68:	cmp	r3, #0
     b6a:	bne.n	b34 <File::~File()+0x5c>
     b6c:	b.n	b3a <File::~File()+0x62>
			delete f;
     b6e:	mov	r0, r5
     b70:	blx	r3
     b72:	b.n	b4c <File::~File()+0x74>
     b74:	.word	0x20000a8c
     b78:	.word	0x00000239
     b7c:	.word	0x00000959
     b80:	.word	0x20000ae8
     b84:	.word	0x2000099c

00000b88 <I2S_32::config_i2s()>:

//#define AUDIO_SAMPLE_RATE_EXACT 44100 // used for initialization

void I2S_32::config_i2s(void)
{
	CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
     b88:	ldr	r2, [pc, #200]	; (c54 <I2S_32::config_i2s()+0xcc>)

	// if either transmitter or receiver is enabled, do nothing
	if (I2S1_TCSR & I2S_TCSR_TE) return;
     b8a:	ldr	r1, [pc, #204]	; (c58 <I2S_32::config_i2s()+0xd0>)
	CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
     b8c:	ldr	r3, [r2, #124]	; 0x7c
     b8e:	orr.w	r3, r3, #786432	; 0xc0000
     b92:	str	r3, [r2, #124]	; 0x7c
	if (I2S1_TCSR & I2S_TCSR_TE) return;
     b94:	ldr	r3, [r1, #8]
     b96:	cmp	r3, #0
     b98:	blt.n	c50 <I2S_32::config_i2s()+0xc8>
	if (I2S1_RCSR & I2S_RCSR_RE) return;
     b9a:	ldr.w	r3, [r1, #136]	; 0x88
     b9e:	cmp	r3, #0
     ba0:	blt.n	c50 <I2S_32::config_i2s()+0xc8>
    CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
     ba2:	ldr	r3, [pc, #184]	; (c5c <I2S_32::config_i2s()+0xd4>)
    CCM_ANALOG_PLL_AUDIO_DENOM = ndiv & CCM_ANALOG_PLL_AUDIO_DENOM_MASK;
     ba4:	movw	r2, #10000	; 0x2710
    CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
     ba8:	ldr	r0, [pc, #180]	; (c60 <I2S_32::config_i2s()+0xd8>)
    CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
     baa:	mov.w	r1, #2240	; 0x8c0
{
     bae:	push	{r4, r5}
    CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
     bb0:	str	r0, [r3, #112]	; 0x70
    CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
     bb2:	str.w	r1, [r3, #128]	; 0x80
    CCM_ANALOG_PLL_AUDIO_DENOM = ndiv & CCM_ANALOG_PLL_AUDIO_DENOM_MASK;
     bb6:	str.w	r2, [r3, #144]	; 0x90
    CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_POWERDOWN;//Switch on PLL
     bba:	ldr	r2, [r3, #112]	; 0x70
     bbc:	bic.w	r2, r2, #4096	; 0x1000
     bc0:	str	r2, [r3, #112]	; 0x70
    while (!(CCM_ANALOG_PLL_AUDIO & CCM_ANALOG_PLL_AUDIO_LOCK)) {}; //Wait for pll-lock
     bc2:	ldr	r2, [r3, #112]	; 0x70
     bc4:	cmp	r2, #0
     bc6:	bge.n	bc2 <I2S_32::config_i2s()+0x3a>
    CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
     bc8:	ldr.w	r0, [r3, #368]	; 0x170
	CORE_PIN20_CONFIG = 3;  //1:RX_SYNC

	int rsync = 0;
	int tsync = 1;

	I2S1_TMR = 0;
     bcc:	movs	r5, #0
     bce:	ldr	r2, [pc, #148]	; (c64 <I2S_32::config_i2s()+0xdc>)
    CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
     bd0:	ldr	r1, [pc, #128]	; (c54 <I2S_32::config_i2s()+0xcc>)
    CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
     bd2:	ands	r2, r0
    IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
     bd4:	ldr	r4, [pc, #144]	; (c68 <I2S_32::config_i2s()+0xe0>)
	CORE_PIN23_CONFIG = 3;  //1:MCLK
     bd6:	ldr	r0, [pc, #148]	; (c6c <I2S_32::config_i2s()+0xe4>)
    CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
     bd8:	str.w	r2, [r3, #368]	; 0x170
    CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_BYPASS;//Disable Bypass
     bdc:	ldr	r2, [r3, #112]	; 0x70
     bde:	bic.w	r2, r2, #65536	; 0x10000
     be2:	str	r2, [r3, #112]	; 0x70
    CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
     be4:	ldr	r2, [r1, #28]
    CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
     be6:	ldr	r3, [pc, #136]	; (c70 <I2S_32::config_i2s()+0xe8>)
    CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
     be8:	bic.w	r2, r2, #3072	; 0xc00
        | CCM_CSCMR1_SAI1_CLK_SEL(2); // &0x03 // (0,1,2): PLL3PFD0, PLL5, PLL4
     bec:	orr.w	r2, r2, #2048	; 0x800
    CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
     bf0:	str	r2, [r1, #28]
    CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
     bf2:	ldr	r2, [r1, #40]	; 0x28
     bf4:	ands	r3, r2
      | (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));
     bf6:	ldr	r2, [pc, #124]	; (c74 <I2S_32::config_i2s()+0xec>)
        | CCM_CS1CDR_SAI1_CLK_PODF(n2-1); // &0x3f
     bf8:	orr.w	r3, r3, #206	; 0xce
    CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
     bfc:	str	r3, [r1, #40]	; 0x28
     bfe:	movs	r1, #3
    IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
     c00:	ldr	r3, [r4, #4]
      | (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));
     c02:	ands	r2, r3
	I2S1_TMR = 0;
     c04:	ldr	r3, [pc, #80]	; (c58 <I2S_32::config_i2s()+0xd0>)
     c06:	orr.w	r2, r2, #524288	; 0x80000
    IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
     c0a:	str	r2, [r4, #4]
	//I2S1_TCSR = (1<<25); //Reset
	I2S1_TCR1 = I2S_TCR1_RFW(1);
     c0c:	movs	r4, #1
	I2S1_TCR2 = I2S_TCR2_SYNC(tsync) | I2S_TCR2_BCP // sync=0; tx is async;
     c0e:	ldr	r2, [pc, #104]	; (c78 <I2S_32::config_i2s()+0xf0>)
	CORE_PIN23_CONFIG = 3;  //1:MCLK
     c10:	str.w	r1, [r0, #288]	; 0x120
	CORE_PIN21_CONFIG = 3;  //1:RX_BCLK
     c14:	str.w	r1, [r0, #296]	; 0x128
	CORE_PIN20_CONFIG = 3;  //1:RX_SYNC
     c18:	str.w	r1, [r0, #292]	; 0x124
		    | (I2S_TCR2_BCD | I2S_TCR2_DIV((1)) | I2S_TCR2_MSEL(1));
	I2S1_TCR3 = I2S_TCR3_TCE;
     c1c:	mov.w	r0, #65536	; 0x10000
	I2S1_TMR = 0;
     c20:	str	r5, [r3, #96]	; 0x60
	I2S1_TCR4 = I2S_TCR4_FRSZ((2-1)) | I2S_TCR4_SYWD((32-1)) | I2S_TCR4_MF
     c22:	ldr	r1, [pc, #88]	; (c7c <I2S_32::config_i2s()+0xf4>)
	I2S1_TCR1 = I2S_TCR1_RFW(1);
     c24:	str	r4, [r3, #12]
	I2S1_TCR2 = I2S_TCR2_SYNC(tsync) | I2S_TCR2_BCP // sync=0; tx is async;
     c26:	str	r2, [r3, #16]
		    | I2S_TCR4_FSE | I2S_TCR4_FSP | I2S_TCR4_FSD;
	I2S1_TCR5 = I2S_TCR5_WNW((32-1)) | I2S_TCR5_W0W((32-1)) | I2S_TCR5_FBT((32-1));
     c28:	ldr	r2, [pc, #84]	; (c80 <I2S_32::config_i2s()+0xf8>)
	I2S1_TCR3 = I2S_TCR3_TCE;
     c2a:	str	r0, [r3, #20]
	I2S1_TCR4 = I2S_TCR4_FRSZ((2-1)) | I2S_TCR4_SYWD((32-1)) | I2S_TCR4_MF
     c2c:	str	r1, [r3, #24]
	I2S1_TCR5 = I2S_TCR5_WNW((32-1)) | I2S_TCR5_W0W((32-1)) | I2S_TCR5_FBT((32-1));
     c2e:	str	r2, [r3, #28]

	I2S1_RMR = 0;
     c30:	str.w	r5, [r3, #224]	; 0xe0
	//I2S1_RCSR = (1<<25); //Reset
	I2S1_RCR1 = I2S_RCR1_RFW(1);
     c34:	str.w	r4, [r3, #140]	; 0x8c
	I2S1_RCR2 = I2S_RCR2_SYNC(rsync) | I2S_RCR2_BCP  // sync=0; rx is async;
     c38:	add.w	r4, r4, #117440512	; 0x7000000
     c3c:	str.w	r4, [r3, #144]	; 0x90
  	    | (I2S_RCR2_BCD | I2S_RCR2_DIV((1)) | I2S_RCR2_MSEL(1));
	I2S1_RCR3 = I2S_RCR3_RCE;
     c40:	str.w	r0, [r3, #148]	; 0x94
	I2S1_RCR4 = I2S_RCR4_FRSZ((2-1)) | I2S_RCR4_SYWD((32-1)) | I2S_RCR4_MF
     c44:	str.w	r1, [r3, #152]	; 0x98
		    | I2S_RCR4_FSE | I2S_RCR4_FSP | I2S_RCR4_FSD;
	I2S1_RCR5 = I2S_RCR5_WNW((32-1)) | I2S_RCR5_W0W((32-1)) | I2S_RCR5_FBT((32-1));
     c48:	str.w	r2, [r3, #156]	; 0x9c
}
     c4c:	pop	{r4, r5}
     c4e:	bx	lr
     c50:	bx	lr
     c52:	nop
     c54:	.word	0x400fc000
     c58:	.word	0x40384000
     c5c:	.word	0x400d8000
     c60:	.word	0x0011201c
     c64:	.word	0xff7f7fff
     c68:	.word	0x400ac000
     c6c:	.word	0x401f8000
     c70:	.word	0xfffffe00
     c74:	.word	0xfff7fff8
     c78:	.word	0x47000001
     c7c:	.word	0x00011f1b
     c80:	.word	0x1f1f1f00

00000c84 <I2S_32::begin()>:
{ 
     c84:	push	{r3, r4, r5, lr}
  dma.begin(true); // Allocate the DMA channel first
     c86:	ldr	r4, [pc, #144]	; (d18 <I2S_32::begin()+0x94>)
{ 
     c88:	mov	r5, r0
  dma.begin(true); // Allocate the DMA channel first
     c8a:	movs	r1, #1
     c8c:	mov	r0, r4
     c8e:	bl	c35c <DMAChannel::begin(bool)>
  config_i2s();
     c92:	mov	r0, r5
     c94:	bl	b88 <I2S_32::config_i2s()>
	CORE_PIN8_CONFIG  = 3;  //1:RX_DATA0
     c98:	ldr	r1, [pc, #128]	; (d1c <I2S_32::begin()+0x98>)
     c9a:	movs	r0, #3
	IOMUXC_SAI1_RX_DATA0_SELECT_INPUT = 2;
     c9c:	ldr	r3, [pc, #128]	; (d20 <I2S_32::begin()+0x9c>)
     c9e:	movs	r2, #2
  dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
     ca0:	movs	r5, #6
	CORE_PIN8_CONFIG  = 3;  //1:RX_DATA0
     ca2:	str.w	r0, [r1, #380]	; 0x17c
	IOMUXC_SAI1_RX_DATA0_SELECT_INPUT = 2;
     ca6:	str.w	r2, [r3, #404]	; 0x194
  dma.TCD->NBYTES_MLNO = 4;
     caa:	movs	r2, #4
	dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0);
     cac:	ldr	r3, [r4, #0]
  dma.TCD->SOFF = 0;
     cae:	ldr	r1, [pc, #116]	; (d24 <I2S_32::begin()+0xa0>)
  dma.TCD->NBYTES_MLNO = 4;
     cb0:	str	r2, [r3, #8]
  dma.TCD->SOFF = 0;
     cb2:	str	r1, [r3, #4]
  dma.TCD->DOFF = 4;
     cb4:	strh	r2, [r3, #20]
  dma.TCD->CITER_ELINKNO = sizeof(i2s_rx_buffer_32) / 4;
     cb6:	mov.w	r2, #256	; 0x100
	dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0);
     cba:	ldr	r0, [pc, #108]	; (d28 <I2S_32::begin()+0xa4>)
  dma.TCD->DADDR = i2s_rx_buffer_32;
     cbc:	ldr	r1, [pc, #108]	; (d2c <I2S_32::begin()+0xa8>)
	dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0);
     cbe:	str	r0, [r3, #0]
  dma.TCD->SLAST = 0;
     cc0:	movs	r0, #0
  dma.TCD->DADDR = i2s_rx_buffer_32;
     cc2:	str	r1, [r3, #16]
  dma.TCD->CITER_ELINKNO = sizeof(i2s_rx_buffer_32) / 4;
     cc4:	strh	r2, [r3, #22]
	// trigger moves a single data unit, which is typically 8, 16 or
	// 32 bits.  If a channel is configured for 200 transfers

	// Use a hardware trigger to make the DMA channel run
	void triggerAtHardwareEvent(uint8_t source) {
		volatile uint32_t *mux = &DMAMUX_CHCFG0 + channel;
     cc6:	ldrb	r1, [r4, #4]
  dma.TCD->BITER_ELINKNO = sizeof(i2s_rx_buffer_32) / 4;
     cc8:	strh	r2, [r3, #30]
  dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
     cca:	strh	r5, [r3, #28]
  dma.TCD->DLASTSGA = -sizeof(i2s_rx_buffer_32);
     ccc:	subw	r5, r5, #1030	; 0x406
     cd0:	ldr	r2, [pc, #92]	; (d30 <I2S_32::begin()+0xac>)
  dma.TCD->SLAST = 0;
     cd2:	str	r0, [r3, #12]
  dma.TCD->DLASTSGA = -sizeof(i2s_rx_buffer_32);
     cd4:	str	r5, [r3, #24]
		//mux = (volatile uint32_t *)&(DMAMUX_CHCFG0) + channel;
		*mux = 0;
     cd6:	str.w	r0, [r2, r1, lsl #2]
		*mux = (source & 0x7F) | DMAMUX_CHCFG_ENBL;
     cda:	ldr	r0, [pc, #88]	; (d34 <I2S_32::begin()+0xb0>)
  I2S1_RCSR = I2S_RCSR_RE | I2S_RCSR_BCE | I2S_RCSR_FRDE | I2S_RCSR_FR;
     cdc:	ldr	r3, [pc, #88]	; (d38 <I2S_32::begin()+0xb4>)
     cde:	str.w	r0, [r2, r1, lsl #2]
     ce2:	ldr	r2, [pc, #88]	; (d3c <I2S_32::begin()+0xb8>)
     ce4:	str.w	r2, [r3, #136]	; 0x88
  update_responsibility = update_setup();
     ce8:	bl	c9a8 <AudioStream::update_setup()>
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
     cec:	ldrb	r3, [r4, #4]
     cee:	ldr	r4, [pc, #80]	; (d40 <I2S_32::begin()+0xbc>)
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     cf0:	movs	r1, #1
     cf2:	ldr	r2, [pc, #80]	; (d44 <I2S_32::begin()+0xc0>)
     cf4:	strb	r0, [r4, #0]
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
     cf6:	add.w	r0, r3, #16
		DMA_SERQ = channel;
     cfa:	ldr	r4, [pc, #76]	; (d48 <I2S_32::begin()+0xc4>)
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     cfc:	add.w	r2, r2, r3, lsr #5
		DMA_SERQ = channel;
     d00:	strb	r3, [r4, #27]
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     d02:	and.w	r3, r3, #31
     d06:	lsls	r2, r2, #2
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
     d08:	ldr	r4, [pc, #64]	; (d4c <I2S_32::begin()+0xc8>)
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     d0a:	lsls	r1, r3
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
     d0c:	ldr	r3, [pc, #64]	; (d50 <I2S_32::begin()+0xcc>)
     d0e:	str.w	r4, [r3, r0, lsl #2]
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     d12:	str	r1, [r2, #0]
}
     d14:	pop	{r3, r4, r5, pc}
     d16:	nop
     d18:	.word	0x200065d8
     d1c:	.word	0x401f8000
     d20:	.word	0x401f8400
     d24:	.word	0x02020000
     d28:	.word	0x403840a0
     d2c:	.word	0x20005c9c
     d30:	.word	0x400ec000
     d34:	.word	0x80000013
     d38:	.word	0x40384000
     d3c:	.word	0x92000001
     d40:	.word	0x20007b7b
     d44:	.word	0x38003840
     d48:	.word	0x400e8000
     d4c:	.word	0x00000085
     d50:	.word	0x20001c00

00000d54 <AudioCompress::compress(void*)>:
  }
  return 0;
}

int AudioCompress::compress(void *inp)
{   
     d54:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     d58:	sub	sp, #20
     d5a:	mov	r4, r1
     d5c:	str	r0, [sp, #12]
  int ret=1;
  uint32_t to = rtc_get();
     d5e:	bl	bb4c <rtc_get>
     d62:	mov	sl, r0
  uint32_t t1 = micros();
     d64:	bl	b918 <micros>
    static int nout=0;

    int16_t *din = (int16_t *) inp;
    //
    // copy reference (first sample of all channels)
  for (int  ii = 0; ii < 1; ii++) tempDatai[ii] = din[ii];
     d68:	ldr	r3, [pc, #688]	; (101c <AudioCompress::compress(void*)+0x2c8>)
     d6a:	add.w	r6, r4, #254	; 0xfe
     d6e:	ldrsh.w	r2, [r4]
  uint32_t t1 = micros();
     d72:	mov	r9, r0
  for (int  ii = 0; ii < 1; ii++) tempDatai[ii] = din[ii];
     d74:	ldr	r5, [r3, #0]
     d76:	mov	r3, r4
     d78:	mov	r1, r5
     d7a:	mov	r4, r5
     d7c:	strh	r2, [r5, #0]
        
  //differentiate (equiv 6 dB/Octave HP filter)
  for (int  ii = 1; ii < NSAMP; ii++) tempDatai[ii] = (din[ii] - din[ii - 1]);
     d7e:	mov	r0, r3
     d80:	adds	r3, #2
     d82:	ldrh	r2, [r0, #2]
     d84:	cmp	r3, r6
     d86:	ldrh	r0, [r0, #0]
     d88:	sub.w	r2, r2, r0
     d8c:	strh.w	r2, [r4, #2]!
     d90:	bne.n	d7e <AudioCompress::compress(void*)+0x2a>
     d92:	add.w	r4, r5, #254	; 0xfe

  // find maximum in filtered data
  int32_t mx = 0;
     d96:	movs	r2, #0
  for (int ii = 1; ii < NSAMP; ii++)
  {
    int16_t dd =  tempDatai[ii];
     d98:	ldrsh.w	r3, [r1, #2]!
    if(dd<0)  dd = -dd;
     d9c:	cmp	r3, #0
     d9e:	rsb	r0, r3, #0
     da2:	it	lt
     da4:	sxthlt	r3, r0
    if(dd>mx) mx = dd;
     da6:	cmp	r2, r3
     da8:	it	lt
     daa:	movlt	r2, r3
  for (int ii = 1; ii < NSAMP; ii++)
     dac:	cmp	r1, r4
     dae:	bne.n	d98 <AudioCompress::compress(void*)+0x44>
  }

  // estimate mask (allow only 'nice' values)
    int nb;
    for(nb=2; nb<16; nb++) if(mx < (1<<(nb-1))) break;
     db0:	movs	r7, #2
     db2:	movs	r1, #1
     db4:	subs	r5, r7, #1
     db6:	lsl.w	r3, r1, r5
     dba:	cmp	r3, r2
     dbc:	bgt.w	fc0 <AudioCompress::compress(void*)+0x26c>
     dc0:	adds	r7, #1
     dc2:	cmp	r7, #16
     dc4:	bne.n	db4 <AudioCompress::compress(void*)+0x60>
     dc6:	ldr	r2, [pc, #600]	; (1020 <AudioCompress::compress(void*)+0x2cc>)
     dc8:	mov.w	r8, #141	; 0x8d
     dcc:	movs	r3, #129	; 0x81
     dce:	movw	r0, #65535	; 0xffff
     dd2:	movs	r5, #15
     dd4:	str	r2, [sp, #8]
    // compression factor (16/nb)

    proc_stat[nb-1]++;
     dd6:	ldr	r1, [pc, #588]	; (1024 <AudioCompress::compress(void*)+0x2d0>)
     dd8:	ldr	r4, [pc, #588]	; (1028 <AudioCompress::compress(void*)+0x2d4>)
     dda:	ldr.w	r2, [r1, r5, lsl #2]
     dde:	add.w	r6, r4, #254	; 0xfe
     de2:	mov	fp, r4
     de4:	adds	r2, #1
     de6:	str.w	r2, [r1, r5, lsl #2]
     dea:	mov	r2, r4

  // mask data (all but first sample) (mask needed for negative numbers)
  uint32_t msk = (1 << nb) - 1;
  for (int ii = 1; ii < NSAMP; ii++) { tempData[ii] &= (uint16_t)msk; }
     dec:	ldrh.w	r1, [r2, #2]!
     df0:	ands	r1, r0
     df2:	cmp	r6, r2
     df4:	strh	r1, [r2, #0]
     df6:	bne.n	dec <AudioCompress::compress(void*)+0x98>
  // pack all data
  int ncmp = (NSAMP*nb) / 16L;
  int ndat = 12+1 + ncmp;

    // clean data store
  for (int ii = 0; ii < NSAMP; ii++) outData[ii]=0;
     df8:	ldr	r5, [pc, #560]	; (102c <AudioCompress::compress(void*)+0x2d8>)
     dfa:	movs	r2, #232	; 0xe8
     dfc:	movs	r1, #0
     dfe:	str	r3, [sp, #4]
     e00:	add.w	r0, r5, #24
     e04:	bl	e110 <memset>
  *iptr++ = t1;
  *iptr++ = 1;
  *iptr++ = 1+ncmp; // number of data after header
  //
  int kk=12;
  outData[kk++] = tempData[0]; tempData[0] = 0;
     e08:	ldrh.w	r2, [fp]
  *iptr++ = nb | shift<<16;
     e0c:	ldr	r3, [sp, #8]
  outData[kk++] = tempData[0]; tempData[0] = 0;
     e0e:	movs	r1, #0
     e10:	strh	r2, [r5, #24]
  *iptr++ = 0xA5A5A5A5;
     e12:	mov.w	r2, #2779096485	; 0xa5a5a5a5

  // pack data
    // 
    int nx = 16;
     e16:	mov.w	ip, #16
  outData[kk++] = tempData[0]; tempData[0] = 0;
     e1a:	movs	r0, #13
  *iptr++ = 0xA5A5A5A5;
     e1c:	str	r2, [r5, #0]
  *iptr++ = 1;
     e1e:	movs	r2, #1
  *iptr++ = t1;
     e20:	str.w	r9, [r5, #12]
  outData[kk++] = tempData[0]; tempData[0] = 0;
     e24:	strh.w	r1, [fp]
  *iptr++ = 1;
     e28:	str	r2, [r5, #16]
  *iptr++ = to;
     e2a:	strd	r3, sl, [r5, #4]
  *iptr++ = 1+ncmp; // number of data after header
     e2e:	ldr	r3, [sp, #4]
     e30:	str	r3, [r5, #20]
     e32:	b.n	e4a <AudioCompress::compress(void*)+0xf6>
    for (int ii = 0; ii < NSAMP; ii ++)
    {   nx -= nb;
        if(nx > 0)
        {   outData[kk] |= (tempData[ii] << nx);
     e34:	ldrh.w	r1, [r5, r0, lsl #1]
     e38:	mov	ip, r2
     e3a:	orr.w	lr, lr, r1
     e3e:	strh.w	lr, [r5, r0, lsl #1]
    for (int ii = 0; ii < NSAMP; ii ++)
     e42:	cmp	r6, r4
     e44:	beq.n	e78 <AudioCompress::compress(void*)+0x124>
        {   outData[kk] |= (tempData[ii] << nx);
     e46:	ldrh.w	r1, [r4, #2]!
    {   nx -= nb;
     e4a:	sub.w	r2, ip, r7
        if(nx > 0)
     e4e:	cmp	r2, #0
        {   outData[kk] |= (tempData[ii] << nx);
     e50:	lsl.w	lr, r1, r2
        if(nx > 0)
     e54:	bgt.n	e34 <AudioCompress::compress(void*)+0xe0>
        else if(nx==0) 
        {   outData[kk++] |= tempData[ii];
            nx=16;
        } 
        else    // nx is < 0
        {   outData[kk++] |= (tempData[ii] >> (-nx));
     e56:	sub.w	lr, r7, ip
     e5a:	add.w	r9, r0, #1
            nx += 16;
     e5e:	add.w	ip, r2, #16
        {   outData[kk++] |= tempData[ii];
     e62:	ldrh.w	r2, [r5, r0, lsl #1]
        else if(nx==0) 
     e66:	bne.n	ec8 <AudioCompress::compress(void*)+0x174>
        {   outData[kk++] |= tempData[ii];
     e68:	orrs	r2, r1
    for (int ii = 0; ii < NSAMP; ii ++)
     e6a:	cmp	r6, r4
            nx=16;
     e6c:	mov.w	ip, #16
        {   outData[kk++] |= tempData[ii];
     e70:	strh.w	r2, [r5, r0, lsl #1]
     e74:	mov	r0, r9
    for (int ii = 0; ii < NSAMP; ii ++)
     e76:	bne.n	e46 <AudioCompress::compress(void*)+0xf2>
            outData[kk] = (tempData[ii] << nx);
        }
    }
       
    // store actual data
    if ((nout + ndat) <= NSAMP)
     e78:	ldr	r6, [pc, #436]	; (1030 <AudioCompress::compress(void*)+0x2dc>)
     e7a:	ldr	r4, [r6, #0]
     e7c:	add.w	r2, r4, r8
     e80:	cmp	r2, #128	; 0x80
     e82:	bgt.n	ee0 <AudioCompress::compress(void*)+0x18c>
     e84:	mvn.w	r3, #2147483648	; 0x80000000
     e88:	ldr	r2, [pc, #424]	; (1034 <AudioCompress::compress(void*)+0x2e0>)
     e8a:	ldr	r0, [pc, #416]	; (102c <AudioCompress::compress(void*)+0x2d8>)
     e8c:	movw	r1, #42405	; 0xa5a5
     e90:	add	r3, r4
     e92:	add.w	r2, r2, r3, lsl #1
    { // all data fit in current block
        for (int ii = 0; ii < ndat; ii++) dout[nout++] = outData[ii];
     e96:	movs	r3, #0
     e98:	b.n	e9e <AudioCompress::compress(void*)+0x14a>
     e9a:	ldrh.w	r1, [r0, #2]!
     e9e:	adds	r3, #1
     ea0:	strh.w	r1, [r2, #2]!
     ea4:	cmp	r3, r8
     ea6:	blt.n	e9a <AudioCompress::compress(void*)+0x146>
     ea8:	cmp.w	r8, #0
     eac:	add.w	r3, r8, #4294967295
     eb0:	add.w	r4, r4, #1
  int ret=1;
     eb4:	mov.w	r7, #1
        for (int ii = 0; ii < ndat; ii++) dout[nout++] = outData[ii];
     eb8:	it	le
     eba:	movle	r3, #0
     ebc:	add	r3, r4
     ebe:	str	r3, [r6, #0]

        for(nout=0;nout<12;nout++) dout[nout] = outData[nout];
        while (ii < ndat) dout[nout++] = outData[ii++];
    }
    return ret;
}
     ec0:	mov	r0, r7
     ec2:	add	sp, #20
     ec4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        {   outData[kk++] |= (tempData[ii] >> (-nx));
     ec8:	asr.w	lr, r1, lr
            outData[kk] = (tempData[ii] << nx);
     ecc:	lsl.w	r1, r1, ip
        {   outData[kk++] |= (tempData[ii] >> (-nx));
     ed0:	orr.w	lr, lr, r2
     ed4:	strh.w	lr, [r5, r0, lsl #1]
     ed8:	mov	r0, r9
            outData[kk] = (tempData[ii] << nx);
     eda:	strh.w	r1, [r5, r9, lsl #1]
     ede:	b.n	e42 <AudioCompress::compress(void*)+0xee>
    else if ((nout + 12) > NSAMP) //avoid partial header (special case)
     ee0:	cmp	r4, #116	; 0x74
     ee2:	ble.n	f28 <AudioCompress::compress(void*)+0x1d4>
        while(nout<NSAMP) dout[nout++] = 0; // fill rest of block with zero
     ee4:	cmp	r4, #127	; 0x7f
     ee6:	bgt.n	efe <AudioCompress::compress(void*)+0x1aa>
     ee8:	rsb	r2, r4, #128	; 0x80
     eec:	ldr	r0, [pc, #324]	; (1034 <AudioCompress::compress(void*)+0x2e0>)
     eee:	movs	r1, #0
     ef0:	lsls	r2, r2, #1
     ef2:	add.w	r0, r0, r4, lsl #1
     ef6:	bl	e110 <memset>
     efa:	movs	r3, #128	; 0x80
     efc:	str	r3, [r6, #0]
  outputBlock=allocate();
     efe:	bl	c644 <AudioStream::allocate()>
  if(outputBlock)
     f02:	mov	r7, r0
     f04:	cmp	r0, #0
     f06:	bne.n	ffc <AudioCompress::compress(void*)+0x2a8>
        for (int ii=0; ii < ndat; ii++) dout[nout++] = outData[ii];
     f08:	cmp.w	r8, #0
     f0c:	mov.w	r2, r8, lsl #1
     f10:	ldr	r1, [pc, #280]	; (102c <AudioCompress::compress(void*)+0x2d8>)
     f12:	it	le
     f14:	movle	r2, #2
     f16:	ldr	r0, [pc, #284]	; (1034 <AudioCompress::compress(void*)+0x2e0>)
     f18:	bl	a170 <memcpy>
}
     f1c:	mov	r0, r7
     f1e:	str.w	r8, [r6]
     f22:	add	sp, #20
     f24:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        iptr[5] = (iptr[5]<<16) | (nr-6);  //orig remaining data | actual remaining data after header 
     f28:	rsb	r2, r4, #122	; 0x7a
     f2c:	ldr	r0, [pc, #260]	; (1034 <AudioCompress::compress(void*)+0x2e0>)
     f2e:	orr.w	r3, r2, r3, lsl #16
     f32:	movw	r2, #42405	; 0xa5a5
     f36:	str	r3, [r5, #20]
        while (nout < NSAMP ) dout[nout++] = outData[ii++];
     f38:	mvn.w	r3, #2147483648	; 0x80000000
     f3c:	ldr	r5, [pc, #236]	; (102c <AudioCompress::compress(void*)+0x2d8>)
     f3e:	add	r3, r4
     f40:	mov	r1, r5
     f42:	add.w	r3, r0, r3, lsl #1
     f46:	adds	r0, #254	; 0xfe
     f48:	b.n	f4e <AudioCompress::compress(void*)+0x1fa>
     f4a:	ldrh.w	r2, [r1, #2]!
     f4e:	strh.w	r2, [r3, #2]!
     f52:	cmp	r0, r3
     f54:	bne.n	f4a <AudioCompress::compress(void*)+0x1f6>
     f56:	movs	r3, #128	; 0x80
     f58:	rsb	r9, r4, #128	; 0x80
     f5c:	str	r3, [r6, #0]
  outputBlock=allocate();
     f5e:	bl	c644 <AudioStream::allocate()>
  if(outputBlock)
     f62:	mov	r7, r0
     f64:	cmp	r0, #0
     f66:	bne.n	fdc <AudioCompress::compress(void*)+0x288>
        iptr[5]=(iptr[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
     f68:	ldr	r2, [r5, #20]
        while (ii < ndat) dout[nout++] = outData[ii++];
     f6a:	cmp	r9, r8
        iptr[5]=(iptr[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
     f6c:	ldr	r3, [pc, #200]	; (1038 <AudioCompress::compress(void*)+0x2e4>)
        for(nout=0;nout<12;nout++) dout[nout] = outData[nout];
     f6e:	ldr.w	lr, [pc, #188]	; 102c <AudioCompress::compress(void*)+0x2d8>
        iptr[5]=(iptr[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
     f72:	and.w	r3, r3, r2
        nr=ndat-ii;
     f76:	sub.w	r2, r8, r9
        for(nout=0;nout<12;nout++) dout[nout] = outData[nout];
     f7a:	ldr.w	ip, [pc, #184]	; 1034 <AudioCompress::compress(void*)+0x2e0>
        iptr[5]=(iptr[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
     f7e:	orr.w	r3, r3, r2
     f82:	str	r3, [r5, #20]
        for(nout=0;nout<12;nout++) dout[nout] = outData[nout];
     f84:	mov.w	r3, #12
     f88:	str	r3, [r6, #0]
     f8a:	ldmia.w	lr!, {r0, r1, r2, r3}
     f8e:	stmia.w	ip!, {r0, r1, r2, r3}
     f92:	ldmia.w	lr, {r0, r1}
     f96:	stmia.w	ip, {r0, r1}
        while (ii < ndat) dout[nout++] = outData[ii++];
     f9a:	bge.n	ec0 <AudioCompress::compress(void*)+0x16c>
     f9c:	sub.w	r2, r4, #128	; 0x80
     fa0:	add.w	r1, r5, r9, lsl #1
     fa4:	add.w	r0, ip, #8
     fa8:	add	r2, r8
     faa:	lsls	r2, r2, #1
     fac:	bl	a170 <memcpy>
     fb0:	sub.w	r3, r4, #116	; 0x74
}
     fb4:	mov	r0, r7
        while (ii < ndat) dout[nout++] = outData[ii++];
     fb6:	add	r3, r8
     fb8:	str	r3, [r6, #0]
}
     fba:	add	sp, #20
     fbc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint32_t msk = (1 << nb) - 1;
     fc0:	lsl.w	r0, r1, r7
  int ncmp = (NSAMP*nb) / 16L;
     fc4:	mov.w	r8, r7, lsl #3
  *iptr++ = nb | shift<<16;
     fc8:	orr.w	r3, r7, #655360	; 0xa0000
  uint32_t msk = (1 << nb) - 1;
     fcc:	subs	r0, #1
  *iptr++ = nb | shift<<16;
     fce:	str	r3, [sp, #8]
  *iptr++ = 1+ncmp; // number of data after header
     fd0:	add.w	r3, r8, #1
  for (int ii = 1; ii < NSAMP; ii++) { tempData[ii] &= (uint16_t)msk; }
     fd4:	uxth	r0, r0
  int ndat = 12+1 + ncmp;
     fd6:	add.w	r8, r8, #13
     fda:	b.n	dd6 <AudioCompress::compress(void*)+0x82>
    memcpy(outputBlock->data,src,2*NSAMP);
     fdc:	mov.w	r2, #256	; 0x100
     fe0:	ldr	r1, [pc, #80]	; (1034 <AudioCompress::compress(void*)+0x2e0>)
     fe2:	adds	r0, #4
     fe4:	bl	a170 <memcpy>
    transmit(outputBlock);
     fe8:	mov	r1, r7
     fea:	ldr	r0, [sp, #12]
     fec:	movs	r2, #0
     fee:	bl	c740 <AudioStream::transmit(audio_block_struct*, unsigned char)>
    release(outputBlock);
     ff2:	mov	r0, r7
     ff4:	bl	c6f0 <AudioStream::release(audio_block_struct*)>
  int ret=1;
     ff8:	movs	r7, #1
     ffa:	b.n	f68 <AudioCompress::compress(void*)+0x214>
    memcpy(outputBlock->data,src,2*NSAMP);
     ffc:	mov.w	r2, #256	; 0x100
    1000:	ldr	r1, [pc, #48]	; (1034 <AudioCompress::compress(void*)+0x2e0>)
    1002:	adds	r0, #4
    1004:	bl	a170 <memcpy>
    transmit(outputBlock);
    1008:	ldr	r0, [sp, #12]
    100a:	mov	r1, r7
    100c:	movs	r2, #0
    100e:	bl	c740 <AudioStream::transmit(audio_block_struct*, unsigned char)>
    release(outputBlock);
    1012:	mov	r0, r7
  int ret=1;
    1014:	movs	r7, #1
    release(outputBlock);
    1016:	bl	c6f0 <AudioStream::release(audio_block_struct*)>
    return 1;
    101a:	b.n	f08 <AudioCompress::compress(void*)+0x1b4>
    101c:	.word	0x20001a2c
    1020:	.word	0x000a0010
    1024:	.word	0x200076ec
    1028:	.word	0x20006318
    102c:	.word	0x20006214
    1030:	.word	0x200065f8
    1034:	.word	0x200060a4
    1038:	.word	0xffff0000

0000103c <AudioCompress::update()>:
{ int ret=0;
    103c:	push	{r3, r4, r5, lr}
  block_in=receiveReadOnly(0);
    103e:	movs	r1, #0
{ int ret=0;
    1040:	mov	r5, r0
  block_in=receiveReadOnly(0);
    1042:	bl	c788 <AudioStream::receiveReadOnly(unsigned int)>
  if(block_in) 
    1046:	cbz	r0, 105c <AudioCompress::update()+0x20>
    ret=compress(block_in->data);
    1048:	mov	r4, r0
    104a:	adds	r1, r0, #4
    104c:	mov	r0, r5
    104e:	bl	d54 <AudioCompress::compress(void*)>
    release(block_in);
    1052:	mov	r0, r4
}
    1054:	ldmia.w	sp!, {r3, r4, r5, lr}
    release(block_in);
    1058:	b.w	c6f0 <AudioStream::release(audio_block_struct*)>
}
    105c:	pop	{r3, r4, r5, pc}
    105e:	nop

00001060 <newDirectory(char*)>:
#else
  uint32_t getTeensySerial(void)  { return 0;}
#endif

int16_t newDirectory(char *dirName)
{ if(newHour())
    1060:	push	{r4, r5, lr}
    1062:	sub	sp, #28
    1064:	mov	r4, r0
{   uint32_t tx=rtc_get();
    1066:	bl	bb4c <rtc_get>
    int32_t h_ = (int32_t) tx/SECS_PER_HOUR;  // use hours since 1970 as measures
    106a:	ldr	r3, [pc, #116]	; (10e0 <newDirectory(char*)+0x80>)
{   uint32_t tx=rtc_get();
    106c:	mov	r2, r0
    if(hour_== h_) return 0;
    106e:	ldr	r5, [pc, #116]	; (10e4 <newDirectory(char*)+0x84>)
    int32_t h_ = (int32_t) tx/SECS_PER_HOUR;  // use hours since 1970 as measures
    1070:	smull	r1, r3, r3, r2
    1074:	asrs	r1, r2, #31
    if(hour_== h_) return 0;
    1076:	ldr	r0, [r5, #0]
    int32_t h_ = (int32_t) tx/SECS_PER_HOUR;  // use hours since 1970 as measures
    1078:	add	r3, r2
    107a:	rsb	r3, r1, r3, asr #11
    if(hour_== h_) return 0;
    107e:	cmp	r3, r0
    1080:	beq.n	10d8 <newDirectory(char*)+0x78>
    hour_ = h_;
    1082:	str	r3, [r5, #0]
    {   
        tmElements_t tm;
        breakTime(rtc_get(), tm);
    1084:	bl	bb4c <rtc_get>
    1088:	add	r2, sp, #16
    108a:	movs	r1, #0
    108c:	bl	2080 <breakTime(long long, tmElements_t&)>
        sprintf(dirName, "/%s%06x_%04d%02d%02d/%02d/", 
                      DirPrefix,(unsigned int)SerNum,
                              tmYearToCalendar(tm.Year),tm.Month, tm.Day, tm.Hour);
    1090:	ldrb.w	r2, [sp, #22]
        sprintf(dirName, "/%s%06x_%04d%02d%02d/%02d/", 
    1094:	ldrb.w	r1, [sp, #20]
    1098:	ldrb.w	r0, [sp, #21]
    109c:	addw	r2, r2, #1970	; 0x7b2
    10a0:	ldrb.w	r5, [sp, #18]
    10a4:	ldr	r3, [pc, #64]	; (10e8 <newDirectory(char*)+0x88>)
    10a6:	strd	r1, r5, [sp, #8]
    10aa:	ldr	r3, [r3, #0]
    10ac:	ldr	r1, [pc, #60]	; (10ec <newDirectory(char*)+0x8c>)
    10ae:	strd	r2, r0, [sp]
    10b2:	ldr	r2, [pc, #60]	; (10f0 <newDirectory(char*)+0x90>)
    10b4:	mov	r0, r4
    10b6:	ldr	r2, [r2, #0]
    10b8:	bl	de20 <sprintf>
	// Discard all received data which has not been read.
        virtual void clear(void) { usb_serial_flush_input(); }
	// Transmit a single byte to your PC
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
	// Transmit a buffer containing any number of bytes to your PC
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    10bc:	movs	r1, #1
    10be:	ldr	r0, [pc, #52]	; (10f4 <newDirectory(char*)+0x94>)
    10c0:	bl	a8e8 <usb_serial_write>
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    10c4:	mov	r0, r4
    10c6:	bl	e480 <strlen>
    10ca:	mov	r1, r0
    10cc:	mov	r0, r4
    10ce:	bl	a8e8 <usb_serial_write>
        //
        Serial.print("\n"); Serial.print(dirName);
        return 1;
    10d2:	movs	r0, #1
    }
    return 0;
}
    10d4:	add	sp, #28
    10d6:	pop	{r4, r5, pc}
    return 0;
    10d8:	movs	r0, #0
}
    10da:	add	sp, #28
    10dc:	pop	{r4, r5, pc}
    10de:	nop
    10e0:	.word	0x91a2b3c5
    10e4:	.word	0x20007664
    10e8:	.word	0x200058c8
    10ec:	.word	0x200004f8
    10f0:	.word	0x20001448
    10f4:	.word	0x200007a0

000010f8 <newFileName(char*)>:

int16_t newFileName(char *fileName)
{
    10f8:	push	{r4, r5, lr}
    10fa:	sub	sp, #44	; 0x2c
    10fc:	mov	r4, r0
    tmElements_t tm;
    breakTime(rtc_get(), tm);
    10fe:	bl	bb4c <rtc_get>
    1102:	movs	r1, #0
    1104:	add	r2, sp, #32
    1106:	bl	2080 <breakTime(long long, tmElements_t&)>
    
    sprintf(fileName, "/%s%06x_%04d%02d%02d/%02d/%s_%02d%02d%02d.bin", 
    110a:	ldrb.w	r0, [sp, #33]	; 0x21
    110e:	ldr	r3, [pc, #96]	; (1170 <newFileName(char*)+0x78>)
    1110:	str	r0, [sp, #24]
    1112:	ldr	r0, [r3, #0]
    1114:	ldrb.w	r1, [sp, #34]	; 0x22
    1118:	str	r0, [sp, #16]
    111a:	ldrb.w	r5, [sp, #32]
    111e:	ldrb.w	r0, [sp, #36]	; 0x24
            DirPrefix,(unsigned int)SerNum,
                      tmYearToCalendar(tm.Year),tm.Month, tm.Day, tm.Hour, 
    1122:	ldrb.w	r2, [sp, #38]	; 0x26
    sprintf(fileName, "/%s%06x_%04d%02d%02d/%02d/%s_%02d%02d%02d.bin", 
    1126:	ldr	r3, [pc, #76]	; (1174 <newFileName(char*)+0x7c>)
    1128:	str	r5, [sp, #28]
    112a:	addw	r2, r2, #1970	; 0x7b2
    112e:	ldr	r3, [r3, #0]
    1130:	str	r1, [sp, #20]
    1132:	strd	r0, r1, [sp, #8]
    1136:	ldrb.w	r0, [sp, #37]	; 0x25
    113a:	ldr	r1, [pc, #60]	; (1178 <newFileName(char*)+0x80>)
    113c:	strd	r2, r0, [sp]
    1140:	ldr	r2, [pc, #56]	; (117c <newFileName(char*)+0x84>)
    1142:	mov	r0, r4
    1144:	ldr	r2, [r2, #0]
    1146:	bl	de20 <sprintf>
    114a:	movs	r1, #1
    114c:	ldr	r0, [pc, #48]	; (1180 <newFileName(char*)+0x88>)
    114e:	bl	a8e8 <usb_serial_write>
    1152:	movs	r1, #2
    1154:	ldr	r0, [pc, #44]	; (1184 <newFileName(char*)+0x8c>)
    1156:	bl	a8e8 <usb_serial_write>
    115a:	mov	r0, r4
    115c:	bl	e480 <strlen>
    1160:	mov	r1, r0
    1162:	mov	r0, r4
    1164:	bl	a8e8 <usb_serial_write>
                      FilePrefix, tm.Hour, tm.Minute, tm.Second);
    //
    Serial.print("\n"); Serial.print(": ");Serial.print(fileName);
    return 1;
}
    1168:	movs	r0, #1
    116a:	add	sp, #44	; 0x2c
    116c:	pop	{r4, r5, pc}
    116e:	nop
    1170:	.word	0x20001454
    1174:	.word	0x200058c8
    1178:	.word	0x200004c4
    117c:	.word	0x20001448
    1180:	.word	0x200007a0
    1184:	.word	0x200004f4

00001188 <makeHeader(char*)>:

int16_t makeHeader(char *header)
{
    1188:	push	{r4, r5, lr}
     * @param header is pointer to header
     * 
     */
    #define MAGIC "WMXZ"
    tmElements_t tm;
    breakTime(rtc_get(), tm);
    118a:	movs	r5, #0
{
    118c:	sub	sp, #36	; 0x24
    118e:	mov	r4, r0
    breakTime(rtc_get(), tm);
    1190:	bl	bb4c <rtc_get>
    1194:	add	r2, sp, #24
    1196:	mov	r1, r5
    1198:	bl	2080 <breakTime(long long, tmElements_t&)>

    int nd=sprintf(header,"%s%04d%02d%02d_%02d%02d%02d",
    119c:	ldrb.w	r1, [sp, #24]
    11a0:	ldrb.w	r2, [sp, #25]
    11a4:	mov	r0, r4
            MAGIC,tmYearToCalendar(tm.Year),tm.Month,tm.Day,tm.Hour,tm.Minute,tm.Second);
    11a6:	ldrb.w	r3, [sp, #30]
    int nd=sprintf(header,"%s%04d%02d%02d_%02d%02d%02d",
    11aa:	strd	r2, r1, [sp, #12]
    11ae:	ldrb.w	r1, [sp, #26]
    11b2:	addw	r3, r3, #1970	; 0x7b2
    11b6:	ldrb.w	r2, [sp, #28]
    11ba:	strd	r2, r1, [sp, #4]
    11be:	ldrb.w	r1, [sp, #29]
    11c2:	ldr	r2, [pc, #56]	; (11fc <makeHeader(char*)+0x74>)
    11c4:	str	r1, [sp, #0]
    11c6:	ldr	r1, [pc, #56]	; (1200 <makeHeader(char*)+0x78>)
    11c8:	bl	de20 <sprintf>
    char *ptr = header+(nd+1);
    int32_t *iptr = (int32_t *) ptr;
    //float *fptr = (float *) ptr;
    
    // to be filled in
    iptr[0] = 1;                    // SW version
    11cc:	movs	r2, #1
    iptr[1] = (int32_t)SerNum;      // serial number
    11ce:	ldr	r1, [pc, #52]	; (1204 <makeHeader(char*)+0x7c>)
    char *ptr = header+(nd+1);
    11d0:	adds	r3, r0, r2
    iptr[0] = 1;                    // SW version
    11d2:	str	r2, [r4, r3]
    char *ptr = header+(nd+1);
    11d4:	add	r3, r4
    iptr[1] = (int32_t)SerNum;      // serial number
    11d6:	ldr	r0, [r1, #0]
    iptr[4] = t_acq;
    iptr[5] = t_on;
    iptr[6] = t_off;

    uint32_t *uptr = (uint32_t*) header;
    uptr[127] = 0x55555555;
    11d8:	mov.w	r1, #1431655765	; 0x55555555
    iptr[6] = t_off;
    11dc:	str	r5, [r3, #24]
    iptr[2] = fsamp;
    11de:	movw	r5, #44100	; 0xac44
    iptr[3] = nch;
    11e2:	str	r2, [r3, #12]
    iptr[1] = (int32_t)SerNum;      // serial number
    11e4:	str	r0, [r3, #4]
    //
    return 1;
}
    11e6:	mov	r0, r2
    iptr[2] = fsamp;
    11e8:	str	r5, [r3, #8]
    iptr[5] = t_on;
    11ea:	mov.w	r2, #300	; 0x12c
    11ee:	movs	r5, #60	; 0x3c
    11f0:	strd	r5, r2, [r3, #16]
    uptr[127] = 0x55555555;
    11f4:	str.w	r1, [r4, #508]	; 0x1fc
}
    11f8:	add	sp, #36	; 0x24
    11fa:	pop	{r4, r5, pc}
    11fc:	.word	0x20000470
    1200:	.word	0x20000478
    1204:	.word	0x200058c8

00001208 <storeData(int) [clone .part.0]>:
    haveSD=1;
  }

}

int16_t storeData(int status)
    1208:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    120c:	sub	sp, #80	; 0x50
{
  int32_t nbuf=sizeof(diskBuffer);

  if(!haveSD) return status;

  switch(status)
    120e:	cmp	r0, #5
    1210:	bhi.w	1478 <storeData(int) [clone .part.0]+0x270>
    1214:	tbh	[pc, r0, lsl #1]
    1218:	.word	0x00960060
    121c:	.word	0x00d700bb
    1220:	.word	0x00060006
		if (f) {
    1224:	ldr	r5, [pc, #604]	; (1484 <storeData(int) [clone .part.0]+0x27c>)
    1226:	ldr	r4, [r5, #16]
    1228:	cmp	r4, #0
    122a:	beq.w	1478 <storeData(int) [clone .part.0]+0x270>
			f->close();
    122e:	ldr	r3, [r4, #0]
    1230:	ldr	r6, [pc, #596]	; (1488 <storeData(int) [clone .part.0]+0x280>)
    1232:	ldr	r3, [r3, #44]	; 0x2c
    1234:	cmp	r3, r6
    1236:	bne.w	1716 <storeData(int) [clone .part.0]+0x50e>
		if (filename) {
    123a:	ldr	r0, [r4, #88]	; 0x58
    123c:	cbz	r0, 1246 <storeData(int) [clone .part.0]+0x3e>
			free(filename);
    123e:	bl	d2ec <free>
			filename = nullptr;
    1242:	movs	r3, #0
    1244:	str	r3, [r4, #88]	; 0x58
    1246:	ldr	r3, [r4, #80]	; 0x50
    1248:	cmp	r3, #0
    124a:	beq.w	16cc <storeData(int) [clone .part.0]+0x4c4>
			sdfatfile.close();
    124e:	add.w	r0, r4, #24
    1252:	bl	7828 <FsBaseFile::close()>
		if (--(f->refcount) == 0) {
    1256:	ldr	r7, [r5, #16]
    1258:	ldr	r4, [r7, #4]
    125a:	subs	r4, #1
    125c:	str	r4, [r7, #4]
    125e:	cmp	r4, #0
    1260:	bne.n	12ca <storeData(int) [clone .part.0]+0xc2>
			f->close();
    1262:	ldr	r3, [r7, #0]
    1264:	ldr	r3, [r3, #44]	; 0x2c
    1266:	cmp	r3, r6
    1268:	bne.w	1738 <storeData(int) [clone .part.0]+0x530>
		if (filename) {
    126c:	ldr	r0, [r7, #88]	; 0x58
    126e:	cbz	r0, 1276 <storeData(int) [clone .part.0]+0x6e>
			free(filename);
    1270:	bl	d2ec <free>
			filename = nullptr;
    1274:	str	r4, [r7, #88]	; 0x58
    1276:	ldr	r3, [r7, #80]	; 0x50
    1278:	cmp	r3, #0
    127a:	beq.w	171c <storeData(int) [clone .part.0]+0x514>
			sdfatfile.close();
    127e:	add.w	r0, r7, #24
    1282:	bl	7828 <FsBaseFile::close()>
			delete f;
    1286:	ldr	r4, [r5, #16]
    1288:	cbz	r4, 12ca <storeData(int) [clone .part.0]+0xc2>
    128a:	ldr	r3, [r4, #0]
    128c:	ldr	r2, [pc, #508]	; (148c <storeData(int) [clone .part.0]+0x284>)
    128e:	ldr	r3, [r3, #4]
    1290:	cmp	r3, r2
    1292:	bne.w	1766 <storeData(int) [clone .part.0]+0x55e>
	virtual ~SDFile(void) {
    1296:	ldr	r3, [pc, #504]	; (1490 <storeData(int) [clone .part.0]+0x288>)
		if (filename) {
    1298:	ldr	r0, [r4, #88]	; 0x58
	virtual ~SDFile(void) {
    129a:	str	r3, [r4, #0]
		if (filename) {
    129c:	cbz	r0, 12a6 <storeData(int) [clone .part.0]+0x9e>
			free(filename);
    129e:	bl	d2ec <free>
			filename = nullptr;
    12a2:	movs	r3, #0
    12a4:	str	r3, [r4, #88]	; 0x58
    12a6:	ldr	r3, [r4, #80]	; 0x50
			sdfatfile.close();
    12a8:	add.w	r6, r4, #24
    12ac:	cmp	r3, #0
    12ae:	beq.w	16bc <storeData(int) [clone .part.0]+0x4b4>
    12b2:	mov	r0, r6
    12b4:	bl	7828 <FsBaseFile::close()>
    12b8:	ldr	r3, [pc, #472]	; (1494 <storeData(int) [clone .part.0]+0x28c>)
  ~FsBaseFile() { close(); }
    12ba:	mov	r0, r6
    12bc:	str	r3, [r4, #8]
    12be:	bl	7828 <FsBaseFile::close()>
	}
    12c2:	movs	r1, #92	; 0x5c
    12c4:	mov	r0, r4
    12c6:	bl	d148 <operator delete(void*, unsigned int)>
		}
		f = nullptr;
    12ca:	movs	r3, #0
	}
    12cc:	mov.w	r0, #4294967295
		f = nullptr;
    12d0:	str	r3, [r5, #16]
          break;
    default:
          status=-1;
  }
  return status;
}
    12d2:	add	sp, #80	; 0x50
    12d4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          if(newDirectory(dirName)) 
    12d8:	ldr	r0, [pc, #444]	; (1498 <storeData(int) [clone .part.0]+0x290>)
    12da:	bl	1060 <newDirectory(char*)>
    12de:	cmp	r0, #0
    12e0:	beq.w	14d6 <storeData(int) [clone .part.0]+0x2ce>
   * \param[in] path Path of the file to be tested for.
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    return m_fVol   ? m_fVol->exists(path)
    12e4:	ldr	r4, [pc, #436]	; (149c <storeData(int) [clone .part.0]+0x294>)
    12e6:	ldr.w	r2, [r4, #1156]	; 0x484
    12ea:	cmp	r2, #0
    12ec:	beq.w	14b8 <storeData(int) [clone .part.0]+0x2b0>
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile tmp;
    return tmp.open(this, path, O_RDONLY);
    12f0:	mov	r5, sp
  FatFile() {}
    12f2:	movs	r3, #0
    12f4:	mov	r1, r2
    12f6:	ldr	r2, [pc, #416]	; (1498 <storeData(int) [clone .part.0]+0x290>)
    12f8:	mov	r0, r5
    12fa:	str	r3, [sp, #0]
    12fc:	bl	60d0 <FatFile::open(FatVolume*, char const*, int)>
          {   if( !SD.exists(dirName) && 
    1300:	cmp	r0, #0
    1302:	bne.w	14d6 <storeData(int) [clone .part.0]+0x2ce>
   * \param[in] pFlag Create missing parent directories if true.
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char* path, bool pFlag = true) {
    return m_fVol   ? m_fVol->mkdir(path, pFlag)
    1306:	ldr.w	r6, [r4, #1156]	; 0x484
    130a:	cmp	r6, #0
    130c:	beq.w	17fa <storeData(int) [clone .part.0]+0x5f2>
    1310:	movs	r4, #0
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char* path, bool pFlag = true) {
    FatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
    1312:	movs	r3, #1
    1314:	ldr	r2, [pc, #384]	; (1498 <storeData(int) [clone .part.0]+0x290>)
    1316:	addw	r1, r6, #1092	; 0x444
    131a:	mov	r0, r5
    131c:	str	r4, [sp, #0]
    131e:	bl	5ef4 <FatFile::mkdir(FatFile*, char const*, bool)>
    1322:	cmp	r0, #0
    1324:	bne.w	14d6 <storeData(int) [clone .part.0]+0x2ce>
{ Serial.println();
    1328:	ldr	r0, [pc, #372]	; (14a0 <storeData(int) [clone .part.0]+0x298>)
    132a:	bl	d0f8 <Print::println()>
    132e:	movs	r2, #9
    1330:	ldr	r1, [pc, #368]	; (14a4 <storeData(int) [clone .part.0]+0x29c>)
    1332:	ldr	r0, [pc, #364]	; (14a0 <storeData(int) [clone .part.0]+0x298>)
    1334:	bl	c45c <usb_serial_class::write(unsigned char const*, unsigned int)>
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
    1338:	ldr	r0, [pc, #356]	; (14a0 <storeData(int) [clone .part.0]+0x298>)
    133a:	bl	d0f8 <Print::println()>
                  !SD.mkdir(dirName)) return ErrorMsg("Error Dir");
    133e:	mov.w	r0, #4294967295
    1342:	b.n	147c <storeData(int) [clone .part.0]+0x274>
          makeHeader(header);
    1344:	ldr	r0, [pc, #352]	; (14a8 <storeData(int) [clone .part.0]+0x2a0>)
    1346:	bl	1188 <makeHeader(char*)>
          if(file.write((const void*)header,512) < 512) return ErrorMsg("Error Header");
    134a:	ldr	r3, [pc, #312]	; (1484 <storeData(int) [clone .part.0]+0x27c>)
    134c:	ldr	r3, [r3, #16]
		return (f) ? f->write(buf, size) : 0;
    134e:	cbz	r3, 1374 <storeData(int) [clone .part.0]+0x16c>
    1350:	ldr	r1, [r3, #0]
    1352:	ldr	r2, [pc, #344]	; (14ac <storeData(int) [clone .part.0]+0x2a4>)
    1354:	ldr	r4, [r1, #12]
    1356:	cmp	r4, r2
    1358:	bne.w	173e <storeData(int) [clone .part.0]+0x536>
    return m_fFile   ? m_fFile->write(buf, count)
    135c:	ldr	r0, [r3, #80]	; 0x50
    135e:	cmp	r0, #0
    1360:	beq.w	160c <storeData(int) [clone .part.0]+0x404>
    1364:	mov.w	r2, #512	; 0x200
    1368:	ldr	r1, [pc, #316]	; (14a8 <storeData(int) [clone .part.0]+0x2a0>)
    136a:	bl	69c0 <FatFile::write(void const*, unsigned int)>
    136e:	cmp.w	r0, #512	; 0x200
    1372:	bcs.n	13be <storeData(int) [clone .part.0]+0x1b6>
{ Serial.println();
    1374:	ldr	r0, [pc, #296]	; (14a0 <storeData(int) [clone .part.0]+0x298>)
    1376:	bl	d0f8 <Print::println()>
    137a:	movs	r1, #12
    137c:	ldr	r0, [pc, #304]	; (14b0 <storeData(int) [clone .part.0]+0x2a8>)
    137e:	bl	a8e8 <usb_serial_write>
    1382:	ldr	r0, [pc, #284]	; (14a0 <storeData(int) [clone .part.0]+0x298>)
    1384:	bl	d0f8 <Print::println()>
          if(file.write((const void*)header,512) < 512) return ErrorMsg("Error Header");
    1388:	mov.w	r0, #4294967295
    138c:	b.n	147c <storeData(int) [clone .part.0]+0x274>
          if(file.write((const void *)diskBuffer, nbuf) < (size_t) nbuf) return ErrorMsg("Error Data");
    138e:	ldr	r3, [pc, #244]	; (1484 <storeData(int) [clone .part.0]+0x27c>)
    1390:	ldr	r3, [r3, #16]
    1392:	cmp	r3, #0
    1394:	beq.w	15f2 <storeData(int) [clone .part.0]+0x3ea>
    1398:	ldr	r1, [r3, #0]
    139a:	ldr	r2, [pc, #272]	; (14ac <storeData(int) [clone .part.0]+0x2a4>)
    139c:	ldr	r4, [r1, #12]
    139e:	cmp	r4, r2
    13a0:	bne.w	1750 <storeData(int) [clone .part.0]+0x548>
    13a4:	ldr	r0, [r3, #80]	; 0x50
    13a6:	cmp	r0, #0
    13a8:	beq.w	1620 <storeData(int) [clone .part.0]+0x418>
    13ac:	mov.w	r2, #2560	; 0xa00
    13b0:	ldr	r1, [pc, #256]	; (14b4 <storeData(int) [clone .part.0]+0x2ac>)
    13b2:	bl	69c0 <FatFile::write(void const*, unsigned int)>
    13b6:	cmp.w	r0, #2560	; 0xa00
    13ba:	bcc.w	15f2 <storeData(int) [clone .part.0]+0x3ea>
  switch(status)
    13be:	movs	r0, #2
}
    13c0:	add	sp, #80	; 0x50
    13c2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (f) {
    13c6:	ldr	r5, [pc, #188]	; (1484 <storeData(int) [clone .part.0]+0x27c>)
    13c8:	ldr	r4, [r5, #16]
    13ca:	cmp	r4, #0
    13cc:	beq.w	16da <storeData(int) [clone .part.0]+0x4d2>
			f->close();
    13d0:	ldr	r3, [r4, #0]
    13d2:	ldr	r6, [pc, #180]	; (1488 <storeData(int) [clone .part.0]+0x280>)
    13d4:	ldr	r3, [r3, #44]	; 0x2c
    13d6:	cmp	r3, r6
    13d8:	bne.w	174a <storeData(int) [clone .part.0]+0x542>
		if (filename) {
    13dc:	ldr	r0, [r4, #88]	; 0x58
    13de:	cbz	r0, 13e8 <storeData(int) [clone .part.0]+0x1e0>
			free(filename);
    13e0:	bl	d2ec <free>
			filename = nullptr;
    13e4:	movs	r3, #0
    13e6:	str	r3, [r4, #88]	; 0x58
  bool isOpen() const { return m_fFile || m_xFile; }
    13e8:	ldr	r3, [r4, #80]	; 0x50
    13ea:	cmp	r3, #0
    13ec:	beq.w	1726 <storeData(int) [clone .part.0]+0x51e>
			sdfatfile.close();
    13f0:	add.w	r0, r4, #24
    13f4:	bl	7828 <FsBaseFile::close()>
		if (--(f->refcount) == 0) {
    13f8:	ldr	r7, [r5, #16]
    13fa:	ldr	r4, [r7, #4]
    13fc:	subs	r4, #1
    13fe:	str	r4, [r7, #4]
    1400:	cmp	r4, #0
    1402:	bne.n	146c <storeData(int) [clone .part.0]+0x264>
			f->close();
    1404:	ldr	r3, [r7, #0]
    1406:	ldr	r3, [r3, #44]	; 0x2c
    1408:	cmp	r3, r6
    140a:	bne.w	16c6 <storeData(int) [clone .part.0]+0x4be>
		if (filename) {
    140e:	ldr	r0, [r7, #88]	; 0x58
    1410:	cbz	r0, 1418 <storeData(int) [clone .part.0]+0x210>
			free(filename);
    1412:	bl	d2ec <free>
			filename = nullptr;
    1416:	str	r4, [r7, #88]	; 0x58
    1418:	ldr	r3, [r7, #80]	; 0x50
    141a:	cmp	r3, #0
    141c:	beq.w	17ac <storeData(int) [clone .part.0]+0x5a4>
			sdfatfile.close();
    1420:	add.w	r0, r7, #24
    1424:	bl	7828 <FsBaseFile::close()>
			delete f;
    1428:	ldr	r4, [r5, #16]
    142a:	cbz	r4, 146c <storeData(int) [clone .part.0]+0x264>
    142c:	ldr	r3, [r4, #0]
    142e:	ldr	r2, [pc, #92]	; (148c <storeData(int) [clone .part.0]+0x284>)
    1430:	ldr	r3, [r3, #4]
    1432:	cmp	r3, r2
    1434:	bne.w	17e0 <storeData(int) [clone .part.0]+0x5d8>
	virtual ~SDFile(void) {
    1438:	ldr	r3, [pc, #84]	; (1490 <storeData(int) [clone .part.0]+0x288>)
		if (filename) {
    143a:	ldr	r0, [r4, #88]	; 0x58
	virtual ~SDFile(void) {
    143c:	str	r3, [r4, #0]
		if (filename) {
    143e:	cbz	r0, 1448 <storeData(int) [clone .part.0]+0x240>
			free(filename);
    1440:	bl	d2ec <free>
			filename = nullptr;
    1444:	movs	r3, #0
    1446:	str	r3, [r4, #88]	; 0x58
    1448:	ldr	r3, [r4, #80]	; 0x50
			sdfatfile.close();
    144a:	add.w	r6, r4, #24
    144e:	cmp	r3, #0
    1450:	beq.w	17ca <storeData(int) [clone .part.0]+0x5c2>
    1454:	mov	r0, r6
    1456:	bl	7828 <FsBaseFile::close()>
    145a:	ldr	r3, [pc, #56]	; (1494 <storeData(int) [clone .part.0]+0x28c>)
  ~FsBaseFile() { close(); }
    145c:	mov	r0, r6
    145e:	str	r3, [r4, #8]
    1460:	bl	7828 <FsBaseFile::close()>
	}
    1464:	movs	r1, #92	; 0x5c
    1466:	mov	r0, r4
    1468:	bl	d148 <operator delete(void*, unsigned int)>
		f = nullptr;
    146c:	movs	r3, #0
	}
    146e:	mov	r0, r3
		f = nullptr;
    1470:	str	r3, [r5, #16]
    1472:	add	sp, #80	; 0x50
    1474:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1478:	mov.w	r0, #4294967295
    147c:	add	sp, #80	; 0x50
    147e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1482:	nop
    1484:	.word	0x200073cc
    1488:	.word	0x00000239
    148c:	.word	0x00000959
    1490:	.word	0x20000ae8
    1494:	.word	0x2000099c
    1498:	.word	0x20006924
    149c:	.word	0x20005308
    14a0:	.word	0x20001458
    14a4:	.word	0x20000514
    14a8:	.word	0x20007464
    14ac:	.word	0x00000739
    14b0:	.word	0x20000548
    14b4:	.word	0x200069a4
    14b8:	ldr.w	r1, [r4, #1160]	; 0x488
           : m_xVol ? m_xVol->exists(path)
    14bc:	cmp	r1, #0
    14be:	beq.w	1328 <storeData(int) [clone .part.0]+0x120>
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    ExFatFile tmp;
    return tmp.open(this, path, O_RDONLY);
    14c2:	mov	r5, sp
    14c4:	mov	r3, r2
  ExFatFile() {}
    14c6:	str	r2, [sp, #48]	; 0x30
    14c8:	mov	r0, r5
    14ca:	ldr	r2, [pc, #672]	; (176c <storeData(int) [clone .part.0]+0x564>)
    14cc:	bl	4484 <ExFatFile::open(ExFatVolume*, char const*, int)>
    14d0:	cmp	r0, #0
    14d2:	beq.w	1306 <storeData(int) [clone .part.0]+0xfe>
          if(!newFileName(fileName))return ErrorMsg("Failing new file");
    14d6:	ldr	r0, [pc, #664]	; (1770 <storeData(int) [clone .part.0]+0x568>)
    14d8:	bl	10f8 <newFileName(char*)>
    14dc:	cmp	r0, #0
    14de:	beq.w	1828 <storeData(int) [clone .part.0]+0x620>
	bool begin(uint8_t csPin = 10);
	File open(const char *filepath, uint8_t mode = FILE_READ) {
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
		SDFAT_FILE file = sdfs.open(filepath, flags);
    14e2:	movw	r3, #514	; 0x202
    14e6:	ldr	r2, [pc, #648]	; (1770 <storeData(int) [clone .part.0]+0x568>)
    14e8:	ldr	r1, [pc, #648]	; (1774 <storeData(int) [clone .part.0]+0x56c>)
    14ea:	mov	r0, sp
    14ec:	bl	7a80 <FsVolume::open(char const*, int)>
  bool isOpen() const { return m_fFile || m_xFile; }
    14f0:	ldr	r3, [sp, #72]	; 0x48
    14f2:	cmp	r3, #0
    14f4:	beq.w	16e6 <storeData(int) [clone .part.0]+0x4de>
		if (file) return File(new SDFile(file));
    14f8:	movs	r0, #92	; 0x5c
class FileImpl {
    14fa:	movs	r5, #0
    14fc:	bl	d144 <operator new(unsigned int)>
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
    1500:	ldr	r3, [pc, #628]	; (1778 <storeData(int) [clone .part.0]+0x570>)
class Print
    1502:	ldrb.w	r6, [sp, #4]
		if (file) return File(new SDFile(file));
    1506:	mov	r4, r0
class Stream : public Print
    1508:	ldr	r1, [sp, #8]
    150a:	adds	r0, #24
    150c:	ldrb.w	r2, [sp, #12]
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
    1510:	str.w	r3, [r0, #-24]
    1514:	ldr	r3, [pc, #612]	; (177c <storeData(int) [clone .part.0]+0x574>)
    1516:	strb.w	r6, [r0, #-12]
    151a:	str.w	r1, [r0, #-8]
    151e:	add	r1, sp, #16
    1520:	str.w	r5, [r0, #-20]
    1524:	strb.w	r2, [r0, #-4]
    1528:	str.w	r3, [r0, #-16]
    152c:	bl	77a4 <FsBaseFile::FsBaseFile(FsBaseFile const&)>
		if (f) f->refcount++;
    1530:	ldr	r3, [r4, #4]
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    1532:	ldr	r2, [pc, #588]	; (1780 <storeData(int) [clone .part.0]+0x578>)
  ~FsBaseFile() { close(); }
    1534:	add	r0, sp, #16
    1536:	adds	r3, #1
    1538:	ldr.w	r8, [pc, #620]	; 17a8 <storeData(int) [clone .part.0]+0x5a0>
    153c:	str	r5, [r4, #88]	; 0x58
    153e:	str	r3, [r4, #4]
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    1540:	str	r2, [r4, #8]
		if (f) { dec_refcount(); /*Serial.println("File move assignment autoclose");*/ }
    1542:	ldr	r5, [pc, #576]	; (1784 <storeData(int) [clone .part.0]+0x57c>)
    1544:	str.w	r8, [sp]
  ~FsBaseFile() { close(); }
    1548:	bl	7828 <FsBaseFile::close()>
		if (file.f) file.f->refcount++;
    154c:	ldr	r7, [r4, #4]
		if (f) { dec_refcount(); /*Serial.println("File move assignment autoclose");*/ }
    154e:	ldr	r6, [r5, #16]
		if (file.f) file.f->refcount++;
    1550:	adds	r3, r7, #1
    1552:	str	r3, [r4, #4]
		if (f) { dec_refcount(); /*Serial.println("File move assignment autoclose");*/ }
    1554:	cmp	r6, #0
    1556:	beq.w	16d6 <storeData(int) [clone .part.0]+0x4ce>
		if (--(f->refcount) == 0) {
    155a:	ldr	r3, [r6, #4]
    155c:	subs	r3, #1
    155e:	str	r3, [r6, #4]
    1560:	cmp	r3, #0
    1562:	bne.n	1632 <storeData(int) [clone .part.0]+0x42a>
			f->close();
    1564:	ldr	r3, [r6, #0]
    1566:	ldr	r2, [pc, #544]	; (1788 <storeData(int) [clone .part.0]+0x580>)
    1568:	ldr	r3, [r3, #44]	; 0x2c
    156a:	cmp	r3, r2
    156c:	bne.w	17da <storeData(int) [clone .part.0]+0x5d2>
		if (filename) {
    1570:	ldr	r0, [r6, #88]	; 0x58
    1572:	cbz	r0, 157c <storeData(int) [clone .part.0]+0x374>
			free(filename);
    1574:	bl	d2ec <free>
			filename = nullptr;
    1578:	movs	r3, #0
    157a:	str	r3, [r6, #88]	; 0x58
  bool isOpen() const { return m_fFile || m_xFile; }
    157c:	ldr	r3, [r6, #80]	; 0x50
    157e:	cmp	r3, #0
    1580:	beq.w	17b6 <storeData(int) [clone .part.0]+0x5ae>
			sdfatfile.close();
    1584:	add.w	r0, r6, #24
    1588:	bl	7828 <FsBaseFile::close()>
			delete f;
    158c:	ldr	r6, [r5, #16]
    158e:	cbz	r6, 15d0 <storeData(int) [clone .part.0]+0x3c8>
    1590:	ldr	r3, [r6, #0]
    1592:	ldr	r2, [pc, #504]	; (178c <storeData(int) [clone .part.0]+0x584>)
    1594:	ldr	r3, [r3, #4]
    1596:	cmp	r3, r2
    1598:	bne.w	181c <storeData(int) [clone .part.0]+0x614>
	virtual ~SDFile(void) {
    159c:	ldr	r3, [pc, #472]	; (1778 <storeData(int) [clone .part.0]+0x570>)
		if (filename) {
    159e:	ldr	r0, [r6, #88]	; 0x58
	virtual ~SDFile(void) {
    15a0:	str	r3, [r6, #0]
		if (filename) {
    15a2:	cbz	r0, 15ac <storeData(int) [clone .part.0]+0x3a4>
			free(filename);
    15a4:	bl	d2ec <free>
			filename = nullptr;
    15a8:	movs	r3, #0
    15aa:	str	r3, [r6, #88]	; 0x58
    15ac:	ldr	r3, [r6, #80]	; 0x50
			sdfatfile.close();
    15ae:	add.w	r7, r6, #24
    15b2:	cmp	r3, #0
    15b4:	beq.w	17e6 <storeData(int) [clone .part.0]+0x5de>
    15b8:	mov	r0, r7
    15ba:	bl	7828 <FsBaseFile::close()>
  ~FsBaseFile() { close(); }
    15be:	mov	r0, r7
    15c0:	str.w	r8, [r6, #8]
    15c4:	bl	7828 <FsBaseFile::close()>
	}
    15c8:	movs	r1, #92	; 0x5c
    15ca:	mov	r0, r6
    15cc:	bl	d148 <operator delete(void*, unsigned int)>
		f = file.f;
    15d0:	str	r4, [r5, #16]
		if (f) dec_refcount();
    15d2:	cmp	r4, #0
    15d4:	bne.w	1822 <storeData(int) [clone .part.0]+0x61a>
{ Serial.println();
    15d8:	ldr	r0, [pc, #436]	; (1790 <storeData(int) [clone .part.0]+0x588>)
    15da:	bl	d0f8 <Print::println()>
    15de:	movs	r1, #17
    15e0:	ldr	r0, [pc, #432]	; (1794 <storeData(int) [clone .part.0]+0x58c>)
    15e2:	bl	a8e8 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    15e6:	ldr	r0, [pc, #424]	; (1790 <storeData(int) [clone .part.0]+0x588>)
    15e8:	bl	d0f8 <Print::println()>
          if(!file) return ErrorMsg("Failing open file");
    15ec:	mov.w	r0, #4294967295
    15f0:	b.n	147c <storeData(int) [clone .part.0]+0x274>
{ Serial.println();
    15f2:	ldr	r0, [pc, #412]	; (1790 <storeData(int) [clone .part.0]+0x588>)
    15f4:	bl	d0f8 <Print::println()>
    15f8:	movs	r1, #10
    15fa:	ldr	r0, [pc, #412]	; (1798 <storeData(int) [clone .part.0]+0x590>)
    15fc:	bl	a8e8 <usb_serial_write>
    1600:	ldr	r0, [pc, #396]	; (1790 <storeData(int) [clone .part.0]+0x588>)
    1602:	bl	d0f8 <Print::println()>
          if(file.write((const void *)diskBuffer, nbuf) < (size_t) nbuf) return ErrorMsg("Error Data");
    1606:	mov.w	r0, #4294967295
    160a:	b.n	147c <storeData(int) [clone .part.0]+0x274>
    160c:	ldr	r0, [r3, #84]	; 0x54
           : m_xFile ? m_xFile->write(buf, count)
    160e:	cmp	r0, #0
    1610:	beq.w	1374 <storeData(int) [clone .part.0]+0x16c>
    1614:	mov.w	r2, #512	; 0x200
    1618:	ldr	r1, [pc, #384]	; (179c <storeData(int) [clone .part.0]+0x594>)
    161a:	bl	5208 <ExFatFile::write(void const*, unsigned int)>
    161e:	b.n	136e <storeData(int) [clone .part.0]+0x166>
    1620:	ldr	r0, [r3, #84]	; 0x54
    1622:	cmp	r0, #0
    1624:	beq.n	15f2 <storeData(int) [clone .part.0]+0x3ea>
    1626:	mov.w	r2, #2560	; 0xa00
    162a:	ldr	r1, [pc, #372]	; (17a0 <storeData(int) [clone .part.0]+0x598>)
    162c:	bl	5208 <ExFatFile::write(void const*, unsigned int)>
    1630:	b.n	13b6 <storeData(int) [clone .part.0]+0x1ae>
		if (--(f->refcount) == 0) {
    1632:	ldr	r7, [r4, #4]
		f = file.f;
    1634:	str	r4, [r5, #16]
		if (--(f->refcount) == 0) {
    1636:	subs	r7, #1
    1638:	str	r7, [r4, #4]
    163a:	cmp	r7, #0
    163c:	bne.n	16e2 <storeData(int) [clone .part.0]+0x4da>
			f->close();
    163e:	ldr	r3, [r4, #0]
    1640:	ldr	r2, [pc, #324]	; (1788 <storeData(int) [clone .part.0]+0x580>)
    1642:	ldr	r3, [r3, #44]	; 0x2c
    1644:	cmp	r3, r2
    1646:	bne.w	17d4 <storeData(int) [clone .part.0]+0x5cc>
		if (filename) {
    164a:	ldr	r0, [r4, #88]	; 0x58
    164c:	cbz	r0, 1654 <storeData(int) [clone .part.0]+0x44c>
			free(filename);
    164e:	bl	d2ec <free>
			filename = nullptr;
    1652:	str	r7, [r4, #88]	; 0x58
  bool isOpen() const { return m_fFile || m_xFile; }
    1654:	ldr	r3, [r4, #80]	; 0x50
    1656:	cmp	r3, #0
    1658:	beq.w	17c0 <storeData(int) [clone .part.0]+0x5b8>
			sdfatfile.close();
    165c:	add.w	r0, r4, #24
    1660:	bl	7828 <FsBaseFile::close()>
			delete f;
    1664:	ldr	r3, [r4, #0]
    1666:	ldr	r2, [pc, #292]	; (178c <storeData(int) [clone .part.0]+0x584>)
    1668:	ldr	r3, [r3, #4]
    166a:	cmp	r3, r2
    166c:	bne.n	16de <storeData(int) [clone .part.0]+0x4d6>
	virtual ~SDFile(void) {
    166e:	ldr	r3, [pc, #264]	; (1778 <storeData(int) [clone .part.0]+0x570>)
		if (filename) {
    1670:	ldr	r0, [r4, #88]	; 0x58
	virtual ~SDFile(void) {
    1672:	str	r3, [r4, #0]
		if (filename) {
    1674:	cbz	r0, 167e <storeData(int) [clone .part.0]+0x476>
			free(filename);
    1676:	bl	d2ec <free>
			filename = nullptr;
    167a:	movs	r3, #0
    167c:	str	r3, [r4, #88]	; 0x58
    167e:	ldr	r3, [r4, #80]	; 0x50
			sdfatfile.close();
    1680:	add.w	r6, r4, #24
    1684:	cmp	r3, #0
    1686:	beq.w	17f0 <storeData(int) [clone .part.0]+0x5e8>
    168a:	mov	r0, r6
    168c:	bl	7828 <FsBaseFile::close()>
  ~FsBaseFile() { close(); }
    1690:	mov	r0, r6
    1692:	str.w	r8, [r4, #8]
    1696:	bl	7828 <FsBaseFile::close()>
	}
    169a:	mov	r0, r4
    169c:	movs	r1, #92	; 0x5c
    169e:	bl	d148 <operator delete(void*, unsigned int)>
    16a2:	ldr	r0, [r5, #16]
		return (f) ? f->isOpen() : false;
    16a4:	cmp	r0, #0
    16a6:	beq.n	15d8 <storeData(int) [clone .part.0]+0x3d0>
    16a8:	ldr	r3, [r0, #0]
    16aa:	ldr	r2, [pc, #248]	; (17a4 <storeData(int) [clone .part.0]+0x59c>)
    16ac:	ldr	r3, [r3, #48]	; 0x30
    16ae:	cmp	r3, r2
    16b0:	bne.n	175c <storeData(int) [clone .part.0]+0x554>
  bool isOpen() const { return m_fFile || m_xFile; }
    16b2:	ldr	r3, [r0, #80]	; 0x50
    16b4:	cmp	r3, #0
    16b6:	beq.n	1730 <storeData(int) [clone .part.0]+0x528>
  switch(status)
    16b8:	movs	r0, #1
    16ba:	b.n	147c <storeData(int) [clone .part.0]+0x274>
    16bc:	ldr	r3, [r4, #84]	; 0x54
    16be:	cmp	r3, #0
    16c0:	bne.w	12b2 <storeData(int) [clone .part.0]+0xaa>
    16c4:	b.n	12b8 <storeData(int) [clone .part.0]+0xb0>
			f->close();
    16c6:	mov	r0, r7
    16c8:	blx	r3
    16ca:	b.n	1428 <storeData(int) [clone .part.0]+0x220>
    16cc:	ldr	r3, [r4, #84]	; 0x54
    16ce:	cmp	r3, #0
    16d0:	bne.w	124e <storeData(int) [clone .part.0]+0x46>
    16d4:	b.n	1256 <storeData(int) [clone .part.0]+0x4e>
		f = file.f;
    16d6:	str	r4, [r5, #16]
		if (f) dec_refcount();
    16d8:	b.n	1638 <storeData(int) [clone .part.0]+0x430>
    16da:	mov	r0, r4
    16dc:	b.n	147c <storeData(int) [clone .part.0]+0x274>
			delete f;
    16de:	mov	r0, r4
    16e0:	blx	r3
    16e2:	ldr	r0, [r5, #16]
    16e4:	b.n	16a4 <storeData(int) [clone .part.0]+0x49c>
    16e6:	ldr	r4, [sp, #76]	; 0x4c
    16e8:	cmp	r4, #0
    16ea:	bne.w	14f8 <storeData(int) [clone .part.0]+0x2f0>
    16ee:	ldr.w	r8, [pc, #184]	; 17a8 <storeData(int) [clone .part.0]+0x5a0>
  ~FsBaseFile() { close(); }
    16f2:	add	r0, sp, #16
		if (f) { dec_refcount(); /*Serial.println("File move assignment autoclose");*/ }
    16f4:	ldr	r5, [pc, #140]	; (1784 <storeData(int) [clone .part.0]+0x57c>)
    16f6:	str.w	r8, [sp]
    16fa:	bl	7828 <FsBaseFile::close()>
    16fe:	ldr	r6, [r5, #16]
    1700:	cmp	r6, #0
    1702:	beq.w	15d8 <storeData(int) [clone .part.0]+0x3d0>
		if (--(f->refcount) == 0) {
    1706:	ldr	r3, [r6, #4]
    1708:	subs	r3, #1
    170a:	str	r3, [r6, #4]
    170c:	cmp	r3, #0
    170e:	beq.w	1564 <storeData(int) [clone .part.0]+0x35c>
		f = nullptr;
    1712:	str	r4, [r5, #16]
		return (f) ? f->isOpen() : false;
    1714:	b.n	15d8 <storeData(int) [clone .part.0]+0x3d0>
			f->close();
    1716:	mov	r0, r4
    1718:	blx	r3
    171a:	b.n	1256 <storeData(int) [clone .part.0]+0x4e>
  bool isOpen() const { return m_fFile || m_xFile; }
    171c:	ldr	r3, [r7, #84]	; 0x54
    171e:	cmp	r3, #0
    1720:	bne.w	127e <storeData(int) [clone .part.0]+0x76>
    1724:	b.n	1286 <storeData(int) [clone .part.0]+0x7e>
    1726:	ldr	r3, [r4, #84]	; 0x54
    1728:	cmp	r3, #0
    172a:	bne.w	13f0 <storeData(int) [clone .part.0]+0x1e8>
    172e:	b.n	13f8 <storeData(int) [clone .part.0]+0x1f0>
    1730:	ldr	r3, [r0, #84]	; 0x54
    1732:	cmp	r3, #0
    1734:	bne.n	16b8 <storeData(int) [clone .part.0]+0x4b0>
    1736:	b.n	15d8 <storeData(int) [clone .part.0]+0x3d0>
			f->close();
    1738:	mov	r0, r7
    173a:	blx	r3
    173c:	b.n	1286 <storeData(int) [clone .part.0]+0x7e>
		return (f) ? f->write(buf, size) : 0;
    173e:	mov.w	r2, #512	; 0x200
    1742:	ldr	r1, [pc, #88]	; (179c <storeData(int) [clone .part.0]+0x594>)
    1744:	mov	r0, r3
    1746:	blx	r4
    1748:	b.n	136e <storeData(int) [clone .part.0]+0x166>
			f->close();
    174a:	mov	r0, r4
    174c:	blx	r3
    174e:	b.n	13f8 <storeData(int) [clone .part.0]+0x1f0>
		return (f) ? f->write(buf, size) : 0;
    1750:	mov.w	r2, #2560	; 0xa00
    1754:	ldr	r1, [pc, #72]	; (17a0 <storeData(int) [clone .part.0]+0x598>)
    1756:	mov	r0, r3
    1758:	blx	r4
    175a:	b.n	13b6 <storeData(int) [clone .part.0]+0x1ae>
		return (f) ? f->isOpen() : false;
    175c:	blx	r3
    175e:	cmp	r0, #0
    1760:	beq.w	15d8 <storeData(int) [clone .part.0]+0x3d0>
    1764:	b.n	16b8 <storeData(int) [clone .part.0]+0x4b0>
			delete f;
    1766:	mov	r0, r4
    1768:	blx	r3
    176a:	b.n	12ca <storeData(int) [clone .part.0]+0xc2>
    176c:	.word	0x20006924
    1770:	.word	0x200073e0
    1774:	.word	0x2000530c
    1778:	.word	0x20000ae8
    177c:	.word	0x20000b44
    1780:	.word	0x20000ab8
    1784:	.word	0x200073cc
    1788:	.word	0x00000239
    178c:	.word	0x00000959
    1790:	.word	0x20001458
    1794:	.word	0x20000534
    1798:	.word	0x20000558
    179c:	.word	0x20007464
    17a0:	.word	0x200069a4
    17a4:	.word	0x00000071
    17a8:	.word	0x2000099c
    17ac:	ldr	r3, [r7, #84]	; 0x54
    17ae:	cmp	r3, #0
    17b0:	bne.w	1420 <storeData(int) [clone .part.0]+0x218>
    17b4:	b.n	1428 <storeData(int) [clone .part.0]+0x220>
    17b6:	ldr	r3, [r6, #84]	; 0x54
    17b8:	cmp	r3, #0
    17ba:	bne.w	1584 <storeData(int) [clone .part.0]+0x37c>
    17be:	b.n	158c <storeData(int) [clone .part.0]+0x384>
    17c0:	ldr	r3, [r4, #84]	; 0x54
    17c2:	cmp	r3, #0
    17c4:	bne.w	165c <storeData(int) [clone .part.0]+0x454>
    17c8:	b.n	1664 <storeData(int) [clone .part.0]+0x45c>
    17ca:	ldr	r3, [r4, #84]	; 0x54
    17cc:	cmp	r3, #0
    17ce:	bne.w	1454 <storeData(int) [clone .part.0]+0x24c>
    17d2:	b.n	145a <storeData(int) [clone .part.0]+0x252>
			f->close();
    17d4:	mov	r0, r4
    17d6:	blx	r3
    17d8:	b.n	1664 <storeData(int) [clone .part.0]+0x45c>
    17da:	mov	r0, r6
    17dc:	blx	r3
    17de:	b.n	158c <storeData(int) [clone .part.0]+0x384>
			delete f;
    17e0:	mov	r0, r4
    17e2:	blx	r3
    17e4:	b.n	146c <storeData(int) [clone .part.0]+0x264>
    17e6:	ldr	r3, [r6, #84]	; 0x54
    17e8:	cmp	r3, #0
    17ea:	bne.w	15b8 <storeData(int) [clone .part.0]+0x3b0>
    17ee:	b.n	15be <storeData(int) [clone .part.0]+0x3b6>
    17f0:	ldr	r3, [r4, #84]	; 0x54
    17f2:	cmp	r3, #0
    17f4:	bne.w	168a <storeData(int) [clone .part.0]+0x482>
    17f8:	b.n	1690 <storeData(int) [clone .part.0]+0x488>
    17fa:	ldr.w	r1, [r4, #1160]	; 0x488
           : m_xVol ? m_xVol->mkdir(path, pFlag)
    17fe:	cmp	r1, #0
    1800:	beq.w	1328 <storeData(int) [clone .part.0]+0x120>
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char* path, bool pFlag = true) {
    ExFatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
    1804:	movs	r3, #1
    1806:	ldr	r2, [pc, #60]	; (1844 <storeData(int) [clone .part.0]+0x63c>)
    1808:	add.w	r1, r1, #1096	; 0x448
    180c:	mov	r0, r5
    180e:	str	r6, [sp, #48]	; 0x30
    1810:	bl	4ed8 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
    1814:	cmp	r0, #0
    1816:	beq.w	1328 <storeData(int) [clone .part.0]+0x120>
    181a:	b.n	14d6 <storeData(int) [clone .part.0]+0x2ce>
    181c:	mov	r0, r6
    181e:	blx	r3
    1820:	b.n	15d0 <storeData(int) [clone .part.0]+0x3c8>
		if (--(f->refcount) == 0) {
    1822:	ldr	r7, [r4, #4]
    1824:	subs	r7, #1
    1826:	b.n	1638 <storeData(int) [clone .part.0]+0x430>
{ Serial.println();
    1828:	ldr	r0, [pc, #28]	; (1848 <storeData(int) [clone .part.0]+0x640>)
    182a:	bl	d0f8 <Print::println()>
    182e:	movs	r1, #16
    1830:	ldr	r0, [pc, #24]	; (184c <storeData(int) [clone .part.0]+0x644>)
    1832:	bl	a8e8 <usb_serial_write>
    1836:	ldr	r0, [pc, #16]	; (1848 <storeData(int) [clone .part.0]+0x640>)
    1838:	bl	d0f8 <Print::println()>
          if(!newFileName(fileName))return ErrorMsg("Failing new file");
    183c:	mov.w	r0, #4294967295
    1840:	b.n	147c <storeData(int) [clone .part.0]+0x274>
    1842:	nop
    1844:	.word	0x20006924
    1848:	.word	0x20001458
    184c:	.word	0x20000520

00001850 <storeBegin()>:
{
    1850:	push	{r3, lr}
  if((!(SD.begin(BUILTIN_SDCARD)) && !(SD.begin( BUILTIN_SDCARD)))) 
    1852:	movs	r1, #254	; 0xfe
    1854:	ldr	r0, [pc, #56]	; (1890 <storeBegin()+0x40>)
    1856:	bl	301c <SDClass::begin(unsigned char)>
    185a:	cbnz	r0, 1866 <storeBegin()+0x16>
    185c:	movs	r1, #254	; 0xfe
    185e:	ldr	r0, [pc, #48]	; (1890 <storeBegin()+0x40>)
    1860:	bl	301c <SDClass::begin(unsigned char)>
    1864:	cbz	r0, 187c <storeBegin()+0x2c>
    1866:	movs	r1, #13
    1868:	ldr	r0, [pc, #40]	; (1894 <storeBegin()+0x44>)
    186a:	bl	a8e8 <usb_serial_write>
    186e:	ldr	r0, [pc, #40]	; (1898 <storeBegin()+0x48>)
    1870:	bl	d0f8 <Print::println()>
    haveSD=1;
    1874:	ldr	r3, [pc, #36]	; (189c <storeBegin()+0x4c>)
    1876:	movs	r2, #1
    1878:	strh	r2, [r3, #0]
}
    187a:	pop	{r3, pc}
    187c:	movs	r1, #28
    187e:	ldr	r0, [pc, #32]	; (18a0 <storeBegin()+0x50>)
    1880:	bl	a8e8 <usb_serial_write>
    1884:	ldr	r0, [pc, #16]	; (1898 <storeBegin()+0x48>)
    1886:	ldmia.w	sp!, {r3, lr}
    188a:	b.w	d0f8 <Print::println()>
    188e:	nop
    1890:	.word	0x20005308
    1894:	.word	0x200004b4
    1898:	.word	0x20001458
    189c:	.word	0x20007b62
    18a0:	.word	0x20000494

000018a4 <setup>:
AudioConnection          patchCord1(acq, 0, usb1, 0);
AudioConnection          patchCord2(acq, 1, usb1, 1);
AudioConnection          patchCord3(acq,  0, proc, 0);
AudioConnection          patchCord4(proc, 0, queue1, 0);

void setup() {
    18a4:	push	{r4, lr}
  // put your setup code here, to run once:
  AudioMemory(60);
    18a6:	movs	r1, #60	; 0x3c
    18a8:	ldr	r0, [pc, #48]	; (18dc <setup+0x38>)
    18aa:	bl	13720 <___ZN11AudioStream17initialize_memoryEP18audio_block_structj_veneer>
  void digitalShift(int16_t val){I2S_32::shift=val;}
    18ae:	ldr	r3, [pc, #48]	; (18e0 <setup+0x3c>)
    18b0:	movs	r2, #10
  acq.digitalShift(shift);

  setSyncProvider(getTime);
    18b2:	ldr	r0, [pc, #48]	; (18e4 <setup+0x40>)
#endif
public:
	AudioRecordQueue(void) : AudioStream(1, inputQueueArray),
		userblock(NULL), head(0), tail(0), enabled(0) { }
	void begin(void) {
		clear();
    18b4:	ldr	r4, [pc, #48]	; (18e8 <setup+0x44>)
    18b6:	strh	r2, [r3, #0]
    18b8:	bl	22b4 <setSyncProvider(long long (*)())>
    num = HW_OCOTP_MAC0 & 0xFFFFFF;
    18bc:	ldr	r3, [pc, #44]	; (18ec <setup+0x48>)
  SerNum=getTeensySerial();
    18be:	ldr	r2, [pc, #48]	; (18f0 <setup+0x4c>)
    18c0:	ldr.w	r3, [r3, #544]	; 0x220
    18c4:	bic.w	r3, r3, #4278190080	; 0xff000000
    18c8:	str	r3, [r2, #0]
  
  #if STARTMODE==-1
    while(!Serial);
  #endif

  storeBegin();
    18ca:	bl	1850 <storeBegin()>
    18ce:	mov	r0, r4
    18d0:	bl	1f6c <AudioRecordQueue::clear()>
		enabled = 1;
    18d4:	movs	r3, #1
    18d6:	strb.w	r3, [r4, #870]	; 0x366

  queue1.begin();
}
    18da:	pop	{r4, pc}
    18dc:	.word	0x20200000
    18e0:	.word	0x20001a46
    18e4:	.word	0x00000191
    18e8:	.word	0x2000772c
    18ec:	.word	0x401f4400
    18f0:	.word	0x200058c8

000018f4 <loop>:

void loop() {
    18f4:	push	{r4, r5, r6, r7, lr}
    18f6:	sub	sp, #12
        virtual int available() { return usb_serial_available(); }
    18f8:	bl	a814 <usb_serial_available>
  // put your main code here, to run repeatedly:

  static int16_t status=START_MODE;

  // basic menu to start and stop archiving
  if(Serial.available())
    18fc:	cmp	r0, #0
    18fe:	bne.n	1984 <loop+0x90>
    1900:	ldr	r6, [pc, #220]	; (19e0 <loop+0xec>)
    if(ch=='e') status=4;
    while(Serial.available()) Serial.read();
  }

  // check end of file
  status=checkEndOfFile(status);
    1902:	ldrsh.w	r4, [r6]
{ uint32_t tx=rtc_get();
    1906:	bl	bb4c <rtc_get>
  tx = tx % t_acq;
    190a:	ldr	r3, [pc, #216]	; (19e4 <loop+0xf0>)
  if((status>1) && (tx_>0) && (tx < tx_)) status=3;
    190c:	cmp	r4, #1
  tx = tx % t_acq;
    190e:	umull	r2, r3, r3, r0
  if((status>1) && (tx_>0) && (tx < tx_)) status=3;
    1912:	ldr	r2, [pc, #212]	; (19e8 <loop+0xf4>)
  tx = tx % t_acq;
    1914:	mov.w	r3, r3, lsr #5
    1918:	rsb	r3, r3, r3, lsl #4
    191c:	sub.w	r3, r0, r3, lsl #2
  if((status>1) && (tx_>0) && (tx < tx_)) status=3;
    1920:	ble.n	192a <loop+0x36>
    1922:	ldr	r1, [r2, #0]
    1924:	cmp	r3, r1
    1926:	it	cc
    1928:	movcc	r4, #3

  // if available transfer data to disk
  if(queue1.available()>=NBUF)
    192a:	ldr	r0, [pc, #192]	; (19ec <loop+0xf8>)
  tx_=tx;
    192c:	str	r3, [r2, #0]
  status=checkEndOfFile(status);
    192e:	strh	r4, [r6, #0]
  if(queue1.available()>=NBUF)
    1930:	bl	1f54 <AudioRecordQueue::available()>
    1934:	cmp	r0, #9
    1936:	ble.n	1970 <loop+0x7c>
    1938:	ldr	r4, [pc, #180]	; (19f0 <loop+0xfc>)
  { // fetch data from buffer
    for(int ii=0; ii<NBUF; ii++)
    { int16_t *buffer= queue1.readBuffer();
    193a:	ldr	r5, [pc, #176]	; (19ec <loop+0xf8>)
    193c:	add.w	r7, r4, #2560	; 0xa00
    1940:	mov	r0, r5
    1942:	bl	1fb4 <AudioRecordQueue::readBuffer()>
      memcpy(diskBuffer+ii*NSAMP, buffer, 2*NSAMP);
    1946:	mov.w	r2, #256	; 0x100
    { int16_t *buffer= queue1.readBuffer();
    194a:	mov	r1, r0
      memcpy(diskBuffer+ii*NSAMP, buffer, 2*NSAMP);
    194c:	mov	r0, r4
    for(int ii=0; ii<NBUF; ii++)
    194e:	add	r4, r2
      memcpy(diskBuffer+ii*NSAMP, buffer, 2*NSAMP);
    1950:	bl	a170 <memcpy>
      queue1.freeBuffer();
    1954:	mov	r0, r5
    1956:	bl	1ff0 <AudioRecordQueue::freeBuffer()>
    for(int ii=0; ii<NBUF; ii++)
    195a:	cmp	r4, r7
    195c:	bne.n	1940 <loop+0x4c>
  if(!haveSD) return status;
    195e:	ldr	r3, [pc, #148]	; (19f4 <loop+0x100>)
    }

    // write data to disk
    //-------------------
    status=storeData(status);
    1960:	ldrsh.w	r0, [r6]
    1964:	ldrsh.w	r3, [r3]
    1968:	cbz	r3, 196e <loop+0x7a>
    196a:	bl	1208 <storeData(int) [clone .part.0]>
    196e:	strh	r0, [r6, #0]
	return systick_millis_count;
    1970:	ldr	r2, [pc, #132]	; (19f8 <loop+0x104>)
  
  // print some statistics every second
  static uint32_t t0=0;
  static uint32_t ic=0;
  
  if(millis()-t0>1000)
    1972:	ldr	r1, [pc, #136]	; (19fc <loop+0x108>)
    1974:	ldr	r3, [r2, #0]
    1976:	ldr	r0, [r1, #0]
    1978:	subs	r3, r3, r0
    197a:	cmp.w	r3, #1000	; 0x3e8
    197e:	bhi.n	19a8 <loop+0xb4>
  { t0=millis();
    Serial.printf("\n%10d %2d %3d %d",ic++, second(), AudioMemoryUsageMax(), status);
    AudioMemoryUsageMaxReset();
  }
}
    1980:	add	sp, #12
    1982:	pop	{r4, r5, r6, r7, pc}
        virtual int read() { return usb_serial_getchar(); }
    1984:	bl	a89c <usb_serial_getchar>
    if(ch=='s') status=0;
    1988:	ldr	r6, [pc, #84]	; (19e0 <loop+0xec>)
    char ch=Serial.read();
    198a:	uxtb	r0, r0
    if(ch=='s') status=0;
    198c:	cmp	r0, #115	; 0x73
    198e:	beq.n	19da <loop+0xe6>
    if(ch=='e') status=4;
    1990:	cmp	r0, #101	; 0x65
    1992:	itt	eq
    1994:	moveq	r3, #4
    1996:	strheq	r3, [r6, #0]
    1998:	b.n	199e <loop+0xaa>
    199a:	bl	a89c <usb_serial_getchar>
        virtual int available() { return usb_serial_available(); }
    199e:	bl	a814 <usb_serial_available>
    while(Serial.available()) Serial.read();
    19a2:	cmp	r0, #0
    19a4:	bne.n	199a <loop+0xa6>
    19a6:	b.n	1902 <loop+0xe>
    Serial.printf("\n%10d %2d %3d %d",ic++, second(), AudioMemoryUsageMax(), status);
    19a8:	ldr	r3, [pc, #84]	; (1a00 <loop+0x10c>)
    19aa:	ldr	r2, [r2, #0]
    19ac:	ldr	r5, [r3, #0]
    19ae:	ldr	r4, [pc, #84]	; (1a04 <loop+0x110>)
  { t0=millis();
    19b0:	str	r2, [r1, #0]
    Serial.printf("\n%10d %2d %3d %d",ic++, second(), AudioMemoryUsageMax(), status);
    19b2:	adds	r2, r5, #1
    19b4:	str	r2, [r3, #0]
    19b6:	bl	2284 <second()>
    19ba:	ldrh	r1, [r4, #0]
    19bc:	mov	r3, r0
    19be:	ldrsh.w	r6, [r6]
    19c2:	mov	r2, r5
    19c4:	ldr	r0, [pc, #64]	; (1a08 <loop+0x114>)
    19c6:	strd	r1, r6, [sp]
    19ca:	ldr	r1, [pc, #64]	; (1a0c <loop+0x118>)
    19cc:	bl	d124 <Print::printf(char const*, ...)>
    AudioMemoryUsageMaxReset();
    19d0:	ldr	r3, [pc, #60]	; (1a10 <loop+0x11c>)
    19d2:	ldrh	r3, [r3, #0]
    19d4:	strh	r3, [r4, #0]
}
    19d6:	add	sp, #12
    19d8:	pop	{r4, r5, r6, r7, pc}
    if(ch=='s') status=0;
    19da:	movs	r3, #0
    19dc:	strh	r3, [r6, #0]
    if(ch=='e') status=4;
    19de:	b.n	199e <loop+0xaa>
    19e0:	.word	0x20001a48
    19e4:	.word	0x88888889
    19e8:	.word	0x20007b10
    19ec:	.word	0x2000772c
    19f0:	.word	0x200069a4
    19f4:	.word	0x20007b62
    19f8:	.word	0x20007b08
    19fc:	.word	0x200065f4
    1a00:	.word	0x200065f0
    1a04:	.word	0x20007b52
    1a08:	.word	0x20001458
    1a0c:	.word	0x2000122c
    1a10:	.word	0x20007b50

00001a14 <_GLOBAL__sub_I__Z7getTimev>:
}
    1a14:	push	{r4, r5, r6, lr}
DMAChannel I2S_32::dma(false);
    1a16:	ldr	r2, [pc, #364]	; (1b84 <_GLOBAL__sub_I__Z7getTimev+0x170>)
    1a18:	sub	sp, #8
    1a1a:	ldr	r1, [pc, #364]	; (1b88 <_GLOBAL__sub_I__Z7getTimev+0x174>)
	constexpr Print() : write_error(0) {}
    1a1c:	movs	r4, #0
    1a1e:	ldr	r0, [pc, #364]	; (1b8c <_GLOBAL__sub_I__Z7getTimev+0x178>)
    1a20:	bl	d2d0 <__aeabi_atexit>
    1a24:	ldr	r0, [pc, #360]	; (1b90 <_GLOBAL__sub_I__Z7getTimev+0x17c>)
	File(FileImpl *file) {
    1a26:	ldr	r3, [pc, #364]	; (1b94 <_GLOBAL__sub_I__Z7getTimev+0x180>)
	constexpr Stream() : _timeout(1000), read_error(0) {}
    1a28:	mov.w	r1, #1000	; 0x3e8
			for (int i=0; i < num_inputs; i++) {
				inputQueue[i] = NULL;
			}
			// add to a simple list, for update_all
			// TODO: replace with a proper data flow analysis in update_all
			if (first_update == NULL) {
    1a2c:	ldr	r5, [pc, #360]	; (1b98 <_GLOBAL__sub_I__Z7getTimev+0x184>)
File file=NULL; 
    1a2e:	ldr	r2, [pc, #340]	; (1b84 <_GLOBAL__sub_I__Z7getTimev+0x170>)
    1a30:	str	r1, [r0, #8]
    1a32:	str	r3, [r0, #0]
    1a34:	ldr	r1, [pc, #356]	; (1b9c <_GLOBAL__sub_I__Z7getTimev+0x188>)
    1a36:	strb	r4, [r0, #4]
    1a38:	strb	r4, [r0, #12]
		f = file;
    1a3a:	str	r4, [r0, #16]
    1a3c:	bl	d2d0 <__aeabi_atexit>
		num_inputs(ninput), inputQueue(iqueue) {
    1a40:	ldr	r6, [pc, #348]	; (1ba0 <_GLOBAL__sub_I__Z7getTimev+0x18c>)
    1a42:	ldr	r2, [pc, #352]	; (1ba4 <_GLOBAL__sub_I__Z7getTimev+0x190>)
			if (first_update == NULL) {
    1a44:	ldr	r3, [r5, #0]
		num_inputs(ninput), inputQueue(iqueue) {
    1a46:	str	r6, [r2, #0]
    1a48:	str	r4, [r2, #16]
			active = false;
    1a4a:	strh	r4, [r2, #8]
			destination_list = NULL;
    1a4c:	str	r4, [r2, #12]
			if (first_update == NULL) {
    1a4e:	cmp	r3, #0
    1a50:	beq.w	1b76 <_GLOBAL__sub_I__Z7getTimev+0x162>
				first_update = this;
			} else {
				AudioStream *p;
				for (p=first_update; p->next_update; p = p->next_update) ;
    1a54:	mov	r1, r3
    1a56:	ldr	r3, [r3, #20]
    1a58:	cmp	r3, #0
    1a5a:	bne.n	1a54 <_GLOBAL__sub_I__Z7getTimev+0x40>
				p->next_update = this;
    1a5c:	str	r2, [r1, #20]
			}
			next_update = NULL;
    1a5e:	movs	r4, #0
	I2S_32(void) : AudioStream(0, NULL) {begin();}
    1a60:	ldr	r3, [pc, #324]	; (1ba8 <_GLOBAL__sub_I__Z7getTimev+0x194>)
    1a62:	ldr	r0, [pc, #320]	; (1ba4 <_GLOBAL__sub_I__Z7getTimev+0x190>)
    1a64:	str	r3, [r2, #0]
    1a66:	str	r4, [r2, #20]
			cpu_cycles = 0;
    1a68:	str	r4, [r2, #4]
			cpu_cycles_max = 0;
			numConnections = 0;
    1a6a:	strb	r4, [r2, #10]
    1a6c:	bl	c84 <I2S_32::begin()>
		num_inputs(ninput), inputQueue(iqueue) {
    1a70:	ldr	r2, [pc, #312]	; (1bac <_GLOBAL__sub_I__Z7getTimev+0x198>)
			if (first_update == NULL) {
    1a72:	ldr	r3, [r5, #0]
		num_inputs(ninput), inputQueue(iqueue) {
    1a74:	mov	r1, r2
			destination_list = NULL;
    1a76:	str	r4, [r2, #12]
		num_inputs(ninput), inputQueue(iqueue) {
    1a78:	str.w	r6, [r1], #24
    1a7c:	str	r1, [r2, #16]
			active = false;
    1a7e:	mov.w	r1, #512	; 0x200
				inputQueue[i] = NULL;
    1a82:	strd	r4, r4, [r2, #24]
			active = false;
    1a86:	strh	r1, [r2, #8]
			if (first_update == NULL) {
    1a88:	cmp	r3, #0
    1a8a:	beq.n	1b80 <_GLOBAL__sub_I__Z7getTimev+0x16c>
				for (p=first_update; p->next_update; p = p->next_update) ;
    1a8c:	mov	r1, r3
    1a8e:	ldr	r3, [r3, #20]
    1a90:	cmp	r3, #0
    1a92:	bne.n	1a8c <_GLOBAL__sub_I__Z7getTimev+0x78>
				p->next_update = this;
    1a94:	str	r2, [r1, #20]
			next_update = NULL;
    1a96:	movs	r4, #0
};

class AudioOutputUSB : public AudioStream
{
public:
	AudioOutputUSB(void) : AudioStream(2, inputQueueArray) { begin(); }
    1a98:	ldr	r3, [pc, #276]	; (1bb0 <_GLOBAL__sub_I__Z7getTimev+0x19c>)
    1a9a:	ldr	r0, [pc, #272]	; (1bac <_GLOBAL__sub_I__Z7getTimev+0x198>)
    1a9c:	str	r4, [r2, #20]
			cpu_cycles = 0;
    1a9e:	str	r4, [r2, #4]
			numConnections = 0;
    1aa0:	strb	r4, [r2, #10]
    1aa2:	str	r3, [r2, #0]
    1aa4:	bl	cda0 <AudioOutputUSB::begin()>
		num_inputs(ninput), inputQueue(iqueue) {
    1aa8:	ldr	r2, [pc, #264]	; (1bb4 <_GLOBAL__sub_I__Z7getTimev+0x1a0>)
			active = false;
    1aaa:	mov.w	r1, #256	; 0x100
		num_inputs(ninput), inputQueue(iqueue) {
    1aae:	mov	r3, r2
			destination_list = NULL;
    1ab0:	str	r4, [r2, #12]
				inputQueue[i] = NULL;
    1ab2:	str	r4, [r2, #24]
			if (first_update == NULL) {
    1ab4:	ldr	r4, [r5, #0]
		num_inputs(ninput), inputQueue(iqueue) {
    1ab6:	str.w	r6, [r3], #24
			active = false;
    1aba:	strh	r1, [r2, #8]
		num_inputs(ninput), inputQueue(iqueue) {
    1abc:	str	r3, [r2, #16]
			if (first_update == NULL) {
    1abe:	cmp	r4, #0
    1ac0:	beq.n	1b7a <_GLOBAL__sub_I__Z7getTimev+0x166>
    1ac2:	mov	r3, r4
				for (p=first_update; p->next_update; p = p->next_update) ;
    1ac4:	mov	r1, r3
    1ac6:	ldr	r3, [r3, #20]
    1ac8:	cmp	r3, #0
    1aca:	bne.n	1ac4 <_GLOBAL__sub_I__Z7getTimev+0xb0>
				p->next_update = this;
    1acc:	str	r2, [r1, #20]
			next_update = NULL;
    1ace:	movs	r3, #0
		num_inputs(ninput), inputQueue(iqueue) {
    1ad0:	ldr	r1, [pc, #228]	; (1bb8 <_GLOBAL__sub_I__Z7getTimev+0x1a4>)
		userblock(NULL), head(0), tail(0), enabled(0) { }
    1ad2:	ldr	r0, [pc, #232]	; (1bbc <_GLOBAL__sub_I__Z7getTimev+0x1a8>)
    1ad4:	strb.w	r3, [r2, #868]	; 0x364
    1ad8:	str	r0, [r2, #0]
    1ada:	movs	r0, #1
    1adc:	strb.w	r3, [r2, #869]	; 0x365
			next_update = NULL;
    1ae0:	str	r3, [r2, #20]
			cpu_cycles = 0;
    1ae2:	str	r3, [r2, #4]
			numConnections = 0;
    1ae4:	strb	r3, [r2, #10]
    1ae6:	str.w	r3, [r2, #864]	; 0x360
    1aea:	strb.w	r3, [r2, #870]	; 0x366
		num_inputs(ninput), inputQueue(iqueue) {
    1aee:	add.w	r2, r1, #24
			active = false;
    1af2:	strb	r3, [r1, #8]
		num_inputs(ninput), inputQueue(iqueue) {
    1af4:	strb	r0, [r1, #9]
			destination_list = NULL;
    1af6:	str	r3, [r1, #12]
				inputQueue[i] = NULL;
    1af8:	str	r3, [r1, #24]
		num_inputs(ninput), inputQueue(iqueue) {
    1afa:	str	r2, [r1, #16]
				for (p=first_update; p->next_update; p = p->next_update) ;
    1afc:	mov	r2, r4
    1afe:	ldr	r4, [r4, #20]
    1b00:	cmp	r4, #0
    1b02:	bne.n	1afc <_GLOBAL__sub_I__Z7getTimev+0xe8>
  AudioCompress() : AudioStream(1, inputQueueArray) { }
    1b04:	ldr	r0, [pc, #184]	; (1bc0 <_GLOBAL__sub_I__Z7getTimev+0x1ac>)
				p->next_update = this;
    1b06:	str	r1, [r2, #20]
AudioConnection          patchCord1(acq, 0, usb1, 0);
    1b08:	mov	r2, r4
    1b0a:	str	r4, [sp, #0]
    1b0c:	ldr	r3, [pc, #156]	; (1bac <_GLOBAL__sub_I__Z7getTimev+0x198>)
			next_update = NULL;
    1b0e:	str	r4, [r1, #20]
			cpu_cycles = 0;
    1b10:	str	r4, [r1, #4]
			numConnections = 0;
    1b12:	strb	r4, [r1, #10]
    1b14:	str	r0, [r1, #0]
    1b16:	ldr	r1, [pc, #140]	; (1ba4 <_GLOBAL__sub_I__Z7getTimev+0x190>)
    1b18:	ldr	r0, [pc, #168]	; (1bc4 <_GLOBAL__sub_I__Z7getTimev+0x1b0>)
    1b1a:	bl	c8b8 <AudioConnection::AudioConnection(AudioStream&, unsigned char, AudioStream&, unsigned char)>
    1b1e:	ldr	r2, [pc, #100]	; (1b84 <_GLOBAL__sub_I__Z7getTimev+0x170>)
    1b20:	ldr	r1, [pc, #164]	; (1bc8 <_GLOBAL__sub_I__Z7getTimev+0x1b4>)
    1b22:	ldr	r0, [pc, #160]	; (1bc4 <_GLOBAL__sub_I__Z7getTimev+0x1b0>)
    1b24:	bl	d2d0 <__aeabi_atexit>
AudioConnection          patchCord2(acq, 1, usb1, 1);
    1b28:	movs	r2, #1
    1b2a:	ldr	r3, [pc, #128]	; (1bac <_GLOBAL__sub_I__Z7getTimev+0x198>)
    1b2c:	str	r2, [sp, #0]
    1b2e:	ldr	r1, [pc, #116]	; (1ba4 <_GLOBAL__sub_I__Z7getTimev+0x190>)
    1b30:	ldr	r0, [pc, #152]	; (1bcc <_GLOBAL__sub_I__Z7getTimev+0x1b8>)
    1b32:	bl	c8b8 <AudioConnection::AudioConnection(AudioStream&, unsigned char, AudioStream&, unsigned char)>
    1b36:	ldr	r2, [pc, #76]	; (1b84 <_GLOBAL__sub_I__Z7getTimev+0x170>)
    1b38:	ldr	r1, [pc, #140]	; (1bc8 <_GLOBAL__sub_I__Z7getTimev+0x1b4>)
    1b3a:	ldr	r0, [pc, #144]	; (1bcc <_GLOBAL__sub_I__Z7getTimev+0x1b8>)
    1b3c:	bl	d2d0 <__aeabi_atexit>
AudioConnection          patchCord3(acq,  0, proc, 0);
    1b40:	ldr	r3, [pc, #116]	; (1bb8 <_GLOBAL__sub_I__Z7getTimev+0x1a4>)
    1b42:	mov	r2, r4
    1b44:	ldr	r1, [pc, #92]	; (1ba4 <_GLOBAL__sub_I__Z7getTimev+0x190>)
    1b46:	str	r4, [sp, #0]
    1b48:	ldr	r0, [pc, #132]	; (1bd0 <_GLOBAL__sub_I__Z7getTimev+0x1bc>)
    1b4a:	bl	c8b8 <AudioConnection::AudioConnection(AudioStream&, unsigned char, AudioStream&, unsigned char)>
    1b4e:	ldr	r2, [pc, #52]	; (1b84 <_GLOBAL__sub_I__Z7getTimev+0x170>)
    1b50:	ldr	r1, [pc, #116]	; (1bc8 <_GLOBAL__sub_I__Z7getTimev+0x1b4>)
    1b52:	ldr	r0, [pc, #124]	; (1bd0 <_GLOBAL__sub_I__Z7getTimev+0x1bc>)
    1b54:	bl	d2d0 <__aeabi_atexit>
AudioConnection          patchCord4(proc, 0, queue1, 0);
    1b58:	mov	r2, r4
    1b5a:	ldr	r1, [pc, #92]	; (1bb8 <_GLOBAL__sub_I__Z7getTimev+0x1a4>)
    1b5c:	ldr	r3, [pc, #84]	; (1bb4 <_GLOBAL__sub_I__Z7getTimev+0x1a0>)
    1b5e:	str	r4, [sp, #0]
    1b60:	ldr	r0, [pc, #112]	; (1bd4 <_GLOBAL__sub_I__Z7getTimev+0x1c0>)
    1b62:	bl	c8b8 <AudioConnection::AudioConnection(AudioStream&, unsigned char, AudioStream&, unsigned char)>
    1b66:	ldr	r2, [pc, #28]	; (1b84 <_GLOBAL__sub_I__Z7getTimev+0x170>)
    1b68:	ldr	r1, [pc, #92]	; (1bc8 <_GLOBAL__sub_I__Z7getTimev+0x1b4>)
    1b6a:	ldr	r0, [pc, #104]	; (1bd4 <_GLOBAL__sub_I__Z7getTimev+0x1c0>)
}
    1b6c:	add	sp, #8
    1b6e:	ldmia.w	sp!, {r4, r5, r6, lr}
AudioConnection          patchCord4(proc, 0, queue1, 0);
    1b72:	b.w	d2d0 <__aeabi_atexit>
				first_update = this;
    1b76:	str	r2, [r5, #0]
    1b78:	b.n	1a5e <_GLOBAL__sub_I__Z7getTimev+0x4a>
    1b7a:	mov	r4, r2
    1b7c:	str	r2, [r5, #0]
    1b7e:	b.n	1ace <_GLOBAL__sub_I__Z7getTimev+0xba>
    1b80:	str	r2, [r5, #0]
    1b82:	b.n	1a96 <_GLOBAL__sub_I__Z7getTimev+0x82>
    1b84:	.word	0x20001488
    1b88:	.word	0x00000261
    1b8c:	.word	0x200065d8
    1b90:	.word	0x200073cc
    1b94:	.word	0x20000a8c
    1b98:	.word	0x2000642c
    1b9c:	.word	0x00000a31
    1ba0:	.word	0x200009c0
    1ba4:	.word	0x2000690c
    1ba8:	.word	0x20000adc
    1bac:	.word	0x20007b14
    1bb0:	.word	0x200009d8
    1bb4:	.word	0x2000772c
    1bb8:	.word	0x200076d0
    1bbc:	.word	0x200009e4
    1bc0:	.word	0x200009cc
    1bc4:	.word	0x20007680
    1bc8:	.word	0x0000c975
    1bcc:	.word	0x20007694
    1bd0:	.word	0x200076a8
    1bd4:	.word	0x200076bc

00001bd8 <_GLOBAL__sub_I__ZN17AudioOutputI2SOct13block_ch1_1stE>:
uint16_t  AudioOutputI2SOct::ch6_offset = 0;
uint16_t  AudioOutputI2SOct::ch7_offset = 0;
uint16_t  AudioOutputI2SOct::ch8_offset = 0;
bool AudioOutputI2SOct::update_responsibility = false;
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES*4];
DMAChannel AudioOutputI2SOct::dma(false);
    1bd8:	ldr	r2, [pc, #8]	; (1be4 <_GLOBAL__sub_I__ZN17AudioOutputI2SOct13block_ch1_1stE+0xc>)
    1bda:	ldr	r1, [pc, #12]	; (1be8 <_GLOBAL__sub_I__ZN17AudioOutputI2SOct13block_ch1_1stE+0x10>)
    1bdc:	ldr	r0, [pc, #12]	; (1bec <_GLOBAL__sub_I__ZN17AudioOutputI2SOct13block_ch1_1stE+0x14>)
    1bde:	b.w	d2d0 <__aeabi_atexit>
    1be2:	nop
    1be4:	.word	0x20001488
    1be8:	.word	0x00000261
    1bec:	.word	0x20006598

00001bf0 <__tcf_0>:

extern uint8_t analog_write_res;
extern const struct _pwm_pin_info_struct pwm_pin_info[];
volatile audio_block_t * AudioOutputPWM::block = NULL;
DMAMEM __attribute__((aligned(32))) static uint16_t pwm_tx_buffer[2][AUDIO_BLOCK_SAMPLES * 2];
DMAChannel AudioOutputPWM::dma[2];
    1bf0:	push	{r4, lr}
		release();
    1bf2:	ldr	r4, [pc, #20]	; (1c08 <__tcf_0+0x18>)
    1bf4:	add.w	r0, r4, #8
    1bf8:	bl	c410 <DMAChannel::release()>
    1bfc:	mov	r0, r4
    1bfe:	ldmia.w	sp!, {r4, lr}
    1c02:	b.w	c410 <DMAChannel::release()>
    1c06:	nop
    1c08:	.word	0x200064f8

00001c0c <_GLOBAL__sub_I__ZN14AudioOutputPWM21update_responsibilityE>:
	old_block = (audio_block_t*)block ;  // block is defined as volatile
	block = new_block ;
	__enable_irq();
	if (old_block)
		release (old_block);
}
    1c0c:	push	{r4, lr}
		begin();
    1c0e:	ldr	r4, [pc, #32]	; (1c30 <_GLOBAL__sub_I__ZN14AudioOutputPWM21update_responsibilityE+0x24>)
    1c10:	movs	r1, #0
    1c12:	mov	r0, r4
    1c14:	bl	c35c <DMAChannel::begin(bool)>
    1c18:	add.w	r0, r4, #8
    1c1c:	movs	r1, #0
    1c1e:	bl	c35c <DMAChannel::begin(bool)>
DMAChannel AudioOutputPWM::dma[2];
    1c22:	ldr	r2, [pc, #16]	; (1c34 <_GLOBAL__sub_I__ZN14AudioOutputPWM21update_responsibilityE+0x28>)
    1c24:	ldr	r1, [pc, #16]	; (1c38 <_GLOBAL__sub_I__ZN14AudioOutputPWM21update_responsibilityE+0x2c>)
    1c26:	movs	r0, #0
}
    1c28:	ldmia.w	sp!, {r4, lr}
DMAChannel AudioOutputPWM::dma[2];
    1c2c:	b.w	d2d0 <__aeabi_atexit>
    1c30:	.word	0x200064f8
    1c34:	.word	0x20001488
    1c38:	.word	0x00001bf1

00001c3c <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE>:
DMAChannel AudioInputI2S::dma(false);
    1c3c:	ldr	r2, [pc, #8]	; (1c48 <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE+0xc>)
    1c3e:	ldr	r1, [pc, #12]	; (1c4c <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE+0x10>)
    1c40:	ldr	r0, [pc, #12]	; (1c50 <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE+0x14>)
    1c42:	b.w	d2d0 <__aeabi_atexit>
    1c46:	nop
    1c48:	.word	0x20001488
    1c4c:	.word	0x00000261
    1c50:	.word	0x200064a8

00001c54 <_GLOBAL__sub_I__ZN19AudioOutputPT8211_214block_left_1stE>:
DMAChannel AudioOutputPT8211_2::dma(false);
    1c54:	ldr	r2, [pc, #8]	; (1c60 <_GLOBAL__sub_I__ZN19AudioOutputPT8211_214block_left_1stE+0xc>)
    1c56:	ldr	r1, [pc, #12]	; (1c64 <_GLOBAL__sub_I__ZN19AudioOutputPT8211_214block_left_1stE+0x10>)
    1c58:	ldr	r0, [pc, #12]	; (1c68 <_GLOBAL__sub_I__ZN19AudioOutputPT8211_214block_left_1stE+0x14>)
    1c5a:	b.w	d2d0 <__aeabi_atexit>
    1c5e:	nop
    1c60:	.word	0x20001488
    1c64:	.word	0x00000261
    1c68:	.word	0x200065c0

00001c6c <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE>:
#if defined(AUDIO_PT8211_OVERSAMPLING)
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES*4];
#else
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES];
#endif
DMAChannel AudioOutputPT8211::dma(false);
    1c6c:	ldr	r2, [pc, #8]	; (1c78 <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE+0xc>)
    1c6e:	ldr	r1, [pc, #12]	; (1c7c <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE+0x10>)
    1c70:	ldr	r0, [pc, #12]	; (1c80 <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE+0x14>)
    1c72:	b.w	d2d0 <__aeabi_atexit>
    1c76:	nop
    1c78:	.word	0x20001488
    1c7c:	.word	0x00000261
    1c80:	.word	0x200065a0

00001c84 <_GLOBAL__sub_I__ZN16AudioInputSPDIF310block_leftE>:
static uint32_t spdif_rx_buffer[AUDIO_BLOCK_SAMPLES * 4];
audio_block_t * AudioInputSPDIF3::block_left = NULL;
audio_block_t * AudioInputSPDIF3::block_right = NULL;
uint16_t AudioInputSPDIF3::block_offset = 0;
bool AudioInputSPDIF3::update_responsibility = false;
DMAChannel AudioInputSPDIF3::dma(false);
    1c84:	ldr	r2, [pc, #8]	; (1c90 <_GLOBAL__sub_I__ZN16AudioInputSPDIF310block_leftE+0xc>)
    1c86:	ldr	r1, [pc, #12]	; (1c94 <_GLOBAL__sub_I__ZN16AudioInputSPDIF310block_leftE+0x10>)
    1c88:	ldr	r0, [pc, #12]	; (1c98 <_GLOBAL__sub_I__ZN16AudioInputSPDIF310block_leftE+0x14>)
    1c8a:	b.w	d2d0 <__aeabi_atexit>
    1c8e:	nop
    1c90:	.word	0x20001488
    1c94:	.word	0x00000261
    1c98:	.word	0x20006578

00001c9c <_GLOBAL__sub_I__ZN14AudioInputTDM214block_incomingE>:
DMAChannel AudioInputTDM2::dma(false);
    1c9c:	ldr	r2, [pc, #8]	; (1ca8 <_GLOBAL__sub_I__ZN14AudioInputTDM214block_incomingE+0xc>)
    1c9e:	ldr	r1, [pc, #12]	; (1cac <_GLOBAL__sub_I__ZN14AudioInputTDM214block_incomingE+0x10>)
    1ca0:	ldr	r0, [pc, #12]	; (1cb0 <_GLOBAL__sub_I__ZN14AudioInputTDM214block_incomingE+0x14>)
    1ca2:	b.w	d2d0 <__aeabi_atexit>
    1ca6:	nop
    1ca8:	.word	0x20001488
    1cac:	.word	0x00000261
    1cb0:	.word	0x200064e0

00001cb4 <_GLOBAL__sub_I__ZN16AudioInputAnalog3dmaE>:
#include <Arduino.h>
#include "input_adc.h"

extern "C" void xbar_connect(unsigned int input, unsigned int output);

DMAChannel AudioInputAnalog::dma(false);
    1cb4:	ldr	r2, [pc, #8]	; (1cc0 <_GLOBAL__sub_I__ZN16AudioInputAnalog3dmaE+0xc>)
    1cb6:	ldr	r1, [pc, #12]	; (1cc4 <_GLOBAL__sub_I__ZN16AudioInputAnalog3dmaE+0x10>)
    1cb8:	ldr	r0, [pc, #12]	; (1cc8 <_GLOBAL__sub_I__ZN16AudioInputAnalog3dmaE+0x14>)
    1cba:	b.w	d2d0 <__aeabi_atexit>
    1cbe:	nop
    1cc0:	.word	0x20001488
    1cc4:	.word	0x00000261
    1cc8:	.word	0x20006560

00001ccc <_GLOBAL__sub_I__ZN14AudioInputPDM210block_leftE>:

DMAMEM __attribute__((aligned(32))) static uint32_t pdm_buffer[AUDIO_BLOCK_SAMPLES*4];
static uint32_t leftover[14];
audio_block_t * AudioInputPDM2::block_left = NULL;
bool AudioInputPDM2::update_responsibility = false;
DMAChannel AudioInputPDM2::dma(false);
    1ccc:	ldr	r2, [pc, #8]	; (1cd8 <_GLOBAL__sub_I__ZN14AudioInputPDM210block_leftE+0xc>)
    1cce:	ldr	r1, [pc, #12]	; (1cdc <_GLOBAL__sub_I__ZN14AudioInputPDM210block_leftE+0x10>)
    1cd0:	ldr	r0, [pc, #12]	; (1ce0 <_GLOBAL__sub_I__ZN14AudioInputPDM210block_leftE+0x14>)
    1cd2:	b.w	d2d0 <__aeabi_atexit>
    1cd6:	nop
    1cd8:	.word	0x20001488
    1cdc:	.word	0x00000261
    1ce0:	.word	0x200064d8

00001ce4 <_GLOBAL__sub_I__ZN14AudioInputI2S210block_leftE>:
DMAMEM __attribute__((aligned(32))) static uint32_t i2s2_rx_buffer[AUDIO_BLOCK_SAMPLES];
audio_block_t * AudioInputI2S2::block_left = NULL;
audio_block_t * AudioInputI2S2::block_right = NULL;
uint16_t AudioInputI2S2::block_offset = 0;
bool AudioInputI2S2::update_responsibility = false;
DMAChannel AudioInputI2S2::dma(false);
    1ce4:	ldr	r2, [pc, #8]	; (1cf0 <_GLOBAL__sub_I__ZN14AudioInputI2S210block_leftE+0xc>)
    1ce6:	ldr	r1, [pc, #12]	; (1cf4 <_GLOBAL__sub_I__ZN14AudioInputI2S210block_leftE+0x10>)
    1ce8:	ldr	r0, [pc, #12]	; (1cf8 <_GLOBAL__sub_I__ZN14AudioInputI2S210block_leftE+0x14>)
    1cea:	b.w	d2d0 <__aeabi_atexit>
    1cee:	nop
    1cf0:	.word	0x20001488
    1cf4:	.word	0x00000261
    1cf8:	.word	0x200064d0

00001cfc <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E>:
audio_block_t * AudioInputI2SQuad::block_ch2 = NULL;
audio_block_t * AudioInputI2SQuad::block_ch3 = NULL;
audio_block_t * AudioInputI2SQuad::block_ch4 = NULL;
uint16_t AudioInputI2SQuad::block_offset = 0;
bool AudioInputI2SQuad::update_responsibility = false;
DMAChannel AudioInputI2SQuad::dma(false);
    1cfc:	ldr	r2, [pc, #8]	; (1d08 <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E+0xc>)
    1cfe:	ldr	r1, [pc, #12]	; (1d0c <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E+0x10>)
    1d00:	ldr	r0, [pc, #12]	; (1d10 <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E+0x14>)
    1d02:	b.w	d2d0 <__aeabi_atexit>
    1d06:	nop
    1d08:	.word	0x20001488
    1d0c:	.word	0x00000261
    1d10:	.word	0x20006588

00001d14 <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE>:
DMAChannel AudioOutputI2SQuad::dma(false);
    1d14:	ldr	r2, [pc, #8]	; (1d20 <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE+0xc>)
    1d16:	ldr	r1, [pc, #12]	; (1d24 <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE+0x10>)
    1d18:	ldr	r0, [pc, #12]	; (1d28 <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE+0x14>)
    1d1a:	b.w	d2d0 <__aeabi_atexit>
    1d1e:	nop
    1d20:	.word	0x20001488
    1d24:	.word	0x00000261
    1d28:	.word	0x200065b8

00001d2c <SPIClass::beginTransaction(SPISettings)>:
	void notUsingInterrupt(IRQ_NUMBER_t interruptName);

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
    1d2c:	push	{r4, r5}
    1d2e:	sub	sp, #8
    1d30:	mov	r4, r1
    1d32:	add	r3, sp, #8
    1d34:	stmdb	r3, {r1, r2}
		if (interruptMasksUsed) {
    1d38:	ldrb	r3, [r0, #19]
    1d3a:	cmp	r3, #0
    1d3c:	beq.n	1da0 <SPIClass::beginTransaction(SPISettings)+0x74>
			__disable_irq();
    1d3e:	cpsid	i
			if (interruptMasksUsed & 0x01) {
    1d40:	ldrb	r3, [r0, #19]
    1d42:	lsls	r2, r3, #31
    1d44:	bpl.n	1d58 <SPIClass::beginTransaction(SPISettings)+0x2c>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    1d46:	mov.w	r1, #3758153728	; 0xe000e000
    1d4a:	ldr	r5, [r0, #20]
    1d4c:	ldr.w	r2, [r1, #384]	; 0x180
    1d50:	ands	r2, r5
    1d52:	str	r2, [r0, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    1d54:	str.w	r2, [r1, #384]	; 0x180
			}
			if (interruptMasksUsed & 0x02) {
    1d58:	lsls	r5, r3, #30
    1d5a:	bpl.n	1d6e <SPIClass::beginTransaction(SPISettings)+0x42>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    1d5c:	mov.w	r1, #3758153728	; 0xe000e000
    1d60:	ldr	r5, [r0, #24]
    1d62:	ldr.w	r2, [r1, #388]	; 0x184
    1d66:	ands	r2, r5
    1d68:	str	r2, [r0, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    1d6a:	str.w	r2, [r1, #388]	; 0x184
			}
			if (interruptMasksUsed & 0x04) {
    1d6e:	lsls	r1, r3, #29
    1d70:	bpl.n	1d84 <SPIClass::beginTransaction(SPISettings)+0x58>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    1d72:	mov.w	r1, #3758153728	; 0xe000e000
    1d76:	ldr	r5, [r0, #28]
    1d78:	ldr.w	r2, [r1, #392]	; 0x188
    1d7c:	ands	r2, r5
    1d7e:	str	r2, [r0, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    1d80:	str.w	r2, [r1, #392]	; 0x188
			}
			if (interruptMasksUsed & 0x08) {
    1d84:	lsls	r2, r3, #28
    1d86:	bpl.n	1d9a <SPIClass::beginTransaction(SPISettings)+0x6e>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    1d88:	mov.w	r1, #3758153728	; 0xe000e000
    1d8c:	ldr	r5, [r0, #32]
    1d8e:	ldr.w	r2, [r1, #396]	; 0x18c
    1d92:	ands	r2, r5
    1d94:	str	r2, [r0, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    1d96:	str.w	r2, [r1, #396]	; 0x18c
			}
			if (interruptMasksUsed & 0x10) {
    1d9a:	lsls	r3, r3, #27
    1d9c:	bmi.n	1dfe <SPIClass::beginTransaction(SPISettings)+0xd2>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
				NVIC_ICER4 = interruptSave[4];
			}
			__enable_irq();
    1d9e:	cpsie	i
		}
		inTransactionFlag = 1;
		#endif

		//printf("trans\n");
		if (settings.clock() != _clock) {
    1da0:	ldr	r3, [r0, #8]
    1da2:	cmp	r4, r3
    1da4:	beq.n	1e12 <SPIClass::beginTransaction(SPISettings)+0xe6>
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
    1da6:	ldr	r3, [pc, #136]	; (1e30 <SPIClass::beginTransaction(SPISettings)+0x104>)
		    _clock = settings.clock();
    1da8:	str	r4, [r0, #8]
			uint32_t cbcmr = CCM_CBCMR;
    1daa:	ldr	r3, [r3, #24]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    1dac:	ldr	r2, [pc, #132]	; (1e34 <SPIClass::beginTransaction(SPISettings)+0x108>)
    1dae:	ubfx	r1, r3, #4, #2
    1db2:	ubfx	r3, r3, #26, #3
    1db6:	ldr.w	r1, [r2, r1, lsl #2]
    1dba:	adds	r3, #1
    1dbc:	udiv	r2, r1, r3
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    1dc0:	cbz	r4, 1df6 <SPIClass::beginTransaction(SPISettings)+0xca>

			if (d && clkhz/d > _clock) d++;
    1dc2:	cmp	r4, r2
    1dc4:	bhi.n	1e16 <SPIClass::beginTransaction(SPISettings)+0xea>
			d = _clock ? clkhz/_clock : clkhz;
    1dc6:	udiv	r3, r2, r4
			if (d && clkhz/d > _clock) d++;
    1dca:	udiv	r2, r2, r3
    1dce:	cmp	r4, r2
    1dd0:	bcc.n	1e2c <SPIClass::beginTransaction(SPISettings)+0x100>
			if (d > 257) d= 257;  // max div
    1dd2:	cmp.w	r3, #258	; 0x102
    1dd6:	bcc.n	1e1a <SPIClass::beginTransaction(SPISettings)+0xee>
    1dd8:	ldr	r4, [pc, #92]	; (1e38 <SPIClass::beginTransaction(SPISettings)+0x10c>)
				div = d-2;
			} else {
				div =0;
			}
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    1dda:	str	r4, [r0, #12]
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    1ddc:	ldr	r3, [r0, #0]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    1dde:	movs	r2, #3
		port().CR = 0;
    1de0:	movs	r0, #0
		port().TCR = settings.tcr;
    1de2:	ldr	r1, [sp, #4]
		port().CR = 0;
    1de4:	str	r0, [r3, #16]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    1de6:	str	r2, [r3, #36]	; 0x24
		port().CR = LPSPI_CR_MEN;
    1de8:	movs	r2, #1
		port().CCR = _ccr;
    1dea:	str	r4, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
    1dec:	str	r1, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    1dee:	str	r2, [r3, #16]
	}
    1df0:	add	sp, #8
    1df2:	pop	{r4, r5}
    1df4:	bx	lr
			if (d && clkhz/d > _clock) d++;
    1df6:	cmp	r1, r3
    1df8:	bcc.n	1dda <SPIClass::beginTransaction(SPISettings)+0xae>
    1dfa:	adds	r3, r2, #1
    1dfc:	b.n	1dd2 <SPIClass::beginTransaction(SPISettings)+0xa6>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    1dfe:	mov.w	r2, #3758153728	; 0xe000e000
    1e02:	ldr	r1, [r0, #36]	; 0x24
    1e04:	ldr.w	r3, [r2, #400]	; 0x190
    1e08:	ands	r3, r1
    1e0a:	str	r3, [r0, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    1e0c:	str.w	r3, [r2, #400]	; 0x190
    1e10:	b.n	1d9e <SPIClass::beginTransaction(SPISettings)+0x72>
		port().CCR = _ccr;
    1e12:	ldr	r4, [r0, #12]
    1e14:	b.n	1ddc <SPIClass::beginTransaction(SPISettings)+0xb0>
    1e16:	movs	r4, #0
    1e18:	b.n	1dda <SPIClass::beginTransaction(SPISettings)+0xae>
			if (d > 2) {
    1e1a:	cmp	r3, #2
    1e1c:	bls.n	1e16 <SPIClass::beginTransaction(SPISettings)+0xea>
				div = d-2;
    1e1e:	subs	r3, #2
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    1e20:	lsrs	r2, r3, #1
    1e22:	lsls	r4, r2, #8
    1e24:	orr.w	r4, r4, r2, lsl #16
    1e28:	orrs	r4, r3
    1e2a:	b.n	1dda <SPIClass::beginTransaction(SPISettings)+0xae>
			d = _clock ? clkhz/_clock : clkhz;
    1e2c:	mov	r2, r3
    1e2e:	b.n	1dfa <SPIClass::beginTransaction(SPISettings)+0xce>
    1e30:	.word	0x400fc000
    1e34:	.word	0x20000c28
    1e38:	.word	0x007f7fff

00001e3c <_GLOBAL__sub_I__ZN15AudioOutputTDM211block_inputE>:
audio_block_t * AudioOutputTDM2::block_input[16] = {
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr,
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr
};
bool AudioOutputTDM2::update_responsibility = false;
DMAChannel AudioOutputTDM2::dma(false);
    1e3c:	ldr	r2, [pc, #8]	; (1e48 <_GLOBAL__sub_I__ZN15AudioOutputTDM211block_inputE+0xc>)
    1e3e:	ldr	r1, [pc, #12]	; (1e4c <_GLOBAL__sub_I__ZN15AudioOutputTDM211block_inputE+0x10>)
    1e40:	ldr	r0, [pc, #12]	; (1e50 <_GLOBAL__sub_I__ZN15AudioOutputTDM211block_inputE+0x14>)
    1e42:	b.w	d2d0 <__aeabi_atexit>
    1e46:	nop
    1e48:	.word	0x20001488
    1e4c:	.word	0x00000261
    1e50:	.word	0x20006558

00001e54 <_GLOBAL__sub_I__ZN15AudioOutputI2S214block_left_1stE>:
audio_block_t * AudioOutputI2S2::block_left_2nd = NULL;
audio_block_t * AudioOutputI2S2::block_right_2nd = NULL;
uint16_t  AudioOutputI2S2::block_left_offset = 0;
uint16_t  AudioOutputI2S2::block_right_offset = 0;
bool AudioOutputI2S2::update_responsibility = false;
DMAChannel AudioOutputI2S2::dma(false);
    1e54:	ldr	r2, [pc, #8]	; (1e60 <_GLOBAL__sub_I__ZN15AudioOutputI2S214block_left_1stE+0xc>)
    1e56:	ldr	r1, [pc, #12]	; (1e64 <_GLOBAL__sub_I__ZN15AudioOutputI2S214block_left_1stE+0x10>)
    1e58:	ldr	r0, [pc, #12]	; (1e68 <_GLOBAL__sub_I__ZN15AudioOutputI2S214block_left_1stE+0x14>)
    1e5a:	b.w	d2d0 <__aeabi_atexit>
    1e5e:	nop
    1e60:	.word	0x20001488
    1e64:	.word	0x00000261
    1e68:	.word	0x20006550

00001e6c <_GLOBAL__sub_I__ZN17AudioOutputI2SHex13block_ch1_1stE>:
uint16_t  AudioOutputI2SHex::ch4_offset = 0;
uint16_t  AudioOutputI2SHex::ch5_offset = 0;
uint16_t  AudioOutputI2SHex::ch6_offset = 0;
bool AudioOutputI2SHex::update_responsibility = false;
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES*3];
DMAChannel AudioOutputI2SHex::dma(false);
    1e6c:	ldr	r2, [pc, #8]	; (1e78 <_GLOBAL__sub_I__ZN17AudioOutputI2SHex13block_ch1_1stE+0xc>)
    1e6e:	ldr	r1, [pc, #12]	; (1e7c <_GLOBAL__sub_I__ZN17AudioOutputI2SHex13block_ch1_1stE+0x10>)
    1e70:	ldr	r0, [pc, #12]	; (1e80 <_GLOBAL__sub_I__ZN17AudioOutputI2SHex13block_ch1_1stE+0x14>)
    1e72:	b.w	d2d0 <__aeabi_atexit>
    1e76:	nop
    1e78:	.word	0x20001488
    1e7c:	.word	0x00000261
    1e80:	.word	0x20006590

00001e84 <_GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E>:
audio_block_t * AudioInputI2SOct::block_ch6 = NULL;
audio_block_t * AudioInputI2SOct::block_ch7 = NULL;
audio_block_t * AudioInputI2SOct::block_ch8 = NULL;
uint16_t AudioInputI2SOct::block_offset = 0;
bool AudioInputI2SOct::update_responsibility = false;
DMAChannel AudioInputI2SOct::dma(false);
    1e84:	ldr	r2, [pc, #8]	; (1e90 <_GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E+0xc>)
    1e86:	ldr	r1, [pc, #12]	; (1e94 <_GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E+0x10>)
    1e88:	ldr	r0, [pc, #12]	; (1e98 <_GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E+0x14>)
    1e8a:	b.w	d2d0 <__aeabi_atexit>
    1e8e:	nop
    1e90:	.word	0x20001488
    1e94:	.word	0x00000261
    1e98:	.word	0x20006570

00001e9c <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE>:
audio_block_t * AudioOutputTDM::block_input[16] = {
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr,
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr
};
bool AudioOutputTDM::update_responsibility = false;
DMAChannel AudioOutputTDM::dma(false);
    1e9c:	ldr	r2, [pc, #8]	; (1ea8 <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE+0xc>)
    1e9e:	ldr	r1, [pc, #12]	; (1eac <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE+0x10>)
    1ea0:	ldr	r0, [pc, #12]	; (1eb0 <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE+0x14>)
    1ea2:	b.w	d2d0 <__aeabi_atexit>
    1ea6:	nop
    1ea8:	.word	0x20001488
    1eac:	.word	0x00000261
    1eb0:	.word	0x20006508

00001eb4 <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE>:
DMAChannel AudioInputTDM::dma(false);
    1eb4:	ldr	r2, [pc, #8]	; (1ec0 <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE+0xc>)
    1eb6:	ldr	r1, [pc, #12]	; (1ec4 <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE+0x10>)
    1eb8:	ldr	r0, [pc, #12]	; (1ec8 <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE+0x14>)
    1eba:	b.w	d2d0 <__aeabi_atexit>
    1ebe:	nop
    1ec0:	.word	0x20001488
    1ec4:	.word	0x00000261
    1ec8:	.word	0x200064b8

00001ecc <_GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E>:
audio_block_t * AudioInputI2SHex::block_ch4 = NULL;
audio_block_t * AudioInputI2SHex::block_ch5 = NULL;
audio_block_t * AudioInputI2SHex::block_ch6 = NULL;
uint16_t AudioInputI2SHex::block_offset = 0;
bool AudioInputI2SHex::update_responsibility = false;
DMAChannel AudioInputI2SHex::dma(false);
    1ecc:	ldr	r2, [pc, #8]	; (1ed8 <_GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E+0xc>)
    1ece:	ldr	r1, [pc, #12]	; (1edc <_GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E+0x10>)
    1ed0:	ldr	r0, [pc, #12]	; (1ee0 <_GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E+0x14>)
    1ed2:	b.w	d2d0 <__aeabi_atexit>
    1ed6:	nop
    1ed8:	.word	0x20001488
    1edc:	.word	0x00000261
    1ee0:	.word	0x20006568

00001ee4 <_GLOBAL__sub_I__ZN17AudioOutputSPDIF314block_left_1stE>:
audio_block_t * AudioOutputSPDIF3::block_left_1st = nullptr;
audio_block_t * AudioOutputSPDIF3::block_right_1st = nullptr;
audio_block_t * AudioOutputSPDIF3::block_left_2nd = nullptr;
audio_block_t * AudioOutputSPDIF3::block_right_2nd = nullptr;
bool AudioOutputSPDIF3::update_responsibility = false;
DMAChannel AudioOutputSPDIF3::dma(false);
    1ee4:	ldr	r2, [pc, #8]	; (1ef0 <_GLOBAL__sub_I__ZN17AudioOutputSPDIF314block_left_1stE+0xc>)
    1ee6:	ldr	r1, [pc, #12]	; (1ef4 <_GLOBAL__sub_I__ZN17AudioOutputSPDIF314block_left_1stE+0x10>)
    1ee8:	ldr	r0, [pc, #12]	; (1ef8 <_GLOBAL__sub_I__ZN17AudioOutputSPDIF314block_left_1stE+0x14>)
    1eea:	b.w	d2d0 <__aeabi_atexit>
    1eee:	nop
    1ef0:	.word	0x20001488
    1ef4:	.word	0x00000261
    1ef8:	.word	0x200065b0

00001efc <_GLOBAL__sub_I__ZN14AudioOutputMQS14block_left_1stE>:
audio_block_t * AudioOutputMQS::block_left_2nd = NULL;
audio_block_t * AudioOutputMQS::block_right_2nd = NULL;
uint16_t  AudioOutputMQS::block_left_offset = 0;
uint16_t  AudioOutputMQS::block_right_offset = 0;
bool AudioOutputMQS::update_responsibility = false;
DMAChannel AudioOutputMQS::dma(false);
    1efc:	ldr	r2, [pc, #8]	; (1f08 <_GLOBAL__sub_I__ZN14AudioOutputMQS14block_left_1stE+0xc>)
    1efe:	ldr	r1, [pc, #12]	; (1f0c <_GLOBAL__sub_I__ZN14AudioOutputMQS14block_left_1stE+0x10>)
    1f00:	ldr	r0, [pc, #12]	; (1f10 <_GLOBAL__sub_I__ZN14AudioOutputMQS14block_left_1stE+0x14>)
    1f02:	b.w	d2d0 <__aeabi_atexit>
    1f06:	nop
    1f08:	.word	0x20001488
    1f0c:	.word	0x00000261
    1f10:	.word	0x200064f0

00001f14 <AudioRecordQueue::update()>:
	release(userblock);
	userblock = NULL;
}

void AudioRecordQueue::update(void)
{
    1f14:	push	{r4, lr}
	audio_block_t *block;
	uint32_t h;

	block = receiveReadOnly();
    1f16:	movs	r1, #0
{
    1f18:	mov	r4, r0
	block = receiveReadOnly();
    1f1a:	bl	c788 <AudioStream::receiveReadOnly(unsigned int)>
	if (!block) return;
    1f1e:	cbz	r0, 1f48 <AudioRecordQueue::update()+0x34>
	if (!enabled) {
    1f20:	ldrb.w	r3, [r4, #870]	; 0x366
    1f24:	cbz	r3, 1f4a <AudioRecordQueue::update()+0x36>
		release(block);
		return;
	}
	h = head + 1;
    1f26:	ldrb.w	r3, [r4, #868]	; 0x364
	if (h >= max_buffers) h = 0;
	if (h == tail) {
    1f2a:	ldrb.w	r1, [r4, #869]	; 0x365
	h = head + 1;
    1f2e:	adds	r3, #1
	if (h >= max_buffers) h = 0;
    1f30:	cmp	r3, #209	; 0xd1
    1f32:	it	ge
    1f34:	movge	r3, #0
	if (h == tail) {
    1f36:	cmp	r1, r3
    1f38:	beq.n	1f4a <AudioRecordQueue::update()+0x36>
		release(block);
	} else {
		queue[h] = block;
    1f3a:	adds	r1, r3, #6
		head = h;
    1f3c:	uxtb	r3, r3
		queue[h] = block;
    1f3e:	add.w	r1, r4, r1, lsl #2
    1f42:	str	r0, [r1, #4]
		head = h;
    1f44:	strb.w	r3, [r4, #868]	; 0x364
	}
}
    1f48:	pop	{r4, pc}
    1f4a:	ldmia.w	sp!, {r4, lr}
		release(block);
    1f4e:	b.w	c6f0 <AudioStream::release(audio_block_struct*)>
    1f52:	nop

00001f54 <AudioRecordQueue::available()>:
	h = head;
    1f54:	ldrb.w	r1, [r0, #868]	; 0x364
	t = tail;
    1f58:	ldrb.w	r2, [r0, #869]	; 0x365
	h = head;
    1f5c:	uxtb	r3, r1
	if (h >= t) return h - t;
    1f5e:	cmp	r1, r2
	t = tail;
    1f60:	uxtb	r0, r2
	return max_buffers + h - t;
    1f62:	it	cc
    1f64:	addcc	r3, #209	; 0xd1
    1f66:	subs	r0, r3, r0
}
    1f68:	bx	lr
    1f6a:	nop

00001f6c <AudioRecordQueue::clear()>:
{
    1f6c:	push	{r3, r4, r5, lr}
    1f6e:	mov	r5, r0
	if (userblock) {
    1f70:	ldr.w	r0, [r0, #864]	; 0x360
    1f74:	cbz	r0, 1f80 <AudioRecordQueue::clear()+0x14>
		release(userblock);
    1f76:	bl	c6f0 <AudioStream::release(audio_block_struct*)>
		userblock = NULL;
    1f7a:	movs	r3, #0
    1f7c:	str.w	r3, [r5, #864]	; 0x360
	t = tail;
    1f80:	ldrb.w	r2, [r5, #869]	; 0x365
	while (t != head) {
    1f84:	ldrb.w	r3, [r5, #868]	; 0x364
	t = tail;
    1f88:	uxtb	r4, r2
	while (t != head) {
    1f8a:	cmp	r2, r3
    1f8c:	uxtb	r1, r3
    1f8e:	beq.n	1fae <AudioRecordQueue::clear()+0x42>
		if (++t >= max_buffers) t = 0;
    1f90:	adds	r4, #1
    1f92:	cmp	r4, #209	; 0xd1
    1f94:	it	cs
    1f96:	movcs	r4, #0
		release(queue[t]);
    1f98:	adds	r3, r4, #6
    1f9a:	add.w	r3, r5, r3, lsl #2
    1f9e:	ldr	r0, [r3, #4]
    1fa0:	bl	c6f0 <AudioStream::release(audio_block_struct*)>
	while (t != head) {
    1fa4:	ldrb.w	r3, [r5, #868]	; 0x364
    1fa8:	cmp	r3, r4
    1faa:	bne.n	1f90 <AudioRecordQueue::clear()+0x24>
	tail = t;
    1fac:	uxtb	r1, r4
    1fae:	strb.w	r1, [r5, #869]	; 0x365
}
    1fb2:	pop	{r3, r4, r5, pc}

00001fb4 <AudioRecordQueue::readBuffer()>:
	if (userblock) return NULL;
    1fb4:	ldr.w	r2, [r0, #864]	; 0x360
    1fb8:	cbnz	r2, 1fe8 <AudioRecordQueue::readBuffer()+0x34>
	t = tail;
    1fba:	ldrb.w	r1, [r0, #869]	; 0x365
	if (t == head) return NULL;
    1fbe:	ldrb.w	ip, [r0, #868]	; 0x364
	t = tail;
    1fc2:	uxtb	r3, r1
	if (t == head) return NULL;
    1fc4:	cmp	r1, ip
    1fc6:	beq.n	1fe4 <AudioRecordQueue::readBuffer()+0x30>
	if (++t >= max_buffers) t = 0;
    1fc8:	adds	r3, #1
    1fca:	cmp	r3, #208	; 0xd0
    1fcc:	ite	hi
    1fce:	movhi	r3, r2
	tail = t;
    1fd0:	uxtbls	r2, r3
	userblock = queue[t];
    1fd2:	adds	r3, #6
    1fd4:	add.w	r3, r0, r3, lsl #2
    1fd8:	ldr	r3, [r3, #4]
	tail = t;
    1fda:	strb.w	r2, [r0, #869]	; 0x365
	return userblock->data;
    1fde:	adds	r2, r3, #4
	userblock = queue[t];
    1fe0:	str.w	r3, [r0, #864]	; 0x360
}
    1fe4:	mov	r0, r2
    1fe6:	bx	lr
	if (userblock) return NULL;
    1fe8:	movs	r2, #0
}
    1fea:	mov	r0, r2
    1fec:	bx	lr
    1fee:	nop

00001ff0 <AudioRecordQueue::freeBuffer()>:
{
    1ff0:	push	{r4, lr}
    1ff2:	mov	r4, r0
	if (userblock == NULL) return;
    1ff4:	ldr.w	r0, [r0, #864]	; 0x360
    1ff8:	cbz	r0, 2004 <AudioRecordQueue::freeBuffer()+0x14>
	release(userblock);
    1ffa:	bl	c6f0 <AudioStream::release(audio_block_struct*)>
	userblock = NULL;
    1ffe:	movs	r3, #0
    2000:	str.w	r3, [r4, #864]	; 0x360
}
    2004:	pop	{r4, pc}
    2006:	nop

00002008 <_GLOBAL__sub_I__ZN21AsyncAudioInputSPDIF310microsLastE>:
static float bufferL[bufferLength];

volatile int32_t AsyncAudioInputSPDIF3::buffer_offset = 0;	// read by resample/ written in spdif input isr -> copied at the beginning of 'resmaple' protected by __disable_irq() in resample
int32_t AsyncAudioInputSPDIF3::resample_offset = 0; // read/written by resample/ read in spdif input isr -> no protection needed?

DMAChannel AsyncAudioInputSPDIF3::dma(false);
    2008:	ldr	r2, [pc, #8]	; (2014 <_GLOBAL__sub_I__ZN21AsyncAudioInputSPDIF310microsLastE+0xc>)
    200a:	ldr	r1, [pc, #12]	; (2018 <_GLOBAL__sub_I__ZN21AsyncAudioInputSPDIF310microsLastE+0x10>)
    200c:	ldr	r0, [pc, #12]	; (201c <_GLOBAL__sub_I__ZN21AsyncAudioInputSPDIF310microsLastE+0x14>)
    200e:	b.w	d2d0 <__aeabi_atexit>
    2012:	nop
    2014:	.word	0x20001488
    2018:	.word	0x00000261
    201c:	.word	0x200065c8

00002020 <_GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE>:
#if defined(__IMXRT1062__) || defined(KINETISK)
DMAMEM __attribute__((aligned(32))) static uint32_t pdm_buffer[AUDIO_BLOCK_SAMPLES*4];
static uint32_t leftover[14];
audio_block_t * AudioInputPDM::block_left = NULL;
bool AudioInputPDM::update_responsibility = false;
DMAChannel AudioInputPDM::dma(false);
    2020:	ldr	r2, [pc, #8]	; (202c <_GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE+0xc>)
    2022:	ldr	r1, [pc, #12]	; (2030 <_GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE+0x10>)
    2024:	ldr	r0, [pc, #12]	; (2034 <_GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE+0x14>)
    2026:	b.w	d2d0 <__aeabi_atexit>
    202a:	nop
    202c:	.word	0x20001488
    2030:	.word	0x00000261
    2034:	.word	0x200064b0

00002038 <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE>:
audio_block_t * AudioOutputI2S::block_left_2nd = NULL;
audio_block_t * AudioOutputI2S::block_right_2nd = NULL;
uint16_t  AudioOutputI2S::block_left_offset = 0;
uint16_t  AudioOutputI2S::block_right_offset = 0;
bool AudioOutputI2S::update_responsibility = false;
DMAChannel AudioOutputI2S::dma(false);
    2038:	ldr	r2, [pc, #8]	; (2044 <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE+0xc>)
    203a:	ldr	r1, [pc, #12]	; (2048 <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE+0x10>)
    203c:	ldr	r0, [pc, #12]	; (204c <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE+0x14>)
    203e:	b.w	d2d0 <__aeabi_atexit>
    2042:	nop
    2044:	.word	0x20001488
    2048:	.word	0x00000261
    204c:	.word	0x200064e8

00002050 <_GLOBAL__sub_I__ZN17AudioOutputSPDIF214block_left_1stE>:
audio_block_t * AudioOutputSPDIF2::block_left_2nd = NULL;
audio_block_t * AudioOutputSPDIF2::block_right_2nd = NULL;
uint16_t  AudioOutputSPDIF2::block_left_offset = 0;
uint16_t  AudioOutputSPDIF2::block_right_offset = 0;
bool AudioOutputSPDIF2::update_responsibility = false;
DMAChannel AudioOutputSPDIF2::dma(false);
    2050:	ldr	r2, [pc, #8]	; (205c <_GLOBAL__sub_I__ZN17AudioOutputSPDIF214block_left_1stE+0xc>)
    2052:	ldr	r1, [pc, #12]	; (2060 <_GLOBAL__sub_I__ZN17AudioOutputSPDIF214block_left_1stE+0x10>)
    2054:	ldr	r0, [pc, #12]	; (2064 <_GLOBAL__sub_I__ZN17AudioOutputSPDIF214block_left_1stE+0x14>)
    2056:	b.w	d2d0 <__aeabi_atexit>
    205a:	nop
    205c:	.word	0x20001488
    2060:	.word	0x00000261
    2064:	.word	0x200065a8

00002068 <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE>:
audio_block_t * AudioOutputSPDIF::block_left_2nd = NULL;
audio_block_t * AudioOutputSPDIF::block_right_2nd = NULL;
uint16_t  AudioOutputSPDIF::block_left_offset = 0;
uint16_t  AudioOutputSPDIF::block_right_offset = 0;
bool AudioOutputSPDIF::update_responsibility = false;
DMAChannel AudioOutputSPDIF::dma(false);
    2068:	ldr	r2, [pc, #8]	; (2074 <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE+0xc>)
    206a:	ldr	r1, [pc, #12]	; (2078 <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE+0x10>)
    206c:	ldr	r0, [pc, #12]	; (207c <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE+0x14>)
    206e:	b.w	d2d0 <__aeabi_atexit>
    2072:	nop
    2074:	.word	0x20001488
    2078:	.word	0x00000261
    207c:	.word	0x20006580

00002080 <breakTime(long long, tmElements_t&)>:
  tm.Second = time % 60;
    2080:	ldr	r1, [pc, #332]	; (21d0 <breakTime(long long, tmElements_t&)+0x150>)
void breakTime(time_t timeInput, tmElements_t &tm){
    2082:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  tm.Second = time % 60;
    2086:	umull	r4, r3, r1, r0
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    208a:	movw	sl, #365	; 0x16d
    208e:	ldr	r7, [pc, #324]	; (21d4 <breakTime(long long, tmElements_t&)+0x154>)
  tm.Second = time % 60;
    2090:	lsrs	r3, r3, #5
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    2092:	ldr.w	r8, [pc, #336]	; 21e4 <breakTime(long long, tmElements_t&)+0x164>
    2096:	ldr.w	r9, [pc, #336]	; 21e8 <breakTime(long long, tmElements_t&)+0x168>
  tm.Minute = time % 60;
    209a:	umull	r4, r1, r1, r3
  tm.Second = time % 60;
    209e:	rsb	r4, r3, r3, lsl #4
  tm.Minute = time % 60;
    20a2:	lsrs	r1, r1, #5
  tm.Second = time % 60;
    20a4:	sub.w	r0, r0, r4, lsl #2
  tm.Hour = time % 24;
    20a8:	ldr	r4, [pc, #300]	; (21d8 <breakTime(long long, tmElements_t&)+0x158>)
  tm.Minute = time % 60;
    20aa:	rsb	r5, r1, r1, lsl #4
  tm.Hour = time % 24;
    20ae:	umull	r4, lr, r4, r1
  tm.Minute = time % 60;
    20b2:	sub.w	r3, r3, r5, lsl #2
  tm.Second = time % 60;
    20b6:	strb	r0, [r2, #0]
  tm.Hour = time % 24;
    20b8:	mov.w	lr, lr, lsr #4
  tm.Minute = time % 60;
    20bc:	strb	r3, [r2, #1]
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    20be:	add.w	r4, lr, #4
  tm.Hour = time % 24;
    20c2:	add.w	r0, lr, lr, lsl #1
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    20c6:	ldr	r3, [pc, #276]	; (21dc <breakTime(long long, tmElements_t&)+0x15c>)
  tm.Hour = time % 24;
    20c8:	sub.w	r1, r1, r0, lsl #3
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    20cc:	umull	r0, r3, r3, r4
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    20d0:	movs	r0, #0
  tm.Hour = time % 24;
    20d2:	strb	r1, [r2, #2]
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    20d4:	subs	r1, r4, r3
    20d6:	add.w	r3, r3, r1, lsr #1
  days = 0;
    20da:	mov	r1, r0
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    20dc:	lsrs	r3, r3, #2
    20de:	rsb	r3, r3, r3, lsl #3
    20e2:	subs	r4, r4, r3
    20e4:	adds	r4, #1
    20e6:	strb	r4, [r2, #3]
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    20e8:	uxtb	r4, r0
    20ea:	movw	ip, #365	; 0x16d
    20ee:	addw	r3, r4, #1970	; 0x7b2
    20f2:	ands.w	r5, r3, #3
    20f6:	mul.w	r6, r7, r3
    20fa:	bne.n	210e <breakTime(long long, tmElements_t&)+0x8e>
    20fc:	cmp.w	r8, r6, ror #2
    2100:	mov.w	ip, #366	; 0x16e
    2104:	bcc.n	210e <breakTime(long long, tmElements_t&)+0x8e>
    2106:	cmp.w	r9, r6, ror #4
    210a:	it	cc
    210c:	movcc	ip, sl
    210e:	add	r1, ip
    2110:	adds	r0, #1
    2112:	cmp	lr, r1
    2114:	bcs.n	20e8 <breakTime(long long, tmElements_t&)+0x68>
  days -= LEAP_YEAR(year) ? 366 : 365;
    2116:	ldr	r6, [pc, #200]	; (21e0 <breakTime(long long, tmElements_t&)+0x160>)
  tm.Year = year; // year is offset from 1970 
    2118:	strb	r4, [r2, #6]
  days -= LEAP_YEAR(year) ? 366 : 365;
    211a:	umull	r0, r6, r6, r3
    211e:	cbz	r5, 2186 <breakTime(long long, tmElements_t&)+0x106>
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    2120:	lsrs	r7, r6, #5
    2122:	movs	r4, #100	; 0x64
    2124:	mov.w	r0, #400	; 0x190
    2128:	lsrs	r6, r6, #7
    212a:	mls	r7, r4, r7, r3
    212e:	mls	r6, r0, r6, r3
  days -= LEAP_YEAR(year) ? 366 : 365;
    2132:	movw	r0, #365	; 0x16d
  time  -= days; // now it is days in this year, starting at 0
    2136:	sub.w	lr, lr, r1
    213a:	movs	r3, #0
    213c:	movs	r1, #1
    213e:	add	r0, lr
      monthLength = monthDays[month];
    2140:	ldr.w	lr, [pc, #168]	; 21ec <breakTime(long long, tmElements_t&)+0x16c>
    2144:	b.n	215c <breakTime(long long, tmElements_t&)+0xdc>
    if (time >= monthLength) {
    2146:	ldrb.w	r4, [r3, lr]
    214a:	cmp	r4, r0
    214c:	bhi.n	21b4 <breakTime(long long, tmElements_t&)+0x134>
  for (month=0; month<12; month++) {
    214e:	cmp	r1, #12
      time -= monthLength;
    2150:	sub.w	r0, r0, r4
  for (month=0; month<12; month++) {
    2154:	beq.n	2176 <breakTime(long long, tmElements_t&)+0xf6>
    2156:	adds	r1, #1
    2158:	adds	r3, #1
    215a:	uxtb	r1, r1
    if (month==1) { // february
    215c:	cmp	r3, #1
    215e:	uxtb.w	ip, r3
    2162:	bne.n	2146 <breakTime(long long, tmElements_t&)+0xc6>
      if (LEAP_YEAR(year)) {
    2164:	cbnz	r5, 216c <breakTime(long long, tmElements_t&)+0xec>
    2166:	cbz	r7, 21a0 <breakTime(long long, tmElements_t&)+0x120>
    2168:	movs	r4, #29
    216a:	b.n	216e <breakTime(long long, tmElements_t&)+0xee>
    216c:	movs	r4, #28
    if (time >= monthLength) {
    216e:	cmp	r0, r4
    2170:	bcc.n	21c8 <breakTime(long long, tmElements_t&)+0x148>
      time -= monthLength;
    2172:	subs	r0, r0, r4
  for (month=0; month<12; month++) {
    2174:	b.n	2156 <breakTime(long long, tmElements_t&)+0xd6>
    2176:	mov.w	ip, #13
  tm.Day = time + 1;     // day of month
    217a:	adds	r0, #1
  tm.Month = month + 1;  // jan is month 1  
    217c:	strb.w	ip, [r2, #5]
  tm.Day = time + 1;     // day of month
    2180:	strb	r0, [r2, #4]
}
    2182:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  days -= LEAP_YEAR(year) ? 366 : 365;
    2186:	movs	r0, #100	; 0x64
    2188:	lsrs	r7, r6, #5
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    218a:	lsrs	r6, r6, #7
  days -= LEAP_YEAR(year) ? 366 : 365;
    218c:	mls	r7, r0, r7, r3
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    2190:	mov.w	r0, #400	; 0x190
    2194:	mls	r6, r0, r6, r3
  days -= LEAP_YEAR(year) ? 366 : 365;
    2198:	cbz	r7, 21aa <breakTime(long long, tmElements_t&)+0x12a>
    219a:	mov.w	r0, #366	; 0x16e
    219e:	b.n	2136 <breakTime(long long, tmElements_t&)+0xb6>
      if (LEAP_YEAR(year)) {
    21a0:	cmp	r6, #0
    21a2:	ite	ne
    21a4:	movne	r4, #28
    21a6:	moveq	r4, #29
    21a8:	b.n	216e <breakTime(long long, tmElements_t&)+0xee>
  days -= LEAP_YEAR(year) ? 366 : 365;
    21aa:	cmp	r6, #0
    21ac:	bne.n	2132 <breakTime(long long, tmElements_t&)+0xb2>
    21ae:	mov.w	r0, #366	; 0x16e
    21b2:	b.n	2136 <breakTime(long long, tmElements_t&)+0xb6>
  for (month=0; month<12; month++) {
    21b4:	add.w	ip, ip, #1
  tm.Day = time + 1;     // day of month
    21b8:	adds	r0, #1
  for (month=0; month<12; month++) {
    21ba:	uxtb.w	ip, ip
  tm.Day = time + 1;     // day of month
    21be:	strb	r0, [r2, #4]
  tm.Month = month + 1;  // jan is month 1  
    21c0:	strb.w	ip, [r2, #5]
}
    21c4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (time >= monthLength) {
    21c8:	mov.w	ip, #2
    21cc:	b.n	217a <breakTime(long long, tmElements_t&)+0xfa>
    21ce:	nop
    21d0:	.word	0x88888889
    21d4:	.word	0xc28f5c29
    21d8:	.word	0xaaaaaaab
    21dc:	.word	0x24924925
    21e0:	.word	0x51eb851f
    21e4:	.word	0x028f5c28
    21e8:	.word	0x00a3d70a
    21ec:	.word	0x20000764

000021f0 <now()>:
#ifdef TIME_DRIFT_INFO   // define this to get drift data
time_t sysUnsyncedTime = 0; // the time sysTime unadjusted by sync  
#endif


time_t now() {
    21f0:	push	{r3, r4, r5, r6, r7, lr}
    21f2:	ldr	r4, [pc, #116]	; (2268 <now()+0x78>)
	// calculate number of seconds passed since last call to now()
  while (millis() - prevMillis >= 1000) {
    21f4:	ldr	r5, [pc, #116]	; (226c <now()+0x7c>)
    21f6:	ldr	r3, [r4, #0]
    21f8:	ldr	r2, [r5, #0]
    21fa:	ldr	r6, [pc, #116]	; (2270 <now()+0x80>)
    21fc:	subs	r3, r3, r2
    21fe:	cmp.w	r3, #1000	; 0x3e8
    2202:	bcc.n	2264 <now()+0x74>
    2204:	ldr	r1, [r6, #0]
    2206:	adds	r1, #1
    2208:	ldr	r3, [r4, #0]
		// millis() and prevMillis are both unsigned ints thus the subtraction will always be the absolute value of the difference
    sysTime++;
    prevMillis += 1000;	
    220a:	add.w	r2, r2, #1000	; 0x3e8
    220e:	mov	r0, r1
  while (millis() - prevMillis >= 1000) {
    2210:	adds	r1, #1
    2212:	subs	r3, r3, r2
    2214:	cmp.w	r3, #1000	; 0x3e8
    2218:	bcs.n	2208 <now()+0x18>
    221a:	str	r0, [r6, #0]
    221c:	str	r2, [r5, #0]
#ifdef TIME_DRIFT_INFO
    sysUnsyncedTime++; // this can be compared to the synced time to measure long term drift     
#endif
  }
  if (nextSyncTime <= sysTime) {
    221e:	ldr	r7, [pc, #84]	; (2274 <now()+0x84>)
    2220:	ldr	r3, [r7, #0]
    2222:	cmp	r3, r0
    2224:	bhi.n	2246 <now()+0x56>
    if (getTimePtr != 0) {
    2226:	ldr	r3, [pc, #80]	; (2278 <now()+0x88>)
    2228:	ldr	r3, [r3, #0]
    222a:	cbz	r3, 2246 <now()+0x56>
      time_t t = getTimePtr();
    222c:	blx	r3
      if (t != 0) {
    222e:	orrs	r1, r0
    2230:	beq.n	224a <now()+0x5a>
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
    2232:	ldr	r3, [pc, #72]	; (227c <now()+0x8c>)
    2234:	ldr	r2, [r4, #0]
    2236:	ldr	r3, [r3, #0]
  Status = timeSet;
  prevMillis = millis();  // restart counting from now (thanks to Korman for this fix)
    2238:	str	r2, [r5, #0]
  Status = timeSet;
    223a:	movs	r2, #2
  nextSyncTime = (uint32_t)t + syncInterval;
    223c:	add	r3, r0
  sysTime = (uint32_t)t;  
    223e:	str	r0, [r6, #0]
  nextSyncTime = (uint32_t)t + syncInterval;
    2240:	str	r3, [r7, #0]
  Status = timeSet;
    2242:	ldr	r3, [pc, #60]	; (2280 <now()+0x90>)
    2244:	strb	r2, [r3, #0]
}
    2246:	movs	r1, #0
    2248:	pop	{r3, r4, r5, r6, r7, pc}
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    224a:	ldr	r1, [pc, #52]	; (2280 <now()+0x90>)
        nextSyncTime = sysTime + syncInterval;
    224c:	ldr	r3, [pc, #44]	; (227c <now()+0x8c>)
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    224e:	ldrb	r2, [r1, #0]
        nextSyncTime = sysTime + syncInterval;
    2250:	ldr	r0, [r6, #0]
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    2252:	subs	r2, #0
        nextSyncTime = sysTime + syncInterval;
    2254:	ldr	r3, [r3, #0]
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    2256:	it	ne
    2258:	movne	r2, #1
        nextSyncTime = sysTime + syncInterval;
    225a:	add	r3, r0
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    225c:	strb	r2, [r1, #0]
}
    225e:	movs	r1, #0
        nextSyncTime = sysTime + syncInterval;
    2260:	str	r3, [r7, #0]
}
    2262:	pop	{r3, r4, r5, r6, r7, pc}
    2264:	ldr	r0, [r6, #0]
    2266:	b.n	221e <now()+0x2e>
    2268:	.word	0x20007b08
    226c:	.word	0x20005c90
    2270:	.word	0x20006314
    2274:	.word	0x20005c98
    2278:	.word	0x20007460
    227c:	.word	0x20001468
    2280:	.word	0x20007b74

00002284 <second()>:
int second() {
    2284:	push	{r4, r5, r6, lr}
  if (t != cacheTime) {
    2286:	ldr	r6, [pc, #36]	; (22ac <second()+0x28>)
  return second(now()); 
    2288:	bl	21f0 <now()>
  if (t != cacheTime) {
    228c:	ldrd	r2, r3, [r6]
    2290:	cmp	r1, r3
    2292:	it	eq
    2294:	cmpeq	r0, r2
    2296:	beq.n	22a6 <second()+0x22>
    2298:	mov	r5, r0
    229a:	mov	r4, r1
    breakTime(t, tm); 
    229c:	ldr	r2, [pc, #16]	; (22b0 <second()+0x2c>)
    229e:	bl	2080 <breakTime(long long, tmElements_t&)>
    cacheTime = t; 
    22a2:	strd	r5, r4, [r6]
  return tm.Second;
    22a6:	ldr	r3, [pc, #8]	; (22b0 <second()+0x2c>)
}
    22a8:	ldrb	r0, [r3, #0]
    22aa:	pop	{r4, r5, r6, pc}
    22ac:	.word	0x200052f8
    22b0:	.word	0x2000609c

000022b4 <setSyncProvider(long long (*)())>:
  return Status;
}

void setSyncProvider( getExternalTime getTimeFunction){
  getTimePtr = getTimeFunction;  
  nextSyncTime = sysTime;
    22b4:	ldr	r2, [pc, #12]	; (22c4 <setSyncProvider(long long (*)())+0x10>)
  getTimePtr = getTimeFunction;  
    22b6:	ldr	r1, [pc, #16]	; (22c8 <setSyncProvider(long long (*)())+0x14>)
  nextSyncTime = sysTime;
    22b8:	ldr	r3, [pc, #16]	; (22cc <setSyncProvider(long long (*)())+0x18>)
    22ba:	ldr	r2, [r2, #0]
  getTimePtr = getTimeFunction;  
    22bc:	str	r0, [r1, #0]
  nextSyncTime = sysTime;
    22be:	str	r2, [r3, #0]
  now(); // this will sync the clock
    22c0:	b.w	21f0 <now()>
    22c4:	.word	0x20006314
    22c8:	.word	0x20007460
    22cc:	.word	0x20005c98

000022d0 <TwoWire::available()>:
	}
	uint8_t requestFrom(uint8_t addr, uint8_t qty, uint32_t iaddr, uint8_t n, uint8_t stop);
	virtual size_t write(uint8_t data);
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
    22d0:	ldrb.w	r2, [r0, #163]	; 0xa3
    22d4:	ldrb.w	r0, [r0, #162]	; 0xa2
	}
    22d8:	subs	r0, r2, r0
    22da:	bx	lr

000022dc <TwoWire::read()>:
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    22dc:	ldrb.w	r3, [r0, #162]	; 0xa2
    22e0:	ldrb.w	r2, [r0, #163]	; 0xa3
    22e4:	cmp	r2, r3
    22e6:	bls.n	22f4 <TwoWire::read()+0x18>
		return rxBuffer[rxBufferIndex++];
    22e8:	adds	r2, r3, #1
    22ea:	add	r3, r0
    22ec:	strb.w	r2, [r0, #162]	; 0xa2
    22f0:	ldrb	r0, [r3, #26]
    22f2:	bx	lr
		if (rxBufferIndex >= rxBufferLength) return -1;
    22f4:	mov.w	r0, #4294967295
	}
    22f8:	bx	lr
    22fa:	nop

000022fc <TwoWire::peek()>:
	virtual int peek(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    22fc:	ldrb.w	r3, [r0, #162]	; 0xa2
    2300:	ldrb.w	r2, [r0, #163]	; 0xa3
    2304:	cmp	r2, r3
    2306:	bls.n	230e <TwoWire::peek()+0x12>
		return rxBuffer[rxBufferIndex];
    2308:	add	r0, r3
    230a:	ldrb	r0, [r0, #26]
    230c:	bx	lr
		if (rxBufferIndex >= rxBufferLength) return -1;
    230e:	mov.w	r0, #4294967295
	}
    2312:	bx	lr

00002314 <TwoWire::flush()>:
	virtual void flush(void) {
	}
    2314:	bx	lr
    2316:	nop

00002318 <TwoWire::write(unsigned char)>:
{
}


size_t TwoWire::write(uint8_t data)
{
    2318:	mov	r3, r0
	if (transmitting || slave_mode) {
    231a:	ldrh.w	r0, [r0, #304]	; 0x130
    231e:	cbz	r0, 2340 <TwoWire::write(unsigned char)+0x28>
		if (txBufferLength >= BUFFER_LENGTH+1) {
    2320:	ldrb.w	r2, [r3, #303]	; 0x12f
    2324:	cmp	r2, #136	; 0x88
    2326:	bls.n	2330 <TwoWire::write(unsigned char)+0x18>
	// format warnings are too pedantic - disable until newer toolchain offers better...
	// https://forum.pjrc.com/threads/62473?p=256873&viewfull=1#post256873
	// int printf(const char *format, ...) __attribute__ ((format (printf, 2, 3)));

  protected:
	void setWriteError(int err = 1) { write_error = err; }
    2328:	movs	r2, #1
			setWriteError();
			return 0;
    232a:	movs	r0, #0
    232c:	strb	r2, [r3, #4]
    232e:	bx	lr
		}
		txBuffer[txBufferLength++] = data;
    2330:	add.w	ip, r2, #1
		return 1;
    2334:	movs	r0, #1
		txBuffer[txBufferLength++] = data;
    2336:	add	r2, r3
    2338:	strb.w	ip, [r3, #303]	; 0x12f
    233c:	strb.w	r1, [r2, #165]	; 0xa5
	}
	return 0;
}
    2340:	bx	lr
    2342:	nop

00002344 <TwoWire::write(unsigned char const*, unsigned int)>:

size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
    2344:	push	{r3, r4, r5, lr}
	if (transmitting || slave_mode) {
    2346:	ldrh.w	r4, [r0, #304]	; 0x130
    234a:	cbnz	r4, 2350 <TwoWire::write(unsigned char const*, unsigned int)+0xc>
		memcpy(txBuffer + txBufferLength, data, quantity);
		txBufferLength += quantity;
		return quantity;
	}
	return 0;
}
    234c:	mov	r0, r4
    234e:	pop	{r3, r4, r5, pc}
		size_t avail = BUFFER_LENGTH+1 - txBufferLength;
    2350:	ldrb.w	r3, [r0, #303]	; 0x12f
    2354:	mov	r5, r0
    2356:	rsb	r4, r3, #137	; 0x89
		if (quantity > avail) {
    235a:	cmp	r2, r4
    235c:	bhi.n	237a <TwoWire::write(unsigned char const*, unsigned int)+0x36>
    235e:	mov	r4, r2
		memcpy(txBuffer + txBufferLength, data, quantity);
    2360:	add.w	r0, r5, #165	; 0xa5
    2364:	mov	r2, r4
    2366:	add	r0, r3
    2368:	bl	a170 <memcpy>
		txBufferLength += quantity;
    236c:	ldrb.w	r3, [r5, #303]	; 0x12f
}
    2370:	mov	r0, r4
		txBufferLength += quantity;
    2372:	add	r3, r4
    2374:	strb.w	r3, [r5, #303]	; 0x12f
}
    2378:	pop	{r3, r4, r5, pc}
    237a:	movs	r2, #1
    237c:	strb	r2, [r0, #4]
    237e:	b.n	2360 <TwoWire::write(unsigned char const*, unsigned int)+0x1c>

00002380 <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)>:
	constexpr TwoWire(IMXRT_LPI2C_t *myport, const I2C_Hardware_t &myhardware)
    2380:	push	{r3, r4, r5, lr}
	constexpr Print() : write_error(0) {}
    2382:	movs	r5, #0
    2384:	mov	r3, r2
    2386:	mov.w	r2, #1000	; 0x3e8
    238a:	mov	r4, r0
    238c:	strb	r5, [r0, #4]
    238e:	str	r2, [r0, #8]
		: port(myport), hardware(myhardware) {
    2390:	movs	r2, #136	; 0x88
    2392:	ldr	r0, [pc, #84]	; (23e8 <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)+0x68>)
    2394:	str	r1, [r4, #16]
    2396:	mov	r1, r5
    2398:	str	r0, [r4, #0]
    239a:	add.w	r0, r4, #26
    239e:	str	r3, [r4, #20]
    23a0:	strb	r5, [r4, #12]
    23a2:	strb	r5, [r4, #24]
    23a4:	strb	r5, [r4, #25]
    23a6:	bl	e110 <memset>
    23aa:	movs	r2, #137	; 0x89
    23ac:	mov	r1, r5
    23ae:	add.w	r0, r4, #165	; 0xa5
    23b2:	strb.w	r5, [r4, #162]	; 0xa2
    23b6:	strb.w	r5, [r4, #163]	; 0xa3
    23ba:	strb.w	r5, [r4, #164]	; 0xa4
    23be:	bl	e110 <memset>
	}
    23c2:	mov	r0, r4
		: port(myport), hardware(myhardware) {
    23c4:	strb.w	r5, [r4, #302]	; 0x12e
    23c8:	strb.w	r5, [r4, #303]	; 0x12f
    23cc:	strb.w	r5, [r4, #304]	; 0x130
    23d0:	strb.w	r5, [r4, #305]	; 0x131
    23d4:	strb.w	r5, [r4, #306]	; 0x132
    23d8:	strb.w	r5, [r4, #307]	; 0x133
    23dc:	strb.w	r5, [r4, #308]	; 0x134
    23e0:	strd	r5, r5, [r4, #312]	; 0x138
	}
    23e4:	pop	{r3, r4, r5, pc}
    23e6:	nop
    23e8:	.word	0x20000b98

000023ec <TwoWire::isr()>:
}


void TwoWire::isr(void)
{
	uint32_t status = port->SSR;
    23ec:	ldr	r3, [r0, #16]
{
    23ee:	push	{r4, r5, r6, lr}
	uint32_t status = port->SSR;
    23f0:	ldr.w	r5, [r3, #276]	; 0x114
{
    23f4:	mov	r4, r0
	uint32_t w1c_bits = status & 0xF00;
	if (w1c_bits) port->SSR = w1c_bits;
    23f6:	ands.w	r2, r5, #3840	; 0xf00
    23fa:	beq.n	2400 <TwoWire::isr()+0x14>
    23fc:	str.w	r2, [r3, #276]	; 0x114

	//Serial.print("isr ");
	//Serial.println(status, HEX);

	if (status & LPI2C_SSR_RDF) { // Receive Data Flag
    2400:	lsls	r6, r5, #30
    2402:	bpl.n	241c <TwoWire::isr()+0x30>
		int rx = port->SRDR;
    2404:	ldr.w	r1, [r3, #368]	; 0x170
		if (rx & 0x8000) {
    2408:	lsls	r0, r1, #16
    240a:	bpl.n	248a <TwoWire::isr()+0x9e>
			rxBufferIndex = 0;
    240c:	movs	r2, #0
    240e:	movs	r0, #1
    2410:	strb.w	r2, [r4, #162]	; 0xa2
			rxBufferLength = 0;
		}
		if (rxBufferLength < BUFFER_LENGTH) {
			rxBuffer[rxBufferLength++] = rx & 255;
    2414:	add	r2, r4
    2416:	strb.w	r0, [r4, #163]	; 0xa3
    241a:	strb	r1, [r2, #26]
		}
		//Serial.print("rx = ");
		//Serial.println(rx, HEX);
	}
	if (status & LPI2C_SSR_TDF) { // Transmit Data Flag
    241c:	lsls	r2, r5, #31
    241e:	bpl.n	2442 <TwoWire::isr()+0x56>
		if (!transmitting) {
    2420:	ldrb.w	r6, [r4, #304]	; 0x130
    2424:	cbz	r6, 2464 <TwoWire::isr()+0x78>
				(*user_onRequest)();
			}
			txBufferIndex = 0;
			transmitting = 1;
		}
		if (txBufferIndex < txBufferLength) {
    2426:	ldrb.w	r6, [r4, #302]	; 0x12e
    242a:	ldrb.w	r2, [r4, #303]	; 0x12f
    242e:	cmp	r2, r6
    2430:	bls.n	2482 <TwoWire::isr()+0x96>
			port->STDR = txBuffer[txBufferIndex++];
    2432:	adds	r2, r6, #1
    2434:	add	r6, r4
    2436:	strb.w	r2, [r4, #302]	; 0x12e
    243a:	ldrb.w	r2, [r6, #165]	; 0xa5
    243e:	str.w	r2, [r3, #352]	; 0x160
			port->STDR = 0;
		}
		//Serial.println("tx");
	}

	if (status & LPI2C_SSR_SDF) { // Stop
    2442:	lsls	r3, r5, #22
    2444:	bpl.n	2462 <TwoWire::isr()+0x76>
		//Serial.println("Stop");
		if (rxBufferLength > 0 && user_onReceive != nullptr) {
    2446:	ldrb.w	r0, [r4, #163]	; 0xa3
    244a:	cbz	r0, 2454 <TwoWire::isr()+0x68>
    244c:	ldr.w	r3, [r4, #316]	; 0x13c
    2450:	cbz	r3, 2454 <TwoWire::isr()+0x68>
			(*user_onReceive)(rxBufferLength);
    2452:	blx	r3
		}
		rxBufferIndex = 0;
    2454:	movs	r3, #0
    2456:	strh.w	r3, [r4, #162]	; 0xa2
		rxBufferLength = 0;
		txBufferIndex = 0;
    245a:	strh.w	r3, [r4, #302]	; 0x12e
		txBufferLength = 0;
		transmitting = 0;
    245e:	strb.w	r3, [r4, #304]	; 0x130
	}
}
    2462:	pop	{r4, r5, r6, pc}
			if (user_onRequest != nullptr) {
    2464:	ldr.w	r2, [r4, #312]	; 0x138
    2468:	cbz	r2, 246e <TwoWire::isr()+0x82>
				(*user_onRequest)();
    246a:	blx	r2
			port->STDR = txBuffer[txBufferIndex++];
    246c:	ldr	r3, [r4, #16]
			txBufferIndex = 0;
    246e:	movs	r2, #0
    2470:	strb.w	r2, [r4, #302]	; 0x12e
			transmitting = 1;
    2474:	movs	r2, #1
    2476:	strb.w	r2, [r4, #304]	; 0x130
		if (txBufferIndex < txBufferLength) {
    247a:	ldrb.w	r2, [r4, #303]	; 0x12f
    247e:	cmp	r2, r6
    2480:	bhi.n	2432 <TwoWire::isr()+0x46>
			port->STDR = 0;
    2482:	movs	r2, #0
    2484:	str.w	r2, [r3, #352]	; 0x160
    2488:	b.n	2442 <TwoWire::isr()+0x56>
		if (rxBufferLength < BUFFER_LENGTH) {
    248a:	ldrb.w	r2, [r4, #163]	; 0xa3
    248e:	cmp	r2, #135	; 0x87
    2490:	bhi.n	241c <TwoWire::isr()+0x30>
			rxBuffer[rxBufferLength++] = rx & 255;
    2492:	adds	r0, r2, #1
    2494:	uxtb	r0, r0
    2496:	b.n	2414 <TwoWire::isr()+0x28>

00002498 <lpi2c1_isr()>:
void lpi2c1_isr(void) { Wire.isr(); }
void lpi2c3_isr(void) { Wire2.isr(); }
void lpi2c4_isr(void) { Wire1.isr(); }
void lpi2c2_isr(void) { Wire3.isr(); }
#else
void lpi2c1_isr(void) { Wire.isr(); }
    2498:	ldr	r0, [pc, #4]	; (24a0 <lpi2c1_isr()+0x8>)
    249a:	b.w	23ec <TwoWire::isr()>
    249e:	nop
    24a0:	.word	0x200058cc

000024a4 <lpi2c3_isr()>:
void lpi2c3_isr(void) { Wire1.isr(); }
    24a4:	ldr	r0, [pc, #4]	; (24ac <lpi2c3_isr()+0x8>)
    24a6:	b.w	23ec <TwoWire::isr()>
    24aa:	nop
    24ac:	.word	0x20005a0c

000024b0 <lpi2c4_isr()>:
void lpi2c4_isr(void) { Wire2.isr(); }
    24b0:	ldr	r0, [pc, #4]	; (24b8 <lpi2c4_isr()+0x8>)
    24b2:	b.w	23ec <TwoWire::isr()>
    24b6:	nop
    24b8:	.word	0x20005b4c

000024bc <_GLOBAL__sub_I__ZN7TwoWire5beginEv>:
	}
	port->MCCR1 = port->MCCR0;
	port->MCFGR0 = 0;
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
	port->MCR = LPI2C_MCR_MEN;
}
    24bc:	push	{r4, lr}
TwoWire Wire(&IMXRT_LPI2C1, TwoWire::i2c1_hardware);
    24be:	ldr	r4, [pc, #36]	; (24e4 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x28>)
    24c0:	ldr	r1, [pc, #36]	; (24e8 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x2c>)
    24c2:	mov	r2, r4
    24c4:	ldr	r0, [pc, #36]	; (24ec <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x30>)
    24c6:	bl	2380 <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)>
	TwoWire Wire1(&IMXRT_LPI2C3, TwoWire::i2c3_hardware);
    24ca:	add.w	r2, r4, #80	; 0x50
    24ce:	ldr	r1, [pc, #32]	; (24f0 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x34>)
    24d0:	ldr	r0, [pc, #32]	; (24f4 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x38>)
    24d2:	bl	2380 <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)>
	TwoWire Wire2(&IMXRT_LPI2C4, TwoWire::i2c4_hardware);
    24d6:	add.w	r2, r4, #160	; 0xa0
    24da:	ldr	r1, [pc, #28]	; (24f8 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x3c>)
    24dc:	ldr	r0, [pc, #28]	; (24fc <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x40>)
    24de:	bl	2380 <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)>
}
    24e2:	pop	{r4, pc}
    24e4:	.word	0x60001f8c
    24e8:	.word	0x403f0000
    24ec:	.word	0x200058cc
    24f0:	.word	0x403f8000
    24f4:	.word	0x20005a0c
    24f8:	.word	0x403fc000
    24fc:	.word	0x20005b4c

00002500 <EventResponder::triggerEvent(int, void*)>:
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    2500:	ldrb.w	ip, [r0, #28]
		_status = status;
    2504:	str	r1, [r0, #4]
		if (_type == EventTypeImmediate) {
    2506:	cmp.w	ip, #2
		_data = data;
    250a:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    250c:	bne.n	2512 <EventResponder::triggerEvent(int, void*)+0x12>
			(*_function)(*this);
    250e:	ldr	r3, [r0, #8]
    2510:	bx	r3
		} else {
			triggerEventNotImmediate();
    2512:	b.w	c270 <EventResponder::triggerEventNotImmediate()>
    2516:	nop

00002518 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]>:
	if (interruptMask[n >> 5] == 0) {
		interruptMasksUsed &= ~(1 << (n >> 5));
	}
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
    2518:	push	{r4, r5, r6, r7}
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    251a:	ldr	r4, [r0, #0]
    uint8_t *p_read = (uint8_t*)retbuf;
    size_t count_read = count;

	// Pass 1 keep it simple and don't try packing 8 bits into 16 yet..
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 
    251c:	movw	r5, #513	; 0x201

	while (count > 0) {
    2520:	mov	r6, r3
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 
    2522:	str	r5, [r4, #16]
	while (count > 0) {
    2524:	cbz	r3, 2550 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x38>
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    2526:	cbz	r1, 2572 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x5a>
    2528:	ldrb.w	r5, [r1], #1
		count--; // how many bytes left to output.
    252c:	subs	r3, #1
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    252e:	str	r5, [r4, #100]	; 0x64
		// Make sure queue is not full before pushing next byte out
		do {
			if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    2530:	ldr	r5, [r4, #112]	; 0x70
    2532:	lsls	r7, r5, #30
    2534:	bmi.n	2546 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x2e>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
				if (p_read) *p_read++ = b; 
    2536:	mov	r5, r2
				count_read--;
    2538:	subs	r6, #1
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    253a:	ldr	r7, [r4, #116]	; 0x74
				if (p_read) *p_read++ = b; 
    253c:	cbz	r2, 2546 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x2e>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    253e:	strb.w	r7, [r5], #1
				if (p_read) *p_read++ = b; 
    2542:	mov	r2, r5
    2544:	ldr	r4, [r0, #0]
			}
		} while ((port().SR & LPSPI_SR_TDF) == 0) ;
    2546:	ldr	r5, [r4, #20]
    2548:	lsls	r5, r5, #31
    254a:	bpl.n	2530 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x18>
	while (count > 0) {
    254c:	cmp	r3, #0
    254e:	bne.n	2526 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0xe>

	}

	// now lets wait for all of the read bytes to be returned...
	while (count_read) {
    2550:	cbz	r6, 256e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x56>
    2552:	ldr	r3, [r0, #0]
		if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    2554:	ldr	r1, [r3, #112]	; 0x70
    2556:	lsls	r1, r1, #30
    2558:	bmi.n	2550 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x38>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
			if (p_read) *p_read++ = b; 
    255a:	mov	r1, r2
			count_read--;
    255c:	subs	r6, #1
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    255e:	ldr	r3, [r3, #116]	; 0x74
			if (p_read) *p_read++ = b; 
    2560:	cmp	r2, #0
    2562:	beq.n	2550 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x38>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    2564:	strb.w	r3, [r1], #1
			if (p_read) *p_read++ = b; 
    2568:	mov	r2, r1
	while (count_read) {
    256a:	cmp	r6, #0
    256c:	bne.n	2552 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x3a>
		}
	}
}
    256e:	pop	{r4, r5, r6, r7}
    2570:	bx	lr
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    2572:	ldrb.w	r5, [r0, #60]	; 0x3c
    2576:	b.n	252c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x14>

00002578 <_spi_dma_rxISR1()>:

//-------------------------------------------------------------------------
// DMA RX ISR
//-------------------------------------------------------------------------
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
    2578:	ldr	r3, [pc, #200]	; (2644 <_spi_dma_rxISR1()+0xcc>)
		DMA_CINT = channel;
    257a:	ldr	r1, [pc, #204]	; (2648 <_spi_dma_rxISR1()+0xd0>)
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    257c:	push	{r4, r5, lr}
	_dmaTX->clearComplete();
    257e:	ldrd	r5, r4, [r3, #68]	; 0x44
    2582:	ldrb	r0, [r4, #4]
    2584:	strb	r0, [r1, #31]
	_dmaRX->clearComplete();

	if (_dma_count_remaining) {
    2586:	ldr	r2, [r3, #64]	; 0x40
	bool complete(void) {
		if (TCD->CSR & DMA_TCD_CSR_DONE) return true;
		return false;
	}
	void clearComplete(void) {
		DMA_CDNE = channel;
    2588:	ldrb.w	ip, [r5, #4]
    258c:	strb.w	ip, [r1, #28]
    2590:	strb	r0, [r1, #28]
    2592:	cbz	r2, 25aa <_spi_dma_rxISR1()+0x32>
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > MAX_DMA_COUNT) {
    2594:	cmp.w	r2, #32768	; 0x8000
    2598:	bcc.n	25e2 <_spi_dma_rxISR1()+0x6a>
			_dma_count_remaining -= MAX_DMA_COUNT;
    259a:	ldr	r1, [pc, #176]	; (264c <_spi_dma_rxISR1()+0xd4>)
    259c:	add	r1, r2
		DMA_SERQ = channel;
    259e:	ldr	r2, [pc, #168]	; (2648 <_spi_dma_rxISR1()+0xd0>)
    25a0:	str	r1, [r3, #64]	; 0x40
    25a2:	strb	r0, [r2, #27]
    25a4:	strb.w	ip, [r2, #27]
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    25a8:	pop	{r4, r5, pc}
    25aa:	ldr	r1, [r3, #0]
		}
		_dmaRX->enable();
		_dmaTX->enable();
	} else {

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    25ac:	movs	r4, #15

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    25ae:	ldr	r0, [r3, #76]	; 0x4c
		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    25b0:	str	r4, [r1, #88]	; 0x58
		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    25b2:	movw	r4, #769	; 0x301
 		port().DER = 0;		// DMA no longer doing TX (or RX)
    25b6:	str	r2, [r1, #28]
		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    25b8:	str	r4, [r1, #16]
		port().SR = 0x3f00;	// clear out all of the other status...
    25ba:	mov.w	r4, #16128	; 0x3f00
    25be:	str	r4, [r1, #20]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    25c0:	movs	r1, #3
		_dma_event_responder->triggerEvent();
    25c2:	ldr	r4, [r0, #0]
    25c4:	ldr	r4, [r4, #0]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    25c6:	strb.w	r1, [r3, #61]	; 0x3d
		_dma_event_responder->triggerEvent();
    25ca:	ldr	r3, [pc, #132]	; (2650 <_spi_dma_rxISR1()+0xd8>)
    25cc:	cmp	r4, r3
    25ce:	bne.n	261e <_spi_dma_rxISR1()+0xa6>
		if (_type == EventTypeImmediate) {
    25d0:	ldrb	r3, [r0, #28]
		_status = status;
    25d2:	str	r2, [r0, #4]
		if (_type == EventTypeImmediate) {
    25d4:	cmp	r3, #2
		_data = data;
    25d6:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    25d8:	bne.n	2628 <_spi_dma_rxISR1()+0xb0>
			(*_function)(*this);
    25da:	ldr	r3, [r0, #8]
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    25dc:	ldmia.w	sp!, {r4, r5, lr}
    25e0:	bx	r3
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining);
    25e2:	ldr	r5, [r5, #0]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    25e4:	ldrh	r1, [r5, #30]
    25e6:	lsls	r1, r1, #16
    25e8:	bmi.n	2630 <_spi_dma_rxISR1()+0xb8>
		tcd->BITER = len & 0x7fff;
    25ea:	uxth	r2, r2
    25ec:	strh	r2, [r5, #30]
	tcd->CITER = tcd->BITER; 
    25ee:	ldr	r1, [r4, #0]
    25f0:	ldrh	r4, [r5, #30]
    25f2:	uxth	r4, r4
    25f4:	strh	r4, [r5, #22]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    25f6:	ldrh	r4, [r1, #30]
    25f8:	lsls	r4, r4, #16
    25fa:	bpl.n	2608 <_spi_dma_rxISR1()+0x90>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    25fc:	ldrh	r4, [r1, #30]
    25fe:	ubfx	r2, r2, #0, #9
    2602:	and.w	r4, r4, #65024	; 0xfe00
    2606:	orrs	r2, r4
    2608:	strh	r2, [r1, #30]
	tcd->CITER = tcd->BITER; 
    260a:	ldrh	r2, [r1, #30]
    260c:	uxth	r2, r2
    260e:	strh	r2, [r1, #22]
    2610:	movs	r1, #0
    2612:	ldr	r2, [pc, #52]	; (2648 <_spi_dma_rxISR1()+0xd0>)
			_dma_count_remaining -= MAX_DMA_COUNT;
    2614:	str	r1, [r3, #64]	; 0x40
    2616:	strb	r0, [r2, #27]
    2618:	strb.w	ip, [r2, #27]
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    261c:	pop	{r4, r5, pc}
		_dma_event_responder->triggerEvent();
    261e:	mov	r3, r4
    2620:	mov	r1, r2
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    2622:	ldmia.w	sp!, {r4, r5, lr}
		_dma_event_responder->triggerEvent();
    2626:	bx	r3
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    2628:	ldmia.w	sp!, {r4, r5, lr}
			triggerEventNotImmediate();
    262c:	b.w	c270 <EventResponder::triggerEventNotImmediate()>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    2630:	ldrh	r1, [r5, #30]
    2632:	ubfx	lr, r2, #0, #9
    2636:	uxth	r2, r2
    2638:	and.w	r1, r1, #65024	; 0xfe00
    263c:	orr.w	r1, r1, lr
    2640:	strh	r1, [r5, #30]
    2642:	b.n	25ee <_spi_dma_rxISR1()+0x76>
    2644:	.word	0x20005828
    2648:	.word	0x400e8000
    264c:	.word	0xffff8001
    2650:	.word	0x00002501

00002654 <_spi_dma_rxISR0()>:
	_dmaRX->clearInterrupt();
    2654:	ldr	r3, [pc, #200]	; (2720 <_spi_dma_rxISR0()+0xcc>)
		DMA_CINT = channel;
    2656:	ldr	r1, [pc, #204]	; (2724 <_spi_dma_rxISR0()+0xd0>)
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    2658:	push	{r4, r5, lr}
	_dmaTX->clearComplete();
    265a:	ldrd	r5, r4, [r3, #68]	; 0x44
    265e:	ldrb	r0, [r4, #4]
    2660:	strb	r0, [r1, #31]
	if (_dma_count_remaining) {
    2662:	ldr	r2, [r3, #64]	; 0x40
		DMA_CDNE = channel;
    2664:	ldrb.w	ip, [r5, #4]
    2668:	strb.w	ip, [r1, #28]
    266c:	strb	r0, [r1, #28]
    266e:	cbz	r2, 2686 <_spi_dma_rxISR0()+0x32>
		if (_dma_count_remaining > MAX_DMA_COUNT) {
    2670:	cmp.w	r2, #32768	; 0x8000
    2674:	bcc.n	26be <_spi_dma_rxISR0()+0x6a>
			_dma_count_remaining -= MAX_DMA_COUNT;
    2676:	ldr	r1, [pc, #176]	; (2728 <_spi_dma_rxISR0()+0xd4>)
    2678:	add	r1, r2
		DMA_SERQ = channel;
    267a:	ldr	r2, [pc, #168]	; (2724 <_spi_dma_rxISR0()+0xd0>)
    267c:	str	r1, [r3, #64]	; 0x40
    267e:	strb	r0, [r2, #27]
    2680:	strb.w	ip, [r2, #27]
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    2684:	pop	{r4, r5, pc}
    2686:	ldr	r1, [r3, #0]
		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    2688:	movs	r4, #15
		_dma_event_responder->triggerEvent();
    268a:	ldr	r0, [r3, #76]	; 0x4c
		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    268c:	str	r4, [r1, #88]	; 0x58
		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    268e:	movw	r4, #769	; 0x301
 		port().DER = 0;		// DMA no longer doing TX (or RX)
    2692:	str	r2, [r1, #28]
		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    2694:	str	r4, [r1, #16]
		port().SR = 0x3f00;	// clear out all of the other status...
    2696:	mov.w	r4, #16128	; 0x3f00
    269a:	str	r4, [r1, #20]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    269c:	movs	r1, #3
		_dma_event_responder->triggerEvent();
    269e:	ldr	r4, [r0, #0]
    26a0:	ldr	r4, [r4, #0]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    26a2:	strb.w	r1, [r3, #61]	; 0x3d
		_dma_event_responder->triggerEvent();
    26a6:	ldr	r3, [pc, #132]	; (272c <_spi_dma_rxISR0()+0xd8>)
    26a8:	cmp	r4, r3
    26aa:	bne.n	26fa <_spi_dma_rxISR0()+0xa6>
		if (_type == EventTypeImmediate) {
    26ac:	ldrb	r3, [r0, #28]
		_status = status;
    26ae:	str	r2, [r0, #4]
		if (_type == EventTypeImmediate) {
    26b0:	cmp	r3, #2
		_data = data;
    26b2:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    26b4:	bne.n	2704 <_spi_dma_rxISR0()+0xb0>
			(*_function)(*this);
    26b6:	ldr	r3, [r0, #8]
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    26b8:	ldmia.w	sp!, {r4, r5, lr}
    26bc:	bx	r3
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining);
    26be:	ldr	r5, [r5, #0]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    26c0:	ldrh	r1, [r5, #30]
    26c2:	lsls	r1, r1, #16
    26c4:	bmi.n	270c <_spi_dma_rxISR0()+0xb8>
		tcd->BITER = len & 0x7fff;
    26c6:	uxth	r2, r2
    26c8:	strh	r2, [r5, #30]
	tcd->CITER = tcd->BITER; 
    26ca:	ldr	r1, [r4, #0]
    26cc:	ldrh	r4, [r5, #30]
    26ce:	uxth	r4, r4
    26d0:	strh	r4, [r5, #22]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    26d2:	ldrh	r4, [r1, #30]
    26d4:	lsls	r4, r4, #16
    26d6:	bpl.n	26e4 <_spi_dma_rxISR0()+0x90>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    26d8:	ldrh	r4, [r1, #30]
    26da:	ubfx	r2, r2, #0, #9
    26de:	and.w	r4, r4, #65024	; 0xfe00
    26e2:	orrs	r2, r4
    26e4:	strh	r2, [r1, #30]
	tcd->CITER = tcd->BITER; 
    26e6:	ldrh	r2, [r1, #30]
    26e8:	uxth	r2, r2
    26ea:	strh	r2, [r1, #22]
    26ec:	movs	r1, #0
    26ee:	ldr	r2, [pc, #52]	; (2724 <_spi_dma_rxISR0()+0xd0>)
			_dma_count_remaining -= MAX_DMA_COUNT;
    26f0:	str	r1, [r3, #64]	; 0x40
    26f2:	strb	r0, [r2, #27]
    26f4:	strb.w	ip, [r2, #27]
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    26f8:	pop	{r4, r5, pc}
		_dma_event_responder->triggerEvent();
    26fa:	mov	r3, r4
    26fc:	mov	r1, r2
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    26fe:	ldmia.w	sp!, {r4, r5, lr}
		_dma_event_responder->triggerEvent();
    2702:	bx	r3
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    2704:	ldmia.w	sp!, {r4, r5, lr}
			triggerEventNotImmediate();
    2708:	b.w	c270 <EventResponder::triggerEventNotImmediate()>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    270c:	ldrh	r1, [r5, #30]
    270e:	ubfx	lr, r2, #0, #9
    2712:	uxth	r2, r2
    2714:	and.w	r1, r1, #65024	; 0xfe00
    2718:	orr.w	r1, r1, lr
    271c:	strh	r1, [r5, #30]
    271e:	b.n	26ca <_spi_dma_rxISR0()+0x76>
    2720:	.word	0x200057d8
    2724:	.word	0x400e8000
    2728:	.word	0xffff8001
    272c:	.word	0x00002501

00002730 <SPIClass::SPIClass(unsigned int, unsigned int)>:
		: port_addr(myport), hardware_addr(myhardware) {
    2730:	movs	r3, #0
    2732:	strd	r1, r2, [r0]
    2736:	strd	r3, r3, [r0, #8]
    273a:	strd	r3, r3, [r0, #16]
    273e:	strd	r3, r3, [r0, #24]
    2742:	strd	r3, r3, [r0, #32]
    2746:	strd	r3, r3, [r0, #40]	; 0x28
    274a:	strd	r3, r3, [r0, #48]	; 0x30
    274e:	str	r3, [r0, #56]	; 0x38
    2750:	strh	r3, [r0, #60]	; 0x3c
    2752:	strd	r3, r3, [r0, #64]	; 0x40
    2756:	strd	r3, r3, [r0, #72]	; 0x48
	}
    275a:	bx	lr

0000275c <SPIClass::begin()>:
	const SPI_Hardware_t & hardware() { return *(const SPI_Hardware_t *)hardware_addr; }
    275c:	ldr	r3, [r0, #4]
{
    275e:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    2762:	ldrd	r4, r1, [r3]
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
    2766:	ldr	r5, [pc, #516]	; (296c <SPIClass::begin()+0x210>)
	*(portControlRegister(hardware().miso_pin[miso_pin_index])) = fastio;
    2768:	mov.w	sl, #184	; 0xb8
	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    276c:	ldr	r2, [r4, #0]
	port().CR = LPSPI_CR_RST;
    276e:	mov.w	r8, #2
	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    2772:	bic.w	r2, r2, r1
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
    2776:	ldr	r1, [pc, #504]	; (2970 <SPIClass::begin()+0x214>)
	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    2778:	str	r2, [r4, #0]
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
    277a:	ldr	r2, [r5, #24]
    277c:	ands	r1, r2
		CCM_CBCMR_LPSPI_PODF(2) | CCM_CBCMR_LPSPI_CLK_SEL(1); // pg 714
    277e:	ldr	r2, [pc, #500]	; (2974 <SPIClass::begin()+0x218>)
    2780:	orrs	r2, r1
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
    2782:	str	r2, [r5, #24]
	*(portControlRegister(hardware().miso_pin[miso_pin_index])) = fastio;
    2784:	ldrb.w	lr, [r0, #16]
    2788:	ldr	r2, [pc, #492]	; (2978 <SPIClass::begin()+0x21c>)
    278a:	add.w	r6, r3, lr
	*(portConfigRegister(hardware().miso_pin[miso_pin_index])) = hardware().miso_mux[miso_pin_index];
    278e:	add.w	lr, r3, lr, lsl #2
	*(portControlRegister(hardware().miso_pin[miso_pin_index])) = fastio;
    2792:	ldrb	r1, [r6, #16]
    2794:	add.w	r1, r2, r1, lsl #4
    2798:	ldr	r1, [r1, #8]
    279a:	str.w	sl, [r1]
	*(portControlRegister(hardware().mosi_pin[mosi_pin_index])) = fastio;
    279e:	ldrb.w	ip, [r0, #17]
    27a2:	add.w	r5, r3, ip
	*(portConfigRegister(hardware().mosi_pin [mosi_pin_index])) = hardware().mosi_mux[mosi_pin_index];
    27a6:	add.w	ip, ip, #10
	*(portControlRegister(hardware().mosi_pin[mosi_pin_index])) = fastio;
    27aa:	ldrb.w	r1, [r5, #36]	; 0x24
    27ae:	add.w	r1, r2, r1, lsl #4
    27b2:	ldr	r1, [r1, #8]
    27b4:	str.w	sl, [r1]
	*(portControlRegister(hardware().sck_pin[sck_pin_index])) = fastio;
    27b8:	ldrb	r1, [r0, #18]
    27ba:	add.w	r9, r3, r1
	*(portConfigRegister(hardware().sck_pin [sck_pin_index])) = hardware().sck_mux[sck_pin_index];
    27be:	add.w	r1, r3, r1, lsl #2
	*(portControlRegister(hardware().sck_pin[sck_pin_index])) = fastio;
    27c2:	ldrb.w	fp, [r9, #56]	; 0x38
    27c6:	add.w	fp, r2, fp, lsl #4
    27ca:	ldr.w	fp, [fp, #8]
    27ce:	str.w	sl, [fp]
	hardware().clock_gate_register |= hardware().clock_gate_mask;
    27d2:	ldr.w	sl, [r4]
    27d6:	ldr	r7, [r3, #4]
    27d8:	orr.w	sl, sl, r7
    27dc:	str.w	sl, [r4]
	*(portConfigRegister(hardware().miso_pin[miso_pin_index])) = hardware().miso_mux[miso_pin_index];
    27e0:	ldrb	r4, [r6, #16]
    27e2:	ldr.w	lr, [lr, #20]
    27e6:	add.w	r4, r2, r4, lsl #4
    27ea:	ldr	r4, [r4, #4]
    27ec:	str.w	lr, [r4]
	*(portConfigRegister(hardware().mosi_pin [mosi_pin_index])) = hardware().mosi_mux[mosi_pin_index];
    27f0:	ldrb.w	r4, [r5, #36]	; 0x24
    27f4:	ldr.w	ip, [r3, ip, lsl #2]
    27f8:	add.w	r4, r2, r4, lsl #4
    27fc:	ldr	r4, [r4, #4]
    27fe:	str.w	ip, [r4]
	*(portConfigRegister(hardware().sck_pin [sck_pin_index])) = hardware().sck_mux[sck_pin_index];
    2802:	ldrb.w	r4, [r9, #56]	; 0x38
    2806:	add.w	r2, r2, r4, lsl #4
    280a:	ldr	r2, [r2, #4]
    280c:	ldr	r1, [r1, #60]	; 0x3c
    280e:	str	r1, [r2, #0]
	hardware().sck_select_input_register = hardware().sck_select_val[sck_pin_index];
    2810:	ldr	r2, [r3, #72]	; 0x48
    2812:	ldrb.w	r1, [r9, #68]	; 0x44
    2816:	str	r1, [r2, #0]
	hardware().miso_select_input_register = hardware().miso_select_val[miso_pin_index];
    2818:	ldr	r2, [r3, #32]
    281a:	ldrb	r1, [r6, #28]
	hardware().mosi_select_input_register = hardware().mosi_select_val[mosi_pin_index];
    281c:	ldr	r3, [r3, #52]	; 0x34
	hardware().miso_select_input_register = hardware().miso_select_val[miso_pin_index];
    281e:	str	r1, [r2, #0]
	hardware().mosi_select_input_register = hardware().mosi_select_val[mosi_pin_index];
    2820:	ldrb.w	r2, [r5, #48]	; 0x30
    2824:	str	r2, [r3, #0]
	port().FCR = LPSPI_FCR_TXWATER(15);
    2826:	movs	r2, #15
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    2828:	ldr	r3, [r0, #0]
	port().CR = LPSPI_CR_RST;
    282a:	str.w	r8, [r3, #16]
	port().FCR = LPSPI_FCR_TXWATER(15);
    282e:	str	r2, [r3, #88]	; 0x58
		if (interruptMasksUsed) {
    2830:	ldrb	r2, [r0, #19]
    2832:	cmp	r2, #0
    2834:	beq.n	289a <SPIClass::begin()+0x13e>
			__disable_irq();
    2836:	cpsid	i
			if (interruptMasksUsed & 0x01) {
    2838:	ldrb	r3, [r0, #19]
    283a:	lsls	r4, r3, #31
    283c:	bpl.n	2850 <SPIClass::begin()+0xf4>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    283e:	mov.w	r1, #3758153728	; 0xe000e000
    2842:	ldr	r4, [r0, #20]
    2844:	ldr.w	r2, [r1, #384]	; 0x180
    2848:	ands	r2, r4
    284a:	str	r2, [r0, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    284c:	str.w	r2, [r1, #384]	; 0x180
			if (interruptMasksUsed & 0x02) {
    2850:	lsls	r1, r3, #30
    2852:	bpl.n	2866 <SPIClass::begin()+0x10a>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    2854:	mov.w	r1, #3758153728	; 0xe000e000
    2858:	ldr	r4, [r0, #24]
    285a:	ldr.w	r2, [r1, #388]	; 0x184
    285e:	ands	r2, r4
    2860:	str	r2, [r0, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    2862:	str.w	r2, [r1, #388]	; 0x184
			if (interruptMasksUsed & 0x04) {
    2866:	lsls	r2, r3, #29
    2868:	bpl.n	287c <SPIClass::begin()+0x120>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    286a:	mov.w	r1, #3758153728	; 0xe000e000
    286e:	ldr	r4, [r0, #28]
    2870:	ldr.w	r2, [r1, #392]	; 0x188
    2874:	ands	r2, r4
    2876:	str	r2, [r0, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    2878:	str.w	r2, [r1, #392]	; 0x188
			if (interruptMasksUsed & 0x08) {
    287c:	lsls	r7, r3, #28
    287e:	bpl.n	2892 <SPIClass::begin()+0x136>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    2880:	mov.w	r1, #3758153728	; 0xe000e000
    2884:	ldr	r4, [r0, #32]
    2886:	ldr.w	r2, [r1, #396]	; 0x18c
    288a:	ands	r2, r4
    288c:	str	r2, [r0, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    288e:	str.w	r2, [r1, #396]	; 0x18c
			if (interruptMasksUsed & 0x10) {
    2892:	lsls	r6, r3, #27
    2894:	bmi.n	2942 <SPIClass::begin()+0x1e6>
			__enable_irq();
    2896:	cpsie	i
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    2898:	ldr	r3, [r0, #0]
		if (settings.clock() != _clock) {
    289a:	ldr	r4, [pc, #224]	; (297c <SPIClass::begin()+0x220>)
    289c:	ldr	r2, [r0, #8]
    289e:	cmp	r2, r4
    28a0:	beq.n	2956 <SPIClass::begin()+0x1fa>
			uint32_t cbcmr = CCM_CBCMR;
    28a2:	ldr	r2, [pc, #200]	; (296c <SPIClass::begin()+0x210>)
		    _clock = settings.clock();
    28a4:	str	r4, [r0, #8]
			uint32_t cbcmr = CCM_CBCMR;
    28a6:	ldr	r2, [r2, #24]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    28a8:	ldr	r1, [pc, #212]	; (2980 <SPIClass::begin()+0x224>)
    28aa:	ubfx	r6, r2, #4, #2
    28ae:	ubfx	r2, r2, #26, #3
			if (d && clkhz/d > _clock) d++;
    28b2:	ldr	r5, [pc, #208]	; (2984 <SPIClass::begin()+0x228>)
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    28b4:	ldr.w	r1, [r1, r6, lsl #2]
    28b8:	adds	r2, #1
    28ba:	udiv	r2, r1, r2
			if (d && clkhz/d > _clock) d++;
    28be:	cmp	r2, r5
    28c0:	bhi.n	2926 <SPIClass::begin()+0x1ca>
    28c2:	movs	r2, #0
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    28c4:	str	r2, [r0, #12]
		port().CR = 0;
    28c6:	movs	r4, #0
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    28c8:	movs	r1, #3
		port().CR = 0;
    28ca:	str	r4, [r3, #16]
		port().TCR = settings.tcr;
    28cc:	movs	r4, #7
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    28ce:	str	r1, [r3, #36]	; 0x24
		port().CR = LPSPI_CR_MEN;
    28d0:	movs	r1, #1
		port().CCR = _ccr;
    28d2:	str	r2, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
    28d4:	str	r4, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    28d6:	str	r1, [r3, #16]
		if (interruptMasksUsed) {
    28d8:	ldrb	r3, [r0, #19]
    28da:	cbz	r3, 2922 <SPIClass::begin()+0x1c6>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    28dc:	lsls	r5, r3, #31
    28de:	bpl.n	28ea <SPIClass::begin()+0x18e>
    28e0:	ldr	r1, [r0, #40]	; 0x28
    28e2:	mov.w	r2, #3758153728	; 0xe000e000
    28e6:	str.w	r1, [r2, #256]	; 0x100
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    28ea:	lsls	r4, r3, #30
    28ec:	bpl.n	28f8 <SPIClass::begin()+0x19c>
    28ee:	ldr	r1, [r0, #44]	; 0x2c
    28f0:	mov.w	r2, #3758153728	; 0xe000e000
    28f4:	str.w	r1, [r2, #260]	; 0x104
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    28f8:	lsls	r1, r3, #29
    28fa:	bpl.n	2906 <SPIClass::begin()+0x1aa>
    28fc:	ldr	r1, [r0, #48]	; 0x30
    28fe:	mov.w	r2, #3758153728	; 0xe000e000
    2902:	str.w	r1, [r2, #264]	; 0x108
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    2906:	lsls	r2, r3, #28
    2908:	bpl.n	2914 <SPIClass::begin()+0x1b8>
    290a:	ldr	r1, [r0, #52]	; 0x34
    290c:	mov.w	r2, #3758153728	; 0xe000e000
    2910:	str.w	r1, [r2, #268]	; 0x10c
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    2914:	lsls	r3, r3, #27
    2916:	bpl.n	2922 <SPIClass::begin()+0x1c6>
    2918:	ldr	r2, [r0, #56]	; 0x38
    291a:	mov.w	r3, #3758153728	; 0xe000e000
    291e:	str.w	r2, [r3, #272]	; 0x110
}
    2922:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			d = _clock ? clkhz/_clock : clkhz;
    2926:	ldr	r1, [pc, #96]	; (2988 <SPIClass::begin()+0x22c>)
    2928:	umull	r5, r1, r1, r2
    292c:	lsrs	r1, r1, #20
			if (d && clkhz/d > _clock) d++;
    292e:	udiv	r2, r2, r1
    2932:	cmp	r2, r4
    2934:	it	hi
    2936:	addhi	r1, #1
			if (d > 257) d= 257;  // max div
    2938:	cmp.w	r1, #258	; 0x102
    293c:	bcc.n	295a <SPIClass::begin()+0x1fe>
    293e:	ldr	r2, [pc, #76]	; (298c <SPIClass::begin()+0x230>)
				div = d-2;
    2940:	b.n	28c4 <SPIClass::begin()+0x168>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    2942:	mov.w	r2, #3758153728	; 0xe000e000
    2946:	ldr	r1, [r0, #36]	; 0x24
    2948:	ldr.w	r3, [r2, #400]	; 0x190
    294c:	ands	r3, r1
    294e:	str	r3, [r0, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    2950:	str.w	r3, [r2, #400]	; 0x190
    2954:	b.n	2896 <SPIClass::begin()+0x13a>
		port().CCR = _ccr;
    2956:	ldr	r2, [r0, #12]
    2958:	b.n	28c6 <SPIClass::begin()+0x16a>
			if (d > 2) {
    295a:	cmp	r1, #2
    295c:	bls.n	28c2 <SPIClass::begin()+0x166>
				div = d-2;
    295e:	subs	r1, #2
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    2960:	lsrs	r4, r1, #1
    2962:	lsls	r2, r4, #8
    2964:	orr.w	r2, r2, r4, lsl #16
    2968:	orrs	r2, r1
    296a:	b.n	28c4 <SPIClass::begin()+0x168>
    296c:	.word	0x400fc000
    2970:	.word	0xe3ffffcf
    2974:	.word	0x08000010
    2978:	.word	0x20000ebc
    297c:	.word	0x003d0900
    2980:	.word	0x20000c28
    2984:	.word	0x003d08ff
    2988:	.word	0x431bde83
    298c:	.word	0x007f7fff

00002990 <SPIClass::transfer(void const*, void*, unsigned int)>:
	if (count == 0) return;
    2990:	cbz	r3, 2996 <SPIClass::transfer(void const*, void*, unsigned int)+0x6>
    2992:	b.w	2518 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]>
}
    2996:	bx	lr

00002998 <SPIClass::end()>:
	const SPI_Hardware_t & hardware() { return *(const SPI_Hardware_t *)hardware_addr; }
    2998:	ldr	r3, [r0, #4]
	if (hardware().clock_gate_register & hardware().clock_gate_mask) {
    299a:	ldrd	r1, r2, [r3]
    299e:	ldr	r1, [r1, #0]
    29a0:	tst	r1, r2
    29a2:	bne.n	29a6 <SPIClass::end()+0xe>
    29a4:	bx	lr
void SPIClass::end() {
    29a6:	push	{r4, lr}
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    29a8:	ldr	r2, [r0, #0]
    29aa:	mov	r4, r0
		port().CR = 0;  // turn off the enable
    29ac:	movs	r0, #0
		pinMode(hardware().miso_pin[miso_pin_index], INPUT_DISABLE);
    29ae:	movs	r1, #5
		port().CR = 0;  // turn off the enable
    29b0:	str	r0, [r2, #16]
		pinMode(hardware().miso_pin[miso_pin_index], INPUT_DISABLE);
    29b2:	ldrb	r2, [r4, #16]
    29b4:	add	r3, r2
    29b6:	ldrb	r0, [r3, #16]
    29b8:	bl	bd1c <pinMode>
		pinMode(hardware().mosi_pin[mosi_pin_index], INPUT_DISABLE);
    29bc:	ldrb	r2, [r4, #17]
    29be:	ldr	r3, [r4, #4]
    29c0:	movs	r1, #5
    29c2:	add	r3, r2
    29c4:	ldrb.w	r0, [r3, #36]	; 0x24
    29c8:	bl	bd1c <pinMode>
		pinMode(hardware().sck_pin[sck_pin_index], INPUT_DISABLE);
    29cc:	ldr	r3, [r4, #4]
    29ce:	ldrb	r2, [r4, #18]
    29d0:	movs	r1, #5
    29d2:	add	r3, r2
}
    29d4:	ldmia.w	sp!, {r4, lr}
		pinMode(hardware().sck_pin[sck_pin_index], INPUT_DISABLE);
    29d8:	ldrb.w	r0, [r3, #56]	; 0x38
    29dc:	b.w	bd1c <pinMode>

000029e0 <_GLOBAL__sub_I__ZN8SPIClass5beginEv>:

	}
}
    29e0:	push	{r3, lr}
SPIClass SPI((uintptr_t)&IMXRT_LPSPI4_S, (uintptr_t)&SPIClass::spiclass_lpspi4_hardware);
    29e2:	ldr	r2, [pc, #32]	; (2a04 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x24>)
    29e4:	ldr	r1, [pc, #32]	; (2a08 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x28>)
    29e6:	ldr	r0, [pc, #36]	; (2a0c <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x2c>)
    29e8:	bl	2730 <SPIClass::SPIClass(unsigned int, unsigned int)>
SPIClass SPI1((uintptr_t)&IMXRT_LPSPI3_S, (uintptr_t)&SPIClass::spiclass_lpspi3_hardware);
    29ec:	ldr	r2, [pc, #32]	; (2a10 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x30>)
    29ee:	ldr	r1, [pc, #36]	; (2a14 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x34>)
    29f0:	ldr	r0, [pc, #36]	; (2a18 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x38>)
    29f2:	bl	2730 <SPIClass::SPIClass(unsigned int, unsigned int)>
SPIClass SPI2((uintptr_t)&IMXRT_LPSPI1_S, (uintptr_t)&SPIClass::spiclass_lpspi1_hardware);
    29f6:	ldr	r2, [pc, #36]	; (2a1c <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x3c>)
    29f8:	ldr	r1, [pc, #36]	; (2a20 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x40>)
    29fa:	ldr	r0, [pc, #40]	; (2a24 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x44>)
    29fc:	bl	2730 <SPIClass::SPIClass(unsigned int, unsigned int)>
}
    2a00:	pop	{r3, pc}
    2a02:	nop
    2a04:	.word	0x20000924
    2a08:	.word	0x403a0000
    2a0c:	.word	0x200057d8
    2a10:	.word	0x200008b4
    2a14:	.word	0x4039c000
    2a18:	.word	0x20005828
    2a1c:	.word	0x20000844
    2a20:	.word	0x40394000
    2a24:	.word	0x20005878

00002a28 <SDClass::~SDClass()>:
class SDClass : public FS
    2a28:	bx	lr
    2a2a:	nop

00002a2c <SDClass::dateTime(unsigned short*, unsigned short*)>:
{
    2a2c:	push	{r4, r5, lr}
    2a2e:	sub	sp, #12
    2a30:	mov	r5, r0
    2a32:	mov	r4, r1
        static unsigned long get(void) __attribute__((always_inline)) { return rtc_get(); }
    2a34:	bl	bb4c <rtc_get>
	if (now < 315532800) { // before 1980
    2a38:	ldr	r3, [pc, #112]	; (2aac <SDClass::dateTime(unsigned short*, unsigned short*)+0x80>)
    2a3a:	cmp	r0, r3
    2a3c:	bhi.n	2a48 <SDClass::dateTime(unsigned short*, unsigned short*)+0x1c>
		*date = 0;
    2a3e:	movs	r3, #0
    2a40:	strh	r3, [r5, #0]
		*time = 0;
    2a42:	strh	r3, [r4, #0]
}
    2a44:	add	sp, #12
    2a46:	pop	{r4, r5, pc}
		breakTime(now, datetime);
    2a48:	mov	r1, sp
    2a4a:	bl	c46c <breakTime(unsigned long, DateTimeFields&)>
		*date = FS_DATE(datetime.year + 1900, datetime.mon + 1, datetime.mday);
    2a4e:	ldrb.w	r3, [sp, #5]
    2a52:	ldrb.w	r2, [sp, #6]
    2a56:	adds	r3, #1
    2a58:	ldrb.w	r1, [sp, #4]
  year -= 1980;
    2a5c:	subs	r2, #80	; 0x50
    2a5e:	uxtb	r3, r3
    2a60:	uxth	r2, r2
  return year > 127 || month > 12 || day > 31 ? 0
    2a62:	cmp	r1, #31
    2a64:	it	ls
    2a66:	cmpls	r3, #12
    2a68:	bhi.n	2a6e <SDClass::dateTime(unsigned short*, unsigned short*)+0x42>
    2a6a:	cmp	r2, #127	; 0x7f
    2a6c:	bls.n	2aa0 <SDClass::dateTime(unsigned short*, unsigned short*)+0x74>
                                              : year << 9 | month << 5 | day;
    2a6e:	movs	r1, #0
		*time = FS_TIME(datetime.hour, datetime.min, datetime.sec);
    2a70:	ldrb.w	r2, [sp, #2]
    2a74:	ldrb.w	r3, [sp, #1]
		*date = FS_DATE(datetime.year + 1900, datetime.mon + 1, datetime.mday);
    2a78:	strh	r1, [r5, #0]
  return hour > 23 || minute > 59 || second > 59
    2a7a:	cmp	r2, #23
    2a7c:	it	ls
    2a7e:	cmpls	r3, #59	; 0x3b
		*time = FS_TIME(datetime.hour, datetime.min, datetime.sec);
    2a80:	ldrb.w	r1, [sp]
    2a84:	bhi.n	2a8a <SDClass::dateTime(unsigned short*, unsigned short*)+0x5e>
    2a86:	cmp	r1, #59	; 0x3b
    2a88:	bls.n	2a92 <SDClass::dateTime(unsigned short*, unsigned short*)+0x66>
             : hour << 11 | minute << 5 | second >> 1;
    2a8a:	movs	r3, #0
    2a8c:	strh	r3, [r4, #0]
}
    2a8e:	add	sp, #12
    2a90:	pop	{r4, r5, pc}
    2a92:	lsls	r3, r3, #5
    2a94:	orr.w	r3, r3, r2, lsl #11
    2a98:	orr.w	r3, r3, r1, lsr #1
    2a9c:	uxth	r3, r3
    2a9e:	b.n	2a8c <SDClass::dateTime(unsigned short*, unsigned short*)+0x60>
                                              : year << 9 | month << 5 | day;
    2aa0:	orr.w	r1, r1, r3, lsl #5
    2aa4:	orr.w	r1, r1, r2, lsl #9
    2aa8:	uxth	r1, r1
    2aaa:	b.n	2a70 <SDClass::dateTime(unsigned short*, unsigned short*)+0x44>
    2aac:	.word	0x12cea5ff

00002ab0 <SDClass::open(char const*, unsigned char)>:
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
    2ab0:	cmp	r3, #1
	File open(const char *filepath, uint8_t mode = FILE_READ) {
    2ab2:	push	{r4, r5, r6, r7, lr}
    2ab4:	mov	r5, r0
    2ab6:	sub	sp, #84	; 0x54
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
    2ab8:	beq.n	2b38 <SDClass::open(char const*, unsigned char)+0x88>
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
    2aba:	cmp	r3, #2
    2abc:	movw	r0, #514	; 0x202
		SDFAT_FILE file = sdfs.open(filepath, flags);
    2ac0:	add.w	r1, r1, #4
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
    2ac4:	ite	eq
    2ac6:	moveq	r3, r0
    2ac8:	movne	r3, #0
		SDFAT_FILE file = sdfs.open(filepath, flags);
    2aca:	mov	r0, sp
    2acc:	bl	7a80 <FsVolume::open(char const*, int)>
    2ad0:	ldr	r3, [sp, #72]	; 0x48
    2ad2:	cmp	r3, #0
    2ad4:	beq.n	2b4a <SDClass::open(char const*, unsigned char)+0x9a>
		if (file) return File(new SDFile(file));
    2ad6:	movs	r0, #92	; 0x5c
class FileImpl {
    2ad8:	movs	r6, #0
    2ada:	bl	d144 <operator new(unsigned int)>
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
    2ade:	ldr	r3, [pc, #132]	; (2b64 <SDClass::open(char const*, unsigned char)+0xb4>)
    2ae0:	add	r7, sp, #16
		if (file) return File(new SDFile(file));
    2ae2:	mov	r4, r0
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
    2ae4:	strd	r3, r6, [r0]
class Print
    2ae8:	ldrb.w	r3, [sp, #4]
    2aec:	mov	r1, r7
    2aee:	adds	r0, #24
    2af0:	strb.w	r3, [r0, #-12]
class Stream : public Print
    2af4:	ldr	r3, [pc, #112]	; (2b68 <SDClass::open(char const*, unsigned char)+0xb8>)
    2af6:	str.w	r3, [r0, #-16]
    2afa:	ldr	r3, [sp, #8]
    2afc:	str.w	r3, [r0, #-8]
    2b00:	ldrb.w	r3, [sp, #12]
    2b04:	strb.w	r3, [r0, #-4]
    2b08:	bl	77a4 <FsBaseFile::FsBaseFile(FsBaseFile const&)>
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    2b0c:	ldr	r3, [pc, #92]	; (2b6c <SDClass::open(char const*, unsigned char)+0xbc>)
	constexpr Stream() : _timeout(1000), read_error(0) {}
    2b0e:	mov.w	r2, #1000	; 0x3e8
    2b12:	str	r6, [r4, #88]	; 0x58
    2b14:	str	r3, [r4, #8]
	File(FileImpl *file) {
    2b16:	ldr	r3, [pc, #88]	; (2b70 <SDClass::open(char const*, unsigned char)+0xc0>)
	constexpr Print() : write_error(0) {}
    2b18:	strb	r6, [r5, #4]
    2b1a:	str	r3, [r5, #0]
		if (f) f->refcount++;
    2b1c:	ldr	r3, [r4, #4]
    2b1e:	strb	r6, [r5, #12]
    2b20:	adds	r3, #1
    2b22:	str	r2, [r5, #8]
		f = file;
    2b24:	str	r4, [r5, #16]
		if (f) f->refcount++;
    2b26:	str	r3, [r4, #4]
    2b28:	ldr	r3, [pc, #72]	; (2b74 <SDClass::open(char const*, unsigned char)+0xc4>)
  ~FsBaseFile() { close(); }
    2b2a:	mov	r0, r7
    2b2c:	str	r3, [sp, #0]
    2b2e:	bl	7828 <FsBaseFile::close()>
		return File();
	}
    2b32:	mov	r0, r5
    2b34:	add	sp, #84	; 0x54
    2b36:	pop	{r4, r5, r6, r7, pc}
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
    2b38:	movw	r3, #16898	; 0x4202
		SDFAT_FILE file = sdfs.open(filepath, flags);
    2b3c:	adds	r1, #4
    2b3e:	mov	r0, sp
    2b40:	bl	7a80 <FsVolume::open(char const*, int)>
  bool isOpen() const { return m_fFile || m_xFile; }
    2b44:	ldr	r3, [sp, #72]	; 0x48
    2b46:	cmp	r3, #0
    2b48:	bne.n	2ad6 <SDClass::open(char const*, unsigned char)+0x26>
    2b4a:	ldr	r3, [sp, #76]	; 0x4c
    2b4c:	cmp	r3, #0
    2b4e:	bne.n	2ad6 <SDClass::open(char const*, unsigned char)+0x26>
    2b50:	mov.w	r1, #1000	; 0x3e8
	constexpr File() : f(nullptr) { }
    2b54:	ldr	r2, [pc, #24]	; (2b70 <SDClass::open(char const*, unsigned char)+0xc0>)
    2b56:	add	r7, sp, #16
    2b58:	strb	r3, [r5, #4]
    2b5a:	str	r1, [r5, #8]
    2b5c:	strb	r3, [r5, #12]
    2b5e:	str	r2, [r5, #0]
    2b60:	str	r3, [r5, #16]
    2b62:	b.n	2b28 <SDClass::open(char const*, unsigned char)+0x78>
    2b64:	.word	0x20000ae8
    2b68:	.word	0x20000b44
    2b6c:	.word	0x20000ab8
    2b70:	.word	0x20000a8c
    2b74:	.word	0x2000099c

00002b78 <SDClass::rmdir(char const*)>:
		return sdfs.rename(oldfilepath, newfilepath);
	}
	bool remove(const char *filepath) {
		return sdfs.remove(filepath);
	}
	bool rmdir(const char *filepath) {
    2b78:	push	{r4, lr}
   * The subdirectory file will be removed only if it is empty.
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char* path) {
    return m_fVol ? m_fVol->rmdir(path) : m_xVol ? m_xVol->rmdir(path) : false;
    2b7a:	ldr.w	r4, [r0, #1156]	; 0x484
    2b7e:	sub	sp, #56	; 0x38
    2b80:	mov	r2, r1
    2b82:	cbz	r4, 2b96 <SDClass::rmdir(char const*)+0x1e>
    2b84:	movs	r3, #0
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char* path) {
    FatFile sub;
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    2b86:	mov	r1, r4
    2b88:	mov	r0, sp
    2b8a:	str	r3, [sp, #0]
    2b8c:	bl	60d0 <FatFile::open(FatVolume*, char const*, int)>
    2b90:	cbnz	r0, 2bb4 <SDClass::rmdir(char const*)+0x3c>
		return sdfs.rmdir(filepath);
	}
    2b92:	add	sp, #56	; 0x38
    2b94:	pop	{r4, pc}
    2b96:	ldr.w	r1, [r0, #1160]	; 0x488
    2b9a:	cbz	r1, 2bae <SDClass::rmdir(char const*)+0x36>
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char* path) {
    ExFatFile sub;
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    2b9c:	mov	r3, r4
    2b9e:	mov	r0, sp
    2ba0:	str	r4, [sp, #48]	; 0x30
    2ba2:	bl	4484 <ExFatFile::open(ExFatVolume*, char const*, int)>
    2ba6:	cbnz	r0, 2bbe <SDClass::rmdir(char const*)+0x46>
    2ba8:	movs	r0, #0
    2baa:	add	sp, #56	; 0x38
    2bac:	pop	{r4, pc}
    2bae:	mov	r0, r1
    2bb0:	add	sp, #56	; 0x38
    2bb2:	pop	{r4, pc}
    2bb4:	mov	r0, sp
    2bb6:	bl	6570 <FatFile::rmdir()>
    2bba:	add	sp, #56	; 0x38
    2bbc:	pop	{r4, pc}
    2bbe:	mov	r0, sp
    2bc0:	bl	4b2c <ExFatFile::rmdir()>
    2bc4:	cmp	r0, #0
    2bc6:	beq.n	2ba8 <SDClass::rmdir(char const*)+0x30>
    2bc8:	b.n	2b92 <SDClass::rmdir(char const*)+0x1a>
    2bca:	nop

00002bcc <SDClass::rename(char const*, char const*)>:
	bool rename(const char *oldfilepath, const char *newfilepath) {
    2bcc:	push	{r4, r5, r6, lr}
    return m_fVol   ? m_fVol->rename(oldPath, newPath)
    2bce:	ldr.w	r5, [r0, #1156]	; 0x484
    2bd2:	sub	sp, #56	; 0x38
    2bd4:	mov	r6, r2
    2bd6:	cbz	r5, 2bf0 <SDClass::rename(char const*, char const*)+0x24>
#endif  // ENABLE_ARDUINO_STRING

 private:
  friend FatFile;
  static FatVolume* cwv() { return m_cwv; }
  FatFile* vwd() { return &m_vwd; }
    2bd8:	addw	r5, r5, #1092	; 0x444
    2bdc:	movs	r3, #0
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
    2bde:	mov	r2, r1
    2be0:	mov	r0, sp
    2be2:	mov	r1, r5
    2be4:	str	r3, [sp, #0]
    2be6:	bl	5fd8 <FatFile::open(FatFile*, char const*, int)>
    2bea:	cbnz	r0, 2c12 <SDClass::rename(char const*, char const*)+0x46>
	}
    2bec:	add	sp, #56	; 0x38
    2bee:	pop	{r4, r5, r6, pc}
    2bf0:	ldr.w	r0, [r0, #1160]	; 0x488
           : m_xVol ? m_xVol->rename(oldPath, newPath)
    2bf4:	cmp	r0, #0
    2bf6:	beq.n	2bec <SDClass::rename(char const*, char const*)+0x20>
#endif  // ENABLE_ARDUINO_STRING

 private:
  friend ExFatFile;
  static ExFatVolume* cwv() { return m_cwv; }
  ExFatFile* vwd() { return &m_vwd; }
    2bf8:	add.w	r4, r0, #1096	; 0x448
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
    2bfc:	mov	r2, r1
    2bfe:	mov	r3, r5
    2c00:	mov	r0, sp
    2c02:	mov	r1, r4
    2c04:	str	r5, [sp, #48]	; 0x30
    2c06:	bl	4390 <ExFatFile::open(ExFatFile*, char const*, int)>
    2c0a:	cbnz	r0, 2c20 <SDClass::rename(char const*, char const*)+0x54>
    2c0c:	movs	r0, #0
    2c0e:	add	sp, #56	; 0x38
    2c10:	pop	{r4, r5, r6, pc}
    2c12:	mov	r2, r6
    2c14:	mov	r1, r5
    2c16:	mov	r0, sp
    2c18:	bl	6384 <FatFile::rename(FatFile*, char const*)>
    2c1c:	add	sp, #56	; 0x38
    2c1e:	pop	{r4, r5, r6, pc}
    2c20:	mov	r2, r6
    2c22:	mov	r1, r4
    2c24:	mov	r0, sp
    2c26:	bl	4dd4 <ExFatFile::rename(ExFatFile*, char const*)>
    2c2a:	cmp	r0, #0
    2c2c:	beq.n	2c0c <SDClass::rename(char const*, char const*)+0x40>
    2c2e:	b.n	2bec <SDClass::rename(char const*, char const*)+0x20>

00002c30 <SDClass::remove(char const*)>:
	bool remove(const char *filepath) {
    2c30:	push	{r4, lr}
    return m_fVol   ? m_fVol->remove(path)
    2c32:	ldr.w	r4, [r0, #1156]	; 0x484
    2c36:	sub	sp, #56	; 0x38
    2c38:	mov	r2, r1
    2c3a:	cbz	r4, 2c50 <SDClass::remove(char const*)+0x20>
    2c3c:	movs	r0, #0
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    2c3e:	movs	r3, #1
    2c40:	mov	r1, r4
    2c42:	str	r0, [sp, #0]
    2c44:	mov	r0, sp
    2c46:	bl	60d0 <FatFile::open(FatVolume*, char const*, int)>
    2c4a:	cbnz	r0, 2c6e <SDClass::remove(char const*)+0x3e>
	}
    2c4c:	add	sp, #56	; 0x38
    2c4e:	pop	{r4, pc}
    2c50:	ldr.w	r1, [r0, #1160]	; 0x488
           : m_xVol ? m_xVol->remove(path)
    2c54:	cbz	r1, 2c68 <SDClass::remove(char const*)+0x38>
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    2c56:	movs	r3, #1
    2c58:	mov	r0, sp
    2c5a:	str	r4, [sp, #48]	; 0x30
    2c5c:	bl	4484 <ExFatFile::open(ExFatVolume*, char const*, int)>
    2c60:	cbnz	r0, 2c78 <SDClass::remove(char const*)+0x48>
    2c62:	movs	r0, #0
    2c64:	add	sp, #56	; 0x38
    2c66:	pop	{r4, pc}
    2c68:	mov	r0, r1
    2c6a:	add	sp, #56	; 0x38
    2c6c:	pop	{r4, pc}
    2c6e:	mov	r0, sp
    2c70:	bl	7694 <FatFile::remove()>
    2c74:	add	sp, #56	; 0x38
    2c76:	pop	{r4, pc}
    2c78:	mov	r0, sp
    2c7a:	bl	4a78 <ExFatFile::remove()>
    2c7e:	cmp	r0, #0
    2c80:	beq.n	2c62 <SDClass::remove(char const*)+0x32>
    2c82:	b.n	2c4c <SDClass::remove(char const*)+0x1c>

00002c84 <SDClass::mkdir(char const*)>:
	bool mkdir(const char *filepath) {
    2c84:	push	{r4, r5, lr}
    return m_fVol   ? m_fVol->mkdir(path, pFlag)
    2c86:	ldr.w	r4, [r0, #1156]	; 0x484
    2c8a:	sub	sp, #60	; 0x3c
    2c8c:	mov	r2, r1
    2c8e:	cbz	r4, 2ca4 <SDClass::mkdir(char const*)+0x20>
    2c90:	movs	r5, #0
    return sub.mkdir(vwd(), path, pFlag);
    2c92:	movs	r3, #1
    2c94:	addw	r1, r4, #1092	; 0x444
    2c98:	mov	r0, sp
    2c9a:	str	r5, [sp, #0]
    2c9c:	bl	5ef4 <FatFile::mkdir(FatFile*, char const*, bool)>
	}
    2ca0:	add	sp, #60	; 0x3c
    2ca2:	pop	{r4, r5, pc}
    2ca4:	ldr.w	r0, [r0, #1160]	; 0x488
           : m_xVol ? m_xVol->mkdir(path, pFlag)
    2ca8:	cmp	r0, #0
    2caa:	beq.n	2ca0 <SDClass::mkdir(char const*)+0x1c>
    return sub.mkdir(vwd(), path, pFlag);
    2cac:	add.w	r1, r0, #1096	; 0x448
    2cb0:	movs	r3, #1
    2cb2:	mov	r0, sp
    2cb4:	str	r4, [sp, #48]	; 0x30
    2cb6:	bl	4ed8 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
    2cba:	add	sp, #60	; 0x3c
    2cbc:	pop	{r4, r5, pc}
    2cbe:	nop

00002cc0 <SDClass::exists(char const*)>:
	bool exists(const char *filepath) {
    2cc0:	push	{r4, lr}
    return m_fVol   ? m_fVol->exists(path)
    2cc2:	ldr.w	r4, [r0, #1156]	; 0x484
    2cc6:	sub	sp, #56	; 0x38
    2cc8:	mov	r2, r1
    2cca:	cbz	r4, 2cdc <SDClass::exists(char const*)+0x1c>
    2ccc:	movs	r3, #0
    return tmp.open(this, path, O_RDONLY);
    2cce:	mov	r1, r4
    2cd0:	mov	r0, sp
    2cd2:	str	r3, [sp, #0]
    2cd4:	bl	60d0 <FatFile::open(FatVolume*, char const*, int)>
	}
    2cd8:	add	sp, #56	; 0x38
    2cda:	pop	{r4, pc}
    2cdc:	ldr.w	r1, [r0, #1160]	; 0x488
           : m_xVol ? m_xVol->exists(path)
    2ce0:	cbz	r1, 2cf0 <SDClass::exists(char const*)+0x30>
    return tmp.open(this, path, O_RDONLY);
    2ce2:	mov	r3, r4
    2ce4:	mov	r0, sp
    2ce6:	str	r4, [sp, #48]	; 0x30
    2ce8:	bl	4484 <ExFatFile::open(ExFatVolume*, char const*, int)>
    2cec:	add	sp, #56	; 0x38
    2cee:	pop	{r4, pc}
    2cf0:	mov	r0, r1
    2cf2:	add	sp, #56	; 0x38
    2cf4:	pop	{r4, pc}
    2cf6:	nop

00002cf8 <SDClass::usedSize()>:
	uint64_t usedSize() {
    2cf8:	push	{r3, r4, r5, r6, r7, lr}
    2cfa:	mov	r5, r0
		if (!cardPreviouslyPresent) return (uint64_t)0;
    2cfc:	ldrb.w	r0, [r0, #1228]	; 0x4cc
    2d00:	cbnz	r0, 2d06 <SDClass::usedSize()+0xe>
    2d02:	mov	r1, r0
		return (uint64_t)(sdfs.clusterCount() - sdfs.freeClusterCount())
		  * (uint64_t)sdfs.bytesPerCluster();
	}
    2d04:	pop	{r3, r4, r5, r6, r7, pc}
    return m_fVol   ? m_fVol->clusterCount()
    2d06:	ldr.w	r3, [r5, #1156]	; 0x484
    2d0a:	cmp	r3, #0
    2d0c:	beq.n	2da6 <SDClass::usedSize()+0xae>
  /** Clear the cache and returns a pointer to the cache.  Not for normal apps.
   * \return A pointer to the cache buffer or zero if an error occurs.
   */
  uint8_t* cacheClear() { return m_cache.clear(); }
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const { return m_lastCluster - 1; }
    2d0e:	ldr	r4, [r3, #28]
    2d10:	ldr.w	r0, [r5, #1164]	; 0x48c
    2d14:	subs	r4, #1
    }
    return rtn;
  }
  //----------------------------------------------------------------------------
  /** \return true if can be in dedicated SPI state */
  bool hasDedicatedSpi() { return m_card ? m_card->hasDedicatedSpi() : false; }
    2d16:	cmp	r0, #0
    2d18:	beq.n	2dd2 <SDClass::usedSize()+0xda>
    2d1a:	ldr	r3, [r0, #0]
    2d1c:	ldr	r3, [r3, #56]	; 0x38
    2d1e:	blx	r3
    2d20:	cbz	r0, 2d5c <SDClass::usedSize()+0x64>
    2d22:	ldr.w	r0, [r5, #1164]	; 0x48c
    }
    errorPrint(pr);
  }
  //----------------------------------------------------------------------------
  /** \return true if in dedicated SPI state. */
  bool isDedicatedSpi() { return m_card ? m_card->isDedicatedSpi() : false; }
    2d26:	cbz	r0, 2d88 <SDClass::usedSize()+0x90>
    2d28:	ldr	r3, [r0, #0]
    2d2a:	ldr	r3, [r3, #60]	; 0x3c
    2d2c:	blx	r3
    2d2e:	cbnz	r0, 2d5c <SDClass::usedSize()+0x64>
    2d30:	ldr.w	r0, [r5, #1164]	; 0x48c
  /** Set SPI sharing state
   * \param[in] value desired state.
   * \return true for success else false;
   */
  bool setDedicatedSpi(bool value) {
    if (m_card) {
    2d34:	cbz	r0, 2d88 <SDClass::usedSize()+0x90>
      return m_card->setDedicatedSpi(value);
    2d36:	ldr	r3, [r0, #0]
    2d38:	movs	r1, #1
    2d3a:	ldr	r3, [r3, #64]	; 0x40
    2d3c:	blx	r3
    if (switchSpi && !setDedicatedSpi(true)) {
    2d3e:	mov	r7, r0
    2d40:	cbz	r0, 2d88 <SDClass::usedSize()+0x90>
    return m_fVol   ? m_fVol->freeClusterCount()
    2d42:	ldr.w	r0, [r5, #1156]	; 0x484
    2d46:	cbnz	r0, 2da0 <SDClass::usedSize()+0xa8>
    2d48:	ldr.w	r3, [r5, #1160]	; 0x488
           : m_xVol ? m_xVol->freeClusterCount()
    2d4c:	cbnz	r3, 2d6c <SDClass::usedSize()+0x74>
    2d4e:	ldr.w	r0, [r5, #1164]	; 0x48c
    if (m_card) {
    2d52:	cmp	r0, #0
    2d54:	beq.n	2de2 <SDClass::usedSize()+0xea>
    uint32_t rtn = Vol::freeClusterCount();
    2d56:	mov.w	r6, #4294967295
    2d5a:	b.n	2d7c <SDClass::usedSize()+0x84>
    return m_fVol   ? m_fVol->freeClusterCount()
    2d5c:	ldr.w	r0, [r5, #1156]	; 0x484
    2d60:	cbnz	r0, 2d9e <SDClass::usedSize()+0xa6>
    2d62:	ldr.w	r3, [r5, #1160]	; 0x488
           : m_xVol ? m_xVol->freeClusterCount()
    2d66:	cmp	r3, #0
    2d68:	beq.n	2de2 <SDClass::usedSize()+0xea>
    bool switchSpi = hasDedicatedSpi() && !isDedicatedSpi();
    2d6a:	mov	r7, r0
    2d6c:	mov	r0, r3
    2d6e:	bl	4870 <ExFatPartition::freeClusterCount()>
    uint32_t rtn = Vol::freeClusterCount();
    2d72:	mov	r6, r0
    if (switchSpi && !setDedicatedSpi(false)) {
    2d74:	cbz	r7, 2d86 <SDClass::usedSize()+0x8e>
    2d76:	ldr.w	r0, [r5, #1164]	; 0x48c
    if (m_card) {
    2d7a:	cbz	r0, 2d88 <SDClass::usedSize()+0x90>
      return m_card->setDedicatedSpi(value);
    2d7c:	ldr	r3, [r0, #0]
    2d7e:	movs	r1, #0
    2d80:	ldr	r3, [r3, #64]	; 0x40
    2d82:	blx	r3
    if (switchSpi && !setDedicatedSpi(false)) {
    2d84:	cbz	r0, 2d88 <SDClass::usedSize()+0x90>
		return (uint64_t)(sdfs.clusterCount() - sdfs.freeClusterCount())
    2d86:	subs	r4, r4, r6
    return m_fVol   ? m_fVol->bytesPerCluster()
    2d88:	ldr.w	r3, [r5, #1156]	; 0x484
    2d8c:	cbz	r3, 2dc2 <SDClass::usedSize()+0xca>
    return m_bytesPerSector << m_sectorsPerClusterShift;
    2d8e:	ldrb	r3, [r3, #6]
    2d90:	mov.w	r1, #512	; 0x200
    2d94:	lsls	r1, r3
		  * (uint64_t)sdfs.bytesPerCluster();
    2d96:	uxth	r1, r1
    2d98:	umull	r0, r1, r1, r4
	}
    2d9c:	pop	{r3, r4, r5, r6, r7, pc}
    bool switchSpi = hasDedicatedSpi() && !isDedicatedSpi();
    2d9e:	movs	r7, #0
    return m_fVol   ? m_fVol->freeClusterCount()
    2da0:	bl	6d90 <FatPartition::freeClusterCount()>
    2da4:	b.n	2d72 <SDClass::usedSize()+0x7a>
    2da6:	ldr.w	r3, [r5, #1160]	; 0x488
  uint32_t clusterCount() const {
    2daa:	ldr.w	r0, [r5, #1164]	; 0x48c
           : m_xVol ? m_xVol->clusterCount()
    2dae:	cbz	r3, 2ddc <SDClass::usedSize()+0xe4>
  /** Clear the cache and returns a pointer to the cache.  Not for normal apps.
   * \return A pointer to the cache buffer or zero if an error occurs.
   */
  uint8_t* cacheClear() { return m_dataCache.clear(); }
  /** \return the cluster count for the partition. */
  uint32_t clusterCount() const { return m_clusterCount; }
    2db0:	ldr.w	r4, [r3, #1072]	; 0x430
  bool hasDedicatedSpi() { return m_card ? m_card->hasDedicatedSpi() : false; }
    2db4:	cmp	r0, #0
    2db6:	bne.n	2d1a <SDClass::usedSize()+0x22>
           : m_xVol ? m_xVol->freeClusterCount()
    2db8:	mov	r0, r3
    2dba:	bl	4870 <ExFatPartition::freeClusterCount()>
    2dbe:	mov	r6, r0
    2dc0:	b.n	2d86 <SDClass::usedSize()+0x8e>
    2dc2:	ldr.w	r3, [r5, #1160]	; 0x488
           : m_xVol ? m_xVol->bytesPerCluster()
    2dc6:	cbz	r3, 2de2 <SDClass::usedSize()+0xea>
		  * (uint64_t)sdfs.bytesPerCluster();
    2dc8:	ldr.w	r1, [r3, #1084]	; 0x43c
    2dcc:	umull	r0, r1, r1, r4
	}
    2dd0:	pop	{r3, r4, r5, r6, r7, pc}
    return m_fVol   ? m_fVol->freeClusterCount()
    2dd2:	mov	r0, r3
    2dd4:	bl	6d90 <FatPartition::freeClusterCount()>
    2dd8:	mov	r6, r0
    2dda:	b.n	2d86 <SDClass::usedSize()+0x8e>
    2ddc:	cbz	r0, 2de2 <SDClass::usedSize()+0xea>
           : m_xVol ? m_xVol->clusterCount()
    2dde:	mov	r4, r3
    2de0:	b.n	2d1a <SDClass::usedSize()+0x22>
  uint32_t bytesPerCluster() const {
    2de2:	movs	r0, #0
    2de4:	mov	r1, r0
    2de6:	b.n	2d04 <SDClass::usedSize()+0xc>

00002de8 <SDClass::totalSize()>:
	uint64_t totalSize() {
		if (!cardPreviouslyPresent) return (uint64_t)0;
    2de8:	ldrb.w	r3, [r0, #1228]	; 0x4cc
    2dec:	cbz	r3, 2e08 <SDClass::totalSize()+0x20>
    return m_fVol   ? m_fVol->clusterCount()
    2dee:	ldr.w	r3, [r0, #1156]	; 0x484
    2df2:	cbz	r3, 2e0e <SDClass::totalSize()+0x26>
    2df4:	ldrb	r2, [r3, #6]
    2df6:	mov.w	r0, #512	; 0x200
  uint32_t clusterCount() const { return m_lastCluster - 1; }
    2dfa:	ldr	r1, [r3, #28]
    return m_bytesPerSector << m_sectorsPerClusterShift;
    2dfc:	lsls	r0, r2
  uint32_t clusterCount() const { return m_lastCluster - 1; }
    2dfe:	subs	r1, #1
		return (uint64_t)sdfs.clusterCount() * (uint64_t)sdfs.bytesPerCluster();
    2e00:	uxth	r0, r0
    2e02:	umull	r0, r1, r0, r1
    2e06:	bx	lr
		if (!cardPreviouslyPresent) return (uint64_t)0;
    2e08:	mov	r0, r3
    2e0a:	mov	r1, r0
	}
    2e0c:	bx	lr
    2e0e:	ldr.w	r0, [r0, #1160]	; 0x488
           : m_xVol ? m_xVol->clusterCount()
    2e12:	cmp	r0, #0
    2e14:	beq.n	2e0a <SDClass::totalSize()+0x22>
		return (uint64_t)sdfs.clusterCount() * (uint64_t)sdfs.bytesPerCluster();
    2e16:	ldr.w	r1, [r0, #1084]	; 0x43c
    2e1a:	ldr.w	r0, [r0, #1072]	; 0x430
    2e1e:	umull	r0, r1, r1, r0
    2e22:	bx	lr

00002e24 <SDClass::format(int, char, Print&)>:
{
    2e24:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  SdCard* card() { return m_card; }
    2e28:	ldr.w	r5, [r0, #1164]	; 0x48c
    2e2c:	sub	sp, #60	; 0x3c
	if (!card) return false; // no SD card
    2e2e:	cbz	r5, 2e44 <SDClass::format(int, char, Print&)+0x20>
    2e30:	mov	r8, r3
	uint32_t sectors = card->sectorCount();
    2e32:	ldr	r3, [r5, #0]
    2e34:	mov	r4, r0
    2e36:	mov	r0, r5
    2e38:	ldr	r3, [r3, #24]
    2e3a:	blx	r3
	if (sectors <= 12288) return false; // card too small
    2e3c:	cmp.w	r0, #12288	; 0x3000
	uint32_t sectors = card->sectorCount();
    2e40:	mov	r6, r0
	if (sectors <= 12288) return false; // card too small
    2e42:	bhi.n	2e4e <SDClass::format(int, char, Print&)+0x2a>
	if (!card) return false; // no SD card
    2e44:	movs	r6, #0
}
    2e46:	mov	r0, r6
    2e48:	add	sp, #60	; 0x3c
    2e4a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint8_t *buf = (uint8_t *)malloc(512);
    2e4e:	mov.w	r0, #512	; 0x200
    2e52:	bl	d2dc <malloc>
	if (!buf) return false; // unable to allocate memory
    2e56:	mov	r7, r0
    2e58:	cmp	r0, #0
    2e5a:	beq.n	2e44 <SDClass::format(int, char, Print&)+0x20>
		ret = exFatFormatter.format(card, buf, &pr);
    2e5c:	add.w	r9, sp, #12
	if (sectors > 67108864) {
    2e60:	cmp.w	r6, #67108864	; 0x4000000
		ret = exFatFormatter.format(card, buf, &pr);
    2e64:	mov	r2, r0
    2e66:	mov	r3, r8
    2e68:	mov	r1, r5
    2e6a:	mov	r0, r9
	if (sectors > 67108864) {
    2e6c:	bls.n	2ece <SDClass::format(int, char, Print&)+0xaa>
		ret = exFatFormatter.format(card, buf, &pr);
    2e6e:	bl	3538 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)>
    2e72:	mov	r6, r0
	free(buf);
    2e74:	mov	r0, r7
    2e76:	bl	d2ec <free>
	if (ret) {
    2e7a:	cmp	r6, #0
    2e7c:	beq.n	2e44 <SDClass::format(int, char, Print&)+0x20>
		card->syncDevice();
    2e7e:	ldr	r3, [r5, #0]
    2e80:	mov	r0, r5
		sdfs.restart(); // TODO: is sdfs.volumeBegin() enough??
    2e82:	adds	r7, r4, #4
		card->syncDevice();
    2e84:	ldr	r3, [r3, #28]
    2e86:	blx	r3
    if (spiConfigBackupPin == 255) {
    2e88:	ldrb.w	r3, [r4, #1212]	; 0x4bc
    2e8c:	cmp	r3, #255	; 0xff
    2e8e:	beq.n	2ed6 <SDClass::format(int, char, Print&)+0xb2>
      SdSpiConfig spiConfig(spiConfigBackupPin, spiConfigBackupOptions,
    2e90:	ldr.w	r3, [r4, #1216]	; 0x4c0
   *
   * \param[in] config SPI configuration.
   * \return generic card pointer.
   */
  SdCard* newCard(SdSpiConfig config) {
    m_spiCard.begin(config);
    2e94:	addw	r5, r4, #1180	; 0x49c
    2e98:	str	r3, [sp, #16]
    2e9a:	mov	r0, r5
    2e9c:	ldr.w	r3, [r4, #1220]	; 0x4c4
  bool cardBegin(SdSpiConfig spiConfig) {
    2ea0:	str	r3, [sp, #20]
    2ea2:	ldrh.w	r3, [r4, #1212]	; 0x4bc
    2ea6:	strh.w	r3, [sp, #12]
    2eaa:	ldmia.w	r9, {r1, r2, r3}
    2eae:	bl	8a44 <DedicatedSpiCard::begin(SdSpiConfig)>
    return m_card && !m_card->errorCode();
    2eb2:	ldrb.w	r2, [r4, #1198]	; 0x4ae
    m_card = m_cardFactory.newCard(spiConfig);
    2eb6:	str.w	r5, [r4, #1164]	; 0x48c
    return m_card && !m_card->errorCode();
    2eba:	cmp	r2, #0
    2ebc:	bne.n	2e46 <SDClass::format(int, char, Print&)+0x22>
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    2ebe:	movs	r3, #1
    2ec0:	str	r2, [sp, #0]
    2ec2:	mov	r1, r5
    2ec4:	mov	r0, r7
    2ec6:	mov	r2, r3
    2ec8:	bl	796c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)>
    2ecc:	b.n	2e46 <SDClass::format(int, char, Print&)+0x22>
		ret = fatFormatter.format(card, buf, &pr);
    2ece:	bl	58f0 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)>
    2ed2:	mov	r6, r0
    2ed4:	b.n	2e74 <SDClass::format(int, char, Print&)+0x50>
   * \param[in] config SDIO configuration.
   * \return generic card pointer or nullptr if SDIO is not supported.
   */
  SdCard* newCard(SdioConfig config) {
#if HAS_SDIO_CLASS
    m_sdioCard.begin(config);
    2ed6:	add.w	r5, r4, #1168	; 0x490
    2eda:	ldrb.w	r1, [r4, #1224]	; 0x4c8
    2ede:	mov	r0, r5
    2ee0:	bl	94b4 <SdioCard::begin(SdioConfig)>
    return m_card && !m_card->errorCode();
    2ee4:	mov	r0, r5
    m_card = m_cardFactory.newCard(sdioConfig);
    2ee6:	str.w	r5, [r4, #1164]	; 0x48c
    return m_card && !m_card->errorCode();
    2eea:	bl	8b98 <SdioCard::errorCode() const>
    2eee:	mov	r2, r0
    2ef0:	cmp	r0, #0
    2ef2:	bne.n	2e46 <SDClass::format(int, char, Print&)+0x22>
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    2ef4:	movs	r3, #1
    2ef6:	ldr.w	r1, [r4, #1164]	; 0x48c
    2efa:	mov	r0, r7
    2efc:	str	r2, [sp, #0]
    2efe:	mov	r2, r3
    2f00:	bl	796c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)>
    2f04:	b.n	2e46 <SDClass::format(int, char, Print&)+0x22>
    2f06:	nop

00002f08 <SDClass::mediaPresent()>:
{
    2f08:	push	{r4, r5, r6, r7, lr}
  SdCard* card() { return m_card; }
    2f0a:	ldr.w	r6, [r0, #1164]	; 0x48c
    2f0e:	sub	sp, #28
    2f10:	mov	r4, r0
	if (card) {
    2f12:	cmp	r6, #0
    2f14:	beq.n	2f9e <SDClass::mediaPresent()+0x96>
		if (cardPreviouslyPresent) {
    2f16:	ldrb.w	r5, [r0, #1228]	; 0x4cc
			if (csPin_ == BUILTIN_SDCARD) {
    2f1a:	ldrb.w	r3, [r0, #1229]	; 0x4cd
		if (cardPreviouslyPresent) {
    2f1e:	cbz	r5, 2f42 <SDClass::mediaPresent()+0x3a>
			if (csPin_ == BUILTIN_SDCARD) {
    2f20:	cmp	r3, #254	; 0xfe
    2f22:	beq.n	2ff2 <SDClass::mediaPresent()+0xea>
				if (cdPin_ < NUM_DIGITAL_PINS) ret = digitalRead(cdPin_);
    2f24:	ldrb.w	r0, [r4, #1230]	; 0x4ce
    2f28:	cmp	r0, #54	; 0x36
    2f2a:	bls.n	2faa <SDClass::mediaPresent()+0xa2>
					ret = card->readCID(&cid);
    2f2c:	ldr	r3, [r6, #0]
    2f2e:	add	r1, sp, #8
    2f30:	mov	r0, r6
    2f32:	ldr	r3, [r3, #68]	; 0x44
    2f34:	blx	r3
    2f36:	mov	r5, r0
}
    2f38:	mov	r0, r5
	cardPreviouslyPresent = ret;
    2f3a:	strb.w	r5, [r4, #1228]	; 0x4cc
}
    2f3e:	add	sp, #28
    2f40:	pop	{r4, r5, r6, r7, pc}
			if (csPin_ == BUILTIN_SDCARD) ret = digitalReadFast(_SD_DAT3);
    2f42:	cmp	r3, #254	; 0xfe
    2f44:	beq.n	2f96 <SDClass::mediaPresent()+0x8e>
				if (cdPin_ < NUM_DIGITAL_PINS) ret = digitalRead(cdPin_);
    2f46:	ldrb.w	r0, [r0, #1230]	; 0x4ce
    2f4a:	cmp	r0, #54	; 0x36
    2f4c:	bls.n	2fe8 <SDClass::mediaPresent()+0xe0>
    if (spiConfigBackupPin == 255) {
    2f4e:	ldrb.w	r3, [r4, #1212]	; 0x4bc
				ret = sdfs.restart();
    2f52:	adds	r7, r4, #4
    2f54:	cmp	r3, #255	; 0xff
    2f56:	beq.n	2fb6 <SDClass::mediaPresent()+0xae>
      SdSpiConfig spiConfig(spiConfigBackupPin, spiConfigBackupOptions,
    2f58:	ldr.w	r3, [r4, #1216]	; 0x4c0
    m_spiCard.begin(config);
    2f5c:	addw	r6, r4, #1180	; 0x49c
    2f60:	ldr.w	r2, [r4, #1220]	; 0x4c4
  bool cardBegin(SdSpiConfig spiConfig) {
    2f64:	str	r3, [sp, #12]
    2f66:	mov	r0, r6
    2f68:	ldrh.w	r3, [r4, #1212]	; 0x4bc
    2f6c:	str	r2, [sp, #16]
    2f6e:	strh.w	r3, [sp, #8]
    2f72:	add	r3, sp, #8
    2f74:	ldmia	r3, {r1, r2, r3}
    2f76:	bl	8a44 <DedicatedSpiCard::begin(SdSpiConfig)>
    return m_card && !m_card->errorCode();
    2f7a:	ldrb.w	r2, [r4, #1198]	; 0x4ae
    m_card = m_cardFactory.newCard(spiConfig);
    2f7e:	str.w	r6, [r4, #1164]	; 0x48c
    return m_card && !m_card->errorCode();
    2f82:	cbnz	r2, 2fa0 <SDClass::mediaPresent()+0x98>
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    2f84:	movs	r3, #1
    2f86:	str	r2, [sp, #0]
    2f88:	mov	r1, r6
    2f8a:	mov	r0, r7
    2f8c:	mov	r2, r3
    2f8e:	bl	796c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)>
    2f92:	mov	r5, r0
    2f94:	b.n	2fa0 <SDClass::mediaPresent()+0x98>
			return (CORE_PIN46_PINREG & CORE_PIN46_BITMASK) ? 1 : 0;
    2f96:	ldr	r3, [pc, #128]	; (3018 <SDClass::mediaPresent()+0x110>)
    2f98:	ldr	r3, [r3, #8]
			if (ret)
    2f9a:	lsls	r3, r3, #14
    2f9c:	bmi.n	2f4e <SDClass::mediaPresent()+0x46>
		ret = false;
    2f9e:	movs	r5, #0
}
    2fa0:	mov	r0, r5
	cardPreviouslyPresent = ret;
    2fa2:	strb.w	r5, [r4, #1228]	; 0x4cc
}
    2fa6:	add	sp, #28
    2fa8:	pop	{r4, r5, r6, r7, pc}
				if (cdPin_ < NUM_DIGITAL_PINS) ret = digitalRead(cdPin_);
    2faa:	bl	bcf8 <digitalRead>
    2fae:	subs	r5, r0, #0
    2fb0:	it	ne
    2fb2:	movne	r5, #1
    2fb4:	b.n	2fa0 <SDClass::mediaPresent()+0x98>
    m_sdioCard.begin(config);
    2fb6:	add.w	r6, r4, #1168	; 0x490
    2fba:	ldrb.w	r1, [r4, #1224]	; 0x4c8
    2fbe:	mov	r0, r6
    2fc0:	bl	94b4 <SdioCard::begin(SdioConfig)>
    return m_card && !m_card->errorCode();
    2fc4:	mov	r0, r6
    m_card = m_cardFactory.newCard(sdioConfig);
    2fc6:	str.w	r6, [r4, #1164]	; 0x48c
    return m_card && !m_card->errorCode();
    2fca:	bl	8b98 <SdioCard::errorCode() const>
    2fce:	mov	r2, r0
    2fd0:	cmp	r0, #0
    2fd2:	bne.n	2fa0 <SDClass::mediaPresent()+0x98>
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    2fd4:	movs	r3, #1
    2fd6:	str	r2, [sp, #0]
    2fd8:	mov	r0, r7
    2fda:	ldr.w	r1, [r4, #1164]	; 0x48c
    2fde:	mov	r2, r3
    2fe0:	bl	796c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)>
    2fe4:	mov	r5, r0
    2fe6:	b.n	2fa0 <SDClass::mediaPresent()+0x98>
				if (cdPin_ < NUM_DIGITAL_PINS) ret = digitalRead(cdPin_);
    2fe8:	bl	bcf8 <digitalRead>
			if (ret)
    2fec:	cmp	r0, #0
    2fee:	bne.n	2f4e <SDClass::mediaPresent()+0x46>
    2ff0:	b.n	2f9e <SDClass::mediaPresent()+0x96>
				s = card->status();
    2ff2:	ldr	r3, [r6, #0]
    2ff4:	mov	r0, r6
    2ff6:	ldr	r3, [r3, #88]	; 0x58
    2ff8:	blx	r3
			if (s == 0xFFFFFFFF) {
    2ffa:	adds	r2, r0, #1
				s = card->status();
    2ffc:	mov	r3, r0
			if (s == 0xFFFFFFFF) {
    2ffe:	beq.n	2f24 <SDClass::mediaPresent()+0x1c>
			} else if (s == 0) {
    3000:	cmp	r0, #0
    3002:	bne.n	2fa0 <SDClass::mediaPresent()+0x98>
				if (csPin_ == BUILTIN_SDCARD) 
    3004:	ldrb.w	r2, [r4, #1229]	; 0x4cd
    3008:	cmp	r2, #254	; 0xfe
    300a:	bne.n	2f9e <SDClass::mediaPresent()+0x96>
					pinMode(_SD_DAT3, INPUT_PULLDOWN);
    300c:	movs	r1, #3
    300e:	movs	r0, #46	; 0x2e
				ret = false;
    3010:	mov	r5, r3
					pinMode(_SD_DAT3, INPUT_PULLDOWN);
    3012:	bl	bd1c <pinMode>
    3016:	b.n	2fa0 <SDClass::mediaPresent()+0x98>
    3018:	.word	0x42008000

0000301c <SDClass::begin(unsigned char)>:
bool SDClass::begin(uint8_t csPin) {
    301c:	push	{r4, r5, r6, r7, lr}
    301e:	mov	r5, r1
    3020:	mov	r4, r0
    3022:	sub	sp, #28
	FsDateTime::setCallback(dateTime);
    3024:	ldr	r0, [pc, #196]	; (30ec <SDClass::begin(unsigned char)+0xd0>)
    3026:	bl	3394 <FsDateTime::setCallback(void (*)(unsigned short*, unsigned short*))>
	if (csPin == BUILTIN_SDCARD) {
    302a:	cmp	r5, #254	; 0xfe
	csPin_ = csPin; // remember which one passed in. 
    302c:	strb.w	r5, [r4, #1229]	; 0x4cd
	if (csPin == BUILTIN_SDCARD) {
    3030:	beq.n	3080 <SDClass::begin(unsigned char)+0x64>
	if (csPin < NUM_DIGITAL_PINS) {
    3032:	cmp	r5, #54	; 0x36
    3034:	bls.n	303c <SDClass::begin(unsigned char)+0x20>
	return false;
    3036:	movs	r0, #0
}
    3038:	add	sp, #28
    303a:	pop	{r4, r5, r6, r7, pc}
    spiConfigBackupOptions = spiConfig.options;
    303c:	movs	r6, #0
    spiConfigBackupClock = spiConfig.maxSck;
    303e:	ldr	r3, [pc, #176]	; (30f0 <SDClass::begin(unsigned char)+0xd4>)
    m_spiCard.begin(config);
    3040:	addw	r7, r4, #1180	; 0x49c
    3044:	strb.w	r5, [sp, #12]
    3048:	str.w	r3, [r4, #1216]	; 0x4c0
    304c:	strb.w	r6, [sp, #13]
    3050:	mov	r0, r7
    spiConfigBackupPin = spiConfig.csPin; 
    3052:	strb.w	r5, [r4, #1212]	; 0x4bc
    spiConfigBackupOptions = spiConfig.options;
    3056:	strb.w	r6, [r4, #1213]	; 0x4bd
    spiConfigBackupPort = spiConfig.spiPort;
    305a:	str.w	r6, [r4, #1220]	; 0x4c4
    305e:	strd	r3, r6, [sp, #16]
    3062:	add	r3, sp, #24
    3064:	ldmdb	r3, {r1, r2, r3}
    3068:	bl	8a44 <DedicatedSpiCard::begin(SdSpiConfig)>
    return m_card && !m_card->errorCode();
    306c:	ldrb.w	r2, [r4, #1198]	; 0x4ae
    m_card = m_cardFactory.newCard(spiConfig);
    3070:	str.w	r7, [r4, #1164]	; 0x48c
    return m_card && !m_card->errorCode();
    3074:	cbz	r2, 30dc <SDClass::begin(unsigned char)+0xc0>
    return cardBegin(spiConfig) && Vol::begin(m_card);
    3076:	mov	r0, r6
		cardPreviouslyPresent = ret;
    3078:	strb.w	r0, [r4, #1228]	; 0x4cc
}
    307c:	add	sp, #28
    307e:	pop	{r4, r5, r6, r7, pc}
    sdioConfigBackup = sdioConfig;
    3080:	movs	r3, #0
    spiConfigBackupPin = 255; // Teensy
    3082:	movs	r2, #255	; 0xff
    m_sdioCard.begin(config);
    3084:	add.w	r5, r4, #1168	; 0x490
    3088:	strb.w	r2, [r4, #1212]	; 0x4bc
    308c:	mov	r1, r3
    sdioConfigBackup = sdioConfig;
    308e:	strb.w	r3, [r4, #1224]	; 0x4c8
    3092:	mov	r0, r5
    3094:	bl	94b4 <SdioCard::begin(SdioConfig)>
    return m_card && !m_card->errorCode();
    3098:	mov	r0, r5
    m_card = m_cardFactory.newCard(sdioConfig);
    309a:	str.w	r5, [r4, #1164]	; 0x48c
    return m_card && !m_card->errorCode();
    309e:	bl	8b98 <SdioCard::errorCode() const>
    30a2:	mov	r2, r0
    30a4:	cbnz	r0, 30c6 <SDClass::begin(unsigned char)+0xaa>
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    30a6:	movs	r3, #1
    30a8:	ldr.w	r1, [r4, #1164]	; 0x48c
    30ac:	adds	r0, r4, #4
    30ae:	str	r2, [sp, #0]
    30b0:	mov	r2, r3
    30b2:	bl	796c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)>
    30b6:	cbz	r0, 30c6 <SDClass::begin(unsigned char)+0xaa>
		cardPreviouslyPresent = ret;
    30b8:	movs	r2, #1
		cdPin_ = _SD_DAT3;
    30ba:	movs	r3, #46	; 0x2e
		cardPreviouslyPresent = ret;
    30bc:	strb.w	r2, [r4, #1228]	; 0x4cc
		cdPin_ = _SD_DAT3;
    30c0:	strb.w	r3, [r4, #1230]	; 0x4ce
		if (!ret) pinMode(_SD_DAT3, INPUT_PULLDOWN);
    30c4:	b.n	3038 <SDClass::begin(unsigned char)+0x1c>
		cdPin_ = _SD_DAT3;
    30c6:	movs	r0, #46	; 0x2e
		cardPreviouslyPresent = ret;
    30c8:	movs	r5, #0
		if (!ret) pinMode(_SD_DAT3, INPUT_PULLDOWN);
    30ca:	movs	r1, #3
		cdPin_ = _SD_DAT3;
    30cc:	strb.w	r0, [r4, #1230]	; 0x4ce
		cardPreviouslyPresent = ret;
    30d0:	strb.w	r5, [r4, #1228]	; 0x4cc
		if (!ret) pinMode(_SD_DAT3, INPUT_PULLDOWN);
    30d4:	bl	bd1c <pinMode>
    30d8:	mov	r0, r5
    30da:	b.n	3038 <SDClass::begin(unsigned char)+0x1c>
    30dc:	movs	r3, #1
    30de:	str	r2, [sp, #0]
    30e0:	mov	r1, r7
    30e2:	adds	r0, r4, #4
    30e4:	mov	r2, r3
    30e6:	bl	796c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)>
    30ea:	b.n	3078 <SDClass::begin(unsigned char)+0x5c>
    30ec:	.word	0x00002a2d
    30f0:	.word	0x017d7840

000030f4 <_GLOBAL__sub_I_SD>:
	SDClass() { }
    30f4:	ldr	r0, [pc, #108]	; (3164 <_GLOBAL__sub_I_SD+0x70>)
  FsVolume() = default;
    30f6:	movs	r3, #0
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
    30f8:	ldr	r2, [pc, #108]	; (3168 <_GLOBAL__sub_I_SD+0x74>)
    30fa:	mov.w	ip, #255	; 0xff
	SPISettings() : _clock(4000000) {
    30fe:	ldr	r1, [pc, #108]	; (316c <_GLOBAL__sub_I_SD+0x78>)
	}
	return true;
}
    3100:	push	{r4}
    3102:	ldr	r4, [pc, #108]	; (3170 <_GLOBAL__sub_I_SD+0x7c>)
    3104:	str.w	r2, [r0, #1168]	; 0x490
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
    3108:	movs	r2, #7
    310a:	str	r4, [r0, #0]
  /** SD is in multi-sector read state. */
  static const uint8_t READ_STATE = 1;
  /** SD is in multi-sector write state. */
  static const uint8_t WRITE_STATE = 2;
  /** Construct an instance of SharedSpiCard. */
  SharedSpiCard() { initSharedSpiCard(); }
    310c:	mov.w	r4, #2752512	; 0x2a0000
	SPISettings() : _clock(4000000) {
    3110:	str.w	r1, [r0, #1188]	; 0x4a4
    3114:	mov.w	r1, #65280	; 0xff00
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
    3118:	str.w	r2, [r0, #1192]	; 0x4a8
 * \brief Raw access to SD and SDHC flash memory cards via dedicate SPI port.
 */
class DedicatedSpiCard : public SharedSpiCard {
 public:
  /** Construct an instance of DedicatedSpiCard. */
  DedicatedSpiCard() = default;
    311c:	ldr	r2, [pc, #84]	; (3174 <_GLOBAL__sub_I_SD+0x80>)
    311e:	strh.w	r1, [r0, #1228]	; 0x4cc
  SdioConfig() {}
    3122:	strh.w	r3, [r0, #1176]	; 0x498
  SharedSpiCard() { initSharedSpiCard(); }
    3126:	str.w	r4, [r0, #1196]	; 0x4ac
    312a:	strh.w	r3, [r0, #1200]	; 0x4b0
    m_type = 0;
    312e:	strb.w	r3, [r0, #1202]	; 0x4b2
    3132:	strb.w	r3, [r0, #1224]	; 0x4c8
    3136:	strb.w	ip, [r0, #1230]	; 0x4ce
  DedicatedSpiCard() = default;
    313a:	str.w	r2, [r0, #1180]	; 0x49c
SDClass SD;
    313e:	ldr	r1, [pc, #56]	; (3178 <_GLOBAL__sub_I_SD+0x84>)
    3140:	ldr	r2, [pc, #56]	; (317c <_GLOBAL__sub_I_SD+0x88>)
}
    3142:	ldr.w	r4, [sp], #4
    3146:	str.w	r3, [r0, #1156]	; 0x484
    314a:	str.w	r3, [r0, #1160]	; 0x488
class SdBase : public Vol {
    314e:	str.w	r3, [r0, #1164]	; 0x48c
 * \brief Optimized SPI class for access to SD and SDHC flash memory cards.
 */
class SdSpiArduinoDriver {
 public:
  /** Constructor. */
  SdSpiArduinoDriver() = default;
    3152:	str.w	r3, [r0, #1184]	; 0x4a0
    3156:	str.w	r3, [r0, #1204]	; 0x4b4
    315a:	strb.w	r3, [r0, #1208]	; 0x4b8
SDClass SD;
    315e:	b.w	d2d0 <__aeabi_atexit>
    3162:	nop
    3164:	.word	0x20005308
    3168:	.word	0x20000bbc
    316c:	.word	0x003d0900
    3170:	.word	0x20000b68
    3174:	.word	0x200009f0
    3178:	.word	0x00002a29
    317c:	.word	0x20001488

00003180 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)>:
  uint32_t c;
  uint8_t h;
  uint8_t s;

  uint8_t numberOfHeads;
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
    3180:	cmp.w	r1, #256	; 0x100
    3184:	bhi.n	31ca <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x4a>
  if (capacityMB <= 16) {
    3186:	cmp	r1, #16
    3188:	bhi.n	31e8 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x68>
    318a:	movs	r3, #64	; 0x40
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
    318c:	mov.w	ip, #32
  } else if (capacityMB <= 4032) {
    numberOfHeads = 128;
  } else {
    numberOfHeads = 255;
  }
  c = lba / (numberOfHeads * sectorsPerTrack);
    3190:	udiv	r1, r2, r3
  if (c <= 1023) {
    3194:	cmp.w	r1, #1024	; 0x400
    3198:	bcs.n	31dc <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x5c>
    h = (lba % (numberOfHeads * sectorsPerTrack)) / sectorsPerTrack;
    319a:	mls	r3, r3, r1, r2
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba) {
    319e:	push	{lr}
    s = (lba % sectorsPerTrack) + 1;
    31a0:	udiv	lr, r2, ip
    h = (lba % (numberOfHeads * sectorsPerTrack)) / sectorsPerTrack;
    31a4:	udiv	r3, r3, ip
    s = (lba % sectorsPerTrack) + 1;
    31a8:	mls	r2, ip, lr, r2
    c = 1023;
    h = 254;
    s = 63;
  }
  chs[0] = h;
  chs[1] = ((c >> 2) & 0XC0) | s;
    31ac:	mov.w	ip, r1, lsr #2
    h = (lba % (numberOfHeads * sectorsPerTrack)) / sectorsPerTrack;
    31b0:	uxtb	r3, r3
    s = (lba % sectorsPerTrack) + 1;
    31b2:	adds	r2, #1
  chs[1] = ((c >> 2) & 0XC0) | s;
    31b4:	bic.w	ip, ip, #63	; 0x3f
  chs[2] = c;
    31b8:	uxtb	r1, r1
  chs[0] = h;
    31ba:	strb	r3, [r0, #0]
  chs[1] = ((c >> 2) & 0XC0) | s;
    31bc:	orr.w	r2, r2, ip
  chs[2] = c;
    31c0:	strb	r1, [r0, #2]
  chs[1] = ((c >> 2) & 0XC0) | s;
    31c2:	uxtb	r2, r2
    31c4:	strb	r2, [r0, #1]
}
    31c6:	ldr.w	pc, [sp], #4
    31ca:	movs	r3, #63	; 0x3f
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
    31cc:	mov	ip, r3
  } else if (capacityMB <= 128) {
    31ce:	cmp	r1, #128	; 0x80
    31d0:	bls.n	31f4 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x74>
  } else if (capacityMB <= 504) {
    31d2:	cmp.w	r1, #504	; 0x1f8
    31d6:	bhi.n	31f8 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x78>
  c = lba / (numberOfHeads * sectorsPerTrack);
    31d8:	lsls	r3, r3, #4
    31da:	b.n	3190 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x10>
    31dc:	movs	r1, #255	; 0xff
    h = 254;
    31de:	movs	r3, #254	; 0xfe
  chs[1] = ((c >> 2) & 0XC0) | s;
    31e0:	strb	r1, [r0, #1]
  chs[0] = h;
    31e2:	strb	r3, [r0, #0]
  chs[2] = c;
    31e4:	strb	r1, [r0, #2]
    31e6:	bx	lr
  } else if (capacityMB <= 32) {
    31e8:	cmp	r1, #32
    31ea:	bhi.n	321a <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x9a>
    31ec:	movs	r3, #128	; 0x80
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
    31ee:	mov.w	ip, #32
    31f2:	b.n	3190 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x10>
  c = lba / (numberOfHeads * sectorsPerTrack);
    31f4:	lsls	r3, r3, #3
    31f6:	b.n	3190 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x10>
  } else if (capacityMB <= 1008) {
    31f8:	cmp.w	r1, #1008	; 0x3f0
    31fc:	bls.n	3208 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x88>
  } else if (capacityMB <= 2016) {
    31fe:	cmp.w	r1, #2016	; 0x7e0
    3202:	bhi.n	320c <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x8c>
  c = lba / (numberOfHeads * sectorsPerTrack);
    3204:	lsls	r3, r3, #6
    3206:	b.n	3190 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x10>
    3208:	lsls	r3, r3, #5
    320a:	b.n	3190 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x10>
  } else if (capacityMB <= 4032) {
    320c:	cmp.w	r1, #4032	; 0xfc0
  c = lba / (numberOfHeads * sectorsPerTrack);
    3210:	ite	ls
    3212:	lslls	r3, r3, #7
    3214:	rsbhi	r3, r3, r3, lsl #8
    3218:	b.n	3190 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x10>
    321a:	movs	r3, #32
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
    321c:	mov	ip, r3
    321e:	b.n	31ce <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x4e>

00003220 <FsCache::sync()>:

fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
    3220:	push	{r4, r5, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
    3222:	ldrb	r3, [r0, #0]
bool FsCache::sync() {
    3224:	sub	sp, #12
  if (m_status & CACHE_STATUS_DIRTY) {
    3226:	lsls	r4, r3, #31
    3228:	bpl.n	3266 <FsCache::sync()+0x46>
    if (!m_blockDev->writeSector(m_sector, m_buffer)) {
    322a:	mov	r4, r0
    322c:	ldr	r0, [r0, #4]
    322e:	add.w	r2, r4, #16
    3232:	ldr	r3, [r0, #0]
    3234:	ldr	r1, [r4, #8]
    3236:	str	r2, [sp, #4]
    3238:	ldr	r3, [r3, #32]
    323a:	blx	r3
    323c:	ldr	r2, [sp, #4]
    323e:	mov	r5, r0
    3240:	cbz	r0, 326e <FsCache::sync()+0x4e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    3242:	ldrb	r3, [r4, #0]
    3244:	lsls	r1, r3, #30
    3246:	bpl.n	325a <FsCache::sync()+0x3a>
      if (!m_blockDev->writeSector(m_sector + m_mirrorOffset, m_buffer)) {
    3248:	ldr	r3, [r4, #12]
    324a:	ldrd	r0, r1, [r4, #4]
    324e:	add	r1, r3
    3250:	ldr	r3, [r0, #0]
    3252:	ldr	r3, [r3, #32]
    3254:	blx	r3
    3256:	cbz	r0, 326e <FsCache::sync()+0x4e>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    3258:	ldrb	r3, [r4, #0]
    325a:	bic.w	r3, r3, #1
  }
  return true;

fail:
  return false;
}
    325e:	mov	r0, r5
    m_status &= ~CACHE_STATUS_DIRTY;
    3260:	strb	r3, [r4, #0]
}
    3262:	add	sp, #12
    3264:	pop	{r4, r5, pc}
  return true;
    3266:	movs	r5, #1
}
    3268:	mov	r0, r5
    326a:	add	sp, #12
    326c:	pop	{r4, r5, pc}
  return false;
    326e:	movs	r5, #0
}
    3270:	mov	r0, r5
    3272:	add	sp, #12
    3274:	pop	{r4, r5, pc}
    3276:	nop

00003278 <FsCache::prepare(unsigned long, unsigned char)>:
uint8_t* FsCache::prepare(uint32_t sector, uint8_t option) {
    3278:	push	{r3, r4, r5, r6, r7, lr}
  if (!m_blockDev) {
    327a:	ldr	r3, [r0, #4]
    327c:	cbz	r3, 32c2 <FsCache::prepare(unsigned long, unsigned char)+0x4a>
  if (m_sector != sector) {
    327e:	ldr	r3, [r0, #8]
    3280:	mov	r4, r0
    3282:	mov	r7, r1
    3284:	mov	r5, r2
    3286:	cmp	r3, r1
    3288:	bne.n	3298 <FsCache::prepare(unsigned long, unsigned char)+0x20>
  m_status |= option & CACHE_STATUS_MASK;
    328a:	ldrb.w	r3, [r0], #16
    328e:	and.w	r5, r5, #3
    3292:	orrs	r3, r5
    3294:	strb	r3, [r4, #0]
}
    3296:	pop	{r3, r4, r5, r6, r7, pc}
    if (!sync()) {
    3298:	bl	3220 <FsCache::sync()>
    329c:	cbz	r0, 32c2 <FsCache::prepare(unsigned long, unsigned char)+0x4a>
    if (!(option & CACHE_OPTION_NO_READ)) {
    329e:	lsls	r3, r5, #29
    32a0:	bpl.n	32ae <FsCache::prepare(unsigned long, unsigned char)+0x36>
    32a2:	add.w	r6, r4, #16
      if (!m_blockDev->readSector(sector, m_buffer)) {
    32a6:	mov	r0, r6
    m_sector = sector;
    32a8:	movs	r3, #0
    32aa:	str	r7, [r4, #8]
    32ac:	b.n	328e <FsCache::prepare(unsigned long, unsigned char)+0x16>
      if (!m_blockDev->readSector(sector, m_buffer)) {
    32ae:	ldr	r0, [r4, #4]
    32b0:	add.w	r6, r4, #16
    32b4:	mov	r1, r7
    32b6:	ldr	r3, [r0, #0]
    32b8:	mov	r2, r6
    32ba:	ldr	r3, [r3, #16]
    32bc:	blx	r3
    32be:	cmp	r0, #0
    32c0:	bne.n	32a6 <FsCache::prepare(unsigned long, unsigned char)+0x2e>
  return nullptr;
    32c2:	movs	r0, #0
}
    32c4:	pop	{r3, r4, r5, r6, r7, pc}
    32c6:	nop

000032c8 <toUpcase(unsigned short)>:
}
//------------------------------------------------------------------------------
uint16_t toUpcase(uint16_t chr) {
  uint16_t i, first;
  // Optimize for simple ASCII.
  if (chr < 127) {
    32c8:	cmp	r0, #126	; 0x7e
    32ca:	bls.n	334a <toUpcase(unsigned short)+0x82>
  size_t right = size;
    32cc:	mov.w	ip, #53	; 0x35
  size_t left = 0;
    32d0:	movs	r3, #0
uint16_t toUpcase(uint16_t chr) {
    32d2:	push	{r4, r5}
    32d4:	ldr	r4, [pc, #160]	; (3378 <toUpcase(unsigned short)+0xb0>)
    32d6:	b.n	32e2 <toUpcase(unsigned short)+0x1a>
    if (readTable16(table[mid].key) <= key) {
    32d8:	ldrh.w	r2, [r4, r1, lsl #2]
    32dc:	cmp	r2, r0
    32de:	bhi.n	3322 <toUpcase(unsigned short)+0x5a>
    size_t mid = left + (right - left) / 2;
    32e0:	mov	r3, r1
  while (right - left > 1) {
    32e2:	sub.w	r2, ip, r3
    32e6:	cmp	r2, #1
    size_t mid = left + (right - left) / 2;
    32e8:	add.w	r1, r3, r2, lsr #1
  while (right - left > 1) {
    32ec:	bhi.n	32d8 <toUpcase(unsigned short)+0x10>
    return chr - ('a' <= chr && chr <= 'z' ? 'a' - 'A' : 0);
  }
  i = searchPair16(reinterpret_cast<const pair16_t*>(mapTable), MAP_DIM, chr);
  first = readTable16(mapTable[i].base);
    32ee:	uxth	r3, r3
    32f0:	ldrh.w	r2, [r4, r3, lsl #2]
  if (first <= chr && (chr - first) < readTable8(mapTable[i].count)) {
    32f4:	cmp	r0, r2
    32f6:	bcs.n	3326 <toUpcase(unsigned short)+0x5e>
    32f8:	movs	r4, #75	; 0x4b
    32fa:	movs	r3, #0
    32fc:	ldr	r5, [pc, #124]	; (337c <toUpcase(unsigned short)+0xb4>)
    32fe:	b.n	330a <toUpcase(unsigned short)+0x42>
    if (readTable16(table[mid].key) <= key) {
    3300:	ldrh.w	r2, [r5, r1, lsl #2]
    3304:	cmp	r2, r0
    3306:	bhi.n	3346 <toUpcase(unsigned short)+0x7e>
    size_t mid = left + (right - left) / 2;
    3308:	mov	r3, r1
  while (right - left > 1) {
    330a:	subs	r2, r4, r3
    330c:	cmp	r2, #1
    size_t mid = left + (right - left) / 2;
    330e:	add.w	r1, r3, r2, lsr #1
  while (right - left > 1) {
    3312:	bhi.n	3300 <toUpcase(unsigned short)+0x38>
      return chr - ((chr - first) & 1);
    }
    return chr + (off ? off : -0x1C60);
  }
  i = searchPair16(lookupTable, LOOKUP_DIM, chr);
  if (readTable16(lookupTable[i].key) == chr) {
    3314:	uxth	r3, r3
    3316:	ldrh.w	r2, [r5, r3, lsl #2]
    331a:	cmp	r2, r0
    331c:	beq.n	335e <toUpcase(unsigned short)+0x96>
    return readTable16(lookupTable[i].val);
  }
  return chr;
}
    331e:	pop	{r4, r5}
    3320:	bx	lr
    size_t mid = left + (right - left) / 2;
    3322:	mov	ip, r1
    3324:	b.n	32e2 <toUpcase(unsigned short)+0x1a>
  if (first <= chr && (chr - first) < readTable8(mapTable[i].count)) {
    3326:	add.w	r4, r4, r3, lsl #2
    332a:	subs	r2, r0, r2
    332c:	ldrb	r3, [r4, #3]
    332e:	cmp	r2, r3
    3330:	bge.n	32f8 <toUpcase(unsigned short)+0x30>
    int8_t off = readTable8(mapTable[i].off);
    3332:	ldrsb.w	r3, [r4, #2]
    if (off == 1) {
    3336:	cmp	r3, #1
    3338:	beq.n	3368 <toUpcase(unsigned short)+0xa0>
    return chr + (off ? off : -0x1C60);
    333a:	cbz	r3, 3372 <toUpcase(unsigned short)+0xaa>
    333c:	uxth	r3, r3
    333e:	add	r3, r0
}
    3340:	pop	{r4, r5}
    return chr + (off ? off : -0x1C60);
    3342:	uxth	r0, r3
}
    3344:	bx	lr
    size_t mid = left + (right - left) / 2;
    3346:	mov	r4, r1
    3348:	b.n	330a <toUpcase(unsigned short)+0x42>
    return chr - ('a' <= chr && chr <= 'z' ? 'a' - 'A' : 0);
    334a:	sub.w	r3, r0, #97	; 0x61
    334e:	cmp	r3, #25
    3350:	ite	hi
    3352:	movhi	r3, #0
    3354:	movls	r3, #1
    3356:	sub.w	r3, r0, r3, lsl #5
    335a:	uxth	r0, r3
}
    335c:	bx	lr
    return readTable16(lookupTable[i].val);
    335e:	add.w	r5, r5, r3, lsl #2
    3362:	ldrh	r0, [r5, #2]
}
    3364:	pop	{r4, r5}
    3366:	bx	lr
      return chr - ((chr - first) & 1);
    3368:	and.w	r2, r2, #1
    336c:	subs	r3, r0, r2
    336e:	uxth	r0, r3
    3370:	b.n	331e <toUpcase(unsigned short)+0x56>
    return chr + (off ? off : -0x1C60);
    3372:	movw	r3, #58272	; 0xe3a0
    3376:	b.n	333e <toUpcase(unsigned short)+0x76>
    3378:	.word	0x20000690
    337c:	.word	0x20000564

00003380 <dateTimeMs10(unsigned short*, unsigned short*, unsigned char*)>:
  *ms10 = 0;
    3380:	mov.w	ip, #0
  FsDateTime::callback2(date, time);
    3384:	ldr	r3, [pc, #8]	; (3390 <dateTimeMs10(unsigned short*, unsigned short*, unsigned char*)+0x10>)
  *ms10 = 0;
    3386:	strb.w	ip, [r2]
  FsDateTime::callback2(date, time);
    338a:	ldr	r3, [r3, #0]
    338c:	bx	r3
    338e:	nop
    3390:	.word	0x20006424

00003394 <FsDateTime::setCallback(void (*)(unsigned short*, unsigned short*))>:
  callback = dateTimeMs10;
    3394:	ldr	r2, [pc, #8]	; (33a0 <FsDateTime::setCallback(void (*)(unsigned short*, unsigned short*))+0xc>)
    3396:	ldr	r1, [pc, #12]	; (33a4 <FsDateTime::setCallback(void (*)(unsigned short*, unsigned short*))+0x10>)
  callback2 = dateTime;
    3398:	ldr	r3, [pc, #12]	; (33a8 <FsDateTime::setCallback(void (*)(unsigned short*, unsigned short*))+0x14>)
  callback = dateTimeMs10;
    339a:	str	r1, [r2, #0]
  callback2 = dateTime;
    339c:	str	r0, [r3, #0]
}
    339e:	bx	lr
    33a0:	.word	0x20006420
    33a4:	.word	0x00003381
    33a8:	.word	0x20006424

000033ac <Print::write(char const*) [clone .isra.0]>:
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    33ac:	push	{r4, lr}
    33ae:	mov	r4, r0
    33b0:	sub	sp, #8
    33b2:	mov	r0, r1
    33b4:	str	r1, [sp, #4]
    33b6:	bl	e480 <strlen>
    33ba:	ldr	r3, [r4, #0]
    33bc:	mov	r2, r0
    33be:	ldr	r1, [sp, #4]
    33c0:	mov	r0, r4
    33c2:	ldr	r3, [r3, #4]
    33c4:	add	sp, #8
    33c6:	ldmia.w	sp!, {r4, lr}
    33ca:	bx	r3

000033cc <ExFatFormatter::syncUpcase()>:
  writeMsg(pr, "Format failed\r\n");
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFormatter::syncUpcase() {
  uint16_t index = m_upcaseSize & SECTOR_MASK;
    33cc:	ldr	r3, [r0, #8]
    33ce:	ubfx	r3, r3, #0, #9
  if (!index) {
    33d2:	cbz	r3, 33f6 <ExFatFormatter::syncUpcase()+0x2a>
    return true;
  }
  for (size_t i = index; i < BYTES_PER_SECTOR; i++) {
    m_secBuf[i] = 0;
    33d4:	movs	r1, #0
bool ExFatFormatter::syncUpcase() {
    33d6:	push	{r4}
    m_secBuf[i] = 0;
    33d8:	ldr	r2, [r0, #16]
    33da:	strb	r1, [r2, r3]
  for (size_t i = index; i < BYTES_PER_SECTOR; i++) {
    33dc:	adds	r3, #1
    33de:	cmp.w	r3, #512	; 0x200
    33e2:	bne.n	33d8 <ExFatFormatter::syncUpcase()+0xc>
  }
  return m_dev->writeSector(m_upcaseSector, m_secBuf);
    33e4:	ldr	r1, [r0, #0]
    33e6:	ldrd	r3, r2, [r0, #12]
    33ea:	ldr	r4, [r3, #0]
    33ec:	mov	r0, r3
    33ee:	ldr	r3, [r4, #32]
}
    33f0:	ldr.w	r4, [sp], #4
  return m_dev->writeSector(m_upcaseSector, m_secBuf);
    33f4:	bx	r3
}
    33f6:	movs	r0, #1
    33f8:	bx	lr
    33fa:	nop

000033fc <ExFatFormatter::writeUpcaseByte(unsigned char)>:
//------------------------------------------------------------------------------
bool ExFatFormatter::writeUpcaseByte(uint8_t b) {
  uint16_t index = m_upcaseSize & SECTOR_MASK;
    33fc:	ldr	r2, [r0, #8]
bool ExFatFormatter::writeUpcaseByte(uint8_t b) {
    33fe:	mov	r3, r0
  m_secBuf[index] = b;
    3400:	ldr	r0, [r0, #16]
  uint16_t index = m_upcaseSize & SECTOR_MASK;
    3402:	movw	ip, #511	; 0x1ff
    3406:	ubfx	r2, r2, #0, #9
  m_secBuf[index] = b;
    340a:	strb	r1, [r0, r2]
  m_upcaseChecksum = exFatChecksum(m_upcaseChecksum, b);
  m_upcaseSize++;
  if (index == SECTOR_MASK) {
    340c:	cmp	r2, ip
  uint8_t mustBeZero2[2];
  uint8_t unicode3[4];
} DirLfn_t;
//==============================================================================
inline uint32_t exFatChecksum(uint32_t sum, uint8_t data) {
  return (sum << 31) + (sum >> 1) + data;
    340e:	ldr	r0, [r3, #4]
    3410:	add.w	r1, r1, r0, ror #1
  m_upcaseSize++;
    3414:	ldr	r0, [r3, #8]
    3416:	add.w	r0, r0, #1
    341a:	strd	r1, r0, [r3, #4]
  if (index == SECTOR_MASK) {
    341e:	beq.n	3424 <ExFatFormatter::writeUpcaseByte(unsigned char)+0x28>
    return m_dev->writeSector(m_upcaseSector++, m_secBuf);
  }
  return true;
}
    3420:	movs	r0, #1
    3422:	bx	lr
    return m_dev->writeSector(m_upcaseSector++, m_secBuf);
    3424:	ldr	r0, [r3, #12]
    3426:	ldr	r1, [r3, #0]
bool ExFatFormatter::writeUpcaseByte(uint8_t b) {
    3428:	push	{r4}
    return m_dev->writeSector(m_upcaseSector++, m_secBuf);
    342a:	ldr	r4, [r0, #0]
    342c:	adds	r2, r1, #1
    342e:	ldr	r4, [r4, #32]
    3430:	str	r2, [r3, #0]
    3432:	ldr	r2, [r3, #16]
    3434:	mov	r3, r4
}
    3436:	ldr.w	r4, [sp], #4
    return m_dev->writeSector(m_upcaseSector++, m_secBuf);
    343a:	bx	r3

0000343c <ExFatFormatter::writeUpcaseUnicode(unsigned short)>:
//------------------------------------------------------------------------------
bool ExFatFormatter::writeUpcaseUnicode(uint16_t unicode) {
    343c:	push	{r3, r4, r5, lr}
  uint16_t index = m_upcaseSize & SECTOR_MASK;
    343e:	ldr	r3, [r0, #8]
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    3440:	uxtb	r2, r1
bool ExFatFormatter::writeUpcaseUnicode(uint16_t unicode) {
    3442:	mov	r5, r1
  m_secBuf[index] = b;
    3444:	ldr	r1, [r0, #16]
  uint16_t index = m_upcaseSize & SECTOR_MASK;
    3446:	ubfx	r3, r3, #0, #9
    344a:	movw	ip, #511	; 0x1ff
bool ExFatFormatter::writeUpcaseUnicode(uint16_t unicode) {
    344e:	mov	r4, r0
  m_secBuf[index] = b;
    3450:	strb	r2, [r1, r3]
  if (index == SECTOR_MASK) {
    3452:	cmp	r3, ip
    3454:	ldr	r1, [r0, #4]
    3456:	add.w	r2, r2, r1, ror #1
  m_upcaseChecksum = exFatChecksum(m_upcaseChecksum, b);
    345a:	str	r2, [r0, #4]
  m_upcaseSize++;
    345c:	ldr	r2, [r0, #8]
    345e:	add.w	r2, r2, #1
    3462:	str	r2, [r0, #8]
  if (index == SECTOR_MASK) {
    3464:	beq.n	3472 <ExFatFormatter::writeUpcaseUnicode(unsigned short)+0x36>
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    3466:	lsrs	r1, r5, #8
    3468:	mov	r0, r4
}
    346a:	ldmia.w	sp!, {r3, r4, r5, lr}
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    346e:	b.w	33fc <ExFatFormatter::writeUpcaseByte(unsigned char)>
    return m_dev->writeSector(m_upcaseSector++, m_secBuf);
    3472:	ldr	r1, [r0, #0]
    3474:	ldr	r0, [r0, #12]
    3476:	adds	r2, r1, #1
    3478:	ldr	r3, [r0, #0]
    347a:	ldr	r3, [r3, #32]
    347c:	str	r2, [r4, #0]
    347e:	ldr	r2, [r4, #16]
    3480:	blx	r3
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    3482:	cmp	r0, #0
    3484:	bne.n	3466 <ExFatFormatter::writeUpcaseUnicode(unsigned short)+0x2a>
}
    3486:	pop	{r3, r4, r5, pc}

00003488 <ExFatFormatter::writeUpcase(unsigned long)>:
//------------------------------------------------------------------------------
bool ExFatFormatter::writeUpcase(uint32_t sector) {
    3488:	push	{r3, r4, r5, r6, r7, lr}
  uint32_t n;
  uint32_t ns;
  uint32_t ch = 0;
  uint16_t uc;

  m_upcaseSize = 0;
    348a:	movs	r3, #0
bool ExFatFormatter::writeUpcase(uint32_t sector) {
    348c:	mov	r6, r0
  m_upcaseChecksum = 0;
  m_upcaseSector = sector;
    348e:	str	r1, [r0, #0]
  uint32_t ch = 0;
    3490:	mov	r5, r3
  m_upcaseChecksum = 0;
    3492:	strd	r3, r3, [r0, #4]

  while (ch < 0X10000) {
    uc = toUpcase(ch);
    3496:	uxth	r0, r5
    3498:	bl	32c8 <toUpcase(unsigned short)>
    if (uc != ch) {
    349c:	cmp	r0, r5
    uc = toUpcase(ch);
    349e:	mov	r4, r0
    if (uc != ch) {
    34a0:	beq.n	34b2 <ExFatFormatter::writeUpcase(unsigned long)+0x2a>
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    34a2:	uxtb	r1, r0
    34a4:	mov	r0, r6
    34a6:	bl	33fc <ExFatFormatter::writeUpcaseByte(unsigned char)>
    34aa:	cmp	r0, #0
    34ac:	bne.n	3526 <ExFatFormatter::writeUpcase(unsigned long)+0x9e>
  }
  return true;

fail:
  return false;
}
    34ae:	movs	r0, #0
    34b0:	pop	{r3, r4, r5, r6, r7, pc}
      for (n = ch + 1; n < 0X10000 && n == toUpcase(n); n++) {
    34b2:	adds	r4, r5, #1
    34b4:	cmp.w	r4, #65536	; 0x10000
    34b8:	bne.n	34c4 <ExFatFormatter::writeUpcase(unsigned long)+0x3c>
    34ba:	b.n	3512 <ExFatFormatter::writeUpcase(unsigned long)+0x8a>
    34bc:	adds	r4, #1
    34be:	cmp.w	r4, #65536	; 0x10000
    34c2:	beq.n	34ce <ExFatFormatter::writeUpcase(unsigned long)+0x46>
    34c4:	uxth	r0, r4
    34c6:	bl	32c8 <toUpcase(unsigned short)>
    34ca:	cmp	r0, r4
    34cc:	beq.n	34bc <ExFatFormatter::writeUpcase(unsigned long)+0x34>
      ns = n - ch;
    34ce:	subs	r7, r4, r5
      if (ns >= MINIMUM_UPCASE_SKIP) {
    34d0:	cmp.w	r7, #512	; 0x200
    34d4:	bcc.n	3512 <ExFatFormatter::writeUpcase(unsigned long)+0x8a>
        if (!writeUpcaseUnicode(0XFFFF) || !writeUpcaseUnicode(ns)) {
    34d6:	movw	r1, #65535	; 0xffff
    34da:	mov	r0, r6
    34dc:	bl	343c <ExFatFormatter::writeUpcaseUnicode(unsigned short)>
    34e0:	cmp	r0, #0
    34e2:	beq.n	34ae <ExFatFormatter::writeUpcase(unsigned long)+0x26>
    34e4:	uxth	r1, r7
    34e6:	mov	r0, r6
    34e8:	bl	343c <ExFatFormatter::writeUpcaseUnicode(unsigned short)>
    34ec:	cmp	r0, #0
    34ee:	beq.n	34ae <ExFatFormatter::writeUpcase(unsigned long)+0x26>
    34f0:	mov	r5, r4
  while (ch < 0X10000) {
    34f2:	cmp.w	r5, #65536	; 0x10000
    34f6:	bne.n	3496 <ExFatFormatter::writeUpcase(unsigned long)+0xe>
  if (!syncUpcase()) {
    34f8:	mov	r0, r6
}
    34fa:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  if (!syncUpcase()) {
    34fe:	b.w	33cc <ExFatFormatter::syncUpcase()>
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    3502:	ubfx	r1, r5, #8, #8
    3506:	mov	r0, r6
    3508:	adds	r5, #1
    350a:	bl	33fc <ExFatFormatter::writeUpcaseByte(unsigned char)>
    350e:	cmp	r0, #0
    3510:	beq.n	34ae <ExFatFormatter::writeUpcase(unsigned long)+0x26>
        while (ch < n) {
    3512:	cmp	r5, r4
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    3514:	uxtb	r1, r5
    3516:	mov	r0, r6
        while (ch < n) {
    3518:	bcs.n	34f2 <ExFatFormatter::writeUpcase(unsigned long)+0x6a>
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    351a:	bl	33fc <ExFatFormatter::writeUpcaseByte(unsigned char)>
    351e:	cmp	r0, #0
    3520:	bne.n	3502 <ExFatFormatter::writeUpcase(unsigned long)+0x7a>
}
    3522:	movs	r0, #0
    3524:	pop	{r3, r4, r5, r6, r7, pc}
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    3526:	ubfx	r1, r4, #8, #8
    352a:	mov	r0, r6
    352c:	bl	33fc <ExFatFormatter::writeUpcaseByte(unsigned char)>
    3530:	cmp	r0, #0
    3532:	beq.n	34ae <ExFatFormatter::writeUpcase(unsigned long)+0x26>
      ch++;
    3534:	adds	r5, #1
    3536:	b.n	34f2 <ExFatFormatter::writeUpcase(unsigned long)+0x6a>

00003538 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)>:
bool ExFatFormatter::format(FsBlockDevice* dev, uint8_t* secBuf, print_t* pr) {
    3538:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    353c:	mov	r7, r3
    353e:	sub	sp, #36	; 0x24
  sectorCount = dev->sectorCount();
    3540:	ldr	r3, [r1, #0]
bool ExFatFormatter::format(FsBlockDevice* dev, uint8_t* secBuf, print_t* pr) {
    3542:	mov	r5, r1
    3544:	str	r0, [sp, #16]
    3546:	mov	r4, r2
  m_dev = dev;
    3548:	str	r1, [r0, #12]
  m_secBuf = secBuf;
    354a:	str	r2, [r0, #16]
  sectorCount = dev->sectorCount();
    354c:	mov	r0, r1
    354e:	ldr	r3, [r3, #24]
    3550:	blx	r3
  if (sectorCount < 0X100000) {
    3552:	cmp.w	r0, #1048576	; 0x100000
  sectorCount = dev->sectorCount();
    3556:	str	r0, [sp, #0]
  if (sectorCount < 0X100000) {
    3558:	bcc.w	370c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1d4>
  for (m = 1, vs = 0; m && sectorCount > m; m <<= 1, vs++) {
    355c:	movs	r3, #0
    355e:	movs	r2, #1
    3560:	ldr	r6, [sp, #0]
    3562:	adds	r3, #1
    3564:	lsls	r2, r2, #1
    3566:	uxtb	r3, r3
    3568:	beq.n	356e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x36>
    356a:	cmp	r6, r2
    356c:	bhi.n	3562 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x2a>
  sectorsPerClusterShift = vs < 29 ? 8 : (vs - 11) / 2;
    356e:	cmp	r3, #28
    3570:	str	r6, [sp, #0]
    3572:	bls.w	36e4 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1ac>
    3576:	sub.w	r8, r3, #11
  sectorsPerCluster = 1UL << sectorsPerClusterShift;
    357a:	movs	r2, #1
  sectorsPerClusterShift = vs < 29 ? 8 : (vs - 11) / 2;
    357c:	asr.w	r1, r8, r2
    3580:	ubfx	r8, r8, #1, #8
  sectorsPerCluster = 1UL << sectorsPerClusterShift;
    3584:	lsls	r2, r1
  sectorsPerClusterShift = vs < 29 ? 8 : (vs - 11) / 2;
    3586:	str	r1, [sp, #8]
  sectorsPerCluster = 1UL << sectorsPerClusterShift;
    3588:	str	r2, [sp, #28]
  fatLength = 1UL << (vs < 27 ? 13 : (vs + 1) / 2);
    358a:	adds	r3, #1
    358c:	movs	r2, #1
    358e:	asrs	r3, r3, #1
    3590:	lsls	r2, r3
    3592:	str	r2, [sp, #24]
  clusterCount = (sectorCount - 4 * fatLength) >> sectorsPerClusterShift;
    3594:	movs	r2, #4
    3596:	lsls	r2, r3
    3598:	str	r2, [sp, #12]
  partitionOffset = 2 * fatLength;
    359a:	movs	r2, #2
    359c:	lsl.w	r3, r2, r3
    35a0:	str	r3, [sp, #4]
  clusterCount = (sectorCount - 4 * fatLength) >> sectorsPerClusterShift;
    35a2:	ldr	r2, [sp, #0]
  memset(secBuf, 0, BYTES_PER_SECTOR);
    35a4:	movs	r1, #0
  clusterCount = (sectorCount - 4 * fatLength) >> sectorsPerClusterShift;
    35a6:	ldr	r3, [sp, #12]
  memset(secBuf, 0, BYTES_PER_SECTOR);
    35a8:	mov	r0, r4
  clusterCount = (sectorCount - 4 * fatLength) >> sectorsPerClusterShift;
    35aa:	ldr	r6, [sp, #8]
  mbr->part->beginCHS[0] = 1;
    35ac:	mov.w	sl, #1
  clusterCount = (sectorCount - 4 * fatLength) >> sectorsPerClusterShift;
    35b0:	subs	r3, r2, r3
  memset(secBuf, 0, BYTES_PER_SECTOR);
    35b2:	mov.w	r2, #512	; 0x200
  *reinterpret_cast<uint16_t*>(dst) = src;
    35b6:	movw	fp, #43605	; 0xaa55
  clusterCount = (sectorCount - 4 * fatLength) >> sectorsPerClusterShift;
    35ba:	lsrs	r3, r6
  volumeLength = clusterHeapOffset + (clusterCount << sectorsPerClusterShift);
    35bc:	lsl.w	r9, r3, r6
    35c0:	str	r3, [sp, #20]
    35c2:	ldr	r6, [sp, #4]
  memset(secBuf, 0, BYTES_PER_SECTOR);
    35c4:	bl	e110 <memset>
  mbr->part->endCHS[1] = 0XFF;
    35c8:	movs	r3, #255	; 0xff
  mbr->part->beginCHS[0] = 1;
    35ca:	strb.w	sl, [r4, #447]	; 0x1bf
  mbr->part->beginCHS[1] = 1;
    35ce:	strb.w	sl, [r4, #448]	; 0x1c0
  volumeLength = clusterHeapOffset + (clusterCount << sectorsPerClusterShift);
    35d2:	add	r9, r6
  mbr->part->endCHS[1] = 0XFF;
    35d4:	strb.w	r3, [r4, #452]	; 0x1c4
  if (!dev->writeSector(0, secBuf)) {
    35d8:	mov	r2, r4
  mbr->part->endCHS[2] = 0XFF;
    35da:	strb.w	r3, [r4, #453]	; 0x1c5
  mbr->part->type = 7;
    35de:	movs	r3, #7
  if (!dev->writeSector(0, secBuf)) {
    35e0:	movs	r1, #0
    35e2:	mov	r0, r5
  mbr->part->type = 7;
    35e4:	strb.w	r3, [r4, #450]	; 0x1c2
  mbr->part->endCHS[0] = 0XFE;
    35e8:	movs	r3, #254	; 0xfe
  *reinterpret_cast<uint32_t*>(dst) = src;
    35ea:	str.w	r6, [r4, #454]	; 0x1c6
    35ee:	strb.w	r3, [r4, #451]	; 0x1c3
  if (!dev->writeSector(0, secBuf)) {
    35f2:	ldr	r3, [r5, #0]
    35f4:	str.w	r9, [r4, #458]	; 0x1ca
    35f8:	ldr	r3, [r3, #32]
  *reinterpret_cast<uint16_t*>(dst) = src;
    35fa:	strh.w	fp, [r4, #510]	; 0x1fe
    35fe:	blx	r3
    3600:	cmp	r0, #0
    3602:	beq.n	36cc <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
  memset(secBuf, 0, BYTES_PER_SECTOR);
    3604:	mov.w	r2, #512	; 0x200
    3608:	movs	r1, #0
    360a:	mov	r0, r4
    360c:	bl	e110 <memset>
  *reinterpret_cast<uint32_t*>(dst) = src;
    3610:	ldr	r3, [sp, #0]
  pbs->bpb.sectorsPerClusterShift = sectorsPerClusterShift;
    3612:	strb.w	r8, [r4, #109]	; 0x6d
  for (size_t i = 0; i < BYTES_PER_SECTOR; i++) {
    3616:	mov.w	r8, #0
    361a:	str	r3, [r4, #100]	; 0x64
    pbs->bootCode[i] = 0XF4;
    361c:	movs	r1, #244	; 0xf4
    361e:	ldr	r3, [sp, #20]
    3620:	add.w	r0, r4, #120	; 0x78
    3624:	ldr	r2, [sp, #24]
    3626:	str	r3, [r4, #92]	; 0x5c
  pbs->oemName[5] = ' ';
    3628:	movs	r3, #32
  setLe64(pbs->bpb.partitionOffset, partitionOffset);
    362a:	str	r6, [r4, #64]	; 0x40
  pbs->oemName[5] = ' ';
    362c:	strb	r3, [r4, #8]
  pbs->oemName[6] = ' ';
    362e:	strb	r3, [r4, #9]
  pbs->oemName[7] = ' ';
    3630:	strb	r3, [r4, #10]
  pbs->jmpInstruction[0] = 0XEB;
    3632:	movs	r3, #235	; 0xeb
    3634:	str	r6, [r4, #88]	; 0x58
  uint32_t checksum = 0;
    3636:	mov	r6, r8
  pbs->jmpInstruction[0] = 0XEB;
    3638:	strb	r3, [r4, #0]
  pbs->jmpInstruction[1] = 0X76;
    363a:	movs	r3, #118	; 0x76
  setLe64(pbs->bpb.volumeLength, volumeLength);
    363c:	str.w	r9, [r4, #72]	; 0x48
  pbs->jmpInstruction[1] = 0X76;
    3640:	strb	r3, [r4, #1]
  pbs->jmpInstruction[2] = 0X90;
    3642:	movs	r3, #144	; 0x90
  pbs->bpb.numberOfFats = 1;
    3644:	strb.w	sl, [r4, #110]	; 0x6e
  pbs->jmpInstruction[2] = 0X90;
    3648:	strb	r3, [r4, #2]
  pbs->oemName[0] = 'E';
    364a:	movs	r3, #69	; 0x45
    364c:	strb	r3, [r4, #3]
  pbs->oemName[1] = 'X';
    364e:	movs	r3, #88	; 0x58
    3650:	strb	r3, [r4, #4]
  pbs->oemName[2] = 'F';
    3652:	movs	r3, #70	; 0x46
    3654:	strb	r3, [r4, #5]
  pbs->oemName[3] = 'A';
    3656:	movs	r3, #65	; 0x41
    3658:	strb	r3, [r4, #6]
  pbs->oemName[4] = 'T';
    365a:	movs	r3, #84	; 0x54
    365c:	strb	r3, [r4, #7]
    365e:	movs	r3, #4
    3660:	str	r3, [r4, #96]	; 0x60
  *reinterpret_cast<uint16_t*>(dst) = src;
    3662:	mov.w	r3, #256	; 0x100
    3666:	strh.w	r3, [r4, #104]	; 0x68
  pbs->bpb.bytesPerSectorShift = BYTES_PER_SECTOR_SHIFT;
    366a:	movs	r3, #9
    366c:	strb.w	r3, [r4, #108]	; 0x6c
  pbs->bpb.driveSelect = 0X80;
    3670:	movs	r3, #128	; 0x80
  *reinterpret_cast<uint32_t*>(dst) = src;
    3672:	strd	r2, r2, [r4, #80]	; 0x50
    3676:	strb.w	r3, [r4, #111]	; 0x6f
    pbs->bootCode[i] = 0XF4;
    367a:	mov.w	r2, #390	; 0x186
    367e:	bl	e110 <memset>
  *reinterpret_cast<uint16_t*>(dst) = src;
    3682:	strh.w	fp, [r4, #510]	; 0x1fe
    if (i == offsetof(ExFatPbs_t, bpb.volumeFlags[0]) ||
    3686:	sub.w	r3, r8, #106	; 0x6a
    368a:	cmp	r3, #1
    368c:	bls.n	369c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x164>
    368e:	cmp.w	r8, #112	; 0x70
    3692:	beq.n	369c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x164>
  return (sum << 31) + (sum >> 1) + data;
    3694:	ldrb.w	r3, [r4, r8]
    3698:	add.w	r6, r3, r6, ror #1
  for (size_t i = 0; i < BYTES_PER_SECTOR; i++) {
    369c:	add.w	r8, r8, #1
    36a0:	cmp.w	r8, #512	; 0x200
    36a4:	bne.n	3686 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x14e>
  if (!dev->writeSector(sector, secBuf) ||
    36a6:	ldr	r3, [r5, #0]
    36a8:	mov	r2, r4
    36aa:	ldr.w	r9, [sp, #4]
    36ae:	mov	r0, r5
    36b0:	ldr	r3, [r3, #32]
    36b2:	mov	r1, r9
    36b4:	blx	r3
    36b6:	cbz	r0, 36cc <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
      !dev->writeSector(sector + BOOT_BACKUP_OFFSET, secBuf)) {
    36b8:	ldr	r3, [r5, #0]
    36ba:	mov	r1, r9
    36bc:	mov	r2, r4
    36be:	mov	r0, r5
    36c0:	ldr	r3, [r3, #32]
    36c2:	adds	r1, #12
    36c4:	str.w	r9, [sp, #4]
    36c8:	blx	r3
  if (!dev->writeSector(sector, secBuf) ||
    36ca:	cbnz	r0, 371e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1e6>
  writeMsg(pr, "Format failed\r\n");
    36cc:	cbz	r7, 36da <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1a2>
    36ce:	ldr	r3, [r7, #0]
    36d0:	movs	r2, #15
    36d2:	ldr	r1, [pc, #736]	; (39b4 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x47c>)
    36d4:	mov	r0, r7
    36d6:	ldr	r3, [r3, #4]
    36d8:	blx	r3
  return false;
    36da:	movs	r6, #0
}
    36dc:	mov	r0, r6
    36de:	add	sp, #36	; 0x24
    36e0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  fatLength = 1UL << (vs < 27 ? 13 : (vs + 1) / 2);
    36e4:	cmp	r3, #26
  sectorsPerClusterShift = vs < 29 ? 8 : (vs - 11) / 2;
    36e6:	mov.w	r8, #8
  fatLength = 1UL << (vs < 27 ? 13 : (vs + 1) / 2);
    36ea:	bhi.w	3a3a <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x502>
    36ee:	mov.w	r3, #16384	; 0x4000
  sectorsPerCluster = 1UL << sectorsPerClusterShift;
    36f2:	str.w	r8, [sp, #8]
    36f6:	str	r3, [sp, #4]
    36f8:	mov.w	r3, #32768	; 0x8000
    36fc:	str	r3, [sp, #12]
    36fe:	mov.w	r3, #256	; 0x100
    3702:	str	r3, [sp, #28]
  fatLength = 1UL << (vs < 27 ? 13 : (vs + 1) / 2);
    3704:	mov.w	r3, #8192	; 0x2000
    3708:	str	r3, [sp, #24]
    370a:	b.n	35a2 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x6a>
    writeMsg(pr, "Device is too small\r\n");
    370c:	cmp	r7, #0
    370e:	beq.n	36da <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1a2>
    3710:	ldr	r3, [r7, #0]
    3712:	movs	r2, #21
    3714:	ldr	r1, [pc, #672]	; (39b8 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x480>)
    3716:	mov	r0, r7
    3718:	ldr	r3, [r3, #4]
    371a:	blx	r3
  writeMsg(pr, "Format failed\r\n");
    371c:	b.n	36ce <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x196>
  memset(secBuf, 0, BYTES_PER_SECTOR);
    371e:	mov	r2, r8
    3720:	movs	r1, #0
    3722:	mov	r0, r4
  sector++;
    3724:	add.w	sl, r9, #1
  memset(secBuf, 0, BYTES_PER_SECTOR);
    3728:	bl	e110 <memset>
  *reinterpret_cast<uint16_t*>(dst) = src;
    372c:	movw	r3, #43605	; 0xaa55
    3730:	add.w	r2, r9, #9
    3734:	addw	r9, r4, #511	; 0x1ff
    3738:	strh.w	r3, [r4, #510]	; 0x1fe
    373c:	movs	r3, #0
    373e:	mov	fp, r2
  uint32_t checksum = 0;
    3740:	mov	r8, r4
    3742:	b.n	3748 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x210>
      checksum = exFatChecksum(checksum, secBuf[i]);
    3744:	ldrb.w	r3, [r8, #1]!
    for (size_t i = 0; i < BYTES_PER_SECTOR; i++) {
    3748:	cmp	r9, r8
  return (sum << 31) + (sum >> 1) + data;
    374a:	add.w	r6, r3, r6, ror #1
    374e:	bne.n	3744 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x20c>
    if (!dev->writeSector(sector, secBuf) ||
    3750:	ldr	r3, [r5, #0]
    3752:	mov	r2, r4
    3754:	mov	r1, sl
    3756:	mov	r0, r5
    3758:	ldr	r3, [r3, #32]
    375a:	blx	r3
    375c:	cmp	r0, #0
    375e:	beq.n	36cc <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
        !dev->writeSector(sector + BOOT_BACKUP_OFFSET, secBuf)) {
    3760:	ldr	r3, [r5, #0]
    3762:	mov	r2, r4
    3764:	add.w	r1, sl, #12
    3768:	mov	r0, r5
    376a:	ldr	r3, [r3, #32]
    376c:	blx	r3
    if (!dev->writeSector(sector, secBuf) ||
    376e:	cmp	r0, #0
    3770:	beq.n	36cc <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
    sector++;
    3772:	add.w	r3, sl, #1
  for (int j = 0; j < 8; j++) {
    3776:	cmp	fp, r3
    3778:	beq.n	3780 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x248>
      checksum = exFatChecksum(checksum, secBuf[i]);
    377a:	mov	sl, r3
    377c:	ldrb	r3, [r4, #0]
    377e:	b.n	3740 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x208>
  memset(secBuf, 0, BYTES_PER_SECTOR);
    3780:	mov.w	r2, #512	; 0x200
    3784:	movs	r1, #0
    3786:	mov	r0, r4
    3788:	mov	fp, r3
    378a:	bl	e110 <memset>
    378e:	movs	r2, #0
    3790:	add.w	sl, sl, #3
    3794:	mov	r1, r2
  *reinterpret_cast<uint16_t*>(dst) = src;
    3796:	mov	r3, r4
    3798:	b.n	379e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x266>
      checksum = exFatChecksum(checksum, secBuf[i]);
    379a:	ldrb.w	r1, [r3, #1]!
    for (size_t i = 0; i < BYTES_PER_SECTOR; i++) {
    379e:	cmp	r8, r3
  return (sum << 31) + (sum >> 1) + data;
    37a0:	add.w	r6, r1, r6, ror #1
    37a4:	bne.n	379a <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x262>
    if (!dev->writeSector(sector, secBuf) ||
    37a6:	ldr	r3, [r5, #0]
    37a8:	mov	r2, r4
    37aa:	mov	r1, fp
    37ac:	mov	r0, r5
    37ae:	ldr	r3, [r3, #32]
    37b0:	blx	r3
    37b2:	cmp	r0, #0
    37b4:	beq.n	36cc <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
        !dev->writeSector(sector + BOOT_BACKUP_OFFSET, secBuf)) {
    37b6:	ldr	r3, [r5, #0]
    37b8:	mov	r2, r4
    37ba:	add.w	r1, fp, #12
    37be:	mov	r0, r5
    37c0:	ldr	r3, [r3, #32]
    37c2:	blx	r3
    if (!dev->writeSector(sector, secBuf) ||
    37c4:	cmp	r0, #0
    37c6:	beq.n	36cc <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
    sector++;
    37c8:	add.w	r1, fp, #1
  for (int j = 0; j < 2; j++) {
    37cc:	cmp	sl, r1
    37ce:	bne.n	38a6 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x36e>
    37d0:	subs	r3, r4, #4
    37d2:	add.w	r2, r4, #508	; 0x1fc
  *reinterpret_cast<uint32_t*>(dst) = src;
    37d6:	str.w	r6, [r3, #4]!
  for (size_t i = 0; i < BYTES_PER_SECTOR; i += 4) {
    37da:	cmp	r2, r3
    37dc:	bne.n	37d6 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x29e>
  if (!dev->writeSector(sector, secBuf) ||
    37de:	ldr	r3, [r5, #0]
    37e0:	mov	r2, r4
    37e2:	mov	r0, r5
    37e4:	ldr	r3, [r3, #32]
    37e6:	blx	r3
    37e8:	cmp	r0, #0
    37ea:	beq.w	36cc <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
      !dev->writeSector(sector + BOOT_BACKUP_OFFSET, secBuf)) {
    37ee:	ldr	r3, [r5, #0]
    37f0:	add.w	r1, fp, #13
    37f4:	mov	r2, r4
    37f6:	mov	r0, r5
    37f8:	ldr	r3, [r3, #32]
    37fa:	blx	r3
  if (!dev->writeSector(sector, secBuf) ||
    37fc:	cmp	r0, #0
    37fe:	beq.w	36cc <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
  writeMsg(pr, "Writing FAT ");
    3802:	cbz	r7, 3810 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x2d8>
    3804:	ldr	r3, [r7, #0]
    3806:	movs	r2, #12
    3808:	ldr	r1, [pc, #432]	; (39bc <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x484>)
    380a:	mov	r0, r7
    380c:	ldr	r3, [r3, #4]
    380e:	blx	r3
  sector = partitionOffset + fatOffset;
    3810:	ldr	r2, [sp, #24]
  memset(secBuf, 0, BYTES_PER_SECTOR);
    3812:	movs	r1, #0
  sector = partitionOffset + fatOffset;
    3814:	ldr	r3, [sp, #4]
  memset(secBuf, 0, BYTES_PER_SECTOR);
    3816:	mov	r0, r4
  for (uint32_t i = 0; i < ns; i++) {
    3818:	movs	r6, #0
  sector = partitionOffset + fatOffset;
    381a:	add	r3, r2
  memset(secBuf, 0, BYTES_PER_SECTOR);
    381c:	mov.w	r2, #512	; 0x200
  sector = partitionOffset + fatOffset;
    3820:	mov	r9, r3
  ns = ((clusterCount + 2) * 4 + BYTES_PER_SECTOR - 1) / BYTES_PER_SECTOR;
    3822:	ldr	r3, [sp, #20]
    3824:	mov.w	r8, r3, lsl #2
  memset(secBuf, 0, BYTES_PER_SECTOR);
    3828:	bl	e110 <memset>
  secBuf[0] = 0XF8;
    382c:	mov	r3, r4
    secBuf[i] = 0XFF;
    382e:	mov.w	r2, #4294967295
  ns = ((clusterCount + 2) * 4 + BYTES_PER_SECTOR - 1) / BYTES_PER_SECTOR;
    3832:	addw	r8, r8, #519	; 0x207
  secBuf[0] = 0XF8;
    3836:	movs	r1, #248	; 0xf8
      writeMsg(pr, ".");
    3838:	subs.w	fp, r7, #0
  ns = ((clusterCount + 2) * 4 + BYTES_PER_SECTOR - 1) / BYTES_PER_SECTOR;
    383c:	mov.w	sl, r8, lsr #9
  secBuf[0] = 0XF8;
    3840:	strb.w	r1, [r3], #1
    if (i % (ns / 32) == 0) {
    3844:	mov.w	r8, r8, lsr #14
    secBuf[i] = 0XFF;
    3848:	str.w	r2, [r4, #1]
      writeMsg(pr, ".");
    384c:	it	ne
    384e:	movne.w	fp, #1
    secBuf[i] = 0XFF;
    3852:	str	r2, [r3, #12]
    3854:	str	r2, [r3, #4]
    3856:	str	r2, [r3, #8]
    3858:	str.w	r2, [r3, #15]
    385c:	b.n	3864 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x32c>
  for (uint32_t i = 0; i < ns; i++) {
    385e:	adds	r6, #1
    3860:	cmp	sl, r6
    3862:	beq.n	38ac <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x374>
    if (i % (ns / 32) == 0) {
    3864:	udiv	r3, r6, r8
    3868:	mls	r3, r8, r3, r6
      writeMsg(pr, ".");
    386c:	cbnz	r3, 3880 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x348>
    386e:	cmp.w	fp, #0
    3872:	beq.n	3880 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x348>
    3874:	ldr	r3, [r7, #0]
    3876:	movs	r2, #1
    3878:	ldr	r1, [pc, #324]	; (39c0 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x488>)
    387a:	mov	r0, r7
    387c:	ldr	r3, [r3, #4]
    387e:	blx	r3
    if (!dev->writeSector(sector + i, secBuf)) {
    3880:	ldr	r3, [r5, #0]
    3882:	add.w	r1, r9, r6
    3886:	mov	r2, r4
    3888:	mov	r0, r5
    388a:	ldr	r3, [r3, #32]
    388c:	blx	r3
    388e:	cmp	r0, #0
    3890:	beq.w	36cc <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
    if (i == 0) {
    3894:	cmp	r6, #0
    3896:	bne.n	385e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x326>
      memset(secBuf, 0, BYTES_PER_SECTOR);
    3898:	mov	r1, r6
    389a:	mov.w	r2, #512	; 0x200
    389e:	mov	r0, r4
    38a0:	bl	e110 <memset>
    38a4:	b.n	385e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x326>
      checksum = exFatChecksum(checksum, secBuf[i]);
    38a6:	mov	fp, r1
    38a8:	ldrb	r1, [r4, #0]
    38aa:	b.n	3796 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x25e>
  writeMsg(pr, "\r\n");
    38ac:	cmp	r7, #0
    38ae:	beq.n	391a <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x3e2>
    38b0:	ldr	r3, [r7, #0]
    38b2:	movs	r2, #2
    38b4:	ldr	r1, [pc, #268]	; (39c4 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x48c>)
    38b6:	mov	r0, r7
    38b8:	ldr	r3, [r3, #4]
    38ba:	blx	r3
  bitmapSize = (clusterCount + 7) / 8;
    38bc:	ldr	r6, [sp, #20]
  if (ns > sectorsPerCluster) {
    38be:	ldr	r2, [sp, #28]
  bitmapSize = (clusterCount + 7) / 8;
    38c0:	adds	r6, #7
    38c2:	lsrs	r6, r6, #3
  ns = (bitmapSize + BYTES_PER_SECTOR - 1) / BYTES_PER_SECTOR;
    38c4:	addw	r3, r6, #511	; 0x1ff
  if (ns > sectorsPerCluster) {
    38c8:	cmp.w	r2, r3, lsr #9
  ns = (bitmapSize + BYTES_PER_SECTOR - 1) / BYTES_PER_SECTOR;
    38cc:	mov.w	r9, r3, lsr #9
  if (ns > sectorsPerCluster) {
    38d0:	bcc.w	36ce <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x196>
  memset(secBuf, 0, BYTES_PER_SECTOR);
    38d4:	mov.w	r2, #512	; 0x200
    38d8:	movs	r1, #0
    38da:	mov	r0, r4
    38dc:	bl	e110 <memset>
  secBuf[0] = 0X7;
    38e0:	movs	r3, #7
    38e2:	strb	r3, [r4, #0]
  for (uint32_t i = 0; i < ns; i++) {
    38e4:	cmp.w	r9, #0
    38e8:	beq.w	3a00 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x4c8>
    38ec:	mov.w	r8, #0
    38f0:	b.n	3904 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x3cc>
    if (i == 0) {
    38f2:	cmp.w	r8, #0
    38f6:	bne.n	38fc <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x3c4>
      secBuf[0] = 0;
    38f8:	strb.w	r8, [r4]
  for (uint32_t i = 0; i < ns; i++) {
    38fc:	add.w	r8, r8, #1
    3900:	cmp	r9, r8
    3902:	bls.n	39fc <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x4c4>
    if (!dev->writeSector(sector + i, secBuf)) {
    3904:	ldr	r2, [sp, #12]
    3906:	mov	r0, r5
    3908:	ldr	r3, [r5, #0]
    390a:	add.w	r1, r2, r8
    390e:	mov	r2, r4
    3910:	ldr	r3, [r3, #32]
    3912:	blx	r3
    3914:	cmp	r0, #0
    3916:	bne.n	38f2 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x3ba>
    3918:	b.n	36cc <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
  bitmapSize = (clusterCount + 7) / 8;
    391a:	ldr	r6, [sp, #20]
  if (ns > sectorsPerCluster) {
    391c:	ldr	r2, [sp, #28]
  bitmapSize = (clusterCount + 7) / 8;
    391e:	adds	r6, #7
    3920:	lsrs	r6, r6, #3
  ns = (bitmapSize + BYTES_PER_SECTOR - 1) / BYTES_PER_SECTOR;
    3922:	addw	r3, r6, #511	; 0x1ff
  if (ns > sectorsPerCluster) {
    3926:	cmp.w	r2, r3, lsr #9
  ns = (bitmapSize + BYTES_PER_SECTOR - 1) / BYTES_PER_SECTOR;
    392a:	mov.w	r9, r3, lsr #9
  if (ns > sectorsPerCluster) {
    392e:	bcc.w	36da <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1a2>
  memset(secBuf, 0, BYTES_PER_SECTOR);
    3932:	mov.w	r2, #512	; 0x200
    3936:	mov	r1, r7
    3938:	mov	r0, r4
    393a:	bl	e110 <memset>
  secBuf[0] = 0X7;
    393e:	movs	r3, #7
    3940:	strb	r3, [r4, #0]
  for (uint32_t i = 0; i < ns; i++) {
    3942:	cmp.w	r9, #0
    3946:	bne.n	38ec <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x3b4>
  if (!writeUpcase(partitionOffset + clusterHeapOffset + sectorsPerCluster)) {
    3948:	ldr	r3, [sp, #12]
    394a:	ldr	r2, [sp, #28]
    394c:	ldr	r0, [sp, #16]
    394e:	adds	r1, r3, r2
    3950:	bl	3488 <ExFatFormatter::writeUpcase(unsigned long)>
    3954:	cmp	r0, #0
    3956:	beq.w	36da <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1a2>
  if (m_upcaseSize > BYTES_PER_SECTOR * sectorsPerCluster) {
    395a:	ldr	r2, [sp, #8]
    395c:	mov.w	r3, #512	; 0x200
    3960:	lsls	r3, r2
    3962:	ldr	r2, [sp, #16]
    3964:	ldr	r2, [r2, #8]
    3966:	cmp	r2, r3
    3968:	bhi.w	36da <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1a2>
  sector = partitionOffset + clusterHeapOffset + 2 * sectorsPerCluster;
    396c:	mov.w	r8, #2
    3970:	ldr	r3, [sp, #8]
  memset(secBuf, 0, BYTES_PER_SECTOR);
    3972:	mov.w	r2, #512	; 0x200
    3976:	movs	r1, #0
  sector = partitionOffset + clusterHeapOffset + 2 * sectorsPerCluster;
    3978:	lsl.w	r9, r8, r3
    397c:	ldr	r3, [sp, #12]
  memset(secBuf, 0, BYTES_PER_SECTOR);
    397e:	mov	r0, r4
  sector = partitionOffset + clusterHeapOffset + 2 * sectorsPerCluster;
    3980:	add	r9, r3
  memset(secBuf, 0, BYTES_PER_SECTOR);
    3982:	bl	e110 <memset>
  dbm->type = EXFAT_TYPE_BITMAP;
    3986:	movs	r2, #129	; 0x81
  label->type = EXFAT_TYPE_LABEL & 0X7F;
    3988:	movs	r3, #3
  setLe32(dup->checksum, m_upcaseChecksum);
    398a:	ldr	r1, [sp, #16]
    398c:	add.w	r9, r9, #4294967295
  dbm->type = EXFAT_TYPE_BITMAP;
    3990:	strb.w	r2, [r4, #32]
  dup->type = EXFAT_TYPE_UPCASE;
    3994:	movs	r2, #130	; 0x82
  label->type = EXFAT_TYPE_LABEL & 0X7F;
    3996:	strb	r3, [r4, #0]
  dup->type = EXFAT_TYPE_UPCASE;
    3998:	strb.w	r2, [r4, #64]	; 0x40
  setLe64(dbm->size, bitmapSize);
    399c:	strd	r8, r6, [r4, #52]	; 0x34
  setLe32(dup->checksum, m_upcaseChecksum);
    39a0:	ldr	r2, [r1, #4]
  *reinterpret_cast<uint64_t*>(dst) = src;
    39a2:	mov.w	r8, #1
  *reinterpret_cast<uint32_t*>(dst) = src;
    39a6:	str	r3, [r4, #84]	; 0x54
    39a8:	str	r2, [r4, #68]	; 0x44
  setLe64(dup->size, m_upcaseSize);
    39aa:	ldr	r3, [r1, #8]
    39ac:	str	r3, [r4, #88]	; 0x58
  setLe64(dbm->size, bitmapSize);
    39ae:	movs	r3, #0
  setLe64(dup->size, m_upcaseSize);
    39b0:	str	r3, [r4, #92]	; 0x5c
  for (uint32_t i = 0; i < ns; i++) {
    39b2:	b.n	39d2 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x49a>
    39b4:	.word	0x2000082c
    39b8:	.word	0x200007c8
    39bc:	.word	0x200007e0
    39c0:	.word	0x200007f0
    39c4:	.word	0x20000808
    39c8:	ldr	r3, [sp, #28]
    39ca:	cmp	r8, r3
    39cc:	bcs.n	3a46 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x50e>
    39ce:	add.w	r8, r8, #1
    if (!dev->writeSector(sector + i, secBuf)) {
    39d2:	ldr	r3, [r5, #0]
    39d4:	add.w	r1, r9, r8
    39d8:	mov	r2, r4
    39da:	mov	r0, r5
    39dc:	ldr	r3, [r3, #32]
    39de:	blx	r3
    39e0:	mov	r6, r0
    39e2:	cmp	r0, #0
    39e4:	beq.w	36cc <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
    if (i == 0) {
    39e8:	cmp.w	r8, #1
    39ec:	bne.n	39c8 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x490>
      memset(secBuf, 0, BYTES_PER_SECTOR);
    39ee:	mov.w	r2, #512	; 0x200
    39f2:	movs	r1, #0
    39f4:	mov	r0, r4
    39f6:	bl	e110 <memset>
  for (uint32_t i = 0; i < ns; i++) {
    39fa:	b.n	39ce <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x496>
  writeMsg(pr, "Writing upcase table\r\n");
    39fc:	cmp	r7, #0
    39fe:	beq.n	3948 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x410>
    3a00:	ldr	r3, [r7, #0]
    3a02:	movs	r2, #22
    3a04:	ldr	r1, [pc, #80]	; (3a58 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x520>)
    3a06:	mov	r0, r7
    3a08:	ldr	r3, [r3, #4]
    3a0a:	blx	r3
  if (!writeUpcase(partitionOffset + clusterHeapOffset + sectorsPerCluster)) {
    3a0c:	ldr	r3, [sp, #12]
    3a0e:	ldr	r2, [sp, #28]
    3a10:	ldr	r0, [sp, #16]
    3a12:	adds	r1, r3, r2
    3a14:	bl	3488 <ExFatFormatter::writeUpcase(unsigned long)>
    3a18:	cmp	r0, #0
    3a1a:	beq.w	36ce <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x196>
  if (m_upcaseSize > BYTES_PER_SECTOR * sectorsPerCluster) {
    3a1e:	ldr	r2, [sp, #8]
    3a20:	mov.w	r3, #512	; 0x200
    3a24:	lsls	r3, r2
    3a26:	ldr	r2, [sp, #16]
    3a28:	ldr	r2, [r2, #8]
    3a2a:	cmp	r2, r3
    3a2c:	bhi.w	36ce <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x196>
  writeMsg(pr, "Writing root\r\n");
    3a30:	ldr	r1, [pc, #40]	; (3a5c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x524>)
    3a32:	mov	r0, r7
    3a34:	bl	33ac <Print::write(char const*) [clone .isra.0]>
    3a38:	b.n	396c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x434>
  sectorsPerCluster = 1UL << sectorsPerClusterShift;
    3a3a:	mov.w	r2, #256	; 0x100
    3a3e:	str.w	r8, [sp, #8]
    3a42:	str	r2, [sp, #28]
    3a44:	b.n	358a <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x52>
  writeMsg(pr, "Format done\r\n");
    3a46:	cmp	r7, #0
    3a48:	beq.w	36dc <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1a4>
    3a4c:	ldr	r1, [pc, #16]	; (3a60 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x528>)
    3a4e:	mov	r0, r7
    3a50:	bl	33ac <Print::write(char const*) [clone .isra.0]>
    3a54:	b.n	36dc <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1a4>
    3a56:	nop
    3a58:	.word	0x200007f4
    3a5c:	.word	0x2000080c
    3a60:	.word	0x2000081c

00003a64 <ExFatFile::cmpName(DirName_t const*, ExName_t*)>:
  hash = ((hash << 15) | (hash >> 1)) + (c & 0XFF);
  hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
  return hash;
}
//------------------------------------------------------------------------------
bool ExFatFile::cmpName(const DirName_t* dirName, ExName_t* fname) {
    3a64:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  const char* next;
  /** Position one beyond last LFN character. */
  const char* end;
#if !USE_UTF8_LONG_NAMES
  /** \return true if at end. */
  bool atEnd() { return next == end; }
    3a68:	ldrd	r3, r8, [r2, #4]
    3a6c:	add.w	r9, r3, #15
  return *reinterpret_cast<const uint16_t*>(src);
    3a70:	ldrh.w	r0, [r1, #2]!
  for (uint8_t i = 0; i < 15; i++) {
    uint16_t u = getLe16(dirName->unicode + 2 * i);
    if (fname->atEnd()) {
    3a74:	cmp	r8, r3
  /** Reset to start of LFN. */
  void reset() { next = begin; }
  /** \return next char of LFN. */
  char getch() { return atEnd() ? 0 : *next++; }
    3a76:	add.w	r3, r3, #1
    if (toUpcase(cp) != toUpcase(u)) {
      return false;
    }
#else   // USE_UTF8_LONG_NAMES
    char c = fname->getch();
    if (u >= 0x7F || toUpper(c) != toUpper(u)) {
    3a7a:	uxtb.w	ip, r0
    if (fname->atEnd()) {
    3a7e:	beq.n	3abe <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x5a>
    3a80:	str	r3, [r2, #4]
    if (u >= 0x7F || toUpper(c) != toUpper(u)) {
    3a82:	cmp	r0, #126	; 0x7e
    3a84:	ldrb.w	lr, [r3, #-1]
static char toUpper(char c) { return 'a' <= c && c <= 'z' ? c - 'a' + 'A' : c; }
    3a88:	sub.w	r4, ip, #97	; 0x61
    3a8c:	sub.w	r6, ip, #32
    3a90:	sub.w	r5, lr, #97	; 0x61
    3a94:	sub.w	r7, lr, #32
    if (u >= 0x7F || toUpper(c) != toUpper(u)) {
    3a98:	bhi.n	3ab8 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x54>
static char toUpper(char c) { return 'a' <= c && c <= 'z' ? c - 'a' + 'A' : c; }
    3a9a:	cmp	r5, #25
    3a9c:	it	ls
    3a9e:	uxtbls.w	lr, r7
    3aa2:	cmp	r4, #25
    3aa4:	it	ls
    3aa6:	uxtbls.w	ip, r6
    if (u >= 0x7F || toUpper(c) != toUpper(u)) {
    3aaa:	cmp	ip, lr
    3aac:	bne.n	3ab8 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x54>
  for (uint8_t i = 0; i < 15; i++) {
    3aae:	cmp	r9, r3
    3ab0:	bne.n	3a70 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0xc>
      return false;
    }
#endif  // USE_UTF8_LONG_NAMES
  }
  return true;
    3ab2:	movs	r0, #1
}
    3ab4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return false;
    3ab8:	movs	r0, #0
}
    3aba:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return u == 0;
    3abe:	clz	r0, r0
    3ac2:	lsrs	r0, r0, #5
}
    3ac4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00003ac8 <ExFatFile::getName7(char*, unsigned int)>:
//------------------------------------------------------------------------------
size_t ExFatFile::getName7(char* name, size_t count) {
    3ac8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  DirName_t* dn;
  size_t n = 0;
  if (!isOpen()) {
    3acc:	ldrb.w	r3, [r0, #49]	; 0x31
size_t ExFatFile::getName7(char* name, size_t count) {
    3ad0:	mov	r7, r1
  if (!isOpen()) {
    3ad2:	cbz	r3, 3b3a <ExFatFile::getName7(char*, unsigned int)+0x72>
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t is = 2; is <= m_setCount; is++) {
    3ad4:	ldrb.w	r3, [r0, #48]	; 0x30
    3ad8:	mov	r6, r0
    3ada:	cmp	r3, #1
    3adc:	bls.n	3b46 <ExFatFile::getName7(char*, unsigned int)+0x7e>
    3ade:	mov	r5, r2
    3ae0:	mov.w	r8, #2
  size_t n = 0;
    3ae4:	movs	r4, #0
    dn = reinterpret_cast<DirName_t*>(dirCache(is, FsCache::CACHE_FOR_READ));
    3ae6:	movs	r2, #0
    3ae8:	mov	r1, r8
    3aea:	mov	r0, r6
    3aec:	bl	3bb0 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
    3af0:	mov	ip, r0
    3af2:	cbz	r0, 3b3a <ExFatFile::getName7(char*, unsigned int)+0x72>
    3af4:	ldrb	r3, [r0, #0]
    3af6:	cmp	r3, #193	; 0xc1
    3af8:	bne.n	3b3a <ExFatFile::getName7(char*, unsigned int)+0x72>
    3afa:	add.w	lr, r4, #4294967295
    3afe:	add.w	r2, r4, #15
    3b02:	add	lr, r7
    3b04:	ldrh.w	r3, [ip, #2]!
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (uint8_t in = 0; in < 15; in++) {
      uint16_t c = getLe16(dn->unicode + 2 * in);
      if (c == 0) {
    3b08:	cbz	r3, 3b2e <ExFatFile::getName7(char*, unsigned int)+0x66>
        goto done;
      }
      if ((n + 1) >= count) {
    3b0a:	adds	r4, #1
    3b0c:	cmp	r4, r5
    3b0e:	bcs.n	3b3a <ExFatFile::getName7(char*, unsigned int)+0x72>
        DBG_FAIL_MACRO;
        goto fail;
      }
      name[n++] = c < 0X7F ? c : '?';
    3b10:	cmp	r3, #127	; 0x7f
    3b12:	it	cs
    3b14:	movcs	r3, #63	; 0x3f
    for (uint8_t in = 0; in < 15; in++) {
    3b16:	cmp	r4, r2
      name[n++] = c < 0X7F ? c : '?';
    3b18:	strb.w	r3, [lr, #1]!
    for (uint8_t in = 0; in < 15; in++) {
    3b1c:	bne.n	3b04 <ExFatFile::getName7(char*, unsigned int)+0x3c>
  for (uint8_t is = 2; is <= m_setCount; is++) {
    3b1e:	add.w	r8, r8, #1
    3b22:	ldrb.w	r3, [r6, #48]	; 0x30
    3b26:	uxtb.w	r8, r8
    3b2a:	cmp	r3, r8
    3b2c:	bcs.n	3ae6 <ExFatFile::getName7(char*, unsigned int)+0x1e>
    }
  }
done:
  name[n] = 0;
    3b2e:	add	r7, r4
    3b30:	movs	r3, #0
  return n;

fail:
  *name = 0;
  return 0;
}
    3b32:	mov	r0, r4
  name[n] = 0;
    3b34:	strb	r3, [r7, #0]
}
    3b36:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  *name = 0;
    3b3a:	movs	r3, #0
  return 0;
    3b3c:	mov	r4, r3
  *name = 0;
    3b3e:	strb	r3, [r7, #0]
}
    3b40:	mov	r0, r4
    3b42:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  size_t n = 0;
    3b46:	movs	r4, #0
    3b48:	b.n	3b30 <ExFatFile::getName7(char*, unsigned int)+0x68>
    3b4a:	nop

00003b4c <ExFatFile::hashName(ExName_t*)>:
fail:
  *name = 0;
  return 0;
}
//------------------------------------------------------------------------------
bool ExFatFile::hashName(ExName_t* fname) {
    3b4c:	push	{r4, r5, lr}
  void reset() { next = begin; }
    3b4e:	ldr	r5, [r1, #0]
  bool atEnd() { return next == end; }
    3b50:	ldr	r4, [r1, #8]
  void reset() { next = begin; }
    3b52:	str	r5, [r1, #4]
    }
    hash = exFatHash(u, hash);
    fname->nameLength++;
  }
#else   // USE_UTF8_LONG_NAMES
  while (!fname->atEnd()) {
    3b54:	cmp	r4, r5
    3b56:	beq.n	3ba4 <ExFatFile::hashName(ExName_t*)+0x58>
    3b58:	mov	r2, r5
  uint16_t hash = 0;
    3b5a:	movs	r3, #0
  char getch() { return atEnd() ? 0 : *next++; }
    3b5c:	adds	r2, #1
  hash = ((hash << 15) | (hash >> 1)) + u;
    3b5e:	lsls	r0, r3, #15
    3b60:	str	r2, [r1, #4]
    3b62:	orr.w	r3, r0, r3, lsr #1
    3b66:	ldrb.w	r0, [r2, #-1]
static char toUpper(char c) { return 'a' <= c && c <= 'z' ? c - 'a' + 'A' : c; }
    3b6a:	sub.w	ip, r0, #97	; 0x61
    3b6e:	sub.w	lr, r0, #32
    3b72:	cmp.w	ip, #25
    3b76:	it	ls
    3b78:	uxtbls.w	r0, lr
  while (!fname->atEnd()) {
    3b7c:	cmp	r4, r2
  hash = ((hash << 15) | (hash >> 1)) + u;
    3b7e:	add	r3, r0
  hash = ((hash << 15) | (hash >> 1));
    3b80:	mov.w	r0, r3, lsl #15
    3b84:	ubfx	r3, r3, #1, #15
    3b88:	and.w	r0, r0, #32768	; 0x8000
    3b8c:	orr.w	r3, r3, r0
  while (!fname->atEnd()) {
    3b90:	bne.n	3b5c <ExFatFile::hashName(ExName_t*)+0x10>
    // Convert to byte for smaller exFatHash.
    char c = fname->getch();
    hash = exFatHash(c, hash);
  }
  fname->nameLength = fname->end - fname->begin;
    3b92:	subs	r4, r4, r5
#endif  // USE_UTF8_LONG_NAMES
  fname->nameHash = hash;
    3b94:	strh	r3, [r1, #16]
  if (!fname->nameLength || fname->nameLength > EXFAT_MAX_NAME_LENGTH) {
    3b96:	subs	r0, r4, #1
  fname->nameLength = fname->end - fname->begin;
    3b98:	str	r4, [r1, #12]
  if (!fname->nameLength || fname->nameLength > EXFAT_MAX_NAME_LENGTH) {
    3b9a:	cmp	r0, #254	; 0xfe
    3b9c:	ite	hi
    3b9e:	movhi	r0, #0
    3ba0:	movls	r0, #1
  }
  return true;

fail:
  return false;
}
    3ba2:	pop	{r4, r5, pc}
  while (!fname->atEnd()) {
    3ba4:	movs	r0, #0
    3ba6:	mov	r4, r0
  uint16_t hash = 0;
    3ba8:	mov	r3, r0
  fname->nameLength = fname->end - fname->begin;
    3baa:	str	r4, [r1, #12]
  fname->nameHash = hash;
    3bac:	strh	r3, [r1, #16]
}
    3bae:	pop	{r4, r5, pc}

00003bb0 <ExFatFile::dirCache(unsigned char, unsigned char)>:
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    3bb0:	push	{r4, r5, r6, lr}
  DirPos_t pos = m_dirPos;
    3bb2:	add.w	r3, r0, #36	; 0x24
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    3bb6:	sub	sp, #16
    3bb8:	mov	ip, r1
    3bba:	mov	r4, r0
  DirPos_t pos = m_dirPos;
    3bbc:	add	r5, sp, #4
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    3bbe:	mov	r6, r2
  DirPos_t pos = m_dirPos;
    3bc0:	ldmia.w	r3, {r0, r1, r2}
    3bc4:	stmia.w	r5, {r0, r1, r2}
  if (m_vol->dirSeek(&pos, FS_DIR_SIZE * set) != 1) {
    3bc8:	mov.w	r2, ip, lsl #5
    3bcc:	mov	r1, r5
    3bce:	ldr	r0, [r4, #32]
    3bd0:	bl	46a8 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    3bd4:	cmp	r0, #1
    3bd6:	bne.n	3be6 <ExFatFile::dirCache(unsigned char, unsigned char)+0x36>
  return m_vol->dirCache(&pos, options);
    3bd8:	mov	r2, r6
    3bda:	mov	r1, r5
    3bdc:	ldr	r0, [r4, #32]
    3bde:	bl	4670 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
}
    3be2:	add	sp, #16
    3be4:	pop	{r4, r5, r6, pc}
    return nullptr;
    3be6:	movs	r0, #0
}
    3be8:	add	sp, #16
    3bea:	pop	{r4, r5, r6, pc}

00003bec <ExFatFile::close()>:
bool ExFatFile::close() {
    3bec:	push	{r4, lr}
    3bee:	mov	r4, r0
  bool rtn = sync();
    3bf0:	bl	4cc4 <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    3bf4:	movs	r3, #0
    3bf6:	strb.w	r3, [r4, #49]	; 0x31
  m_flags = 0;
    3bfa:	strb.w	r3, [r4, #51]	; 0x33
}
    3bfe:	pop	{r4, pc}

00003c00 <ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)>:
bool ExFatFile::getCreateDateTime(uint16_t* pdate, uint16_t* ptime) {
    3c00:	push	{r3, r4, r5, lr}
    3c02:	mov	r4, r2
    3c04:	mov	r5, r1
      m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_READ));
    3c06:	movs	r2, #0
    3c08:	add.w	r1, r0, #36	; 0x24
    3c0c:	ldr	r0, [r0, #32]
    3c0e:	bl	4670 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    3c12:	mov	r3, r0
    3c14:	cbz	r0, 3c20 <ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)+0x20>
    3c16:	ldrh	r2, [r0, #10]
  return true;
    3c18:	movs	r0, #1
  *pdate = getLe16(df->createDate);
    3c1a:	strh	r2, [r5, #0]
    3c1c:	ldrh	r3, [r3, #8]
  *ptime = getLe16(df->createTime);
    3c1e:	strh	r3, [r4, #0]
}
    3c20:	pop	{r3, r4, r5, pc}
    3c22:	nop

00003c24 <ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)>:
bool ExFatFile::getModifyDateTime(uint16_t* pdate, uint16_t* ptime) {
    3c24:	push	{r3, r4, r5, lr}
    3c26:	mov	r4, r2
    3c28:	mov	r5, r1
      m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_READ));
    3c2a:	movs	r2, #0
    3c2c:	add.w	r1, r0, #36	; 0x24
    3c30:	ldr	r0, [r0, #32]
    3c32:	bl	4670 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    3c36:	mov	r3, r0
    3c38:	cbz	r0, 3c44 <ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)+0x20>
    3c3a:	ldrh	r2, [r0, #14]
  return true;
    3c3c:	movs	r0, #1
  *pdate = getLe16(df->modifyDate);
    3c3e:	strh	r2, [r5, #0]
    3c40:	ldrh	r3, [r3, #12]
  *ptime = getLe16(df->modifyTime);
    3c42:	strh	r3, [r4, #0]
}
    3c44:	pop	{r3, r4, r5, pc}
    3c46:	nop

00003c48 <ExFatFile::openRoot(ExFatVolume*)>:
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRoot(ExFatVolume* vol) {
    3c48:	push	{r3, r4, r5, lr}
    3c4a:	mov	r5, r1
  if (isOpen()) {
    3c4c:	ldrb.w	r1, [r0, #49]	; 0x31
    3c50:	cbz	r1, 3c56 <ExFatFile::openRoot(ExFatVolume*)+0xe>
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
  return true;

fail:
  return false;
    3c52:	movs	r0, #0
}
    3c54:	pop	{r3, r4, r5, pc}
  memset(this, 0, sizeof(ExFatFile));
    3c56:	movs	r2, #56	; 0x38
    3c58:	mov	r4, r0
    3c5a:	bl	e110 <memset>
  m_flags = FILE_FLAG_READ;
    3c5e:	movs	r3, #1
  m_attributes = FILE_ATTR_ROOT;
    3c60:	movs	r2, #64	; 0x40
  m_vol = vol;
    3c62:	str	r5, [r4, #32]
  m_flags = FILE_FLAG_READ;
    3c64:	mov	r0, r3
    3c66:	strb.w	r3, [r4, #51]	; 0x33
  m_attributes = FILE_ATTR_ROOT;
    3c6a:	strb.w	r2, [r4, #49]	; 0x31
}
    3c6e:	pop	{r3, r4, r5, pc}

00003c70 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>:
//------------------------------------------------------------------------------
bool ExFatFile::parsePathName(const char* path, ExName_t* fname,
                              const char** ptr) {
    3c70:	push	{r4, r5, r6, r7}
    3c72:	mov	r5, r1
  // Skip leading spaces.
  while (*path == ' ') {
    3c74:	ldrb	r1, [r1, #0]
    3c76:	cmp	r1, #32
    3c78:	bne.n	3c82 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x12>
    3c7a:	ldrb.w	r4, [r5, #1]!
    3c7e:	cmp	r4, #32
    3c80:	beq.n	3c7a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa>
    path++;
  }
  fname->begin = path;
    3c82:	str	r5, [r2, #0]
  fname->end = path;
    3c84:	str	r5, [r2, #8]
  while (*path && !isDirSeparator(*path)) {
    3c86:	ldrb	r4, [r5, #0]
    3c88:	cmp	r4, #47	; 0x2f
    3c8a:	beq.n	3cb0 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x40>
    3c8c:	cbz	r4, 3cb0 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x40>
    3c8e:	adds	r6, r5, #1
    3c90:	cmp	r4, #60	; 0x3c
    3c92:	ldr	r7, [pc, #120]	; (3d0c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x9c>)
    uint8_t c = *path++;
    3c94:	mov	r5, r6
  return !(lfnReservedChar(c) || c & 0X80);
    3c96:	bhi.n	3cee <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x7e>
    3c98:	cmp	r4, #33	; 0x21
    3c9a:	bhi.n	3cc2 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x52>
    3c9c:	add.w	ip, r4, #4294967295
    3ca0:	cmp.w	ip, #30
    3ca4:	bhi.n	3cd4 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x64>
  *ptr = path;
  return hashName(fname);

fail:
  return false;
}
    3ca6:	movs	r0, #0
    3ca8:	pop	{r4, r5, r6, r7}
    3caa:	bx	lr
  for (; *path == ' ' || isDirSeparator(*path); path++) {
    3cac:	ldrb.w	r4, [r5, #1]!
    3cb0:	cmp	r4, #32
    3cb2:	beq.n	3cac <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x3c>
    3cb4:	cmp	r4, #47	; 0x2f
    3cb6:	beq.n	3cac <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x3c>
  *ptr = path;
    3cb8:	str	r5, [r3, #0]
  return hashName(fname);
    3cba:	mov	r1, r2
}
    3cbc:	pop	{r4, r5, r6, r7}
  return hashName(fname);
    3cbe:	b.w	3b4c <ExFatFile::hashName(ExName_t*)>
    3cc2:	sub.w	ip, r4, #34	; 0x22
    3cc6:	uxtb.w	ip, ip
    3cca:	lsr.w	ip, r7, ip
    3cce:	tst.w	ip, #1
    3cd2:	bne.n	3ca6 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x36>
    if (c != '.' && c != ' ') {
    3cd4:	cmp	r4, #46	; 0x2e
    3cd6:	beq.n	3cdc <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x6c>
    3cd8:	cmp	r4, #32
    3cda:	bne.n	3cfc <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x8c>
  while (*path && !isDirSeparator(*path)) {
    3cdc:	ldrb.w	r4, [r6], #1
    3ce0:	cmp	r4, #0
    3ce2:	beq.n	3cb0 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x40>
    3ce4:	cmp	r4, #47	; 0x2f
    3ce6:	beq.n	3cb0 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x40>
    uint8_t c = *path++;
    3ce8:	cmp	r4, #60	; 0x3c
    3cea:	mov	r5, r6
  return !(lfnReservedChar(c) || c & 0X80);
    3cec:	bls.n	3c98 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x28>
    3cee:	cmp	r4, #92	; 0x5c
    3cf0:	beq.n	3ca6 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x36>
    3cf2:	bls.n	3d00 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x90>
    3cf4:	cmp	r4, #124	; 0x7c
    3cf6:	beq.n	3ca6 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x36>
    3cf8:	lsls	r1, r4, #24
    3cfa:	bmi.n	3ca6 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x36>
      fname->end = path;
    3cfc:	str	r6, [r2, #8]
    3cfe:	b.n	3cdc <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x6c>
    3d00:	subs	r4, #62	; 0x3e
    3d02:	cmp	r4, #1
    3d04:	bhi.n	3cfc <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x8c>
}
    3d06:	movs	r0, #0
    3d08:	pop	{r4, r5, r6, r7}
    3d0a:	bx	lr
    3d0c:	.word	0x05002101

00003d10 <ExFatFile::read(void*, unsigned int)>:
  m_curPosition = saveCurPosition;
  m_curCluster = saveCurCluster;
  return c;
}
//------------------------------------------------------------------------------
int ExFatFile::read(void* buf, size_t count) {
    3d10:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  bool isReadable() const { return m_flags & FILE_FLAG_READ; }
    3d14:	ldrb.w	r3, [r0, #51]	; 0x33
    3d18:	sub	sp, #12
    3d1a:	mov	r5, r0
  uint8_t* cache;
  uint16_t sectorOffset;
  uint32_t sector;
  uint32_t clusterOffset;

  if (!isReadable()) {
    3d1c:	lsls	r4, r3, #31
    3d1e:	bpl.n	3e0a <ExFatFile::read(void*, unsigned int)+0xfa>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isContiguous() || isFile()) {
    3d20:	lsls	r0, r3, #25
    3d22:	mov	r7, r1
    3d24:	mov	r8, r2
    3d26:	bpl.w	3e8a <ExFatFile::read(void*, unsigned int)+0x17a>
    if ((m_curPosition + count) > m_validLength) {
    3d2a:	ldrd	r2, r3, [r5]
    3d2e:	ldrd	r1, r0, [r5, #16]
    3d32:	adds.w	r4, r8, r2
    3d36:	adc.w	r3, r3, #0
    3d3a:	cmp	r1, r4
    3d3c:	sbcs.w	r3, r0, r3
    3d40:	bcc.w	3e96 <ExFatFile::read(void*, unsigned int)+0x186>
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    3d44:	cmp.w	r8, #0
    3d48:	beq.n	3e02 <ExFatFile::read(void*, unsigned int)+0xf2>
    if ((m_curPosition + count) > m_validLength) {
    3d4a:	mov	r6, r8
        m_curCluster =
            isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
      } else if (isContiguous()) {
        m_curCluster++;
      } else {
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    3d4c:	add.w	r9, r5, #24
    if ((m_curPosition + count) > m_validLength) {
    3d50:	ldrd	r3, r2, [r5]
    clusterOffset = m_curPosition & m_vol->clusterMask();
    3d54:	ldr.w	sl, [r5, #32]
    3d58:	ldr.w	r4, [sl, #1080]	; 0x438
    3d5c:	ands	r4, r3
    sectorOffset = clusterOffset & m_vol->sectorMask();
    3d5e:	ubfx	fp, r4, #0, #9
    if (clusterOffset == 0) {
    3d62:	cmp	r4, #0
    3d64:	bne.n	3e48 <ExFatFile::read(void*, unsigned int)+0x138>
      if (m_curPosition == 0) {
    3d66:	orrs	r3, r2
    3d68:	bne.n	3e4c <ExFatFile::read(void*, unsigned int)+0x13c>
            isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
    3d6a:	ldrb.w	r3, [r5, #49]	; 0x31
    3d6e:	lsls	r2, r3, #25
   *
   * \return true if busy else false.
   */
  bool isBusy() { return m_blockDev->isBusy(); }
  /** \return the root directory start cluster number. */
  uint32_t rootDirectoryCluster() const { return m_rootDirectoryCluster; }
    3d70:	ite	mi
    3d72:	ldrmi.w	r2, [sl, #1076]	; 0x434
    3d76:	ldrpl	r2, [r5, #28]
        m_curCluster++;
    3d78:	str	r2, [r5, #24]
  bool dataCacheSync() { return m_dataCache.sync(); }
  //----------------------------------------------------------------------------
  uint32_t clusterMask() const { return m_clusterMask; }
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    3d7a:	ldrb.w	r0, [sl, #1093]	; 0x445
    3d7e:	subs	r2, #2
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
    3d80:	ldr.w	r1, [sl, #1068]	; 0x42c
             (clusterOffset >> m_vol->bytesPerSectorShift());
    3d84:	lsrs	r3, r4, #9
    3d86:	lsls	r2, r0
    sector = m_vol->clusterStartSector(m_curCluster) +
    3d88:	add.w	r1, r1, r4, lsr #9
    3d8c:	add	r1, r2
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector() ||
    3d8e:	cmp.w	fp, #0
    3d92:	bne.n	3e20 <ExFatFile::read(void*, unsigned int)+0x110>
    3d94:	cmp.w	r6, #512	; 0x200
    3d98:	bcc.n	3e20 <ExFatFile::read(void*, unsigned int)+0x110>
   * \param[in] option mode for cached sector.
   * \return Address of cached sector.
   */
  uint8_t* prepare(uint32_t sector, uint8_t option);
  /** \return Logical sector number for cached sector. */
  uint32_t sector() { return m_sector; }
    3d9a:	ldr.w	r2, [sl, #536]	; 0x218
    3d9e:	cmp	r1, r2
    3da0:	beq.n	3e20 <ExFatFile::read(void*, unsigned int)+0x110>
        goto fail;
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2 * m_vol->bytesPerSector()) {
    3da2:	cmp.w	r6, #1024	; 0x400
    3da6:	bcc.n	3e5a <ExFatFile::read(void*, unsigned int)+0x14a>
  uint32_t sectorsPerCluster() const { return 1UL << m_sectorsPerClusterShift; }
    3da8:	mov.w	fp, #1
    3dac:	lsl.w	fp, fp, r0
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
      // Limit reads to current cluster.
      uint32_t maxNs = m_vol->sectorsPerCluster() -
                       (clusterOffset >> m_vol->bytesPerSectorShift());
    3db0:	sub.w	fp, fp, r3
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    3db4:	lsrs	r3, r6, #9
    3db6:	cmp	fp, r3
    3db8:	it	cs
    3dba:	movcs	fp, r3
    return sector <= m_sector && m_sector < (sector + count);
    3dbc:	cmp	r1, r2
      if (ns > maxNs) {
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
    3dbe:	mov.w	r4, fp, lsl #9
    3dc2:	bhi.n	3dda <ExFatFile::read(void*, unsigned int)+0xca>
    3dc4:	add.w	r3, r1, fp
    3dc8:	cmp	r2, r3
    3dca:	bcs.n	3dda <ExFatFile::read(void*, unsigned int)+0xca>
    if (isCached(sector, count) && !sync()) {
    3dcc:	add.w	r0, sl, #528	; 0x210
    3dd0:	str	r1, [sp, #4]
    3dd2:	bl	3220 <FsCache::sync()>
    3dd6:	ldr	r1, [sp, #4]
    3dd8:	cbz	r0, 3e0a <ExFatFile::read(void*, unsigned int)+0xfa>
    return m_blockDev->readSectors(sector, dst, count);
    3dda:	ldr.w	r0, [sl, #532]	; 0x214
    3dde:	mov	r3, fp
    3de0:	ldr	r2, [r0, #0]
    3de2:	ldr.w	sl, [r2, #20]
    3de6:	mov	r2, r7
    3de8:	blx	sl
      if (!m_vol->cacheSafeRead(sector, dst, ns)) {
    3dea:	cbz	r0, 3e0a <ExFatFile::read(void*, unsigned int)+0xfa>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
    3dec:	mov	r3, r4
    dst += n;
    3dee:	add	r7, r4
    m_curPosition += n;
    3df0:	ldrd	r1, r2, [r5]
    3df4:	adds	r3, r3, r1
    3df6:	adc.w	r2, r2, #0
  while (toRead) {
    3dfa:	subs	r6, r6, r4
    m_curPosition += n;
    3dfc:	strd	r3, r2, [r5]
  while (toRead) {
    3e00:	bne.n	3d54 <ExFatFile::read(void*, unsigned int)+0x44>
    toRead -= n;
  }
  return count - toRead;
    3e02:	mov	r0, r8

fail:
  m_error |= READ_ERROR;
  return -1;
}
    3e04:	add	sp, #12
    3e06:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  m_error |= READ_ERROR;
    3e0a:	ldrb.w	r3, [r5, #50]	; 0x32
  return -1;
    3e0e:	mov.w	r0, #4294967295
  m_error |= READ_ERROR;
    3e12:	orr.w	r3, r3, #2
    3e16:	strb.w	r3, [r5, #50]	; 0x32
}
    3e1a:	add	sp, #12
    3e1c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      n = m_vol->bytesPerSector() - sectorOffset;
    3e20:	rsb	r4, fp, #512	; 0x200
    return m_dataCache.prepare(sector, option);
    3e24:	movs	r2, #0
    3e26:	add.w	r0, sl, #528	; 0x210
    3e2a:	cmp	r4, r6
    3e2c:	it	cs
    3e2e:	movcs	r4, r6
    3e30:	bl	3278 <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    3e34:	cmp	r0, #0
    3e36:	beq.n	3e0a <ExFatFile::read(void*, unsigned int)+0xfa>
      memcpy(dst, src, n);
    3e38:	add.w	r1, r0, fp
    3e3c:	mov	r2, r4
    3e3e:	mov	r0, r7
    3e40:	bl	a170 <memcpy>
    m_curPosition += n;
    3e44:	mov	r3, r4
    3e46:	b.n	3dee <ExFatFile::read(void*, unsigned int)+0xde>
        m_curCluster++;
    3e48:	ldr	r2, [r5, #24]
    3e4a:	b.n	3d7a <ExFatFile::read(void*, unsigned int)+0x6a>
      } else if (isContiguous()) {
    3e4c:	ldrb.w	r3, [r5, #51]	; 0x33
    3e50:	lsls	r3, r3, #25
    3e52:	bpl.n	3e72 <ExFatFile::read(void*, unsigned int)+0x162>
        m_curCluster++;
    3e54:	ldr	r2, [r5, #24]
    3e56:	adds	r2, #1
    3e58:	b.n	3d78 <ExFatFile::read(void*, unsigned int)+0x68>
    return m_blockDev->readSector(sector, dst);
    3e5a:	ldr.w	r0, [sl, #532]	; 0x214
    3e5e:	mov	r2, r7
    3e60:	ldr	r3, [r0, #0]
    3e62:	ldr	r3, [r3, #16]
    3e64:	blx	r3
      if (!m_vol->cacheSafeRead(sector, dst)) {
    3e66:	cmp	r0, #0
    3e68:	beq.n	3e0a <ExFatFile::read(void*, unsigned int)+0xfa>
    3e6a:	mov.w	r3, #512	; 0x200
      n = m_vol->bytesPerSector();
    3e6e:	mov	r4, r3
    3e70:	b.n	3dee <ExFatFile::read(void*, unsigned int)+0xde>
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    3e72:	mov	r2, r9
    3e74:	mov	r0, sl
    3e76:	ldr	r1, [r5, #24]
    3e78:	bl	472c <ExFatPartition::fatGet(unsigned long, unsigned long*)>
        if (fg < 0) {
    3e7c:	cmp	r0, #0
    3e7e:	blt.n	3e0a <ExFatFile::read(void*, unsigned int)+0xfa>
        if (fg == 0) {
    3e80:	beq.n	3e9c <ExFatFile::read(void*, unsigned int)+0x18c>
    sector = m_vol->clusterStartSector(m_curCluster) +
    3e82:	ldr.w	sl, [r5, #32]
    3e86:	ldr	r2, [r5, #24]
    3e88:	b.n	3d7a <ExFatFile::read(void*, unsigned int)+0x6a>
  if (isContiguous() || isFile()) {
    3e8a:	ldrb.w	r3, [r5, #49]	; 0x31
    3e8e:	lsls	r1, r3, #28
    3e90:	bpl.w	3d44 <ExFatFile::read(void*, unsigned int)+0x34>
    3e94:	b.n	3d2a <ExFatFile::read(void*, unsigned int)+0x1a>
      count = toRead = m_validLength - m_curPosition;
    3e96:	sub.w	r8, r1, r2
    3e9a:	b.n	3d44 <ExFatFile::read(void*, unsigned int)+0x34>
          if (isDir()) {
    3e9c:	ldrb.w	r3, [r5, #49]	; 0x31
    3ea0:	tst.w	r3, #80	; 0x50
    3ea4:	beq.n	3e0a <ExFatFile::read(void*, unsigned int)+0xfa>
  return count - toRead;
    3ea6:	sub.w	r8, r8, r6
    3eaa:	mov	r0, r8
    3eac:	b.n	3e04 <ExFatFile::read(void*, unsigned int)+0xf4>
    3eae:	nop

00003eb0 <ExFatFile::peek()>:
int ExFatFile::peek() {
    3eb0:	push	{r4, r5, r6, r7, lr}
    3eb2:	sub	sp, #12
    return read(&b, 1) == 1 ? b : -1;
    3eb4:	movs	r2, #1
    3eb6:	mov	r4, r0
  uint32_t saveCurCluster = m_curCluster;
    3eb8:	ldr	r5, [r0, #24]
    3eba:	add.w	r1, sp, #7
  uint64_t saveCurPosition = m_curPosition;
    3ebe:	ldrd	r6, r7, [r0]
    3ec2:	bl	3d10 <ExFatFile::read(void*, unsigned int)>
    3ec6:	cmp	r0, #1
  m_curCluster = saveCurCluster;
    3ec8:	str	r5, [r4, #24]
    3eca:	ite	eq
    3ecc:	ldrbeq.w	r0, [sp, #7]
    3ed0:	movne.w	r0, #4294967295
  m_curPosition = saveCurPosition;
    3ed4:	strd	r6, r7, [r4]
}
    3ed8:	add	sp, #12
    3eda:	pop	{r4, r5, r6, r7, pc}

00003edc <ExFatFile::seekSet(unsigned long long)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
    3edc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3ee0:	mov	r7, r3
  bool isOpen() const { return m_attributes; }
    3ee2:	ldrb.w	r3, [r0, #49]	; 0x31
    3ee6:	sub	sp, #12
    3ee8:	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    3eea:	ldr.w	r8, [r0, #24]
  // error if file not open
  if (!isOpen()) {
    3eee:	cmp	r3, #0
    3ef0:	beq.n	3f96 <ExFatFile::seekSet(unsigned long long)+0xba>
    3ef2:	mov	r6, r2
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    3ef4:	ldrd	r1, ip, [r0]
    3ef8:	cmp	ip, r7
    3efa:	it	eq
    3efc:	cmpeq	r1, r2
    3efe:	beq.n	3fba <ExFatFile::seekSet(unsigned long long)+0xde>
    return true;
  }
  if (pos == 0) {
    3f00:	orrs.w	r2, r6, r7
    3f04:	beq.n	3fa2 <ExFatFile::seekSet(unsigned long long)+0xc6>
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    3f06:	lsls	r5, r3, #28
    3f08:	bpl.n	3f14 <ExFatFile::seekSet(unsigned long long)+0x38>
    if (pos > m_validLength) {
    3f0a:	ldrd	r0, r2, [r0, #16]
    3f0e:	cmp	r0, r6
    3f10:	sbcs	r2, r7
    3f12:	bcc.n	3f96 <ExFatFile::seekSet(unsigned long long)+0xba>
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
  if (isContiguous()) {
    3f14:	ldrb.w	r2, [r4, #51]	; 0x33
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    3f18:	subs	r5, r6, #1
    3f1a:	ldr.w	sl, [r4, #32]
  if (isContiguous()) {
    3f1e:	str	r2, [sp, #4]
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    3f20:	adc.w	r0, r7, #4294967295
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    3f24:	ldrb.w	r2, [sl, #1093]	; 0x445
    3f28:	adds	r2, #9
    3f2a:	uxtb	r2, r2
    3f2c:	rsb	lr, r2, #32
    3f30:	lsrs	r5, r2
    3f32:	sub.w	r9, r2, #32
    3f36:	lsl.w	fp, r0, lr
    3f3a:	lsr.w	r0, r0, r9
    3f3e:	orr.w	r5, r5, fp
    3f42:	orrs	r5, r0
  if (isContiguous()) {
    3f44:	ldr	r0, [sp, #4]
    3f46:	lsls	r0, r0, #25
    3f48:	bmi.n	3fb2 <ExFatFile::seekSet(unsigned long long)+0xd6>
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    3f4a:	subs	r0, r1, #1
    3f4c:	lsr.w	r2, r0, r2
    3f50:	adc.w	r0, ip, #4294967295
  if (nNew < nCur || m_curPosition == 0) {
    3f54:	orrs.w	ip, r1, ip
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    3f58:	lsl.w	lr, r0, lr
    3f5c:	lsr.w	r0, r0, r9
    3f60:	orr.w	r2, r2, lr
    3f64:	orr.w	r2, r2, r0
  if (nNew < nCur || m_curPosition == 0) {
    3f68:	beq.n	3f6e <ExFatFile::seekSet(unsigned long long)+0x92>
    3f6a:	cmp	r5, r2
    3f6c:	bcs.n	3fc2 <ExFatFile::seekSet(unsigned long long)+0xe6>
    // must follow chain from first cluster
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
    3f6e:	lsls	r3, r3, #25
  uint32_t rootDirectoryCluster() const { return m_rootDirectoryCluster; }
    3f70:	ite	mi
    3f72:	ldrmi.w	r3, [sl, #1076]	; 0x434
    3f76:	ldrpl	r3, [r4, #28]
    3f78:	str	r3, [r4, #24]
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    3f7a:	add.w	r9, r4, #24
    3f7e:	b.n	3f8e <ExFatFile::seekSet(unsigned long long)+0xb2>
    3f80:	ldr	r1, [r4, #24]
    3f82:	subs	r5, #1
    3f84:	ldr	r0, [r4, #32]
    3f86:	bl	472c <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    3f8a:	cmp	r0, #0
    3f8c:	ble.n	3f96 <ExFatFile::seekSet(unsigned long long)+0xba>
    3f8e:	mov	r2, r9
  while (nNew--) {
    3f90:	cmp	r5, #0
    3f92:	bne.n	3f80 <ExFatFile::seekSet(unsigned long long)+0xa4>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }

done:
    3f94:	b.n	3fa6 <ExFatFile::seekSet(unsigned long long)+0xca>
  m_curPosition = pos;
  return true;

fail:
  m_curCluster = tmp;
  return false;
    3f96:	movs	r0, #0
  m_curCluster = tmp;
    3f98:	str.w	r8, [r4, #24]
}
    3f9c:	add	sp, #12
    3f9e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    m_curCluster = 0;
    3fa2:	movs	r3, #0
    3fa4:	str	r3, [r0, #24]
  return true;
    3fa6:	movs	r0, #1
  m_curPosition = pos;
    3fa8:	strd	r6, r7, [r4]
}
    3fac:	add	sp, #12
    3fae:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    m_curCluster = m_firstCluster + nNew;
    3fb2:	ldr	r3, [r4, #28]
    3fb4:	add	r3, r5
    3fb6:	str	r3, [r4, #24]
    goto done;
    3fb8:	b.n	3fa6 <ExFatFile::seekSet(unsigned long long)+0xca>
    return true;
    3fba:	movs	r0, #1
}
    3fbc:	add	sp, #12
    3fbe:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    nNew -= nCur;
    3fc2:	subs	r5, r5, r2
    3fc4:	b.n	3f7a <ExFatFile::seekSet(unsigned long long)+0x9e>
    3fc6:	nop

00003fc8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>:
bool ExFatFile::openPrivate(ExFatFile* dir, ExName_t* fname, oflag_t oflag) {
    3fc8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3fcc:	mov	r8, r2
    3fce:	ldrb.w	r2, [r0, #49]	; 0x31
    3fd2:	sub	sp, #60	; 0x3c
    3fd4:	mov	r5, r0
  if (isOpen() || !dir->isDir()) {
    3fd6:	cmp	r2, #0
    3fd8:	bne.w	4188 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
  bool isDir() const { return m_attributes & FILE_ATTR_DIR; }
    3fdc:	mov	fp, r1
    3fde:	ldrb.w	r1, [r1, #49]	; 0x31
    3fe2:	tst.w	r1, #80	; 0x50
    3fe6:	beq.w	4188 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
  switch (oflag & O_ACCMODE) {
    3fea:	and.w	r1, r3, #3
    3fee:	mov	sl, r3
    3ff0:	cmp	r1, #3
    3ff2:	beq.w	4188 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
    3ff6:	adds	r1, #1
    3ff8:	and.w	r0, r3, #8
    3ffc:	orr.w	r3, r1, r0
    4000:	str	r3, [sp, #8]
  if (fname) {
    4002:	cmp.w	r8, #0
    4006:	beq.w	419c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1d4>
    freeNeed = 2 + (fname->nameLength + 14) / 15;
    400a:	ldr.w	r1, [r8, #12]
    400e:	add.w	r7, r1, #14
    4012:	ldr	r1, [pc, #756]	; (4308 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x340>)
    4014:	umull	r1, r7, r1, r7
  if (pos == m_curPosition) {
    4018:	ldrd	r1, r0, [fp]
    freeNeed = 2 + (fname->nameLength + 14) / 15;
    401c:	lsrs	r7, r7, #3
  if (pos == m_curPosition) {
    401e:	orrs	r1, r0
    freeNeed = 2 + (fname->nameLength + 14) / 15;
    4020:	add.w	r7, r7, #2
    4024:	uxtb	r7, r7
  if (pos == m_curPosition) {
    4026:	beq.n	4034 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x6c>
  m_curPosition = pos;
    4028:	movs	r0, #0
    402a:	movs	r1, #0
    m_curCluster = 0;
    402c:	str.w	r2, [fp, #24]
  m_curPosition = pos;
    4030:	strd	r0, r1, [fp]
        inSet = false;
    4034:	movs	r4, #0
        m_flags |= FILE_FLAG_CONTIGUOUS;
    4036:	ldr	r3, [sp, #8]
        inSet = false;
    4038:	mov	r6, r4
        m_flags |= FILE_FLAG_CONTIGUOUS;
    403a:	orr.w	r3, r3, #64	; 0x40
    403e:	str	r3, [sp, #12]
    n = dir->read(buf, FS_DIR_SIZE);
    4040:	movs	r2, #32
    4042:	add	r1, sp, #24
    4044:	mov	r0, fp
    4046:	bl	3d10 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    404a:	cbz	r0, 408e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xc6>
    if (n != FS_DIR_SIZE) {
    404c:	cmp	r0, #32
    404e:	bne.w	4188 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
    if (!(buf[0] & EXFAT_TYPE_USED)) {
    4052:	ldrsb.w	r2, [sp, #24]
    4056:	ldrb.w	r3, [sp, #24]
    405a:	cmp	r2, #0
    405c:	blt.w	41a0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1d8>
      if (freeCount == 0) {
    4060:	cbnz	r4, 4070 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xa8>
        freePos.position = dir->curPosition() - FS_DIR_SIZE;
    4062:	ldr.w	r2, [fp]
    4066:	sub.w	r9, r2, #32
  uint32_t curCluster() const { return m_curCluster; }
    406a:	ldr.w	r2, [fp, #24]
    406e:	str	r2, [sp, #4]
      if (freeCount < freeNeed) {
    4070:	cmp	r4, r7
    4072:	bcs.n	4078 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb0>
        freeCount++;
    4074:	adds	r4, #1
    4076:	uxtb	r4, r4
      if (buf[0] == EXFAT_TYPE_END_DIR) {
    4078:	cmp	r3, #0
    407a:	beq.w	4270 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2a8>
    n = dir->read(buf, FS_DIR_SIZE);
    407e:	movs	r2, #32
    4080:	add	r1, sp, #24
    4082:	mov	r0, fp
      inSet = false;
    4084:	movs	r6, #0
    n = dir->read(buf, FS_DIR_SIZE);
    4086:	bl	3d10 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    408a:	cmp	r0, #0
    408c:	bne.n	404c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x84>
  if (!(oflag & O_CREAT) || !(modeFlags & FILE_FLAG_WRITE) || !fname) {
    408e:	tst.w	sl, #512	; 0x200
    4092:	beq.n	4188 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
    4094:	ldr	r3, [sp, #8]
    4096:	lsls	r3, r3, #30
    4098:	bpl.n	4188 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
    409a:	cmp.w	r8, #0
    409e:	beq.n	4188 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
  while (freeCount < freeNeed) {
    40a0:	cmp	r4, r7
    40a2:	bcs.n	40d4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x10c>
    40a4:	ldr.w	sl, [sp, #4]
    n = dir->read(buf, FS_DIR_SIZE);
    40a8:	movs	r2, #32
    40aa:	add	r1, sp, #24
    40ac:	mov	r0, fp
    40ae:	bl	3d10 <ExFatFile::read(void*, unsigned int)>
    freeCount++;
    40b2:	adds	r3, r4, #1
    if (n == 0) {
    40b4:	cmp	r0, #0
    40b6:	beq.n	417a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1b2>
    if (n != FS_DIR_SIZE) {
    40b8:	cmp	r0, #32
    40ba:	bne.n	4188 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
    if (freeCount == 0) {
    40bc:	cbnz	r4, 40ca <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x102>
      freePos.position = dir->curPosition() - FS_DIR_SIZE;
    40be:	ldr.w	r2, [fp]
    40c2:	ldr.w	sl, [fp, #24]
    40c6:	sub.w	r9, r2, #32
    freeCount++;
    40ca:	uxtb	r4, r3
  while (freeCount < freeNeed) {
    40cc:	cmp	r7, r4
    40ce:	bhi.n	40a8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xe0>
    40d0:	str.w	sl, [sp, #4]
  memset(this, 0, sizeof(ExFatFile));
    40d4:	movs	r2, #56	; 0x38
    40d6:	movs	r1, #0
    40d8:	mov	r0, r5
  bool isContiguous() const { return m_flags & FILE_FLAG_CONTIGUOUS; }
    40da:	ldrb.w	r4, [fp, #51]	; 0x33
    40de:	bl	e110 <memset>
  bool hashName(ExName_t* fname);
  bool mkdir(ExFatFile* parent, ExName_t* fname);

  bool openPrivate(ExFatFile* dir, ExName_t* fname, oflag_t oflag);
  bool parsePathName(const char* path, ExName_t* fname, const char** ptr);
  ExFatVolume* volume() const { return m_vol; }
    40e2:	ldr.w	r3, [fp, #32]
  freePos.isContiguous = dir->isContiguous();
    40e6:	ubfx	r4, r4, #6, #1
  m_dirPos = freePos;
    40ea:	ldr	r2, [sp, #4]
  m_vol = dir->volume();
    40ec:	str	r3, [r5, #32]
  m_attributes = FILE_ATTR_FILE | FS_ATTRIB_ARCHIVE;
    40ee:	movs	r3, #40	; 0x28
  m_dirPos = freePos;
    40f0:	strb.w	r4, [r5, #44]	; 0x2c
  m_attributes = FILE_ATTR_FILE | FS_ATTRIB_ARCHIVE;
    40f4:	strb.w	r3, [r5, #49]	; 0x31
  void reset() { next = begin; }
    40f8:	ldr.w	r3, [r8]
  m_dirPos = freePos;
    40fc:	strd	r2, r9, [r5, #36]	; 0x24
    4100:	str.w	r3, [r8, #4]
  for (uint8_t i = 0; i < freeNeed; i++) {
    4104:	cbz	r7, 4170 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1a8>
    4106:	movs	r4, #0
      m_setCount = freeNeed - 1;
    4108:	subs	r6, r7, #1
      if (FsDateTime::callback) {
    410a:	ldr.w	r9, [pc, #512]	; 430c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x344>
      m_setCount = freeNeed - 1;
    410e:	uxtb	r6, r6
      if (FsDateTime::callback) {
    4110:	mov	sl, r4
    cache = dirCache(i, FsCache::CACHE_FOR_WRITE);
    4112:	movs	r2, #1
    4114:	mov	r1, sl
    4116:	mov	r0, r5
    4118:	bl	3bb0 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache || (cache[0] & 0x80)) {
    411c:	mov	fp, r0
    411e:	cbz	r0, 4188 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
    4120:	ldrsb.w	r2, [r0]
    4124:	cmp	r2, #0
    4126:	blt.n	4188 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
    memset(cache, 0, FS_DIR_SIZE);
    4128:	movs	r2, #32
    412a:	movs	r1, #0
    412c:	bl	e110 <memset>
    if (i == 0) {
    4130:	cmp	r4, #0
    4132:	beq.w	42cc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x304>
    } else if (i == 1) {
    4136:	cmp.w	sl, #1
    413a:	beq.w	4310 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x348>
      dirName->type = EXFAT_TYPE_NAME;
    413e:	movs	r3, #193	; 0xc1
    4140:	mov	r2, fp
    4142:	add.w	fp, fp, #32
    4146:	strb.w	r3, [r2], #2
  bool atEnd() { return next == end; }
    414a:	ldrd	r3, r0, [r8, #4]
        if (fname->atEnd()) {
    414e:	cmp	r0, r3
  /** \return next UTF-16 unit of LFN. */
  uint16_t get16() { return atEnd() ? 0 : *next++; }
    4150:	add.w	r3, r3, #1
    4154:	beq.n	4166 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x19e>
    4156:	str.w	r3, [r8, #4]
    415a:	ldrb.w	r1, [r3, #-1]
    415e:	strh.w	r1, [r2], #2
      for (size_t k = 0; k < 15; k++) {
    4162:	cmp	fp, r2
    4164:	bne.n	414e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x186>
  for (uint8_t i = 0; i < freeNeed; i++) {
    4166:	adds	r4, #1
    4168:	uxtb.w	sl, r4
    416c:	cmp	r7, sl
    416e:	bhi.n	4112 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x14a>
  return sync();
    4170:	mov	r0, r5
    4172:	bl	4cc4 <ExFatFile::sync()>
    4176:	mov	r6, r0
    4178:	b.n	4194 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1cc>
      if (!dir->addDirCluster()) {
    417a:	mov	r0, fp
      uint32_t saveCurCluster = dir->m_curCluster;
    417c:	ldr.w	r6, [fp, #24]
      if (!dir->addDirCluster()) {
    4180:	bl	4d24 <ExFatFile::addDirCluster()>
    4184:	cmp	r0, #0
    4186:	bne.n	427a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2b2>
  m_attributes = FILE_ATTR_CLOSED;
    4188:	movs	r3, #0
  return false;
    418a:	mov	r6, r3
  m_attributes = FILE_ATTR_CLOSED;
    418c:	strb.w	r3, [r5, #49]	; 0x31
  m_flags = 0;
    4190:	strb.w	r3, [r5, #51]	; 0x33
}
    4194:	mov	r0, r6
    4196:	add	sp, #60	; 0x3c
    4198:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint8_t freeNeed = 3;
    419c:	movs	r7, #3
    419e:	b.n	4034 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x6c>
    } else if (!inSet) {
    41a0:	cbnz	r6, 41f8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x230>
        freeCount = 0;
    41a2:	cmp	r4, r7
    41a4:	it	cc
    41a6:	movcc	r4, #0
      if (buf[0] != EXFAT_TYPE_FILE) {
    41a8:	cmp	r3, #133	; 0x85
    41aa:	bne.w	4040 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x78>
      memset(this, 0, sizeof(ExFatFile));
    41ae:	mov	r1, r6
    41b0:	movs	r2, #56	; 0x38
    41b2:	mov	r0, r5
      inSet = true;
    41b4:	movs	r6, #1
      memset(this, 0, sizeof(ExFatFile));
    41b6:	bl	e110 <memset>
      m_attributes = getLe16(dirFile->attributes) & FS_ATTRIB_COPY;
    41ba:	ldrb.w	r2, [sp, #28]
      m_setCount = dirFile->setCount;
    41be:	ldrb.w	r3, [sp, #25]
    41c2:	strb.w	r3, [r5, #48]	; 0x30
      m_attributes = getLe16(dirFile->attributes) & FS_ATTRIB_COPY;
    41c6:	and.w	r3, r2, #55	; 0x37
      if (!(m_attributes & FS_ATTRIB_DIRECTORY)) {
    41ca:	lsls	r2, r2, #27
        m_attributes |= FILE_ATTR_FILE;
    41cc:	it	pl
    41ce:	orrpl.w	r3, r3, #8
    41d2:	strb.w	r3, [r5, #49]	; 0x31
      m_dirPos.position = dir->curPosition() - FS_DIR_SIZE;
    41d6:	ldr.w	r3, [fp]
    41da:	ldr.w	r2, [fp, #32]
    41de:	subs	r3, #32
      m_vol = dir->volume();
    41e0:	str	r2, [r5, #32]
      m_dirPos.cluster = dir->curCluster();
    41e2:	ldr.w	r2, [fp, #24]
    41e6:	strd	r2, r3, [r5, #36]	; 0x24
  bool isContiguous() const { return m_flags & FILE_FLAG_CONTIGUOUS; }
    41ea:	ldrb.w	r3, [fp, #51]	; 0x33
    41ee:	ubfx	r3, r3, #6, #1
      m_dirPos.isContiguous = dir->isContiguous();
    41f2:	strb.w	r3, [r5, #44]	; 0x2c
    41f6:	b.n	4040 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x78>
    } else if (buf[0] == EXFAT_TYPE_STREAM) {
    41f8:	cmp	r3, #192	; 0xc0
    41fa:	beq.n	421a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x252>
    } else if (buf[0] == EXFAT_TYPE_NAME) {
    41fc:	cmp	r3, #193	; 0xc1
    41fe:	bne.w	407e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb6>
      if (!cmpName(dirName, fname)) {
    4202:	mov	r2, r8
    4204:	add	r1, sp, #24
    4206:	mov	r0, r5
    4208:	bl	3a64 <ExFatFile::cmpName(DirName_t const*, ExName_t*)>
    420c:	cbz	r0, 4216 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x24e>
      if (fname->atEnd()) {
    420e:	ldrd	r3, r2, [r8, #4]
    4212:	cmp	r2, r3
    4214:	beq.n	4280 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2b8>
        inSet = false;
    4216:	mov	r6, r0
    4218:	b.n	4040 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x78>
      m_flags = modeFlags;
    421a:	ldr	r3, [sp, #8]
    421c:	strb.w	r3, [r5, #51]	; 0x33
      if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    4220:	ldrb.w	r3, [sp, #25]
    4224:	lsls	r3, r3, #30
    4226:	bpl.n	422e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x266>
        m_flags |= FILE_FLAG_CONTIGUOUS;
    4228:	ldr	r3, [sp, #12]
    422a:	strb.w	r3, [r5, #51]	; 0x33
      m_firstCluster = getLe32(dirStream->firstCluster);
    422e:	ldr	r3, [sp, #44]	; 0x2c
    4230:	str	r3, [r5, #28]
      m_validLength = getLe64(dirStream->validLength);
    4232:	ldrd	r2, r3, [sp, #32]
    4236:	strd	r2, r3, [r5, #16]
      m_dataLength = getLe64(dirStream->dataLength);
    423a:	ldrd	r2, r3, [sp, #48]	; 0x30
    423e:	strd	r2, r3, [r5, #8]
      if (!fname) {
    4242:	cmp.w	r8, #0
    4246:	beq.n	4280 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2b8>
  void reset() { next = begin; }
    4248:	ldr.w	r3, [r8]
      if (fname->nameLength != dirStream->nameLength ||
    424c:	ldr.w	r2, [r8, #12]
    4250:	str.w	r3, [r8, #4]
    4254:	ldrb.w	r3, [sp, #27]
    4258:	cmp	r2, r3
    425a:	bne.w	407e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb6>
    425e:	ldrh.w	r6, [r8, #16]
    4262:	ldrh.w	r3, [sp, #28]
    4266:	subs	r6, r6, r3
    4268:	clz	r6, r6
    426c:	lsrs	r6, r6, #5
    426e:	b.n	4040 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x78>
        if (fname) {
    4270:	cmp.w	r8, #0
    4274:	bne.w	408e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xc6>
    4278:	b.n	4188 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
      dir->m_curCluster = saveCurCluster;
    427a:	str.w	r6, [fp, #24]
      continue;
    427e:	b.n	40cc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x104>
  if (oflag & O_EXCL) {
    4280:	tst.w	sl, #2048	; 0x800
    4284:	bne.n	4188 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
  if ((oflag & (O_TRUNC | O_AT_END)) || (m_flags & FILE_FLAG_WRITE)) {
    4286:	tst.w	sl, #17408	; 0x4400
    428a:	bne.n	4348 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x380>
    428c:	ldrb.w	r3, [r5, #51]	; 0x33
    4290:	lsls	r7, r3, #30
    4292:	bmi.n	4348 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x380>
  if (oflag & O_TRUNC) {
    4294:	tst.w	sl, #1024	; 0x400
    4298:	bne.w	4188 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    429c:	tst.w	sl, #16384	; 0x4000
    42a0:	beq.w	4194 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1cc>
    42a4:	mov	r0, r5
    42a6:	ldrd	r2, r3, [r5, #16]
    42aa:	bl	3edc <ExFatFile::seekSet(unsigned long long)>
    42ae:	cmp	r0, #0
    42b0:	beq.w	4188 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
  if (isWritable()) {
    42b4:	ldrb.w	r3, [r5, #51]	; 0x33
    42b8:	lsls	r2, r3, #30
    42ba:	bpl.w	4194 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1cc>
    m_attributes |= FS_ATTRIB_ARCHIVE;
    42be:	ldrb.w	r3, [r5, #49]	; 0x31
    42c2:	orr.w	r3, r3, #32
    42c6:	strb.w	r3, [r5, #49]	; 0x31
    42ca:	b.n	4194 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1cc>
      dirFile->type = EXFAT_TYPE_FILE;
    42cc:	movs	r3, #133	; 0x85
    42ce:	strb.w	r3, [fp]
      m_setCount = freeNeed - 1;
    42d2:	strb.w	r6, [r5, #48]	; 0x30
      dirFile->setCount = m_setCount;
    42d6:	strb.w	r6, [fp, #1]
      if (FsDateTime::callback) {
    42da:	ldr.w	r3, [r9]
    42de:	cbz	r3, 4336 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x36e>
        FsDateTime::callback(&date, &time, &ms10);
    42e0:	add.w	r2, sp, #19
    42e4:	add.w	r1, sp, #22
    42e8:	add	r0, sp, #20
    42ea:	blx	r3
  *reinterpret_cast<uint16_t*>(dst) = src;
    42ec:	ldrh.w	r3, [sp, #20]
    42f0:	strh.w	r3, [fp, #10]
    42f4:	ldrh.w	r3, [sp, #22]
    42f8:	strh.w	r3, [fp, #8]
        dirFile->createTimeMs = ms10;
    42fc:	ldrb.w	r3, [sp, #19]
    4300:	strb.w	r3, [fp, #20]
    4304:	b.n	4166 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x19e>
    4306:	nop
    4308:	.word	0x88888889
    430c:	.word	0x20006420
      dirStream->type = EXFAT_TYPE_STREAM;
    4310:	movs	r3, #192	; 0xc0
      dirStream->flags = EXFAT_FLAG_ALWAYS1;
    4312:	strb.w	sl, [fp, #1]
      dirStream->type = EXFAT_TYPE_STREAM;
    4316:	strb.w	r3, [fp]
      m_flags = modeFlags | FILE_FLAG_DIR_DIRTY;
    431a:	ldr	r3, [sp, #8]
    431c:	orn	r3, r3, #127	; 0x7f
    4320:	strb.w	r3, [r5, #51]	; 0x33
      dirStream->nameLength = fname->nameLength;
    4324:	ldr.w	r3, [r8, #12]
    4328:	strb.w	r3, [fp, #3]
      setLe16(dirStream->nameHash, fname->nameHash);
    432c:	ldrh.w	r3, [r8, #16]
    4330:	strh.w	r3, [fp, #4]
}
    4334:	b.n	4166 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x19e>
  *reinterpret_cast<uint16_t*>(dst) = src;
    4336:	movw	r3, #22049	; 0x5621
    433a:	strh.w	r3, [fp, #10]
    433e:	strh.w	r3, [fp, #14]
    4342:	strh.w	r3, [fp, #18]
        if (FS_DEFAULT_TIME) {
    4346:	b.n	4166 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x19e>
  bool isSubDir() const { return m_attributes & FILE_ATTR_SUBDIR; }
    4348:	ldrb.w	r3, [r5, #49]	; 0x31
    if (isSubDir() || isReadOnly() || EXFAT_READ_ONLY) {
    434c:	lsls	r4, r3, #27
    434e:	bmi.w	4188 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
    4352:	lsls	r0, r3, #31
    4354:	bmi.w	4188 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
  if (oflag & O_TRUNC) {
    4358:	tst.w	sl, #1024	; 0x400
    435c:	beq.n	4386 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x3be>
    if (!(m_flags & FILE_FLAG_WRITE)) {
    435e:	ldrb.w	r3, [r5, #51]	; 0x33
    4362:	lsls	r1, r3, #30
    4364:	bpl.w	4188 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
  bool truncate(uint64_t length) { return seekSet(length) && truncate(); }
    4368:	movs	r2, #0
    436a:	movs	r3, #0
    436c:	mov	r0, r5
    436e:	bl	3edc <ExFatFile::seekSet(unsigned long long)>
    4372:	cmp	r0, #0
    4374:	beq.w	4188 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
    4378:	mov	r0, r5
    437a:	bl	5124 <ExFatFile::truncate()>
    437e:	cmp	r0, #0
    4380:	beq.w	4188 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
    4384:	b.n	42b4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2ec>
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    4386:	tst.w	sl, #16384	; 0x4000
    438a:	beq.n	42b4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2ec>
    438c:	b.n	42a4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2dc>
    438e:	nop

00004390 <ExFatFile::open(ExFatFile*, char const*, int)>:
bool ExFatFile::open(ExFatFile* dirFile, const char* path, oflag_t oflag) {
    4390:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  ExFatFile() {}
    4394:	movs	r5, #0
    4396:	sub	sp, #92	; 0x5c
    4398:	mov	r9, r3
  if (isOpen() || !dirFile->isDir()) {
    439a:	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::open(ExFatFile* dirFile, const char* path, oflag_t oflag) {
    439e:	str	r2, [sp, #4]
    43a0:	str	r5, [sp, #80]	; 0x50
  if (isOpen() || !dirFile->isDir()) {
    43a2:	cmp	r3, #0
    43a4:	bne.n	4424 <ExFatFile::open(ExFatFile*, char const*, int)+0x94>
    43a6:	ldrb.w	r3, [r1, #49]	; 0x31
    43aa:	mov	r7, r1
    43ac:	tst.w	r3, #80	; 0x50
    43b0:	beq.n	4424 <ExFatFile::open(ExFatFile*, char const*, int)+0x94>
  if (isDirSeparator(*path)) {
    43b2:	ldrb	r3, [r2, #0]
    43b4:	mov	r4, r0
    43b6:	mov	r6, r2
    43b8:	cmp	r3, #47	; 0x2f
    43ba:	beq.n	442c <ExFatFile::open(ExFatFile*, char const*, int)+0x9c>
    if (!openPrivate(dirFile, &fname, O_RDONLY)) {
    43bc:	mov.w	r8, #0
    if (!parsePathName(path, &fname, &path)) {
    43c0:	add	r3, sp, #4
    43c2:	add	r2, sp, #12
    43c4:	mov	r1, r6
    43c6:	mov	r0, r4
    43c8:	bl	3c70 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    43cc:	cbz	r0, 4424 <ExFatFile::open(ExFatFile*, char const*, int)+0x94>
    if (*path == 0) {
    43ce:	ldr	r6, [sp, #4]
    43d0:	ldrb	r3, [r6, #0]
    43d2:	cmp	r3, #0
    43d4:	beq.n	4454 <ExFatFile::open(ExFatFile*, char const*, int)+0xc4>
    if (!openPrivate(dirFile, &fname, O_RDONLY)) {
    43d6:	movs	r3, #0
    43d8:	add	r2, sp, #12
    43da:	mov	r1, r7
    43dc:	mov	r0, r4
    43de:	bl	3fc8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    43e2:	cbz	r0, 4424 <ExFatFile::open(ExFatFile*, char const*, int)+0x94>
    tmpDir = *this;
    43e4:	mov	ip, r4
    43e6:	add	r5, sp, #32
    43e8:	add.w	r7, r4, #48	; 0x30
    43ec:	ldr.w	r0, [ip]
    43f0:	add.w	ip, ip, #16
    43f4:	ldr.w	r1, [ip, #-12]
    43f8:	mov	lr, r5
    43fa:	ldr.w	r2, [ip, #-8]
    43fe:	adds	r5, #16
    4400:	ldr.w	r3, [ip, #-4]
    4404:	cmp	ip, r7
    4406:	stmia.w	lr!, {r0, r1, r2, r3}
    440a:	bne.n	43ec <ExFatFile::open(ExFatFile*, char const*, int)+0x5c>
    440c:	ldr.w	r0, [ip]
    dirFile = &tmpDir;
    4410:	add	r7, sp, #32
    tmpDir = *this;
    4412:	str	r0, [r5, #0]
  bool rtn = sync();
    4414:	mov	r0, r4
    4416:	bl	4cc4 <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    441a:	strb.w	r8, [r4, #49]	; 0x31
  m_flags = 0;
    441e:	strb.w	r8, [r4, #51]	; 0x33
  return rtn;
    4422:	b.n	43c0 <ExFatFile::open(ExFatFile*, char const*, int)+0x30>
  return false;
    4424:	movs	r0, #0
}
    4426:	add	sp, #92	; 0x5c
    4428:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    while (isDirSeparator(*path)) {
    442c:	ldrb.w	r1, [r6, #1]!
    4430:	cmp	r1, #47	; 0x2f
    4432:	beq.n	442c <ExFatFile::open(ExFatFile*, char const*, int)+0x9c>
    4434:	str	r6, [sp, #4]
    if (*path == 0) {
    4436:	cbnz	r1, 4466 <ExFatFile::open(ExFatFile*, char const*, int)+0xd6>
  memset(this, 0, sizeof(ExFatFile));
    4438:	movs	r2, #56	; 0x38
    443a:	mov	r0, r4
      return openRoot(dirFile->m_vol);
    443c:	ldr	r5, [r7, #32]
  memset(this, 0, sizeof(ExFatFile));
    443e:	bl	e110 <memset>
  m_flags = FILE_FLAG_READ;
    4442:	movs	r3, #1
  m_attributes = FILE_ATTR_ROOT;
    4444:	movs	r2, #64	; 0x40
  m_vol = vol;
    4446:	str	r5, [r4, #32]
      return openRoot(dirFile->m_vol);
    4448:	mov	r0, r3
  m_flags = FILE_FLAG_READ;
    444a:	strb.w	r3, [r4, #51]	; 0x33
  m_attributes = FILE_ATTR_ROOT;
    444e:	strb.w	r2, [r4, #49]	; 0x31
      return openRoot(dirFile->m_vol);
    4452:	b.n	4426 <ExFatFile::open(ExFatFile*, char const*, int)+0x96>
  return openPrivate(dirFile, &fname, oflag);
    4454:	mov	r3, r9
    4456:	add	r2, sp, #12
    4458:	mov	r1, r7
    445a:	mov	r0, r4
    445c:	bl	3fc8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
}
    4460:	add	sp, #92	; 0x5c
    4462:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  memset(this, 0, sizeof(ExFatFile));
    4466:	movs	r2, #56	; 0x38
    4468:	movs	r1, #0
    446a:	add	r0, sp, #32
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    446c:	ldr	r5, [r7, #32]
  memset(this, 0, sizeof(ExFatFile));
    446e:	bl	e110 <memset>
  m_flags = FILE_FLAG_READ;
    4472:	movs	r3, #1
    dirFile = &tmpDir;
    4474:	add	r7, sp, #32
  m_vol = vol;
    4476:	str	r5, [sp, #64]	; 0x40
  m_flags = FILE_FLAG_READ;
    4478:	strb.w	r3, [sp, #83]	; 0x53
  m_attributes = FILE_ATTR_ROOT;
    447c:	movs	r3, #64	; 0x40
    447e:	strb.w	r3, [sp, #81]	; 0x51
  return true;
    4482:	b.n	43bc <ExFatFile::open(ExFatFile*, char const*, int)+0x2c>

00004484 <ExFatFile::open(ExFatVolume*, char const*, int)>:
  return vol && open(vol->vwd(), path, oflag);
    4484:	cbz	r1, 448e <ExFatFile::open(ExFatVolume*, char const*, int)+0xa>
    4486:	add.w	r1, r1, #1096	; 0x448
    448a:	b.w	4390 <ExFatFile::open(ExFatFile*, char const*, int)>
}
    448e:	mov	r0, r1
    4490:	bx	lr
    4492:	nop

00004494 <ExFatFile::openNext(ExFatFile*, int)>:
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    4494:	ldrb.w	r3, [r0, #49]	; 0x31
    4498:	cbnz	r3, 44b4 <ExFatFile::openNext(ExFatFile*, int)+0x20>
    449a:	ldrb.w	r3, [r1, #49]	; 0x31
    449e:	tst.w	r3, #80	; 0x50
    44a2:	beq.n	44b4 <ExFatFile::openNext(ExFatFile*, int)+0x20>
    44a4:	ldr	r3, [r1, #0]
    44a6:	ands.w	ip, r3, #31
    44aa:	bne.n	44b4 <ExFatFile::openNext(ExFatFile*, int)+0x20>
  return openPrivate(dir, nullptr, oflag);
    44ac:	mov	r3, r2
    44ae:	mov	r2, ip
    44b0:	b.w	3fc8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
}
    44b4:	movs	r0, #0
    44b6:	bx	lr

000044b8 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>:
#define DBG_FILE "ExFatPartition.cpp"
#include "../common/DebugMacros.h"
#include "ExFatLib.h"
//------------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
    44b8:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    44bc:	mov	r7, r0
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    44be:	mov	sl, r1
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
    44c0:	mov	r9, r2
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    44c2:	cmp	r1, #0
    44c4:	beq.n	454c <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x94>
    44c6:	sub.w	r8, r1, #2
  if (start >= m_clusterCount) {
    44ca:	ldr.w	r3, [r7, #1072]	; 0x430
    44ce:	cmp	r3, r8
    44d0:	bls.n	4558 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xa0>
  uint32_t endAlloc = start;
  uint32_t bgnAlloc = start;
  uint16_t sectorSize = 1 << m_bytesPerSectorShift;
  size_t i = (start >> 3) & (sectorSize - 1);
  uint8_t* cache;
  uint8_t mask = 1 << (start & 7);
    44d2:	and.w	r3, r8, #7
    44d6:	movs	r5, #1
  size_t i = (start >> 3) & (sectorSize - 1);
    44d8:	ubfx	fp, r8, #3, #9
  uint8_t mask = 1 << (start & 7);
    44dc:	lsls	r5, r3
    44de:	uxtb	r5, r5
  uint32_t bgnAlloc = start;
    44e0:	mov	r6, r8
  uint32_t endAlloc = start;
    44e2:	mov	r4, r8
  while (true) {
    uint32_t sector =
    44e4:	ldr.w	r1, [r7, #1068]	; 0x42c
    return m_bitmapCache.prepare(sector, option);
    44e8:	movs	r2, #0
    44ea:	mov	r0, r7
    44ec:	add.w	r1, r1, r4, lsr #12
    44f0:	bl	3278 <FsCache::prepare(unsigned long, unsigned char)>
        m_clusterHeapStartSector + (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCachePrepare(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
    44f4:	cbz	r0, 4532 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x7a>
    44f6:	add.w	fp, fp, #4294967295
    44fa:	add	fp, r0
    44fc:	addw	r0, r0, #511	; 0x1ff
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
    4500:	ldrb.w	r1, [fp, #1]!
    4504:	b.n	451c <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x64>
          if ((endAlloc - bgnAlloc) == count) {
    4506:	cmp	r2, r9
    4508:	beq.n	4562 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xaa>
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    450a:	cmp	r8, r4
    450c:	beq.n	4530 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x78>
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
    450e:	ldr.w	r5, [r7, #1072]	; 0x430
    4512:	cmp	r5, r4
    4514:	bls.n	4540 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x88>
      for (; mask; mask <<= 1) {
    4516:	ands.w	r5, r3, #255	; 0xff
    451a:	beq.n	4536 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x7e>
        endAlloc++;
    451c:	adds	r4, #1
        if (!(mask & cache[i])) {
    451e:	tst	r1, r5
      for (; mask; mask <<= 1) {
    4520:	mov.w	r3, r5, lsl #1
          if ((endAlloc - bgnAlloc) == count) {
    4524:	sub.w	r2, r4, r6
        if (!(mask & cache[i])) {
    4528:	beq.n	4506 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x4e>
        if (endAlloc == start) {
    452a:	cmp	r8, r4
        endAlloc++;
    452c:	mov	r6, r4
        if (endAlloc == start) {
    452e:	bne.n	450e <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x56>
          return 1;
    4530:	movs	r0, #1
      mask = 1;
    }
    i = 0;
  }
  return 0;
}
    4532:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for (; i < sectorSize; i++) {
    4536:	cmp	r0, fp
      mask = 1;
    4538:	mov.w	r5, #1
    for (; i < sectorSize; i++) {
    453c:	bne.n	4500 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x48>
    453e:	b.n	4544 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x8c>
          endAlloc = bgnAlloc = 0;
    4540:	movs	r6, #0
    4542:	mov	r4, r6
  uint32_t endAlloc = start;
    4544:	movs	r5, #1
    i = 0;
    4546:	mov.w	fp, #0
    454a:	b.n	44e4 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x2c>
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    454c:	ldr.w	r8, [r0, #1056]	; 0x420
  if (start >= m_clusterCount) {
    4550:	ldr.w	r3, [r7, #1072]	; 0x430
    4554:	cmp	r3, r8
    4556:	bhi.n	44d2 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x1a>
    4558:	mov.w	r8, #0
    455c:	movs	r5, #1
    start = 0;
    455e:	mov	fp, r8
    4560:	b.n	44e0 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x28>
            if (cluster == 0 && count == 1) {
    4562:	cmp.w	sl, #0
    4566:	bne.n	4572 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xba>
    4568:	cmp.w	r9, #1
              m_bitmapStart = bgnAlloc;
    456c:	it	eq
    456e:	streq.w	r6, [r7, #1056]	; 0x420
            return bgnAlloc + 2;
    4572:	adds	r0, r6, #2
}
    4574:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00004578 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>:
//------------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster, uint32_t count,
                                  bool value) {
    4578:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    457c:	mov	r8, r0
  uint32_t sector;
  uint32_t start = cluster - 2;
    457e:	subs	r0, r1, #2
                                  bool value) {
    4580:	mov	r5, r2
    4582:	mov	r6, r3
  size_t i;
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    4584:	adds	r3, r0, r2
    4586:	ldr.w	r2, [r8, #1072]	; 0x430
    458a:	cmp	r3, r2
    458c:	bhi.n	45fe <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    458e:	cbnz	r6, 4604 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x8c>
    if (start <= m_bitmapStart && m_bitmapStart < (start + count)) {
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    }
  } else {
    if (start < m_bitmapStart) {
    4590:	ldr.w	r3, [r8, #1056]	; 0x420
    4594:	cmp	r3, r0
      m_bitmapStart = start;
    4596:	it	hi
    4598:	strhi.w	r0, [r8, #1056]	; 0x420
    }
  }
  mask = 1 << (start & 7);
    459c:	and.w	r3, r0, #7
    45a0:	movs	r4, #1
  sector = m_clusterHeapStartSector + (start >> (m_bytesPerSectorShift + 3));
    45a2:	ldr.w	r7, [r8, #1068]	; 0x42c
  i = (start >> 3) & m_sectorMask;
    45a6:	ubfx	r9, r0, #3, #9
  mask = 1 << (start & 7);
    45aa:	lsls	r4, r3
  sector = m_clusterHeapStartSector + (start >> (m_bytesPerSectorShift + 3));
    45ac:	add.w	r1, r7, r0, lsr #12
  mask = 1 << (start & 7);
    45b0:	uxtb	r4, r4
    45b2:	movs	r2, #1
    45b4:	mov	r0, r8
  while (true) {
    cache = bitmapCachePrepare(sector++, FsCache::CACHE_FOR_WRITE);
    45b6:	adds	r7, r1, r2
    45b8:	bl	3278 <FsCache::prepare(unsigned long, unsigned char)>
    if (!cache) {
    45bc:	cbz	r0, 45fe <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
    45be:	add.w	lr, r9, #4294967295
    45c2:	add	lr, r0
    45c4:	addw	r0, r0, #511	; 0x1ff
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
    45c8:	ldrb.w	ip, [lr, #1]!
    45cc:	tst.w	ip, r4
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
    45d0:	eor.w	ip, ip, r4
      for (; mask; mask <<= 1) {
    45d4:	mov.w	r4, r4, lsl #1
        if (value == static_cast<bool>(cache[i] & mask)) {
    45d8:	ite	ne
    45da:	movne	r2, #1
    45dc:	moveq	r2, #0
    45de:	cmp	r2, r6
    45e0:	beq.n	45fe <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
        if (--count == 0) {
    45e2:	subs	r5, #1
        cache[i] ^= mask;
    45e4:	strb.w	ip, [lr]
        if (--count == 0) {
    45e8:	beq.n	461c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xa4>
      for (; mask; mask <<= 1) {
    45ea:	ands.w	r4, r4, #255	; 0xff
    45ee:	bne.n	45cc <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x54>
    for (; i < m_bytesPerSector; i++) {
    45f0:	cmp	r0, lr
          return true;
        }
      }
      mask = 1;
    }
    i = 0;
    45f2:	mov	r9, r4
    45f4:	mov.w	r4, #1
    for (; i < m_bytesPerSector; i++) {
    45f8:	bne.n	45c8 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x50>
    cache = bitmapCachePrepare(sector++, FsCache::CACHE_FOR_WRITE);
    45fa:	mov	r1, r7
    45fc:	b.n	45b2 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x3a>
  }

fail:
  return false;
    45fe:	movs	r0, #0
}
    4600:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (start <= m_bitmapStart && m_bitmapStart < (start + count)) {
    4604:	ldr.w	r1, [r8, #1056]	; 0x420
    4608:	cmp	r3, r1
    460a:	bls.n	459c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x24>
    460c:	cmp	r1, r0
    460e:	bcc.n	459c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x24>
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    4610:	cmp	r3, r2
    4612:	it	cs
    4614:	movcs	r3, #0
    4616:	str.w	r3, [r8, #1056]	; 0x420
    461a:	b.n	459c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x24>
          return true;
    461c:	movs	r0, #1
}
    461e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4622:	nop

00004624 <ExFatPartition::chainSize(unsigned long)>:
//------------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
    4624:	push	{r3, r4, r5, r6, r7, lr}
int8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
  uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    4626:	ldr.w	r3, [r0, #1072]	; 0x430
    462a:	adds	r3, #1
    462c:	cmp	r3, r1
    462e:	bcs.n	4634 <ExFatPartition::chainSize(unsigned long)+0x10>
    if (status < 0) return 0;
    4630:	movs	r0, #0
}
    4632:	pop	{r3, r4, r5, r6, r7, pc}
    4634:	mov	r7, r0
    4636:	mov	r4, r1
    return m_dataCache.prepare(sector, option);
    4638:	add.w	r6, r0, #528	; 0x210
  uint32_t n = 0;
    463c:	movs	r5, #0
    463e:	b.n	464c <ExFatPartition::chainSize(unsigned long)+0x28>
  if (cluster > (m_clusterCount + 1)) {
    4640:	ldr.w	r3, [r7, #1072]	; 0x430
    n++;
    4644:	adds	r5, #1
  if (cluster > (m_clusterCount + 1)) {
    4646:	adds	r3, #1
    4648:	cmp	r3, r4
    464a:	bcc.n	4630 <ExFatPartition::chainSize(unsigned long)+0xc>
    DBG_FAIL_MACRO;
    return -1;
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    464c:	ldr.w	r1, [r7, #1060]	; 0x424
    4650:	movs	r2, #0
    4652:	mov	r0, r6
    4654:	add.w	r1, r1, r4, lsr #7
    4658:	bl	3278 <FsCache::prepare(unsigned long, unsigned char)>

  cache = dataCachePrepare(sector, FsCache::CACHE_FOR_READ);
  if (!cache) {
    return -1;
  }
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    465c:	lsls	r4, r4, #2
  if (!cache) {
    465e:	cmp	r0, #0
    4660:	beq.n	4630 <ExFatPartition::chainSize(unsigned long)+0xc>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    4662:	ubfx	r4, r4, #0, #9
  return *reinterpret_cast<const uint32_t*>(src);
    4666:	ldr	r4, [r0, r4]
  if (next == EXFAT_EOC) {
    4668:	adds	r3, r4, #1
    466a:	bne.n	4640 <ExFatPartition::chainSize(unsigned long)+0x1c>
    n++;
    466c:	adds	r0, r5, #1
}
    466e:	pop	{r3, r4, r5, r6, r7, pc}

00004670 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>:
uint8_t* ExFatPartition::dirCache(DirPos_t* pos, uint8_t options) {
    4670:	push	{r3, r4, r5, lr}
    4672:	mov	r4, r1
           ((cluster - 2) << m_sectorsPerClusterShift);
    4674:	ldr	r3, [r1, #0]
    4676:	ldrb.w	ip, [r0, #1093]	; 0x445
    return m_dataCache.prepare(sector, option);
    467a:	add.w	r0, r0, #528	; 0x210
  sector += (m_clusterMask & pos->position) >> m_bytesPerSectorShift;
    467e:	ldr.w	r1, [r0, #552]	; 0x228
           ((cluster - 2) << m_sectorsPerClusterShift);
    4682:	subs	r3, #2
    4684:	ldr	r5, [r4, #4]
    4686:	lsl.w	r3, r3, ip
    468a:	ands	r1, r5
    468c:	add.w	r3, r3, r1, lsr #9
    4690:	ldr.w	r1, [r0, #540]	; 0x21c
    return m_dataCache.prepare(sector, option);
    4694:	add	r1, r3
    4696:	bl	3278 <FsCache::prepare(unsigned long, unsigned char)>
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
    469a:	cbz	r0, 46a4 <ExFatPartition::dirCache(DirPos_t*, unsigned char)+0x34>
    469c:	ldr	r3, [r4, #4]
    469e:	ubfx	r3, r3, #0, #9
    46a2:	add	r0, r3
}
    46a4:	pop	{r3, r4, r5, pc}
    46a6:	nop

000046a8 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>:
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    46a8:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    46ac:	mov	r4, r1
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    46ae:	ldr.w	r3, [r0, #1080]	; 0x438
    46b2:	ldr	r1, [r1, #4]
    46b4:	ands	r3, r1
  pos->position += offset;
    46b6:	add	r1, r2
    46b8:	str	r1, [r4, #4]
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    46ba:	add	r3, r2
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    46bc:	ldrb.w	r1, [r0, #1093]	; 0x445
    46c0:	add.w	r2, r1, #9
  tmp >>= bytesPerClusterShift();
    46c4:	uxtb	r2, r2
    46c6:	lsrs	r3, r2
  while (tmp--) {
    46c8:	cbz	r3, 4716 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x6e>
    46ca:	mov	r8, r0
    46cc:	subs	r5, r3, #1
    return m_dataCache.prepare(sector, option);
    46ce:	add.w	r9, r0, #528	; 0x210
    46d2:	b.n	46e0 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x38>
      pos->cluster++;
    46d4:	ldr	r3, [r4, #0]
  while (tmp--) {
    46d6:	subs	r5, #1
      pos->cluster++;
    46d8:	add.w	r3, r3, #1
    46dc:	str	r3, [r4, #0]
  while (tmp--) {
    46de:	bcc.n	4716 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x6e>
    if (pos->isContiguous) {
    46e0:	ldrb	r6, [r4, #8]
    46e2:	cmp	r6, #0
    46e4:	bne.n	46d4 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x2c>
  if (cluster > (m_clusterCount + 1)) {
    46e6:	ldr.w	r3, [r8, #1072]	; 0x430
    46ea:	mov	r2, r6
      status = fatGet(pos->cluster, &pos->cluster);
    46ec:	ldr	r7, [r4, #0]
    46ee:	mov	r0, r9
  if (cluster > (m_clusterCount + 1)) {
    46f0:	adds	r3, #1
    46f2:	cmp	r7, r3
    46f4:	bhi.n	471c <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x74>
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    46f6:	ldr.w	r1, [r8, #1060]	; 0x424
    46fa:	add.w	r1, r1, r7, lsr #7
    46fe:	bl	3278 <FsCache::prepare(unsigned long, unsigned char)>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    4702:	lsls	r7, r7, #2
  if (!cache) {
    4704:	cbz	r0, 471c <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x74>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    4706:	ubfx	r7, r7, #0, #9
    470a:	ldr	r3, [r0, r7]
  if (next == EXFAT_EOC) {
    470c:	adds	r2, r3, #1
    470e:	beq.n	4724 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x7c>
  while (tmp--) {
    4710:	subs	r5, #1
    return 0;
  }
  *value = next;
    4712:	str	r3, [r4, #0]
  while (tmp--) {
    4714:	bcs.n	46e0 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x38>
  return 1;
    4716:	movs	r0, #1
}
    4718:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return -1;
    471c:	mov.w	r0, #4294967295
}
    4720:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return 0;
    4724:	mov	r0, r6
}
    4726:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    472a:	nop

0000472c <ExFatPartition::fatGet(unsigned long, unsigned long*)>:
int8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    472c:	push	{r3, r4, r5, lr}
  if (cluster > (m_clusterCount + 1)) {
    472e:	ldr.w	r3, [r0, #1072]	; 0x430
    4732:	adds	r3, #1
    4734:	cmp	r3, r1
    4736:	bcs.n	473e <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x12>
    return -1;
    4738:	mov.w	r0, #4294967295
  return 1;
}
    473c:	pop	{r3, r4, r5, pc}
    473e:	mov	r4, r1
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    4740:	ldr.w	r1, [r0, #1060]	; 0x424
    4744:	mov	r5, r2
    4746:	add.w	r0, r0, #528	; 0x210
    474a:	movs	r2, #0
    474c:	add.w	r1, r1, r4, lsr #7
    4750:	bl	3278 <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    4754:	cmp	r0, #0
    4756:	beq.n	4738 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0xc>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    4758:	lsls	r4, r4, #2
    475a:	ubfx	r4, r4, #0, #9
    475e:	ldr	r3, [r0, r4]
  if (next == EXFAT_EOC) {
    4760:	adds	r2, r3, #1
    4762:	beq.n	476a <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x3e>
  return 1;
    4764:	movs	r0, #1
  *value = next;
    4766:	str	r3, [r5, #0]
}
    4768:	pop	{r3, r4, r5, pc}
    return 0;
    476a:	movs	r0, #0
}
    476c:	pop	{r3, r4, r5, pc}
    476e:	nop

00004770 <ExFatPartition::fatPut(unsigned long, unsigned long)>:
//------------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    4770:	cmp	r1, #1
    4772:	bls.n	47ac <ExFatPartition::fatPut(unsigned long, unsigned long)+0x3c>
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
    4774:	push	{r3, r4, r5, lr}
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    4776:	ldr.w	r3, [r0, #1072]	; 0x430
    477a:	mov	r4, r1
    477c:	adds	r3, #1
    477e:	cmp	r3, r1
    4780:	bcs.n	4786 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x16>
  }
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;

fail:
  return false;
    4782:	movs	r0, #0
}
    4784:	pop	{r3, r4, r5, pc}
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    4786:	ldr.w	r1, [r0, #1060]	; 0x424
    478a:	mov	r5, r2
    478c:	add.w	r0, r0, #528	; 0x210
    4790:	movs	r2, #1
    4792:	add.w	r1, r1, r4, lsr #7
    4796:	bl	3278 <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    479a:	mov	r3, r0
    479c:	cmp	r0, #0
    479e:	beq.n	4782 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x12>
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
    47a0:	lsls	r4, r4, #2
  return true;
    47a2:	movs	r0, #1
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
    47a4:	ubfx	r4, r4, #0, #9
  *reinterpret_cast<uint32_t*>(dst) = src;
    47a8:	str	r5, [r3, r4]
}
    47aa:	pop	{r3, r4, r5, pc}
  return false;
    47ac:	movs	r0, #0
}
    47ae:	bx	lr

000047b0 <ExFatPartition::freeChain(unsigned long)>:
  if (cluster > (m_clusterCount + 1)) {
    47b0:	ldr.w	r3, [r0, #1072]	; 0x430
    47b4:	adds	r3, #1
    47b6:	cmp	r1, r3
    47b8:	bls.n	47be <ExFatPartition::freeChain(unsigned long)+0xe>

  return true;

fail:
  return false;
}
    47ba:	movs	r0, #0
    47bc:	bx	lr
bool ExFatPartition::freeChain(uint32_t cluster) {
    47be:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    47c2:	mov	r5, r0
    47c4:	sub	sp, #12
    47c6:	mov	r4, r1
    47c8:	add.w	r9, r0, #528	; 0x210
    47cc:	mov	r7, r1
    47ce:	mov.w	r8, #0
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    47d2:	ldr.w	r1, [r5, #1060]	; 0x424
    47d6:	movs	r2, #0
    47d8:	mov	r0, r9
    47da:	mov.w	fp, r4, lsr #7
    47de:	add.w	r1, r1, r4, lsr #7
    47e2:	bl	3278 <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    47e6:	cbz	r0, 480e <ExFatPartition::freeChain(unsigned long)+0x5e>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    47e8:	lsls	r3, r4, #2
    47ea:	ubfx	r3, r3, #0, #9
  return *reinterpret_cast<const uint32_t*>(src);
    47ee:	ldr	r2, [r0, r3]
    47f0:	str	r3, [sp, #4]
  if (next == EXFAT_EOC) {
    47f2:	adds	r3, r2, #1
    47f4:	itet	ne
    47f6:	movne	r6, r2
    47f8:	moveq.w	sl, #0
    47fc:	movne.w	sl, #1
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    4800:	cmp	r4, #1
    4802:	bls.n	480e <ExFatPartition::freeChain(unsigned long)+0x5e>
    4804:	ldr.w	r2, [r5, #1072]	; 0x430
    4808:	adds	r2, #1
    480a:	cmp	r4, r2
    480c:	bls.n	4816 <ExFatPartition::freeChain(unsigned long)+0x66>
}
    480e:	movs	r0, #0
    4810:	add	sp, #12
    4812:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    4816:	ldr.w	r1, [r5, #1060]	; 0x424
    481a:	movs	r2, #1
    481c:	mov	r0, r9
    481e:	add	r1, fp
    4820:	bl	3278 <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    4824:	cmp	r0, #0
    4826:	beq.n	480e <ExFatPartition::freeChain(unsigned long)+0x5e>
  *reinterpret_cast<uint32_t*>(dst) = src;
    4828:	ldr	r3, [sp, #4]
    482a:	str.w	r8, [r0, r3]
    if (status == 0 || (cluster + 1) != next) {
    482e:	cmp.w	sl, #0
    4832:	beq.n	485a <ExFatPartition::freeChain(unsigned long)+0xaa>
    4834:	adds	r4, #1
    4836:	cmp	r4, r6
    4838:	beq.n	484c <ExFatPartition::freeChain(unsigned long)+0x9c>
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    483a:	movs	r3, #0
    483c:	subs	r2, r4, r7
    483e:	mov	r1, r7
    4840:	mov	r0, r5
    4842:	bl	4578 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    4846:	cmp	r0, #0
    4848:	beq.n	480e <ExFatPartition::freeChain(unsigned long)+0x5e>
    484a:	mov	r7, r6
  if (cluster > (m_clusterCount + 1)) {
    484c:	ldr.w	r3, [r5, #1072]	; 0x430
    4850:	adds	r3, #1
    4852:	cmp	r3, r6
    4854:	bcc.n	480e <ExFatPartition::freeChain(unsigned long)+0x5e>
    4856:	mov	r4, r6
    4858:	b.n	47d2 <ExFatPartition::freeChain(unsigned long)+0x22>
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    485a:	adds	r2, r4, #1
    485c:	mov	r3, sl
    485e:	mov	r1, r7
    4860:	mov	r0, r5
    4862:	subs	r2, r2, r7
}
    4864:	add	sp, #12
    4866:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    486a:	b.w	4578 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    486e:	nop

00004870 <ExFatPartition::freeClusterCount()>:
//------------------------------------------------------------------------------
int32_t ExFatPartition::freeClusterCount() {
    4870:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t nc = 0;
  uint32_t sector = m_clusterHeapStartSector;
  uint32_t usedCount = 0;
    4874:	movs	r5, #0
int32_t ExFatPartition::freeClusterCount() {
    4876:	mov	r6, r0
  uint32_t sector = m_clusterHeapStartSector;
    4878:	ldr.w	r1, [r0, #1068]	; 0x42c
    487c:	add.w	r8, r0, #528	; 0x210
  uint32_t nc = 0;
    4880:	mov	r4, r5
    4882:	movs	r2, #0
    4884:	mov	r0, r8
  uint8_t* cache;

  while (true) {
    cache = dataCachePrepare(sector++, FsCache::CACHE_FOR_READ);
    4886:	adds	r7, r1, #1
    4888:	bl	3278 <FsCache::prepare(unsigned long, unsigned char)>
    if (!cache) {
    488c:	cbz	r0, 48da <ExFatPartition::freeClusterCount()+0x6a>
    488e:	add.w	lr, r0, #4294967295
    4892:	add.w	r9, r4, #4096	; 0x1000
            usedCount++;
          }
        }
      }
      nc += 8;
      if (nc >= m_clusterCount) {
    4896:	ldr.w	r0, [r6, #1072]	; 0x430
    489a:	b.n	48a8 <ExFatPartition::freeClusterCount()+0x38>
      } else if (cache[i]) {
    489c:	cbnz	r1, 48be <ExFatPartition::freeClusterCount()+0x4e>
      nc += 8;
    489e:	adds	r4, #8
      if (nc >= m_clusterCount) {
    48a0:	cmp	r4, r0
    48a2:	bcs.n	48b8 <ExFatPartition::freeClusterCount()+0x48>
    for (size_t i = 0; i < m_bytesPerSector; i++) {
    48a4:	cmp	r4, r9
    48a6:	beq.n	48d6 <ExFatPartition::freeClusterCount()+0x66>
      if (cache[i] == 0XFF) {
    48a8:	ldrb.w	r1, [lr, #1]!
    48ac:	cmp	r1, #255	; 0xff
    48ae:	bne.n	489c <ExFatPartition::freeClusterCount()+0x2c>
      nc += 8;
    48b0:	adds	r4, #8
        usedCount += 8;
    48b2:	adds	r5, #8
      if (nc >= m_clusterCount) {
    48b4:	cmp	r4, r0
    48b6:	bcc.n	48a4 <ExFatPartition::freeClusterCount()+0x34>
        return m_clusterCount - usedCount;
    48b8:	subs	r0, r0, r5
      }
    }
  }
}
    48ba:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    48be:	movs	r2, #8
        for (uint8_t mask = 1; mask; mask <<= 1) {
    48c0:	movs	r3, #1
          if ((mask & cache[i])) {
    48c2:	tst	r1, r3
        for (uint8_t mask = 1; mask; mask <<= 1) {
    48c4:	mov.w	ip, r3, lsl #1
            usedCount++;
    48c8:	it	ne
    48ca:	addne	r5, #1
        for (uint8_t mask = 1; mask; mask <<= 1) {
    48cc:	subs	r2, #1
    48ce:	uxtb.w	r3, ip
    48d2:	bne.n	48c2 <ExFatPartition::freeClusterCount()+0x52>
    48d4:	b.n	489e <ExFatPartition::freeClusterCount()+0x2e>
    cache = dataCachePrepare(sector++, FsCache::CACHE_FOR_READ);
    48d6:	mov	r1, r7
    48d8:	b.n	4882 <ExFatPartition::freeClusterCount()+0x12>
      return -1;
    48da:	mov.w	r0, #4294967295
    48de:	b.n	48ba <ExFatPartition::freeClusterCount()+0x4a>

000048e0 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)>:
//------------------------------------------------------------------------------
bool ExFatPartition::init(FsBlockDevice* dev, uint8_t part, uint32_t volStart) {
    48e0:	push	{r3, r4, r5, r6, r7, lr}
  pbs_t* pbs;
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  m_fatType = 0;
    48e2:	mov.w	ip, #0
  m_blockDev = dev;
  cacheInit(m_blockDev);
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    48e6:	mov	r5, r2
    m_sector = 0XFFFFFFFF;
    48e8:	mov.w	r2, #4294967295
bool ExFatPartition::init(FsBlockDevice* dev, uint8_t part, uint32_t volStart) {
    48ec:	mov	r4, r0
  m_fatType = 0;
    48ee:	strb.w	ip, [r0, #1092]	; 0x444
  m_blockDev = dev;
    48f2:	str.w	r1, [r0, #1088]	; 0x440
    m_blockDev = blockDev;
    48f6:	str	r1, [r0, #4]
    48f8:	str.w	r1, [r0, #532]	; 0x214
    m_status = 0;
    48fc:	strb.w	ip, [r0]
    4900:	strb.w	ip, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    4904:	str	r2, [r0, #8]
    4906:	str.w	r2, [r0, #536]	; 0x218
  if (part) {
    490a:	cbz	r5, 4946 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x66>
    if (part > 4) {
    490c:	cmp	r5, #4
    490e:	bls.n	4914 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x34>
  bitmapFind(0, 1);
  m_fatType = FAT_TYPE_EXFAT;
  return true;

fail:
  return false;
    4910:	movs	r0, #0
}
    4912:	pop	{r3, r4, r5, r6, r7, pc}
    4914:	add.w	r7, r0, #528	; 0x210
    4918:	mov	r2, ip
    491a:	mov	r1, ip
    491c:	mov	r0, r7
    491e:	bl	3278 <FsCache::prepare(unsigned long, unsigned char)>
    if (!mbr) {
    4922:	cmp	r0, #0
    4924:	beq.n	4910 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x30>
    MbrPart_t* mp = mbr->part + part - 1;
    4926:	mvn.w	r3, #4026531840	; 0xf0000000
    492a:	add.w	r0, r0, #446	; 0x1be
    492e:	add	r3, r5
    4930:	lsls	r1, r3, #4
    4932:	add.w	r3, r0, r3, lsl #4
    if (mp->type == 0 || (mp->boot != 0 && mp->boot != 0X80)) {
    4936:	ldrb	r2, [r3, #4]
    4938:	cmp	r2, #0
    493a:	beq.n	4910 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x30>
    493c:	ldrb	r2, [r0, r1]
    493e:	lsls	r2, r2, #25
    4940:	bne.n	4910 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x30>
  return *reinterpret_cast<const uint32_t*>(src);
    4942:	ldr	r6, [r3, #8]
    4944:	b.n	494c <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x6c>
    4946:	mov	r6, r3
    4948:	add.w	r7, r0, #528	; 0x210
    494c:	movs	r2, #0
    494e:	mov	r1, r6
    4950:	mov	r0, r7
    4952:	bl	3278 <FsCache::prepare(unsigned long, unsigned char)>
  if (!pbs) {
    4956:	mov	r5, r0
    4958:	cmp	r0, #0
    495a:	beq.n	4910 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x30>
  if (strncmp(pbs->oemName, "EXFAT", 5)) {
    495c:	movs	r2, #5
    495e:	ldr	r1, [pc, #104]	; (49c8 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0xe8>)
    4960:	adds	r0, #3
    4962:	bl	e1b4 <strncmp>
    4966:	cmp	r0, #0
    4968:	bne.n	4910 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x30>
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    496a:	ldrb.w	r3, [r5, #108]	; 0x6c
    496e:	cmp	r3, #9
    4970:	bne.n	4910 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x30>
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    4972:	ldr	r3, [r5, #80]	; 0x50
  bitmapFind(0, 1);
    4974:	mov	r1, r0
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    4976:	add	r3, r6
    4978:	str.w	r3, [r4, #1060]	; 0x424
    497c:	ldr	r3, [r5, #84]	; 0x54
  m_fatLength = getLe32(bpb->fatLength);
    497e:	str.w	r3, [r4, #1064]	; 0x428
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
    4982:	ldr	r3, [r5, #88]	; 0x58
    4984:	add	r3, r6
    4986:	str.w	r3, [r4, #1068]	; 0x42c
    498a:	ldr	r3, [r5, #92]	; 0x5c
  m_clusterCount = getLe32(bpb->clusterCount);
    498c:	str.w	r3, [r4, #1072]	; 0x430
    4990:	ldr	r3, [r5, #96]	; 0x60
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
    4992:	str.w	r3, [r4, #1076]	; 0x434
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    4996:	ldrb.w	r2, [r5, #109]	; 0x6d
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    499a:	movs	r5, #1
  m_bitmapStart = 0;
    499c:	str.w	r0, [r4, #1056]	; 0x420
  bitmapFind(0, 1);
    49a0:	mov	r0, r4
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    49a2:	add.w	r3, r2, #9
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    49a6:	strb.w	r2, [r4, #1093]	; 0x445
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    49aa:	lsl.w	r3, r5, r3
  m_clusterMask = m_bytesPerCluster - 1;
    49ae:	subs	r2, r3, #1
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    49b0:	str.w	r3, [r4, #1084]	; 0x43c
  m_clusterMask = m_bytesPerCluster - 1;
    49b4:	str.w	r2, [r4, #1080]	; 0x438
  bitmapFind(0, 1);
    49b8:	mov	r2, r5
    49ba:	bl	44b8 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  m_fatType = FAT_TYPE_EXFAT;
    49be:	movs	r3, #64	; 0x40
  return true;
    49c0:	mov	r0, r5
  m_fatType = FAT_TYPE_EXFAT;
    49c2:	strb.w	r3, [r4, #1092]	; 0x444
}
    49c6:	pop	{r3, r4, r5, r6, r7, pc}
    49c8:	.word	0x2000083c

000049cc <ExFatPartition::rootLength()>:
//------------------------------------------------------------------------------
uint32_t ExFatPartition::rootLength() {
    49cc:	push	{r4, lr}
    49ce:	mov	r4, r0
  uint32_t nc = chainSize(m_rootDirectoryCluster);
    49d0:	ldr.w	r1, [r0, #1076]	; 0x434
    49d4:	bl	4624 <ExFatPartition::chainSize(unsigned long)>
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    49d8:	ldrb.w	r3, [r4, #1093]	; 0x445
    49dc:	adds	r3, #9
  return nc << bytesPerClusterShift();
    49de:	uxtb	r3, r3
}
    49e0:	lsls	r0, r3
    49e2:	pop	{r4, pc}

000049e4 <ExFatFile::addCluster()>:
  }
  return checksum;
}
//------------------------------------------------------------------------------
bool ExFatFile::addCluster() {
  uint32_t find = m_vol->bitmapFind(m_curCluster ? m_curCluster + 1 : 0, 1);
    49e4:	ldr	r1, [r0, #24]
bool ExFatFile::addCluster() {
    49e6:	push	{r3, r4, r5, r6, r7, lr}
    49e8:	mov	r4, r0
  uint32_t find = m_vol->bitmapFind(m_curCluster ? m_curCluster + 1 : 0, 1);
    49ea:	ldr	r0, [r0, #32]
    49ec:	cbz	r1, 49f0 <ExFatFile::addCluster()+0xc>
    49ee:	adds	r1, #1
    49f0:	movs	r2, #1
    49f2:	bl	44b8 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  if (find < 2) {
    49f6:	cmp	r0, #1
  uint32_t find = m_vol->bitmapFind(m_curCluster ? m_curCluster + 1 : 0, 1);
    49f8:	mov	r5, r0
  if (find < 2) {
    49fa:	bls.n	4a62 <ExFatFile::addCluster()+0x7e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!m_vol->bitmapModify(find, 1, 1)) {
    49fc:	movs	r3, #1
    49fe:	mov	r1, r0
    4a00:	ldr	r0, [r4, #32]
    4a02:	mov	r2, r3
    4a04:	bl	4578 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    4a08:	mov	r6, r0
    4a0a:	cbz	r0, 4a62 <ExFatFile::addCluster()+0x7e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_curCluster == 0) {
    4a0c:	ldr	r3, [r4, #24]
    4a0e:	cbz	r3, 4a68 <ExFatFile::addCluster()+0x84>
  bool isContiguous() const { return m_flags & FILE_FLAG_CONTIGUOUS; }
    4a10:	ldrb.w	r2, [r4, #51]	; 0x33
    m_flags |= FILE_FLAG_CONTIGUOUS;
    goto done;
  }
  if (isContiguous()) {
    4a14:	lsls	r1, r2, #25
    4a16:	bpl.n	4a3e <ExFatFile::addCluster()+0x5a>
    if (find == (m_curCluster + 1)) {
    4a18:	adds	r1, r3, #1
    4a1a:	cmp	r1, r5
    4a1c:	beq.n	4a50 <ExFatFile::addCluster()+0x6c>
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    4a1e:	bic.w	r2, r2, #64	; 0x40

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    4a22:	ldr	r1, [r4, #28]
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    4a24:	strb.w	r2, [r4, #51]	; 0x33
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    4a28:	b.n	4a36 <ExFatFile::addCluster()+0x52>
      if (!m_vol->fatPut(c, c + 1)) {
    4a2a:	ldr	r0, [r4, #32]
    4a2c:	bl	4770 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    4a30:	mov	r1, r7
      if (!m_vol->fatPut(c, c + 1)) {
    4a32:	cbz	r0, 4a62 <ExFatFile::addCluster()+0x7e>
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    4a34:	ldr	r3, [r4, #24]
      if (!m_vol->fatPut(c, c + 1)) {
    4a36:	adds	r7, r1, #1
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    4a38:	cmp	r1, r3
      if (!m_vol->fatPut(c, c + 1)) {
    4a3a:	mov	r2, r7
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    4a3c:	bcc.n	4a2a <ExFatFile::addCluster()+0x46>
        goto fail;
      }
    }
  }
  // New cluster is EOC.
  if (!m_vol->fatPut(find, EXFAT_EOC)) {
    4a3e:	mov.w	r2, #4294967295
    4a42:	mov	r1, r5
    4a44:	ldr	r0, [r4, #32]
    4a46:	bl	4770 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    4a4a:	cbz	r0, 4a62 <ExFatFile::addCluster()+0x7e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Connect new cluster to existing chain.
  if (m_curCluster) {
    4a4c:	ldr	r1, [r4, #24]
    4a4e:	cbnz	r1, 4a56 <ExFatFile::addCluster()+0x72>
  m_curCluster = find;
  return true;

fail:
  return false;
}
    4a50:	mov	r0, r6
  m_curCluster = find;
    4a52:	str	r5, [r4, #24]
}
    4a54:	pop	{r3, r4, r5, r6, r7, pc}
    if (!m_vol->fatPut(m_curCluster, find)) {
    4a56:	mov	r2, r5
    4a58:	ldr	r0, [r4, #32]
    4a5a:	bl	4770 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    4a5e:	cmp	r0, #0
    4a60:	bne.n	4a50 <ExFatFile::addCluster()+0x6c>
  return false;
    4a62:	movs	r6, #0
}
    4a64:	mov	r0, r6
    4a66:	pop	{r3, r4, r5, r6, r7, pc}
    m_flags |= FILE_FLAG_CONTIGUOUS;
    4a68:	ldrb.w	r3, [r4, #51]	; 0x33
    4a6c:	orr.w	r3, r3, #64	; 0x40
    4a70:	strb.w	r3, [r4, #51]	; 0x33
    goto done;
    4a74:	b.n	4a50 <ExFatFile::addCluster()+0x6c>
    4a76:	nop

00004a78 <ExFatFile::remove()>:
  bool isWritable() const { return m_flags & FILE_FLAG_WRITE; }
    4a78:	ldrb.w	r3, [r0, #51]	; 0x33
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
  uint8_t* cache;
  if (!isWritable()) {
    4a7c:	lsls	r2, r3, #30
    4a7e:	bpl.n	4aee <ExFatFile::remove()+0x76>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster) {
    4a80:	ldr	r1, [r0, #28]
bool ExFatFile::remove() {
    4a82:	push	{r4, r5, r6, lr}
    4a84:	mov	r5, r0
  if (m_firstCluster) {
    4a86:	cbnz	r1, 4ab2 <ExFatFile::remove()+0x3a>
bool ExFatFile::remove() {
    4a88:	movs	r4, #0
    4a8a:	mov	r1, r4
    4a8c:	b.n	4a9e <ExFatFile::remove()+0x26>
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Mark entry not used.
    cache[0] &= 0x7F;
    4a8e:	ldrb	r3, [r0, #0]
    4a90:	and.w	r3, r3, #127	; 0x7f
    4a94:	strb	r3, [r0, #0]
  for (uint8_t is = 0; is <= m_setCount; is++) {
    4a96:	ldrb.w	r3, [r5, #48]	; 0x30
    4a9a:	cmp	r3, r1
    4a9c:	bcc.n	4af2 <ExFatFile::remove()+0x7a>
    4a9e:	adds	r4, #1
    cache = dirCache(is, FsCache::CACHE_FOR_WRITE);
    4aa0:	movs	r2, #1
    4aa2:	mov	r0, r5
    4aa4:	bl	3bb0 <ExFatFile::dirCache(unsigned char, unsigned char)>
  for (uint8_t is = 0; is <= m_setCount; is++) {
    4aa8:	uxtb	r1, r4
    if (!cache) {
    4aaa:	cmp	r0, #0
    4aac:	bne.n	4a8e <ExFatFile::remove()+0x16>
  // Write entry to device.
  return m_vol->cacheSync();

fail:
  return false;
}
    4aae:	movs	r0, #0
    4ab0:	pop	{r4, r5, r6, pc}
    if (isContiguous()) {
    4ab2:	lsls	r3, r3, #25
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    4ab4:	ldr	r0, [r0, #32]
    if (isContiguous()) {
    4ab6:	bpl.n	4b22 <ExFatFile::remove()+0xaa>
    4ab8:	ldrb.w	r3, [r0, #1093]	; 0x445
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    4abc:	ldrd	r2, r4, [r5, #8]
    4ac0:	adds	r3, #9
    4ac2:	subs	r2, #1
    4ac4:	uxtb	r3, r3
    4ac6:	adc.w	r4, r4, #4294967295
    4aca:	rsb	ip, r3, #32
    4ace:	lsrs	r2, r3
    4ad0:	subs	r3, #32
    4ad2:	lsl.w	ip, r4, ip
    4ad6:	lsr.w	r3, r4, r3
    4ada:	orr.w	r2, r2, ip
    4ade:	orrs	r2, r3
      if (!m_vol->bitmapModify(m_firstCluster, nc, 0)) {
    4ae0:	movs	r3, #0
    4ae2:	adds	r2, #1
    4ae4:	bl	4578 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    4ae8:	cmp	r0, #0
    4aea:	bne.n	4a88 <ExFatFile::remove()+0x10>
    4aec:	b.n	4aae <ExFatFile::remove()+0x36>
}
    4aee:	movs	r0, #0
    4af0:	bx	lr
  m_attributes = FILE_ATTR_CLOSED;
    4af2:	movs	r3, #0
  return m_vol->cacheSync();
    4af4:	ldr	r4, [r5, #32]
  m_attributes = FILE_ATTR_CLOSED;
    4af6:	strb.w	r3, [r5, #49]	; 0x31
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    4afa:	mov	r0, r4
  m_flags = 0;
    4afc:	strb.w	r3, [r5, #51]	; 0x33
    4b00:	bl	3220 <FsCache::sync()>
    4b04:	cmp	r0, #0
    4b06:	beq.n	4aae <ExFatFile::remove()+0x36>
    4b08:	add.w	r0, r4, #528	; 0x210
    4b0c:	bl	3220 <FsCache::sync()>
    4b10:	cmp	r0, #0
    4b12:	beq.n	4aae <ExFatFile::remove()+0x36>
    4b14:	ldr.w	r0, [r4, #1088]	; 0x440
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() const { return m_sectorMask; }
  bool syncDevice() { return m_blockDev->syncDevice(); }
    4b18:	ldr	r3, [r0, #0]
}
    4b1a:	ldmia.w	sp!, {r4, r5, r6, lr}
    4b1e:	ldr	r3, [r3, #28]
    4b20:	bx	r3
      if (!m_vol->freeChain(m_firstCluster)) {
    4b22:	bl	47b0 <ExFatPartition::freeChain(unsigned long)>
    4b26:	cmp	r0, #0
    4b28:	bne.n	4a88 <ExFatFile::remove()+0x10>
    4b2a:	b.n	4aae <ExFatFile::remove()+0x36>

00004b2c <ExFatFile::rmdir()>:
//------------------------------------------------------------------------------
bool ExFatFile::rmdir() {
  int n;
  uint8_t dir[FS_DIR_SIZE];
  // must be open subdirectory
  if (!isSubDir()) {
    4b2c:	ldrb.w	r3, [r0, #49]	; 0x31
    4b30:	lsls	r3, r3, #27
    4b32:	bmi.n	4b38 <ExFatFile::rmdir()+0xc>
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
  return remove();

fail:
  return false;
    4b34:	movs	r0, #0
}
    4b36:	bx	lr
bool ExFatFile::rmdir() {
    4b38:	push	{r4, lr}
  void rewind() { seekSet(0); }
    4b3a:	movs	r2, #0
    4b3c:	sub	sp, #32
    4b3e:	movs	r3, #0
    4b40:	mov	r4, r0
    4b42:	bl	3edc <ExFatFile::seekSet(unsigned long long)>
    4b46:	b.n	4b5a <ExFatFile::rmdir()+0x2e>
    if (n != FS_DIR_SIZE || dir[0] & 0X80) {
    4b48:	cmp	r0, #32
    4b4a:	bne.n	4b84 <ExFatFile::rmdir()+0x58>
    4b4c:	ldrsb.w	r3, [sp]
    4b50:	ldrb.w	r2, [sp]
    4b54:	cmp	r3, #0
    4b56:	blt.n	4b84 <ExFatFile::rmdir()+0x58>
    if (dir[0] == 0) {
    4b58:	cbz	r2, 4b68 <ExFatFile::rmdir()+0x3c>
    n = read(dir, FS_DIR_SIZE);
    4b5a:	movs	r2, #32
    4b5c:	mov	r1, sp
    4b5e:	mov	r0, r4
    4b60:	bl	3d10 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    4b64:	cmp	r0, #0
    4b66:	bne.n	4b48 <ExFatFile::rmdir()+0x1c>
  m_flags |= FILE_FLAG_WRITE;
    4b68:	ldrb.w	r3, [r4, #51]	; 0x33
  m_attributes = FILE_ATTR_FILE;
    4b6c:	movs	r2, #8
  return remove();
    4b6e:	mov	r0, r4
  m_flags |= FILE_FLAG_WRITE;
    4b70:	orr.w	r3, r3, #2
  m_attributes = FILE_ATTR_FILE;
    4b74:	strb.w	r2, [r4, #49]	; 0x31
  m_flags |= FILE_FLAG_WRITE;
    4b78:	strb.w	r3, [r4, #51]	; 0x33
  return remove();
    4b7c:	bl	4a78 <ExFatFile::remove()>
}
    4b80:	add	sp, #32
    4b82:	pop	{r4, pc}
  return false;
    4b84:	movs	r0, #0
}
    4b86:	add	sp, #32
    4b88:	pop	{r4, pc}
    4b8a:	nop

00004b8c <ExFatFile::syncDir()>:
fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    4b8c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4b90:	mov.w	r8, #0
    4b94:	sub	sp, #8
    }
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setLe16(df->attributes, m_attributes & FS_ATTRIB_COPY);
        if (FsDateTime::callback) {
    4b96:	ldr	r7, [pc, #296]	; (4cc0 <ExFatFile::syncDir()+0x134>)
bool ExFatFile::syncDir() {
    4b98:	mov	r6, r0
  uint16_t checksum = 0;
    4b9a:	mov	r4, r8
    4b9c:	mov	r1, r8
    cache = dirCache(is, FsCache::CACHE_FOR_READ);
    4b9e:	movs	r2, #0
    4ba0:	mov	r0, r6
    4ba2:	bl	3bb0 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache) {
    4ba6:	mov	r5, r0
    4ba8:	cbz	r0, 4bb8 <ExFatFile::syncDir()+0x2c>
    switch (cache[0]) {
    4baa:	ldrb	r1, [r0, #0]
    4bac:	cmp	r1, #192	; 0xc0
    4bae:	beq.n	4c84 <ExFatFile::syncDir()+0xf8>
    4bb0:	cmp	r1, #193	; 0xc1
    4bb2:	beq.n	4c0c <ExFatFile::syncDir()+0x80>
    4bb4:	cmp	r1, #133	; 0x85
    4bb6:	beq.n	4bcc <ExFatFile::syncDir()+0x40>
    goto fail;
  }
  return true;

fail:
  m_error |= WRITE_ERROR;
    4bb8:	ldrb.w	r3, [r6, #50]	; 0x32
  return false;
    4bbc:	movs	r0, #0
  m_error |= WRITE_ERROR;
    4bbe:	orr.w	r3, r3, #1
    4bc2:	strb.w	r3, [r6, #50]	; 0x32
}
    4bc6:	add	sp, #8
    4bc8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        setLe16(df->attributes, m_attributes & FS_ATTRIB_COPY);
    4bcc:	ldrb.w	r3, [r6, #49]	; 0x31
    4bd0:	and.w	r3, r3, #55	; 0x37
    4bd4:	strh	r3, [r0, #4]
        if (FsDateTime::callback) {
    4bd6:	ldr	r3, [r7, #0]
    4bd8:	cbz	r3, 4bfc <ExFatFile::syncDir()+0x70>
          FsDateTime::callback(&date, &time, &ms10);
    4bda:	add.w	r2, sp, #3
    4bde:	add.w	r1, sp, #6
    4be2:	add	r0, sp, #4
    4be4:	blx	r3
          setLe16(df->modifyTime, time);
    4be6:	ldrh.w	r3, [sp, #6]
  *reinterpret_cast<uint16_t*>(dst) = src;
    4bea:	strh	r3, [r5, #12]
    4bec:	strh	r3, [r5, #16]
          setLe16(df->modifyDate, date);
    4bee:	ldrh.w	r3, [sp, #4]
    4bf2:	strh	r3, [r5, #14]
    4bf4:	strh	r3, [r5, #18]
          df->modifyTimeMs = ms10;
    4bf6:	ldrb.w	r3, [sp, #3]
    4bfa:	strb	r3, [r5, #21]
        m_vol->dataCacheDirty();
    4bfc:	ldr	r2, [r6, #32]
  void dirty() { m_status |= CACHE_STATUS_DIRTY; }
    4bfe:	ldrb.w	r3, [r2, #528]	; 0x210
    4c02:	orr.w	r3, r3, #1
    4c06:	strb.w	r3, [r2, #528]	; 0x210
  bool skip = data[0] == EXFAT_TYPE_FILE;
    4c0a:	ldrb	r1, [r5, #0]
    4c0c:	sub.w	r0, r1, #133	; 0x85
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    4c10:	movs	r2, #0
  bool skip = data[0] == EXFAT_TYPE_FILE;
    4c12:	clz	r0, r0
    4c16:	lsrs	r0, r0, #5
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    4c18:	b.n	4c1e <ExFatFile::syncDir()+0x92>
    4c1a:	movs	r2, #4
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    4c1c:	ldrb	r1, [r5, r2]
    4c1e:	lsls	r3, r4, #15
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    4c20:	cmp	r2, #1
    4c22:	add.w	r2, r2, #1
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    4c26:	orr.w	r3, r3, r4, lsr #1
    4c2a:	uxtah	r3, r1, r3
    4c2e:	uxth	r4, r3
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    4c30:	bne.n	4c36 <ExFatFile::syncDir()+0xaa>
    4c32:	cmp	r0, #0
    4c34:	bne.n	4c1a <ExFatFile::syncDir()+0x8e>
    4c36:	cmp	r2, #31
    4c38:	bls.n	4c1c <ExFatFile::syncDir()+0x90>
  for (uint8_t is = 0; is <= m_setCount; is++) {
    4c3a:	add.w	r8, r8, #1
    4c3e:	ldrb.w	r3, [r6, #48]	; 0x30
    4c42:	uxtb.w	r1, r8
    4c46:	cmp	r3, r1
    4c48:	bcs.n	4b9e <ExFatFile::syncDir()+0x12>
      m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_WRITE));
    4c4a:	movs	r2, #1
    4c4c:	add.w	r1, r6, #36	; 0x24
    4c50:	ldr	r0, [r6, #32]
    4c52:	bl	4670 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    4c56:	cmp	r0, #0
    4c58:	beq.n	4bb8 <ExFatFile::syncDir()+0x2c>
  if (!m_vol->cacheSync()) {
    4c5a:	ldr	r5, [r6, #32]
    4c5c:	strh	r4, [r0, #2]
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    4c5e:	mov	r0, r5
    4c60:	bl	3220 <FsCache::sync()>
    4c64:	cmp	r0, #0
    4c66:	beq.n	4bb8 <ExFatFile::syncDir()+0x2c>
    4c68:	add.w	r0, r5, #528	; 0x210
    4c6c:	bl	3220 <FsCache::sync()>
    4c70:	cmp	r0, #0
    4c72:	beq.n	4bb8 <ExFatFile::syncDir()+0x2c>
    4c74:	ldr.w	r0, [r5, #1088]	; 0x440
  bool syncDevice() { return m_blockDev->syncDevice(); }
    4c78:	ldr	r3, [r0, #0]
    4c7a:	ldr	r3, [r3, #28]
    4c7c:	blx	r3
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    4c7e:	cmp	r0, #0
    4c80:	bne.n	4bc6 <ExFatFile::syncDir()+0x3a>
    4c82:	b.n	4bb8 <ExFatFile::syncDir()+0x2c>
        if (isContiguous()) {
    4c84:	ldrb.w	r3, [r6, #51]	; 0x33
    4c88:	tst.w	r3, #64	; 0x40
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
    4c8c:	ldrb	r3, [r0, #1]
    4c8e:	ite	ne
    4c90:	orrne.w	r3, r3, #2
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
    4c94:	andeq.w	r3, r3, #253	; 0xfd
    4c98:	strb	r3, [r0, #1]
        setLe64(ds->validLength, m_validLength);
    4c9a:	ldrd	r0, r1, [r6, #16]
        m_vol->dataCacheDirty();
    4c9e:	ldrd	r3, r2, [r6, #28]
  *reinterpret_cast<uint64_t*>(dst) = src;
    4ca2:	strd	r0, r1, [r5, #8]
        setLe64(ds->dataLength, m_dataLength);
    4ca6:	ldrd	r0, r1, [r6, #8]
  *reinterpret_cast<uint32_t*>(dst) = src;
    4caa:	str	r3, [r5, #20]
  *reinterpret_cast<uint64_t*>(dst) = src;
    4cac:	strd	r0, r1, [r5, #24]
    4cb0:	ldrb.w	r3, [r2, #528]	; 0x210
    4cb4:	orr.w	r3, r3, #1
    4cb8:	strb.w	r3, [r2, #528]	; 0x210
  bool skip = data[0] == EXFAT_TYPE_FILE;
    4cbc:	ldrb	r1, [r5, #0]
  void dataCacheDirty() { m_dataCache.dirty(); }
    4cbe:	b.n	4c0c <ExFatFile::syncDir()+0x80>
    4cc0:	.word	0x20006420

00004cc4 <ExFatFile::sync()>:
bool ExFatFile::sync() {
    4cc4:	push	{r3, r4, r5, lr}
  if (!isOpen()) {
    4cc6:	ldrb.w	r3, [r0, #49]	; 0x31
    4cca:	cbz	r3, 4d1e <ExFatFile::sync()+0x5a>
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    4ccc:	ldrsb.w	r2, [r0, #51]	; 0x33
    4cd0:	mov	r4, r0
    4cd2:	ldrb.w	r3, [r0, #51]	; 0x33
    4cd6:	cmp	r2, #0
    4cd8:	blt.n	4cf4 <ExFatFile::sync()+0x30>
  if (!m_vol->cacheSync()) {
    4cda:	ldr	r5, [r0, #32]
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    4cdc:	mov	r0, r5
    4cde:	bl	3220 <FsCache::sync()>
    4ce2:	cbnz	r0, 4d04 <ExFatFile::sync()+0x40>
  m_error |= WRITE_ERROR;
    4ce4:	ldrb.w	r3, [r4, #50]	; 0x32
  return false;
    4ce8:	movs	r0, #0
  m_error |= WRITE_ERROR;
    4cea:	orr.w	r3, r3, #1
    4cee:	strb.w	r3, [r4, #50]	; 0x32
}
    4cf2:	pop	{r3, r4, r5, pc}
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    4cf4:	and.w	r3, r3, #127	; 0x7f
    4cf8:	strb.w	r3, [r0, #51]	; 0x33
}
    4cfc:	ldmia.w	sp!, {r3, r4, r5, lr}
    return syncDir();
    4d00:	b.w	4b8c <ExFatFile::syncDir()>
    4d04:	add.w	r0, r5, #528	; 0x210
    4d08:	bl	3220 <FsCache::sync()>
    4d0c:	cmp	r0, #0
    4d0e:	beq.n	4ce4 <ExFatFile::sync()+0x20>
    4d10:	ldr.w	r0, [r5, #1088]	; 0x440
  bool syncDevice() { return m_blockDev->syncDevice(); }
    4d14:	ldr	r3, [r0, #0]
    4d16:	ldr	r3, [r3, #28]
    4d18:	blx	r3
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    4d1a:	cmp	r0, #0
    4d1c:	beq.n	4ce4 <ExFatFile::sync()+0x20>
    return true;
    4d1e:	movs	r0, #1
}
    4d20:	pop	{r3, r4, r5, pc}
    4d22:	nop

00004d24 <ExFatFile::addDirCluster()>:
bool ExFatFile::addDirCluster() {
    4d24:	push	{r4, r5, r6, lr}
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    4d26:	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::addDirCluster() {
    4d2a:	mov	r5, r0
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    4d2c:	lsls	r2, r3, #25
    4d2e:	bmi.n	4dca <ExFatFile::addDirCluster()+0xa6>
    4d30:	ldr	r0, [r0, #8]
  uint32_t bytesPerCluster() const { return m_bytesPerCluster; }
    4d32:	ldr	r3, [r5, #32]
  dl += m_vol->bytesPerCluster();
    4d34:	ldr.w	r3, [r3, #1084]	; 0x43c
    4d38:	add	r0, r3
  if (dl >= 0X4000000) {
    4d3a:	cmp.w	r0, #67108864	; 0x4000000
    4d3e:	bcc.n	4d44 <ExFatFile::addDirCluster()+0x20>
}
    4d40:	movs	r0, #0
    4d42:	pop	{r4, r5, r6, pc}
  if (!addCluster()) {
    4d44:	mov	r0, r5
    4d46:	bl	49e4 <ExFatFile::addCluster()>
    4d4a:	cmp	r0, #0
    4d4c:	beq.n	4d40 <ExFatFile::addDirCluster()+0x1c>
  sector = m_vol->clusterStartSector(m_curCluster);
    4d4e:	ldr	r0, [r5, #32]
  for (uint32_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    4d50:	movs	r4, #0
           ((cluster - 2) << m_sectorsPerClusterShift);
    4d52:	ldr	r6, [r5, #24]
    4d54:	ldrb.w	r3, [r0, #1093]	; 0x445
    4d58:	subs	r6, #2
    4d5a:	lsls	r6, r3
    4d5c:	ldr.w	r3, [r0, #1068]	; 0x42c
    4d60:	add	r6, r3
    return m_dataCache.prepare(sector, option);
    4d62:	adds	r1, r6, r4
    4d64:	movs	r2, #5
    4d66:	add.w	r0, r0, #528	; 0x210
    4d6a:	adds	r4, #1
    4d6c:	bl	3278 <FsCache::prepare(unsigned long, unsigned char)>
    memset(cache, 0, m_vol->bytesPerSector());
    4d70:	mov.w	r2, #512	; 0x200
    4d74:	movs	r1, #0
    if (!cache) {
    4d76:	cmp	r0, #0
    4d78:	beq.n	4d40 <ExFatFile::addDirCluster()+0x1c>
    memset(cache, 0, m_vol->bytesPerSector());
    4d7a:	bl	e110 <memset>
  for (uint32_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    4d7e:	ldr	r0, [r5, #32]
  uint32_t sectorsPerCluster() const { return 1UL << m_sectorsPerClusterShift; }
    4d80:	movs	r3, #1
    4d82:	ldrb.w	r2, [r0, #1093]	; 0x445
    4d86:	lsls	r3, r2
    4d88:	cmp	r4, r3
    4d8a:	bcc.n	4d62 <ExFatFile::addDirCluster()+0x3e>
  if (!isRoot()) {
    4d8c:	ldrb.w	r3, [r5, #49]	; 0x31
    4d90:	lsls	r3, r3, #25
    4d92:	bmi.n	4dc0 <ExFatFile::addDirCluster()+0x9c>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    4d94:	ldrb.w	r2, [r5, #51]	; 0x33
    4d98:	orn	r2, r2, #127	; 0x7f
    m_dataLength += m_vol->bytesPerCluster();
    4d9c:	ldrd	r3, r1, [r5, #8]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    4da0:	strb.w	r2, [r5, #51]	; 0x33
    m_dataLength += m_vol->bytesPerCluster();
    4da4:	ldr.w	r2, [r0, #1084]	; 0x43c
    4da8:	adds	r3, r3, r2
    4daa:	adc.w	r0, r1, #0
    4dae:	str	r3, [r5, #8]
    m_validLength += m_vol->bytesPerCluster();
    4db0:	ldrd	r3, r1, [r5, #16]
    m_dataLength += m_vol->bytesPerCluster();
    4db4:	str	r0, [r5, #12]
    m_validLength += m_vol->bytesPerCluster();
    4db6:	adds	r3, r3, r2
    4db8:	adc.w	r1, r1, #0
    4dbc:	strd	r3, r1, [r5, #16]
  return sync();
    4dc0:	mov	r0, r5
}
    4dc2:	ldmia.w	sp!, {r4, r5, r6, lr}
  return sync();
    4dc6:	b.w	4cc4 <ExFatFile::sync()>
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    4dca:	ldr	r0, [r0, #32]
    4dcc:	bl	49cc <ExFatPartition::rootLength()>
    4dd0:	b.n	4d32 <ExFatFile::addDirCluster()+0xe>
    4dd2:	nop

00004dd4 <ExFatFile::rename(ExFatFile*, char const*)>:
bool ExFatFile::rename(ExFatFile* dirFile, const char* newPath) {
    4dd4:	push	{r4, r5, r6, lr}
    4dd6:	mov	r4, r0
  if (!(isFile() || isSubDir())) {
    4dd8:	ldrb.w	r0, [r0, #49]	; 0x31
bool ExFatFile::rename(ExFatFile* dirFile, const char* newPath) {
    4ddc:	sub	sp, #112	; 0x70
  ExFatFile() {}
    4dde:	movs	r3, #0
  if (!(isFile() || isSubDir())) {
    4de0:	tst.w	r0, #24
    4de4:	str	r3, [sp, #48]	; 0x30
    4de6:	str	r3, [sp, #104]	; 0x68
    4de8:	beq.n	4df2 <ExFatFile::rename(ExFatFile*, char const*)+0x1e>
  if (m_vol != dirFile->m_vol) {
    4dea:	ldr	r0, [r4, #32]
    4dec:	ldr	r3, [r1, #32]
    4dee:	cmp	r0, r3
    4df0:	beq.n	4df8 <ExFatFile::rename(ExFatFile*, char const*)+0x24>
  return false;
    4df2:	movs	r0, #0
}
    4df4:	add	sp, #112	; 0x70
    4df6:	pop	{r4, r5, r6, pc}
  if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    4df8:	movw	r3, #2561	; 0xa01
    4dfc:	mov	r0, sp
    4dfe:	bl	4390 <ExFatFile::open(ExFatFile*, char const*, int)>
    4e02:	cmp	r0, #0
    4e04:	beq.n	4df2 <ExFatFile::rename(ExFatFile*, char const*)+0x1e>
  oldFile = *this;
    4e06:	mov	ip, r4
    4e08:	add.w	r6, r4, #48	; 0x30
    4e0c:	add	r5, sp, #56	; 0x38
    4e0e:	ldr.w	r0, [ip]
    4e12:	add.w	ip, ip, #16
    4e16:	ldr.w	r1, [ip, #-12]
    4e1a:	mov	lr, r5
    4e1c:	ldr.w	r2, [ip, #-8]
    4e20:	adds	r5, #16
    4e22:	ldr.w	r3, [ip, #-4]
    4e26:	cmp	ip, r6
    4e28:	stmia.w	lr!, {r0, r1, r2, r3}
    4e2c:	bne.n	4e0e <ExFatFile::rename(ExFatFile*, char const*)+0x3a>
    4e2e:	ldr.w	r0, [ip]
  m_dirPos = file.m_dirPos;
    4e32:	add	r2, sp, #36	; 0x24
    4e34:	add.w	r3, r4, #36	; 0x24
  oldFile = *this;
    4e38:	str	r0, [r5, #0]
  m_setCount = file.m_setCount;
    4e3a:	ldrb.w	r5, [sp, #48]	; 0x30
  m_dirPos = file.m_dirPos;
    4e3e:	ldmia	r2, {r0, r1, r2}
    4e40:	stmia.w	r3, {r0, r1, r2}
  m_flags |= FILE_FLAG_DIR_DIRTY;
    4e44:	ldrb.w	r3, [r4, #51]	; 0x33
  if (!sync()) {
    4e48:	mov	r0, r4
  m_setCount = file.m_setCount;
    4e4a:	strb.w	r5, [r4, #48]	; 0x30
  m_flags |= FILE_FLAG_DIR_DIRTY;
    4e4e:	orn	r3, r3, #127	; 0x7f
    4e52:	strb.w	r3, [r4, #51]	; 0x33
  if (!sync()) {
    4e56:	bl	4cc4 <ExFatFile::sync()>
    4e5a:	cmp	r0, #0
    4e5c:	beq.n	4df2 <ExFatFile::rename(ExFatFile*, char const*)+0x1e>
  oldFile.m_firstCluster = 0;
    4e5e:	movs	r1, #0
  oldFile.m_flags = FILE_FLAG_WRITE;
    4e60:	movs	r2, #2
  oldFile.m_attributes = FILE_ATTR_FILE;
    4e62:	movs	r3, #8
  return oldFile.remove();
    4e64:	add	r0, sp, #56	; 0x38
  oldFile.m_firstCluster = 0;
    4e66:	str	r1, [sp, #84]	; 0x54
  oldFile.m_flags = FILE_FLAG_WRITE;
    4e68:	strb.w	r2, [sp, #107]	; 0x6b
  oldFile.m_attributes = FILE_ATTR_FILE;
    4e6c:	strb.w	r3, [sp, #105]	; 0x69
  return oldFile.remove();
    4e70:	bl	4a78 <ExFatFile::remove()>
    4e74:	b.n	4df4 <ExFatFile::rename(ExFatFile*, char const*)+0x20>
    4e76:	nop

00004e78 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>:
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
    4e78:	push	{r3, r4, r5, lr}
  if (!parent->isDir()) {
    4e7a:	ldrb.w	r3, [r1, #49]	; 0x31
    4e7e:	tst.w	r3, #80	; 0x50
    4e82:	bne.n	4e8a <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x12>
  return false;
    4e84:	movs	r5, #0
}
    4e86:	mov	r0, r5
    4e88:	pop	{r3, r4, r5, pc}
  if (!openPrivate(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    4e8a:	movw	r3, #2562	; 0xa02
    4e8e:	mov	r4, r0
    4e90:	bl	3fc8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    4e94:	cmp	r0, #0
    4e96:	beq.n	4e84 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xc>
  m_attributes = FILE_ATTR_SUBDIR | FS_ATTRIB_ARCHIVE;
    4e98:	movs	r3, #48	; 0x30
  if (!addDirCluster()) {
    4e9a:	mov	r0, r4
  m_attributes = FILE_ATTR_SUBDIR | FS_ATTRIB_ARCHIVE;
    4e9c:	strb.w	r3, [r4, #49]	; 0x31
  if (!addDirCluster()) {
    4ea0:	bl	4d24 <ExFatFile::addDirCluster()>
    4ea4:	mov	r5, r0
    4ea6:	cmp	r0, #0
    4ea8:	beq.n	4e84 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xc>
  m_firstCluster = m_curCluster;
    4eaa:	ldr	r1, [r4, #24]
  void rewind() { seekSet(0); }
    4eac:	movs	r2, #0
    4eae:	movs	r3, #0
    4eb0:	mov	r0, r4
    4eb2:	str	r1, [r4, #28]
    4eb4:	bl	3edc <ExFatFile::seekSet(unsigned long long)>
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    4eb8:	movs	r2, #193	; 0xc1
  if (!isOpen()) {
    4eba:	ldrb.w	r3, [r4, #49]	; 0x31
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    4ebe:	strb.w	r2, [r4, #51]	; 0x33
  if (!isOpen()) {
    4ec2:	cmp	r3, #0
    4ec4:	beq.n	4e86 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xe>
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    4ec6:	movs	r3, #65	; 0x41
    return syncDir();
    4ec8:	mov	r0, r4
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    4eca:	strb.w	r3, [r4, #51]	; 0x33
}
    4ece:	ldmia.w	sp!, {r3, r4, r5, lr}
    return syncDir();
    4ed2:	b.w	4b8c <ExFatFile::syncDir()>
    4ed6:	nop

00004ed8 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>:
bool ExFatFile::mkdir(ExFatFile* parent, const char* path, bool pFlag) {
    4ed8:	push	{r4, r5, r6, r7, lr}
  ExFatFile() {}
    4eda:	movs	r5, #0
    4edc:	sub	sp, #92	; 0x5c
    4ede:	mov	r7, r3
  if (isOpen() || !parent->isDir()) {
    4ee0:	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::mkdir(ExFatFile* parent, const char* path, bool pFlag) {
    4ee4:	str	r2, [sp, #4]
    4ee6:	str	r5, [sp, #80]	; 0x50
  if (isOpen() || !parent->isDir()) {
    4ee8:	cmp	r3, #0
    4eea:	bne.n	4f7a <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa2>
    4eec:	ldrb.w	r3, [r1, #49]	; 0x31
    4ef0:	mov	r6, r1
    4ef2:	tst.w	r3, #80	; 0x50
    4ef6:	beq.n	4f7a <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa2>
  if (isDirSeparator(*path)) {
    4ef8:	ldrb	r3, [r2, #0]
    4efa:	mov	r4, r0
    4efc:	mov	r1, r2
    4efe:	cmp	r3, #47	; 0x2f
    4f00:	beq.n	4f80 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa8>
    if (!parsePathName(path, &fname, &path)) {
    4f02:	add	r3, sp, #4
    4f04:	add	r2, sp, #12
    4f06:	mov	r0, r4
    4f08:	bl	3c70 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    4f0c:	cmp	r0, #0
    4f0e:	beq.n	4f7a <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa2>
    if (!*path) {
    4f10:	ldr	r3, [sp, #4]
    4f12:	ldrb	r3, [r3, #0]
    4f14:	cmp	r3, #0
    4f16:	beq.n	4f9c <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xc4>
    if (!openPrivate(parent, &fname, O_RDONLY)) {
    4f18:	movs	r3, #0
    4f1a:	add	r2, sp, #12
    4f1c:	mov	r1, r6
    4f1e:	mov	r0, r4
    4f20:	bl	3fc8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    4f24:	cbnz	r0, 4f34 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x5c>
      if (!pFlag || !mkdir(parent, &fname)) {
    4f26:	cbz	r7, 4f7a <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa2>
    4f28:	add	r2, sp, #12
    4f2a:	mov	r1, r6
    4f2c:	mov	r0, r4
    4f2e:	bl	4e78 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
    4f32:	cbz	r0, 4f7a <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa2>
    tmpDir = *this;
    4f34:	mov	ip, r4
    4f36:	add	r5, sp, #32
    4f38:	add.w	r6, r4, #48	; 0x30
    4f3c:	ldr.w	r0, [ip]
    4f40:	add.w	ip, ip, #16
    4f44:	ldr.w	r1, [ip, #-12]
    4f48:	mov	lr, r5
    4f4a:	ldr.w	r2, [ip, #-8]
    4f4e:	adds	r5, #16
    4f50:	ldr.w	r3, [ip, #-4]
    4f54:	cmp	ip, r6
    4f56:	stmia.w	lr!, {r0, r1, r2, r3}
    4f5a:	bne.n	4f3c <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x64>
    4f5c:	ldr.w	r0, [ip]
    parent = &tmpDir;
    4f60:	add	r6, sp, #32
    tmpDir = *this;
    4f62:	str	r0, [r5, #0]
    close();
    4f64:	mov	r0, r4
    4f66:	bl	3bec <ExFatFile::close()>
    if (!parsePathName(path, &fname, &path)) {
    4f6a:	ldr	r1, [sp, #4]
    4f6c:	add	r3, sp, #4
    4f6e:	add	r2, sp, #12
    4f70:	mov	r0, r4
    4f72:	bl	3c70 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    4f76:	cmp	r0, #0
    4f78:	bne.n	4f10 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x38>
  return false;
    4f7a:	movs	r0, #0
}
    4f7c:	add	sp, #92	; 0x5c
    4f7e:	pop	{r4, r5, r6, r7, pc}
      path++;
    4f80:	adds	r1, #1
    4f82:	str	r1, [sp, #4]
    while (isDirSeparator(*path)) {
    4f84:	ldrb	r3, [r1, #0]
    4f86:	cmp	r3, #47	; 0x2f
    4f88:	beq.n	4f80 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa8>
    if (!tmpDir.openRoot(parent->m_vol)) {
    4f8a:	ldr	r1, [r6, #32]
    4f8c:	add	r0, sp, #32
    4f8e:	bl	3c48 <ExFatFile::openRoot(ExFatVolume*)>
    4f92:	cmp	r0, #0
    4f94:	beq.n	4f7a <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa2>
    if (!parsePathName(path, &fname, &path)) {
    4f96:	ldr	r1, [sp, #4]
    parent = &tmpDir;
    4f98:	add	r6, sp, #32
    4f9a:	b.n	4f02 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x2a>
  return mkdir(parent, &fname);
    4f9c:	add	r2, sp, #12
    4f9e:	mov	r1, r6
    4fa0:	mov	r0, r4
    4fa2:	bl	4e78 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
}
    4fa6:	add	sp, #92	; 0x5c
    4fa8:	pop	{r4, r5, r6, r7, pc}
    4faa:	nop

00004fac <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>:
//------------------------------------------------------------------------------
bool ExFatFile::timestamp(uint8_t flags, uint16_t year, uint8_t month,
                          uint8_t day, uint8_t hour, uint8_t minute,
                          uint8_t second) {
    4fac:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4fb0:	mov	r6, r1
  uint16_t date;
  uint16_t time;
  uint8_t ms10;

  if (!isFile() || year < 1980 || year > 2107 || month < 1 || month > 12 ||
      day < 1 || day > 31 || hour > 23 || minute > 59 || second > 59) {
    4fb2:	ldrb.w	r1, [r0, #49]	; 0x31
                          uint8_t second) {
    4fb6:	sub	sp, #12
      day < 1 || day > 31 || hour > 23 || minute > 59 || second > 59) {
    4fb8:	lsls	r1, r1, #28
                          uint8_t second) {
    4fba:	ldrb.w	fp, [sp, #48]	; 0x30
    4fbe:	ldrb.w	r9, [sp, #52]	; 0x34
    4fc2:	ldrb.w	r8, [sp, #56]	; 0x38
    4fc6:	ldrb.w	r7, [sp, #60]	; 0x3c
      day < 1 || day > 31 || hour > 23 || minute > 59 || second > 59) {
    4fca:	bpl.w	50d8 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
  if (!isFile() || year < 1980 || year > 2107 || month < 1 || month > 12 ||
    4fce:	subw	r2, r2, #1980	; 0x7bc
    4fd2:	uxth	r4, r2
    4fd4:	cmp	r4, #127	; 0x7f
    4fd6:	bhi.n	50d8 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
    4fd8:	subs	r2, r3, #1
    4fda:	cmp	r2, #11
    4fdc:	bhi.n	50d8 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
      day < 1 || day > 31 || hour > 23 || minute > 59 || second > 59) {
    4fde:	add.w	r2, fp, #4294967295
    4fe2:	cmp	r2, #30
    4fe4:	bhi.n	50d8 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
    4fe6:	cmp.w	r8, #59	; 0x3b
    4fea:	it	ls
    4fec:	cmpls.w	r9, #23
    4ff0:	ite	hi
    4ff2:	movhi.w	sl, #1
    4ff6:	movls.w	sl, #0
    4ffa:	cmp	r7, #59	; 0x3b
    4ffc:	it	hi
    4ffe:	orrhi.w	sl, sl, #1
    5002:	cmp.w	sl, #0
    5006:	bne.n	50d8 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // update directory entry
  if (!sync()) {
    5008:	mov	r5, r0
    500a:	str	r3, [sp, #4]
    500c:	bl	4cc4 <ExFatFile::sync()>
    5010:	cmp	r0, #0
    5012:	beq.n	50d8 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
    5014:	ldr	r3, [sp, #4]
    5016:	mov	r1, sl
    5018:	orr.w	fp, fp, r3, lsl #5
             : hour << 11 | minute << 5 | second >> 1;
    501c:	lsrs	r3, r7, #1
    goto fail;
  }

  date = FS_DATE(year, month, day);
  time = FS_TIME(hour, minute, second);
  ms10 = second & 1 ? 100 : 0;
    501e:	ands.w	r7, r7, #1
                                              : year << 9 | month << 5 | day;
    5022:	orr.w	r4, fp, r4, lsl #9
  uint16_t checksum = 0;
    5026:	mov	fp, sl
             : hour << 11 | minute << 5 | second >> 1;
    5028:	orr.w	r8, r3, r8, lsl #5
  ms10 = second & 1 ? 100 : 0;
    502c:	it	ne
    502e:	movne	r7, #100	; 0x64
                                              : year << 9 | month << 5 | day;
    5030:	uxth	r4, r4
             : hour << 11 | minute << 5 | second >> 1;
    5032:	orr.w	r8, r8, r9, lsl #11
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setLe16(df->attributes, m_attributes & FS_ATTRIB_COPY);
        m_vol->dataCacheDirty();
        if (flags & T_ACCESS) {
    5036:	and.w	r9, r6, #1
    503a:	uxth.w	r8, r8
    cache = dirCache(is, FsCache::CACHE_FOR_READ);
    503e:	movs	r2, #0
    5040:	mov	r0, r5
    5042:	bl	3bb0 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache) {
    5046:	cmp	r0, #0
    5048:	beq.n	50d8 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
    switch (cache[0]) {
    504a:	ldrb.w	ip, [r0]
    504e:	cmp.w	ip, #133	; 0x85
    5052:	beq.n	50e0 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x134>
    5054:	add.w	r3, ip, #64	; 0x40
    5058:	uxtb	r3, r3
    505a:	cmp	r3, #1
    505c:	bhi.n	50d8 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
  bool skip = data[0] == EXFAT_TYPE_FILE;
    505e:	sub.w	r1, ip, #133	; 0x85
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    5062:	movs	r3, #0
  bool skip = data[0] == EXFAT_TYPE_FILE;
    5064:	clz	r1, r1
    5068:	lsrs	r1, r1, #5
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    506a:	b.n	5072 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xc6>
    506c:	movs	r3, #4
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    506e:	ldrb.w	ip, [r0, r3]
    5072:	mov.w	r2, fp, lsl #15
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    5076:	cmp	r3, #1
    5078:	add.w	r3, r3, #1
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    507c:	orr.w	r2, r2, fp, lsr #1
    5080:	uxtah	r2, ip, r2
    5084:	uxth.w	fp, r2
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    5088:	bne.n	508e <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xe2>
    508a:	cmp	r1, #0
    508c:	bne.n	506c <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xc0>
    508e:	cmp	r3, #31
    5090:	bls.n	506e <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xc2>
  for (uint8_t is = 0; is <= m_setCount; is++) {
    5092:	add.w	sl, sl, #1
    5096:	ldrb.w	r3, [r5, #48]	; 0x30
    509a:	uxtb.w	r1, sl
    509e:	cmp	r3, r1
    50a0:	bcs.n	503e <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x92>
        break;
    }
    checksum = exFatDirChecksum(cache, checksum);
  }
  df = reinterpret_cast<DirFile_t*>(
      m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_WRITE));
    50a2:	movs	r2, #1
    50a4:	add.w	r1, r5, #36	; 0x24
    50a8:	ldr	r0, [r5, #32]
    50aa:	bl	4670 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    50ae:	cbz	r0, 50d8 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  setLe16(df->setChecksum, checksum);
  if (!m_vol->cacheSync()) {
    50b0:	ldr	r4, [r5, #32]
  *reinterpret_cast<uint16_t*>(dst) = src;
    50b2:	strh.w	fp, [r0, #2]
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    50b6:	mov	r0, r4
    50b8:	bl	3220 <FsCache::sync()>
    50bc:	cbz	r0, 50d8 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
    50be:	add.w	r0, r4, #528	; 0x210
    50c2:	bl	3220 <FsCache::sync()>
    50c6:	cbz	r0, 50d8 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
    50c8:	ldr.w	r0, [r4, #1088]	; 0x440
  bool syncDevice() { return m_blockDev->syncDevice(); }
    50cc:	ldr	r3, [r0, #0]
    50ce:	ldr	r3, [r3, #28]
  }
  return true;

fail:
  return false;
}
    50d0:	add	sp, #12
    50d2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    50d6:	bx	r3
    50d8:	movs	r0, #0
    50da:	add	sp, #12
    50dc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        setLe16(df->attributes, m_attributes & FS_ATTRIB_COPY);
    50e0:	ldrb.w	r3, [r5, #49]	; 0x31
        m_vol->dataCacheDirty();
    50e4:	ldr	r2, [r5, #32]
        setLe16(df->attributes, m_attributes & FS_ATTRIB_COPY);
    50e6:	and.w	r3, r3, #55	; 0x37
    50ea:	strh	r3, [r0, #4]
    50ec:	ldrb.w	r3, [r2, #528]	; 0x210
    50f0:	orr.w	r3, r3, #1
    50f4:	strb.w	r3, [r2, #528]	; 0x210
        if (flags & T_ACCESS) {
    50f8:	cmp.w	r9, #0
    50fc:	beq.n	5104 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x158>
    50fe:	strh.w	r8, [r0, #16]
    5102:	strh	r4, [r0, #18]
        if (flags & T_CREATE) {
    5104:	lsls	r2, r6, #30
    5106:	bpl.n	5110 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x164>
          df->createTimeMs = ms10;
    5108:	strb	r7, [r0, #20]
    510a:	strh.w	r8, [r0, #8]
    510e:	strh	r4, [r0, #10]
        if (flags & T_WRITE) {
    5110:	lsls	r3, r6, #29
    5112:	bpl.n	511c <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x170>
          df->modifyTimeMs = ms10;
    5114:	strb	r7, [r0, #21]
    5116:	strh.w	r8, [r0, #12]
    511a:	strh	r4, [r0, #14]
  bool skip = data[0] == EXFAT_TYPE_FILE;
    511c:	ldrb.w	ip, [r0]
}
    5120:	b.n	505e <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xb2>
    5122:	nop

00005124 <ExFatFile::truncate()>:
  bool isWritable() const { return m_flags & FILE_FLAG_WRITE; }
    5124:	ldrb.w	r3, [r0, #51]	; 0x33
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    5128:	lsls	r2, r3, #30
    512a:	bpl.n	51f2 <ExFatFile::truncate()+0xce>
bool ExFatFile::truncate() {
    512c:	push	{r4, r5, r6, lr}
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    512e:	ldr	r5, [r0, #28]
bool ExFatFile::truncate() {
    5130:	sub	sp, #8
    5132:	mov	r4, r0
  if (m_firstCluster == 0) {
    5134:	cbz	r5, 51a0 <ExFatFile::truncate()+0x7c>
    return true;
  }
  if (isContiguous()) {
    5136:	ands.w	r6, r3, #64	; 0x40
    513a:	beq.n	51a6 <ExFatFile::truncate()+0x82>
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    513c:	ldr	r0, [r0, #32]
    513e:	ldr	r2, [r4, #8]
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    5140:	ldrb.w	ip, [r0, #1093]	; 0x445
    5144:	subs	r2, #1
    5146:	ldr	r1, [r4, #12]
    5148:	add.w	ip, ip, #9
    514c:	adc.w	r1, r1, #4294967295
    5150:	uxtb.w	ip, ip
    5154:	rsb	lr, ip, #32
    5158:	lsr.w	r2, r2, ip
    515c:	sub.w	ip, ip, #32
    5160:	lsl.w	lr, r1, lr
    5164:	lsr.w	ip, r1, ip
    if (m_curCluster) {
    5168:	ldr	r1, [r4, #24]
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    516a:	orr.w	r2, r2, lr
    516e:	orr.w	r2, r2, ip
    5172:	adds	r2, #1
    if (m_curCluster) {
    5174:	cbz	r1, 51be <ExFatFile::truncate()+0x9a>
      toFree = m_curCluster + 1;
      nc -= 1 + m_curCluster - m_firstCluster;
    5176:	subs	r5, #1
    5178:	subs	r5, r5, r1
      toFree = m_curCluster + 1;
    517a:	adds	r1, #1
      nc -= 1 + m_curCluster - m_firstCluster;
    517c:	add	r2, r5
      toFree = m_curCluster + 1;
    517e:	str	r1, [sp, #4]
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    5180:	cbnz	r2, 51e0 <ExFatFile::truncate()+0xbc>
      }
    }
  }
  m_dataLength = m_curPosition;
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
    5182:	orn	r3, r3, #127	; 0x7f
  return sync();
    5186:	mov	r0, r4
  m_dataLength = m_curPosition;
    5188:	vldr	d7, [r4]
  m_flags |= FILE_FLAG_DIR_DIRTY;
    518c:	strb.w	r3, [r4, #51]	; 0x33
  m_dataLength = m_curPosition;
    5190:	vstr	d7, [r4, #8]
  m_validLength = m_curPosition;
    5194:	vstr	d7, [r4, #16]
  return sync();
    5198:	bl	4cc4 <ExFatFile::sync()>

fail:
  return false;
}
    519c:	add	sp, #8
    519e:	pop	{r4, r5, r6, pc}
    return true;
    51a0:	movs	r0, #1
}
    51a2:	add	sp, #8
    51a4:	pop	{r4, r5, r6, pc}
    if (m_curCluster) {
    51a6:	ldr	r1, [r0, #24]
    51a8:	cbnz	r1, 51c4 <ExFatFile::truncate()+0xa0>
      toFree = m_firstCluster;
    51aa:	str	r5, [sp, #4]
      m_firstCluster = 0;
    51ac:	str	r1, [r0, #28]
      if (!m_vol->freeChain(toFree)) {
    51ae:	mov	r1, r5
    51b0:	ldr	r0, [r4, #32]
    51b2:	bl	47b0 <ExFatPartition::freeChain(unsigned long)>
    51b6:	cbz	r0, 51ec <ExFatFile::truncate()+0xc8>
  m_flags |= FILE_FLAG_DIR_DIRTY;
    51b8:	ldrb.w	r3, [r4, #51]	; 0x33
    51bc:	b.n	5182 <ExFatFile::truncate()+0x5e>
      toFree = m_firstCluster;
    51be:	str	r5, [sp, #4]
      m_firstCluster = 0;
    51c0:	str	r1, [r4, #28]
    51c2:	b.n	5180 <ExFatFile::truncate()+0x5c>
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    51c4:	add	r2, sp, #4
    51c6:	ldr	r0, [r0, #32]
      toFree = 0;
    51c8:	str	r6, [sp, #4]
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    51ca:	bl	472c <ExFatPartition::fatGet(unsigned long, unsigned long*)>
      if (fg < 0) {
    51ce:	cmp	r0, #0
    51d0:	blt.n	51ec <ExFatFile::truncate()+0xc8>
      if (fg) {
    51d2:	bne.n	51f6 <ExFatFile::truncate()+0xd2>
    if (toFree) {
    51d4:	ldr	r5, [sp, #4]
    51d6:	cmp	r5, #0
    51d8:	bne.n	51ae <ExFatFile::truncate()+0x8a>
  m_flags |= FILE_FLAG_DIR_DIRTY;
    51da:	ldrb.w	r3, [r4, #51]	; 0x33
    51de:	b.n	5182 <ExFatFile::truncate()+0x5e>
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    51e0:	movs	r3, #0
    51e2:	ldr	r1, [sp, #4]
    51e4:	bl	4578 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    51e8:	cmp	r0, #0
    51ea:	bne.n	51b8 <ExFatFile::truncate()+0x94>
  return false;
    51ec:	movs	r0, #0
}
    51ee:	add	sp, #8
    51f0:	pop	{r4, r5, r6, pc}
  return false;
    51f2:	movs	r0, #0
}
    51f4:	bx	lr
        if (!m_vol->fatPut(m_curCluster, EXFAT_EOC)) {
    51f6:	mov.w	r2, #4294967295
    51fa:	ldr	r1, [r4, #24]
    51fc:	ldr	r0, [r4, #32]
    51fe:	bl	4770 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    5202:	cmp	r0, #0
    5204:	bne.n	51d4 <ExFatFile::truncate()+0xb0>
    5206:	b.n	51ec <ExFatFile::truncate()+0xc8>

00005208 <ExFatFile::write(void const*, unsigned int)>:
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
    5208:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    520c:	ldrb.w	r3, [r0, #51]	; 0x33
    5210:	sub	sp, #12
    5212:	mov	r4, r0

  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    5214:	lsls	r5, r3, #30
    5216:	bpl.w	535c <ExFatFile::write(void const*, unsigned int)+0x154>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    521a:	mov	r9, r2
    521c:	lsls	r2, r3, #28
    521e:	mov	r6, r1
    5220:	bmi.w	534e <ExFatFile::write(void const*, unsigned int)+0x146>
    if (!seekSet(m_validLength)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    5224:	cmp.w	r9, #0
    5228:	beq.w	547c <ExFatFile::write(void const*, unsigned int)+0x274>
    if (m_curPosition > m_validLength) {
      m_flags |= FILE_FLAG_DIR_DIRTY;
      m_validLength = m_curPosition;
    }
  }
  if (m_curPosition > m_dataLength) {
    522c:	ldr	r3, [r4, #0]
    522e:	mov	r5, r9
    clusterOffset = m_curPosition & m_vol->clusterMask();
    5230:	ldr	r0, [r4, #32]
      if (m_curCluster != 0) {
    5232:	ldr	r1, [r4, #24]
    clusterOffset = m_curPosition & m_vol->clusterMask();
    5234:	ldr.w	r2, [r0, #1080]	; 0x438
    5238:	and.w	r8, r2, r3
    sectorOffset = clusterOffset & m_vol->sectorMask();
    523c:	ubfx	r7, r8, #0, #9
    if (clusterOffset == 0) {
    5240:	cmp.w	r8, #0
    5244:	bne.w	5370 <ExFatFile::write(void const*, unsigned int)+0x168>
      if (m_curCluster != 0) {
    5248:	cmp	r1, #0
    524a:	beq.w	53f6 <ExFatFile::write(void const*, unsigned int)+0x1ee>
        if (isContiguous()) {
    524e:	ldrb.w	r3, [r4, #51]	; 0x33
    5252:	lsls	r3, r3, #25
    5254:	bpl.w	5430 <ExFatFile::write(void const*, unsigned int)+0x228>
    5258:	ldrb.w	ip, [r0, #1093]	; 0x445
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
    525c:	ldrd	r3, r2, [r4, #8]
    5260:	add.w	ip, ip, #9
    5264:	subs	r3, #1
    5266:	uxtb.w	ip, ip
    526a:	adc.w	r2, r2, #4294967295
    526e:	rsb	lr, ip, #32
    5272:	lsr.w	r3, r3, ip
    5276:	sub.w	ip, ip, #32
    527a:	lsl.w	lr, r2, lr
    527e:	lsr.w	ip, r2, ip
    5282:	ldr	r2, [r4, #28]
    5284:	orr.w	r3, r3, lr
    5288:	orr.w	r3, r3, ip
    528c:	add	r3, r2
          if (m_curCluster < lc) {
    528e:	cmp	r1, r3
    5290:	bcs.w	543e <ExFatFile::write(void const*, unsigned int)+0x236>
            m_curCluster++;
    5294:	adds	r1, #1
    5296:	str	r1, [r4, #24]
           ((cluster - 2) << m_sectorsPerClusterShift);
    5298:	ldrb.w	r2, [r0, #1093]	; 0x445
    529c:	subs	r1, #2
    sector = m_vol->clusterStartSector(m_curCluster) +
    529e:	ldr.w	r3, [r0, #1068]	; 0x42c
    52a2:	lsls	r1, r2
    52a4:	add	r1, r3
    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
    52a6:	cmp.w	r5, #512	; 0x200
    52aa:	bcc.w	53c2 <ExFatFile::write(void const*, unsigned int)+0x1ba>
    } else if (toWrite >= 2 * m_vol->bytesPerSector()) {
    52ae:	cmp.w	r5, #1024	; 0x400
    52b2:	bcc.w	5402 <ExFatFile::write(void const*, unsigned int)+0x1fa>
  uint32_t sectorsPerCluster() const { return 1UL << m_sectorsPerClusterShift; }
    52b6:	movs	r3, #1
    52b8:	lsls	r3, r2
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
    52ba:	lsrs	r2, r5, #9
                       (clusterOffset >> m_vol->bytesPerSectorShift());
    52bc:	sub.w	r3, r3, r8
    52c0:	cmp	r3, r2
    52c2:	it	cs
    52c4:	movcs	r3, r2
    return sector <= m_sector && m_sector < (sector + count);
    52c6:	ldr.w	r2, [r0, #536]	; 0x218
    52ca:	cmp	r2, r1
      n = ns << m_vol->bytesPerSectorShift();
    52cc:	mov.w	r8, r3, lsl #9
    52d0:	bcc.n	52e6 <ExFatFile::write(void const*, unsigned int)+0xde>
    52d2:	adds	r7, r3, r1
    52d4:	cmp	r2, r7
    52d6:	bcs.n	52e6 <ExFatFile::write(void const*, unsigned int)+0xde>
    m_status = 0;
    52d8:	movs	r2, #0
    52da:	strb.w	r2, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    52de:	mov.w	r2, #4294967295
    52e2:	str.w	r2, [r0, #536]	; 0x218
    return m_blockDev->writeSectors(sector, src, count);
    52e6:	ldr.w	r0, [r0, #532]	; 0x214
    52ea:	mov	r2, r6
    52ec:	ldr	r7, [r0, #0]
    52ee:	ldr	r7, [r7, #36]	; 0x24
    52f0:	blx	r7
      if (!m_vol->cacheSafeWrite(sector, src, ns)) {
    52f2:	cbz	r0, 535c <ExFatFile::write(void const*, unsigned int)+0x154>
    m_curPosition += n;
    52f4:	mov	r3, r8
    src += n;
    52f6:	add	r6, r8
    toWrite -= n;
    52f8:	sub.w	r5, r5, r8
    m_curPosition += n;
    52fc:	ldrd	r7, r2, [r4]
    if (m_curPosition > m_validLength) {
    5300:	ldrd	r0, r1, [r4, #16]
    m_curPosition += n;
    5304:	adds	r3, r3, r7
    5306:	adc.w	r2, r2, #0
    if (m_curPosition > m_validLength) {
    530a:	cmp	r0, r3
    530c:	sbcs	r1, r2
    m_curPosition += n;
    530e:	strd	r3, r2, [r4]
    if (m_curPosition > m_validLength) {
    5312:	bcs.n	5324 <ExFatFile::write(void const*, unsigned int)+0x11c>
      m_flags |= FILE_FLAG_DIR_DIRTY;
    5314:	ldrb.w	r1, [r4, #51]	; 0x33
    5318:	orn	r1, r1, #127	; 0x7f
      m_validLength = m_curPosition;
    531c:	strd	r3, r2, [r4, #16]
      m_flags |= FILE_FLAG_DIR_DIRTY;
    5320:	strb.w	r1, [r4, #51]	; 0x33
  while (toWrite) {
    5324:	cmp	r5, #0
    5326:	bne.n	5230 <ExFatFile::write(void const*, unsigned int)+0x28>
  if (m_curPosition > m_dataLength) {
    5328:	ldrd	r0, r1, [r4, #8]
    532c:	cmp	r0, r3
    532e:	sbcs	r1, r2
    5330:	bcc.w	5460 <ExFatFile::write(void const*, unsigned int)+0x258>
    m_dataLength = m_curPosition;
    // update fileSize and insure sync will update dir entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    5334:	ldr	r3, [pc, #332]	; (5484 <ExFatFile::write(void const*, unsigned int)+0x27c>)
    5336:	ldr	r3, [r3, #0]
    5338:	cmp	r3, #0
    533a:	beq.w	5478 <ExFatFile::write(void const*, unsigned int)+0x270>
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    533e:	ldrb.w	r3, [r4, #51]	; 0x33
    5342:	mov	r0, r9
    5344:	orn	r3, r3, #127	; 0x7f
    5348:	strb.w	r3, [r4, #51]	; 0x33
    534c:	b.n	536a <ExFatFile::write(void const*, unsigned int)+0x162>
    if (!seekSet(m_validLength)) {
    534e:	ldrd	r2, r3, [r0, #16]
    5352:	bl	3edc <ExFatFile::seekSet(unsigned long long)>
    5356:	cmp	r0, #0
    5358:	bne.w	5224 <ExFatFile::write(void const*, unsigned int)+0x1c>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
    535c:	ldrb.w	r3, [r4, #50]	; 0x32
  return 0;
    5360:	movs	r0, #0
  m_error |= WRITE_ERROR;
    5362:	orr.w	r3, r3, #1
    5366:	strb.w	r3, [r4, #50]	; 0x32
}
    536a:	add	sp, #12
    536c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
           ((cluster - 2) << m_sectorsPerClusterShift);
    5370:	ldrb.w	r2, [r0, #1093]	; 0x445
    5374:	subs	r1, #2
             (clusterOffset >> m_vol->bytesPerSectorShift());
    5376:	mov.w	r8, r8, lsr #9
    sector = m_vol->clusterStartSector(m_curCluster) +
    537a:	ldr.w	r3, [r0, #1068]	; 0x42c
    537e:	lsls	r1, r2
    5380:	add	r1, r8
    5382:	add	r1, r3
    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
    5384:	cmp	r7, #0
    5386:	beq.n	52a6 <ExFatFile::write(void const*, unsigned int)+0x9e>
      n = m_vol->bytesPerSector() - sectorOffset;
    5388:	rsb	r8, r7, #512	; 0x200
    return m_dataCache.prepare(sector, option);
    538c:	movs	r2, #1
    538e:	add.w	r0, r0, #528	; 0x210
    5392:	cmp	r8, r5
    5394:	it	cs
    5396:	movcs	r8, r5
    5398:	bl	3278 <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    539c:	cmp	r0, #0
    539e:	beq.n	535c <ExFatFile::write(void const*, unsigned int)+0x154>
      memcpy(dst, src, n);
    53a0:	add	r0, r7
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    53a2:	add	r7, r8
      memcpy(dst, src, n);
    53a4:	mov	r2, r8
    53a6:	mov	r1, r6
    53a8:	bl	a170 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    53ac:	cmp.w	r7, #512	; 0x200
    53b0:	ldr	r0, [r4, #32]
    53b2:	bne.n	52f4 <ExFatFile::write(void const*, unsigned int)+0xec>
  bool dataCacheSync() { return m_dataCache.sync(); }
    53b4:	add.w	r0, r0, #528	; 0x210
    53b8:	bl	3220 <FsCache::sync()>
        if (!m_vol->dataCacheSync()) {
    53bc:	cmp	r0, #0
    53be:	bne.n	52f4 <ExFatFile::write(void const*, unsigned int)+0xec>
    53c0:	b.n	535c <ExFatFile::write(void const*, unsigned int)+0x154>
      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
    53c2:	ldr	r2, [r4, #4]
    53c4:	ldr	r3, [r4, #20]
    53c6:	str	r2, [sp, #0]
    53c8:	str	r3, [sp, #4]
    53ca:	ldr	r2, [r4, #16]
    53cc:	ldr	r3, [r4, #0]
    53ce:	cmp	r3, r2
    53d0:	ldrd	r2, r3, [sp]
    53d4:	sbcs	r2, r3
    53d6:	bcs.n	53fe <ExFatFile::write(void const*, unsigned int)+0x1f6>
        cacheOption = FsCache::CACHE_FOR_WRITE;
    53d8:	movs	r2, #1
    return m_dataCache.prepare(sector, option);
    53da:	add.w	r0, r0, #528	; 0x210
    53de:	bl	3278 <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    53e2:	cmp	r0, #0
    53e4:	beq.n	535c <ExFatFile::write(void const*, unsigned int)+0x154>
      memcpy(dst, src, n);
    53e6:	mov	r2, r5
    53e8:	mov	r1, r6
    53ea:	add	r0, r7
    m_curPosition += n;
    53ec:	mov	r8, r5
      memcpy(dst, src, n);
    53ee:	bl	a170 <memcpy>
    m_curPosition += n;
    53f2:	mov	r3, r5
    53f4:	b.n	52f6 <ExFatFile::write(void const*, unsigned int)+0xee>
        if (m_firstCluster == 0) {
    53f6:	ldr	r1, [r4, #28]
    53f8:	cbz	r1, 544e <ExFatFile::write(void const*, unsigned int)+0x246>
          m_curCluster = m_firstCluster;
    53fa:	str	r1, [r4, #24]
    53fc:	b.n	5298 <ExFatFile::write(void const*, unsigned int)+0x90>
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    53fe:	movs	r2, #5
    5400:	b.n	53da <ExFatFile::write(void const*, unsigned int)+0x1d2>
    if (isCached(sector)) {
    5402:	ldr.w	r3, [r0, #536]	; 0x218
    5406:	cmp	r3, r1
    5408:	bne.n	5418 <ExFatFile::write(void const*, unsigned int)+0x210>
    m_status = 0;
    540a:	movs	r3, #0
    540c:	strb.w	r3, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    5410:	mov.w	r3, #4294967295
    5414:	str.w	r3, [r0, #536]	; 0x218
    return m_blockDev->writeSector(sector, src);
    5418:	ldr.w	r0, [r0, #532]	; 0x214
    541c:	mov	r2, r6
    541e:	ldr	r3, [r0, #0]
    5420:	ldr	r3, [r3, #32]
    5422:	blx	r3
      if (!m_vol->cacheSafeWrite(sector, src)) {
    5424:	cmp	r0, #0
    5426:	beq.n	535c <ExFatFile::write(void const*, unsigned int)+0x154>
    5428:	mov.w	r3, #512	; 0x200
      n = m_vol->bytesPerSector();
    542c:	mov	r8, r3
    542e:	b.n	52f6 <ExFatFile::write(void const*, unsigned int)+0xee>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    5430:	add.w	r2, r4, #24
    5434:	bl	472c <ExFatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    5438:	cmp	r0, #0
    543a:	blt.n	535c <ExFatFile::write(void const*, unsigned int)+0x154>
        if (fg == 0) {
    543c:	bne.n	5448 <ExFatFile::write(void const*, unsigned int)+0x240>
          if (!addCluster()) {
    543e:	mov	r0, r4
    5440:	bl	49e4 <ExFatFile::addCluster()>
    5444:	cmp	r0, #0
    5446:	beq.n	535c <ExFatFile::write(void const*, unsigned int)+0x154>
    sector = m_vol->clusterStartSector(m_curCluster) +
    5448:	ldr	r1, [r4, #24]
    544a:	ldr	r0, [r4, #32]
    544c:	b.n	5298 <ExFatFile::write(void const*, unsigned int)+0x90>
          if (!addCluster()) {
    544e:	mov	r0, r4
    5450:	bl	49e4 <ExFatFile::addCluster()>
    5454:	cmp	r0, #0
    5456:	beq.n	535c <ExFatFile::write(void const*, unsigned int)+0x154>
          m_firstCluster = m_curCluster;
    5458:	ldr	r1, [r4, #24]
    sector = m_vol->clusterStartSector(m_curCluster) +
    545a:	ldr	r0, [r4, #32]
          m_firstCluster = m_curCluster;
    545c:	str	r1, [r4, #28]
    545e:	b.n	5298 <ExFatFile::write(void const*, unsigned int)+0x90>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    5460:	ldrb.w	r1, [r4, #51]	; 0x33
    5464:	mov	r0, r9
    m_dataLength = m_curPosition;
    5466:	strd	r3, r2, [r4, #8]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    546a:	orn	r3, r1, #127	; 0x7f
    546e:	strb.w	r3, [r4, #51]	; 0x33
}
    5472:	add	sp, #12
    5474:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    5478:	mov	r0, r9
    547a:	b.n	536a <ExFatFile::write(void const*, unsigned int)+0x162>
  if (m_curPosition > m_dataLength) {
    547c:	ldrd	r3, r2, [r4]
    5480:	b.n	5328 <ExFatFile::write(void const*, unsigned int)+0x120>
    5482:	nop
    5484:	.word	0x20006420

00005488 <FatFormatter::initFatDir(unsigned char, unsigned long)>:
    writeMsg("Format Failed\r\n");
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool FatFormatter::initFatDir(uint8_t fatType, uint32_t sectorCount) {
    5488:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    548c:	mov	r5, r0
    548e:	mov	r9, r1
    5490:	mov	r7, r2
  size_t n;
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
    5492:	movs	r1, #0
    5494:	mov.w	r2, #512	; 0x200
    5498:	ldr	r0, [r0, #36]	; 0x24
    549a:	bl	e110 <memset>
  writeMsg("Writing FAT ");
    549e:	ldr	r0, [r5, #32]
    54a0:	cmp	r0, #0
    54a2:	beq.n	5548 <FatFormatter::initFatDir(unsigned char, unsigned long)+0xc0>
    54a4:	ldr	r3, [r0, #0]
    54a6:	movs	r2, #12
    54a8:	ldr	r1, [pc, #164]	; (5550 <FatFormatter::initFatDir(unsigned char, unsigned long)+0xc8>)
    54aa:	ldr	r3, [r3, #4]
    54ac:	blx	r3
  for (uint32_t i = 1; i < sectorCount; i++) {
    54ae:	cmp	r7, #1
    54b0:	bls.n	54f4 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x6c>
    if (!m_dev->writeSector(m_fatStart + i, m_secBuf)) {
      return false;
    }
    if ((i % (sectorCount / 32)) == 0) {
    54b2:	lsrs	r6, r7, #5
    54b4:	movs	r4, #1
    54b6:	ldr.w	r8, [pc, #160]	; 5558 <FatFormatter::initFatDir(unsigned char, unsigned long)+0xd0>
    54ba:	b.n	54dc <FatFormatter::initFatDir(unsigned char, unsigned long)+0x54>
    54bc:	udiv	r3, r4, r6
    54c0:	mls	r3, r6, r3, r4
  for (uint32_t i = 1; i < sectorCount; i++) {
    54c4:	adds	r4, #1
    if ((i % (sectorCount / 32)) == 0) {
    54c6:	cbnz	r3, 54d8 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x50>
      writeMsg(".");
    54c8:	ldr	r3, [r5, #32]
    54ca:	movs	r2, #1
    54cc:	mov	r1, r8
    54ce:	mov	r0, r3
    54d0:	cbz	r3, 54d8 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x50>
    54d2:	ldr	r3, [r3, #0]
    54d4:	ldr	r3, [r3, #4]
    54d6:	blx	r3
  for (uint32_t i = 1; i < sectorCount; i++) {
    54d8:	cmp	r7, r4
    54da:	bls.n	54f4 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x6c>
    if (!m_dev->writeSector(m_fatStart + i, m_secBuf)) {
    54dc:	ldr	r0, [r5, #28]
    54de:	ldr	r1, [r5, #12]
    54e0:	ldr	r3, [r0, #0]
    54e2:	ldr	r2, [r5, #36]	; 0x24
    54e4:	add	r1, r4
    54e6:	ldr	r3, [r3, #32]
    54e8:	blx	r3
    54ea:	cmp	r0, #0
    54ec:	bne.n	54bc <FatFormatter::initFatDir(unsigned char, unsigned long)+0x34>
  for (size_t i = 1; i < n; i++) {
    m_secBuf[i] = 0XFF;
  }
  return m_dev->writeSector(m_fatStart, m_secBuf) &&
         m_dev->writeSector(m_fatStart + m_fatSize, m_secBuf);
}
    54ee:	movs	r0, #0
    54f0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  writeMsg("\r\n");
    54f4:	ldr	r0, [r5, #32]
    54f6:	cbz	r0, 5502 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x7a>
    54f8:	ldr	r3, [r0, #0]
    54fa:	movs	r2, #2
    54fc:	ldr	r1, [pc, #84]	; (5554 <FatFormatter::initFatDir(unsigned char, unsigned long)+0xcc>)
    54fe:	ldr	r3, [r3, #4]
    5500:	blx	r3
  n = fatType == 16 ? 4 : 12;
    5502:	cmp.w	r9, #16
  m_secBuf[0] = 0XF8;
    5506:	mov.w	r1, #248	; 0xf8
    550a:	ldr	r2, [r5, #36]	; 0x24
  for (size_t i = 1; i < n; i++) {
    550c:	mov.w	r3, #1
  n = fatType == 16 ? 4 : 12;
    5510:	ite	eq
    5512:	moveq	r0, #4
    5514:	movne	r0, #12
  m_secBuf[0] = 0XF8;
    5516:	strb	r1, [r2, #0]
    m_secBuf[i] = 0XFF;
    5518:	movs	r1, #255	; 0xff
    551a:	ldr	r2, [r5, #36]	; 0x24
    551c:	strb	r1, [r2, r3]
  for (size_t i = 1; i < n; i++) {
    551e:	adds	r3, #1
    5520:	cmp	r0, r3
    5522:	bne.n	551a <FatFormatter::initFatDir(unsigned char, unsigned long)+0x92>
  return m_dev->writeSector(m_fatStart, m_secBuf) &&
    5524:	ldr	r0, [r5, #28]
    5526:	ldr	r2, [r5, #36]	; 0x24
    5528:	ldr	r3, [r0, #0]
    552a:	ldr	r1, [r5, #12]
    552c:	ldr	r3, [r3, #32]
    552e:	blx	r3
    5530:	cmp	r0, #0
    5532:	beq.n	54ee <FatFormatter::initFatDir(unsigned char, unsigned long)+0x66>
         m_dev->writeSector(m_fatStart + m_fatSize, m_secBuf);
    5534:	ldr	r0, [r5, #28]
    5536:	ldr	r2, [r5, #36]	; 0x24
    5538:	ldrd	r3, r1, [r5, #8]
}
    553c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
         m_dev->writeSector(m_fatStart + m_fatSize, m_secBuf);
    5540:	add	r1, r3
    5542:	ldr	r3, [r0, #0]
    5544:	ldr	r3, [r3, #32]
    5546:	bx	r3
  for (uint32_t i = 1; i < sectorCount; i++) {
    5548:	cmp	r7, #1
    554a:	bhi.n	54b2 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x2a>
    554c:	b.n	5502 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x7a>
    554e:	nop
    5550:	.word	0x200007e0
    5554:	.word	0x20000808
    5558:	.word	0x200007f0

0000555c <FatFormatter::initPbs()>:
//------------------------------------------------------------------------------
void FatFormatter::initPbs() {
    555c:	push	{r3, r4, r5, lr}
  PbsFat_t* pbs = reinterpret_cast<PbsFat_t*>(m_secBuf);
    555e:	ldr	r3, [r0, #36]	; 0x24
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
    5560:	mov.w	r5, #512	; 0x200
void FatFormatter::initPbs() {
    5564:	mov	r4, r0
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
    5566:	movs	r1, #0
    5568:	mov	r2, r5
    556a:	mov	r0, r3
    556c:	bl	e110 <memset>
  pbs->jmpInstruction[0] = 0XEB;
  pbs->jmpInstruction[1] = 0X76;
  pbs->jmpInstruction[2] = 0X90;
  for (uint8_t i = 0; i < sizeof(pbs->oemName); i++) {
    pbs->oemName[i] = ' ';
    5570:	mov.w	r1, #538976288	; 0x20202020
  pbs->jmpInstruction[0] = 0XEB;
    5574:	movs	r2, #235	; 0xeb
  *reinterpret_cast<uint16_t*>(dst) = src;
    5576:	strh.w	r5, [r0, #11]
    pbs->oemName[i] = ' ';
    557a:	str.w	r1, [r0, #3]
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
    557e:	mov	r3, r0
    pbs->oemName[i] = ' ';
    5580:	str.w	r1, [r0, #7]
  pbs->jmpInstruction[2] = 0X90;
    5584:	movs	r1, #144	; 0x90
  pbs->jmpInstruction[0] = 0XEB;
    5586:	strb	r2, [r0, #0]
  pbs->jmpInstruction[1] = 0X76;
    5588:	movs	r0, #118	; 0x76
  pbs->jmpInstruction[2] = 0X90;
    558a:	strb	r1, [r3, #2]
  }
  setLe16(pbs->bpb.bpb16.bytesPerSector, BYTES_PER_SECTOR);
  pbs->bpb.bpb16.sectorsPerCluster = m_sectorsPerCluster;
  setLe16(pbs->bpb.bpb16.reservedSectorCount, m_reservedSectorCount);
  pbs->bpb.bpb16.fatCount = 2;
    558c:	movs	r2, #2
  pbs->jmpInstruction[1] = 0X76;
    558e:	strb	r0, [r3, #1]
  pbs->bpb.bpb16.sectorsPerCluster = m_sectorsPerCluster;
    5590:	ldrb.w	r1, [r4, #43]	; 0x2b
    5594:	strb	r1, [r3, #13]
    5596:	movw	r1, #43605	; 0xaa55
  setLe16(pbs->bpb.bpb16.reservedSectorCount, m_reservedSectorCount);
    559a:	ldrh	r0, [r4, #40]	; 0x28
  pbs->bpb.bpb16.fatCount = 2;
    559c:	strb	r2, [r3, #16]
  // skip rootDirEntryCount
  // skip totalSectors16
  pbs->bpb.bpb16.mediaType = 0XF8;
    559e:	movs	r2, #248	; 0xf8
    55a0:	strh	r0, [r3, #14]
    55a2:	strb	r2, [r3, #21]
  // skip sectorsPerFat16
  // skip sectorsPerTrack
  // skip headCount
  setLe32(pbs->bpb.bpb16.hidddenSectors, m_relativeSectors);
    55a4:	ldr	r2, [r4, #16]
  *reinterpret_cast<uint32_t*>(dst) = src;
    55a6:	str	r2, [r3, #28]
  setLe32(pbs->bpb.bpb16.totalSectors32, m_totalSectors);
    55a8:	ldr	r2, [r4, #24]
  *reinterpret_cast<uint16_t*>(dst) = src;
    55aa:	strh.w	r1, [r3, #510]	; 0x1fe
  *reinterpret_cast<uint32_t*>(dst) = src;
    55ae:	str	r2, [r3, #32]
  // skip rest of bpb
  setLe16(pbs->signature, PBR_SIGNATURE);
}
    55b0:	pop	{r3, r4, r5, pc}
    55b2:	nop

000055b4 <FatFormatter::writeMbr()>:
    return false;
  }
  return initFatDir(32, 2 * m_fatSize + m_sectorsPerCluster);
}
//------------------------------------------------------------------------------
bool FatFormatter::writeMbr() {
    55b4:	push	{r4, r5, r6, lr}
    55b6:	mov	r4, r0
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
    55b8:	mov.w	r2, #512	; 0x200
    55bc:	movs	r1, #0
    55be:	ldr	r0, [r0, #36]	; 0x24
    55c0:	bl	e110 <memset>
  MbrSector_t* mbr = reinterpret_cast<MbrSector_t*>(m_secBuf);
    55c4:	ldr	r5, [r4, #36]	; 0x24

#if USE_LBA_TO_CHS
  lbaToMbrChs(mbr->part->beginCHS, m_capacityMB, m_relativeSectors);
    55c6:	ldr	r2, [r4, #16]
    55c8:	ldr	r1, [r4, #0]
    55ca:	addw	r0, r5, #447	; 0x1bf
    55ce:	bl	3180 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)>
  lbaToMbrChs(mbr->part->endCHS, m_capacityMB,
              m_relativeSectors + m_totalSectors - 1);
    55d2:	ldr	r3, [r4, #24]
    55d4:	ldr	r2, [r4, #16]
  lbaToMbrChs(mbr->part->endCHS, m_capacityMB,
    55d6:	addw	r0, r5, #451	; 0x1c3
    55da:	ldr	r1, [r4, #0]
              m_relativeSectors + m_totalSectors - 1);
    55dc:	add	r2, r3
  lbaToMbrChs(mbr->part->endCHS, m_capacityMB,
    55de:	subs	r2, #1
    55e0:	bl	3180 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)>
  mbr->part->endCHS[0] = 0XFE;
  mbr->part->endCHS[1] = 0XFF;
  mbr->part->endCHS[2] = 0XFF;
#endif  // USE_LBA_TO_CHS

  mbr->part->type = m_partType;
    55e4:	ldrb.w	r2, [r4, #42]	; 0x2a
  *reinterpret_cast<uint16_t*>(dst) = src;
    55e8:	movw	r3, #43605	; 0xaa55
    55ec:	strb.w	r2, [r5, #450]	; 0x1c2
  setLe32(mbr->part->relativeSectors, m_relativeSectors);
    55f0:	ldr	r2, [r4, #16]
  setLe32(mbr->part->totalSectors, m_totalSectors);
  setLe16(mbr->signature, MBR_SIGNATURE);
  return m_dev->writeSector(0, m_secBuf);
    55f2:	ldr	r0, [r4, #28]
  *reinterpret_cast<uint32_t*>(dst) = src;
    55f4:	str.w	r2, [r5, #454]	; 0x1c6
    55f8:	ldr	r2, [r4, #36]	; 0x24
  setLe32(mbr->part->totalSectors, m_totalSectors);
    55fa:	ldr	r1, [r4, #24]
  *reinterpret_cast<uint16_t*>(dst) = src;
    55fc:	strh.w	r3, [r5, #510]	; 0x1fe
  return m_dev->writeSector(0, m_secBuf);
    5600:	ldr	r3, [r0, #0]
  *reinterpret_cast<uint32_t*>(dst) = src;
    5602:	str.w	r1, [r5, #458]	; 0x1ca
    5606:	movs	r1, #0
    5608:	ldr	r3, [r3, #32]
}
    560a:	ldmia.w	sp!, {r4, r5, r6, lr}
  return m_dev->writeSector(0, m_secBuf);
    560e:	bx	r3

00005610 <FatFormatter::makeFat16()>:
bool FatFormatter::makeFat16() {
    5610:	push	{r4, r5, r6, lr}
    nc = (m_sectorCount - m_dataStart) / m_sectorsPerCluster;
    5612:	ldr	r6, [r0, #20]
  for (m_dataStart = 2 * BU16;; m_dataStart += BU16) {
    5614:	mov.w	r3, #256	; 0x100
    nc = (m_sectorCount - m_dataStart) / m_sectorsPerCluster;
    5618:	ldrb.w	lr, [r0, #43]	; 0x2b
bool FatFormatter::makeFat16() {
    561c:	mov	r4, r0
    nc = (m_sectorCount - m_dataStart) / m_sectorsPerCluster;
    561e:	sub.w	r2, r6, #256	; 0x100
  PbsFat_t* pbs = reinterpret_cast<PbsFat_t*>(m_secBuf);
    5622:	ldr	r5, [r0, #36]	; 0x24
  for (m_dataStart = 2 * BU16;; m_dataStart += BU16) {
    5624:	str	r3, [r0, #4]
    nc = (m_sectorCount - m_dataStart) / m_sectorsPerCluster;
    5626:	udiv	r2, r2, lr
    m_fatSize = (nc + 2 + (BYTES_PER_SECTOR / 2) - 1) / (BYTES_PER_SECTOR / 2);
    562a:	addw	ip, r2, #257	; 0x101
    562e:	mov.w	r1, ip, lsr #8
    uint32_t r = BU16 + 1 + 2 * m_fatSize + FAT16_ROOT_SECTOR_COUNT;
    5632:	mov.w	ip, r1, lsl #1
    m_fatSize = (nc + 2 + (BYTES_PER_SECTOR / 2) - 1) / (BYTES_PER_SECTOR / 2);
    5636:	str	r1, [r0, #8]
    uint32_t r = BU16 + 1 + 2 * m_fatSize + FAT16_ROOT_SECTOR_COUNT;
    5638:	add.w	r0, ip, #161	; 0xa1
    if (m_dataStart >= r) {
    563c:	cmp	r0, r3
    563e:	bls.n	565e <FatFormatter::makeFat16()+0x4e>
  for (m_dataStart = 2 * BU16;; m_dataStart += BU16) {
    5640:	adds	r3, #128	; 0x80
    nc = (m_sectorCount - m_dataStart) / m_sectorsPerCluster;
    5642:	subs	r2, r6, r3
    5644:	udiv	r2, r2, lr
    m_fatSize = (nc + 2 + (BYTES_PER_SECTOR / 2) - 1) / (BYTES_PER_SECTOR / 2);
    5648:	addw	r1, r2, #257	; 0x101
    564c:	lsrs	r1, r1, #8
    uint32_t r = BU16 + 1 + 2 * m_fatSize + FAT16_ROOT_SECTOR_COUNT;
    564e:	mov.w	ip, r1, lsl #1
    5652:	add.w	r0, ip, #161	; 0xa1
    if (m_dataStart >= r) {
    5656:	cmp	r3, r0
    5658:	bcc.n	5640 <FatFormatter::makeFat16()+0x30>
    565a:	strd	r3, r1, [r4, #4]
      m_relativeSectors = m_dataStart - r + BU16;
    565e:	subs	r3, r3, r0
  if (nc < 4085 || nc >= 65525) {
    5660:	subw	r1, r2, #4085	; 0xff5
      m_relativeSectors = m_dataStart - r + BU16;
    5664:	add.w	r0, r3, #128	; 0x80
  if (nc < 4085 || nc >= 65525) {
    5668:	cmp.w	r1, #61440	; 0xf000
      m_relativeSectors = m_dataStart - r + BU16;
    566c:	str	r0, [r4, #16]
  if (nc < 4085 || nc >= 65525) {
    566e:	bcs.n	5710 <FatFormatter::makeFat16()+0x100>
      nc * m_sectorsPerCluster + 2 * m_fatSize + m_reservedSectorCount + 32;
    5670:	add.w	ip, ip, #33	; 0x21
  m_fatStart = m_relativeSectors + m_reservedSectorCount;
    5674:	adds	r3, #129	; 0x81
  if (!writeMbr()) {
    5676:	mov	r0, r4
      nc * m_sectorsPerCluster + 2 * m_fatSize + m_reservedSectorCount + 32;
    5678:	mla	r2, r2, lr, ip
  m_fatStart = m_relativeSectors + m_reservedSectorCount;
    567c:	str	r3, [r4, #12]
    m_partType = 0X06;
    567e:	cmp.w	r2, #65536	; 0x10000
  m_totalSectors =
    5682:	str	r2, [r4, #24]
    m_partType = 0X06;
    5684:	ite	cc
    5686:	movcc	r3, #4
    5688:	movcs	r3, #6
    568a:	strb.w	r3, [r4, #42]	; 0x2a
  m_reservedSectorCount = 1;
    568e:	movs	r3, #1
    5690:	strh	r3, [r4, #40]	; 0x28
  if (!writeMbr()) {
    5692:	bl	55b4 <FatFormatter::writeMbr()>
    5696:	cbnz	r0, 569c <FatFormatter::makeFat16()+0x8c>
}
    5698:	movs	r0, #0
    569a:	pop	{r4, r5, r6, pc}
  initPbs();
    569c:	mov	r0, r4
    569e:	bl	555c <FatFormatter::initPbs()>
  pbs->bpb.bpb16.extSignature = EXTENDED_BOOT_SIGNATURE;
    56a2:	movs	r2, #41	; 0x29
  setLe16(pbs->bpb.bpb16.sectorsPerFat16, m_fatSize);
    56a4:	ldr	r1, [r4, #8]
    pbs->bpb.bpb16.volumeLabel[i] = ' ';
    56a6:	mov.w	r3, #538976288	; 0x20202020
  pbs->bpb.bpb16.extSignature = EXTENDED_BOOT_SIGNATURE;
    56aa:	strb.w	r2, [r5, #38]	; 0x26
  pbs->bpb.bpb16.volumeType[0] = 'F';
    56ae:	movs	r2, #70	; 0x46
    pbs->bpb.bpb16.volumeLabel[i] = ' ';
    56b0:	str.w	r3, [r5, #47]	; 0x2f
  pbs->bpb.bpb16.physicalDriveNumber = 0X80;
    56b4:	movs	r0, #128	; 0x80
  pbs->bpb.bpb16.volumeType[0] = 'F';
    56b6:	strb.w	r2, [r5, #54]	; 0x36
  pbs->bpb.bpb16.volumeType[2] = 'T';
    56ba:	movs	r2, #84	; 0x54
    pbs->bpb.bpb16.volumeLabel[i] = ' ';
    56bc:	str.w	r3, [r5, #43]	; 0x2b
    56c0:	str.w	r3, [r5, #50]	; 0x32
  pbs->bpb.bpb16.volumeType[3] = '1';
    56c4:	movs	r3, #49	; 0x31
  pbs->bpb.bpb16.volumeType[2] = 'T';
    56c6:	strb.w	r2, [r5, #56]	; 0x38
  pbs->bpb.bpb16.volumeType[4] = '6';
    56ca:	movs	r2, #54	; 0x36
  setLe16(pbs->bpb.bpb16.sectorsPerFat16, m_fatSize);
    56cc:	strh	r1, [r5, #22]
  pbs->bpb.bpb16.volumeType[1] = 'A';
    56ce:	movs	r1, #65	; 0x41
  pbs->bpb.bpb16.volumeType[3] = '1';
    56d0:	strb.w	r3, [r5, #57]	; 0x39
  pbs->bpb.bpb16.volumeType[1] = 'A';
    56d4:	strb.w	r1, [r5, #55]	; 0x37
  *reinterpret_cast<uint16_t*>(dst) = src;
    56d8:	mov.w	r1, #512	; 0x200
  pbs->bpb.bpb16.physicalDriveNumber = 0X80;
    56dc:	strb.w	r0, [r5, #36]	; 0x24
  pbs->bpb.bpb16.volumeType[4] = '6';
    56e0:	strb.w	r2, [r5, #58]	; 0x3a
  *reinterpret_cast<uint32_t*>(dst) = src;
    56e4:	ldr	r3, [pc, #60]	; (5724 <FatFormatter::makeFat16()+0x114>)
  if (!m_dev->writeSector(m_relativeSectors, m_secBuf)) {
    56e6:	ldr	r0, [r4, #28]
    56e8:	str.w	r3, [r5, #39]	; 0x27
    56ec:	ldr	r3, [r0, #0]
  *reinterpret_cast<uint16_t*>(dst) = src;
    56ee:	strh.w	r1, [r5, #17]
    56f2:	ldr	r2, [r4, #36]	; 0x24
    56f4:	ldr	r1, [r4, #16]
    56f6:	ldr	r3, [r3, #32]
    56f8:	blx	r3
    56fa:	cmp	r0, #0
    56fc:	beq.n	5698 <FatFormatter::makeFat16()+0x88>
  return initFatDir(16, m_dataStart - m_fatStart);
    56fe:	ldr	r2, [r4, #4]
    5700:	mov	r0, r4
    5702:	ldr	r3, [r4, #12]
    5704:	movs	r1, #16
    5706:	subs	r2, r2, r3
}
    5708:	ldmia.w	sp!, {r4, r5, r6, lr}
  return initFatDir(16, m_dataStart - m_fatStart);
    570c:	b.w	5488 <FatFormatter::initFatDir(unsigned char, unsigned long)>
    writeMsg("Bad cluster count\r\n");
    5710:	ldr	r0, [r4, #32]
    5712:	cmp	r0, #0
    5714:	beq.n	5698 <FatFormatter::makeFat16()+0x88>
    5716:	ldr	r3, [r0, #0]
    5718:	movs	r2, #19
    571a:	ldr	r1, [pc, #12]	; (5728 <FatFormatter::makeFat16()+0x118>)
    571c:	ldr	r3, [r3, #4]
    571e:	blx	r3
}
    5720:	movs	r0, #0
    5722:	pop	{r4, r5, r6, pc}
    5724:	.word	0x0012d687
    5728:	.word	0x200007b4

0000572c <FatFormatter::makeFat32()>:
bool FatFormatter::makeFat32() {
    572c:	push	{r3, r4, r5, r6, r7, lr}
    nc = (m_sectorCount - m_dataStart) / m_sectorsPerCluster;
    572e:	ldr	r6, [r0, #20]
  m_relativeSectors = BU32;
    5730:	mov.w	r3, #8192	; 0x2000
    nc = (m_sectorCount - m_dataStart) / m_sectorsPerCluster;
    5734:	ldrb.w	ip, [r0, #43]	; 0x2b
  for (m_dataStart = 2 * BU32;; m_dataStart += BU32) {
    5738:	mov.w	r2, #16384	; 0x4000
    nc = (m_sectorCount - m_dataStart) / m_sectorsPerCluster;
    573c:	sub.w	r1, r6, #16384	; 0x4000
  m_relativeSectors = BU32;
    5740:	str	r3, [r0, #16]
    uint32_t r = m_relativeSectors + 9 + 2 * m_fatSize;
    5742:	movw	lr, #8201	; 0x2009
bool FatFormatter::makeFat32() {
    5746:	mov	r4, r0
  PbsFat_t* pbs = reinterpret_cast<PbsFat_t*>(m_secBuf);
    5748:	ldr	r5, [r0, #36]	; 0x24
  for (m_dataStart = 2 * BU32;; m_dataStart += BU32) {
    574a:	str	r2, [r0, #4]
    nc = (m_sectorCount - m_dataStart) / m_sectorsPerCluster;
    574c:	udiv	r1, r1, ip
    m_fatSize = (nc + 2 + (BYTES_PER_SECTOR / 4) - 1) / (BYTES_PER_SECTOR / 4);
    5750:	add.w	r3, r1, #129	; 0x81
    5754:	lsrs	r3, r3, #7
    5756:	str	r3, [r0, #8]
    uint32_t r = m_relativeSectors + 9 + 2 * m_fatSize;
    5758:	add.w	r0, lr, r3, lsl #1
    if (m_dataStart >= r) {
    575c:	cmp	r0, r2
    575e:	bls.w	58ce <FatFormatter::makeFat32()+0x1a2>
  for (m_dataStart = 2 * BU32;; m_dataStart += BU32) {
    5762:	add.w	r2, r2, #8192	; 0x2000
    nc = (m_sectorCount - m_dataStart) / m_sectorsPerCluster;
    5766:	subs	r1, r6, r2
    5768:	udiv	r1, r1, ip
    m_fatSize = (nc + 2 + (BYTES_PER_SECTOR / 4) - 1) / (BYTES_PER_SECTOR / 4);
    576c:	add.w	r3, r1, #129	; 0x81
    5770:	lsrs	r3, r3, #7
    uint32_t r = m_relativeSectors + 9 + 2 * m_fatSize;
    5772:	add.w	r0, lr, r3, lsl #1
    5776:	lsls	r7, r3, #1
    if (m_dataStart >= r) {
    5778:	cmp	r2, r0
    577a:	bcc.n	5762 <FatFormatter::makeFat32()+0x36>
    577c:	strd	r2, r3, [r4, #4]
  if (nc < 65525) {
    5780:	movw	r3, #65524	; 0xfff4
    5784:	cmp	r1, r3
    5786:	bls.w	58b8 <FatFormatter::makeFat32()+0x18c>
  m_totalSectors = nc * m_sectorsPerCluster + m_dataStart - m_relativeSectors;
    578a:	mla	ip, r1, ip, r2
  m_reservedSectorCount = m_dataStart - m_relativeSectors - 2 * m_fatSize;
    578e:	sub.w	r2, r2, #8192	; 0x2000
  if (!writeMbr()) {
    5792:	mov	r0, r4
  m_reservedSectorCount = m_dataStart - m_relativeSectors - 2 * m_fatSize;
    5794:	subs	r2, r2, r7
    5796:	uxth	r2, r2
  m_fatStart = m_relativeSectors + m_reservedSectorCount;
    5798:	add.w	r3, r2, #8192	; 0x2000
  m_reservedSectorCount = m_dataStart - m_relativeSectors - 2 * m_fatSize;
    579c:	strh	r2, [r4, #40]	; 0x28
  if ((m_relativeSectors + m_totalSectors) <= 16450560) {
    579e:	ldr	r2, [pc, #308]	; (58d4 <FatFormatter::makeFat32()+0x1a8>)
  m_fatStart = m_relativeSectors + m_reservedSectorCount;
    57a0:	str	r3, [r4, #12]
  m_totalSectors = nc * m_sectorsPerCluster + m_dataStart - m_relativeSectors;
    57a2:	sub.w	r3, ip, #8192	; 0x2000
    m_partType = 0X0C;
    57a6:	cmp	ip, r2
    57a8:	ite	ls
    57aa:	movls.w	ip, #11
    57ae:	movhi.w	ip, #12
  m_totalSectors = nc * m_sectorsPerCluster + m_dataStart - m_relativeSectors;
    57b2:	str	r3, [r4, #24]
  if ((m_relativeSectors + m_totalSectors) <= 16450560) {
    57b4:	strb.w	ip, [r4, #42]	; 0x2a
  if (!writeMbr()) {
    57b8:	bl	55b4 <FatFormatter::writeMbr()>
    57bc:	cbnz	r0, 57c2 <FatFormatter::makeFat32()+0x96>
}
    57be:	movs	r0, #0
    57c0:	pop	{r3, r4, r5, r6, r7, pc}
  initPbs();
    57c2:	mov	r0, r4
    57c4:	bl	555c <FatFormatter::initPbs()>
  setLe32(pbs->bpb.bpb32.sectorsPerFat32, m_fatSize);
    57c8:	ldr	r1, [r4, #8]
  pbs->bpb.bpb32.extSignature = EXTENDED_BOOT_SIGNATURE;
    57ca:	movs	r2, #41	; 0x29
    pbs->bpb.bpb32.volumeLabel[i] = ' ';
    57cc:	mov.w	r3, #538976288	; 0x20202020
  pbs->bpb.bpb32.physicalDriveNumber = 0X80;
    57d0:	movs	r0, #128	; 0x80
  *reinterpret_cast<uint32_t*>(dst) = src;
    57d2:	str	r1, [r5, #36]	; 0x24
  pbs->bpb.bpb32.extSignature = EXTENDED_BOOT_SIGNATURE;
    57d4:	strb.w	r2, [r5, #66]	; 0x42
  pbs->bpb.bpb32.volumeType[2] = 'T';
    57d8:	movs	r1, #84	; 0x54
  pbs->bpb.bpb32.volumeType[0] = 'F';
    57da:	movs	r2, #70	; 0x46
    pbs->bpb.bpb32.volumeLabel[i] = ' ';
    57dc:	str.w	r3, [r5, #75]	; 0x4b
  pbs->bpb.bpb32.physicalDriveNumber = 0X80;
    57e0:	strb.w	r0, [r5, #64]	; 0x40
  pbs->bpb.bpb32.volumeType[1] = 'A';
    57e4:	movs	r0, #65	; 0x41
    pbs->bpb.bpb32.volumeLabel[i] = ' ';
    57e6:	str.w	r3, [r5, #71]	; 0x47
    57ea:	str.w	r3, [r5, #78]	; 0x4e
    57ee:	movs	r3, #2
  pbs->bpb.bpb32.volumeType[0] = 'F';
    57f0:	strb.w	r2, [r5, #82]	; 0x52
  pbs->bpb.bpb32.volumeType[3] = '3';
    57f4:	movs	r2, #51	; 0x33
  pbs->bpb.bpb32.volumeType[2] = 'T';
    57f6:	strb.w	r1, [r5, #84]	; 0x54
  pbs->bpb.bpb32.volumeType[4] = '2';
    57fa:	movs	r1, #50	; 0x32
  pbs->bpb.bpb32.volumeType[3] = '3';
    57fc:	strb.w	r2, [r5, #85]	; 0x55
  pbs->bpb.bpb32.volumeType[1] = 'A';
    5800:	strb.w	r0, [r5, #83]	; 0x53
  pbs->bpb.bpb32.volumeType[4] = '2';
    5804:	strb.w	r1, [r5, #86]	; 0x56
    5808:	str	r3, [r5, #44]	; 0x2c
  if (!m_dev->writeSector(m_relativeSectors, m_secBuf) ||
    580a:	ldr	r0, [r4, #28]
  *reinterpret_cast<uint16_t*>(dst) = src;
    580c:	ldr	r3, [pc, #200]	; (58d8 <FatFormatter::makeFat32()+0x1ac>)
  *reinterpret_cast<uint32_t*>(dst) = src;
    580e:	ldr	r2, [pc, #204]	; (58dc <FatFormatter::makeFat32()+0x1b0>)
  *reinterpret_cast<uint16_t*>(dst) = src;
    5810:	str	r3, [r5, #48]	; 0x30
    5812:	ldr	r3, [r0, #0]
  *reinterpret_cast<uint32_t*>(dst) = src;
    5814:	str.w	r2, [r5, #67]	; 0x43
    5818:	ldr	r3, [r3, #32]
    581a:	ldr	r2, [r4, #36]	; 0x24
    581c:	ldr	r1, [r4, #16]
    581e:	blx	r3
    5820:	cmp	r0, #0
    5822:	beq.n	57be <FatFormatter::makeFat32()+0x92>
      !m_dev->writeSector(m_relativeSectors + 6, m_secBuf)) {
    5824:	ldr	r0, [r4, #28]
    5826:	ldr	r1, [r4, #16]
    5828:	ldr	r3, [r0, #0]
    582a:	adds	r1, #6
    582c:	ldr	r2, [r4, #36]	; 0x24
    582e:	ldr	r3, [r3, #32]
    5830:	blx	r3
  if (!m_dev->writeSector(m_relativeSectors, m_secBuf) ||
    5832:	cmp	r0, #0
    5834:	beq.n	57be <FatFormatter::makeFat32()+0x92>
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
    5836:	mov.w	r2, #512	; 0x200
    583a:	movs	r1, #0
    583c:	ldr	r0, [r4, #36]	; 0x24
    583e:	bl	e110 <memset>
  if (!m_dev->writeSector(m_relativeSectors + 2, m_secBuf) ||
    5842:	ldr	r0, [r4, #28]
    5844:	ldr	r2, [pc, #152]	; (58e0 <FatFormatter::makeFat32()+0x1b4>)
    5846:	ldr	r3, [r0, #0]
    5848:	str.w	r2, [r5, #508]	; 0x1fc
    584c:	ldr	r1, [r4, #16]
    584e:	ldr	r3, [r3, #32]
    5850:	adds	r1, #2
    5852:	ldr	r2, [r4, #36]	; 0x24
    5854:	blx	r3
    5856:	cmp	r0, #0
    5858:	beq.n	57be <FatFormatter::makeFat32()+0x92>
      !m_dev->writeSector(m_relativeSectors + 8, m_secBuf)) {
    585a:	ldr	r0, [r4, #28]
    585c:	ldr	r1, [r4, #16]
    585e:	ldr	r3, [r0, #0]
    5860:	adds	r1, #8
    5862:	ldr	r2, [r4, #36]	; 0x24
    5864:	ldr	r3, [r3, #32]
    5866:	blx	r3
  if (!m_dev->writeSector(m_relativeSectors + 2, m_secBuf) ||
    5868:	cmp	r0, #0
    586a:	beq.n	57be <FatFormatter::makeFat32()+0x92>
    586c:	mov.w	r3, #4294967295
  if (!m_dev->writeSector(m_relativeSectors + 1, m_secBuf) ||
    5870:	ldr	r0, [r4, #28]
    5872:	ldr	r2, [pc, #112]	; (58e4 <FatFormatter::makeFat32()+0x1b8>)
    5874:	strd	r3, r3, [r5, #488]	; 0x1e8
    5878:	ldr	r3, [pc, #108]	; (58e8 <FatFormatter::makeFat32()+0x1bc>)
    587a:	str	r2, [r5, #0]
    587c:	str.w	r3, [r5, #484]	; 0x1e4
    5880:	ldr	r3, [r0, #0]
    5882:	ldr	r1, [r4, #16]
    5884:	ldr	r2, [r4, #36]	; 0x24
    5886:	ldr	r3, [r3, #32]
    5888:	adds	r1, #1
    588a:	blx	r3
    588c:	cmp	r0, #0
    588e:	beq.n	57be <FatFormatter::makeFat32()+0x92>
      !m_dev->writeSector(m_relativeSectors + 7, m_secBuf)) {
    5890:	ldr	r0, [r4, #28]
    5892:	ldr	r1, [r4, #16]
    5894:	ldr	r3, [r0, #0]
    5896:	ldr	r2, [r4, #36]	; 0x24
    5898:	adds	r1, #7
    589a:	ldr	r3, [r3, #32]
    589c:	blx	r3
  if (!m_dev->writeSector(m_relativeSectors + 1, m_secBuf) ||
    589e:	cmp	r0, #0
    58a0:	beq.n	57be <FatFormatter::makeFat32()+0x92>
  return initFatDir(32, 2 * m_fatSize + m_sectorsPerCluster);
    58a2:	ldr	r2, [r4, #8]
    58a4:	mov	r0, r4
    58a6:	ldrb.w	r3, [r4, #43]	; 0x2b
    58aa:	movs	r1, #32
    58ac:	add.w	r2, r3, r2, lsl #1
}
    58b0:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return initFatDir(32, 2 * m_fatSize + m_sectorsPerCluster);
    58b4:	b.w	5488 <FatFormatter::initFatDir(unsigned char, unsigned long)>
    writeMsg("Bad cluster count\r\n");
    58b8:	ldr	r0, [r4, #32]
    58ba:	cmp	r0, #0
    58bc:	beq.w	57be <FatFormatter::makeFat32()+0x92>
    58c0:	ldr	r3, [r0, #0]
    58c2:	movs	r2, #19
    58c4:	ldr	r1, [pc, #36]	; (58ec <FatFormatter::makeFat32()+0x1c0>)
    58c6:	ldr	r3, [r3, #4]
    58c8:	blx	r3
}
    58ca:	movs	r0, #0
    58cc:	pop	{r3, r4, r5, r6, r7, pc}
    58ce:	lsls	r7, r3, #1
    58d0:	b.n	5780 <FatFormatter::makeFat32()+0x54>
    58d2:	nop
    58d4:	.word	0x00fb0400
    58d8:	.word	0x00060001
    58dc:	.word	0x0012d687
    58e0:	.word	0xaa550000
    58e4:	.word	0x41615252
    58e8:	.word	0x61417272
    58ec:	.word	0x200007b4

000058f0 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)>:
bool FatFormatter::format(FsBlockDevice* dev, uint8_t* secBuf, print_t* pr) {
    58f0:	push	{r3, r4, r5, lr}
    58f2:	mov	r4, r0
  m_sectorCount = m_dev->sectorCount();
    58f4:	ldr	r5, [r1, #0]
  m_dev = dev;
    58f6:	str	r1, [r0, #28]
  m_sectorCount = m_dev->sectorCount();
    58f8:	mov	r0, r1
  m_secBuf = secBuf;
    58fa:	str	r2, [r4, #36]	; 0x24
  m_sectorCount = m_dev->sectorCount();
    58fc:	ldr	r2, [r5, #24]
  m_pr = pr;
    58fe:	str	r3, [r4, #32]
  m_sectorCount = m_dev->sectorCount();
    5900:	blx	r2
  m_capacityMB = (m_sectorCount + SECTORS_PER_MB - 1) / SECTORS_PER_MB;
    5902:	addw	r3, r0, #2047	; 0x7ff
  m_sectorCount = m_dev->sectorCount();
    5906:	str	r0, [r4, #20]
  m_capacityMB = (m_sectorCount + SECTORS_PER_MB - 1) / SECTORS_PER_MB;
    5908:	lsrs	r3, r3, #11
  if (m_capacityMB <= 6) {
    590a:	cmp	r3, #6
  m_capacityMB = (m_sectorCount + SECTORS_PER_MB - 1) / SECTORS_PER_MB;
    590c:	str	r3, [r4, #0]
  if (m_capacityMB <= 6) {
    590e:	bls.n	595a <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x6a>
  } else if (m_capacityMB <= 16) {
    5910:	cmp	r3, #16
    5912:	bhi.n	593c <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x4c>
    5914:	movs	r3, #2
  rtn = m_sectorCount < 0X400000 ? makeFat16() : makeFat32();
    5916:	cmp.w	r0, #4194304	; 0x400000
    m_sectorsPerCluster = 2;
    591a:	strb.w	r3, [r4, #43]	; 0x2b
  rtn = m_sectorCount < 0X400000 ? makeFat16() : makeFat32();
    591e:	mov	r0, r4
    5920:	bcs.n	5980 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x90>
    5922:	bl	5610 <FatFormatter::makeFat16()>
    5926:	mov	r5, r0
    writeMsg("Format Done\r\n");
    5928:	ldr	r0, [r4, #32]
  if (rtn) {
    592a:	cbz	r5, 596e <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x7e>
    writeMsg("Format Done\r\n");
    592c:	cbz	r0, 5938 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x48>
    592e:	ldr	r3, [r0, #0]
    5930:	movs	r2, #13
    5932:	ldr	r1, [pc, #100]	; (5998 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xa8>)
    5934:	ldr	r3, [r3, #4]
    5936:	blx	r3
}
    5938:	mov	r0, r5
    593a:	pop	{r3, r4, r5, pc}
  } else if (m_capacityMB <= 32) {
    593c:	cmp	r3, #32
    593e:	bls.n	5988 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x98>
  } else if (m_capacityMB <= 64) {
    5940:	cmp	r3, #64	; 0x40
    5942:	bls.n	598c <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x9c>
  } else if (m_capacityMB <= 128) {
    5944:	cmp	r3, #128	; 0x80
    5946:	bls.n	5990 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xa0>
  } else if (m_capacityMB <= 1024) {
    5948:	cmp.w	r3, #1024	; 0x400
    594c:	bls.n	5994 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xa4>
  } else if (m_capacityMB <= 32768) {
    594e:	cmp.w	r3, #32768	; 0x8000
    5952:	ite	hi
    5954:	movhi	r3, #128	; 0x80
    5956:	movls	r3, #64	; 0x40
    5958:	b.n	5916 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x26>
    writeMsg("Card is too small.\r\n");
    595a:	ldr	r0, [r4, #32]
    595c:	cbz	r0, 5968 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x78>
    595e:	ldr	r3, [r0, #0]
    5960:	movs	r2, #20
    5962:	ldr	r1, [pc, #56]	; (599c <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xac>)
    5964:	ldr	r3, [r3, #4]
    5966:	blx	r3
    return false;
    5968:	movs	r5, #0
}
    596a:	mov	r0, r5
    596c:	pop	{r3, r4, r5, pc}
    writeMsg("Format Failed\r\n");
    596e:	cmp	r0, #0
    5970:	beq.n	5968 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x78>
    5972:	ldr	r3, [r0, #0]
    5974:	movs	r2, #15
    5976:	ldr	r1, [pc, #40]	; (59a0 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xb0>)
    5978:	ldr	r3, [r3, #4]
    597a:	blx	r3
}
    597c:	mov	r0, r5
    597e:	pop	{r3, r4, r5, pc}
  rtn = m_sectorCount < 0X400000 ? makeFat16() : makeFat32();
    5980:	bl	572c <FatFormatter::makeFat32()>
    5984:	mov	r5, r0
    5986:	b.n	5928 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x38>
    5988:	movs	r3, #4
    598a:	b.n	5916 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x26>
    598c:	movs	r3, #8
    598e:	b.n	5916 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x26>
    5990:	movs	r3, #16
    5992:	b.n	5916 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x26>
    5994:	movs	r3, #32
    5996:	b.n	5916 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x26>
    5998:	.word	0x20000794
    599c:	.word	0x2000077c
    59a0:	.word	0x200007a4

000059a4 <FatFile::getLfnChar(DirLfn_t*, unsigned char)>:
#include "../common/DebugMacros.h"
#include "../common/FsUtf.h"
#include "FatLib.h"
//------------------------------------------------------------------------------
uint16_t FatFile::getLfnChar(DirLfn_t* ldir, uint8_t i) {
  if (i < 5) {
    59a4:	cmp	r2, #4
    59a6:	bhi.n	59b2 <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0xe>
  return *reinterpret_cast<const uint16_t*>(src);
    59a8:	add.w	r2, r1, r2, lsl #1
    59ac:	ldrh.w	r0, [r2, #1]
    return getLe16(ldir->unicode1 + 2 * i);
    59b0:	bx	lr
  } else if (i < 11) {
    59b2:	cmp	r2, #10
    59b4:	bhi.n	59be <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0x1a>
    59b6:	add.w	r2, r1, r2, lsl #1
    59ba:	ldrh	r0, [r2, #4]
    return getLe16(ldir->unicode2 + 2 * (i - 5));
    59bc:	bx	lr
  } else if (i < 13) {
    59be:	cmp	r2, #12
    59c0:	bhi.n	59ca <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0x26>
    59c2:	add.w	r1, r1, r2, lsl #1
    59c6:	ldrh	r0, [r1, #6]
    return getLe16(ldir->unicode3 + 2 * (i - 11));
    59c8:	bx	lr
  }
  DBG_HALT_IF(i >= 13);
  return 0;
    59ca:	movs	r0, #0
}
    59cc:	bx	lr
    59ce:	nop

000059d0 <FatFile::getSFN(char*, unsigned int)>:
fail:
  *name = 0;
  return 0;
}
//------------------------------------------------------------------------------
size_t FatFile::getSFN(char* name, size_t size) {
    59d0:	push	{r3, r4, r5, r6, r7, lr}
  bool isOpen() const { return m_attributes; }
    59d2:	ldrb	r4, [r0, #0]
    59d4:	mov	r6, r1
  char c;
  uint8_t j = 0;
  uint8_t lcBit = FAT_CASE_LC_BASE;
  uint8_t* ptr;
  DirFat_t* dir;
  if (!isOpen()) {
    59d6:	cbz	r4, 59f8 <FatFile::getSFN(char*, unsigned int)+0x28>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isRoot()) {
    59d8:	ands.w	r4, r4, #192	; 0xc0
    59dc:	mov	r7, r2
    59de:	beq.n	59f0 <FatFile::getSFN(char*, unsigned int)+0x20>
    if (size < 2) {
    59e0:	cmp	r2, #1
    59e2:	bls.n	59f8 <FatFile::getSFN(char*, unsigned int)+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    name[0] = '/';
    59e4:	movs	r2, #47	; 0x2f
    name[1] = '\0';
    59e6:	movs	r3, #0
    return 1;
    59e8:	movs	r0, #1
    name[0] = '/';
    59ea:	strb	r2, [r1, #0]
    name[1] = '\0';
    59ec:	strb	r3, [r1, #1]
  return j;

fail:
  name[0] = '\0';
  return 0;
}
    59ee:	pop	{r3, r4, r5, r6, r7, pc}
  dir = cacheDirEntry(FsCache::CACHE_FOR_READ);
    59f0:	mov	r1, r4
    59f2:	bl	5cb4 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    59f6:	cbnz	r0, 5a00 <FatFile::getSFN(char*, unsigned int)+0x30>
  name[0] = '\0';
    59f8:	movs	r3, #0
  return 0;
    59fa:	mov	r0, r3
  name[0] = '\0';
    59fc:	strb	r3, [r6, #0]
}
    59fe:	pop	{r3, r4, r5, r6, r7, pc}
  ptr = dir->name;
    5a00:	mov	r3, r0
    5a02:	mov	ip, r4
  uint8_t lcBit = FAT_CASE_LC_BASE;
    5a04:	movs	r1, #8
    5a06:	b.n	5a2c <FatFile::getSFN(char*, unsigned int)+0x5c>
      if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
    5a08:	ldrb	r2, [r0, #12]
    5a0a:	tst	r1, r2
    5a0c:	beq.n	5a16 <FatFile::getSFN(char*, unsigned int)+0x46>
        c += 'a' - 'A';
    5a0e:	add.w	lr, lr, #32
    5a12:	uxtb.w	lr, lr
    if ((j + 1u) >= size) {
    5a16:	adds	r5, r4, #1
    5a18:	cmp	r5, r7
    5a1a:	bcs.n	59f8 <FatFile::getSFN(char*, unsigned int)+0x28>
  for (uint8_t i = 0; i < 12; i++) {
    5a1c:	add.w	ip, ip, #1
    name[j++] = c;
    5a20:	strb.w	lr, [r6, r4]
    5a24:	uxtb	r4, r5
  for (uint8_t i = 0; i < 12; i++) {
    5a26:	cmp.w	ip, #12
    5a2a:	beq.n	5a4e <FatFile::getSFN(char*, unsigned int)+0x7e>
    if (i == 8) {
    5a2c:	cmp.w	ip, #8
    5a30:	beq.n	5a56 <FatFile::getSFN(char*, unsigned int)+0x86>
      c = *ptr++;
    5a32:	ldrb.w	lr, [r3], #1
      if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
    5a36:	sub.w	r2, lr, #65	; 0x41
    5a3a:	cmp	r2, #25
    5a3c:	bls.n	5a08 <FatFile::getSFN(char*, unsigned int)+0x38>
      if (c == ' ') {
    5a3e:	cmp.w	lr, #32
    5a42:	bne.n	5a16 <FatFile::getSFN(char*, unsigned int)+0x46>
  for (uint8_t i = 0; i < 12; i++) {
    5a44:	add.w	ip, ip, #1
    5a48:	cmp.w	ip, #12
    5a4c:	bne.n	5a2c <FatFile::getSFN(char*, unsigned int)+0x5c>
  name[j] = '\0';
    5a4e:	movs	r3, #0
    5a50:	mov	r0, r4
    5a52:	strb	r3, [r6, r4]
}
    5a54:	pop	{r3, r4, r5, r6, r7, pc}
      if (*ptr == ' ') {
    5a56:	ldrb	r2, [r3, #0]
    5a58:	cmp	r2, #32
    5a5a:	beq.n	5a4e <FatFile::getSFN(char*, unsigned int)+0x7e>
      lcBit = FAT_CASE_LC_EXT;
    5a5c:	movs	r1, #16
      c = '.';
    5a5e:	mov.w	lr, #46	; 0x2e
    5a62:	b.n	5a16 <FatFile::getSFN(char*, unsigned int)+0x46>

00005a64 <FatFile::getName7(char*, unsigned int)>:
size_t FatFile::getName7(char* name, size_t size) {
    5a64:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  FatFile() {}
    5a68:	movs	r5, #0
    5a6a:	sub	sp, #44	; 0x2c
  if (!isOpen()) {
    5a6c:	ldrb	r3, [r0, #0]
size_t FatFile::getName7(char* name, size_t size) {
    5a6e:	mov	r8, r1
    5a70:	str	r5, [sp, #4]
  if (!isOpen()) {
    5a72:	cmp	r3, #0
    5a74:	beq.n	5b18 <FatFile::getName7(char*, unsigned int)+0xb4>
  if (!isLFN()) {
    5a76:	ldrb	r3, [r0, #3]
    5a78:	mov	r6, r0
    5a7a:	cmp	r3, #0
    5a7c:	beq.n	5b28 <FatFile::getName7(char*, unsigned int)+0xc4>
  if (!dir.openCluster(this)) {
    5a7e:	mov	r1, r0
    5a80:	add	r0, sp, #4
    5a82:	mov	r7, r2
    5a84:	bl	60e0 <FatFile::openCluster(FatFile*)>
    5a88:	cmp	r0, #0
    5a8a:	beq.n	5b18 <FatFile::getName7(char*, unsigned int)+0xb4>
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    5a8c:	ldrb	r3, [r6, #3]
    5a8e:	cmp	r3, #0
    5a90:	beq.n	5b44 <FatFile::getName7(char*, unsigned int)+0xe0>
    5a92:	mov.w	r9, #1
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(m_dirIndex - order));
    5a96:	ldrh	r1, [r6, #4]
  // private functions

  bool addCluster();
  bool addDirCluster();
  DirFat_t* cacheDir(uint16_t index) {
    return seekSet(32UL * index) ? readDirCache() : nullptr;
    5a98:	add	r0, sp, #4
    5a9a:	sub.w	r1, r1, r9
    5a9e:	uxth	r1, r1
    5aa0:	lsls	r1, r1, #5
    5aa2:	bl	6600 <FatFile::seekSet(unsigned long)>
    5aa6:	cbz	r0, 5b18 <FatFile::getName7(char*, unsigned int)+0xb4>
    5aa8:	movs	r1, #0
    5aaa:	add	r0, sp, #4
    5aac:	bl	6340 <FatFile::readDirCache(bool)>
    if (!ldir) {
    5ab0:	cbz	r0, 5b18 <FatFile::getName7(char*, unsigned int)+0xb4>
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    5ab2:	ldrb	r3, [r0, #11]
    5ab4:	cmp	r3, #15
    5ab6:	bne.n	5b18 <FatFile::getName7(char*, unsigned int)+0xb4>
    5ab8:	ldrb	r3, [r0, #0]
    5aba:	uxtb.w	r2, r9
    5abe:	and.w	r3, r3, #31
    5ac2:	cmp	r3, r2
    5ac4:	bne.n	5b18 <FatFile::getName7(char*, unsigned int)+0xb4>
    5ac6:	subs	r2, r5, #1
    5ac8:	add.w	ip, r0, #1
    for (uint8_t i = 0; i < 13; i++) {
    5acc:	movs	r3, #0
    5ace:	add	r2, r8
  if (i < 5) {
    5ad0:	cmp	r3, #4
    5ad2:	bhi.n	5b36 <FatFile::getName7(char*, unsigned int)+0xd2>
    5ad4:	ldrh.w	r4, [ip]
    for (uint8_t i = 0; i < 13; i++) {
    5ad8:	adds	r3, #1
    5ada:	add.w	ip, ip, #2
      if (c == 0) {
    5ade:	cbz	r4, 5b08 <FatFile::getName7(char*, unsigned int)+0xa4>
      if ((n + 1) >= size) {
    5ae0:	adds	r5, #1
    for (uint8_t i = 0; i < 13; i++) {
    5ae2:	uxtb	r3, r3
      if ((n + 1) >= size) {
    5ae4:	cmp	r5, r7
    5ae6:	bcs.n	5b18 <FatFile::getName7(char*, unsigned int)+0xb4>
      name[n++] = c >= 0X7F ? '?' : c;
    5ae8:	cmp	r4, #127	; 0x7f
    5aea:	it	cs
    5aec:	movcs	r4, #63	; 0x3f
    for (uint8_t i = 0; i < 13; i++) {
    5aee:	cmp	r3, #13
      name[n++] = c >= 0X7F ? '?' : c;
    5af0:	strb.w	r4, [r2, #1]!
    for (uint8_t i = 0; i < 13; i++) {
    5af4:	bne.n	5ad0 <FatFile::getName7(char*, unsigned int)+0x6c>
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    5af6:	add.w	r9, r9, #1
    5afa:	ldrb	r2, [r6, #3]
    5afc:	uxtb.w	r3, r9
    5b00:	uxth.w	r9, r9
    5b04:	cmp	r2, r3
    5b06:	bcs.n	5a96 <FatFile::getName7(char*, unsigned int)+0x32>
  name[n] = 0;
    5b08:	add	r8, r5
    5b0a:	movs	r3, #0
}
    5b0c:	mov	r0, r5
  name[n] = 0;
    5b0e:	strb.w	r3, [r8]
}
    5b12:	add	sp, #44	; 0x2c
    5b14:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  name[0] = '\0';
    5b18:	movs	r3, #0
  return 0;
    5b1a:	mov	r5, r3
  name[0] = '\0';
    5b1c:	strb.w	r3, [r8]
}
    5b20:	mov	r0, r5
    5b22:	add	sp, #44	; 0x2c
    5b24:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return getSFN(name, size);
    5b28:	bl	59d0 <FatFile::getSFN(char*, unsigned int)>
    5b2c:	mov	r5, r0
}
    5b2e:	mov	r0, r5
    5b30:	add	sp, #44	; 0x2c
    5b32:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  } else if (i < 11) {
    5b36:	cmp	r3, #10
    5b38:	ite	ls
    5b3a:	ldrhls.w	r4, [ip, #3]
    5b3e:	ldrhhi.w	r4, [ip, #5]
    return getLe16(ldir->unicode3 + 2 * (i - 11));
    5b42:	b.n	5ad8 <FatFile::getName7(char*, unsigned int)+0x74>
  size_t n = 0;
    5b44:	mov	r5, r3
    5b46:	b.n	5b0a <FatFile::getName7(char*, unsigned int)+0xa6>

00005b48 <FatFile::getName(char*, unsigned int)>:
  return getName7(name, size);
    5b48:	b.w	5a64 <FatFile::getName7(char*, unsigned int)>

00005b4c <FatFile::sync() [clone .part.0]>:
fail:
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
    5b4c:	push	{r4, r5, r6, lr}
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    5b4e:	ldrsb.w	r3, [r0, #2]
bool FatFile::sync() {
    5b52:	sub	sp, #8
    5b54:	mov	r4, r0
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    5b56:	cmp	r3, #0
    5b58:	blt.n	5b76 <FatFile::sync() [clone .part.0]+0x2a>
      setLe16(dir->modifyTime, time);
    }
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
  }
  if (m_vol->cacheSync()) {
    5b5a:	ldr	r5, [r4, #8]
  uint8_t* fatCachePrepare(uint32_t sector, uint8_t options) {
    options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return m_fatCache.prepare(sector, options);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    5b5c:	add.w	r0, r5, #36	; 0x24
    5b60:	bl	3220 <FsCache::sync()>
    5b64:	cmp	r0, #0
    5b66:	bne.n	5be8 <FatFile::sync() [clone .part.0]+0x9c>
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
    5b68:	ldrb	r3, [r4, #1]
  return false;
    5b6a:	movs	r0, #0
  m_error |= WRITE_ERROR;
    5b6c:	orr.w	r3, r3, #1
    5b70:	strb	r3, [r4, #1]
}
    5b72:	add	sp, #8
    5b74:	pop	{r4, r5, r6, pc}
    return dataCachePrepare(sector, options);
  }
  bool cacheSync() { return m_cache.sync() && syncDevice(); }
#endif  // USE_SEPARATE_FAT_CACHE
  uint8_t* dataCachePrepare(uint32_t sector, uint8_t options) {
    return m_cache.prepare(sector, options);
    5b76:	ldr	r0, [r0, #8]
    5b78:	movs	r2, #1
    5b7a:	ldr	r1, [r4, #24]
    5b7c:	adds	r0, #36	; 0x24
    5b7e:	bl	3278 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    5b82:	cmp	r0, #0
    5b84:	beq.n	5b68 <FatFile::sync() [clone .part.0]+0x1c>
  return dir + (m_dirIndex & 0XF);
    5b86:	ldrh	r5, [r4, #4]
    5b88:	and.w	r5, r5, #15
    5b8c:	lsls	r3, r5, #5
    5b8e:	add.w	r5, r0, r5, lsl #5
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
    5b92:	ldrb	r3, [r0, r3]
    5b94:	cmp	r3, #229	; 0xe5
    5b96:	beq.n	5b68 <FatFile::sync() [clone .part.0]+0x1c>
    dir->attributes = m_attributes & FS_ATTRIB_COPY;
    5b98:	ldrb	r3, [r4, #0]
    5b9a:	and.w	r3, r3, #55	; 0x37
    5b9e:	strb	r3, [r5, #11]
    if (isFile()) {
    5ba0:	ldrb	r3, [r4, #0]
    5ba2:	lsls	r3, r3, #28
    5ba4:	bpl.n	5baa <FatFile::sync() [clone .part.0]+0x5e>
      setLe32(dir->fileSize, m_fileSize);
    5ba6:	ldr	r3, [r4, #28]
  *reinterpret_cast<uint32_t*>(dst) = src;
    5ba8:	str	r3, [r5, #28]
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    5baa:	ldr	r3, [r4, #32]
    if (FsDateTime::callback) {
    5bac:	ldr	r1, [pc, #84]	; (5c04 <FatFile::sync() [clone .part.0]+0xb8>)
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);
    5bae:	lsrs	r2, r3, #16
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    5bb0:	strh	r3, [r5, #26]
    if (FsDateTime::callback) {
    5bb2:	ldr	r6, [r1, #0]
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);
    5bb4:	strh	r2, [r5, #20]
    if (FsDateTime::callback) {
    5bb6:	cbz	r6, 5bd2 <FatFile::sync() [clone .part.0]+0x86>
      FsDateTime::callback(&date, &time, &ms10);
    5bb8:	add.w	r2, sp, #3
    5bbc:	add.w	r1, sp, #6
    5bc0:	add	r0, sp, #4
    5bc2:	blx	r6
      setLe16(dir->modifyDate, date);
    5bc4:	ldrh.w	r3, [sp, #4]
  *reinterpret_cast<uint16_t*>(dst) = src;
    5bc8:	ldrh.w	r2, [sp, #6]
    5bcc:	strh	r3, [r5, #24]
    5bce:	strh	r3, [r5, #18]
    5bd0:	strh	r2, [r5, #22]
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    5bd2:	ldrb	r3, [r4, #2]
  if (m_vol->cacheSync()) {
    5bd4:	ldr	r5, [r4, #8]
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    5bd6:	and.w	r3, r3, #127	; 0x7f
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    5bda:	add.w	r0, r5, #36	; 0x24
    5bde:	strb	r3, [r4, #2]
    5be0:	bl	3220 <FsCache::sync()>
    5be4:	cmp	r0, #0
    5be6:	beq.n	5b68 <FatFile::sync() [clone .part.0]+0x1c>
    5be8:	add.w	r0, r5, #564	; 0x234
    5bec:	bl	3220 <FsCache::sync()>
    5bf0:	cmp	r0, #0
    5bf2:	beq.n	5b68 <FatFile::sync() [clone .part.0]+0x1c>
    5bf4:	ldr	r0, [r5, #0]
  bool syncDevice() { return m_blockDev->syncDevice(); }
    5bf6:	ldr	r3, [r0, #0]
    5bf8:	ldr	r3, [r3, #28]
    5bfa:	blx	r3
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    5bfc:	cmp	r0, #0
    5bfe:	beq.n	5b68 <FatFile::sync() [clone .part.0]+0x1c>
    5c00:	b.n	5b72 <FatFile::sync() [clone .part.0]+0x26>
    5c02:	nop
    5c04:	.word	0x20006420

00005c08 <FatFile::addCluster()>:
  uint32_t cc = m_curCluster;
    5c08:	mov	r2, r0
bool FatFile::addCluster() {
    5c0a:	push	{r3, r4, r5, lr}
  uint32_t cc = m_curCluster;
    5c0c:	ldr.w	r5, [r2, #16]!
bool FatFile::addCluster() {
    5c10:	mov	r4, r0
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    5c12:	ldr	r0, [r0, #8]
    5c14:	mov	r1, r5
    5c16:	bl	6cc4 <FatPartition::allocateCluster(unsigned long, unsigned long*)>
    5c1a:	cbz	r0, 5c32 <FatFile::addCluster()+0x2a>
  if (cc == 0) {
    5c1c:	cbz	r5, 5c34 <FatFile::addCluster()+0x2c>
  } else if (m_curCluster != (cc + 1)) {
    5c1e:	ldr	r3, [r4, #16]
    5c20:	adds	r5, #1
    5c22:	cmp	r3, r5
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    5c24:	ldrb	r3, [r4, #2]
    5c26:	it	ne
    5c28:	andne.w	r3, r3, #191	; 0xbf
  m_flags |= FILE_FLAG_DIR_DIRTY;
    5c2c:	orn	r3, r3, #127	; 0x7f
    5c30:	strb	r3, [r4, #2]
}
    5c32:	pop	{r3, r4, r5, pc}
    m_flags |= FILE_FLAG_CONTIGUOUS;
    5c34:	ldrb	r3, [r4, #2]
    5c36:	orr.w	r3, r3, #64	; 0x40
    5c3a:	b.n	5c2c <FatFile::addCluster()+0x24>

00005c3c <FatFile::addDirCluster()>:
bool FatFile::addDirCluster() {
    5c3c:	push	{r3, r4, r5, r6, r7, lr}
  if (isRootFixed()) {
    5c3e:	ldrb	r4, [r0, #0]
    5c40:	ands.w	r4, r4, #64	; 0x40
    5c44:	bne.n	5c50 <FatFile::addDirCluster()+0x14>
  if (m_curPosition >= 512UL * 4095) {
    5c46:	ldr	r3, [pc, #104]	; (5cb0 <FatFile::addDirCluster()+0x74>)
    5c48:	mov	r5, r0
    5c4a:	ldr	r2, [r0, #20]
    5c4c:	cmp	r2, r3
    5c4e:	bcc.n	5c56 <FatFile::addDirCluster()+0x1a>
  return false;
    5c50:	movs	r7, #0
}
    5c52:	mov	r0, r7
    5c54:	pop	{r3, r4, r5, r6, r7, pc}
  if (!addCluster()) {
    5c56:	bl	5c08 <FatFile::addCluster()>
    5c5a:	mov	r7, r0
    5c5c:	cmp	r0, #0
    5c5e:	beq.n	5c50 <FatFile::addDirCluster()+0x14>
  sector = m_vol->clusterStartSector(m_curCluster);
    5c60:	ldr	r0, [r5, #8]
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
  }
  uint32_t clusterStartSector(uint32_t cluster) const {
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    5c62:	ldr	r6, [r5, #16]
    5c64:	ldrb	r2, [r0, #6]
    5c66:	subs	r6, #2
    5c68:	ldr	r1, [r0, #20]
    5c6a:	lsls	r6, r2
    5c6c:	add	r6, r1
  for (uint8_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    5c6e:	ldrb	r1, [r0, #4]
    5c70:	cbz	r1, 5c9e <FatFile::addDirCluster()+0x62>
    5c72:	mov	r1, r4
    5c74:	b.n	5c84 <FatFile::addDirCluster()+0x48>
    memset(pc, 0, m_vol->bytesPerSector());
    5c76:	bl	e110 <memset>
  for (uint8_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    5c7a:	ldr	r0, [r5, #8]
    5c7c:	uxtb	r1, r4
    5c7e:	ldrb	r2, [r0, #4]
    5c80:	cmp	r2, r1
    5c82:	bls.n	5c9c <FatFile::addDirCluster()+0x60>
    return m_cache.prepare(sector, options);
    5c84:	add	r1, r6
    5c86:	movs	r2, #5
    5c88:	adds	r0, #36	; 0x24
    5c8a:	adds	r4, #1
    5c8c:	bl	3278 <FsCache::prepare(unsigned long, unsigned char)>
    memset(pc, 0, m_vol->bytesPerSector());
    5c90:	mov.w	r2, #512	; 0x200
    5c94:	movs	r1, #0
    if (!pc) {
    5c96:	cmp	r0, #0
    5c98:	bne.n	5c76 <FatFile::addDirCluster()+0x3a>
    5c9a:	b.n	5c50 <FatFile::addDirCluster()+0x14>
    return m_bytesPerSector << m_sectorsPerClusterShift;
    5c9c:	ldrb	r2, [r0, #6]
    5c9e:	mov.w	r3, #512	; 0x200
  m_curPosition += m_vol->bytesPerCluster();
    5ca2:	ldr	r1, [r5, #20]
}
    5ca4:	mov	r0, r7
    5ca6:	lsls	r3, r2
  m_curPosition += m_vol->bytesPerCluster();
    5ca8:	uxtah	r3, r1, r3
    5cac:	str	r3, [r5, #20]
}
    5cae:	pop	{r3, r4, r5, r6, r7, pc}
    5cb0:	.word	0x001ffe00

00005cb4 <FatFile::cacheDirEntry(unsigned char)>:
DirFat_t* FatFile::cacheDirEntry(uint8_t action) {
    5cb4:	push	{r4, lr}
    5cb6:	mov	r4, r0
    return m_cache.prepare(sector, options);
    5cb8:	ldr	r0, [r0, #8]
    5cba:	mov	r2, r1
    5cbc:	adds	r0, #36	; 0x24
    5cbe:	ldr	r1, [r4, #24]
    5cc0:	bl	3278 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    5cc4:	cbz	r0, 5cd0 <FatFile::cacheDirEntry(unsigned char)+0x1c>
  return dir + (m_dirIndex & 0XF);
    5cc6:	ldrh	r3, [r4, #4]
    5cc8:	and.w	r3, r3, #15
    5ccc:	add.w	r0, r0, r3, lsl #5
}
    5cd0:	pop	{r4, pc}
    5cd2:	nop

00005cd4 <FatFile::close()>:
bool FatFile::close() {
    5cd4:	push	{r4, lr}
  if (!isOpen()) {
    5cd6:	ldrb	r3, [r0, #0]
bool FatFile::close() {
    5cd8:	mov	r4, r0
  if (!isOpen()) {
    5cda:	cbz	r3, 5ce8 <FatFile::close()+0x14>
    5cdc:	bl	5b4c <FatFile::sync() [clone .part.0]>
  m_attributes = FILE_ATTR_CLOSED;
    5ce0:	movs	r3, #0
    5ce2:	strb	r3, [r4, #0]
  m_flags = 0;
    5ce4:	strb	r3, [r4, #2]
}
    5ce6:	pop	{r4, pc}
  m_attributes = FILE_ATTR_CLOSED;
    5ce8:	movs	r3, #0
    return true;
    5cea:	movs	r0, #1
  m_attributes = FILE_ATTR_CLOSED;
    5cec:	strb	r3, [r4, #0]
  m_flags = 0;
    5cee:	strb	r3, [r4, #2]
}
    5cf0:	pop	{r4, pc}
    5cf2:	nop

00005cf4 <FatFile::dirEntry(DirFat_t*)>:
bool FatFile::dirEntry(DirFat_t* dst) {
    5cf4:	push	{r3, r4, r5, lr}
  if (!isOpen()) {
    5cf6:	ldrb	r3, [r0, #0]
bool FatFile::dirEntry(DirFat_t* dst) {
    5cf8:	mov	r5, r0
    5cfa:	mov	r4, r1
  if (!isOpen()) {
    5cfc:	cbz	r3, 5d04 <FatFile::dirEntry(DirFat_t*)+0x10>
    5cfe:	bl	5b4c <FatFile::sync() [clone .part.0]>
  if (!sync()) {
    5d02:	cbz	r0, 5d42 <FatFile::dirEntry(DirFat_t*)+0x4e>
    5d04:	ldr	r0, [r5, #8]
    5d06:	movs	r2, #0
    5d08:	ldr	r1, [r5, #24]
    5d0a:	adds	r0, #36	; 0x24
    5d0c:	bl	3278 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    5d10:	cbz	r0, 5d42 <FatFile::dirEntry(DirFat_t*)+0x4e>
  return dir + (m_dirIndex & 0XF);
    5d12:	ldrh	r2, [r5, #4]
    5d14:	and.w	r2, r2, #15
    5d18:	add.w	r3, r0, r2, lsl #5
    5d1c:	lsls	r2, r2, #5
  memcpy(dst, dir, sizeof(DirFat_t));
    5d1e:	ldr	r5, [r3, #4]
    5d20:	ldr	r0, [r0, r2]
    5d22:	ldr	r1, [r3, #8]
    5d24:	ldr	r2, [r3, #12]
    5d26:	str	r0, [r4, #0]
    5d28:	str	r5, [r4, #4]
    5d2a:	str	r1, [r4, #8]
    5d2c:	str	r2, [r4, #12]
    5d2e:	ldr	r0, [r3, #16]
    5d30:	ldr	r5, [r3, #20]
    5d32:	ldr	r1, [r3, #24]
    5d34:	ldr	r2, [r3, #28]
    5d36:	str	r0, [r4, #16]
  return true;
    5d38:	movs	r0, #1
  memcpy(dst, dir, sizeof(DirFat_t));
    5d3a:	str	r5, [r4, #20]
    5d3c:	str	r1, [r4, #24]
    5d3e:	str	r2, [r4, #28]
}
    5d40:	pop	{r3, r4, r5, pc}
  return false;
    5d42:	movs	r0, #0
}
    5d44:	pop	{r3, r4, r5, pc}
    5d46:	nop

00005d48 <FatFile::getCreateDateTime(unsigned short*, unsigned short*)>:
bool FatFile::getCreateDateTime(uint16_t* pdate, uint16_t* ptime) {
    5d48:	push	{r4, r5, lr}
    5d4a:	sub	sp, #36	; 0x24
    5d4c:	mov	r5, r1
    5d4e:	mov	r4, r2
  if (!dirEntry(&dir)) {
    5d50:	mov	r1, sp
    5d52:	bl	5cf4 <FatFile::dirEntry(DirFat_t*)>
    5d56:	cbz	r0, 5d64 <FatFile::getCreateDateTime(unsigned short*, unsigned short*)+0x1c>
  *pdate = getLe16(dir.createDate);
    5d58:	ldrh.w	r2, [sp, #16]
  *ptime = getLe16(dir.createTime);
    5d5c:	ldrh.w	r3, [sp, #14]
  *pdate = getLe16(dir.createDate);
    5d60:	strh	r2, [r5, #0]
  *ptime = getLe16(dir.createTime);
    5d62:	strh	r3, [r4, #0]
}
    5d64:	add	sp, #36	; 0x24
    5d66:	pop	{r4, r5, pc}

00005d68 <FatFile::getModifyDateTime(unsigned short*, unsigned short*)>:
bool FatFile::getModifyDateTime(uint16_t* pdate, uint16_t* ptime) {
    5d68:	push	{r4, r5, lr}
    5d6a:	sub	sp, #36	; 0x24
    5d6c:	mov	r5, r1
    5d6e:	mov	r4, r2
  if (!dirEntry(&dir)) {
    5d70:	mov	r1, sp
    5d72:	bl	5cf4 <FatFile::dirEntry(DirFat_t*)>
    5d76:	cbz	r0, 5d84 <FatFile::getModifyDateTime(unsigned short*, unsigned short*)+0x1c>
  *pdate = getLe16(dir.modifyDate);
    5d78:	ldrh.w	r2, [sp, #24]
  *ptime = getLe16(dir.modifyTime);
    5d7c:	ldrh.w	r3, [sp, #22]
  *pdate = getLe16(dir.modifyDate);
    5d80:	strh	r2, [r5, #0]
  *ptime = getLe16(dir.modifyTime);
    5d82:	strh	r3, [r4, #0]
}
    5d84:	add	sp, #36	; 0x24
    5d86:	pop	{r4, r5, pc}

00005d88 <FatFile::mkdir(FatFile*, FatLfn_t*)>:
  if (!parent->isDir()) {
    5d88:	ldrb	r3, [r1, #0]
    5d8a:	tst.w	r3, #208	; 0xd0
    5d8e:	bne.n	5d94 <FatFile::mkdir(FatFile*, FatLfn_t*)+0xc>
}
    5d90:	movs	r0, #0
    5d92:	bx	lr
bool FatFile::mkdir(FatFile* parent, FatName_t* fname) {
    5d94:	push	{r4, r5, r6, r7, lr}
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    5d96:	movw	r3, #2562	; 0xa02
bool FatFile::mkdir(FatFile* parent, FatName_t* fname) {
    5d9a:	sub	sp, #36	; 0x24
    5d9c:	mov	r5, r1
    5d9e:	mov	r4, r0
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    5da0:	bl	734c <FatFile::open(FatFile*, FatLfn_t*, int)>
    5da4:	cbz	r0, 5db6 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
  m_flags = FILE_FLAG_READ;
    5da6:	movs	r2, #1
  m_attributes = FILE_ATTR_SUBDIR;
    5da8:	movs	r3, #16
  if (!addDirCluster()) {
    5daa:	mov	r0, r4
  m_flags = FILE_FLAG_READ;
    5dac:	strb	r2, [r4, #2]
  m_attributes = FILE_ATTR_SUBDIR;
    5dae:	strb	r3, [r4, #0]
  if (!addDirCluster()) {
    5db0:	bl	5c3c <FatFile::addDirCluster()>
    5db4:	cbnz	r0, 5dbc <FatFile::mkdir(FatFile*, FatLfn_t*)+0x34>
}
    5db6:	movs	r0, #0
    5db8:	add	sp, #36	; 0x24
    5dba:	pop	{r4, r5, r6, r7, pc}
  m_firstCluster = m_curCluster;
    5dbc:	ldr	r2, [r4, #16]
  if (!isOpen()) {
    5dbe:	ldrb	r3, [r4, #0]
  m_firstCluster = m_curCluster;
    5dc0:	str	r2, [r4, #32]
  if (!isOpen()) {
    5dc2:	cbz	r3, 5de0 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x58>
  if (pos == m_curPosition) {
    5dc4:	ldr	r3, [r4, #20]
    5dc6:	cbz	r3, 5dd6 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x4e>
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    5dc8:	ldrb	r3, [r4, #2]
    m_curCluster = 0;
    5dca:	movs	r2, #0
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    5dcc:	bic.w	r3, r3, #32
  m_curPosition = pos;
    5dd0:	strd	r2, r2, [r4, #16]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    5dd4:	strb	r3, [r4, #2]
  if (!isOpen()) {
    5dd6:	mov	r0, r4
    5dd8:	bl	5b4c <FatFile::sync() [clone .part.0]>
  if (!sync()) {
    5ddc:	cmp	r0, #0
    5dde:	beq.n	5db6 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
    5de0:	ldr	r0, [r4, #8]
    5de2:	movs	r2, #1
    5de4:	ldr	r1, [r4, #24]
    5de6:	adds	r0, #36	; 0x24
    5de8:	bl	3278 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    5dec:	cmp	r0, #0
    5dee:	beq.n	5db6 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
  return dir + (m_dirIndex & 0XF);
    5df0:	ldrh.w	ip, [r4, #4]
  dir->attributes = FS_ATTRIB_DIRECTORY;
    5df4:	movs	r2, #16
  return dir + (m_dirIndex & 0XF);
    5df6:	and.w	ip, ip, #15
    5dfa:	mov.w	r3, ip, lsl #5
    5dfe:	add.w	ip, r0, ip, lsl #5
  dir->attributes = FS_ATTRIB_DIRECTORY;
    5e02:	strb.w	r2, [ip, #11]
  memcpy(&dot, dir, sizeof(dot));
    5e06:	ldr	r0, [r0, r3]
  sector = m_vol->clusterStartSector(m_firstCluster);
    5e08:	ldr	r7, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    5e0a:	ldr	r3, [r4, #32]
    5e0c:	ldrb.w	lr, [r7, #6]
    5e10:	subs	r6, r3, #2
  memcpy(&dot, dir, sizeof(dot));
    5e12:	ldr.w	r1, [ip, #4]
    5e16:	ldr.w	r2, [ip, #8]
    5e1a:	ldr.w	r3, [ip, #12]
    5e1e:	lsl.w	r6, r6, lr
    5e22:	mov	lr, sp
    5e24:	stmia.w	lr!, {r0, r1, r2, r3}
    5e28:	ldr.w	r0, [ip, #16]
    5e2c:	ldr.w	r1, [ip, #20]
    5e30:	ldr.w	r2, [ip, #24]
    5e34:	ldr.w	r3, [ip, #28]
    5e38:	stmia.w	lr!, {r0, r1, r2, r3}
    return m_cache.prepare(sector, options);
    5e3c:	ldr	r3, [r7, #20]
    5e3e:	add.w	r0, r7, #36	; 0x24
    5e42:	movs	r2, #1
    5e44:	adds	r1, r6, r3
    dot.name[i] = ' ';
    5e46:	mov.w	r3, #538976288	; 0x20202020
    5e4a:	str.w	r3, [sp, #1]
    5e4e:	str.w	r3, [sp, #5]
    5e52:	strh.w	r3, [sp, #9]
    5e56:	bl	3278 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    5e5a:	mov	ip, r0
    5e5c:	cmp	r0, #0
    5e5e:	beq.n	5db6 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
  memcpy(&dir[0], &dot, sizeof(dot));
    5e60:	movs	r7, #46	; 0x2e
    5e62:	mov	lr, sp
    5e64:	strb.w	r7, [sp]
  memcpy(&dir[1], &dot, sizeof(dot));
    5e68:	mov	r6, lr
  memcpy(&dir[0], &dot, sizeof(dot));
    5e6a:	ldmia.w	lr!, {r0, r1, r2, r3}
    5e6e:	str.w	r0, [ip]
    5e72:	str.w	r1, [ip, #4]
    5e76:	str.w	r2, [ip, #8]
    5e7a:	str.w	r3, [ip, #12]
  dot.name[1] = '.';
    5e7e:	strb.w	r7, [sp, #1]
  memcpy(&dir[0], &dot, sizeof(dot));
    5e82:	ldmia.w	lr!, {r0, r1, r2, r3}
    5e86:	str.w	r0, [ip, #16]
    5e8a:	str.w	r1, [ip, #20]
    5e8e:	str.w	r2, [ip, #24]
    5e92:	str.w	r3, [ip, #28]
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
    5e96:	ldr	r3, [r5, #32]
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
    5e98:	lsrs	r2, r3, #16
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
    5e9a:	strh.w	r3, [sp, #26]
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
    5e9e:	strh.w	r2, [sp, #20]
  memcpy(&dir[1], &dot, sizeof(dot));
    5ea2:	ldmia	r6!, {r0, r1, r2, r3}
    5ea4:	str.w	r0, [ip, #32]
    5ea8:	str.w	r1, [ip, #36]	; 0x24
    5eac:	str.w	r2, [ip, #40]	; 0x28
    5eb0:	str.w	r3, [ip, #44]	; 0x2c
    5eb4:	ldmia	r6!, {r0, r1, r2, r3}
    5eb6:	str.w	r0, [ip, #48]	; 0x30
    5eba:	str.w	r1, [ip, #52]	; 0x34
    5ebe:	str.w	r2, [ip, #56]	; 0x38
    5ec2:	str.w	r3, [ip, #60]	; 0x3c
  return m_vol->cacheSync();
    5ec6:	ldr	r4, [r4, #8]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    5ec8:	add.w	r0, r4, #36	; 0x24
    5ecc:	bl	3220 <FsCache::sync()>
    5ed0:	cmp	r0, #0
    5ed2:	beq.w	5db6 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
    5ed6:	add.w	r0, r4, #564	; 0x234
    5eda:	bl	3220 <FsCache::sync()>
    5ede:	cmp	r0, #0
    5ee0:	beq.w	5db6 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
    5ee4:	ldr	r0, [r4, #0]
  bool syncDevice() { return m_blockDev->syncDevice(); }
    5ee6:	ldr	r3, [r0, #0]
    5ee8:	ldr	r3, [r3, #28]
}
    5eea:	add	sp, #36	; 0x24
    5eec:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    5ef0:	bx	r3
    5ef2:	nop

00005ef4 <FatFile::mkdir(FatFile*, char const*, bool)>:
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    5ef4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  FatFile() {}
    5ef8:	movs	r6, #0
    5efa:	sub	sp, #80	; 0x50
    5efc:	mov	r8, r3
  if (isOpen() || !parent->isDir()) {
    5efe:	ldrb	r3, [r0, #0]
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    5f00:	str	r2, [sp, #4]
    5f02:	str	r6, [sp, #44]	; 0x2c
  if (isOpen() || !parent->isDir()) {
    5f04:	cmp	r3, #0
    5f06:	bne.n	5f8c <FatFile::mkdir(FatFile*, char const*, bool)+0x98>
    5f08:	ldrb	r3, [r1, #0]
    5f0a:	mov	r5, r1
    5f0c:	tst.w	r3, #208	; 0xd0
    5f10:	beq.n	5f8c <FatFile::mkdir(FatFile*, char const*, bool)+0x98>
  if (isDirSeparator(*path)) {
    5f12:	ldrb	r3, [r2, #0]
    5f14:	mov	r4, r0
    5f16:	mov	r6, r2
    5f18:	cmp	r3, #47	; 0x2f
    5f1a:	beq.n	5f94 <FatFile::mkdir(FatFile*, char const*, bool)+0xa0>
    if (!open(parent, &fname, O_RDONLY)) {
    5f1c:	movs	r7, #0
    5f1e:	b.n	5f72 <FatFile::mkdir(FatFile*, char const*, bool)+0x7e>
    if (!*path) {
    5f20:	ldr	r6, [sp, #4]
    5f22:	ldrb	r6, [r6, #0]
    5f24:	cmp	r6, #0
    5f26:	beq.n	5fc6 <FatFile::mkdir(FatFile*, char const*, bool)+0xd2>
    if (!open(parent, &fname, O_RDONLY)) {
    5f28:	bl	734c <FatFile::open(FatFile*, FatLfn_t*, int)>
    5f2c:	mov	r3, r0
      if (!pFlag || !mkdir(parent, &fname)) {
    5f2e:	add	r2, sp, #12
    5f30:	mov	r1, r5
    5f32:	mov	r0, r4
    if (!open(parent, &fname, O_RDONLY)) {
    5f34:	cbnz	r3, 5f42 <FatFile::mkdir(FatFile*, char const*, bool)+0x4e>
      if (!pFlag || !mkdir(parent, &fname)) {
    5f36:	cmp.w	r8, #0
    5f3a:	beq.n	5f8c <FatFile::mkdir(FatFile*, char const*, bool)+0x98>
    5f3c:	bl	5d88 <FatFile::mkdir(FatFile*, FatLfn_t*)>
    5f40:	cbz	r0, 5f8c <FatFile::mkdir(FatFile*, char const*, bool)+0x98>
    tmpDir = *this;
    5f42:	mov	lr, r4
    5f44:	add.w	ip, sp, #44	; 0x2c
    5f48:	ldmia.w	lr!, {r0, r1, r2, r3}
    5f4c:	stmia.w	ip!, {r0, r1, r2, r3}
    5f50:	ldmia.w	lr!, {r0, r1, r2, r3}
    5f54:	stmia.w	ip!, {r0, r1, r2, r3}
    5f58:	ldr.w	r5, [lr]
    5f5c:	mov	r0, r4
  if (!isOpen()) {
    5f5e:	ldrb	r3, [r4, #0]
    tmpDir = *this;
    5f60:	str.w	r5, [ip]
  if (!isOpen()) {
    5f64:	cbz	r3, 5f6a <FatFile::mkdir(FatFile*, char const*, bool)+0x76>
    5f66:	bl	5b4c <FatFile::sync() [clone .part.0]>
    if (!parsePathName(path, &fname, &path)) {
    5f6a:	ldr	r6, [sp, #4]
    parent = &tmpDir;
    5f6c:	add	r5, sp, #44	; 0x2c
  m_attributes = FILE_ATTR_CLOSED;
    5f6e:	strb	r7, [r4, #0]
  m_flags = 0;
    5f70:	strb	r7, [r4, #2]
    if (!parsePathName(path, &fname, &path)) {
    5f72:	mov	r1, r6
    5f74:	add	r3, sp, #4
    5f76:	add	r2, sp, #12
    5f78:	mov	r0, r4
    5f7a:	bl	75e4 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>
    5f7e:	mov	r6, r0
    if (!open(parent, &fname, O_RDONLY)) {
    5f80:	add	r2, sp, #12
    5f82:	mov	r1, r5
    5f84:	movs	r3, #0
    5f86:	mov	r0, r4
    if (!parsePathName(path, &fname, &path)) {
    5f88:	cmp	r6, #0
    5f8a:	bne.n	5f20 <FatFile::mkdir(FatFile*, char const*, bool)+0x2c>
  switch (vol->fatType()) {
    5f8c:	movs	r0, #0
}
    5f8e:	add	sp, #80	; 0x50
    5f90:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      path++;
    5f94:	adds	r6, #1
    5f96:	str	r6, [sp, #4]
    while (isDirSeparator(*path)) {
    5f98:	ldrb	r3, [r6, #0]
    5f9a:	cmp	r3, #47	; 0x2f
    5f9c:	beq.n	5f94 <FatFile::mkdir(FatFile*, char const*, bool)+0xa0>
    if (!tmpDir.openRoot(parent->m_vol)) {
    5f9e:	ldr	r5, [r5, #8]
  memset(this, 0, sizeof(FatFile));
    5fa0:	movs	r2, #36	; 0x24
    5fa2:	movs	r1, #0
    5fa4:	add	r0, sp, #44	; 0x2c
    5fa6:	bl	e110 <memset>
  m_vol = vol;
    5faa:	str	r5, [sp, #52]	; 0x34
  uint8_t fatType() const { return m_fatType; }
    5fac:	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
    5fae:	cmp	r3, #16
    5fb0:	beq.n	5fd2 <FatFile::mkdir(FatFile*, char const*, bool)+0xde>
    5fb2:	cmp	r3, #32
    5fb4:	bne.n	5f8c <FatFile::mkdir(FatFile*, char const*, bool)+0x98>
    5fb6:	movs	r3, #128	; 0x80
      m_attributes = FILE_ATTR_ROOT_FIXED;
    5fb8:	strb.w	r3, [sp, #44]	; 0x2c
  m_flags = FILE_FLAG_READ;
    5fbc:	movs	r3, #1
    parent = &tmpDir;
    5fbe:	add	r5, sp, #44	; 0x2c
  m_flags = FILE_FLAG_READ;
    5fc0:	strb.w	r3, [sp, #46]	; 0x2e
  return true;
    5fc4:	b.n	5f1c <FatFile::mkdir(FatFile*, char const*, bool)+0x28>
  return mkdir(parent, &fname);
    5fc6:	add	r2, sp, #12
    5fc8:	bl	5d88 <FatFile::mkdir(FatFile*, FatLfn_t*)>
}
    5fcc:	add	sp, #80	; 0x50
    5fce:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (vol->fatType()) {
    5fd2:	movs	r3, #64	; 0x40
    5fd4:	b.n	5fb8 <FatFile::mkdir(FatFile*, char const*, bool)+0xc4>
    5fd6:	nop

00005fd8 <FatFile::open(FatFile*, char const*, int)>:
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    5fd8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5fdc:	movs	r5, #0
    5fde:	sub	sp, #80	; 0x50
    5fe0:	mov	r8, r3
  if (isOpen() || !dirFile->isDir()) {
    5fe2:	ldrb	r3, [r0, #0]
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    5fe4:	str	r2, [sp, #4]
    5fe6:	str	r5, [sp, #44]	; 0x2c
  if (isOpen() || !dirFile->isDir()) {
    5fe8:	cmp	r3, #0
    5fea:	bne.n	605c <FatFile::open(FatFile*, char const*, int)+0x84>
    5fec:	ldrb	r3, [r1, #0]
    5fee:	mov	r6, r1
    5ff0:	tst.w	r3, #208	; 0xd0
    5ff4:	beq.n	605c <FatFile::open(FatFile*, char const*, int)+0x84>
  if (isDirSeparator(*path)) {
    5ff6:	ldrb	r3, [r2, #0]
    5ff8:	mov	r4, r0
    5ffa:	mov	r5, r2
    5ffc:	cmp	r3, #47	; 0x2f
    5ffe:	beq.n	6064 <FatFile::open(FatFile*, char const*, int)+0x8c>
    if (!open(dirFile, &fname, O_RDONLY)) {
    6000:	movs	r7, #0
    6002:	b.n	6042 <FatFile::open(FatFile*, char const*, int)+0x6a>
    if (*path == 0) {
    6004:	ldr	r5, [sp, #4]
    6006:	ldrb	r5, [r5, #0]
    6008:	cmp	r5, #0
    600a:	beq.n	6092 <FatFile::open(FatFile*, char const*, int)+0xba>
    if (!open(dirFile, &fname, O_RDONLY)) {
    600c:	bl	734c <FatFile::open(FatFile*, FatLfn_t*, int)>
    tmpDir = *this;
    6010:	mov	lr, r4
    6012:	add.w	ip, sp, #44	; 0x2c
    if (!open(dirFile, &fname, O_RDONLY)) {
    6016:	cbz	r0, 605c <FatFile::open(FatFile*, char const*, int)+0x84>
    dirFile = &tmpDir;
    6018:	mov	r6, ip
  if (!isOpen()) {
    601a:	ldrb	r5, [r4, #0]
    tmpDir = *this;
    601c:	ldmia.w	lr!, {r0, r1, r2, r3}
    6020:	stmia.w	ip!, {r0, r1, r2, r3}
    6024:	ldmia.w	lr!, {r0, r1, r2, r3}
    6028:	stmia.w	ip!, {r0, r1, r2, r3}
    602c:	ldr.w	r3, [lr]
    6030:	mov	r0, r4
    6032:	str.w	r3, [ip]
  if (!isOpen()) {
    6036:	cbz	r5, 603c <FatFile::open(FatFile*, char const*, int)+0x64>
    6038:	bl	5b4c <FatFile::sync() [clone .part.0]>
    if (!parsePathName(path, &fname, &path)) {
    603c:	ldr	r5, [sp, #4]
  m_attributes = FILE_ATTR_CLOSED;
    603e:	strb	r7, [r4, #0]
  m_flags = 0;
    6040:	strb	r7, [r4, #2]
    if (!parsePathName(path, &fname, &path)) {
    6042:	mov	r1, r5
    6044:	add	r3, sp, #4
    6046:	add	r2, sp, #12
    6048:	mov	r0, r4
    604a:	bl	75e4 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>
    604e:	mov	r5, r0
    if (!open(dirFile, &fname, O_RDONLY)) {
    6050:	add	r2, sp, #12
    6052:	mov	r1, r6
    6054:	movs	r3, #0
    6056:	mov	r0, r4
    if (!parsePathName(path, &fname, &path)) {
    6058:	cmp	r5, #0
    605a:	bne.n	6004 <FatFile::open(FatFile*, char const*, int)+0x2c>
  return false;
    605c:	movs	r0, #0
}
    605e:	add	sp, #80	; 0x50
    6060:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      path++;
    6064:	adds	r5, #1
    6066:	str	r5, [sp, #4]
    while (isDirSeparator(*path)) {
    6068:	ldrb	r1, [r5, #0]
    606a:	cmp	r1, #47	; 0x2f
    606c:	beq.n	6064 <FatFile::open(FatFile*, char const*, int)+0x8c>
    if (*path == 0) {
    606e:	cbnz	r1, 60a0 <FatFile::open(FatFile*, char const*, int)+0xc8>
      return openRoot(dirFile->m_vol);
    6070:	ldr	r5, [r6, #8]
  memset(this, 0, sizeof(FatFile));
    6072:	movs	r2, #36	; 0x24
    6074:	mov	r0, r4
    6076:	bl	e110 <memset>
  m_vol = vol;
    607a:	str	r5, [r4, #8]
    607c:	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
    607e:	cmp	r3, #16
    6080:	beq.n	60cc <FatFile::open(FatFile*, char const*, int)+0xf4>
    6082:	cmp	r3, #32
    6084:	bne.n	605c <FatFile::open(FatFile*, char const*, int)+0x84>
    6086:	movs	r2, #128	; 0x80
  m_flags = FILE_FLAG_READ;
    6088:	movs	r3, #1
      m_attributes = FILE_ATTR_ROOT_FIXED;
    608a:	strb	r2, [r4, #0]
  return true;
    608c:	mov	r0, r3
  m_flags = FILE_FLAG_READ;
    608e:	strb	r3, [r4, #2]
  return true;
    6090:	b.n	605e <FatFile::open(FatFile*, char const*, int)+0x86>
  return open(dirFile, &fname, oflag);
    6092:	mov	r3, r8
    6094:	add	r2, sp, #12
    6096:	bl	734c <FatFile::open(FatFile*, FatLfn_t*, int)>
}
    609a:	add	sp, #80	; 0x50
    609c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    60a0:	ldr	r6, [r6, #8]
  memset(this, 0, sizeof(FatFile));
    60a2:	movs	r2, #36	; 0x24
    60a4:	movs	r1, #0
    60a6:	add	r0, sp, #44	; 0x2c
    60a8:	bl	e110 <memset>
  m_vol = vol;
    60ac:	str	r6, [sp, #52]	; 0x34
    60ae:	ldrb	r3, [r6, #7]
  switch (vol->fatType()) {
    60b0:	cmp	r3, #16
    60b2:	beq.n	60c8 <FatFile::open(FatFile*, char const*, int)+0xf0>
    60b4:	cmp	r3, #32
    60b6:	bne.n	605c <FatFile::open(FatFile*, char const*, int)+0x84>
    60b8:	movs	r3, #128	; 0x80
      m_attributes = FILE_ATTR_ROOT_FIXED;
    60ba:	strb.w	r3, [sp, #44]	; 0x2c
  m_flags = FILE_FLAG_READ;
    60be:	movs	r3, #1
    dirFile = &tmpDir;
    60c0:	add	r6, sp, #44	; 0x2c
  m_flags = FILE_FLAG_READ;
    60c2:	strb.w	r3, [sp, #46]	; 0x2e
  return true;
    60c6:	b.n	6000 <FatFile::open(FatFile*, char const*, int)+0x28>
  switch (vol->fatType()) {
    60c8:	movs	r3, #64	; 0x40
    60ca:	b.n	60ba <FatFile::open(FatFile*, char const*, int)+0xe2>
    60cc:	movs	r2, #64	; 0x40
    60ce:	b.n	6088 <FatFile::open(FatFile*, char const*, int)+0xb0>

000060d0 <FatFile::open(FatVolume*, char const*, int)>:
  return vol && open(vol->vwd(), path, oflag);
    60d0:	cbz	r1, 60da <FatFile::open(FatVolume*, char const*, int)+0xa>
    60d2:	addw	r1, r1, #1092	; 0x444
    60d6:	b.w	5fd8 <FatFile::open(FatFile*, char const*, int)>
}
    60da:	mov	r0, r1
    60dc:	bx	lr
    60de:	nop

000060e0 <FatFile::openCluster(FatFile*)>:
  if (file->m_dirCluster == 0) {
    60e0:	ldr	r3, [r1, #12]
bool FatFile::openCluster(FatFile* file) {
    60e2:	push	{r4, r5, r6, lr}
    60e4:	mov	r5, r1
    60e6:	mov	r4, r0
  if (file->m_dirCluster == 0) {
    60e8:	cbnz	r3, 6114 <FatFile::openCluster(FatFile*)+0x34>
  if (isOpen()) {
    60ea:	ldrb	r6, [r0, #0]
    60ec:	cbz	r6, 60f2 <FatFile::openCluster(FatFile*)+0x12>
  return false;
    60ee:	mov	r0, r3
}
    60f0:	pop	{r4, r5, r6, pc}
    return openRoot(file->m_vol);
    60f2:	ldr	r5, [r1, #8]
  memset(this, 0, sizeof(FatFile));
    60f4:	movs	r2, #36	; 0x24
    60f6:	mov	r1, r6
    60f8:	bl	e110 <memset>
  m_vol = vol;
    60fc:	str	r5, [r4, #8]
    60fe:	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
    6100:	cmp	r3, #16
    6102:	beq.n	6132 <FatFile::openCluster(FatFile*)+0x52>
    6104:	cmp	r3, #32
    6106:	bne.n	612e <FatFile::openCluster(FatFile*)+0x4e>
    6108:	movs	r2, #128	; 0x80
  m_flags = FILE_FLAG_READ;
    610a:	movs	r3, #1
      m_attributes = FILE_ATTR_ROOT_FIXED;
    610c:	strb	r2, [r4, #0]
  return true;
    610e:	mov	r0, r3
  m_flags = FILE_FLAG_READ;
    6110:	strb	r3, [r4, #2]
}
    6112:	pop	{r4, r5, r6, pc}
  memset(this, 0, sizeof(FatFile));
    6114:	movs	r2, #36	; 0x24
    6116:	movs	r1, #0
    6118:	bl	e110 <memset>
  m_flags = FILE_FLAG_READ;
    611c:	movs	r0, #1
  m_attributes = FILE_ATTR_SUBDIR;
    611e:	movs	r3, #16
  m_flags = FILE_FLAG_READ;
    6120:	strb	r0, [r4, #2]
  m_attributes = FILE_ATTR_SUBDIR;
    6122:	strb	r3, [r4, #0]
  m_firstCluster = file->m_dirCluster;
    6124:	ldrd	r2, r3, [r5, #8]
  m_vol = file->m_vol;
    6128:	str	r2, [r4, #8]
  m_firstCluster = file->m_dirCluster;
    612a:	str	r3, [r4, #32]
}
    612c:	pop	{r4, r5, r6, pc}
  switch (vol->fatType()) {
    612e:	mov	r0, r6
}
    6130:	pop	{r4, r5, r6, pc}
  switch (vol->fatType()) {
    6132:	movs	r2, #64	; 0x40
    6134:	b.n	610a <FatFile::openCluster(FatFile*)+0x2a>
    6136:	nop

00006138 <FatFile::openRoot(FatVolume*)>:
bool FatFile::openRoot(FatVolume* vol) {
    6138:	push	{r4, r5, r6, lr}
  if (isOpen()) {
    613a:	ldrb	r5, [r0, #0]
    613c:	cbz	r5, 6142 <FatFile::openRoot(FatVolume*)+0xa>
  return false;
    613e:	movs	r0, #0
}
    6140:	pop	{r4, r5, r6, pc}
    6142:	mov	r6, r1
    6144:	mov	r4, r0
  memset(this, 0, sizeof(FatFile));
    6146:	movs	r2, #36	; 0x24
    6148:	mov	r1, r5
    614a:	bl	e110 <memset>
  m_vol = vol;
    614e:	str	r6, [r4, #8]
    6150:	ldrb	r3, [r6, #7]
  switch (vol->fatType()) {
    6152:	cmp	r3, #16
    6154:	beq.n	616a <FatFile::openRoot(FatVolume*)+0x32>
    6156:	cmp	r3, #32
    6158:	bne.n	6166 <FatFile::openRoot(FatVolume*)+0x2e>
    615a:	movs	r2, #128	; 0x80
  m_flags = FILE_FLAG_READ;
    615c:	movs	r3, #1
      m_attributes = FILE_ATTR_ROOT_FIXED;
    615e:	strb	r2, [r4, #0]
  return true;
    6160:	mov	r0, r3
  m_flags = FILE_FLAG_READ;
    6162:	strb	r3, [r4, #2]
}
    6164:	pop	{r4, r5, r6, pc}
  switch (vol->fatType()) {
    6166:	mov	r0, r5
}
    6168:	pop	{r4, r5, r6, pc}
  switch (vol->fatType()) {
    616a:	movs	r2, #64	; 0x40
    616c:	b.n	615c <FatFile::openRoot(FatVolume*)+0x24>
    616e:	nop

00006170 <FatFile::read(void*, unsigned int)>:
int FatFile::read(void* buf, size_t nbyte) {
    6170:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6174:	vpush	{d8}
  bool isReadable() const { return m_flags & FILE_FLAG_READ; }
    6178:	ldrb	r3, [r0, #2]
    617a:	sub	sp, #12
    617c:	mov	r5, r0
  if (!isReadable()) {
    617e:	lsls	r7, r3, #31
    6180:	bpl.w	629c <FatFile::read(void*, unsigned int)+0x12c>
  bool isFile() const { return m_attributes & FILE_ATTR_FILE; }
    6184:	mov	r8, r1
    6186:	ldrb	r1, [r0, #0]
    6188:	mov	sl, r2
  if (isFile()) {
    618a:	lsls	r6, r1, #28
    618c:	bmi.w	62b2 <FatFile::read(void*, unsigned int)+0x142>
  } else if (isRootFixed()) {
    6190:	lsls	r4, r1, #25
    6192:	bpl.n	61a6 <FatFile::read(void*, unsigned int)+0x36>
        FS_DIR_SIZE * m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    6194:	ldr	r3, [r0, #8]
    6196:	ldrh	r2, [r3, #8]
    6198:	ldr	r3, [r0, #20]
    uint16_t tmp16 =
    619a:	rsb	r3, r3, r2, lsl #5
    if (nbyte > tmp16) {
    619e:	uxth	r3, r3
    61a0:	cmp	sl, r3
    61a2:	it	cs
    61a4:	movcs	sl, r3
  while (toRead) {
    61a6:	cmp.w	sl, #0
    61aa:	beq.w	630c <FatFile::read(void*, unsigned int)+0x19c>
    uint32_t tmp32 = m_fileSize - m_curPosition;
    61ae:	ldr	r2, [r5, #20]
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    61b0:	add.w	r3, r5, #16
    if (isRootFixed()) {
    61b4:	lsls	r0, r1, #25
    uint32_t tmp32 = m_fileSize - m_curPosition;
    61b6:	mov	r6, sl
  uint8_t sectorOfCluster = 0;
    61b8:	mov.w	r9, #0
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    61bc:	vmov	s16, r3
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    61c0:	ldr	r7, [r5, #8]
    61c2:	ubfx	fp, r2, #0, #9
    if (isRootFixed()) {
    61c6:	bpl.n	6244 <FatFile::read(void*, unsigned int)+0xd4>
      sector = m_vol->rootDirStart() +
    61c8:	ldr	r1, [r7, #32]
    61ca:	add.w	r1, r1, r2, lsr #9
    if (offset != 0 || toRead < m_vol->bytesPerSector() ||
    61ce:	cmp.w	fp, #0
    61d2:	bne.n	6278 <FatFile::read(void*, unsigned int)+0x108>
    61d4:	cmp.w	r6, #512	; 0x200
    61d8:	bcc.n	6278 <FatFile::read(void*, unsigned int)+0x108>
  uint32_t sector() { return m_sector; }
    61da:	ldr	r2, [r7, #44]	; 0x2c
    61dc:	cmp	r1, r2
    61de:	beq.n	6278 <FatFile::read(void*, unsigned int)+0x108>
    } else if (toRead >= 2 * m_vol->bytesPerSector()) {
    61e0:	cmp.w	r6, #1024	; 0x400
    61e4:	bcc.w	62ec <FatFile::read(void*, unsigned int)+0x17c>
      if (!isRootFixed()) {
    61e8:	ldrb	r0, [r5, #0]
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    61ea:	lsrs	r3, r6, #9
      if (!isRootFixed()) {
    61ec:	lsls	r0, r0, #25
    61ee:	bmi.n	61fc <FatFile::read(void*, unsigned int)+0x8c>
        uint32_t mb = m_vol->sectorsPerCluster() - sectorOfCluster;
    61f0:	ldrb	r0, [r7, #4]
    61f2:	sub.w	r0, r0, r9
    61f6:	cmp	r3, r0
    61f8:	it	cs
    61fa:	movcs	r3, r0
    return sector <= m_sector && m_sector < (sector + count);
    61fc:	cmp	r1, r2
      n = ns << m_vol->bytesPerSectorShift();
    61fe:	mov.w	r4, r3, lsl #9
    6202:	bhi.n	621e <FatFile::read(void*, unsigned int)+0xae>
    6204:	adds	r0, r1, r3
    6206:	cmp	r2, r0
    6208:	bcs.n	621e <FatFile::read(void*, unsigned int)+0xae>
    if (isCached(sector, count) && !sync()) {
    620a:	add.w	r0, r7, #36	; 0x24
    620e:	strd	r1, r3, [sp]
    6212:	bl	3220 <FsCache::sync()>
    6216:	ldrd	r1, r3, [sp]
    621a:	cmp	r0, #0
    621c:	beq.n	629c <FatFile::read(void*, unsigned int)+0x12c>
    return m_blockDev->readSectors(sector, dst, count);
    621e:	ldr	r0, [r7, #40]	; 0x28
    6220:	ldr	r2, [r0, #0]
    6222:	ldr	r7, [r2, #20]
    6224:	mov	r2, r8
    6226:	blx	r7
      if (!m_vol->cacheSafeRead(sector, dst, ns)) {
    6228:	cmp	r0, #0
    622a:	beq.n	629c <FatFile::read(void*, unsigned int)+0x12c>
    m_curPosition += n;
    622c:	ldr	r2, [r5, #20]
  while (toRead) {
    622e:	subs	r6, r6, r4
    dst += n;
    6230:	add	r8, r4
    m_curPosition += n;
    6232:	add	r2, r4
    6234:	str	r2, [r5, #20]
  while (toRead) {
    6236:	beq.n	630c <FatFile::read(void*, unsigned int)+0x19c>
  bool isRootFixed() const { return m_attributes & FILE_ATTR_ROOT_FIXED; }
    6238:	ldrb	r1, [r5, #0]
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    623a:	ubfx	fp, r2, #0, #9
    623e:	ldr	r7, [r5, #8]
    if (isRootFixed()) {
    6240:	lsls	r0, r1, #25
    6242:	bmi.n	61c8 <FatFile::read(void*, unsigned int)+0x58>
    return (position >> 9) & m_clusterSectorMask;
    6244:	ldrb.w	r9, [r7, #5]
    6248:	and.w	r9, r9, r2, lsr #9
      if (offset == 0 && sectorOfCluster == 0) {
    624c:	cmp.w	fp, #0
    6250:	bne.n	62c0 <FatFile::read(void*, unsigned int)+0x150>
    6252:	cmp.w	r9, #0
    6256:	bne.n	62c0 <FatFile::read(void*, unsigned int)+0x150>
        if (m_curPosition == 0) {
    6258:	cmp	r2, #0
    625a:	bne.n	62c4 <FatFile::read(void*, unsigned int)+0x154>
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    625c:	lsls	r2, r1, #24
  uint32_t rootDirStart() const { return m_rootDirStart; }
    625e:	ite	mi
    6260:	ldrmi	r2, [r7, #32]
    6262:	ldrpl	r2, [r5, #32]
          m_curCluster++;
    6264:	str	r2, [r5, #16]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    6266:	subs	r2, #2
    6268:	ldrb	r0, [r7, #6]
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    626a:	ldr	r1, [r7, #20]
    626c:	lsls	r2, r0
    626e:	add	r1, r9
    6270:	add	r1, r2
    if (offset != 0 || toRead < m_vol->bytesPerSector() ||
    6272:	cmp.w	fp, #0
    6276:	beq.n	61d4 <FatFile::read(void*, unsigned int)+0x64>
      n = m_vol->bytesPerSector() - offset;
    6278:	rsb	r4, fp, #512	; 0x200
    return m_cache.prepare(sector, options);
    627c:	movs	r2, #0
    627e:	add.w	r0, r7, #36	; 0x24
    6282:	cmp	r4, r6
    6284:	it	cs
    6286:	movcs	r4, r6
    6288:	bl	3278 <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    628c:	cbz	r0, 629c <FatFile::read(void*, unsigned int)+0x12c>
      memcpy(dst, src, n);
    628e:	add.w	r1, r0, fp
    6292:	mov	r2, r4
    6294:	mov	r0, r8
    6296:	bl	a170 <memcpy>
    629a:	b.n	622c <FatFile::read(void*, unsigned int)+0xbc>
  m_error |= READ_ERROR;
    629c:	ldrb	r3, [r5, #1]
  return -1;
    629e:	mov.w	r0, #4294967295
  m_error |= READ_ERROR;
    62a2:	orr.w	r3, r3, #2
    62a6:	strb	r3, [r5, #1]
}
    62a8:	add	sp, #12
    62aa:	vpop	{d8}
    62ae:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    uint32_t tmp32 = m_fileSize - m_curPosition;
    62b2:	ldr	r3, [r0, #28]
    62b4:	ldr	r2, [r0, #20]
    62b6:	subs	r3, r3, r2
    62b8:	cmp	sl, r3
    62ba:	it	cs
    62bc:	movcs	sl, r3
    62be:	b.n	61a6 <FatFile::read(void*, unsigned int)+0x36>
          m_curCluster++;
    62c0:	ldr	r2, [r5, #16]
    62c2:	b.n	6266 <FatFile::read(void*, unsigned int)+0xf6>
        } else if (isFile() && isContiguous()) {
    62c4:	lsls	r3, r1, #28
    62c6:	bpl.n	62d4 <FatFile::read(void*, unsigned int)+0x164>
    62c8:	ldrb	r2, [r5, #2]
    62ca:	lsls	r4, r2, #25
    62cc:	bpl.n	62d4 <FatFile::read(void*, unsigned int)+0x164>
          m_curCluster++;
    62ce:	ldr	r2, [r5, #16]
    62d0:	adds	r2, #1
    62d2:	b.n	6264 <FatFile::read(void*, unsigned int)+0xf4>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    62d4:	vmov	r2, s16
    62d8:	mov	r0, r7
    62da:	ldr	r1, [r5, #16]
    62dc:	bl	6c38 <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    62e0:	cmp	r0, #0
    62e2:	blt.n	629c <FatFile::read(void*, unsigned int)+0x12c>
          if (fg == 0) {
    62e4:	beq.n	6300 <FatFile::read(void*, unsigned int)+0x190>
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    62e6:	ldr	r7, [r5, #8]
    62e8:	ldr	r2, [r5, #16]
    62ea:	b.n	6266 <FatFile::read(void*, unsigned int)+0xf6>
    return m_blockDev->readSector(sector, dst);
    62ec:	ldr	r0, [r7, #40]	; 0x28
    62ee:	mov	r2, r8
    62f0:	ldr	r3, [r0, #0]
    62f2:	ldr	r3, [r3, #16]
    62f4:	blx	r3
      if (!m_vol->cacheSafeRead(sector, dst)) {
    62f6:	cmp	r0, #0
    62f8:	beq.n	629c <FatFile::read(void*, unsigned int)+0x12c>
      n = m_vol->bytesPerSector();
    62fa:	mov.w	r4, #512	; 0x200
    62fe:	b.n	622c <FatFile::read(void*, unsigned int)+0xbc>
            if (isDir()) {
    6300:	ldrb	r3, [r5, #0]
    6302:	tst.w	r3, #208	; 0xd0
    6306:	beq.n	629c <FatFile::read(void*, unsigned int)+0x12c>
  return nbyte - toRead;
    6308:	sub.w	sl, sl, r6
    630c:	mov	r0, sl
}
    630e:	add	sp, #12
    6310:	vpop	{d8}
    6314:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00006318 <FatFile::peek()>:
int FatFile::peek() {
    6318:	push	{r4, r5, r6, lr}
    631a:	sub	sp, #8
    return read(&b, 1) == 1 ? b : -1;
    631c:	movs	r2, #1
    631e:	mov	r4, r0
    6320:	add.w	r1, sp, #7
  uint32_t saveCurCluster = m_curCluster;
    6324:	ldrd	r5, r6, [r0, #16]
    6328:	bl	6170 <FatFile::read(void*, unsigned int)>
    632c:	cmp	r0, #1
    632e:	ite	eq
    6330:	ldrbeq.w	r0, [sp, #7]
    6334:	movne.w	r0, #4294967295
  m_curCluster = saveCurCluster;
    6338:	strd	r5, r6, [r4, #16]
}
    633c:	add	sp, #8
    633e:	pop	{r4, r5, r6, pc}

00006340 <FatFile::readDirCache(bool)>:
  uint8_t i = (m_curPosition >> 5) & 0XF;
    6340:	ldr	r3, [r0, #20]
  if (i == 0 || !skipReadOk) {
    6342:	tst.w	r3, #480	; 0x1e0
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
    6346:	push	{r4, r5, lr}
    6348:	mov	r4, r0
    634a:	sub	sp, #12
  uint8_t i = (m_curPosition >> 5) & 0XF;
    634c:	ubfx	r5, r3, #5, #4
  if (i == 0 || !skipReadOk) {
    6350:	beq.n	6366 <FatFile::readDirCache(bool)+0x26>
    6352:	cmp	r1, #1
    6354:	bne.n	6366 <FatFile::readDirCache(bool)+0x26>
    m_curPosition += FS_DIR_SIZE;
    6356:	adds	r3, #32
    6358:	str	r3, [r0, #20]
  uint8_t* cacheBuffer() { return m_buffer; }
    635a:	ldr	r0, [r4, #8]
    635c:	adds	r0, #52	; 0x34
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    635e:	add.w	r0, r0, r5, lsl #5
}
    6362:	add	sp, #12
    6364:	pop	{r4, r5, pc}
    int8_t n = read(&n, 1);
    6366:	movs	r2, #1
    6368:	add.w	r1, sp, #7
    636c:	mov	r0, r4
    636e:	bl	6170 <FatFile::read(void*, unsigned int)>
    if (n != 1) {
    6372:	sxtb	r0, r0
    6374:	cmp	r0, #1
    6376:	bne.n	6380 <FatFile::readDirCache(bool)+0x40>
    m_curPosition += FS_DIR_SIZE - 1;
    6378:	ldr	r3, [r4, #20]
    637a:	adds	r3, #31
    637c:	str	r3, [r4, #20]
    637e:	b.n	635a <FatFile::readDirCache(bool)+0x1a>
  return nullptr;
    6380:	movs	r0, #0
    6382:	b.n	6362 <FatFile::readDirCache(bool)+0x22>

00006384 <FatFile::rename(FatFile*, char const*)>:
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    6384:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!(isFile() || isSubDir())) {
    6388:	ldrb	r3, [r0, #0]
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    638a:	sub	sp, #104	; 0x68
  FatFile() {}
    638c:	movs	r6, #0
  if (!(isFile() || isSubDir())) {
    638e:	tst.w	r3, #24
    6392:	str	r6, [sp, #32]
    6394:	str	r6, [sp, #68]	; 0x44
    6396:	beq.n	63a6 <FatFile::rename(FatFile*, char const*)+0x22>
    6398:	mov	r7, r2
  if (m_vol != dirFile->m_vol) {
    639a:	ldr	r3, [r0, #8]
    639c:	ldr	r2, [r1, #8]
    639e:	mov	r4, r0
    63a0:	mov	r5, r1
    63a2:	cmp	r2, r3
    63a4:	beq.n	63ae <FatFile::rename(FatFile*, char const*)+0x2a>
  return false;
    63a6:	movs	r0, #0
}
    63a8:	add	sp, #104	; 0x68
    63aa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    63ae:	bl	5b4c <FatFile::sync() [clone .part.0]>
  oldFile = *this;
    63b2:	mov	lr, r4
    63b4:	add.w	ip, sp, #68	; 0x44
    63b8:	ldmia.w	lr!, {r0, r1, r2, r3}
    63bc:	stmia.w	ip!, {r0, r1, r2, r3}
    63c0:	ldmia.w	lr!, {r0, r1, r2, r3}
    63c4:	stmia.w	ip!, {r0, r1, r2, r3}
    63c8:	ldr.w	r3, [lr]
    63cc:	mov	r2, r6
    63ce:	ldr	r1, [r4, #24]
    63d0:	str.w	r3, [ip]
    63d4:	ldr	r3, [r4, #8]
    63d6:	add.w	r0, r3, #36	; 0x24
    63da:	bl	3278 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    63de:	cmp	r0, #0
    63e0:	beq.n	63a6 <FatFile::rename(FatFile*, char const*)+0x22>
  return dir + (m_dirIndex & 0XF);
    63e2:	ldrh	r2, [r4, #4]
  memcpy(&entry, dir, sizeof(entry));
    63e4:	mov	ip, sp
  if (isFile()) {
    63e6:	ldrb.w	r8, [r4]
  return dir + (m_dirIndex & 0XF);
    63ea:	and.w	r2, r2, #15
  memcpy(&entry, dir, sizeof(entry));
    63ee:	add.w	lr, r0, r2, lsl #5
    63f2:	lsls	r2, r2, #5
    63f4:	ldr.w	r1, [lr, #4]
    63f8:	ldr	r0, [r0, r2]
    63fa:	ldr.w	r3, [lr, #12]
    63fe:	ldr.w	r2, [lr, #8]
    6402:	stmia.w	ip!, {r0, r1, r2, r3}
    6406:	ldr.w	r1, [lr, #20]
    640a:	ldr.w	r2, [lr, #24]
    640e:	ldr.w	r3, [lr, #28]
    6412:	ldr.w	r0, [lr, #16]
    6416:	stmia.w	ip!, {r0, r1, r2, r3}
  if (isFile()) {
    641a:	ands.w	r3, r8, #8
    if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    641e:	mov	r2, r7
    6420:	mov	r1, r5
  if (isFile()) {
    6422:	bne.w	655c <FatFile::rename(FatFile*, char const*)+0x1d8>
    if (!file.mkdir(dirFile, newPath, false)) {
    6426:	add	r0, sp, #32
    6428:	bl	5ef4 <FatFile::mkdir(FatFile*, char const*, bool)>
    642c:	cmp	r0, #0
    642e:	beq.n	63a6 <FatFile::rename(FatFile*, char const*)+0x22>
    dirCluster = file.m_firstCluster;
    6430:	ldr	r6, [sp, #64]	; 0x40
  m_dirIndex = file.m_dirIndex;
    6432:	ldrh.w	r3, [sp, #36]	; 0x24
  file.m_attributes = FILE_ATTR_CLOSED;
    6436:	movs	r5, #0
  m_dirSector = file.m_dirSector;
    6438:	ldr	r1, [sp, #56]	; 0x38
    643a:	movs	r2, #1
  m_dirIndex = file.m_dirIndex;
    643c:	strh	r3, [r4, #4]
  m_lfnOrd = file.m_lfnOrd;
    643e:	ldrb.w	r3, [sp, #35]	; 0x23
    6442:	ldr	r0, [r4, #8]
    6444:	strb	r3, [r4, #3]
  m_dirCluster = file.m_dirCluster;
    6446:	ldr	r3, [sp, #44]	; 0x2c
    6448:	adds	r0, #36	; 0x24
  m_dirSector = file.m_dirSector;
    644a:	str	r1, [r4, #24]
  m_dirCluster = file.m_dirCluster;
    644c:	str	r3, [r4, #12]
  file.m_attributes = FILE_ATTR_CLOSED;
    644e:	strb.w	r5, [sp, #32]
  file.m_flags = 0;
    6452:	strb.w	r5, [sp, #34]	; 0x22
    6456:	bl	3278 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    645a:	cmp	r0, #0
    645c:	beq.n	63a6 <FatFile::rename(FatFile*, char const*)+0x22>
  return dir + (m_dirIndex & 0XF);
    645e:	ldrh	r3, [r4, #4]
    6460:	and.w	r3, r3, #15
    6464:	add.w	r0, r0, r3, lsl #5
  memcpy(&dir->createTimeMs, &entry.createTimeMs,
    6468:	ldr.w	r3, [sp, #13]
    646c:	str.w	r3, [r0, #13]
    6470:	ldr.w	r3, [sp, #17]
    6474:	str.w	r3, [r0, #17]
    6478:	ldr.w	r3, [sp, #21]
    647c:	str.w	r3, [r0, #21]
    6480:	ldr.w	r3, [sp, #25]
    6484:	str.w	r3, [r0, #25]
    6488:	ldrh.w	r3, [sp, #29]
    648c:	strh.w	r3, [r0, #29]
    6490:	ldrb.w	r3, [sp, #31]
    6494:	strb	r3, [r0, #31]
  dir->attributes = entry.attributes;
    6496:	ldrb.w	r3, [sp, #11]
    649a:	strb	r3, [r0, #11]
  if (dirCluster) {
    649c:	cmp	r6, #0
    649e:	beq.n	6518 <FatFile::rename(FatFile*, char const*)+0x194>
    uint32_t sector = m_vol->clusterStartSector(dirCluster);
    64a0:	ldr	r0, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    64a2:	subs	r3, r6, #2
    return m_cache.prepare(sector, options);
    64a4:	mov	r2, r5
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    64a6:	ldrb	r1, [r0, #6]
    return m_cache.prepare(sector, options);
    64a8:	adds	r0, #36	; 0x24
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    64aa:	lsls	r3, r1
    64ac:	ldr.w	r1, [r0, #-16]
    return m_cache.prepare(sector, options);
    64b0:	add	r1, r3
    64b2:	bl	3278 <FsCache::prepare(unsigned long, unsigned char)>
    if (!dir) {
    64b6:	mov	r5, r0
    64b8:	cmp	r0, #0
    64ba:	beq.w	63a6 <FatFile::rename(FatFile*, char const*)+0x22>
    memcpy(&entry, &dir[1], sizeof(entry));
    64be:	ldr	r0, [r0, #32]
    64c0:	mov	r7, sp
    64c2:	ldr	r1, [r5, #36]	; 0x24
    64c4:	ldr	r2, [r5, #40]	; 0x28
    64c6:	ldr	r3, [r5, #44]	; 0x2c
    64c8:	stmia	r7!, {r0, r1, r2, r3}
    64ca:	ldr	r0, [r5, #48]	; 0x30
    64cc:	ldr	r1, [r5, #52]	; 0x34
    64ce:	ldr	r2, [r5, #56]	; 0x38
    64d0:	ldr	r3, [r5, #60]	; 0x3c
    64d2:	stmia	r7!, {r0, r1, r2, r3}
    if (!m_vol->freeChain(dirCluster)) {
    64d4:	mov	r1, r6
    64d6:	ldr	r0, [r4, #8]
    64d8:	bl	6d44 <FatPartition::freeChain(unsigned long)>
    64dc:	cmp	r0, #0
    64de:	beq.w	63a6 <FatFile::rename(FatFile*, char const*)+0x22>
    sector = m_vol->clusterStartSector(m_firstCluster);
    64e2:	ldr	r0, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    64e4:	ldr	r3, [r4, #32]
    64e6:	ldrb	r2, [r0, #6]
    return m_cache.prepare(sector, options);
    64e8:	adds	r0, #36	; 0x24
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    64ea:	subs	r3, #2
    64ec:	ldr.w	r1, [r0, #-16]
    64f0:	lsls	r3, r2
    return m_cache.prepare(sector, options);
    64f2:	movs	r2, #1
    64f4:	add	r1, r3
    64f6:	bl	3278 <FsCache::prepare(unsigned long, unsigned char)>
    if (!dir) {
    64fa:	mov	r6, r0
    64fc:	cmp	r0, #0
    64fe:	beq.w	63a6 <FatFile::rename(FatFile*, char const*)+0x22>
    memcpy(&dir[1], &entry, sizeof(entry));
    6502:	mov	r5, sp
    6504:	ldmia	r5!, {r0, r1, r2, r3}
    6506:	str	r0, [r6, #32]
    6508:	str	r1, [r6, #36]	; 0x24
    650a:	str	r2, [r6, #40]	; 0x28
    650c:	str	r3, [r6, #44]	; 0x2c
    650e:	ldmia	r5!, {r0, r1, r2, r3}
    6510:	str	r0, [r6, #48]	; 0x30
    6512:	str	r1, [r6, #52]	; 0x34
    6514:	str	r2, [r6, #56]	; 0x38
    6516:	str	r3, [r6, #60]	; 0x3c
  oldFile.m_firstCluster = 0;
    6518:	movs	r1, #0
  oldFile.m_flags = FILE_FLAG_WRITE;
    651a:	movs	r2, #2
  oldFile.m_attributes = FILE_ATTR_FILE;
    651c:	movs	r3, #8
  if (!oldFile.remove()) {
    651e:	add	r0, sp, #68	; 0x44
  oldFile.m_firstCluster = 0;
    6520:	str	r1, [sp, #100]	; 0x64
  oldFile.m_flags = FILE_FLAG_WRITE;
    6522:	strb.w	r2, [sp, #70]	; 0x46
  oldFile.m_attributes = FILE_ATTR_FILE;
    6526:	strb.w	r3, [sp, #68]	; 0x44
  if (!oldFile.remove()) {
    652a:	bl	7694 <FatFile::remove()>
    652e:	cmp	r0, #0
    6530:	beq.w	63a6 <FatFile::rename(FatFile*, char const*)+0x22>
  return m_vol->cacheSync();
    6534:	ldr	r4, [r4, #8]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    6536:	add.w	r0, r4, #36	; 0x24
    653a:	bl	3220 <FsCache::sync()>
    653e:	cmp	r0, #0
    6540:	beq.w	63a6 <FatFile::rename(FatFile*, char const*)+0x22>
    6544:	add.w	r0, r4, #564	; 0x234
    6548:	bl	3220 <FsCache::sync()>
    654c:	cmp	r0, #0
    654e:	beq.w	63a6 <FatFile::rename(FatFile*, char const*)+0x22>
    6552:	ldr	r0, [r4, #0]
  bool syncDevice() { return m_blockDev->syncDevice(); }
    6554:	ldr	r3, [r0, #0]
    6556:	ldr	r3, [r3, #28]
    6558:	blx	r3
    655a:	b.n	63a8 <FatFile::rename(FatFile*, char const*)+0x24>
    if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    655c:	movw	r3, #2561	; 0xa01
    6560:	mov	r0, ip
    6562:	bl	5fd8 <FatFile::open(FatFile*, char const*, int)>
    6566:	cmp	r0, #0
    6568:	bne.w	6432 <FatFile::rename(FatFile*, char const*)+0xae>
    656c:	b.n	63a6 <FatFile::rename(FatFile*, char const*)+0x22>
    656e:	nop

00006570 <FatFile::rmdir()>:
  if (!isSubDir() || (!USE_LONG_FILE_NAMES && isLFN())) {
    6570:	ldrb	r3, [r0, #0]
    6572:	lsls	r2, r3, #27
    6574:	bmi.n	657a <FatFile::rmdir()+0xa>
}
    6576:	movs	r0, #0
    6578:	bx	lr
  if (pos == m_curPosition) {
    657a:	ldr	r3, [r0, #20]
bool FatFile::rmdir() {
    657c:	push	{r4, r5, lr}
    657e:	mov	r4, r0
    6580:	sub	sp, #12
  if (pos == m_curPosition) {
    6582:	cbz	r3, 6592 <FatFile::rmdir()+0x22>
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    6584:	ldrb	r3, [r0, #2]
    m_curCluster = 0;
    6586:	movs	r2, #0
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    6588:	bic.w	r3, r3, #32
  m_curPosition = pos;
    658c:	strd	r2, r2, [r0, #16]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    6590:	strb	r3, [r0, #2]
bool FatFile::rmdir() {
    6592:	movs	r3, #0
    6594:	b.n	65b6 <FatFile::rmdir()+0x46>
    m_curPosition += FS_DIR_SIZE;
    6596:	str	r3, [r4, #20]
    6598:	ldr	r3, [r4, #8]
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    659a:	lsls	r2, r5, #5
    659c:	adds	r3, #52	; 0x34
    if (dir->name[0] == FAT_NAME_FREE) {
    659e:	ldrb	r2, [r3, r2]
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    65a0:	add.w	r3, r3, r5, lsl #5
    if (dir->name[0] == FAT_NAME_FREE) {
    65a4:	cbz	r2, 65e2 <FatFile::rmdir()+0x72>
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    65a6:	cmp	r2, #229	; 0xe5
    65a8:	beq.n	65b4 <FatFile::rmdir()+0x44>
    65aa:	cmp	r2, #46	; 0x2e
    65ac:	beq.n	65b4 <FatFile::rmdir()+0x44>
    if (isFatFileOrSubdir(dir)) {
    65ae:	ldrb	r3, [r3, #11]
    65b0:	lsls	r3, r3, #28
    65b2:	bpl.n	65fa <FatFile::rmdir()+0x8a>
  uint8_t i = (m_curPosition >> 5) & 0XF;
    65b4:	ldr	r3, [r4, #20]
  if (i == 0 || !skipReadOk) {
    65b6:	tst.w	r3, #480	; 0x1e0
  uint8_t i = (m_curPosition >> 5) & 0XF;
    65ba:	ubfx	r5, r3, #5, #4
    m_curPosition += FS_DIR_SIZE;
    65be:	add.w	r3, r3, #32
  if (i == 0 || !skipReadOk) {
    65c2:	bne.n	6596 <FatFile::rmdir()+0x26>
    int8_t n = read(&n, 1);
    65c4:	movs	r2, #1
    65c6:	add.w	r1, sp, #7
    65ca:	mov	r0, r4
    65cc:	bl	6170 <FatFile::read(void*, unsigned int)>
    if (n != 1) {
    65d0:	sxtb	r0, r0
    65d2:	cmp	r0, #1
    65d4:	bne.n	65de <FatFile::rmdir()+0x6e>
    m_curPosition += FS_DIR_SIZE - 1;
    65d6:	ldr	r3, [r4, #20]
    65d8:	adds	r3, #31
    65da:	str	r3, [r4, #20]
    65dc:	b.n	6598 <FatFile::rmdir()+0x28>
      if (!getError()) {
    65de:	ldrb	r3, [r4, #1]
    65e0:	cbnz	r3, 65fa <FatFile::rmdir()+0x8a>
  m_flags |= FILE_FLAG_WRITE;
    65e2:	ldrb	r3, [r4, #2]
  m_attributes = FILE_ATTR_FILE;
    65e4:	movs	r2, #8
  return remove();
    65e6:	mov	r0, r4
  m_flags |= FILE_FLAG_WRITE;
    65e8:	orr.w	r3, r3, #2
  m_attributes = FILE_ATTR_FILE;
    65ec:	strb	r2, [r4, #0]
  m_flags |= FILE_FLAG_WRITE;
    65ee:	strb	r3, [r4, #2]
}
    65f0:	add	sp, #12
    65f2:	ldmia.w	sp!, {r4, r5, lr}
  return remove();
    65f6:	b.w	7694 <FatFile::remove()>
}
    65fa:	movs	r0, #0
    65fc:	add	sp, #12
    65fe:	pop	{r4, r5, pc}

00006600 <FatFile::seekSet(unsigned long)>:
bool FatFile::seekSet(uint32_t pos) {
    6600:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  bool isOpen() const { return m_attributes; }
    6604:	ldrb	r3, [r0, #0]
    6606:	mov	r4, r0
  uint32_t tmp = m_curCluster;
    6608:	ldr	r7, [r0, #16]
  if (!isOpen()) {
    660a:	cmp	r3, #0
    660c:	beq.n	6682 <FatFile::seekSet(unsigned long)+0x82>
    660e:	mov	r5, r1
  if (pos == m_curPosition) {
    6610:	ldr	r1, [r0, #20]
    6612:	cmp	r1, r5
    6614:	beq.n	669c <FatFile::seekSet(unsigned long)+0x9c>
  if (pos == 0) {
    6616:	cmp	r5, #0
    6618:	beq.n	668a <FatFile::seekSet(unsigned long)+0x8a>
  if (isFile()) {
    661a:	lsls	r0, r3, #28
    661c:	bpl.n	6674 <FatFile::seekSet(unsigned long)+0x74>
    if (pos > m_fileSize) {
    661e:	ldr	r2, [r4, #28]
    6620:	cmp	r2, r5
    6622:	bcc.n	6682 <FatFile::seekSet(unsigned long)+0x82>
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    6624:	ldr.w	ip, [r4, #8]
    6628:	subs	r6, r5, #1
  bool isContiguous() const { return m_flags & FILE_FLAG_CONTIGUOUS; }
    662a:	ldrb	r2, [r4, #2]
    return m_sectorsPerClusterShift + m_bytesPerSectorShift;
    662c:	ldrb.w	r0, [ip, #6]
  if (isContiguous()) {
    6630:	tst.w	r2, #64	; 0x40
    6634:	add.w	r0, r0, #9
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    6638:	uxtb	r0, r0
    663a:	lsr.w	r6, r6, r0
  if (isContiguous()) {
    663e:	bne.n	66a2 <FatFile::seekSet(unsigned long)+0xa2>
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());
    6640:	subs	r2, r1, #1
    6642:	lsrs	r2, r0
  if (nNew < nCur || m_curPosition == 0) {
    6644:	cbz	r1, 664a <FatFile::seekSet(unsigned long)+0x4a>
    6646:	cmp	r6, r2
    6648:	bcs.n	66aa <FatFile::seekSet(unsigned long)+0xaa>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    664a:	lsls	r3, r3, #24
  uint32_t rootDirStart() const { return m_rootDirStart; }
    664c:	ite	mi
    664e:	ldrmi.w	r3, [ip, #32]
    6652:	ldrpl	r3, [r4, #32]
    6654:	str	r3, [r4, #16]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    6656:	add.w	r8, r4, #16
    665a:	b.n	666a <FatFile::seekSet(unsigned long)+0x6a>
    665c:	ldr	r1, [r4, #16]
    665e:	subs	r6, #1
    6660:	ldr	r0, [r4, #8]
    6662:	bl	6c38 <FatPartition::fatGet(unsigned long, unsigned long*)>
    6666:	cmp	r0, #0
    6668:	ble.n	6682 <FatFile::seekSet(unsigned long)+0x82>
    666a:	mov	r2, r8
  while (nNew--) {
    666c:	cmp	r6, #0
    666e:	bne.n	665c <FatFile::seekSet(unsigned long)+0x5c>
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    6670:	ldrb	r2, [r4, #2]
    6672:	b.n	668e <FatFile::seekSet(unsigned long)+0x8e>
  } else if (isRootFixed()) {
    6674:	lsls	r2, r3, #25
    6676:	bpl.n	6624 <FatFile::seekSet(unsigned long)+0x24>
  uint16_t rootDirEntryCount() const { return m_rootDirEntryCount; }
    6678:	ldr	r3, [r4, #8]
    if (pos <= FS_DIR_SIZE * m_vol->rootDirEntryCount()) {
    667a:	ldrh	r3, [r3, #8]
    667c:	cmp.w	r5, r3, lsl #5
    6680:	bls.n	6670 <FatFile::seekSet(unsigned long)+0x70>
  return false;
    6682:	movs	r0, #0
  m_curCluster = tmp;
    6684:	str	r7, [r4, #16]
}
    6686:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    668a:	ldrb	r2, [r0, #2]
    m_curCluster = 0;
    668c:	str	r5, [r0, #16]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    668e:	bic.w	r2, r2, #32
  return true;
    6692:	movs	r0, #1
  m_curPosition = pos;
    6694:	str	r5, [r4, #20]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    6696:	strb	r2, [r4, #2]
}
    6698:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return true;
    669c:	movs	r0, #1
}
    669e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_curCluster = m_firstCluster + nNew;
    66a2:	ldr	r3, [r4, #32]
    66a4:	add	r3, r6
    66a6:	str	r3, [r4, #16]
    goto done;
    66a8:	b.n	668e <FatFile::seekSet(unsigned long)+0x8e>
    nNew -= nCur;
    66aa:	subs	r6, r6, r2
    66ac:	b.n	6656 <FatFile::seekSet(unsigned long)+0x56>
    66ae:	nop

000066b0 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>:
                              oflag_t oflag, uint8_t lfnOrd) {
    66b0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    66b4:	mov	r6, r1
    66b6:	mov	r5, r2
  memset(this, 0, sizeof(FatFile));
    66b8:	movs	r1, #0
    66ba:	movs	r2, #36	; 0x24
                              oflag_t oflag, uint8_t lfnOrd) {
    66bc:	mov	r4, r0
    66be:	mov	r8, r3
    66c0:	ldrb.w	r7, [sp, #24]
  memset(this, 0, sizeof(FatFile));
    66c4:	bl	e110 <memset>
  m_vol = dirFile->m_vol;
    66c8:	ldr	r0, [r6, #8]
  m_dirCluster = dirFile->m_firstCluster;
    66ca:	ldr	r3, [r6, #32]
    66cc:	add.w	r2, r0, #52	; 0x34
  m_dirIndex = dirIndex;
    66d0:	strh	r5, [r4, #4]
  dir += 0XF & dirIndex;
    66d2:	and.w	r5, r5, #15
    66d6:	add.w	r2, r2, r5, lsl #5
  m_vol = dirFile->m_vol;
    66da:	strd	r0, r3, [r4, #8]
  return (dir->attributes & FAT_ATTRIB_LABEL) == 0;
    66de:	ldrb	r1, [r2, #11]
  if (!isFatFileOrSubdir(dir)) {
    66e0:	lsls	r3, r1, #28
    66e2:	bmi.n	6708 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
  m_attributes = dir->attributes & FS_ATTRIB_COPY;
    66e4:	and.w	r1, r1, #55	; 0x37
    66e8:	strb	r1, [r4, #0]
  if (isFatFile(dir)) {
    66ea:	ldrb	r3, [r2, #11]
    66ec:	tst.w	r3, #24
    66f0:	bne.n	66f8 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x48>
    m_attributes |= FILE_ATTR_FILE;
    66f2:	orr.w	r1, r1, #8
    66f6:	strb	r1, [r4, #0]
  switch (oflag & O_ACCMODE) {
    66f8:	and.w	r3, r8, #3
  m_lfnOrd = lfnOrd;
    66fc:	strb	r7, [r4, #3]
  switch (oflag & O_ACCMODE) {
    66fe:	cmp	r3, #1
    6700:	beq.n	677c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xcc>
    6702:	cmp	r3, #2
    6704:	beq.n	6714 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x64>
    6706:	cbz	r3, 674e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x9e>
  m_attributes = FILE_ATTR_CLOSED;
    6708:	movs	r3, #0
  return false;
    670a:	mov	r0, r3
  m_attributes = FILE_ATTR_CLOSED;
    670c:	strb	r3, [r4, #0]
  m_flags = 0;
    670e:	strb	r3, [r4, #2]
}
    6710:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (oflag & O_ACCMODE) {
    6714:	movs	r3, #3
  bool isSubDir() const { return m_attributes & FILE_ATTR_SUBDIR; }
    6716:	ldrb	r1, [r4, #0]
      m_flags = FILE_FLAG_WRITE;
    6718:	strb	r3, [r4, #2]
    if (isSubDir() || isReadOnly()) {
    671a:	lsls	r5, r1, #27
    671c:	bmi.n	6708 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
    671e:	lsls	r6, r1, #31
    6720:	bmi.n	6708 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
    m_attributes |= FS_ATTRIB_ARCHIVE;
    6722:	orr.w	r1, r1, #32
  if (oflag & O_TRUNC) {
    6726:	tst.w	r8, #1024	; 0x400
    m_attributes |= FS_ATTRIB_ARCHIVE;
    672a:	strb	r1, [r4, #0]
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    672c:	and.w	r1, r8, #8
    6730:	orr.w	r3, r3, r1
    6734:	strb	r3, [r4, #2]
  uint32_t sector() { return m_sector; }
    6736:	ldr	r1, [r0, #44]	; 0x2c
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16) |
    6738:	ldrh	r5, [r2, #20]
  m_dirSector = m_vol->cacheSectorNumber();
    673a:	str	r1, [r4, #24]
                 getLe16(dir->firstClusterLow);
    673c:	ldrh	r1, [r2, #26]
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16) |
    673e:	orr.w	r1, r1, r5, lsl #16
  if (oflag & O_TRUNC) {
    6742:	beq.n	676a <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xba>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    6744:	cbnz	r1, 678e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xde>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    6746:	orn	r3, r3, #127	; 0x7f
    674a:	strb	r3, [r4, #2]
    674c:	b.n	6770 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xc0>
      if (oflag & O_TRUNC) {
    674e:	tst.w	r8, #1024	; 0x400
    6752:	bne.n	6708 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    6754:	and.w	r3, r8, #8
    6758:	orr.w	r3, r3, #1
    675c:	strb	r3, [r4, #2]
    675e:	ldr	r1, [r0, #44]	; 0x2c
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16) |
    6760:	ldrh	r3, [r2, #20]
  m_dirSector = m_vol->cacheSectorNumber();
    6762:	str	r1, [r4, #24]
                 getLe16(dir->firstClusterLow);
    6764:	ldrh	r1, [r2, #26]
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16) |
    6766:	orr.w	r1, r1, r3, lsl #16
    m_firstCluster = firstCluster;
    676a:	str	r1, [r4, #32]
  return *reinterpret_cast<const uint32_t*>(src);
    676c:	ldr	r3, [r2, #28]
    m_fileSize = getLe32(dir->fileSize);
    676e:	str	r3, [r4, #28]
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    6770:	tst.w	r8, #16384	; 0x4000
    6774:	bne.n	6780 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xd0>
  return true;
    6776:	movs	r0, #1
}
    6778:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (oflag & O_ACCMODE) {
    677c:	movs	r3, #2
    677e:	b.n	6716 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x66>
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    6780:	ldr	r1, [r4, #28]
    6782:	mov	r0, r4
    6784:	bl	6600 <FatFile::seekSet(unsigned long)>
    6788:	cmp	r0, #0
    678a:	bne.n	6776 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xc6>
    678c:	b.n	6708 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    678e:	bl	6d44 <FatPartition::freeChain(unsigned long)>
    6792:	cmp	r0, #0
    6794:	beq.n	6708 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    6796:	ldrb	r3, [r4, #2]
    6798:	b.n	6746 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x96>
    679a:	nop

0000679c <FatFile::openNext(FatFile*, int)>:
  bool isOpen() const { return m_attributes; }
    679c:	ldrb	r3, [r0, #0]
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    679e:	cmp	r3, #0
    67a0:	bne.n	682e <FatFile::openNext(FatFile*, int)+0x92>
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
    67a2:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    67a6:	ldrb	r3, [r1, #0]
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
    67a8:	sub	sp, #16
    67aa:	mov	r4, r1
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    67ac:	tst.w	r3, #208	; 0xd0
    67b0:	beq.n	6814 <FatFile::openNext(FatFile*, int)+0x78>
  uint32_t curPosition() const { return m_curPosition; }
    67b2:	ldr	r3, [r1, #20]
    67b4:	ands.w	r5, r3, #31
    67b8:	bne.n	6814 <FatFile::openNext(FatFile*, int)+0x78>
    67ba:	mov	r6, r0
    67bc:	mov	r8, r2
    67be:	mov	r9, r5
    int8_t n = read(&n, 1);
    67c0:	movs	r2, #1
    67c2:	add.w	r1, sp, #15
    67c6:	mov	r0, r4
  uint8_t i = (m_curPosition >> 5) & 0XF;
    67c8:	ubfx	sl, r3, #5, #4
    index = dirFile->curPosition() / FS_DIR_SIZE;
    67cc:	lsrs	r7, r3, #5
    int8_t n = read(&n, 1);
    67ce:	bl	6170 <FatFile::read(void*, unsigned int)>
    if (n != 1) {
    67d2:	sxtb	r0, r0
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    67d4:	mov.w	r2, sl, lsl #5
    if (n != 1) {
    67d8:	cmp	r0, #1
    67da:	bne.n	6814 <FatFile::openNext(FatFile*, int)+0x78>
    m_curPosition += FS_DIR_SIZE - 1;
    67dc:	ldr	r3, [r4, #20]
  uint8_t* cacheBuffer() { return m_buffer; }
    67de:	ldr	r1, [r4, #8]
    67e0:	adds	r3, #31
    67e2:	add.w	ip, r1, #52	; 0x34
    67e6:	str	r3, [r4, #20]
    if (dir->name[0] == FAT_NAME_FREE) {
    67e8:	ldrb.w	r2, [ip, r2]
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    67ec:	add.w	ip, ip, sl, lsl #5
    if (dir->name[0] == FAT_NAME_FREE) {
    67f0:	cbz	r2, 6814 <FatFile::openNext(FatFile*, int)+0x78>
    if (dir->name[0] == '.' || dir->name[0] == FAT_NAME_DELETED) {
    67f2:	cmp	r2, #46	; 0x2e
    67f4:	beq.n	681c <FatFile::openNext(FatFile*, int)+0x80>
    67f6:	sub.w	r0, r2, #229	; 0xe5
    67fa:	clz	r0, r0
    67fe:	lsrs	r0, r0, #5
    6800:	cbnz	r0, 681c <FatFile::openNext(FatFile*, int)+0x80>
  return (dir->attributes & FAT_ATTRIB_LABEL) == 0;
    6802:	ldrb.w	r1, [ip, #11]
    } else if (isFatFileOrSubdir(dir)) {
    6806:	ands.w	lr, r1, #8
    680a:	beq.n	6832 <FatFile::openNext(FatFile*, int)+0x96>
    } else if (isFatLongName(dir)) {
    680c:	cmp	r1, #15
    680e:	beq.n	6820 <FatFile::openNext(FatFile*, int)+0x84>
      lfnOrd = 0;
    6810:	mov	r5, r0
    6812:	b.n	67c0 <FatFile::openNext(FatFile*, int)+0x24>
  return false;
    6814:	movs	r0, #0
}
    6816:	add	sp, #16
    6818:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      lfnOrd = 0;
    681c:	movs	r5, #0
    681e:	b.n	67c0 <FatFile::openNext(FatFile*, int)+0x24>
      if (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) {
    6820:	lsls	r1, r2, #25
    6822:	bpl.n	67c0 <FatFile::openNext(FatFile*, int)+0x24>
        lfnOrd = ldir->order & 0X1F;
    6824:	and.w	r5, r2, #31
        checksum = ldir->checksum;
    6828:	ldrb.w	r9, [ip, #13]
    682c:	b.n	67c0 <FatFile::openNext(FatFile*, int)+0x24>
  return false;
    682e:	movs	r0, #0
}
    6830:	bx	lr
      if (lfnOrd && checksum != lfnChecksum(dir->name)) {
    6832:	cbz	r5, 6856 <FatFile::openNext(FatFile*, int)+0xba>
  bool cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  bool createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  uint16_t getLfnChar(DirLfn_t* ldir, uint8_t i);
  uint8_t lfnChecksum(const uint8_t* name) {
    uint8_t sum = 0;
    for (uint8_t i = 0; i < 11; i++) {
    6834:	add.w	r1, ip, #10
    6838:	b.n	683e <FatFile::openNext(FatFile*, int)+0xa2>
      sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    683a:	ldrb.w	r2, [ip, #1]!
    683e:	mov.w	r3, lr, lsl #7
    for (uint8_t i = 0; i < 11; i++) {
    6842:	cmp	r1, ip
      sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    6844:	orr.w	r3, r3, lr, lsr #1
    6848:	uxtab	r3, r2, r3
    684c:	uxtb.w	lr, r3
    for (uint8_t i = 0; i < 11; i++) {
    6850:	bne.n	683a <FatFile::openNext(FatFile*, int)+0x9e>
    6852:	cmp	lr, r9
    6854:	bne.n	6814 <FatFile::openNext(FatFile*, int)+0x78>
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
    6856:	mov	r3, r8
    6858:	uxth	r2, r7
    685a:	mov	r1, r4
    685c:	mov	r0, r6
    685e:	str	r5, [sp, #0]
    6860:	bl	66b0 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    6864:	b.n	6816 <FatFile::openNext(FatFile*, int)+0x7a>
    6866:	nop

00006868 <FatFile::sync()>:
  if (!isOpen()) {
    6868:	ldrb	r3, [r0, #0]
    686a:	cbz	r3, 6870 <FatFile::sync()+0x8>
    686c:	b.w	5b4c <FatFile::sync() [clone .part.0]>
}
    6870:	movs	r0, #1
    6872:	bx	lr

00006874 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>:
//------------------------------------------------------------------------------
bool FatFile::timestamp(uint8_t flags, uint16_t year, uint8_t month,
                        uint8_t day, uint8_t hour, uint8_t minute,
                        uint8_t second) {
    6874:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6878:	mov	r6, r1
  uint16_t dirDate;
  uint16_t dirTime;
  DirFat_t* dir;

  if (!isFile() || year < 1980 || year > 2107 || month < 1 || month > 12 ||
      day < 1 || day > 31 || hour > 23 || minute > 59 || second > 59) {
    687a:	ldrb	r1, [r0, #0]
                        uint8_t second) {
    687c:	sub	sp, #8
      day < 1 || day > 31 || hour > 23 || minute > 59 || second > 59) {
    687e:	lsls	r1, r1, #28
                        uint8_t second) {
    6880:	ldrb.w	r7, [sp, #40]	; 0x28
    6884:	ldrb.w	r9, [sp, #44]	; 0x2c
    6888:	ldrb.w	sl, [sp, #48]	; 0x30
    688c:	ldrb.w	r8, [sp, #52]	; 0x34
      day < 1 || day > 31 || hour > 23 || minute > 59 || second > 59) {
    6890:	bpl.n	68c4 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
  if (!isFile() || year < 1980 || year > 2107 || month < 1 || month > 12 ||
    6892:	subw	r2, r2, #1980	; 0x7bc
    6896:	uxth	r4, r2
    6898:	cmp	r4, #127	; 0x7f
    689a:	bhi.n	68c4 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
    689c:	subs	r2, r3, #1
    689e:	str	r3, [sp, #4]
    68a0:	cmp	r2, #11
    68a2:	bhi.n	68c4 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
      day < 1 || day > 31 || hour > 23 || minute > 59 || second > 59) {
    68a4:	subs	r2, r7, #1
    68a6:	cmp	r2, #30
    68a8:	bhi.n	68c4 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
    68aa:	cmp.w	sl, #59	; 0x3b
    68ae:	it	ls
    68b0:	cmpls.w	r9, #23
    68b4:	bhi.n	68c4 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
    68b6:	cmp.w	r8, #59	; 0x3b
    68ba:	bhi.n	68c4 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // update directory entry
  if (!sync()) {
    68bc:	mov	r5, r0
  if (!isOpen()) {
    68be:	bl	5b4c <FatFile::sync() [clone .part.0]>
  if (!sync()) {
    68c2:	cbnz	r0, 68cc <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x58>
  }
  return m_vol->cacheSync();

fail:
  return false;
}
    68c4:	movs	r0, #0
    68c6:	add	sp, #8
    68c8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return m_cache.prepare(sector, options);
    68cc:	ldr	r0, [r5, #8]
    68ce:	movs	r2, #1
    68d0:	ldr	r1, [r5, #24]
    68d2:	adds	r0, #36	; 0x24
    68d4:	bl	3278 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    68d8:	cmp	r0, #0
    68da:	beq.n	68c4 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
                                              : year << 9 | month << 5 | day;
    68dc:	ldr	r3, [sp, #4]
             : hour << 11 | minute << 5 | second >> 1;
    68de:	mov.w	r2, r8, lsr #1
  return dir + (m_dirIndex & 0XF);
    68e2:	ldrh	r1, [r5, #4]
                                              : year << 9 | month << 5 | day;
    68e4:	orr.w	r3, r7, r3, lsl #5
  if (flags & T_ACCESS) {
    68e8:	lsls	r7, r6, #31
  return dir + (m_dirIndex & 0XF);
    68ea:	and.w	r1, r1, #15
             : hour << 11 | minute << 5 | second >> 1;
    68ee:	orr.w	r2, r2, sl, lsl #5
                                              : year << 9 | month << 5 | day;
    68f2:	orr.w	r3, r3, r4, lsl #9
    68f6:	add.w	r0, r0, r1, lsl #5
    68fa:	uxth	r3, r3
             : hour << 11 | minute << 5 | second >> 1;
    68fc:	orr.w	r2, r2, r9, lsl #11
  *reinterpret_cast<uint16_t*>(dst) = src;
    6900:	it	mi
    6902:	strhmi	r3, [r0, #18]
  if (flags & T_CREATE) {
    6904:	lsls	r4, r6, #30
    6906:	uxth	r2, r2
    6908:	bpl.n	691c <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xa8>
    dir->createTimeMs = second & 1 ? 100 : 0;
    690a:	ands.w	r8, r8, #1
    690e:	strh	r3, [r0, #16]
    6910:	strh	r2, [r0, #14]
    6912:	it	ne
    6914:	movne.w	r8, #100	; 0x64
    6918:	strb.w	r8, [r0, #13]
  if (flags & T_WRITE) {
    691c:	lsls	r1, r6, #29
    691e:	bpl.n	6924 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xb0>
    6920:	strh	r3, [r0, #24]
    6922:	strh	r2, [r0, #22]
  return m_vol->cacheSync();
    6924:	ldr	r4, [r5, #8]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    6926:	add.w	r0, r4, #36	; 0x24
    692a:	bl	3220 <FsCache::sync()>
    692e:	cmp	r0, #0
    6930:	beq.n	68c4 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
    6932:	add.w	r0, r4, #564	; 0x234
    6936:	bl	3220 <FsCache::sync()>
    693a:	cmp	r0, #0
    693c:	beq.n	68c4 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
    693e:	ldr	r0, [r4, #0]
  bool syncDevice() { return m_blockDev->syncDevice(); }
    6940:	ldr	r3, [r0, #0]
    6942:	ldr	r3, [r3, #28]
}
    6944:	add	sp, #8
    6946:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    694a:	bx	r3

0000694c <FatFile::truncate()>:
//------------------------------------------------------------------------------
bool FatFile::truncate() {
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    694c:	ldrb	r3, [r0, #2]
    694e:	lsls	r3, r3, #30
    6950:	bpl.n	69a2 <FatFile::truncate()+0x56>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    6952:	ldr	r3, [r0, #32]
bool FatFile::truncate() {
    6954:	push	{r4, lr}
    6956:	mov	r4, r0
    6958:	sub	sp, #8
  if (m_firstCluster == 0) {
    695a:	cbz	r3, 6988 <FatFile::truncate()+0x3c>
    return true;
  }
  if (m_curCluster) {
    695c:	ldr	r1, [r0, #16]
    695e:	cbnz	r1, 69a6 <FatFile::truncate()+0x5a>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  } else {
    toFree = m_firstCluster;
    6960:	str	r3, [sp, #4]
    m_firstCluster = 0;
    6962:	str	r1, [r0, #32]
  }
  if (toFree) {
    if (!m_vol->freeChain(toFree)) {
    6964:	mov	r1, r3
    6966:	ldr	r0, [r4, #8]
    6968:	bl	6d44 <FatPartition::freeChain(unsigned long)>
    696c:	cbz	r0, 699c <FatFile::truncate()+0x50>
    }
  }
  m_fileSize = m_curPosition;

  // need to update directory entry
  m_flags |= FILE_FLAG_DIR_DIRTY;
    696e:	ldrb	r3, [r4, #2]
  m_fileSize = m_curPosition;
    6970:	ldr	r1, [r4, #20]
  m_flags |= FILE_FLAG_DIR_DIRTY;
    6972:	orn	r3, r3, #127	; 0x7f
  if (!isOpen()) {
    6976:	ldrb	r2, [r4, #0]
  m_fileSize = m_curPosition;
    6978:	str	r1, [r4, #28]
  m_flags |= FILE_FLAG_DIR_DIRTY;
    697a:	strb	r3, [r4, #2]
  if (!isOpen()) {
    697c:	cbz	r2, 6988 <FatFile::truncate()+0x3c>
    697e:	mov	r0, r4
    6980:	bl	5b4c <FatFile::sync() [clone .part.0]>
  return sync();

fail:
  return false;
}
    6984:	add	sp, #8
    6986:	pop	{r4, pc}
    return true;
    6988:	movs	r0, #1
}
    698a:	add	sp, #8
    698c:	pop	{r4, pc}
  }
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) { return fatPut(cluster, 0x0FFFFFFF); }
    698e:	mvn.w	r2, #4026531840	; 0xf0000000
    6992:	ldr	r1, [r4, #16]
    6994:	ldr	r0, [r4, #8]
    6996:	bl	6c5c <FatPartition::fatPut(unsigned long, unsigned long)>
      if (!m_vol->fatPutEOC(m_curCluster)) {
    699a:	cbnz	r0, 69b8 <FatFile::truncate()+0x6c>
  return false;
    699c:	movs	r0, #0
}
    699e:	add	sp, #8
    69a0:	pop	{r4, pc}
  return false;
    69a2:	movs	r0, #0
}
    69a4:	bx	lr
    toFree = 0;
    69a6:	movs	r3, #0
    int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    69a8:	add	r2, sp, #4
    69aa:	ldr	r0, [r0, #8]
    toFree = 0;
    69ac:	str	r3, [sp, #4]
    int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    69ae:	bl	6c38 <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    69b2:	cmp	r0, #0
    69b4:	blt.n	699c <FatFile::truncate()+0x50>
    if (fg) {
    69b6:	bne.n	698e <FatFile::truncate()+0x42>
  if (toFree) {
    69b8:	ldr	r3, [sp, #4]
    69ba:	cmp	r3, #0
    69bc:	beq.n	696e <FatFile::truncate()+0x22>
    69be:	b.n	6964 <FatFile::truncate()+0x18>

000069c0 <FatFile::write(void const*, unsigned int)>:
//------------------------------------------------------------------------------
size_t FatFile::write(const void* buf, size_t nbyte) {
    69c0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  bool isWritable() const { return m_flags & FILE_FLAG_WRITE; }
    69c4:	ldrb	r3, [r0, #2]
    69c6:	mov	r5, r0
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isWritable()) {
    69c8:	lsls	r4, r3, #30
    69ca:	bpl.n	6abc <FatFile::write(void const*, unsigned int)+0xfc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    69cc:	mov	r8, r1
    69ce:	lsls	r1, r3, #28
    69d0:	mov	r9, r2
    69d2:	bmi.w	6b40 <FatFile::write(void const*, unsigned int)+0x180>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    69d6:	ldr	r3, [r5, #20]
    69d8:	adds.w	r2, r3, r9
    69dc:	bcs.n	6abc <FatFile::write(void const*, unsigned int)+0xfc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    69de:	cmp.w	r9, #0
    69e2:	beq.n	6a66 <FatFile::write(void const*, unsigned int)+0xa6>
    69e4:	mov	r7, r9
    m_status = 0;
    69e6:	mov.w	sl, #0
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    69ea:	ldr	r0, [r5, #8]
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    69ec:	ubfx	r6, r3, #0, #9
    if (sectorOfCluster == 0 && sectorOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
    69f0:	ldr	r1, [r5, #16]
    return (position >> 9) & m_clusterSectorMask;
    69f2:	ldrb	r4, [r0, #5]
    if (sectorOfCluster == 0 && sectorOffset == 0) {
    69f4:	ands.w	r4, r4, r3, lsr #9
    69f8:	bne.n	6a7a <FatFile::write(void const*, unsigned int)+0xba>
    69fa:	cmp	r6, #0
    69fc:	bne.n	6a7a <FatFile::write(void const*, unsigned int)+0xba>
      if (m_curCluster != 0) {
    69fe:	cmp	r1, #0
    6a00:	beq.n	6ae0 <FatFile::write(void const*, unsigned int)+0x120>
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
    6a02:	ldrb	r2, [r5, #2]
    6a04:	lsls	r2, r2, #25
    6a06:	bpl.n	6af6 <FatFile::write(void const*, unsigned int)+0x136>
    6a08:	ldr	r2, [r5, #28]
    6a0a:	cmp	r2, r3
    6a0c:	bls.n	6af6 <FatFile::write(void const*, unsigned int)+0x136>
          m_curCluster++;
    6a0e:	adds	r1, #1
    6a10:	str	r1, [r5, #16]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    6a12:	subs	r1, #2
    6a14:	ldrb	r2, [r0, #6]
    6a16:	ldr	r3, [r0, #20]
    6a18:	lsls	r1, r2
    6a1a:	add	r1, r3
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    6a1c:	cmp.w	r7, #512	; 0x200
    6a20:	bcc.n	6aca <FatFile::write(void const*, unsigned int)+0x10a>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (nToWrite >= 2 * m_vol->bytesPerSector()) {
    6a22:	cmp.w	r7, #1024	; 0x400
    6a26:	bcc.n	6b0a <FatFile::write(void const*, unsigned int)+0x14a>
      // use multiple sector write command
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
    6a28:	ldrb	r3, [r0, #4]
      uint32_t nSector = nToWrite >> m_vol->bytesPerSectorShift();
    6a2a:	lsrs	r2, r7, #9
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
    6a2c:	subs	r3, r3, r4
    6a2e:	cmp	r3, r2
    6a30:	it	cs
    6a32:	movcs	r3, r2
    return sector <= m_sector && m_sector < (sector + count);
    6a34:	ldr	r2, [r0, #44]	; 0x2c
    6a36:	cmp	r2, r1
      if (nSector > maxSectors) {
        nSector = maxSectors;
      }
      n = nSector << m_vol->bytesPerSectorShift();
    6a38:	mov.w	r4, r3, lsl #9
    6a3c:	bcc.n	6a4e <FatFile::write(void const*, unsigned int)+0x8e>
    6a3e:	adds	r6, r3, r1
    6a40:	cmp	r2, r6
    6a42:	bcs.n	6a4e <FatFile::write(void const*, unsigned int)+0x8e>
    m_sector = 0XFFFFFFFF;
    6a44:	mov.w	r2, #4294967295
    m_status = 0;
    6a48:	strb.w	sl, [r0, #36]	; 0x24
    m_sector = 0XFFFFFFFF;
    6a4c:	str	r2, [r0, #44]	; 0x2c
    return m_blockDev->writeSectors(sector, src, count);
    6a4e:	ldr	r0, [r0, #40]	; 0x28
    6a50:	mov	r2, r8
    6a52:	ldr	r6, [r0, #0]
    6a54:	ldr	r6, [r6, #36]	; 0x24
    6a56:	blx	r6
      if (!m_vol->cacheSafeWrite(sector, src, nSector)) {
    6a58:	cbz	r0, 6abc <FatFile::write(void const*, unsigned int)+0xfc>
      if (!m_vol->cacheSafeWrite(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    6a5a:	ldr	r3, [r5, #20]
  while (nToWrite) {
    6a5c:	subs	r7, r7, r4
    src += n;
    6a5e:	add	r8, r4
    m_curPosition += n;
    6a60:	add	r3, r4
    6a62:	str	r3, [r5, #20]
  while (nToWrite) {
    6a64:	bne.n	69ea <FatFile::write(void const*, unsigned int)+0x2a>
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    6a66:	ldr	r2, [r5, #28]
    6a68:	cmp	r2, r3
    6a6a:	bcs.n	6b5a <FatFile::write(void const*, unsigned int)+0x19a>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    m_flags |= FILE_FLAG_DIR_DIRTY;
    6a6c:	ldrb	r2, [r5, #2]
    6a6e:	mov	r0, r9
    m_fileSize = m_curPosition;
    6a70:	str	r3, [r5, #28]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    6a72:	orn	r3, r2, #127	; 0x7f
    6a76:	strb	r3, [r5, #2]
    6a78:	b.n	6ac6 <FatFile::write(void const*, unsigned int)+0x106>
    6a7a:	ldrb	r2, [r0, #6]
    6a7c:	subs	r1, #2
    6a7e:	ldr	r3, [r0, #20]
    6a80:	lsls	r1, r2
    6a82:	add	r1, r3
    uint32_t sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    6a84:	add	r1, r4
    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    6a86:	cmp	r6, #0
    6a88:	beq.n	6a1c <FatFile::write(void const*, unsigned int)+0x5c>
      n = m_vol->bytesPerSector() - sectorOffset;
    6a8a:	rsb	r4, r6, #512	; 0x200
        cacheOption = FsCache::CACHE_FOR_WRITE;
    6a8e:	movs	r2, #1
    6a90:	cmp	r4, r7
    6a92:	it	cs
    6a94:	movcs	r4, r7
    return m_cache.prepare(sector, options);
    6a96:	adds	r0, #36	; 0x24
    6a98:	bl	3278 <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    6a9c:	cbz	r0, 6abc <FatFile::write(void const*, unsigned int)+0xfc>
      memcpy(dst, src, n);
    6a9e:	add	r0, r6
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    6aa0:	add	r6, r4
      memcpy(dst, src, n);
    6aa2:	mov	r2, r4
    6aa4:	mov	r1, r8
    6aa6:	bl	a170 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    6aaa:	cmp.w	r6, #512	; 0x200
    6aae:	ldr	r0, [r5, #8]
    6ab0:	bne.n	6a5a <FatFile::write(void const*, unsigned int)+0x9a>
  bool cacheSyncData() { return m_cache.sync(); }
    6ab2:	adds	r0, #36	; 0x24
    6ab4:	bl	3220 <FsCache::sync()>
        if (!m_vol->cacheSyncData()) {
    6ab8:	cmp	r0, #0
    6aba:	bne.n	6a5a <FatFile::write(void const*, unsigned int)+0x9a>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
    6abc:	ldrb	r3, [r5, #1]
  return 0;
    6abe:	movs	r0, #0
  m_error |= WRITE_ERROR;
    6ac0:	orr.w	r3, r3, #1
    6ac4:	strb	r3, [r5, #1]
}
    6ac6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      n = m_vol->bytesPerSector() - sectorOffset;
    6aca:	rsb	r4, r6, #512	; 0x200
      if (sectorOffset == 0 &&
    6ace:	ldr	r2, [r5, #20]
    6ad0:	ldr	r3, [r5, #28]
    6ad2:	cmp	r4, r7
    6ad4:	it	cs
    6ad6:	movcs	r4, r7
    6ad8:	cmp	r2, r3
    6ada:	bcc.n	6ae8 <FatFile::write(void const*, unsigned int)+0x128>
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    6adc:	movs	r2, #5
    6ade:	b.n	6a96 <FatFile::write(void const*, unsigned int)+0xd6>
        if (m_firstCluster == 0) {
    6ae0:	ldr	r1, [r5, #32]
    6ae2:	cbz	r1, 6b2e <FatFile::write(void const*, unsigned int)+0x16e>
          m_curCluster = m_firstCluster;
    6ae4:	str	r1, [r5, #16]
    6ae6:	b.n	6a12 <FatFile::write(void const*, unsigned int)+0x52>
          (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
    6ae8:	ldrb	r3, [r5, #2]
        cacheOption = FsCache::CACHE_FOR_WRITE;
    6aea:	tst.w	r3, #32
    6aee:	ite	ne
    6af0:	movne	r2, #5
    6af2:	moveq	r2, #1
    6af4:	b.n	6a96 <FatFile::write(void const*, unsigned int)+0xd6>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    6af6:	add.w	r2, r5, #16
    6afa:	bl	6c38 <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    6afe:	cmp	r0, #0
    6b00:	blt.n	6abc <FatFile::write(void const*, unsigned int)+0xfc>
        if (fg == 0) {
    6b02:	beq.n	6b4e <FatFile::write(void const*, unsigned int)+0x18e>
    uint32_t sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    6b04:	ldr	r0, [r5, #8]
    6b06:	ldr	r1, [r5, #16]
    6b08:	b.n	6a12 <FatFile::write(void const*, unsigned int)+0x52>
    if (isCached(sector)) {
    6b0a:	ldr	r3, [r0, #44]	; 0x2c
    6b0c:	cmp	r3, r1
    6b0e:	bne.n	6b1a <FatFile::write(void const*, unsigned int)+0x15a>
    m_sector = 0XFFFFFFFF;
    6b10:	mov.w	r3, #4294967295
    m_status = 0;
    6b14:	strb.w	sl, [r0, #36]	; 0x24
    m_sector = 0XFFFFFFFF;
    6b18:	str	r3, [r0, #44]	; 0x2c
    return m_blockDev->writeSector(sector, src);
    6b1a:	ldr	r0, [r0, #40]	; 0x28
    6b1c:	mov	r2, r8
    6b1e:	ldr	r3, [r0, #0]
    6b20:	ldr	r3, [r3, #32]
    6b22:	blx	r3
      if (!m_vol->cacheSafeWrite(sector, src)) {
    6b24:	cmp	r0, #0
    6b26:	beq.n	6abc <FatFile::write(void const*, unsigned int)+0xfc>
      n = m_vol->bytesPerSector();
    6b28:	mov.w	r4, #512	; 0x200
    6b2c:	b.n	6a5a <FatFile::write(void const*, unsigned int)+0x9a>
          if (!addCluster()) {
    6b2e:	mov	r0, r5
    6b30:	bl	5c08 <FatFile::addCluster()>
    6b34:	cmp	r0, #0
    6b36:	beq.n	6abc <FatFile::write(void const*, unsigned int)+0xfc>
          m_firstCluster = m_curCluster;
    6b38:	ldr	r1, [r5, #16]
    uint32_t sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    6b3a:	ldr	r0, [r5, #8]
          m_firstCluster = m_curCluster;
    6b3c:	str	r1, [r5, #32]
    6b3e:	b.n	6a12 <FatFile::write(void const*, unsigned int)+0x52>
    if (!seekSet(m_fileSize)) {
    6b40:	ldr	r1, [r0, #28]
    6b42:	bl	6600 <FatFile::seekSet(unsigned long)>
    6b46:	cmp	r0, #0
    6b48:	bne.w	69d6 <FatFile::write(void const*, unsigned int)+0x16>
    6b4c:	b.n	6abc <FatFile::write(void const*, unsigned int)+0xfc>
          if (!addCluster()) {
    6b4e:	mov	r0, r5
    6b50:	bl	5c08 <FatFile::addCluster()>
    6b54:	cmp	r0, #0
    6b56:	bne.n	6b04 <FatFile::write(void const*, unsigned int)+0x144>
    6b58:	b.n	6abc <FatFile::write(void const*, unsigned int)+0xfc>
  } else if (FsDateTime::callback) {
    6b5a:	ldr	r3, [pc, #20]	; (6b70 <FatFile::write(void const*, unsigned int)+0x1b0>)
    6b5c:	ldr	r3, [r3, #0]
    6b5e:	cbz	r3, 6b6c <FatFile::write(void const*, unsigned int)+0x1ac>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    6b60:	ldrb	r3, [r5, #2]
    6b62:	mov	r0, r9
    6b64:	orn	r3, r3, #127	; 0x7f
    6b68:	strb	r3, [r5, #2]
    6b6a:	b.n	6ac6 <FatFile::write(void const*, unsigned int)+0x106>
    6b6c:	mov	r0, r9
    6b6e:	b.n	6ac6 <FatFile::write(void const*, unsigned int)+0x106>
    6b70:	.word	0x20006420

00006b74 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>:
fail:
  return false;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    6b74:	push	{r4, r5, r6, lr}
  uint8_t fatType() const { return m_fatType; }
    6b76:	ldrb	r3, [r0, #7]
    6b78:	mov	r5, r0
    6b7a:	mov	r4, r1
    6b7c:	mov	r6, r2
  if (cluster < 2 || cluster > m_lastCluster) {
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
    6b7e:	cmp	r3, #32
    6b80:	beq.n	6bb6 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0x42>
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint16_t offset = (cluster << 2) & m_sectorMask;
    next = getLe32(pc + offset);
  } else if (fatType() == 16) {
    6b82:	cmp	r3, #16
    6b84:	beq.n	6b8c <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0x18>
  }
  *value = next;
  return 1;

fail:
  return -1;
    6b86:	mov.w	r0, #4294967295
}
    6b8a:	pop	{r4, r5, r6, pc}
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1));
    6b8c:	ldr	r3, [r0, #24]
    6b8e:	ubfx	r1, r1, #8, #8
    return m_fatCache.prepare(sector, options);
    6b92:	add.w	r0, r0, #564	; 0x234
    6b96:	movs	r2, #2
    6b98:	add	r1, r3
    6b9a:	bl	3278 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    6b9e:	cmp	r0, #0
    6ba0:	beq.n	6b86 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0x12>
    uint16_t offset = (cluster << 1) & m_sectorMask;
    6ba2:	lsls	r1, r4, #1
  if (isEOC(next)) {
    6ba4:	ldr	r2, [r5, #28]
    next = getLe16(pc + offset);
    6ba6:	and.w	r1, r1, #510	; 0x1fe
    6baa:	ldrh	r3, [r0, r1]
  if (isEOC(next)) {
    6bac:	cmp	r2, r3
    6bae:	bcc.n	6bd8 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0x64>
  return 1;
    6bb0:	movs	r0, #1
  *value = next;
    6bb2:	str	r3, [r6, #0]
}
    6bb4:	pop	{r4, r5, r6, pc}
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    6bb6:	ldr	r1, [r0, #24]
    6bb8:	movs	r2, #2
    6bba:	add.w	r0, r0, #564	; 0x234
    6bbe:	add.w	r1, r1, r4, lsr #7
    6bc2:	bl	3278 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    6bc6:	cmp	r0, #0
    6bc8:	beq.n	6b86 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0x12>
    uint16_t offset = (cluster << 2) & m_sectorMask;
    6bca:	lsls	r1, r4, #2
  if (isEOC(next)) {
    6bcc:	ldr	r2, [r5, #28]
    next = getLe32(pc + offset);
    6bce:	and.w	r1, r1, #508	; 0x1fc
  return *reinterpret_cast<const uint32_t*>(src);
    6bd2:	ldr	r3, [r0, r1]
  if (isEOC(next)) {
    6bd4:	cmp	r2, r3
    6bd6:	bcs.n	6bb0 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0x3c>
    return 0;
    6bd8:	movs	r0, #0
}
    6bda:	pop	{r4, r5, r6, pc}

00006bdc <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]>:
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
    6bdc:	push	{r3, r4, r5, lr}
  uint8_t fatType() const { return m_fatType; }
    6bde:	ldrb	r3, [r0, #7]
    6be0:	mov	r4, r1
    6be2:	mov	r5, r2
  if (cluster < 2 || cluster > m_lastCluster) {
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
    6be4:	cmp	r3, #32
    6be6:	beq.n	6c14 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x38>
    uint16_t offset = (cluster << 2) & m_sectorMask;
    setLe32(pc + offset, value);
    return true;
  }

  if (fatType() == 16) {
    6be8:	cmp	r3, #16
    6bea:	beq.n	6bf0 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x14>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
    6bec:	movs	r0, #0
}
    6bee:	pop	{r3, r4, r5, pc}
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1));
    6bf0:	ldr	r3, [r0, #24]
    6bf2:	ubfx	r1, r1, #8, #8
    return m_fatCache.prepare(sector, options);
    6bf6:	add.w	r0, r0, #564	; 0x234
    6bfa:	movs	r2, #3
    6bfc:	add	r1, r3
    6bfe:	bl	3278 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    6c02:	mov	r3, r0
    6c04:	cmp	r0, #0
    6c06:	beq.n	6bec <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x10>
    uint16_t offset = (cluster << 1) & m_sectorMask;
    6c08:	lsls	r1, r4, #1
    return true;
    6c0a:	movs	r0, #1
    setLe16(pc + offset, value);
    6c0c:	and.w	r1, r1, #510	; 0x1fe
    6c10:	strh	r5, [r3, r1]
}
    6c12:	pop	{r3, r4, r5, pc}
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    6c14:	ldr	r1, [r0, #24]
    6c16:	movs	r2, #3
    6c18:	add.w	r0, r0, #564	; 0x234
    6c1c:	add.w	r1, r1, r4, lsr #7
    6c20:	bl	3278 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    6c24:	mov	r3, r0
    6c26:	cmp	r0, #0
    6c28:	beq.n	6bec <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x10>
    uint16_t offset = (cluster << 2) & m_sectorMask;
    6c2a:	lsls	r1, r4, #2
    return true;
    6c2c:	movs	r0, #1
    setLe32(pc + offset, value);
    6c2e:	and.w	r1, r1, #508	; 0x1fc
  *reinterpret_cast<uint32_t*>(dst) = src;
    6c32:	str	r5, [r3, r1]
}
    6c34:	pop	{r3, r4, r5, pc}
    6c36:	nop

00006c38 <FatPartition::fatGet(unsigned long, unsigned long*)>:
  if (cluster < 2 || cluster > m_lastCluster) {
    6c38:	cmp	r1, #1
    6c3a:	bls.n	6c56 <FatPartition::fatGet(unsigned long, unsigned long*)+0x1e>
int8_t FatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    6c3c:	push	{r4}
  if (cluster < 2 || cluster > m_lastCluster) {
    6c3e:	ldr	r4, [r0, #28]
    6c40:	cmp	r4, r1
    6c42:	bcc.n	6c4c <FatPartition::fatGet(unsigned long, unsigned long*)+0x14>
}
    6c44:	ldr.w	r4, [sp], #4
    6c48:	b.w	6b74 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>
    6c4c:	mov.w	r0, #4294967295
    6c50:	ldr.w	r4, [sp], #4
    6c54:	bx	lr
    6c56:	mov.w	r0, #4294967295
    6c5a:	bx	lr

00006c5c <FatPartition::fatPut(unsigned long, unsigned long)>:
  if (cluster < 2 || cluster > m_lastCluster) {
    6c5c:	cmp	r1, #1
    6c5e:	bls.n	6c7a <FatPartition::fatPut(unsigned long, unsigned long)+0x1e>
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
    6c60:	push	{r3, r4, r5, lr}
  if (cluster < 2 || cluster > m_lastCluster) {
    6c62:	ldr	r3, [r0, #28]
    6c64:	mov	r4, r1
    6c66:	cmp	r3, r1
    6c68:	bcc.n	6c76 <FatPartition::fatPut(unsigned long, unsigned long)+0x1a>
  uint8_t fatType() const { return m_fatType; }
    6c6a:	ldrb	r3, [r0, #7]
    6c6c:	mov	r5, r2
  if (fatType() == 32) {
    6c6e:	cmp	r3, #32
    6c70:	beq.n	6ca2 <FatPartition::fatPut(unsigned long, unsigned long)+0x46>
  if (fatType() == 16) {
    6c72:	cmp	r3, #16
    6c74:	beq.n	6c7e <FatPartition::fatPut(unsigned long, unsigned long)+0x22>
  return false;
    6c76:	movs	r0, #0
}
    6c78:	pop	{r3, r4, r5, pc}
  return false;
    6c7a:	movs	r0, #0
}
    6c7c:	bx	lr
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1));
    6c7e:	ldr	r3, [r0, #24]
    6c80:	ubfx	r1, r1, #8, #8
    return m_fatCache.prepare(sector, options);
    6c84:	add.w	r0, r0, #564	; 0x234
    6c88:	movs	r2, #3
    6c8a:	add	r1, r3
    6c8c:	bl	3278 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    6c90:	mov	r3, r0
    6c92:	cmp	r0, #0
    6c94:	beq.n	6c76 <FatPartition::fatPut(unsigned long, unsigned long)+0x1a>
    uint16_t offset = (cluster << 1) & m_sectorMask;
    6c96:	lsls	r4, r4, #1
    return true;
    6c98:	movs	r0, #1
    setLe16(pc + offset, value);
    6c9a:	and.w	r4, r4, #510	; 0x1fe
    6c9e:	strh	r5, [r3, r4]
}
    6ca0:	pop	{r3, r4, r5, pc}
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    6ca2:	ldr	r1, [r0, #24]
    6ca4:	movs	r2, #3
    6ca6:	add.w	r0, r0, #564	; 0x234
    6caa:	add.w	r1, r1, r4, lsr #7
    6cae:	bl	3278 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    6cb2:	mov	r3, r0
    6cb4:	cmp	r0, #0
    6cb6:	beq.n	6c76 <FatPartition::fatPut(unsigned long, unsigned long)+0x1a>
    uint16_t offset = (cluster << 2) & m_sectorMask;
    6cb8:	lsls	r4, r4, #2
    return true;
    6cba:	movs	r0, #1
    setLe32(pc + offset, value);
    6cbc:	and.w	r4, r4, #508	; 0x1fc
    6cc0:	str	r5, [r3, r4]
}
    6cc2:	pop	{r3, r4, r5, pc}

00006cc4 <FatPartition::allocateCluster(unsigned long, unsigned long*)>:
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    6cc4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (m_allocSearchStart < current) {
    6cc8:	ldr	r4, [r0, #12]
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    6cca:	sub	sp, #8
    6ccc:	mov	r5, r0
    6cce:	mov	r6, r1
  if (m_allocSearchStart < current) {
    6cd0:	cmp	r4, r1
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    6cd2:	mov	r8, r2
  if (m_allocSearchStart < current) {
    6cd4:	bcc.n	6d3e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x7a>
    setStart = true;
    6cd6:	movs	r7, #1
    find++;
    6cd8:	adds	r4, #1
    if (find > m_lastCluster) {
    6cda:	ldr	r3, [r5, #28]
    6cdc:	add	r2, sp, #4
    6cde:	mov	r0, r5
    6ce0:	cmp	r3, r4
    6ce2:	bcs.n	6cf0 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x2c>
      if (setStart) {
    6ce4:	cbnz	r7, 6d34 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x70>
      find = m_allocSearchStart;
    6ce6:	ldr	r4, [r5, #12]
      setStart = true;
    6ce8:	movs	r7, #1
    find++;
    6cea:	add	r4, r7
    if (find > m_lastCluster) {
    6cec:	cmp	r3, r4
    6cee:	bcc.n	6d34 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x70>
  if (cluster < 2 || cluster > m_lastCluster) {
    6cf0:	cmp	r6, r4
    6cf2:	it	ne
    6cf4:	cmpne	r4, #1
    6cf6:	mov	r1, r4
    6cf8:	bls.n	6d34 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x70>
    6cfa:	bl	6b74 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>
    if (fg < 0) {
    6cfe:	cmp	r0, #0
    6d00:	blt.n	6d34 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x70>
    if (fg && f == 0) {
    6d02:	beq.n	6cd8 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x14>
    6d04:	ldr	r3, [sp, #4]
    6d06:	cmp	r3, #0
    6d08:	bne.n	6cd8 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x14>
  if (setStart) {
    6d0a:	cbz	r7, 6d0e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x4a>
    m_allocSearchStart = find;
    6d0c:	str	r4, [r5, #12]
  bool fatPutEOC(uint32_t cluster) { return fatPut(cluster, 0x0FFFFFFF); }
    6d0e:	mvn.w	r2, #4026531840	; 0xf0000000
    6d12:	mov	r1, r4
    6d14:	mov	r0, r5
    6d16:	bl	6c5c <FatPartition::fatPut(unsigned long, unsigned long)>
  if (!fatPutEOC(find)) {
    6d1a:	mov	r7, r0
    6d1c:	cbz	r0, 6d34 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x70>
  if (current) {
    6d1e:	cbnz	r6, 6d26 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x62>
  *next = find;
    6d20:	str.w	r4, [r8]
  return true;
    6d24:	b.n	6d36 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x72>
    if (!fatPut(current, find)) {
    6d26:	mov	r1, r6
    6d28:	mov	r0, r5
    6d2a:	mov	r2, r4
    6d2c:	bl	6c5c <FatPartition::fatPut(unsigned long, unsigned long)>
    6d30:	cmp	r0, #0
    6d32:	bne.n	6d20 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x5c>
  return false;
    6d34:	movs	r7, #0
}
    6d36:	mov	r0, r7
    6d38:	add	sp, #8
    6d3a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6d3e:	mov	r4, r1
    setStart = false;
    6d40:	movs	r7, #0
    6d42:	b.n	6cd8 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x14>

00006d44 <FatPartition::freeChain(unsigned long)>:
//------------------------------------------------------------------------------
// free a cluster chain
bool FatPartition::freeChain(uint32_t cluster) {
    6d44:	push	{r4, r5, r6, lr}
    6d46:	mov	r5, r0
    6d48:	sub	sp, #8
    6d4a:	mov	r4, r1
    6d4c:	b.n	6d7e <FatPartition::freeChain(unsigned long)+0x3a>
  if (cluster < 2 || cluster > m_lastCluster) {
    6d4e:	ldr	r3, [r5, #28]
    6d50:	cmp	r4, r3
    6d52:	bhi.n	6d88 <FatPartition::freeChain(unsigned long)+0x44>
    6d54:	bl	6b74 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>
  if (cluster < 2 || cluster > m_lastCluster) {
    6d58:	mov	r6, r0
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
    if (fg < 0) {
    6d5a:	mov	r1, r4
    6d5c:	movs	r2, #0
    6d5e:	cmp	r6, #0
    6d60:	mov	r0, r5
    6d62:	blt.n	6d88 <FatPartition::freeChain(unsigned long)+0x44>
  if (cluster < 2 || cluster > m_lastCluster) {
    6d64:	ldr	r3, [r5, #28]
    6d66:	cmp	r4, r3
    6d68:	bhi.n	6d88 <FatPartition::freeChain(unsigned long)+0x44>
    6d6a:	bl	6bdc <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);
    if (cluster < m_allocSearchStart) {
      m_allocSearchStart = cluster - 1;
    6d6e:	subs	r2, r4, #1
    if (!fatPut(cluster, 0)) {
    6d70:	cbz	r0, 6d88 <FatPartition::freeChain(unsigned long)+0x44>
    if (cluster < m_allocSearchStart) {
    6d72:	ldr	r3, [r5, #12]
    6d74:	cmp	r3, r4
    }
    cluster = next;
    6d76:	ldr	r4, [sp, #4]
      m_allocSearchStart = cluster - 1;
    6d78:	it	hi
    6d7a:	strhi	r2, [r5, #12]
  } while (fg);
    6d7c:	cbz	r6, 6d8a <FatPartition::freeChain(unsigned long)+0x46>
  if (cluster < 2 || cluster > m_lastCluster) {
    6d7e:	cmp	r4, #1
    6d80:	mov	r1, r4
    6d82:	add	r2, sp, #4
    6d84:	mov	r0, r5
    6d86:	bhi.n	6d4e <FatPartition::freeChain(unsigned long)+0xa>

  return true;

fail:
  return false;
    6d88:	movs	r0, #0
}
    6d8a:	add	sp, #8
    6d8c:	pop	{r4, r5, r6, pc}
    6d8e:	nop

00006d90 <FatPartition::freeClusterCount()>:
//------------------------------------------------------------------------------
int32_t FatPartition::freeClusterCount() {
    6d90:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint8_t fatType() const { return m_fatType; }
    6d94:	ldrb	r3, [r0, #7]
    6d96:	mov	r6, r0
    return m_freeClusterCount;
  }
#endif  // MAINTAIN_FREE_CLUSTER_COUNT
  uint32_t free = 0;
  uint32_t sector;
  uint32_t todo = m_lastCluster + 1;
    6d98:	ldr	r5, [r0, #28]
      }
      if (fg && c == 0) {
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    6d9a:	cmp	r3, #32
  uint32_t todo = m_lastCluster + 1;
    6d9c:	add.w	r5, r5, #1
  } else if (fatType() == 16 || fatType() == 32) {
    6da0:	beq.n	6da6 <FatPartition::freeClusterCount()+0x16>
    6da2:	cmp	r3, #16
    6da4:	bne.n	6e24 <FatPartition::freeClusterCount()+0x94>
    sector = m_fatStartSector;
    6da6:	ldr.w	r8, [r6, #24]
    while (todo) {
    6daa:	cmp	r5, #0
    6dac:	beq.n	6e2c <FatPartition::freeClusterCount()+0x9c>
    return m_fatCache.prepare(sector, options);
    6dae:	add.w	r7, r6, #564	; 0x234
  uint32_t free = 0;
    6db2:	movs	r4, #0
    6db4:	mov	r1, r8
    6db6:	movs	r2, #2
    6db8:	mov	r0, r7
    6dba:	add.w	r8, r8, #1
    6dbe:	bl	3278 <FsCache::prepare(unsigned long, unsigned char)>
      uint8_t* pc = fatCachePrepare(sector++, FsCache::CACHE_FOR_READ);
      if (!pc) {
    6dc2:	cbz	r0, 6e24 <FatPartition::freeClusterCount()+0x94>
        DBG_FAIL_MACRO;
        goto fail;
      }
      n = fatType() == 16 ? m_bytesPerSector / 2 : m_bytesPerSector / 4;
    6dc4:	ldrb	r3, [r6, #7]
    6dc6:	cmp	r3, #16
    6dc8:	beq.n	6df2 <FatPartition::freeClusterCount()+0x62>
      if (todo < n) {
    6dca:	cmp	r5, #127	; 0x7f
    6dcc:	bhi.n	6e18 <FatPartition::freeClusterCount()+0x88>
        n = todo;
    6dce:	uxth	r3, r5
    6dd0:	mov	r1, r5
    6dd2:	subs	r2, r3, #1
    6dd4:	subs	r3, r0, #4
    6dd6:	uxth	r2, r2
    6dd8:	add.w	r0, r0, r2, lsl #2
          }
        }
      } else {
        uint32_t* p32 = reinterpret_cast<uint32_t*>(pc);
        for (uint16_t i = 0; i < n; i++) {
          if (p32[i] == 0) {
    6ddc:	ldr.w	r2, [r3, #4]!
    6de0:	cbnz	r2, 6de4 <FatPartition::freeClusterCount()+0x54>
            free++;
    6de2:	adds	r4, #1
        for (uint16_t i = 0; i < n; i++) {
    6de4:	cmp	r3, r0
    6de6:	bne.n	6ddc <FatPartition::freeClusterCount()+0x4c>
    while (todo) {
    6de8:	subs	r5, r5, r1
    6dea:	bne.n	6db4 <FatPartition::freeClusterCount()+0x24>
  } else {
    // invalid FAT type
    DBG_FAIL_MACRO;
    goto fail;
  }
  setFreeClusterCount(free);
    6dec:	mov	r0, r4
  return free;

fail:
  return -1;
}
    6dee:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (todo < n) {
    6df2:	cmp	r5, #255	; 0xff
    6df4:	bls.n	6e1e <FatPartition::freeClusterCount()+0x8e>
    6df6:	mov.w	r1, #256	; 0x100
      n = fatType() == 16 ? m_bytesPerSector / 2 : m_bytesPerSector / 4;
    6dfa:	mov	r3, r1
    6dfc:	subs	r2, r3, #1
    6dfe:	subs	r3, r0, #2
    6e00:	uxth	r2, r2
    6e02:	add.w	r0, r0, r2, lsl #1
          if (p16[i] == 0) {
    6e06:	ldrh.w	r2, [r3, #2]!
    6e0a:	cbnz	r2, 6e0e <FatPartition::freeClusterCount()+0x7e>
            free++;
    6e0c:	adds	r4, #1
        for (uint16_t i = 0; i < n; i++) {
    6e0e:	cmp	r0, r3
    6e10:	bne.n	6e06 <FatPartition::freeClusterCount()+0x76>
    while (todo) {
    6e12:	subs	r5, r5, r1
    6e14:	bne.n	6db4 <FatPartition::freeClusterCount()+0x24>
    6e16:	b.n	6dec <FatPartition::freeClusterCount()+0x5c>
      if (todo < n) {
    6e18:	movs	r1, #128	; 0x80
      n = fatType() == 16 ? m_bytesPerSector / 2 : m_bytesPerSector / 4;
    6e1a:	mov	r3, r1
    6e1c:	b.n	6dd2 <FatPartition::freeClusterCount()+0x42>
        n = todo;
    6e1e:	uxth	r3, r5
    6e20:	mov	r1, r5
    6e22:	b.n	6dfc <FatPartition::freeClusterCount()+0x6c>
  return -1;
    6e24:	mov.w	r0, #4294967295
}
    6e28:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    while (todo) {
    6e2c:	mov	r0, r5
  return free;
    6e2e:	b.n	6dee <FatPartition::freeClusterCount()+0x5e>

00006e30 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)>:
//------------------------------------------------------------------------------
bool FatPartition::init(FsBlockDevice* dev, uint8_t part, uint32_t volStart) {
    6e30:	push	{r3, r4, r5, r6, r7, lr}
    6e32:	mov	r6, r3
    m_sector = 0XFFFFFFFF;
    6e34:	mov.w	r3, #4294967295
  m_blockDev = dev;
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
    6e38:	mov.w	ip, #0
bool FatPartition::init(FsBlockDevice* dev, uint8_t part, uint32_t volStart) {
    6e3c:	mov	r4, r0
    6e3e:	str	r3, [r0, #44]	; 0x2c
  m_allocSearchStart = 1;
  m_cache.init(dev);
    6e40:	add.w	r7, r0, #36	; 0x24
    6e44:	str.w	r3, [r0, #572]	; 0x23c
  m_allocSearchStart = 1;
    6e48:	movs	r3, #1
  m_blockDev = dev;
    6e4a:	str	r1, [r0, #0]
  m_fatType = 0;
    6e4c:	strb.w	ip, [r0, #7]
    m_blockDev = blockDev;
    6e50:	str	r1, [r0, #40]	; 0x28
    6e52:	str.w	r1, [r0, #568]	; 0x238
    m_status = 0;
    6e56:	strb.w	ip, [r0, #36]	; 0x24
    6e5a:	strb.w	ip, [r0, #564]	; 0x234
  m_allocSearchStart = 1;
    6e5e:	str	r3, [r0, #12]
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(dev);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    6e60:	cbz	r2, 6e98 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x68>
    if (part > 4) {
    6e62:	cmp	r2, #4
    6e64:	mov	r5, r2
    6e66:	bls.n	6e6c <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x3c>
  m_fatCache.setMirrorOffset(m_sectorsPerFat);
#endif  // USE_SEPARATE_FAT_CACHE
  return true;

fail:
  return false;
    6e68:	movs	r0, #0
}
    6e6a:	pop	{r3, r4, r5, r6, r7, pc}
    return m_cache.prepare(sector, options);
    6e6c:	mov	r2, ip
    6e6e:	mov	r1, ip
    6e70:	mov	r0, r7
    6e72:	bl	3278 <FsCache::prepare(unsigned long, unsigned char)>
    if (!mbr) {
    6e76:	cmp	r0, #0
    6e78:	beq.n	6e68 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x38>
    MbrPart_t* mp = mbr->part + part - 1;
    6e7a:	mvn.w	r3, #4026531840	; 0xf0000000
    6e7e:	add.w	r0, r0, #446	; 0x1be
    6e82:	add	r3, r5
    6e84:	lsls	r1, r3, #4
    6e86:	add.w	r3, r0, r3, lsl #4
    if (mp->type == 0 || (mp->boot != 0 && mp->boot != 0X80)) {
    6e8a:	ldrb	r2, [r3, #4]
    6e8c:	cmp	r2, #0
    6e8e:	beq.n	6e68 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x38>
    6e90:	ldrb	r2, [r0, r1]
    6e92:	lsls	r2, r2, #25
    6e94:	bne.n	6e68 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x38>
  return *reinterpret_cast<const uint32_t*>(src);
    6e96:	ldr	r6, [r3, #8]
    6e98:	movs	r2, #0
    6e9a:	mov	r1, r6
    6e9c:	mov	r0, r7
    6e9e:	bl	3278 <FsCache::prepare(unsigned long, unsigned char)>
  if (!pbs) {
    6ea2:	cmp	r0, #0
    6ea4:	beq.n	6e68 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x38>
  if (bpb->fatCount != 2 || getLe16(bpb->bytesPerSector) != m_bytesPerSector) {
    6ea6:	ldrb	r3, [r0, #16]
    6ea8:	cmp	r3, #2
    6eaa:	bne.n	6e68 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x38>
    6eac:	ldrh.w	r3, [r0, #11]
    6eb0:	cmp.w	r3, #512	; 0x200
    6eb4:	bne.n	6e68 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x38>
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    6eb6:	ldrb	r1, [r0, #13]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    6eb8:	subs	r3, r1, #1
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    6eba:	cmp	r1, #1
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    6ebc:	strb	r1, [r4, #4]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    6ebe:	strb	r3, [r4, #5]
  m_sectorsPerClusterShift = 0;
    6ec0:	mov.w	r3, #0
    6ec4:	strb	r3, [r4, #6]
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    6ec6:	beq.n	6f4c <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x11c>
    6ec8:	movs	r2, #1
    6eca:	lsls	r2, r2, #1
    m_sectorsPerClusterShift++;
    6ecc:	adds	r3, #1
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    6ece:	uxtb	r2, r2
    m_sectorsPerClusterShift++;
    6ed0:	uxtb	r3, r3
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    6ed2:	cmp	r1, r2
    6ed4:	beq.n	6ee0 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0xb0>
    if (tmp == 0) {
    6ed6:	cmp	r3, #8
    6ed8:	bne.n	6eca <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x9a>
  return false;
    6eda:	movs	r0, #0
    6edc:	strb	r3, [r4, #6]
}
    6ede:	pop	{r3, r4, r5, r6, r7, pc}
  countOfClusters >>= m_sectorsPerClusterShift;
    6ee0:	mov	r5, r3
    6ee2:	strb	r3, [r4, #6]
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
    6ee4:	ldrh	r1, [r0, #22]
    6ee6:	str	r1, [r4, #16]
  if (m_sectorsPerFat == 0) {
    6ee8:	cbnz	r1, 6eee <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0xbe>
    6eea:	ldr	r1, [r0, #36]	; 0x24
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
    6eec:	str	r1, [r4, #16]
  m_fatStartSector = volStart + getLe16(bpb->reservedSectorCount);
    6eee:	ldrh	r3, [r0, #14]
  return *reinterpret_cast<const uint16_t*>(src);
    6ef0:	ldrh.w	r2, [r0, #17]
    6ef4:	add	r3, r6
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);
    6ef6:	strh	r2, [r4, #8]
      ((FS_DIR_SIZE * m_rootDirEntryCount + m_bytesPerSector - 1) /
    6ef8:	lsls	r2, r2, #5
  m_fatStartSector = volStart + getLe16(bpb->reservedSectorCount);
    6efa:	str	r3, [r4, #24]
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
    6efc:	add.w	r3, r3, r1, lsl #1
      ((FS_DIR_SIZE * m_rootDirEntryCount + m_bytesPerSector - 1) /
    6f00:	addw	r2, r2, #511	; 0x1ff
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
    6f04:	str	r3, [r4, #32]
      m_rootDirStart +
    6f06:	add.w	r3, r3, r2, lsr #9
  totalSectors = getLe16(bpb->totalSectors16);
    6f0a:	ldrh.w	r2, [r0, #19]
  m_dataStartSector =
    6f0e:	str	r3, [r4, #20]
  if (totalSectors == 0) {
    6f10:	cbnz	r2, 6f14 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0xe4>
  return *reinterpret_cast<const uint32_t*>(src);
    6f12:	ldr	r2, [r0, #32]
  countOfClusters = totalSectors - (m_dataStartSector - volStart);
    6f14:	subs	r3, r6, r3
    6f16:	add	r3, r2
  countOfClusters >>= m_sectorsPerClusterShift;
    6f18:	lsrs	r3, r5
  m_lastCluster = countOfClusters + 1;
    6f1a:	adds	r2, r3, #1
    6f1c:	str	r2, [r4, #28]
  if (countOfClusters < 4085) {
    6f1e:	movw	r2, #4084	; 0xff4
    6f22:	cmp	r3, r2
    6f24:	bls.n	6f40 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x110>
  } else if (countOfClusters < 65525) {
    6f26:	movw	r2, #65524	; 0xfff4
    6f2a:	cmp	r3, r2
    6f2c:	bls.n	6f48 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x118>
    6f2e:	ldr	r2, [r0, #44]	; 0x2c
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
    6f30:	movs	r3, #32
    6f32:	str	r2, [r4, #32]
  return true;
    6f34:	movs	r0, #1
    m_fatType = 16;
    6f36:	strb	r3, [r4, #7]
  /** Set the offset to the second FAT for mirroring.
   * \param[in] offset Sector offset to second FAT.
   */
  void setMirrorOffset(uint32_t offset) { m_mirrorOffset = offset; }
    6f38:	str	r1, [r4, #48]	; 0x30
    6f3a:	str.w	r1, [r4, #576]	; 0x240
}
    6f3e:	pop	{r3, r4, r5, r6, r7, pc}
    m_fatType = 12;
    6f40:	movs	r3, #12
  return false;
    6f42:	movs	r0, #0
    m_fatType = 12;
    6f44:	strb	r3, [r4, #7]
}
    6f46:	pop	{r3, r4, r5, r6, r7, pc}
    6f48:	movs	r3, #16
    6f4a:	b.n	6f34 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x104>
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    6f4c:	mov	r5, r3
    6f4e:	b.n	6ee4 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0xb4>

00006f50 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)>:
  } else if (i < 13) {
    setLe16(ldir->unicode3 + 2 * (i - 11), c);
  }
}
//==============================================================================
bool FatFile::cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    6f50:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  FatFile dir = *this;
    6f54:	mov	lr, r0
bool FatFile::cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    6f56:	sub	sp, #40	; 0x28
    6f58:	mov	r5, r2
    6f5a:	ldr	r4, [r2, #0]
    6f5c:	mov	r6, r0
    6f5e:	mov	r8, r1
  FatFile dir = *this;
    6f60:	add.w	ip, sp, #4
  DirLfn_t* ldir;
  fname->reset();
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    6f64:	mov	r7, r3
  FatFile dir = *this;
    6f66:	ldmia.w	lr!, {r0, r1, r2, r3}
    6f6a:	stmia.w	ip!, {r0, r1, r2, r3}
    6f6e:	ldmia.w	lr!, {r0, r1, r2, r3}
    6f72:	stmia.w	ip!, {r0, r1, r2, r3}
    6f76:	ldr.w	r3, [lr]
    6f7a:	str	r4, [r5, #4]
    6f7c:	str.w	r3, [ip]
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    6f80:	cmp	r7, #0
    6f82:	beq.n	6ffc <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xac>
    6f84:	mov.w	r9, #1
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(index - order));
    6f88:	sub.w	r1, r8, r9
    return seekSet(32UL * index) ? readDirCache() : nullptr;
    6f8c:	add	r0, sp, #4
    6f8e:	uxth	r1, r1
    6f90:	lsls	r1, r1, #5
    6f92:	bl	6600 <FatFile::seekSet(unsigned long)>
    6f96:	cbz	r0, 7000 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xb0>
    6f98:	movs	r1, #0
    6f9a:	add	r0, sp, #4
    6f9c:	bl	6340 <FatFile::readDirCache(bool)>
    if (!ldir) {
    6fa0:	mov	sl, r0
    6fa2:	cbz	r0, 7000 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xb0>
    6fa4:	movs	r4, #0
    }
    // These should be checked in caller.
    DBG_HALT_IF(ldir->attributes != FAT_ATTRIB_LONG_NAME);
    DBG_HALT_IF(order != (ldir->order & 0X1F));
    for (uint8_t i = 0; i < 13; i++) {
      uint16_t u = getLfnChar(ldir, i);
    6fa6:	uxtb	r2, r4
    6fa8:	mov	r1, sl
    6faa:	mov	r0, r6
    for (uint8_t i = 0; i < 13; i++) {
    6fac:	adds	r4, #1
      uint16_t u = getLfnChar(ldir, i);
    6fae:	bl	59a4 <FatFile::getLfnChar(DirLfn_t*, unsigned char)>
      DBG_HALT_IF(cp == 0XFFFF);
      if (toUpcase(u) != toUpcase(cp)) {
        return false;
      }
#else   // USE_UTF8_LONG_NAMES
      if (u > 0X7F || toUpper(u) != toUpper(fname->getch())) {
    6fb2:	uxtb	r3, r0
      if (fname->atEnd()) {
    6fb4:	ldrd	r1, r2, [r5, #4]
    6fb8:	cmp	r2, r1
  char getch() { return atEnd() ? 0 : *next++; }
    6fba:	add.w	ip, r1, #1
    6fbe:	beq.n	7008 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xb8>
      if (u > 0X7F || toUpper(u) != toUpper(fname->getch())) {
    6fc0:	cmp	r0, #127	; 0x7f
inline char toUpper(char c) { return isLower(c) ? c - 'a' + 'A' : c; }
    6fc2:	sub.w	r2, r3, #97	; 0x61
    6fc6:	sub.w	lr, r3, #32
      if (u > 0X7F || toUpper(u) != toUpper(fname->getch())) {
    6fca:	bhi.n	7000 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xb0>
inline char toUpper(char c) { return isLower(c) ? c - 'a' + 'A' : c; }
    6fcc:	cmp	r2, #25
    6fce:	str.w	ip, [r5, #4]
    6fd2:	ldrb	r2, [r1, #0]
    6fd4:	it	ls
    6fd6:	uxtbls.w	r3, lr
    6fda:	sub.w	r1, r2, #97	; 0x61
    6fde:	sub.w	r0, r2, #32
    6fe2:	cmp	r1, #25
    6fe4:	it	ls
    6fe6:	uxtbls	r2, r0
      if (u > 0X7F || toUpper(u) != toUpper(fname->getch())) {
    6fe8:	cmp	r2, r3
    6fea:	bne.n	7000 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xb0>
    for (uint8_t i = 0; i < 13; i++) {
    6fec:	cmp	r4, #13
    6fee:	bne.n	6fa6 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x56>
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    6ff0:	add.w	r9, r9, #1
    6ff4:	uxtb.w	r9, r9
    6ff8:	cmp	r7, r9
    6ffa:	bcs.n	6f88 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x38>
        return false;
      }
#endif  // USE_UTF8_LONG_NAMES
    }
  }
  return true;
    6ffc:	movs	r0, #1
    6ffe:	b.n	7002 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xb2>

fail:
  return false;
    7000:	movs	r0, #0
}
    7002:	add	sp, #40	; 0x28
    7004:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return u == 0;
    7008:	clz	r0, r0
    700c:	lsrs	r0, r0, #5
}
    700e:	add	sp, #40	; 0x28
    7010:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00007014 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)>:
//------------------------------------------------------------------------------
bool FatFile::createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    7014:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  FatFile dir = *this;
    7018:	mov	lr, r0
bool FatFile::createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    701a:	sub	sp, #40	; 0x28
    701c:	mov	r4, r2
    701e:	mov	r8, r1
    7020:	mov	r6, r3
  FatFile dir = *this;
    7022:	add.w	r9, sp, #4
    7026:	add.w	r7, r2, #17
    702a:	add.w	ip, r2, #28
    uint8_t sum = 0;
    702e:	movs	r5, #0
    7030:	ldmia.w	lr!, {r0, r1, r2, r3}
    7034:	stmia.w	r9!, {r0, r1, r2, r3}
    7038:	ldmia.w	lr!, {r0, r1, r2, r3}
    703c:	stmia.w	r9!, {r0, r1, r2, r3}
    7040:	ldr.w	r3, [lr]
    7044:	str.w	r3, [r9]
      sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    7048:	lsls	r3, r5, #7
    704a:	ldrb.w	r2, [r7, #1]!
    704e:	orr.w	r3, r3, r5, lsr #1
    for (uint8_t i = 0; i < 11; i++) {
    7052:	cmp	r7, ip
      sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    7054:	uxtab	r3, r2, r3
    7058:	uxtb	r5, r3
    for (uint8_t i = 0; i < 11; i++) {
    705a:	bne.n	7048 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x34>
  void reset() { next = begin; }
    705c:	ldr	r3, [r4, #0]
    705e:	str	r3, [r4, #4]
  DirLfn_t* ldir;
  uint8_t checksum = lfnChecksum(fname->sfn);
  uint8_t fc = 0;
  fname->reset();

  for (uint8_t order = 1; order <= lfnOrd; order++) {
    7060:	cmp	r6, #0
    7062:	beq.n	7118 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x104>
  uint8_t fc = 0;
    7064:	mov.w	r9, #0
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    7068:	mov.w	sl, #1
    return seekSet(32UL * index) ? readDirCache() : nullptr;
    706c:	mov	r7, r9
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(index - order));
    706e:	sub.w	r1, r8, sl
    7072:	add	r0, sp, #4
    7074:	uxth	r1, r1
    7076:	lsls	r1, r1, #5
    7078:	bl	6600 <FatFile::seekSet(unsigned long)>
    707c:	cmp	r0, #0
    707e:	beq.n	7128 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x114>
    7080:	movs	r1, #0
    7082:	add	r0, sp, #4
    7084:	bl	6340 <FatFile::readDirCache(bool)>
    if (!ldir) {
    7088:	cmp	r0, #0
    708a:	beq.n	7128 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x114>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dir.m_vol->cacheDirty();
    708c:	ldr	r2, [sp, #12]
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    708e:	cmp	sl, r6
  bool atEnd() { return next == end; }
    7090:	mov.w	ip, #1
  void dirty() { m_status |= CACHE_STATUS_DIRTY; }
    7094:	ldrb.w	r3, [r2, #36]	; 0x24
    7098:	orr.w	r3, r3, #1
    709c:	strb.w	r3, [r2, #36]	; 0x24
    70a0:	ite	eq
    70a2:	orreq.w	r2, sl, #64	; 0x40
    70a6:	movne	r2, sl
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    70a8:	movs	r3, #15
    ldir->mustBeZero1 = 0;
    70aa:	strb	r7, [r0, #12]
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    70ac:	strb	r2, [r0, #0]
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    70ae:	adds	r2, r0, #1
    70b0:	strb	r3, [r0, #11]
    70b2:	movs	r3, #0
    ldir->checksum = checksum;
    70b4:	strb	r5, [r0, #13]
    70b6:	ldr	r1, [r4, #8]
  *reinterpret_cast<uint16_t*>(dst) = src;
    70b8:	strh	r7, [r0, #26]
    setLe16(ldir->mustBeZero2, 0);
    for (uint8_t i = 0; i < 13; i++) {
    70ba:	b.n	70ca <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xb6>
    70bc:	strh	r0, [r2, #0]
    70be:	add.w	ip, ip, #1
    70c2:	adds	r3, #1
    70c4:	adds	r2, #2
    70c6:	uxtb.w	ip, ip
    70ca:	ldr	r0, [r4, #4]
      uint16_t cp;
      if (fname->atEnd()) {
    70cc:	cmp	r0, r1
    70ce:	beq.n	70ee <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xda>
  uint16_t get16() { return atEnd() ? 0 : *next++; }
    70d0:	add.w	lr, r0, #1
    70d4:	str.w	lr, [r4, #4]
    70d8:	ldrb	r0, [r0, #0]
  if (i < 5) {
    70da:	cmp	r3, #4
    70dc:	uxtb.w	lr, r3
    70e0:	bls.n	70bc <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xa8>
  } else if (i < 11) {
    70e2:	cmp.w	lr, #10
    70e6:	bhi.n	7102 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xee>
    70e8:	strh.w	r0, [r2, #3]
}
    70ec:	b.n	70be <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xaa>
        cp = fc++ ? 0XFFFF : 0;
    70ee:	cmp.w	r9, #0
    70f2:	beq.n	7120 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x10c>
    70f4:	add.w	r9, r9, #1
    70f8:	movw	r0, #65535	; 0xffff
    70fc:	uxtb.w	r9, r9
    7100:	b.n	70da <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xc6>
    for (uint8_t i = 0; i < 13; i++) {
    7102:	cmp.w	ip, #13
  *reinterpret_cast<uint16_t*>(dst) = src;
    7106:	strh.w	r0, [r2, #5]
    710a:	bne.n	70be <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xaa>
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    710c:	add.w	sl, sl, #1
    7110:	uxtb.w	sl, sl
    7114:	cmp	r6, sl
    7116:	bcs.n	706e <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x5a>
        DBG_HALT_IF(cp == 0XFFFF);
      }
      putLfnChar(ldir, i, cp);
    }
  }
  return true;
    7118:	movs	r0, #1

fail:
  return false;
}
    711a:	add	sp, #40	; 0x28
    711c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        cp = fc++ ? 0XFFFF : 0;
    7120:	mov	r0, r9
    7122:	mov.w	r9, #1
    7126:	b.n	70da <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xc6>
  return false;
    7128:	movs	r0, #0
}
    712a:	add	sp, #40	; 0x28
    712c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00007130 <FatFile::makeSFN(FatLfn_t*)>:
  uint8_t uc = 0;
  uint8_t i = 0;
  uint8_t in = 7;
  const char* dot;
  const char* end = fname->end;
  const char* ptr = fname->begin;
    7130:	mov	r2, r0
  // Assume blanks removed from start and end.
  DBG_HALT_IF(*ptr == ' ' || *(end - 1) == ' ' || *(end - 1) == '.');

  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
    7132:	mov.w	r1, #538976288	; 0x20202020
  const char* ptr = fname->begin;
    7136:	ldr.w	r3, [r2], #18
bool FatFile::makeSFN(FatLfn_t* fname) {
    713a:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    fname->sfn[k] = ' ';
    713e:	str.w	r1, [r0, #18]
bool FatFile::makeSFN(FatLfn_t* fname) {
    7142:	mov	lr, r0
  const char* end = fname->end;
    7144:	ldr	r4, [r0, #8]
    fname->sfn[k] = ' ';
    7146:	str	r1, [r2, #4]
    7148:	str.w	r1, [r2, #7]
  }
  // Not 8.3 if starts with dot.
  is83 = *ptr == '.' ? false : true;
    714c:	ldrb	r2, [r3, #0]
    714e:	cmp	r2, #46	; 0x2e
    7150:	ite	ne
    7152:	movne	r0, #1
    7154:	moveq	r0, #0
  // Skip leading dots.
  for (; *ptr == '.'; ptr++) {
    7156:	bne.n	7160 <FatFile::makeSFN(FatLfn_t*)+0x30>
    7158:	ldrb.w	r2, [r3, #1]!
    715c:	cmp	r2, #46	; 0x2e
    715e:	beq.n	7158 <FatFile::makeSFN(FatLfn_t*)+0x28>
  }
  // Find last dot.
  for (dot = end - 1; dot > ptr && *dot != '.'; dot--) {
    7160:	subs	r1, r4, #1
    7162:	cmp	r1, r3
    7164:	bls.n	717e <FatFile::makeSFN(FatLfn_t*)+0x4e>
    7166:	mov	r2, r1
    7168:	b.n	7170 <FatFile::makeSFN(FatLfn_t*)+0x40>
    716a:	cmp	r3, r2
    716c:	mov	r1, r2
    716e:	beq.n	717e <FatFile::makeSFN(FatLfn_t*)+0x4e>
    7170:	mov	r1, r2
    7172:	subs	r2, #1
    7174:	ldrb.w	ip, [r1]
    7178:	cmp.w	ip, #46	; 0x2e
    717c:	bne.n	716a <FatFile::makeSFN(FatLfn_t*)+0x3a>
  }

  for (; ptr < end; ptr++) {
    717e:	cmp	r4, r3
    7180:	mov.w	r5, #0
    7184:	bls.w	7294 <FatFile::makeSFN(FatLfn_t*)+0x164>
    7188:	movs	r6, #7
    718a:	movs	r7, #8
    718c:	mov	r9, r5
    718e:	mov	r8, r5
    7190:	b.n	71a0 <FatFile::makeSFN(FatLfn_t*)+0x70>
    7192:	adds	r3, #1
    c = *ptr;
    if (c == '.' && ptr == dot) {
      in = 10;                // Max index for full 8.3 name.
    7194:	movs	r6, #10
      i = 8;                  // Place for extension.
    7196:	mov.w	r9, #8
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    719a:	movs	r7, #16
  for (; ptr < end; ptr++) {
    719c:	cmp	r4, r3
    719e:	bls.n	7258 <FatFile::makeSFN(FatLfn_t*)+0x128>
    c = *ptr;
    71a0:	ldrb	r2, [r3, #0]
    if (c == '.' && ptr == dot) {
    71a2:	cmp	r2, #46	; 0x2e
    71a4:	it	eq
    71a6:	cmpeq	r1, r3
    71a8:	beq.n	7192 <FatFile::makeSFN(FatLfn_t*)+0x62>
  if (c == '"' || c == '|' || c == '[' || c == '\\' || c == ']') {
    71aa:	cmp	r2, #34	; 0x22
    71ac:	beq.n	71ca <FatFile::makeSFN(FatLfn_t*)+0x9a>
    71ae:	cmp	r2, #124	; 0x7c
    71b0:	beq.n	71ca <FatFile::makeSFN(FatLfn_t*)+0x9a>
    71b2:	sub.w	ip, r2, #91	; 0x5b
    71b6:	cmp.w	ip, #2
    71ba:	bls.n	71ca <FatFile::makeSFN(FatLfn_t*)+0x9a>
  if ((0X2A <= c && c <= 0X2F && c != 0X2D) || (0X3A <= c && c <= 0X3F)) {
    71bc:	sub.w	ip, r2, #42	; 0x2a
    71c0:	cmp.w	ip, #5
    71c4:	bhi.n	720a <FatFile::makeSFN(FatLfn_t*)+0xda>
    71c6:	cmp	r2, #45	; 0x2d
    71c8:	beq.n	720a <FatFile::makeSFN(FatLfn_t*)+0xda>
    } else {
      if (sfnReservedChar(c)) {
        is83 = false;
        // Skip UTF-8 trailing characters.
        if ((c & 0XC0) == 0X80) {
    71ca:	and.w	r2, r2, #192	; 0xc0
    71ce:	cmp	r2, #128	; 0x80
    71d0:	beq.n	728e <FatFile::makeSFN(FatLfn_t*)+0x15e>
          continue;
        }
        c = '_';
      }
      if (i > in) {
    71d2:	cmp	r6, r9
    71d4:	bcs.n	7236 <FatFile::makeSFN(FatLfn_t*)+0x106>
        is83 = false;
        if (in == 10 || ptr > dot) {
    71d6:	cmp	r1, r3
    71d8:	ite	cs
    71da:	movcs	r0, #0
    71dc:	movcc	r0, #1
    71de:	cmp	r6, #10
    71e0:	it	eq
    71e2:	orreq.w	r0, r0, #1
    71e6:	cmp	r0, #0
    71e8:	beq.n	727a <FatFile::makeSFN(FatLfn_t*)+0x14a>
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
    71ea:	ldrb.w	r3, [lr, #18]
    71ee:	cmp	r3, #32
    71f0:	beq.n	7274 <FatFile::makeSFN(FatLfn_t*)+0x144>
  }
  if (is83) {
    fname->flags = (lc & uc) ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    71f2:	ldrb.w	r3, [lr, #16]
    fname->flags = FNAME_FLAG_LOST_CHARS;
    71f6:	movs	r0, #1
    fname->sfn[fname->seqPos] = '~';
    71f8:	movs	r1, #126	; 0x7e
    fname->sfn[fname->seqPos + 1] = '1';
    71fa:	movs	r2, #49	; 0x31
    fname->sfn[fname->seqPos] = '~';
    71fc:	add	r3, lr
    fname->flags = FNAME_FLAG_LOST_CHARS;
    71fe:	strb.w	r0, [lr, #17]
    fname->sfn[fname->seqPos] = '~';
    7202:	strb	r1, [r3, #18]
    fname->sfn[fname->seqPos + 1] = '1';
    7204:	strb	r2, [r3, #19]
  }
  return true;

fail:
  return false;
}
    7206:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    720a:	sub.w	ip, r2, #58	; 0x3a
    720e:	cmp.w	ip, #5
    7212:	bls.n	71ca <FatFile::makeSFN(FatLfn_t*)+0x9a>
      if (sfnReservedChar(c)) {
    7214:	sub.w	ip, r2, #33	; 0x21
    7218:	cmp.w	ip, #93	; 0x5d
    721c:	bhi.n	71ca <FatFile::makeSFN(FatLfn_t*)+0x9a>
      if (i > in) {
    721e:	cmp	r6, r9
    7220:	bcc.n	71d6 <FatFile::makeSFN(FatLfn_t*)+0xa6>
      if (isLower(c)) {
    7222:	sub.w	ip, r2, #97	; 0x61
    7226:	cmp.w	ip, #25
    722a:	bhi.n	727e <FatFile::makeSFN(FatLfn_t*)+0x14e>
        c += 'A' - 'a';
    722c:	subs	r2, #32
        lc |= bit;
    722e:	orrs	r5, r7
        c += 'A' - 'a';
    7230:	uxtb	r2, r2
        lc |= bit;
    7232:	uxtb	r5, r5
    7234:	b.n	723a <FatFile::makeSFN(FatLfn_t*)+0x10a>
        is83 = false;
    7236:	movs	r0, #0
        c = '_';
    7238:	movs	r2, #95	; 0x5f
      fname->sfn[i++] = c;
    723a:	add.w	ip, r9, #1
    723e:	add	r9, lr
  for (; ptr < end; ptr++) {
    7240:	adds	r3, #1
      fname->sfn[i++] = c;
    7242:	strb.w	r2, [r9, #18]
    7246:	uxtb.w	r2, ip
      if (i < 7) {
    724a:	cmp	r2, #6
        fname->seqPos = i;
    724c:	mov	r9, r2
    724e:	it	ls
    7250:	strbls.w	r2, [lr, #16]
  for (; ptr < end; ptr++) {
    7254:	cmp	r4, r3
    7256:	bhi.n	71a0 <FatFile::makeSFN(FatLfn_t*)+0x70>
  if (fname->sfn[0] == ' ') {
    7258:	ldrb.w	r3, [lr, #18]
    725c:	cmp	r3, #32
    725e:	beq.n	7274 <FatFile::makeSFN(FatLfn_t*)+0x144>
  if (is83) {
    7260:	cmp	r0, #0
    7262:	beq.n	71f2 <FatFile::makeSFN(FatLfn_t*)+0xc2>
    fname->flags = (lc & uc) ? FNAME_FLAG_MIXED_CASE : lc;
    7264:	tst.w	r8, r5
    7268:	it	ne
    726a:	movne	r5, #2
    726c:	strb.w	r5, [lr, #17]
}
    7270:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  return false;
    7274:	movs	r0, #0
}
    7276:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    727a:	mov	r3, r1
    727c:	b.n	719c <FatFile::makeSFN(FatLfn_t*)+0x6c>
      } else if (isUpper(c)) {
    727e:	sub.w	ip, r2, #65	; 0x41
    7282:	cmp.w	ip, #25
        uc |= bit;
    7286:	it	ls
    7288:	orrls.w	r8, r7, r8
    728c:	b.n	723a <FatFile::makeSFN(FatLfn_t*)+0x10a>
  for (; ptr < end; ptr++) {
    728e:	adds	r3, #1
        is83 = false;
    7290:	movs	r0, #0
    7292:	b.n	719c <FatFile::makeSFN(FatLfn_t*)+0x6c>
  for (; ptr < end; ptr++) {
    7294:	mov	r8, r5
    7296:	b.n	7258 <FatFile::makeSFN(FatLfn_t*)+0x128>

00007298 <FatFile::makeUniqueSfn(FatLfn_t*)>:
//------------------------------------------------------------------------------
bool FatFile::makeUniqueSfn(FatLfn_t* fname) {
    7298:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;
    729c:	mov.w	r9, #98	; 0x62
  DirFat_t* dir;
  uint16_t hex = 0;
    72a0:	movs	r5, #0
bool FatFile::makeUniqueSfn(FatLfn_t* fname) {
    72a2:	mov	r7, r1
    72a4:	mov	r4, r0
    72a6:	ldr.w	fp, [pc, #160]	; 7348 <FatFile::makeUniqueSfn(FatLfn_t*)+0xb0>
    for (uint8_t i = pos + 4; i > pos; i--) {
      uint8_t h = hex & 0XF;
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
      hex >>= 4;
    }
    fname->sfn[pos] = '~';
    72aa:	mov.w	sl, #126	; 0x7e
  uint8_t pos = fname->seqPos;
    72ae:	ldrb.w	r8, [r1, #16]
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFatFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    72b2:	add.w	r6, r1, #18
	return systick_millis_count;
    72b6:	cmp.w	r8, #3
    72ba:	ldr.w	r3, [fp]
    72be:	it	cs
    72c0:	movcs.w	r8, #3
    hex += millis();
    72c4:	add	r3, r5
    72c6:	uxth	r5, r3
    for (uint8_t i = pos + 4; i > pos; i--) {
    72c8:	add.w	r3, r8, #4
    72cc:	uxtb	r3, r3
      uint8_t h = hex & 0XF;
    72ce:	and.w	r2, r5, #15
    for (uint8_t i = pos + 4; i > pos; i--) {
    72d2:	subs	r0, r3, #1
      hex >>= 4;
    72d4:	lsrs	r5, r5, #4
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    72d6:	cmp	r2, #9
    72d8:	add.w	r1, r2, #55	; 0x37
    72dc:	it	ls
    72de:	addls.w	r1, r2, #48	; 0x30
    72e2:	adds	r2, r7, r3
    for (uint8_t i = pos + 4; i > pos; i--) {
    72e4:	uxtb	r3, r0
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    72e6:	strb	r1, [r2, #18]
    for (uint8_t i = pos + 4; i > pos; i--) {
    72e8:	cmp	r8, r3
    72ea:	bne.n	72ce <FatFile::makeUniqueSfn(FatLfn_t*)+0x36>
    fname->sfn[pos] = '~';
    72ec:	add.w	r3, r7, r8
  void rewind() { seekSet(0); }
    72f0:	movs	r1, #0
    72f2:	mov	r0, r4
    72f4:	strb.w	sl, [r3, #18]
    72f8:	bl	6600 <FatFile::seekSet(unsigned long)>
      dir = readDirCache(true);
    72fc:	movs	r1, #1
    72fe:	mov	r0, r4
    7300:	bl	6340 <FatFile::readDirCache(bool)>
    7304:	mov	r3, r0
      if (isFatFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    7306:	movs	r2, #11
    7308:	mov	r0, r6
      if (!dir) {
    730a:	cbz	r3, 7334 <FatFile::makeUniqueSfn(FatLfn_t*)+0x9c>
      if (dir->name[0] == FAT_NAME_FREE) {
    730c:	ldrb.w	ip, [r3]
      if (isFatFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    7310:	mov	r1, r3
      if (dir->name[0] == FAT_NAME_FREE) {
    7312:	cmp.w	ip, #0
    7316:	beq.n	7340 <FatFile::makeUniqueSfn(FatLfn_t*)+0xa8>
      if (isFatFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    7318:	ldrb	r3, [r3, #11]
    731a:	lsls	r3, r3, #28
    731c:	bmi.n	72fc <FatFile::makeUniqueSfn(FatLfn_t*)+0x64>
    731e:	bl	dfb8 <memcmp>
    7322:	cmp	r0, #0
    7324:	bne.n	72fc <FatFile::makeUniqueSfn(FatLfn_t*)+0x64>
  for (uint8_t seq = FIRST_HASH_SEQ; seq < 100; seq++) {
    7326:	add.w	r9, r9, #4294967295
    732a:	ands.w	r9, r9, #255	; 0xff
    732e:	bne.n	72b6 <FatFile::makeUniqueSfn(FatLfn_t*)+0x1e>
  }
  // fall inti fail - too many tries.
  DBG_FAIL_MACRO;

fail:
  return false;
    7330:	mov	r0, r9
fail:
    7332:	b.n	733c <FatFile::makeUniqueSfn(FatLfn_t*)+0xa4>
        if (!getError()) {
    7334:	ldrb	r0, [r4, #1]
    7336:	clz	r0, r0
    733a:	lsrs	r0, r0, #5

done:
  return true;
}
    733c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return true;
    7340:	movs	r0, #1
}
    7342:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7346:	nop
    7348:	.word	0x20007b08

0000734c <FatFile::open(FatFile*, FatLfn_t*, int)>:
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, FatLfn_t* fname, oflag_t oflag) {
    734c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7350:	vpush	{d8}
    7354:	sub	sp, #44	; 0x2c
    7356:	strd	r0, r3, [sp, #8]
  uint16_t curIndex;
  uint16_t date;
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  auto vol = dirFile->m_vol;
    735a:	ldr	r3, [r1, #8]
    735c:	str	r3, [sp, #28]

  if (!dirFile->isDir() || isOpen()) {
    735e:	ldrb	r3, [r1, #0]
    7360:	tst.w	r3, #208	; 0xd0
    7364:	beq.n	740e <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
  bool isOpen() const { return m_attributes; }
    7366:	ldr	r3, [sp, #8]
    7368:	ldrb	r3, [r3, #0]
    736a:	cmp	r3, #0
    736c:	bne.n	740e <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  nameOrd = (fname->len + 12) / 13;
    736e:	ldr	r3, [r2, #12]
    7370:	mov	r8, r2
    7372:	ldr	r2, [pc, #616]	; (75dc <FatFile::open(FatFile*, FatLfn_t*, int)+0x290>)
    7374:	mov	r6, r1
    7376:	adds	r3, #12
    7378:	umull	r2, r3, r2, r3
    737c:	ubfx	r2, r3, #2, #8
  freeNeed = (fname->flags & FNAME_FLAG_NEED_LFN) ? 1 + nameOrd : 1;
    7380:	ldrb.w	r3, [r8, #17]
    7384:	lsls	r0, r3, #30
  nameOrd = (fname->len + 12) / 13;
    7386:	str	r2, [sp, #16]
  freeNeed = (fname->flags & FNAME_FLAG_NEED_LFN) ? 1 + nameOrd : 1;
    7388:	beq.w	74da <FatFile::open(FatFile*, FatLfn_t*, int)+0x18e>
    738c:	adds	r7, r2, #1
    738e:	uxtb	r7, r7
  uint8_t checksum = 0;
    7390:	movs	r3, #0
  void rewind() { seekSet(0); }
    7392:	mov	r0, r6
    7394:	mov	r1, r3
    7396:	mov	r4, r3
    7398:	str	r3, [sp, #24]
    739a:	bl	6600 <FatFile::seekSet(unsigned long)>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    739e:	add.w	r3, r8, #18
  uint8_t order = 0;
    73a2:	mov	fp, r4
  uint8_t lfnOrd = 0;
    73a4:	mov	r9, r4
  uint16_t freeIndex = 0;
    73a6:	mov	sl, r4
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    73a8:	vmov	s16, r3
  bool fnameFound = false;
    73ac:	str	r4, [sp, #20]
    curIndex = dirFile->m_curPosition / FS_DIR_SIZE;
    73ae:	ldr	r5, [r6, #20]
    dir = dirFile->readDirCache();
    73b0:	movs	r1, #0
    73b2:	mov	r0, r6
    73b4:	bl	6340 <FatFile::readDirCache(bool)>
    curIndex = dirFile->m_curPosition / FS_DIR_SIZE;
    73b8:	ubfx	r5, r5, #5, #16
    if (!dir) {
    73bc:	mov	r3, r0
    73be:	cbz	r0, 740a <FatFile::open(FatFile*, FatLfn_t*, int)+0xbe>
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
    73c0:	ldrb	r2, [r0, #0]
    73c2:	cmp	r2, #229	; 0xe5
    73c4:	beq.n	741a <FatFile::open(FatFile*, FatLfn_t*, int)+0xce>
    73c6:	cbz	r2, 741a <FatFile::open(FatFile*, FatLfn_t*, int)+0xce>
        freeFound = 0;
    73c8:	cmp	r4, r7
    73ca:	it	cc
    73cc:	movcc	r4, #0
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    73ce:	cmp	r2, #46	; 0x2e
    73d0:	beq.n	742a <FatFile::open(FatFile*, FatLfn_t*, int)+0xde>
  return dir->attributes == FAT_ATTRIB_LONG_NAME;
    73d2:	ldrb.w	ip, [r0, #11]
    } else if (isFatLongName(dir)) {
    73d6:	cmp.w	ip, #15
    73da:	beq.n	7486 <FatFile::open(FatFile*, FatLfn_t*, int)+0x13a>
    } else if (isFatFileOrSubdir(dir)) {
    73dc:	ands.w	ip, ip, #8
    73e0:	bne.n	742a <FatFile::open(FatFile*, FatLfn_t*, int)+0xde>
      if (lfnOrd) {
    73e2:	cmp.w	r9, #0
    73e6:	bne.w	7594 <FatFile::open(FatFile*, FatLfn_t*, int)+0x248>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    73ea:	movs	r2, #11
    73ec:	vmov	r1, s16
    73f0:	bl	dfb8 <memcmp>
    73f4:	cmp	r0, #0
    73f6:	bne.n	73ae <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
    73f8:	ldrb.w	r3, [r8, #17]
    73fc:	ands.w	r3, r3, #1
    7400:	beq.w	75cc <FatFile::open(FatFile*, FatLfn_t*, int)+0x280>
          goto found;
        }
        fnameFound = true;
    7404:	movs	r3, #1
    7406:	str	r3, [sp, #20]
    7408:	b.n	73ae <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
      if (dirFile->getError()) {
    740a:	ldrb	r3, [r6, #1]
    740c:	cbz	r3, 7430 <FatFile::open(FatFile*, FatLfn_t*, int)+0xe4>
    goto fail;
  }
  return true;

fail:
  return false;
    740e:	movs	r0, #0
}
    7410:	add	sp, #44	; 0x2c
    7412:	vpop	{d8}
    7416:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    curIndex = dirFile->m_curPosition / FS_DIR_SIZE;
    741a:	cmp	r4, #0
    741c:	it	eq
    741e:	moveq	sl, r5
      if (freeFound < freeNeed) {
    7420:	cmp	r4, r7
    7422:	bcs.n	7428 <FatFile::open(FatFile*, FatLfn_t*, int)+0xdc>
        freeFound++;
    7424:	adds	r4, #1
    7426:	uxtb	r4, r4
      if (dir->name[0] == FAT_NAME_FREE) {
    7428:	cbz	r2, 7430 <FatFile::open(FatFile*, FatLfn_t*, int)+0xe4>
      lfnOrd = 0;
    742a:	mov.w	r9, #0
    742e:	b.n	73ae <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
    7430:	ldr	r3, [sp, #12]
    7432:	lsls	r2, r3, #22
    7434:	bpl.n	740e <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>

#define O_READ O_RDONLY
#define O_WRITE O_WRONLY

inline bool isWriteMode(oflag_t oflag) {
  oflag &= O_ACCMODE;
    7436:	and.w	r3, r3, #3
  return oflag == O_WRONLY || oflag == O_RDWR;
    743a:	subs	r3, #1
    743c:	cmp	r3, #1
    743e:	bhi.n	740e <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
  if (freeFound == 0) {
    7440:	cmp	r4, #0
    7442:	it	eq
    7444:	moveq	sl, r5
  while (freeFound < freeNeed) {
    7446:	cmp	r4, r7
    7448:	bcc.n	7452 <FatFile::open(FatFile*, FatLfn_t*, int)+0x106>
    744a:	b.n	74de <FatFile::open(FatFile*, FatLfn_t*, int)+0x192>
    freeFound++;
    744c:	uxtb	r4, r3
  while (freeFound < freeNeed) {
    744e:	cmp	r7, r4
    7450:	beq.n	74de <FatFile::open(FatFile*, FatLfn_t*, int)+0x192>
    dir = dirFile->readDirCache();
    7452:	movs	r1, #0
    7454:	mov	r0, r6
    7456:	bl	6340 <FatFile::readDirCache(bool)>
    freeFound++;
    745a:	adds	r3, r4, #1
    if (!dir) {
    745c:	cmp	r0, #0
    745e:	bne.n	744c <FatFile::open(FatFile*, FatLfn_t*, int)+0x100>
      if (dirFile->getError()) {
    7460:	ldrb	r3, [r6, #1]
    7462:	cmp	r3, #0
    7464:	bne.n	740e <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
  while (freeFound < freeNeed) {
    7466:	cmp	r7, r4
    7468:	bls.n	74de <FatFile::open(FatFile*, FatLfn_t*, int)+0x192>
    746a:	ldr	r5, [sp, #28]
    746c:	b.n	747a <FatFile::open(FatFile*, FatLfn_t*, int)+0x12e>
    return m_sectorsPerCluster * (m_bytesPerSector / FS_DIR_SIZE);
    746e:	ldrb	r3, [r5, #4]
    freeFound += vol->dirEntriesPerCluster();
    7470:	add.w	r4, r4, r3, lsl #4
    7474:	uxtb	r4, r4
  while (freeFound < freeNeed) {
    7476:	cmp	r7, r4
    7478:	bls.n	74de <FatFile::open(FatFile*, FatLfn_t*, int)+0x192>
    if (!dirFile->addDirCluster()) {
    747a:	mov	r0, r6
    747c:	bl	5c3c <FatFile::addDirCluster()>
    7480:	cmp	r0, #0
    7482:	bne.n	746e <FatFile::open(FatFile*, FatLfn_t*, int)+0x122>
    7484:	b.n	740e <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
      if (!lfnOrd) {
    7486:	cmp.w	r9, #0
    748a:	bne.n	74c0 <FatFile::open(FatFile*, FatLfn_t*, int)+0x174>
        order = ldir->order & 0X1F;
    748c:	and.w	fp, r2, #31
        if (order != nameOrd ||
    7490:	ldr	r1, [sp, #16]
    7492:	cmp	r1, fp
    7494:	bne.n	73ae <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
    7496:	ands.w	r9, r2, #64	; 0x40
    749a:	beq.n	73ae <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
        checksum = ldir->checksum;
    749c:	ldrb	r3, [r0, #13]
    749e:	mov	r9, r1
    74a0:	str	r3, [sp, #24]
      if (order == 1) {
    74a2:	cmp.w	fp, #1
    74a6:	bne.n	73ae <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
        if (!dirFile->cmpName(curIndex + 1, fname, lfnOrd)) {
    74a8:	adds	r1, r5, #1
    74aa:	mov	r3, r9
    74ac:	mov	r2, r8
    74ae:	mov	r0, r6
    74b0:	uxth	r1, r1
    74b2:	bl	6f50 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)>
          lfnOrd = 0;
    74b6:	cmp	r0, #0
    74b8:	it	eq
    74ba:	moveq.w	r9, #0
    74be:	b.n	73ae <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
      } else if (ldir->order != --order || checksum != ldir->checksum) {
    74c0:	add.w	fp, fp, #4294967295
    74c4:	uxtb.w	fp, fp
    74c8:	cmp	r2, fp
    74ca:	bne.n	742a <FatFile::open(FatFile*, FatLfn_t*, int)+0xde>
    74cc:	ldrb	r3, [r0, #13]
    74ce:	ldr	r2, [sp, #24]
    74d0:	cmp	r3, r2
    74d2:	beq.n	74a2 <FatFile::open(FatFile*, FatLfn_t*, int)+0x156>
      lfnOrd = 0;
    74d4:	mov.w	r9, #0
    74d8:	b.n	73ae <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
  freeNeed = (fname->flags & FNAME_FLAG_NEED_LFN) ? 1 + nameOrd : 1;
    74da:	movs	r7, #1
    74dc:	b.n	7390 <FatFile::open(FatFile*, FatLfn_t*, int)+0x44>
  if (fnameFound) {
    74de:	ldr	r3, [sp, #20]
    74e0:	cbz	r3, 74ee <FatFile::open(FatFile*, FatLfn_t*, int)+0x1a2>
    if (!dirFile->makeUniqueSfn(fname)) {
    74e2:	mov	r1, r8
    74e4:	mov	r0, r6
    74e6:	bl	7298 <FatFile::makeUniqueSfn(FatLfn_t*)>
    74ea:	cmp	r0, #0
    74ec:	beq.n	740e <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
  lfnOrd = freeNeed - 1;
    74ee:	subs	r7, #1
  if (!dirFile->createLFN(curIndex, fname, lfnOrd)) {
    74f0:	mov	r2, r8
    74f2:	mov	r0, r6
  lfnOrd = freeNeed - 1;
    74f4:	uxtb	r3, r7
  curIndex = freeIndex + lfnOrd;
    74f6:	add.w	r5, sl, r3
  lfnOrd = freeNeed - 1;
    74fa:	mov	r7, r3
  curIndex = freeIndex + lfnOrd;
    74fc:	uxth	r5, r5
  if (!dirFile->createLFN(curIndex, fname, lfnOrd)) {
    74fe:	mov	r1, r5
    7500:	bl	7014 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)>
    7504:	cmp	r0, #0
    7506:	beq.n	740e <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    return seekSet(32UL * index) ? readDirCache() : nullptr;
    7508:	lsls	r1, r5, #5
    750a:	mov	r0, r6
    750c:	bl	6600 <FatFile::seekSet(unsigned long)>
    7510:	cmp	r0, #0
    7512:	beq.w	740e <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    7516:	movs	r1, #0
    7518:	mov	r0, r6
    751a:	bl	6340 <FatFile::readDirCache(bool)>
  if (!dir) {
    751e:	mov	r4, r0
    7520:	cmp	r0, #0
    7522:	beq.w	740e <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
  memset(dir, 0, sizeof(DirFat_t));
    7526:	movs	r2, #32
    7528:	movs	r1, #0
    752a:	bl	e110 <memset>
  memcpy(dir->name, fname->sfn, 11);
    752e:	ldr.w	r2, [r8, #18]
    7532:	ldr.w	r3, [r8, #22]
    7536:	str	r2, [r4, #0]
    7538:	str	r3, [r4, #4]
    753a:	ldrb.w	r3, [r8, #28]
    753e:	ldrh.w	r2, [r8, #26]
    7542:	strb	r3, [r4, #10]
    7544:	strh	r2, [r4, #8]
  dir->caseFlags = (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;
    7546:	ldrb.w	r3, [r8, #17]
    754a:	and.w	r3, r3, #24
    754e:	strb	r3, [r4, #12]
  if (FsDateTime::callback) {
    7550:	ldr	r3, [pc, #140]	; (75e0 <FatFile::open(FatFile*, FatLfn_t*, int)+0x294>)
    7552:	ldr	r3, [r3, #0]
    7554:	cmp	r3, #0
    7556:	beq.n	75d0 <FatFile::open(FatFile*, FatLfn_t*, int)+0x284>
    FsDateTime::callback(&date, &time, &ms10);
    7558:	add.w	r2, sp, #35	; 0x23
    755c:	add.w	r1, sp, #38	; 0x26
    7560:	add	r0, sp, #36	; 0x24
    7562:	blx	r3
  *reinterpret_cast<uint16_t*>(dst) = src;
    7564:	ldrh.w	r3, [sp, #36]	; 0x24
    7568:	strh	r3, [r4, #16]
    756a:	ldrh.w	r3, [sp, #38]	; 0x26
    756e:	strh	r3, [r4, #14]
    dir->createTimeMs = ms10;
    7570:	ldrb.w	r3, [sp, #35]	; 0x23
    7574:	strb	r3, [r4, #13]
    7576:	ldr	r2, [sp, #28]
    7578:	ldrb.w	r3, [r2, #36]	; 0x24
    757c:	orr.w	r3, r3, #1
    7580:	strb.w	r3, [r2, #36]	; 0x24
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
    7584:	ldr	r3, [sp, #12]
    7586:	mov	r2, r5
    7588:	mov	r1, r6
    758a:	ldr	r0, [sp, #8]
    758c:	str	r7, [sp, #0]
    758e:	bl	66b0 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    7592:	b.n	7410 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc4>
        if (1 == order && lfnChecksum(dir->name) == checksum) {
    7594:	cmp.w	fp, #1
    7598:	bne.w	740e <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    for (uint8_t i = 0; i < 11; i++) {
    759c:	adds	r0, #10
    759e:	b.n	75a4 <FatFile::open(FatFile*, FatLfn_t*, int)+0x258>
      sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    75a0:	ldrb.w	r2, [r3, #1]!
    75a4:	mov.w	r1, ip, lsl #7
    for (uint8_t i = 0; i < 11; i++) {
    75a8:	cmp	r0, r3
      sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    75aa:	orr.w	r1, r1, ip, lsr #1
    75ae:	uxtab	r2, r2, r1
    75b2:	uxtb.w	ip, r2
    for (uint8_t i = 0; i < 11; i++) {
    75b6:	bne.n	75a0 <FatFile::open(FatFile*, FatLfn_t*, int)+0x254>
    75b8:	ldr	r3, [sp, #24]
    75ba:	cmp	r3, ip
    75bc:	bne.w	740e <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    75c0:	mov	r7, r9
  if (oflag & O_EXCL) {
    75c2:	ldr	r3, [sp, #12]
    75c4:	lsls	r1, r3, #20
    75c6:	bmi.w	740e <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    75ca:	b.n	7584 <FatFile::open(FatFile*, FatLfn_t*, int)+0x238>
    75cc:	mov	r7, r3
    75ce:	b.n	75c2 <FatFile::open(FatFile*, FatLfn_t*, int)+0x276>
    75d0:	movw	r3, #22049	; 0x5621
    75d4:	strh	r3, [r4, #16]
    75d6:	strh	r3, [r4, #24]
    75d8:	strh	r3, [r4, #18]
    if (FS_DEFAULT_TIME) {
    75da:	b.n	7576 <FatFile::open(FatFile*, FatLfn_t*, int)+0x22a>
    75dc:	.word	0x4ec4ec4f
    75e0:	.word	0x20006420

000075e4 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>:
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path, FatLfn_t* fname,
                            const char** ptr) {
  size_t len = 0;
  // Skip leading spaces.
  while (*path == ' ') {
    75e4:	ldrb	r0, [r1, #0]
    75e6:	cmp	r0, #32
                            const char** ptr) {
    75e8:	push	{r4, r5}
  while (*path == ' ') {
    75ea:	bne.n	75f4 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x10>
    75ec:	ldrb.w	r4, [r1, #1]!
    75f0:	cmp	r4, #32
    75f2:	beq.n	75ec <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x8>
    path++;
  }
  fname->begin = path;
  fname->len = 0;
    75f4:	movs	r5, #0
  fname->begin = path;
    75f6:	str	r1, [r2, #0]
  fname->len = 0;
    75f8:	str	r5, [r2, #12]
  while (*path && !isDirSeparator(*path)) {
    75fa:	ldrb	r4, [r1, #0]
    75fc:	cmp	r4, #47	; 0x2f
    75fe:	beq.n	7620 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x3c>
    7600:	cbz	r4, 7620 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x3c>
    7602:	ldr	r0, [pc, #140]	; (7690 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xac>)
      DBG_FAIL_MACRO;
      goto fail;
    }
#else   // USE_UTF8_LONG_NAMES
    uint8_t cp = *path++;
    if (cp >= 0X80 || lfnReservedChar(cp)) {
    7604:	tst.w	r4, #128	; 0x80
    uint8_t cp = *path++;
    7608:	add.w	r1, r1, #1
    if (cp >= 0X80 || lfnReservedChar(cp)) {
    760c:	bne.n	7620 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x3c>
    760e:	cmp	r4, #60	; 0x3c
    7610:	bhi.n	7672 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x8e>
    7612:	cmp	r4, #33	; 0x21
    7614:	bhi.n	7626 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x42>
    7616:	add.w	ip, r4, #4294967295
    761a:	cmp.w	ip, #30
    761e:	bhi.n	7638 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x54>
  *ptr = path;
  return makeSFN(fname);

fail:
  return false;
}
    7620:	movs	r0, #0
    7622:	pop	{r4, r5}
    7624:	bx	lr
    7626:	sub.w	ip, r4, #34	; 0x22
    762a:	uxtb.w	ip, ip
    762e:	lsr.w	ip, r0, ip
    7632:	tst.w	ip, #1
    7636:	bne.n	7620 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x3c>
    if (cp != '.' && cp != ' ') {
    7638:	cmp	r4, #46	; 0x2e
    len++;
    763a:	add.w	r5, r5, #1
    if (cp != '.' && cp != ' ') {
    763e:	beq.n	7644 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x60>
    7640:	cmp	r4, #32
    7642:	bne.n	767e <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x9a>
  while (*path && !isDirSeparator(*path)) {
    7644:	ldrb	r4, [r1, #0]
    7646:	cbz	r4, 764c <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x68>
    7648:	cmp	r4, #47	; 0x2f
    764a:	bne.n	7604 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x20>
  if (!fname->len || fname->len > FAT_MAX_LFN_LENGTH) {
    764c:	ldr	r0, [r2, #12]
    764e:	subs	r0, #1
    7650:	cmp	r0, #254	; 0xfe
    7652:	bhi.n	7620 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x3c>
  for (; *path == ' ' || isDirSeparator(*path); path++) {
    7654:	cmp	r4, #32
    7656:	beq.n	765c <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x78>
    7658:	cmp	r4, #47	; 0x2f
    765a:	bne.n	7668 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x84>
    765c:	ldrb.w	r0, [r1, #1]!
    7660:	cmp	r0, #32
    7662:	beq.n	765c <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x78>
    7664:	cmp	r0, #47	; 0x2f
    7666:	beq.n	765c <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x78>
  return makeSFN(fname);
    7668:	mov	r0, r2
  *ptr = path;
    766a:	str	r1, [r3, #0]
}
    766c:	pop	{r4, r5}
  return makeSFN(fname);
    766e:	b.w	7130 <FatFile::makeSFN(FatLfn_t*)>
    7672:	cmp	r4, #92	; 0x5c
    7674:	beq.n	7620 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x3c>
    7676:	bls.n	7684 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xa0>
    7678:	cmp	r4, #124	; 0x7c
    767a:	beq.n	7620 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x3c>
    len++;
    767c:	adds	r5, #1
      fname->end = path;
    767e:	strd	r1, r5, [r2, #8]
    7682:	b.n	7644 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x60>
    7684:	subs	r4, #62	; 0x3e
    7686:	cmp	r4, #1
    7688:	bhi.n	767c <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x98>
}
    768a:	movs	r0, #0
    768c:	pop	{r4, r5}
    768e:	bx	lr
    7690:	.word	0x05002101

00007694 <FatFile::remove()>:
//------------------------------------------------------------------------------
bool FatFile::remove() {
    7694:	push	{r4, r5, r6, r7, lr}
  FatFile() {}
    7696:	movs	r3, #0
    7698:	sub	sp, #44	; 0x2c
    769a:	str	r3, [sp, #4]
  FatFile dirFile;
  DirFat_t* dir;
  DirLfn_t* ldir;

  // Cant' remove not open for write.
  if (!isWritable()) {
    769c:	ldrb	r3, [r0, #2]
    769e:	lsls	r2, r3, #30
    76a0:	bpl.n	76ec <FatFile::remove()+0x58>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
    76a2:	ldr	r1, [r0, #32]
    76a4:	mov	r5, r0
    76a6:	cbz	r1, 76b0 <FatFile::remove()+0x1c>
    76a8:	ldr	r0, [r0, #8]
    76aa:	bl	6d44 <FatPartition::freeChain(unsigned long)>
    76ae:	cbz	r0, 76ec <FatFile::remove()+0x58>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Cache directory entry.
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    76b0:	movs	r1, #1
    76b2:	mov	r0, r5
    76b4:	bl	5cb4 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    76b8:	cbz	r0, 76ec <FatFile::remove()+0x58>
    for (uint8_t i = 0; i < 11; i++) {
    76ba:	subs	r2, r0, #1
    76bc:	add.w	ip, r0, #10
    uint8_t sum = 0;
    76c0:	movs	r4, #0
      sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    76c2:	lsls	r3, r4, #7
    76c4:	ldrb.w	r1, [r2, #1]!
    76c8:	orr.w	r3, r3, r4, lsr #1
    for (uint8_t i = 0; i < 11; i++) {
    76cc:	cmp	ip, r2
      sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    76ce:	uxtab	r3, r1, r3
    76d2:	uxtb	r4, r3
    for (uint8_t i = 0; i < 11; i++) {
    76d4:	bne.n	76c2 <FatFile::remove()+0x2e>
    goto fail;
  }
  checksum = lfnChecksum(dir->name);

  // Mark entry deleted.
  dir->name[0] = FAT_NAME_DELETED;
    76d6:	movs	r6, #229	; 0xe5

  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
    76d8:	movs	r3, #0
  dir->name[0] = FAT_NAME_DELETED;
    76da:	strb	r6, [r0, #0]
  m_flags = 0;

  // Write entry to device.
  if (!m_vol->cacheSync()) {
    76dc:	ldr	r7, [r5, #8]
  m_attributes = FILE_ATTR_CLOSED;
    76de:	strb	r3, [r5, #0]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    76e0:	add.w	r0, r7, #36	; 0x24
  m_flags = 0;
    76e4:	strb	r3, [r5, #2]
    76e6:	bl	3220 <FsCache::sync()>
    76ea:	cbnz	r0, 76f2 <FatFile::remove()+0x5e>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
    76ec:	movs	r0, #0
}
    76ee:	add	sp, #44	; 0x2c
    76f0:	pop	{r4, r5, r6, r7, pc}
    76f2:	add.w	r0, r7, #564	; 0x234
    76f6:	bl	3220 <FsCache::sync()>
    76fa:	cmp	r0, #0
    76fc:	beq.n	76ec <FatFile::remove()+0x58>
    76fe:	ldr	r0, [r7, #0]
  bool syncDevice() { return m_blockDev->syncDevice(); }
    7700:	ldr	r3, [r0, #0]
    7702:	ldr	r3, [r3, #28]
    7704:	blx	r3
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    7706:	cmp	r0, #0
    7708:	beq.n	76ec <FatFile::remove()+0x58>
  if (!isLFN()) {
    770a:	ldrb	r3, [r5, #3]
    770c:	cmp	r3, #0
    770e:	beq.n	76ee <FatFile::remove()+0x5a>
  if (!dirFile.openCluster(this)) {
    7710:	mov	r1, r5
    7712:	add	r0, sp, #4
    7714:	bl	60e0 <FatFile::openCluster(FatFile*)>
    7718:	cmp	r0, #0
    771a:	beq.n	76ec <FatFile::remove()+0x58>
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    771c:	ldrb	r3, [r5, #3]
    771e:	cmp	r3, #0
    7720:	beq.n	76ec <FatFile::remove()+0x58>
    7722:	movs	r7, #1
    7724:	b.n	776a <FatFile::remove()+0xd6>
    return seekSet(32UL * index) ? readDirCache() : nullptr;
    7726:	add	r0, sp, #4
    7728:	bl	6340 <FatFile::readDirCache(bool)>
    772c:	adds	r3, r7, #1
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    772e:	uxtb	r1, r7
    if (!ldir) {
    7730:	cmp	r0, #0
    7732:	beq.n	76ec <FatFile::remove()+0x58>
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    7734:	ldrb	r2, [r0, #11]
    7736:	cmp	r2, #15
    7738:	bne.n	76ec <FatFile::remove()+0x58>
        order != (ldir->order & 0X1F) || checksum != ldir->checksum) {
    773a:	ldrb	r2, [r0, #0]
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    773c:	uxtb.w	ip, r3
    7740:	uxth	r7, r3
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    7742:	and.w	r3, r2, #31
    7746:	cmp	r3, r1
    7748:	bne.n	76ec <FatFile::remove()+0x58>
        order != (ldir->order & 0X1F) || checksum != ldir->checksum) {
    774a:	ldrb	r3, [r0, #13]
    774c:	cmp	r3, r4
    774e:	bne.n	76ec <FatFile::remove()+0x58>
    ldir->order = FAT_NAME_DELETED;
    7750:	strb	r6, [r0, #0]
    m_vol->cacheDirty();
    7752:	ldr	r1, [r5, #8]
    7754:	ldrb.w	r3, [r1, #36]	; 0x24
    7758:	orr.w	r3, r3, #1
    775c:	strb.w	r3, [r1, #36]	; 0x24
    if (last) {
    7760:	lsls	r3, r2, #25
    7762:	bmi.n	7780 <FatFile::remove()+0xec>
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    7764:	ldrb	r3, [r5, #3]
    7766:	cmp	r3, ip
    7768:	bcc.n	76ec <FatFile::remove()+0x58>
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.cacheDir(m_dirIndex - order));
    776a:	ldrh	r1, [r5, #4]
    776c:	add	r0, sp, #4
    776e:	subs	r1, r1, r7
    7770:	uxth	r1, r1
    7772:	lsls	r1, r1, #5
    7774:	bl	6600 <FatFile::seekSet(unsigned long)>
    7778:	movs	r1, #0
    777a:	cmp	r0, #0
    777c:	bne.n	7726 <FatFile::remove()+0x92>
    777e:	b.n	76ec <FatFile::remove()+0x58>
      if (!m_vol->cacheSync()) {
    7780:	ldr	r4, [r5, #8]
    7782:	add.w	r0, r4, #36	; 0x24
    7786:	bl	3220 <FsCache::sync()>
    778a:	cmp	r0, #0
    778c:	beq.n	76ec <FatFile::remove()+0x58>
    778e:	add.w	r0, r4, #564	; 0x234
    7792:	bl	3220 <FsCache::sync()>
    7796:	cmp	r0, #0
    7798:	beq.n	76ec <FatFile::remove()+0x58>
    779a:	ldr	r0, [r4, #0]
  bool syncDevice() { return m_blockDev->syncDevice(); }
    779c:	ldr	r3, [r0, #0]
    779e:	ldr	r3, [r3, #28]
    77a0:	blx	r3
    77a2:	b.n	76ee <FatFile::remove()+0x5a>

000077a4 <FsBaseFile::FsBaseFile(FsBaseFile const&)>:
FsBaseFile::FsBaseFile(const FsBaseFile& from) {
    77a4:	push	{r3, r4, r5, r6, r7, lr}
    77a6:	movs	r6, #0
  if (from.m_fFile) {
    77a8:	ldr	r7, [r1, #56]	; 0x38
FsBaseFile::FsBaseFile(const FsBaseFile& from) {
    77aa:	mov	r5, r1
    77ac:	mov	r4, r0
    77ae:	strd	r6, r6, [r0, #56]	; 0x38
  if (from.m_fFile) {
    77b2:	cbz	r7, 77dc <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x38>
    m_fFile = new (m_fileMem) FatFile;
    77b4:	mov	r1, r0
    77b6:	movs	r0, #36	; 0x24
    77b8:	bl	7aa8 <operator new(unsigned int, unsigned long*)>
  FatFile() {}
    77bc:	strh	r6, [r0, #0]
    77be:	strb	r6, [r0, #2]
    *m_fFile = *from.m_fFile;
    77c0:	mov	ip, r0
    77c2:	ldr	r5, [r5, #56]	; 0x38
    m_fFile = new (m_fileMem) FatFile;
    77c4:	str	r0, [r4, #56]	; 0x38
    *m_fFile = *from.m_fFile;
    77c6:	ldmia	r5!, {r0, r1, r2, r3}
    77c8:	stmia.w	ip!, {r0, r1, r2, r3}
    77cc:	ldmia	r5!, {r0, r1, r2, r3}
    77ce:	stmia.w	ip!, {r0, r1, r2, r3}
    77d2:	ldr	r3, [r5, #0]
    77d4:	str.w	r3, [ip]
}
    77d8:	mov	r0, r4
    77da:	pop	{r3, r4, r5, r6, r7, pc}
  } else if (from.m_xFile) {
    77dc:	ldr	r3, [r1, #60]	; 0x3c
    77de:	cmp	r3, #0
    77e0:	beq.n	77d8 <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x34>
    m_xFile = new (m_fileMem) ExFatFile;
    77e2:	mov	r1, r0
    77e4:	movs	r0, #56	; 0x38
    77e6:	bl	7aa8 <operator new(unsigned int, unsigned long*)>
  ExFatFile() {}
    77ea:	strb.w	r7, [r0, #49]	; 0x31
    77ee:	strh	r7, [r0, #50]	; 0x32
    *m_xFile = *from.m_xFile;
    77f0:	mov	r2, r0
    77f2:	ldr	r3, [r5, #60]	; 0x3c
    m_xFile = new (m_fileMem) ExFatFile;
    77f4:	str	r0, [r4, #60]	; 0x3c
    *m_xFile = *from.m_xFile;
    77f6:	add.w	r7, r3, #48	; 0x30
    77fa:	ldr	r6, [r3, #0]
    77fc:	adds	r3, #16
    77fe:	ldr.w	r5, [r3, #-12]
    7802:	adds	r2, #16
    7804:	ldr.w	r0, [r3, #-8]
    7808:	ldr.w	r1, [r3, #-4]
    780c:	cmp	r3, r7
    780e:	str.w	r6, [r2, #-16]
    7812:	str.w	r5, [r2, #-12]
    7816:	str.w	r0, [r2, #-8]
    781a:	str.w	r1, [r2, #-4]
    781e:	bne.n	77fa <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x56>
    7820:	ldr	r3, [r3, #0]
}
    7822:	mov	r0, r4
    *m_xFile = *from.m_xFile;
    7824:	str	r3, [r2, #0]
}
    7826:	pop	{r3, r4, r5, r6, r7, pc}

00007828 <FsBaseFile::close()>:
//------------------------------------------------------------------------------
bool FsBaseFile::close() {
    7828:	push	{r4, lr}
    782a:	mov	r4, r0
  bool rtn = m_fFile ? m_fFile->close() : m_xFile ? m_xFile->close() : true;
    782c:	ldr	r0, [r0, #56]	; 0x38
    782e:	cbz	r0, 783c <FsBaseFile::close()+0x14>
    7830:	bl	5cd4 <FatFile::close()>
  m_fFile = nullptr;
    7834:	movs	r3, #0
  m_xFile = nullptr;
    7836:	strd	r3, r3, [r4, #56]	; 0x38
  return rtn;
}
    783a:	pop	{r4, pc}
  bool rtn = m_fFile ? m_fFile->close() : m_xFile ? m_xFile->close() : true;
    783c:	ldr	r0, [r4, #60]	; 0x3c
    783e:	cbz	r0, 784c <FsBaseFile::close()+0x24>
    7840:	bl	3bec <ExFatFile::close()>
  m_fFile = nullptr;
    7844:	movs	r3, #0
  m_xFile = nullptr;
    7846:	strd	r3, r3, [r4, #56]	; 0x38
}
    784a:	pop	{r4, pc}
  m_fFile = nullptr;
    784c:	movs	r3, #0
  bool rtn = m_fFile ? m_fFile->close() : m_xFile ? m_xFile->close() : true;
    784e:	movs	r0, #1
  m_xFile = nullptr;
    7850:	strd	r3, r3, [r4, #56]	; 0x38
}
    7854:	pop	{r4, pc}
    7856:	nop

00007858 <FsBaseFile::open(FsVolume*, char const*, int)>:
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
  if (!vol) {
    7858:	cmp	r1, #0
    785a:	beq.n	78f4 <FsBaseFile::open(FsVolume*, char const*, int)+0x9c>
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
    785c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7860:	mov	r4, r0
  bool rtn = m_fFile ? m_fFile->close() : m_xFile ? m_xFile->close() : true;
    7862:	ldr	r0, [r0, #56]	; 0x38
    7864:	mov	r5, r1
    7866:	mov	r8, r2
    7868:	mov	r7, r3
    786a:	cbz	r0, 78a2 <FsBaseFile::open(FsVolume*, char const*, int)+0x4a>
    786c:	bl	5cd4 <FatFile::close()>
  m_fFile = nullptr;
    7870:	movs	r6, #0
    return false;
  }
  close();
  if (vol->m_fVol) {
    7872:	ldr.w	r9, [r5, #1152]	; 0x480
  m_xFile = nullptr;
    7876:	strd	r6, r6, [r4, #56]	; 0x38
  if (vol->m_fVol) {
    787a:	cmp.w	r9, #0
    787e:	beq.n	78bc <FsBaseFile::open(FsVolume*, char const*, int)+0x64>
    m_fFile = new (m_fileMem) FatFile;
    7880:	mov	r1, r4
    7882:	movs	r0, #36	; 0x24
    7884:	bl	7aa8 <operator new(unsigned int, unsigned long*)>
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    7888:	mov	r3, r7
    788a:	strh	r6, [r0, #0]
    788c:	mov	r2, r8
    788e:	strb	r6, [r0, #2]
    m_fFile = new (m_fileMem) FatFile;
    7890:	str	r0, [r4, #56]	; 0x38
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    7892:	ldr.w	r1, [r5, #1152]	; 0x480
    7896:	bl	60d0 <FatFile::open(FatVolume*, char const*, int)>
    789a:	cbnz	r0, 78ee <FsBaseFile::open(FsVolume*, char const*, int)+0x96>
      return true;
    }
    m_fFile = nullptr;
    789c:	str	r0, [r4, #56]	; 0x38
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
    789e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  bool rtn = m_fFile ? m_fFile->close() : m_xFile ? m_xFile->close() : true;
    78a2:	ldr	r0, [r4, #60]	; 0x3c
    78a4:	cmp	r0, #0
    78a6:	beq.n	7870 <FsBaseFile::open(FsVolume*, char const*, int)+0x18>
    78a8:	bl	3bec <ExFatFile::close()>
  m_fFile = nullptr;
    78ac:	movs	r6, #0
  if (vol->m_fVol) {
    78ae:	ldr.w	r9, [r5, #1152]	; 0x480
  m_xFile = nullptr;
    78b2:	strd	r6, r6, [r4, #56]	; 0x38
  if (vol->m_fVol) {
    78b6:	cmp.w	r9, #0
    78ba:	bne.n	7880 <FsBaseFile::open(FsVolume*, char const*, int)+0x28>
  } else if (vol->m_xVol) {
    78bc:	ldr.w	r3, [r5, #1156]	; 0x484
    78c0:	cbz	r3, 78e8 <FsBaseFile::open(FsVolume*, char const*, int)+0x90>
    m_xFile = new (m_fileMem) ExFatFile;
    78c2:	mov	r1, r4
    78c4:	movs	r0, #56	; 0x38
    78c6:	bl	7aa8 <operator new(unsigned int, unsigned long*)>
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    78ca:	mov	r3, r7
    78cc:	strb.w	r9, [r0, #49]	; 0x31
    78d0:	mov	r2, r8
    78d2:	strh.w	r9, [r0, #50]	; 0x32
    m_xFile = new (m_fileMem) ExFatFile;
    78d6:	str	r0, [r4, #60]	; 0x3c
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    78d8:	ldr.w	r1, [r5, #1156]	; 0x484
    78dc:	bl	4484 <ExFatFile::open(ExFatVolume*, char const*, int)>
    78e0:	cbnz	r0, 78ee <FsBaseFile::open(FsVolume*, char const*, int)+0x96>
    m_xFile = nullptr;
    78e2:	str	r0, [r4, #60]	; 0x3c
}
    78e4:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return false;
    78e8:	movs	r0, #0
}
    78ea:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return true;
    78ee:	movs	r0, #1
}
    78f0:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return false;
    78f4:	movs	r0, #0
}
    78f6:	bx	lr

000078f8 <FsBaseFile::openNext(FsBaseFile*, int)>:
    m_xFile = nullptr;
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::openNext(FsBaseFile* dir, oflag_t oflag) {
    78f8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    78fc:	mov	r4, r0
  bool rtn = m_fFile ? m_fFile->close() : m_xFile ? m_xFile->close() : true;
    78fe:	ldr	r0, [r0, #56]	; 0x38
bool FsBaseFile::openNext(FsBaseFile* dir, oflag_t oflag) {
    7900:	mov	r5, r1
    7902:	mov	r8, r2
  bool rtn = m_fFile ? m_fFile->close() : m_xFile ? m_xFile->close() : true;
    7904:	cbz	r0, 7958 <FsBaseFile::openNext(FsBaseFile*, int)+0x60>
    7906:	bl	5cd4 <FatFile::close()>
  m_fFile = nullptr;
    790a:	movs	r6, #0
    790c:	str	r6, [r4, #56]	; 0x38
  close();
  if (dir->m_fFile) {
    790e:	ldr	r7, [r5, #56]	; 0x38
  m_xFile = nullptr;
    7910:	str	r6, [r4, #60]	; 0x3c
  if (dir->m_fFile) {
    7912:	cbz	r7, 7932 <FsBaseFile::openNext(FsBaseFile*, int)+0x3a>
    m_fFile = new (m_fileMem) FatFile;
    7914:	mov	r1, r4
    7916:	movs	r0, #36	; 0x24
    7918:	bl	7aa8 <operator new(unsigned int, unsigned long*)>
    if (m_fFile->openNext(dir->m_fFile, oflag)) {
    791c:	mov	r2, r8
    791e:	strh	r6, [r0, #0]
    7920:	strb	r6, [r0, #2]
    m_fFile = new (m_fileMem) FatFile;
    7922:	str	r0, [r4, #56]	; 0x38
    if (m_fFile->openNext(dir->m_fFile, oflag)) {
    7924:	ldr	r1, [r5, #56]	; 0x38
    7926:	bl	679c <FatFile::openNext(FatFile*, int)>
    792a:	cbnz	r0, 7952 <FsBaseFile::openNext(FsBaseFile*, int)+0x5a>
      return true;
    }
    m_fFile = nullptr;
    792c:	str	r0, [r4, #56]	; 0x38
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
    792e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (dir->m_xFile) {
    7932:	ldr	r0, [r5, #60]	; 0x3c
    7934:	cmp	r0, #0
    7936:	beq.n	792e <FsBaseFile::openNext(FsBaseFile*, int)+0x36>
    m_xFile = new (m_fileMem) ExFatFile;
    7938:	mov	r1, r4
    793a:	movs	r0, #56	; 0x38
    793c:	bl	7aa8 <operator new(unsigned int, unsigned long*)>
    if (m_xFile->openNext(dir->m_xFile, oflag)) {
    7940:	mov	r2, r8
    7942:	strb.w	r7, [r0, #49]	; 0x31
    7946:	strh	r7, [r0, #50]	; 0x32
    m_xFile = new (m_fileMem) ExFatFile;
    7948:	str	r0, [r4, #60]	; 0x3c
    if (m_xFile->openNext(dir->m_xFile, oflag)) {
    794a:	ldr	r1, [r5, #60]	; 0x3c
    794c:	bl	4494 <ExFatFile::openNext(ExFatFile*, int)>
    7950:	cbz	r0, 7964 <FsBaseFile::openNext(FsBaseFile*, int)+0x6c>
      return true;
    7952:	movs	r0, #1
}
    7954:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  bool rtn = m_fFile ? m_fFile->close() : m_xFile ? m_xFile->close() : true;
    7958:	ldr	r0, [r4, #60]	; 0x3c
    795a:	cmp	r0, #0
    795c:	beq.n	790a <FsBaseFile::openNext(FsBaseFile*, int)+0x12>
    795e:	bl	3bec <ExFatFile::close()>
    7962:	b.n	790a <FsBaseFile::openNext(FsBaseFile*, int)+0x12>
    m_xFile = nullptr;
    7964:	str	r0, [r4, #60]	; 0x3c
}
    7966:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    796a:	nop

0000796c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)>:
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part,
                     uint32_t volStart) {
    796c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  m_fVol = nullptr;
    7970:	movs	r5, #0
                     uint32_t volStart) {
    7972:	mov	r6, r0
    7974:	mov	r7, r1
  m_xVol = new (m_volMem) ExFatVolume;
    7976:	mov	r1, r0
  m_fVol = nullptr;
    7978:	str.w	r5, [r0, #1152]	; 0x480
  m_xVol = new (m_volMem) ExFatVolume;
    797c:	mov.w	r0, #1152	; 0x480
                     uint32_t volStart) {
    7980:	mov	r8, r3
    7982:	ldr.w	sl, [sp, #32]
    7986:	mov	r9, r2
  m_xVol = new (m_volMem) ExFatVolume;
    7988:	bl	7aa8 <operator new(unsigned int, unsigned long*)>
    m_sector = 0XFFFFFFFF;
    798c:	mov.w	r3, #4294967295
    m_blockDev = blockDev;
    7990:	str	r5, [r0, #4]
    m_status = 0;
    7992:	strb	r5, [r0, #0]
    if (!init(dev, part, volStart)) {
    7994:	mov	r2, r8
    m_sector = 0XFFFFFFFF;
    7996:	str	r3, [r0, #8]
    7998:	mov	r1, r7
    799a:	str.w	r3, [r0, #536]	; 0x218
    799e:	mov	r3, sl
    m_blockDev = blockDev;
    79a0:	str.w	r5, [r0, #532]	; 0x214
    79a4:	mov	r4, r0
    m_status = 0;
    79a6:	strb.w	r5, [r0, #528]	; 0x210
  ExFatPartition() = default;
    79aa:	strb.w	r5, [r0, #1092]	; 0x444
    79ae:	strb.w	r5, [r0, #1145]	; 0x479
    79b2:	strh.w	r5, [r0, #1146]	; 0x47a
    79b6:	str.w	r0, [r6, #1156]	; 0x484
    79ba:	bl	48e0 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)>
    79be:	cmp	r0, #0
    79c0:	bne.n	7a40 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0xd4>
  if (m_xVol && m_xVol->begin(blockDev, false, part, volStart)) {
    goto done;
  }
  m_xVol = nullptr;
    79c2:	movs	r5, #0
  m_fVol = new (m_volMem) FatVolume;
    79c4:	mov	r1, r6
    79c6:	mov.w	r0, #1128	; 0x468
  m_xVol = nullptr;
    79ca:	str.w	r5, [r6, #1156]	; 0x484
  m_fVol = new (m_volMem) FatVolume;
    79ce:	bl	7aa8 <operator new(unsigned int, unsigned long*)>
  FatPartition() = default;
    79d2:	strb	r5, [r0, #7]
    m_blockDev = blockDev;
    79d4:	str	r5, [r0, #40]	; 0x28
    if (!init(dev, part, volStart)) {
    79d6:	mov	r3, sl
    m_status = 0;
    79d8:	strb.w	r5, [r0, #36]	; 0x24
    79dc:	mov	r2, r8
    m_blockDev = blockDev;
    79de:	str.w	r5, [r0, #568]	; 0x238
    79e2:	mov	r1, r7
    m_status = 0;
    79e4:	strb.w	r5, [r0, #564]	; 0x234
    79e8:	mov	r4, r0
    79ea:	strh.w	r5, [r0, #1092]	; 0x444
    79ee:	strb.w	r5, [r0, #1094]	; 0x446
    m_sector = 0XFFFFFFFF;
    79f2:	mov.w	r5, #4294967295
    79f6:	str	r5, [r0, #44]	; 0x2c
    79f8:	str.w	r5, [r0, #572]	; 0x23c
    79fc:	str.w	r0, [r6, #1152]	; 0x480
    7a00:	bl	6e30 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)>
    7a04:	cbnz	r0, 7a12 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0xa6>
  if (m_fVol && m_fVol->begin(blockDev, false, part, volStart)) {
    goto done;
  }
  m_fVol = nullptr;
    7a06:	movs	r3, #0
  return false;
    7a08:	mov	r0, r3
  m_fVol = nullptr;
    7a0a:	str.w	r3, [r6, #1152]	; 0x480
done:
  if (setCwv || !m_cwv) {
    m_cwv = this;
  }
  return true;
}
    7a0e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    m_vwd.close();
    7a12:	addw	r5, r4, #1092	; 0x444
    7a16:	mov	r0, r5
    7a18:	bl	5cd4 <FatFile::close()>
    return m_vwd.openRoot(this);
    7a1c:	mov	r1, r4
    7a1e:	mov	r0, r5
    7a20:	bl	6138 <FatFile::openRoot(FatVolume*)>
    if (!chdir()) {
    7a24:	cmp	r0, #0
    7a26:	beq.n	7a06 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0x9a>
    if (setCwv || !m_cwv) {
    7a28:	ldr	r3, [pc, #72]	; (7a74 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0x108>)
    7a2a:	ldr	r2, [r3, #0]
    7a2c:	cbnz	r2, 7a5e <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0xf2>
      m_cwv = this;
    7a2e:	str	r4, [r3, #0]
  if (setCwv || !m_cwv) {
    7a30:	ldr	r3, [pc, #68]	; (7a78 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0x10c>)
    7a32:	cmp.w	r9, #0
    7a36:	beq.n	7a66 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0xfa>
  return true;
    7a38:	movs	r0, #1
    m_cwv = this;
    7a3a:	str	r6, [r3, #0]
}
    7a3c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    m_vwd.close();
    7a40:	add.w	r5, r4, #1096	; 0x448
    7a44:	mov	r0, r5
    7a46:	bl	3bec <ExFatFile::close()>
    return m_vwd.openRoot(this);
    7a4a:	mov	r1, r4
    7a4c:	mov	r0, r5
    7a4e:	bl	3c48 <ExFatFile::openRoot(ExFatVolume*)>
    if (!chdir()) {
    7a52:	cmp	r0, #0
    7a54:	beq.n	79c2 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0x56>
    if (setCwv || !m_cwv) {
    7a56:	ldr	r3, [pc, #36]	; (7a7c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0x110>)
    7a58:	ldr	r2, [r3, #0]
    7a5a:	cmp	r2, #0
    7a5c:	beq.n	7a2e <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0xc2>
  if (setCwv || !m_cwv) {
    7a5e:	ldr	r3, [pc, #24]	; (7a78 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0x10c>)
    7a60:	cmp.w	r9, #0
    7a64:	bne.n	7a38 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0xcc>
    7a66:	ldr	r2, [r3, #0]
    7a68:	cmp	r2, #0
    7a6a:	beq.n	7a38 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0xcc>
  return true;
    7a6c:	movs	r0, #1
}
    7a6e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7a72:	nop
    7a74:	.word	0x200065ec
    7a78:	.word	0x200065e8
    7a7c:	.word	0x200064a4

00007a80 <FsVolume::open(char const*, int)>:
bool FsVolume::ls(print_t* pr, const char* path, uint8_t flags) {
  FsBaseFile dir;
  return dir.open(this, path, O_RDONLY) && dir.ls(pr, flags);
}
//------------------------------------------------------------------------------
FsFile FsVolume::open(const char* path, oflag_t oflag) {
    7a80:	push	{r4, r5, r6, lr}
	constexpr Print() : write_error(0) {}
    7a82:	movs	r5, #0
    7a84:	mov.w	r6, #1000	; 0x3e8
    7a88:	mov	r4, r0
    7a8a:	strb	r5, [r0, #4]
    7a8c:	strb	r5, [r0, #12]
    7a8e:	str	r6, [r0, #8]
  FsBaseFile() = default;
    7a90:	strd	r5, r5, [r0, #72]	; 0x48
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    7a94:	ldr	r5, [pc, #12]	; (7aa4 <FsVolume::open(char const*, int)+0x24>)
    7a96:	str.w	r5, [r0], #16
  FsFile tmpFile;
  tmpFile.open(this, path, oflag);
    7a9a:	bl	7858 <FsBaseFile::open(FsVolume*, char const*, int)>
  return tmpFile;
}
    7a9e:	mov	r0, r4
    7aa0:	pop	{r4, r5, r6, pc}
    7aa2:	nop
    7aa4:	.word	0x20000ab8

00007aa8 <operator new(unsigned int, unsigned long*)>:
 */
#include "FsNew.h"
void* operator new(size_t size, newalign_t* ptr) {
  (void)size;
  return ptr;
}
    7aa8:	mov	r0, r1
    7aaa:	bx	lr

00007aac <SdCardInterface::status()>:
   * \param[out] sds location for 64 status bytes.
   * \return true for success or false for failure.
   */
  virtual bool readSDS(sds_t* sds) = 0;
  /** \return card status. */
  virtual uint32_t status() { return 0XFFFFFFFF; }
    7aac:	mov.w	r0, #4294967295
    7ab0:	bx	lr
    7ab2:	nop

00007ab4 <SharedSpiCard::errorCode() const>:
  uint8_t errorCode() const { return m_errorCode; }
    7ab4:	ldrb	r0, [r0, #18]
    7ab6:	bx	lr

00007ab8 <SharedSpiCard::errorData() const>:
  uint32_t errorData() const { return m_status; }
    7ab8:	ldrb	r0, [r0, #21]
    7aba:	bx	lr

00007abc <SharedSpiCard::type() const>:
  uint8_t type() const { return m_type; }
    7abc:	ldrb	r0, [r0, #22]
    7abe:	bx	lr

00007ac0 <DedicatedSpiCard::hasDedicatedSpi()>:
   * \param[in] spiConfig SPI card configuration.
   * \return true for success or false for failure.
   */
  bool begin(SdSpiConfig spiConfig);
  /** \return true, can be in dedicaded state. */
  bool hasDedicatedSpi() { return true; }
    7ac0:	movs	r0, #1
    7ac2:	bx	lr

00007ac4 <DedicatedSpiCard::isDedicatedSpi()>:
  /** \return true if in dedicated SPI state. */
  bool isDedicatedSpi() { return m_dedicatedSpi; }
    7ac4:	ldrb	r0, [r0, #28]
    7ac6:	bx	lr

00007ac8 <DedicatedSpiCard::~DedicatedSpiCard()>:
class DedicatedSpiCard : public SharedSpiCard {
    7ac8:	bx	lr
    7aca:	nop

00007acc <DedicatedSpiCard::~DedicatedSpiCard()>:
    7acc:	push	{r4, lr}
    7ace:	mov	r4, r0
    7ad0:	movs	r1, #32
    7ad2:	bl	d148 <operator delete(void*, unsigned int)>
    7ad6:	mov	r0, r4
    7ad8:	pop	{r4, pc}
    7ada:	nop

00007adc <SharedSpiCard::end()>:
void SharedSpiCard::end() {
    7adc:	push	{r3, r4, r5, lr}
  if (m_beginCalled) {
    7ade:	ldrb	r3, [r0, #16]
    7ae0:	cbz	r3, 7af8 <SharedSpiCard::end()+0x1c>
    syncDevice();
    7ae2:	mov	r5, r0
    7ae4:	mov	r4, r0
    7ae6:	ldr.w	r3, [r5], #4
    7aea:	ldr	r3, [r3, #28]
    7aec:	blx	r3
  void spiEnd() { m_spiDriver.end(); }
    7aee:	mov	r0, r5
    7af0:	bl	a0bc <SdSpiArduinoDriver::end()>
    m_beginCalled = false;
    7af4:	movs	r3, #0
    7af6:	strb	r3, [r4, #16]
}
    7af8:	pop	{r3, r4, r5, pc}
    7afa:	nop

00007afc <SharedSpiCard::writeStop()>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SharedSpiCard::writeStop() {
    7afc:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7b00:	ldr	r6, [pc, #128]	; (7b84 <SharedSpiCard::writeStop()+0x88>)
    7b02:	mov	r7, r0
    return m_spiDriver.receive();
    7b04:	add.w	r8, r0, #4
    7b08:	ldr	r5, [r6, #0]
  void set(uint16_t ms) { m_endTime = ms + millis16(); }
    7b0a:	add.w	r5, r5, #600	; 0x258
    7b0e:	uxth	r5, r5
  explicit Timeout(uint16_t ms) { set(ms); }
    7b10:	b.n	7b1a <SharedSpiCard::writeStop()+0x1e>
    7b12:	ldr	r3, [r6, #0]
  bool timedOut() { return (int16_t)(m_endTime - millis16()) < 0; }
    7b14:	subs	r3, r5, r3
    if (timeout.timedOut()) {
    7b16:	lsls	r3, r3, #16
    7b18:	bmi.n	7b3c <SharedSpiCard::writeStop()+0x40>
    7b1a:	mov	r0, r8
    7b1c:	bl	a0c4 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    7b20:	cmp	r0, #255	; 0xff
    7b22:	mov	r4, r0
    7b24:	bne.n	7b12 <SharedSpiCard::writeStop()+0x16>
    m_spiDriver.send(data);
    7b26:	movs	r1, #253	; 0xfd
    7b28:	mov	r0, r8
    7b2a:	bl	a100 <SdSpiArduinoDriver::send(unsigned char)>
  if (m_spiActive) {
    7b2e:	ldrb	r3, [r7, #19]
    7b30:	cbnz	r3, 7b66 <SharedSpiCard::writeStop()+0x6a>
  if (!waitReady(SD_WRITE_TIMEOUT)) {
    goto fail;
  }
  spiSend(STOP_TRAN_TOKEN);
  spiStop();
  m_state = IDLE_STATE;
    7b32:	movs	r3, #0
    7b34:	movs	r0, #1
    7b36:	strb	r3, [r7, #20]

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
    7b38:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_errorCode = code;
    7b3c:	movs	r3, #31
  if (m_spiActive) {
    7b3e:	ldrb	r0, [r7, #19]
    7b40:	strb	r3, [r7, #18]
    7b42:	cmp	r0, #0
    7b44:	beq.n	7b38 <SharedSpiCard::writeStop()+0x3c>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    7b46:	ldrb	r0, [r7, #17]
    7b48:	movs	r1, #1
    7b4a:	bl	a16c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    7b4e:	movs	r1, #255	; 0xff
    7b50:	mov	r0, r8
    7b52:	bl	a100 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    7b56:	mov	r0, r8
    7b58:	bl	a06c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    7b5c:	movs	r3, #0
  return false;
    7b5e:	mov	r0, r3
    m_spiActive = false;
    7b60:	strb	r3, [r7, #19]
}
    7b62:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    7b66:	movs	r1, #1
    7b68:	ldrb	r0, [r7, #17]
    7b6a:	bl	a16c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    7b6e:	mov	r1, r4
    7b70:	mov	r0, r8
    7b72:	bl	a100 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    7b76:	mov	r0, r8
    7b78:	bl	a06c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    7b7c:	movs	r3, #0
    7b7e:	strb	r3, [r7, #19]
}
    7b80:	b.n	7b32 <SharedSpiCard::writeStop()+0x36>
    7b82:	nop
    7b84:	.word	0x20007b08

00007b88 <SharedSpiCard::isBusy()>:
bool SharedSpiCard::isBusy() {
    7b88:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (m_state == READ_STATE) {
    7b8c:	ldrb	r3, [r0, #20]
    7b8e:	cmp	r3, #1
    7b90:	beq.n	7bfe <SharedSpiCard::isBusy()+0x76>
  if (!spiActive) {
    7b92:	ldrb	r6, [r0, #19]
    7b94:	mov	r4, r0
    7b96:	cbz	r6, 7bac <SharedSpiCard::isBusy()+0x24>
    return m_spiDriver.receive();
    7b98:	adds	r0, #4
    7b9a:	bl	a0c4 <SdSpiArduinoDriver::receive()>
  bool rtn = 0XFF != spiReceive();
    7b9e:	subs.w	r5, r0, #255	; 0xff
    7ba2:	it	ne
    7ba4:	movne	r5, #1
}
    7ba6:	mov	r0, r5
    7ba8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  void spiActivate() { m_spiDriver.activate(); }
    7bac:	adds	r7, r0, #4
    m_spiActive = true;
    7bae:	mov.w	r8, #1
    7bb2:	mov	r0, r7
    7bb4:	bl	a030 <SdSpiArduinoDriver::activate()>
  void spiSelect() { sdCsWrite(m_csPin, false); }
    7bb8:	mov	r1, r6
    7bba:	ldrb	r0, [r4, #17]
    7bbc:	strb.w	r8, [r4, #19]
    7bc0:	bl	a16c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    7bc4:	movs	r1, #255	; 0xff
    7bc6:	mov	r0, r7
    7bc8:	bl	a100 <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
    7bcc:	mov	r0, r7
    7bce:	bl	a0c4 <SdSpiArduinoDriver::receive()>
  if (m_spiActive) {
    7bd2:	ldrb	r3, [r4, #19]
  bool rtn = 0XFF != spiReceive();
    7bd4:	subs.w	r5, r0, #255	; 0xff
    7bd8:	it	ne
    7bda:	movne	r5, #1
  if (m_spiActive) {
    7bdc:	cmp	r3, #0
    7bde:	beq.n	7ba6 <SharedSpiCard::isBusy()+0x1e>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    7be0:	mov	r1, r8
    7be2:	ldrb	r0, [r4, #17]
    7be4:	bl	a16c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    7be8:	movs	r1, #255	; 0xff
    7bea:	mov	r0, r7
    7bec:	bl	a100 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    7bf0:	mov	r0, r7
    7bf2:	bl	a06c <SdSpiArduinoDriver::deactivate()>
}
    7bf6:	mov	r0, r5
    m_spiActive = false;
    7bf8:	strb	r6, [r4, #19]
}
    7bfa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return false;
    7bfe:	movs	r5, #0
}
    7c00:	mov	r0, r5
    7c02:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7c06:	nop

00007c08 <SharedSpiCard::readData(unsigned char*, unsigned int)>:
bool SharedSpiCard::readData(uint8_t* dst, size_t count) {
    7c08:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7c0c:	ldr	r7, [pc, #128]	; (7c90 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x88>)
    7c0e:	mov	r4, r0
    7c10:	mov	r8, r1
    7c12:	mov	r9, r2
    7c14:	ldr	r5, [r7, #0]
    return m_spiDriver.receive();
    7c16:	adds	r6, r0, #4
  void set(uint16_t ms) { m_endTime = ms + millis16(); }
    7c18:	add.w	r5, r5, #300	; 0x12c
    7c1c:	uxth	r5, r5
  explicit Timeout(uint16_t ms) { set(ms); }
    7c1e:	b.n	7c28 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x20>
    7c20:	ldr	r3, [r7, #0]
  bool timedOut() { return (int16_t)(m_endTime - millis16()) < 0; }
    7c22:	subs	r3, r5, r3
    if (timeout.timedOut()) {
    7c24:	lsls	r3, r3, #16
    7c26:	bmi.n	7c44 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x3c>
    7c28:	mov	r0, r6
    7c2a:	bl	a0c4 <SdSpiArduinoDriver::receive()>
  while ((m_status = spiReceive()) == 0XFF) {
    7c2e:	cmp	r0, #255	; 0xff
    7c30:	strb	r0, [r4, #21]
    7c32:	beq.n	7c20 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x18>
  if (m_status != DATA_START_SECTOR) {
    7c34:	cmp	r0, #254	; 0xfe
    7c36:	beq.n	7c6e <SharedSpiCard::readData(unsigned char*, unsigned int)+0x66>
    7c38:	movs	r3, #25
  if (m_spiActive) {
    7c3a:	ldrb	r0, [r4, #19]
    m_errorCode = code;
    7c3c:	strb	r3, [r4, #18]
    7c3e:	cbnz	r0, 7c4e <SharedSpiCard::readData(unsigned char*, unsigned int)+0x46>
}
    7c40:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    7c44:	movs	r3, #30
  if (m_spiActive) {
    7c46:	ldrb	r0, [r4, #19]
    7c48:	strb	r3, [r4, #18]
    7c4a:	cmp	r0, #0
    7c4c:	beq.n	7c40 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x38>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    7c4e:	ldrb	r0, [r4, #17]
    7c50:	movs	r1, #1
    7c52:	bl	a16c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    7c56:	movs	r1, #255	; 0xff
    7c58:	mov	r0, r6
    7c5a:	bl	a100 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    7c5e:	mov	r0, r6
    7c60:	bl	a06c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    7c64:	movs	r3, #0
  return false;
    7c66:	mov	r0, r3
    m_spiActive = false;
    7c68:	strb	r3, [r4, #19]
}
    7c6a:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return m_spiDriver.receive(buf, n);
    7c6e:	mov	r2, r9
    7c70:	mov	r1, r8
    7c72:	mov	r0, r6
    7c74:	bl	a0dc <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>
  if ((m_status = spiReceive(dst, count))) {
    7c78:	strb	r0, [r4, #21]
    7c7a:	cbnz	r0, 7c8c <SharedSpiCard::readData(unsigned char*, unsigned int)+0x84>
    return m_spiDriver.receive();
    7c7c:	mov	r0, r6
    7c7e:	bl	a0c4 <SdSpiArduinoDriver::receive()>
    7c82:	mov	r0, r6
    7c84:	bl	a0c4 <SdSpiArduinoDriver::receive()>
  return true;
    7c88:	movs	r0, #1
    7c8a:	b.n	7c40 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x38>
    7c8c:	movs	r3, #38	; 0x26
    7c8e:	b.n	7c3a <SharedSpiCard::readData(unsigned char*, unsigned int)+0x32>
    7c90:	.word	0x20007b08

00007c94 <SharedSpiCard::readStop()>:
bool SharedSpiCard::readStop() {
    7c94:	push	{r4, r5, r6, r7, lr}
  m_state = IDLE_STATE;
    7c96:	movs	r7, #0
bool SharedSpiCard::readStop() {
    7c98:	sub	sp, #12
  if (cardCommand(CMD12, 0)) {
    7c9a:	movs	r1, #12
bool SharedSpiCard::readStop() {
    7c9c:	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
    7c9e:	mov	r2, r7
  m_state = IDLE_STATE;
    7ca0:	strb	r7, [r0, #20]
  if (cardCommand(CMD12, 0)) {
    7ca2:	bl	7d1c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    7ca6:	cbnz	r0, 7cd6 <SharedSpiCard::readStop()+0x42>
  if (m_spiActive) {
    7ca8:	ldrb	r6, [r4, #19]
    7caa:	cbnz	r6, 7cb4 <SharedSpiCard::readStop()+0x20>
  return true;
    7cac:	movs	r6, #1
}
    7cae:	mov	r0, r6
    7cb0:	add	sp, #12
    7cb2:	pop	{r4, r5, r6, r7, pc}
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    7cb4:	mov	r5, r0
    7cb6:	movs	r1, #1
    7cb8:	ldrb	r0, [r4, #17]
    7cba:	bl	a16c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    7cbe:	adds	r0, r4, #4
    7cc0:	movs	r1, #255	; 0xff
    7cc2:	str	r0, [sp, #4]
    7cc4:	bl	a100 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    7cc8:	ldr	r0, [sp, #4]
    7cca:	bl	a06c <SdSpiArduinoDriver::deactivate()>
    7cce:	mov	r0, r6
    m_spiActive = false;
    7cd0:	strb	r5, [r4, #19]
}
    7cd2:	add	sp, #12
    7cd4:	pop	{r4, r5, r6, r7, pc}
    m_errorCode = code;
    7cd6:	movs	r3, #9
  if (m_spiActive) {
    7cd8:	ldrb	r6, [r4, #19]
    7cda:	strb	r3, [r4, #18]
    7cdc:	cmp	r6, #0
    7cde:	beq.n	7cae <SharedSpiCard::readStop()+0x1a>
    m_spiDriver.send(data);
    7ce0:	adds	r5, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    7ce2:	ldrb	r0, [r4, #17]
    7ce4:	movs	r1, #1
}
    7ce6:	mov	r6, r7
    7ce8:	bl	a16c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    7cec:	movs	r1, #255	; 0xff
    7cee:	mov	r0, r5
    7cf0:	bl	a100 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    7cf4:	mov	r0, r5
    7cf6:	bl	a06c <SdSpiArduinoDriver::deactivate()>
}
    7cfa:	mov	r0, r6
    m_spiActive = false;
    7cfc:	strb	r7, [r4, #19]
}
    7cfe:	add	sp, #12
    7d00:	pop	{r4, r5, r6, r7, pc}
    7d02:	nop

00007d04 <SharedSpiCard::syncDevice()>:
  if (m_state == WRITE_STATE) {
    7d04:	ldrb	r2, [r0, #20]
    7d06:	cmp	r2, #2
    7d08:	beq.n	7d12 <SharedSpiCard::syncDevice()+0xe>
  if (m_state == READ_STATE) {
    7d0a:	cmp	r2, #1
    7d0c:	beq.n	7d18 <SharedSpiCard::syncDevice()+0x14>
}
    7d0e:	movs	r0, #1
    7d10:	bx	lr
    return writeStop();
    7d12:	ldr	r3, [r0, #0]
    7d14:	ldr	r3, [r3, #104]	; 0x68
    7d16:	bx	r3
    return readStop();
    7d18:	b.w	7c94 <SharedSpiCard::readStop()>

00007d1c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>:
uint8_t SharedSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    7d1c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!syncDevice()) {
    7d20:	ldr	r3, [r0, #0]
uint8_t SharedSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    7d22:	sub	sp, #8
    7d24:	mov	r7, r1
    7d26:	ldr	r1, [pc, #216]	; (7e00 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xe4>)
    7d28:	str	r2, [sp, #4]
    7d2a:	mov	r6, r0
  if (!syncDevice()) {
    7d2c:	ldr	r2, [r3, #28]
    7d2e:	cmp	r2, r1
    7d30:	bne.n	7dee <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xd2>
  if (m_state == WRITE_STATE) {
    7d32:	ldrb	r2, [r0, #20]
    7d34:	cmp	r2, #2
    7d36:	beq.n	7dc0 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xa4>
  if (m_state == READ_STATE) {
    7d38:	cmp	r2, #1
    7d3a:	beq.n	7df6 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xda>
  if (!m_spiActive) {
    7d3c:	ldrb	r4, [r6, #19]
    7d3e:	cmp	r4, #0
    7d40:	beq.n	7dd0 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xb4>
  void spiActivate() { m_spiDriver.activate(); }
    7d42:	adds	r5, r6, #4
  if (cmd != CMD0 && cmd != CMD12 && !waitReady(SD_CMD_TIMEOUT)) {
    7d44:	cbz	r7, 7d6e <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x52>
    7d46:	cmp	r7, #12
    7d48:	beq.n	7d6e <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x52>
    7d4a:	ldr.w	r8, [pc, #184]	; 7e04 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xe8>
    7d4e:	ldr.w	r4, [r8]
  void set(uint16_t ms) { m_endTime = ms + millis16(); }
    7d52:	add.w	r4, r4, #300	; 0x12c
    7d56:	uxth	r4, r4
  explicit Timeout(uint16_t ms) { set(ms); }
    7d58:	b.n	7d64 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x48>
    7d5a:	ldr.w	r3, [r8]
  bool timedOut() { return (int16_t)(m_endTime - millis16()) < 0; }
    7d5e:	subs	r3, r4, r3
    if (timeout.timedOut()) {
    7d60:	lsls	r1, r3, #16
    7d62:	bmi.n	7dc8 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xac>
    return m_spiDriver.receive();
    7d64:	mov	r0, r5
    7d66:	bl	a0c4 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    7d6a:	cmp	r0, #255	; 0xff
    7d6c:	bne.n	7d5a <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x3e>
    m_spiDriver.send(data);
    7d6e:	add.w	r8, sp, #4
    7d72:	add	r4, sp, #8
    7d74:	orr.w	r1, r7, #64	; 0x40
    7d78:	mov	r0, r5
    7d7a:	bl	a100 <SdSpiArduinoDriver::send(unsigned char)>
    7d7e:	ldrb.w	r1, [r4, #-1]!
    7d82:	mov	r0, r5
    7d84:	bl	a100 <SdSpiArduinoDriver::send(unsigned char)>
  for (int8_t i = 3; i >= 0; i--) {
    7d88:	cmp	r4, r8
    7d8a:	bne.n	7d7e <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x62>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
    7d8c:	cmp	r7, #0
    7d8e:	mov	r0, r5
    return m_spiDriver.receive();
    7d90:	mov.w	r4, #10
    m_spiDriver.send(data);
    7d94:	ite	eq
    7d96:	moveq	r1, #149	; 0x95
    7d98:	movne	r1, #135	; 0x87
    7d9a:	bl	a100 <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
    7d9e:	mov	r0, r5
    7da0:	bl	a0c4 <SdSpiArduinoDriver::receive()>
    7da4:	mov	r0, r5
    7da6:	bl	a0c4 <SdSpiArduinoDriver::receive()>
  } while (m_status & 0X80 && ++n < 10);
    7daa:	lsls	r2, r0, #24
    7dac:	add.w	r3, r4, #4294967295
    m_status = spiReceive();
    7db0:	strb	r0, [r6, #21]
  } while (m_status & 0X80 && ++n < 10);
    7db2:	bpl.n	7dba <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x9e>
    7db4:	ands.w	r4, r3, #255	; 0xff
    7db8:	bne.n	7da4 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x88>
}
    7dba:	add	sp, #8
    7dbc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return writeStop();
    7dc0:	ldr	r3, [r3, #104]	; 0x68
    7dc2:	blx	r3
  if (!syncDevice()) {
    7dc4:	cmp	r0, #0
    7dc6:	bne.n	7d3c <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x20>
    return 0XFF;
    7dc8:	movs	r0, #255	; 0xff
}
    7dca:	add	sp, #8
    7dcc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  void spiActivate() { m_spiDriver.activate(); }
    7dd0:	adds	r5, r6, #4
    7dd2:	mov	r0, r5
    7dd4:	bl	a030 <SdSpiArduinoDriver::activate()>
    m_spiActive = true;
    7dd8:	movs	r3, #1
  void spiSelect() { sdCsWrite(m_csPin, false); }
    7dda:	mov	r1, r4
    7ddc:	ldrb	r0, [r6, #17]
    7dde:	strb	r3, [r6, #19]
    7de0:	bl	a16c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    7de4:	movs	r1, #255	; 0xff
    7de6:	mov	r0, r5
    7de8:	bl	a100 <SdSpiArduinoDriver::send(unsigned char)>
}
    7dec:	b.n	7d44 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x28>
  if (!syncDevice()) {
    7dee:	blx	r2
    7df0:	cmp	r0, #0
    7df2:	beq.n	7dc8 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xac>
    7df4:	b.n	7d3c <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x20>
    return readStop();
    7df6:	bl	7c94 <SharedSpiCard::readStop()>
  if (!syncDevice()) {
    7dfa:	cmp	r0, #0
    7dfc:	beq.n	7dc8 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xac>
    7dfe:	b.n	7d3c <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x20>
    7e00:	.word	0x00007d05
    7e04:	.word	0x20007b08

00007e08 <SharedSpiCard::begin(SdSpiConfig)>:
bool SharedSpiCard::begin(SdSpiConfig spiConfig) {
    7e08:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7e0c:	sub	sp, #32
    7e0e:	mov	r5, r0
    7e10:	mov	sl, r2
  /** Save high speed SPISettings after SD initialization.
   *
   * \param[in] maxSck Maximum SCK frequency.
   */
  void setSckSpeed(uint32_t maxSck) {
    m_spiSettings = SPISettings(maxSck, MSBFIRST, SPI_MODE0);
    7e12:	ldr	r6, [pc, #480]	; (7ff4 <SharedSpiCard::begin(SdSpiConfig)+0x1ec>)
    7e14:	add	r4, sp, #4
  void spiBegin(SdSpiConfig spiConfig) { m_spiDriver.begin(spiConfig); }
    7e16:	adds	r7, r5, #4
    7e18:	stmia.w	r4, {r1, r2, r3}
    m_beginCalled = false;
    7e1c:	movs	r3, #0
    7e1e:	ldrb.w	r0, [sp, #4]
    7e22:	strb	r3, [r5, #16]
  m_errorCode = SD_CARD_ERROR_NONE;
    7e24:	strh	r3, [r5, #18]
    m_state = IDLE_STATE;
    7e26:	strh	r3, [r5, #20]
    m_type = 0;
    7e28:	strb	r3, [r5, #22]
  m_csPin = spiConfig.csPin;
    7e2a:	strb	r0, [r5, #17]
  sdCsInit(m_csPin);
    7e2c:	bl	a164 <sdCsInit(unsigned char)>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    7e30:	movs	r1, #1
    7e32:	ldrb	r0, [r5, #17]
    7e34:	bl	a16c <sdCsWrite(unsigned char, bool)>
    7e38:	movs	r2, #7
    7e3a:	add	r3, sp, #20
    7e3c:	strd	r6, r2, [r5, #8]
  spiBegin(spiConfig);
    7e40:	ldmia.w	r4, {r0, r1, r2}
    7e44:	stmia.w	r3, {r0, r1, r2}
  void spiBegin(SdSpiConfig spiConfig) { m_spiDriver.begin(spiConfig); }
    7e48:	mov	r0, r7
  m_beginCalled = true;
    7e4a:	movs	r4, #1
    7e4c:	ldmia	r3, {r1, r2, r3}
    7e4e:	bl	a044 <SdSpiArduinoDriver::begin(SdSpiConfig)>
  if (!m_spiActive) {
    7e52:	ldrb	r6, [r5, #19]
  m_beginCalled = true;
    7e54:	strb	r4, [r5, #16]
  if (!m_spiActive) {
    7e56:	cmp	r6, #0
    7e58:	beq.w	7f76 <SharedSpiCard::begin(SdSpiConfig)+0x16e>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    7e5c:	movs	r4, #10
    7e5e:	movs	r1, #1
    7e60:	ldrb	r0, [r5, #17]
    7e62:	bl	a16c <sdCsWrite(unsigned char, bool)>
    return m_spiDriver.receive();
    7e66:	mov	r0, r7
    7e68:	bl	a0c4 <SdSpiArduinoDriver::receive()>
  for (uint8_t i = 0; i < 10; i++) {
    7e6c:	subs	r1, r4, #1
    7e6e:	ands.w	r4, r1, #255	; 0xff
    7e72:	bne.n	7e66 <SharedSpiCard::begin(SdSpiConfig)+0x5e>
    7e74:	ldr.w	r9, [pc, #388]	; 7ffc <SharedSpiCard::begin(SdSpiConfig)+0x1f4>
  void spiSelect() { sdCsWrite(m_csPin, false); }
    7e78:	mov	r1, r4
    7e7a:	ldrb	r0, [r5, #17]
    7e7c:	bl	a16c <sdCsWrite(unsigned char, bool)>
    7e80:	ldr.w	r3, [r9]
  void set(uint16_t ms) { m_endTime = ms + millis16(); }
    7e84:	add.w	r8, r3, #2000	; 0x7d0
    7e88:	uxth.w	r8, r8
    7e8c:	b.n	7e9a <SharedSpiCard::begin(SdSpiConfig)+0x92>
    7e8e:	ldr.w	r3, [r9]
  bool timedOut() { return (int16_t)(m_endTime - millis16()) < 0; }
    7e92:	sub.w	r3, r8, r3
    if (timeout.timedOut()) {
    7e96:	lsls	r0, r3, #16
    7e98:	bmi.n	7f06 <SharedSpiCard::begin(SdSpiConfig)+0xfe>
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
    7e9a:	movs	r2, #0
    7e9c:	mov	r0, r5
    7e9e:	mov	r1, r2
    7ea0:	bl	7d1c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    7ea4:	cmp	r0, #1
    7ea6:	mov	r6, r0
    7ea8:	bne.n	7e8e <SharedSpiCard::begin(SdSpiConfig)+0x86>
    if (cardCommand(CMD8, 0x1AA) & R1_ILLEGAL_COMMAND) {
    7eaa:	movs	r1, #8
    7eac:	mov.w	r2, #426	; 0x1aa
    7eb0:	mov	r0, r5
    7eb2:	bl	7d1c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    7eb6:	lsls	r1, r0, #29
    7eb8:	bmi.n	7f18 <SharedSpiCard::begin(SdSpiConfig)+0x110>
    7eba:	movs	r4, #4
    return m_spiDriver.receive();
    7ebc:	mov	r0, r7
    7ebe:	bl	a0c4 <SdSpiArduinoDriver::receive()>
    for (uint8_t i = 0; i < 4; i++) {
    7ec2:	subs	r3, r4, #1
      m_status = spiReceive();
    7ec4:	strb	r0, [r5, #21]
    for (uint8_t i = 0; i < 4; i++) {
    7ec6:	ands.w	r4, r3, #255	; 0xff
    7eca:	bne.n	7ebc <SharedSpiCard::begin(SdSpiConfig)+0xb4>
    if (m_status == 0XAA) {
    7ecc:	cmp	r0, #170	; 0xaa
    7ece:	beq.n	7f16 <SharedSpiCard::begin(SdSpiConfig)+0x10e>
    7ed0:	ldr.w	r3, [r9]
  bool timedOut() { return (int16_t)(m_endTime - millis16()) < 0; }
    7ed4:	sub.w	r3, r8, r3
    if (timeout.timedOut()) {
    7ed8:	lsls	r2, r3, #16
    7eda:	bpl.n	7eaa <SharedSpiCard::begin(SdSpiConfig)+0xa2>
    7edc:	movs	r3, #6
  if (m_spiActive) {
    7ede:	ldrb	r0, [r5, #19]
    m_errorCode = code;
    7ee0:	strb	r3, [r5, #18]
    7ee2:	cbz	r0, 7f10 <SharedSpiCard::begin(SdSpiConfig)+0x108>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    7ee4:	ldrb	r0, [r5, #17]
    7ee6:	movs	r1, #1
    7ee8:	bl	a16c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    7eec:	movs	r1, #255	; 0xff
    7eee:	mov	r0, r7
    7ef0:	bl	a100 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    7ef4:	mov	r0, r7
    7ef6:	bl	a06c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    7efa:	movs	r3, #0
  return false;
    7efc:	mov	r0, r3
    m_spiActive = false;
    7efe:	strb	r3, [r5, #19]
}
    7f00:	add	sp, #32
    7f02:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7f06:	movs	r3, #1
  if (m_spiActive) {
    7f08:	ldrb	r0, [r5, #19]
    m_errorCode = code;
    7f0a:	strb	r3, [r5, #18]
    7f0c:	cmp	r0, #0
    7f0e:	bne.n	7ee4 <SharedSpiCard::begin(SdSpiConfig)+0xdc>
}
    7f10:	add	sp, #32
    7f12:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7f16:	movs	r6, #2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
    7f18:	ldr	r3, [r5, #0]
    7f1a:	ldr	r4, [pc, #220]	; (7ff8 <SharedSpiCard::begin(SdSpiConfig)+0x1f0>)
  void type(uint8_t value) { m_type = value; }
    7f1c:	strb	r6, [r5, #22]
    7f1e:	ldr	r3, [r3, #92]	; 0x5c
    7f20:	cmp	r3, r4
    7f22:	bne.n	7f94 <SharedSpiCard::begin(SdSpiConfig)+0x18c>
    7f24:	sub.w	r6, r6, #2
    7f28:	clz	r6, r6
    7f2c:	lsrs	r6, r6, #5
    7f2e:	lsls	r6, r6, #30
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
    7f30:	b.n	7f3e <SharedSpiCard::begin(SdSpiConfig)+0x136>
    7f32:	ldr.w	r3, [r9]
  bool timedOut() { return (int16_t)(m_endTime - millis16()) < 0; }
    7f36:	sub.w	r3, r8, r3
    if (timeout.timedOut()) {
    7f3a:	lsls	r3, r3, #16
    7f3c:	bmi.n	7f90 <SharedSpiCard::begin(SdSpiConfig)+0x188>
    cardCommand(CMD55, 0);
    7f3e:	movs	r1, #55	; 0x37
    7f40:	movs	r2, #0
    7f42:	mov	r0, r5
    7f44:	bl	7d1c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    return cardCommand(cmd, arg);
    7f48:	mov	r2, r6
    7f4a:	movs	r1, #41	; 0x29
    7f4c:	mov	r0, r5
    7f4e:	bl	7d1c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
    7f52:	cmp	r0, #0
    7f54:	bne.n	7f32 <SharedSpiCard::begin(SdSpiConfig)+0x12a>
  if (type() == SD_CARD_TYPE_SD2) {
    7f56:	ldr	r3, [r5, #0]
    7f58:	ldr	r3, [r3, #92]	; 0x5c
    7f5a:	cmp	r3, r4
    7f5c:	bne.n	7fea <SharedSpiCard::begin(SdSpiConfig)+0x1e2>
  uint8_t type() const { return m_type; }
    7f5e:	ldrb	r0, [r5, #22]
    7f60:	cmp	r0, #2
    7f62:	beq.n	7fb8 <SharedSpiCard::begin(SdSpiConfig)+0x1b0>
  if (m_spiActive) {
    7f64:	ldrb	r3, [r5, #19]
    7f66:	cbnz	r3, 7f9c <SharedSpiCard::begin(SdSpiConfig)+0x194>
    7f68:	movs	r3, #7
  return true;
    7f6a:	movs	r0, #1
    7f6c:	strd	sl, r3, [r5, #8]
}
    7f70:	add	sp, #32
    7f72:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  void spiActivate() { m_spiDriver.activate(); }
    7f76:	mov	r0, r7
    7f78:	bl	a030 <SdSpiArduinoDriver::activate()>
  void spiSelect() { sdCsWrite(m_csPin, false); }
    7f7c:	mov	r1, r6
    7f7e:	ldrb	r0, [r5, #17]
    m_spiActive = true;
    7f80:	strb	r4, [r5, #19]
    7f82:	bl	a16c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    7f86:	movs	r1, #255	; 0xff
    7f88:	mov	r0, r7
    7f8a:	bl	a100 <SdSpiArduinoDriver::send(unsigned char)>
}
    7f8e:	b.n	7e5c <SharedSpiCard::begin(SdSpiConfig)+0x54>
    7f90:	movs	r3, #23
    7f92:	b.n	7f08 <SharedSpiCard::begin(SdSpiConfig)+0x100>
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
    7f94:	mov	r0, r5
    7f96:	blx	r3
    7f98:	mov	r6, r0
    7f9a:	b.n	7f24 <SharedSpiCard::begin(SdSpiConfig)+0x11c>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    7f9c:	movs	r1, #1
    7f9e:	ldrb	r0, [r5, #17]
    7fa0:	bl	a16c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    7fa4:	movs	r1, #255	; 0xff
    7fa6:	mov	r0, r7
    7fa8:	bl	a100 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    7fac:	mov	r0, r7
    7fae:	bl	a06c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    7fb2:	movs	r3, #0
    7fb4:	strb	r3, [r5, #19]
}
    7fb6:	b.n	7f68 <SharedSpiCard::begin(SdSpiConfig)+0x160>
    if (cardCommand(CMD58, 0)) {
    7fb8:	movs	r2, #0
    7fba:	movs	r1, #58	; 0x3a
    7fbc:	mov	r0, r5
    7fbe:	bl	7d1c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    7fc2:	cbnz	r0, 7ff0 <SharedSpiCard::begin(SdSpiConfig)+0x1e8>
    return m_spiDriver.receive();
    7fc4:	mov	r0, r7
    7fc6:	bl	a0c4 <SdSpiArduinoDriver::receive()>
    if ((spiReceive() & 0XC0) == 0XC0) {
    7fca:	and.w	r0, r0, #192	; 0xc0
    7fce:	cmp	r0, #192	; 0xc0
    7fd0:	bne.n	7fd6 <SharedSpiCard::begin(SdSpiConfig)+0x1ce>
  void type(uint8_t value) { m_type = value; }
    7fd2:	movs	r3, #3
    7fd4:	strb	r3, [r5, #22]
    return m_spiDriver.receive();
    7fd6:	mov	r0, r7
    7fd8:	bl	a0c4 <SdSpiArduinoDriver::receive()>
    7fdc:	mov	r0, r7
    7fde:	bl	a0c4 <SdSpiArduinoDriver::receive()>
    7fe2:	mov	r0, r7
    7fe4:	bl	a0c4 <SdSpiArduinoDriver::receive()>
    for (uint8_t i = 0; i < 3; i++) {
    7fe8:	b.n	7f64 <SharedSpiCard::begin(SdSpiConfig)+0x15c>
  if (type() == SD_CARD_TYPE_SD2) {
    7fea:	mov	r0, r5
    7fec:	blx	r3
    7fee:	b.n	7f60 <SharedSpiCard::begin(SdSpiConfig)+0x158>
    7ff0:	movs	r3, #18
    7ff2:	b.n	7f08 <SharedSpiCard::begin(SdSpiConfig)+0x100>
    7ff4:	.word	0x00061a80
    7ff8:	.word	0x00007abd
    7ffc:	.word	0x20007b08

00008000 <SharedSpiCard::cardCMD6(unsigned long, unsigned char*)>:
bool SharedSpiCard::cardCMD6(uint32_t arg, uint8_t* status) {
    8000:	push	{r4, r5, r6, lr}
    8002:	mov	r4, r1
    8004:	sub	sp, #8
    8006:	mov	r6, r2
  if (cardCommand(CMD6, arg)) {
    8008:	movs	r1, #6
    800a:	mov	r2, r4
bool SharedSpiCard::cardCMD6(uint32_t arg, uint8_t* status) {
    800c:	mov	r4, r0
  if (cardCommand(CMD6, arg)) {
    800e:	bl	7d1c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    8012:	cbz	r0, 8042 <SharedSpiCard::cardCMD6(unsigned long, unsigned char*)+0x42>
    m_errorCode = code;
    8014:	movs	r3, #4
    8016:	strb	r3, [r4, #18]
  if (m_spiActive) {
    8018:	ldrb	r0, [r4, #19]
    801a:	cbnz	r0, 8020 <SharedSpiCard::cardCMD6(unsigned long, unsigned char*)+0x20>
}
    801c:	add	sp, #8
    801e:	pop	{r4, r5, r6, pc}
    m_spiDriver.send(data);
    8020:	adds	r5, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    8022:	ldrb	r0, [r4, #17]
    8024:	movs	r1, #1
    8026:	bl	a16c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    802a:	movs	r1, #255	; 0xff
    802c:	mov	r0, r5
    802e:	bl	a100 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    8032:	mov	r0, r5
    8034:	bl	a06c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    8038:	movs	r3, #0
  return false;
    803a:	mov	r0, r3
    m_spiActive = false;
    803c:	strb	r3, [r4, #19]
}
    803e:	add	sp, #8
    8040:	pop	{r4, r5, r6, pc}
  if (!readData(status, 64)) {
    8042:	mov	r5, r0
    8044:	movs	r2, #64	; 0x40
    8046:	mov	r1, r6
    8048:	mov	r0, r4
    804a:	bl	7c08 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    804e:	cmp	r0, #0
    8050:	beq.n	8018 <SharedSpiCard::cardCMD6(unsigned long, unsigned char*)+0x18>
  if (m_spiActive) {
    8052:	ldrb	r6, [r4, #19]
    8054:	cmp	r6, #0
    8056:	beq.n	801c <SharedSpiCard::cardCMD6(unsigned long, unsigned char*)+0x1c>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    8058:	ldrb	r0, [r4, #17]
    805a:	movs	r1, #1
    805c:	bl	a16c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    8060:	adds	r0, r4, #4
    8062:	movs	r1, #255	; 0xff
    8064:	str	r0, [sp, #4]
    8066:	bl	a100 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    806a:	ldr	r0, [sp, #4]
    806c:	bl	a06c <SdSpiArduinoDriver::deactivate()>
}
    8070:	mov	r0, r6
    m_spiActive = false;
    8072:	strb	r5, [r4, #19]
}
    8074:	add	sp, #8
    8076:	pop	{r4, r5, r6, pc}

00008078 <SharedSpiCard::readOCR(unsigned long*)>:
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    8078:	push	{r3, r4, r5, r6, r7, lr}
  if (cardCommand(CMD58, 0)) {
    807a:	movs	r2, #0
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    807c:	mov	r5, r1
  if (cardCommand(CMD58, 0)) {
    807e:	movs	r1, #58	; 0x3a
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    8080:	mov	r6, r0
  if (cardCommand(CMD58, 0)) {
    8082:	bl	7d1c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    8086:	cbnz	r0, 80c2 <SharedSpiCard::readOCR(unsigned long*)+0x4a>
    m_spiDriver.send(data);
    8088:	adds	r7, r6, #4
    808a:	adds	r4, r5, #4
    return m_spiDriver.receive();
    808c:	mov	r0, r7
    808e:	bl	a0c4 <SdSpiArduinoDriver::receive()>
    p[3 - i] = spiReceive();
    8092:	strb.w	r0, [r4, #-1]!
  for (uint8_t i = 0; i < 4; i++) {
    8096:	cmp	r5, r4
    8098:	bne.n	808c <SharedSpiCard::readOCR(unsigned long*)+0x14>
  if (m_spiActive) {
    809a:	ldrb	r4, [r6, #19]
    809c:	cbnz	r4, 80a4 <SharedSpiCard::readOCR(unsigned long*)+0x2c>
    809e:	movs	r4, #1
}
    80a0:	mov	r0, r4
    80a2:	pop	{r3, r4, r5, r6, r7, pc}
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    80a4:	ldrb	r0, [r6, #17]
    80a6:	movs	r1, #1
    80a8:	bl	a16c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    80ac:	movs	r1, #255	; 0xff
    80ae:	mov	r0, r7
    80b0:	bl	a100 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    80b4:	mov	r0, r7
    80b6:	bl	a06c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    80ba:	movs	r3, #0
}
    80bc:	mov	r0, r4
    m_spiActive = false;
    80be:	strb	r3, [r6, #19]
}
    80c0:	pop	{r3, r4, r5, r6, r7, pc}
    m_errorCode = code;
    80c2:	movs	r3, #18
  if (m_spiActive) {
    80c4:	ldrb	r4, [r6, #19]
    80c6:	strb	r3, [r6, #18]
    80c8:	cmp	r4, #0
    80ca:	beq.n	80a0 <SharedSpiCard::readOCR(unsigned long*)+0x28>
    m_spiDriver.send(data);
    80cc:	adds	r4, r6, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    80ce:	ldrb	r0, [r6, #17]
    80d0:	movs	r1, #1
    80d2:	bl	a16c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    80d6:	movs	r1, #255	; 0xff
    80d8:	mov	r0, r4
    80da:	bl	a100 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    80de:	mov	r0, r4
    80e0:	bl	a06c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    80e4:	movs	r3, #0
  return false;
    80e6:	mov	r4, r3
    m_spiActive = false;
    80e8:	strb	r3, [r6, #19]
}
    80ea:	mov	r0, r4
    80ec:	pop	{r3, r4, r5, r6, r7, pc}
    80ee:	nop

000080f0 <SharedSpiCard::readRegister(unsigned char, void*)>:
bool SharedSpiCard::readRegister(uint8_t cmd, void* buf) {
    80f0:	push	{r4, r5, r6, lr}
    80f2:	mov	r6, r2
    80f4:	sub	sp, #8
  if (cardCommand(cmd, 0)) {
    80f6:	movs	r2, #0
bool SharedSpiCard::readRegister(uint8_t cmd, void* buf) {
    80f8:	mov	r4, r0
  if (cardCommand(cmd, 0)) {
    80fa:	bl	7d1c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    80fe:	cbz	r0, 812e <SharedSpiCard::readRegister(unsigned char, void*)+0x3e>
    m_errorCode = code;
    8100:	movs	r3, #28
    8102:	strb	r3, [r4, #18]
  if (m_spiActive) {
    8104:	ldrb	r0, [r4, #19]
    8106:	cbnz	r0, 810c <SharedSpiCard::readRegister(unsigned char, void*)+0x1c>
}
    8108:	add	sp, #8
    810a:	pop	{r4, r5, r6, pc}
    m_spiDriver.send(data);
    810c:	adds	r5, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    810e:	ldrb	r0, [r4, #17]
    8110:	movs	r1, #1
    8112:	bl	a16c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    8116:	movs	r1, #255	; 0xff
    8118:	mov	r0, r5
    811a:	bl	a100 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    811e:	mov	r0, r5
    8120:	bl	a06c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    8124:	movs	r3, #0
  return false;
    8126:	mov	r0, r3
    m_spiActive = false;
    8128:	strb	r3, [r4, #19]
}
    812a:	add	sp, #8
    812c:	pop	{r4, r5, r6, pc}
  if (!readData(dst, 16)) {
    812e:	mov	r5, r0
    8130:	movs	r2, #16
    8132:	mov	r1, r6
    8134:	mov	r0, r4
    8136:	bl	7c08 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    813a:	cmp	r0, #0
    813c:	beq.n	8104 <SharedSpiCard::readRegister(unsigned char, void*)+0x14>
  if (m_spiActive) {
    813e:	ldrb	r6, [r4, #19]
    8140:	cmp	r6, #0
    8142:	beq.n	8108 <SharedSpiCard::readRegister(unsigned char, void*)+0x18>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    8144:	ldrb	r0, [r4, #17]
    8146:	movs	r1, #1
    8148:	bl	a16c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    814c:	adds	r0, r4, #4
    814e:	movs	r1, #255	; 0xff
    8150:	str	r0, [sp, #4]
    8152:	bl	a100 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    8156:	ldr	r0, [sp, #4]
    8158:	bl	a06c <SdSpiArduinoDriver::deactivate()>
}
    815c:	mov	r0, r6
    m_spiActive = false;
    815e:	strb	r5, [r4, #19]
}
    8160:	add	sp, #8
    8162:	pop	{r4, r5, r6, pc}

00008164 <SharedSpiCard::sectorCount()>:
  return readCSD(&csd) ? csd.capacity() : 0;
    8164:	ldr	r3, [r0, #0]
    8166:	ldr	r2, [pc, #144]	; (81f8 <SharedSpiCard::sectorCount()+0x94>)
    8168:	ldr	r3, [r3, #72]	; 0x48
    816a:	cmp	r3, r2
uint32_t SharedSpiCard::sectorCount() {
    816c:	push	{lr}
    816e:	sub	sp, #20
    8170:	bne.n	8190 <SharedSpiCard::sectorCount()+0x2c>
  bool readCSD(csd_t* csd) { return readRegister(CMD9, csd); }
    8172:	mov	r2, sp
    8174:	movs	r1, #9
    8176:	bl	80f0 <SharedSpiCard::readRegister(unsigned char, void*)>
  return readCSD(&csd) ? csd.capacity() : 0;
    817a:	cbz	r0, 818a <SharedSpiCard::sectorCount()+0x26>
  uint8_t csd[16];
  // Extract big endian fields.
  /** \return Capacity in sectors */
  uint32_t capacity() const {
    uint32_t c_size;
    uint8_t ver = csd[0] >> 6;
    817c:	ldrb.w	r3, [sp]
    if (ver == 0) {
    8180:	lsrs	r3, r3, #6
    8182:	beq.n	8196 <SharedSpiCard::sectorCount()+0x32>
      c_size = (uint32_t)(csd[6] & 3) << 10;
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
      uint8_t c_size_mult = (csd[9] & 3) << 1 | csd[10] >> 7;
      uint8_t read_bl_len = csd[5] & 15;
      return (c_size + 1) << (c_size_mult + read_bl_len + 2 - 9);
    } else if (ver == 1) {
    8184:	cmp	r3, #1
    8186:	beq.n	81d8 <SharedSpiCard::sectorCount()+0x74>
    8188:	movs	r0, #0
}
    818a:	add	sp, #20
    818c:	ldr.w	pc, [sp], #4
  return readCSD(&csd) ? csd.capacity() : 0;
    8190:	mov	r1, sp
    8192:	blx	r3
    8194:	b.n	817a <SharedSpiCard::sectorCount()+0x16>
      uint8_t c_size_mult = (csd[9] & 3) << 1 | csd[10] >> 7;
    8196:	ldrb.w	r3, [sp, #9]
      c_size = (uint32_t)(csd[6] & 3) << 10;
    819a:	ldrb.w	r2, [sp, #6]
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
    819e:	ldrb.w	r0, [sp, #8]
      uint8_t c_size_mult = (csd[9] & 3) << 1 | csd[10] >> 7;
    81a2:	lsls	r3, r3, #1
    81a4:	ldrb.w	r1, [sp, #10]
      c_size = (uint32_t)(csd[6] & 3) << 10;
    81a8:	lsls	r2, r2, #10
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
    81aa:	ldrb.w	ip, [sp, #7]
    81ae:	lsrs	r0, r0, #6
      uint8_t c_size_mult = (csd[9] & 3) << 1 | csd[10] >> 7;
    81b0:	and.w	r3, r3, #6
      c_size = (uint32_t)(csd[6] & 3) << 10;
    81b4:	and.w	r2, r2, #3072	; 0xc00
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
    81b8:	orr.w	r0, r0, ip, lsl #2
      return (c_size + 1) << (c_size_mult + read_bl_len + 2 - 9);
    81bc:	orr.w	r3, r3, r1, lsr #7
      uint8_t read_bl_len = csd[5] & 15;
    81c0:	ldrb.w	r1, [sp, #5]
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
    81c4:	orrs	r0, r2
      return (c_size + 1) << (c_size_mult + read_bl_len + 2 - 9);
    81c6:	and.w	r2, r1, #15
    81ca:	adds	r0, #1
    81cc:	add	r3, r2
    81ce:	subs	r3, #7
    81d0:	lsls	r0, r3
}
    81d2:	add	sp, #20
    81d4:	ldr.w	pc, [sp], #4
      c_size = (uint32_t)(csd[7] & 63) << 16;
    81d8:	ldrb.w	r3, [sp, #7]
      c_size |= (uint32_t)csd[8] << 8;
      c_size |= csd[9];
    81dc:	ldrh.w	r0, [sp, #8]
      c_size = (uint32_t)(csd[7] & 63) << 16;
    81e0:	lsls	r3, r3, #16
      c_size |= csd[9];
    81e2:	rev16	r0, r0
      c_size = (uint32_t)(csd[7] & 63) << 16;
    81e4:	and.w	r3, r3, #4128768	; 0x3f0000
      c_size |= csd[9];
    81e8:	uxth	r0, r0
    81ea:	orrs	r0, r3
      return (c_size + 1) << 10;
    81ec:	adds	r0, #1
    81ee:	lsls	r0, r0, #10
    81f0:	add	sp, #20
    81f2:	ldr.w	pc, [sp], #4
    81f6:	nop
    81f8:	.word	0x000085c9

000081fc <SharedSpiCard::readStart(unsigned long)>:
  if (type() != SD_CARD_TYPE_SDHC) {
    81fc:	ldr	r3, [r0, #0]
bool SharedSpiCard::readStart(uint32_t sector) {
    81fe:	mov	r2, r1
    8200:	push	{r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    8202:	ldr	r3, [r3, #92]	; 0x5c
bool SharedSpiCard::readStart(uint32_t sector) {
    8204:	sub	sp, #12
    8206:	ldr	r5, [pc, #88]	; (8260 <SharedSpiCard::readStart(unsigned long)+0x64>)
    8208:	mov	r4, r0
  if (type() != SD_CARD_TYPE_SDHC) {
    820a:	cmp	r3, r5
    820c:	bne.n	8258 <SharedSpiCard::readStart(unsigned long)+0x5c>
  uint8_t type() const { return m_type; }
    820e:	ldrb	r0, [r0, #22]
    8210:	cmp	r0, #3
  if (cardCommand(CMD18, sector)) {
    8212:	mov.w	r1, #18
    8216:	mov	r0, r4
    sector <<= 9;
    8218:	it	ne
    821a:	lslne	r2, r2, #9
  if (cardCommand(CMD18, sector)) {
    821c:	bl	7d1c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    8220:	cbnz	r0, 822c <SharedSpiCard::readStart(unsigned long)+0x30>
  m_state = READ_STATE;
    8222:	movs	r3, #1
  return true;
    8224:	mov	r0, r3
  m_state = READ_STATE;
    8226:	strb	r3, [r4, #20]
}
    8228:	add	sp, #12
    822a:	pop	{r4, r5, pc}
    m_errorCode = code;
    822c:	movs	r3, #12
  if (m_spiActive) {
    822e:	ldrb	r0, [r4, #19]
    8230:	strb	r3, [r4, #18]
    8232:	cmp	r0, #0
    8234:	beq.n	8228 <SharedSpiCard::readStart(unsigned long)+0x2c>
    m_spiDriver.send(data);
    8236:	adds	r5, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    8238:	ldrb	r0, [r4, #17]
    823a:	movs	r1, #1
    823c:	bl	a16c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    8240:	movs	r1, #255	; 0xff
    8242:	mov	r0, r5
    8244:	bl	a100 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    8248:	mov	r0, r5
    824a:	bl	a06c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    824e:	movs	r3, #0
}
    8250:	mov	r0, r3
    m_spiActive = false;
    8252:	strb	r3, [r4, #19]
}
    8254:	add	sp, #12
    8256:	pop	{r4, r5, pc}
    8258:	str	r1, [sp, #4]
  if (type() != SD_CARD_TYPE_SDHC) {
    825a:	blx	r3
    825c:	ldr	r2, [sp, #4]
    825e:	b.n	8210 <SharedSpiCard::readStart(unsigned long)+0x14>
    8260:	.word	0x00007abd

00008264 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)>:
  m_dedicatedSpi = spiOptionDedicated(spiConfig.options);
  return true;
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::readSector(uint32_t sector, uint8_t* dst) {
  return readSectors(sector, dst, 1);
    8264:	ldr	r3, [r0, #0]
bool DedicatedSpiCard::readSector(uint32_t sector, uint8_t* dst) {
    8266:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return readSectors(sector, dst, 1);
    826a:	ldr	r7, [r3, #20]
    826c:	ldr	r3, [pc, #88]	; (82c8 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x64>)
    826e:	cmp	r7, r3
    8270:	bne.n	82b2 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x4e>
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
  if (sdState() != READ_STATE || sector != m_curSector) {
    8272:	ldrb	r3, [r0, #20]
    8274:	mov	r4, r0
    8276:	mov	r5, r1
    8278:	mov	r6, r2
    827a:	cmp	r3, #1
    827c:	bne.n	8284 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x20>
    827e:	ldr	r3, [r0, #24]
    8280:	cmp	r1, r3
    8282:	beq.n	8290 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x2c>
    if (!readStart(sector)) {
    8284:	mov	r1, r5
    8286:	mov	r0, r4
    8288:	bl	81fc <SharedSpiCard::readStart(unsigned long)>
    828c:	cbz	r0, 82ac <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x48>
      goto fail;
    }
    m_curSector = sector;
    828e:	str	r5, [r4, #24]
bool SharedSpiCard::readData(uint8_t* dst) { return readData(dst, 512); }
    8290:	mov.w	r2, #512	; 0x200
    8294:	mov	r1, r6
    8296:	mov	r0, r4
    8298:	bl	7c08 <SharedSpiCard::readData(unsigned char*, unsigned int)>
  }
  for (size_t i = 0; i < ns; i++, dst += 512) {
    if (!readData(dst)) {
    829c:	cbz	r0, 82ac <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x48>
      goto fail;
    }
  }
  m_curSector += ns;
    829e:	ldr	r3, [r4, #24]
  return m_dedicatedSpi ? true : readStop();
    82a0:	ldrb	r0, [r4, #28]
  m_curSector += ns;
    82a2:	adds	r3, #1
    82a4:	str	r3, [r4, #24]
  return m_dedicatedSpi ? true : readStop();
    82a6:	cbz	r0, 82bc <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x58>
}
    82a8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

fail:
  return false;
    82ac:	movs	r0, #0
}
    82ae:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return readSectors(sector, dst, 1);
    82b2:	mov	ip, r7
    82b4:	movs	r3, #1
}
    82b6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return readSectors(sector, dst, 1);
    82ba:	bx	ip
  return m_dedicatedSpi ? true : readStop();
    82bc:	mov	r0, r4
}
    82be:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return m_dedicatedSpi ? true : readStop();
    82c2:	b.w	7c94 <SharedSpiCard::readStop()>
    82c6:	nop
    82c8:	.word	0x00008641

000082cc <SharedSpiCard::writeStart(unsigned long)>:
  if (type() != SD_CARD_TYPE_SDHC) {
    82cc:	ldr	r3, [r0, #0]
bool SharedSpiCard::writeStart(uint32_t sector) {
    82ce:	mov	r2, r1
    82d0:	push	{r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    82d2:	ldr	r3, [r3, #92]	; 0x5c
bool SharedSpiCard::writeStart(uint32_t sector) {
    82d4:	sub	sp, #12
    82d6:	ldr	r5, [pc, #88]	; (8330 <SharedSpiCard::writeStart(unsigned long)+0x64>)
    82d8:	mov	r4, r0
  if (type() != SD_CARD_TYPE_SDHC) {
    82da:	cmp	r3, r5
    82dc:	bne.n	8328 <SharedSpiCard::writeStart(unsigned long)+0x5c>
  uint8_t type() const { return m_type; }
    82de:	ldrb	r0, [r0, #22]
    82e0:	cmp	r0, #3
  if (cardCommand(CMD25, sector)) {
    82e2:	mov.w	r1, #25
    82e6:	mov	r0, r4
    sector <<= 9;
    82e8:	it	ne
    82ea:	lslne	r2, r2, #9
  if (cardCommand(CMD25, sector)) {
    82ec:	bl	7d1c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    82f0:	cbnz	r0, 82fc <SharedSpiCard::writeStart(unsigned long)+0x30>
  m_state = WRITE_STATE;
    82f2:	movs	r3, #2
  return true;
    82f4:	movs	r0, #1
  m_state = WRITE_STATE;
    82f6:	strb	r3, [r4, #20]
}
    82f8:	add	sp, #12
    82fa:	pop	{r4, r5, pc}
    m_errorCode = code;
    82fc:	movs	r3, #14
  if (m_spiActive) {
    82fe:	ldrb	r0, [r4, #19]
    8300:	strb	r3, [r4, #18]
    8302:	cmp	r0, #0
    8304:	beq.n	82f8 <SharedSpiCard::writeStart(unsigned long)+0x2c>
    m_spiDriver.send(data);
    8306:	adds	r5, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    8308:	ldrb	r0, [r4, #17]
    830a:	movs	r1, #1
    830c:	bl	a16c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    8310:	movs	r1, #255	; 0xff
    8312:	mov	r0, r5
    8314:	bl	a100 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    8318:	mov	r0, r5
    831a:	bl	a06c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    831e:	movs	r3, #0
}
    8320:	mov	r0, r3
    m_spiActive = false;
    8322:	strb	r3, [r4, #19]
}
    8324:	add	sp, #12
    8326:	pop	{r4, r5, pc}
    8328:	str	r1, [sp, #4]
  if (type() != SD_CARD_TYPE_SDHC) {
    832a:	blx	r3
    832c:	ldr	r2, [sp, #4]
    832e:	b.n	82e0 <SharedSpiCard::writeStart(unsigned long)+0x14>
    8330:	.word	0x00007abd

00008334 <SharedSpiCard::erase(unsigned long, unsigned long)>:
  if (!readCSD(&csd)) {
    8334:	ldr	r3, [r0, #0]
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    8336:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (!readCSD(&csd)) {
    833a:	ldr	r3, [r3, #72]	; 0x48
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    833c:	mov	r7, r2
    833e:	ldr	r2, [pc, #260]	; (8444 <SharedSpiCard::erase(unsigned long, unsigned long)+0x110>)
    8340:	sub	sp, #20
    8342:	mov	r4, r0
    8344:	mov	r6, r1
    8346:	cmp	r3, r2
    8348:	bne.n	83d6 <SharedSpiCard::erase(unsigned long, unsigned long)+0xa2>
  bool readCSD(csd_t* csd) { return readRegister(CMD9, csd); }
    834a:	mov	r2, sp
    834c:	movs	r1, #9
    834e:	bl	80f0 <SharedSpiCard::readRegister(unsigned char, void*)>
    8352:	mov	r5, r0
  if (!readCSD(&csd)) {
    8354:	cbz	r5, 8384 <SharedSpiCard::erase(unsigned long, unsigned long)+0x50>
    } else {
      return 0;
    }
  }
  /** \return true if erase granularity is single block. */
  bool eraseSingleBlock() const { return csd[10] & 0X40; }
    8356:	ldrb.w	r3, [sp, #10]
  if (!csd.eraseSingleBlock()) {
    835a:	lsls	r2, r3, #25
    835c:	bpl.n	8390 <SharedSpiCard::erase(unsigned long, unsigned long)+0x5c>
  if (m_type != SD_CARD_TYPE_SDHC) {
    835e:	ldrb	r3, [r4, #22]
    8360:	cmp	r3, #3
    8362:	beq.n	8368 <SharedSpiCard::erase(unsigned long, unsigned long)+0x34>
    firstSector <<= 9;
    8364:	lsls	r6, r6, #9
    lastSector <<= 9;
    8366:	lsls	r7, r7, #9
  if (cardCommand(CMD32, firstSector) || cardCommand(CMD33, lastSector) ||
    8368:	mov	r2, r6
    836a:	movs	r1, #32
    836c:	mov	r0, r4
    836e:	bl	7d1c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    8372:	cbnz	r0, 8380 <SharedSpiCard::erase(unsigned long, unsigned long)+0x4c>
    8374:	mov	r2, r7
    8376:	movs	r1, #33	; 0x21
    8378:	mov	r0, r4
    837a:	bl	7d1c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    837e:	cbz	r0, 83de <SharedSpiCard::erase(unsigned long, unsigned long)+0xaa>
    m_errorCode = code;
    8380:	movs	r3, #39	; 0x27
    8382:	strb	r3, [r4, #18]
  if (m_spiActive) {
    8384:	ldrb	r5, [r4, #19]
    8386:	cbnz	r5, 83b0 <SharedSpiCard::erase(unsigned long, unsigned long)+0x7c>
}
    8388:	mov	r0, r5
    838a:	add	sp, #20
    838c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  /** \return erase size in 512 byte blocks if eraseSingleBlock is false. */
  int eraseSize() const { return ((csd[10] & 0X3F) << 1 | csd[11] >> 7) + 1; }
    8390:	lsls	r3, r3, #1
    8392:	ldrb.w	r2, [sp, #11]
    8396:	and.w	r3, r3, #126	; 0x7e
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    839a:	orr.w	r3, r3, r2, lsr #7
    839e:	adds	r2, r7, #1
    83a0:	orrs	r2, r6
    83a2:	tst	r3, r2
    83a4:	beq.n	835e <SharedSpiCard::erase(unsigned long, unsigned long)+0x2a>
    83a6:	movs	r3, #40	; 0x28
  if (m_spiActive) {
    83a8:	ldrb	r5, [r4, #19]
    83aa:	strb	r3, [r4, #18]
    83ac:	cmp	r5, #0
    83ae:	beq.n	8388 <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
    m_spiDriver.send(data);
    83b0:	adds	r5, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    83b2:	ldrb	r0, [r4, #17]
    83b4:	movs	r1, #1
    83b6:	bl	a16c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    83ba:	movs	r1, #255	; 0xff
    83bc:	mov	r0, r5
    83be:	bl	a100 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    83c2:	mov	r0, r5
    83c4:	bl	a06c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    83c8:	movs	r3, #0
  return false;
    83ca:	mov	r5, r3
    m_spiActive = false;
    83cc:	strb	r3, [r4, #19]
}
    83ce:	mov	r0, r5
    83d0:	add	sp, #20
    83d2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (!readCSD(&csd)) {
    83d6:	mov	r1, sp
    83d8:	blx	r3
    83da:	mov	r5, r0
    83dc:	b.n	8354 <SharedSpiCard::erase(unsigned long, unsigned long)+0x20>
      cardCommand(CMD38, 0)) {
    83de:	mov	r2, r0
    83e0:	movs	r1, #38	; 0x26
    83e2:	mov	r0, r4
    83e4:	bl	7d1c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
  if (cardCommand(CMD32, firstSector) || cardCommand(CMD33, lastSector) ||
    83e8:	cmp	r0, #0
    83ea:	bne.n	8380 <SharedSpiCard::erase(unsigned long, unsigned long)+0x4c>
    83ec:	ldr.w	r8, [pc, #88]	; 8448 <SharedSpiCard::erase(unsigned long, unsigned long)+0x114>
  void set(uint16_t ms) { m_endTime = ms + millis16(); }
    83f0:	movw	r7, #10000	; 0x2710
    return m_spiDriver.receive();
    83f4:	add.w	r9, r4, #4
    83f8:	ldr.w	r3, [r8]
    83fc:	add	r7, r3
    83fe:	uxth	r7, r7
  explicit Timeout(uint16_t ms) { set(ms); }
    8400:	b.n	840c <SharedSpiCard::erase(unsigned long, unsigned long)+0xd8>
    8402:	ldr.w	r3, [r8]
  bool timedOut() { return (int16_t)(m_endTime - millis16()) < 0; }
    8406:	subs	r3, r7, r3
    if (timeout.timedOut()) {
    8408:	lsls	r3, r3, #16
    840a:	bmi.n	843c <SharedSpiCard::erase(unsigned long, unsigned long)+0x108>
    840c:	mov	r0, r9
    840e:	bl	a0c4 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    8412:	cmp	r0, #255	; 0xff
    8414:	mov	r6, r0
    8416:	bne.n	8402 <SharedSpiCard::erase(unsigned long, unsigned long)+0xce>
  if (m_spiActive) {
    8418:	ldrb	r3, [r4, #19]
    841a:	cmp	r3, #0
    841c:	beq.n	8388 <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    841e:	movs	r1, #1
    8420:	ldrb	r0, [r4, #17]
  return true;
    8422:	mov	r5, r3
    8424:	bl	a16c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    8428:	mov	r1, r6
    842a:	mov	r0, r9
    842c:	bl	a100 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    8430:	mov	r0, r9
    8432:	bl	a06c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    8436:	movs	r3, #0
    8438:	strb	r3, [r4, #19]
}
    843a:	b.n	8388 <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
    m_errorCode = code;
    843c:	movs	r3, #41	; 0x29
    843e:	strb	r3, [r4, #18]
    goto fail;
    8440:	b.n	8384 <SharedSpiCard::erase(unsigned long, unsigned long)+0x50>
    8442:	nop
    8444:	.word	0x000085c9
    8448:	.word	0x20007b08

0000844c <SharedSpiCard::readSCR(scr_t*)>:
bool SharedSpiCard::readSCR(scr_t* scr) {
    844c:	push	{r4, r5, r6, lr}
    844e:	mov	r4, r0
    8450:	sub	sp, #8
    cardCommand(CMD55, 0);
    8452:	movs	r2, #0
    8454:	mov	r6, r1
    8456:	movs	r1, #55	; 0x37
    8458:	bl	7d1c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    return cardCommand(cmd, arg);
    845c:	movs	r2, #0
    845e:	movs	r1, #51	; 0x33
    8460:	mov	r0, r4
    8462:	bl	7d1c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
  if (cardAcmd(ACMD51, 0)) {
    8466:	cbz	r0, 8496 <SharedSpiCard::readSCR(scr_t*)+0x4a>
    m_errorCode = code;
    8468:	movs	r3, #24
    846a:	strb	r3, [r4, #18]
  if (m_spiActive) {
    846c:	ldrb	r0, [r4, #19]
    846e:	cbnz	r0, 8474 <SharedSpiCard::readSCR(scr_t*)+0x28>
}
    8470:	add	sp, #8
    8472:	pop	{r4, r5, r6, pc}
    m_spiDriver.send(data);
    8474:	adds	r5, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    8476:	ldrb	r0, [r4, #17]
    8478:	movs	r1, #1
    847a:	bl	a16c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    847e:	movs	r1, #255	; 0xff
    8480:	mov	r0, r5
    8482:	bl	a100 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    8486:	mov	r0, r5
    8488:	bl	a06c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    848c:	movs	r3, #0
  return false;
    848e:	mov	r0, r3
    m_spiActive = false;
    8490:	strb	r3, [r4, #19]
}
    8492:	add	sp, #8
    8494:	pop	{r4, r5, r6, pc}
  if (!readData(dst, sizeof(scr_t))) {
    8496:	mov	r5, r0
    8498:	movs	r2, #8
    849a:	mov	r1, r6
    849c:	mov	r0, r4
    849e:	bl	7c08 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    84a2:	cmp	r0, #0
    84a4:	beq.n	846c <SharedSpiCard::readSCR(scr_t*)+0x20>
  if (m_spiActive) {
    84a6:	ldrb	r6, [r4, #19]
    84a8:	cmp	r6, #0
    84aa:	beq.n	8470 <SharedSpiCard::readSCR(scr_t*)+0x24>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    84ac:	ldrb	r0, [r4, #17]
    84ae:	movs	r1, #1
    84b0:	bl	a16c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    84b4:	adds	r0, r4, #4
    84b6:	movs	r1, #255	; 0xff
    84b8:	str	r0, [sp, #4]
    84ba:	bl	a100 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    84be:	ldr	r0, [sp, #4]
    84c0:	bl	a06c <SdSpiArduinoDriver::deactivate()>
}
    84c4:	mov	r0, r6
    m_spiActive = false;
    84c6:	strb	r5, [r4, #19]
}
    84c8:	add	sp, #8
    84ca:	pop	{r4, r5, r6, pc}

000084cc <SharedSpiCard::readSDS(sds_t*)>:
bool SharedSpiCard::readSDS(sds_t* sds) {
    84cc:	push	{r3, r4, r5, r6, r7, lr}
    84ce:	mov	r4, r0
    cardCommand(CMD55, 0);
    84d0:	movs	r2, #0
    84d2:	mov	r5, r1
    84d4:	movs	r1, #55	; 0x37
    84d6:	bl	7d1c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    return cardCommand(cmd, arg);
    84da:	movs	r2, #0
    84dc:	movs	r1, #13
    84de:	mov	r0, r4
    84e0:	bl	7d1c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
  if (cardAcmd(ACMD13, 0) || spiReceive()) {
    84e4:	cbz	r0, 8510 <SharedSpiCard::readSDS(sds_t*)+0x44>
    m_errorCode = code;
    84e6:	movs	r3, #21
    84e8:	strb	r3, [r4, #18]
  if (m_spiActive) {
    84ea:	ldrb	r0, [r4, #19]
    84ec:	cbnz	r0, 84f0 <SharedSpiCard::readSDS(sds_t*)+0x24>
}
    84ee:	pop	{r3, r4, r5, r6, r7, pc}
    m_spiDriver.send(data);
    84f0:	adds	r5, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    84f2:	ldrb	r0, [r4, #17]
    84f4:	movs	r1, #1
    84f6:	bl	a16c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    84fa:	movs	r1, #255	; 0xff
    84fc:	mov	r0, r5
    84fe:	bl	a100 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    8502:	mov	r0, r5
    8504:	bl	a06c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    8508:	movs	r3, #0
  return false;
    850a:	mov	r0, r3
    m_spiActive = false;
    850c:	strb	r3, [r4, #19]
}
    850e:	pop	{r3, r4, r5, r6, r7, pc}
    return m_spiDriver.receive();
    8510:	adds	r7, r4, #4
    8512:	mov	r0, r7
    8514:	bl	a0c4 <SdSpiArduinoDriver::receive()>
  if (cardAcmd(ACMD13, 0) || spiReceive()) {
    8518:	mov	r6, r0
    851a:	cmp	r0, #0
    851c:	bne.n	84e6 <SharedSpiCard::readSDS(sds_t*)+0x1a>
  if (!readData(dst, sizeof(sds_t))) {
    851e:	movs	r2, #64	; 0x40
    8520:	mov	r1, r5
    8522:	mov	r0, r4
    8524:	bl	7c08 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    8528:	cmp	r0, #0
    852a:	beq.n	84ea <SharedSpiCard::readSDS(sds_t*)+0x1e>
  if (m_spiActive) {
    852c:	ldrb	r5, [r4, #19]
    852e:	cmp	r5, #0
    8530:	beq.n	84ee <SharedSpiCard::readSDS(sds_t*)+0x22>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    8532:	ldrb	r0, [r4, #17]
    8534:	movs	r1, #1
    8536:	bl	a16c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    853a:	movs	r1, #255	; 0xff
    853c:	mov	r0, r7
    853e:	bl	a100 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    8542:	mov	r0, r7
    8544:	bl	a06c <SdSpiArduinoDriver::deactivate()>
  return true;
    8548:	mov	r0, r5
    m_spiActive = false;
    854a:	strb	r6, [r4, #19]
}
    854c:	pop	{r3, r4, r5, r6, r7, pc}
    854e:	nop

00008550 <SharedSpiCard::readCID(cid_t*)>:
  bool readCID(cid_t* cid) { return readRegister(CMD10, cid); }
    8550:	push	{r4, r5, r6, lr}
  if (cardCommand(cmd, 0)) {
    8552:	movs	r2, #0
    8554:	sub	sp, #8
    8556:	mov	r6, r1
    8558:	movs	r1, #10
    855a:	mov	r4, r0
    855c:	bl	7d1c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    8560:	cbz	r0, 8590 <SharedSpiCard::readCID(cid_t*)+0x40>
    m_errorCode = code;
    8562:	movs	r3, #28
    8564:	strb	r3, [r4, #18]
  if (m_spiActive) {
    8566:	ldrb	r0, [r4, #19]
    8568:	cbnz	r0, 856e <SharedSpiCard::readCID(cid_t*)+0x1e>
  bool readCID(cid_t* cid) { return readRegister(CMD10, cid); }
    856a:	add	sp, #8
    856c:	pop	{r4, r5, r6, pc}
    m_spiDriver.send(data);
    856e:	adds	r5, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    8570:	ldrb	r0, [r4, #17]
    8572:	movs	r1, #1
    8574:	bl	a16c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    8578:	movs	r1, #255	; 0xff
    857a:	mov	r0, r5
    857c:	bl	a100 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    8580:	mov	r0, r5
    8582:	bl	a06c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    8586:	movs	r3, #0
  return false;
    8588:	mov	r0, r3
    m_spiActive = false;
    858a:	strb	r3, [r4, #19]
  bool readCID(cid_t* cid) { return readRegister(CMD10, cid); }
    858c:	add	sp, #8
    858e:	pop	{r4, r5, r6, pc}
  if (!readData(dst, 16)) {
    8590:	mov	r5, r0
    8592:	movs	r2, #16
    8594:	mov	r1, r6
    8596:	mov	r0, r4
    8598:	bl	7c08 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    859c:	cmp	r0, #0
    859e:	beq.n	8566 <SharedSpiCard::readCID(cid_t*)+0x16>
  if (m_spiActive) {
    85a0:	ldrb	r6, [r4, #19]
    85a2:	cmp	r6, #0
    85a4:	beq.n	856a <SharedSpiCard::readCID(cid_t*)+0x1a>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    85a6:	ldrb	r0, [r4, #17]
    85a8:	movs	r1, #1
    85aa:	bl	a16c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    85ae:	adds	r0, r4, #4
    85b0:	movs	r1, #255	; 0xff
    85b2:	str	r0, [sp, #4]
    85b4:	bl	a100 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    85b8:	ldr	r0, [sp, #4]
    85ba:	bl	a06c <SdSpiArduinoDriver::deactivate()>
}
    85be:	mov	r0, r6
    m_spiActive = false;
    85c0:	strb	r5, [r4, #19]
  bool readCID(cid_t* cid) { return readRegister(CMD10, cid); }
    85c2:	add	sp, #8
    85c4:	pop	{r4, r5, r6, pc}
    85c6:	nop

000085c8 <SharedSpiCard::readCSD(csd_t*)>:
  bool readCSD(csd_t* csd) { return readRegister(CMD9, csd); }
    85c8:	push	{r4, r5, r6, lr}
  if (cardCommand(cmd, 0)) {
    85ca:	movs	r2, #0
    85cc:	sub	sp, #8
    85ce:	mov	r6, r1
    85d0:	movs	r1, #9
    85d2:	mov	r4, r0
    85d4:	bl	7d1c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    85d8:	cbz	r0, 8608 <SharedSpiCard::readCSD(csd_t*)+0x40>
    m_errorCode = code;
    85da:	movs	r3, #28
    85dc:	strb	r3, [r4, #18]
  if (m_spiActive) {
    85de:	ldrb	r0, [r4, #19]
    85e0:	cbnz	r0, 85e6 <SharedSpiCard::readCSD(csd_t*)+0x1e>
  bool readCSD(csd_t* csd) { return readRegister(CMD9, csd); }
    85e2:	add	sp, #8
    85e4:	pop	{r4, r5, r6, pc}
    m_spiDriver.send(data);
    85e6:	adds	r5, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    85e8:	ldrb	r0, [r4, #17]
    85ea:	movs	r1, #1
    85ec:	bl	a16c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    85f0:	movs	r1, #255	; 0xff
    85f2:	mov	r0, r5
    85f4:	bl	a100 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    85f8:	mov	r0, r5
    85fa:	bl	a06c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    85fe:	movs	r3, #0
  return false;
    8600:	mov	r0, r3
    m_spiActive = false;
    8602:	strb	r3, [r4, #19]
  bool readCSD(csd_t* csd) { return readRegister(CMD9, csd); }
    8604:	add	sp, #8
    8606:	pop	{r4, r5, r6, pc}
  if (!readData(dst, 16)) {
    8608:	mov	r5, r0
    860a:	movs	r2, #16
    860c:	mov	r1, r6
    860e:	mov	r0, r4
    8610:	bl	7c08 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    8614:	cmp	r0, #0
    8616:	beq.n	85de <SharedSpiCard::readCSD(csd_t*)+0x16>
  if (m_spiActive) {
    8618:	ldrb	r6, [r4, #19]
    861a:	cmp	r6, #0
    861c:	beq.n	85e2 <SharedSpiCard::readCSD(csd_t*)+0x1a>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    861e:	ldrb	r0, [r4, #17]
    8620:	movs	r1, #1
    8622:	bl	a16c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    8626:	adds	r0, r4, #4
    8628:	movs	r1, #255	; 0xff
    862a:	str	r0, [sp, #4]
    862c:	bl	a100 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    8630:	ldr	r0, [sp, #4]
    8632:	bl	a06c <SdSpiArduinoDriver::deactivate()>
}
    8636:	mov	r0, r6
    m_spiActive = false;
    8638:	strb	r5, [r4, #19]
  bool readCSD(csd_t* csd) { return readRegister(CMD9, csd); }
    863a:	add	sp, #8
    863c:	pop	{r4, r5, r6, pc}
    863e:	nop

00008640 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
bool DedicatedSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    8640:	push	{r4, r5, r6, r7, lr}
    8642:	mov	r4, r2
  if (sdState() != READ_STATE || sector != m_curSector) {
    8644:	ldrb	r2, [r0, #20]
bool DedicatedSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    8646:	sub	sp, #12
    8648:	mov	r6, r0
  if (sdState() != READ_STATE || sector != m_curSector) {
    864a:	cmp	r2, #1
bool DedicatedSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    864c:	mov	r5, r1
    864e:	mov	r7, r3
  if (sdState() != READ_STATE || sector != m_curSector) {
    8650:	bne.n	8658 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x18>
    8652:	ldr	r3, [r0, #24]
    8654:	cmp	r3, r1
    8656:	beq.n	8664 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x24>
    if (!readStart(sector)) {
    8658:	mov	r1, r5
    865a:	mov	r0, r6
    865c:	bl	81fc <SharedSpiCard::readStart(unsigned long)>
    8660:	cbz	r0, 8684 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x44>
    m_curSector = sector;
    8662:	str	r5, [r6, #24]
  for (size_t i = 0; i < ns; i++, dst += 512) {
    8664:	cbz	r7, 868c <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x4c>
    if (!readStart(sector)) {
    8666:	movs	r5, #0
    8668:	b.n	866e <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2e>
  for (size_t i = 0; i < ns; i++, dst += 512) {
    866a:	cmp	r7, r5
    866c:	beq.n	868c <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x4c>
bool SharedSpiCard::readData(uint8_t* dst) { return readData(dst, 512); }
    866e:	mov	r1, r4
    8670:	mov.w	r2, #512	; 0x200
    8674:	mov	r0, r6
  for (size_t i = 0; i < ns; i++, dst += 512) {
    8676:	adds	r5, #1
    8678:	add.w	r4, r4, #512	; 0x200
bool SharedSpiCard::readData(uint8_t* dst) { return readData(dst, 512); }
    867c:	bl	7c08 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    if (!readData(dst)) {
    8680:	cmp	r0, #0
    8682:	bne.n	866a <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2a>
  return false;
    8684:	movs	r4, #0
}
    8686:	mov	r0, r4
    8688:	add	sp, #12
    868a:	pop	{r4, r5, r6, r7, pc}
  m_curSector += ns;
    868c:	ldr	r3, [r6, #24]
  return m_dedicatedSpi ? true : readStop();
    868e:	ldrb	r4, [r6, #28]
  m_curSector += ns;
    8690:	add	r3, r7
    8692:	str	r3, [r6, #24]
  return m_dedicatedSpi ? true : readStop();
    8694:	cbz	r4, 869e <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x5e>
    8696:	movs	r4, #1
}
    8698:	mov	r0, r4
    869a:	add	sp, #12
    869c:	pop	{r4, r5, r6, r7, pc}
  if (cardCommand(CMD12, 0)) {
    869e:	mov	r2, r4
    86a0:	movs	r1, #12
    86a2:	mov	r0, r6
  m_state = IDLE_STATE;
    86a4:	strb	r4, [r6, #20]
  if (cardCommand(CMD12, 0)) {
    86a6:	bl	7d1c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    86aa:	mov	r5, r0
    86ac:	cbnz	r0, 86d0 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x90>
  if (m_spiActive) {
    86ae:	ldrb	r4, [r6, #19]
    86b0:	cmp	r4, #0
    86b2:	beq.n	8696 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x56>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    86b4:	movs	r1, #1
    86b6:	ldrb	r0, [r6, #17]
    86b8:	bl	a16c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    86bc:	adds	r0, r6, #4
    86be:	movs	r1, #255	; 0xff
    86c0:	str	r0, [sp, #4]
    86c2:	bl	a100 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    86c6:	ldr	r0, [sp, #4]
    86c8:	bl	a06c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    86cc:	strb	r5, [r6, #19]
}
    86ce:	b.n	8686 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x46>
    m_errorCode = code;
    86d0:	movs	r2, #9
  if (m_spiActive) {
    86d2:	ldrb	r3, [r6, #19]
    86d4:	strb	r2, [r6, #18]
    86d6:	cmp	r3, #0
    86d8:	beq.n	8684 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x44>
    m_spiDriver.send(data);
    86da:	adds	r5, r6, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    86dc:	movs	r1, #1
    86de:	ldrb	r0, [r6, #17]
    86e0:	bl	a16c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    86e4:	movs	r1, #255	; 0xff
    86e6:	mov	r0, r5
    86e8:	bl	a100 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    86ec:	mov	r0, r5
    86ee:	bl	a06c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    86f2:	strb	r4, [r6, #19]
}
    86f4:	b.n	8686 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x46>
    86f6:	nop

000086f8 <DedicatedSpiCard::setDedicatedSpi(bool)>:
//------------------------------------------------------------------------------
bool DedicatedSpiCard::setDedicatedSpi(bool value) {
  if (!syncDevice()) {
    86f8:	ldr	r3, [r0, #0]
bool DedicatedSpiCard::setDedicatedSpi(bool value) {
    86fa:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!syncDevice()) {
    86fe:	ldr	r2, [r3, #28]
bool DedicatedSpiCard::setDedicatedSpi(bool value) {
    8700:	sub	sp, #8
    8702:	ldr	r5, [pc, #144]	; (8794 <DedicatedSpiCard::setDedicatedSpi(bool)+0x9c>)
    8704:	mov	r4, r0
    8706:	mov	r6, r1
    8708:	cmp	r2, r5
    870a:	bne.n	8730 <DedicatedSpiCard::setDedicatedSpi(bool)+0x38>
  if (m_state == WRITE_STATE) {
    870c:	ldrb	r5, [r0, #20]
    870e:	cmp	r5, #2
    8710:	beq.n	8720 <DedicatedSpiCard::setDedicatedSpi(bool)+0x28>
  if (m_state == READ_STATE) {
    8712:	cmp	r5, #1
    8714:	beq.n	8734 <DedicatedSpiCard::setDedicatedSpi(bool)+0x3c>
    return false;
  }
  m_dedicatedSpi = value;
  return true;
    8716:	movs	r0, #1
  m_dedicatedSpi = value;
    8718:	strb	r6, [r4, #28]
}
    871a:	add	sp, #8
    871c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return writeStop();
    8720:	ldr	r3, [r3, #104]	; 0x68
    8722:	blx	r3
  if (!syncDevice()) {
    8724:	cmp	r0, #0
    8726:	bne.n	8716 <DedicatedSpiCard::setDedicatedSpi(bool)+0x1e>
    return false;
    8728:	movs	r0, #0
}
    872a:	add	sp, #8
    872c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!syncDevice()) {
    8730:	blx	r2
    8732:	b.n	8724 <DedicatedSpiCard::setDedicatedSpi(bool)+0x2c>
  m_state = IDLE_STATE;
    8734:	mov.w	r8, #0
  if (cardCommand(CMD12, 0)) {
    8738:	movs	r1, #12
    873a:	mov	r2, r8
  m_state = IDLE_STATE;
    873c:	strb.w	r8, [r0, #20]
  if (cardCommand(CMD12, 0)) {
    8740:	bl	7d1c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    8744:	mov	r7, r0
    8746:	cbnz	r0, 876a <DedicatedSpiCard::setDedicatedSpi(bool)+0x72>
  if (m_spiActive) {
    8748:	ldrb	r3, [r4, #19]
    874a:	cmp	r3, #0
    874c:	beq.n	8716 <DedicatedSpiCard::setDedicatedSpi(bool)+0x1e>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    874e:	mov	r1, r5
    8750:	ldrb	r0, [r4, #17]
    8752:	bl	a16c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    8756:	adds	r0, r4, #4
    8758:	movs	r1, #255	; 0xff
    875a:	str	r0, [sp, #4]
    875c:	bl	a100 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    8760:	ldr	r0, [sp, #4]
    8762:	bl	a06c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    8766:	strb	r7, [r4, #19]
    8768:	b.n	8716 <DedicatedSpiCard::setDedicatedSpi(bool)+0x1e>
    m_errorCode = code;
    876a:	movs	r2, #9
  if (m_spiActive) {
    876c:	ldrb	r3, [r4, #19]
    876e:	strb	r2, [r4, #18]
    8770:	cmp	r3, #0
    8772:	beq.n	8728 <DedicatedSpiCard::setDedicatedSpi(bool)+0x30>
    m_spiDriver.send(data);
    8774:	adds	r6, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    8776:	mov	r1, r5
    8778:	ldrb	r0, [r4, #17]
    877a:	bl	a16c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    877e:	movs	r1, #255	; 0xff
    8780:	mov	r0, r6
    8782:	bl	a100 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    8786:	mov	r0, r6
    8788:	bl	a06c <SdSpiArduinoDriver::deactivate()>
    return false;
    878c:	mov	r0, r8
    m_spiActive = false;
    878e:	strb.w	r8, [r4, #19]
    8792:	b.n	871a <DedicatedSpiCard::setDedicatedSpi(bool)+0x22>
    8794:	.word	0x00007d05

00008798 <SharedSpiCard::writeData(unsigned char, unsigned char const*)>:
bool SharedSpiCard::writeData(uint8_t token, const uint8_t* src) {
    8798:	push	{r4, r5, r6, lr}
    m_spiDriver.send(data);
    879a:	adds	r5, r0, #4
    879c:	mov	r6, r2
    879e:	mov	r4, r0
    87a0:	mov	r0, r5
    87a2:	bl	a100 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.send(buf, n);
    87a6:	mov.w	r2, #512	; 0x200
    87aa:	mov	r1, r6
    87ac:	mov	r0, r5
    87ae:	bl	a114 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>
    m_spiDriver.send(data);
    87b2:	movs	r1, #255	; 0xff
    87b4:	mov	r0, r5
    87b6:	bl	a100 <SdSpiArduinoDriver::send(unsigned char)>
    87ba:	movs	r1, #255	; 0xff
    87bc:	mov	r0, r5
    87be:	bl	a100 <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
    87c2:	mov	r0, r5
    87c4:	bl	a0c4 <SdSpiArduinoDriver::receive()>
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    87c8:	and.w	r3, r0, #31
  m_status = spiReceive();
    87cc:	strb	r0, [r4, #21]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    87ce:	cmp	r3, #5
    87d0:	beq.n	87dc <SharedSpiCard::writeData(unsigned char, unsigned char const*)+0x44>
    m_errorCode = code;
    87d2:	movs	r3, #33	; 0x21
  if (m_spiActive) {
    87d4:	ldrb	r0, [r4, #19]
    87d6:	strb	r3, [r4, #18]
    87d8:	cbnz	r0, 87e0 <SharedSpiCard::writeData(unsigned char, unsigned char const*)+0x48>
}
    87da:	pop	{r4, r5, r6, pc}
  return true;
    87dc:	movs	r0, #1
}
    87de:	pop	{r4, r5, r6, pc}
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    87e0:	ldrb	r0, [r4, #17]
    87e2:	movs	r1, #1
    87e4:	bl	a16c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    87e8:	movs	r1, #255	; 0xff
    87ea:	mov	r0, r5
    87ec:	bl	a100 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    87f0:	mov	r0, r5
    87f2:	bl	a06c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    87f6:	movs	r3, #0
}
    87f8:	mov	r0, r3
    m_spiActive = false;
    87fa:	strb	r3, [r4, #19]
}
    87fc:	pop	{r4, r5, r6, pc}
    87fe:	nop

00008800 <SharedSpiCard::writeData(unsigned char const*)>:
bool SharedSpiCard::writeData(const uint8_t* src) {
    8800:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8804:	ldr	r5, [pc, #92]	; (8864 <SharedSpiCard::writeData(unsigned char const*)+0x64>)
    8806:	mov	r6, r0
    8808:	mov	r7, r1
    return m_spiDriver.receive();
    880a:	add.w	r8, r0, #4
    880e:	ldr	r4, [r5, #0]
  void set(uint16_t ms) { m_endTime = ms + millis16(); }
    8810:	add.w	r4, r4, #600	; 0x258
    8814:	uxth	r4, r4
  explicit Timeout(uint16_t ms) { set(ms); }
    8816:	b.n	8820 <SharedSpiCard::writeData(unsigned char const*)+0x20>
    8818:	ldr	r3, [r5, #0]
  bool timedOut() { return (int16_t)(m_endTime - millis16()) < 0; }
    881a:	subs	r3, r4, r3
    if (timeout.timedOut()) {
    881c:	lsls	r3, r3, #16
    881e:	bmi.n	883a <SharedSpiCard::writeData(unsigned char const*)+0x3a>
    8820:	mov	r0, r8
    8822:	bl	a0c4 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    8826:	cmp	r0, #255	; 0xff
    8828:	bne.n	8818 <SharedSpiCard::writeData(unsigned char const*)+0x18>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
    882a:	mov	r2, r7
    882c:	movs	r1, #252	; 0xfc
    882e:	mov	r0, r6
    8830:	bl	8798 <SharedSpiCard::writeData(unsigned char, unsigned char const*)>
    8834:	cbz	r0, 883e <SharedSpiCard::writeData(unsigned char const*)+0x3e>
}
    8836:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_errorCode = code;
    883a:	movs	r3, #37	; 0x25
    883c:	strb	r3, [r6, #18]
  if (m_spiActive) {
    883e:	ldrb	r0, [r6, #19]
    8840:	cmp	r0, #0
    8842:	beq.n	8836 <SharedSpiCard::writeData(unsigned char const*)+0x36>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    8844:	ldrb	r0, [r6, #17]
    8846:	movs	r1, #1
    8848:	bl	a16c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    884c:	movs	r1, #255	; 0xff
    884e:	mov	r0, r8
    8850:	bl	a100 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    8854:	mov	r0, r8
    8856:	bl	a06c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    885a:	movs	r3, #0
}
    885c:	mov	r0, r3
    m_spiActive = false;
    885e:	strb	r3, [r6, #19]
}
    8860:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8864:	.word	0x20007b08

00008868 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)>:
bool SharedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    8868:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    886c:	ldr	r3, [r0, #0]
bool SharedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    886e:	mov	r5, r2
    8870:	ldr	r2, [pc, #212]	; (8948 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0xe0>)
    8872:	mov	r4, r0
  if (type() != SD_CARD_TYPE_SDHC) {
    8874:	ldr	r3, [r3, #92]	; 0x5c
bool SharedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    8876:	mov	r6, r1
    8878:	cmp	r3, r2
    887a:	bne.n	8936 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0xce>
  uint8_t type() const { return m_type; }
    887c:	ldrb	r0, [r0, #22]
  if (type() != SD_CARD_TYPE_SDHC) {
    887e:	cmp	r0, #3
  if (cardCommand(CMD24, sector)) {
    8880:	mov.w	r1, #24
    8884:	mov	r0, r4
    sector <<= 9;
    8886:	it	ne
    8888:	lslne	r6, r6, #9
  if (cardCommand(CMD24, sector)) {
    888a:	mov	r2, r6
    888c:	bl	7d1c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    8890:	cbz	r0, 88a6 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x3e>
    m_errorCode = code;
    8892:	movs	r3, #13
    8894:	strb	r3, [r4, #18]
  if (m_spiActive) {
    8896:	ldrb.w	r9, [r4, #19]
    889a:	cmp.w	r9, #0
    889e:	bne.n	8912 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0xaa>
}
    88a0:	mov	r0, r9
    88a2:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (!writeData(DATA_START_SECTOR, src)) {
    88a6:	mov	r2, r5
    88a8:	movs	r1, #254	; 0xfe
    88aa:	mov	r0, r4
    88ac:	bl	8798 <SharedSpiCard::writeData(unsigned char, unsigned char const*)>
    88b0:	mov	r9, r0
    88b2:	cmp	r0, #0
    88b4:	beq.n	8896 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x2e>
    88b6:	ldr	r7, [pc, #148]	; (894c <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0xe4>)
    return m_spiDriver.receive();
    88b8:	add.w	r8, r4, #4
    88bc:	ldr	r6, [r7, #0]
  void set(uint16_t ms) { m_endTime = ms + millis16(); }
    88be:	add.w	r6, r6, #600	; 0x258
    88c2:	uxth	r6, r6
  explicit Timeout(uint16_t ms) { set(ms); }
    88c4:	b.n	88ce <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x66>
    88c6:	ldr	r3, [r7, #0]
  bool timedOut() { return (int16_t)(m_endTime - millis16()) < 0; }
    88c8:	subs	r3, r6, r3
    if (timeout.timedOut()) {
    88ca:	lsls	r3, r3, #16
    88cc:	bmi.n	8940 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0xd8>
    88ce:	mov	r0, r8
    88d0:	bl	a0c4 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    88d4:	cmp	r0, #255	; 0xff
    88d6:	mov	r5, r0
    88d8:	bne.n	88c6 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x5e>
  if (cardCommand(CMD13, 0) || spiReceive()) {
    88da:	movs	r2, #0
    88dc:	movs	r1, #13
    88de:	mov	r0, r4
    88e0:	bl	7d1c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    88e4:	cbnz	r0, 893a <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0xd2>
    88e6:	mov	r0, r8
    88e8:	bl	a0c4 <SdSpiArduinoDriver::receive()>
    88ec:	mov	r6, r0
    88ee:	cbnz	r0, 893a <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0xd2>
  if (m_spiActive) {
    88f0:	ldrb	r3, [r4, #19]
    88f2:	cmp	r3, #0
    88f4:	beq.n	88a0 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x38>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    88f6:	movs	r1, #1
    88f8:	ldrb	r0, [r4, #17]
  return true;
    88fa:	mov	r9, r3
    88fc:	bl	a16c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    8900:	mov	r1, r5
    8902:	mov	r0, r8
    8904:	bl	a100 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    8908:	mov	r0, r8
    890a:	bl	a06c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    890e:	strb	r6, [r4, #19]
}
    8910:	b.n	88a0 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x38>
    m_spiDriver.send(data);
    8912:	adds	r5, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    8914:	ldrb	r0, [r4, #17]
    8916:	movs	r1, #1
    8918:	bl	a16c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    891c:	movs	r1, #255	; 0xff
    891e:	mov	r0, r5
    8920:	bl	a100 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    8924:	mov	r0, r5
    8926:	bl	a06c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    892a:	movs	r3, #0
  return false;
    892c:	mov	r9, r3
    m_spiActive = false;
    892e:	strb	r3, [r4, #19]
}
    8930:	mov	r0, r9
    8932:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (type() != SD_CARD_TYPE_SDHC) {
    8936:	blx	r3
    8938:	b.n	887e <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x16>
    m_errorCode = code;
    893a:	movs	r3, #10
    893c:	strb	r3, [r4, #18]
    goto fail;
    893e:	b.n	8896 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x2e>
    8940:	movs	r3, #36	; 0x24
    8942:	strb	r3, [r4, #18]
    goto fail;
    8944:	b.n	8896 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x2e>
    8946:	nop
    8948:	.word	0x00007abd
    894c:	.word	0x20007b08

00008950 <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)>:
//------------------------------------------------------------------------------
bool DedicatedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    8950:	push	{r4}
  if (m_dedicatedSpi) {
    8952:	ldrb	r4, [r0, #28]
    8954:	cbz	r4, 8964 <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)+0x14>
    return writeSectors(sector, src, 1);
    8956:	ldr	r4, [r0, #0]
    8958:	movs	r3, #1
    895a:	ldr	r4, [r4, #36]	; 0x24
    895c:	mov	ip, r4
  }
  return SharedSpiCard::writeSector(sector, src);
}
    895e:	ldr.w	r4, [sp], #4
    return writeSectors(sector, src, 1);
    8962:	bx	ip
}
    8964:	ldr.w	r4, [sp], #4
  return SharedSpiCard::writeSector(sector, src);
    8968:	b.w	8868 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)>

0000896c <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
//------------------------------------------------------------------------------
bool DedicatedSpiCard::writeSectors(uint32_t sector, const uint8_t* src,
                                    size_t ns) {
    896c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8970:	mov	sl, r3
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    8972:	ldrb	r3, [r0, #20]
                                    size_t ns) {
    8974:	sub	sp, #4
    8976:	mov	r7, r0
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    8978:	cmp	r3, #2
                                    size_t ns) {
    897a:	mov	r4, r1
    897c:	mov	r8, r2
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    897e:	beq.n	8a34 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0xc8>
    if (!writeStart(sector)) {
    8980:	ldr	r3, [r7, #0]
    8982:	mov	r1, r4
    8984:	mov	r0, r7
    8986:	ldr	r3, [r3, #100]	; 0x64
    8988:	blx	r3
    898a:	cmp	r0, #0
    898c:	beq.n	89fe <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x92>
      goto fail;
    }
    m_curSector = sector;
    898e:	str	r4, [r7, #24]
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    8990:	cmp.w	sl, #0
    8994:	beq.n	89de <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x72>
    if (!writeStart(sector)) {
    8996:	mov.w	r9, #0
    899a:	ldr.w	fp, [pc, #164]	; 8a40 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0xd4>
    899e:	ldr	r5, [pc, #156]	; (8a3c <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0xd0>)
    return m_spiDriver.receive();
    89a0:	adds	r6, r7, #4
    if (!writeData(src)) {
    89a2:	ldr	r3, [r7, #0]
    89a4:	ldr	r3, [r3, #96]	; 0x60
    89a6:	cmp	r3, fp
    89a8:	bne.n	8a06 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x9a>
    89aa:	ldr	r4, [r5, #0]
  void set(uint16_t ms) { m_endTime = ms + millis16(); }
    89ac:	add.w	r4, r4, #600	; 0x258
    89b0:	uxth	r4, r4
  explicit Timeout(uint16_t ms) { set(ms); }
    89b2:	b.n	89bc <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x50>
    89b4:	ldr	r3, [r5, #0]
  bool timedOut() { return (int16_t)(m_endTime - millis16()) < 0; }
    89b6:	subs	r3, r4, r3
    if (timeout.timedOut()) {
    89b8:	lsls	r3, r3, #16
    89ba:	bmi.n	89f6 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x8a>
    89bc:	mov	r0, r6
    89be:	bl	a0c4 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    89c2:	cmp	r0, #255	; 0xff
    89c4:	bne.n	89b4 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x48>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
    89c6:	mov	r2, r8
    89c8:	movs	r1, #252	; 0xfc
    89ca:	mov	r0, r7
    89cc:	bl	8798 <SharedSpiCard::writeData(unsigned char, unsigned char const*)>
    89d0:	cbz	r0, 89fa <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x8e>
  for (size_t i = 0; i < ns; i++, src += 512) {
    89d2:	add.w	r9, r9, #1
    89d6:	add.w	r8, r8, #512	; 0x200
    89da:	cmp	sl, r9
    89dc:	bne.n	89a2 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x36>
      goto fail;
    }
  }
  m_curSector += ns;
    89de:	ldr	r3, [r7, #24]
  return m_dedicatedSpi ? true : writeStop();
    89e0:	ldrb	r0, [r7, #28]
  m_curSector += ns;
    89e2:	add	r3, sl
    89e4:	str	r3, [r7, #24]
  return m_dedicatedSpi ? true : writeStop();
    89e6:	cbnz	r0, 8a00 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x94>
    89e8:	ldr	r3, [r7, #0]
    89ea:	mov	r0, r7
    89ec:	ldr	r3, [r3, #104]	; 0x68

fail:
  return false;
}
    89ee:	add	sp, #4
    89f0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  return m_dedicatedSpi ? true : writeStop();
    89f4:	bx	r3
    m_errorCode = code;
    89f6:	movs	r3, #37	; 0x25
    89f8:	strb	r3, [r7, #18]
  if (m_spiActive) {
    89fa:	ldrb	r3, [r7, #19]
    89fc:	cbnz	r3, 8a12 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0xa6>
  return false;
    89fe:	movs	r0, #0
}
    8a00:	add	sp, #4
    8a02:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (!writeData(src)) {
    8a06:	mov	r1, r8
    8a08:	mov	r0, r7
    8a0a:	blx	r3
    8a0c:	cmp	r0, #0
    8a0e:	bne.n	89d2 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x66>
    8a10:	b.n	89fe <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x92>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    8a12:	ldrb	r0, [r7, #17]
    8a14:	movs	r1, #1
    8a16:	bl	a16c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    8a1a:	movs	r1, #255	; 0xff
    8a1c:	mov	r0, r6
    8a1e:	bl	a100 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    8a22:	mov	r0, r6
    8a24:	bl	a06c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    8a28:	movs	r3, #0
  return false;
    8a2a:	mov	r0, r3
    m_spiActive = false;
    8a2c:	strb	r3, [r7, #19]
}
    8a2e:	add	sp, #4
    8a30:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    8a34:	ldr	r3, [r0, #24]
    8a36:	cmp	r3, r1
    8a38:	bne.n	8980 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x14>
    8a3a:	b.n	8990 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x24>
    8a3c:	.word	0x20007b08
    8a40:	.word	0x00008801

00008a44 <DedicatedSpiCard::begin(SdSpiConfig)>:
bool DedicatedSpiCard::begin(SdSpiConfig spiConfig) {
    8a44:	push	{r4, lr}
    8a46:	sub	sp, #16
    8a48:	mov	r4, r0
    8a4a:	add.w	ip, sp, #4
    8a4e:	stmia.w	ip, {r1, r2, r3}
  if (!SharedSpiCard::begin(spiConfig)) {
    8a52:	ldmia.w	ip, {r1, r2, r3}
    8a56:	bl	7e08 <SharedSpiCard::begin(SdSpiConfig)>
    8a5a:	cbz	r0, 8a66 <DedicatedSpiCard::begin(SdSpiConfig)+0x22>
const uint8_t USER_SPI_BEGIN = 2;
/**
 * \param[in] opt option field of SdSpiConfig.
 * \return true for dedicated SPI.
 */
inline bool spiOptionDedicated(uint8_t opt) { return opt & DEDICATED_SPI; }
    8a5c:	ldrb.w	r3, [sp, #5]
    8a60:	and.w	r3, r3, #1
    8a64:	strb	r3, [r4, #28]
}
    8a66:	add	sp, #16
    8a68:	pop	{r4, pc}
    8a6a:	nop

00008a6c <SdCardInterface::hasDedicatedSpi()>:
  virtual bool hasDedicatedSpi() { return false; }
    8a6c:	movs	r0, #0
    8a6e:	bx	lr

00008a70 <SdCardInterface::isDedicatedSpi()>:
  bool virtual isDedicatedSpi() { return false; }
    8a70:	movs	r0, #0
    8a72:	bx	lr

00008a74 <SdCardInterface::setDedicatedSpi(bool)>:
  }
    8a74:	movs	r0, #0
    8a76:	bx	lr

00008a78 <SdioCard::end()>:
   */
  bool cardCMD6(uint32_t arg, uint8_t* status);
  /** Disable an SDIO card.
   * not implemented.
   */
  void end() {}
    8a78:	bx	lr
    8a7a:	nop

00008a7c <sdIrs()>:
  return false;
}
//==============================================================================
// ISR
static void sdIrs() {
  SDHC_IRQSIGEN = 0;
    8a7c:	ldr	r3, [pc, #32]	; (8aa0 <sdIrs()+0x24>)
    8a7e:	movs	r1, #0
  m_irqstat = SDHC_IRQSTAT;
    8a80:	ldr	r2, [pc, #32]	; (8aa4 <sdIrs()+0x28>)
  SDHC_IRQSTAT = m_irqstat;
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
#endif
  m_dmaBusy = false;
    8a82:	ldr	r0, [pc, #36]	; (8aa8 <sdIrs()+0x2c>)
static void sdIrs() {
    8a84:	push	{r4}
  SDHC_IRQSIGEN = 0;
    8a86:	str	r1, [r3, #56]	; 0x38
  m_irqstat = SDHC_IRQSTAT;
    8a88:	ldr	r4, [r3, #48]	; 0x30
    8a8a:	str	r4, [r2, #0]
  SDHC_IRQSTAT = m_irqstat;
    8a8c:	ldr	r2, [r2, #0]
}
    8a8e:	ldr.w	r4, [sp], #4
  SDHC_IRQSTAT = m_irqstat;
    8a92:	str	r2, [r3, #48]	; 0x30
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
    8a94:	ldr	r2, [r3, #72]	; 0x48
    8a96:	bic.w	r2, r2, #129	; 0x81
    8a9a:	str	r2, [r3, #72]	; 0x48
  m_dmaBusy = false;
    8a9c:	strb	r1, [r0, #0]
}
    8a9e:	bx	lr
    8aa0:	.word	0x402c0000
    8aa4:	.word	0x2000641c
    8aa8:	.word	0x20007b75

00008aac <isBusyDat()>:
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
}
//------------------------------------------------------------------------------
static bool isBusyCommandInhibit() { return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB; }
//------------------------------------------------------------------------------
static bool isBusyDat() { return SDHC_PRSSTAT & (1 << 24) ? false : true; }
    8aac:	ldr	r3, [pc, #12]	; (8abc <isBusyDat()+0x10>)
    8aae:	ldr	r0, [r3, #36]	; 0x24
    8ab0:	eor.w	r0, r0, #16777216	; 0x1000000
    8ab4:	ubfx	r0, r0, #24, #1
    8ab8:	bx	lr
    8aba:	nop
    8abc:	.word	0x402c0000

00008ac0 <isBusyDMA()>:
//------------------------------------------------------------------------------
static bool isBusyDMA() { return m_dmaBusy; }
    8ac0:	ldr	r3, [pc, #4]	; (8ac8 <isBusyDMA()+0x8>)
    8ac2:	ldrb	r0, [r3, #0]
    8ac4:	bx	lr
    8ac6:	nop
    8ac8:	.word	0x20007b75

00008acc <setSdclk(unsigned long)>:
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    8acc:	ldr	r2, [pc, #172]	; (8b7c <setSdclk(unsigned long)+0xb0>)
  return (528000000U * 3) / ((CCM_ANALOG_PFD_528 & 0x3F) / 6) / divider;
    8ace:	ldr	r3, [pc, #176]	; (8b80 <setSdclk(unsigned long)+0xb4>)
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    8ad0:	ldr	r2, [r2, #36]	; 0x24
  return (528000000U * 3) / ((CCM_ANALOG_PFD_528 & 0x3F) / 6) / divider;
    8ad2:	ldr.w	r3, [r3, #256]	; 0x100
    8ad6:	ldr	r1, [pc, #172]	; (8b84 <setSdclk(unsigned long)+0xb8>)
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    8ad8:	ubfx	r2, r2, #11, #3
  return (528000000U * 3) / ((CCM_ANALOG_PFD_528 & 0x3F) / 6) / divider;
    8adc:	and.w	r3, r3, #63	; 0x3f
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    8ae0:	adds	r2, #1
  }
  d[15] = 0;
  return true;
}
//------------------------------------------------------------------------------
static void setSdclk(uint32_t kHzMax) {
    8ae2:	push	{r4, r5, r6, lr}
  return (528000000U * 3) / ((CCM_ANALOG_PFD_528 & 0x3F) / 6) / divider;
    8ae4:	ldr	r4, [pc, #160]	; (8b88 <setSdclk(unsigned long)+0xbc>)
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000 * kHzMax;
    8ae6:	mov.w	r5, #1000	; 0x3e8
  return (528000000U * 3) / ((CCM_ANALOG_PFD_528 & 0x3F) / 6) / divider;
    8aea:	umull	r4, r3, r4, r3
  uint32_t maxSdclk = 1000 * kHzMax;
    8aee:	mul.w	r0, r5, r0
  return (528000000U * 3) / ((CCM_ANALOG_PFD_528 & 0x3F) / 6) / divider;
    8af2:	lsrs	r3, r3, #2
    8af4:	udiv	lr, r1, r3
    8af8:	udiv	lr, lr, r2
  uint32_t base = baseClock();

  while ((base / (sdclkfs * DVS_LIMIT) > maxSdclk) &&
    8afc:	cmp.w	r0, lr, lsr #4
    8b00:	bcs.n	8b6e <setSdclk(unsigned long)+0xa2>
  uint32_t sdclkfs = 1;
    8b02:	movs	r3, #1
         (sdclkfs < SDCLKFS_LIMIT)) {
    sdclkfs <<= 1;
    8b04:	mov	r6, r3
    8b06:	lsls	r3, r3, #1
  while ((base / (sdclkfs * DVS_LIMIT) > maxSdclk) &&
    8b08:	lsls	r2, r3, #4
    8b0a:	udiv	r2, lr, r2
    8b0e:	cmp	r2, r0
    8b10:	bls.n	8b16 <setSdclk(unsigned long)+0x4a>
    8b12:	cmp	r3, #255	; 0xff
    8b14:	bls.n	8b04 <setSdclk(unsigned long)+0x38>
  }
  while ((base / (sdclkfs * dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    8b16:	udiv	r2, lr, r3
  uint32_t sysctl =
      SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK | SDHC_SYSCTL_DVS_MASK |
                      SDHC_SYSCTL_SDCLKFS_MASK);

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs) |
                SDHC_SYSCTL_SDCLKFS(sdclkfs);
    8b1a:	lsls	r6, r6, #8
  while ((base / (sdclkfs * dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    8b1c:	cmp	r0, r2
    8b1e:	bcs.n	8b76 <setSdclk(unsigned long)+0xaa>
    8b20:	mov.w	ip, r3, lsl #1
    8b24:	movs	r2, #1
    8b26:	b.n	8b2a <setSdclk(unsigned long)+0x5e>
    8b28:	mov	ip, r4
    dvs++;
    8b2a:	mov	r5, r2
  while ((base / (sdclkfs * dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    8b2c:	add.w	r4, r3, ip
    dvs++;
    8b30:	adds	r2, #1
  while ((base / (sdclkfs * dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    8b32:	udiv	r1, lr, ip
    8b36:	cmp	r1, r0
    8b38:	bls.n	8b6a <setSdclk(unsigned long)+0x9e>
    8b3a:	cmp	r2, #16
    8b3c:	bne.n	8b28 <setSdclk(unsigned long)+0x5c>
    8b3e:	movs	r5, #240	; 0xf0
  m_sdClkKhz = base / (1000 * sdclkfs * dvs);
    8b40:	mov.w	r3, #1000	; 0x3e8
    8b44:	ldr	r1, [pc, #68]	; (8b8c <setSdclk(unsigned long)+0xc0>)
      SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK | SDHC_SYSCTL_DVS_MASK |
    8b46:	ldr	r2, [pc, #72]	; (8b90 <setSdclk(unsigned long)+0xc4>)
  m_sdClkKhz = base / (1000 * sdclkfs * dvs);
    8b48:	mul.w	ip, r3, ip
    8b4c:	udiv	r3, lr, ip
    8b50:	str	r3, [r1, #0]
                      SDHC_SYSCTL_SDCLKFS_MASK);
    8b52:	ldr	r3, [pc, #64]	; (8b94 <setSdclk(unsigned long)+0xc8>)
      SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK | SDHC_SYSCTL_DVS_MASK |
    8b54:	ldr	r1, [r2, #44]	; 0x2c
                      SDHC_SYSCTL_SDCLKFS_MASK);
    8b56:	ands	r3, r1
  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs) |
    8b58:	orrs	r3, r5
    8b5a:	orrs	r3, r6
    8b5c:	orr.w	r3, r3, #917504	; 0xe0000
    8b60:	str	r3, [r2, #44]	; 0x2c

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
    8b62:	ldr	r3, [r2, #36]	; 0x24
    8b64:	lsls	r3, r3, #28
    8b66:	bpl.n	8b62 <setSdclk(unsigned long)+0x96>

#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
  // Enable the SDHC clock.
  SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
}
    8b68:	pop	{r4, r5, r6, pc}
  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs) |
    8b6a:	lsls	r5, r5, #4
    8b6c:	b.n	8b40 <setSdclk(unsigned long)+0x74>
  while ((base / (sdclkfs * DVS_LIMIT) > maxSdclk) &&
    8b6e:	mov	r2, lr
    8b70:	movs	r6, #0
  uint32_t sdclkfs = 1;
    8b72:	movs	r3, #1
    8b74:	b.n	8b1c <setSdclk(unsigned long)+0x50>
  while ((base / (sdclkfs * dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    8b76:	mov	ip, r3
    8b78:	movs	r5, #0
    8b7a:	b.n	8b40 <setSdclk(unsigned long)+0x74>
    8b7c:	.word	0x400fc000
    8b80:	.word	0x400d8000
    8b84:	.word	0x5e69ec00
    8b88:	.word	0xaaaaaaab
    8b8c:	.word	0x20005c8c
    8b90:	.word	0x402c0000
    8b94:	.word	0xfff0000f

00008b98 <SdioCard::errorCode() const>:
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::errorCode() const { return m_errorCode; }
    8b98:	ldr	r3, [pc, #4]	; (8ba0 <SdioCard::errorCode() const+0x8>)
    8b9a:	ldrb	r0, [r3, #0]
    8b9c:	bx	lr
    8b9e:	nop
    8ba0:	.word	0x20001a4a

00008ba4 <SdioCard::errorData() const>:
//------------------------------------------------------------------------------
uint32_t SdioCard::errorData() const { return m_irqstat; }
    8ba4:	ldr	r3, [pc, #4]	; (8bac <SdioCard::errorData() const+0x8>)
    8ba6:	ldr	r0, [r3, #0]
    8ba8:	bx	lr
    8baa:	nop
    8bac:	.word	0x2000641c

00008bb0 <SdioCard::readCID(cid_t*)>:
  }
}
//------------------------------------------------------------------------------
uint32_t SdioCard::kHzSdClk() { return m_sdClkKhz; }
//------------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
    8bb0:	push	{r4}
  memcpy(cid, &m_cid, sizeof(cid_t));
    8bb2:	ldr	r4, [pc, #28]	; (8bd0 <SdioCard::readCID(cid_t*)+0x20>)
bool SdioCard::readCID(cid_t* cid) {
    8bb4:	mov	ip, r1
  memcpy(cid, &m_cid, sizeof(cid_t));
    8bb6:	ldmia	r4!, {r0, r1, r2, r3}
    8bb8:	str.w	r0, [ip]
  return true;
}
    8bbc:	movs	r0, #1
  memcpy(cid, &m_cid, sizeof(cid_t));
    8bbe:	str.w	r1, [ip, #4]
    8bc2:	str.w	r2, [ip, #8]
    8bc6:	str.w	r3, [ip, #12]
}
    8bca:	ldr.w	r4, [sp], #4
    8bce:	bx	lr
    8bd0:	.word	0x200061a4

00008bd4 <SdioCard::readCSD(csd_t*)>:
//------------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
    8bd4:	push	{r4}
  memcpy(csd, &m_csd, sizeof(csd_t));
    8bd6:	ldr	r4, [pc, #28]	; (8bf4 <SdioCard::readCSD(csd_t*)+0x20>)
bool SdioCard::readCSD(csd_t* csd) {
    8bd8:	mov	ip, r1
  memcpy(csd, &m_csd, sizeof(csd_t));
    8bda:	ldmia	r4!, {r0, r1, r2, r3}
    8bdc:	str.w	r0, [ip]
  return true;
}
    8be0:	movs	r0, #1
  memcpy(csd, &m_csd, sizeof(csd_t));
    8be2:	str.w	r1, [ip, #4]
    8be6:	str.w	r2, [ip, #8]
    8bea:	str.w	r3, [ip, #12]
}
    8bee:	ldr.w	r4, [sp], #4
    8bf2:	bx	lr
    8bf4:	.word	0x200061b4

00008bf8 <SdioCard::readOCR(unsigned long*)>:
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
    8bf8:	ldr	r3, [pc, #8]	; (8c04 <SdioCard::readOCR(unsigned long*)+0xc>)
  return true;
}
    8bfa:	movs	r0, #1
  *ocr = m_ocr;
    8bfc:	ldr	r3, [r3, #0]
    8bfe:	str	r3, [r1, #0]
}
    8c00:	bx	lr
    8c02:	nop
    8c04:	.word	0x200061c4

00008c08 <SdioCard::readSCR(scr_t*)>:
//------------------------------------------------------------------------------
bool SdioCard::readSCR(scr_t* scr) {
  memcpy(scr, &m_scr, sizeof(scr_t));
    8c08:	ldr	r2, [pc, #12]	; (8c18 <SdioCard::readSCR(scr_t*)+0x10>)
bool SdioCard::readSCR(scr_t* scr) {
    8c0a:	mov	r3, r1
  memcpy(scr, &m_scr, sizeof(scr_t));
    8c0c:	ldmia	r2!, {r0, r1}
    8c0e:	str	r0, [r3, #0]
  return true;
}
    8c10:	movs	r0, #1
  memcpy(scr, &m_scr, sizeof(scr_t));
    8c12:	str	r1, [r3, #4]
}
    8c14:	bx	lr
    8c16:	nop
    8c18:	.word	0x200061cc

00008c1c <SdioCard::readSDS(sds_t*)>:
//------------------------------------------------------------------------------
bool SdioCard::readSDS(sds_t* sds) {
    8c1c:	push	{r4, r5, lr}
  memcpy(sds, &m_sds, sizeof(sds_t));
    8c1e:	ldr	r4, [pc, #44]	; (8c4c <SdioCard::readSDS(sds_t*)+0x30>)
    8c20:	mov	ip, r1
    8c22:	add.w	r5, r4, #64	; 0x40
    8c26:	mov	lr, r4
    8c28:	add.w	ip, ip, #16
    8c2c:	adds	r4, #16
    8c2e:	ldmia.w	lr!, {r0, r1, r2, r3}
    8c32:	cmp	lr, r5
    8c34:	str.w	r0, [ip, #-16]
    8c38:	str.w	r1, [ip, #-12]
    8c3c:	str.w	r2, [ip, #-8]
    8c40:	str.w	r3, [ip, #-4]
    8c44:	bne.n	8c26 <SdioCard::readSDS(sds_t*)+0xa>
  return true;
}
    8c46:	movs	r0, #1
    8c48:	pop	{r4, r5, pc}
    8c4a:	nop
    8c4c:	.word	0x200061d4

00008c50 <SdioCard::~SdioCard()>:
class SdioCard : public SdCardInterface {
    8c50:	bx	lr
    8c52:	nop

00008c54 <SdioCard::~SdioCard()>:
    8c54:	push	{r4, lr}
    8c56:	mov	r4, r0
    8c58:	movs	r1, #12
    8c5a:	bl	d148 <operator delete(void*, unsigned int)>
    8c5e:	mov	r0, r4
    8c60:	pop	{r4, pc}
    8c62:	nop

00008c64 <SdioCard::type() const>:
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::type() const {
  return m_version2 ? m_highCapacity ? SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2
    8c64:	ldr	r3, [pc, #16]	; (8c78 <SdioCard::type() const+0x14>)
    8c66:	ldrb	r3, [r3, #0]
    8c68:	cbz	r3, 8c74 <SdioCard::type() const+0x10>
    8c6a:	ldr	r3, [pc, #16]	; (8c7c <SdioCard::type() const+0x18>)
    8c6c:	ldrb	r0, [r3, #0]
    8c6e:	adds	r0, #2
    8c70:	uxtb	r0, r0
    8c72:	bx	lr
    8c74:	movs	r0, #1
                    : SD_CARD_TYPE_SD1;
}
    8c76:	bx	lr
    8c78:	.word	0x20007b71
    8c7c:	.word	0x20007b72

00008c80 <SdioCard::sectorCount()>:
    uint8_t ver = csd[0] >> 6;
    8c80:	ldr	r2, [pc, #88]	; (8cdc <SdioCard::sectorCount()+0x5c>)
    8c82:	ldrb	r3, [r2, #0]
    if (ver == 0) {
    8c84:	lsrs	r3, r3, #6
    8c86:	beq.n	8ca6 <SdioCard::sectorCount()+0x26>
    } else if (ver == 1) {
    8c88:	cmp	r3, #1
    8c8a:	beq.n	8c90 <SdioCard::sectorCount()+0x10>
      return 0;
    8c8c:	movs	r0, #0
uint32_t SdioCard::sectorCount() { return m_csd.capacity(); }
    8c8e:	bx	lr
      c_size = (uint32_t)(csd[7] & 63) << 16;
    8c90:	ldrb	r3, [r2, #7]
      c_size |= csd[9];
    8c92:	ldrh	r0, [r2, #8]
      c_size = (uint32_t)(csd[7] & 63) << 16;
    8c94:	lsls	r3, r3, #16
      c_size |= csd[9];
    8c96:	rev16	r0, r0
      c_size = (uint32_t)(csd[7] & 63) << 16;
    8c98:	and.w	r3, r3, #4128768	; 0x3f0000
      c_size |= csd[9];
    8c9c:	uxth	r0, r0
    8c9e:	orrs	r0, r3
      return (c_size + 1) << 10;
    8ca0:	adds	r0, #1
    8ca2:	lsls	r0, r0, #10
    8ca4:	bx	lr
      uint8_t c_size_mult = (csd[9] & 3) << 1 | csd[10] >> 7;
    8ca6:	ldrb	r3, [r2, #9]
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
    8ca8:	ldrb	r0, [r2, #8]
    8caa:	ldrb.w	ip, [r2, #7]
      uint8_t c_size_mult = (csd[9] & 3) << 1 | csd[10] >> 7;
    8cae:	lsls	r3, r3, #1
      c_size = (uint32_t)(csd[6] & 3) << 10;
    8cb0:	ldrb	r1, [r2, #6]
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
    8cb2:	lsrs	r0, r0, #6
      uint8_t c_size_mult = (csd[9] & 3) << 1 | csd[10] >> 7;
    8cb4:	and.w	r3, r3, #6
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
    8cb8:	orr.w	r0, r0, ip, lsl #2
      uint8_t c_size_mult = (csd[9] & 3) << 1 | csd[10] >> 7;
    8cbc:	ldrb.w	ip, [r2, #10]
      c_size = (uint32_t)(csd[6] & 3) << 10;
    8cc0:	lsls	r1, r1, #10
      uint8_t read_bl_len = csd[5] & 15;
    8cc2:	ldrb	r2, [r2, #5]
      return (c_size + 1) << (c_size_mult + read_bl_len + 2 - 9);
    8cc4:	orr.w	r3, r3, ip, lsr #7
      c_size = (uint32_t)(csd[6] & 3) << 10;
    8cc8:	and.w	r1, r1, #3072	; 0xc00
      return (c_size + 1) << (c_size_mult + read_bl_len + 2 - 9);
    8ccc:	and.w	r2, r2, #15
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
    8cd0:	orrs	r0, r1
      return (c_size + 1) << (c_size_mult + read_bl_len + 2 - 9);
    8cd2:	add	r3, r2
    8cd4:	adds	r0, #1
    8cd6:	subs	r3, #7
    8cd8:	lsls	r0, r3
    8cda:	bx	lr
    8cdc:	.word	0x200061b4

00008ce0 <waitDmaStatus()>:
static bool waitDmaStatus() {
    8ce0:	push	{r3, r4, r5, r6, r7, lr}
  m_busyFcn = fcn;
    8ce2:	ldr	r3, [pc, #76]	; (8d30 <waitDmaStatus()+0x50>)
    8ce4:	ldr	r7, [pc, #76]	; (8d34 <waitDmaStatus()+0x54>)
static bool isBusyDMA() { return m_dmaBusy; }
    8ce6:	ldr	r5, [pc, #80]	; (8d38 <waitDmaStatus()+0x58>)
  m_busyFcn = fcn;
    8ce8:	str	r3, [r7, #0]
  uint32_t m = micros();
    8cea:	bl	b918 <micros>
static bool isBusyDMA() { return m_dmaBusy; }
    8cee:	ldrb	r3, [r5, #0]
  while (fcn()) {
    8cf0:	cbz	r3, 8d12 <waitDmaStatus()+0x32>
    8cf2:	mov	r4, r0
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8cf4:	ldr	r6, [pc, #68]	; (8d3c <waitDmaStatus()+0x5c>)
    8cf6:	b.n	8d00 <waitDmaStatus()+0x20>
    yield();
    8cf8:	bl	c180 <yield>
static bool isBusyDMA() { return m_dmaBusy; }
    8cfc:	ldrb	r3, [r5, #0]
  while (fcn()) {
    8cfe:	cbz	r3, 8d12 <waitDmaStatus()+0x32>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8d00:	bl	b918 <micros>
    8d04:	subs	r0, r0, r4
    8d06:	cmp	r0, r6
    8d08:	bls.n	8cf8 <waitDmaStatus()+0x18>
      m_busyFcn = 0;
    8d0a:	movs	r3, #0
    return false;  // Caller will set errorCode.
    8d0c:	mov	r0, r3
      m_busyFcn = 0;
    8d0e:	str	r3, [r7, #0]
}
    8d10:	pop	{r3, r4, r5, r6, r7, pc}
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    8d12:	ldr	r3, [pc, #44]	; (8d40 <waitDmaStatus()+0x60>)
  m_busyFcn = 0;
    8d14:	movs	r2, #0
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    8d16:	ldr	r0, [r3, #0]
  m_busyFcn = 0;
    8d18:	str	r2, [r7, #0]
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    8d1a:	ands.w	r0, r0, #2
    8d1e:	beq.n	8d10 <waitDmaStatus()+0x30>
    8d20:	ldr	r2, [r3, #0]
    8d22:	ldr	r3, [pc, #32]	; (8d44 <waitDmaStatus()+0x64>)
    8d24:	tst	r2, r3
    8d26:	ite	eq
    8d28:	moveq	r0, #1
    8d2a:	movne	r0, #0
}
    8d2c:	pop	{r3, r4, r5, r6, r7, pc}
    8d2e:	nop
    8d30:	.word	0x00008ac1
    8d34:	.word	0x20006418
    8d38:	.word	0x20007b75
    8d3c:	.word	0x000f4240
    8d40:	.word	0x2000641c
    8d44:	.word	0x117f0000

00008d48 <waitTransferComplete() [clone .part.0]>:
static bool waitTransferComplete() {
    8d48:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t m = micros();
    8d4c:	bl	b918 <micros>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    8d50:	ldr	r6, [pc, #92]	; (8db0 <waitTransferComplete() [clone .part.0]+0x68>)
    8d52:	ldr	r5, [pc, #96]	; (8db4 <waitTransferComplete() [clone .part.0]+0x6c>)
  uint32_t m = micros();
    8d54:	mov	r7, r0
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8d56:	ldr.w	r8, [pc, #116]	; 8dcc <waitTransferComplete() [clone .part.0]+0x84>
  while (fcn()) {
    8d5a:	b.n	8d66 <waitTransferComplete() [clone .part.0]+0x1e>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8d5c:	bl	b918 <micros>
    8d60:	subs	r0, r0, r7
    8d62:	cmp	r0, r8
    8d64:	bhi.n	8d9e <waitTransferComplete() [clone .part.0]+0x56>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    8d66:	ldr	r4, [r6, #48]	; 0x30
  while (fcn()) {
    8d68:	ands	r4, r5
    8d6a:	beq.n	8d5c <waitTransferComplete() [clone .part.0]+0x14>
  m_transferActive = false;
    8d6c:	ldr	r2, [pc, #72]	; (8db8 <waitTransferComplete() [clone .part.0]+0x70>)
    8d6e:	movs	r1, #0
  m_irqstat = SDHC_IRQSTAT;
    8d70:	ldr	r3, [pc, #72]	; (8dbc <waitTransferComplete() [clone .part.0]+0x74>)
  m_transferActive = false;
    8d72:	strb	r1, [r2, #0]
  m_irqstat = SDHC_IRQSTAT;
    8d74:	ldr	r2, [r6, #48]	; 0x30
    8d76:	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    8d78:	ldr	r1, [r3, #0]
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    8d7a:	ldr	r2, [pc, #68]	; (8dc0 <waitTransferComplete() [clone .part.0]+0x78>)
  SDHC_IRQSTAT = m_irqstat;
    8d7c:	str	r1, [r6, #48]	; 0x30
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    8d7e:	ldr	r3, [r3, #0]
    8d80:	tst	r3, r2
    8d82:	beq.n	8d98 <waitTransferComplete() [clone .part.0]+0x50>
  m_errorCode = code;
    8d84:	ldr	r1, [pc, #60]	; (8dc4 <waitTransferComplete() [clone .part.0]+0x7c>)
    8d86:	movs	r4, #32
  m_errorLine = line;
    8d88:	ldr	r3, [pc, #60]	; (8dc8 <waitTransferComplete() [clone .part.0]+0x80>)
    8d8a:	movw	r2, #682	; 0x2aa
    return sdError(SD_CARD_ERROR_TRANSFER_COMPLETE);
    8d8e:	movs	r0, #0
  m_errorCode = code;
    8d90:	strb	r4, [r1, #0]
  m_errorLine = line;
    8d92:	str	r2, [r3, #0]
}
    8d94:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return true;
    8d98:	movs	r0, #1
}
    8d9a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_transferActive = false;
    8d9e:	ldr	r2, [pc, #24]	; (8db8 <waitTransferComplete() [clone .part.0]+0x70>)
  m_irqstat = SDHC_IRQSTAT;
    8da0:	ldr	r3, [pc, #24]	; (8dbc <waitTransferComplete() [clone .part.0]+0x74>)
  m_transferActive = false;
    8da2:	strb	r4, [r2, #0]
  m_irqstat = SDHC_IRQSTAT;
    8da4:	ldr	r2, [r6, #48]	; 0x30
    8da6:	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    8da8:	ldr	r3, [r3, #0]
    8daa:	str	r3, [r6, #48]	; 0x30
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    8dac:	b.n	8d84 <waitTransferComplete() [clone .part.0]+0x3c>
    8dae:	nop
    8db0:	.word	0x402c0000
    8db4:	.word	0x117f0002
    8db8:	.word	0x20007b73
    8dbc:	.word	0x2000641c
    8dc0:	.word	0x117f0000
    8dc4:	.word	0x20001a4a
    8dc8:	.word	0x20005c94
    8dcc:	.word	0x000f4240

00008dd0 <SdioCard::writeData(unsigned char const*)>:
//------------------------------------------------------------------------------
bool SdioCard::writeData(const uint8_t* src) {
    8dd0:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (!m_transferActive) {
    8dd4:	ldr	r4, [pc, #152]	; (8e70 <SdioCard::writeData(unsigned char const*)+0xa0>)
bool SdioCard::writeData(const uint8_t* src) {
    8dd6:	mov	r7, r1
  if (!m_transferActive) {
    8dd8:	ldrb	r3, [r4, #0]
    8dda:	cmp	r3, #0
    8ddc:	bne.n	8e50 <SdioCard::writeData(unsigned char const*)+0x80>
  DBG_IRQSTAT();
  if (!waitTransferComplete()) {
    return false;
  }
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    8dde:	ldr	r3, [pc, #148]	; (8e74 <SdioCard::writeData(unsigned char const*)+0xa4>)
    8de0:	ldr	r2, [r3, #36]	; 0x24
    8de2:	lsls	r2, r2, #23
    8de4:	bpl.n	8e3e <SdioCard::writeData(unsigned char const*)+0x6e>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    8de6:	ldr	r5, [pc, #140]	; (8e74 <SdioCard::writeData(unsigned char const*)+0xa4>)
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8de8:	ldr.w	r8, [pc, #148]	; 8e80 <SdioCard::writeData(unsigned char const*)+0xb0>
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    8dec:	ldr	r3, [r5, #40]	; 0x28
    8dee:	orr.w	r3, r3, #65536	; 0x10000
    8df2:	str	r3, [r5, #40]	; 0x28
  uint32_t m = micros();
    8df4:	bl	b918 <micros>
    8df8:	mov	r6, r0
  while (fcn()) {
    8dfa:	b.n	8e06 <SdioCard::writeData(unsigned char const*)+0x36>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8dfc:	bl	b918 <micros>
    8e00:	subs	r0, r0, r6
    8e02:	cmp	r0, r8
    8e04:	bhi.n	8e5c <SdioCard::writeData(unsigned char const*)+0x8c>
static bool isBusyFifoWrite() { return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN); }
    8e06:	ldr	r3, [r5, #36]	; 0x24
  while (fcn()) {
    8e08:	ands.w	r9, r3, #1024	; 0x400
    8e0c:	beq.n	8dfc <SdioCard::writeData(unsigned char const*)+0x2c>
    8e0e:	add.w	ip, r7, #60	; 0x3c
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0; iw < 512 / (4 * FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    8e12:	ldr	r0, [pc, #96]	; (8e74 <SdioCard::writeData(unsigned char const*)+0xa4>)
    8e14:	add.w	r7, r7, #572	; 0x23c
    8e18:	ldr	r3, [r0, #36]	; 0x24
    8e1a:	lsls	r3, r3, #21
    8e1c:	bpl.n	8e18 <SdioCard::writeData(unsigned char const*)+0x48>
    8e1e:	sub.w	r3, ip, #64	; 0x40
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      SDHC_DATPORT = p32[i];
    8e22:	ldr.w	r2, [r3, #4]!
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    8e26:	cmp	ip, r3
      SDHC_DATPORT = p32[i];
    8e28:	str	r2, [r0, #32]
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    8e2a:	bne.n	8e22 <SdioCard::writeData(unsigned char const*)+0x52>
  for (uint32_t iw = 0; iw < 512 / (4 * FIFO_WML); iw++) {
    8e2c:	add.w	ip, ip, #64	; 0x40
    8e30:	cmp	ip, r7
    8e32:	bne.n	8e18 <SdioCard::writeData(unsigned char const*)+0x48>
    }
    p32 += FIFO_WML;
  }
  m_transferActive = true;
    8e34:	movs	r3, #1
  return true;
    8e36:	mov	r0, r3
  m_transferActive = true;
    8e38:	strb	r3, [r4, #0]
}
    8e3a:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    8e3e:	ldr	r2, [r3, #40]	; 0x28
    8e40:	bic.w	r2, r2, #65536	; 0x10000
    8e44:	str	r2, [r3, #40]	; 0x28
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    8e46:	ldr	r2, [r3, #40]	; 0x28
    8e48:	orr.w	r2, r2, #131072	; 0x20000
    8e4c:	str	r2, [r3, #40]	; 0x28
    8e4e:	b.n	8de6 <SdioCard::writeData(unsigned char const*)+0x16>
    8e50:	bl	8d48 <waitTransferComplete() [clone .part.0]>
  if (!waitTransferComplete()) {
    8e54:	cmp	r0, #0
    8e56:	bne.n	8dde <SdioCard::writeData(unsigned char const*)+0xe>
}
    8e58:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  m_errorCode = code;
    8e5c:	ldr	r1, [pc, #24]	; (8e78 <SdioCard::writeData(unsigned char const*)+0xa8>)
    8e5e:	movs	r4, #34	; 0x22
  m_errorLine = line;
    8e60:	ldr	r3, [pc, #24]	; (8e7c <SdioCard::writeData(unsigned char const*)+0xac>)
    8e62:	movw	r2, #1055	; 0x41f
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
    8e66:	mov	r0, r9
  m_errorCode = code;
    8e68:	strb	r4, [r1, #0]
  m_errorLine = line;
    8e6a:	str	r2, [r3, #0]
}
    8e6c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8e70:	.word	0x20007b73
    8e74:	.word	0x402c0000
    8e78:	.word	0x20001a4a
    8e7c:	.word	0x20005c94
    8e80:	.word	0x000f4240

00008e84 <cardCommand(unsigned long, unsigned long)>:
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    8e84:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8e88:	mov	r7, r0
    8e8a:	mov	r8, r1
static bool isBusyCommandInhibit() { return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB; }
    8e8c:	ldr	r4, [pc, #124]	; (8f0c <cardCommand(unsigned long, unsigned long)+0x88>)
  uint32_t m = micros();
    8e8e:	bl	b918 <micros>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8e92:	ldr	r6, [pc, #124]	; (8f10 <cardCommand(unsigned long, unsigned long)+0x8c>)
  uint32_t m = micros();
    8e94:	mov	r5, r0
  while (fcn()) {
    8e96:	b.n	8ea2 <cardCommand(unsigned long, unsigned long)+0x1e>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8e98:	bl	b918 <micros>
    8e9c:	subs	r3, r0, r5
    8e9e:	cmp	r3, r6
    8ea0:	bhi.n	8eec <cardCommand(unsigned long, unsigned long)+0x68>
static bool isBusyCommandInhibit() { return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB; }
    8ea2:	ldr	r3, [r4, #36]	; 0x24
  while (fcn()) {
    8ea4:	lsls	r1, r3, #31
    8ea6:	bmi.n	8e98 <cardCommand(unsigned long, unsigned long)+0x14>
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
    8ea8:	lsls	r3, r7, #10
  SDHC_CMDARG = arg;
    8eaa:	str.w	r8, [r4, #8]
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
    8eae:	bmi.n	8ef2 <cardCommand(unsigned long, unsigned long)+0x6e>
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
    8eb0:	bic.w	r3, r7, #255	; 0xff
  SDHC_XFERTYP = xfertyp;
    8eb4:	ldr	r4, [pc, #84]	; (8f0c <cardCommand(unsigned long, unsigned long)+0x88>)
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
    8eb6:	ldr	r6, [pc, #92]	; (8f14 <cardCommand(unsigned long, unsigned long)+0x90>)
  SDHC_XFERTYP = xfertyp;
    8eb8:	str	r3, [r4, #12]
  uint32_t m = micros();
    8eba:	bl	b918 <micros>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8ebe:	ldr	r7, [pc, #80]	; (8f10 <cardCommand(unsigned long, unsigned long)+0x8c>)
  uint32_t m = micros();
    8ec0:	mov	r5, r0
  while (fcn()) {
    8ec2:	b.n	8ece <cardCommand(unsigned long, unsigned long)+0x4a>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8ec4:	bl	b918 <micros>
    8ec8:	subs	r0, r0, r5
    8eca:	cmp	r0, r7
    8ecc:	bhi.n	8eec <cardCommand(unsigned long, unsigned long)+0x68>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
    8ece:	ldr	r3, [r4, #48]	; 0x30
  while (fcn()) {
    8ed0:	tst	r3, r6
    8ed2:	beq.n	8ec4 <cardCommand(unsigned long, unsigned long)+0x40>
  m_irqstat = SDHC_IRQSTAT;
    8ed4:	ldr	r2, [r4, #48]	; 0x30
    8ed6:	ldr	r3, [pc, #64]	; (8f18 <cardCommand(unsigned long, unsigned long)+0x94>)
    8ed8:	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    8eda:	ldr	r2, [r3, #0]
    8edc:	str	r2, [r4, #48]	; 0x30
  return (m_irqstat & SDHC_IRQSTAT_CC) && !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
    8ede:	ldr	r2, [r3, #0]
    8ee0:	lsls	r2, r2, #31
    8ee2:	bpl.n	8eec <cardCommand(unsigned long, unsigned long)+0x68>
    8ee4:	ldr	r3, [r3, #0]
    8ee6:	tst.w	r3, #983040	; 0xf0000
    8eea:	beq.n	8f04 <cardCommand(unsigned long, unsigned long)+0x80>
    8eec:	movs	r0, #0
}
    8eee:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    8ef2:	ldr	r2, [r4, #72]	; 0x48
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
    8ef4:	uxtb	r3, r7
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    8ef6:	bic.w	r2, r2, #255	; 0xff
    8efa:	str	r2, [r4, #72]	; 0x48
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
    8efc:	ldr	r2, [r4, #72]	; 0x48
    8efe:	orrs	r3, r2
    8f00:	str	r3, [r4, #72]	; 0x48
    8f02:	b.n	8eb0 <cardCommand(unsigned long, unsigned long)+0x2c>
  return (m_irqstat & SDHC_IRQSTAT_CC) && !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
    8f04:	movs	r0, #1
}
    8f06:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8f0a:	nop
    8f0c:	.word	0x402c0000
    8f10:	.word	0x000f4240
    8f14:	.word	0x000f0001
    8f18:	.word	0x2000641c

00008f1c <readReg16(unsigned long, void*)>:
  if (!cardCommand(xfertyp, m_rca)) {
    8f1c:	ldr	r3, [pc, #84]	; (8f74 <readReg16(unsigned long, void*)+0x58>)
static bool readReg16(uint32_t xfertyp, void* data) {
    8f1e:	push	{r4, r5, lr}
    8f20:	mov	r5, r1
    8f22:	sub	sp, #20
  if (!cardCommand(xfertyp, m_rca)) {
    8f24:	ldr	r1, [r3, #0]
    8f26:	bl	8e84 <cardCommand(unsigned long, unsigned long)>
    8f2a:	cbz	r0, 8f70 <readReg16(unsigned long, void*)+0x54>
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
    8f2c:	ldr	r3, [pc, #72]	; (8f78 <readReg16(unsigned long, void*)+0x5c>)
    8f2e:	add.w	r4, r5, #15
    8f32:	ldr	r2, [r3, #16]
    8f34:	str	r2, [sp, #0]
    8f36:	ldr	r1, [r3, #20]
    8f38:	str	r1, [sp, #4]
    8f3a:	ldr	r1, [r3, #24]
    8f3c:	str	r1, [sp, #8]
    8f3e:	ldr	r3, [r3, #28]
    8f40:	str	r3, [sp, #12]
  for (int i = 0; i < 15; i++) {
    8f42:	movs	r3, #0
    8f44:	b.n	8f4a <readReg16(unsigned long, void*)+0x2e>
    d[14 - i] = sr[i / 4] >> 8 * (i % 4);
    8f46:	ldr.w	r2, [lr, #-16]
    8f4a:	and.w	ip, r3, #3
  for (int i = 0; i < 15; i++) {
    8f4e:	adds	r3, #1
    d[14 - i] = sr[i / 4] >> 8 * (i % 4);
    8f50:	mov.w	ip, ip, lsl #3
    8f54:	bic.w	lr, r3, #3
  for (int i = 0; i < 15; i++) {
    8f58:	cmp	r3, #15
    d[14 - i] = sr[i / 4] >> 8 * (i % 4);
    8f5a:	lsr.w	r2, r2, ip
    8f5e:	add.w	r1, lr, #16
    8f62:	strb.w	r2, [r4, #-1]!
    8f66:	add.w	lr, sp, r1
  for (int i = 0; i < 15; i++) {
    8f6a:	bne.n	8f46 <readReg16(unsigned long, void*)+0x2a>
  d[15] = 0;
    8f6c:	movs	r3, #0
    8f6e:	strb	r3, [r5, #15]
}
    8f70:	add	sp, #20
    8f72:	pop	{r4, r5, pc}
    8f74:	.word	0x200061c8
    8f78:	.word	0x402c0000

00008f7c <SdioCard::isBusy()>:
bool SdioCard::isBusy() {
    8f7c:	push	{r4, lr}
  bool useDma() { return m_options & DMA_SDIO; }
    8f7e:	ldrb	r3, [r0, #8]
  if (m_sdioConfig.useDma()) {
    8f80:	lsls	r3, r3, #31
    8f82:	bpl.n	8f90 <SdioCard::isBusy()+0x14>
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    8f84:	ldr	r3, [pc, #84]	; (8fdc <SdioCard::isBusy()+0x60>)
    8f86:	ldr	r3, [r3, #0]
    8f88:	cbz	r3, 8fb8 <SdioCard::isBusy()+0x3c>
}
    8f8a:	ldmia.w	sp!, {r4, lr}
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    8f8e:	bx	r3
    if (m_transferActive) {
    8f90:	ldr	r3, [pc, #76]	; (8fe0 <SdioCard::isBusy()+0x64>)
    8f92:	ldrb	r3, [r3, #0]
    8f94:	cbnz	r3, 8fa6 <SdioCard::isBusy()+0x2a>
    return SDHC_PRSSTAT & (1 << 24) ? false : true;
    8f96:	ldr	r3, [pc, #76]	; (8fe4 <SdioCard::isBusy()+0x68>)
    8f98:	ldr	r4, [r3, #36]	; 0x24
    8f9a:	eor.w	r4, r4, #16777216	; 0x1000000
    8f9e:	ubfx	r4, r4, #24, #1
}
    8fa2:	mov	r0, r4
    8fa4:	pop	{r4, pc}
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    8fa6:	ldr	r3, [pc, #60]	; (8fe4 <SdioCard::isBusy()+0x68>)
    8fa8:	ldr	r4, [pc, #60]	; (8fe8 <SdioCard::isBusy()+0x6c>)
    8faa:	ldr	r3, [r3, #48]	; 0x30
    8fac:	ands	r4, r3
      if (isBusyTransferComplete()) {
    8fae:	clz	r4, r4
    8fb2:	lsrs	r4, r4, #5
}
    8fb4:	mov	r0, r4
    8fb6:	pop	{r4, pc}
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    8fb8:	ldr	r3, [pc, #48]	; (8fec <SdioCard::isBusy()+0x70>)
    8fba:	ldrb	r4, [r3, #0]
    8fbc:	cmp	r4, #0
    8fbe:	beq.n	8fa2 <SdioCard::isBusy()+0x26>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    8fc0:	ldr	r3, [pc, #44]	; (8ff0 <SdioCard::isBusy()+0x74>)
    8fc2:	ldr	r0, [pc, #48]	; (8ff4 <SdioCard::isBusy()+0x78>)
    8fc4:	ldr	r1, [r3, #0]
    8fc6:	bl	8e84 <cardCommand(unsigned long, unsigned long)>
    8fca:	cmp	r0, #0
    8fcc:	beq.n	8fa2 <SdioCard::isBusy()+0x26>
    8fce:	ldr	r3, [pc, #20]	; (8fe4 <SdioCard::isBusy()+0x68>)
    8fd0:	ldr	r4, [r3, #16]
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    8fd2:	eor.w	r4, r4, #256	; 0x100
    8fd6:	ubfx	r4, r4, #8, #1
    8fda:	b.n	8fa2 <SdioCard::isBusy()+0x26>
    8fdc:	.word	0x20006418
    8fe0:	.word	0x20007b73
    8fe4:	.word	0x402c0000
    8fe8:	.word	0x117f0002
    8fec:	.word	0x20007b70
    8ff0:	.word	0x200061c8
    8ff4:	.word	0x0d1a0000

00008ff8 <SdioCard::status()>:
uint32_t SdioCard::status() { return statusCMD13(); }
    8ff8:	push	{r3, lr}
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    8ffa:	ldr	r3, [pc, #16]	; (900c <SdioCard::status()+0x14>)
    8ffc:	ldr	r0, [pc, #16]	; (9010 <SdioCard::status()+0x18>)
    8ffe:	ldr	r1, [r3, #0]
    9000:	bl	8e84 <cardCommand(unsigned long, unsigned long)>
    9004:	cbz	r0, 900a <SdioCard::status()+0x12>
    9006:	ldr	r3, [pc, #12]	; (9014 <SdioCard::status()+0x1c>)
    9008:	ldr	r0, [r3, #16]
uint32_t SdioCard::status() { return statusCMD13(); }
    900a:	pop	{r3, pc}
    900c:	.word	0x200061c8
    9010:	.word	0x0d1a0000
    9014:	.word	0x402c0000

00009018 <isBusyCMD13()>:
static bool isBusyCMD13() {
    9018:	push	{r3, lr}
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    901a:	ldr	r3, [pc, #28]	; (9038 <isBusyCMD13()+0x20>)
    901c:	ldr	r0, [pc, #28]	; (903c <isBusyCMD13()+0x24>)
    901e:	ldr	r1, [r3, #0]
    9020:	bl	8e84 <cardCommand(unsigned long, unsigned long)>
    9024:	cbz	r0, 9034 <isBusyCMD13()+0x1c>
    9026:	ldr	r3, [pc, #24]	; (9040 <isBusyCMD13()+0x28>)
    9028:	ldr	r0, [r3, #16]
  return !(statusCMD13() & CARD_STATUS_READY_FOR_DATA);
    902a:	eor.w	r0, r0, #256	; 0x100
    902e:	ubfx	r0, r0, #8, #1
}
    9032:	pop	{r3, pc}
    9034:	movs	r0, #1
    9036:	pop	{r3, pc}
    9038:	.word	0x200061c8
    903c:	.word	0x0d1a0000
    9040:	.word	0x402c0000

00009044 <SdioCard::writeStart(unsigned long)>:
    }
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
    9044:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  m_busyFcn = fcn;
    9048:	ldr	r3, [pc, #164]	; (90f0 <SdioCard::writeStart(unsigned long)+0xac>)
bool SdioCard::writeStart(uint32_t sector) {
    904a:	mov	r9, r1
  m_busyFcn = fcn;
    904c:	ldr.w	sl, [pc, #192]	; 9110 <SdioCard::writeStart(unsigned long)+0xcc>
    9050:	ldr	r6, [pc, #160]	; (90f4 <SdioCard::writeStart(unsigned long)+0xb0>)
    9052:	str.w	r3, [sl]
  uint32_t m = micros();
    9056:	bl	b918 <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    905a:	ldr	r5, [pc, #156]	; (90f8 <SdioCard::writeStart(unsigned long)+0xb4>)
  uint32_t m = micros();
    905c:	mov	r4, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    905e:	ldr.w	r8, [pc, #180]	; 9114 <SdioCard::writeStart(unsigned long)+0xd0>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    9062:	ldr	r7, [pc, #152]	; (90fc <SdioCard::writeStart(unsigned long)+0xb8>)
  while (fcn()) {
    9064:	b.n	9074 <SdioCard::writeStart(unsigned long)+0x30>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    9066:	bl	b918 <micros>
    906a:	subs	r0, r0, r4
    906c:	cmp	r0, r7
    906e:	bhi.n	90c4 <SdioCard::writeStart(unsigned long)+0x80>
    yield();
    9070:	bl	c180 <yield>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    9074:	ldr	r1, [r6, #0]
    9076:	mov	r0, r5
    9078:	bl	8e84 <cardCommand(unsigned long, unsigned long)>
    907c:	cmp	r0, #0
    907e:	beq.n	9066 <SdioCard::writeStart(unsigned long)+0x22>
    9080:	ldr.w	r3, [r8, #16]
  while (fcn()) {
    9084:	lsls	r3, r3, #23
    9086:	bpl.n	9066 <SdioCard::writeStart(unsigned long)+0x22>
  m_busyFcn = 0;
    9088:	movs	r3, #0
  }
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;

#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    908a:	mov.w	r2, #512	; 0x200
  m_busyFcn = 0;
    908e:	str.w	r3, [sl]
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    9092:	ldr.w	r3, [r8, #40]	; 0x28
    9096:	bic.w	r3, r3, #65536	; 0x10000
    909a:	str.w	r3, [r8, #40]	; 0x28
#else   // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(MAX_BLKCNT) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512 * sector)) {
    909e:	ldr	r3, [pc, #96]	; (9100 <SdioCard::writeStart(unsigned long)+0xbc>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    90a0:	str.w	r2, [r8, #4]
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512 * sector)) {
    90a4:	ldrb	r3, [r3, #0]
    90a6:	cbz	r3, 90dc <SdioCard::writeStart(unsigned long)+0x98>
    90a8:	mov	r1, r9
    90aa:	ldr	r0, [pc, #88]	; (9104 <SdioCard::writeStart(unsigned long)+0xc0>)
    90ac:	bl	8e84 <cardCommand(unsigned long, unsigned long)>
    90b0:	cbnz	r0, 90c0 <SdioCard::writeStart(unsigned long)+0x7c>
  m_errorCode = code;
    90b2:	ldr	r1, [pc, #84]	; (9108 <SdioCard::writeStart(unsigned long)+0xc4>)
    90b4:	movs	r4, #14
  m_errorLine = line;
    90b6:	ldr	r3, [pc, #84]	; (910c <SdioCard::writeStart(unsigned long)+0xc8>)
    90b8:	movw	r2, #1150	; 0x47e
  m_errorCode = code;
    90bc:	strb	r4, [r1, #0]
  m_errorLine = line;
    90be:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD25);
  }
  return true;
}
    90c0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_errorCode = code;
    90c4:	ldr	r2, [pc, #64]	; (9108 <SdioCard::writeStart(unsigned long)+0xc4>)
    90c6:	movs	r1, #10
      m_busyFcn = 0;
    90c8:	movs	r0, #0
  m_errorLine = line;
    90ca:	ldr	r3, [pc, #64]	; (910c <SdioCard::writeStart(unsigned long)+0xc8>)
  m_errorCode = code;
    90cc:	strb	r1, [r2, #0]
  m_errorLine = line;
    90ce:	movw	r2, #1138	; 0x472
      m_busyFcn = 0;
    90d2:	str.w	r0, [sl]
  m_errorLine = line;
    90d6:	str	r2, [r3, #0]
}
    90d8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512 * sector)) {
    90dc:	mov.w	r9, r9, lsl #9
    90e0:	ldr	r0, [pc, #32]	; (9104 <SdioCard::writeStart(unsigned long)+0xc0>)
    90e2:	mov	r1, r9
    90e4:	bl	8e84 <cardCommand(unsigned long, unsigned long)>
    90e8:	cmp	r0, #0
    90ea:	bne.n	90c0 <SdioCard::writeStart(unsigned long)+0x7c>
    90ec:	b.n	90b2 <SdioCard::writeStart(unsigned long)+0x6e>
    90ee:	nop
    90f0:	.word	0x00009019
    90f4:	.word	0x200061c8
    90f8:	.word	0x0d1a0000
    90fc:	.word	0x000f4240
    9100:	.word	0x20007b72
    9104:	.word	0x193a0020
    9108:	.word	0x20001a4a
    910c:	.word	0x20005c94
    9110:	.word	0x20006418
    9114:	.word	0x402c0000

00009118 <SdioCard::cardCMD6(unsigned long, unsigned char*)>:
bool SdioCard::cardCMD6(uint32_t arg, uint8_t* status) {
    9118:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    911c:	mov	sl, r1
    911e:	mov	r9, r2
    9120:	ldr	r6, [pc, #144]	; (91b4 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x9c>)
  uint32_t m = micros();
    9122:	bl	b918 <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    9126:	ldr	r5, [pc, #144]	; (91b8 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xa0>)
  uint32_t m = micros();
    9128:	mov	r4, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    912a:	ldr.w	r8, [pc, #176]	; 91dc <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xc4>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    912e:	ldr	r7, [pc, #140]	; (91bc <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xa4>)
  while (fcn()) {
    9130:	b.n	913c <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x24>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    9132:	bl	b918 <micros>
    9136:	subs	r0, r0, r4
    9138:	cmp	r0, r7
    913a:	bhi.n	9188 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x70>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    913c:	ldr	r1, [r6, #0]
    913e:	mov	r0, r5
    9140:	bl	8e84 <cardCommand(unsigned long, unsigned long)>
    9144:	cmp	r0, #0
    9146:	beq.n	9132 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x1a>
    9148:	ldr.w	r3, [r8, #16]
  while (fcn()) {
    914c:	lsls	r3, r3, #23
    914e:	bpl.n	9132 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x1a>
  m_dmaBusy = true;
    9150:	ldr	r3, [pc, #108]	; (91c0 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xa8>)
    9152:	movs	r2, #1
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    9154:	mov	r1, sl
    9156:	ldr	r0, [pc, #108]	; (91c4 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xac>)
  m_dmaBusy = true;
    9158:	strb	r2, [r3, #0]
  m_irqstat = 0;
    915a:	movs	r2, #0
    915c:	ldr	r3, [pc, #104]	; (91c8 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xb0>)
    915e:	str	r2, [r3, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    9160:	ldr	r2, [pc, #104]	; (91cc <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xb4>)
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    9162:	ldr	r3, [pc, #108]	; (91d0 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xb8>)
  SDHC_DSADDR = (uint32_t)status;
    9164:	str.w	r9, [r8]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    9168:	str.w	r2, [r8, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    916c:	str.w	r3, [r8, #56]	; 0x38
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    9170:	bl	8e84 <cardCommand(unsigned long, unsigned long)>
    9174:	cbnz	r0, 919c <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x84>
  m_errorCode = code;
    9176:	ldr	r1, [pc, #92]	; (91d4 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xbc>)
    9178:	movs	r4, #4
  m_errorLine = line;
    917a:	ldr	r3, [pc, #92]	; (91d8 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xc0>)
    917c:	movw	r2, #795	; 0x31b
  m_errorCode = code;
    9180:	strb	r4, [r1, #0]
  m_errorLine = line;
    9182:	str	r2, [r3, #0]
}
    9184:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_errorCode = code;
    9188:	ldr	r1, [pc, #72]	; (91d4 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xbc>)
    918a:	movs	r4, #10
  m_errorLine = line;
    918c:	ldr	r3, [pc, #72]	; (91d8 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xc0>)
    918e:	mov.w	r2, #788	; 0x314
    return sdError(SD_CARD_ERROR_CMD13);
    9192:	movs	r0, #0
  m_errorCode = code;
    9194:	strb	r4, [r1, #0]
  m_errorLine = line;
    9196:	str	r2, [r3, #0]
}
    9198:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (!waitDmaStatus()) {
    919c:	bl	8ce0 <waitDmaStatus()>
    91a0:	cmp	r0, #0
    91a2:	bne.n	9198 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x80>
  m_errorCode = code;
    91a4:	ldr	r1, [pc, #44]	; (91d4 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xbc>)
    91a6:	movs	r4, #38	; 0x26
  m_errorLine = line;
    91a8:	ldr	r3, [pc, #44]	; (91d8 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xc0>)
    91aa:	movw	r2, #798	; 0x31e
  m_errorCode = code;
    91ae:	strb	r4, [r1, #0]
  m_errorLine = line;
    91b0:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_DMA);
    91b2:	b.n	9198 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x80>
    91b4:	.word	0x200061c8
    91b8:	.word	0x0d1a0000
    91bc:	.word	0x000f4240
    91c0:	.word	0x20007b75
    91c4:	.word	0x063a0011
    91c8:	.word	0x2000641c
    91cc:	.word	0x00010040
    91d0:	.word	0x117f0002
    91d4:	.word	0x20001a4a
    91d8:	.word	0x20005c94
    91dc:	.word	0x402c0000

000091e0 <SdioCard::readStop()>:
bool SdioCard::readStop() { return transferStop(); }
    91e0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    91e4:	ldr	r4, [pc, #148]	; (927c <SdioCard::readStop()+0x9c>)
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    91e6:	movs	r1, #0
    91e8:	ldr	r0, [pc, #148]	; (9280 <SdioCard::readStop()+0xa0>)
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    91ea:	ldr	r3, [r4, #40]	; 0x28
    91ec:	bic.w	r3, r3, #65536	; 0x10000
    91f0:	str	r3, [r4, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    91f2:	bl	8e84 <cardCommand(unsigned long, unsigned long)>
    91f6:	mov	r5, r0
    91f8:	cbnz	r0, 920e <SdioCard::readStop()+0x2e>
  m_errorCode = code;
    91fa:	ldr	r1, [pc, #136]	; (9284 <SdioCard::readStop()+0xa4>)
    91fc:	movs	r0, #9
  m_errorLine = line;
    91fe:	ldr	r3, [pc, #136]	; (9288 <SdioCard::readStop()+0xa8>)
    9200:	movw	r2, #621	; 0x26d
  m_errorCode = code;
    9204:	strb	r0, [r1, #0]
  m_errorLine = line;
    9206:	str	r2, [r3, #0]
bool SdioCard::readStop() { return transferStop(); }
    9208:	mov	r0, r5
    920a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_busyFcn = fcn;
    920e:	ldr	r3, [pc, #124]	; (928c <SdioCard::readStop()+0xac>)
    9210:	ldr.w	r8, [pc, #128]	; 9294 <SdioCard::readStop()+0xb4>
    9214:	str.w	r3, [r8]
  uint32_t m = micros();
    9218:	bl	b918 <micros>
static bool isBusyDat() { return SDHC_PRSSTAT & (1 << 24) ? false : true; }
    921c:	ldr	r3, [r4, #36]	; 0x24
  uint32_t m = micros();
    921e:	mov	r6, r0
  while (fcn()) {
    9220:	lsls	r0, r3, #7
    9222:	bmi.n	9256 <SdioCard::readStop()+0x76>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    9224:	ldr	r7, [pc, #104]	; (9290 <SdioCard::readStop()+0xb0>)
    9226:	b.n	9232 <SdioCard::readStop()+0x52>
    yield();
    9228:	bl	c180 <yield>
static bool isBusyDat() { return SDHC_PRSSTAT & (1 << 24) ? false : true; }
    922c:	ldr	r3, [r4, #36]	; 0x24
  while (fcn()) {
    922e:	lsls	r1, r3, #7
    9230:	bmi.n	9256 <SdioCard::readStop()+0x76>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    9232:	bl	b918 <micros>
    9236:	subs	r3, r0, r6
    9238:	cmp	r3, r7
    923a:	bls.n	9228 <SdioCard::readStop()+0x48>
  m_errorCode = code;
    923c:	ldr	r2, [pc, #68]	; (9284 <SdioCard::readStop()+0xa4>)
    923e:	movs	r1, #10
      m_busyFcn = 0;
    9240:	movs	r5, #0
  m_errorLine = line;
    9242:	ldr	r3, [pc, #68]	; (9288 <SdioCard::readStop()+0xa8>)
  m_errorCode = code;
    9244:	strb	r1, [r2, #0]
  m_errorLine = line;
    9246:	mov.w	r2, #624	; 0x270
bool SdioCard::readStop() { return transferStop(); }
    924a:	mov	r0, r5
      m_busyFcn = 0;
    924c:	str.w	r5, [r8]
  m_errorLine = line;
    9250:	str	r2, [r3, #0]
bool SdioCard::readStop() { return transferStop(); }
    9252:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_busyFcn = 0;
    9256:	movs	r2, #0
  if (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB) {
    9258:	ldr	r3, [pc, #32]	; (927c <SdioCard::readStop()+0x9c>)
  m_busyFcn = 0;
    925a:	str.w	r2, [r8]
  if (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB) {
    925e:	ldr	r2, [r3, #36]	; 0x24
    9260:	lsls	r2, r2, #30
    9262:	bpl.n	9208 <SdioCard::readStop()+0x28>
    uint32_t irqsststen = SDHC_IRQSTATEN;
    9264:	ldr	r0, [r3, #52]	; 0x34
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    9266:	ldr	r2, [r3, #40]	; 0x28
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    9268:	ldr	r1, [r3, #44]	; 0x2c
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    926a:	bic.w	r2, r2, #65536	; 0x10000
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    926e:	orr.w	r1, r1, #67108864	; 0x4000000
    9272:	str	r1, [r3, #44]	; 0x2c
    SDHC_IRQSTATEN = irqsststen;
    9274:	str	r0, [r3, #52]	; 0x34
    SDHC_PROCTL = proctl;
    9276:	str	r2, [r3, #40]	; 0x28
    9278:	b.n	9208 <SdioCard::readStop()+0x28>
    927a:	nop
    927c:	.word	0x402c0000
    9280:	.word	0x0cdb0000
    9284:	.word	0x20001a4a
    9288:	.word	0x20005c94
    928c:	.word	0x00008aad
    9290:	.word	0x000f4240
    9294:	.word	0x20006418

00009298 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>:
                        size_t n) {
    9298:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    929c:	mov	r4, r2
  if ((3 & (uint32_t)buf) || n == 0) {
    929e:	ands.w	r2, r2, #3
                        size_t n) {
    92a2:	sub	sp, #12
  if ((3 & (uint32_t)buf) || n == 0) {
    92a4:	it	ne
    92a6:	movne	r2, #1
    92a8:	str	r3, [sp, #4]
    92aa:	cmp	r3, #0
    92ac:	it	eq
    92ae:	orreq.w	r2, r2, #1
    92b2:	cbz	r2, 92ca <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x32>
  m_errorCode = code;
    92b4:	ldr	r1, [pc, #184]	; (9370 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xd8>)
    92b6:	movs	r0, #38	; 0x26
  m_errorLine = line;
    92b8:	ldr	r3, [pc, #184]	; (9374 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xdc>)
    92ba:	movw	r2, #547	; 0x223
  m_errorCode = code;
    92be:	strb	r0, [r1, #0]
  m_errorLine = line;
    92c0:	str	r2, [r3, #0]
}
    92c2:	movs	r0, #0
    92c4:	add	sp, #12
    92c6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  m_busyFcn = fcn;
    92ca:	ldr	r3, [pc, #172]	; (9378 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xe0>)
    92cc:	mov	r6, r0
    92ce:	ldr	r2, [pc, #172]	; (937c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xe4>)
    92d0:	mov	r5, r1
    92d2:	ldr.w	r9, [pc, #192]	; 9394 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xfc>
    92d6:	str	r3, [r2, #0]
  uint32_t m = micros();
    92d8:	bl	b918 <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    92dc:	ldr.w	r8, [pc, #184]	; 9398 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x100>
  uint32_t m = micros();
    92e0:	mov	r7, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    92e2:	ldr.w	fp, [pc, #184]	; 939c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x104>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    92e6:	ldr.w	sl, [pc, #184]	; 93a0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x108>
  while (fcn()) {
    92ea:	b.n	92fa <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x62>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    92ec:	bl	b918 <micros>
    92f0:	subs	r0, r0, r7
    92f2:	cmp	r0, sl
    92f4:	bhi.n	9356 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xbe>
    yield();
    92f6:	bl	c180 <yield>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    92fa:	ldr.w	r1, [r9]
    92fe:	mov	r0, r8
    9300:	bl	8e84 <cardCommand(unsigned long, unsigned long)>
    9304:	cmp	r0, #0
    9306:	beq.n	92ec <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x54>
    9308:	ldr.w	r3, [fp, #16]
  while (fcn()) {
    930c:	lsls	r3, r3, #23
    930e:	bpl.n	92ec <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x54>
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    9310:	ldr	r2, [sp, #4]
  m_dmaBusy = true;
    9312:	movs	r0, #1
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    9314:	ldr	r3, [pc, #104]	; (9380 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xe8>)
  m_busyFcn = 0;
    9316:	ldr	r1, [pc, #100]	; (937c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xe4>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    9318:	and.w	r3, r3, r2, lsl #16
  m_busyFcn = 0;
    931c:	movs	r2, #0
    931e:	str	r2, [r1, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    9320:	orr.w	r3, r3, #512	; 0x200
  m_dmaBusy = true;
    9324:	ldr	r1, [pc, #92]	; (9384 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xec>)
    9326:	strb	r0, [r1, #0]
  m_irqstat = 0;
    9328:	ldr	r1, [pc, #92]	; (9388 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xf0>)
    932a:	str	r2, [r1, #0]
  SDHC_DSADDR = (uint32_t)buf;
    932c:	str.w	r4, [fp]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    9330:	str.w	r3, [fp, #4]
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512 * sector)) {
    9334:	ldr	r3, [pc, #84]	; (938c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xf4>)
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    9336:	ldr	r2, [pc, #88]	; (9390 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xf8>)
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512 * sector)) {
    9338:	ldrb	r3, [r3, #0]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    933a:	str.w	r2, [fp, #56]	; 0x38
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512 * sector)) {
    933e:	cbz	r3, 936c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xd4>
    9340:	mov	r1, r5
    9342:	mov	r0, r6
    9344:	bl	8e84 <cardCommand(unsigned long, unsigned long)>
    9348:	cmp	r0, #0
    934a:	beq.n	92c2 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2a>
}
    934c:	add	sp, #12
    934e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  return waitDmaStatus();
    9352:	b.w	8ce0 <waitDmaStatus()>
  m_errorCode = code;
    9356:	ldr	r2, [pc, #24]	; (9370 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xd8>)
    9358:	movs	r1, #10
      m_busyFcn = 0;
    935a:	movs	r0, #0
  m_errorLine = line;
    935c:	ldr	r3, [pc, #20]	; (9374 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xdc>)
      m_busyFcn = 0;
    935e:	ldr	r4, [pc, #28]	; (937c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xe4>)
  m_errorCode = code;
    9360:	strb	r1, [r2, #0]
  m_errorLine = line;
    9362:	movw	r2, #550	; 0x226
      m_busyFcn = 0;
    9366:	str	r0, [r4, #0]
  m_errorLine = line;
    9368:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD13);
    936a:	b.n	92c2 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2a>
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512 * sector)) {
    936c:	lsls	r5, r5, #9
    936e:	b.n	9340 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xa8>
    9370:	.word	0x20001a4a
    9374:	.word	0x20005c94
    9378:	.word	0x00009019
    937c:	.word	0x20006418
    9380:	.word	0x1fff0000
    9384:	.word	0x20007b75
    9388:	.word	0x2000641c
    938c:	.word	0x20007b72
    9390:	.word	0x117f0002
    9394:	.word	0x200061c8
    9398:	.word	0x0d1a0000
    939c:	.word	0x402c0000
    93a0:	.word	0x000f4240

000093a4 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    93a4:	push	{r3, r4, r5, r6, r7, lr}
    93a6:	mov	r6, r0
    93a8:	ldrb	r0, [r0, #8]
    93aa:	mov	r4, r1
    93ac:	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    93ae:	lsls	r0, r0, #31
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    93b0:	mov	r7, r3
  if (m_sdioConfig.useDma()) {
    93b2:	bmi.n	93dc <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x38>
    for (size_t i = 0; i < n; i++) {
    93b4:	cbz	r3, 93d8 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    93b6:	add	r7, r1
    93b8:	b.n	93be <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x1a>
    93ba:	cmp	r4, r7
    93bc:	beq.n	93d8 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
      if (!readSector(sector + i, dst + i * 512UL)) {
    93be:	ldr	r3, [r6, #0]
    93c0:	mov	r2, r5
    93c2:	mov	r1, r4
    93c4:	mov	r0, r6
    93c6:	ldr	r3, [r3, #16]
    for (size_t i = 0; i < n; i++) {
    93c8:	adds	r4, #1
    93ca:	add.w	r5, r5, #512	; 0x200
      if (!readSector(sector + i, dst + i * 512UL)) {
    93ce:	blx	r3
    93d0:	cmp	r0, #0
    93d2:	bne.n	93ba <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x16>
          return false;  // readSector will set errorCode.
    93d4:	movs	r0, #0
}
    93d6:	pop	{r3, r4, r5, r6, r7, pc}
  return true;
    93d8:	movs	r0, #1
}
    93da:	pop	{r3, r4, r5, r6, r7, pc}
    if ((uint32_t)dst & 3) {
    93dc:	lsls	r0, r2, #30
    93de:	beq.n	9406 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x62>
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    93e0:	cmp	r3, #0
    93e2:	beq.n	93d8 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    93e4:	add	r7, r1
    93e6:	b.n	93ec <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x48>
    93e8:	cmp	r4, r7
    93ea:	beq.n	93d8 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
        if (!readSector(sector, dst)) {
    93ec:	ldr	r3, [r6, #0]
    93ee:	mov	r2, r5
    93f0:	mov	r1, r4
    93f2:	mov	r0, r6
    93f4:	ldr	r3, [r3, #16]
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    93f6:	adds	r4, #1
    93f8:	add.w	r5, r5, #512	; 0x200
        if (!readSector(sector, dst)) {
    93fc:	blx	r3
    93fe:	cmp	r0, #0
    9400:	bne.n	93e8 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x44>
          return false;  // readSector will set errorCode.
    9402:	movs	r0, #0
    9404:	b.n	93d6 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x32>
    if (!rdWrSectors(CMD18_DMA_XFERTYP, sector, dst, n)) {
    9406:	ldr	r0, [pc, #24]	; (9420 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x7c>)
    9408:	bl	9298 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    940c:	cmp	r0, #0
    940e:	bne.n	93d8 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
  m_errorCode = code;
    9410:	ldr	r1, [pc, #16]	; (9424 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x80>)
    9412:	movs	r4, #12
  m_errorLine = line;
    9414:	ldr	r3, [pc, #16]	; (9428 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x84>)
    9416:	movw	r2, #974	; 0x3ce
  m_errorCode = code;
    941a:	strb	r4, [r1, #0]
  m_errorLine = line;
    941c:	str	r2, [r3, #0]
}
    941e:	pop	{r3, r4, r5, r6, r7, pc}
    9420:	.word	0x123a0037
    9424:	.word	0x20001a4a
    9428:	.word	0x20005c94

0000942c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    942c:	push	{r3, r4, r5, r6, r7, lr}
    942e:	mov	r6, r0
    9430:	ldrb	r0, [r0, #8]
    9432:	mov	r4, r1
    9434:	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    9436:	lsls	r0, r0, #31
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    9438:	mov	r7, r3
  if (m_sdioConfig.useDma()) {
    943a:	bmi.n	9464 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x38>
    for (size_t i = 0; i < n; i++) {
    943c:	cbz	r3, 9460 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    943e:	add	r7, r1
    9440:	b.n	9446 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x1a>
    9442:	cmp	r4, r7
    9444:	beq.n	9460 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
      if (!writeSector(sector + i, src + i * 512UL)) {
    9446:	ldr	r3, [r6, #0]
    9448:	mov	r2, r5
    944a:	mov	r1, r4
    944c:	mov	r0, r6
    944e:	ldr	r3, [r3, #32]
    for (size_t i = 0; i < n; i++) {
    9450:	adds	r4, #1
    9452:	add.w	r5, r5, #512	; 0x200
      if (!writeSector(sector + i, src + i * 512UL)) {
    9456:	blx	r3
    9458:	cmp	r0, #0
    945a:	bne.n	9442 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x16>
          return false;  // writeSector will set errorCode.
    945c:	movs	r0, #0
}
    945e:	pop	{r3, r4, r5, r6, r7, pc}
  return true;
    9460:	movs	r0, #1
}
    9462:	pop	{r3, r4, r5, r6, r7, pc}
    if (3 & (uint32_t)ptr) {
    9464:	lsls	r0, r2, #30
    9466:	beq.n	948e <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x62>
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    9468:	cmp	r3, #0
    946a:	beq.n	9460 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    946c:	add	r7, r1
    946e:	b.n	9474 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x48>
    9470:	cmp	r4, r7
    9472:	beq.n	9460 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
        if (!writeSector(sector, ptr)) {
    9474:	ldr	r3, [r6, #0]
    9476:	mov	r2, r5
    9478:	mov	r1, r4
    947a:	mov	r0, r6
    947c:	ldr	r3, [r3, #32]
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    947e:	adds	r4, #1
    9480:	add.w	r5, r5, #512	; 0x200
        if (!writeSector(sector, ptr)) {
    9484:	blx	r3
    9486:	cmp	r0, #0
    9488:	bne.n	9470 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x44>
          return false;  // writeSector will set errorCode.
    948a:	movs	r0, #0
    948c:	b.n	945e <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x32>
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
    948e:	ldr	r0, [pc, #24]	; (94a8 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x7c>)
    9490:	bl	9298 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    9494:	cmp	r0, #0
    9496:	bne.n	9460 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
  m_errorCode = code;
    9498:	ldr	r1, [pc, #16]	; (94ac <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x80>)
    949a:	movs	r4, #14
  m_errorLine = line;
    949c:	ldr	r3, [pc, #16]	; (94b0 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x84>)
    949e:	movw	r2, #1124	; 0x464
  m_errorCode = code;
    94a2:	strb	r4, [r1, #0]
  m_errorLine = line;
    94a4:	str	r2, [r3, #0]
}
    94a6:	pop	{r3, r4, r5, r6, r7, pc}
    94a8:	.word	0x193a0027
    94ac:	.word	0x20001a4a
    94b0:	.word	0x20005c94

000094b4 <SdioCard::begin(SdioConfig)>:
  m_curState = IDLE_STATE;
    94b4:	movs	r2, #0
  m_initDone = false;
    94b6:	ldr	r3, [pc, #708]	; (977c <SdioCard::begin(SdioConfig)+0x2c8>)
bool SdioCard::begin(SdioConfig sdioConfig) {
    94b8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  m_initDone = false;
    94bc:	strb	r2, [r3, #0]
bool SdioCard::begin(SdioConfig sdioConfig) {
    94be:	mov	r6, r0
  CCM_ANALOG_PFD_528 |= (1 << 7);
    94c0:	ldr	r3, [pc, #700]	; (9780 <SdioCard::begin(SdioConfig)+0x2cc>)
bool SdioCard::begin(SdioConfig sdioConfig) {
    94c2:	sub	sp, #76	; 0x4c
  m_errorCode = SD_CARD_ERROR_NONE;
    94c4:	ldr	r4, [pc, #700]	; (9784 <SdioCard::begin(SdioConfig)+0x2d0>)
  m_highCapacity = false;
    94c6:	ldr.w	sl, [pc, #788]	; 97dc <SdioCard::begin(SdioConfig)+0x328>
  m_version2 = false;
    94ca:	ldr	r7, [pc, #700]	; (9788 <SdioCard::begin(SdioConfig)+0x2d4>)
  m_errorCode = SD_CARD_ERROR_NONE;
    94cc:	strb	r2, [r4, #0]
  m_curState = IDLE_STATE;
    94ce:	strb	r2, [r0, #9]
  m_highCapacity = false;
    94d0:	strb.w	r2, [sl]
  m_version2 = false;
    94d4:	strb	r2, [r7, #0]
  CCM_ANALOG_PFD_528 |= (1 << 7);
    94d6:	ldr.w	r2, [r3, #256]	; 0x100
  m_sdioConfig = sdioConfig;
    94da:	strb	r1, [r0, #8]
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    94dc:	movs	r1, #5
  CCM_ANALOG_PFD_528 |= (1 << 7);
    94de:	orr.w	r2, r2, #128	; 0x80
  SDHC_MIX_CTRL |= 0x80000000;
    94e2:	ldr.w	r8, [pc, #704]	; 97a4 <SdioCard::begin(SdioConfig)+0x2f0>
  CCM_ANALOG_PFD_528 |= (1 << 7);
    94e6:	str.w	r2, [r3, #256]	; 0x100
  CCM_ANALOG_PFD_528 &= ~(0x3F << 0);
    94ea:	ldr.w	r2, [r3, #256]	; 0x100
    94ee:	bic.w	r2, r2, #63	; 0x3f
    94f2:	str.w	r2, [r3, #256]	; 0x100
  CCM_ANALOG_PFD_528 |= ((24) & 0x3F << 0);  // 12 - 35
    94f6:	ldr.w	r2, [r3, #256]	; 0x100
    94fa:	orr.w	r2, r2, #24
    94fe:	str.w	r2, [r3, #256]	; 0x100
  CCM_ANALOG_PFD_528 &= ~(1 << 7);
    9502:	ldr.w	r2, [r3, #256]	; 0x100
    9506:	bic.w	r2, r2, #128	; 0x80
    950a:	str.w	r2, [r3, #256]	; 0x100
  CCM_CCGR6 |= CCM_CCGR6_USDHC1(CCM_CCGR_ON);
    950e:	add.w	r3, r3, #147456	; 0x24000
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    9512:	ldr	r2, [pc, #632]	; (978c <SdioCard::begin(SdioConfig)+0x2d8>)
  CCM_CCGR6 |= CCM_CCGR6_USDHC1(CCM_CCGR_ON);
    9514:	ldr.w	r0, [r3, #128]	; 0x80
    9518:	orr.w	r0, r0, #12
    951c:	str.w	r0, [r3, #128]	; 0x80
  CCM_CSCDR1 &= ~(CCM_CSCDR1_USDHC1_CLK_PODF_MASK);
    9520:	ldr	r0, [r3, #36]	; 0x24
    9522:	bic.w	r0, r0, #14336	; 0x3800
    9526:	str	r0, [r3, #36]	; 0x24
  CCM_CSCMR1 |= CCM_CSCMR1_USDHC1_CLK_SEL;  // PLL2PFD0
    9528:	ldr	r0, [r3, #28]
    952a:	orr.w	r0, r0, #65536	; 0x10000
    952e:	str	r0, [r3, #28]
  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((1));
    9530:	ldr	r0, [r3, #36]	; 0x24
    9532:	orr.w	r0, r0, #2048	; 0x800
    9536:	str	r0, [r3, #36]	; 0x24
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    9538:	str.w	r1, [r2, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    953c:	str.w	r1, [r2, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    9540:	str.w	r1, [r2, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    9544:	str.w	r1, [r2, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    9548:	str.w	r1, [r2, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    954c:	str.w	r1, [r2, #456]	; 0x1c8
  SDHC_MIX_CTRL |= 0x80000000;
    9550:	ldr.w	r2, [r8, #72]	; 0x48
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    9554:	ldr	r3, [pc, #568]	; (9790 <SdioCard::begin(SdioConfig)+0x2dc>)
  SDHC_MIX_CTRL |= 0x80000000;
    9556:	orr.w	r2, r2, #2147483648	; 0x80000000
    955a:	str.w	r2, [r8, #72]	; 0x48
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    955e:	ldr.w	r2, [r8, #44]	; 0x2c
    9562:	orrs	r3, r2
    9564:	str.w	r3, [r8, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) {
    9568:	ldr.w	r5, [r8, #44]	; 0x2c
    956c:	ands.w	r5, r5, #16777216	; 0x1000000
    9570:	bne.n	9568 <SdioCard::begin(SdioConfig)+0xb4>
  setSdclk(SD_MAX_INIT_RATE_KHZ);
    9572:	mov.w	r0, #400	; 0x190
    9576:	bl	8acc <setSdclk(unsigned long)>
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    957a:	ldr	r3, [pc, #528]	; (978c <SdioCard::begin(SdioConfig)+0x2d8>)
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    957c:	movw	r2, #28856	; 0x70b8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    9580:	movw	r1, #4280	; 0x10b8
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    9584:	str.w	r5, [r3, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    9588:	str.w	r5, [r3, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    958c:	str.w	r5, [r3, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    9590:	str.w	r5, [r3, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    9594:	str.w	r5, [r3, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    9598:	str.w	r5, [r3, #456]	; 0x1c8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    959c:	str.w	r2, [r3, #956]	; 0x3bc
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;   // DAT3
    95a0:	str.w	r2, [r3, #960]	; 0x3c0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;   // CMD
    95a4:	str.w	r2, [r3, #940]	; 0x3ac
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    95a8:	str.w	r1, [r3, #944]	; 0x3b0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02 = DATA_MASK;   // DAT0
    95ac:	str.w	r2, [r3, #948]	; 0x3b4
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;   // DAT1
    95b0:	str.w	r2, [r3, #952]	; 0x3b8
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    95b4:	ldr	r3, [pc, #476]	; (9794 <SdioCard::begin(SdioConfig)+0x2e0>)
    95b6:	ldr	r2, [pc, #480]	; (9798 <SdioCard::begin(SdioConfig)+0x2e4>)
    95b8:	str.w	r3, [r8, #52]	; 0x34
    95bc:	ldr	r3, [pc, #476]	; (979c <SdioCard::begin(SdioConfig)+0x2e8>)
    95be:	str.w	r2, [r3, #504]	; 0x1f8
  NVIC_SET_PRIORITY(IRQ_SDHC, 6 * 16);
    95c2:	ldr	r3, [pc, #476]	; (97a0 <SdioCard::begin(SdioConfig)+0x2ec>)
    95c4:	movs	r2, #96	; 0x60
    95c6:	strb.w	r2, [r3, #110]	; 0x6e
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    95ca:	mov.w	r3, #3758153728	; 0xe000e000
    95ce:	mov.w	r2, #16384	; 0x4000
    95d2:	str.w	r2, [r3, #268]	; 0x10c
  SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    95d6:	ldr.w	r3, [r8, #44]	; 0x2c
    95da:	orr.w	r3, r3, #134217728	; 0x8000000
    95de:	str.w	r3, [r8, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
    95e2:	ldr	r3, [pc, #448]	; (97a4 <SdioCard::begin(SdioConfig)+0x2f0>)
    95e4:	ldr	r1, [r3, #44]	; 0x2c
    95e6:	ands.w	r1, r1, #134217728	; 0x8000000
    95ea:	bne.n	95e4 <SdioCard::begin(SdioConfig)+0x130>
  if (!cardCommand(CMD0_XFERTYP, 0)) {
    95ec:	mov	r0, r1
    95ee:	bl	8e84 <cardCommand(unsigned long, unsigned long)>
    95f2:	mov	fp, r0
    95f4:	cbnz	r0, 960a <SdioCard::begin(SdioConfig)+0x156>
  m_errorCode = code;
    95f6:	movs	r1, #1
  m_errorLine = line;
    95f8:	ldr	r3, [pc, #428]	; (97a8 <SdioCard::begin(SdioConfig)+0x2f4>)
    95fa:	movw	r2, #702	; 0x2be
  m_errorCode = code;
    95fe:	strb	r1, [r4, #0]
  m_errorLine = line;
    9600:	str	r2, [r3, #0]
}
    9602:	mov	r0, fp
    9604:	add	sp, #76	; 0x4c
    9606:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    960a:	mov.w	r8, #3
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
    960e:	ldr.w	r9, [pc, #464]	; 97e0 <SdioCard::begin(SdioConfig)+0x32c>
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTA;
    9612:	ldr	r5, [pc, #400]	; (97a4 <SdioCard::begin(SdioConfig)+0x2f0>)
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
    9614:	mov.w	r1, #426	; 0x1aa
    9618:	mov	r0, r9
    961a:	bl	8e84 <cardCommand(unsigned long, unsigned long)>
    961e:	cmp	r0, #0
    9620:	bne.n	96c0 <SdioCard::begin(SdioConfig)+0x20c>
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTA;
    9622:	ldr	r3, [r5, #44]	; 0x2c
    9624:	orr.w	r3, r3, #16777216	; 0x1000000
    9628:	str	r3, [r5, #44]	; 0x2c
    while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) {
    962a:	ldr	r3, [r5, #44]	; 0x2c
    962c:	lsls	r3, r3, #7
    962e:	bmi.n	962a <SdioCard::begin(SdioConfig)+0x176>
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    9630:	subs.w	r8, r8, #1
    9634:	bne.n	9614 <SdioCard::begin(SdioConfig)+0x160>
  arg = m_version2 ? 0X40300000 : 0x00300000;
    9636:	ldrb	r3, [r7, #0]
    9638:	cmp	r3, #0
    963a:	ldr	r3, [pc, #368]	; (97ac <SdioCard::begin(SdioConfig)+0x2f8>)
    963c:	ite	eq
    963e:	moveq.w	r9, #3145728	; 0x300000
    9642:	movne	r9, r3
  int m = micros();
    9644:	bl	b918 <micros>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    9648:	ldr	r7, [pc, #356]	; (97b0 <SdioCard::begin(SdioConfig)+0x2fc>)
  int m = micros();
    964a:	mov	r5, r0
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    964c:	ldr.w	fp, [pc, #404]	; 97e4 <SdioCard::begin(SdioConfig)+0x330>
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    9650:	ldr.w	r8, [pc, #404]	; 97e8 <SdioCard::begin(SdioConfig)+0x334>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    9654:	movs	r1, #0
    9656:	mov	r0, r7
    9658:	bl	8e84 <cardCommand(unsigned long, unsigned long)>
    965c:	cbnz	r0, 9676 <SdioCard::begin(SdioConfig)+0x1c2>
      return sdError(SD_CARD_ERROR_ACMD41);
    965e:	mov.w	fp, #0
  m_errorCode = code;
    9662:	movs	r1, #23
  m_errorLine = line;
    9664:	ldr	r3, [pc, #320]	; (97a8 <SdioCard::begin(SdioConfig)+0x2f4>)
    9666:	movw	r2, #723	; 0x2d3
}
    966a:	mov	r0, fp
  m_errorCode = code;
    966c:	strb	r1, [r4, #0]
  m_errorLine = line;
    966e:	str	r2, [r3, #0]
}
    9670:	add	sp, #76	; 0x4c
    9672:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    9676:	mov	r1, r9
    9678:	mov	r0, fp
    967a:	bl	8e84 <cardCommand(unsigned long, unsigned long)>
    967e:	cmp	r0, #0
    9680:	beq.n	965e <SdioCard::begin(SdioConfig)+0x1aa>
        ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
    9682:	bl	b918 <micros>
    9686:	subs	r0, r0, r5
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    9688:	ldr	r3, [pc, #280]	; (97a4 <SdioCard::begin(SdioConfig)+0x2f0>)
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    968a:	cmp	r0, r8
    968c:	bhi.n	965e <SdioCard::begin(SdioConfig)+0x1aa>
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    968e:	ldr	r2, [r3, #16]
    9690:	cmp	r2, #0
    9692:	bge.n	9654 <SdioCard::begin(SdioConfig)+0x1a0>
  m_ocr = SDHC_CMDRSP0;
    9694:	ldr	r1, [r3, #16]
    9696:	ldr	r2, [pc, #284]	; (97b4 <SdioCard::begin(SdioConfig)+0x300>)
    9698:	str	r1, [r2, #0]
  if (SDHC_CMDRSP0 & 0x40000000) {
    969a:	ldr	r3, [r3, #16]
    969c:	lsls	r5, r3, #1
    969e:	bpl.n	96a6 <SdioCard::begin(SdioConfig)+0x1f2>
    m_highCapacity = true;
    96a0:	movs	r3, #1
    96a2:	strb.w	r3, [sl]
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    96a6:	movs	r1, #0
    96a8:	ldr	r0, [pc, #268]	; (97b8 <SdioCard::begin(SdioConfig)+0x304>)
    96aa:	bl	8e84 <cardCommand(unsigned long, unsigned long)>
    96ae:	mov	fp, r0
    96b0:	cbnz	r0, 96e6 <SdioCard::begin(SdioConfig)+0x232>
  m_errorCode = code;
    96b2:	movs	r1, #2
  m_errorLine = line;
    96b4:	ldr	r3, [pc, #240]	; (97a8 <SdioCard::begin(SdioConfig)+0x2f4>)
    96b6:	mov.w	r2, #732	; 0x2dc
  m_errorCode = code;
    96ba:	strb	r1, [r4, #0]
  m_errorLine = line;
    96bc:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD2);
    96be:	b.n	9602 <SdioCard::begin(SdioConfig)+0x14e>
      if (SDHC_CMDRSP0 != 0X1AA) {
    96c0:	ldr	r3, [pc, #224]	; (97a4 <SdioCard::begin(SdioConfig)+0x2f0>)
    96c2:	ldr	r3, [r3, #16]
    96c4:	cmp.w	r3, #426	; 0x1aa
    96c8:	beq.n	96dc <SdioCard::begin(SdioConfig)+0x228>
  m_errorCode = code;
    96ca:	movs	r1, #6
  m_errorLine = line;
    96cc:	ldr	r3, [pc, #216]	; (97a8 <SdioCard::begin(SdioConfig)+0x2f4>)
    96ce:	mov.w	r2, #708	; 0x2c4
        return sdError(SD_CARD_ERROR_CMD8);
    96d2:	mov.w	fp, #0
  m_errorCode = code;
    96d6:	strb	r1, [r4, #0]
  m_errorLine = line;
    96d8:	str	r2, [r3, #0]
        return sdError(SD_CARD_ERROR_CMD8);
    96da:	b.n	9602 <SdioCard::begin(SdioConfig)+0x14e>
      m_version2 = true;
    96dc:	movs	r3, #1
  arg = m_version2 ? 0X40300000 : 0x00300000;
    96de:	ldr.w	r9, [pc, #204]	; 97ac <SdioCard::begin(SdioConfig)+0x2f8>
      m_version2 = true;
    96e2:	strb	r3, [r7, #0]
  arg = m_version2 ? 0X40300000 : 0x00300000;
    96e4:	b.n	9644 <SdioCard::begin(SdioConfig)+0x190>
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    96e6:	movs	r1, #0
    96e8:	ldr	r0, [pc, #208]	; (97bc <SdioCard::begin(SdioConfig)+0x308>)
    96ea:	bl	8e84 <cardCommand(unsigned long, unsigned long)>
    96ee:	mov	fp, r0
    96f0:	cbnz	r0, 9700 <SdioCard::begin(SdioConfig)+0x24c>
  m_errorCode = code;
    96f2:	movs	r1, #3
  m_errorLine = line;
    96f4:	ldr	r3, [pc, #176]	; (97a8 <SdioCard::begin(SdioConfig)+0x2f4>)
    96f6:	movw	r2, #735	; 0x2df
  m_errorCode = code;
    96fa:	strb	r1, [r4, #0]
  m_errorLine = line;
    96fc:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD3);
    96fe:	b.n	9602 <SdioCard::begin(SdioConfig)+0x14e>
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    9700:	ldr.w	sl, [pc, #160]	; 97a4 <SdioCard::begin(SdioConfig)+0x2f0>
    9704:	ldr	r3, [pc, #184]	; (97c0 <SdioCard::begin(SdioConfig)+0x30c>)
    9706:	ldr.w	r2, [sl, #16]
    970a:	ldr	r5, [pc, #184]	; (97c4 <SdioCard::begin(SdioConfig)+0x310>)
    970c:	ands	r3, r2
  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    970e:	ldr	r1, [pc, #184]	; (97c8 <SdioCard::begin(SdioConfig)+0x314>)
    9710:	ldr	r0, [pc, #184]	; (97cc <SdioCard::begin(SdioConfig)+0x318>)
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    9712:	str	r3, [r5, #0]
  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    9714:	bl	8f1c <readReg16(unsigned long, void*)>
    9718:	mov	fp, r0
    971a:	cbnz	r0, 972a <SdioCard::begin(SdioConfig)+0x276>
  m_errorCode = code;
    971c:	movs	r1, #7
  m_errorLine = line;
    971e:	ldr	r3, [pc, #136]	; (97a8 <SdioCard::begin(SdioConfig)+0x2f4>)
    9720:	mov.w	r2, #740	; 0x2e4
  m_errorCode = code;
    9724:	strb	r1, [r4, #0]
  m_errorLine = line;
    9726:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD9);
    9728:	b.n	9602 <SdioCard::begin(SdioConfig)+0x14e>
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    972a:	ldr	r1, [pc, #164]	; (97d0 <SdioCard::begin(SdioConfig)+0x31c>)
    972c:	ldr	r0, [pc, #164]	; (97d4 <SdioCard::begin(SdioConfig)+0x320>)
    972e:	bl	8f1c <readReg16(unsigned long, void*)>
    9732:	mov	fp, r0
    9734:	cbnz	r0, 9744 <SdioCard::begin(SdioConfig)+0x290>
  m_errorCode = code;
    9736:	movs	r1, #8
  m_errorLine = line;
    9738:	ldr	r3, [pc, #108]	; (97a8 <SdioCard::begin(SdioConfig)+0x2f4>)
    973a:	movw	r2, #743	; 0x2e7
  m_errorCode = code;
    973e:	strb	r1, [r4, #0]
  m_errorLine = line;
    9740:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD10);
    9742:	b.n	9602 <SdioCard::begin(SdioConfig)+0x14e>
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    9744:	ldr	r1, [r5, #0]
    9746:	ldr	r0, [pc, #144]	; (97d8 <SdioCard::begin(SdioConfig)+0x324>)
    9748:	bl	8e84 <cardCommand(unsigned long, unsigned long)>
    974c:	mov	fp, r0
    974e:	cbnz	r0, 975e <SdioCard::begin(SdioConfig)+0x2aa>
  m_errorCode = code;
    9750:	movs	r1, #5
  m_errorLine = line;
    9752:	ldr	r3, [pc, #84]	; (97a8 <SdioCard::begin(SdioConfig)+0x2f4>)
    9754:	movw	r2, #746	; 0x2ea
  m_errorCode = code;
    9758:	strb	r1, [r4, #0]
  m_errorLine = line;
    975a:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD7);
    975c:	b.n	9602 <SdioCard::begin(SdioConfig)+0x14e>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    975e:	ldr	r1, [r5, #0]
    9760:	ldr	r0, [pc, #76]	; (97b0 <SdioCard::begin(SdioConfig)+0x2fc>)
    9762:	bl	8e84 <cardCommand(unsigned long, unsigned long)>
    9766:	cmp	r0, #0
    9768:	bne.n	97ec <SdioCard::begin(SdioConfig)+0x338>
  m_errorCode = code;
    976a:	movs	r1, #20
  m_errorLine = line;
    976c:	ldr	r3, [pc, #56]	; (97a8 <SdioCard::begin(SdioConfig)+0x2f4>)
    976e:	movw	r2, #750	; 0x2ee
    return sdError(SD_CARD_ERROR_ACMD6);
    9772:	mov.w	fp, #0
  m_errorCode = code;
    9776:	strb	r1, [r4, #0]
  m_errorLine = line;
    9778:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_ACMD6);
    977a:	b.n	9602 <SdioCard::begin(SdioConfig)+0x14e>
    977c:	.word	0x20007b70
    9780:	.word	0x400d8000
    9784:	.word	0x20001a4a
    9788:	.word	0x20007b71
    978c:	.word	0x401f8000
    9790:	.word	0x01008000
    9794:	.word	0x117f000b
    9798:	.word	0x00008a7d
    979c:	.word	0x20001c00
    97a0:	.word	0xe000e400
    97a4:	.word	0x402c0000
    97a8:	.word	0x20005c94
    97ac:	.word	0x40300000
    97b0:	.word	0x371a0000
    97b4:	.word	0x200061c4
    97b8:	.word	0x02090000
    97bc:	.word	0x031a0000
    97c0:	.word	0xffff0000
    97c4:	.word	0x200061c8
    97c8:	.word	0x200061b4
    97cc:	.word	0x09090000
    97d0:	.word	0x200061a4
    97d4:	.word	0x0a090000
    97d8:	.word	0x071b0000
    97dc:	.word	0x20007b72
    97e0:	.word	0x081a0000
    97e4:	.word	0x29020000
    97e8:	.word	0x000f4240
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    97ec:	movs	r1, #2
    97ee:	ldr	r0, [pc, #536]	; (9a08 <SdioCard::begin(SdioConfig)+0x554>)
    97f0:	bl	8e84 <cardCommand(unsigned long, unsigned long)>
    97f4:	cmp	r0, #0
    97f6:	beq.n	976a <SdioCard::begin(SdioConfig)+0x2b6>
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    97f8:	ldr.w	r3, [sl, #40]	; 0x28
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    97fc:	ldr.w	r9, [pc, #576]	; 9a40 <SdioCard::begin(SdioConfig)+0x58c>
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    9800:	bic.w	r3, r3, #6
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    9804:	ldr.w	r8, [pc, #540]	; 9a24 <SdioCard::begin(SdioConfig)+0x570>
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    9808:	str.w	r3, [sl, #40]	; 0x28
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);
    980c:	ldr.w	r3, [sl, #40]	; 0x28
    9810:	orr.w	r3, r3, #2
    9814:	str.w	r3, [sl, #40]	; 0x28
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
    9818:	mov.w	r3, #1048592	; 0x100010
    981c:	str.w	r3, [sl, #68]	; 0x44
  uint32_t m = micros();
    9820:	bl	b918 <micros>
    9824:	mov	r7, r0
  while (fcn()) {
    9826:	b.n	9832 <SdioCard::begin(SdioConfig)+0x37e>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    9828:	bl	b918 <micros>
    982c:	subs	r0, r0, r7
    982e:	cmp	r0, r8
    9830:	bhi.n	988a <SdioCard::begin(SdioConfig)+0x3d6>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    9832:	ldr	r1, [r5, #0]
    9834:	mov	r0, r9
    9836:	bl	8e84 <cardCommand(unsigned long, unsigned long)>
    983a:	cmp	r0, #0
    983c:	beq.n	9828 <SdioCard::begin(SdioConfig)+0x374>
    983e:	ldr.w	r3, [sl, #16]
  while (fcn()) {
    9842:	lsls	r0, r3, #23
    9844:	bpl.n	9828 <SdioCard::begin(SdioConfig)+0x374>
  m_dmaBusy = true;
    9846:	movs	r3, #1
    9848:	ldr.w	r8, [pc, #504]	; 9a44 <SdioCard::begin(SdioConfig)+0x590>
  m_irqstat = 0;
    984c:	ldr	r7, [pc, #444]	; (9a0c <SdioCard::begin(SdioConfig)+0x558>)
    984e:	mov.w	fp, #0
  m_dmaBusy = true;
    9852:	strb.w	r3, [r8]
  SDHC_DSADDR = (uint32_t)scr;
    9856:	ldr.w	r9, [pc, #496]	; 9a48 <SdioCard::begin(SdioConfig)+0x594>
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(8);
    985a:	ldr	r3, [pc, #436]	; (9a10 <SdioCard::begin(SdioConfig)+0x55c>)
  m_irqstat = 0;
    985c:	str.w	fp, [r7]
  SDHC_DSADDR = (uint32_t)scr;
    9860:	str.w	r9, [sl]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(8);
    9864:	str.w	r3, [sl, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    9868:	ldr	r3, [pc, #424]	; (9a14 <SdioCard::begin(SdioConfig)+0x560>)
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    986a:	ldr	r0, [pc, #428]	; (9a18 <SdioCard::begin(SdioConfig)+0x564>)
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    986c:	str.w	r3, [sl, #56]	; 0x38
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    9870:	ldr	r1, [r5, #0]
    9872:	bl	8e84 <cardCommand(unsigned long, unsigned long)>
    9876:	cbnz	r0, 989c <SdioCard::begin(SdioConfig)+0x3e8>
  m_errorCode = code;
    9878:	movs	r1, #24
  m_errorLine = line;
    987a:	ldr	r3, [pc, #416]	; (9a1c <SdioCard::begin(SdioConfig)+0x568>)
    987c:	movw	r2, #471	; 0x1d7
    return false;
    9880:	mov.w	fp, #0
  m_errorCode = code;
    9884:	strb	r1, [r4, #0]
  m_errorLine = line;
    9886:	str	r2, [r3, #0]
  return false;
    9888:	b.n	9602 <SdioCard::begin(SdioConfig)+0x14e>
  m_errorCode = code;
    988a:	movs	r1, #10
  m_errorLine = line;
    988c:	ldr	r3, [pc, #396]	; (9a1c <SdioCard::begin(SdioConfig)+0x568>)
    988e:	mov.w	r2, #464	; 0x1d0
    return false;
    9892:	mov.w	fp, #0
  m_errorCode = code;
    9896:	strb	r1, [r4, #0]
  m_errorLine = line;
    9898:	str	r2, [r3, #0]
  return false;
    989a:	b.n	9602 <SdioCard::begin(SdioConfig)+0x14e>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    989c:	mov	r1, fp
    989e:	ldr	r0, [pc, #384]	; (9a20 <SdioCard::begin(SdioConfig)+0x56c>)
    98a0:	bl	8e84 <cardCommand(unsigned long, unsigned long)>
    98a4:	cmp	r0, #0
    98a6:	beq.n	9878 <SdioCard::begin(SdioConfig)+0x3c4>
  if (!waitDmaStatus()) {
    98a8:	bl	8ce0 <waitDmaStatus()>
    98ac:	mov	fp, r0
    98ae:	cbnz	r0, 98be <SdioCard::begin(SdioConfig)+0x40a>
  m_errorCode = code;
    98b0:	movs	r1, #38	; 0x26
  m_errorLine = line;
    98b2:	ldr	r3, [pc, #360]	; (9a1c <SdioCard::begin(SdioConfig)+0x568>)
    98b4:	mov.w	r2, #474	; 0x1da
  m_errorCode = code;
    98b8:	strb	r1, [r4, #0]
  m_errorLine = line;
    98ba:	str	r2, [r3, #0]
  return false;
    98bc:	b.n	9602 <SdioCard::begin(SdioConfig)+0x14e>
  uint32_t m = micros();
    98be:	bl	b918 <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    98c2:	ldr.w	sl, [pc, #380]	; 9a40 <SdioCard::begin(SdioConfig)+0x58c>
    98c6:	ldr.w	fp, [pc, #388]	; 9a4c <SdioCard::begin(SdioConfig)+0x598>
  uint32_t m = micros();
    98ca:	str	r0, [sp, #4]
  while (fcn()) {
    98cc:	b.n	98dc <SdioCard::begin(SdioConfig)+0x428>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    98ce:	bl	b918 <micros>
    98d2:	ldr	r3, [sp, #4]
    98d4:	subs	r0, r0, r3
    98d6:	ldr	r3, [pc, #332]	; (9a24 <SdioCard::begin(SdioConfig)+0x570>)
    98d8:	cmp	r0, r3
    98da:	bhi.n	992c <SdioCard::begin(SdioConfig)+0x478>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    98dc:	ldr	r1, [r5, #0]
    98de:	mov	r0, sl
    98e0:	bl	8e84 <cardCommand(unsigned long, unsigned long)>
    98e4:	cmp	r0, #0
    98e6:	beq.n	98ce <SdioCard::begin(SdioConfig)+0x41a>
    98e8:	ldr.w	r3, [fp, #16]
  while (fcn()) {
    98ec:	lsls	r1, r3, #23
    98ee:	bpl.n	98ce <SdioCard::begin(SdioConfig)+0x41a>
  m_dmaBusy = true;
    98f0:	movs	r2, #1
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    98f2:	ldr	r0, [pc, #292]	; (9a18 <SdioCard::begin(SdioConfig)+0x564>)
  m_dmaBusy = true;
    98f4:	strb.w	r2, [r8]
  m_irqstat = 0;
    98f8:	mov.w	r8, #0
  SDHC_DSADDR = (uint32_t)scr;
    98fc:	ldr	r2, [pc, #296]	; (9a28 <SdioCard::begin(SdioConfig)+0x574>)
  m_irqstat = 0;
    98fe:	str.w	r8, [r7]
  SDHC_DSADDR = (uint32_t)scr;
    9902:	str.w	r2, [fp]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    9906:	ldr	r2, [pc, #292]	; (9a2c <SdioCard::begin(SdioConfig)+0x578>)
    9908:	str.w	r2, [fp, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    990c:	ldr	r2, [pc, #260]	; (9a14 <SdioCard::begin(SdioConfig)+0x560>)
    990e:	str.w	r2, [fp, #56]	; 0x38
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    9912:	ldr	r1, [r5, #0]
    9914:	bl	8e84 <cardCommand(unsigned long, unsigned long)>
    9918:	cbnz	r0, 993e <SdioCard::begin(SdioConfig)+0x48a>
  m_errorCode = code;
    991a:	movs	r1, #21
  m_errorLine = line;
    991c:	ldr	r3, [pc, #252]	; (9a1c <SdioCard::begin(SdioConfig)+0x568>)
    991e:	movw	r2, #453	; 0x1c5
    return false;
    9922:	mov.w	fp, #0
  m_errorCode = code;
    9926:	strb	r1, [r4, #0]
  m_errorLine = line;
    9928:	str	r2, [r3, #0]
  return false;
    992a:	b.n	9602 <SdioCard::begin(SdioConfig)+0x14e>
  m_errorCode = code;
    992c:	movs	r1, #10
  m_errorLine = line;
    992e:	ldr	r3, [pc, #236]	; (9a1c <SdioCard::begin(SdioConfig)+0x568>)
    9930:	mov.w	r2, #446	; 0x1be
    return false;
    9934:	mov.w	fp, #0
  m_errorCode = code;
    9938:	strb	r1, [r4, #0]
  m_errorLine = line;
    993a:	str	r2, [r3, #0]
  return false;
    993c:	b.n	9602 <SdioCard::begin(SdioConfig)+0x14e>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    993e:	mov	r1, r8
    9940:	ldr	r0, [pc, #236]	; (9a30 <SdioCard::begin(SdioConfig)+0x57c>)
    9942:	bl	8e84 <cardCommand(unsigned long, unsigned long)>
    9946:	cmp	r0, #0
    9948:	beq.n	991a <SdioCard::begin(SdioConfig)+0x466>
  if (!waitDmaStatus()) {
    994a:	bl	8ce0 <waitDmaStatus()>
    994e:	mov	fp, r0
    9950:	cbnz	r0, 9960 <SdioCard::begin(SdioConfig)+0x4ac>
  m_errorCode = code;
    9952:	movs	r1, #38	; 0x26
  m_errorLine = line;
    9954:	ldr	r3, [pc, #196]	; (9a1c <SdioCard::begin(SdioConfig)+0x568>)
    9956:	mov.w	r2, #456	; 0x1c8
  m_errorCode = code;
    995a:	strb	r1, [r4, #0]
  m_errorLine = line;
    995c:	str	r2, [r3, #0]
  return false;
    995e:	b.n	9602 <SdioCard::begin(SdioConfig)+0x14e>
  /** Bytes 0-3 SD Association, bytes 4-7 reserved for manufacturer. */
  uint8_t scr[8];
  /** \return SCR_STRUCTURE field  - must be zero.*/
  uint8_t srcStructure() const { return scr[0] >> 4; }
  /** \return SD_SPEC field 0 - v1.0 or V1.01, 1 - 1.10, 2 - V2.00 or greater */
  uint8_t sdSpec() const { return scr[0] & 0XF; }
    9960:	ldrb.w	r3, [r9]
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    9964:	lsls	r2, r3, #28
    9966:	beq.n	999a <SdioCard::begin(SdioConfig)+0x4e6>
  if (m_scr.sdSpec() > 0 && cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    9968:	ldr	r3, [r6, #0]
    996a:	add	r2, sp, #8
    996c:	mvn.w	r1, #4278190080	; 0xff000000
    9970:	mov	r0, r6
    9972:	ldr	r3, [r3, #40]	; 0x28
    9974:	blx	r3
    9976:	cbz	r0, 999a <SdioCard::begin(SdioConfig)+0x4e6>
    9978:	ldrb.w	r3, [sp, #21]
    997c:	lsls	r3, r3, #30
    997e:	bpl.n	999a <SdioCard::begin(SdioConfig)+0x4e6>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    9980:	ldr	r3, [r6, #0]
    9982:	add	r2, sp, #8
    9984:	mov	r0, r6
    9986:	ldr	r1, [pc, #172]	; (9a34 <SdioCard::begin(SdioConfig)+0x580>)
    9988:	ldr	r3, [r3, #40]	; 0x28
    998a:	blx	r3
  if (m_scr.sdSpec() > 0 && cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    998c:	cbz	r0, 999a <SdioCard::begin(SdioConfig)+0x4e6>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    998e:	ldrb.w	r3, [sp, #24]
    9992:	and.w	r3, r3, #15
    9996:	cmp	r3, #1
    9998:	beq.n	9a00 <SdioCard::begin(SdioConfig)+0x54c>
    kHzSdClk = 25000;
    999a:	movw	r0, #25000	; 0x61a8
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    999e:	ldr	r4, [pc, #152]	; (9a38 <SdioCard::begin(SdioConfig)+0x584>)
    99a0:	movs	r3, #5
    99a2:	str.w	r3, [r4, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    99a6:	str.w	r3, [r4, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    99aa:	str.w	r3, [r4, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    99ae:	str.w	r3, [r4, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    99b2:	str.w	r3, [r4, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    99b6:	str.w	r3, [r4, #456]	; 0x1c8
  setSdclk(kHzSdClk);
    99ba:	bl	8acc <setSdclk(unsigned long)>
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    99be:	movs	r3, #0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    99c0:	movw	r2, #28856	; 0x70b8
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    99c4:	str.w	r3, [r4, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    99c8:	str.w	r3, [r4, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    99cc:	str.w	r3, [r4, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    99d0:	str.w	r3, [r4, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    99d4:	str.w	r3, [r4, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    99d8:	str.w	r3, [r4, #456]	; 0x1c8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    99dc:	movw	r3, #4280	; 0x10b8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    99e0:	str.w	r2, [r4, #956]	; 0x3bc
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;   // DAT3
    99e4:	str.w	r2, [r4, #960]	; 0x3c0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;   // CMD
    99e8:	str.w	r2, [r4, #940]	; 0x3ac
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    99ec:	str.w	r3, [r4, #944]	; 0x3b0
  m_initDone = true;
    99f0:	movs	r3, #1
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02 = DATA_MASK;   // DAT0
    99f2:	str.w	r2, [r4, #948]	; 0x3b4
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;   // DAT1
    99f6:	str.w	r2, [r4, #952]	; 0x3b8
  m_initDone = true;
    99fa:	ldr	r2, [pc, #64]	; (9a3c <SdioCard::begin(SdioConfig)+0x588>)
    99fc:	strb	r3, [r2, #0]
  return true;
    99fe:	b.n	9602 <SdioCard::begin(SdioConfig)+0x14e>
    kHzSdClk = 50000;
    9a00:	movw	r0, #50000	; 0xc350
    9a04:	b.n	999e <SdioCard::begin(SdioConfig)+0x4ea>
    9a06:	nop
    9a08:	.word	0x061a0000
    9a0c:	.word	0x2000641c
    9a10:	.word	0x00010008
    9a14:	.word	0x117f0002
    9a18:	.word	0x371a0000
    9a1c:	.word	0x20005c94
    9a20:	.word	0x333a0011
    9a24:	.word	0x000f4240
    9a28:	.word	0x200061d4
    9a2c:	.word	0x00010040
    9a30:	.word	0x0d3a0011
    9a34:	.word	0x80fffff1
    9a38:	.word	0x401f8000
    9a3c:	.word	0x20007b70
    9a40:	.word	0x0d1a0000
    9a44:	.word	0x20007b75
    9a48:	.word	0x200061cc
    9a4c:	.word	0x402c0000

00009a50 <SdioCard::readData(unsigned char*)>:
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    9a50:	ldr	r3, [pc, #220]	; (9b30 <SdioCard::readData(unsigned char*)+0xe0>)
    9a52:	ldr	r2, [r3, #36]	; 0x24
    9a54:	lsls	r2, r2, #22
bool SdioCard::readData(uint8_t* dst) {
    9a56:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9a5a:	mov	r7, r1
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    9a5c:	bmi.n	9a7a <SdioCard::readData(unsigned char*)+0x2a>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    9a5e:	ldr	r2, [r3, #40]	; 0x28
    9a60:	bic.w	r2, r2, #65536	; 0x10000
    9a64:	str	r2, [r3, #40]	; 0x28
    noInterrupts();
    9a66:	cpsid	i
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    9a68:	ldr	r2, [r3, #40]	; 0x28
    9a6a:	orr.w	r2, r2, #131072	; 0x20000
    9a6e:	str	r2, [r3, #40]	; 0x28
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    9a70:	ldr	r2, [r3, #40]	; 0x28
    9a72:	orr.w	r2, r2, #65536	; 0x10000
    9a76:	str	r2, [r3, #40]	; 0x28
    interrupts();
    9a78:	cpsie	i
  uint32_t m = micros();
    9a7a:	bl	b918 <micros>
static bool isBusyFifoRead() { return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN); }
    9a7e:	ldr	r6, [pc, #176]	; (9b30 <SdioCard::readData(unsigned char*)+0xe0>)
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    9a80:	ldr.w	r8, [pc, #196]	; 9b48 <SdioCard::readData(unsigned char*)+0xf8>
  uint32_t m = micros();
    9a84:	mov	r5, r0
  while (fcn()) {
    9a86:	b.n	9a92 <SdioCard::readData(unsigned char*)+0x42>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    9a88:	bl	b918 <micros>
    9a8c:	subs	r3, r0, r5
    9a8e:	cmp	r3, r8
    9a90:	bhi.n	9b02 <SdioCard::readData(unsigned char*)+0xb2>
static bool isBusyFifoRead() { return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN); }
    9a92:	ldr	r4, [r6, #36]	; 0x24
  while (fcn()) {
    9a94:	ands.w	r4, r4, #2048	; 0x800
    9a98:	beq.n	9a88 <SdioCard::readData(unsigned char*)+0x38>
    9a9a:	add.w	ip, r7, #60	; 0x3c
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    9a9e:	ldr	r0, [pc, #144]	; (9b30 <SdioCard::readData(unsigned char*)+0xe0>)
    9aa0:	add.w	r7, r7, #572	; 0x23c
    9aa4:	ldr	r3, [r0, #36]	; 0x24
    9aa6:	lsls	r3, r3, #20
    9aa8:	bpl.n	9aa4 <SdioCard::readData(unsigned char*)+0x54>
    9aaa:	sub.w	r3, ip, #64	; 0x40
      p32[i] = SDHC_DATPORT;
    9aae:	ldr	r2, [r0, #32]
    9ab0:	str.w	r2, [r3, #4]!
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    9ab4:	cmp	ip, r3
    9ab6:	bne.n	9aae <SdioCard::readData(unsigned char*)+0x5e>
  for (uint32_t iw = 0; iw < 512 / (4 * FIFO_WML); iw++) {
    9ab8:	add.w	ip, ip, #64	; 0x40
    9abc:	cmp	r7, ip
    9abe:	bne.n	9aa4 <SdioCard::readData(unsigned char*)+0x54>
  uint32_t m = micros();
    9ac0:	bl	b918 <micros>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    9ac4:	ldr	r7, [pc, #104]	; (9b30 <SdioCard::readData(unsigned char*)+0xe0>)
    9ac6:	ldr	r5, [pc, #108]	; (9b34 <SdioCard::readData(unsigned char*)+0xe4>)
  uint32_t m = micros();
    9ac8:	mov	r6, r0
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    9aca:	ldr.w	r8, [pc, #124]	; 9b48 <SdioCard::readData(unsigned char*)+0xf8>
  while (fcn()) {
    9ace:	b.n	9ada <SdioCard::readData(unsigned char*)+0x8a>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    9ad0:	bl	b918 <micros>
    9ad4:	subs	r3, r0, r6
    9ad6:	cmp	r3, r8
    9ad8:	bhi.n	9b16 <SdioCard::readData(unsigned char*)+0xc6>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    9ada:	ldr	r4, [r7, #48]	; 0x30
  while (fcn()) {
    9adc:	ands	r4, r5
    9ade:	beq.n	9ad0 <SdioCard::readData(unsigned char*)+0x80>
  m_irqstat = SDHC_IRQSTAT;
    9ae0:	ldr	r3, [r7, #48]	; 0x30
    9ae2:	ldr	r2, [pc, #84]	; (9b38 <SdioCard::readData(unsigned char*)+0xe8>)
    9ae4:	str	r3, [r2, #0]
  SDHC_IRQSTAT = m_irqstat;
    9ae6:	ldr	r3, [r2, #0]
    9ae8:	str	r3, [r7, #48]	; 0x30
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    9aea:	ldr	r3, [r2, #0]
    9aec:	ands.w	r3, r3, #2
    9af0:	beq.n	9b2a <SdioCard::readData(unsigned char*)+0xda>
    9af2:	ldr	r2, [r2, #0]
    9af4:	ldr	r3, [pc, #68]	; (9b3c <SdioCard::readData(unsigned char*)+0xec>)
    9af6:	tst	r2, r3
    9af8:	ite	eq
    9afa:	moveq	r0, #1
    9afc:	movne	r0, #0
}
    9afe:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_errorCode = code;
    9b02:	ldr	r1, [pc, #60]	; (9b40 <SdioCard::readData(unsigned char*)+0xf0>)
    9b04:	movs	r5, #27
  m_errorLine = line;
    9b06:	ldr	r3, [pc, #60]	; (9b44 <SdioCard::readData(unsigned char*)+0xf4>)
    9b08:	movw	r2, #889	; 0x379
    return sdError(SD_CARD_ERROR_READ_FIFO);
    9b0c:	mov	r0, r4
  m_errorCode = code;
    9b0e:	strb	r5, [r1, #0]
  m_errorLine = line;
    9b10:	str	r2, [r3, #0]
}
    9b12:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_errorCode = code;
    9b16:	ldr	r1, [pc, #40]	; (9b40 <SdioCard::readData(unsigned char*)+0xf0>)
    9b18:	movs	r5, #30
  m_errorLine = line;
    9b1a:	ldr	r3, [pc, #40]	; (9b44 <SdioCard::readData(unsigned char*)+0xf4>)
    9b1c:	mov.w	r2, #900	; 0x384
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
    9b20:	mov	r0, r4
  m_errorCode = code;
    9b22:	strb	r5, [r1, #0]
  m_errorLine = line;
    9b24:	str	r2, [r3, #0]
}
    9b26:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    9b2a:	mov	r0, r3
}
    9b2c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9b30:	.word	0x402c0000
    9b34:	.word	0x117f0002
    9b38:	.word	0x2000641c
    9b3c:	.word	0x117f0000
    9b40:	.word	0x20001a4a
    9b44:	.word	0x20005c94
    9b48:	.word	0x000f4240

00009b4c <SdioCard::readStart(unsigned long)>:
bool SdioCard::readStart(uint32_t sector) {
    9b4c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  m_busyFcn = fcn;
    9b50:	ldr	r3, [pc, #164]	; (9bf8 <SdioCard::readStart(unsigned long)+0xac>)
bool SdioCard::readStart(uint32_t sector) {
    9b52:	mov	r9, r1
  m_busyFcn = fcn;
    9b54:	ldr.w	sl, [pc, #192]	; 9c18 <SdioCard::readStart(unsigned long)+0xcc>
    9b58:	ldr	r6, [pc, #160]	; (9bfc <SdioCard::readStart(unsigned long)+0xb0>)
    9b5a:	str.w	r3, [sl]
  uint32_t m = micros();
    9b5e:	bl	b918 <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    9b62:	ldr	r5, [pc, #156]	; (9c00 <SdioCard::readStart(unsigned long)+0xb4>)
  uint32_t m = micros();
    9b64:	mov	r4, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    9b66:	ldr.w	r8, [pc, #180]	; 9c1c <SdioCard::readStart(unsigned long)+0xd0>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    9b6a:	ldr	r7, [pc, #152]	; (9c04 <SdioCard::readStart(unsigned long)+0xb8>)
  while (fcn()) {
    9b6c:	b.n	9b7c <SdioCard::readStart(unsigned long)+0x30>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    9b6e:	bl	b918 <micros>
    9b72:	subs	r0, r0, r4
    9b74:	cmp	r0, r7
    9b76:	bhi.n	9bcc <SdioCard::readStart(unsigned long)+0x80>
    yield();
    9b78:	bl	c180 <yield>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    9b7c:	ldr	r1, [r6, #0]
    9b7e:	mov	r0, r5
    9b80:	bl	8e84 <cardCommand(unsigned long, unsigned long)>
    9b84:	cmp	r0, #0
    9b86:	beq.n	9b6e <SdioCard::readStart(unsigned long)+0x22>
    9b88:	ldr.w	r3, [r8, #16]
  while (fcn()) {
    9b8c:	lsls	r3, r3, #23
    9b8e:	bpl.n	9b6e <SdioCard::readStart(unsigned long)+0x22>
  m_busyFcn = 0;
    9b90:	movs	r3, #0
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    9b92:	mov.w	r2, #512	; 0x200
  m_busyFcn = 0;
    9b96:	str.w	r3, [sl]
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    9b9a:	ldr.w	r3, [r8, #40]	; 0x28
    9b9e:	orr.w	r3, r3, #65536	; 0x10000
    9ba2:	str.w	r3, [r8, #40]	; 0x28
  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512 * sector)) {
    9ba6:	ldr	r3, [pc, #96]	; (9c08 <SdioCard::readStart(unsigned long)+0xbc>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    9ba8:	str.w	r2, [r8, #4]
  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512 * sector)) {
    9bac:	ldrb	r3, [r3, #0]
    9bae:	cbz	r3, 9be4 <SdioCard::readStart(unsigned long)+0x98>
    9bb0:	mov	r1, r9
    9bb2:	ldr	r0, [pc, #88]	; (9c0c <SdioCard::readStart(unsigned long)+0xc0>)
    9bb4:	bl	8e84 <cardCommand(unsigned long, unsigned long)>
    9bb8:	cbnz	r0, 9bc8 <SdioCard::readStart(unsigned long)+0x7c>
  m_errorCode = code;
    9bba:	ldr	r1, [pc, #84]	; (9c10 <SdioCard::readStart(unsigned long)+0xc4>)
    9bbc:	movs	r4, #12
  m_errorLine = line;
    9bbe:	ldr	r3, [pc, #84]	; (9c14 <SdioCard::readStart(unsigned long)+0xc8>)
    9bc0:	movw	r2, #1002	; 0x3ea
  m_errorCode = code;
    9bc4:	strb	r4, [r1, #0]
  m_errorLine = line;
    9bc6:	str	r2, [r3, #0]
}
    9bc8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_errorCode = code;
    9bcc:	ldr	r2, [pc, #64]	; (9c10 <SdioCard::readStart(unsigned long)+0xc4>)
    9bce:	movs	r1, #10
      m_busyFcn = 0;
    9bd0:	movs	r0, #0
  m_errorLine = line;
    9bd2:	ldr	r3, [pc, #64]	; (9c14 <SdioCard::readStart(unsigned long)+0xc8>)
  m_errorCode = code;
    9bd4:	strb	r1, [r2, #0]
  m_errorLine = line;
    9bd6:	movw	r2, #990	; 0x3de
      m_busyFcn = 0;
    9bda:	str.w	r0, [sl]
  m_errorLine = line;
    9bde:	str	r2, [r3, #0]
}
    9be0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512 * sector)) {
    9be4:	mov.w	r9, r9, lsl #9
    9be8:	ldr	r0, [pc, #32]	; (9c0c <SdioCard::readStart(unsigned long)+0xc0>)
    9bea:	mov	r1, r9
    9bec:	bl	8e84 <cardCommand(unsigned long, unsigned long)>
    9bf0:	cmp	r0, #0
    9bf2:	bne.n	9bc8 <SdioCard::readStart(unsigned long)+0x7c>
    9bf4:	b.n	9bba <SdioCard::readStart(unsigned long)+0x6e>
    9bf6:	nop
    9bf8:	.word	0x00009019
    9bfc:	.word	0x200061c8
    9c00:	.word	0x0d1a0000
    9c04:	.word	0x000f4240
    9c08:	.word	0x20007b72
    9c0c:	.word	0x123a0030
    9c10:	.word	0x20001a4a
    9c14:	.word	0x20005c94
    9c18:	.word	0x20006418
    9c1c:	.word	0x402c0000

00009c20 <SdioCard::stopTransmission(bool)>:
bool SdioCard::stopTransmission(bool blocking) {
    9c20:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_curState = IDLE_STATE;
    9c24:	movs	r2, #0
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    9c26:	ldr	r4, [pc, #116]	; (9c9c <SdioCard::stopTransmission(bool)+0x7c>)
bool SdioCard::stopTransmission(bool blocking) {
    9c28:	mov	r5, r1
  m_curState = IDLE_STATE;
    9c2a:	strb	r2, [r0, #9]
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    9c2c:	mov	r1, r2
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    9c2e:	ldr	r3, [r4, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    9c30:	ldr	r0, [pc, #108]	; (9ca0 <SdioCard::stopTransmission(bool)+0x80>)
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    9c32:	bic.w	r3, r3, #65536	; 0x10000
    9c36:	str	r3, [r4, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    9c38:	bl	8e84 <cardCommand(unsigned long, unsigned long)>
    9c3c:	cbnz	r0, 9c50 <SdioCard::stopTransmission(bool)+0x30>
  m_errorCode = code;
    9c3e:	ldr	r1, [pc, #100]	; (9ca4 <SdioCard::stopTransmission(bool)+0x84>)
    9c40:	movs	r4, #9
  m_errorLine = line;
    9c42:	ldr	r3, [pc, #100]	; (9ca8 <SdioCard::stopTransmission(bool)+0x88>)
    9c44:	movw	r2, #1018	; 0x3fa
  m_errorCode = code;
    9c48:	strb	r4, [r1, #0]
  m_errorLine = line;
    9c4a:	str	r2, [r3, #0]
}
    9c4c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (blocking) {
    9c50:	cmp	r5, #0
    9c52:	beq.n	9c4c <SdioCard::stopTransmission(bool)+0x2c>
  m_busyFcn = fcn;
    9c54:	ldr	r3, [pc, #84]	; (9cac <SdioCard::stopTransmission(bool)+0x8c>)
    9c56:	ldr	r6, [pc, #88]	; (9cb0 <SdioCard::stopTransmission(bool)+0x90>)
    9c58:	str	r3, [r6, #0]
  uint32_t m = micros();
    9c5a:	bl	b918 <micros>
static bool isBusyDat() { return SDHC_PRSSTAT & (1 << 24) ? false : true; }
    9c5e:	ldr	r3, [r4, #36]	; 0x24
  uint32_t m = micros();
    9c60:	mov	r7, r0
  while (fcn()) {
    9c62:	lsls	r2, r3, #7
    9c64:	bmi.n	9c94 <SdioCard::stopTransmission(bool)+0x74>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    9c66:	ldr.w	r8, [pc, #76]	; 9cb4 <SdioCard::stopTransmission(bool)+0x94>
    9c6a:	b.n	9c76 <SdioCard::stopTransmission(bool)+0x56>
    yield();
    9c6c:	bl	c180 <yield>
static bool isBusyDat() { return SDHC_PRSSTAT & (1 << 24) ? false : true; }
    9c70:	ldr	r3, [r4, #36]	; 0x24
  while (fcn()) {
    9c72:	lsls	r3, r3, #7
    9c74:	bmi.n	9c94 <SdioCard::stopTransmission(bool)+0x74>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    9c76:	bl	b918 <micros>
    9c7a:	subs	r0, r0, r7
    9c7c:	cmp	r0, r8
    9c7e:	bls.n	9c6c <SdioCard::stopTransmission(bool)+0x4c>
  m_errorCode = code;
    9c80:	ldr	r2, [pc, #32]	; (9ca4 <SdioCard::stopTransmission(bool)+0x84>)
    9c82:	movs	r1, #10
      m_busyFcn = 0;
    9c84:	movs	r0, #0
  m_errorLine = line;
    9c86:	ldr	r3, [pc, #32]	; (9ca8 <SdioCard::stopTransmission(bool)+0x88>)
  m_errorCode = code;
    9c88:	strb	r1, [r2, #0]
  m_errorLine = line;
    9c8a:	movw	r2, #1022	; 0x3fe
      m_busyFcn = 0;
    9c8e:	str	r0, [r6, #0]
  m_errorLine = line;
    9c90:	str	r2, [r3, #0]
      return sdError(SD_CARD_ERROR_CMD13);
    9c92:	b.n	9c4c <SdioCard::stopTransmission(bool)+0x2c>
  m_busyFcn = 0;
    9c94:	movs	r3, #0
  return true;
    9c96:	mov	r0, r5
  m_busyFcn = 0;
    9c98:	str	r3, [r6, #0]
  return false;  // Caller will set errorCode.
    9c9a:	b.n	9c4c <SdioCard::stopTransmission(bool)+0x2c>
    9c9c:	.word	0x402c0000
    9ca0:	.word	0x0cdb0000
    9ca4:	.word	0x20001a4a
    9ca8:	.word	0x20005c94
    9cac:	.word	0x00008aad
    9cb0:	.word	0x20006418
    9cb4:	.word	0x000f4240

00009cb8 <SdioCard::syncDevice()>:
  if (!m_transferActive) {
    9cb8:	ldr	r3, [pc, #40]	; (9ce4 <SdioCard::syncDevice()+0x2c>)
    9cba:	ldrb	r3, [r3, #0]
bool SdioCard::syncDevice() {
    9cbc:	push	{r4, lr}
    9cbe:	mov	r4, r0
  if (!m_transferActive) {
    9cc0:	cbnz	r3, 9cca <SdioCard::syncDevice()+0x12>
  if (m_curState != IDLE_STATE) {
    9cc2:	ldrb	r3, [r4, #9]
    9cc4:	cbnz	r3, 9cd8 <SdioCard::syncDevice()+0x20>
  return true;
    9cc6:	movs	r0, #1
}
    9cc8:	pop	{r4, pc}
    9cca:	bl	8d48 <waitTransferComplete() [clone .part.0]>
  if (!waitTransferComplete()) {
    9cce:	cmp	r0, #0
    9cd0:	beq.n	9cc8 <SdioCard::syncDevice()+0x10>
  if (m_curState != IDLE_STATE) {
    9cd2:	ldrb	r3, [r4, #9]
    9cd4:	cmp	r3, #0
    9cd6:	beq.n	9cc6 <SdioCard::syncDevice()+0xe>
    return stopTransmission(true);
    9cd8:	mov	r0, r4
    9cda:	movs	r1, #1
}
    9cdc:	ldmia.w	sp!, {r4, lr}
    return stopTransmission(true);
    9ce0:	b.w	9c20 <SdioCard::stopTransmission(bool)>
    9ce4:	.word	0x20007b73

00009ce8 <SdioCard::erase(unsigned long, unsigned long)>:
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    9ce8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (m_curState != IDLE_STATE && !syncDevice()) {
    9cec:	ldrb	r3, [r0, #9]
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    9cee:	mov	r5, r1
    9cf0:	mov	r6, r2
  if (m_curState != IDLE_STATE && !syncDevice()) {
    9cf2:	cbz	r3, 9d24 <SdioCard::erase(unsigned long, unsigned long)+0x3c>
    9cf4:	ldr	r3, [r0, #0]
    9cf6:	mov	r4, r0
    9cf8:	ldr	r2, [pc, #252]	; (9df8 <SdioCard::erase(unsigned long, unsigned long)+0x110>)
    9cfa:	ldr	r3, [r3, #28]
    9cfc:	cmp	r3, r2
    9cfe:	bne.n	9d96 <SdioCard::erase(unsigned long, unsigned long)+0xae>
  if (!m_transferActive) {
    9d00:	ldr	r3, [pc, #248]	; (9dfc <SdioCard::erase(unsigned long, unsigned long)+0x114>)
    9d02:	ldrb	r3, [r3, #0]
    9d04:	cbnz	r3, 9d16 <SdioCard::erase(unsigned long, unsigned long)+0x2e>
    return stopTransmission(true);
    9d06:	movs	r1, #1
    9d08:	mov	r0, r4
    9d0a:	bl	9c20 <SdioCard::stopTransmission(bool)>
  if (m_curState != IDLE_STATE && !syncDevice()) {
    9d0e:	cbnz	r0, 9d24 <SdioCard::erase(unsigned long, unsigned long)+0x3c>
    return false;
    9d10:	movs	r0, #0
}
    9d12:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9d16:	bl	8d48 <waitTransferComplete() [clone .part.0]>
  if (!waitTransferComplete()) {
    9d1a:	cmp	r0, #0
    9d1c:	beq.n	9d10 <SdioCard::erase(unsigned long, unsigned long)+0x28>
  if (m_curState != IDLE_STATE) {
    9d1e:	ldrb	r3, [r4, #9]
    9d20:	cmp	r3, #0
    9d22:	bne.n	9d06 <SdioCard::erase(unsigned long, unsigned long)+0x1e>
  bool eraseSingleBlock() const { return csd[10] & 0X40; }
    9d24:	ldr	r4, [pc, #216]	; (9e00 <SdioCard::erase(unsigned long, unsigned long)+0x118>)
    9d26:	ldrb	r3, [r4, #10]
  if (!m_csd.eraseSingleBlock()) {
    9d28:	ands.w	r0, r3, #64	; 0x40
    9d2c:	bne.n	9d54 <SdioCard::erase(unsigned long, unsigned long)+0x6c>
  int eraseSize() const { return ((csd[10] & 0X3F) << 1 | csd[11] >> 7) + 1; }
    9d2e:	lsls	r3, r3, #1
    9d30:	ldrb	r2, [r4, #11]
    9d32:	and.w	r3, r3, #126	; 0x7e
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    9d36:	orr.w	r3, r3, r2, lsr #7
    9d3a:	adds	r2, r6, #1
    9d3c:	orrs	r2, r5
    9d3e:	tst	r3, r2
    9d40:	beq.n	9d54 <SdioCard::erase(unsigned long, unsigned long)+0x6c>
  m_errorCode = code;
    9d42:	ldr	r1, [pc, #192]	; (9e04 <SdioCard::erase(unsigned long, unsigned long)+0x11c>)
    9d44:	movs	r4, #40	; 0x28
  m_errorLine = line;
    9d46:	ldr	r3, [pc, #192]	; (9e08 <SdioCard::erase(unsigned long, unsigned long)+0x120>)
    9d48:	movw	r2, #813	; 0x32d
  m_errorCode = code;
    9d4c:	strb	r4, [r1, #0]
  m_errorLine = line;
    9d4e:	str	r2, [r3, #0]
}
    9d50:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!m_highCapacity) {
    9d54:	ldr	r3, [pc, #180]	; (9e0c <SdioCard::erase(unsigned long, unsigned long)+0x124>)
    9d56:	ldrb	r3, [r3, #0]
    9d58:	cbnz	r3, 9d5e <SdioCard::erase(unsigned long, unsigned long)+0x76>
    firstSector <<= 9;
    9d5a:	lsls	r5, r5, #9
    lastSector <<= 9;
    9d5c:	lsls	r6, r6, #9
  if (!cardCommand(CMD32_XFERTYP, firstSector)) {
    9d5e:	mov	r1, r5
    9d60:	ldr	r0, [pc, #172]	; (9e10 <SdioCard::erase(unsigned long, unsigned long)+0x128>)
    9d62:	bl	8e84 <cardCommand(unsigned long, unsigned long)>
    9d66:	cbnz	r0, 9d7a <SdioCard::erase(unsigned long, unsigned long)+0x92>
  m_errorCode = code;
    9d68:	ldr	r1, [pc, #152]	; (9e04 <SdioCard::erase(unsigned long, unsigned long)+0x11c>)
    9d6a:	movs	r4, #15
  m_errorLine = line;
    9d6c:	ldr	r3, [pc, #152]	; (9e08 <SdioCard::erase(unsigned long, unsigned long)+0x120>)
    9d6e:	movw	r2, #821	; 0x335
  m_errorCode = code;
    9d72:	strb	r4, [r1, #0]
  m_errorLine = line;
    9d74:	str	r2, [r3, #0]
}
    9d76:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!cardCommand(CMD33_XFERTYP, lastSector)) {
    9d7a:	mov	r1, r6
    9d7c:	ldr	r0, [pc, #148]	; (9e14 <SdioCard::erase(unsigned long, unsigned long)+0x12c>)
    9d7e:	bl	8e84 <cardCommand(unsigned long, unsigned long)>
    9d82:	cbnz	r0, 9d9e <SdioCard::erase(unsigned long, unsigned long)+0xb6>
  m_errorCode = code;
    9d84:	ldr	r1, [pc, #124]	; (9e04 <SdioCard::erase(unsigned long, unsigned long)+0x11c>)
    9d86:	movs	r4, #16
  m_errorLine = line;
    9d88:	ldr	r3, [pc, #124]	; (9e08 <SdioCard::erase(unsigned long, unsigned long)+0x120>)
    9d8a:	mov.w	r2, #824	; 0x338
  m_errorCode = code;
    9d8e:	strb	r4, [r1, #0]
  m_errorLine = line;
    9d90:	str	r2, [r3, #0]
}
    9d92:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (m_curState != IDLE_STATE && !syncDevice()) {
    9d96:	blx	r3
    9d98:	cmp	r0, #0
    9d9a:	beq.n	9d10 <SdioCard::erase(unsigned long, unsigned long)+0x28>
    9d9c:	b.n	9d24 <SdioCard::erase(unsigned long, unsigned long)+0x3c>
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    9d9e:	movs	r1, #0
    9da0:	ldr	r0, [pc, #116]	; (9e18 <SdioCard::erase(unsigned long, unsigned long)+0x130>)
    9da2:	bl	8e84 <cardCommand(unsigned long, unsigned long)>
    9da6:	cbnz	r0, 9db8 <SdioCard::erase(unsigned long, unsigned long)+0xd0>
  m_errorCode = code;
    9da8:	ldr	r1, [pc, #88]	; (9e04 <SdioCard::erase(unsigned long, unsigned long)+0x11c>)
    9daa:	movs	r4, #17
  m_errorLine = line;
    9dac:	ldr	r3, [pc, #88]	; (9e08 <SdioCard::erase(unsigned long, unsigned long)+0x120>)
    9dae:	movw	r2, #827	; 0x33b
  m_errorCode = code;
    9db2:	strb	r4, [r1, #0]
  m_errorLine = line;
    9db4:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD38);
    9db6:	b.n	9d50 <SdioCard::erase(unsigned long, unsigned long)+0x68>
  uint32_t m = micros();
    9db8:	bl	b918 <micros>
    9dbc:	ldr	r6, [pc, #92]	; (9e1c <SdioCard::erase(unsigned long, unsigned long)+0x134>)
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    9dbe:	ldr	r5, [pc, #96]	; (9e20 <SdioCard::erase(unsigned long, unsigned long)+0x138>)
  uint32_t m = micros();
    9dc0:	mov	r4, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    9dc2:	ldr.w	r8, [pc, #100]	; 9e28 <SdioCard::erase(unsigned long, unsigned long)+0x140>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    9dc6:	ldr	r7, [pc, #92]	; (9e24 <SdioCard::erase(unsigned long, unsigned long)+0x13c>)
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    9dc8:	ldr	r1, [r6, #0]
    9dca:	mov	r0, r5
    9dcc:	bl	8e84 <cardCommand(unsigned long, unsigned long)>
    9dd0:	cbz	r0, 9dda <SdioCard::erase(unsigned long, unsigned long)+0xf2>
    9dd2:	ldr.w	r3, [r8, #16]
  while (fcn()) {
    9dd6:	lsls	r3, r3, #23
    9dd8:	bmi.n	9d50 <SdioCard::erase(unsigned long, unsigned long)+0x68>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    9dda:	bl	b918 <micros>
    9dde:	subs	r0, r0, r4
    9de0:	cmp	r0, r7
    9de2:	bls.n	9dc8 <SdioCard::erase(unsigned long, unsigned long)+0xe0>
  m_errorCode = code;
    9de4:	ldr	r1, [pc, #28]	; (9e04 <SdioCard::erase(unsigned long, unsigned long)+0x11c>)
    9de6:	movs	r4, #41	; 0x29
  m_errorLine = line;
    9de8:	ldr	r3, [pc, #28]	; (9e08 <SdioCard::erase(unsigned long, unsigned long)+0x120>)
    9dea:	movw	r2, #830	; 0x33e
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
    9dee:	movs	r0, #0
  m_errorCode = code;
    9df0:	strb	r4, [r1, #0]
  m_errorLine = line;
    9df2:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
    9df4:	b.n	9d50 <SdioCard::erase(unsigned long, unsigned long)+0x68>
    9df6:	nop
    9df8:	.word	0x00009cb9
    9dfc:	.word	0x20007b73
    9e00:	.word	0x200061b4
    9e04:	.word	0x20001a4a
    9e08:	.word	0x20005c94
    9e0c:	.word	0x20007b72
    9e10:	.word	0x201a0000
    9e14:	.word	0x211a0000
    9e18:	.word	0x261b0000
    9e1c:	.word	0x200061c8
    9e20:	.word	0x0d1a0000
    9e24:	.word	0x000f4240
    9e28:	.word	0x402c0000

00009e2c <SdioCard::readSector(unsigned long, unsigned char*)>:
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    9e2c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9e30:	mov	r4, r0
    9e32:	ldrb	r0, [r0, #8]
    9e34:	sub.w	sp, sp, #512	; 0x200
    9e38:	mov	r6, r2
  if (m_sdioConfig.useDma()) {
    9e3a:	ands.w	r5, r0, #1
    9e3e:	beq.n	9e68 <SdioCard::readSector(unsigned long, unsigned char*)+0x3c>
    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;
    9e40:	lsls	r3, r2, #30
    9e42:	beq.n	9ebe <SdioCard::readSector(unsigned long, unsigned char*)+0x92>
    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    9e44:	movs	r3, #1
    9e46:	ldr	r0, [pc, #224]	; (9f28 <SdioCard::readSector(unsigned long, unsigned char*)+0xfc>)
    9e48:	mov	r2, sp
    9e4a:	bl	9298 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    9e4e:	cmp	r0, #0
    9e50:	beq.n	9ec8 <SdioCard::readSector(unsigned long, unsigned char*)+0x9c>
      memcpy(dst, aligned, 512);
    9e52:	mov.w	r2, #512	; 0x200
    9e56:	mov	r1, sp
    9e58:	mov	r0, r6
    9e5a:	bl	a170 <memcpy>
}
    9e5e:	mov	r0, r5
    9e60:	add.w	sp, sp, #512	; 0x200
    9e64:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!m_transferActive) {
    9e68:	ldr.w	r8, [pc, #204]	; 9f38 <SdioCard::readSector(unsigned long, unsigned char*)+0x10c>
    9e6c:	mov	r7, r1
    9e6e:	ldrb.w	r3, [r8]
    9e72:	cmp	r3, #0
    9e74:	bne.n	9ee2 <SdioCard::readSector(unsigned long, unsigned char*)+0xb6>
    if (m_curState != READ_STATE || sector != m_curSector) {
    9e76:	ldrb	r3, [r4, #9]
    9e78:	cmp	r3, #1
    9e7a:	beq.n	9ef0 <SdioCard::readSector(unsigned long, unsigned char*)+0xc4>
      if (!syncDevice()) {
    9e7c:	ldr	r2, [r4, #0]
    9e7e:	ldr	r1, [pc, #172]	; (9f2c <SdioCard::readSector(unsigned long, unsigned char*)+0x100>)
    9e80:	ldr	r2, [r2, #28]
    9e82:	cmp	r2, r1
    9e84:	bne.n	9f1c <SdioCard::readSector(unsigned long, unsigned char*)+0xf0>
  if (!m_transferActive) {
    9e86:	ldrb.w	r2, [r8]
    9e8a:	cmp	r2, #0
    9e8c:	bne.n	9ef8 <SdioCard::readSector(unsigned long, unsigned char*)+0xcc>
  if (m_curState != IDLE_STATE) {
    9e8e:	cmp	r3, #0
    9e90:	bne.n	9f06 <SdioCard::readSector(unsigned long, unsigned char*)+0xda>
      if (!readStart(sector)) {
    9e92:	mov	r1, r7
    9e94:	mov	r0, r4
    9e96:	bl	9b4c <SdioCard::readStart(unsigned long)>
    9e9a:	cbz	r0, 9ed8 <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
      m_curState = READ_STATE;
    9e9c:	movs	r3, #1
      m_curSector = sector;
    9e9e:	str	r7, [r4, #4]
      m_curState = READ_STATE;
    9ea0:	strb	r3, [r4, #9]
    if (!readData(dst)) {
    9ea2:	mov	r1, r6
    9ea4:	mov	r0, r4
    9ea6:	bl	9a50 <SdioCard::readData(unsigned char*)>
    9eaa:	cbz	r0, 9ed8 <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
    m_curSector++;
    9eac:	ldr	r3, [r4, #4]
  return true;
    9eae:	mov	r5, r0
    m_curSector++;
    9eb0:	adds	r3, #1
}
    9eb2:	mov	r0, r5
    m_curSector++;
    9eb4:	str	r3, [r4, #4]
}
    9eb6:	add.w	sp, sp, #512	; 0x200
    9eba:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    9ebe:	movs	r3, #1
    9ec0:	ldr	r0, [pc, #100]	; (9f28 <SdioCard::readSector(unsigned long, unsigned char*)+0xfc>)
    9ec2:	bl	9298 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    9ec6:	cbnz	r0, 9ed8 <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
  m_errorCode = code;
    9ec8:	ldr	r1, [pc, #100]	; (9f30 <SdioCard::readSector(unsigned long, unsigned char*)+0x104>)
    9eca:	movs	r0, #11
  m_errorLine = line;
    9ecc:	ldr	r3, [pc, #100]	; (9f34 <SdioCard::readSector(unsigned long, unsigned char*)+0x108>)
    9ece:	movw	r2, #929	; 0x3a1
      return sdError(SD_CARD_ERROR_CMD17);
    9ed2:	movs	r5, #0
  m_errorCode = code;
    9ed4:	strb	r0, [r1, #0]
  m_errorLine = line;
    9ed6:	str	r2, [r3, #0]
}
    9ed8:	mov	r0, r5
    9eda:	add.w	sp, sp, #512	; 0x200
    9ede:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9ee2:	bl	8d48 <waitTransferComplete() [clone .part.0]>
    if (!waitTransferComplete()) {
    9ee6:	cmp	r0, #0
    9ee8:	beq.n	9ed8 <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
    if (m_curState != READ_STATE || sector != m_curSector) {
    9eea:	ldrb	r3, [r4, #9]
    9eec:	cmp	r3, #1
    9eee:	bne.n	9e7c <SdioCard::readSector(unsigned long, unsigned char*)+0x50>
    9ef0:	ldr	r2, [r4, #4]
    9ef2:	cmp	r2, r7
    9ef4:	bne.n	9e7c <SdioCard::readSector(unsigned long, unsigned char*)+0x50>
    9ef6:	b.n	9ea2 <SdioCard::readSector(unsigned long, unsigned char*)+0x76>
    9ef8:	bl	8d48 <waitTransferComplete() [clone .part.0]>
  if (!waitTransferComplete()) {
    9efc:	cmp	r0, #0
    9efe:	beq.n	9ed8 <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
  if (m_curState != IDLE_STATE) {
    9f00:	ldrb	r3, [r4, #9]
    9f02:	cmp	r3, #0
    9f04:	beq.n	9e92 <SdioCard::readSector(unsigned long, unsigned char*)+0x66>
    return stopTransmission(true);
    9f06:	movs	r1, #1
    9f08:	mov	r0, r4
    9f0a:	bl	9c20 <SdioCard::stopTransmission(bool)>
      if (!syncDevice()) {
    9f0e:	cmp	r0, #0
    9f10:	bne.n	9e92 <SdioCard::readSector(unsigned long, unsigned char*)+0x66>
}
    9f12:	mov	r0, r5
    9f14:	add.w	sp, sp, #512	; 0x200
    9f18:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (!syncDevice()) {
    9f1c:	mov	r0, r4
    9f1e:	blx	r2
    9f20:	cmp	r0, #0
    9f22:	beq.n	9f12 <SdioCard::readSector(unsigned long, unsigned char*)+0xe6>
    9f24:	b.n	9e92 <SdioCard::readSector(unsigned long, unsigned char*)+0x66>
    9f26:	nop
    9f28:	.word	0x113a0011
    9f2c:	.word	0x00009cb9
    9f30:	.word	0x20001a4a
    9f34:	.word	0x20005c94
    9f38:	.word	0x20007b73

00009f3c <SdioCard::writeSector(unsigned long, unsigned char const*)>:
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    9f3c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9f40:	ldrb	r4, [r0, #8]
    9f42:	sub.w	sp, sp, #512	; 0x200
    9f46:	mov	r7, r1
    9f48:	mov	r8, r2
  if (m_sdioConfig.useDma()) {
    9f4a:	ands.w	r4, r4, #1
    9f4e:	beq.n	9f8c <SdioCard::writeSector(unsigned long, unsigned char const*)+0x50>
    if (3 & (uint32_t)src) {
    9f50:	tst.w	r2, #3
    9f54:	beq.n	9f64 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x28>
      memcpy(aligned, src, 512);
    9f56:	mov	r0, sp
    9f58:	mov	r1, r2
    9f5a:	mov.w	r2, #512	; 0x200
      ptr = aligned;
    9f5e:	mov	r8, r0
      memcpy(aligned, src, 512);
    9f60:	bl	a170 <memcpy>
    if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
    9f64:	movs	r3, #1
    9f66:	mov	r2, r8
    9f68:	mov	r1, r7
    9f6a:	ldr	r0, [pc, #176]	; (a01c <SdioCard::writeSector(unsigned long, unsigned char const*)+0xe0>)
    9f6c:	bl	9298 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    9f70:	mov	r4, r0
    9f72:	cbnz	r0, 9f82 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
  m_errorCode = code;
    9f74:	ldr	r1, [pc, #168]	; (a020 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xe4>)
    9f76:	movs	r0, #13
  m_errorLine = line;
    9f78:	ldr	r3, [pc, #168]	; (a024 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xe8>)
    9f7a:	mov.w	r2, #1080	; 0x438
  m_errorCode = code;
    9f7e:	strb	r0, [r1, #0]
  m_errorLine = line;
    9f80:	str	r2, [r3, #0]
}
    9f82:	mov	r0, r4
    9f84:	add.w	sp, sp, #512	; 0x200
    9f88:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!m_transferActive) {
    9f8c:	ldr	r5, [pc, #152]	; (a028 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xec>)
    9f8e:	mov	r6, r0
    9f90:	ldrb	r3, [r5, #0]
    9f92:	cbnz	r3, 9fe0 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xa4>
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    9f94:	ldrb	r3, [r6, #9]
    9f96:	cmp	r3, #2
    9f98:	beq.n	9fee <SdioCard::writeSector(unsigned long, unsigned char const*)+0xb2>
      if (!syncDevice()) {
    9f9a:	ldr	r2, [r6, #0]
    9f9c:	ldr	r1, [pc, #140]	; (a02c <SdioCard::writeSector(unsigned long, unsigned char const*)+0xf0>)
    9f9e:	ldr	r2, [r2, #28]
    9fa0:	cmp	r2, r1
    9fa2:	bne.n	a012 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xd6>
  if (!m_transferActive) {
    9fa4:	ldrb	r2, [r5, #0]
    9fa6:	cbnz	r2, 9ff6 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xba>
  if (m_curState != IDLE_STATE) {
    9fa8:	cmp	r3, #0
    9faa:	bne.n	a004 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xc8>
      if (!writeStart(sector)) {
    9fac:	ldr	r3, [r6, #0]
    9fae:	mov	r1, r7
    9fb0:	mov	r0, r6
    9fb2:	ldr	r3, [r3, #100]	; 0x64
    9fb4:	blx	r3
    9fb6:	cmp	r0, #0
    9fb8:	beq.n	9f82 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
      m_curState = WRITE_STATE;
    9fba:	movs	r3, #2
      m_curSector = sector;
    9fbc:	str	r7, [r6, #4]
      m_curState = WRITE_STATE;
    9fbe:	strb	r3, [r6, #9]
    if (!writeData(src)) {
    9fc0:	ldr	r3, [r6, #0]
    9fc2:	mov	r1, r8
    9fc4:	mov	r0, r6
    9fc6:	ldr	r3, [r3, #96]	; 0x60
    9fc8:	blx	r3
    9fca:	cmp	r0, #0
    9fcc:	beq.n	9f82 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
    m_curSector++;
    9fce:	ldr	r3, [r6, #4]
  return true;
    9fd0:	mov	r4, r0
    m_curSector++;
    9fd2:	adds	r3, #1
}
    9fd4:	mov	r0, r4
    m_curSector++;
    9fd6:	str	r3, [r6, #4]
}
    9fd8:	add.w	sp, sp, #512	; 0x200
    9fdc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9fe0:	bl	8d48 <waitTransferComplete() [clone .part.0]>
    if (!waitTransferComplete()) {
    9fe4:	cmp	r0, #0
    9fe6:	beq.n	9f82 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    9fe8:	ldrb	r3, [r6, #9]
    9fea:	cmp	r3, #2
    9fec:	bne.n	9f9a <SdioCard::writeSector(unsigned long, unsigned char const*)+0x5e>
    9fee:	ldr	r2, [r6, #4]
    9ff0:	cmp	r2, r7
    9ff2:	bne.n	9f9a <SdioCard::writeSector(unsigned long, unsigned char const*)+0x5e>
    9ff4:	b.n	9fc0 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x84>
    9ff6:	bl	8d48 <waitTransferComplete() [clone .part.0]>
  if (!waitTransferComplete()) {
    9ffa:	cmp	r0, #0
    9ffc:	beq.n	9f82 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
  if (m_curState != IDLE_STATE) {
    9ffe:	ldrb	r3, [r6, #9]
    a000:	cmp	r3, #0
    a002:	beq.n	9fac <SdioCard::writeSector(unsigned long, unsigned char const*)+0x70>
    return stopTransmission(true);
    a004:	movs	r1, #1
    a006:	mov	r0, r6
    a008:	bl	9c20 <SdioCard::stopTransmission(bool)>
      if (!syncDevice()) {
    a00c:	cmp	r0, #0
    a00e:	beq.n	9f82 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
    a010:	b.n	9fac <SdioCard::writeSector(unsigned long, unsigned char const*)+0x70>
    a012:	mov	r0, r6
    a014:	blx	r2
    a016:	cmp	r0, #0
    a018:	beq.n	9f82 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
    a01a:	b.n	9fac <SdioCard::writeSector(unsigned long, unsigned char const*)+0x70>
    a01c:	.word	0x183a0001
    a020:	.word	0x20001a4a
    a024:	.word	0x20005c94
    a028:	.word	0x20007b73
    a02c:	.word	0x00009cb9

0000a030 <SdSpiArduinoDriver::activate()>:
 */
#include "SdSpiDriver.h"
#if defined(SD_USE_CUSTOM_SPI) && defined(__arm__) && defined(CORE_TEENSY)
#define USE_BLOCK_TRANSFER 1
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::activate() { m_spi->beginTransaction(m_spiSettings); }
    a030:	push	{r3, lr}
    a032:	mov	r3, r0
    a034:	ldr.w	r0, [r3], #4
    a038:	ldmia.w	r3, {r1, r2}
    a03c:	bl	1d2c <SPIClass::beginTransaction(SPISettings)>
    a040:	pop	{r3, pc}
    a042:	nop

0000a044 <SdSpiArduinoDriver::begin(SdSpiConfig)>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::begin(SdSpiConfig spiConfig) {
    a044:	sub	sp, #16
    a046:	add.w	ip, sp, #16
    a04a:	stmdb	ip, {r1, r2, r3}
    a04e:	mov	r2, r0
  if (spiConfig.spiPort) {
    a050:	cbz	r3, a05c <SdSpiArduinoDriver::begin(SdSpiConfig)+0x18>
    m_spi->setSCK(SDCARD_SCK_PIN);
#endif  // defined(SDCARD_SPI) && defined(SDCARD_SS_PIN)
  } else {
    m_spi = &SPI;
  }
  m_spi->begin();
    a052:	mov	r0, r3
    a054:	str	r3, [r2, #0]
}
    a056:	add	sp, #16
  m_spi->begin();
    a058:	b.w	275c <SPIClass::begin()>
    m_spi = &SPI;
    a05c:	ldr	r3, [pc, #8]	; (a068 <SdSpiArduinoDriver::begin(SdSpiConfig)+0x24>)
  m_spi->begin();
    a05e:	mov	r0, r3
    a060:	str	r3, [r2, #0]
}
    a062:	add	sp, #16
  m_spi->begin();
    a064:	b.w	275c <SPIClass::begin()>
    a068:	.word	0x200057d8

0000a06c <SdSpiArduinoDriver::deactivate()>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::deactivate() { m_spi->endTransaction(); }
    a06c:	ldr	r2, [r0, #0]
		if (interruptMasksUsed) {
    a06e:	ldrb	r3, [r2, #19]
    a070:	cbz	r3, a0b8 <SdSpiArduinoDriver::deactivate()+0x4c>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    a072:	lsls	r0, r3, #31
    a074:	bpl.n	a080 <SdSpiArduinoDriver::deactivate()+0x14>
    a076:	ldr	r0, [r2, #40]	; 0x28
    a078:	mov.w	r1, #3758153728	; 0xe000e000
    a07c:	str.w	r0, [r1, #256]	; 0x100
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    a080:	lsls	r1, r3, #30
    a082:	bpl.n	a08e <SdSpiArduinoDriver::deactivate()+0x22>
    a084:	ldr	r0, [r2, #44]	; 0x2c
    a086:	mov.w	r1, #3758153728	; 0xe000e000
    a08a:	str.w	r0, [r1, #260]	; 0x104
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    a08e:	lsls	r0, r3, #29
    a090:	bpl.n	a09c <SdSpiArduinoDriver::deactivate()+0x30>
    a092:	ldr	r0, [r2, #48]	; 0x30
    a094:	mov.w	r1, #3758153728	; 0xe000e000
    a098:	str.w	r0, [r1, #264]	; 0x108
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    a09c:	lsls	r1, r3, #28
    a09e:	bpl.n	a0aa <SdSpiArduinoDriver::deactivate()+0x3e>
    a0a0:	ldr	r0, [r2, #52]	; 0x34
    a0a2:	mov.w	r1, #3758153728	; 0xe000e000
    a0a6:	str.w	r0, [r1, #268]	; 0x10c
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    a0aa:	lsls	r3, r3, #27
    a0ac:	bpl.n	a0b8 <SdSpiArduinoDriver::deactivate()+0x4c>
    a0ae:	ldr	r2, [r2, #56]	; 0x38
    a0b0:	mov.w	r3, #3758153728	; 0xe000e000
    a0b4:	str.w	r2, [r3, #272]	; 0x110
    a0b8:	bx	lr
    a0ba:	nop

0000a0bc <SdSpiArduinoDriver::end()>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::end() { m_spi->end(); }
    a0bc:	ldr	r0, [r0, #0]
    a0be:	b.w	2998 <SPIClass::end()>
    a0c2:	nop

0000a0c4 <SdSpiArduinoDriver::receive()>:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    a0c4:	ldr	r2, [r0, #0]
		port().TDR = data;
    a0c6:	movs	r3, #255	; 0xff
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    a0c8:	ldr	r2, [r2, #0]
		port().TDR = data;
    a0ca:	str	r3, [r2, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    a0cc:	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    a0ce:	tst.w	r3, #2031616	; 0x1f0000
    a0d2:	beq.n	a0cc <SdSpiArduinoDriver::receive()+0x8>
    a0d4:	ldr	r0, [r2, #116]	; 0x74
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive() { return m_spi->transfer(0XFF); }
    a0d6:	uxtb	r0, r0
    a0d8:	bx	lr
    a0da:	nop

0000a0dc <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>:
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
    a0dc:	push	{r4, r5, lr}
    a0de:	mov	r4, r1
    a0e0:	sub	sp, #12
    a0e2:	mov	r5, r0
#if USE_BLOCK_TRANSFER
  memset(buf, 0XFF, count);
    a0e4:	movs	r1, #255	; 0xff
    a0e6:	mov	r0, r4
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
    a0e8:	str	r2, [sp, #4]
  memset(buf, 0XFF, count);
    a0ea:	bl	e110 <memset>
		transfer(buf, buf, count);
    a0ee:	ldr	r0, [r5, #0]
    a0f0:	ldr	r3, [sp, #4]
    a0f2:	mov	r2, r4
    a0f4:	mov	r1, r4
    a0f6:	bl	2990 <SPIClass::transfer(void const*, void*, unsigned int)>
  for (size_t i = 0; i < count; i++) {
    buf[i] = m_spi->transfer(0XFF);
  }
#endif  // USE_BLOCK_TRANSFER
  return 0;
}
    a0fa:	movs	r0, #0
    a0fc:	add	sp, #12
    a0fe:	pop	{r4, r5, pc}

0000a100 <SdSpiArduinoDriver::send(unsigned char)>:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    a100:	ldr	r3, [r0, #0]
    a102:	ldr	r2, [r3, #0]
		port().TDR = data;
    a104:	str	r1, [r2, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    a106:	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    a108:	tst.w	r3, #2031616	; 0x1f0000
    a10c:	beq.n	a106 <SdSpiArduinoDriver::send(unsigned char)+0x6>
    a10e:	ldr	r3, [r2, #116]	; 0x74
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(uint8_t data) { m_spi->transfer(data); }
    a110:	bx	lr
    a112:	nop

0000a114 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf, size_t count) {
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    a114:	subs	r3, r2, #1
    a116:	cmp.w	r3, #512	; 0x200
void SdSpiArduinoDriver::send(const uint8_t* buf, size_t count) {
    a11a:	push	{r4, r5, lr}
    a11c:	mov	r4, r2
    a11e:	sub.w	sp, sp, #516	; 0x204
    a122:	mov	r5, r0
  if (0 < count && count <= 512) {
    a124:	bcc.n	a14a <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x36>
    memcpy(tmp, buf, count);
    m_spi->transfer(tmp, count);
    return;
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    a126:	cbz	r2, a144 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x30>
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    a128:	ldr	r3, [r0, #0]
    a12a:	subs	r0, r1, #1
    a12c:	ldr	r1, [r3, #0]
    a12e:	adds	r2, r0, r2
		port().TDR = data;
    a130:	ldrb.w	r3, [r0, #1]!
    a134:	str	r3, [r1, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    a136:	ldr	r3, [r1, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    a138:	tst.w	r3, #2031616	; 0x1f0000
    a13c:	beq.n	a136 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x22>
    a13e:	cmp	r0, r2
    a140:	ldr	r3, [r1, #116]	; 0x74
    a142:	bne.n	a130 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x1c>
    m_spi->transfer(buf[i]);
  }
}
    a144:	add.w	sp, sp, #516	; 0x204
    a148:	pop	{r4, r5, pc}
    memcpy(tmp, buf, count);
    a14a:	mov	r0, sp
    a14c:	bl	a170 <memcpy>
		transfer(buf, buf, count);
    a150:	mov	r2, sp
    a152:	mov	r3, r4
    a154:	ldr	r0, [r5, #0]
    a156:	mov	r1, r2
    a158:	bl	2990 <SPIClass::transfer(void const*, void*, unsigned int)>
}
    a15c:	add.w	sp, sp, #516	; 0x204
    a160:	pop	{r4, r5, pc}
    a162:	nop

0000a164 <sdCsInit(unsigned char)>:
 */
#include "SdSpiDriver.h"
#if ENABLE_ARDUINO_FEATURES
#if SD_CHIP_SELECT_MODE == 0
//------------------------------------------------------------------------------
void sdCsInit(SdCsPin_t pin) { pinMode(pin, OUTPUT); }
    a164:	movs	r1, #1
    a166:	b.w	bd1c <pinMode>
    a16a:	nop

0000a16c <sdCsWrite(unsigned char, bool)>:
//------------------------------------------------------------------------------
void sdCsWrite(SdCsPin_t pin, bool level) { digitalWrite(pin, level); }
    a16c:	b.w	bca4 <digitalWrite>

0000a170 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    a170:	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    a172:	orr.w	r3, r1, r0
	ands	r3, r3, #3
    a176:	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    a17a:	bne.n	a258 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    a17c:	subs	r2, #64	; 0x40
	blo	.Lmid_block
    a17e:	bcc.n	a204 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    a180:	ldr.w	r3, [r1], #4
    a184:	str.w	r3, [r0], #4
    a188:	ldr.w	r3, [r1], #4
    a18c:	str.w	r3, [r0], #4
    a190:	ldr.w	r3, [r1], #4
    a194:	str.w	r3, [r0], #4
    a198:	ldr.w	r3, [r1], #4
    a19c:	str.w	r3, [r0], #4
    a1a0:	ldr.w	r3, [r1], #4
    a1a4:	str.w	r3, [r0], #4
    a1a8:	ldr.w	r3, [r1], #4
    a1ac:	str.w	r3, [r0], #4
    a1b0:	ldr.w	r3, [r1], #4
    a1b4:	str.w	r3, [r0], #4
    a1b8:	ldr.w	r3, [r1], #4
    a1bc:	str.w	r3, [r0], #4
    a1c0:	ldr.w	r3, [r1], #4
    a1c4:	str.w	r3, [r0], #4
    a1c8:	ldr.w	r3, [r1], #4
    a1cc:	str.w	r3, [r0], #4
    a1d0:	ldr.w	r3, [r1], #4
    a1d4:	str.w	r3, [r0], #4
    a1d8:	ldr.w	r3, [r1], #4
    a1dc:	str.w	r3, [r0], #4
    a1e0:	ldr.w	r3, [r1], #4
    a1e4:	str.w	r3, [r0], #4
    a1e8:	ldr.w	r3, [r1], #4
    a1ec:	str.w	r3, [r0], #4
    a1f0:	ldr.w	r3, [r1], #4
    a1f4:	str.w	r3, [r0], #4
    a1f8:	ldr.w	r3, [r1], #4
    a1fc:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    a200:	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    a202:	bcs.n	a180 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    a204:	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    a206:	bcc.n	a22c <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    a208:	ldr.w	r3, [r1], #4
    a20c:	str.w	r3, [r0], #4
    a210:	ldr.w	r3, [r1], #4
    a214:	str.w	r3, [r0], #4
    a218:	ldr.w	r3, [r1], #4
    a21c:	str.w	r3, [r0], #4
    a220:	ldr.w	r3, [r1], #4
    a224:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    a228:	subs	r2, #16
	bhs	.Lmid_block_loop
    a22a:	bcs.n	a208 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    a22c:	adds	r2, #12
	blo	.Lcopy_less_than_4
    a22e:	bcc.n	a23c <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    a230:	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    a234:	str.w	r3, [r0], #4
	subs	r2, #4
    a238:	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    a23a:	bcs.n	a230 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    a23c:	adds	r2, #4
	beq	.Ldone
    a23e:	beq.n	a252 <memcpy+0xe2>

	lsls	r2, r2, #31
    a240:	lsls	r2, r2, #31
	itt ne
    a242:	itt	ne
	ldrbne  r3, [r1], #1
    a244:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    a248:	strbne.w	r3, [r0], #1

	bcc	.Ldone
    a24c:	bcc.n	a252 <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    a24e:	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    a250:	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    a252:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    a254:	bx	lr
    a256:	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    a258:	cmp	r2, #8
	blo	.Lbyte_copy
    a25a:	bcc.n	a284 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    a25c:	lsls	r3, r1, #30
	beq	.Ldst_aligned
    a25e:	beq.n	a17c <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    a260:	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    a264:	beq.n	a17c <memcpy+0xc>

	rsb	r3, #4
    a266:	rsb	r3, r3, #4
	subs	r2, r3
    a26a:	subs	r2, r2, r3

	lsls    r3, r3, #31
    a26c:	lsls	r3, r3, #31
	itt ne
    a26e:	itt	ne
	ldrbne  r3, [r1], #1
    a270:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    a274:	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    a278:	bcc.n	a17c <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    a27a:	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    a27e:	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    a282:	b.n	a17c <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    a284:	subs	r2, #4
	blo	.Lcopy_less_than_4
    a286:	bcc.n	a23c <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    a288:	subs	r2, #1
	ldrb    r3, [r1], #1
    a28a:	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    a28e:	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    a292:	bcs.n	a288 <memcpy+0x118>

	ldrb	r3, [r1]
    a294:	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    a296:	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    a298:	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    a29a:	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    a29c:	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    a29e:	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    a2a0:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    a2a2:	bx	lr

0000a2a4 <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    a2a4:	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    a2a6:	ldr	r4, [pc, #80]	; (a2f8 <rx_queue_transfer+0x54>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    a2a8:	mov.w	r5, #3758153728	; 0xe000e000
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    a2ac:	ldr	r6, [pc, #76]	; (a2fc <rx_queue_transfer+0x58>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    a2ae:	mov.w	r2, #131072	; 0x20000
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    a2b2:	add.w	r4, r4, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    a2b6:	ldr	r7, [pc, #72]	; (a300 <rx_queue_transfer+0x5c>)
    a2b8:	add.w	r6, r6, r0, lsl #5
{
    a2bc:	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
    a2be:	str.w	r2, [r5, #396]	; 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    a2c2:	mov	r1, r4
    a2c4:	ldrh	r2, [r7, #0]
    a2c6:	mov	r0, r6
    a2c8:	bl	b7f8 <usb_prepare_transfer>
	arm_dcache_delete(buffer, rx_packet_size);
    a2cc:	ldrh	r3, [r7, #0]
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    a2ce:	add	r3, r4
	asm volatile("": : :"memory");
	asm("dsb");
    a2d0:	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
    a2d4:	str.w	r4, [r5, #3932]	; 0xf5c
		location += 32;
    a2d8:	adds	r4, #32
	} while (location < end_addr);
    a2da:	cmp	r3, r4
    a2dc:	bhi.n	a2d4 <rx_queue_transfer+0x30>
	asm("dsb");
    a2de:	dsb	sy
	asm("isb");
    a2e2:	isb	sy
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    a2e6:	movs	r0, #3
    a2e8:	mov	r1, r6
    a2ea:	bl	b850 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    a2ee:	mov.w	r3, #131072	; 0x20000
    a2f2:	str.w	r3, [r5, #268]	; 0x10c
}
    a2f6:	pop	{r3, r4, r5, r6, r7, pc}
    a2f8:	.word	0x20001f20
    a2fc:	.word	0x20002f20
    a300:	.word	0x20007b64

0000a304 <rx_event>:

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    a304:	ldr	r3, [pc, #144]	; (a398 <rx_event+0x94>)
{
    a306:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    a30a:	ldrh	r4, [r3, #0]
    a30c:	ldr	r3, [r0, #4]
	int i = t->callback_param;
    a30e:	ldr	r5, [r0, #28]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    a310:	ubfx	r3, r3, #16, #15
    a314:	subs	r4, r4, r3
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    a316:	cmp	r4, #0
    a318:	ble.n	a364 <rx_event+0x60>
		// received a packet with data
		uint32_t head = rx_head;
    a31a:	ldr	r1, [pc, #128]	; (a39c <rx_event+0x98>)
		if (head != rx_tail) {
    a31c:	ldr	r0, [pc, #128]	; (a3a0 <rx_event+0x9c>)
		uint32_t head = rx_head;
    a31e:	ldrb	r2, [r1, #0]
		if (head != rx_tail) {
    a320:	ldrb	r0, [r0, #0]
		uint32_t head = rx_head;
    a322:	uxtb	r3, r2
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
    a324:	ldr	r6, [pc, #124]	; (a3a4 <rx_event+0xa0>)
		if (head != rx_tail) {
    a326:	cmp	r2, r0
			uint32_t ii = rx_list[head];
    a328:	ldr	r0, [pc, #124]	; (a3a8 <rx_event+0xa4>)
		if (head != rx_tail) {
    a32a:	beq.n	a33c <rx_event+0x38>
			uint32_t ii = rx_list[head];
    a32c:	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
    a330:	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    a334:	rsb	r2, r7, #512	; 0x200
    a338:	cmp	r4, r2
    a33a:	bls.n	a36e <rx_event+0x6a>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    a33c:	adds	r3, #1
		rx_index[i] = 0;
    a33e:	movs	r2, #0
		rx_count[i] = len;
    a340:	strh.w	r4, [r6, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
    a344:	cmp	r3, #8
		rx_index[i] = 0;
    a346:	ldr	r6, [pc, #100]	; (a3ac <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
    a348:	it	hi
    a34a:	movhi	r3, r2
		rx_index[i] = 0;
    a34c:	strh.w	r2, [r6, r5, lsl #1]
		rx_list[head] = i;
		rx_head = head;
    a350:	it	ls
    a352:	uxtbls	r2, r3
		rx_list[head] = i;
    a354:	strb	r5, [r0, r3]
		rx_available += len;
    a356:	ldr	r3, [pc, #88]	; (a3b0 <rx_event+0xac>)
		rx_head = head;
    a358:	strb	r2, [r1, #0]
		rx_available += len;
    a35a:	ldr	r2, [r3, #0]
    a35c:	add	r4, r2
    a35e:	str	r4, [r3, #0]
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
    a360:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rx_queue_transfer(i);
    a364:	mov	r0, r5
}
    a366:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_queue_transfer(i);
    a36a:	b.w	a2a4 <rx_queue_transfer>
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    a36e:	add.w	r0, r7, r8, lsl #9
    a372:	ldr	r1, [pc, #64]	; (a3b4 <rx_event+0xb0>)
    a374:	mov	r2, r4
				rx_count[ii] = count + len;
    a376:	add	r7, r4
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    a378:	add	r0, r1
    a37a:	add.w	r1, r1, r5, lsl #9
    a37e:	bl	a170 <memcpy>
				rx_available += len;
    a382:	ldr	r2, [pc, #44]	; (a3b0 <rx_event+0xac>)
				rx_queue_transfer(i);
    a384:	mov	r0, r5
				rx_count[ii] = count + len;
    a386:	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
    a38a:	ldr	r3, [r2, #0]
    a38c:	add	r3, r4
}
    a38e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				rx_available += len;
    a392:	str	r3, [r2, #0]
				rx_queue_transfer(i);
    a394:	b.w	a2a4 <rx_queue_transfer>
    a398:	.word	0x20007b64
    a39c:	.word	0x20007b80
    a3a0:	.word	0x20007b82
    a3a4:	.word	0x20007aa4
    a3a8:	.word	0x20007adc
    a3ac:	.word	0x20007ac0
    a3b0:	.word	0x20007a9c
    a3b4:	.word	0x20001f20

0000a3b8 <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    a3b8:	ldr	r3, [pc, #116]	; (a430 <usb_serial_flush_callback+0x78>)
    a3ba:	ldrb	r2, [r3, #0]
    a3bc:	cmp	r2, #0
    a3be:	bne.n	a42e <usb_serial_flush_callback+0x76>
	if (!usb_configuration) return;
    a3c0:	and.w	r3, r2, #255	; 0xff
    a3c4:	ldr	r2, [pc, #108]	; (a434 <usb_serial_flush_callback+0x7c>)
    a3c6:	ldrb	r2, [r2, #0]
    a3c8:	cbz	r2, a42e <usb_serial_flush_callback+0x76>
{
    a3ca:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_available == 0) return;
    a3ce:	ldr	r5, [pc, #104]	; (a438 <usb_serial_flush_callback+0x80>)
    a3d0:	ldrh	r2, [r5, #0]
    a3d2:	cbz	r2, a42a <usb_serial_flush_callback+0x72>
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    a3d4:	ldr	r6, [pc, #100]	; (a43c <usb_serial_flush_callback+0x84>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    a3d6:	rsb	r8, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    a3da:	ldr	r7, [pc, #100]	; (a440 <usb_serial_flush_callback+0x88>)
    a3dc:	ldrb	r2, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    a3de:	ldr	r4, [pc, #100]	; (a444 <usb_serial_flush_callback+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    a3e0:	add.w	r7, r7, r2, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    a3e4:	add.w	r4, r4, r2, lsl #11
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    a3e8:	mov	r2, r8
    a3ea:	mov	r0, r7
    a3ec:	mov	r1, r4
    a3ee:	bl	b7f8 <usb_prepare_transfer>
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    a3f2:	add.w	r2, r4, r8
	asm volatile("": : :"memory");
	asm("dsb");
    a3f6:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    a3fa:	mov.w	r3, #3758153728	; 0xe000e000
    a3fe:	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    a402:	adds	r4, #32
	} while (location < end_addr);
    a404:	cmp	r2, r4
    a406:	bhi.n	a3fe <usb_serial_flush_callback+0x46>
	asm("dsb");
    a408:	dsb	sy
	asm("isb");
    a40c:	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    a410:	movs	r0, #3
    a412:	mov	r1, r7
    a414:	bl	b828 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    a418:	ldrb	r3, [r6, #0]
    a41a:	adds	r3, #1
    a41c:	uxtb	r3, r3
    a41e:	cmp	r3, #3
    a420:	it	hi
    a422:	movhi	r3, #0
    a424:	strb	r3, [r6, #0]
	tx_available = 0;
    a426:	movs	r3, #0
    a428:	strh	r3, [r5, #0]
}
    a42a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a42e:	bx	lr
    a430:	.word	0x20007b89
    a434:	.word	0x20007b90
    a438:	.word	0x20007b68
    a43c:	.word	0x20007b87
    a440:	.word	0x20003120
    a444:	.word	0x20003240

0000a448 <usb_serial_write.part.0>:
int usb_serial_write(const void *buffer, uint32_t size)
    a448:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a44c:	sub	sp, #20
	while (size > 0) {
    a44e:	strd	r1, r0, [sp, #4]
    a452:	cmp	r1, #0
    a454:	beq.w	a5d6 <usb_serial_write.part.0+0x18e>
	uint32_t sent=0;
    a458:	movs	r3, #0
    a45a:	ldr	r4, [pc, #384]	; (a5dc <usb_serial_write.part.0+0x194>)
    a45c:	ldr.w	r8, [pc, #408]	; a5f8 <usb_serial_write.part.0+0x1b0>
    a460:	ldr.w	sl, [pc, #408]	; a5fc <usb_serial_write.part.0+0x1b4>
				wait_begin_at = systick_millis_count;
    a464:	ldr	r7, [pc, #376]	; (a5e0 <usb_serial_write.part.0+0x198>)
	uint32_t sent=0;
    a466:	str	r3, [sp, #0]
		tx_noautoflush = 1;
    a468:	movs	r3, #1
		transfer_t *xfer = tx_transfer + tx_head;
    a46a:	ldr	r2, [pc, #376]	; (a5e4 <usb_serial_write.part.0+0x19c>)
		tx_noautoflush = 1;
    a46c:	strb	r3, [r4, #0]
		transfer_t *xfer = tx_transfer + tx_head;
    a46e:	ldr	r3, [pc, #376]	; (a5e8 <usb_serial_write.part.0+0x1a0>)
    a470:	ldrb	r1, [r3, #0]
		while (!tx_available) {
    a472:	ldrh.w	r3, [r8]
		transfer_t *xfer = tx_transfer + tx_head;
    a476:	add.w	r9, r2, r1, lsl #5
		while (!tx_available) {
    a47a:	cmp	r3, #0
    a47c:	bne.w	a5ce <usb_serial_write.part.0+0x186>
		uint32_t wait_begin_at=0;
    a480:	mov	r6, r3
		int waiting=0;
    a482:	mov	r5, r3
			tx_noautoflush = 0;
    a484:	mov	fp, r3
			uint32_t status = usb_transfer_status(xfer);
    a486:	mov	r0, r9
    a488:	bl	b86c <usb_transfer_status>
			if (!(status & 0x80)) {
    a48c:	ands.w	r0, r0, #128	; 0x80
    a490:	beq.w	a5ac <usb_serial_write.part.0+0x164>
			asm("dsb" ::: "memory");
    a494:	dsb	sy
			if (transmit_previous_timeout) return sent;
    a498:	ldrb.w	r3, [sl]
			tx_noautoflush = 0;
    a49c:	strb.w	fp, [r4]
			if (!waiting) {
    a4a0:	cbnz	r5, a4a4 <usb_serial_write.part.0+0x5c>
				wait_begin_at = systick_millis_count;
    a4a2:	ldr	r6, [r7, #0]
			if (transmit_previous_timeout) return sent;
    a4a4:	cmp	r3, #0
    a4a6:	bne.n	a5a4 <usb_serial_write.part.0+0x15c>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    a4a8:	ldr	r3, [r7, #0]
    a4aa:	subs	r3, r3, r6
    a4ac:	cmp	r3, #120	; 0x78
    a4ae:	bhi.w	a5c0 <usb_serial_write.part.0+0x178>
			if (!usb_configuration) return sent;
    a4b2:	ldr	r3, [pc, #312]	; (a5ec <usb_serial_write.part.0+0x1a4>)
    a4b4:	ldrb	r3, [r3, #0]
    a4b6:	cmp	r3, #0
    a4b8:	beq.n	a5a4 <usb_serial_write.part.0+0x15c>
			yield();
    a4ba:	bl	c180 <yield>
			tx_noautoflush = 1;
    a4be:	movs	r2, #1
		while (!tx_available) {
    a4c0:	ldrh.w	r3, [r8]
    a4c4:	mov	r5, r2
			tx_noautoflush = 1;
    a4c6:	strb	r2, [r4, #0]
		while (!tx_available) {
    a4c8:	cmp	r3, #0
    a4ca:	beq.n	a486 <usb_serial_write.part.0+0x3e>
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    a4cc:	ldr	r2, [pc, #280]	; (a5e8 <usb_serial_write.part.0+0x1a0>)
    a4ce:	rsb	r0, r3, #2048	; 0x800
    a4d2:	ldrb	r1, [r2, #0]
    a4d4:	mov	r2, r3
    a4d6:	add.w	r0, r0, r1, lsl #11
    a4da:	ldr	r5, [pc, #276]	; (a5f0 <usb_serial_write.part.0+0x1a8>)
    a4dc:	lsls	r1, r1, #11
    a4de:	add	r0, r5
		if (size >= tx_available) {
    a4e0:	ldr	r5, [sp, #4]
    a4e2:	cmp	r5, r2
    a4e4:	bcs.n	a516 <usb_serial_write.part.0+0xce>
			memcpy(txdata, data, size);
    a4e6:	str	r3, [sp, #12]
    a4e8:	ldrd	r5, r1, [sp, #4]
    a4ec:	mov	r2, r5
    a4ee:	bl	a170 <memcpy>
			tx_available -= size;
    a4f2:	ldr	r3, [sp, #12]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    a4f4:	mov.w	r2, #3221225472	; 0xc0000000
			tx_available -= size;
    a4f8:	subs	r3, r3, r5
    a4fa:	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    a4fe:	ldr	r3, [pc, #244]	; (a5f4 <usb_serial_write.part.0+0x1ac>)
    a500:	str.w	r2, [r3, #132]	; 0x84
		asm("dsb" ::: "memory");
    a504:	dsb	sy
			sent += size;
    a508:	ldr	r0, [sp, #0]
		tx_noautoflush = 0;
    a50a:	movs	r3, #0
			sent += size;
    a50c:	add	r0, r5
		tx_noautoflush = 0;
    a50e:	strb	r3, [r4, #0]
}
    a510:	add	sp, #20
    a512:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    a516:	ldr	r3, [pc, #216]	; (a5f0 <usb_serial_write.part.0+0x1a8>)
    a518:	adds	r5, r1, r3
			memcpy(txdata, data, tx_available);
    a51a:	ldr	r1, [sp, #8]
    a51c:	bl	a170 <memcpy>
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    a520:	movs	r3, #0
    a522:	mov.w	r2, #2048	; 0x800
    a526:	mov	r1, r5
    a528:	mov	r0, r9
    a52a:	bl	b7f8 <usb_prepare_transfer>
	asm("dsb");
    a52e:	dsb	sy
    a532:	add.w	r2, r5, #32
	uint32_t end_addr = (uint32_t)addr + size;
    a536:	add.w	r3, r5, #2048	; 0x800
    a53a:	cmp	r3, r2
    a53c:	ite	cc
    a53e:	movcc	r3, #1
    a540:	movcs	r3, #64	; 0x40
		SCB_CACHE_DCCIMVAC = location;
    a542:	mov.w	r2, #3758153728	; 0xe000e000
    a546:	add.w	r3, r5, r3, lsl #5
    a54a:	str.w	r5, [r2, #3952]	; 0xf70
		location += 32;
    a54e:	adds	r5, #32
	} while (location < end_addr);
    a550:	cmp	r3, r5
    a552:	bne.n	a54a <usb_serial_write.part.0+0x102>
	asm("dsb");
    a554:	dsb	sy
	asm("isb");
    a558:	isb	sy
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    a55c:	movs	r0, #3
    a55e:	mov	r1, r9
    a560:	bl	b828 <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    a564:	ldr	r2, [pc, #128]	; (a5e8 <usb_serial_write.part.0+0x1a0>)
    a566:	ldrb	r3, [r2, #0]
    a568:	adds	r3, #1
    a56a:	uxtb	r3, r3
    a56c:	cmp	r3, #3
    a56e:	itt	hi
    a570:	movhi	r3, #0
    a572:	ldrhi	r2, [pc, #116]	; (a5e8 <usb_serial_write.part.0+0x1a0>)
    a574:	strb	r3, [r2, #0]
			size -= tx_available;
    a576:	ldrh.w	r3, [r8]
    a57a:	ldr	r2, [sp, #4]
    a57c:	subs	r1, r2, r3
			sent += tx_available;
    a57e:	ldr	r2, [sp, #0]
    a580:	add	r2, r3
			size -= tx_available;
    a582:	str	r1, [sp, #4]
			sent += tx_available;
    a584:	str	r2, [sp, #0]
			data += tx_available;
    a586:	ldr	r2, [sp, #8]
    a588:	add	r2, r3
			tx_available = 0;
    a58a:	movs	r3, #0
			data += tx_available;
    a58c:	str	r2, [sp, #8]
	USB1_GPTIMER0CTRL = 0;
    a58e:	ldr	r2, [pc, #100]	; (a5f4 <usb_serial_write.part.0+0x1ac>)
			tx_available = 0;
    a590:	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = 0;
    a594:	str.w	r3, [r2, #132]	; 0x84
		asm("dsb" ::: "memory");
    a598:	dsb	sy
		tx_noautoflush = 0;
    a59c:	strb	r3, [r4, #0]
	while (size > 0) {
    a59e:	cmp	r1, #0
    a5a0:	bne.w	a468 <usb_serial_write.part.0+0x20>
	return sent;
    a5a4:	ldr	r0, [sp, #0]
}
    a5a6:	add	sp, #20
    a5a8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				tx_available = TX_SIZE;
    a5ac:	mov.w	r2, #2048	; 0x800
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    a5b0:	ldr	r3, [pc, #52]	; (a5e8 <usb_serial_write.part.0+0x1a0>)
				transmit_previous_timeout = 0;
    a5b2:	strb.w	r0, [sl]
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    a5b6:	ldrb	r1, [r3, #0]
				break;
    a5b8:	mov	r3, r2
				tx_available = TX_SIZE;
    a5ba:	strh.w	r2, [r8]
				break;
    a5be:	b.n	a4d6 <usb_serial_write.part.0+0x8e>
				transmit_previous_timeout = 1;
    a5c0:	movs	r3, #1
				return sent;
    a5c2:	ldr	r0, [sp, #0]
				transmit_previous_timeout = 1;
    a5c4:	strb.w	r3, [sl]
}
    a5c8:	add	sp, #20
    a5ca:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    a5ce:	mov	r2, r3
    a5d0:	rsb	r0, r3, #2048	; 0x800
    a5d4:	b.n	a4d6 <usb_serial_write.part.0+0x8e>
	while (size > 0) {
    a5d6:	ldr	r0, [sp, #4]
	return sent;
    a5d8:	b.n	a5a6 <usb_serial_write.part.0+0x15e>
    a5da:	nop
    a5dc:	.word	0x20007b89
    a5e0:	.word	0x20007b08
    a5e4:	.word	0x20003120
    a5e8:	.word	0x20007b87
    a5ec:	.word	0x20007b90
    a5f0:	.word	0x20003240
    a5f4:	.word	0x402e0000
    a5f8:	.word	0x20007b68
    a5fc:	.word	0x20007b85

0000a600 <usb_serial_reset>:
}
    a600:	bx	lr
    a602:	nop

0000a604 <usb_serial_configure>:
	if (usb_high_speed) {
    a604:	ldr	r3, [pc, #168]	; (a6b0 <usb_serial_configure+0xac>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
    a606:	movs	r1, #0
    a608:	movs	r2, #128	; 0x80
    a60a:	ldr	r0, [pc, #168]	; (a6b4 <usb_serial_configure+0xb0>)
{
    a60c:	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
    a60e:	ldrb	r3, [r3, #0]
	tx_head = 0;
    a610:	movs	r4, #0
		tx_packet_size = CDC_TX_SIZE_480;
    a612:	ldr	r5, [pc, #164]	; (a6b8 <usb_serial_configure+0xb4>)
	if (usb_high_speed) {
    a614:	cmp	r3, r1
		rx_packet_size = CDC_RX_SIZE_480;
    a616:	ldr	r6, [pc, #164]	; (a6bc <usb_serial_configure+0xb8>)
	if (usb_high_speed) {
    a618:	ite	eq
    a61a:	moveq	r3, #64	; 0x40
    a61c:	movne.w	r3, #512	; 0x200
		tx_packet_size = CDC_TX_SIZE_480;
    a620:	strh	r3, [r5, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    a622:	strh	r3, [r6, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    a624:	bl	e110 <memset>
	tx_head = 0;
    a628:	ldr	r2, [pc, #148]	; (a6c0 <usb_serial_configure+0xbc>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    a62a:	mov	r1, r4
	tx_available = 0;
    a62c:	ldr	r3, [pc, #148]	; (a6c4 <usb_serial_configure+0xc0>)
	tx_head = 0;
    a62e:	strb	r4, [r2, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    a630:	mov.w	r2, #256	; 0x100
    a634:	ldr	r0, [pc, #144]	; (a6c8 <usb_serial_configure+0xc4>)
	tx_available = 0;
    a636:	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    a638:	bl	e110 <memset>
	memset(rx_count, 0, sizeof(rx_count));
    a63c:	ldr	r2, [pc, #140]	; (a6cc <usb_serial_configure+0xc8>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    a63e:	movs	r1, #16
	memset(rx_index, 0, sizeof(rx_index));
    a640:	ldr	r3, [pc, #140]	; (a6d0 <usb_serial_configure+0xcc>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    a642:	movs	r0, #2
	memset(rx_count, 0, sizeof(rx_count));
    a644:	strd	r4, r4, [r2]
    a648:	strd	r4, r4, [r2, #8]
	rx_head = 0;
    a64c:	ldr	r2, [pc, #132]	; (a6d4 <usb_serial_configure+0xd0>)
	memset(rx_index, 0, sizeof(rx_index));
    a64e:	strd	r4, r4, [r3]
	rx_head = 0;
    a652:	strb	r4, [r2, #0]
	rx_available = 0;
    a654:	ldr	r2, [pc, #128]	; (a6d8 <usb_serial_configure+0xd4>)
	memset(rx_index, 0, sizeof(rx_index));
    a656:	strd	r4, r4, [r3, #8]
	rx_tail = 0;
    a65a:	ldr	r3, [pc, #128]	; (a6dc <usb_serial_configure+0xd8>)
    a65c:	strb	r4, [r3, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    a65e:	mov	r3, r4
	rx_available = 0;
    a660:	str	r4, [r2, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    a662:	mov	r2, r4
    a664:	bl	b6c4 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    a668:	mov	r2, r4
    a66a:	ldrh	r1, [r6, #0]
    a66c:	movs	r0, #3
    a66e:	ldr	r3, [pc, #112]	; (a6e0 <usb_serial_configure+0xdc>)
    a670:	bl	b660 <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    a674:	mov	r3, r4
    a676:	movs	r2, #1
    a678:	ldrh	r1, [r5, #0]
    a67a:	movs	r0, #3
    a67c:	bl	b6c4 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    a680:	mov	r0, r4
    a682:	adds	r4, #1
    a684:	bl	a2a4 <rx_queue_transfer>
    a688:	cmp	r4, #8
    a68a:	bne.n	a680 <usb_serial_configure+0x7c>
	USB1_GPTIMER0CTRL = 0;
    a68c:	ldr	r3, [pc, #84]	; (a6e4 <usb_serial_configure+0xe0>)
	USB1_GPTIMER0LD = microseconds - 1;
    a68e:	movs	r2, #74	; 0x4a
	usb_timer0_callback = callback;
    a690:	ldr	r0, [pc, #84]	; (a6e8 <usb_serial_configure+0xe4>)
	USB1_GPTIMER0CTRL = 0;
    a692:	movs	r1, #0
	usb_timer0_callback = callback;
    a694:	ldr	r4, [pc, #84]	; (a6ec <usb_serial_configure+0xe8>)
    a696:	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
    a698:	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    a69c:	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    a6a0:	ldr.w	r2, [r3, #328]	; 0x148
    a6a4:	orr.w	r2, r2, #16777216	; 0x1000000
    a6a8:	str.w	r2, [r3, #328]	; 0x148
}
    a6ac:	pop	{r4, r5, r6, pc}
    a6ae:	nop
    a6b0:	.word	0x20007b91
    a6b4:	.word	0x20003120
    a6b8:	.word	0x20007b6c
    a6bc:	.word	0x20007b64
    a6c0:	.word	0x20007b87
    a6c4:	.word	0x20007b68
    a6c8:	.word	0x20002f20
    a6cc:	.word	0x20007aa4
    a6d0:	.word	0x20007ac0
    a6d4:	.word	0x20007b80
    a6d8:	.word	0x20007a9c
    a6dc:	.word	0x20007b82
    a6e0:	.word	0x0000a305
    a6e4:	.word	0x402e0000
    a6e8:	.word	0x20007b48
    a6ec:	.word	0x0000a3b9

0000a6f0 <usb_serial_read>:
{
    a6f0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
    a6f4:	mov.w	r3, #3758153728	; 0xe000e000
    a6f8:	mov.w	r2, #131072	; 0x20000
	uint32_t tail = rx_tail;
    a6fc:	ldr.w	sl, [pc, #200]	; a7c8 <usb_serial_read+0xd8>
{
    a700:	sub	sp, #12
	NVIC_DISABLE_IRQ(IRQ_USB1);
    a702:	str.w	r2, [r3, #396]	; 0x18c
	while (count < size && tail != rx_head) {
    a706:	mov	fp, r1
	uint32_t tail = rx_tail;
    a708:	ldrb.w	r4, [sl]
	while (count < size && tail != rx_head) {
    a70c:	cmp	r1, #0
    a70e:	beq.n	a7b0 <usb_serial_read+0xc0>
    a710:	mov	r8, r0
    a712:	uxtb	r4, r4
	uint32_t count=0;
    a714:	movs	r7, #0
		uint32_t avail = rx_count[i] - rx_index[i];
    a716:	ldr.w	r9, [pc, #180]	; a7cc <usb_serial_read+0xdc>
	while (count < size && tail != rx_head) {
    a71a:	ldr	r3, [pc, #152]	; (a7b4 <usb_serial_read+0xc4>)
		uint32_t len = size - count;
    a71c:	sub.w	r2, fp, r7
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    a720:	ldr	r1, [pc, #148]	; (a7b8 <usb_serial_read+0xc8>)
	while (count < size && tail != rx_head) {
    a722:	ldrb	r3, [r3, #0]
    a724:	cmp	r3, r4
		if (++tail > RX_NUM) tail = 0;
    a726:	add.w	r4, r4, #1
	while (count < size && tail != rx_head) {
    a72a:	beq.n	a7ac <usb_serial_read+0xbc>
		if (++tail > RX_NUM) tail = 0;
    a72c:	cmp	r4, #9
		uint32_t i = rx_list[tail];
    a72e:	ldr	r3, [pc, #140]	; (a7bc <usb_serial_read+0xcc>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    a730:	mov	r0, r8
		if (++tail > RX_NUM) tail = 0;
    a732:	it	cs
    a734:	movcs	r4, #0
		uint32_t i = rx_list[tail];
    a736:	ldrb	r6, [r3, r4]
		uint32_t avail = rx_count[i] - rx_index[i];
    a738:	ldrh.w	ip, [r9, r6, lsl #1]
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    a73c:	add.w	r3, ip, r6, lsl #9
    a740:	add	r1, r3
		uint32_t avail = rx_count[i] - rx_index[i];
    a742:	ldr	r3, [pc, #124]	; (a7c0 <usb_serial_read+0xd0>)
    a744:	ldrh.w	r5, [r3, r6, lsl #1]
    a748:	sub.w	r5, r5, ip
		if (avail > len) {
    a74c:	cmp	r2, r5
    a74e:	bcs.n	a78a <usb_serial_read+0x9a>
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    a750:	add.w	ip, ip, r6, lsl #9
    a754:	ldr	r1, [pc, #96]	; (a7b8 <usb_serial_read+0xc8>)
			rx_available -= len;
    a756:	ldr	r4, [pc, #108]	; (a7c4 <usb_serial_read+0xd4>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    a758:	add	r1, ip
    a75a:	str	r2, [sp, #4]
    a75c:	bl	a170 <memcpy>
			rx_available -= len;
    a760:	ldr	r1, [r4, #0]
			rx_index[i] += len;
    a762:	ldrh.w	r5, [r9, r6, lsl #1]
	return count;
    a766:	mov	r0, fp
			rx_index[i] += len;
    a768:	ldr	r2, [sp, #4]
			rx_available -= len;
    a76a:	sub.w	r1, r1, fp
			rx_index[i] += len;
    a76e:	add	r2, r5
			rx_available -= len;
    a770:	add	r1, r7
			rx_index[i] += len;
    a772:	strh.w	r2, [r9, r6, lsl #1]
			rx_available -= len;
    a776:	str	r1, [r4, #0]
	NVIC_ENABLE_IRQ(IRQ_USB1);
    a778:	mov.w	r3, #3758153728	; 0xe000e000
    a77c:	mov.w	r2, #131072	; 0x20000
    a780:	str.w	r2, [r3, #268]	; 0x10c
}
    a784:	add	sp, #12
    a786:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    a78a:	mov	r2, r5
			count += avail;
    a78c:	add	r7, r5
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    a78e:	bl	a170 <memcpy>
			rx_available -= avail;
    a792:	ldr	r1, [pc, #48]	; (a7c4 <usb_serial_read+0xd4>)
			rx_tail = tail;
    a794:	uxtb	r3, r4
			rx_queue_transfer(i);
    a796:	mov	r0, r6
			rx_available -= avail;
    a798:	ldr	r2, [r1, #0]
			p += avail;
    a79a:	add	r8, r5
			rx_available -= avail;
    a79c:	subs	r2, r2, r5
    a79e:	str	r2, [r1, #0]
			rx_tail = tail;
    a7a0:	strb.w	r3, [sl]
			rx_queue_transfer(i);
    a7a4:	bl	a2a4 <rx_queue_transfer>
	while (count < size && tail != rx_head) {
    a7a8:	cmp	fp, r7
    a7aa:	bhi.n	a71a <usb_serial_read+0x2a>
	return count;
    a7ac:	mov	r0, r7
    a7ae:	b.n	a778 <usb_serial_read+0x88>
	while (count < size && tail != rx_head) {
    a7b0:	mov	r0, r1
    a7b2:	b.n	a778 <usb_serial_read+0x88>
    a7b4:	.word	0x20007b80
    a7b8:	.word	0x20001f20
    a7bc:	.word	0x20007adc
    a7c0:	.word	0x20007aa4
    a7c4:	.word	0x20007a9c
    a7c8:	.word	0x20007b82
    a7cc:	.word	0x20007ac0

0000a7d0 <usb_serial_peekchar>:
	if (tail == rx_head) return -1;
    a7d0:	ldr	r3, [pc, #44]	; (a800 <usb_serial_peekchar+0x30>)
	uint32_t tail = rx_tail;
    a7d2:	ldr	r2, [pc, #48]	; (a804 <usb_serial_peekchar+0x34>)
    a7d4:	ldrb	r2, [r2, #0]
	if (tail == rx_head) return -1;
    a7d6:	ldrb	r1, [r3, #0]
	uint32_t tail = rx_tail;
    a7d8:	uxtb	r3, r2
	if (tail == rx_head) return -1;
    a7da:	cmp	r2, r1
    a7dc:	beq.n	a7fa <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
    a7de:	adds	r3, #1
	uint32_t i = rx_list[tail];
    a7e0:	ldr	r0, [pc, #36]	; (a808 <usb_serial_peekchar+0x38>)
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    a7e2:	ldr	r2, [pc, #40]	; (a80c <usb_serial_peekchar+0x3c>)
	if (++tail > RX_NUM) tail = 0;
    a7e4:	cmp	r3, #9
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    a7e6:	ldr	r1, [pc, #40]	; (a810 <usb_serial_peekchar+0x40>)
	if (++tail > RX_NUM) tail = 0;
    a7e8:	it	cs
    a7ea:	movcs	r3, #0
	uint32_t i = rx_list[tail];
    a7ec:	ldrb	r3, [r0, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    a7ee:	ldrh.w	r1, [r1, r3, lsl #1]
    a7f2:	add.w	r3, r2, r3, lsl #9
    a7f6:	ldrb	r0, [r3, r1]
    a7f8:	bx	lr
	if (tail == rx_head) return -1;
    a7fa:	mov.w	r0, #4294967295
}
    a7fe:	bx	lr
    a800:	.word	0x20007b80
    a804:	.word	0x20007b82
    a808:	.word	0x20007adc
    a80c:	.word	0x20001f20
    a810:	.word	0x20007ac0

0000a814 <usb_serial_available>:
	uint32_t n = rx_available;
    a814:	ldr	r3, [pc, #16]	; (a828 <usb_serial_available+0x14>)
{
    a816:	push	{r4, lr}
	uint32_t n = rx_available;
    a818:	ldr	r4, [r3, #0]
	if (n == 0) yield();
    a81a:	cbz	r4, a820 <usb_serial_available+0xc>
}
    a81c:	mov	r0, r4
    a81e:	pop	{r4, pc}
	if (n == 0) yield();
    a820:	bl	c180 <yield>
}
    a824:	mov	r0, r4
    a826:	pop	{r4, pc}
    a828:	.word	0x20007a9c

0000a82c <usb_serial_flush_input>:
{
    a82c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tail = rx_tail;
    a830:	ldr	r6, [pc, #80]	; (a884 <usb_serial_flush_input+0x58>)
	while (tail != rx_head) {
    a832:	ldr	r5, [pc, #84]	; (a888 <usb_serial_flush_input+0x5c>)
	uint32_t tail = rx_tail;
    a834:	ldrb	r3, [r6, #0]
	while (tail != rx_head) {
    a836:	ldrb	r2, [r5, #0]
    a838:	cmp	r3, r2
    a83a:	beq.n	a880 <usb_serial_flush_input+0x54>
    a83c:	uxtb	r4, r3
    a83e:	ldr.w	r9, [pc, #80]	; a890 <usb_serial_flush_input+0x64>
    a842:	ldr.w	fp, [pc, #80]	; a894 <usb_serial_flush_input+0x68>
    a846:	ldr.w	r8, [pc, #80]	; a898 <usb_serial_flush_input+0x6c>
    a84a:	ldr	r7, [pc, #64]	; (a88c <usb_serial_flush_input+0x60>)
		if (++tail > RX_NUM) tail = 0;
    a84c:	adds	r4, #1
    a84e:	cmp	r4, #8
		rx_tail = tail;
    a850:	uxtb.w	sl, r4
		if (++tail > RX_NUM) tail = 0;
    a854:	bls.n	a85a <usb_serial_flush_input+0x2e>
    a856:	movs	r4, #0
    a858:	mov	sl, r4
		uint32_t i = rx_list[tail];
    a85a:	ldrb.w	r0, [r9, r4]
		rx_available -= rx_count[i] - rx_index[i];
    a85e:	ldr.w	r3, [fp]
    a862:	ldrh.w	r2, [r8, r0, lsl #1]
    a866:	ldrh.w	r1, [r7, r0, lsl #1]
    a86a:	subs	r2, r2, r1
    a86c:	subs	r3, r3, r2
    a86e:	str.w	r3, [fp]
		rx_queue_transfer(i);
    a872:	bl	a2a4 <rx_queue_transfer>
		rx_tail = tail;
    a876:	strb.w	sl, [r6]
	while (tail != rx_head) {
    a87a:	ldrb	r3, [r5, #0]
    a87c:	cmp	r3, r4
    a87e:	bne.n	a84c <usb_serial_flush_input+0x20>
}
    a880:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a884:	.word	0x20007b82
    a888:	.word	0x20007b80
    a88c:	.word	0x20007ac0
    a890:	.word	0x20007adc
    a894:	.word	0x20007a9c
    a898:	.word	0x20007aa4

0000a89c <usb_serial_getchar>:
{
    a89c:	push	{lr}
    a89e:	sub	sp, #12
	if (usb_serial_read(&c, 1)) return c;
    a8a0:	movs	r1, #1
    a8a2:	add.w	r0, sp, #7
    a8a6:	bl	a6f0 <usb_serial_read>
    a8aa:	cbz	r0, a8b6 <usb_serial_getchar+0x1a>
    a8ac:	ldrb.w	r0, [sp, #7]
}
    a8b0:	add	sp, #12
    a8b2:	ldr.w	pc, [sp], #4
	return -1;
    a8b6:	mov.w	r0, #4294967295
    a8ba:	b.n	a8b0 <usb_serial_getchar+0x14>

0000a8bc <usb_serial_putchar>:
	if (!usb_configuration) return 0;
    a8bc:	ldr	r3, [pc, #36]	; (a8e4 <usb_serial_putchar+0x28>)
{
    a8be:	push	{lr}
    a8c0:	sub	sp, #12
	if (!usb_configuration) return 0;
    a8c2:	ldrb	r3, [r3, #0]
{
    a8c4:	strb.w	r0, [sp, #7]
	if (!usb_configuration) return 0;
    a8c8:	cbz	r3, a8da <usb_serial_putchar+0x1e>
    a8ca:	movs	r1, #1
    a8cc:	add.w	r0, sp, #7
    a8d0:	bl	a448 <usb_serial_write.part.0>
}
    a8d4:	add	sp, #12
    a8d6:	ldr.w	pc, [sp], #4
    a8da:	and.w	r0, r3, #255	; 0xff
    a8de:	add	sp, #12
    a8e0:	ldr.w	pc, [sp], #4
    a8e4:	.word	0x20007b90

0000a8e8 <usb_serial_write>:
	if (!usb_configuration) return 0;
    a8e8:	ldr	r3, [pc, #16]	; (a8fc <usb_serial_write+0x14>)
    a8ea:	ldrb	r3, [r3, #0]
    a8ec:	and.w	r2, r3, #255	; 0xff
    a8f0:	cbz	r3, a8f6 <usb_serial_write+0xe>
    a8f2:	b.w	a448 <usb_serial_write.part.0>
}
    a8f6:	mov	r0, r2
    a8f8:	bx	lr
    a8fa:	nop
    a8fc:	.word	0x20007b90

0000a900 <usb_serial_write_buffer_free>:
{
    a900:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (uint32_t i=0; i < TX_NUM; i++) {
    a904:	movs	r4, #0
	tx_noautoflush = 1;
    a906:	ldr.w	r8, [pc, #68]	; a94c <usb_serial_write_buffer_free+0x4c>
    a90a:	movs	r3, #1
    a90c:	ldr	r5, [pc, #52]	; (a944 <usb_serial_write_buffer_free+0x44>)
	uint32_t sum = 0;
    a90e:	mov	r7, r4
    a910:	ldr	r6, [pc, #52]	; (a948 <usb_serial_write_buffer_free+0x48>)
	tx_noautoflush = 1;
    a912:	strb.w	r3, [r8]
		if (i == tx_head) continue;
    a916:	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    a918:	mov	r0, r5
	for (uint32_t i=0; i < TX_NUM; i++) {
    a91a:	adds	r5, #32
		if (i == tx_head) continue;
    a91c:	cmp	r3, r4
	for (uint32_t i=0; i < TX_NUM; i++) {
    a91e:	add.w	r4, r4, #1
		if (i == tx_head) continue;
    a922:	beq.n	a930 <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    a924:	bl	b86c <usb_transfer_status>
    a928:	lsls	r3, r0, #24
    a92a:	it	pl
    a92c:	addpl.w	r7, r7, #2048	; 0x800
	for (uint32_t i=0; i < TX_NUM; i++) {
    a930:	cmp	r4, #4
    a932:	bne.n	a916 <usb_serial_write_buffer_free+0x16>
	asm("dsb" ::: "memory");
    a934:	dsb	sy
	tx_noautoflush = 0;
    a938:	movs	r3, #0
}
    a93a:	mov	r0, r7
	tx_noautoflush = 0;
    a93c:	strb.w	r3, [r8]
}
    a940:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a944:	.word	0x20003120
    a948:	.word	0x20007b87
    a94c:	.word	0x20007b89

0000a950 <usb_serial_flush_output>:
{
    a950:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!usb_configuration) return;
    a954:	ldr	r3, [pc, #116]	; (a9cc <usb_serial_flush_output+0x7c>)
    a956:	ldrb	r3, [r3, #0]
    a958:	cbz	r3, a960 <usb_serial_flush_output+0x10>
	if (tx_available == 0) return;
    a95a:	ldr	r5, [pc, #116]	; (a9d0 <usb_serial_flush_output+0x80>)
    a95c:	ldrh	r2, [r5, #0]
    a95e:	cbnz	r2, a964 <usb_serial_flush_output+0x14>
}
    a960:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	transfer_t *xfer = tx_transfer + tx_head;
    a964:	ldr	r6, [pc, #108]	; (a9d4 <usb_serial_flush_output+0x84>)
	uint32_t txnum = TX_SIZE - tx_available;
    a966:	rsb	r9, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    a96a:	ldr	r1, [pc, #108]	; (a9d8 <usb_serial_flush_output+0x88>)
    a96c:	ldrb	r3, [r6, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    a96e:	mov	r2, r9
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    a970:	ldr	r4, [pc, #104]	; (a9dc <usb_serial_flush_output+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    a972:	add.w	r8, r1, r3, lsl #5
	tx_noautoflush = 1;
    a976:	ldr	r7, [pc, #104]	; (a9e0 <usb_serial_flush_output+0x90>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    a978:	add.w	r4, r4, r3, lsl #11
	tx_noautoflush = 1;
    a97c:	movs	r3, #1
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    a97e:	mov	r0, r8
	tx_noautoflush = 1;
    a980:	strb	r3, [r7, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    a982:	mov	r1, r4
    a984:	movs	r3, #0
    a986:	bl	b7f8 <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    a98a:	add.w	r2, r4, r9
	asm("dsb");
    a98e:	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    a992:	mov.w	r3, #3758153728	; 0xe000e000
    a996:	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    a99a:	adds	r4, #32
	} while (location < end_addr);
    a99c:	cmp	r2, r4
    a99e:	bhi.n	a996 <usb_serial_flush_output+0x46>
	asm("dsb");
    a9a0:	dsb	sy
	asm("isb");
    a9a4:	isb	sy
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    a9a8:	movs	r0, #3
    a9aa:	mov	r1, r8
    a9ac:	bl	b828 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    a9b0:	ldrb	r3, [r6, #0]
    a9b2:	adds	r3, #1
    a9b4:	uxtb	r3, r3
    a9b6:	cmp	r3, #3
    a9b8:	it	hi
    a9ba:	movhi	r3, #0
    a9bc:	strb	r3, [r6, #0]
	tx_available = 0;
    a9be:	movs	r3, #0
    a9c0:	strh	r3, [r5, #0]
	asm("dsb" ::: "memory");
    a9c2:	dsb	sy
	tx_noautoflush = 0;
    a9c6:	strb	r3, [r7, #0]
}
    a9c8:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    a9cc:	.word	0x20007b90
    a9d0:	.word	0x20007b68
    a9d4:	.word	0x20007b87
    a9d8:	.word	0x20003120
    a9dc:	.word	0x20003240
    a9e0:	.word	0x20007b89

0000a9e4 <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    a9e4:	ldr	r1, [pc, #648]	; (ac70 <set_arm_clock+0x28c>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    a9e6:	ldr	r3, [pc, #652]	; (ac74 <set_arm_clock+0x290>)
	if (frequency > 528000000) {
    a9e8:	cmp	r0, r1
{
    a9ea:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t dcdc = DCDC_REG3;
    a9ee:	ldr	r4, [pc, #648]	; (ac78 <set_arm_clock+0x294>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    a9f0:	ldr	r6, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    a9f2:	ldr	r2, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    a9f4:	ldr.w	r8, [r4, #12]
	if (frequency > 528000000) {
    a9f8:	bls.n	aa32 <set_arm_clock+0x4e>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    a9fa:	ldr	r3, [pc, #640]	; (ac7c <set_arm_clock+0x298>)
    a9fc:	cmp	r0, r3
    a9fe:	bls.w	ac06 <set_arm_clock+0x222>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    aa02:	subs	r3, r0, r3
    aa04:	ldr	r1, [pc, #632]	; (ac80 <set_arm_clock+0x29c>)
    aa06:	lsrs	r3, r3, #8
    aa08:	umull	r1, r3, r1, r3
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    aa0c:	movw	r1, #1575	; 0x627
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    aa10:	lsrs	r3, r3, #7
    aa12:	add.w	r3, r3, r3, lsl #2
    aa16:	add.w	r3, r3, r3, lsl #2
    aa1a:	addw	r3, r3, #1250	; 0x4e2
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    aa1e:	cmp	r3, r1
    aa20:	it	cs
    aa22:	movcs	r3, r1
    aa24:	sub.w	r7, r3, #800	; 0x320
    aa28:	ldr	r3, [pc, #600]	; (ac84 <set_arm_clock+0x2a0>)
    aa2a:	umull	r3, r7, r3, r7
    aa2e:	lsrs	r7, r7, #3
    aa30:	b.n	aa3c <set_arm_clock+0x58>
	} else if (frequency <= 24000000) {
    aa32:	ldr	r7, [pc, #596]	; (ac88 <set_arm_clock+0x2a4>)
    aa34:	cmp	r0, r7
    aa36:	ite	hi
    aa38:	movhi	r7, #14
    aa3a:	movls	r7, #6
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    aa3c:	ldr	r1, [pc, #564]	; (ac74 <set_arm_clock+0x290>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    aa3e:	and.w	r9, r8, #31
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    aa42:	ldr.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    aa46:	cmp	r9, r7
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    aa48:	orr.w	r3, r3, #192	; 0xc0
    aa4c:	str.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    aa50:	bcs.n	aa6c <set_arm_clock+0x88>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    aa52:	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    aa56:	sub.w	r1, r1, #507904	; 0x7c000
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    aa5a:	orr.w	r8, r8, r7
		DCDC_REG3 = dcdc;
    aa5e:	str.w	r8, [r1, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    aa62:	ldr	r3, [r1, #0]
    aa64:	cmp	r3, #0
    aa66:	bge.n	aa62 <set_arm_clock+0x7e>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    aa68:	and.w	r9, r8, #31
	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    aa6c:	ands.w	r3, r6, #33554432	; 0x2000000
    aa70:	bne.n	aabc <set_arm_clock+0xd8>
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    aa72:	ldr	r1, [pc, #536]	; (ac8c <set_arm_clock+0x2a8>)
    aa74:	ldr	r4, [r1, #16]
    aa76:	ldr	r1, [pc, #536]	; (ac90 <set_arm_clock+0x2ac>)
    aa78:	bics	r1, r4
    aa7a:	beq.w	ac52 <set_arm_clock+0x26e>
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    aa7e:	eor.w	r1, r2, #4096	; 0x1000
    aa82:	mov	r4, r6
    aa84:	mov.w	r5, #4096	; 0x1000
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    aa88:	tst.w	r4, #939524096	; 0x38000000
    aa8c:	beq.n	aa98 <set_arm_clock+0xb4>
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    aa8e:	bic.w	r6, r6, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    aa92:	orrs	r6, r3
			CCM_CBCDR = cbcdr;
    aa94:	ldr	r3, [pc, #476]	; (ac74 <set_arm_clock+0x290>)
    aa96:	str	r6, [r3, #20]
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    aa98:	tst.w	r1, #12288	; 0x3000
    aa9c:	beq.n	aaae <set_arm_clock+0xca>
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    aa9e:	bic.w	r2, r2, #12288	; 0x3000
			CCM_CBCMR = cbcmr;
    aaa2:	ldr	r1, [pc, #464]	; (ac74 <set_arm_clock+0x290>)
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    aaa4:	orrs	r2, r5
			CCM_CBCMR = cbcmr;
    aaa6:	str	r2, [r1, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    aaa8:	ldr	r3, [r1, #72]	; 0x48
    aaaa:	lsls	r2, r3, #28
    aaac:	bmi.n	aaa8 <set_arm_clock+0xc4>
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    aaae:	orr.w	r6, r6, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    aab2:	ldr	r2, [pc, #448]	; (ac74 <set_arm_clock+0x290>)
    aab4:	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    aab6:	ldr	r3, [r2, #72]	; 0x48
    aab8:	lsls	r3, r3, #26
    aaba:	bmi.n	aab6 <set_arm_clock+0xd2>
	while (frequency * div_arm * div_ahb < 648000000) {
    aabc:	ldr	r4, [pc, #468]	; (ac94 <set_arm_clock+0x2b0>)
    aabe:	cmp	r0, r4
    aac0:	bhi.w	ac60 <set_arm_clock+0x27c>
	uint32_t div_ahb = 1;
    aac4:	mov.w	ip, #1
    aac8:	mov	r1, r0
	uint32_t div_arm = 1;
    aaca:	mov	r3, ip
	while (frequency * div_arm * div_ahb < 648000000) {
    aacc:	mla	r2, r3, r1, r1
			div_arm = div_arm + 1;
    aad0:	add.w	lr, r3, #1
				div_ahb = div_ahb + 1;
    aad4:	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    aad8:	cmp	r2, r4
    aada:	bhi.n	ab0e <set_arm_clock+0x12a>
		if (div_arm < 8) {
    aadc:	cmp.w	lr, #8
				div_arm = 1;
    aae0:	mov.w	r3, #1
		if (div_arm < 8) {
    aae4:	bne.w	ac02 <set_arm_clock+0x21e>
			if (div_ahb < 5) {
    aae8:	cmp.w	ip, #4
    aaec:	bhi.w	ac12 <set_arm_clock+0x22e>
	while (frequency * div_arm * div_ahb < 648000000) {
    aaf0:	adds	r2, r1, r0
    aaf2:	cmp	r2, r4
    aaf4:	bhi.w	ac40 <set_arm_clock+0x25c>
    aaf8:	mul.w	r1, r5, r0
				div_ahb = div_ahb + 1;
    aafc:	mov	ip, r5
			div_arm = div_arm + 1;
    aafe:	add.w	lr, r3, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    ab02:	mla	r2, r3, r1, r1
				div_ahb = div_ahb + 1;
    ab06:	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    ab0a:	cmp	r2, r4
    ab0c:	bls.n	aadc <set_arm_clock+0xf8>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    ab0e:	add.w	r1, ip, #4294967295
    ab12:	lsls	r4, r1, #10
    ab14:	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    ab18:	ldr	r0, [pc, #380]	; (ac98 <set_arm_clock+0x2b4>)
    ab1a:	add	r0, r2
	if (mult > 108) mult = 108;
    ab1c:	ldr	r2, [pc, #380]	; (ac9c <set_arm_clock+0x2b8>)
    ab1e:	cmp	r0, r2
    ab20:	bls.n	ac22 <set_arm_clock+0x23e>
    ab22:	ldr.w	sl, [pc, #420]	; acc8 <set_arm_clock+0x2e4>
    ab26:	movs	r2, #108	; 0x6c
    ab28:	ldr	r0, [pc, #372]	; (aca0 <set_arm_clock+0x2bc>)
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    ab2a:	ldr	r5, [pc, #352]	; (ac8c <set_arm_clock+0x2a8>)
	frequency = mult * 12000000 / div_arm / div_ahb;
    ab2c:	udiv	r0, r0, lr
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    ab30:	ldr.w	lr, [r5]
	frequency = mult * 12000000 / div_arm / div_ahb;
    ab34:	udiv	r0, r0, ip
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    ab38:	ldr.w	ip, [pc, #400]	; accc <set_arm_clock+0x2e8>
    ab3c:	and.w	ip, lr, ip
    ab40:	cmp	ip, sl
    ab42:	beq.n	ab58 <set_arm_clock+0x174>
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    ab44:	orr.w	r2, r2, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    ab48:	mov.w	ip, #4096	; 0x1000
    ab4c:	str.w	ip, [r5]
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    ab50:	str	r2, [r5, #0]
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    ab52:	ldr	r2, [r5, #0]
    ab54:	cmp	r2, #0
    ab56:	bge.n	ab52 <set_arm_clock+0x16e>
	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    ab58:	ldr	r2, [pc, #280]	; (ac74 <set_arm_clock+0x290>)
    ab5a:	ldr	r5, [r2, #16]
    ab5c:	and.w	r5, r5, #7
    ab60:	cmp	r5, r3
    ab62:	beq.n	ab6c <set_arm_clock+0x188>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    ab64:	str	r3, [r2, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    ab66:	ldr	r3, [r2, #72]	; 0x48
    ab68:	lsls	r5, r3, #15
    ab6a:	bmi.n	ab66 <set_arm_clock+0x182>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    ab6c:	tst.w	r1, #7168	; 0x1c00
    ab70:	beq.n	ab86 <set_arm_clock+0x1a2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    ab72:	bic.w	r6, r6, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    ab76:	and.w	r4, r4, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
    ab7a:	ldr	r2, [pc, #248]	; (ac74 <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    ab7c:	orrs	r6, r4
		CCM_CBCDR = cbcdr;
    ab7e:	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    ab80:	ldr	r3, [r2, #72]	; 0x48
    ab82:	lsls	r1, r3, #30
    ab84:	bmi.n	ab80 <set_arm_clock+0x19c>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    ab86:	ldr	r1, [pc, #284]	; (aca4 <set_arm_clock+0x2c0>)
	if (div_ipg > 4) div_ipg = 4;
    ab88:	ldr	r2, [pc, #284]	; (aca8 <set_arm_clock+0x2c4>)
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    ab8a:	add	r1, r0
	if (div_ipg > 4) div_ipg = 4;
    ab8c:	cmp	r1, r2
    ab8e:	bhi.n	ac0a <set_arm_clock+0x226>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    ab90:	ldr	r3, [pc, #280]	; (acac <set_arm_clock+0x2c8>)
    ab92:	lsrs	r1, r1, #7
    ab94:	umull	r3, r1, r3, r1
    ab98:	lsrs	r1, r1, #12
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    ab9a:	subs	r3, r1, #1
    ab9c:	lsls	r3, r3, #8
    ab9e:	eor.w	r2, r6, r3
    aba2:	tst.w	r2, #768	; 0x300
    aba6:	beq.n	abb6 <set_arm_clock+0x1d2>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    aba8:	bic.w	r6, r6, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    abac:	and.w	r3, r3, #768	; 0x300
		CCM_CBCDR = cbcdr;
    abb0:	ldr	r2, [pc, #192]	; (ac74 <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    abb2:	orrs	r3, r6
		CCM_CBCDR = cbcdr;
    abb4:	str	r3, [r2, #20]
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    abb6:	ldr	r2, [pc, #188]	; (ac74 <set_arm_clock+0x290>)
    abb8:	ldr	r3, [r2, #20]
    abba:	bic.w	r3, r3, #33554432	; 0x2000000
    abbe:	str	r3, [r2, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    abc0:	ldr	r3, [r2, #72]	; 0x48
    abc2:	lsls	r3, r3, #26
    abc4:	bmi.n	abc0 <set_arm_clock+0x1dc>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    abc6:	ldr	r3, [pc, #232]	; (acb0 <set_arm_clock+0x2cc>)
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    abc8:	cmp	r7, r9
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    abca:	umull	r2, r3, r3, r0
    abce:	mov.w	r2, #4294967295
    abd2:	mov.w	r3, r3, lsr #18
	F_BUS_ACTUAL = frequency / div_ipg;
    abd6:	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    abda:	udiv	r3, r2, r3
	F_CPU_ACTUAL = frequency;
    abde:	ldr	r2, [pc, #212]	; (acb4 <set_arm_clock+0x2d0>)
    abe0:	str	r0, [r2, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
    abe2:	ldr	r2, [pc, #212]	; (acb8 <set_arm_clock+0x2d4>)
    abe4:	str	r1, [r2, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    abe6:	ldr	r2, [pc, #212]	; (acbc <set_arm_clock+0x2d8>)
    abe8:	str	r3, [r2, #0]
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    abea:	bcs.n	abfe <set_arm_clock+0x21a>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    abec:	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    abf0:	ldr	r2, [pc, #132]	; (ac78 <set_arm_clock+0x294>)
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    abf2:	orr.w	r7, r8, r7
		DCDC_REG3 = dcdc;
    abf6:	str	r7, [r2, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    abf8:	ldr	r3, [r2, #0]
    abfa:	cmp	r3, #0
    abfc:	bge.n	abf8 <set_arm_clock+0x214>
	}

	return frequency;
}
    abfe:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ac02:	mov	r3, lr
    ac04:	b.n	aacc <set_arm_clock+0xe8>
    ac06:	movs	r7, #18
    ac08:	b.n	aa3c <set_arm_clock+0x58>
    ac0a:	mov.w	r3, #768	; 0x300
	if (div_ipg > 4) div_ipg = 4;
    ac0e:	movs	r1, #4
    ac10:	b.n	ab9e <set_arm_clock+0x1ba>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    ac12:	add.w	r1, ip, #4294967295
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    ac16:	ldr	r0, [pc, #128]	; (ac98 <set_arm_clock+0x2b4>)
    ac18:	movs	r3, #7
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    ac1a:	lsls	r4, r1, #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    ac1c:	add	r0, r2
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    ac1e:	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    ac22:	ldr	r2, [pc, #156]	; (acc0 <set_arm_clock+0x2dc>)
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    ac24:	ldr.w	sl, [pc, #168]	; acd0 <set_arm_clock+0x2ec>
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    ac28:	umull	r2, r0, r2, r0
    ac2c:	lsrs	r2, r0, #20
	frequency = mult * 12000000 / div_arm / div_ahb;
    ac2e:	ldr	r0, [pc, #148]	; (acc4 <set_arm_clock+0x2e0>)
    ac30:	cmp	r2, #54	; 0x36
    ac32:	it	cc
    ac34:	movcc	r2, #54	; 0x36
    ac36:	mul.w	r0, r2, r0
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    ac3a:	orr.w	sl, r2, sl
    ac3e:	b.n	ab2a <set_arm_clock+0x146>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    ac40:	mov.w	r4, ip, lsl #10
    ac44:	movs	r3, #0
    ac46:	eor.w	r1, r6, ip, lsl #10
				div_arm = 1;
    ac4a:	mov.w	lr, #1
				div_ahb = div_ahb + 1;
    ac4e:	mov	ip, r5
    ac50:	b.n	ab18 <set_arm_clock+0x134>
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    ac52:	mov	r5, r3
    ac54:	eor.w	r4, r6, #402653184	; 0x18000000
    ac58:	mov	r1, r2
    ac5a:	mov.w	r3, #402653184	; 0x18000000
    ac5e:	b.n	aa88 <set_arm_clock+0xa4>
	while (frequency * div_arm * div_ahb < 648000000) {
    ac60:	movs	r4, #0
	uint32_t div_ahb = 1;
    ac62:	mov.w	ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    ac66:	mov	r2, r0
    ac68:	mov	r1, r6
    ac6a:	mov	r3, r4
	uint32_t div_arm = 1;
    ac6c:	mov	lr, ip
    ac6e:	b.n	ab18 <set_arm_clock+0x134>
    ac70:	.word	0x1f78a400
    ac74:	.word	0x400fc000
    ac78:	.word	0x40080000
    ac7c:	.word	0x23c34600
    ac80:	.word	0x004cb223
    ac84:	.word	0x51eb851f
    ac88:	.word	0x016e3600
    ac8c:	.word	0x400d8000
    ac90:	.word	0x80003040
    ac94:	.word	0x269fb1ff
    ac98:	.word	0x005b8d80
    ac9c:	.word	0x4df67eff
    aca0:	.word	0x4d3f6400
    aca4:	.word	0x08f0d17f
    aca8:	.word	0x2cb4177f
    acac:	.word	0x00e5109f
    acb0:	.word	0x431bde83
    acb4:	.word	0x20001450
    acb8:	.word	0x2000144c
    acbc:	.word	0x20007b00
    acc0:	.word	0x165e9f81
    acc4:	.word	0x00b71b00
    acc8:	.word	0x8000206c
    accc:	.word	0x8001307f
    acd0:	.word	0x80002000

0000acd4 <endpoint0_receive>:
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
	while (USB1_ENDPTPRIME) ;
}

static void endpoint0_receive(void *data, uint32_t len, int notify)
{
    acd4:	push	{r4, r5}
	//printf("rx %lu\n", len);
	if (len > 0) {
    acd6:	cmp	r1, #0
    acd8:	bne.n	ad3e <endpoint0_receive+0x6a>
    acda:	ldr	r4, [pc, #172]	; (ad88 <endpoint0_receive+0xb4>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    acdc:	ldr	r3, [pc, #172]	; (ad8c <endpoint0_receive+0xb8>)
    acde:	movs	r1, #1
    ace0:	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    ace2:	cbz	r2, ad1c <endpoint0_receive+0x48>
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    ace4:	ldr	r1, [pc, #168]	; (ad90 <endpoint0_receive+0xbc>)
	endpoint0_transfer_ack.pointer0 = 0;
    ace6:	movs	r2, #0
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    ace8:	movw	r5, #32896	; 0x8080
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    acec:	mov.w	r0, #65537	; 0x10001
	endpoint0_transfer_ack.pointer0 = 0;
    acf0:	str	r2, [r3, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    acf2:	str	r5, [r3, #4]
	endpoint_queue_head[1].status = 0;
    acf4:	strd	r3, r2, [r4, #72]	; 0x48
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    acf8:	str.w	r0, [r1, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    acfc:	mov.w	r2, #65536	; 0x10000
	USB1_ENDPTPRIME |= (1<<16);
    ad00:	ldr.w	r3, [r1, #432]	; 0x1b0
    ad04:	orrs	r3, r2
    ad06:	str.w	r3, [r1, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    ad0a:	ldr	r3, [pc, #136]	; (ad94 <endpoint0_receive+0xc0>)
	while (USB1_ENDPTPRIME) ;
    ad0c:	ldr	r1, [pc, #128]	; (ad90 <endpoint0_receive+0xbc>)
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    ad0e:	str	r2, [r3, #0]
	while (USB1_ENDPTPRIME) ;
    ad10:	ldr.w	r3, [r1, #432]	; 0x1b0
    ad14:	cmp	r3, #0
    ad16:	bne.n	ad10 <endpoint0_receive+0x3c>
}
    ad18:	pop	{r4, r5}
    ad1a:	bx	lr
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    ad1c:	ldr	r1, [pc, #112]	; (ad90 <endpoint0_receive+0xbc>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    ad1e:	movs	r5, #128	; 0x80
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    ad20:	mov.w	r0, #65537	; 0x10001
	endpoint0_transfer_ack.pointer0 = 0;
    ad24:	str	r2, [r3, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    ad26:	str	r5, [r3, #4]
	endpoint_queue_head[1].status = 0;
    ad28:	strd	r3, r2, [r4, #72]	; 0x48
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    ad2c:	str.w	r0, [r1, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    ad30:	ldr.w	r3, [r1, #432]	; 0x1b0
    ad34:	orr.w	r3, r3, #65536	; 0x10000
    ad38:	str.w	r3, [r1, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    ad3c:	b.n	ad0a <endpoint0_receive+0x36>
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    ad3e:	lsls	r1, r1, #16
		endpoint0_transfer_data.next = 1;
    ad40:	ldr	r3, [pc, #84]	; (ad98 <endpoint0_receive+0xc4>)
    ad42:	movs	r4, #1
		endpoint_queue_head[0].status = 0;
    ad44:	movs	r5, #0
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    ad46:	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    ad4a:	str	r0, [r3, #8]
		endpoint0_transfer_data.next = 1;
    ad4c:	str	r4, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    ad4e:	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    ad50:	add.w	r1, r0, #4096	; 0x1000
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    ad54:	ldr	r4, [pc, #48]	; (ad88 <endpoint0_receive+0xb4>)
		endpoint0_transfer_data.pointer1 = addr + 4096;
    ad56:	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    ad58:	add.w	r1, r0, #8192	; 0x2000
		endpoint_queue_head[0].status = 0;
    ad5c:	str	r5, [r4, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    ad5e:	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    ad60:	add.w	r1, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    ad64:	add.w	r0, r0, #16384	; 0x4000
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    ad68:	str	r3, [r4, #8]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    ad6a:	str	r1, [r3, #20]
		USB1_ENDPTPRIME |= (1<<0);
    ad6c:	ldr	r1, [pc, #32]	; (ad90 <endpoint0_receive+0xbc>)
		endpoint0_transfer_data.pointer4 = addr + 16384;
    ad6e:	str	r0, [r3, #24]
		USB1_ENDPTPRIME |= (1<<0);
    ad70:	ldr.w	r3, [r1, #432]	; 0x1b0
    ad74:	orr.w	r3, r3, #1
    ad78:	str.w	r3, [r1, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    ad7c:	ldr.w	r3, [r1, #432]	; 0x1b0
    ad80:	cmp	r3, #0
    ad82:	bne.n	ad7c <endpoint0_receive+0xa8>
    ad84:	b.n	acdc <endpoint0_receive+0x8>
    ad86:	nop
    ad88:	.word	0x20000000
    ad8c:	.word	0x20001ee0
    ad90:	.word	0x402e0000
    ad94:	.word	0x200073ac
    ad98:	.word	0x20001f00

0000ad9c <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    ad9c:	ldr	r3, [r0, #56]	; 0x38
{
    ad9e:	push	{r4, r5, r6, r7}
	if (endpoint->callback_function) {
    ada0:	cbz	r3, adaa <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    ada2:	ldr	r3, [r2, #4]
    ada4:	orr.w	r3, r3, #32768	; 0x8000
    ada8:	str	r3, [r2, #4]
	}
	__disable_irq();
    adaa:	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    adac:	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    adae:	cbz	r4, ae00 <schedule_transfer+0x64>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    adb0:	ldr	r3, [pc, #104]	; (ae1c <schedule_transfer+0x80>)
		last->next = (uint32_t)transfer;
    adb2:	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    adb4:	ldr.w	r4, [r3, #432]	; 0x1b0
    adb8:	tst	r4, r1
    adba:	bne.n	adf8 <schedule_transfer+0x5c>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    adbc:	ldr	r6, [pc, #96]	; (ae20 <schedule_transfer+0x84>)
    adbe:	ldr	r7, [r6, #4]
    adc0:	b.n	adcc <schedule_transfer+0x30>
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    adc2:	ldr	r4, [r6, #4]
    adc4:	subs	r4, r4, r7
    adc6:	cmp.w	r4, #2400	; 0x960
    adca:	bcs.n	ade4 <schedule_transfer+0x48>
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    adcc:	ldr.w	r4, [r3, #320]	; 0x140
    add0:	orr.w	r4, r4, #16384	; 0x4000
    add4:	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    add8:	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    addc:	ldr.w	r4, [r3, #320]	; 0x140
    ade0:	lsls	r4, r4, #17
    ade2:	bpl.n	adc2 <schedule_transfer+0x26>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    ade4:	ands	r5, r1
    ade6:	bne.n	adf8 <schedule_transfer+0x5c>
		//ret |= 0x02;
		endpoint->next = (uint32_t)transfer;
		endpoint->status = 0;
		USB1_ENDPTPRIME |= epmask;
    ade8:	ldr	r4, [pc, #48]	; (ae1c <schedule_transfer+0x80>)
		endpoint->status = 0;
    adea:	strd	r2, r5, [r0, #8]
		USB1_ENDPTPRIME |= epmask;
    adee:	ldr.w	r3, [r4, #432]	; 0x1b0
    adf2:	orrs	r3, r1
    adf4:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
	USB1_ENDPTPRIME |= epmask;
	endpoint->first_transfer = transfer;
end:
	endpoint->last_transfer = transfer;
    adf8:	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    adfa:	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    adfc:	pop	{r4, r5, r6, r7}
    adfe:	bx	lr
	USB1_ENDPTPRIME |= epmask;
    ae00:	ldr	r5, [pc, #24]	; (ae1c <schedule_transfer+0x80>)
	endpoint->status = 0;
    ae02:	strd	r2, r4, [r0, #8]
	USB1_ENDPTPRIME |= epmask;
    ae06:	ldr.w	r3, [r5, #432]	; 0x1b0
    ae0a:	orrs	r3, r1
    ae0c:	str.w	r3, [r5, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    ae10:	str	r2, [r0, #48]	; 0x30
	endpoint->last_transfer = transfer;
    ae12:	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    ae14:	cpsie	i
}
    ae16:	pop	{r4, r5, r6, r7}
    ae18:	bx	lr
    ae1a:	nop
    ae1c:	.word	0x402e0000
    ae20:	.word	0xe0001000

0000ae24 <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    ae24:	push	{r4, r5, r6, lr}
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    ae26:	ldr	r5, [r0, #48]	; 0x30
	if (first == NULL) return;
    ae28:	cbz	r5, ae52 <run_callbacks+0x2e>
    ae2a:	mov	r6, r0
    ae2c:	mov	r2, r5

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
    ae2e:	movs	r4, #0
    ae30:	b.n	ae3a <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
    ae32:	ldr	r2, [r2, #0]
		count++;
    ae34:	adds	r4, #1
		if ((uint32_t)t == 1) {
    ae36:	cmp	r2, #1
    ae38:	beq.n	ae54 <run_callbacks+0x30>
		if (t->status & (1<<7)) {
    ae3a:	ldr	r3, [r2, #4]
    ae3c:	ands.w	r3, r3, #128	; 0x80
    ae40:	beq.n	ae32 <run_callbacks+0xe>
			ep->first_transfer = t;
    ae42:	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    ae44:	cbz	r4, ae52 <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
    ae46:	mov	r0, r5
		ep->callback_function(first);
    ae48:	ldr	r3, [r6, #56]	; 0x38
		transfer_t *next = (transfer_t *)first->next;
    ae4a:	ldr	r5, [r5, #0]
		ep->callback_function(first);
    ae4c:	blx	r3
	while (count) {
    ae4e:	subs	r4, #1
    ae50:	bne.n	ae46 <run_callbacks+0x22>
		first = next;
		count--;
	}
}
    ae52:	pop	{r4, r5, r6, pc}
			ep->last_transfer = NULL;
    ae54:	strd	r3, r3, [r6, #48]	; 0x30
			break;
    ae58:	b.n	ae44 <run_callbacks+0x20>
    ae5a:	nop

0000ae5c <endpoint0_transmit.constprop.0>:
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    ae5c:	push	{r4, r5}
	if (len > 0) {
    ae5e:	cbnz	r1, ae98 <endpoint0_transmit.constprop.0+0x3c>
    ae60:	ldr	r4, [pc, #124]	; (aee0 <endpoint0_transmit.constprop.0+0x84>)
	endpoint0_transfer_ack.next = 1;
    ae62:	ldr	r3, [pc, #128]	; (aee4 <endpoint0_transmit.constprop.0+0x88>)
	endpoint0_transfer_ack.pointer0 = 0;
    ae64:	movs	r1, #0
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    ae66:	ldr	r2, [pc, #128]	; (aee8 <endpoint0_transmit.constprop.0+0x8c>)
	endpoint0_transfer_ack.next = 1;
    ae68:	movs	r5, #1
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    ae6a:	mov.w	r0, #65537	; 0x10001
	endpoint0_transfer_ack.pointer0 = 0;
    ae6e:	str	r1, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    ae70:	str	r5, [r3, #0]
	endpoint_queue_head[0].status = 0;
    ae72:	strd	r3, r1, [r4, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    ae76:	movs	r4, #128	; 0x80
    ae78:	str	r4, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    ae7a:	str.w	r0, [r2, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    ae7e:	ldr.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    ae82:	ldr	r0, [pc, #104]	; (aeec <endpoint0_transmit.constprop.0+0x90>)
	USB1_ENDPTPRIME |= (1<<0);
    ae84:	orrs	r3, r5
    ae86:	str.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    ae8a:	str	r1, [r0, #0]
	while (USB1_ENDPTPRIME) ;
    ae8c:	ldr.w	r3, [r2, #432]	; 0x1b0
    ae90:	cmp	r3, #0
    ae92:	bne.n	ae8c <endpoint0_transmit.constprop.0+0x30>
}
    ae94:	pop	{r4, r5}
    ae96:	bx	lr
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    ae98:	lsls	r1, r1, #16
		endpoint0_transfer_data.next = 1;
    ae9a:	ldr	r3, [pc, #84]	; (aef0 <endpoint0_transmit.constprop.0+0x94>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    ae9c:	ldr	r4, [pc, #64]	; (aee0 <endpoint0_transmit.constprop.0+0x84>)
		endpoint0_transfer_data.next = 1;
    ae9e:	movs	r5, #1
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    aea0:	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    aea4:	str	r0, [r3, #8]
		USB1_ENDPTPRIME |= (1<<16);
    aea6:	ldr	r2, [pc, #64]	; (aee8 <endpoint0_transmit.constprop.0+0x8c>)
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    aea8:	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    aeaa:	add.w	r1, r0, #4096	; 0x1000
		endpoint0_transfer_data.next = 1;
    aeae:	str	r5, [r3, #0]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    aeb0:	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    aeb2:	add.w	r1, r0, #8192	; 0x2000
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    aeb6:	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.pointer2 = addr + 8192;
    aeb8:	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    aeba:	add.w	r1, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    aebe:	add.w	r0, r0, #16384	; 0x4000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    aec2:	str	r1, [r3, #20]
		endpoint_queue_head[1].status = 0;
    aec4:	movs	r1, #0
		endpoint0_transfer_data.pointer4 = addr + 16384;
    aec6:	str	r0, [r3, #24]
		endpoint_queue_head[1].status = 0;
    aec8:	str	r1, [r4, #76]	; 0x4c
		USB1_ENDPTPRIME |= (1<<16);
    aeca:	ldr.w	r3, [r2, #432]	; 0x1b0
    aece:	orr.w	r3, r3, #65536	; 0x10000
    aed2:	str.w	r3, [r2, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    aed6:	ldr.w	r3, [r2, #432]	; 0x1b0
    aeda:	cmp	r3, #0
    aedc:	bne.n	aed6 <endpoint0_transmit.constprop.0+0x7a>
    aede:	b.n	ae62 <endpoint0_transmit.constprop.0+0x6>
    aee0:	.word	0x20000000
    aee4:	.word	0x20001ee0
    aee8:	.word	0x402e0000
    aeec:	.word	0x200073ac
    aef0:	.word	0x20001f00

0000aef4 <usb_stop_sof_interrupts>:
	sof_usage &= ~(1 << interface);
    aef4:	ldr	r1, [pc, #32]	; (af18 <usb_stop_sof_interrupts+0x24>)
    aef6:	movs	r2, #1
    aef8:	ldrb	r3, [r1, #0]
    aefa:	lsl.w	r0, r2, r0
    aefe:	bic.w	r0, r3, r0
    af02:	strb	r0, [r1, #0]
	if (sof_usage == 0) {
    af04:	cbnz	r0, af14 <usb_stop_sof_interrupts+0x20>
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    af06:	ldr	r2, [pc, #20]	; (af1c <usb_stop_sof_interrupts+0x28>)
    af08:	ldr.w	r3, [r2, #328]	; 0x148
    af0c:	bic.w	r3, r3, #128	; 0x80
    af10:	str.w	r3, [r2, #328]	; 0x148
}
    af14:	bx	lr
    af16:	nop
    af18:	.word	0x20007b84
    af1c:	.word	0x402e0000

0000af20 <usb_isr>:
{
    af20:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t status = USB1_USBSTS;
    af24:	ldr	r4, [pc, #672]	; (b1c8 <usb_isr+0x2a8>)
{
    af26:	sub	sp, #28
	uint32_t status = USB1_USBSTS;
    af28:	ldr.w	r6, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    af2c:	lsls	r1, r6, #31
	USB1_USBSTS = status;
    af2e:	str.w	r6, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    af32:	bpl.w	b06e <usb_isr+0x14e>
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    af36:	ldr.w	r3, [r4, #428]	; 0x1ac
		while (setupstatus) {
    af3a:	cmp	r3, #0
    af3c:	beq.n	b006 <usb_isr+0xe6>
    af3e:	ldr	r5, [pc, #652]	; (b1cc <usb_isr+0x2ac>)
    af40:	ldr.w	r9, [pc, #656]	; b1d4 <usb_isr+0x2b4>
		usb_configuration = setup.wValue;
    af44:	ldr.w	fp, [pc, #684]	; b1f4 <usb_isr+0x2d4>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    af48:	ldr.w	r8, [pc, #684]	; b1f8 <usb_isr+0x2d8>
			USB1_ENDPTSETUPSTAT = setupstatus;
    af4c:	str.w	r3, [r4, #428]	; 0x1ac
				s.word2 = endpoint_queue_head[0].setup1;
    af50:	ldrd	r7, r0, [r5, #40]	; 0x28
				USB1_USBCMD |= USB_USBCMD_SUTW;
    af54:	ldr.w	r3, [r4, #320]	; 0x140
    af58:	orr.w	r3, r3, #8192	; 0x2000
    af5c:	str.w	r3, [r4, #320]	; 0x140
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    af60:	ldr.w	r3, [r4, #320]	; 0x140
    af64:	lsls	r3, r3, #18
    af66:	bpl.n	af54 <usb_isr+0x34>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    af68:	ldr.w	r3, [r4, #320]	; 0x140
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    af6c:	mov.w	r2, #65537	; 0x10001
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    af70:	bic.w	r3, r3, #8192	; 0x2000
    af74:	str.w	r3, [r4, #320]	; 0x140
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    af78:	str.w	r2, [r4, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    af7c:	ldr.w	r3, [r4, #436]	; 0x1b4
    af80:	ands.w	r3, r3, #65537	; 0x10001
    af84:	bne.n	af7c <usb_isr+0x5c>
			endpoint0_notify_mask = 0;
    af86:	uxth	r2, r7
    af88:	str.w	r3, [r9]
	switch (setup.wRequestAndType) {
    af8c:	cmp.w	r2, #2304	; 0x900
	setup.bothwords = setupdata;
    af90:	strd	r7, r0, [sp, #16]
	switch (setup.wRequestAndType) {
    af94:	beq.w	b2fc <usb_isr+0x3dc>
    af98:	bhi.w	b122 <usb_isr+0x202>
    af9c:	movw	r1, #770	; 0x302
    afa0:	cmp	r2, r1
    afa2:	beq.w	b3f2 <usb_isr+0x4d2>
    afa6:	bls.w	b164 <usb_isr+0x244>
    afaa:	movw	r1, #1665	; 0x681
    afae:	cmp	r2, r1
    afb0:	bhi.w	b10c <usb_isr+0x1ec>
    afb4:	cmp.w	r2, #1664	; 0x680
    afb8:	bcs.w	b366 <usb_isr+0x446>
    afbc:	cmp.w	r2, #1280	; 0x500
    afc0:	bne.w	b100 <usb_isr+0x1e0>
	endpoint0_transfer_ack.next = 1;
    afc4:	ldr	r2, [pc, #520]	; (b1d0 <usb_isr+0x2b0>)
	endpoint_queue_head[1].status = 0;
    afc6:	str	r3, [r5, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    afc8:	str	r3, [r2, #8]
	endpoint0_transfer_ack.next = 1;
    afca:	movs	r3, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    afcc:	str	r2, [r5, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    afce:	str	r3, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    afd0:	movs	r3, #128	; 0x80
    afd2:	str	r3, [r2, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    afd4:	mov.w	r3, #65537	; 0x10001
    afd8:	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    afdc:	ldr.w	r3, [r4, #432]	; 0x1b0
    afe0:	orr.w	r3, r3, #65536	; 0x10000
    afe4:	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    afe8:	ldr.w	r3, [r4, #432]	; 0x1b0
    afec:	cmp	r3, #0
    afee:	bne.n	afe8 <usb_isr+0xc8>
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    aff0:	ldrh.w	r3, [sp, #18]
    aff4:	lsls	r3, r3, #25
    aff6:	orr.w	r3, r3, #16777216	; 0x1000000
    affa:	str.w	r3, [r4, #340]	; 0x154
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    affe:	ldr.w	r3, [r4, #428]	; 0x1ac
		while (setupstatus) {
    b002:	cmp	r3, #0
    b004:	bne.n	af4c <usb_isr+0x2c>
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    b006:	ldr	r3, [pc, #448]	; (b1c8 <usb_isr+0x2a8>)
    b008:	ldr.w	r4, [r3, #444]	; 0x1bc
		if (completestatus) {
    b00c:	cbz	r4, b06e <usb_isr+0x14e>
			if (completestatus & endpoint0_notify_mask) {
    b00e:	ldr	r2, [pc, #452]	; (b1d4 <usb_isr+0x2b4>)
			USB1_ENDPTCOMPLETE = completestatus;
    b010:	str.w	r4, [r3, #444]	; 0x1bc
			if (completestatus & endpoint0_notify_mask) {
    b014:	ldr	r1, [r2, #0]
    b016:	tst	r4, r1
    b018:	bne.w	b52c <usb_isr+0x60c>
			completestatus &= endpointN_notify_mask;
    b01c:	ldr	r3, [pc, #440]	; (b1d8 <usb_isr+0x2b8>)
    b01e:	ldr	r3, [r3, #0]
			if (completestatus) {
    b020:	ands	r4, r3
    b022:	beq.n	b06e <usb_isr+0x14e>
				while (tx) {
    b024:	movs.w	r8, r4, lsr #16
    b028:	beq.n	b04c <usb_isr+0x12c>
    b02a:	ldr	r5, [pc, #416]	; (b1cc <usb_isr+0x2ac>)
					tx &= ~(1<<p);
    b02c:	mov.w	r9, #1
					int p=__builtin_ctz(tx);
    b030:	rbit	r7, r8
    b034:	clz	r7, r7
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    b038:	add.w	r0, r5, r7, lsl #7
					tx &= ~(1<<p);
    b03c:	lsl.w	r7, r9, r7
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    b040:	adds	r0, #64	; 0x40
    b042:	bl	ae24 <run_callbacks>
				while (tx) {
    b046:	bics.w	r8, r8, r7
    b04a:	bne.n	b030 <usb_isr+0x110>
				uint32_t rx = completestatus & 0xffff;
    b04c:	uxth	r4, r4
				while(rx) {
    b04e:	cbz	r4, b06e <usb_isr+0x14e>
    b050:	ldr	r5, [pc, #376]	; (b1cc <usb_isr+0x2ac>)
					rx &= ~(1<<p);
    b052:	mov.w	r8, #1
					int p=__builtin_ctz(rx);
    b056:	rbit	r7, r4
    b05a:	clz	r7, r7
					run_callbacks(endpoint_queue_head + p * 2);
    b05e:	add.w	r0, r5, r7, lsl #7
					rx &= ~(1<<p);
    b062:	lsl.w	r7, r8, r7
					run_callbacks(endpoint_queue_head + p * 2);
    b066:	bl	ae24 <run_callbacks>
				while(rx) {
    b06a:	bics	r4, r7
    b06c:	bne.n	b056 <usb_isr+0x136>
	if (status & USB_USBSTS_URI) { // page 3164
    b06e:	lsls	r2, r6, #25
    b070:	bpl.n	b0a0 <usb_isr+0x180>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    b072:	ldr	r3, [pc, #340]	; (b1c8 <usb_isr+0x2a8>)
    b074:	ldr.w	r2, [r3, #428]	; 0x1ac
    b078:	str.w	r2, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    b07c:	ldr.w	r2, [r3, #444]	; 0x1bc
    b080:	str.w	r2, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    b084:	ldr.w	r4, [r3, #432]	; 0x1b0
    b088:	cmp	r4, #0
    b08a:	bne.n	b084 <usb_isr+0x164>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    b08c:	mov.w	r2, #4294967295
    b090:	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    b094:	ldr.w	r3, [r3, #388]	; 0x184
		usb_serial_reset();
    b098:	bl	a600 <usb_serial_reset>
		endpointN_notify_mask = 0;
    b09c:	ldr	r3, [pc, #312]	; (b1d8 <usb_isr+0x2b8>)
    b09e:	str	r4, [r3, #0]
	if (status & USB_USBSTS_TI0) {
    b0a0:	lsls	r4, r6, #7
    b0a2:	bpl.n	b0ac <usb_isr+0x18c>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    b0a4:	ldr	r3, [pc, #308]	; (b1dc <usb_isr+0x2bc>)
    b0a6:	ldr	r3, [r3, #0]
    b0a8:	cbz	r3, b0ac <usb_isr+0x18c>
    b0aa:	blx	r3
	if (status & USB_USBSTS_TI1) {
    b0ac:	lsls	r0, r6, #6
    b0ae:	bpl.n	b0b8 <usb_isr+0x198>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    b0b0:	ldr	r3, [pc, #300]	; (b1e0 <usb_isr+0x2c0>)
    b0b2:	ldr	r3, [r3, #0]
    b0b4:	cbz	r3, b0b8 <usb_isr+0x198>
    b0b6:	blx	r3
	if (status & USB_USBSTS_PCI) {
    b0b8:	lsls	r1, r6, #29
    b0ba:	bpl.n	b0d0 <usb_isr+0x1b0>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    b0bc:	ldr	r3, [pc, #264]	; (b1c8 <usb_isr+0x2a8>)
    b0be:	ldr.w	r3, [r3, #388]	; 0x184
    b0c2:	ands.w	r3, r3, #512	; 0x200
    b0c6:	beq.w	b2ea <usb_isr+0x3ca>
			usb_high_speed = 1;
    b0ca:	ldr	r3, [pc, #280]	; (b1e4 <usb_isr+0x2c4>)
    b0cc:	movs	r2, #1
    b0ce:	strb	r2, [r3, #0]
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    b0d0:	ldr	r3, [pc, #244]	; (b1c8 <usb_isr+0x2a8>)
    b0d2:	ldr.w	r3, [r3, #328]	; 0x148
    b0d6:	lsls	r2, r3, #24
    b0d8:	bpl.n	b0fa <usb_isr+0x1da>
    b0da:	lsls	r3, r6, #24
    b0dc:	bpl.n	b0fa <usb_isr+0x1da>
		if (usb_reboot_timer) {
    b0de:	ldr	r2, [pc, #264]	; (b1e8 <usb_isr+0x2c8>)
    b0e0:	ldrb	r3, [r2, #0]
    b0e2:	cbz	r3, b0f0 <usb_isr+0x1d0>
			if (--usb_reboot_timer == 0) {
    b0e4:	subs	r3, #1
    b0e6:	uxtb	r3, r3
    b0e8:	strb	r3, [r2, #0]
    b0ea:	cmp	r3, #0
    b0ec:	beq.w	b622 <usb_isr+0x702>
}
    b0f0:	add	sp, #28
    b0f2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		usb_midi_flush_output();
    b0f6:	b.w	c084 <usb_midi_flush_output>
}
    b0fa:	add	sp, #28
    b0fc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (setup.wRequestAndType) {
    b100:	bls.n	b1fc <usb_isr+0x2dc>
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    b102:	mov.w	r3, #65537	; 0x10001
    b106:	str.w	r3, [r4, #448]	; 0x1c0
    b10a:	b.n	affe <usb_isr+0xde>
	switch (setup.wRequestAndType) {
    b10c:	cmp.w	r2, #2176	; 0x880
    b110:	bne.n	b102 <usb_isr+0x1e2>
		reply_buffer[0] = usb_configuration;
    b112:	ldr	r0, [pc, #216]	; (b1ec <usb_isr+0x2cc>)
		endpoint0_transmit(reply_buffer, 1, 0);
    b114:	movs	r1, #1
		reply_buffer[0] = usb_configuration;
    b116:	ldrb.w	r3, [fp]
    b11a:	strb	r3, [r0, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    b11c:	bl	ae5c <endpoint0_transmit.constprop.0>
		return;
    b120:	b.n	affe <usb_isr+0xde>
	switch (setup.wRequestAndType) {
    b122:	movw	r1, #8737	; 0x2221
    b126:	cmp	r2, r1
    b128:	beq.w	b4d2 <usb_isr+0x5b2>
    b12c:	bls.w	b262 <usb_isr+0x342>
    b130:	movw	r1, #33186	; 0x81a2
    b134:	cmp	r2, r1
    b136:	beq.w	b4b8 <usb_isr+0x598>
    b13a:	bls.n	b22a <usb_isr+0x30a>
    b13c:	movw	r3, #33953	; 0x84a1
    b140:	cmp	r2, r3
    b142:	bne.w	b2b2 <usb_isr+0x392>
		if (setup.wLength <= sizeof(endpoint0_buffer)) {
    b146:	cmp.w	r0, #589824	; 0x90000
    b14a:	bcs.n	b102 <usb_isr+0x1e2>
			if (usb_audio_get_feature(&setup, endpoint0_buffer, &len)) {
    b14c:	add	r2, sp, #12
    b14e:	ldr	r1, [pc, #160]	; (b1f0 <usb_isr+0x2d0>)
    b150:	add	r0, sp, #16
    b152:	bl	d008 <usb_audio_get_feature>
    b156:	cmp	r0, #0
    b158:	beq.n	b102 <usb_isr+0x1e2>
				endpoint0_transmit(endpoint0_buffer, len, 0);
    b15a:	ldr	r1, [sp, #12]
    b15c:	ldr	r0, [pc, #144]	; (b1f0 <usb_isr+0x2d0>)
    b15e:	bl	ae5c <endpoint0_transmit.constprop.0>
				return;
    b162:	b.n	affe <usb_isr+0xde>
	switch (setup.wRequestAndType) {
    b164:	cmp	r2, #130	; 0x82
    b166:	beq.w	b48c <usb_isr+0x56c>
    b16a:	bls.w	b2d8 <usb_isr+0x3b8>
    b16e:	cmp.w	r2, #258	; 0x102
    b172:	bne.w	b2c2 <usb_isr+0x3a2>
		if (endpoint > 7) break;
    b176:	tst.w	r0, #120	; 0x78
    b17a:	uxth	r3, r0
    b17c:	bne.n	b102 <usb_isr+0x1e2>
		endpoint = setup.wIndex & 0x7F;
    b17e:	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    b182:	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    b186:	ldr.w	r3, [r8, r2, lsl #2]
    b18a:	ite	ne
    b18c:	bicne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    b190:	biceq.w	r3, r3, #1
    b194:	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    b198:	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    b19a:	ldr	r3, [pc, #52]	; (b1d0 <usb_isr+0x2b0>)
	endpoint_queue_head[1].status = 0;
    b19c:	str	r2, [r5, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    b19e:	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    b1a0:	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    b1a2:	str	r3, [r5, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    b1a4:	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    b1a6:	movs	r2, #128	; 0x80
    b1a8:	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    b1aa:	mov.w	r3, #65537	; 0x10001
    b1ae:	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    b1b2:	ldr.w	r3, [r4, #432]	; 0x1b0
    b1b6:	orr.w	r3, r3, #65536	; 0x10000
    b1ba:	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    b1be:	ldr.w	r3, [r4, #432]	; 0x1b0
    b1c2:	cmp	r3, #0
    b1c4:	bne.n	b1be <usb_isr+0x29e>
    b1c6:	b.n	affe <usb_isr+0xde>
    b1c8:	.word	0x402e0000
    b1cc:	.word	0x20000000
    b1d0:	.word	0x20001ee0
    b1d4:	.word	0x200073ac
    b1d8:	.word	0x200073b0
    b1dc:	.word	0x20007b48
    b1e0:	.word	0x20007b4c
    b1e4:	.word	0x20007b91
    b1e8:	.word	0x20007b92
    b1ec:	.word	0x20007a94
    b1f0:	.word	0x200073a4
    b1f4:	.word	0x20007b90
    b1f8:	.word	0x402e01c0
	switch (setup.wRequestAndType) {
    b1fc:	movw	r3, #801	; 0x321
    b200:	cmp	r2, r3
    b202:	beq.n	b20e <usb_isr+0x2ee>
    b204:	movw	r3, #1057	; 0x421
    b208:	cmp	r2, r3
    b20a:	bne.w	b102 <usb_isr+0x1e2>
		if (setup.wLength <= sizeof(endpoint0_buffer)) {
    b20e:	cmp.w	r0, #589824	; 0x90000
    b212:	mov.w	r1, r0, lsr #16
    b216:	bcs.w	b102 <usb_isr+0x1e2>
			endpoint0_setupdata.bothwords = setupdata;
    b21a:	ldr	r3, [pc, #724]	; (b4f0 <usb_isr+0x5d0>)
			endpoint0_receive(endpoint0_buffer, setup.wLength, 1);
    b21c:	movs	r2, #1
			endpoint0_setupdata.bothwords = setupdata;
    b21e:	strd	r7, r0, [r3]
			endpoint0_receive(endpoint0_buffer, setup.wLength, 1);
    b222:	ldr	r0, [pc, #720]	; (b4f4 <usb_isr+0x5d4>)
    b224:	bl	acd4 <endpoint0_receive>
			return; // handle these after ACK
    b228:	b.n	affe <usb_isr+0xde>
	switch (setup.wRequestAndType) {
    b22a:	movw	r3, #8993	; 0x2321
    b22e:	cmp	r2, r3
    b230:	bne.n	b27e <usb_isr+0x35e>
	endpoint0_transfer_ack.next = 1;
    b232:	ldr	r3, [pc, #708]	; (b4f8 <usb_isr+0x5d8>)
	endpoint0_transfer_ack.pointer0 = 0;
    b234:	movs	r2, #0
    b236:	str	r2, [r3, #8]
	endpoint_queue_head[1].status = 0;
    b238:	str	r2, [r5, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
    b23a:	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    b23c:	str	r3, [r5, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    b23e:	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    b240:	movs	r2, #128	; 0x80
    b242:	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    b244:	mov.w	r3, #65537	; 0x10001
    b248:	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    b24c:	ldr.w	r3, [r4, #432]	; 0x1b0
    b250:	orr.w	r3, r3, #65536	; 0x10000
    b254:	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    b258:	ldr.w	r3, [r4, #432]	; 0x1b0
    b25c:	cmp	r3, #0
    b25e:	bne.n	b258 <usb_isr+0x338>
    b260:	b.n	affe <usb_isr+0xde>
	switch (setup.wRequestAndType) {
    b262:	movw	r1, #2817	; 0xb01
    b266:	cmp	r2, r1
    b268:	beq.w	b446 <usb_isr+0x526>
    b26c:	movw	r3, #8225	; 0x2021
    b270:	cmp	r2, r3
    b272:	bne.n	b28a <usb_isr+0x36a>
		if (setup.wLength != 7) break;
    b274:	lsrs	r1, r0, #16
    b276:	cmp	r1, #7
    b278:	bne.w	b102 <usb_isr+0x1e2>
    b27c:	b.n	b21a <usb_isr+0x2fa>
	switch (setup.wRequestAndType) {
    b27e:	movw	r3, #33185	; 0x81a1
    b282:	cmp	r2, r3
    b284:	beq.w	b146 <usb_isr+0x226>
    b288:	b.n	b102 <usb_isr+0x1e2>
    b28a:	movw	r3, #2689	; 0xa81
    b28e:	cmp	r2, r3
    b290:	bne.w	b102 <usb_isr+0x1e2>
		if (setup.wIndex == AUDIO_INTERFACE+1) {
    b294:	uxth	r0, r0
    b296:	cmp	r0, #4
    b298:	beq.w	b610 <usb_isr+0x6f0>
		} else if (setup.wIndex == AUDIO_INTERFACE+2) {
    b29c:	cmp	r0, #5
    b29e:	bne.w	b102 <usb_isr+0x1e2>
			endpoint0_buffer[0] = usb_audio_receive_setting;
    b2a2:	ldr	r3, [pc, #600]	; (b4fc <usb_isr+0x5dc>)
    b2a4:	ldrb	r3, [r3, #0]
			endpoint0_transmit(endpoint0_buffer, 1, 0);
    b2a6:	movs	r1, #1
			endpoint0_buffer[0] = usb_audio_receive_setting;
    b2a8:	ldr	r0, [pc, #584]	; (b4f4 <usb_isr+0x5d4>)
    b2aa:	strb	r3, [r0, #0]
			endpoint0_transmit(endpoint0_buffer, 1, 0);
    b2ac:	bl	ae5c <endpoint0_transmit.constprop.0>
			return;
    b2b0:	b.n	affe <usb_isr+0xde>
	switch (setup.wRequestAndType) {
    b2b2:	bic.w	r2, r2, #256	; 0x100
    b2b6:	movw	r3, #33441	; 0x82a1
    b2ba:	cmp	r2, r3
    b2bc:	beq.w	b146 <usb_isr+0x226>
    b2c0:	b.n	b102 <usb_isr+0x1e2>
    b2c2:	bcc.w	b102 <usb_isr+0x1e2>
    b2c6:	movw	r3, #289	; 0x121
    b2ca:	cmp	r2, r3
    b2cc:	beq.n	b20e <usb_isr+0x2ee>
    b2ce:	movw	r3, #545	; 0x221
    b2d2:	cmp	r2, r3
    b2d4:	beq.n	b20e <usb_isr+0x2ee>
    b2d6:	b.n	b102 <usb_isr+0x1e2>
    b2d8:	cmp	r2, #128	; 0x80
    b2da:	bne.w	b102 <usb_isr+0x1e2>
		reply_buffer[0] = 0;
    b2de:	ldr	r0, [pc, #544]	; (b500 <usb_isr+0x5e0>)
		endpoint0_transmit(reply_buffer, 2, 0);
    b2e0:	movs	r1, #2
		reply_buffer[0] = 0;
    b2e2:	strh	r3, [r0, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    b2e4:	bl	ae5c <endpoint0_transmit.constprop.0>
		return;
    b2e8:	b.n	affe <usb_isr+0xde>
			usb_high_speed = 0;
    b2ea:	ldr	r2, [pc, #536]	; (b504 <usb_isr+0x5e4>)
    b2ec:	strb	r3, [r2, #0]
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    b2ee:	ldr	r3, [pc, #536]	; (b508 <usb_isr+0x5e8>)
    b2f0:	ldr.w	r3, [r3, #328]	; 0x148
    b2f4:	lsls	r2, r3, #24
    b2f6:	bpl.w	b0fa <usb_isr+0x1da>
    b2fa:	b.n	b0da <usb_isr+0x1ba>
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    b2fc:	ldr	r1, [pc, #524]	; (b50c <usb_isr+0x5ec>)
		usb_configuration = setup.wValue;
    b2fe:	ubfx	ip, r7, #16, #8
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    b302:	mov.w	r2, #13107400	; 0xc800c8
    b306:	str	r3, [sp, #4]
		usb_configuration = setup.wValue;
    b308:	strb.w	ip, [fp]
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    b30c:	str.w	r1, [r4, #456]	; 0x1c8
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    b310:	str.w	r2, [r4, #460]	; 0x1cc
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    b314:	str.w	r2, [r4, #464]	; 0x1d0
		USB1_ENDPTCTRL5 = ENDPOINT5_CONFIG;
    b318:	mov.w	r2, #12845252	; 0xc400c4
    b31c:	str.w	r2, [r4, #468]	; 0x1d4
		USB1_ENDPTCTRL6 = ENDPOINT6_CONFIG;
    b320:	subs	r2, #194	; 0xc2
    b322:	str.w	r2, [r4, #472]	; 0x1d8
		usb_serial_configure();
    b326:	bl	a604 <usb_serial_configure>
		usb_midi_configure();
    b32a:	bl	bfc0 <usb_midi_configure>
		usb_audio_configure();
    b32e:	bl	cf20 <usb_audio_configure>
	endpoint0_transfer_ack.next = 1;
    b332:	ldr	r2, [pc, #452]	; (b4f8 <usb_isr+0x5d8>)
    b334:	movs	r1, #1
	endpoint_queue_head[1].status = 0;
    b336:	ldr	r3, [sp, #4]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    b338:	str	r2, [r5, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    b33a:	str	r1, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    b33c:	movs	r1, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
    b33e:	str	r3, [r2, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    b340:	str	r1, [r2, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    b342:	mov.w	r2, #65537	; 0x10001
	endpoint_queue_head[1].status = 0;
    b346:	str	r3, [r5, #76]	; 0x4c
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    b348:	str.w	r2, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    b34c:	ldr.w	r2, [r4, #432]	; 0x1b0
    b350:	orr.w	r2, r2, #65536	; 0x10000
    b354:	str.w	r2, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    b358:	str.w	r3, [r9]
	while (USB1_ENDPTPRIME) ;
    b35c:	ldr.w	r3, [r4, #432]	; 0x1b0
    b360:	cmp	r3, #0
    b362:	bne.n	b35c <usb_isr+0x43c>
    b364:	b.n	affe <usb_isr+0xde>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    b366:	ldr	r3, [pc, #424]	; (b510 <usb_isr+0x5f0>)
    b368:	ldr	r1, [r3, #4]
    b36a:	cmp	r1, #0
    b36c:	beq.w	b102 <usb_isr+0x1e2>
    b370:	mov.w	ip, r7, lsr #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    b374:	uxth.w	lr, r0
    b378:	b.n	b384 <usb_isr+0x464>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    b37a:	ldr	r1, [r3, #16]
    b37c:	adds	r3, #12
    b37e:	cmp	r1, #0
    b380:	beq.w	b102 <usb_isr+0x1e2>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    b384:	ldrh	r2, [r3, #0]
    b386:	cmp	r2, ip
    b388:	bne.n	b37a <usb_isr+0x45a>
    b38a:	ldrh	r2, [r3, #2]
    b38c:	cmp	r2, lr
    b38e:	bne.n	b37a <usb_isr+0x45a>
				if ((setup.wValue >> 8) == 3) {
    b390:	mov.w	r2, ip, lsr #8
    b394:	cmp	r2, #3
    b396:	beq.w	b55e <usb_isr+0x63e>
					datalen = list->length;
    b39a:	ldrh	r2, [r3, #8]
				if (datalen > setup.wLength) datalen = setup.wLength;
    b39c:	lsrs	r0, r0, #16
    b39e:	cmp	r2, r0
    b3a0:	it	cs
    b3a2:	movcs	r2, r0
				if (setup.wValue == 0x200) {
    b3a4:	cmp.w	ip, #512	; 0x200
    b3a8:	mov	r7, r2
    b3aa:	bne.w	b56a <usb_isr+0x64a>
					if (usb_high_speed) src = usb_config_descriptor_480;
    b3ae:	ldr	r3, [pc, #340]	; (b504 <usb_isr+0x5e4>)
    b3b0:	ldr	r1, [pc, #352]	; (b514 <usb_isr+0x5f4>)
    b3b2:	ldrb	r0, [r3, #0]
    b3b4:	ldr	r3, [pc, #352]	; (b518 <usb_isr+0x5f8>)
					memcpy(usb_descriptor_buffer, src, datalen);
    b3b6:	ldr.w	sl, [pc, #356]	; b51c <usb_isr+0x5fc>
    b3ba:	cmp	r0, #0
    b3bc:	it	ne
    b3be:	movne	r1, r3
    b3c0:	ldr	r0, [pc, #344]	; (b51c <usb_isr+0x5fc>)
    b3c2:	bl	a170 <memcpy>
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    b3c6:	bic.w	r3, sl, #31
	uint32_t end_addr = (uint32_t)addr + size;
    b3ca:	add.w	r1, sl, r7
	asm("dsb");
    b3ce:	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    b3d2:	mov.w	r0, #3758153728	; 0xe000e000
    b3d6:	str.w	r3, [r0, #3952]	; 0xf70
		location += 32;
    b3da:	adds	r3, #32
	} while (location < end_addr);
    b3dc:	cmp	r1, r3
    b3de:	bhi.n	b3d6 <usb_isr+0x4b6>
	asm("dsb");
    b3e0:	dsb	sy
	asm("isb");
    b3e4:	isb	sy
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    b3e8:	ldr	r0, [pc, #304]	; (b51c <usb_isr+0x5fc>)
    b3ea:	mov	r1, r7
    b3ec:	bl	ae5c <endpoint0_transmit.constprop.0>
				return;
    b3f0:	b.n	affe <usb_isr+0xde>
		if (endpoint > 7) break;
    b3f2:	tst.w	r0, #120	; 0x78
    b3f6:	uxth	r3, r0
    b3f8:	bne.w	b102 <usb_isr+0x1e2>
		endpoint = setup.wIndex & 0x7F;
    b3fc:	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    b400:	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    b404:	ldr.w	r3, [r8, r2, lsl #2]
    b408:	ite	ne
    b40a:	orrne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    b40e:	orreq.w	r3, r3, #1
    b412:	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    b416:	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    b418:	ldr	r3, [pc, #220]	; (b4f8 <usb_isr+0x5d8>)
	endpoint_queue_head[1].status = 0;
    b41a:	str	r2, [r5, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    b41c:	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    b41e:	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    b420:	str	r3, [r5, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    b422:	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    b424:	movs	r2, #128	; 0x80
    b426:	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    b428:	mov.w	r3, #65537	; 0x10001
    b42c:	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    b430:	ldr.w	r3, [r4, #432]	; 0x1b0
    b434:	orr.w	r3, r3, #65536	; 0x10000
    b438:	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    b43c:	ldr.w	r3, [r4, #432]	; 0x1b0
    b440:	cmp	r3, #0
    b442:	bne.n	b43c <usb_isr+0x51c>
    b444:	b.n	affe <usb_isr+0xde>
		if (setup.wIndex == AUDIO_INTERFACE+1) {
    b446:	uxth	r0, r0
    b448:	cmp	r0, #4
    b44a:	beq.w	b5d8 <usb_isr+0x6b8>
		} else if (setup.wIndex == AUDIO_INTERFACE+2) {
    b44e:	cmp	r0, #5
    b450:	bne.w	b102 <usb_isr+0x1e2>
	endpoint0_transfer_ack.next = 1;
    b454:	ldr	r2, [pc, #160]	; (b4f8 <usb_isr+0x5d8>)
			usb_audio_receive_setting = setup.wValue;
    b456:	ubfx	ip, r7, #16, #16
	endpoint_queue_head[1].status = 0;
    b45a:	str	r3, [r5, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    b45c:	str	r3, [r2, #8]
			usb_audio_receive_setting = setup.wValue;
    b45e:	ldr	r3, [pc, #156]	; (b4fc <usb_isr+0x5dc>)
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    b460:	str	r2, [r5, #72]	; 0x48
			usb_audio_receive_setting = setup.wValue;
    b462:	strb.w	ip, [r3]
	endpoint0_transfer_ack.next = 1;
    b466:	movs	r3, #1
    b468:	str	r3, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    b46a:	movs	r3, #128	; 0x80
    b46c:	str	r3, [r2, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    b46e:	mov.w	r3, #65537	; 0x10001
    b472:	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    b476:	ldr.w	r3, [r4, #432]	; 0x1b0
    b47a:	orr.w	r3, r3, #65536	; 0x10000
    b47e:	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    b482:	ldr.w	r3, [r4, #432]	; 0x1b0
    b486:	cmp	r3, #0
    b488:	bne.n	b482 <usb_isr+0x562>
    b48a:	b.n	affe <usb_isr+0xde>
		endpoint = setup.wIndex & 0x7F;
    b48c:	uxth	r3, r0
		if (endpoint > 7) break;
    b48e:	ands.w	r0, r0, #120	; 0x78
    b492:	bne.w	b102 <usb_isr+0x1e2>
		endpoint = setup.wIndex & 0x7F;
    b496:	and.w	r2, r3, #127	; 0x7f
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    b49a:	ldr.w	r1, [r8, r2, lsl #2]
		reply_buffer[0] = 0;
    b49e:	ldr	r2, [pc, #96]	; (b500 <usb_isr+0x5e0>)
    b4a0:	strh	r0, [r2, #0]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    b4a2:	lsls	r0, r3, #24
    b4a4:	bmi.n	b558 <usb_isr+0x638>
    b4a6:	lsls	r7, r1, #31
    b4a8:	bpl.n	b4ae <usb_isr+0x58e>
			reply_buffer[0] = 1;
    b4aa:	movs	r3, #1
    b4ac:	strb	r3, [r2, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    b4ae:	movs	r1, #2
    b4b0:	ldr	r0, [pc, #76]	; (b500 <usb_isr+0x5e0>)
    b4b2:	bl	ae5c <endpoint0_transmit.constprop.0>
		return;
    b4b6:	b.n	affe <usb_isr+0xde>
		if (setup.wLength >= 3) {
    b4b8:	cmp.w	r0, #196608	; 0x30000
    b4bc:	bcc.w	b102 <usb_isr+0x1e2>
			endpoint0_buffer[0] = 44100 & 255;
    b4c0:	ldr	r0, [pc, #48]	; (b4f4 <usb_isr+0x5d4>)
			endpoint0_transmit(endpoint0_buffer, 3, 0);
    b4c2:	movs	r1, #3
			endpoint0_buffer[2] = 0;
    b4c4:	strb	r3, [r0, #2]
			endpoint0_buffer[0] = 44100 & 255;
    b4c6:	movw	r3, #44100	; 0xac44
    b4ca:	strh	r3, [r0, #0]
			endpoint0_transmit(endpoint0_buffer, 3, 0);
    b4cc:	bl	ae5c <endpoint0_transmit.constprop.0>
			return;
    b4d0:	b.n	affe <usb_isr+0xde>
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
    b4d2:	uxth	r0, r0
    b4d4:	cmp	r0, #0
    b4d6:	bne.w	b232 <usb_isr+0x312>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    b4da:	ldr	r3, [pc, #68]	; (b520 <usb_isr+0x600>)
			usb_cdc_line_rtsdtr = setup.wValue;
    b4dc:	ubfx	ip, r7, #16, #8
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    b4e0:	ldr	r2, [r3, #0]
    b4e2:	ldr	r3, [pc, #64]	; (b524 <usb_isr+0x604>)
    b4e4:	str	r2, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    b4e6:	ldr	r3, [pc, #64]	; (b528 <usb_isr+0x608>)
    b4e8:	strb.w	ip, [r3]
    b4ec:	b.n	b232 <usb_isr+0x312>
    b4ee:	nop
    b4f0:	.word	0x20005300
    b4f4:	.word	0x200073a4
    b4f8:	.word	0x20001ee0
    b4fc:	.word	0x20007b8b
    b500:	.word	0x20007a94
    b504:	.word	0x20007b91
    b508:	.word	0x402e0000
    b50c:	.word	0x00cc0002
    b510:	.word	0x20001298
    b514:	.word	0x600020bc
    b518:	.word	0x60002214
    b51c:	.word	0x20205100
    b520:	.word	0x20007b08
    b524:	.word	0x20007b44
    b528:	.word	0x20007b8f
				endpoint0_notify_mask = 0;
    b52c:	movs	r1, #0
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    b52e:	movw	r0, #8225	; 0x2021
				endpoint0_notify_mask = 0;
    b532:	str	r1, [r2, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
    b534:	ldr	r1, [pc, #244]	; (b62c <usb_isr+0x70c>)
    b536:	ldrd	r2, r1, [r1]
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    b53a:	uxth	r5, r2
    b53c:	cmp	r5, r0
    b53e:	beq.n	b592 <usb_isr+0x672>
	if (setup.word1 == 0x02010121 || setup.word1 == 0x01000121 /* TODO: check setup.word2 */) {
    b540:	ldr	r3, [pc, #236]	; (b630 <usb_isr+0x710>)
    b542:	cmp	r2, r3
    b544:	beq.n	b54e <usb_isr+0x62e>
    b546:	ldr	r3, [pc, #236]	; (b634 <usb_isr+0x714>)
    b548:	cmp	r2, r3
    b54a:	bne.w	b01c <usb_isr+0xfc>
		usb_audio_set_feature(&endpoint0_setupdata, endpoint0_buffer);
    b54e:	ldr	r1, [pc, #232]	; (b638 <usb_isr+0x718>)
    b550:	ldr	r0, [pc, #216]	; (b62c <usb_isr+0x70c>)
    b552:	bl	d06c <usb_audio_set_feature>
    b556:	b.n	b01c <usb_isr+0xfc>
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    b558:	lsls	r3, r1, #15
    b55a:	bmi.n	b4aa <usb_isr+0x58a>
    b55c:	b.n	b4ae <usb_isr+0x58e>
					datalen = *(list->addr);
    b55e:	ldrb	r2, [r1, #0]
				if (datalen > setup.wLength) datalen = setup.wLength;
    b560:	lsrs	r0, r0, #16
    b562:	cmp	r2, r0
    b564:	it	cs
    b566:	movcs	r2, r0
    b568:	mov	r7, r2
				} else if (setup.wValue == 0x700) {
    b56a:	cmp.w	ip, #1792	; 0x700
    b56e:	bne.n	b614 <usb_isr+0x6f4>
					if (usb_high_speed) src = usb_config_descriptor_12;
    b570:	ldr	r3, [pc, #200]	; (b63c <usb_isr+0x71c>)
					memcpy(usb_descriptor_buffer, src, datalen);
    b572:	mov	r2, r7
    b574:	ldr.w	sl, [pc, #228]	; b65c <usb_isr+0x73c>
					if (usb_high_speed) src = usb_config_descriptor_12;
    b578:	ldrb	r0, [r3, #0]
    b57a:	ldr	r1, [pc, #196]	; (b640 <usb_isr+0x720>)
    b57c:	ldr	r3, [pc, #196]	; (b644 <usb_isr+0x724>)
					memcpy(usb_descriptor_buffer, src, datalen);
    b57e:	cmp	r0, #0
    b580:	it	ne
    b582:	movne	r1, r3
    b584:	mov	r0, sl
    b586:	bl	a170 <memcpy>
					usb_descriptor_buffer[1] = 7;
    b58a:	movs	r3, #7
    b58c:	strb.w	r3, [sl, #1]
    b590:	b.n	b3c6 <usb_isr+0x4a6>
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    b592:	uxth	r1, r1
    b594:	cmp	r1, #0
    b596:	bne.n	b540 <usb_isr+0x620>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    b598:	ldr	r1, [pc, #156]	; (b638 <usb_isr+0x718>)
    b59a:	ldr	r5, [pc, #172]	; (b648 <usb_isr+0x728>)
    b59c:	ldmia	r1, {r0, r1}
    b59e:	strh	r1, [r5, #4]
		if (usb_cdc_line_coding[0] == 134) {
    b5a0:	cmp	r0, #134	; 0x86
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    b5a2:	mov.w	r1, r1, lsr #16
    b5a6:	str	r0, [r5, #0]
    b5a8:	strb	r1, [r5, #6]
		if (usb_cdc_line_coding[0] == 134) {
    b5aa:	bne.n	b540 <usb_isr+0x620>
	__disable_irq();
    b5ac:	cpsid	i
	sof_usage |= (1 << interface);
    b5ae:	ldr	r0, [pc, #156]	; (b64c <usb_isr+0x72c>)
    b5b0:	ldrb	r1, [r0, #0]
    b5b2:	orr.w	r1, r1, #64	; 0x40
    b5b6:	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
    b5b8:	ldr.w	r1, [r3, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    b5bc:	lsls	r5, r1, #24
    b5be:	bmi.n	b5ce <usb_isr+0x6ae>
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    b5c0:	orr.w	r1, r1, #128	; 0x80
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    b5c4:	movs	r0, #128	; 0x80
    b5c6:	str.w	r0, [r3, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    b5ca:	str.w	r1, [r3, #328]	; 0x148
	__enable_irq();
    b5ce:	cpsie	i
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    b5d0:	ldr	r3, [pc, #124]	; (b650 <usb_isr+0x730>)
    b5d2:	movs	r1, #80	; 0x50
    b5d4:	strb	r1, [r3, #0]
    b5d6:	b.n	b540 <usb_isr+0x620>
	endpoint0_transfer_ack.next = 1;
    b5d8:	ldr	r2, [pc, #120]	; (b654 <usb_isr+0x734>)
			usb_audio_transmit_setting = setup.wValue;
    b5da:	ubfx	ip, r7, #16, #16
	endpoint_queue_head[1].status = 0;
    b5de:	str	r3, [r5, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    b5e0:	str	r3, [r2, #8]
			usb_audio_transmit_setting = setup.wValue;
    b5e2:	ldr	r3, [pc, #116]	; (b658 <usb_isr+0x738>)
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    b5e4:	str	r2, [r5, #72]	; 0x48
			usb_audio_transmit_setting = setup.wValue;
    b5e6:	strb.w	ip, [r3]
	endpoint0_transfer_ack.next = 1;
    b5ea:	movs	r3, #1
    b5ec:	str	r3, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    b5ee:	movs	r3, #128	; 0x80
    b5f0:	str	r3, [r2, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    b5f2:	mov.w	r3, #65537	; 0x10001
    b5f6:	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    b5fa:	ldr.w	r3, [r4, #432]	; 0x1b0
    b5fe:	orr.w	r3, r3, #65536	; 0x10000
    b602:	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    b606:	ldr.w	r3, [r4, #432]	; 0x1b0
    b60a:	cmp	r3, #0
    b60c:	bne.n	b606 <usb_isr+0x6e6>
    b60e:	b.n	affe <usb_isr+0xde>
			endpoint0_buffer[0] = usb_audio_transmit_setting;
    b610:	ldr	r3, [pc, #68]	; (b658 <usb_isr+0x738>)
    b612:	b.n	b2a4 <usb_isr+0x384>
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    b614:	ldr.w	sl, [pc, #68]	; b65c <usb_isr+0x73c>
    b618:	mov	r2, r7
    b61a:	mov	r0, sl
    b61c:	bl	a170 <memcpy>
    b620:	b.n	b3c6 <usb_isr+0x4a6>
				usb_stop_sof_interrupts(NUM_INTERFACE);
    b622:	movs	r0, #6
    b624:	bl	aef4 <usb_stop_sof_interrupts>
				_reboot_Teensyduino_();
    b628:	bl	13728 <___reboot_Teensyduino__veneer>
    b62c:	.word	0x20005300
    b630:	.word	0x02010121
    b634:	.word	0x01000121
    b638:	.word	0x200073a4
    b63c:	.word	0x20007b91
    b640:	.word	0x60002214
    b644:	.word	0x600020bc
    b648:	.word	0x20007b3c
    b64c:	.word	0x20007b84
    b650:	.word	0x20007b92
    b654:	.word	0x20001ee0
    b658:	.word	0x20007b8e
    b65c:	.word	0x20205100

0000b660 <usb_config_rx>:
{
    b660:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b664:	mov	r7, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    b666:	subs	r3, r0, #2
    b668:	cmp	r3, #4
    b66a:	bls.n	b670 <usb_config_rx+0x10>
}
    b66c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    b670:	ldr.w	r9, [pc, #76]	; b6c0 <usb_config_rx+0x60>
    b674:	mov	r5, r2
    b676:	mov	r4, r1
	memset(qh, 0, sizeof(endpoint_t));
    b678:	movs	r2, #60	; 0x3c
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    b67a:	add.w	r8, r9, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    b67e:	mov	r6, r0
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    b680:	mov.w	sl, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    b684:	movs	r1, #0
    b686:	add.w	r0, r8, #4
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    b68a:	lsls	r4, r4, #16
	memset(qh, 0, sizeof(endpoint_t));
    b68c:	bl	e110 <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    b690:	clz	r2, r5
	qh->next = 1; // Terminate bit = 1
    b694:	movs	r3, #1
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    b696:	lsrs	r2, r2, #5
    b698:	orr.w	r4, r4, r2, lsl #29
	qh->config = config;
    b69c:	str.w	r4, [r9, sl]
	qh->callback_function = callback;
    b6a0:	str.w	r7, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    b6a4:	str.w	r3, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << ep);
    b6a8:	cmp	r7, #0
    b6aa:	beq.n	b66c <usb_config_rx+0xc>
    b6ac:	ldr	r2, [pc, #12]	; (b6bc <usb_config_rx+0x5c>)
    b6ae:	lsls	r3, r6
    b6b0:	ldr	r1, [r2, #0]
    b6b2:	orrs	r3, r1
    b6b4:	str	r3, [r2, #0]
}
    b6b6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b6ba:	nop
    b6bc:	.word	0x200073b0
    b6c0:	.word	0x20000000

0000b6c4 <usb_config_tx>:
{
    b6c4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b6c8:	mov	r5, r1
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    b6ca:	subs	r1, r0, #2
    b6cc:	cmp	r1, #4
    b6ce:	bls.n	b6d4 <usb_config_tx+0x10>
}
    b6d0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    b6d4:	lsls	r7, r0, #7
    b6d6:	ldr.w	r9, [pc, #76]	; b724 <usb_config_tx+0x60>
    b6da:	mov	sl, r2
    b6dc:	mov	r4, r0
    b6de:	adds	r7, #64	; 0x40
	memset(qh, 0, sizeof(endpoint_t));
    b6e0:	movs	r2, #60	; 0x3c
    b6e2:	movs	r1, #0
    b6e4:	mov	r6, r3
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    b6e6:	add.w	r8, r9, r7
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    b6ea:	lsls	r5, r5, #16
	memset(qh, 0, sizeof(endpoint_t));
    b6ec:	add.w	r0, r8, #4
    b6f0:	bl	e110 <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    b6f4:	clz	r2, sl
    b6f8:	lsrs	r2, r2, #5
    b6fa:	orr.w	r2, r5, r2, lsl #29
	qh->config = config;
    b6fe:	str.w	r2, [r9, r7]
	qh->next = 1; // Terminate bit = 1
    b702:	movs	r2, #1
	qh->callback_function = callback;
    b704:	str.w	r6, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    b708:	str.w	r2, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    b70c:	cmp	r6, #0
    b70e:	beq.n	b6d0 <usb_config_tx+0xc>
    b710:	ldr	r3, [pc, #12]	; (b720 <usb_config_tx+0x5c>)
    b712:	adds	r4, #16
    b714:	ldr	r1, [r3, #0]
    b716:	lsls	r2, r4
    b718:	orrs	r2, r1
    b71a:	str	r2, [r3, #0]
}
    b71c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b720:	.word	0x200073b0
    b724:	.word	0x20000000

0000b728 <usb_config_rx_iso>:
{
    b728:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b72c:	mov	r4, r2
	if (mult < 1 || mult > 3) return;
    b72e:	subs	r2, #1
    b730:	cmp	r2, #2
    b732:	bhi.n	b73e <usb_config_rx_iso+0x16>
    b734:	mov	r5, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    b736:	subs	r3, r0, #2
    b738:	mov	r7, r0
    b73a:	cmp	r3, #4
    b73c:	bls.n	b742 <usb_config_rx_iso+0x1a>
}
    b73e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    b742:	ldr.w	r9, [pc, #68]	; b788 <usb_config_rx_iso+0x60>
    b746:	mov	r6, r1
	uint32_t config = (packet_size << 16) | (mult << 30);
    b748:	lsls	r4, r4, #30
	memset(qh, 0, sizeof(endpoint_t));
    b74a:	movs	r2, #60	; 0x3c
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    b74c:	add.w	r8, r9, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    b750:	movs	r1, #0
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    b752:	mov.w	sl, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    b756:	add.w	r0, r8, #4
	uint32_t config = (packet_size << 16) | (mult << 30);
    b75a:	orr.w	r4, r4, r6, lsl #16
	memset(qh, 0, sizeof(endpoint_t));
    b75e:	bl	e110 <memset>
	qh->next = 1; // Terminate bit = 1
    b762:	movs	r3, #1
	qh->config = config;
    b764:	str.w	r4, [r9, sl]
	qh->callback_function = callback;
    b768:	str.w	r5, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    b76c:	str.w	r3, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << ep);
    b770:	cmp	r5, #0
    b772:	beq.n	b73e <usb_config_rx_iso+0x16>
    b774:	ldr	r2, [pc, #12]	; (b784 <usb_config_rx_iso+0x5c>)
    b776:	lsls	r3, r7
    b778:	ldr	r1, [r2, #0]
    b77a:	orrs	r3, r1
    b77c:	str	r3, [r2, #0]
}
    b77e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b782:	nop
    b784:	.word	0x200073b0
    b788:	.word	0x20000000

0000b78c <usb_config_tx_iso>:
{
    b78c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b790:	mov	r4, r2
	if (mult < 1 || mult > 3) return;
    b792:	subs	r2, #1
    b794:	cmp	r2, #2
    b796:	bhi.n	b7a2 <usb_config_tx_iso+0x16>
    b798:	mov	r5, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    b79a:	subs	r3, r0, #2
    b79c:	mov	r7, r0
    b79e:	cmp	r3, #4
    b7a0:	bls.n	b7a6 <usb_config_tx_iso+0x1a>
}
    b7a2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    b7a6:	mov.w	r8, r0, lsl #7
    b7aa:	ldr.w	sl, [pc, #72]	; b7f4 <usb_config_tx_iso+0x68>
    b7ae:	mov	r6, r1
	uint32_t config = (packet_size << 16) | (mult << 30);
    b7b0:	lsls	r4, r4, #30
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    b7b2:	add.w	r8, r8, #64	; 0x40
	memset(qh, 0, sizeof(endpoint_t));
    b7b6:	movs	r2, #60	; 0x3c
    b7b8:	movs	r1, #0
	uint32_t config = (packet_size << 16) | (mult << 30);
    b7ba:	orr.w	r4, r4, r6, lsl #16
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    b7be:	add.w	r9, sl, r8
	memset(qh, 0, sizeof(endpoint_t));
    b7c2:	add.w	r0, r9, #4
    b7c6:	bl	e110 <memset>
	qh->next = 1; // Terminate bit = 1
    b7ca:	movs	r3, #1
	qh->config = config;
    b7cc:	str.w	r4, [sl, r8]
	qh->callback_function = callback;
    b7d0:	str.w	r5, [r9, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    b7d4:	str.w	r3, [r9, #8]
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    b7d8:	cmp	r5, #0
    b7da:	beq.n	b7a2 <usb_config_tx_iso+0x16>
    b7dc:	ldr	r2, [pc, #16]	; (b7f0 <usb_config_tx_iso+0x64>)
    b7de:	add.w	r0, r7, #16
    b7e2:	ldr	r1, [r2, #0]
    b7e4:	lsls	r3, r0
    b7e6:	orrs	r3, r1
    b7e8:	str	r3, [r2, #0]
}
    b7ea:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b7ee:	nop
    b7f0:	.word	0x200073b0
    b7f4:	.word	0x20000000

0000b7f8 <usb_prepare_transfer>:
	transfer->status = (len << 16) | (1<<7);
    b7f8:	lsls	r2, r2, #16
	transfer->pointer0 = addr;
    b7fa:	str	r1, [r0, #8]
	transfer->callback_param = param;
    b7fc:	str	r3, [r0, #28]
	transfer->pointer3 = addr + 12288;
    b7fe:	add.w	r3, r1, #12288	; 0x3000
	transfer->status = (len << 16) | (1<<7);
    b802:	orr.w	r2, r2, #128	; 0x80
{
    b806:	push	{r4}
	transfer->next = 1;
    b808:	movs	r4, #1
	transfer->status = (len << 16) | (1<<7);
    b80a:	str	r2, [r0, #4]
	transfer->pointer2 = addr + 8192;
    b80c:	add.w	r2, r1, #8192	; 0x2000
	transfer->next = 1;
    b810:	str	r4, [r0, #0]
	transfer->pointer1 = addr + 4096;
    b812:	add.w	r4, r1, #4096	; 0x1000
	transfer->pointer4 = addr + 16384;
    b816:	add.w	r1, r1, #16384	; 0x4000
	transfer->pointer1 = addr + 4096;
    b81a:	str	r4, [r0, #12]
	transfer->pointer4 = addr + 16384;
    b81c:	str	r1, [r0, #24]
}
    b81e:	ldr.w	r4, [sp], #4
	transfer->pointer3 = addr + 12288;
    b822:	strd	r2, r3, [r0, #16]
}
    b826:	bx	lr

0000b828 <usb_transmit>:

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    b828:	subs	r3, r0, #2
{
    b82a:	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    b82c:	cmp	r3, #4
    b82e:	bls.n	b832 <usb_transmit+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}
    b830:	bx	lr
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    b832:	ldr	r3, [pc, #24]	; (b84c <usb_transmit+0x24>)
	uint32_t mask = 1 << (endpoint_number + 16);
    b834:	add.w	r1, r0, #16
    b838:	mov.w	ip, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    b83c:	add.w	r0, r3, r0, lsl #7
	schedule_transfer(endpoint, mask, transfer);
    b840:	lsl.w	r1, ip, r1
    b844:	adds	r0, #64	; 0x40
    b846:	b.w	ad9c <schedule_transfer>
    b84a:	nop
    b84c:	.word	0x20000000

0000b850 <usb_receive>:

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    b850:	subs	r3, r0, #2
{
    b852:	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    b854:	cmp	r3, #4
    b856:	bls.n	b85a <usb_receive+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
}
    b858:	bx	lr
	uint32_t mask = 1 << endpoint_number;
    b85a:	movs	r1, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
    b85c:	ldr	r3, [pc, #8]	; (b868 <usb_receive+0x18>)
	schedule_transfer(endpoint, mask, transfer);
    b85e:	lsls	r1, r0
    b860:	add.w	r0, r3, r0, lsl #7
    b864:	b.w	ad9c <schedule_transfer>
    b868:	.word	0x20000000

0000b86c <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
    b86c:	ldr	r0, [r0, #4]
#endif
}
    b86e:	bx	lr

0000b870 <delay>:
// or delayNanoseconds().
void delay(uint32_t msec)
{
	uint32_t start;

	if (msec == 0) return;
    b870:	cbnz	r0, b874 <delay+0x4>
    b872:	bx	lr
{
    b874:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    b878:	movs	r1, #1
    b87a:	mov	r9, r0
    b87c:	ldr	r4, [pc, #132]	; (b904 <delay+0x94>)
    b87e:	ldr	r5, [pc, #136]	; (b908 <delay+0x98>)
    b880:	ldr	r6, [pc, #136]	; (b90c <delay+0x9c>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    b882:	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    b886:	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    b888:	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    b88a:	strex	r3, r1, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    b88e:	cmp	r3, #0
    b890:	bne.n	b882 <delay+0x12>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    b892:	ldr	r1, [pc, #124]	; (b910 <delay+0xa0>)
    b894:	ldr	r3, [r1, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    b896:	mov.w	fp, #1000	; 0x3e8
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    b89a:	ldr.w	sl, [pc, #120]	; b914 <delay+0xa4>
	uint32_t ccdelta = cyccnt - scc;
    b89e:	subs	r3, r3, r0
    b8a0:	movs	r7, #1
	uint32_t usec = 1000*smc + frac;
    b8a2:	mul.w	r8, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    b8a6:	ldr.w	r2, [sl]
    b8aa:	umull	r3, r2, r3, r2
	uint32_t usec = 1000*smc + frac;
    b8ae:	cmp	r2, fp
    b8b0:	ite	ls
    b8b2:	addls	r8, r2
    b8b4:	addhi	r8, fp
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    b8b6:	ldrex	r3, [r4]
		smc = systick_millis_count;
    b8ba:	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    b8bc:	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    b8be:	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    b8c2:	cmp	r3, #0
    b8c4:	bne.n	b8b6 <delay+0x46>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    b8c6:	ldr	r3, [r1, #4]
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    b8c8:	ldr.w	ip, [sl]
	uint32_t ccdelta = cyccnt - scc;
    b8cc:	subs	r3, r3, r0
	uint32_t usec = 1000*smc + frac;
    b8ce:	mul.w	r2, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    b8d2:	umull	r3, ip, r3, ip
	uint32_t usec = 1000*smc + frac;
    b8d6:	cmp.w	ip, #1000	; 0x3e8
    b8da:	ite	ls
    b8dc:	addls	r2, ip
    b8de:	addhi.w	r2, r2, #1000	; 0x3e8
		while ((micros() - start) >= 1000) {
    b8e2:	sub.w	r2, r2, r8
    b8e6:	cmp.w	r2, #1000	; 0x3e8
    b8ea:	bcc.n	b8fa <delay+0x8a>
			if (--msec == 0) return;
    b8ec:	subs.w	r9, r9, #1
			start += 1000;
    b8f0:	add.w	r8, r8, #1000	; 0x3e8
			if (--msec == 0) return;
    b8f4:	bne.n	b8b6 <delay+0x46>
}
    b8f6:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		yield();
    b8fa:	bl	c180 <yield>
		while ((micros() - start) >= 1000) {
    b8fe:	ldr	r1, [pc, #16]	; (b910 <delay+0xa0>)
    b900:	b.n	b8b6 <delay+0x46>
    b902:	nop
    b904:	.word	0x20007b0c
    b908:	.word	0x20007b08
    b90c:	.word	0x20007b04
    b910:	.word	0xe0001000
    b914:	.word	0x20007b00

0000b918 <micros>:
{
    b918:	push	{r4, r5}
    b91a:	ldr	r3, [pc, #60]	; (b958 <micros+0x40>)
    b91c:	mov.w	ip, #1
    b920:	ldr	r5, [pc, #56]	; (b95c <micros+0x44>)
    b922:	ldr	r4, [pc, #60]	; (b960 <micros+0x48>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    b924:	ldrex	r2, [r3]
		smc = systick_millis_count;
    b928:	ldr	r0, [r5, #0]
		scc = systick_cycle_count;
    b92a:	ldr	r1, [r4, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    b92c:	strex	r2, ip, [r3]
	} while ( __STREXW(1, &systick_safe_read));
    b930:	cmp	r2, #0
    b932:	bne.n	b924 <micros+0xc>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    b934:	ldr	r3, [pc, #44]	; (b964 <micros+0x4c>)
    b936:	ldr	r3, [r3, #4]
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    b938:	ldr	r2, [pc, #44]	; (b968 <micros+0x50>)
	uint32_t ccdelta = cyccnt - scc;
    b93a:	subs	r3, r3, r1
	uint32_t usec = 1000*smc + frac;
    b93c:	mov.w	r1, #1000	; 0x3e8
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    b940:	ldr	r2, [r2, #0]
	uint32_t usec = 1000*smc + frac;
    b942:	mul.w	r0, r1, r0
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    b946:	umull	r3, r2, r3, r2
	return usec;
}
    b94a:	pop	{r4, r5}
    b94c:	cmp	r2, r1
    b94e:	ite	ls
    b950:	addls	r0, r0, r2
    b952:	addhi	r0, r0, r1
    b954:	bx	lr
    b956:	nop
    b958:	.word	0x20007b0c
    b95c:	.word	0x20007b08
    b960:	.word	0x20007b04
    b964:	.word	0xe0001000
    b968:	.word	0x20007b00

0000b96c <unused_interrupt_vector>:
	__disable_irq();
    b96c:	cpsid	i
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
    b96e:	mrs	r3, IPSR
	info->ipsr = ipsr;
    b972:	ldr	r4, [pc, #316]	; (bab0 <unused_interrupt_vector+0x144>)
    b974:	str.w	r3, [r4, #132]	; 0x84
	asm volatile("mrs %0, msp\n" : "=r" (stack) :: "memory");
    b978:	mrs	r2, MSP
	info->cfsr = SCB_CFSR;
    b97c:	mov.w	r3, #3758153728	; 0xe000e000
	p = (uint32_t *)info;
    b980:	ldr	r6, [pc, #304]	; (bab4 <unused_interrupt_vector+0x148>)
	while (p < end) {
    b982:	ldr	r5, [pc, #308]	; (bab8 <unused_interrupt_vector+0x14c>)
	info->cfsr = SCB_CFSR;
    b984:	ldr.w	r0, [r3, #3368]	; 0xd28
	info->hfsr = SCB_HFSR;
    b988:	ldr.w	r1, [r3, #3372]	; 0xd2c
    b98c:	strd	r0, r1, [r4, #136]	; 0x88
	info->mmfar = SCB_MMFAR;
    b990:	ldr.w	r1, [r3, #3380]	; 0xd34
	info->bfar = SCB_BFAR;
    b994:	ldr.w	r3, [r3, #3384]	; 0xd38
    b998:	strd	r1, r3, [r4, #144]	; 0x90
	info->ret = stack[6];
    b99c:	ldr	r3, [r2, #24]
    b99e:	str.w	r3, [r4, #152]	; 0x98
	info->xpsr = stack[7];
    b9a2:	ldr	r3, [r2, #28]
    b9a4:	str.w	r3, [r4, #156]	; 0x9c
	info->temp = tempmonGetTemp();
    b9a8:	bl	bc44 <tempmonGetTemp>
    b9ac:	vstr	s0, [r4, #160]	; 0xa0
	info->time = rtc_get();
    b9b0:	bl	bb4c <rtc_get>
	info->len = sizeof(*info) / 4;
    b9b4:	movs	r1, #11
	crc = 0xFFFFFFFF;
    b9b6:	mov.w	r2, #4294967295
	info->time = rtc_get();
    b9ba:	str.w	r0, [r4, #164]	; 0xa4
	info->len = sizeof(*info) / 4;
    b9be:	mov	r3, r1
    b9c0:	str.w	r1, [r4, #128]	; 0x80
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    b9c4:	ldr	r1, [pc, #244]	; (babc <unused_interrupt_vector+0x150>)
		crc ^= *p++;
    b9c6:	adds	r0, r6, #4
    b9c8:	eors	r2, r3
    b9ca:	movs	r4, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    b9cc:	and.w	r3, r2, #1
    b9d0:	subs	r4, #1
    b9d2:	mul.w	r3, r1, r3
    b9d6:	eor.w	r2, r3, r2, lsr #1
    b9da:	bne.n	b9cc <unused_interrupt_vector+0x60>
	while (p < end) {
    b9dc:	cmp	r0, r5
    b9de:	beq.n	b9e6 <unused_interrupt_vector+0x7a>
		crc ^= *p++;
    b9e0:	ldr	r3, [r6, #4]
    b9e2:	mov	r6, r0
    b9e4:	b.n	b9c6 <unused_interrupt_vector+0x5a>
	info->crc = crc;
    b9e6:	ldr	r3, [pc, #200]	; (bab0 <unused_interrupt_vector+0x144>)
    b9e8:	str.w	r2, [r3, #168]	; 0xa8
	asm("dsb");
    b9ec:	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    b9f0:	mov.w	r3, #3758153728	; 0xe000e000
    b9f4:	ldr	r1, [pc, #188]	; (bab4 <unused_interrupt_vector+0x148>)
    b9f6:	ldr	r2, [pc, #200]	; (bac0 <unused_interrupt_vector+0x154>)
    b9f8:	str.w	r1, [r3, #3952]	; 0xf70
    b9fc:	str.w	r2, [r3, #3952]	; 0xf70
	asm("dsb");
    ba00:	dsb	sy
	asm("isb");
    ba04:	isb	sy
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    ba08:	ldr	r2, [pc, #184]	; (bac4 <unused_interrupt_vector+0x158>)
	PIT_MCR = PIT_MCR_MDIS;
    ba0a:	movs	r5, #2
    ba0c:	ldr	r0, [pc, #184]	; (bac8 <unused_interrupt_vector+0x15c>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    ba0e:	ldr	r3, [r2, #108]	; 0x6c
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    ba10:	ldr	r1, [pc, #184]	; (bacc <unused_interrupt_vector+0x160>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    ba12:	orr.w	r3, r3, #12288	; 0x3000
    ba16:	str	r3, [r2, #108]	; 0x6c
	PIT_MCR = PIT_MCR_MDIS;
    ba18:	str	r5, [r0, #0]
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    ba1a:	ldr	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    ba1c:	ldr	r0, [pc, #176]	; (bad0 <unused_interrupt_vector+0x164>)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    ba1e:	bic.w	r3, r3, #127	; 0x7f
    ba22:	orr.w	r3, r3, #64	; 0x40
    ba26:	str	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    ba28:	ldr	r3, [r1, #0]
    ba2a:	cmp	r3, r0
    ba2c:	bhi.n	baaa <unused_interrupt_vector+0x13e>
	PIT_MCR = 0;
    ba2e:	ldr	r5, [pc, #152]	; (bac8 <unused_interrupt_vector+0x15c>)
    ba30:	movs	r1, #0
	NVIC_ICER0 = 0xFFFFFFFF;
    ba32:	mov.w	r3, #3758153728	; 0xe000e000
    ba36:	mov.w	r2, #4294967295
	PIT_MCR = 0;
    ba3a:	str	r1, [r5, #0]
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    ba3c:	movs	r6, #1
	PIT_TCTRL0 = 0;
    ba3e:	str.w	r1, [r5, #264]	; 0x108
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
    ba42:	ldr	r1, [pc, #144]	; (bad4 <unused_interrupt_vector+0x168>)
    ba44:	str.w	r1, [r5, #256]	; 0x100
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    ba48:	str.w	r6, [r5, #264]	; 0x108
	NVIC_ICER0 = 0xFFFFFFFF;
    ba4c:	str.w	r2, [r3, #384]	; 0x180
	NVIC_ICER1 = 0xFFFFFFFF;
    ba50:	str.w	r2, [r3, #388]	; 0x184
	NVIC_ICER2 = 0xFFFFFFFF;
    ba54:	str.w	r2, [r3, #392]	; 0x188
	NVIC_ICER3 = 0xFFFFFFFF;
    ba58:	str.w	r2, [r3, #396]	; 0x18c
	NVIC_ICER4 = 0xFFFFFFFF;
    ba5c:	str.w	r2, [r3, #400]	; 0x190
	count = 0;
    ba60:	b.n	ba66 <unused_interrupt_vector+0xfa>
		usb_isr();
    ba62:	bl	af20 <usb_isr>
		if (PIT_TFLG0) {
    ba66:	ldr.w	r3, [r5, #268]	; 0x10c
    ba6a:	cmp	r3, #0
    ba6c:	beq.n	ba62 <unused_interrupt_vector+0xf6>
			if (++count >= 80) break;  // reboot after 8 seconds
    ba6e:	adds	r4, #1
			PIT_TFLG0 = 1;
    ba70:	str.w	r6, [r5, #268]	; 0x10c
			if (++count >= 80) break;  // reboot after 8 seconds
    ba74:	cmp	r4, #79	; 0x4f
    ba76:	bls.n	ba62 <unused_interrupt_vector+0xf6>
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    ba78:	ldr	r3, [pc, #92]	; (bad8 <unused_interrupt_vector+0x16c>)
	USB1_USBCMD = USB_USBCMD_RST;
    ba7a:	movs	r0, #2
    ba7c:	ldr	r1, [pc, #92]	; (badc <unused_interrupt_vector+0x170>)
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    ba7e:	mov.w	r2, #2147483648	; 0x80000000
	USB1_USBCMD = USB_USBCMD_RST;
    ba82:	str.w	r0, [r1, #320]	; 0x140
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    ba86:	str	r2, [r3, #52]	; 0x34
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    ba88:	ldr.w	r3, [r5, #268]	; 0x10c
    ba8c:	cbnz	r3, ba9e <unused_interrupt_vector+0x132>
	SRC_GPR5 = 0x0BAD00F1;
    ba8e:	ldr	r0, [pc, #80]	; (bae0 <unused_interrupt_vector+0x174>)
    ba90:	ldr	r1, [pc, #80]	; (bae4 <unused_interrupt_vector+0x178>)
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    ba92:	ldr	r2, [pc, #52]	; (bac8 <unused_interrupt_vector+0x15c>)
	SRC_GPR5 = 0x0BAD00F1;
    ba94:	str	r1, [r0, #48]	; 0x30
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    ba96:	ldr.w	r3, [r2, #268]	; 0x10c
    ba9a:	cmp	r3, #0
    ba9c:	beq.n	ba94 <unused_interrupt_vector+0x128>
	SCB_AIRCR = 0x05FA0004;
    ba9e:	mov.w	r3, #3758153728	; 0xe000e000
    baa2:	ldr	r2, [pc, #68]	; (bae8 <unused_interrupt_vector+0x17c>)
    baa4:	str.w	r2, [r3, #3340]	; 0xd0c
	while (1) ;
    baa8:	b.n	baa8 <unused_interrupt_vector+0x13c>
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    baaa:	bl	a9e4 <set_arm_clock>
    baae:	b.n	ba2e <unused_interrupt_vector+0xc2>
    bab0:	.word	0x2027ff00
    bab4:	.word	0x2027ff80
    bab8:	.word	0x2027ffa8
    babc:	.word	0xedb88320
    bac0:	.word	0x2027ffa0
    bac4:	.word	0x400fc000
    bac8:	.word	0x40084000
    bacc:	.word	0x20001450
    bad0:	.word	0x0bcd3d80
    bad4:	.word	0x00249f00
    bad8:	.word	0x400d9000
    badc:	.word	0x402e0000
    bae0:	.word	0x400f8000
    bae4:	.word	0x0bad00f1
    bae8:	.word	0x05fa0004

0000baec <_sbrk>:

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
        char *prev = __brkval;
    baec:	ldr	r1, [pc, #40]	; (bb18 <_sbrk+0x2c>)
    baee:	ldr	r2, [r1, #0]
        if (incr != 0) {
    baf0:	cbz	r0, bb02 <_sbrk+0x16>
{
    baf2:	push	{r3, lr}
                if (prev + incr > (char *)&_heap_end) {
    baf4:	adds	r3, r2, r0
    baf6:	ldr	r0, [pc, #36]	; (bb1c <_sbrk+0x30>)
    baf8:	cmp	r3, r0
    bafa:	bhi.n	bb06 <_sbrk+0x1a>
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
    bafc:	mov	r0, r2
                __brkval = prev + incr;
    bafe:	str	r3, [r1, #0]
}
    bb00:	pop	{r3, pc}
    bb02:	mov	r0, r2
    bb04:	bx	lr
                        errno = ENOMEM;
    bb06:	bl	e37c <__errno>
    bb0a:	movs	r3, #12
                        return (void *)-1;
    bb0c:	mov.w	r2, #4294967295
                        errno = ENOMEM;
    bb10:	str	r3, [r0, #0]
}
    bb12:	mov	r0, r2
    bb14:	pop	{r3, pc}
    bb16:	nop
    bb18:	.word	0x20001484
    bb1c:	.word	0x20280000

0000bb20 <_read>:

__attribute__((weak))
int _read(int file, char *ptr, int len)
{
	return 0;
}
    bb20:	movs	r0, #0
    bb22:	bx	lr

0000bb24 <_close>:

__attribute__((weak))
int _close(int fd)
{
	return -1;
}
    bb24:	mov.w	r0, #4294967295
    bb28:	bx	lr
    bb2a:	nop

0000bb2c <_fstat>:
#include <sys/stat.h>

__attribute__((weak))
int _fstat(int fd, struct stat *st)
{
	st->st_mode = S_IFCHR;
    bb2c:	mov.w	r3, #8192	; 0x2000
	return 0;
}
    bb30:	movs	r0, #0
	st->st_mode = S_IFCHR;
    bb32:	str	r3, [r1, #4]
}
    bb34:	bx	lr
    bb36:	nop

0000bb38 <_isatty>:

__attribute__((weak))
int _isatty(int fd)
{
	return 1;
}
    bb38:	movs	r0, #1
    bb3a:	bx	lr

0000bb3c <_lseek>:

__attribute__((weak))
int _lseek(int fd, long long offset, int whence)
{
	return -1;
}
    bb3c:	mov.w	r0, #4294967295
    bb40:	bx	lr
    bb42:	nop

0000bb44 <__cxa_pure_virtual>:
}

__attribute__((weak))
void __cxa_pure_virtual()
{
	while (1) asm ("WFI");
    bb44:	wfi
    bb46:	b.n	bb44 <__cxa_pure_virtual>

0000bb48 <abort>:
}

__attribute__((weak))
void abort(void)
{
	while (1) asm ("WFI");
    bb48:	wfi
    bb4a:	b.n	bb48 <abort>

0000bb4c <rtc_get>:
	uint32_t hi1 = SNVS_HPRTCMR;
    bb4c:	ldr	r2, [pc, #28]	; (bb6c <rtc_get+0x20>)
    bb4e:	ldr	r0, [r2, #36]	; 0x24
	uint32_t lo1 = SNVS_HPRTCLR;
    bb50:	ldr	r3, [r2, #40]	; 0x28
		uint32_t hi2 = SNVS_HPRTCMR;
    bb52:	mov	r1, r3
    bb54:	mov	ip, r0
    bb56:	ldr	r0, [r2, #36]	; 0x24
		uint32_t lo2 = SNVS_HPRTCLR;
    bb58:	ldr	r3, [r2, #40]	; 0x28
		if (lo1 == lo2 && hi1 == hi2) {
    bb5a:	cmp	r1, r3
    bb5c:	bne.n	bb52 <rtc_get+0x6>
    bb5e:	cmp	ip, r0
    bb60:	bne.n	bb52 <rtc_get+0x6>
			return (hi2 << 17) | (lo2 >> 15);
    bb62:	lsrs	r3, r3, #15
}
    bb64:	orr.w	r0, r3, r0, lsl #17
    bb68:	bx	lr
    bb6a:	nop
    bb6c:	.word	0x400d4000

0000bb70 <sm_align_pool>:
	if (spool->pool_size % HEADER_SZ) return 0;
	return 1;
}

int sm_align_pool(struct smalloc_pool *spool)
{
    bb70:	push	{r3, lr}
	size_t x;

	if (smalloc_verify_pool(spool)) return 1;

	x = spool->pool_size % HEADER_SZ;
    bb72:	ldrd	r3, r2, [r0]
	if (!spool->pool || !spool->pool_size) return 0;
    bb76:	cbz	r3, bb90 <sm_align_pool+0x20>
    bb78:	cbz	r2, bbaa <sm_align_pool+0x3a>
	if (spool->pool_size % HEADER_SZ) return 0;
    bb7a:	ldr	r3, [pc, #60]	; (bbb8 <sm_align_pool+0x48>)
    bb7c:	umull	r1, r3, r3, r2
    bb80:	lsrs	r3, r3, #3
    bb82:	add.w	r3, r3, r3, lsl #1
    bb86:	subs.w	r3, r2, r3, lsl #2
    bb8a:	bne.n	bba2 <sm_align_pool+0x32>
	if (smalloc_verify_pool(spool)) return 1;
    bb8c:	movs	r0, #1
		errno = ENOSPC;
		return 0;
	}

	return 1;
}
    bb8e:	pop	{r3, pc}
	x = spool->pool_size % HEADER_SZ;
    bb90:	ldr	r3, [pc, #36]	; (bbb8 <sm_align_pool+0x48>)
    bb92:	umull	r1, r3, r3, r2
    bb96:	lsrs	r3, r3, #3
    bb98:	add.w	r3, r3, r3, lsl #1
	if (x) spool->pool_size -= x;
    bb9c:	subs.w	r3, r2, r3, lsl #2
    bba0:	beq.n	bba6 <sm_align_pool+0x36>
    bba2:	subs	r2, r2, r3
    bba4:	str	r2, [r0, #4]
	if (spool->pool_size <= MIN_POOL_SZ) {
    bba6:	cmp	r2, #240	; 0xf0
    bba8:	bhi.n	bb8c <sm_align_pool+0x1c>
		errno = ENOSPC;
    bbaa:	bl	e37c <__errno>
    bbae:	movs	r2, #28
    bbb0:	mov	r3, r0
    bbb2:	movs	r0, #0
    bbb4:	str	r2, [r3, #0]
}
    bbb6:	pop	{r3, pc}
    bbb8:	.word	0xaaaaaaab

0000bbbc <sm_set_pool>:

int sm_set_pool(struct smalloc_pool *spool, void *new_pool, size_t new_pool_size, int do_zero, smalloc_oom_handler oom_handler)
{
    bbbc:	push	{r4, r5, r6, lr}
	if (!spool) {
    bbbe:	mov	r4, r0
    bbc0:	cbz	r0, bc12 <sm_set_pool+0x56>
		errno = EINVAL;
		return 0;
	}

	if (!new_pool || !new_pool_size) {
    bbc2:	cbz	r1, bbcc <sm_set_pool+0x10>
    bbc4:	clz	r6, r2
    bbc8:	lsrs	r6, r6, #5
    bbca:	cbnz	r2, bbf6 <sm_set_pool+0x3a>
	if (!spool->pool || !spool->pool_size) return 0;
    bbcc:	ldr	r0, [r4, #0]
    bbce:	cbz	r0, bc12 <sm_set_pool+0x56>
    bbd0:	ldr	r2, [r4, #4]
    bbd2:	cbz	r2, bc12 <sm_set_pool+0x56>
	if (spool->pool_size % HEADER_SZ) return 0;
    bbd4:	ldr	r3, [pc, #96]	; (bc38 <sm_set_pool+0x7c>)
    bbd6:	ldr	r1, [pc, #100]	; (bc3c <sm_set_pool+0x80>)
    bbd8:	mul.w	r3, r2, r3
    bbdc:	cmp.w	r1, r3, ror #2
    bbe0:	bcc.n	bc12 <sm_set_pool+0x56>
		if (smalloc_verify_pool(spool)) {
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    bbe2:	ldr	r3, [r4, #8]
    bbe4:	cbnz	r3, bc20 <sm_set_pool+0x64>
			memset(spool, 0, sizeof(struct smalloc_pool));
    bbe6:	movs	r2, #0
			return 1;
    bbe8:	movs	r3, #1
			memset(spool, 0, sizeof(struct smalloc_pool));
    bbea:	str	r2, [r4, #0]
    bbec:	str	r2, [r4, #4]
    bbee:	str	r2, [r4, #8]
    bbf0:	str	r2, [r4, #12]
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
}
    bbf2:	mov	r0, r3
    bbf4:	pop	{r4, r5, r6, pc}
	spool->pool = new_pool;
    bbf6:	mov	r5, r3
	spool->oomfn = oom_handler;
    bbf8:	ldr	r3, [sp, #16]
	spool->pool_size = new_pool_size;
    bbfa:	strd	r1, r2, [r0]
	spool->oomfn = oom_handler;
    bbfe:	str	r3, [r0, #12]
	if (!sm_align_pool(spool)) return 0;
    bc00:	bl	bb70 <sm_align_pool>
    bc04:	mov	r3, r0
    bc06:	cmp	r0, #0
    bc08:	beq.n	bbf2 <sm_set_pool+0x36>
	if (do_zero) {
    bc0a:	cbnz	r5, bc28 <sm_set_pool+0x6c>
	return 1;
    bc0c:	movs	r3, #1
}
    bc0e:	mov	r0, r3
    bc10:	pop	{r4, r5, r6, pc}
		errno = EINVAL;
    bc12:	bl	e37c <__errno>
    bc16:	movs	r2, #22
		return 0;
    bc18:	movs	r3, #0
		errno = EINVAL;
    bc1a:	str	r2, [r0, #0]
}
    bc1c:	mov	r0, r3
    bc1e:	pop	{r4, r5, r6, pc}
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    bc20:	movs	r1, #0
    bc22:	bl	e110 <memset>
    bc26:	b.n	bbe6 <sm_set_pool+0x2a>
		memset(spool->pool, 0, spool->pool_size);
    bc28:	ldr	r2, [r4, #4]
    bc2a:	mov	r1, r6
    bc2c:	ldr	r0, [r4, #0]
		spool->do_zero = do_zero;
    bc2e:	str	r5, [r4, #8]
		memset(spool->pool, 0, spool->pool_size);
    bc30:	bl	e110 <memset>
	return 1;
    bc34:	movs	r3, #1
    bc36:	b.n	bbf2 <sm_set_pool+0x36>
    bc38:	.word	0xaaaaaaab
    bc3c:	.word	0x15555555

0000bc40 <Panic_Temp_isr>:
  unused_interrupt_vector();
    bc40:	b.w	b96c <unused_interrupt_vector>

0000bc44 <tempmonGetTemp>:
float tempmonGetTemp(void)
{
    uint32_t nmeas;
    float tmeas;

    while (!(TEMPMON_TEMPSENSE0 & 0x4U))
    bc44:	ldr	r2, [pc, #72]	; (bc90 <tempmonGetTemp+0x4c>)
    bc46:	ldr.w	r3, [r2, #128]	; 0x80
    bc4a:	lsls	r3, r3, #29
    bc4c:	bpl.n	bc46 <tempmonGetTemp+0x2>
    {
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    bc4e:	ldr.w	r3, [r2, #128]	; 0x80
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    bc52:	ldr	r0, [pc, #64]	; (bc94 <tempmonGetTemp+0x50>)
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    bc54:	ubfx	r3, r3, #8, #12
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    bc58:	ldr	r1, [pc, #60]	; (bc98 <tempmonGetTemp+0x54>)
    bc5a:	vldr	s14, [r0]
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    bc5e:	vmov	s15, r3
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    bc62:	vldr	s12, [r1]
    bc66:	vcvt.f32.u32	s14, s14
    bc6a:	ldr	r2, [pc, #48]	; (bc9c <tempmonGetTemp+0x58>)
    bc6c:	vcvt.f32.s32	s15, s15
    bc70:	ldr	r3, [pc, #44]	; (bca0 <tempmonGetTemp+0x5c>)
    bc72:	vldr	s13, [r2]
    bc76:	vsub.f32	s15, s15, s14
    bc7a:	vldr	s14, [r3]
    bc7e:	vcvt.f32.u32	s14, s14
    bc82:	vmul.f32	s15, s15, s12
    bc86:	vdiv.f32	s0, s15, s13

    return tmeas;
}
    bc8a:	vsub.f32	s0, s14, s0
    bc8e:	bx	lr
    bc90:	.word	0x400d8100
    bc94:	.word	0x20007af0
    bc98:	.word	0x20007af8
    bc9c:	.word	0x20007afc
    bca0:	.word	0x20007af4

0000bca4 <digitalWrite>:
void digitalWrite(uint8_t pin, uint8_t val)
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
    bca4:	cmp	r0, #54	; 0x36
    bca6:	bhi.n	bcd6 <digitalWrite+0x32>
	p = digital_pin_to_info_PGM + pin;
    bca8:	lsls	r2, r0, #4
    bcaa:	ldr	r3, [pc, #64]	; (bcec <digitalWrite+0x48>)
    bcac:	add.w	r0, r3, r0, lsl #4
	pinmode = *(p->reg + 1);
    bcb0:	ldr	r3, [r3, r2]
{
    bcb2:	push	{r4}
	mask = p->mask;
    bcb4:	ldr	r2, [r0, #12]
	pinmode = *(p->reg + 1);
    bcb6:	ldr	r4, [r3, #4]
	if (pinmode & mask) {
    bcb8:	tst	r4, r2
    bcba:	beq.n	bcc8 <digitalWrite+0x24>
		// pin is configured for output mode
		if (val) {
    bcbc:	cbnz	r1, bcd8 <digitalWrite+0x34>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
    bcbe:	ldr.w	r4, [sp], #4
			*(p->reg + 0x22) = mask; // clear register
    bcc2:	str.w	r2, [r3, #136]	; 0x88
}
    bcc6:	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    bcc8:	ldr	r3, [r0, #8]
		if (val) {
    bcca:	cbz	r1, bce2 <digitalWrite+0x3e>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    bccc:	ldr	r2, [pc, #32]	; (bcf0 <digitalWrite+0x4c>)
}
    bcce:	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    bcd2:	str	r2, [r3, #0]
}
    bcd4:	bx	lr
    bcd6:	bx	lr
    bcd8:	ldr.w	r4, [sp], #4
			*(p->reg + 0x21) = mask; // set register
    bcdc:	str.w	r2, [r3, #132]	; 0x84
}
    bce0:	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    bce2:	ldr	r2, [pc, #16]	; (bcf4 <digitalWrite+0x50>)
}
    bce4:	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    bce8:	str	r2, [r3, #0]
}
    bcea:	bx	lr
    bcec:	.word	0x20000ebc
    bcf0:	.word	0x0001f038
    bcf4:	.word	0x00013038

0000bcf8 <digitalRead>:

uint8_t digitalRead(uint8_t pin)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return 0;
    bcf8:	cmp	r0, #54	; 0x36
    bcfa:	bhi.n	bd14 <digitalRead+0x1c>
	p = digital_pin_to_info_PGM + pin;
    bcfc:	ldr	r3, [pc, #24]	; (bd18 <digitalRead+0x20>)
    bcfe:	lsls	r2, r0, #4
    bd00:	add.w	r0, r3, r0, lsl #4
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
    bd04:	ldr	r2, [r3, r2]
    bd06:	ldr	r3, [r0, #12]
    bd08:	ldr	r2, [r2, #8]
    bd0a:	tst	r2, r3
    bd0c:	ite	ne
    bd0e:	movne	r0, #1
    bd10:	moveq	r0, #0
    bd12:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return 0;
    bd14:	movs	r0, #0
}
    bd16:	bx	lr
    bd18:	.word	0x20000ebc

0000bd1c <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    bd1c:	cmp	r0, #54	; 0x36
    bd1e:	bhi.n	bd74 <pinMode+0x58>
	p = digital_pin_to_info_PGM + pin;
    bd20:	ldr	r3, [pc, #88]	; (bd7c <pinMode+0x60>)
    bd22:	lsls	r2, r0, #4
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    bd24:	cmp	r1, #1
	p = digital_pin_to_info_PGM + pin;
    bd26:	add.w	r0, r3, r0, lsl #4
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    bd2a:	ldr	r2, [r3, r2]
{
    bd2c:	push	{r4}
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    bd2e:	ldr	r3, [r2, #4]
    bd30:	ldr	r4, [r0, #12]
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    bd32:	beq.n	bd52 <pinMode+0x36>
    bd34:	cmp	r1, #4
    bd36:	beq.n	bd52 <pinMode+0x36>
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    bd38:	bic.w	r3, r3, r4
    bd3c:	str	r3, [r2, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    bd3e:	ldr	r3, [r0, #8]
		if (mode == INPUT) {
    bd40:	cbz	r1, bd6e <pinMode+0x52>
		} else if (mode == INPUT_PULLUP) {
    bd42:	cmp	r1, #2
    bd44:	beq.n	bd76 <pinMode+0x5a>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
    bd46:	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    bd48:	ite	eq
    bd4a:	ldreq	r2, [pc, #52]	; (bd80 <pinMode+0x64>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    bd4c:	ldrne	r2, [pc, #52]	; (bd84 <pinMode+0x68>)
    bd4e:	str	r2, [r3, #0]
    bd50:	b.n	bd62 <pinMode+0x46>
		*(p->reg + 1) |= p->mask; // TODO: atomic
    bd52:	orrs	r3, r4
		if (mode == OUTPUT) {
    bd54:	cmp	r1, #1
		*(p->reg + 1) |= p->mask; // TODO: atomic
    bd56:	str	r3, [r2, #4]
			*(p->pad) = IOMUXC_PAD_DSE(7);
    bd58:	ldr	r3, [r0, #8]
		if (mode == OUTPUT) {
    bd5a:	beq.n	bd6e <pinMode+0x52>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    bd5c:	movw	r2, #2104	; 0x838
    bd60:	str	r2, [r3, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    bd62:	ldr	r3, [r0, #4]
    bd64:	movs	r2, #21
}
    bd66:	ldr.w	r4, [sp], #4
	*(p->mux) = 5 | 0x10;
    bd6a:	str	r2, [r3, #0]
}
    bd6c:	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7);
    bd6e:	movs	r2, #56	; 0x38
    bd70:	str	r2, [r3, #0]
    bd72:	b.n	bd62 <pinMode+0x46>
    bd74:	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    bd76:	ldr	r2, [pc, #16]	; (bd88 <pinMode+0x6c>)
    bd78:	str	r2, [r3, #0]
    bd7a:	b.n	bd62 <pinMode+0x46>
    bd7c:	.word	0x20000ebc
    bd80:	.word	0x00013038
    bd84:	.word	0x00010038
    bd88:	.word	0x0001f038

0000bd8c <flexpwm_init>:
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    bd8c:	movs	r3, #0
	p->FSTS0 = 0x000F; // clear fault status
    bd8e:	movs	r2, #15
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    bd90:	movw	ip, #33464	; 0x82b8
	for (i=0; i < 4; i++) {
    bd94:	mov	r1, r3
{
    bd96:	push	{r4, lr}
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    bd98:	mov.w	r4, #61440	; 0xf000
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    bd9c:	mov.w	lr, #1024	; 0x400
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    bda0:	strh.w	r4, [r0, #396]	; 0x18c
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    bda4:	mov.w	r4, #57344	; 0xe000
	p->FSTS0 = 0x000F; // clear fault status
    bda8:	strh.w	r2, [r0, #398]	; 0x18e
		p->SM[i].OCTRL = 0;
    bdac:	mov	r2, r1
	p->FFILT0 = 0;
    bdae:	strh.w	r3, [r0, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    bdb2:	ldrh.w	r3, [r0, #392]	; 0x188
    bdb6:	uxth	r3, r3
    bdb8:	orr.w	r3, r3, #240	; 0xf0
    bdbc:	strh.w	r3, [r0, #392]	; 0x188
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    bdc0:	add.w	r3, r1, r1, lsl #1
	for (i=0; i < 4; i++) {
    bdc4:	adds	r1, #1
    bdc6:	add.w	r3, r0, r3, lsl #5
    bdca:	cmp	r1, #4
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    bdcc:	strh	r4, [r3, #4]
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    bdce:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    bdd2:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    bdd4:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    bdd6:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    bdd8:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    bdda:	strh.w	ip, [r3, #14]
		p->SM[i].VAL2 = 0;
    bdde:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    bde0:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    bde2:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    bde4:	strh	r2, [r3, #30]
	for (i=0; i < 4; i++) {
    bde6:	bne.n	bdc0 <flexpwm_init+0x34>
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    bde8:	ldrh.w	r3, [r0, #392]	; 0x188
    bdec:	uxth	r3, r3
    bdee:	orr.w	r3, r3, #15
    bdf2:	strh.w	r3, [r0, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    bdf6:	ldrh.w	r3, [r0, #392]	; 0x188
    bdfa:	uxth	r3, r3
    bdfc:	orr.w	r3, r3, #3840	; 0xf00
    be00:	strh.w	r3, [r0, #392]	; 0x188
}
    be04:	pop	{r4, pc}
    be06:	nop

0000be08 <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    be08:	ldr	r3, [pc, #220]	; (bee8 <pwm_init+0xe0>)
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    be0a:	ldr	r2, [pc, #224]	; (beec <pwm_init+0xe4>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    be0c:	ldr	r1, [r3, #120]	; 0x78
		CCM_CCGR6_QTIMER3(CCM_CCGR_ON) | CCM_CCGR6_QTIMER4(CCM_CCGR_ON);
	flexpwm_init(&IMXRT_FLEXPWM1);
    be0e:	ldr	r0, [pc, #224]	; (bef0 <pwm_init+0xe8>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    be10:	orr.w	r1, r1, #16711680	; 0xff0000
{
    be14:	push	{r4, r5, r6, lr}
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    be16:	str	r1, [r3, #120]	; 0x78
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    be18:	movw	r6, #4097	; 0x1001
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    be1c:	ldr.w	r1, [r3, #128]	; 0x80
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    be20:	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    be24:	movw	r4, #12326	; 0x3026
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    be28:	orrs	r2, r1
    be2a:	str.w	r2, [r3, #128]	; 0x80
	flexpwm_init(&IMXRT_FLEXPWM1);
    be2e:	bl	bd8c <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM2);
    be32:	add.w	r0, r0, #16384	; 0x4000
    be36:	bl	bd8c <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM3);
    be3a:	add.w	r0, r0, #16384	; 0x4000
    be3e:	bl	bd8c <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM4);
    be42:	add.w	r0, r0, #16384	; 0x4000
    be46:	bl	bd8c <flexpwm_init>
	for (i=0; i < 4; i++) {
    be4a:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    be4c:	sub.w	r0, r0, #2146304	; 0x20c000
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    be50:	mov.w	lr, #15
		p->CH[i].CTRL = 0; // stop timer
    be54:	mov	r1, r2
    be56:	add.w	r3, r0, r2, lsl #5
    be5a:	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    be5e:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    be60:	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    be62:	cmp	r2, #4
		p->CH[i].CNTR = 0;
    be64:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    be66:	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    be6a:	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    be6c:	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    be6e:	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    be72:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    be74:	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    be76:	bne.n	be56 <pwm_init+0x4e>
    be78:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    be7a:	ldr	r0, [pc, #120]	; (bef4 <pwm_init+0xec>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    be7c:	mov.w	lr, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    be80:	movw	r6, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    be84:	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    be86:	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    be8a:	movw	r4, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    be8e:	add.w	r3, r0, r2, lsl #5
    be92:	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    be96:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    be98:	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    be9a:	cmp	r2, #4
		p->CH[i].CNTR = 0;
    be9c:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    be9e:	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    bea2:	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    bea4:	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    bea6:	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    beaa:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    beac:	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    beae:	bne.n	be8e <pwm_init+0x86>
    beb0:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    beb2:	ldr	r0, [pc, #68]	; (bef8 <pwm_init+0xf0>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    beb4:	movs	r6, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    beb6:	movw	r5, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    beba:	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    bebc:	movw	r4, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    bec0:	movw	lr, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    bec4:	add.w	r3, r0, r2, lsl #5
    bec8:	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    becc:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    bece:	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    bed0:	cmp	r2, #4
		p->CH[i].CNTR = 0;
    bed2:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    bed4:	strh	r6, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    bed6:	strh	r5, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    bed8:	strh	r4, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    beda:	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    bede:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    bee0:	strh.w	lr, [r3, #12]
	for (i=0; i < 4; i++) {
    bee4:	bne.n	bec4 <pwm_init+0xbc>
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    bee6:	pop	{r4, r5, r6, pc}
    bee8:	.word	0x400fc000
    beec:	.word	0xfc030000
    bef0:	.word	0x403dc000
    bef4:	.word	0x401e0000
    bef8:	.word	0x401e4000

0000befc <rx_queue_transfer>:
{
    befc:	push	{r3, r4, r5, r6, r7, lr}
	void *buffer = rx_buffer + i * MIDI_RX_SIZE_480;
    befe:	ldr	r4, [pc, #80]	; (bf50 <rx_queue_transfer+0x54>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    bf00:	mov.w	r5, #3758153728	; 0xe000e000
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    bf04:	ldr	r6, [pc, #76]	; (bf54 <rx_queue_transfer+0x58>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    bf06:	mov.w	r2, #131072	; 0x20000
	void *buffer = rx_buffer + i * MIDI_RX_SIZE_480;
    bf0a:	add.w	r4, r4, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    bf0e:	ldr	r7, [pc, #72]	; (bf58 <rx_queue_transfer+0x5c>)
    bf10:	add.w	r6, r6, r0, lsl #5
{
    bf14:	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
    bf16:	str.w	r2, [r5, #396]	; 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    bf1a:	mov	r1, r4
    bf1c:	ldrh	r2, [r7, #0]
    bf1e:	mov	r0, r6
    bf20:	bl	b7f8 <usb_prepare_transfer>
	arm_dcache_delete(buffer, rx_packet_size);
    bf24:	ldrh	r3, [r7, #0]
	uint32_t end_addr = (uint32_t)addr + size;
    bf26:	add	r3, r4
	asm("dsb");
    bf28:	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    bf2c:	str.w	r4, [r5, #3932]	; 0xf5c
		location += 32;
    bf30:	adds	r4, #32
	} while (location < end_addr);
    bf32:	cmp	r3, r4
    bf34:	bhi.n	bf2c <rx_queue_transfer+0x30>
	asm("dsb");
    bf36:	dsb	sy
	asm("isb");
    bf3a:	isb	sy
	usb_receive(MIDI_RX_ENDPOINT, rx_transfer + i);
    bf3e:	movs	r0, #4
    bf40:	mov	r1, r6
    bf42:	bl	b850 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    bf46:	mov.w	r3, #131072	; 0x20000
    bf4a:	str.w	r3, [r5, #268]	; 0x10c
}
    bf4e:	pop	{r3, r4, r5, r6, r7, pc}
    bf50:	.word	0x20203d00
    bf54:	.word	0x20003020
    bf58:	.word	0x20007b66

0000bf5c <rx_event>:
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    bf5c:	ldr	r2, [r0, #4]
	len &= 0xFFFC; // MIDI packets must be multiple of 4 bytes
    bf5e:	movw	r1, #65532	; 0xfffc
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    bf62:	ldr	r3, [pc, #68]	; (bfa8 <rx_event+0x4c>)
    bf64:	ubfx	r2, r2, #16, #15
	int i = t->callback_param;
    bf68:	ldr	r0, [r0, #28]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    bf6a:	ldrh	r3, [r3, #0]
    bf6c:	subs	r3, r3, r2
	if (len > 0) {
    bf6e:	ands	r3, r1
    bf70:	beq.n	bfa2 <rx_event+0x46>
		rx_count[i] = len;
    bf72:	ldr	r1, [pc, #56]	; (bfac <rx_event+0x50>)
{
    bf74:	push	{r4, r5}
		uint32_t head = rx_head;
    bf76:	ldr	r4, [pc, #56]	; (bfb0 <rx_event+0x54>)
		rx_index[i] = 0;
    bf78:	ldr	r5, [pc, #56]	; (bfb4 <rx_event+0x58>)
		uint32_t head = rx_head;
    bf7a:	ldrb	r2, [r4, #0]
		rx_count[i] = len;
    bf7c:	strh.w	r3, [r1, r0, lsl #1]
		rx_index[i] = 0;
    bf80:	movs	r1, #0
		if (++head > RX_NUM) head = 0;
    bf82:	adds	r2, #1
		rx_index[i] = 0;
    bf84:	strh.w	r1, [r5, r0, lsl #1]
		if (++head > RX_NUM) head = 0;
    bf88:	cmp	r2, #6
		rx_head = head;
    bf8a:	ite	ls
    bf8c:	uxtbls	r1, r2
		if (++head > RX_NUM) head = 0;
    bf8e:	movhi	r2, r1
		rx_head = head;
    bf90:	strb	r1, [r4, #0]
		rx_available += len;
    bf92:	ldr	r1, [pc, #36]	; (bfb8 <rx_event+0x5c>)
    bf94:	ldr	r4, [r1, #0]
    bf96:	add	r3, r4
    bf98:	str	r3, [r1, #0]
		rx_list[head] = i;
    bf9a:	ldr	r3, [pc, #32]	; (bfbc <rx_event+0x60>)
    bf9c:	strb	r0, [r3, r2]
}
    bf9e:	pop	{r4, r5}
    bfa0:	bx	lr
		rx_queue_transfer(i);
    bfa2:	b.w	befc <rx_queue_transfer>
    bfa6:	nop
    bfa8:	.word	0x20007b66
    bfac:	.word	0x20007ab4
    bfb0:	.word	0x20007b81
    bfb4:	.word	0x20007ad0
    bfb8:	.word	0x20007aa0
    bfbc:	.word	0x20007ae8

0000bfc0 <usb_midi_configure>:
	if (usb_high_speed) {
    bfc0:	ldr	r3, [pc, #132]	; (c048 <usb_midi_configure+0x88>)
{
    bfc2:	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
    bfc4:	ldrb	r3, [r3, #0]
    bfc6:	cmp	r3, #0
    bfc8:	beq.n	c042 <usb_midi_configure+0x82>
    bfca:	mov.w	r3, #512	; 0x200
    bfce:	mov	r6, r3
		rx_packet_size = MIDI_RX_SIZE_480;
    bfd0:	ldr	r1, [pc, #120]	; (c04c <usb_midi_configure+0x8c>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
    bfd2:	movs	r2, #128	; 0x80
		tx_packet_size = MIDI_TX_SIZE_480;
    bfd4:	ldr	r5, [pc, #120]	; (c050 <usb_midi_configure+0x90>)
	tx_head = 0;
    bfd6:	movs	r4, #0
		rx_packet_size = MIDI_RX_SIZE_480;
    bfd8:	strh	r3, [r1, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    bfda:	movs	r1, #0
    bfdc:	ldr	r0, [pc, #116]	; (c054 <usb_midi_configure+0x94>)
		tx_packet_size = MIDI_TX_SIZE_480;
    bfde:	strh	r3, [r5, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    bfe0:	bl	e110 <memset>
	tx_head = 0;
    bfe4:	ldr	r2, [pc, #112]	; (c058 <usb_midi_configure+0x98>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    bfe6:	mov	r1, r4
	tx_available = 0;
    bfe8:	ldr	r3, [pc, #112]	; (c05c <usb_midi_configure+0x9c>)
	tx_head = 0;
    bfea:	strb	r4, [r2, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    bfec:	movs	r2, #192	; 0xc0
    bfee:	ldr	r0, [pc, #112]	; (c060 <usb_midi_configure+0xa0>)
	tx_available = 0;
    bff0:	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    bff2:	bl	e110 <memset>
	memset(rx_count, 0, sizeof(rx_count));
    bff6:	ldr	r2, [pc, #108]	; (c064 <usb_midi_configure+0xa4>)
	usb_config_rx(MIDI_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    bff8:	mov	r1, r6
	memset(rx_index, 0, sizeof(rx_index));
    bffa:	ldr	r3, [pc, #108]	; (c068 <usb_midi_configure+0xa8>)
	usb_config_rx(MIDI_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    bffc:	movs	r0, #4
	memset(rx_count, 0, sizeof(rx_count));
    bffe:	str	r4, [r2, #8]
	memset(rx_index, 0, sizeof(rx_index));
    c000:	str	r4, [r3, #8]
	memset(rx_count, 0, sizeof(rx_count));
    c002:	strd	r4, r4, [r2]
	rx_head = 0;
    c006:	ldr	r2, [pc, #100]	; (c06c <usb_midi_configure+0xac>)
	memset(rx_index, 0, sizeof(rx_index));
    c008:	strd	r4, r4, [r3]
	rx_head = 0;
    c00c:	strb	r4, [r2, #0]
	rx_tail = 0;
    c00e:	ldr	r3, [pc, #96]	; (c070 <usb_midi_configure+0xb0>)
	rx_available = 0;
    c010:	ldr	r2, [pc, #96]	; (c074 <usb_midi_configure+0xb4>)
	rx_tail = 0;
    c012:	strb	r4, [r3, #0]
	usb_config_rx(MIDI_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    c014:	ldr	r3, [pc, #96]	; (c078 <usb_midi_configure+0xb8>)
	rx_available = 0;
    c016:	str	r4, [r2, #0]
	usb_config_rx(MIDI_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    c018:	mov	r2, r4
    c01a:	bl	b660 <usb_config_rx>
	usb_config_tx(MIDI_TX_ENDPOINT, tx_packet_size, 0, NULL); // TODO: is ZLP needed?
    c01e:	mov	r3, r4
    c020:	mov	r2, r4
    c022:	ldrh	r1, [r5, #0]
    c024:	movs	r0, #4
    c026:	bl	b6c4 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    c02a:	mov	r0, r4
    c02c:	adds	r4, #1
    c02e:	bl	befc <rx_queue_transfer>
    c032:	cmp	r4, #6
    c034:	bne.n	c02a <usb_midi_configure+0x6a>
	transmit_previous_timeout = 0;
    c036:	movs	r3, #0
    c038:	ldr	r1, [pc, #64]	; (c07c <usb_midi_configure+0xbc>)
	tx_noautoflush = 0;
    c03a:	ldr	r2, [pc, #68]	; (c080 <usb_midi_configure+0xc0>)
	transmit_previous_timeout = 0;
    c03c:	strb	r3, [r1, #0]
	tx_noautoflush = 0;
    c03e:	strb	r3, [r2, #0]
}
    c040:	pop	{r4, r5, r6, pc}
    c042:	movs	r3, #64	; 0x40
    c044:	mov	r6, r3
    c046:	b.n	bfd0 <usb_midi_configure+0x10>
    c048:	.word	0x20007b91
    c04c:	.word	0x20007b66
    c050:	.word	0x20007b6e
    c054:	.word	0x200031a0
    c058:	.word	0x20007b88
    c05c:	.word	0x20007b6a
    c060:	.word	0x20003020
    c064:	.word	0x20007ab4
    c068:	.word	0x20007ad0
    c06c:	.word	0x20007b81
    c070:	.word	0x20007b83
    c074:	.word	0x20007aa0
    c078:	.word	0x0000bf5d
    c07c:	.word	0x20007b86
    c080:	.word	0x20007b8a

0000c084 <usb_midi_flush_output>:
{
    c084:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (tx_noautoflush == 0 && tx_available > 0) {
    c088:	ldr	r3, [pc, #132]	; (c110 <usb_midi_flush_output+0x8c>)
    c08a:	ldrb	r5, [r3, #0]
    c08c:	cbnz	r5, c094 <usb_midi_flush_output+0x10>
    c08e:	ldr	r6, [pc, #132]	; (c114 <usb_midi_flush_output+0x90>)
    c090:	ldrh	r3, [r6, #0]
    c092:	cbnz	r3, c098 <usb_midi_flush_output+0x14>
}
    c094:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		uint32_t head = tx_head;
    c098:	ldr.w	r8, [pc, #136]	; c124 <usb_midi_flush_output+0xa0>
		transfer_t *xfer = tx_transfer + head;
    c09c:	ldr	r2, [pc, #120]	; (c118 <usb_midi_flush_output+0x94>)
		uint32_t head = tx_head;
    c09e:	ldrb.w	r7, [r8]
		uint8_t *txbuf = txbuffer + (head * TX_SIZE);
    c0a2:	ldr	r4, [pc, #120]	; (c11c <usb_midi_flush_output+0x98>)
		transfer_t *xfer = tx_transfer + head;
    c0a4:	add.w	r9, r2, r7, lsl #5
		uint32_t len = tx_packet_size - tx_available;
    c0a8:	ldr	r2, [pc, #116]	; (c120 <usb_midi_flush_output+0x9c>)
		uint8_t *txbuf = txbuffer + (head * TX_SIZE);
    c0aa:	add.w	r4, r4, r7, lsl #9
		uint32_t len = tx_packet_size - tx_available;
    c0ae:	ldrh	r2, [r2, #0]
		usb_prepare_transfer(xfer, txbuf, len, 0);
    c0b0:	mov	r0, r9
    c0b2:	mov	r1, r4
    c0b4:	subs	r2, r2, r3
    c0b6:	mov	r3, r5
    c0b8:	bl	b7f8 <usb_prepare_transfer>
	asm("dsb");
    c0bc:	dsb	sy
    c0c0:	add.w	r2, r4, #32
	uint32_t end_addr = (uint32_t)addr + size;
    c0c4:	add.w	r3, r4, #512	; 0x200
    c0c8:	cmp	r3, r2
    c0ca:	ite	cc
    c0cc:	movcc	r3, #1
    c0ce:	movcs	r3, #16
		SCB_CACHE_DCCIMVAC = location;
    c0d0:	mov.w	r2, #3758153728	; 0xe000e000
    c0d4:	add.w	r3, r4, r3, lsl #5
    c0d8:	str.w	r4, [r2, #3952]	; 0xf70
		location += 32;
    c0dc:	adds	r4, #32
	} while (location < end_addr);
    c0de:	cmp	r4, r3
    c0e0:	bne.n	c0d8 <usb_midi_flush_output+0x54>
	asm("dsb");
    c0e2:	dsb	sy
	asm("isb");
    c0e6:	isb	sy
		if (++head >= TX_NUM) head = 0;
    c0ea:	adds	r7, #1
		usb_transmit(MIDI_TX_ENDPOINT, xfer);
    c0ec:	mov	r1, r9
    c0ee:	movs	r0, #4
    c0f0:	bl	b828 <usb_transmit>
		if (++head >= TX_NUM) head = 0;
    c0f4:	cmp	r7, #3
		tx_available = 0;
    c0f6:	mov.w	r3, #0
		usb_stop_sof_interrupts(MIDI_INTERFACE);
    c0fa:	mov.w	r0, #2
		tx_head = head;
    c0fe:	it	ls
    c100:	uxtbls	r5, r7
		tx_available = 0;
    c102:	strh	r3, [r6, #0]
		tx_head = head;
    c104:	strb.w	r5, [r8]
}
    c108:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		usb_stop_sof_interrupts(MIDI_INTERFACE);
    c10c:	b.w	aef4 <usb_stop_sof_interrupts>
    c110:	.word	0x20007b8a
    c114:	.word	0x20007b6a
    c118:	.word	0x200031a0
    c11c:	.word	0x20204900
    c120:	.word	0x20007b6e
    c124:	.word	0x20007b88

0000c128 <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    c128:	ldr	r2, [pc, #72]	; (c174 <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    c12a:	ldr	r3, [pc, #76]	; (c178 <usb_init_serialnumber+0x50>)
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    c12c:	ldr.w	r0, [r2, #544]	; 0x220
    c130:	bic.w	r0, r0, #4278190080	; 0xff000000
	if (num < 10000000) num = num * 10;
    c134:	cmp	r0, r3
{
    c136:	push	{r4, lr}
    c138:	sub	sp, #16
	if (num < 10000000) num = num * 10;
    c13a:	bcs.n	c142 <usb_init_serialnumber+0x1a>
    c13c:	add.w	r0, r0, r0, lsl #2
    c140:	lsls	r0, r0, #1
	ultoa(num, buf, 10);
    c142:	ldr	r4, [pc, #56]	; (c17c <usb_init_serialnumber+0x54>)
    c144:	add	r1, sp, #4
    c146:	movs	r2, #10
    c148:	bl	d14c <ultoa>
	for (i=0; i<10; i++) {
    c14c:	add	r1, sp, #4
    c14e:	movs	r3, #0
    c150:	mov	r0, r4
		char c = buf[i];
    c152:	ldrb.w	r2, [r1], #1
	for (i=0; i<10; i++) {
    c156:	adds	r3, #1
		if (!c) break;
    c158:	cbz	r2, c16a <usb_init_serialnumber+0x42>
	for (i=0; i<10; i++) {
    c15a:	cmp	r3, #10
		usb_string_serial_number_default.wString[i] = c;
    c15c:	strh.w	r2, [r0, #2]!
	for (i=0; i<10; i++) {
    c160:	bne.n	c152 <usb_init_serialnumber+0x2a>
    c162:	movs	r3, #22
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    c164:	strb	r3, [r4, #0]
}
    c166:	add	sp, #16
    c168:	pop	{r4, pc}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    c16a:	lsls	r3, r3, #1
    c16c:	uxtb	r3, r3
    c16e:	strb	r3, [r4, #0]
}
    c170:	add	sp, #16
    c172:	pop	{r4, pc}
    c174:	.word	0x401f4400
    c178:	.word	0x00989680
    c17c:	.word	0x20001a30

0000c180 <yield>:

extern const uint8_t _serialEvent_default;	

void yield(void) __attribute__ ((weak));
void yield(void)
{
    c180:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
    c184:	ldr	r6, [pc, #200]	; (c250 <yield+0xd0>)
    c186:	ldrb	r3, [r6, #0]
    c188:	cbz	r3, c1a4 <yield+0x24>
	if (running) return; // TODO: does this need to be atomic?
    c18a:	ldr	r7, [pc, #200]	; (c254 <yield+0xd4>)
    c18c:	ldrb	r2, [r7, #0]
    c18e:	cbnz	r2, c1a4 <yield+0x24>
	running = 1;
    c190:	movs	r2, #1


	// USB Serial - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    c192:	lsls	r1, r3, #31
	running = 1;
    c194:	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    c196:	bmi.n	c222 <yield+0xa2>
		if (_serialEventUSB2_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIALUSB2;
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) HardwareSerial::processSerialEventsList();
    c198:	lsls	r2, r3, #30
    c19a:	bmi.n	c1ea <yield+0x6a>

	running = 0;
    c19c:	movs	r2, #0
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    c19e:	lsls	r3, r3, #29
	running = 0;
    c1a0:	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    c1a2:	bmi.n	c1a8 <yield+0x28>
	
};
    c1a4:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	// Wait for event(s) to occur.  These are most likely to be useful when
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);
	static void runFromYield() {
		if (!firstYield) return;  
    c1a8:	ldr	r3, [pc, #172]	; (c258 <yield+0xd8>)
    c1aa:	ldr	r2, [r3, #0]
    c1ac:	cmp	r2, #0
    c1ae:	beq.n	c1a4 <yield+0x24>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    c1b0:	mrs	r2, IPSR
		if (ipsr != 0) return;
    c1b4:	cmp	r2, #0
    c1b6:	bne.n	c1a4 <yield+0x24>
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    c1b8:	mrs	r5, PRIMASK
		__disable_irq();
    c1bc:	cpsid	i
		EventResponder *first = firstYield;
    c1be:	ldr	r0, [r3, #0]
		if (first == nullptr) {
    c1c0:	cmp	r0, #0
    c1c2:	beq.n	c23c <yield+0xbc>
		if (runningFromYield) {
    c1c4:	ldr	r4, [pc, #148]	; (c25c <yield+0xdc>)
    c1c6:	ldrb	r1, [r4, #0]
    c1c8:	cmp	r1, #0
    c1ca:	bne.n	c23c <yield+0xbc>
		runningFromYield = true;
    c1cc:	movs	r2, #1
    c1ce:	strb	r2, [r4, #0]
		firstYield = first->_next;
    c1d0:	ldr	r2, [r0, #20]
    c1d2:	str	r2, [r3, #0]
		if (firstYield) {
    c1d4:	cmp	r2, #0
    c1d6:	beq.n	c24a <yield+0xca>
			firstYield->_prev = nullptr;
    c1d8:	str	r1, [r2, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    c1da:	cbnz	r5, c1de <yield+0x5e>
    c1dc:	cpsie	i
		first->_triggered = false;
    c1de:	movs	r5, #0
		(*(first->_function))(*first);
    c1e0:	ldr	r3, [r0, #8]
		first->_triggered = false;
    c1e2:	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    c1e4:	blx	r3
		runningFromYield = false;
    c1e6:	strb	r5, [r4, #0]
    c1e8:	b.n	c1a4 <yield+0x24>
	*/

	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    c1ea:	ldr.w	r8, [pc, #124]	; c268 <yield+0xe8>
    c1ee:	ldrb.w	r2, [r8]
    c1f2:	cmp	r2, #0
    c1f4:	beq.n	c19c <yield+0x1c>
    c1f6:	movs	r5, #0
    c1f8:	ldr.w	r9, [pc, #112]	; c26c <yield+0xec>
    c1fc:	mov	r3, r5
			s_serials_with_serial_events[i]->doYieldCode();
    c1fe:	ldr.w	r4, [r9, r3, lsl #2]
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    c202:	adds	r5, #1
	static HardwareSerial 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
    c204:	ldr	r3, [r4, #0]
    c206:	mov	r0, r4
    c208:	ldr	r3, [r3, #16]
    c20a:	blx	r3
    c20c:	cbz	r0, c214 <yield+0x94>
    c20e:	ldr	r3, [r4, #20]
    c210:	ldr	r3, [r3, #8]
    c212:	blx	r3
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    c214:	ldrb.w	r2, [r8]
    c218:	uxtb	r3, r5
    c21a:	cmp	r2, r3
    c21c:	bhi.n	c1fe <yield+0x7e>
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    c21e:	ldrb	r3, [r6, #0]
    c220:	b.n	c19c <yield+0x1c>
    c222:	bl	a814 <usb_serial_available>
		if (Serial.available()) serialEvent();
    c226:	cbnz	r0, c244 <yield+0xc4>
		if (_serialEvent_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIAL;
    c228:	ldr	r3, [pc, #52]	; (c260 <yield+0xe0>)
    c22a:	ldrb	r3, [r3, #0]
    c22c:	cbnz	r3, c232 <yield+0xb2>
    c22e:	ldrb	r3, [r6, #0]
    c230:	b.n	c198 <yield+0x18>
    c232:	ldrb	r3, [r6, #0]
    c234:	and.w	r3, r3, #254	; 0xfe
    c238:	strb	r3, [r6, #0]
    c23a:	b.n	c198 <yield+0x18>
		if (doit) __enable_irq();
    c23c:	cmp	r5, #0
    c23e:	bne.n	c1a4 <yield+0x24>
    c240:	cpsie	i
    c242:	b.n	c1a4 <yield+0x24>
		if (Serial.available()) serialEvent();
    c244:	bl	d140 <serialEvent()>
    c248:	b.n	c228 <yield+0xa8>
			lastYield = nullptr;
    c24a:	ldr	r3, [pc, #24]	; (c264 <yield+0xe4>)
    c24c:	str	r2, [r3, #0]
    c24e:	b.n	c1da <yield+0x5a>
    c250:	.word	0x20001a4b
    c254:	.word	0x20007b7c
    c258:	.word	0x20006520
    c25c:	.word	0x20007b79
    c260:	.word	0x60002376
    c264:	.word	0x2000652c
    c268:	.word	0x20007b7a
    c26c:	.word	0x20006530

0000c270 <EventResponder::triggerEventNotImmediate()>:
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    c270:	mrs	r2, PRIMASK
		__disable_irq();
    c274:	cpsid	i
	if (_triggered == false) {
    c276:	ldrb	r3, [r0, #29]
    c278:	cbnz	r3, c292 <EventResponder::triggerEventNotImmediate()+0x22>
		if (_type == EventTypeYield) {
    c27a:	ldrb	r1, [r0, #28]
    c27c:	cmp	r1, #1
{
    c27e:	push	{r4, r5}
		if (_type == EventTypeYield) {
    c280:	beq.n	c29a <EventResponder::triggerEventNotImmediate()+0x2a>
		} else if (_type == EventTypeInterrupt) {
    c282:	cmp	r1, #3
    c284:	beq.n	c2ae <EventResponder::triggerEventNotImmediate()+0x3e>
		_triggered = true;
    c286:	movs	r3, #1
    c288:	strb	r3, [r0, #29]
		if (doit) __enable_irq();
    c28a:	cbnz	r2, c28e <EventResponder::triggerEventNotImmediate()+0x1e>
    c28c:	cpsie	i
}
    c28e:	pop	{r4, r5}
    c290:	bx	lr
    c292:	cbnz	r2, c298 <EventResponder::triggerEventNotImmediate()+0x28>
    c294:	cpsie	i
    c296:	bx	lr
    c298:	bx	lr
			if (firstYield == nullptr) {
    c29a:	ldr	r4, [pc, #72]	; (c2e4 <EventResponder::triggerEventNotImmediate()+0x74>)
    c29c:	ldr	r1, [r4, #0]
    c29e:	cbz	r1, c2ce <EventResponder::triggerEventNotImmediate()+0x5e>
				_prev = lastYield;
    c2a0:	ldr	r1, [pc, #68]	; (c2e8 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
    c2a2:	str	r3, [r0, #20]
				_prev = lastYield;
    c2a4:	ldr	r3, [r1, #0]
				lastYield = this;
    c2a6:	str	r0, [r1, #0]
				_prev = lastYield;
    c2a8:	str	r3, [r0, #24]
				_prev->_next = this;
    c2aa:	str	r0, [r3, #20]
				lastYield = this;
    c2ac:	b.n	c286 <EventResponder::triggerEventNotImmediate()+0x16>
			if (firstInterrupt == nullptr) {
    c2ae:	ldr	r5, [pc, #60]	; (c2ec <EventResponder::triggerEventNotImmediate()+0x7c>)
    c2b0:	ldr	r1, [pc, #60]	; (c2f0 <EventResponder::triggerEventNotImmediate()+0x80>)
    c2b2:	ldr	r4, [r5, #0]
    c2b4:	cbz	r4, c2da <EventResponder::triggerEventNotImmediate()+0x6a>
				_next = nullptr;
    c2b6:	str	r3, [r0, #20]
				_prev = lastInterrupt;
    c2b8:	ldr	r3, [r1, #0]
    c2ba:	str	r3, [r0, #24]
				_prev->_next = this;
    c2bc:	str	r0, [r3, #20]
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    c2be:	mov.w	r3, #3758153728	; 0xe000e000
    c2c2:	mov.w	r4, #268435456	; 0x10000000
				lastInterrupt = this;
    c2c6:	str	r0, [r1, #0]
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    c2c8:	str.w	r4, [r3, #3332]	; 0xd04
    c2cc:	b.n	c286 <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
    c2ce:	ldr	r3, [pc, #24]	; (c2e8 <EventResponder::triggerEventNotImmediate()+0x78>)
				firstYield = this;
    c2d0:	str	r0, [r4, #0]
				lastYield = this;
    c2d2:	str	r0, [r3, #0]
				_prev = nullptr;
    c2d4:	strd	r1, r1, [r0, #20]
				lastYield = this;
    c2d8:	b.n	c286 <EventResponder::triggerEventNotImmediate()+0x16>
				_prev = nullptr;
    c2da:	strd	r4, r4, [r0, #20]
				firstInterrupt = this;
    c2de:	str	r0, [r5, #0]
				lastInterrupt = this;
    c2e0:	b.n	c2be <EventResponder::triggerEventNotImmediate()+0x4e>
    c2e2:	nop
    c2e4:	.word	0x20006520
    c2e8:	.word	0x2000652c
    c2ec:	.word	0x20006528
    c2f0:	.word	0x20006524

0000c2f4 <EventResponder::runFromInterrupt()>:
{
    c2f4:	push	{r4, r5, r6, lr}
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    c2f6:	mrs	r2, PRIMASK
		__disable_irq();
    c2fa:	cpsid	i
		EventResponder *first = firstInterrupt;
    c2fc:	ldr	r4, [pc, #48]	; (c330 <EventResponder::runFromInterrupt()+0x3c>)
    c2fe:	ldr	r0, [r4, #0]
		if (first) {
    c300:	cbz	r0, c324 <EventResponder::runFromInterrupt()+0x30>
				lastInterrupt = nullptr;
    c302:	ldr	r6, [pc, #48]	; (c334 <EventResponder::runFromInterrupt()+0x40>)
				firstInterrupt->_prev = nullptr;
    c304:	movs	r5, #0
			firstInterrupt = first->_next;
    c306:	ldr	r3, [r0, #20]
    c308:	str	r3, [r4, #0]
			if (firstInterrupt) {
    c30a:	cbz	r3, c32a <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    c30c:	str	r5, [r3, #24]
		if (doit) __enable_irq();
    c30e:	cbnz	r2, c312 <EventResponder::runFromInterrupt()+0x1e>
    c310:	cpsie	i
			(*(first->_function))(*first);
    c312:	ldr	r3, [r0, #8]
			first->_triggered = false;
    c314:	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    c316:	blx	r3
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    c318:	mrs	r2, PRIMASK
		__disable_irq();
    c31c:	cpsid	i
		EventResponder *first = firstInterrupt;
    c31e:	ldr	r0, [r4, #0]
		if (first) {
    c320:	cmp	r0, #0
    c322:	bne.n	c306 <EventResponder::runFromInterrupt()+0x12>
		if (doit) __enable_irq();
    c324:	cbnz	r2, c328 <EventResponder::runFromInterrupt()+0x34>
    c326:	cpsie	i
}
    c328:	pop	{r4, r5, r6, pc}
				lastInterrupt = nullptr;
    c32a:	str	r3, [r6, #0]
    c32c:	b.n	c30e <EventResponder::runFromInterrupt()+0x1a>
    c32e:	nop
    c330:	.word	0x20006528
    c334:	.word	0x20006524

0000c338 <pendablesrvreq_isr>:
	EventResponder::runFromInterrupt();
    c338:	b.w	c2f4 <EventResponder::runFromInterrupt()>

0000c33c <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    c33c:	ldr	r1, [pc, #16]	; (c350 <systick_isr+0x14>)
	systick_millis_count++;
    c33e:	ldr	r2, [pc, #20]	; (c354 <systick_isr+0x18>)
	systick_cycle_count = ARM_DWT_CYCCNT;
    c340:	ldr	r1, [r1, #4]
    c342:	ldr	r3, [pc, #20]	; (c358 <systick_isr+0x1c>)
    c344:	str	r1, [r3, #0]
	systick_millis_count++;
    c346:	ldr	r3, [r2, #0]
    c348:	adds	r3, #1
    c34a:	str	r3, [r2, #0]
}
    c34c:	bx	lr
    c34e:	nop
    c350:	.word	0xe0001000
    c354:	.word	0x20007b08
    c358:	.word	0x20007b04

0000c35c <DMAChannel::begin(bool)>:
#warning "CR is defined as something?"
#endif


void DMAChannel::begin(bool force_initialization)
{
    c35c:	push	{r4, r5}
	uint32_t ch = 0;

	__disable_irq();
    c35e:	cpsid	i
	if (!force_initialization && TCD && channel < DMA_MAX_CHANNELS
    c360:	cbnz	r1, c36c <DMAChannel::begin(bool)+0x10>
    c362:	ldr	r3, [r0, #0]
    c364:	cbz	r3, c36c <DMAChannel::begin(bool)+0x10>
    c366:	ldrb	r2, [r0, #4]
    c368:	cmp	r2, #15
    c36a:	bls.n	c3e4 <DMAChannel::begin(bool)+0x88>
	  && (dma_channel_allocated_mask & (1 << channel))
    c36c:	ldr	r4, [pc, #144]	; (c400 <DMAChannel::begin(bool)+0xa4>)
    c36e:	ldrh	r1, [r4, #0]
{
    c370:	movs	r3, #0
		// DMA channel already allocated
		__enable_irq();
		return;
	}
	while (1) {
		if (!(dma_channel_allocated_mask & (1 << ch))) {
    c372:	asr.w	r2, r1, r3
    c376:	ands.w	r2, r2, #1
    c37a:	beq.n	c38e <DMAChannel::begin(bool)+0x32>
			dma_channel_allocated_mask |= (1 << ch);
			__enable_irq();
			break;
		}
		if (++ch >= DMA_MAX_CHANNELS) {
    c37c:	adds	r3, #1
    c37e:	cmp	r3, #16
    c380:	bne.n	c372 <DMAChannel::begin(bool)+0x16>
			__enable_irq();
    c382:	cpsie	i
			TCD = (TCD_t *)0;
    c384:	movs	r2, #0
			channel = DMA_MAX_CHANNELS;
    c386:	strb	r3, [r0, #4]
			TCD = (TCD_t *)0;
    c388:	str	r2, [r0, #0]
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
}
    c38a:	pop	{r4, r5}
    c38c:	bx	lr
			dma_channel_allocated_mask |= (1 << ch);
    c38e:	mov.w	ip, #1
    c392:	lsl.w	ip, ip, r3
    c396:	orr.w	r1, r1, ip
    c39a:	strh	r1, [r4, #0]
			__enable_irq();
    c39c:	cpsie	i
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    c39e:	ldr	r1, [pc, #100]	; (c404 <DMAChannel::begin(bool)+0xa8>)
	channel = ch;
    c3a0:	uxtb.w	ip, r3
	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    c3a4:	ldr	r4, [pc, #96]	; (c408 <DMAChannel::begin(bool)+0xac>)
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    c3a6:	add	r1, r3
	channel = ch;
    c3a8:	strb.w	ip, [r0, #4]
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    c3ac:	lsls	r3, r1, #5
	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    c3ae:	ldr	r1, [r4, #124]	; 0x7c
    c3b0:	orr.w	r1, r1, #192	; 0xc0
    c3b4:	str	r1, [r4, #124]	; 0x7c
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
    c3b6:	movw	r4, #1154	; 0x482
    c3ba:	ldr	r1, [pc, #80]	; (c40c <DMAChannel::begin(bool)+0xb0>)
    c3bc:	str	r4, [r1, #0]
	DMA_CERQ = ch;
    c3be:	strb.w	ip, [r1, #26]
	DMA_CERR = ch;
    c3c2:	strb.w	ip, [r1, #30]
	DMA_CEEI = ch;
    c3c6:	strb.w	ip, [r1, #24]
	DMA_CINT = ch;
    c3ca:	strb.w	ip, [r1, #31]
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    c3ce:	str	r3, [r0, #0]
}
    c3d0:	pop	{r4, r5}
	*p++ = 0;
    c3d2:	strd	r2, r2, [r3]
	*p++ = 0;
    c3d6:	strd	r2, r2, [r3, #8]
	*p++ = 0;
    c3da:	strd	r2, r2, [r3, #16]
	*p++ = 0;
    c3de:	strd	r2, r2, [r3, #24]
}
    c3e2:	bx	lr
	  && (dma_channel_allocated_mask & (1 << channel))
    c3e4:	ldr	r4, [pc, #24]	; (c400 <DMAChannel::begin(bool)+0xa4>)
    c3e6:	ldrh	r1, [r4, #0]
    c3e8:	asr.w	r5, r1, r2
    c3ec:	lsls	r5, r5, #31
    c3ee:	bpl.n	c370 <DMAChannel::begin(bool)+0x14>
	  && (uint32_t)TCD == (uint32_t)(0x400E9000 + channel * 32)) {
    c3f0:	ldr	r5, [pc, #16]	; (c404 <DMAChannel::begin(bool)+0xa8>)
    c3f2:	add	r5, r2
    c3f4:	cmp.w	r3, r5, lsl #5
    c3f8:	bne.n	c370 <DMAChannel::begin(bool)+0x14>
		__enable_irq();
    c3fa:	cpsie	i
		return;
    c3fc:	b.n	c38a <DMAChannel::begin(bool)+0x2e>
    c3fe:	nop
    c400:	.word	0x20007b60
    c404:	.word	0x02007480
    c408:	.word	0x400fc000
    c40c:	.word	0x400e8000

0000c410 <DMAChannel::release()>:

void DMAChannel::release(void)
{
	if (channel >= DMA_MAX_CHANNELS) return;
    c410:	ldrb	r3, [r0, #4]
    c412:	cmp	r3, #15
    c414:	bhi.n	c43a <DMAChannel::release()+0x2a>
	DMA_CERQ = channel;
    c416:	ldr	r2, [pc, #36]	; (c43c <DMAChannel::release()+0x2c>)
    c418:	strb	r3, [r2, #26]
	__disable_irq();
    c41a:	cpsid	i
	dma_channel_allocated_mask &= ~(1 << channel);
    c41c:	ldr	r1, [pc, #32]	; (c440 <DMAChannel::release()+0x30>)
    c41e:	movs	r2, #1
    c420:	ldrb.w	ip, [r0, #4]
    c424:	ldrh	r3, [r1, #0]
    c426:	lsl.w	r2, r2, ip
    c42a:	bic.w	r3, r3, r2
    c42e:	strh	r3, [r1, #0]
	__enable_irq();
    c430:	cpsie	i
	channel = DMA_MAX_CHANNELS;
    c432:	movs	r2, #16
	TCD = (TCD_t *)0;
    c434:	movs	r3, #0
	channel = DMA_MAX_CHANNELS;
    c436:	strb	r2, [r0, #4]
	TCD = (TCD_t *)0;
    c438:	str	r3, [r0, #0]
}
    c43a:	bx	lr
    c43c:	.word	0x400e8000
    c440:	.word	0x20007b60

0000c444 <usb_serial_class::clear()>:
        virtual void clear(void) { usb_serial_flush_input(); }
    c444:	b.w	a82c <usb_serial_flush_input>

0000c448 <usb_serial_class::peek()>:
        virtual int peek() { return usb_serial_peekchar(); }
    c448:	b.w	a7d0 <usb_serial_peekchar>

0000c44c <usb_serial_class::read()>:
        virtual int read() { return usb_serial_getchar(); }
    c44c:	b.w	a89c <usb_serial_getchar>

0000c450 <usb_serial_class::available()>:
        virtual int available() { return usb_serial_available(); }
    c450:	b.w	a814 <usb_serial_available>

0000c454 <usb_serial_class::flush()>:
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    c454:	b.w	a950 <usb_serial_flush_output>

0000c458 <usb_serial_class::availableForWrite()>:
	size_t write(int n) { return write((uint8_t)n); }
	// Returns the number of bytes which may be transmitted by write() or print()
	// without waiting.  Typically programs which must maintain rapid checking
	// and response to sensors use availableForWrite() to decide whether to
	// transmit.
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    c458:	b.w	a900 <usb_serial_write_buffer_free>

0000c45c <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    c45c:	mov	r0, r1
    c45e:	mov	r1, r2
    c460:	b.w	a8e8 <usb_serial_write>

0000c464 <usb_serial_class::write(unsigned char)>:
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    c464:	mov	r0, r1
    c466:	b.w	a8bc <usb_serial_putchar>
    c46a:	nop

0000c46c <breakTime(unsigned long, DateTimeFields&)>:
  tm.sec = time % 60;
    c46c:	ldr	r2, [pc, #308]	; (c5a4 <breakTime(unsigned long, DateTimeFields&)+0x138>)
{
    c46e:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  tm.sec = time % 60;
    c472:	umull	r4, r3, r2, r0
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    c476:	movw	sl, #365	; 0x16d
    c47a:	ldr	r7, [pc, #300]	; (c5a8 <breakTime(unsigned long, DateTimeFields&)+0x13c>)
  tm.sec = time % 60;
    c47c:	lsrs	r3, r3, #5
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    c47e:	ldr.w	r8, [pc, #312]	; c5b8 <breakTime(unsigned long, DateTimeFields&)+0x14c>
    c482:	ldr.w	r9, [pc, #312]	; c5bc <breakTime(unsigned long, DateTimeFields&)+0x150>
  tm.min = time % 60;
    c486:	umull	r4, r2, r2, r3
  tm.sec = time % 60;
    c48a:	rsb	r4, r3, r3, lsl #4
  tm.min = time % 60;
    c48e:	lsrs	r2, r2, #5
  tm.sec = time % 60;
    c490:	sub.w	r0, r0, r4, lsl #2
  tm.hour = time % 24;
    c494:	ldr	r4, [pc, #276]	; (c5ac <breakTime(unsigned long, DateTimeFields&)+0x140>)
  tm.min = time % 60;
    c496:	rsb	r5, r2, r2, lsl #4
  tm.sec = time % 60;
    c49a:	strb	r0, [r1, #0]
  tm.min = time % 60;
    c49c:	sub.w	r3, r3, r5, lsl #2
  tm.hour = time % 24;
    c4a0:	umull	r5, r4, r4, r2
    c4a4:	lsrs	r4, r4, #4
  tm.min = time % 60;
    c4a6:	strb	r3, [r1, #1]
  tm.wday = ((time + 4) % 7);  // Sunday is day 0
    c4a8:	ldr	r3, [pc, #260]	; (c5b0 <breakTime(unsigned long, DateTimeFields&)+0x144>)
    c4aa:	adds	r5, r4, #4
  tm.hour = time % 24;
    c4ac:	add.w	r0, r4, r4, lsl #1
    c4b0:	sub.w	r2, r2, r0, lsl #3
  tm.wday = ((time + 4) % 7);  // Sunday is day 0
    c4b4:	umull	r0, r3, r3, r5
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    c4b8:	movs	r0, #0
  tm.hour = time % 24;
    c4ba:	strb	r2, [r1, #2]
  tm.wday = ((time + 4) % 7);  // Sunday is day 0
    c4bc:	subs	r2, r5, r3
    c4be:	add.w	r3, r3, r2, lsr #1
  days = 0;
    c4c2:	mov	r2, r0
  tm.wday = ((time + 4) % 7);  // Sunday is day 0
    c4c4:	lsrs	r3, r3, #2
    c4c6:	rsb	r3, r3, r3, lsl #3
    c4ca:	subs	r5, r5, r3
    c4cc:	strb	r5, [r1, #3]
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    c4ce:	uxtb.w	lr, r0
    c4d2:	movw	ip, #365	; 0x16d
    c4d6:	addw	r3, lr, #1970	; 0x7b2
    c4da:	ands.w	r5, r3, #3
    c4de:	mul.w	r6, r7, r3
    c4e2:	bne.n	c4f6 <breakTime(unsigned long, DateTimeFields&)+0x8a>
    c4e4:	cmp.w	r8, r6, ror #2
    c4e8:	mov.w	ip, #366	; 0x16e
    c4ec:	bcc.n	c4f6 <breakTime(unsigned long, DateTimeFields&)+0x8a>
    c4ee:	cmp.w	r9, r6, ror #4
    c4f2:	it	cc
    c4f4:	movcc	ip, sl
    c4f6:	add	r2, ip
    c4f8:	adds	r0, #1
    c4fa:	cmp	r4, r2
    c4fc:	bcs.n	c4ce <breakTime(unsigned long, DateTimeFields&)+0x62>
  tm.year = year + 70; // year is offset from 1970
    c4fe:	add.w	lr, lr, #70	; 0x46
  days -= LEAP_YEAR(year) ? 366 : 365;
    c502:	ldr	r6, [pc, #176]	; (c5b4 <breakTime(unsigned long, DateTimeFields&)+0x148>)
  tm.year = year + 70; // year is offset from 1970
    c504:	strb.w	lr, [r1, #6]
  days -= LEAP_YEAR(year) ? 366 : 365;
    c508:	umull	r0, r6, r6, r3
    c50c:	cbz	r5, c570 <breakTime(unsigned long, DateTimeFields&)+0x104>
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    c50e:	lsrs	r7, r6, #5
    c510:	mov.w	ip, #100	; 0x64
    c514:	mov.w	r0, #400	; 0x190
    c518:	lsrs	r6, r6, #7
    c51a:	mls	r7, ip, r7, r3
    c51e:	mls	r6, r0, r6, r3
  days -= LEAP_YEAR(year) ? 366 : 365;
    c522:	movw	r0, #365	; 0x16d
  time  -= days; // now it is days in this year, starting at 0
    c526:	subs	r4, r4, r2
    c528:	movs	r3, #0
    c52a:	movs	r2, #1
      monthLength = monthDays[month];
    c52c:	ldr.w	lr, [pc, #144]	; c5c0 <breakTime(unsigned long, DateTimeFields&)+0x154>
  time  -= days; // now it is days in this year, starting at 0
    c530:	add	r0, r4
  for (month=0; month<12; month++) {
    c532:	b.n	c54a <breakTime(unsigned long, DateTimeFields&)+0xde>
    if (time >= monthLength) {
    c534:	ldrb.w	r4, [r3, lr]
    c538:	cmp	r4, r0
    c53a:	bhi.n	c55a <breakTime(unsigned long, DateTimeFields&)+0xee>
  for (month=0; month<12; month++) {
    c53c:	cmp	r2, #12
      time -= monthLength;
    c53e:	sub.w	r0, r0, r4
  for (month=0; month<12; month++) {
    c542:	beq.n	c55c <breakTime(unsigned long, DateTimeFields&)+0xf0>
    c544:	adds	r2, #1
    c546:	adds	r3, #1
    c548:	uxtb	r2, r2
    if (month==1) { // february
    c54a:	cmp	r3, #1
    c54c:	uxtb.w	ip, r3
    c550:	bne.n	c534 <breakTime(unsigned long, DateTimeFields&)+0xc8>
      if (LEAP_YEAR(year)) {
    c552:	cbnz	r5, c566 <breakTime(unsigned long, DateTimeFields&)+0xfa>
    c554:	cbz	r7, c58a <breakTime(unsigned long, DateTimeFields&)+0x11e>
    c556:	movs	r4, #29
    c558:	b.n	c568 <breakTime(unsigned long, DateTimeFields&)+0xfc>
    c55a:	mov	r2, ip
  tm.mday = time + 1;     // day of month
    c55c:	adds	r0, #1
  tm.mon = month;  // jan is month 0
    c55e:	strb	r2, [r1, #5]
  tm.mday = time + 1;     // day of month
    c560:	strb	r0, [r1, #4]
}
    c562:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c566:	movs	r4, #28
    if (time >= monthLength) {
    c568:	cmp	r0, r4
    c56a:	bcc.n	c59e <breakTime(unsigned long, DateTimeFields&)+0x132>
      time -= monthLength;
    c56c:	subs	r0, r0, r4
  for (month=0; month<12; month++) {
    c56e:	b.n	c544 <breakTime(unsigned long, DateTimeFields&)+0xd8>
  days -= LEAP_YEAR(year) ? 366 : 365;
    c570:	movs	r0, #100	; 0x64
    c572:	lsrs	r7, r6, #5
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    c574:	lsrs	r6, r6, #7
  days -= LEAP_YEAR(year) ? 366 : 365;
    c576:	mls	r7, r0, r7, r3
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    c57a:	mov.w	r0, #400	; 0x190
    c57e:	mls	r6, r0, r6, r3
  days -= LEAP_YEAR(year) ? 366 : 365;
    c582:	cbz	r7, c594 <breakTime(unsigned long, DateTimeFields&)+0x128>
    c584:	mov.w	r0, #366	; 0x16e
    c588:	b.n	c526 <breakTime(unsigned long, DateTimeFields&)+0xba>
      if (LEAP_YEAR(year)) {
    c58a:	cmp	r6, #0
    c58c:	ite	ne
    c58e:	movne	r4, #28
    c590:	moveq	r4, #29
    c592:	b.n	c568 <breakTime(unsigned long, DateTimeFields&)+0xfc>
  days -= LEAP_YEAR(year) ? 366 : 365;
    c594:	cmp	r6, #0
    c596:	bne.n	c522 <breakTime(unsigned long, DateTimeFields&)+0xb6>
    c598:	mov.w	r0, #366	; 0x16e
    c59c:	b.n	c526 <breakTime(unsigned long, DateTimeFields&)+0xba>
    if (time >= monthLength) {
    c59e:	movs	r2, #1
    c5a0:	b.n	c55c <breakTime(unsigned long, DateTimeFields&)+0xf0>
    c5a2:	nop
    c5a4:	.word	0x88888889
    c5a8:	.word	0xc28f5c29
    c5ac:	.word	0xaaaaaaab
    c5b0:	.word	0x24924925
    c5b4:	.word	0x51eb851f
    c5b8:	.word	0x028f5c28
    c5bc:	.word	0x00a3d70a
    c5c0:	.word	0x20000770

0000c5c4 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    c5c4:	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    c5c6:	bl	18a4 <setup>
	while (1) {
		loop();
    c5ca:	bl	18f4 <loop>
		yield();
    c5ce:	bl	c180 <yield>
	while (1) {
    c5d2:	b.n	c5ca <main+0x6>

0000c5d4 <AudioStream::update_all()>:
	void transmit(audio_block_t *block, unsigned char index = 0);
	audio_block_t * receiveReadOnly(unsigned int index = 0);
	audio_block_t * receiveWritable(unsigned int index = 0);
	static bool update_setup(void);
	static void update_stop(void);
	static void update_all(void) { NVIC_SET_PENDING(IRQ_SOFTWARE); }
    c5d4:	mov.w	r3, #3758153728	; 0xe000e000
    c5d8:	movs	r2, #64	; 0x40
    c5da:	str.w	r2, [r3, #520]	; 0x208
    c5de:	bx	lr

0000c5e0 <software_isr()>:
}

AudioStream * AudioStream::first_update = NULL;

void software_isr(void) // AudioStream::update_all()
{
    c5e0:	push	{r3, r4, r5, r6, r7, lr}
	AudioStream *p;

	uint32_t totalcycles = ARM_DWT_CYCCNT;
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
    c5e2:	ldr	r3, [pc, #80]	; (c634 <software_isr()+0x54>)
	uint32_t totalcycles = ARM_DWT_CYCCNT;
    c5e4:	ldr	r5, [pc, #80]	; (c638 <software_isr()+0x58>)
	for (p = AudioStream::first_update; p; p = p->next_update) {
    c5e6:	ldr	r4, [r3, #0]
	uint32_t totalcycles = ARM_DWT_CYCCNT;
    c5e8:	ldr	r6, [r5, #4]
	for (p = AudioStream::first_update; p; p = p->next_update) {
    c5ea:	cbz	r4, c614 <software_isr()+0x34>
		if (p->active) {
    c5ec:	ldrb	r3, [r4, #8]
			uint32_t cycles = ARM_DWT_CYCCNT;
			p->update();
    c5ee:	mov	r0, r4
		if (p->active) {
    c5f0:	cbz	r3, c60e <software_isr()+0x2e>
			p->update();
    c5f2:	ldr	r3, [r4, #0]
			uint32_t cycles = ARM_DWT_CYCCNT;
    c5f4:	ldr	r7, [r5, #4]
			p->update();
    c5f6:	ldr	r3, [r3, #0]
    c5f8:	blx	r3
			// TODO: traverse inputQueueArray and release
			// any input blocks that weren't consumed?
			cycles = (ARM_DWT_CYCCNT - cycles) >> 6;
    c5fa:	ldr	r3, [r5, #4]
			p->cpu_cycles = cycles;
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
    c5fc:	ldrh	r1, [r4, #6]
			cycles = (ARM_DWT_CYCCNT - cycles) >> 6;
    c5fe:	subs	r3, r3, r7
			p->cpu_cycles = cycles;
    c600:	ubfx	r2, r3, #6, #16
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
    c604:	cmp.w	r1, r3, lsr #6
			p->cpu_cycles = cycles;
    c608:	strh	r2, [r4, #4]
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
    c60a:	it	cc
    c60c:	strhcc	r2, [r4, #6]
	for (p = AudioStream::first_update; p; p = p->next_update) {
    c60e:	ldr	r4, [r4, #20]
    c610:	cmp	r4, #0
    c612:	bne.n	c5ec <software_isr()+0xc>
		}
	}
	//digitalWriteFast(2, LOW);
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 6;
    c614:	ldr	r3, [pc, #32]	; (c638 <software_isr()+0x58>)
	AudioStream::cpu_cycles_total = totalcycles;
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    c616:	ldr	r2, [pc, #36]	; (c63c <software_isr()+0x5c>)
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 6;
    c618:	ldr	r3, [r3, #4]
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    c61a:	ldrh	r0, [r2, #0]
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 6;
    c61c:	subs	r3, r3, r6
	AudioStream::cpu_cycles_total = totalcycles;
    c61e:	ldr	r4, [pc, #32]	; (c640 <software_isr()+0x60>)
    c620:	ubfx	r1, r3, #6, #16
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    c624:	cmp.w	r0, r3, lsr #6
	AudioStream::cpu_cycles_total = totalcycles;
    c628:	strh	r1, [r4, #0]
		AudioStream::cpu_cycles_total_max = totalcycles;
    c62a:	it	cc
    c62c:	strhcc	r1, [r2, #0]

	asm("DSB");
    c62e:	dsb	sy
}
    c632:	pop	{r3, r4, r5, r6, r7, pc}
    c634:	.word	0x2000642c
    c638:	.word	0xe0001000
    c63c:	.word	0x20007b56
    c640:	.word	0x20007b54

0000c644 <AudioStream::allocate()>:
{
    c644:	push	{r4, r5}
	__disable_irq();
    c646:	cpsid	i
	index = memory_pool_first_mask;
    c648:	ldr	r5, [pc, #144]	; (c6dc <AudioStream::allocate()+0x98>)
	p += index;
    c64a:	ldr	r4, [pc, #148]	; (c6e0 <AudioStream::allocate()+0x9c>)
	index = memory_pool_first_mask;
    c64c:	ldrh	r2, [r5, #0]
		if (p >= end) {
    c64e:	add.w	r1, r4, #112	; 0x70
	p += index;
    c652:	add.w	r3, r4, r2, lsl #2
		if (p >= end) {
    c656:	cmp	r3, r1
    c658:	bcs.n	c6d4 <AudioStream::allocate()+0x90>
    c65a:	add.w	r1, r4, #111	; 0x6f
    c65e:	adds	r0, r2, #1
    c660:	subs	r1, r1, r3
    c662:	add.w	r0, r0, r1, lsr #2
    c666:	b.n	c66e <AudioStream::allocate()+0x2a>
		index++;
    c668:	adds	r2, #1
		if (p >= end) {
    c66a:	cmp	r2, r0
    c66c:	beq.n	c6d4 <AudioStream::allocate()+0x90>
		index++;
    c66e:	mov	ip, r3
		avail = *p;
    c670:	ldr.w	r1, [r3], #4
		if (avail) break;
    c674:	cmp	r1, #0
    c676:	beq.n	c668 <AudioStream::allocate()+0x24>
	n = __builtin_clz(avail);
    c678:	clz	r0, r1
	avail &= ~(0x80000000 >> n);
    c67c:	mov.w	r3, #2147483648	; 0x80000000
    c680:	lsrs	r3, r0
    c682:	bic.w	r1, r1, r3
	*p = avail;
    c686:	str.w	r1, [ip]
	if (!avail) index++;
    c68a:	cbnz	r1, c68e <AudioStream::allocate()+0x4a>
    c68c:	adds	r2, #1
	used = memory_used + 1;
    c68e:	ldr	r3, [pc, #84]	; (c6e4 <AudioStream::allocate()+0xa0>)
	memory_pool_first_mask = index;
    c690:	strh	r2, [r5, #0]
	used = memory_used + 1;
    c692:	ldrh	r2, [r3, #0]
	memory_used = used;
    c694:	adds	r2, #1
    c696:	uxth	r1, r2
    c698:	strh	r1, [r3, #0]
	__enable_irq();
    c69a:	cpsie	i
	index = p - memory_pool_available_mask;
    c69c:	sub.w	ip, ip, r4
	block = memory_pool + ((index << 5) + (31 - n));
    c6a0:	movw	r3, #8060	; 0x1f7c
    c6a4:	rsb	r4, r0, r0, lsl #24
	index = p - memory_pool_available_mask;
    c6a8:	mov.w	ip, ip, asr #2
	block = memory_pool + ((index << 5) + (31 - n));
    c6ac:	rsb	r0, r0, r4, lsl #6
	block->ref_count = 1;
    c6b0:	movs	r4, #1
	block = memory_pool + ((index << 5) + (31 - n));
    c6b2:	add.w	ip, ip, ip, lsl #6
    c6b6:	add.w	r3, r3, ip, lsl #7
    c6ba:	add.w	r3, r3, r0, lsl #2
    c6be:	ldr	r0, [pc, #40]	; (c6e8 <AudioStream::allocate()+0xa4>)
    c6c0:	ldr	r0, [r0, #0]
	block->ref_count = 1;
    c6c2:	strb	r4, [r0, r3]
	block = memory_pool + ((index << 5) + (31 - n));
    c6c4:	add	r0, r3
	if (used > memory_used_max) memory_used_max = used;
    c6c6:	ldr	r3, [pc, #36]	; (c6ec <AudioStream::allocate()+0xa8>)
    c6c8:	ldrh	r4, [r3, #0]
    c6ca:	cmp	r4, r2
}
    c6cc:	pop	{r4, r5}
	if (used > memory_used_max) memory_used_max = used;
    c6ce:	it	cc
    c6d0:	strhcc	r1, [r3, #0]
}
    c6d2:	bx	lr
			__enable_irq();
    c6d4:	cpsie	i
			return NULL;
    c6d6:	movs	r0, #0
}
    c6d8:	pop	{r4, r5}
    c6da:	bx	lr
    c6dc:	.word	0x20007b58
    c6e0:	.word	0x20006430
    c6e4:	.word	0x20007b50
    c6e8:	.word	0x20006428
    c6ec:	.word	0x20007b52

0000c6f0 <AudioStream::release(audio_block_struct*)>:
	uint32_t mask = (0x80000000 >> (31 - (block->memory_pool_index & 0x1F)));
    c6f0:	ldrh	r2, [r0, #2]
	__disable_irq();
    c6f2:	cpsid	i
	if (block->ref_count > 1) {
    c6f4:	ldrb	r3, [r0, #0]
    c6f6:	cmp	r3, #1
    c6f8:	bls.n	c702 <AudioStream::release(audio_block_struct*)+0x12>
		block->ref_count--;
    c6fa:	subs	r3, #1
    c6fc:	strb	r3, [r0, #0]
	__enable_irq();
    c6fe:	cpsie	i
}
    c700:	bx	lr
	uint32_t mask = (0x80000000 >> (31 - (block->memory_pool_index & 0x1F)));
    c702:	mvns	r1, r2
	uint32_t index = block->memory_pool_index >> 5;
    c704:	lsrs	r3, r2, #5
		memory_pool_available_mask[index] |= mask;
    c706:	ldr	r0, [pc, #44]	; (c734 <AudioStream::release(audio_block_struct*)+0x44>)
	uint32_t mask = (0x80000000 >> (31 - (block->memory_pool_index & 0x1F)));
    c708:	mov.w	r2, #2147483648	; 0x80000000
    c70c:	and.w	r1, r1, #31
    c710:	lsrs	r2, r1
		memory_pool_available_mask[index] |= mask;
    c712:	ldr.w	r1, [r0, r3, lsl #2]
    c716:	orrs	r2, r1
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
    c718:	ldr	r1, [pc, #28]	; (c738 <AudioStream::release(audio_block_struct*)+0x48>)
    c71a:	ldrh.w	ip, [r1]
		memory_pool_available_mask[index] |= mask;
    c71e:	str.w	r2, [r0, r3, lsl #2]
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
    c722:	cmp	ip, r3
		memory_used--;
    c724:	ldr	r2, [pc, #20]	; (c73c <AudioStream::release(audio_block_struct*)+0x4c>)
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
    c726:	it	hi
    c728:	strhhi	r3, [r1, #0]
		memory_used--;
    c72a:	ldrh	r3, [r2, #0]
    c72c:	subs	r3, #1
    c72e:	strh	r3, [r2, #0]
	__enable_irq();
    c730:	cpsie	i
}
    c732:	bx	lr
    c734:	.word	0x20006430
    c738:	.word	0x20007b58
    c73c:	.word	0x20007b50

0000c740 <AudioStream::transmit(audio_block_struct*, unsigned char)>:
	for (AudioConnection *c = destination_list; c != NULL; c = c->next_dest) {
    c740:	ldr	r3, [r0, #12]
    c742:	cbnz	r3, c74a <AudioStream::transmit(audio_block_struct*, unsigned char)+0xa>
    c744:	b.n	c782 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x42>
    c746:	ldr	r3, [r3, #12]
    c748:	cbz	r3, c784 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x44>
		if (c->src_index == index) {
    c74a:	ldrb	r0, [r3, #8]
    c74c:	cmp	r0, r2
    c74e:	bne.n	c746 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x6>
{
    c750:	push	{r4}
			if (c->dst->inputQueue[c->dest_index] == NULL) {
    c752:	ldr	r0, [r3, #4]
    c754:	ldrb.w	ip, [r3, #9]
    c758:	ldr	r0, [r0, #16]
    c75a:	ldr.w	r4, [r0, ip, lsl #2]
    c75e:	cbz	r4, c776 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x36>
	for (AudioConnection *c = destination_list; c != NULL; c = c->next_dest) {
    c760:	ldr	r3, [r3, #12]
    c762:	cbz	r3, c770 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x30>
		if (c->src_index == index) {
    c764:	ldrb	r0, [r3, #8]
    c766:	cmp	r0, r2
    c768:	beq.n	c752 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x12>
	for (AudioConnection *c = destination_list; c != NULL; c = c->next_dest) {
    c76a:	ldr	r3, [r3, #12]
    c76c:	cmp	r3, #0
    c76e:	bne.n	c764 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x24>
}
    c770:	ldr.w	r4, [sp], #4
    c774:	bx	lr
				c->dst->inputQueue[c->dest_index] = block;
    c776:	str.w	r1, [r0, ip, lsl #2]
				block->ref_count++;
    c77a:	ldrb	r0, [r1, #0]
    c77c:	adds	r0, #1
    c77e:	strb	r0, [r1, #0]
    c780:	b.n	c760 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x20>
    c782:	bx	lr
    c784:	bx	lr
    c786:	nop

0000c788 <AudioStream::receiveReadOnly(unsigned int)>:
	if (index >= num_inputs) return NULL;
    c788:	ldrb	r3, [r0, #9]
    c78a:	cmp	r3, r1
    c78c:	bls.n	c79c <AudioStream::receiveReadOnly(unsigned int)+0x14>
	in = inputQueue[index];
    c78e:	ldr	r3, [r0, #16]
	inputQueue[index] = NULL;
    c790:	movs	r2, #0
	in = inputQueue[index];
    c792:	ldr.w	r0, [r3, r1, lsl #2]
	inputQueue[index] = NULL;
    c796:	str.w	r2, [r3, r1, lsl #2]
	return in;
    c79a:	bx	lr
	if (index >= num_inputs) return NULL;
    c79c:	movs	r0, #0
}
    c79e:	bx	lr

0000c7a0 <AudioStream::receiveWritable(unsigned int)>:
{
    c7a0:	push	{r3, r4, r5, lr}
	if (index >= num_inputs) return NULL;
    c7a2:	ldrb	r3, [r0, #9]
    c7a4:	cmp	r3, r1
    c7a6:	bls.n	c7e0 <AudioStream::receiveWritable(unsigned int)+0x40>
	in = inputQueue[index];
    c7a8:	ldr	r3, [r0, #16]
	inputQueue[index] = NULL;
    c7aa:	movs	r2, #0
	in = inputQueue[index];
    c7ac:	ldr.w	r4, [r3, r1, lsl #2]
	inputQueue[index] = NULL;
    c7b0:	str.w	r2, [r3, r1, lsl #2]
	if (in && in->ref_count > 1) {
    c7b4:	cbz	r4, c7e0 <AudioStream::receiveWritable(unsigned int)+0x40>
    c7b6:	ldrb	r3, [r4, #0]
    c7b8:	cmp	r3, #1
    c7ba:	bhi.n	c7c0 <AudioStream::receiveWritable(unsigned int)+0x20>
}
    c7bc:	mov	r0, r4
    c7be:	pop	{r3, r4, r5, pc}
		p = allocate();
    c7c0:	bl	c644 <AudioStream::allocate()>
		if (p) memcpy(p->data, in->data, sizeof(p->data));
    c7c4:	mov	r5, r0
    c7c6:	cbz	r0, c7d4 <AudioStream::receiveWritable(unsigned int)+0x34>
    c7c8:	mov.w	r2, #256	; 0x100
    c7cc:	adds	r1, r4, #4
    c7ce:	adds	r0, #4
    c7d0:	bl	a170 <memcpy>
		in->ref_count--;
    c7d4:	ldrb	r3, [r4, #0]
    c7d6:	subs	r3, #1
    c7d8:	strb	r3, [r4, #0]
		p = allocate();
    c7da:	mov	r4, r5
}
    c7dc:	mov	r0, r4
    c7de:	pop	{r3, r4, r5, pc}
	if (index >= num_inputs) return NULL;
    c7e0:	movs	r4, #0
}
    c7e2:	mov	r0, r4
    c7e4:	pop	{r3, r4, r5, pc}
    c7e6:	nop

0000c7e8 <AudioConnection::connect()>:
		if (isConnected) // already connected
    c7e8:	ldrb	r3, [r0, #16]
    c7ea:	cbnz	r3, c82c <AudioConnection::connect()+0x44>
		if (!src || !dst) // NULL src or dst - [old] Stream object destroyed
    c7ec:	ldr	r3, [r0, #0]
    c7ee:	mov	r1, r0
    c7f0:	cbz	r3, c832 <AudioConnection::connect()+0x4a>
    c7f2:	ldr	r3, [r0, #4]
    c7f4:	cbz	r3, c832 <AudioConnection::connect()+0x4a>
		if (dest_index >= dst->num_inputs) // input number too high
    c7f6:	ldrb	r2, [r0, #9]
    c7f8:	ldrb	r3, [r3, #9]
    c7fa:	cmp	r2, r3
    c7fc:	bcs.n	c838 <AudioConnection::connect()+0x50>
{
    c7fe:	push	{r4, r5}
		__disable_irq();
    c800:	cpsid	i
		s = AudioStream::first_update; // first AudioStream in the stream list
    c802:	ldr	r3, [pc, #172]	; (c8b0 <AudioConnection::connect()+0xc8>)
    c804:	ldr	r4, [r3, #0]
		while (s) // go through all AudioStream objects
    c806:	cbz	r4, c844 <AudioConnection::connect()+0x5c>
			p = s->destination_list;	// first patchCord in this stream's list
    c808:	ldr	r3, [r4, #12]
			while (p)
    c80a:	cbz	r3, c83e <AudioConnection::connect()+0x56>
				if (p->dst == dst && p->dest_index == dest_index) // same destination - it's in use!
    c80c:	ldr	r0, [r1, #4]
    c80e:	b.n	c814 <AudioConnection::connect()+0x2c>
				p = p->next_dest;
    c810:	ldr	r3, [r3, #12]
			while (p)
    c812:	cbz	r3, c83e <AudioConnection::connect()+0x56>
				if (p->dst == dst && p->dest_index == dest_index) // same destination - it's in use!
    c814:	ldr	r2, [r3, #4]
    c816:	cmp	r2, r0
    c818:	bne.n	c810 <AudioConnection::connect()+0x28>
    c81a:	ldrb.w	ip, [r3, #9]
    c81e:	ldrb	r2, [r1, #9]
    c820:	cmp	ip, r2
    c822:	bne.n	c810 <AudioConnection::connect()+0x28>
					__enable_irq();
    c824:	cpsie	i
					return 4;
    c826:	movs	r0, #4
}
    c828:	pop	{r4, r5}
    c82a:	bx	lr
	int result = 1;
    c82c:	movs	r0, #1
	__enable_irq();
    c82e:	cpsie	i
}
    c830:	bx	lr
			result = 3;
    c832:	movs	r0, #3
	__enable_irq();
    c834:	cpsie	i
}
    c836:	bx	lr
			result = 2;
    c838:	movs	r0, #2
	__enable_irq();
    c83a:	cpsie	i
}
    c83c:	bx	lr
			s = s->next_update;
    c83e:	ldr	r4, [r4, #20]
		while (s) // go through all AudioStream objects
    c840:	cmp	r4, #0
    c842:	bne.n	c808 <AudioConnection::connect()+0x20>
		pp = &AudioStream::unused;
    c844:	ldr	r4, [pc, #108]	; (c8b4 <AudioConnection::connect()+0xcc>)
    c846:	ldr	r3, [r4, #0]
		while (*pp && *pp != this)
    c848:	cbz	r3, c85c <AudioConnection::connect()+0x74>
    c84a:	cmp	r1, r3
    c84c:	bne.n	c854 <AudioConnection::connect()+0x6c>
    c84e:	b.n	c868 <AudioConnection::connect()+0x80>
    c850:	cmp	r1, r3
    c852:	beq.n	c864 <AudioConnection::connect()+0x7c>
			pp = &((*pp)->next_dest);
    c854:	mov	r2, r3
    c856:	ldr	r3, [r3, #12]
		while (*pp && *pp != this)
    c858:	cmp	r3, #0
    c85a:	bne.n	c850 <AudioConnection::connect()+0x68>
			result = 5;
    c85c:	movs	r0, #5
	__enable_irq();
    c85e:	cpsie	i
}
    c860:	pop	{r4, r5}
    c862:	bx	lr
			pp = &((*pp)->next_dest);
    c864:	add.w	r4, r2, #12
		p = src->destination_list; // first AudioConnection
    c868:	ldr	r5, [r1, #0]
    c86a:	ldr	r0, [r5, #12]
		if (p == NULL) 
    c86c:	cbz	r0, c8aa <AudioConnection::connect()+0xc2>
			while (p->next_dest)  // scan source Stream's connection list for duplicates
    c86e:	ldr	r3, [r0, #12]
    c870:	cbnz	r3, c87a <AudioConnection::connect()+0x92>
    c872:	b.n	c886 <AudioConnection::connect()+0x9e>
    c874:	ldr	r2, [r3, #12]
    c876:	cbz	r2, c888 <AudioConnection::connect()+0xa0>
    c878:	mov	r3, r2
				if (&p->src == &this->src && &p->dst == &this->dst
    c87a:	cmp	r1, r0
    c87c:	mov	r0, r3
    c87e:	bne.n	c874 <AudioConnection::connect()+0x8c>
					__enable_irq();
    c880:	cpsie	i
					return 6;
    c882:	movs	r0, #6
    c884:	b.n	c828 <AudioConnection::connect()+0x40>
			while (p->next_dest)  // scan source Stream's connection list for duplicates
    c886:	mov	r3, r0
			p->next_dest = this; // end of list, can link ourselves in
    c888:	str	r1, [r3, #12]
		*pp = next_dest;  // remove ourselves from the unused list
    c88a:	ldr	r3, [r1, #12]
		next_dest = NULL; // we're last in the source's destination list
    c88c:	movs	r0, #0
		*pp = next_dest;  // remove ourselves from the unused list
    c88e:	str	r3, [r4, #0]
		src->active = true;
    c890:	movs	r3, #1
		next_dest = NULL; // we're last in the source's destination list
    c892:	str	r0, [r1, #12]
		src->numConnections++;
    c894:	ldrb	r2, [r5, #10]
		src->active = true;
    c896:	strb	r3, [r5, #8]
		src->numConnections++;
    c898:	add	r2, r3
    c89a:	strb	r2, [r5, #10]
		dst->numConnections++;
    c89c:	ldr	r2, [r1, #4]
    c89e:	ldrb	r4, [r2, #10]
		dst->active = true;
    c8a0:	strb	r3, [r2, #8]
		dst->numConnections++;
    c8a2:	add	r4, r3
    c8a4:	strb	r4, [r2, #10]
		isConnected = true;
    c8a6:	strb	r3, [r1, #16]
		result = 0;
    c8a8:	b.n	c85e <AudioConnection::connect()+0x76>
			src->destination_list = this;
    c8aa:	str	r1, [r5, #12]
    c8ac:	b.n	c88a <AudioConnection::connect()+0xa2>
    c8ae:	nop
    c8b0:	.word	0x2000642c
    c8b4:	.word	0x200064a0

0000c8b8 <AudioConnection::AudioConnection(AudioStream&, unsigned char, AudioStream&, unsigned char)>:
AudioConnection::AudioConnection(AudioStream &source, unsigned char sourceOutput,
    c8b8:	push	{r4, lr}
		dst = &destination;
    c8ba:	strd	r1, r3, [r0]
	next_dest = AudioStream::unused;
    c8be:	ldr	r3, [pc, #28]	; (c8dc <AudioConnection::AudioConnection(AudioStream&, unsigned char, AudioStream&, unsigned char)+0x24>)
	isConnected = false;	  
    c8c0:	movs	r1, #0
		src_index = sourceOutput;
    c8c2:	strb	r2, [r0, #8]
AudioConnection::AudioConnection(AudioStream &source, unsigned char sourceOutput,
    c8c4:	mov	r4, r0
	next_dest = AudioStream::unused;
    c8c6:	ldr	r2, [r3, #0]
	AudioStream::unused = this;
    c8c8:	str	r0, [r3, #0]
AudioConnection::AudioConnection(AudioStream &source, unsigned char sourceOutput,
    c8ca:	ldrb.w	r3, [sp, #8]
	isConnected = false;	  
    c8ce:	strb	r1, [r0, #16]
	next_dest = AudioStream::unused;
    c8d0:	str	r2, [r0, #12]
		dest_index = destinationInput;
    c8d2:	strb	r3, [r0, #9]
		result = connect();
    c8d4:	bl	c7e8 <AudioConnection::connect()>
}
    c8d8:	mov	r0, r4
    c8da:	pop	{r4, pc}
    c8dc:	.word	0x200064a0

0000c8e0 <AudioConnection::disconnect()>:
{
    c8e0:	push	{r3, r4, r5, lr}
	if (!isConnected) return 1;
    c8e2:	ldrb	r3, [r0, #16]
    c8e4:	cmp	r3, #0
    c8e6:	beq.n	c956 <AudioConnection::disconnect()+0x76>
	if (dest_index >= dst->num_inputs) return 2; // should never happen!
    c8e8:	ldr	r3, [r0, #4]
    c8ea:	mov	r4, r0
    c8ec:	ldrb	r2, [r0, #9]
    c8ee:	ldrb	r3, [r3, #9]
    c8f0:	cmp	r2, r3
    c8f2:	bcs.n	c966 <AudioConnection::disconnect()+0x86>
	__disable_irq();
    c8f4:	cpsid	i
	p = src->destination_list;
    c8f6:	ldr	r1, [r0, #0]
    c8f8:	ldr	r3, [r1, #12]
	if (p == NULL) {
    c8fa:	cmp	r3, #0
    c8fc:	beq.n	c95a <AudioConnection::disconnect()+0x7a>
	} else if (p == this) {
    c8fe:	cmp	r0, r3
    c900:	beq.n	c96a <AudioConnection::disconnect()+0x8a>
			if (p->next_dest == this) // found the parent of the disconnecting object
    c902:	mov	r2, r3
    c904:	ldr	r3, [r3, #12]
    c906:	cmp	r4, r3
    c908:	beq.n	c960 <AudioConnection::disconnect()+0x80>
		while (p)
    c90a:	cmp	r3, #0
    c90c:	bne.n	c902 <AudioConnection::disconnect()+0x22>
	if(dst->inputQueue[dest_index] != NULL) {
    c90e:	ldr	r2, [r4, #4]
    c910:	ldrb	r0, [r4, #9]
    c912:	ldr	r3, [r2, #16]
    c914:	ldr.w	r0, [r3, r0, lsl #2]
    c918:	cbz	r0, c92e <AudioConnection::disconnect()+0x4e>
		AudioStream::release(dst->inputQueue[dest_index]);
    c91a:	bl	c6f0 <AudioStream::release(audio_block_struct*)>
		__disable_irq();
    c91e:	cpsid	i
		dst->inputQueue[dest_index] = NULL;
    c920:	ldr	r2, [r4, #4]
    c922:	movs	r5, #0
    c924:	ldrb	r0, [r4, #9]
    c926:	ldr	r3, [r2, #16]
	src->numConnections--;
    c928:	ldr	r1, [r4, #0]
		dst->inputQueue[dest_index] = NULL;
    c92a:	str.w	r5, [r3, r0, lsl #2]
	src->numConnections--;
    c92e:	ldrb	r3, [r1, #10]
    c930:	subs	r3, #1
    c932:	uxtb	r3, r3
    c934:	strb	r3, [r1, #10]
	if (src->numConnections == 0) {
    c936:	cbnz	r3, c93a <AudioConnection::disconnect()+0x5a>
		src->active = false;
    c938:	strb	r3, [r1, #8]
	dst->numConnections--;
    c93a:	ldrb	r3, [r2, #10]
    c93c:	subs	r3, #1
    c93e:	uxtb	r3, r3
    c940:	strb	r3, [r2, #10]
	if (dst->numConnections == 0) {
    c942:	cbnz	r3, c946 <AudioConnection::disconnect()+0x66>
		dst->active = false;
    c944:	strb	r3, [r2, #8]
	next_dest = dst->unused;
    c946:	ldr	r3, [pc, #40]	; (c970 <AudioConnection::disconnect()+0x90>)
	isConnected = false;
    c948:	movs	r0, #0
	next_dest = dst->unused;
    c94a:	ldr	r2, [r3, #0]
	isConnected = false;
    c94c:	strb	r0, [r4, #16]
	dst->unused = this;
    c94e:	str	r4, [r3, #0]
	next_dest = dst->unused;
    c950:	str	r2, [r4, #12]
	__enable_irq();
    c952:	cpsie	i
}
    c954:	pop	{r3, r4, r5, pc}
	if (!isConnected) return 1;
    c956:	movs	r0, #1
}
    c958:	pop	{r3, r4, r5, pc}
		__enable_irq();
    c95a:	cpsie	i
		return 3;
    c95c:	movs	r0, #3
}
    c95e:	pop	{r3, r4, r5, pc}
				p-> next_dest = this->next_dest; // skip parent's link past us
    c960:	ldr	r3, [r4, #12]
    c962:	str	r3, [r2, #12]
				break;
    c964:	b.n	c90e <AudioConnection::disconnect()+0x2e>
	if (dest_index >= dst->num_inputs) return 2; // should never happen!
    c966:	movs	r0, #2
}
    c968:	pop	{r3, r4, r5, pc}
		if (p->next_dest) {
    c96a:	ldr	r3, [r0, #12]
			src->destination_list = NULL;
    c96c:	str	r3, [r1, #12]
    c96e:	b.n	c90e <AudioConnection::disconnect()+0x2e>
    c970:	.word	0x200064a0

0000c974 <AudioConnection::~AudioConnection()>:
AudioConnection::~AudioConnection()
    c974:	push	{r4, lr}
    c976:	mov	r4, r0
	disconnect(); // disconnect ourselves: puts us on the unused list
    c978:	bl	c8e0 <AudioConnection::disconnect()>
	pp = &AudioStream::unused;
    c97c:	ldr	r2, [pc, #36]	; (c9a4 <AudioConnection::~AudioConnection()+0x30>)
    c97e:	ldr	r3, [r2, #0]
	while (*pp && *pp != this)
    c980:	cbz	r3, c994 <AudioConnection::~AudioConnection()+0x20>
    c982:	cmp	r4, r3
    c984:	bne.n	c98c <AudioConnection::~AudioConnection()+0x18>
    c986:	b.n	c99a <AudioConnection::~AudioConnection()+0x26>
    c988:	cmp	r4, r3
    c98a:	beq.n	c998 <AudioConnection::~AudioConnection()+0x24>
		pp = &((*pp)->next_dest);
    c98c:	mov	r2, r3
    c98e:	ldr	r3, [r3, #12]
	while (*pp && *pp != this)
    c990:	cmp	r3, #0
    c992:	bne.n	c988 <AudioConnection::~AudioConnection()+0x14>
}
    c994:	mov	r0, r4
    c996:	pop	{r4, pc}
		pp = &((*pp)->next_dest);
    c998:	adds	r2, #12
		*pp = next_dest; // remove ourselves from the unused list
    c99a:	ldr	r3, [r4, #12]
}
    c99c:	mov	r0, r4
		*pp = next_dest; // remove ourselves from the unused list
    c99e:	str	r3, [r2, #0]
}
    c9a0:	pop	{r4, pc}
    c9a2:	nop
    c9a4:	.word	0x200064a0

0000c9a8 <AudioStream::update_setup()>:
	if (update_scheduled) return false;
    c9a8:	ldr	r3, [pc, #48]	; (c9dc <AudioStream::update_setup()+0x34>)
    c9aa:	ldrb	r2, [r3, #0]
    c9ac:	cbnz	r2, c9d6 <AudioStream::update_setup()+0x2e>
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
    c9ae:	ldr	r2, [pc, #48]	; (c9e0 <AudioStream::update_setup()+0x38>)
    c9b0:	ldr	r1, [pc, #48]	; (c9e4 <AudioStream::update_setup()+0x3c>)
{
    c9b2:	push	{r4}
    c9b4:	str.w	r1, [r2, #344]	; 0x158
	NVIC_SET_PRIORITY(IRQ_SOFTWARE, 208); // 255 = lowest priority
    c9b8:	ldr	r0, [pc, #44]	; (c9e8 <AudioStream::update_setup()+0x40>)
    c9ba:	movs	r4, #208	; 0xd0
	update_scheduled = true;
    c9bc:	movs	r2, #1
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
    c9be:	mov.w	r1, #3758153728	; 0xe000e000
	NVIC_SET_PRIORITY(IRQ_SOFTWARE, 208); // 255 = lowest priority
    c9c2:	strb.w	r4, [r0, #70]	; 0x46
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
    c9c6:	movs	r4, #64	; 0x40
	update_scheduled = true;
    c9c8:	mov	r0, r2
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
    c9ca:	str.w	r4, [r1, #264]	; 0x108
}
    c9ce:	ldr.w	r4, [sp], #4
	update_scheduled = true;
    c9d2:	strb	r2, [r3, #0]
}
    c9d4:	bx	lr
	if (update_scheduled) return false;
    c9d6:	movs	r0, #0
}
    c9d8:	bx	lr
    c9da:	nop
    c9dc:	.word	0x20007b76
    c9e0:	.word	0x20001c00
    c9e4:	.word	0x0000c5e1
    c9e8:	.word	0xe000e400

0000c9ec <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)>:
	update_responsibility = false;
}

static void copy_to_buffers(const uint32_t *src, int16_t *left, int16_t *right, unsigned int len)
{
	uint32_t *target = (uint32_t*) src + len; 
    c9ec:	add.w	r3, r0, r3, lsl #2
	while ((src < target) && (((uintptr_t) left & 0x02) != 0)) {
    c9f0:	cmp	r0, r3
{
    c9f2:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	while ((src < target) && (((uintptr_t) left & 0x02) != 0)) {
    c9f6:	bcc.n	ca0c <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)+0x20>
    c9f8:	b.n	ca10 <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)+0x24>
		uint32_t n = *src++;
    c9fa:	ldr.w	r4, [r0], #4
		*left++ = n & 0xFFFF;
		*right++ = n >> 16;
    c9fe:	lsrs	r5, r4, #16
	while ((src < target) && (((uintptr_t) left & 0x02) != 0)) {
    ca00:	cmp	r3, r0
		*left++ = n & 0xFFFF;
    ca02:	strh.w	r4, [r1], #2
		*right++ = n >> 16;
    ca06:	strh.w	r5, [r2], #2
	while ((src < target) && (((uintptr_t) left & 0x02) != 0)) {
    ca0a:	bls.n	ca10 <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)+0x24>
    ca0c:	lsls	r4, r1, #30
    ca0e:	bmi.n	c9fa <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)+0xe>
	}

	while ((src < target - 2)) {
    ca10:	sub.w	r4, r3, #8
    ca14:	cmp	r0, r4
    ca16:	bcs.n	ca7a <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)+0x8e>
    ca18:	sub.w	r8, r3, #9
    ca1c:	add.w	ip, r0, #8
    ca20:	mov	lr, r2
		uint32_t n1 = *src++;
		uint32_t n = *src++;
		*(uint32_t *)left = (n1 & 0xFFFF) | ((n & 0xFFFF) << 16);
		left+=2;
		*(uint32_t *)right = (n1 >> 16) | ((n & 0xFFFF0000)) ;
    ca22:	ldr	r7, [pc, #92]	; (ca80 <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)+0x94>)
    ca24:	sub.w	r8, r8, r0
    ca28:	mov.w	r8, r8, lsr #3
    ca2c:	add.w	r8, r8, #1
    ca30:	mov.w	r9, r8, lsl #2
    ca34:	add.w	r6, r1, r8, lsl #2
		uint32_t n = *src++;
    ca38:	ldrd	sl, r4, [ip, #-8]
	while ((src < target - 2)) {
    ca3c:	add.w	ip, ip, #8
		*(uint32_t *)left = (n1 & 0xFFFF) | ((n & 0xFFFF) << 16);
    ca40:	uxth.w	r5, sl
    ca44:	orr.w	r5, r5, r4, lsl #16
		*(uint32_t *)right = (n1 >> 16) | ((n & 0xFFFF0000)) ;
    ca48:	ands	r4, r7
		*(uint32_t *)left = (n1 & 0xFFFF) | ((n & 0xFFFF) << 16);
    ca4a:	str.w	r5, [r1], #4
		*(uint32_t *)right = (n1 >> 16) | ((n & 0xFFFF0000)) ;
    ca4e:	orr.w	r4, r4, sl, lsr #16
	while ((src < target - 2)) {
    ca52:	cmp	r1, r6
		*(uint32_t *)right = (n1 >> 16) | ((n & 0xFFFF0000)) ;
    ca54:	str.w	r4, [lr], #4
	while ((src < target - 2)) {
    ca58:	bne.n	ca38 <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)+0x4c>
		uint32_t n = *src++;
    ca5a:	add.w	r0, r0, r8, lsl #3
		right+=2;
    ca5e:	add	r2, r9
	}

	while ((src < target)) {
    ca60:	cmp	r3, r0
    ca62:	bls.n	ca76 <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)+0x8a>
		uint32_t n = *src++;
    ca64:	ldr.w	r1, [r0], #4
		*left++ = n & 0xFFFF;
		*right++ = n >> 16;
    ca68:	lsrs	r4, r1, #16
	while ((src < target)) {
    ca6a:	cmp	r3, r0
		*left++ = n & 0xFFFF;
    ca6c:	strh.w	r1, [r6], #2
		*right++ = n >> 16;
    ca70:	strh.w	r4, [r2], #2
	while ((src < target)) {
    ca74:	bhi.n	ca64 <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)+0x78>
	}
}
    ca76:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	while ((src < target - 2)) {
    ca7a:	mov	r6, r1
	while ((src < target)) {
    ca7c:	b.n	ca60 <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)+0x74>
    ca7e:	nop
    ca80:	.word	0xffff0000

0000ca84 <sync_event(transfer_struct*)>:
{
    ca84:	push	{r3, r4, r5, lr}
	usb_audio_sync_feedback = feedback_accumulator >> usb_audio_sync_rshift;
    ca86:	ldr	r2, [pc, #68]	; (cacc <sync_event(transfer_struct*)+0x48>)
    ca88:	ldr	r3, [pc, #68]	; (cad0 <sync_event(transfer_struct*)+0x4c>)
    ca8a:	ldrb	r1, [r2, #0]
    ca8c:	ldr	r2, [r3, #0]
	usb_prepare_transfer(&sync_transfer, &usb_audio_sync_feedback, usb_audio_sync_nbytes, 0);
    ca8e:	movs	r3, #0
	usb_audio_sync_feedback = feedback_accumulator >> usb_audio_sync_rshift;
    ca90:	ldr	r4, [pc, #64]	; (cad4 <sync_event(transfer_struct*)+0x50>)
	usb_prepare_transfer(&sync_transfer, &usb_audio_sync_feedback, usb_audio_sync_nbytes, 0);
    ca92:	ldr	r5, [pc, #68]	; (cad8 <sync_event(transfer_struct*)+0x54>)
	usb_audio_sync_feedback = feedback_accumulator >> usb_audio_sync_rshift;
    ca94:	lsrs	r2, r1
	usb_prepare_transfer(&sync_transfer, &usb_audio_sync_feedback, usb_audio_sync_nbytes, 0);
    ca96:	ldr	r0, [pc, #68]	; (cadc <sync_event(transfer_struct*)+0x58>)
    ca98:	mov	r1, r4
	usb_audio_sync_feedback = feedback_accumulator >> usb_audio_sync_rshift;
    ca9a:	str	r2, [r4, #0]
	usb_prepare_transfer(&sync_transfer, &usb_audio_sync_feedback, usb_audio_sync_nbytes, 0);
    ca9c:	ldrb	r2, [r5, #0]
    ca9e:	bl	b7f8 <usb_prepare_transfer>
	arm_dcache_flush(&usb_audio_sync_feedback, usb_audio_sync_nbytes);
    caa2:	ldrb	r3, [r5, #0]
	uint32_t end_addr = (uint32_t)addr + size;
    caa4:	add	r3, r4
	asm("dsb");
    caa6:	dsb	sy
		SCB_CACHE_DCCMVAC = location;
    caaa:	mov.w	r2, #3758153728	; 0xe000e000
    caae:	str.w	r4, [r2, #3944]	; 0xf68
		location += 32;
    cab2:	adds	r4, #32
	} while (location < end_addr);
    cab4:	cmp	r3, r4
    cab6:	bhi.n	caae <sync_event(transfer_struct*)+0x2a>
	asm("dsb");
    cab8:	dsb	sy
	asm("isb");
    cabc:	isb	sy
	usb_transmit(AUDIO_SYNC_ENDPOINT, &sync_transfer);
    cac0:	ldr	r1, [pc, #24]	; (cadc <sync_event(transfer_struct*)+0x58>)
    cac2:	movs	r0, #6
}
    cac4:	ldmia.w	sp!, {r3, r4, r5, lr}
	usb_transmit(AUDIO_SYNC_ENDPOINT, &sync_transfer);
    cac8:	b.w	b828 <usb_transmit>
    cacc:	.word	0x20007b8d
    cad0:	.word	0x200073c8
    cad4:	.word	0x20205260
    cad8:	.word	0x20007b8c
    cadc:	.word	0x20003100

0000cae0 <AudioOutputUSB::update()>:
		len--;
	}
}

void AudioOutputUSB::update(void)
{
    cae0:	push	{r3, r4, r5, lr}
    cae2:	mov	r5, r0
	audio_block_t *left, *right;

	// TODO: we shouldn't be writing to these......
	//left = receiveReadOnly(0); // input 0 = left channel
	//right = receiveReadOnly(1); // input 1 = right channel
	left = receiveWritable(0); // input 0 = left channel
    cae4:	movs	r1, #0
    cae6:	bl	c7a0 <AudioStream::receiveWritable(unsigned int)>
	right = receiveWritable(1); // input 1 = right channel
    caea:	movs	r1, #1
	left = receiveWritable(0); // input 0 = left channel
    caec:	mov	r4, r0
	right = receiveWritable(1); // input 1 = right channel
    caee:	mov	r0, r5
    caf0:	bl	c7a0 <AudioStream::receiveWritable(unsigned int)>
	if (usb_audio_transmit_setting == 0) {
    caf4:	ldr	r3, [pc, #236]	; (cbe4 <AudioOutputUSB::update()+0x104>)
	right = receiveWritable(1); // input 1 = right channel
    caf6:	mov	r5, r0
	if (usb_audio_transmit_setting == 0) {
    caf8:	ldrb	r3, [r3, #0]
    cafa:	cbz	r3, cb3a <AudioOutputUSB::update()+0x5a>
		if (right_1st) { release(right_1st); right_1st = NULL; }
		if (right_2nd) { release(right_2nd); right_2nd = NULL; }
		offset_1st = 0;
		return;
	}
	if (left == NULL) {
    cafc:	cmp	r4, #0
    cafe:	beq.n	cb96 <AudioOutputUSB::update()+0xb6>
			if (right) release(right);
			return;
		}
		memset(left->data, 0, sizeof(left->data));
	}
	if (right == NULL) {
    cb00:	cmp	r5, #0
    cb02:	beq.n	cbae <AudioOutputUSB::update()+0xce>
			release(left);
			return;
		}
		memset(right->data, 0, sizeof(right->data));
	}
	__disable_irq();
    cb04:	cpsid	i
	if (left_1st == NULL) {
    cb06:	ldr	r3, [pc, #224]	; (cbe8 <AudioOutputUSB::update()+0x108>)
    cb08:	ldr	r0, [r3, #0]
    cb0a:	cmp	r0, #0
    cb0c:	beq.n	cb8a <AudioOutputUSB::update()+0xaa>
		left_1st = left;
		right_1st = right;
		offset_1st = 0;
	} else if (left_2nd == NULL) {
    cb0e:	ldr	r2, [pc, #220]	; (cbec <AudioOutputUSB::update()+0x10c>)
    cb10:	ldr	r1, [r2, #0]
    cb12:	cmp	r1, #0
    cb14:	beq.n	cbc4 <AudioOutputUSB::update()+0xe4>
		left_2nd = left;
		right_2nd = right;
	} else {
		// buffer overrun - PC is consuming too slowly
		audio_block_t *discard1 = left_1st;
		left_1st = left_2nd;
    cb16:	str	r1, [r3, #0]
		left_2nd = left;
		audio_block_t *discard2 = right_1st;
		right_1st = right_2nd;
    cb18:	ldr	r1, [pc, #212]	; (cbf0 <AudioOutputUSB::update()+0x110>)
		audio_block_t *discard2 = right_1st;
    cb1a:	ldr	r3, [pc, #216]	; (cbf4 <AudioOutputUSB::update()+0x114>)
		left_2nd = left;
    cb1c:	str	r4, [r2, #0]
		right_2nd = right;
		offset_1st = 0; // TODO: discard part of this data?
    cb1e:	movs	r4, #0
		right_1st = right_2nd;
    cb20:	ldr	r2, [r1, #0]
		right_2nd = right;
    cb22:	str	r5, [r1, #0]
		offset_1st = 0; // TODO: discard part of this data?
    cb24:	ldr	r1, [pc, #208]	; (cbf8 <AudioOutputUSB::update()+0x118>)
    cb26:	strh	r4, [r1, #0]
		audio_block_t *discard2 = right_1st;
    cb28:	ldr	r4, [r3, #0]
		right_1st = right_2nd;
    cb2a:	str	r2, [r3, #0]
		//serial_print("*");
		release(discard1);
    cb2c:	bl	c6f0 <AudioStream::release(audio_block_struct*)>
		release(discard2);
    cb30:	mov	r0, r4
    cb32:	bl	c6f0 <AudioStream::release(audio_block_struct*)>
	}
	__enable_irq();
    cb36:	cpsie	i
}
    cb38:	pop	{r3, r4, r5, pc}
		if (left) release(left);
    cb3a:	cbz	r4, cb42 <AudioOutputUSB::update()+0x62>
    cb3c:	mov	r0, r4
    cb3e:	bl	c6f0 <AudioStream::release(audio_block_struct*)>
		if (right) release(right);
    cb42:	cbz	r5, cb4a <AudioOutputUSB::update()+0x6a>
    cb44:	mov	r0, r5
    cb46:	bl	c6f0 <AudioStream::release(audio_block_struct*)>
		if (left_1st) { release(left_1st); left_1st = NULL; }
    cb4a:	ldr	r4, [pc, #156]	; (cbe8 <AudioOutputUSB::update()+0x108>)
    cb4c:	ldr	r0, [r4, #0]
    cb4e:	cbz	r0, cb58 <AudioOutputUSB::update()+0x78>
    cb50:	bl	c6f0 <AudioStream::release(audio_block_struct*)>
    cb54:	movs	r3, #0
    cb56:	str	r3, [r4, #0]
		if (left_2nd) { release(left_2nd); left_2nd = NULL; }
    cb58:	ldr	r4, [pc, #144]	; (cbec <AudioOutputUSB::update()+0x10c>)
    cb5a:	ldr	r0, [r4, #0]
    cb5c:	cbz	r0, cb66 <AudioOutputUSB::update()+0x86>
    cb5e:	bl	c6f0 <AudioStream::release(audio_block_struct*)>
    cb62:	movs	r3, #0
    cb64:	str	r3, [r4, #0]
		if (right_1st) { release(right_1st); right_1st = NULL; }
    cb66:	ldr	r4, [pc, #140]	; (cbf4 <AudioOutputUSB::update()+0x114>)
    cb68:	ldr	r0, [r4, #0]
    cb6a:	cbz	r0, cb74 <AudioOutputUSB::update()+0x94>
    cb6c:	bl	c6f0 <AudioStream::release(audio_block_struct*)>
    cb70:	movs	r3, #0
    cb72:	str	r3, [r4, #0]
		if (right_2nd) { release(right_2nd); right_2nd = NULL; }
    cb74:	ldr	r4, [pc, #120]	; (cbf0 <AudioOutputUSB::update()+0x110>)
    cb76:	ldr	r0, [r4, #0]
    cb78:	cbz	r0, cb82 <AudioOutputUSB::update()+0xa2>
    cb7a:	bl	c6f0 <AudioStream::release(audio_block_struct*)>
    cb7e:	movs	r3, #0
    cb80:	str	r3, [r4, #0]
		offset_1st = 0;
    cb82:	ldr	r3, [pc, #116]	; (cbf8 <AudioOutputUSB::update()+0x118>)
    cb84:	movs	r2, #0
    cb86:	strh	r2, [r3, #0]
}
    cb88:	pop	{r3, r4, r5, pc}
		left_1st = left;
    cb8a:	str	r4, [r3, #0]
		right_1st = right;
    cb8c:	ldr	r2, [pc, #100]	; (cbf4 <AudioOutputUSB::update()+0x114>)
		offset_1st = 0;
    cb8e:	ldr	r3, [pc, #104]	; (cbf8 <AudioOutputUSB::update()+0x118>)
		right_1st = right;
    cb90:	str	r5, [r2, #0]
		offset_1st = 0;
    cb92:	strh	r0, [r3, #0]
    cb94:	b.n	cb36 <AudioOutputUSB::update()+0x56>
		left = allocate();
    cb96:	bl	c644 <AudioStream::allocate()>
		if (left == NULL) {
    cb9a:	mov	r4, r0
    cb9c:	cbz	r0, cbcc <AudioOutputUSB::update()+0xec>
		memset(left->data, 0, sizeof(left->data));
    cb9e:	mov.w	r2, #256	; 0x100
    cba2:	movs	r1, #0
    cba4:	adds	r0, #4
    cba6:	bl	e110 <memset>
	if (right == NULL) {
    cbaa:	cmp	r5, #0
    cbac:	bne.n	cb04 <AudioOutputUSB::update()+0x24>
		right = allocate();
    cbae:	bl	c644 <AudioStream::allocate()>
		if (right == NULL) {
    cbb2:	mov	r5, r0
    cbb4:	cbz	r0, cbda <AudioOutputUSB::update()+0xfa>
		memset(right->data, 0, sizeof(right->data));
    cbb6:	mov.w	r2, #256	; 0x100
    cbba:	movs	r1, #0
    cbbc:	adds	r0, #4
    cbbe:	bl	e110 <memset>
    cbc2:	b.n	cb04 <AudioOutputUSB::update()+0x24>
		right_2nd = right;
    cbc4:	ldr	r3, [pc, #40]	; (cbf0 <AudioOutputUSB::update()+0x110>)
		left_2nd = left;
    cbc6:	str	r4, [r2, #0]
		right_2nd = right;
    cbc8:	str	r5, [r3, #0]
    cbca:	b.n	cb36 <AudioOutputUSB::update()+0x56>
			if (right) release(right);
    cbcc:	cmp	r5, #0
    cbce:	beq.n	cb38 <AudioOutputUSB::update()+0x58>
    cbd0:	mov	r0, r5
}
    cbd2:	ldmia.w	sp!, {r3, r4, r5, lr}
			if (right) release(right);
    cbd6:	b.w	c6f0 <AudioStream::release(audio_block_struct*)>
			release(left);
    cbda:	mov	r0, r4
}
    cbdc:	ldmia.w	sp!, {r3, r4, r5, lr}
			release(left);
    cbe0:	b.w	c6f0 <AudioStream::release(audio_block_struct*)>
    cbe4:	.word	0x20007b8e
    cbe8:	.word	0x20006510
    cbec:	.word	0x20006514
    cbf0:	.word	0x2000651c
    cbf4:	.word	0x20006518
    cbf8:	.word	0x20007b5c

0000cbfc <usb_audio_receive_callback>:
{
    cbfc:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	AudioInputUSB::receive_flag = 1;
    cc00:	movs	r2, #1
    cc02:	ldr	r3, [pc, #296]	; (cd2c <usb_audio_receive_callback+0x130>)
	left = AudioInputUSB::incoming_left;
    cc04:	ldr.w	sl, [pc, #312]	; cd40 <usb_audio_receive_callback+0x144>
	len >>= 2; // 1 sample = 4 bytes: 2 left, 2 right
    cc08:	lsrs	r6, r0, #2
	AudioInputUSB::receive_flag = 1;
    cc0a:	strb	r2, [r3, #0]
	count = AudioInputUSB::incoming_count;
    cc0c:	ldr	r3, [pc, #288]	; (cd30 <usb_audio_receive_callback+0x134>)
	left = AudioInputUSB::incoming_left;
    cc0e:	ldr.w	r4, [sl]
	count = AudioInputUSB::incoming_count;
    cc12:	ldrh	r7, [r3, #0]
	right = AudioInputUSB::incoming_right;
    cc14:	ldr	r3, [pc, #284]	; (cd34 <usb_audio_receive_callback+0x138>)
	count = AudioInputUSB::incoming_count;
    cc16:	mov	r9, r7
	right = AudioInputUSB::incoming_right;
    cc18:	ldr	r5, [r3, #0]
	if (left == NULL) {
    cc1a:	cmp	r4, #0
    cc1c:	beq.n	ccb4 <usb_audio_receive_callback+0xb8>
	if (right == NULL) {
    cc1e:	cmp	r5, #0
    cc20:	beq.n	ccc6 <usb_audio_receive_callback+0xca>
	while (len > 0) {
    cc22:	cmp	r6, #0
    cc24:	beq.n	ccd8 <usb_audio_receive_callback+0xdc>
		avail = AUDIO_BLOCK_SAMPLES - count;
    cc26:	rsb	r3, r7, #128	; 0x80
		if (len < avail) {
    cc2a:	cmp	r6, r3
    cc2c:	bcc.n	cd24 <usb_audio_receive_callback+0x128>
    cc2e:	ldr.w	fp, [pc, #276]	; cd44 <usb_audio_receive_callback+0x148>
    cc32:	ldr	r7, [pc, #260]	; (cd38 <usb_audio_receive_callback+0x13c>)
			if (AudioInputUSB::ready_left || AudioInputUSB::ready_right) return;
    cc34:	ldr.w	r8, [pc, #272]	; cd48 <usb_audio_receive_callback+0x14c>
		} else if (avail > 0) {
    cc38:	cbnz	r3, cc7a <usb_audio_receive_callback+0x7e>
			if (AudioInputUSB::ready_left || AudioInputUSB::ready_right) return;
    cc3a:	ldr	r3, [r7, #0]
    cc3c:	cmp	r3, #0
    cc3e:	bne.n	ccb0 <usb_audio_receive_callback+0xb4>
    cc40:	ldr.w	r3, [r8]
    cc44:	cmp	r3, #0
    cc46:	bne.n	ccb0 <usb_audio_receive_callback+0xb4>
			AudioInputUSB::ready_left = left;
    cc48:	str	r4, [r7, #0]
			AudioInputUSB::ready_right = right;
    cc4a:	str.w	r5, [r8]
			left = AudioStream::allocate();
    cc4e:	bl	c644 <AudioStream::allocate()>
			if (left == NULL) {
    cc52:	mov	r4, r0
    cc54:	cmp	r0, #0
    cc56:	beq.n	cce0 <usb_audio_receive_callback+0xe4>
			right = AudioStream::allocate();
    cc58:	bl	c644 <AudioStream::allocate()>
			if (right == NULL) {
    cc5c:	mov	r5, r0
    cc5e:	cmp	r0, #0
    cc60:	beq.n	ccf0 <usb_audio_receive_callback+0xf4>
			AudioInputUSB::incoming_right = right;
    cc62:	ldr	r3, [pc, #208]	; (cd34 <usb_audio_receive_callback+0x138>)
			AudioInputUSB::incoming_left = left;
    cc64:	str.w	r4, [sl]
			AudioInputUSB::incoming_right = right;
    cc68:	str	r0, [r3, #0]
	while (len > 0) {
    cc6a:	cmp	r6, #0
    cc6c:	beq.n	ccd6 <usb_audio_receive_callback+0xda>
		if (len < avail) {
    cc6e:	cmp	r6, #127	; 0x7f
			count = 0;
    cc70:	mov.w	r9, #0
		avail = AUDIO_BLOCK_SAMPLES - count;
    cc74:	mov.w	r3, #128	; 0x80
		if (len < avail) {
    cc78:	bls.n	cd06 <usb_audio_receive_callback+0x10a>
			copy_to_buffers(data, left->data + count, right->data + count, avail);
    cc7a:	adds	r2, r5, #4
    cc7c:	adds	r1, r4, #4
    cc7e:	mov	r0, fp
    cc80:	add	r6, r9
    cc82:	add.w	r2, r2, r9, lsl #1
    cc86:	add.w	r1, r1, r9, lsl #1
			len -= avail;
    cc8a:	subs	r6, #128	; 0x80
			data += avail;
    cc8c:	add.w	fp, fp, r3, lsl #2
			copy_to_buffers(data, left->data + count, right->data + count, avail);
    cc90:	bl	c9ec <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)>
			if (AudioInputUSB::ready_left || AudioInputUSB::ready_right) {
    cc94:	ldr	r3, [r7, #0]
    cc96:	cbnz	r3, cca0 <usb_audio_receive_callback+0xa4>
    cc98:	ldr.w	r3, [r8]
    cc9c:	cmp	r3, #0
    cc9e:	beq.n	cc48 <usb_audio_receive_callback+0x4c>
				AudioInputUSB::incoming_count = count + avail;
    cca0:	movs	r3, #128	; 0x80
    cca2:	ldr	r2, [pc, #140]	; (cd30 <usb_audio_receive_callback+0x134>)
    cca4:	strh	r3, [r2, #0]
				if (len > 0) {
    cca6:	cbz	r6, ccb0 <usb_audio_receive_callback+0xb4>
					usb_audio_overrun_count++;
    cca8:	ldr	r2, [pc, #144]	; (cd3c <usb_audio_receive_callback+0x140>)
    ccaa:	ldr	r3, [r2, #0]
    ccac:	adds	r3, #1
    ccae:	str	r3, [r2, #0]
}
    ccb0:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		left = AudioStream::allocate();
    ccb4:	bl	c644 <AudioStream::allocate()>
		if (left == NULL) return;
    ccb8:	mov	r4, r0
    ccba:	cmp	r0, #0
    ccbc:	beq.n	ccb0 <usb_audio_receive_callback+0xb4>
		AudioInputUSB::incoming_left = left;
    ccbe:	str.w	r0, [sl]
	if (right == NULL) {
    ccc2:	cmp	r5, #0
    ccc4:	bne.n	cc22 <usb_audio_receive_callback+0x26>
		right = AudioStream::allocate();
    ccc6:	bl	c644 <AudioStream::allocate()>
		if (right == NULL) return;
    ccca:	mov	r5, r0
    cccc:	cmp	r0, #0
    ccce:	beq.n	ccb0 <usb_audio_receive_callback+0xb4>
		AudioInputUSB::incoming_right = right;
    ccd0:	ldr	r3, [pc, #96]	; (cd34 <usb_audio_receive_callback+0x138>)
    ccd2:	str	r0, [r3, #0]
    ccd4:	b.n	cc22 <usb_audio_receive_callback+0x26>
    ccd6:	mov	r7, r6
	AudioInputUSB::incoming_count = count;
    ccd8:	ldr	r3, [pc, #84]	; (cd30 <usb_audio_receive_callback+0x134>)
    ccda:	strh	r7, [r3, #0]
}
    ccdc:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				AudioInputUSB::incoming_right = NULL;
    cce0:	ldr	r3, [pc, #80]	; (cd34 <usb_audio_receive_callback+0x138>)
				AudioInputUSB::incoming_left = NULL;
    cce2:	str.w	r0, [sl]
				AudioInputUSB::incoming_right = NULL;
    cce6:	str	r0, [r3, #0]
				AudioInputUSB::incoming_count = 0;
    cce8:	ldr	r3, [pc, #68]	; (cd30 <usb_audio_receive_callback+0x134>)
    ccea:	strh	r0, [r3, #0]
}
    ccec:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				AudioStream::release(left);
    ccf0:	mov	r0, r4
    ccf2:	bl	c6f0 <AudioStream::release(audio_block_struct*)>
				AudioInputUSB::incoming_right = NULL;
    ccf6:	ldr	r3, [pc, #60]	; (cd34 <usb_audio_receive_callback+0x138>)
				AudioInputUSB::incoming_left = NULL;
    ccf8:	str.w	r5, [sl]
				AudioInputUSB::incoming_right = NULL;
    ccfc:	str	r5, [r3, #0]
				AudioInputUSB::incoming_count = 0;
    ccfe:	ldr	r3, [pc, #48]	; (cd30 <usb_audio_receive_callback+0x134>)
    cd00:	strh	r5, [r3, #0]
}
    cd02:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cd06:	mov	r7, r9
    cd08:	mov	r3, r9
			copy_to_buffers(data, left->data + count, right->data + count, len);
    cd0a:	adds	r2, r5, #4
    cd0c:	adds	r1, r4, #4
    cd0e:	mov	r0, fp
			AudioInputUSB::incoming_count = count + len;
    cd10:	add	r7, r6
			copy_to_buffers(data, left->data + count, right->data + count, len);
    cd12:	add	r2, r3
    cd14:	add	r1, r3
    cd16:	mov	r3, r6
    cd18:	bl	c9ec <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)>
			AudioInputUSB::incoming_count = count + len;
    cd1c:	ldr	r3, [pc, #16]	; (cd30 <usb_audio_receive_callback+0x134>)
    cd1e:	strh	r7, [r3, #0]
}
    cd20:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			copy_to_buffers(data, left->data + count, right->data + count, len);
    cd24:	lsls	r3, r7, #1
    cd26:	ldr.w	fp, [pc, #28]	; cd44 <usb_audio_receive_callback+0x148>
    cd2a:	b.n	cd0a <usb_audio_receive_callback+0x10e>
    cd2c:	.word	0x20007b77
    cd30:	.word	0x20007b5a
    cd34:	.word	0x200064cc
    cd38:	.word	0x200064c0
    cd3c:	.word	0x20007b34
    cd40:	.word	0x200064c8
    cd44:	.word	0x20205280
    cd48:	.word	0x200064c4

0000cd4c <rx_event(transfer_struct*)>:
{
    cd4c:	push	{r3, lr}
	if (t) {
    cd4e:	cbz	r0, cd60 <rx_event(transfer_struct*)+0x14>
		int len = AUDIO_RX_SIZE - ((rx_transfer.status >> 16) & 0x7FFF);
    cd50:	ldr	r3, [pc, #68]	; (cd98 <rx_event(transfer_struct*)+0x4c>)
    cd52:	ldr	r0, [r3, #4]
    cd54:	ubfx	r0, r0, #16, #15
		usb_audio_receive_callback(len);
    cd58:	rsb	r0, r0, #180	; 0xb4
    cd5c:	bl	cbfc <usb_audio_receive_callback>
	usb_prepare_transfer(&rx_transfer, rx_buffer, AUDIO_RX_SIZE, 0);
    cd60:	movs	r3, #0
    cd62:	movs	r2, #180	; 0xb4
    cd64:	ldr	r1, [pc, #52]	; (cd9c <rx_event(transfer_struct*)+0x50>)
    cd66:	ldr	r0, [pc, #48]	; (cd98 <rx_event(transfer_struct*)+0x4c>)
    cd68:	bl	b7f8 <usb_prepare_transfer>
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    cd6c:	ldr	r3, [pc, #44]	; (cd9c <rx_event(transfer_struct*)+0x50>)
	uint32_t end_addr = (uint32_t)addr + size;
    cd6e:	add.w	r1, r3, #180	; 0xb4
	asm("dsb");
    cd72:	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    cd76:	mov.w	r2, #3758153728	; 0xe000e000
    cd7a:	str.w	r3, [r2, #3932]	; 0xf5c
		location += 32;
    cd7e:	adds	r3, #32
	} while (location < end_addr);
    cd80:	cmp	r1, r3
    cd82:	bhi.n	cd7a <rx_event(transfer_struct*)+0x2e>
	asm("dsb");
    cd84:	dsb	sy
	asm("isb");
    cd88:	isb	sy
	usb_receive(AUDIO_RX_ENDPOINT, &rx_transfer);
    cd8c:	ldr	r1, [pc, #8]	; (cd98 <rx_event(transfer_struct*)+0x4c>)
    cd8e:	movs	r0, #5
}
    cd90:	ldmia.w	sp!, {r3, lr}
	usb_receive(AUDIO_RX_ENDPOINT, &rx_transfer);
    cd94:	b.w	b850 <usb_receive>
    cd98:	.word	0x200030e0
    cd9c:	.word	0x20205280

0000cda0 <AudioOutputUSB::begin()>:
	update_responsibility = false;
    cda0:	movs	r3, #0
    cda2:	ldr	r0, [pc, #12]	; (cdb0 <AudioOutputUSB::begin()+0x10>)
	left_1st = NULL;
    cda4:	ldr	r1, [pc, #12]	; (cdb4 <AudioOutputUSB::begin()+0x14>)
	right_1st = NULL;
    cda6:	ldr	r2, [pc, #16]	; (cdb8 <AudioOutputUSB::begin()+0x18>)
	update_responsibility = false;
    cda8:	strb	r3, [r0, #0]
	left_1st = NULL;
    cdaa:	str	r3, [r1, #0]
	right_1st = NULL;
    cdac:	str	r3, [r2, #0]
}
    cdae:	bx	lr
    cdb0:	.word	0x20007b78
    cdb4:	.word	0x20006510
    cdb8:	.word	0x20006518

0000cdbc <usb_audio_transmit_callback>:
{
	static uint32_t count=5;
	uint32_t avail, num, target, offset, len=0;
	audio_block_t *left, *right;

	if (++count < 10) {   // TODO: dynamic adjust to match USB rate
    cdbc:	ldr	r2, [pc, #228]	; (cea4 <usb_audio_transmit_callback+0xe8>)
{
    cdbe:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (++count < 10) {   // TODO: dynamic adjust to match USB rate
    cdc2:	ldr	r3, [r2, #0]
    cdc4:	adds	r3, #1
    cdc6:	cmp	r3, #9
{
    cdc8:	vpush	{d8}
	if (++count < 10) {   // TODO: dynamic adjust to match USB rate
    cdcc:	bls.n	ce7a <usb_audio_transmit_callback+0xbe>
		target = 44;
	} else {
		count = 0;
    cdce:	movs	r1, #180	; 0xb4
    cdd0:	movs	r3, #0
		target = 45;
    cdd2:	mov.w	r9, #45	; 0x2d
		count = 0;
    cdd6:	vmov	s16, r1
    cdda:	str	r3, [r2, #0]
{
    cddc:	movs	r7, #0
    cdde:	ldr.w	fp, [pc, #216]	; ceb8 <usb_audio_transmit_callback+0xfc>
			memset(usb_audio_transmit_buffer + len, 0, num * 4);
			//serial_print("%");
			break;
		}
		right = AudioOutputUSB::right_1st;
		offset = AudioOutputUSB::offset_1st;
    cde2:	ldr.w	sl, [pc, #216]	; cebc <usb_audio_transmit_callback+0x100>
		left = AudioOutputUSB::left_1st;
    cde6:	ldr.w	r0, [fp]
		num = target - len;
    cdea:	sub.w	r2, r9, r7
		if (left == NULL) {
    cdee:	cmp	r0, #0
    cdf0:	beq.n	ce88 <usb_audio_transmit_callback+0xcc>
		offset = AudioOutputUSB::offset_1st;
    cdf2:	ldrh.w	ip, [sl]

		avail = AUDIO_BLOCK_SAMPLES - offset;
		if (num > avail) num = avail;

		copy_from_buffers((uint32_t *)usb_audio_transmit_buffer + len,
			left->data + offset, right->data + offset, num);
    cdf6:	adds	r5, r0, #4
		right = AudioOutputUSB::right_1st;
    cdf8:	ldr	r3, [pc, #172]	; (cea8 <usb_audio_transmit_callback+0xec>)
		copy_from_buffers((uint32_t *)usb_audio_transmit_buffer + len,
    cdfa:	add.w	r5, r5, ip, lsl #1
		right = AudioOutputUSB::right_1st;
    cdfe:	ldr.w	r8, [r3]
		avail = AUDIO_BLOCK_SAMPLES - offset;
    ce02:	rsb	r3, ip, #128	; 0x80
    ce06:	cmp	r2, r3
			left->data + offset, right->data + offset, num);
    ce08:	add.w	r4, r8, #4
    ce0c:	it	cs
    ce0e:	movcs	r2, r3
		copy_from_buffers((uint32_t *)usb_audio_transmit_buffer + len,
    ce10:	ldr	r3, [pc, #152]	; (ceac <usb_audio_transmit_callback+0xf0>)
    ce12:	add.w	r4, r4, ip, lsl #1
    ce16:	add.w	r6, r3, r7, lsl #2
	while (len > 0) {
    ce1a:	cbz	r2, ce34 <usb_audio_transmit_callback+0x78>
    ce1c:	mov	r1, r2
		*dst++ = (*right++ << 16) | (*left++ & 0xFFFF);
    ce1e:	ldrsh.w	r3, [r5], #2
	while (len > 0) {
    ce22:	subs	r1, #1
		*dst++ = (*right++ << 16) | (*left++ & 0xFFFF);
    ce24:	ldrsh.w	lr, [r4], #2
    ce28:	uxth	r3, r3
    ce2a:	orr.w	r3, r3, lr, lsl #16
    ce2e:	str.w	r3, [r6], #4
	while (len > 0) {
    ce32:	bne.n	ce1e <usb_audio_transmit_callback+0x62>
		len += num;
		offset += num;
    ce34:	add	ip, r2
		len += num;
    ce36:	add	r7, r2
		if (offset >= AUDIO_BLOCK_SAMPLES) {
    ce38:	cmp.w	ip, #127	; 0x7f
    ce3c:	bhi.n	ce56 <usb_audio_transmit_callback+0x9a>
			AudioOutputUSB::left_2nd = NULL;
			AudioOutputUSB::right_1st = AudioOutputUSB::right_2nd;
			AudioOutputUSB::right_2nd = NULL;
			AudioOutputUSB::offset_1st = 0;
		} else {
			AudioOutputUSB::offset_1st = offset;
    ce3e:	uxth.w	ip, ip
	while (len < target) {
    ce42:	cmp	r7, r9
			AudioOutputUSB::offset_1st = offset;
    ce44:	strh.w	ip, [sl]
	while (len < target) {
    ce48:	bcc.n	cde6 <usb_audio_transmit_callback+0x2a>
		}
	}
	return target * 4;
}
    ce4a:	vmov	r0, s16
    ce4e:	vpop	{d8}
    ce52:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			AudioStream::release(left);
    ce56:	bl	c6f0 <AudioStream::release(audio_block_struct*)>
			AudioStream::release(right);
    ce5a:	mov	r0, r8
    ce5c:	bl	c6f0 <AudioStream::release(audio_block_struct*)>
			AudioOutputUSB::left_1st = AudioOutputUSB::left_2nd;
    ce60:	ldr	r0, [pc, #76]	; (ceb0 <usb_audio_transmit_callback+0xf4>)
			AudioOutputUSB::right_1st = AudioOutputUSB::right_2nd;
    ce62:	ldr	r3, [pc, #80]	; (ceb4 <usb_audio_transmit_callback+0xf8>)
			AudioOutputUSB::left_2nd = NULL;
    ce64:	movs	r2, #0
			AudioOutputUSB::left_1st = AudioOutputUSB::left_2nd;
    ce66:	ldr	r1, [r0, #0]
    ce68:	mov	ip, r2
			AudioOutputUSB::left_2nd = NULL;
    ce6a:	str	r2, [r0, #0]
			AudioOutputUSB::left_1st = AudioOutputUSB::left_2nd;
    ce6c:	str.w	r1, [fp]
			AudioOutputUSB::right_1st = AudioOutputUSB::right_2nd;
    ce70:	ldr	r1, [r3, #0]
			AudioOutputUSB::right_2nd = NULL;
    ce72:	str	r2, [r3, #0]
			AudioOutputUSB::right_1st = AudioOutputUSB::right_2nd;
    ce74:	ldr	r3, [pc, #48]	; (cea8 <usb_audio_transmit_callback+0xec>)
    ce76:	str	r1, [r3, #0]
			AudioOutputUSB::offset_1st = 0;
    ce78:	b.n	ce42 <usb_audio_transmit_callback+0x86>
	if (++count < 10) {   // TODO: dynamic adjust to match USB rate
    ce7a:	movs	r1, #176	; 0xb0
		target = 44;
    ce7c:	mov.w	r9, #44	; 0x2c
	if (++count < 10) {   // TODO: dynamic adjust to match USB rate
    ce80:	str	r3, [r2, #0]
    ce82:	vmov	s16, r1
    ce86:	b.n	cddc <usb_audio_transmit_callback+0x20>
			memset(usb_audio_transmit_buffer + len, 0, num * 4);
    ce88:	ldr	r3, [pc, #32]	; (ceac <usb_audio_transmit_callback+0xf0>)
    ce8a:	mov	r1, r0
    ce8c:	lsls	r2, r2, #2
    ce8e:	add.w	r0, r3, r7, lsl #1
    ce92:	bl	e110 <memset>
}
    ce96:	vmov	r0, s16
    ce9a:	vpop	{d8}
    ce9e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cea2:	nop
    cea4:	.word	0x2000147c
    cea8:	.word	0x20006518
    ceac:	.word	0x20005240
    ceb0:	.word	0x20006514
    ceb4:	.word	0x2000651c
    ceb8:	.word	0x20006510
    cebc:	.word	0x20007b5c

0000cec0 <tx_event(transfer_struct*)>:
{
    cec0:	push	{r3, r4, r5, lr}
	int len = usb_audio_transmit_callback();
    cec2:	bl	cdbc <usb_audio_transmit_callback>
	usb_audio_sync_feedback = feedback_accumulator >> usb_audio_sync_rshift;
    cec6:	ldr	r2, [pc, #68]	; (cf0c <tx_event(transfer_struct*)+0x4c>)
    cec8:	ldr	r3, [pc, #68]	; (cf10 <tx_event(transfer_struct*)+0x50>)
	int len = usb_audio_transmit_callback();
    ceca:	mov	r5, r0
	usb_audio_sync_feedback = feedback_accumulator >> usb_audio_sync_rshift;
    cecc:	ldr	r2, [r2, #0]
    cece:	ldrb	r3, [r3, #0]
	usb_prepare_transfer(&tx_transfer, usb_audio_transmit_buffer, len, 0);
    ced0:	ldr	r4, [pc, #64]	; (cf14 <tx_event(transfer_struct*)+0x54>)
	usb_audio_sync_feedback = feedback_accumulator >> usb_audio_sync_rshift;
    ced2:	lsrs	r2, r3
    ced4:	ldr	r1, [pc, #64]	; (cf18 <tx_event(transfer_struct*)+0x58>)
	usb_prepare_transfer(&tx_transfer, usb_audio_transmit_buffer, len, 0);
    ced6:	movs	r3, #0
	usb_audio_sync_feedback = feedback_accumulator >> usb_audio_sync_rshift;
    ced8:	str	r2, [r1, #0]
	usb_prepare_transfer(&tx_transfer, usb_audio_transmit_buffer, len, 0);
    ceda:	mov	r2, r0
    cedc:	mov	r1, r4
    cede:	ldr	r0, [pc, #60]	; (cf1c <tx_event(transfer_struct*)+0x5c>)
    cee0:	bl	b7f8 <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    cee4:	adds	r0, r4, r5
	asm("dsb");
    cee6:	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    ceea:	mov.w	r3, #3758153728	; 0xe000e000
    ceee:	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    cef2:	adds	r4, #32
	} while (location < end_addr);
    cef4:	cmp	r0, r4
    cef6:	bhi.n	ceee <tx_event(transfer_struct*)+0x2e>
	asm("dsb");
    cef8:	dsb	sy
	asm("isb");
    cefc:	isb	sy
	usb_transmit(AUDIO_TX_ENDPOINT, &tx_transfer);
    cf00:	ldr	r1, [pc, #24]	; (cf1c <tx_event(transfer_struct*)+0x5c>)
    cf02:	movs	r0, #5
}
    cf04:	ldmia.w	sp!, {r3, r4, r5, lr}
	usb_transmit(AUDIO_TX_ENDPOINT, &tx_transfer);
    cf08:	b.w	b828 <usb_transmit>
    cf0c:	.word	0x200073c8
    cf10:	.word	0x20007b8d
    cf14:	.word	0x20005240
    cf18:	.word	0x20205260
    cf1c:	.word	0x20003220

0000cf20 <usb_audio_configure>:
{
    cf20:	push	{r3, r4, r5, lr}
	usb_audio_overrun_count = 0;
    cf22:	ldr	r1, [pc, #172]	; (cfd0 <usb_audio_configure+0xb0>)
	usb_audio_underrun_count = 0;
    cf24:	movs	r4, #0
    cf26:	ldr	r3, [pc, #172]	; (cfd4 <usb_audio_configure+0xb4>)
	if (usb_high_speed) {
    cf28:	ldr	r2, [pc, #172]	; (cfd8 <usb_audio_configure+0xb8>)
	usb_audio_underrun_count = 0;
    cf2a:	str	r4, [r3, #0]
	usb_audio_overrun_count = 0;
    cf2c:	str	r4, [r1, #0]
	if (usb_high_speed) {
    cf2e:	ldrb	r1, [r2, #0]
	feedback_accumulator = 739875226; // 44.1 * 2^24
    cf30:	ldr	r3, [pc, #168]	; (cfdc <usb_audio_configure+0xbc>)
	if (usb_high_speed) {
    cf32:	cmp	r1, r4
	feedback_accumulator = 739875226; // 44.1 * 2^24
    cf34:	ldr	r2, [pc, #168]	; (cfe0 <usb_audio_configure+0xc0>)
		usb_audio_sync_nbytes = 4;
    cf36:	ldr	r5, [pc, #172]	; (cfe4 <usb_audio_configure+0xc4>)
	memset(&rx_transfer, 0, sizeof(rx_transfer));
    cf38:	mov	r1, r4
	feedback_accumulator = 739875226; // 44.1 * 2^24
    cf3a:	str	r2, [r3, #0]
	if (usb_high_speed) {
    cf3c:	itete	eq
    cf3e:	moveq	r3, #3
    cf40:	movne	r3, #4
    cf42:	moveq	r0, #10
    cf44:	movne	r0, #8
	memset(&rx_transfer, 0, sizeof(rx_transfer));
    cf46:	movs	r2, #32
		usb_audio_sync_nbytes = 4;
    cf48:	strb	r3, [r5, #0]
		usb_audio_sync_rshift = 8;
    cf4a:	ldr	r3, [pc, #156]	; (cfe8 <usb_audio_configure+0xc8>)
    cf4c:	strb	r0, [r3, #0]
	memset(&rx_transfer, 0, sizeof(rx_transfer));
    cf4e:	ldr	r0, [pc, #156]	; (cfec <usb_audio_configure+0xcc>)
    cf50:	bl	e110 <memset>
	usb_config_rx_iso(AUDIO_RX_ENDPOINT, AUDIO_RX_SIZE, 1, rx_event);
    cf54:	movs	r2, #1
    cf56:	movs	r1, #180	; 0xb4
    cf58:	movs	r0, #5
    cf5a:	ldr	r3, [pc, #148]	; (cff0 <usb_audio_configure+0xd0>)
    cf5c:	bl	b728 <usb_config_rx_iso>
	usb_prepare_transfer(&rx_transfer, rx_buffer, AUDIO_RX_SIZE, 0);
    cf60:	mov	r3, r4
    cf62:	movs	r2, #180	; 0xb4
    cf64:	ldr	r1, [pc, #140]	; (cff4 <usb_audio_configure+0xd4>)
    cf66:	ldr	r0, [pc, #132]	; (cfec <usb_audio_configure+0xcc>)
    cf68:	bl	b7f8 <usb_prepare_transfer>
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    cf6c:	ldr	r3, [pc, #132]	; (cff4 <usb_audio_configure+0xd4>)
	uint32_t end_addr = (uint32_t)addr + size;
    cf6e:	add.w	r1, r3, #180	; 0xb4
	asm("dsb");
    cf72:	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    cf76:	mov.w	r2, #3758153728	; 0xe000e000
    cf7a:	str.w	r3, [r2, #3932]	; 0xf5c
		location += 32;
    cf7e:	adds	r3, #32
	} while (location < end_addr);
    cf80:	cmp	r1, r3
    cf82:	bhi.n	cf7a <usb_audio_configure+0x5a>
	asm("dsb");
    cf84:	dsb	sy
	asm("isb");
    cf88:	isb	sy
	usb_receive(AUDIO_RX_ENDPOINT, &rx_transfer);
    cf8c:	ldr	r1, [pc, #92]	; (cfec <usb_audio_configure+0xcc>)
    cf8e:	movs	r0, #5
    cf90:	bl	b850 <usb_receive>
	memset(&sync_transfer, 0, sizeof(sync_transfer));
    cf94:	movs	r2, #32
    cf96:	movs	r1, #0
    cf98:	ldr	r0, [pc, #92]	; (cff8 <usb_audio_configure+0xd8>)
    cf9a:	bl	e110 <memset>
	usb_config_tx_iso(AUDIO_SYNC_ENDPOINT, usb_audio_sync_nbytes, 1, sync_event);
    cf9e:	ldr	r3, [pc, #92]	; (cffc <usb_audio_configure+0xdc>)
    cfa0:	ldrb	r1, [r5, #0]
    cfa2:	movs	r2, #1
    cfa4:	movs	r0, #6
    cfa6:	bl	b78c <usb_config_tx_iso>
	sync_event(NULL);
    cfaa:	movs	r0, #0
    cfac:	bl	ca84 <sync_event(transfer_struct*)>
	memset(&tx_transfer, 0, sizeof(tx_transfer));
    cfb0:	movs	r2, #32
    cfb2:	movs	r1, #0
    cfb4:	ldr	r0, [pc, #72]	; (d000 <usb_audio_configure+0xe0>)
    cfb6:	bl	e110 <memset>
	usb_config_tx_iso(AUDIO_TX_ENDPOINT, AUDIO_TX_SIZE, 1, tx_event);
    cfba:	movs	r0, #5
    cfbc:	ldr	r3, [pc, #68]	; (d004 <usb_audio_configure+0xe4>)
    cfbe:	movs	r2, #1
    cfc0:	movs	r1, #180	; 0xb4
    cfc2:	bl	b78c <usb_config_tx_iso>
	tx_event(NULL);
    cfc6:	movs	r0, #0
}
    cfc8:	ldmia.w	sp!, {r3, r4, r5, lr}
	tx_event(NULL);
    cfcc:	b.w	cec0 <tx_event(transfer_struct*)>
    cfd0:	.word	0x20007b34
    cfd4:	.word	0x20007b38
    cfd8:	.word	0x20007b91
    cfdc:	.word	0x200073c8
    cfe0:	.word	0x2c19999a
    cfe4:	.word	0x20007b8c
    cfe8:	.word	0x20007b8d
    cfec:	.word	0x200030e0
    cff0:	.word	0x0000cd4d
    cff4:	.word	0x20205280
    cff8:	.word	0x20003100
    cffc:	.word	0x0000ca85
    d000:	.word	0x20003220
    d004:	.word	0x0000cec1

0000d008 <usb_audio_get_feature>:
};

int usb_audio_get_feature(void *stp, uint8_t *data, uint32_t *datalen)
{
	struct setup_struct setup = *((struct setup_struct *)stp);
	if (setup.bmRequestType==0xA1) { // should check bRequest, bChannel, and UnitID
    d008:	ldrb	r3, [r0, #0]
    d00a:	cmp	r3, #161	; 0xa1
    d00c:	beq.n	d012 <usb_audio_get_feature+0xa>
			if (setup.bCS==0x01) { // mute
				data[0] = AudioInputUSB::features.mute;  // 1=mute, 0=unmute
				*datalen = 1;
				return 1;
			}
			else if (setup.bCS==0x02) { // volume
    d00e:	movs	r0, #0
				*datalen = 2;
				return 1;
			}
	}
	return 0;
}
    d010:	bx	lr
	struct setup_struct setup = *((struct setup_struct *)stp);
    d012:	ldrb	r3, [r0, #3]
    d014:	ldrb	r0, [r0, #1]
			if (setup.bCS==0x01) { // mute
    d016:	cmp	r3, #1
    d018:	beq.n	d02c <usb_audio_get_feature+0x24>
			else if (setup.bCS==0x02) { // volume
    d01a:	cmp	r3, #2
    d01c:	bne.n	d00e <usb_audio_get_feature+0x6>
				if (setup.bRequest==0x81) { // GET_CURR
    d01e:	subs	r0, #129	; 0x81
    d020:	cmp	r0, #3
    d022:	bhi.n	d00e <usb_audio_get_feature+0x6>
    d024:	tbb	[pc, r0]
    d028:	.word	0x0b13171b
{
    d02c:	push	{r4}
				data[0] = AudioInputUSB::features.mute;  // 1=mute, 0=unmute
    d02e:	ldr	r4, [pc, #56]	; (d068 <usb_audio_get_feature+0x60>)
				return 1;
    d030:	mov	r0, r3
				data[0] = AudioInputUSB::features.mute;  // 1=mute, 0=unmute
    d032:	ldr	r4, [r4, #4]
    d034:	strb	r4, [r1, #0]
}
    d036:	ldr.w	r4, [sp], #4
				*datalen = 1;
    d03a:	str	r3, [r2, #0]
}
    d03c:	bx	lr
					data[0] = 1; // increment vol by by 1
    d03e:	movs	r3, #1
    d040:	movs	r0, #0
    d042:	strb	r3, [r1, #0]
				*datalen = 2;
    d044:	movs	r3, #2
					data[1] = (AudioInputUSB::features.volume>>8) & 0xFF;
    d046:	strb	r0, [r1, #1]
				return 1;
    d048:	movs	r0, #1
				*datalen = 2;
    d04a:	str	r3, [r2, #0]
				return 1;
    d04c:	bx	lr
					data[0] = FEATURE_MAX_VOLUME;  // max level, for range of 0 to MAX
    d04e:	movs	r3, #255	; 0xff
    d050:	movs	r0, #0
    d052:	strb	r3, [r1, #0]
					data[1] = 0;
    d054:	b.n	d044 <usb_audio_get_feature+0x3c>
					data[0] = 0;     // min level is 0
    d056:	movs	r3, #0
    d058:	mov	r0, r3
    d05a:	strb	r3, [r1, #0]
					data[1] = 0;
    d05c:	b.n	d044 <usb_audio_get_feature+0x3c>
					data[0] = AudioInputUSB::features.volume & 0xFF;
    d05e:	ldr	r3, [pc, #8]	; (d068 <usb_audio_get_feature+0x60>)
    d060:	ldr	r0, [r3, #8]
    d062:	strb	r0, [r1, #0]
					data[1] = (AudioInputUSB::features.volume>>8) & 0xFF;
    d064:	ldrb	r0, [r3, #9]
    d066:	b.n	d044 <usb_audio_get_feature+0x3c>
    d068:	.word	0x2000146c

0000d06c <usb_audio_set_feature>:

int usb_audio_set_feature(void *stp, uint8_t *buf) 
{
	struct setup_struct setup = *((struct setup_struct *)stp);
	if (setup.bmRequestType==0x21) { // should check bRequest, bChannel and UnitID
    d06c:	ldrb	r3, [r0, #0]
    d06e:	cmp	r3, #33	; 0x21
    d070:	beq.n	d076 <usb_audio_set_feature+0xa>
					AudioInputUSB::features.change = 1;
					return 1;
				}
			}
	}
	return 0;
    d072:	movs	r0, #0
}
    d074:	bx	lr
	struct setup_struct setup = *((struct setup_struct *)stp);
    d076:	ldrb	r3, [r0, #3]
    d078:	ldrb	r2, [r0, #1]
			if (setup.bCS==0x01) { // mute
    d07a:	cmp	r3, #1
    d07c:	beq.n	d092 <usb_audio_set_feature+0x26>
				if (setup.bRequest==0x01) { // SET_CUR
    d07e:	cmp	r3, #2
    d080:	bne.n	d072 <usb_audio_set_feature+0x6>
    d082:	cmp	r2, #1
    d084:	bne.n	d072 <usb_audio_set_feature+0x6>
					AudioInputUSB::features.volume = buf[0];
    d086:	ldr	r3, [pc, #28]	; (d0a4 <usb_audio_set_feature+0x38>)
					return 1;
    d088:	mov	r0, r2
					AudioInputUSB::features.volume = buf[0];
    d08a:	ldrb	r1, [r1, #0]
					AudioInputUSB::features.change = 1;
    d08c:	str	r2, [r3, #0]
					AudioInputUSB::features.volume = buf[0];
    d08e:	str	r1, [r3, #8]
					return 1;
    d090:	bx	lr
				if (setup.bRequest==0x01) { // SET_CUR
    d092:	cmp	r2, #1
    d094:	bne.n	d072 <usb_audio_set_feature+0x6>
					AudioInputUSB::features.mute = buf[0]; // 1=mute,0=unmute
    d096:	ldr	r3, [pc, #12]	; (d0a4 <usb_audio_set_feature+0x38>)
					return 1;
    d098:	mov	r0, r2
					AudioInputUSB::features.mute = buf[0]; // 1=mute,0=unmute
    d09a:	ldrb	r1, [r1, #0]
					AudioInputUSB::features.change = 1;
    d09c:	strd	r2, r1, [r3]
					return 1;
    d0a0:	bx	lr
    d0a2:	nop
    d0a4:	.word	0x2000146c

0000d0a8 <Print::write(unsigned char const*, unsigned int)>:

#include "debug/printf.h"
#undef printf

size_t Print::write(const uint8_t *buffer, size_t size)
{
    d0a8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (buffer == nullptr) return 0;
    d0ac:	mov	r4, r1
    d0ae:	cbz	r1, d0e6 <Print::write(unsigned char const*, unsigned int)+0x3e>
	size_t count = 0;
	while (size--) count += write(*buffer++);
    d0b0:	cbz	r2, d0ee <Print::write(unsigned char const*, unsigned int)+0x46>
    d0b2:	mov	r8, r0
    d0b4:	adds	r6, r1, r2
	size_t count = 0;
    d0b6:	movs	r5, #0
    d0b8:	ldr	r7, [pc, #56]	; (d0f4 <Print::write(unsigned char const*, unsigned int)+0x4c>)
    d0ba:	b.n	d0c6 <Print::write(unsigned char const*, unsigned int)+0x1e>
    d0bc:	bl	a8bc <usb_serial_putchar>
	while (size--) count += write(*buffer++);
    d0c0:	cmp	r4, r6
    d0c2:	add	r5, r0
    d0c4:	beq.n	d0e0 <Print::write(unsigned char const*, unsigned int)+0x38>
    d0c6:	ldr.w	r3, [r8]
    d0ca:	ldrb.w	r0, [r4], #1
    d0ce:	ldr	r3, [r3, #0]
    d0d0:	cmp	r3, r7
    d0d2:	beq.n	d0bc <Print::write(unsigned char const*, unsigned int)+0x14>
    d0d4:	mov	r1, r0
    d0d6:	mov	r0, r8
    d0d8:	blx	r3
    d0da:	cmp	r4, r6
    d0dc:	add	r5, r0
    d0de:	bne.n	d0c6 <Print::write(unsigned char const*, unsigned int)+0x1e>
	return count;
}
    d0e0:	mov	r0, r5
    d0e2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (buffer == nullptr) return 0;
    d0e6:	mov	r5, r1
}
    d0e8:	mov	r0, r5
    d0ea:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (buffer == nullptr) return 0;
    d0ee:	mov	r5, r2
    d0f0:	b.n	d0e0 <Print::write(unsigned char const*, unsigned int)+0x38>
    d0f2:	nop
    d0f4:	.word	0x0000c465

0000d0f8 <Print::println()>:
	if (n < 0) return printNumber64(-n, 10, 1);
	return printNumber64(n, 10, 0);
}

size_t Print::println(void)
{
    d0f8:	push	{lr}
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    d0fa:	ldr	r3, [r0, #0]
{
    d0fc:	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
    d0fe:	movw	ip, #2573	; 0xa0d
	return write(buf, 2);
    d102:	movs	r2, #2
    d104:	add	r1, sp, #4
    d106:	ldr	r3, [r3, #4]
	uint8_t buf[2]={'\r', '\n'};
    d108:	strh.w	ip, [sp, #4]
	return write(buf, 2);
    d10c:	blx	r3
}
    d10e:	add	sp, #12
    d110:	ldr.w	pc, [sp], #4

0000d114 <_write>:

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
	((class Print *)file)->write((uint8_t *)ptr, len);
    d114:	ldr	r3, [r0, #0]
{
    d116:	push	{r4, lr}
    d118:	mov	r4, r2
	((class Print *)file)->write((uint8_t *)ptr, len);
    d11a:	ldr	r3, [r3, #4]
    d11c:	blx	r3
	return len;
}
    d11e:	mov	r0, r4
    d120:	pop	{r4, pc}
    d122:	nop

0000d124 <Print::printf(char const*, ...)>:
}

int Print::printf(const char *format, ...)
{
    d124:	push	{r1, r2, r3}
    d126:	push	{lr}
    d128:	sub	sp, #8
    d12a:	add	r2, sp, #12
    d12c:	ldr.w	r1, [r2], #4
	va_list ap;
	va_start(ap, format);
    d130:	str	r2, [sp, #4]
#ifdef __STRICT_ANSI__
	va_end(ap);
	return 0;  // TODO: make this work with -std=c++0x
#else
	int retval = vdprintf((int)this, format, ap);
    d132:	bl	df38 <vdprintf>
	va_end(ap);
	return retval;
#endif
}
    d136:	add	sp, #8
    d138:	ldr.w	lr, [sp], #4
    d13c:	add	sp, #12
    d13e:	bx	lr

0000d140 <serialEvent()>:

#include <Arduino.h>
void serialEvent() __attribute__((weak));
void serialEvent() {
}
    d140:	bx	lr
    d142:	nop

0000d144 <operator new(unsigned int)>:

#include <stdlib.h>

void * operator new(size_t size)
{
	return malloc(size);
    d144:	b.w	d2dc <malloc>

0000d148 <operator delete(void*, unsigned int)>:
	free(ptr);
}

void operator delete(void * ptr, size_t size)
{
	free(ptr);
    d148:	b.w	d2ec <free>

0000d14c <ultoa>:


char * ultoa(unsigned long val, char *buf, int radix)
{
	unsigned digit;
	int i=0, j;
    d14c:	add.w	ip, r1, #4294967295
{
    d150:	push	{r4, r5, r6, lr}
	char t;

	while (1) {
		digit = val % radix;
    d152:	mov	r6, ip
	int i=0, j;
    d154:	movs	r4, #0
    d156:	b.n	d15a <ultoa+0xe>
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    d158:	adds	r4, #1
		digit = val % radix;
    d15a:	udiv	r5, r0, r2
    d15e:	mls	r3, r2, r5, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    d162:	cmp	r3, #9
    d164:	add.w	lr, r3, #55	; 0x37
    d168:	add.w	r3, r3, #48	; 0x30
    d16c:	uxtb.w	lr, lr
    d170:	it	ls
    d172:	uxtbls.w	lr, r3
		if (val == 0) break;
    d176:	cmp	r0, r2
		val /= radix;
    d178:	mov	r0, r5
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    d17a:	strb.w	lr, [r6, #1]!
		if (val == 0) break;
    d17e:	bcs.n	d158 <ultoa+0xc>
	}
	buf[i + 1] = 0;
    d180:	adds	r3, r4, #1
    d182:	movs	r2, #0
    d184:	adds	r0, r1, r3
    d186:	strb	r2, [r1, r3]
	for (j=0; j < i; j++, i--) {
    d188:	cbz	r4, d1aa <ultoa+0x5e>
		t = buf[j];
    d18a:	mov	r2, ip
    d18c:	ldrb.w	r5, [ip, #1]!
		buf[j] = buf[i];
    d190:	ldrb.w	r6, [r0, #-1]!
	for (j=0; j < i; j++, i--) {
    d194:	sub.w	r3, r1, ip
    d198:	adds	r2, #2
		buf[j] = buf[i];
    d19a:	strb.w	r6, [ip]
	for (j=0; j < i; j++, i--) {
    d19e:	subs	r3, #1
    d1a0:	subs	r2, r2, r1
		buf[i] = t;
    d1a2:	strb	r5, [r0, #0]
	for (j=0; j < i; j++, i--) {
    d1a4:	add	r3, r4
    d1a6:	cmp	r2, r3
    d1a8:	blt.n	d18a <ultoa+0x3e>
	}
	return buf;
}
    d1aa:	mov	r0, r1
    d1ac:	pop	{r4, r5, r6, pc}
    d1ae:	nop

0000d1b0 <pit_isr()>:

//FASTRUN
static void pit_isr()
{
    d1b0:	push	{r4, lr}

		}
	}
#else
	IMXRT_PIT_CHANNEL_t *channel= IMXRT_PIT_CHANNELS;
	if (funct_table[0] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[0]();}
    d1b2:	ldr	r4, [pc, #76]	; (d200 <pit_isr()+0x50>)
    d1b4:	ldr	r3, [r4, #0]
    d1b6:	cbz	r3, d1be <pit_isr()+0xe>
    d1b8:	ldr	r2, [pc, #72]	; (d204 <pit_isr()+0x54>)
    d1ba:	ldr	r1, [r2, #12]
    d1bc:	cbnz	r1, d1f8 <pit_isr()+0x48>
	channel++;
	if (funct_table[1] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[1]();}
    d1be:	ldr	r3, [r4, #4]
    d1c0:	cbz	r3, d1c8 <pit_isr()+0x18>
    d1c2:	ldr	r2, [pc, #64]	; (d204 <pit_isr()+0x54>)
    d1c4:	ldr	r1, [r2, #28]
    d1c6:	cbnz	r1, d1f0 <pit_isr()+0x40>
	channel++;
	if (funct_table[2] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[2]();}
    d1c8:	ldr	r3, [r4, #8]
    d1ca:	cbz	r3, d1d2 <pit_isr()+0x22>
    d1cc:	ldr	r2, [pc, #52]	; (d204 <pit_isr()+0x54>)
    d1ce:	ldr	r1, [r2, #44]	; 0x2c
    d1d0:	cbnz	r1, d1e8 <pit_isr()+0x38>
	channel++;
	if (funct_table[3] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[3]();}
    d1d2:	ldr	r3, [r4, #12]
    d1d4:	cbz	r3, d1e6 <pit_isr()+0x36>
    d1d6:	ldr	r2, [pc, #44]	; (d204 <pit_isr()+0x54>)
    d1d8:	ldr	r1, [r2, #60]	; 0x3c
    d1da:	cbz	r1, d1e6 <pit_isr()+0x36>
    d1dc:	movs	r1, #1
#endif
}
    d1de:	ldmia.w	sp!, {r4, lr}
	if (funct_table[3] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[3]();}
    d1e2:	str	r1, [r2, #60]	; 0x3c
    d1e4:	bx	r3
}
    d1e6:	pop	{r4, pc}
	if (funct_table[2] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[2]();}
    d1e8:	movs	r1, #1
    d1ea:	str	r1, [r2, #44]	; 0x2c
    d1ec:	blx	r3
    d1ee:	b.n	d1d2 <pit_isr()+0x22>
	if (funct_table[1] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[1]();}
    d1f0:	movs	r1, #1
    d1f2:	str	r1, [r2, #28]
    d1f4:	blx	r3
    d1f6:	b.n	d1c8 <pit_isr()+0x18>
	if (funct_table[0] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[0]();}
    d1f8:	movs	r1, #1
    d1fa:	str	r1, [r2, #12]
    d1fc:	blx	r3
    d1fe:	b.n	d1be <pit_isr()+0xe>
    d200:	.word	0x20001ec0
    d204:	.word	0x40084100

0000d208 <IntervalTimer::beginCycles(void (*)(), unsigned long)>:
	if (channel) {
    d208:	ldr	r3, [r0, #0]
{
    d20a:	mov	ip, r0
    d20c:	push	{r4}
	if (channel) {
    d20e:	cbz	r3, d26e <IntervalTimer::beginCycles(void (*)(), unsigned long)+0x66>
		channel->TCTRL = 0;
    d210:	movs	r0, #0
    d212:	str	r0, [r3, #8]
		channel->TFLG = 1;
    d214:	movs	r0, #1
    d216:	str	r0, [r3, #12]
	channel->LDVAL = cycles;
    d218:	str	r2, [r3, #0]
	int index = channel - IMXRT_PIT_CHANNELS;
    d21a:	ldr	r2, [pc, #140]	; (d2a8 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xa0>)
	funct_table[index] = funct;
    d21c:	ldr	r0, [pc, #140]	; (d2ac <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xa4>)
	int index = channel - IMXRT_PIT_CHANNELS;
    d21e:	add	r2, r3
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
    d220:	ldr	r4, [pc, #140]	; (d2b0 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xa8>)
    d222:	asrs	r2, r2, #4
	funct_table[index] = funct;
    d224:	str.w	r1, [r0, r2, lsl #2]
	channel->TCTRL = 3;
    d228:	movs	r0, #3
	nvic_priorites[index] = nvic_priority;
    d22a:	ldr	r1, [pc, #136]	; (d2b4 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xac>)
	channel->TCTRL = 3;
    d22c:	str	r0, [r3, #8]
	nvic_priorites[index] = nvic_priority;
    d22e:	ldrb.w	r3, [ip, #4]
    d232:	ldr	r0, [pc, #132]	; (d2b8 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xb0>)
    d234:	strb	r3, [r1, r2]
		if (top_priority > nvic_priorites[i]) top_priority = nvic_priorites[i];
    d236:	ldrb	r3, [r1, #0]
    d238:	ldrb	r2, [r1, #1]
    d23a:	str.w	r4, [r0, #552]	; 0x228
    d23e:	cmp	r3, r2
    d240:	ldrb	r0, [r1, #2]
    d242:	it	cs
    d244:	movcs	r3, r2
    d246:	ldrb	r2, [r1, #3]
    d248:	cmp	r3, r0
    d24a:	it	cs
    d24c:	movcs	r3, r0
    d24e:	cmp	r3, r2
    d250:	it	cs
    d252:	movcs	r3, r2
	NVIC_SET_PRIORITY(IRQ_PIT, top_priority);
    d254:	ldr	r4, [pc, #100]	; (d2bc <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xb4>)
	NVIC_ENABLE_IRQ(IRQ_PIT);
    d256:	mov.w	r2, #3758153728	; 0xe000e000
    d25a:	mov.w	r1, #67108864	; 0x4000000
	return true;
    d25e:	movs	r0, #1
	NVIC_SET_PRIORITY(IRQ_PIT, top_priority);
    d260:	strb.w	r3, [r4, #122]	; 0x7a
}
    d264:	ldr.w	r4, [sp], #4
	NVIC_ENABLE_IRQ(IRQ_PIT);
    d268:	str.w	r1, [r2, #268]	; 0x10c
}
    d26c:	bx	lr
		CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    d26e:	ldr	r0, [pc, #80]	; (d2c0 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xb8>)
			if (++channel >= IMXRT_PIT_CHANNELS + NUM_CHANNELS) {
    d270:	ldr	r4, [pc, #80]	; (d2c4 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xbc>)
		CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    d272:	ldr	r3, [r0, #108]	; 0x6c
    d274:	orr.w	r3, r3, #12288	; 0x3000
    d278:	str	r3, [r0, #108]	; 0x6c
		PIT_MCR = 1;
    d27a:	movs	r0, #1
    d27c:	ldr	r3, [pc, #72]	; (d2c8 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xc0>)
    d27e:	str	r0, [r3, #0]
		channel = IMXRT_PIT_CHANNELS;
    d280:	ldr	r0, [pc, #72]	; (d2cc <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xc4>)
    d282:	mov	r3, r0
    d284:	str.w	r0, [ip]
			if (channel->TCTRL == 0) break;
    d288:	ldr	r0, [r3, #8]
    d28a:	cmp	r0, #0
    d28c:	beq.n	d218 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0x10>
			if (++channel >= IMXRT_PIT_CHANNELS + NUM_CHANNELS) {
    d28e:	adds	r3, #16
    d290:	cmp	r3, r4
    d292:	str.w	r3, [ip]
    d296:	bne.n	d288 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0x80>
				channel = NULL;
    d298:	movs	r3, #0
}
    d29a:	ldr.w	r4, [sp], #4
				return false;
    d29e:	mov	r0, r3
				channel = NULL;
    d2a0:	str.w	r3, [ip]
}
    d2a4:	bx	lr
    d2a6:	nop
    d2a8:	.word	0xbff7bf00
    d2ac:	.word	0x20001ec0
    d2b0:	.word	0x0000d1b1
    d2b4:	.word	0x20001478
    d2b8:	.word	0x20001c00
    d2bc:	.word	0xe000e400
    d2c0:	.word	0x400fc000
    d2c4:	.word	0x40084140
    d2c8:	.word	0x40084000
    d2cc:	.word	0x40084100

0000d2d0 <__aeabi_atexit>:
    d2d0:	mov	r3, r0
    d2d2:	mov	r0, r1
    d2d4:	mov	r1, r3
    d2d6:	b.w	dc4c <__cxa_atexit>
    d2da:	nop

0000d2dc <malloc>:
    d2dc:	ldr	r3, [pc, #8]	; (d2e8 <malloc+0xc>)
    d2de:	mov	r1, r0
    d2e0:	ldr	r0, [r3, #0]
    d2e2:	b.w	d2fc <_malloc_r>
    d2e6:	nop
    d2e8:	.word	0x20001a14

0000d2ec <free>:
    d2ec:	ldr	r3, [pc, #8]	; (d2f8 <free+0xc>)
    d2ee:	mov	r1, r0
    d2f0:	ldr	r0, [r3, #0]
    d2f2:	b.w	e684 <_free_r>
    d2f6:	nop
    d2f8:	.word	0x20001a14

0000d2fc <_malloc_r>:
    d2fc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d300:	add.w	r6, r1, #11
    d304:	cmp	r6, #22
    d306:	sub	sp, #12
    d308:	mov	r4, r0
    d30a:	bhi.n	d356 <_malloc_r+0x5a>
    d30c:	cmp	r1, #16
    d30e:	bhi.w	d486 <_malloc_r+0x18a>
    d312:	bl	d85c <__malloc_lock>
    d316:	movs	r6, #16
    d318:	movs	r2, #24
    d31a:	movs	r0, #2
    d31c:	ldr	r7, [pc, #724]	; (d5f4 <_malloc_r+0x2f8>)
    d31e:	add	r2, r7
    d320:	sub.w	r1, r2, #8
    d324:	ldr	r3, [r2, #4]
    d326:	cmp	r3, r1
    d328:	beq.w	d4a0 <_malloc_r+0x1a4>
    d32c:	ldr	r2, [r3, #4]
    d32e:	ldr	r1, [r3, #12]
    d330:	bic.w	r2, r2, #3
    d334:	add	r2, r3
    d336:	ldr	r5, [r3, #8]
    d338:	str	r1, [r5, #12]
    d33a:	str	r5, [r1, #8]
    d33c:	ldr	r1, [r2, #4]
    d33e:	orr.w	r1, r1, #1
    d342:	mov	r0, r4
    d344:	str	r1, [r2, #4]
    d346:	add.w	r5, r3, #8
    d34a:	bl	d868 <__malloc_unlock>
    d34e:	mov	r0, r5
    d350:	add	sp, #12
    d352:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d356:	bics.w	r6, r6, #7
    d35a:	bmi.w	d486 <_malloc_r+0x18a>
    d35e:	cmp	r1, r6
    d360:	bhi.w	d486 <_malloc_r+0x18a>
    d364:	bl	d85c <__malloc_lock>
    d368:	cmp.w	r6, #504	; 0x1f8
    d36c:	bcc.w	d6a4 <_malloc_r+0x3a8>
    d370:	lsrs	r3, r6, #9
    d372:	beq.w	d494 <_malloc_r+0x198>
    d376:	cmp	r3, #4
    d378:	bhi.w	d65a <_malloc_r+0x35e>
    d37c:	lsrs	r3, r6, #6
    d37e:	add.w	r0, r3, #57	; 0x39
    d382:	add.w	ip, r3, #56	; 0x38
    d386:	lsls	r3, r0, #3
    d388:	ldr	r7, [pc, #616]	; (d5f4 <_malloc_r+0x2f8>)
    d38a:	add	r3, r7
    d38c:	sub.w	r5, r3, #8
    d390:	ldr	r3, [r3, #4]
    d392:	cmp	r5, r3
    d394:	bne.n	d3a4 <_malloc_r+0xa8>
    d396:	b.n	d3b2 <_malloc_r+0xb6>
    d398:	cmp	r1, #0
    d39a:	bge.w	d5ec <_malloc_r+0x2f0>
    d39e:	ldr	r3, [r3, #12]
    d3a0:	cmp	r5, r3
    d3a2:	beq.n	d3b2 <_malloc_r+0xb6>
    d3a4:	ldr	r2, [r3, #4]
    d3a6:	bic.w	r2, r2, #3
    d3aa:	subs	r1, r2, r6
    d3ac:	cmp	r1, #15
    d3ae:	ble.n	d398 <_malloc_r+0x9c>
    d3b0:	mov	r0, ip
    d3b2:	ldr	r5, [r7, #16]
    d3b4:	ldr.w	ip, [pc, #592]	; d608 <_malloc_r+0x30c>
    d3b8:	cmp	r5, ip
    d3ba:	beq.n	d4b6 <_malloc_r+0x1ba>
    d3bc:	ldr	r2, [r5, #4]
    d3be:	bic.w	r2, r2, #3
    d3c2:	subs	r3, r2, r6
    d3c4:	cmp	r3, #15
    d3c6:	bgt.w	d6c0 <_malloc_r+0x3c4>
    d3ca:	cmp	r3, #0
    d3cc:	strd	ip, ip, [r7, #16]
    d3d0:	bge.w	d6ac <_malloc_r+0x3b0>
    d3d4:	cmp.w	r2, #512	; 0x200
    d3d8:	bcs.w	d610 <_malloc_r+0x314>
    d3dc:	lsrs	r3, r2, #3
    d3de:	ldr	r1, [r7, #4]
    d3e0:	adds	r3, #1
    d3e2:	mov.w	lr, r2, lsr #5
    d3e6:	movs	r2, #1
    d3e8:	lsl.w	r2, r2, lr
    d3ec:	orrs	r2, r1
    d3ee:	ldr.w	lr, [r7, r3, lsl #3]
    d3f2:	str.w	lr, [r5, #8]
    d3f6:	add.w	r1, r7, r3, lsl #3
    d3fa:	subs	r1, #8
    d3fc:	str	r1, [r5, #12]
    d3fe:	str	r2, [r7, #4]
    d400:	str.w	r5, [r7, r3, lsl #3]
    d404:	str.w	r5, [lr, #12]
    d408:	asrs	r3, r0, #2
    d40a:	movs	r1, #1
    d40c:	lsls	r1, r3
    d40e:	cmp	r1, r2
    d410:	bhi.n	d4c2 <_malloc_r+0x1c6>
    d412:	tst	r1, r2
    d414:	bne.n	d424 <_malloc_r+0x128>
    d416:	bic.w	r0, r0, #3
    d41a:	lsls	r1, r1, #1
    d41c:	tst	r1, r2
    d41e:	add.w	r0, r0, #4
    d422:	beq.n	d41a <_malloc_r+0x11e>
    d424:	add.w	r9, r7, r0, lsl #3
    d428:	mov	r5, r9
    d42a:	mov	lr, r0
    d42c:	ldr.w	r8, [r5, #12]
    d430:	cmp	r5, r8
    d432:	bne.n	d446 <_malloc_r+0x14a>
    d434:	b.n	d672 <_malloc_r+0x376>
    d436:	cmp	r3, #0
    d438:	bge.w	d684 <_malloc_r+0x388>
    d43c:	ldr.w	r8, [r8, #12]
    d440:	cmp	r5, r8
    d442:	beq.w	d672 <_malloc_r+0x376>
    d446:	ldr.w	r2, [r8, #4]
    d44a:	bic.w	r2, r2, #3
    d44e:	subs	r3, r2, r6
    d450:	cmp	r3, #15
    d452:	ble.n	d436 <_malloc_r+0x13a>
    d454:	mov	r0, r4
    d456:	ldrd	r5, r4, [r8, #8]
    d45a:	add.w	r1, r8, r6
    d45e:	orr.w	r6, r6, #1
    d462:	str.w	r6, [r8, #4]
    d466:	str	r4, [r5, #12]
    d468:	str	r5, [r4, #8]
    d46a:	orr.w	r4, r3, #1
    d46e:	strd	r1, r1, [r7, #16]
    d472:	strd	ip, ip, [r1, #8]
    d476:	str	r4, [r1, #4]
    d478:	str.w	r3, [r8, r2]
    d47c:	bl	d868 <__malloc_unlock>
    d480:	add.w	r5, r8, #8
    d484:	b.n	d48c <_malloc_r+0x190>
    d486:	movs	r3, #12
    d488:	str	r3, [r4, #0]
    d48a:	movs	r5, #0
    d48c:	mov	r0, r5
    d48e:	add	sp, #12
    d490:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d494:	mov.w	r3, #512	; 0x200
    d498:	movs	r0, #64	; 0x40
    d49a:	mov.w	ip, #63	; 0x3f
    d49e:	b.n	d388 <_malloc_r+0x8c>
    d4a0:	ldr	r3, [r2, #12]
    d4a2:	cmp	r2, r3
    d4a4:	it	eq
    d4a6:	addeq	r0, #2
    d4a8:	bne.w	d32c <_malloc_r+0x30>
    d4ac:	ldr	r5, [r7, #16]
    d4ae:	ldr.w	ip, [pc, #344]	; d608 <_malloc_r+0x30c>
    d4b2:	cmp	r5, ip
    d4b4:	bne.n	d3bc <_malloc_r+0xc0>
    d4b6:	ldr	r2, [r7, #4]
    d4b8:	asrs	r3, r0, #2
    d4ba:	movs	r1, #1
    d4bc:	lsls	r1, r3
    d4be:	cmp	r1, r2
    d4c0:	bls.n	d412 <_malloc_r+0x116>
    d4c2:	ldr	r5, [r7, #8]
    d4c4:	ldr	r3, [r5, #4]
    d4c6:	bic.w	r9, r3, #3
    d4ca:	cmp	r6, r9
    d4cc:	bhi.n	d4d6 <_malloc_r+0x1da>
    d4ce:	sub.w	r3, r9, r6
    d4d2:	cmp	r3, #15
    d4d4:	bgt.n	d5cc <_malloc_r+0x2d0>
    d4d6:	ldr.w	fp, [pc, #308]	; d60c <_malloc_r+0x310>
    d4da:	ldr	r3, [pc, #284]	; (d5f8 <_malloc_r+0x2fc>)
    d4dc:	ldr.w	r2, [fp]
    d4e0:	ldr	r3, [r3, #0]
    d4e2:	adds	r2, #1
    d4e4:	add	r3, r6
    d4e6:	add.w	sl, r5, r9
    d4ea:	beq.w	d754 <_malloc_r+0x458>
    d4ee:	add.w	r3, r3, #4096	; 0x1000
    d4f2:	adds	r3, #15
    d4f4:	bic.w	r8, r3, #4080	; 0xff0
    d4f8:	bic.w	r8, r8, #15
    d4fc:	mov	r1, r8
    d4fe:	mov	r0, r4
    d500:	bl	e32c <_sbrk_r>
    d504:	adds	r1, r0, #1
    d506:	mov	r2, r0
    d508:	beq.w	d6f2 <_malloc_r+0x3f6>
    d50c:	cmp	sl, r0
    d50e:	bhi.w	d6ee <_malloc_r+0x3f2>
    d512:	ldr	r3, [pc, #232]	; (d5fc <_malloc_r+0x300>)
    d514:	ldr	r1, [r3, #0]
    d516:	add	r1, r8
    d518:	str	r1, [r3, #0]
    d51a:	mov	r0, r1
    d51c:	beq.w	d7bc <_malloc_r+0x4c0>
    d520:	ldr.w	r1, [fp]
    d524:	str	r3, [sp, #4]
    d526:	adds	r1, #1
    d528:	ittet	ne
    d52a:	subne.w	r1, r2, sl
    d52e:	addne	r1, r1, r0
    d530:	streq.w	r2, [fp]
    d534:	strne	r1, [r3, #0]
    d536:	ands.w	fp, r2, #7
    d53a:	beq.w	d76c <_malloc_r+0x470>
    d53e:	rsb	r1, fp, #8
    d542:	add	r2, r1
    d544:	rsb	r1, fp, #4096	; 0x1000
    d548:	add	r8, r2
    d54a:	adds	r1, #8
    d54c:	sub.w	r1, r1, r8
    d550:	ubfx	sl, r1, #0, #12
    d554:	mov	r1, sl
    d556:	mov	r0, r4
    d558:	str	r2, [sp, #0]
    d55a:	bl	e32c <_sbrk_r>
    d55e:	adds	r2, r0, #1
    d560:	ldrd	r2, r3, [sp]
    d564:	beq.w	d806 <_malloc_r+0x50a>
    d568:	subs	r0, r0, r2
    d56a:	add.w	r8, r0, sl
    d56e:	ldr	r1, [r3, #0]
    d570:	str	r2, [r7, #8]
    d572:	orr.w	r0, r8, #1
    d576:	add	r1, sl
    d578:	cmp	r5, r7
    d57a:	str	r0, [r2, #4]
    d57c:	str	r1, [r3, #0]
    d57e:	beq.w	d7d4 <_malloc_r+0x4d8>
    d582:	cmp.w	r9, #15
    d586:	bls.w	d7d8 <_malloc_r+0x4dc>
    d58a:	ldr	r0, [r5, #4]
    d58c:	sub.w	ip, r9, #12
    d590:	bic.w	ip, ip, #7
    d594:	and.w	r0, r0, #1
    d598:	orr.w	r0, r0, ip
    d59c:	str	r0, [r5, #4]
    d59e:	mov.w	lr, #5
    d5a2:	add.w	r0, r5, ip
    d5a6:	cmp.w	ip, #15
    d5aa:	strd	lr, lr, [r0, #4]
    d5ae:	bhi.w	d816 <_malloc_r+0x51a>
    d5b2:	ldr	r0, [r2, #4]
    d5b4:	mov	r5, r2
    d5b6:	ldr	r3, [pc, #72]	; (d600 <_malloc_r+0x304>)
    d5b8:	ldr	r2, [r3, #0]
    d5ba:	cmp	r2, r1
    d5bc:	it	cc
    d5be:	strcc	r1, [r3, #0]
    d5c0:	ldr	r3, [pc, #64]	; (d604 <_malloc_r+0x308>)
    d5c2:	ldr	r2, [r3, #0]
    d5c4:	cmp	r2, r1
    d5c6:	it	cc
    d5c8:	strcc	r1, [r3, #0]
    d5ca:	b.n	d6f6 <_malloc_r+0x3fa>
    d5cc:	adds	r2, r5, r6
    d5ce:	orr.w	r3, r3, #1
    d5d2:	orr.w	r6, r6, #1
    d5d6:	str	r6, [r5, #4]
    d5d8:	mov	r0, r4
    d5da:	str	r2, [r7, #8]
    d5dc:	str	r3, [r2, #4]
    d5de:	bl	d868 <__malloc_unlock>
    d5e2:	adds	r5, #8
    d5e4:	mov	r0, r5
    d5e6:	add	sp, #12
    d5e8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d5ec:	ldr	r1, [r3, #12]
    d5ee:	add	r2, r3
    d5f0:	b.n	d336 <_malloc_r+0x3a>
    d5f2:	nop
    d5f4:	.word	0x200015f8
    d5f8:	.word	0x200067cc
    d5fc:	.word	0x2000679c
    d600:	.word	0x200067c4
    d604:	.word	0x200067c8
    d608:	.word	0x20001600
    d60c:	.word	0x20001a00
    d610:	cmp.w	r2, #2560	; 0xa00
    d614:	mov.w	r3, r2, lsr #9
    d618:	bcc.n	d6e2 <_malloc_r+0x3e6>
    d61a:	cmp	r3, #20
    d61c:	bhi.w	d78e <_malloc_r+0x492>
    d620:	add.w	r1, r3, #92	; 0x5c
    d624:	lsls	r1, r1, #3
    d626:	adds	r3, #91	; 0x5b
    d628:	add.w	lr, r7, r1
    d62c:	ldr	r1, [r7, r1]
    d62e:	sub.w	lr, lr, #8
    d632:	cmp	lr, r1
    d634:	beq.w	d75a <_malloc_r+0x45e>
    d638:	ldr	r3, [r1, #4]
    d63a:	bic.w	r3, r3, #3
    d63e:	cmp	r3, r2
    d640:	bls.n	d648 <_malloc_r+0x34c>
    d642:	ldr	r1, [r1, #8]
    d644:	cmp	lr, r1
    d646:	bne.n	d638 <_malloc_r+0x33c>
    d648:	ldr.w	lr, [r1, #12]
    d64c:	ldr	r2, [r7, #4]
    d64e:	strd	r1, lr, [r5, #8]
    d652:	str.w	r5, [lr, #8]
    d656:	str	r5, [r1, #12]
    d658:	b.n	d408 <_malloc_r+0x10c>
    d65a:	cmp	r3, #20
    d65c:	bls.n	d712 <_malloc_r+0x416>
    d65e:	cmp	r3, #84	; 0x54
    d660:	bhi.w	d79e <_malloc_r+0x4a2>
    d664:	lsrs	r3, r6, #12
    d666:	add.w	r0, r3, #111	; 0x6f
    d66a:	add.w	ip, r3, #110	; 0x6e
    d66e:	lsls	r3, r0, #3
    d670:	b.n	d388 <_malloc_r+0x8c>
    d672:	add.w	lr, lr, #1
    d676:	tst.w	lr, #3
    d67a:	add.w	r5, r5, #8
    d67e:	bne.w	d42c <_malloc_r+0x130>
    d682:	b.n	d728 <_malloc_r+0x42c>
    d684:	add	r2, r8
    d686:	mov	r5, r8
    d688:	ldr	r3, [r2, #4]
    d68a:	ldr.w	r1, [r8, #12]
    d68e:	orr.w	r3, r3, #1
    d692:	str	r3, [r2, #4]
    d694:	ldr.w	r3, [r5, #8]!
    d698:	mov	r0, r4
    d69a:	str	r1, [r3, #12]
    d69c:	str	r3, [r1, #8]
    d69e:	bl	d868 <__malloc_unlock>
    d6a2:	b.n	d48c <_malloc_r+0x190>
    d6a4:	lsrs	r0, r6, #3
    d6a6:	add.w	r2, r6, #8
    d6aa:	b.n	d31c <_malloc_r+0x20>
    d6ac:	add	r2, r5
    d6ae:	mov	r0, r4
    d6b0:	ldr	r3, [r2, #4]
    d6b2:	orr.w	r3, r3, #1
    d6b6:	str	r3, [r2, #4]
    d6b8:	adds	r5, #8
    d6ba:	bl	d868 <__malloc_unlock>
    d6be:	b.n	d48c <_malloc_r+0x190>
    d6c0:	adds	r1, r5, r6
    d6c2:	mov	r0, r4
    d6c4:	orr.w	r6, r6, #1
    d6c8:	orr.w	r4, r3, #1
    d6cc:	str	r6, [r5, #4]
    d6ce:	strd	r1, r1, [r7, #16]
    d6d2:	strd	ip, ip, [r1, #8]
    d6d6:	str	r4, [r1, #4]
    d6d8:	str	r3, [r5, r2]
    d6da:	bl	d868 <__malloc_unlock>
    d6de:	adds	r5, #8
    d6e0:	b.n	d48c <_malloc_r+0x190>
    d6e2:	lsrs	r3, r2, #6
    d6e4:	add.w	r1, r3, #57	; 0x39
    d6e8:	lsls	r1, r1, #3
    d6ea:	adds	r3, #56	; 0x38
    d6ec:	b.n	d628 <_malloc_r+0x32c>
    d6ee:	cmp	r5, r7
    d6f0:	beq.n	d7b2 <_malloc_r+0x4b6>
    d6f2:	ldr	r5, [r7, #8]
    d6f4:	ldr	r0, [r5, #4]
    d6f6:	bic.w	r8, r0, #3
    d6fa:	cmp	r6, r8
    d6fc:	sub.w	r3, r8, r6
    d700:	bhi.n	d708 <_malloc_r+0x40c>
    d702:	cmp	r3, #15
    d704:	bgt.w	d5cc <_malloc_r+0x2d0>
    d708:	mov	r0, r4
    d70a:	bl	d868 <__malloc_unlock>
    d70e:	movs	r5, #0
    d710:	b.n	d48c <_malloc_r+0x190>
    d712:	add.w	r0, r3, #92	; 0x5c
    d716:	add.w	ip, r3, #91	; 0x5b
    d71a:	lsls	r3, r0, #3
    d71c:	b.n	d388 <_malloc_r+0x8c>
    d71e:	ldr.w	r3, [r9], #-8
    d722:	cmp	r3, r9
    d724:	bne.w	d854 <_malloc_r+0x558>
    d728:	tst.w	r0, #3
    d72c:	add.w	r0, r0, #4294967295
    d730:	bne.n	d71e <_malloc_r+0x422>
    d732:	ldr	r3, [r7, #4]
    d734:	bic.w	r3, r3, r1
    d738:	str	r3, [r7, #4]
    d73a:	lsls	r1, r1, #1
    d73c:	cmp	r1, r3
    d73e:	bhi.w	d4c2 <_malloc_r+0x1c6>
    d742:	cbnz	r1, d74c <_malloc_r+0x450>
    d744:	b.n	d4c2 <_malloc_r+0x1c6>
    d746:	lsls	r1, r1, #1
    d748:	add.w	lr, lr, #4
    d74c:	tst	r1, r3
    d74e:	beq.n	d746 <_malloc_r+0x44a>
    d750:	mov	r0, lr
    d752:	b.n	d424 <_malloc_r+0x128>
    d754:	add.w	r8, r3, #16
    d758:	b.n	d4fc <_malloc_r+0x200>
    d75a:	asrs	r2, r3, #2
    d75c:	mov.w	r8, #1
    d760:	ldr	r3, [r7, #4]
    d762:	lsl.w	r2, r8, r2
    d766:	orrs	r2, r3
    d768:	str	r2, [r7, #4]
    d76a:	b.n	d64e <_malloc_r+0x352>
    d76c:	add.w	r1, r2, r8
    d770:	negs	r1, r1
    d772:	ubfx	sl, r1, #0, #12
    d776:	mov	r1, sl
    d778:	mov	r0, r4
    d77a:	str	r2, [sp, #0]
    d77c:	bl	e32c <_sbrk_r>
    d780:	adds	r3, r0, #1
    d782:	ldrd	r2, r3, [sp]
    d786:	bne.w	d568 <_malloc_r+0x26c>
    d78a:	mov	sl, fp
    d78c:	b.n	d56e <_malloc_r+0x272>
    d78e:	cmp	r3, #84	; 0x54
    d790:	bhi.n	d7de <_malloc_r+0x4e2>
    d792:	lsrs	r3, r2, #12
    d794:	add.w	r1, r3, #111	; 0x6f
    d798:	lsls	r1, r1, #3
    d79a:	adds	r3, #110	; 0x6e
    d79c:	b.n	d628 <_malloc_r+0x32c>
    d79e:	cmp.w	r3, #340	; 0x154
    d7a2:	bhi.n	d7f0 <_malloc_r+0x4f4>
    d7a4:	lsrs	r3, r6, #15
    d7a6:	add.w	r0, r3, #120	; 0x78
    d7aa:	add.w	ip, r3, #119	; 0x77
    d7ae:	lsls	r3, r0, #3
    d7b0:	b.n	d388 <_malloc_r+0x8c>
    d7b2:	ldr	r3, [pc, #164]	; (d858 <_malloc_r+0x55c>)
    d7b4:	ldr	r0, [r3, #0]
    d7b6:	add	r0, r8
    d7b8:	str	r0, [r3, #0]
    d7ba:	b.n	d520 <_malloc_r+0x224>
    d7bc:	ubfx	ip, sl, #0, #12
    d7c0:	cmp.w	ip, #0
    d7c4:	bne.w	d520 <_malloc_r+0x224>
    d7c8:	ldr	r5, [r7, #8]
    d7ca:	add	r8, r9
    d7cc:	orr.w	r0, r8, #1
    d7d0:	str	r0, [r5, #4]
    d7d2:	b.n	d5b6 <_malloc_r+0x2ba>
    d7d4:	mov	r5, r2
    d7d6:	b.n	d5b6 <_malloc_r+0x2ba>
    d7d8:	movs	r3, #1
    d7da:	str	r3, [r2, #4]
    d7dc:	b.n	d708 <_malloc_r+0x40c>
    d7de:	cmp.w	r3, #340	; 0x154
    d7e2:	bhi.n	d82c <_malloc_r+0x530>
    d7e4:	lsrs	r3, r2, #15
    d7e6:	add.w	r1, r3, #120	; 0x78
    d7ea:	lsls	r1, r1, #3
    d7ec:	adds	r3, #119	; 0x77
    d7ee:	b.n	d628 <_malloc_r+0x32c>
    d7f0:	movw	r2, #1364	; 0x554
    d7f4:	cmp	r3, r2
    d7f6:	bhi.n	d840 <_malloc_r+0x544>
    d7f8:	lsrs	r3, r6, #18
    d7fa:	add.w	r0, r3, #125	; 0x7d
    d7fe:	add.w	ip, r3, #124	; 0x7c
    d802:	lsls	r3, r0, #3
    d804:	b.n	d388 <_malloc_r+0x8c>
    d806:	sub.w	fp, fp, #8
    d80a:	add	r8, fp
    d80c:	sub.w	r8, r8, r2
    d810:	mov.w	sl, #0
    d814:	b.n	d56e <_malloc_r+0x272>
    d816:	add.w	r1, r5, #8
    d81a:	mov	r0, r4
    d81c:	str	r3, [sp, #0]
    d81e:	bl	e684 <_free_r>
    d822:	ldr	r5, [r7, #8]
    d824:	ldr	r3, [sp, #0]
    d826:	ldr	r0, [r5, #4]
    d828:	ldr	r1, [r3, #0]
    d82a:	b.n	d5b6 <_malloc_r+0x2ba>
    d82c:	movw	r1, #1364	; 0x554
    d830:	cmp	r3, r1
    d832:	bhi.n	d84c <_malloc_r+0x550>
    d834:	lsrs	r3, r2, #18
    d836:	add.w	r1, r3, #125	; 0x7d
    d83a:	lsls	r1, r1, #3
    d83c:	adds	r3, #124	; 0x7c
    d83e:	b.n	d628 <_malloc_r+0x32c>
    d840:	mov.w	r3, #1016	; 0x3f8
    d844:	movs	r0, #127	; 0x7f
    d846:	mov.w	ip, #126	; 0x7e
    d84a:	b.n	d388 <_malloc_r+0x8c>
    d84c:	mov.w	r1, #1016	; 0x3f8
    d850:	movs	r3, #126	; 0x7e
    d852:	b.n	d628 <_malloc_r+0x32c>
    d854:	ldr	r3, [r7, #4]
    d856:	b.n	d73a <_malloc_r+0x43e>
    d858:	.word	0x2000679c

0000d85c <__malloc_lock>:
    d85c:	ldr	r0, [pc, #4]	; (d864 <__malloc_lock+0x8>)
    d85e:	b.w	e3d8 <__retarget_lock_acquire_recursive>
    d862:	nop
    d864:	.word	0x20006794

0000d868 <__malloc_unlock>:
    d868:	ldr	r0, [pc, #4]	; (d870 <__malloc_unlock+0x8>)
    d86a:	b.w	e3dc <__retarget_lock_release_recursive>
    d86e:	nop
    d870:	.word	0x20006794

0000d874 <_realloc_r>:
    d874:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d878:	mov	r7, r2
    d87a:	cmp	r1, #0
    d87c:	beq.w	d9b0 <_realloc_r+0x13c>
    d880:	mov	r4, r1
    d882:	add.w	r5, r7, #11
    d886:	mov	r8, r0
    d888:	bl	d85c <__malloc_lock>
    d88c:	cmp	r5, #22
    d88e:	ldr.w	r1, [r4, #-4]
    d892:	bhi.n	d94c <_realloc_r+0xd8>
    d894:	movs	r5, #16
    d896:	mov	r2, r5
    d898:	cmp	r7, r5
    d89a:	bhi.n	d956 <_realloc_r+0xe2>
    d89c:	bic.w	r6, r1, #3
    d8a0:	cmp	r6, r2
    d8a2:	sub.w	r9, r4, #8
    d8a6:	bge.n	d96e <_realloc_r+0xfa>
    d8a8:	ldr	r3, [pc, #752]	; (db9c <_realloc_r+0x328>)
    d8aa:	ldr.w	ip, [r3, #8]
    d8ae:	add.w	r0, r9, r6
    d8b2:	cmp	ip, r0
    d8b4:	beq.w	d9e6 <_realloc_r+0x172>
    d8b8:	ldr.w	ip, [r0, #4]
    d8bc:	bic.w	r3, ip, #1
    d8c0:	add	r3, r0
    d8c2:	ldr	r3, [r3, #4]
    d8c4:	lsls	r3, r3, #31
    d8c6:	bmi.n	d99a <_realloc_r+0x126>
    d8c8:	bic.w	ip, ip, #3
    d8cc:	add.w	r3, r6, ip
    d8d0:	cmp	r3, r2
    d8d2:	bge.n	d964 <_realloc_r+0xf0>
    d8d4:	lsls	r3, r1, #31
    d8d6:	bmi.n	d8fa <_realloc_r+0x86>
    d8d8:	ldr.w	r3, [r4, #-8]
    d8dc:	sub.w	sl, r9, r3
    d8e0:	ldr.w	r3, [sl, #4]
    d8e4:	bic.w	r1, r3, #3
    d8e8:	add	ip, r1
    d8ea:	add	ip, r6
    d8ec:	cmp	ip, r2
    d8ee:	bge.w	db14 <_realloc_r+0x2a0>
    d8f2:	adds	r3, r6, r1
    d8f4:	cmp	r3, r2
    d8f6:	bge.w	daca <_realloc_r+0x256>
    d8fa:	mov	r1, r7
    d8fc:	mov	r0, r8
    d8fe:	bl	d2fc <_malloc_r>
    d902:	mov	r7, r0
    d904:	cbz	r0, d940 <_realloc_r+0xcc>
    d906:	ldr.w	r3, [r4, #-4]
    d90a:	bic.w	r3, r3, #1
    d90e:	add	r3, r9
    d910:	sub.w	r2, r0, #8
    d914:	cmp	r3, r2
    d916:	beq.w	dabe <_realloc_r+0x24a>
    d91a:	subs	r2, r6, #4
    d91c:	cmp	r2, #36	; 0x24
    d91e:	bhi.w	db0c <_realloc_r+0x298>
    d922:	cmp	r2, #19
    d924:	bhi.w	da80 <_realloc_r+0x20c>
    d928:	mov	r3, r0
    d92a:	mov	r2, r4
    d92c:	ldr	r1, [r2, #0]
    d92e:	str	r1, [r3, #0]
    d930:	ldr	r1, [r2, #4]
    d932:	str	r1, [r3, #4]
    d934:	ldr	r2, [r2, #8]
    d936:	str	r2, [r3, #8]
    d938:	mov	r1, r4
    d93a:	mov	r0, r8
    d93c:	bl	e684 <_free_r>
    d940:	mov	r0, r8
    d942:	bl	d868 <__malloc_unlock>
    d946:	mov	r0, r7
    d948:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d94c:	bic.w	r5, r5, #7
    d950:	cmp	r5, #0
    d952:	mov	r2, r5
    d954:	bge.n	d898 <_realloc_r+0x24>
    d956:	movs	r3, #12
    d958:	str.w	r3, [r8]
    d95c:	movs	r7, #0
    d95e:	mov	r0, r7
    d960:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d964:	mov	r6, r3
    d966:	ldrd	r2, r3, [r0, #8]
    d96a:	str	r3, [r2, #12]
    d96c:	str	r2, [r3, #8]
    d96e:	subs	r3, r6, r5
    d970:	cmp	r3, #15
    d972:	bhi.n	d9ba <_realloc_r+0x146>
    d974:	ldr.w	r3, [r9, #4]
    d978:	and.w	r3, r3, #1
    d97c:	orrs	r3, r6
    d97e:	add	r6, r9
    d980:	str.w	r3, [r9, #4]
    d984:	ldr	r3, [r6, #4]
    d986:	orr.w	r3, r3, #1
    d98a:	str	r3, [r6, #4]
    d98c:	mov	r0, r8
    d98e:	mov	r7, r4
    d990:	bl	d868 <__malloc_unlock>
    d994:	mov	r0, r7
    d996:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d99a:	lsls	r1, r1, #31
    d99c:	bmi.n	d8fa <_realloc_r+0x86>
    d99e:	ldr.w	r3, [r4, #-8]
    d9a2:	sub.w	sl, r9, r3
    d9a6:	ldr.w	r1, [sl, #4]
    d9aa:	bic.w	r1, r1, #3
    d9ae:	b.n	d8f2 <_realloc_r+0x7e>
    d9b0:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d9b4:	mov	r1, r2
    d9b6:	b.w	d2fc <_malloc_r>
    d9ba:	ldr.w	r2, [r9, #4]
    d9be:	add.w	r1, r9, r5
    d9c2:	and.w	r2, r2, #1
    d9c6:	add	r6, r9
    d9c8:	orr.w	r3, r3, #1
    d9cc:	orrs	r2, r5
    d9ce:	str.w	r2, [r9, #4]
    d9d2:	str	r3, [r1, #4]
    d9d4:	ldr	r3, [r6, #4]
    d9d6:	orr.w	r3, r3, #1
    d9da:	adds	r1, #8
    d9dc:	str	r3, [r6, #4]
    d9de:	mov	r0, r8
    d9e0:	bl	e684 <_free_r>
    d9e4:	b.n	d98c <_realloc_r+0x118>
    d9e6:	ldr.w	r0, [ip, #4]
    d9ea:	bic.w	fp, r0, #3
    d9ee:	add.w	ip, r6, fp
    d9f2:	add.w	r0, r5, #16
    d9f6:	cmp	ip, r0
    d9f8:	bge.n	da96 <_realloc_r+0x222>
    d9fa:	lsls	r1, r1, #31
    d9fc:	bmi.w	d8fa <_realloc_r+0x86>
    da00:	ldr.w	r1, [r4, #-8]
    da04:	sub.w	sl, r9, r1
    da08:	ldr.w	r1, [sl, #4]
    da0c:	bic.w	r1, r1, #3
    da10:	add	fp, r1
    da12:	add	fp, r6
    da14:	cmp	r0, fp
    da16:	bgt.w	d8f2 <_realloc_r+0x7e>
    da1a:	mov	r7, sl
    da1c:	ldr.w	r1, [sl, #12]
    da20:	ldr.w	r0, [r7, #8]!
    da24:	subs	r2, r6, #4
    da26:	cmp	r2, #36	; 0x24
    da28:	str	r1, [r0, #12]
    da2a:	str	r0, [r1, #8]
    da2c:	bhi.w	dbe6 <_realloc_r+0x372>
    da30:	cmp	r2, #19
    da32:	bls.w	dbe2 <_realloc_r+0x36e>
    da36:	ldr	r1, [r4, #0]
    da38:	str.w	r1, [sl, #8]
    da3c:	ldr	r1, [r4, #4]
    da3e:	str.w	r1, [sl, #12]
    da42:	cmp	r2, #27
    da44:	bhi.w	dc06 <_realloc_r+0x392>
    da48:	adds	r4, #8
    da4a:	add.w	r2, sl, #16
    da4e:	ldr	r1, [r4, #0]
    da50:	str	r1, [r2, #0]
    da52:	ldr	r1, [r4, #4]
    da54:	str	r1, [r2, #4]
    da56:	ldr	r1, [r4, #8]
    da58:	str	r1, [r2, #8]
    da5a:	add.w	r1, sl, r5
    da5e:	sub.w	r2, fp, r5
    da62:	orr.w	r2, r2, #1
    da66:	str	r1, [r3, #8]
    da68:	str	r2, [r1, #4]
    da6a:	ldr.w	r3, [sl, #4]
    da6e:	and.w	r3, r3, #1
    da72:	orrs	r3, r5
    da74:	mov	r0, r8
    da76:	str.w	r3, [sl, #4]
    da7a:	bl	d868 <__malloc_unlock>
    da7e:	b.n	d95e <_realloc_r+0xea>
    da80:	ldr	r3, [r4, #0]
    da82:	str	r3, [r0, #0]
    da84:	ldr	r3, [r4, #4]
    da86:	str	r3, [r0, #4]
    da88:	cmp	r2, #27
    da8a:	bhi.n	db5e <_realloc_r+0x2ea>
    da8c:	add.w	r2, r4, #8
    da90:	add.w	r3, r0, #8
    da94:	b.n	d92c <_realloc_r+0xb8>
    da96:	add.w	r2, r9, r5
    da9a:	str	r2, [r3, #8]
    da9c:	sub.w	r3, ip, r5
    daa0:	orr.w	r3, r3, #1
    daa4:	str	r3, [r2, #4]
    daa6:	ldr.w	r3, [r4, #-4]
    daaa:	and.w	r3, r3, #1
    daae:	orrs	r3, r5
    dab0:	mov	r0, r8
    dab2:	str.w	r3, [r4, #-4]
    dab6:	bl	d868 <__malloc_unlock>
    daba:	mov	r7, r4
    dabc:	b.n	d95e <_realloc_r+0xea>
    dabe:	ldr.w	r3, [r0, #-4]
    dac2:	bic.w	r3, r3, #3
    dac6:	add	r6, r3
    dac8:	b.n	d96e <_realloc_r+0xfa>
    daca:	mov	r7, sl
    dacc:	ldr.w	r1, [sl, #12]
    dad0:	ldr.w	r0, [r7, #8]!
    dad4:	subs	r2, r6, #4
    dad6:	cmp	r2, #36	; 0x24
    dad8:	str	r1, [r0, #12]
    dada:	str	r0, [r1, #8]
    dadc:	bhi.n	db78 <_realloc_r+0x304>
    dade:	cmp	r2, #19
    dae0:	bls.n	db74 <_realloc_r+0x300>
    dae2:	ldr	r1, [r4, #0]
    dae4:	str.w	r1, [sl, #8]
    dae8:	ldr	r1, [r4, #4]
    daea:	str.w	r1, [sl, #12]
    daee:	cmp	r2, #27
    daf0:	bhi.n	dba0 <_realloc_r+0x32c>
    daf2:	adds	r4, #8
    daf4:	add.w	r2, sl, #16
    daf8:	mov	r6, r3
    dafa:	ldr	r3, [r4, #0]
    dafc:	str	r3, [r2, #0]
    dafe:	ldr	r3, [r4, #4]
    db00:	str	r3, [r2, #4]
    db02:	ldr	r3, [r4, #8]
    db04:	str	r3, [r2, #8]
    db06:	mov	r9, sl
    db08:	mov	r4, r7
    db0a:	b.n	d96e <_realloc_r+0xfa>
    db0c:	mov	r1, r4
    db0e:	bl	e018 <memmove>
    db12:	b.n	d938 <_realloc_r+0xc4>
    db14:	ldrd	r1, r3, [r0, #8]
    db18:	mov	r7, sl
    db1a:	str	r3, [r1, #12]
    db1c:	str	r1, [r3, #8]
    db1e:	ldr.w	r1, [r7, #8]!
    db22:	ldr.w	r3, [sl, #12]
    db26:	str	r3, [r1, #12]
    db28:	subs	r2, r6, #4
    db2a:	cmp	r2, #36	; 0x24
    db2c:	str	r1, [r3, #8]
    db2e:	bhi.n	db8c <_realloc_r+0x318>
    db30:	cmp	r2, #19
    db32:	bls.n	db88 <_realloc_r+0x314>
    db34:	ldr	r3, [r4, #0]
    db36:	str.w	r3, [sl, #8]
    db3a:	ldr	r3, [r4, #4]
    db3c:	str.w	r3, [sl, #12]
    db40:	cmp	r2, #27
    db42:	bhi.n	dbca <_realloc_r+0x356>
    db44:	adds	r4, #8
    db46:	add.w	r3, sl, #16
    db4a:	ldr	r2, [r4, #0]
    db4c:	str	r2, [r3, #0]
    db4e:	ldr	r2, [r4, #4]
    db50:	str	r2, [r3, #4]
    db52:	ldr	r2, [r4, #8]
    db54:	str	r2, [r3, #8]
    db56:	mov	r6, ip
    db58:	mov	r9, sl
    db5a:	mov	r4, r7
    db5c:	b.n	d96e <_realloc_r+0xfa>
    db5e:	ldr	r3, [r4, #8]
    db60:	str	r3, [r0, #8]
    db62:	ldr	r3, [r4, #12]
    db64:	str	r3, [r0, #12]
    db66:	cmp	r2, #36	; 0x24
    db68:	beq.n	dbb8 <_realloc_r+0x344>
    db6a:	add.w	r2, r4, #16
    db6e:	add.w	r3, r0, #16
    db72:	b.n	d92c <_realloc_r+0xb8>
    db74:	mov	r2, r7
    db76:	b.n	daf8 <_realloc_r+0x284>
    db78:	mov	r1, r4
    db7a:	mov	r0, r7
    db7c:	mov	r6, r3
    db7e:	mov	r9, sl
    db80:	bl	e018 <memmove>
    db84:	mov	r4, r7
    db86:	b.n	d96e <_realloc_r+0xfa>
    db88:	mov	r3, r7
    db8a:	b.n	db4a <_realloc_r+0x2d6>
    db8c:	mov	r1, r4
    db8e:	mov	r0, r7
    db90:	mov	r6, ip
    db92:	mov	r9, sl
    db94:	bl	e018 <memmove>
    db98:	mov	r4, r7
    db9a:	b.n	d96e <_realloc_r+0xfa>
    db9c:	.word	0x200015f8
    dba0:	ldr	r1, [r4, #8]
    dba2:	str.w	r1, [sl, #16]
    dba6:	ldr	r1, [r4, #12]
    dba8:	str.w	r1, [sl, #20]
    dbac:	cmp	r2, #36	; 0x24
    dbae:	beq.n	dbf2 <_realloc_r+0x37e>
    dbb0:	adds	r4, #16
    dbb2:	add.w	r2, sl, #24
    dbb6:	b.n	daf8 <_realloc_r+0x284>
    dbb8:	ldr	r3, [r4, #16]
    dbba:	str	r3, [r0, #16]
    dbbc:	ldr	r1, [r4, #20]
    dbbe:	str	r1, [r0, #20]
    dbc0:	add.w	r2, r4, #24
    dbc4:	add.w	r3, r0, #24
    dbc8:	b.n	d92c <_realloc_r+0xb8>
    dbca:	ldr	r3, [r4, #8]
    dbcc:	str.w	r3, [sl, #16]
    dbd0:	ldr	r3, [r4, #12]
    dbd2:	str.w	r3, [sl, #20]
    dbd6:	cmp	r2, #36	; 0x24
    dbd8:	beq.n	dc1e <_realloc_r+0x3aa>
    dbda:	adds	r4, #16
    dbdc:	add.w	r3, sl, #24
    dbe0:	b.n	db4a <_realloc_r+0x2d6>
    dbe2:	mov	r2, r7
    dbe4:	b.n	da4e <_realloc_r+0x1da>
    dbe6:	mov	r1, r4
    dbe8:	mov	r0, r7
    dbea:	bl	e018 <memmove>
    dbee:	ldr	r3, [pc, #88]	; (dc48 <_realloc_r+0x3d4>)
    dbf0:	b.n	da5a <_realloc_r+0x1e6>
    dbf2:	ldr	r2, [r4, #16]
    dbf4:	str.w	r2, [sl, #24]
    dbf8:	ldr	r2, [r4, #20]
    dbfa:	str.w	r2, [sl, #28]
    dbfe:	adds	r4, #24
    dc00:	add.w	r2, sl, #32
    dc04:	b.n	daf8 <_realloc_r+0x284>
    dc06:	ldr	r1, [r4, #8]
    dc08:	str.w	r1, [sl, #16]
    dc0c:	ldr	r1, [r4, #12]
    dc0e:	str.w	r1, [sl, #20]
    dc12:	cmp	r2, #36	; 0x24
    dc14:	beq.n	dc32 <_realloc_r+0x3be>
    dc16:	adds	r4, #16
    dc18:	add.w	r2, sl, #24
    dc1c:	b.n	da4e <_realloc_r+0x1da>
    dc1e:	ldr	r3, [r4, #16]
    dc20:	str.w	r3, [sl, #24]
    dc24:	ldr	r3, [r4, #20]
    dc26:	str.w	r3, [sl, #28]
    dc2a:	adds	r4, #24
    dc2c:	add.w	r3, sl, #32
    dc30:	b.n	db4a <_realloc_r+0x2d6>
    dc32:	ldr	r2, [r4, #16]
    dc34:	str.w	r2, [sl, #24]
    dc38:	ldr	r2, [r4, #20]
    dc3a:	str.w	r2, [sl, #28]
    dc3e:	adds	r4, #24
    dc40:	add.w	r2, sl, #32
    dc44:	b.n	da4e <_realloc_r+0x1da>
    dc46:	nop
    dc48:	.word	0x200015f8

0000dc4c <__cxa_atexit>:
    dc4c:	mov	r3, r2
    dc4e:	mov	r2, r1
    dc50:	mov	r1, r0
    dc52:	movs	r0, #2
    dc54:	b.w	e55c <__register_exitproc>

0000dc58 <stdio_exit_handler>:
    dc58:	ldr	r2, [pc, #8]	; (dc64 <stdio_exit_handler+0xc>)
    dc5a:	ldr	r1, [pc, #12]	; (dc68 <stdio_exit_handler+0x10>)
    dc5c:	ldr	r0, [pc, #12]	; (dc6c <stdio_exit_handler+0x14>)
    dc5e:	b.w	ddd8 <_fwalk_sglue>
    dc62:	nop
    dc64:	.word	0x20001a08
    dc68:	.word	0x00010b95
    dc6c:	.word	0x20001328

0000dc70 <cleanup_stdio>:
    dc70:	ldr	r3, [pc, #48]	; (dca4 <cleanup_stdio+0x34>)
    dc72:	ldr	r1, [r0, #4]
    dc74:	cmp	r1, r3
    dc76:	push	{r4, lr}
    dc78:	mov	r4, r0
    dc7a:	beq.n	dc80 <cleanup_stdio+0x10>
    dc7c:	bl	10b94 <_fclose_r>
    dc80:	ldr	r1, [r4, #8]
    dc82:	ldr	r3, [pc, #36]	; (dca8 <cleanup_stdio+0x38>)
    dc84:	cmp	r1, r3
    dc86:	beq.n	dc8e <cleanup_stdio+0x1e>
    dc88:	mov	r0, r4
    dc8a:	bl	10b94 <_fclose_r>
    dc8e:	ldr	r1, [r4, #12]
    dc90:	ldr	r3, [pc, #24]	; (dcac <cleanup_stdio+0x3c>)
    dc92:	cmp	r1, r3
    dc94:	beq.n	dca0 <cleanup_stdio+0x30>
    dc96:	mov	r0, r4
    dc98:	ldmia.w	sp!, {r4, lr}
    dc9c:	b.w	10b94 <_fclose_r>
    dca0:	pop	{r4, pc}
    dca2:	nop
    dca4:	.word	0x200067d0
    dca8:	.word	0x20006838
    dcac:	.word	0x200068a0

0000dcb0 <global_stdio_init.part.0>:
    dcb0:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    dcb4:	ldr	r4, [pc, #168]	; (dd60 <global_stdio_init.part.0+0xb0>)
    dcb6:	ldr	r3, [pc, #172]	; (dd64 <global_stdio_init.part.0+0xb4>)
    dcb8:	ldr	r0, [pc, #172]	; (dd68 <global_stdio_init.part.0+0xb8>)
    dcba:	ldr.w	r9, [pc, #192]	; dd7c <global_stdio_init.part.0+0xcc>
    dcbe:	ldr.w	r8, [pc, #192]	; dd80 <global_stdio_init.part.0+0xd0>
    dcc2:	ldr	r7, [pc, #168]	; (dd6c <global_stdio_init.part.0+0xbc>)
    dcc4:	str	r0, [r3, #0]
    dcc6:	movs	r5, #0
    dcc8:	movs	r3, #4
    dcca:	movs	r2, #8
    dccc:	mov	r1, r5
    dcce:	add.w	r0, r4, #92	; 0x5c
    dcd2:	ldr	r6, [pc, #156]	; (dd70 <global_stdio_init.part.0+0xc0>)
    dcd4:	str	r5, [r4, #100]	; 0x64
    dcd6:	strd	r5, r3, [r4, #8]
    dcda:	strd	r5, r5, [r4]
    dcde:	strd	r5, r5, [r4, #16]
    dce2:	str	r5, [r4, #24]
    dce4:	bl	e110 <memset>
    dce8:	ldr	r3, [pc, #136]	; (dd74 <global_stdio_init.part.0+0xc4>)
    dcea:	str	r3, [r4, #116]	; 0x74
    dcec:	movs	r2, #8
    dcee:	mov	r1, r5
    dcf0:	add.w	r0, r4, #196	; 0xc4
    dcf4:	strd	r4, r9, [r4, #28]
    dcf8:	strd	r8, r7, [r4, #36]	; 0x24
    dcfc:	strd	r5, r5, [r4, #104]	; 0x68
    dd00:	strd	r5, r5, [r4, #120]	; 0x78
    dd04:	str.w	r5, [r4, #204]	; 0xcc
    dd08:	str	r5, [r4, #112]	; 0x70
    dd0a:	str.w	r5, [r4, #128]	; 0x80
    dd0e:	str	r6, [r4, #44]	; 0x2c
    dd10:	bl	e110 <memset>
    dd14:	ldr	r3, [pc, #96]	; (dd78 <global_stdio_init.part.0+0xc8>)
    dd16:	str.w	r3, [r4, #220]	; 0xdc
    dd1a:	mov	r1, r5
    dd1c:	add.w	r3, r4, #104	; 0x68
    dd20:	movs	r2, #8
    dd22:	add.w	r0, r4, #300	; 0x12c
    dd26:	str.w	r3, [r4, #132]	; 0x84
    dd2a:	strd	r9, r8, [r4, #136]	; 0x88
    dd2e:	strd	r7, r6, [r4, #144]	; 0x90
    dd32:	strd	r5, r5, [r4, #208]	; 0xd0
    dd36:	strd	r5, r5, [r4, #224]	; 0xe0
    dd3a:	str.w	r5, [r4, #308]	; 0x134
    dd3e:	str.w	r5, [r4, #216]	; 0xd8
    dd42:	str.w	r5, [r4, #232]	; 0xe8
    dd46:	bl	e110 <memset>
    dd4a:	add.w	r3, r4, #208	; 0xd0
    dd4e:	strd	r9, r8, [r4, #240]	; 0xf0
    dd52:	strd	r7, r6, [r4, #248]	; 0xf8
    dd56:	str.w	r3, [r4, #236]	; 0xec
    dd5a:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    dd5e:	nop
    dd60:	.word	0x200067d0
    dd64:	.word	0x20006908
    dd68:	.word	0x0000dc59
    dd6c:	.word	0x0000dec5
    dd70:	.word	0x0000dee5
    dd74:	.word	0x00010009
    dd78:	.word	0x00020012
    dd7c:	.word	0x0000de61
    dd80:	.word	0x0000de85

0000dd84 <__sinit>:
    dd84:	push	{r4, lr}
    dd86:	mov	r4, r0
    dd88:	ldr	r0, [pc, #40]	; (ddb4 <__sinit+0x30>)
    dd8a:	bl	e3d8 <__retarget_lock_acquire_recursive>
    dd8e:	ldr	r3, [r4, #52]	; 0x34
    dd90:	cbnz	r3, dd9c <__sinit+0x18>
    dd92:	ldr	r3, [pc, #36]	; (ddb8 <__sinit+0x34>)
    dd94:	ldr	r2, [pc, #36]	; (ddbc <__sinit+0x38>)
    dd96:	ldr	r3, [r3, #0]
    dd98:	str	r2, [r4, #52]	; 0x34
    dd9a:	cbz	r3, dda6 <__sinit+0x22>
    dd9c:	ldmia.w	sp!, {r4, lr}
    dda0:	ldr	r0, [pc, #16]	; (ddb4 <__sinit+0x30>)
    dda2:	b.w	e3dc <__retarget_lock_release_recursive>
    dda6:	bl	dcb0 <global_stdio_init.part.0>
    ddaa:	ldmia.w	sp!, {r4, lr}
    ddae:	ldr	r0, [pc, #4]	; (ddb4 <__sinit+0x30>)
    ddb0:	b.w	e3dc <__retarget_lock_release_recursive>
    ddb4:	.word	0x20006798
    ddb8:	.word	0x20006908
    ddbc:	.word	0x0000dc71

0000ddc0 <__sfp_lock_acquire>:
    ddc0:	ldr	r0, [pc, #4]	; (ddc8 <__sfp_lock_acquire+0x8>)
    ddc2:	b.w	e3d8 <__retarget_lock_acquire_recursive>
    ddc6:	nop
    ddc8:	.word	0x20006798

0000ddcc <__sfp_lock_release>:
    ddcc:	ldr	r0, [pc, #4]	; (ddd4 <__sfp_lock_release+0x8>)
    ddce:	b.w	e3dc <__retarget_lock_release_recursive>
    ddd2:	nop
    ddd4:	.word	0x20006798

0000ddd8 <_fwalk_sglue>:
    ddd8:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    dddc:	mov	r8, r0
    ddde:	mov	r7, r1
    dde0:	mov	r6, r2
    dde2:	mov.w	r9, #0
    dde6:	ldrd	r5, r4, [r6, #4]
    ddea:	subs	r5, #1
    ddec:	bmi.n	de12 <_fwalk_sglue+0x3a>
    ddee:	ldrh	r3, [r4, #12]
    ddf0:	cmp	r3, #1
    ddf2:	add.w	r5, r5, #4294967295
    ddf6:	bls.n	de0a <_fwalk_sglue+0x32>
    ddf8:	ldrsh.w	r3, [r4, #14]
    ddfc:	adds	r3, #1
    ddfe:	mov	r1, r4
    de00:	beq.n	de0a <_fwalk_sglue+0x32>
    de02:	mov	r0, r8
    de04:	blx	r7
    de06:	orr.w	r9, r9, r0
    de0a:	adds	r3, r5, #1
    de0c:	add.w	r4, r4, #104	; 0x68
    de10:	bne.n	ddee <_fwalk_sglue+0x16>
    de12:	ldr	r6, [r6, #0]
    de14:	cmp	r6, #0
    de16:	bne.n	dde6 <_fwalk_sglue+0xe>
    de18:	mov	r0, r9
    de1a:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    de1e:	nop

0000de20 <sprintf>:
    de20:	push	{r1, r2, r3}
    de22:	push	{r4, lr}
    de24:	sub	sp, #116	; 0x74
    de26:	mvn.w	r1, #2147483648	; 0x80000000
    de2a:	add	r3, sp, #124	; 0x7c
    de2c:	strd	r0, r1, [sp, #24]
    de30:	str	r1, [sp, #16]
    de32:	ldr	r1, [pc, #36]	; (de58 <sprintf+0x38>)
    de34:	ldr.w	r2, [r3], #4
    de38:	str	r0, [sp, #8]
    de3a:	ldr	r4, [pc, #32]	; (de5c <sprintf+0x3c>)
    de3c:	ldr	r0, [r1, #0]
    de3e:	str	r3, [sp, #4]
    de40:	add	r1, sp, #8
    de42:	str	r4, [sp, #20]
    de44:	bl	f050 <_svfprintf_r>
    de48:	ldr	r3, [sp, #8]
    de4a:	movs	r2, #0
    de4c:	strb	r2, [r3, #0]
    de4e:	add	sp, #116	; 0x74
    de50:	ldmia.w	sp!, {r4, lr}
    de54:	add	sp, #12
    de56:	bx	lr
    de58:	.word	0x20001a14
    de5c:	.word	0xffff0208

0000de60 <__sread>:
    de60:	push	{r4, lr}
    de62:	mov	r4, r1
    de64:	ldrsh.w	r1, [r1, #14]
    de68:	bl	e300 <_read_r>
    de6c:	cmp	r0, #0
    de6e:	blt.n	de78 <__sread+0x18>
    de70:	ldr	r3, [r4, #80]	; 0x50
    de72:	add	r3, r0
    de74:	str	r3, [r4, #80]	; 0x50
    de76:	pop	{r4, pc}
    de78:	ldrh	r3, [r4, #12]
    de7a:	bic.w	r3, r3, #4096	; 0x1000
    de7e:	strh	r3, [r4, #12]
    de80:	pop	{r4, pc}
    de82:	nop

0000de84 <__swrite>:
    de84:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    de88:	mov	r4, r1
    de8a:	ldrsh.w	r1, [r1, #12]
    de8e:	mov	r7, r3
    de90:	lsls	r3, r1, #23
    de92:	mov	r5, r0
    de94:	mov	r6, r2
    de96:	bmi.n	deb0 <__swrite+0x2c>
    de98:	bic.w	r1, r1, #4096	; 0x1000
    de9c:	strh	r1, [r4, #12]
    de9e:	mov	r3, r7
    dea0:	ldrsh.w	r1, [r4, #14]
    dea4:	mov	r2, r6
    dea6:	mov	r0, r5
    dea8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    deac:	b.w	e350 <_write_r>
    deb0:	ldrsh.w	r1, [r4, #14]
    deb4:	movs	r3, #2
    deb6:	movs	r2, #0
    deb8:	bl	e2d4 <_lseek_r>
    debc:	ldrsh.w	r1, [r4, #12]
    dec0:	b.n	de98 <__swrite+0x14>
    dec2:	nop

0000dec4 <__sseek>:
    dec4:	push	{r4, lr}
    dec6:	mov	r4, r1
    dec8:	ldrsh.w	r1, [r1, #14]
    decc:	bl	e2d4 <_lseek_r>
    ded0:	ldrh	r3, [r4, #12]
    ded2:	adds	r2, r0, #1
    ded4:	itee	eq
    ded6:	biceq.w	r3, r3, #4096	; 0x1000
    deda:	orrne.w	r3, r3, #4096	; 0x1000
    dede:	strne	r0, [r4, #80]	; 0x50
    dee0:	strh	r3, [r4, #12]
    dee2:	pop	{r4, pc}

0000dee4 <__sclose>:
    dee4:	ldrsh.w	r1, [r1, #14]
    dee8:	b.w	e2b0 <_close_r>

0000deec <_vdprintf_r>:
    deec:	push	{r4, r5, r6, r7, lr}
    deee:	sub.w	sp, sp, #532	; 0x214
    def2:	add	r7, sp, #16
    def4:	str	r3, [sp, #0]
    def6:	mov	r3, r2
    def8:	mov.w	r2, #512	; 0x200
    defc:	mov	r6, r1
    defe:	str	r2, [sp, #12]
    df00:	mov	r1, r7
    df02:	add	r2, sp, #12
    df04:	mov	r5, r0
    df06:	bl	df54 <_vasnprintf_r>
    df0a:	cbz	r0, df30 <_vdprintf_r+0x44>
    df0c:	mov	r4, r0
    df0e:	mov	r2, r0
    df10:	ldr	r3, [sp, #12]
    df12:	mov	r1, r6
    df14:	mov	r0, r5
    df16:	bl	e350 <_write_r>
    df1a:	cmp	r4, r7
    df1c:	str	r0, [sp, #12]
    df1e:	beq.n	df2a <_vdprintf_r+0x3e>
    df20:	mov	r0, r5
    df22:	mov	r1, r4
    df24:	bl	e684 <_free_r>
    df28:	ldr	r0, [sp, #12]
    df2a:	add.w	sp, sp, #532	; 0x214
    df2e:	pop	{r4, r5, r6, r7, pc}
    df30:	mov.w	r0, #4294967295
    df34:	b.n	df2a <_vdprintf_r+0x3e>
    df36:	nop

0000df38 <vdprintf>:
    df38:	push	{r4}
    df3a:	ldr	r4, [pc, #20]	; (df50 <vdprintf+0x18>)
    df3c:	mov	ip, r0
    df3e:	mov	r3, r2
    df40:	ldr	r0, [r4, #0]
    df42:	ldr.w	r4, [sp], #4
    df46:	mov	r2, r1
    df48:	mov	r1, ip
    df4a:	b.w	deec <_vdprintf_r>
    df4e:	nop
    df50:	.word	0x20001a14

0000df54 <_vasnprintf_r>:
    df54:	push	{r4, r5, lr}
    df56:	ldr	r4, [r2, #0]
    df58:	mov	r5, r2
    df5a:	sub	sp, #108	; 0x6c
    df5c:	mov	r2, r3
    df5e:	cbz	r1, df64 <_vasnprintf_r+0x10>
    df60:	cmp	r4, #0
    df62:	bne.n	df98 <_vasnprintf_r+0x44>
    df64:	movs	r1, #0
    df66:	mov.w	r3, #648	; 0x288
    df6a:	strh.w	r3, [sp, #12]
    df6e:	str	r1, [sp, #0]
    df70:	str	r1, [sp, #16]
    df72:	movw	r3, #65535	; 0xffff
    df76:	str	r1, [sp, #8]
    df78:	str	r1, [sp, #20]
    df7a:	strh.w	r3, [sp, #14]
    df7e:	mov	r1, sp
    df80:	ldr	r3, [sp, #120]	; 0x78
    df82:	bl	f050 <_svfprintf_r>
    df86:	cmp	r0, #0
    df88:	blt.n	dfb2 <_vasnprintf_r+0x5e>
    df8a:	ldr	r3, [sp, #0]
    df8c:	str	r0, [r5, #0]
    df8e:	movs	r2, #0
    df90:	strb	r2, [r3, #0]
    df92:	ldr	r0, [sp, #16]
    df94:	add	sp, #108	; 0x6c
    df96:	pop	{r4, r5, pc}
    df98:	mov.w	r3, #1544	; 0x608
    df9c:	str	r1, [sp, #0]
    df9e:	str	r1, [sp, #16]
    dfa0:	strh.w	r3, [sp, #12]
    dfa4:	mov	r1, r4
    dfa6:	bge.n	df72 <_vasnprintf_r+0x1e>
    dfa8:	movs	r3, #139	; 0x8b
    dfaa:	str	r3, [r0, #0]
    dfac:	movs	r0, #0
    dfae:	add	sp, #108	; 0x6c
    dfb0:	pop	{r4, r5, pc}
    dfb2:	movs	r0, #0
    dfb4:	b.n	df94 <_vasnprintf_r+0x40>
    dfb6:	nop

0000dfb8 <memcmp>:
    dfb8:	cmp	r2, #3
    dfba:	push	{r4, r5, r6, lr}
    dfbc:	bls.n	dfe8 <memcmp+0x30>
    dfbe:	orr.w	r3, r0, r1
    dfc2:	lsls	r3, r3, #30
    dfc4:	bne.n	e00c <memcmp+0x54>
    dfc6:	mov	r4, r0
    dfc8:	mov	r3, r1
    dfca:	mov	r1, r3
    dfcc:	mov	r0, r4
    dfce:	ldr	r6, [r1, #0]
    dfd0:	ldr	r5, [r0, #0]
    dfd2:	cmp	r5, r6
    dfd4:	add.w	r4, r4, #4
    dfd8:	add.w	r3, r3, #4
    dfdc:	bne.n	e00c <memcmp+0x54>
    dfde:	subs	r2, #4
    dfe0:	cmp	r2, #3
    dfe2:	mov	r0, r4
    dfe4:	mov	r1, r3
    dfe6:	bhi.n	dfca <memcmp+0x12>
    dfe8:	subs	r4, r2, #1
    dfea:	cbz	r2, e014 <memcmp+0x5c>
    dfec:	subs	r2, r0, #1
    dfee:	subs	r1, #1
    dff0:	b.n	dff6 <memcmp+0x3e>
    dff2:	adds	r3, r0, r3
    dff4:	beq.n	e010 <memcmp+0x58>
    dff6:	ldrb.w	lr, [r2, #1]!
    dffa:	ldrb.w	ip, [r1, #1]!
    dffe:	cmp	lr, ip
    e000:	sub.w	r3, r4, r2
    e004:	beq.n	dff2 <memcmp+0x3a>
    e006:	sub.w	r0, lr, ip
    e00a:	pop	{r4, r5, r6, pc}
    e00c:	subs	r4, r2, #1
    e00e:	b.n	dfec <memcmp+0x34>
    e010:	mov	r0, r3
    e012:	pop	{r4, r5, r6, pc}
    e014:	mov	r0, r2
    e016:	pop	{r4, r5, r6, pc}

0000e018 <memmove>:
    e018:	cmp	r0, r1
    e01a:	bls.n	e038 <memmove+0x20>
    e01c:	adds	r3, r1, r2
    e01e:	cmp	r3, r0
    e020:	bls.n	e038 <memmove+0x20>
    e022:	add.w	ip, r0, r2
    e026:	cbz	r2, e058 <memmove+0x40>
    e028:	mov	r2, ip
    e02a:	ldrb.w	ip, [r3, #-1]!
    e02e:	strb.w	ip, [r2, #-1]!
    e032:	cmp	r1, r3
    e034:	bne.n	e02a <memmove+0x12>
    e036:	bx	lr
    e038:	cmp	r2, #15
    e03a:	bhi.n	e05a <memmove+0x42>
    e03c:	mov	r3, r0
    e03e:	add.w	ip, r2, #4294967295
    e042:	cbz	r2, e058 <memmove+0x40>
    e044:	add.w	ip, ip, #1
    e048:	subs	r3, #1
    e04a:	add	ip, r1
    e04c:	ldrb.w	r2, [r1], #1
    e050:	strb.w	r2, [r3, #1]!
    e054:	cmp	r1, ip
    e056:	bne.n	e04c <memmove+0x34>
    e058:	bx	lr
    e05a:	orr.w	r3, r0, r1
    e05e:	lsls	r3, r3, #30
    e060:	bne.n	e104 <memmove+0xec>
    e062:	sub.w	r3, r2, #16
    e066:	push	{r4, r5, r6, lr}
    e068:	add.w	ip, r1, #32
    e06c:	bic.w	r5, r3, #15
    e070:	add.w	lr, r1, #16
    e074:	add.w	r4, r0, #16
    e078:	add	ip, r5
    e07a:	lsrs	r3, r3, #4
    e07c:	ldr.w	r5, [lr, #-16]
    e080:	str.w	r5, [r4, #-16]
    e084:	ldr.w	r5, [lr, #-12]
    e088:	str.w	r5, [r4, #-12]
    e08c:	ldr.w	r5, [lr, #-8]
    e090:	str.w	r5, [r4, #-8]
    e094:	ldr.w	r5, [lr, #-4]
    e098:	str.w	r5, [r4, #-4]
    e09c:	add.w	lr, lr, #16
    e0a0:	cmp	lr, ip
    e0a2:	add.w	r4, r4, #16
    e0a6:	bne.n	e07c <memmove+0x64>
    e0a8:	adds	r3, #1
    e0aa:	tst.w	r2, #12
    e0ae:	add.w	r1, r1, r3, lsl #4
    e0b2:	and.w	r4, r2, #15
    e0b6:	add.w	r3, r0, r3, lsl #4
    e0ba:	beq.n	e10c <memmove+0xf4>
    e0bc:	subs	r4, #4
    e0be:	bic.w	r6, r4, #3
    e0c2:	mov.w	ip, r4, lsr #2
    e0c6:	add	r6, r3
    e0c8:	subs	r4, r3, #4
    e0ca:	mov	lr, r1
    e0cc:	ldr.w	r5, [lr], #4
    e0d0:	str.w	r5, [r4, #4]!
    e0d4:	cmp	r4, r6
    e0d6:	bne.n	e0cc <memmove+0xb4>
    e0d8:	add.w	r4, ip, #1
    e0dc:	and.w	r2, r2, #3
    e0e0:	add.w	r3, r3, r4, lsl #2
    e0e4:	add.w	r1, r1, r4, lsl #2
    e0e8:	add.w	ip, r2, #4294967295
    e0ec:	cbz	r2, e102 <memmove+0xea>
    e0ee:	add.w	ip, ip, #1
    e0f2:	subs	r3, #1
    e0f4:	add	ip, r1
    e0f6:	ldrb.w	r2, [r1], #1
    e0fa:	strb.w	r2, [r3, #1]!
    e0fe:	cmp	r1, ip
    e100:	bne.n	e0f6 <memmove+0xde>
    e102:	pop	{r4, r5, r6, pc}
    e104:	add.w	ip, r2, #4294967295
    e108:	mov	r3, r0
    e10a:	b.n	e044 <memmove+0x2c>
    e10c:	mov	r2, r4
    e10e:	b.n	e0e8 <memmove+0xd0>

0000e110 <memset>:
    e110:	lsls	r3, r0, #30
    e112:	push	{r4, r5, lr}
    e114:	beq.n	e1a8 <memset+0x98>
    e116:	subs	r4, r2, #1
    e118:	cmp	r2, #0
    e11a:	beq.n	e19c <memset+0x8c>
    e11c:	uxtb	r2, r1
    e11e:	mov	r3, r0
    e120:	b.n	e126 <memset+0x16>
    e122:	subs	r4, #1
    e124:	bcc.n	e19c <memset+0x8c>
    e126:	strb.w	r2, [r3], #1
    e12a:	lsls	r5, r3, #30
    e12c:	bne.n	e122 <memset+0x12>
    e12e:	cmp	r4, #3
    e130:	bls.n	e18e <memset+0x7e>
    e132:	uxtb	r5, r1
    e134:	orr.w	r5, r5, r5, lsl #8
    e138:	cmp	r4, #15
    e13a:	orr.w	r5, r5, r5, lsl #16
    e13e:	bls.n	e1ae <memset+0x9e>
    e140:	sub.w	r2, r4, #16
    e144:	bic.w	ip, r2, #15
    e148:	add.w	lr, r3, #32
    e14c:	add	lr, ip
    e14e:	mov.w	ip, r2, lsr #4
    e152:	add.w	r2, r3, #16
    e156:	strd	r5, r5, [r2, #-16]
    e15a:	strd	r5, r5, [r2, #-8]
    e15e:	adds	r2, #16
    e160:	cmp	r2, lr
    e162:	bne.n	e156 <memset+0x46>
    e164:	add.w	r2, ip, #1
    e168:	tst.w	r4, #12
    e16c:	add.w	r2, r3, r2, lsl #4
    e170:	and.w	ip, r4, #15
    e174:	beq.n	e19e <memset+0x8e>
    e176:	sub.w	r3, ip, #4
    e17a:	bic.w	r3, r3, #3
    e17e:	adds	r3, #4
    e180:	add	r3, r2
    e182:	str.w	r5, [r2], #4
    e186:	cmp	r3, r2
    e188:	bne.n	e182 <memset+0x72>
    e18a:	and.w	r4, ip, #3
    e18e:	cbz	r4, e19c <memset+0x8c>
    e190:	uxtb	r1, r1
    e192:	add	r4, r3
    e194:	strb.w	r1, [r3], #1
    e198:	cmp	r4, r3
    e19a:	bne.n	e194 <memset+0x84>
    e19c:	pop	{r4, r5, pc}
    e19e:	mov	r4, ip
    e1a0:	mov	r3, r2
    e1a2:	cmp	r4, #0
    e1a4:	bne.n	e190 <memset+0x80>
    e1a6:	b.n	e19c <memset+0x8c>
    e1a8:	mov	r3, r0
    e1aa:	mov	r4, r2
    e1ac:	b.n	e12e <memset+0x1e>
    e1ae:	mov	r2, r3
    e1b0:	mov	ip, r4
    e1b2:	b.n	e176 <memset+0x66>

0000e1b4 <strncmp>:
    e1b4:	cmp	r2, #0
    e1b6:	beq.n	e236 <strncmp+0x82>
    e1b8:	orr.w	r3, r0, r1
    e1bc:	lsls	r3, r3, #30
    e1be:	push	{r4, r5, lr}
    e1c0:	mov	ip, r0
    e1c2:	bne.n	e224 <strncmp+0x70>
    e1c4:	cmp	r2, #3
    e1c6:	bls.n	e224 <strncmp+0x70>
    e1c8:	mov	r3, r1
    e1ca:	b.n	e1de <strncmp+0x2a>
    e1cc:	subs	r2, #4
    e1ce:	mov	ip, r0
    e1d0:	mov	r1, r3
    e1d2:	beq.n	e220 <strncmp+0x6c>
    e1d4:	tst.w	lr, #2155905152	; 0x80808080
    e1d8:	bne.n	e220 <strncmp+0x6c>
    e1da:	cmp	r2, #3
    e1dc:	bls.n	e224 <strncmp+0x70>
    e1de:	ldr	r4, [r0, #0]
    e1e0:	mov	r1, r3
    e1e2:	ldr.w	r5, [r3], #4
    e1e6:	sub.w	lr, r4, #16843009	; 0x1010101
    e1ea:	cmp	r4, r5
    e1ec:	mov	ip, r0
    e1ee:	bic.w	lr, lr, r4
    e1f2:	add.w	r0, r0, #4
    e1f6:	beq.n	e1cc <strncmp+0x18>
    e1f8:	ldrb.w	r0, [ip]
    e1fc:	ldrb	r4, [r1, #0]
    e1fe:	cmp	r0, r4
    e200:	bne.n	e23a <strncmp+0x86>
    e202:	mov	lr, ip
    e204:	cbz	r0, e222 <strncmp+0x6e>
    e206:	ldrb.w	r0, [lr, #1]!
    e20a:	ldrb.w	r4, [r1, #1]!
    e20e:	sub.w	r3, r2, lr
    e212:	cmp	r0, r4
    e214:	add.w	r3, r3, #4294967295
    e218:	bne.n	e23a <strncmp+0x86>
    e21a:	adds.w	r3, ip, r3
    e21e:	bne.n	e204 <strncmp+0x50>
    e220:	movs	r0, #0
    e222:	pop	{r4, r5, pc}
    e224:	ldrb.w	r0, [ip]
    e228:	ldrb	r4, [r1, #0]
    e22a:	cmp	r4, r0
    e22c:	bne.n	e23a <strncmp+0x86>
    e22e:	cmp	r2, #1
    e230:	beq.n	e220 <strncmp+0x6c>
    e232:	mov	lr, ip
    e234:	b.n	e204 <strncmp+0x50>
    e236:	mov	r0, r2
    e238:	bx	lr
    e23a:	subs	r0, r0, r4
    e23c:	pop	{r4, r5, pc}
    e23e:	nop

0000e240 <strncpy>:
    e240:	orr.w	r3, r0, r1
    e244:	lsls	r3, r3, #30
    e246:	push	{r4, r5, lr}
    e248:	bne.n	e24e <strncpy+0xe>
    e24a:	cmp	r2, #3
    e24c:	bhi.n	e26e <strncpy+0x2e>
    e24e:	mov	ip, r0
    e250:	add.w	lr, r1, #4294967295
    e254:	b.n	e266 <strncpy+0x26>
    e256:	ldrb.w	r1, [lr, #1]!
    e25a:	strb.w	r1, [r3], #1
    e25e:	subs	r4, r2, #1
    e260:	cbz	r1, e294 <strncpy+0x54>
    e262:	mov	ip, r3
    e264:	mov	r2, r4
    e266:	mov	r3, ip
    e268:	cmp	r2, #0
    e26a:	bne.n	e256 <strncpy+0x16>
    e26c:	pop	{r4, r5, pc}
    e26e:	mov	r3, r1
    e270:	mov	ip, r0
    e272:	mov	r1, r3
    e274:	ldr.w	r5, [r3], #4
    e278:	sub.w	r4, r5, #16843009	; 0x1010101
    e27c:	bic.w	r4, r4, r5
    e280:	tst.w	r4, #2155905152	; 0x80808080
    e284:	bne.n	e250 <strncpy+0x10>
    e286:	subs	r2, #4
    e288:	cmp	r2, #3
    e28a:	str.w	r5, [ip], #4
    e28e:	mov	r1, r3
    e290:	bhi.n	e272 <strncpy+0x32>
    e292:	b.n	e250 <strncpy+0x10>
    e294:	add	ip, r2
    e296:	cmp	r4, #0
    e298:	beq.n	e26c <strncpy+0x2c>
    e29a:	strb.w	r1, [r3], #1
    e29e:	cmp	r3, ip
    e2a0:	bne.n	e29a <strncpy+0x5a>
    e2a2:	pop	{r4, r5, pc}

0000e2a4 <__locale_mb_cur_max>:
    e2a4:	ldr	r3, [pc, #4]	; (e2ac <__locale_mb_cur_max+0x8>)
    e2a6:	ldrb.w	r0, [r3, #296]	; 0x128
    e2aa:	bx	lr
    e2ac:	.word	0x2000148c

0000e2b0 <_close_r>:
    e2b0:	push	{r3, r4, r5, lr}
    e2b2:	ldr	r5, [pc, #28]	; (e2d0 <_close_r+0x20>)
    e2b4:	movs	r2, #0
    e2b6:	mov	r4, r0
    e2b8:	mov	r0, r1
    e2ba:	str	r2, [r5, #0]
    e2bc:	bl	bb24 <_close>
    e2c0:	adds	r3, r0, #1
    e2c2:	beq.n	e2c6 <_close_r+0x16>
    e2c4:	pop	{r3, r4, r5, pc}
    e2c6:	ldr	r3, [r5, #0]
    e2c8:	cmp	r3, #0
    e2ca:	beq.n	e2c4 <_close_r+0x14>
    e2cc:	str	r3, [r4, #0]
    e2ce:	pop	{r3, r4, r5, pc}
    e2d0:	.word	0x200073b4

0000e2d4 <_lseek_r>:
    e2d4:	push	{r3, r4, r5, lr}
    e2d6:	mov	r4, r1
    e2d8:	ldr	r5, [pc, #32]	; (e2fc <_lseek_r+0x28>)
    e2da:	mov	ip, r0
    e2dc:	mov	r1, r2
    e2de:	mov	r0, r4
    e2e0:	mov	r2, r3
    e2e2:	movs	r3, #0
    e2e4:	str	r3, [r5, #0]
    e2e6:	mov	r4, ip
    e2e8:	bl	bb3c <_lseek>
    e2ec:	adds	r3, r0, #1
    e2ee:	beq.n	e2f2 <_lseek_r+0x1e>
    e2f0:	pop	{r3, r4, r5, pc}
    e2f2:	ldr	r3, [r5, #0]
    e2f4:	cmp	r3, #0
    e2f6:	beq.n	e2f0 <_lseek_r+0x1c>
    e2f8:	str	r3, [r4, #0]
    e2fa:	pop	{r3, r4, r5, pc}
    e2fc:	.word	0x200073b4

0000e300 <_read_r>:
    e300:	push	{r3, r4, r5, lr}
    e302:	mov	r4, r1
    e304:	ldr	r5, [pc, #32]	; (e328 <_read_r+0x28>)
    e306:	mov	ip, r0
    e308:	mov	r1, r2
    e30a:	mov	r0, r4
    e30c:	mov	r2, r3
    e30e:	movs	r3, #0
    e310:	str	r3, [r5, #0]
    e312:	mov	r4, ip
    e314:	bl	bb20 <_read>
    e318:	adds	r3, r0, #1
    e31a:	beq.n	e31e <_read_r+0x1e>
    e31c:	pop	{r3, r4, r5, pc}
    e31e:	ldr	r3, [r5, #0]
    e320:	cmp	r3, #0
    e322:	beq.n	e31c <_read_r+0x1c>
    e324:	str	r3, [r4, #0]
    e326:	pop	{r3, r4, r5, pc}
    e328:	.word	0x200073b4

0000e32c <_sbrk_r>:
    e32c:	push	{r3, r4, r5, lr}
    e32e:	ldr	r5, [pc, #28]	; (e34c <_sbrk_r+0x20>)
    e330:	movs	r2, #0
    e332:	mov	r4, r0
    e334:	mov	r0, r1
    e336:	str	r2, [r5, #0]
    e338:	bl	baec <_sbrk>
    e33c:	adds	r3, r0, #1
    e33e:	beq.n	e342 <_sbrk_r+0x16>
    e340:	pop	{r3, r4, r5, pc}
    e342:	ldr	r3, [r5, #0]
    e344:	cmp	r3, #0
    e346:	beq.n	e340 <_sbrk_r+0x14>
    e348:	str	r3, [r4, #0]
    e34a:	pop	{r3, r4, r5, pc}
    e34c:	.word	0x200073b4

0000e350 <_write_r>:
    e350:	push	{r3, r4, r5, lr}
    e352:	mov	r4, r1
    e354:	ldr	r5, [pc, #32]	; (e378 <_write_r+0x28>)
    e356:	mov	ip, r0
    e358:	mov	r1, r2
    e35a:	mov	r0, r4
    e35c:	mov	r2, r3
    e35e:	movs	r3, #0
    e360:	str	r3, [r5, #0]
    e362:	mov	r4, ip
    e364:	bl	d114 <_write>
    e368:	adds	r3, r0, #1
    e36a:	beq.n	e36e <_write_r+0x1e>
    e36c:	pop	{r3, r4, r5, pc}
    e36e:	ldr	r3, [r5, #0]
    e370:	cmp	r3, #0
    e372:	beq.n	e36c <_write_r+0x1c>
    e374:	str	r3, [r4, #0]
    e376:	pop	{r3, r4, r5, pc}
    e378:	.word	0x200073b4

0000e37c <__errno>:
    e37c:	ldr	r3, [pc, #4]	; (e384 <__errno+0x8>)
    e37e:	ldr	r0, [r3, #0]
    e380:	bx	lr
    e382:	nop
    e384:	.word	0x20001a14

0000e388 <__libc_init_array>:
    e388:	push	{r4, r5, r6, lr}
    e38a:	ldr	r6, [pc, #52]	; (e3c0 <__libc_init_array+0x38>)
    e38c:	ldr	r5, [pc, #52]	; (e3c4 <__libc_init_array+0x3c>)
    e38e:	subs	r6, r6, r5
    e390:	asrs	r6, r6, #2
    e392:	beq.n	e3a2 <__libc_init_array+0x1a>
    e394:	movs	r4, #0
    e396:	ldr.w	r3, [r5], #4
    e39a:	adds	r4, #1
    e39c:	blx	r3
    e39e:	cmp	r6, r4
    e3a0:	bne.n	e396 <__libc_init_array+0xe>
    e3a2:	ldr	r6, [pc, #36]	; (e3c8 <__libc_init_array+0x40>)
    e3a4:	ldr	r5, [pc, #36]	; (e3cc <__libc_init_array+0x44>)
    e3a6:	subs	r6, r6, r5
    e3a8:	bl	13718 <___init_veneer>
    e3ac:	asrs	r6, r6, #2
    e3ae:	beq.n	e3be <__libc_init_array+0x36>
    e3b0:	movs	r4, #0
    e3b2:	ldr.w	r3, [r5], #4
    e3b6:	adds	r4, #1
    e3b8:	blx	r3
    e3ba:	cmp	r6, r4
    e3bc:	bne.n	e3b2 <__libc_init_array+0x2a>
    e3be:	pop	{r4, r5, r6, pc}
    e3c0:	.word	0x60001f10
    e3c4:	.word	0x60001f10
    e3c8:	.word	0x60001f8c
    e3cc:	.word	0x60001f10

0000e3d0 <__retarget_lock_init_recursive>:
    e3d0:	bx	lr
    e3d2:	nop

0000e3d4 <__retarget_lock_close_recursive>:
    e3d4:	bx	lr
    e3d6:	nop

0000e3d8 <__retarget_lock_acquire_recursive>:
    e3d8:	bx	lr
    e3da:	nop

0000e3dc <__retarget_lock_release_recursive>:
    e3dc:	bx	lr
    e3de:	nop

0000e3e0 <memchr>:
    e3e0:	and.w	r1, r1, #255	; 0xff
    e3e4:	cmp	r2, #16
    e3e6:	blt.n	e440 <memchr+0x60>
    e3e8:	tst.w	r0, #7
    e3ec:	beq.n	e400 <memchr+0x20>
    e3ee:	ldrb.w	r3, [r0], #1
    e3f2:	subs	r2, #1
    e3f4:	cmp	r3, r1
    e3f6:	beq.n	e454 <memchr+0x74>
    e3f8:	tst.w	r0, #7
    e3fc:	cbz	r2, e450 <memchr+0x70>
    e3fe:	bne.n	e3ee <memchr+0xe>
    e400:	push	{r4, r5, r6, r7}
    e402:	orr.w	r1, r1, r1, lsl #8
    e406:	orr.w	r1, r1, r1, lsl #16
    e40a:	bic.w	r4, r2, #7
    e40e:	mvns.w	r7, #0
    e412:	movs	r3, #0
    e414:	ldrd	r5, r6, [r0], #8
    e418:	subs	r4, #8
    e41a:	eor.w	r5, r5, r1
    e41e:	eor.w	r6, r6, r1
    e422:	uadd8	r5, r5, r7
    e426:	sel	r5, r3, r7
    e42a:	uadd8	r6, r6, r7
    e42e:	sel	r6, r5, r7
    e432:	cbnz	r6, e458 <memchr+0x78>
    e434:	bne.n	e414 <memchr+0x34>
    e436:	pop	{r4, r5, r6, r7}
    e438:	and.w	r1, r1, #255	; 0xff
    e43c:	and.w	r2, r2, #7
    e440:	cbz	r2, e450 <memchr+0x70>
    e442:	ldrb.w	r3, [r0], #1
    e446:	subs	r2, #1
    e448:	eor.w	r3, r3, r1
    e44c:	cbz	r3, e454 <memchr+0x74>
    e44e:	bne.n	e442 <memchr+0x62>
    e450:	movs	r0, #0
    e452:	bx	lr
    e454:	subs	r0, #1
    e456:	bx	lr
    e458:	cmp	r5, #0
    e45a:	itte	eq
    e45c:	moveq	r5, r6
    e45e:	subeq	r0, #3
    e460:	subne	r0, #7
    e462:	tst.w	r5, #1
    e466:	bne.n	e478 <memchr+0x98>
    e468:	adds	r0, #1
    e46a:	tst.w	r5, #256	; 0x100
    e46e:	ittt	eq
    e470:	addeq	r0, #1
    e472:	tsteq.w	r5, #98304	; 0x18000
    e476:	addeq	r0, #1
    e478:	pop	{r4, r5, r6, r7}
    e47a:	subs	r0, #1
    e47c:	bx	lr
    e47e:	nop

0000e480 <strlen>:
    e480:	pld	[r0]
    e484:	strd	r4, r5, [sp, #-8]!
    e488:	bic.w	r1, r0, #7
    e48c:	mvn.w	ip, #0
    e490:	ands.w	r4, r0, #7
    e494:	pld	[r1, #32]
    e498:	bne.w	e52e <strlen+0xae>
    e49c:	mov.w	r4, #0
    e4a0:	mvn.w	r0, #7
    e4a4:	ldrd	r2, r3, [r1]
    e4a8:	pld	[r1, #64]	; 0x40
    e4ac:	add.w	r0, r0, #8
    e4b0:	uadd8	r2, r2, ip
    e4b4:	sel	r2, r4, ip
    e4b8:	uadd8	r3, r3, ip
    e4bc:	sel	r3, r2, ip
    e4c0:	cbnz	r3, e516 <strlen+0x96>
    e4c2:	ldrd	r2, r3, [r1, #8]
    e4c6:	uadd8	r2, r2, ip
    e4ca:	add.w	r0, r0, #8
    e4ce:	sel	r2, r4, ip
    e4d2:	uadd8	r3, r3, ip
    e4d6:	sel	r3, r2, ip
    e4da:	cbnz	r3, e516 <strlen+0x96>
    e4dc:	ldrd	r2, r3, [r1, #16]
    e4e0:	uadd8	r2, r2, ip
    e4e4:	add.w	r0, r0, #8
    e4e8:	sel	r2, r4, ip
    e4ec:	uadd8	r3, r3, ip
    e4f0:	sel	r3, r2, ip
    e4f4:	cbnz	r3, e516 <strlen+0x96>
    e4f6:	ldrd	r2, r3, [r1, #24]
    e4fa:	add.w	r1, r1, #32
    e4fe:	uadd8	r2, r2, ip
    e502:	add.w	r0, r0, #8
    e506:	sel	r2, r4, ip
    e50a:	uadd8	r3, r3, ip
    e50e:	sel	r3, r2, ip
    e512:	cmp	r3, #0
    e514:	beq.n	e4a4 <strlen+0x24>
    e516:	cmp	r2, #0
    e518:	itt	eq
    e51a:	addeq	r0, #4
    e51c:	moveq	r2, r3
    e51e:	rev	r2, r2
    e520:	clz	r2, r2
    e524:	ldrd	r4, r5, [sp], #8
    e528:	add.w	r0, r0, r2, lsr #3
    e52c:	bx	lr
    e52e:	ldrd	r2, r3, [r1]
    e532:	and.w	r5, r4, #3
    e536:	rsb	r0, r4, #0
    e53a:	mov.w	r5, r5, lsl #3
    e53e:	tst.w	r4, #4
    e542:	pld	[r1, #64]	; 0x40
    e546:	lsl.w	r5, ip, r5
    e54a:	orn	r2, r2, r5
    e54e:	itt	ne
    e550:	ornne	r3, r3, r5
    e554:	movne	r2, ip
    e556:	mov.w	r4, #0
    e55a:	b.n	e4b0 <strlen+0x30>

0000e55c <__register_exitproc>:
    e55c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e560:	ldr.w	sl, [pc, #124]	; e5e0 <__register_exitproc+0x84>
    e564:	mov	r6, r0
    e566:	ldr.w	r0, [sl]
    e56a:	mov	r8, r3
    e56c:	mov	r7, r1
    e56e:	mov	r9, r2
    e570:	bl	e3d8 <__retarget_lock_acquire_recursive>
    e574:	ldr	r3, [pc, #96]	; (e5d8 <__register_exitproc+0x7c>)
    e576:	ldr	r4, [r3, #0]
    e578:	cbz	r4, e5c4 <__register_exitproc+0x68>
    e57a:	ldr	r5, [r4, #4]
    e57c:	cmp	r5, #31
    e57e:	bgt.n	e5ca <__register_exitproc+0x6e>
    e580:	cbnz	r6, e59a <__register_exitproc+0x3e>
    e582:	adds	r3, r5, #1
    e584:	adds	r5, #2
    e586:	ldr.w	r0, [sl]
    e58a:	str	r3, [r4, #4]
    e58c:	str.w	r7, [r4, r5, lsl #2]
    e590:	bl	e3dc <__retarget_lock_release_recursive>
    e594:	movs	r0, #0
    e596:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e59a:	add.w	r1, r4, r5, lsl #2
    e59e:	movs	r3, #1
    e5a0:	str.w	r9, [r1, #136]	; 0x88
    e5a4:	ldr.w	r2, [r4, #392]	; 0x188
    e5a8:	lsls	r3, r5
    e5aa:	orrs	r2, r3
    e5ac:	cmp	r6, #2
    e5ae:	str.w	r2, [r4, #392]	; 0x188
    e5b2:	str.w	r8, [r1, #264]	; 0x108
    e5b6:	bne.n	e582 <__register_exitproc+0x26>
    e5b8:	ldr.w	r2, [r4, #396]	; 0x18c
    e5bc:	orrs	r2, r3
    e5be:	str.w	r2, [r4, #396]	; 0x18c
    e5c2:	b.n	e582 <__register_exitproc+0x26>
    e5c4:	ldr	r4, [pc, #20]	; (e5dc <__register_exitproc+0x80>)
    e5c6:	str	r4, [r3, #0]
    e5c8:	b.n	e57a <__register_exitproc+0x1e>
    e5ca:	ldr.w	r0, [sl]
    e5ce:	bl	e3dc <__retarget_lock_release_recursive>
    e5d2:	mov.w	r0, #4294967295
    e5d6:	b.n	e596 <__register_exitproc+0x3a>
    e5d8:	.word	0x200065fc
    e5dc:	.word	0x20006600
    e5e0:	.word	0x20001480

0000e5e4 <_malloc_trim_r>:
    e5e4:	push	{r3, r4, r5, r6, r7, lr}
    e5e6:	ldr	r7, [pc, #144]	; (e678 <_malloc_trim_r+0x94>)
    e5e8:	mov	r4, r1
    e5ea:	mov	r6, r0
    e5ec:	bl	d85c <__malloc_lock>
    e5f0:	ldr	r3, [r7, #8]
    e5f2:	ldr	r5, [r3, #4]
    e5f4:	rsb	r1, r4, #4064	; 0xfe0
    e5f8:	adds	r1, #15
    e5fa:	bic.w	r5, r5, #3
    e5fe:	adds	r3, r1, r5
    e600:	bic.w	r3, r3, #4080	; 0xff0
    e604:	bic.w	r3, r3, #15
    e608:	sub.w	r4, r3, #4096	; 0x1000
    e60c:	cmp.w	r4, #4096	; 0x1000
    e610:	blt.n	e622 <_malloc_trim_r+0x3e>
    e612:	movs	r1, #0
    e614:	mov	r0, r6
    e616:	bl	e32c <_sbrk_r>
    e61a:	ldr	r3, [r7, #8]
    e61c:	add	r3, r5
    e61e:	cmp	r0, r3
    e620:	beq.n	e62c <_malloc_trim_r+0x48>
    e622:	mov	r0, r6
    e624:	bl	d868 <__malloc_unlock>
    e628:	movs	r0, #0
    e62a:	pop	{r3, r4, r5, r6, r7, pc}
    e62c:	negs	r1, r4
    e62e:	mov	r0, r6
    e630:	bl	e32c <_sbrk_r>
    e634:	adds	r0, #1
    e636:	beq.n	e654 <_malloc_trim_r+0x70>
    e638:	ldr	r2, [pc, #64]	; (e67c <_malloc_trim_r+0x98>)
    e63a:	ldr	r3, [r7, #8]
    e63c:	subs	r5, r5, r4
    e63e:	orr.w	r5, r5, #1
    e642:	str	r5, [r3, #4]
    e644:	ldr	r3, [r2, #0]
    e646:	mov	r0, r6
    e648:	subs	r3, r3, r4
    e64a:	str	r3, [r2, #0]
    e64c:	bl	d868 <__malloc_unlock>
    e650:	movs	r0, #1
    e652:	pop	{r3, r4, r5, r6, r7, pc}
    e654:	movs	r1, #0
    e656:	mov	r0, r6
    e658:	bl	e32c <_sbrk_r>
    e65c:	ldr	r2, [r7, #8]
    e65e:	subs	r3, r0, r2
    e660:	cmp	r3, #15
    e662:	ble.n	e622 <_malloc_trim_r+0x3e>
    e664:	orr.w	r3, r3, #1
    e668:	str	r3, [r2, #4]
    e66a:	ldr	r3, [pc, #20]	; (e680 <_malloc_trim_r+0x9c>)
    e66c:	ldr	r1, [pc, #12]	; (e67c <_malloc_trim_r+0x98>)
    e66e:	ldr	r3, [r3, #0]
    e670:	subs	r0, r0, r3
    e672:	str	r0, [r1, #0]
    e674:	b.n	e622 <_malloc_trim_r+0x3e>
    e676:	nop
    e678:	.word	0x200015f8
    e67c:	.word	0x2000679c
    e680:	.word	0x20001a00

0000e684 <_free_r>:
    e684:	cmp	r1, #0
    e686:	beq.n	e74c <_free_r+0xc8>
    e688:	push	{r3, r4, r5, r6, r7, lr}
    e68a:	mov	r4, r1
    e68c:	mov	r6, r0
    e68e:	bl	d85c <__malloc_lock>
    e692:	ldr.w	r2, [r4, #-4]
    e696:	ldr	r7, [pc, #492]	; (e884 <_free_r+0x200>)
    e698:	sub.w	r5, r4, #8
    e69c:	bic.w	r1, r2, #1
    e6a0:	add.w	ip, r5, r1
    e6a4:	ldr	r0, [r7, #8]
    e6a6:	ldr.w	r3, [ip, #4]
    e6aa:	cmp	r0, ip
    e6ac:	bic.w	r3, r3, #3
    e6b0:	beq.w	e7ca <_free_r+0x146>
    e6b4:	lsls	r2, r2, #31
    e6b6:	str.w	r3, [ip, #4]
    e6ba:	bmi.n	e722 <_free_r+0x9e>
    e6bc:	ldr.w	r2, [r4, #-8]
    e6c0:	subs	r5, r5, r2
    e6c2:	add	r1, r2
    e6c4:	ldr	r2, [r5, #8]
    e6c6:	add.w	r0, r7, #8
    e6ca:	cmp	r2, r0
    e6cc:	beq.n	e7a4 <_free_r+0x120>
    e6ce:	add.w	r4, ip, r3
    e6d2:	ldr.w	lr, [r4, #4]
    e6d6:	ldr	r4, [r5, #12]
    e6d8:	str	r4, [r2, #12]
    e6da:	tst.w	lr, #1
    e6de:	str	r2, [r4, #8]
    e6e0:	beq.w	e812 <_free_r+0x18e>
    e6e4:	orr.w	r3, r1, #1
    e6e8:	str	r3, [r5, #4]
    e6ea:	str.w	r1, [ip]
    e6ee:	cmp.w	r1, #512	; 0x200
    e6f2:	bcs.n	e760 <_free_r+0xdc>
    e6f4:	ldr	r0, [r7, #4]
    e6f6:	lsrs	r3, r1, #3
    e6f8:	movs	r2, #1
    e6fa:	lsrs	r1, r1, #5
    e6fc:	adds	r3, #1
    e6fe:	lsls	r2, r1
    e700:	orrs	r2, r0
    e702:	ldr.w	r1, [r7, r3, lsl #3]
    e706:	str	r2, [r7, #4]
    e708:	add.w	r2, r7, r3, lsl #3
    e70c:	subs	r2, #8
    e70e:	strd	r1, r2, [r5, #8]
    e712:	str.w	r5, [r7, r3, lsl #3]
    e716:	str	r5, [r1, #12]
    e718:	mov	r0, r6
    e71a:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    e71e:	b.w	d868 <__malloc_unlock>
    e722:	add.w	r2, ip, r3
    e726:	ldr	r2, [r2, #4]
    e728:	lsls	r0, r2, #31
    e72a:	bmi.n	e74e <_free_r+0xca>
    e72c:	add	r1, r3
    e72e:	add.w	r0, r7, #8
    e732:	ldr.w	r3, [ip, #8]
    e736:	cmp	r3, r0
    e738:	beq.n	e822 <_free_r+0x19e>
    e73a:	ldr.w	r2, [ip, #12]
    e73e:	str	r2, [r3, #12]
    e740:	str	r3, [r2, #8]
    e742:	orr.w	r3, r1, #1
    e746:	str	r3, [r5, #4]
    e748:	str	r1, [r5, r1]
    e74a:	b.n	e6ee <_free_r+0x6a>
    e74c:	bx	lr
    e74e:	orr.w	r3, r1, #1
    e752:	cmp.w	r1, #512	; 0x200
    e756:	str.w	r3, [r4, #-4]
    e75a:	str.w	r1, [ip]
    e75e:	bcc.n	e6f4 <_free_r+0x70>
    e760:	cmp.w	r1, #2560	; 0xa00
    e764:	mov.w	r3, r1, lsr #9
    e768:	bcs.n	e7fc <_free_r+0x178>
    e76a:	lsrs	r3, r1, #6
    e76c:	add.w	r0, r3, #57	; 0x39
    e770:	add.w	r2, r3, #56	; 0x38
    e774:	lsls	r3, r0, #3
    e776:	adds	r0, r7, r3
    e778:	ldr	r3, [r7, r3]
    e77a:	subs	r0, #8
    e77c:	cmp	r0, r3
    e77e:	beq.n	e834 <_free_r+0x1b0>
    e780:	ldr	r2, [r3, #4]
    e782:	bic.w	r2, r2, #3
    e786:	cmp	r2, r1
    e788:	bls.n	e790 <_free_r+0x10c>
    e78a:	ldr	r3, [r3, #8]
    e78c:	cmp	r0, r3
    e78e:	bne.n	e780 <_free_r+0xfc>
    e790:	ldr	r0, [r3, #12]
    e792:	strd	r3, r0, [r5, #8]
    e796:	str	r5, [r0, #8]
    e798:	str	r5, [r3, #12]
    e79a:	mov	r0, r6
    e79c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    e7a0:	b.w	d868 <__malloc_unlock>
    e7a4:	add.w	r2, ip, r3
    e7a8:	ldr	r2, [r2, #4]
    e7aa:	lsls	r2, r2, #31
    e7ac:	bmi.n	e876 <_free_r+0x1f2>
    e7ae:	add	r3, r1
    e7b0:	ldrd	r1, r2, [ip, #8]
    e7b4:	str	r2, [r1, #12]
    e7b6:	str	r1, [r2, #8]
    e7b8:	orr.w	r2, r3, #1
    e7bc:	str	r2, [r5, #4]
    e7be:	mov	r0, r6
    e7c0:	str	r3, [r5, r3]
    e7c2:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    e7c6:	b.w	d868 <__malloc_unlock>
    e7ca:	add	r3, r1
    e7cc:	lsls	r1, r2, #31
    e7ce:	bmi.n	e7e0 <_free_r+0x15c>
    e7d0:	ldr.w	r2, [r4, #-8]
    e7d4:	subs	r5, r5, r2
    e7d6:	add	r3, r2
    e7d8:	ldrd	r1, r2, [r5, #8]
    e7dc:	str	r2, [r1, #12]
    e7de:	str	r1, [r2, #8]
    e7e0:	orr.w	r2, r3, #1
    e7e4:	str	r2, [r5, #4]
    e7e6:	ldr	r2, [pc, #160]	; (e888 <_free_r+0x204>)
    e7e8:	str	r5, [r7, #8]
    e7ea:	ldr	r2, [r2, #0]
    e7ec:	cmp	r2, r3
    e7ee:	bhi.n	e718 <_free_r+0x94>
    e7f0:	ldr	r3, [pc, #152]	; (e88c <_free_r+0x208>)
    e7f2:	mov	r0, r6
    e7f4:	ldr	r1, [r3, #0]
    e7f6:	bl	e5e4 <_malloc_trim_r>
    e7fa:	b.n	e718 <_free_r+0x94>
    e7fc:	cmp	r3, #20
    e7fe:	bls.n	e816 <_free_r+0x192>
    e800:	cmp	r3, #84	; 0x54
    e802:	bhi.n	e844 <_free_r+0x1c0>
    e804:	lsrs	r3, r1, #12
    e806:	add.w	r0, r3, #111	; 0x6f
    e80a:	add.w	r2, r3, #110	; 0x6e
    e80e:	lsls	r3, r0, #3
    e810:	b.n	e776 <_free_r+0xf2>
    e812:	add	r1, r3
    e814:	b.n	e732 <_free_r+0xae>
    e816:	add.w	r0, r3, #92	; 0x5c
    e81a:	add.w	r2, r3, #91	; 0x5b
    e81e:	lsls	r3, r0, #3
    e820:	b.n	e776 <_free_r+0xf2>
    e822:	orr.w	r3, r1, #1
    e826:	strd	r5, r5, [r7, #16]
    e82a:	strd	r0, r0, [r5, #8]
    e82e:	str	r3, [r5, #4]
    e830:	str	r1, [r5, r1]
    e832:	b.n	e718 <_free_r+0x94>
    e834:	ldr	r1, [r7, #4]
    e836:	asrs	r2, r2, #2
    e838:	movs	r4, #1
    e83a:	lsl.w	r2, r4, r2
    e83e:	orrs	r2, r1
    e840:	str	r2, [r7, #4]
    e842:	b.n	e792 <_free_r+0x10e>
    e844:	cmp.w	r3, #340	; 0x154
    e848:	bhi.n	e858 <_free_r+0x1d4>
    e84a:	lsrs	r3, r1, #15
    e84c:	add.w	r0, r3, #120	; 0x78
    e850:	add.w	r2, r3, #119	; 0x77
    e854:	lsls	r3, r0, #3
    e856:	b.n	e776 <_free_r+0xf2>
    e858:	movw	r2, #1364	; 0x554
    e85c:	cmp	r3, r2
    e85e:	bhi.n	e86e <_free_r+0x1ea>
    e860:	lsrs	r3, r1, #18
    e862:	add.w	r0, r3, #125	; 0x7d
    e866:	add.w	r2, r3, #124	; 0x7c
    e86a:	lsls	r3, r0, #3
    e86c:	b.n	e776 <_free_r+0xf2>
    e86e:	mov.w	r3, #1016	; 0x3f8
    e872:	movs	r2, #126	; 0x7e
    e874:	b.n	e776 <_free_r+0xf2>
    e876:	orr.w	r3, r1, #1
    e87a:	str	r3, [r5, #4]
    e87c:	str.w	r1, [ip]
    e880:	b.n	e718 <_free_r+0x94>
    e882:	nop
    e884:	.word	0x200015f8
    e888:	.word	0x20001a04
    e88c:	.word	0x200067cc

0000e890 <__ascii_mbtowc>:
    e890:	sub	sp, #8
    e892:	cbz	r1, e8a8 <__ascii_mbtowc+0x18>
    e894:	cbz	r2, e8ae <__ascii_mbtowc+0x1e>
    e896:	cbz	r3, e8b4 <__ascii_mbtowc+0x24>
    e898:	ldrb	r3, [r2, #0]
    e89a:	str	r3, [r1, #0]
    e89c:	ldrb	r2, [r2, #0]
    e89e:	subs	r0, r2, #0
    e8a0:	it	ne
    e8a2:	movne	r0, #1
    e8a4:	add	sp, #8
    e8a6:	bx	lr
    e8a8:	add	r1, sp, #4
    e8aa:	cmp	r2, #0
    e8ac:	bne.n	e896 <__ascii_mbtowc+0x6>
    e8ae:	mov	r0, r2
    e8b0:	add	sp, #8
    e8b2:	bx	lr
    e8b4:	mvn.w	r0, #1
    e8b8:	b.n	e8a4 <__ascii_mbtowc+0x14>
    e8ba:	nop

0000e8bc <_Balloc>:
    e8bc:	ldr	r3, [r0, #68]	; 0x44
    e8be:	push	{r4, r5, r6, lr}
    e8c0:	mov	r5, r0
    e8c2:	mov	r4, r1
    e8c4:	cbz	r3, e8da <_Balloc+0x1e>
    e8c6:	ldr.w	r0, [r3, r4, lsl #2]
    e8ca:	cbz	r0, e8ee <_Balloc+0x32>
    e8cc:	ldr	r2, [r0, #0]
    e8ce:	str.w	r2, [r3, r4, lsl #2]
    e8d2:	movs	r3, #0
    e8d4:	strd	r3, r3, [r0, #12]
    e8d8:	pop	{r4, r5, r6, pc}
    e8da:	movs	r2, #33	; 0x21
    e8dc:	movs	r1, #4
    e8de:	bl	10ea0 <_calloc_r>
    e8e2:	mov	r3, r0
    e8e4:	str	r0, [r5, #68]	; 0x44
    e8e6:	cmp	r0, #0
    e8e8:	bne.n	e8c6 <_Balloc+0xa>
    e8ea:	movs	r0, #0
    e8ec:	pop	{r4, r5, r6, pc}
    e8ee:	movs	r1, #1
    e8f0:	lsl.w	r6, r1, r4
    e8f4:	adds	r2, r6, #5
    e8f6:	lsls	r2, r2, #2
    e8f8:	mov	r0, r5
    e8fa:	bl	10ea0 <_calloc_r>
    e8fe:	cmp	r0, #0
    e900:	beq.n	e8ea <_Balloc+0x2e>
    e902:	strd	r4, r6, [r0, #4]
    e906:	b.n	e8d2 <_Balloc+0x16>

0000e908 <_Bfree>:
    e908:	cbz	r1, e918 <_Bfree+0x10>
    e90a:	ldr	r3, [r0, #68]	; 0x44
    e90c:	ldr	r2, [r1, #4]
    e90e:	ldr.w	r0, [r3, r2, lsl #2]
    e912:	str	r0, [r1, #0]
    e914:	str.w	r1, [r3, r2, lsl #2]
    e918:	bx	lr
    e91a:	nop

0000e91c <__multadd>:
    e91c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e920:	ldr	r6, [r1, #16]
    e922:	mov	r8, r0
    e924:	mov	r7, r1
    e926:	mov	r5, r3
    e928:	add.w	lr, r1, #20
    e92c:	movs	r0, #0
    e92e:	ldr.w	r1, [lr]
    e932:	uxth	r4, r1
    e934:	mla	r3, r2, r4, r5
    e938:	lsrs	r1, r1, #16
    e93a:	mov.w	ip, r3, lsr #16
    e93e:	mla	ip, r2, r1, ip
    e942:	adds	r0, #1
    e944:	uxth	r4, r3
    e946:	add.w	r4, r4, ip, lsl #16
    e94a:	cmp	r6, r0
    e94c:	str.w	r4, [lr], #4
    e950:	mov.w	r5, ip, lsr #16
    e954:	bgt.n	e92e <__multadd+0x12>
    e956:	cbz	r5, e968 <__multadd+0x4c>
    e958:	ldr	r3, [r7, #8]
    e95a:	cmp	r3, r6
    e95c:	ble.n	e96e <__multadd+0x52>
    e95e:	add.w	r3, r7, r6, lsl #2
    e962:	adds	r6, #1
    e964:	str	r5, [r3, #20]
    e966:	str	r6, [r7, #16]
    e968:	mov	r0, r7
    e96a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e96e:	ldr	r1, [r7, #4]
    e970:	mov	r0, r8
    e972:	adds	r1, #1
    e974:	bl	e8bc <_Balloc>
    e978:	mov	r4, r0
    e97a:	cbz	r0, e9aa <__multadd+0x8e>
    e97c:	ldr	r2, [r7, #16]
    e97e:	adds	r2, #2
    e980:	add.w	r1, r7, #12
    e984:	lsls	r2, r2, #2
    e986:	adds	r0, #12
    e988:	bl	a170 <memcpy>
    e98c:	ldr.w	r3, [r8, #68]	; 0x44
    e990:	ldr	r2, [r7, #4]
    e992:	ldr.w	r1, [r3, r2, lsl #2]
    e996:	str	r1, [r7, #0]
    e998:	str.w	r7, [r3, r2, lsl #2]
    e99c:	mov	r7, r4
    e99e:	add.w	r3, r7, r6, lsl #2
    e9a2:	adds	r6, #1
    e9a4:	str	r5, [r3, #20]
    e9a6:	str	r6, [r7, #16]
    e9a8:	b.n	e968 <__multadd+0x4c>
    e9aa:	ldr	r3, [pc, #12]	; (e9b8 <__multadd+0x9c>)
    e9ac:	ldr	r0, [pc, #12]	; (e9bc <__multadd+0xa0>)
    e9ae:	mov	r2, r4
    e9b0:	movs	r1, #186	; 0xba
    e9b2:	bl	10e60 <__assert_func>
    e9b6:	nop
    e9b8:	.word	0x20000c78
    e9bc:	.word	0x20000c8c

0000e9c0 <__hi0bits>:
    e9c0:	lsrs	r3, r0, #16
    e9c2:	lsls	r3, r3, #16
    e9c4:	cbnz	r3, e9fc <__hi0bits+0x3c>
    e9c6:	lsls	r0, r0, #16
    e9c8:	movs	r3, #16
    e9ca:	tst.w	r0, #4278190080	; 0xff000000
    e9ce:	itt	eq
    e9d0:	lsleq	r0, r0, #8
    e9d2:	addeq	r3, #8
    e9d4:	tst.w	r0, #4026531840	; 0xf0000000
    e9d8:	itt	eq
    e9da:	lsleq	r0, r0, #4
    e9dc:	addeq	r3, #4
    e9de:	tst.w	r0, #3221225472	; 0xc0000000
    e9e2:	itt	eq
    e9e4:	lsleq	r0, r0, #2
    e9e6:	addeq	r3, #2
    e9e8:	cmp	r0, #0
    e9ea:	blt.n	e9f8 <__hi0bits+0x38>
    e9ec:	tst.w	r0, #1073741824	; 0x40000000
    e9f0:	add.w	r3, r3, #1
    e9f4:	it	eq
    e9f6:	moveq	r3, #32
    e9f8:	mov	r0, r3
    e9fa:	bx	lr
    e9fc:	movs	r3, #0
    e9fe:	b.n	e9ca <__hi0bits+0xa>

0000ea00 <__lo0bits>:
    ea00:	ldr	r3, [r0, #0]
    ea02:	ands.w	r2, r3, #7
    ea06:	beq.n	ea1a <__lo0bits+0x1a>
    ea08:	lsls	r1, r3, #31
    ea0a:	bmi.n	ea4c <__lo0bits+0x4c>
    ea0c:	lsls	r2, r3, #30
    ea0e:	bpl.n	ea56 <__lo0bits+0x56>
    ea10:	lsrs	r3, r3, #1
    ea12:	str	r3, [r0, #0]
    ea14:	movs	r2, #1
    ea16:	mov	r0, r2
    ea18:	bx	lr
    ea1a:	uxth	r1, r3
    ea1c:	cbnz	r1, ea22 <__lo0bits+0x22>
    ea1e:	lsrs	r3, r3, #16
    ea20:	movs	r2, #16
    ea22:	uxtb	r1, r3
    ea24:	cbnz	r1, ea2a <__lo0bits+0x2a>
    ea26:	adds	r2, #8
    ea28:	lsrs	r3, r3, #8
    ea2a:	lsls	r1, r3, #28
    ea2c:	itt	eq
    ea2e:	lsreq	r3, r3, #4
    ea30:	addeq	r2, #4
    ea32:	lsls	r1, r3, #30
    ea34:	itt	eq
    ea36:	lsreq	r3, r3, #2
    ea38:	addeq	r2, #2
    ea3a:	lsls	r1, r3, #31
    ea3c:	bmi.n	ea46 <__lo0bits+0x46>
    ea3e:	lsrs	r3, r3, #1
    ea40:	add.w	r2, r2, #1
    ea44:	beq.n	ea52 <__lo0bits+0x52>
    ea46:	str	r3, [r0, #0]
    ea48:	mov	r0, r2
    ea4a:	bx	lr
    ea4c:	movs	r2, #0
    ea4e:	mov	r0, r2
    ea50:	bx	lr
    ea52:	movs	r2, #32
    ea54:	b.n	ea16 <__lo0bits+0x16>
    ea56:	lsrs	r3, r3, #2
    ea58:	movs	r2, #2
    ea5a:	str	r3, [r0, #0]
    ea5c:	mov	r0, r2
    ea5e:	bx	lr

0000ea60 <__i2b>:
    ea60:	push	{r3, r4, r5, lr}
    ea62:	ldr	r3, [r0, #68]	; 0x44
    ea64:	mov	r4, r0
    ea66:	mov	r5, r1
    ea68:	cbz	r3, ea7e <__i2b+0x1e>
    ea6a:	ldr	r0, [r3, #4]
    ea6c:	cbz	r0, ea9c <__i2b+0x3c>
    ea6e:	ldr	r2, [r0, #0]
    ea70:	str	r2, [r3, #4]
    ea72:	movs	r2, #0
    ea74:	movs	r3, #1
    ea76:	strd	r3, r5, [r0, #16]
    ea7a:	str	r2, [r0, #12]
    ea7c:	pop	{r3, r4, r5, pc}
    ea7e:	movs	r2, #33	; 0x21
    ea80:	movs	r1, #4
    ea82:	bl	10ea0 <_calloc_r>
    ea86:	mov	r3, r0
    ea88:	str	r0, [r4, #68]	; 0x44
    ea8a:	cmp	r0, #0
    ea8c:	bne.n	ea6a <__i2b+0xa>
    ea8e:	ldr	r3, [pc, #36]	; (eab4 <__i2b+0x54>)
    ea90:	ldr	r0, [pc, #36]	; (eab8 <__i2b+0x58>)
    ea92:	movs	r2, #0
    ea94:	movw	r1, #325	; 0x145
    ea98:	bl	10e60 <__assert_func>
    ea9c:	movs	r2, #28
    ea9e:	movs	r1, #1
    eaa0:	mov	r0, r4
    eaa2:	bl	10ea0 <_calloc_r>
    eaa6:	cmp	r0, #0
    eaa8:	beq.n	ea8e <__i2b+0x2e>
    eaaa:	movs	r2, #1
    eaac:	movs	r3, #2
    eaae:	strd	r2, r3, [r0, #4]
    eab2:	b.n	ea72 <__i2b+0x12>
    eab4:	.word	0x20000c78
    eab8:	.word	0x20000c8c

0000eabc <__multiply>:
    eabc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    eac0:	ldr	r6, [r1, #16]
    eac2:	ldr	r5, [r2, #16]
    eac4:	cmp	r6, r5
    eac6:	sub	sp, #20
    eac8:	mov	r8, r1
    eaca:	mov	r4, r2
    eacc:	blt.n	eada <__multiply+0x1e>
    eace:	mov	r2, r5
    ead0:	mov	r3, r4
    ead2:	mov	r5, r6
    ead4:	mov	r4, r1
    ead6:	mov	r6, r2
    ead8:	mov	r8, r3
    eada:	ldr	r3, [r4, #8]
    eadc:	ldr	r1, [r4, #4]
    eade:	adds	r7, r5, r6
    eae0:	cmp	r3, r7
    eae2:	it	lt
    eae4:	addlt	r1, #1
    eae6:	bl	e8bc <_Balloc>
    eaea:	str	r0, [sp, #4]
    eaec:	cmp	r0, #0
    eaee:	beq.w	ec00 <__multiply+0x144>
    eaf2:	ldr	r3, [sp, #4]
    eaf4:	add.w	r9, r3, #20
    eaf8:	add.w	sl, r9, r7, lsl #2
    eafc:	cmp	r9, sl
    eafe:	bcs.n	eb0c <__multiply+0x50>
    eb00:	mov	r3, r9
    eb02:	movs	r2, #0
    eb04:	str.w	r2, [r3], #4
    eb08:	cmp	sl, r3
    eb0a:	bhi.n	eb04 <__multiply+0x48>
    eb0c:	add.w	r8, r8, #20
    eb10:	add.w	fp, r8, r6, lsl #2
    eb14:	add.w	r3, r4, #20
    eb18:	cmp	r8, fp
    eb1a:	mov	r2, r3
    eb1c:	add.w	r5, r3, r5, lsl #2
    eb20:	bcs.n	ebe2 <__multiply+0x126>
    eb22:	subs	r3, r5, r4
    eb24:	subs	r3, #21
    eb26:	bic.w	r3, r3, #3
    eb2a:	adds	r3, #4
    eb2c:	adds	r4, #21
    eb2e:	cmp	r5, r4
    eb30:	it	cc
    eb32:	movcc	r3, #4
    eb34:	strd	sl, r7, [sp, #8]
    eb38:	mov	ip, r5
    eb3a:	mov	r7, r3
    eb3c:	mov	sl, r2
    eb3e:	b.n	eb4c <__multiply+0x90>
    eb40:	lsrs	r1, r1, #16
    eb42:	bne.n	eb98 <__multiply+0xdc>
    eb44:	cmp	fp, r8
    eb46:	add.w	r9, r9, #4
    eb4a:	bls.n	ebde <__multiply+0x122>
    eb4c:	ldr.w	r1, [r8], #4
    eb50:	uxth	r5, r1
    eb52:	cmp	r5, #0
    eb54:	beq.n	eb40 <__multiply+0x84>
    eb56:	mov	r6, sl
    eb58:	mov	r4, r9
    eb5a:	movs	r3, #0
    eb5c:	ldr.w	r1, [r6], #4
    eb60:	ldr	r2, [r4, #0]
    eb62:	uxth.w	lr, r1
    eb66:	uxth	r0, r2
    eb68:	lsrs	r1, r1, #16
    eb6a:	mla	r0, r5, lr, r0
    eb6e:	lsrs	r2, r2, #16
    eb70:	add	r3, r0
    eb72:	mla	r2, r5, r1, r2
    eb76:	add.w	r2, r2, r3, lsr #16
    eb7a:	uxth	r3, r3
    eb7c:	orr.w	r3, r3, r2, lsl #16
    eb80:	cmp	ip, r6
    eb82:	str.w	r3, [r4], #4
    eb86:	mov.w	r3, r2, lsr #16
    eb8a:	bhi.n	eb5c <__multiply+0xa0>
    eb8c:	str.w	r3, [r9, r7]
    eb90:	ldr.w	r1, [r8, #-4]
    eb94:	lsrs	r1, r1, #16
    eb96:	beq.n	eb44 <__multiply+0x88>
    eb98:	ldr.w	r3, [r9]
    eb9c:	mov	r0, sl
    eb9e:	mov	r2, r3
    eba0:	mov	r4, r9
    eba2:	movs	r6, #0
    eba4:	ldrh	r5, [r0, #0]
    eba6:	lsrs	r2, r2, #16
    eba8:	mla	r2, r1, r5, r2
    ebac:	add	r6, r2
    ebae:	uxth	r3, r3
    ebb0:	orr.w	r3, r3, r6, lsl #16
    ebb4:	str.w	r3, [r4], #4
    ebb8:	ldr.w	r5, [r0], #4
    ebbc:	ldr	r2, [r4, #0]
    ebbe:	lsrs	r5, r5, #16
    ebc0:	uxth	r3, r2
    ebc2:	mla	r3, r1, r5, r3
    ebc6:	add.w	r3, r3, r6, lsr #16
    ebca:	cmp	ip, r0
    ebcc:	mov.w	r6, r3, lsr #16
    ebd0:	bhi.n	eba4 <__multiply+0xe8>
    ebd2:	cmp	fp, r8
    ebd4:	str.w	r3, [r9, r7]
    ebd8:	add.w	r9, r9, #4
    ebdc:	bhi.n	eb4c <__multiply+0x90>
    ebde:	ldrd	sl, r7, [sp, #8]
    ebe2:	cmp	r7, #0
    ebe4:	bgt.n	ebec <__multiply+0x130>
    ebe6:	b.n	ebf4 <__multiply+0x138>
    ebe8:	subs	r7, #1
    ebea:	beq.n	ebf4 <__multiply+0x138>
    ebec:	ldr.w	r3, [sl, #-4]!
    ebf0:	cmp	r3, #0
    ebf2:	beq.n	ebe8 <__multiply+0x12c>
    ebf4:	ldr	r3, [sp, #4]
    ebf6:	mov	r0, r3
    ebf8:	str	r7, [r3, #16]
    ebfa:	add	sp, #20
    ebfc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ec00:	ldr	r3, [pc, #12]	; (ec10 <__multiply+0x154>)
    ec02:	ldr	r0, [pc, #16]	; (ec14 <__multiply+0x158>)
    ec04:	ldr	r2, [sp, #4]
    ec06:	mov.w	r1, #354	; 0x162
    ec0a:	bl	10e60 <__assert_func>
    ec0e:	nop
    ec10:	.word	0x20000c78
    ec14:	.word	0x20000c8c

0000ec18 <__pow5mult>:
    ec18:	ands.w	r3, r2, #3
    ec1c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ec20:	mov	r4, r2
    ec22:	mov	r6, r0
    ec24:	bne.n	ec8c <__pow5mult+0x74>
    ec26:	mov	r5, r1
    ec28:	asrs	r4, r4, #2
    ec2a:	beq.n	ec6e <__pow5mult+0x56>
    ec2c:	ldr.w	r8, [r6, #64]	; 0x40
    ec30:	cmp.w	r8, #0
    ec34:	beq.n	ec9e <__pow5mult+0x86>
    ec36:	lsls	r3, r4, #31
    ec38:	mov.w	r7, #0
    ec3c:	bmi.n	ec4e <__pow5mult+0x36>
    ec3e:	asrs	r4, r4, #1
    ec40:	beq.n	ec6e <__pow5mult+0x56>
    ec42:	ldr.w	r0, [r8]
    ec46:	cbz	r0, ec74 <__pow5mult+0x5c>
    ec48:	mov	r8, r0
    ec4a:	lsls	r3, r4, #31
    ec4c:	bpl.n	ec3e <__pow5mult+0x26>
    ec4e:	mov	r2, r8
    ec50:	mov	r1, r5
    ec52:	mov	r0, r6
    ec54:	bl	eabc <__multiply>
    ec58:	cbz	r5, ec88 <__pow5mult+0x70>
    ec5a:	ldr	r1, [r5, #4]
    ec5c:	ldr	r3, [r6, #68]	; 0x44
    ec5e:	asrs	r4, r4, #1
    ec60:	ldr.w	r2, [r3, r1, lsl #2]
    ec64:	str	r2, [r5, #0]
    ec66:	str.w	r5, [r3, r1, lsl #2]
    ec6a:	mov	r5, r0
    ec6c:	bne.n	ec42 <__pow5mult+0x2a>
    ec6e:	mov	r0, r5
    ec70:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ec74:	mov	r2, r8
    ec76:	mov	r1, r8
    ec78:	mov	r0, r6
    ec7a:	bl	eabc <__multiply>
    ec7e:	str.w	r0, [r8]
    ec82:	str	r7, [r0, #0]
    ec84:	mov	r8, r0
    ec86:	b.n	ec4a <__pow5mult+0x32>
    ec88:	mov	r5, r0
    ec8a:	b.n	ec3e <__pow5mult+0x26>
    ec8c:	subs	r3, #1
    ec8e:	ldr	r2, [pc, #60]	; (eccc <__pow5mult+0xb4>)
    ec90:	ldr.w	r2, [r2, r3, lsl #2]
    ec94:	movs	r3, #0
    ec96:	bl	e91c <__multadd>
    ec9a:	mov	r5, r0
    ec9c:	b.n	ec28 <__pow5mult+0x10>
    ec9e:	movs	r1, #1
    eca0:	mov	r0, r6
    eca2:	bl	e8bc <_Balloc>
    eca6:	mov	r8, r0
    eca8:	cbz	r0, ecbc <__pow5mult+0xa4>
    ecaa:	movs	r3, #1
    ecac:	movw	r2, #625	; 0x271
    ecb0:	strd	r3, r2, [r0, #16]
    ecb4:	movs	r3, #0
    ecb6:	str	r0, [r6, #64]	; 0x40
    ecb8:	str	r3, [r0, #0]
    ecba:	b.n	ec36 <__pow5mult+0x1e>
    ecbc:	ldr	r3, [pc, #16]	; (ecd0 <__pow5mult+0xb8>)
    ecbe:	ldr	r0, [pc, #20]	; (ecd4 <__pow5mult+0xbc>)
    ecc0:	mov	r2, r8
    ecc2:	movw	r1, #325	; 0x145
    ecc6:	bl	10e60 <__assert_func>
    ecca:	nop
    eccc:	.word	0x20001240
    ecd0:	.word	0x20000c78
    ecd4:	.word	0x20000c8c

0000ecd8 <__lshift>:
    ecd8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ecdc:	mov	r5, r1
    ecde:	mov	r4, r2
    ece0:	ldr	r7, [r5, #16]
    ece2:	ldr	r3, [r5, #8]
    ece4:	ldr	r1, [r1, #4]
    ece6:	add.w	r7, r7, r2, asr #5
    ecea:	adds	r6, r7, #1
    ecec:	cmp	r6, r3
    ecee:	mov	r8, r0
    ecf0:	mov.w	r9, r2, asr #5
    ecf4:	ble.n	ed00 <__lshift+0x28>
    ecf6:	lsls	r3, r3, #1
    ecf8:	cmp	r6, r3
    ecfa:	add.w	r1, r1, #1
    ecfe:	bgt.n	ecf6 <__lshift+0x1e>
    ed00:	mov	r0, r8
    ed02:	bl	e8bc <_Balloc>
    ed06:	mov	ip, r0
    ed08:	cmp	r0, #0
    ed0a:	beq.n	edb2 <__lshift+0xda>
    ed0c:	cmp.w	r9, #0
    ed10:	add.w	r2, r0, #20
    ed14:	ble.n	ed34 <__lshift+0x5c>
    ed16:	add.w	r1, r9, #5
    ed1a:	mov.w	lr, r1, lsl #2
    ed1e:	mov	r3, r2
    ed20:	add.w	r1, r0, r1, lsl #2
    ed24:	movs	r0, #0
    ed26:	str.w	r0, [r3], #4
    ed2a:	cmp	r3, r1
    ed2c:	bne.n	ed26 <__lshift+0x4e>
    ed2e:	sub.w	r3, lr, #20
    ed32:	add	r2, r3
    ed34:	ldr	r1, [r5, #16]
    ed36:	add.w	r3, r5, #20
    ed3a:	ands.w	lr, r4, #31
    ed3e:	add.w	r1, r3, r1, lsl #2
    ed42:	beq.n	eda2 <__lshift+0xca>
    ed44:	rsb	r9, lr, #32
    ed48:	mov	r0, r2
    ed4a:	mov.w	sl, #0
    ed4e:	ldr	r4, [r3, #0]
    ed50:	lsl.w	r4, r4, lr
    ed54:	orr.w	r4, r4, sl
    ed58:	str.w	r4, [r0], #4
    ed5c:	ldr.w	r4, [r3], #4
    ed60:	cmp	r1, r3
    ed62:	lsr.w	sl, r4, r9
    ed66:	bhi.n	ed4e <__lshift+0x76>
    ed68:	subs	r3, r1, r5
    ed6a:	subs	r3, #21
    ed6c:	bic.w	r3, r3, #3
    ed70:	adds	r3, #4
    ed72:	add.w	r0, r5, #21
    ed76:	cmp	r1, r0
    ed78:	it	cc
    ed7a:	movcc	r3, #4
    ed7c:	cmp.w	sl, #0
    ed80:	it	ne
    ed82:	movne	r7, r6
    ed84:	str.w	sl, [r2, r3]
    ed88:	ldr.w	r3, [r8, #68]	; 0x44
    ed8c:	ldr	r2, [r5, #4]
    ed8e:	str.w	r7, [ip, #16]
    ed92:	ldr.w	r1, [r3, r2, lsl #2]
    ed96:	str	r1, [r5, #0]
    ed98:	mov	r0, ip
    ed9a:	str.w	r5, [r3, r2, lsl #2]
    ed9e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    eda2:	subs	r2, #4
    eda4:	ldr.w	r0, [r3], #4
    eda8:	str.w	r0, [r2, #4]!
    edac:	cmp	r1, r3
    edae:	bhi.n	eda4 <__lshift+0xcc>
    edb0:	b.n	ed88 <__lshift+0xb0>
    edb2:	ldr	r3, [pc, #12]	; (edc0 <__lshift+0xe8>)
    edb4:	ldr	r0, [pc, #12]	; (edc4 <__lshift+0xec>)
    edb6:	mov	r2, ip
    edb8:	mov.w	r1, #478	; 0x1de
    edbc:	bl	10e60 <__assert_func>
    edc0:	.word	0x20000c78
    edc4:	.word	0x20000c8c

0000edc8 <__mcmp>:
    edc8:	ldr	r3, [r1, #16]
    edca:	mov	ip, r0
    edcc:	ldr	r0, [r0, #16]
    edce:	subs	r0, r0, r3
    edd0:	bne.n	ee00 <__mcmp+0x38>
    edd2:	add.w	ip, ip, #20
    edd6:	adds	r1, #20
    edd8:	add.w	r2, ip, r3, lsl #2
    eddc:	push	{r4}
    edde:	add.w	r3, r1, r3, lsl #2
    ede2:	b.n	ede8 <__mcmp+0x20>
    ede4:	cmp	ip, r2
    ede6:	bcs.n	edfa <__mcmp+0x32>
    ede8:	ldr.w	r4, [r2, #-4]!
    edec:	ldr.w	r1, [r3, #-4]!
    edf0:	cmp	r4, r1
    edf2:	beq.n	ede4 <__mcmp+0x1c>
    edf4:	bcs.n	ee02 <__mcmp+0x3a>
    edf6:	mov.w	r0, #4294967295
    edfa:	ldr.w	r4, [sp], #4
    edfe:	bx	lr
    ee00:	bx	lr
    ee02:	movs	r0, #1
    ee04:	ldr.w	r4, [sp], #4
    ee08:	bx	lr
    ee0a:	nop

0000ee0c <__mdiff>:
    ee0c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ee10:	ldr	r7, [r1, #16]
    ee12:	ldr	r3, [r2, #16]
    ee14:	subs	r7, r7, r3
    ee16:	cmp	r7, #0
    ee18:	mov	r6, r1
    ee1a:	mov	r8, r2
    ee1c:	bne.n	ef1e <__mdiff+0x112>
    ee1e:	add.w	r5, r1, #20
    ee22:	adds	r2, #20
    ee24:	add.w	r2, r2, r3, lsl #2
    ee28:	add.w	r3, r5, r3, lsl #2
    ee2c:	b.n	ee32 <__mdiff+0x26>
    ee2e:	cmp	r5, r3
    ee30:	bcs.n	ef24 <__mdiff+0x118>
    ee32:	ldr.w	r1, [r3, #-4]!
    ee36:	ldr.w	r4, [r2, #-4]!
    ee3a:	cmp	r1, r4
    ee3c:	beq.n	ee2e <__mdiff+0x22>
    ee3e:	bcc.n	ef14 <__mdiff+0x108>
    ee40:	ldr	r1, [r6, #4]
    ee42:	bl	e8bc <_Balloc>
    ee46:	mov	r9, r0
    ee48:	cmp	r0, #0
    ee4a:	beq.n	ef3c <__mdiff+0x130>
    ee4c:	ldr	r5, [r6, #16]
    ee4e:	ldr.w	r2, [r8, #16]
    ee52:	str	r7, [r0, #12]
    ee54:	add.w	lr, r8, #20
    ee58:	add.w	r0, r6, #20
    ee5c:	add.w	sl, r9, #20
    ee60:	add.w	r1, r6, #16
    ee64:	add.w	r2, lr, r2, lsl #2
    ee68:	add.w	r7, r0, r5, lsl #2
    ee6c:	mov	r6, sl
    ee6e:	mov.w	ip, #0
    ee72:	ldr.w	r4, [lr], #4
    ee76:	ldr.w	fp, [r1, #4]!
    ee7a:	uxth	r3, r4
    ee7c:	uxtah	ip, ip, fp
    ee80:	sub.w	r3, ip, r3
    ee84:	mov.w	ip, r4, lsr #16
    ee88:	rsb	ip, ip, fp, lsr #16
    ee8c:	add.w	ip, ip, r3, asr #16
    ee90:	uxth	r3, r3
    ee92:	orr.w	r3, r3, ip, lsl #16
    ee96:	cmp	r2, lr
    ee98:	str.w	r3, [r6], #4
    ee9c:	mov.w	ip, ip, asr #16
    eea0:	bhi.n	ee72 <__mdiff+0x66>
    eea2:	sub.w	r1, r2, r8
    eea6:	subs	r1, #21
    eea8:	add.w	r8, r8, #21
    eeac:	cmp	r2, r8
    eeae:	bic.w	r4, r1, #3
    eeb2:	add.w	r4, r4, #4
    eeb6:	it	cc
    eeb8:	movcc	r4, #4
    eeba:	add	r0, r4
    eebc:	bic.w	r2, r1, #3
    eec0:	it	cc
    eec2:	movcc	r2, #0
    eec4:	cmp	r7, r0
    eec6:	add	r2, sl
    eec8:	add	r4, sl
    eeca:	bls.n	eefe <__mdiff+0xf2>
    eecc:	mov	r6, r4
    eece:	mov	r1, r0
    eed0:	ldr.w	r3, [r1], #4
    eed4:	uxtah	ip, ip, r3
    eed8:	mov.w	r2, ip, asr #16
    eedc:	add.w	r2, r2, r3, lsr #16
    eee0:	uxth.w	ip, ip
    eee4:	orr.w	r3, ip, r2, lsl #16
    eee8:	cmp	r7, r1
    eeea:	str.w	r3, [r6], #4
    eeee:	mov.w	ip, r2, asr #16
    eef2:	bhi.n	eed0 <__mdiff+0xc4>
    eef4:	subs	r7, #1
    eef6:	subs	r7, r7, r0
    eef8:	bic.w	r7, r7, #3
    eefc:	adds	r2, r4, r7
    eefe:	cbnz	r3, ef0a <__mdiff+0xfe>
    ef00:	ldr.w	r3, [r2, #-4]!
    ef04:	subs	r5, #1
    ef06:	cmp	r3, #0
    ef08:	beq.n	ef00 <__mdiff+0xf4>
    ef0a:	str.w	r5, [r9, #16]
    ef0e:	mov	r0, r9
    ef10:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ef14:	mov	r3, r6
    ef16:	movs	r7, #1
    ef18:	mov	r6, r8
    ef1a:	mov	r8, r3
    ef1c:	b.n	ee40 <__mdiff+0x34>
    ef1e:	blt.n	ef14 <__mdiff+0x108>
    ef20:	movs	r7, #0
    ef22:	b.n	ee40 <__mdiff+0x34>
    ef24:	movs	r1, #0
    ef26:	bl	e8bc <_Balloc>
    ef2a:	mov	r9, r0
    ef2c:	cbz	r0, ef4a <__mdiff+0x13e>
    ef2e:	movs	r2, #1
    ef30:	movs	r3, #0
    ef32:	strd	r2, r3, [r9, #16]
    ef36:	mov	r0, r9
    ef38:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ef3c:	ldr	r3, [pc, #24]	; (ef58 <__mdiff+0x14c>)
    ef3e:	ldr	r0, [pc, #28]	; (ef5c <__mdiff+0x150>)
    ef40:	mov	r2, r9
    ef42:	movw	r1, #581	; 0x245
    ef46:	bl	10e60 <__assert_func>
    ef4a:	ldr	r3, [pc, #12]	; (ef58 <__mdiff+0x14c>)
    ef4c:	ldr	r0, [pc, #12]	; (ef5c <__mdiff+0x150>)
    ef4e:	mov	r2, r9
    ef50:	movw	r1, #567	; 0x237
    ef54:	bl	10e60 <__assert_func>
    ef58:	.word	0x20000c78
    ef5c:	.word	0x20000c8c

0000ef60 <__d2b>:
    ef60:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    ef64:	mov	r8, r1
    ef66:	sub	sp, #12
    ef68:	movs	r1, #1
    ef6a:	vmov	r6, r7, d0
    ef6e:	mov	r5, r2
    ef70:	bl	e8bc <_Balloc>
    ef74:	mov	r4, r0
    ef76:	cmp	r0, #0
    ef78:	beq.n	f01e <__d2b+0xbe>
    ef7a:	ubfx	r9, r7, #20, #11
    ef7e:	ubfx	r3, r7, #0, #20
    ef82:	cmp.w	r9, #0
    ef86:	beq.n	ef8c <__d2b+0x2c>
    ef88:	orr.w	r3, r3, #1048576	; 0x100000
    ef8c:	cmp	r6, #0
    ef8e:	str	r3, [sp, #4]
    ef90:	bne.n	efc4 <__d2b+0x64>
    ef92:	add	r0, sp, #4
    ef94:	bl	ea00 <__lo0bits>
    ef98:	ldr	r2, [sp, #4]
    ef9a:	str	r2, [r4, #20]
    ef9c:	movs	r2, #1
    ef9e:	add.w	r3, r0, #32
    efa2:	str	r2, [r4, #16]
    efa4:	cmp.w	r9, #0
    efa8:	beq.n	eff6 <__d2b+0x96>
    efaa:	subw	r9, r9, #1075	; 0x433
    efae:	add.w	r2, r9, r3
    efb2:	mov	r0, r4
    efb4:	rsb	r3, r3, #53	; 0x35
    efb8:	str.w	r2, [r8]
    efbc:	str	r3, [r5, #0]
    efbe:	add	sp, #12
    efc0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    efc4:	mov	r0, sp
    efc6:	str	r6, [sp, #0]
    efc8:	bl	ea00 <__lo0bits>
    efcc:	mov	r3, r0
    efce:	cbz	r0, f016 <__d2b+0xb6>
    efd0:	ldrd	r0, r2, [sp]
    efd4:	rsb	r1, r3, #32
    efd8:	lsl.w	r1, r2, r1
    efdc:	orrs	r1, r0
    efde:	lsrs	r2, r3
    efe0:	str	r1, [r4, #20]
    efe2:	str	r2, [sp, #4]
    efe4:	cmp	r2, #0
    efe6:	str	r2, [r4, #24]
    efe8:	ite	ne
    efea:	movne	r2, #2
    efec:	moveq	r2, #1
    efee:	str	r2, [r4, #16]
    eff0:	cmp.w	r9, #0
    eff4:	bne.n	efaa <__d2b+0x4a>
    eff6:	subw	r3, r3, #1074	; 0x432
    effa:	str.w	r3, [r8]
    effe:	add.w	r3, r4, r2, lsl #2
    f002:	ldr	r0, [r3, #16]
    f004:	bl	e9c0 <__hi0bits>
    f008:	rsb	r3, r0, r2, lsl #5
    f00c:	mov	r0, r4
    f00e:	str	r3, [r5, #0]
    f010:	add	sp, #12
    f012:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    f016:	ldr	r2, [sp, #0]
    f018:	str	r2, [r4, #20]
    f01a:	ldr	r2, [sp, #4]
    f01c:	b.n	efe4 <__d2b+0x84>
    f01e:	ldr	r3, [pc, #12]	; (f02c <__d2b+0xcc>)
    f020:	ldr	r0, [pc, #12]	; (f030 <__d2b+0xd0>)
    f022:	mov	r2, r4
    f024:	movw	r1, #783	; 0x30f
    f028:	bl	10e60 <__assert_func>
    f02c:	.word	0x20000c78
    f030:	.word	0x20000c8c

0000f034 <__ascii_wctomb>:
    f034:	cbz	r1, f04a <__ascii_wctomb+0x16>
    f036:	cmp	r2, #255	; 0xff
    f038:	bhi.n	f040 <__ascii_wctomb+0xc>
    f03a:	strb	r2, [r1, #0]
    f03c:	movs	r0, #1
    f03e:	bx	lr
    f040:	movs	r3, #138	; 0x8a
    f042:	str	r3, [r0, #0]
    f044:	mov.w	r0, #4294967295
    f048:	bx	lr
    f04a:	mov	r0, r1
    f04c:	bx	lr
    f04e:	nop

0000f050 <_svfprintf_r>:
    f050:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f054:	vpush	{d8-d11}
    f058:	sub	sp, #324	; 0x144
    f05a:	mov	r4, r1
    f05c:	vmov	s22, r1
    f060:	mov	r8, r2
    f062:	str	r3, [sp, #32]
    f064:	mov	fp, r0
    f066:	bl	10de0 <_localeconv_r>
    f06a:	ldr	r3, [r0, #0]
    f06c:	str	r3, [sp, #72]	; 0x48
    f06e:	mov	r0, r3
    f070:	bl	e480 <strlen>
    f074:	add	r7, sp, #128	; 0x80
    f076:	str	r0, [sp, #64]	; 0x40
    f078:	movs	r2, #8
    f07a:	movs	r1, #0
    f07c:	mov	r0, r7
    f07e:	bl	e110 <memset>
    f082:	ldrh	r3, [r4, #12]
    f084:	lsls	r3, r3, #24
    f086:	bpl.n	f090 <_svfprintf_r+0x40>
    f088:	ldr	r3, [r4, #16]
    f08a:	cmp	r3, #0
    f08c:	beq.w	ff3a <_svfprintf_r+0xeea>
    f090:	movs	r3, #0
    f092:	vldr	d8, [pc, #524]	; f2a0 <_svfprintf_r+0x250>
    f096:	vldr	d9, [pc, #528]	; f2a8 <_svfprintf_r+0x258>
    f09a:	strd	r3, r3, [sp, #148]	; 0x94
    f09e:	strd	r3, r3, [sp, #76]	; 0x4c
    f0a2:	strd	r3, r3, [sp, #84]	; 0x54
    f0a6:	add	r2, sp, #156	; 0x9c
    f0a8:	str	r3, [sp, #56]	; 0x38
    f0aa:	str	r2, [sp, #144]	; 0x90
    f0ac:	mov	sl, r2
    f0ae:	str	r3, [sp, #68]	; 0x44
    f0b0:	str	r3, [sp, #16]
    f0b2:	mov	r4, r8
    f0b4:	mov	r9, r4
    f0b6:	ldr	r3, [pc, #504]	; (f2b0 <_svfprintf_r+0x260>)
    f0b8:	ldr.w	r5, [r3, #228]	; 0xe4
    f0bc:	bl	e2a4 <__locale_mb_cur_max>
    f0c0:	mov	r2, r9
    f0c2:	mov	r3, r0
    f0c4:	add	r1, sp, #112	; 0x70
    f0c6:	str	r7, [sp, #0]
    f0c8:	mov	r0, fp
    f0ca:	blx	r5
    f0cc:	cmp	r0, #0
    f0ce:	beq.w	f232 <_svfprintf_r+0x1e2>
    f0d2:	blt.w	f222 <_svfprintf_r+0x1d2>
    f0d6:	ldr	r2, [sp, #112]	; 0x70
    f0d8:	cmp	r2, #37	; 0x25
    f0da:	mov	r3, r0
    f0dc:	beq.n	f0e2 <_svfprintf_r+0x92>
    f0de:	add	r9, r3
    f0e0:	b.n	f0b6 <_svfprintf_r+0x66>
    f0e2:	subs.w	r5, r9, r4
    f0e6:	mov	r6, r0
    f0e8:	bne.w	f23a <_svfprintf_r+0x1ea>
    f0ec:	movs	r3, #0
    f0ee:	mov.w	r2, #4294967295
    f0f2:	strb.w	r3, [sp, #103]	; 0x67
    f0f6:	mov	r8, r3
    f0f8:	str	r3, [sp, #24]
    f0fa:	add.w	r9, r9, #1
    f0fe:	ldrb.w	r3, [r9]
    f102:	str	r2, [sp, #12]
    f104:	movs	r5, #43	; 0x2b
    f106:	movs	r6, #32
    f108:	add.w	r9, r9, #1
    f10c:	sub.w	r2, r3, #32
    f110:	cmp	r2, #90	; 0x5a
    f112:	bhi.w	f2b4 <_svfprintf_r+0x264>
    f116:	tbh	[pc, r2, lsl #1]
    f11a:	.short	0x02e8
    f11c:	.word	0x00cd00cd
    f120:	.word	0x00cd02e3
    f124:	.word	0x00cd00cd
    f128:	.word	0x00cd006a
    f12c:	.word	0x020500cd
    f130:	.word	0x00cd0284
    f134:	.word	0x02c90210
    f138:	.word	0x02bd00cd
    f13c:	.word	0x005b005b
    f140:	.word	0x005b005b
    f144:	.word	0x005b005b
    f148:	.word	0x005b005b
    f14c:	.word	0x00cd005b
    f150:	.word	0x00cd00cd
    f154:	.word	0x00cd00cd
    f158:	.word	0x00cd00cd
    f15c:	.word	0x00cd0153
    f160:	.word	0x021a0183
    f164:	.word	0x01530153
    f168:	.word	0x00cd0153
    f16c:	.word	0x00cd00cd
    f170:	.word	0x021500cd
    f174:	.word	0x00cd00cd
    f178:	.word	0x00cd0296
    f17c:	.word	0x00cd00cd
    f180:	.word	0x00cd01ab
    f184:	.word	0x00cd02aa
    f188:	.word	0x06e300cd
    f18c:	.word	0x00cd00cd
    f190:	.word	0x00cd00cd
    f194:	.word	0x00cd00cd
    f198:	.word	0x00cd00cd
    f19c:	.word	0x00cd0153
    f1a0:	.word	0x01de0183
    f1a4:	.word	0x01530153
    f1a8:	.word	0x02770153
    f1ac:	.word	0x007f01de
    f1b0:	.word	0x028900cd
    f1b4:	.word	0x025f00cd
    f1b8:	.word	0x022f06e0
    f1bc:	.word	0x00cd007f
    f1c0:	.word	0x007c01ab
    f1c4:	.word	0x00cd06b8
    f1c8:	.word	0x06bd00cd
    f1cc:	.word	0x007c00cd
    f1d0:	sub.w	r2, r3, #48	; 0x30
    f1d4:	movs	r1, #0
    f1d6:	ldrb.w	r3, [r9], #1
    f1da:	add.w	r1, r1, r1, lsl #2
    f1de:	add.w	r1, r2, r1, lsl #1
    f1e2:	sub.w	r2, r3, #48	; 0x30
    f1e6:	cmp	r2, #9
    f1e8:	bls.n	f1d6 <_svfprintf_r+0x186>
    f1ea:	str	r1, [sp, #24]
    f1ec:	b.n	f10c <_svfprintf_r+0xbc>
    f1ee:	mov	r0, fp
    f1f0:	bl	10de0 <_localeconv_r>
    f1f4:	ldr	r3, [r0, #4]
    f1f6:	str	r3, [sp, #84]	; 0x54
    f1f8:	mov	r0, r3
    f1fa:	bl	e480 <strlen>
    f1fe:	str	r0, [sp, #88]	; 0x58
    f200:	mov	r0, fp
    f202:	bl	10de0 <_localeconv_r>
    f206:	ldr	r3, [r0, #8]
    f208:	str	r3, [sp, #76]	; 0x4c
    f20a:	ldr	r3, [sp, #88]	; 0x58
    f20c:	cmp	r3, #0
    f20e:	bne.w	fe6c <_svfprintf_r+0xe1c>
    f212:	ldrb.w	r3, [r9]
    f216:	b.n	f108 <_svfprintf_r+0xb8>
    f218:	ldrb.w	r3, [r9]
    f21c:	orr.w	r8, r8, #32
    f220:	b.n	f108 <_svfprintf_r+0xb8>
    f222:	movs	r2, #8
    f224:	movs	r1, #0
    f226:	mov	r0, r7
    f228:	bl	e110 <memset>
    f22c:	movs	r3, #1
    f22e:	add	r9, r3
    f230:	b.n	f0b6 <_svfprintf_r+0x66>
    f232:	subs.w	r5, r9, r4
    f236:	mov	r6, r0
    f238:	beq.n	f25e <_svfprintf_r+0x20e>
    f23a:	ldr	r3, [sp, #152]	; 0x98
    f23c:	add	r3, r5
    f23e:	str	r3, [sp, #152]	; 0x98
    f240:	ldr	r3, [sp, #148]	; 0x94
    f242:	adds	r3, #1
    f244:	cmp	r3, #7
    f246:	strd	r4, r5, [sl]
    f24a:	str	r3, [sp, #148]	; 0x94
    f24c:	bgt.n	f288 <_svfprintf_r+0x238>
    f24e:	add.w	sl, sl, #8
    f252:	ldr	r3, [sp, #16]
    f254:	add	r3, r5
    f256:	str	r3, [sp, #16]
    f258:	cmp	r6, #0
    f25a:	bne.w	f0ec <_svfprintf_r+0x9c>
    f25e:	ldr	r3, [sp, #152]	; 0x98
    f260:	cmp	r3, #0
    f262:	bne.w	1067c <_svfprintf_r+0x162c>
    f266:	vmov	r3, s22
    f26a:	ldrsh.w	r3, [r3, #12]
    f26e:	tst.w	r3, #64	; 0x40
    f272:	ldr	r3, [sp, #16]
    f274:	it	ne
    f276:	movne.w	r3, #4294967295
    f27a:	str	r3, [sp, #16]
    f27c:	ldr	r0, [sp, #16]
    f27e:	add	sp, #324	; 0x144
    f280:	vpop	{d8-d11}
    f284:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f288:	vmov	r1, s22
    f28c:	add	r2, sp, #144	; 0x90
    f28e:	mov	r0, fp
    f290:	bl	11db8 <__ssprint_r>
    f294:	cmp	r0, #0
    f296:	bne.n	f266 <_svfprintf_r+0x216>
    f298:	add.w	sl, sp, #156	; 0x9c
    f29c:	b.n	f252 <_svfprintf_r+0x202>
    f29e:	nop
	...
    f2a8:	.word	0xffffffff
    f2ac:	.word	0x7fefffff
    f2b0:	.word	0x2000148c
    f2b4:	str	r3, [sp, #44]	; 0x2c
    f2b6:	cmp	r3, #0
    f2b8:	beq.n	f25e <_svfprintf_r+0x20e>
    f2ba:	movs	r1, #0
    f2bc:	strd	r1, r1, [sp, #48]	; 0x30
    f2c0:	strb.w	r3, [sp, #220]	; 0xdc
    f2c4:	movs	r3, #1
    f2c6:	strb.w	r1, [sp, #103]	; 0x67
    f2ca:	str	r3, [sp, #8]
    f2cc:	str	r1, [sp, #28]
    f2ce:	str	r3, [sp, #20]
    f2d0:	str	r1, [sp, #12]
    f2d2:	str	r1, [sp, #60]	; 0x3c
    f2d4:	add	r4, sp, #220	; 0xdc
    f2d6:	ands.w	r3, r8, #2
    f2da:	str	r3, [sp, #36]	; 0x24
    f2dc:	beq.n	f2e4 <_svfprintf_r+0x294>
    f2de:	ldr	r3, [sp, #8]
    f2e0:	adds	r3, #2
    f2e2:	str	r3, [sp, #8]
    f2e4:	ands.w	r3, r8, #132	; 0x84
    f2e8:	str	r3, [sp, #40]	; 0x28
    f2ea:	bne.n	f2f8 <_svfprintf_r+0x2a8>
    f2ec:	ldr	r3, [sp, #24]
    f2ee:	ldr	r2, [sp, #8]
    f2f0:	subs	r5, r3, r2
    f2f2:	cmp	r5, #0
    f2f4:	bgt.w	f9ca <_svfprintf_r+0x97a>
    f2f8:	ldr	r2, [sp, #152]	; 0x98
    f2fa:	cbz	r1, f320 <_svfprintf_r+0x2d0>
    f2fc:	ldr	r1, [sp, #148]	; 0x94
    f2fe:	add.w	r0, sp, #103	; 0x67
    f302:	adds	r1, #1
    f304:	adds	r2, #1
    f306:	str.w	r0, [sl]
    f30a:	cmp	r1, #7
    f30c:	mov.w	r0, #1
    f310:	str	r2, [sp, #152]	; 0x98
    f312:	str	r1, [sp, #148]	; 0x94
    f314:	str.w	r0, [sl, #4]
    f318:	bgt.w	fa60 <_svfprintf_r+0xa10>
    f31c:	add.w	sl, sl, #8
    f320:	ldr	r3, [sp, #36]	; 0x24
    f322:	cbz	r3, f346 <_svfprintf_r+0x2f6>
    f324:	ldr	r3, [sp, #148]	; 0x94
    f326:	add	r1, sp, #104	; 0x68
    f328:	adds	r3, #1
    f32a:	adds	r2, #2
    f32c:	str.w	r1, [sl]
    f330:	cmp	r3, #7
    f332:	mov.w	r1, #2
    f336:	str	r2, [sp, #152]	; 0x98
    f338:	str	r3, [sp, #148]	; 0x94
    f33a:	str.w	r1, [sl, #4]
    f33e:	bgt.w	fa88 <_svfprintf_r+0xa38>
    f342:	add.w	sl, sl, #8
    f346:	ldr	r3, [sp, #40]	; 0x28
    f348:	cmp	r3, #128	; 0x80
    f34a:	beq.w	f826 <_svfprintf_r+0x7d6>
    f34e:	ldr	r3, [sp, #12]
    f350:	ldr	r1, [sp, #20]
    f352:	subs	r5, r3, r1
    f354:	cmp	r5, #0
    f356:	bgt.w	f8a4 <_svfprintf_r+0x854>
    f35a:	tst.w	r8, #256	; 0x100
    f35e:	bne.w	f77c <_svfprintf_r+0x72c>
    f362:	ldr	r3, [sp, #20]
    f364:	str.w	r3, [sl, #4]
    f368:	add	r2, r3
    f36a:	ldr	r3, [sp, #148]	; 0x94
    f36c:	str.w	r4, [sl]
    f370:	adds	r3, #1
    f372:	cmp	r3, #7
    f374:	str	r2, [sp, #152]	; 0x98
    f376:	str	r3, [sp, #148]	; 0x94
    f378:	bgt.w	f9b2 <_svfprintf_r+0x962>
    f37c:	add.w	sl, sl, #8
    f380:	tst.w	r8, #4
    f384:	beq.n	f392 <_svfprintf_r+0x342>
    f386:	ldr	r3, [sp, #24]
    f388:	ldr	r1, [sp, #8]
    f38a:	subs	r4, r3, r1
    f38c:	cmp	r4, #0
    f38e:	bgt.w	faa2 <_svfprintf_r+0xa52>
    f392:	ldr	r3, [sp, #16]
    f394:	ldr	r1, [sp, #24]
    f396:	ldr	r0, [sp, #8]
    f398:	cmp	r1, r0
    f39a:	ite	ge
    f39c:	addge	r3, r3, r1
    f39e:	addlt	r3, r3, r0
    f3a0:	str	r3, [sp, #16]
    f3a2:	cmp	r2, #0
    f3a4:	bne.w	f908 <_svfprintf_r+0x8b8>
    f3a8:	movs	r3, #0
    f3aa:	str	r3, [sp, #148]	; 0x94
    f3ac:	ldr	r3, [sp, #28]
    f3ae:	cbz	r3, f3b8 <_svfprintf_r+0x368>
    f3b0:	ldr	r1, [sp, #28]
    f3b2:	mov	r0, fp
    f3b4:	bl	e684 <_free_r>
    f3b8:	add.w	sl, sp, #156	; 0x9c
    f3bc:	mov	r4, r9
    f3be:	b.n	f0b4 <_svfprintf_r+0x64>
    f3c0:	str	r3, [sp, #44]	; 0x2c
    f3c2:	ldr	r3, [sp, #32]
    f3c4:	adds	r3, #7
    f3c6:	bic.w	r3, r3, #7
    f3ca:	vldmia	r3!, {d8}
    f3ce:	vabs.f64	d7, d8
    f3d2:	vcmp.f64	d7, d9
    f3d6:	vmrs	APSR_nzcv, fpscr
    f3da:	str	r3, [sp, #32]
    f3dc:	ble.w	fdb2 <_svfprintf_r+0xd62>
    f3e0:	vcmpe.f64	d8, #0.0
    f3e4:	vmrs	APSR_nzcv, fpscr
    f3e8:	bmi.w	1049e <_svfprintf_r+0x144e>
    f3ec:	ldrb.w	r1, [sp, #103]	; 0x67
    f3f0:	ldr	r4, [pc, #684]	; (f6a0 <_svfprintf_r+0x650>)
    f3f2:	ldr	r3, [pc, #688]	; (f6a4 <_svfprintf_r+0x654>)
    f3f4:	bic.w	r8, r8, #128	; 0x80
    f3f8:	ldr	r2, [sp, #44]	; 0x2c
    f3fa:	cmp	r2, #71	; 0x47
    f3fc:	it	gt
    f3fe:	movgt	r4, r3
    f400:	movs	r3, #0
    f402:	strd	r3, r3, [sp, #48]	; 0x30
    f406:	movs	r2, #3
    f408:	str	r3, [sp, #28]
    f40a:	str	r2, [sp, #8]
    f40c:	str	r2, [sp, #20]
    f40e:	str	r3, [sp, #12]
    f410:	str	r3, [sp, #60]	; 0x3c
    f412:	cmp	r1, #0
    f414:	beq.w	f2d6 <_svfprintf_r+0x286>
    f418:	ldr	r3, [sp, #8]
    f41a:	adds	r3, #1
    f41c:	str	r3, [sp, #8]
    f41e:	b.n	f2d6 <_svfprintf_r+0x286>
    f420:	cmp	r3, #67	; 0x43
    f422:	str	r3, [sp, #44]	; 0x2c
    f424:	beq.n	f42e <_svfprintf_r+0x3de>
    f426:	tst.w	r8, #16
    f42a:	beq.w	fee8 <_svfprintf_r+0xe98>
    f42e:	ldr	r5, [sp, #32]
    f430:	movs	r2, #8
    f432:	movs	r1, #0
    f434:	add	r0, sp, #136	; 0x88
    f436:	add	r4, sp, #220	; 0xdc
    f438:	bl	e110 <memset>
    f43c:	add	r3, sp, #136	; 0x88
    f43e:	ldr.w	r2, [r5], #4
    f442:	mov	r1, r4
    f444:	mov	r0, fp
    f446:	bl	11d2c <_wcrtomb_r>
    f44a:	mov	r3, r0
    f44c:	adds	r3, #1
    f44e:	str	r0, [sp, #20]
    f450:	beq.w	10a30 <_svfprintf_r+0x19e0>
    f454:	ldr	r3, [sp, #20]
    f456:	str	r5, [sp, #32]
    f458:	bic.w	r3, r3, r3, asr #31
    f45c:	str	r3, [sp, #8]
    f45e:	movs	r1, #0
    f460:	strd	r1, r1, [sp, #48]	; 0x30
    f464:	strb.w	r1, [sp, #103]	; 0x67
    f468:	str	r1, [sp, #28]
    f46a:	str	r1, [sp, #12]
    f46c:	str	r1, [sp, #60]	; 0x3c
    f46e:	b.n	f2d6 <_svfprintf_r+0x286>
    f470:	str	r3, [sp, #44]	; 0x2c
    f472:	ldr	r3, [sp, #32]
    f474:	mov	r2, r3
    f476:	movs	r3, #0
    f478:	strb.w	r3, [sp, #103]	; 0x67
    f47c:	mov	r3, r2
    f47e:	ldr.w	r4, [r3], #4
    f482:	str	r3, [sp, #32]
    f484:	cmp	r4, #0
    f486:	beq.w	ff1a <_svfprintf_r+0xeca>
    f48a:	ldr	r3, [sp, #44]	; 0x2c
    f48c:	cmp	r3, #83	; 0x53
    f48e:	beq.w	1026a <_svfprintf_r+0x121a>
    f492:	ands.w	r3, r8, #16
    f496:	str	r3, [sp, #48]	; 0x30
    f498:	bne.w	1026a <_svfprintf_r+0x121a>
    f49c:	ldr	r3, [sp, #12]
    f49e:	adds	r5, r3, #1
    f4a0:	beq.w	1066e <_svfprintf_r+0x161e>
    f4a4:	ldr	r1, [sp, #48]	; 0x30
    f4a6:	mov	r2, r3
    f4a8:	mov	r0, r4
    f4aa:	bl	e3e0 <memchr>
    f4ae:	str	r0, [sp, #28]
    f4b0:	cmp	r0, #0
    f4b2:	beq.w	10b06 <_svfprintf_r+0x1ab6>
    f4b6:	ldr	r3, [sp, #28]
    f4b8:	subs	r2, r3, r4
    f4ba:	str	r2, [sp, #20]
    f4bc:	ldr	r3, [sp, #48]	; 0x30
    f4be:	str	r3, [sp, #12]
    f4c0:	bic.w	r2, r2, r2, asr #31
    f4c4:	str	r3, [sp, #60]	; 0x3c
    f4c6:	str	r3, [sp, #52]	; 0x34
    f4c8:	str	r3, [sp, #28]
    f4ca:	movs	r3, #115	; 0x73
    f4cc:	ldrb.w	r1, [sp, #103]	; 0x67
    f4d0:	str	r2, [sp, #8]
    f4d2:	str	r3, [sp, #44]	; 0x2c
    f4d4:	b.n	f412 <_svfprintf_r+0x3c2>
    f4d6:	tst.w	r8, #32
    f4da:	str	r3, [sp, #44]	; 0x2c
    f4dc:	ldr	r3, [sp, #32]
    f4de:	beq.n	f55c <_svfprintf_r+0x50c>
    f4e0:	adds	r3, #7
    f4e2:	bic.w	r3, r3, #7
    f4e6:	mov	r2, r3
    f4e8:	mov	r1, r2
    f4ea:	ldr	r3, [r3, #4]
    f4ec:	ldr.w	r2, [r1], #8
    f4f0:	str	r1, [sp, #32]
    f4f2:	mov	r1, r3
    f4f4:	cmp	r3, #0
    f4f6:	blt.w	fd12 <_svfprintf_r+0xcc2>
    f4fa:	ldr	r3, [sp, #12]
    f4fc:	adds	r3, #1
    f4fe:	beq.w	fa3e <_svfprintf_r+0x9ee>
    f502:	bic.w	r0, r8, #128	; 0x80
    f506:	orrs.w	r3, r2, r1
    f50a:	str	r0, [sp, #8]
    f50c:	bne.w	fa42 <_svfprintf_r+0x9f2>
    f510:	ldr	r3, [sp, #12]
    f512:	cmp	r3, #0
    f514:	bne.w	fa4c <_svfprintf_r+0x9fc>
    f518:	mov	r8, r0
    f51a:	movs	r3, #0
    f51c:	str	r3, [sp, #12]
    f51e:	str	r3, [sp, #20]
    f520:	add	r4, sp, #320	; 0x140
    f522:	b.n	f732 <_svfprintf_r+0x6e2>
    f524:	ldr	r3, [sp, #32]
    f526:	ldr.w	r2, [r3], #4
    f52a:	str	r2, [sp, #24]
    f52c:	cmp	r2, #0
    f52e:	bge.w	fd64 <_svfprintf_r+0xd14>
    f532:	ldr	r2, [sp, #24]
    f534:	str	r3, [sp, #32]
    f536:	negs	r2, r2
    f538:	str	r2, [sp, #24]
    f53a:	ldrb.w	r3, [r9]
    f53e:	orr.w	r8, r8, #4
    f542:	b.n	f108 <_svfprintf_r+0xb8>
    f544:	ldrb.w	r3, [r9]
    f548:	orr.w	r8, r8, #8
    f54c:	b.n	f108 <_svfprintf_r+0xb8>
    f54e:	orr.w	r8, r8, #16
    f552:	tst.w	r8, #32
    f556:	str	r3, [sp, #44]	; 0x2c
    f558:	ldr	r3, [sp, #32]
    f55a:	bne.n	f4e0 <_svfprintf_r+0x490>
    f55c:	tst.w	r8, #16
    f560:	bne.w	fd7a <_svfprintf_r+0xd2a>
    f564:	tst.w	r8, #64	; 0x40
    f568:	beq.w	fd72 <_svfprintf_r+0xd22>
    f56c:	ldrsh.w	r2, [r3], #4
    f570:	str	r3, [sp, #32]
    f572:	asrs	r1, r2, #31
    f574:	mov	r3, r1
    f576:	b.n	f4f4 <_svfprintf_r+0x4a4>
    f578:	ldr	r3, [sp, #32]
    f57a:	orr.w	r2, r8, #2
    f57e:	str	r2, [sp, #8]
    f580:	ldr.w	r2, [r3], #4
    f584:	str	r3, [sp, #32]
    f586:	movw	r3, #30768	; 0x7830
    f58a:	strh.w	r3, [sp, #104]	; 0x68
    f58e:	movs	r0, #120	; 0x78
    f590:	ldr	r3, [pc, #276]	; (f6a8 <_svfprintf_r+0x658>)
    f592:	str	r3, [sp, #68]	; 0x44
    f594:	movs	r1, #0
    f596:	movs	r3, #2
    f598:	str	r0, [sp, #44]	; 0x2c
    f59a:	movs	r0, #0
    f59c:	ldr	r4, [sp, #12]
    f59e:	strb.w	r0, [sp, #103]	; 0x67
    f5a2:	adds	r0, r4, #1
    f5a4:	beq.w	f702 <_svfprintf_r+0x6b2>
    f5a8:	ldr	r0, [sp, #8]
    f5aa:	bic.w	r8, r0, #128	; 0x80
    f5ae:	orrs.w	r0, r2, r1
    f5b2:	bne.w	f6fe <_svfprintf_r+0x6ae>
    f5b6:	cmp	r4, #0
    f5b8:	bne.w	10318 <_svfprintf_r+0x12c8>
    f5bc:	cmp	r3, #0
    f5be:	bne.n	f51a <_svfprintf_r+0x4ca>
    f5c0:	ldr	r3, [sp, #8]
    f5c2:	ands.w	r3, r3, #1
    f5c6:	str	r3, [sp, #20]
    f5c8:	beq.w	fd6e <_svfprintf_r+0xd1e>
    f5cc:	movs	r3, #48	; 0x30
    f5ce:	strb.w	r3, [sp, #319]	; 0x13f
    f5d2:	addw	r4, sp, #319	; 0x13f
    f5d6:	b.n	f732 <_svfprintf_r+0x6e2>
    f5d8:	tst.w	r8, #32
    f5dc:	bne.w	fd88 <_svfprintf_r+0xd38>
    f5e0:	tst.w	r8, #16
    f5e4:	bne.w	10326 <_svfprintf_r+0x12d6>
    f5e8:	tst.w	r8, #64	; 0x40
    f5ec:	bne.w	1051e <_svfprintf_r+0x14ce>
    f5f0:	tst.w	r8, #512	; 0x200
    f5f4:	beq.w	10326 <_svfprintf_r+0x12d6>
    f5f8:	ldr	r3, [sp, #32]
    f5fa:	ldr	r1, [sp, #16]
    f5fc:	ldr.w	r2, [r3], #4
    f600:	str	r3, [sp, #32]
    f602:	strb	r1, [r2, #0]
    f604:	mov	r4, r9
    f606:	b.n	f0b4 <_svfprintf_r+0x64>
    f608:	ldrb.w	r3, [r9]
    f60c:	cmp	r3, #104	; 0x68
    f60e:	ittte	eq
    f610:	ldrbeq.w	r3, [r9, #1]
    f614:	orreq.w	r8, r8, #512	; 0x200
    f618:	addeq.w	r9, r9, #1
    f61c:	orrne.w	r8, r8, #64	; 0x40
    f620:	b.n	f108 <_svfprintf_r+0xb8>
    f622:	ldrb.w	r3, [r9]
    f626:	strb.w	r5, [sp, #103]	; 0x67
    f62a:	b.n	f108 <_svfprintf_r+0xb8>
    f62c:	ldrb.w	r3, [r9]
    f630:	cmp	r3, #108	; 0x6c
    f632:	ittte	eq
    f634:	ldrbeq.w	r3, [r9, #1]
    f638:	orreq.w	r8, r8, #32
    f63c:	addeq.w	r9, r9, #1
    f640:	orrne.w	r8, r8, #16
    f644:	b.n	f108 <_svfprintf_r+0xb8>
    f646:	str	r3, [sp, #44]	; 0x2c
    f648:	orr.w	r8, r8, #16
    f64c:	ands.w	r1, r8, #32
    f650:	beq.w	fcf6 <_svfprintf_r+0xca6>
    f654:	ldr	r3, [sp, #32]
    f656:	adds	r3, #7
    f658:	bic.w	r3, r3, #7
    f65c:	ldr	r1, [r3, #4]
    f65e:	ldr.w	r2, [r3], #8
    f662:	str	r3, [sp, #32]
    f664:	bic.w	r3, r8, #1024	; 0x400
    f668:	str	r3, [sp, #8]
    f66a:	movs	r3, #0
    f66c:	b.n	f59a <_svfprintf_r+0x54a>
    f66e:	str	r3, [sp, #44]	; 0x2c
    f670:	orr.w	r3, r8, #16
    f674:	str	r3, [sp, #8]
    f676:	ldr	r3, [sp, #8]
    f678:	ands.w	r1, r3, #32
    f67c:	beq.w	fcd2 <_svfprintf_r+0xc82>
    f680:	ldr	r3, [sp, #32]
    f682:	adds	r3, #7
    f684:	bic.w	r3, r3, #7
    f688:	ldr	r1, [r3, #4]
    f68a:	ldr.w	r2, [r3], #8
    f68e:	str	r3, [sp, #32]
    f690:	movs	r3, #1
    f692:	b.n	f59a <_svfprintf_r+0x54a>
    f694:	ldrb.w	r3, [r9]
    f698:	orr.w	r8, r8, #128	; 0x80
    f69c:	b.n	f108 <_svfprintf_r+0xb8>
    f69e:	nop
    f6a0:	.word	0x20000e58
    f6a4:	.word	0x20000e5c
    f6a8:	.word	0x20000e68
    f6ac:	mov	r1, r9
    f6ae:	ldrb.w	r3, [r1], #1
    f6b2:	cmp	r3, #42	; 0x2a
    f6b4:	beq.w	10b4a <_svfprintf_r+0x1afa>
    f6b8:	sub.w	r2, r3, #48	; 0x30
    f6bc:	cmp	r2, #9
    f6be:	mov	r9, r1
    f6c0:	it	ls
    f6c2:	movls	r1, #0
    f6c4:	bhi.w	10950 <_svfprintf_r+0x1900>
    f6c8:	ldrb.w	r3, [r9], #1
    f6cc:	add.w	r1, r1, r1, lsl #2
    f6d0:	add.w	r1, r2, r1, lsl #1
    f6d4:	sub.w	r2, r3, #48	; 0x30
    f6d8:	cmp	r2, #9
    f6da:	bls.n	f6c8 <_svfprintf_r+0x678>
    f6dc:	str	r1, [sp, #12]
    f6de:	b.n	f10c <_svfprintf_r+0xbc>
    f6e0:	ldrb.w	r3, [r9]
    f6e4:	orr.w	r8, r8, #1
    f6e8:	b.n	f108 <_svfprintf_r+0xb8>
    f6ea:	ldrb.w	r3, [sp, #103]	; 0x67
    f6ee:	cmp	r3, #0
    f6f0:	bne.w	f212 <_svfprintf_r+0x1c2>
    f6f4:	ldrb.w	r3, [r9]
    f6f8:	strb.w	r6, [sp, #103]	; 0x67
    f6fc:	b.n	f108 <_svfprintf_r+0xb8>
    f6fe:	str.w	r8, [sp, #8]
    f702:	cmp	r3, #1
    f704:	beq.w	fa42 <_svfprintf_r+0x9f2>
    f708:	cmp	r3, #2
    f70a:	add	r4, sp, #320	; 0x140
    f70c:	bne.n	f750 <_svfprintf_r+0x700>
    f70e:	ldr	r0, [sp, #68]	; 0x44
    f710:	and.w	r3, r2, #15
    f714:	lsrs	r2, r2, #4
    f716:	ldrb	r3, [r0, r3]
    f718:	strb.w	r3, [r4, #-1]!
    f71c:	orr.w	r2, r2, r1, lsl #28
    f720:	lsrs	r1, r1, #4
    f722:	orrs.w	r3, r2, r1
    f726:	bne.n	f710 <_svfprintf_r+0x6c0>
    f728:	add	r3, sp, #320	; 0x140
    f72a:	subs	r3, r3, r4
    f72c:	ldr.w	r8, [sp, #8]
    f730:	str	r3, [sp, #20]
    f732:	ldr	r2, [sp, #20]
    f734:	ldr	r0, [sp, #12]
    f736:	ldrb.w	r1, [sp, #103]	; 0x67
    f73a:	cmp	r2, r0
    f73c:	mov.w	r3, #0
    f740:	it	lt
    f742:	movlt	r2, r0
    f744:	strd	r3, r3, [sp, #48]	; 0x30
    f748:	str	r3, [sp, #28]
    f74a:	str	r2, [sp, #8]
    f74c:	str	r3, [sp, #60]	; 0x3c
    f74e:	b.n	f412 <_svfprintf_r+0x3c2>
    f750:	and.w	r3, r2, #7
    f754:	lsrs	r2, r2, #3
    f756:	orr.w	r2, r2, r1, lsl #29
    f75a:	lsrs	r1, r1, #3
    f75c:	adds	r3, #48	; 0x30
    f75e:	orrs.w	r5, r2, r1
    f762:	mov	r0, r4
    f764:	strb.w	r3, [r4, #-1]!
    f768:	bne.n	f750 <_svfprintf_r+0x700>
    f76a:	ldr	r2, [sp, #8]
    f76c:	lsls	r1, r2, #31
    f76e:	bmi.w	fc0c <_svfprintf_r+0xbbc>
    f772:	add	r3, sp, #320	; 0x140
    f774:	subs	r3, r3, r4
    f776:	mov	r8, r2
    f778:	str	r3, [sp, #20]
    f77a:	b.n	f732 <_svfprintf_r+0x6e2>
    f77c:	ldr	r3, [sp, #44]	; 0x2c
    f77e:	cmp	r3, #101	; 0x65
    f780:	ble.w	f92c <_svfprintf_r+0x8dc>
    f784:	vcmp.f64	d8, #0.0
    f788:	vmrs	APSR_nzcv, fpscr
    f78c:	bne.w	fb12 <_svfprintf_r+0xac2>
    f790:	ldr	r3, [sp, #148]	; 0x94
    f792:	ldr	r1, [pc, #744]	; (fa7c <_svfprintf_r+0xa2c>)
    f794:	str.w	r1, [sl]
    f798:	adds	r3, #1
    f79a:	adds	r2, #1
    f79c:	movs	r1, #1
    f79e:	cmp	r3, #7
    f7a0:	str	r2, [sp, #152]	; 0x98
    f7a2:	str	r3, [sp, #148]	; 0x94
    f7a4:	str.w	r1, [sl, #4]
    f7a8:	bgt.w	1024e <_svfprintf_r+0x11fe>
    f7ac:	add.w	sl, sl, #8
    f7b0:	ldr	r3, [sp, #108]	; 0x6c
    f7b2:	ldr	r1, [sp, #56]	; 0x38
    f7b4:	cmp	r3, r1
    f7b6:	bge.w	fd5a <_svfprintf_r+0xd0a>
    f7ba:	ldr	r3, [sp, #64]	; 0x40
    f7bc:	ldr	r1, [sp, #72]	; 0x48
    f7be:	add	r2, r3
    f7c0:	strd	r1, r3, [sl]
    f7c4:	ldr	r3, [sp, #148]	; 0x94
    f7c6:	str	r2, [sp, #152]	; 0x98
    f7c8:	adds	r3, #1
    f7ca:	cmp	r3, #7
    f7cc:	str	r3, [sp, #148]	; 0x94
    f7ce:	bgt.w	ff00 <_svfprintf_r+0xeb0>
    f7d2:	add.w	sl, sl, #8
    f7d6:	ldr	r3, [sp, #56]	; 0x38
    f7d8:	subs	r4, r3, #1
    f7da:	cmp	r4, #0
    f7dc:	ble.w	f380 <_svfprintf_r+0x330>
    f7e0:	cmp	r4, #16
    f7e2:	ldr	r3, [sp, #148]	; 0x94
    f7e4:	ble.w	102c4 <_svfprintf_r+0x1274>
    f7e8:	vmov	r6, s22
    f7ec:	movs	r5, #16
    f7ee:	b.n	f7fc <_svfprintf_r+0x7ac>
    f7f0:	add.w	sl, sl, #8
    f7f4:	subs	r4, #16
    f7f6:	cmp	r4, #16
    f7f8:	ble.w	102c4 <_svfprintf_r+0x1274>
    f7fc:	adds	r3, #1
    f7fe:	ldr	r1, [pc, #640]	; (fa80 <_svfprintf_r+0xa30>)
    f800:	adds	r2, #16
    f802:	cmp	r3, #7
    f804:	strd	r1, r5, [sl]
    f808:	strd	r3, r2, [sp, #148]	; 0x94
    f80c:	ble.n	f7f0 <_svfprintf_r+0x7a0>
    f80e:	add	r2, sp, #144	; 0x90
    f810:	mov	r1, r6
    f812:	mov	r0, fp
    f814:	bl	11db8 <__ssprint_r>
    f818:	cmp	r0, #0
    f81a:	bne.n	f91a <_svfprintf_r+0x8ca>
    f81c:	ldrd	r3, r2, [sp, #148]	; 0x94
    f820:	add.w	sl, sp, #156	; 0x9c
    f824:	b.n	f7f4 <_svfprintf_r+0x7a4>
    f826:	ldr	r3, [sp, #24]
    f828:	ldr	r1, [sp, #8]
    f82a:	subs	r5, r3, r1
    f82c:	cmp	r5, #0
    f82e:	ble.w	f34e <_svfprintf_r+0x2fe>
    f832:	cmp	r5, #16
    f834:	ldr	r3, [sp, #148]	; 0x94
    f836:	ble.n	f87c <_svfprintf_r+0x82c>
    f838:	str	r4, [sp, #36]	; 0x24
    f83a:	movs	r6, #16
    f83c:	vmov	r4, s22
    f840:	b.n	f84c <_svfprintf_r+0x7fc>
    f842:	subs	r5, #16
    f844:	cmp	r5, #16
    f846:	add.w	sl, sl, #8
    f84a:	ble.n	f87a <_svfprintf_r+0x82a>
    f84c:	adds	r3, #1
    f84e:	ldr	r1, [pc, #560]	; (fa80 <_svfprintf_r+0xa30>)
    f850:	adds	r2, #16
    f852:	cmp	r3, #7
    f854:	strd	r1, r6, [sl]
    f858:	strd	r3, r2, [sp, #148]	; 0x94
    f85c:	ble.n	f842 <_svfprintf_r+0x7f2>
    f85e:	add	r2, sp, #144	; 0x90
    f860:	mov	r1, r4
    f862:	mov	r0, fp
    f864:	add.w	sl, sp, #156	; 0x9c
    f868:	bl	11db8 <__ssprint_r>
    f86c:	cmp	r0, #0
    f86e:	bne.n	f91a <_svfprintf_r+0x8ca>
    f870:	subs	r5, #16
    f872:	cmp	r5, #16
    f874:	ldrd	r3, r2, [sp, #148]	; 0x94
    f878:	bgt.n	f84c <_svfprintf_r+0x7fc>
    f87a:	ldr	r4, [sp, #36]	; 0x24
    f87c:	ldr	r1, [pc, #512]	; (fa80 <_svfprintf_r+0xa30>)
    f87e:	str.w	r5, [sl, #4]
    f882:	adds	r3, #1
    f884:	add	r2, r5
    f886:	cmp	r3, #7
    f888:	strd	r3, r2, [sp, #148]	; 0x94
    f88c:	str.w	r1, [sl]
    f890:	bgt.w	102e0 <_svfprintf_r+0x1290>
    f894:	ldr	r3, [sp, #12]
    f896:	ldr	r1, [sp, #20]
    f898:	subs	r5, r3, r1
    f89a:	cmp	r5, #0
    f89c:	add.w	sl, sl, #8
    f8a0:	ble.w	f35a <_svfprintf_r+0x30a>
    f8a4:	cmp	r5, #16
    f8a6:	ldr	r3, [sp, #148]	; 0x94
    f8a8:	ble.n	f8ea <_svfprintf_r+0x89a>
    f8aa:	mov	r1, sl
    f8ac:	movs	r6, #16
    f8ae:	vmov	sl, s22
    f8b2:	b.n	f8be <_svfprintf_r+0x86e>
    f8b4:	subs	r5, #16
    f8b6:	cmp	r5, #16
    f8b8:	add.w	r1, r1, #8
    f8bc:	ble.n	f8e8 <_svfprintf_r+0x898>
    f8be:	adds	r3, #1
    f8c0:	ldr	r0, [pc, #444]	; (fa80 <_svfprintf_r+0xa30>)
    f8c2:	adds	r2, #16
    f8c4:	cmp	r3, #7
    f8c6:	strd	r0, r6, [r1]
    f8ca:	strd	r3, r2, [sp, #148]	; 0x94
    f8ce:	ble.n	f8b4 <_svfprintf_r+0x864>
    f8d0:	add	r2, sp, #144	; 0x90
    f8d2:	mov	r1, sl
    f8d4:	mov	r0, fp
    f8d6:	bl	11db8 <__ssprint_r>
    f8da:	cbnz	r0, f91a <_svfprintf_r+0x8ca>
    f8dc:	subs	r5, #16
    f8de:	cmp	r5, #16
    f8e0:	ldrd	r3, r2, [sp, #148]	; 0x94
    f8e4:	add	r1, sp, #156	; 0x9c
    f8e6:	bgt.n	f8be <_svfprintf_r+0x86e>
    f8e8:	mov	sl, r1
    f8ea:	adds	r3, #1
    f8ec:	ldr	r1, [pc, #400]	; (fa80 <_svfprintf_r+0xa30>)
    f8ee:	str.w	r5, [sl, #4]
    f8f2:	add	r2, r5
    f8f4:	cmp	r3, #7
    f8f6:	strd	r3, r2, [sp, #148]	; 0x94
    f8fa:	str.w	r1, [sl]
    f8fe:	bgt.w	fcb6 <_svfprintf_r+0xc66>
    f902:	add.w	sl, sl, #8
    f906:	b.n	f35a <_svfprintf_r+0x30a>
    f908:	vmov	r1, s22
    f90c:	add	r2, sp, #144	; 0x90
    f90e:	mov	r0, fp
    f910:	bl	11db8 <__ssprint_r>
    f914:	cmp	r0, #0
    f916:	beq.w	f3a8 <_svfprintf_r+0x358>
    f91a:	ldr	r3, [sp, #28]
    f91c:	cmp	r3, #0
    f91e:	beq.w	f266 <_svfprintf_r+0x216>
    f922:	ldr	r1, [sp, #28]
    f924:	mov	r0, fp
    f926:	bl	e684 <_free_r>
    f92a:	b.n	f266 <_svfprintf_r+0x216>
    f92c:	ldr	r3, [sp, #56]	; 0x38
    f92e:	cmp	r3, #1
    f930:	ble.w	fc28 <_svfprintf_r+0xbd8>
    f934:	ldr	r3, [sp, #148]	; 0x94
    f936:	str.w	r4, [sl]
    f93a:	adds	r3, #1
    f93c:	adds	r2, #1
    f93e:	movs	r1, #1
    f940:	cmp	r3, #7
    f942:	str	r2, [sp, #152]	; 0x98
    f944:	str	r3, [sp, #148]	; 0x94
    f946:	str.w	r1, [sl, #4]
    f94a:	bgt.w	fd3e <_svfprintf_r+0xcee>
    f94e:	add.w	sl, sl, #8
    f952:	ldr	r1, [sp, #64]	; 0x40
    f954:	ldr	r0, [sp, #72]	; 0x48
    f956:	adds	r3, #1
    f958:	add	r2, r1
    f95a:	cmp	r3, #7
    f95c:	strd	r0, r1, [sl]
    f960:	strd	r3, r2, [sp, #148]	; 0x94
    f964:	bgt.w	fd22 <_svfprintf_r+0xcd2>
    f968:	add.w	sl, sl, #8
    f96c:	vcmp.f64	d8, #0.0
    f970:	vmrs	APSR_nzcv, fpscr
    f974:	beq.w	fc66 <_svfprintf_r+0xc16>
    f978:	ldr	r1, [sp, #56]	; 0x38
    f97a:	adds	r3, #1
    f97c:	subs	r1, #1
    f97e:	adds	r4, #1
    f980:	add	r2, r1
    f982:	cmp	r3, #7
    f984:	str.w	r4, [sl]
    f988:	str	r3, [sp, #148]	; 0x94
    f98a:	str.w	r1, [sl, #4]
    f98e:	str	r2, [sp, #152]	; 0x98
    f990:	bgt.w	fc4a <_svfprintf_r+0xbfa>
    f994:	add.w	sl, sl, #8
    f998:	ldr	r1, [sp, #80]	; 0x50
    f99a:	str.w	r1, [sl, #4]
    f99e:	adds	r3, #1
    f9a0:	add	r2, r1
    f9a2:	cmp	r3, #7
    f9a4:	add	r1, sp, #120	; 0x78
    f9a6:	strd	r3, r2, [sp, #148]	; 0x94
    f9aa:	str.w	r1, [sl]
    f9ae:	ble.w	f37c <_svfprintf_r+0x32c>
    f9b2:	vmov	r1, s22
    f9b6:	add	r2, sp, #144	; 0x90
    f9b8:	mov	r0, fp
    f9ba:	bl	11db8 <__ssprint_r>
    f9be:	cmp	r0, #0
    f9c0:	bne.n	f91a <_svfprintf_r+0x8ca>
    f9c2:	ldr	r2, [sp, #152]	; 0x98
    f9c4:	add.w	sl, sp, #156	; 0x9c
    f9c8:	b.n	f380 <_svfprintf_r+0x330>
    f9ca:	cmp	r5, #16
    f9cc:	ldrd	r1, r2, [sp, #148]	; 0x94
    f9d0:	ldr	r6, [pc, #176]	; (fa84 <_svfprintf_r+0xa34>)
    f9d2:	ble.n	fa1e <_svfprintf_r+0x9ce>
    f9d4:	str	r4, [sp, #92]	; 0x5c
    f9d6:	movs	r3, #16
    f9d8:	vmov	r4, s22
    f9dc:	mov	r0, r1
    f9de:	b.n	f9ea <_svfprintf_r+0x99a>
    f9e0:	subs	r5, #16
    f9e2:	cmp	r5, #16
    f9e4:	add.w	sl, sl, #8
    f9e8:	ble.n	fa1a <_svfprintf_r+0x9ca>
    f9ea:	adds	r0, #1
    f9ec:	adds	r2, #16
    f9ee:	cmp	r0, #7
    f9f0:	strd	r6, r3, [sl]
    f9f4:	strd	r0, r2, [sp, #148]	; 0x94
    f9f8:	ble.n	f9e0 <_svfprintf_r+0x990>
    f9fa:	add	r2, sp, #144	; 0x90
    f9fc:	mov	r1, r4
    f9fe:	mov	r0, fp
    fa00:	add.w	sl, sp, #156	; 0x9c
    fa04:	bl	11db8 <__ssprint_r>
    fa08:	cmp	r0, #0
    fa0a:	bne.n	f91a <_svfprintf_r+0x8ca>
    fa0c:	subs	r5, #16
    fa0e:	cmp	r5, #16
    fa10:	ldrd	r0, r2, [sp, #148]	; 0x94
    fa14:	mov.w	r3, #16
    fa18:	bgt.n	f9ea <_svfprintf_r+0x99a>
    fa1a:	ldr	r4, [sp, #92]	; 0x5c
    fa1c:	mov	r1, r0
    fa1e:	adds	r1, #1
    fa20:	add	r2, r5
    fa22:	cmp	r1, #7
    fa24:	strd	r1, r2, [sp, #148]	; 0x94
    fa28:	str.w	r6, [sl]
    fa2c:	str.w	r5, [sl, #4]
    fa30:	bgt.w	101ae <_svfprintf_r+0x115e>
    fa34:	ldrb.w	r1, [sp, #103]	; 0x67
    fa38:	add.w	sl, sl, #8
    fa3c:	b.n	f2fa <_svfprintf_r+0x2aa>
    fa3e:	str.w	r8, [sp, #8]
    fa42:	cmp	r2, #10
    fa44:	sbcs.w	r3, r1, #0
    fa48:	bcs.w	100d6 <_svfprintf_r+0x1086>
    fa4c:	adds	r2, #48	; 0x30
    fa4e:	movs	r3, #1
    fa50:	ldr.w	r8, [sp, #8]
    fa54:	strb.w	r2, [sp, #319]	; 0x13f
    fa58:	str	r3, [sp, #20]
    fa5a:	addw	r4, sp, #319	; 0x13f
    fa5e:	b.n	f732 <_svfprintf_r+0x6e2>
    fa60:	vmov	r1, s22
    fa64:	add	r2, sp, #144	; 0x90
    fa66:	mov	r0, fp
    fa68:	bl	11db8 <__ssprint_r>
    fa6c:	cmp	r0, #0
    fa6e:	bne.w	f91a <_svfprintf_r+0x8ca>
    fa72:	ldr	r2, [sp, #152]	; 0x98
    fa74:	add.w	sl, sp, #156	; 0x9c
    fa78:	b.n	f320 <_svfprintf_r+0x2d0>
    fa7a:	nop
    fa7c:	.word	0x20000e98
    fa80:	.word	0x20001304
    fa84:	.word	0x20000e9c
    fa88:	vmov	r1, s22
    fa8c:	add	r2, sp, #144	; 0x90
    fa8e:	mov	r0, fp
    fa90:	bl	11db8 <__ssprint_r>
    fa94:	cmp	r0, #0
    fa96:	bne.w	f91a <_svfprintf_r+0x8ca>
    fa9a:	ldr	r2, [sp, #152]	; 0x98
    fa9c:	add.w	sl, sp, #156	; 0x9c
    faa0:	b.n	f346 <_svfprintf_r+0x2f6>
    faa2:	cmp	r4, #16
    faa4:	ldr	r3, [sp, #148]	; 0x94
    faa6:	ldr	r6, [pc, #760]	; (fda0 <_svfprintf_r+0xd50>)
    faa8:	ble.n	faea <_svfprintf_r+0xa9a>
    faaa:	vmov	r8, s22
    faae:	movs	r5, #16
    fab0:	b.n	fabc <_svfprintf_r+0xa6c>
    fab2:	subs	r4, #16
    fab4:	cmp	r4, #16
    fab6:	add.w	sl, sl, #8
    faba:	ble.n	faea <_svfprintf_r+0xa9a>
    fabc:	adds	r3, #1
    fabe:	adds	r2, #16
    fac0:	cmp	r3, #7
    fac2:	strd	r6, r5, [sl]
    fac6:	strd	r3, r2, [sp, #148]	; 0x94
    faca:	ble.n	fab2 <_svfprintf_r+0xa62>
    facc:	add	r2, sp, #144	; 0x90
    face:	mov	r1, r8
    fad0:	mov	r0, fp
    fad2:	add.w	sl, sp, #156	; 0x9c
    fad6:	bl	11db8 <__ssprint_r>
    fada:	cmp	r0, #0
    fadc:	bne.w	f91a <_svfprintf_r+0x8ca>
    fae0:	subs	r4, #16
    fae2:	cmp	r4, #16
    fae4:	ldrd	r3, r2, [sp, #148]	; 0x94
    fae8:	bgt.n	fabc <_svfprintf_r+0xa6c>
    faea:	adds	r3, #1
    faec:	add	r2, r4
    faee:	cmp	r3, #7
    faf0:	strd	r6, r4, [sl]
    faf4:	strd	r3, r2, [sp, #148]	; 0x94
    faf8:	ble.w	f392 <_svfprintf_r+0x342>
    fafc:	vmov	r1, s22
    fb00:	add	r2, sp, #144	; 0x90
    fb02:	mov	r0, fp
    fb04:	bl	11db8 <__ssprint_r>
    fb08:	cmp	r0, #0
    fb0a:	bne.w	f91a <_svfprintf_r+0x8ca>
    fb0e:	ldr	r2, [sp, #152]	; 0x98
    fb10:	b.n	f392 <_svfprintf_r+0x342>
    fb12:	ldr	r1, [sp, #108]	; 0x6c
    fb14:	cmp	r1, #0
    fb16:	ble.w	101ce <_svfprintf_r+0x117e>
    fb1a:	ldr	r6, [sp, #48]	; 0x30
    fb1c:	ldr	r3, [sp, #56]	; 0x38
    fb1e:	cmp	r6, r3
    fb20:	it	ge
    fb22:	movge	r6, r3
    fb24:	cmp	r6, #0
    fb26:	ble.n	fb40 <_svfprintf_r+0xaf0>
    fb28:	ldr	r3, [sp, #148]	; 0x94
    fb2a:	adds	r3, #1
    fb2c:	add	r2, r6
    fb2e:	cmp	r3, #7
    fb30:	strd	r4, r6, [sl]
    fb34:	str	r2, [sp, #152]	; 0x98
    fb36:	str	r3, [sp, #148]	; 0x94
    fb38:	bgt.w	1084e <_svfprintf_r+0x17fe>
    fb3c:	add.w	sl, sl, #8
    fb40:	ldr	r5, [sp, #48]	; 0x30
    fb42:	cmp	r6, #0
    fb44:	it	ge
    fb46:	subge	r5, r5, r6
    fb48:	cmp	r5, #0
    fb4a:	bgt.w	ff54 <_svfprintf_r+0xf04>
    fb4e:	ldr	r3, [sp, #48]	; 0x30
    fb50:	tst.w	r8, #1024	; 0x400
    fb54:	add	r3, r4
    fb56:	str	r3, [sp, #20]
    fb58:	bne.w	ff9a <_svfprintf_r+0xf4a>
    fb5c:	ldr	r3, [sp, #108]	; 0x6c
    fb5e:	ldr	r1, [sp, #56]	; 0x38
    fb60:	cmp	r3, r1
    fb62:	blt.n	fb6c <_svfprintf_r+0xb1c>
    fb64:	tst.w	r8, #1
    fb68:	beq.w	1050a <_svfprintf_r+0x14ba>
    fb6c:	ldr	r1, [sp, #64]	; 0x40
    fb6e:	ldr	r0, [sp, #72]	; 0x48
    fb70:	add	r2, r1
    fb72:	strd	r0, r1, [sl]
    fb76:	ldr	r1, [sp, #148]	; 0x94
    fb78:	str	r2, [sp, #152]	; 0x98
    fb7a:	adds	r1, #1
    fb7c:	cmp	r1, #7
    fb7e:	str	r1, [sp, #148]	; 0x94
    fb80:	bgt.w	108ce <_svfprintf_r+0x187e>
    fb84:	add.w	sl, sl, #8
    fb88:	ldr	r1, [sp, #56]	; 0x38
    fb8a:	adds	r5, r4, r1
    fb8c:	subs	r4, r1, r3
    fb8e:	ldr	r3, [sp, #20]
    fb90:	subs	r5, r5, r3
    fb92:	cmp	r5, r4
    fb94:	it	ge
    fb96:	movge	r5, r4
    fb98:	cmp	r5, #0
    fb9a:	ble.n	fbb8 <_svfprintf_r+0xb68>
    fb9c:	str.w	r3, [sl]
    fba0:	ldr	r3, [sp, #148]	; 0x94
    fba2:	str.w	r5, [sl, #4]
    fba6:	adds	r3, #1
    fba8:	add	r2, r5
    fbaa:	cmp	r3, #7
    fbac:	str	r2, [sp, #152]	; 0x98
    fbae:	str	r3, [sp, #148]	; 0x94
    fbb0:	bgt.w	1092a <_svfprintf_r+0x18da>
    fbb4:	add.w	sl, sl, #8
    fbb8:	cmp	r5, #0
    fbba:	it	ge
    fbbc:	subge	r4, r4, r5
    fbbe:	cmp	r4, #0
    fbc0:	ble.w	f380 <_svfprintf_r+0x330>
    fbc4:	cmp	r4, #16
    fbc6:	ldr	r3, [sp, #148]	; 0x94
    fbc8:	ble.w	102c4 <_svfprintf_r+0x1274>
    fbcc:	vmov	r6, s22
    fbd0:	movs	r5, #16
    fbd2:	b.n	fbe0 <_svfprintf_r+0xb90>
    fbd4:	add.w	sl, sl, #8
    fbd8:	subs	r4, #16
    fbda:	cmp	r4, #16
    fbdc:	ble.w	102c4 <_svfprintf_r+0x1274>
    fbe0:	adds	r3, #1
    fbe2:	ldr	r1, [pc, #448]	; (fda4 <_svfprintf_r+0xd54>)
    fbe4:	adds	r2, #16
    fbe6:	cmp	r3, #7
    fbe8:	strd	r1, r5, [sl]
    fbec:	strd	r3, r2, [sp, #148]	; 0x94
    fbf0:	ble.n	fbd4 <_svfprintf_r+0xb84>
    fbf2:	add	r2, sp, #144	; 0x90
    fbf4:	mov	r1, r6
    fbf6:	mov	r0, fp
    fbf8:	bl	11db8 <__ssprint_r>
    fbfc:	cmp	r0, #0
    fbfe:	bne.w	f91a <_svfprintf_r+0x8ca>
    fc02:	ldrd	r3, r2, [sp, #148]	; 0x94
    fc06:	add.w	sl, sp, #156	; 0x9c
    fc0a:	b.n	fbd8 <_svfprintf_r+0xb88>
    fc0c:	cmp	r3, #48	; 0x30
    fc0e:	beq.w	f728 <_svfprintf_r+0x6d8>
    fc12:	movs	r3, #48	; 0x30
    fc14:	subs	r0, #2
    fc16:	strb.w	r3, [r4, #-1]
    fc1a:	add	r3, sp, #320	; 0x140
    fc1c:	subs	r3, r3, r0
    fc1e:	ldr.w	r8, [sp, #8]
    fc22:	str	r3, [sp, #20]
    fc24:	mov	r4, r0
    fc26:	b.n	f732 <_svfprintf_r+0x6e2>
    fc28:	tst.w	r8, #1
    fc2c:	bne.w	f934 <_svfprintf_r+0x8e4>
    fc30:	ldr	r3, [sp, #148]	; 0x94
    fc32:	str.w	r4, [sl]
    fc36:	adds	r3, #1
    fc38:	adds	r2, #1
    fc3a:	movs	r1, #1
    fc3c:	cmp	r3, #7
    fc3e:	str	r2, [sp, #152]	; 0x98
    fc40:	str	r3, [sp, #148]	; 0x94
    fc42:	str.w	r1, [sl, #4]
    fc46:	ble.w	f994 <_svfprintf_r+0x944>
    fc4a:	vmov	r1, s22
    fc4e:	add	r2, sp, #144	; 0x90
    fc50:	mov	r0, fp
    fc52:	bl	11db8 <__ssprint_r>
    fc56:	cmp	r0, #0
    fc58:	bne.w	f91a <_svfprintf_r+0x8ca>
    fc5c:	ldrd	r3, r2, [sp, #148]	; 0x94
    fc60:	add.w	sl, sp, #156	; 0x9c
    fc64:	b.n	f998 <_svfprintf_r+0x948>
    fc66:	ldr	r1, [sp, #56]	; 0x38
    fc68:	subs	r4, r1, #1
    fc6a:	cmp	r4, #0
    fc6c:	ble.w	f998 <_svfprintf_r+0x948>
    fc70:	cmp	r4, #16
    fc72:	ble.w	10338 <_svfprintf_r+0x12e8>
    fc76:	vmov	r6, s22
    fc7a:	movs	r5, #16
    fc7c:	b.n	fc8a <_svfprintf_r+0xc3a>
    fc7e:	add.w	sl, sl, #8
    fc82:	subs	r4, #16
    fc84:	cmp	r4, #16
    fc86:	ble.w	10338 <_svfprintf_r+0x12e8>
    fc8a:	adds	r3, #1
    fc8c:	ldr	r1, [pc, #276]	; (fda4 <_svfprintf_r+0xd54>)
    fc8e:	adds	r2, #16
    fc90:	cmp	r3, #7
    fc92:	strd	r1, r5, [sl]
    fc96:	strd	r3, r2, [sp, #148]	; 0x94
    fc9a:	ble.n	fc7e <_svfprintf_r+0xc2e>
    fc9c:	add	r2, sp, #144	; 0x90
    fc9e:	mov	r1, r6
    fca0:	mov	r0, fp
    fca2:	bl	11db8 <__ssprint_r>
    fca6:	cmp	r0, #0
    fca8:	bne.w	f91a <_svfprintf_r+0x8ca>
    fcac:	ldrd	r3, r2, [sp, #148]	; 0x94
    fcb0:	add.w	sl, sp, #156	; 0x9c
    fcb4:	b.n	fc82 <_svfprintf_r+0xc32>
    fcb6:	vmov	r1, s22
    fcba:	add	r2, sp, #144	; 0x90
    fcbc:	mov	r0, fp
    fcbe:	bl	11db8 <__ssprint_r>
    fcc2:	cmp	r0, #0
    fcc4:	bne.w	f91a <_svfprintf_r+0x8ca>
    fcc8:	ldr	r2, [sp, #152]	; 0x98
    fcca:	add.w	sl, sp, #156	; 0x9c
    fcce:	b.w	f35a <_svfprintf_r+0x30a>
    fcd2:	ldr	r3, [sp, #8]
    fcd4:	ands.w	r3, r3, #16
    fcd8:	bne.w	fe5e <_svfprintf_r+0xe0e>
    fcdc:	ldr	r2, [sp, #8]
    fcde:	ands.w	r2, r2, #64	; 0x40
    fce2:	beq.w	103da <_svfprintf_r+0x138a>
    fce6:	ldr	r0, [sp, #32]
    fce8:	ldr.w	r2, [r0], #4
    fcec:	str	r0, [sp, #32]
    fcee:	mov	r1, r3
    fcf0:	uxth	r2, r2
    fcf2:	movs	r3, #1
    fcf4:	b.n	f59a <_svfprintf_r+0x54a>
    fcf6:	ands.w	r3, r8, #16
    fcfa:	bne.n	fda8 <_svfprintf_r+0xd58>
    fcfc:	ands.w	r2, r8, #64	; 0x40
    fd00:	beq.w	103be <_svfprintf_r+0x136e>
    fd04:	ldr	r0, [sp, #32]
    fd06:	ldr.w	r2, [r0], #4
    fd0a:	str	r0, [sp, #32]
    fd0c:	mov	r1, r3
    fd0e:	uxth	r2, r2
    fd10:	b.n	f664 <_svfprintf_r+0x614>
    fd12:	negs	r2, r2
    fd14:	sbc.w	r1, r1, r1, lsl #1
    fd18:	str.w	r8, [sp, #8]
    fd1c:	movs	r0, #45	; 0x2d
    fd1e:	movs	r3, #1
    fd20:	b.n	f59c <_svfprintf_r+0x54c>
    fd22:	vmov	r1, s22
    fd26:	add	r2, sp, #144	; 0x90
    fd28:	mov	r0, fp
    fd2a:	bl	11db8 <__ssprint_r>
    fd2e:	cmp	r0, #0
    fd30:	bne.w	f91a <_svfprintf_r+0x8ca>
    fd34:	ldrd	r3, r2, [sp, #148]	; 0x94
    fd38:	add.w	sl, sp, #156	; 0x9c
    fd3c:	b.n	f96c <_svfprintf_r+0x91c>
    fd3e:	vmov	r1, s22
    fd42:	add	r2, sp, #144	; 0x90
    fd44:	mov	r0, fp
    fd46:	bl	11db8 <__ssprint_r>
    fd4a:	cmp	r0, #0
    fd4c:	bne.w	f91a <_svfprintf_r+0x8ca>
    fd50:	ldrd	r3, r2, [sp, #148]	; 0x94
    fd54:	add.w	sl, sp, #156	; 0x9c
    fd58:	b.n	f952 <_svfprintf_r+0x902>
    fd5a:	tst.w	r8, #1
    fd5e:	beq.w	f380 <_svfprintf_r+0x330>
    fd62:	b.n	f7ba <_svfprintf_r+0x76a>
    fd64:	str	r3, [sp, #32]
    fd66:	ldrb.w	r3, [r9]
    fd6a:	b.w	f108 <_svfprintf_r+0xb8>
    fd6e:	add	r4, sp, #320	; 0x140
    fd70:	b.n	f732 <_svfprintf_r+0x6e2>
    fd72:	tst.w	r8, #512	; 0x200
    fd76:	bne.w	10530 <_svfprintf_r+0x14e0>
    fd7a:	ldr.w	r2, [r3], #4
    fd7e:	str	r3, [sp, #32]
    fd80:	asrs	r1, r2, #31
    fd82:	mov	r3, r1
    fd84:	b.w	f4f4 <_svfprintf_r+0x4a4>
    fd88:	ldr	r3, [sp, #32]
    fd8a:	ldr	r0, [sp, #16]
    fd8c:	ldr.w	r1, [r3], #4
    fd90:	str	r3, [sp, #32]
    fd92:	asrs	r2, r0, #31
    fd94:	strd	r0, r2, [r1]
    fd98:	mov	r4, r9
    fd9a:	b.w	f0b4 <_svfprintf_r+0x64>
    fd9e:	nop
    fda0:	.word	0x20000e9c
    fda4:	.word	0x20001304
    fda8:	ldr	r3, [sp, #32]
    fdaa:	ldr.w	r2, [r3], #4
    fdae:	str	r3, [sp, #32]
    fdb0:	b.n	f664 <_svfprintf_r+0x614>
    fdb2:	vcmp.f64	d8, d8
    fdb6:	vmrs	APSR_nzcv, fpscr
    fdba:	bvs.w	10ae6 <_svfprintf_r+0x1a96>
    fdbe:	ldr	r3, [sp, #44]	; 0x2c
    fdc0:	cmp	r3, #97	; 0x61
    fdc2:	beq.w	1086a <_svfprintf_r+0x181a>
    fdc6:	cmp	r3, #65	; 0x41
    fdc8:	beq.w	1094c <_svfprintf_r+0x18fc>
    fdcc:	ldr	r3, [sp, #12]
    fdce:	adds	r3, #1
    fdd0:	ldr	r3, [sp, #44]	; 0x2c
    fdd2:	bic.w	r5, r3, #32
    fdd6:	beq.w	106da <_svfprintf_r+0x168a>
    fdda:	cmp	r5, #71	; 0x47
    fddc:	bne.n	fde8 <_svfprintf_r+0xd98>
    fdde:	ldr	r3, [sp, #12]
    fde0:	cmp	r3, #0
    fde2:	it	eq
    fde4:	moveq	r3, #1
    fde6:	str	r3, [sp, #12]
    fde8:	vmov	r3, s17
    fdec:	cmp	r3, #0
    fdee:	orr.w	r2, r8, #256	; 0x100
    fdf2:	mov	r6, r8
    fdf4:	blt.w	10a28 <_svfprintf_r+0x19d8>
    fdf8:	vmov.f64	d10, d8
    fdfc:	movs	r3, #0
    fdfe:	mov	r8, r2
    fe00:	str	r3, [sp, #36]	; 0x24
    fe02:	str	r3, [sp, #28]
    fe04:	ldr	r3, [sp, #44]	; 0x2c
    fe06:	subs	r3, #65	; 0x41
    fe08:	cmp	r3, #37	; 0x25
    fe0a:	bhi.w	1053e <_svfprintf_r+0x14ee>
    fe0e:	tbh	[pc, r3, lsl #1]
    fe12:	.short	0x046f
    fe14:	.word	0x03960396
    fe18:	.word	0x04680396
    fe1c:	.word	0x0396046c
    fe20:	.word	0x03960396
    fe24:	.word	0x03960396
    fe28:	.word	0x03960396
    fe2c:	.word	0x03960396
    fe30:	.word	0x03960396
    fe34:	.word	0x03960396
    fe38:	.word	0x03960396
    fe3c:	.word	0x03960396
    fe40:	.word	0x03960396
    fe44:	.word	0x03960396
    fe48:	.word	0x03960396
    fe4c:	.word	0x03960396
    fe50:	.word	0x03960396
    fe54:	.word	0x03960396
    fe58:	.word	0x04680396
    fe5c:	.short	0x046c
    fe5e:	ldr	r3, [sp, #32]
    fe60:	ldr.w	r2, [r3], #4
    fe64:	str	r3, [sp, #32]
    fe66:	movs	r3, #1
    fe68:	b.w	f59a <_svfprintf_r+0x54a>
    fe6c:	ldr	r3, [sp, #76]	; 0x4c
    fe6e:	cmp	r3, #0
    fe70:	beq.w	f212 <_svfprintf_r+0x1c2>
    fe74:	ldr	r3, [sp, #76]	; 0x4c
    fe76:	ldrb	r3, [r3, #0]
    fe78:	cmp	r3, #0
    fe7a:	beq.w	f212 <_svfprintf_r+0x1c2>
    fe7e:	ldrb.w	r3, [r9]
    fe82:	orr.w	r8, r8, #1024	; 0x400
    fe86:	b.w	f108 <_svfprintf_r+0xb8>
    fe8a:	str	r3, [sp, #44]	; 0x2c
    fe8c:	str.w	r8, [sp, #8]
    fe90:	b.w	f676 <_svfprintf_r+0x626>
    fe94:	str	r3, [sp, #44]	; 0x2c
    fe96:	ldr	r3, [pc, #616]	; (10100 <_svfprintf_r+0x10b0>)
    fe98:	str	r3, [sp, #68]	; 0x44
    fe9a:	ands.w	r1, r8, #32
    fe9e:	beq.w	100ac <_svfprintf_r+0x105c>
    fea2:	ldr	r3, [sp, #32]
    fea4:	adds	r3, #7
    fea6:	bic.w	r3, r3, #7
    feaa:	ldr	r1, [r3, #4]
    feac:	ldr.w	r2, [r3], #8
    feb0:	str	r3, [sp, #32]
    feb2:	tst.w	r8, #1
    feb6:	beq.n	fece <_svfprintf_r+0xe7e>
    feb8:	orrs.w	r3, r2, r1
    febc:	beq.n	fece <_svfprintf_r+0xe7e>
    febe:	ldr	r3, [sp, #44]	; 0x2c
    fec0:	strb.w	r3, [sp, #105]	; 0x69
    fec4:	movs	r3, #48	; 0x30
    fec6:	orr.w	r8, r8, #2
    feca:	strb.w	r3, [sp, #104]	; 0x68
    fece:	bic.w	r3, r8, #1024	; 0x400
    fed2:	str	r3, [sp, #8]
    fed4:	movs	r3, #2
    fed6:	b.w	f59a <_svfprintf_r+0x54a>
    feda:	str	r3, [sp, #44]	; 0x2c
    fedc:	b.w	f64c <_svfprintf_r+0x5fc>
    fee0:	str	r3, [sp, #44]	; 0x2c
    fee2:	ldr	r3, [pc, #544]	; (10104 <_svfprintf_r+0x10b4>)
    fee4:	str	r3, [sp, #68]	; 0x44
    fee6:	b.n	fe9a <_svfprintf_r+0xe4a>
    fee8:	ldr	r3, [sp, #32]
    feea:	movs	r1, #1
    feec:	ldr.w	r2, [r3], #4
    fef0:	str	r1, [sp, #8]
    fef2:	strb.w	r2, [sp, #220]	; 0xdc
    fef6:	str	r3, [sp, #32]
    fef8:	str	r1, [sp, #20]
    fefa:	add	r4, sp, #220	; 0xdc
    fefc:	b.w	f45e <_svfprintf_r+0x40e>
    ff00:	vmov	r1, s22
    ff04:	add	r2, sp, #144	; 0x90
    ff06:	mov	r0, fp
    ff08:	bl	11db8 <__ssprint_r>
    ff0c:	cmp	r0, #0
    ff0e:	bne.w	f91a <_svfprintf_r+0x8ca>
    ff12:	ldr	r2, [sp, #152]	; 0x98
    ff14:	add.w	sl, sp, #156	; 0x9c
    ff18:	b.n	f7d6 <_svfprintf_r+0x786>
    ff1a:	ldr	r3, [sp, #12]
    ff1c:	str	r4, [sp, #28]
    ff1e:	cmp	r3, #6
    ff20:	mov	r2, r4
    ff22:	it	cs
    ff24:	movcs	r3, #6
    ff26:	str	r4, [sp, #12]
    ff28:	mov	r1, r4
    ff2a:	strd	r2, r2, [sp, #48]	; 0x30
    ff2e:	ldr	r4, [pc, #472]	; (10108 <_svfprintf_r+0x10b8>)
    ff30:	str	r3, [sp, #8]
    ff32:	str	r3, [sp, #20]
    ff34:	str	r2, [sp, #60]	; 0x3c
    ff36:	b.w	f412 <_svfprintf_r+0x3c2>
    ff3a:	movs	r1, #64	; 0x40
    ff3c:	mov	r0, fp
    ff3e:	bl	d2fc <_malloc_r>
    ff42:	str	r0, [r4, #0]
    ff44:	str	r0, [r4, #16]
    ff46:	cmp	r0, #0
    ff48:	beq.w	10b6a <_svfprintf_r+0x1b1a>
    ff4c:	movs	r3, #64	; 0x40
    ff4e:	str	r3, [r4, #20]
    ff50:	b.w	f090 <_svfprintf_r+0x40>
    ff54:	cmp	r5, #16
    ff56:	ldr	r3, [sp, #148]	; 0x94
    ff58:	ble.w	10416 <_svfprintf_r+0x13c6>
    ff5c:	mov	r1, sl
    ff5e:	movs	r6, #16
    ff60:	vmov	sl, s22
    ff64:	b.n	ff70 <_svfprintf_r+0xf20>
    ff66:	adds	r1, #8
    ff68:	subs	r5, #16
    ff6a:	cmp	r5, #16
    ff6c:	ble.w	10414 <_svfprintf_r+0x13c4>
    ff70:	adds	r3, #1
    ff72:	ldr	r0, [pc, #408]	; (1010c <_svfprintf_r+0x10bc>)
    ff74:	adds	r2, #16
    ff76:	cmp	r3, #7
    ff78:	strd	r0, r6, [r1]
    ff7c:	strd	r3, r2, [sp, #148]	; 0x94
    ff80:	ble.n	ff66 <_svfprintf_r+0xf16>
    ff82:	add	r2, sp, #144	; 0x90
    ff84:	mov	r1, sl
    ff86:	mov	r0, fp
    ff88:	bl	11db8 <__ssprint_r>
    ff8c:	cmp	r0, #0
    ff8e:	bne.w	f91a <_svfprintf_r+0x8ca>
    ff92:	ldrd	r3, r2, [sp, #148]	; 0x94
    ff96:	add	r1, sp, #156	; 0x9c
    ff98:	b.n	ff68 <_svfprintf_r+0xf18>
    ff9a:	ldr	r3, [sp, #56]	; 0x38
    ff9c:	str.w	r9, [sp, #36]	; 0x24
    ffa0:	adds	r3, r4, r3
    ffa2:	str	r3, [sp, #12]
    ffa4:	ldr	r3, [sp, #52]	; 0x34
    ffa6:	str.w	r8, [sp, #40]	; 0x28
    ffaa:	ldr	r6, [sp, #76]	; 0x4c
    ffac:	ldr	r5, [sp, #20]
    ffae:	ldr.w	r9, [sp, #88]	; 0x58
    ffb2:	ldr.w	r8, [sp, #60]	; 0x3c
    ffb6:	str	r4, [sp, #44]	; 0x2c
    ffb8:	vmov	r1, s22
    ffbc:	mov	r0, sl
    ffbe:	cmp	r3, #0
    ffc0:	beq.n	1002c <_svfprintf_r+0xfdc>
    ffc2:	cmp.w	r8, #0
    ffc6:	bne.n	10034 <_svfprintf_r+0xfe4>
    ffc8:	ldr	r3, [sp, #52]	; 0x34
    ffca:	subs	r3, #1
    ffcc:	subs	r6, #1
    ffce:	str	r3, [sp, #52]	; 0x34
    ffd0:	ldr	r3, [sp, #84]	; 0x54
    ffd2:	strd	r3, r9, [r0]
    ffd6:	ldr	r3, [sp, #148]	; 0x94
    ffd8:	adds	r3, #1
    ffda:	add	r2, r9
    ffdc:	cmp	r3, #7
    ffde:	str	r2, [sp, #152]	; 0x98
    ffe0:	str	r3, [sp, #148]	; 0x94
    ffe2:	bgt.n	100be <_svfprintf_r+0x106e>
    ffe4:	adds	r0, #8
    ffe6:	ldr	r3, [sp, #12]
    ffe8:	ldrb.w	ip, [r6]
    ffec:	subs	r3, r3, r5
    ffee:	cmp	r3, ip
    fff0:	it	ge
    fff2:	movge	r3, ip
    fff4:	cmp	r3, #0
    fff6:	mov	sl, r3
    fff8:	ble.n	10014 <_svfprintf_r+0xfc4>
    fffa:	ldr	r4, [sp, #148]	; 0x94
    fffc:	adds	r4, #1
    fffe:	add	r2, r3
   10000:	cmp	r4, #7
   10002:	strd	r5, r3, [r0]
   10006:	str	r2, [sp, #152]	; 0x98
   10008:	str	r4, [sp, #148]	; 0x94
   1000a:	bgt.w	102fc <_svfprintf_r+0x12ac>
   1000e:	ldrb.w	ip, [r6]
   10012:	adds	r0, #8
   10014:	cmp.w	sl, #0
   10018:	ite	ge
   1001a:	subge.w	r4, ip, sl
   1001e:	movlt	r4, ip
   10020:	cmp	r4, #0
   10022:	bgt.n	1003a <_svfprintf_r+0xfea>
   10024:	add	r5, ip
   10026:	ldr	r3, [sp, #52]	; 0x34
   10028:	cmp	r3, #0
   1002a:	bne.n	ffc2 <_svfprintf_r+0xf72>
   1002c:	cmp.w	r8, #0
   10030:	beq.w	1078c <_svfprintf_r+0x173c>
   10034:	add.w	r8, r8, #4294967295
   10038:	b.n	ffd0 <_svfprintf_r+0xf80>
   1003a:	cmp	r4, #16
   1003c:	ldr.w	ip, [sp, #148]	; 0x94
   10040:	ble.n	1008c <_svfprintf_r+0x103c>
   10042:	str	r5, [sp, #20]
   10044:	mov.w	sl, #16
   10048:	mov	r3, ip
   1004a:	mov	r5, r1
   1004c:	b.n	10058 <_svfprintf_r+0x1008>
   1004e:	subs	r4, #16
   10050:	cmp	r4, #16
   10052:	add.w	r0, r0, #8
   10056:	ble.n	10086 <_svfprintf_r+0x1036>
   10058:	adds	r3, #1
   1005a:	ldr	r1, [pc, #176]	; (1010c <_svfprintf_r+0x10bc>)
   1005c:	adds	r2, #16
   1005e:	cmp	r3, #7
   10060:	strd	r1, sl, [r0]
   10064:	strd	r3, r2, [sp, #148]	; 0x94
   10068:	ble.n	1004e <_svfprintf_r+0xffe>
   1006a:	add	r2, sp, #144	; 0x90
   1006c:	mov	r1, r5
   1006e:	mov	r0, fp
   10070:	bl	11db8 <__ssprint_r>
   10074:	cmp	r0, #0
   10076:	bne.w	f91a <_svfprintf_r+0x8ca>
   1007a:	subs	r4, #16
   1007c:	cmp	r4, #16
   1007e:	ldrd	r3, r2, [sp, #148]	; 0x94
   10082:	add	r0, sp, #156	; 0x9c
   10084:	bgt.n	10058 <_svfprintf_r+0x1008>
   10086:	mov	r1, r5
   10088:	ldr	r5, [sp, #20]
   1008a:	mov	ip, r3
   1008c:	add.w	r3, ip, #1
   10090:	add	r2, r4
   10092:	str	r4, [r0, #4]
   10094:	cmp	r3, #7
   10096:	ldr	r4, [pc, #116]	; (1010c <_svfprintf_r+0x10bc>)
   10098:	str	r4, [r0, #0]
   1009a:	strd	r3, r2, [sp, #148]	; 0x94
   1009e:	bgt.w	1082e <_svfprintf_r+0x17de>
   100a2:	ldrb.w	ip, [r6]
   100a6:	adds	r0, #8
   100a8:	add	r5, ip
   100aa:	b.n	10026 <_svfprintf_r+0xfd6>
   100ac:	ands.w	r3, r8, #16
   100b0:	beq.w	10238 <_svfprintf_r+0x11e8>
   100b4:	ldr	r3, [sp, #32]
   100b6:	ldr.w	r2, [r3], #4
   100ba:	str	r3, [sp, #32]
   100bc:	b.n	feb2 <_svfprintf_r+0xe62>
   100be:	add	r2, sp, #144	; 0x90
   100c0:	mov	r0, fp
   100c2:	str	r1, [sp, #20]
   100c4:	bl	11db8 <__ssprint_r>
   100c8:	cmp	r0, #0
   100ca:	bne.w	f91a <_svfprintf_r+0x8ca>
   100ce:	ldr	r2, [sp, #152]	; 0x98
   100d0:	ldr	r1, [sp, #20]
   100d2:	add	r0, sp, #156	; 0x9c
   100d4:	b.n	ffe6 <_svfprintf_r+0xf96>
   100d6:	ldr	r0, [sp, #8]
   100d8:	str.w	sl, [sp, #28]
   100dc:	add	r4, sp, #320	; 0x140
   100de:	and.w	r0, r0, #1024	; 0x400
   100e2:	movs	r5, #0
   100e4:	vmov	s20, fp
   100e8:	ldr	r3, [pc, #36]	; (10110 <_svfprintf_r+0x10c0>)
   100ea:	ldr.w	sl, [sp, #76]	; 0x4c
   100ee:	str.w	r9, [sp, #20]
   100f2:	mov	fp, r4
   100f4:	mov.w	r8, #5
   100f8:	mov	ip, r5
   100fa:	mov	r4, r0
   100fc:	b.n	10120 <_svfprintf_r+0x10d0>
   100fe:	nop
   10100:	.word	0x20000e68
   10104:	.word	0x20000e7c
   10108:	.word	0x20000e90
   1010c:	.word	0x20001304
   10110:	.word	0xcccccccd
   10114:	cmp	r2, #10
   10116:	sbcs.w	r1, r1, #0
   1011a:	bcc.n	1018a <_svfprintf_r+0x113a>
   1011c:	mov	r2, r9
   1011e:	mov	r1, r6
   10120:	adds	r0, r2, r1
   10122:	adc.w	r0, r0, #0
   10126:	umull	r5, r6, r3, r0
   1012a:	bic.w	r5, r6, #3
   1012e:	add.w	r5, r5, r6, lsr #2
   10132:	subs	r0, r0, r5
   10134:	subs	r5, r2, r0
   10136:	mov.w	r6, #3435973836	; 0xcccccccc
   1013a:	sbc.w	lr, r1, #0
   1013e:	mul.w	r6, r6, r5
   10142:	umull	r9, r5, r5, r3
   10146:	mla	r6, r3, lr, r6
   1014a:	and.w	lr, r9, #1
   1014e:	add	r6, r5
   10150:	umull	r5, lr, lr, r8
   10154:	adds	r5, r5, r0
   10156:	mov.w	r9, r9, lsr #1
   1015a:	adds	r5, #48	; 0x30
   1015c:	strb.w	r5, [fp, #-1]
   10160:	orr.w	r9, r9, r6, lsl #31
   10164:	add.w	ip, ip, #1
   10168:	add.w	fp, fp, #4294967295
   1016c:	lsrs	r6, r6, #1
   1016e:	cmp	r4, #0
   10170:	beq.n	10114 <_svfprintf_r+0x10c4>
   10172:	ldrb.w	r0, [sl]
   10176:	cmp	ip, r0
   10178:	bne.n	10114 <_svfprintf_r+0x10c4>
   1017a:	cmp.w	ip, #255	; 0xff
   1017e:	beq.n	10114 <_svfprintf_r+0x10c4>
   10180:	cmp	r2, #10
   10182:	sbcs.w	r1, r1, #0
   10186:	bcs.w	104a8 <_svfprintf_r+0x1458>
   1018a:	mov	r4, fp
   1018c:	add	r3, sp, #320	; 0x140
   1018e:	subs	r3, r3, r4
   10190:	ldr.w	r9, [sp, #20]
   10194:	str.w	sl, [sp, #76]	; 0x4c
   10198:	vmov	fp, s20
   1019c:	ldr.w	sl, [sp, #28]
   101a0:	ldr.w	r8, [sp, #8]
   101a4:	str.w	ip, [sp, #56]	; 0x38
   101a8:	str	r3, [sp, #20]
   101aa:	b.w	f732 <_svfprintf_r+0x6e2>
   101ae:	vmov	r1, s22
   101b2:	add	r2, sp, #144	; 0x90
   101b4:	mov	r0, fp
   101b6:	bl	11db8 <__ssprint_r>
   101ba:	cmp	r0, #0
   101bc:	bne.w	f91a <_svfprintf_r+0x8ca>
   101c0:	ldrb.w	r1, [sp, #103]	; 0x67
   101c4:	ldr	r2, [sp, #152]	; 0x98
   101c6:	add.w	sl, sp, #156	; 0x9c
   101ca:	b.w	f2fa <_svfprintf_r+0x2aa>
   101ce:	ldr	r3, [sp, #148]	; 0x94
   101d0:	ldr	r0, [pc, #760]	; (104cc <_svfprintf_r+0x147c>)
   101d2:	str.w	r0, [sl]
   101d6:	adds	r3, #1
   101d8:	adds	r2, #1
   101da:	movs	r0, #1
   101dc:	cmp	r3, #7
   101de:	str	r2, [sp, #152]	; 0x98
   101e0:	str	r3, [sp, #148]	; 0x94
   101e2:	str.w	r0, [sl, #4]
   101e6:	bgt.w	104d8 <_svfprintf_r+0x1488>
   101ea:	add.w	sl, sl, #8
   101ee:	cmp	r1, #0
   101f0:	bne.w	10352 <_svfprintf_r+0x1302>
   101f4:	ldr	r1, [sp, #56]	; 0x38
   101f6:	and.w	r3, r8, #1
   101fa:	orrs	r3, r1
   101fc:	beq.w	f380 <_svfprintf_r+0x330>
   10200:	ldr	r3, [sp, #64]	; 0x40
   10202:	ldr	r1, [sp, #72]	; 0x48
   10204:	add	r2, r3
   10206:	strd	r1, r3, [sl]
   1020a:	ldr	r3, [sp, #148]	; 0x94
   1020c:	str	r2, [sp, #152]	; 0x98
   1020e:	adds	r3, #1
   10210:	cmp	r3, #7
   10212:	str	r3, [sp, #148]	; 0x94
   10214:	bgt.w	106bc <_svfprintf_r+0x166c>
   10218:	add.w	sl, sl, #8
   1021c:	ldr	r1, [sp, #56]	; 0x38
   1021e:	str.w	r4, [sl]
   10222:	adds	r3, #1
   10224:	add	r2, r1
   10226:	cmp	r3, #7
   10228:	strd	r3, r2, [sp, #148]	; 0x94
   1022c:	str.w	r1, [sl, #4]
   10230:	ble.w	f37c <_svfprintf_r+0x32c>
   10234:	b.w	f9b2 <_svfprintf_r+0x962>
   10238:	ands.w	r2, r8, #64	; 0x40
   1023c:	beq.w	103fa <_svfprintf_r+0x13aa>
   10240:	ldr	r0, [sp, #32]
   10242:	ldr.w	r2, [r0], #4
   10246:	str	r0, [sp, #32]
   10248:	mov	r1, r3
   1024a:	uxth	r2, r2
   1024c:	b.n	feb2 <_svfprintf_r+0xe62>
   1024e:	vmov	r1, s22
   10252:	add	r2, sp, #144	; 0x90
   10254:	mov	r0, fp
   10256:	bl	11db8 <__ssprint_r>
   1025a:	cmp	r0, #0
   1025c:	bne.w	f91a <_svfprintf_r+0x8ca>
   10260:	ldr	r2, [sp, #152]	; 0x98
   10262:	add.w	sl, sp, #156	; 0x9c
   10266:	b.w	f7b0 <_svfprintf_r+0x760>
   1026a:	add	r6, sp, #136	; 0x88
   1026c:	movs	r2, #8
   1026e:	movs	r1, #0
   10270:	mov	r0, r6
   10272:	str	r4, [sp, #116]	; 0x74
   10274:	bl	e110 <memset>
   10278:	ldr	r3, [sp, #12]
   1027a:	adds	r2, r3, #1
   1027c:	beq.w	10436 <_svfprintf_r+0x13e6>
   10280:	movs	r5, #0
   10282:	str.w	r9, [sp, #8]
   10286:	str.w	r8, [sp, #28]
   1028a:	mov	r9, r3
   1028c:	mov	r8, r5
   1028e:	b.n	102aa <_svfprintf_r+0x125a>
   10290:	add	r1, sp, #220	; 0xdc
   10292:	mov	r0, fp
   10294:	bl	11d2c <_wcrtomb_r>
   10298:	adds	r3, r0, #1
   1029a:	add	r0, r8
   1029c:	beq.w	10a30 <_svfprintf_r+0x19e0>
   102a0:	cmp	r0, r9
   102a2:	bgt.n	102b6 <_svfprintf_r+0x1266>
   102a4:	beq.w	10ad8 <_svfprintf_r+0x1a88>
   102a8:	mov	r8, r0
   102aa:	ldr	r2, [sp, #116]	; 0x74
   102ac:	ldr	r2, [r2, r5]
   102ae:	mov	r3, r6
   102b0:	adds	r5, #4
   102b2:	cmp	r2, #0
   102b4:	bne.n	10290 <_svfprintf_r+0x1240>
   102b6:	str.w	r8, [sp, #20]
   102ba:	ldr.w	r9, [sp, #8]
   102be:	ldr.w	r8, [sp, #28]
   102c2:	b.n	10450 <_svfprintf_r+0x1400>
   102c4:	adds	r3, #1
   102c6:	ldr	r1, [pc, #520]	; (104d0 <_svfprintf_r+0x1480>)
   102c8:	str.w	r4, [sl, #4]
   102cc:	add	r2, r4
   102ce:	cmp	r3, #7
   102d0:	str.w	r1, [sl]
   102d4:	strd	r3, r2, [sp, #148]	; 0x94
   102d8:	ble.w	f37c <_svfprintf_r+0x32c>
   102dc:	b.w	f9b2 <_svfprintf_r+0x962>
   102e0:	vmov	r1, s22
   102e4:	add	r2, sp, #144	; 0x90
   102e6:	mov	r0, fp
   102e8:	bl	11db8 <__ssprint_r>
   102ec:	cmp	r0, #0
   102ee:	bne.w	f91a <_svfprintf_r+0x8ca>
   102f2:	ldr	r2, [sp, #152]	; 0x98
   102f4:	add.w	sl, sp, #156	; 0x9c
   102f8:	b.w	f34e <_svfprintf_r+0x2fe>
   102fc:	add	r2, sp, #144	; 0x90
   102fe:	mov	r0, fp
   10300:	str	r1, [sp, #20]
   10302:	bl	11db8 <__ssprint_r>
   10306:	cmp	r0, #0
   10308:	bne.w	f91a <_svfprintf_r+0x8ca>
   1030c:	ldrb.w	ip, [r6]
   10310:	ldr	r2, [sp, #152]	; 0x98
   10312:	ldr	r1, [sp, #20]
   10314:	add	r0, sp, #156	; 0x9c
   10316:	b.n	10014 <_svfprintf_r+0xfc4>
   10318:	cmp	r3, #1
   1031a:	str.w	r8, [sp, #8]
   1031e:	bne.w	f708 <_svfprintf_r+0x6b8>
   10322:	b.w	fa4c <_svfprintf_r+0x9fc>
   10326:	ldr	r3, [sp, #32]
   10328:	ldr	r1, [sp, #16]
   1032a:	ldr.w	r2, [r3], #4
   1032e:	mov	r4, r9
   10330:	str	r1, [r2, #0]
   10332:	str	r3, [sp, #32]
   10334:	b.w	f0b4 <_svfprintf_r+0x64>
   10338:	adds	r3, #1
   1033a:	ldr	r1, [pc, #404]	; (104d0 <_svfprintf_r+0x1480>)
   1033c:	str.w	r4, [sl, #4]
   10340:	add	r2, r4
   10342:	cmp	r3, #7
   10344:	strd	r3, r2, [sp, #148]	; 0x94
   10348:	str.w	r1, [sl]
   1034c:	ble.w	f994 <_svfprintf_r+0x944>
   10350:	b.n	fc4a <_svfprintf_r+0xbfa>
   10352:	ldr	r3, [sp, #64]	; 0x40
   10354:	ldr	r0, [sp, #72]	; 0x48
   10356:	add	r2, r3
   10358:	strd	r0, r3, [sl]
   1035c:	ldr	r3, [sp, #148]	; 0x94
   1035e:	str	r2, [sp, #152]	; 0x98
   10360:	adds	r3, #1
   10362:	cmp	r3, #7
   10364:	str	r3, [sp, #148]	; 0x94
   10366:	bgt.w	106bc <_svfprintf_r+0x166c>
   1036a:	add.w	sl, sl, #8
   1036e:	cmp	r1, #0
   10370:	bge.w	1021c <_svfprintf_r+0x11cc>
   10374:	negs	r5, r1
   10376:	adds	r1, #16
   10378:	bge.w	1099a <_svfprintf_r+0x194a>
   1037c:	vmov	r1, s22
   10380:	movs	r6, #16
   10382:	b.n	10390 <_svfprintf_r+0x1340>
   10384:	add.w	sl, sl, #8
   10388:	subs	r5, #16
   1038a:	cmp	r5, #16
   1038c:	ble.w	1099a <_svfprintf_r+0x194a>
   10390:	adds	r3, #1
   10392:	ldr	r0, [pc, #316]	; (104d0 <_svfprintf_r+0x1480>)
   10394:	adds	r2, #16
   10396:	cmp	r3, #7
   10398:	strd	r0, r6, [sl]
   1039c:	strd	r3, r2, [sp, #148]	; 0x94
   103a0:	ble.n	10384 <_svfprintf_r+0x1334>
   103a2:	add	r2, sp, #144	; 0x90
   103a4:	mov	r0, fp
   103a6:	str	r1, [sp, #12]
   103a8:	bl	11db8 <__ssprint_r>
   103ac:	cmp	r0, #0
   103ae:	bne.w	f91a <_svfprintf_r+0x8ca>
   103b2:	ldrd	r3, r2, [sp, #148]	; 0x94
   103b6:	ldr	r1, [sp, #12]
   103b8:	add.w	sl, sp, #156	; 0x9c
   103bc:	b.n	10388 <_svfprintf_r+0x1338>
   103be:	ldr	r3, [sp, #32]
   103c0:	ands.w	r1, r8, #512	; 0x200
   103c4:	itte	ne
   103c6:	movne	r1, r2
   103c8:	ldrne.w	r2, [r3], #4
   103cc:	ldreq.w	r2, [r3], #4
   103d0:	str	r3, [sp, #32]
   103d2:	it	ne
   103d4:	uxtbne	r2, r2
   103d6:	b.w	f664 <_svfprintf_r+0x614>
   103da:	ldr	r3, [sp, #8]
   103dc:	ands.w	r1, r3, #512	; 0x200
   103e0:	ldr	r3, [sp, #32]
   103e2:	itte	ne
   103e4:	movne	r1, r2
   103e6:	ldrne.w	r2, [r3], #4
   103ea:	ldreq.w	r2, [r3], #4
   103ee:	str	r3, [sp, #32]
   103f0:	it	ne
   103f2:	uxtbne	r2, r2
   103f4:	movs	r3, #1
   103f6:	b.w	f59a <_svfprintf_r+0x54a>
   103fa:	ldr	r3, [sp, #32]
   103fc:	ands.w	r1, r8, #512	; 0x200
   10400:	itte	ne
   10402:	movne	r1, r2
   10404:	ldrne.w	r2, [r3], #4
   10408:	ldreq.w	r2, [r3], #4
   1040c:	str	r3, [sp, #32]
   1040e:	it	ne
   10410:	uxtbne	r2, r2
   10412:	b.n	feb2 <_svfprintf_r+0xe62>
   10414:	mov	sl, r1
   10416:	adds	r3, #1
   10418:	ldr	r1, [pc, #180]	; (104d0 <_svfprintf_r+0x1480>)
   1041a:	str.w	r5, [sl, #4]
   1041e:	add	r2, r5
   10420:	cmp	r3, #7
   10422:	strd	r3, r2, [sp, #148]	; 0x94
   10426:	str.w	r1, [sl]
   1042a:	bgt.w	106a0 <_svfprintf_r+0x1650>
   1042e:	add.w	sl, sl, #8
   10432:	b.w	fb4e <_svfprintf_r+0xafe>
   10436:	movs	r3, #0
   10438:	mov	r1, r3
   1043a:	str	r6, [sp, #0]
   1043c:	add	r2, sp, #116	; 0x74
   1043e:	mov	r0, fp
   10440:	bl	11d78 <_wcsrtombs_r>
   10444:	mov	r3, r0
   10446:	adds	r3, #1
   10448:	str	r0, [sp, #20]
   1044a:	beq.w	10a30 <_svfprintf_r+0x19e0>
   1044e:	str	r4, [sp, #116]	; 0x74
   10450:	ldr	r3, [sp, #20]
   10452:	cmp	r3, #0
   10454:	beq.n	104f4 <_svfprintf_r+0x14a4>
   10456:	cmp	r3, #99	; 0x63
   10458:	bgt.w	1068c <_svfprintf_r+0x163c>
   1045c:	movs	r3, #0
   1045e:	str	r3, [sp, #28]
   10460:	add	r4, sp, #220	; 0xdc
   10462:	movs	r2, #8
   10464:	movs	r1, #0
   10466:	mov	r0, r6
   10468:	bl	e110 <memset>
   1046c:	ldr	r5, [sp, #20]
   1046e:	str	r6, [sp, #0]
   10470:	mov	r3, r5
   10472:	add	r2, sp, #116	; 0x74
   10474:	mov	r1, r4
   10476:	mov	r0, fp
   10478:	bl	11d78 <_wcsrtombs_r>
   1047c:	cmp	r5, r0
   1047e:	bne.w	10b7a <_svfprintf_r+0x1b2a>
   10482:	ldr	r2, [sp, #20]
   10484:	movs	r3, #0
   10486:	strb	r3, [r4, r2]
   10488:	bic.w	r2, r2, r2, asr #31
   1048c:	strd	r3, r3, [sp, #48]	; 0x30
   10490:	ldrb.w	r1, [sp, #103]	; 0x67
   10494:	str	r3, [sp, #12]
   10496:	str	r2, [sp, #8]
   10498:	str	r3, [sp, #60]	; 0x3c
   1049a:	b.w	f412 <_svfprintf_r+0x3c2>
   1049e:	movs	r1, #45	; 0x2d
   104a0:	strb.w	r1, [sp, #103]	; 0x67
   104a4:	b.w	f3f0 <_svfprintf_r+0x3a0>
   104a8:	ldr	r3, [sp, #88]	; 0x58
   104aa:	ldr	r1, [sp, #84]	; 0x54
   104ac:	sub.w	fp, fp, r3
   104b0:	mov	r2, r3
   104b2:	mov	r0, fp
   104b4:	bl	e240 <strncpy>
   104b8:	ldrb.w	r2, [sl, #1]
   104bc:	ldr	r3, [pc, #20]	; (104d4 <_svfprintf_r+0x1484>)
   104be:	cbz	r2, 104c4 <_svfprintf_r+0x1474>
   104c0:	add.w	sl, sl, #1
   104c4:	mov.w	ip, #0
   104c8:	b.n	1011c <_svfprintf_r+0x10cc>
   104ca:	nop
   104cc:	.word	0x20000e98
   104d0:	.word	0x20001304
   104d4:	.word	0xcccccccd
   104d8:	vmov	r1, s22
   104dc:	add	r2, sp, #144	; 0x90
   104de:	mov	r0, fp
   104e0:	bl	11db8 <__ssprint_r>
   104e4:	cmp	r0, #0
   104e6:	bne.w	f91a <_svfprintf_r+0x8ca>
   104ea:	ldr	r1, [sp, #108]	; 0x6c
   104ec:	ldr	r2, [sp, #152]	; 0x98
   104ee:	add.w	sl, sp, #156	; 0x9c
   104f2:	b.n	101ee <_svfprintf_r+0x119e>
   104f4:	ldr	r3, [sp, #20]
   104f6:	ldrb.w	r1, [sp, #103]	; 0x67
   104fa:	str	r3, [sp, #60]	; 0x3c
   104fc:	strd	r3, r3, [sp, #8]
   10500:	strd	r3, r3, [sp, #48]	; 0x30
   10504:	str	r3, [sp, #28]
   10506:	b.w	f412 <_svfprintf_r+0x3c2>
   1050a:	ldr	r1, [sp, #56]	; 0x38
   1050c:	ldr	r0, [sp, #20]
   1050e:	adds	r5, r4, r1
   10510:	subs	r5, r5, r0
   10512:	subs	r4, r1, r3
   10514:	cmp	r5, r4
   10516:	it	ge
   10518:	movge	r5, r4
   1051a:	b.w	fbb8 <_svfprintf_r+0xb68>
   1051e:	ldr	r3, [sp, #32]
   10520:	ldr	r1, [sp, #16]
   10522:	ldr.w	r2, [r3], #4
   10526:	str	r3, [sp, #32]
   10528:	strh	r1, [r2, #0]
   1052a:	mov	r4, r9
   1052c:	b.w	f0b4 <_svfprintf_r+0x64>
   10530:	ldrsb.w	r2, [r3], #4
   10534:	str	r3, [sp, #32]
   10536:	asrs	r1, r2, #31
   10538:	mov	r3, r1
   1053a:	b.w	f4f4 <_svfprintf_r+0x4a4>
   1053e:	ldr	r2, [sp, #12]
   10540:	movs	r1, #2
   10542:	add	r3, sp, #136	; 0x88
   10544:	str	r3, [sp, #4]
   10546:	add	r3, sp, #116	; 0x74
   10548:	str	r3, [sp, #0]
   1054a:	mov	r0, fp
   1054c:	add	r3, sp, #108	; 0x6c
   1054e:	vmov.f64	d0, d10
   10552:	str	r2, [sp, #8]
   10554:	bl	11040 <_dtoa_r>
   10558:	cmp	r5, #71	; 0x47
   1055a:	ldr	r2, [sp, #8]
   1055c:	mov	r4, r0
   1055e:	beq.w	10824 <_svfprintf_r+0x17d4>
   10562:	cmp	r5, #70	; 0x46
   10564:	add	r0, r2
   10566:	bne.n	10574 <_svfprintf_r+0x1524>
   10568:	ldrb	r3, [r4, #0]
   1056a:	cmp	r3, #48	; 0x30
   1056c:	beq.w	10a4e <_svfprintf_r+0x19fe>
   10570:	ldr	r2, [sp, #108]	; 0x6c
   10572:	add	r0, r2
   10574:	vcmp.f64	d10, #0.0
   10578:	vmrs	APSR_nzcv, fpscr
   1057c:	bne.w	1080c <_svfprintf_r+0x17bc>
   10580:	mov	r3, r0
   10582:	subs	r3, r3, r4
   10584:	str	r3, [sp, #56]	; 0x38
   10586:	cmp	r5, #71	; 0x47
   10588:	beq.w	107ac <_svfprintf_r+0x175c>
   1058c:	cmp	r5, #70	; 0x46
   1058e:	beq.w	108fc <_svfprintf_r+0x18ac>
   10592:	ldr	r3, [sp, #108]	; 0x6c
   10594:	str	r3, [sp, #48]	; 0x30
   10596:	ldr	r3, [sp, #48]	; 0x30
   10598:	cmp	r5, #65	; 0x41
   1059a:	add.w	r3, r3, #4294967295
   1059e:	str	r3, [sp, #108]	; 0x6c
   105a0:	beq.w	1096e <_svfprintf_r+0x191e>
   105a4:	ldrb.w	r2, [sp, #44]	; 0x2c
   105a8:	movs	r1, #0
   105aa:	cmp	r3, #0
   105ac:	it	lt
   105ae:	ldrlt	r3, [sp, #48]	; 0x30
   105b0:	strb.w	r2, [sp, #120]	; 0x78
   105b4:	itte	lt
   105b6:	rsblt	r3, r3, #1
   105ba:	movlt	r2, #45	; 0x2d
   105bc:	movge	r2, #43	; 0x2b
   105be:	cmp	r3, #9
   105c0:	strb.w	r2, [sp, #121]	; 0x79
   105c4:	ble.w	1097c <_svfprintf_r+0x192c>
   105c8:	add.w	r5, sp, #143	; 0x8f
   105cc:	ldr.w	ip, [pc, #1052]	; 109ec <_svfprintf_r+0x199c>
   105d0:	mov	r2, r5
   105d2:	mov	r0, r2
   105d4:	smull	r2, r1, ip, r3
   105d8:	asrs	r2, r3, #31
   105da:	rsb	r2, r2, r1, asr #2
   105de:	add.w	r1, r2, r2, lsl #2
   105e2:	sub.w	r1, r3, r1, lsl #1
   105e6:	adds	r1, #48	; 0x30
   105e8:	strb.w	r1, [r0, #-1]
   105ec:	mov	r1, r3
   105ee:	cmp	r1, #99	; 0x63
   105f0:	mov	r3, r2
   105f2:	add.w	r2, r0, #4294967295
   105f6:	bgt.n	105d2 <_svfprintf_r+0x1582>
   105f8:	adds	r3, #48	; 0x30
   105fa:	uxtb	r1, r3
   105fc:	subs	r3, r0, #2
   105fe:	cmp	r5, r3
   10600:	strb.w	r1, [r2, #-1]
   10604:	bls.w	10b1e <_svfprintf_r+0x1ace>
   10608:	mov	r3, r2
   1060a:	add.w	r2, sp, #122	; 0x7a
   1060e:	b.n	10614 <_svfprintf_r+0x15c4>
   10610:	ldrb.w	r1, [r3], #1
   10614:	strb.w	r1, [r2], #1
   10618:	cmp	r5, r3
   1061a:	bne.n	10610 <_svfprintf_r+0x15c0>
   1061c:	add.w	r3, sp, #145	; 0x91
   10620:	add.w	r2, sp, #122	; 0x7a
   10624:	subs	r3, r3, r0
   10626:	add	r3, r2
   10628:	add	r2, sp, #120	; 0x78
   1062a:	subs	r3, r3, r2
   1062c:	str	r3, [sp, #80]	; 0x50
   1062e:	ldr	r3, [sp, #56]	; 0x38
   10630:	ldr	r2, [sp, #80]	; 0x50
   10632:	cmp	r3, #1
   10634:	add	r2, r3
   10636:	str	r2, [sp, #20]
   10638:	ble.w	10a42 <_svfprintf_r+0x19f2>
   1063c:	ldr	r3, [sp, #20]
   1063e:	ldr	r2, [sp, #64]	; 0x40
   10640:	add	r3, r2
   10642:	str	r3, [sp, #20]
   10644:	bic.w	r3, r6, #1024	; 0x400
   10648:	ldr	r2, [sp, #20]
   1064a:	orr.w	r8, r3, #256	; 0x100
   1064e:	movs	r3, #0
   10650:	strd	r3, r3, [sp, #48]	; 0x30
   10654:	bic.w	r2, r2, r2, asr #31
   10658:	str	r3, [sp, #60]	; 0x3c
   1065a:	str	r2, [sp, #8]
   1065c:	ldr	r3, [sp, #36]	; 0x24
   1065e:	cmp	r3, #0
   10660:	bne.w	107c6 <_svfprintf_r+0x1776>
   10664:	ldrb.w	r1, [sp, #103]	; 0x67
   10668:	str	r3, [sp, #12]
   1066a:	b.w	f412 <_svfprintf_r+0x3c2>
   1066e:	mov	r0, r4
   10670:	bl	e480 <strlen>
   10674:	mov	r2, r0
   10676:	str	r0, [sp, #20]
   10678:	b.w	f4bc <_svfprintf_r+0x46c>
   1067c:	vmov	r1, s22
   10680:	add	r2, sp, #144	; 0x90
   10682:	mov	r0, fp
   10684:	bl	11db8 <__ssprint_r>
   10688:	b.w	f266 <_svfprintf_r+0x216>
   1068c:	adds	r1, r3, #1
   1068e:	mov	r0, fp
   10690:	bl	d2fc <_malloc_r>
   10694:	mov	r4, r0
   10696:	cmp	r0, #0
   10698:	beq.w	10a30 <_svfprintf_r+0x19e0>
   1069c:	str	r0, [sp, #28]
   1069e:	b.n	10462 <_svfprintf_r+0x1412>
   106a0:	vmov	r1, s22
   106a4:	add	r2, sp, #144	; 0x90
   106a6:	mov	r0, fp
   106a8:	bl	11db8 <__ssprint_r>
   106ac:	cmp	r0, #0
   106ae:	bne.w	f91a <_svfprintf_r+0x8ca>
   106b2:	ldr	r2, [sp, #152]	; 0x98
   106b4:	add.w	sl, sp, #156	; 0x9c
   106b8:	b.w	fb4e <_svfprintf_r+0xafe>
   106bc:	vmov	r1, s22
   106c0:	add	r2, sp, #144	; 0x90
   106c2:	mov	r0, fp
   106c4:	bl	11db8 <__ssprint_r>
   106c8:	cmp	r0, #0
   106ca:	bne.w	f91a <_svfprintf_r+0x8ca>
   106ce:	ldrd	r3, r2, [sp, #148]	; 0x94
   106d2:	ldr	r1, [sp, #108]	; 0x6c
   106d4:	add.w	sl, sp, #156	; 0x9c
   106d8:	b.n	1036e <_svfprintf_r+0x131e>
   106da:	movs	r3, #6
   106dc:	str	r3, [sp, #12]
   106de:	b.w	fde8 <_svfprintf_r+0xd98>
   106e2:	ldr	r3, [sp, #12]
   106e4:	movs	r1, #2
   106e6:	adds	r2, r3, #1
   106e8:	b.n	10542 <_svfprintf_r+0x14f2>
   106ea:	ldr	r2, [sp, #12]
   106ec:	movs	r1, #3
   106ee:	b.n	10542 <_svfprintf_r+0x14f2>
   106f0:	add	r0, sp, #108	; 0x6c
   106f2:	vmov.f64	d0, d10
   106f6:	bl	10de8 <frexp>
   106fa:	vmov.f64	d7, #64	; 0x3e000000  0.125
   106fe:	vmul.f64	d0, d0, d7
   10702:	vcmp.f64	d0, #0.0
   10706:	vmrs	APSR_nzcv, fpscr
   1070a:	bne.n	10710 <_svfprintf_r+0x16c0>
   1070c:	movs	r3, #1
   1070e:	str	r3, [sp, #108]	; 0x6c
   10710:	ldr	r0, [pc, #716]	; (109e0 <_svfprintf_r+0x1990>)
   10712:	ldr	r3, [sp, #12]
   10714:	vmov.f64	d5, #48	; 0x41800000  16.0
   10718:	subs	r3, #1
   1071a:	mov	r2, r4
   1071c:	b.n	10728 <_svfprintf_r+0x16d8>
   1071e:	vcmp.f64	d0, #0.0
   10722:	vmrs	APSR_nzcv, fpscr
   10726:	beq.n	10750 <_svfprintf_r+0x1700>
   10728:	vmul.f64	d0, d0, d5
   1072c:	vcvt.s32.f64	s15, d0
   10730:	cmp.w	r3, #4294967295
   10734:	vmov	r1, s15
   10738:	ldrb	r1, [r0, r1]
   1073a:	vcvt.f64.s32	d6, s15
   1073e:	mov	ip, r2
   10740:	vsub.f64	d0, d0, d6
   10744:	strb.w	r1, [r2], #1
   10748:	mov	r1, r3
   1074a:	add.w	r3, r3, #4294967295
   1074e:	bne.n	1071e <_svfprintf_r+0x16ce>
   10750:	vmov.f64	d6, #96	; 0x3f000000  0.5
   10754:	vcmpe.f64	d0, d6
   10758:	vmrs	APSR_nzcv, fpscr
   1075c:	bgt.w	109f0 <_svfprintf_r+0x19a0>
   10760:	vcmp.f64	d0, d6
   10764:	vmrs	APSR_nzcv, fpscr
   10768:	bne.n	10774 <_svfprintf_r+0x1724>
   1076a:	vmov	r3, s15
   1076e:	lsls	r3, r3, #31
   10770:	bmi.w	109f0 <_svfprintf_r+0x19a0>
   10774:	cmp	r1, #0
   10776:	blt.n	10786 <_svfprintf_r+0x1736>
   10778:	adds	r3, r1, #1
   1077a:	add	r3, r2
   1077c:	movs	r1, #48	; 0x30
   1077e:	strb.w	r1, [r2], #1
   10782:	cmp	r3, r2
   10784:	bne.n	1077e <_svfprintf_r+0x172e>
   10786:	subs	r3, r2, r4
   10788:	str	r3, [sp, #56]	; 0x38
   1078a:	b.n	10586 <_svfprintf_r+0x1536>
   1078c:	ldr	r4, [sp, #44]	; 0x2c
   1078e:	ldr	r3, [sp, #56]	; 0x38
   10790:	ldr.w	r9, [sp, #36]	; 0x24
   10794:	ldr.w	r8, [sp, #40]	; 0x28
   10798:	str	r6, [sp, #76]	; 0x4c
   1079a:	adds	r3, r4, r3
   1079c:	cmp	r5, r3
   1079e:	mov	r1, r5
   107a0:	it	cs
   107a2:	movcs	r1, r3
   107a4:	mov	sl, r0
   107a6:	str	r1, [sp, #20]
   107a8:	b.w	fb5c <_svfprintf_r+0xb0c>
   107ac:	ldr	r3, [sp, #108]	; 0x6c
   107ae:	str	r3, [sp, #48]	; 0x30
   107b0:	adds	r2, r3, #3
   107b2:	blt.n	107ba <_svfprintf_r+0x176a>
   107b4:	ldr	r2, [sp, #12]
   107b6:	cmp	r3, r2
   107b8:	ble.n	107d4 <_svfprintf_r+0x1784>
   107ba:	ldr	r3, [sp, #44]	; 0x2c
   107bc:	subs	r3, #2
   107be:	str	r3, [sp, #44]	; 0x2c
   107c0:	bic.w	r5, r3, #32
   107c4:	b.n	10596 <_svfprintf_r+0x1546>
   107c6:	movs	r1, #45	; 0x2d
   107c8:	movs	r3, #0
   107ca:	strb.w	r1, [sp, #103]	; 0x67
   107ce:	str	r3, [sp, #12]
   107d0:	b.w	f418 <_svfprintf_r+0x3c8>
   107d4:	ldr	r3, [sp, #48]	; 0x30
   107d6:	ldr	r2, [sp, #56]	; 0x38
   107d8:	cmp	r3, r2
   107da:	blt.w	10958 <_svfprintf_r+0x1908>
   107de:	lsls	r0, r6, #31
   107e0:	ldr	r3, [sp, #48]	; 0x30
   107e2:	bpl.w	10a4a <_svfprintf_r+0x19fa>
   107e6:	ldr	r2, [sp, #64]	; 0x40
   107e8:	add	r3, r2
   107ea:	str	r3, [sp, #20]
   107ec:	lsls	r1, r6, #21
   107ee:	bpl.n	107f8 <_svfprintf_r+0x17a8>
   107f0:	ldr	r3, [sp, #48]	; 0x30
   107f2:	cmp	r3, #0
   107f4:	bgt.w	10a62 <_svfprintf_r+0x1a12>
   107f8:	ldr	r3, [sp, #20]
   107fa:	bic.w	r3, r3, r3, asr #31
   107fe:	str	r3, [sp, #8]
   10800:	movs	r3, #103	; 0x67
   10802:	str	r3, [sp, #44]	; 0x2c
   10804:	movs	r3, #0
   10806:	str	r3, [sp, #60]	; 0x3c
   10808:	str	r3, [sp, #52]	; 0x34
   1080a:	b.n	1065c <_svfprintf_r+0x160c>
   1080c:	ldr	r3, [sp, #136]	; 0x88
   1080e:	cmp	r3, r0
   10810:	bcs.w	10582 <_svfprintf_r+0x1532>
   10814:	movs	r1, #48	; 0x30
   10816:	adds	r2, r3, #1
   10818:	str	r2, [sp, #136]	; 0x88
   1081a:	strb	r1, [r3, #0]
   1081c:	ldr	r3, [sp, #136]	; 0x88
   1081e:	cmp	r0, r3
   10820:	bhi.n	10816 <_svfprintf_r+0x17c6>
   10822:	b.n	10582 <_svfprintf_r+0x1532>
   10824:	lsls	r3, r6, #31
   10826:	bmi.w	10978 <_svfprintf_r+0x1928>
   1082a:	ldr	r3, [sp, #136]	; 0x88
   1082c:	b.n	10582 <_svfprintf_r+0x1532>
   1082e:	add	r2, sp, #144	; 0x90
   10830:	mov	r0, fp
   10832:	str	r1, [sp, #20]
   10834:	bl	11db8 <__ssprint_r>
   10838:	cmp	r0, #0
   1083a:	bne.w	f91a <_svfprintf_r+0x8ca>
   1083e:	ldrb.w	ip, [r6]
   10842:	ldr	r2, [sp, #152]	; 0x98
   10844:	ldr	r1, [sp, #20]
   10846:	add	r0, sp, #156	; 0x9c
   10848:	add	r5, ip
   1084a:	b.w	10026 <_svfprintf_r+0xfd6>
   1084e:	vmov	r1, s22
   10852:	add	r2, sp, #144	; 0x90
   10854:	mov	r0, fp
   10856:	bl	11db8 <__ssprint_r>
   1085a:	cmp	r0, #0
   1085c:	bne.w	f91a <_svfprintf_r+0x8ca>
   10860:	ldr	r2, [sp, #152]	; 0x98
   10862:	add.w	sl, sp, #156	; 0x9c
   10866:	b.w	fb40 <_svfprintf_r+0xaf0>
   1086a:	movs	r3, #120	; 0x78
   1086c:	strb.w	r3, [sp, #105]	; 0x69
   10870:	movs	r3, #48	; 0x30
   10872:	strb.w	r3, [sp, #104]	; 0x68
   10876:	ldr	r3, [sp, #12]
   10878:	cmp	r3, #99	; 0x63
   1087a:	orr.w	r6, r8, #2
   1087e:	bgt.w	109ce <_svfprintf_r+0x197e>
   10882:	movs	r3, #0
   10884:	str	r3, [sp, #28]
   10886:	add	r4, sp, #220	; 0xdc
   10888:	vmov	r3, s17
   1088c:	cmp	r3, #0
   1088e:	orr.w	r8, r8, #258	; 0x102
   10892:	blt.n	108ec <_svfprintf_r+0x189c>
   10894:	vmov.f64	d10, d8
   10898:	ldr	r3, [sp, #44]	; 0x2c
   1089a:	bic.w	r5, r3, #32
   1089e:	movs	r3, #0
   108a0:	str	r3, [sp, #36]	; 0x24
   108a2:	ldr	r3, [sp, #44]	; 0x2c
   108a4:	cmp	r3, #97	; 0x61
   108a6:	bne.w	fe04 <_svfprintf_r+0xdb4>
   108aa:	vmov.f64	d0, d10
   108ae:	add	r0, sp, #108	; 0x6c
   108b0:	bl	10de8 <frexp>
   108b4:	vmov.f64	d7, #64	; 0x3e000000  0.125
   108b8:	vmul.f64	d0, d0, d7
   108bc:	vcmp.f64	d0, #0.0
   108c0:	vmrs	APSR_nzcv, fpscr
   108c4:	bne.n	108ca <_svfprintf_r+0x187a>
   108c6:	movs	r3, #1
   108c8:	str	r3, [sp, #108]	; 0x6c
   108ca:	ldr	r0, [pc, #280]	; (109e4 <_svfprintf_r+0x1994>)
   108cc:	b.n	10712 <_svfprintf_r+0x16c2>
   108ce:	vmov	r1, s22
   108d2:	add	r2, sp, #144	; 0x90
   108d4:	mov	r0, fp
   108d6:	bl	11db8 <__ssprint_r>
   108da:	cmp	r0, #0
   108dc:	bne.w	f91a <_svfprintf_r+0x8ca>
   108e0:	ldr	r3, [sp, #108]	; 0x6c
   108e2:	ldr	r2, [sp, #152]	; 0x98
   108e4:	add.w	sl, sp, #156	; 0x9c
   108e8:	b.w	fb88 <_svfprintf_r+0xb38>
   108ec:	ldr	r3, [sp, #44]	; 0x2c
   108ee:	bic.w	r5, r3, #32
   108f2:	movs	r3, #45	; 0x2d
   108f4:	str	r3, [sp, #36]	; 0x24
   108f6:	vneg.f64	d10, d8
   108fa:	b.n	108a2 <_svfprintf_r+0x1852>
   108fc:	ldr	r2, [sp, #108]	; 0x6c
   108fe:	str	r2, [sp, #48]	; 0x30
   10900:	cmp	r2, #0
   10902:	and.w	r3, r6, #1
   10906:	ble.w	10b24 <_svfprintf_r+0x1ad4>
   1090a:	ldr	r1, [sp, #12]
   1090c:	orrs	r3, r1
   1090e:	bne.w	10ab0 <_svfprintf_r+0x1a60>
   10912:	ldr	r3, [sp, #48]	; 0x30
   10914:	str	r3, [sp, #20]
   10916:	movs	r3, #102	; 0x66
   10918:	str	r3, [sp, #44]	; 0x2c
   1091a:	lsls	r2, r6, #21
   1091c:	bmi.w	10a66 <_svfprintf_r+0x1a16>
   10920:	ldr	r3, [sp, #20]
   10922:	bic.w	r3, r3, r3, asr #31
   10926:	str	r3, [sp, #8]
   10928:	b.n	10804 <_svfprintf_r+0x17b4>
   1092a:	vmov	r1, s22
   1092e:	add	r2, sp, #144	; 0x90
   10930:	mov	r0, fp
   10932:	bl	11db8 <__ssprint_r>
   10936:	cmp	r0, #0
   10938:	bne.w	f91a <_svfprintf_r+0x8ca>
   1093c:	ldr	r4, [sp, #108]	; 0x6c
   1093e:	ldr	r3, [sp, #56]	; 0x38
   10940:	ldr	r2, [sp, #152]	; 0x98
   10942:	subs	r4, r3, r4
   10944:	add.w	sl, sp, #156	; 0x9c
   10948:	b.w	fbb8 <_svfprintf_r+0xb68>
   1094c:	movs	r3, #88	; 0x58
   1094e:	b.n	1086c <_svfprintf_r+0x181c>
   10950:	movs	r2, #0
   10952:	str	r2, [sp, #12]
   10954:	b.w	f10c <_svfprintf_r+0xbc>
   10958:	ldr	r3, [sp, #56]	; 0x38
   1095a:	ldr	r2, [sp, #64]	; 0x40
   1095c:	adds	r2, r3, r2
   1095e:	ldr	r3, [sp, #48]	; 0x30
   10960:	str	r2, [sp, #20]
   10962:	cmp	r3, #0
   10964:	ble.w	10abe <_svfprintf_r+0x1a6e>
   10968:	movs	r3, #103	; 0x67
   1096a:	str	r3, [sp, #44]	; 0x2c
   1096c:	b.n	1091a <_svfprintf_r+0x18ca>
   1096e:	ldr	r2, [sp, #44]	; 0x2c
   10970:	adds	r2, #15
   10972:	uxtb	r2, r2
   10974:	movs	r1, #1
   10976:	b.n	105aa <_svfprintf_r+0x155a>
   10978:	adds	r0, r4, r2
   1097a:	b.n	10574 <_svfprintf_r+0x1524>
   1097c:	cmp	r1, #0
   1097e:	bne.w	10ad2 <_svfprintf_r+0x1a82>
   10982:	movs	r2, #48	; 0x30
   10984:	strb.w	r2, [sp, #122]	; 0x7a
   10988:	add.w	r2, sp, #123	; 0x7b
   1098c:	adds	r3, #48	; 0x30
   1098e:	strb.w	r3, [r2], #1
   10992:	add	r3, sp, #120	; 0x78
   10994:	subs	r3, r2, r3
   10996:	str	r3, [sp, #80]	; 0x50
   10998:	b.n	1062e <_svfprintf_r+0x15de>
   1099a:	adds	r3, #1
   1099c:	ldr	r1, [pc, #72]	; (109e8 <_svfprintf_r+0x1998>)
   1099e:	str.w	r5, [sl, #4]
   109a2:	add	r2, r5
   109a4:	cmp	r3, #7
   109a6:	strd	r3, r2, [sp, #148]	; 0x94
   109aa:	str.w	r1, [sl]
   109ae:	ble.w	10218 <_svfprintf_r+0x11c8>
   109b2:	vmov	r1, s22
   109b6:	add	r2, sp, #144	; 0x90
   109b8:	mov	r0, fp
   109ba:	bl	11db8 <__ssprint_r>
   109be:	cmp	r0, #0
   109c0:	bne.w	f91a <_svfprintf_r+0x8ca>
   109c4:	ldrd	r3, r2, [sp, #148]	; 0x94
   109c8:	add.w	sl, sp, #156	; 0x9c
   109cc:	b.n	1021c <_svfprintf_r+0x11cc>
   109ce:	adds	r1, r3, #1
   109d0:	mov	r0, fp
   109d2:	bl	d2fc <_malloc_r>
   109d6:	mov	r4, r0
   109d8:	cbz	r0, 10a30 <_svfprintf_r+0x19e0>
   109da:	str	r0, [sp, #28]
   109dc:	b.n	10888 <_svfprintf_r+0x1838>
   109de:	nop
   109e0:	.word	0x20000e7c
   109e4:	.word	0x20000e68
   109e8:	.word	0x20001304
   109ec:	.word	0x66666667
   109f0:	str.w	ip, [sp, #136]	; 0x88
   109f4:	ldrb.w	r1, [r2, #-1]
   109f8:	ldrb.w	ip, [r0, #15]
   109fc:	cmp	r1, ip
   109fe:	mov	r3, r2
   10a00:	bne.n	10a18 <_svfprintf_r+0x19c8>
   10a02:	mov.w	lr, #48	; 0x30
   10a06:	strb.w	lr, [r3, #-1]
   10a0a:	ldr	r3, [sp, #136]	; 0x88
   10a0c:	subs	r1, r3, #1
   10a0e:	str	r1, [sp, #136]	; 0x88
   10a10:	ldrb.w	r1, [r3, #-1]
   10a14:	cmp	ip, r1
   10a16:	beq.n	10a06 <_svfprintf_r+0x19b6>
   10a18:	cmp	r1, #57	; 0x39
   10a1a:	itet	ne
   10a1c:	addne	r1, #1
   10a1e:	ldrbeq	r1, [r0, #10]
   10a20:	uxtbne	r1, r1
   10a22:	strb.w	r1, [r3, #-1]
   10a26:	b.n	10786 <_svfprintf_r+0x1736>
   10a28:	movs	r3, #0
   10a2a:	mov	r8, r2
   10a2c:	str	r3, [sp, #28]
   10a2e:	b.n	108f2 <_svfprintf_r+0x18a2>
   10a30:	vmov	r2, s22
   10a34:	ldrsh.w	r3, [r2, #12]
   10a38:	orr.w	r3, r3, #64	; 0x40
   10a3c:	strh	r3, [r2, #12]
   10a3e:	b.w	f26e <_svfprintf_r+0x21e>
   10a42:	lsls	r5, r6, #31
   10a44:	bpl.w	10644 <_svfprintf_r+0x15f4>
   10a48:	b.n	1063c <_svfprintf_r+0x15ec>
   10a4a:	str	r3, [sp, #20]
   10a4c:	b.n	107ec <_svfprintf_r+0x179c>
   10a4e:	vcmp.f64	d10, #0.0
   10a52:	vmrs	APSR_nzcv, fpscr
   10a56:	beq.w	10570 <_svfprintf_r+0x1520>
   10a5a:	rsb	r2, r2, #1
   10a5e:	str	r2, [sp, #108]	; 0x6c
   10a60:	b.n	10572 <_svfprintf_r+0x1522>
   10a62:	movs	r3, #103	; 0x67
   10a64:	str	r3, [sp, #44]	; 0x2c
   10a66:	ldr	r1, [sp, #76]	; 0x4c
   10a68:	ldrb	r3, [r1, #0]
   10a6a:	cmp	r3, #255	; 0xff
   10a6c:	beq.n	10b62 <_svfprintf_r+0x1b12>
   10a6e:	movs	r5, #0
   10a70:	ldr	r2, [sp, #48]	; 0x30
   10a72:	mov	r0, r5
   10a74:	b.n	10a7e <_svfprintf_r+0x1a2e>
   10a76:	adds	r0, #1
   10a78:	adds	r1, #1
   10a7a:	cmp	r3, #255	; 0xff
   10a7c:	beq.n	10a90 <_svfprintf_r+0x1a40>
   10a7e:	cmp	r3, r2
   10a80:	bge.n	10a90 <_svfprintf_r+0x1a40>
   10a82:	subs	r2, r2, r3
   10a84:	ldrb	r3, [r1, #1]
   10a86:	cmp	r3, #0
   10a88:	bne.n	10a76 <_svfprintf_r+0x1a26>
   10a8a:	ldrb	r3, [r1, #0]
   10a8c:	adds	r5, #1
   10a8e:	b.n	10a7a <_svfprintf_r+0x1a2a>
   10a90:	str	r2, [sp, #48]	; 0x30
   10a92:	str	r1, [sp, #76]	; 0x4c
   10a94:	str	r0, [sp, #52]	; 0x34
   10a96:	str	r5, [sp, #60]	; 0x3c
   10a98:	ldr	r2, [sp, #60]	; 0x3c
   10a9a:	ldr	r3, [sp, #52]	; 0x34
   10a9c:	ldr	r1, [sp, #88]	; 0x58
   10a9e:	add	r3, r2
   10aa0:	ldr	r2, [sp, #20]
   10aa2:	mla	r3, r1, r3, r2
   10aa6:	str	r3, [sp, #20]
   10aa8:	bic.w	r3, r3, r3, asr #31
   10aac:	str	r3, [sp, #8]
   10aae:	b.n	1065c <_svfprintf_r+0x160c>
   10ab0:	ldr	r3, [sp, #64]	; 0x40
   10ab2:	adds	r3, r2, r3
   10ab4:	add	r1, r3
   10ab6:	movs	r3, #102	; 0x66
   10ab8:	str	r1, [sp, #20]
   10aba:	str	r3, [sp, #44]	; 0x2c
   10abc:	b.n	1091a <_svfprintf_r+0x18ca>
   10abe:	rsb	r3, r3, #1
   10ac2:	add	r2, r3
   10ac4:	bic.w	r3, r2, r2, asr #31
   10ac8:	str	r3, [sp, #8]
   10aca:	movs	r3, #103	; 0x67
   10acc:	str	r2, [sp, #20]
   10ace:	str	r3, [sp, #44]	; 0x2c
   10ad0:	b.n	10804 <_svfprintf_r+0x17b4>
   10ad2:	add.w	r2, sp, #122	; 0x7a
   10ad6:	b.n	1098c <_svfprintf_r+0x193c>
   10ad8:	ldr	r3, [sp, #12]
   10ada:	ldr.w	r9, [sp, #8]
   10ade:	ldr.w	r8, [sp, #28]
   10ae2:	str	r3, [sp, #20]
   10ae4:	b.n	10450 <_svfprintf_r+0x1400>
   10ae6:	vmov	r3, s17
   10aea:	cmp	r3, #0
   10aec:	ite	lt
   10aee:	movlt	r1, #45	; 0x2d
   10af0:	ldrbge.w	r1, [sp, #103]	; 0x67
   10af4:	ldr	r4, [pc, #148]	; (10b8c <_svfprintf_r+0x1b3c>)
   10af6:	ldr	r3, [pc, #152]	; (10b90 <_svfprintf_r+0x1b40>)
   10af8:	it	lt
   10afa:	strblt.w	r1, [sp, #103]	; 0x67
   10afe:	bic.w	r8, r8, #128	; 0x80
   10b02:	b.w	f3f8 <_svfprintf_r+0x3a8>
   10b06:	ldr	r3, [sp, #12]
   10b08:	str	r3, [sp, #8]
   10b0a:	str	r3, [sp, #20]
   10b0c:	movs	r3, #115	; 0x73
   10b0e:	ldrb.w	r1, [sp, #103]	; 0x67
   10b12:	str	r0, [sp, #12]
   10b14:	str	r0, [sp, #60]	; 0x3c
   10b16:	str	r0, [sp, #52]	; 0x34
   10b18:	str	r3, [sp, #44]	; 0x2c
   10b1a:	b.w	f412 <_svfprintf_r+0x3c2>
   10b1e:	movs	r3, #2
   10b20:	str	r3, [sp, #80]	; 0x50
   10b22:	b.n	1062e <_svfprintf_r+0x15de>
   10b24:	ldr	r2, [sp, #12]
   10b26:	orrs	r3, r2
   10b28:	bne.n	10b36 <_svfprintf_r+0x1ae6>
   10b2a:	movs	r3, #1
   10b2c:	movs	r2, #102	; 0x66
   10b2e:	str	r3, [sp, #8]
   10b30:	str	r2, [sp, #44]	; 0x2c
   10b32:	str	r3, [sp, #20]
   10b34:	b.n	10804 <_svfprintf_r+0x17b4>
   10b36:	ldr	r3, [sp, #64]	; 0x40
   10b38:	adds	r3, #1
   10b3a:	add	r2, r3
   10b3c:	bic.w	r3, r2, r2, asr #31
   10b40:	str	r3, [sp, #8]
   10b42:	movs	r3, #102	; 0x66
   10b44:	str	r2, [sp, #20]
   10b46:	str	r3, [sp, #44]	; 0x2c
   10b48:	b.n	10804 <_svfprintf_r+0x17b4>
   10b4a:	ldr	r2, [sp, #32]
   10b4c:	ldrb.w	r3, [r9, #1]
   10b50:	mov	r9, r1
   10b52:	ldr.w	r1, [r2], #4
   10b56:	str	r2, [sp, #32]
   10b58:	orr.w	r1, r1, r1, asr #31
   10b5c:	str	r1, [sp, #12]
   10b5e:	b.w	f108 <_svfprintf_r+0xb8>
   10b62:	movs	r3, #0
   10b64:	str	r3, [sp, #60]	; 0x3c
   10b66:	str	r3, [sp, #52]	; 0x34
   10b68:	b.n	10a98 <_svfprintf_r+0x1a48>
   10b6a:	movs	r3, #12
   10b6c:	str.w	r3, [fp]
   10b70:	mov.w	r3, #4294967295
   10b74:	str	r3, [sp, #16]
   10b76:	b.w	f27c <_svfprintf_r+0x22c>
   10b7a:	vmov	r2, s22
   10b7e:	ldrh	r3, [r2, #12]
   10b80:	orr.w	r3, r3, #64	; 0x40
   10b84:	strh	r3, [r2, #12]
   10b86:	b.w	f91a <_svfprintf_r+0x8ca>
   10b8a:	nop
   10b8c:	.word	0x20000e60
   10b90:	.word	0x20000e64

00010b94 <_fclose_r>:
   10b94:	push	{r4, r5, r6, lr}
   10b96:	cmp	r1, #0
   10b98:	beq.n	10c32 <_fclose_r+0x9e>
   10b9a:	mov	r6, r0
   10b9c:	mov	r4, r1
   10b9e:	cbz	r0, 10ba6 <_fclose_r+0x12>
   10ba0:	ldr	r3, [r0, #52]	; 0x34
   10ba2:	cmp	r3, #0
   10ba4:	beq.n	10c38 <_fclose_r+0xa4>
   10ba6:	ldr	r3, [r4, #100]	; 0x64
   10ba8:	lsls	r0, r3, #31
   10baa:	bpl.n	10c16 <_fclose_r+0x82>
   10bac:	ldrsh.w	r3, [r4, #12]
   10bb0:	cmp	r3, #0
   10bb2:	beq.n	10c32 <_fclose_r+0x9e>
   10bb4:	mov	r1, r4
   10bb6:	mov	r0, r6
   10bb8:	bl	10c5c <__sflush_r>
   10bbc:	ldr	r3, [r4, #44]	; 0x2c
   10bbe:	mov	r5, r0
   10bc0:	cbz	r3, 10bd0 <_fclose_r+0x3c>
   10bc2:	ldr	r1, [r4, #28]
   10bc4:	mov	r0, r6
   10bc6:	blx	r3
   10bc8:	cmp	r0, #0
   10bca:	it	lt
   10bcc:	movlt.w	r5, #4294967295
   10bd0:	ldrh	r3, [r4, #12]
   10bd2:	lsls	r2, r3, #24
   10bd4:	bmi.n	10c50 <_fclose_r+0xbc>
   10bd6:	ldr	r1, [r4, #48]	; 0x30
   10bd8:	cbz	r1, 10bec <_fclose_r+0x58>
   10bda:	add.w	r3, r4, #64	; 0x40
   10bde:	cmp	r1, r3
   10be0:	beq.n	10be8 <_fclose_r+0x54>
   10be2:	mov	r0, r6
   10be4:	bl	e684 <_free_r>
   10be8:	movs	r3, #0
   10bea:	str	r3, [r4, #48]	; 0x30
   10bec:	ldr	r1, [r4, #68]	; 0x44
   10bee:	cbz	r1, 10bfa <_fclose_r+0x66>
   10bf0:	mov	r0, r6
   10bf2:	bl	e684 <_free_r>
   10bf6:	movs	r3, #0
   10bf8:	str	r3, [r4, #68]	; 0x44
   10bfa:	bl	ddc0 <__sfp_lock_acquire>
   10bfe:	ldr	r3, [r4, #100]	; 0x64
   10c00:	movs	r2, #0
   10c02:	lsls	r3, r3, #31
   10c04:	strh	r2, [r4, #12]
   10c06:	bpl.n	10c48 <_fclose_r+0xb4>
   10c08:	ldr	r0, [r4, #88]	; 0x58
   10c0a:	bl	e3d4 <__retarget_lock_close_recursive>
   10c0e:	bl	ddcc <__sfp_lock_release>
   10c12:	mov	r0, r5
   10c14:	pop	{r4, r5, r6, pc}
   10c16:	ldrh	r3, [r4, #12]
   10c18:	lsls	r1, r3, #22
   10c1a:	bmi.n	10bb4 <_fclose_r+0x20>
   10c1c:	ldr	r0, [r4, #88]	; 0x58
   10c1e:	bl	e3d8 <__retarget_lock_acquire_recursive>
   10c22:	ldrsh.w	r3, [r4, #12]
   10c26:	cmp	r3, #0
   10c28:	bne.n	10bb4 <_fclose_r+0x20>
   10c2a:	ldr	r5, [r4, #100]	; 0x64
   10c2c:	ands.w	r5, r5, #1
   10c30:	beq.n	10c3e <_fclose_r+0xaa>
   10c32:	movs	r5, #0
   10c34:	mov	r0, r5
   10c36:	pop	{r4, r5, r6, pc}
   10c38:	bl	dd84 <__sinit>
   10c3c:	b.n	10ba6 <_fclose_r+0x12>
   10c3e:	ldr	r0, [r4, #88]	; 0x58
   10c40:	bl	e3dc <__retarget_lock_release_recursive>
   10c44:	mov	r0, r5
   10c46:	pop	{r4, r5, r6, pc}
   10c48:	ldr	r0, [r4, #88]	; 0x58
   10c4a:	bl	e3dc <__retarget_lock_release_recursive>
   10c4e:	b.n	10c08 <_fclose_r+0x74>
   10c50:	ldr	r1, [r4, #16]
   10c52:	mov	r0, r6
   10c54:	bl	e684 <_free_r>
   10c58:	b.n	10bd6 <_fclose_r+0x42>
   10c5a:	nop

00010c5c <__sflush_r>:
   10c5c:	ldrsh.w	r2, [r1, #12]
   10c60:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10c64:	mov	r4, r1
   10c66:	lsls	r1, r2, #28
   10c68:	mov	r8, r0
   10c6a:	bmi.n	10cfc <__sflush_r+0xa0>
   10c6c:	ldr	r3, [r4, #4]
   10c6e:	orr.w	r2, r2, #2048	; 0x800
   10c72:	cmp	r3, #0
   10c74:	strh	r2, [r4, #12]
   10c76:	ble.n	10d36 <__sflush_r+0xda>
   10c78:	ldr	r5, [r4, #40]	; 0x28
   10c7a:	cmp	r5, #0
   10c7c:	beq.n	10d30 <__sflush_r+0xd4>
   10c7e:	movs	r3, #0
   10c80:	ldr.w	r6, [r8]
   10c84:	str.w	r3, [r8]
   10c88:	uxth	r3, r2
   10c8a:	ands.w	r2, r2, #4096	; 0x1000
   10c8e:	bne.n	10d3e <__sflush_r+0xe2>
   10c90:	movs	r3, #1
   10c92:	ldr	r1, [r4, #28]
   10c94:	mov	r0, r8
   10c96:	blx	r5
   10c98:	adds	r3, r0, #1
   10c9a:	beq.n	10d6c <__sflush_r+0x110>
   10c9c:	ldrh	r3, [r4, #12]
   10c9e:	ldr	r5, [r4, #40]	; 0x28
   10ca0:	lsls	r7, r3, #29
   10ca2:	bpl.n	10cb0 <__sflush_r+0x54>
   10ca4:	ldr	r3, [r4, #4]
   10ca6:	subs	r0, r0, r3
   10ca8:	ldr	r3, [r4, #48]	; 0x30
   10caa:	cbz	r3, 10cb0 <__sflush_r+0x54>
   10cac:	ldr	r3, [r4, #60]	; 0x3c
   10cae:	subs	r0, r0, r3
   10cb0:	ldr	r1, [r4, #28]
   10cb2:	mov	r2, r0
   10cb4:	movs	r3, #0
   10cb6:	mov	r0, r8
   10cb8:	blx	r5
   10cba:	adds	r1, r0, #1
   10cbc:	bne.n	10d42 <__sflush_r+0xe6>
   10cbe:	ldr.w	r3, [r8]
   10cc2:	cmp	r3, #0
   10cc4:	beq.n	10d42 <__sflush_r+0xe6>
   10cc6:	cmp	r3, #29
   10cc8:	beq.n	10cce <__sflush_r+0x72>
   10cca:	cmp	r3, #22
   10ccc:	bne.n	10d7c <__sflush_r+0x120>
   10cce:	ldrh	r3, [r4, #12]
   10cd0:	ldr	r2, [r4, #16]
   10cd2:	str	r2, [r4, #0]
   10cd4:	bic.w	r3, r3, #2048	; 0x800
   10cd8:	movs	r1, #0
   10cda:	str	r1, [r4, #4]
   10cdc:	strh	r3, [r4, #12]
   10cde:	ldr	r1, [r4, #48]	; 0x30
   10ce0:	str.w	r6, [r8]
   10ce4:	cbz	r1, 10d30 <__sflush_r+0xd4>
   10ce6:	add.w	r3, r4, #64	; 0x40
   10cea:	cmp	r1, r3
   10cec:	beq.n	10cf4 <__sflush_r+0x98>
   10cee:	mov	r0, r8
   10cf0:	bl	e684 <_free_r>
   10cf4:	movs	r0, #0
   10cf6:	str	r0, [r4, #48]	; 0x30
   10cf8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10cfc:	ldr	r6, [r4, #16]
   10cfe:	cbz	r6, 10d30 <__sflush_r+0xd4>
   10d00:	uxth	r3, r2
   10d02:	ldr	r5, [r4, #0]
   10d04:	str	r6, [r4, #0]
   10d06:	lsls	r2, r3, #30
   10d08:	ite	eq
   10d0a:	ldreq	r3, [r4, #20]
   10d0c:	movne	r3, #0
   10d0e:	subs	r5, r5, r6
   10d10:	str	r3, [r4, #8]
   10d12:	b.n	10d2c <__sflush_r+0xd0>
   10d14:	mov	r3, r5
   10d16:	mov	r2, r6
   10d18:	ldr	r1, [r4, #28]
   10d1a:	ldr	r7, [r4, #36]	; 0x24
   10d1c:	mov	r0, r8
   10d1e:	blx	r7
   10d20:	subs.w	ip, r0, #0
   10d24:	sub.w	r5, r5, ip
   10d28:	add	r6, ip
   10d2a:	ble.n	10d5c <__sflush_r+0x100>
   10d2c:	cmp	r5, #0
   10d2e:	bgt.n	10d14 <__sflush_r+0xb8>
   10d30:	movs	r0, #0
   10d32:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10d36:	ldr	r3, [r4, #60]	; 0x3c
   10d38:	cmp	r3, #0
   10d3a:	bgt.n	10c78 <__sflush_r+0x1c>
   10d3c:	b.n	10d30 <__sflush_r+0xd4>
   10d3e:	ldr	r0, [r4, #80]	; 0x50
   10d40:	b.n	10ca0 <__sflush_r+0x44>
   10d42:	ldrsh.w	r3, [r4, #12]
   10d46:	ldr	r2, [r4, #16]
   10d48:	str	r2, [r4, #0]
   10d4a:	bic.w	r3, r3, #2048	; 0x800
   10d4e:	strh	r3, [r4, #12]
   10d50:	movs	r2, #0
   10d52:	lsls	r3, r3, #19
   10d54:	str	r2, [r4, #4]
   10d56:	bpl.n	10cde <__sflush_r+0x82>
   10d58:	str	r0, [r4, #80]	; 0x50
   10d5a:	b.n	10cde <__sflush_r+0x82>
   10d5c:	ldrh	r3, [r4, #12]
   10d5e:	orr.w	r3, r3, #64	; 0x40
   10d62:	mov.w	r0, #4294967295
   10d66:	strh	r3, [r4, #12]
   10d68:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10d6c:	ldr.w	r3, [r8]
   10d70:	cmp	r3, #0
   10d72:	beq.n	10c9c <__sflush_r+0x40>
   10d74:	cmp	r3, #29
   10d76:	beq.n	10d86 <__sflush_r+0x12a>
   10d78:	cmp	r3, #22
   10d7a:	beq.n	10d86 <__sflush_r+0x12a>
   10d7c:	ldrh	r3, [r4, #12]
   10d7e:	orr.w	r3, r3, #64	; 0x40
   10d82:	strh	r3, [r4, #12]
   10d84:	b.n	10d32 <__sflush_r+0xd6>
   10d86:	str.w	r6, [r8]
   10d8a:	b.n	10d30 <__sflush_r+0xd4>

00010d8c <_fflush_r>:
   10d8c:	push	{r3, r4, r5, lr}
   10d8e:	mov	r4, r1
   10d90:	mov	r5, r0
   10d92:	cbz	r0, 10d98 <_fflush_r+0xc>
   10d94:	ldr	r3, [r0, #52]	; 0x34
   10d96:	cbz	r3, 10dda <_fflush_r+0x4e>
   10d98:	ldrsh.w	r0, [r4, #12]
   10d9c:	cbz	r0, 10dc2 <_fflush_r+0x36>
   10d9e:	ldr	r3, [r4, #100]	; 0x64
   10da0:	lsls	r3, r3, #31
   10da2:	bmi.n	10da8 <_fflush_r+0x1c>
   10da4:	lsls	r1, r0, #22
   10da6:	bpl.n	10dc8 <_fflush_r+0x3c>
   10da8:	mov	r0, r5
   10daa:	mov	r1, r4
   10dac:	bl	10c5c <__sflush_r>
   10db0:	ldr	r3, [r4, #100]	; 0x64
   10db2:	lsls	r2, r3, #31
   10db4:	mov	r5, r0
   10db6:	bmi.n	10dbe <_fflush_r+0x32>
   10db8:	ldrh	r3, [r4, #12]
   10dba:	lsls	r3, r3, #22
   10dbc:	bpl.n	10dd0 <_fflush_r+0x44>
   10dbe:	mov	r0, r5
   10dc0:	pop	{r3, r4, r5, pc}
   10dc2:	mov	r5, r0
   10dc4:	mov	r0, r5
   10dc6:	pop	{r3, r4, r5, pc}
   10dc8:	ldr	r0, [r4, #88]	; 0x58
   10dca:	bl	e3d8 <__retarget_lock_acquire_recursive>
   10dce:	b.n	10da8 <_fflush_r+0x1c>
   10dd0:	ldr	r0, [r4, #88]	; 0x58
   10dd2:	bl	e3dc <__retarget_lock_release_recursive>
   10dd6:	mov	r0, r5
   10dd8:	pop	{r3, r4, r5, pc}
   10dda:	bl	dd84 <__sinit>
   10dde:	b.n	10d98 <_fflush_r+0xc>

00010de0 <_localeconv_r>:
   10de0:	ldr	r0, [pc, #0]	; (10de4 <_localeconv_r+0x4>)
   10de2:	bx	lr
   10de4:	.word	0x2000157c

00010de8 <frexp>:
   10de8:	push	{r4, r5}
   10dea:	sub	sp, #8
   10dec:	vstr	d0, [sp]
   10df0:	ldr	r2, [sp, #4]
   10df2:	ldr	r4, [pc, #100]	; (10e58 <frexp+0x70>)
   10df4:	bic.w	r3, r2, #2147483648	; 0x80000000
   10df8:	movs	r1, #0
   10dfa:	cmp	r3, r4
   10dfc:	str	r1, [r0, #0]
   10dfe:	bgt.n	10e44 <frexp+0x5c>
   10e00:	ldr	r4, [sp, #0]
   10e02:	orrs	r4, r3
   10e04:	beq.n	10e44 <frexp+0x5c>
   10e06:	ldr	r4, [pc, #84]	; (10e5c <frexp+0x74>)
   10e08:	ands	r4, r2
   10e0a:	cbnz	r4, 10e22 <frexp+0x3a>
   10e0c:	vldr	d7, [pc, #64]	; 10e50 <frexp+0x68>
   10e10:	vmul.f64	d7, d0, d7
   10e14:	vstr	d7, [sp]
   10e18:	ldr	r2, [sp, #4]
   10e1a:	mvn.w	r1, #53	; 0x35
   10e1e:	bic.w	r3, r2, #2147483648	; 0x80000000
   10e22:	bic.w	r2, r2, #2139095040	; 0x7f800000
   10e26:	ldrd	r4, r5, [sp]
   10e2a:	bic.w	r2, r2, #7340032	; 0x700000
   10e2e:	orr.w	r5, r2, #1069547520	; 0x3fc00000
   10e32:	asrs	r3, r3, #20
   10e34:	orr.w	r5, r5, #2097152	; 0x200000
   10e38:	subw	r3, r3, #1022	; 0x3fe
   10e3c:	strd	r4, r5, [sp]
   10e40:	add	r3, r1
   10e42:	str	r3, [r0, #0]
   10e44:	vldr	d0, [sp]
   10e48:	add	sp, #8
   10e4a:	pop	{r4, r5}
   10e4c:	bx	lr
   10e4e:	nop
   10e50:	.word	0x00000000
   10e54:	.word	0x43500000
   10e58:	.word	0x7fefffff
   10e5c:	.word	0x7ff00000

00010e60 <__assert_func>:
   10e60:	push	{lr}
   10e62:	ldr	r4, [pc, #44]	; (10e90 <__assert_func+0x30>)
   10e64:	ldr	r5, [r4, #0]
   10e66:	mov	r4, r2
   10e68:	ldr	r6, [r5, #12]
   10e6a:	mov	r2, r3
   10e6c:	sub	sp, #20
   10e6e:	mov	r3, r0
   10e70:	mov	r5, r1
   10e72:	cbz	r4, 10e88 <__assert_func+0x28>
   10e74:	ldr	r1, [pc, #28]	; (10e94 <__assert_func+0x34>)
   10e76:	str	r5, [sp, #0]
   10e78:	strd	r1, r4, [sp, #4]
   10e7c:	mov	r0, r6
   10e7e:	ldr	r1, [pc, #24]	; (10e98 <__assert_func+0x38>)
   10e80:	bl	11d90 <fiprintf>
   10e84:	bl	bb48 <abort>
   10e88:	ldr	r1, [pc, #16]	; (10e9c <__assert_func+0x3c>)
   10e8a:	mov	r4, r1
   10e8c:	b.n	10e76 <__assert_func+0x16>
   10e8e:	nop
   10e90:	.word	0x20001a14
   10e94:	.word	0x20000c38
   10e98:	.word	0x20000c48
   10e9c:	.word	0x20000790

00010ea0 <_calloc_r>:
   10ea0:	push	{r3, r4, r5, lr}
   10ea2:	umull	r1, r4, r1, r2
   10ea6:	cbnz	r4, 10f0c <_calloc_r+0x6c>
   10ea8:	bl	d2fc <_malloc_r>
   10eac:	mov	r5, r0
   10eae:	cbz	r0, 10eea <_calloc_r+0x4a>
   10eb0:	ldr.w	r2, [r0, #-4]
   10eb4:	bic.w	r2, r2, #3
   10eb8:	subs	r2, #4
   10eba:	cmp	r2, #36	; 0x24
   10ebc:	bhi.n	10eee <_calloc_r+0x4e>
   10ebe:	cmp	r2, #19
   10ec0:	bls.n	10ef8 <_calloc_r+0x58>
   10ec2:	cmp	r2, #27
   10ec4:	strd	r4, r4, [r0]
   10ec8:	bls.n	10f06 <_calloc_r+0x66>
   10eca:	cmp	r2, #36	; 0x24
   10ecc:	ite	ne
   10ece:	addne.w	r2, r0, #16
   10ed2:	addeq.w	r2, r0, #24
   10ed6:	mov.w	r3, #0
   10eda:	strd	r4, r4, [r0, #8]
   10ede:	itt	eq
   10ee0:	streq	r4, [r0, #16]
   10ee2:	streq	r4, [r0, #20]
   10ee4:	strd	r3, r3, [r2]
   10ee8:	str	r3, [r2, #8]
   10eea:	mov	r0, r5
   10eec:	pop	{r3, r4, r5, pc}
   10eee:	mov	r1, r4
   10ef0:	bl	e110 <memset>
   10ef4:	mov	r0, r5
   10ef6:	pop	{r3, r4, r5, pc}
   10ef8:	mov	r2, r0
   10efa:	movs	r3, #0
   10efc:	strd	r3, r3, [r2]
   10f00:	str	r3, [r2, #8]
   10f02:	mov	r0, r5
   10f04:	pop	{r3, r4, r5, pc}
   10f06:	add.w	r2, r0, #8
   10f0a:	b.n	10efa <_calloc_r+0x5a>
   10f0c:	bl	e37c <__errno>
   10f10:	movs	r3, #12
   10f12:	movs	r5, #0
   10f14:	str	r3, [r0, #0]
   10f16:	b.n	10eea <_calloc_r+0x4a>

00010f18 <quorem>:
   10f18:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10f1c:	ldr	r3, [r0, #16]
   10f1e:	ldr	r4, [r1, #16]
   10f20:	cmp	r3, r4
   10f22:	sub	sp, #12
   10f24:	blt.w	11036 <quorem+0x11e>
   10f28:	subs	r4, #1
   10f2a:	add.w	r5, r1, #20
   10f2e:	lsls	r3, r4, #2
   10f30:	add.w	r8, r0, #20
   10f34:	str	r3, [sp, #0]
   10f36:	ldr.w	r3, [r5, r4, lsl #2]
   10f3a:	ldr.w	r2, [r8, r4, lsl #2]
   10f3e:	adds	r3, #1
   10f40:	mov	r9, r0
   10f42:	cmp	r2, r3
   10f44:	add.w	r0, r8, r4, lsl #2
   10f48:	add.w	r7, r5, r4, lsl #2
   10f4c:	str	r0, [sp, #4]
   10f4e:	udiv	r6, r2, r3
   10f52:	bcc.n	10fcc <quorem+0xb4>
   10f54:	mov.w	ip, #0
   10f58:	mov	lr, r5
   10f5a:	mov	r0, r8
   10f5c:	mov	sl, ip
   10f5e:	mov	r3, ip
   10f60:	ldr.w	fp, [lr], #4
   10f64:	ldr	r2, [r0, #0]
   10f66:	uxth.w	ip, fp
   10f6a:	mla	r3, r6, ip, r3
   10f6e:	mov.w	ip, r3, lsr #16
   10f72:	mov.w	fp, fp, lsr #16
   10f76:	mla	ip, r6, fp, ip
   10f7a:	uxth	r3, r3
   10f7c:	sub.w	r3, sl, r3
   10f80:	uxth.w	sl, ip
   10f84:	uxtah	r3, r3, r2
   10f88:	rsb	r2, sl, r2, lsr #16
   10f8c:	add.w	r2, r2, r3, asr #16
   10f90:	uxth	r3, r3
   10f92:	orr.w	r3, r3, r2, lsl #16
   10f96:	cmp	r7, lr
   10f98:	str.w	r3, [r0], #4
   10f9c:	mov.w	sl, r2, asr #16
   10fa0:	mov.w	r3, ip, lsr #16
   10fa4:	bcs.n	10f60 <quorem+0x48>
   10fa6:	ldr	r3, [sp, #0]
   10fa8:	ldr.w	r3, [r8, r3]
   10fac:	cbnz	r3, 10fcc <quorem+0xb4>
   10fae:	ldr	r3, [sp, #4]
   10fb0:	subs	r3, #4
   10fb2:	cmp	r8, r3
   10fb4:	bcc.n	10fc0 <quorem+0xa8>
   10fb6:	b.n	10fc8 <quorem+0xb0>
   10fb8:	cmp	r8, r3
   10fba:	add.w	r4, r4, #4294967295
   10fbe:	bcs.n	10fc8 <quorem+0xb0>
   10fc0:	ldr.w	r2, [r3], #-4
   10fc4:	cmp	r2, #0
   10fc6:	beq.n	10fb8 <quorem+0xa0>
   10fc8:	str.w	r4, [r9, #16]
   10fcc:	mov	r0, r9
   10fce:	bl	edc8 <__mcmp>
   10fd2:	cmp	r0, #0
   10fd4:	blt.n	1102e <quorem+0x116>
   10fd6:	adds	r6, #1
   10fd8:	mov	r1, r8
   10fda:	movs	r3, #0
   10fdc:	ldr.w	r0, [r5], #4
   10fe0:	ldr.w	ip, [r1]
   10fe4:	uxth	r2, r0
   10fe6:	subs	r2, r3, r2
   10fe8:	lsrs	r3, r0, #16
   10fea:	uxtah	r2, r2, ip
   10fee:	rsb	r3, r3, ip, lsr #16
   10ff2:	add.w	r3, r3, r2, asr #16
   10ff6:	uxth	r2, r2
   10ff8:	orr.w	r2, r2, r3, lsl #16
   10ffc:	cmp	r7, r5
   10ffe:	str.w	r2, [r1], #4
   11002:	mov.w	r3, r3, asr #16
   11006:	bcs.n	10fdc <quorem+0xc4>
   11008:	ldr.w	r2, [r8, r4, lsl #2]
   1100c:	add.w	r3, r8, r4, lsl #2
   11010:	cbnz	r2, 1102e <quorem+0x116>
   11012:	subs	r3, #4
   11014:	cmp	r8, r3
   11016:	bcc.n	11022 <quorem+0x10a>
   11018:	b.n	1102a <quorem+0x112>
   1101a:	cmp	r8, r3
   1101c:	add.w	r4, r4, #4294967295
   11020:	bcs.n	1102a <quorem+0x112>
   11022:	ldr.w	r2, [r3], #-4
   11026:	cmp	r2, #0
   11028:	beq.n	1101a <quorem+0x102>
   1102a:	str.w	r4, [r9, #16]
   1102e:	mov	r0, r6
   11030:	add	sp, #12
   11032:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11036:	movs	r0, #0
   11038:	add	sp, #12
   1103a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1103e:	nop

00011040 <_dtoa_r>:
   11040:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11044:	vpush	{d8}
   11048:	sub	sp, #60	; 0x3c
   1104a:	vstr	d0, [sp, #8]
   1104e:	str	r1, [sp, #4]
   11050:	ldr	r1, [r0, #56]	; 0x38
   11052:	ldr	r5, [sp, #104]	; 0x68
   11054:	str	r3, [sp, #20]
   11056:	vmov	r6, r7, d0
   1105a:	mov	r4, r0
   1105c:	mov	fp, r2
   1105e:	cbz	r1, 11072 <_dtoa_r+0x32>
   11060:	ldr	r2, [r0, #60]	; 0x3c
   11062:	str	r2, [r1, #4]
   11064:	movs	r3, #1
   11066:	lsls	r3, r2
   11068:	str	r3, [r1, #8]
   1106a:	bl	e908 <_Bfree>
   1106e:	movs	r3, #0
   11070:	str	r3, [r4, #56]	; 0x38
   11072:	subs.w	r8, r7, #0
   11076:	ite	lt
   11078:	movlt	r3, #1
   1107a:	movge	r3, #0
   1107c:	str	r3, [r5, #0]
   1107e:	ldr	r3, [pc, #760]	; (11378 <_dtoa_r+0x338>)
   11080:	itt	lt
   11082:	biclt.w	r8, r8, #2147483648	; 0x80000000
   11086:	strlt.w	r8, [sp, #12]
   1108a:	bics.w	r3, r3, r8
   1108e:	beq.w	111d0 <_dtoa_r+0x190>
   11092:	vldr	d8, [sp, #8]
   11096:	vcmp.f64	d8, #0.0
   1109a:	vmrs	APSR_nzcv, fpscr
   1109e:	bne.n	110c4 <_dtoa_r+0x84>
   110a0:	ldr	r2, [sp, #20]
   110a2:	movs	r3, #1
   110a4:	str	r3, [r2, #0]
   110a6:	ldr	r3, [sp, #108]	; 0x6c
   110a8:	cmp	r3, #0
   110aa:	beq.w	1152c <_dtoa_r+0x4ec>
   110ae:	ldr	r3, [pc, #716]	; (1137c <_dtoa_r+0x33c>)
   110b0:	ldr	r2, [sp, #108]	; 0x6c
   110b2:	str	r3, [r2, #0]
   110b4:	subs	r3, #1
   110b6:	str	r3, [sp, #0]
   110b8:	ldr	r0, [sp, #0]
   110ba:	add	sp, #60	; 0x3c
   110bc:	vpop	{d8}
   110c0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   110c4:	add	r2, sp, #48	; 0x30
   110c6:	add	r1, sp, #52	; 0x34
   110c8:	mov	r0, r4
   110ca:	vmov.f64	d0, d8
   110ce:	bl	ef60 <__d2b>
   110d2:	movs.w	r3, r8, lsr #20
   110d6:	mov	r5, r0
   110d8:	bne.w	11200 <_dtoa_r+0x1c0>
   110dc:	ldrd	r1, r3, [sp, #48]	; 0x30
   110e0:	add	r3, r1
   110e2:	addw	r2, r3, #1074	; 0x432
   110e6:	cmp	r2, #32
   110e8:	ble.w	116e0 <_dtoa_r+0x6a0>
   110ec:	rsb	r2, r2, #64	; 0x40
   110f0:	lsl.w	r8, r8, r2
   110f4:	addw	r2, r3, #1042	; 0x412
   110f8:	lsrs	r6, r2
   110fa:	orr.w	r2, r8, r6
   110fe:	vmov	s14, r2
   11102:	vcvt.f64.u32	d7, s14
   11106:	subs	r0, r3, #1
   11108:	vmov	r6, s15
   1110c:	vmov	r2, r3, d7
   11110:	mov.w	sl, #1
   11114:	sub.w	r3, r6, #32505856	; 0x1f00000
   11118:	vldr	d3, [pc, #580]	; 11360 <_dtoa_r+0x320>
   1111c:	vldr	d7, [pc, #584]	; 11368 <_dtoa_r+0x328>
   11120:	vldr	d5, [pc, #588]	; 11370 <_dtoa_r+0x330>
   11124:	vmov	s13, r0
   11128:	vmov	d2, r2, r3
   1112c:	vcvt.f64.s32	d4, s13
   11130:	vmov.f64	d6, #120	; 0x3fc00000  1.5
   11134:	vsub.f64	d6, d2, d6
   11138:	vfma.f64	d7, d6, d3
   1113c:	vfma.f64	d7, d4, d5
   11140:	vcvt.s32.f64	s13, d7
   11144:	vcmpe.f64	d7, #0.0
   11148:	vmrs	APSR_nzcv, fpscr
   1114c:	vmov	r7, s13
   11150:	bpl.n	11164 <_dtoa_r+0x124>
   11152:	vcvt.f64.s32	d6, s13
   11156:	vcmp.f64	d6, d7
   1115a:	vmrs	APSR_nzcv, fpscr
   1115e:	it	ne
   11160:	addne.w	r7, r7, #4294967295
   11164:	cmp	r7, #22
   11166:	bhi.w	113f4 <_dtoa_r+0x3b4>
   1116a:	ldr	r3, [pc, #532]	; (11380 <_dtoa_r+0x340>)
   1116c:	add.w	r3, r3, r7, lsl #3
   11170:	vldr	d7, [r3]
   11174:	vcmpe.f64	d8, d7
   11178:	vmrs	APSR_nzcv, fpscr
   1117c:	bpl.n	1122e <_dtoa_r+0x1ee>
   1117e:	subs	r1, r1, r0
   11180:	movs	r3, #0
   11182:	subs.w	r8, r1, #1
   11186:	add.w	r7, r7, #4294967295
   1118a:	str	r3, [sp, #40]	; 0x28
   1118c:	bmi.w	11402 <_dtoa_r+0x3c2>
   11190:	movs	r3, #0
   11192:	str	r3, [sp, #24]
   11194:	cmp	r7, #0
   11196:	bge.n	1123e <_dtoa_r+0x1fe>
   11198:	ldr	r3, [sp, #24]
   1119a:	str	r7, [sp, #16]
   1119c:	subs	r3, r3, r7
   1119e:	str	r3, [sp, #24]
   111a0:	negs	r3, r7
   111a2:	str	r3, [sp, #32]
   111a4:	ldr	r3, [sp, #4]
   111a6:	cmp	r3, #9
   111a8:	mov.w	r7, #0
   111ac:	bhi.n	1124c <_dtoa_r+0x20c>
   111ae:	cmp	r3, #5
   111b0:	ble.w	116ee <_dtoa_r+0x6ae>
   111b4:	subs	r3, #4
   111b6:	str	r3, [sp, #4]
   111b8:	movs	r6, #0
   111ba:	ldr	r3, [sp, #4]
   111bc:	subs	r2, r3, #2
   111be:	cmp	r2, #3
   111c0:	bhi.w	1140e <_dtoa_r+0x3ce>
   111c4:	tbh	[pc, r2, lsl #1]
   111c8:	.word	0x03a703aa
   111cc:	.word	0x037e039d
   111d0:	ldr	r2, [sp, #20]
   111d2:	ubfx	r8, r8, #0, #20
   111d6:	movw	r3, #9999	; 0x270f
   111da:	orrs.w	r8, r8, r6
   111de:	str	r3, [r2, #0]
   111e0:	bne.n	11220 <_dtoa_r+0x1e0>
   111e2:	ldr	r3, [sp, #108]	; 0x6c
   111e4:	cmp	r3, #0
   111e6:	beq.w	11d0c <_dtoa_r+0xccc>
   111ea:	ldr	r3, [pc, #408]	; (11384 <_dtoa_r+0x344>)
   111ec:	str	r3, [sp, #0]
   111ee:	adds	r3, #8
   111f0:	ldr	r2, [sp, #108]	; 0x6c
   111f2:	ldr	r0, [sp, #0]
   111f4:	str	r3, [r2, #0]
   111f6:	add	sp, #60	; 0x3c
   111f8:	vpop	{d8}
   111fc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11200:	vmov	r6, s17
   11204:	ubfx	r6, r6, #0, #20
   11208:	subw	r0, r3, #1023	; 0x3ff
   1120c:	vmov	r2, r3, d8
   11210:	orr.w	r3, r6, #1069547520	; 0x3fc00000
   11214:	ldr	r1, [sp, #48]	; 0x30
   11216:	mov.w	sl, #0
   1121a:	orr.w	r3, r3, #3145728	; 0x300000
   1121e:	b.n	11118 <_dtoa_r+0xd8>
   11220:	ldr	r3, [sp, #108]	; 0x6c
   11222:	cmp	r3, #0
   11224:	bne.w	1189e <_dtoa_r+0x85e>
   11228:	ldr	r3, [pc, #348]	; (11388 <_dtoa_r+0x348>)
   1122a:	str	r3, [sp, #0]
   1122c:	b.n	110b8 <_dtoa_r+0x78>
   1122e:	subs	r1, r1, r0
   11230:	movs	r3, #0
   11232:	subs.w	r8, r1, #1
   11236:	str	r3, [sp, #40]	; 0x28
   11238:	bmi.w	11402 <_dtoa_r+0x3c2>
   1123c:	str	r3, [sp, #24]
   1123e:	movs	r3, #0
   11240:	str	r3, [sp, #32]
   11242:	ldr	r3, [sp, #4]
   11244:	str	r7, [sp, #16]
   11246:	cmp	r3, #9
   11248:	add	r8, r7
   1124a:	bls.n	111ae <_dtoa_r+0x16e>
   1124c:	movs	r3, #0
   1124e:	movs	r6, #1
   11250:	str	r3, [sp, #4]
   11252:	str	r6, [sp, #28]
   11254:	mov.w	r9, #4294967295
   11258:	mov	fp, r3
   1125a:	movs	r1, #0
   1125c:	str	r1, [r4, #60]	; 0x3c
   1125e:	str.w	r9, [sp, #44]	; 0x2c
   11262:	mov	r0, r4
   11264:	bl	e8bc <_Balloc>
   11268:	str	r0, [sp, #0]
   1126a:	cmp	r0, #0
   1126c:	beq.w	11cf0 <_dtoa_r+0xcb0>
   11270:	ldr	r3, [sp, #0]
   11272:	str	r3, [r4, #56]	; 0x38
   11274:	cmp.w	r9, #14
   11278:	bhi.w	11434 <_dtoa_r+0x3f4>
   1127c:	cmp	r6, #0
   1127e:	beq.w	11434 <_dtoa_r+0x3f4>
   11282:	ldr	r3, [sp, #16]
   11284:	cmp	r3, #0
   11286:	ble.w	11a46 <_dtoa_r+0xa06>
   1128a:	ldr	r2, [pc, #244]	; (11380 <_dtoa_r+0x340>)
   1128c:	and.w	r1, r3, #15
   11290:	add.w	r2, r2, r1, lsl #3
   11294:	vldr	d7, [r2]
   11298:	asrs	r2, r3, #4
   1129a:	lsls	r3, r3, #23
   1129c:	bpl.w	119a4 <_dtoa_r+0x964>
   112a0:	ldr	r1, [pc, #232]	; (1138c <_dtoa_r+0x34c>)
   112a2:	vldr	d6, [r1, #32]
   112a6:	and.w	r2, r2, #15
   112aa:	movs	r0, #3
   112ac:	vdiv.f64	d5, d8, d6
   112b0:	cbz	r2, 112ca <_dtoa_r+0x28a>
   112b2:	ldr	r1, [pc, #216]	; (1138c <_dtoa_r+0x34c>)
   112b4:	lsls	r6, r2, #31
   112b6:	bpl.n	112c2 <_dtoa_r+0x282>
   112b8:	vldr	d6, [r1]
   112bc:	adds	r0, #1
   112be:	vmul.f64	d7, d7, d6
   112c2:	asrs	r2, r2, #1
   112c4:	add.w	r1, r1, #8
   112c8:	bne.n	112b4 <_dtoa_r+0x274>
   112ca:	vdiv.f64	d6, d5, d7
   112ce:	ldr	r3, [sp, #40]	; 0x28
   112d0:	cbz	r3, 112e2 <_dtoa_r+0x2a2>
   112d2:	vmov.f64	d7, #112	; 0x3f800000  1.0
   112d6:	vcmpe.f64	d6, d7
   112da:	vmrs	APSR_nzcv, fpscr
   112de:	bmi.w	11c3e <_dtoa_r+0xbfe>
   112e2:	vmov	s15, r0
   112e6:	vcvt.f64.s32	d5, s15
   112ea:	vmov.f64	d7, #28	; 0x40e00000  7.0
   112ee:	vfma.f64	d7, d5, d6
   112f2:	vmov	r2, s15
   112f6:	vmov	r0, r1, d7
   112fa:	sub.w	r1, r2, #54525952	; 0x3400000
   112fe:	cmp.w	r9, #0
   11302:	beq.w	11a16 <_dtoa_r+0x9d6>
   11306:	ldr	r6, [sp, #16]
   11308:	mov	r2, r9
   1130a:	ldr	r3, [sp, #28]
   1130c:	cmp	r3, #0
   1130e:	beq.w	11ba0 <_dtoa_r+0xb60>
   11312:	vmov.f64	d3, #96	; 0x3f000000  0.5
   11316:	ldr	r3, [pc, #104]	; (11380 <_dtoa_r+0x340>)
   11318:	vcvt.s32.f64	s9, d6
   1131c:	add.w	ip, r3, r2, lsl #3
   11320:	vcvt.f64.s32	d7, s9
   11324:	vsub.f64	d7, d6, d7
   11328:	vldr	d6, [ip, #-8]
   1132c:	vdiv.f64	d5, d3, d6
   11330:	vmov	d6, r0, r1
   11334:	vmov	r0, s9
   11338:	vsub.f64	d5, d5, d6
   1133c:	ldr	r1, [sp, #0]
   1133e:	vcmpe.f64	d5, d7
   11342:	adds	r0, #48	; 0x30
   11344:	vmrs	APSR_nzcv, fpscr
   11348:	strb.w	r0, [r1], #1
   1134c:	bgt.w	11ca8 <_dtoa_r+0xc68>
   11350:	vmov.f64	d2, #112	; 0x3f800000  1.0
   11354:	vmov.f64	d4, #36	; 0x41200000  10.0
   11358:	mov.w	ip, #0
   1135c:	b.n	113c2 <_dtoa_r+0x382>
   1135e:	nop
   11360:	.word	0x636f4361
   11364:	.word	0x3fd287a7
   11368:	.word	0x8b60c8b3
   1136c:	.word	0x3fc68a28
   11370:	.word	0x509f79fb
   11374:	.word	0x3fd34413
   11378:	.word	0x7ff00000
   1137c:	.word	0x20000e99
   11380:	.word	0x200003a8
   11384:	.word	0x20000dec
   11388:	.word	0x20000df8
   1138c:	.word	0x20000380
   11390:	add.w	ip, ip, #1
   11394:	cmp	ip, r2
   11396:	bge.n	11434 <_dtoa_r+0x3f4>
   11398:	vmul.f64	d7, d7, d4
   1139c:	vmul.f64	d5, d5, d4
   113a0:	vcvt.s32.f64	s13, d7
   113a4:	vmov	r3, s13
   113a8:	vcvt.f64.s32	d3, s13
   113ac:	adds	r3, #48	; 0x30
   113ae:	vsub.f64	d7, d7, d3
   113b2:	vcmpe.f64	d7, d5
   113b6:	vmrs	APSR_nzcv, fpscr
   113ba:	strb.w	r3, [r1], #1
   113be:	bmi.w	11ca8 <_dtoa_r+0xc68>
   113c2:	vsub.f64	d6, d2, d7
   113c6:	vcmpe.f64	d6, d5
   113ca:	vmrs	APSR_nzcv, fpscr
   113ce:	bpl.n	11390 <_dtoa_r+0x350>
   113d0:	ldr	r2, [sp, #0]
   113d2:	str	r6, [sp, #16]
   113d4:	b.n	113dc <_dtoa_r+0x39c>
   113d6:	cmp	r2, r1
   113d8:	beq.w	11c7c <_dtoa_r+0xc3c>
   113dc:	mov	r9, r1
   113de:	ldrb.w	r3, [r1, #-1]!
   113e2:	cmp	r3, #57	; 0x39
   113e4:	beq.n	113d6 <_dtoa_r+0x396>
   113e6:	adds	r3, #1
   113e8:	uxtb	r3, r3
   113ea:	strb	r3, [r1, #0]
   113ec:	ldr	r3, [sp, #16]
   113ee:	adds	r3, #1
   113f0:	str	r3, [sp, #16]
   113f2:	b.n	116a0 <_dtoa_r+0x660>
   113f4:	subs	r1, r1, r0
   113f6:	movs	r3, #1
   113f8:	subs.w	r8, r1, #1
   113fc:	str	r3, [sp, #40]	; 0x28
   113fe:	bpl.w	11190 <_dtoa_r+0x150>
   11402:	rsb	r3, r1, #1
   11406:	str	r3, [sp, #24]
   11408:	mov.w	r8, #0
   1140c:	b.n	11194 <_dtoa_r+0x154>
   1140e:	movs	r6, #0
   11410:	str	r6, [r4, #60]	; 0x3c
   11412:	mov	r1, r6
   11414:	mov	r0, r4
   11416:	bl	e8bc <_Balloc>
   1141a:	str	r0, [sp, #0]
   1141c:	cmp	r0, #0
   1141e:	beq.w	11cf0 <_dtoa_r+0xcb0>
   11422:	ldr	r3, [sp, #0]
   11424:	str	r3, [r4, #56]	; 0x38
   11426:	mov.w	r3, #4294967295
   1142a:	str	r3, [sp, #44]	; 0x2c
   1142c:	mov	r9, r3
   1142e:	movs	r3, #1
   11430:	mov	fp, r6
   11432:	str	r3, [sp, #28]
   11434:	ldr	r2, [sp, #52]	; 0x34
   11436:	cmp	r2, #0
   11438:	blt.n	114e6 <_dtoa_r+0x4a6>
   1143a:	ldr	r1, [sp, #16]
   1143c:	cmp	r1, #14
   1143e:	bgt.n	114e6 <_dtoa_r+0x4a6>
   11440:	ldr	r3, [pc, #732]	; (11720 <_dtoa_r+0x6e0>)
   11442:	cmp.w	fp, #0
   11446:	add.w	r3, r3, r1, lsl #3
   1144a:	vldr	d6, [r3]
   1144e:	bge.n	1147c <_dtoa_r+0x43c>
   11450:	cmp.w	r9, #0
   11454:	bgt.n	1147c <_dtoa_r+0x43c>
   11456:	bne.w	11a3e <_dtoa_r+0x9fe>
   1145a:	vmov.f64	d7, #20	; 0x40a00000  5.0
   1145e:	vmul.f64	d7, d6, d7
   11462:	vcmpe.f64	d8, d7
   11466:	vmrs	APSR_nzcv, fpscr
   1146a:	mov	sl, r9
   1146c:	mov	r6, r9
   1146e:	bhi.w	1194c <_dtoa_r+0x90c>
   11472:	ldr.w	r8, [sp]
   11476:	mvn.w	fp, fp
   1147a:	b.n	1195e <_dtoa_r+0x91e>
   1147c:	vdiv.f64	d7, d8, d6
   11480:	vcvt.s32.f64	s14, d7
   11484:	ldr	r1, [sp, #0]
   11486:	vmov	r3, s14
   1148a:	cmp.w	r9, #1
   1148e:	add.w	r3, r3, #48	; 0x30
   11492:	vcvt.f64.s32	d5, s14
   11496:	strb.w	r3, [r1], #1
   1149a:	vfms.f64	d8, d5, d6
   1149e:	beq.w	11b0a <_dtoa_r+0xaca>
   114a2:	vmov.f64	d4, #36	; 0x41200000  10.0
   114a6:	movs	r3, #1
   114a8:	b.n	114ce <_dtoa_r+0x48e>
   114aa:	vdiv.f64	d7, d8, d6
   114ae:	vcvt.s32.f64	s14, d7
   114b2:	adds	r3, #1
   114b4:	vmov	r2, s14
   114b8:	cmp	r3, r9
   114ba:	add.w	r2, r2, #48	; 0x30
   114be:	vcvt.f64.s32	d5, s14
   114c2:	strb.w	r2, [r1], #1
   114c6:	vfms.f64	d8, d5, d6
   114ca:	beq.w	11b0a <_dtoa_r+0xaca>
   114ce:	vmul.f64	d8, d8, d4
   114d2:	vcmp.f64	d8, #0.0
   114d6:	vmrs	APSR_nzcv, fpscr
   114da:	bne.n	114aa <_dtoa_r+0x46a>
   114dc:	ldr	r3, [sp, #16]
   114de:	adds	r3, #1
   114e0:	str	r3, [sp, #16]
   114e2:	mov	r9, r1
   114e4:	b.n	116a0 <_dtoa_r+0x660>
   114e6:	ldr	r3, [sp, #28]
   114e8:	cbz	r3, 1153c <_dtoa_r+0x4fc>
   114ea:	ldr	r3, [sp, #4]
   114ec:	cmp	r3, #1
   114ee:	ble.w	119de <_dtoa_r+0x99e>
   114f2:	ldr	r3, [sp, #32]
   114f4:	add.w	sl, r9, #4294967295
   114f8:	cmp	r3, sl
   114fa:	bge.w	1197c <_dtoa_r+0x93c>
   114fe:	ldr	r3, [sp, #32]
   11500:	str.w	sl, [sp, #32]
   11504:	sub.w	r2, sl, r3
   11508:	add	r7, r2
   1150a:	mov.w	sl, #0
   1150e:	cmp.w	r9, #0
   11512:	blt.w	11b60 <_dtoa_r+0xb20>
   11516:	ldr	r3, [sp, #24]
   11518:	str	r3, [sp, #36]	; 0x24
   1151a:	add	r3, r9
   1151c:	add	r8, r9
   1151e:	str	r3, [sp, #24]
   11520:	movs	r1, #1
   11522:	mov	r0, r4
   11524:	bl	ea60 <__i2b>
   11528:	mov	r6, r0
   1152a:	b.n	11546 <_dtoa_r+0x506>
   1152c:	ldr	r3, [pc, #500]	; (11724 <_dtoa_r+0x6e4>)
   1152e:	str	r3, [sp, #0]
   11530:	ldr	r0, [sp, #0]
   11532:	add	sp, #60	; 0x3c
   11534:	vpop	{d8}
   11538:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1153c:	ldr	r3, [sp, #24]
   1153e:	ldr.w	sl, [sp, #32]
   11542:	ldr	r6, [sp, #28]
   11544:	str	r3, [sp, #36]	; 0x24
   11546:	ldr	r3, [sp, #36]	; 0x24
   11548:	cbz	r3, 11566 <_dtoa_r+0x526>
   1154a:	cmp.w	r8, #0
   1154e:	ble.n	11566 <_dtoa_r+0x526>
   11550:	cmp	r3, r8
   11552:	ldr	r1, [sp, #24]
   11554:	mov	r2, r3
   11556:	it	ge
   11558:	movge	r2, r8
   1155a:	subs	r1, r1, r2
   1155c:	subs	r3, r3, r2
   1155e:	str	r1, [sp, #24]
   11560:	str	r3, [sp, #36]	; 0x24
   11562:	sub.w	r8, r8, r2
   11566:	ldr	r3, [sp, #32]
   11568:	cbz	r3, 11584 <_dtoa_r+0x544>
   1156a:	ldr	r3, [sp, #28]
   1156c:	cmp	r3, #0
   1156e:	beq.w	11ac0 <_dtoa_r+0xa80>
   11572:	cmp.w	sl, #0
   11576:	bgt.w	11982 <_dtoa_r+0x942>
   1157a:	ldr	r3, [sp, #32]
   1157c:	subs.w	r2, r3, sl
   11580:	bne.w	11b82 <_dtoa_r+0xb42>
   11584:	movs	r1, #1
   11586:	mov	r0, r4
   11588:	bl	ea60 <__i2b>
   1158c:	cmp	r7, #0
   1158e:	mov	sl, r0
   11590:	bgt.w	116f2 <_dtoa_r+0x6b2>
   11594:	ldr	r3, [sp, #4]
   11596:	cmp	r3, #1
   11598:	ble.w	118aa <_dtoa_r+0x86a>
   1159c:	movs	r3, #0
   1159e:	str	r3, [sp, #32]
   115a0:	movs	r0, #1
   115a2:	cmp	r7, #0
   115a4:	bne.w	1170a <_dtoa_r+0x6ca>
   115a8:	add	r0, r8
   115aa:	ands.w	r0, r0, #31
   115ae:	beq.w	118a6 <_dtoa_r+0x866>
   115b2:	rsb	r2, r0, #32
   115b6:	cmp	r2, #4
   115b8:	bgt.w	116cc <_dtoa_r+0x68c>
   115bc:	bne.w	119ac <_dtoa_r+0x96c>
   115c0:	ldr	r3, [sp, #24]
   115c2:	cmp	r3, #0
   115c4:	ble.n	115d2 <_dtoa_r+0x592>
   115c6:	mov	r1, r5
   115c8:	mov	r2, r3
   115ca:	mov	r0, r4
   115cc:	bl	ecd8 <__lshift>
   115d0:	mov	r5, r0
   115d2:	cmp.w	r8, #0
   115d6:	ble.n	115e4 <_dtoa_r+0x5a4>
   115d8:	mov	r1, sl
   115da:	mov	r2, r8
   115dc:	mov	r0, r4
   115de:	bl	ecd8 <__lshift>
   115e2:	mov	sl, r0
   115e4:	ldr	r3, [sp, #40]	; 0x28
   115e6:	cmp	r3, #0
   115e8:	bne.w	1186a <_dtoa_r+0x82a>
   115ec:	cmp.w	r9, #0
   115f0:	ble.w	1183e <_dtoa_r+0x7fe>
   115f4:	ldr	r3, [sp, #28]
   115f6:	cmp	r3, #0
   115f8:	bne.w	11742 <_dtoa_r+0x702>
   115fc:	ldr	r3, [sp, #16]
   115fe:	adds	r3, #1
   11600:	str	r3, [sp, #16]
   11602:	ldr.w	r8, [sp]
   11606:	movs	r7, #1
   11608:	b.n	1161a <_dtoa_r+0x5da>
   1160a:	mov	r1, r5
   1160c:	movs	r3, #0
   1160e:	movs	r2, #10
   11610:	mov	r0, r4
   11612:	bl	e91c <__multadd>
   11616:	adds	r7, #1
   11618:	mov	r5, r0
   1161a:	mov	r1, sl
   1161c:	mov	r0, r5
   1161e:	bl	10f18 <quorem>
   11622:	cmp	r9, r7
   11624:	add.w	r0, r0, #48	; 0x30
   11628:	strb.w	r0, [r8], #1
   1162c:	bgt.n	1160a <_dtoa_r+0x5ca>
   1162e:	cmp.w	r9, #0
   11632:	ldr	r2, [sp, #0]
   11634:	ite	gt
   11636:	movgt	fp, r9
   11638:	movle.w	fp, #1
   1163c:	mov	r3, r0
   1163e:	add	fp, r2
   11640:	movs	r7, #0
   11642:	mov	r1, r5
   11644:	movs	r2, #1
   11646:	mov	r0, r4
   11648:	str	r3, [sp, #4]
   1164a:	bl	ecd8 <__lshift>
   1164e:	mov	r1, sl
   11650:	mov	r5, r0
   11652:	bl	edc8 <__mcmp>
   11656:	cmp	r0, #0
   11658:	ble.w	119ba <_dtoa_r+0x97a>
   1165c:	ldrb.w	r3, [fp, #-1]
   11660:	ldr	r2, [sp, #0]
   11662:	add.w	fp, fp, #4294967295
   11666:	b.n	11672 <_dtoa_r+0x632>
   11668:	cmp	r2, fp
   1166a:	beq.w	119d0 <_dtoa_r+0x990>
   1166e:	ldrb.w	r3, [fp, #-1]!
   11672:	cmp	r3, #57	; 0x39
   11674:	add.w	r9, fp, #1
   11678:	beq.n	11668 <_dtoa_r+0x628>
   1167a:	adds	r3, #1
   1167c:	strb.w	r3, [fp]
   11680:	mov	r1, sl
   11682:	mov	r0, r4
   11684:	bl	e908 <_Bfree>
   11688:	cbz	r6, 116a0 <_dtoa_r+0x660>
   1168a:	cbz	r7, 11698 <_dtoa_r+0x658>
   1168c:	cmp	r7, r6
   1168e:	beq.n	11698 <_dtoa_r+0x658>
   11690:	mov	r1, r7
   11692:	mov	r0, r4
   11694:	bl	e908 <_Bfree>
   11698:	mov	r1, r6
   1169a:	mov	r0, r4
   1169c:	bl	e908 <_Bfree>
   116a0:	mov	r1, r5
   116a2:	mov	r0, r4
   116a4:	bl	e908 <_Bfree>
   116a8:	movs	r3, #0
   116aa:	strb.w	r3, [r9]
   116ae:	ldrd	r2, r3, [sp, #16]
   116b2:	str	r2, [r3, #0]
   116b4:	ldr	r3, [sp, #108]	; 0x6c
   116b6:	cmp	r3, #0
   116b8:	beq.w	110b8 <_dtoa_r+0x78>
   116bc:	ldr	r0, [sp, #0]
   116be:	str.w	r9, [r3]
   116c2:	add	sp, #60	; 0x3c
   116c4:	vpop	{d8}
   116c8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   116cc:	rsb	r0, r0, #28
   116d0:	ldr	r3, [sp, #24]
   116d2:	add	r3, r0
   116d4:	str	r3, [sp, #24]
   116d6:	ldr	r3, [sp, #36]	; 0x24
   116d8:	add	r3, r0
   116da:	str	r3, [sp, #36]	; 0x24
   116dc:	add	r8, r0
   116de:	b.n	115c0 <_dtoa_r+0x580>
   116e0:	rsb	r2, r2, #32
   116e4:	lsl.w	r2, r6, r2
   116e8:	vmov	s14, r2
   116ec:	b.n	11102 <_dtoa_r+0xc2>
   116ee:	movs	r6, #1
   116f0:	b.n	111ba <_dtoa_r+0x17a>
   116f2:	mov	r1, r0
   116f4:	mov	r2, r7
   116f6:	mov	r0, r4
   116f8:	bl	ec18 <__pow5mult>
   116fc:	ldr	r3, [sp, #4]
   116fe:	cmp	r3, #1
   11700:	mov	sl, r0
   11702:	ble.w	11a90 <_dtoa_r+0xa50>
   11706:	movs	r3, #0
   11708:	str	r3, [sp, #32]
   1170a:	ldr.w	r2, [sl, #16]
   1170e:	add.w	r2, sl, r2, lsl #2
   11712:	ldr	r0, [r2, #16]
   11714:	bl	e9c0 <__hi0bits>
   11718:	rsb	r0, r0, #32
   1171c:	b.n	115a8 <_dtoa_r+0x568>
   1171e:	nop
   11720:	.word	0x200003a8
   11724:	.word	0x20000e98
   11728:	mov	r1, r6
   1172a:	movs	r3, #0
   1172c:	movs	r2, #10
   1172e:	mov	r0, r4
   11730:	bl	e91c <__multadd>
   11734:	ldr	r3, [sp, #44]	; 0x2c
   11736:	cmp	r3, #0
   11738:	mov	r6, r0
   1173a:	ble.w	11cda <_dtoa_r+0xc9a>
   1173e:	str	r7, [sp, #16]
   11740:	mov	r9, r3
   11742:	ldr	r3, [sp, #36]	; 0x24
   11744:	cmp	r3, #0
   11746:	ble.n	11754 <_dtoa_r+0x714>
   11748:	mov	r1, r6
   1174a:	mov	r2, r3
   1174c:	mov	r0, r4
   1174e:	bl	ecd8 <__lshift>
   11752:	mov	r6, r0
   11754:	ldr	r3, [sp, #32]
   11756:	cmp	r3, #0
   11758:	bne.w	11b32 <_dtoa_r+0xaf2>
   1175c:	mov	r8, r6
   1175e:	ldr	r3, [sp, #8]
   11760:	ldr	r7, [sp, #0]
   11762:	and.w	r2, r3, #1
   11766:	subs	r3, r7, #1
   11768:	add	r3, r9
   1176a:	str	r3, [sp, #32]
   1176c:	ldr	r3, [sp, #4]
   1176e:	str	r2, [sp, #40]	; 0x28
   11770:	orrs	r3, r2
   11772:	str	r3, [sp, #36]	; 0x24
   11774:	mov	r1, sl
   11776:	mov	r0, r5
   11778:	bl	10f18 <quorem>
   1177c:	mov	r1, r6
   1177e:	mov	fp, r0
   11780:	mov	r0, r5
   11782:	bl	edc8 <__mcmp>
   11786:	mov	r2, r8
   11788:	mov	r1, sl
   1178a:	mov	r9, r0
   1178c:	mov	r0, r4
   1178e:	bl	ee0c <__mdiff>
   11792:	ldr	r2, [r0, #12]
   11794:	mov	r1, r0
   11796:	add.w	r3, fp, #48	; 0x30
   1179a:	cmp	r2, #0
   1179c:	bne.n	11824 <_dtoa_r+0x7e4>
   1179e:	strd	r0, r3, [sp, #24]
   117a2:	mov	r0, r5
   117a4:	bl	edc8 <__mcmp>
   117a8:	ldr	r1, [sp, #24]
   117aa:	str	r0, [sp, #8]
   117ac:	mov	r0, r4
   117ae:	bl	e908 <_Bfree>
   117b2:	ldr	r2, [sp, #8]
   117b4:	ldr	r3, [sp, #28]
   117b6:	cbnz	r2, 117c0 <_dtoa_r+0x780>
   117b8:	ldr	r1, [sp, #36]	; 0x24
   117ba:	cmp	r1, #0
   117bc:	beq.w	11cbc <_dtoa_r+0xc7c>
   117c0:	cmp.w	r9, #0
   117c4:	blt.w	11ace <_dtoa_r+0xa8e>
   117c8:	ldr	r1, [sp, #4]
   117ca:	orr.w	r9, r9, r1
   117ce:	ldr	r1, [sp, #40]	; 0x28
   117d0:	orrs.w	r9, r1, r9
   117d4:	beq.w	11ace <_dtoa_r+0xa8e>
   117d8:	cmp	r2, #0
   117da:	bgt.w	11b6a <_dtoa_r+0xb2a>
   117de:	ldr	r2, [sp, #32]
   117e0:	strb	r3, [r7, #0]
   117e2:	add.w	r9, r7, #1
   117e6:	cmp	r7, r2
   117e8:	mov	fp, r9
   117ea:	beq.w	11b76 <_dtoa_r+0xb36>
   117ee:	mov	r1, r5
   117f0:	movs	r3, #0
   117f2:	movs	r2, #10
   117f4:	mov	r0, r4
   117f6:	bl	e91c <__multadd>
   117fa:	cmp	r6, r8
   117fc:	mov	r5, r0
   117fe:	mov	r1, r6
   11800:	mov.w	r3, #0
   11804:	mov.w	r2, #10
   11808:	mov	r0, r4
   1180a:	beq.n	11832 <_dtoa_r+0x7f2>
   1180c:	bl	e91c <__multadd>
   11810:	mov	r1, r8
   11812:	mov	r6, r0
   11814:	movs	r3, #0
   11816:	movs	r2, #10
   11818:	mov	r0, r4
   1181a:	bl	e91c <__multadd>
   1181e:	mov	r7, r9
   11820:	mov	r8, r0
   11822:	b.n	11774 <_dtoa_r+0x734>
   11824:	mov	r0, r4
   11826:	str	r3, [sp, #8]
   11828:	bl	e908 <_Bfree>
   1182c:	ldr	r3, [sp, #8]
   1182e:	movs	r2, #1
   11830:	b.n	117c0 <_dtoa_r+0x780>
   11832:	bl	e91c <__multadd>
   11836:	mov	r7, r9
   11838:	mov	r6, r0
   1183a:	mov	r8, r0
   1183c:	b.n	11774 <_dtoa_r+0x734>
   1183e:	ldr	r3, [sp, #4]
   11840:	cmp	r3, #2
   11842:	bgt.n	11928 <_dtoa_r+0x8e8>
   11844:	ldr	r3, [sp, #28]
   11846:	cmp	r3, #0
   11848:	bne.w	11742 <_dtoa_r+0x702>
   1184c:	ldr	r3, [sp, #16]
   1184e:	mov	r1, sl
   11850:	adds	r3, #1
   11852:	mov	r0, r5
   11854:	str	r3, [sp, #16]
   11856:	bl	10f18 <quorem>
   1185a:	ldr.w	fp, [sp]
   1185e:	add.w	r3, r0, #48	; 0x30
   11862:	strb.w	r3, [fp], #1
   11866:	movs	r7, #0
   11868:	b.n	11642 <_dtoa_r+0x602>
   1186a:	mov	r1, sl
   1186c:	mov	r0, r5
   1186e:	bl	edc8 <__mcmp>
   11872:	cmp	r0, #0
   11874:	bge.w	115ec <_dtoa_r+0x5ac>
   11878:	mov	r1, r5
   1187a:	movs	r3, #0
   1187c:	movs	r2, #10
   1187e:	mov	r0, r4
   11880:	bl	e91c <__multadd>
   11884:	ldr	r3, [sp, #16]
   11886:	subs	r7, r3, #1
   11888:	ldr	r3, [sp, #28]
   1188a:	mov	r5, r0
   1188c:	cmp	r3, #0
   1188e:	bne.w	11728 <_dtoa_r+0x6e8>
   11892:	ldr	r3, [sp, #44]	; 0x2c
   11894:	cmp	r3, #0
   11896:	ble.w	11cca <_dtoa_r+0xc8a>
   1189a:	mov	r9, r3
   1189c:	b.n	11602 <_dtoa_r+0x5c2>
   1189e:	ldr	r3, [pc, #752]	; (11b90 <_dtoa_r+0xb50>)
   118a0:	str	r3, [sp, #0]
   118a2:	adds	r3, #3
   118a4:	b.n	111f0 <_dtoa_r+0x1b0>
   118a6:	movs	r0, #28
   118a8:	b.n	116d0 <_dtoa_r+0x690>
   118aa:	ldrd	r0, r1, [sp, #8]
   118ae:	cmp	r0, #0
   118b0:	bne.w	1159c <_dtoa_r+0x55c>
   118b4:	ubfx	r2, r1, #0, #20
   118b8:	cmp	r2, #0
   118ba:	beq.w	11aa6 <_dtoa_r+0xa66>
   118be:	ldr	r3, [sp, #8]
   118c0:	str	r3, [sp, #32]
   118c2:	b.n	115a0 <_dtoa_r+0x560>
   118c4:	movs	r3, #1
   118c6:	str	r3, [sp, #28]
   118c8:	ldr	r3, [sp, #16]
   118ca:	add	r3, fp
   118cc:	add.w	r9, r3, #1
   118d0:	cmp.w	r9, #1
   118d4:	mov	ip, r9
   118d6:	str	r3, [sp, #44]	; 0x2c
   118d8:	it	lt
   118da:	movlt.w	ip, #1
   118de:	movs	r1, #0
   118e0:	cmp.w	ip, #23
   118e4:	str	r1, [r4, #60]	; 0x3c
   118e6:	ble.w	11262 <_dtoa_r+0x222>
   118ea:	movs	r0, #1
   118ec:	movs	r2, #4
   118ee:	lsls	r2, r2, #1
   118f0:	add.w	r3, r2, #20
   118f4:	cmp	r3, ip
   118f6:	mov	r1, r0
   118f8:	add.w	r0, r0, #1
   118fc:	bls.n	118ee <_dtoa_r+0x8ae>
   118fe:	str	r1, [r4, #60]	; 0x3c
   11900:	b.n	11262 <_dtoa_r+0x222>
   11902:	movs	r3, #1
   11904:	str	r3, [sp, #28]
   11906:	cmp.w	fp, #0
   1190a:	ble.n	119b2 <_dtoa_r+0x972>
   1190c:	str.w	fp, [sp, #44]	; 0x2c
   11910:	mov	r9, fp
   11912:	mov	ip, fp
   11914:	b.n	118de <_dtoa_r+0x89e>
   11916:	movs	r3, #0
   11918:	str	r3, [sp, #28]
   1191a:	b.n	118c8 <_dtoa_r+0x888>
   1191c:	movs	r3, #0
   1191e:	str	r3, [sp, #28]
   11920:	b.n	11906 <_dtoa_r+0x8c6>
   11922:	ldr.w	r9, [sp, #44]	; 0x2c
   11926:	str	r7, [sp, #16]
   11928:	cmp.w	r9, #0
   1192c:	bne.w	11472 <_dtoa_r+0x432>
   11930:	mov	r1, sl
   11932:	mov	r3, r9
   11934:	movs	r2, #5
   11936:	mov	r0, r4
   11938:	bl	e91c <__multadd>
   1193c:	mov	r1, r0
   1193e:	mov	sl, r0
   11940:	mov	r0, r5
   11942:	bl	edc8 <__mcmp>
   11946:	cmp	r0, #0
   11948:	ble.w	11472 <_dtoa_r+0x432>
   1194c:	ldr	r3, [sp, #16]
   1194e:	add.w	fp, r3, #1
   11952:	ldr	r3, [sp, #0]
   11954:	movs	r2, #49	; 0x31
   11956:	mov	r8, r3
   11958:	strb.w	r2, [r3], #1
   1195c:	str	r3, [sp, #0]
   1195e:	mov	r1, sl
   11960:	mov	r0, r4
   11962:	bl	e908 <_Bfree>
   11966:	add.w	r3, fp, #1
   1196a:	ldr.w	r9, [sp]
   1196e:	str	r3, [sp, #16]
   11970:	str.w	r8, [sp]
   11974:	cmp	r6, #0
   11976:	bne.w	11698 <_dtoa_r+0x658>
   1197a:	b.n	116a0 <_dtoa_r+0x660>
   1197c:	sub.w	sl, r3, sl
   11980:	b.n	1150e <_dtoa_r+0x4ce>
   11982:	mov	r1, r6
   11984:	mov	r2, sl
   11986:	mov	r0, r4
   11988:	bl	ec18 <__pow5mult>
   1198c:	mov	r2, r5
   1198e:	mov	r1, r0
   11990:	mov	r6, r0
   11992:	mov	r0, r4
   11994:	bl	eabc <__multiply>
   11998:	mov	r1, r5
   1199a:	mov	r5, r0
   1199c:	mov	r0, r4
   1199e:	bl	e908 <_Bfree>
   119a2:	b.n	1157a <_dtoa_r+0x53a>
   119a4:	movs	r0, #2
   119a6:	vmov.f64	d5, d8
   119aa:	b.n	112b0 <_dtoa_r+0x270>
   119ac:	rsb	r0, r0, #60	; 0x3c
   119b0:	b.n	116d0 <_dtoa_r+0x690>
   119b2:	mov.w	fp, #1
   119b6:	mov	r9, fp
   119b8:	b.n	1125a <_dtoa_r+0x21a>
   119ba:	bne.n	119c4 <_dtoa_r+0x984>
   119bc:	ldr	r3, [sp, #4]
   119be:	lsls	r3, r3, #31
   119c0:	bmi.w	1165c <_dtoa_r+0x61c>
   119c4:	mov	r9, fp
   119c6:	ldrb.w	r3, [fp, #-1]!
   119ca:	cmp	r3, #48	; 0x30
   119cc:	beq.n	119c4 <_dtoa_r+0x984>
   119ce:	b.n	11680 <_dtoa_r+0x640>
   119d0:	ldr	r3, [sp, #16]
   119d2:	ldr	r2, [sp, #0]
   119d4:	adds	r3, #1
   119d6:	str	r3, [sp, #16]
   119d8:	movs	r3, #49	; 0x31
   119da:	strb	r3, [r2, #0]
   119dc:	b.n	11680 <_dtoa_r+0x640>
   119de:	cmp.w	sl, #0
   119e2:	beq.w	11c2c <_dtoa_r+0xbec>
   119e6:	addw	r2, r2, #1075	; 0x433
   119ea:	ldr	r3, [sp, #24]
   119ec:	str	r3, [sp, #36]	; 0x24
   119ee:	add	r3, r2
   119f0:	ldr.w	sl, [sp, #32]
   119f4:	str	r3, [sp, #24]
   119f6:	add	r8, r2
   119f8:	b.n	11520 <_dtoa_r+0x4e0>
   119fa:	vmov	s15, r0
   119fe:	vmov.f64	d5, #28	; 0x40e00000  7.0
   11a02:	vcvt.f64.s32	d7, s15
   11a06:	vfma.f64	d5, d6, d7
   11a0a:	vmov	r2, s11
   11a0e:	vmov	r0, r1, d5
   11a12:	sub.w	r1, r2, #54525952	; 0x3400000
   11a16:	vmov	d5, r0, r1
   11a1a:	vmov.f64	d7, #20	; 0x40a00000  5.0
   11a1e:	vsub.f64	d7, d6, d7
   11a22:	vcmpe.f64	d7, d5
   11a26:	vmrs	APSR_nzcv, fpscr
   11a2a:	bgt.w	11c9c <_dtoa_r+0xc5c>
   11a2e:	vneg.f64	d5, d5
   11a32:	vcmpe.f64	d7, d5
   11a36:	vmrs	APSR_nzcv, fpscr
   11a3a:	bpl.w	11434 <_dtoa_r+0x3f4>
   11a3e:	mov.w	sl, #0
   11a42:	mov	r6, sl
   11a44:	b.n	11472 <_dtoa_r+0x432>
   11a46:	beq.w	11c34 <_dtoa_r+0xbf4>
   11a4a:	ldr	r3, [sp, #16]
   11a4c:	ldr	r1, [pc, #324]	; (11b94 <_dtoa_r+0xb54>)
   11a4e:	negs	r2, r3
   11a50:	and.w	r0, r2, #15
   11a54:	add.w	r1, r1, r0, lsl #3
   11a58:	vldr	d6, [r1]
   11a5c:	asrs	r2, r2, #4
   11a5e:	vmul.f64	d6, d8, d6
   11a62:	beq.w	11cea <_dtoa_r+0xcaa>
   11a66:	vmov.f64	d7, d6
   11a6a:	ldr	r1, [pc, #300]	; (11b98 <_dtoa_r+0xb58>)
   11a6c:	movs	r6, #0
   11a6e:	movs	r0, #2
   11a70:	lsls	r3, r2, #31
   11a72:	bpl.n	11a80 <_dtoa_r+0xa40>
   11a74:	vldr	d5, [r1]
   11a78:	adds	r0, #1
   11a7a:	movs	r6, #1
   11a7c:	vmul.f64	d7, d7, d5
   11a80:	asrs	r2, r2, #1
   11a82:	add.w	r1, r1, #8
   11a86:	bne.n	11a70 <_dtoa_r+0xa30>
   11a88:	cmp	r6, #0
   11a8a:	vseleq.f64	d6, d6, d7
   11a8e:	b.n	112ce <_dtoa_r+0x28e>
   11a90:	ldr	r3, [sp, #8]
   11a92:	cmp	r3, #0
   11a94:	bne.w	11706 <_dtoa_r+0x6c6>
   11a98:	ldrd	r0, r1, [sp, #8]
   11a9c:	ubfx	r2, r1, #0, #20
   11aa0:	cmp	r2, #0
   11aa2:	bne.w	11d14 <_dtoa_r+0xcd4>
   11aa6:	ldr	r2, [pc, #244]	; (11b9c <_dtoa_r+0xb5c>)
   11aa8:	ands	r2, r1
   11aaa:	cmp	r2, #0
   11aac:	beq.w	11ca4 <_dtoa_r+0xc64>
   11ab0:	ldr	r3, [sp, #24]
   11ab2:	adds	r3, #1
   11ab4:	str	r3, [sp, #24]
   11ab6:	movs	r3, #1
   11ab8:	add.w	r8, r8, #1
   11abc:	str	r3, [sp, #32]
   11abe:	b.n	115a0 <_dtoa_r+0x560>
   11ac0:	mov	r1, r5
   11ac2:	ldr	r2, [sp, #32]
   11ac4:	mov	r0, r4
   11ac6:	bl	ec18 <__pow5mult>
   11aca:	mov	r5, r0
   11acc:	b.n	11584 <_dtoa_r+0x544>
   11ace:	cmp	r2, #0
   11ad0:	ble.n	11af8 <_dtoa_r+0xab8>
   11ad2:	mov	r1, r5
   11ad4:	movs	r2, #1
   11ad6:	mov	r0, r4
   11ad8:	str	r3, [sp, #4]
   11ada:	bl	ecd8 <__lshift>
   11ade:	mov	r1, sl
   11ae0:	mov	r5, r0
   11ae2:	bl	edc8 <__mcmp>
   11ae6:	cmp	r0, #0
   11ae8:	ldr	r3, [sp, #4]
   11aea:	ble.w	11cb0 <_dtoa_r+0xc70>
   11aee:	cmp	r3, #57	; 0x39
   11af0:	beq.w	11c88 <_dtoa_r+0xc48>
   11af4:	add.w	r3, fp, #49	; 0x31
   11af8:	mov	r9, r7
   11afa:	strb.w	r3, [r9], #1
   11afe:	ldr	r3, [sp, #16]
   11b00:	adds	r3, #1
   11b02:	mov	r7, r6
   11b04:	str	r3, [sp, #16]
   11b06:	mov	r6, r8
   11b08:	b.n	11680 <_dtoa_r+0x640>
   11b0a:	vadd.f64	d8, d8, d8
   11b0e:	vcmpe.f64	d8, d6
   11b12:	vmrs	APSR_nzcv, fpscr
   11b16:	bgt.n	11b2e <_dtoa_r+0xaee>
   11b18:	vcmp.f64	d8, d6
   11b1c:	vmrs	APSR_nzcv, fpscr
   11b20:	bne.w	114dc <_dtoa_r+0x49c>
   11b24:	vmov	r3, s14
   11b28:	lsls	r0, r3, #31
   11b2a:	bpl.w	114dc <_dtoa_r+0x49c>
   11b2e:	ldr	r2, [sp, #0]
   11b30:	b.n	113dc <_dtoa_r+0x39c>
   11b32:	ldr	r1, [r6, #4]
   11b34:	mov	r0, r4
   11b36:	bl	e8bc <_Balloc>
   11b3a:	mov	r7, r0
   11b3c:	cmp	r0, #0
   11b3e:	beq.w	11cfe <_dtoa_r+0xcbe>
   11b42:	ldr	r3, [r6, #16]
   11b44:	adds	r3, #2
   11b46:	lsls	r2, r3, #2
   11b48:	add.w	r1, r6, #12
   11b4c:	adds	r0, #12
   11b4e:	bl	a170 <memcpy>
   11b52:	mov	r1, r7
   11b54:	movs	r2, #1
   11b56:	mov	r0, r4
   11b58:	bl	ecd8 <__lshift>
   11b5c:	mov	r8, r0
   11b5e:	b.n	1175e <_dtoa_r+0x71e>
   11b60:	ldr	r3, [sp, #24]
   11b62:	sub.w	r3, r3, r9
   11b66:	str	r3, [sp, #36]	; 0x24
   11b68:	b.n	11520 <_dtoa_r+0x4e0>
   11b6a:	cmp	r3, #57	; 0x39
   11b6c:	beq.w	11c88 <_dtoa_r+0xc48>
   11b70:	mov	r9, r7
   11b72:	adds	r3, #1
   11b74:	b.n	11afa <_dtoa_r+0xaba>
   11b76:	ldr	r2, [sp, #16]
   11b78:	adds	r2, #1
   11b7a:	mov	r7, r6
   11b7c:	str	r2, [sp, #16]
   11b7e:	mov	r6, r8
   11b80:	b.n	11642 <_dtoa_r+0x602>
   11b82:	mov	r1, r5
   11b84:	mov	r0, r4
   11b86:	bl	ec18 <__pow5mult>
   11b8a:	mov	r5, r0
   11b8c:	b.n	11584 <_dtoa_r+0x544>
   11b8e:	nop
   11b90:	.word	0x20000df8
   11b94:	.word	0x200003a8
   11b98:	.word	0x20000380
   11b9c:	.word	0x7ff00000
   11ba0:	ldr	r3, [pc, #376]	; (11d1c <_dtoa_r+0xcdc>)
   11ba2:	vcvt.s32.f64	s11, d6
   11ba6:	add.w	ip, r3, r2, lsl #3
   11baa:	vldr	d3, [ip, #-8]
   11bae:	vcvt.f64.s32	d7, s11
   11bb2:	vsub.f64	d7, d6, d7
   11bb6:	vmov	d6, r0, r1
   11bba:	vmov	r1, s11
   11bbe:	vmul.f64	d3, d3, d6
   11bc2:	ldr	r0, [sp, #0]
   11bc4:	adds	r1, #48	; 0x30
   11bc6:	cmp	r2, #1
   11bc8:	strb.w	r1, [r0], #1
   11bcc:	beq.w	11cd6 <_dtoa_r+0xc96>
   11bd0:	vmov.f64	d4, #36	; 0x41200000  10.0
   11bd4:	ldr	r3, [sp, #0]
   11bd6:	adds	r1, r3, r2
   11bd8:	vmul.f64	d7, d7, d4
   11bdc:	vcvt.s32.f64	s13, d7
   11be0:	vmov	r3, s13
   11be4:	adds	r3, #48	; 0x30
   11be6:	strb.w	r3, [r0], #1
   11bea:	cmp	r1, r0
   11bec:	vcvt.f64.s32	d5, s13
   11bf0:	vsub.f64	d7, d7, d5
   11bf4:	bne.n	11bd8 <_dtoa_r+0xb98>
   11bf6:	vmov.f64	d6, #96	; 0x3f000000  0.5
   11bfa:	vadd.f64	d5, d3, d6
   11bfe:	vcmpe.f64	d5, d7
   11c02:	vmrs	APSR_nzcv, fpscr
   11c06:	bmi.w	113d0 <_dtoa_r+0x390>
   11c0a:	vsub.f64	d6, d6, d3
   11c0e:	vcmpe.f64	d6, d7
   11c12:	vmrs	APSR_nzcv, fpscr
   11c16:	ble.w	11434 <_dtoa_r+0x3f4>
   11c1a:	mov	r9, r1
   11c1c:	subs	r1, #1
   11c1e:	ldrb.w	r3, [r9, #-1]
   11c22:	cmp	r3, #48	; 0x30
   11c24:	beq.n	11c1a <_dtoa_r+0xbda>
   11c26:	adds	r3, r6, #1
   11c28:	str	r3, [sp, #16]
   11c2a:	b.n	116a0 <_dtoa_r+0x660>
   11c2c:	ldr	r2, [sp, #48]	; 0x30
   11c2e:	rsb	r2, r2, #54	; 0x36
   11c32:	b.n	119ea <_dtoa_r+0x9aa>
   11c34:	movs	r0, #2
   11c36:	vmov.f64	d6, d8
   11c3a:	b.w	112ce <_dtoa_r+0x28e>
   11c3e:	cmp.w	r9, #0
   11c42:	beq.w	119fa <_dtoa_r+0x9ba>
   11c46:	ldr	r2, [sp, #44]	; 0x2c
   11c48:	cmp	r2, #0
   11c4a:	ble.w	11434 <_dtoa_r+0x3f4>
   11c4e:	vmov.f64	d4, #36	; 0x41200000  10.0
   11c52:	vmul.f64	d6, d6, d4
   11c56:	adds	r0, #1
   11c58:	vmov	s15, r0
   11c5c:	ldr	r3, [sp, #16]
   11c5e:	vcvt.f64.s32	d5, s15
   11c62:	vmov.f64	d7, #28	; 0x40e00000  7.0
   11c66:	vfma.f64	d7, d6, d5
   11c6a:	vmov	ip, s15
   11c6e:	vmov	r0, r1, d7
   11c72:	subs	r6, r3, #1
   11c74:	sub.w	r1, ip, #54525952	; 0x3400000
   11c78:	b.w	1130a <_dtoa_r+0x2ca>
   11c7c:	ldr	r3, [sp, #16]
   11c7e:	adds	r3, #1
   11c80:	str	r3, [sp, #16]
   11c82:	movs	r3, #49	; 0x31
   11c84:	b.w	113ea <_dtoa_r+0x3aa>
   11c88:	ldr	r3, [sp, #16]
   11c8a:	mov	fp, r7
   11c8c:	adds	r3, #1
   11c8e:	str	r3, [sp, #16]
   11c90:	movs	r3, #57	; 0x39
   11c92:	mov	r7, r6
   11c94:	strb.w	r3, [fp], #1
   11c98:	mov	r6, r8
   11c9a:	b.n	11660 <_dtoa_r+0x620>
   11c9c:	mov.w	sl, #0
   11ca0:	mov	r6, sl
   11ca2:	b.n	1194c <_dtoa_r+0x90c>
   11ca4:	str	r2, [sp, #32]
   11ca6:	b.n	115a0 <_dtoa_r+0x560>
   11ca8:	adds	r3, r6, #1
   11caa:	str	r3, [sp, #16]
   11cac:	mov	r9, r1
   11cae:	b.n	116a0 <_dtoa_r+0x660>
   11cb0:	bne.w	11af8 <_dtoa_r+0xab8>
   11cb4:	lsls	r2, r3, #31
   11cb6:	bpl.w	11af8 <_dtoa_r+0xab8>
   11cba:	b.n	11aee <_dtoa_r+0xaae>
   11cbc:	cmp	r3, #57	; 0x39
   11cbe:	beq.n	11c88 <_dtoa_r+0xc48>
   11cc0:	cmp.w	r9, #0
   11cc4:	bgt.w	11af4 <_dtoa_r+0xab4>
   11cc8:	b.n	11af8 <_dtoa_r+0xab8>
   11cca:	ldr	r3, [sp, #4]
   11ccc:	cmp	r3, #2
   11cce:	bgt.w	11922 <_dtoa_r+0x8e2>
   11cd2:	str	r7, [sp, #16]
   11cd4:	b.n	1184c <_dtoa_r+0x80c>
   11cd6:	mov	r1, r0
   11cd8:	b.n	11bf6 <_dtoa_r+0xbb6>
   11cda:	ldr	r3, [sp, #4]
   11cdc:	cmp	r3, #2
   11cde:	bgt.w	11922 <_dtoa_r+0x8e2>
   11ce2:	ldr.w	r9, [sp, #44]	; 0x2c
   11ce6:	str	r7, [sp, #16]
   11ce8:	b.n	11742 <_dtoa_r+0x702>
   11cea:	movs	r0, #2
   11cec:	b.w	112ce <_dtoa_r+0x28e>
   11cf0:	ldr	r3, [pc, #44]	; (11d20 <_dtoa_r+0xce0>)
   11cf2:	ldr	r0, [pc, #48]	; (11d24 <_dtoa_r+0xce4>)
   11cf4:	movs	r2, #0
   11cf6:	movw	r1, #431	; 0x1af
   11cfa:	bl	10e60 <__assert_func>
   11cfe:	ldr	r3, [pc, #32]	; (11d20 <_dtoa_r+0xce0>)
   11d00:	ldr	r0, [pc, #32]	; (11d24 <_dtoa_r+0xce4>)
   11d02:	mov	r2, r7
   11d04:	movw	r1, #751	; 0x2ef
   11d08:	bl	10e60 <__assert_func>
   11d0c:	ldr	r3, [pc, #24]	; (11d28 <_dtoa_r+0xce8>)
   11d0e:	str	r3, [sp, #0]
   11d10:	b.w	110b8 <_dtoa_r+0x78>
   11d14:	ldr	r3, [sp, #8]
   11d16:	str	r3, [sp, #32]
   11d18:	b.n	1170a <_dtoa_r+0x6ca>
   11d1a:	nop
   11d1c:	.word	0x200003a8
   11d20:	.word	0x20000c78
   11d24:	.word	0x20000dfc
   11d28:	.word	0x20000dec

00011d2c <_wcrtomb_r>:
   11d2c:	push	{r4, r5, r6, lr}
   11d2e:	mov	r5, r0
   11d30:	sub	sp, #16
   11d32:	cbz	r3, 11d4c <_wcrtomb_r+0x20>
   11d34:	mov	r4, r3
   11d36:	cbz	r1, 11d54 <_wcrtomb_r+0x28>
   11d38:	ldr	r3, [pc, #56]	; (11d74 <_wcrtomb_r+0x48>)
   11d3a:	mov	r0, r5
   11d3c:	ldr.w	r6, [r3, #224]	; 0xe0
   11d40:	mov	r3, r4
   11d42:	blx	r6
   11d44:	adds	r3, r0, #1
   11d46:	beq.n	11d68 <_wcrtomb_r+0x3c>
   11d48:	add	sp, #16
   11d4a:	pop	{r4, r5, r6, pc}
   11d4c:	add.w	r4, r0, #260	; 0x104
   11d50:	cmp	r1, #0
   11d52:	bne.n	11d38 <_wcrtomb_r+0xc>
   11d54:	ldr	r2, [pc, #28]	; (11d74 <_wcrtomb_r+0x48>)
   11d56:	mov	r3, r4
   11d58:	ldr.w	r6, [r2, #224]	; 0xe0
   11d5c:	mov	r0, r5
   11d5e:	mov	r2, r1
   11d60:	add	r1, sp, #4
   11d62:	blx	r6
   11d64:	adds	r3, r0, #1
   11d66:	bne.n	11d48 <_wcrtomb_r+0x1c>
   11d68:	movs	r2, #0
   11d6a:	movs	r3, #138	; 0x8a
   11d6c:	str	r2, [r4, #0]
   11d6e:	str	r3, [r5, #0]
   11d70:	add	sp, #16
   11d72:	pop	{r4, r5, r6, pc}
   11d74:	.word	0x2000148c

00011d78 <_wcsrtombs_r>:
   11d78:	push	{r4, lr}
   11d7a:	sub	sp, #8
   11d7c:	ldr	r4, [sp, #16]
   11d7e:	strd	r3, r4, [sp]
   11d82:	mov.w	r3, #4294967295
   11d86:	bl	13518 <_wcsnrtombs_r>
   11d8a:	add	sp, #8
   11d8c:	pop	{r4, pc}
   11d8e:	nop

00011d90 <fiprintf>:
   11d90:	push	{r1, r2, r3}
   11d92:	push	{r4, lr}
   11d94:	sub	sp, #12
   11d96:	add	r3, sp, #20
   11d98:	ldr	r4, [pc, #24]	; (11db4 <fiprintf+0x24>)
   11d9a:	ldr.w	r2, [r3], #4
   11d9e:	str	r3, [sp, #4]
   11da0:	mov	r1, r0
   11da2:	ldr	r0, [r4, #0]
   11da4:	bl	11f30 <_vfiprintf_r>
   11da8:	add	sp, #12
   11daa:	ldmia.w	sp!, {r4, lr}
   11dae:	add	sp, #12
   11db0:	bx	lr
   11db2:	nop
   11db4:	.word	0x20001a14

00011db8 <__ssprint_r>:
   11db8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11dbc:	ldr	r3, [r2, #8]
   11dbe:	ldr	r7, [r2, #0]
   11dc0:	sub	sp, #12
   11dc2:	mov	sl, r2
   11dc4:	cmp	r3, #0
   11dc6:	beq.n	11eaa <__ssprint_r+0xf2>
   11dc8:	mov	r9, r0
   11dca:	ldr	r2, [r1, #8]
   11dcc:	ldr	r0, [r1, #0]
   11dce:	mov	r4, r1
   11dd0:	adds	r7, #8
   11dd2:	b.n	11e5c <__ssprint_r+0xa4>
   11dd4:	ldrh	r3, [r4, #12]
   11dd6:	tst.w	r3, #1152	; 0x480
   11dda:	beq.n	11e3a <__ssprint_r+0x82>
   11ddc:	ldrd	r1, r6, [r4, #16]
   11de0:	sub.w	r8, r0, r1
   11de4:	add.w	r6, r6, r6, lsl #1
   11de8:	add.w	r6, r6, r6, lsr #31
   11dec:	add.w	r0, r8, #1
   11df0:	asrs	r6, r6, #1
   11df2:	add	r0, r5
   11df4:	cmp	r0, r6
   11df6:	mov	r2, r6
   11df8:	itt	hi
   11dfa:	movhi	r6, r0
   11dfc:	movhi	r2, r6
   11dfe:	lsls	r3, r3, #21
   11e00:	bpl.n	11e72 <__ssprint_r+0xba>
   11e02:	mov	r1, r2
   11e04:	mov	r0, r9
   11e06:	bl	d2fc <_malloc_r>
   11e0a:	str	r0, [sp, #4]
   11e0c:	cmp	r0, #0
   11e0e:	beq.n	11e86 <__ssprint_r+0xce>
   11e10:	mov	r2, r8
   11e12:	ldr	r1, [r4, #16]
   11e14:	bl	a170 <memcpy>
   11e18:	ldrh	r2, [r4, #12]
   11e1a:	ldr	r3, [sp, #4]
   11e1c:	bic.w	r2, r2, #1152	; 0x480
   11e20:	orr.w	r2, r2, #128	; 0x80
   11e24:	strh	r2, [r4, #12]
   11e26:	sub.w	r2, r6, r8
   11e2a:	add.w	r0, r3, r8
   11e2e:	str	r6, [r4, #20]
   11e30:	str	r2, [r4, #8]
   11e32:	str	r3, [r4, #16]
   11e34:	str	r0, [r4, #0]
   11e36:	mov	r6, r5
   11e38:	mov	r8, r5
   11e3a:	mov	r2, r8
   11e3c:	mov	r1, fp
   11e3e:	bl	e018 <memmove>
   11e42:	ldr.w	r3, [sl, #8]
   11e46:	ldr	r2, [r4, #8]
   11e48:	ldr	r0, [r4, #0]
   11e4a:	subs	r2, r2, r6
   11e4c:	add	r0, r8
   11e4e:	subs	r3, r3, r5
   11e50:	str	r2, [r4, #8]
   11e52:	str	r0, [r4, #0]
   11e54:	str.w	r3, [sl, #8]
   11e58:	cbz	r3, 11eaa <__ssprint_r+0xf2>
   11e5a:	adds	r7, #8
   11e5c:	ldrd	fp, r5, [r7, #-8]
   11e60:	cmp	r5, #0
   11e62:	beq.n	11e5a <__ssprint_r+0xa2>
   11e64:	cmp	r2, r5
   11e66:	mov	r6, r2
   11e68:	mov	r8, r2
   11e6a:	bls.n	11dd4 <__ssprint_r+0x1c>
   11e6c:	mov	r6, r5
   11e6e:	mov	r8, r5
   11e70:	b.n	11e3a <__ssprint_r+0x82>
   11e72:	mov	r0, r9
   11e74:	bl	d874 <_realloc_r>
   11e78:	mov	r3, r0
   11e7a:	cmp	r0, #0
   11e7c:	bne.n	11e26 <__ssprint_r+0x6e>
   11e7e:	ldr	r1, [r4, #16]
   11e80:	mov	r0, r9
   11e82:	bl	e684 <_free_r>
   11e86:	ldrh	r3, [r4, #12]
   11e88:	movs	r2, #12
   11e8a:	orr.w	r3, r3, #64	; 0x40
   11e8e:	str.w	r2, [r9]
   11e92:	mov.w	r0, #4294967295
   11e96:	strh	r3, [r4, #12]
   11e98:	movs	r2, #0
   11e9a:	movs	r3, #0
   11e9c:	str.w	r2, [sl, #8]
   11ea0:	str.w	r3, [sl, #4]
   11ea4:	add	sp, #12
   11ea6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11eaa:	movs	r0, #0
   11eac:	movs	r3, #0
   11eae:	str.w	r3, [sl, #4]
   11eb2:	add	sp, #12
   11eb4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00011eb8 <__sprint_r.part.0>:
   11eb8:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11ebc:	ldr	r3, [r1, #100]	; 0x64
   11ebe:	lsls	r4, r3, #18
   11ec0:	mov	r8, r2
   11ec2:	bpl.n	11f20 <__sprint_r.part.0+0x68>
   11ec4:	ldr	r3, [r2, #8]
   11ec6:	ldr	r2, [r2, #0]
   11ec8:	cbz	r3, 11f1c <__sprint_r.part.0+0x64>
   11eca:	mov	fp, r1
   11ecc:	mov	r6, r0
   11ece:	add.w	r9, r2, #8
   11ed2:	ldrd	r5, sl, [r9, #-8]
   11ed6:	movs.w	r7, sl, lsr #2
   11eda:	beq.n	11f08 <__sprint_r.part.0+0x50>
   11edc:	subs	r5, #4
   11ede:	movs	r4, #0
   11ee0:	b.n	11ee6 <__sprint_r.part.0+0x2e>
   11ee2:	cmp	r7, r4
   11ee4:	beq.n	11f04 <__sprint_r.part.0+0x4c>
   11ee6:	ldr.w	r1, [r5, #4]!
   11eea:	mov	r2, fp
   11eec:	mov	r0, r6
   11eee:	bl	133a8 <_fputwc_r>
   11ef2:	adds	r3, r0, #1
   11ef4:	add.w	r4, r4, #1
   11ef8:	bne.n	11ee2 <__sprint_r.part.0+0x2a>
   11efa:	movs	r3, #0
   11efc:	strd	r3, r3, [r8, #4]
   11f00:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11f04:	ldr.w	r3, [r8, #8]
   11f08:	bic.w	sl, sl, #3
   11f0c:	sub.w	r3, r3, sl
   11f10:	str.w	r3, [r8, #8]
   11f14:	add.w	r9, r9, #8
   11f18:	cmp	r3, #0
   11f1a:	bne.n	11ed2 <__sprint_r.part.0+0x1a>
   11f1c:	movs	r0, #0
   11f1e:	b.n	11efa <__sprint_r.part.0+0x42>
   11f20:	bl	12f3c <__sfvwrite_r>
   11f24:	movs	r3, #0
   11f26:	strd	r3, r3, [r8, #4]
   11f2a:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11f2e:	nop

00011f30 <_vfiprintf_r>:
   11f30:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11f34:	vpush	{d8}
   11f38:	sub	sp, #276	; 0x114
   11f3a:	add.w	sl, sp, #80	; 0x50
   11f3e:	mov	fp, r0
   11f40:	vmov	s16, r1
   11f44:	mov	r6, r2
   11f46:	movs	r1, #0
   11f48:	movs	r2, #8
   11f4a:	mov	r0, sl
   11f4c:	mov	r4, r3
   11f4e:	str	r3, [sp, #28]
   11f50:	bl	e110 <memset>
   11f54:	cmp.w	fp, #0
   11f58:	beq.n	11f64 <_vfiprintf_r+0x34>
   11f5a:	ldr.w	r3, [fp, #52]	; 0x34
   11f5e:	cmp	r3, #0
   11f60:	beq.w	12ca4 <_vfiprintf_r+0xd74>
   11f64:	vmov	r2, s16
   11f68:	ldr	r3, [r2, #100]	; 0x64
   11f6a:	lsls	r3, r3, #31
   11f6c:	bpl.w	12996 <_vfiprintf_r+0xa66>
   11f70:	ldrsh.w	r1, [r2, #12]
   11f74:	uxth	r2, r1
   11f76:	lsls	r5, r2, #18
   11f78:	bmi.n	11f92 <_vfiprintf_r+0x62>
   11f7a:	vmov	r3, s16
   11f7e:	orr.w	r1, r1, #8192	; 0x2000
   11f82:	strh	r1, [r3, #12]
   11f84:	ldr	r3, [r3, #100]	; 0x64
   11f86:	uxth	r2, r1
   11f88:	vmov	r1, s16
   11f8c:	bic.w	r3, r3, #8192	; 0x2000
   11f90:	str	r3, [r1, #100]	; 0x64
   11f92:	lsls	r0, r2, #28
   11f94:	bpl.w	121a2 <_vfiprintf_r+0x272>
   11f98:	vmov	r3, s16
   11f9c:	ldr	r3, [r3, #16]
   11f9e:	cmp	r3, #0
   11fa0:	beq.w	121a2 <_vfiprintf_r+0x272>
   11fa4:	and.w	r3, r2, #26
   11fa8:	cmp	r3, #10
   11faa:	beq.w	121c2 <_vfiprintf_r+0x292>
   11fae:	movs	r3, #0
   11fb0:	strd	r3, r3, [sp, #100]	; 0x64
   11fb4:	strd	r3, r3, [sp, #52]	; 0x34
   11fb8:	add	r2, sp, #108	; 0x6c
   11fba:	str	r3, [sp, #48]	; 0x30
   11fbc:	str	r2, [sp, #96]	; 0x60
   11fbe:	mov	r9, r2
   11fc0:	str	r3, [sp, #44]	; 0x2c
   11fc2:	str	r3, [sp, #20]
   11fc4:	mov	r8, r6
   11fc6:	mov	r4, r8
   11fc8:	ldr	r3, [pc, #672]	; (1226c <_vfiprintf_r+0x33c>)
   11fca:	ldr.w	r5, [r3, #228]	; 0xe4
   11fce:	bl	e2a4 <__locale_mb_cur_max>
   11fd2:	mov	r2, r4
   11fd4:	mov	r3, r0
   11fd6:	add	r1, sp, #72	; 0x48
   11fd8:	str.w	sl, [sp]
   11fdc:	mov	r0, fp
   11fde:	blx	r5
   11fe0:	cmp	r0, #0
   11fe2:	beq.w	12270 <_vfiprintf_r+0x340>
   11fe6:	blt.w	1225c <_vfiprintf_r+0x32c>
   11fea:	ldr	r2, [sp, #72]	; 0x48
   11fec:	cmp	r2, #37	; 0x25
   11fee:	mov	r3, r0
   11ff0:	beq.n	11ff6 <_vfiprintf_r+0xc6>
   11ff2:	add	r4, r3
   11ff4:	b.n	11fc8 <_vfiprintf_r+0x98>
   11ff6:	subs.w	r6, r4, r8
   11ffa:	mov	r5, r0
   11ffc:	bne.w	12278 <_vfiprintf_r+0x348>
   12000:	movs	r3, #0
   12002:	ldrb	r1, [r4, #1]
   12004:	strb.w	r3, [sp, #67]	; 0x43
   12008:	add.w	r8, r4, #1
   1200c:	str	r3, [sp, #24]
   1200e:	mov.w	r7, #4294967295
   12012:	mov	r6, r3
   12014:	movs	r4, #43	; 0x2b
   12016:	add.w	r8, r8, #1
   1201a:	sub.w	r3, r1, #32
   1201e:	cmp	r3, #90	; 0x5a
   12020:	bhi.w	12314 <_vfiprintf_r+0x3e4>
   12024:	tbh	[pc, r3, lsl #1]
   12028:	.word	0x017602b5
   1202c:	.word	0x02b00176
   12030:	.word	0x01760176
   12034:	.word	0x006a0176
   12038:	.word	0x01760176
   1203c:	.word	0x028d027d
   12040:	.word	0x02880176
   12044:	.word	0x01760297
   12048:	.word	0x005b0292
   1204c:	.word	0x005b005b
   12050:	.word	0x005b005b
   12054:	.word	0x005b005b
   12058:	.word	0x005b005b
   1205c:	.word	0x01760176
   12060:	.word	0x01760176
   12064:	.word	0x01760176
   12068:	.word	0x01760176
   1206c:	.word	0x025c0176
   12070:	.word	0x01760084
   12074:	.word	0x01760176
   12078:	.word	0x01760176
   1207c:	.word	0x01760176
   12080:	.word	0x01760176
   12084:	.word	0x00e80176
   12088:	.word	0x01760176
   1208c:	.word	0x02330176
   12090:	.word	0x02da0176
   12094:	.word	0x01760176
   12098:	.word	0x0176058b
   1209c:	.word	0x01760176
   120a0:	.word	0x01760176
   120a4:	.word	0x01760176
   120a8:	.word	0x01760176
   120ac:	.word	0x025c0176
   120b0:	.word	0x01760086
   120b4:	.word	0x01760176
   120b8:	.word	0x008602cd
   120bc:	.word	0x0176007f
   120c0:	.word	0x017602c0
   120c4:	.word	0x00ea02fd
   120c8:	.word	0x007f02ed
   120cc:	.word	0x02330176
   120d0:	.word	0x0569007c
   120d4:	.word	0x01760176
   120d8:	.word	0x0176056b
   120dc:	.short	0x007c
   120de:	sub.w	r3, r1, #48	; 0x30
   120e2:	movs	r2, #0
   120e4:	ldrb.w	r1, [r8], #1
   120e8:	add.w	r2, r2, r2, lsl #2
   120ec:	add.w	r2, r3, r2, lsl #1
   120f0:	sub.w	r3, r1, #48	; 0x30
   120f4:	cmp	r3, #9
   120f6:	bls.n	120e4 <_vfiprintf_r+0x1b4>
   120f8:	str	r2, [sp, #24]
   120fa:	b.n	1201a <_vfiprintf_r+0xea>
   120fc:	mov	r0, fp
   120fe:	bl	10de0 <_localeconv_r>
   12102:	ldr	r3, [r0, #4]
   12104:	str	r3, [sp, #52]	; 0x34
   12106:	mov	r0, r3
   12108:	bl	e480 <strlen>
   1210c:	str	r0, [sp, #56]	; 0x38
   1210e:	mov	r5, r0
   12110:	mov	r0, fp
   12112:	bl	10de0 <_localeconv_r>
   12116:	ldr	r3, [r0, #8]
   12118:	str	r3, [sp, #44]	; 0x2c
   1211a:	cmp	r5, #0
   1211c:	bne.w	12acc <_vfiprintf_r+0xb9c>
   12120:	ldrb.w	r1, [r8]
   12124:	b.n	12016 <_vfiprintf_r+0xe6>
   12126:	ldrb.w	r1, [r8]
   1212a:	orr.w	r6, r6, #32
   1212e:	b.n	12016 <_vfiprintf_r+0xe6>
   12130:	orr.w	r6, r6, #16
   12134:	lsls	r4, r6, #26
   12136:	bpl.w	12456 <_vfiprintf_r+0x526>
   1213a:	ldr	r3, [sp, #28]
   1213c:	adds	r3, #7
   1213e:	bic.w	r3, r3, #7
   12142:	mov	r2, r3
   12144:	ldr	r1, [r3, #4]
   12146:	ldr.w	r3, [r2], #8
   1214a:	str	r2, [sp, #28]
   1214c:	mov	r2, r1
   1214e:	cmp	r1, #0
   12150:	blt.w	12a34 <_vfiprintf_r+0xb04>
   12154:	adds	r1, r7, #1
   12156:	beq.w	12c9e <_vfiprintf_r+0xd6e>
   1215a:	bic.w	r1, r6, #128	; 0x80
   1215e:	str	r1, [sp, #12]
   12160:	orrs.w	r1, r3, r2
   12164:	beq.w	129e6 <_vfiprintf_r+0xab6>
   12168:	cmp	r3, #10
   1216a:	sbcs.w	r1, r2, #0
   1216e:	bcs.w	12bf4 <_vfiprintf_r+0xcc4>
   12172:	adds	r3, #48	; 0x30
   12174:	strb.w	r3, [sp, #271]	; 0x10f
   12178:	ldr	r6, [sp, #12]
   1217a:	movs	r3, #1
   1217c:	str	r3, [sp, #16]
   1217e:	addw	r4, sp, #271	; 0x10f
   12182:	ldr	r3, [sp, #16]
   12184:	cmp	r3, r7
   12186:	it	lt
   12188:	movlt	r3, r7
   1218a:	str	r3, [sp, #12]
   1218c:	movs	r3, #0
   1218e:	str	r3, [sp, #32]
   12190:	ldrb.w	r3, [sp, #67]	; 0x43
   12194:	cmp	r3, #0
   12196:	beq.w	12330 <_vfiprintf_r+0x400>
   1219a:	ldr	r3, [sp, #12]
   1219c:	adds	r3, #1
   1219e:	str	r3, [sp, #12]
   121a0:	b.n	12330 <_vfiprintf_r+0x400>
   121a2:	vmov	r1, s16
   121a6:	mov	r0, fp
   121a8:	vmov	r5, s16
   121ac:	bl	13230 <__swsetup_r>
   121b0:	cmp	r0, #0
   121b2:	bne.w	12e5a <_vfiprintf_r+0xf2a>
   121b6:	ldrh	r2, [r5, #12]
   121b8:	and.w	r3, r2, #26
   121bc:	cmp	r3, #10
   121be:	bne.w	11fae <_vfiprintf_r+0x7e>
   121c2:	vmov	r1, s16
   121c6:	ldrsh.w	r3, [r1, #14]
   121ca:	cmp	r3, #0
   121cc:	blt.w	11fae <_vfiprintf_r+0x7e>
   121d0:	ldr	r3, [r1, #100]	; 0x64
   121d2:	lsls	r3, r3, #31
   121d4:	bmi.n	121dc <_vfiprintf_r+0x2ac>
   121d6:	lsls	r7, r2, #22
   121d8:	bpl.w	12e00 <_vfiprintf_r+0xed0>
   121dc:	vmov	r1, s16
   121e0:	mov	r3, r4
   121e2:	mov	r2, r6
   121e4:	mov	r0, fp
   121e6:	bl	12ebc <__sbprintf>
   121ea:	str	r0, [sp, #20]
   121ec:	ldr	r0, [sp, #20]
   121ee:	add	sp, #276	; 0x114
   121f0:	vpop	{d8}
   121f4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   121f8:	orr.w	r6, r6, #16
   121fc:	ands.w	r2, r6, #32
   12200:	beq.w	12470 <_vfiprintf_r+0x540>
   12204:	ldr	r3, [sp, #28]
   12206:	adds	r3, #7
   12208:	bic.w	r3, r3, #7
   1220c:	mov	r1, r3
   1220e:	ldr	r2, [r3, #4]
   12210:	ldr.w	r3, [r1], #8
   12214:	str	r1, [sp, #28]
   12216:	bic.w	r1, r6, #1024	; 0x400
   1221a:	str	r1, [sp, #12]
   1221c:	movs	r1, #0
   1221e:	movs	r0, #0
   12220:	strb.w	r0, [sp, #67]	; 0x43
   12224:	adds	r0, r7, #1
   12226:	beq.w	1264a <_vfiprintf_r+0x71a>
   1222a:	ldr	r0, [sp, #12]
   1222c:	bic.w	r6, r0, #128	; 0x80
   12230:	orrs.w	r0, r3, r2
   12234:	bne.w	12648 <_vfiprintf_r+0x718>
   12238:	cmp	r7, #0
   1223a:	bne.w	12cae <_vfiprintf_r+0xd7e>
   1223e:	cmp	r1, #0
   12240:	bne.w	129ee <_vfiprintf_r+0xabe>
   12244:	ldr	r3, [sp, #12]
   12246:	ands.w	r3, r3, #1
   1224a:	str	r3, [sp, #16]
   1224c:	beq.w	12a72 <_vfiprintf_r+0xb42>
   12250:	movs	r3, #48	; 0x30
   12252:	strb.w	r3, [sp, #271]	; 0x10f
   12256:	addw	r4, sp, #271	; 0x10f
   1225a:	b.n	12182 <_vfiprintf_r+0x252>
   1225c:	movs	r2, #8
   1225e:	movs	r1, #0
   12260:	mov	r0, sl
   12262:	bl	e110 <memset>
   12266:	movs	r3, #1
   12268:	add	r4, r3
   1226a:	b.n	11fc8 <_vfiprintf_r+0x98>
   1226c:	.word	0x2000148c
   12270:	subs.w	r6, r4, r8
   12274:	mov	r5, r0
   12276:	beq.n	122b0 <_vfiprintf_r+0x380>
   12278:	ldr	r3, [sp, #100]	; 0x64
   1227a:	ldr	r2, [sp, #104]	; 0x68
   1227c:	adds	r3, #1
   1227e:	add	r2, r6
   12280:	cmp	r3, #7
   12282:	strd	r8, r6, [r9]
   12286:	str	r2, [sp, #104]	; 0x68
   12288:	str	r3, [sp, #100]	; 0x64
   1228a:	ble.n	122c6 <_vfiprintf_r+0x396>
   1228c:	cmp	r2, #0
   1228e:	beq.w	129de <_vfiprintf_r+0xaae>
   12292:	vmov	r1, s16
   12296:	add	r2, sp, #96	; 0x60
   12298:	mov	r0, fp
   1229a:	bl	11eb8 <__sprint_r.part.0>
   1229e:	cbnz	r0, 122ea <_vfiprintf_r+0x3ba>
   122a0:	add.w	r9, sp, #108	; 0x6c
   122a4:	ldr	r3, [sp, #20]
   122a6:	add	r3, r6
   122a8:	str	r3, [sp, #20]
   122aa:	cmp	r5, #0
   122ac:	bne.w	12000 <_vfiprintf_r+0xd0>
   122b0:	ldr	r3, [sp, #104]	; 0x68
   122b2:	cmp	r3, #0
   122b4:	bne.w	12e3a <_vfiprintf_r+0xf0a>
   122b8:	vmov	r3, s16
   122bc:	movs	r2, #0
   122be:	ldrsh.w	r3, [r3, #12]
   122c2:	str	r2, [sp, #100]	; 0x64
   122c4:	b.n	122f2 <_vfiprintf_r+0x3c2>
   122c6:	add.w	r9, r9, #8
   122ca:	b.n	122a4 <_vfiprintf_r+0x374>
   122cc:	vmov	r1, s16
   122d0:	add	r2, sp, #96	; 0x60
   122d2:	mov	r0, fp
   122d4:	bl	11eb8 <__sprint_r.part.0>
   122d8:	cmp	r0, #0
   122da:	beq.w	1242a <_vfiprintf_r+0x4fa>
   122de:	ldr	r3, [sp, #32]
   122e0:	cbz	r3, 122ea <_vfiprintf_r+0x3ba>
   122e2:	ldr	r1, [sp, #32]
   122e4:	mov	r0, fp
   122e6:	bl	e684 <_free_r>
   122ea:	vmov	r3, s16
   122ee:	ldrsh.w	r3, [r3, #12]
   122f2:	vmov	r2, s16
   122f6:	ldr	r2, [r2, #100]	; 0x64
   122f8:	tst.w	r2, #1
   122fc:	uxth	r2, r3
   122fe:	beq.w	12442 <_vfiprintf_r+0x512>
   12302:	lsls	r0, r2, #25
   12304:	bmi.w	12e6c <_vfiprintf_r+0xf3c>
   12308:	ldr	r0, [sp, #20]
   1230a:	add	sp, #276	; 0x114
   1230c:	vpop	{d8}
   12310:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12314:	cmp	r1, #0
   12316:	beq.n	122b0 <_vfiprintf_r+0x380>
   12318:	movs	r3, #0
   1231a:	strb.w	r3, [sp, #67]	; 0x43
   1231e:	movs	r3, #1
   12320:	strd	r3, r3, [sp, #12]
   12324:	strb.w	r1, [sp, #172]	; 0xac
   12328:	add	r4, sp, #172	; 0xac
   1232a:	movs	r3, #0
   1232c:	str	r3, [sp, #32]
   1232e:	mov	r7, r3
   12330:	ands.w	r3, r6, #2
   12334:	str	r3, [sp, #36]	; 0x24
   12336:	beq.n	1233e <_vfiprintf_r+0x40e>
   12338:	ldr	r3, [sp, #12]
   1233a:	adds	r3, #2
   1233c:	str	r3, [sp, #12]
   1233e:	ands.w	r3, r6, #132	; 0x84
   12342:	str	r3, [sp, #40]	; 0x28
   12344:	bne.n	12352 <_vfiprintf_r+0x422>
   12346:	ldr	r3, [sp, #24]
   12348:	ldr	r2, [sp, #12]
   1234a:	subs	r5, r3, r2
   1234c:	cmp	r5, #0
   1234e:	bgt.w	12848 <_vfiprintf_r+0x918>
   12352:	ldrd	r0, r3, [sp, #100]	; 0x64
   12356:	adds	r1, r0, #1
   12358:	ldrb.w	r2, [sp, #67]	; 0x43
   1235c:	cbz	r2, 12380 <_vfiprintf_r+0x450>
   1235e:	movs	r2, #1
   12360:	adds	r3, #1
   12362:	str.w	r2, [r9, #4]
   12366:	cmp	r1, #7
   12368:	add.w	r2, sp, #67	; 0x43
   1236c:	strd	r1, r3, [sp, #100]	; 0x64
   12370:	str.w	r2, [r9]
   12374:	bgt.w	1280c <_vfiprintf_r+0x8dc>
   12378:	mov	r0, r1
   1237a:	add.w	r9, r9, #8
   1237e:	adds	r1, #1
   12380:	ldr	r2, [sp, #36]	; 0x24
   12382:	cbz	r2, 123be <_vfiprintf_r+0x48e>
   12384:	add	r2, sp, #68	; 0x44
   12386:	adds	r3, #2
   12388:	str.w	r2, [r9]
   1238c:	cmp	r1, #7
   1238e:	mov.w	r2, #2
   12392:	strd	r1, r3, [sp, #100]	; 0x64
   12396:	str.w	r2, [r9, #4]
   1239a:	ble.w	1283e <_vfiprintf_r+0x90e>
   1239e:	cmp	r3, #0
   123a0:	beq.w	12a2a <_vfiprintf_r+0xafa>
   123a4:	vmov	r1, s16
   123a8:	add	r2, sp, #96	; 0x60
   123aa:	mov	r0, fp
   123ac:	bl	11eb8 <__sprint_r.part.0>
   123b0:	cmp	r0, #0
   123b2:	bne.n	122de <_vfiprintf_r+0x3ae>
   123b4:	ldrd	r0, r3, [sp, #100]	; 0x64
   123b8:	add.w	r9, sp, #108	; 0x6c
   123bc:	adds	r1, r0, #1
   123be:	ldr	r2, [sp, #40]	; 0x28
   123c0:	cmp	r2, #128	; 0x80
   123c2:	beq.w	126ce <_vfiprintf_r+0x79e>
   123c6:	ldr	r2, [sp, #16]
   123c8:	subs	r5, r7, r2
   123ca:	cmp	r5, #0
   123cc:	bgt.w	1277e <_vfiprintf_r+0x84e>
   123d0:	ldr	r2, [sp, #16]
   123d2:	str.w	r4, [r9]
   123d6:	add	r3, r2
   123d8:	cmp	r1, #7
   123da:	strd	r1, r3, [sp, #100]	; 0x64
   123de:	str.w	r2, [r9, #4]
   123e2:	ble.w	126c2 <_vfiprintf_r+0x792>
   123e6:	cmp	r3, #0
   123e8:	beq.w	128d6 <_vfiprintf_r+0x9a6>
   123ec:	vmov	r1, s16
   123f0:	add	r2, sp, #96	; 0x60
   123f2:	mov	r0, fp
   123f4:	bl	11eb8 <__sprint_r.part.0>
   123f8:	cmp	r0, #0
   123fa:	bne.w	122de <_vfiprintf_r+0x3ae>
   123fe:	ldr	r3, [sp, #104]	; 0x68
   12400:	add.w	r9, sp, #108	; 0x6c
   12404:	lsls	r5, r6, #29
   12406:	bpl.n	12414 <_vfiprintf_r+0x4e4>
   12408:	ldr	r2, [sp, #24]
   1240a:	ldr	r1, [sp, #12]
   1240c:	subs	r4, r2, r1
   1240e:	cmp	r4, #0
   12410:	bgt.w	128ea <_vfiprintf_r+0x9ba>
   12414:	ldrd	r2, r1, [sp, #20]
   12418:	ldr	r0, [sp, #12]
   1241a:	cmp	r1, r0
   1241c:	ite	ge
   1241e:	addge	r2, r2, r1
   12420:	addlt	r2, r2, r0
   12422:	str	r2, [sp, #20]
   12424:	cmp	r3, #0
   12426:	bne.w	122cc <_vfiprintf_r+0x39c>
   1242a:	ldr	r1, [sp, #32]
   1242c:	movs	r3, #0
   1242e:	str	r3, [sp, #100]	; 0x64
   12430:	cmp	r1, #0
   12432:	beq.w	126c8 <_vfiprintf_r+0x798>
   12436:	mov	r0, fp
   12438:	bl	e684 <_free_r>
   1243c:	add.w	r9, sp, #108	; 0x6c
   12440:	b.n	11fc6 <_vfiprintf_r+0x96>
   12442:	lsls	r4, r3, #22
   12444:	bmi.w	12302 <_vfiprintf_r+0x3d2>
   12448:	vmov	r4, s16
   1244c:	ldr	r0, [r4, #88]	; 0x58
   1244e:	bl	e3dc <__retarget_lock_release_recursive>
   12452:	ldrh	r2, [r4, #12]
   12454:	b.n	12302 <_vfiprintf_r+0x3d2>
   12456:	lsls	r0, r6, #27
   12458:	ldr	r2, [sp, #28]
   1245a:	bmi.w	12a9c <_vfiprintf_r+0xb6c>
   1245e:	lsls	r1, r6, #25
   12460:	bpl.w	12a96 <_vfiprintf_r+0xb66>
   12464:	ldrsh.w	r3, [r2], #4
   12468:	str	r2, [sp, #28]
   1246a:	asrs	r2, r3, #31
   1246c:	mov	r1, r2
   1246e:	b.n	1214e <_vfiprintf_r+0x21e>
   12470:	ands.w	r3, r6, #16
   12474:	ldr	r1, [sp, #28]
   12476:	bne.w	12a8c <_vfiprintf_r+0xb5c>
   1247a:	ands.w	r0, r6, #64	; 0x40
   1247e:	beq.w	12a84 <_vfiprintf_r+0xb54>
   12482:	mov	r2, r3
   12484:	ldr.w	r3, [r1], #4
   12488:	str	r1, [sp, #28]
   1248a:	uxth	r3, r3
   1248c:	b.n	12216 <_vfiprintf_r+0x2e6>
   1248e:	ldr	r3, [sp, #28]
   12490:	mov	r2, r3
   12492:	movs	r3, #0
   12494:	strb.w	r3, [sp, #67]	; 0x43
   12498:	mov	r3, r2
   1249a:	ldr.w	r4, [r3], #4
   1249e:	str	r3, [sp, #12]
   124a0:	cmp	r4, #0
   124a2:	beq.w	12cca <_vfiprintf_r+0xd9a>
   124a6:	cmp	r1, #83	; 0x53
   124a8:	beq.w	12b76 <_vfiprintf_r+0xc46>
   124ac:	ands.w	r5, r6, #16
   124b0:	bne.w	12b76 <_vfiprintf_r+0xc46>
   124b4:	adds	r3, r7, #1
   124b6:	beq.w	12e20 <_vfiprintf_r+0xef0>
   124ba:	mov	r2, r7
   124bc:	mov	r1, r5
   124be:	mov	r0, r4
   124c0:	bl	e3e0 <memchr>
   124c4:	str	r0, [sp, #32]
   124c6:	cmp	r0, #0
   124c8:	beq.w	12e0a <_vfiprintf_r+0xeda>
   124cc:	subs	r3, r0, r4
   124ce:	ldr	r2, [sp, #12]
   124d0:	str	r3, [sp, #16]
   124d2:	bic.w	r3, r3, r3, asr #31
   124d6:	mov	r7, r5
   124d8:	str	r2, [sp, #28]
   124da:	str	r3, [sp, #12]
   124dc:	str	r5, [sp, #32]
   124de:	b.n	12190 <_vfiprintf_r+0x260>
   124e0:	cmp	r1, #67	; 0x43
   124e2:	beq.n	124ea <_vfiprintf_r+0x5ba>
   124e4:	lsls	r5, r6, #27
   124e6:	bpl.w	12b44 <_vfiprintf_r+0xc14>
   124ea:	ldr	r5, [sp, #28]
   124ec:	movs	r2, #8
   124ee:	movs	r1, #0
   124f0:	add	r0, sp, #88	; 0x58
   124f2:	add	r4, sp, #172	; 0xac
   124f4:	bl	e110 <memset>
   124f8:	add	r3, sp, #88	; 0x58
   124fa:	ldr.w	r2, [r5], #4
   124fe:	mov	r1, r4
   12500:	mov	r0, fp
   12502:	bl	11d2c <_wcrtomb_r>
   12506:	mov	r3, r0
   12508:	adds	r3, #1
   1250a:	str	r0, [sp, #16]
   1250c:	beq.w	12e76 <_vfiprintf_r+0xf46>
   12510:	ldr	r3, [sp, #16]
   12512:	str	r5, [sp, #28]
   12514:	bic.w	r3, r3, r3, asr #31
   12518:	str	r3, [sp, #12]
   1251a:	movs	r3, #0
   1251c:	strb.w	r3, [sp, #67]	; 0x43
   12520:	b.n	1232a <_vfiprintf_r+0x3fa>
   12522:	ldr	r3, [sp, #28]
   12524:	ldr.w	r2, [r3], #4
   12528:	str	r2, [sp, #24]
   1252a:	cmp	r2, #0
   1252c:	bge.w	12a68 <_vfiprintf_r+0xb38>
   12530:	ldr	r2, [sp, #24]
   12532:	negs	r2, r2
   12534:	strd	r2, r3, [sp, #24]
   12538:	ldrb.w	r1, [r8]
   1253c:	orr.w	r6, r6, #4
   12540:	b.n	12016 <_vfiprintf_r+0xe6>
   12542:	ldrb.w	r1, [r8]
   12546:	strb.w	r4, [sp, #67]	; 0x43
   1254a:	b.n	12016 <_vfiprintf_r+0xe6>
   1254c:	ldrb.w	r1, [r8]
   12550:	orr.w	r6, r6, #128	; 0x80
   12554:	b.n	12016 <_vfiprintf_r+0xe6>
   12556:	mov	r2, r8
   12558:	ldrb.w	r1, [r2], #1
   1255c:	cmp	r1, #42	; 0x2a
   1255e:	beq.w	12e8e <_vfiprintf_r+0xf5e>
   12562:	sub.w	r3, r1, #48	; 0x30
   12566:	cmp	r3, #9
   12568:	mov	r8, r2
   1256a:	mov.w	r7, #0
   1256e:	bhi.w	1201a <_vfiprintf_r+0xea>
   12572:	ldrb.w	r1, [r8], #1
   12576:	add.w	r7, r7, r7, lsl #2
   1257a:	add.w	r7, r3, r7, lsl #1
   1257e:	sub.w	r3, r1, #48	; 0x30
   12582:	cmp	r3, #9
   12584:	bls.n	12572 <_vfiprintf_r+0x642>
   12586:	b.n	1201a <_vfiprintf_r+0xea>
   12588:	ldrb.w	r1, [r8]
   1258c:	orr.w	r6, r6, #1
   12590:	b.n	12016 <_vfiprintf_r+0xe6>
   12592:	ldrb.w	r3, [sp, #67]	; 0x43
   12596:	cmp	r3, #0
   12598:	bne.w	12120 <_vfiprintf_r+0x1f0>
   1259c:	movs	r3, #32
   1259e:	ldrb.w	r1, [r8]
   125a2:	strb.w	r3, [sp, #67]	; 0x43
   125a6:	b.n	12016 <_vfiprintf_r+0xe6>
   125a8:	ldrb.w	r1, [r8]
   125ac:	cmp	r1, #108	; 0x6c
   125ae:	ittte	eq
   125b0:	ldrbeq.w	r1, [r8, #1]
   125b4:	orreq.w	r6, r6, #32
   125b8:	addeq.w	r8, r8, #1
   125bc:	orrne.w	r6, r6, #16
   125c0:	b.n	12016 <_vfiprintf_r+0xe6>
   125c2:	ldrb.w	r1, [r8]
   125c6:	cmp	r1, #104	; 0x68
   125c8:	ittte	eq
   125ca:	ldrbeq.w	r1, [r8, #1]
   125ce:	orreq.w	r6, r6, #512	; 0x200
   125d2:	addeq.w	r8, r8, #1
   125d6:	orrne.w	r6, r6, #64	; 0x40
   125da:	b.n	12016 <_vfiprintf_r+0xe6>
   125dc:	orr.w	r3, r6, #16
   125e0:	str	r3, [sp, #12]
   125e2:	ldr	r3, [sp, #12]
   125e4:	ands.w	r2, r3, #32
   125e8:	beq.w	129f8 <_vfiprintf_r+0xac8>
   125ec:	ldr	r3, [sp, #28]
   125ee:	adds	r3, #7
   125f0:	bic.w	r3, r3, #7
   125f4:	mov	r1, r3
   125f6:	ldr	r2, [r3, #4]
   125f8:	ldr.w	r3, [r1], #8
   125fc:	str	r1, [sp, #28]
   125fe:	movs	r1, #1
   12600:	b.n	1221e <_vfiprintf_r+0x2ee>
   12602:	ldr	r2, [sp, #28]
   12604:	orr.w	r3, r6, #2
   12608:	str	r3, [sp, #12]
   1260a:	ldr.w	r3, [r2], #4
   1260e:	str	r2, [sp, #28]
   12610:	movw	r2, #30768	; 0x7830
   12614:	strh.w	r2, [sp, #68]	; 0x44
   12618:	ldr	r2, [pc, #736]	; (128fc <_vfiprintf_r+0x9cc>)
   1261a:	str	r2, [sp, #48]	; 0x30
   1261c:	movs	r1, #2
   1261e:	movs	r2, #0
   12620:	b.n	1221e <_vfiprintf_r+0x2ee>
   12622:	lsls	r7, r6, #26
   12624:	bmi.w	12ab8 <_vfiprintf_r+0xb88>
   12628:	lsls	r5, r6, #27
   1262a:	bmi.w	12cba <_vfiprintf_r+0xd8a>
   1262e:	lsls	r4, r6, #25
   12630:	bmi.w	12dde <_vfiprintf_r+0xeae>
   12634:	lsls	r0, r6, #22
   12636:	bpl.w	12cba <_vfiprintf_r+0xd8a>
   1263a:	ldr	r3, [sp, #28]
   1263c:	ldr	r1, [sp, #20]
   1263e:	ldr.w	r2, [r3], #4
   12642:	str	r3, [sp, #28]
   12644:	strb	r1, [r2, #0]
   12646:	b.n	11fc6 <_vfiprintf_r+0x96>
   12648:	str	r6, [sp, #12]
   1264a:	cmp	r1, #1
   1264c:	beq.w	12168 <_vfiprintf_r+0x238>
   12650:	cmp	r1, #2
   12652:	add	r4, sp, #272	; 0x110
   12654:	bne.n	1267a <_vfiprintf_r+0x74a>
   12656:	ldr	r0, [sp, #48]	; 0x30
   12658:	and.w	r1, r3, #15
   1265c:	lsrs	r3, r3, #4
   1265e:	ldrb	r1, [r0, r1]
   12660:	strb.w	r1, [r4, #-1]!
   12664:	orr.w	r3, r3, r2, lsl #28
   12668:	lsrs	r2, r2, #4
   1266a:	orrs.w	r1, r3, r2
   1266e:	bne.n	12658 <_vfiprintf_r+0x728>
   12670:	ldr	r6, [sp, #12]
   12672:	add	r3, sp, #272	; 0x110
   12674:	subs	r3, r3, r4
   12676:	str	r3, [sp, #16]
   12678:	b.n	12182 <_vfiprintf_r+0x252>
   1267a:	and.w	r1, r3, #7
   1267e:	lsrs	r3, r3, #3
   12680:	orr.w	r3, r3, r2, lsl #29
   12684:	lsrs	r2, r2, #3
   12686:	adds	r1, #48	; 0x30
   12688:	orrs.w	r5, r3, r2
   1268c:	mov	r0, r4
   1268e:	strb.w	r1, [r4, #-1]!
   12692:	bne.n	1267a <_vfiprintf_r+0x74a>
   12694:	ldr	r6, [sp, #12]
   12696:	lsls	r3, r6, #31
   12698:	bpl.n	12672 <_vfiprintf_r+0x742>
   1269a:	cmp	r1, #48	; 0x30
   1269c:	beq.n	12670 <_vfiprintf_r+0x740>
   1269e:	movs	r3, #48	; 0x30
   126a0:	subs	r0, #2
   126a2:	strb.w	r3, [r4, #-1]
   126a6:	add	r3, sp, #272	; 0x110
   126a8:	subs	r3, r3, r0
   126aa:	ldr	r6, [sp, #12]
   126ac:	str	r3, [sp, #16]
   126ae:	mov	r4, r0
   126b0:	b.n	12182 <_vfiprintf_r+0x252>
   126b2:	ldr	r3, [sp, #16]
   126b4:	str	r4, [sp, #108]	; 0x6c
   126b6:	movs	r2, #1
   126b8:	str	r3, [sp, #112]	; 0x70
   126ba:	str	r3, [sp, #104]	; 0x68
   126bc:	str	r2, [sp, #100]	; 0x64
   126be:	add.w	r9, sp, #108	; 0x6c
   126c2:	add.w	r9, r9, #8
   126c6:	b.n	12404 <_vfiprintf_r+0x4d4>
   126c8:	add.w	r9, sp, #108	; 0x6c
   126cc:	b.n	11fc6 <_vfiprintf_r+0x96>
   126ce:	ldr	r2, [sp, #24]
   126d0:	ldr	r5, [sp, #12]
   126d2:	subs	r5, r2, r5
   126d4:	cmp	r5, #0
   126d6:	ble.w	123c6 <_vfiprintf_r+0x496>
   126da:	cmp	r5, #16
   126dc:	ble.w	12e56 <_vfiprintf_r+0xf26>
   126e0:	str	r4, [sp, #36]	; 0x24
   126e2:	vmov	r4, s16
   126e6:	b.n	126f8 <_vfiprintf_r+0x7c8>
   126e8:	add.w	ip, r0, #2
   126ec:	add.w	r9, r9, #8
   126f0:	mov	r0, r2
   126f2:	subs	r5, #16
   126f4:	cmp	r5, #16
   126f6:	ble.n	12736 <_vfiprintf_r+0x806>
   126f8:	ldr	r1, [pc, #516]	; (12900 <_vfiprintf_r+0x9d0>)
   126fa:	str.w	r1, [r9]
   126fe:	adds	r2, r0, #1
   12700:	adds	r3, #16
   12702:	movs	r1, #16
   12704:	cmp	r2, #7
   12706:	strd	r2, r3, [sp, #100]	; 0x64
   1270a:	str.w	r1, [r9, #4]
   1270e:	ble.n	126e8 <_vfiprintf_r+0x7b8>
   12710:	add	r2, sp, #96	; 0x60
   12712:	cmp	r3, #0
   12714:	beq.n	12800 <_vfiprintf_r+0x8d0>
   12716:	mov	r1, r4
   12718:	mov	r0, fp
   1271a:	add.w	r9, sp, #108	; 0x6c
   1271e:	bl	11eb8 <__sprint_r.part.0>
   12722:	cmp	r0, #0
   12724:	bne.w	122de <_vfiprintf_r+0x3ae>
   12728:	ldrd	r0, r3, [sp, #100]	; 0x64
   1272c:	subs	r5, #16
   1272e:	cmp	r5, #16
   12730:	add.w	ip, r0, #1
   12734:	bgt.n	126f8 <_vfiprintf_r+0x7c8>
   12736:	ldr	r4, [sp, #36]	; 0x24
   12738:	ldr	r2, [pc, #452]	; (12900 <_vfiprintf_r+0x9d0>)
   1273a:	str.w	r5, [r9, #4]
   1273e:	add	r3, r5
   12740:	cmp.w	ip, #7
   12744:	strd	ip, r3, [sp, #100]	; 0x64
   12748:	str.w	r2, [r9]
   1274c:	ble.w	12a78 <_vfiprintf_r+0xb48>
   12750:	cmp	r3, #0
   12752:	beq.w	12d94 <_vfiprintf_r+0xe64>
   12756:	vmov	r1, s16
   1275a:	add	r2, sp, #96	; 0x60
   1275c:	mov	r0, fp
   1275e:	bl	11eb8 <__sprint_r.part.0>
   12762:	cmp	r0, #0
   12764:	bne.w	122de <_vfiprintf_r+0x3ae>
   12768:	ldr	r2, [sp, #16]
   1276a:	ldrd	r0, r3, [sp, #100]	; 0x64
   1276e:	subs	r5, r7, r2
   12770:	cmp	r5, #0
   12772:	add.w	r1, r0, #1
   12776:	add.w	r9, sp, #108	; 0x6c
   1277a:	ble.w	123d0 <_vfiprintf_r+0x4a0>
   1277e:	cmp	r5, #16
   12780:	ble.n	127d6 <_vfiprintf_r+0x8a6>
   12782:	str	r4, [sp, #36]	; 0x24
   12784:	movs	r7, #16
   12786:	vmov	r4, s16
   1278a:	b.n	1279c <_vfiprintf_r+0x86c>
   1278c:	add.w	ip, r0, #2
   12790:	add.w	r9, r9, #8
   12794:	mov	r0, r2
   12796:	subs	r5, #16
   12798:	cmp	r5, #16
   1279a:	ble.n	127d2 <_vfiprintf_r+0x8a2>
   1279c:	adds	r2, r0, #1
   1279e:	ldr	r1, [pc, #352]	; (12900 <_vfiprintf_r+0x9d0>)
   127a0:	adds	r3, #16
   127a2:	cmp	r2, #7
   127a4:	strd	r1, r7, [r9]
   127a8:	strd	r2, r3, [sp, #100]	; 0x64
   127ac:	ble.n	1278c <_vfiprintf_r+0x85c>
   127ae:	add	r2, sp, #96	; 0x60
   127b0:	cbz	r3, 127f4 <_vfiprintf_r+0x8c4>
   127b2:	mov	r1, r4
   127b4:	mov	r0, fp
   127b6:	add.w	r9, sp, #108	; 0x6c
   127ba:	bl	11eb8 <__sprint_r.part.0>
   127be:	cmp	r0, #0
   127c0:	bne.w	122de <_vfiprintf_r+0x3ae>
   127c4:	ldrd	r0, r3, [sp, #100]	; 0x64
   127c8:	subs	r5, #16
   127ca:	cmp	r5, #16
   127cc:	add.w	ip, r0, #1
   127d0:	bgt.n	1279c <_vfiprintf_r+0x86c>
   127d2:	ldr	r4, [sp, #36]	; 0x24
   127d4:	mov	r1, ip
   127d6:	ldr	r2, [pc, #296]	; (12900 <_vfiprintf_r+0x9d0>)
   127d8:	str.w	r5, [r9, #4]
   127dc:	add	r3, r5
   127de:	cmp	r1, #7
   127e0:	strd	r1, r3, [sp, #100]	; 0x64
   127e4:	str.w	r2, [r9]
   127e8:	bgt.w	129ba <_vfiprintf_r+0xa8a>
   127ec:	add.w	r9, r9, #8
   127f0:	adds	r1, #1
   127f2:	b.n	123d0 <_vfiprintf_r+0x4a0>
   127f4:	mov.w	ip, #1
   127f8:	mov	r0, r3
   127fa:	add.w	r9, sp, #108	; 0x6c
   127fe:	b.n	12796 <_vfiprintf_r+0x866>
   12800:	mov.w	ip, #1
   12804:	mov	r0, r3
   12806:	add.w	r9, sp, #108	; 0x6c
   1280a:	b.n	126f2 <_vfiprintf_r+0x7c2>
   1280c:	cmp	r3, #0
   1280e:	beq.w	12a1a <_vfiprintf_r+0xaea>
   12812:	vmov	r1, s16
   12816:	add	r2, sp, #96	; 0x60
   12818:	mov	r0, fp
   1281a:	bl	11eb8 <__sprint_r.part.0>
   1281e:	cmp	r0, #0
   12820:	bne.w	122de <_vfiprintf_r+0x3ae>
   12824:	ldrd	r0, r3, [sp, #100]	; 0x64
   12828:	add.w	r9, sp, #108	; 0x6c
   1282c:	adds	r1, r0, #1
   1282e:	b.n	12380 <_vfiprintf_r+0x450>
   12830:	movs	r3, #2
   12832:	add	r2, sp, #68	; 0x44
   12834:	str	r3, [sp, #112]	; 0x70
   12836:	str	r2, [sp, #108]	; 0x6c
   12838:	movs	r1, #1
   1283a:	add.w	r9, sp, #108	; 0x6c
   1283e:	mov	r0, r1
   12840:	add.w	r9, r9, #8
   12844:	adds	r1, r0, #1
   12846:	b.n	123be <_vfiprintf_r+0x48e>
   12848:	cmp	r5, #16
   1284a:	ble.w	12e18 <_vfiprintf_r+0xee8>
   1284e:	ldrd	r1, r3, [sp, #100]	; 0x64
   12852:	str	r4, [sp, #60]	; 0x3c
   12854:	mov	r0, r1
   12856:	vmov	r4, s16
   1285a:	b.n	1286c <_vfiprintf_r+0x93c>
   1285c:	add.w	ip, r0, #2
   12860:	add.w	r9, r9, #8
   12864:	mov	r0, r2
   12866:	subs	r5, #16
   12868:	cmp	r5, #16
   1286a:	ble.n	128a8 <_vfiprintf_r+0x978>
   1286c:	ldr	r1, [pc, #148]	; (12904 <_vfiprintf_r+0x9d4>)
   1286e:	str.w	r1, [r9]
   12872:	adds	r2, r0, #1
   12874:	adds	r3, #16
   12876:	movs	r1, #16
   12878:	cmp	r2, #7
   1287a:	strd	r2, r3, [sp, #100]	; 0x64
   1287e:	str.w	r1, [r9, #4]
   12882:	ble.n	1285c <_vfiprintf_r+0x92c>
   12884:	add	r2, sp, #96	; 0x60
   12886:	cbz	r3, 128ca <_vfiprintf_r+0x99a>
   12888:	mov	r1, r4
   1288a:	mov	r0, fp
   1288c:	add.w	r9, sp, #108	; 0x6c
   12890:	bl	11eb8 <__sprint_r.part.0>
   12894:	cmp	r0, #0
   12896:	bne.w	122de <_vfiprintf_r+0x3ae>
   1289a:	ldrd	r0, r3, [sp, #100]	; 0x64
   1289e:	subs	r5, #16
   128a0:	cmp	r5, #16
   128a2:	add.w	ip, r0, #1
   128a6:	bgt.n	1286c <_vfiprintf_r+0x93c>
   128a8:	ldr	r4, [sp, #60]	; 0x3c
   128aa:	mov	r0, ip
   128ac:	ldr	r2, [pc, #84]	; (12904 <_vfiprintf_r+0x9d4>)
   128ae:	str.w	r5, [r9, #4]
   128b2:	add	r3, r5
   128b4:	cmp	r0, #7
   128b6:	strd	r0, r3, [sp, #100]	; 0x64
   128ba:	str.w	r2, [r9]
   128be:	bgt.w	12a44 <_vfiprintf_r+0xb14>
   128c2:	add.w	r9, r9, #8
   128c6:	adds	r1, r0, #1
   128c8:	b.n	12358 <_vfiprintf_r+0x428>
   128ca:	mov	r0, r3
   128cc:	mov.w	ip, #1
   128d0:	add.w	r9, sp, #108	; 0x6c
   128d4:	b.n	12866 <_vfiprintf_r+0x936>
   128d6:	lsls	r6, r6, #29
   128d8:	str	r3, [sp, #100]	; 0x64
   128da:	bpl.n	12984 <_vfiprintf_r+0xa54>
   128dc:	ldr	r2, [sp, #24]
   128de:	ldr	r1, [sp, #12]
   128e0:	subs	r4, r2, r1
   128e2:	cmp	r4, #0
   128e4:	ble.n	12984 <_vfiprintf_r+0xa54>
   128e6:	add.w	r9, sp, #108	; 0x6c
   128ea:	cmp	r4, #16
   128ec:	ble.w	12e50 <_vfiprintf_r+0xf20>
   128f0:	ldr	r1, [sp, #100]	; 0x64
   128f2:	vmov	r6, s16
   128f6:	movs	r5, #16
   128f8:	b.n	12916 <_vfiprintf_r+0x9e6>
   128fa:	nop
   128fc:	.word	0x20000e68
   12900:	.word	0x20001314
   12904:	.word	0x20000eac
   12908:	adds	r0, r1, #2
   1290a:	add.w	r9, r9, #8
   1290e:	mov	r1, r2
   12910:	subs	r4, #16
   12912:	cmp	r4, #16
   12914:	ble.n	1294c <_vfiprintf_r+0xa1c>
   12916:	adds	r2, r1, #1
   12918:	ldr	r0, [pc, #716]	; (12be8 <_vfiprintf_r+0xcb8>)
   1291a:	adds	r3, #16
   1291c:	cmp	r2, #7
   1291e:	strd	r0, r5, [r9]
   12922:	strd	r2, r3, [sp, #100]	; 0x64
   12926:	ble.n	12908 <_vfiprintf_r+0x9d8>
   12928:	add	r2, sp, #96	; 0x60
   1292a:	cbz	r3, 1297a <_vfiprintf_r+0xa4a>
   1292c:	mov	r1, r6
   1292e:	mov	r0, fp
   12930:	bl	11eb8 <__sprint_r.part.0>
   12934:	cmp	r0, #0
   12936:	bne.w	122de <_vfiprintf_r+0x3ae>
   1293a:	ldrd	r1, r3, [sp, #100]	; 0x64
   1293e:	subs	r4, #16
   12940:	cmp	r4, #16
   12942:	add.w	r0, r1, #1
   12946:	add.w	r9, sp, #108	; 0x6c
   1294a:	bgt.n	12916 <_vfiprintf_r+0x9e6>
   1294c:	ldr	r2, [pc, #664]	; (12be8 <_vfiprintf_r+0xcb8>)
   1294e:	str.w	r4, [r9, #4]
   12952:	add	r3, r4
   12954:	cmp	r0, #7
   12956:	strd	r0, r3, [sp, #100]	; 0x64
   1295a:	str.w	r2, [r9]
   1295e:	ble.w	12414 <_vfiprintf_r+0x4e4>
   12962:	cbz	r3, 12984 <_vfiprintf_r+0xa54>
   12964:	vmov	r1, s16
   12968:	add	r2, sp, #96	; 0x60
   1296a:	mov	r0, fp
   1296c:	bl	11eb8 <__sprint_r.part.0>
   12970:	cmp	r0, #0
   12972:	bne.w	122de <_vfiprintf_r+0x3ae>
   12976:	ldr	r3, [sp, #104]	; 0x68
   12978:	b.n	12414 <_vfiprintf_r+0x4e4>
   1297a:	movs	r0, #1
   1297c:	mov	r1, r3
   1297e:	add.w	r9, sp, #108	; 0x6c
   12982:	b.n	12910 <_vfiprintf_r+0x9e0>
   12984:	ldrd	r3, r2, [sp, #20]
   12988:	ldr	r1, [sp, #12]
   1298a:	cmp	r2, r1
   1298c:	ite	ge
   1298e:	addge	r3, r3, r2
   12990:	addlt	r3, r3, r1
   12992:	str	r3, [sp, #20]
   12994:	b.n	1242a <_vfiprintf_r+0x4fa>
   12996:	ldrsh.w	r1, [r2, #12]
   1299a:	lsls	r7, r1, #22
   1299c:	vmov	r3, s16
   129a0:	uxth	r2, r1
   129a2:	bmi.w	11f76 <_vfiprintf_r+0x46>
   129a6:	vmov	r5, s16
   129aa:	ldr	r0, [r3, #88]	; 0x58
   129ac:	bl	e3d8 <__retarget_lock_acquire_recursive>
   129b0:	ldrsh.w	r1, [r5, #12]
   129b4:	uxth	r2, r1
   129b6:	b.w	11f76 <_vfiprintf_r+0x46>
   129ba:	cmp	r3, #0
   129bc:	beq.w	126b2 <_vfiprintf_r+0x782>
   129c0:	vmov	r1, s16
   129c4:	add	r2, sp, #96	; 0x60
   129c6:	mov	r0, fp
   129c8:	bl	11eb8 <__sprint_r.part.0>
   129cc:	cmp	r0, #0
   129ce:	bne.w	122de <_vfiprintf_r+0x3ae>
   129d2:	ldr	r1, [sp, #100]	; 0x64
   129d4:	ldr	r3, [sp, #104]	; 0x68
   129d6:	adds	r1, #1
   129d8:	add.w	r9, sp, #108	; 0x6c
   129dc:	b.n	123d0 <_vfiprintf_r+0x4a0>
   129de:	str	r2, [sp, #100]	; 0x64
   129e0:	add.w	r9, sp, #108	; 0x6c
   129e4:	b.n	122a4 <_vfiprintf_r+0x374>
   129e6:	cmp	r7, #0
   129e8:	bne.w	12172 <_vfiprintf_r+0x242>
   129ec:	ldr	r6, [sp, #12]
   129ee:	movs	r7, #0
   129f0:	str	r7, [sp, #16]
   129f2:	add	r4, sp, #272	; 0x110
   129f4:	b.w	12182 <_vfiprintf_r+0x252>
   129f8:	ldr	r3, [sp, #12]
   129fa:	ands.w	r3, r3, #16
   129fe:	bne.n	12aaa <_vfiprintf_r+0xb7a>
   12a00:	ldr	r2, [sp, #12]
   12a02:	ands.w	r0, r2, #64	; 0x40
   12a06:	beq.w	12ce0 <_vfiprintf_r+0xdb0>
   12a0a:	ldr	r1, [sp, #28]
   12a0c:	mov	r2, r3
   12a0e:	ldr.w	r3, [r1], #4
   12a12:	str	r1, [sp, #28]
   12a14:	uxth	r3, r3
   12a16:	movs	r1, #1
   12a18:	b.n	1221e <_vfiprintf_r+0x2ee>
   12a1a:	ldr	r2, [sp, #36]	; 0x24
   12a1c:	cmp	r2, #0
   12a1e:	bne.n	12aea <_vfiprintf_r+0xbba>
   12a20:	mov	r0, r3
   12a22:	movs	r1, #1
   12a24:	add.w	r9, sp, #108	; 0x6c
   12a28:	b.n	123be <_vfiprintf_r+0x48e>
   12a2a:	movs	r1, #1
   12a2c:	mov	r0, r3
   12a2e:	add.w	r9, sp, #108	; 0x6c
   12a32:	b.n	123be <_vfiprintf_r+0x48e>
   12a34:	negs	r3, r3
   12a36:	sbc.w	r2, r2, r2, lsl #1
   12a3a:	str	r6, [sp, #12]
   12a3c:	movs	r0, #45	; 0x2d
   12a3e:	movs	r1, #1
   12a40:	b.w	12220 <_vfiprintf_r+0x2f0>
   12a44:	cmp	r3, #0
   12a46:	beq.w	12b5a <_vfiprintf_r+0xc2a>
   12a4a:	vmov	r1, s16
   12a4e:	add	r2, sp, #96	; 0x60
   12a50:	mov	r0, fp
   12a52:	bl	11eb8 <__sprint_r.part.0>
   12a56:	cmp	r0, #0
   12a58:	bne.w	122de <_vfiprintf_r+0x3ae>
   12a5c:	ldrd	r0, r3, [sp, #100]	; 0x64
   12a60:	add.w	r9, sp, #108	; 0x6c
   12a64:	adds	r1, r0, #1
   12a66:	b.n	12358 <_vfiprintf_r+0x428>
   12a68:	ldrb.w	r1, [r8]
   12a6c:	str	r3, [sp, #28]
   12a6e:	b.w	12016 <_vfiprintf_r+0xe6>
   12a72:	add	r4, sp, #272	; 0x110
   12a74:	b.w	12182 <_vfiprintf_r+0x252>
   12a78:	add.w	r9, r9, #8
   12a7c:	add.w	r1, ip, #1
   12a80:	mov	r0, ip
   12a82:	b.n	123c6 <_vfiprintf_r+0x496>
   12a84:	ands.w	r2, r6, #512	; 0x200
   12a88:	bne.w	12dba <_vfiprintf_r+0xe8a>
   12a8c:	ldr.w	r3, [r1], #4
   12a90:	str	r1, [sp, #28]
   12a92:	b.w	12216 <_vfiprintf_r+0x2e6>
   12a96:	lsls	r3, r6, #22
   12a98:	bmi.w	12dac <_vfiprintf_r+0xe7c>
   12a9c:	ldr.w	r3, [r2], #4
   12aa0:	str	r2, [sp, #28]
   12aa2:	asrs	r2, r3, #31
   12aa4:	mov	r1, r2
   12aa6:	b.w	1214e <_vfiprintf_r+0x21e>
   12aaa:	ldr	r1, [sp, #28]
   12aac:	ldr.w	r3, [r1], #4
   12ab0:	str	r1, [sp, #28]
   12ab2:	movs	r1, #1
   12ab4:	b.w	1221e <_vfiprintf_r+0x2ee>
   12ab8:	ldr	r3, [sp, #28]
   12aba:	ldr	r0, [sp, #20]
   12abc:	ldr.w	r1, [r3], #4
   12ac0:	str	r3, [sp, #28]
   12ac2:	asrs	r2, r0, #31
   12ac4:	strd	r0, r2, [r1]
   12ac8:	b.w	11fc6 <_vfiprintf_r+0x96>
   12acc:	ldr	r3, [sp, #44]	; 0x2c
   12ace:	cmp	r3, #0
   12ad0:	beq.w	12120 <_vfiprintf_r+0x1f0>
   12ad4:	ldr	r3, [sp, #44]	; 0x2c
   12ad6:	ldrb	r3, [r3, #0]
   12ad8:	cmp	r3, #0
   12ada:	beq.w	12120 <_vfiprintf_r+0x1f0>
   12ade:	ldrb.w	r1, [r8]
   12ae2:	orr.w	r6, r6, #1024	; 0x400
   12ae6:	b.w	12016 <_vfiprintf_r+0xe6>
   12aea:	movs	r3, #2
   12aec:	add	r2, sp, #68	; 0x44
   12aee:	str	r3, [sp, #112]	; 0x70
   12af0:	str	r2, [sp, #108]	; 0x6c
   12af2:	movs	r0, #1
   12af4:	add.w	r9, sp, #108	; 0x6c
   12af8:	b.n	12840 <_vfiprintf_r+0x910>
   12afa:	str	r6, [sp, #12]
   12afc:	b.n	125e2 <_vfiprintf_r+0x6b2>
   12afe:	ldr	r3, [pc, #236]	; (12bec <_vfiprintf_r+0xcbc>)
   12b00:	str	r3, [sp, #48]	; 0x30
   12b02:	ands.w	r2, r6, #32
   12b06:	beq.n	12bbc <_vfiprintf_r+0xc8c>
   12b08:	ldr	r3, [sp, #28]
   12b0a:	adds	r3, #7
   12b0c:	bic.w	r3, r3, #7
   12b10:	mov	r0, r3
   12b12:	ldr	r2, [r3, #4]
   12b14:	ldr.w	r3, [r0], #8
   12b18:	str	r0, [sp, #28]
   12b1a:	lsls	r4, r6, #31
   12b1c:	bpl.n	12b32 <_vfiprintf_r+0xc02>
   12b1e:	orrs.w	r0, r3, r2
   12b22:	beq.n	12b32 <_vfiprintf_r+0xc02>
   12b24:	strb.w	r1, [sp, #69]	; 0x45
   12b28:	movs	r1, #48	; 0x30
   12b2a:	orr.w	r6, r6, #2
   12b2e:	strb.w	r1, [sp, #68]	; 0x44
   12b32:	bic.w	r1, r6, #1024	; 0x400
   12b36:	str	r1, [sp, #12]
   12b38:	movs	r1, #2
   12b3a:	b.w	1221e <_vfiprintf_r+0x2ee>
   12b3e:	ldr	r3, [pc, #176]	; (12bf0 <_vfiprintf_r+0xcc0>)
   12b40:	str	r3, [sp, #48]	; 0x30
   12b42:	b.n	12b02 <_vfiprintf_r+0xbd2>
   12b44:	ldr	r3, [sp, #28]
   12b46:	movs	r1, #1
   12b48:	ldr.w	r2, [r3], #4
   12b4c:	str	r1, [sp, #12]
   12b4e:	strb.w	r2, [sp, #172]	; 0xac
   12b52:	str	r3, [sp, #28]
   12b54:	str	r1, [sp, #16]
   12b56:	add	r4, sp, #172	; 0xac
   12b58:	b.n	1251a <_vfiprintf_r+0x5ea>
   12b5a:	ldrb.w	r2, [sp, #67]	; 0x43
   12b5e:	cmp	r2, #0
   12b60:	bne.w	12dc8 <_vfiprintf_r+0xe98>
   12b64:	ldr	r2, [sp, #36]	; 0x24
   12b66:	cmp	r2, #0
   12b68:	bne.w	12830 <_vfiprintf_r+0x900>
   12b6c:	mov	r0, r3
   12b6e:	movs	r1, #1
   12b70:	add.w	r9, sp, #108	; 0x6c
   12b74:	b.n	123c6 <_vfiprintf_r+0x496>
   12b76:	movs	r1, #0
   12b78:	movs	r2, #8
   12b7a:	add	r0, sp, #88	; 0x58
   12b7c:	str	r4, [sp, #76]	; 0x4c
   12b7e:	bl	e110 <memset>
   12b82:	adds	r1, r7, #1
   12b84:	beq.w	12d00 <_vfiprintf_r+0xdd0>
   12b88:	movs	r5, #0
   12b8a:	str	r4, [sp, #28]
   12b8c:	mov	r4, r5
   12b8e:	b.n	12baa <_vfiprintf_r+0xc7a>
   12b90:	add	r1, sp, #172	; 0xac
   12b92:	mov	r0, fp
   12b94:	bl	11d2c <_wcrtomb_r>
   12b98:	adds	r2, r0, #1
   12b9a:	add	r0, r4
   12b9c:	beq.w	12e76 <_vfiprintf_r+0xf46>
   12ba0:	cmp	r0, r7
   12ba2:	bgt.n	12bb6 <_vfiprintf_r+0xc86>
   12ba4:	beq.w	12e88 <_vfiprintf_r+0xf58>
   12ba8:	mov	r4, r0
   12baa:	ldr	r2, [sp, #76]	; 0x4c
   12bac:	ldr	r2, [r2, r5]
   12bae:	add	r3, sp, #88	; 0x58
   12bb0:	adds	r5, #4
   12bb2:	cmp	r2, #0
   12bb4:	bne.n	12b90 <_vfiprintf_r+0xc60>
   12bb6:	str	r4, [sp, #16]
   12bb8:	ldr	r4, [sp, #28]
   12bba:	b.n	12d1c <_vfiprintf_r+0xdec>
   12bbc:	ands.w	r3, r6, #16
   12bc0:	ldr	r0, [sp, #28]
   12bc2:	bne.n	12bde <_vfiprintf_r+0xcae>
   12bc4:	ands.w	r4, r6, #64	; 0x40
   12bc8:	beq.n	12bd6 <_vfiprintf_r+0xca6>
   12bca:	mov	r2, r3
   12bcc:	ldr.w	r3, [r0], #4
   12bd0:	str	r0, [sp, #28]
   12bd2:	uxth	r3, r3
   12bd4:	b.n	12b1a <_vfiprintf_r+0xbea>
   12bd6:	ands.w	r2, r6, #512	; 0x200
   12bda:	bne.w	12da0 <_vfiprintf_r+0xe70>
   12bde:	ldr.w	r3, [r0], #4
   12be2:	str	r0, [sp, #28]
   12be4:	b.n	12b1a <_vfiprintf_r+0xbea>
   12be6:	nop
   12be8:	.word	0x20000eac
   12bec:	.word	0x20000e68
   12bf0:	.word	0x20000e7c
   12bf4:	ldr	r1, [sp, #12]
   12bf6:	str	r7, [sp, #16]
   12bf8:	add	r4, sp, #272	; 0x110
   12bfa:	mov	lr, r3
   12bfc:	vmov	s17, fp
   12c00:	and.w	r6, r1, #1024	; 0x400
   12c04:	mov.w	ip, #0
   12c08:	mov	r3, r4
   12c0a:	b.n	12c1a <_vfiprintf_r+0xcea>
   12c0c:	cmp.w	lr, #10
   12c10:	sbcs.w	r2, r2, #0
   12c14:	bcc.n	12c8a <_vfiprintf_r+0xd5a>
   12c16:	mov	lr, r4
   12c18:	mov	r2, r5
   12c1a:	ldr	r1, [pc, #664]	; (12eb4 <_vfiprintf_r+0xf84>)
   12c1c:	adds.w	r0, lr, r2
   12c20:	adc.w	r0, r0, #0
   12c24:	mov	r7, r1
   12c26:	umull	r1, r4, r1, r0
   12c2a:	bic.w	r1, r4, #3
   12c2e:	add.w	r1, r1, r4, lsr #2
   12c32:	subs	r0, r0, r1
   12c34:	subs.w	r1, lr, r0
   12c38:	mov.w	r5, #3435973836	; 0xcccccccc
   12c3c:	sbc.w	r4, r2, #0
   12c40:	mul.w	r5, r5, r1
   12c44:	mla	r5, r7, r4, r5
   12c48:	umull	r4, r1, r1, r7
   12c4c:	add	r5, r1
   12c4e:	movs	r7, #5
   12c50:	and.w	r1, r4, #1
   12c54:	umull	r1, fp, r1, r7
   12c58:	adds	r1, r1, r0
   12c5a:	lsrs	r4, r4, #1
   12c5c:	adds	r1, #48	; 0x30
   12c5e:	strb.w	r1, [r3, #-1]
   12c62:	orr.w	r4, r4, r5, lsl #31
   12c66:	add.w	ip, ip, #1
   12c6a:	subs	r3, #1
   12c6c:	lsrs	r5, r5, #1
   12c6e:	cmp	r6, #0
   12c70:	beq.n	12c0c <_vfiprintf_r+0xcdc>
   12c72:	ldr	r1, [sp, #44]	; 0x2c
   12c74:	ldrb	r1, [r1, #0]
   12c76:	cmp	r1, ip
   12c78:	bne.n	12c0c <_vfiprintf_r+0xcdc>
   12c7a:	cmp.w	ip, #255	; 0xff
   12c7e:	beq.n	12c0c <_vfiprintf_r+0xcdc>
   12c80:	cmp.w	lr, #10
   12c84:	sbcs.w	r2, r2, #0
   12c88:	bcs.n	12d64 <_vfiprintf_r+0xe34>
   12c8a:	mov	r4, r3
   12c8c:	add	r3, sp, #272	; 0x110
   12c8e:	subs	r3, r3, r4
   12c90:	ldr	r7, [sp, #16]
   12c92:	ldr	r6, [sp, #12]
   12c94:	str	r3, [sp, #16]
   12c96:	vmov	fp, s17
   12c9a:	b.w	12182 <_vfiprintf_r+0x252>
   12c9e:	str	r6, [sp, #12]
   12ca0:	b.w	12168 <_vfiprintf_r+0x238>
   12ca4:	mov	r0, fp
   12ca6:	bl	dd84 <__sinit>
   12caa:	b.w	11f64 <_vfiprintf_r+0x34>
   12cae:	cmp	r1, #1
   12cb0:	str	r6, [sp, #12]
   12cb2:	bne.w	12650 <_vfiprintf_r+0x720>
   12cb6:	b.w	12172 <_vfiprintf_r+0x242>
   12cba:	ldr	r3, [sp, #28]
   12cbc:	ldr	r1, [sp, #20]
   12cbe:	ldr.w	r2, [r3], #4
   12cc2:	str	r1, [r2, #0]
   12cc4:	str	r3, [sp, #28]
   12cc6:	b.w	11fc6 <_vfiprintf_r+0x96>
   12cca:	cmp	r7, #6
   12ccc:	mov	r3, r7
   12cce:	ldr	r2, [sp, #12]
   12cd0:	ldr	r4, [pc, #484]	; (12eb8 <_vfiprintf_r+0xf88>)
   12cd2:	str	r2, [sp, #28]
   12cd4:	it	cs
   12cd6:	movcs	r3, #6
   12cd8:	str	r3, [sp, #16]
   12cda:	str	r3, [sp, #12]
   12cdc:	b.w	1232a <_vfiprintf_r+0x3fa>
   12ce0:	ldr	r3, [sp, #12]
   12ce2:	ldr	r1, [sp, #28]
   12ce4:	ands.w	r2, r3, #512	; 0x200
   12ce8:	ite	ne
   12cea:	ldrne.w	r3, [r1], #4
   12cee:	ldreq.w	r3, [r1], #4
   12cf2:	str	r1, [sp, #28]
   12cf4:	itt	ne
   12cf6:	movne	r2, r0
   12cf8:	uxtbne	r3, r3
   12cfa:	movs	r1, #1
   12cfc:	b.w	1221e <_vfiprintf_r+0x2ee>
   12d00:	add	r3, sp, #88	; 0x58
   12d02:	str	r3, [sp, #0]
   12d04:	movs	r3, #0
   12d06:	mov	r1, r3
   12d08:	add	r2, sp, #76	; 0x4c
   12d0a:	mov	r0, fp
   12d0c:	bl	11d78 <_wcsrtombs_r>
   12d10:	mov	r3, r0
   12d12:	adds	r3, #1
   12d14:	str	r0, [sp, #16]
   12d16:	beq.w	12e76 <_vfiprintf_r+0xf46>
   12d1a:	str	r4, [sp, #76]	; 0x4c
   12d1c:	ldr	r3, [sp, #16]
   12d1e:	cmp	r3, #0
   12d20:	beq.n	12d84 <_vfiprintf_r+0xe54>
   12d22:	cmp	r3, #99	; 0x63
   12d24:	bgt.n	12dee <_vfiprintf_r+0xebe>
   12d26:	movs	r3, #0
   12d28:	str	r3, [sp, #32]
   12d2a:	add	r4, sp, #172	; 0xac
   12d2c:	movs	r2, #8
   12d2e:	movs	r1, #0
   12d30:	add	r0, sp, #88	; 0x58
   12d32:	bl	e110 <memset>
   12d36:	ldr	r5, [sp, #16]
   12d38:	add	r3, sp, #88	; 0x58
   12d3a:	str	r3, [sp, #0]
   12d3c:	add	r2, sp, #76	; 0x4c
   12d3e:	mov	r3, r5
   12d40:	mov	r1, r4
   12d42:	mov	r0, fp
   12d44:	bl	11d78 <_wcsrtombs_r>
   12d48:	cmp	r5, r0
   12d4a:	bne.w	12ea4 <_vfiprintf_r+0xf74>
   12d4e:	ldr	r3, [sp, #12]
   12d50:	ldr	r2, [sp, #16]
   12d52:	str	r3, [sp, #28]
   12d54:	movs	r3, #0
   12d56:	strb	r3, [r4, r2]
   12d58:	mov	r7, r3
   12d5a:	bic.w	r3, r2, r2, asr #31
   12d5e:	str	r3, [sp, #12]
   12d60:	b.w	12190 <_vfiprintf_r+0x260>
   12d64:	ldr	r2, [sp, #56]	; 0x38
   12d66:	ldr	r1, [sp, #52]	; 0x34
   12d68:	subs	r3, r3, r2
   12d6a:	mov	r0, r3
   12d6c:	str	r3, [sp, #32]
   12d6e:	bl	e240 <strncpy>
   12d72:	ldr	r1, [sp, #44]	; 0x2c
   12d74:	ldr	r3, [sp, #32]
   12d76:	ldrb	r2, [r1, #1]
   12d78:	cbz	r2, 12d7e <_vfiprintf_r+0xe4e>
   12d7a:	adds	r1, #1
   12d7c:	str	r1, [sp, #44]	; 0x2c
   12d7e:	mov.w	ip, #0
   12d82:	b.n	12c16 <_vfiprintf_r+0xce6>
   12d84:	ldr	r3, [sp, #12]
   12d86:	str	r3, [sp, #28]
   12d88:	ldr	r3, [sp, #16]
   12d8a:	str	r3, [sp, #12]
   12d8c:	mov	r7, r3
   12d8e:	str	r3, [sp, #32]
   12d90:	b.w	12190 <_vfiprintf_r+0x260>
   12d94:	movs	r1, #1
   12d96:	mov	r0, r3
   12d98:	add.w	r9, sp, #108	; 0x6c
   12d9c:	b.w	123c6 <_vfiprintf_r+0x496>
   12da0:	ldr.w	r3, [r0], #4
   12da4:	str	r0, [sp, #28]
   12da6:	mov	r2, r4
   12da8:	uxtb	r3, r3
   12daa:	b.n	12b1a <_vfiprintf_r+0xbea>
   12dac:	ldrsb.w	r3, [r2], #4
   12db0:	str	r2, [sp, #28]
   12db2:	asrs	r2, r3, #31
   12db4:	mov	r1, r2
   12db6:	b.w	1214e <_vfiprintf_r+0x21e>
   12dba:	ldr.w	r3, [r1], #4
   12dbe:	str	r1, [sp, #28]
   12dc0:	mov	r2, r0
   12dc2:	uxtb	r3, r3
   12dc4:	b.w	12216 <_vfiprintf_r+0x2e6>
   12dc8:	movs	r3, #1
   12dca:	str	r3, [sp, #112]	; 0x70
   12dcc:	movs	r1, #1
   12dce:	add.w	r3, sp, #67	; 0x43
   12dd2:	str	r3, [sp, #108]	; 0x6c
   12dd4:	add.w	r9, sp, #108	; 0x6c
   12dd8:	mov	r3, r1
   12dda:	b.w	12378 <_vfiprintf_r+0x448>
   12dde:	ldr	r3, [sp, #28]
   12de0:	ldr	r1, [sp, #20]
   12de2:	ldr.w	r2, [r3], #4
   12de6:	str	r3, [sp, #28]
   12de8:	strh	r1, [r2, #0]
   12dea:	b.w	11fc6 <_vfiprintf_r+0x96>
   12dee:	adds	r1, r3, #1
   12df0:	mov	r0, fp
   12df2:	bl	d2fc <_malloc_r>
   12df6:	mov	r4, r0
   12df8:	cmp	r0, #0
   12dfa:	beq.n	12e76 <_vfiprintf_r+0xf46>
   12dfc:	str	r0, [sp, #32]
   12dfe:	b.n	12d2c <_vfiprintf_r+0xdfc>
   12e00:	ldr	r0, [r1, #88]	; 0x58
   12e02:	bl	e3dc <__retarget_lock_release_recursive>
   12e06:	b.w	121dc <_vfiprintf_r+0x2ac>
   12e0a:	ldr	r3, [sp, #12]
   12e0c:	str	r3, [sp, #28]
   12e0e:	strd	r7, r7, [sp, #12]
   12e12:	ldr	r7, [sp, #32]
   12e14:	b.w	12190 <_vfiprintf_r+0x260>
   12e18:	ldr	r0, [sp, #100]	; 0x64
   12e1a:	ldr	r3, [sp, #104]	; 0x68
   12e1c:	adds	r0, #1
   12e1e:	b.n	128ac <_vfiprintf_r+0x97c>
   12e20:	ldr	r3, [sp, #12]
   12e22:	str	r3, [sp, #28]
   12e24:	mov	r0, r4
   12e26:	bl	e480 <strlen>
   12e2a:	bic.w	r3, r0, r0, asr #31
   12e2e:	mov	r7, r5
   12e30:	str	r0, [sp, #16]
   12e32:	str	r3, [sp, #12]
   12e34:	str	r5, [sp, #32]
   12e36:	b.w	12190 <_vfiprintf_r+0x260>
   12e3a:	vmov	r1, s16
   12e3e:	add	r2, sp, #96	; 0x60
   12e40:	mov	r0, fp
   12e42:	bl	11eb8 <__sprint_r.part.0>
   12e46:	cmp	r0, #0
   12e48:	beq.w	122b8 <_vfiprintf_r+0x388>
   12e4c:	b.w	122ea <_vfiprintf_r+0x3ba>
   12e50:	ldr	r0, [sp, #100]	; 0x64
   12e52:	adds	r0, #1
   12e54:	b.n	1294c <_vfiprintf_r+0xa1c>
   12e56:	mov	ip, r1
   12e58:	b.n	12738 <_vfiprintf_r+0x808>
   12e5a:	ldr	r3, [r5, #100]	; 0x64
   12e5c:	lsls	r1, r3, #31
   12e5e:	bmi.n	12e6c <_vfiprintf_r+0xf3c>
   12e60:	ldrh	r3, [r5, #12]
   12e62:	lsls	r2, r3, #22
   12e64:	bmi.n	12e6c <_vfiprintf_r+0xf3c>
   12e66:	ldr	r0, [r5, #88]	; 0x58
   12e68:	bl	e3dc <__retarget_lock_release_recursive>
   12e6c:	mov.w	r3, #4294967295
   12e70:	str	r3, [sp, #20]
   12e72:	b.w	12308 <_vfiprintf_r+0x3d8>
   12e76:	vmov	r2, s16
   12e7a:	ldrsh.w	r3, [r2, #12]
   12e7e:	orr.w	r3, r3, #64	; 0x40
   12e82:	strh	r3, [r2, #12]
   12e84:	b.w	122f2 <_vfiprintf_r+0x3c2>
   12e88:	ldr	r4, [sp, #28]
   12e8a:	str	r7, [sp, #16]
   12e8c:	b.n	12d1c <_vfiprintf_r+0xdec>
   12e8e:	ldr	r3, [sp, #28]
   12e90:	ldrb.w	r1, [r8, #1]
   12e94:	ldr.w	r7, [r3], #4
   12e98:	str	r3, [sp, #28]
   12e9a:	mov	r8, r2
   12e9c:	orr.w	r7, r7, r7, asr #31
   12ea0:	b.w	12016 <_vfiprintf_r+0xe6>
   12ea4:	vmov	r2, s16
   12ea8:	ldrh	r3, [r2, #12]
   12eaa:	orr.w	r3, r3, #64	; 0x40
   12eae:	strh	r3, [r2, #12]
   12eb0:	b.w	122de <_vfiprintf_r+0x3ae>
   12eb4:	.word	0xcccccccd
   12eb8:	.word	0x20000e90

00012ebc <__sbprintf>:
   12ebc:	push	{r4, r5, r6, lr}
   12ebe:	mov	r4, r1
   12ec0:	ldrh	r1, [r1, #12]
   12ec2:	sub.w	sp, sp, #1136	; 0x470
   12ec6:	bic.w	r1, r1, #2
   12eca:	strh.w	r1, [sp, #20]
   12ece:	ldr	r1, [r4, #100]	; 0x64
   12ed0:	str	r1, [sp, #108]	; 0x6c
   12ed2:	ldrh	r1, [r4, #14]
   12ed4:	strh.w	r1, [sp, #22]
   12ed8:	ldr	r1, [r4, #28]
   12eda:	str	r1, [sp, #36]	; 0x24
   12edc:	ldr	r1, [r4, #36]	; 0x24
   12ede:	str	r1, [sp, #44]	; 0x2c
   12ee0:	add	r1, sp, #112	; 0x70
   12ee2:	str	r1, [sp, #8]
   12ee4:	str	r1, [sp, #24]
   12ee6:	mov.w	r1, #1024	; 0x400
   12eea:	mov	r6, r0
   12eec:	str	r1, [sp, #16]
   12eee:	str	r1, [sp, #28]
   12ef0:	add	r0, sp, #96	; 0x60
   12ef2:	movs	r1, #0
   12ef4:	strd	r3, r2, [sp]
   12ef8:	str	r1, [sp, #32]
   12efa:	bl	e3d0 <__retarget_lock_init_recursive>
   12efe:	ldrd	r3, r2, [sp]
   12f02:	add	r1, sp, #8
   12f04:	mov	r0, r6
   12f06:	bl	11f30 <_vfiprintf_r>
   12f0a:	subs	r5, r0, #0
   12f0c:	blt.n	12f1e <__sbprintf+0x62>
   12f0e:	add	r1, sp, #8
   12f10:	mov	r0, r6
   12f12:	bl	10d8c <_fflush_r>
   12f16:	cmp	r0, #0
   12f18:	it	ne
   12f1a:	movne.w	r5, #4294967295
   12f1e:	ldrh.w	r3, [sp, #20]
   12f22:	lsls	r3, r3, #25
   12f24:	bpl.n	12f2e <__sbprintf+0x72>
   12f26:	ldrh	r3, [r4, #12]
   12f28:	orr.w	r3, r3, #64	; 0x40
   12f2c:	strh	r3, [r4, #12]
   12f2e:	ldr	r0, [sp, #96]	; 0x60
   12f30:	bl	e3d4 <__retarget_lock_close_recursive>
   12f34:	mov	r0, r5
   12f36:	add.w	sp, sp, #1136	; 0x470
   12f3a:	pop	{r4, r5, r6, pc}

00012f3c <__sfvwrite_r>:
   12f3c:	ldr	r3, [r2, #8]
   12f3e:	cmp	r3, #0
   12f40:	beq.w	1304e <__sfvwrite_r+0x112>
   12f44:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12f48:	ldrsh.w	r3, [r1, #12]
   12f4c:	mov	r4, r1
   12f4e:	lsls	r1, r3, #28
   12f50:	mov	r8, r0
   12f52:	sub	sp, #12
   12f54:	mov	r7, r2
   12f56:	uxth	r0, r3
   12f58:	bpl.n	12fa6 <__sfvwrite_r+0x6a>
   12f5a:	ldr	r3, [r4, #16]
   12f5c:	cbz	r3, 12fa6 <__sfvwrite_r+0x6a>
   12f5e:	ands.w	r3, r0, #2
   12f62:	ldr	r5, [r7, #0]
   12f64:	beq.n	12fc2 <__sfvwrite_r+0x86>
   12f66:	mov.w	sl, #0
   12f6a:	ldr.w	fp, [pc, #704]	; 1322c <__sfvwrite_r+0x2f0>
   12f6e:	mov	r6, sl
   12f70:	mov	r9, r7
   12f72:	cmp	r6, fp
   12f74:	mov	r3, r6
   12f76:	mov	r2, sl
   12f78:	it	cs
   12f7a:	movcs	r3, fp
   12f7c:	mov	r0, r8
   12f7e:	cmp	r6, #0
   12f80:	beq.n	13028 <__sfvwrite_r+0xec>
   12f82:	ldr	r1, [r4, #28]
   12f84:	ldr	r7, [r4, #36]	; 0x24
   12f86:	blx	r7
   12f88:	cmp	r0, #0
   12f8a:	ble.n	1303a <__sfvwrite_r+0xfe>
   12f8c:	ldr.w	r3, [r9, #8]
   12f90:	subs	r3, r3, r0
   12f92:	add	sl, r0
   12f94:	subs	r6, r6, r0
   12f96:	str.w	r3, [r9, #8]
   12f9a:	cmp	r3, #0
   12f9c:	bne.n	12f72 <__sfvwrite_r+0x36>
   12f9e:	movs	r0, #0
   12fa0:	add	sp, #12
   12fa2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12fa6:	mov	r1, r4
   12fa8:	mov	r0, r8
   12faa:	bl	13230 <__swsetup_r>
   12fae:	cmp	r0, #0
   12fb0:	bne.w	13224 <__sfvwrite_r+0x2e8>
   12fb4:	ldrsh.w	r3, [r4, #12]
   12fb8:	ldr	r5, [r7, #0]
   12fba:	uxth	r0, r3
   12fbc:	ands.w	r3, r0, #2
   12fc0:	bne.n	12f66 <__sfvwrite_r+0x2a>
   12fc2:	ands.w	r9, r0, #1
   12fc6:	bne.n	13052 <__sfvwrite_r+0x116>
   12fc8:	mov	r6, r9
   12fca:	str	r7, [sp, #0]
   12fcc:	cbz	r6, 13020 <__sfvwrite_r+0xe4>
   12fce:	lsls	r2, r0, #22
   12fd0:	ldr.w	fp, [r4, #8]
   12fd4:	bpl.w	130e2 <__sfvwrite_r+0x1a6>
   12fd8:	cmp	fp, r6
   12fda:	mov	r2, fp
   12fdc:	bhi.w	13148 <__sfvwrite_r+0x20c>
   12fe0:	tst.w	r0, #1152	; 0x480
   12fe4:	bne.w	1316a <__sfvwrite_r+0x22e>
   12fe8:	ldr	r0, [r4, #0]
   12fea:	str	r2, [sp, #4]
   12fec:	mov	r1, r9
   12fee:	bl	e018 <memmove>
   12ff2:	ldr	r3, [r4, #8]
   12ff4:	ldr	r2, [sp, #4]
   12ff6:	sub.w	r1, r3, fp
   12ffa:	ldr	r3, [r4, #0]
   12ffc:	str	r1, [r4, #8]
   12ffe:	add	r3, r2
   13000:	mov	sl, r6
   13002:	str	r3, [r4, #0]
   13004:	movs	r6, #0
   13006:	ldr	r2, [sp, #0]
   13008:	ldr	r3, [r2, #8]
   1300a:	sub.w	r3, r3, sl
   1300e:	add	r9, sl
   13010:	str	r3, [r2, #8]
   13012:	cmp	r3, #0
   13014:	beq.n	12f9e <__sfvwrite_r+0x62>
   13016:	ldrsh.w	r0, [r4, #12]
   1301a:	uxth	r0, r0
   1301c:	cmp	r6, #0
   1301e:	bne.n	12fce <__sfvwrite_r+0x92>
   13020:	ldrd	r9, r6, [r5]
   13024:	adds	r5, #8
   13026:	b.n	12fcc <__sfvwrite_r+0x90>
   13028:	ldrd	sl, r6, [r5]
   1302c:	adds	r5, #8
   1302e:	b.n	12f72 <__sfvwrite_r+0x36>
   13030:	mov	r1, r4
   13032:	mov	r0, r8
   13034:	bl	10d8c <_fflush_r>
   13038:	cbz	r0, 1309e <__sfvwrite_r+0x162>
   1303a:	ldrsh.w	r3, [r4, #12]
   1303e:	orr.w	r3, r3, #64	; 0x40
   13042:	mov.w	r0, #4294967295
   13046:	strh	r3, [r4, #12]
   13048:	add	sp, #12
   1304a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1304e:	movs	r0, #0
   13050:	bx	lr
   13052:	mov	r6, r3
   13054:	mov	sl, r7
   13056:	mov	r9, r3
   13058:	mov	r0, r3
   1305a:	str	r5, [sp, #0]
   1305c:	mov	r7, r3
   1305e:	cbz	r6, 130ba <__sfvwrite_r+0x17e>
   13060:	cmp	r0, #0
   13062:	beq.n	130ca <__sfvwrite_r+0x18e>
   13064:	mov	r2, r9
   13066:	ldrd	r1, r3, [r4, #16]
   1306a:	ldr	r0, [r4, #0]
   1306c:	ldr	r5, [r4, #8]
   1306e:	cmp	r2, r6
   13070:	it	cs
   13072:	movcs	r2, r6
   13074:	cmp	r0, r1
   13076:	bls.n	13082 <__sfvwrite_r+0x146>
   13078:	add.w	fp, r5, r3
   1307c:	cmp	r2, fp
   1307e:	bgt.w	131d0 <__sfvwrite_r+0x294>
   13082:	cmp	r3, r2
   13084:	bgt.n	13150 <__sfvwrite_r+0x214>
   13086:	ldr	r1, [r4, #28]
   13088:	ldr	r5, [r4, #36]	; 0x24
   1308a:	mov	r2, r7
   1308c:	mov	r0, r8
   1308e:	blx	r5
   13090:	subs.w	fp, r0, #0
   13094:	ble.n	1303a <__sfvwrite_r+0xfe>
   13096:	subs.w	r9, r9, fp
   1309a:	beq.n	13030 <__sfvwrite_r+0xf4>
   1309c:	movs	r0, #1
   1309e:	ldr.w	r3, [sl, #8]
   130a2:	sub.w	r3, r3, fp
   130a6:	add	r7, fp
   130a8:	sub.w	r6, r6, fp
   130ac:	str.w	r3, [sl, #8]
   130b0:	cmp	r3, #0
   130b2:	beq.w	12f9e <__sfvwrite_r+0x62>
   130b6:	cmp	r6, #0
   130b8:	bne.n	13060 <__sfvwrite_r+0x124>
   130ba:	ldr	r2, [sp, #0]
   130bc:	ldr	r6, [r2, #4]
   130be:	mov	r3, r2
   130c0:	adds	r2, #8
   130c2:	str	r2, [sp, #0]
   130c4:	cmp	r6, #0
   130c6:	beq.n	130ba <__sfvwrite_r+0x17e>
   130c8:	ldr	r7, [r3, #0]
   130ca:	mov	r2, r6
   130cc:	movs	r1, #10
   130ce:	mov	r0, r7
   130d0:	bl	e3e0 <memchr>
   130d4:	cmp	r0, #0
   130d6:	beq.w	13212 <__sfvwrite_r+0x2d6>
   130da:	adds	r0, #1
   130dc:	sub.w	r9, r0, r7
   130e0:	b.n	13064 <__sfvwrite_r+0x128>
   130e2:	ldr	r0, [r4, #0]
   130e4:	ldr	r3, [r4, #16]
   130e6:	cmp	r0, r3
   130e8:	bhi.n	13118 <__sfvwrite_r+0x1dc>
   130ea:	ldr	r2, [r4, #20]
   130ec:	cmp	r2, r6
   130ee:	bhi.n	13118 <__sfvwrite_r+0x1dc>
   130f0:	mvn.w	r3, #2147483648	; 0x80000000
   130f4:	cmp	r3, r6
   130f6:	it	cs
   130f8:	movcs	r3, r6
   130fa:	ldr	r1, [r4, #28]
   130fc:	sdiv	r3, r3, r2
   13100:	ldr	r7, [r4, #36]	; 0x24
   13102:	mul.w	r3, r2, r3
   13106:	mov	r0, r8
   13108:	mov	r2, r9
   1310a:	blx	r7
   1310c:	subs.w	sl, r0, #0
   13110:	ble.n	1303a <__sfvwrite_r+0xfe>
   13112:	sub.w	r6, r6, sl
   13116:	b.n	13006 <__sfvwrite_r+0xca>
   13118:	cmp	fp, r6
   1311a:	mov	sl, fp
   1311c:	it	cs
   1311e:	movcs	sl, r6
   13120:	mov	r2, sl
   13122:	mov	r1, r9
   13124:	bl	e018 <memmove>
   13128:	ldr	r3, [r4, #8]
   1312a:	ldr	r2, [r4, #0]
   1312c:	sub.w	r3, r3, sl
   13130:	add	r2, sl
   13132:	str	r3, [r4, #8]
   13134:	str	r2, [r4, #0]
   13136:	cmp	r3, #0
   13138:	bne.n	13112 <__sfvwrite_r+0x1d6>
   1313a:	mov	r1, r4
   1313c:	mov	r0, r8
   1313e:	bl	10d8c <_fflush_r>
   13142:	cmp	r0, #0
   13144:	beq.n	13112 <__sfvwrite_r+0x1d6>
   13146:	b.n	1303a <__sfvwrite_r+0xfe>
   13148:	ldr	r0, [r4, #0]
   1314a:	mov	fp, r6
   1314c:	mov	r2, r6
   1314e:	b.n	12fea <__sfvwrite_r+0xae>
   13150:	mov	r1, r7
   13152:	str	r2, [sp, #4]
   13154:	bl	e018 <memmove>
   13158:	ldr	r2, [sp, #4]
   1315a:	ldr	r3, [r4, #8]
   1315c:	subs	r3, r3, r2
   1315e:	str	r3, [r4, #8]
   13160:	ldr	r3, [r4, #0]
   13162:	add	r3, r2
   13164:	str	r3, [r4, #0]
   13166:	mov	fp, r2
   13168:	b.n	13096 <__sfvwrite_r+0x15a>
   1316a:	ldr	r3, [r4, #0]
   1316c:	ldr	r1, [r4, #16]
   1316e:	sub.w	fp, r3, r1
   13172:	ldr	r3, [r4, #20]
   13174:	add.w	sl, r3, r3, lsl #1
   13178:	add.w	sl, sl, sl, lsr #31
   1317c:	add.w	r3, fp, #1
   13180:	mov.w	sl, sl, asr #1
   13184:	add	r3, r6
   13186:	cmp	r3, sl
   13188:	mov	r2, sl
   1318a:	itt	hi
   1318c:	movhi	sl, r3
   1318e:	movhi	r2, sl
   13190:	lsls	r3, r0, #21
   13192:	bpl.n	131ee <__sfvwrite_r+0x2b2>
   13194:	mov	r1, r2
   13196:	mov	r0, r8
   13198:	bl	d2fc <_malloc_r>
   1319c:	cmp	r0, #0
   1319e:	beq.n	13218 <__sfvwrite_r+0x2dc>
   131a0:	mov	r2, fp
   131a2:	ldr	r1, [r4, #16]
   131a4:	str	r0, [sp, #4]
   131a6:	bl	a170 <memcpy>
   131aa:	ldrh	r2, [r4, #12]
   131ac:	ldr	r3, [sp, #4]
   131ae:	bic.w	r2, r2, #1152	; 0x480
   131b2:	orr.w	r2, r2, #128	; 0x80
   131b6:	strh	r2, [r4, #12]
   131b8:	add.w	r0, r3, fp
   131bc:	str	r3, [r4, #16]
   131be:	sub.w	r3, sl, fp
   131c2:	str.w	sl, [r4, #20]
   131c6:	str	r3, [r4, #8]
   131c8:	str	r0, [r4, #0]
   131ca:	mov	fp, r6
   131cc:	mov	r2, r6
   131ce:	b.n	12fea <__sfvwrite_r+0xae>
   131d0:	mov	r1, r7
   131d2:	mov	r2, fp
   131d4:	bl	e018 <memmove>
   131d8:	ldr	r3, [r4, #0]
   131da:	add	r3, fp
   131dc:	str	r3, [r4, #0]
   131de:	mov	r1, r4
   131e0:	mov	r0, r8
   131e2:	bl	10d8c <_fflush_r>
   131e6:	cmp	r0, #0
   131e8:	beq.w	13096 <__sfvwrite_r+0x15a>
   131ec:	b.n	1303a <__sfvwrite_r+0xfe>
   131ee:	mov	r0, r8
   131f0:	bl	d874 <_realloc_r>
   131f4:	mov	r3, r0
   131f6:	cmp	r0, #0
   131f8:	bne.n	131b8 <__sfvwrite_r+0x27c>
   131fa:	ldr	r1, [r4, #16]
   131fc:	mov	r0, r8
   131fe:	bl	e684 <_free_r>
   13202:	ldrsh.w	r3, [r4, #12]
   13206:	movs	r2, #12
   13208:	bic.w	r3, r3, #128	; 0x80
   1320c:	str.w	r2, [r8]
   13210:	b.n	1303e <__sfvwrite_r+0x102>
   13212:	adds	r2, r6, #1
   13214:	mov	r9, r2
   13216:	b.n	13066 <__sfvwrite_r+0x12a>
   13218:	movs	r2, #12
   1321a:	ldrsh.w	r3, [r4, #12]
   1321e:	str.w	r2, [r8]
   13222:	b.n	1303e <__sfvwrite_r+0x102>
   13224:	mov.w	r0, #4294967295
   13228:	b.n	12fa0 <__sfvwrite_r+0x64>
   1322a:	nop
   1322c:	.word	0x7ffffc00

00013230 <__swsetup_r>:
   13230:	push	{r3, r4, r5, lr}
   13232:	ldr	r3, [pc, #196]	; (132f8 <__swsetup_r+0xc8>)
   13234:	ldr	r3, [r3, #0]
   13236:	mov	r5, r0
   13238:	mov	r4, r1
   1323a:	cbz	r3, 13242 <__swsetup_r+0x12>
   1323c:	ldr	r2, [r3, #52]	; 0x34
   1323e:	cmp	r2, #0
   13240:	beq.n	132e0 <__swsetup_r+0xb0>
   13242:	ldrsh.w	r3, [r4, #12]
   13246:	lsls	r0, r3, #28
   13248:	uxth	r2, r3
   1324a:	bpl.n	13286 <__swsetup_r+0x56>
   1324c:	ldr	r1, [r4, #16]
   1324e:	cbz	r1, 1329c <__swsetup_r+0x6c>
   13250:	ands.w	r0, r2, #1
   13254:	beq.n	13266 <__swsetup_r+0x36>
   13256:	movs	r0, #0
   13258:	str	r0, [r4, #8]
   1325a:	ldr	r0, [r4, #20]
   1325c:	negs	r0, r0
   1325e:	str	r0, [r4, #24]
   13260:	cbz	r1, 13272 <__swsetup_r+0x42>
   13262:	movs	r0, #0
   13264:	pop	{r3, r4, r5, pc}
   13266:	lsls	r5, r2, #30
   13268:	it	pl
   1326a:	ldrpl	r0, [r4, #20]
   1326c:	str	r0, [r4, #8]
   1326e:	cmp	r1, #0
   13270:	bne.n	13262 <__swsetup_r+0x32>
   13272:	lsls	r2, r2, #24
   13274:	it	pl
   13276:	movpl	r0, r1
   13278:	bpl.n	13264 <__swsetup_r+0x34>
   1327a:	orr.w	r3, r3, #64	; 0x40
   1327e:	strh	r3, [r4, #12]
   13280:	mov.w	r0, #4294967295
   13284:	pop	{r3, r4, r5, pc}
   13286:	lsls	r1, r2, #27
   13288:	bpl.n	132e8 <__swsetup_r+0xb8>
   1328a:	lsls	r2, r2, #29
   1328c:	bmi.n	132b8 <__swsetup_r+0x88>
   1328e:	ldr	r1, [r4, #16]
   13290:	orr.w	r3, r3, #8
   13294:	strh	r3, [r4, #12]
   13296:	uxth	r2, r3
   13298:	cmp	r1, #0
   1329a:	bne.n	13250 <__swsetup_r+0x20>
   1329c:	and.w	r0, r2, #640	; 0x280
   132a0:	cmp.w	r0, #512	; 0x200
   132a4:	beq.n	13250 <__swsetup_r+0x20>
   132a6:	mov	r1, r4
   132a8:	mov	r0, r5
   132aa:	bl	1353c <__smakebuf_r>
   132ae:	ldrsh.w	r3, [r4, #12]
   132b2:	ldr	r1, [r4, #16]
   132b4:	uxth	r2, r3
   132b6:	b.n	13250 <__swsetup_r+0x20>
   132b8:	ldr	r1, [r4, #48]	; 0x30
   132ba:	cbz	r1, 132d2 <__swsetup_r+0xa2>
   132bc:	add.w	r2, r4, #64	; 0x40
   132c0:	cmp	r1, r2
   132c2:	beq.n	132ce <__swsetup_r+0x9e>
   132c4:	mov	r0, r5
   132c6:	bl	e684 <_free_r>
   132ca:	ldrsh.w	r3, [r4, #12]
   132ce:	movs	r2, #0
   132d0:	str	r2, [r4, #48]	; 0x30
   132d2:	ldr	r1, [r4, #16]
   132d4:	movs	r2, #0
   132d6:	strd	r1, r2, [r4]
   132da:	bic.w	r3, r3, #36	; 0x24
   132de:	b.n	13290 <__swsetup_r+0x60>
   132e0:	mov	r0, r3
   132e2:	bl	dd84 <__sinit>
   132e6:	b.n	13242 <__swsetup_r+0x12>
   132e8:	movs	r2, #9
   132ea:	orr.w	r3, r3, #64	; 0x40
   132ee:	str	r2, [r5, #0]
   132f0:	mov.w	r0, #4294967295
   132f4:	strh	r3, [r4, #12]
   132f6:	pop	{r3, r4, r5, pc}
   132f8:	.word	0x20001a14

000132fc <__fputwc>:
   132fc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13300:	sub	sp, #8
   13302:	mov	sl, r0
   13304:	mov	r8, r1
   13306:	mov	r4, r2
   13308:	bl	e2a4 <__locale_mb_cur_max>
   1330c:	cmp	r0, #1
   1330e:	bne.n	13318 <__fputwc+0x1c>
   13310:	add.w	r3, r8, #4294967295
   13314:	cmp	r3, #254	; 0xfe
   13316:	bls.n	13386 <__fputwc+0x8a>
   13318:	add.w	r9, sp, #4
   1331c:	mov	r2, r8
   1331e:	add.w	r3, r4, #92	; 0x5c
   13322:	mov	r1, r9
   13324:	mov	r0, sl
   13326:	bl	11d2c <_wcrtomb_r>
   1332a:	adds	r2, r0, #1
   1332c:	mov	r6, r0
   1332e:	beq.n	13396 <__fputwc+0x9a>
   13330:	cbz	r0, 1337c <__fputwc+0x80>
   13332:	ldrb.w	ip, [sp, #4]
   13336:	movs	r5, #0
   13338:	b.n	1334e <__fputwc+0x52>
   1333a:	ldr	r3, [r4, #0]
   1333c:	adds	r2, r3, #1
   1333e:	str	r2, [r4, #0]
   13340:	strb.w	ip, [r3]
   13344:	adds	r5, #1
   13346:	cmp	r5, r6
   13348:	bcs.n	1337c <__fputwc+0x80>
   1334a:	ldrb.w	ip, [r9, #1]!
   1334e:	ldr	r3, [r4, #8]
   13350:	subs	r3, #1
   13352:	cmp	r3, #0
   13354:	str	r3, [r4, #8]
   13356:	bge.n	1333a <__fputwc+0x3e>
   13358:	ldr	r7, [r4, #24]
   1335a:	cmp	r3, r7
   1335c:	mov	r1, ip
   1335e:	mov	r2, r4
   13360:	mov	r0, sl
   13362:	blt.n	1336a <__fputwc+0x6e>
   13364:	cmp.w	ip, #10
   13368:	bne.n	1333a <__fputwc+0x3e>
   1336a:	bl	13614 <__swbuf_r>
   1336e:	adds	r3, r0, #1
   13370:	bne.n	13344 <__fputwc+0x48>
   13372:	mov	r6, r0
   13374:	mov	r0, r6
   13376:	add	sp, #8
   13378:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1337c:	mov	r6, r8
   1337e:	mov	r0, r6
   13380:	add	sp, #8
   13382:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13386:	uxtb.w	ip, r8
   1338a:	strb.w	ip, [sp, #4]
   1338e:	mov	r6, r0
   13390:	add.w	r9, sp, #4
   13394:	b.n	13336 <__fputwc+0x3a>
   13396:	ldrh	r3, [r4, #12]
   13398:	mov	r0, r6
   1339a:	orr.w	r3, r3, #64	; 0x40
   1339e:	strh	r3, [r4, #12]
   133a0:	add	sp, #8
   133a2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   133a6:	nop

000133a8 <_fputwc_r>:
   133a8:	push	{r4, r5, lr}
   133aa:	ldr	r3, [r2, #100]	; 0x64
   133ac:	tst.w	r3, #1
   133b0:	ldrsh.w	r3, [r2, #12]
   133b4:	mov	r4, r2
   133b6:	sub	sp, #12
   133b8:	mov	r5, r0
   133ba:	uxth	r2, r3
   133bc:	bne.n	133c2 <_fputwc_r+0x1a>
   133be:	lsls	r0, r3, #22
   133c0:	bpl.n	133fc <_fputwc_r+0x54>
   133c2:	lsls	r0, r2, #18
   133c4:	bmi.n	133d4 <_fputwc_r+0x2c>
   133c6:	ldr	r2, [r4, #100]	; 0x64
   133c8:	orr.w	r3, r3, #8192	; 0x2000
   133cc:	orr.w	r2, r2, #8192	; 0x2000
   133d0:	strh	r3, [r4, #12]
   133d2:	str	r2, [r4, #100]	; 0x64
   133d4:	mov	r2, r4
   133d6:	mov	r0, r5
   133d8:	bl	132fc <__fputwc>
   133dc:	ldr	r3, [r4, #100]	; 0x64
   133de:	lsls	r2, r3, #31
   133e0:	mov	r5, r0
   133e2:	bmi.n	133ea <_fputwc_r+0x42>
   133e4:	ldrh	r3, [r4, #12]
   133e6:	lsls	r3, r3, #22
   133e8:	bpl.n	133f0 <_fputwc_r+0x48>
   133ea:	mov	r0, r5
   133ec:	add	sp, #12
   133ee:	pop	{r4, r5, pc}
   133f0:	ldr	r0, [r4, #88]	; 0x58
   133f2:	bl	e3dc <__retarget_lock_release_recursive>
   133f6:	mov	r0, r5
   133f8:	add	sp, #12
   133fa:	pop	{r4, r5, pc}
   133fc:	ldr	r0, [r4, #88]	; 0x58
   133fe:	str	r1, [sp, #4]
   13400:	bl	e3d8 <__retarget_lock_acquire_recursive>
   13404:	ldrsh.w	r3, [r4, #12]
   13408:	ldr	r1, [sp, #4]
   1340a:	uxth	r2, r3
   1340c:	b.n	133c2 <_fputwc_r+0x1a>
   1340e:	nop

00013410 <_wcsnrtombs_l>:
   13410:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13414:	sub	sp, #44	; 0x2c
   13416:	ldrd	r8, sl, [sp, #84]	; 0x54
   1341a:	ldr	r7, [sp, #80]	; 0x50
   1341c:	str	r1, [sp, #12]
   1341e:	mov	r9, r0
   13420:	str	r2, [sp, #20]
   13422:	mov	r6, r3
   13424:	cmp.w	r8, #0
   13428:	beq.n	134e4 <_wcsnrtombs_l+0xd4>
   1342a:	ldr	r3, [sp, #12]
   1342c:	cmp	r3, #0
   1342e:	beq.n	134ee <_wcsnrtombs_l+0xde>
   13430:	ldr	r3, [sp, #20]
   13432:	ldr	r5, [r3, #0]
   13434:	cmp	r7, #0
   13436:	beq.n	1350e <_wcsnrtombs_l+0xfe>
   13438:	subs	r4, r6, #1
   1343a:	cbz	r6, 13490 <_wcsnrtombs_l+0x80>
   1343c:	ldr	r3, [sp, #12]
   1343e:	str	r3, [sp, #16]
   13440:	subs	r5, #4
   13442:	movs	r6, #0
   13444:	str	r5, [sp, #4]
   13446:	b.n	13460 <_wcsnrtombs_l+0x50>
   13448:	ldr	r3, [sp, #12]
   1344a:	cbnz	r3, 13498 <_wcsnrtombs_l+0x88>
   1344c:	ldr	r3, [sp, #4]
   1344e:	ldr	r2, [r3, #0]
   13450:	cmp	r2, #0
   13452:	beq.n	134ca <_wcsnrtombs_l+0xba>
   13454:	cmp	ip, r7
   13456:	bcs.n	13512 <_wcsnrtombs_l+0x102>
   13458:	subs	r4, #1
   1345a:	adds	r3, r4, #1
   1345c:	mov	r6, ip
   1345e:	beq.n	13490 <_wcsnrtombs_l+0x80>
   13460:	ldr.w	r3, [r8]
   13464:	str	r3, [sp, #8]
   13466:	ldr	r3, [sp, #4]
   13468:	ldr.w	r5, [sl, #224]	; 0xe0
   1346c:	ldr.w	r2, [r3, #4]!
   13470:	str	r3, [sp, #4]
   13472:	add	r1, sp, #28
   13474:	mov	r3, r8
   13476:	mov	r0, r9
   13478:	ldr.w	fp, [r8, #4]
   1347c:	blx	r5
   1347e:	adds	r2, r0, #1
   13480:	beq.n	134f8 <_wcsnrtombs_l+0xe8>
   13482:	add.w	ip, r0, r6
   13486:	cmp	ip, r7
   13488:	bls.n	13448 <_wcsnrtombs_l+0x38>
   1348a:	ldr	r3, [sp, #8]
   1348c:	strd	r3, fp, [r8]
   13490:	mov	r0, r6
   13492:	add	sp, #44	; 0x2c
   13494:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13498:	cmp	r0, #0
   1349a:	ble.n	134ba <_wcsnrtombs_l+0xaa>
   1349c:	ldr	r3, [sp, #16]
   1349e:	ldr	r5, [sp, #4]
   134a0:	add	r0, r3
   134a2:	subs	r2, r3, #1
   134a4:	add	r1, sp, #28
   134a6:	add.w	lr, r0, #4294967295
   134aa:	ldrb.w	r3, [r1], #1
   134ae:	strb.w	r3, [r2, #1]!
   134b2:	cmp	r2, lr
   134b4:	bne.n	134aa <_wcsnrtombs_l+0x9a>
   134b6:	str	r5, [sp, #4]
   134b8:	str	r0, [sp, #16]
   134ba:	ldr	r3, [sp, #20]
   134bc:	ldr	r2, [r3, #0]
   134be:	adds	r2, #4
   134c0:	str	r2, [r3, #0]
   134c2:	ldr	r3, [sp, #4]
   134c4:	ldr	r2, [r3, #0]
   134c6:	cmp	r2, #0
   134c8:	bne.n	13454 <_wcsnrtombs_l+0x44>
   134ca:	ldr	r3, [sp, #12]
   134cc:	cbz	r3, 134d2 <_wcsnrtombs_l+0xc2>
   134ce:	ldr	r3, [sp, #20]
   134d0:	str	r2, [r3, #0]
   134d2:	add.w	r6, ip, #4294967295
   134d6:	movs	r2, #0
   134d8:	mov	r0, r6
   134da:	str.w	r2, [r8]
   134de:	add	sp, #44	; 0x2c
   134e0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   134e4:	ldr	r3, [sp, #12]
   134e6:	add.w	r8, r0, #268	; 0x10c
   134ea:	cmp	r3, #0
   134ec:	bne.n	13430 <_wcsnrtombs_l+0x20>
   134ee:	ldr	r3, [sp, #20]
   134f0:	mov.w	r7, #4294967295
   134f4:	ldr	r5, [r3, #0]
   134f6:	b.n	13438 <_wcsnrtombs_l+0x28>
   134f8:	mov	r6, r0
   134fa:	movs	r1, #138	; 0x8a
   134fc:	movs	r2, #0
   134fe:	mov	r0, r6
   13500:	str.w	r1, [r9]
   13504:	str.w	r2, [r8]
   13508:	add	sp, #44	; 0x2c
   1350a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1350e:	mov	r6, r7
   13510:	b.n	13490 <_wcsnrtombs_l+0x80>
   13512:	mov	r6, ip
   13514:	b.n	13490 <_wcsnrtombs_l+0x80>
   13516:	nop

00013518 <_wcsnrtombs_r>:
   13518:	push	{r4, lr}
   1351a:	sub	sp, #16
   1351c:	ldr	r4, [pc, #20]	; (13534 <_wcsnrtombs_r+0x1c>)
   1351e:	ldr	r0, [sp, #24]
   13520:	str	r0, [sp, #0]
   13522:	ldr	r0, [sp, #28]
   13524:	str	r0, [sp, #4]
   13526:	ldr	r0, [pc, #16]	; (13538 <_wcsnrtombs_r+0x20>)
   13528:	ldr	r0, [r0, #0]
   1352a:	str	r4, [sp, #8]
   1352c:	bl	13410 <_wcsnrtombs_l>
   13530:	add	sp, #16
   13532:	pop	{r4, pc}
   13534:	.word	0x2000148c
   13538:	.word	0x20001a14

0001353c <__smakebuf_r>:
   1353c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13540:	ldrh	r3, [r1, #12]
   13542:	mov	r4, r1
   13544:	lsls	r1, r3, #30
   13546:	sub	sp, #88	; 0x58
   13548:	bpl.n	1355c <__smakebuf_r+0x20>
   1354a:	add.w	r3, r4, #67	; 0x43
   1354e:	movs	r2, #1
   13550:	strd	r3, r2, [r4, #16]
   13554:	str	r3, [r4, #0]
   13556:	add	sp, #88	; 0x58
   13558:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1355c:	ldrsh.w	r1, [r4, #14]
   13560:	cmp	r1, #0
   13562:	mov	r6, r0
   13564:	blt.n	135b2 <__smakebuf_r+0x76>
   13566:	mov	r2, sp
   13568:	bl	136c4 <_fstat_r>
   1356c:	cmp	r0, #0
   1356e:	blt.n	135b0 <__smakebuf_r+0x74>
   13570:	ldr	r5, [sp, #4]
   13572:	and.w	r5, r5, #61440	; 0xf000
   13576:	sub.w	r5, r5, #8192	; 0x2000
   1357a:	clz	r5, r5
   1357e:	mov.w	r8, #1024	; 0x400
   13582:	lsrs	r5, r5, #5
   13584:	mov.w	r7, #2048	; 0x800
   13588:	mov	r1, r8
   1358a:	mov	r0, r6
   1358c:	bl	d2fc <_malloc_r>
   13590:	cbz	r0, 135cc <__smakebuf_r+0x90>
   13592:	ldrsh.w	r3, [r4, #12]
   13596:	str.w	r8, [r4, #20]
   1359a:	orr.w	r3, r3, #128	; 0x80
   1359e:	str	r0, [r4, #0]
   135a0:	str	r0, [r4, #16]
   135a2:	strh	r3, [r4, #12]
   135a4:	cbnz	r5, 135f4 <__smakebuf_r+0xb8>
   135a6:	orrs	r3, r7
   135a8:	strh	r3, [r4, #12]
   135aa:	add	sp, #88	; 0x58
   135ac:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   135b0:	ldrh	r3, [r4, #12]
   135b2:	ands.w	r5, r3, #128	; 0x80
   135b6:	beq.n	135ec <__smakebuf_r+0xb0>
   135b8:	mov.w	r8, #64	; 0x40
   135bc:	movs	r5, #0
   135be:	mov	r1, r8
   135c0:	mov	r0, r6
   135c2:	mov	r7, r5
   135c4:	bl	d2fc <_malloc_r>
   135c8:	cmp	r0, #0
   135ca:	bne.n	13592 <__smakebuf_r+0x56>
   135cc:	ldrsh.w	r3, [r4, #12]
   135d0:	lsls	r2, r3, #22
   135d2:	bmi.n	13556 <__smakebuf_r+0x1a>
   135d4:	bic.w	r3, r3, #3
   135d8:	add.w	r2, r4, #67	; 0x43
   135dc:	orr.w	r3, r3, #2
   135e0:	movs	r1, #1
   135e2:	strd	r2, r1, [r4, #16]
   135e6:	strh	r3, [r4, #12]
   135e8:	str	r2, [r4, #0]
   135ea:	b.n	13556 <__smakebuf_r+0x1a>
   135ec:	mov.w	r8, #1024	; 0x400
   135f0:	mov	r7, r5
   135f2:	b.n	13588 <__smakebuf_r+0x4c>
   135f4:	ldrsh.w	r1, [r4, #14]
   135f8:	mov	r0, r6
   135fa:	bl	136f0 <_isatty_r>
   135fe:	cbnz	r0, 13606 <__smakebuf_r+0xca>
   13600:	ldrsh.w	r3, [r4, #12]
   13604:	b.n	135a6 <__smakebuf_r+0x6a>
   13606:	ldrh	r3, [r4, #12]
   13608:	bic.w	r3, r3, #3
   1360c:	orr.w	r3, r3, #1
   13610:	sxth	r3, r3
   13612:	b.n	135a6 <__smakebuf_r+0x6a>

00013614 <__swbuf_r>:
   13614:	push	{r3, r4, r5, r6, r7, lr}
   13616:	mov	r5, r1
   13618:	mov	r4, r2
   1361a:	mov	r6, r0
   1361c:	cbz	r0, 13624 <__swbuf_r+0x10>
   1361e:	ldr	r3, [r0, #52]	; 0x34
   13620:	cmp	r3, #0
   13622:	beq.n	136be <__swbuf_r+0xaa>
   13624:	ldrsh.w	r2, [r4, #12]
   13628:	ldr	r3, [r4, #24]
   1362a:	str	r3, [r4, #8]
   1362c:	lsls	r7, r2, #28
   1362e:	uxth	r0, r2
   13630:	bpl.n	1366a <__swbuf_r+0x56>
   13632:	ldr	r3, [r4, #16]
   13634:	cbz	r3, 1366a <__swbuf_r+0x56>
   13636:	uxtb	r5, r5
   13638:	lsls	r1, r0, #18
   1363a:	mov	r7, r5
   1363c:	bpl.n	13684 <__swbuf_r+0x70>
   1363e:	ldr	r2, [r4, #0]
   13640:	ldr	r1, [r4, #20]
   13642:	subs	r3, r2, r3
   13644:	cmp	r1, r3
   13646:	ble.n	1369c <__swbuf_r+0x88>
   13648:	adds	r3, #1
   1364a:	ldr	r1, [r4, #8]
   1364c:	subs	r1, #1
   1364e:	str	r1, [r4, #8]
   13650:	adds	r1, r2, #1
   13652:	str	r1, [r4, #0]
   13654:	strb	r5, [r2, #0]
   13656:	ldr	r2, [r4, #20]
   13658:	cmp	r2, r3
   1365a:	beq.n	136ac <__swbuf_r+0x98>
   1365c:	ldrh	r3, [r4, #12]
   1365e:	lsls	r3, r3, #31
   13660:	bpl.n	13666 <__swbuf_r+0x52>
   13662:	cmp	r5, #10
   13664:	beq.n	136ac <__swbuf_r+0x98>
   13666:	mov	r0, r7
   13668:	pop	{r3, r4, r5, r6, r7, pc}
   1366a:	mov	r1, r4
   1366c:	mov	r0, r6
   1366e:	bl	13230 <__swsetup_r>
   13672:	cbnz	r0, 136b8 <__swbuf_r+0xa4>
   13674:	ldrsh.w	r2, [r4, #12]
   13678:	ldr	r3, [r4, #16]
   1367a:	uxth	r0, r2
   1367c:	uxtb	r5, r5
   1367e:	lsls	r1, r0, #18
   13680:	mov	r7, r5
   13682:	bmi.n	1363e <__swbuf_r+0x2a>
   13684:	orr.w	r2, r2, #8192	; 0x2000
   13688:	strh	r2, [r4, #12]
   1368a:	ldr	r2, [r4, #100]	; 0x64
   1368c:	ldr	r1, [r4, #20]
   1368e:	bic.w	r2, r2, #8192	; 0x2000
   13692:	str	r2, [r4, #100]	; 0x64
   13694:	ldr	r2, [r4, #0]
   13696:	subs	r3, r2, r3
   13698:	cmp	r1, r3
   1369a:	bgt.n	13648 <__swbuf_r+0x34>
   1369c:	mov	r1, r4
   1369e:	mov	r0, r6
   136a0:	bl	10d8c <_fflush_r>
   136a4:	cbnz	r0, 136b8 <__swbuf_r+0xa4>
   136a6:	ldr	r2, [r4, #0]
   136a8:	movs	r3, #1
   136aa:	b.n	1364a <__swbuf_r+0x36>
   136ac:	mov	r1, r4
   136ae:	mov	r0, r6
   136b0:	bl	10d8c <_fflush_r>
   136b4:	cmp	r0, #0
   136b6:	beq.n	13666 <__swbuf_r+0x52>
   136b8:	mov.w	r7, #4294967295
   136bc:	b.n	13666 <__swbuf_r+0x52>
   136be:	bl	dd84 <__sinit>
   136c2:	b.n	13624 <__swbuf_r+0x10>

000136c4 <_fstat_r>:
   136c4:	push	{r4, r5, r6, lr}
   136c6:	mov	r4, r1
   136c8:	ldr	r5, [pc, #32]	; (136ec <_fstat_r+0x28>)
   136ca:	mov	r3, r0
   136cc:	movs	r6, #0
   136ce:	mov	r0, r4
   136d0:	mov	r1, r2
   136d2:	mov	r4, r3
   136d4:	str	r6, [r5, #0]
   136d6:	bl	bb2c <_fstat>
   136da:	adds	r3, r0, #1
   136dc:	beq.n	136e0 <_fstat_r+0x1c>
   136de:	pop	{r4, r5, r6, pc}
   136e0:	ldr	r3, [r5, #0]
   136e2:	cmp	r3, #0
   136e4:	beq.n	136de <_fstat_r+0x1a>
   136e6:	str	r3, [r4, #0]
   136e8:	pop	{r4, r5, r6, pc}
   136ea:	nop
   136ec:	.word	0x200073b4

000136f0 <_isatty_r>:
   136f0:	push	{r3, r4, r5, lr}
   136f2:	ldr	r5, [pc, #28]	; (13710 <_isatty_r+0x20>)
   136f4:	movs	r2, #0
   136f6:	mov	r4, r0
   136f8:	mov	r0, r1
   136fa:	str	r2, [r5, #0]
   136fc:	bl	bb38 <_isatty>
   13700:	adds	r3, r0, #1
   13702:	beq.n	13706 <_isatty_r+0x16>
   13704:	pop	{r3, r4, r5, pc}
   13706:	ldr	r3, [r5, #0]
   13708:	cmp	r3, #0
   1370a:	beq.n	13704 <_isatty_r+0x14>
   1370c:	str	r3, [r4, #0]
   1370e:	pop	{r3, r4, r5, pc}
   13710:	.word	0x200073b4
   13714:	.word	0x00000000

00013718 <___init_veneer>:
   13718:	ldr.w	pc, [pc]	; 1371c <___init_veneer+0x4>
   1371c:	.word	0x60001eb5

00013720 <___ZN11AudioStream17initialize_memoryEP18audio_block_structj_veneer>:
   13720:	ldr.w	pc, [pc]	; 13724 <___ZN11AudioStream17initialize_memoryEP18audio_block_structj_veneer+0x4>
   13724:	.word	0x60001d99

00013728 <___reboot_Teensyduino__veneer>:
   13728:	ldr.w	pc, [pc]	; 1372c <___reboot_Teensyduino__veneer+0x4>
   1372c:	.word	0x60001731

Disassembly of section .fini:

00013730 <_fini>:
   13730:	push	{r3, r4, r5, r6, r7, lr}
   13732:	nop

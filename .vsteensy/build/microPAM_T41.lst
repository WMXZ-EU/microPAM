
.vsteensy/build/microPAM_T41.elf:     file format elf32-littlearm

SYMBOL TABLE:
60000000 l    d  .text.headers	00000000 .text.headers
60001400 l    d  .text.code	00000000 .text.code
60001f8c l    d  .text.progmem	00000000 .text.progmem
00000000 l    d  .text.itcm	00000000 .text.itcm
000136b0 l    d  .fini	00000000 .fini
000136b4 l    d  .ARM.exidx	00000000 .ARM.exidx
20000000 l    d  .data	00000000 .data
20001ec0 l    d  .bss	00000000 .bss
20200000 l    d  .bss.dma	00000000 .bss.dma
70000000 l    d  .bss.extram	00000000 .bss.extram
600178f4 l    d  .text.csf	00000000 .text.csf
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_loclists	00000000 .debug_loclists
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_rnglists	00000000 .debug_rnglists
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 l    df *ABS*	00000000 bootdata.c
00000000 l    df *ABS*	00000000 startup.c
60001400 l     F .text.code	00000016 memory_copy
60001418 l     F .text.code	00000010 memory_clear
00000000 l    df *ABS*	00000000 usb.c
0000ac38 l     F .text.itcm	000000c8 endpoint0_receive
0000ad00 l     F .text.itcm	00000088 schedule_transfer
0000ad88 l     F .text.itcm	00000036 run_callbacks
0000adc0 l     F .text.itcm	00000098 endpoint0_transmit.constprop.0
20007988 l     O .bss	00000008 endpoint0_buffer
20007990 l     O .bss	00000004 endpoint0_notify_mask
200052f8 l     O .bss	00000008 endpoint0_setupdata
20007994 l     O .bss	00000004 endpointN_notify_mask
20008074 l     O .bss	00000008 reply_buffer
2000816b l     O .bss	00000001 sof_usage
20008179 l     O .bss	00000001 usb_reboot_timer
00000000 l    df *ABS*	00000000 tempmon.c
200080d0 l     O .bss	00000004 s_hotCount
200080d4 l     O .bss	00000004 s_hotTemp
200080d8 l     O .bss	00000004 s_hot_ROOM
200080dc l     O .bss	00000004 s_roomC_hotC
00000000 l    df *ABS*	00000000 audiostream.cpp
00000000 l    df *ABS*	00000000 analog.c
20008165 l     O .bss	00000001 calibrating
00000000 l    df *ABS*	00000000 crti.o
00000000 l    df *ABS*	00000000 crtn.o
00000000 l    df *ABS*	00000000 crtstuff.c
00000020 l     F .text.itcm	00000000 register_tm_clones
00000044 l     F .text.itcm	00000000 frame_dummy
20007c48 l     O .bss	00000000 object.0
60001f10 l     O .text.code	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 main.cpp
000011c0 l     F .text.itcm	00000654 storeData(int) [clone .part.0]
20200000 l     O .bss.dma	00003cf0 setup::data
00001a58 l     F .text.itcm	000001c4 _GLOBAL__sub_I_DirPrefix
20005c8c l     O .bss	00000400 i2s_rx_buffer_32
2000608c l     O .bss	00000100 dout
200061fc l     O .bss	00000100 outData
200062fc l     O .bss	00000100 tempData
200065cc l     O .bss	00000004 loop::ic
200065d0 l     O .bss	00000004 loop::t0
20008144 l     O .bss	00000002 loop::status
200065d4 l     O .bss	00000004 AudioCompress::compress(void*)::nout
00000000 l    df *ABS*	00000000 output_i2s_oct.cpp
00001c1c l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN17AudioOutputI2SOct13block_ch1_1stE
00000000 l    df *ABS*	00000000 output_pwm.cpp
00001c34 l     F .text.itcm	0000001c __tcf_0
00001c50 l     F .text.itcm	00000030 _GLOBAL__sub_I__ZN14AudioOutputPWM21update_responsibilityE
00000000 l    df *ABS*	00000000 input_i2s.cpp
00001c80 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE
00000000 l    df *ABS*	00000000 output_pt8211_2.cpp
00001c98 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN19AudioOutputPT8211_214block_left_1stE
00000000 l    df *ABS*	00000000 output_pt8211.cpp
00001cb0 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE
00000000 l    df *ABS*	00000000 input_spdif3.cpp
00001cc8 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN16AudioInputSPDIF310block_leftE
00000000 l    df *ABS*	00000000 input_tdm2.cpp
00001ce0 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN14AudioInputTDM214block_incomingE
00000000 l    df *ABS*	00000000 input_adc.cpp
00001cf8 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN16AudioInputAnalog3dmaE
00000000 l    df *ABS*	00000000 input_pdm_i2s2.cpp
00001d10 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN14AudioInputPDM210block_leftE
00000000 l    df *ABS*	00000000 input_i2s2.cpp
00001d28 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN14AudioInputI2S210block_leftE
00000000 l    df *ABS*	00000000 input_i2s_quad.cpp
00001d40 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E
00000000 l    df *ABS*	00000000 output_i2s_quad.cpp
00001d58 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE
00000000 l    df *ABS*	00000000 output_tdm2.cpp
00001e80 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN15AudioOutputTDM211block_inputE
00000000 l    df *ABS*	00000000 output_i2s2.cpp
00001e98 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN15AudioOutputI2S214block_left_1stE
00000000 l    df *ABS*	00000000 output_i2s_hex.cpp
00001eb0 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN17AudioOutputI2SHex13block_ch1_1stE
00000000 l    df *ABS*	00000000 input_i2s_oct.cpp
00001ec8 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E
00000000 l    df *ABS*	00000000 output_tdm.cpp
00001ee0 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE
00000000 l    df *ABS*	00000000 input_tdm.cpp
00001ef8 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE
00000000 l    df *ABS*	00000000 input_i2s_hex.cpp
00001f10 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E
00000000 l    df *ABS*	00000000 output_spdif3.cpp
00001f28 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN17AudioOutputSPDIF314block_left_1stE
00000000 l    df *ABS*	00000000 output_mqs.cpp
00001f40 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN14AudioOutputMQS14block_left_1stE
00000000 l    df *ABS*	00000000 async_input_spdif3.cpp
0000204c l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN21AsyncAudioInputSPDIF310microsLastE
00000000 l    df *ABS*	00000000 input_pdm.cpp
00002064 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE
00000000 l    df *ABS*	00000000 output_i2s.cpp
0000207c l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE
00000000 l    df *ABS*	00000000 output_spdif2.cpp
00002094 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN17AudioOutputSPDIF214block_left_1stE
00000000 l    df *ABS*	00000000 output_spdif.cpp
000020ac l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE
00000000 l    df *ABS*	00000000 wireimxrt.cpp
00002420 l     F .text.itcm	00000044 _GLOBAL__sub_I__ZN7TwoWire5beginEv
00000000 l    df *ABS*	00000000 spi.cpp
0000247c l     F .text.itcm	00000060 SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]
00002944 l     F .text.itcm	00000048 _GLOBAL__sub_I__ZN8SPIClass5beginEv
00000000 l    df *ABS*	00000000 sd.cpp
00003058 l     F .text.itcm	0000008c _GLOBAL__sub_I_SD
00000000 l    df *ABS*	00000000 usb_desc.c
20001a28 l     O .data	00000012 device_descriptor
6000236c l     O .text.progmem	0000000a qualifier_descriptor
00000000 l    df *ABS*	00000000 serialevent.cpp
00000000 l    df *ABS*	00000000 effect_delay_ext.cpp
00000000 l    df *ABS*	00000000 record_queue.cpp
00000000 l    df *ABS*	00000000 time.cpp
20000764 l     O .data	0000000c monthDays
00000000 l    df *ABS*	00000000 fsstructs.cpp
00000000 l    df *ABS*	00000000 fscache.cpp
00000000 l    df *ABS*	00000000 upcase.cpp
20000564 l     O .data	0000012c lookupTable
20000690 l     O .data	000000d4 mapTable
00000000 l    df *ABS*	00000000 fsdatetime.cpp
000032e4 l     F .text.itcm	00000014 dateTimeMs10(unsigned short*, unsigned short*, unsigned char*)
00000000 l    df *ABS*	00000000 exfatformatter.cpp
00003310 l     F .text.itcm	00000020 Print::write(char const*) [clone .isra.0]
00000000 l    df *ABS*	00000000 exfatname.cpp
00000000 l    df *ABS*	00000000 exfatfile.cpp
00000000 l    df *ABS*	00000000 exfatpartition.cpp
00000000 l    df *ABS*	00000000 exfatfilewrite.cpp
00000000 l    df *ABS*	00000000 fatformatter.cpp
00000000 l    df *ABS*	00000000 fatname.cpp
00000000 l    df *ABS*	00000000 fatfile.cpp
00005ab0 l     F .text.itcm	000000bc FatFile::sync() [clone .part.0]
00000000 l    df *ABS*	00000000 fatpartition.cpp
00006ad8 l     F .text.itcm	00000068 FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]
00006b40 l     F .text.itcm	0000005a FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]
00000000 l    df *ABS*	00000000 fatfilelfn.cpp
00000000 l    df *ABS*	00000000 fsfile.cpp
00000000 l    df *ABS*	00000000 fsvolume.cpp
00000000 l    df *ABS*	00000000 fsnew.cpp
00000000 l    df *ABS*	00000000 sdspicard.cpp
00000000 l    df *ABS*	00000000 sdioteensy.cpp
000089e0 l     F .text.itcm	00000030 sdIrs()
00008a10 l     F .text.itcm	00000014 isBusyDat()
00008a24 l     F .text.itcm	0000000c isBusyDMA()
00008a30 l     F .text.itcm	000000cc setSdclk(unsigned long)
00008c44 l     F .text.itcm	00000068 waitDmaStatus()
00008cac l     F .text.itcm	00000088 waitTransferComplete() [clone .part.0]
00008de8 l     F .text.itcm	00000098 cardCommand(unsigned long, unsigned long)
00008e80 l     F .text.itcm	00000060 readReg16(unsigned long, void*)
00008f7c l     F .text.itcm	0000002c isBusyCMD13()
000091fc l     F .text.itcm	0000010c rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)
20008158 l     O .bss	00000001 m_initDone
20005c84 l     O .bss	00000004 m_sdClkKhz
20008159 l     O .bss	00000001 m_version2
20005c88 l     O .bss	00000004 m_errorLine
2000815a l     O .bss	00000001 m_highCapacity
2000815b l     O .bss	00000001 m_transferActive
2000618c l     O .bss	00000010 m_cid
2000619c l     O .bss	00000010 m_csd
200061ac l     O .bss	00000004 m_ocr
200061b0 l     O .bss	00000004 m_rca
200061b4 l     O .bss	00000008 m_scr
200061bc l     O .bss	00000040 m_sds
200063fc l     O .bss	00000004 m_busyFcn
2000815c l     O .bss	00000001 m_dmaBusy
20006400 l     O .bss	00000004 m_irqstat
20001a56 l     O .data	00000001 m_errorCode
00000000 l    df *ABS*	00000000 sdspiteensy3.cpp
00000000 l    df *ABS*	00000000 sdspichipselect.cpp
00000000 l    df *ABS*	00000000 memcpy-armv7m.o
00000000 l    df *ABS*	00000000 usb_serial.c
0000a208 l     F .text.itcm	00000060 rx_queue_transfer
20001f20 l     O .bss	00001000 rx_buffer
0000a268 l     F .text.itcm	000000b4 rx_event
0000a31c l     F .text.itcm	00000090 usb_serial_flush_callback
20003240 l     O .bss	00002000 txbuffer
0000a3ac l     F .text.itcm	000001b8 usb_serial_write.part.0
2000807c l     O .bss	00000004 rx_available
20008084 l     O .bss	00000010 rx_count
20008167 l     O .bss	00000001 rx_head
200080a0 l     O .bss	00000010 rx_index
200080bc l     O .bss	00000009 rx_list
2000814a l     O .bss	00000002 rx_packet_size
20008169 l     O .bss	00000001 rx_tail
20002f20 l     O .bss	00000100 rx_transfer
2000816c l     O .bss	00000001 transmit_previous_timeout
20008150 l     O .bss	00000002 tx_available
2000816e l     O .bss	00000001 tx_head
20008170 l     O .bss	00000001 tx_noautoflush
20008154 l     O .bss	00000002 tx_packet_size
20003120 l     O .bss	00000080 tx_transfer
00000000 l    df *ABS*	00000000 clockspeed.c
00000000 l    df *ABS*	00000000 delay.c
00000000 l    df *ABS*	00000000 rtc.c
00000000 l    df *ABS*	00000000 sm_pool.c
00000000 l    df *ABS*	00000000 digital.c
00000000 l    df *ABS*	00000000 pwm.c
00000000 l    df *ABS*	00000000 usb_midi.c
0000be60 l     F .text.itcm	00000060 rx_queue_transfer
0000bec0 l     F .text.itcm	00000064 rx_event
20008080 l     O .bss	00000004 rx_available
20008094 l     O .bss	0000000c rx_count
20008168 l     O .bss	00000001 rx_head
200080b0 l     O .bss	0000000c rx_index
200080c8 l     O .bss	00000007 rx_list
2000814c l     O .bss	00000002 rx_packet_size
2000816a l     O .bss	00000001 rx_tail
20003020 l     O .bss	000000c0 rx_transfer
2000816d l     O .bss	00000001 transmit_previous_timeout
20008152 l     O .bss	00000002 tx_available
2000816f l     O .bss	00000001 tx_head
20008171 l     O .bss	00000001 tx_noautoflush
20008156 l     O .bss	00000002 tx_packet_size
200031a0 l     O .bss	00000080 tx_transfer
20203d00 l     O .bss.dma	00000c00 rx_buffer
20204900 l     O .bss.dma	00000800 txbuffer
00000000 l    df *ABS*	00000000 yield.cpp
20008163 l     O .bss	00000001 yield::running
00000000 l    df *ABS*	00000000 eventresponder.cpp
00000000 l    df *ABS*	00000000 dmachannel.cpp
00000000 l    df *ABS*	00000000 usb_inst.cpp
00000000 l    df *ABS*	00000000 time.cpp
20000770 l     O .data	0000000c monthDays
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 usb_audio.cpp
0000c950 l     F .text.itcm	00000098 copy_to_buffers(unsigned long const*, short*, short*, unsigned int)
0000c9e8 l     F .text.itcm	0000005c sync_event(transfer_struct*)
0000ccb0 l     F .text.itcm	00000054 rx_event(transfer_struct*)
0000ce24 l     F .text.itcm	00000060 tx_event(transfer_struct*)
2000148c l     O .data	00000004 usb_audio_transmit_callback::count
20205280 l     O .bss.dma	000000b4 rx_buffer
20205340 l     O .bss.dma	000000b4 tx_buffer
00000000 l    df *ABS*	00000000 print.cpp
00000000 l    df *ABS*	00000000 new.cpp
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 intervaltimer.cpp
0000d114 l     F .text.itcm	00000058 pit_isr()
20001ec0 l     O .bss	00000010 funct_table
00000000 l    df *ABS*	00000000 atexit_arm.o
00000000 l    df *ABS*	00000000 libc_a-malloc.o
00000000 l    df *ABS*	00000000 libc_a-mallocr.o
00000000 l    df *ABS*	00000000 libc_a-mlock.o
00000000 l    df *ABS*	00000000 libc_a-reallocr.o
00000000 l    df *ABS*	00000000 libc_a-cxa_atexit.o
00000000 l    df *ABS*	00000000 libc_a-findfp.o
0000dbbc l     F .text.itcm	00000018 stdio_exit_handler
0000dbd4 l     F .text.itcm	00000040 cleanup_stdio
0000dc14 l     F .text.itcm	000000d4 global_stdio_init.part.0
00000000 l    df *ABS*	00000000 libc_a-fwalk.o
00000000 l    df *ABS*	00000000 libc_a-sprintf.o
00000000 l    df *ABS*	00000000 libc_a-stdio.o
00000000 l    df *ABS*	00000000 libc_a-vdprintf.o
00000000 l    df *ABS*	00000000 libc_a-vasnprintf.o
00000000 l    df *ABS*	00000000 libc_a-memcmp.o
00000000 l    df *ABS*	00000000 libc_a-memmove.o
00000000 l    df *ABS*	00000000 libc_a-memset.o
00000000 l    df *ABS*	00000000 libc_a-strncmp.o
00000000 l    df *ABS*	00000000 libc_a-strncpy.o
00000000 l    df *ABS*	00000000 libc_a-locale.o
00000000 l    df *ABS*	00000000 libc_a-closer.o
00000000 l    df *ABS*	00000000 libc_a-lseekr.o
00000000 l    df *ABS*	00000000 libc_a-readr.o
00000000 l    df *ABS*	00000000 libc_a-sbrkr.o
00000000 l    df *ABS*	00000000 libc_a-writer.o
00000000 l    df *ABS*	00000000 libc_a-errno.o
00000000 l    df *ABS*	00000000 libc_a-init.o
00000000 l    df *ABS*	00000000 libc_a-lock.o
00000000 l    df *ABS*	00000000 libc_a-memchr.o
00000000 l    df *ABS*	00000000 libc_a-strlen.o
00000000 l    df *ABS*	00000000 libc_a-__atexit.o
00000000 l    df *ABS*	00000000 libc_a-freer.o
00000000 l    df *ABS*	00000000 libc_a-mbtowc_r.o
00000000 l    df *ABS*	00000000 libc_a-mprec.o
00000000 l    df *ABS*	00000000 libc_a-wctomb_r.o
00000000 l    df *ABS*	00000000 libc_a-svfprintf.o
00000000 l    df *ABS*	00000000 libc_a-fclose.o
00000000 l    df *ABS*	00000000 libc_a-fflush.o
00000000 l    df *ABS*	00000000 libc_a-localeconv.o
00000000 l    df *ABS*	00000000 libm_a-s_frexp.o
00000000 l    df *ABS*	00000000 libc_a-assert.o
00000000 l    df *ABS*	00000000 libc_a-callocr.o
00000000 l    df *ABS*	00000000 libc_a-dtoa.o
00010e98 l     F .text.itcm	00000126 quorem
00000000 l    df *ABS*	00000000 libc_a-wcrtomb.o
00000000 l    df *ABS*	00000000 libc_a-wcsrtombs.o
00000000 l    df *ABS*	00000000 libc_a-fiprintf.o
00000000 l    df *ABS*	00000000 libc_a-svfiprintf.o
00000000 l    df *ABS*	00000000 libc_a-vfiprintf.o
00011e38 l     F .text.itcm	00000076 __sprint_r.part.0
00012e3c l     F .text.itcm	00000080 __sbprintf
00000000 l    df *ABS*	00000000 libc_a-fvwrite.o
00000000 l    df *ABS*	00000000 libc_a-wsetup.o
00000000 l    df *ABS*	00000000 libc_a-fputwc.o
00000000 l    df *ABS*	00000000 libc_a-wcsnrtombs.o
00000000 l    df *ABS*	00000000 libc_a-makebuf.o
00000000 l    df *ABS*	00000000 libc_a-wbuf.o
00000000 l    df *ABS*	00000000 libc_a-fstatr.o
00000000 l    df *ABS*	00000000 libc_a-isattyr.o
00000000 l    df *ABS*	00000000 libc_a-ctype_.o
00000000 l    df *ABS*	00000000 libc_a-impure.o
00000000 l    df *ABS*	00000000 libc_a-__call_atexit.o
00000000 l    df *ABS*	00000000 exfatvolume.cpp
00000000 l    df *ABS*	00000000 fatvolume.cpp
00000000 l    df *ABS*	00000000 hardwareserial.cpp
00013698 l     F .text.itcm	00000008 ___ZN11AudioStream17initialize_memoryEP18audio_block_structj_veneer
000136a0 l     F .text.itcm	00000008 ___reboot_Teensyduino__veneer
000136a8 l     F .text.itcm	00000008 ___init_veneer
60001ec0 l     F .text.code	00000008 ____libc_init_array_veneer
60001ec8 l     F .text.code	00000008 __pwm_init_veneer
60001ed0 l     F .text.code	00000008 __delay_veneer
60001ed8 l     F .text.code	00000008 __main_veneer
60001ee0 l     F .text.code	00000008 __sm_set_pool_veneer
60001ee8 l     F .text.code	00000008 __set_arm_clock_veneer
60001ef0 l     F .text.code	00000008 ___ZN13IntervalTimer11beginCyclesEPFvvEm_veneer
60001ef8 l     F .text.code	00000008 ___Znwj_veneer
60001f00 l     F .text.code	00000008 __memset_veneer
60001f08 l     F .text.code	00000008 __usb_init_serialnumber_veneer
00000330  w    F .text.itcm	0000006e SDFile::getModifyTime(DateTimeFields&)
200064b0 g     O .bss	00000004 AudioInputUSB::incoming_right
0000322c g     F .text.itcm	000000b8 toUpcase(unsigned short)
00001f98 g     F .text.itcm	00000016 AudioRecordQueue::available()
0000a778 g     F .text.itcm	00000018 usb_serial_available
200064f8 g     O .bss	00000004 AudioOutputUSB::left_2nd
200065bc g     O .bss	00000008 I2S_32::dma
00013670 g     F .text.itcm	00000024 _isatty_r
200065ac g     O .bss	00000008 AsyncAudioInputSPDIF3::dma
2000813e g     O .bss	00000002 AudioInputUSB::incoming_count
6000178c g     F .text.code	00000002 startup_default_late_hook
0000e238 g     F .text.itcm	0000002c _lseek_r
2000640c g     O .bss	00000004 AudioStream::memory_pool
00009308 g     F .text.itcm	00000088 SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)
0000c0e4  w    F .text.itcm	000000f0 yield
0000907c g     F .text.itcm	000000c8 SdioCard::cardCMD6(unsigned long, unsigned char*)
00007a30  w    F .text.itcm	0000000e DedicatedSpiCard::~DedicatedSpiCard()
20007ccc g     O .bss	00000040 proc_stat
20008130 g     O .bss	00000004 usb_timer1_callback
200009c4 g     O .data	0000000c vtable for AudioCompress
00006924 g     F .text.itcm	000001b4 FatFile::write(void const*, unsigned int)
20005240 g     O .bss	000000b4 usb_audio_transmit_buffer
600020a0 g     O .text.progmem	00000018 usb_string_manufacturer_name_default
20007cb0 g     O .bss	0000001c proc
60001888 g     F .text.code	00000384 configure_external_ram
00007a28  w    F .text.itcm	00000004 DedicatedSpiCard::isDedicatedSpi()
000068b0 g     F .text.itcm	00000074 FatFile::truncate()
20005a04 g     O .bss	00000140 Wire1
00007094 g     F .text.itcm	00000168 FatFile::makeSFN(FatLfn_t*)
2000815d g     O .bss	00000001 AudioStream::update_scheduled
20006404 g     O .bss	00000004 FsDateTime::callback
2000676c g     O .bss	00000001 __lock___atexit_recursive_mutex
00011cac g     F .text.itcm	0000004c _wcrtomb_r
20008175 g     O .bss	00000001 usb_audio_transmit_setting
000071fc g     F .text.itcm	000000b4 FatFile::makeUniqueSfn(FatLfn_t*)
00008230 g     F .text.itcm	00000068 SharedSpiCard::writeStart(unsigned long)
000054c0 g     F .text.itcm	00000056 FatFormatter::initPbs()
0000d05c g     F .text.itcm	0000001c Print::println()
000089a8 g     F .text.itcm	00000026 DedicatedSpiCard::begin(SdSpiConfig)
00002350 g     F .text.itcm	000000ac TwoWire::isr()
200009e8 g     O .data	00000074 vtable for DedicatedSpiCard
20008134 g     O .bss	00000002 AudioStream::memory_used
0000de28 g     F .text.itcm	00000020 __sseek
0000dce8 g     F .text.itcm	0000003c __sinit
00003e40 g     F .text.itcm	000000ea ExFatFile::seekSet(unsigned long long)
00013594 g     F .text.itcm	000000b0 __swbuf_r
0000049c  w    F .text.itcm	00000028 File::flush()
000003a0  w    F .text.itcm	0000006e SDFile::getCreateTime(DateTimeFields&)
20008118 g     O .bss	00000004 usb_audio_overrun_count
0000d7cc g     F .text.itcm	0000000c __malloc_unlock
000005a8  w    F .text.itcm	000000b0 SDFile::openNextFile(unsigned char)
200065c4 g     O .bss	00000004 FsVolume::m_cwv
00005f3c g     F .text.itcm	000000f8 FatFile::open(FatFile*, char const*, int)
200058c0 g     O .bss	00000004 SerNum
00007a1c  w    F .text.itcm	00000004 SharedSpiCard::errorData() const
60001e60 g     F .text.code	00000054 analog_init
00001814 g     F .text.itcm	0000005c storeBegin()
0000de50 g     F .text.itcm	0000004a _vdprintf_r
00005cac g     F .text.itcm	00000020 FatFile::getCreateDateTime(unsigned short*, unsigned short*)
00007fdc g     F .text.itcm	00000076 SharedSpiCard::readOCR(unsigned long*)
20001460 g     O .data	00000004 F_CPU_ACTUAL
2000814e g     O .bss	00000002 srcData
20000ae0  w    O .data	0000005c vtable for SDFile
200064a8 g     O .bss	00000004 AudioInputUSB::ready_right
0000df7c g     F .text.itcm	000000f8 memmove
00009b84 g     F .text.itcm	00000098 SdioCard::stopTransmission(bool)
0000e83c g     F .text.itcm	0000004c _Balloc
000136bc g       .ARM.exidx	00000000 __exidx_end
200079ac g     O .bss	00000004 feedback_accumulator
00006ca8 g     F .text.itcm	0000004a FatPartition::freeChain(unsigned long)
20008160 g     O .bss	00000001 EventResponder::runningFromYield
0000cd04 g     F .text.itcm	0000001c AudioOutputUSB::begin()
0000a028 g     F .text.itcm	00000016 SdSpiArduinoDriver::receive()
0000bba8 g     F .text.itcm	00000060 tempmonGetTemp
000059c8 g     F .text.itcm	000000e4 FatFile::getName7(char*, unsigned int)
0000d00c g     F .text.itcm	00000050 Print::write(unsigned char const*, unsigned int)
20001490 g     O .data	00000004 __atexit_recursive_mutex
0000e2e0 g     F .text.itcm	0000000c __errno
00000688  w    F .text.itcm	00000026 SDFile::isDirectory()
00004f10 g     F .text.itcm	00000176 ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
00000870  w    F .text.itcm	00000044 File::write(unsigned char const*, unsigned int)
20003220 g     O .bss	00000020 tx_transfer
60001000 g     O .text.headers	00000020 ImageVectorTable
00002694  w    F .text.itcm	0000002c SPIClass::SPIClass(unsigned int, unsigned int)
000009cc  w    F .text.itcm	000000a8 File::~File()
2000650c g     O .bss	00000004 EventResponder::firstInterrupt
0000b7d0 g     F .text.itcm	00000004 usb_transfer_status
20007c74 g     O .bss	00000014 patchCord2
0000bb20 g     F .text.itcm	00000084 sm_set_pool
000033a0 g     F .text.itcm	0000004c ExFatFormatter::writeUpcaseUnicode(unsigned short)
0000ca44 g     F .text.itcm	0000011c AudioOutputUSB::update()
200068e4 g     O .bss	00000004 __stdio_exit_handler
00007708 g     F .text.itcm	00000084 FsBaseFile::FsBaseFile(FsBaseFile const&)
00004930 g     F .text.itcm	00000018 ExFatPartition::rootLength()
20006594 g     O .bss	00000008 AudioOutputSPDIF3::dma
00000784  w    F .text.itcm	00000054 SDFile::setCreateTime(DateTimeFields const&)
0000c3c0  w    F .text.itcm	00000008 usb_serial_class::write(unsigned char const*, unsigned int)
00013644 g     F .text.itcm	0000002c _fstat_r
20000ebc g     O .data	00000370 digital_pin_to_info_PGM
20007998 g     O .bss	00000004 errno
0000a040 g     F .text.itcm	00000024 SdSpiArduinoDriver::receive(unsigned char*, unsigned int)
00004690 g     F .text.itcm	00000042 ExFatPartition::fatGet(unsigned long, unsigned long*)
60001fdc g     O .text.progmem	00000050 TwoWire::i2c3_hardware
000136b8 g       .text.itcm	00000000 _etext
000025b8 g     F .text.itcm	000000dc _spi_dma_rxISR0()
00007548 g     F .text.itcm	000000b0 FatFile::parsePathName(char const*, FatLfn_t*, char const**)
20001ec0 g       .bss	00000000 _sbss
00005518 g     F .text.itcm	0000005c FatFormatter::writeMbr()
0000a0c8 g     F .text.itcm	00000006 sdCsInit(unsigned char)
00002e6c g     F .text.itcm	00000114 SDClass::mediaPresent()
00008b08 g     F .text.itcm	0000000c SdioCard::errorData() const
200080f0 g     O .bss	00000002 tempData0
00009ea0 g     F .text.itcm	000000f4 SdioCard::writeSector(unsigned long, unsigned char const*)
0000349c g     F .text.itcm	0000052c ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)
0000bc5c g     F .text.itcm	00000024 digitalRead
60002378 g       *ABS*	00000000 _stextload
000018b8 g     F .text.itcm	000001a0 loop
0000c6ec g     F .text.itcm	00000018 AudioStream::receiveReadOnly(unsigned int)
0000bcf0 g     F .text.itcm	0000007a flexpwm_init
0000cfd0 g     F .text.itcm	0000003c usb_audio_set_feature
0000bfe8 g     F .text.itcm	000000a4 usb_midi_flush_output
20008148 g     O .bss	00000002 haveSD
0000b5c4 g     F .text.itcm	00000064 usb_config_rx
00003bd4 g     F .text.itcm	000000a0 ExFatFile::parsePathName(char const*, ExName_t*, char const**)
20007c88 g     O .bss	00000014 patchCord3
000099b4 g     F .text.itcm	000000fc SdioCard::readData(unsigned char*)
20006508 g     O .bss	00000004 EventResponder::lastInterrupt
0000778c g     F .text.itcm	0000002e FsBaseFile::close()
000028fc g     F .text.itcm	00000048 SPIClass::end()
0000a0d4 g     F .text.itcm	00000134 memcpy
00000410  w    F .text.itcm	00000060 File::available()
00007a60 g     F .text.itcm	0000008c SharedSpiCard::writeStop()
20001ec0 g     O .data	00000000 .hidden __TMC_END__
200079c4 g     O .bss	00000080 fileName
00004714 g     F .text.itcm	000000be ExFatPartition::freeChain(unsigned long)
0000627c g     F .text.itcm	00000028 FatFile::peek()
0000efd0 g     F .text.itcm	00001b44 _svfprintf_r
20008164  w    O .bss	00000001 SDFile::name()::zeroterm
200080e8 g     O .bss	00000004 systick_millis_count
00004d38 g     F .text.itcm	000000a2 ExFatFile::rename(ExFatFile*, char const*)
00000258  w    F .text.itcm	0000003c SDFile::truncate(unsigned long long)
200064f4 g     O .bss	00000004 AudioOutputUSB::left_1st
20008177 g     O .bss	00000001 usb_configuration
00007a10  w    F .text.itcm	00000006 SdCardInterface::status()
60000000 g     O .text.headers	00000200 FlexSPI_NOR_Config
0000bad4 g     F .text.itcm	0000004c sm_align_pool
00009c1c g     F .text.itcm	00000030 SdioCard::syncDevice()
00008d34 g     F .text.itcm	000000b4 SdioCard::writeData(unsigned char const*)
00001138 g     F .text.itcm	00000088 makeHeader(char*)
00000824  w    F .text.itcm	0000004c StreamFile<FsBaseFile, unsigned long long>::available()
000062a4 g     F .text.itcm	00000044 FatFile::readDirCache(bool)
000080c8 g     F .text.itcm	00000098 SharedSpiCard::sectorCount()
20006414 g     O .bss	00000070 AudioStream::memory_pool_available_mask
600020a0  w    O .text.progmem	00000018 usb_string_manufacturer_name
0000d240 g     F .text.itcm	00000010 malloc
20001464 g     O .data	00000004 FilePrefix
60001f8c g     O .text.progmem	00000050 TwoWire::i2c1_hardware
00002d88 g     F .text.itcm	000000e2 SDClass::format(int, char, Print&)
20000ab0  w    O .data	00000024 vtable for FsFile
0000ba90  w    F .text.itcm	0000000a _fstat
00002240  w    F .text.itcm	0000001e TwoWire::read()
00010de0 g     F .text.itcm	00000040 __assert_func
00002464  w    F .text.itcm	00000016 EventResponder::triggerEvent(int, void*)
20008140 g     O .bss	00000002 AudioOutputUSB::offset_1st
200003a8 g     O .data	000000c8 __mprec_tens
60001648 g     F .text.code	000000e8 usb_init
2000813c g     O .bss	00000002 AudioStream::memory_pool_first_mask
20205260 g     O .bss.dma	00000004 usb_audio_sync_feedback
00007a18  w    F .text.itcm	00000004 SharedSpiCard::errorCode() const
0000093c  w    F .text.itcm	0000008e SDFile::seek(unsigned long long, int)
200067a8 g     O .bss	00000004 __malloc_top_pad
20005820 g     O .bss	00000050 SPI1
200080ec g     O .bss	00000004 systick_safe_read
aaaaaabf g       *ABS*	00000000 _flexram_bank_config
00005088 g     F .text.itcm	000000e4 ExFatFile::truncate()
20001498 g     O .data	00000000 .hidden __dso_handle
00010d60 g     F .text.itcm	00000008 _localeconv_r
00009fd0 g     F .text.itcm	0000004e SdSpiArduinoDriver::deactivate()
00012ebc g     F .text.itcm	000002f4 __sfvwrite_r
0000e9e0 g     F .text.itcm	0000005c __i2b
20000000 g       .data	00000000 _sdata
00005690 g     F .text.itcm	000001c4 FatFormatter::makeFat32()
60002214 g     O .text.progmem	00000155 usb_config_descriptor_480
0000a020 g     F .text.itcm	00000006 SdSpiArduinoDriver::end()
00005b6c g     F .text.itcm	00000034 FatFile::addCluster()
0000e290 g     F .text.itcm	00000024 _sbrk_r
00008bc8 g     F .text.itcm	0000001c SdioCard::type() const
60001784 g     F .text.code	00000002 startup_default_early_hook
60001428 g     F .text.code	00000220 ResetHandler
0000a800 g     F .text.itcm	00000020 usb_serial_getchar
00000208  w    F .text.itcm	00000050 SDFile::name()
20008120 g     O .bss	00000008 usb_cdc_line_coding
0000bc08 g     F .text.itcm	00000054 digitalWrite
20006510 g     O .bss	00000004 EventResponder::lastYield
00003bac g     F .text.itcm	00000028 ExFatFile::openRoot(ExFatVolume*)
0000e264 g     F .text.itcm	0000002c _read_r
0000bf24 g     F .text.itcm	000000c4 usb_midi_configure
000006c8  w    F .text.itcm	00000038 StreamFile<FsBaseFile, unsigned long long>::read()
00007a2c  w    F .text.itcm	00000002 DedicatedSpiCard::~DedicatedSpiCard()
00003330 g     F .text.itcm	0000002e ExFatFormatter::syncUpcase()
00000294  w    F .text.itcm	00000054 SDFile::setModifyTime(DateTimeFields const&)
00010b14 g     F .text.itcm	000000c6 _fclose_r
00008b14 g     F .text.itcm	00000024 SdioCard::readCID(cid_t*)
2000799c g     O .bss	00000010 extmem_smalloc_pool
200067a0 g     O .bss	00000004 __malloc_max_sbrked_mem
000085a4 g     F .text.itcm	000000b6 DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)
2000815f g     O .bss	00000001 AudioOutputUSB::update_responsibility
00000570  w    F .text.itcm	0000001a SDFile::position()
0000bc80 g     F .text.itcm	00000070 pinMode
200064a4 g     O .bss	00000004 AudioInputUSB::ready_left
200064c4 g     O .bss	00000008 AudioInputTDM2::dma
20005b44 g     O .bss	00000140 Wire2
60017c00 g     O .text.csf	00000c00 hab_csf
00000470  w    F .text.itcm	0000002c File::peek()
00006cf4 g     F .text.itcm	000000a0 FatPartition::freeClusterCount()
20280000 g       .text.csf	00000000 _heap_end
00002a14  w    F .text.itcm	000000c8 SDClass::open(char const*, unsigned char)
000136b4 g       .ARM.exidx	00000000 __exidx_start
70000000 g       .bss.extram	00000000 _extram_end
000001fc  w    F .text.itcm	0000000c DMAChannel::~DMAChannel()
0000ba9c  w    F .text.itcm	00000004 _isatty
20006504 g     O .bss	00000004 EventResponder::firstYield
20001458 g     O .data	00000004 DirPrefix
00000750  w    F .text.itcm	00000034 StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)
0000d7d8 g     F .text.itcm	000003d8 _realloc_r
000006b0  w    F .text.itcm	00000018 SDFile::read(void*, unsigned int)
0000e2ec g     F .text.itcm	00000048 __libc_init_array
000002e8  w    F .text.itcm	00000046 SDFile::rewindDirectory()
00002234  w    F .text.itcm	0000000c TwoWire::available()
000043e8 g     F .text.itcm	0000000e ExFatFile::open(ExFatVolume*, char const*, int)
00002990 g     F .text.itcm	00000084 SDClass::dateTime(unsigned short*, unsigned short*)
00004c88 g     F .text.itcm	000000ae ExFatFile::addDirCluster()
0000cf6c g     F .text.itcm	00000064 usb_audio_get_feature
00013328 g     F .text.itcm	00000066 _fputwc_r
00002694  w    F .text.itcm	0000002c SPIClass::SPIClass(unsigned int, unsigned int)
20000380 g     O .data	00000028 __mprec_bigtens
0000baac  w    F .text.itcm	00000004 abort
0000c3a8  w    F .text.itcm	00000004 usb_serial_class::clear()
0000ba50 g     F .text.itcm	00000034 _sbrk
60015a34 g       *ABS*	00000000 _sdataload
00000084 g     F .text.itcm	000000b4 I2S_32::isr32()
0000ed48 g     F .text.itcm	00000042 __mcmp
20000b60 g     O .data	00000030 vtable for SDClass
200064ec g     O .bss	00000008 AudioOutputTDM::dma
20001494 g     O .data	00000004 __brkval
20008176 g     O .bss	00000001 usb_cdc_line_rtsdtr
60001eb4 g     F .text.code	00000000 _init
0000a564 g     F .text.itcm	00000002 usb_serial_reset
00005c18 g     F .text.itcm	0000001e FatFile::cacheDirEntry(unsigned char)
20000844 g     O .data	00000070 SPIClass::spiclass_lpspi1_hardware
20008173 g     O .bss	00000001 usb_audio_sync_nbytes
60001d98 g     F .text.code	000000c8 AudioStream::initialize_memory(audio_block_struct*, unsigned int)
00002b94  w    F .text.itcm	00000054 SDClass::remove(char const*)
000001d4  w    F .text.itcm	00000028 SDFile::close()
000008b4  w    F .text.itcm	00000040 SDFile::~SDFile()
600020bc g     O .text.progmem	00000155 usb_config_descriptor_12
20000b90 g     O .data	00000024 vtable for TwoWire
00009fa8 g     F .text.itcm	00000028 SdSpiArduinoDriver::begin(SdSpiConfig)
200068e8 g     O .bss	00000018 acq
200081a0 g       .bss	00000000 _ebss
00009390 g     F .text.itcm	00000088 SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)
20007c44 g     O .bss	00000004 hour_
00000700  w    F .text.itcm	00000014 StreamFile<FsBaseFile, unsigned long long>::flush()
0000e940 g     F .text.itcm	00000040 __hi0bits
00003b14 g     F .text.itcm	0000003c ExFatFile::dirCache(unsigned char, unsigned char)
00002408 g     F .text.itcm	0000000c lpi2c3_isr()
00002f80 g     F .text.itcm	000000d8 SDClass::begin(unsigned char)
00004ddc g     F .text.itcm	0000005e ExFatFile::mkdir(ExFatFile*, ExName_t*)
20205400 g       .bss.dma	00000000 _heap_start
20006770 g     O .bss	00000001 __lock___malloc_recursive_mutex
200080f8 g     O .bss	00000020 usb1
0000298c  w    F .text.itcm	00000002 SDClass::~SDClass()
6000202c g     O .text.progmem	00000050 TwoWire::i2c4_hardware
000001fc  w    F .text.itcm	0000000c DMAChannel::~DMAChannel()
200067ac g     O .bss	00000138 __sf
20006984 g     O .bss	00001000 diskBuffer
200064fc g     O .bss	00000004 AudioOutputUSB::right_1st
000084b4  w    F .text.itcm	00000076 SharedSpiCard::readCID(cid_t*)
00007c80 g     F .text.itcm	000000ec SharedSpiCard::cardCommand(unsigned char, unsigned long)
000009cc  w    F .text.itcm	000000a8 File::~File()
00000003 g       *ABS*	00000000 _itcm_block_count
20001f00 g     O .bss	00000020 endpoint0_transfer_data
00005908 g     F .text.itcm	0000002a FatFile::getLfnChar(DirLfn_t*, unsigned char)
000031dc g     F .text.itcm	0000004e FsCache::prepare(unsigned long, unsigned char)
0000d0ac g     F .text.itcm	00000004 operator delete(void*, unsigned int)
0000bd6c g     F .text.itcm	000000f4 pwm_init
0000cb60 g     F .text.itcm	00000150 usb_audio_receive_callback
200079b0 g     O .bss	00000014 file
000022e4  w    F .text.itcm	0000006c TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)
00000c20 g     F .text.itcm	000000d0 I2S_32::begin()
60018800 g       .text.csf	00000000 __text_csf_end
60001c0c g     F .text.code	0000005c usb_pll_start
0000eb98 g     F .text.itcm	000000c0 __pow5mult
000064d4 g     F .text.itcm	00000090 FatFile::rmdir()
200009dc g     O .data	0000000c vtable for AudioRecordQueue
00002414 g     F .text.itcm	0000000c lpi2c4_isr()
00006c28 g     F .text.itcm	00000080 FatPartition::allocateCluster(unsigned long, unsigned long*)
000022e4  w    F .text.itcm	0000006c TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)
000089dc  w    F .text.itcm	00000002 SdioCard::end()
00002c24  w    F .text.itcm	00000036 SDClass::exists(char const*)
200080f4 g     O .bss	00000004 tx_
20006484 g     O .bss	00000004 AudioStream::unused
20001ee0 g     O .bss	00000020 endpoint0_transfer_ack
20008128 g     O .bss	00000004 usb_cdc_line_rtsdtr_millis
0000b78c g     F .text.itcm	00000028 usb_transmit
0000c544 g     F .text.itcm	00000064 software_isr()
0000c2a0 g     F .text.itcm	00000020 systick_isr
00003a2c g     F .text.itcm	00000082 ExFatFile::getName7(char*, unsigned int)
0000e340 g     F .text.itcm	00000002 __retarget_lock_release_recursive
20006410 g     O .bss	00000004 AudioStream::first_update
20001468 g     O .data	00000010 Serial
20008136 g     O .bss	00000002 AudioStream::memory_used_max
0000c8d8 g     F .text.itcm	00000034 AudioConnection::~AudioConnection()
0000c3c8  w    F .text.itcm	00000006 usb_serial_class::write(unsigned char)
0000785c g     F .text.itcm	00000072 FsBaseFile::openNext(FsBaseFile*, int)
60001784  w    F .text.code	00000002 startup_early_hook
20008172 g     O .bss	00000001 usb_audio_receive_setting
00004948 g     F .text.itcm	00000092 ExFatFile::addCluster()
20006408 g     O .bss	00000004 FsDateTime::callback2
20000a84  w    O .data	0000002c vtable for File
00007b6c g     F .text.itcm	0000008c SharedSpiCard::readData(unsigned char*, unsigned int)
00002c5c  w    F .text.itcm	000000f0 SDClass::usedSize()
0000a734 g     F .text.itcm	00000044 usb_serial_peekchar
0000dd24 g     F .text.itcm	0000000c __sfp_lock_acquire
0000e350 g     F .text.itcm	00000000 memchr
00006bc0 g     F .text.itcm	00000068 FatPartition::fatPut(unsigned long, unsigned long)
0000a948 g     F .text.itcm	000002f0 set_arm_clock
200080e4 g     O .bss	00000004 systick_cycle_count
20001a40 g     O .data	00000016 usb_string_serial_number_default
0000e604 g     F .text.itcm	0000020c _free_r
00008298 g     F .text.itcm	00000118 SharedSpiCard::erase(unsigned long, unsigned long)
000086fc g     F .text.itcm	00000066 SharedSpiCard::writeData(unsigned char, unsigned char const*)
00009144 g     F .text.itcm	000000b8 SdioCard::readStop()
00007a20  w    F .text.itcm	00000004 SharedSpiCard::type() const
0000e208 g     F .text.itcm	0000000c __locale_mb_cur_max
00011cf8 g     F .text.itcm	00000016 _wcsrtombs_r
200065dc g     O .bss	00000190 __atexit0
0000c3b8  w    F .text.itcm	00000004 usb_serial_class::flush()
000083b0 g     F .text.itcm	00000080 SharedSpiCard::readSCR(scr_t*)
000033ec g     F .text.itcm	000000b0 ExFatFormatter::writeUpcase(unsigned long)
20001a10 g     O .data	00000004 __malloc_sbrk_base
0000c3b0  w    F .text.itcm	00000004 usb_serial_class::read()
2000657c g     O .bss	00000008 AudioOutputI2SOct::dma
20008142 g     O .bss	00000002 I2S_32::block_offset
000075f8 g     F .text.itcm	00000110 FatFile::remove()
0000baa0  w    F .text.itcm	00000006 _lseek
0000baa8  w    F .text.itcm	00000004 __cxa_pure_virtual
0000ec58 g     F .text.itcm	000000f0 __lshift
00005e58 g     F .text.itcm	000000e2 FatFile::mkdir(FatFile*, char const*, bool)
0000b75c g     F .text.itcm	00000030 usb_prepare_transfer
00007a24  w    F .text.itcm	00000004 DedicatedSpiCard::hasDedicatedSpi()
0000b8d0 g     F .text.itcm	00000180 unused_interrupt_vector
200064ac g     O .bss	00000004 AudioInputUSB::incoming_left
00011d38 g     F .text.itcm	00000100 __ssprint_r
60001c68 g     F .text.code	00000130 tempmon_init
2000812c g     O .bss	00000004 usb_timer0_callback
00006f78 g     F .text.itcm	0000011c FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)
0000deb8 g     F .text.itcm	00000062 _vasnprintf_r
0000d0a4  w    F .text.itcm	00000002 serialEvent()
200064dc g     O .bss	00000010 AudioOutputPWM::dma
0000e4dc g     F .text.itcm	00000088 __register_exitproc
000042f4 g     F .text.itcm	000000f4 ExFatFile::open(ExFatFile*, char const*, int)
0000c704 g     F .text.itcm	00000046 AudioStream::receiveWritable(unsigned int)
0000e118 g     F .text.itcm	0000008a strncmp
00006eb4 g     F .text.itcm	000000c4 FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)
000078d0 g     F .text.itcm	00000114 FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)
00004e3c g     F .text.itcm	000000d2 ExFatFile::mkdir(ExFatFile*, char const*, bool)
00005574 g     F .text.itcm	0000011c FatFormatter::makeFat16()
0000c81c g     F .text.itcm	00000028 AudioConnection::AudioConnection(AudioStream&, unsigned char, AudioStream&, unsigned char)
0000a790 g     F .text.itcm	00000070 usb_serial_flush_input
000047d4 g     F .text.itcm	00000070 ExFatPartition::freeClusterCount()
20000ad4 g     O .data	0000000c vtable for I2S_32
0000ea3c g     F .text.itcm	0000015c __multiply
0000a820 g     F .text.itcm	0000002c usb_serial_putchar
00000025 g       *ABS*	00000000 _teensy_model_identifier
00007d6c g     F .text.itcm	000001f8 SharedSpiCard::begin(SdSpiConfig)
20006534 g     O .bss	00000008 AudioOutputI2S2::dma
0000e1a4 g     F .text.itcm	00000064 strncpy
20006778 g     O .bss	00000028 __malloc_current_mallinfo
200064b4 g     O .bss	00000008 AudioInputI2S2::dma
20000924 g     O .data	00000070 SPIClass::spiclass_lpspi4_hardware
0000eee0 g     F .text.itcm	000000d4 __d2b
00008764 g     F .text.itcm	00000068 SharedSpiCard::writeData(unsigned char const*)
20006514 g     O .bss	00000020 HardwareSerial::s_serials_with_serial_events
000089d4  w    F .text.itcm	00000004 SdCardInterface::isDedicatedSpi()
60001730 g     F .text.code	00000054 _reboot_Teensyduino_
0000d16c g     F .text.itcm	000000c8 IntervalTimer::beginCycles(void (*)(), unsigned long)
00008bb8  w    F .text.itcm	0000000e SdioCard::~SdioCard()
0000c81c g     F .text.itcm	00000028 AudioConnection::AudioConnection(AudioStream&, unsigned char, AudioStream&, unsigned char)
00000b24 g     F .text.itcm	000000fc I2S_32::config_i2s()
60001788 g     F .text.code	00000002 startup_default_middle_hook
000088d0 g     F .text.itcm	000000d8 DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)
00008054 g     F .text.itcm	00000074 SharedSpiCard::readRegister(unsigned char, void*)
00000cf0 g     F .text.itcm	000002fc AudioCompress::compress(void*)
00008fa8 g     F .text.itcm	000000d4 SdioCard::writeStart(unsigned long)
0000ae84 g     F .text.itcm	00000740 usb_isr
0000dbb0 g     F .text.itcm	0000000c __cxa_atexit
00003c74 g     F .text.itcm	0000019e ExFatFile::read(void*, unsigned int)
0000c90c g     F .text.itcm	00000044 AudioStream::update_setup()
0000e214 g     F .text.itcm	00000024 _close_r
00007bf8 g     F .text.itcm	0000006e SharedSpiCard::readStop()
00000670  w    F .text.itcm	00000018 SDFile::peek()
00003184 g     F .text.itcm	00000056 FsCache::sync()
200065a4 g     O .bss	00000008 AudioOutputPT8211_2::dma
200057d0 g     O .bss	00000050 SPI
0000df1c g     F .text.itcm	00000060 memcmp
200065b8 g     O .bss	00000004 I2S_32::block_right
20000a5c  w    O .data	00000028 vtable for usb_serial_class
0000a064 g     F .text.itcm	00000012 SdSpiArduinoDriver::send(unsigned char)
0000e338 g     F .text.itcm	00000002 __retarget_lock_close_recursive
0000a0d0 g     F .text.itcm	00000004 sdCsWrite(unsigned char, bool)
200080e0 g     O .bss	00000004 scale_cpu_cycles_to_microseconds
20005870 g     O .bss	00000050 SPI2
000131b0 g     F .text.itcm	000000cc __swsetup_r
00004a90 g     F .text.itcm	0000005e ExFatFile::rmdir()
2000654c g     O .bss	00000008 AudioInputI2SHex::dma
00008160 g     F .text.itcm	00000068 SharedSpiCard::readStart(unsigned long)
20001608 g     O .data	00000408 __malloc_av_
200065d8 g     O .bss	00000004 __atexit
00000714  w    F .text.itcm	00000014 SDFile::flush()
0000ddc4 g     F .text.itcm	00000022 __sread
200030e0 g     O .bss	00000020 rx_transfer
0000a8b4 g     F .text.itcm	00000094 usb_serial_flush_output
2000648c g     O .bss	00000008 AudioInputI2S::dma
0000d7c0 g     F .text.itcm	0000000c __malloc_lock
000032f8 g     F .text.itcm	00000018 FsDateTime::setCallback(void (*)(unsigned short*, unsigned short*))
200009d0 g     O .data	0000000c vtable for AudioOutputUSB
20001c00 g     O .data	000002c0 _VectorsRam
20007d0c g     O .bss	00000368 queue1
0000a078 g     F .text.itcm	0000004e SdSpiArduinoDriver::send(unsigned char const*, unsigned int)
000053ec g     F .text.itcm	000000d4 FatFormatter::initFatDir(unsigned char, unsigned long)
00010d0c g     F .text.itcm	00000054 _fflush_r
00001f58 g     F .text.itcm	0000003e AudioRecordQueue::update()
00010e20 g     F .text.itcm	00000078 _calloc_r
000026c0 g     F .text.itcm	00000234 SPIClass::begin()
000072b0 g     F .text.itcm	00000298 FatFile::open(FatFile*, FatLfn_t*, int)
20001a57 g     O .data	00000001 yield_active_check_flags
00004c28 g     F .text.itcm	0000005e ExFatFile::sync()
0000e33c g     F .text.itcm	00000002 __retarget_lock_acquire_recursive
20008178 g     O .bss	00000001 usb_high_speed
000062e8 g     F .text.itcm	000001ea FatFile::rename(FatFile*, char const*)
00008ee0 g     F .text.itcm	0000007c SdioCard::isBusy()
2000656c g     O .bss	00000008 AudioInputI2SQuad::dma
0000e074 g     F .text.itcm	000000a4 memset
0000c528 g     F .text.itcm	00000010 main
200064cc g     O .bss	00000008 AudioOutputI2S::dma
200067a4 g     O .bss	00000004 __malloc_max_total_mem
0000441c g     F .text.itcm	000000c0 ExFatPartition::bitmapFind(unsigned long, unsigned long)
0000e334 g     F .text.itcm	00000002 __retarget_lock_init_recursive
20205100 g     O .bss.dma	00000155 usb_descriptor_buffer
000087cc g     F .text.itcm	000000e8 SharedSpiCard::writeSector(unsigned long, unsigned char const*)
200065b4 g     O .bss	00000004 I2S_32::block_left
0000516c g     F .text.itcm	00000280 ExFatFile::write(void const*, unsigned int)
000030e4 g     F .text.itcm	000000a0 lbaToMbrChs(unsigned char*, unsigned long, unsigned long)
00005c58 g     F .text.itcm	00000052 FatFile::dirEntry(DirFat_t*)
000007d8  w    F .text.itcm	0000004c SDFile::available()
0000de48 g     F .text.itcm	00000008 __sclose
0000c08c g     F .text.itcm	00000058 usb_init_serialnumber
60001f8c g       .text.code	00000000 __init_array_end
00010fc0 g     F .text.itcm	00000cec _dtoa_r
0000d260 g     F .text.itcm	00000560 _malloc_r
000081c8 g     F .text.itcm	00000068 DedicatedSpiCard::readSector(unsigned long, unsigned char*)
20008161 g     O .bss	00000001 HardwareSerial::s_count_serials_with_serial_events
0000efb4 g     F .text.itcm	0000001a __ascii_wctomb
20008174 g     O .bss	00000001 usb_audio_sync_rshift
00000070  w    F .text.itcm	00000012 SDFile::isOpen()
00007708 g     F .text.itcm	00000084 FsBaseFile::FsBaseFile(FsBaseFile const&)
200065c8 g     O .bss	00000004 FatVolume::m_cwv
20006554 g     O .bss	00000008 AudioInputI2SOct::dma
20000c28  w    O .data	00000010 SPIClass::beginTransaction(SPISettings)::clk_sel
0000c1d4 g     F .text.itcm	00000084 EventResponder::triggerEventNotImmediate()
000028f4 g     F .text.itcm	00000008 SPIClass::transfer(void const*, void*, unsigned int)
20006900 g     O .bss	00000004 acqData
0000b87c g     F .text.itcm	00000054 micros
00004af0 g     F .text.itcm	00000138 ExFatFile::syncDir()
00008430 g     F .text.itcm	00000082 SharedSpiCard::readSDS(sds_t*)
0000e564 g     F .text.itcm	000000a0 _malloc_trim_r
00013390 g     F .text.itcm	00000106 _wcsnrtombs_l
600020b8 g     O .text.progmem	00000004 string0
0000a84c g     F .text.itcm	00000018 usb_serial_write
6000178c  w    F .text.code	00000002 startup_late_hook
000088b4 g     F .text.itcm	0000001c DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)
0000c3b4  w    F .text.itcm	00000004 usb_serial_class::available()
60002376 g     O .text.progmem	00000001 _serialEvent_default
000067cc g     F .text.itcm	0000000c FatFile::sync()
00005854 g     F .text.itcm	000000b4 FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)
00002be8  w    F .text.itcm	0000003a SDClass::mkdir(char const*)
20000000 g     O .data	00000380 endpoint_queue_head
20006904 g     O .bss	00000080 dirName
6000207c  w    O .text.progmem	00000024 usb_string_product_name
0000b7d4 g     F .text.itcm	000000a8 delay
20008146 g     O .bss	00000002 dma_channel_allocated_mask
00003b88 g     F .text.itcm	00000022 ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)
000136b0 g     F .fini	00000000 _fini
0000227c g     F .text.itcm	0000002a TwoWire::write(unsigned char)
00007aec g     F .text.itcm	0000007e SharedSpiCard::isBusy()
20006584 g     O .bss	00000008 AudioOutputPT8211::dma
60001020 g     O .text.headers	0000000c BootData
200064d4 g     O .bss	00000008 AudioOutputMQS::dma
2000811c g     O .bss	00000004 usb_audio_underrun_count
000043f8 g     F .text.itcm	00000024 ExFatFile::openNext(ExFatFile*, int)
0000d088 g     F .text.itcm	0000001c Print::printf(char const*, ...)
0000dd84 g     F .text.itcm	00000040 sprintf
00001fb0 g     F .text.itcm	00000048 AudioRecordQueue::clear()
00005c38 g     F .text.itcm	0000001e FatFile::close()
0000bba4 g     F .text.itcm	00000004 Panic_Temp_isr
000008f4  w    F .text.itcm	00000048 SDFile::~SDFile()
00005cec g     F .text.itcm	0000016a FatFile::mkdir(FatFile*, FatLfn_t*)
00013498 g     F .text.itcm	00000024 _wcsnrtombs_r
00008bb4  w    F .text.itcm	00000002 SdioCard::~SdioCard()
00000658  w    F .text.itcm	00000018 StreamFile<FsBaseFile, unsigned long long>::peek()
0000051c  w    F .text.itcm	00000054 File::write(unsigned char)
0000e2b4 g     F .text.itcm	0000002c _write_r
0000ce84 g     F .text.itcm	000000e8 usb_audio_configure
00000138 g     F .text.itcm	0000009c I2S_32::update()
20005300 g     O .bss	000004d0 SD
00009c4c g     F .text.itcm	00000144 SdioCard::erase(unsigned long, unsigned long)
20008162 g     O .bss	00000001 I2S_32::update_responsibility
0000c654 g     F .text.itcm	00000050 AudioStream::release(audio_block_struct*)
20003100 g     O .bss	00000020 sync_transfer
20001a24 g     O .data	00000004 _impure_ptr
20000b3c  w    O .data	00000024 vtable for Stream
00003e14 g     F .text.itcm	0000002c ExFatFile::peek()
00010bdc g     F .text.itcm	00000130 __sflush_r
20000994  w    O .data	00000024 vtable for StreamFile<FsBaseFile, unsigned long long>
20006564 g     O .bss	00000008 AudioOutputSPDIF::dma
200058c4 g     O .bss	00000140 Wire
0000073c  w    F .text.itcm	00000014 SDFile::write(void const*, unsigned int)
0000c6a4 g     F .text.itcm	00000046 AudioStream::transmit(audio_block_struct*, unsigned char)
000079e4 g     F .text.itcm	00000028 FsVolume::open(char const*, int)
0000dd3c g     F .text.itcm	00000046 _fwalk_sglue
00008afc g     F .text.itcm	0000000c SdioCard::errorCode() const
00006034 g     F .text.itcm	0000000e FatFile::open(FatVolume*, char const*, int)
00000728  w    F .text.itcm	00000014 StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)
60001f10 g       .text.code	00000000 __preinit_array_end
2000649c g     O .bss	00000008 AudioInputTDM::dma
000010a8 g     F .text.itcm	00000090 newFileName(char*)
2000653c g     O .bss	00000008 AudioOutputTDM2::dma
000045d4 g     F .text.itcm	00000036 ExFatPartition::dirCache(DirPos_t*, unsigned char)
0000e810 g     F .text.itcm	0000002a __ascii_mbtowc
0000c5a8 g     F .text.itcm	000000ac AudioStream::allocate()
20007a44 g     O .bss	00000200 header
00006d94 g     F .text.itcm	00000120 FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)
0000ae58 g     F .text.itcm	0000002c usb_stop_sof_interrupts
00002260  w    F .text.itcm	00000018 TwoWire::peek()
00002278  w    F .text.itcm	00000002 TwoWire::flush()
00001870 g     F .text.itcm	00000048 setup
200012a8 g     O .data	0000006c usb_descriptor_list
00008f5c g     F .text.itcm	00000020 SdioCard::status()
00005ccc g     F .text.itcm	00000020 FatFile::getModifyDateTime(unsigned short*, unsigned short*)
0000b68c g     F .text.itcm	00000064 usb_config_rx_iso
0000006c  w    F .text.itcm	00000002 Print::flush()
00001ff8 g     F .text.itcm	0000003a AudioRecordQueue::readBuffer()
20007c60 g     O .bss	00000014 patchCord1
20007c9c g     O .bss	00000014 patchCord4
00002adc  w    F .text.itcm	00000052 SDClass::rmdir(char const*)
000060d4 g     F .text.itcm	000001a8 FatFile::read(void*, unsigned int)
0000609c g     F .text.itcm	00000036 FatFile::openRoot(FatVolume*)
20006488 g     O .bss	00000004 ExFatVolume::m_cwv
20068000 g       .text.csf	00000000 _estack
00007a0c g     F .text.itcm	00000004 operator new(unsigned int, unsigned long*)
0000c374 g     F .text.itcm	00000034 DMAChannel::release()
000004c4  w    F .text.itcm	00000058 File::read()
00002034 g     F .text.itcm	00000016 AudioRecordQueue::freeBuffer()
0000a864 g     F .text.itcm	00000050 usb_serial_write_buffer_free
0000c74c g     F .text.itcm	000000d0 AudioConnection::connect()
20001a18 g     O .data	0000000c __sglue
20006494 g     O .bss	00000008 AudioInputPDM::dma
0000a568 g     F .text.itcm	000000ec usb_serial_configure
000022a8 g     F .text.itcm	0000003c TwoWire::write(unsigned char const*, unsigned int)
2000815e g     O .bss	00000001 AudioInputUSB::receive_flag
00000a74  w    F .text.itcm	000000b0 File::~File()
0000d078  w    F .text.itcm	0000000e _write
200064bc g     O .bss	00000008 AudioInputPDM2::dma
20001ec0 g       .data	00000000 _edata
000046d4 g     F .text.itcm	00000040 ExFatPartition::fatPut(unsigned long, unsigned long)
20008166 g     O .bss	00000001 external_psram_size
00008bb4  w    F .text.itcm	00000002 SdioCard::~SdioCard()
00004844 g     F .text.itcm	000000ec ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)
00007a2c  w    F .text.itcm	00000002 DedicatedSpiCard::~DedicatedSpiCard()
0000865c g     F .text.itcm	000000a0 DedicatedSpiCard::setDedicatedSpi(bool)
00003ab0 g     F .text.itcm	00000064 ExFatFile::hashName(ExName_t*)
20001478 g     O .data	0000000c AudioInputUSB::features
00005ba0 g     F .text.itcm	00000078 FatFile::addDirCluster()
0001327c g     F .text.itcm	000000aa __fputwc
0000c3bc  w    F .text.itcm	00000004 usb_serial_class::availableForWrite()
20001488 g     O .data	00000004 I2S_32::shift
000023fc g     F .text.itcm	0000000c lpi2c1_isr()
0000d0b0 g     F .text.itcm	00000062 ultoa
0000298c  w    F .text.itcm	00000002 SDClass::~SDClass()
000077bc g     F .text.itcm	000000a0 FsBaseFile::open(FsVolume*, char const*, int)
0000dde8 g     F .text.itcm	0000003e __swrite
0000d0a8 g     F .text.itcm	00000004 operator new(unsigned int)
0000c258 g     F .text.itcm	00000044 EventResponder::runFromInterrupt()
20001a14 g     O .data	00000004 __malloc_trim_threshold
0000c844 g     F .text.itcm	00000094 AudioConnection::disconnect()
0000c3ac  w    F .text.itcm	00000004 usb_serial_class::peek()
000089d8  w    F .text.itcm	00000004 SdCardInterface::setDedicatedSpi(bool)
00007f64 g     F .text.itcm	00000078 SharedSpiCard::cardCMD6(unsigned long, unsigned char*)
00011d10 g     F .text.itcm	00000028 fiprintf
0000cd20 g     F .text.itcm	00000104 usb_audio_transmit_callback
00011eb0 g     F .text.itcm	00000f8c _vfiprintf_r
00001d70  w    F .text.itcm	00000110 SPIClass::beginTransaction(SPISettings)
0000ed8c g     F .text.itcm	00000154 __mdiff
00008b5c g     F .text.itcm	00000010 SdioCard::readOCR(unsigned long*)
200008b4 g     O .data	00000070 SPIClass::spiclass_lpspi3_hardware
0000460c g     F .text.itcm	00000082 ExFatPartition::dirSeek(DirPos_t*, unsigned long)
000024dc g     F .text.itcm	000000dc _spi_dma_rxISR1()
20006574 g     O .bss	00000008 AudioOutputI2SHex::dma
20001338 g     O .data	00000120 _impure_data
00003f2c g     F .text.itcm	000003c6 ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)
20008138 g     O .bss	00000002 AudioStream::cpu_cycles_total
0000dd30 g     F .text.itcm	0000000c __sfp_lock_release
00009144 g     F .text.itcm	000000b8 SdioCard::writeStop()
00003b50 g     F .text.itcm	00000014 ExFatFile::close()
20000ce8 g     O .data	00000101 _ctype_
0000ba84  w    F .text.itcm	00000004 _read
60001f10 g       .text.code	00000000 __init_array_start
2000145c g     O .data	00000004 F_BUS_ACTUAL
20007984 g     O .bss	00000004 disk_count
00003360 g     F .text.itcm	00000040 ExFatFormatter::writeUpcaseByte(unsigned char)
00002b30  w    F .text.itcm	00000064 SDClass::rename(char const*, char const*)
00008b6c g     F .text.itcm	00000014 SdioCard::readSCR(scr_t*)
0000c538  w    F .text.itcm	0000000c AudioStream::update_all()
000134bc g     F .text.itcm	000000d8 __smakebuf_r
00000000 g       .text.itcm	00000000 _stext
0000c2c0 g     F .text.itcm	000000b4 DMAChannel::begin(bool)
20001484 g     O .data	00000004 IntervalTimer::nvic_priorites
00007a40 g     F .text.itcm	0000001e SharedSpiCard::end()
0000e400 g     F .text.itcm	000000dc strlen
00006044 g     F .text.itcm	00000056 FatFile::openCluster(FatFile*)
00006564 g     F .text.itcm	000000ae FatFile::seekSet(unsigned long)
6000207c g     O .text.progmem	00000024 usb_string_product_name_default
2000659c g     O .bss	00000008 AudioOutputI2SQuad::dma
0000de9c g     F .text.itcm	0000001c vdprintf
00008be4 g     F .text.itcm	00000060 SdioCard::sectorCount()
00008b80 g     F .text.itcm	00000034 SdioCard::readSDS(sds_t*)
00006700 g     F .text.itcm	000000ca FatFile::openNext(FatFile*, int)
20006500 g     O .bss	00000004 AudioOutputUSB::right_2nd
60001788  w    F .text.code	00000002 startup_middle_hook
20000bb4 g     O .data	00000074 vtable for SdioCard
00005aac g     F .text.itcm	00000004 FatFile::getName(char*, unsigned int)
60001790 g     F .text.code	000000f8 configure_cache
000089d0  w    F .text.itcm	00000004 SdCardInterface::hasDedicatedSpi()
0000c3d0 g     F .text.itcm	00000158 breakTime(unsigned long, DateTimeFields&)
0000852c  w    F .text.itcm	00000076 SharedSpiCard::readCSD(csd_t*)
2000658c g     O .bss	00000008 AudioOutputSPDIF2::dma
00001010 g     F .text.itcm	00000098 newDirectory(char*)
00009ab0 g     F .text.itcm	000000d4 SdioCard::readStart(unsigned long)
0000b6f0 g     F .text.itcm	0000006c usb_config_tx_iso
20006544 g     O .bss	00000008 AudioInputAnalog::dma
2000813a g     O .bss	00000002 AudioStream::cpu_cycles_total_max
00009f94 g     F .text.itcm	00000012 SdSpiArduinoDriver::activate()
60001f10 g       .text.code	00000000 __preinit_array_start
0000b7b4 g     F .text.itcm	0000001c usb_receive
200009b8  w    O .data	0000000c vtable for AudioStream
000044dc g     F .text.itcm	000000aa ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)
0000e980 g     F .text.itcm	00000060 __lo0bits
00004588 g     F .text.itcm	0000004c ExFatPartition::chainSize(unsigned long)
20001a3c g     O .data	00000004 tempDatai
00006614 g     F .text.itcm	000000ea FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)
00018800 g       *ABS*	00000000 _flashimagelen
000067d8 g     F .text.itcm	000000d8 FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
00007c68 g     F .text.itcm	00000018 SharedSpiCard::syncDevice()
0000d234 g     F .text.itcm	0000000a __aeabi_atexit
0000bab0 g     F .text.itcm	00000024 rtc_get
000049dc g     F .text.itcm	000000b4 ExFatFile::remove()
00010d68 g     F .text.itcm	00000078 frexp
70000000 g       .bss.extram	00000000 _extram_start
0000c29c g     F .text.itcm	00000004 pendablesrvreq_isr
00002d4c  w    F .text.itcm	0000003c SDClass::totalSize()
2000655c g     O .bss	00000008 AudioInputSPDIF3::dma
0000c8d8 g     F .text.itcm	00000034 AudioConnection::~AudioConnection()
00000068  w    F .text.itcm	00000004 Print::availableForWrite()
2000149c g     O .data	0000016c __global_locale
00009418 g     F .text.itcm	0000059c SdioCard::begin(SdioConfig)
00000fec g     F .text.itcm	00000022 AudioCompress::update()
000020c4 g     F .text.itcm	00000170 breakTime(long long, tmElements_t&)
00003b64 g     F .text.itcm	00000022 ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)
0000a654 g     F .text.itcm	000000e0 usb_serial_read
20006774 g     O .bss	00000001 __lock___sfp_recursive_mutex
0000b628 g     F .text.itcm	00000064 usb_config_tx
0000ba88  w    F .text.itcm	00000006 _close
00006b9c g     F .text.itcm	00000024 FatPartition::fatGet(unsigned long, unsigned long*)
0000d250 g     F .text.itcm	00000010 free
000039c8 g     F .text.itcm	00000064 ExFatFile::cmpName(DirName_t const*, ExName_t*)
0000e89c g     F .text.itcm	000000a4 __multadd
0000e888 g     F .text.itcm	00000012 _Bfree
0000058c  w    F .text.itcm	0000001a SDFile::size()
00005934 g     F .text.itcm	00000094 FatFile::getSFN(char*, unsigned int)
000008b4  w    F .text.itcm	00000040 SDFile::~SDFile()
20001a40  w    O .data	00000016 usb_string_serial_number
00009d90 g     F .text.itcm	00000110 SdioCard::readSector(unsigned long, unsigned char*)
00008b38 g     F .text.itcm	00000024 SdioCard::readCSD(csd_t*)



Disassembly of section .text.code:

60001400 <memory_copy>:
}

__attribute__((section(".startup"), optimize("O1")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001400:	cmp	r0, r1
60001402:	beq.n	60001414 <memory_copy+0x14>
	while (dest < dest_end) {
60001404:	cmp	r0, r2
60001406:	bcs.n	60001414 <memory_copy+0x14>
		*dest++ = *src++;
60001408:	ldr.w	r3, [r1], #4
6000140c:	str.w	r3, [r0], #4
	while (dest < dest_end) {
60001410:	cmp	r2, r0
60001412:	bhi.n	60001408 <memory_copy+0x8>
	}
}
60001414:	bx	lr
60001416:	nop

60001418 <memory_clear>:

__attribute__((section(".startup"), optimize("O1")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
60001418:	cmp	r0, r1
6000141a:	bcs.n	60001426 <memory_clear+0xe>
		*dest++ = 0;
6000141c:	movs	r3, #0
6000141e:	str.w	r3, [r0], #4
	while (dest < dest_end) {
60001422:	cmp	r1, r0
60001424:	bhi.n	6000141e <memory_clear+0x6>
	}
}
60001426:	bx	lr

60001428 <ResetHandler>:
{
60001428:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000142c:	ldr	r2, [pc, #416]	; (600015d0 <ResetHandler+0x1a8>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000142e:	mov.w	r1, #11141120	; 0xaa0000
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001432:	ldr	r3, [pc, #416]	; (600015d4 <ResetHandler+0x1ac>)
	IOMUXC_GPR_GPR16 = 0x00200007;
60001434:	ldr	r0, [pc, #416]	; (600015d8 <ResetHandler+0x1b0>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001436:	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001438:	str	r0, [r3, #64]	; 0x40
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
6000143a:	ldr	r2, [pc, #416]	; (600015dc <ResetHandler+0x1b4>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000143c:	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
6000143e:	mov	sp, r2
	__asm__ volatile("dsb":::"memory");
60001440:	dsb	sy
	__asm__ volatile("isb":::"memory");
60001444:	isb	sy
	startup_early_hook(); // must be in FLASHMEM, as ITCM is not yet initialized!
60001448:	bl	60001784 <startup_default_early_hook>
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
6000144c:	movs	r4, #8
6000144e:	ldr	r3, [pc, #400]	; (600015e0 <ResetHandler+0x1b8>)
	memory_copy(&_stext, &_stextload, &_etext);
60001450:	ldr	r2, [pc, #400]	; (600015e4 <ResetHandler+0x1bc>)
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001452:	str.w	r4, [r3, #340]	; 0x154
	memory_copy(&_stext, &_stextload, &_etext);
60001456:	ldr	r1, [pc, #400]	; (600015e8 <ResetHandler+0x1c0>)
60001458:	ldr	r0, [pc, #400]	; (600015ec <ResetHandler+0x1c4>)
6000145a:	bl	60001400 <memory_copy>
	memory_copy(&_sdata, &_sdataload, &_edata);
6000145e:	ldr	r2, [pc, #400]	; (600015f0 <ResetHandler+0x1c8>)
60001460:	ldr	r1, [pc, #400]	; (600015f4 <ResetHandler+0x1cc>)
60001462:	ldr	r0, [pc, #404]	; (600015f8 <ResetHandler+0x1d0>)
60001464:	bl	60001400 <memory_copy>
	memory_clear(&_sbss, &_ebss);
60001468:	ldr	r1, [pc, #400]	; (600015fc <ResetHandler+0x1d4>)
6000146a:	ldr	r0, [pc, #404]	; (60001600 <ResetHandler+0x1d8>)
6000146c:	bl	60001418 <memory_clear>
	SCB_CPACR = 0x00F00000;
60001470:	ldr	r4, [pc, #400]	; (60001604 <ResetHandler+0x1dc>)
60001472:	mov.w	r1, #3758153728	; 0xe000e000
60001476:	mov.w	r0, #15728640	; 0xf00000
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
6000147a:	movs	r3, #0
6000147c:	ldr	r2, [pc, #392]	; (60001608 <ResetHandler+0x1e0>)
	SCB_CPACR = 0x00F00000;
6000147e:	str.w	r0, [r1, #3464]	; 0xd88
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
60001482:	str.w	r2, [r4, r3, lsl #2]
60001486:	adds	r3, #1
60001488:	cmp	r3, #176	; 0xb0
6000148a:	bne.n	60001482 <ResetHandler+0x5a>
6000148c:	ldr	r3, [pc, #380]	; (6000160c <ResetHandler+0x1e4>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
6000148e:	movs	r1, #128	; 0x80
60001490:	ldr	r2, [pc, #380]	; (60001610 <ResetHandler+0x1e8>)
60001492:	strb.w	r1, [r3], #1
60001496:	cmp	r3, r2
60001498:	bne.n	60001492 <ResetHandler+0x6a>
	SCB_VTOR = (uint32_t)_VectorsRam;
6000149a:	mov.w	r5, #3758153728	; 0xe000e000
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
6000149e:	ldr	r6, [pc, #320]	; (600015e0 <ResetHandler+0x1b8>)
600014a0:	mov.w	r9, #2155905152	; 0x80808080
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014a4:	ldr.w	fp, [pc, #404]	; 6000163c <ResetHandler+0x214>
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014a8:	ldr.w	sl, [pc, #404]	; 60001640 <ResetHandler+0x218>
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014ac:	mov.w	r1, #4294967295
	SCB_VTOR = (uint32_t)_VectorsRam;
600014b0:	str.w	r4, [r5, #3336]	; 0xd08
	SYST_CVR = 0;
600014b4:	movs	r7, #0
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014b6:	str.w	r9, [r6, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014ba:	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
600014be:	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014c2:	str.w	sl, [r6, #240]	; 0xf0
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014c6:	ldr.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014ca:	ldr.w	r8, [pc, #376]	; 60001644 <ResetHandler+0x21c>
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014ce:	orr.w	r3, r3, #458752	; 0x70000
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014d2:	ldr	r2, [pc, #256]	; (600015d4 <ResetHandler+0x1ac>)
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014d4:	str.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014d8:	ldr.w	r3, [r8, #28]
600014dc:	bic.w	r3, r3, #127	; 0x7f
600014e0:	orr.w	r3, r3, #64	; 0x40
600014e4:	str.w	r3, [r8, #28]
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
600014e8:	ldr.w	r3, [r8, #36]	; 0x24
600014ec:	bic.w	r3, r3, #127	; 0x7f
600014f0:	orr.w	r3, r3, #64	; 0x40
600014f4:	str.w	r3, [r8, #36]	; 0x24
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014f8:	str	r1, [r2, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
600014fa:	str	r1, [r2, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
600014fc:	str	r1, [r2, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
600014fe:	str	r1, [r2, #116]	; 0x74
	configure_cache();
60001500:	bl	60001790 <configure_cache>
	_VectorsRam[14] = pendablesrvreq_isr;
60001504:	ldr	r3, [pc, #268]	; (60001614 <ResetHandler+0x1ec>)
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001506:	ldr	r1, [pc, #272]	; (60001618 <ResetHandler+0x1f0>)
	_VectorsRam[14] = pendablesrvreq_isr;
60001508:	str	r3, [r4, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
6000150a:	ldr	r3, [pc, #272]	; (6000161c <ResetHandler+0x1f4>)
6000150c:	str	r3, [r4, #60]	; 0x3c
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
6000150e:	movs	r3, #99	; 0x63
60001510:	str	r3, [r5, #20]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001512:	movs	r3, #3
	SYST_CVR = 0;
60001514:	str	r7, [r5, #24]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001516:	str	r3, [r5, #16]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
60001518:	ldr	r3, [pc, #260]	; (60001620 <ResetHandler+0x1f8>)
6000151a:	str.w	r3, [r5, #3360]	; 0xd20
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
6000151e:	ldr.w	r3, [r5, #3580]	; 0xdfc
60001522:	orr.w	r3, r3, #16777216	; 0x1000000
60001526:	str.w	r3, [r5, #3580]	; 0xdfc
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000152a:	ldr	r3, [pc, #248]	; (60001624 <ResetHandler+0x1fc>)
6000152c:	ldr	r2, [r3, #0]
6000152e:	orr.w	r2, r2, #1
60001532:	str	r2, [r3, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001534:	ldr	r3, [r3, #4]
60001536:	str	r3, [r1, #0]
	usb_pll_start();	
60001538:	bl	60001c0c <usb_pll_start>
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
6000153c:	str.w	r9, [r6, #260]	; 0x104
	set_arm_clock(F_CPU);
60001540:	ldr	r0, [pc, #228]	; (60001628 <ResetHandler+0x200>)
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001542:	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
60001546:	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000154a:	str.w	sl, [r6, #240]	; 0xf0
	set_arm_clock(F_CPU);
6000154e:	bl	60001ee8 <__set_arm_clock_veneer>
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001552:	ldr.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
60001556:	ldr	r3, [pc, #212]	; (6000162c <ResetHandler+0x204>)
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
60001558:	ldr	r2, [pc, #212]	; (60001630 <ResetHandler+0x208>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000155a:	orr.w	r1, r1, #12288	; 0x3000
6000155e:	str.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
60001562:	str	r7, [r3, #0]
	PIT_TCTRL0 = 0;
60001564:	str.w	r7, [r3, #264]	; 0x108
	PIT_TCTRL1 = 0;
60001568:	str.w	r7, [r3, #280]	; 0x118
	PIT_TCTRL2 = 0;
6000156c:	str.w	r7, [r3, #296]	; 0x128
	PIT_TCTRL3 = 0;
60001570:	str.w	r7, [r3, #312]	; 0x138
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
60001574:	ldr	r3, [r2, #56]	; 0x38
60001576:	lsls	r3, r3, #31
60001578:	bmi.n	6000158c <ResetHandler+0x164>
		SNVS_LPSRTCMR = 1546300800u >> 17;
6000157a:	movw	r3, #11797	; 0x2e15
		SNVS_LPSRTCLR = 1546300800u << 15;
6000157e:	ldr	r1, [pc, #180]	; (60001634 <ResetHandler+0x20c>)
60001580:	str	r1, [r2, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
60001582:	str	r3, [r2, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
60001584:	ldr	r3, [r2, #56]	; 0x38
60001586:	orr.w	r3, r3, #1
6000158a:	str	r3, [r2, #56]	; 0x38
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
6000158c:	ldr	r2, [pc, #160]	; (60001630 <ResetHandler+0x208>)
6000158e:	ldr	r4, [pc, #168]	; (60001638 <ResetHandler+0x210>)
60001590:	ldr	r3, [r2, #8]
60001592:	orr.w	r3, r3, #65537	; 0x10001
60001596:	str	r3, [r2, #8]
	configure_external_ram();
60001598:	bl	60001888 <configure_external_ram>
	analog_init();
6000159c:	bl	60001e60 <analog_init>
	pwm_init();
600015a0:	bl	60001ec8 <__pwm_init_veneer>
	tempmon_init();
600015a4:	bl	60001c68 <tempmon_init>
	startup_middle_hook();
600015a8:	bl	60001788 <startup_default_middle_hook>
// Returns the number of milliseconds since your program started running.
// This 32 bit number will roll back to zero after about 49.7 days.  For a
// simpler way to build delays or timeouts, consider using elapsedMillis.
static inline uint32_t millis(void)
{
	return systick_millis_count;
600015ac:	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015ae:	cmp	r3, #19
600015b0:	bls.n	600015ac <ResetHandler+0x184>
	usb_init();
600015b2:	bl	60001648 <usb_init>
600015b6:	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_AFTER + TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015b8:	cmp.w	r3, #300	; 0x12c
600015bc:	bcc.n	600015b6 <ResetHandler+0x18e>
	startup_late_hook();
600015be:	bl	6000178c <startup_default_late_hook>
	__libc_init_array();
600015c2:	bl	60001ec0 <____libc_init_array_veneer>
	main();
600015c6:	bl	60001ed8 <__main_veneer>
	while (1) asm("WFI");
600015ca:	wfi
600015cc:	b.n	600015ca <ResetHandler+0x1a2>
600015ce:	nop
600015d0:	.word	0xaaaaaabf
600015d4:	.word	0x400ac000
600015d8:	.word	0x00200007
600015dc:	.word	0x20068000
600015e0:	.word	0x400d8000
600015e4:	.word	0x000136b8
600015e8:	.word	0x60002378
600015ec:	.word	0x00000000
600015f0:	.word	0x20001ec0
600015f4:	.word	0x60015a34
600015f8:	.word	0x20000000
600015fc:	.word	0x200081a0
60001600:	.word	0x20001ec0
60001604:	.word	0x20001c00
60001608:	.word	0x0000b8d1
6000160c:	.word	0xe000e400
60001610:	.word	0xe000e4a0
60001614:	.word	0x0000c29d
60001618:	.word	0x200080e4
6000161c:	.word	0x0000c2a1
60001620:	.word	0x20200000
60001624:	.word	0xe0001000
60001628:	.word	0x016e3600
6000162c:	.word	0x40084000
60001630:	.word	0x400d4000
60001634:	.word	0x56c00000
60001638:	.word	0x200080e8
6000163c:	.word	0x2018101b
60001640:	.word	0x13110d0c
60001644:	.word	0x400fc000

60001648 <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001648:	ldr	r3, [pc, #196]	; (60001710 <usb_init+0xc8>)
6000164a:	movw	r2, #3937	; 0xf61
{
6000164e:	push	{r4, lr}
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001650:	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001654:	movw	r4, #1028	; 0x404
	usb_init_serialnumber();
60001658:	bl	60001f08 <__usb_init_serialnumber_veneer>
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
6000165c:	ldr	r2, [pc, #180]	; (60001714 <usb_init+0xcc>)
	USB1_BURSTSIZE = 0x0404;
6000165e:	ldr	r1, [pc, #184]	; (60001718 <usb_init+0xd0>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001660:	ldr.w	r3, [r2, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001664:	ldr	r0, [pc, #180]	; (6000171c <usb_init+0xd4>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001666:	orr.w	r3, r3, #3
6000166a:	str.w	r3, [r2, #128]	; 0x80
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
6000166e:	ldr	r3, [pc, #176]	; (60001720 <usb_init+0xd8>)
	USB1_BURSTSIZE = 0x0404;
60001670:	str.w	r4, [r1, #352]	; 0x160
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001674:	ldr	r2, [r0, #0]
60001676:	tst	r2, r3
60001678:	bne.n	60001682 <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
6000167a:	ldr.w	r3, [r1, #424]	; 0x1a8
6000167e:	lsls	r2, r3, #30
60001680:	beq.n	600016ba <usb_init+0x72>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001682:	ldr	r2, [pc, #148]	; (60001718 <usb_init+0xd0>)
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
60001684:	mov.w	r1, #2147483648	; 0x80000000
60001688:	ldr	r3, [pc, #144]	; (6000171c <usb_init+0xd4>)
6000168a:	str	r1, [r3, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
6000168c:	ldr.w	r3, [r2, #320]	; 0x140
60001690:	orr.w	r3, r3, #2
60001694:	str.w	r3, [r2, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
60001698:	ldr.w	r3, [r2, #320]	; 0x140
6000169c:	lsls	r3, r3, #30
6000169e:	bmi.n	60001698 <usb_init+0x50>
		NVIC_CLEAR_PENDING(IRQ_USB1);
600016a0:	mov.w	r0, #131072	; 0x20000
600016a4:	mov.w	r1, #3758153728	; 0xe000e000
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
600016a8:	ldr	r3, [pc, #112]	; (6000171c <usb_init+0xd4>)
600016aa:	mov.w	r2, #2147483648	; 0x80000000
		NVIC_CLEAR_PENDING(IRQ_USB1);
600016ae:	str.w	r0, [r1, #652]	; 0x28c
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
600016b2:	movs	r0, #25
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
600016b4:	str	r2, [r3, #56]	; 0x38
		delay(25);
600016b6:	bl	60001ed0 <__delay_veneer>
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
600016ba:	ldr	r2, [pc, #96]	; (6000171c <usb_init+0xd4>)
600016bc:	mov.w	r0, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600016c0:	ldr	r4, [pc, #84]	; (60001718 <usb_init+0xd0>)
	USBPHY1_PWD = 0;
600016c2:	movs	r1, #0
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
600016c4:	str	r0, [r2, #56]	; 0x38
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600016c6:	movs	r0, #10
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600016c8:	ldr	r3, [pc, #88]	; (60001724 <usb_init+0xdc>)
	USBPHY1_PWD = 0;
600016ca:	str	r1, [r2, #0]
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600016cc:	mov.w	r2, #896	; 0x380
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600016d0:	str.w	r0, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600016d4:	mov	r0, r3
600016d6:	bl	60001f00 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
	endpoint_queue_head[1].config = (64 << 16);
600016da:	mov.w	r2, #4194304	; 0x400000
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600016de:	mov	r3, r0
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
600016e0:	mov.w	r0, #4227072	; 0x408000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
600016e4:	movw	r1, #323	; 0x143
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
600016e8:	str	r0, [r3, #0]
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
600016ea:	str.w	r3, [r4, #344]	; 0x158
	endpoint_queue_head[1].config = (64 << 16);
600016ee:	str	r2, [r3, #64]	; 0x40
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* volatile _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
600016f0:	ldr	r3, [pc, #52]	; (60001728 <usb_init+0xe0>)
600016f2:	ldr	r2, [pc, #56]	; (6000172c <usb_init+0xe4>)
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
600016f4:	str.w	r1, [r4, #328]	; 0x148
600016f8:	str.w	r2, [r3, #516]	; 0x204
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &usb_isr;
	attachInterruptVector(IRQ_USB1, &usb_isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
600016fc:	mov.w	r2, #3758153728	; 0xe000e000
60001700:	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001704:	movs	r3, #1
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001706:	str.w	r1, [r2, #268]	; 0x10c
	USB1_USBCMD = USB_USBCMD_RS;
6000170a:	str.w	r3, [r4, #320]	; 0x140
	//transfer_log_head = 0;
	//transfer_log_count = 0;
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}
6000170e:	pop	{r4, pc}
60001710:	.word	0x400d8000
60001714:	.word	0x400fc000
60001718:	.word	0x402e0000
6000171c:	.word	0x400d9000
60001720:	.word	0x001e1c00
60001724:	.word	0x20000000
60001728:	.word	0x20001c00
6000172c:	.word	0x0000ae85

60001730 <_reboot_Teensyduino_>:


FLASHMEM void _reboot_Teensyduino_(void)
{
60001730:	push	{r3, lr}
	if (!(HW_OCOTP_CFG5 & 0x02)) {
60001732:	ldr	r3, [pc, #56]	; (6000176c <_reboot_Teensyduino_+0x3c>)
60001734:	ldr	r3, [r3, #96]	; 0x60
60001736:	lsls	r3, r3, #30
60001738:	bmi.n	6000173c <_reboot_Teensyduino_+0xc>
		asm("bkpt #251"); // run bootloader
6000173a:	bkpt	0x00fb
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
6000173c:	cpsid	i
		USB1_USBCMD = 0;
6000173e:	ldr	r3, [pc, #48]	; (60001770 <_reboot_Teensyduino_+0x40>)
60001740:	movs	r0, #0
		IOMUXC_GPR_GPR16 = 0x00200003;
60001742:	ldr	r2, [pc, #48]	; (60001774 <_reboot_Teensyduino_+0x44>)
		USB1_USBCMD = 0;
60001744:	str.w	r0, [r3, #320]	; 0x140
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001748:	add.w	r3, r3, #3758096384	; 0xe0000000
		IOMUXC_GPR_GPR16 = 0x00200003;
6000174c:	ldr	r1, [pc, #40]	; (60001778 <_reboot_Teensyduino_+0x48>)
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
6000174e:	sub.w	r3, r3, #913408	; 0xdf000
		IOMUXC_GPR_GPR16 = 0x00200003;
60001752:	str	r1, [r2, #64]	; 0x40
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001754:	mov	sp, r3
		__asm__ volatile("dsb":::"memory");
60001756:	dsb	sy
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
6000175a:	mov.w	r3, #2097152	; 0x200000
		*p = 0xEB120000;
6000175e:	ldr	r0, [pc, #28]	; (6000177c <_reboot_Teensyduino_+0x4c>)
60001760:	ldr	r2, [pc, #28]	; (60001780 <_reboot_Teensyduino_+0x50>)
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001762:	ldr	r3, [r3, #28]
		*p = 0xEB120000;
60001764:	str	r2, [r0, #0]
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001766:	ldr	r3, [r3, #8]
60001768:	blx	r3
	}
	__builtin_unreachable();
6000176a:	nop
6000176c:	.word	0x401f4400
60001770:	.word	0x402e0000
60001774:	.word	0x400ac000
60001778:	.word	0x00200003
6000177c:	.word	0x20208000
60001780:	.word	0xeb120000

60001784 <startup_default_early_hook>:
FLASHMEM void startup_default_early_hook(void) {}
60001784:	bx	lr
60001786:	nop

60001788 <startup_default_middle_hook>:
60001788:	bx	lr
6000178a:	nop

6000178c <startup_default_late_hook>:
6000178c:	bx	lr
6000178e:	nop

60001790 <configure_cache>:
{
60001790:	push	{r4}
	SCB_MPU_CTRL = 0; // turn off MPU
60001792:	mov.w	r3, #3758153728	; 0xe000e000
60001796:	movs	r1, #0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001798:	movs	r4, #16
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
6000179a:	ldr	r0, [pc, #172]	; (60001848 <configure_cache+0xb8>)
	SCB_MPU_CTRL = 0; // turn off MPU
6000179c:	str.w	r1, [r3, #3476]	; 0xd94
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600017a0:	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
600017a4:	movs	r4, #17
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600017a6:	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600017aa:	ldr	r0, [pc, #160]	; (6000184c <configure_cache+0xbc>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
600017ac:	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
600017b0:	movs	r4, #18
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600017b2:	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600017b6:	ldr	r0, [pc, #152]	; (60001850 <configure_cache+0xc0>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
600017b8:	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600017bc:	ldr	r2, [pc, #148]	; (60001854 <configure_cache+0xc4>)
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600017be:	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
600017c2:	ldr	r4, [pc, #148]	; (60001858 <configure_cache+0xc8>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600017c4:	orr.w	r2, r2, #21
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600017c8:	ldr	r0, [pc, #144]	; (6000185c <configure_cache+0xcc>)
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
600017ca:	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600017ce:	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600017d2:	ldr	r4, [pc, #140]	; (60001860 <configure_cache+0xd0>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600017d4:	ldr	r0, [pc, #140]	; (60001864 <configure_cache+0xd4>)
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600017d6:	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600017da:	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600017de:	ldr	r4, [pc, #136]	; (60001868 <configure_cache+0xd8>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600017e0:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
600017e4:	ldr	r0, [pc, #132]	; (6000186c <configure_cache+0xdc>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600017e6:	ldr	r2, [pc, #136]	; (60001870 <configure_cache+0xe0>)
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600017e8:	str.w	r4, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
600017ec:	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600017f0:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600017f4:	add.w	r2, r2, #327680	; 0x50000
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
600017f8:	ldr	r4, [pc, #120]	; (60001874 <configure_cache+0xe4>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600017fa:	adds	r2, #12
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
600017fc:	ldr	r0, [pc, #120]	; (60001878 <configure_cache+0xe8>)
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
600017fe:	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001802:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001806:	ldr	r2, [pc, #116]	; (6000187c <configure_cache+0xec>)
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
60001808:	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
6000180c:	ldr	r4, [pc, #112]	; (60001880 <configure_cache+0xf0>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
6000180e:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
60001812:	movs	r2, #1
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001814:	ldr	r0, [pc, #108]	; (60001884 <configure_cache+0xf4>)
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001816:	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
6000181a:	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
6000181e:	str.w	r2, [r3, #3476]	; 0xd94
	asm("dsb");
60001822:	dsb	sy
	asm("isb");
60001826:	isb	sy
	SCB_CACHE_ICIALLU = 0;
6000182a:	str.w	r1, [r3, #3920]	; 0xf50
	asm("dsb");
6000182e:	dsb	sy
	asm("isb");
60001832:	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001836:	ldr.w	r2, [r3, #3348]	; 0xd14
}
6000183a:	ldr.w	r4, [sp], #4
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
6000183e:	orr.w	r2, r2, #196608	; 0x30000
60001842:	str.w	r2, [r3, #3348]	; 0xd14
}
60001846:	bx	lr
60001848:	.word	0x1000003f
6000184c:	.word	0x03080025
60001850:	.word	0x00100009
60001854:	.word	0x200081a0
60001858:	.word	0x00200013
6000185c:	.word	0x07020021
60001860:	.word	0x20000014
60001864:	.word	0x13080025
60001868:	.word	0x10000009
6000186c:	.word	0x20200016
60001870:	.word	0x130b0027
60001874:	.word	0x40000017
60001878:	.word	0x60000018
6000187c:	.word	0x070b002f
60001880:	.word	0x70000019
60001884:	.word	0x130b002f

60001888 <configure_external_ram>:
{
60001888:	push	{r4, r5, r6, r7, lr}
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
6000188a:	ldr	r3, [pc, #736]	; (60001b6c <configure_external_ram+0x2e4>)
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
6000188c:	movs	r2, #24
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
6000188e:	ldr	r6, [pc, #736]	; (60001b70 <configure_external_ram+0x2e8>)
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
60001890:	movs	r0, #1
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
60001892:	ldr	r7, [pc, #736]	; (60001b74 <configure_external_ram+0x2ec>)
{
60001894:	sub	sp, #12
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001896:	str.w	r6, [r3, #604]	; 0x25c
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
6000189a:	ldr	r1, [pc, #732]	; (60001b78 <configure_external_ram+0x2f0>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
6000189c:	str.w	r7, [r3, #608]	; 0x260
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600018a0:	ldr	r5, [pc, #728]	; (60001b7c <configure_external_ram+0x2f4>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600018a2:	str.w	r6, [r3, #612]	; 0x264
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
600018a6:	sub.w	r6, r6, #45056	; 0xb000
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
600018aa:	ldr	r4, [pc, #724]	; (60001b80 <configure_external_ram+0x2f8>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
600018ac:	str.w	r6, [r3, #616]	; 0x268
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600018b0:	str.w	r5, [r3, #620]	; 0x26c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600018b4:	str.w	r5, [r3, #624]	; 0x270
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600018b8:	str.w	r5, [r3, #628]	; 0x274
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600018bc:	str.w	r5, [r3, #632]	; 0x278
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
600018c0:	movw	r5, #34572	; 0x870c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
600018c4:	str	r2, [r3, #108]	; 0x6c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_23 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DQS
600018c6:	str	r2, [r3, #112]	; 0x70
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_24 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS0_B (RAM)
600018c8:	str	r2, [r3, #116]	; 0x74
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_25 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SCLK
600018ca:	str	r2, [r3, #120]	; 0x78
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
600018cc:	str	r2, [r3, #124]	; 0x7c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
600018ce:	str.w	r2, [r3, #128]	; 0x80
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
600018d2:	str.w	r2, [r3, #132]	; 0x84
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3
600018d6:	str.w	r2, [r3, #136]	; 0x88
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
600018da:	str.w	r0, [r1, #812]	; 0x32c
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
600018de:	ldr	r2, [pc, #676]	; (60001b84 <configure_external_ram+0x2fc>)
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT = 1; // GPIO_EMC_26 for Mode: ALT8
600018e0:	str.w	r0, [r1, #816]	; 0x330
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT = 1; // GPIO_EMC_27 for Mode: ALT8
600018e4:	str.w	r0, [r1, #820]	; 0x334
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
600018e8:	str.w	r0, [r1, #824]	; 0x338
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
600018ec:	str.w	r0, [r1, #828]	; 0x33c
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8
600018f0:	str.w	r0, [r1, #848]	; 0x350
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
600018f4:	ldr	r1, [r4, #24]
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
600018f6:	ldr	r3, [pc, #656]	; (60001b88 <configure_external_ram+0x300>)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
600018f8:	ands	r2, r1
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
600018fa:	ldr	r0, [pc, #656]	; (60001b8c <configure_external_ram+0x304>)
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
600018fc:	ldr	r1, [pc, #656]	; (60001b90 <configure_external_ram+0x308>)
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
600018fe:	orrs	r3, r2
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001900:	ldr	r2, [pc, #656]	; (60001b94 <configure_external_ram+0x30c>)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001902:	str	r3, [r4, #24]
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);
60001904:	ldr.w	r3, [r4, #132]	; 0x84
60001908:	orr.w	r3, r3, #12
6000190c:	str.w	r3, [r4, #132]	; 0x84
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
60001910:	mov.w	r4, #4294967295
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
60001914:	ldr	r3, [r0, #0]
60001916:	orr.w	r3, r3, #2
6000191a:	str	r3, [r0, #0]
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
6000191c:	ldr	r3, [r0, #0]
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
6000191e:	ands	r3, r5
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
60001920:	mov.w	r5, #8192	; 0x2000
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001924:	orrs	r2, r3
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001926:	ldr	r3, [pc, #624]	; (60001b98 <configure_external_ram+0x310>)
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60001928:	str	r2, [r0, #0]
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
6000192a:	str	r4, [r0, #4]
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
6000192c:	ldr	r2, [r1, #8]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
6000192e:	ldr	r4, [pc, #620]	; (60001b9c <configure_external_ram+0x314>)
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001930:	ands	r3, r2
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001932:	ldr	r2, [pc, #620]	; (60001ba0 <configure_external_ram+0x318>)
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
60001934:	orr.w	r3, r3, #536870912	; 0x20000000
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001938:	str	r3, [r0, #8]
	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
6000193a:	ldr	r3, [r0, #12]
6000193c:	bic.w	r3, r3, #120	; 0x78
60001940:	str	r3, [r0, #12]
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001942:	ldr	r3, [r0, #32]
60001944:	ands	r3, r2
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001946:	orrs	r3, r4
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001948:	str	r3, [r0, #32]
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
6000194a:	ldr	r3, [r0, #32]
6000194c:	ands	r3, r2
	FLEXSPI2_AHBRXBUF2CR0 = mask;
6000194e:	ldr	r2, [pc, #596]	; (60001ba4 <configure_external_ram+0x31c>)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001950:	orrs	r3, r4
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001952:	ldr	r4, [pc, #596]	; (60001ba8 <configure_external_ram+0x320>)
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001954:	str	r3, [r0, #36]	; 0x24
	FLEXSPI2_AHBRXBUF2CR0 = mask;
60001956:	str	r2, [r0, #40]	; 0x28
	FLEXSPI2_AHBRXBUF3CR0 = mask;
60001958:	str	r2, [r0, #44]	; 0x2c
	FLEXSPI2_INTEN = 0;
6000195a:	movs	r2, #0
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
6000195c:	ldr.w	r3, [r1, #184]	; 0xb8
60001960:	bic.w	r3, r3, #63	; 0x3f
60001964:	orr.w	r3, r3, #1
60001968:	str.w	r3, [r0, #184]	; 0xb8
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
6000196c:	ldr.w	r3, [r1, #188]	; 0xbc
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001970:	ldr	r1, [pc, #568]	; (60001bac <configure_external_ram+0x324>)
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
60001972:	bic.w	r3, r3, #63	; 0x3f
60001976:	orr.w	r3, r3, #1
6000197a:	str.w	r3, [r0, #188]	; 0xbc
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
6000197e:	movw	r3, #1541	; 0x605
	FLEXSPI2_INTEN = 0;
60001982:	str	r2, [r0, #16]
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
60001984:	str	r5, [r0, #96]	; 0x60
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001986:	str	r4, [r0, #112]	; 0x70
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001988:	str.w	r3, [r0, #128]	; 0x80
	FLEXSPI2_FLSHA2CR0 = 0x2000; // 8 MByte
6000198c:	str	r5, [r0, #100]	; 0x64
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
6000198e:	str	r4, [r0, #116]	; 0x74
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001990:	movs	r4, #2
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001992:	str.w	r3, [r0, #132]	; 0x84
	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
60001996:	ldr	r3, [r0, #0]
60001998:	bic.w	r3, r3, #2
6000199c:	str	r3, [r0, #0]
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
6000199e:	str	r1, [r0, #24]
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600019a0:	ldr	r3, [pc, #524]	; (60001bb0 <configure_external_ram+0x328>)
	for (int i=0; i < 64; i++) luttable[i] = 0;
600019a2:	ldr	r1, [pc, #528]	; (60001bb4 <configure_external_ram+0x32c>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600019a4:	str	r4, [r0, #28]
	for (int i=0; i < 64; i++) luttable[i] = 0;
600019a6:	str.w	r2, [r3], #4
600019aa:	cmp	r3, r1
600019ac:	bne.n	600019a6 <configure_external_ram+0x11e>
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
600019ae:	ldr	r2, [pc, #476]	; (60001b8c <configure_external_ram+0x304>)
600019b0:	ldr	r3, [r2, #0]
600019b2:	orr.w	r3, r3, #1
600019b6:	str	r3, [r2, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
600019b8:	ldr	r3, [r2, #0]
600019ba:	ands.w	r3, r3, #1
600019be:	bne.n	600019b8 <configure_external_ram+0x130>
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600019c0:	ldr	r0, [pc, #488]	; (60001bac <configure_external_ram+0x324>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600019c2:	movs	r1, #2
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
600019c4:	movw	r4, #1781	; 0x6f5
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600019c8:	str	r0, [r2, #24]
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
600019ca:	movw	r0, #1177	; 0x499
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600019ce:	str	r1, [r2, #28]
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
600019d0:	movw	r1, #1126	; 0x466
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
600019d4:	str.w	r4, [r2, #512]	; 0x200
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
600019d8:	movw	r4, #9217	; 0x2401
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
600019dc:	str.w	r1, [r2, #528]	; 0x210
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
600019e0:	ldr	r1, [pc, #468]	; (60001bb8 <configure_external_ram+0x330>)
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
600019e2:	str.w	r0, [r2, #544]	; 0x220
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
600019e6:	str.w	r1, [r2, #560]	; 0x230
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
600019ea:	movw	r1, #1077	; 0x435
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
600019ee:	ldr	r0, [pc, #460]	; (60001bbc <configure_external_ram+0x334>)
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
600019f0:	str.w	r4, [r2, #564]	; 0x234
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
600019f4:	str.w	r1, [r2, #576]	; 0x240
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
600019f8:	ldr	r4, [pc, #452]	; (60001bc0 <configure_external_ram+0x338>)
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
600019fa:	str.w	r0, [r2, #592]	; 0x250
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
600019fe:	movw	r0, #8705	; 0x2201
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
60001a02:	ldr	r1, [pc, #448]	; (60001bc4 <configure_external_ram+0x33c>)
60001a04:	str.w	r1, [r2, #596]	; 0x254
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a08:	movs	r1, #1
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
60001a0a:	str.w	r4, [r2, #608]	; 0x260
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
60001a0e:	str.w	r0, [r2, #612]	; 0x264
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a12:	ldr	r0, [pc, #376]	; (60001b8c <configure_external_ram+0x304>)
	FLEXSPI2_IPCR0 = addr;
60001a14:	str.w	r3, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a18:	str.w	r3, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a1c:	str.w	r1, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a20:	ldr	r3, [r0, #20]
60001a22:	lsls	r2, r3, #31
60001a24:	bpl.n	60001a20 <configure_external_ram+0x198>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a26:	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001a28:	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a2a:	mov.w	r2, #65536	; 0x10000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a2e:	ldr	r1, [pc, #348]	; (60001b8c <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a30:	str	r3, [r0, #20]
	FLEXSPI2_IPCR0 = addr;
60001a32:	str.w	r4, [r0, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a36:	str.w	r2, [r0, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a3a:	str.w	r3, [r0, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a3e:	ldr	r3, [r1, #20]
60001a40:	lsls	r3, r3, #31
60001a42:	bpl.n	60001a3e <configure_external_ram+0x1b6>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a44:	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001a46:	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a48:	mov.w	r0, #131072	; 0x20000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a4c:	ldr	r2, [pc, #316]	; (60001b8c <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a4e:	str	r3, [r1, #20]
	FLEXSPI2_IPCR0 = addr;
60001a50:	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a54:	str.w	r0, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a58:	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a5c:	ldr	r3, [r2, #20]
60001a5e:	lsls	r7, r3, #31
60001a60:	bpl.n	60001a5c <configure_external_ram+0x1d4>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a62:	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001a64:	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001a66:	ldr	r0, [pc, #352]	; (60001bc8 <configure_external_ram+0x340>)
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a68:	ldr	r1, [pc, #288]	; (60001b8c <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a6a:	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
60001a6c:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001a70:	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a74:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a78:	ldr	r3, [r1, #20]
60001a7a:	lsls	r6, r3, #31
60001a7c:	bpl.n	60001a78 <configure_external_ram+0x1f0>
	uint32_t id = FLEXSPI2_RFDR0;
60001a7e:	ldr.w	r3, [r1, #256]	; 0x100
	if (flexspi2_psram_id(0) == 0x5D0D) {
60001a82:	movw	r2, #23821	; 0x5d0d
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001a86:	movs	r0, #33	; 0x21
	return id & 0xFFFF;
60001a88:	uxth	r3, r3
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001a8a:	str	r0, [r1, #20]
	if (flexspi2_psram_id(0) == 0x5D0D) {
60001a8c:	cmp	r3, r2
60001a8e:	bne.n	60001b5c <configure_external_ram+0x2d4>
	FLEXSPI2_IPCR0 = addr;
60001a90:	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a92:	mov.w	r2, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a96:	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a98:	ldr	r0, [pc, #240]	; (60001b8c <configure_external_ram+0x304>)
	FLEXSPI2_IPCR0 = addr;
60001a9a:	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a9e:	str.w	r2, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001aa2:	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001aa6:	ldr	r3, [r0, #20]
60001aa8:	lsls	r5, r3, #31
60001aaa:	bpl.n	60001aa6 <configure_external_ram+0x21e>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001aac:	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001aae:	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001ab2:	movs	r1, #0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001ab4:	ldr	r2, [pc, #212]	; (60001b8c <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001ab6:	str	r3, [r0, #20]
	FLEXSPI2_IPCR0 = addr;
60001ab8:	str.w	r4, [r0, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001abc:	str.w	r1, [r0, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001ac0:	str.w	r3, [r0, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001ac4:	ldr	r3, [r2, #20]
60001ac6:	lsls	r4, r3, #31
60001ac8:	bpl.n	60001ac4 <configure_external_ram+0x23c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001aca:	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001acc:	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001ad0:	mov.w	r0, #65536	; 0x10000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001ad4:	ldr	r1, [pc, #180]	; (60001b8c <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001ad6:	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
60001ad8:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001adc:	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001ae0:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001ae4:	ldr	r3, [r1, #20]
60001ae6:	lsls	r0, r3, #31
60001ae8:	bpl.n	60001ae4 <configure_external_ram+0x25c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001aea:	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001aec:	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001af0:	mov.w	r0, #131072	; 0x20000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001af4:	ldr	r2, [pc, #148]	; (60001b8c <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001af6:	str	r3, [r1, #20]
	FLEXSPI2_IPCR0 = addr;
60001af8:	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001afc:	str.w	r0, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001b00:	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b04:	ldr	r3, [r2, #20]
60001b06:	lsls	r1, r3, #31
60001b08:	bpl.n	60001b04 <configure_external_ram+0x27c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b0a:	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001b0c:	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001b10:	ldr	r0, [pc, #180]	; (60001bc8 <configure_external_ram+0x340>)
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b12:	ldr	r1, [pc, #120]	; (60001b8c <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b14:	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
60001b16:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001b1a:	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001b1e:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b22:	ldr	r3, [r1, #20]
60001b24:	lsls	r2, r3, #31
60001b26:	bpl.n	60001b22 <configure_external_ram+0x29a>
	uint32_t id = FLEXSPI2_RFDR0;
60001b28:	ldr.w	r3, [r1, #256]	; 0x100
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001b2c:	movw	r2, #23821	; 0x5d0d
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001b30:	movs	r0, #33	; 0x21
	return id & 0xFFFF;
60001b32:	uxth	r3, r3
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001b34:	str	r0, [r1, #20]
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001b36:	cmp	r3, r2
60001b38:	beq.n	60001bdc <configure_external_ram+0x354>
60001b3a:	movs	r5, #8
60001b3c:	mov.w	r4, #8388608	; 0x800000
			external_psram_size * 0x100000 -
60001b40:	ldr	r1, [pc, #136]	; (60001bcc <configure_external_ram+0x344>)
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001b42:	movs	r0, #0
			external_psram_size * 0x100000 -
60001b44:	ldr	r3, [pc, #136]	; (60001bd0 <configure_external_ram+0x348>)
			external_psram_size = 16;
60001b46:	ldr	r2, [pc, #140]	; (60001bd4 <configure_external_ram+0x34c>)
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001b48:	str	r0, [sp, #0]
			external_psram_size = 16;
60001b4a:	strb	r5, [r2, #0]
			external_psram_size * 0x100000 -
60001b4c:	subs	r2, r3, r1
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001b4e:	movs	r3, #1
60001b50:	ldr	r0, [pc, #132]	; (60001bd8 <configure_external_ram+0x350>)
60001b52:	add	r2, r4
60001b54:	bl	60001ee0 <__sm_set_pool_veneer>
}
60001b58:	add	sp, #12
60001b5a:	pop	{r4, r5, r6, r7, pc}
		memset(&extmem_smalloc_pool, 0, sizeof(extmem_smalloc_pool));
60001b5c:	ldr	r3, [pc, #120]	; (60001bd8 <configure_external_ram+0x350>)
60001b5e:	movs	r2, #0
60001b60:	strd	r2, r2, [r3]
60001b64:	strd	r2, r2, [r3, #8]
}
60001b68:	add	sp, #12
60001b6a:	pop	{r4, r5, r6, r7, pc}
60001b6c:	.word	0x401f8000
60001b70:	.word	0x0001b0f9
60001b74:	.word	0x000110f9
60001b78:	.word	0x401f8400
60001b7c:	.word	0x000170f9
60001b80:	.word	0x400fc000
60001b84:	.word	0x1ffffcff
60001b88:	.word	0xa0000300
60001b8c:	.word	0x402a4000
60001b90:	.word	0x402a8000
60001b94:	.word	0xffff0012
60001b98:	.word	0x00f737ff
60001b9c:	.word	0x80000040
60001ba0:	.word	0x7cf0ff00
60001ba4:	.word	0x830f00ff
60001ba8:	.word	0x00020063
60001bac:	.word	0x5af05af0
60001bb0:	.word	0x402a4200
60001bb4:	.word	0x402a4300
60001bb8:	.word	0x3018049f
60001bbc:	.word	0x0a1806eb
60001bc0:	.word	0x0a180638
60001bc4:	.word	0x26013206
60001bc8:	.word	0x00030004
60001bcc:	.word	0x70000000
60001bd0:	.word	0x70000000
60001bd4:	.word	0x20008166
60001bd8:	.word	0x2000799c
	FLEXSPI2_IPCR0 = addr;
60001bdc:	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001be0:	mov.w	r2, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001be4:	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001be6:	ldr	r0, [pc, #32]	; (60001c08 <configure_external_ram+0x380>)
	FLEXSPI2_IPCR0 = addr;
60001be8:	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001bec:	str.w	r2, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001bf0:	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001bf4:	ldr	r3, [r0, #20]
60001bf6:	lsls	r3, r3, #31
60001bf8:	bpl.n	60001bf4 <configure_external_ram+0x36c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001bfa:	movs	r3, #1
60001bfc:	movs	r5, #16
60001bfe:	mov.w	r4, #16777216	; 0x1000000
60001c02:	str	r3, [r0, #20]
			external_psram_size = 16;
60001c04:	b.n	60001b40 <configure_external_ram+0x2b8>
60001c06:	nop
60001c08:	.word	0x402a4000

60001c0c <usb_pll_start>:
{
60001c0c:	push	{r4, r5, r6, r7}
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001c0e:	ldr	r2, [pc, #84]	; (60001c64 <usb_pll_start+0x58>)
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001c10:	movs	r7, #64	; 0x40
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001c12:	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001c16:	mov.w	r6, #4096	; 0x1000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001c1a:	mov.w	r5, #8192	; 0x2000
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001c1e:	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001c22:	movw	r0, #12354	; 0x3042
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001c26:	ldr	r3, [r2, #16]
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001c28:	tst.w	r3, #2
60001c2c:	bne.n	60001c4c <usb_pll_start+0x40>
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
60001c2e:	tst.w	r3, #8192	; 0x2000
60001c32:	beq.n	60001c54 <usb_pll_start+0x48>
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
60001c34:	tst.w	r3, #4096	; 0x1000
60001c38:	beq.n	60001c58 <usb_pll_start+0x4c>
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
60001c3a:	cmp	r3, #0
60001c3c:	bge.n	60001c26 <usb_pll_start+0x1a>
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
60001c3e:	tst.w	r3, #65536	; 0x10000
60001c42:	bne.n	60001c5c <usb_pll_start+0x50>
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
60001c44:	lsls	r3, r3, #25
60001c46:	bpl.n	60001c60 <usb_pll_start+0x54>
}
60001c48:	pop	{r4, r5, r6, r7}
60001c4a:	bx	lr
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001c4c:	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60001c4e:	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001c50:	str	r0, [r2, #24]
			continue;
60001c52:	b.n	60001c26 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001c54:	str	r5, [r2, #20]
			continue;
60001c56:	b.n	60001c26 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001c58:	str	r6, [r2, #20]
			continue;
60001c5a:	b.n	60001c26 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001c5c:	str	r1, [r2, #24]
			continue;
60001c5e:	b.n	60001c26 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001c60:	str	r7, [r2, #20]
			continue;
60001c62:	b.n	60001c26 <usb_pll_start+0x1a>
60001c64:	.word	0x400d8000

60001c68 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001c68:	ldr	r2, [pc, #252]	; (60001d68 <tempmon_init+0x100>)

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001c6a:	movs	r0, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
60001c6c:	ldr	r1, [pc, #252]	; (60001d6c <tempmon_init+0x104>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001c6e:	vmov.f32	s11, #57	; 0x41c80000  25.0
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001c72:	ldr.w	r3, [r2, #128]	; 0x80
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001c76:	mov.w	ip, #0
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c7a:	vldr	s12, [pc, #244]	; 60001d70 <tempmon_init+0x108>
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001c7e:	bic.w	r3, r3, #1
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c82:	vldr	s10, [pc, #240]	; 60001d74 <tempmon_init+0x10c>
{
60001c86:	push	{r4, r5}
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001c88:	str.w	r3, [r2, #128]	; 0x80
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001c8c:	str.w	r0, [r2, #144]	; 0x90
  calibrationData = HW_OCOTP_ANA1;
60001c90:	ldr.w	r1, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001c94:	ldr	r5, [pc, #224]	; (60001d78 <tempmon_init+0x110>)
60001c96:	uxtb	r3, r1
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001c98:	ldr	r4, [pc, #224]	; (60001d7c <tempmon_init+0x114>)
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001c9a:	ldr	r0, [pc, #228]	; (60001d80 <tempmon_init+0x118>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001c9c:	str	r3, [r5, #0]
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001c9e:	vmov	s15, r3
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001ca2:	lsrs	r3, r1, #20
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001ca4:	ubfx	r1, r1, #8, #12
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001ca8:	vcvt.f32.s32	s15, s15
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001cac:	vmov	s13, r3
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001cb0:	vmov	s14, r1
60001cb4:	ldr	r3, [pc, #204]	; (60001d84 <tempmon_init+0x11c>)
60001cb6:	vcvt.f32.s32	s14, s14
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001cba:	str	r1, [r4, #0]
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001cbc:	vcvt.f32.s32	s13, s13
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001cc0:	ldr	r1, [pc, #196]	; (60001d88 <tempmon_init+0x120>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001cc2:	vsub.f32	s12, s15, s12
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001cc6:	vsub.f32	s10, s15, s10
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001cca:	vsub.f32	s13, s13, s14
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001cce:	vsub.f32	s15, s15, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001cd2:	vmul.f32	s12, s12, s13
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001cd6:	vstr	s13, [r3]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001cda:	vmul.f32	s10, s10, s13
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001cde:	ldr.w	r3, [r2, #128]	; 0x80
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001ce2:	vmul.f32	s9, s15, s13
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001ce6:	vstr	s15, [r0]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001cea:	vdiv.f32	s11, s12, s15
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001cee:	ldr	r0, [pc, #156]	; (60001d8c <tempmon_init+0x124>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001cf0:	vdiv.f32	s12, s10, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001cf4:	vdiv.f32	s13, s9, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001cf8:	vadd.f32	s11, s11, s14
60001cfc:	vcvt.u32.f32	s11, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d00:	vadd.f32	s12, s12, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001d04:	vmov	r4, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d08:	vcvt.u32.f32	s12, s12
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001d0c:	orr.w	r3, r3, r4, lsl #20
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d10:	vadd.f32	s15, s13, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001d14:	str.w	r3, [r2, #128]	; 0x80
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001d18:	vmov	r3, s12
60001d1c:	ldr.w	r4, [r2, #400]	; 0x190
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d20:	vcvt.u32.f32	s15, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001d24:	and.w	r1, r1, r3, lsl #16
60001d28:	orrs	r1, r4
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d2a:	vmov	r3, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001d2e:	str.w	r1, [r2, #400]	; 0x190
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001d32:	ubfx	r3, r3, #0, #12
60001d36:	ldr.w	r1, [r2, #400]	; 0x190
60001d3a:	orrs	r3, r1
60001d3c:	ldr	r1, [pc, #80]	; (60001d90 <tempmon_init+0x128>)
60001d3e:	str.w	r3, [r2, #400]	; 0x190
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
60001d42:	ldr.w	r3, [r2, #128]	; 0x80
60001d46:	orr.w	r3, r3, #2
60001d4a:	str.w	r3, [r2, #128]	; 0x80
60001d4e:	ldr	r3, [pc, #68]	; (60001d94 <tempmon_init+0x12c>)
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001d50:	strb.w	ip, [r0, #64]	; 0x40
60001d54:	str.w	r3, [r1, #320]	; 0x140
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001d58:	mov.w	r3, #3758153728	; 0xe000e000
60001d5c:	movs	r2, #1
}
60001d5e:	pop	{r4, r5}
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001d60:	str.w	r2, [r3, #264]	; 0x108
}
60001d64:	bx	lr
60001d66:	nop
60001d68:	.word	0x400d8100
60001d6c:	.word	0x401f4400
60001d70:	.word	0x42aa0000
60001d74:	.word	0x42b40000
60001d78:	.word	0x200080d4
60001d7c:	.word	0x200080d0
60001d80:	.word	0x200080d8
60001d84:	.word	0x200080dc
60001d88:	.word	0x0fff0000
60001d8c:	.word	0xe000e400
60001d90:	.word	0x20001c00
60001d94:	.word	0x0000bba5

60001d98 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)>:
	unsigned int i;
	unsigned int maxnum = MAX_AUDIO_MEMORY / AUDIO_BLOCK_SAMPLES / 2;

	//Serial.println("AudioStream initialize_memory");
	//delay(10);
	if (num > maxnum) num = maxnum;
60001d98:	cmp.w	r1, #896	; 0x380
{
60001d9c:	push	{r3, r4, r5, r6, r7, lr}
60001d9e:	mov	r6, r1
60001da0:	mov	r7, r1
60001da2:	it	cs
60001da4:	movcs.w	r6, #896	; 0x380
60001da8:	mov	r5, r0
	__disable_irq();
60001daa:	cpsid	i
	memory_pool = data;
60001dac:	ldr	r3, [pc, #140]	; (60001e3c <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xa4>)
	memory_pool_first_mask = 0;
60001dae:	movs	r4, #0
	for (i=0; i < NUM_MASKS; i++) {
		memory_pool_available_mask[i] = 0;
60001db0:	movs	r2, #112	; 0x70
	memory_pool = data;
60001db2:	str	r0, [r3, #0]
		memory_pool_available_mask[i] = 0;
60001db4:	mov	r1, r4
	memory_pool_first_mask = 0;
60001db6:	ldr	r3, [pc, #136]	; (60001e40 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xa8>)
		memory_pool_available_mask[i] = 0;
60001db8:	ldr	r0, [pc, #136]	; (60001e44 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xac>)
	memory_pool_first_mask = 0;
60001dba:	strh	r4, [r3, #0]
		memory_pool_available_mask[i] = 0;
60001dbc:	bl	60001f00 <__memset_veneer>
	}
	for (i=0; i < num; i++) {
60001dc0:	cbz	r7, 60001df6 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x5e>
60001dc2:	mov	r1, r4
60001dc4:	ldr	r0, [pc, #124]	; (60001e44 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xac>)
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
60001dc6:	mov.w	ip, #1
60001dca:	lsrs	r2, r1, #5
60001dcc:	and.w	r3, r1, #31
	for (i=0; i < num; i++) {
60001dd0:	adds	r1, #1
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
60001dd2:	ldr.w	r4, [r0, r2, lsl #2]
60001dd6:	lsl.w	r3, ip, r3
	for (i=0; i < num; i++) {
60001dda:	cmp	r6, r1
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
60001ddc:	orr.w	r3, r3, r4
60001de0:	str.w	r3, [r0, r2, lsl #2]
	for (i=0; i < num; i++) {
60001de4:	bhi.n	60001dca <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x32>
60001de6:	mov	r0, r5
60001de8:	movs	r3, #0
	}
	for (i=0; i < num; i++) {
		data[i].memory_pool_index = i;
60001dea:	strh	r3, [r0, #2]
	for (i=0; i < num; i++) {
60001dec:	adds	r3, #1
60001dee:	add.w	r0, r0, #260	; 0x104
60001df2:	cmp	r6, r3
60001df4:	bhi.n	60001dea <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x52>
	}
	if (update_scheduled == false) {
60001df6:	ldr	r4, [pc, #80]	; (60001e48 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xb0>)
60001df8:	ldrb	r5, [r4, #0]
60001dfa:	cbz	r5, 60001e00 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x68>
			float usec = 1e6 * AUDIO_BLOCK_SAMPLES / AUDIO_SAMPLE_RATE_EXACT;
			timer->begin(update_all, usec);
			update_setup();
		}
	}
	__enable_irq();
60001dfc:	cpsie	i
}
60001dfe:	pop	{r3, r4, r5, r6, r7, pc}
		IntervalTimer *timer = new IntervalTimer();
60001e00:	movs	r0, #8
60001e02:	bl	60001ef8 <___Znwj_veneer>
// some of these 4 possible instances may be in use by libraries.
class IntervalTimer {
private:
	static const uint32_t MAX_PERIOD = UINT32_MAX / (24000000 / 1000000);
public:
	constexpr IntervalTimer() {
60001e06:	movs	r2, #128	; 0x80
	// or false if all hardware timers are already in use.
	bool begin(void (*funct)(), float microseconds) {
		if (microseconds <= 0 || microseconds > MAX_PERIOD) return false;
		uint32_t cycles = (float)(24000000 / 1000000) * microseconds - 0.5f;
		if (cycles < 17) return false;
		return beginCycles(funct, cycles);
60001e08:	ldr	r1, [pc, #64]	; (60001e4c <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xb4>)
	constexpr IntervalTimer() {
60001e0a:	strb	r2, [r0, #4]
60001e0c:	str	r5, [r0, #0]
		return beginCycles(funct, cycles);
60001e0e:	ldr	r2, [pc, #64]	; (60001e50 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xb8>)
60001e10:	bl	60001ef0 <___ZN13IntervalTimer11beginCyclesEPFvvEm_veneer>
// their constructors.
bool AudioStream::update_scheduled = false;

bool AudioStream::update_setup(void)
{
	if (update_scheduled) return false;
60001e14:	ldrb	r3, [r4, #0]
60001e16:	cmp	r3, #0
60001e18:	bne.n	60001dfc <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x64>
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
60001e1a:	ldr	r3, [pc, #56]	; (60001e54 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xbc>)
60001e1c:	ldr	r2, [pc, #56]	; (60001e58 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xc0>)
60001e1e:	str.w	r2, [r3, #344]	; 0x158
	attachInterruptVector(IRQ_SOFTWARE, software_isr);
	NVIC_SET_PRIORITY(IRQ_SOFTWARE, 208); // 255 = lowest priority
60001e22:	ldr	r1, [pc, #56]	; (60001e5c <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xc4>)
60001e24:	movs	r0, #208	; 0xd0
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
60001e26:	mov.w	r3, #3758153728	; 0xe000e000
60001e2a:	movs	r2, #64	; 0x40
	NVIC_SET_PRIORITY(IRQ_SOFTWARE, 208); // 255 = lowest priority
60001e2c:	strb.w	r0, [r1, #70]	; 0x46
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
60001e30:	str.w	r2, [r3, #264]	; 0x108
	update_scheduled = true;
60001e34:	movs	r3, #1
60001e36:	strb	r3, [r4, #0]
	__enable_irq();
60001e38:	cpsie	i
}
60001e3a:	pop	{r3, r4, r5, r6, r7, pc}
60001e3c:	.word	0x2000640c
60001e40:	.word	0x2000813c
60001e44:	.word	0x20006414
60001e48:	.word	0x2000815d
60001e4c:	.word	0x0000c539
60001e50:	.word	0x0001101b
60001e54:	.word	0x20001c00
60001e58:	.word	0x0000c545
60001e5c:	.word	0xe000e400

60001e60 <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001e60:	ldr	r3, [pc, #64]	; (60001ea4 <analog_init+0x44>)
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001e62:	movs	r0, #160	; 0xa0
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001e64:	ldr	r2, [pc, #64]	; (60001ea8 <analog_init+0x48>)
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001e66:	ldr	r1, [r3, #108]	; 0x6c
60001e68:	orr.w	r1, r1, #196608	; 0x30000
{
60001e6c:	push	{r4}
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001e6e:	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001e70:	movw	r4, #1591	; 0x637
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
60001e74:	ldr	r1, [r3, #108]	; 0x6c
60001e76:	orr.w	r1, r1, #768	; 0x300
60001e7a:	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001e7c:	str	r4, [r2, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001e7e:	str	r0, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) {
60001e80:	ldr	r3, [r2, #72]	; 0x48
60001e82:	lsls	r3, r3, #24
60001e84:	bmi.n	60001e80 <analog_init+0x20>
		//yield();
	}
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001e86:	ldr	r2, [pc, #36]	; (60001eac <analog_init+0x4c>)
60001e88:	movw	r1, #1591	; 0x637
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001e8c:	movs	r3, #160	; 0xa0
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001e8e:	str	r1, [r2, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001e90:	str	r3, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) {
60001e92:	ldr	r3, [r2, #72]	; 0x48
60001e94:	ands.w	r3, r3, #128	; 0x80
60001e98:	bne.n	60001e92 <analog_init+0x32>
		//yield();
	}
	calibrating = 0;
60001e9a:	ldr	r2, [pc, #20]	; (60001eb0 <analog_init+0x50>)
60001e9c:	strb	r3, [r2, #0]
}
60001e9e:	ldr.w	r4, [sp], #4
60001ea2:	bx	lr
60001ea4:	.word	0x400fc000
60001ea8:	.word	0x400c4000
60001eac:	.word	0x400c8000
60001eb0:	.word	0x20008165

60001eb4 <_init>:
60001eb4:	push	{r3, r4, r5, r6, r7, lr}
60001eb6:	nop
60001eb8:	pop	{r3, r4, r5, r6, r7}
60001eba:	pop	{r3}
60001ebc:	mov	lr, r3
60001ebe:	bx	lr

60001ec0 <____libc_init_array_veneer>:
60001ec0:	ldr.w	pc, [pc]	; 60001ec4 <____libc_init_array_veneer+0x4>
60001ec4:	.word	0x0000e2ed

60001ec8 <__pwm_init_veneer>:
60001ec8:	ldr.w	pc, [pc]	; 60001ecc <__pwm_init_veneer+0x4>
60001ecc:	.word	0x0000bd6d

60001ed0 <__delay_veneer>:
60001ed0:	ldr.w	pc, [pc]	; 60001ed4 <__delay_veneer+0x4>
60001ed4:	.word	0x0000b7d5

60001ed8 <__main_veneer>:
60001ed8:	ldr.w	pc, [pc]	; 60001edc <__main_veneer+0x4>
60001edc:	.word	0x0000c529

60001ee0 <__sm_set_pool_veneer>:
60001ee0:	ldr.w	pc, [pc]	; 60001ee4 <__sm_set_pool_veneer+0x4>
60001ee4:	.word	0x0000bb21

60001ee8 <__set_arm_clock_veneer>:
60001ee8:	ldr.w	pc, [pc]	; 60001eec <__set_arm_clock_veneer+0x4>
60001eec:	.word	0x0000a949

60001ef0 <___ZN13IntervalTimer11beginCyclesEPFvvEm_veneer>:
60001ef0:	ldr.w	pc, [pc]	; 60001ef4 <___ZN13IntervalTimer11beginCyclesEPFvvEm_veneer+0x4>
60001ef4:	.word	0x0000d16d

60001ef8 <___Znwj_veneer>:
60001ef8:	ldr.w	pc, [pc]	; 60001efc <___Znwj_veneer+0x4>
60001efc:	.word	0x0000d0a9

60001f00 <__memset_veneer>:
60001f00:	ldr.w	pc, [pc]	; 60001f04 <__memset_veneer+0x4>
60001f04:	.word	0x0000e075

60001f08 <__usb_init_serialnumber_veneer>:
60001f08:	ldr.w	pc, [pc]	; 60001f0c <__usb_init_serialnumber_veneer+0x4>
60001f0c:	.word	0x0000c08d

60001f10 <__frame_dummy_init_array_entry>:
60001f10:	E...Y.......Q...
60001f20:	................
60001f30:	............)...
60001f40:	A...Y...........
60001f50:	................
60001f60:	....)...A...M ..
60001f70:	e ..} ... ... ..
60001f80:	!$..E)..Y0..

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <register_tm_clones>:
}
      20:	ldr	r0, [pc, #20]	; (38 <_teensy_model_identifier+0x13>)
      22:	ldr	r3, [pc, #24]	; (3c <_teensy_model_identifier+0x17>)
	__disable_irq();
	sof_usage |= (1 << interface);
	uint32_t intr = USB1_USBINTR;
	if (!(intr & USB_USBINTR_SRE)) {
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
		USB1_USBINTR = intr | USB_USBINTR_SRE;
      24:	subs	r3, r3, r0
      26:	lsrs	r1, r3, #31
	}
	__enable_irq();
      28:	add.w	r1, r1, r3, asr #2
}
      2c:	asrs	r1, r1, #1
      2e:	beq.n	36 <_teensy_model_identifier+0x11>
      30:	ldr	r3, [pc, #12]	; (40 <_teensy_model_identifier+0x1b>)
      32:	cbz	r3, 36 <_teensy_model_identifier+0x11>
      34:	bx	r3
      36:	bx	lr
	SNVS_LPSRTCMR = t >> 17;
	// start the SRTC
	SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
	while (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)); // wait
	// start the RTC and sync it to the SRTC
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
      38:	.word	0x20001ec0
      3c:	.word	0x20001ec0
}
      40:	.word	0x00000000

00000044 <frame_dummy>:
      44:	push	{r3, lr}
      46:	ldr	r3, [pc, #20]	; (5c <frame_dummy+0x18>)
  }
  m_vwd = dir;
  return true;

fail:
  return false;
      48:	cbz	r3, 52 <frame_dummy+0xe>
}
      4a:	ldr	r1, [pc, #20]	; (60 <frame_dummy+0x1c>)
      4c:	ldr	r0, [pc, #20]	; (64 <frame_dummy+0x20>)
      4e:	nop.w
		}
		NVIC_SET_PRIORITY(IRQ_PIT, top_priority);
		channel = 0;
	}
#endif
}
      52:	ldmia.w	sp!, {r3, lr}
      56:	b.w	20 <register_tm_clones>
	if (pin < NUM_DIGITAL_PINS) {
		cdPin_ = pin;
		pinMode(cdPin_, INPUT_PULLUP);
	} else {
		cdPin_ = 0xff;
		return false;
      5a:	nop
  m_vwd = dir;
  return true;

fail:
  return false;
}
      5c:	.word	0x00000000
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::open(uint32_t index, oflag_t oflag) {
  ExFatVolume* vol = ExFatVolume::cwv();
  return vol ? open(vol->vwd(), index, oflag) : false;
      60:	.word	0x20007c48
  m_attributes = FILE_ATTR_CLOSED;
      64:	.word	0x60018800

00000068 <Print::availableForWrite()>:
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
	virtual size_t write(const uint8_t *buffer, size_t size);
	virtual int availableForWrite(void)		{ return 0; }
      68:	movs	r0, #0
      6a:	bx	lr

0000006c <Print::flush()>:
	virtual void flush()				{ }
      6c:	bx	lr
  return rtn;
      6e:	nop

00000070 <SDFile::isOpen()>:
    return m_fFile   ? m_fFile->isHidden()
           : m_xFile ? m_xFile->isHidden()
                     : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() const { return m_fFile || m_xFile; }
      70:	ldr	r3, [r0, #80]	; 0x50
      72:	cbz	r3, 78 <SDFile::isOpen()+0x8>
      74:	movs	r0, #1
			sdfatfile.close();
		}
	}
	virtual bool isOpen() {
		return sdfatfile.isOpen();
	}
      76:	bx	lr
      78:	ldr	r0, [r0, #84]	; 0x54
      7a:	subs	r0, #0
      7c:	it	ne
      7e:	movne	r0, #1
      80:	bx	lr
  if (sep) {
    *--str = sep;
  }
  str = fmtBase10(str, n);
  if (n < 10) {
    *--str = '0';
      82:	nop

00000084 <I2S_32::isr32()>:
      84:	ldr	r2, [pc, #136]	; (110 <I2S_32::isr32()+0x8c>)
    char sign;
    if (tz & 0X40) {
      sign = '-';
      tz = -tz;
    } else {
      sign = '+';
      86:	ldr	r3, [pc, #140]	; (114 <I2S_32::isr32()+0x90>)
      88:	ldr	r1, [pc, #140]	; (118 <I2S_32::isr32()+0x94>)
}
      8a:	push	{r4, r5, r6, lr}
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
			break;
      8c:	ldr	r4, [r2, #0]
      8e:	ldrb	r0, [r2, #4]
      90:	ldr	r2, [r4, #16]
      92:	strb	r0, [r1, #31]
  if (from.m_fFile) {
    m_fFile = new (m_fileMem) FatFile;
    *m_fFile = *from.m_fFile;
  } else if (from.m_xFile) {
    m_xFile = new (m_fileMem) ExFatFile;
    *m_xFile = *from.m_xFile;
      94:	cmp	r2, r3
  }
  return *this;
}
      96:	bcs.n	b0 <I2S_32::isr32()+0x2c>
      98:	ldr	r2, [pc, #128]	; (11c <I2S_32::isr32()+0x98>)
	dma.enable();

	I2S1_RCSR = I2S_RCSR_RE | I2S_RCSR_BCE | I2S_RCSR_FRDE | I2S_RCSR_FR;
	dma.attachInterrupt(isr);	
#endif	
}
      9a:	ldrb	r2, [r2, #0]
      9c:	cmp	r2, #0
      9e:	beq.n	10a <I2S_32::isr32()+0x86>
      a0:	mov.w	r2, #3758153728	; 0xe000e000
      a4:	movs	r1, #64	; 0x40
      a6:	add.w	lr, r3, #512	; 0x200
      aa:	str.w	r1, [r2, #520]	; 0x208
      ae:	b.n	b6 <I2S_32::isr32()+0x32>
      b0:	mov	lr, r3
      b2:	sub.w	r3, r3, #512	; 0x200
      b6:	ldr	r1, [pc, #104]	; (120 <I2S_32::isr32()+0x9c>)
      b8:	ldr	r2, [pc, #104]	; (124 <I2S_32::isr32()+0xa0>)
      ba:	ldr	r5, [r1, #0]
      bc:	ldr	r0, [r2, #0]
      be:	cbz	r5, 108 <I2S_32::isr32()+0x84>
      c0:	cbz	r0, 108 <I2S_32::isr32()+0x84>
      c2:	ldr	r2, [pc, #100]	; (128 <I2S_32::isr32()+0xa4>)
      c4:	ldrh	r6, [r2, #0]
      c6:	cmp	r6, #64	; 0x40
      c8:	bhi.n	108 <I2S_32::isr32()+0x84>
      ca:	ldr	r1, [pc, #96]	; (12c <I2S_32::isr32()+0xa8>)
  // Maintain count of free clusters.
  updateFreeClusterCount(-count);

  // return first cluster number to caller
  *firstCluster = bgnCluster;
  return true;
      cc:	add.w	ip, r6, #2
	I2S1_RCSR = 0;
	I2S1_RCSR = I2S_RCSR_RE | I2S_RCSR_BCE | I2S_RCSR_FRDE | I2S_RCSR_FR;
	update_responsibility = update_setup();
	dma.attachInterrupt(isr);
#endif
}
      d0:	ldr	r4, [r1, #0]
      d2:	add.w	r1, r6, #64	; 0x40

	I2S2_RCSR |= I2S_RCSR_RE | I2S_RCSR_BCE | I2S_RCSR_FRDE | I2S_RCSR_FR;
	I2S2_TCSR |= I2S_TCSR_TE | I2S_TCSR_BCE;
	dma.attachInterrupt(isr);	

}
      d6:	add.w	r0, r0, ip, lsl #1
      }
    }
  }
  // don't try to delete root
  if (!isRoot()) {
    if (!rmdir()) {
      da:	strh	r1, [r2, #0]
  return writeStop();

fail:
  spiStop();
  return false;
}
      dc:	add.w	ip, r5, ip, lsl #1
  seconds+= (tm.Day-1) * SECS_PER_DAY;
  seconds+= tm.Hour * SECS_PER_HOUR;
  seconds+= tm.Minute * SECS_PER_MIN;
  seconds+= tm.Second;
  return (time_t)seconds; 
}
      e0:	ldr	r2, [r3, #0]
      e2:	ldr	r1, [pc, #76]	; (130 <I2S_32::isr32()+0xac>)
      e4:	str	r2, [r1, #0]
      e6:	b.n	ea <I2S_32::isr32()+0x66>
      e8:	ldr	r2, [r3, #0]
      ea:	ldr	r1, [r3, #4]
      ec:	adds	r3, #8
      ee:	asrs	r2, r4
  seconds += (tm.mday-1) * SECS_PER_DAY;
  seconds += tm.hour * SECS_PER_HOUR;
  seconds += tm.min * SECS_PER_MIN;
  seconds += tm.sec;
  return /*(time_t)*/ seconds;
}
      f0:	asrs	r1, r4
      f2:	cmp	lr, r3
    // Select MCLK
    IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
      & ~(IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL_MASK))
      | (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));

  }
      f4:	strh.w	r2, [ip], #2
      f8:	strh.w	r1, [r0], #2
      fc:	bhi.n	e8 <I2S_32::isr32()+0x64>
      fe:	add.w	r3, r5, r6, lsl #1
     102:	ldr	r2, [pc, #48]	; (134 <I2S_32::isr32()+0xb0>)
acqData=*src;
      do {
        *dest_left++  = (*src++)>>I2S_32::shift; // left side may be 16 or 32 bit
        *dest_right++ = (*src++)>>I2S_32::shift;
      } while (src < end);
srcData=left->data[offset];
     104:	ldrh	r3, [r3, #4]
     106:	strh	r3, [r2, #0]
    }
  }
}
     108:	pop	{r4, r5, r6, pc}
    end = (int32_t *)&i2s_rx_buffer_32[AUDIO_BLOCK_SAMPLES*2];
     10a:	add.w	lr, r3, #512	; 0x200
     10e:	b.n	b6 <I2S_32::isr32()+0x32>
     110:	.word	0x200065bc
     114:	.word	0x20005e8c
     118:	.word	0x400e8000
     11c:	.word	0x20008162
     120:	.word	0x200065b4
     124:	.word	0x200065b8
     128:	.word	0x20008142
     12c:	.word	0x20001488
     130:	.word	0x20006900
     134:	.word	0x2000814e

00000138 <I2S_32::update()>:

void I2S_32::update(void)
{
     138:	push	{r3, r4, r5, r6, r7, lr}
     13a:	mov	r6, r0
  audio_block_t *new_left=NULL, *new_right=NULL, *out_left=NULL, *out_right=NULL;

  // allocate 2 new blocks, but if one fails, allocate neither
  new_left = allocate();
     13c:	bl	c5a8 <AudioStream::allocate()>
  if (new_left != NULL) {
     140:	cbz	r0, 174 <I2S_32::update()+0x3c>
    new_right = allocate();
     142:	mov	r4, r0
     144:	bl	c5a8 <AudioStream::allocate()>
    if (new_right == NULL) {
     148:	mov	r5, r0
     14a:	cbz	r0, 16e <I2S_32::update()+0x36>
      release(new_left);
      new_left = NULL;
    }
  }
  __disable_irq();
     14c:	cpsid	i
  if (block_offset >= AUDIO_BLOCK_SAMPLES) {
     14e:	ldr	r3, [pc, #120]	; (1c8 <I2S_32::update()+0x90>)
     150:	ldrh	r2, [r3, #0]
     152:	cmp	r2, #127	; 0x7f
     154:	bhi.n	186 <I2S_32::update()+0x4e>
    release(out_left);
    transmit(out_right, 1);
    release(out_right);
  } else if (new_left != NULL) {
    // the DMA didn't fill blocks, but we allocated blocks
    if (block_left == NULL) {
     156:	ldr	r1, [pc, #116]	; (1cc <I2S_32::update()+0x94>)
     158:	ldr	r2, [r1, #0]
     15a:	cbz	r2, 1ba <I2S_32::update()+0x82>
      block_right = new_right;
      block_offset = 0;
      __enable_irq();
    } else {
      // the DMA already has blocks, doesn't need these
      __enable_irq();
     15c:	cpsie	i
      release(new_left);
     15e:	mov	r0, r4
     160:	bl	c654 <AudioStream::release(audio_block_struct*)>
      release(new_right);
     164:	mov	r0, r5
    // The DMA didn't fill blocks, and we could not allocate
    // memory... the system is likely starving for memory!
    // Sadly, there's nothing we can do.
    __enable_irq();
  }
}
     166:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      release(new_right);
     16a:	b.w	c654 <AudioStream::release(audio_block_struct*)>
      release(new_left);
     16e:	mov	r0, r4
     170:	bl	c654 <AudioStream::release(audio_block_struct*)>
  __disable_irq();
     174:	cpsid	i
  if (block_offset >= AUDIO_BLOCK_SAMPLES) {
     176:	ldr	r3, [pc, #80]	; (1c8 <I2S_32::update()+0x90>)
     178:	ldrh	r2, [r3, #0]
     17a:	cmp	r2, #127	; 0x7f
     17c:	bhi.n	182 <I2S_32::update()+0x4a>
    __enable_irq();
     17e:	cpsie	i
}
     180:	pop	{r3, r4, r5, r6, r7, pc}
  audio_block_t *new_left=NULL, *new_right=NULL, *out_left=NULL, *out_right=NULL;
     182:	movs	r5, #0
  new_left = allocate();
     184:	mov	r4, r5
    out_left = block_left;
     186:	ldr	r0, [pc, #68]	; (1cc <I2S_32::update()+0x94>)
    block_offset = 0;
     188:	movs	r2, #0
    out_right = block_right;
     18a:	ldr	r1, [pc, #68]	; (1d0 <I2S_32::update()+0x98>)
    out_left = block_left;
     18c:	ldr	r7, [r0, #0]
    block_offset = 0;
     18e:	strh	r2, [r3, #0]
    block_left = new_left;
     190:	str	r4, [r0, #0]
    out_right = block_right;
     192:	ldr	r4, [r1, #0]
    block_right = new_right;
     194:	str	r5, [r1, #0]
    __enable_irq();
     196:	cpsie	i
    transmit(out_left, 0);
     198:	mov	r1, r7
     19a:	mov	r0, r6
     19c:	bl	c6a4 <AudioStream::transmit(audio_block_struct*, unsigned char)>
    release(out_left);
     1a0:	mov	r0, r7
     1a2:	bl	c654 <AudioStream::release(audio_block_struct*)>
    transmit(out_right, 1);
     1a6:	mov	r0, r6
     1a8:	mov	r1, r4
     1aa:	movs	r2, #1
     1ac:	bl	c6a4 <AudioStream::transmit(audio_block_struct*, unsigned char)>
    release(out_right);
     1b0:	mov	r0, r4
}
     1b2:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    release(out_right);
     1b6:	b.w	c654 <AudioStream::release(audio_block_struct*)>
      block_left = new_left;
     1ba:	str	r4, [r1, #0]
      block_right = new_right;
     1bc:	ldr	r1, [pc, #16]	; (1d0 <I2S_32::update()+0x98>)
      block_offset = 0;
     1be:	strh	r2, [r3, #0]
      block_right = new_right;
     1c0:	str	r0, [r1, #0]
      __enable_irq();
     1c2:	cpsie	i
}
     1c4:	pop	{r3, r4, r5, r6, r7, pc}
     1c6:	nop
     1c8:	.word	0x20008142
     1cc:	.word	0x200065b4
     1d0:	.word	0x200065b8

000001d4 <SDFile::close()>:
	virtual void close() {
     1d4:	push	{r4, lr}
     1d6:	mov	r4, r0
		if (filename) {
     1d8:	ldr	r0, [r0, #88]	; 0x58
     1da:	cbz	r0, 1e4 <SDFile::close()+0x10>
			free(filename);
     1dc:	bl	d250 <free>
			filename = nullptr;
     1e0:	movs	r3, #0
     1e2:	str	r3, [r4, #88]	; 0x58
     1e4:	ldr	r3, [r4, #80]	; 0x50
     1e6:	cbz	r3, 1f4 <SDFile::close()+0x20>
			sdfatfile.close();
     1e8:	add.w	r0, r4, #24
	}
     1ec:	ldmia.w	sp!, {r4, lr}
			sdfatfile.close();
     1f0:	b.w	778c <FsBaseFile::close()>
     1f4:	ldr	r3, [r4, #84]	; 0x54
     1f6:	cmp	r3, #0
     1f8:	bne.n	1e8 <SDFile::close()+0x14>
	}
     1fa:	pop	{r4, pc}

000001fc <DMAChannel::~DMAChannel()>:
	}
	DMAChannel & operator = (const DMASetting &rhs) {
		copy_tcd(TCD, rhs.TCD);
		return *this;
	}
	~DMAChannel() {
     1fc:	push	{r4, lr}
     1fe:	mov	r4, r0
		release();
     200:	bl	c374 <DMAChannel::release()>
	}
     204:	mov	r0, r4
     206:	pop	{r4, pc}

00000208 <SDFile::name()>:
	virtual const char * name() {
     208:	push	{r4, lr}
     20a:	mov	r4, r0
		if (!filename) {
     20c:	ldr	r0, [r0, #88]	; 0x58
     20e:	cbz	r0, 212 <SDFile::name()+0xa>
				static char zeroterm = 0;
				filename = &zeroterm;
			}
		}
		return filename;
	}
     210:	pop	{r4, pc}
			filename = (char *)malloc(MAX_FILENAME_LEN);
     212:	mov.w	r0, #256	; 0x100
     216:	bl	d240 <malloc>
     21a:	str	r0, [r4, #88]	; 0x58
			if (filename) {
     21c:	cbz	r0, 24c <SDFile::name()+0x44>
    *name = 0;
     21e:	movs	r2, #0
    return m_fFile   ? m_fFile->getName(name, len)
     220:	ldr	r3, [r4, #80]	; 0x50
    *name = 0;
     222:	strb	r2, [r0, #0]
    return m_fFile   ? m_fFile->getName(name, len)
     224:	cbz	r3, 236 <SDFile::name()+0x2e>
     226:	mov	r1, r0
     228:	mov.w	r2, #256	; 0x100
     22c:	mov	r0, r3
     22e:	bl	5aac <FatFile::getName(char*, unsigned int)>
		return filename;
     232:	ldr	r0, [r4, #88]	; 0x58
	}
     234:	pop	{r4, pc}
     236:	ldr	r3, [r4, #84]	; 0x54
           : m_xFile ? m_xFile->getName(name, len)
     238:	cmp	r3, #0
     23a:	beq.n	210 <SDFile::name()+0x8>
   */
  size_t getName(char* name, size_t size) {
#if USE_UTF8_LONG_NAMES
    return getName8(name, size);
#else   // USE_UTF8_LONG_NAMES
    return getName7(name, size);
     23c:	mov	r1, r0
     23e:	mov.w	r2, #256	; 0x100
     242:	mov	r0, r3
     244:	bl	3a2c <ExFatFile::getName7(char*, unsigned int)>
		return filename;
     248:	ldr	r0, [r4, #88]	; 0x58
	}
     24a:	pop	{r4, pc}
				filename = &zeroterm;
     24c:	ldr	r3, [pc, #4]	; (254 <SDFile::name()+0x4c>)
     24e:	mov	r0, r3
     250:	str	r3, [r4, #88]	; 0x58
	}
     252:	pop	{r4, pc}
     254:	.word	0x20008164

00000258 <SDFile::truncate(unsigned long long)>:
	virtual bool truncate(uint64_t size=0) {
     258:	push	{r3, r4, r5, lr}
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint64_t length) {
    return m_fFile   ? length < (1ULL << 32) && m_fFile->truncate(length)
     25a:	ldr	r5, [r0, #80]	; 0x50
     25c:	cbz	r5, 27a <SDFile::truncate(unsigned long long)+0x22>
     25e:	cbz	r3, 264 <SDFile::truncate(unsigned long long)+0xc>
	}
     260:	movs	r0, #0
     262:	pop	{r3, r4, r5, pc}
   *
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint32_t length) { return seekSet(length) && truncate(); }
     264:	mov	r1, r2
     266:	mov	r0, r5
     268:	bl	6564 <FatFile::seekSet(unsigned long)>
     26c:	cmp	r0, #0
     26e:	beq.n	260 <SDFile::truncate(unsigned long long)+0x8>
     270:	mov	r0, r5
     272:	ldmia.w	sp!, {r3, r4, r5, lr}
     276:	b.w	68b0 <FatFile::truncate()>
     27a:	ldr	r4, [r0, #84]	; 0x54
           : m_xFile ? m_xFile->truncate(length)
     27c:	cmp	r4, #0
     27e:	beq.n	260 <SDFile::truncate(unsigned long long)+0x8>
   *
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint64_t length) { return seekSet(length) && truncate(); }
     280:	mov	r0, r4
     282:	bl	3e40 <ExFatFile::seekSet(unsigned long long)>
     286:	cmp	r0, #0
     288:	beq.n	260 <SDFile::truncate(unsigned long long)+0x8>
     28a:	mov	r0, r4
     28c:	ldmia.w	sp!, {r3, r4, r5, lr}
     290:	b.w	5088 <ExFatFile::truncate()>

00000294 <SDFile::setModifyTime(DateTimeFields const&)>:
		if (tm.year < 80 || tm.year > 207) return false;
		return sdfatfile.timestamp(T_CREATE, tm.year + 1900, tm.mon + 1,
			tm.mday, tm.hour, tm.min, tm.sec);
	}
	virtual bool setModifyTime(const DateTimeFields &tm) {
		if (tm.year < 80 || tm.year > 207) return false;
     294:	ldrb	r2, [r1, #6]
     296:	sub.w	r3, r2, #80	; 0x50
     29a:	lsls	r3, r3, #24
     29c:	bmi.n	2e4 <SDFile::setModifyTime(DateTimeFields const&)+0x50>
		return sdfatfile.timestamp(T_WRITE, tm.year + 1900, tm.mon + 1,
     29e:	addw	r2, r2, #1900	; 0x76c
	virtual bool setModifyTime(const DateTimeFields &tm) {
     2a2:	push	{r4, r5, r6, r7, lr}
		return sdfatfile.timestamp(T_WRITE, tm.year + 1900, tm.mon + 1,
     2a4:	ldrb	r3, [r1, #5]
	virtual bool setModifyTime(const DateTimeFields &tm) {
     2a6:	sub	sp, #20
    return m_fFile   ? m_fFile->timestamp(flags, year, month, day, hour, minute,
     2a8:	ldr	r4, [r0, #80]	; 0x50
		return sdfatfile.timestamp(T_WRITE, tm.year + 1900, tm.mon + 1,
     2aa:	adds	r3, #1
			tm.mday, tm.hour, tm.min, tm.sec);
     2ac:	ldrb	r5, [r1, #4]
     2ae:	ldrb	r6, [r1, #2]
     2b0:	ldrb	r7, [r1, #1]
		return sdfatfile.timestamp(T_WRITE, tm.year + 1900, tm.mon + 1,
     2b2:	uxtb	r3, r3
			tm.mday, tm.hour, tm.min, tm.sec);
     2b4:	ldrb	r1, [r1, #0]
     2b6:	cbz	r4, 2cc <SDFile::setModifyTime(DateTimeFields const&)+0x38>
     2b8:	mov	r0, r4
     2ba:	str	r6, [sp, #4]
     2bc:	str	r5, [sp, #0]
     2be:	strd	r7, r1, [sp, #8]
     2c2:	movs	r1, #4
     2c4:	bl	67d8 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
	}
     2c8:	add	sp, #20
     2ca:	pop	{r4, r5, r6, r7, pc}
     2cc:	ldr	r0, [r0, #84]	; 0x54
           : m_xFile ? m_xFile->timestamp(flags, year, month, day, hour, minute,
     2ce:	cmp	r0, #0
     2d0:	beq.n	2c8 <SDFile::setModifyTime(DateTimeFields const&)+0x34>
     2d2:	str	r6, [sp, #4]
     2d4:	str	r5, [sp, #0]
     2d6:	strd	r7, r1, [sp, #8]
     2da:	movs	r1, #4
     2dc:	bl	4f10 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
     2e0:	add	sp, #20
     2e2:	pop	{r4, r5, r6, r7, pc}
		if (tm.year < 80 || tm.year > 207) return false;
     2e4:	movs	r0, #0
	}
     2e6:	bx	lr

000002e8 <SDFile::rewindDirectory()>:
	virtual void rewindDirectory(void) {
     2e8:	push	{r4, lr}
     2ea:	mov	r4, r0
    return m_fFile ? m_fFile->isDir() : m_xFile ? m_xFile->isDir() : false;
     2ec:	ldr	r0, [r0, #80]	; 0x50
     2ee:	cbz	r0, 312 <SDFile::rewindDirectory()+0x2a>
   * If an error occurs or end of file is reached return -1.
   */
  int read() { return BaseFile::read(); }
  /** Rewind a file if it is a directory */
  void rewindDirectory() {
    if (BaseFile::isDir()) {
     2f0:	ldrb	r3, [r0, #0]
     2f2:	tst.w	r3, #208	; 0xd0
     2f6:	bne.n	2fa <SDFile::rewindDirectory()+0x12>
	}
     2f8:	pop	{r4, pc}
  void rewind() { seekSet(0); }
     2fa:	movs	r1, #0
     2fc:	bl	6564 <FatFile::seekSet(unsigned long)>
    if (m_xFile) m_xFile->rewind();
     300:	ldr	r0, [r4, #84]	; 0x54
     302:	cmp	r0, #0
     304:	beq.n	2f8 <SDFile::rewindDirectory()+0x10>
  void rewind() { seekSet(0); }
     306:	movs	r2, #0
     308:	movs	r3, #0
     30a:	ldmia.w	sp!, {r4, lr}
     30e:	b.w	3e40 <ExFatFile::seekSet(unsigned long long)>
     312:	ldr	r0, [r4, #84]	; 0x54
    return m_fFile ? m_fFile->isDir() : m_xFile ? m_xFile->isDir() : false;
     314:	cmp	r0, #0
     316:	beq.n	2f8 <SDFile::rewindDirectory()+0x10>
     318:	ldrb.w	r3, [r0, #49]	; 0x31
     31c:	tst.w	r3, #80	; 0x50
     320:	beq.n	2f8 <SDFile::rewindDirectory()+0x10>
     322:	movs	r2, #0
     324:	movs	r3, #0
     326:	ldmia.w	sp!, {r4, lr}
     32a:	b.w	3e40 <ExFatFile::seekSet(unsigned long long)>
			while (awidth) {
				*buf++ = ' ';
				awidth--;
			}
		}
		if (copysignf(1.0f, val)<0) *buf++ = '-';
     32e:	nop

00000330 <SDFile::getModifyTime(DateTimeFields&)>:
    return m_fFile   ? m_fFile->getModifyDateTime(pdate, ptime)
     330:	ldr	r3, [r0, #80]	; 0x50
	virtual bool getModifyTime(DateTimeFields &tm) {
     332:	push	{r4, lr}
     334:	mov	r4, r1
     336:	sub	sp, #8
     338:	cbz	r3, 386 <SDFile::getModifyTime(DateTimeFields&)+0x56>
     33a:	add.w	r2, sp, #6
     33e:	add	r1, sp, #4
     340:	mov	r0, r3
     342:	bl	5ccc <FatFile::getModifyDateTime(unsigned short*, unsigned short*)>
		if (!sdfatfile.getModifyDateTime(&fat_date, &fat_time)) return false;
     346:	cbz	r0, 398 <SDFile::getModifyTime(DateTimeFields&)+0x68>
		if ((fat_date == 0) && (fat_time == 0)) return false;
     348:	ldrh.w	r3, [sp, #4]
     34c:	ldrh.w	r2, [sp, #6]
     350:	orrs.w	r1, r3, r2
     354:	beq.n	398 <SDFile::getModifyTime(DateTimeFields&)+0x68>
 * \param[in] fatTime Time in packed dir format.
 *
 * \return Extracted minute [0,59]
 */
static inline uint8_t FS_MINUTE(uint16_t fatTime) {
  return (fatTime >> 5) & 0X3F;
     356:	ubfx	ip, r2, #5, #6
 * \param[in] fatTime Time in packed dir format.
 *
 * \return Extracted second [0,58]
 */
static inline uint8_t FS_SECOND(uint16_t fatTime) {
  return 2 * (fatTime & 0X1F);
     35a:	and.w	r0, r2, #31
static inline uint8_t FS_HOUR(uint16_t fatTime) { return fatTime >> 11; }
     35e:	lsrs	r2, r2, #11
  return (fatDate >> 5) & 0XF;
     360:	ubfx	r1, r3, #5, #4
  return 2 * (fatTime & 0X1F);
     364:	lsls	r0, r0, #1
		tm.min = FS_MINUTE(fat_time);
     366:	strb.w	ip, [r4, #1]
static inline uint8_t FS_HOUR(uint16_t fatTime) { return fatTime >> 11; }
     36a:	strb	r2, [r4, #2]
  return 1980 + (fatDate >> 9);
     36c:	lsrs	r2, r3, #9
		tm.mon = FS_MONTH(fat_date) - 1;
     36e:	subs	r1, #1
static inline uint8_t FS_DAY(uint16_t fatDate) { return fatDate & 0X1F; }
     370:	and.w	r3, r3, #31
		tm.year = FS_YEAR(fat_date) - 1900;
     374:	add.w	r2, r2, #1872	; 0x750
		tm.sec = FS_SECOND(fat_time);
     378:	strb	r0, [r4, #0]
		return true;
     37a:	movs	r0, #1
		tm.mon = FS_MONTH(fat_date) - 1;
     37c:	strb	r1, [r4, #5]
		tm.mday = FS_DAY(fat_date);
     37e:	strb	r3, [r4, #4]
		tm.year = FS_YEAR(fat_date) - 1900;
     380:	strb	r2, [r4, #6]
	}
     382:	add	sp, #8
     384:	pop	{r4, pc}
     386:	ldr	r0, [r0, #84]	; 0x54
           : m_xFile ? m_xFile->getModifyDateTime(pdate, ptime)
     388:	cbz	r0, 398 <SDFile::getModifyTime(DateTimeFields&)+0x68>
     38a:	add.w	r2, sp, #6
     38e:	add	r1, sp, #4
     390:	bl	3b88 <ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)>
     394:	cmp	r0, #0
     396:	bne.n	348 <SDFile::getModifyTime(DateTimeFields&)+0x18>
		if (!sdfatfile.getModifyDateTime(&fat_date, &fat_time)) return false;
     398:	movs	r0, #0
	}
     39a:	add	sp, #8
     39c:	pop	{r4, pc}
			return 0;
		}
		if (type1 == 0x08 && type2 == 0x08) {
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
			if (usb_midi_handleNoteOff)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
     39e:	nop

000003a0 <SDFile::getCreateTime(DateTimeFields&)>:
    return m_fFile   ? m_fFile->getCreateDateTime(pdate, ptime)
     3a0:	ldr	r3, [r0, #80]	; 0x50
	virtual bool getCreateTime(DateTimeFields &tm) {
     3a2:	push	{r4, lr}
     3a4:	mov	r4, r1
     3a6:	sub	sp, #8
     3a8:	cbz	r3, 3f6 <SDFile::getCreateTime(DateTimeFields&)+0x56>
     3aa:	add.w	r2, sp, #6
     3ae:	add	r1, sp, #4
     3b0:	mov	r0, r3
     3b2:	bl	5cac <FatFile::getCreateDateTime(unsigned short*, unsigned short*)>
		if (!sdfatfile.getCreateDateTime(&fat_date, &fat_time)) return false;
     3b6:	cbz	r0, 408 <SDFile::getCreateTime(DateTimeFields&)+0x68>
		if ((fat_date == 0) && (fat_time == 0)) return false;
     3b8:	ldrh.w	r3, [sp, #4]
     3bc:	ldrh.w	r2, [sp, #6]
     3c0:	orrs.w	r1, r3, r2
     3c4:	beq.n	408 <SDFile::getCreateTime(DateTimeFields&)+0x68>
  return (fatTime >> 5) & 0X3F;
     3c6:	ubfx	ip, r2, #5, #6
  return 2 * (fatTime & 0X1F);
     3ca:	and.w	r0, r2, #31
static inline uint8_t FS_HOUR(uint16_t fatTime) { return fatTime >> 11; }
     3ce:	lsrs	r2, r2, #11
  return (fatDate >> 5) & 0XF;
     3d0:	ubfx	r1, r3, #5, #4
  return 2 * (fatTime & 0X1F);
     3d4:	lsls	r0, r0, #1
		tm.min = FS_MINUTE(fat_time);
     3d6:	strb.w	ip, [r4, #1]
static inline uint8_t FS_HOUR(uint16_t fatTime) { return fatTime >> 11; }
     3da:	strb	r2, [r4, #2]
  return 1980 + (fatDate >> 9);
     3dc:	lsrs	r2, r3, #9
		tm.mon = FS_MONTH(fat_date) - 1;
     3de:	subs	r1, #1
static inline uint8_t FS_DAY(uint16_t fatDate) { return fatDate & 0X1F; }
     3e0:	and.w	r3, r3, #31
		tm.year = FS_YEAR(fat_date) - 1900;
     3e4:	add.w	r2, r2, #1872	; 0x750
		tm.sec = FS_SECOND(fat_time);
     3e8:	strb	r0, [r4, #0]
		return true;
     3ea:	movs	r0, #1
		tm.mon = FS_MONTH(fat_date) - 1;
     3ec:	strb	r1, [r4, #5]
		tm.mday = FS_DAY(fat_date);
     3ee:	strb	r3, [r4, #4]
		tm.year = FS_YEAR(fat_date) - 1900;
     3f0:	strb	r2, [r4, #6]
	}
     3f2:	add	sp, #8
     3f4:	pop	{r4, pc}
     3f6:	ldr	r0, [r0, #84]	; 0x54
           : m_xFile ? m_xFile->getCreateDateTime(pdate, ptime)
     3f8:	cbz	r0, 408 <SDFile::getCreateTime(DateTimeFields&)+0x68>
     3fa:	add.w	r2, sp, #6
     3fe:	add	r1, sp, #4
     400:	bl	3b64 <ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)>
     404:	cmp	r0, #0
     406:	bne.n	3b8 <SDFile::getCreateTime(DateTimeFields&)+0x18>
		if (!sdfatfile.getCreateDateTime(&fat_date, &fat_time)) return false;
     408:	movs	r0, #0
	}
     40a:	add	sp, #8
     40c:	pop	{r4, pc}
			#endif //defined(AUDIO_PT8211_INTERPOLATION_LINEAR)
		#else
			memcpy_tointerleaveL(dest, blockL->data + offsetL);
			offsetL += (AUDIO_BLOCK_SAMPLES / 2);
		#endif //defined(AUDIO_PT8211_OVERSAMPLING)
	} else if (blockR) {
     40e:	nop

00000410 <File::available()>:
	size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
	}
	// Returns the number of bytes which may be read from a file
	int available() {
		return (f) ? f->available() : 0;
     410:	ldr	r0, [r0, #16]
     412:	cbz	r0, 43a <File::available()+0x2a>
     414:	ldr	r3, [r0, #0]
     416:	ldr	r2, [pc, #84]	; (46c <File::available()+0x5c>)
     418:	ldr	r3, [r3, #16]
     41a:	cmp	r3, r2
     41c:	bne.n	46a <File::available()+0x5a>
    return m_fFile ? m_fFile->available() : m_xFile ? m_xFile->available() : 0;
     41e:	ldr	r3, [r0, #80]	; 0x50
     420:	cbz	r3, 43c <File::available()+0x2c>
    return isFile() ? fileSize() - curPosition() : 0;
     422:	ldrb	r0, [r3, #0]
     424:	ands.w	r0, r0, #8
     428:	beq.n	43a <File::available()+0x2a>
     42a:	ldr	r0, [r3, #28]
     42c:	ldr	r3, [r3, #20]
    return n > INT_MAX ? INT_MAX : n;
     42e:	subs	r0, r0, r3
     430:	it	mi
     432:	mvnmi.w	r0, #2147483648	; 0x80000000
     436:	bx	lr
     438:	mov	r0, r3
	}
     43a:	bx	lr
     43c:	ldr	r3, [r0, #84]	; 0x54
     43e:	cmp	r3, #0
     440:	beq.n	438 <File::available()+0x28>
  uint64_t available64() { return isFile() ? fileSize() - curPosition() : 0; }
     442:	ldrb.w	r0, [r3, #49]	; 0x31
     446:	ands.w	r0, r0, #8
     44a:	beq.n	43a <File::available()+0x2a>
     44c:	ldr	r0, [r3, #16]
     44e:	ldr	r1, [r3, #0]
     450:	ldr	r2, [r3, #20]
     452:	subs	r0, r0, r1
     454:	ldr	r3, [r3, #4]
     456:	sbc.w	r3, r2, r3
    return n > INT_MAX ? INT_MAX : n;
     45a:	cmp.w	r0, #2147483648	; 0x80000000
     45e:	sbcs.w	r3, r3, #0
     462:	bcc.n	43a <File::available()+0x2a>
     464:	mvn.w	r0, #2147483648	; 0x80000000
     468:	bx	lr
		return (f) ? f->available() : 0;
     46a:	bx	r3
     46c:	.word	0x000007d9

00000470 <File::peek()>:
	int peek() {
		return (f) ? f->peek() : -1;
     470:	ldr	r3, [r0, #16]
     472:	cbz	r3, 492 <File::peek()+0x22>
     474:	ldr	r2, [r3, #0]
     476:	ldr	r1, [pc, #32]	; (498 <File::peek()+0x28>)
     478:	ldr	r2, [r2, #20]
     47a:	cmp	r2, r1
     47c:	bne.n	48e <File::peek()+0x1e>
    return m_fFile ? m_fFile->peek() : m_xFile ? m_xFile->peek() : -1;
     47e:	ldr	r0, [r3, #80]	; 0x50
     480:	cbz	r0, 486 <File::peek()+0x16>
     482:	b.w	627c <FatFile::peek()>
     486:	ldr	r0, [r3, #84]	; 0x54
     488:	cbz	r0, 492 <File::peek()+0x22>
     48a:	b.w	3e14 <ExFatFile::peek()>
     48e:	mov	r0, r3
     490:	bx	r2
	}
     492:	mov.w	r0, #4294967295
     496:	bx	lr
     498:	.word	0x00000671

0000049c <File::flush()>:
	void flush() {
		if (f) f->flush();
     49c:	ldr	r3, [r0, #16]
     49e:	cbz	r3, 4ba <File::flush()+0x1e>
     4a0:	ldr	r2, [r3, #0]
     4a2:	ldr	r1, [pc, #28]	; (4c0 <File::flush()+0x24>)
     4a4:	ldr	r2, [r2, #24]
     4a6:	cmp	r2, r1
     4a8:	bne.n	4bc <File::flush()+0x20>
    return m_fFile ? m_fFile->sync() : m_xFile ? m_xFile->sync() : false;
     4aa:	ldr	r0, [r3, #80]	; 0x50
     4ac:	cbz	r0, 4b2 <File::flush()+0x16>
     4ae:	b.w	67cc <FatFile::sync()>
     4b2:	ldr	r0, [r3, #84]	; 0x54
     4b4:	cbz	r0, 4ba <File::flush()+0x1e>
     4b6:	b.w	4c28 <ExFatFile::sync()>
	}
     4ba:	bx	lr
		if (f) f->flush();
     4bc:	mov	r0, r3
     4be:	bx	r2
     4c0:	.word	0x00000715

000004c4 <File::read()>:
	}
	bool seek(uint64_t pos) {
		return seek(pos, SeekSet);
	}
	int read() {
		if (!f) return -1;
     4c4:	ldr	r3, [r0, #16]
     4c6:	cbz	r3, 512 <File::read()+0x4e>
		unsigned char b;
		if (f->read(&b, 1) < 1) return -1;
     4c8:	ldr	r1, [r3, #0]
     4ca:	ldr	r2, [pc, #76]	; (518 <File::read()+0x54>)
	int read() {
     4cc:	push	{r4, lr}
		if (f->read(&b, 1) < 1) return -1;
     4ce:	ldr	r4, [r1, #8]
	int read() {
     4d0:	sub	sp, #8
     4d2:	cmp	r4, r2
     4d4:	bne.n	500 <File::read()+0x3c>
    return m_fFile   ? m_fFile->read(buf, count)
     4d6:	ldr	r0, [r3, #80]	; 0x50
     4d8:	cbz	r0, 4ee <File::read()+0x2a>
     4da:	movs	r2, #1
     4dc:	add.w	r1, sp, #7
     4e0:	bl	60d4 <FatFile::read(void*, unsigned int)>
		if (f->read(&b, 1) < 1) return -1;
     4e4:	cbz	r0, 50c <File::read()+0x48>
		return b;
     4e6:	ldrb.w	r0, [sp, #7]
	}
     4ea:	add	sp, #8
     4ec:	pop	{r4, pc}
     4ee:	ldr	r0, [r3, #84]	; 0x54
           : m_xFile ? m_xFile->read(buf, count)
     4f0:	cmp	r0, #0
     4f2:	beq.n	4e6 <File::read()+0x22>
     4f4:	movs	r2, #1
     4f6:	add.w	r1, sp, #7
     4fa:	bl	3c74 <ExFatFile::read(void*, unsigned int)>
     4fe:	b.n	4e4 <File::read()+0x20>
		if (f->read(&b, 1) < 1) return -1;
     500:	movs	r2, #1
     502:	add.w	r1, sp, #7
     506:	mov	r0, r3
     508:	blx	r4
     50a:	b.n	4e4 <File::read()+0x20>
		if (!f) return -1;
     50c:	mov.w	r0, #4294967295
     510:	b.n	4ea <File::read()+0x26>
     512:	mov.w	r0, #4294967295
	}
     516:	bx	lr
     518:	.word	0x000006b1

0000051c <File::write(unsigned char)>:
	size_t write(uint8_t b) {
     51c:	push	{lr}
		return (f) ? f->write(&b, 1) : 0;
     51e:	ldr	r0, [r0, #16]
	size_t write(uint8_t b) {
     520:	sub	sp, #12
     522:	strb.w	r1, [sp, #7]
		return (f) ? f->write(&b, 1) : 0;
     526:	cbz	r0, 542 <File::write(unsigned char)+0x26>
     528:	ldr	r3, [r0, #0]
     52a:	ldr	r2, [pc, #64]	; (56c <File::write(unsigned char)+0x50>)
     52c:	ldr	r3, [r3, #12]
     52e:	cmp	r3, r2
     530:	bne.n	55e <File::write(unsigned char)+0x42>
   *
   * \return For success write() returns the number of bytes written, always
   * \a nbyte.  If an error occurs, write() returns zero and writeError is set.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile   ? m_fFile->write(buf, count)
     532:	ldr	r3, [r0, #80]	; 0x50
     534:	cbz	r3, 548 <File::write(unsigned char)+0x2c>
     536:	movs	r2, #1
     538:	add.w	r1, sp, #7
     53c:	mov	r0, r3
     53e:	bl	6924 <FatFile::write(void const*, unsigned int)>
	}
     542:	add	sp, #12
     544:	ldr.w	pc, [sp], #4
     548:	ldr	r0, [r0, #84]	; 0x54
           : m_xFile ? m_xFile->write(buf, count)
     54a:	cmp	r0, #0
     54c:	beq.n	542 <File::write(unsigned char)+0x26>
     54e:	movs	r2, #1
     550:	add.w	r1, sp, #7
     554:	bl	516c <ExFatFile::write(void const*, unsigned int)>
     558:	add	sp, #12
     55a:	ldr.w	pc, [sp], #4
		return (f) ? f->write(&b, 1) : 0;
     55e:	movs	r2, #1
     560:	add.w	r1, sp, #7
     564:	blx	r3
	}
     566:	add	sp, #12
     568:	ldr.w	pc, [sp], #4
     56c:	.word	0x0000073d

00000570 <SDFile::position()>:
    return m_fFile   ? m_fFile->curPosition()
     570:	ldr	r3, [r0, #80]	; 0x50
     572:	cbz	r3, 57a <SDFile::position()+0xa>
     574:	ldr	r0, [r3, #20]
     576:	movs	r1, #0
     578:	bx	lr
     57a:	ldr	r3, [r0, #84]	; 0x54
           : m_xFile ? m_xFile->curPosition()
     57c:	cbz	r3, 584 <SDFile::position()+0x14>
  uint64_t curPosition() const { return m_curPosition; }
     57e:	ldrd	r0, r1, [r3]
     582:	bx	lr
     584:	mov	r0, r3
     586:	mov	r1, r3
	}
     588:	bx	lr
     58a:	nop

0000058c <SDFile::size()>:
    return m_fFile ? m_fFile->fileSize() : m_xFile ? m_xFile->fileSize() : 0;
     58c:	ldr	r3, [r0, #80]	; 0x50
     58e:	cbz	r3, 596 <SDFile::size()+0xa>
     590:	ldr	r0, [r3, #28]
     592:	movs	r1, #0
     594:	bx	lr
     596:	ldr	r3, [r0, #84]	; 0x54
     598:	cbz	r3, 5a0 <SDFile::size()+0x14>
  uint64_t fileSize() const { return m_validLength; }
     59a:	ldrd	r0, r1, [r3, #16]
     59e:	bx	lr
     5a0:	mov	r0, r3
     5a2:	mov	r1, r3
	}
     5a4:	bx	lr
     5a6:	nop

000005a8 <SDFile::openNextFile(unsigned char)>:
	virtual File openNextFile(uint8_t mode=0) {
     5a8:	push	{r4, r5, r6, r7, lr}
     5aa:	sub	sp, #84	; 0x54
	constexpr Print() : write_error(0) {}
     5ac:	movs	r2, #0
#include "Print.h"

class Stream : public Print
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     5ae:	mov.w	r4, #1000	; 0x3e8
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     5b2:	ldr	r7, [pc, #144]	; (644 <SDFile::openNextFile(unsigned char)+0x9c>)
   * \param[in] oflag open flags.
   * \return a FatStream object.
   */
  FsFile openNextFile(oflag_t oflag = O_RDONLY) {
    FsFile tmpFile;
    tmpFile.openNext(this, oflag);
     5b4:	adds	r1, #24
     5b6:	mov	r5, r0
     5b8:	add	r0, sp, #16
     5ba:	strb.w	r2, [sp, #4]
     5be:	str	r4, [sp, #8]
     5c0:	strb.w	r2, [sp, #12]
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     5c4:	str	r7, [sp, #0]
  FsBaseFile() = default;
     5c6:	strd	r2, r2, [sp, #72]	; 0x48
    tmpFile.openNext(this, oflag);
     5ca:	bl	785c <FsBaseFile::openNext(FsBaseFile*, int)>
  bool isOpen() const { return m_fFile || m_xFile; }
     5ce:	ldr	r3, [sp, #72]	; 0x48
     5d0:	cbz	r3, 630 <SDFile::openNextFile(unsigned char)+0x88>
		if (file) return File(new SDFile(file));
     5d2:	movs	r0, #92	; 0x5c
class FileImpl {
     5d4:	movs	r6, #0
     5d6:	bl	d0a8 <operator new(unsigned int)>
class Print
     5da:	ldrb.w	r3, [sp, #4]
     5de:	mov	r4, r0
     5e0:	str	r6, [r0, #4]
     5e2:	strb	r3, [r0, #12]
class StreamFile : public stream_t, public BaseFile {
     5e4:	add	r1, sp, #16
class Stream : public Print
     5e6:	ldr	r3, [sp, #8]
     5e8:	adds	r0, #24
     5ea:	str.w	r3, [r0, #-8]
     5ee:	ldrb.w	r3, [sp, #12]
     5f2:	strb.w	r3, [r0, #-4]
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
     5f6:	ldr	r3, [pc, #80]	; (648 <SDFile::openNextFile(unsigned char)+0xa0>)
     5f8:	str.w	r3, [r0, #-24]
     5fc:	ldr	r3, [pc, #76]	; (64c <SDFile::openNextFile(unsigned char)+0xa4>)
     5fe:	str.w	r3, [r0, #-16]
     602:	bl	7708 <FsBaseFile::FsBaseFile(FsBaseFile const&)>
	File(FileImpl *file) {
     606:	ldr	r3, [pc, #72]	; (650 <SDFile::openNextFile(unsigned char)+0xa8>)
	constexpr Stream() : _timeout(1000), read_error(0) {}
     608:	mov.w	r2, #1000	; 0x3e8
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     60c:	str	r7, [r4, #8]
     60e:	str	r3, [r5, #0]
		if (f) f->refcount++;
     610:	ldr	r3, [r4, #4]
     612:	str	r6, [r4, #88]	; 0x58
     614:	adds	r3, #1
	constexpr Print() : write_error(0) {}
     616:	strb	r6, [r5, #4]
     618:	strb	r6, [r5, #12]
     61a:	str	r2, [r5, #8]
		f = file;
     61c:	str	r4, [r5, #16]
		if (f) f->refcount++;
     61e:	str	r3, [r4, #4]
     620:	ldr	r3, [pc, #48]	; (654 <SDFile::openNextFile(unsigned char)+0xac>)
  ~FsBaseFile() { close(); }
     622:	add	r0, sp, #16
     624:	str	r3, [sp, #0]
     626:	bl	778c <FsBaseFile::close()>
	}
     62a:	mov	r0, r5
     62c:	add	sp, #84	; 0x54
     62e:	pop	{r4, r5, r6, r7, pc}
  bool isOpen() const { return m_fFile || m_xFile; }
     630:	ldr	r3, [sp, #76]	; 0x4c
     632:	cmp	r3, #0
     634:	bne.n	5d2 <SDFile::openNextFile(unsigned char)+0x2a>
	constexpr File() : f(nullptr) { }
     636:	ldr	r2, [pc, #24]	; (650 <SDFile::openNextFile(unsigned char)+0xa8>)
     638:	strb	r3, [r5, #4]
     63a:	str	r4, [r5, #8]
     63c:	strb	r3, [r5, #12]
     63e:	str	r2, [r5, #0]
     640:	str	r3, [r5, #16]
     642:	b.n	620 <SDFile::openNextFile(unsigned char)+0x78>
     644:	.word	0x20000ab8
     648:	.word	0x20000ae8
     64c:	.word	0x20000b44
     650:	.word	0x20000a8c
     654:	.word	0x2000099c

00000658 <StreamFile<FsBaseFile, unsigned long long>::peek()>:
    return m_fFile ? m_fFile->peek() : m_xFile ? m_xFile->peek() : -1;
     658:	ldr	r3, [r0, #72]	; 0x48
     65a:	cbz	r3, 662 <StreamFile<FsBaseFile, unsigned long long>::peek()+0xa>
     65c:	mov	r0, r3
     65e:	b.w	627c <FatFile::peek()>
     662:	ldr	r0, [r0, #76]	; 0x4c
     664:	cbz	r0, 66a <StreamFile<FsBaseFile, unsigned long long>::peek()+0x12>
     666:	b.w	3e14 <ExFatFile::peek()>
  int peek() { return BaseFile::peek(); }
     66a:	mov.w	r0, #4294967295
     66e:	bx	lr

00000670 <SDFile::peek()>:
     670:	ldr	r3, [r0, #80]	; 0x50
     672:	cbz	r3, 67a <SDFile::peek()+0xa>
     674:	mov	r0, r3
     676:	b.w	627c <FatFile::peek()>
     67a:	ldr	r0, [r0, #84]	; 0x54
     67c:	cbz	r0, 682 <SDFile::peek()+0x12>
     67e:	b.w	3e14 <ExFatFile::peek()>
	}
     682:	mov.w	r0, #4294967295
     686:	bx	lr

00000688 <SDFile::isDirectory()>:
    return m_fFile ? m_fFile->isDir() : m_xFile ? m_xFile->isDir() : false;
     688:	ldr	r3, [r0, #80]	; 0x50
     68a:	cbz	r3, 69a <SDFile::isDirectory()+0x12>
  bool isDir() const { return m_attributes & FILE_ATTR_DIR; }
     68c:	ldrb	r3, [r3, #0]
     68e:	tst.w	r3, #208	; 0xd0
     692:	ite	ne
     694:	movne	r0, #1
     696:	moveq	r0, #0
     698:	bx	lr
     69a:	ldr	r0, [r0, #84]	; 0x54
     69c:	cbz	r0, 6ac <SDFile::isDirectory()+0x24>
     69e:	ldrb.w	r3, [r0, #49]	; 0x31
     6a2:	tst.w	r3, #80	; 0x50
     6a6:	ite	ne
     6a8:	movne	r0, #1
     6aa:	moveq	r0, #0
	}
     6ac:	bx	lr
     6ae:	nop

000006b0 <SDFile::read(void*, unsigned int)>:
    return m_fFile   ? m_fFile->read(buf, count)
     6b0:	ldr	r3, [r0, #80]	; 0x50
     6b2:	cbz	r3, 6ba <SDFile::read(void*, unsigned int)+0xa>
     6b4:	mov	r0, r3
     6b6:	b.w	60d4 <FatFile::read(void*, unsigned int)>
     6ba:	ldr	r0, [r0, #84]	; 0x54
           : m_xFile ? m_xFile->read(buf, count)
     6bc:	cbz	r0, 6c2 <SDFile::read(void*, unsigned int)+0x12>
     6be:	b.w	3c74 <ExFatFile::read(void*, unsigned int)>
	}
     6c2:	mov.w	r0, #4294967295
     6c6:	bx	lr

000006c8 <StreamFile<FsBaseFile, unsigned long long>::read()>:
    return m_fFile   ? m_fFile->read(buf, count)
     6c8:	ldr	r3, [r0, #72]	; 0x48
  int read() { return BaseFile::read(); }
     6ca:	push	{lr}
     6cc:	sub	sp, #12
     6ce:	cbz	r3, 6ea <StreamFile<FsBaseFile, unsigned long long>::read()+0x22>
     6d0:	movs	r2, #1
     6d2:	add.w	r1, sp, #7
     6d6:	mov	r0, r3
     6d8:	bl	60d4 <FatFile::read(void*, unsigned int)>
    return read(&b, 1) == 1 ? b : -1;
     6dc:	cmp	r0, #1
     6de:	bne.n	6fa <StreamFile<FsBaseFile, unsigned long long>::read()+0x32>
     6e0:	ldrb.w	r0, [sp, #7]
     6e4:	add	sp, #12
     6e6:	ldr.w	pc, [sp], #4
     6ea:	ldr	r0, [r0, #76]	; 0x4c
           : m_xFile ? m_xFile->read(buf, count)
     6ec:	cbz	r0, 6fa <StreamFile<FsBaseFile, unsigned long long>::read()+0x32>
     6ee:	movs	r2, #1
     6f0:	add.w	r1, sp, #7
     6f4:	bl	3c74 <ExFatFile::read(void*, unsigned int)>
     6f8:	b.n	6dc <StreamFile<FsBaseFile, unsigned long long>::read()+0x14>
    return read(&b, 1) == 1 ? b : -1;
     6fa:	mov.w	r0, #4294967295
     6fe:	b.n	6e4 <StreamFile<FsBaseFile, unsigned long long>::read()+0x1c>

00000700 <StreamFile<FsBaseFile, unsigned long long>::flush()>:
    return m_fFile ? m_fFile->sync() : m_xFile ? m_xFile->sync() : false;
     700:	ldr	r3, [r0, #72]	; 0x48
     702:	cbz	r3, 70a <StreamFile<FsBaseFile, unsigned long long>::flush()+0xa>
     704:	mov	r0, r3
     706:	b.w	67cc <FatFile::sync()>
     70a:	ldr	r0, [r0, #76]	; 0x4c
     70c:	cbz	r0, 712 <StreamFile<FsBaseFile, unsigned long long>::flush()+0x12>
     70e:	b.w	4c28 <ExFatFile::sync()>
  void flush() { BaseFile::sync(); }
     712:	bx	lr

00000714 <SDFile::flush()>:
     714:	ldr	r3, [r0, #80]	; 0x50
     716:	cbz	r3, 71e <SDFile::flush()+0xa>
     718:	mov	r0, r3
     71a:	b.w	67cc <FatFile::sync()>
     71e:	ldr	r0, [r0, #84]	; 0x54
     720:	cbz	r0, 726 <SDFile::flush()+0x12>
     722:	b.w	4c28 <ExFatFile::sync()>
	}
     726:	bx	lr

00000728 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)>:
    return m_fFile   ? m_fFile->write(buf, count)
     728:	ldr	r3, [r0, #72]	; 0x48
     72a:	cbz	r3, 732 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0xa>
     72c:	mov	r0, r3
     72e:	b.w	6924 <FatFile::write(void const*, unsigned int)>
     732:	ldr	r0, [r0, #76]	; 0x4c
           : m_xFile ? m_xFile->write(buf, count)
     734:	cbz	r0, 73a <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0x12>
     736:	b.w	516c <ExFatFile::write(void const*, unsigned int)>
   * \return For success write() returns the number of bytes written, always
   * \a size.
   */
  size_t write(const uint8_t* buffer, size_t size) {
    return BaseFile::write(buffer, size);
  }
     73a:	bx	lr

0000073c <SDFile::write(void const*, unsigned int)>:
    return m_fFile   ? m_fFile->write(buf, count)
     73c:	ldr	r3, [r0, #80]	; 0x50
     73e:	cbz	r3, 746 <SDFile::write(void const*, unsigned int)+0xa>
     740:	mov	r0, r3
     742:	b.w	6924 <FatFile::write(void const*, unsigned int)>
     746:	ldr	r0, [r0, #84]	; 0x54
           : m_xFile ? m_xFile->write(buf, count)
     748:	cbz	r0, 74e <SDFile::write(void const*, unsigned int)+0x12>
     74a:	b.w	516c <ExFatFile::write(void const*, unsigned int)>
	}
     74e:	bx	lr

00000750 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)>:
  size_t write(uint8_t b) { return BaseFile::write(b); }
     750:	push	{lr}
    return m_fFile   ? m_fFile->write(buf, count)
     752:	ldr	r3, [r0, #72]	; 0x48
     754:	sub	sp, #12
     756:	strb.w	r1, [sp, #7]
     75a:	cbz	r3, 76e <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x1e>
     75c:	movs	r2, #1
     75e:	add.w	r1, sp, #7
     762:	mov	r0, r3
     764:	bl	6924 <FatFile::write(void const*, unsigned int)>
     768:	add	sp, #12
     76a:	ldr.w	pc, [sp], #4
     76e:	ldr	r0, [r0, #76]	; 0x4c
           : m_xFile ? m_xFile->write(buf, count)
     770:	cmp	r0, #0
     772:	beq.n	768 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x18>
     774:	movs	r2, #1
     776:	add.w	r1, sp, #7
     77a:	bl	516c <ExFatFile::write(void const*, unsigned int)>
     77e:	add	sp, #12
     780:	ldr.w	pc, [sp], #4

00000784 <SDFile::setCreateTime(DateTimeFields const&)>:
		if (tm.year < 80 || tm.year > 207) return false;
     784:	ldrb	r2, [r1, #6]
     786:	sub.w	r3, r2, #80	; 0x50
     78a:	lsls	r3, r3, #24
     78c:	bmi.n	7d4 <SDFile::setCreateTime(DateTimeFields const&)+0x50>
		return sdfatfile.timestamp(T_CREATE, tm.year + 1900, tm.mon + 1,
     78e:	addw	r2, r2, #1900	; 0x76c
	virtual bool setCreateTime(const DateTimeFields &tm) {
     792:	push	{r4, r5, r6, r7, lr}
		return sdfatfile.timestamp(T_CREATE, tm.year + 1900, tm.mon + 1,
     794:	ldrb	r3, [r1, #5]
	virtual bool setCreateTime(const DateTimeFields &tm) {
     796:	sub	sp, #20
    return m_fFile   ? m_fFile->timestamp(flags, year, month, day, hour, minute,
     798:	ldr	r4, [r0, #80]	; 0x50
		return sdfatfile.timestamp(T_CREATE, tm.year + 1900, tm.mon + 1,
     79a:	adds	r3, #1
			tm.mday, tm.hour, tm.min, tm.sec);
     79c:	ldrb	r5, [r1, #4]
     79e:	ldrb	r6, [r1, #2]
     7a0:	ldrb	r7, [r1, #1]
		return sdfatfile.timestamp(T_CREATE, tm.year + 1900, tm.mon + 1,
     7a2:	uxtb	r3, r3
			tm.mday, tm.hour, tm.min, tm.sec);
     7a4:	ldrb	r1, [r1, #0]
     7a6:	cbz	r4, 7bc <SDFile::setCreateTime(DateTimeFields const&)+0x38>
     7a8:	mov	r0, r4
     7aa:	str	r6, [sp, #4]
     7ac:	str	r5, [sp, #0]
     7ae:	strd	r7, r1, [sp, #8]
     7b2:	movs	r1, #2
     7b4:	bl	67d8 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
	}
     7b8:	add	sp, #20
     7ba:	pop	{r4, r5, r6, r7, pc}
     7bc:	ldr	r0, [r0, #84]	; 0x54
           : m_xFile ? m_xFile->timestamp(flags, year, month, day, hour, minute,
     7be:	cmp	r0, #0
     7c0:	beq.n	7b8 <SDFile::setCreateTime(DateTimeFields const&)+0x34>
     7c2:	str	r6, [sp, #4]
     7c4:	str	r5, [sp, #0]
     7c6:	strd	r7, r1, [sp, #8]
     7ca:	movs	r1, #2
     7cc:	bl	4f10 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
     7d0:	add	sp, #20
     7d2:	pop	{r4, r5, r6, r7, pc}
		if (tm.year < 80 || tm.year > 207) return false;
     7d4:	movs	r0, #0
	}
     7d6:	bx	lr

000007d8 <SDFile::available()>:
    return m_fFile ? m_fFile->available() : m_xFile ? m_xFile->available() : 0;
     7d8:	ldr	r3, [r0, #80]	; 0x50
     7da:	cbz	r3, 7f2 <SDFile::available()+0x1a>
    return isFile() ? fileSize() - curPosition() : 0;
     7dc:	ldrb	r0, [r3, #0]
     7de:	ands.w	r0, r0, #8
     7e2:	beq.n	800 <SDFile::available()+0x28>
     7e4:	ldr	r0, [r3, #28]
     7e6:	ldr	r3, [r3, #20]
    return n > INT_MAX ? INT_MAX : n;
     7e8:	subs	r0, r0, r3
     7ea:	it	mi
     7ec:	mvnmi.w	r0, #2147483648	; 0x80000000
     7f0:	bx	lr
     7f2:	ldr	r3, [r0, #84]	; 0x54
     7f4:	cbz	r3, 820 <SDFile::available()+0x48>
  uint64_t available64() { return isFile() ? fileSize() - curPosition() : 0; }
     7f6:	ldrb.w	r0, [r3, #49]	; 0x31
     7fa:	ands.w	r0, r0, #8
     7fe:	bne.n	802 <SDFile::available()+0x2a>
	}
     800:	bx	lr
     802:	ldr	r0, [r3, #16]
     804:	ldr	r1, [r3, #0]
     806:	ldr	r2, [r3, #20]
     808:	subs	r0, r0, r1
     80a:	ldr	r3, [r3, #4]
     80c:	sbc.w	r3, r2, r3
    return n > INT_MAX ? INT_MAX : n;
     810:	cmp.w	r0, #2147483648	; 0x80000000
     814:	sbcs.w	r3, r3, #0
     818:	bcc.n	800 <SDFile::available()+0x28>
     81a:	mvn.w	r0, #2147483648	; 0x80000000
     81e:	bx	lr
     820:	mov	r0, r3
		return sdfatfile.available();
     822:	b.n	800 <SDFile::available()+0x28>

00000824 <StreamFile<FsBaseFile, unsigned long long>::available()>:
     824:	ldr	r3, [r0, #72]	; 0x48
     826:	cbz	r3, 83e <StreamFile<FsBaseFile, unsigned long long>::available()+0x1a>
    return isFile() ? fileSize() - curPosition() : 0;
     828:	ldrb	r0, [r3, #0]
     82a:	ands.w	r0, r0, #8
     82e:	beq.n	84c <StreamFile<FsBaseFile, unsigned long long>::available()+0x28>
     830:	ldr	r0, [r3, #28]
     832:	ldr	r3, [r3, #20]
    return n > INT_MAX ? INT_MAX : n;
     834:	subs	r0, r0, r3
     836:	it	mi
     838:	mvnmi.w	r0, #2147483648	; 0x80000000
     83c:	bx	lr
     83e:	ldr	r3, [r0, #76]	; 0x4c
     840:	cbz	r3, 86c <StreamFile<FsBaseFile, unsigned long long>::available()+0x48>
  uint64_t available64() { return isFile() ? fileSize() - curPosition() : 0; }
     842:	ldrb.w	r0, [r3, #49]	; 0x31
     846:	ands.w	r0, r0, #8
     84a:	bne.n	84e <StreamFile<FsBaseFile, unsigned long long>::available()+0x2a>
  int available() { return BaseFile::available(); }
     84c:	bx	lr
     84e:	ldr	r0, [r3, #16]
     850:	ldr	r1, [r3, #0]
     852:	ldr	r2, [r3, #20]
     854:	subs	r0, r0, r1
     856:	ldr	r3, [r3, #4]
     858:	sbc.w	r3, r2, r3
    return n > INT_MAX ? INT_MAX : n;
     85c:	cmp.w	r0, #2147483648	; 0x80000000
     860:	sbcs.w	r3, r3, #0
     864:	bcc.n	84c <StreamFile<FsBaseFile, unsigned long long>::available()+0x28>
     866:	mvn.w	r0, #2147483648	; 0x80000000
     86a:	bx	lr
     86c:	mov	r0, r3
     86e:	b.n	84c <StreamFile<FsBaseFile, unsigned long long>::available()+0x28>

00000870 <File::write(unsigned char const*, unsigned int)>:
		return (f) ? f->write((void*)buf, size) : 0;
     870:	ldr	r3, [r0, #16]
     872:	cbz	r3, 8aa <File::write(unsigned char const*, unsigned int)+0x3a>
     874:	ldr	r0, [pc, #56]	; (8b0 <File::write(unsigned char const*, unsigned int)+0x40>)
	virtual size_t write(const uint8_t *buf, size_t size) {
     876:	push	{r4}
		return (f) ? f->write((void*)buf, size) : 0;
     878:	ldr	r4, [r3, #0]
     87a:	ldr	r4, [r4, #12]
     87c:	cmp	r4, r0
     87e:	bne.n	8a0 <File::write(unsigned char const*, unsigned int)+0x30>
    return m_fFile   ? m_fFile->write(buf, count)
     880:	ldr	r0, [r3, #80]	; 0x50
     882:	cbz	r0, 88c <File::write(unsigned char const*, unsigned int)+0x1c>
	}
     884:	ldr.w	r4, [sp], #4
     888:	b.w	6924 <FatFile::write(void const*, unsigned int)>
     88c:	ldr	r0, [r3, #84]	; 0x54
           : m_xFile ? m_xFile->write(buf, count)
     88e:	cbz	r0, 898 <File::write(unsigned char const*, unsigned int)+0x28>
     890:	ldr.w	r4, [sp], #4
     894:	b.w	516c <ExFatFile::write(void const*, unsigned int)>
     898:	movs	r0, #0
     89a:	ldr.w	r4, [sp], #4
     89e:	bx	lr
		return (f) ? f->write((void*)buf, size) : 0;
     8a0:	mov	r0, r3
     8a2:	mov	r3, r4
	}
     8a4:	ldr.w	r4, [sp], #4
		return (f) ? f->write((void*)buf, size) : 0;
     8a8:	bx	r3
	}
     8aa:	movs	r0, #0
     8ac:	bx	lr
     8ae:	nop
     8b0:	.word	0x0000073d

000008b4 <SDFile::~SDFile()>:
	virtual ~SDFile(void) {
     8b4:	push	{r3, r4, r5, lr}
     8b6:	mov	r4, r0
     8b8:	ldr	r3, [pc, #48]	; (8ec <SDFile::~SDFile()+0x38>)
		if (filename) {
     8ba:	ldr	r0, [r0, #88]	; 0x58
	virtual ~SDFile(void) {
     8bc:	str	r3, [r4, #0]
		if (filename) {
     8be:	cbz	r0, 8c8 <SDFile::~SDFile()+0x14>
			free(filename);
     8c0:	bl	d250 <free>
			filename = nullptr;
     8c4:	movs	r3, #0
     8c6:	str	r3, [r4, #88]	; 0x58
  bool isOpen() const { return m_fFile || m_xFile; }
     8c8:	ldr	r3, [r4, #80]	; 0x50
			sdfatfile.close();
     8ca:	add.w	r5, r4, #24
     8ce:	cbz	r3, 8e4 <SDFile::~SDFile()+0x30>
     8d0:	mov	r0, r5
     8d2:	bl	778c <FsBaseFile::close()>
class StreamFile : public stream_t, public BaseFile {
     8d6:	ldr	r3, [pc, #24]	; (8f0 <SDFile::~SDFile()+0x3c>)
  ~FsBaseFile() { close(); }
     8d8:	mov	r0, r5
     8da:	str	r3, [r4, #8]
     8dc:	bl	778c <FsBaseFile::close()>
	}
     8e0:	mov	r0, r4
     8e2:	pop	{r3, r4, r5, pc}
  bool isOpen() const { return m_fFile || m_xFile; }
     8e4:	ldr	r3, [r4, #84]	; 0x54
     8e6:	cmp	r3, #0
     8e8:	bne.n	8d0 <SDFile::~SDFile()+0x1c>
     8ea:	b.n	8d6 <SDFile::~SDFile()+0x22>
     8ec:	.word	0x20000ae8
     8f0:	.word	0x2000099c

000008f4 <SDFile::~SDFile()>:
	virtual ~SDFile(void) {
     8f4:	push	{r3, r4, r5, lr}
     8f6:	mov	r4, r0
     8f8:	ldr	r3, [pc, #56]	; (934 <SDFile::~SDFile()+0x40>)
		if (filename) {
     8fa:	ldr	r0, [r0, #88]	; 0x58
	virtual ~SDFile(void) {
     8fc:	str	r3, [r4, #0]
		if (filename) {
     8fe:	cbz	r0, 908 <SDFile::~SDFile()+0x14>
			free(filename);
     900:	bl	d250 <free>
			filename = nullptr;
     904:	movs	r3, #0
     906:	str	r3, [r4, #88]	; 0x58
     908:	ldr	r3, [r4, #80]	; 0x50
			sdfatfile.close();
     90a:	add.w	r5, r4, #24
     90e:	cbz	r3, 92c <SDFile::~SDFile()+0x38>
     910:	mov	r0, r5
     912:	bl	778c <FsBaseFile::close()>
     916:	ldr	r3, [pc, #32]	; (938 <SDFile::~SDFile()+0x44>)
  ~FsBaseFile() { close(); }
     918:	mov	r0, r5
     91a:	str	r3, [r4, #8]
     91c:	bl	778c <FsBaseFile::close()>
	}
     920:	mov	r0, r4
     922:	movs	r1, #92	; 0x5c
     924:	bl	d0ac <operator delete(void*, unsigned int)>
     928:	mov	r0, r4
     92a:	pop	{r3, r4, r5, pc}
  bool isOpen() const { return m_fFile || m_xFile; }
     92c:	ldr	r3, [r4, #84]	; 0x54
     92e:	cmp	r3, #0
     930:	bne.n	910 <SDFile::~SDFile()+0x1c>
     932:	b.n	916 <SDFile::~SDFile()+0x22>
     934:	.word	0x20000ae8
     938:	.word	0x2000099c

0000093c <SDFile::seek(unsigned long long, int)>:
	virtual bool seek(uint64_t pos, int mode = SeekSet) {
     93c:	push	{r4, r5}
     93e:	ldr	r4, [sp, #8]
     940:	mov	r1, r2
     942:	mov	ip, r3
		if (mode == SeekSet) return sdfatfile.seekSet(pos);
     944:	cbz	r4, 954 <SDFile::seek(unsigned long long, int)+0x18>
		if (mode == SeekCur) return sdfatfile.seekCur(pos);
     946:	cmp	r4, #1
     948:	beq.n	984 <SDFile::seek(unsigned long long, int)+0x48>
		if (mode == SeekEnd) return sdfatfile.seekEnd(pos);
     94a:	cmp	r4, #2
     94c:	beq.n	96c <SDFile::seek(unsigned long long, int)+0x30>
	}
     94e:	movs	r0, #0
     950:	pop	{r4, r5}
     952:	bx	lr
    return m_fFile   ? pos < (1ULL << 32) && m_fFile->seekSet(pos)
     954:	ldr	r5, [r0, #80]	; 0x50
     956:	cbz	r5, 996 <SDFile::seek(unsigned long long, int)+0x5a>
     958:	mov.w	r3, #4294967295
     95c:	cmp	r3, r2
     95e:	sbcs.w	r4, r4, ip
     962:	bcc.n	94e <SDFile::seek(unsigned long long, int)+0x12>
     964:	mov	r0, r5
     966:	pop	{r4, r5}
     968:	b.w	6564 <FatFile::seekSet(unsigned long)>
    return m_fFile ? m_fFile->fileSize() : m_xFile ? m_xFile->fileSize() : 0;
     96c:	ldr	r2, [r0, #80]	; 0x50
     96e:	cbz	r2, 9b4 <SDFile::seek(unsigned long long, int)+0x78>
     970:	ldr	r3, [r2, #28]
  bool seekEnd(int64_t offset = 0) { return seekSet(fileSize() + offset); }
     972:	adds	r1, r3, r1
     974:	adc.w	r3, ip, #0
    return m_fFile   ? pos < (1ULL << 32) && m_fFile->seekSet(pos)
     978:	cmp	r3, #0
     97a:	bne.n	94e <SDFile::seek(unsigned long long, int)+0x12>
     97c:	mov	r0, r2
     97e:	pop	{r4, r5}
     980:	b.w	6564 <FatFile::seekSet(unsigned long)>
    return m_fFile   ? m_fFile->curPosition()
     984:	ldr	r2, [r0, #80]	; 0x50
     986:	cbz	r2, 9a2 <SDFile::seek(unsigned long long, int)+0x66>
     988:	ldr	r3, [r2, #20]
  bool seekCur(int64_t offset) { return seekSet(curPosition() + offset); }
     98a:	adds	r1, r3, r1
     98c:	adc.w	r3, ip, #0
    return m_fFile   ? pos < (1ULL << 32) && m_fFile->seekSet(pos)
     990:	cmp	r3, #0
     992:	bne.n	94e <SDFile::seek(unsigned long long, int)+0x12>
     994:	b.n	97c <SDFile::seek(unsigned long long, int)+0x40>
     996:	ldr	r0, [r0, #84]	; 0x54
           : m_xFile ? m_xFile->seekSet(pos)
     998:	cmp	r0, #0
     99a:	beq.n	94e <SDFile::seek(unsigned long long, int)+0x12>
     99c:	pop	{r4, r5}
     99e:	b.w	3e40 <ExFatFile::seekSet(unsigned long long)>
     9a2:	ldr	r0, [r0, #84]	; 0x54
           : m_xFile ? m_xFile->curPosition()
     9a4:	cmp	r0, #0
     9a6:	beq.n	94e <SDFile::seek(unsigned long long, int)+0x12>
  bool seekCur(int64_t offset) { return seekSet(curPosition() + offset); }
     9a8:	ldrd	r2, r3, [r0]
     9ac:	adds	r2, r1, r2
           : m_xFile ? m_xFile->seekSet(pos)
     9ae:	adc.w	r3, ip, r3
     9b2:	b.n	99c <SDFile::seek(unsigned long long, int)+0x60>
     9b4:	ldr	r0, [r0, #84]	; 0x54
    return m_fFile ? m_fFile->fileSize() : m_xFile ? m_xFile->fileSize() : 0;
     9b6:	cmp	r0, #0
     9b8:	beq.n	94e <SDFile::seek(unsigned long long, int)+0x12>
  bool seekEnd(int64_t offset = 0) { return seekSet(fileSize() + offset); }
     9ba:	ldrd	r2, r3, [r0, #16]
     9be:	pop	{r4, r5}
     9c0:	adds	r2, r1, r2
           : m_xFile ? m_xFile->seekSet(pos)
     9c2:	adc.w	r3, ip, r3
     9c6:	b.w	3e40 <ExFatFile::seekSet(unsigned long long)>
     9ca:	nop

000009cc <File::~File()>:
	virtual ~File() {
     9cc:	push	{r4, r5, r6, lr}
     9ce:	ldr	r3, [pc, #144]	; (a60 <File::~File()+0x94>)
     9d0:	mov	r4, r0
		if (f) dec_refcount();
     9d2:	ldr	r5, [r0, #16]
	virtual ~File() {
     9d4:	str	r3, [r0, #0]
		if (f) dec_refcount();
     9d6:	cmp	r5, #0
     9d8:	beq.n	a40 <File::~File()+0x74>
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	using Print::write;
private:
	void dec_refcount() {
		if (--(f->refcount) == 0) {
     9da:	ldr	r6, [r5, #4]
     9dc:	subs	r6, #1
     9de:	str	r6, [r5, #4]
     9e0:	cbnz	r6, a40 <File::~File()+0x74>
			f->close();
     9e2:	ldr	r3, [r5, #0]
     9e4:	ldr	r2, [pc, #124]	; (a64 <File::~File()+0x98>)
     9e6:	ldr	r3, [r3, #44]	; 0x2c
     9e8:	cmp	r3, r2
     9ea:	bne.n	a4c <File::~File()+0x80>
		if (filename) {
     9ec:	ldr	r0, [r5, #88]	; 0x58
     9ee:	cbz	r0, 9f6 <File::~File()+0x2a>
			free(filename);
     9f0:	bl	d250 <free>
			filename = nullptr;
     9f4:	str	r6, [r5, #88]	; 0x58
  bool isOpen() const { return m_fFile || m_xFile; }
     9f6:	ldr	r3, [r5, #80]	; 0x50
     9f8:	cbz	r3, a44 <File::~File()+0x78>
			sdfatfile.close();
     9fa:	add.w	r0, r5, #24
     9fe:	bl	778c <FsBaseFile::close()>
			delete f;
     a02:	ldr	r5, [r4, #16]
     a04:	cbz	r5, a40 <File::~File()+0x74>
     a06:	ldr	r3, [r5, #0]
     a08:	ldr	r2, [pc, #92]	; (a68 <File::~File()+0x9c>)
     a0a:	ldr	r3, [r3, #4]
     a0c:	cmp	r3, r2
     a0e:	bne.n	a5a <File::~File()+0x8e>
	virtual ~SDFile(void) {
     a10:	ldr	r3, [pc, #88]	; (a6c <File::~File()+0xa0>)
		if (filename) {
     a12:	ldr	r0, [r5, #88]	; 0x58
	virtual ~SDFile(void) {
     a14:	str	r3, [r5, #0]
		if (filename) {
     a16:	cbz	r0, a20 <File::~File()+0x54>
			free(filename);
     a18:	bl	d250 <free>
			filename = nullptr;
     a1c:	movs	r3, #0
     a1e:	str	r3, [r5, #88]	; 0x58
     a20:	ldr	r3, [r5, #80]	; 0x50
			sdfatfile.close();
     a22:	add.w	r6, r5, #24
     a26:	cbz	r3, a52 <File::~File()+0x86>
     a28:	mov	r0, r6
     a2a:	bl	778c <FsBaseFile::close()>
     a2e:	ldr	r3, [pc, #64]	; (a70 <File::~File()+0xa4>)
  ~FsBaseFile() { close(); }
     a30:	mov	r0, r6
     a32:	str	r3, [r5, #8]
     a34:	bl	778c <FsBaseFile::close()>
	}
     a38:	movs	r1, #92	; 0x5c
     a3a:	mov	r0, r5
     a3c:	bl	d0ac <operator delete(void*, unsigned int)>
	}
     a40:	mov	r0, r4
     a42:	pop	{r4, r5, r6, pc}
  bool isOpen() const { return m_fFile || m_xFile; }
     a44:	ldr	r3, [r5, #84]	; 0x54
     a46:	cmp	r3, #0
     a48:	bne.n	9fa <File::~File()+0x2e>
     a4a:	b.n	a02 <File::~File()+0x36>
			f->close();
     a4c:	mov	r0, r5
     a4e:	blx	r3
     a50:	b.n	a02 <File::~File()+0x36>
     a52:	ldr	r3, [r5, #84]	; 0x54
     a54:	cmp	r3, #0
     a56:	bne.n	a28 <File::~File()+0x5c>
     a58:	b.n	a2e <File::~File()+0x62>
			delete f;
     a5a:	mov	r0, r5
     a5c:	blx	r3
     a5e:	b.n	a40 <File::~File()+0x74>
     a60:	.word	0x20000a8c
     a64:	.word	0x000001d5
     a68:	.word	0x000008f5
     a6c:	.word	0x20000ae8
     a70:	.word	0x2000099c

00000a74 <File::~File()>:
	virtual ~File() {
     a74:	push	{r4, r5, r6, lr}
     a76:	ldr	r3, [pc, #152]	; (b10 <File::~File()+0x9c>)
     a78:	mov	r4, r0
		if (f) dec_refcount();
     a7a:	ldr	r5, [r0, #16]
	virtual ~File() {
     a7c:	str	r3, [r0, #0]
		if (f) dec_refcount();
     a7e:	cmp	r5, #0
     a80:	beq.n	ae8 <File::~File()+0x74>
		if (--(f->refcount) == 0) {
     a82:	ldr	r6, [r5, #4]
     a84:	subs	r6, #1
     a86:	str	r6, [r5, #4]
     a88:	cbnz	r6, ae8 <File::~File()+0x74>
			f->close();
     a8a:	ldr	r3, [r5, #0]
     a8c:	ldr	r2, [pc, #132]	; (b14 <File::~File()+0xa0>)
     a8e:	ldr	r3, [r3, #44]	; 0x2c
     a90:	cmp	r3, r2
     a92:	bne.n	afc <File::~File()+0x88>
		if (filename) {
     a94:	ldr	r0, [r5, #88]	; 0x58
     a96:	cbz	r0, a9e <File::~File()+0x2a>
			free(filename);
     a98:	bl	d250 <free>
			filename = nullptr;
     a9c:	str	r6, [r5, #88]	; 0x58
     a9e:	ldr	r3, [r5, #80]	; 0x50
     aa0:	cbz	r3, af4 <File::~File()+0x80>
			sdfatfile.close();
     aa2:	add.w	r0, r5, #24
     aa6:	bl	778c <FsBaseFile::close()>
			delete f;
     aaa:	ldr	r5, [r4, #16]
     aac:	cbz	r5, ae8 <File::~File()+0x74>
     aae:	ldr	r3, [r5, #0]
     ab0:	ldr	r2, [pc, #100]	; (b18 <File::~File()+0xa4>)
     ab2:	ldr	r3, [r3, #4]
     ab4:	cmp	r3, r2
     ab6:	bne.n	b0a <File::~File()+0x96>
	virtual ~SDFile(void) {
     ab8:	ldr	r3, [pc, #96]	; (b1c <File::~File()+0xa8>)
		if (filename) {
     aba:	ldr	r0, [r5, #88]	; 0x58
	virtual ~SDFile(void) {
     abc:	str	r3, [r5, #0]
		if (filename) {
     abe:	cbz	r0, ac8 <File::~File()+0x54>
			free(filename);
     ac0:	bl	d250 <free>
			filename = nullptr;
     ac4:	movs	r3, #0
     ac6:	str	r3, [r5, #88]	; 0x58
     ac8:	ldr	r3, [r5, #80]	; 0x50
			sdfatfile.close();
     aca:	add.w	r6, r5, #24
     ace:	cbz	r3, b02 <File::~File()+0x8e>
     ad0:	mov	r0, r6
     ad2:	bl	778c <FsBaseFile::close()>
     ad6:	ldr	r3, [pc, #72]	; (b20 <File::~File()+0xac>)
  ~FsBaseFile() { close(); }
     ad8:	mov	r0, r6
     ada:	str	r3, [r5, #8]
     adc:	bl	778c <FsBaseFile::close()>
	}
     ae0:	movs	r1, #92	; 0x5c
     ae2:	mov	r0, r5
     ae4:	bl	d0ac <operator delete(void*, unsigned int)>
	}
     ae8:	mov	r0, r4
     aea:	movs	r1, #20
     aec:	bl	d0ac <operator delete(void*, unsigned int)>
     af0:	mov	r0, r4
     af2:	pop	{r4, r5, r6, pc}
  bool isOpen() const { return m_fFile || m_xFile; }
     af4:	ldr	r3, [r5, #84]	; 0x54
     af6:	cmp	r3, #0
     af8:	bne.n	aa2 <File::~File()+0x2e>
     afa:	b.n	aaa <File::~File()+0x36>
			f->close();
     afc:	mov	r0, r5
     afe:	blx	r3
     b00:	b.n	aaa <File::~File()+0x36>
     b02:	ldr	r3, [r5, #84]	; 0x54
     b04:	cmp	r3, #0
     b06:	bne.n	ad0 <File::~File()+0x5c>
     b08:	b.n	ad6 <File::~File()+0x62>
			delete f;
     b0a:	mov	r0, r5
     b0c:	blx	r3
     b0e:	b.n	ae8 <File::~File()+0x74>
     b10:	.word	0x20000a8c
     b14:	.word	0x000001d5
     b18:	.word	0x000008f5
     b1c:	.word	0x20000ae8
     b20:	.word	0x2000099c

00000b24 <I2S_32::config_i2s()>:

//#define AUDIO_SAMPLE_RATE_EXACT 44100 // used for initialization

void I2S_32::config_i2s(void)
{
	CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
     b24:	ldr	r2, [pc, #200]	; (bf0 <I2S_32::config_i2s()+0xcc>)

	// if either transmitter or receiver is enabled, do nothing
	if (I2S1_TCSR & I2S_TCSR_TE) return;
     b26:	ldr	r1, [pc, #204]	; (bf4 <I2S_32::config_i2s()+0xd0>)
	CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
     b28:	ldr	r3, [r2, #124]	; 0x7c
     b2a:	orr.w	r3, r3, #786432	; 0xc0000
     b2e:	str	r3, [r2, #124]	; 0x7c
	if (I2S1_TCSR & I2S_TCSR_TE) return;
     b30:	ldr	r3, [r1, #8]
     b32:	cmp	r3, #0
     b34:	blt.n	bec <I2S_32::config_i2s()+0xc8>
	if (I2S1_RCSR & I2S_RCSR_RE) return;
     b36:	ldr.w	r3, [r1, #136]	; 0x88
     b3a:	cmp	r3, #0
     b3c:	blt.n	bec <I2S_32::config_i2s()+0xc8>
    CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
     b3e:	ldr	r3, [pc, #184]	; (bf8 <I2S_32::config_i2s()+0xd4>)
    CCM_ANALOG_PLL_AUDIO_DENOM = ndiv & CCM_ANALOG_PLL_AUDIO_DENOM_MASK;
     b40:	movw	r2, #10000	; 0x2710
    CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
     b44:	ldr	r0, [pc, #180]	; (bfc <I2S_32::config_i2s()+0xd8>)
    CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
     b46:	mov.w	r1, #2240	; 0x8c0
{
     b4a:	push	{r4, r5}
    CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
     b4c:	str	r0, [r3, #112]	; 0x70
    CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
     b4e:	str.w	r1, [r3, #128]	; 0x80
    CCM_ANALOG_PLL_AUDIO_DENOM = ndiv & CCM_ANALOG_PLL_AUDIO_DENOM_MASK;
     b52:	str.w	r2, [r3, #144]	; 0x90
    CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_POWERDOWN;//Switch on PLL
     b56:	ldr	r2, [r3, #112]	; 0x70
     b58:	bic.w	r2, r2, #4096	; 0x1000
     b5c:	str	r2, [r3, #112]	; 0x70
    while (!(CCM_ANALOG_PLL_AUDIO & CCM_ANALOG_PLL_AUDIO_LOCK)) {}; //Wait for pll-lock
     b5e:	ldr	r2, [r3, #112]	; 0x70
     b60:	cmp	r2, #0
     b62:	bge.n	b5e <I2S_32::config_i2s()+0x3a>
    CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
     b64:	ldr.w	r0, [r3, #368]	; 0x170
	CORE_PIN20_CONFIG = 3;  //1:RX_SYNC

	int rsync = 0;
	int tsync = 1;

	I2S1_TMR = 0;
     b68:	movs	r5, #0
     b6a:	ldr	r2, [pc, #148]	; (c00 <I2S_32::config_i2s()+0xdc>)
    CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
     b6c:	ldr	r1, [pc, #128]	; (bf0 <I2S_32::config_i2s()+0xcc>)
    CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
     b6e:	ands	r2, r0
    IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
     b70:	ldr	r4, [pc, #144]	; (c04 <I2S_32::config_i2s()+0xe0>)
	CORE_PIN23_CONFIG = 3;  //1:MCLK
     b72:	ldr	r0, [pc, #148]	; (c08 <I2S_32::config_i2s()+0xe4>)
    CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
     b74:	str.w	r2, [r3, #368]	; 0x170
    CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_BYPASS;//Disable Bypass
     b78:	ldr	r2, [r3, #112]	; 0x70
     b7a:	bic.w	r2, r2, #65536	; 0x10000
     b7e:	str	r2, [r3, #112]	; 0x70
    CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
     b80:	ldr	r2, [r1, #28]
    CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
     b82:	ldr	r3, [pc, #136]	; (c0c <I2S_32::config_i2s()+0xe8>)
    CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
     b84:	bic.w	r2, r2, #3072	; 0xc00
        | CCM_CSCMR1_SAI1_CLK_SEL(2); // &0x03 // (0,1,2): PLL3PFD0, PLL5, PLL4
     b88:	orr.w	r2, r2, #2048	; 0x800
    CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
     b8c:	str	r2, [r1, #28]
    CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
     b8e:	ldr	r2, [r1, #40]	; 0x28
     b90:	ands	r3, r2
      | (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));
     b92:	ldr	r2, [pc, #124]	; (c10 <I2S_32::config_i2s()+0xec>)
        | CCM_CS1CDR_SAI1_CLK_PODF(n2-1); // &0x3f
     b94:	orr.w	r3, r3, #206	; 0xce
    CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
     b98:	str	r3, [r1, #40]	; 0x28
     b9a:	movs	r1, #3
    IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
     b9c:	ldr	r3, [r4, #4]
      | (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));
     b9e:	ands	r2, r3
	I2S1_TMR = 0;
     ba0:	ldr	r3, [pc, #80]	; (bf4 <I2S_32::config_i2s()+0xd0>)
     ba2:	orr.w	r2, r2, #524288	; 0x80000
    IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
     ba6:	str	r2, [r4, #4]
	//I2S1_TCSR = (1<<25); //Reset
	I2S1_TCR1 = I2S_TCR1_RFW(1);
     ba8:	movs	r4, #1
	I2S1_TCR2 = I2S_TCR2_SYNC(tsync) | I2S_TCR2_BCP // sync=0; tx is async;
     baa:	ldr	r2, [pc, #104]	; (c14 <I2S_32::config_i2s()+0xf0>)
	CORE_PIN23_CONFIG = 3;  //1:MCLK
     bac:	str.w	r1, [r0, #288]	; 0x120
	CORE_PIN21_CONFIG = 3;  //1:RX_BCLK
     bb0:	str.w	r1, [r0, #296]	; 0x128
	CORE_PIN20_CONFIG = 3;  //1:RX_SYNC
     bb4:	str.w	r1, [r0, #292]	; 0x124
		    | (I2S_TCR2_BCD | I2S_TCR2_DIV((1)) | I2S_TCR2_MSEL(1));
	I2S1_TCR3 = I2S_TCR3_TCE;
     bb8:	mov.w	r0, #65536	; 0x10000
	I2S1_TMR = 0;
     bbc:	str	r5, [r3, #96]	; 0x60
	I2S1_TCR4 = I2S_TCR4_FRSZ((2-1)) | I2S_TCR4_SYWD((32-1)) | I2S_TCR4_MF
     bbe:	ldr	r1, [pc, #88]	; (c18 <I2S_32::config_i2s()+0xf4>)
	I2S1_TCR1 = I2S_TCR1_RFW(1);
     bc0:	str	r4, [r3, #12]
	I2S1_TCR2 = I2S_TCR2_SYNC(tsync) | I2S_TCR2_BCP // sync=0; tx is async;
     bc2:	str	r2, [r3, #16]
		    | I2S_TCR4_FSE | I2S_TCR4_FSP | I2S_TCR4_FSD;
	I2S1_TCR5 = I2S_TCR5_WNW((32-1)) | I2S_TCR5_W0W((32-1)) | I2S_TCR5_FBT((32-1));
     bc4:	ldr	r2, [pc, #84]	; (c1c <I2S_32::config_i2s()+0xf8>)
	I2S1_TCR3 = I2S_TCR3_TCE;
     bc6:	str	r0, [r3, #20]
	I2S1_TCR4 = I2S_TCR4_FRSZ((2-1)) | I2S_TCR4_SYWD((32-1)) | I2S_TCR4_MF
     bc8:	str	r1, [r3, #24]
	I2S1_TCR5 = I2S_TCR5_WNW((32-1)) | I2S_TCR5_W0W((32-1)) | I2S_TCR5_FBT((32-1));
     bca:	str	r2, [r3, #28]

	I2S1_RMR = 0;
     bcc:	str.w	r5, [r3, #224]	; 0xe0
	//I2S1_RCSR = (1<<25); //Reset
	I2S1_RCR1 = I2S_RCR1_RFW(1);
     bd0:	str.w	r4, [r3, #140]	; 0x8c
	I2S1_RCR2 = I2S_RCR2_SYNC(rsync) | I2S_RCR2_BCP  // sync=0; rx is async;
     bd4:	add.w	r4, r4, #117440512	; 0x7000000
     bd8:	str.w	r4, [r3, #144]	; 0x90
  	    | (I2S_RCR2_BCD | I2S_RCR2_DIV((1)) | I2S_RCR2_MSEL(1));
	I2S1_RCR3 = I2S_RCR3_RCE;
     bdc:	str.w	r0, [r3, #148]	; 0x94
	I2S1_RCR4 = I2S_RCR4_FRSZ((2-1)) | I2S_RCR4_SYWD((32-1)) | I2S_RCR4_MF
     be0:	str.w	r1, [r3, #152]	; 0x98
		    | I2S_RCR4_FSE | I2S_RCR4_FSP | I2S_RCR4_FSD;
	I2S1_RCR5 = I2S_RCR5_WNW((32-1)) | I2S_RCR5_W0W((32-1)) | I2S_RCR5_FBT((32-1));
     be4:	str.w	r2, [r3, #156]	; 0x9c
}
     be8:	pop	{r4, r5}
     bea:	bx	lr
     bec:	bx	lr
     bee:	nop
     bf0:	.word	0x400fc000
     bf4:	.word	0x40384000
     bf8:	.word	0x400d8000
     bfc:	.word	0x0011201c
     c00:	.word	0xff7f7fff
     c04:	.word	0x400ac000
     c08:	.word	0x401f8000
     c0c:	.word	0xfffffe00
     c10:	.word	0xfff7fff8
     c14:	.word	0x47000001
     c18:	.word	0x00011f1b
     c1c:	.word	0x1f1f1f00

00000c20 <I2S_32::begin()>:
{ 
     c20:	push	{r3, r4, r5, lr}
  dma.begin(true); // Allocate the DMA channel first
     c22:	ldr	r4, [pc, #144]	; (cb4 <I2S_32::begin()+0x94>)
{ 
     c24:	mov	r5, r0
  dma.begin(true); // Allocate the DMA channel first
     c26:	movs	r1, #1
     c28:	mov	r0, r4
     c2a:	bl	c2c0 <DMAChannel::begin(bool)>
  config_i2s();
     c2e:	mov	r0, r5
     c30:	bl	b24 <I2S_32::config_i2s()>
	CORE_PIN8_CONFIG  = 3;  //1:RX_DATA0
     c34:	ldr	r1, [pc, #128]	; (cb8 <I2S_32::begin()+0x98>)
     c36:	movs	r0, #3
	IOMUXC_SAI1_RX_DATA0_SELECT_INPUT = 2;
     c38:	ldr	r3, [pc, #128]	; (cbc <I2S_32::begin()+0x9c>)
     c3a:	movs	r2, #2
  dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
     c3c:	movs	r5, #6
	CORE_PIN8_CONFIG  = 3;  //1:RX_DATA0
     c3e:	str.w	r0, [r1, #380]	; 0x17c
	IOMUXC_SAI1_RX_DATA0_SELECT_INPUT = 2;
     c42:	str.w	r2, [r3, #404]	; 0x194
  dma.TCD->NBYTES_MLNO = 4;
     c46:	movs	r2, #4
	dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0);
     c48:	ldr	r3, [r4, #0]
  dma.TCD->SOFF = 0;
     c4a:	ldr	r1, [pc, #116]	; (cc0 <I2S_32::begin()+0xa0>)
  dma.TCD->NBYTES_MLNO = 4;
     c4c:	str	r2, [r3, #8]
  dma.TCD->SOFF = 0;
     c4e:	str	r1, [r3, #4]
  dma.TCD->DOFF = 4;
     c50:	strh	r2, [r3, #20]
  dma.TCD->CITER_ELINKNO = sizeof(i2s_rx_buffer_32) / 4;
     c52:	mov.w	r2, #256	; 0x100
	dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0);
     c56:	ldr	r0, [pc, #108]	; (cc4 <I2S_32::begin()+0xa4>)
  dma.TCD->DADDR = i2s_rx_buffer_32;
     c58:	ldr	r1, [pc, #108]	; (cc8 <I2S_32::begin()+0xa8>)
	dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0);
     c5a:	str	r0, [r3, #0]
  dma.TCD->SLAST = 0;
     c5c:	movs	r0, #0
  dma.TCD->DADDR = i2s_rx_buffer_32;
     c5e:	str	r1, [r3, #16]
  dma.TCD->CITER_ELINKNO = sizeof(i2s_rx_buffer_32) / 4;
     c60:	strh	r2, [r3, #22]
	// trigger moves a single data unit, which is typically 8, 16 or
	// 32 bits.  If a channel is configured for 200 transfers

	// Use a hardware trigger to make the DMA channel run
	void triggerAtHardwareEvent(uint8_t source) {
		volatile uint32_t *mux = &DMAMUX_CHCFG0 + channel;
     c62:	ldrb	r1, [r4, #4]
  dma.TCD->BITER_ELINKNO = sizeof(i2s_rx_buffer_32) / 4;
     c64:	strh	r2, [r3, #30]
  dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
     c66:	strh	r5, [r3, #28]
  dma.TCD->DLASTSGA = -sizeof(i2s_rx_buffer_32);
     c68:	subw	r5, r5, #1030	; 0x406
     c6c:	ldr	r2, [pc, #92]	; (ccc <I2S_32::begin()+0xac>)
  dma.TCD->SLAST = 0;
     c6e:	str	r0, [r3, #12]
  dma.TCD->DLASTSGA = -sizeof(i2s_rx_buffer_32);
     c70:	str	r5, [r3, #24]
		//mux = (volatile uint32_t *)&(DMAMUX_CHCFG0) + channel;
		*mux = 0;
     c72:	str.w	r0, [r2, r1, lsl #2]
		*mux = (source & 0x7F) | DMAMUX_CHCFG_ENBL;
     c76:	ldr	r0, [pc, #88]	; (cd0 <I2S_32::begin()+0xb0>)
  I2S1_RCSR = I2S_RCSR_RE | I2S_RCSR_BCE | I2S_RCSR_FRDE | I2S_RCSR_FR;
     c78:	ldr	r3, [pc, #88]	; (cd4 <I2S_32::begin()+0xb4>)
     c7a:	str.w	r0, [r2, r1, lsl #2]
     c7e:	ldr	r2, [pc, #88]	; (cd8 <I2S_32::begin()+0xb8>)
     c80:	str.w	r2, [r3, #136]	; 0x88
  update_responsibility = update_setup();
     c84:	bl	c90c <AudioStream::update_setup()>
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
     c88:	ldrb	r3, [r4, #4]
     c8a:	ldr	r4, [pc, #80]	; (cdc <I2S_32::begin()+0xbc>)
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     c8c:	movs	r1, #1
     c8e:	ldr	r2, [pc, #80]	; (ce0 <I2S_32::begin()+0xc0>)
     c90:	strb	r0, [r4, #0]
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
     c92:	add.w	r0, r3, #16
		DMA_SERQ = channel;
     c96:	ldr	r4, [pc, #76]	; (ce4 <I2S_32::begin()+0xc4>)
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     c98:	add.w	r2, r2, r3, lsr #5
		DMA_SERQ = channel;
     c9c:	strb	r3, [r4, #27]
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     c9e:	and.w	r3, r3, #31
     ca2:	lsls	r2, r2, #2
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
     ca4:	ldr	r4, [pc, #64]	; (ce8 <I2S_32::begin()+0xc8>)
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     ca6:	lsls	r1, r3
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
     ca8:	ldr	r3, [pc, #64]	; (cec <I2S_32::begin()+0xcc>)
     caa:	str.w	r4, [r3, r0, lsl #2]
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     cae:	str	r1, [r2, #0]
}
     cb0:	pop	{r3, r4, r5, pc}
     cb2:	nop
     cb4:	.word	0x200065bc
     cb8:	.word	0x401f8000
     cbc:	.word	0x401f8400
     cc0:	.word	0x02020000
     cc4:	.word	0x403840a0
     cc8:	.word	0x20005c8c
     ccc:	.word	0x400ec000
     cd0:	.word	0x80000013
     cd4:	.word	0x40384000
     cd8:	.word	0x92000001
     cdc:	.word	0x20008162
     ce0:	.word	0x38003840
     ce4:	.word	0x400e8000
     ce8:	.word	0x00000085
     cec:	.word	0x20001c00

00000cf0 <AudioCompress::compress(void*)>:
int16_t tempData0[NCH];

uint32_t proc_stat[MB];

int AudioCompress::compress(void *inp)
{   
     cf0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     cf4:	sub	sp, #20
     cf6:	mov	r4, r1
     cf8:	str	r0, [sp, #8]
  int ret=1;
  uint32_t to = rtc_get();
     cfa:	bl	bab0 <rtc_get>
     cfe:	mov	sl, r0
  uint32_t t1 = micros();
     d00:	bl	b87c <micros>

  int16_t *din = (int16_t *) inp;
  //
  // copy reference (first sample of all channels)
  for (int  ii = 0; ii < NCH; ii++) tempData0[ii]=tempDatai[ii] = din[ii];
     d04:	ldr	r3, [pc, #704]	; (fc8 <AudioCompress::compress(void*)+0x2d8>)
     d06:	add.w	r6, r4, #254	; 0xfe
     d0a:	ldrsh.w	r2, [r4]
  uint32_t t1 = micros();
     d0e:	mov	r9, r0
  for (int  ii = 0; ii < NCH; ii++) tempData0[ii]=tempDatai[ii] = din[ii];
     d10:	ldr	r5, [r3, #0]
     d12:	mov	r3, r4
     d14:	ldr	r1, [pc, #692]	; (fcc <AudioCompress::compress(void*)+0x2dc>)
     d16:	strh	r2, [r5, #0]
     d18:	mov	r4, r5
     d1a:	strh	r2, [r1, #0]
  
  //differentiate (equiv 6 dB/Octave HP filter)
  for (int  ii = NCH; ii < NSAMP; ii++) tempDatai[ii] = (din[ii] - din[ii - NCH]);
     d1c:	mov	r1, r5
     d1e:	mov	r0, r3
     d20:	adds	r3, #2
     d22:	ldrh	r2, [r0, #2]
     d24:	cmp	r3, r6
     d26:	ldrh	r0, [r0, #0]
     d28:	sub.w	r2, r2, r0
     d2c:	strh.w	r2, [r4, #2]!
     d30:	bne.n	d1e <AudioCompress::compress(void*)+0x2e>
     d32:	add.w	r0, r5, #254	; 0xfe

  // find maximum in filtered data
  int32_t mx = 0;
     d36:	movs	r2, #0
  for (int ii = NCH; ii < NSAMP; ii++)
  {
    int32_t dd =  tempDatai[ii];
    if(dd<0)  dd = -dd;
    if(dd>mx) mx = dd;
     d38:	ldrsh.w	r3, [r1, #2]!
     d3c:	cmp	r3, #0
     d3e:	it	lt
     d40:	neglt	r3, r3
     d42:	uxth	r3, r3
     d44:	cmp	r2, r3
     d46:	it	lt
     d48:	movlt	r2, r3
  for (int ii = NCH; ii < NSAMP; ii++)
     d4a:	cmp	r0, r1
     d4c:	bne.n	d38 <AudioCompress::compress(void*)+0x48>
  }

  // estimate mask (allow only values > 2)
    int nb;
    for(nb=2; nb<MB; nb++) if(mx < (1<<(nb-1))) break;
     d4e:	movs	r7, #2
     d50:	movs	r1, #1
     d52:	subs	r5, r7, #1
     d54:	lsl.w	r3, r1, r5
     d58:	cmp	r3, r2
     d5a:	bgt.w	f64 <AudioCompress::compress(void*)+0x274>
     d5e:	adds	r7, #1
     d60:	cmp	r7, #16
     d62:	bne.n	d52 <AudioCompress::compress(void*)+0x62>
     d64:	ldr	r2, [pc, #616]	; (fd0 <AudioCompress::compress(void*)+0x2e0>)
     d66:	mov.w	r8, #142	; 0x8e
     d6a:	movs	r3, #129	; 0x81
     d6c:	movw	r0, #65535	; 0xffff
     d70:	str	r2, [sp, #4]
     d72:	movs	r5, #15
     d74:	movs	r2, #141	; 0x8d
     d76:	str	r2, [sp, #12]
    // compression factor (16/nb)
    
    proc_stat[nb-1]++;
     d78:	ldr	r1, [pc, #600]	; (fd4 <AudioCompress::compress(void*)+0x2e4>)
     d7a:	ldr	r4, [pc, #604]	; (fd8 <AudioCompress::compress(void*)+0x2e8>)
     d7c:	ldr.w	r2, [r1, r5, lsl #2]
     d80:	add.w	r6, r4, #254	; 0xfe
     d84:	mov	fp, r4
     d86:	adds	r2, #1
     d88:	str.w	r2, [r1, r5, lsl #2]
     d8c:	mov	r2, r4
    
  // mask data (all but first sample) (mask needed for negative numbers)
  uint32_t msk = (1 << nb) - 1;
  for (int ii = NCH; ii < NSAMP; ii++) { tempData[ii] &= (uint16_t)msk; }
     d8e:	ldrh.w	r1, [r2, #2]!
     d92:	ands	r1, r0
     d94:	cmp	r2, r6
     d96:	strh	r1, [r2, #0]
     d98:	bne.n	d8e <AudioCompress::compress(void*)+0x9e>

  // ensure that ndat is even (to allow fast access to header)
  ndat= ((ndat>>1) + 1)<<1;

    // clean data store
  for (int ii = 0; ii < NSAMP; ii++) outData[ii]=0;
     d9a:	ldr	r5, [pc, #576]	; (fdc <AudioCompress::compress(void*)+0x2ec>)
     d9c:	movs	r2, #232	; 0xe8
     d9e:	movs	r1, #0
     da0:	str	r3, [sp, #0]
     da2:	add.w	r0, r5, #24
     da6:	bl	e074 <memset>
  *iptr++ = t1;
  *iptr++ = NCH;
  *iptr++ = NCH+ncmp; // number of data after header
  //
  int kk=NH;
  outData[kk++] = tempData[0]; tempData[0] = 0;
     daa:	ldrh.w	r2, [fp]
  *iptr++ = nb | shift<<16;
     dae:	ldr	r3, [sp, #4]
  outData[kk++] = tempData[0]; tempData[0] = 0;
     db0:	movs	r1, #0
     db2:	strh	r2, [r5, #24]
  *iptr++ = 0xA5A5A5A5;
     db4:	mov.w	r2, #2779096485	; 0xa5a5a5a5

  // pack data
    // 
    int nx = NX;
     db8:	mov.w	ip, #16
  outData[kk++] = tempData[0]; tempData[0] = 0;
     dbc:	movs	r0, #13
  *iptr++ = 0xA5A5A5A5;
     dbe:	str	r2, [r5, #0]
  *iptr++ = NCH;
     dc0:	movs	r2, #1
  *iptr++ = t1;
     dc2:	str.w	r9, [r5, #12]
  outData[kk++] = tempData[0]; tempData[0] = 0;
     dc6:	strh.w	r1, [fp]
  *iptr++ = NCH;
     dca:	str	r2, [r5, #16]
  *iptr++ = to;
     dcc:	strd	r3, sl, [r5, #4]
  *iptr++ = NCH+ncmp; // number of data after header
     dd0:	ldr	r3, [sp, #0]
     dd2:	str	r3, [r5, #20]
     dd4:	b.n	dec <AudioCompress::compress(void*)+0xfc>
    for (int ii = 0; ii < NSAMP; ii ++)
    {   nx -= nb;
        if(nx > 0)
        {   outData[kk] |= (tempData[ii] << nx);
     dd6:	ldrh.w	r1, [r5, r0, lsl #1]
     dda:	mov	ip, r2
     ddc:	orr.w	lr, lr, r1
     de0:	strh.w	lr, [r5, r0, lsl #1]
    for (int ii = 0; ii < NSAMP; ii ++)
     de4:	cmp	r4, r6
     de6:	beq.n	e1a <AudioCompress::compress(void*)+0x12a>
        {   outData[kk] |= (tempData[ii] << nx);
     de8:	ldrh.w	r1, [r4, #2]!
    {   nx -= nb;
     dec:	sub.w	r2, ip, r7
        if(nx > 0)
     df0:	cmp	r2, #0
        {   outData[kk] |= (tempData[ii] << nx);
     df2:	lsl.w	lr, r1, r2
        if(nx > 0)
     df6:	bgt.n	dd6 <AudioCompress::compress(void*)+0xe6>
        else if(nx==0) 
        {   outData[kk++] |= tempData[ii];
            nx=NX;
        } 
        else    // nx is < 0
        {   outData[kk++] |= (tempData[ii] >> (-nx));
     df8:	sub.w	lr, r7, ip
     dfc:	add.w	r9, r0, #1
            nx += NX;
     e00:	add.w	ip, r2, #16
        {   outData[kk++] |= tempData[ii];
     e04:	ldrh.w	r2, [r5, r0, lsl #1]
        else if(nx==0) 
     e08:	bne.n	e6a <AudioCompress::compress(void*)+0x17a>
        {   outData[kk++] |= tempData[ii];
     e0a:	orrs	r2, r1
    for (int ii = 0; ii < NSAMP; ii ++)
     e0c:	cmp	r4, r6
            nx=NX;
     e0e:	mov.w	ip, #16
        {   outData[kk++] |= tempData[ii];
     e12:	strh.w	r2, [r5, r0, lsl #1]
     e16:	mov	r0, r9
    for (int ii = 0; ii < NSAMP; ii ++)
     e18:	bne.n	de8 <AudioCompress::compress(void*)+0xf8>
    }

    // store actual data
    static int nout=0;

    if ((nout + ndat) <= NBLOCK)
     e1a:	ldr	r6, [pc, #452]	; (fe0 <AudioCompress::compress(void*)+0x2f0>)
     e1c:	ldr	r4, [r6, #0]
     e1e:	add.w	r2, r4, r8
     e22:	cmp	r2, #128	; 0x80
     e24:	bgt.n	e82 <AudioCompress::compress(void*)+0x192>
     e26:	mvn.w	r3, #2147483648	; 0x80000000
     e2a:	ldr	r2, [pc, #440]	; (fe4 <AudioCompress::compress(void*)+0x2f4>)
     e2c:	ldr	r0, [pc, #428]	; (fdc <AudioCompress::compress(void*)+0x2ec>)
     e2e:	movw	r1, #42405	; 0xa5a5
     e32:	add	r3, r4
     e34:	add.w	r2, r2, r3, lsl #1
    { // all data fit in current block
        for (int ii = 0; ii < ndat; ii++) dout[nout++] = outData[ii];
     e38:	movs	r3, #0
     e3a:	b.n	e40 <AudioCompress::compress(void*)+0x150>
     e3c:	ldrh.w	r1, [r0, #2]!
     e40:	adds	r3, #1
     e42:	strh.w	r1, [r2, #2]!
     e46:	cmp	r3, r8
     e48:	blt.n	e3c <AudioCompress::compress(void*)+0x14c>
     e4a:	cmp.w	r8, #0
     e4e:	add.w	r3, r8, #4294967295
     e52:	add.w	r4, r4, #1
  int ret=1;
     e56:	mov.w	r7, #1
        for (int ii = 0; ii < ndat; ii++) dout[nout++] = outData[ii];
     e5a:	it	le
     e5c:	movle	r3, #0
     e5e:	add	r3, r4
     e60:	str	r3, [r6, #0]
        for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
        // followed by rest of data
        while (ii < ndat) dout[nout++] = outData[ii++];
    }
    return ret;
}
     e62:	mov	r0, r7
     e64:	add	sp, #20
     e66:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        {   outData[kk++] |= (tempData[ii] >> (-nx));
     e6a:	asr.w	lr, r1, lr
            outData[kk] = (tempData[ii] << nx);
     e6e:	lsl.w	r1, r1, ip
        {   outData[kk++] |= (tempData[ii] >> (-nx));
     e72:	orr.w	lr, lr, r2
     e76:	strh.w	lr, [r5, r0, lsl #1]
     e7a:	mov	r0, r9
            outData[kk] = (tempData[ii] << nx);
     e7c:	strh.w	r1, [r5, r9, lsl #1]
     e80:	b.n	de4 <AudioCompress::compress(void*)+0xf4>
    else if ((nout + NH) > NBLOCK) //avoid partial header (special case)
     e82:	cmp	r4, #116	; 0x74
     e84:	ble.n	eca <AudioCompress::compress(void*)+0x1da>
        while(nout<NBLOCK) dout[nout++] = 0; // fill rest of block with zero
     e86:	cmp	r4, #127	; 0x7f
     e88:	bgt.n	ea0 <AudioCompress::compress(void*)+0x1b0>
     e8a:	rsb	r2, r4, #128	; 0x80
     e8e:	ldr	r0, [pc, #340]	; (fe4 <AudioCompress::compress(void*)+0x2f4>)
     e90:	movs	r1, #0
     e92:	lsls	r2, r2, #1
     e94:	add.w	r0, r0, r4, lsl #1
     e98:	bl	e074 <memset>
     e9c:	movs	r3, #128	; 0x80
     e9e:	str	r3, [r6, #0]
  outputBlock=allocate();
     ea0:	bl	c5a8 <AudioStream::allocate()>
  if(outputBlock)
     ea4:	mov	r7, r0
     ea6:	cmp	r0, #0
     ea8:	bne.n	fa6 <AudioCompress::compress(void*)+0x2b6>
        for (int ii=0; ii < ndat; ii++) dout[nout++] = outData[ii];
     eaa:	cmp.w	r8, #0
     eae:	mov.w	r2, r8, lsl #1
     eb2:	ldr	r1, [pc, #296]	; (fdc <AudioCompress::compress(void*)+0x2ec>)
     eb4:	it	le
     eb6:	movle	r2, #2
     eb8:	ldr	r0, [pc, #296]	; (fe4 <AudioCompress::compress(void*)+0x2f4>)
     eba:	bl	a0d4 <memcpy>
}
     ebe:	mov	r0, r7
     ec0:	str.w	r8, [r6]
     ec4:	add	sp, #20
     ec6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        iptr[5] = (iptr[5]<<16) | (nr-NH);  //orig remaining data | actual remaining data after header 
     eca:	rsb	r2, r4, #116	; 0x74
     ece:	ldr	r0, [pc, #276]	; (fe4 <AudioCompress::compress(void*)+0x2f4>)
     ed0:	orr.w	r3, r2, r3, lsl #16
     ed4:	movw	r2, #42405	; 0xa5a5
     ed8:	str	r3, [r5, #20]
        while (nout < NBLOCK) dout[nout++] = outData[ii++];
     eda:	mvn.w	r3, #2147483648	; 0x80000000
     ede:	ldr	r5, [pc, #252]	; (fdc <AudioCompress::compress(void*)+0x2ec>)
     ee0:	add	r3, r4
     ee2:	mov	r1, r5
     ee4:	add.w	r3, r0, r3, lsl #1
     ee8:	adds	r0, #254	; 0xfe
     eea:	b.n	ef0 <AudioCompress::compress(void*)+0x200>
     eec:	ldrh.w	r2, [r1, #2]!
     ef0:	strh.w	r2, [r3, #2]!
     ef4:	cmp	r0, r3
     ef6:	bne.n	eec <AudioCompress::compress(void*)+0x1fc>
     ef8:	movs	r3, #128	; 0x80
     efa:	rsb	r9, r4, #128	; 0x80
     efe:	str	r3, [r6, #0]
  outputBlock=allocate();
     f00:	bl	c5a8 <AudioStream::allocate()>
  if(outputBlock)
     f04:	mov	r7, r0
     f06:	cmp	r0, #0
     f08:	bne.n	f86 <AudioCompress::compress(void*)+0x296>
        iptr[5]=(iptr[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
     f0a:	ldr	r1, [r5, #20]
        while (ii < ndat) dout[nout++] = outData[ii++];
     f0c:	cmp	r9, r8
        nr=ndat0-ii; // for header
     f0e:	ldr	r3, [sp, #12]
        iptr[5]=(iptr[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
     f10:	ldr	r2, [pc, #212]	; (fe8 <AudioCompress::compress(void*)+0x2f8>)
        nr=ndat0-ii; // for header
     f12:	sub.w	r3, r3, r9
        for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
     f16:	ldr.w	lr, [pc, #196]	; fdc <AudioCompress::compress(void*)+0x2ec>
        iptr[5]=(iptr[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
     f1a:	and.w	r2, r2, r1
        for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
     f1e:	ldr.w	ip, [pc, #196]	; fe4 <AudioCompress::compress(void*)+0x2f4>
        iptr[5]=(iptr[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
     f22:	orr.w	r2, r2, r3
     f26:	mov.w	r3, #12
     f2a:	str	r2, [r5, #20]
        for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
     f2c:	str	r3, [r6, #0]
     f2e:	ldmia.w	lr!, {r0, r1, r2, r3}
     f32:	stmia.w	ip!, {r0, r1, r2, r3}
     f36:	ldmia.w	lr, {r0, r1}
     f3a:	stmia.w	ip, {r0, r1}
        while (ii < ndat) dout[nout++] = outData[ii++];
     f3e:	bge.n	e62 <AudioCompress::compress(void*)+0x172>
     f40:	sub.w	r2, r4, #128	; 0x80
     f44:	add.w	r1, r5, r9, lsl #1
     f48:	add.w	r0, ip, #8
     f4c:	add	r2, r8
     f4e:	lsls	r2, r2, #1
     f50:	bl	a0d4 <memcpy>
     f54:	sub.w	r3, r4, #116	; 0x74
}
     f58:	mov	r0, r7
        while (ii < ndat) dout[nout++] = outData[ii++];
     f5a:	add	r3, r8
     f5c:	str	r3, [r6, #0]
}
     f5e:	add	sp, #20
     f60:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  int ncmp = (NSAMP*nb) / NX;
     f64:	mov.w	r8, r7, lsl #3
  *iptr++ = nb | shift<<16;
     f68:	orr.w	r3, r7, #917504	; 0xe0000
  uint32_t msk = (1 << nb) - 1;
     f6c:	lsl.w	r0, r1, r7
  *iptr++ = nb | shift<<16;
     f70:	str	r3, [sp, #4]
  int ndat = NH+NCH + ncmp;
     f72:	add.w	r3, r8, #13
  uint32_t msk = (1 << nb) - 1;
     f76:	subs	r0, #1
  int ndat = NH+NCH + ncmp;
     f78:	str	r3, [sp, #12]
  *iptr++ = NCH+ncmp; // number of data after header
     f7a:	add.w	r3, r8, #1
  for (int ii = NCH; ii < NSAMP; ii++) { tempData[ii] &= (uint16_t)msk; }
     f7e:	uxth	r0, r0
  ndat= ((ndat>>1) + 1)<<1;
     f80:	add.w	r8, r8, #14
     f84:	b.n	d78 <AudioCompress::compress(void*)+0x88>
    memcpy(outputBlock->data,src,2*NSAMP);
     f86:	mov.w	r2, #256	; 0x100
     f8a:	ldr	r1, [pc, #88]	; (fe4 <AudioCompress::compress(void*)+0x2f4>)
     f8c:	adds	r0, #4
     f8e:	bl	a0d4 <memcpy>
    transmit(outputBlock);
     f92:	mov	r1, r7
     f94:	ldr	r0, [sp, #8]
     f96:	movs	r2, #0
     f98:	bl	c6a4 <AudioStream::transmit(audio_block_struct*, unsigned char)>
    release(outputBlock);
     f9c:	mov	r0, r7
     f9e:	bl	c654 <AudioStream::release(audio_block_struct*)>
  int ret=1;
     fa2:	movs	r7, #1
     fa4:	b.n	f0a <AudioCompress::compress(void*)+0x21a>
    memcpy(outputBlock->data,src,2*NSAMP);
     fa6:	mov.w	r2, #256	; 0x100
     faa:	ldr	r1, [pc, #56]	; (fe4 <AudioCompress::compress(void*)+0x2f4>)
     fac:	adds	r0, #4
     fae:	bl	a0d4 <memcpy>
    transmit(outputBlock);
     fb2:	ldr	r0, [sp, #8]
     fb4:	mov	r1, r7
     fb6:	movs	r2, #0
     fb8:	bl	c6a4 <AudioStream::transmit(audio_block_struct*, unsigned char)>
    release(outputBlock);
     fbc:	mov	r0, r7
  int ret=1;
     fbe:	movs	r7, #1
    release(outputBlock);
     fc0:	bl	c654 <AudioStream::release(audio_block_struct*)>
    return 1;
     fc4:	b.n	eaa <AudioCompress::compress(void*)+0x1ba>
     fc6:	nop
     fc8:	.word	0x20001a3c
     fcc:	.word	0x200080f0
     fd0:	.word	0x000e0010
     fd4:	.word	0x20007ccc
     fd8:	.word	0x200062fc
     fdc:	.word	0x200061fc
     fe0:	.word	0x200065d4
     fe4:	.word	0x2000608c
     fe8:	.word	0xffff0000

00000fec <AudioCompress::update()>:
{ int ret=0;
     fec:	push	{r3, r4, r5, lr}
  block_in=receiveReadOnly(0);
     fee:	movs	r1, #0
{ int ret=0;
     ff0:	mov	r5, r0
  block_in=receiveReadOnly(0);
     ff2:	bl	c6ec <AudioStream::receiveReadOnly(unsigned int)>
  if(block_in) 
     ff6:	cbz	r0, 100c <AudioCompress::update()+0x20>
    ret=compress(block_in->data);
     ff8:	mov	r4, r0
     ffa:	adds	r1, r0, #4
     ffc:	mov	r0, r5
     ffe:	bl	cf0 <AudioCompress::compress(void*)>
    release(block_in);
    1002:	mov	r0, r4
}
    1004:	ldmia.w	sp!, {r3, r4, r5, lr}
    release(block_in);
    1008:	b.w	c654 <AudioStream::release(audio_block_struct*)>
}
    100c:	pop	{r3, r4, r5, pc}
    100e:	nop

00001010 <newDirectory(char*)>:
#else
  uint32_t getTeensySerial(void)  { return 0;}
#endif

int16_t newDirectory(char *dirName)
{ if(newHour())
    1010:	push	{r4, r5, lr}
    1012:	sub	sp, #28
    1014:	mov	r4, r0
{   uint32_t tx=rtc_get();
    1016:	bl	bab0 <rtc_get>
    int32_t h_ = (int32_t) tx/SECS_PER_HOUR;  // use hours since 1970 as measures
    101a:	ldr	r3, [pc, #116]	; (1090 <newDirectory(char*)+0x80>)
{   uint32_t tx=rtc_get();
    101c:	mov	r2, r0
    if(hour_== h_) return 0;
    101e:	ldr	r5, [pc, #116]	; (1094 <newDirectory(char*)+0x84>)
    int32_t h_ = (int32_t) tx/SECS_PER_HOUR;  // use hours since 1970 as measures
    1020:	smull	r1, r3, r3, r2
    1024:	asrs	r1, r2, #31
    if(hour_== h_) return 0;
    1026:	ldr	r0, [r5, #0]
    int32_t h_ = (int32_t) tx/SECS_PER_HOUR;  // use hours since 1970 as measures
    1028:	add	r3, r2
    102a:	rsb	r3, r1, r3, asr #11
    if(hour_== h_) return 0;
    102e:	cmp	r3, r0
    1030:	beq.n	1088 <newDirectory(char*)+0x78>
    hour_ = h_;
    1032:	str	r3, [r5, #0]
    {   
        tmElements_t tm;
        breakTime(rtc_get(), tm);
    1034:	bl	bab0 <rtc_get>
    1038:	add	r2, sp, #16
    103a:	movs	r1, #0
    103c:	bl	20c4 <breakTime(long long, tmElements_t&)>
        sprintf(dirName, "/%s%06x_%04d%02d%02d/%02d/", 
                      DirPrefix,(unsigned int)SerNum,
                              tmYearToCalendar(tm.Year),tm.Month, tm.Day, tm.Hour);
    1040:	ldrb.w	r2, [sp, #22]
        sprintf(dirName, "/%s%06x_%04d%02d%02d/%02d/", 
    1044:	ldrb.w	r1, [sp, #20]
    1048:	ldrb.w	r0, [sp, #21]
    104c:	addw	r2, r2, #1970	; 0x7b2
    1050:	ldrb.w	r5, [sp, #18]
    1054:	ldr	r3, [pc, #64]	; (1098 <newDirectory(char*)+0x88>)
    1056:	strd	r1, r5, [sp, #8]
    105a:	ldr	r3, [r3, #0]
    105c:	ldr	r1, [pc, #60]	; (109c <newDirectory(char*)+0x8c>)
    105e:	strd	r2, r0, [sp]
    1062:	ldr	r2, [pc, #60]	; (10a0 <newDirectory(char*)+0x90>)
    1064:	mov	r0, r4
    1066:	ldr	r2, [r2, #0]
    1068:	bl	dd84 <sprintf>
	// Discard all received data which has not been read.
        virtual void clear(void) { usb_serial_flush_input(); }
	// Transmit a single byte to your PC
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
	// Transmit a buffer containing any number of bytes to your PC
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    106c:	movs	r1, #1
    106e:	ldr	r0, [pc, #52]	; (10a4 <newDirectory(char*)+0x94>)
    1070:	bl	a84c <usb_serial_write>
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    1074:	mov	r0, r4
    1076:	bl	e400 <strlen>
    107a:	mov	r1, r0
    107c:	mov	r0, r4
    107e:	bl	a84c <usb_serial_write>
        //
        Serial.print("\n"); Serial.print(dirName);
        return 1;
    1082:	movs	r0, #1
    }
    return 0;
}
    1084:	add	sp, #28
    1086:	pop	{r4, r5, pc}
    return 0;
    1088:	movs	r0, #0
}
    108a:	add	sp, #28
    108c:	pop	{r4, r5, pc}
    108e:	nop
    1090:	.word	0x91a2b3c5
    1094:	.word	0x20007c44
    1098:	.word	0x200058c0
    109c:	.word	0x200004f8
    10a0:	.word	0x20001458
    10a4:	.word	0x200007a0

000010a8 <newFileName(char*)>:

int16_t newFileName(char *fileName)
{
    10a8:	push	{r4, r5, lr}
    10aa:	sub	sp, #44	; 0x2c
    10ac:	mov	r4, r0
    tmElements_t tm;
    breakTime(rtc_get(), tm);
    10ae:	bl	bab0 <rtc_get>
    10b2:	movs	r1, #0
    10b4:	add	r2, sp, #32
    10b6:	bl	20c4 <breakTime(long long, tmElements_t&)>
    
    sprintf(fileName, "/%s%06x_%04d%02d%02d/%02d/%s_%02d%02d%02d.bin", 
    10ba:	ldrb.w	r0, [sp, #33]	; 0x21
    10be:	ldr	r3, [pc, #96]	; (1120 <newFileName(char*)+0x78>)
    10c0:	str	r0, [sp, #24]
    10c2:	ldr	r0, [r3, #0]
    10c4:	ldrb.w	r1, [sp, #34]	; 0x22
    10c8:	str	r0, [sp, #16]
    10ca:	ldrb.w	r5, [sp, #32]
    10ce:	ldrb.w	r0, [sp, #36]	; 0x24
            DirPrefix,(unsigned int)SerNum,
                      tmYearToCalendar(tm.Year),tm.Month, tm.Day, tm.Hour, 
    10d2:	ldrb.w	r2, [sp, #38]	; 0x26
    sprintf(fileName, "/%s%06x_%04d%02d%02d/%02d/%s_%02d%02d%02d.bin", 
    10d6:	ldr	r3, [pc, #76]	; (1124 <newFileName(char*)+0x7c>)
    10d8:	str	r5, [sp, #28]
    10da:	addw	r2, r2, #1970	; 0x7b2
    10de:	ldr	r3, [r3, #0]
    10e0:	str	r1, [sp, #20]
    10e2:	strd	r0, r1, [sp, #8]
    10e6:	ldrb.w	r0, [sp, #37]	; 0x25
    10ea:	ldr	r1, [pc, #60]	; (1128 <newFileName(char*)+0x80>)
    10ec:	strd	r2, r0, [sp]
    10f0:	ldr	r2, [pc, #56]	; (112c <newFileName(char*)+0x84>)
    10f2:	mov	r0, r4
    10f4:	ldr	r2, [r2, #0]
    10f6:	bl	dd84 <sprintf>
    10fa:	movs	r1, #1
    10fc:	ldr	r0, [pc, #48]	; (1130 <newFileName(char*)+0x88>)
    10fe:	bl	a84c <usb_serial_write>
    1102:	movs	r1, #2
    1104:	ldr	r0, [pc, #44]	; (1134 <newFileName(char*)+0x8c>)
    1106:	bl	a84c <usb_serial_write>
    110a:	mov	r0, r4
    110c:	bl	e400 <strlen>
    1110:	mov	r1, r0
    1112:	mov	r0, r4
    1114:	bl	a84c <usb_serial_write>
                      FilePrefix, tm.Hour, tm.Minute, tm.Second);
    //
    Serial.print("\n"); Serial.print(": ");Serial.print(fileName);
    return 1;
}
    1118:	movs	r0, #1
    111a:	add	sp, #44	; 0x2c
    111c:	pop	{r4, r5, pc}
    111e:	nop
    1120:	.word	0x20001464
    1124:	.word	0x200058c0
    1128:	.word	0x200004c4
    112c:	.word	0x20001458
    1130:	.word	0x200007a0
    1134:	.word	0x200004f4

00001138 <makeHeader(char*)>:

int16_t makeHeader(char *header)
{
    1138:	push	{r4, r5, lr}
     * @param header is pointer to header
     * 
     */
    #define MAGIC "WMXZ"
    tmElements_t tm;
    breakTime(rtc_get(), tm);
    113a:	movs	r5, #0
{
    113c:	sub	sp, #36	; 0x24
    113e:	mov	r4, r0
    breakTime(rtc_get(), tm);
    1140:	bl	bab0 <rtc_get>
    1144:	add	r2, sp, #24
    1146:	mov	r1, r5
    1148:	bl	20c4 <breakTime(long long, tmElements_t&)>

    int nd=sprintf(header,"%s%04d%02d%02d_%02d%02d%02d",
    114c:	ldrb.w	r1, [sp, #24]
    1150:	ldrb.w	r2, [sp, #25]
    1154:	mov	r0, r4
            MAGIC,tmYearToCalendar(tm.Year),tm.Month,tm.Day,tm.Hour,tm.Minute,tm.Second);
    1156:	ldrb.w	r3, [sp, #30]
    int nd=sprintf(header,"%s%04d%02d%02d_%02d%02d%02d",
    115a:	strd	r2, r1, [sp, #12]
    115e:	ldrb.w	r1, [sp, #26]
    1162:	addw	r3, r3, #1970	; 0x7b2
    1166:	ldrb.w	r2, [sp, #28]
    116a:	strd	r2, r1, [sp, #4]
    116e:	ldrb.w	r1, [sp, #29]
    1172:	ldr	r2, [pc, #64]	; (11b4 <makeHeader(char*)+0x7c>)
    1174:	str	r1, [sp, #0]
    1176:	ldr	r1, [pc, #64]	; (11b8 <makeHeader(char*)+0x80>)
    1178:	bl	dd84 <sprintf>
    char *ptr = header+(nd+1);
    int32_t *iptr = (int32_t *) ptr;
    //float *fptr = (float *) ptr;
    
    // to be filled in
    iptr[0] = 10;                   // SW version
    117c:	movs	r1, #10
    char *ptr = header+(nd+1);
    117e:	adds	r3, r0, #1
    iptr[1] = (int32_t)SerNum;      // serial number
    1180:	ldr	r2, [pc, #56]	; (11bc <makeHeader(char*)+0x84>)
    iptr[3] = nch;
    iptr[4] = t_acq;
    iptr[5] = t_on;
    iptr[6] = t_off;
    iptr[7] = DO_COMPRESS;
    iptr[8] = shift;
    1182:	movs	r0, #14
    iptr[0] = 10;                   // SW version
    1184:	str	r1, [r4, r3]
    char *ptr = header+(nd+1);
    1186:	add	r3, r4
    iptr[1] = (int32_t)SerNum;      // serial number
    1188:	ldr	r1, [r2, #0]

    uint32_t *uptr = (uint32_t*) header;
    uptr[127] = 0x55555555;
    118a:	mov.w	r2, #1431655765	; 0x55555555
    iptr[8] = shift;
    118e:	str	r0, [r3, #32]
    iptr[3] = nch;
    1190:	movs	r0, #1
    iptr[1] = (int32_t)SerNum;      // serial number
    1192:	str	r1, [r3, #4]
    iptr[2] = fsamp;
    1194:	movw	r1, #44100	; 0xac44
    iptr[6] = t_off;
    1198:	str	r5, [r3, #24]
    iptr[2] = fsamp;
    119a:	str	r1, [r3, #8]
    iptr[4] = t_acq;
    119c:	movs	r1, #60	; 0x3c
    iptr[3] = nch;
    119e:	str	r0, [r3, #12]
    iptr[4] = t_acq;
    11a0:	str	r1, [r3, #16]
    iptr[5] = t_on;
    11a2:	mov.w	r1, #300	; 0x12c
    iptr[7] = DO_COMPRESS;
    11a6:	str	r0, [r3, #28]
    iptr[5] = t_on;
    11a8:	str	r1, [r3, #20]
    uptr[127] = 0x55555555;
    11aa:	str.w	r2, [r4, #508]	; 0x1fc
    //
    return 1;
}
    11ae:	add	sp, #36	; 0x24
    11b0:	pop	{r4, r5, pc}
    11b2:	nop
    11b4:	.word	0x20000470
    11b8:	.word	0x20000478
    11bc:	.word	0x200058c0

000011c0 <storeData(int) [clone .part.0]>:
      break;
    }
  }
}

int16_t storeData(int status)
    11c0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    11c4:	sub	sp, #80	; 0x50
{
  int32_t nbuf=sizeof(diskBuffer);

  if(!haveSD) return status;

  switch(status)
    11c6:	cmp	r0, #5
    11c8:	bhi.w	1438 <storeData(int) [clone .part.0]+0x278>
    11cc:	tbh	[pc, r0, lsl #1]
    11d0:	.word	0x00960060
    11d4:	.word	0x00db00bb
    11d8:	.word	0x00060006
		if (f) {
    11dc:	ldr	r5, [pc, #612]	; (1444 <storeData(int) [clone .part.0]+0x284>)
    11de:	ldr	r4, [r5, #16]
    11e0:	cmp	r4, #0
    11e2:	beq.w	1438 <storeData(int) [clone .part.0]+0x278>
			f->close();
    11e6:	ldr	r3, [r4, #0]
    11e8:	ldr	r6, [pc, #604]	; (1448 <storeData(int) [clone .part.0]+0x288>)
    11ea:	ldr	r3, [r3, #44]	; 0x2c
    11ec:	cmp	r3, r6
    11ee:	bne.w	16da <storeData(int) [clone .part.0]+0x51a>
		if (filename) {
    11f2:	ldr	r0, [r4, #88]	; 0x58
    11f4:	cbz	r0, 11fe <storeData(int) [clone .part.0]+0x3e>
			free(filename);
    11f6:	bl	d250 <free>
			filename = nullptr;
    11fa:	movs	r3, #0
    11fc:	str	r3, [r4, #88]	; 0x58
    11fe:	ldr	r3, [r4, #80]	; 0x50
    1200:	cmp	r3, #0
    1202:	beq.w	1690 <storeData(int) [clone .part.0]+0x4d0>
			sdfatfile.close();
    1206:	add.w	r0, r4, #24
    120a:	bl	778c <FsBaseFile::close()>
		if (--(f->refcount) == 0) {
    120e:	ldr	r7, [r5, #16]
    1210:	ldr	r4, [r7, #4]
    1212:	subs	r4, #1
    1214:	str	r4, [r7, #4]
    1216:	cmp	r4, #0
    1218:	bne.n	1282 <storeData(int) [clone .part.0]+0xc2>
			f->close();
    121a:	ldr	r3, [r7, #0]
    121c:	ldr	r3, [r3, #44]	; 0x2c
    121e:	cmp	r3, r6
    1220:	bne.w	16fc <storeData(int) [clone .part.0]+0x53c>
		if (filename) {
    1224:	ldr	r0, [r7, #88]	; 0x58
    1226:	cbz	r0, 122e <storeData(int) [clone .part.0]+0x6e>
			free(filename);
    1228:	bl	d250 <free>
			filename = nullptr;
    122c:	str	r4, [r7, #88]	; 0x58
    122e:	ldr	r3, [r7, #80]	; 0x50
    1230:	cmp	r3, #0
    1232:	beq.w	16e0 <storeData(int) [clone .part.0]+0x520>
			sdfatfile.close();
    1236:	add.w	r0, r7, #24
    123a:	bl	778c <FsBaseFile::close()>
			delete f;
    123e:	ldr	r4, [r5, #16]
    1240:	cbz	r4, 1282 <storeData(int) [clone .part.0]+0xc2>
    1242:	ldr	r3, [r4, #0]
    1244:	ldr	r2, [pc, #516]	; (144c <storeData(int) [clone .part.0]+0x28c>)
    1246:	ldr	r3, [r3, #4]
    1248:	cmp	r3, r2
    124a:	bne.w	172a <storeData(int) [clone .part.0]+0x56a>
	virtual ~SDFile(void) {
    124e:	ldr	r3, [pc, #512]	; (1450 <storeData(int) [clone .part.0]+0x290>)
		if (filename) {
    1250:	ldr	r0, [r4, #88]	; 0x58
	virtual ~SDFile(void) {
    1252:	str	r3, [r4, #0]
		if (filename) {
    1254:	cbz	r0, 125e <storeData(int) [clone .part.0]+0x9e>
			free(filename);
    1256:	bl	d250 <free>
			filename = nullptr;
    125a:	movs	r3, #0
    125c:	str	r3, [r4, #88]	; 0x58
    125e:	ldr	r3, [r4, #80]	; 0x50
			sdfatfile.close();
    1260:	add.w	r6, r4, #24
    1264:	cmp	r3, #0
    1266:	beq.w	1680 <storeData(int) [clone .part.0]+0x4c0>
    126a:	mov	r0, r6
    126c:	bl	778c <FsBaseFile::close()>
    1270:	ldr	r3, [pc, #480]	; (1454 <storeData(int) [clone .part.0]+0x294>)
  ~FsBaseFile() { close(); }
    1272:	mov	r0, r6
    1274:	str	r3, [r4, #8]
    1276:	bl	778c <FsBaseFile::close()>
	}
    127a:	movs	r1, #92	; 0x5c
    127c:	mov	r0, r4
    127e:	bl	d0ac <operator delete(void*, unsigned int)>
		}
		f = nullptr;
    1282:	movs	r3, #0
	}
    1284:	mov.w	r0, #4294967295
		f = nullptr;
    1288:	str	r3, [r5, #16]
          break;
    default:
          status=-1;
  }
  return status;
}
    128a:	add	sp, #80	; 0x50
    128c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          if(newDirectory(dirName)) 
    1290:	ldr	r0, [pc, #452]	; (1458 <storeData(int) [clone .part.0]+0x298>)
    1292:	bl	1010 <newDirectory(char*)>
    1296:	cmp	r0, #0
    1298:	beq.w	149a <storeData(int) [clone .part.0]+0x2da>
   * \param[in] path Path of the file to be tested for.
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    return m_fVol   ? m_fVol->exists(path)
    129c:	ldr	r4, [pc, #444]	; (145c <storeData(int) [clone .part.0]+0x29c>)
    129e:	ldr.w	r2, [r4, #1156]	; 0x484
    12a2:	cmp	r2, #0
    12a4:	beq.w	147c <storeData(int) [clone .part.0]+0x2bc>
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile tmp;
    return tmp.open(this, path, O_RDONLY);
    12a8:	mov	r5, sp
  FatFile() {}
    12aa:	movs	r3, #0
    12ac:	mov	r1, r2
    12ae:	ldr	r2, [pc, #424]	; (1458 <storeData(int) [clone .part.0]+0x298>)
    12b0:	mov	r0, r5
    12b2:	str	r3, [sp, #0]
    12b4:	bl	6034 <FatFile::open(FatVolume*, char const*, int)>
          {   if( !SD.exists(dirName) && 
    12b8:	cmp	r0, #0
    12ba:	bne.w	149a <storeData(int) [clone .part.0]+0x2da>
   * \param[in] pFlag Create missing parent directories if true.
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char* path, bool pFlag = true) {
    return m_fVol   ? m_fVol->mkdir(path, pFlag)
    12be:	ldr.w	r6, [r4, #1156]	; 0x484
    12c2:	cmp	r6, #0
    12c4:	beq.w	17be <storeData(int) [clone .part.0]+0x5fe>
    12c8:	movs	r4, #0
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char* path, bool pFlag = true) {
    FatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
    12ca:	movs	r3, #1
    12cc:	ldr	r2, [pc, #392]	; (1458 <storeData(int) [clone .part.0]+0x298>)
    12ce:	addw	r1, r6, #1092	; 0x444
    12d2:	mov	r0, r5
    12d4:	str	r4, [sp, #0]
    12d6:	bl	5e58 <FatFile::mkdir(FatFile*, char const*, bool)>
    12da:	cmp	r0, #0
    12dc:	bne.w	149a <storeData(int) [clone .part.0]+0x2da>
{ Serial.println();
    12e0:	ldr	r0, [pc, #380]	; (1460 <storeData(int) [clone .part.0]+0x2a0>)
    12e2:	bl	d05c <Print::println()>
    12e6:	movs	r2, #9
    12e8:	ldr	r1, [pc, #376]	; (1464 <storeData(int) [clone .part.0]+0x2a4>)
    12ea:	ldr	r0, [pc, #372]	; (1460 <storeData(int) [clone .part.0]+0x2a0>)
    12ec:	bl	c3c0 <usb_serial_class::write(unsigned char const*, unsigned int)>
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
    12f0:	ldr	r0, [pc, #364]	; (1460 <storeData(int) [clone .part.0]+0x2a0>)
    12f2:	bl	d05c <Print::println()>
                  !SD.mkdir(dirName)) return ErrorMsg("Error Dir");
    12f6:	mov.w	r0, #4294967295
    12fa:	b.n	143c <storeData(int) [clone .part.0]+0x27c>
          makeHeader(header);
    12fc:	ldr	r0, [pc, #360]	; (1468 <storeData(int) [clone .part.0]+0x2a8>)
    12fe:	bl	1138 <makeHeader(char*)>
          if(file.write((const void*)header,512) < 512) return ErrorMsg("Error Header");
    1302:	ldr	r3, [pc, #320]	; (1444 <storeData(int) [clone .part.0]+0x284>)
    1304:	ldr	r3, [r3, #16]
		return (f) ? f->write(buf, size) : 0;
    1306:	cbz	r3, 132c <storeData(int) [clone .part.0]+0x16c>
    1308:	ldr	r1, [r3, #0]
    130a:	ldr	r2, [pc, #352]	; (146c <storeData(int) [clone .part.0]+0x2ac>)
    130c:	ldr	r4, [r1, #12]
    130e:	cmp	r4, r2
    1310:	bne.w	1702 <storeData(int) [clone .part.0]+0x542>
    return m_fFile   ? m_fFile->write(buf, count)
    1314:	ldr	r0, [r3, #80]	; 0x50
    1316:	cmp	r0, #0
    1318:	beq.w	15d0 <storeData(int) [clone .part.0]+0x410>
    131c:	mov.w	r2, #512	; 0x200
    1320:	ldr	r1, [pc, #324]	; (1468 <storeData(int) [clone .part.0]+0x2a8>)
    1322:	bl	6924 <FatFile::write(void const*, unsigned int)>
    1326:	cmp.w	r0, #512	; 0x200
    132a:	bcs.n	137e <storeData(int) [clone .part.0]+0x1be>
{ Serial.println();
    132c:	ldr	r0, [pc, #304]	; (1460 <storeData(int) [clone .part.0]+0x2a0>)
    132e:	bl	d05c <Print::println()>
    1332:	movs	r1, #12
    1334:	ldr	r0, [pc, #312]	; (1470 <storeData(int) [clone .part.0]+0x2b0>)
    1336:	bl	a84c <usb_serial_write>
    133a:	ldr	r0, [pc, #292]	; (1460 <storeData(int) [clone .part.0]+0x2a0>)
    133c:	bl	d05c <Print::println()>
          if(file.write((const void*)header,512) < 512) return ErrorMsg("Error Header");
    1340:	mov.w	r0, #4294967295
    1344:	b.n	143c <storeData(int) [clone .part.0]+0x27c>
          disk_count++;
    1346:	ldr	r2, [pc, #300]	; (1474 <storeData(int) [clone .part.0]+0x2b4>)
    1348:	ldr	r1, [pc, #248]	; (1444 <storeData(int) [clone .part.0]+0x284>)
    134a:	ldr	r3, [r2, #0]
    134c:	ldr	r4, [r1, #16]
    134e:	adds	r3, #1
    1350:	str	r3, [r2, #0]
    1352:	cmp	r4, #0
    1354:	beq.w	15b6 <storeData(int) [clone .part.0]+0x3f6>
    1358:	ldr	r3, [r4, #0]
    135a:	ldr	r2, [pc, #272]	; (146c <storeData(int) [clone .part.0]+0x2ac>)
    135c:	ldr	r3, [r3, #12]
    135e:	cmp	r3, r2
    1360:	bne.w	1714 <storeData(int) [clone .part.0]+0x554>
    1364:	ldr	r0, [r4, #80]	; 0x50
    1366:	cmp	r0, #0
    1368:	beq.w	15e4 <storeData(int) [clone .part.0]+0x424>
    136c:	mov.w	r2, #4096	; 0x1000
    1370:	ldr	r1, [pc, #260]	; (1478 <storeData(int) [clone .part.0]+0x2b8>)
    1372:	bl	6924 <FatFile::write(void const*, unsigned int)>
          if(file.write((const void *)diskBuffer, nbuf) < (size_t) nbuf) return ErrorMsg("Error Data");
    1376:	cmp.w	r0, #4096	; 0x1000
    137a:	bcc.w	15b6 <storeData(int) [clone .part.0]+0x3f6>
  switch(status)
    137e:	movs	r0, #2
}
    1380:	add	sp, #80	; 0x50
    1382:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (f) {
    1386:	ldr	r5, [pc, #188]	; (1444 <storeData(int) [clone .part.0]+0x284>)
    1388:	ldr	r4, [r5, #16]
    138a:	cmp	r4, #0
    138c:	beq.w	169e <storeData(int) [clone .part.0]+0x4de>
			f->close();
    1390:	ldr	r3, [r4, #0]
    1392:	ldr	r6, [pc, #180]	; (1448 <storeData(int) [clone .part.0]+0x288>)
    1394:	ldr	r3, [r3, #44]	; 0x2c
    1396:	cmp	r3, r6
    1398:	bne.w	170e <storeData(int) [clone .part.0]+0x54e>
		if (filename) {
    139c:	ldr	r0, [r4, #88]	; 0x58
    139e:	cbz	r0, 13a8 <storeData(int) [clone .part.0]+0x1e8>
			free(filename);
    13a0:	bl	d250 <free>
			filename = nullptr;
    13a4:	movs	r3, #0
    13a6:	str	r3, [r4, #88]	; 0x58
  bool isOpen() const { return m_fFile || m_xFile; }
    13a8:	ldr	r3, [r4, #80]	; 0x50
    13aa:	cmp	r3, #0
    13ac:	beq.w	16ea <storeData(int) [clone .part.0]+0x52a>
			sdfatfile.close();
    13b0:	add.w	r0, r4, #24
    13b4:	bl	778c <FsBaseFile::close()>
		if (--(f->refcount) == 0) {
    13b8:	ldr	r7, [r5, #16]
    13ba:	ldr	r4, [r7, #4]
    13bc:	subs	r4, #1
    13be:	str	r4, [r7, #4]
    13c0:	cmp	r4, #0
    13c2:	bne.n	142c <storeData(int) [clone .part.0]+0x26c>
			f->close();
    13c4:	ldr	r3, [r7, #0]
    13c6:	ldr	r3, [r3, #44]	; 0x2c
    13c8:	cmp	r3, r6
    13ca:	bne.w	168a <storeData(int) [clone .part.0]+0x4ca>
		if (filename) {
    13ce:	ldr	r0, [r7, #88]	; 0x58
    13d0:	cbz	r0, 13d8 <storeData(int) [clone .part.0]+0x218>
			free(filename);
    13d2:	bl	d250 <free>
			filename = nullptr;
    13d6:	str	r4, [r7, #88]	; 0x58
    13d8:	ldr	r3, [r7, #80]	; 0x50
    13da:	cmp	r3, #0
    13dc:	beq.w	1770 <storeData(int) [clone .part.0]+0x5b0>
			sdfatfile.close();
    13e0:	add.w	r0, r7, #24
    13e4:	bl	778c <FsBaseFile::close()>
			delete f;
    13e8:	ldr	r4, [r5, #16]
    13ea:	cbz	r4, 142c <storeData(int) [clone .part.0]+0x26c>
    13ec:	ldr	r3, [r4, #0]
    13ee:	ldr	r2, [pc, #92]	; (144c <storeData(int) [clone .part.0]+0x28c>)
    13f0:	ldr	r3, [r3, #4]
    13f2:	cmp	r3, r2
    13f4:	bne.w	17a4 <storeData(int) [clone .part.0]+0x5e4>
	virtual ~SDFile(void) {
    13f8:	ldr	r3, [pc, #84]	; (1450 <storeData(int) [clone .part.0]+0x290>)
		if (filename) {
    13fa:	ldr	r0, [r4, #88]	; 0x58
	virtual ~SDFile(void) {
    13fc:	str	r3, [r4, #0]
		if (filename) {
    13fe:	cbz	r0, 1408 <storeData(int) [clone .part.0]+0x248>
			free(filename);
    1400:	bl	d250 <free>
			filename = nullptr;
    1404:	movs	r3, #0
    1406:	str	r3, [r4, #88]	; 0x58
    1408:	ldr	r3, [r4, #80]	; 0x50
			sdfatfile.close();
    140a:	add.w	r6, r4, #24
    140e:	cmp	r3, #0
    1410:	beq.w	178e <storeData(int) [clone .part.0]+0x5ce>
    1414:	mov	r0, r6
    1416:	bl	778c <FsBaseFile::close()>
    141a:	ldr	r3, [pc, #56]	; (1454 <storeData(int) [clone .part.0]+0x294>)
  ~FsBaseFile() { close(); }
    141c:	mov	r0, r6
    141e:	str	r3, [r4, #8]
    1420:	bl	778c <FsBaseFile::close()>
	}
    1424:	movs	r1, #92	; 0x5c
    1426:	mov	r0, r4
    1428:	bl	d0ac <operator delete(void*, unsigned int)>
		f = nullptr;
    142c:	movs	r3, #0
	}
    142e:	mov	r0, r3
		f = nullptr;
    1430:	str	r3, [r5, #16]
    1432:	add	sp, #80	; 0x50
    1434:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1438:	mov.w	r0, #4294967295
    143c:	add	sp, #80	; 0x50
    143e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1442:	nop
    1444:	.word	0x200079b0
    1448:	.word	0x000001d5
    144c:	.word	0x000008f5
    1450:	.word	0x20000ae8
    1454:	.word	0x2000099c
    1458:	.word	0x20006904
    145c:	.word	0x20005300
    1460:	.word	0x20001468
    1464:	.word	0x20000514
    1468:	.word	0x20007a44
    146c:	.word	0x0000073d
    1470:	.word	0x20000548
    1474:	.word	0x20007984
    1478:	.word	0x20006984
    147c:	ldr.w	r1, [r4, #1160]	; 0x488
           : m_xVol ? m_xVol->exists(path)
    1480:	cmp	r1, #0
    1482:	beq.w	12e0 <storeData(int) [clone .part.0]+0x120>
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    ExFatFile tmp;
    return tmp.open(this, path, O_RDONLY);
    1486:	mov	r5, sp
    1488:	mov	r3, r2
  ExFatFile() {}
    148a:	str	r2, [sp, #48]	; 0x30
    148c:	mov	r0, r5
    148e:	ldr	r2, [pc, #672]	; (1730 <storeData(int) [clone .part.0]+0x570>)
    1490:	bl	43e8 <ExFatFile::open(ExFatVolume*, char const*, int)>
    1494:	cmp	r0, #0
    1496:	beq.w	12be <storeData(int) [clone .part.0]+0xfe>
          if(!newFileName(fileName))return ErrorMsg("Failing new file");
    149a:	ldr	r0, [pc, #664]	; (1734 <storeData(int) [clone .part.0]+0x574>)
    149c:	bl	10a8 <newFileName(char*)>
    14a0:	cmp	r0, #0
    14a2:	beq.w	17ec <storeData(int) [clone .part.0]+0x62c>
	bool begin(uint8_t csPin = 10);
	File open(const char *filepath, uint8_t mode = FILE_READ) {
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
		SDFAT_FILE file = sdfs.open(filepath, flags);
    14a6:	movw	r3, #514	; 0x202
    14aa:	ldr	r2, [pc, #648]	; (1734 <storeData(int) [clone .part.0]+0x574>)
    14ac:	ldr	r1, [pc, #648]	; (1738 <storeData(int) [clone .part.0]+0x578>)
    14ae:	mov	r0, sp
    14b0:	bl	79e4 <FsVolume::open(char const*, int)>
  bool isOpen() const { return m_fFile || m_xFile; }
    14b4:	ldr	r3, [sp, #72]	; 0x48
    14b6:	cmp	r3, #0
    14b8:	beq.w	16aa <storeData(int) [clone .part.0]+0x4ea>
		if (file) return File(new SDFile(file));
    14bc:	movs	r0, #92	; 0x5c
class FileImpl {
    14be:	movs	r5, #0
    14c0:	bl	d0a8 <operator new(unsigned int)>
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
    14c4:	ldr	r3, [pc, #628]	; (173c <storeData(int) [clone .part.0]+0x57c>)
class Print
    14c6:	ldrb.w	r6, [sp, #4]
		if (file) return File(new SDFile(file));
    14ca:	mov	r4, r0
class Stream : public Print
    14cc:	ldr	r1, [sp, #8]
    14ce:	adds	r0, #24
    14d0:	ldrb.w	r2, [sp, #12]
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
    14d4:	str.w	r3, [r0, #-24]
    14d8:	ldr	r3, [pc, #612]	; (1740 <storeData(int) [clone .part.0]+0x580>)
    14da:	strb.w	r6, [r0, #-12]
    14de:	str.w	r1, [r0, #-8]
    14e2:	add	r1, sp, #16
    14e4:	str.w	r5, [r0, #-20]
    14e8:	strb.w	r2, [r0, #-4]
    14ec:	str.w	r3, [r0, #-16]
    14f0:	bl	7708 <FsBaseFile::FsBaseFile(FsBaseFile const&)>
		if (f) f->refcount++;
    14f4:	ldr	r3, [r4, #4]
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    14f6:	ldr	r2, [pc, #588]	; (1744 <storeData(int) [clone .part.0]+0x584>)
  ~FsBaseFile() { close(); }
    14f8:	add	r0, sp, #16
    14fa:	adds	r3, #1
    14fc:	ldr.w	r8, [pc, #620]	; 176c <storeData(int) [clone .part.0]+0x5ac>
    1500:	str	r5, [r4, #88]	; 0x58
    1502:	str	r3, [r4, #4]
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    1504:	str	r2, [r4, #8]
		if (f) { dec_refcount(); /*Serial.println("File move assignment autoclose");*/ }
    1506:	ldr	r5, [pc, #576]	; (1748 <storeData(int) [clone .part.0]+0x588>)
    1508:	str.w	r8, [sp]
  ~FsBaseFile() { close(); }
    150c:	bl	778c <FsBaseFile::close()>
		if (file.f) file.f->refcount++;
    1510:	ldr	r7, [r4, #4]
		if (f) { dec_refcount(); /*Serial.println("File move assignment autoclose");*/ }
    1512:	ldr	r6, [r5, #16]
		if (file.f) file.f->refcount++;
    1514:	adds	r3, r7, #1
    1516:	str	r3, [r4, #4]
		if (f) { dec_refcount(); /*Serial.println("File move assignment autoclose");*/ }
    1518:	cmp	r6, #0
    151a:	beq.w	169a <storeData(int) [clone .part.0]+0x4da>
		if (--(f->refcount) == 0) {
    151e:	ldr	r3, [r6, #4]
    1520:	subs	r3, #1
    1522:	str	r3, [r6, #4]
    1524:	cmp	r3, #0
    1526:	bne.n	15f6 <storeData(int) [clone .part.0]+0x436>
			f->close();
    1528:	ldr	r3, [r6, #0]
    152a:	ldr	r2, [pc, #544]	; (174c <storeData(int) [clone .part.0]+0x58c>)
    152c:	ldr	r3, [r3, #44]	; 0x2c
    152e:	cmp	r3, r2
    1530:	bne.w	179e <storeData(int) [clone .part.0]+0x5de>
		if (filename) {
    1534:	ldr	r0, [r6, #88]	; 0x58
    1536:	cbz	r0, 1540 <storeData(int) [clone .part.0]+0x380>
			free(filename);
    1538:	bl	d250 <free>
			filename = nullptr;
    153c:	movs	r3, #0
    153e:	str	r3, [r6, #88]	; 0x58
  bool isOpen() const { return m_fFile || m_xFile; }
    1540:	ldr	r3, [r6, #80]	; 0x50
    1542:	cmp	r3, #0
    1544:	beq.w	177a <storeData(int) [clone .part.0]+0x5ba>
			sdfatfile.close();
    1548:	add.w	r0, r6, #24
    154c:	bl	778c <FsBaseFile::close()>
			delete f;
    1550:	ldr	r6, [r5, #16]
    1552:	cbz	r6, 1594 <storeData(int) [clone .part.0]+0x3d4>
    1554:	ldr	r3, [r6, #0]
    1556:	ldr	r2, [pc, #504]	; (1750 <storeData(int) [clone .part.0]+0x590>)
    1558:	ldr	r3, [r3, #4]
    155a:	cmp	r3, r2
    155c:	bne.w	17e0 <storeData(int) [clone .part.0]+0x620>
	virtual ~SDFile(void) {
    1560:	ldr	r3, [pc, #472]	; (173c <storeData(int) [clone .part.0]+0x57c>)
		if (filename) {
    1562:	ldr	r0, [r6, #88]	; 0x58
	virtual ~SDFile(void) {
    1564:	str	r3, [r6, #0]
		if (filename) {
    1566:	cbz	r0, 1570 <storeData(int) [clone .part.0]+0x3b0>
			free(filename);
    1568:	bl	d250 <free>
			filename = nullptr;
    156c:	movs	r3, #0
    156e:	str	r3, [r6, #88]	; 0x58
    1570:	ldr	r3, [r6, #80]	; 0x50
			sdfatfile.close();
    1572:	add.w	r7, r6, #24
    1576:	cmp	r3, #0
    1578:	beq.w	17aa <storeData(int) [clone .part.0]+0x5ea>
    157c:	mov	r0, r7
    157e:	bl	778c <FsBaseFile::close()>
  ~FsBaseFile() { close(); }
    1582:	mov	r0, r7
    1584:	str.w	r8, [r6, #8]
    1588:	bl	778c <FsBaseFile::close()>
	}
    158c:	movs	r1, #92	; 0x5c
    158e:	mov	r0, r6
    1590:	bl	d0ac <operator delete(void*, unsigned int)>
		f = file.f;
    1594:	str	r4, [r5, #16]
		if (f) dec_refcount();
    1596:	cmp	r4, #0
    1598:	bne.w	17e6 <storeData(int) [clone .part.0]+0x626>
{ Serial.println();
    159c:	ldr	r0, [pc, #436]	; (1754 <storeData(int) [clone .part.0]+0x594>)
    159e:	bl	d05c <Print::println()>
    15a2:	movs	r1, #17
    15a4:	ldr	r0, [pc, #432]	; (1758 <storeData(int) [clone .part.0]+0x598>)
    15a6:	bl	a84c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    15aa:	ldr	r0, [pc, #424]	; (1754 <storeData(int) [clone .part.0]+0x594>)
    15ac:	bl	d05c <Print::println()>
          if(!file) return ErrorMsg("Failing open file");
    15b0:	mov.w	r0, #4294967295
    15b4:	b.n	143c <storeData(int) [clone .part.0]+0x27c>
{ Serial.println();
    15b6:	ldr	r0, [pc, #412]	; (1754 <storeData(int) [clone .part.0]+0x594>)
    15b8:	bl	d05c <Print::println()>
    15bc:	movs	r1, #10
    15be:	ldr	r0, [pc, #412]	; (175c <storeData(int) [clone .part.0]+0x59c>)
    15c0:	bl	a84c <usb_serial_write>
    15c4:	ldr	r0, [pc, #396]	; (1754 <storeData(int) [clone .part.0]+0x594>)
    15c6:	bl	d05c <Print::println()>
          if(file.write((const void *)diskBuffer, nbuf) < (size_t) nbuf) return ErrorMsg("Error Data");
    15ca:	mov.w	r0, #4294967295
    15ce:	b.n	143c <storeData(int) [clone .part.0]+0x27c>
    15d0:	ldr	r0, [r3, #84]	; 0x54
           : m_xFile ? m_xFile->write(buf, count)
    15d2:	cmp	r0, #0
    15d4:	beq.w	132c <storeData(int) [clone .part.0]+0x16c>
    15d8:	mov.w	r2, #512	; 0x200
    15dc:	ldr	r1, [pc, #384]	; (1760 <storeData(int) [clone .part.0]+0x5a0>)
    15de:	bl	516c <ExFatFile::write(void const*, unsigned int)>
    15e2:	b.n	1326 <storeData(int) [clone .part.0]+0x166>
    15e4:	ldr	r0, [r4, #84]	; 0x54
    15e6:	cmp	r0, #0
    15e8:	beq.n	15b6 <storeData(int) [clone .part.0]+0x3f6>
    15ea:	mov.w	r2, #4096	; 0x1000
    15ee:	ldr	r1, [pc, #372]	; (1764 <storeData(int) [clone .part.0]+0x5a4>)
    15f0:	bl	516c <ExFatFile::write(void const*, unsigned int)>
    15f4:	b.n	1376 <storeData(int) [clone .part.0]+0x1b6>
		if (--(f->refcount) == 0) {
    15f6:	ldr	r7, [r4, #4]
		f = file.f;
    15f8:	str	r4, [r5, #16]
		if (--(f->refcount) == 0) {
    15fa:	subs	r7, #1
    15fc:	str	r7, [r4, #4]
    15fe:	cmp	r7, #0
    1600:	bne.n	16a6 <storeData(int) [clone .part.0]+0x4e6>
			f->close();
    1602:	ldr	r3, [r4, #0]
    1604:	ldr	r2, [pc, #324]	; (174c <storeData(int) [clone .part.0]+0x58c>)
    1606:	ldr	r3, [r3, #44]	; 0x2c
    1608:	cmp	r3, r2
    160a:	bne.w	1798 <storeData(int) [clone .part.0]+0x5d8>
		if (filename) {
    160e:	ldr	r0, [r4, #88]	; 0x58
    1610:	cbz	r0, 1618 <storeData(int) [clone .part.0]+0x458>
			free(filename);
    1612:	bl	d250 <free>
			filename = nullptr;
    1616:	str	r7, [r4, #88]	; 0x58
  bool isOpen() const { return m_fFile || m_xFile; }
    1618:	ldr	r3, [r4, #80]	; 0x50
    161a:	cmp	r3, #0
    161c:	beq.w	1784 <storeData(int) [clone .part.0]+0x5c4>
			sdfatfile.close();
    1620:	add.w	r0, r4, #24
    1624:	bl	778c <FsBaseFile::close()>
			delete f;
    1628:	ldr	r3, [r4, #0]
    162a:	ldr	r2, [pc, #292]	; (1750 <storeData(int) [clone .part.0]+0x590>)
    162c:	ldr	r3, [r3, #4]
    162e:	cmp	r3, r2
    1630:	bne.n	16a2 <storeData(int) [clone .part.0]+0x4e2>
	virtual ~SDFile(void) {
    1632:	ldr	r3, [pc, #264]	; (173c <storeData(int) [clone .part.0]+0x57c>)
		if (filename) {
    1634:	ldr	r0, [r4, #88]	; 0x58
	virtual ~SDFile(void) {
    1636:	str	r3, [r4, #0]
		if (filename) {
    1638:	cbz	r0, 1642 <storeData(int) [clone .part.0]+0x482>
			free(filename);
    163a:	bl	d250 <free>
			filename = nullptr;
    163e:	movs	r3, #0
    1640:	str	r3, [r4, #88]	; 0x58
    1642:	ldr	r3, [r4, #80]	; 0x50
			sdfatfile.close();
    1644:	add.w	r6, r4, #24
    1648:	cmp	r3, #0
    164a:	beq.w	17b4 <storeData(int) [clone .part.0]+0x5f4>
    164e:	mov	r0, r6
    1650:	bl	778c <FsBaseFile::close()>
  ~FsBaseFile() { close(); }
    1654:	mov	r0, r6
    1656:	str.w	r8, [r4, #8]
    165a:	bl	778c <FsBaseFile::close()>
	}
    165e:	mov	r0, r4
    1660:	movs	r1, #92	; 0x5c
    1662:	bl	d0ac <operator delete(void*, unsigned int)>
    1666:	ldr	r0, [r5, #16]
		return (f) ? f->isOpen() : false;
    1668:	cmp	r0, #0
    166a:	beq.n	159c <storeData(int) [clone .part.0]+0x3dc>
    166c:	ldr	r3, [r0, #0]
    166e:	ldr	r2, [pc, #248]	; (1768 <storeData(int) [clone .part.0]+0x5a8>)
    1670:	ldr	r3, [r3, #48]	; 0x30
    1672:	cmp	r3, r2
    1674:	bne.n	1720 <storeData(int) [clone .part.0]+0x560>
  bool isOpen() const { return m_fFile || m_xFile; }
    1676:	ldr	r3, [r0, #80]	; 0x50
    1678:	cmp	r3, #0
    167a:	beq.n	16f4 <storeData(int) [clone .part.0]+0x534>
  switch(status)
    167c:	movs	r0, #1
    167e:	b.n	143c <storeData(int) [clone .part.0]+0x27c>
    1680:	ldr	r3, [r4, #84]	; 0x54
    1682:	cmp	r3, #0
    1684:	bne.w	126a <storeData(int) [clone .part.0]+0xaa>
    1688:	b.n	1270 <storeData(int) [clone .part.0]+0xb0>
			f->close();
    168a:	mov	r0, r7
    168c:	blx	r3
    168e:	b.n	13e8 <storeData(int) [clone .part.0]+0x228>
    1690:	ldr	r3, [r4, #84]	; 0x54
    1692:	cmp	r3, #0
    1694:	bne.w	1206 <storeData(int) [clone .part.0]+0x46>
    1698:	b.n	120e <storeData(int) [clone .part.0]+0x4e>
		f = file.f;
    169a:	str	r4, [r5, #16]
		if (f) dec_refcount();
    169c:	b.n	15fc <storeData(int) [clone .part.0]+0x43c>
    169e:	mov	r0, r4
    16a0:	b.n	143c <storeData(int) [clone .part.0]+0x27c>
			delete f;
    16a2:	mov	r0, r4
    16a4:	blx	r3
    16a6:	ldr	r0, [r5, #16]
    16a8:	b.n	1668 <storeData(int) [clone .part.0]+0x4a8>
    16aa:	ldr	r4, [sp, #76]	; 0x4c
    16ac:	cmp	r4, #0
    16ae:	bne.w	14bc <storeData(int) [clone .part.0]+0x2fc>
    16b2:	ldr.w	r8, [pc, #184]	; 176c <storeData(int) [clone .part.0]+0x5ac>
  ~FsBaseFile() { close(); }
    16b6:	add	r0, sp, #16
		if (f) { dec_refcount(); /*Serial.println("File move assignment autoclose");*/ }
    16b8:	ldr	r5, [pc, #140]	; (1748 <storeData(int) [clone .part.0]+0x588>)
    16ba:	str.w	r8, [sp]
    16be:	bl	778c <FsBaseFile::close()>
    16c2:	ldr	r6, [r5, #16]
    16c4:	cmp	r6, #0
    16c6:	beq.w	159c <storeData(int) [clone .part.0]+0x3dc>
		if (--(f->refcount) == 0) {
    16ca:	ldr	r3, [r6, #4]
    16cc:	subs	r3, #1
    16ce:	str	r3, [r6, #4]
    16d0:	cmp	r3, #0
    16d2:	beq.w	1528 <storeData(int) [clone .part.0]+0x368>
		f = nullptr;
    16d6:	str	r4, [r5, #16]
		return (f) ? f->isOpen() : false;
    16d8:	b.n	159c <storeData(int) [clone .part.0]+0x3dc>
			f->close();
    16da:	mov	r0, r4
    16dc:	blx	r3
    16de:	b.n	120e <storeData(int) [clone .part.0]+0x4e>
  bool isOpen() const { return m_fFile || m_xFile; }
    16e0:	ldr	r3, [r7, #84]	; 0x54
    16e2:	cmp	r3, #0
    16e4:	bne.w	1236 <storeData(int) [clone .part.0]+0x76>
    16e8:	b.n	123e <storeData(int) [clone .part.0]+0x7e>
    16ea:	ldr	r3, [r4, #84]	; 0x54
    16ec:	cmp	r3, #0
    16ee:	bne.w	13b0 <storeData(int) [clone .part.0]+0x1f0>
    16f2:	b.n	13b8 <storeData(int) [clone .part.0]+0x1f8>
    16f4:	ldr	r3, [r0, #84]	; 0x54
    16f6:	cmp	r3, #0
    16f8:	bne.n	167c <storeData(int) [clone .part.0]+0x4bc>
    16fa:	b.n	159c <storeData(int) [clone .part.0]+0x3dc>
			f->close();
    16fc:	mov	r0, r7
    16fe:	blx	r3
    1700:	b.n	123e <storeData(int) [clone .part.0]+0x7e>
		return (f) ? f->write(buf, size) : 0;
    1702:	mov.w	r2, #512	; 0x200
    1706:	ldr	r1, [pc, #88]	; (1760 <storeData(int) [clone .part.0]+0x5a0>)
    1708:	mov	r0, r3
    170a:	blx	r4
    170c:	b.n	1326 <storeData(int) [clone .part.0]+0x166>
			f->close();
    170e:	mov	r0, r4
    1710:	blx	r3
    1712:	b.n	13b8 <storeData(int) [clone .part.0]+0x1f8>
		return (f) ? f->write(buf, size) : 0;
    1714:	mov.w	r2, #4096	; 0x1000
    1718:	ldr	r1, [pc, #72]	; (1764 <storeData(int) [clone .part.0]+0x5a4>)
    171a:	mov	r0, r4
    171c:	blx	r3
    171e:	b.n	1376 <storeData(int) [clone .part.0]+0x1b6>
		return (f) ? f->isOpen() : false;
    1720:	blx	r3
    1722:	cmp	r0, #0
    1724:	beq.w	159c <storeData(int) [clone .part.0]+0x3dc>
    1728:	b.n	167c <storeData(int) [clone .part.0]+0x4bc>
			delete f;
    172a:	mov	r0, r4
    172c:	blx	r3
    172e:	b.n	1282 <storeData(int) [clone .part.0]+0xc2>
    1730:	.word	0x20006904
    1734:	.word	0x200079c4
    1738:	.word	0x20005304
    173c:	.word	0x20000ae8
    1740:	.word	0x20000b44
    1744:	.word	0x20000ab8
    1748:	.word	0x200079b0
    174c:	.word	0x000001d5
    1750:	.word	0x000008f5
    1754:	.word	0x20001468
    1758:	.word	0x20000534
    175c:	.word	0x20000558
    1760:	.word	0x20007a44
    1764:	.word	0x20006984
    1768:	.word	0x00000071
    176c:	.word	0x2000099c
    1770:	ldr	r3, [r7, #84]	; 0x54
    1772:	cmp	r3, #0
    1774:	bne.w	13e0 <storeData(int) [clone .part.0]+0x220>
    1778:	b.n	13e8 <storeData(int) [clone .part.0]+0x228>
    177a:	ldr	r3, [r6, #84]	; 0x54
    177c:	cmp	r3, #0
    177e:	bne.w	1548 <storeData(int) [clone .part.0]+0x388>
    1782:	b.n	1550 <storeData(int) [clone .part.0]+0x390>
    1784:	ldr	r3, [r4, #84]	; 0x54
    1786:	cmp	r3, #0
    1788:	bne.w	1620 <storeData(int) [clone .part.0]+0x460>
    178c:	b.n	1628 <storeData(int) [clone .part.0]+0x468>
    178e:	ldr	r3, [r4, #84]	; 0x54
    1790:	cmp	r3, #0
    1792:	bne.w	1414 <storeData(int) [clone .part.0]+0x254>
    1796:	b.n	141a <storeData(int) [clone .part.0]+0x25a>
			f->close();
    1798:	mov	r0, r4
    179a:	blx	r3
    179c:	b.n	1628 <storeData(int) [clone .part.0]+0x468>
    179e:	mov	r0, r6
    17a0:	blx	r3
    17a2:	b.n	1550 <storeData(int) [clone .part.0]+0x390>
			delete f;
    17a4:	mov	r0, r4
    17a6:	blx	r3
    17a8:	b.n	142c <storeData(int) [clone .part.0]+0x26c>
    17aa:	ldr	r3, [r6, #84]	; 0x54
    17ac:	cmp	r3, #0
    17ae:	bne.w	157c <storeData(int) [clone .part.0]+0x3bc>
    17b2:	b.n	1582 <storeData(int) [clone .part.0]+0x3c2>
    17b4:	ldr	r3, [r4, #84]	; 0x54
    17b6:	cmp	r3, #0
    17b8:	bne.w	164e <storeData(int) [clone .part.0]+0x48e>
    17bc:	b.n	1654 <storeData(int) [clone .part.0]+0x494>
    17be:	ldr.w	r1, [r4, #1160]	; 0x488
           : m_xVol ? m_xVol->mkdir(path, pFlag)
    17c2:	cmp	r1, #0
    17c4:	beq.w	12e0 <storeData(int) [clone .part.0]+0x120>
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char* path, bool pFlag = true) {
    ExFatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
    17c8:	movs	r3, #1
    17ca:	ldr	r2, [pc, #60]	; (1808 <storeData(int) [clone .part.0]+0x648>)
    17cc:	add.w	r1, r1, #1096	; 0x448
    17d0:	mov	r0, r5
    17d2:	str	r6, [sp, #48]	; 0x30
    17d4:	bl	4e3c <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
    17d8:	cmp	r0, #0
    17da:	beq.w	12e0 <storeData(int) [clone .part.0]+0x120>
    17de:	b.n	149a <storeData(int) [clone .part.0]+0x2da>
    17e0:	mov	r0, r6
    17e2:	blx	r3
    17e4:	b.n	1594 <storeData(int) [clone .part.0]+0x3d4>
		if (--(f->refcount) == 0) {
    17e6:	ldr	r7, [r4, #4]
    17e8:	subs	r7, #1
    17ea:	b.n	15fc <storeData(int) [clone .part.0]+0x43c>
{ Serial.println();
    17ec:	ldr	r0, [pc, #28]	; (180c <storeData(int) [clone .part.0]+0x64c>)
    17ee:	bl	d05c <Print::println()>
    17f2:	movs	r1, #16
    17f4:	ldr	r0, [pc, #24]	; (1810 <storeData(int) [clone .part.0]+0x650>)
    17f6:	bl	a84c <usb_serial_write>
    17fa:	ldr	r0, [pc, #16]	; (180c <storeData(int) [clone .part.0]+0x64c>)
    17fc:	bl	d05c <Print::println()>
          if(!newFileName(fileName))return ErrorMsg("Failing new file");
    1800:	mov.w	r0, #4294967295
    1804:	b.n	143c <storeData(int) [clone .part.0]+0x27c>
    1806:	nop
    1808:	.word	0x20006904
    180c:	.word	0x20001468
    1810:	.word	0x20000520

00001814 <storeBegin()>:
{
    1814:	push	{r3, r4, r5, r6, r7, lr}
    1816:	movs	r4, #5
    if(!(SD.begin(BUILTIN_SDCARD))) 
    1818:	ldr	r6, [pc, #64]	; (185c <storeBegin()+0x48>)
    181a:	ldr	r5, [pc, #68]	; (1860 <storeBegin()+0x4c>)
    181c:	ldr	r7, [pc, #68]	; (1864 <storeBegin()+0x50>)
    181e:	movs	r1, #254	; 0xfe
    1820:	mov	r0, r6
    1822:	bl	2f80 <SDClass::begin(unsigned char)>
    1826:	mov	r3, r0
    1828:	movs	r1, #28
    182a:	mov	r0, r5
    182c:	cbnz	r3, 1844 <storeBegin()+0x30>
    182e:	bl	a84c <usb_serial_write>
    1832:	mov	r0, r7
    1834:	bl	d05c <Print::println()>
      delay(100);
    1838:	movs	r0, #100	; 0x64
    183a:	bl	b7d4 <delay>
  for(int ii=0;ii<5;ii++)
    183e:	subs	r4, #1
    1840:	bne.n	181e <storeBegin()+0xa>
}
    1842:	pop	{r3, r4, r5, r6, r7, pc}
    1844:	movs	r1, #13
    1846:	ldr	r0, [pc, #32]	; (1868 <storeBegin()+0x54>)
    1848:	bl	a84c <usb_serial_write>
    184c:	ldr	r0, [pc, #20]	; (1864 <storeBegin()+0x50>)
    184e:	bl	d05c <Print::println()>
      haveSD=1;
    1852:	ldr	r3, [pc, #24]	; (186c <storeBegin()+0x58>)
    1854:	movs	r2, #1
    1856:	strh	r2, [r3, #0]
}
    1858:	pop	{r3, r4, r5, r6, r7, pc}
    185a:	nop
    185c:	.word	0x20005300
    1860:	.word	0x20000494
    1864:	.word	0x20001468
    1868:	.word	0x200004b4
    186c:	.word	0x20008148

00001870 <setup>:
  AudioConnection          patchCord4(proc, 0, queue1, 0);
#else
  AudioConnection          patchCord4(acq, 0, queue1, 0);
#endif

void setup() {
    1870:	push	{r4, lr}
  // put your setup code here, to run once:
  AudioMemory(60);
    1872:	movs	r1, #60	; 0x3c
    1874:	ldr	r0, [pc, #44]	; (18a4 <setup+0x34>)
    1876:	bl	13698 <___ZN11AudioStream17initialize_memoryEP18audio_block_structj_veneer>
  void digitalShift(int32_t val){I2S_32::shift=val;}
    187a:	ldr	r1, [pc, #44]	; (18a8 <setup+0x38>)
    187c:	movs	r0, #14
    num = HW_OCOTP_MAC0 & 0xFFFFFF;
    187e:	ldr	r3, [pc, #44]	; (18ac <setup+0x3c>)
  acq.digitalShift(shift);

  SerNum=getTeensySerial();
    1880:	ldr	r2, [pc, #44]	; (18b0 <setup+0x40>)
    1882:	str	r0, [r1, #0]
    1884:	ldr.w	r3, [r3, #544]	; 0x220
#endif
public:
	AudioRecordQueue(void) : AudioStream(1, inputQueueArray),
		userblock(NULL), head(0), tail(0), enabled(0) { }
	void begin(void) {
		clear();
    1888:	ldr	r4, [pc, #40]	; (18b4 <setup+0x44>)
    188a:	bic.w	r3, r3, #4278190080	; 0xff000000
    188e:	str	r3, [r2, #0]
  
  #if STARTMODE==-1
    while(!Serial);
  #endif

  storeBegin();
    1890:	bl	1814 <storeBegin()>
    1894:	mov	r0, r4
    1896:	bl	1fb0 <AudioRecordQueue::clear()>
		enabled = 1;
    189a:	movs	r3, #1
    189c:	strb.w	r3, [r4, #870]	; 0x366

  queue1.begin();
}
    18a0:	pop	{r4, pc}
    18a2:	nop
    18a4:	.word	0x20200000
    18a8:	.word	0x20001488
    18ac:	.word	0x401f4400
    18b0:	.word	0x200058c0
    18b4:	.word	0x20007d0c

000018b8 <loop>:
  #define CPU_RESTART (*CPU_RESTART_ADDR = CPU_RESTART_VAL)

extern int16_t srcData;
extern int32_t acqData;
extern int16_t tempData0[];
void loop() {
    18b8:	push	{r4, r5, r6, r7, lr}
    18ba:	sub	sp, #36	; 0x24
        virtual int available() { return usb_serial_available(); }
    18bc:	bl	a778 <usb_serial_available>
  // put your main code here, to run repeatedly:

  static int16_t status=START_MODE;

  // basic menu to start and stop archiving
  if(Serial.available())
    18c0:	cmp	r0, #0
    18c2:	bne.n	1948 <loop+0x90>
    18c4:	ldr	r6, [pc, #324]	; (1a0c <loop+0x154>)
    if(ch=='b') _reboot_Teensyduino_();
    while(Serial.available()) Serial.read();
  }

  // check end of file
  status=checkEndOfFile(status);
    18c6:	ldrsh.w	r4, [r6]
{ uint32_t tx=rtc_get();
    18ca:	bl	bab0 <rtc_get>
  tx = tx % t_acq;
    18ce:	ldr	r3, [pc, #320]	; (1a10 <loop+0x158>)
  if((status>1) && (tx_>0) && (tx < tx_)) status=3;
    18d0:	cmp	r4, #1
  tx = tx % t_acq;
    18d2:	umull	r2, r3, r3, r0
  if((status>1) && (tx_>0) && (tx < tx_)) status=3;
    18d6:	ldr	r2, [pc, #316]	; (1a14 <loop+0x15c>)
  tx = tx % t_acq;
    18d8:	mov.w	r3, r3, lsr #5
    18dc:	rsb	r3, r3, r3, lsl #4
    18e0:	sub.w	r3, r0, r3, lsl #2
  if((status>1) && (tx_>0) && (tx < tx_)) status=3;
    18e4:	ble.n	18ee <loop+0x36>
    18e6:	ldr	r1, [r2, #0]
    18e8:	cmp	r3, r1
    18ea:	it	cc
    18ec:	movcc	r4, #3

  // if available transfer data to disk
  if(queue1.available()>=NBUF)
    18ee:	ldr	r0, [pc, #296]	; (1a18 <loop+0x160>)
  tx_=tx;
    18f0:	str	r3, [r2, #0]
  status=checkEndOfFile(status);
    18f2:	strh	r4, [r6, #0]
  if(queue1.available()>=NBUF)
    18f4:	bl	1f98 <AudioRecordQueue::available()>
    18f8:	cmp	r0, #15
    18fa:	ble.n	1934 <loop+0x7c>
    18fc:	ldr	r4, [pc, #284]	; (1a1c <loop+0x164>)
  { // fetch data from buffer
    for(int ii=0; ii<NBUF; ii++)
    { int16_t *buffer= queue1.readBuffer();
    18fe:	ldr	r5, [pc, #280]	; (1a18 <loop+0x160>)
    1900:	add.w	r7, r4, #4096	; 0x1000
    1904:	mov	r0, r5
    1906:	bl	1ff8 <AudioRecordQueue::readBuffer()>
      memcpy(diskBuffer+ii*NSAMP, buffer, 2*NSAMP);
    190a:	mov.w	r2, #256	; 0x100
    { int16_t *buffer= queue1.readBuffer();
    190e:	mov	r1, r0
      memcpy(diskBuffer+ii*NSAMP, buffer, 2*NSAMP);
    1910:	mov	r0, r4
    for(int ii=0; ii<NBUF; ii++)
    1912:	add	r4, r2
      memcpy(diskBuffer+ii*NSAMP, buffer, 2*NSAMP);
    1914:	bl	a0d4 <memcpy>
      queue1.freeBuffer();
    1918:	mov	r0, r5
    191a:	bl	2034 <AudioRecordQueue::freeBuffer()>
    for(int ii=0; ii<NBUF; ii++)
    191e:	cmp	r7, r4
    1920:	bne.n	1904 <loop+0x4c>
  if(!haveSD) return status;
    1922:	ldr	r3, [pc, #252]	; (1a20 <loop+0x168>)
    }

    // write data to disk
    //-------------------
    status=storeData(status);
    1924:	ldrsh.w	r0, [r6]
    1928:	ldrsh.w	r3, [r3]
    192c:	cbz	r3, 1932 <loop+0x7a>
    192e:	bl	11c0 <storeData(int) [clone .part.0]>
    1932:	strh	r0, [r6, #0]
    1934:	ldr	r2, [pc, #236]	; (1a24 <loop+0x16c>)
  
  // print some statistics every second
  static uint32_t t0=0;
  static uint32_t ic=0;
  
  if(millis()-t0>1000)
    1936:	ldr	r1, [pc, #240]	; (1a28 <loop+0x170>)
    1938:	ldr	r3, [r2, #0]
    193a:	ldr	r0, [r1, #0]
    193c:	subs	r3, r3, r0
    193e:	cmp.w	r3, #1000	; 0x3e8
    1942:	bhi.n	196c <loop+0xb4>
        ic++, rtc_get()%60, AudioMemoryUsageMax(), 
        (float) fsamp/(float)(disk_count*NBUF*NSAMP), tempData0[0],acqData,srcData,status);
    AudioMemoryUsageMaxReset();
    disk_count=0;
  }
}
    1944:	add	sp, #36	; 0x24
    1946:	pop	{r4, r5, r6, r7, pc}
        virtual int read() { return usb_serial_getchar(); }
    1948:	bl	a800 <usb_serial_getchar>
    char ch=Serial.read();
    194c:	uxtb	r0, r0
    if(ch=='s') status=0;
    194e:	cmp	r0, #115	; 0x73
    1950:	beq.n	19e4 <loop+0x12c>
    if(ch=='e') status=4;
    1952:	cmp	r0, #101	; 0x65
    1954:	bne.n	19ec <loop+0x134>
    1956:	ldr	r6, [pc, #180]	; (1a0c <loop+0x154>)
    1958:	movs	r3, #4
    195a:	strh	r3, [r6, #0]
    if(ch=='b') _reboot_Teensyduino_();
    195c:	b.n	1962 <loop+0xaa>
    195e:	bl	a800 <usb_serial_getchar>
        virtual int available() { return usb_serial_available(); }
    1962:	bl	a778 <usb_serial_available>
    while(Serial.available()) Serial.read();
    1966:	cmp	r0, #0
    1968:	bne.n	195e <loop+0xa6>
    196a:	b.n	18c6 <loop+0xe>
    Serial.printf("\n%10d %2d %3d %.2f %6d %8x %8x %d",
    196c:	ldr	r3, [pc, #188]	; (1a2c <loop+0x174>)
    196e:	ldr	r2, [r2, #0]
    1970:	ldr	r7, [r3, #0]
  { t0=millis();
    1972:	str	r2, [r1, #0]
    Serial.printf("\n%10d %2d %3d %.2f %6d %8x %8x %d",
    1974:	adds	r2, r7, #1
        (float) fsamp/(float)(disk_count*NBUF*NSAMP), tempData0[0],acqData,srcData,status);
    1976:	ldr	r5, [pc, #184]	; (1a30 <loop+0x178>)
    Serial.printf("\n%10d %2d %3d %.2f %6d %8x %8x %d",
    1978:	ldr	r4, [pc, #184]	; (1a34 <loop+0x17c>)
    197a:	str	r2, [r3, #0]
        ic++, rtc_get()%60, AudioMemoryUsageMax(), 
    197c:	bl	bab0 <rtc_get>
    Serial.printf("\n%10d %2d %3d %.2f %6d %8x %8x %d",
    1980:	ldrsh.w	r3, [r6]
    1984:	mov	r2, r7
        (float) fsamp/(float)(disk_count*NBUF*NSAMP), tempData0[0],acqData,srcData,status);
    1986:	vldr	s13, [pc, #176]	; 1a38 <loop+0x180>
    Serial.printf("\n%10d %2d %3d %.2f %6d %8x %8x %d",
    198a:	str	r3, [sp, #28]
    198c:	ldr	r3, [pc, #172]	; (1a3c <loop+0x184>)
    198e:	ldrsh.w	r3, [r3]
    1992:	str	r3, [sp, #24]
    1994:	ldr	r3, [pc, #168]	; (1a40 <loop+0x188>)
    1996:	ldr	r3, [r3, #0]
    1998:	str	r3, [sp, #20]
        (float) fsamp/(float)(disk_count*NBUF*NSAMP), tempData0[0],acqData,srcData,status);
    199a:	ldr	r3, [pc, #168]	; (1a44 <loop+0x18c>)
    Serial.printf("\n%10d %2d %3d %.2f %6d %8x %8x %d",
    199c:	ldrsh.w	r3, [r3]
    19a0:	str	r3, [sp, #16]
        (float) fsamp/(float)(disk_count*NBUF*NSAMP), tempData0[0],acqData,srcData,status);
    19a2:	ldr	r1, [r5, #0]
    Serial.printf("\n%10d %2d %3d %.2f %6d %8x %8x %d",
    19a4:	ldrh	r3, [r4, #0]
        (float) fsamp/(float)(disk_count*NBUF*NSAMP), tempData0[0],acqData,srcData,status);
    19a6:	lsls	r1, r1, #11
    Serial.printf("\n%10d %2d %3d %.2f %6d %8x %8x %d",
    19a8:	str	r3, [sp, #0]
        (float) fsamp/(float)(disk_count*NBUF*NSAMP), tempData0[0],acqData,srcData,status);
    19aa:	vmov	s15, r1
    Serial.printf("\n%10d %2d %3d %.2f %6d %8x %8x %d",
    19ae:	ldr	r1, [pc, #96]	; (1a10 <loop+0x158>)
        (float) fsamp/(float)(disk_count*NBUF*NSAMP), tempData0[0],acqData,srcData,status);
    19b0:	vcvt.f32.u32	s15, s15
    Serial.printf("\n%10d %2d %3d %.2f %6d %8x %8x %d",
    19b4:	umull	r3, r1, r1, r0
    19b8:	lsrs	r1, r1, #5
        (float) fsamp/(float)(disk_count*NBUF*NSAMP), tempData0[0],acqData,srcData,status);
    19ba:	vdiv.f32	s14, s13, s15
    Serial.printf("\n%10d %2d %3d %.2f %6d %8x %8x %d",
    19be:	rsb	r1, r1, r1, lsl #4
    19c2:	sub.w	r3, r0, r1, lsl #2
    19c6:	ldr	r1, [pc, #128]	; (1a48 <loop+0x190>)
    19c8:	ldr	r0, [pc, #128]	; (1a4c <loop+0x194>)
    19ca:	vcvt.f64.f32	d7, s14
    19ce:	vstr	d7, [sp, #8]
    19d2:	bl	d088 <Print::printf(char const*, ...)>
    AudioMemoryUsageMaxReset();
    19d6:	ldr	r3, [pc, #120]	; (1a50 <loop+0x198>)
    disk_count=0;
    19d8:	movs	r2, #0
    AudioMemoryUsageMaxReset();
    19da:	ldrh	r3, [r3, #0]
    disk_count=0;
    19dc:	str	r2, [r5, #0]
    AudioMemoryUsageMaxReset();
    19de:	strh	r3, [r4, #0]
}
    19e0:	add	sp, #36	; 0x24
    19e2:	pop	{r4, r5, r6, r7, pc}
    if(ch=='s') status=0;
    19e4:	ldr	r6, [pc, #36]	; (1a0c <loop+0x154>)
    19e6:	movs	r3, #0
    19e8:	strh	r3, [r6, #0]
    if(ch=='b') _reboot_Teensyduino_();
    19ea:	b.n	1962 <loop+0xaa>
    if(ch=='x') CPU_RESTART;
    19ec:	cmp	r0, #120	; 0x78
    19ee:	bne.n	19fe <loop+0x146>
    19f0:	mov.w	r3, #3758153728	; 0xe000e000
    19f4:	ldr	r2, [pc, #92]	; (1a54 <loop+0x19c>)
    19f6:	ldr	r6, [pc, #20]	; (1a0c <loop+0x154>)
    19f8:	str.w	r2, [r3, #3340]	; 0xd0c
    if(ch=='b') _reboot_Teensyduino_();
    19fc:	b.n	1962 <loop+0xaa>
    19fe:	cmp	r0, #98	; 0x62
    1a00:	bne.n	1a06 <loop+0x14e>
    1a02:	bl	136a0 <___reboot_Teensyduino__veneer>
    1a06:	ldr	r6, [pc, #4]	; (1a0c <loop+0x154>)
    1a08:	b.n	1962 <loop+0xaa>
    1a0a:	nop
    1a0c:	.word	0x20008144
    1a10:	.word	0x88888889
    1a14:	.word	0x200080f4
    1a18:	.word	0x20007d0c
    1a1c:	.word	0x20006984
    1a20:	.word	0x20008148
    1a24:	.word	0x200080e8
    1a28:	.word	0x200065d0
    1a2c:	.word	0x200065cc
    1a30:	.word	0x20007984
    1a34:	.word	0x20008136
    1a38:	.word	0x472c4400
    1a3c:	.word	0x2000814e
    1a40:	.word	0x20006900
    1a44:	.word	0x200080f0
    1a48:	.word	0x2000122c
    1a4c:	.word	0x20001468
    1a50:	.word	0x20008134
    1a54:	.word	0x05fa0004

00001a58 <_GLOBAL__sub_I_DirPrefix>:
}
    1a58:	push	{r4, r5, r6, lr}
DMAChannel I2S_32::dma(false);
    1a5a:	ldr	r2, [pc, #364]	; (1bc8 <_GLOBAL__sub_I_DirPrefix+0x170>)
    1a5c:	sub	sp, #8
    1a5e:	ldr	r1, [pc, #364]	; (1bcc <_GLOBAL__sub_I_DirPrefix+0x174>)
	constexpr Print() : write_error(0) {}
    1a60:	movs	r4, #0
    1a62:	ldr	r0, [pc, #364]	; (1bd0 <_GLOBAL__sub_I_DirPrefix+0x178>)
    1a64:	bl	d234 <__aeabi_atexit>
    1a68:	ldr	r0, [pc, #360]	; (1bd4 <_GLOBAL__sub_I_DirPrefix+0x17c>)
	File(FileImpl *file) {
    1a6a:	ldr	r3, [pc, #364]	; (1bd8 <_GLOBAL__sub_I_DirPrefix+0x180>)
	constexpr Stream() : _timeout(1000), read_error(0) {}
    1a6c:	mov.w	r1, #1000	; 0x3e8
			for (int i=0; i < num_inputs; i++) {
				inputQueue[i] = NULL;
			}
			// add to a simple list, for update_all
			// TODO: replace with a proper data flow analysis in update_all
			if (first_update == NULL) {
    1a70:	ldr	r5, [pc, #360]	; (1bdc <_GLOBAL__sub_I_DirPrefix+0x184>)
File file=NULL; 
    1a72:	ldr	r2, [pc, #340]	; (1bc8 <_GLOBAL__sub_I_DirPrefix+0x170>)
    1a74:	str	r1, [r0, #8]
    1a76:	str	r3, [r0, #0]
    1a78:	ldr	r1, [pc, #356]	; (1be0 <_GLOBAL__sub_I_DirPrefix+0x188>)
    1a7a:	strb	r4, [r0, #4]
    1a7c:	strb	r4, [r0, #12]
		f = file;
    1a7e:	str	r4, [r0, #16]
    1a80:	bl	d234 <__aeabi_atexit>
		num_inputs(ninput), inputQueue(iqueue) {
    1a84:	ldr	r6, [pc, #348]	; (1be4 <_GLOBAL__sub_I_DirPrefix+0x18c>)
    1a86:	ldr	r2, [pc, #352]	; (1be8 <_GLOBAL__sub_I_DirPrefix+0x190>)
			if (first_update == NULL) {
    1a88:	ldr	r3, [r5, #0]
		num_inputs(ninput), inputQueue(iqueue) {
    1a8a:	str	r6, [r2, #0]
    1a8c:	str	r4, [r2, #16]
			active = false;
    1a8e:	strh	r4, [r2, #8]
			destination_list = NULL;
    1a90:	str	r4, [r2, #12]
			if (first_update == NULL) {
    1a92:	cmp	r3, #0
    1a94:	beq.w	1bba <_GLOBAL__sub_I_DirPrefix+0x162>
				first_update = this;
			} else {
				AudioStream *p;
				for (p=first_update; p->next_update; p = p->next_update) ;
    1a98:	mov	r1, r3
    1a9a:	ldr	r3, [r3, #20]
    1a9c:	cmp	r3, #0
    1a9e:	bne.n	1a98 <_GLOBAL__sub_I_DirPrefix+0x40>
				p->next_update = this;
    1aa0:	str	r2, [r1, #20]
			}
			next_update = NULL;
    1aa2:	movs	r4, #0
	I2S_32(void) : AudioStream(0, NULL) {begin();}
    1aa4:	ldr	r3, [pc, #324]	; (1bec <_GLOBAL__sub_I_DirPrefix+0x194>)
    1aa6:	ldr	r0, [pc, #320]	; (1be8 <_GLOBAL__sub_I_DirPrefix+0x190>)
    1aa8:	str	r3, [r2, #0]
    1aaa:	str	r4, [r2, #20]
			cpu_cycles = 0;
    1aac:	str	r4, [r2, #4]
			cpu_cycles_max = 0;
			numConnections = 0;
    1aae:	strb	r4, [r2, #10]
    1ab0:	bl	c20 <I2S_32::begin()>
		num_inputs(ninput), inputQueue(iqueue) {
    1ab4:	ldr	r2, [pc, #312]	; (1bf0 <_GLOBAL__sub_I_DirPrefix+0x198>)
			if (first_update == NULL) {
    1ab6:	ldr	r3, [r5, #0]
		num_inputs(ninput), inputQueue(iqueue) {
    1ab8:	mov	r1, r2
			destination_list = NULL;
    1aba:	str	r4, [r2, #12]
		num_inputs(ninput), inputQueue(iqueue) {
    1abc:	str.w	r6, [r1], #24
    1ac0:	str	r1, [r2, #16]
			active = false;
    1ac2:	mov.w	r1, #512	; 0x200
				inputQueue[i] = NULL;
    1ac6:	strd	r4, r4, [r2, #24]
			active = false;
    1aca:	strh	r1, [r2, #8]
			if (first_update == NULL) {
    1acc:	cmp	r3, #0
    1ace:	beq.n	1bc4 <_GLOBAL__sub_I_DirPrefix+0x16c>
				for (p=first_update; p->next_update; p = p->next_update) ;
    1ad0:	mov	r1, r3
    1ad2:	ldr	r3, [r3, #20]
    1ad4:	cmp	r3, #0
    1ad6:	bne.n	1ad0 <_GLOBAL__sub_I_DirPrefix+0x78>
				p->next_update = this;
    1ad8:	str	r2, [r1, #20]
			next_update = NULL;
    1ada:	movs	r4, #0
};

class AudioOutputUSB : public AudioStream
{
public:
	AudioOutputUSB(void) : AudioStream(2, inputQueueArray) { begin(); }
    1adc:	ldr	r3, [pc, #276]	; (1bf4 <_GLOBAL__sub_I_DirPrefix+0x19c>)
    1ade:	ldr	r0, [pc, #272]	; (1bf0 <_GLOBAL__sub_I_DirPrefix+0x198>)
    1ae0:	str	r4, [r2, #20]
			cpu_cycles = 0;
    1ae2:	str	r4, [r2, #4]
			numConnections = 0;
    1ae4:	strb	r4, [r2, #10]
    1ae6:	str	r3, [r2, #0]
    1ae8:	bl	cd04 <AudioOutputUSB::begin()>
		num_inputs(ninput), inputQueue(iqueue) {
    1aec:	ldr	r2, [pc, #264]	; (1bf8 <_GLOBAL__sub_I_DirPrefix+0x1a0>)
			active = false;
    1aee:	mov.w	r1, #256	; 0x100
		num_inputs(ninput), inputQueue(iqueue) {
    1af2:	mov	r3, r2
			destination_list = NULL;
    1af4:	str	r4, [r2, #12]
				inputQueue[i] = NULL;
    1af6:	str	r4, [r2, #24]
			if (first_update == NULL) {
    1af8:	ldr	r4, [r5, #0]
		num_inputs(ninput), inputQueue(iqueue) {
    1afa:	str.w	r6, [r3], #24
			active = false;
    1afe:	strh	r1, [r2, #8]
		num_inputs(ninput), inputQueue(iqueue) {
    1b00:	str	r3, [r2, #16]
			if (first_update == NULL) {
    1b02:	cmp	r4, #0
    1b04:	beq.n	1bbe <_GLOBAL__sub_I_DirPrefix+0x166>
    1b06:	mov	r3, r4
				for (p=first_update; p->next_update; p = p->next_update) ;
    1b08:	mov	r1, r3
    1b0a:	ldr	r3, [r3, #20]
    1b0c:	cmp	r3, #0
    1b0e:	bne.n	1b08 <_GLOBAL__sub_I_DirPrefix+0xb0>
				p->next_update = this;
    1b10:	str	r2, [r1, #20]
			next_update = NULL;
    1b12:	movs	r3, #0
		num_inputs(ninput), inputQueue(iqueue) {
    1b14:	ldr	r1, [pc, #228]	; (1bfc <_GLOBAL__sub_I_DirPrefix+0x1a4>)
		userblock(NULL), head(0), tail(0), enabled(0) { }
    1b16:	ldr	r0, [pc, #232]	; (1c00 <_GLOBAL__sub_I_DirPrefix+0x1a8>)
    1b18:	strb.w	r3, [r2, #868]	; 0x364
    1b1c:	str	r0, [r2, #0]
    1b1e:	movs	r0, #1
    1b20:	strb.w	r3, [r2, #869]	; 0x365
			next_update = NULL;
    1b24:	str	r3, [r2, #20]
			cpu_cycles = 0;
    1b26:	str	r3, [r2, #4]
			numConnections = 0;
    1b28:	strb	r3, [r2, #10]
    1b2a:	str.w	r3, [r2, #864]	; 0x360
    1b2e:	strb.w	r3, [r2, #870]	; 0x366
		num_inputs(ninput), inputQueue(iqueue) {
    1b32:	add.w	r2, r1, #24
			active = false;
    1b36:	strb	r3, [r1, #8]
		num_inputs(ninput), inputQueue(iqueue) {
    1b38:	strb	r0, [r1, #9]
			destination_list = NULL;
    1b3a:	str	r3, [r1, #12]
				inputQueue[i] = NULL;
    1b3c:	str	r3, [r1, #24]
		num_inputs(ninput), inputQueue(iqueue) {
    1b3e:	str	r2, [r1, #16]
				for (p=first_update; p->next_update; p = p->next_update) ;
    1b40:	mov	r2, r4
    1b42:	ldr	r4, [r4, #20]
    1b44:	cmp	r4, #0
    1b46:	bne.n	1b40 <_GLOBAL__sub_I_DirPrefix+0xe8>
  AudioCompress() : AudioStream(1, inputQueueArray) { }
    1b48:	ldr	r0, [pc, #184]	; (1c04 <_GLOBAL__sub_I_DirPrefix+0x1ac>)
				p->next_update = this;
    1b4a:	str	r1, [r2, #20]
AudioConnection          patchCord1(acq, 0, usb1, 0);
    1b4c:	mov	r2, r4
    1b4e:	str	r4, [sp, #0]
    1b50:	ldr	r3, [pc, #156]	; (1bf0 <_GLOBAL__sub_I_DirPrefix+0x198>)
			next_update = NULL;
    1b52:	str	r4, [r1, #20]
			cpu_cycles = 0;
    1b54:	str	r4, [r1, #4]
			numConnections = 0;
    1b56:	strb	r4, [r1, #10]
    1b58:	str	r0, [r1, #0]
    1b5a:	ldr	r1, [pc, #140]	; (1be8 <_GLOBAL__sub_I_DirPrefix+0x190>)
    1b5c:	ldr	r0, [pc, #168]	; (1c08 <_GLOBAL__sub_I_DirPrefix+0x1b0>)
    1b5e:	bl	c81c <AudioConnection::AudioConnection(AudioStream&, unsigned char, AudioStream&, unsigned char)>
    1b62:	ldr	r2, [pc, #100]	; (1bc8 <_GLOBAL__sub_I_DirPrefix+0x170>)
    1b64:	ldr	r1, [pc, #164]	; (1c0c <_GLOBAL__sub_I_DirPrefix+0x1b4>)
    1b66:	ldr	r0, [pc, #160]	; (1c08 <_GLOBAL__sub_I_DirPrefix+0x1b0>)
    1b68:	bl	d234 <__aeabi_atexit>
AudioConnection          patchCord2(acq, 1, usb1, 1);
    1b6c:	movs	r2, #1
    1b6e:	ldr	r3, [pc, #128]	; (1bf0 <_GLOBAL__sub_I_DirPrefix+0x198>)
    1b70:	str	r2, [sp, #0]
    1b72:	ldr	r1, [pc, #116]	; (1be8 <_GLOBAL__sub_I_DirPrefix+0x190>)
    1b74:	ldr	r0, [pc, #152]	; (1c10 <_GLOBAL__sub_I_DirPrefix+0x1b8>)
    1b76:	bl	c81c <AudioConnection::AudioConnection(AudioStream&, unsigned char, AudioStream&, unsigned char)>
    1b7a:	ldr	r2, [pc, #76]	; (1bc8 <_GLOBAL__sub_I_DirPrefix+0x170>)
    1b7c:	ldr	r1, [pc, #140]	; (1c0c <_GLOBAL__sub_I_DirPrefix+0x1b4>)
    1b7e:	ldr	r0, [pc, #144]	; (1c10 <_GLOBAL__sub_I_DirPrefix+0x1b8>)
    1b80:	bl	d234 <__aeabi_atexit>
  AudioConnection          patchCord3(acq,  0, proc, 0);
    1b84:	ldr	r3, [pc, #116]	; (1bfc <_GLOBAL__sub_I_DirPrefix+0x1a4>)
    1b86:	mov	r2, r4
    1b88:	ldr	r1, [pc, #92]	; (1be8 <_GLOBAL__sub_I_DirPrefix+0x190>)
    1b8a:	str	r4, [sp, #0]
    1b8c:	ldr	r0, [pc, #132]	; (1c14 <_GLOBAL__sub_I_DirPrefix+0x1bc>)
    1b8e:	bl	c81c <AudioConnection::AudioConnection(AudioStream&, unsigned char, AudioStream&, unsigned char)>
    1b92:	ldr	r2, [pc, #52]	; (1bc8 <_GLOBAL__sub_I_DirPrefix+0x170>)
    1b94:	ldr	r1, [pc, #116]	; (1c0c <_GLOBAL__sub_I_DirPrefix+0x1b4>)
    1b96:	ldr	r0, [pc, #124]	; (1c14 <_GLOBAL__sub_I_DirPrefix+0x1bc>)
    1b98:	bl	d234 <__aeabi_atexit>
  AudioConnection          patchCord4(proc, 0, queue1, 0);
    1b9c:	mov	r2, r4
    1b9e:	ldr	r1, [pc, #92]	; (1bfc <_GLOBAL__sub_I_DirPrefix+0x1a4>)
    1ba0:	ldr	r3, [pc, #84]	; (1bf8 <_GLOBAL__sub_I_DirPrefix+0x1a0>)
    1ba2:	str	r4, [sp, #0]
    1ba4:	ldr	r0, [pc, #112]	; (1c18 <_GLOBAL__sub_I_DirPrefix+0x1c0>)
    1ba6:	bl	c81c <AudioConnection::AudioConnection(AudioStream&, unsigned char, AudioStream&, unsigned char)>
    1baa:	ldr	r2, [pc, #28]	; (1bc8 <_GLOBAL__sub_I_DirPrefix+0x170>)
    1bac:	ldr	r1, [pc, #92]	; (1c0c <_GLOBAL__sub_I_DirPrefix+0x1b4>)
    1bae:	ldr	r0, [pc, #104]	; (1c18 <_GLOBAL__sub_I_DirPrefix+0x1c0>)
}
    1bb0:	add	sp, #8
    1bb2:	ldmia.w	sp!, {r4, r5, r6, lr}
  AudioConnection          patchCord4(proc, 0, queue1, 0);
    1bb6:	b.w	d234 <__aeabi_atexit>
				first_update = this;
    1bba:	str	r2, [r5, #0]
    1bbc:	b.n	1aa2 <_GLOBAL__sub_I_DirPrefix+0x4a>
    1bbe:	mov	r4, r2
    1bc0:	str	r2, [r5, #0]
    1bc2:	b.n	1b12 <_GLOBAL__sub_I_DirPrefix+0xba>
    1bc4:	str	r2, [r5, #0]
    1bc6:	b.n	1ada <_GLOBAL__sub_I_DirPrefix+0x82>
    1bc8:	.word	0x20001498
    1bcc:	.word	0x000001fd
    1bd0:	.word	0x200065bc
    1bd4:	.word	0x200079b0
    1bd8:	.word	0x20000a8c
    1bdc:	.word	0x20006410
    1be0:	.word	0x000009cd
    1be4:	.word	0x200009c0
    1be8:	.word	0x200068e8
    1bec:	.word	0x20000adc
    1bf0:	.word	0x200080f8
    1bf4:	.word	0x200009d8
    1bf8:	.word	0x20007d0c
    1bfc:	.word	0x20007cb0
    1c00:	.word	0x200009e4
    1c04:	.word	0x200009cc
    1c08:	.word	0x20007c60
    1c0c:	.word	0x0000c8d9
    1c10:	.word	0x20007c74
    1c14:	.word	0x20007c88
    1c18:	.word	0x20007c9c

00001c1c <_GLOBAL__sub_I__ZN17AudioOutputI2SOct13block_ch1_1stE>:
uint16_t  AudioOutputI2SOct::ch6_offset = 0;
uint16_t  AudioOutputI2SOct::ch7_offset = 0;
uint16_t  AudioOutputI2SOct::ch8_offset = 0;
bool AudioOutputI2SOct::update_responsibility = false;
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES*4];
DMAChannel AudioOutputI2SOct::dma(false);
    1c1c:	ldr	r2, [pc, #8]	; (1c28 <_GLOBAL__sub_I__ZN17AudioOutputI2SOct13block_ch1_1stE+0xc>)
    1c1e:	ldr	r1, [pc, #12]	; (1c2c <_GLOBAL__sub_I__ZN17AudioOutputI2SOct13block_ch1_1stE+0x10>)
    1c20:	ldr	r0, [pc, #12]	; (1c30 <_GLOBAL__sub_I__ZN17AudioOutputI2SOct13block_ch1_1stE+0x14>)
    1c22:	b.w	d234 <__aeabi_atexit>
    1c26:	nop
    1c28:	.word	0x20001498
    1c2c:	.word	0x000001fd
    1c30:	.word	0x2000657c

00001c34 <__tcf_0>:

extern uint8_t analog_write_res;
extern const struct _pwm_pin_info_struct pwm_pin_info[];
volatile audio_block_t * AudioOutputPWM::block = NULL;
DMAMEM __attribute__((aligned(32))) static uint16_t pwm_tx_buffer[2][AUDIO_BLOCK_SAMPLES * 2];
DMAChannel AudioOutputPWM::dma[2];
    1c34:	push	{r4, lr}
		release();
    1c36:	ldr	r4, [pc, #20]	; (1c4c <__tcf_0+0x18>)
    1c38:	add.w	r0, r4, #8
    1c3c:	bl	c374 <DMAChannel::release()>
    1c40:	mov	r0, r4
    1c42:	ldmia.w	sp!, {r4, lr}
    1c46:	b.w	c374 <DMAChannel::release()>
    1c4a:	nop
    1c4c:	.word	0x200064dc

00001c50 <_GLOBAL__sub_I__ZN14AudioOutputPWM21update_responsibilityE>:
	old_block = (audio_block_t*)block ;  // block is defined as volatile
	block = new_block ;
	__enable_irq();
	if (old_block)
		release (old_block);
}
    1c50:	push	{r4, lr}
		begin();
    1c52:	ldr	r4, [pc, #32]	; (1c74 <_GLOBAL__sub_I__ZN14AudioOutputPWM21update_responsibilityE+0x24>)
    1c54:	movs	r1, #0
    1c56:	mov	r0, r4
    1c58:	bl	c2c0 <DMAChannel::begin(bool)>
    1c5c:	add.w	r0, r4, #8
    1c60:	movs	r1, #0
    1c62:	bl	c2c0 <DMAChannel::begin(bool)>
DMAChannel AudioOutputPWM::dma[2];
    1c66:	ldr	r2, [pc, #16]	; (1c78 <_GLOBAL__sub_I__ZN14AudioOutputPWM21update_responsibilityE+0x28>)
    1c68:	ldr	r1, [pc, #16]	; (1c7c <_GLOBAL__sub_I__ZN14AudioOutputPWM21update_responsibilityE+0x2c>)
    1c6a:	movs	r0, #0
}
    1c6c:	ldmia.w	sp!, {r4, lr}
DMAChannel AudioOutputPWM::dma[2];
    1c70:	b.w	d234 <__aeabi_atexit>
    1c74:	.word	0x200064dc
    1c78:	.word	0x20001498
    1c7c:	.word	0x00001c35

00001c80 <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE>:
DMAChannel AudioInputI2S::dma(false);
    1c80:	ldr	r2, [pc, #8]	; (1c8c <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE+0xc>)
    1c82:	ldr	r1, [pc, #12]	; (1c90 <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE+0x10>)
    1c84:	ldr	r0, [pc, #12]	; (1c94 <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE+0x14>)
    1c86:	b.w	d234 <__aeabi_atexit>
    1c8a:	nop
    1c8c:	.word	0x20001498
    1c90:	.word	0x000001fd
    1c94:	.word	0x2000648c

00001c98 <_GLOBAL__sub_I__ZN19AudioOutputPT8211_214block_left_1stE>:
DMAChannel AudioOutputPT8211_2::dma(false);
    1c98:	ldr	r2, [pc, #8]	; (1ca4 <_GLOBAL__sub_I__ZN19AudioOutputPT8211_214block_left_1stE+0xc>)
    1c9a:	ldr	r1, [pc, #12]	; (1ca8 <_GLOBAL__sub_I__ZN19AudioOutputPT8211_214block_left_1stE+0x10>)
    1c9c:	ldr	r0, [pc, #12]	; (1cac <_GLOBAL__sub_I__ZN19AudioOutputPT8211_214block_left_1stE+0x14>)
    1c9e:	b.w	d234 <__aeabi_atexit>
    1ca2:	nop
    1ca4:	.word	0x20001498
    1ca8:	.word	0x000001fd
    1cac:	.word	0x200065a4

00001cb0 <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE>:
#if defined(AUDIO_PT8211_OVERSAMPLING)
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES*4];
#else
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES];
#endif
DMAChannel AudioOutputPT8211::dma(false);
    1cb0:	ldr	r2, [pc, #8]	; (1cbc <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE+0xc>)
    1cb2:	ldr	r1, [pc, #12]	; (1cc0 <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE+0x10>)
    1cb4:	ldr	r0, [pc, #12]	; (1cc4 <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE+0x14>)
    1cb6:	b.w	d234 <__aeabi_atexit>
    1cba:	nop
    1cbc:	.word	0x20001498
    1cc0:	.word	0x000001fd
    1cc4:	.word	0x20006584

00001cc8 <_GLOBAL__sub_I__ZN16AudioInputSPDIF310block_leftE>:
static uint32_t spdif_rx_buffer[AUDIO_BLOCK_SAMPLES * 4];
audio_block_t * AudioInputSPDIF3::block_left = NULL;
audio_block_t * AudioInputSPDIF3::block_right = NULL;
uint16_t AudioInputSPDIF3::block_offset = 0;
bool AudioInputSPDIF3::update_responsibility = false;
DMAChannel AudioInputSPDIF3::dma(false);
    1cc8:	ldr	r2, [pc, #8]	; (1cd4 <_GLOBAL__sub_I__ZN16AudioInputSPDIF310block_leftE+0xc>)
    1cca:	ldr	r1, [pc, #12]	; (1cd8 <_GLOBAL__sub_I__ZN16AudioInputSPDIF310block_leftE+0x10>)
    1ccc:	ldr	r0, [pc, #12]	; (1cdc <_GLOBAL__sub_I__ZN16AudioInputSPDIF310block_leftE+0x14>)
    1cce:	b.w	d234 <__aeabi_atexit>
    1cd2:	nop
    1cd4:	.word	0x20001498
    1cd8:	.word	0x000001fd
    1cdc:	.word	0x2000655c

00001ce0 <_GLOBAL__sub_I__ZN14AudioInputTDM214block_incomingE>:
DMAChannel AudioInputTDM2::dma(false);
    1ce0:	ldr	r2, [pc, #8]	; (1cec <_GLOBAL__sub_I__ZN14AudioInputTDM214block_incomingE+0xc>)
    1ce2:	ldr	r1, [pc, #12]	; (1cf0 <_GLOBAL__sub_I__ZN14AudioInputTDM214block_incomingE+0x10>)
    1ce4:	ldr	r0, [pc, #12]	; (1cf4 <_GLOBAL__sub_I__ZN14AudioInputTDM214block_incomingE+0x14>)
    1ce6:	b.w	d234 <__aeabi_atexit>
    1cea:	nop
    1cec:	.word	0x20001498
    1cf0:	.word	0x000001fd
    1cf4:	.word	0x200064c4

00001cf8 <_GLOBAL__sub_I__ZN16AudioInputAnalog3dmaE>:
#include <Arduino.h>
#include "input_adc.h"

extern "C" void xbar_connect(unsigned int input, unsigned int output);

DMAChannel AudioInputAnalog::dma(false);
    1cf8:	ldr	r2, [pc, #8]	; (1d04 <_GLOBAL__sub_I__ZN16AudioInputAnalog3dmaE+0xc>)
    1cfa:	ldr	r1, [pc, #12]	; (1d08 <_GLOBAL__sub_I__ZN16AudioInputAnalog3dmaE+0x10>)
    1cfc:	ldr	r0, [pc, #12]	; (1d0c <_GLOBAL__sub_I__ZN16AudioInputAnalog3dmaE+0x14>)
    1cfe:	b.w	d234 <__aeabi_atexit>
    1d02:	nop
    1d04:	.word	0x20001498
    1d08:	.word	0x000001fd
    1d0c:	.word	0x20006544

00001d10 <_GLOBAL__sub_I__ZN14AudioInputPDM210block_leftE>:

DMAMEM __attribute__((aligned(32))) static uint32_t pdm_buffer[AUDIO_BLOCK_SAMPLES*4];
static uint32_t leftover[14];
audio_block_t * AudioInputPDM2::block_left = NULL;
bool AudioInputPDM2::update_responsibility = false;
DMAChannel AudioInputPDM2::dma(false);
    1d10:	ldr	r2, [pc, #8]	; (1d1c <_GLOBAL__sub_I__ZN14AudioInputPDM210block_leftE+0xc>)
    1d12:	ldr	r1, [pc, #12]	; (1d20 <_GLOBAL__sub_I__ZN14AudioInputPDM210block_leftE+0x10>)
    1d14:	ldr	r0, [pc, #12]	; (1d24 <_GLOBAL__sub_I__ZN14AudioInputPDM210block_leftE+0x14>)
    1d16:	b.w	d234 <__aeabi_atexit>
    1d1a:	nop
    1d1c:	.word	0x20001498
    1d20:	.word	0x000001fd
    1d24:	.word	0x200064bc

00001d28 <_GLOBAL__sub_I__ZN14AudioInputI2S210block_leftE>:
DMAMEM __attribute__((aligned(32))) static uint32_t i2s2_rx_buffer[AUDIO_BLOCK_SAMPLES];
audio_block_t * AudioInputI2S2::block_left = NULL;
audio_block_t * AudioInputI2S2::block_right = NULL;
uint16_t AudioInputI2S2::block_offset = 0;
bool AudioInputI2S2::update_responsibility = false;
DMAChannel AudioInputI2S2::dma(false);
    1d28:	ldr	r2, [pc, #8]	; (1d34 <_GLOBAL__sub_I__ZN14AudioInputI2S210block_leftE+0xc>)
    1d2a:	ldr	r1, [pc, #12]	; (1d38 <_GLOBAL__sub_I__ZN14AudioInputI2S210block_leftE+0x10>)
    1d2c:	ldr	r0, [pc, #12]	; (1d3c <_GLOBAL__sub_I__ZN14AudioInputI2S210block_leftE+0x14>)
    1d2e:	b.w	d234 <__aeabi_atexit>
    1d32:	nop
    1d34:	.word	0x20001498
    1d38:	.word	0x000001fd
    1d3c:	.word	0x200064b4

00001d40 <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E>:
audio_block_t * AudioInputI2SQuad::block_ch2 = NULL;
audio_block_t * AudioInputI2SQuad::block_ch3 = NULL;
audio_block_t * AudioInputI2SQuad::block_ch4 = NULL;
uint16_t AudioInputI2SQuad::block_offset = 0;
bool AudioInputI2SQuad::update_responsibility = false;
DMAChannel AudioInputI2SQuad::dma(false);
    1d40:	ldr	r2, [pc, #8]	; (1d4c <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E+0xc>)
    1d42:	ldr	r1, [pc, #12]	; (1d50 <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E+0x10>)
    1d44:	ldr	r0, [pc, #12]	; (1d54 <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E+0x14>)
    1d46:	b.w	d234 <__aeabi_atexit>
    1d4a:	nop
    1d4c:	.word	0x20001498
    1d50:	.word	0x000001fd
    1d54:	.word	0x2000656c

00001d58 <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE>:
uint16_t  AudioOutputI2SQuad::ch2_offset = 0;
uint16_t  AudioOutputI2SQuad::ch3_offset = 0;
uint16_t  AudioOutputI2SQuad::ch4_offset = 0;
bool AudioOutputI2SQuad::update_responsibility = false;
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES*2];
DMAChannel AudioOutputI2SQuad::dma(false);
    1d58:	ldr	r2, [pc, #8]	; (1d64 <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE+0xc>)
    1d5a:	ldr	r1, [pc, #12]	; (1d68 <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE+0x10>)
    1d5c:	ldr	r0, [pc, #12]	; (1d6c <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE+0x14>)
    1d5e:	b.w	d234 <__aeabi_atexit>
    1d62:	nop
    1d64:	.word	0x20001498
    1d68:	.word	0x000001fd
    1d6c:	.word	0x2000659c

00001d70 <SPIClass::beginTransaction(SPISettings)>:
	void notUsingInterrupt(IRQ_NUMBER_t interruptName);

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
    1d70:	push	{r4, r5}
    1d72:	sub	sp, #8
    1d74:	mov	r4, r1
    1d76:	add	r3, sp, #8
    1d78:	stmdb	r3, {r1, r2}
		if (interruptMasksUsed) {
    1d7c:	ldrb	r3, [r0, #19]
    1d7e:	cmp	r3, #0
    1d80:	beq.n	1de4 <SPIClass::beginTransaction(SPISettings)+0x74>
			__disable_irq();
    1d82:	cpsid	i
			if (interruptMasksUsed & 0x01) {
    1d84:	ldrb	r3, [r0, #19]
    1d86:	lsls	r2, r3, #31
    1d88:	bpl.n	1d9c <SPIClass::beginTransaction(SPISettings)+0x2c>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    1d8a:	mov.w	r1, #3758153728	; 0xe000e000
    1d8e:	ldr	r5, [r0, #20]
    1d90:	ldr.w	r2, [r1, #384]	; 0x180
    1d94:	ands	r2, r5
    1d96:	str	r2, [r0, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    1d98:	str.w	r2, [r1, #384]	; 0x180
			}
			if (interruptMasksUsed & 0x02) {
    1d9c:	lsls	r5, r3, #30
    1d9e:	bpl.n	1db2 <SPIClass::beginTransaction(SPISettings)+0x42>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    1da0:	mov.w	r1, #3758153728	; 0xe000e000
    1da4:	ldr	r5, [r0, #24]
    1da6:	ldr.w	r2, [r1, #388]	; 0x184
    1daa:	ands	r2, r5
    1dac:	str	r2, [r0, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    1dae:	str.w	r2, [r1, #388]	; 0x184
			}
			if (interruptMasksUsed & 0x04) {
    1db2:	lsls	r1, r3, #29
    1db4:	bpl.n	1dc8 <SPIClass::beginTransaction(SPISettings)+0x58>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    1db6:	mov.w	r1, #3758153728	; 0xe000e000
    1dba:	ldr	r5, [r0, #28]
    1dbc:	ldr.w	r2, [r1, #392]	; 0x188
    1dc0:	ands	r2, r5
    1dc2:	str	r2, [r0, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    1dc4:	str.w	r2, [r1, #392]	; 0x188
			}
			if (interruptMasksUsed & 0x08) {
    1dc8:	lsls	r2, r3, #28
    1dca:	bpl.n	1dde <SPIClass::beginTransaction(SPISettings)+0x6e>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    1dcc:	mov.w	r1, #3758153728	; 0xe000e000
    1dd0:	ldr	r5, [r0, #32]
    1dd2:	ldr.w	r2, [r1, #396]	; 0x18c
    1dd6:	ands	r2, r5
    1dd8:	str	r2, [r0, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    1dda:	str.w	r2, [r1, #396]	; 0x18c
			}
			if (interruptMasksUsed & 0x10) {
    1dde:	lsls	r3, r3, #27
    1de0:	bmi.n	1e42 <SPIClass::beginTransaction(SPISettings)+0xd2>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
				NVIC_ICER4 = interruptSave[4];
			}
			__enable_irq();
    1de2:	cpsie	i
		}
		inTransactionFlag = 1;
		#endif

		//printf("trans\n");
		if (settings.clock() != _clock) {
    1de4:	ldr	r3, [r0, #8]
    1de6:	cmp	r4, r3
    1de8:	beq.n	1e56 <SPIClass::beginTransaction(SPISettings)+0xe6>
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
    1dea:	ldr	r3, [pc, #136]	; (1e74 <SPIClass::beginTransaction(SPISettings)+0x104>)
		    _clock = settings.clock();
    1dec:	str	r4, [r0, #8]
			uint32_t cbcmr = CCM_CBCMR;
    1dee:	ldr	r3, [r3, #24]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    1df0:	ldr	r2, [pc, #132]	; (1e78 <SPIClass::beginTransaction(SPISettings)+0x108>)
    1df2:	ubfx	r1, r3, #4, #2
    1df6:	ubfx	r3, r3, #26, #3
    1dfa:	ldr.w	r1, [r2, r1, lsl #2]
    1dfe:	adds	r3, #1
    1e00:	udiv	r2, r1, r3
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    1e04:	cbz	r4, 1e3a <SPIClass::beginTransaction(SPISettings)+0xca>

			if (d && clkhz/d > _clock) d++;
    1e06:	cmp	r4, r2
    1e08:	bhi.n	1e5a <SPIClass::beginTransaction(SPISettings)+0xea>
			d = _clock ? clkhz/_clock : clkhz;
    1e0a:	udiv	r3, r2, r4
			if (d && clkhz/d > _clock) d++;
    1e0e:	udiv	r2, r2, r3
    1e12:	cmp	r4, r2
    1e14:	bcc.n	1e70 <SPIClass::beginTransaction(SPISettings)+0x100>
			if (d > 257) d= 257;  // max div
    1e16:	cmp.w	r3, #258	; 0x102
    1e1a:	bcc.n	1e5e <SPIClass::beginTransaction(SPISettings)+0xee>
    1e1c:	ldr	r4, [pc, #92]	; (1e7c <SPIClass::beginTransaction(SPISettings)+0x10c>)
				div = d-2;
			} else {
				div =0;
			}
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    1e1e:	str	r4, [r0, #12]
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    1e20:	ldr	r3, [r0, #0]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    1e22:	movs	r2, #3
		port().CR = 0;
    1e24:	movs	r0, #0
		port().TCR = settings.tcr;
    1e26:	ldr	r1, [sp, #4]
		port().CR = 0;
    1e28:	str	r0, [r3, #16]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    1e2a:	str	r2, [r3, #36]	; 0x24
		port().CR = LPSPI_CR_MEN;
    1e2c:	movs	r2, #1
		port().CCR = _ccr;
    1e2e:	str	r4, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
    1e30:	str	r1, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    1e32:	str	r2, [r3, #16]
	}
    1e34:	add	sp, #8
    1e36:	pop	{r4, r5}
    1e38:	bx	lr
			if (d && clkhz/d > _clock) d++;
    1e3a:	cmp	r1, r3
    1e3c:	bcc.n	1e1e <SPIClass::beginTransaction(SPISettings)+0xae>
    1e3e:	adds	r3, r2, #1
    1e40:	b.n	1e16 <SPIClass::beginTransaction(SPISettings)+0xa6>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    1e42:	mov.w	r2, #3758153728	; 0xe000e000
    1e46:	ldr	r1, [r0, #36]	; 0x24
    1e48:	ldr.w	r3, [r2, #400]	; 0x190
    1e4c:	ands	r3, r1
    1e4e:	str	r3, [r0, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    1e50:	str.w	r3, [r2, #400]	; 0x190
    1e54:	b.n	1de2 <SPIClass::beginTransaction(SPISettings)+0x72>
		port().CCR = _ccr;
    1e56:	ldr	r4, [r0, #12]
    1e58:	b.n	1e20 <SPIClass::beginTransaction(SPISettings)+0xb0>
    1e5a:	movs	r4, #0
    1e5c:	b.n	1e1e <SPIClass::beginTransaction(SPISettings)+0xae>
			if (d > 2) {
    1e5e:	cmp	r3, #2
    1e60:	bls.n	1e5a <SPIClass::beginTransaction(SPISettings)+0xea>
				div = d-2;
    1e62:	subs	r3, #2
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    1e64:	lsrs	r2, r3, #1
    1e66:	lsls	r4, r2, #8
    1e68:	orr.w	r4, r4, r2, lsl #16
    1e6c:	orrs	r4, r3
    1e6e:	b.n	1e1e <SPIClass::beginTransaction(SPISettings)+0xae>
			d = _clock ? clkhz/_clock : clkhz;
    1e70:	mov	r2, r3
    1e72:	b.n	1e3e <SPIClass::beginTransaction(SPISettings)+0xce>
    1e74:	.word	0x400fc000
    1e78:	.word	0x20000c28
    1e7c:	.word	0x007f7fff

00001e80 <_GLOBAL__sub_I__ZN15AudioOutputTDM211block_inputE>:
audio_block_t * AudioOutputTDM2::block_input[16] = {
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr,
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr
};
bool AudioOutputTDM2::update_responsibility = false;
DMAChannel AudioOutputTDM2::dma(false);
    1e80:	ldr	r2, [pc, #8]	; (1e8c <_GLOBAL__sub_I__ZN15AudioOutputTDM211block_inputE+0xc>)
    1e82:	ldr	r1, [pc, #12]	; (1e90 <_GLOBAL__sub_I__ZN15AudioOutputTDM211block_inputE+0x10>)
    1e84:	ldr	r0, [pc, #12]	; (1e94 <_GLOBAL__sub_I__ZN15AudioOutputTDM211block_inputE+0x14>)
    1e86:	b.w	d234 <__aeabi_atexit>
    1e8a:	nop
    1e8c:	.word	0x20001498
    1e90:	.word	0x000001fd
    1e94:	.word	0x2000653c

00001e98 <_GLOBAL__sub_I__ZN15AudioOutputI2S214block_left_1stE>:
audio_block_t * AudioOutputI2S2::block_left_2nd = NULL;
audio_block_t * AudioOutputI2S2::block_right_2nd = NULL;
uint16_t  AudioOutputI2S2::block_left_offset = 0;
uint16_t  AudioOutputI2S2::block_right_offset = 0;
bool AudioOutputI2S2::update_responsibility = false;
DMAChannel AudioOutputI2S2::dma(false);
    1e98:	ldr	r2, [pc, #8]	; (1ea4 <_GLOBAL__sub_I__ZN15AudioOutputI2S214block_left_1stE+0xc>)
    1e9a:	ldr	r1, [pc, #12]	; (1ea8 <_GLOBAL__sub_I__ZN15AudioOutputI2S214block_left_1stE+0x10>)
    1e9c:	ldr	r0, [pc, #12]	; (1eac <_GLOBAL__sub_I__ZN15AudioOutputI2S214block_left_1stE+0x14>)
    1e9e:	b.w	d234 <__aeabi_atexit>
    1ea2:	nop
    1ea4:	.word	0x20001498
    1ea8:	.word	0x000001fd
    1eac:	.word	0x20006534

00001eb0 <_GLOBAL__sub_I__ZN17AudioOutputI2SHex13block_ch1_1stE>:
uint16_t  AudioOutputI2SHex::ch4_offset = 0;
uint16_t  AudioOutputI2SHex::ch5_offset = 0;
uint16_t  AudioOutputI2SHex::ch6_offset = 0;
bool AudioOutputI2SHex::update_responsibility = false;
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES*3];
DMAChannel AudioOutputI2SHex::dma(false);
    1eb0:	ldr	r2, [pc, #8]	; (1ebc <_GLOBAL__sub_I__ZN17AudioOutputI2SHex13block_ch1_1stE+0xc>)
    1eb2:	ldr	r1, [pc, #12]	; (1ec0 <_GLOBAL__sub_I__ZN17AudioOutputI2SHex13block_ch1_1stE+0x10>)
    1eb4:	ldr	r0, [pc, #12]	; (1ec4 <_GLOBAL__sub_I__ZN17AudioOutputI2SHex13block_ch1_1stE+0x14>)
    1eb6:	b.w	d234 <__aeabi_atexit>
    1eba:	nop
    1ebc:	.word	0x20001498
    1ec0:	.word	0x000001fd
    1ec4:	.word	0x20006574

00001ec8 <_GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E>:
audio_block_t * AudioInputI2SOct::block_ch6 = NULL;
audio_block_t * AudioInputI2SOct::block_ch7 = NULL;
audio_block_t * AudioInputI2SOct::block_ch8 = NULL;
uint16_t AudioInputI2SOct::block_offset = 0;
bool AudioInputI2SOct::update_responsibility = false;
DMAChannel AudioInputI2SOct::dma(false);
    1ec8:	ldr	r2, [pc, #8]	; (1ed4 <_GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E+0xc>)
    1eca:	ldr	r1, [pc, #12]	; (1ed8 <_GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E+0x10>)
    1ecc:	ldr	r0, [pc, #12]	; (1edc <_GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E+0x14>)
    1ece:	b.w	d234 <__aeabi_atexit>
    1ed2:	nop
    1ed4:	.word	0x20001498
    1ed8:	.word	0x000001fd
    1edc:	.word	0x20006554

00001ee0 <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE>:
audio_block_t * AudioOutputTDM::block_input[16] = {
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr,
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr
};
bool AudioOutputTDM::update_responsibility = false;
DMAChannel AudioOutputTDM::dma(false);
    1ee0:	ldr	r2, [pc, #8]	; (1eec <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE+0xc>)
    1ee2:	ldr	r1, [pc, #12]	; (1ef0 <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE+0x10>)
    1ee4:	ldr	r0, [pc, #12]	; (1ef4 <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE+0x14>)
    1ee6:	b.w	d234 <__aeabi_atexit>
    1eea:	nop
    1eec:	.word	0x20001498
    1ef0:	.word	0x000001fd
    1ef4:	.word	0x200064ec

00001ef8 <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE>:
DMAChannel AudioInputTDM::dma(false);
    1ef8:	ldr	r2, [pc, #8]	; (1f04 <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE+0xc>)
    1efa:	ldr	r1, [pc, #12]	; (1f08 <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE+0x10>)
    1efc:	ldr	r0, [pc, #12]	; (1f0c <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE+0x14>)
    1efe:	b.w	d234 <__aeabi_atexit>
    1f02:	nop
    1f04:	.word	0x20001498
    1f08:	.word	0x000001fd
    1f0c:	.word	0x2000649c

00001f10 <_GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E>:
audio_block_t * AudioInputI2SHex::block_ch4 = NULL;
audio_block_t * AudioInputI2SHex::block_ch5 = NULL;
audio_block_t * AudioInputI2SHex::block_ch6 = NULL;
uint16_t AudioInputI2SHex::block_offset = 0;
bool AudioInputI2SHex::update_responsibility = false;
DMAChannel AudioInputI2SHex::dma(false);
    1f10:	ldr	r2, [pc, #8]	; (1f1c <_GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E+0xc>)
    1f12:	ldr	r1, [pc, #12]	; (1f20 <_GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E+0x10>)
    1f14:	ldr	r0, [pc, #12]	; (1f24 <_GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E+0x14>)
    1f16:	b.w	d234 <__aeabi_atexit>
    1f1a:	nop
    1f1c:	.word	0x20001498
    1f20:	.word	0x000001fd
    1f24:	.word	0x2000654c

00001f28 <_GLOBAL__sub_I__ZN17AudioOutputSPDIF314block_left_1stE>:
audio_block_t * AudioOutputSPDIF3::block_left_1st = nullptr;
audio_block_t * AudioOutputSPDIF3::block_right_1st = nullptr;
audio_block_t * AudioOutputSPDIF3::block_left_2nd = nullptr;
audio_block_t * AudioOutputSPDIF3::block_right_2nd = nullptr;
bool AudioOutputSPDIF3::update_responsibility = false;
DMAChannel AudioOutputSPDIF3::dma(false);
    1f28:	ldr	r2, [pc, #8]	; (1f34 <_GLOBAL__sub_I__ZN17AudioOutputSPDIF314block_left_1stE+0xc>)
    1f2a:	ldr	r1, [pc, #12]	; (1f38 <_GLOBAL__sub_I__ZN17AudioOutputSPDIF314block_left_1stE+0x10>)
    1f2c:	ldr	r0, [pc, #12]	; (1f3c <_GLOBAL__sub_I__ZN17AudioOutputSPDIF314block_left_1stE+0x14>)
    1f2e:	b.w	d234 <__aeabi_atexit>
    1f32:	nop
    1f34:	.word	0x20001498
    1f38:	.word	0x000001fd
    1f3c:	.word	0x20006594

00001f40 <_GLOBAL__sub_I__ZN14AudioOutputMQS14block_left_1stE>:
audio_block_t * AudioOutputMQS::block_left_2nd = NULL;
audio_block_t * AudioOutputMQS::block_right_2nd = NULL;
uint16_t  AudioOutputMQS::block_left_offset = 0;
uint16_t  AudioOutputMQS::block_right_offset = 0;
bool AudioOutputMQS::update_responsibility = false;
DMAChannel AudioOutputMQS::dma(false);
    1f40:	ldr	r2, [pc, #8]	; (1f4c <_GLOBAL__sub_I__ZN14AudioOutputMQS14block_left_1stE+0xc>)
    1f42:	ldr	r1, [pc, #12]	; (1f50 <_GLOBAL__sub_I__ZN14AudioOutputMQS14block_left_1stE+0x10>)
    1f44:	ldr	r0, [pc, #12]	; (1f54 <_GLOBAL__sub_I__ZN14AudioOutputMQS14block_left_1stE+0x14>)
    1f46:	b.w	d234 <__aeabi_atexit>
    1f4a:	nop
    1f4c:	.word	0x20001498
    1f50:	.word	0x000001fd
    1f54:	.word	0x200064d4

00001f58 <AudioRecordQueue::update()>:
	release(userblock);
	userblock = NULL;
}

void AudioRecordQueue::update(void)
{
    1f58:	push	{r4, lr}
	audio_block_t *block;
	uint32_t h;

	block = receiveReadOnly();
    1f5a:	movs	r1, #0
{
    1f5c:	mov	r4, r0
	block = receiveReadOnly();
    1f5e:	bl	c6ec <AudioStream::receiveReadOnly(unsigned int)>
	if (!block) return;
    1f62:	cbz	r0, 1f8c <AudioRecordQueue::update()+0x34>
	if (!enabled) {
    1f64:	ldrb.w	r3, [r4, #870]	; 0x366
    1f68:	cbz	r3, 1f8e <AudioRecordQueue::update()+0x36>
		release(block);
		return;
	}
	h = head + 1;
    1f6a:	ldrb.w	r3, [r4, #868]	; 0x364
	if (h >= max_buffers) h = 0;
	if (h == tail) {
    1f6e:	ldrb.w	r1, [r4, #869]	; 0x365
	h = head + 1;
    1f72:	adds	r3, #1
	if (h >= max_buffers) h = 0;
    1f74:	cmp	r3, #209	; 0xd1
    1f76:	it	ge
    1f78:	movge	r3, #0
	if (h == tail) {
    1f7a:	cmp	r1, r3
    1f7c:	beq.n	1f8e <AudioRecordQueue::update()+0x36>
		release(block);
	} else {
		queue[h] = block;
    1f7e:	adds	r1, r3, #6
		head = h;
    1f80:	uxtb	r3, r3
		queue[h] = block;
    1f82:	add.w	r1, r4, r1, lsl #2
    1f86:	str	r0, [r1, #4]
		head = h;
    1f88:	strb.w	r3, [r4, #868]	; 0x364
	}
}
    1f8c:	pop	{r4, pc}
    1f8e:	ldmia.w	sp!, {r4, lr}
		release(block);
    1f92:	b.w	c654 <AudioStream::release(audio_block_struct*)>
    1f96:	nop

00001f98 <AudioRecordQueue::available()>:
	h = head;
    1f98:	ldrb.w	r1, [r0, #868]	; 0x364
	t = tail;
    1f9c:	ldrb.w	r2, [r0, #869]	; 0x365
	h = head;
    1fa0:	uxtb	r3, r1
	if (h >= t) return h - t;
    1fa2:	cmp	r1, r2
	t = tail;
    1fa4:	uxtb	r0, r2
	return max_buffers + h - t;
    1fa6:	it	cc
    1fa8:	addcc	r3, #209	; 0xd1
    1faa:	subs	r0, r3, r0
}
    1fac:	bx	lr
    1fae:	nop

00001fb0 <AudioRecordQueue::clear()>:
{
    1fb0:	push	{r3, r4, r5, lr}
    1fb2:	mov	r5, r0
	if (userblock) {
    1fb4:	ldr.w	r0, [r0, #864]	; 0x360
    1fb8:	cbz	r0, 1fc4 <AudioRecordQueue::clear()+0x14>
		release(userblock);
    1fba:	bl	c654 <AudioStream::release(audio_block_struct*)>
		userblock = NULL;
    1fbe:	movs	r3, #0
    1fc0:	str.w	r3, [r5, #864]	; 0x360
	t = tail;
    1fc4:	ldrb.w	r2, [r5, #869]	; 0x365
	while (t != head) {
    1fc8:	ldrb.w	r3, [r5, #868]	; 0x364
	t = tail;
    1fcc:	uxtb	r4, r2
	while (t != head) {
    1fce:	cmp	r2, r3
    1fd0:	uxtb	r1, r3
    1fd2:	beq.n	1ff2 <AudioRecordQueue::clear()+0x42>
		if (++t >= max_buffers) t = 0;
    1fd4:	adds	r4, #1
    1fd6:	cmp	r4, #209	; 0xd1
    1fd8:	it	cs
    1fda:	movcs	r4, #0
		release(queue[t]);
    1fdc:	adds	r3, r4, #6
    1fde:	add.w	r3, r5, r3, lsl #2
    1fe2:	ldr	r0, [r3, #4]
    1fe4:	bl	c654 <AudioStream::release(audio_block_struct*)>
	while (t != head) {
    1fe8:	ldrb.w	r3, [r5, #868]	; 0x364
    1fec:	cmp	r3, r4
    1fee:	bne.n	1fd4 <AudioRecordQueue::clear()+0x24>
	tail = t;
    1ff0:	uxtb	r1, r4
    1ff2:	strb.w	r1, [r5, #869]	; 0x365
}
    1ff6:	pop	{r3, r4, r5, pc}

00001ff8 <AudioRecordQueue::readBuffer()>:
	if (userblock) return NULL;
    1ff8:	ldr.w	r2, [r0, #864]	; 0x360
    1ffc:	cbnz	r2, 202c <AudioRecordQueue::readBuffer()+0x34>
	t = tail;
    1ffe:	ldrb.w	r1, [r0, #869]	; 0x365
	if (t == head) return NULL;
    2002:	ldrb.w	ip, [r0, #868]	; 0x364
	t = tail;
    2006:	uxtb	r3, r1
	if (t == head) return NULL;
    2008:	cmp	r1, ip
    200a:	beq.n	2028 <AudioRecordQueue::readBuffer()+0x30>
	if (++t >= max_buffers) t = 0;
    200c:	adds	r3, #1
    200e:	cmp	r3, #208	; 0xd0
    2010:	ite	hi
    2012:	movhi	r3, r2
	tail = t;
    2014:	uxtbls	r2, r3
	userblock = queue[t];
    2016:	adds	r3, #6
    2018:	add.w	r3, r0, r3, lsl #2
    201c:	ldr	r3, [r3, #4]
	tail = t;
    201e:	strb.w	r2, [r0, #869]	; 0x365
	return userblock->data;
    2022:	adds	r2, r3, #4
	userblock = queue[t];
    2024:	str.w	r3, [r0, #864]	; 0x360
}
    2028:	mov	r0, r2
    202a:	bx	lr
	if (userblock) return NULL;
    202c:	movs	r2, #0
}
    202e:	mov	r0, r2
    2030:	bx	lr
    2032:	nop

00002034 <AudioRecordQueue::freeBuffer()>:
{
    2034:	push	{r4, lr}
    2036:	mov	r4, r0
	if (userblock == NULL) return;
    2038:	ldr.w	r0, [r0, #864]	; 0x360
    203c:	cbz	r0, 2048 <AudioRecordQueue::freeBuffer()+0x14>
	release(userblock);
    203e:	bl	c654 <AudioStream::release(audio_block_struct*)>
	userblock = NULL;
    2042:	movs	r3, #0
    2044:	str.w	r3, [r4, #864]	; 0x360
}
    2048:	pop	{r4, pc}
    204a:	nop

0000204c <_GLOBAL__sub_I__ZN21AsyncAudioInputSPDIF310microsLastE>:
static float bufferL[bufferLength];

volatile int32_t AsyncAudioInputSPDIF3::buffer_offset = 0;	// read by resample/ written in spdif input isr -> copied at the beginning of 'resmaple' protected by __disable_irq() in resample
int32_t AsyncAudioInputSPDIF3::resample_offset = 0; // read/written by resample/ read in spdif input isr -> no protection needed?

DMAChannel AsyncAudioInputSPDIF3::dma(false);
    204c:	ldr	r2, [pc, #8]	; (2058 <_GLOBAL__sub_I__ZN21AsyncAudioInputSPDIF310microsLastE+0xc>)
    204e:	ldr	r1, [pc, #12]	; (205c <_GLOBAL__sub_I__ZN21AsyncAudioInputSPDIF310microsLastE+0x10>)
    2050:	ldr	r0, [pc, #12]	; (2060 <_GLOBAL__sub_I__ZN21AsyncAudioInputSPDIF310microsLastE+0x14>)
    2052:	b.w	d234 <__aeabi_atexit>
    2056:	nop
    2058:	.word	0x20001498
    205c:	.word	0x000001fd
    2060:	.word	0x200065ac

00002064 <_GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE>:
#if defined(__IMXRT1062__) || defined(KINETISK)
DMAMEM __attribute__((aligned(32))) static uint32_t pdm_buffer[AUDIO_BLOCK_SAMPLES*4];
static uint32_t leftover[14];
audio_block_t * AudioInputPDM::block_left = NULL;
bool AudioInputPDM::update_responsibility = false;
DMAChannel AudioInputPDM::dma(false);
    2064:	ldr	r2, [pc, #8]	; (2070 <_GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE+0xc>)
    2066:	ldr	r1, [pc, #12]	; (2074 <_GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE+0x10>)
    2068:	ldr	r0, [pc, #12]	; (2078 <_GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE+0x14>)
    206a:	b.w	d234 <__aeabi_atexit>
    206e:	nop
    2070:	.word	0x20001498
    2074:	.word	0x000001fd
    2078:	.word	0x20006494

0000207c <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE>:
audio_block_t * AudioOutputI2S::block_left_2nd = NULL;
audio_block_t * AudioOutputI2S::block_right_2nd = NULL;
uint16_t  AudioOutputI2S::block_left_offset = 0;
uint16_t  AudioOutputI2S::block_right_offset = 0;
bool AudioOutputI2S::update_responsibility = false;
DMAChannel AudioOutputI2S::dma(false);
    207c:	ldr	r2, [pc, #8]	; (2088 <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE+0xc>)
    207e:	ldr	r1, [pc, #12]	; (208c <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE+0x10>)
    2080:	ldr	r0, [pc, #12]	; (2090 <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE+0x14>)
    2082:	b.w	d234 <__aeabi_atexit>
    2086:	nop
    2088:	.word	0x20001498
    208c:	.word	0x000001fd
    2090:	.word	0x200064cc

00002094 <_GLOBAL__sub_I__ZN17AudioOutputSPDIF214block_left_1stE>:
audio_block_t * AudioOutputSPDIF2::block_left_2nd = NULL;
audio_block_t * AudioOutputSPDIF2::block_right_2nd = NULL;
uint16_t  AudioOutputSPDIF2::block_left_offset = 0;
uint16_t  AudioOutputSPDIF2::block_right_offset = 0;
bool AudioOutputSPDIF2::update_responsibility = false;
DMAChannel AudioOutputSPDIF2::dma(false);
    2094:	ldr	r2, [pc, #8]	; (20a0 <_GLOBAL__sub_I__ZN17AudioOutputSPDIF214block_left_1stE+0xc>)
    2096:	ldr	r1, [pc, #12]	; (20a4 <_GLOBAL__sub_I__ZN17AudioOutputSPDIF214block_left_1stE+0x10>)
    2098:	ldr	r0, [pc, #12]	; (20a8 <_GLOBAL__sub_I__ZN17AudioOutputSPDIF214block_left_1stE+0x14>)
    209a:	b.w	d234 <__aeabi_atexit>
    209e:	nop
    20a0:	.word	0x20001498
    20a4:	.word	0x000001fd
    20a8:	.word	0x2000658c

000020ac <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE>:
audio_block_t * AudioOutputSPDIF::block_left_2nd = NULL;
audio_block_t * AudioOutputSPDIF::block_right_2nd = NULL;
uint16_t  AudioOutputSPDIF::block_left_offset = 0;
uint16_t  AudioOutputSPDIF::block_right_offset = 0;
bool AudioOutputSPDIF::update_responsibility = false;
DMAChannel AudioOutputSPDIF::dma(false);
    20ac:	ldr	r2, [pc, #8]	; (20b8 <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE+0xc>)
    20ae:	ldr	r1, [pc, #12]	; (20bc <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE+0x10>)
    20b0:	ldr	r0, [pc, #12]	; (20c0 <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE+0x14>)
    20b2:	b.w	d234 <__aeabi_atexit>
    20b6:	nop
    20b8:	.word	0x20001498
    20bc:	.word	0x000001fd
    20c0:	.word	0x20006564

000020c4 <breakTime(long long, tmElements_t&)>:
  tm.Second = time % 60;
    20c4:	ldr	r1, [pc, #332]	; (2214 <breakTime(long long, tmElements_t&)+0x150>)
void breakTime(time_t timeInput, tmElements_t &tm){
    20c6:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  tm.Second = time % 60;
    20ca:	umull	r4, r3, r1, r0
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    20ce:	movw	sl, #365	; 0x16d
    20d2:	ldr	r7, [pc, #324]	; (2218 <breakTime(long long, tmElements_t&)+0x154>)
  tm.Second = time % 60;
    20d4:	lsrs	r3, r3, #5
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    20d6:	ldr.w	r8, [pc, #336]	; 2228 <breakTime(long long, tmElements_t&)+0x164>
    20da:	ldr.w	r9, [pc, #336]	; 222c <breakTime(long long, tmElements_t&)+0x168>
  tm.Minute = time % 60;
    20de:	umull	r4, r1, r1, r3
  tm.Second = time % 60;
    20e2:	rsb	r4, r3, r3, lsl #4
  tm.Minute = time % 60;
    20e6:	lsrs	r1, r1, #5
  tm.Second = time % 60;
    20e8:	sub.w	r0, r0, r4, lsl #2
  tm.Hour = time % 24;
    20ec:	ldr	r4, [pc, #300]	; (221c <breakTime(long long, tmElements_t&)+0x158>)
  tm.Minute = time % 60;
    20ee:	rsb	r5, r1, r1, lsl #4
  tm.Hour = time % 24;
    20f2:	umull	r4, lr, r4, r1
  tm.Minute = time % 60;
    20f6:	sub.w	r3, r3, r5, lsl #2
  tm.Second = time % 60;
    20fa:	strb	r0, [r2, #0]
  tm.Hour = time % 24;
    20fc:	mov.w	lr, lr, lsr #4
  tm.Minute = time % 60;
    2100:	strb	r3, [r2, #1]
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    2102:	add.w	r4, lr, #4
  tm.Hour = time % 24;
    2106:	add.w	r0, lr, lr, lsl #1
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    210a:	ldr	r3, [pc, #276]	; (2220 <breakTime(long long, tmElements_t&)+0x15c>)
  tm.Hour = time % 24;
    210c:	sub.w	r1, r1, r0, lsl #3
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    2110:	umull	r0, r3, r3, r4
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    2114:	movs	r0, #0
  tm.Hour = time % 24;
    2116:	strb	r1, [r2, #2]
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    2118:	subs	r1, r4, r3
    211a:	add.w	r3, r3, r1, lsr #1
  days = 0;
    211e:	mov	r1, r0
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    2120:	lsrs	r3, r3, #2
    2122:	rsb	r3, r3, r3, lsl #3
    2126:	subs	r4, r4, r3
    2128:	adds	r4, #1
    212a:	strb	r4, [r2, #3]
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    212c:	uxtb	r4, r0
    212e:	movw	ip, #365	; 0x16d
    2132:	addw	r3, r4, #1970	; 0x7b2
    2136:	ands.w	r5, r3, #3
    213a:	mul.w	r6, r7, r3
    213e:	bne.n	2152 <breakTime(long long, tmElements_t&)+0x8e>
    2140:	cmp.w	r8, r6, ror #2
    2144:	mov.w	ip, #366	; 0x16e
    2148:	bcc.n	2152 <breakTime(long long, tmElements_t&)+0x8e>
    214a:	cmp.w	r9, r6, ror #4
    214e:	it	cc
    2150:	movcc	ip, sl
    2152:	add	r1, ip
    2154:	adds	r0, #1
    2156:	cmp	lr, r1
    2158:	bcs.n	212c <breakTime(long long, tmElements_t&)+0x68>
  days -= LEAP_YEAR(year) ? 366 : 365;
    215a:	ldr	r6, [pc, #200]	; (2224 <breakTime(long long, tmElements_t&)+0x160>)
  tm.Year = year; // year is offset from 1970 
    215c:	strb	r4, [r2, #6]
  days -= LEAP_YEAR(year) ? 366 : 365;
    215e:	umull	r0, r6, r6, r3
    2162:	cbz	r5, 21ca <breakTime(long long, tmElements_t&)+0x106>
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    2164:	lsrs	r7, r6, #5
    2166:	movs	r4, #100	; 0x64
    2168:	mov.w	r0, #400	; 0x190
    216c:	lsrs	r6, r6, #7
    216e:	mls	r7, r4, r7, r3
    2172:	mls	r6, r0, r6, r3
  days -= LEAP_YEAR(year) ? 366 : 365;
    2176:	movw	r0, #365	; 0x16d
  time  -= days; // now it is days in this year, starting at 0
    217a:	sub.w	lr, lr, r1
    217e:	movs	r3, #0
    2180:	movs	r1, #1
    2182:	add	r0, lr
      monthLength = monthDays[month];
    2184:	ldr.w	lr, [pc, #168]	; 2230 <breakTime(long long, tmElements_t&)+0x16c>
    2188:	b.n	21a0 <breakTime(long long, tmElements_t&)+0xdc>
    if (time >= monthLength) {
    218a:	ldrb.w	r4, [r3, lr]
    218e:	cmp	r4, r0
    2190:	bhi.n	21f8 <breakTime(long long, tmElements_t&)+0x134>
  for (month=0; month<12; month++) {
    2192:	cmp	r1, #12
      time -= monthLength;
    2194:	sub.w	r0, r0, r4
  for (month=0; month<12; month++) {
    2198:	beq.n	21ba <breakTime(long long, tmElements_t&)+0xf6>
    219a:	adds	r1, #1
    219c:	adds	r3, #1
    219e:	uxtb	r1, r1
    if (month==1) { // february
    21a0:	cmp	r3, #1
    21a2:	uxtb.w	ip, r3
    21a6:	bne.n	218a <breakTime(long long, tmElements_t&)+0xc6>
      if (LEAP_YEAR(year)) {
    21a8:	cbnz	r5, 21b0 <breakTime(long long, tmElements_t&)+0xec>
    21aa:	cbz	r7, 21e4 <breakTime(long long, tmElements_t&)+0x120>
    21ac:	movs	r4, #29
    21ae:	b.n	21b2 <breakTime(long long, tmElements_t&)+0xee>
    21b0:	movs	r4, #28
    if (time >= monthLength) {
    21b2:	cmp	r0, r4
    21b4:	bcc.n	220c <breakTime(long long, tmElements_t&)+0x148>
      time -= monthLength;
    21b6:	subs	r0, r0, r4
  for (month=0; month<12; month++) {
    21b8:	b.n	219a <breakTime(long long, tmElements_t&)+0xd6>
    21ba:	mov.w	ip, #13
  tm.Day = time + 1;     // day of month
    21be:	adds	r0, #1
  tm.Month = month + 1;  // jan is month 1  
    21c0:	strb.w	ip, [r2, #5]
  tm.Day = time + 1;     // day of month
    21c4:	strb	r0, [r2, #4]
}
    21c6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  days -= LEAP_YEAR(year) ? 366 : 365;
    21ca:	movs	r0, #100	; 0x64
    21cc:	lsrs	r7, r6, #5
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    21ce:	lsrs	r6, r6, #7
  days -= LEAP_YEAR(year) ? 366 : 365;
    21d0:	mls	r7, r0, r7, r3
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    21d4:	mov.w	r0, #400	; 0x190
    21d8:	mls	r6, r0, r6, r3
  days -= LEAP_YEAR(year) ? 366 : 365;
    21dc:	cbz	r7, 21ee <breakTime(long long, tmElements_t&)+0x12a>
    21de:	mov.w	r0, #366	; 0x16e
    21e2:	b.n	217a <breakTime(long long, tmElements_t&)+0xb6>
      if (LEAP_YEAR(year)) {
    21e4:	cmp	r6, #0
    21e6:	ite	ne
    21e8:	movne	r4, #28
    21ea:	moveq	r4, #29
    21ec:	b.n	21b2 <breakTime(long long, tmElements_t&)+0xee>
  days -= LEAP_YEAR(year) ? 366 : 365;
    21ee:	cmp	r6, #0
    21f0:	bne.n	2176 <breakTime(long long, tmElements_t&)+0xb2>
    21f2:	mov.w	r0, #366	; 0x16e
    21f6:	b.n	217a <breakTime(long long, tmElements_t&)+0xb6>
  for (month=0; month<12; month++) {
    21f8:	add.w	ip, ip, #1
  tm.Day = time + 1;     // day of month
    21fc:	adds	r0, #1
  for (month=0; month<12; month++) {
    21fe:	uxtb.w	ip, ip
  tm.Day = time + 1;     // day of month
    2202:	strb	r0, [r2, #4]
  tm.Month = month + 1;  // jan is month 1  
    2204:	strb.w	ip, [r2, #5]
}
    2208:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (time >= monthLength) {
    220c:	mov.w	ip, #2
    2210:	b.n	21be <breakTime(long long, tmElements_t&)+0xfa>
    2212:	nop
    2214:	.word	0x88888889
    2218:	.word	0xc28f5c29
    221c:	.word	0xaaaaaaab
    2220:	.word	0x24924925
    2224:	.word	0x51eb851f
    2228:	.word	0x028f5c28
    222c:	.word	0x00a3d70a
    2230:	.word	0x20000764

00002234 <TwoWire::available()>:
	}
	uint8_t requestFrom(uint8_t addr, uint8_t qty, uint32_t iaddr, uint8_t n, uint8_t stop);
	virtual size_t write(uint8_t data);
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
    2234:	ldrb.w	r2, [r0, #163]	; 0xa3
    2238:	ldrb.w	r0, [r0, #162]	; 0xa2
	}
    223c:	subs	r0, r2, r0
    223e:	bx	lr

00002240 <TwoWire::read()>:
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    2240:	ldrb.w	r3, [r0, #162]	; 0xa2
    2244:	ldrb.w	r2, [r0, #163]	; 0xa3
    2248:	cmp	r2, r3
    224a:	bls.n	2258 <TwoWire::read()+0x18>
		return rxBuffer[rxBufferIndex++];
    224c:	adds	r2, r3, #1
    224e:	add	r3, r0
    2250:	strb.w	r2, [r0, #162]	; 0xa2
    2254:	ldrb	r0, [r3, #26]
    2256:	bx	lr
		if (rxBufferIndex >= rxBufferLength) return -1;
    2258:	mov.w	r0, #4294967295
	}
    225c:	bx	lr
    225e:	nop

00002260 <TwoWire::peek()>:
	virtual int peek(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    2260:	ldrb.w	r3, [r0, #162]	; 0xa2
    2264:	ldrb.w	r2, [r0, #163]	; 0xa3
    2268:	cmp	r2, r3
    226a:	bls.n	2272 <TwoWire::peek()+0x12>
		return rxBuffer[rxBufferIndex];
    226c:	add	r0, r3
    226e:	ldrb	r0, [r0, #26]
    2270:	bx	lr
		if (rxBufferIndex >= rxBufferLength) return -1;
    2272:	mov.w	r0, #4294967295
	}
    2276:	bx	lr

00002278 <TwoWire::flush()>:
	virtual void flush(void) {
	}
    2278:	bx	lr
    227a:	nop

0000227c <TwoWire::write(unsigned char)>:
{
}


size_t TwoWire::write(uint8_t data)
{
    227c:	mov	r3, r0
	if (transmitting || slave_mode) {
    227e:	ldrh.w	r0, [r0, #304]	; 0x130
    2282:	cbz	r0, 22a4 <TwoWire::write(unsigned char)+0x28>
		if (txBufferLength >= BUFFER_LENGTH+1) {
    2284:	ldrb.w	r2, [r3, #303]	; 0x12f
    2288:	cmp	r2, #136	; 0x88
    228a:	bls.n	2294 <TwoWire::write(unsigned char)+0x18>
	// format warnings are too pedantic - disable until newer toolchain offers better...
	// https://forum.pjrc.com/threads/62473?p=256873&viewfull=1#post256873
	// int printf(const char *format, ...) __attribute__ ((format (printf, 2, 3)));

  protected:
	void setWriteError(int err = 1) { write_error = err; }
    228c:	movs	r2, #1
			setWriteError();
			return 0;
    228e:	movs	r0, #0
    2290:	strb	r2, [r3, #4]
    2292:	bx	lr
		}
		txBuffer[txBufferLength++] = data;
    2294:	add.w	ip, r2, #1
		return 1;
    2298:	movs	r0, #1
		txBuffer[txBufferLength++] = data;
    229a:	add	r2, r3
    229c:	strb.w	ip, [r3, #303]	; 0x12f
    22a0:	strb.w	r1, [r2, #165]	; 0xa5
	}
	return 0;
}
    22a4:	bx	lr
    22a6:	nop

000022a8 <TwoWire::write(unsigned char const*, unsigned int)>:

size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
    22a8:	push	{r3, r4, r5, lr}
	if (transmitting || slave_mode) {
    22aa:	ldrh.w	r4, [r0, #304]	; 0x130
    22ae:	cbnz	r4, 22b4 <TwoWire::write(unsigned char const*, unsigned int)+0xc>
		memcpy(txBuffer + txBufferLength, data, quantity);
		txBufferLength += quantity;
		return quantity;
	}
	return 0;
}
    22b0:	mov	r0, r4
    22b2:	pop	{r3, r4, r5, pc}
		size_t avail = BUFFER_LENGTH+1 - txBufferLength;
    22b4:	ldrb.w	r3, [r0, #303]	; 0x12f
    22b8:	mov	r5, r0
    22ba:	rsb	r4, r3, #137	; 0x89
		if (quantity > avail) {
    22be:	cmp	r2, r4
    22c0:	bhi.n	22de <TwoWire::write(unsigned char const*, unsigned int)+0x36>
    22c2:	mov	r4, r2
		memcpy(txBuffer + txBufferLength, data, quantity);
    22c4:	add.w	r0, r5, #165	; 0xa5
    22c8:	mov	r2, r4
    22ca:	add	r0, r3
    22cc:	bl	a0d4 <memcpy>
		txBufferLength += quantity;
    22d0:	ldrb.w	r3, [r5, #303]	; 0x12f
}
    22d4:	mov	r0, r4
		txBufferLength += quantity;
    22d6:	add	r3, r4
    22d8:	strb.w	r3, [r5, #303]	; 0x12f
}
    22dc:	pop	{r3, r4, r5, pc}
    22de:	movs	r2, #1
    22e0:	strb	r2, [r0, #4]
    22e2:	b.n	22c4 <TwoWire::write(unsigned char const*, unsigned int)+0x1c>

000022e4 <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)>:
	constexpr TwoWire(IMXRT_LPI2C_t *myport, const I2C_Hardware_t &myhardware)
    22e4:	push	{r3, r4, r5, lr}
	constexpr Print() : write_error(0) {}
    22e6:	movs	r5, #0
    22e8:	mov	r3, r2
    22ea:	mov.w	r2, #1000	; 0x3e8
    22ee:	mov	r4, r0
    22f0:	strb	r5, [r0, #4]
    22f2:	str	r2, [r0, #8]
		: port(myport), hardware(myhardware) {
    22f4:	movs	r2, #136	; 0x88
    22f6:	ldr	r0, [pc, #84]	; (234c <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)+0x68>)
    22f8:	str	r1, [r4, #16]
    22fa:	mov	r1, r5
    22fc:	str	r0, [r4, #0]
    22fe:	add.w	r0, r4, #26
    2302:	str	r3, [r4, #20]
    2304:	strb	r5, [r4, #12]
    2306:	strb	r5, [r4, #24]
    2308:	strb	r5, [r4, #25]
    230a:	bl	e074 <memset>
    230e:	movs	r2, #137	; 0x89
    2310:	mov	r1, r5
    2312:	add.w	r0, r4, #165	; 0xa5
    2316:	strb.w	r5, [r4, #162]	; 0xa2
    231a:	strb.w	r5, [r4, #163]	; 0xa3
    231e:	strb.w	r5, [r4, #164]	; 0xa4
    2322:	bl	e074 <memset>
	}
    2326:	mov	r0, r4
		: port(myport), hardware(myhardware) {
    2328:	strb.w	r5, [r4, #302]	; 0x12e
    232c:	strb.w	r5, [r4, #303]	; 0x12f
    2330:	strb.w	r5, [r4, #304]	; 0x130
    2334:	strb.w	r5, [r4, #305]	; 0x131
    2338:	strb.w	r5, [r4, #306]	; 0x132
    233c:	strb.w	r5, [r4, #307]	; 0x133
    2340:	strb.w	r5, [r4, #308]	; 0x134
    2344:	strd	r5, r5, [r4, #312]	; 0x138
	}
    2348:	pop	{r3, r4, r5, pc}
    234a:	nop
    234c:	.word	0x20000b98

00002350 <TwoWire::isr()>:
}


void TwoWire::isr(void)
{
	uint32_t status = port->SSR;
    2350:	ldr	r3, [r0, #16]
{
    2352:	push	{r4, r5, r6, lr}
	uint32_t status = port->SSR;
    2354:	ldr.w	r5, [r3, #276]	; 0x114
{
    2358:	mov	r4, r0
	uint32_t w1c_bits = status & 0xF00;
	if (w1c_bits) port->SSR = w1c_bits;
    235a:	ands.w	r2, r5, #3840	; 0xf00
    235e:	beq.n	2364 <TwoWire::isr()+0x14>
    2360:	str.w	r2, [r3, #276]	; 0x114

	//Serial.print("isr ");
	//Serial.println(status, HEX);

	if (status & LPI2C_SSR_RDF) { // Receive Data Flag
    2364:	lsls	r6, r5, #30
    2366:	bpl.n	2380 <TwoWire::isr()+0x30>
		int rx = port->SRDR;
    2368:	ldr.w	r1, [r3, #368]	; 0x170
		if (rx & 0x8000) {
    236c:	lsls	r0, r1, #16
    236e:	bpl.n	23ee <TwoWire::isr()+0x9e>
			rxBufferIndex = 0;
    2370:	movs	r2, #0
    2372:	movs	r0, #1
    2374:	strb.w	r2, [r4, #162]	; 0xa2
			rxBufferLength = 0;
		}
		if (rxBufferLength < BUFFER_LENGTH) {
			rxBuffer[rxBufferLength++] = rx & 255;
    2378:	add	r2, r4
    237a:	strb.w	r0, [r4, #163]	; 0xa3
    237e:	strb	r1, [r2, #26]
		}
		//Serial.print("rx = ");
		//Serial.println(rx, HEX);
	}
	if (status & LPI2C_SSR_TDF) { // Transmit Data Flag
    2380:	lsls	r2, r5, #31
    2382:	bpl.n	23a6 <TwoWire::isr()+0x56>
		if (!transmitting) {
    2384:	ldrb.w	r6, [r4, #304]	; 0x130
    2388:	cbz	r6, 23c8 <TwoWire::isr()+0x78>
				(*user_onRequest)();
			}
			txBufferIndex = 0;
			transmitting = 1;
		}
		if (txBufferIndex < txBufferLength) {
    238a:	ldrb.w	r6, [r4, #302]	; 0x12e
    238e:	ldrb.w	r2, [r4, #303]	; 0x12f
    2392:	cmp	r2, r6
    2394:	bls.n	23e6 <TwoWire::isr()+0x96>
			port->STDR = txBuffer[txBufferIndex++];
    2396:	adds	r2, r6, #1
    2398:	add	r6, r4
    239a:	strb.w	r2, [r4, #302]	; 0x12e
    239e:	ldrb.w	r2, [r6, #165]	; 0xa5
    23a2:	str.w	r2, [r3, #352]	; 0x160
			port->STDR = 0;
		}
		//Serial.println("tx");
	}

	if (status & LPI2C_SSR_SDF) { // Stop
    23a6:	lsls	r3, r5, #22
    23a8:	bpl.n	23c6 <TwoWire::isr()+0x76>
		//Serial.println("Stop");
		if (rxBufferLength > 0 && user_onReceive != nullptr) {
    23aa:	ldrb.w	r0, [r4, #163]	; 0xa3
    23ae:	cbz	r0, 23b8 <TwoWire::isr()+0x68>
    23b0:	ldr.w	r3, [r4, #316]	; 0x13c
    23b4:	cbz	r3, 23b8 <TwoWire::isr()+0x68>
			(*user_onReceive)(rxBufferLength);
    23b6:	blx	r3
		}
		rxBufferIndex = 0;
    23b8:	movs	r3, #0
    23ba:	strh.w	r3, [r4, #162]	; 0xa2
		rxBufferLength = 0;
		txBufferIndex = 0;
    23be:	strh.w	r3, [r4, #302]	; 0x12e
		txBufferLength = 0;
		transmitting = 0;
    23c2:	strb.w	r3, [r4, #304]	; 0x130
	}
}
    23c6:	pop	{r4, r5, r6, pc}
			if (user_onRequest != nullptr) {
    23c8:	ldr.w	r2, [r4, #312]	; 0x138
    23cc:	cbz	r2, 23d2 <TwoWire::isr()+0x82>
				(*user_onRequest)();
    23ce:	blx	r2
			port->STDR = txBuffer[txBufferIndex++];
    23d0:	ldr	r3, [r4, #16]
			txBufferIndex = 0;
    23d2:	movs	r2, #0
    23d4:	strb.w	r2, [r4, #302]	; 0x12e
			transmitting = 1;
    23d8:	movs	r2, #1
    23da:	strb.w	r2, [r4, #304]	; 0x130
		if (txBufferIndex < txBufferLength) {
    23de:	ldrb.w	r2, [r4, #303]	; 0x12f
    23e2:	cmp	r2, r6
    23e4:	bhi.n	2396 <TwoWire::isr()+0x46>
			port->STDR = 0;
    23e6:	movs	r2, #0
    23e8:	str.w	r2, [r3, #352]	; 0x160
    23ec:	b.n	23a6 <TwoWire::isr()+0x56>
		if (rxBufferLength < BUFFER_LENGTH) {
    23ee:	ldrb.w	r2, [r4, #163]	; 0xa3
    23f2:	cmp	r2, #135	; 0x87
    23f4:	bhi.n	2380 <TwoWire::isr()+0x30>
			rxBuffer[rxBufferLength++] = rx & 255;
    23f6:	adds	r0, r2, #1
    23f8:	uxtb	r0, r0
    23fa:	b.n	2378 <TwoWire::isr()+0x28>

000023fc <lpi2c1_isr()>:
void lpi2c1_isr(void) { Wire.isr(); }
void lpi2c3_isr(void) { Wire2.isr(); }
void lpi2c4_isr(void) { Wire1.isr(); }
void lpi2c2_isr(void) { Wire3.isr(); }
#else
void lpi2c1_isr(void) { Wire.isr(); }
    23fc:	ldr	r0, [pc, #4]	; (2404 <lpi2c1_isr()+0x8>)
    23fe:	b.w	2350 <TwoWire::isr()>
    2402:	nop
    2404:	.word	0x200058c4

00002408 <lpi2c3_isr()>:
void lpi2c3_isr(void) { Wire1.isr(); }
    2408:	ldr	r0, [pc, #4]	; (2410 <lpi2c3_isr()+0x8>)
    240a:	b.w	2350 <TwoWire::isr()>
    240e:	nop
    2410:	.word	0x20005a04

00002414 <lpi2c4_isr()>:
void lpi2c4_isr(void) { Wire2.isr(); }
    2414:	ldr	r0, [pc, #4]	; (241c <lpi2c4_isr()+0x8>)
    2416:	b.w	2350 <TwoWire::isr()>
    241a:	nop
    241c:	.word	0x20005b44

00002420 <_GLOBAL__sub_I__ZN7TwoWire5beginEv>:
	}
	port->MCCR1 = port->MCCR0;
	port->MCFGR0 = 0;
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
	port->MCR = LPI2C_MCR_MEN;
}
    2420:	push	{r4, lr}
TwoWire Wire(&IMXRT_LPI2C1, TwoWire::i2c1_hardware);
    2422:	ldr	r4, [pc, #36]	; (2448 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x28>)
    2424:	ldr	r1, [pc, #36]	; (244c <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x2c>)
    2426:	mov	r2, r4
    2428:	ldr	r0, [pc, #36]	; (2450 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x30>)
    242a:	bl	22e4 <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)>
	TwoWire Wire1(&IMXRT_LPI2C3, TwoWire::i2c3_hardware);
    242e:	add.w	r2, r4, #80	; 0x50
    2432:	ldr	r1, [pc, #32]	; (2454 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x34>)
    2434:	ldr	r0, [pc, #32]	; (2458 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x38>)
    2436:	bl	22e4 <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)>
	TwoWire Wire2(&IMXRT_LPI2C4, TwoWire::i2c4_hardware);
    243a:	add.w	r2, r4, #160	; 0xa0
    243e:	ldr	r1, [pc, #28]	; (245c <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x3c>)
    2440:	ldr	r0, [pc, #28]	; (2460 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x40>)
    2442:	bl	22e4 <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)>
}
    2446:	pop	{r4, pc}
    2448:	.word	0x60001f8c
    244c:	.word	0x403f0000
    2450:	.word	0x200058c4
    2454:	.word	0x403f8000
    2458:	.word	0x20005a04
    245c:	.word	0x403fc000
    2460:	.word	0x20005b44

00002464 <EventResponder::triggerEvent(int, void*)>:
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    2464:	ldrb.w	ip, [r0, #28]
		_status = status;
    2468:	str	r1, [r0, #4]
		if (_type == EventTypeImmediate) {
    246a:	cmp.w	ip, #2
		_data = data;
    246e:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    2470:	bne.n	2476 <EventResponder::triggerEvent(int, void*)+0x12>
			(*_function)(*this);
    2472:	ldr	r3, [r0, #8]
    2474:	bx	r3
		} else {
			triggerEventNotImmediate();
    2476:	b.w	c1d4 <EventResponder::triggerEventNotImmediate()>
    247a:	nop

0000247c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]>:
	if (interruptMask[n >> 5] == 0) {
		interruptMasksUsed &= ~(1 << (n >> 5));
	}
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
    247c:	push	{r4, r5, r6, r7}
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    247e:	ldr	r4, [r0, #0]
    uint8_t *p_read = (uint8_t*)retbuf;
    size_t count_read = count;

	// Pass 1 keep it simple and don't try packing 8 bits into 16 yet..
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 
    2480:	movw	r5, #513	; 0x201

	while (count > 0) {
    2484:	mov	r6, r3
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 
    2486:	str	r5, [r4, #16]
	while (count > 0) {
    2488:	cbz	r3, 24b4 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x38>
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    248a:	cbz	r1, 24d6 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x5a>
    248c:	ldrb.w	r5, [r1], #1
		count--; // how many bytes left to output.
    2490:	subs	r3, #1
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    2492:	str	r5, [r4, #100]	; 0x64
		// Make sure queue is not full before pushing next byte out
		do {
			if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    2494:	ldr	r5, [r4, #112]	; 0x70
    2496:	lsls	r7, r5, #30
    2498:	bmi.n	24aa <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x2e>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
				if (p_read) *p_read++ = b; 
    249a:	mov	r5, r2
				count_read--;
    249c:	subs	r6, #1
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    249e:	ldr	r7, [r4, #116]	; 0x74
				if (p_read) *p_read++ = b; 
    24a0:	cbz	r2, 24aa <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x2e>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    24a2:	strb.w	r7, [r5], #1
				if (p_read) *p_read++ = b; 
    24a6:	mov	r2, r5
    24a8:	ldr	r4, [r0, #0]
			}
		} while ((port().SR & LPSPI_SR_TDF) == 0) ;
    24aa:	ldr	r5, [r4, #20]
    24ac:	lsls	r5, r5, #31
    24ae:	bpl.n	2494 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x18>
	while (count > 0) {
    24b0:	cmp	r3, #0
    24b2:	bne.n	248a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0xe>

	}

	// now lets wait for all of the read bytes to be returned...
	while (count_read) {
    24b4:	cbz	r6, 24d2 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x56>
    24b6:	ldr	r3, [r0, #0]
		if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    24b8:	ldr	r1, [r3, #112]	; 0x70
    24ba:	lsls	r1, r1, #30
    24bc:	bmi.n	24b4 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x38>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
			if (p_read) *p_read++ = b; 
    24be:	mov	r1, r2
			count_read--;
    24c0:	subs	r6, #1
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    24c2:	ldr	r3, [r3, #116]	; 0x74
			if (p_read) *p_read++ = b; 
    24c4:	cmp	r2, #0
    24c6:	beq.n	24b4 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x38>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    24c8:	strb.w	r3, [r1], #1
			if (p_read) *p_read++ = b; 
    24cc:	mov	r2, r1
	while (count_read) {
    24ce:	cmp	r6, #0
    24d0:	bne.n	24b6 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x3a>
		}
	}
}
    24d2:	pop	{r4, r5, r6, r7}
    24d4:	bx	lr
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    24d6:	ldrb.w	r5, [r0, #60]	; 0x3c
    24da:	b.n	2490 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x14>

000024dc <_spi_dma_rxISR1()>:

//-------------------------------------------------------------------------
// DMA RX ISR
//-------------------------------------------------------------------------
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
    24dc:	ldr	r3, [pc, #200]	; (25a8 <_spi_dma_rxISR1()+0xcc>)
		DMA_CINT = channel;
    24de:	ldr	r1, [pc, #204]	; (25ac <_spi_dma_rxISR1()+0xd0>)
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    24e0:	push	{r4, r5, lr}
	_dmaTX->clearComplete();
    24e2:	ldrd	r5, r4, [r3, #68]	; 0x44
    24e6:	ldrb	r0, [r4, #4]
    24e8:	strb	r0, [r1, #31]
	_dmaRX->clearComplete();

	if (_dma_count_remaining) {
    24ea:	ldr	r2, [r3, #64]	; 0x40
	bool complete(void) {
		if (TCD->CSR & DMA_TCD_CSR_DONE) return true;
		return false;
	}
	void clearComplete(void) {
		DMA_CDNE = channel;
    24ec:	ldrb.w	ip, [r5, #4]
    24f0:	strb.w	ip, [r1, #28]
    24f4:	strb	r0, [r1, #28]
    24f6:	cbz	r2, 250e <_spi_dma_rxISR1()+0x32>
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > MAX_DMA_COUNT) {
    24f8:	cmp.w	r2, #32768	; 0x8000
    24fc:	bcc.n	2546 <_spi_dma_rxISR1()+0x6a>
			_dma_count_remaining -= MAX_DMA_COUNT;
    24fe:	ldr	r1, [pc, #176]	; (25b0 <_spi_dma_rxISR1()+0xd4>)
    2500:	add	r1, r2
		DMA_SERQ = channel;
    2502:	ldr	r2, [pc, #168]	; (25ac <_spi_dma_rxISR1()+0xd0>)
    2504:	str	r1, [r3, #64]	; 0x40
    2506:	strb	r0, [r2, #27]
    2508:	strb.w	ip, [r2, #27]
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    250c:	pop	{r4, r5, pc}
    250e:	ldr	r1, [r3, #0]
		}
		_dmaRX->enable();
		_dmaTX->enable();
	} else {

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    2510:	movs	r4, #15

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    2512:	ldr	r0, [r3, #76]	; 0x4c
		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    2514:	str	r4, [r1, #88]	; 0x58
		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    2516:	movw	r4, #769	; 0x301
 		port().DER = 0;		// DMA no longer doing TX (or RX)
    251a:	str	r2, [r1, #28]
		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    251c:	str	r4, [r1, #16]
		port().SR = 0x3f00;	// clear out all of the other status...
    251e:	mov.w	r4, #16128	; 0x3f00
    2522:	str	r4, [r1, #20]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    2524:	movs	r1, #3
		_dma_event_responder->triggerEvent();
    2526:	ldr	r4, [r0, #0]
    2528:	ldr	r4, [r4, #0]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    252a:	strb.w	r1, [r3, #61]	; 0x3d
		_dma_event_responder->triggerEvent();
    252e:	ldr	r3, [pc, #132]	; (25b4 <_spi_dma_rxISR1()+0xd8>)
    2530:	cmp	r4, r3
    2532:	bne.n	2582 <_spi_dma_rxISR1()+0xa6>
		if (_type == EventTypeImmediate) {
    2534:	ldrb	r3, [r0, #28]
		_status = status;
    2536:	str	r2, [r0, #4]
		if (_type == EventTypeImmediate) {
    2538:	cmp	r3, #2
		_data = data;
    253a:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    253c:	bne.n	258c <_spi_dma_rxISR1()+0xb0>
			(*_function)(*this);
    253e:	ldr	r3, [r0, #8]
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    2540:	ldmia.w	sp!, {r4, r5, lr}
    2544:	bx	r3
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining);
    2546:	ldr	r5, [r5, #0]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    2548:	ldrh	r1, [r5, #30]
    254a:	lsls	r1, r1, #16
    254c:	bmi.n	2594 <_spi_dma_rxISR1()+0xb8>
		tcd->BITER = len & 0x7fff;
    254e:	uxth	r2, r2
    2550:	strh	r2, [r5, #30]
	tcd->CITER = tcd->BITER; 
    2552:	ldr	r1, [r4, #0]
    2554:	ldrh	r4, [r5, #30]
    2556:	uxth	r4, r4
    2558:	strh	r4, [r5, #22]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    255a:	ldrh	r4, [r1, #30]
    255c:	lsls	r4, r4, #16
    255e:	bpl.n	256c <_spi_dma_rxISR1()+0x90>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    2560:	ldrh	r4, [r1, #30]
    2562:	ubfx	r2, r2, #0, #9
    2566:	and.w	r4, r4, #65024	; 0xfe00
    256a:	orrs	r2, r4
    256c:	strh	r2, [r1, #30]
	tcd->CITER = tcd->BITER; 
    256e:	ldrh	r2, [r1, #30]
    2570:	uxth	r2, r2
    2572:	strh	r2, [r1, #22]
    2574:	movs	r1, #0
    2576:	ldr	r2, [pc, #52]	; (25ac <_spi_dma_rxISR1()+0xd0>)
			_dma_count_remaining -= MAX_DMA_COUNT;
    2578:	str	r1, [r3, #64]	; 0x40
    257a:	strb	r0, [r2, #27]
    257c:	strb.w	ip, [r2, #27]
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    2580:	pop	{r4, r5, pc}
		_dma_event_responder->triggerEvent();
    2582:	mov	r3, r4
    2584:	mov	r1, r2
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    2586:	ldmia.w	sp!, {r4, r5, lr}
		_dma_event_responder->triggerEvent();
    258a:	bx	r3
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    258c:	ldmia.w	sp!, {r4, r5, lr}
			triggerEventNotImmediate();
    2590:	b.w	c1d4 <EventResponder::triggerEventNotImmediate()>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    2594:	ldrh	r1, [r5, #30]
    2596:	ubfx	lr, r2, #0, #9
    259a:	uxth	r2, r2
    259c:	and.w	r1, r1, #65024	; 0xfe00
    25a0:	orr.w	r1, r1, lr
    25a4:	strh	r1, [r5, #30]
    25a6:	b.n	2552 <_spi_dma_rxISR1()+0x76>
    25a8:	.word	0x20005820
    25ac:	.word	0x400e8000
    25b0:	.word	0xffff8001
    25b4:	.word	0x00002465

000025b8 <_spi_dma_rxISR0()>:
	_dmaRX->clearInterrupt();
    25b8:	ldr	r3, [pc, #200]	; (2684 <_spi_dma_rxISR0()+0xcc>)
		DMA_CINT = channel;
    25ba:	ldr	r1, [pc, #204]	; (2688 <_spi_dma_rxISR0()+0xd0>)
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    25bc:	push	{r4, r5, lr}
	_dmaTX->clearComplete();
    25be:	ldrd	r5, r4, [r3, #68]	; 0x44
    25c2:	ldrb	r0, [r4, #4]
    25c4:	strb	r0, [r1, #31]
	if (_dma_count_remaining) {
    25c6:	ldr	r2, [r3, #64]	; 0x40
		DMA_CDNE = channel;
    25c8:	ldrb.w	ip, [r5, #4]
    25cc:	strb.w	ip, [r1, #28]
    25d0:	strb	r0, [r1, #28]
    25d2:	cbz	r2, 25ea <_spi_dma_rxISR0()+0x32>
		if (_dma_count_remaining > MAX_DMA_COUNT) {
    25d4:	cmp.w	r2, #32768	; 0x8000
    25d8:	bcc.n	2622 <_spi_dma_rxISR0()+0x6a>
			_dma_count_remaining -= MAX_DMA_COUNT;
    25da:	ldr	r1, [pc, #176]	; (268c <_spi_dma_rxISR0()+0xd4>)
    25dc:	add	r1, r2
		DMA_SERQ = channel;
    25de:	ldr	r2, [pc, #168]	; (2688 <_spi_dma_rxISR0()+0xd0>)
    25e0:	str	r1, [r3, #64]	; 0x40
    25e2:	strb	r0, [r2, #27]
    25e4:	strb.w	ip, [r2, #27]
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    25e8:	pop	{r4, r5, pc}
    25ea:	ldr	r1, [r3, #0]
		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    25ec:	movs	r4, #15
		_dma_event_responder->triggerEvent();
    25ee:	ldr	r0, [r3, #76]	; 0x4c
		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    25f0:	str	r4, [r1, #88]	; 0x58
		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    25f2:	movw	r4, #769	; 0x301
 		port().DER = 0;		// DMA no longer doing TX (or RX)
    25f6:	str	r2, [r1, #28]
		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    25f8:	str	r4, [r1, #16]
		port().SR = 0x3f00;	// clear out all of the other status...
    25fa:	mov.w	r4, #16128	; 0x3f00
    25fe:	str	r4, [r1, #20]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    2600:	movs	r1, #3
		_dma_event_responder->triggerEvent();
    2602:	ldr	r4, [r0, #0]
    2604:	ldr	r4, [r4, #0]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    2606:	strb.w	r1, [r3, #61]	; 0x3d
		_dma_event_responder->triggerEvent();
    260a:	ldr	r3, [pc, #132]	; (2690 <_spi_dma_rxISR0()+0xd8>)
    260c:	cmp	r4, r3
    260e:	bne.n	265e <_spi_dma_rxISR0()+0xa6>
		if (_type == EventTypeImmediate) {
    2610:	ldrb	r3, [r0, #28]
		_status = status;
    2612:	str	r2, [r0, #4]
		if (_type == EventTypeImmediate) {
    2614:	cmp	r3, #2
		_data = data;
    2616:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    2618:	bne.n	2668 <_spi_dma_rxISR0()+0xb0>
			(*_function)(*this);
    261a:	ldr	r3, [r0, #8]
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    261c:	ldmia.w	sp!, {r4, r5, lr}
    2620:	bx	r3
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining);
    2622:	ldr	r5, [r5, #0]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    2624:	ldrh	r1, [r5, #30]
    2626:	lsls	r1, r1, #16
    2628:	bmi.n	2670 <_spi_dma_rxISR0()+0xb8>
		tcd->BITER = len & 0x7fff;
    262a:	uxth	r2, r2
    262c:	strh	r2, [r5, #30]
	tcd->CITER = tcd->BITER; 
    262e:	ldr	r1, [r4, #0]
    2630:	ldrh	r4, [r5, #30]
    2632:	uxth	r4, r4
    2634:	strh	r4, [r5, #22]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    2636:	ldrh	r4, [r1, #30]
    2638:	lsls	r4, r4, #16
    263a:	bpl.n	2648 <_spi_dma_rxISR0()+0x90>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    263c:	ldrh	r4, [r1, #30]
    263e:	ubfx	r2, r2, #0, #9
    2642:	and.w	r4, r4, #65024	; 0xfe00
    2646:	orrs	r2, r4
    2648:	strh	r2, [r1, #30]
	tcd->CITER = tcd->BITER; 
    264a:	ldrh	r2, [r1, #30]
    264c:	uxth	r2, r2
    264e:	strh	r2, [r1, #22]
    2650:	movs	r1, #0
    2652:	ldr	r2, [pc, #52]	; (2688 <_spi_dma_rxISR0()+0xd0>)
			_dma_count_remaining -= MAX_DMA_COUNT;
    2654:	str	r1, [r3, #64]	; 0x40
    2656:	strb	r0, [r2, #27]
    2658:	strb.w	ip, [r2, #27]
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    265c:	pop	{r4, r5, pc}
		_dma_event_responder->triggerEvent();
    265e:	mov	r3, r4
    2660:	mov	r1, r2
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    2662:	ldmia.w	sp!, {r4, r5, lr}
		_dma_event_responder->triggerEvent();
    2666:	bx	r3
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    2668:	ldmia.w	sp!, {r4, r5, lr}
			triggerEventNotImmediate();
    266c:	b.w	c1d4 <EventResponder::triggerEventNotImmediate()>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    2670:	ldrh	r1, [r5, #30]
    2672:	ubfx	lr, r2, #0, #9
    2676:	uxth	r2, r2
    2678:	and.w	r1, r1, #65024	; 0xfe00
    267c:	orr.w	r1, r1, lr
    2680:	strh	r1, [r5, #30]
    2682:	b.n	262e <_spi_dma_rxISR0()+0x76>
    2684:	.word	0x200057d0
    2688:	.word	0x400e8000
    268c:	.word	0xffff8001
    2690:	.word	0x00002465

00002694 <SPIClass::SPIClass(unsigned int, unsigned int)>:
		: port_addr(myport), hardware_addr(myhardware) {
    2694:	movs	r3, #0
    2696:	strd	r1, r2, [r0]
    269a:	strd	r3, r3, [r0, #8]
    269e:	strd	r3, r3, [r0, #16]
    26a2:	strd	r3, r3, [r0, #24]
    26a6:	strd	r3, r3, [r0, #32]
    26aa:	strd	r3, r3, [r0, #40]	; 0x28
    26ae:	strd	r3, r3, [r0, #48]	; 0x30
    26b2:	str	r3, [r0, #56]	; 0x38
    26b4:	strh	r3, [r0, #60]	; 0x3c
    26b6:	strd	r3, r3, [r0, #64]	; 0x40
    26ba:	strd	r3, r3, [r0, #72]	; 0x48
	}
    26be:	bx	lr

000026c0 <SPIClass::begin()>:
	const SPI_Hardware_t & hardware() { return *(const SPI_Hardware_t *)hardware_addr; }
    26c0:	ldr	r3, [r0, #4]
{
    26c2:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    26c6:	ldrd	r4, r1, [r3]
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
    26ca:	ldr	r5, [pc, #516]	; (28d0 <SPIClass::begin()+0x210>)
	*(portControlRegister(hardware().miso_pin[miso_pin_index])) = fastio;
    26cc:	mov.w	sl, #184	; 0xb8
	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    26d0:	ldr	r2, [r4, #0]
	port().CR = LPSPI_CR_RST;
    26d2:	mov.w	r8, #2
	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    26d6:	bic.w	r2, r2, r1
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
    26da:	ldr	r1, [pc, #504]	; (28d4 <SPIClass::begin()+0x214>)
	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    26dc:	str	r2, [r4, #0]
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
    26de:	ldr	r2, [r5, #24]
    26e0:	ands	r1, r2
		CCM_CBCMR_LPSPI_PODF(2) | CCM_CBCMR_LPSPI_CLK_SEL(1); // pg 714
    26e2:	ldr	r2, [pc, #500]	; (28d8 <SPIClass::begin()+0x218>)
    26e4:	orrs	r2, r1
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
    26e6:	str	r2, [r5, #24]
	*(portControlRegister(hardware().miso_pin[miso_pin_index])) = fastio;
    26e8:	ldrb.w	lr, [r0, #16]
    26ec:	ldr	r2, [pc, #492]	; (28dc <SPIClass::begin()+0x21c>)
    26ee:	add.w	r6, r3, lr
	*(portConfigRegister(hardware().miso_pin[miso_pin_index])) = hardware().miso_mux[miso_pin_index];
    26f2:	add.w	lr, r3, lr, lsl #2
	*(portControlRegister(hardware().miso_pin[miso_pin_index])) = fastio;
    26f6:	ldrb	r1, [r6, #16]
    26f8:	add.w	r1, r2, r1, lsl #4
    26fc:	ldr	r1, [r1, #8]
    26fe:	str.w	sl, [r1]
	*(portControlRegister(hardware().mosi_pin[mosi_pin_index])) = fastio;
    2702:	ldrb.w	ip, [r0, #17]
    2706:	add.w	r5, r3, ip
	*(portConfigRegister(hardware().mosi_pin [mosi_pin_index])) = hardware().mosi_mux[mosi_pin_index];
    270a:	add.w	ip, ip, #10
	*(portControlRegister(hardware().mosi_pin[mosi_pin_index])) = fastio;
    270e:	ldrb.w	r1, [r5, #36]	; 0x24
    2712:	add.w	r1, r2, r1, lsl #4
    2716:	ldr	r1, [r1, #8]
    2718:	str.w	sl, [r1]
	*(portControlRegister(hardware().sck_pin[sck_pin_index])) = fastio;
    271c:	ldrb	r1, [r0, #18]
    271e:	add.w	r9, r3, r1
	*(portConfigRegister(hardware().sck_pin [sck_pin_index])) = hardware().sck_mux[sck_pin_index];
    2722:	add.w	r1, r3, r1, lsl #2
	*(portControlRegister(hardware().sck_pin[sck_pin_index])) = fastio;
    2726:	ldrb.w	fp, [r9, #56]	; 0x38
    272a:	add.w	fp, r2, fp, lsl #4
    272e:	ldr.w	fp, [fp, #8]
    2732:	str.w	sl, [fp]
	hardware().clock_gate_register |= hardware().clock_gate_mask;
    2736:	ldr.w	sl, [r4]
    273a:	ldr	r7, [r3, #4]
    273c:	orr.w	sl, sl, r7
    2740:	str.w	sl, [r4]
	*(portConfigRegister(hardware().miso_pin[miso_pin_index])) = hardware().miso_mux[miso_pin_index];
    2744:	ldrb	r4, [r6, #16]
    2746:	ldr.w	lr, [lr, #20]
    274a:	add.w	r4, r2, r4, lsl #4
    274e:	ldr	r4, [r4, #4]
    2750:	str.w	lr, [r4]
	*(portConfigRegister(hardware().mosi_pin [mosi_pin_index])) = hardware().mosi_mux[mosi_pin_index];
    2754:	ldrb.w	r4, [r5, #36]	; 0x24
    2758:	ldr.w	ip, [r3, ip, lsl #2]
    275c:	add.w	r4, r2, r4, lsl #4
    2760:	ldr	r4, [r4, #4]
    2762:	str.w	ip, [r4]
	*(portConfigRegister(hardware().sck_pin [sck_pin_index])) = hardware().sck_mux[sck_pin_index];
    2766:	ldrb.w	r4, [r9, #56]	; 0x38
    276a:	add.w	r2, r2, r4, lsl #4
    276e:	ldr	r2, [r2, #4]
    2770:	ldr	r1, [r1, #60]	; 0x3c
    2772:	str	r1, [r2, #0]
	hardware().sck_select_input_register = hardware().sck_select_val[sck_pin_index];
    2774:	ldr	r2, [r3, #72]	; 0x48
    2776:	ldrb.w	r1, [r9, #68]	; 0x44
    277a:	str	r1, [r2, #0]
	hardware().miso_select_input_register = hardware().miso_select_val[miso_pin_index];
    277c:	ldr	r2, [r3, #32]
    277e:	ldrb	r1, [r6, #28]
	hardware().mosi_select_input_register = hardware().mosi_select_val[mosi_pin_index];
    2780:	ldr	r3, [r3, #52]	; 0x34
	hardware().miso_select_input_register = hardware().miso_select_val[miso_pin_index];
    2782:	str	r1, [r2, #0]
	hardware().mosi_select_input_register = hardware().mosi_select_val[mosi_pin_index];
    2784:	ldrb.w	r2, [r5, #48]	; 0x30
    2788:	str	r2, [r3, #0]
	port().FCR = LPSPI_FCR_TXWATER(15);
    278a:	movs	r2, #15
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    278c:	ldr	r3, [r0, #0]
	port().CR = LPSPI_CR_RST;
    278e:	str.w	r8, [r3, #16]
	port().FCR = LPSPI_FCR_TXWATER(15);
    2792:	str	r2, [r3, #88]	; 0x58
		if (interruptMasksUsed) {
    2794:	ldrb	r2, [r0, #19]
    2796:	cmp	r2, #0
    2798:	beq.n	27fe <SPIClass::begin()+0x13e>
			__disable_irq();
    279a:	cpsid	i
			if (interruptMasksUsed & 0x01) {
    279c:	ldrb	r3, [r0, #19]
    279e:	lsls	r4, r3, #31
    27a0:	bpl.n	27b4 <SPIClass::begin()+0xf4>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    27a2:	mov.w	r1, #3758153728	; 0xe000e000
    27a6:	ldr	r4, [r0, #20]
    27a8:	ldr.w	r2, [r1, #384]	; 0x180
    27ac:	ands	r2, r4
    27ae:	str	r2, [r0, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    27b0:	str.w	r2, [r1, #384]	; 0x180
			if (interruptMasksUsed & 0x02) {
    27b4:	lsls	r1, r3, #30
    27b6:	bpl.n	27ca <SPIClass::begin()+0x10a>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    27b8:	mov.w	r1, #3758153728	; 0xe000e000
    27bc:	ldr	r4, [r0, #24]
    27be:	ldr.w	r2, [r1, #388]	; 0x184
    27c2:	ands	r2, r4
    27c4:	str	r2, [r0, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    27c6:	str.w	r2, [r1, #388]	; 0x184
			if (interruptMasksUsed & 0x04) {
    27ca:	lsls	r2, r3, #29
    27cc:	bpl.n	27e0 <SPIClass::begin()+0x120>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    27ce:	mov.w	r1, #3758153728	; 0xe000e000
    27d2:	ldr	r4, [r0, #28]
    27d4:	ldr.w	r2, [r1, #392]	; 0x188
    27d8:	ands	r2, r4
    27da:	str	r2, [r0, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    27dc:	str.w	r2, [r1, #392]	; 0x188
			if (interruptMasksUsed & 0x08) {
    27e0:	lsls	r7, r3, #28
    27e2:	bpl.n	27f6 <SPIClass::begin()+0x136>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    27e4:	mov.w	r1, #3758153728	; 0xe000e000
    27e8:	ldr	r4, [r0, #32]
    27ea:	ldr.w	r2, [r1, #396]	; 0x18c
    27ee:	ands	r2, r4
    27f0:	str	r2, [r0, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    27f2:	str.w	r2, [r1, #396]	; 0x18c
			if (interruptMasksUsed & 0x10) {
    27f6:	lsls	r6, r3, #27
    27f8:	bmi.n	28a6 <SPIClass::begin()+0x1e6>
			__enable_irq();
    27fa:	cpsie	i
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    27fc:	ldr	r3, [r0, #0]
		if (settings.clock() != _clock) {
    27fe:	ldr	r4, [pc, #224]	; (28e0 <SPIClass::begin()+0x220>)
    2800:	ldr	r2, [r0, #8]
    2802:	cmp	r2, r4
    2804:	beq.n	28ba <SPIClass::begin()+0x1fa>
			uint32_t cbcmr = CCM_CBCMR;
    2806:	ldr	r2, [pc, #200]	; (28d0 <SPIClass::begin()+0x210>)
		    _clock = settings.clock();
    2808:	str	r4, [r0, #8]
			uint32_t cbcmr = CCM_CBCMR;
    280a:	ldr	r2, [r2, #24]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    280c:	ldr	r1, [pc, #212]	; (28e4 <SPIClass::begin()+0x224>)
    280e:	ubfx	r6, r2, #4, #2
    2812:	ubfx	r2, r2, #26, #3
			if (d && clkhz/d > _clock) d++;
    2816:	ldr	r5, [pc, #208]	; (28e8 <SPIClass::begin()+0x228>)
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    2818:	ldr.w	r1, [r1, r6, lsl #2]
    281c:	adds	r2, #1
    281e:	udiv	r2, r1, r2
			if (d && clkhz/d > _clock) d++;
    2822:	cmp	r2, r5
    2824:	bhi.n	288a <SPIClass::begin()+0x1ca>
    2826:	movs	r2, #0
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    2828:	str	r2, [r0, #12]
		port().CR = 0;
    282a:	movs	r4, #0
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    282c:	movs	r1, #3
		port().CR = 0;
    282e:	str	r4, [r3, #16]
		port().TCR = settings.tcr;
    2830:	movs	r4, #7
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    2832:	str	r1, [r3, #36]	; 0x24
		port().CR = LPSPI_CR_MEN;
    2834:	movs	r1, #1
		port().CCR = _ccr;
    2836:	str	r2, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
    2838:	str	r4, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    283a:	str	r1, [r3, #16]
		if (interruptMasksUsed) {
    283c:	ldrb	r3, [r0, #19]
    283e:	cbz	r3, 2886 <SPIClass::begin()+0x1c6>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    2840:	lsls	r5, r3, #31
    2842:	bpl.n	284e <SPIClass::begin()+0x18e>
    2844:	ldr	r1, [r0, #40]	; 0x28
    2846:	mov.w	r2, #3758153728	; 0xe000e000
    284a:	str.w	r1, [r2, #256]	; 0x100
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    284e:	lsls	r4, r3, #30
    2850:	bpl.n	285c <SPIClass::begin()+0x19c>
    2852:	ldr	r1, [r0, #44]	; 0x2c
    2854:	mov.w	r2, #3758153728	; 0xe000e000
    2858:	str.w	r1, [r2, #260]	; 0x104
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    285c:	lsls	r1, r3, #29
    285e:	bpl.n	286a <SPIClass::begin()+0x1aa>
    2860:	ldr	r1, [r0, #48]	; 0x30
    2862:	mov.w	r2, #3758153728	; 0xe000e000
    2866:	str.w	r1, [r2, #264]	; 0x108
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    286a:	lsls	r2, r3, #28
    286c:	bpl.n	2878 <SPIClass::begin()+0x1b8>
    286e:	ldr	r1, [r0, #52]	; 0x34
    2870:	mov.w	r2, #3758153728	; 0xe000e000
    2874:	str.w	r1, [r2, #268]	; 0x10c
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    2878:	lsls	r3, r3, #27
    287a:	bpl.n	2886 <SPIClass::begin()+0x1c6>
    287c:	ldr	r2, [r0, #56]	; 0x38
    287e:	mov.w	r3, #3758153728	; 0xe000e000
    2882:	str.w	r2, [r3, #272]	; 0x110
}
    2886:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			d = _clock ? clkhz/_clock : clkhz;
    288a:	ldr	r1, [pc, #96]	; (28ec <SPIClass::begin()+0x22c>)
    288c:	umull	r5, r1, r1, r2
    2890:	lsrs	r1, r1, #20
			if (d && clkhz/d > _clock) d++;
    2892:	udiv	r2, r2, r1
    2896:	cmp	r2, r4
    2898:	it	hi
    289a:	addhi	r1, #1
			if (d > 257) d= 257;  // max div
    289c:	cmp.w	r1, #258	; 0x102
    28a0:	bcc.n	28be <SPIClass::begin()+0x1fe>
    28a2:	ldr	r2, [pc, #76]	; (28f0 <SPIClass::begin()+0x230>)
				div = d-2;
    28a4:	b.n	2828 <SPIClass::begin()+0x168>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    28a6:	mov.w	r2, #3758153728	; 0xe000e000
    28aa:	ldr	r1, [r0, #36]	; 0x24
    28ac:	ldr.w	r3, [r2, #400]	; 0x190
    28b0:	ands	r3, r1
    28b2:	str	r3, [r0, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    28b4:	str.w	r3, [r2, #400]	; 0x190
    28b8:	b.n	27fa <SPIClass::begin()+0x13a>
		port().CCR = _ccr;
    28ba:	ldr	r2, [r0, #12]
    28bc:	b.n	282a <SPIClass::begin()+0x16a>
			if (d > 2) {
    28be:	cmp	r1, #2
    28c0:	bls.n	2826 <SPIClass::begin()+0x166>
				div = d-2;
    28c2:	subs	r1, #2
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    28c4:	lsrs	r4, r1, #1
    28c6:	lsls	r2, r4, #8
    28c8:	orr.w	r2, r2, r4, lsl #16
    28cc:	orrs	r2, r1
    28ce:	b.n	2828 <SPIClass::begin()+0x168>
    28d0:	.word	0x400fc000
    28d4:	.word	0xe3ffffcf
    28d8:	.word	0x08000010
    28dc:	.word	0x20000ebc
    28e0:	.word	0x003d0900
    28e4:	.word	0x20000c28
    28e8:	.word	0x003d08ff
    28ec:	.word	0x431bde83
    28f0:	.word	0x007f7fff

000028f4 <SPIClass::transfer(void const*, void*, unsigned int)>:
	if (count == 0) return;
    28f4:	cbz	r3, 28fa <SPIClass::transfer(void const*, void*, unsigned int)+0x6>
    28f6:	b.w	247c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]>
}
    28fa:	bx	lr

000028fc <SPIClass::end()>:
	const SPI_Hardware_t & hardware() { return *(const SPI_Hardware_t *)hardware_addr; }
    28fc:	ldr	r3, [r0, #4]
	if (hardware().clock_gate_register & hardware().clock_gate_mask) {
    28fe:	ldrd	r1, r2, [r3]
    2902:	ldr	r1, [r1, #0]
    2904:	tst	r1, r2
    2906:	bne.n	290a <SPIClass::end()+0xe>
    2908:	bx	lr
void SPIClass::end() {
    290a:	push	{r4, lr}
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    290c:	ldr	r2, [r0, #0]
    290e:	mov	r4, r0
		port().CR = 0;  // turn off the enable
    2910:	movs	r0, #0
		pinMode(hardware().miso_pin[miso_pin_index], INPUT_DISABLE);
    2912:	movs	r1, #5
		port().CR = 0;  // turn off the enable
    2914:	str	r0, [r2, #16]
		pinMode(hardware().miso_pin[miso_pin_index], INPUT_DISABLE);
    2916:	ldrb	r2, [r4, #16]
    2918:	add	r3, r2
    291a:	ldrb	r0, [r3, #16]
    291c:	bl	bc80 <pinMode>
		pinMode(hardware().mosi_pin[mosi_pin_index], INPUT_DISABLE);
    2920:	ldrb	r2, [r4, #17]
    2922:	ldr	r3, [r4, #4]
    2924:	movs	r1, #5
    2926:	add	r3, r2
    2928:	ldrb.w	r0, [r3, #36]	; 0x24
    292c:	bl	bc80 <pinMode>
		pinMode(hardware().sck_pin[sck_pin_index], INPUT_DISABLE);
    2930:	ldr	r3, [r4, #4]
    2932:	ldrb	r2, [r4, #18]
    2934:	movs	r1, #5
    2936:	add	r3, r2
}
    2938:	ldmia.w	sp!, {r4, lr}
		pinMode(hardware().sck_pin[sck_pin_index], INPUT_DISABLE);
    293c:	ldrb.w	r0, [r3, #56]	; 0x38
    2940:	b.w	bc80 <pinMode>

00002944 <_GLOBAL__sub_I__ZN8SPIClass5beginEv>:

	}
}
    2944:	push	{r3, lr}
SPIClass SPI((uintptr_t)&IMXRT_LPSPI4_S, (uintptr_t)&SPIClass::spiclass_lpspi4_hardware);
    2946:	ldr	r2, [pc, #32]	; (2968 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x24>)
    2948:	ldr	r1, [pc, #32]	; (296c <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x28>)
    294a:	ldr	r0, [pc, #36]	; (2970 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x2c>)
    294c:	bl	2694 <SPIClass::SPIClass(unsigned int, unsigned int)>
SPIClass SPI1((uintptr_t)&IMXRT_LPSPI3_S, (uintptr_t)&SPIClass::spiclass_lpspi3_hardware);
    2950:	ldr	r2, [pc, #32]	; (2974 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x30>)
    2952:	ldr	r1, [pc, #36]	; (2978 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x34>)
    2954:	ldr	r0, [pc, #36]	; (297c <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x38>)
    2956:	bl	2694 <SPIClass::SPIClass(unsigned int, unsigned int)>
SPIClass SPI2((uintptr_t)&IMXRT_LPSPI1_S, (uintptr_t)&SPIClass::spiclass_lpspi1_hardware);
    295a:	ldr	r2, [pc, #36]	; (2980 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x3c>)
    295c:	ldr	r1, [pc, #36]	; (2984 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x40>)
    295e:	ldr	r0, [pc, #40]	; (2988 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x44>)
    2960:	bl	2694 <SPIClass::SPIClass(unsigned int, unsigned int)>
}
    2964:	pop	{r3, pc}
    2966:	nop
    2968:	.word	0x20000924
    296c:	.word	0x403a0000
    2970:	.word	0x200057d0
    2974:	.word	0x200008b4
    2978:	.word	0x4039c000
    297c:	.word	0x20005820
    2980:	.word	0x20000844
    2984:	.word	0x40394000
    2988:	.word	0x20005870

0000298c <SDClass::~SDClass()>:
class SDClass : public FS
    298c:	bx	lr
    298e:	nop

00002990 <SDClass::dateTime(unsigned short*, unsigned short*)>:
{
    2990:	push	{r4, r5, lr}
    2992:	sub	sp, #12
    2994:	mov	r5, r0
    2996:	mov	r4, r1
uint32_t makeTime(const DateTimeFields &tm); // convert DateTimeFields to 32 bit time

class teensy3_clock_class
{
public:
        static unsigned long get(void) __attribute__((always_inline)) { return rtc_get(); }
    2998:	bl	bab0 <rtc_get>
	if (now < 315532800) { // before 1980
    299c:	ldr	r3, [pc, #112]	; (2a10 <SDClass::dateTime(unsigned short*, unsigned short*)+0x80>)
    299e:	cmp	r0, r3
    29a0:	bhi.n	29ac <SDClass::dateTime(unsigned short*, unsigned short*)+0x1c>
		*date = 0;
    29a2:	movs	r3, #0
    29a4:	strh	r3, [r5, #0]
		*time = 0;
    29a6:	strh	r3, [r4, #0]
}
    29a8:	add	sp, #12
    29aa:	pop	{r4, r5, pc}
		breakTime(now, datetime);
    29ac:	mov	r1, sp
    29ae:	bl	c3d0 <breakTime(unsigned long, DateTimeFields&)>
		*date = FS_DATE(datetime.year + 1900, datetime.mon + 1, datetime.mday);
    29b2:	ldrb.w	r3, [sp, #5]
    29b6:	ldrb.w	r2, [sp, #6]
    29ba:	adds	r3, #1
    29bc:	ldrb.w	r1, [sp, #4]
  year -= 1980;
    29c0:	subs	r2, #80	; 0x50
    29c2:	uxtb	r3, r3
    29c4:	uxth	r2, r2
  return year > 127 || month > 12 || day > 31 ? 0
    29c6:	cmp	r1, #31
    29c8:	it	ls
    29ca:	cmpls	r3, #12
    29cc:	bhi.n	29d2 <SDClass::dateTime(unsigned short*, unsigned short*)+0x42>
    29ce:	cmp	r2, #127	; 0x7f
    29d0:	bls.n	2a04 <SDClass::dateTime(unsigned short*, unsigned short*)+0x74>
                                              : year << 9 | month << 5 | day;
    29d2:	movs	r1, #0
		*time = FS_TIME(datetime.hour, datetime.min, datetime.sec);
    29d4:	ldrb.w	r2, [sp, #2]
    29d8:	ldrb.w	r3, [sp, #1]
		*date = FS_DATE(datetime.year + 1900, datetime.mon + 1, datetime.mday);
    29dc:	strh	r1, [r5, #0]
  return hour > 23 || minute > 59 || second > 59
    29de:	cmp	r2, #23
    29e0:	it	ls
    29e2:	cmpls	r3, #59	; 0x3b
		*time = FS_TIME(datetime.hour, datetime.min, datetime.sec);
    29e4:	ldrb.w	r1, [sp]
    29e8:	bhi.n	29ee <SDClass::dateTime(unsigned short*, unsigned short*)+0x5e>
    29ea:	cmp	r1, #59	; 0x3b
    29ec:	bls.n	29f6 <SDClass::dateTime(unsigned short*, unsigned short*)+0x66>
             : hour << 11 | minute << 5 | second >> 1;
    29ee:	movs	r3, #0
    29f0:	strh	r3, [r4, #0]
}
    29f2:	add	sp, #12
    29f4:	pop	{r4, r5, pc}
    29f6:	lsls	r3, r3, #5
    29f8:	orr.w	r3, r3, r2, lsl #11
    29fc:	orr.w	r3, r3, r1, lsr #1
    2a00:	uxth	r3, r3
    2a02:	b.n	29f0 <SDClass::dateTime(unsigned short*, unsigned short*)+0x60>
                                              : year << 9 | month << 5 | day;
    2a04:	orr.w	r1, r1, r3, lsl #5
    2a08:	orr.w	r1, r1, r2, lsl #9
    2a0c:	uxth	r1, r1
    2a0e:	b.n	29d4 <SDClass::dateTime(unsigned short*, unsigned short*)+0x44>
    2a10:	.word	0x12cea5ff

00002a14 <SDClass::open(char const*, unsigned char)>:
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
    2a14:	cmp	r3, #1
	File open(const char *filepath, uint8_t mode = FILE_READ) {
    2a16:	push	{r4, r5, r6, r7, lr}
    2a18:	mov	r5, r0
    2a1a:	sub	sp, #84	; 0x54
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
    2a1c:	beq.n	2a9c <SDClass::open(char const*, unsigned char)+0x88>
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
    2a1e:	cmp	r3, #2
    2a20:	movw	r0, #514	; 0x202
		SDFAT_FILE file = sdfs.open(filepath, flags);
    2a24:	add.w	r1, r1, #4
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
    2a28:	ite	eq
    2a2a:	moveq	r3, r0
    2a2c:	movne	r3, #0
		SDFAT_FILE file = sdfs.open(filepath, flags);
    2a2e:	mov	r0, sp
    2a30:	bl	79e4 <FsVolume::open(char const*, int)>
    2a34:	ldr	r3, [sp, #72]	; 0x48
    2a36:	cmp	r3, #0
    2a38:	beq.n	2aae <SDClass::open(char const*, unsigned char)+0x9a>
		if (file) return File(new SDFile(file));
    2a3a:	movs	r0, #92	; 0x5c
class FileImpl {
    2a3c:	movs	r6, #0
    2a3e:	bl	d0a8 <operator new(unsigned int)>
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
    2a42:	ldr	r3, [pc, #132]	; (2ac8 <SDClass::open(char const*, unsigned char)+0xb4>)
    2a44:	add	r7, sp, #16
		if (file) return File(new SDFile(file));
    2a46:	mov	r4, r0
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
    2a48:	strd	r3, r6, [r0]
class Print
    2a4c:	ldrb.w	r3, [sp, #4]
    2a50:	mov	r1, r7
    2a52:	adds	r0, #24
    2a54:	strb.w	r3, [r0, #-12]
class Stream : public Print
    2a58:	ldr	r3, [pc, #112]	; (2acc <SDClass::open(char const*, unsigned char)+0xb8>)
    2a5a:	str.w	r3, [r0, #-16]
    2a5e:	ldr	r3, [sp, #8]
    2a60:	str.w	r3, [r0, #-8]
    2a64:	ldrb.w	r3, [sp, #12]
    2a68:	strb.w	r3, [r0, #-4]
    2a6c:	bl	7708 <FsBaseFile::FsBaseFile(FsBaseFile const&)>
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    2a70:	ldr	r3, [pc, #92]	; (2ad0 <SDClass::open(char const*, unsigned char)+0xbc>)
	constexpr Stream() : _timeout(1000), read_error(0) {}
    2a72:	mov.w	r2, #1000	; 0x3e8
    2a76:	str	r6, [r4, #88]	; 0x58
    2a78:	str	r3, [r4, #8]
	File(FileImpl *file) {
    2a7a:	ldr	r3, [pc, #88]	; (2ad4 <SDClass::open(char const*, unsigned char)+0xc0>)
	constexpr Print() : write_error(0) {}
    2a7c:	strb	r6, [r5, #4]
    2a7e:	str	r3, [r5, #0]
		if (f) f->refcount++;
    2a80:	ldr	r3, [r4, #4]
    2a82:	strb	r6, [r5, #12]
    2a84:	adds	r3, #1
    2a86:	str	r2, [r5, #8]
		f = file;
    2a88:	str	r4, [r5, #16]
		if (f) f->refcount++;
    2a8a:	str	r3, [r4, #4]
    2a8c:	ldr	r3, [pc, #72]	; (2ad8 <SDClass::open(char const*, unsigned char)+0xc4>)
  ~FsBaseFile() { close(); }
    2a8e:	mov	r0, r7
    2a90:	str	r3, [sp, #0]
    2a92:	bl	778c <FsBaseFile::close()>
		return File();
	}
    2a96:	mov	r0, r5
    2a98:	add	sp, #84	; 0x54
    2a9a:	pop	{r4, r5, r6, r7, pc}
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
    2a9c:	movw	r3, #16898	; 0x4202
		SDFAT_FILE file = sdfs.open(filepath, flags);
    2aa0:	adds	r1, #4
    2aa2:	mov	r0, sp
    2aa4:	bl	79e4 <FsVolume::open(char const*, int)>
  bool isOpen() const { return m_fFile || m_xFile; }
    2aa8:	ldr	r3, [sp, #72]	; 0x48
    2aaa:	cmp	r3, #0
    2aac:	bne.n	2a3a <SDClass::open(char const*, unsigned char)+0x26>
    2aae:	ldr	r3, [sp, #76]	; 0x4c
    2ab0:	cmp	r3, #0
    2ab2:	bne.n	2a3a <SDClass::open(char const*, unsigned char)+0x26>
    2ab4:	mov.w	r1, #1000	; 0x3e8
	constexpr File() : f(nullptr) { }
    2ab8:	ldr	r2, [pc, #24]	; (2ad4 <SDClass::open(char const*, unsigned char)+0xc0>)
    2aba:	add	r7, sp, #16
    2abc:	strb	r3, [r5, #4]
    2abe:	str	r1, [r5, #8]
    2ac0:	strb	r3, [r5, #12]
    2ac2:	str	r2, [r5, #0]
    2ac4:	str	r3, [r5, #16]
    2ac6:	b.n	2a8c <SDClass::open(char const*, unsigned char)+0x78>
    2ac8:	.word	0x20000ae8
    2acc:	.word	0x20000b44
    2ad0:	.word	0x20000ab8
    2ad4:	.word	0x20000a8c
    2ad8:	.word	0x2000099c

00002adc <SDClass::rmdir(char const*)>:
		return sdfs.rename(oldfilepath, newfilepath);
	}
	bool remove(const char *filepath) {
		return sdfs.remove(filepath);
	}
	bool rmdir(const char *filepath) {
    2adc:	push	{r4, lr}
   * The subdirectory file will be removed only if it is empty.
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char* path) {
    return m_fVol ? m_fVol->rmdir(path) : m_xVol ? m_xVol->rmdir(path) : false;
    2ade:	ldr.w	r4, [r0, #1156]	; 0x484
    2ae2:	sub	sp, #56	; 0x38
    2ae4:	mov	r2, r1
    2ae6:	cbz	r4, 2afa <SDClass::rmdir(char const*)+0x1e>
    2ae8:	movs	r3, #0
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char* path) {
    FatFile sub;
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    2aea:	mov	r1, r4
    2aec:	mov	r0, sp
    2aee:	str	r3, [sp, #0]
    2af0:	bl	6034 <FatFile::open(FatVolume*, char const*, int)>
    2af4:	cbnz	r0, 2b18 <SDClass::rmdir(char const*)+0x3c>
		return sdfs.rmdir(filepath);
	}
    2af6:	add	sp, #56	; 0x38
    2af8:	pop	{r4, pc}
    2afa:	ldr.w	r1, [r0, #1160]	; 0x488
    2afe:	cbz	r1, 2b12 <SDClass::rmdir(char const*)+0x36>
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char* path) {
    ExFatFile sub;
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    2b00:	mov	r3, r4
    2b02:	mov	r0, sp
    2b04:	str	r4, [sp, #48]	; 0x30
    2b06:	bl	43e8 <ExFatFile::open(ExFatVolume*, char const*, int)>
    2b0a:	cbnz	r0, 2b22 <SDClass::rmdir(char const*)+0x46>
    2b0c:	movs	r0, #0
    2b0e:	add	sp, #56	; 0x38
    2b10:	pop	{r4, pc}
    2b12:	mov	r0, r1
    2b14:	add	sp, #56	; 0x38
    2b16:	pop	{r4, pc}
    2b18:	mov	r0, sp
    2b1a:	bl	64d4 <FatFile::rmdir()>
    2b1e:	add	sp, #56	; 0x38
    2b20:	pop	{r4, pc}
    2b22:	mov	r0, sp
    2b24:	bl	4a90 <ExFatFile::rmdir()>
    2b28:	cmp	r0, #0
    2b2a:	beq.n	2b0c <SDClass::rmdir(char const*)+0x30>
    2b2c:	b.n	2af6 <SDClass::rmdir(char const*)+0x1a>
    2b2e:	nop

00002b30 <SDClass::rename(char const*, char const*)>:
	bool rename(const char *oldfilepath, const char *newfilepath) {
    2b30:	push	{r4, r5, r6, lr}
    return m_fVol   ? m_fVol->rename(oldPath, newPath)
    2b32:	ldr.w	r5, [r0, #1156]	; 0x484
    2b36:	sub	sp, #56	; 0x38
    2b38:	mov	r6, r2
    2b3a:	cbz	r5, 2b54 <SDClass::rename(char const*, char const*)+0x24>
#endif  // ENABLE_ARDUINO_STRING

 private:
  friend FatFile;
  static FatVolume* cwv() { return m_cwv; }
  FatFile* vwd() { return &m_vwd; }
    2b3c:	addw	r5, r5, #1092	; 0x444
    2b40:	movs	r3, #0
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
    2b42:	mov	r2, r1
    2b44:	mov	r0, sp
    2b46:	mov	r1, r5
    2b48:	str	r3, [sp, #0]
    2b4a:	bl	5f3c <FatFile::open(FatFile*, char const*, int)>
    2b4e:	cbnz	r0, 2b76 <SDClass::rename(char const*, char const*)+0x46>
	}
    2b50:	add	sp, #56	; 0x38
    2b52:	pop	{r4, r5, r6, pc}
    2b54:	ldr.w	r0, [r0, #1160]	; 0x488
           : m_xVol ? m_xVol->rename(oldPath, newPath)
    2b58:	cmp	r0, #0
    2b5a:	beq.n	2b50 <SDClass::rename(char const*, char const*)+0x20>
#endif  // ENABLE_ARDUINO_STRING

 private:
  friend ExFatFile;
  static ExFatVolume* cwv() { return m_cwv; }
  ExFatFile* vwd() { return &m_vwd; }
    2b5c:	add.w	r4, r0, #1096	; 0x448
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
    2b60:	mov	r2, r1
    2b62:	mov	r3, r5
    2b64:	mov	r0, sp
    2b66:	mov	r1, r4
    2b68:	str	r5, [sp, #48]	; 0x30
    2b6a:	bl	42f4 <ExFatFile::open(ExFatFile*, char const*, int)>
    2b6e:	cbnz	r0, 2b84 <SDClass::rename(char const*, char const*)+0x54>
    2b70:	movs	r0, #0
    2b72:	add	sp, #56	; 0x38
    2b74:	pop	{r4, r5, r6, pc}
    2b76:	mov	r2, r6
    2b78:	mov	r1, r5
    2b7a:	mov	r0, sp
    2b7c:	bl	62e8 <FatFile::rename(FatFile*, char const*)>
    2b80:	add	sp, #56	; 0x38
    2b82:	pop	{r4, r5, r6, pc}
    2b84:	mov	r2, r6
    2b86:	mov	r1, r4
    2b88:	mov	r0, sp
    2b8a:	bl	4d38 <ExFatFile::rename(ExFatFile*, char const*)>
    2b8e:	cmp	r0, #0
    2b90:	beq.n	2b70 <SDClass::rename(char const*, char const*)+0x40>
    2b92:	b.n	2b50 <SDClass::rename(char const*, char const*)+0x20>

00002b94 <SDClass::remove(char const*)>:
	bool remove(const char *filepath) {
    2b94:	push	{r4, lr}
    return m_fVol   ? m_fVol->remove(path)
    2b96:	ldr.w	r4, [r0, #1156]	; 0x484
    2b9a:	sub	sp, #56	; 0x38
    2b9c:	mov	r2, r1
    2b9e:	cbz	r4, 2bb4 <SDClass::remove(char const*)+0x20>
    2ba0:	movs	r0, #0
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    2ba2:	movs	r3, #1
    2ba4:	mov	r1, r4
    2ba6:	str	r0, [sp, #0]
    2ba8:	mov	r0, sp
    2baa:	bl	6034 <FatFile::open(FatVolume*, char const*, int)>
    2bae:	cbnz	r0, 2bd2 <SDClass::remove(char const*)+0x3e>
	}
    2bb0:	add	sp, #56	; 0x38
    2bb2:	pop	{r4, pc}
    2bb4:	ldr.w	r1, [r0, #1160]	; 0x488
           : m_xVol ? m_xVol->remove(path)
    2bb8:	cbz	r1, 2bcc <SDClass::remove(char const*)+0x38>
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    2bba:	movs	r3, #1
    2bbc:	mov	r0, sp
    2bbe:	str	r4, [sp, #48]	; 0x30
    2bc0:	bl	43e8 <ExFatFile::open(ExFatVolume*, char const*, int)>
    2bc4:	cbnz	r0, 2bdc <SDClass::remove(char const*)+0x48>
    2bc6:	movs	r0, #0
    2bc8:	add	sp, #56	; 0x38
    2bca:	pop	{r4, pc}
    2bcc:	mov	r0, r1
    2bce:	add	sp, #56	; 0x38
    2bd0:	pop	{r4, pc}
    2bd2:	mov	r0, sp
    2bd4:	bl	75f8 <FatFile::remove()>
    2bd8:	add	sp, #56	; 0x38
    2bda:	pop	{r4, pc}
    2bdc:	mov	r0, sp
    2bde:	bl	49dc <ExFatFile::remove()>
    2be2:	cmp	r0, #0
    2be4:	beq.n	2bc6 <SDClass::remove(char const*)+0x32>
    2be6:	b.n	2bb0 <SDClass::remove(char const*)+0x1c>

00002be8 <SDClass::mkdir(char const*)>:
	bool mkdir(const char *filepath) {
    2be8:	push	{r4, r5, lr}
    return m_fVol   ? m_fVol->mkdir(path, pFlag)
    2bea:	ldr.w	r4, [r0, #1156]	; 0x484
    2bee:	sub	sp, #60	; 0x3c
    2bf0:	mov	r2, r1
    2bf2:	cbz	r4, 2c08 <SDClass::mkdir(char const*)+0x20>
    2bf4:	movs	r5, #0
    return sub.mkdir(vwd(), path, pFlag);
    2bf6:	movs	r3, #1
    2bf8:	addw	r1, r4, #1092	; 0x444
    2bfc:	mov	r0, sp
    2bfe:	str	r5, [sp, #0]
    2c00:	bl	5e58 <FatFile::mkdir(FatFile*, char const*, bool)>
	}
    2c04:	add	sp, #60	; 0x3c
    2c06:	pop	{r4, r5, pc}
    2c08:	ldr.w	r0, [r0, #1160]	; 0x488
           : m_xVol ? m_xVol->mkdir(path, pFlag)
    2c0c:	cmp	r0, #0
    2c0e:	beq.n	2c04 <SDClass::mkdir(char const*)+0x1c>
    return sub.mkdir(vwd(), path, pFlag);
    2c10:	add.w	r1, r0, #1096	; 0x448
    2c14:	movs	r3, #1
    2c16:	mov	r0, sp
    2c18:	str	r4, [sp, #48]	; 0x30
    2c1a:	bl	4e3c <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
    2c1e:	add	sp, #60	; 0x3c
    2c20:	pop	{r4, r5, pc}
    2c22:	nop

00002c24 <SDClass::exists(char const*)>:
	bool exists(const char *filepath) {
    2c24:	push	{r4, lr}
    return m_fVol   ? m_fVol->exists(path)
    2c26:	ldr.w	r4, [r0, #1156]	; 0x484
    2c2a:	sub	sp, #56	; 0x38
    2c2c:	mov	r2, r1
    2c2e:	cbz	r4, 2c40 <SDClass::exists(char const*)+0x1c>
    2c30:	movs	r3, #0
    return tmp.open(this, path, O_RDONLY);
    2c32:	mov	r1, r4
    2c34:	mov	r0, sp
    2c36:	str	r3, [sp, #0]
    2c38:	bl	6034 <FatFile::open(FatVolume*, char const*, int)>
	}
    2c3c:	add	sp, #56	; 0x38
    2c3e:	pop	{r4, pc}
    2c40:	ldr.w	r1, [r0, #1160]	; 0x488
           : m_xVol ? m_xVol->exists(path)
    2c44:	cbz	r1, 2c54 <SDClass::exists(char const*)+0x30>
    return tmp.open(this, path, O_RDONLY);
    2c46:	mov	r3, r4
    2c48:	mov	r0, sp
    2c4a:	str	r4, [sp, #48]	; 0x30
    2c4c:	bl	43e8 <ExFatFile::open(ExFatVolume*, char const*, int)>
    2c50:	add	sp, #56	; 0x38
    2c52:	pop	{r4, pc}
    2c54:	mov	r0, r1
    2c56:	add	sp, #56	; 0x38
    2c58:	pop	{r4, pc}
    2c5a:	nop

00002c5c <SDClass::usedSize()>:
	uint64_t usedSize() {
    2c5c:	push	{r3, r4, r5, r6, r7, lr}
    2c5e:	mov	r5, r0
		if (!cardPreviouslyPresent) return (uint64_t)0;
    2c60:	ldrb.w	r0, [r0, #1228]	; 0x4cc
    2c64:	cbnz	r0, 2c6a <SDClass::usedSize()+0xe>
    2c66:	mov	r1, r0
		return (uint64_t)(sdfs.clusterCount() - sdfs.freeClusterCount())
		  * (uint64_t)sdfs.bytesPerCluster();
	}
    2c68:	pop	{r3, r4, r5, r6, r7, pc}
    return m_fVol   ? m_fVol->clusterCount()
    2c6a:	ldr.w	r3, [r5, #1156]	; 0x484
    2c6e:	cmp	r3, #0
    2c70:	beq.n	2d0a <SDClass::usedSize()+0xae>
  /** Clear the cache and returns a pointer to the cache.  Not for normal apps.
   * \return A pointer to the cache buffer or zero if an error occurs.
   */
  uint8_t* cacheClear() { return m_cache.clear(); }
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const { return m_lastCluster - 1; }
    2c72:	ldr	r4, [r3, #28]
    2c74:	ldr.w	r0, [r5, #1164]	; 0x48c
    2c78:	subs	r4, #1
    }
    return rtn;
  }
  //----------------------------------------------------------------------------
  /** \return true if can be in dedicated SPI state */
  bool hasDedicatedSpi() { return m_card ? m_card->hasDedicatedSpi() : false; }
    2c7a:	cmp	r0, #0
    2c7c:	beq.n	2d36 <SDClass::usedSize()+0xda>
    2c7e:	ldr	r3, [r0, #0]
    2c80:	ldr	r3, [r3, #56]	; 0x38
    2c82:	blx	r3
    2c84:	cbz	r0, 2cc0 <SDClass::usedSize()+0x64>
    2c86:	ldr.w	r0, [r5, #1164]	; 0x48c
    }
    errorPrint(pr);
  }
  //----------------------------------------------------------------------------
  /** \return true if in dedicated SPI state. */
  bool isDedicatedSpi() { return m_card ? m_card->isDedicatedSpi() : false; }
    2c8a:	cbz	r0, 2cec <SDClass::usedSize()+0x90>
    2c8c:	ldr	r3, [r0, #0]
    2c8e:	ldr	r3, [r3, #60]	; 0x3c
    2c90:	blx	r3
    2c92:	cbnz	r0, 2cc0 <SDClass::usedSize()+0x64>
    2c94:	ldr.w	r0, [r5, #1164]	; 0x48c
  /** Set SPI sharing state
   * \param[in] value desired state.
   * \return true for success else false;
   */
  bool setDedicatedSpi(bool value) {
    if (m_card) {
    2c98:	cbz	r0, 2cec <SDClass::usedSize()+0x90>
      return m_card->setDedicatedSpi(value);
    2c9a:	ldr	r3, [r0, #0]
    2c9c:	movs	r1, #1
    2c9e:	ldr	r3, [r3, #64]	; 0x40
    2ca0:	blx	r3
    if (switchSpi && !setDedicatedSpi(true)) {
    2ca2:	mov	r7, r0
    2ca4:	cbz	r0, 2cec <SDClass::usedSize()+0x90>
    return m_fVol   ? m_fVol->freeClusterCount()
    2ca6:	ldr.w	r0, [r5, #1156]	; 0x484
    2caa:	cbnz	r0, 2d04 <SDClass::usedSize()+0xa8>
    2cac:	ldr.w	r3, [r5, #1160]	; 0x488
           : m_xVol ? m_xVol->freeClusterCount()
    2cb0:	cbnz	r3, 2cd0 <SDClass::usedSize()+0x74>
    2cb2:	ldr.w	r0, [r5, #1164]	; 0x48c
    if (m_card) {
    2cb6:	cmp	r0, #0
    2cb8:	beq.n	2d46 <SDClass::usedSize()+0xea>
    uint32_t rtn = Vol::freeClusterCount();
    2cba:	mov.w	r6, #4294967295
    2cbe:	b.n	2ce0 <SDClass::usedSize()+0x84>
    return m_fVol   ? m_fVol->freeClusterCount()
    2cc0:	ldr.w	r0, [r5, #1156]	; 0x484
    2cc4:	cbnz	r0, 2d02 <SDClass::usedSize()+0xa6>
    2cc6:	ldr.w	r3, [r5, #1160]	; 0x488
           : m_xVol ? m_xVol->freeClusterCount()
    2cca:	cmp	r3, #0
    2ccc:	beq.n	2d46 <SDClass::usedSize()+0xea>
    bool switchSpi = hasDedicatedSpi() && !isDedicatedSpi();
    2cce:	mov	r7, r0
    2cd0:	mov	r0, r3
    2cd2:	bl	47d4 <ExFatPartition::freeClusterCount()>
    uint32_t rtn = Vol::freeClusterCount();
    2cd6:	mov	r6, r0
    if (switchSpi && !setDedicatedSpi(false)) {
    2cd8:	cbz	r7, 2cea <SDClass::usedSize()+0x8e>
    2cda:	ldr.w	r0, [r5, #1164]	; 0x48c
    if (m_card) {
    2cde:	cbz	r0, 2cec <SDClass::usedSize()+0x90>
      return m_card->setDedicatedSpi(value);
    2ce0:	ldr	r3, [r0, #0]
    2ce2:	movs	r1, #0
    2ce4:	ldr	r3, [r3, #64]	; 0x40
    2ce6:	blx	r3
    if (switchSpi && !setDedicatedSpi(false)) {
    2ce8:	cbz	r0, 2cec <SDClass::usedSize()+0x90>
		return (uint64_t)(sdfs.clusterCount() - sdfs.freeClusterCount())
    2cea:	subs	r4, r4, r6
    return m_fVol   ? m_fVol->bytesPerCluster()
    2cec:	ldr.w	r3, [r5, #1156]	; 0x484
    2cf0:	cbz	r3, 2d26 <SDClass::usedSize()+0xca>
    return m_bytesPerSector << m_sectorsPerClusterShift;
    2cf2:	ldrb	r3, [r3, #6]
    2cf4:	mov.w	r1, #512	; 0x200
    2cf8:	lsls	r1, r3
		  * (uint64_t)sdfs.bytesPerCluster();
    2cfa:	uxth	r1, r1
    2cfc:	umull	r0, r1, r1, r4
	}
    2d00:	pop	{r3, r4, r5, r6, r7, pc}
    bool switchSpi = hasDedicatedSpi() && !isDedicatedSpi();
    2d02:	movs	r7, #0
    return m_fVol   ? m_fVol->freeClusterCount()
    2d04:	bl	6cf4 <FatPartition::freeClusterCount()>
    2d08:	b.n	2cd6 <SDClass::usedSize()+0x7a>
    2d0a:	ldr.w	r3, [r5, #1160]	; 0x488
  uint32_t clusterCount() const {
    2d0e:	ldr.w	r0, [r5, #1164]	; 0x48c
           : m_xVol ? m_xVol->clusterCount()
    2d12:	cbz	r3, 2d40 <SDClass::usedSize()+0xe4>
  /** Clear the cache and returns a pointer to the cache.  Not for normal apps.
   * \return A pointer to the cache buffer or zero if an error occurs.
   */
  uint8_t* cacheClear() { return m_dataCache.clear(); }
  /** \return the cluster count for the partition. */
  uint32_t clusterCount() const { return m_clusterCount; }
    2d14:	ldr.w	r4, [r3, #1072]	; 0x430
  bool hasDedicatedSpi() { return m_card ? m_card->hasDedicatedSpi() : false; }
    2d18:	cmp	r0, #0
    2d1a:	bne.n	2c7e <SDClass::usedSize()+0x22>
           : m_xVol ? m_xVol->freeClusterCount()
    2d1c:	mov	r0, r3
    2d1e:	bl	47d4 <ExFatPartition::freeClusterCount()>
    2d22:	mov	r6, r0
    2d24:	b.n	2cea <SDClass::usedSize()+0x8e>
    2d26:	ldr.w	r3, [r5, #1160]	; 0x488
           : m_xVol ? m_xVol->bytesPerCluster()
    2d2a:	cbz	r3, 2d46 <SDClass::usedSize()+0xea>
		  * (uint64_t)sdfs.bytesPerCluster();
    2d2c:	ldr.w	r1, [r3, #1084]	; 0x43c
    2d30:	umull	r0, r1, r1, r4
	}
    2d34:	pop	{r3, r4, r5, r6, r7, pc}
    return m_fVol   ? m_fVol->freeClusterCount()
    2d36:	mov	r0, r3
    2d38:	bl	6cf4 <FatPartition::freeClusterCount()>
    2d3c:	mov	r6, r0
    2d3e:	b.n	2cea <SDClass::usedSize()+0x8e>
    2d40:	cbz	r0, 2d46 <SDClass::usedSize()+0xea>
           : m_xVol ? m_xVol->clusterCount()
    2d42:	mov	r4, r3
    2d44:	b.n	2c7e <SDClass::usedSize()+0x22>
  uint32_t bytesPerCluster() const {
    2d46:	movs	r0, #0
    2d48:	mov	r1, r0
    2d4a:	b.n	2c68 <SDClass::usedSize()+0xc>

00002d4c <SDClass::totalSize()>:
	uint64_t totalSize() {
		if (!cardPreviouslyPresent) return (uint64_t)0;
    2d4c:	ldrb.w	r3, [r0, #1228]	; 0x4cc
    2d50:	cbz	r3, 2d6c <SDClass::totalSize()+0x20>
    return m_fVol   ? m_fVol->clusterCount()
    2d52:	ldr.w	r3, [r0, #1156]	; 0x484
    2d56:	cbz	r3, 2d72 <SDClass::totalSize()+0x26>
    2d58:	ldrb	r2, [r3, #6]
    2d5a:	mov.w	r0, #512	; 0x200
  uint32_t clusterCount() const { return m_lastCluster - 1; }
    2d5e:	ldr	r1, [r3, #28]
    return m_bytesPerSector << m_sectorsPerClusterShift;
    2d60:	lsls	r0, r2
  uint32_t clusterCount() const { return m_lastCluster - 1; }
    2d62:	subs	r1, #1
		return (uint64_t)sdfs.clusterCount() * (uint64_t)sdfs.bytesPerCluster();
    2d64:	uxth	r0, r0
    2d66:	umull	r0, r1, r0, r1
    2d6a:	bx	lr
		if (!cardPreviouslyPresent) return (uint64_t)0;
    2d6c:	mov	r0, r3
    2d6e:	mov	r1, r0
	}
    2d70:	bx	lr
    2d72:	ldr.w	r0, [r0, #1160]	; 0x488
           : m_xVol ? m_xVol->clusterCount()
    2d76:	cmp	r0, #0
    2d78:	beq.n	2d6e <SDClass::totalSize()+0x22>
		return (uint64_t)sdfs.clusterCount() * (uint64_t)sdfs.bytesPerCluster();
    2d7a:	ldr.w	r1, [r0, #1084]	; 0x43c
    2d7e:	ldr.w	r0, [r0, #1072]	; 0x430
    2d82:	umull	r0, r1, r1, r0
    2d86:	bx	lr

00002d88 <SDClass::format(int, char, Print&)>:
{
    2d88:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  SdCard* card() { return m_card; }
    2d8c:	ldr.w	r5, [r0, #1164]	; 0x48c
    2d90:	sub	sp, #60	; 0x3c
	if (!card) return false; // no SD card
    2d92:	cbz	r5, 2da8 <SDClass::format(int, char, Print&)+0x20>
    2d94:	mov	r8, r3
	uint32_t sectors = card->sectorCount();
    2d96:	ldr	r3, [r5, #0]
    2d98:	mov	r4, r0
    2d9a:	mov	r0, r5
    2d9c:	ldr	r3, [r3, #24]
    2d9e:	blx	r3
	if (sectors <= 12288) return false; // card too small
    2da0:	cmp.w	r0, #12288	; 0x3000
	uint32_t sectors = card->sectorCount();
    2da4:	mov	r6, r0
	if (sectors <= 12288) return false; // card too small
    2da6:	bhi.n	2db2 <SDClass::format(int, char, Print&)+0x2a>
	if (!card) return false; // no SD card
    2da8:	movs	r6, #0
}
    2daa:	mov	r0, r6
    2dac:	add	sp, #60	; 0x3c
    2dae:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint8_t *buf = (uint8_t *)malloc(512);
    2db2:	mov.w	r0, #512	; 0x200
    2db6:	bl	d240 <malloc>
	if (!buf) return false; // unable to allocate memory
    2dba:	mov	r7, r0
    2dbc:	cmp	r0, #0
    2dbe:	beq.n	2da8 <SDClass::format(int, char, Print&)+0x20>
		ret = exFatFormatter.format(card, buf, &pr);
    2dc0:	add.w	r9, sp, #12
	if (sectors > 67108864) {
    2dc4:	cmp.w	r6, #67108864	; 0x4000000
		ret = exFatFormatter.format(card, buf, &pr);
    2dc8:	mov	r2, r0
    2dca:	mov	r3, r8
    2dcc:	mov	r1, r5
    2dce:	mov	r0, r9
	if (sectors > 67108864) {
    2dd0:	bls.n	2e32 <SDClass::format(int, char, Print&)+0xaa>
		ret = exFatFormatter.format(card, buf, &pr);
    2dd2:	bl	349c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)>
    2dd6:	mov	r6, r0
	free(buf);
    2dd8:	mov	r0, r7
    2dda:	bl	d250 <free>
	if (ret) {
    2dde:	cmp	r6, #0
    2de0:	beq.n	2da8 <SDClass::format(int, char, Print&)+0x20>
		card->syncDevice();
    2de2:	ldr	r3, [r5, #0]
    2de4:	mov	r0, r5
		sdfs.restart(); // TODO: is sdfs.volumeBegin() enough??
    2de6:	adds	r7, r4, #4
		card->syncDevice();
    2de8:	ldr	r3, [r3, #28]
    2dea:	blx	r3
    if (spiConfigBackupPin == 255) {
    2dec:	ldrb.w	r3, [r4, #1212]	; 0x4bc
    2df0:	cmp	r3, #255	; 0xff
    2df2:	beq.n	2e3a <SDClass::format(int, char, Print&)+0xb2>
      SdSpiConfig spiConfig(spiConfigBackupPin, spiConfigBackupOptions,
    2df4:	ldr.w	r3, [r4, #1216]	; 0x4c0
   *
   * \param[in] config SPI configuration.
   * \return generic card pointer.
   */
  SdCard* newCard(SdSpiConfig config) {
    m_spiCard.begin(config);
    2df8:	addw	r5, r4, #1180	; 0x49c
    2dfc:	str	r3, [sp, #16]
    2dfe:	mov	r0, r5
    2e00:	ldr.w	r3, [r4, #1220]	; 0x4c4
  bool cardBegin(SdSpiConfig spiConfig) {
    2e04:	str	r3, [sp, #20]
    2e06:	ldrh.w	r3, [r4, #1212]	; 0x4bc
    2e0a:	strh.w	r3, [sp, #12]
    2e0e:	ldmia.w	r9, {r1, r2, r3}
    2e12:	bl	89a8 <DedicatedSpiCard::begin(SdSpiConfig)>
    return m_card && !m_card->errorCode();
    2e16:	ldrb.w	r2, [r4, #1198]	; 0x4ae
    m_card = m_cardFactory.newCard(spiConfig);
    2e1a:	str.w	r5, [r4, #1164]	; 0x48c
    return m_card && !m_card->errorCode();
    2e1e:	cmp	r2, #0
    2e20:	bne.n	2daa <SDClass::format(int, char, Print&)+0x22>
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    2e22:	movs	r3, #1
    2e24:	str	r2, [sp, #0]
    2e26:	mov	r1, r5
    2e28:	mov	r0, r7
    2e2a:	mov	r2, r3
    2e2c:	bl	78d0 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)>
    2e30:	b.n	2daa <SDClass::format(int, char, Print&)+0x22>
		ret = fatFormatter.format(card, buf, &pr);
    2e32:	bl	5854 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)>
    2e36:	mov	r6, r0
    2e38:	b.n	2dd8 <SDClass::format(int, char, Print&)+0x50>
   * \param[in] config SDIO configuration.
   * \return generic card pointer or nullptr if SDIO is not supported.
   */
  SdCard* newCard(SdioConfig config) {
#if HAS_SDIO_CLASS
    m_sdioCard.begin(config);
    2e3a:	add.w	r5, r4, #1168	; 0x490
    2e3e:	ldrb.w	r1, [r4, #1224]	; 0x4c8
    2e42:	mov	r0, r5
    2e44:	bl	9418 <SdioCard::begin(SdioConfig)>
    return m_card && !m_card->errorCode();
    2e48:	mov	r0, r5
    m_card = m_cardFactory.newCard(sdioConfig);
    2e4a:	str.w	r5, [r4, #1164]	; 0x48c
    return m_card && !m_card->errorCode();
    2e4e:	bl	8afc <SdioCard::errorCode() const>
    2e52:	mov	r2, r0
    2e54:	cmp	r0, #0
    2e56:	bne.n	2daa <SDClass::format(int, char, Print&)+0x22>
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    2e58:	movs	r3, #1
    2e5a:	ldr.w	r1, [r4, #1164]	; 0x48c
    2e5e:	mov	r0, r7
    2e60:	str	r2, [sp, #0]
    2e62:	mov	r2, r3
    2e64:	bl	78d0 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)>
    2e68:	b.n	2daa <SDClass::format(int, char, Print&)+0x22>
    2e6a:	nop

00002e6c <SDClass::mediaPresent()>:
{
    2e6c:	push	{r4, r5, r6, r7, lr}
  SdCard* card() { return m_card; }
    2e6e:	ldr.w	r6, [r0, #1164]	; 0x48c
    2e72:	sub	sp, #28
    2e74:	mov	r4, r0
	if (card) {
    2e76:	cmp	r6, #0
    2e78:	beq.n	2f02 <SDClass::mediaPresent()+0x96>
		if (cardPreviouslyPresent) {
    2e7a:	ldrb.w	r5, [r0, #1228]	; 0x4cc
			if (csPin_ == BUILTIN_SDCARD) {
    2e7e:	ldrb.w	r3, [r0, #1229]	; 0x4cd
		if (cardPreviouslyPresent) {
    2e82:	cbz	r5, 2ea6 <SDClass::mediaPresent()+0x3a>
			if (csPin_ == BUILTIN_SDCARD) {
    2e84:	cmp	r3, #254	; 0xfe
    2e86:	beq.n	2f56 <SDClass::mediaPresent()+0xea>
				if (cdPin_ < NUM_DIGITAL_PINS) ret = digitalRead(cdPin_);
    2e88:	ldrb.w	r0, [r4, #1230]	; 0x4ce
    2e8c:	cmp	r0, #54	; 0x36
    2e8e:	bls.n	2f0e <SDClass::mediaPresent()+0xa2>
					ret = card->readCID(&cid);
    2e90:	ldr	r3, [r6, #0]
    2e92:	add	r1, sp, #8
    2e94:	mov	r0, r6
    2e96:	ldr	r3, [r3, #68]	; 0x44
    2e98:	blx	r3
    2e9a:	mov	r5, r0
}
    2e9c:	mov	r0, r5
	cardPreviouslyPresent = ret;
    2e9e:	strb.w	r5, [r4, #1228]	; 0x4cc
}
    2ea2:	add	sp, #28
    2ea4:	pop	{r4, r5, r6, r7, pc}
			if (csPin_ == BUILTIN_SDCARD) ret = digitalReadFast(_SD_DAT3);
    2ea6:	cmp	r3, #254	; 0xfe
    2ea8:	beq.n	2efa <SDClass::mediaPresent()+0x8e>
				if (cdPin_ < NUM_DIGITAL_PINS) ret = digitalRead(cdPin_);
    2eaa:	ldrb.w	r0, [r0, #1230]	; 0x4ce
    2eae:	cmp	r0, #54	; 0x36
    2eb0:	bls.n	2f4c <SDClass::mediaPresent()+0xe0>
    if (spiConfigBackupPin == 255) {
    2eb2:	ldrb.w	r3, [r4, #1212]	; 0x4bc
				ret = sdfs.restart();
    2eb6:	adds	r7, r4, #4
    2eb8:	cmp	r3, #255	; 0xff
    2eba:	beq.n	2f1a <SDClass::mediaPresent()+0xae>
      SdSpiConfig spiConfig(spiConfigBackupPin, spiConfigBackupOptions,
    2ebc:	ldr.w	r3, [r4, #1216]	; 0x4c0
    m_spiCard.begin(config);
    2ec0:	addw	r6, r4, #1180	; 0x49c
    2ec4:	ldr.w	r2, [r4, #1220]	; 0x4c4
  bool cardBegin(SdSpiConfig spiConfig) {
    2ec8:	str	r3, [sp, #12]
    2eca:	mov	r0, r6
    2ecc:	ldrh.w	r3, [r4, #1212]	; 0x4bc
    2ed0:	str	r2, [sp, #16]
    2ed2:	strh.w	r3, [sp, #8]
    2ed6:	add	r3, sp, #8
    2ed8:	ldmia	r3, {r1, r2, r3}
    2eda:	bl	89a8 <DedicatedSpiCard::begin(SdSpiConfig)>
    return m_card && !m_card->errorCode();
    2ede:	ldrb.w	r2, [r4, #1198]	; 0x4ae
    m_card = m_cardFactory.newCard(spiConfig);
    2ee2:	str.w	r6, [r4, #1164]	; 0x48c
    return m_card && !m_card->errorCode();
    2ee6:	cbnz	r2, 2f04 <SDClass::mediaPresent()+0x98>
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    2ee8:	movs	r3, #1
    2eea:	str	r2, [sp, #0]
    2eec:	mov	r1, r6
    2eee:	mov	r0, r7
    2ef0:	mov	r2, r3
    2ef2:	bl	78d0 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)>
    2ef6:	mov	r5, r0
    2ef8:	b.n	2f04 <SDClass::mediaPresent()+0x98>
			return (CORE_PIN46_PINREG & CORE_PIN46_BITMASK) ? 1 : 0;
    2efa:	ldr	r3, [pc, #128]	; (2f7c <SDClass::mediaPresent()+0x110>)
    2efc:	ldr	r3, [r3, #8]
			if (ret)
    2efe:	lsls	r3, r3, #14
    2f00:	bmi.n	2eb2 <SDClass::mediaPresent()+0x46>
		ret = false;
    2f02:	movs	r5, #0
}
    2f04:	mov	r0, r5
	cardPreviouslyPresent = ret;
    2f06:	strb.w	r5, [r4, #1228]	; 0x4cc
}
    2f0a:	add	sp, #28
    2f0c:	pop	{r4, r5, r6, r7, pc}
				if (cdPin_ < NUM_DIGITAL_PINS) ret = digitalRead(cdPin_);
    2f0e:	bl	bc5c <digitalRead>
    2f12:	subs	r5, r0, #0
    2f14:	it	ne
    2f16:	movne	r5, #1
    2f18:	b.n	2f04 <SDClass::mediaPresent()+0x98>
    m_sdioCard.begin(config);
    2f1a:	add.w	r6, r4, #1168	; 0x490
    2f1e:	ldrb.w	r1, [r4, #1224]	; 0x4c8
    2f22:	mov	r0, r6
    2f24:	bl	9418 <SdioCard::begin(SdioConfig)>
    return m_card && !m_card->errorCode();
    2f28:	mov	r0, r6
    m_card = m_cardFactory.newCard(sdioConfig);
    2f2a:	str.w	r6, [r4, #1164]	; 0x48c
    return m_card && !m_card->errorCode();
    2f2e:	bl	8afc <SdioCard::errorCode() const>
    2f32:	mov	r2, r0
    2f34:	cmp	r0, #0
    2f36:	bne.n	2f04 <SDClass::mediaPresent()+0x98>
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    2f38:	movs	r3, #1
    2f3a:	str	r2, [sp, #0]
    2f3c:	mov	r0, r7
    2f3e:	ldr.w	r1, [r4, #1164]	; 0x48c
    2f42:	mov	r2, r3
    2f44:	bl	78d0 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)>
    2f48:	mov	r5, r0
    2f4a:	b.n	2f04 <SDClass::mediaPresent()+0x98>
				if (cdPin_ < NUM_DIGITAL_PINS) ret = digitalRead(cdPin_);
    2f4c:	bl	bc5c <digitalRead>
			if (ret)
    2f50:	cmp	r0, #0
    2f52:	bne.n	2eb2 <SDClass::mediaPresent()+0x46>
    2f54:	b.n	2f02 <SDClass::mediaPresent()+0x96>
				s = card->status();
    2f56:	ldr	r3, [r6, #0]
    2f58:	mov	r0, r6
    2f5a:	ldr	r3, [r3, #88]	; 0x58
    2f5c:	blx	r3
			if (s == 0xFFFFFFFF) {
    2f5e:	adds	r2, r0, #1
				s = card->status();
    2f60:	mov	r3, r0
			if (s == 0xFFFFFFFF) {
    2f62:	beq.n	2e88 <SDClass::mediaPresent()+0x1c>
			} else if (s == 0) {
    2f64:	cmp	r0, #0
    2f66:	bne.n	2f04 <SDClass::mediaPresent()+0x98>
				if (csPin_ == BUILTIN_SDCARD) 
    2f68:	ldrb.w	r2, [r4, #1229]	; 0x4cd
    2f6c:	cmp	r2, #254	; 0xfe
    2f6e:	bne.n	2f02 <SDClass::mediaPresent()+0x96>
					pinMode(_SD_DAT3, INPUT_PULLDOWN);
    2f70:	movs	r1, #3
    2f72:	movs	r0, #46	; 0x2e
				ret = false;
    2f74:	mov	r5, r3
					pinMode(_SD_DAT3, INPUT_PULLDOWN);
    2f76:	bl	bc80 <pinMode>
    2f7a:	b.n	2f04 <SDClass::mediaPresent()+0x98>
    2f7c:	.word	0x42008000

00002f80 <SDClass::begin(unsigned char)>:
bool SDClass::begin(uint8_t csPin) {
    2f80:	push	{r4, r5, r6, r7, lr}
    2f82:	mov	r5, r1
    2f84:	mov	r4, r0
    2f86:	sub	sp, #28
	FsDateTime::setCallback(dateTime);
    2f88:	ldr	r0, [pc, #196]	; (3050 <SDClass::begin(unsigned char)+0xd0>)
    2f8a:	bl	32f8 <FsDateTime::setCallback(void (*)(unsigned short*, unsigned short*))>
	if (csPin == BUILTIN_SDCARD) {
    2f8e:	cmp	r5, #254	; 0xfe
	csPin_ = csPin; // remember which one passed in. 
    2f90:	strb.w	r5, [r4, #1229]	; 0x4cd
	if (csPin == BUILTIN_SDCARD) {
    2f94:	beq.n	2fe4 <SDClass::begin(unsigned char)+0x64>
	if (csPin < NUM_DIGITAL_PINS) {
    2f96:	cmp	r5, #54	; 0x36
    2f98:	bls.n	2fa0 <SDClass::begin(unsigned char)+0x20>
	return false;
    2f9a:	movs	r0, #0
}
    2f9c:	add	sp, #28
    2f9e:	pop	{r4, r5, r6, r7, pc}
    spiConfigBackupOptions = spiConfig.options;
    2fa0:	movs	r6, #0
    spiConfigBackupClock = spiConfig.maxSck;
    2fa2:	ldr	r3, [pc, #176]	; (3054 <SDClass::begin(unsigned char)+0xd4>)
    m_spiCard.begin(config);
    2fa4:	addw	r7, r4, #1180	; 0x49c
    2fa8:	strb.w	r5, [sp, #12]
    2fac:	str.w	r3, [r4, #1216]	; 0x4c0
    2fb0:	strb.w	r6, [sp, #13]
    2fb4:	mov	r0, r7
    spiConfigBackupPin = spiConfig.csPin; 
    2fb6:	strb.w	r5, [r4, #1212]	; 0x4bc
    spiConfigBackupOptions = spiConfig.options;
    2fba:	strb.w	r6, [r4, #1213]	; 0x4bd
    spiConfigBackupPort = spiConfig.spiPort;
    2fbe:	str.w	r6, [r4, #1220]	; 0x4c4
    2fc2:	strd	r3, r6, [sp, #16]
    2fc6:	add	r3, sp, #24
    2fc8:	ldmdb	r3, {r1, r2, r3}
    2fcc:	bl	89a8 <DedicatedSpiCard::begin(SdSpiConfig)>
    return m_card && !m_card->errorCode();
    2fd0:	ldrb.w	r2, [r4, #1198]	; 0x4ae
    m_card = m_cardFactory.newCard(spiConfig);
    2fd4:	str.w	r7, [r4, #1164]	; 0x48c
    return m_card && !m_card->errorCode();
    2fd8:	cbz	r2, 3040 <SDClass::begin(unsigned char)+0xc0>
    return cardBegin(spiConfig) && Vol::begin(m_card);
    2fda:	mov	r0, r6
		cardPreviouslyPresent = ret;
    2fdc:	strb.w	r0, [r4, #1228]	; 0x4cc
}
    2fe0:	add	sp, #28
    2fe2:	pop	{r4, r5, r6, r7, pc}
    sdioConfigBackup = sdioConfig;
    2fe4:	movs	r3, #0
    spiConfigBackupPin = 255; // Teensy
    2fe6:	movs	r2, #255	; 0xff
    m_sdioCard.begin(config);
    2fe8:	add.w	r5, r4, #1168	; 0x490
    2fec:	strb.w	r2, [r4, #1212]	; 0x4bc
    2ff0:	mov	r1, r3
    sdioConfigBackup = sdioConfig;
    2ff2:	strb.w	r3, [r4, #1224]	; 0x4c8
    2ff6:	mov	r0, r5
    2ff8:	bl	9418 <SdioCard::begin(SdioConfig)>
    return m_card && !m_card->errorCode();
    2ffc:	mov	r0, r5
    m_card = m_cardFactory.newCard(sdioConfig);
    2ffe:	str.w	r5, [r4, #1164]	; 0x48c
    return m_card && !m_card->errorCode();
    3002:	bl	8afc <SdioCard::errorCode() const>
    3006:	mov	r2, r0
    3008:	cbnz	r0, 302a <SDClass::begin(unsigned char)+0xaa>
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    300a:	movs	r3, #1
    300c:	ldr.w	r1, [r4, #1164]	; 0x48c
    3010:	adds	r0, r4, #4
    3012:	str	r2, [sp, #0]
    3014:	mov	r2, r3
    3016:	bl	78d0 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)>
    301a:	cbz	r0, 302a <SDClass::begin(unsigned char)+0xaa>
		cardPreviouslyPresent = ret;
    301c:	movs	r2, #1
		cdPin_ = _SD_DAT3;
    301e:	movs	r3, #46	; 0x2e
		cardPreviouslyPresent = ret;
    3020:	strb.w	r2, [r4, #1228]	; 0x4cc
		cdPin_ = _SD_DAT3;
    3024:	strb.w	r3, [r4, #1230]	; 0x4ce
		if (!ret) pinMode(_SD_DAT3, INPUT_PULLDOWN);
    3028:	b.n	2f9c <SDClass::begin(unsigned char)+0x1c>
		cdPin_ = _SD_DAT3;
    302a:	movs	r0, #46	; 0x2e
		cardPreviouslyPresent = ret;
    302c:	movs	r5, #0
		if (!ret) pinMode(_SD_DAT3, INPUT_PULLDOWN);
    302e:	movs	r1, #3
		cdPin_ = _SD_DAT3;
    3030:	strb.w	r0, [r4, #1230]	; 0x4ce
		cardPreviouslyPresent = ret;
    3034:	strb.w	r5, [r4, #1228]	; 0x4cc
		if (!ret) pinMode(_SD_DAT3, INPUT_PULLDOWN);
    3038:	bl	bc80 <pinMode>
    303c:	mov	r0, r5
    303e:	b.n	2f9c <SDClass::begin(unsigned char)+0x1c>
    3040:	movs	r3, #1
    3042:	str	r2, [sp, #0]
    3044:	mov	r1, r7
    3046:	adds	r0, r4, #4
    3048:	mov	r2, r3
    304a:	bl	78d0 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)>
    304e:	b.n	2fdc <SDClass::begin(unsigned char)+0x5c>
    3050:	.word	0x00002991
    3054:	.word	0x017d7840

00003058 <_GLOBAL__sub_I_SD>:
	SDClass() { }
    3058:	ldr	r0, [pc, #108]	; (30c8 <_GLOBAL__sub_I_SD+0x70>)
  FsVolume() = default;
    305a:	movs	r3, #0
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
    305c:	ldr	r2, [pc, #108]	; (30cc <_GLOBAL__sub_I_SD+0x74>)
    305e:	mov.w	ip, #255	; 0xff
	SPISettings() : _clock(4000000) {
    3062:	ldr	r1, [pc, #108]	; (30d0 <_GLOBAL__sub_I_SD+0x78>)
	}
	return true;
}
    3064:	push	{r4}
    3066:	ldr	r4, [pc, #108]	; (30d4 <_GLOBAL__sub_I_SD+0x7c>)
    3068:	str.w	r2, [r0, #1168]	; 0x490
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
    306c:	movs	r2, #7
    306e:	str	r4, [r0, #0]
  /** SD is in multi-sector read state. */
  static const uint8_t READ_STATE = 1;
  /** SD is in multi-sector write state. */
  static const uint8_t WRITE_STATE = 2;
  /** Construct an instance of SharedSpiCard. */
  SharedSpiCard() { initSharedSpiCard(); }
    3070:	mov.w	r4, #2752512	; 0x2a0000
	SPISettings() : _clock(4000000) {
    3074:	str.w	r1, [r0, #1188]	; 0x4a4
    3078:	mov.w	r1, #65280	; 0xff00
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
    307c:	str.w	r2, [r0, #1192]	; 0x4a8
 * \brief Raw access to SD and SDHC flash memory cards via dedicate SPI port.
 */
class DedicatedSpiCard : public SharedSpiCard {
 public:
  /** Construct an instance of DedicatedSpiCard. */
  DedicatedSpiCard() = default;
    3080:	ldr	r2, [pc, #84]	; (30d8 <_GLOBAL__sub_I_SD+0x80>)
    3082:	strh.w	r1, [r0, #1228]	; 0x4cc
  SdioConfig() {}
    3086:	strh.w	r3, [r0, #1176]	; 0x498
  SharedSpiCard() { initSharedSpiCard(); }
    308a:	str.w	r4, [r0, #1196]	; 0x4ac
    308e:	strh.w	r3, [r0, #1200]	; 0x4b0
    m_type = 0;
    3092:	strb.w	r3, [r0, #1202]	; 0x4b2
    3096:	strb.w	r3, [r0, #1224]	; 0x4c8
    309a:	strb.w	ip, [r0, #1230]	; 0x4ce
  DedicatedSpiCard() = default;
    309e:	str.w	r2, [r0, #1180]	; 0x49c
SDClass SD;
    30a2:	ldr	r1, [pc, #56]	; (30dc <_GLOBAL__sub_I_SD+0x84>)
    30a4:	ldr	r2, [pc, #56]	; (30e0 <_GLOBAL__sub_I_SD+0x88>)
}
    30a6:	ldr.w	r4, [sp], #4
    30aa:	str.w	r3, [r0, #1156]	; 0x484
    30ae:	str.w	r3, [r0, #1160]	; 0x488
class SdBase : public Vol {
    30b2:	str.w	r3, [r0, #1164]	; 0x48c
 * \brief Optimized SPI class for access to SD and SDHC flash memory cards.
 */
class SdSpiArduinoDriver {
 public:
  /** Constructor. */
  SdSpiArduinoDriver() = default;
    30b6:	str.w	r3, [r0, #1184]	; 0x4a0
    30ba:	str.w	r3, [r0, #1204]	; 0x4b4
    30be:	strb.w	r3, [r0, #1208]	; 0x4b8
SDClass SD;
    30c2:	b.w	d234 <__aeabi_atexit>
    30c6:	nop
    30c8:	.word	0x20005300
    30cc:	.word	0x20000bbc
    30d0:	.word	0x003d0900
    30d4:	.word	0x20000b68
    30d8:	.word	0x200009f0
    30dc:	.word	0x0000298d
    30e0:	.word	0x20001498

000030e4 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)>:
  uint32_t c;
  uint8_t h;
  uint8_t s;

  uint8_t numberOfHeads;
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
    30e4:	cmp.w	r1, #256	; 0x100
    30e8:	bhi.n	312e <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x4a>
  if (capacityMB <= 16) {
    30ea:	cmp	r1, #16
    30ec:	bhi.n	314c <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x68>
    30ee:	movs	r3, #64	; 0x40
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
    30f0:	mov.w	ip, #32
  } else if (capacityMB <= 4032) {
    numberOfHeads = 128;
  } else {
    numberOfHeads = 255;
  }
  c = lba / (numberOfHeads * sectorsPerTrack);
    30f4:	udiv	r1, r2, r3
  if (c <= 1023) {
    30f8:	cmp.w	r1, #1024	; 0x400
    30fc:	bcs.n	3140 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x5c>
    h = (lba % (numberOfHeads * sectorsPerTrack)) / sectorsPerTrack;
    30fe:	mls	r3, r3, r1, r2
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba) {
    3102:	push	{lr}
    s = (lba % sectorsPerTrack) + 1;
    3104:	udiv	lr, r2, ip
    h = (lba % (numberOfHeads * sectorsPerTrack)) / sectorsPerTrack;
    3108:	udiv	r3, r3, ip
    s = (lba % sectorsPerTrack) + 1;
    310c:	mls	r2, ip, lr, r2
    c = 1023;
    h = 254;
    s = 63;
  }
  chs[0] = h;
  chs[1] = ((c >> 2) & 0XC0) | s;
    3110:	mov.w	ip, r1, lsr #2
    h = (lba % (numberOfHeads * sectorsPerTrack)) / sectorsPerTrack;
    3114:	uxtb	r3, r3
    s = (lba % sectorsPerTrack) + 1;
    3116:	adds	r2, #1
  chs[1] = ((c >> 2) & 0XC0) | s;
    3118:	bic.w	ip, ip, #63	; 0x3f
  chs[2] = c;
    311c:	uxtb	r1, r1
  chs[0] = h;
    311e:	strb	r3, [r0, #0]
  chs[1] = ((c >> 2) & 0XC0) | s;
    3120:	orr.w	r2, r2, ip
  chs[2] = c;
    3124:	strb	r1, [r0, #2]
  chs[1] = ((c >> 2) & 0XC0) | s;
    3126:	uxtb	r2, r2
    3128:	strb	r2, [r0, #1]
}
    312a:	ldr.w	pc, [sp], #4
    312e:	movs	r3, #63	; 0x3f
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
    3130:	mov	ip, r3
  } else if (capacityMB <= 128) {
    3132:	cmp	r1, #128	; 0x80
    3134:	bls.n	3158 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x74>
  } else if (capacityMB <= 504) {
    3136:	cmp.w	r1, #504	; 0x1f8
    313a:	bhi.n	315c <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x78>
  c = lba / (numberOfHeads * sectorsPerTrack);
    313c:	lsls	r3, r3, #4
    313e:	b.n	30f4 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x10>
    3140:	movs	r1, #255	; 0xff
    h = 254;
    3142:	movs	r3, #254	; 0xfe
  chs[1] = ((c >> 2) & 0XC0) | s;
    3144:	strb	r1, [r0, #1]
  chs[0] = h;
    3146:	strb	r3, [r0, #0]
  chs[2] = c;
    3148:	strb	r1, [r0, #2]
    314a:	bx	lr
  } else if (capacityMB <= 32) {
    314c:	cmp	r1, #32
    314e:	bhi.n	317e <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x9a>
    3150:	movs	r3, #128	; 0x80
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
    3152:	mov.w	ip, #32
    3156:	b.n	30f4 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x10>
  c = lba / (numberOfHeads * sectorsPerTrack);
    3158:	lsls	r3, r3, #3
    315a:	b.n	30f4 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x10>
  } else if (capacityMB <= 1008) {
    315c:	cmp.w	r1, #1008	; 0x3f0
    3160:	bls.n	316c <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x88>
  } else if (capacityMB <= 2016) {
    3162:	cmp.w	r1, #2016	; 0x7e0
    3166:	bhi.n	3170 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x8c>
  c = lba / (numberOfHeads * sectorsPerTrack);
    3168:	lsls	r3, r3, #6
    316a:	b.n	30f4 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x10>
    316c:	lsls	r3, r3, #5
    316e:	b.n	30f4 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x10>
  } else if (capacityMB <= 4032) {
    3170:	cmp.w	r1, #4032	; 0xfc0
  c = lba / (numberOfHeads * sectorsPerTrack);
    3174:	ite	ls
    3176:	lslls	r3, r3, #7
    3178:	rsbhi	r3, r3, r3, lsl #8
    317c:	b.n	30f4 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x10>
    317e:	movs	r3, #32
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
    3180:	mov	ip, r3
    3182:	b.n	3132 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x4e>

00003184 <FsCache::sync()>:

fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
    3184:	push	{r4, r5, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
    3186:	ldrb	r3, [r0, #0]
bool FsCache::sync() {
    3188:	sub	sp, #12
  if (m_status & CACHE_STATUS_DIRTY) {
    318a:	lsls	r4, r3, #31
    318c:	bpl.n	31ca <FsCache::sync()+0x46>
    if (!m_blockDev->writeSector(m_sector, m_buffer)) {
    318e:	mov	r4, r0
    3190:	ldr	r0, [r0, #4]
    3192:	add.w	r2, r4, #16
    3196:	ldr	r3, [r0, #0]
    3198:	ldr	r1, [r4, #8]
    319a:	str	r2, [sp, #4]
    319c:	ldr	r3, [r3, #32]
    319e:	blx	r3
    31a0:	ldr	r2, [sp, #4]
    31a2:	mov	r5, r0
    31a4:	cbz	r0, 31d2 <FsCache::sync()+0x4e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    31a6:	ldrb	r3, [r4, #0]
    31a8:	lsls	r1, r3, #30
    31aa:	bpl.n	31be <FsCache::sync()+0x3a>
      if (!m_blockDev->writeSector(m_sector + m_mirrorOffset, m_buffer)) {
    31ac:	ldr	r3, [r4, #12]
    31ae:	ldrd	r0, r1, [r4, #4]
    31b2:	add	r1, r3
    31b4:	ldr	r3, [r0, #0]
    31b6:	ldr	r3, [r3, #32]
    31b8:	blx	r3
    31ba:	cbz	r0, 31d2 <FsCache::sync()+0x4e>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    31bc:	ldrb	r3, [r4, #0]
    31be:	bic.w	r3, r3, #1
  }
  return true;

fail:
  return false;
}
    31c2:	mov	r0, r5
    m_status &= ~CACHE_STATUS_DIRTY;
    31c4:	strb	r3, [r4, #0]
}
    31c6:	add	sp, #12
    31c8:	pop	{r4, r5, pc}
  return true;
    31ca:	movs	r5, #1
}
    31cc:	mov	r0, r5
    31ce:	add	sp, #12
    31d0:	pop	{r4, r5, pc}
  return false;
    31d2:	movs	r5, #0
}
    31d4:	mov	r0, r5
    31d6:	add	sp, #12
    31d8:	pop	{r4, r5, pc}
    31da:	nop

000031dc <FsCache::prepare(unsigned long, unsigned char)>:
uint8_t* FsCache::prepare(uint32_t sector, uint8_t option) {
    31dc:	push	{r3, r4, r5, r6, r7, lr}
  if (!m_blockDev) {
    31de:	ldr	r3, [r0, #4]
    31e0:	cbz	r3, 3226 <FsCache::prepare(unsigned long, unsigned char)+0x4a>
  if (m_sector != sector) {
    31e2:	ldr	r3, [r0, #8]
    31e4:	mov	r4, r0
    31e6:	mov	r7, r1
    31e8:	mov	r5, r2
    31ea:	cmp	r3, r1
    31ec:	bne.n	31fc <FsCache::prepare(unsigned long, unsigned char)+0x20>
  m_status |= option & CACHE_STATUS_MASK;
    31ee:	ldrb.w	r3, [r0], #16
    31f2:	and.w	r5, r5, #3
    31f6:	orrs	r3, r5
    31f8:	strb	r3, [r4, #0]
}
    31fa:	pop	{r3, r4, r5, r6, r7, pc}
    if (!sync()) {
    31fc:	bl	3184 <FsCache::sync()>
    3200:	cbz	r0, 3226 <FsCache::prepare(unsigned long, unsigned char)+0x4a>
    if (!(option & CACHE_OPTION_NO_READ)) {
    3202:	lsls	r3, r5, #29
    3204:	bpl.n	3212 <FsCache::prepare(unsigned long, unsigned char)+0x36>
    3206:	add.w	r6, r4, #16
      if (!m_blockDev->readSector(sector, m_buffer)) {
    320a:	mov	r0, r6
    m_sector = sector;
    320c:	movs	r3, #0
    320e:	str	r7, [r4, #8]
    3210:	b.n	31f2 <FsCache::prepare(unsigned long, unsigned char)+0x16>
      if (!m_blockDev->readSector(sector, m_buffer)) {
    3212:	ldr	r0, [r4, #4]
    3214:	add.w	r6, r4, #16
    3218:	mov	r1, r7
    321a:	ldr	r3, [r0, #0]
    321c:	mov	r2, r6
    321e:	ldr	r3, [r3, #16]
    3220:	blx	r3
    3222:	cmp	r0, #0
    3224:	bne.n	320a <FsCache::prepare(unsigned long, unsigned char)+0x2e>
  return nullptr;
    3226:	movs	r0, #0
}
    3228:	pop	{r3, r4, r5, r6, r7, pc}
    322a:	nop

0000322c <toUpcase(unsigned short)>:
}
//------------------------------------------------------------------------------
uint16_t toUpcase(uint16_t chr) {
  uint16_t i, first;
  // Optimize for simple ASCII.
  if (chr < 127) {
    322c:	cmp	r0, #126	; 0x7e
    322e:	bls.n	32ae <toUpcase(unsigned short)+0x82>
  size_t right = size;
    3230:	mov.w	ip, #53	; 0x35
  size_t left = 0;
    3234:	movs	r3, #0
uint16_t toUpcase(uint16_t chr) {
    3236:	push	{r4, r5}
    3238:	ldr	r4, [pc, #160]	; (32dc <toUpcase(unsigned short)+0xb0>)
    323a:	b.n	3246 <toUpcase(unsigned short)+0x1a>
    if (readTable16(table[mid].key) <= key) {
    323c:	ldrh.w	r2, [r4, r1, lsl #2]
    3240:	cmp	r2, r0
    3242:	bhi.n	3286 <toUpcase(unsigned short)+0x5a>
    size_t mid = left + (right - left) / 2;
    3244:	mov	r3, r1
  while (right - left > 1) {
    3246:	sub.w	r2, ip, r3
    324a:	cmp	r2, #1
    size_t mid = left + (right - left) / 2;
    324c:	add.w	r1, r3, r2, lsr #1
  while (right - left > 1) {
    3250:	bhi.n	323c <toUpcase(unsigned short)+0x10>
    return chr - ('a' <= chr && chr <= 'z' ? 'a' - 'A' : 0);
  }
  i = searchPair16(reinterpret_cast<const pair16_t*>(mapTable), MAP_DIM, chr);
  first = readTable16(mapTable[i].base);
    3252:	uxth	r3, r3
    3254:	ldrh.w	r2, [r4, r3, lsl #2]
  if (first <= chr && (chr - first) < readTable8(mapTable[i].count)) {
    3258:	cmp	r0, r2
    325a:	bcs.n	328a <toUpcase(unsigned short)+0x5e>
    325c:	movs	r4, #75	; 0x4b
    325e:	movs	r3, #0
    3260:	ldr	r5, [pc, #124]	; (32e0 <toUpcase(unsigned short)+0xb4>)
    3262:	b.n	326e <toUpcase(unsigned short)+0x42>
    if (readTable16(table[mid].key) <= key) {
    3264:	ldrh.w	r2, [r5, r1, lsl #2]
    3268:	cmp	r2, r0
    326a:	bhi.n	32aa <toUpcase(unsigned short)+0x7e>
    size_t mid = left + (right - left) / 2;
    326c:	mov	r3, r1
  while (right - left > 1) {
    326e:	subs	r2, r4, r3
    3270:	cmp	r2, #1
    size_t mid = left + (right - left) / 2;
    3272:	add.w	r1, r3, r2, lsr #1
  while (right - left > 1) {
    3276:	bhi.n	3264 <toUpcase(unsigned short)+0x38>
      return chr - ((chr - first) & 1);
    }
    return chr + (off ? off : -0x1C60);
  }
  i = searchPair16(lookupTable, LOOKUP_DIM, chr);
  if (readTable16(lookupTable[i].key) == chr) {
    3278:	uxth	r3, r3
    327a:	ldrh.w	r2, [r5, r3, lsl #2]
    327e:	cmp	r2, r0
    3280:	beq.n	32c2 <toUpcase(unsigned short)+0x96>
    return readTable16(lookupTable[i].val);
  }
  return chr;
}
    3282:	pop	{r4, r5}
    3284:	bx	lr
    size_t mid = left + (right - left) / 2;
    3286:	mov	ip, r1
    3288:	b.n	3246 <toUpcase(unsigned short)+0x1a>
  if (first <= chr && (chr - first) < readTable8(mapTable[i].count)) {
    328a:	add.w	r4, r4, r3, lsl #2
    328e:	subs	r2, r0, r2
    3290:	ldrb	r3, [r4, #3]
    3292:	cmp	r2, r3
    3294:	bge.n	325c <toUpcase(unsigned short)+0x30>
    int8_t off = readTable8(mapTable[i].off);
    3296:	ldrsb.w	r3, [r4, #2]
    if (off == 1) {
    329a:	cmp	r3, #1
    329c:	beq.n	32cc <toUpcase(unsigned short)+0xa0>
    return chr + (off ? off : -0x1C60);
    329e:	cbz	r3, 32d6 <toUpcase(unsigned short)+0xaa>
    32a0:	uxth	r3, r3
    32a2:	add	r3, r0
}
    32a4:	pop	{r4, r5}
    return chr + (off ? off : -0x1C60);
    32a6:	uxth	r0, r3
}
    32a8:	bx	lr
    size_t mid = left + (right - left) / 2;
    32aa:	mov	r4, r1
    32ac:	b.n	326e <toUpcase(unsigned short)+0x42>
    return chr - ('a' <= chr && chr <= 'z' ? 'a' - 'A' : 0);
    32ae:	sub.w	r3, r0, #97	; 0x61
    32b2:	cmp	r3, #25
    32b4:	ite	hi
    32b6:	movhi	r3, #0
    32b8:	movls	r3, #1
    32ba:	sub.w	r3, r0, r3, lsl #5
    32be:	uxth	r0, r3
}
    32c0:	bx	lr
    return readTable16(lookupTable[i].val);
    32c2:	add.w	r5, r5, r3, lsl #2
    32c6:	ldrh	r0, [r5, #2]
}
    32c8:	pop	{r4, r5}
    32ca:	bx	lr
      return chr - ((chr - first) & 1);
    32cc:	and.w	r2, r2, #1
    32d0:	subs	r3, r0, r2
    32d2:	uxth	r0, r3
    32d4:	b.n	3282 <toUpcase(unsigned short)+0x56>
    return chr + (off ? off : -0x1C60);
    32d6:	movw	r3, #58272	; 0xe3a0
    32da:	b.n	32a2 <toUpcase(unsigned short)+0x76>
    32dc:	.word	0x20000690
    32e0:	.word	0x20000564

000032e4 <dateTimeMs10(unsigned short*, unsigned short*, unsigned char*)>:
  *ms10 = 0;
    32e4:	mov.w	ip, #0
  FsDateTime::callback2(date, time);
    32e8:	ldr	r3, [pc, #8]	; (32f4 <dateTimeMs10(unsigned short*, unsigned short*, unsigned char*)+0x10>)
  *ms10 = 0;
    32ea:	strb.w	ip, [r2]
  FsDateTime::callback2(date, time);
    32ee:	ldr	r3, [r3, #0]
    32f0:	bx	r3
    32f2:	nop
    32f4:	.word	0x20006408

000032f8 <FsDateTime::setCallback(void (*)(unsigned short*, unsigned short*))>:
  callback = dateTimeMs10;
    32f8:	ldr	r2, [pc, #8]	; (3304 <FsDateTime::setCallback(void (*)(unsigned short*, unsigned short*))+0xc>)
    32fa:	ldr	r1, [pc, #12]	; (3308 <FsDateTime::setCallback(void (*)(unsigned short*, unsigned short*))+0x10>)
  callback2 = dateTime;
    32fc:	ldr	r3, [pc, #12]	; (330c <FsDateTime::setCallback(void (*)(unsigned short*, unsigned short*))+0x14>)
  callback = dateTimeMs10;
    32fe:	str	r1, [r2, #0]
  callback2 = dateTime;
    3300:	str	r0, [r3, #0]
}
    3302:	bx	lr
    3304:	.word	0x20006404
    3308:	.word	0x000032e5
    330c:	.word	0x20006408

00003310 <Print::write(char const*) [clone .isra.0]>:
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    3310:	push	{r4, lr}
    3312:	mov	r4, r0
    3314:	sub	sp, #8
    3316:	mov	r0, r1
    3318:	str	r1, [sp, #4]
    331a:	bl	e400 <strlen>
    331e:	ldr	r3, [r4, #0]
    3320:	mov	r2, r0
    3322:	ldr	r1, [sp, #4]
    3324:	mov	r0, r4
    3326:	ldr	r3, [r3, #4]
    3328:	add	sp, #8
    332a:	ldmia.w	sp!, {r4, lr}
    332e:	bx	r3

00003330 <ExFatFormatter::syncUpcase()>:
  writeMsg(pr, "Format failed\r\n");
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFormatter::syncUpcase() {
  uint16_t index = m_upcaseSize & SECTOR_MASK;
    3330:	ldr	r3, [r0, #8]
    3332:	ubfx	r3, r3, #0, #9
  if (!index) {
    3336:	cbz	r3, 335a <ExFatFormatter::syncUpcase()+0x2a>
    return true;
  }
  for (size_t i = index; i < BYTES_PER_SECTOR; i++) {
    m_secBuf[i] = 0;
    3338:	movs	r1, #0
bool ExFatFormatter::syncUpcase() {
    333a:	push	{r4}
    m_secBuf[i] = 0;
    333c:	ldr	r2, [r0, #16]
    333e:	strb	r1, [r2, r3]
  for (size_t i = index; i < BYTES_PER_SECTOR; i++) {
    3340:	adds	r3, #1
    3342:	cmp.w	r3, #512	; 0x200
    3346:	bne.n	333c <ExFatFormatter::syncUpcase()+0xc>
  }
  return m_dev->writeSector(m_upcaseSector, m_secBuf);
    3348:	ldr	r1, [r0, #0]
    334a:	ldrd	r3, r2, [r0, #12]
    334e:	ldr	r4, [r3, #0]
    3350:	mov	r0, r3
    3352:	ldr	r3, [r4, #32]
}
    3354:	ldr.w	r4, [sp], #4
  return m_dev->writeSector(m_upcaseSector, m_secBuf);
    3358:	bx	r3
}
    335a:	movs	r0, #1
    335c:	bx	lr
    335e:	nop

00003360 <ExFatFormatter::writeUpcaseByte(unsigned char)>:
//------------------------------------------------------------------------------
bool ExFatFormatter::writeUpcaseByte(uint8_t b) {
  uint16_t index = m_upcaseSize & SECTOR_MASK;
    3360:	ldr	r2, [r0, #8]
bool ExFatFormatter::writeUpcaseByte(uint8_t b) {
    3362:	mov	r3, r0
  m_secBuf[index] = b;
    3364:	ldr	r0, [r0, #16]
  uint16_t index = m_upcaseSize & SECTOR_MASK;
    3366:	movw	ip, #511	; 0x1ff
    336a:	ubfx	r2, r2, #0, #9
  m_secBuf[index] = b;
    336e:	strb	r1, [r0, r2]
  m_upcaseChecksum = exFatChecksum(m_upcaseChecksum, b);
  m_upcaseSize++;
  if (index == SECTOR_MASK) {
    3370:	cmp	r2, ip
  uint8_t mustBeZero2[2];
  uint8_t unicode3[4];
} DirLfn_t;
//==============================================================================
inline uint32_t exFatChecksum(uint32_t sum, uint8_t data) {
  return (sum << 31) + (sum >> 1) + data;
    3372:	ldr	r0, [r3, #4]
    3374:	add.w	r1, r1, r0, ror #1
  m_upcaseSize++;
    3378:	ldr	r0, [r3, #8]
    337a:	add.w	r0, r0, #1
    337e:	strd	r1, r0, [r3, #4]
  if (index == SECTOR_MASK) {
    3382:	beq.n	3388 <ExFatFormatter::writeUpcaseByte(unsigned char)+0x28>
    return m_dev->writeSector(m_upcaseSector++, m_secBuf);
  }
  return true;
}
    3384:	movs	r0, #1
    3386:	bx	lr
    return m_dev->writeSector(m_upcaseSector++, m_secBuf);
    3388:	ldr	r0, [r3, #12]
    338a:	ldr	r1, [r3, #0]
bool ExFatFormatter::writeUpcaseByte(uint8_t b) {
    338c:	push	{r4}
    return m_dev->writeSector(m_upcaseSector++, m_secBuf);
    338e:	ldr	r4, [r0, #0]
    3390:	adds	r2, r1, #1
    3392:	ldr	r4, [r4, #32]
    3394:	str	r2, [r3, #0]
    3396:	ldr	r2, [r3, #16]
    3398:	mov	r3, r4
}
    339a:	ldr.w	r4, [sp], #4
    return m_dev->writeSector(m_upcaseSector++, m_secBuf);
    339e:	bx	r3

000033a0 <ExFatFormatter::writeUpcaseUnicode(unsigned short)>:
//------------------------------------------------------------------------------
bool ExFatFormatter::writeUpcaseUnicode(uint16_t unicode) {
    33a0:	push	{r3, r4, r5, lr}
  uint16_t index = m_upcaseSize & SECTOR_MASK;
    33a2:	ldr	r3, [r0, #8]
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    33a4:	uxtb	r2, r1
bool ExFatFormatter::writeUpcaseUnicode(uint16_t unicode) {
    33a6:	mov	r5, r1
  m_secBuf[index] = b;
    33a8:	ldr	r1, [r0, #16]
  uint16_t index = m_upcaseSize & SECTOR_MASK;
    33aa:	ubfx	r3, r3, #0, #9
    33ae:	movw	ip, #511	; 0x1ff
bool ExFatFormatter::writeUpcaseUnicode(uint16_t unicode) {
    33b2:	mov	r4, r0
  m_secBuf[index] = b;
    33b4:	strb	r2, [r1, r3]
  if (index == SECTOR_MASK) {
    33b6:	cmp	r3, ip
    33b8:	ldr	r1, [r0, #4]
    33ba:	add.w	r2, r2, r1, ror #1
  m_upcaseChecksum = exFatChecksum(m_upcaseChecksum, b);
    33be:	str	r2, [r0, #4]
  m_upcaseSize++;
    33c0:	ldr	r2, [r0, #8]
    33c2:	add.w	r2, r2, #1
    33c6:	str	r2, [r0, #8]
  if (index == SECTOR_MASK) {
    33c8:	beq.n	33d6 <ExFatFormatter::writeUpcaseUnicode(unsigned short)+0x36>
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    33ca:	lsrs	r1, r5, #8
    33cc:	mov	r0, r4
}
    33ce:	ldmia.w	sp!, {r3, r4, r5, lr}
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    33d2:	b.w	3360 <ExFatFormatter::writeUpcaseByte(unsigned char)>
    return m_dev->writeSector(m_upcaseSector++, m_secBuf);
    33d6:	ldr	r1, [r0, #0]
    33d8:	ldr	r0, [r0, #12]
    33da:	adds	r2, r1, #1
    33dc:	ldr	r3, [r0, #0]
    33de:	ldr	r3, [r3, #32]
    33e0:	str	r2, [r4, #0]
    33e2:	ldr	r2, [r4, #16]
    33e4:	blx	r3
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    33e6:	cmp	r0, #0
    33e8:	bne.n	33ca <ExFatFormatter::writeUpcaseUnicode(unsigned short)+0x2a>
}
    33ea:	pop	{r3, r4, r5, pc}

000033ec <ExFatFormatter::writeUpcase(unsigned long)>:
//------------------------------------------------------------------------------
bool ExFatFormatter::writeUpcase(uint32_t sector) {
    33ec:	push	{r3, r4, r5, r6, r7, lr}
  uint32_t n;
  uint32_t ns;
  uint32_t ch = 0;
  uint16_t uc;

  m_upcaseSize = 0;
    33ee:	movs	r3, #0
bool ExFatFormatter::writeUpcase(uint32_t sector) {
    33f0:	mov	r6, r0
  m_upcaseChecksum = 0;
  m_upcaseSector = sector;
    33f2:	str	r1, [r0, #0]
  uint32_t ch = 0;
    33f4:	mov	r5, r3
  m_upcaseChecksum = 0;
    33f6:	strd	r3, r3, [r0, #4]

  while (ch < 0X10000) {
    uc = toUpcase(ch);
    33fa:	uxth	r0, r5
    33fc:	bl	322c <toUpcase(unsigned short)>
    if (uc != ch) {
    3400:	cmp	r0, r5
    uc = toUpcase(ch);
    3402:	mov	r4, r0
    if (uc != ch) {
    3404:	beq.n	3416 <ExFatFormatter::writeUpcase(unsigned long)+0x2a>
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    3406:	uxtb	r1, r0
    3408:	mov	r0, r6
    340a:	bl	3360 <ExFatFormatter::writeUpcaseByte(unsigned char)>
    340e:	cmp	r0, #0
    3410:	bne.n	348a <ExFatFormatter::writeUpcase(unsigned long)+0x9e>
  }
  return true;

fail:
  return false;
}
    3412:	movs	r0, #0
    3414:	pop	{r3, r4, r5, r6, r7, pc}
      for (n = ch + 1; n < 0X10000 && n == toUpcase(n); n++) {
    3416:	adds	r4, r5, #1
    3418:	cmp.w	r4, #65536	; 0x10000
    341c:	bne.n	3428 <ExFatFormatter::writeUpcase(unsigned long)+0x3c>
    341e:	b.n	3476 <ExFatFormatter::writeUpcase(unsigned long)+0x8a>
    3420:	adds	r4, #1
    3422:	cmp.w	r4, #65536	; 0x10000
    3426:	beq.n	3432 <ExFatFormatter::writeUpcase(unsigned long)+0x46>
    3428:	uxth	r0, r4
    342a:	bl	322c <toUpcase(unsigned short)>
    342e:	cmp	r0, r4
    3430:	beq.n	3420 <ExFatFormatter::writeUpcase(unsigned long)+0x34>
      ns = n - ch;
    3432:	subs	r7, r4, r5
      if (ns >= MINIMUM_UPCASE_SKIP) {
    3434:	cmp.w	r7, #512	; 0x200
    3438:	bcc.n	3476 <ExFatFormatter::writeUpcase(unsigned long)+0x8a>
        if (!writeUpcaseUnicode(0XFFFF) || !writeUpcaseUnicode(ns)) {
    343a:	movw	r1, #65535	; 0xffff
    343e:	mov	r0, r6
    3440:	bl	33a0 <ExFatFormatter::writeUpcaseUnicode(unsigned short)>
    3444:	cmp	r0, #0
    3446:	beq.n	3412 <ExFatFormatter::writeUpcase(unsigned long)+0x26>
    3448:	uxth	r1, r7
    344a:	mov	r0, r6
    344c:	bl	33a0 <ExFatFormatter::writeUpcaseUnicode(unsigned short)>
    3450:	cmp	r0, #0
    3452:	beq.n	3412 <ExFatFormatter::writeUpcase(unsigned long)+0x26>
    3454:	mov	r5, r4
  while (ch < 0X10000) {
    3456:	cmp.w	r5, #65536	; 0x10000
    345a:	bne.n	33fa <ExFatFormatter::writeUpcase(unsigned long)+0xe>
  if (!syncUpcase()) {
    345c:	mov	r0, r6
}
    345e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  if (!syncUpcase()) {
    3462:	b.w	3330 <ExFatFormatter::syncUpcase()>
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    3466:	ubfx	r1, r5, #8, #8
    346a:	mov	r0, r6
    346c:	adds	r5, #1
    346e:	bl	3360 <ExFatFormatter::writeUpcaseByte(unsigned char)>
    3472:	cmp	r0, #0
    3474:	beq.n	3412 <ExFatFormatter::writeUpcase(unsigned long)+0x26>
        while (ch < n) {
    3476:	cmp	r5, r4
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    3478:	uxtb	r1, r5
    347a:	mov	r0, r6
        while (ch < n) {
    347c:	bcs.n	3456 <ExFatFormatter::writeUpcase(unsigned long)+0x6a>
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    347e:	bl	3360 <ExFatFormatter::writeUpcaseByte(unsigned char)>
    3482:	cmp	r0, #0
    3484:	bne.n	3466 <ExFatFormatter::writeUpcase(unsigned long)+0x7a>
}
    3486:	movs	r0, #0
    3488:	pop	{r3, r4, r5, r6, r7, pc}
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    348a:	ubfx	r1, r4, #8, #8
    348e:	mov	r0, r6
    3490:	bl	3360 <ExFatFormatter::writeUpcaseByte(unsigned char)>
    3494:	cmp	r0, #0
    3496:	beq.n	3412 <ExFatFormatter::writeUpcase(unsigned long)+0x26>
      ch++;
    3498:	adds	r5, #1
    349a:	b.n	3456 <ExFatFormatter::writeUpcase(unsigned long)+0x6a>

0000349c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)>:
bool ExFatFormatter::format(FsBlockDevice* dev, uint8_t* secBuf, print_t* pr) {
    349c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    34a0:	mov	r7, r3
    34a2:	sub	sp, #36	; 0x24
  sectorCount = dev->sectorCount();
    34a4:	ldr	r3, [r1, #0]
bool ExFatFormatter::format(FsBlockDevice* dev, uint8_t* secBuf, print_t* pr) {
    34a6:	mov	r5, r1
    34a8:	str	r0, [sp, #16]
    34aa:	mov	r4, r2
  m_dev = dev;
    34ac:	str	r1, [r0, #12]
  m_secBuf = secBuf;
    34ae:	str	r2, [r0, #16]
  sectorCount = dev->sectorCount();
    34b0:	mov	r0, r1
    34b2:	ldr	r3, [r3, #24]
    34b4:	blx	r3
  if (sectorCount < 0X100000) {
    34b6:	cmp.w	r0, #1048576	; 0x100000
  sectorCount = dev->sectorCount();
    34ba:	str	r0, [sp, #0]
  if (sectorCount < 0X100000) {
    34bc:	bcc.w	3670 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1d4>
  for (m = 1, vs = 0; m && sectorCount > m; m <<= 1, vs++) {
    34c0:	movs	r3, #0
    34c2:	movs	r2, #1
    34c4:	ldr	r6, [sp, #0]
    34c6:	adds	r3, #1
    34c8:	lsls	r2, r2, #1
    34ca:	uxtb	r3, r3
    34cc:	beq.n	34d2 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x36>
    34ce:	cmp	r6, r2
    34d0:	bhi.n	34c6 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x2a>
  sectorsPerClusterShift = vs < 29 ? 8 : (vs - 11) / 2;
    34d2:	cmp	r3, #28
    34d4:	str	r6, [sp, #0]
    34d6:	bls.w	3648 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1ac>
    34da:	sub.w	r8, r3, #11
  sectorsPerCluster = 1UL << sectorsPerClusterShift;
    34de:	movs	r2, #1
  sectorsPerClusterShift = vs < 29 ? 8 : (vs - 11) / 2;
    34e0:	asr.w	r1, r8, r2
    34e4:	ubfx	r8, r8, #1, #8
  sectorsPerCluster = 1UL << sectorsPerClusterShift;
    34e8:	lsls	r2, r1
  sectorsPerClusterShift = vs < 29 ? 8 : (vs - 11) / 2;
    34ea:	str	r1, [sp, #8]
  sectorsPerCluster = 1UL << sectorsPerClusterShift;
    34ec:	str	r2, [sp, #28]
  fatLength = 1UL << (vs < 27 ? 13 : (vs + 1) / 2);
    34ee:	adds	r3, #1
    34f0:	movs	r2, #1
    34f2:	asrs	r3, r3, #1
    34f4:	lsls	r2, r3
    34f6:	str	r2, [sp, #24]
  clusterCount = (sectorCount - 4 * fatLength) >> sectorsPerClusterShift;
    34f8:	movs	r2, #4
    34fa:	lsls	r2, r3
    34fc:	str	r2, [sp, #12]
  partitionOffset = 2 * fatLength;
    34fe:	movs	r2, #2
    3500:	lsl.w	r3, r2, r3
    3504:	str	r3, [sp, #4]
  clusterCount = (sectorCount - 4 * fatLength) >> sectorsPerClusterShift;
    3506:	ldr	r2, [sp, #0]
  memset(secBuf, 0, BYTES_PER_SECTOR);
    3508:	movs	r1, #0
  clusterCount = (sectorCount - 4 * fatLength) >> sectorsPerClusterShift;
    350a:	ldr	r3, [sp, #12]
  memset(secBuf, 0, BYTES_PER_SECTOR);
    350c:	mov	r0, r4
  clusterCount = (sectorCount - 4 * fatLength) >> sectorsPerClusterShift;
    350e:	ldr	r6, [sp, #8]
  mbr->part->beginCHS[0] = 1;
    3510:	mov.w	sl, #1
  clusterCount = (sectorCount - 4 * fatLength) >> sectorsPerClusterShift;
    3514:	subs	r3, r2, r3
  memset(secBuf, 0, BYTES_PER_SECTOR);
    3516:	mov.w	r2, #512	; 0x200
  *reinterpret_cast<uint16_t*>(dst) = src;
    351a:	movw	fp, #43605	; 0xaa55
  clusterCount = (sectorCount - 4 * fatLength) >> sectorsPerClusterShift;
    351e:	lsrs	r3, r6
  volumeLength = clusterHeapOffset + (clusterCount << sectorsPerClusterShift);
    3520:	lsl.w	r9, r3, r6
    3524:	str	r3, [sp, #20]
    3526:	ldr	r6, [sp, #4]
  memset(secBuf, 0, BYTES_PER_SECTOR);
    3528:	bl	e074 <memset>
  mbr->part->endCHS[1] = 0XFF;
    352c:	movs	r3, #255	; 0xff
  mbr->part->beginCHS[0] = 1;
    352e:	strb.w	sl, [r4, #447]	; 0x1bf
  mbr->part->beginCHS[1] = 1;
    3532:	strb.w	sl, [r4, #448]	; 0x1c0
  volumeLength = clusterHeapOffset + (clusterCount << sectorsPerClusterShift);
    3536:	add	r9, r6
  mbr->part->endCHS[1] = 0XFF;
    3538:	strb.w	r3, [r4, #452]	; 0x1c4
  if (!dev->writeSector(0, secBuf)) {
    353c:	mov	r2, r4
  mbr->part->endCHS[2] = 0XFF;
    353e:	strb.w	r3, [r4, #453]	; 0x1c5
  mbr->part->type = 7;
    3542:	movs	r3, #7
  if (!dev->writeSector(0, secBuf)) {
    3544:	movs	r1, #0
    3546:	mov	r0, r5
  mbr->part->type = 7;
    3548:	strb.w	r3, [r4, #450]	; 0x1c2
  mbr->part->endCHS[0] = 0XFE;
    354c:	movs	r3, #254	; 0xfe
  *reinterpret_cast<uint32_t*>(dst) = src;
    354e:	str.w	r6, [r4, #454]	; 0x1c6
    3552:	strb.w	r3, [r4, #451]	; 0x1c3
  if (!dev->writeSector(0, secBuf)) {
    3556:	ldr	r3, [r5, #0]
    3558:	str.w	r9, [r4, #458]	; 0x1ca
    355c:	ldr	r3, [r3, #32]
  *reinterpret_cast<uint16_t*>(dst) = src;
    355e:	strh.w	fp, [r4, #510]	; 0x1fe
    3562:	blx	r3
    3564:	cmp	r0, #0
    3566:	beq.n	3630 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
  memset(secBuf, 0, BYTES_PER_SECTOR);
    3568:	mov.w	r2, #512	; 0x200
    356c:	movs	r1, #0
    356e:	mov	r0, r4
    3570:	bl	e074 <memset>
  *reinterpret_cast<uint32_t*>(dst) = src;
    3574:	ldr	r3, [sp, #0]
  pbs->bpb.sectorsPerClusterShift = sectorsPerClusterShift;
    3576:	strb.w	r8, [r4, #109]	; 0x6d
  for (size_t i = 0; i < BYTES_PER_SECTOR; i++) {
    357a:	mov.w	r8, #0
    357e:	str	r3, [r4, #100]	; 0x64
    pbs->bootCode[i] = 0XF4;
    3580:	movs	r1, #244	; 0xf4
    3582:	ldr	r3, [sp, #20]
    3584:	add.w	r0, r4, #120	; 0x78
    3588:	ldr	r2, [sp, #24]
    358a:	str	r3, [r4, #92]	; 0x5c
  pbs->oemName[5] = ' ';
    358c:	movs	r3, #32
  setLe64(pbs->bpb.partitionOffset, partitionOffset);
    358e:	str	r6, [r4, #64]	; 0x40
  pbs->oemName[5] = ' ';
    3590:	strb	r3, [r4, #8]
  pbs->oemName[6] = ' ';
    3592:	strb	r3, [r4, #9]
  pbs->oemName[7] = ' ';
    3594:	strb	r3, [r4, #10]
  pbs->jmpInstruction[0] = 0XEB;
    3596:	movs	r3, #235	; 0xeb
    3598:	str	r6, [r4, #88]	; 0x58
  uint32_t checksum = 0;
    359a:	mov	r6, r8
  pbs->jmpInstruction[0] = 0XEB;
    359c:	strb	r3, [r4, #0]
  pbs->jmpInstruction[1] = 0X76;
    359e:	movs	r3, #118	; 0x76
  setLe64(pbs->bpb.volumeLength, volumeLength);
    35a0:	str.w	r9, [r4, #72]	; 0x48
  pbs->jmpInstruction[1] = 0X76;
    35a4:	strb	r3, [r4, #1]
  pbs->jmpInstruction[2] = 0X90;
    35a6:	movs	r3, #144	; 0x90
  pbs->bpb.numberOfFats = 1;
    35a8:	strb.w	sl, [r4, #110]	; 0x6e
  pbs->jmpInstruction[2] = 0X90;
    35ac:	strb	r3, [r4, #2]
  pbs->oemName[0] = 'E';
    35ae:	movs	r3, #69	; 0x45
    35b0:	strb	r3, [r4, #3]
  pbs->oemName[1] = 'X';
    35b2:	movs	r3, #88	; 0x58
    35b4:	strb	r3, [r4, #4]
  pbs->oemName[2] = 'F';
    35b6:	movs	r3, #70	; 0x46
    35b8:	strb	r3, [r4, #5]
  pbs->oemName[3] = 'A';
    35ba:	movs	r3, #65	; 0x41
    35bc:	strb	r3, [r4, #6]
  pbs->oemName[4] = 'T';
    35be:	movs	r3, #84	; 0x54
    35c0:	strb	r3, [r4, #7]
    35c2:	movs	r3, #4
    35c4:	str	r3, [r4, #96]	; 0x60
  *reinterpret_cast<uint16_t*>(dst) = src;
    35c6:	mov.w	r3, #256	; 0x100
    35ca:	strh.w	r3, [r4, #104]	; 0x68
  pbs->bpb.bytesPerSectorShift = BYTES_PER_SECTOR_SHIFT;
    35ce:	movs	r3, #9
    35d0:	strb.w	r3, [r4, #108]	; 0x6c
  pbs->bpb.driveSelect = 0X80;
    35d4:	movs	r3, #128	; 0x80
  *reinterpret_cast<uint32_t*>(dst) = src;
    35d6:	strd	r2, r2, [r4, #80]	; 0x50
    35da:	strb.w	r3, [r4, #111]	; 0x6f
    pbs->bootCode[i] = 0XF4;
    35de:	mov.w	r2, #390	; 0x186
    35e2:	bl	e074 <memset>
  *reinterpret_cast<uint16_t*>(dst) = src;
    35e6:	strh.w	fp, [r4, #510]	; 0x1fe
    if (i == offsetof(ExFatPbs_t, bpb.volumeFlags[0]) ||
    35ea:	sub.w	r3, r8, #106	; 0x6a
    35ee:	cmp	r3, #1
    35f0:	bls.n	3600 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x164>
    35f2:	cmp.w	r8, #112	; 0x70
    35f6:	beq.n	3600 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x164>
  return (sum << 31) + (sum >> 1) + data;
    35f8:	ldrb.w	r3, [r4, r8]
    35fc:	add.w	r6, r3, r6, ror #1
  for (size_t i = 0; i < BYTES_PER_SECTOR; i++) {
    3600:	add.w	r8, r8, #1
    3604:	cmp.w	r8, #512	; 0x200
    3608:	bne.n	35ea <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x14e>
  if (!dev->writeSector(sector, secBuf) ||
    360a:	ldr	r3, [r5, #0]
    360c:	mov	r2, r4
    360e:	ldr.w	r9, [sp, #4]
    3612:	mov	r0, r5
    3614:	ldr	r3, [r3, #32]
    3616:	mov	r1, r9
    3618:	blx	r3
    361a:	cbz	r0, 3630 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
      !dev->writeSector(sector + BOOT_BACKUP_OFFSET, secBuf)) {
    361c:	ldr	r3, [r5, #0]
    361e:	mov	r1, r9
    3620:	mov	r2, r4
    3622:	mov	r0, r5
    3624:	ldr	r3, [r3, #32]
    3626:	adds	r1, #12
    3628:	str.w	r9, [sp, #4]
    362c:	blx	r3
  if (!dev->writeSector(sector, secBuf) ||
    362e:	cbnz	r0, 3682 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1e6>
  writeMsg(pr, "Format failed\r\n");
    3630:	cbz	r7, 363e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1a2>
    3632:	ldr	r3, [r7, #0]
    3634:	movs	r2, #15
    3636:	ldr	r1, [pc, #736]	; (3918 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x47c>)
    3638:	mov	r0, r7
    363a:	ldr	r3, [r3, #4]
    363c:	blx	r3
  return false;
    363e:	movs	r6, #0
}
    3640:	mov	r0, r6
    3642:	add	sp, #36	; 0x24
    3644:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  fatLength = 1UL << (vs < 27 ? 13 : (vs + 1) / 2);
    3648:	cmp	r3, #26
  sectorsPerClusterShift = vs < 29 ? 8 : (vs - 11) / 2;
    364a:	mov.w	r8, #8
  fatLength = 1UL << (vs < 27 ? 13 : (vs + 1) / 2);
    364e:	bhi.w	399e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x502>
    3652:	mov.w	r3, #16384	; 0x4000
  sectorsPerCluster = 1UL << sectorsPerClusterShift;
    3656:	str.w	r8, [sp, #8]
    365a:	str	r3, [sp, #4]
    365c:	mov.w	r3, #32768	; 0x8000
    3660:	str	r3, [sp, #12]
    3662:	mov.w	r3, #256	; 0x100
    3666:	str	r3, [sp, #28]
  fatLength = 1UL << (vs < 27 ? 13 : (vs + 1) / 2);
    3668:	mov.w	r3, #8192	; 0x2000
    366c:	str	r3, [sp, #24]
    366e:	b.n	3506 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x6a>
    writeMsg(pr, "Device is too small\r\n");
    3670:	cmp	r7, #0
    3672:	beq.n	363e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1a2>
    3674:	ldr	r3, [r7, #0]
    3676:	movs	r2, #21
    3678:	ldr	r1, [pc, #672]	; (391c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x480>)
    367a:	mov	r0, r7
    367c:	ldr	r3, [r3, #4]
    367e:	blx	r3
  writeMsg(pr, "Format failed\r\n");
    3680:	b.n	3632 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x196>
  memset(secBuf, 0, BYTES_PER_SECTOR);
    3682:	mov	r2, r8
    3684:	movs	r1, #0
    3686:	mov	r0, r4
  sector++;
    3688:	add.w	sl, r9, #1
  memset(secBuf, 0, BYTES_PER_SECTOR);
    368c:	bl	e074 <memset>
  *reinterpret_cast<uint16_t*>(dst) = src;
    3690:	movw	r3, #43605	; 0xaa55
    3694:	add.w	r2, r9, #9
    3698:	addw	r9, r4, #511	; 0x1ff
    369c:	strh.w	r3, [r4, #510]	; 0x1fe
    36a0:	movs	r3, #0
    36a2:	mov	fp, r2
  uint32_t checksum = 0;
    36a4:	mov	r8, r4
    36a6:	b.n	36ac <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x210>
      checksum = exFatChecksum(checksum, secBuf[i]);
    36a8:	ldrb.w	r3, [r8, #1]!
    for (size_t i = 0; i < BYTES_PER_SECTOR; i++) {
    36ac:	cmp	r9, r8
  return (sum << 31) + (sum >> 1) + data;
    36ae:	add.w	r6, r3, r6, ror #1
    36b2:	bne.n	36a8 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x20c>
    if (!dev->writeSector(sector, secBuf) ||
    36b4:	ldr	r3, [r5, #0]
    36b6:	mov	r2, r4
    36b8:	mov	r1, sl
    36ba:	mov	r0, r5
    36bc:	ldr	r3, [r3, #32]
    36be:	blx	r3
    36c0:	cmp	r0, #0
    36c2:	beq.n	3630 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
        !dev->writeSector(sector + BOOT_BACKUP_OFFSET, secBuf)) {
    36c4:	ldr	r3, [r5, #0]
    36c6:	mov	r2, r4
    36c8:	add.w	r1, sl, #12
    36cc:	mov	r0, r5
    36ce:	ldr	r3, [r3, #32]
    36d0:	blx	r3
    if (!dev->writeSector(sector, secBuf) ||
    36d2:	cmp	r0, #0
    36d4:	beq.n	3630 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
    sector++;
    36d6:	add.w	r3, sl, #1
  for (int j = 0; j < 8; j++) {
    36da:	cmp	fp, r3
    36dc:	beq.n	36e4 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x248>
      checksum = exFatChecksum(checksum, secBuf[i]);
    36de:	mov	sl, r3
    36e0:	ldrb	r3, [r4, #0]
    36e2:	b.n	36a4 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x208>
  memset(secBuf, 0, BYTES_PER_SECTOR);
    36e4:	mov.w	r2, #512	; 0x200
    36e8:	movs	r1, #0
    36ea:	mov	r0, r4
    36ec:	mov	fp, r3
    36ee:	bl	e074 <memset>
    36f2:	movs	r2, #0
    36f4:	add.w	sl, sl, #3
    36f8:	mov	r1, r2
  *reinterpret_cast<uint16_t*>(dst) = src;
    36fa:	mov	r3, r4
    36fc:	b.n	3702 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x266>
      checksum = exFatChecksum(checksum, secBuf[i]);
    36fe:	ldrb.w	r1, [r3, #1]!
    for (size_t i = 0; i < BYTES_PER_SECTOR; i++) {
    3702:	cmp	r8, r3
  return (sum << 31) + (sum >> 1) + data;
    3704:	add.w	r6, r1, r6, ror #1
    3708:	bne.n	36fe <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x262>
    if (!dev->writeSector(sector, secBuf) ||
    370a:	ldr	r3, [r5, #0]
    370c:	mov	r2, r4
    370e:	mov	r1, fp
    3710:	mov	r0, r5
    3712:	ldr	r3, [r3, #32]
    3714:	blx	r3
    3716:	cmp	r0, #0
    3718:	beq.n	3630 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
        !dev->writeSector(sector + BOOT_BACKUP_OFFSET, secBuf)) {
    371a:	ldr	r3, [r5, #0]
    371c:	mov	r2, r4
    371e:	add.w	r1, fp, #12
    3722:	mov	r0, r5
    3724:	ldr	r3, [r3, #32]
    3726:	blx	r3
    if (!dev->writeSector(sector, secBuf) ||
    3728:	cmp	r0, #0
    372a:	beq.n	3630 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
    sector++;
    372c:	add.w	r1, fp, #1
  for (int j = 0; j < 2; j++) {
    3730:	cmp	sl, r1
    3732:	bne.n	380a <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x36e>
    3734:	subs	r3, r4, #4
    3736:	add.w	r2, r4, #508	; 0x1fc
  *reinterpret_cast<uint32_t*>(dst) = src;
    373a:	str.w	r6, [r3, #4]!
  for (size_t i = 0; i < BYTES_PER_SECTOR; i += 4) {
    373e:	cmp	r2, r3
    3740:	bne.n	373a <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x29e>
  if (!dev->writeSector(sector, secBuf) ||
    3742:	ldr	r3, [r5, #0]
    3744:	mov	r2, r4
    3746:	mov	r0, r5
    3748:	ldr	r3, [r3, #32]
    374a:	blx	r3
    374c:	cmp	r0, #0
    374e:	beq.w	3630 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
      !dev->writeSector(sector + BOOT_BACKUP_OFFSET, secBuf)) {
    3752:	ldr	r3, [r5, #0]
    3754:	add.w	r1, fp, #13
    3758:	mov	r2, r4
    375a:	mov	r0, r5
    375c:	ldr	r3, [r3, #32]
    375e:	blx	r3
  if (!dev->writeSector(sector, secBuf) ||
    3760:	cmp	r0, #0
    3762:	beq.w	3630 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
  writeMsg(pr, "Writing FAT ");
    3766:	cbz	r7, 3774 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x2d8>
    3768:	ldr	r3, [r7, #0]
    376a:	movs	r2, #12
    376c:	ldr	r1, [pc, #432]	; (3920 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x484>)
    376e:	mov	r0, r7
    3770:	ldr	r3, [r3, #4]
    3772:	blx	r3
  sector = partitionOffset + fatOffset;
    3774:	ldr	r2, [sp, #24]
  memset(secBuf, 0, BYTES_PER_SECTOR);
    3776:	movs	r1, #0
  sector = partitionOffset + fatOffset;
    3778:	ldr	r3, [sp, #4]
  memset(secBuf, 0, BYTES_PER_SECTOR);
    377a:	mov	r0, r4
  for (uint32_t i = 0; i < ns; i++) {
    377c:	movs	r6, #0
  sector = partitionOffset + fatOffset;
    377e:	add	r3, r2
  memset(secBuf, 0, BYTES_PER_SECTOR);
    3780:	mov.w	r2, #512	; 0x200
  sector = partitionOffset + fatOffset;
    3784:	mov	r9, r3
  ns = ((clusterCount + 2) * 4 + BYTES_PER_SECTOR - 1) / BYTES_PER_SECTOR;
    3786:	ldr	r3, [sp, #20]
    3788:	mov.w	r8, r3, lsl #2
  memset(secBuf, 0, BYTES_PER_SECTOR);
    378c:	bl	e074 <memset>
  secBuf[0] = 0XF8;
    3790:	mov	r3, r4
    secBuf[i] = 0XFF;
    3792:	mov.w	r2, #4294967295
  ns = ((clusterCount + 2) * 4 + BYTES_PER_SECTOR - 1) / BYTES_PER_SECTOR;
    3796:	addw	r8, r8, #519	; 0x207
  secBuf[0] = 0XF8;
    379a:	movs	r1, #248	; 0xf8
      writeMsg(pr, ".");
    379c:	subs.w	fp, r7, #0
  ns = ((clusterCount + 2) * 4 + BYTES_PER_SECTOR - 1) / BYTES_PER_SECTOR;
    37a0:	mov.w	sl, r8, lsr #9
  secBuf[0] = 0XF8;
    37a4:	strb.w	r1, [r3], #1
    if (i % (ns / 32) == 0) {
    37a8:	mov.w	r8, r8, lsr #14
    secBuf[i] = 0XFF;
    37ac:	str.w	r2, [r4, #1]
      writeMsg(pr, ".");
    37b0:	it	ne
    37b2:	movne.w	fp, #1
    secBuf[i] = 0XFF;
    37b6:	str	r2, [r3, #12]
    37b8:	str	r2, [r3, #4]
    37ba:	str	r2, [r3, #8]
    37bc:	str.w	r2, [r3, #15]
    37c0:	b.n	37c8 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x32c>
  for (uint32_t i = 0; i < ns; i++) {
    37c2:	adds	r6, #1
    37c4:	cmp	sl, r6
    37c6:	beq.n	3810 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x374>
    if (i % (ns / 32) == 0) {
    37c8:	udiv	r3, r6, r8
    37cc:	mls	r3, r8, r3, r6
      writeMsg(pr, ".");
    37d0:	cbnz	r3, 37e4 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x348>
    37d2:	cmp.w	fp, #0
    37d6:	beq.n	37e4 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x348>
    37d8:	ldr	r3, [r7, #0]
    37da:	movs	r2, #1
    37dc:	ldr	r1, [pc, #324]	; (3924 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x488>)
    37de:	mov	r0, r7
    37e0:	ldr	r3, [r3, #4]
    37e2:	blx	r3
    if (!dev->writeSector(sector + i, secBuf)) {
    37e4:	ldr	r3, [r5, #0]
    37e6:	add.w	r1, r9, r6
    37ea:	mov	r2, r4
    37ec:	mov	r0, r5
    37ee:	ldr	r3, [r3, #32]
    37f0:	blx	r3
    37f2:	cmp	r0, #0
    37f4:	beq.w	3630 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
    if (i == 0) {
    37f8:	cmp	r6, #0
    37fa:	bne.n	37c2 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x326>
      memset(secBuf, 0, BYTES_PER_SECTOR);
    37fc:	mov	r1, r6
    37fe:	mov.w	r2, #512	; 0x200
    3802:	mov	r0, r4
    3804:	bl	e074 <memset>
    3808:	b.n	37c2 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x326>
      checksum = exFatChecksum(checksum, secBuf[i]);
    380a:	mov	fp, r1
    380c:	ldrb	r1, [r4, #0]
    380e:	b.n	36fa <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x25e>
  writeMsg(pr, "\r\n");
    3810:	cmp	r7, #0
    3812:	beq.n	387e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x3e2>
    3814:	ldr	r3, [r7, #0]
    3816:	movs	r2, #2
    3818:	ldr	r1, [pc, #268]	; (3928 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x48c>)
    381a:	mov	r0, r7
    381c:	ldr	r3, [r3, #4]
    381e:	blx	r3
  bitmapSize = (clusterCount + 7) / 8;
    3820:	ldr	r6, [sp, #20]
  if (ns > sectorsPerCluster) {
    3822:	ldr	r2, [sp, #28]
  bitmapSize = (clusterCount + 7) / 8;
    3824:	adds	r6, #7
    3826:	lsrs	r6, r6, #3
  ns = (bitmapSize + BYTES_PER_SECTOR - 1) / BYTES_PER_SECTOR;
    3828:	addw	r3, r6, #511	; 0x1ff
  if (ns > sectorsPerCluster) {
    382c:	cmp.w	r2, r3, lsr #9
  ns = (bitmapSize + BYTES_PER_SECTOR - 1) / BYTES_PER_SECTOR;
    3830:	mov.w	r9, r3, lsr #9
  if (ns > sectorsPerCluster) {
    3834:	bcc.w	3632 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x196>
  memset(secBuf, 0, BYTES_PER_SECTOR);
    3838:	mov.w	r2, #512	; 0x200
    383c:	movs	r1, #0
    383e:	mov	r0, r4
    3840:	bl	e074 <memset>
  secBuf[0] = 0X7;
    3844:	movs	r3, #7
    3846:	strb	r3, [r4, #0]
  for (uint32_t i = 0; i < ns; i++) {
    3848:	cmp.w	r9, #0
    384c:	beq.w	3964 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x4c8>
    3850:	mov.w	r8, #0
    3854:	b.n	3868 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x3cc>
    if (i == 0) {
    3856:	cmp.w	r8, #0
    385a:	bne.n	3860 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x3c4>
      secBuf[0] = 0;
    385c:	strb.w	r8, [r4]
  for (uint32_t i = 0; i < ns; i++) {
    3860:	add.w	r8, r8, #1
    3864:	cmp	r9, r8
    3866:	bls.n	3960 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x4c4>
    if (!dev->writeSector(sector + i, secBuf)) {
    3868:	ldr	r2, [sp, #12]
    386a:	mov	r0, r5
    386c:	ldr	r3, [r5, #0]
    386e:	add.w	r1, r2, r8
    3872:	mov	r2, r4
    3874:	ldr	r3, [r3, #32]
    3876:	blx	r3
    3878:	cmp	r0, #0
    387a:	bne.n	3856 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x3ba>
    387c:	b.n	3630 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
  bitmapSize = (clusterCount + 7) / 8;
    387e:	ldr	r6, [sp, #20]
  if (ns > sectorsPerCluster) {
    3880:	ldr	r2, [sp, #28]
  bitmapSize = (clusterCount + 7) / 8;
    3882:	adds	r6, #7
    3884:	lsrs	r6, r6, #3
  ns = (bitmapSize + BYTES_PER_SECTOR - 1) / BYTES_PER_SECTOR;
    3886:	addw	r3, r6, #511	; 0x1ff
  if (ns > sectorsPerCluster) {
    388a:	cmp.w	r2, r3, lsr #9
  ns = (bitmapSize + BYTES_PER_SECTOR - 1) / BYTES_PER_SECTOR;
    388e:	mov.w	r9, r3, lsr #9
  if (ns > sectorsPerCluster) {
    3892:	bcc.w	363e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1a2>
  memset(secBuf, 0, BYTES_PER_SECTOR);
    3896:	mov.w	r2, #512	; 0x200
    389a:	mov	r1, r7
    389c:	mov	r0, r4
    389e:	bl	e074 <memset>
  secBuf[0] = 0X7;
    38a2:	movs	r3, #7
    38a4:	strb	r3, [r4, #0]
  for (uint32_t i = 0; i < ns; i++) {
    38a6:	cmp.w	r9, #0
    38aa:	bne.n	3850 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x3b4>
  if (!writeUpcase(partitionOffset + clusterHeapOffset + sectorsPerCluster)) {
    38ac:	ldr	r3, [sp, #12]
    38ae:	ldr	r2, [sp, #28]
    38b0:	ldr	r0, [sp, #16]
    38b2:	adds	r1, r3, r2
    38b4:	bl	33ec <ExFatFormatter::writeUpcase(unsigned long)>
    38b8:	cmp	r0, #0
    38ba:	beq.w	363e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1a2>
  if (m_upcaseSize > BYTES_PER_SECTOR * sectorsPerCluster) {
    38be:	ldr	r2, [sp, #8]
    38c0:	mov.w	r3, #512	; 0x200
    38c4:	lsls	r3, r2
    38c6:	ldr	r2, [sp, #16]
    38c8:	ldr	r2, [r2, #8]
    38ca:	cmp	r2, r3
    38cc:	bhi.w	363e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1a2>
  sector = partitionOffset + clusterHeapOffset + 2 * sectorsPerCluster;
    38d0:	mov.w	r8, #2
    38d4:	ldr	r3, [sp, #8]
  memset(secBuf, 0, BYTES_PER_SECTOR);
    38d6:	mov.w	r2, #512	; 0x200
    38da:	movs	r1, #0
  sector = partitionOffset + clusterHeapOffset + 2 * sectorsPerCluster;
    38dc:	lsl.w	r9, r8, r3
    38e0:	ldr	r3, [sp, #12]
  memset(secBuf, 0, BYTES_PER_SECTOR);
    38e2:	mov	r0, r4
  sector = partitionOffset + clusterHeapOffset + 2 * sectorsPerCluster;
    38e4:	add	r9, r3
  memset(secBuf, 0, BYTES_PER_SECTOR);
    38e6:	bl	e074 <memset>
  dbm->type = EXFAT_TYPE_BITMAP;
    38ea:	movs	r2, #129	; 0x81
  label->type = EXFAT_TYPE_LABEL & 0X7F;
    38ec:	movs	r3, #3
  setLe32(dup->checksum, m_upcaseChecksum);
    38ee:	ldr	r1, [sp, #16]
    38f0:	add.w	r9, r9, #4294967295
  dbm->type = EXFAT_TYPE_BITMAP;
    38f4:	strb.w	r2, [r4, #32]
  dup->type = EXFAT_TYPE_UPCASE;
    38f8:	movs	r2, #130	; 0x82
  label->type = EXFAT_TYPE_LABEL & 0X7F;
    38fa:	strb	r3, [r4, #0]
  dup->type = EXFAT_TYPE_UPCASE;
    38fc:	strb.w	r2, [r4, #64]	; 0x40
  setLe64(dbm->size, bitmapSize);
    3900:	strd	r8, r6, [r4, #52]	; 0x34
  setLe32(dup->checksum, m_upcaseChecksum);
    3904:	ldr	r2, [r1, #4]
  *reinterpret_cast<uint64_t*>(dst) = src;
    3906:	mov.w	r8, #1
  *reinterpret_cast<uint32_t*>(dst) = src;
    390a:	str	r3, [r4, #84]	; 0x54
    390c:	str	r2, [r4, #68]	; 0x44
  setLe64(dup->size, m_upcaseSize);
    390e:	ldr	r3, [r1, #8]
    3910:	str	r3, [r4, #88]	; 0x58
  setLe64(dbm->size, bitmapSize);
    3912:	movs	r3, #0
  setLe64(dup->size, m_upcaseSize);
    3914:	str	r3, [r4, #92]	; 0x5c
  for (uint32_t i = 0; i < ns; i++) {
    3916:	b.n	3936 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x49a>
    3918:	.word	0x2000082c
    391c:	.word	0x200007c8
    3920:	.word	0x200007e0
    3924:	.word	0x200007f0
    3928:	.word	0x20000808
    392c:	ldr	r3, [sp, #28]
    392e:	cmp	r8, r3
    3930:	bcs.n	39aa <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x50e>
    3932:	add.w	r8, r8, #1
    if (!dev->writeSector(sector + i, secBuf)) {
    3936:	ldr	r3, [r5, #0]
    3938:	add.w	r1, r9, r8
    393c:	mov	r2, r4
    393e:	mov	r0, r5
    3940:	ldr	r3, [r3, #32]
    3942:	blx	r3
    3944:	mov	r6, r0
    3946:	cmp	r0, #0
    3948:	beq.w	3630 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
    if (i == 0) {
    394c:	cmp.w	r8, #1
    3950:	bne.n	392c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x490>
      memset(secBuf, 0, BYTES_PER_SECTOR);
    3952:	mov.w	r2, #512	; 0x200
    3956:	movs	r1, #0
    3958:	mov	r0, r4
    395a:	bl	e074 <memset>
  for (uint32_t i = 0; i < ns; i++) {
    395e:	b.n	3932 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x496>
  writeMsg(pr, "Writing upcase table\r\n");
    3960:	cmp	r7, #0
    3962:	beq.n	38ac <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x410>
    3964:	ldr	r3, [r7, #0]
    3966:	movs	r2, #22
    3968:	ldr	r1, [pc, #80]	; (39bc <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x520>)
    396a:	mov	r0, r7
    396c:	ldr	r3, [r3, #4]
    396e:	blx	r3
  if (!writeUpcase(partitionOffset + clusterHeapOffset + sectorsPerCluster)) {
    3970:	ldr	r3, [sp, #12]
    3972:	ldr	r2, [sp, #28]
    3974:	ldr	r0, [sp, #16]
    3976:	adds	r1, r3, r2
    3978:	bl	33ec <ExFatFormatter::writeUpcase(unsigned long)>
    397c:	cmp	r0, #0
    397e:	beq.w	3632 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x196>
  if (m_upcaseSize > BYTES_PER_SECTOR * sectorsPerCluster) {
    3982:	ldr	r2, [sp, #8]
    3984:	mov.w	r3, #512	; 0x200
    3988:	lsls	r3, r2
    398a:	ldr	r2, [sp, #16]
    398c:	ldr	r2, [r2, #8]
    398e:	cmp	r2, r3
    3990:	bhi.w	3632 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x196>
  writeMsg(pr, "Writing root\r\n");
    3994:	ldr	r1, [pc, #40]	; (39c0 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x524>)
    3996:	mov	r0, r7
    3998:	bl	3310 <Print::write(char const*) [clone .isra.0]>
    399c:	b.n	38d0 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x434>
  sectorsPerCluster = 1UL << sectorsPerClusterShift;
    399e:	mov.w	r2, #256	; 0x100
    39a2:	str.w	r8, [sp, #8]
    39a6:	str	r2, [sp, #28]
    39a8:	b.n	34ee <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x52>
  writeMsg(pr, "Format done\r\n");
    39aa:	cmp	r7, #0
    39ac:	beq.w	3640 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1a4>
    39b0:	ldr	r1, [pc, #16]	; (39c4 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x528>)
    39b2:	mov	r0, r7
    39b4:	bl	3310 <Print::write(char const*) [clone .isra.0]>
    39b8:	b.n	3640 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1a4>
    39ba:	nop
    39bc:	.word	0x200007f4
    39c0:	.word	0x2000080c
    39c4:	.word	0x2000081c

000039c8 <ExFatFile::cmpName(DirName_t const*, ExName_t*)>:
  hash = ((hash << 15) | (hash >> 1)) + (c & 0XFF);
  hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
  return hash;
}
//------------------------------------------------------------------------------
bool ExFatFile::cmpName(const DirName_t* dirName, ExName_t* fname) {
    39c8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  const char* next;
  /** Position one beyond last LFN character. */
  const char* end;
#if !USE_UTF8_LONG_NAMES
  /** \return true if at end. */
  bool atEnd() { return next == end; }
    39cc:	ldrd	r3, r8, [r2, #4]
    39d0:	add.w	r9, r3, #15
  return *reinterpret_cast<const uint16_t*>(src);
    39d4:	ldrh.w	r0, [r1, #2]!
  for (uint8_t i = 0; i < 15; i++) {
    uint16_t u = getLe16(dirName->unicode + 2 * i);
    if (fname->atEnd()) {
    39d8:	cmp	r8, r3
  /** Reset to start of LFN. */
  void reset() { next = begin; }
  /** \return next char of LFN. */
  char getch() { return atEnd() ? 0 : *next++; }
    39da:	add.w	r3, r3, #1
    if (toUpcase(cp) != toUpcase(u)) {
      return false;
    }
#else   // USE_UTF8_LONG_NAMES
    char c = fname->getch();
    if (u >= 0x7F || toUpper(c) != toUpper(u)) {
    39de:	uxtb.w	ip, r0
    if (fname->atEnd()) {
    39e2:	beq.n	3a22 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x5a>
    39e4:	str	r3, [r2, #4]
    if (u >= 0x7F || toUpper(c) != toUpper(u)) {
    39e6:	cmp	r0, #126	; 0x7e
    39e8:	ldrb.w	lr, [r3, #-1]
static char toUpper(char c) { return 'a' <= c && c <= 'z' ? c - 'a' + 'A' : c; }
    39ec:	sub.w	r4, ip, #97	; 0x61
    39f0:	sub.w	r6, ip, #32
    39f4:	sub.w	r5, lr, #97	; 0x61
    39f8:	sub.w	r7, lr, #32
    if (u >= 0x7F || toUpper(c) != toUpper(u)) {
    39fc:	bhi.n	3a1c <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x54>
static char toUpper(char c) { return 'a' <= c && c <= 'z' ? c - 'a' + 'A' : c; }
    39fe:	cmp	r5, #25
    3a00:	it	ls
    3a02:	uxtbls.w	lr, r7
    3a06:	cmp	r4, #25
    3a08:	it	ls
    3a0a:	uxtbls.w	ip, r6
    if (u >= 0x7F || toUpper(c) != toUpper(u)) {
    3a0e:	cmp	ip, lr
    3a10:	bne.n	3a1c <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x54>
  for (uint8_t i = 0; i < 15; i++) {
    3a12:	cmp	r9, r3
    3a14:	bne.n	39d4 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0xc>
      return false;
    }
#endif  // USE_UTF8_LONG_NAMES
  }
  return true;
    3a16:	movs	r0, #1
}
    3a18:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return false;
    3a1c:	movs	r0, #0
}
    3a1e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return u == 0;
    3a22:	clz	r0, r0
    3a26:	lsrs	r0, r0, #5
}
    3a28:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00003a2c <ExFatFile::getName7(char*, unsigned int)>:
//------------------------------------------------------------------------------
size_t ExFatFile::getName7(char* name, size_t count) {
    3a2c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  DirName_t* dn;
  size_t n = 0;
  if (!isOpen()) {
    3a30:	ldrb.w	r3, [r0, #49]	; 0x31
size_t ExFatFile::getName7(char* name, size_t count) {
    3a34:	mov	r7, r1
  if (!isOpen()) {
    3a36:	cbz	r3, 3a9e <ExFatFile::getName7(char*, unsigned int)+0x72>
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t is = 2; is <= m_setCount; is++) {
    3a38:	ldrb.w	r3, [r0, #48]	; 0x30
    3a3c:	mov	r6, r0
    3a3e:	cmp	r3, #1
    3a40:	bls.n	3aaa <ExFatFile::getName7(char*, unsigned int)+0x7e>
    3a42:	mov	r5, r2
    3a44:	mov.w	r8, #2
  size_t n = 0;
    3a48:	movs	r4, #0
    dn = reinterpret_cast<DirName_t*>(dirCache(is, FsCache::CACHE_FOR_READ));
    3a4a:	movs	r2, #0
    3a4c:	mov	r1, r8
    3a4e:	mov	r0, r6
    3a50:	bl	3b14 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
    3a54:	mov	ip, r0
    3a56:	cbz	r0, 3a9e <ExFatFile::getName7(char*, unsigned int)+0x72>
    3a58:	ldrb	r3, [r0, #0]
    3a5a:	cmp	r3, #193	; 0xc1
    3a5c:	bne.n	3a9e <ExFatFile::getName7(char*, unsigned int)+0x72>
    3a5e:	add.w	lr, r4, #4294967295
    3a62:	add.w	r2, r4, #15
    3a66:	add	lr, r7
    3a68:	ldrh.w	r3, [ip, #2]!
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (uint8_t in = 0; in < 15; in++) {
      uint16_t c = getLe16(dn->unicode + 2 * in);
      if (c == 0) {
    3a6c:	cbz	r3, 3a92 <ExFatFile::getName7(char*, unsigned int)+0x66>
        goto done;
      }
      if ((n + 1) >= count) {
    3a6e:	adds	r4, #1
    3a70:	cmp	r4, r5
    3a72:	bcs.n	3a9e <ExFatFile::getName7(char*, unsigned int)+0x72>
        DBG_FAIL_MACRO;
        goto fail;
      }
      name[n++] = c < 0X7F ? c : '?';
    3a74:	cmp	r3, #127	; 0x7f
    3a76:	it	cs
    3a78:	movcs	r3, #63	; 0x3f
    for (uint8_t in = 0; in < 15; in++) {
    3a7a:	cmp	r4, r2
      name[n++] = c < 0X7F ? c : '?';
    3a7c:	strb.w	r3, [lr, #1]!
    for (uint8_t in = 0; in < 15; in++) {
    3a80:	bne.n	3a68 <ExFatFile::getName7(char*, unsigned int)+0x3c>
  for (uint8_t is = 2; is <= m_setCount; is++) {
    3a82:	add.w	r8, r8, #1
    3a86:	ldrb.w	r3, [r6, #48]	; 0x30
    3a8a:	uxtb.w	r8, r8
    3a8e:	cmp	r3, r8
    3a90:	bcs.n	3a4a <ExFatFile::getName7(char*, unsigned int)+0x1e>
    }
  }
done:
  name[n] = 0;
    3a92:	add	r7, r4
    3a94:	movs	r3, #0
  return n;

fail:
  *name = 0;
  return 0;
}
    3a96:	mov	r0, r4
  name[n] = 0;
    3a98:	strb	r3, [r7, #0]
}
    3a9a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  *name = 0;
    3a9e:	movs	r3, #0
  return 0;
    3aa0:	mov	r4, r3
  *name = 0;
    3aa2:	strb	r3, [r7, #0]
}
    3aa4:	mov	r0, r4
    3aa6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  size_t n = 0;
    3aaa:	movs	r4, #0
    3aac:	b.n	3a94 <ExFatFile::getName7(char*, unsigned int)+0x68>
    3aae:	nop

00003ab0 <ExFatFile::hashName(ExName_t*)>:
fail:
  *name = 0;
  return 0;
}
//------------------------------------------------------------------------------
bool ExFatFile::hashName(ExName_t* fname) {
    3ab0:	push	{r4, r5, lr}
  void reset() { next = begin; }
    3ab2:	ldr	r5, [r1, #0]
  bool atEnd() { return next == end; }
    3ab4:	ldr	r4, [r1, #8]
  void reset() { next = begin; }
    3ab6:	str	r5, [r1, #4]
    }
    hash = exFatHash(u, hash);
    fname->nameLength++;
  }
#else   // USE_UTF8_LONG_NAMES
  while (!fname->atEnd()) {
    3ab8:	cmp	r4, r5
    3aba:	beq.n	3b08 <ExFatFile::hashName(ExName_t*)+0x58>
    3abc:	mov	r2, r5
  uint16_t hash = 0;
    3abe:	movs	r3, #0
  char getch() { return atEnd() ? 0 : *next++; }
    3ac0:	adds	r2, #1
  hash = ((hash << 15) | (hash >> 1)) + u;
    3ac2:	lsls	r0, r3, #15
    3ac4:	str	r2, [r1, #4]
    3ac6:	orr.w	r3, r0, r3, lsr #1
    3aca:	ldrb.w	r0, [r2, #-1]
static char toUpper(char c) { return 'a' <= c && c <= 'z' ? c - 'a' + 'A' : c; }
    3ace:	sub.w	ip, r0, #97	; 0x61
    3ad2:	sub.w	lr, r0, #32
    3ad6:	cmp.w	ip, #25
    3ada:	it	ls
    3adc:	uxtbls.w	r0, lr
  while (!fname->atEnd()) {
    3ae0:	cmp	r4, r2
  hash = ((hash << 15) | (hash >> 1)) + u;
    3ae2:	add	r3, r0
  hash = ((hash << 15) | (hash >> 1));
    3ae4:	mov.w	r0, r3, lsl #15
    3ae8:	ubfx	r3, r3, #1, #15
    3aec:	and.w	r0, r0, #32768	; 0x8000
    3af0:	orr.w	r3, r3, r0
  while (!fname->atEnd()) {
    3af4:	bne.n	3ac0 <ExFatFile::hashName(ExName_t*)+0x10>
    // Convert to byte for smaller exFatHash.
    char c = fname->getch();
    hash = exFatHash(c, hash);
  }
  fname->nameLength = fname->end - fname->begin;
    3af6:	subs	r4, r4, r5
#endif  // USE_UTF8_LONG_NAMES
  fname->nameHash = hash;
    3af8:	strh	r3, [r1, #16]
  if (!fname->nameLength || fname->nameLength > EXFAT_MAX_NAME_LENGTH) {
    3afa:	subs	r0, r4, #1
  fname->nameLength = fname->end - fname->begin;
    3afc:	str	r4, [r1, #12]
  if (!fname->nameLength || fname->nameLength > EXFAT_MAX_NAME_LENGTH) {
    3afe:	cmp	r0, #254	; 0xfe
    3b00:	ite	hi
    3b02:	movhi	r0, #0
    3b04:	movls	r0, #1
  }
  return true;

fail:
  return false;
}
    3b06:	pop	{r4, r5, pc}
  while (!fname->atEnd()) {
    3b08:	movs	r0, #0
    3b0a:	mov	r4, r0
  uint16_t hash = 0;
    3b0c:	mov	r3, r0
  fname->nameLength = fname->end - fname->begin;
    3b0e:	str	r4, [r1, #12]
  fname->nameHash = hash;
    3b10:	strh	r3, [r1, #16]
}
    3b12:	pop	{r4, r5, pc}

00003b14 <ExFatFile::dirCache(unsigned char, unsigned char)>:
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    3b14:	push	{r4, r5, r6, lr}
  DirPos_t pos = m_dirPos;
    3b16:	add.w	r3, r0, #36	; 0x24
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    3b1a:	sub	sp, #16
    3b1c:	mov	ip, r1
    3b1e:	mov	r4, r0
  DirPos_t pos = m_dirPos;
    3b20:	add	r5, sp, #4
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    3b22:	mov	r6, r2
  DirPos_t pos = m_dirPos;
    3b24:	ldmia.w	r3, {r0, r1, r2}
    3b28:	stmia.w	r5, {r0, r1, r2}
  if (m_vol->dirSeek(&pos, FS_DIR_SIZE * set) != 1) {
    3b2c:	mov.w	r2, ip, lsl #5
    3b30:	mov	r1, r5
    3b32:	ldr	r0, [r4, #32]
    3b34:	bl	460c <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    3b38:	cmp	r0, #1
    3b3a:	bne.n	3b4a <ExFatFile::dirCache(unsigned char, unsigned char)+0x36>
  return m_vol->dirCache(&pos, options);
    3b3c:	mov	r2, r6
    3b3e:	mov	r1, r5
    3b40:	ldr	r0, [r4, #32]
    3b42:	bl	45d4 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
}
    3b46:	add	sp, #16
    3b48:	pop	{r4, r5, r6, pc}
    return nullptr;
    3b4a:	movs	r0, #0
}
    3b4c:	add	sp, #16
    3b4e:	pop	{r4, r5, r6, pc}

00003b50 <ExFatFile::close()>:
bool ExFatFile::close() {
    3b50:	push	{r4, lr}
    3b52:	mov	r4, r0
  bool rtn = sync();
    3b54:	bl	4c28 <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    3b58:	movs	r3, #0
    3b5a:	strb.w	r3, [r4, #49]	; 0x31
  m_flags = 0;
    3b5e:	strb.w	r3, [r4, #51]	; 0x33
}
    3b62:	pop	{r4, pc}

00003b64 <ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)>:
bool ExFatFile::getCreateDateTime(uint16_t* pdate, uint16_t* ptime) {
    3b64:	push	{r3, r4, r5, lr}
    3b66:	mov	r4, r2
    3b68:	mov	r5, r1
      m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_READ));
    3b6a:	movs	r2, #0
    3b6c:	add.w	r1, r0, #36	; 0x24
    3b70:	ldr	r0, [r0, #32]
    3b72:	bl	45d4 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    3b76:	mov	r3, r0
    3b78:	cbz	r0, 3b84 <ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)+0x20>
    3b7a:	ldrh	r2, [r0, #10]
  return true;
    3b7c:	movs	r0, #1
  *pdate = getLe16(df->createDate);
    3b7e:	strh	r2, [r5, #0]
    3b80:	ldrh	r3, [r3, #8]
  *ptime = getLe16(df->createTime);
    3b82:	strh	r3, [r4, #0]
}
    3b84:	pop	{r3, r4, r5, pc}
    3b86:	nop

00003b88 <ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)>:
bool ExFatFile::getModifyDateTime(uint16_t* pdate, uint16_t* ptime) {
    3b88:	push	{r3, r4, r5, lr}
    3b8a:	mov	r4, r2
    3b8c:	mov	r5, r1
      m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_READ));
    3b8e:	movs	r2, #0
    3b90:	add.w	r1, r0, #36	; 0x24
    3b94:	ldr	r0, [r0, #32]
    3b96:	bl	45d4 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    3b9a:	mov	r3, r0
    3b9c:	cbz	r0, 3ba8 <ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)+0x20>
    3b9e:	ldrh	r2, [r0, #14]
  return true;
    3ba0:	movs	r0, #1
  *pdate = getLe16(df->modifyDate);
    3ba2:	strh	r2, [r5, #0]
    3ba4:	ldrh	r3, [r3, #12]
  *ptime = getLe16(df->modifyTime);
    3ba6:	strh	r3, [r4, #0]
}
    3ba8:	pop	{r3, r4, r5, pc}
    3baa:	nop

00003bac <ExFatFile::openRoot(ExFatVolume*)>:
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRoot(ExFatVolume* vol) {
    3bac:	push	{r3, r4, r5, lr}
    3bae:	mov	r5, r1
  if (isOpen()) {
    3bb0:	ldrb.w	r1, [r0, #49]	; 0x31
    3bb4:	cbz	r1, 3bba <ExFatFile::openRoot(ExFatVolume*)+0xe>
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
  return true;

fail:
  return false;
    3bb6:	movs	r0, #0
}
    3bb8:	pop	{r3, r4, r5, pc}
  memset(this, 0, sizeof(ExFatFile));
    3bba:	movs	r2, #56	; 0x38
    3bbc:	mov	r4, r0
    3bbe:	bl	e074 <memset>
  m_flags = FILE_FLAG_READ;
    3bc2:	movs	r3, #1
  m_attributes = FILE_ATTR_ROOT;
    3bc4:	movs	r2, #64	; 0x40
  m_vol = vol;
    3bc6:	str	r5, [r4, #32]
  m_flags = FILE_FLAG_READ;
    3bc8:	mov	r0, r3
    3bca:	strb.w	r3, [r4, #51]	; 0x33
  m_attributes = FILE_ATTR_ROOT;
    3bce:	strb.w	r2, [r4, #49]	; 0x31
}
    3bd2:	pop	{r3, r4, r5, pc}

00003bd4 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>:
//------------------------------------------------------------------------------
bool ExFatFile::parsePathName(const char* path, ExName_t* fname,
                              const char** ptr) {
    3bd4:	push	{r4, r5, r6, r7}
    3bd6:	mov	r5, r1
  // Skip leading spaces.
  while (*path == ' ') {
    3bd8:	ldrb	r1, [r1, #0]
    3bda:	cmp	r1, #32
    3bdc:	bne.n	3be6 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x12>
    3bde:	ldrb.w	r4, [r5, #1]!
    3be2:	cmp	r4, #32
    3be4:	beq.n	3bde <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa>
    path++;
  }
  fname->begin = path;
    3be6:	str	r5, [r2, #0]
  fname->end = path;
    3be8:	str	r5, [r2, #8]
  while (*path && !isDirSeparator(*path)) {
    3bea:	ldrb	r4, [r5, #0]
    3bec:	cmp	r4, #47	; 0x2f
    3bee:	beq.n	3c14 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x40>
    3bf0:	cbz	r4, 3c14 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x40>
    3bf2:	adds	r6, r5, #1
    3bf4:	cmp	r4, #60	; 0x3c
    3bf6:	ldr	r7, [pc, #120]	; (3c70 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x9c>)
    uint8_t c = *path++;
    3bf8:	mov	r5, r6
  return !(lfnReservedChar(c) || c & 0X80);
    3bfa:	bhi.n	3c52 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x7e>
    3bfc:	cmp	r4, #33	; 0x21
    3bfe:	bhi.n	3c26 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x52>
    3c00:	add.w	ip, r4, #4294967295
    3c04:	cmp.w	ip, #30
    3c08:	bhi.n	3c38 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x64>
  *ptr = path;
  return hashName(fname);

fail:
  return false;
}
    3c0a:	movs	r0, #0
    3c0c:	pop	{r4, r5, r6, r7}
    3c0e:	bx	lr
  for (; *path == ' ' || isDirSeparator(*path); path++) {
    3c10:	ldrb.w	r4, [r5, #1]!
    3c14:	cmp	r4, #32
    3c16:	beq.n	3c10 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x3c>
    3c18:	cmp	r4, #47	; 0x2f
    3c1a:	beq.n	3c10 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x3c>
  *ptr = path;
    3c1c:	str	r5, [r3, #0]
  return hashName(fname);
    3c1e:	mov	r1, r2
}
    3c20:	pop	{r4, r5, r6, r7}
  return hashName(fname);
    3c22:	b.w	3ab0 <ExFatFile::hashName(ExName_t*)>
    3c26:	sub.w	ip, r4, #34	; 0x22
    3c2a:	uxtb.w	ip, ip
    3c2e:	lsr.w	ip, r7, ip
    3c32:	tst.w	ip, #1
    3c36:	bne.n	3c0a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x36>
    if (c != '.' && c != ' ') {
    3c38:	cmp	r4, #46	; 0x2e
    3c3a:	beq.n	3c40 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x6c>
    3c3c:	cmp	r4, #32
    3c3e:	bne.n	3c60 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x8c>
  while (*path && !isDirSeparator(*path)) {
    3c40:	ldrb.w	r4, [r6], #1
    3c44:	cmp	r4, #0
    3c46:	beq.n	3c14 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x40>
    3c48:	cmp	r4, #47	; 0x2f
    3c4a:	beq.n	3c14 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x40>
    uint8_t c = *path++;
    3c4c:	cmp	r4, #60	; 0x3c
    3c4e:	mov	r5, r6
  return !(lfnReservedChar(c) || c & 0X80);
    3c50:	bls.n	3bfc <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x28>
    3c52:	cmp	r4, #92	; 0x5c
    3c54:	beq.n	3c0a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x36>
    3c56:	bls.n	3c64 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x90>
    3c58:	cmp	r4, #124	; 0x7c
    3c5a:	beq.n	3c0a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x36>
    3c5c:	lsls	r1, r4, #24
    3c5e:	bmi.n	3c0a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x36>
      fname->end = path;
    3c60:	str	r6, [r2, #8]
    3c62:	b.n	3c40 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x6c>
    3c64:	subs	r4, #62	; 0x3e
    3c66:	cmp	r4, #1
    3c68:	bhi.n	3c60 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x8c>
}
    3c6a:	movs	r0, #0
    3c6c:	pop	{r4, r5, r6, r7}
    3c6e:	bx	lr
    3c70:	.word	0x05002101

00003c74 <ExFatFile::read(void*, unsigned int)>:
  m_curPosition = saveCurPosition;
  m_curCluster = saveCurCluster;
  return c;
}
//------------------------------------------------------------------------------
int ExFatFile::read(void* buf, size_t count) {
    3c74:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  bool isReadable() const { return m_flags & FILE_FLAG_READ; }
    3c78:	ldrb.w	r3, [r0, #51]	; 0x33
    3c7c:	sub	sp, #12
    3c7e:	mov	r5, r0
  uint8_t* cache;
  uint16_t sectorOffset;
  uint32_t sector;
  uint32_t clusterOffset;

  if (!isReadable()) {
    3c80:	lsls	r4, r3, #31
    3c82:	bpl.n	3d6e <ExFatFile::read(void*, unsigned int)+0xfa>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isContiguous() || isFile()) {
    3c84:	lsls	r0, r3, #25
    3c86:	mov	r7, r1
    3c88:	mov	r8, r2
    3c8a:	bpl.w	3dee <ExFatFile::read(void*, unsigned int)+0x17a>
    if ((m_curPosition + count) > m_validLength) {
    3c8e:	ldrd	r2, r3, [r5]
    3c92:	ldrd	r1, r0, [r5, #16]
    3c96:	adds.w	r4, r8, r2
    3c9a:	adc.w	r3, r3, #0
    3c9e:	cmp	r1, r4
    3ca0:	sbcs.w	r3, r0, r3
    3ca4:	bcc.w	3dfa <ExFatFile::read(void*, unsigned int)+0x186>
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    3ca8:	cmp.w	r8, #0
    3cac:	beq.n	3d66 <ExFatFile::read(void*, unsigned int)+0xf2>
    if ((m_curPosition + count) > m_validLength) {
    3cae:	mov	r6, r8
        m_curCluster =
            isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
      } else if (isContiguous()) {
        m_curCluster++;
      } else {
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    3cb0:	add.w	r9, r5, #24
    if ((m_curPosition + count) > m_validLength) {
    3cb4:	ldrd	r3, r2, [r5]
    clusterOffset = m_curPosition & m_vol->clusterMask();
    3cb8:	ldr.w	sl, [r5, #32]
    3cbc:	ldr.w	r4, [sl, #1080]	; 0x438
    3cc0:	ands	r4, r3
    sectorOffset = clusterOffset & m_vol->sectorMask();
    3cc2:	ubfx	fp, r4, #0, #9
    if (clusterOffset == 0) {
    3cc6:	cmp	r4, #0
    3cc8:	bne.n	3dac <ExFatFile::read(void*, unsigned int)+0x138>
      if (m_curPosition == 0) {
    3cca:	orrs	r3, r2
    3ccc:	bne.n	3db0 <ExFatFile::read(void*, unsigned int)+0x13c>
            isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
    3cce:	ldrb.w	r3, [r5, #49]	; 0x31
    3cd2:	lsls	r2, r3, #25
   *
   * \return true if busy else false.
   */
  bool isBusy() { return m_blockDev->isBusy(); }
  /** \return the root directory start cluster number. */
  uint32_t rootDirectoryCluster() const { return m_rootDirectoryCluster; }
    3cd4:	ite	mi
    3cd6:	ldrmi.w	r2, [sl, #1076]	; 0x434
    3cda:	ldrpl	r2, [r5, #28]
        m_curCluster++;
    3cdc:	str	r2, [r5, #24]
  bool dataCacheSync() { return m_dataCache.sync(); }
  //----------------------------------------------------------------------------
  uint32_t clusterMask() const { return m_clusterMask; }
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    3cde:	ldrb.w	r0, [sl, #1093]	; 0x445
    3ce2:	subs	r2, #2
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
    3ce4:	ldr.w	r1, [sl, #1068]	; 0x42c
             (clusterOffset >> m_vol->bytesPerSectorShift());
    3ce8:	lsrs	r3, r4, #9
    3cea:	lsls	r2, r0
    sector = m_vol->clusterStartSector(m_curCluster) +
    3cec:	add.w	r1, r1, r4, lsr #9
    3cf0:	add	r1, r2
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector() ||
    3cf2:	cmp.w	fp, #0
    3cf6:	bne.n	3d84 <ExFatFile::read(void*, unsigned int)+0x110>
    3cf8:	cmp.w	r6, #512	; 0x200
    3cfc:	bcc.n	3d84 <ExFatFile::read(void*, unsigned int)+0x110>
   * \param[in] option mode for cached sector.
   * \return Address of cached sector.
   */
  uint8_t* prepare(uint32_t sector, uint8_t option);
  /** \return Logical sector number for cached sector. */
  uint32_t sector() { return m_sector; }
    3cfe:	ldr.w	r2, [sl, #536]	; 0x218
    3d02:	cmp	r1, r2
    3d04:	beq.n	3d84 <ExFatFile::read(void*, unsigned int)+0x110>
        goto fail;
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2 * m_vol->bytesPerSector()) {
    3d06:	cmp.w	r6, #1024	; 0x400
    3d0a:	bcc.n	3dbe <ExFatFile::read(void*, unsigned int)+0x14a>
  uint32_t sectorsPerCluster() const { return 1UL << m_sectorsPerClusterShift; }
    3d0c:	mov.w	fp, #1
    3d10:	lsl.w	fp, fp, r0
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
      // Limit reads to current cluster.
      uint32_t maxNs = m_vol->sectorsPerCluster() -
                       (clusterOffset >> m_vol->bytesPerSectorShift());
    3d14:	sub.w	fp, fp, r3
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    3d18:	lsrs	r3, r6, #9
    3d1a:	cmp	fp, r3
    3d1c:	it	cs
    3d1e:	movcs	fp, r3
    return sector <= m_sector && m_sector < (sector + count);
    3d20:	cmp	r1, r2
      if (ns > maxNs) {
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
    3d22:	mov.w	r4, fp, lsl #9
    3d26:	bhi.n	3d3e <ExFatFile::read(void*, unsigned int)+0xca>
    3d28:	add.w	r3, r1, fp
    3d2c:	cmp	r2, r3
    3d2e:	bcs.n	3d3e <ExFatFile::read(void*, unsigned int)+0xca>
    if (isCached(sector, count) && !sync()) {
    3d30:	add.w	r0, sl, #528	; 0x210
    3d34:	str	r1, [sp, #4]
    3d36:	bl	3184 <FsCache::sync()>
    3d3a:	ldr	r1, [sp, #4]
    3d3c:	cbz	r0, 3d6e <ExFatFile::read(void*, unsigned int)+0xfa>
    return m_blockDev->readSectors(sector, dst, count);
    3d3e:	ldr.w	r0, [sl, #532]	; 0x214
    3d42:	mov	r3, fp
    3d44:	ldr	r2, [r0, #0]
    3d46:	ldr.w	sl, [r2, #20]
    3d4a:	mov	r2, r7
    3d4c:	blx	sl
      if (!m_vol->cacheSafeRead(sector, dst, ns)) {
    3d4e:	cbz	r0, 3d6e <ExFatFile::read(void*, unsigned int)+0xfa>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
    3d50:	mov	r3, r4
    dst += n;
    3d52:	add	r7, r4
    m_curPosition += n;
    3d54:	ldrd	r1, r2, [r5]
    3d58:	adds	r3, r3, r1
    3d5a:	adc.w	r2, r2, #0
  while (toRead) {
    3d5e:	subs	r6, r6, r4
    m_curPosition += n;
    3d60:	strd	r3, r2, [r5]
  while (toRead) {
    3d64:	bne.n	3cb8 <ExFatFile::read(void*, unsigned int)+0x44>
    toRead -= n;
  }
  return count - toRead;
    3d66:	mov	r0, r8

fail:
  m_error |= READ_ERROR;
  return -1;
}
    3d68:	add	sp, #12
    3d6a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  m_error |= READ_ERROR;
    3d6e:	ldrb.w	r3, [r5, #50]	; 0x32
  return -1;
    3d72:	mov.w	r0, #4294967295
  m_error |= READ_ERROR;
    3d76:	orr.w	r3, r3, #2
    3d7a:	strb.w	r3, [r5, #50]	; 0x32
}
    3d7e:	add	sp, #12
    3d80:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      n = m_vol->bytesPerSector() - sectorOffset;
    3d84:	rsb	r4, fp, #512	; 0x200
    return m_dataCache.prepare(sector, option);
    3d88:	movs	r2, #0
    3d8a:	add.w	r0, sl, #528	; 0x210
    3d8e:	cmp	r4, r6
    3d90:	it	cs
    3d92:	movcs	r4, r6
    3d94:	bl	31dc <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    3d98:	cmp	r0, #0
    3d9a:	beq.n	3d6e <ExFatFile::read(void*, unsigned int)+0xfa>
      memcpy(dst, src, n);
    3d9c:	add.w	r1, r0, fp
    3da0:	mov	r2, r4
    3da2:	mov	r0, r7
    3da4:	bl	a0d4 <memcpy>
    m_curPosition += n;
    3da8:	mov	r3, r4
    3daa:	b.n	3d52 <ExFatFile::read(void*, unsigned int)+0xde>
        m_curCluster++;
    3dac:	ldr	r2, [r5, #24]
    3dae:	b.n	3cde <ExFatFile::read(void*, unsigned int)+0x6a>
      } else if (isContiguous()) {
    3db0:	ldrb.w	r3, [r5, #51]	; 0x33
    3db4:	lsls	r3, r3, #25
    3db6:	bpl.n	3dd6 <ExFatFile::read(void*, unsigned int)+0x162>
        m_curCluster++;
    3db8:	ldr	r2, [r5, #24]
    3dba:	adds	r2, #1
    3dbc:	b.n	3cdc <ExFatFile::read(void*, unsigned int)+0x68>
    return m_blockDev->readSector(sector, dst);
    3dbe:	ldr.w	r0, [sl, #532]	; 0x214
    3dc2:	mov	r2, r7
    3dc4:	ldr	r3, [r0, #0]
    3dc6:	ldr	r3, [r3, #16]
    3dc8:	blx	r3
      if (!m_vol->cacheSafeRead(sector, dst)) {
    3dca:	cmp	r0, #0
    3dcc:	beq.n	3d6e <ExFatFile::read(void*, unsigned int)+0xfa>
    3dce:	mov.w	r3, #512	; 0x200
      n = m_vol->bytesPerSector();
    3dd2:	mov	r4, r3
    3dd4:	b.n	3d52 <ExFatFile::read(void*, unsigned int)+0xde>
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    3dd6:	mov	r2, r9
    3dd8:	mov	r0, sl
    3dda:	ldr	r1, [r5, #24]
    3ddc:	bl	4690 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
        if (fg < 0) {
    3de0:	cmp	r0, #0
    3de2:	blt.n	3d6e <ExFatFile::read(void*, unsigned int)+0xfa>
        if (fg == 0) {
    3de4:	beq.n	3e00 <ExFatFile::read(void*, unsigned int)+0x18c>
    sector = m_vol->clusterStartSector(m_curCluster) +
    3de6:	ldr.w	sl, [r5, #32]
    3dea:	ldr	r2, [r5, #24]
    3dec:	b.n	3cde <ExFatFile::read(void*, unsigned int)+0x6a>
  if (isContiguous() || isFile()) {
    3dee:	ldrb.w	r3, [r5, #49]	; 0x31
    3df2:	lsls	r1, r3, #28
    3df4:	bpl.w	3ca8 <ExFatFile::read(void*, unsigned int)+0x34>
    3df8:	b.n	3c8e <ExFatFile::read(void*, unsigned int)+0x1a>
      count = toRead = m_validLength - m_curPosition;
    3dfa:	sub.w	r8, r1, r2
    3dfe:	b.n	3ca8 <ExFatFile::read(void*, unsigned int)+0x34>
          if (isDir()) {
    3e00:	ldrb.w	r3, [r5, #49]	; 0x31
    3e04:	tst.w	r3, #80	; 0x50
    3e08:	beq.n	3d6e <ExFatFile::read(void*, unsigned int)+0xfa>
  return count - toRead;
    3e0a:	sub.w	r8, r8, r6
    3e0e:	mov	r0, r8
    3e10:	b.n	3d68 <ExFatFile::read(void*, unsigned int)+0xf4>
    3e12:	nop

00003e14 <ExFatFile::peek()>:
int ExFatFile::peek() {
    3e14:	push	{r4, r5, r6, r7, lr}
    3e16:	sub	sp, #12
    return read(&b, 1) == 1 ? b : -1;
    3e18:	movs	r2, #1
    3e1a:	mov	r4, r0
  uint32_t saveCurCluster = m_curCluster;
    3e1c:	ldr	r5, [r0, #24]
    3e1e:	add.w	r1, sp, #7
  uint64_t saveCurPosition = m_curPosition;
    3e22:	ldrd	r6, r7, [r0]
    3e26:	bl	3c74 <ExFatFile::read(void*, unsigned int)>
    3e2a:	cmp	r0, #1
  m_curCluster = saveCurCluster;
    3e2c:	str	r5, [r4, #24]
    3e2e:	ite	eq
    3e30:	ldrbeq.w	r0, [sp, #7]
    3e34:	movne.w	r0, #4294967295
  m_curPosition = saveCurPosition;
    3e38:	strd	r6, r7, [r4]
}
    3e3c:	add	sp, #12
    3e3e:	pop	{r4, r5, r6, r7, pc}

00003e40 <ExFatFile::seekSet(unsigned long long)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
    3e40:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3e44:	mov	r7, r3
  bool isOpen() const { return m_attributes; }
    3e46:	ldrb.w	r3, [r0, #49]	; 0x31
    3e4a:	sub	sp, #12
    3e4c:	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    3e4e:	ldr.w	r8, [r0, #24]
  // error if file not open
  if (!isOpen()) {
    3e52:	cmp	r3, #0
    3e54:	beq.n	3efa <ExFatFile::seekSet(unsigned long long)+0xba>
    3e56:	mov	r6, r2
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    3e58:	ldrd	r1, ip, [r0]
    3e5c:	cmp	ip, r7
    3e5e:	it	eq
    3e60:	cmpeq	r1, r2
    3e62:	beq.n	3f1e <ExFatFile::seekSet(unsigned long long)+0xde>
    return true;
  }
  if (pos == 0) {
    3e64:	orrs.w	r2, r6, r7
    3e68:	beq.n	3f06 <ExFatFile::seekSet(unsigned long long)+0xc6>
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    3e6a:	lsls	r5, r3, #28
    3e6c:	bpl.n	3e78 <ExFatFile::seekSet(unsigned long long)+0x38>
    if (pos > m_validLength) {
    3e6e:	ldrd	r0, r2, [r0, #16]
    3e72:	cmp	r0, r6
    3e74:	sbcs	r2, r7
    3e76:	bcc.n	3efa <ExFatFile::seekSet(unsigned long long)+0xba>
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
  if (isContiguous()) {
    3e78:	ldrb.w	r2, [r4, #51]	; 0x33
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    3e7c:	subs	r5, r6, #1
    3e7e:	ldr.w	sl, [r4, #32]
  if (isContiguous()) {
    3e82:	str	r2, [sp, #4]
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    3e84:	adc.w	r0, r7, #4294967295
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    3e88:	ldrb.w	r2, [sl, #1093]	; 0x445
    3e8c:	adds	r2, #9
    3e8e:	uxtb	r2, r2
    3e90:	rsb	lr, r2, #32
    3e94:	lsrs	r5, r2
    3e96:	sub.w	r9, r2, #32
    3e9a:	lsl.w	fp, r0, lr
    3e9e:	lsr.w	r0, r0, r9
    3ea2:	orr.w	r5, r5, fp
    3ea6:	orrs	r5, r0
  if (isContiguous()) {
    3ea8:	ldr	r0, [sp, #4]
    3eaa:	lsls	r0, r0, #25
    3eac:	bmi.n	3f16 <ExFatFile::seekSet(unsigned long long)+0xd6>
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    3eae:	subs	r0, r1, #1
    3eb0:	lsr.w	r2, r0, r2
    3eb4:	adc.w	r0, ip, #4294967295
  if (nNew < nCur || m_curPosition == 0) {
    3eb8:	orrs.w	ip, r1, ip
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    3ebc:	lsl.w	lr, r0, lr
    3ec0:	lsr.w	r0, r0, r9
    3ec4:	orr.w	r2, r2, lr
    3ec8:	orr.w	r2, r2, r0
  if (nNew < nCur || m_curPosition == 0) {
    3ecc:	beq.n	3ed2 <ExFatFile::seekSet(unsigned long long)+0x92>
    3ece:	cmp	r5, r2
    3ed0:	bcs.n	3f26 <ExFatFile::seekSet(unsigned long long)+0xe6>
    // must follow chain from first cluster
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
    3ed2:	lsls	r3, r3, #25
  uint32_t rootDirectoryCluster() const { return m_rootDirectoryCluster; }
    3ed4:	ite	mi
    3ed6:	ldrmi.w	r3, [sl, #1076]	; 0x434
    3eda:	ldrpl	r3, [r4, #28]
    3edc:	str	r3, [r4, #24]
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    3ede:	add.w	r9, r4, #24
    3ee2:	b.n	3ef2 <ExFatFile::seekSet(unsigned long long)+0xb2>
    3ee4:	ldr	r1, [r4, #24]
    3ee6:	subs	r5, #1
    3ee8:	ldr	r0, [r4, #32]
    3eea:	bl	4690 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    3eee:	cmp	r0, #0
    3ef0:	ble.n	3efa <ExFatFile::seekSet(unsigned long long)+0xba>
    3ef2:	mov	r2, r9
  while (nNew--) {
    3ef4:	cmp	r5, #0
    3ef6:	bne.n	3ee4 <ExFatFile::seekSet(unsigned long long)+0xa4>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }

done:
    3ef8:	b.n	3f0a <ExFatFile::seekSet(unsigned long long)+0xca>
  m_curPosition = pos;
  return true;

fail:
  m_curCluster = tmp;
  return false;
    3efa:	movs	r0, #0
  m_curCluster = tmp;
    3efc:	str.w	r8, [r4, #24]
}
    3f00:	add	sp, #12
    3f02:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    m_curCluster = 0;
    3f06:	movs	r3, #0
    3f08:	str	r3, [r0, #24]
  return true;
    3f0a:	movs	r0, #1
  m_curPosition = pos;
    3f0c:	strd	r6, r7, [r4]
}
    3f10:	add	sp, #12
    3f12:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    m_curCluster = m_firstCluster + nNew;
    3f16:	ldr	r3, [r4, #28]
    3f18:	add	r3, r5
    3f1a:	str	r3, [r4, #24]
    goto done;
    3f1c:	b.n	3f0a <ExFatFile::seekSet(unsigned long long)+0xca>
    return true;
    3f1e:	movs	r0, #1
}
    3f20:	add	sp, #12
    3f22:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    nNew -= nCur;
    3f26:	subs	r5, r5, r2
    3f28:	b.n	3ede <ExFatFile::seekSet(unsigned long long)+0x9e>
    3f2a:	nop

00003f2c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>:
bool ExFatFile::openPrivate(ExFatFile* dir, ExName_t* fname, oflag_t oflag) {
    3f2c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3f30:	mov	r8, r2
    3f32:	ldrb.w	r2, [r0, #49]	; 0x31
    3f36:	sub	sp, #60	; 0x3c
    3f38:	mov	r5, r0
  if (isOpen() || !dir->isDir()) {
    3f3a:	cmp	r2, #0
    3f3c:	bne.w	40ec <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
  bool isDir() const { return m_attributes & FILE_ATTR_DIR; }
    3f40:	mov	fp, r1
    3f42:	ldrb.w	r1, [r1, #49]	; 0x31
    3f46:	tst.w	r1, #80	; 0x50
    3f4a:	beq.w	40ec <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
  switch (oflag & O_ACCMODE) {
    3f4e:	and.w	r1, r3, #3
    3f52:	mov	sl, r3
    3f54:	cmp	r1, #3
    3f56:	beq.w	40ec <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
    3f5a:	adds	r1, #1
    3f5c:	and.w	r0, r3, #8
    3f60:	orr.w	r3, r1, r0
    3f64:	str	r3, [sp, #8]
  if (fname) {
    3f66:	cmp.w	r8, #0
    3f6a:	beq.w	4100 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1d4>
    freeNeed = 2 + (fname->nameLength + 14) / 15;
    3f6e:	ldr.w	r1, [r8, #12]
    3f72:	add.w	r7, r1, #14
    3f76:	ldr	r1, [pc, #756]	; (426c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x340>)
    3f78:	umull	r1, r7, r1, r7
  if (pos == m_curPosition) {
    3f7c:	ldrd	r1, r0, [fp]
    freeNeed = 2 + (fname->nameLength + 14) / 15;
    3f80:	lsrs	r7, r7, #3
  if (pos == m_curPosition) {
    3f82:	orrs	r1, r0
    freeNeed = 2 + (fname->nameLength + 14) / 15;
    3f84:	add.w	r7, r7, #2
    3f88:	uxtb	r7, r7
  if (pos == m_curPosition) {
    3f8a:	beq.n	3f98 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x6c>
  m_curPosition = pos;
    3f8c:	movs	r0, #0
    3f8e:	movs	r1, #0
    m_curCluster = 0;
    3f90:	str.w	r2, [fp, #24]
  m_curPosition = pos;
    3f94:	strd	r0, r1, [fp]
        inSet = false;
    3f98:	movs	r4, #0
        m_flags |= FILE_FLAG_CONTIGUOUS;
    3f9a:	ldr	r3, [sp, #8]
        inSet = false;
    3f9c:	mov	r6, r4
        m_flags |= FILE_FLAG_CONTIGUOUS;
    3f9e:	orr.w	r3, r3, #64	; 0x40
    3fa2:	str	r3, [sp, #12]
    n = dir->read(buf, FS_DIR_SIZE);
    3fa4:	movs	r2, #32
    3fa6:	add	r1, sp, #24
    3fa8:	mov	r0, fp
    3faa:	bl	3c74 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    3fae:	cbz	r0, 3ff2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xc6>
    if (n != FS_DIR_SIZE) {
    3fb0:	cmp	r0, #32
    3fb2:	bne.w	40ec <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
    if (!(buf[0] & EXFAT_TYPE_USED)) {
    3fb6:	ldrsb.w	r2, [sp, #24]
    3fba:	ldrb.w	r3, [sp, #24]
    3fbe:	cmp	r2, #0
    3fc0:	blt.w	4104 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1d8>
      if (freeCount == 0) {
    3fc4:	cbnz	r4, 3fd4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xa8>
        freePos.position = dir->curPosition() - FS_DIR_SIZE;
    3fc6:	ldr.w	r2, [fp]
    3fca:	sub.w	r9, r2, #32
  uint32_t curCluster() const { return m_curCluster; }
    3fce:	ldr.w	r2, [fp, #24]
    3fd2:	str	r2, [sp, #4]
      if (freeCount < freeNeed) {
    3fd4:	cmp	r4, r7
    3fd6:	bcs.n	3fdc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb0>
        freeCount++;
    3fd8:	adds	r4, #1
    3fda:	uxtb	r4, r4
      if (buf[0] == EXFAT_TYPE_END_DIR) {
    3fdc:	cmp	r3, #0
    3fde:	beq.w	41d4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2a8>
    n = dir->read(buf, FS_DIR_SIZE);
    3fe2:	movs	r2, #32
    3fe4:	add	r1, sp, #24
    3fe6:	mov	r0, fp
      inSet = false;
    3fe8:	movs	r6, #0
    n = dir->read(buf, FS_DIR_SIZE);
    3fea:	bl	3c74 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    3fee:	cmp	r0, #0
    3ff0:	bne.n	3fb0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x84>
  if (!(oflag & O_CREAT) || !(modeFlags & FILE_FLAG_WRITE) || !fname) {
    3ff2:	tst.w	sl, #512	; 0x200
    3ff6:	beq.n	40ec <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
    3ff8:	ldr	r3, [sp, #8]
    3ffa:	lsls	r3, r3, #30
    3ffc:	bpl.n	40ec <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
    3ffe:	cmp.w	r8, #0
    4002:	beq.n	40ec <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
  while (freeCount < freeNeed) {
    4004:	cmp	r4, r7
    4006:	bcs.n	4038 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x10c>
    4008:	ldr.w	sl, [sp, #4]
    n = dir->read(buf, FS_DIR_SIZE);
    400c:	movs	r2, #32
    400e:	add	r1, sp, #24
    4010:	mov	r0, fp
    4012:	bl	3c74 <ExFatFile::read(void*, unsigned int)>
    freeCount++;
    4016:	adds	r3, r4, #1
    if (n == 0) {
    4018:	cmp	r0, #0
    401a:	beq.n	40de <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1b2>
    if (n != FS_DIR_SIZE) {
    401c:	cmp	r0, #32
    401e:	bne.n	40ec <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
    if (freeCount == 0) {
    4020:	cbnz	r4, 402e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x102>
      freePos.position = dir->curPosition() - FS_DIR_SIZE;
    4022:	ldr.w	r2, [fp]
    4026:	ldr.w	sl, [fp, #24]
    402a:	sub.w	r9, r2, #32
    freeCount++;
    402e:	uxtb	r4, r3
  while (freeCount < freeNeed) {
    4030:	cmp	r7, r4
    4032:	bhi.n	400c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xe0>
    4034:	str.w	sl, [sp, #4]
  memset(this, 0, sizeof(ExFatFile));
    4038:	movs	r2, #56	; 0x38
    403a:	movs	r1, #0
    403c:	mov	r0, r5
  bool isContiguous() const { return m_flags & FILE_FLAG_CONTIGUOUS; }
    403e:	ldrb.w	r4, [fp, #51]	; 0x33
    4042:	bl	e074 <memset>
  bool hashName(ExName_t* fname);
  bool mkdir(ExFatFile* parent, ExName_t* fname);

  bool openPrivate(ExFatFile* dir, ExName_t* fname, oflag_t oflag);
  bool parsePathName(const char* path, ExName_t* fname, const char** ptr);
  ExFatVolume* volume() const { return m_vol; }
    4046:	ldr.w	r3, [fp, #32]
  freePos.isContiguous = dir->isContiguous();
    404a:	ubfx	r4, r4, #6, #1
  m_dirPos = freePos;
    404e:	ldr	r2, [sp, #4]
  m_vol = dir->volume();
    4050:	str	r3, [r5, #32]
  m_attributes = FILE_ATTR_FILE | FS_ATTRIB_ARCHIVE;
    4052:	movs	r3, #40	; 0x28
  m_dirPos = freePos;
    4054:	strb.w	r4, [r5, #44]	; 0x2c
  m_attributes = FILE_ATTR_FILE | FS_ATTRIB_ARCHIVE;
    4058:	strb.w	r3, [r5, #49]	; 0x31
  void reset() { next = begin; }
    405c:	ldr.w	r3, [r8]
  m_dirPos = freePos;
    4060:	strd	r2, r9, [r5, #36]	; 0x24
    4064:	str.w	r3, [r8, #4]
  for (uint8_t i = 0; i < freeNeed; i++) {
    4068:	cbz	r7, 40d4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1a8>
    406a:	movs	r4, #0
      m_setCount = freeNeed - 1;
    406c:	subs	r6, r7, #1
      if (FsDateTime::callback) {
    406e:	ldr.w	r9, [pc, #512]	; 4270 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x344>
      m_setCount = freeNeed - 1;
    4072:	uxtb	r6, r6
      if (FsDateTime::callback) {
    4074:	mov	sl, r4
    cache = dirCache(i, FsCache::CACHE_FOR_WRITE);
    4076:	movs	r2, #1
    4078:	mov	r1, sl
    407a:	mov	r0, r5
    407c:	bl	3b14 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache || (cache[0] & 0x80)) {
    4080:	mov	fp, r0
    4082:	cbz	r0, 40ec <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
    4084:	ldrsb.w	r2, [r0]
    4088:	cmp	r2, #0
    408a:	blt.n	40ec <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
    memset(cache, 0, FS_DIR_SIZE);
    408c:	movs	r2, #32
    408e:	movs	r1, #0
    4090:	bl	e074 <memset>
    if (i == 0) {
    4094:	cmp	r4, #0
    4096:	beq.w	4230 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x304>
    } else if (i == 1) {
    409a:	cmp.w	sl, #1
    409e:	beq.w	4274 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x348>
      dirName->type = EXFAT_TYPE_NAME;
    40a2:	movs	r3, #193	; 0xc1
    40a4:	mov	r2, fp
    40a6:	add.w	fp, fp, #32
    40aa:	strb.w	r3, [r2], #2
  bool atEnd() { return next == end; }
    40ae:	ldrd	r3, r0, [r8, #4]
        if (fname->atEnd()) {
    40b2:	cmp	r0, r3
  /** \return next UTF-16 unit of LFN. */
  uint16_t get16() { return atEnd() ? 0 : *next++; }
    40b4:	add.w	r3, r3, #1
    40b8:	beq.n	40ca <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x19e>
    40ba:	str.w	r3, [r8, #4]
    40be:	ldrb.w	r1, [r3, #-1]
    40c2:	strh.w	r1, [r2], #2
      for (size_t k = 0; k < 15; k++) {
    40c6:	cmp	fp, r2
    40c8:	bne.n	40b2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x186>
  for (uint8_t i = 0; i < freeNeed; i++) {
    40ca:	adds	r4, #1
    40cc:	uxtb.w	sl, r4
    40d0:	cmp	r7, sl
    40d2:	bhi.n	4076 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x14a>
  return sync();
    40d4:	mov	r0, r5
    40d6:	bl	4c28 <ExFatFile::sync()>
    40da:	mov	r6, r0
    40dc:	b.n	40f8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1cc>
      if (!dir->addDirCluster()) {
    40de:	mov	r0, fp
      uint32_t saveCurCluster = dir->m_curCluster;
    40e0:	ldr.w	r6, [fp, #24]
      if (!dir->addDirCluster()) {
    40e4:	bl	4c88 <ExFatFile::addDirCluster()>
    40e8:	cmp	r0, #0
    40ea:	bne.n	41de <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2b2>
  m_attributes = FILE_ATTR_CLOSED;
    40ec:	movs	r3, #0
  return false;
    40ee:	mov	r6, r3
  m_attributes = FILE_ATTR_CLOSED;
    40f0:	strb.w	r3, [r5, #49]	; 0x31
  m_flags = 0;
    40f4:	strb.w	r3, [r5, #51]	; 0x33
}
    40f8:	mov	r0, r6
    40fa:	add	sp, #60	; 0x3c
    40fc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint8_t freeNeed = 3;
    4100:	movs	r7, #3
    4102:	b.n	3f98 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x6c>
    } else if (!inSet) {
    4104:	cbnz	r6, 415c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x230>
        freeCount = 0;
    4106:	cmp	r4, r7
    4108:	it	cc
    410a:	movcc	r4, #0
      if (buf[0] != EXFAT_TYPE_FILE) {
    410c:	cmp	r3, #133	; 0x85
    410e:	bne.w	3fa4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x78>
      memset(this, 0, sizeof(ExFatFile));
    4112:	mov	r1, r6
    4114:	movs	r2, #56	; 0x38
    4116:	mov	r0, r5
      inSet = true;
    4118:	movs	r6, #1
      memset(this, 0, sizeof(ExFatFile));
    411a:	bl	e074 <memset>
      m_attributes = getLe16(dirFile->attributes) & FS_ATTRIB_COPY;
    411e:	ldrb.w	r2, [sp, #28]
      m_setCount = dirFile->setCount;
    4122:	ldrb.w	r3, [sp, #25]
    4126:	strb.w	r3, [r5, #48]	; 0x30
      m_attributes = getLe16(dirFile->attributes) & FS_ATTRIB_COPY;
    412a:	and.w	r3, r2, #55	; 0x37
      if (!(m_attributes & FS_ATTRIB_DIRECTORY)) {
    412e:	lsls	r2, r2, #27
        m_attributes |= FILE_ATTR_FILE;
    4130:	it	pl
    4132:	orrpl.w	r3, r3, #8
    4136:	strb.w	r3, [r5, #49]	; 0x31
      m_dirPos.position = dir->curPosition() - FS_DIR_SIZE;
    413a:	ldr.w	r3, [fp]
    413e:	ldr.w	r2, [fp, #32]
    4142:	subs	r3, #32
      m_vol = dir->volume();
    4144:	str	r2, [r5, #32]
      m_dirPos.cluster = dir->curCluster();
    4146:	ldr.w	r2, [fp, #24]
    414a:	strd	r2, r3, [r5, #36]	; 0x24
  bool isContiguous() const { return m_flags & FILE_FLAG_CONTIGUOUS; }
    414e:	ldrb.w	r3, [fp, #51]	; 0x33
    4152:	ubfx	r3, r3, #6, #1
      m_dirPos.isContiguous = dir->isContiguous();
    4156:	strb.w	r3, [r5, #44]	; 0x2c
    415a:	b.n	3fa4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x78>
    } else if (buf[0] == EXFAT_TYPE_STREAM) {
    415c:	cmp	r3, #192	; 0xc0
    415e:	beq.n	417e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x252>
    } else if (buf[0] == EXFAT_TYPE_NAME) {
    4160:	cmp	r3, #193	; 0xc1
    4162:	bne.w	3fe2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb6>
      if (!cmpName(dirName, fname)) {
    4166:	mov	r2, r8
    4168:	add	r1, sp, #24
    416a:	mov	r0, r5
    416c:	bl	39c8 <ExFatFile::cmpName(DirName_t const*, ExName_t*)>
    4170:	cbz	r0, 417a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x24e>
      if (fname->atEnd()) {
    4172:	ldrd	r3, r2, [r8, #4]
    4176:	cmp	r2, r3
    4178:	beq.n	41e4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2b8>
        inSet = false;
    417a:	mov	r6, r0
    417c:	b.n	3fa4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x78>
      m_flags = modeFlags;
    417e:	ldr	r3, [sp, #8]
    4180:	strb.w	r3, [r5, #51]	; 0x33
      if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    4184:	ldrb.w	r3, [sp, #25]
    4188:	lsls	r3, r3, #30
    418a:	bpl.n	4192 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x266>
        m_flags |= FILE_FLAG_CONTIGUOUS;
    418c:	ldr	r3, [sp, #12]
    418e:	strb.w	r3, [r5, #51]	; 0x33
      m_firstCluster = getLe32(dirStream->firstCluster);
    4192:	ldr	r3, [sp, #44]	; 0x2c
    4194:	str	r3, [r5, #28]
      m_validLength = getLe64(dirStream->validLength);
    4196:	ldrd	r2, r3, [sp, #32]
    419a:	strd	r2, r3, [r5, #16]
      m_dataLength = getLe64(dirStream->dataLength);
    419e:	ldrd	r2, r3, [sp, #48]	; 0x30
    41a2:	strd	r2, r3, [r5, #8]
      if (!fname) {
    41a6:	cmp.w	r8, #0
    41aa:	beq.n	41e4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2b8>
  void reset() { next = begin; }
    41ac:	ldr.w	r3, [r8]
      if (fname->nameLength != dirStream->nameLength ||
    41b0:	ldr.w	r2, [r8, #12]
    41b4:	str.w	r3, [r8, #4]
    41b8:	ldrb.w	r3, [sp, #27]
    41bc:	cmp	r2, r3
    41be:	bne.w	3fe2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb6>
    41c2:	ldrh.w	r6, [r8, #16]
    41c6:	ldrh.w	r3, [sp, #28]
    41ca:	subs	r6, r6, r3
    41cc:	clz	r6, r6
    41d0:	lsrs	r6, r6, #5
    41d2:	b.n	3fa4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x78>
        if (fname) {
    41d4:	cmp.w	r8, #0
    41d8:	bne.w	3ff2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xc6>
    41dc:	b.n	40ec <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
      dir->m_curCluster = saveCurCluster;
    41de:	str.w	r6, [fp, #24]
      continue;
    41e2:	b.n	4030 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x104>
  if (oflag & O_EXCL) {
    41e4:	tst.w	sl, #2048	; 0x800
    41e8:	bne.n	40ec <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
  if ((oflag & (O_TRUNC | O_AT_END)) || (m_flags & FILE_FLAG_WRITE)) {
    41ea:	tst.w	sl, #17408	; 0x4400
    41ee:	bne.n	42ac <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x380>
    41f0:	ldrb.w	r3, [r5, #51]	; 0x33
    41f4:	lsls	r7, r3, #30
    41f6:	bmi.n	42ac <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x380>
  if (oflag & O_TRUNC) {
    41f8:	tst.w	sl, #1024	; 0x400
    41fc:	bne.w	40ec <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    4200:	tst.w	sl, #16384	; 0x4000
    4204:	beq.w	40f8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1cc>
    4208:	mov	r0, r5
    420a:	ldrd	r2, r3, [r5, #16]
    420e:	bl	3e40 <ExFatFile::seekSet(unsigned long long)>
    4212:	cmp	r0, #0
    4214:	beq.w	40ec <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
  if (isWritable()) {
    4218:	ldrb.w	r3, [r5, #51]	; 0x33
    421c:	lsls	r2, r3, #30
    421e:	bpl.w	40f8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1cc>
    m_attributes |= FS_ATTRIB_ARCHIVE;
    4222:	ldrb.w	r3, [r5, #49]	; 0x31
    4226:	orr.w	r3, r3, #32
    422a:	strb.w	r3, [r5, #49]	; 0x31
    422e:	b.n	40f8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1cc>
      dirFile->type = EXFAT_TYPE_FILE;
    4230:	movs	r3, #133	; 0x85
    4232:	strb.w	r3, [fp]
      m_setCount = freeNeed - 1;
    4236:	strb.w	r6, [r5, #48]	; 0x30
      dirFile->setCount = m_setCount;
    423a:	strb.w	r6, [fp, #1]
      if (FsDateTime::callback) {
    423e:	ldr.w	r3, [r9]
    4242:	cbz	r3, 429a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x36e>
        FsDateTime::callback(&date, &time, &ms10);
    4244:	add.w	r2, sp, #19
    4248:	add.w	r1, sp, #22
    424c:	add	r0, sp, #20
    424e:	blx	r3
  *reinterpret_cast<uint16_t*>(dst) = src;
    4250:	ldrh.w	r3, [sp, #20]
    4254:	strh.w	r3, [fp, #10]
    4258:	ldrh.w	r3, [sp, #22]
    425c:	strh.w	r3, [fp, #8]
        dirFile->createTimeMs = ms10;
    4260:	ldrb.w	r3, [sp, #19]
    4264:	strb.w	r3, [fp, #20]
    4268:	b.n	40ca <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x19e>
    426a:	nop
    426c:	.word	0x88888889
    4270:	.word	0x20006404
      dirStream->type = EXFAT_TYPE_STREAM;
    4274:	movs	r3, #192	; 0xc0
      dirStream->flags = EXFAT_FLAG_ALWAYS1;
    4276:	strb.w	sl, [fp, #1]
      dirStream->type = EXFAT_TYPE_STREAM;
    427a:	strb.w	r3, [fp]
      m_flags = modeFlags | FILE_FLAG_DIR_DIRTY;
    427e:	ldr	r3, [sp, #8]
    4280:	orn	r3, r3, #127	; 0x7f
    4284:	strb.w	r3, [r5, #51]	; 0x33
      dirStream->nameLength = fname->nameLength;
    4288:	ldr.w	r3, [r8, #12]
    428c:	strb.w	r3, [fp, #3]
      setLe16(dirStream->nameHash, fname->nameHash);
    4290:	ldrh.w	r3, [r8, #16]
    4294:	strh.w	r3, [fp, #4]
}
    4298:	b.n	40ca <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x19e>
  *reinterpret_cast<uint16_t*>(dst) = src;
    429a:	movw	r3, #22049	; 0x5621
    429e:	strh.w	r3, [fp, #10]
    42a2:	strh.w	r3, [fp, #14]
    42a6:	strh.w	r3, [fp, #18]
        if (FS_DEFAULT_TIME) {
    42aa:	b.n	40ca <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x19e>
  bool isSubDir() const { return m_attributes & FILE_ATTR_SUBDIR; }
    42ac:	ldrb.w	r3, [r5, #49]	; 0x31
    if (isSubDir() || isReadOnly() || EXFAT_READ_ONLY) {
    42b0:	lsls	r4, r3, #27
    42b2:	bmi.w	40ec <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
    42b6:	lsls	r0, r3, #31
    42b8:	bmi.w	40ec <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
  if (oflag & O_TRUNC) {
    42bc:	tst.w	sl, #1024	; 0x400
    42c0:	beq.n	42ea <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x3be>
    if (!(m_flags & FILE_FLAG_WRITE)) {
    42c2:	ldrb.w	r3, [r5, #51]	; 0x33
    42c6:	lsls	r1, r3, #30
    42c8:	bpl.w	40ec <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
  bool truncate(uint64_t length) { return seekSet(length) && truncate(); }
    42cc:	movs	r2, #0
    42ce:	movs	r3, #0
    42d0:	mov	r0, r5
    42d2:	bl	3e40 <ExFatFile::seekSet(unsigned long long)>
    42d6:	cmp	r0, #0
    42d8:	beq.w	40ec <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
    42dc:	mov	r0, r5
    42de:	bl	5088 <ExFatFile::truncate()>
    42e2:	cmp	r0, #0
    42e4:	beq.w	40ec <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
    42e8:	b.n	4218 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2ec>
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    42ea:	tst.w	sl, #16384	; 0x4000
    42ee:	beq.n	4218 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2ec>
    42f0:	b.n	4208 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2dc>
    42f2:	nop

000042f4 <ExFatFile::open(ExFatFile*, char const*, int)>:
bool ExFatFile::open(ExFatFile* dirFile, const char* path, oflag_t oflag) {
    42f4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  ExFatFile() {}
    42f8:	movs	r5, #0
    42fa:	sub	sp, #92	; 0x5c
    42fc:	mov	r9, r3
  if (isOpen() || !dirFile->isDir()) {
    42fe:	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::open(ExFatFile* dirFile, const char* path, oflag_t oflag) {
    4302:	str	r2, [sp, #4]
    4304:	str	r5, [sp, #80]	; 0x50
  if (isOpen() || !dirFile->isDir()) {
    4306:	cmp	r3, #0
    4308:	bne.n	4388 <ExFatFile::open(ExFatFile*, char const*, int)+0x94>
    430a:	ldrb.w	r3, [r1, #49]	; 0x31
    430e:	mov	r7, r1
    4310:	tst.w	r3, #80	; 0x50
    4314:	beq.n	4388 <ExFatFile::open(ExFatFile*, char const*, int)+0x94>
  if (isDirSeparator(*path)) {
    4316:	ldrb	r3, [r2, #0]
    4318:	mov	r4, r0
    431a:	mov	r6, r2
    431c:	cmp	r3, #47	; 0x2f
    431e:	beq.n	4390 <ExFatFile::open(ExFatFile*, char const*, int)+0x9c>
    if (!openPrivate(dirFile, &fname, O_RDONLY)) {
    4320:	mov.w	r8, #0
    if (!parsePathName(path, &fname, &path)) {
    4324:	add	r3, sp, #4
    4326:	add	r2, sp, #12
    4328:	mov	r1, r6
    432a:	mov	r0, r4
    432c:	bl	3bd4 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    4330:	cbz	r0, 4388 <ExFatFile::open(ExFatFile*, char const*, int)+0x94>
    if (*path == 0) {
    4332:	ldr	r6, [sp, #4]
    4334:	ldrb	r3, [r6, #0]
    4336:	cmp	r3, #0
    4338:	beq.n	43b8 <ExFatFile::open(ExFatFile*, char const*, int)+0xc4>
    if (!openPrivate(dirFile, &fname, O_RDONLY)) {
    433a:	movs	r3, #0
    433c:	add	r2, sp, #12
    433e:	mov	r1, r7
    4340:	mov	r0, r4
    4342:	bl	3f2c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    4346:	cbz	r0, 4388 <ExFatFile::open(ExFatFile*, char const*, int)+0x94>
    tmpDir = *this;
    4348:	mov	ip, r4
    434a:	add	r5, sp, #32
    434c:	add.w	r7, r4, #48	; 0x30
    4350:	ldr.w	r0, [ip]
    4354:	add.w	ip, ip, #16
    4358:	ldr.w	r1, [ip, #-12]
    435c:	mov	lr, r5
    435e:	ldr.w	r2, [ip, #-8]
    4362:	adds	r5, #16
    4364:	ldr.w	r3, [ip, #-4]
    4368:	cmp	ip, r7
    436a:	stmia.w	lr!, {r0, r1, r2, r3}
    436e:	bne.n	4350 <ExFatFile::open(ExFatFile*, char const*, int)+0x5c>
    4370:	ldr.w	r0, [ip]
    dirFile = &tmpDir;
    4374:	add	r7, sp, #32
    tmpDir = *this;
    4376:	str	r0, [r5, #0]
  bool rtn = sync();
    4378:	mov	r0, r4
    437a:	bl	4c28 <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    437e:	strb.w	r8, [r4, #49]	; 0x31
  m_flags = 0;
    4382:	strb.w	r8, [r4, #51]	; 0x33
  return rtn;
    4386:	b.n	4324 <ExFatFile::open(ExFatFile*, char const*, int)+0x30>
  return false;
    4388:	movs	r0, #0
}
    438a:	add	sp, #92	; 0x5c
    438c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    while (isDirSeparator(*path)) {
    4390:	ldrb.w	r1, [r6, #1]!
    4394:	cmp	r1, #47	; 0x2f
    4396:	beq.n	4390 <ExFatFile::open(ExFatFile*, char const*, int)+0x9c>
    4398:	str	r6, [sp, #4]
    if (*path == 0) {
    439a:	cbnz	r1, 43ca <ExFatFile::open(ExFatFile*, char const*, int)+0xd6>
  memset(this, 0, sizeof(ExFatFile));
    439c:	movs	r2, #56	; 0x38
    439e:	mov	r0, r4
      return openRoot(dirFile->m_vol);
    43a0:	ldr	r5, [r7, #32]
  memset(this, 0, sizeof(ExFatFile));
    43a2:	bl	e074 <memset>
  m_flags = FILE_FLAG_READ;
    43a6:	movs	r3, #1
  m_attributes = FILE_ATTR_ROOT;
    43a8:	movs	r2, #64	; 0x40
  m_vol = vol;
    43aa:	str	r5, [r4, #32]
      return openRoot(dirFile->m_vol);
    43ac:	mov	r0, r3
  m_flags = FILE_FLAG_READ;
    43ae:	strb.w	r3, [r4, #51]	; 0x33
  m_attributes = FILE_ATTR_ROOT;
    43b2:	strb.w	r2, [r4, #49]	; 0x31
      return openRoot(dirFile->m_vol);
    43b6:	b.n	438a <ExFatFile::open(ExFatFile*, char const*, int)+0x96>
  return openPrivate(dirFile, &fname, oflag);
    43b8:	mov	r3, r9
    43ba:	add	r2, sp, #12
    43bc:	mov	r1, r7
    43be:	mov	r0, r4
    43c0:	bl	3f2c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
}
    43c4:	add	sp, #92	; 0x5c
    43c6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  memset(this, 0, sizeof(ExFatFile));
    43ca:	movs	r2, #56	; 0x38
    43cc:	movs	r1, #0
    43ce:	add	r0, sp, #32
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    43d0:	ldr	r5, [r7, #32]
  memset(this, 0, sizeof(ExFatFile));
    43d2:	bl	e074 <memset>
  m_flags = FILE_FLAG_READ;
    43d6:	movs	r3, #1
    dirFile = &tmpDir;
    43d8:	add	r7, sp, #32
  m_vol = vol;
    43da:	str	r5, [sp, #64]	; 0x40
  m_flags = FILE_FLAG_READ;
    43dc:	strb.w	r3, [sp, #83]	; 0x53
  m_attributes = FILE_ATTR_ROOT;
    43e0:	movs	r3, #64	; 0x40
    43e2:	strb.w	r3, [sp, #81]	; 0x51
  return true;
    43e6:	b.n	4320 <ExFatFile::open(ExFatFile*, char const*, int)+0x2c>

000043e8 <ExFatFile::open(ExFatVolume*, char const*, int)>:
  return vol && open(vol->vwd(), path, oflag);
    43e8:	cbz	r1, 43f2 <ExFatFile::open(ExFatVolume*, char const*, int)+0xa>
    43ea:	add.w	r1, r1, #1096	; 0x448
    43ee:	b.w	42f4 <ExFatFile::open(ExFatFile*, char const*, int)>
}
    43f2:	mov	r0, r1
    43f4:	bx	lr
    43f6:	nop

000043f8 <ExFatFile::openNext(ExFatFile*, int)>:
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    43f8:	ldrb.w	r3, [r0, #49]	; 0x31
    43fc:	cbnz	r3, 4418 <ExFatFile::openNext(ExFatFile*, int)+0x20>
    43fe:	ldrb.w	r3, [r1, #49]	; 0x31
    4402:	tst.w	r3, #80	; 0x50
    4406:	beq.n	4418 <ExFatFile::openNext(ExFatFile*, int)+0x20>
    4408:	ldr	r3, [r1, #0]
    440a:	ands.w	ip, r3, #31
    440e:	bne.n	4418 <ExFatFile::openNext(ExFatFile*, int)+0x20>
  return openPrivate(dir, nullptr, oflag);
    4410:	mov	r3, r2
    4412:	mov	r2, ip
    4414:	b.w	3f2c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
}
    4418:	movs	r0, #0
    441a:	bx	lr

0000441c <ExFatPartition::bitmapFind(unsigned long, unsigned long)>:
#define DBG_FILE "ExFatPartition.cpp"
#include "../common/DebugMacros.h"
#include "ExFatLib.h"
//------------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
    441c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4420:	mov	r7, r0
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    4422:	mov	sl, r1
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
    4424:	mov	r9, r2
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    4426:	cmp	r1, #0
    4428:	beq.n	44b0 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x94>
    442a:	sub.w	r8, r1, #2
  if (start >= m_clusterCount) {
    442e:	ldr.w	r3, [r7, #1072]	; 0x430
    4432:	cmp	r3, r8
    4434:	bls.n	44bc <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xa0>
  uint32_t endAlloc = start;
  uint32_t bgnAlloc = start;
  uint16_t sectorSize = 1 << m_bytesPerSectorShift;
  size_t i = (start >> 3) & (sectorSize - 1);
  uint8_t* cache;
  uint8_t mask = 1 << (start & 7);
    4436:	and.w	r3, r8, #7
    443a:	movs	r5, #1
  size_t i = (start >> 3) & (sectorSize - 1);
    443c:	ubfx	fp, r8, #3, #9
  uint8_t mask = 1 << (start & 7);
    4440:	lsls	r5, r3
    4442:	uxtb	r5, r5
  uint32_t bgnAlloc = start;
    4444:	mov	r6, r8
  uint32_t endAlloc = start;
    4446:	mov	r4, r8
  while (true) {
    uint32_t sector =
    4448:	ldr.w	r1, [r7, #1068]	; 0x42c
    return m_bitmapCache.prepare(sector, option);
    444c:	movs	r2, #0
    444e:	mov	r0, r7
    4450:	add.w	r1, r1, r4, lsr #12
    4454:	bl	31dc <FsCache::prepare(unsigned long, unsigned char)>
        m_clusterHeapStartSector + (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCachePrepare(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
    4458:	cbz	r0, 4496 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x7a>
    445a:	add.w	fp, fp, #4294967295
    445e:	add	fp, r0
    4460:	addw	r0, r0, #511	; 0x1ff
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
    4464:	ldrb.w	r1, [fp, #1]!
    4468:	b.n	4480 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x64>
          if ((endAlloc - bgnAlloc) == count) {
    446a:	cmp	r2, r9
    446c:	beq.n	44c6 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xaa>
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    446e:	cmp	r8, r4
    4470:	beq.n	4494 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x78>
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
    4472:	ldr.w	r5, [r7, #1072]	; 0x430
    4476:	cmp	r5, r4
    4478:	bls.n	44a4 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x88>
      for (; mask; mask <<= 1) {
    447a:	ands.w	r5, r3, #255	; 0xff
    447e:	beq.n	449a <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x7e>
        endAlloc++;
    4480:	adds	r4, #1
        if (!(mask & cache[i])) {
    4482:	tst	r1, r5
      for (; mask; mask <<= 1) {
    4484:	mov.w	r3, r5, lsl #1
          if ((endAlloc - bgnAlloc) == count) {
    4488:	sub.w	r2, r4, r6
        if (!(mask & cache[i])) {
    448c:	beq.n	446a <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x4e>
        if (endAlloc == start) {
    448e:	cmp	r8, r4
        endAlloc++;
    4490:	mov	r6, r4
        if (endAlloc == start) {
    4492:	bne.n	4472 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x56>
          return 1;
    4494:	movs	r0, #1
      mask = 1;
    }
    i = 0;
  }
  return 0;
}
    4496:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for (; i < sectorSize; i++) {
    449a:	cmp	r0, fp
      mask = 1;
    449c:	mov.w	r5, #1
    for (; i < sectorSize; i++) {
    44a0:	bne.n	4464 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x48>
    44a2:	b.n	44a8 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x8c>
          endAlloc = bgnAlloc = 0;
    44a4:	movs	r6, #0
    44a6:	mov	r4, r6
  uint32_t endAlloc = start;
    44a8:	movs	r5, #1
    i = 0;
    44aa:	mov.w	fp, #0
    44ae:	b.n	4448 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x2c>
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    44b0:	ldr.w	r8, [r0, #1056]	; 0x420
  if (start >= m_clusterCount) {
    44b4:	ldr.w	r3, [r7, #1072]	; 0x430
    44b8:	cmp	r3, r8
    44ba:	bhi.n	4436 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x1a>
    44bc:	mov.w	r8, #0
    44c0:	movs	r5, #1
    start = 0;
    44c2:	mov	fp, r8
    44c4:	b.n	4444 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x28>
            if (cluster == 0 && count == 1) {
    44c6:	cmp.w	sl, #0
    44ca:	bne.n	44d6 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xba>
    44cc:	cmp.w	r9, #1
              m_bitmapStart = bgnAlloc;
    44d0:	it	eq
    44d2:	streq.w	r6, [r7, #1056]	; 0x420
            return bgnAlloc + 2;
    44d6:	adds	r0, r6, #2
}
    44d8:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

000044dc <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>:
//------------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster, uint32_t count,
                                  bool value) {
    44dc:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    44e0:	mov	r8, r0
  uint32_t sector;
  uint32_t start = cluster - 2;
    44e2:	subs	r0, r1, #2
                                  bool value) {
    44e4:	mov	r5, r2
    44e6:	mov	r6, r3
  size_t i;
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    44e8:	adds	r3, r0, r2
    44ea:	ldr.w	r2, [r8, #1072]	; 0x430
    44ee:	cmp	r3, r2
    44f0:	bhi.n	4562 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    44f2:	cbnz	r6, 4568 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x8c>
    if (start <= m_bitmapStart && m_bitmapStart < (start + count)) {
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    }
  } else {
    if (start < m_bitmapStart) {
    44f4:	ldr.w	r3, [r8, #1056]	; 0x420
    44f8:	cmp	r3, r0
      m_bitmapStart = start;
    44fa:	it	hi
    44fc:	strhi.w	r0, [r8, #1056]	; 0x420
    }
  }
  mask = 1 << (start & 7);
    4500:	and.w	r3, r0, #7
    4504:	movs	r4, #1
  sector = m_clusterHeapStartSector + (start >> (m_bytesPerSectorShift + 3));
    4506:	ldr.w	r7, [r8, #1068]	; 0x42c
  i = (start >> 3) & m_sectorMask;
    450a:	ubfx	r9, r0, #3, #9
  mask = 1 << (start & 7);
    450e:	lsls	r4, r3
  sector = m_clusterHeapStartSector + (start >> (m_bytesPerSectorShift + 3));
    4510:	add.w	r1, r7, r0, lsr #12
  mask = 1 << (start & 7);
    4514:	uxtb	r4, r4
    4516:	movs	r2, #1
    4518:	mov	r0, r8
  while (true) {
    cache = bitmapCachePrepare(sector++, FsCache::CACHE_FOR_WRITE);
    451a:	adds	r7, r1, r2
    451c:	bl	31dc <FsCache::prepare(unsigned long, unsigned char)>
    if (!cache) {
    4520:	cbz	r0, 4562 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
    4522:	add.w	lr, r9, #4294967295
    4526:	add	lr, r0
    4528:	addw	r0, r0, #511	; 0x1ff
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
    452c:	ldrb.w	ip, [lr, #1]!
    4530:	tst.w	ip, r4
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
    4534:	eor.w	ip, ip, r4
      for (; mask; mask <<= 1) {
    4538:	mov.w	r4, r4, lsl #1
        if (value == static_cast<bool>(cache[i] & mask)) {
    453c:	ite	ne
    453e:	movne	r2, #1
    4540:	moveq	r2, #0
    4542:	cmp	r2, r6
    4544:	beq.n	4562 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
        if (--count == 0) {
    4546:	subs	r5, #1
        cache[i] ^= mask;
    4548:	strb.w	ip, [lr]
        if (--count == 0) {
    454c:	beq.n	4580 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xa4>
      for (; mask; mask <<= 1) {
    454e:	ands.w	r4, r4, #255	; 0xff
    4552:	bne.n	4530 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x54>
    for (; i < m_bytesPerSector; i++) {
    4554:	cmp	r0, lr
          return true;
        }
      }
      mask = 1;
    }
    i = 0;
    4556:	mov	r9, r4
    4558:	mov.w	r4, #1
    for (; i < m_bytesPerSector; i++) {
    455c:	bne.n	452c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x50>
    cache = bitmapCachePrepare(sector++, FsCache::CACHE_FOR_WRITE);
    455e:	mov	r1, r7
    4560:	b.n	4516 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x3a>
  }

fail:
  return false;
    4562:	movs	r0, #0
}
    4564:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (start <= m_bitmapStart && m_bitmapStart < (start + count)) {
    4568:	ldr.w	r1, [r8, #1056]	; 0x420
    456c:	cmp	r3, r1
    456e:	bls.n	4500 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x24>
    4570:	cmp	r1, r0
    4572:	bcc.n	4500 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x24>
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    4574:	cmp	r3, r2
    4576:	it	cs
    4578:	movcs	r3, #0
    457a:	str.w	r3, [r8, #1056]	; 0x420
    457e:	b.n	4500 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x24>
          return true;
    4580:	movs	r0, #1
}
    4582:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4586:	nop

00004588 <ExFatPartition::chainSize(unsigned long)>:
//------------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
    4588:	push	{r3, r4, r5, r6, r7, lr}
int8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
  uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    458a:	ldr.w	r3, [r0, #1072]	; 0x430
    458e:	adds	r3, #1
    4590:	cmp	r3, r1
    4592:	bcs.n	4598 <ExFatPartition::chainSize(unsigned long)+0x10>
    if (status < 0) return 0;
    4594:	movs	r0, #0
}
    4596:	pop	{r3, r4, r5, r6, r7, pc}
    4598:	mov	r7, r0
    459a:	mov	r4, r1
    return m_dataCache.prepare(sector, option);
    459c:	add.w	r6, r0, #528	; 0x210
  uint32_t n = 0;
    45a0:	movs	r5, #0
    45a2:	b.n	45b0 <ExFatPartition::chainSize(unsigned long)+0x28>
  if (cluster > (m_clusterCount + 1)) {
    45a4:	ldr.w	r3, [r7, #1072]	; 0x430
    n++;
    45a8:	adds	r5, #1
  if (cluster > (m_clusterCount + 1)) {
    45aa:	adds	r3, #1
    45ac:	cmp	r3, r4
    45ae:	bcc.n	4594 <ExFatPartition::chainSize(unsigned long)+0xc>
    DBG_FAIL_MACRO;
    return -1;
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    45b0:	ldr.w	r1, [r7, #1060]	; 0x424
    45b4:	movs	r2, #0
    45b6:	mov	r0, r6
    45b8:	add.w	r1, r1, r4, lsr #7
    45bc:	bl	31dc <FsCache::prepare(unsigned long, unsigned char)>

  cache = dataCachePrepare(sector, FsCache::CACHE_FOR_READ);
  if (!cache) {
    return -1;
  }
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    45c0:	lsls	r4, r4, #2
  if (!cache) {
    45c2:	cmp	r0, #0
    45c4:	beq.n	4594 <ExFatPartition::chainSize(unsigned long)+0xc>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    45c6:	ubfx	r4, r4, #0, #9
  return *reinterpret_cast<const uint32_t*>(src);
    45ca:	ldr	r4, [r0, r4]
  if (next == EXFAT_EOC) {
    45cc:	adds	r3, r4, #1
    45ce:	bne.n	45a4 <ExFatPartition::chainSize(unsigned long)+0x1c>
    n++;
    45d0:	adds	r0, r5, #1
}
    45d2:	pop	{r3, r4, r5, r6, r7, pc}

000045d4 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>:
uint8_t* ExFatPartition::dirCache(DirPos_t* pos, uint8_t options) {
    45d4:	push	{r3, r4, r5, lr}
    45d6:	mov	r4, r1
           ((cluster - 2) << m_sectorsPerClusterShift);
    45d8:	ldr	r3, [r1, #0]
    45da:	ldrb.w	ip, [r0, #1093]	; 0x445
    return m_dataCache.prepare(sector, option);
    45de:	add.w	r0, r0, #528	; 0x210
  sector += (m_clusterMask & pos->position) >> m_bytesPerSectorShift;
    45e2:	ldr.w	r1, [r0, #552]	; 0x228
           ((cluster - 2) << m_sectorsPerClusterShift);
    45e6:	subs	r3, #2
    45e8:	ldr	r5, [r4, #4]
    45ea:	lsl.w	r3, r3, ip
    45ee:	ands	r1, r5
    45f0:	add.w	r3, r3, r1, lsr #9
    45f4:	ldr.w	r1, [r0, #540]	; 0x21c
    return m_dataCache.prepare(sector, option);
    45f8:	add	r1, r3
    45fa:	bl	31dc <FsCache::prepare(unsigned long, unsigned char)>
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
    45fe:	cbz	r0, 4608 <ExFatPartition::dirCache(DirPos_t*, unsigned char)+0x34>
    4600:	ldr	r3, [r4, #4]
    4602:	ubfx	r3, r3, #0, #9
    4606:	add	r0, r3
}
    4608:	pop	{r3, r4, r5, pc}
    460a:	nop

0000460c <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>:
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    460c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4610:	mov	r4, r1
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    4612:	ldr.w	r3, [r0, #1080]	; 0x438
    4616:	ldr	r1, [r1, #4]
    4618:	ands	r3, r1
  pos->position += offset;
    461a:	add	r1, r2
    461c:	str	r1, [r4, #4]
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    461e:	add	r3, r2
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    4620:	ldrb.w	r1, [r0, #1093]	; 0x445
    4624:	add.w	r2, r1, #9
  tmp >>= bytesPerClusterShift();
    4628:	uxtb	r2, r2
    462a:	lsrs	r3, r2
  while (tmp--) {
    462c:	cbz	r3, 467a <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x6e>
    462e:	mov	r8, r0
    4630:	subs	r5, r3, #1
    return m_dataCache.prepare(sector, option);
    4632:	add.w	r9, r0, #528	; 0x210
    4636:	b.n	4644 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x38>
      pos->cluster++;
    4638:	ldr	r3, [r4, #0]
  while (tmp--) {
    463a:	subs	r5, #1
      pos->cluster++;
    463c:	add.w	r3, r3, #1
    4640:	str	r3, [r4, #0]
  while (tmp--) {
    4642:	bcc.n	467a <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x6e>
    if (pos->isContiguous) {
    4644:	ldrb	r6, [r4, #8]
    4646:	cmp	r6, #0
    4648:	bne.n	4638 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x2c>
  if (cluster > (m_clusterCount + 1)) {
    464a:	ldr.w	r3, [r8, #1072]	; 0x430
    464e:	mov	r2, r6
      status = fatGet(pos->cluster, &pos->cluster);
    4650:	ldr	r7, [r4, #0]
    4652:	mov	r0, r9
  if (cluster > (m_clusterCount + 1)) {
    4654:	adds	r3, #1
    4656:	cmp	r7, r3
    4658:	bhi.n	4680 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x74>
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    465a:	ldr.w	r1, [r8, #1060]	; 0x424
    465e:	add.w	r1, r1, r7, lsr #7
    4662:	bl	31dc <FsCache::prepare(unsigned long, unsigned char)>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    4666:	lsls	r7, r7, #2
  if (!cache) {
    4668:	cbz	r0, 4680 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x74>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    466a:	ubfx	r7, r7, #0, #9
    466e:	ldr	r3, [r0, r7]
  if (next == EXFAT_EOC) {
    4670:	adds	r2, r3, #1
    4672:	beq.n	4688 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x7c>
  while (tmp--) {
    4674:	subs	r5, #1
    return 0;
  }
  *value = next;
    4676:	str	r3, [r4, #0]
  while (tmp--) {
    4678:	bcs.n	4644 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x38>
  return 1;
    467a:	movs	r0, #1
}
    467c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return -1;
    4680:	mov.w	r0, #4294967295
}
    4684:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return 0;
    4688:	mov	r0, r6
}
    468a:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    468e:	nop

00004690 <ExFatPartition::fatGet(unsigned long, unsigned long*)>:
int8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    4690:	push	{r3, r4, r5, lr}
  if (cluster > (m_clusterCount + 1)) {
    4692:	ldr.w	r3, [r0, #1072]	; 0x430
    4696:	adds	r3, #1
    4698:	cmp	r3, r1
    469a:	bcs.n	46a2 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x12>
    return -1;
    469c:	mov.w	r0, #4294967295
  return 1;
}
    46a0:	pop	{r3, r4, r5, pc}
    46a2:	mov	r4, r1
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    46a4:	ldr.w	r1, [r0, #1060]	; 0x424
    46a8:	mov	r5, r2
    46aa:	add.w	r0, r0, #528	; 0x210
    46ae:	movs	r2, #0
    46b0:	add.w	r1, r1, r4, lsr #7
    46b4:	bl	31dc <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    46b8:	cmp	r0, #0
    46ba:	beq.n	469c <ExFatPartition::fatGet(unsigned long, unsigned long*)+0xc>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    46bc:	lsls	r4, r4, #2
    46be:	ubfx	r4, r4, #0, #9
    46c2:	ldr	r3, [r0, r4]
  if (next == EXFAT_EOC) {
    46c4:	adds	r2, r3, #1
    46c6:	beq.n	46ce <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x3e>
  return 1;
    46c8:	movs	r0, #1
  *value = next;
    46ca:	str	r3, [r5, #0]
}
    46cc:	pop	{r3, r4, r5, pc}
    return 0;
    46ce:	movs	r0, #0
}
    46d0:	pop	{r3, r4, r5, pc}
    46d2:	nop

000046d4 <ExFatPartition::fatPut(unsigned long, unsigned long)>:
//------------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    46d4:	cmp	r1, #1
    46d6:	bls.n	4710 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x3c>
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
    46d8:	push	{r3, r4, r5, lr}
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    46da:	ldr.w	r3, [r0, #1072]	; 0x430
    46de:	mov	r4, r1
    46e0:	adds	r3, #1
    46e2:	cmp	r3, r1
    46e4:	bcs.n	46ea <ExFatPartition::fatPut(unsigned long, unsigned long)+0x16>
  }
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;

fail:
  return false;
    46e6:	movs	r0, #0
}
    46e8:	pop	{r3, r4, r5, pc}
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    46ea:	ldr.w	r1, [r0, #1060]	; 0x424
    46ee:	mov	r5, r2
    46f0:	add.w	r0, r0, #528	; 0x210
    46f4:	movs	r2, #1
    46f6:	add.w	r1, r1, r4, lsr #7
    46fa:	bl	31dc <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    46fe:	mov	r3, r0
    4700:	cmp	r0, #0
    4702:	beq.n	46e6 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x12>
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
    4704:	lsls	r4, r4, #2
  return true;
    4706:	movs	r0, #1
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
    4708:	ubfx	r4, r4, #0, #9
  *reinterpret_cast<uint32_t*>(dst) = src;
    470c:	str	r5, [r3, r4]
}
    470e:	pop	{r3, r4, r5, pc}
  return false;
    4710:	movs	r0, #0
}
    4712:	bx	lr

00004714 <ExFatPartition::freeChain(unsigned long)>:
  if (cluster > (m_clusterCount + 1)) {
    4714:	ldr.w	r3, [r0, #1072]	; 0x430
    4718:	adds	r3, #1
    471a:	cmp	r1, r3
    471c:	bls.n	4722 <ExFatPartition::freeChain(unsigned long)+0xe>

  return true;

fail:
  return false;
}
    471e:	movs	r0, #0
    4720:	bx	lr
bool ExFatPartition::freeChain(uint32_t cluster) {
    4722:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4726:	mov	r5, r0
    4728:	sub	sp, #12
    472a:	mov	r4, r1
    472c:	add.w	r9, r0, #528	; 0x210
    4730:	mov	r7, r1
    4732:	mov.w	r8, #0
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    4736:	ldr.w	r1, [r5, #1060]	; 0x424
    473a:	movs	r2, #0
    473c:	mov	r0, r9
    473e:	mov.w	fp, r4, lsr #7
    4742:	add.w	r1, r1, r4, lsr #7
    4746:	bl	31dc <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    474a:	cbz	r0, 4772 <ExFatPartition::freeChain(unsigned long)+0x5e>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    474c:	lsls	r3, r4, #2
    474e:	ubfx	r3, r3, #0, #9
  return *reinterpret_cast<const uint32_t*>(src);
    4752:	ldr	r2, [r0, r3]
    4754:	str	r3, [sp, #4]
  if (next == EXFAT_EOC) {
    4756:	adds	r3, r2, #1
    4758:	itet	ne
    475a:	movne	r6, r2
    475c:	moveq.w	sl, #0
    4760:	movne.w	sl, #1
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    4764:	cmp	r4, #1
    4766:	bls.n	4772 <ExFatPartition::freeChain(unsigned long)+0x5e>
    4768:	ldr.w	r2, [r5, #1072]	; 0x430
    476c:	adds	r2, #1
    476e:	cmp	r4, r2
    4770:	bls.n	477a <ExFatPartition::freeChain(unsigned long)+0x66>
}
    4772:	movs	r0, #0
    4774:	add	sp, #12
    4776:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    477a:	ldr.w	r1, [r5, #1060]	; 0x424
    477e:	movs	r2, #1
    4780:	mov	r0, r9
    4782:	add	r1, fp
    4784:	bl	31dc <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    4788:	cmp	r0, #0
    478a:	beq.n	4772 <ExFatPartition::freeChain(unsigned long)+0x5e>
  *reinterpret_cast<uint32_t*>(dst) = src;
    478c:	ldr	r3, [sp, #4]
    478e:	str.w	r8, [r0, r3]
    if (status == 0 || (cluster + 1) != next) {
    4792:	cmp.w	sl, #0
    4796:	beq.n	47be <ExFatPartition::freeChain(unsigned long)+0xaa>
    4798:	adds	r4, #1
    479a:	cmp	r4, r6
    479c:	beq.n	47b0 <ExFatPartition::freeChain(unsigned long)+0x9c>
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    479e:	movs	r3, #0
    47a0:	subs	r2, r4, r7
    47a2:	mov	r1, r7
    47a4:	mov	r0, r5
    47a6:	bl	44dc <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    47aa:	cmp	r0, #0
    47ac:	beq.n	4772 <ExFatPartition::freeChain(unsigned long)+0x5e>
    47ae:	mov	r7, r6
  if (cluster > (m_clusterCount + 1)) {
    47b0:	ldr.w	r3, [r5, #1072]	; 0x430
    47b4:	adds	r3, #1
    47b6:	cmp	r3, r6
    47b8:	bcc.n	4772 <ExFatPartition::freeChain(unsigned long)+0x5e>
    47ba:	mov	r4, r6
    47bc:	b.n	4736 <ExFatPartition::freeChain(unsigned long)+0x22>
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    47be:	adds	r2, r4, #1
    47c0:	mov	r3, sl
    47c2:	mov	r1, r7
    47c4:	mov	r0, r5
    47c6:	subs	r2, r2, r7
}
    47c8:	add	sp, #12
    47ca:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    47ce:	b.w	44dc <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    47d2:	nop

000047d4 <ExFatPartition::freeClusterCount()>:
//------------------------------------------------------------------------------
int32_t ExFatPartition::freeClusterCount() {
    47d4:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t nc = 0;
  uint32_t sector = m_clusterHeapStartSector;
  uint32_t usedCount = 0;
    47d8:	movs	r5, #0
int32_t ExFatPartition::freeClusterCount() {
    47da:	mov	r6, r0
  uint32_t sector = m_clusterHeapStartSector;
    47dc:	ldr.w	r1, [r0, #1068]	; 0x42c
    47e0:	add.w	r8, r0, #528	; 0x210
  uint32_t nc = 0;
    47e4:	mov	r4, r5
    47e6:	movs	r2, #0
    47e8:	mov	r0, r8
  uint8_t* cache;

  while (true) {
    cache = dataCachePrepare(sector++, FsCache::CACHE_FOR_READ);
    47ea:	adds	r7, r1, #1
    47ec:	bl	31dc <FsCache::prepare(unsigned long, unsigned char)>
    if (!cache) {
    47f0:	cbz	r0, 483e <ExFatPartition::freeClusterCount()+0x6a>
    47f2:	add.w	lr, r0, #4294967295
    47f6:	add.w	r9, r4, #4096	; 0x1000
            usedCount++;
          }
        }
      }
      nc += 8;
      if (nc >= m_clusterCount) {
    47fa:	ldr.w	r0, [r6, #1072]	; 0x430
    47fe:	b.n	480c <ExFatPartition::freeClusterCount()+0x38>
      } else if (cache[i]) {
    4800:	cbnz	r1, 4822 <ExFatPartition::freeClusterCount()+0x4e>
      nc += 8;
    4802:	adds	r4, #8
      if (nc >= m_clusterCount) {
    4804:	cmp	r4, r0
    4806:	bcs.n	481c <ExFatPartition::freeClusterCount()+0x48>
    for (size_t i = 0; i < m_bytesPerSector; i++) {
    4808:	cmp	r4, r9
    480a:	beq.n	483a <ExFatPartition::freeClusterCount()+0x66>
      if (cache[i] == 0XFF) {
    480c:	ldrb.w	r1, [lr, #1]!
    4810:	cmp	r1, #255	; 0xff
    4812:	bne.n	4800 <ExFatPartition::freeClusterCount()+0x2c>
      nc += 8;
    4814:	adds	r4, #8
        usedCount += 8;
    4816:	adds	r5, #8
      if (nc >= m_clusterCount) {
    4818:	cmp	r4, r0
    481a:	bcc.n	4808 <ExFatPartition::freeClusterCount()+0x34>
        return m_clusterCount - usedCount;
    481c:	subs	r0, r0, r5
      }
    }
  }
}
    481e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4822:	movs	r2, #8
        for (uint8_t mask = 1; mask; mask <<= 1) {
    4824:	movs	r3, #1
          if ((mask & cache[i])) {
    4826:	tst	r1, r3
        for (uint8_t mask = 1; mask; mask <<= 1) {
    4828:	mov.w	ip, r3, lsl #1
            usedCount++;
    482c:	it	ne
    482e:	addne	r5, #1
        for (uint8_t mask = 1; mask; mask <<= 1) {
    4830:	subs	r2, #1
    4832:	uxtb.w	r3, ip
    4836:	bne.n	4826 <ExFatPartition::freeClusterCount()+0x52>
    4838:	b.n	4802 <ExFatPartition::freeClusterCount()+0x2e>
    cache = dataCachePrepare(sector++, FsCache::CACHE_FOR_READ);
    483a:	mov	r1, r7
    483c:	b.n	47e6 <ExFatPartition::freeClusterCount()+0x12>
      return -1;
    483e:	mov.w	r0, #4294967295
    4842:	b.n	481e <ExFatPartition::freeClusterCount()+0x4a>

00004844 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)>:
//------------------------------------------------------------------------------
bool ExFatPartition::init(FsBlockDevice* dev, uint8_t part, uint32_t volStart) {
    4844:	push	{r3, r4, r5, r6, r7, lr}
  pbs_t* pbs;
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  m_fatType = 0;
    4846:	mov.w	ip, #0
  m_blockDev = dev;
  cacheInit(m_blockDev);
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    484a:	mov	r5, r2
    m_sector = 0XFFFFFFFF;
    484c:	mov.w	r2, #4294967295
bool ExFatPartition::init(FsBlockDevice* dev, uint8_t part, uint32_t volStart) {
    4850:	mov	r4, r0
  m_fatType = 0;
    4852:	strb.w	ip, [r0, #1092]	; 0x444
  m_blockDev = dev;
    4856:	str.w	r1, [r0, #1088]	; 0x440
    m_blockDev = blockDev;
    485a:	str	r1, [r0, #4]
    485c:	str.w	r1, [r0, #532]	; 0x214
    m_status = 0;
    4860:	strb.w	ip, [r0]
    4864:	strb.w	ip, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    4868:	str	r2, [r0, #8]
    486a:	str.w	r2, [r0, #536]	; 0x218
  if (part) {
    486e:	cbz	r5, 48aa <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x66>
    if (part > 4) {
    4870:	cmp	r5, #4
    4872:	bls.n	4878 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x34>
  bitmapFind(0, 1);
  m_fatType = FAT_TYPE_EXFAT;
  return true;

fail:
  return false;
    4874:	movs	r0, #0
}
    4876:	pop	{r3, r4, r5, r6, r7, pc}
    4878:	add.w	r7, r0, #528	; 0x210
    487c:	mov	r2, ip
    487e:	mov	r1, ip
    4880:	mov	r0, r7
    4882:	bl	31dc <FsCache::prepare(unsigned long, unsigned char)>
    if (!mbr) {
    4886:	cmp	r0, #0
    4888:	beq.n	4874 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x30>
    MbrPart_t* mp = mbr->part + part - 1;
    488a:	mvn.w	r3, #4026531840	; 0xf0000000
    488e:	add.w	r0, r0, #446	; 0x1be
    4892:	add	r3, r5
    4894:	lsls	r1, r3, #4
    4896:	add.w	r3, r0, r3, lsl #4
    if (mp->type == 0 || (mp->boot != 0 && mp->boot != 0X80)) {
    489a:	ldrb	r2, [r3, #4]
    489c:	cmp	r2, #0
    489e:	beq.n	4874 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x30>
    48a0:	ldrb	r2, [r0, r1]
    48a2:	lsls	r2, r2, #25
    48a4:	bne.n	4874 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x30>
  return *reinterpret_cast<const uint32_t*>(src);
    48a6:	ldr	r6, [r3, #8]
    48a8:	b.n	48b0 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x6c>
    48aa:	mov	r6, r3
    48ac:	add.w	r7, r0, #528	; 0x210
    48b0:	movs	r2, #0
    48b2:	mov	r1, r6
    48b4:	mov	r0, r7
    48b6:	bl	31dc <FsCache::prepare(unsigned long, unsigned char)>
  if (!pbs) {
    48ba:	mov	r5, r0
    48bc:	cmp	r0, #0
    48be:	beq.n	4874 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x30>
  if (strncmp(pbs->oemName, "EXFAT", 5)) {
    48c0:	movs	r2, #5
    48c2:	ldr	r1, [pc, #104]	; (492c <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0xe8>)
    48c4:	adds	r0, #3
    48c6:	bl	e118 <strncmp>
    48ca:	cmp	r0, #0
    48cc:	bne.n	4874 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x30>
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    48ce:	ldrb.w	r3, [r5, #108]	; 0x6c
    48d2:	cmp	r3, #9
    48d4:	bne.n	4874 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x30>
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    48d6:	ldr	r3, [r5, #80]	; 0x50
  bitmapFind(0, 1);
    48d8:	mov	r1, r0
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    48da:	add	r3, r6
    48dc:	str.w	r3, [r4, #1060]	; 0x424
    48e0:	ldr	r3, [r5, #84]	; 0x54
  m_fatLength = getLe32(bpb->fatLength);
    48e2:	str.w	r3, [r4, #1064]	; 0x428
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
    48e6:	ldr	r3, [r5, #88]	; 0x58
    48e8:	add	r3, r6
    48ea:	str.w	r3, [r4, #1068]	; 0x42c
    48ee:	ldr	r3, [r5, #92]	; 0x5c
  m_clusterCount = getLe32(bpb->clusterCount);
    48f0:	str.w	r3, [r4, #1072]	; 0x430
    48f4:	ldr	r3, [r5, #96]	; 0x60
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
    48f6:	str.w	r3, [r4, #1076]	; 0x434
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    48fa:	ldrb.w	r2, [r5, #109]	; 0x6d
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    48fe:	movs	r5, #1
  m_bitmapStart = 0;
    4900:	str.w	r0, [r4, #1056]	; 0x420
  bitmapFind(0, 1);
    4904:	mov	r0, r4
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    4906:	add.w	r3, r2, #9
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    490a:	strb.w	r2, [r4, #1093]	; 0x445
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    490e:	lsl.w	r3, r5, r3
  m_clusterMask = m_bytesPerCluster - 1;
    4912:	subs	r2, r3, #1
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    4914:	str.w	r3, [r4, #1084]	; 0x43c
  m_clusterMask = m_bytesPerCluster - 1;
    4918:	str.w	r2, [r4, #1080]	; 0x438
  bitmapFind(0, 1);
    491c:	mov	r2, r5
    491e:	bl	441c <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  m_fatType = FAT_TYPE_EXFAT;
    4922:	movs	r3, #64	; 0x40
  return true;
    4924:	mov	r0, r5
  m_fatType = FAT_TYPE_EXFAT;
    4926:	strb.w	r3, [r4, #1092]	; 0x444
}
    492a:	pop	{r3, r4, r5, r6, r7, pc}
    492c:	.word	0x2000083c

00004930 <ExFatPartition::rootLength()>:
//------------------------------------------------------------------------------
uint32_t ExFatPartition::rootLength() {
    4930:	push	{r4, lr}
    4932:	mov	r4, r0
  uint32_t nc = chainSize(m_rootDirectoryCluster);
    4934:	ldr.w	r1, [r0, #1076]	; 0x434
    4938:	bl	4588 <ExFatPartition::chainSize(unsigned long)>
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    493c:	ldrb.w	r3, [r4, #1093]	; 0x445
    4940:	adds	r3, #9
  return nc << bytesPerClusterShift();
    4942:	uxtb	r3, r3
}
    4944:	lsls	r0, r3
    4946:	pop	{r4, pc}

00004948 <ExFatFile::addCluster()>:
  }
  return checksum;
}
//------------------------------------------------------------------------------
bool ExFatFile::addCluster() {
  uint32_t find = m_vol->bitmapFind(m_curCluster ? m_curCluster + 1 : 0, 1);
    4948:	ldr	r1, [r0, #24]
bool ExFatFile::addCluster() {
    494a:	push	{r3, r4, r5, r6, r7, lr}
    494c:	mov	r4, r0
  uint32_t find = m_vol->bitmapFind(m_curCluster ? m_curCluster + 1 : 0, 1);
    494e:	ldr	r0, [r0, #32]
    4950:	cbz	r1, 4954 <ExFatFile::addCluster()+0xc>
    4952:	adds	r1, #1
    4954:	movs	r2, #1
    4956:	bl	441c <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  if (find < 2) {
    495a:	cmp	r0, #1
  uint32_t find = m_vol->bitmapFind(m_curCluster ? m_curCluster + 1 : 0, 1);
    495c:	mov	r5, r0
  if (find < 2) {
    495e:	bls.n	49c6 <ExFatFile::addCluster()+0x7e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!m_vol->bitmapModify(find, 1, 1)) {
    4960:	movs	r3, #1
    4962:	mov	r1, r0
    4964:	ldr	r0, [r4, #32]
    4966:	mov	r2, r3
    4968:	bl	44dc <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    496c:	mov	r6, r0
    496e:	cbz	r0, 49c6 <ExFatFile::addCluster()+0x7e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_curCluster == 0) {
    4970:	ldr	r3, [r4, #24]
    4972:	cbz	r3, 49cc <ExFatFile::addCluster()+0x84>
  bool isContiguous() const { return m_flags & FILE_FLAG_CONTIGUOUS; }
    4974:	ldrb.w	r2, [r4, #51]	; 0x33
    m_flags |= FILE_FLAG_CONTIGUOUS;
    goto done;
  }
  if (isContiguous()) {
    4978:	lsls	r1, r2, #25
    497a:	bpl.n	49a2 <ExFatFile::addCluster()+0x5a>
    if (find == (m_curCluster + 1)) {
    497c:	adds	r1, r3, #1
    497e:	cmp	r1, r5
    4980:	beq.n	49b4 <ExFatFile::addCluster()+0x6c>
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    4982:	bic.w	r2, r2, #64	; 0x40

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    4986:	ldr	r1, [r4, #28]
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    4988:	strb.w	r2, [r4, #51]	; 0x33
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    498c:	b.n	499a <ExFatFile::addCluster()+0x52>
      if (!m_vol->fatPut(c, c + 1)) {
    498e:	ldr	r0, [r4, #32]
    4990:	bl	46d4 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    4994:	mov	r1, r7
      if (!m_vol->fatPut(c, c + 1)) {
    4996:	cbz	r0, 49c6 <ExFatFile::addCluster()+0x7e>
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    4998:	ldr	r3, [r4, #24]
      if (!m_vol->fatPut(c, c + 1)) {
    499a:	adds	r7, r1, #1
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    499c:	cmp	r1, r3
      if (!m_vol->fatPut(c, c + 1)) {
    499e:	mov	r2, r7
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    49a0:	bcc.n	498e <ExFatFile::addCluster()+0x46>
        goto fail;
      }
    }
  }
  // New cluster is EOC.
  if (!m_vol->fatPut(find, EXFAT_EOC)) {
    49a2:	mov.w	r2, #4294967295
    49a6:	mov	r1, r5
    49a8:	ldr	r0, [r4, #32]
    49aa:	bl	46d4 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    49ae:	cbz	r0, 49c6 <ExFatFile::addCluster()+0x7e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Connect new cluster to existing chain.
  if (m_curCluster) {
    49b0:	ldr	r1, [r4, #24]
    49b2:	cbnz	r1, 49ba <ExFatFile::addCluster()+0x72>
  m_curCluster = find;
  return true;

fail:
  return false;
}
    49b4:	mov	r0, r6
  m_curCluster = find;
    49b6:	str	r5, [r4, #24]
}
    49b8:	pop	{r3, r4, r5, r6, r7, pc}
    if (!m_vol->fatPut(m_curCluster, find)) {
    49ba:	mov	r2, r5
    49bc:	ldr	r0, [r4, #32]
    49be:	bl	46d4 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    49c2:	cmp	r0, #0
    49c4:	bne.n	49b4 <ExFatFile::addCluster()+0x6c>
  return false;
    49c6:	movs	r6, #0
}
    49c8:	mov	r0, r6
    49ca:	pop	{r3, r4, r5, r6, r7, pc}
    m_flags |= FILE_FLAG_CONTIGUOUS;
    49cc:	ldrb.w	r3, [r4, #51]	; 0x33
    49d0:	orr.w	r3, r3, #64	; 0x40
    49d4:	strb.w	r3, [r4, #51]	; 0x33
    goto done;
    49d8:	b.n	49b4 <ExFatFile::addCluster()+0x6c>
    49da:	nop

000049dc <ExFatFile::remove()>:
  bool isWritable() const { return m_flags & FILE_FLAG_WRITE; }
    49dc:	ldrb.w	r3, [r0, #51]	; 0x33
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
  uint8_t* cache;
  if (!isWritable()) {
    49e0:	lsls	r2, r3, #30
    49e2:	bpl.n	4a52 <ExFatFile::remove()+0x76>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster) {
    49e4:	ldr	r1, [r0, #28]
bool ExFatFile::remove() {
    49e6:	push	{r4, r5, r6, lr}
    49e8:	mov	r5, r0
  if (m_firstCluster) {
    49ea:	cbnz	r1, 4a16 <ExFatFile::remove()+0x3a>
bool ExFatFile::remove() {
    49ec:	movs	r4, #0
    49ee:	mov	r1, r4
    49f0:	b.n	4a02 <ExFatFile::remove()+0x26>
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Mark entry not used.
    cache[0] &= 0x7F;
    49f2:	ldrb	r3, [r0, #0]
    49f4:	and.w	r3, r3, #127	; 0x7f
    49f8:	strb	r3, [r0, #0]
  for (uint8_t is = 0; is <= m_setCount; is++) {
    49fa:	ldrb.w	r3, [r5, #48]	; 0x30
    49fe:	cmp	r3, r1
    4a00:	bcc.n	4a56 <ExFatFile::remove()+0x7a>
    4a02:	adds	r4, #1
    cache = dirCache(is, FsCache::CACHE_FOR_WRITE);
    4a04:	movs	r2, #1
    4a06:	mov	r0, r5
    4a08:	bl	3b14 <ExFatFile::dirCache(unsigned char, unsigned char)>
  for (uint8_t is = 0; is <= m_setCount; is++) {
    4a0c:	uxtb	r1, r4
    if (!cache) {
    4a0e:	cmp	r0, #0
    4a10:	bne.n	49f2 <ExFatFile::remove()+0x16>
  // Write entry to device.
  return m_vol->cacheSync();

fail:
  return false;
}
    4a12:	movs	r0, #0
    4a14:	pop	{r4, r5, r6, pc}
    if (isContiguous()) {
    4a16:	lsls	r3, r3, #25
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    4a18:	ldr	r0, [r0, #32]
    if (isContiguous()) {
    4a1a:	bpl.n	4a86 <ExFatFile::remove()+0xaa>
    4a1c:	ldrb.w	r3, [r0, #1093]	; 0x445
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    4a20:	ldrd	r2, r4, [r5, #8]
    4a24:	adds	r3, #9
    4a26:	subs	r2, #1
    4a28:	uxtb	r3, r3
    4a2a:	adc.w	r4, r4, #4294967295
    4a2e:	rsb	ip, r3, #32
    4a32:	lsrs	r2, r3
    4a34:	subs	r3, #32
    4a36:	lsl.w	ip, r4, ip
    4a3a:	lsr.w	r3, r4, r3
    4a3e:	orr.w	r2, r2, ip
    4a42:	orrs	r2, r3
      if (!m_vol->bitmapModify(m_firstCluster, nc, 0)) {
    4a44:	movs	r3, #0
    4a46:	adds	r2, #1
    4a48:	bl	44dc <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    4a4c:	cmp	r0, #0
    4a4e:	bne.n	49ec <ExFatFile::remove()+0x10>
    4a50:	b.n	4a12 <ExFatFile::remove()+0x36>
}
    4a52:	movs	r0, #0
    4a54:	bx	lr
  m_attributes = FILE_ATTR_CLOSED;
    4a56:	movs	r3, #0
  return m_vol->cacheSync();
    4a58:	ldr	r4, [r5, #32]
  m_attributes = FILE_ATTR_CLOSED;
    4a5a:	strb.w	r3, [r5, #49]	; 0x31
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    4a5e:	mov	r0, r4
  m_flags = 0;
    4a60:	strb.w	r3, [r5, #51]	; 0x33
    4a64:	bl	3184 <FsCache::sync()>
    4a68:	cmp	r0, #0
    4a6a:	beq.n	4a12 <ExFatFile::remove()+0x36>
    4a6c:	add.w	r0, r4, #528	; 0x210
    4a70:	bl	3184 <FsCache::sync()>
    4a74:	cmp	r0, #0
    4a76:	beq.n	4a12 <ExFatFile::remove()+0x36>
    4a78:	ldr.w	r0, [r4, #1088]	; 0x440
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() const { return m_sectorMask; }
  bool syncDevice() { return m_blockDev->syncDevice(); }
    4a7c:	ldr	r3, [r0, #0]
}
    4a7e:	ldmia.w	sp!, {r4, r5, r6, lr}
    4a82:	ldr	r3, [r3, #28]
    4a84:	bx	r3
      if (!m_vol->freeChain(m_firstCluster)) {
    4a86:	bl	4714 <ExFatPartition::freeChain(unsigned long)>
    4a8a:	cmp	r0, #0
    4a8c:	bne.n	49ec <ExFatFile::remove()+0x10>
    4a8e:	b.n	4a12 <ExFatFile::remove()+0x36>

00004a90 <ExFatFile::rmdir()>:
//------------------------------------------------------------------------------
bool ExFatFile::rmdir() {
  int n;
  uint8_t dir[FS_DIR_SIZE];
  // must be open subdirectory
  if (!isSubDir()) {
    4a90:	ldrb.w	r3, [r0, #49]	; 0x31
    4a94:	lsls	r3, r3, #27
    4a96:	bmi.n	4a9c <ExFatFile::rmdir()+0xc>
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
  return remove();

fail:
  return false;
    4a98:	movs	r0, #0
}
    4a9a:	bx	lr
bool ExFatFile::rmdir() {
    4a9c:	push	{r4, lr}
  void rewind() { seekSet(0); }
    4a9e:	movs	r2, #0
    4aa0:	sub	sp, #32
    4aa2:	movs	r3, #0
    4aa4:	mov	r4, r0
    4aa6:	bl	3e40 <ExFatFile::seekSet(unsigned long long)>
    4aaa:	b.n	4abe <ExFatFile::rmdir()+0x2e>
    if (n != FS_DIR_SIZE || dir[0] & 0X80) {
    4aac:	cmp	r0, #32
    4aae:	bne.n	4ae8 <ExFatFile::rmdir()+0x58>
    4ab0:	ldrsb.w	r3, [sp]
    4ab4:	ldrb.w	r2, [sp]
    4ab8:	cmp	r3, #0
    4aba:	blt.n	4ae8 <ExFatFile::rmdir()+0x58>
    if (dir[0] == 0) {
    4abc:	cbz	r2, 4acc <ExFatFile::rmdir()+0x3c>
    n = read(dir, FS_DIR_SIZE);
    4abe:	movs	r2, #32
    4ac0:	mov	r1, sp
    4ac2:	mov	r0, r4
    4ac4:	bl	3c74 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    4ac8:	cmp	r0, #0
    4aca:	bne.n	4aac <ExFatFile::rmdir()+0x1c>
  m_flags |= FILE_FLAG_WRITE;
    4acc:	ldrb.w	r3, [r4, #51]	; 0x33
  m_attributes = FILE_ATTR_FILE;
    4ad0:	movs	r2, #8
  return remove();
    4ad2:	mov	r0, r4
  m_flags |= FILE_FLAG_WRITE;
    4ad4:	orr.w	r3, r3, #2
  m_attributes = FILE_ATTR_FILE;
    4ad8:	strb.w	r2, [r4, #49]	; 0x31
  m_flags |= FILE_FLAG_WRITE;
    4adc:	strb.w	r3, [r4, #51]	; 0x33
  return remove();
    4ae0:	bl	49dc <ExFatFile::remove()>
}
    4ae4:	add	sp, #32
    4ae6:	pop	{r4, pc}
  return false;
    4ae8:	movs	r0, #0
}
    4aea:	add	sp, #32
    4aec:	pop	{r4, pc}
    4aee:	nop

00004af0 <ExFatFile::syncDir()>:
fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    4af0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4af4:	mov.w	r8, #0
    4af8:	sub	sp, #8
    }
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setLe16(df->attributes, m_attributes & FS_ATTRIB_COPY);
        if (FsDateTime::callback) {
    4afa:	ldr	r7, [pc, #296]	; (4c24 <ExFatFile::syncDir()+0x134>)
bool ExFatFile::syncDir() {
    4afc:	mov	r6, r0
  uint16_t checksum = 0;
    4afe:	mov	r4, r8
    4b00:	mov	r1, r8
    cache = dirCache(is, FsCache::CACHE_FOR_READ);
    4b02:	movs	r2, #0
    4b04:	mov	r0, r6
    4b06:	bl	3b14 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache) {
    4b0a:	mov	r5, r0
    4b0c:	cbz	r0, 4b1c <ExFatFile::syncDir()+0x2c>
    switch (cache[0]) {
    4b0e:	ldrb	r1, [r0, #0]
    4b10:	cmp	r1, #192	; 0xc0
    4b12:	beq.n	4be8 <ExFatFile::syncDir()+0xf8>
    4b14:	cmp	r1, #193	; 0xc1
    4b16:	beq.n	4b70 <ExFatFile::syncDir()+0x80>
    4b18:	cmp	r1, #133	; 0x85
    4b1a:	beq.n	4b30 <ExFatFile::syncDir()+0x40>
    goto fail;
  }
  return true;

fail:
  m_error |= WRITE_ERROR;
    4b1c:	ldrb.w	r3, [r6, #50]	; 0x32
  return false;
    4b20:	movs	r0, #0
  m_error |= WRITE_ERROR;
    4b22:	orr.w	r3, r3, #1
    4b26:	strb.w	r3, [r6, #50]	; 0x32
}
    4b2a:	add	sp, #8
    4b2c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        setLe16(df->attributes, m_attributes & FS_ATTRIB_COPY);
    4b30:	ldrb.w	r3, [r6, #49]	; 0x31
    4b34:	and.w	r3, r3, #55	; 0x37
    4b38:	strh	r3, [r0, #4]
        if (FsDateTime::callback) {
    4b3a:	ldr	r3, [r7, #0]
    4b3c:	cbz	r3, 4b60 <ExFatFile::syncDir()+0x70>
          FsDateTime::callback(&date, &time, &ms10);
    4b3e:	add.w	r2, sp, #3
    4b42:	add.w	r1, sp, #6
    4b46:	add	r0, sp, #4
    4b48:	blx	r3
          setLe16(df->modifyTime, time);
    4b4a:	ldrh.w	r3, [sp, #6]
  *reinterpret_cast<uint16_t*>(dst) = src;
    4b4e:	strh	r3, [r5, #12]
    4b50:	strh	r3, [r5, #16]
          setLe16(df->modifyDate, date);
    4b52:	ldrh.w	r3, [sp, #4]
    4b56:	strh	r3, [r5, #14]
    4b58:	strh	r3, [r5, #18]
          df->modifyTimeMs = ms10;
    4b5a:	ldrb.w	r3, [sp, #3]
    4b5e:	strb	r3, [r5, #21]
        m_vol->dataCacheDirty();
    4b60:	ldr	r2, [r6, #32]
  void dirty() { m_status |= CACHE_STATUS_DIRTY; }
    4b62:	ldrb.w	r3, [r2, #528]	; 0x210
    4b66:	orr.w	r3, r3, #1
    4b6a:	strb.w	r3, [r2, #528]	; 0x210
  bool skip = data[0] == EXFAT_TYPE_FILE;
    4b6e:	ldrb	r1, [r5, #0]
    4b70:	sub.w	r0, r1, #133	; 0x85
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    4b74:	movs	r2, #0
  bool skip = data[0] == EXFAT_TYPE_FILE;
    4b76:	clz	r0, r0
    4b7a:	lsrs	r0, r0, #5
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    4b7c:	b.n	4b82 <ExFatFile::syncDir()+0x92>
    4b7e:	movs	r2, #4
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    4b80:	ldrb	r1, [r5, r2]
    4b82:	lsls	r3, r4, #15
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    4b84:	cmp	r2, #1
    4b86:	add.w	r2, r2, #1
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    4b8a:	orr.w	r3, r3, r4, lsr #1
    4b8e:	uxtah	r3, r1, r3
    4b92:	uxth	r4, r3
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    4b94:	bne.n	4b9a <ExFatFile::syncDir()+0xaa>
    4b96:	cmp	r0, #0
    4b98:	bne.n	4b7e <ExFatFile::syncDir()+0x8e>
    4b9a:	cmp	r2, #31
    4b9c:	bls.n	4b80 <ExFatFile::syncDir()+0x90>
  for (uint8_t is = 0; is <= m_setCount; is++) {
    4b9e:	add.w	r8, r8, #1
    4ba2:	ldrb.w	r3, [r6, #48]	; 0x30
    4ba6:	uxtb.w	r1, r8
    4baa:	cmp	r3, r1
    4bac:	bcs.n	4b02 <ExFatFile::syncDir()+0x12>
      m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_WRITE));
    4bae:	movs	r2, #1
    4bb0:	add.w	r1, r6, #36	; 0x24
    4bb4:	ldr	r0, [r6, #32]
    4bb6:	bl	45d4 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    4bba:	cmp	r0, #0
    4bbc:	beq.n	4b1c <ExFatFile::syncDir()+0x2c>
  if (!m_vol->cacheSync()) {
    4bbe:	ldr	r5, [r6, #32]
    4bc0:	strh	r4, [r0, #2]
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    4bc2:	mov	r0, r5
    4bc4:	bl	3184 <FsCache::sync()>
    4bc8:	cmp	r0, #0
    4bca:	beq.n	4b1c <ExFatFile::syncDir()+0x2c>
    4bcc:	add.w	r0, r5, #528	; 0x210
    4bd0:	bl	3184 <FsCache::sync()>
    4bd4:	cmp	r0, #0
    4bd6:	beq.n	4b1c <ExFatFile::syncDir()+0x2c>
    4bd8:	ldr.w	r0, [r5, #1088]	; 0x440
  bool syncDevice() { return m_blockDev->syncDevice(); }
    4bdc:	ldr	r3, [r0, #0]
    4bde:	ldr	r3, [r3, #28]
    4be0:	blx	r3
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    4be2:	cmp	r0, #0
    4be4:	bne.n	4b2a <ExFatFile::syncDir()+0x3a>
    4be6:	b.n	4b1c <ExFatFile::syncDir()+0x2c>
        if (isContiguous()) {
    4be8:	ldrb.w	r3, [r6, #51]	; 0x33
    4bec:	tst.w	r3, #64	; 0x40
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
    4bf0:	ldrb	r3, [r0, #1]
    4bf2:	ite	ne
    4bf4:	orrne.w	r3, r3, #2
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
    4bf8:	andeq.w	r3, r3, #253	; 0xfd
    4bfc:	strb	r3, [r0, #1]
        setLe64(ds->validLength, m_validLength);
    4bfe:	ldrd	r0, r1, [r6, #16]
        m_vol->dataCacheDirty();
    4c02:	ldrd	r3, r2, [r6, #28]
  *reinterpret_cast<uint64_t*>(dst) = src;
    4c06:	strd	r0, r1, [r5, #8]
        setLe64(ds->dataLength, m_dataLength);
    4c0a:	ldrd	r0, r1, [r6, #8]
  *reinterpret_cast<uint32_t*>(dst) = src;
    4c0e:	str	r3, [r5, #20]
  *reinterpret_cast<uint64_t*>(dst) = src;
    4c10:	strd	r0, r1, [r5, #24]
    4c14:	ldrb.w	r3, [r2, #528]	; 0x210
    4c18:	orr.w	r3, r3, #1
    4c1c:	strb.w	r3, [r2, #528]	; 0x210
  bool skip = data[0] == EXFAT_TYPE_FILE;
    4c20:	ldrb	r1, [r5, #0]
  void dataCacheDirty() { m_dataCache.dirty(); }
    4c22:	b.n	4b70 <ExFatFile::syncDir()+0x80>
    4c24:	.word	0x20006404

00004c28 <ExFatFile::sync()>:
bool ExFatFile::sync() {
    4c28:	push	{r3, r4, r5, lr}
  if (!isOpen()) {
    4c2a:	ldrb.w	r3, [r0, #49]	; 0x31
    4c2e:	cbz	r3, 4c82 <ExFatFile::sync()+0x5a>
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    4c30:	ldrsb.w	r2, [r0, #51]	; 0x33
    4c34:	mov	r4, r0
    4c36:	ldrb.w	r3, [r0, #51]	; 0x33
    4c3a:	cmp	r2, #0
    4c3c:	blt.n	4c58 <ExFatFile::sync()+0x30>
  if (!m_vol->cacheSync()) {
    4c3e:	ldr	r5, [r0, #32]
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    4c40:	mov	r0, r5
    4c42:	bl	3184 <FsCache::sync()>
    4c46:	cbnz	r0, 4c68 <ExFatFile::sync()+0x40>
  m_error |= WRITE_ERROR;
    4c48:	ldrb.w	r3, [r4, #50]	; 0x32
  return false;
    4c4c:	movs	r0, #0
  m_error |= WRITE_ERROR;
    4c4e:	orr.w	r3, r3, #1
    4c52:	strb.w	r3, [r4, #50]	; 0x32
}
    4c56:	pop	{r3, r4, r5, pc}
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    4c58:	and.w	r3, r3, #127	; 0x7f
    4c5c:	strb.w	r3, [r0, #51]	; 0x33
}
    4c60:	ldmia.w	sp!, {r3, r4, r5, lr}
    return syncDir();
    4c64:	b.w	4af0 <ExFatFile::syncDir()>
    4c68:	add.w	r0, r5, #528	; 0x210
    4c6c:	bl	3184 <FsCache::sync()>
    4c70:	cmp	r0, #0
    4c72:	beq.n	4c48 <ExFatFile::sync()+0x20>
    4c74:	ldr.w	r0, [r5, #1088]	; 0x440
  bool syncDevice() { return m_blockDev->syncDevice(); }
    4c78:	ldr	r3, [r0, #0]
    4c7a:	ldr	r3, [r3, #28]
    4c7c:	blx	r3
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    4c7e:	cmp	r0, #0
    4c80:	beq.n	4c48 <ExFatFile::sync()+0x20>
    return true;
    4c82:	movs	r0, #1
}
    4c84:	pop	{r3, r4, r5, pc}
    4c86:	nop

00004c88 <ExFatFile::addDirCluster()>:
bool ExFatFile::addDirCluster() {
    4c88:	push	{r4, r5, r6, lr}
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    4c8a:	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::addDirCluster() {
    4c8e:	mov	r5, r0
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    4c90:	lsls	r2, r3, #25
    4c92:	bmi.n	4d2e <ExFatFile::addDirCluster()+0xa6>
    4c94:	ldr	r0, [r0, #8]
  uint32_t bytesPerCluster() const { return m_bytesPerCluster; }
    4c96:	ldr	r3, [r5, #32]
  dl += m_vol->bytesPerCluster();
    4c98:	ldr.w	r3, [r3, #1084]	; 0x43c
    4c9c:	add	r0, r3
  if (dl >= 0X4000000) {
    4c9e:	cmp.w	r0, #67108864	; 0x4000000
    4ca2:	bcc.n	4ca8 <ExFatFile::addDirCluster()+0x20>
}
    4ca4:	movs	r0, #0
    4ca6:	pop	{r4, r5, r6, pc}
  if (!addCluster()) {
    4ca8:	mov	r0, r5
    4caa:	bl	4948 <ExFatFile::addCluster()>
    4cae:	cmp	r0, #0
    4cb0:	beq.n	4ca4 <ExFatFile::addDirCluster()+0x1c>
  sector = m_vol->clusterStartSector(m_curCluster);
    4cb2:	ldr	r0, [r5, #32]
  for (uint32_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    4cb4:	movs	r4, #0
           ((cluster - 2) << m_sectorsPerClusterShift);
    4cb6:	ldr	r6, [r5, #24]
    4cb8:	ldrb.w	r3, [r0, #1093]	; 0x445
    4cbc:	subs	r6, #2
    4cbe:	lsls	r6, r3
    4cc0:	ldr.w	r3, [r0, #1068]	; 0x42c
    4cc4:	add	r6, r3
    return m_dataCache.prepare(sector, option);
    4cc6:	adds	r1, r6, r4
    4cc8:	movs	r2, #5
    4cca:	add.w	r0, r0, #528	; 0x210
    4cce:	adds	r4, #1
    4cd0:	bl	31dc <FsCache::prepare(unsigned long, unsigned char)>
    memset(cache, 0, m_vol->bytesPerSector());
    4cd4:	mov.w	r2, #512	; 0x200
    4cd8:	movs	r1, #0
    if (!cache) {
    4cda:	cmp	r0, #0
    4cdc:	beq.n	4ca4 <ExFatFile::addDirCluster()+0x1c>
    memset(cache, 0, m_vol->bytesPerSector());
    4cde:	bl	e074 <memset>
  for (uint32_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    4ce2:	ldr	r0, [r5, #32]
  uint32_t sectorsPerCluster() const { return 1UL << m_sectorsPerClusterShift; }
    4ce4:	movs	r3, #1
    4ce6:	ldrb.w	r2, [r0, #1093]	; 0x445
    4cea:	lsls	r3, r2
    4cec:	cmp	r4, r3
    4cee:	bcc.n	4cc6 <ExFatFile::addDirCluster()+0x3e>
  if (!isRoot()) {
    4cf0:	ldrb.w	r3, [r5, #49]	; 0x31
    4cf4:	lsls	r3, r3, #25
    4cf6:	bmi.n	4d24 <ExFatFile::addDirCluster()+0x9c>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    4cf8:	ldrb.w	r2, [r5, #51]	; 0x33
    4cfc:	orn	r2, r2, #127	; 0x7f
    m_dataLength += m_vol->bytesPerCluster();
    4d00:	ldrd	r3, r1, [r5, #8]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    4d04:	strb.w	r2, [r5, #51]	; 0x33
    m_dataLength += m_vol->bytesPerCluster();
    4d08:	ldr.w	r2, [r0, #1084]	; 0x43c
    4d0c:	adds	r3, r3, r2
    4d0e:	adc.w	r0, r1, #0
    4d12:	str	r3, [r5, #8]
    m_validLength += m_vol->bytesPerCluster();
    4d14:	ldrd	r3, r1, [r5, #16]
    m_dataLength += m_vol->bytesPerCluster();
    4d18:	str	r0, [r5, #12]
    m_validLength += m_vol->bytesPerCluster();
    4d1a:	adds	r3, r3, r2
    4d1c:	adc.w	r1, r1, #0
    4d20:	strd	r3, r1, [r5, #16]
  return sync();
    4d24:	mov	r0, r5
}
    4d26:	ldmia.w	sp!, {r4, r5, r6, lr}
  return sync();
    4d2a:	b.w	4c28 <ExFatFile::sync()>
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    4d2e:	ldr	r0, [r0, #32]
    4d30:	bl	4930 <ExFatPartition::rootLength()>
    4d34:	b.n	4c96 <ExFatFile::addDirCluster()+0xe>
    4d36:	nop

00004d38 <ExFatFile::rename(ExFatFile*, char const*)>:
bool ExFatFile::rename(ExFatFile* dirFile, const char* newPath) {
    4d38:	push	{r4, r5, r6, lr}
    4d3a:	mov	r4, r0
  if (!(isFile() || isSubDir())) {
    4d3c:	ldrb.w	r0, [r0, #49]	; 0x31
bool ExFatFile::rename(ExFatFile* dirFile, const char* newPath) {
    4d40:	sub	sp, #112	; 0x70
  ExFatFile() {}
    4d42:	movs	r3, #0
  if (!(isFile() || isSubDir())) {
    4d44:	tst.w	r0, #24
    4d48:	str	r3, [sp, #48]	; 0x30
    4d4a:	str	r3, [sp, #104]	; 0x68
    4d4c:	beq.n	4d56 <ExFatFile::rename(ExFatFile*, char const*)+0x1e>
  if (m_vol != dirFile->m_vol) {
    4d4e:	ldr	r0, [r4, #32]
    4d50:	ldr	r3, [r1, #32]
    4d52:	cmp	r0, r3
    4d54:	beq.n	4d5c <ExFatFile::rename(ExFatFile*, char const*)+0x24>
  return false;
    4d56:	movs	r0, #0
}
    4d58:	add	sp, #112	; 0x70
    4d5a:	pop	{r4, r5, r6, pc}
  if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    4d5c:	movw	r3, #2561	; 0xa01
    4d60:	mov	r0, sp
    4d62:	bl	42f4 <ExFatFile::open(ExFatFile*, char const*, int)>
    4d66:	cmp	r0, #0
    4d68:	beq.n	4d56 <ExFatFile::rename(ExFatFile*, char const*)+0x1e>
  oldFile = *this;
    4d6a:	mov	ip, r4
    4d6c:	add.w	r6, r4, #48	; 0x30
    4d70:	add	r5, sp, #56	; 0x38
    4d72:	ldr.w	r0, [ip]
    4d76:	add.w	ip, ip, #16
    4d7a:	ldr.w	r1, [ip, #-12]
    4d7e:	mov	lr, r5
    4d80:	ldr.w	r2, [ip, #-8]
    4d84:	adds	r5, #16
    4d86:	ldr.w	r3, [ip, #-4]
    4d8a:	cmp	ip, r6
    4d8c:	stmia.w	lr!, {r0, r1, r2, r3}
    4d90:	bne.n	4d72 <ExFatFile::rename(ExFatFile*, char const*)+0x3a>
    4d92:	ldr.w	r0, [ip]
  m_dirPos = file.m_dirPos;
    4d96:	add	r2, sp, #36	; 0x24
    4d98:	add.w	r3, r4, #36	; 0x24
  oldFile = *this;
    4d9c:	str	r0, [r5, #0]
  m_setCount = file.m_setCount;
    4d9e:	ldrb.w	r5, [sp, #48]	; 0x30
  m_dirPos = file.m_dirPos;
    4da2:	ldmia	r2, {r0, r1, r2}
    4da4:	stmia.w	r3, {r0, r1, r2}
  m_flags |= FILE_FLAG_DIR_DIRTY;
    4da8:	ldrb.w	r3, [r4, #51]	; 0x33
  if (!sync()) {
    4dac:	mov	r0, r4
  m_setCount = file.m_setCount;
    4dae:	strb.w	r5, [r4, #48]	; 0x30
  m_flags |= FILE_FLAG_DIR_DIRTY;
    4db2:	orn	r3, r3, #127	; 0x7f
    4db6:	strb.w	r3, [r4, #51]	; 0x33
  if (!sync()) {
    4dba:	bl	4c28 <ExFatFile::sync()>
    4dbe:	cmp	r0, #0
    4dc0:	beq.n	4d56 <ExFatFile::rename(ExFatFile*, char const*)+0x1e>
  oldFile.m_firstCluster = 0;
    4dc2:	movs	r1, #0
  oldFile.m_flags = FILE_FLAG_WRITE;
    4dc4:	movs	r2, #2
  oldFile.m_attributes = FILE_ATTR_FILE;
    4dc6:	movs	r3, #8
  return oldFile.remove();
    4dc8:	add	r0, sp, #56	; 0x38
  oldFile.m_firstCluster = 0;
    4dca:	str	r1, [sp, #84]	; 0x54
  oldFile.m_flags = FILE_FLAG_WRITE;
    4dcc:	strb.w	r2, [sp, #107]	; 0x6b
  oldFile.m_attributes = FILE_ATTR_FILE;
    4dd0:	strb.w	r3, [sp, #105]	; 0x69
  return oldFile.remove();
    4dd4:	bl	49dc <ExFatFile::remove()>
    4dd8:	b.n	4d58 <ExFatFile::rename(ExFatFile*, char const*)+0x20>
    4dda:	nop

00004ddc <ExFatFile::mkdir(ExFatFile*, ExName_t*)>:
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
    4ddc:	push	{r3, r4, r5, lr}
  if (!parent->isDir()) {
    4dde:	ldrb.w	r3, [r1, #49]	; 0x31
    4de2:	tst.w	r3, #80	; 0x50
    4de6:	bne.n	4dee <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x12>
  return false;
    4de8:	movs	r5, #0
}
    4dea:	mov	r0, r5
    4dec:	pop	{r3, r4, r5, pc}
  if (!openPrivate(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    4dee:	movw	r3, #2562	; 0xa02
    4df2:	mov	r4, r0
    4df4:	bl	3f2c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    4df8:	cmp	r0, #0
    4dfa:	beq.n	4de8 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xc>
  m_attributes = FILE_ATTR_SUBDIR | FS_ATTRIB_ARCHIVE;
    4dfc:	movs	r3, #48	; 0x30
  if (!addDirCluster()) {
    4dfe:	mov	r0, r4
  m_attributes = FILE_ATTR_SUBDIR | FS_ATTRIB_ARCHIVE;
    4e00:	strb.w	r3, [r4, #49]	; 0x31
  if (!addDirCluster()) {
    4e04:	bl	4c88 <ExFatFile::addDirCluster()>
    4e08:	mov	r5, r0
    4e0a:	cmp	r0, #0
    4e0c:	beq.n	4de8 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xc>
  m_firstCluster = m_curCluster;
    4e0e:	ldr	r1, [r4, #24]
  void rewind() { seekSet(0); }
    4e10:	movs	r2, #0
    4e12:	movs	r3, #0
    4e14:	mov	r0, r4
    4e16:	str	r1, [r4, #28]
    4e18:	bl	3e40 <ExFatFile::seekSet(unsigned long long)>
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    4e1c:	movs	r2, #193	; 0xc1
  if (!isOpen()) {
    4e1e:	ldrb.w	r3, [r4, #49]	; 0x31
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    4e22:	strb.w	r2, [r4, #51]	; 0x33
  if (!isOpen()) {
    4e26:	cmp	r3, #0
    4e28:	beq.n	4dea <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xe>
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    4e2a:	movs	r3, #65	; 0x41
    return syncDir();
    4e2c:	mov	r0, r4
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    4e2e:	strb.w	r3, [r4, #51]	; 0x33
}
    4e32:	ldmia.w	sp!, {r3, r4, r5, lr}
    return syncDir();
    4e36:	b.w	4af0 <ExFatFile::syncDir()>
    4e3a:	nop

00004e3c <ExFatFile::mkdir(ExFatFile*, char const*, bool)>:
bool ExFatFile::mkdir(ExFatFile* parent, const char* path, bool pFlag) {
    4e3c:	push	{r4, r5, r6, r7, lr}
  ExFatFile() {}
    4e3e:	movs	r5, #0
    4e40:	sub	sp, #92	; 0x5c
    4e42:	mov	r7, r3
  if (isOpen() || !parent->isDir()) {
    4e44:	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::mkdir(ExFatFile* parent, const char* path, bool pFlag) {
    4e48:	str	r2, [sp, #4]
    4e4a:	str	r5, [sp, #80]	; 0x50
  if (isOpen() || !parent->isDir()) {
    4e4c:	cmp	r3, #0
    4e4e:	bne.n	4ede <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa2>
    4e50:	ldrb.w	r3, [r1, #49]	; 0x31
    4e54:	mov	r6, r1
    4e56:	tst.w	r3, #80	; 0x50
    4e5a:	beq.n	4ede <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa2>
  if (isDirSeparator(*path)) {
    4e5c:	ldrb	r3, [r2, #0]
    4e5e:	mov	r4, r0
    4e60:	mov	r1, r2
    4e62:	cmp	r3, #47	; 0x2f
    4e64:	beq.n	4ee4 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa8>
    if (!parsePathName(path, &fname, &path)) {
    4e66:	add	r3, sp, #4
    4e68:	add	r2, sp, #12
    4e6a:	mov	r0, r4
    4e6c:	bl	3bd4 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    4e70:	cmp	r0, #0
    4e72:	beq.n	4ede <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa2>
    if (!*path) {
    4e74:	ldr	r3, [sp, #4]
    4e76:	ldrb	r3, [r3, #0]
    4e78:	cmp	r3, #0
    4e7a:	beq.n	4f00 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xc4>
    if (!openPrivate(parent, &fname, O_RDONLY)) {
    4e7c:	movs	r3, #0
    4e7e:	add	r2, sp, #12
    4e80:	mov	r1, r6
    4e82:	mov	r0, r4
    4e84:	bl	3f2c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    4e88:	cbnz	r0, 4e98 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x5c>
      if (!pFlag || !mkdir(parent, &fname)) {
    4e8a:	cbz	r7, 4ede <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa2>
    4e8c:	add	r2, sp, #12
    4e8e:	mov	r1, r6
    4e90:	mov	r0, r4
    4e92:	bl	4ddc <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
    4e96:	cbz	r0, 4ede <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa2>
    tmpDir = *this;
    4e98:	mov	ip, r4
    4e9a:	add	r5, sp, #32
    4e9c:	add.w	r6, r4, #48	; 0x30
    4ea0:	ldr.w	r0, [ip]
    4ea4:	add.w	ip, ip, #16
    4ea8:	ldr.w	r1, [ip, #-12]
    4eac:	mov	lr, r5
    4eae:	ldr.w	r2, [ip, #-8]
    4eb2:	adds	r5, #16
    4eb4:	ldr.w	r3, [ip, #-4]
    4eb8:	cmp	ip, r6
    4eba:	stmia.w	lr!, {r0, r1, r2, r3}
    4ebe:	bne.n	4ea0 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x64>
    4ec0:	ldr.w	r0, [ip]
    parent = &tmpDir;
    4ec4:	add	r6, sp, #32
    tmpDir = *this;
    4ec6:	str	r0, [r5, #0]
    close();
    4ec8:	mov	r0, r4
    4eca:	bl	3b50 <ExFatFile::close()>
    if (!parsePathName(path, &fname, &path)) {
    4ece:	ldr	r1, [sp, #4]
    4ed0:	add	r3, sp, #4
    4ed2:	add	r2, sp, #12
    4ed4:	mov	r0, r4
    4ed6:	bl	3bd4 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    4eda:	cmp	r0, #0
    4edc:	bne.n	4e74 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x38>
  return false;
    4ede:	movs	r0, #0
}
    4ee0:	add	sp, #92	; 0x5c
    4ee2:	pop	{r4, r5, r6, r7, pc}
      path++;
    4ee4:	adds	r1, #1
    4ee6:	str	r1, [sp, #4]
    while (isDirSeparator(*path)) {
    4ee8:	ldrb	r3, [r1, #0]
    4eea:	cmp	r3, #47	; 0x2f
    4eec:	beq.n	4ee4 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa8>
    if (!tmpDir.openRoot(parent->m_vol)) {
    4eee:	ldr	r1, [r6, #32]
    4ef0:	add	r0, sp, #32
    4ef2:	bl	3bac <ExFatFile::openRoot(ExFatVolume*)>
    4ef6:	cmp	r0, #0
    4ef8:	beq.n	4ede <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa2>
    if (!parsePathName(path, &fname, &path)) {
    4efa:	ldr	r1, [sp, #4]
    parent = &tmpDir;
    4efc:	add	r6, sp, #32
    4efe:	b.n	4e66 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x2a>
  return mkdir(parent, &fname);
    4f00:	add	r2, sp, #12
    4f02:	mov	r1, r6
    4f04:	mov	r0, r4
    4f06:	bl	4ddc <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
}
    4f0a:	add	sp, #92	; 0x5c
    4f0c:	pop	{r4, r5, r6, r7, pc}
    4f0e:	nop

00004f10 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>:
//------------------------------------------------------------------------------
bool ExFatFile::timestamp(uint8_t flags, uint16_t year, uint8_t month,
                          uint8_t day, uint8_t hour, uint8_t minute,
                          uint8_t second) {
    4f10:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4f14:	mov	r6, r1
  uint16_t date;
  uint16_t time;
  uint8_t ms10;

  if (!isFile() || year < 1980 || year > 2107 || month < 1 || month > 12 ||
      day < 1 || day > 31 || hour > 23 || minute > 59 || second > 59) {
    4f16:	ldrb.w	r1, [r0, #49]	; 0x31
                          uint8_t second) {
    4f1a:	sub	sp, #12
      day < 1 || day > 31 || hour > 23 || minute > 59 || second > 59) {
    4f1c:	lsls	r1, r1, #28
                          uint8_t second) {
    4f1e:	ldrb.w	fp, [sp, #48]	; 0x30
    4f22:	ldrb.w	r9, [sp, #52]	; 0x34
    4f26:	ldrb.w	r8, [sp, #56]	; 0x38
    4f2a:	ldrb.w	r7, [sp, #60]	; 0x3c
      day < 1 || day > 31 || hour > 23 || minute > 59 || second > 59) {
    4f2e:	bpl.w	503c <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
  if (!isFile() || year < 1980 || year > 2107 || month < 1 || month > 12 ||
    4f32:	subw	r2, r2, #1980	; 0x7bc
    4f36:	uxth	r4, r2
    4f38:	cmp	r4, #127	; 0x7f
    4f3a:	bhi.n	503c <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
    4f3c:	subs	r2, r3, #1
    4f3e:	cmp	r2, #11
    4f40:	bhi.n	503c <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
      day < 1 || day > 31 || hour > 23 || minute > 59 || second > 59) {
    4f42:	add.w	r2, fp, #4294967295
    4f46:	cmp	r2, #30
    4f48:	bhi.n	503c <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
    4f4a:	cmp.w	r8, #59	; 0x3b
    4f4e:	it	ls
    4f50:	cmpls.w	r9, #23
    4f54:	ite	hi
    4f56:	movhi.w	sl, #1
    4f5a:	movls.w	sl, #0
    4f5e:	cmp	r7, #59	; 0x3b
    4f60:	it	hi
    4f62:	orrhi.w	sl, sl, #1
    4f66:	cmp.w	sl, #0
    4f6a:	bne.n	503c <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // update directory entry
  if (!sync()) {
    4f6c:	mov	r5, r0
    4f6e:	str	r3, [sp, #4]
    4f70:	bl	4c28 <ExFatFile::sync()>
    4f74:	cmp	r0, #0
    4f76:	beq.n	503c <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
    4f78:	ldr	r3, [sp, #4]
    4f7a:	mov	r1, sl
    4f7c:	orr.w	fp, fp, r3, lsl #5
             : hour << 11 | minute << 5 | second >> 1;
    4f80:	lsrs	r3, r7, #1
    goto fail;
  }

  date = FS_DATE(year, month, day);
  time = FS_TIME(hour, minute, second);
  ms10 = second & 1 ? 100 : 0;
    4f82:	ands.w	r7, r7, #1
                                              : year << 9 | month << 5 | day;
    4f86:	orr.w	r4, fp, r4, lsl #9
  uint16_t checksum = 0;
    4f8a:	mov	fp, sl
             : hour << 11 | minute << 5 | second >> 1;
    4f8c:	orr.w	r8, r3, r8, lsl #5
  ms10 = second & 1 ? 100 : 0;
    4f90:	it	ne
    4f92:	movne	r7, #100	; 0x64
                                              : year << 9 | month << 5 | day;
    4f94:	uxth	r4, r4
             : hour << 11 | minute << 5 | second >> 1;
    4f96:	orr.w	r8, r8, r9, lsl #11
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setLe16(df->attributes, m_attributes & FS_ATTRIB_COPY);
        m_vol->dataCacheDirty();
        if (flags & T_ACCESS) {
    4f9a:	and.w	r9, r6, #1
    4f9e:	uxth.w	r8, r8
    cache = dirCache(is, FsCache::CACHE_FOR_READ);
    4fa2:	movs	r2, #0
    4fa4:	mov	r0, r5
    4fa6:	bl	3b14 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache) {
    4faa:	cmp	r0, #0
    4fac:	beq.n	503c <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
    switch (cache[0]) {
    4fae:	ldrb.w	ip, [r0]
    4fb2:	cmp.w	ip, #133	; 0x85
    4fb6:	beq.n	5044 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x134>
    4fb8:	add.w	r3, ip, #64	; 0x40
    4fbc:	uxtb	r3, r3
    4fbe:	cmp	r3, #1
    4fc0:	bhi.n	503c <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
  bool skip = data[0] == EXFAT_TYPE_FILE;
    4fc2:	sub.w	r1, ip, #133	; 0x85
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    4fc6:	movs	r3, #0
  bool skip = data[0] == EXFAT_TYPE_FILE;
    4fc8:	clz	r1, r1
    4fcc:	lsrs	r1, r1, #5
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    4fce:	b.n	4fd6 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xc6>
    4fd0:	movs	r3, #4
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    4fd2:	ldrb.w	ip, [r0, r3]
    4fd6:	mov.w	r2, fp, lsl #15
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    4fda:	cmp	r3, #1
    4fdc:	add.w	r3, r3, #1
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    4fe0:	orr.w	r2, r2, fp, lsr #1
    4fe4:	uxtah	r2, ip, r2
    4fe8:	uxth.w	fp, r2
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    4fec:	bne.n	4ff2 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xe2>
    4fee:	cmp	r1, #0
    4ff0:	bne.n	4fd0 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xc0>
    4ff2:	cmp	r3, #31
    4ff4:	bls.n	4fd2 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xc2>
  for (uint8_t is = 0; is <= m_setCount; is++) {
    4ff6:	add.w	sl, sl, #1
    4ffa:	ldrb.w	r3, [r5, #48]	; 0x30
    4ffe:	uxtb.w	r1, sl
    5002:	cmp	r3, r1
    5004:	bcs.n	4fa2 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x92>
        break;
    }
    checksum = exFatDirChecksum(cache, checksum);
  }
  df = reinterpret_cast<DirFile_t*>(
      m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_WRITE));
    5006:	movs	r2, #1
    5008:	add.w	r1, r5, #36	; 0x24
    500c:	ldr	r0, [r5, #32]
    500e:	bl	45d4 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    5012:	cbz	r0, 503c <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  setLe16(df->setChecksum, checksum);
  if (!m_vol->cacheSync()) {
    5014:	ldr	r4, [r5, #32]
  *reinterpret_cast<uint16_t*>(dst) = src;
    5016:	strh.w	fp, [r0, #2]
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    501a:	mov	r0, r4
    501c:	bl	3184 <FsCache::sync()>
    5020:	cbz	r0, 503c <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
    5022:	add.w	r0, r4, #528	; 0x210
    5026:	bl	3184 <FsCache::sync()>
    502a:	cbz	r0, 503c <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
    502c:	ldr.w	r0, [r4, #1088]	; 0x440
  bool syncDevice() { return m_blockDev->syncDevice(); }
    5030:	ldr	r3, [r0, #0]
    5032:	ldr	r3, [r3, #28]
  }
  return true;

fail:
  return false;
}
    5034:	add	sp, #12
    5036:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    503a:	bx	r3
    503c:	movs	r0, #0
    503e:	add	sp, #12
    5040:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        setLe16(df->attributes, m_attributes & FS_ATTRIB_COPY);
    5044:	ldrb.w	r3, [r5, #49]	; 0x31
        m_vol->dataCacheDirty();
    5048:	ldr	r2, [r5, #32]
        setLe16(df->attributes, m_attributes & FS_ATTRIB_COPY);
    504a:	and.w	r3, r3, #55	; 0x37
    504e:	strh	r3, [r0, #4]
    5050:	ldrb.w	r3, [r2, #528]	; 0x210
    5054:	orr.w	r3, r3, #1
    5058:	strb.w	r3, [r2, #528]	; 0x210
        if (flags & T_ACCESS) {
    505c:	cmp.w	r9, #0
    5060:	beq.n	5068 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x158>
    5062:	strh.w	r8, [r0, #16]
    5066:	strh	r4, [r0, #18]
        if (flags & T_CREATE) {
    5068:	lsls	r2, r6, #30
    506a:	bpl.n	5074 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x164>
          df->createTimeMs = ms10;
    506c:	strb	r7, [r0, #20]
    506e:	strh.w	r8, [r0, #8]
    5072:	strh	r4, [r0, #10]
        if (flags & T_WRITE) {
    5074:	lsls	r3, r6, #29
    5076:	bpl.n	5080 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x170>
          df->modifyTimeMs = ms10;
    5078:	strb	r7, [r0, #21]
    507a:	strh.w	r8, [r0, #12]
    507e:	strh	r4, [r0, #14]
  bool skip = data[0] == EXFAT_TYPE_FILE;
    5080:	ldrb.w	ip, [r0]
}
    5084:	b.n	4fc2 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xb2>
    5086:	nop

00005088 <ExFatFile::truncate()>:
  bool isWritable() const { return m_flags & FILE_FLAG_WRITE; }
    5088:	ldrb.w	r3, [r0, #51]	; 0x33
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    508c:	lsls	r2, r3, #30
    508e:	bpl.n	5156 <ExFatFile::truncate()+0xce>
bool ExFatFile::truncate() {
    5090:	push	{r4, r5, r6, lr}
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    5092:	ldr	r5, [r0, #28]
bool ExFatFile::truncate() {
    5094:	sub	sp, #8
    5096:	mov	r4, r0
  if (m_firstCluster == 0) {
    5098:	cbz	r5, 5104 <ExFatFile::truncate()+0x7c>
    return true;
  }
  if (isContiguous()) {
    509a:	ands.w	r6, r3, #64	; 0x40
    509e:	beq.n	510a <ExFatFile::truncate()+0x82>
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    50a0:	ldr	r0, [r0, #32]
    50a2:	ldr	r2, [r4, #8]
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    50a4:	ldrb.w	ip, [r0, #1093]	; 0x445
    50a8:	subs	r2, #1
    50aa:	ldr	r1, [r4, #12]
    50ac:	add.w	ip, ip, #9
    50b0:	adc.w	r1, r1, #4294967295
    50b4:	uxtb.w	ip, ip
    50b8:	rsb	lr, ip, #32
    50bc:	lsr.w	r2, r2, ip
    50c0:	sub.w	ip, ip, #32
    50c4:	lsl.w	lr, r1, lr
    50c8:	lsr.w	ip, r1, ip
    if (m_curCluster) {
    50cc:	ldr	r1, [r4, #24]
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    50ce:	orr.w	r2, r2, lr
    50d2:	orr.w	r2, r2, ip
    50d6:	adds	r2, #1
    if (m_curCluster) {
    50d8:	cbz	r1, 5122 <ExFatFile::truncate()+0x9a>
      toFree = m_curCluster + 1;
      nc -= 1 + m_curCluster - m_firstCluster;
    50da:	subs	r5, #1
    50dc:	subs	r5, r5, r1
      toFree = m_curCluster + 1;
    50de:	adds	r1, #1
      nc -= 1 + m_curCluster - m_firstCluster;
    50e0:	add	r2, r5
      toFree = m_curCluster + 1;
    50e2:	str	r1, [sp, #4]
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    50e4:	cbnz	r2, 5144 <ExFatFile::truncate()+0xbc>
      }
    }
  }
  m_dataLength = m_curPosition;
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
    50e6:	orn	r3, r3, #127	; 0x7f
  return sync();
    50ea:	mov	r0, r4
  m_dataLength = m_curPosition;
    50ec:	vldr	d7, [r4]
  m_flags |= FILE_FLAG_DIR_DIRTY;
    50f0:	strb.w	r3, [r4, #51]	; 0x33
  m_dataLength = m_curPosition;
    50f4:	vstr	d7, [r4, #8]
  m_validLength = m_curPosition;
    50f8:	vstr	d7, [r4, #16]
  return sync();
    50fc:	bl	4c28 <ExFatFile::sync()>

fail:
  return false;
}
    5100:	add	sp, #8
    5102:	pop	{r4, r5, r6, pc}
    return true;
    5104:	movs	r0, #1
}
    5106:	add	sp, #8
    5108:	pop	{r4, r5, r6, pc}
    if (m_curCluster) {
    510a:	ldr	r1, [r0, #24]
    510c:	cbnz	r1, 5128 <ExFatFile::truncate()+0xa0>
      toFree = m_firstCluster;
    510e:	str	r5, [sp, #4]
      m_firstCluster = 0;
    5110:	str	r1, [r0, #28]
      if (!m_vol->freeChain(toFree)) {
    5112:	mov	r1, r5
    5114:	ldr	r0, [r4, #32]
    5116:	bl	4714 <ExFatPartition::freeChain(unsigned long)>
    511a:	cbz	r0, 5150 <ExFatFile::truncate()+0xc8>
  m_flags |= FILE_FLAG_DIR_DIRTY;
    511c:	ldrb.w	r3, [r4, #51]	; 0x33
    5120:	b.n	50e6 <ExFatFile::truncate()+0x5e>
      toFree = m_firstCluster;
    5122:	str	r5, [sp, #4]
      m_firstCluster = 0;
    5124:	str	r1, [r4, #28]
    5126:	b.n	50e4 <ExFatFile::truncate()+0x5c>
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    5128:	add	r2, sp, #4
    512a:	ldr	r0, [r0, #32]
      toFree = 0;
    512c:	str	r6, [sp, #4]
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    512e:	bl	4690 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
      if (fg < 0) {
    5132:	cmp	r0, #0
    5134:	blt.n	5150 <ExFatFile::truncate()+0xc8>
      if (fg) {
    5136:	bne.n	515a <ExFatFile::truncate()+0xd2>
    if (toFree) {
    5138:	ldr	r5, [sp, #4]
    513a:	cmp	r5, #0
    513c:	bne.n	5112 <ExFatFile::truncate()+0x8a>
  m_flags |= FILE_FLAG_DIR_DIRTY;
    513e:	ldrb.w	r3, [r4, #51]	; 0x33
    5142:	b.n	50e6 <ExFatFile::truncate()+0x5e>
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    5144:	movs	r3, #0
    5146:	ldr	r1, [sp, #4]
    5148:	bl	44dc <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    514c:	cmp	r0, #0
    514e:	bne.n	511c <ExFatFile::truncate()+0x94>
  return false;
    5150:	movs	r0, #0
}
    5152:	add	sp, #8
    5154:	pop	{r4, r5, r6, pc}
  return false;
    5156:	movs	r0, #0
}
    5158:	bx	lr
        if (!m_vol->fatPut(m_curCluster, EXFAT_EOC)) {
    515a:	mov.w	r2, #4294967295
    515e:	ldr	r1, [r4, #24]
    5160:	ldr	r0, [r4, #32]
    5162:	bl	46d4 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    5166:	cmp	r0, #0
    5168:	bne.n	5138 <ExFatFile::truncate()+0xb0>
    516a:	b.n	5150 <ExFatFile::truncate()+0xc8>

0000516c <ExFatFile::write(void const*, unsigned int)>:
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
    516c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5170:	ldrb.w	r3, [r0, #51]	; 0x33
    5174:	sub	sp, #12
    5176:	mov	r4, r0

  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    5178:	lsls	r5, r3, #30
    517a:	bpl.w	52c0 <ExFatFile::write(void const*, unsigned int)+0x154>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    517e:	mov	r9, r2
    5180:	lsls	r2, r3, #28
    5182:	mov	r6, r1
    5184:	bmi.w	52b2 <ExFatFile::write(void const*, unsigned int)+0x146>
    if (!seekSet(m_validLength)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    5188:	cmp.w	r9, #0
    518c:	beq.w	53e0 <ExFatFile::write(void const*, unsigned int)+0x274>
    if (m_curPosition > m_validLength) {
      m_flags |= FILE_FLAG_DIR_DIRTY;
      m_validLength = m_curPosition;
    }
  }
  if (m_curPosition > m_dataLength) {
    5190:	ldr	r3, [r4, #0]
    5192:	mov	r5, r9
    clusterOffset = m_curPosition & m_vol->clusterMask();
    5194:	ldr	r0, [r4, #32]
      if (m_curCluster != 0) {
    5196:	ldr	r1, [r4, #24]
    clusterOffset = m_curPosition & m_vol->clusterMask();
    5198:	ldr.w	r2, [r0, #1080]	; 0x438
    519c:	and.w	r8, r2, r3
    sectorOffset = clusterOffset & m_vol->sectorMask();
    51a0:	ubfx	r7, r8, #0, #9
    if (clusterOffset == 0) {
    51a4:	cmp.w	r8, #0
    51a8:	bne.w	52d4 <ExFatFile::write(void const*, unsigned int)+0x168>
      if (m_curCluster != 0) {
    51ac:	cmp	r1, #0
    51ae:	beq.w	535a <ExFatFile::write(void const*, unsigned int)+0x1ee>
        if (isContiguous()) {
    51b2:	ldrb.w	r3, [r4, #51]	; 0x33
    51b6:	lsls	r3, r3, #25
    51b8:	bpl.w	5394 <ExFatFile::write(void const*, unsigned int)+0x228>
    51bc:	ldrb.w	ip, [r0, #1093]	; 0x445
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
    51c0:	ldrd	r3, r2, [r4, #8]
    51c4:	add.w	ip, ip, #9
    51c8:	subs	r3, #1
    51ca:	uxtb.w	ip, ip
    51ce:	adc.w	r2, r2, #4294967295
    51d2:	rsb	lr, ip, #32
    51d6:	lsr.w	r3, r3, ip
    51da:	sub.w	ip, ip, #32
    51de:	lsl.w	lr, r2, lr
    51e2:	lsr.w	ip, r2, ip
    51e6:	ldr	r2, [r4, #28]
    51e8:	orr.w	r3, r3, lr
    51ec:	orr.w	r3, r3, ip
    51f0:	add	r3, r2
          if (m_curCluster < lc) {
    51f2:	cmp	r1, r3
    51f4:	bcs.w	53a2 <ExFatFile::write(void const*, unsigned int)+0x236>
            m_curCluster++;
    51f8:	adds	r1, #1
    51fa:	str	r1, [r4, #24]
           ((cluster - 2) << m_sectorsPerClusterShift);
    51fc:	ldrb.w	r2, [r0, #1093]	; 0x445
    5200:	subs	r1, #2
    sector = m_vol->clusterStartSector(m_curCluster) +
    5202:	ldr.w	r3, [r0, #1068]	; 0x42c
    5206:	lsls	r1, r2
    5208:	add	r1, r3
    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
    520a:	cmp.w	r5, #512	; 0x200
    520e:	bcc.w	5326 <ExFatFile::write(void const*, unsigned int)+0x1ba>
    } else if (toWrite >= 2 * m_vol->bytesPerSector()) {
    5212:	cmp.w	r5, #1024	; 0x400
    5216:	bcc.w	5366 <ExFatFile::write(void const*, unsigned int)+0x1fa>
  uint32_t sectorsPerCluster() const { return 1UL << m_sectorsPerClusterShift; }
    521a:	movs	r3, #1
    521c:	lsls	r3, r2
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
    521e:	lsrs	r2, r5, #9
                       (clusterOffset >> m_vol->bytesPerSectorShift());
    5220:	sub.w	r3, r3, r8
    5224:	cmp	r3, r2
    5226:	it	cs
    5228:	movcs	r3, r2
    return sector <= m_sector && m_sector < (sector + count);
    522a:	ldr.w	r2, [r0, #536]	; 0x218
    522e:	cmp	r2, r1
      n = ns << m_vol->bytesPerSectorShift();
    5230:	mov.w	r8, r3, lsl #9
    5234:	bcc.n	524a <ExFatFile::write(void const*, unsigned int)+0xde>
    5236:	adds	r7, r3, r1
    5238:	cmp	r2, r7
    523a:	bcs.n	524a <ExFatFile::write(void const*, unsigned int)+0xde>
    m_status = 0;
    523c:	movs	r2, #0
    523e:	strb.w	r2, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    5242:	mov.w	r2, #4294967295
    5246:	str.w	r2, [r0, #536]	; 0x218
    return m_blockDev->writeSectors(sector, src, count);
    524a:	ldr.w	r0, [r0, #532]	; 0x214
    524e:	mov	r2, r6
    5250:	ldr	r7, [r0, #0]
    5252:	ldr	r7, [r7, #36]	; 0x24
    5254:	blx	r7
      if (!m_vol->cacheSafeWrite(sector, src, ns)) {
    5256:	cbz	r0, 52c0 <ExFatFile::write(void const*, unsigned int)+0x154>
    m_curPosition += n;
    5258:	mov	r3, r8
    src += n;
    525a:	add	r6, r8
    toWrite -= n;
    525c:	sub.w	r5, r5, r8
    m_curPosition += n;
    5260:	ldrd	r7, r2, [r4]
    if (m_curPosition > m_validLength) {
    5264:	ldrd	r0, r1, [r4, #16]
    m_curPosition += n;
    5268:	adds	r3, r3, r7
    526a:	adc.w	r2, r2, #0
    if (m_curPosition > m_validLength) {
    526e:	cmp	r0, r3
    5270:	sbcs	r1, r2
    m_curPosition += n;
    5272:	strd	r3, r2, [r4]
    if (m_curPosition > m_validLength) {
    5276:	bcs.n	5288 <ExFatFile::write(void const*, unsigned int)+0x11c>
      m_flags |= FILE_FLAG_DIR_DIRTY;
    5278:	ldrb.w	r1, [r4, #51]	; 0x33
    527c:	orn	r1, r1, #127	; 0x7f
      m_validLength = m_curPosition;
    5280:	strd	r3, r2, [r4, #16]
      m_flags |= FILE_FLAG_DIR_DIRTY;
    5284:	strb.w	r1, [r4, #51]	; 0x33
  while (toWrite) {
    5288:	cmp	r5, #0
    528a:	bne.n	5194 <ExFatFile::write(void const*, unsigned int)+0x28>
  if (m_curPosition > m_dataLength) {
    528c:	ldrd	r0, r1, [r4, #8]
    5290:	cmp	r0, r3
    5292:	sbcs	r1, r2
    5294:	bcc.w	53c4 <ExFatFile::write(void const*, unsigned int)+0x258>
    m_dataLength = m_curPosition;
    // update fileSize and insure sync will update dir entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    5298:	ldr	r3, [pc, #332]	; (53e8 <ExFatFile::write(void const*, unsigned int)+0x27c>)
    529a:	ldr	r3, [r3, #0]
    529c:	cmp	r3, #0
    529e:	beq.w	53dc <ExFatFile::write(void const*, unsigned int)+0x270>
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    52a2:	ldrb.w	r3, [r4, #51]	; 0x33
    52a6:	mov	r0, r9
    52a8:	orn	r3, r3, #127	; 0x7f
    52ac:	strb.w	r3, [r4, #51]	; 0x33
    52b0:	b.n	52ce <ExFatFile::write(void const*, unsigned int)+0x162>
    if (!seekSet(m_validLength)) {
    52b2:	ldrd	r2, r3, [r0, #16]
    52b6:	bl	3e40 <ExFatFile::seekSet(unsigned long long)>
    52ba:	cmp	r0, #0
    52bc:	bne.w	5188 <ExFatFile::write(void const*, unsigned int)+0x1c>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
    52c0:	ldrb.w	r3, [r4, #50]	; 0x32
  return 0;
    52c4:	movs	r0, #0
  m_error |= WRITE_ERROR;
    52c6:	orr.w	r3, r3, #1
    52ca:	strb.w	r3, [r4, #50]	; 0x32
}
    52ce:	add	sp, #12
    52d0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
           ((cluster - 2) << m_sectorsPerClusterShift);
    52d4:	ldrb.w	r2, [r0, #1093]	; 0x445
    52d8:	subs	r1, #2
             (clusterOffset >> m_vol->bytesPerSectorShift());
    52da:	mov.w	r8, r8, lsr #9
    sector = m_vol->clusterStartSector(m_curCluster) +
    52de:	ldr.w	r3, [r0, #1068]	; 0x42c
    52e2:	lsls	r1, r2
    52e4:	add	r1, r8
    52e6:	add	r1, r3
    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
    52e8:	cmp	r7, #0
    52ea:	beq.n	520a <ExFatFile::write(void const*, unsigned int)+0x9e>
      n = m_vol->bytesPerSector() - sectorOffset;
    52ec:	rsb	r8, r7, #512	; 0x200
    return m_dataCache.prepare(sector, option);
    52f0:	movs	r2, #1
    52f2:	add.w	r0, r0, #528	; 0x210
    52f6:	cmp	r8, r5
    52f8:	it	cs
    52fa:	movcs	r8, r5
    52fc:	bl	31dc <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    5300:	cmp	r0, #0
    5302:	beq.n	52c0 <ExFatFile::write(void const*, unsigned int)+0x154>
      memcpy(dst, src, n);
    5304:	add	r0, r7
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    5306:	add	r7, r8
      memcpy(dst, src, n);
    5308:	mov	r2, r8
    530a:	mov	r1, r6
    530c:	bl	a0d4 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    5310:	cmp.w	r7, #512	; 0x200
    5314:	ldr	r0, [r4, #32]
    5316:	bne.n	5258 <ExFatFile::write(void const*, unsigned int)+0xec>
  bool dataCacheSync() { return m_dataCache.sync(); }
    5318:	add.w	r0, r0, #528	; 0x210
    531c:	bl	3184 <FsCache::sync()>
        if (!m_vol->dataCacheSync()) {
    5320:	cmp	r0, #0
    5322:	bne.n	5258 <ExFatFile::write(void const*, unsigned int)+0xec>
    5324:	b.n	52c0 <ExFatFile::write(void const*, unsigned int)+0x154>
      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
    5326:	ldr	r2, [r4, #4]
    5328:	ldr	r3, [r4, #20]
    532a:	str	r2, [sp, #0]
    532c:	str	r3, [sp, #4]
    532e:	ldr	r2, [r4, #16]
    5330:	ldr	r3, [r4, #0]
    5332:	cmp	r3, r2
    5334:	ldrd	r2, r3, [sp]
    5338:	sbcs	r2, r3
    533a:	bcs.n	5362 <ExFatFile::write(void const*, unsigned int)+0x1f6>
        cacheOption = FsCache::CACHE_FOR_WRITE;
    533c:	movs	r2, #1
    return m_dataCache.prepare(sector, option);
    533e:	add.w	r0, r0, #528	; 0x210
    5342:	bl	31dc <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    5346:	cmp	r0, #0
    5348:	beq.n	52c0 <ExFatFile::write(void const*, unsigned int)+0x154>
      memcpy(dst, src, n);
    534a:	mov	r2, r5
    534c:	mov	r1, r6
    534e:	add	r0, r7
    m_curPosition += n;
    5350:	mov	r8, r5
      memcpy(dst, src, n);
    5352:	bl	a0d4 <memcpy>
    m_curPosition += n;
    5356:	mov	r3, r5
    5358:	b.n	525a <ExFatFile::write(void const*, unsigned int)+0xee>
        if (m_firstCluster == 0) {
    535a:	ldr	r1, [r4, #28]
    535c:	cbz	r1, 53b2 <ExFatFile::write(void const*, unsigned int)+0x246>
          m_curCluster = m_firstCluster;
    535e:	str	r1, [r4, #24]
    5360:	b.n	51fc <ExFatFile::write(void const*, unsigned int)+0x90>
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    5362:	movs	r2, #5
    5364:	b.n	533e <ExFatFile::write(void const*, unsigned int)+0x1d2>
    if (isCached(sector)) {
    5366:	ldr.w	r3, [r0, #536]	; 0x218
    536a:	cmp	r3, r1
    536c:	bne.n	537c <ExFatFile::write(void const*, unsigned int)+0x210>
    m_status = 0;
    536e:	movs	r3, #0
    5370:	strb.w	r3, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    5374:	mov.w	r3, #4294967295
    5378:	str.w	r3, [r0, #536]	; 0x218
    return m_blockDev->writeSector(sector, src);
    537c:	ldr.w	r0, [r0, #532]	; 0x214
    5380:	mov	r2, r6
    5382:	ldr	r3, [r0, #0]
    5384:	ldr	r3, [r3, #32]
    5386:	blx	r3
      if (!m_vol->cacheSafeWrite(sector, src)) {
    5388:	cmp	r0, #0
    538a:	beq.n	52c0 <ExFatFile::write(void const*, unsigned int)+0x154>
    538c:	mov.w	r3, #512	; 0x200
      n = m_vol->bytesPerSector();
    5390:	mov	r8, r3
    5392:	b.n	525a <ExFatFile::write(void const*, unsigned int)+0xee>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    5394:	add.w	r2, r4, #24
    5398:	bl	4690 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    539c:	cmp	r0, #0
    539e:	blt.n	52c0 <ExFatFile::write(void const*, unsigned int)+0x154>
        if (fg == 0) {
    53a0:	bne.n	53ac <ExFatFile::write(void const*, unsigned int)+0x240>
          if (!addCluster()) {
    53a2:	mov	r0, r4
    53a4:	bl	4948 <ExFatFile::addCluster()>
    53a8:	cmp	r0, #0
    53aa:	beq.n	52c0 <ExFatFile::write(void const*, unsigned int)+0x154>
    sector = m_vol->clusterStartSector(m_curCluster) +
    53ac:	ldr	r1, [r4, #24]
    53ae:	ldr	r0, [r4, #32]
    53b0:	b.n	51fc <ExFatFile::write(void const*, unsigned int)+0x90>
          if (!addCluster()) {
    53b2:	mov	r0, r4
    53b4:	bl	4948 <ExFatFile::addCluster()>
    53b8:	cmp	r0, #0
    53ba:	beq.n	52c0 <ExFatFile::write(void const*, unsigned int)+0x154>
          m_firstCluster = m_curCluster;
    53bc:	ldr	r1, [r4, #24]
    sector = m_vol->clusterStartSector(m_curCluster) +
    53be:	ldr	r0, [r4, #32]
          m_firstCluster = m_curCluster;
    53c0:	str	r1, [r4, #28]
    53c2:	b.n	51fc <ExFatFile::write(void const*, unsigned int)+0x90>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    53c4:	ldrb.w	r1, [r4, #51]	; 0x33
    53c8:	mov	r0, r9
    m_dataLength = m_curPosition;
    53ca:	strd	r3, r2, [r4, #8]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    53ce:	orn	r3, r1, #127	; 0x7f
    53d2:	strb.w	r3, [r4, #51]	; 0x33
}
    53d6:	add	sp, #12
    53d8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    53dc:	mov	r0, r9
    53de:	b.n	52ce <ExFatFile::write(void const*, unsigned int)+0x162>
  if (m_curPosition > m_dataLength) {
    53e0:	ldrd	r3, r2, [r4]
    53e4:	b.n	528c <ExFatFile::write(void const*, unsigned int)+0x120>
    53e6:	nop
    53e8:	.word	0x20006404

000053ec <FatFormatter::initFatDir(unsigned char, unsigned long)>:
    writeMsg("Format Failed\r\n");
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool FatFormatter::initFatDir(uint8_t fatType, uint32_t sectorCount) {
    53ec:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    53f0:	mov	r5, r0
    53f2:	mov	r9, r1
    53f4:	mov	r7, r2
  size_t n;
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
    53f6:	movs	r1, #0
    53f8:	mov.w	r2, #512	; 0x200
    53fc:	ldr	r0, [r0, #36]	; 0x24
    53fe:	bl	e074 <memset>
  writeMsg("Writing FAT ");
    5402:	ldr	r0, [r5, #32]
    5404:	cmp	r0, #0
    5406:	beq.n	54ac <FatFormatter::initFatDir(unsigned char, unsigned long)+0xc0>
    5408:	ldr	r3, [r0, #0]
    540a:	movs	r2, #12
    540c:	ldr	r1, [pc, #164]	; (54b4 <FatFormatter::initFatDir(unsigned char, unsigned long)+0xc8>)
    540e:	ldr	r3, [r3, #4]
    5410:	blx	r3
  for (uint32_t i = 1; i < sectorCount; i++) {
    5412:	cmp	r7, #1
    5414:	bls.n	5458 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x6c>
    if (!m_dev->writeSector(m_fatStart + i, m_secBuf)) {
      return false;
    }
    if ((i % (sectorCount / 32)) == 0) {
    5416:	lsrs	r6, r7, #5
    5418:	movs	r4, #1
    541a:	ldr.w	r8, [pc, #160]	; 54bc <FatFormatter::initFatDir(unsigned char, unsigned long)+0xd0>
    541e:	b.n	5440 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x54>
    5420:	udiv	r3, r4, r6
    5424:	mls	r3, r6, r3, r4
  for (uint32_t i = 1; i < sectorCount; i++) {
    5428:	adds	r4, #1
    if ((i % (sectorCount / 32)) == 0) {
    542a:	cbnz	r3, 543c <FatFormatter::initFatDir(unsigned char, unsigned long)+0x50>
      writeMsg(".");
    542c:	ldr	r3, [r5, #32]
    542e:	movs	r2, #1
    5430:	mov	r1, r8
    5432:	mov	r0, r3
    5434:	cbz	r3, 543c <FatFormatter::initFatDir(unsigned char, unsigned long)+0x50>
    5436:	ldr	r3, [r3, #0]
    5438:	ldr	r3, [r3, #4]
    543a:	blx	r3
  for (uint32_t i = 1; i < sectorCount; i++) {
    543c:	cmp	r7, r4
    543e:	bls.n	5458 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x6c>
    if (!m_dev->writeSector(m_fatStart + i, m_secBuf)) {
    5440:	ldr	r0, [r5, #28]
    5442:	ldr	r1, [r5, #12]
    5444:	ldr	r3, [r0, #0]
    5446:	ldr	r2, [r5, #36]	; 0x24
    5448:	add	r1, r4
    544a:	ldr	r3, [r3, #32]
    544c:	blx	r3
    544e:	cmp	r0, #0
    5450:	bne.n	5420 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x34>
  for (size_t i = 1; i < n; i++) {
    m_secBuf[i] = 0XFF;
  }
  return m_dev->writeSector(m_fatStart, m_secBuf) &&
         m_dev->writeSector(m_fatStart + m_fatSize, m_secBuf);
}
    5452:	movs	r0, #0
    5454:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  writeMsg("\r\n");
    5458:	ldr	r0, [r5, #32]
    545a:	cbz	r0, 5466 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x7a>
    545c:	ldr	r3, [r0, #0]
    545e:	movs	r2, #2
    5460:	ldr	r1, [pc, #84]	; (54b8 <FatFormatter::initFatDir(unsigned char, unsigned long)+0xcc>)
    5462:	ldr	r3, [r3, #4]
    5464:	blx	r3
  n = fatType == 16 ? 4 : 12;
    5466:	cmp.w	r9, #16
  m_secBuf[0] = 0XF8;
    546a:	mov.w	r1, #248	; 0xf8
    546e:	ldr	r2, [r5, #36]	; 0x24
  for (size_t i = 1; i < n; i++) {
    5470:	mov.w	r3, #1
  n = fatType == 16 ? 4 : 12;
    5474:	ite	eq
    5476:	moveq	r0, #4
    5478:	movne	r0, #12
  m_secBuf[0] = 0XF8;
    547a:	strb	r1, [r2, #0]
    m_secBuf[i] = 0XFF;
    547c:	movs	r1, #255	; 0xff
    547e:	ldr	r2, [r5, #36]	; 0x24
    5480:	strb	r1, [r2, r3]
  for (size_t i = 1; i < n; i++) {
    5482:	adds	r3, #1
    5484:	cmp	r0, r3
    5486:	bne.n	547e <FatFormatter::initFatDir(unsigned char, unsigned long)+0x92>
  return m_dev->writeSector(m_fatStart, m_secBuf) &&
    5488:	ldr	r0, [r5, #28]
    548a:	ldr	r2, [r5, #36]	; 0x24
    548c:	ldr	r3, [r0, #0]
    548e:	ldr	r1, [r5, #12]
    5490:	ldr	r3, [r3, #32]
    5492:	blx	r3
    5494:	cmp	r0, #0
    5496:	beq.n	5452 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x66>
         m_dev->writeSector(m_fatStart + m_fatSize, m_secBuf);
    5498:	ldr	r0, [r5, #28]
    549a:	ldr	r2, [r5, #36]	; 0x24
    549c:	ldrd	r3, r1, [r5, #8]
}
    54a0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
         m_dev->writeSector(m_fatStart + m_fatSize, m_secBuf);
    54a4:	add	r1, r3
    54a6:	ldr	r3, [r0, #0]
    54a8:	ldr	r3, [r3, #32]
    54aa:	bx	r3
  for (uint32_t i = 1; i < sectorCount; i++) {
    54ac:	cmp	r7, #1
    54ae:	bhi.n	5416 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x2a>
    54b0:	b.n	5466 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x7a>
    54b2:	nop
    54b4:	.word	0x200007e0
    54b8:	.word	0x20000808
    54bc:	.word	0x200007f0

000054c0 <FatFormatter::initPbs()>:
//------------------------------------------------------------------------------
void FatFormatter::initPbs() {
    54c0:	push	{r3, r4, r5, lr}
  PbsFat_t* pbs = reinterpret_cast<PbsFat_t*>(m_secBuf);
    54c2:	ldr	r3, [r0, #36]	; 0x24
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
    54c4:	mov.w	r5, #512	; 0x200
void FatFormatter::initPbs() {
    54c8:	mov	r4, r0
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
    54ca:	movs	r1, #0
    54cc:	mov	r2, r5
    54ce:	mov	r0, r3
    54d0:	bl	e074 <memset>
  pbs->jmpInstruction[0] = 0XEB;
  pbs->jmpInstruction[1] = 0X76;
  pbs->jmpInstruction[2] = 0X90;
  for (uint8_t i = 0; i < sizeof(pbs->oemName); i++) {
    pbs->oemName[i] = ' ';
    54d4:	mov.w	r1, #538976288	; 0x20202020
  pbs->jmpInstruction[0] = 0XEB;
    54d8:	movs	r2, #235	; 0xeb
  *reinterpret_cast<uint16_t*>(dst) = src;
    54da:	strh.w	r5, [r0, #11]
    pbs->oemName[i] = ' ';
    54de:	str.w	r1, [r0, #3]
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
    54e2:	mov	r3, r0
    pbs->oemName[i] = ' ';
    54e4:	str.w	r1, [r0, #7]
  pbs->jmpInstruction[2] = 0X90;
    54e8:	movs	r1, #144	; 0x90
  pbs->jmpInstruction[0] = 0XEB;
    54ea:	strb	r2, [r0, #0]
  pbs->jmpInstruction[1] = 0X76;
    54ec:	movs	r0, #118	; 0x76
  pbs->jmpInstruction[2] = 0X90;
    54ee:	strb	r1, [r3, #2]
  }
  setLe16(pbs->bpb.bpb16.bytesPerSector, BYTES_PER_SECTOR);
  pbs->bpb.bpb16.sectorsPerCluster = m_sectorsPerCluster;
  setLe16(pbs->bpb.bpb16.reservedSectorCount, m_reservedSectorCount);
  pbs->bpb.bpb16.fatCount = 2;
    54f0:	movs	r2, #2
  pbs->jmpInstruction[1] = 0X76;
    54f2:	strb	r0, [r3, #1]
  pbs->bpb.bpb16.sectorsPerCluster = m_sectorsPerCluster;
    54f4:	ldrb.w	r1, [r4, #43]	; 0x2b
    54f8:	strb	r1, [r3, #13]
    54fa:	movw	r1, #43605	; 0xaa55
  setLe16(pbs->bpb.bpb16.reservedSectorCount, m_reservedSectorCount);
    54fe:	ldrh	r0, [r4, #40]	; 0x28
  pbs->bpb.bpb16.fatCount = 2;
    5500:	strb	r2, [r3, #16]
  // skip rootDirEntryCount
  // skip totalSectors16
  pbs->bpb.bpb16.mediaType = 0XF8;
    5502:	movs	r2, #248	; 0xf8
    5504:	strh	r0, [r3, #14]
    5506:	strb	r2, [r3, #21]
  // skip sectorsPerFat16
  // skip sectorsPerTrack
  // skip headCount
  setLe32(pbs->bpb.bpb16.hidddenSectors, m_relativeSectors);
    5508:	ldr	r2, [r4, #16]
  *reinterpret_cast<uint32_t*>(dst) = src;
    550a:	str	r2, [r3, #28]
  setLe32(pbs->bpb.bpb16.totalSectors32, m_totalSectors);
    550c:	ldr	r2, [r4, #24]
  *reinterpret_cast<uint16_t*>(dst) = src;
    550e:	strh.w	r1, [r3, #510]	; 0x1fe
  *reinterpret_cast<uint32_t*>(dst) = src;
    5512:	str	r2, [r3, #32]
  // skip rest of bpb
  setLe16(pbs->signature, PBR_SIGNATURE);
}
    5514:	pop	{r3, r4, r5, pc}
    5516:	nop

00005518 <FatFormatter::writeMbr()>:
    return false;
  }
  return initFatDir(32, 2 * m_fatSize + m_sectorsPerCluster);
}
//------------------------------------------------------------------------------
bool FatFormatter::writeMbr() {
    5518:	push	{r4, r5, r6, lr}
    551a:	mov	r4, r0
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
    551c:	mov.w	r2, #512	; 0x200
    5520:	movs	r1, #0
    5522:	ldr	r0, [r0, #36]	; 0x24
    5524:	bl	e074 <memset>
  MbrSector_t* mbr = reinterpret_cast<MbrSector_t*>(m_secBuf);
    5528:	ldr	r5, [r4, #36]	; 0x24

#if USE_LBA_TO_CHS
  lbaToMbrChs(mbr->part->beginCHS, m_capacityMB, m_relativeSectors);
    552a:	ldr	r2, [r4, #16]
    552c:	ldr	r1, [r4, #0]
    552e:	addw	r0, r5, #447	; 0x1bf
    5532:	bl	30e4 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)>
  lbaToMbrChs(mbr->part->endCHS, m_capacityMB,
              m_relativeSectors + m_totalSectors - 1);
    5536:	ldr	r3, [r4, #24]
    5538:	ldr	r2, [r4, #16]
  lbaToMbrChs(mbr->part->endCHS, m_capacityMB,
    553a:	addw	r0, r5, #451	; 0x1c3
    553e:	ldr	r1, [r4, #0]
              m_relativeSectors + m_totalSectors - 1);
    5540:	add	r2, r3
  lbaToMbrChs(mbr->part->endCHS, m_capacityMB,
    5542:	subs	r2, #1
    5544:	bl	30e4 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)>
  mbr->part->endCHS[0] = 0XFE;
  mbr->part->endCHS[1] = 0XFF;
  mbr->part->endCHS[2] = 0XFF;
#endif  // USE_LBA_TO_CHS

  mbr->part->type = m_partType;
    5548:	ldrb.w	r2, [r4, #42]	; 0x2a
  *reinterpret_cast<uint16_t*>(dst) = src;
    554c:	movw	r3, #43605	; 0xaa55
    5550:	strb.w	r2, [r5, #450]	; 0x1c2
  setLe32(mbr->part->relativeSectors, m_relativeSectors);
    5554:	ldr	r2, [r4, #16]
  setLe32(mbr->part->totalSectors, m_totalSectors);
  setLe16(mbr->signature, MBR_SIGNATURE);
  return m_dev->writeSector(0, m_secBuf);
    5556:	ldr	r0, [r4, #28]
  *reinterpret_cast<uint32_t*>(dst) = src;
    5558:	str.w	r2, [r5, #454]	; 0x1c6
    555c:	ldr	r2, [r4, #36]	; 0x24
  setLe32(mbr->part->totalSectors, m_totalSectors);
    555e:	ldr	r1, [r4, #24]
  *reinterpret_cast<uint16_t*>(dst) = src;
    5560:	strh.w	r3, [r5, #510]	; 0x1fe
  return m_dev->writeSector(0, m_secBuf);
    5564:	ldr	r3, [r0, #0]
  *reinterpret_cast<uint32_t*>(dst) = src;
    5566:	str.w	r1, [r5, #458]	; 0x1ca
    556a:	movs	r1, #0
    556c:	ldr	r3, [r3, #32]
}
    556e:	ldmia.w	sp!, {r4, r5, r6, lr}
  return m_dev->writeSector(0, m_secBuf);
    5572:	bx	r3

00005574 <FatFormatter::makeFat16()>:
bool FatFormatter::makeFat16() {
    5574:	push	{r4, r5, r6, lr}
    nc = (m_sectorCount - m_dataStart) / m_sectorsPerCluster;
    5576:	ldr	r6, [r0, #20]
  for (m_dataStart = 2 * BU16;; m_dataStart += BU16) {
    5578:	mov.w	r3, #256	; 0x100
    nc = (m_sectorCount - m_dataStart) / m_sectorsPerCluster;
    557c:	ldrb.w	lr, [r0, #43]	; 0x2b
bool FatFormatter::makeFat16() {
    5580:	mov	r4, r0
    nc = (m_sectorCount - m_dataStart) / m_sectorsPerCluster;
    5582:	sub.w	r2, r6, #256	; 0x100
  PbsFat_t* pbs = reinterpret_cast<PbsFat_t*>(m_secBuf);
    5586:	ldr	r5, [r0, #36]	; 0x24
  for (m_dataStart = 2 * BU16;; m_dataStart += BU16) {
    5588:	str	r3, [r0, #4]
    nc = (m_sectorCount - m_dataStart) / m_sectorsPerCluster;
    558a:	udiv	r2, r2, lr
    m_fatSize = (nc + 2 + (BYTES_PER_SECTOR / 2) - 1) / (BYTES_PER_SECTOR / 2);
    558e:	addw	ip, r2, #257	; 0x101
    5592:	mov.w	r1, ip, lsr #8
    uint32_t r = BU16 + 1 + 2 * m_fatSize + FAT16_ROOT_SECTOR_COUNT;
    5596:	mov.w	ip, r1, lsl #1
    m_fatSize = (nc + 2 + (BYTES_PER_SECTOR / 2) - 1) / (BYTES_PER_SECTOR / 2);
    559a:	str	r1, [r0, #8]
    uint32_t r = BU16 + 1 + 2 * m_fatSize + FAT16_ROOT_SECTOR_COUNT;
    559c:	add.w	r0, ip, #161	; 0xa1
    if (m_dataStart >= r) {
    55a0:	cmp	r0, r3
    55a2:	bls.n	55c2 <FatFormatter::makeFat16()+0x4e>
  for (m_dataStart = 2 * BU16;; m_dataStart += BU16) {
    55a4:	adds	r3, #128	; 0x80
    nc = (m_sectorCount - m_dataStart) / m_sectorsPerCluster;
    55a6:	subs	r2, r6, r3
    55a8:	udiv	r2, r2, lr
    m_fatSize = (nc + 2 + (BYTES_PER_SECTOR / 2) - 1) / (BYTES_PER_SECTOR / 2);
    55ac:	addw	r1, r2, #257	; 0x101
    55b0:	lsrs	r1, r1, #8
    uint32_t r = BU16 + 1 + 2 * m_fatSize + FAT16_ROOT_SECTOR_COUNT;
    55b2:	mov.w	ip, r1, lsl #1
    55b6:	add.w	r0, ip, #161	; 0xa1
    if (m_dataStart >= r) {
    55ba:	cmp	r3, r0
    55bc:	bcc.n	55a4 <FatFormatter::makeFat16()+0x30>
    55be:	strd	r3, r1, [r4, #4]
      m_relativeSectors = m_dataStart - r + BU16;
    55c2:	subs	r3, r3, r0
  if (nc < 4085 || nc >= 65525) {
    55c4:	subw	r1, r2, #4085	; 0xff5
      m_relativeSectors = m_dataStart - r + BU16;
    55c8:	add.w	r0, r3, #128	; 0x80
  if (nc < 4085 || nc >= 65525) {
    55cc:	cmp.w	r1, #61440	; 0xf000
      m_relativeSectors = m_dataStart - r + BU16;
    55d0:	str	r0, [r4, #16]
  if (nc < 4085 || nc >= 65525) {
    55d2:	bcs.n	5674 <FatFormatter::makeFat16()+0x100>
      nc * m_sectorsPerCluster + 2 * m_fatSize + m_reservedSectorCount + 32;
    55d4:	add.w	ip, ip, #33	; 0x21
  m_fatStart = m_relativeSectors + m_reservedSectorCount;
    55d8:	adds	r3, #129	; 0x81
  if (!writeMbr()) {
    55da:	mov	r0, r4
      nc * m_sectorsPerCluster + 2 * m_fatSize + m_reservedSectorCount + 32;
    55dc:	mla	r2, r2, lr, ip
  m_fatStart = m_relativeSectors + m_reservedSectorCount;
    55e0:	str	r3, [r4, #12]
    m_partType = 0X06;
    55e2:	cmp.w	r2, #65536	; 0x10000
  m_totalSectors =
    55e6:	str	r2, [r4, #24]
    m_partType = 0X06;
    55e8:	ite	cc
    55ea:	movcc	r3, #4
    55ec:	movcs	r3, #6
    55ee:	strb.w	r3, [r4, #42]	; 0x2a
  m_reservedSectorCount = 1;
    55f2:	movs	r3, #1
    55f4:	strh	r3, [r4, #40]	; 0x28
  if (!writeMbr()) {
    55f6:	bl	5518 <FatFormatter::writeMbr()>
    55fa:	cbnz	r0, 5600 <FatFormatter::makeFat16()+0x8c>
}
    55fc:	movs	r0, #0
    55fe:	pop	{r4, r5, r6, pc}
  initPbs();
    5600:	mov	r0, r4
    5602:	bl	54c0 <FatFormatter::initPbs()>
  pbs->bpb.bpb16.extSignature = EXTENDED_BOOT_SIGNATURE;
    5606:	movs	r2, #41	; 0x29
  setLe16(pbs->bpb.bpb16.sectorsPerFat16, m_fatSize);
    5608:	ldr	r1, [r4, #8]
    pbs->bpb.bpb16.volumeLabel[i] = ' ';
    560a:	mov.w	r3, #538976288	; 0x20202020
  pbs->bpb.bpb16.extSignature = EXTENDED_BOOT_SIGNATURE;
    560e:	strb.w	r2, [r5, #38]	; 0x26
  pbs->bpb.bpb16.volumeType[0] = 'F';
    5612:	movs	r2, #70	; 0x46
    pbs->bpb.bpb16.volumeLabel[i] = ' ';
    5614:	str.w	r3, [r5, #47]	; 0x2f
  pbs->bpb.bpb16.physicalDriveNumber = 0X80;
    5618:	movs	r0, #128	; 0x80
  pbs->bpb.bpb16.volumeType[0] = 'F';
    561a:	strb.w	r2, [r5, #54]	; 0x36
  pbs->bpb.bpb16.volumeType[2] = 'T';
    561e:	movs	r2, #84	; 0x54
    pbs->bpb.bpb16.volumeLabel[i] = ' ';
    5620:	str.w	r3, [r5, #43]	; 0x2b
    5624:	str.w	r3, [r5, #50]	; 0x32
  pbs->bpb.bpb16.volumeType[3] = '1';
    5628:	movs	r3, #49	; 0x31
  pbs->bpb.bpb16.volumeType[2] = 'T';
    562a:	strb.w	r2, [r5, #56]	; 0x38
  pbs->bpb.bpb16.volumeType[4] = '6';
    562e:	movs	r2, #54	; 0x36
  setLe16(pbs->bpb.bpb16.sectorsPerFat16, m_fatSize);
    5630:	strh	r1, [r5, #22]
  pbs->bpb.bpb16.volumeType[1] = 'A';
    5632:	movs	r1, #65	; 0x41
  pbs->bpb.bpb16.volumeType[3] = '1';
    5634:	strb.w	r3, [r5, #57]	; 0x39
  pbs->bpb.bpb16.volumeType[1] = 'A';
    5638:	strb.w	r1, [r5, #55]	; 0x37
  *reinterpret_cast<uint16_t*>(dst) = src;
    563c:	mov.w	r1, #512	; 0x200
  pbs->bpb.bpb16.physicalDriveNumber = 0X80;
    5640:	strb.w	r0, [r5, #36]	; 0x24
  pbs->bpb.bpb16.volumeType[4] = '6';
    5644:	strb.w	r2, [r5, #58]	; 0x3a
  *reinterpret_cast<uint32_t*>(dst) = src;
    5648:	ldr	r3, [pc, #60]	; (5688 <FatFormatter::makeFat16()+0x114>)
  if (!m_dev->writeSector(m_relativeSectors, m_secBuf)) {
    564a:	ldr	r0, [r4, #28]
    564c:	str.w	r3, [r5, #39]	; 0x27
    5650:	ldr	r3, [r0, #0]
  *reinterpret_cast<uint16_t*>(dst) = src;
    5652:	strh.w	r1, [r5, #17]
    5656:	ldr	r2, [r4, #36]	; 0x24
    5658:	ldr	r1, [r4, #16]
    565a:	ldr	r3, [r3, #32]
    565c:	blx	r3
    565e:	cmp	r0, #0
    5660:	beq.n	55fc <FatFormatter::makeFat16()+0x88>
  return initFatDir(16, m_dataStart - m_fatStart);
    5662:	ldr	r2, [r4, #4]
    5664:	mov	r0, r4
    5666:	ldr	r3, [r4, #12]
    5668:	movs	r1, #16
    566a:	subs	r2, r2, r3
}
    566c:	ldmia.w	sp!, {r4, r5, r6, lr}
  return initFatDir(16, m_dataStart - m_fatStart);
    5670:	b.w	53ec <FatFormatter::initFatDir(unsigned char, unsigned long)>
    writeMsg("Bad cluster count\r\n");
    5674:	ldr	r0, [r4, #32]
    5676:	cmp	r0, #0
    5678:	beq.n	55fc <FatFormatter::makeFat16()+0x88>
    567a:	ldr	r3, [r0, #0]
    567c:	movs	r2, #19
    567e:	ldr	r1, [pc, #12]	; (568c <FatFormatter::makeFat16()+0x118>)
    5680:	ldr	r3, [r3, #4]
    5682:	blx	r3
}
    5684:	movs	r0, #0
    5686:	pop	{r4, r5, r6, pc}
    5688:	.word	0x0012d687
    568c:	.word	0x200007b4

00005690 <FatFormatter::makeFat32()>:
bool FatFormatter::makeFat32() {
    5690:	push	{r3, r4, r5, r6, r7, lr}
    nc = (m_sectorCount - m_dataStart) / m_sectorsPerCluster;
    5692:	ldr	r6, [r0, #20]
  m_relativeSectors = BU32;
    5694:	mov.w	r3, #8192	; 0x2000
    nc = (m_sectorCount - m_dataStart) / m_sectorsPerCluster;
    5698:	ldrb.w	ip, [r0, #43]	; 0x2b
  for (m_dataStart = 2 * BU32;; m_dataStart += BU32) {
    569c:	mov.w	r2, #16384	; 0x4000
    nc = (m_sectorCount - m_dataStart) / m_sectorsPerCluster;
    56a0:	sub.w	r1, r6, #16384	; 0x4000
  m_relativeSectors = BU32;
    56a4:	str	r3, [r0, #16]
    uint32_t r = m_relativeSectors + 9 + 2 * m_fatSize;
    56a6:	movw	lr, #8201	; 0x2009
bool FatFormatter::makeFat32() {
    56aa:	mov	r4, r0
  PbsFat_t* pbs = reinterpret_cast<PbsFat_t*>(m_secBuf);
    56ac:	ldr	r5, [r0, #36]	; 0x24
  for (m_dataStart = 2 * BU32;; m_dataStart += BU32) {
    56ae:	str	r2, [r0, #4]
    nc = (m_sectorCount - m_dataStart) / m_sectorsPerCluster;
    56b0:	udiv	r1, r1, ip
    m_fatSize = (nc + 2 + (BYTES_PER_SECTOR / 4) - 1) / (BYTES_PER_SECTOR / 4);
    56b4:	add.w	r3, r1, #129	; 0x81
    56b8:	lsrs	r3, r3, #7
    56ba:	str	r3, [r0, #8]
    uint32_t r = m_relativeSectors + 9 + 2 * m_fatSize;
    56bc:	add.w	r0, lr, r3, lsl #1
    if (m_dataStart >= r) {
    56c0:	cmp	r0, r2
    56c2:	bls.w	5832 <FatFormatter::makeFat32()+0x1a2>
  for (m_dataStart = 2 * BU32;; m_dataStart += BU32) {
    56c6:	add.w	r2, r2, #8192	; 0x2000
    nc = (m_sectorCount - m_dataStart) / m_sectorsPerCluster;
    56ca:	subs	r1, r6, r2
    56cc:	udiv	r1, r1, ip
    m_fatSize = (nc + 2 + (BYTES_PER_SECTOR / 4) - 1) / (BYTES_PER_SECTOR / 4);
    56d0:	add.w	r3, r1, #129	; 0x81
    56d4:	lsrs	r3, r3, #7
    uint32_t r = m_relativeSectors + 9 + 2 * m_fatSize;
    56d6:	add.w	r0, lr, r3, lsl #1
    56da:	lsls	r7, r3, #1
    if (m_dataStart >= r) {
    56dc:	cmp	r2, r0
    56de:	bcc.n	56c6 <FatFormatter::makeFat32()+0x36>
    56e0:	strd	r2, r3, [r4, #4]
  if (nc < 65525) {
    56e4:	movw	r3, #65524	; 0xfff4
    56e8:	cmp	r1, r3
    56ea:	bls.w	581c <FatFormatter::makeFat32()+0x18c>
  m_totalSectors = nc * m_sectorsPerCluster + m_dataStart - m_relativeSectors;
    56ee:	mla	ip, r1, ip, r2
  m_reservedSectorCount = m_dataStart - m_relativeSectors - 2 * m_fatSize;
    56f2:	sub.w	r2, r2, #8192	; 0x2000
  if (!writeMbr()) {
    56f6:	mov	r0, r4
  m_reservedSectorCount = m_dataStart - m_relativeSectors - 2 * m_fatSize;
    56f8:	subs	r2, r2, r7
    56fa:	uxth	r2, r2
  m_fatStart = m_relativeSectors + m_reservedSectorCount;
    56fc:	add.w	r3, r2, #8192	; 0x2000
  m_reservedSectorCount = m_dataStart - m_relativeSectors - 2 * m_fatSize;
    5700:	strh	r2, [r4, #40]	; 0x28
  if ((m_relativeSectors + m_totalSectors) <= 16450560) {
    5702:	ldr	r2, [pc, #308]	; (5838 <FatFormatter::makeFat32()+0x1a8>)
  m_fatStart = m_relativeSectors + m_reservedSectorCount;
    5704:	str	r3, [r4, #12]
  m_totalSectors = nc * m_sectorsPerCluster + m_dataStart - m_relativeSectors;
    5706:	sub.w	r3, ip, #8192	; 0x2000
    m_partType = 0X0C;
    570a:	cmp	ip, r2
    570c:	ite	ls
    570e:	movls.w	ip, #11
    5712:	movhi.w	ip, #12
  m_totalSectors = nc * m_sectorsPerCluster + m_dataStart - m_relativeSectors;
    5716:	str	r3, [r4, #24]
  if ((m_relativeSectors + m_totalSectors) <= 16450560) {
    5718:	strb.w	ip, [r4, #42]	; 0x2a
  if (!writeMbr()) {
    571c:	bl	5518 <FatFormatter::writeMbr()>
    5720:	cbnz	r0, 5726 <FatFormatter::makeFat32()+0x96>
}
    5722:	movs	r0, #0
    5724:	pop	{r3, r4, r5, r6, r7, pc}
  initPbs();
    5726:	mov	r0, r4
    5728:	bl	54c0 <FatFormatter::initPbs()>
  setLe32(pbs->bpb.bpb32.sectorsPerFat32, m_fatSize);
    572c:	ldr	r1, [r4, #8]
  pbs->bpb.bpb32.extSignature = EXTENDED_BOOT_SIGNATURE;
    572e:	movs	r2, #41	; 0x29
    pbs->bpb.bpb32.volumeLabel[i] = ' ';
    5730:	mov.w	r3, #538976288	; 0x20202020
  pbs->bpb.bpb32.physicalDriveNumber = 0X80;
    5734:	movs	r0, #128	; 0x80
  *reinterpret_cast<uint32_t*>(dst) = src;
    5736:	str	r1, [r5, #36]	; 0x24
  pbs->bpb.bpb32.extSignature = EXTENDED_BOOT_SIGNATURE;
    5738:	strb.w	r2, [r5, #66]	; 0x42
  pbs->bpb.bpb32.volumeType[2] = 'T';
    573c:	movs	r1, #84	; 0x54
  pbs->bpb.bpb32.volumeType[0] = 'F';
    573e:	movs	r2, #70	; 0x46
    pbs->bpb.bpb32.volumeLabel[i] = ' ';
    5740:	str.w	r3, [r5, #75]	; 0x4b
  pbs->bpb.bpb32.physicalDriveNumber = 0X80;
    5744:	strb.w	r0, [r5, #64]	; 0x40
  pbs->bpb.bpb32.volumeType[1] = 'A';
    5748:	movs	r0, #65	; 0x41
    pbs->bpb.bpb32.volumeLabel[i] = ' ';
    574a:	str.w	r3, [r5, #71]	; 0x47
    574e:	str.w	r3, [r5, #78]	; 0x4e
    5752:	movs	r3, #2
  pbs->bpb.bpb32.volumeType[0] = 'F';
    5754:	strb.w	r2, [r5, #82]	; 0x52
  pbs->bpb.bpb32.volumeType[3] = '3';
    5758:	movs	r2, #51	; 0x33
  pbs->bpb.bpb32.volumeType[2] = 'T';
    575a:	strb.w	r1, [r5, #84]	; 0x54
  pbs->bpb.bpb32.volumeType[4] = '2';
    575e:	movs	r1, #50	; 0x32
  pbs->bpb.bpb32.volumeType[3] = '3';
    5760:	strb.w	r2, [r5, #85]	; 0x55
  pbs->bpb.bpb32.volumeType[1] = 'A';
    5764:	strb.w	r0, [r5, #83]	; 0x53
  pbs->bpb.bpb32.volumeType[4] = '2';
    5768:	strb.w	r1, [r5, #86]	; 0x56
    576c:	str	r3, [r5, #44]	; 0x2c
  if (!m_dev->writeSector(m_relativeSectors, m_secBuf) ||
    576e:	ldr	r0, [r4, #28]
  *reinterpret_cast<uint16_t*>(dst) = src;
    5770:	ldr	r3, [pc, #200]	; (583c <FatFormatter::makeFat32()+0x1ac>)
  *reinterpret_cast<uint32_t*>(dst) = src;
    5772:	ldr	r2, [pc, #204]	; (5840 <FatFormatter::makeFat32()+0x1b0>)
  *reinterpret_cast<uint16_t*>(dst) = src;
    5774:	str	r3, [r5, #48]	; 0x30
    5776:	ldr	r3, [r0, #0]
  *reinterpret_cast<uint32_t*>(dst) = src;
    5778:	str.w	r2, [r5, #67]	; 0x43
    577c:	ldr	r3, [r3, #32]
    577e:	ldr	r2, [r4, #36]	; 0x24
    5780:	ldr	r1, [r4, #16]
    5782:	blx	r3
    5784:	cmp	r0, #0
    5786:	beq.n	5722 <FatFormatter::makeFat32()+0x92>
      !m_dev->writeSector(m_relativeSectors + 6, m_secBuf)) {
    5788:	ldr	r0, [r4, #28]
    578a:	ldr	r1, [r4, #16]
    578c:	ldr	r3, [r0, #0]
    578e:	adds	r1, #6
    5790:	ldr	r2, [r4, #36]	; 0x24
    5792:	ldr	r3, [r3, #32]
    5794:	blx	r3
  if (!m_dev->writeSector(m_relativeSectors, m_secBuf) ||
    5796:	cmp	r0, #0
    5798:	beq.n	5722 <FatFormatter::makeFat32()+0x92>
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
    579a:	mov.w	r2, #512	; 0x200
    579e:	movs	r1, #0
    57a0:	ldr	r0, [r4, #36]	; 0x24
    57a2:	bl	e074 <memset>
  if (!m_dev->writeSector(m_relativeSectors + 2, m_secBuf) ||
    57a6:	ldr	r0, [r4, #28]
    57a8:	ldr	r2, [pc, #152]	; (5844 <FatFormatter::makeFat32()+0x1b4>)
    57aa:	ldr	r3, [r0, #0]
    57ac:	str.w	r2, [r5, #508]	; 0x1fc
    57b0:	ldr	r1, [r4, #16]
    57b2:	ldr	r3, [r3, #32]
    57b4:	adds	r1, #2
    57b6:	ldr	r2, [r4, #36]	; 0x24
    57b8:	blx	r3
    57ba:	cmp	r0, #0
    57bc:	beq.n	5722 <FatFormatter::makeFat32()+0x92>
      !m_dev->writeSector(m_relativeSectors + 8, m_secBuf)) {
    57be:	ldr	r0, [r4, #28]
    57c0:	ldr	r1, [r4, #16]
    57c2:	ldr	r3, [r0, #0]
    57c4:	adds	r1, #8
    57c6:	ldr	r2, [r4, #36]	; 0x24
    57c8:	ldr	r3, [r3, #32]
    57ca:	blx	r3
  if (!m_dev->writeSector(m_relativeSectors + 2, m_secBuf) ||
    57cc:	cmp	r0, #0
    57ce:	beq.n	5722 <FatFormatter::makeFat32()+0x92>
    57d0:	mov.w	r3, #4294967295
  if (!m_dev->writeSector(m_relativeSectors + 1, m_secBuf) ||
    57d4:	ldr	r0, [r4, #28]
    57d6:	ldr	r2, [pc, #112]	; (5848 <FatFormatter::makeFat32()+0x1b8>)
    57d8:	strd	r3, r3, [r5, #488]	; 0x1e8
    57dc:	ldr	r3, [pc, #108]	; (584c <FatFormatter::makeFat32()+0x1bc>)
    57de:	str	r2, [r5, #0]
    57e0:	str.w	r3, [r5, #484]	; 0x1e4
    57e4:	ldr	r3, [r0, #0]
    57e6:	ldr	r1, [r4, #16]
    57e8:	ldr	r2, [r4, #36]	; 0x24
    57ea:	ldr	r3, [r3, #32]
    57ec:	adds	r1, #1
    57ee:	blx	r3
    57f0:	cmp	r0, #0
    57f2:	beq.n	5722 <FatFormatter::makeFat32()+0x92>
      !m_dev->writeSector(m_relativeSectors + 7, m_secBuf)) {
    57f4:	ldr	r0, [r4, #28]
    57f6:	ldr	r1, [r4, #16]
    57f8:	ldr	r3, [r0, #0]
    57fa:	ldr	r2, [r4, #36]	; 0x24
    57fc:	adds	r1, #7
    57fe:	ldr	r3, [r3, #32]
    5800:	blx	r3
  if (!m_dev->writeSector(m_relativeSectors + 1, m_secBuf) ||
    5802:	cmp	r0, #0
    5804:	beq.n	5722 <FatFormatter::makeFat32()+0x92>
  return initFatDir(32, 2 * m_fatSize + m_sectorsPerCluster);
    5806:	ldr	r2, [r4, #8]
    5808:	mov	r0, r4
    580a:	ldrb.w	r3, [r4, #43]	; 0x2b
    580e:	movs	r1, #32
    5810:	add.w	r2, r3, r2, lsl #1
}
    5814:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return initFatDir(32, 2 * m_fatSize + m_sectorsPerCluster);
    5818:	b.w	53ec <FatFormatter::initFatDir(unsigned char, unsigned long)>
    writeMsg("Bad cluster count\r\n");
    581c:	ldr	r0, [r4, #32]
    581e:	cmp	r0, #0
    5820:	beq.w	5722 <FatFormatter::makeFat32()+0x92>
    5824:	ldr	r3, [r0, #0]
    5826:	movs	r2, #19
    5828:	ldr	r1, [pc, #36]	; (5850 <FatFormatter::makeFat32()+0x1c0>)
    582a:	ldr	r3, [r3, #4]
    582c:	blx	r3
}
    582e:	movs	r0, #0
    5830:	pop	{r3, r4, r5, r6, r7, pc}
    5832:	lsls	r7, r3, #1
    5834:	b.n	56e4 <FatFormatter::makeFat32()+0x54>
    5836:	nop
    5838:	.word	0x00fb0400
    583c:	.word	0x00060001
    5840:	.word	0x0012d687
    5844:	.word	0xaa550000
    5848:	.word	0x41615252
    584c:	.word	0x61417272
    5850:	.word	0x200007b4

00005854 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)>:
bool FatFormatter::format(FsBlockDevice* dev, uint8_t* secBuf, print_t* pr) {
    5854:	push	{r3, r4, r5, lr}
    5856:	mov	r4, r0
  m_sectorCount = m_dev->sectorCount();
    5858:	ldr	r5, [r1, #0]
  m_dev = dev;
    585a:	str	r1, [r0, #28]
  m_sectorCount = m_dev->sectorCount();
    585c:	mov	r0, r1
  m_secBuf = secBuf;
    585e:	str	r2, [r4, #36]	; 0x24
  m_sectorCount = m_dev->sectorCount();
    5860:	ldr	r2, [r5, #24]
  m_pr = pr;
    5862:	str	r3, [r4, #32]
  m_sectorCount = m_dev->sectorCount();
    5864:	blx	r2
  m_capacityMB = (m_sectorCount + SECTORS_PER_MB - 1) / SECTORS_PER_MB;
    5866:	addw	r3, r0, #2047	; 0x7ff
  m_sectorCount = m_dev->sectorCount();
    586a:	str	r0, [r4, #20]
  m_capacityMB = (m_sectorCount + SECTORS_PER_MB - 1) / SECTORS_PER_MB;
    586c:	lsrs	r3, r3, #11
  if (m_capacityMB <= 6) {
    586e:	cmp	r3, #6
  m_capacityMB = (m_sectorCount + SECTORS_PER_MB - 1) / SECTORS_PER_MB;
    5870:	str	r3, [r4, #0]
  if (m_capacityMB <= 6) {
    5872:	bls.n	58be <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x6a>
  } else if (m_capacityMB <= 16) {
    5874:	cmp	r3, #16
    5876:	bhi.n	58a0 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x4c>
    5878:	movs	r3, #2
  rtn = m_sectorCount < 0X400000 ? makeFat16() : makeFat32();
    587a:	cmp.w	r0, #4194304	; 0x400000
    m_sectorsPerCluster = 2;
    587e:	strb.w	r3, [r4, #43]	; 0x2b
  rtn = m_sectorCount < 0X400000 ? makeFat16() : makeFat32();
    5882:	mov	r0, r4
    5884:	bcs.n	58e4 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x90>
    5886:	bl	5574 <FatFormatter::makeFat16()>
    588a:	mov	r5, r0
    writeMsg("Format Done\r\n");
    588c:	ldr	r0, [r4, #32]
  if (rtn) {
    588e:	cbz	r5, 58d2 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x7e>
    writeMsg("Format Done\r\n");
    5890:	cbz	r0, 589c <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x48>
    5892:	ldr	r3, [r0, #0]
    5894:	movs	r2, #13
    5896:	ldr	r1, [pc, #100]	; (58fc <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xa8>)
    5898:	ldr	r3, [r3, #4]
    589a:	blx	r3
}
    589c:	mov	r0, r5
    589e:	pop	{r3, r4, r5, pc}
  } else if (m_capacityMB <= 32) {
    58a0:	cmp	r3, #32
    58a2:	bls.n	58ec <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x98>
  } else if (m_capacityMB <= 64) {
    58a4:	cmp	r3, #64	; 0x40
    58a6:	bls.n	58f0 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x9c>
  } else if (m_capacityMB <= 128) {
    58a8:	cmp	r3, #128	; 0x80
    58aa:	bls.n	58f4 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xa0>
  } else if (m_capacityMB <= 1024) {
    58ac:	cmp.w	r3, #1024	; 0x400
    58b0:	bls.n	58f8 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xa4>
  } else if (m_capacityMB <= 32768) {
    58b2:	cmp.w	r3, #32768	; 0x8000
    58b6:	ite	hi
    58b8:	movhi	r3, #128	; 0x80
    58ba:	movls	r3, #64	; 0x40
    58bc:	b.n	587a <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x26>
    writeMsg("Card is too small.\r\n");
    58be:	ldr	r0, [r4, #32]
    58c0:	cbz	r0, 58cc <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x78>
    58c2:	ldr	r3, [r0, #0]
    58c4:	movs	r2, #20
    58c6:	ldr	r1, [pc, #56]	; (5900 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xac>)
    58c8:	ldr	r3, [r3, #4]
    58ca:	blx	r3
    return false;
    58cc:	movs	r5, #0
}
    58ce:	mov	r0, r5
    58d0:	pop	{r3, r4, r5, pc}
    writeMsg("Format Failed\r\n");
    58d2:	cmp	r0, #0
    58d4:	beq.n	58cc <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x78>
    58d6:	ldr	r3, [r0, #0]
    58d8:	movs	r2, #15
    58da:	ldr	r1, [pc, #40]	; (5904 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xb0>)
    58dc:	ldr	r3, [r3, #4]
    58de:	blx	r3
}
    58e0:	mov	r0, r5
    58e2:	pop	{r3, r4, r5, pc}
  rtn = m_sectorCount < 0X400000 ? makeFat16() : makeFat32();
    58e4:	bl	5690 <FatFormatter::makeFat32()>
    58e8:	mov	r5, r0
    58ea:	b.n	588c <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x38>
    58ec:	movs	r3, #4
    58ee:	b.n	587a <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x26>
    58f0:	movs	r3, #8
    58f2:	b.n	587a <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x26>
    58f4:	movs	r3, #16
    58f6:	b.n	587a <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x26>
    58f8:	movs	r3, #32
    58fa:	b.n	587a <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x26>
    58fc:	.word	0x20000794
    5900:	.word	0x2000077c
    5904:	.word	0x200007a4

00005908 <FatFile::getLfnChar(DirLfn_t*, unsigned char)>:
#include "../common/DebugMacros.h"
#include "../common/FsUtf.h"
#include "FatLib.h"
//------------------------------------------------------------------------------
uint16_t FatFile::getLfnChar(DirLfn_t* ldir, uint8_t i) {
  if (i < 5) {
    5908:	cmp	r2, #4
    590a:	bhi.n	5916 <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0xe>
  return *reinterpret_cast<const uint16_t*>(src);
    590c:	add.w	r2, r1, r2, lsl #1
    5910:	ldrh.w	r0, [r2, #1]
    return getLe16(ldir->unicode1 + 2 * i);
    5914:	bx	lr
  } else if (i < 11) {
    5916:	cmp	r2, #10
    5918:	bhi.n	5922 <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0x1a>
    591a:	add.w	r2, r1, r2, lsl #1
    591e:	ldrh	r0, [r2, #4]
    return getLe16(ldir->unicode2 + 2 * (i - 5));
    5920:	bx	lr
  } else if (i < 13) {
    5922:	cmp	r2, #12
    5924:	bhi.n	592e <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0x26>
    5926:	add.w	r1, r1, r2, lsl #1
    592a:	ldrh	r0, [r1, #6]
    return getLe16(ldir->unicode3 + 2 * (i - 11));
    592c:	bx	lr
  }
  DBG_HALT_IF(i >= 13);
  return 0;
    592e:	movs	r0, #0
}
    5930:	bx	lr
    5932:	nop

00005934 <FatFile::getSFN(char*, unsigned int)>:
fail:
  *name = 0;
  return 0;
}
//------------------------------------------------------------------------------
size_t FatFile::getSFN(char* name, size_t size) {
    5934:	push	{r3, r4, r5, r6, r7, lr}
  bool isOpen() const { return m_attributes; }
    5936:	ldrb	r4, [r0, #0]
    5938:	mov	r6, r1
  char c;
  uint8_t j = 0;
  uint8_t lcBit = FAT_CASE_LC_BASE;
  uint8_t* ptr;
  DirFat_t* dir;
  if (!isOpen()) {
    593a:	cbz	r4, 595c <FatFile::getSFN(char*, unsigned int)+0x28>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isRoot()) {
    593c:	ands.w	r4, r4, #192	; 0xc0
    5940:	mov	r7, r2
    5942:	beq.n	5954 <FatFile::getSFN(char*, unsigned int)+0x20>
    if (size < 2) {
    5944:	cmp	r2, #1
    5946:	bls.n	595c <FatFile::getSFN(char*, unsigned int)+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    name[0] = '/';
    5948:	movs	r2, #47	; 0x2f
    name[1] = '\0';
    594a:	movs	r3, #0
    return 1;
    594c:	movs	r0, #1
    name[0] = '/';
    594e:	strb	r2, [r1, #0]
    name[1] = '\0';
    5950:	strb	r3, [r1, #1]
  return j;

fail:
  name[0] = '\0';
  return 0;
}
    5952:	pop	{r3, r4, r5, r6, r7, pc}
  dir = cacheDirEntry(FsCache::CACHE_FOR_READ);
    5954:	mov	r1, r4
    5956:	bl	5c18 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    595a:	cbnz	r0, 5964 <FatFile::getSFN(char*, unsigned int)+0x30>
  name[0] = '\0';
    595c:	movs	r3, #0
  return 0;
    595e:	mov	r0, r3
  name[0] = '\0';
    5960:	strb	r3, [r6, #0]
}
    5962:	pop	{r3, r4, r5, r6, r7, pc}
  ptr = dir->name;
    5964:	mov	r3, r0
    5966:	mov	ip, r4
  uint8_t lcBit = FAT_CASE_LC_BASE;
    5968:	movs	r1, #8
    596a:	b.n	5990 <FatFile::getSFN(char*, unsigned int)+0x5c>
      if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
    596c:	ldrb	r2, [r0, #12]
    596e:	tst	r1, r2
    5970:	beq.n	597a <FatFile::getSFN(char*, unsigned int)+0x46>
        c += 'a' - 'A';
    5972:	add.w	lr, lr, #32
    5976:	uxtb.w	lr, lr
    if ((j + 1u) >= size) {
    597a:	adds	r5, r4, #1
    597c:	cmp	r5, r7
    597e:	bcs.n	595c <FatFile::getSFN(char*, unsigned int)+0x28>
  for (uint8_t i = 0; i < 12; i++) {
    5980:	add.w	ip, ip, #1
    name[j++] = c;
    5984:	strb.w	lr, [r6, r4]
    5988:	uxtb	r4, r5
  for (uint8_t i = 0; i < 12; i++) {
    598a:	cmp.w	ip, #12
    598e:	beq.n	59b2 <FatFile::getSFN(char*, unsigned int)+0x7e>
    if (i == 8) {
    5990:	cmp.w	ip, #8
    5994:	beq.n	59ba <FatFile::getSFN(char*, unsigned int)+0x86>
      c = *ptr++;
    5996:	ldrb.w	lr, [r3], #1
      if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
    599a:	sub.w	r2, lr, #65	; 0x41
    599e:	cmp	r2, #25
    59a0:	bls.n	596c <FatFile::getSFN(char*, unsigned int)+0x38>
      if (c == ' ') {
    59a2:	cmp.w	lr, #32
    59a6:	bne.n	597a <FatFile::getSFN(char*, unsigned int)+0x46>
  for (uint8_t i = 0; i < 12; i++) {
    59a8:	add.w	ip, ip, #1
    59ac:	cmp.w	ip, #12
    59b0:	bne.n	5990 <FatFile::getSFN(char*, unsigned int)+0x5c>
  name[j] = '\0';
    59b2:	movs	r3, #0
    59b4:	mov	r0, r4
    59b6:	strb	r3, [r6, r4]
}
    59b8:	pop	{r3, r4, r5, r6, r7, pc}
      if (*ptr == ' ') {
    59ba:	ldrb	r2, [r3, #0]
    59bc:	cmp	r2, #32
    59be:	beq.n	59b2 <FatFile::getSFN(char*, unsigned int)+0x7e>
      lcBit = FAT_CASE_LC_EXT;
    59c0:	movs	r1, #16
      c = '.';
    59c2:	mov.w	lr, #46	; 0x2e
    59c6:	b.n	597a <FatFile::getSFN(char*, unsigned int)+0x46>

000059c8 <FatFile::getName7(char*, unsigned int)>:
size_t FatFile::getName7(char* name, size_t size) {
    59c8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  FatFile() {}
    59cc:	movs	r5, #0
    59ce:	sub	sp, #44	; 0x2c
  if (!isOpen()) {
    59d0:	ldrb	r3, [r0, #0]
size_t FatFile::getName7(char* name, size_t size) {
    59d2:	mov	r8, r1
    59d4:	str	r5, [sp, #4]
  if (!isOpen()) {
    59d6:	cmp	r3, #0
    59d8:	beq.n	5a7c <FatFile::getName7(char*, unsigned int)+0xb4>
  if (!isLFN()) {
    59da:	ldrb	r3, [r0, #3]
    59dc:	mov	r6, r0
    59de:	cmp	r3, #0
    59e0:	beq.n	5a8c <FatFile::getName7(char*, unsigned int)+0xc4>
  if (!dir.openCluster(this)) {
    59e2:	mov	r1, r0
    59e4:	add	r0, sp, #4
    59e6:	mov	r7, r2
    59e8:	bl	6044 <FatFile::openCluster(FatFile*)>
    59ec:	cmp	r0, #0
    59ee:	beq.n	5a7c <FatFile::getName7(char*, unsigned int)+0xb4>
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    59f0:	ldrb	r3, [r6, #3]
    59f2:	cmp	r3, #0
    59f4:	beq.n	5aa8 <FatFile::getName7(char*, unsigned int)+0xe0>
    59f6:	mov.w	r9, #1
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(m_dirIndex - order));
    59fa:	ldrh	r1, [r6, #4]
  // private functions

  bool addCluster();
  bool addDirCluster();
  DirFat_t* cacheDir(uint16_t index) {
    return seekSet(32UL * index) ? readDirCache() : nullptr;
    59fc:	add	r0, sp, #4
    59fe:	sub.w	r1, r1, r9
    5a02:	uxth	r1, r1
    5a04:	lsls	r1, r1, #5
    5a06:	bl	6564 <FatFile::seekSet(unsigned long)>
    5a0a:	cbz	r0, 5a7c <FatFile::getName7(char*, unsigned int)+0xb4>
    5a0c:	movs	r1, #0
    5a0e:	add	r0, sp, #4
    5a10:	bl	62a4 <FatFile::readDirCache(bool)>
    if (!ldir) {
    5a14:	cbz	r0, 5a7c <FatFile::getName7(char*, unsigned int)+0xb4>
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    5a16:	ldrb	r3, [r0, #11]
    5a18:	cmp	r3, #15
    5a1a:	bne.n	5a7c <FatFile::getName7(char*, unsigned int)+0xb4>
    5a1c:	ldrb	r3, [r0, #0]
    5a1e:	uxtb.w	r2, r9
    5a22:	and.w	r3, r3, #31
    5a26:	cmp	r3, r2
    5a28:	bne.n	5a7c <FatFile::getName7(char*, unsigned int)+0xb4>
    5a2a:	subs	r2, r5, #1
    5a2c:	add.w	ip, r0, #1
    for (uint8_t i = 0; i < 13; i++) {
    5a30:	movs	r3, #0
    5a32:	add	r2, r8
  if (i < 5) {
    5a34:	cmp	r3, #4
    5a36:	bhi.n	5a9a <FatFile::getName7(char*, unsigned int)+0xd2>
    5a38:	ldrh.w	r4, [ip]
    for (uint8_t i = 0; i < 13; i++) {
    5a3c:	adds	r3, #1
    5a3e:	add.w	ip, ip, #2
      if (c == 0) {
    5a42:	cbz	r4, 5a6c <FatFile::getName7(char*, unsigned int)+0xa4>
      if ((n + 1) >= size) {
    5a44:	adds	r5, #1
    for (uint8_t i = 0; i < 13; i++) {
    5a46:	uxtb	r3, r3
      if ((n + 1) >= size) {
    5a48:	cmp	r5, r7
    5a4a:	bcs.n	5a7c <FatFile::getName7(char*, unsigned int)+0xb4>
      name[n++] = c >= 0X7F ? '?' : c;
    5a4c:	cmp	r4, #127	; 0x7f
    5a4e:	it	cs
    5a50:	movcs	r4, #63	; 0x3f
    for (uint8_t i = 0; i < 13; i++) {
    5a52:	cmp	r3, #13
      name[n++] = c >= 0X7F ? '?' : c;
    5a54:	strb.w	r4, [r2, #1]!
    for (uint8_t i = 0; i < 13; i++) {
    5a58:	bne.n	5a34 <FatFile::getName7(char*, unsigned int)+0x6c>
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    5a5a:	add.w	r9, r9, #1
    5a5e:	ldrb	r2, [r6, #3]
    5a60:	uxtb.w	r3, r9
    5a64:	uxth.w	r9, r9
    5a68:	cmp	r2, r3
    5a6a:	bcs.n	59fa <FatFile::getName7(char*, unsigned int)+0x32>
  name[n] = 0;
    5a6c:	add	r8, r5
    5a6e:	movs	r3, #0
}
    5a70:	mov	r0, r5
  name[n] = 0;
    5a72:	strb.w	r3, [r8]
}
    5a76:	add	sp, #44	; 0x2c
    5a78:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  name[0] = '\0';
    5a7c:	movs	r3, #0
  return 0;
    5a7e:	mov	r5, r3
  name[0] = '\0';
    5a80:	strb.w	r3, [r8]
}
    5a84:	mov	r0, r5
    5a86:	add	sp, #44	; 0x2c
    5a88:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return getSFN(name, size);
    5a8c:	bl	5934 <FatFile::getSFN(char*, unsigned int)>
    5a90:	mov	r5, r0
}
    5a92:	mov	r0, r5
    5a94:	add	sp, #44	; 0x2c
    5a96:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  } else if (i < 11) {
    5a9a:	cmp	r3, #10
    5a9c:	ite	ls
    5a9e:	ldrhls.w	r4, [ip, #3]
    5aa2:	ldrhhi.w	r4, [ip, #5]
    return getLe16(ldir->unicode3 + 2 * (i - 11));
    5aa6:	b.n	5a3c <FatFile::getName7(char*, unsigned int)+0x74>
  size_t n = 0;
    5aa8:	mov	r5, r3
    5aaa:	b.n	5a6e <FatFile::getName7(char*, unsigned int)+0xa6>

00005aac <FatFile::getName(char*, unsigned int)>:
  return getName7(name, size);
    5aac:	b.w	59c8 <FatFile::getName7(char*, unsigned int)>

00005ab0 <FatFile::sync() [clone .part.0]>:
fail:
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
    5ab0:	push	{r4, r5, r6, lr}
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    5ab2:	ldrsb.w	r3, [r0, #2]
bool FatFile::sync() {
    5ab6:	sub	sp, #8
    5ab8:	mov	r4, r0
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    5aba:	cmp	r3, #0
    5abc:	blt.n	5ada <FatFile::sync() [clone .part.0]+0x2a>
      setLe16(dir->modifyTime, time);
    }
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
  }
  if (m_vol->cacheSync()) {
    5abe:	ldr	r5, [r4, #8]
  uint8_t* fatCachePrepare(uint32_t sector, uint8_t options) {
    options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return m_fatCache.prepare(sector, options);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    5ac0:	add.w	r0, r5, #36	; 0x24
    5ac4:	bl	3184 <FsCache::sync()>
    5ac8:	cmp	r0, #0
    5aca:	bne.n	5b4c <FatFile::sync() [clone .part.0]+0x9c>
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
    5acc:	ldrb	r3, [r4, #1]
  return false;
    5ace:	movs	r0, #0
  m_error |= WRITE_ERROR;
    5ad0:	orr.w	r3, r3, #1
    5ad4:	strb	r3, [r4, #1]
}
    5ad6:	add	sp, #8
    5ad8:	pop	{r4, r5, r6, pc}
    return dataCachePrepare(sector, options);
  }
  bool cacheSync() { return m_cache.sync() && syncDevice(); }
#endif  // USE_SEPARATE_FAT_CACHE
  uint8_t* dataCachePrepare(uint32_t sector, uint8_t options) {
    return m_cache.prepare(sector, options);
    5ada:	ldr	r0, [r0, #8]
    5adc:	movs	r2, #1
    5ade:	ldr	r1, [r4, #24]
    5ae0:	adds	r0, #36	; 0x24
    5ae2:	bl	31dc <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    5ae6:	cmp	r0, #0
    5ae8:	beq.n	5acc <FatFile::sync() [clone .part.0]+0x1c>
  return dir + (m_dirIndex & 0XF);
    5aea:	ldrh	r5, [r4, #4]
    5aec:	and.w	r5, r5, #15
    5af0:	lsls	r3, r5, #5
    5af2:	add.w	r5, r0, r5, lsl #5
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
    5af6:	ldrb	r3, [r0, r3]
    5af8:	cmp	r3, #229	; 0xe5
    5afa:	beq.n	5acc <FatFile::sync() [clone .part.0]+0x1c>
    dir->attributes = m_attributes & FS_ATTRIB_COPY;
    5afc:	ldrb	r3, [r4, #0]
    5afe:	and.w	r3, r3, #55	; 0x37
    5b02:	strb	r3, [r5, #11]
    if (isFile()) {
    5b04:	ldrb	r3, [r4, #0]
    5b06:	lsls	r3, r3, #28
    5b08:	bpl.n	5b0e <FatFile::sync() [clone .part.0]+0x5e>
      setLe32(dir->fileSize, m_fileSize);
    5b0a:	ldr	r3, [r4, #28]
  *reinterpret_cast<uint32_t*>(dst) = src;
    5b0c:	str	r3, [r5, #28]
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    5b0e:	ldr	r3, [r4, #32]
    if (FsDateTime::callback) {
    5b10:	ldr	r1, [pc, #84]	; (5b68 <FatFile::sync() [clone .part.0]+0xb8>)
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);
    5b12:	lsrs	r2, r3, #16
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    5b14:	strh	r3, [r5, #26]
    if (FsDateTime::callback) {
    5b16:	ldr	r6, [r1, #0]
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);
    5b18:	strh	r2, [r5, #20]
    if (FsDateTime::callback) {
    5b1a:	cbz	r6, 5b36 <FatFile::sync() [clone .part.0]+0x86>
      FsDateTime::callback(&date, &time, &ms10);
    5b1c:	add.w	r2, sp, #3
    5b20:	add.w	r1, sp, #6
    5b24:	add	r0, sp, #4
    5b26:	blx	r6
      setLe16(dir->modifyDate, date);
    5b28:	ldrh.w	r3, [sp, #4]
  *reinterpret_cast<uint16_t*>(dst) = src;
    5b2c:	ldrh.w	r2, [sp, #6]
    5b30:	strh	r3, [r5, #24]
    5b32:	strh	r3, [r5, #18]
    5b34:	strh	r2, [r5, #22]
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    5b36:	ldrb	r3, [r4, #2]
  if (m_vol->cacheSync()) {
    5b38:	ldr	r5, [r4, #8]
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    5b3a:	and.w	r3, r3, #127	; 0x7f
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    5b3e:	add.w	r0, r5, #36	; 0x24
    5b42:	strb	r3, [r4, #2]
    5b44:	bl	3184 <FsCache::sync()>
    5b48:	cmp	r0, #0
    5b4a:	beq.n	5acc <FatFile::sync() [clone .part.0]+0x1c>
    5b4c:	add.w	r0, r5, #564	; 0x234
    5b50:	bl	3184 <FsCache::sync()>
    5b54:	cmp	r0, #0
    5b56:	beq.n	5acc <FatFile::sync() [clone .part.0]+0x1c>
    5b58:	ldr	r0, [r5, #0]
  bool syncDevice() { return m_blockDev->syncDevice(); }
    5b5a:	ldr	r3, [r0, #0]
    5b5c:	ldr	r3, [r3, #28]
    5b5e:	blx	r3
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    5b60:	cmp	r0, #0
    5b62:	beq.n	5acc <FatFile::sync() [clone .part.0]+0x1c>
    5b64:	b.n	5ad6 <FatFile::sync() [clone .part.0]+0x26>
    5b66:	nop
    5b68:	.word	0x20006404

00005b6c <FatFile::addCluster()>:
  uint32_t cc = m_curCluster;
    5b6c:	mov	r2, r0
bool FatFile::addCluster() {
    5b6e:	push	{r3, r4, r5, lr}
  uint32_t cc = m_curCluster;
    5b70:	ldr.w	r5, [r2, #16]!
bool FatFile::addCluster() {
    5b74:	mov	r4, r0
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    5b76:	ldr	r0, [r0, #8]
    5b78:	mov	r1, r5
    5b7a:	bl	6c28 <FatPartition::allocateCluster(unsigned long, unsigned long*)>
    5b7e:	cbz	r0, 5b96 <FatFile::addCluster()+0x2a>
  if (cc == 0) {
    5b80:	cbz	r5, 5b98 <FatFile::addCluster()+0x2c>
  } else if (m_curCluster != (cc + 1)) {
    5b82:	ldr	r3, [r4, #16]
    5b84:	adds	r5, #1
    5b86:	cmp	r3, r5
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    5b88:	ldrb	r3, [r4, #2]
    5b8a:	it	ne
    5b8c:	andne.w	r3, r3, #191	; 0xbf
  m_flags |= FILE_FLAG_DIR_DIRTY;
    5b90:	orn	r3, r3, #127	; 0x7f
    5b94:	strb	r3, [r4, #2]
}
    5b96:	pop	{r3, r4, r5, pc}
    m_flags |= FILE_FLAG_CONTIGUOUS;
    5b98:	ldrb	r3, [r4, #2]
    5b9a:	orr.w	r3, r3, #64	; 0x40
    5b9e:	b.n	5b90 <FatFile::addCluster()+0x24>

00005ba0 <FatFile::addDirCluster()>:
bool FatFile::addDirCluster() {
    5ba0:	push	{r3, r4, r5, r6, r7, lr}
  if (isRootFixed()) {
    5ba2:	ldrb	r4, [r0, #0]
    5ba4:	ands.w	r4, r4, #64	; 0x40
    5ba8:	bne.n	5bb4 <FatFile::addDirCluster()+0x14>
  if (m_curPosition >= 512UL * 4095) {
    5baa:	ldr	r3, [pc, #104]	; (5c14 <FatFile::addDirCluster()+0x74>)
    5bac:	mov	r5, r0
    5bae:	ldr	r2, [r0, #20]
    5bb0:	cmp	r2, r3
    5bb2:	bcc.n	5bba <FatFile::addDirCluster()+0x1a>
  return false;
    5bb4:	movs	r7, #0
}
    5bb6:	mov	r0, r7
    5bb8:	pop	{r3, r4, r5, r6, r7, pc}
  if (!addCluster()) {
    5bba:	bl	5b6c <FatFile::addCluster()>
    5bbe:	mov	r7, r0
    5bc0:	cmp	r0, #0
    5bc2:	beq.n	5bb4 <FatFile::addDirCluster()+0x14>
  sector = m_vol->clusterStartSector(m_curCluster);
    5bc4:	ldr	r0, [r5, #8]
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
  }
  uint32_t clusterStartSector(uint32_t cluster) const {
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    5bc6:	ldr	r6, [r5, #16]
    5bc8:	ldrb	r2, [r0, #6]
    5bca:	subs	r6, #2
    5bcc:	ldr	r1, [r0, #20]
    5bce:	lsls	r6, r2
    5bd0:	add	r6, r1
  for (uint8_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    5bd2:	ldrb	r1, [r0, #4]
    5bd4:	cbz	r1, 5c02 <FatFile::addDirCluster()+0x62>
    5bd6:	mov	r1, r4
    5bd8:	b.n	5be8 <FatFile::addDirCluster()+0x48>
    memset(pc, 0, m_vol->bytesPerSector());
    5bda:	bl	e074 <memset>
  for (uint8_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    5bde:	ldr	r0, [r5, #8]
    5be0:	uxtb	r1, r4
    5be2:	ldrb	r2, [r0, #4]
    5be4:	cmp	r2, r1
    5be6:	bls.n	5c00 <FatFile::addDirCluster()+0x60>
    return m_cache.prepare(sector, options);
    5be8:	add	r1, r6
    5bea:	movs	r2, #5
    5bec:	adds	r0, #36	; 0x24
    5bee:	adds	r4, #1
    5bf0:	bl	31dc <FsCache::prepare(unsigned long, unsigned char)>
    memset(pc, 0, m_vol->bytesPerSector());
    5bf4:	mov.w	r2, #512	; 0x200
    5bf8:	movs	r1, #0
    if (!pc) {
    5bfa:	cmp	r0, #0
    5bfc:	bne.n	5bda <FatFile::addDirCluster()+0x3a>
    5bfe:	b.n	5bb4 <FatFile::addDirCluster()+0x14>
    return m_bytesPerSector << m_sectorsPerClusterShift;
    5c00:	ldrb	r2, [r0, #6]
    5c02:	mov.w	r3, #512	; 0x200
  m_curPosition += m_vol->bytesPerCluster();
    5c06:	ldr	r1, [r5, #20]
}
    5c08:	mov	r0, r7
    5c0a:	lsls	r3, r2
  m_curPosition += m_vol->bytesPerCluster();
    5c0c:	uxtah	r3, r1, r3
    5c10:	str	r3, [r5, #20]
}
    5c12:	pop	{r3, r4, r5, r6, r7, pc}
    5c14:	.word	0x001ffe00

00005c18 <FatFile::cacheDirEntry(unsigned char)>:
DirFat_t* FatFile::cacheDirEntry(uint8_t action) {
    5c18:	push	{r4, lr}
    5c1a:	mov	r4, r0
    return m_cache.prepare(sector, options);
    5c1c:	ldr	r0, [r0, #8]
    5c1e:	mov	r2, r1
    5c20:	adds	r0, #36	; 0x24
    5c22:	ldr	r1, [r4, #24]
    5c24:	bl	31dc <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    5c28:	cbz	r0, 5c34 <FatFile::cacheDirEntry(unsigned char)+0x1c>
  return dir + (m_dirIndex & 0XF);
    5c2a:	ldrh	r3, [r4, #4]
    5c2c:	and.w	r3, r3, #15
    5c30:	add.w	r0, r0, r3, lsl #5
}
    5c34:	pop	{r4, pc}
    5c36:	nop

00005c38 <FatFile::close()>:
bool FatFile::close() {
    5c38:	push	{r4, lr}
  if (!isOpen()) {
    5c3a:	ldrb	r3, [r0, #0]
bool FatFile::close() {
    5c3c:	mov	r4, r0
  if (!isOpen()) {
    5c3e:	cbz	r3, 5c4c <FatFile::close()+0x14>
    5c40:	bl	5ab0 <FatFile::sync() [clone .part.0]>
  m_attributes = FILE_ATTR_CLOSED;
    5c44:	movs	r3, #0
    5c46:	strb	r3, [r4, #0]
  m_flags = 0;
    5c48:	strb	r3, [r4, #2]
}
    5c4a:	pop	{r4, pc}
  m_attributes = FILE_ATTR_CLOSED;
    5c4c:	movs	r3, #0
    return true;
    5c4e:	movs	r0, #1
  m_attributes = FILE_ATTR_CLOSED;
    5c50:	strb	r3, [r4, #0]
  m_flags = 0;
    5c52:	strb	r3, [r4, #2]
}
    5c54:	pop	{r4, pc}
    5c56:	nop

00005c58 <FatFile::dirEntry(DirFat_t*)>:
bool FatFile::dirEntry(DirFat_t* dst) {
    5c58:	push	{r3, r4, r5, lr}
  if (!isOpen()) {
    5c5a:	ldrb	r3, [r0, #0]
bool FatFile::dirEntry(DirFat_t* dst) {
    5c5c:	mov	r5, r0
    5c5e:	mov	r4, r1
  if (!isOpen()) {
    5c60:	cbz	r3, 5c68 <FatFile::dirEntry(DirFat_t*)+0x10>
    5c62:	bl	5ab0 <FatFile::sync() [clone .part.0]>
  if (!sync()) {
    5c66:	cbz	r0, 5ca6 <FatFile::dirEntry(DirFat_t*)+0x4e>
    5c68:	ldr	r0, [r5, #8]
    5c6a:	movs	r2, #0
    5c6c:	ldr	r1, [r5, #24]
    5c6e:	adds	r0, #36	; 0x24
    5c70:	bl	31dc <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    5c74:	cbz	r0, 5ca6 <FatFile::dirEntry(DirFat_t*)+0x4e>
  return dir + (m_dirIndex & 0XF);
    5c76:	ldrh	r2, [r5, #4]
    5c78:	and.w	r2, r2, #15
    5c7c:	add.w	r3, r0, r2, lsl #5
    5c80:	lsls	r2, r2, #5
  memcpy(dst, dir, sizeof(DirFat_t));
    5c82:	ldr	r5, [r3, #4]
    5c84:	ldr	r0, [r0, r2]
    5c86:	ldr	r1, [r3, #8]
    5c88:	ldr	r2, [r3, #12]
    5c8a:	str	r0, [r4, #0]
    5c8c:	str	r5, [r4, #4]
    5c8e:	str	r1, [r4, #8]
    5c90:	str	r2, [r4, #12]
    5c92:	ldr	r0, [r3, #16]
    5c94:	ldr	r5, [r3, #20]
    5c96:	ldr	r1, [r3, #24]
    5c98:	ldr	r2, [r3, #28]
    5c9a:	str	r0, [r4, #16]
  return true;
    5c9c:	movs	r0, #1
  memcpy(dst, dir, sizeof(DirFat_t));
    5c9e:	str	r5, [r4, #20]
    5ca0:	str	r1, [r4, #24]
    5ca2:	str	r2, [r4, #28]
}
    5ca4:	pop	{r3, r4, r5, pc}
  return false;
    5ca6:	movs	r0, #0
}
    5ca8:	pop	{r3, r4, r5, pc}
    5caa:	nop

00005cac <FatFile::getCreateDateTime(unsigned short*, unsigned short*)>:
bool FatFile::getCreateDateTime(uint16_t* pdate, uint16_t* ptime) {
    5cac:	push	{r4, r5, lr}
    5cae:	sub	sp, #36	; 0x24
    5cb0:	mov	r5, r1
    5cb2:	mov	r4, r2
  if (!dirEntry(&dir)) {
    5cb4:	mov	r1, sp
    5cb6:	bl	5c58 <FatFile::dirEntry(DirFat_t*)>
    5cba:	cbz	r0, 5cc8 <FatFile::getCreateDateTime(unsigned short*, unsigned short*)+0x1c>
  *pdate = getLe16(dir.createDate);
    5cbc:	ldrh.w	r2, [sp, #16]
  *ptime = getLe16(dir.createTime);
    5cc0:	ldrh.w	r3, [sp, #14]
  *pdate = getLe16(dir.createDate);
    5cc4:	strh	r2, [r5, #0]
  *ptime = getLe16(dir.createTime);
    5cc6:	strh	r3, [r4, #0]
}
    5cc8:	add	sp, #36	; 0x24
    5cca:	pop	{r4, r5, pc}

00005ccc <FatFile::getModifyDateTime(unsigned short*, unsigned short*)>:
bool FatFile::getModifyDateTime(uint16_t* pdate, uint16_t* ptime) {
    5ccc:	push	{r4, r5, lr}
    5cce:	sub	sp, #36	; 0x24
    5cd0:	mov	r5, r1
    5cd2:	mov	r4, r2
  if (!dirEntry(&dir)) {
    5cd4:	mov	r1, sp
    5cd6:	bl	5c58 <FatFile::dirEntry(DirFat_t*)>
    5cda:	cbz	r0, 5ce8 <FatFile::getModifyDateTime(unsigned short*, unsigned short*)+0x1c>
  *pdate = getLe16(dir.modifyDate);
    5cdc:	ldrh.w	r2, [sp, #24]
  *ptime = getLe16(dir.modifyTime);
    5ce0:	ldrh.w	r3, [sp, #22]
  *pdate = getLe16(dir.modifyDate);
    5ce4:	strh	r2, [r5, #0]
  *ptime = getLe16(dir.modifyTime);
    5ce6:	strh	r3, [r4, #0]
}
    5ce8:	add	sp, #36	; 0x24
    5cea:	pop	{r4, r5, pc}

00005cec <FatFile::mkdir(FatFile*, FatLfn_t*)>:
  if (!parent->isDir()) {
    5cec:	ldrb	r3, [r1, #0]
    5cee:	tst.w	r3, #208	; 0xd0
    5cf2:	bne.n	5cf8 <FatFile::mkdir(FatFile*, FatLfn_t*)+0xc>
}
    5cf4:	movs	r0, #0
    5cf6:	bx	lr
bool FatFile::mkdir(FatFile* parent, FatName_t* fname) {
    5cf8:	push	{r4, r5, r6, r7, lr}
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    5cfa:	movw	r3, #2562	; 0xa02
bool FatFile::mkdir(FatFile* parent, FatName_t* fname) {
    5cfe:	sub	sp, #36	; 0x24
    5d00:	mov	r5, r1
    5d02:	mov	r4, r0
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    5d04:	bl	72b0 <FatFile::open(FatFile*, FatLfn_t*, int)>
    5d08:	cbz	r0, 5d1a <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
  m_flags = FILE_FLAG_READ;
    5d0a:	movs	r2, #1
  m_attributes = FILE_ATTR_SUBDIR;
    5d0c:	movs	r3, #16
  if (!addDirCluster()) {
    5d0e:	mov	r0, r4
  m_flags = FILE_FLAG_READ;
    5d10:	strb	r2, [r4, #2]
  m_attributes = FILE_ATTR_SUBDIR;
    5d12:	strb	r3, [r4, #0]
  if (!addDirCluster()) {
    5d14:	bl	5ba0 <FatFile::addDirCluster()>
    5d18:	cbnz	r0, 5d20 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x34>
}
    5d1a:	movs	r0, #0
    5d1c:	add	sp, #36	; 0x24
    5d1e:	pop	{r4, r5, r6, r7, pc}
  m_firstCluster = m_curCluster;
    5d20:	ldr	r2, [r4, #16]
  if (!isOpen()) {
    5d22:	ldrb	r3, [r4, #0]
  m_firstCluster = m_curCluster;
    5d24:	str	r2, [r4, #32]
  if (!isOpen()) {
    5d26:	cbz	r3, 5d44 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x58>
  if (pos == m_curPosition) {
    5d28:	ldr	r3, [r4, #20]
    5d2a:	cbz	r3, 5d3a <FatFile::mkdir(FatFile*, FatLfn_t*)+0x4e>
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    5d2c:	ldrb	r3, [r4, #2]
    m_curCluster = 0;
    5d2e:	movs	r2, #0
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    5d30:	bic.w	r3, r3, #32
  m_curPosition = pos;
    5d34:	strd	r2, r2, [r4, #16]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    5d38:	strb	r3, [r4, #2]
  if (!isOpen()) {
    5d3a:	mov	r0, r4
    5d3c:	bl	5ab0 <FatFile::sync() [clone .part.0]>
  if (!sync()) {
    5d40:	cmp	r0, #0
    5d42:	beq.n	5d1a <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
    5d44:	ldr	r0, [r4, #8]
    5d46:	movs	r2, #1
    5d48:	ldr	r1, [r4, #24]
    5d4a:	adds	r0, #36	; 0x24
    5d4c:	bl	31dc <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    5d50:	cmp	r0, #0
    5d52:	beq.n	5d1a <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
  return dir + (m_dirIndex & 0XF);
    5d54:	ldrh.w	ip, [r4, #4]
  dir->attributes = FS_ATTRIB_DIRECTORY;
    5d58:	movs	r2, #16
  return dir + (m_dirIndex & 0XF);
    5d5a:	and.w	ip, ip, #15
    5d5e:	mov.w	r3, ip, lsl #5
    5d62:	add.w	ip, r0, ip, lsl #5
  dir->attributes = FS_ATTRIB_DIRECTORY;
    5d66:	strb.w	r2, [ip, #11]
  memcpy(&dot, dir, sizeof(dot));
    5d6a:	ldr	r0, [r0, r3]
  sector = m_vol->clusterStartSector(m_firstCluster);
    5d6c:	ldr	r7, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    5d6e:	ldr	r3, [r4, #32]
    5d70:	ldrb.w	lr, [r7, #6]
    5d74:	subs	r6, r3, #2
  memcpy(&dot, dir, sizeof(dot));
    5d76:	ldr.w	r1, [ip, #4]
    5d7a:	ldr.w	r2, [ip, #8]
    5d7e:	ldr.w	r3, [ip, #12]
    5d82:	lsl.w	r6, r6, lr
    5d86:	mov	lr, sp
    5d88:	stmia.w	lr!, {r0, r1, r2, r3}
    5d8c:	ldr.w	r0, [ip, #16]
    5d90:	ldr.w	r1, [ip, #20]
    5d94:	ldr.w	r2, [ip, #24]
    5d98:	ldr.w	r3, [ip, #28]
    5d9c:	stmia.w	lr!, {r0, r1, r2, r3}
    return m_cache.prepare(sector, options);
    5da0:	ldr	r3, [r7, #20]
    5da2:	add.w	r0, r7, #36	; 0x24
    5da6:	movs	r2, #1
    5da8:	adds	r1, r6, r3
    dot.name[i] = ' ';
    5daa:	mov.w	r3, #538976288	; 0x20202020
    5dae:	str.w	r3, [sp, #1]
    5db2:	str.w	r3, [sp, #5]
    5db6:	strh.w	r3, [sp, #9]
    5dba:	bl	31dc <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    5dbe:	mov	ip, r0
    5dc0:	cmp	r0, #0
    5dc2:	beq.n	5d1a <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
  memcpy(&dir[0], &dot, sizeof(dot));
    5dc4:	movs	r7, #46	; 0x2e
    5dc6:	mov	lr, sp
    5dc8:	strb.w	r7, [sp]
  memcpy(&dir[1], &dot, sizeof(dot));
    5dcc:	mov	r6, lr
  memcpy(&dir[0], &dot, sizeof(dot));
    5dce:	ldmia.w	lr!, {r0, r1, r2, r3}
    5dd2:	str.w	r0, [ip]
    5dd6:	str.w	r1, [ip, #4]
    5dda:	str.w	r2, [ip, #8]
    5dde:	str.w	r3, [ip, #12]
  dot.name[1] = '.';
    5de2:	strb.w	r7, [sp, #1]
  memcpy(&dir[0], &dot, sizeof(dot));
    5de6:	ldmia.w	lr!, {r0, r1, r2, r3}
    5dea:	str.w	r0, [ip, #16]
    5dee:	str.w	r1, [ip, #20]
    5df2:	str.w	r2, [ip, #24]
    5df6:	str.w	r3, [ip, #28]
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
    5dfa:	ldr	r3, [r5, #32]
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
    5dfc:	lsrs	r2, r3, #16
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
    5dfe:	strh.w	r3, [sp, #26]
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
    5e02:	strh.w	r2, [sp, #20]
  memcpy(&dir[1], &dot, sizeof(dot));
    5e06:	ldmia	r6!, {r0, r1, r2, r3}
    5e08:	str.w	r0, [ip, #32]
    5e0c:	str.w	r1, [ip, #36]	; 0x24
    5e10:	str.w	r2, [ip, #40]	; 0x28
    5e14:	str.w	r3, [ip, #44]	; 0x2c
    5e18:	ldmia	r6!, {r0, r1, r2, r3}
    5e1a:	str.w	r0, [ip, #48]	; 0x30
    5e1e:	str.w	r1, [ip, #52]	; 0x34
    5e22:	str.w	r2, [ip, #56]	; 0x38
    5e26:	str.w	r3, [ip, #60]	; 0x3c
  return m_vol->cacheSync();
    5e2a:	ldr	r4, [r4, #8]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    5e2c:	add.w	r0, r4, #36	; 0x24
    5e30:	bl	3184 <FsCache::sync()>
    5e34:	cmp	r0, #0
    5e36:	beq.w	5d1a <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
    5e3a:	add.w	r0, r4, #564	; 0x234
    5e3e:	bl	3184 <FsCache::sync()>
    5e42:	cmp	r0, #0
    5e44:	beq.w	5d1a <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
    5e48:	ldr	r0, [r4, #0]
  bool syncDevice() { return m_blockDev->syncDevice(); }
    5e4a:	ldr	r3, [r0, #0]
    5e4c:	ldr	r3, [r3, #28]
}
    5e4e:	add	sp, #36	; 0x24
    5e50:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    5e54:	bx	r3
    5e56:	nop

00005e58 <FatFile::mkdir(FatFile*, char const*, bool)>:
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    5e58:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  FatFile() {}
    5e5c:	movs	r6, #0
    5e5e:	sub	sp, #80	; 0x50
    5e60:	mov	r8, r3
  if (isOpen() || !parent->isDir()) {
    5e62:	ldrb	r3, [r0, #0]
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    5e64:	str	r2, [sp, #4]
    5e66:	str	r6, [sp, #44]	; 0x2c
  if (isOpen() || !parent->isDir()) {
    5e68:	cmp	r3, #0
    5e6a:	bne.n	5ef0 <FatFile::mkdir(FatFile*, char const*, bool)+0x98>
    5e6c:	ldrb	r3, [r1, #0]
    5e6e:	mov	r5, r1
    5e70:	tst.w	r3, #208	; 0xd0
    5e74:	beq.n	5ef0 <FatFile::mkdir(FatFile*, char const*, bool)+0x98>
  if (isDirSeparator(*path)) {
    5e76:	ldrb	r3, [r2, #0]
    5e78:	mov	r4, r0
    5e7a:	mov	r6, r2
    5e7c:	cmp	r3, #47	; 0x2f
    5e7e:	beq.n	5ef8 <FatFile::mkdir(FatFile*, char const*, bool)+0xa0>
    if (!open(parent, &fname, O_RDONLY)) {
    5e80:	movs	r7, #0
    5e82:	b.n	5ed6 <FatFile::mkdir(FatFile*, char const*, bool)+0x7e>
    if (!*path) {
    5e84:	ldr	r6, [sp, #4]
    5e86:	ldrb	r6, [r6, #0]
    5e88:	cmp	r6, #0
    5e8a:	beq.n	5f2a <FatFile::mkdir(FatFile*, char const*, bool)+0xd2>
    if (!open(parent, &fname, O_RDONLY)) {
    5e8c:	bl	72b0 <FatFile::open(FatFile*, FatLfn_t*, int)>
    5e90:	mov	r3, r0
      if (!pFlag || !mkdir(parent, &fname)) {
    5e92:	add	r2, sp, #12
    5e94:	mov	r1, r5
    5e96:	mov	r0, r4
    if (!open(parent, &fname, O_RDONLY)) {
    5e98:	cbnz	r3, 5ea6 <FatFile::mkdir(FatFile*, char const*, bool)+0x4e>
      if (!pFlag || !mkdir(parent, &fname)) {
    5e9a:	cmp.w	r8, #0
    5e9e:	beq.n	5ef0 <FatFile::mkdir(FatFile*, char const*, bool)+0x98>
    5ea0:	bl	5cec <FatFile::mkdir(FatFile*, FatLfn_t*)>
    5ea4:	cbz	r0, 5ef0 <FatFile::mkdir(FatFile*, char const*, bool)+0x98>
    tmpDir = *this;
    5ea6:	mov	lr, r4
    5ea8:	add.w	ip, sp, #44	; 0x2c
    5eac:	ldmia.w	lr!, {r0, r1, r2, r3}
    5eb0:	stmia.w	ip!, {r0, r1, r2, r3}
    5eb4:	ldmia.w	lr!, {r0, r1, r2, r3}
    5eb8:	stmia.w	ip!, {r0, r1, r2, r3}
    5ebc:	ldr.w	r5, [lr]
    5ec0:	mov	r0, r4
  if (!isOpen()) {
    5ec2:	ldrb	r3, [r4, #0]
    tmpDir = *this;
    5ec4:	str.w	r5, [ip]
  if (!isOpen()) {
    5ec8:	cbz	r3, 5ece <FatFile::mkdir(FatFile*, char const*, bool)+0x76>
    5eca:	bl	5ab0 <FatFile::sync() [clone .part.0]>
    if (!parsePathName(path, &fname, &path)) {
    5ece:	ldr	r6, [sp, #4]
    parent = &tmpDir;
    5ed0:	add	r5, sp, #44	; 0x2c
  m_attributes = FILE_ATTR_CLOSED;
    5ed2:	strb	r7, [r4, #0]
  m_flags = 0;
    5ed4:	strb	r7, [r4, #2]
    if (!parsePathName(path, &fname, &path)) {
    5ed6:	mov	r1, r6
    5ed8:	add	r3, sp, #4
    5eda:	add	r2, sp, #12
    5edc:	mov	r0, r4
    5ede:	bl	7548 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>
    5ee2:	mov	r6, r0
    if (!open(parent, &fname, O_RDONLY)) {
    5ee4:	add	r2, sp, #12
    5ee6:	mov	r1, r5
    5ee8:	movs	r3, #0
    5eea:	mov	r0, r4
    if (!parsePathName(path, &fname, &path)) {
    5eec:	cmp	r6, #0
    5eee:	bne.n	5e84 <FatFile::mkdir(FatFile*, char const*, bool)+0x2c>
  switch (vol->fatType()) {
    5ef0:	movs	r0, #0
}
    5ef2:	add	sp, #80	; 0x50
    5ef4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      path++;
    5ef8:	adds	r6, #1
    5efa:	str	r6, [sp, #4]
    while (isDirSeparator(*path)) {
    5efc:	ldrb	r3, [r6, #0]
    5efe:	cmp	r3, #47	; 0x2f
    5f00:	beq.n	5ef8 <FatFile::mkdir(FatFile*, char const*, bool)+0xa0>
    if (!tmpDir.openRoot(parent->m_vol)) {
    5f02:	ldr	r5, [r5, #8]
  memset(this, 0, sizeof(FatFile));
    5f04:	movs	r2, #36	; 0x24
    5f06:	movs	r1, #0
    5f08:	add	r0, sp, #44	; 0x2c
    5f0a:	bl	e074 <memset>
  m_vol = vol;
    5f0e:	str	r5, [sp, #52]	; 0x34
  uint8_t fatType() const { return m_fatType; }
    5f10:	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
    5f12:	cmp	r3, #16
    5f14:	beq.n	5f36 <FatFile::mkdir(FatFile*, char const*, bool)+0xde>
    5f16:	cmp	r3, #32
    5f18:	bne.n	5ef0 <FatFile::mkdir(FatFile*, char const*, bool)+0x98>
    5f1a:	movs	r3, #128	; 0x80
      m_attributes = FILE_ATTR_ROOT_FIXED;
    5f1c:	strb.w	r3, [sp, #44]	; 0x2c
  m_flags = FILE_FLAG_READ;
    5f20:	movs	r3, #1
    parent = &tmpDir;
    5f22:	add	r5, sp, #44	; 0x2c
  m_flags = FILE_FLAG_READ;
    5f24:	strb.w	r3, [sp, #46]	; 0x2e
  return true;
    5f28:	b.n	5e80 <FatFile::mkdir(FatFile*, char const*, bool)+0x28>
  return mkdir(parent, &fname);
    5f2a:	add	r2, sp, #12
    5f2c:	bl	5cec <FatFile::mkdir(FatFile*, FatLfn_t*)>
}
    5f30:	add	sp, #80	; 0x50
    5f32:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (vol->fatType()) {
    5f36:	movs	r3, #64	; 0x40
    5f38:	b.n	5f1c <FatFile::mkdir(FatFile*, char const*, bool)+0xc4>
    5f3a:	nop

00005f3c <FatFile::open(FatFile*, char const*, int)>:
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    5f3c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5f40:	movs	r5, #0
    5f42:	sub	sp, #80	; 0x50
    5f44:	mov	r8, r3
  if (isOpen() || !dirFile->isDir()) {
    5f46:	ldrb	r3, [r0, #0]
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    5f48:	str	r2, [sp, #4]
    5f4a:	str	r5, [sp, #44]	; 0x2c
  if (isOpen() || !dirFile->isDir()) {
    5f4c:	cmp	r3, #0
    5f4e:	bne.n	5fc0 <FatFile::open(FatFile*, char const*, int)+0x84>
    5f50:	ldrb	r3, [r1, #0]
    5f52:	mov	r6, r1
    5f54:	tst.w	r3, #208	; 0xd0
    5f58:	beq.n	5fc0 <FatFile::open(FatFile*, char const*, int)+0x84>
  if (isDirSeparator(*path)) {
    5f5a:	ldrb	r3, [r2, #0]
    5f5c:	mov	r4, r0
    5f5e:	mov	r5, r2
    5f60:	cmp	r3, #47	; 0x2f
    5f62:	beq.n	5fc8 <FatFile::open(FatFile*, char const*, int)+0x8c>
    if (!open(dirFile, &fname, O_RDONLY)) {
    5f64:	movs	r7, #0
    5f66:	b.n	5fa6 <FatFile::open(FatFile*, char const*, int)+0x6a>
    if (*path == 0) {
    5f68:	ldr	r5, [sp, #4]
    5f6a:	ldrb	r5, [r5, #0]
    5f6c:	cmp	r5, #0
    5f6e:	beq.n	5ff6 <FatFile::open(FatFile*, char const*, int)+0xba>
    if (!open(dirFile, &fname, O_RDONLY)) {
    5f70:	bl	72b0 <FatFile::open(FatFile*, FatLfn_t*, int)>
    tmpDir = *this;
    5f74:	mov	lr, r4
    5f76:	add.w	ip, sp, #44	; 0x2c
    if (!open(dirFile, &fname, O_RDONLY)) {
    5f7a:	cbz	r0, 5fc0 <FatFile::open(FatFile*, char const*, int)+0x84>
    dirFile = &tmpDir;
    5f7c:	mov	r6, ip
  if (!isOpen()) {
    5f7e:	ldrb	r5, [r4, #0]
    tmpDir = *this;
    5f80:	ldmia.w	lr!, {r0, r1, r2, r3}
    5f84:	stmia.w	ip!, {r0, r1, r2, r3}
    5f88:	ldmia.w	lr!, {r0, r1, r2, r3}
    5f8c:	stmia.w	ip!, {r0, r1, r2, r3}
    5f90:	ldr.w	r3, [lr]
    5f94:	mov	r0, r4
    5f96:	str.w	r3, [ip]
  if (!isOpen()) {
    5f9a:	cbz	r5, 5fa0 <FatFile::open(FatFile*, char const*, int)+0x64>
    5f9c:	bl	5ab0 <FatFile::sync() [clone .part.0]>
    if (!parsePathName(path, &fname, &path)) {
    5fa0:	ldr	r5, [sp, #4]
  m_attributes = FILE_ATTR_CLOSED;
    5fa2:	strb	r7, [r4, #0]
  m_flags = 0;
    5fa4:	strb	r7, [r4, #2]
    if (!parsePathName(path, &fname, &path)) {
    5fa6:	mov	r1, r5
    5fa8:	add	r3, sp, #4
    5faa:	add	r2, sp, #12
    5fac:	mov	r0, r4
    5fae:	bl	7548 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>
    5fb2:	mov	r5, r0
    if (!open(dirFile, &fname, O_RDONLY)) {
    5fb4:	add	r2, sp, #12
    5fb6:	mov	r1, r6
    5fb8:	movs	r3, #0
    5fba:	mov	r0, r4
    if (!parsePathName(path, &fname, &path)) {
    5fbc:	cmp	r5, #0
    5fbe:	bne.n	5f68 <FatFile::open(FatFile*, char const*, int)+0x2c>
  return false;
    5fc0:	movs	r0, #0
}
    5fc2:	add	sp, #80	; 0x50
    5fc4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      path++;
    5fc8:	adds	r5, #1
    5fca:	str	r5, [sp, #4]
    while (isDirSeparator(*path)) {
    5fcc:	ldrb	r1, [r5, #0]
    5fce:	cmp	r1, #47	; 0x2f
    5fd0:	beq.n	5fc8 <FatFile::open(FatFile*, char const*, int)+0x8c>
    if (*path == 0) {
    5fd2:	cbnz	r1, 6004 <FatFile::open(FatFile*, char const*, int)+0xc8>
      return openRoot(dirFile->m_vol);
    5fd4:	ldr	r5, [r6, #8]
  memset(this, 0, sizeof(FatFile));
    5fd6:	movs	r2, #36	; 0x24
    5fd8:	mov	r0, r4
    5fda:	bl	e074 <memset>
  m_vol = vol;
    5fde:	str	r5, [r4, #8]
    5fe0:	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
    5fe2:	cmp	r3, #16
    5fe4:	beq.n	6030 <FatFile::open(FatFile*, char const*, int)+0xf4>
    5fe6:	cmp	r3, #32
    5fe8:	bne.n	5fc0 <FatFile::open(FatFile*, char const*, int)+0x84>
    5fea:	movs	r2, #128	; 0x80
  m_flags = FILE_FLAG_READ;
    5fec:	movs	r3, #1
      m_attributes = FILE_ATTR_ROOT_FIXED;
    5fee:	strb	r2, [r4, #0]
  return true;
    5ff0:	mov	r0, r3
  m_flags = FILE_FLAG_READ;
    5ff2:	strb	r3, [r4, #2]
  return true;
    5ff4:	b.n	5fc2 <FatFile::open(FatFile*, char const*, int)+0x86>
  return open(dirFile, &fname, oflag);
    5ff6:	mov	r3, r8
    5ff8:	add	r2, sp, #12
    5ffa:	bl	72b0 <FatFile::open(FatFile*, FatLfn_t*, int)>
}
    5ffe:	add	sp, #80	; 0x50
    6000:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    6004:	ldr	r6, [r6, #8]
  memset(this, 0, sizeof(FatFile));
    6006:	movs	r2, #36	; 0x24
    6008:	movs	r1, #0
    600a:	add	r0, sp, #44	; 0x2c
    600c:	bl	e074 <memset>
  m_vol = vol;
    6010:	str	r6, [sp, #52]	; 0x34
    6012:	ldrb	r3, [r6, #7]
  switch (vol->fatType()) {
    6014:	cmp	r3, #16
    6016:	beq.n	602c <FatFile::open(FatFile*, char const*, int)+0xf0>
    6018:	cmp	r3, #32
    601a:	bne.n	5fc0 <FatFile::open(FatFile*, char const*, int)+0x84>
    601c:	movs	r3, #128	; 0x80
      m_attributes = FILE_ATTR_ROOT_FIXED;
    601e:	strb.w	r3, [sp, #44]	; 0x2c
  m_flags = FILE_FLAG_READ;
    6022:	movs	r3, #1
    dirFile = &tmpDir;
    6024:	add	r6, sp, #44	; 0x2c
  m_flags = FILE_FLAG_READ;
    6026:	strb.w	r3, [sp, #46]	; 0x2e
  return true;
    602a:	b.n	5f64 <FatFile::open(FatFile*, char const*, int)+0x28>
  switch (vol->fatType()) {
    602c:	movs	r3, #64	; 0x40
    602e:	b.n	601e <FatFile::open(FatFile*, char const*, int)+0xe2>
    6030:	movs	r2, #64	; 0x40
    6032:	b.n	5fec <FatFile::open(FatFile*, char const*, int)+0xb0>

00006034 <FatFile::open(FatVolume*, char const*, int)>:
  return vol && open(vol->vwd(), path, oflag);
    6034:	cbz	r1, 603e <FatFile::open(FatVolume*, char const*, int)+0xa>
    6036:	addw	r1, r1, #1092	; 0x444
    603a:	b.w	5f3c <FatFile::open(FatFile*, char const*, int)>
}
    603e:	mov	r0, r1
    6040:	bx	lr
    6042:	nop

00006044 <FatFile::openCluster(FatFile*)>:
  if (file->m_dirCluster == 0) {
    6044:	ldr	r3, [r1, #12]
bool FatFile::openCluster(FatFile* file) {
    6046:	push	{r4, r5, r6, lr}
    6048:	mov	r5, r1
    604a:	mov	r4, r0
  if (file->m_dirCluster == 0) {
    604c:	cbnz	r3, 6078 <FatFile::openCluster(FatFile*)+0x34>
  if (isOpen()) {
    604e:	ldrb	r6, [r0, #0]
    6050:	cbz	r6, 6056 <FatFile::openCluster(FatFile*)+0x12>
  return false;
    6052:	mov	r0, r3
}
    6054:	pop	{r4, r5, r6, pc}
    return openRoot(file->m_vol);
    6056:	ldr	r5, [r1, #8]
  memset(this, 0, sizeof(FatFile));
    6058:	movs	r2, #36	; 0x24
    605a:	mov	r1, r6
    605c:	bl	e074 <memset>
  m_vol = vol;
    6060:	str	r5, [r4, #8]
    6062:	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
    6064:	cmp	r3, #16
    6066:	beq.n	6096 <FatFile::openCluster(FatFile*)+0x52>
    6068:	cmp	r3, #32
    606a:	bne.n	6092 <FatFile::openCluster(FatFile*)+0x4e>
    606c:	movs	r2, #128	; 0x80
  m_flags = FILE_FLAG_READ;
    606e:	movs	r3, #1
      m_attributes = FILE_ATTR_ROOT_FIXED;
    6070:	strb	r2, [r4, #0]
  return true;
    6072:	mov	r0, r3
  m_flags = FILE_FLAG_READ;
    6074:	strb	r3, [r4, #2]
}
    6076:	pop	{r4, r5, r6, pc}
  memset(this, 0, sizeof(FatFile));
    6078:	movs	r2, #36	; 0x24
    607a:	movs	r1, #0
    607c:	bl	e074 <memset>
  m_flags = FILE_FLAG_READ;
    6080:	movs	r0, #1
  m_attributes = FILE_ATTR_SUBDIR;
    6082:	movs	r3, #16
  m_flags = FILE_FLAG_READ;
    6084:	strb	r0, [r4, #2]
  m_attributes = FILE_ATTR_SUBDIR;
    6086:	strb	r3, [r4, #0]
  m_firstCluster = file->m_dirCluster;
    6088:	ldrd	r2, r3, [r5, #8]
  m_vol = file->m_vol;
    608c:	str	r2, [r4, #8]
  m_firstCluster = file->m_dirCluster;
    608e:	str	r3, [r4, #32]
}
    6090:	pop	{r4, r5, r6, pc}
  switch (vol->fatType()) {
    6092:	mov	r0, r6
}
    6094:	pop	{r4, r5, r6, pc}
  switch (vol->fatType()) {
    6096:	movs	r2, #64	; 0x40
    6098:	b.n	606e <FatFile::openCluster(FatFile*)+0x2a>
    609a:	nop

0000609c <FatFile::openRoot(FatVolume*)>:
bool FatFile::openRoot(FatVolume* vol) {
    609c:	push	{r4, r5, r6, lr}
  if (isOpen()) {
    609e:	ldrb	r5, [r0, #0]
    60a0:	cbz	r5, 60a6 <FatFile::openRoot(FatVolume*)+0xa>
  return false;
    60a2:	movs	r0, #0
}
    60a4:	pop	{r4, r5, r6, pc}
    60a6:	mov	r6, r1
    60a8:	mov	r4, r0
  memset(this, 0, sizeof(FatFile));
    60aa:	movs	r2, #36	; 0x24
    60ac:	mov	r1, r5
    60ae:	bl	e074 <memset>
  m_vol = vol;
    60b2:	str	r6, [r4, #8]
    60b4:	ldrb	r3, [r6, #7]
  switch (vol->fatType()) {
    60b6:	cmp	r3, #16
    60b8:	beq.n	60ce <FatFile::openRoot(FatVolume*)+0x32>
    60ba:	cmp	r3, #32
    60bc:	bne.n	60ca <FatFile::openRoot(FatVolume*)+0x2e>
    60be:	movs	r2, #128	; 0x80
  m_flags = FILE_FLAG_READ;
    60c0:	movs	r3, #1
      m_attributes = FILE_ATTR_ROOT_FIXED;
    60c2:	strb	r2, [r4, #0]
  return true;
    60c4:	mov	r0, r3
  m_flags = FILE_FLAG_READ;
    60c6:	strb	r3, [r4, #2]
}
    60c8:	pop	{r4, r5, r6, pc}
  switch (vol->fatType()) {
    60ca:	mov	r0, r5
}
    60cc:	pop	{r4, r5, r6, pc}
  switch (vol->fatType()) {
    60ce:	movs	r2, #64	; 0x40
    60d0:	b.n	60c0 <FatFile::openRoot(FatVolume*)+0x24>
    60d2:	nop

000060d4 <FatFile::read(void*, unsigned int)>:
int FatFile::read(void* buf, size_t nbyte) {
    60d4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    60d8:	vpush	{d8}
  bool isReadable() const { return m_flags & FILE_FLAG_READ; }
    60dc:	ldrb	r3, [r0, #2]
    60de:	sub	sp, #12
    60e0:	mov	r5, r0
  if (!isReadable()) {
    60e2:	lsls	r7, r3, #31
    60e4:	bpl.w	6200 <FatFile::read(void*, unsigned int)+0x12c>
  bool isFile() const { return m_attributes & FILE_ATTR_FILE; }
    60e8:	mov	r8, r1
    60ea:	ldrb	r1, [r0, #0]
    60ec:	mov	sl, r2
  if (isFile()) {
    60ee:	lsls	r6, r1, #28
    60f0:	bmi.w	6216 <FatFile::read(void*, unsigned int)+0x142>
  } else if (isRootFixed()) {
    60f4:	lsls	r4, r1, #25
    60f6:	bpl.n	610a <FatFile::read(void*, unsigned int)+0x36>
        FS_DIR_SIZE * m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    60f8:	ldr	r3, [r0, #8]
    60fa:	ldrh	r2, [r3, #8]
    60fc:	ldr	r3, [r0, #20]
    uint16_t tmp16 =
    60fe:	rsb	r3, r3, r2, lsl #5
    if (nbyte > tmp16) {
    6102:	uxth	r3, r3
    6104:	cmp	sl, r3
    6106:	it	cs
    6108:	movcs	sl, r3
  while (toRead) {
    610a:	cmp.w	sl, #0
    610e:	beq.w	6270 <FatFile::read(void*, unsigned int)+0x19c>
    uint32_t tmp32 = m_fileSize - m_curPosition;
    6112:	ldr	r2, [r5, #20]
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    6114:	add.w	r3, r5, #16
    if (isRootFixed()) {
    6118:	lsls	r0, r1, #25
    uint32_t tmp32 = m_fileSize - m_curPosition;
    611a:	mov	r6, sl
  uint8_t sectorOfCluster = 0;
    611c:	mov.w	r9, #0
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    6120:	vmov	s16, r3
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    6124:	ldr	r7, [r5, #8]
    6126:	ubfx	fp, r2, #0, #9
    if (isRootFixed()) {
    612a:	bpl.n	61a8 <FatFile::read(void*, unsigned int)+0xd4>
      sector = m_vol->rootDirStart() +
    612c:	ldr	r1, [r7, #32]
    612e:	add.w	r1, r1, r2, lsr #9
    if (offset != 0 || toRead < m_vol->bytesPerSector() ||
    6132:	cmp.w	fp, #0
    6136:	bne.n	61dc <FatFile::read(void*, unsigned int)+0x108>
    6138:	cmp.w	r6, #512	; 0x200
    613c:	bcc.n	61dc <FatFile::read(void*, unsigned int)+0x108>
  uint32_t sector() { return m_sector; }
    613e:	ldr	r2, [r7, #44]	; 0x2c
    6140:	cmp	r1, r2
    6142:	beq.n	61dc <FatFile::read(void*, unsigned int)+0x108>
    } else if (toRead >= 2 * m_vol->bytesPerSector()) {
    6144:	cmp.w	r6, #1024	; 0x400
    6148:	bcc.w	6250 <FatFile::read(void*, unsigned int)+0x17c>
      if (!isRootFixed()) {
    614c:	ldrb	r0, [r5, #0]
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    614e:	lsrs	r3, r6, #9
      if (!isRootFixed()) {
    6150:	lsls	r0, r0, #25
    6152:	bmi.n	6160 <FatFile::read(void*, unsigned int)+0x8c>
        uint32_t mb = m_vol->sectorsPerCluster() - sectorOfCluster;
    6154:	ldrb	r0, [r7, #4]
    6156:	sub.w	r0, r0, r9
    615a:	cmp	r3, r0
    615c:	it	cs
    615e:	movcs	r3, r0
    return sector <= m_sector && m_sector < (sector + count);
    6160:	cmp	r1, r2
      n = ns << m_vol->bytesPerSectorShift();
    6162:	mov.w	r4, r3, lsl #9
    6166:	bhi.n	6182 <FatFile::read(void*, unsigned int)+0xae>
    6168:	adds	r0, r1, r3
    616a:	cmp	r2, r0
    616c:	bcs.n	6182 <FatFile::read(void*, unsigned int)+0xae>
    if (isCached(sector, count) && !sync()) {
    616e:	add.w	r0, r7, #36	; 0x24
    6172:	strd	r1, r3, [sp]
    6176:	bl	3184 <FsCache::sync()>
    617a:	ldrd	r1, r3, [sp]
    617e:	cmp	r0, #0
    6180:	beq.n	6200 <FatFile::read(void*, unsigned int)+0x12c>
    return m_blockDev->readSectors(sector, dst, count);
    6182:	ldr	r0, [r7, #40]	; 0x28
    6184:	ldr	r2, [r0, #0]
    6186:	ldr	r7, [r2, #20]
    6188:	mov	r2, r8
    618a:	blx	r7
      if (!m_vol->cacheSafeRead(sector, dst, ns)) {
    618c:	cmp	r0, #0
    618e:	beq.n	6200 <FatFile::read(void*, unsigned int)+0x12c>
    m_curPosition += n;
    6190:	ldr	r2, [r5, #20]
  while (toRead) {
    6192:	subs	r6, r6, r4
    dst += n;
    6194:	add	r8, r4
    m_curPosition += n;
    6196:	add	r2, r4
    6198:	str	r2, [r5, #20]
  while (toRead) {
    619a:	beq.n	6270 <FatFile::read(void*, unsigned int)+0x19c>
  bool isRootFixed() const { return m_attributes & FILE_ATTR_ROOT_FIXED; }
    619c:	ldrb	r1, [r5, #0]
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    619e:	ubfx	fp, r2, #0, #9
    61a2:	ldr	r7, [r5, #8]
    if (isRootFixed()) {
    61a4:	lsls	r0, r1, #25
    61a6:	bmi.n	612c <FatFile::read(void*, unsigned int)+0x58>
    return (position >> 9) & m_clusterSectorMask;
    61a8:	ldrb.w	r9, [r7, #5]
    61ac:	and.w	r9, r9, r2, lsr #9
      if (offset == 0 && sectorOfCluster == 0) {
    61b0:	cmp.w	fp, #0
    61b4:	bne.n	6224 <FatFile::read(void*, unsigned int)+0x150>
    61b6:	cmp.w	r9, #0
    61ba:	bne.n	6224 <FatFile::read(void*, unsigned int)+0x150>
        if (m_curPosition == 0) {
    61bc:	cmp	r2, #0
    61be:	bne.n	6228 <FatFile::read(void*, unsigned int)+0x154>
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    61c0:	lsls	r2, r1, #24
  uint32_t rootDirStart() const { return m_rootDirStart; }
    61c2:	ite	mi
    61c4:	ldrmi	r2, [r7, #32]
    61c6:	ldrpl	r2, [r5, #32]
          m_curCluster++;
    61c8:	str	r2, [r5, #16]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    61ca:	subs	r2, #2
    61cc:	ldrb	r0, [r7, #6]
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    61ce:	ldr	r1, [r7, #20]
    61d0:	lsls	r2, r0
    61d2:	add	r1, r9
    61d4:	add	r1, r2
    if (offset != 0 || toRead < m_vol->bytesPerSector() ||
    61d6:	cmp.w	fp, #0
    61da:	beq.n	6138 <FatFile::read(void*, unsigned int)+0x64>
      n = m_vol->bytesPerSector() - offset;
    61dc:	rsb	r4, fp, #512	; 0x200
    return m_cache.prepare(sector, options);
    61e0:	movs	r2, #0
    61e2:	add.w	r0, r7, #36	; 0x24
    61e6:	cmp	r4, r6
    61e8:	it	cs
    61ea:	movcs	r4, r6
    61ec:	bl	31dc <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    61f0:	cbz	r0, 6200 <FatFile::read(void*, unsigned int)+0x12c>
      memcpy(dst, src, n);
    61f2:	add.w	r1, r0, fp
    61f6:	mov	r2, r4
    61f8:	mov	r0, r8
    61fa:	bl	a0d4 <memcpy>
    61fe:	b.n	6190 <FatFile::read(void*, unsigned int)+0xbc>
  m_error |= READ_ERROR;
    6200:	ldrb	r3, [r5, #1]
  return -1;
    6202:	mov.w	r0, #4294967295
  m_error |= READ_ERROR;
    6206:	orr.w	r3, r3, #2
    620a:	strb	r3, [r5, #1]
}
    620c:	add	sp, #12
    620e:	vpop	{d8}
    6212:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    uint32_t tmp32 = m_fileSize - m_curPosition;
    6216:	ldr	r3, [r0, #28]
    6218:	ldr	r2, [r0, #20]
    621a:	subs	r3, r3, r2
    621c:	cmp	sl, r3
    621e:	it	cs
    6220:	movcs	sl, r3
    6222:	b.n	610a <FatFile::read(void*, unsigned int)+0x36>
          m_curCluster++;
    6224:	ldr	r2, [r5, #16]
    6226:	b.n	61ca <FatFile::read(void*, unsigned int)+0xf6>
        } else if (isFile() && isContiguous()) {
    6228:	lsls	r3, r1, #28
    622a:	bpl.n	6238 <FatFile::read(void*, unsigned int)+0x164>
    622c:	ldrb	r2, [r5, #2]
    622e:	lsls	r4, r2, #25
    6230:	bpl.n	6238 <FatFile::read(void*, unsigned int)+0x164>
          m_curCluster++;
    6232:	ldr	r2, [r5, #16]
    6234:	adds	r2, #1
    6236:	b.n	61c8 <FatFile::read(void*, unsigned int)+0xf4>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    6238:	vmov	r2, s16
    623c:	mov	r0, r7
    623e:	ldr	r1, [r5, #16]
    6240:	bl	6b9c <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    6244:	cmp	r0, #0
    6246:	blt.n	6200 <FatFile::read(void*, unsigned int)+0x12c>
          if (fg == 0) {
    6248:	beq.n	6264 <FatFile::read(void*, unsigned int)+0x190>
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    624a:	ldr	r7, [r5, #8]
    624c:	ldr	r2, [r5, #16]
    624e:	b.n	61ca <FatFile::read(void*, unsigned int)+0xf6>
    return m_blockDev->readSector(sector, dst);
    6250:	ldr	r0, [r7, #40]	; 0x28
    6252:	mov	r2, r8
    6254:	ldr	r3, [r0, #0]
    6256:	ldr	r3, [r3, #16]
    6258:	blx	r3
      if (!m_vol->cacheSafeRead(sector, dst)) {
    625a:	cmp	r0, #0
    625c:	beq.n	6200 <FatFile::read(void*, unsigned int)+0x12c>
      n = m_vol->bytesPerSector();
    625e:	mov.w	r4, #512	; 0x200
    6262:	b.n	6190 <FatFile::read(void*, unsigned int)+0xbc>
            if (isDir()) {
    6264:	ldrb	r3, [r5, #0]
    6266:	tst.w	r3, #208	; 0xd0
    626a:	beq.n	6200 <FatFile::read(void*, unsigned int)+0x12c>
  return nbyte - toRead;
    626c:	sub.w	sl, sl, r6
    6270:	mov	r0, sl
}
    6272:	add	sp, #12
    6274:	vpop	{d8}
    6278:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000627c <FatFile::peek()>:
int FatFile::peek() {
    627c:	push	{r4, r5, r6, lr}
    627e:	sub	sp, #8
    return read(&b, 1) == 1 ? b : -1;
    6280:	movs	r2, #1
    6282:	mov	r4, r0
    6284:	add.w	r1, sp, #7
  uint32_t saveCurCluster = m_curCluster;
    6288:	ldrd	r5, r6, [r0, #16]
    628c:	bl	60d4 <FatFile::read(void*, unsigned int)>
    6290:	cmp	r0, #1
    6292:	ite	eq
    6294:	ldrbeq.w	r0, [sp, #7]
    6298:	movne.w	r0, #4294967295
  m_curCluster = saveCurCluster;
    629c:	strd	r5, r6, [r4, #16]
}
    62a0:	add	sp, #8
    62a2:	pop	{r4, r5, r6, pc}

000062a4 <FatFile::readDirCache(bool)>:
  uint8_t i = (m_curPosition >> 5) & 0XF;
    62a4:	ldr	r3, [r0, #20]
  if (i == 0 || !skipReadOk) {
    62a6:	tst.w	r3, #480	; 0x1e0
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
    62aa:	push	{r4, r5, lr}
    62ac:	mov	r4, r0
    62ae:	sub	sp, #12
  uint8_t i = (m_curPosition >> 5) & 0XF;
    62b0:	ubfx	r5, r3, #5, #4
  if (i == 0 || !skipReadOk) {
    62b4:	beq.n	62ca <FatFile::readDirCache(bool)+0x26>
    62b6:	cmp	r1, #1
    62b8:	bne.n	62ca <FatFile::readDirCache(bool)+0x26>
    m_curPosition += FS_DIR_SIZE;
    62ba:	adds	r3, #32
    62bc:	str	r3, [r0, #20]
  uint8_t* cacheBuffer() { return m_buffer; }
    62be:	ldr	r0, [r4, #8]
    62c0:	adds	r0, #52	; 0x34
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    62c2:	add.w	r0, r0, r5, lsl #5
}
    62c6:	add	sp, #12
    62c8:	pop	{r4, r5, pc}
    int8_t n = read(&n, 1);
    62ca:	movs	r2, #1
    62cc:	add.w	r1, sp, #7
    62d0:	mov	r0, r4
    62d2:	bl	60d4 <FatFile::read(void*, unsigned int)>
    if (n != 1) {
    62d6:	sxtb	r0, r0
    62d8:	cmp	r0, #1
    62da:	bne.n	62e4 <FatFile::readDirCache(bool)+0x40>
    m_curPosition += FS_DIR_SIZE - 1;
    62dc:	ldr	r3, [r4, #20]
    62de:	adds	r3, #31
    62e0:	str	r3, [r4, #20]
    62e2:	b.n	62be <FatFile::readDirCache(bool)+0x1a>
  return nullptr;
    62e4:	movs	r0, #0
    62e6:	b.n	62c6 <FatFile::readDirCache(bool)+0x22>

000062e8 <FatFile::rename(FatFile*, char const*)>:
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    62e8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!(isFile() || isSubDir())) {
    62ec:	ldrb	r3, [r0, #0]
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    62ee:	sub	sp, #104	; 0x68
  FatFile() {}
    62f0:	movs	r6, #0
  if (!(isFile() || isSubDir())) {
    62f2:	tst.w	r3, #24
    62f6:	str	r6, [sp, #32]
    62f8:	str	r6, [sp, #68]	; 0x44
    62fa:	beq.n	630a <FatFile::rename(FatFile*, char const*)+0x22>
    62fc:	mov	r7, r2
  if (m_vol != dirFile->m_vol) {
    62fe:	ldr	r3, [r0, #8]
    6300:	ldr	r2, [r1, #8]
    6302:	mov	r4, r0
    6304:	mov	r5, r1
    6306:	cmp	r2, r3
    6308:	beq.n	6312 <FatFile::rename(FatFile*, char const*)+0x2a>
  return false;
    630a:	movs	r0, #0
}
    630c:	add	sp, #104	; 0x68
    630e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6312:	bl	5ab0 <FatFile::sync() [clone .part.0]>
  oldFile = *this;
    6316:	mov	lr, r4
    6318:	add.w	ip, sp, #68	; 0x44
    631c:	ldmia.w	lr!, {r0, r1, r2, r3}
    6320:	stmia.w	ip!, {r0, r1, r2, r3}
    6324:	ldmia.w	lr!, {r0, r1, r2, r3}
    6328:	stmia.w	ip!, {r0, r1, r2, r3}
    632c:	ldr.w	r3, [lr]
    6330:	mov	r2, r6
    6332:	ldr	r1, [r4, #24]
    6334:	str.w	r3, [ip]
    6338:	ldr	r3, [r4, #8]
    633a:	add.w	r0, r3, #36	; 0x24
    633e:	bl	31dc <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    6342:	cmp	r0, #0
    6344:	beq.n	630a <FatFile::rename(FatFile*, char const*)+0x22>
  return dir + (m_dirIndex & 0XF);
    6346:	ldrh	r2, [r4, #4]
  memcpy(&entry, dir, sizeof(entry));
    6348:	mov	ip, sp
  if (isFile()) {
    634a:	ldrb.w	r8, [r4]
  return dir + (m_dirIndex & 0XF);
    634e:	and.w	r2, r2, #15
  memcpy(&entry, dir, sizeof(entry));
    6352:	add.w	lr, r0, r2, lsl #5
    6356:	lsls	r2, r2, #5
    6358:	ldr.w	r1, [lr, #4]
    635c:	ldr	r0, [r0, r2]
    635e:	ldr.w	r3, [lr, #12]
    6362:	ldr.w	r2, [lr, #8]
    6366:	stmia.w	ip!, {r0, r1, r2, r3}
    636a:	ldr.w	r1, [lr, #20]
    636e:	ldr.w	r2, [lr, #24]
    6372:	ldr.w	r3, [lr, #28]
    6376:	ldr.w	r0, [lr, #16]
    637a:	stmia.w	ip!, {r0, r1, r2, r3}
  if (isFile()) {
    637e:	ands.w	r3, r8, #8
    if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    6382:	mov	r2, r7
    6384:	mov	r1, r5
  if (isFile()) {
    6386:	bne.w	64c0 <FatFile::rename(FatFile*, char const*)+0x1d8>
    if (!file.mkdir(dirFile, newPath, false)) {
    638a:	add	r0, sp, #32
    638c:	bl	5e58 <FatFile::mkdir(FatFile*, char const*, bool)>
    6390:	cmp	r0, #0
    6392:	beq.n	630a <FatFile::rename(FatFile*, char const*)+0x22>
    dirCluster = file.m_firstCluster;
    6394:	ldr	r6, [sp, #64]	; 0x40
  m_dirIndex = file.m_dirIndex;
    6396:	ldrh.w	r3, [sp, #36]	; 0x24
  file.m_attributes = FILE_ATTR_CLOSED;
    639a:	movs	r5, #0
  m_dirSector = file.m_dirSector;
    639c:	ldr	r1, [sp, #56]	; 0x38
    639e:	movs	r2, #1
  m_dirIndex = file.m_dirIndex;
    63a0:	strh	r3, [r4, #4]
  m_lfnOrd = file.m_lfnOrd;
    63a2:	ldrb.w	r3, [sp, #35]	; 0x23
    63a6:	ldr	r0, [r4, #8]
    63a8:	strb	r3, [r4, #3]
  m_dirCluster = file.m_dirCluster;
    63aa:	ldr	r3, [sp, #44]	; 0x2c
    63ac:	adds	r0, #36	; 0x24
  m_dirSector = file.m_dirSector;
    63ae:	str	r1, [r4, #24]
  m_dirCluster = file.m_dirCluster;
    63b0:	str	r3, [r4, #12]
  file.m_attributes = FILE_ATTR_CLOSED;
    63b2:	strb.w	r5, [sp, #32]
  file.m_flags = 0;
    63b6:	strb.w	r5, [sp, #34]	; 0x22
    63ba:	bl	31dc <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    63be:	cmp	r0, #0
    63c0:	beq.n	630a <FatFile::rename(FatFile*, char const*)+0x22>
  return dir + (m_dirIndex & 0XF);
    63c2:	ldrh	r3, [r4, #4]
    63c4:	and.w	r3, r3, #15
    63c8:	add.w	r0, r0, r3, lsl #5
  memcpy(&dir->createTimeMs, &entry.createTimeMs,
    63cc:	ldr.w	r3, [sp, #13]
    63d0:	str.w	r3, [r0, #13]
    63d4:	ldr.w	r3, [sp, #17]
    63d8:	str.w	r3, [r0, #17]
    63dc:	ldr.w	r3, [sp, #21]
    63e0:	str.w	r3, [r0, #21]
    63e4:	ldr.w	r3, [sp, #25]
    63e8:	str.w	r3, [r0, #25]
    63ec:	ldrh.w	r3, [sp, #29]
    63f0:	strh.w	r3, [r0, #29]
    63f4:	ldrb.w	r3, [sp, #31]
    63f8:	strb	r3, [r0, #31]
  dir->attributes = entry.attributes;
    63fa:	ldrb.w	r3, [sp, #11]
    63fe:	strb	r3, [r0, #11]
  if (dirCluster) {
    6400:	cmp	r6, #0
    6402:	beq.n	647c <FatFile::rename(FatFile*, char const*)+0x194>
    uint32_t sector = m_vol->clusterStartSector(dirCluster);
    6404:	ldr	r0, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    6406:	subs	r3, r6, #2
    return m_cache.prepare(sector, options);
    6408:	mov	r2, r5
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    640a:	ldrb	r1, [r0, #6]
    return m_cache.prepare(sector, options);
    640c:	adds	r0, #36	; 0x24
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    640e:	lsls	r3, r1
    6410:	ldr.w	r1, [r0, #-16]
    return m_cache.prepare(sector, options);
    6414:	add	r1, r3
    6416:	bl	31dc <FsCache::prepare(unsigned long, unsigned char)>
    if (!dir) {
    641a:	mov	r5, r0
    641c:	cmp	r0, #0
    641e:	beq.w	630a <FatFile::rename(FatFile*, char const*)+0x22>
    memcpy(&entry, &dir[1], sizeof(entry));
    6422:	ldr	r0, [r0, #32]
    6424:	mov	r7, sp
    6426:	ldr	r1, [r5, #36]	; 0x24
    6428:	ldr	r2, [r5, #40]	; 0x28
    642a:	ldr	r3, [r5, #44]	; 0x2c
    642c:	stmia	r7!, {r0, r1, r2, r3}
    642e:	ldr	r0, [r5, #48]	; 0x30
    6430:	ldr	r1, [r5, #52]	; 0x34
    6432:	ldr	r2, [r5, #56]	; 0x38
    6434:	ldr	r3, [r5, #60]	; 0x3c
    6436:	stmia	r7!, {r0, r1, r2, r3}
    if (!m_vol->freeChain(dirCluster)) {
    6438:	mov	r1, r6
    643a:	ldr	r0, [r4, #8]
    643c:	bl	6ca8 <FatPartition::freeChain(unsigned long)>
    6440:	cmp	r0, #0
    6442:	beq.w	630a <FatFile::rename(FatFile*, char const*)+0x22>
    sector = m_vol->clusterStartSector(m_firstCluster);
    6446:	ldr	r0, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    6448:	ldr	r3, [r4, #32]
    644a:	ldrb	r2, [r0, #6]
    return m_cache.prepare(sector, options);
    644c:	adds	r0, #36	; 0x24
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    644e:	subs	r3, #2
    6450:	ldr.w	r1, [r0, #-16]
    6454:	lsls	r3, r2
    return m_cache.prepare(sector, options);
    6456:	movs	r2, #1
    6458:	add	r1, r3
    645a:	bl	31dc <FsCache::prepare(unsigned long, unsigned char)>
    if (!dir) {
    645e:	mov	r6, r0
    6460:	cmp	r0, #0
    6462:	beq.w	630a <FatFile::rename(FatFile*, char const*)+0x22>
    memcpy(&dir[1], &entry, sizeof(entry));
    6466:	mov	r5, sp
    6468:	ldmia	r5!, {r0, r1, r2, r3}
    646a:	str	r0, [r6, #32]
    646c:	str	r1, [r6, #36]	; 0x24
    646e:	str	r2, [r6, #40]	; 0x28
    6470:	str	r3, [r6, #44]	; 0x2c
    6472:	ldmia	r5!, {r0, r1, r2, r3}
    6474:	str	r0, [r6, #48]	; 0x30
    6476:	str	r1, [r6, #52]	; 0x34
    6478:	str	r2, [r6, #56]	; 0x38
    647a:	str	r3, [r6, #60]	; 0x3c
  oldFile.m_firstCluster = 0;
    647c:	movs	r1, #0
  oldFile.m_flags = FILE_FLAG_WRITE;
    647e:	movs	r2, #2
  oldFile.m_attributes = FILE_ATTR_FILE;
    6480:	movs	r3, #8
  if (!oldFile.remove()) {
    6482:	add	r0, sp, #68	; 0x44
  oldFile.m_firstCluster = 0;
    6484:	str	r1, [sp, #100]	; 0x64
  oldFile.m_flags = FILE_FLAG_WRITE;
    6486:	strb.w	r2, [sp, #70]	; 0x46
  oldFile.m_attributes = FILE_ATTR_FILE;
    648a:	strb.w	r3, [sp, #68]	; 0x44
  if (!oldFile.remove()) {
    648e:	bl	75f8 <FatFile::remove()>
    6492:	cmp	r0, #0
    6494:	beq.w	630a <FatFile::rename(FatFile*, char const*)+0x22>
  return m_vol->cacheSync();
    6498:	ldr	r4, [r4, #8]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    649a:	add.w	r0, r4, #36	; 0x24
    649e:	bl	3184 <FsCache::sync()>
    64a2:	cmp	r0, #0
    64a4:	beq.w	630a <FatFile::rename(FatFile*, char const*)+0x22>
    64a8:	add.w	r0, r4, #564	; 0x234
    64ac:	bl	3184 <FsCache::sync()>
    64b0:	cmp	r0, #0
    64b2:	beq.w	630a <FatFile::rename(FatFile*, char const*)+0x22>
    64b6:	ldr	r0, [r4, #0]
  bool syncDevice() { return m_blockDev->syncDevice(); }
    64b8:	ldr	r3, [r0, #0]
    64ba:	ldr	r3, [r3, #28]
    64bc:	blx	r3
    64be:	b.n	630c <FatFile::rename(FatFile*, char const*)+0x24>
    if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    64c0:	movw	r3, #2561	; 0xa01
    64c4:	mov	r0, ip
    64c6:	bl	5f3c <FatFile::open(FatFile*, char const*, int)>
    64ca:	cmp	r0, #0
    64cc:	bne.w	6396 <FatFile::rename(FatFile*, char const*)+0xae>
    64d0:	b.n	630a <FatFile::rename(FatFile*, char const*)+0x22>
    64d2:	nop

000064d4 <FatFile::rmdir()>:
  if (!isSubDir() || (!USE_LONG_FILE_NAMES && isLFN())) {
    64d4:	ldrb	r3, [r0, #0]
    64d6:	lsls	r2, r3, #27
    64d8:	bmi.n	64de <FatFile::rmdir()+0xa>
}
    64da:	movs	r0, #0
    64dc:	bx	lr
  if (pos == m_curPosition) {
    64de:	ldr	r3, [r0, #20]
bool FatFile::rmdir() {
    64e0:	push	{r4, r5, lr}
    64e2:	mov	r4, r0
    64e4:	sub	sp, #12
  if (pos == m_curPosition) {
    64e6:	cbz	r3, 64f6 <FatFile::rmdir()+0x22>
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    64e8:	ldrb	r3, [r0, #2]
    m_curCluster = 0;
    64ea:	movs	r2, #0
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    64ec:	bic.w	r3, r3, #32
  m_curPosition = pos;
    64f0:	strd	r2, r2, [r0, #16]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    64f4:	strb	r3, [r0, #2]
bool FatFile::rmdir() {
    64f6:	movs	r3, #0
    64f8:	b.n	651a <FatFile::rmdir()+0x46>
    m_curPosition += FS_DIR_SIZE;
    64fa:	str	r3, [r4, #20]
    64fc:	ldr	r3, [r4, #8]
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    64fe:	lsls	r2, r5, #5
    6500:	adds	r3, #52	; 0x34
    if (dir->name[0] == FAT_NAME_FREE) {
    6502:	ldrb	r2, [r3, r2]
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    6504:	add.w	r3, r3, r5, lsl #5
    if (dir->name[0] == FAT_NAME_FREE) {
    6508:	cbz	r2, 6546 <FatFile::rmdir()+0x72>
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    650a:	cmp	r2, #229	; 0xe5
    650c:	beq.n	6518 <FatFile::rmdir()+0x44>
    650e:	cmp	r2, #46	; 0x2e
    6510:	beq.n	6518 <FatFile::rmdir()+0x44>
    if (isFatFileOrSubdir(dir)) {
    6512:	ldrb	r3, [r3, #11]
    6514:	lsls	r3, r3, #28
    6516:	bpl.n	655e <FatFile::rmdir()+0x8a>
  uint8_t i = (m_curPosition >> 5) & 0XF;
    6518:	ldr	r3, [r4, #20]
  if (i == 0 || !skipReadOk) {
    651a:	tst.w	r3, #480	; 0x1e0
  uint8_t i = (m_curPosition >> 5) & 0XF;
    651e:	ubfx	r5, r3, #5, #4
    m_curPosition += FS_DIR_SIZE;
    6522:	add.w	r3, r3, #32
  if (i == 0 || !skipReadOk) {
    6526:	bne.n	64fa <FatFile::rmdir()+0x26>
    int8_t n = read(&n, 1);
    6528:	movs	r2, #1
    652a:	add.w	r1, sp, #7
    652e:	mov	r0, r4
    6530:	bl	60d4 <FatFile::read(void*, unsigned int)>
    if (n != 1) {
    6534:	sxtb	r0, r0
    6536:	cmp	r0, #1
    6538:	bne.n	6542 <FatFile::rmdir()+0x6e>
    m_curPosition += FS_DIR_SIZE - 1;
    653a:	ldr	r3, [r4, #20]
    653c:	adds	r3, #31
    653e:	str	r3, [r4, #20]
    6540:	b.n	64fc <FatFile::rmdir()+0x28>
      if (!getError()) {
    6542:	ldrb	r3, [r4, #1]
    6544:	cbnz	r3, 655e <FatFile::rmdir()+0x8a>
  m_flags |= FILE_FLAG_WRITE;
    6546:	ldrb	r3, [r4, #2]
  m_attributes = FILE_ATTR_FILE;
    6548:	movs	r2, #8
  return remove();
    654a:	mov	r0, r4
  m_flags |= FILE_FLAG_WRITE;
    654c:	orr.w	r3, r3, #2
  m_attributes = FILE_ATTR_FILE;
    6550:	strb	r2, [r4, #0]
  m_flags |= FILE_FLAG_WRITE;
    6552:	strb	r3, [r4, #2]
}
    6554:	add	sp, #12
    6556:	ldmia.w	sp!, {r4, r5, lr}
  return remove();
    655a:	b.w	75f8 <FatFile::remove()>
}
    655e:	movs	r0, #0
    6560:	add	sp, #12
    6562:	pop	{r4, r5, pc}

00006564 <FatFile::seekSet(unsigned long)>:
bool FatFile::seekSet(uint32_t pos) {
    6564:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  bool isOpen() const { return m_attributes; }
    6568:	ldrb	r3, [r0, #0]
    656a:	mov	r4, r0
  uint32_t tmp = m_curCluster;
    656c:	ldr	r7, [r0, #16]
  if (!isOpen()) {
    656e:	cmp	r3, #0
    6570:	beq.n	65e6 <FatFile::seekSet(unsigned long)+0x82>
    6572:	mov	r5, r1
  if (pos == m_curPosition) {
    6574:	ldr	r1, [r0, #20]
    6576:	cmp	r1, r5
    6578:	beq.n	6600 <FatFile::seekSet(unsigned long)+0x9c>
  if (pos == 0) {
    657a:	cmp	r5, #0
    657c:	beq.n	65ee <FatFile::seekSet(unsigned long)+0x8a>
  if (isFile()) {
    657e:	lsls	r0, r3, #28
    6580:	bpl.n	65d8 <FatFile::seekSet(unsigned long)+0x74>
    if (pos > m_fileSize) {
    6582:	ldr	r2, [r4, #28]
    6584:	cmp	r2, r5
    6586:	bcc.n	65e6 <FatFile::seekSet(unsigned long)+0x82>
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    6588:	ldr.w	ip, [r4, #8]
    658c:	subs	r6, r5, #1
  bool isContiguous() const { return m_flags & FILE_FLAG_CONTIGUOUS; }
    658e:	ldrb	r2, [r4, #2]
    return m_sectorsPerClusterShift + m_bytesPerSectorShift;
    6590:	ldrb.w	r0, [ip, #6]
  if (isContiguous()) {
    6594:	tst.w	r2, #64	; 0x40
    6598:	add.w	r0, r0, #9
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    659c:	uxtb	r0, r0
    659e:	lsr.w	r6, r6, r0
  if (isContiguous()) {
    65a2:	bne.n	6606 <FatFile::seekSet(unsigned long)+0xa2>
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());
    65a4:	subs	r2, r1, #1
    65a6:	lsrs	r2, r0
  if (nNew < nCur || m_curPosition == 0) {
    65a8:	cbz	r1, 65ae <FatFile::seekSet(unsigned long)+0x4a>
    65aa:	cmp	r6, r2
    65ac:	bcs.n	660e <FatFile::seekSet(unsigned long)+0xaa>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    65ae:	lsls	r3, r3, #24
  uint32_t rootDirStart() const { return m_rootDirStart; }
    65b0:	ite	mi
    65b2:	ldrmi.w	r3, [ip, #32]
    65b6:	ldrpl	r3, [r4, #32]
    65b8:	str	r3, [r4, #16]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    65ba:	add.w	r8, r4, #16
    65be:	b.n	65ce <FatFile::seekSet(unsigned long)+0x6a>
    65c0:	ldr	r1, [r4, #16]
    65c2:	subs	r6, #1
    65c4:	ldr	r0, [r4, #8]
    65c6:	bl	6b9c <FatPartition::fatGet(unsigned long, unsigned long*)>
    65ca:	cmp	r0, #0
    65cc:	ble.n	65e6 <FatFile::seekSet(unsigned long)+0x82>
    65ce:	mov	r2, r8
  while (nNew--) {
    65d0:	cmp	r6, #0
    65d2:	bne.n	65c0 <FatFile::seekSet(unsigned long)+0x5c>
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    65d4:	ldrb	r2, [r4, #2]
    65d6:	b.n	65f2 <FatFile::seekSet(unsigned long)+0x8e>
  } else if (isRootFixed()) {
    65d8:	lsls	r2, r3, #25
    65da:	bpl.n	6588 <FatFile::seekSet(unsigned long)+0x24>
  uint16_t rootDirEntryCount() const { return m_rootDirEntryCount; }
    65dc:	ldr	r3, [r4, #8]
    if (pos <= FS_DIR_SIZE * m_vol->rootDirEntryCount()) {
    65de:	ldrh	r3, [r3, #8]
    65e0:	cmp.w	r5, r3, lsl #5
    65e4:	bls.n	65d4 <FatFile::seekSet(unsigned long)+0x70>
  return false;
    65e6:	movs	r0, #0
  m_curCluster = tmp;
    65e8:	str	r7, [r4, #16]
}
    65ea:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    65ee:	ldrb	r2, [r0, #2]
    m_curCluster = 0;
    65f0:	str	r5, [r0, #16]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    65f2:	bic.w	r2, r2, #32
  return true;
    65f6:	movs	r0, #1
  m_curPosition = pos;
    65f8:	str	r5, [r4, #20]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    65fa:	strb	r2, [r4, #2]
}
    65fc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return true;
    6600:	movs	r0, #1
}
    6602:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_curCluster = m_firstCluster + nNew;
    6606:	ldr	r3, [r4, #32]
    6608:	add	r3, r6
    660a:	str	r3, [r4, #16]
    goto done;
    660c:	b.n	65f2 <FatFile::seekSet(unsigned long)+0x8e>
    nNew -= nCur;
    660e:	subs	r6, r6, r2
    6610:	b.n	65ba <FatFile::seekSet(unsigned long)+0x56>
    6612:	nop

00006614 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>:
                              oflag_t oflag, uint8_t lfnOrd) {
    6614:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6618:	mov	r6, r1
    661a:	mov	r5, r2
  memset(this, 0, sizeof(FatFile));
    661c:	movs	r1, #0
    661e:	movs	r2, #36	; 0x24
                              oflag_t oflag, uint8_t lfnOrd) {
    6620:	mov	r4, r0
    6622:	mov	r8, r3
    6624:	ldrb.w	r7, [sp, #24]
  memset(this, 0, sizeof(FatFile));
    6628:	bl	e074 <memset>
  m_vol = dirFile->m_vol;
    662c:	ldr	r0, [r6, #8]
  m_dirCluster = dirFile->m_firstCluster;
    662e:	ldr	r3, [r6, #32]
    6630:	add.w	r2, r0, #52	; 0x34
  m_dirIndex = dirIndex;
    6634:	strh	r5, [r4, #4]
  dir += 0XF & dirIndex;
    6636:	and.w	r5, r5, #15
    663a:	add.w	r2, r2, r5, lsl #5
  m_vol = dirFile->m_vol;
    663e:	strd	r0, r3, [r4, #8]
  return (dir->attributes & FAT_ATTRIB_LABEL) == 0;
    6642:	ldrb	r1, [r2, #11]
  if (!isFatFileOrSubdir(dir)) {
    6644:	lsls	r3, r1, #28
    6646:	bmi.n	666c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
  m_attributes = dir->attributes & FS_ATTRIB_COPY;
    6648:	and.w	r1, r1, #55	; 0x37
    664c:	strb	r1, [r4, #0]
  if (isFatFile(dir)) {
    664e:	ldrb	r3, [r2, #11]
    6650:	tst.w	r3, #24
    6654:	bne.n	665c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x48>
    m_attributes |= FILE_ATTR_FILE;
    6656:	orr.w	r1, r1, #8
    665a:	strb	r1, [r4, #0]
  switch (oflag & O_ACCMODE) {
    665c:	and.w	r3, r8, #3
  m_lfnOrd = lfnOrd;
    6660:	strb	r7, [r4, #3]
  switch (oflag & O_ACCMODE) {
    6662:	cmp	r3, #1
    6664:	beq.n	66e0 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xcc>
    6666:	cmp	r3, #2
    6668:	beq.n	6678 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x64>
    666a:	cbz	r3, 66b2 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x9e>
  m_attributes = FILE_ATTR_CLOSED;
    666c:	movs	r3, #0
  return false;
    666e:	mov	r0, r3
  m_attributes = FILE_ATTR_CLOSED;
    6670:	strb	r3, [r4, #0]
  m_flags = 0;
    6672:	strb	r3, [r4, #2]
}
    6674:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (oflag & O_ACCMODE) {
    6678:	movs	r3, #3
  bool isSubDir() const { return m_attributes & FILE_ATTR_SUBDIR; }
    667a:	ldrb	r1, [r4, #0]
      m_flags = FILE_FLAG_WRITE;
    667c:	strb	r3, [r4, #2]
    if (isSubDir() || isReadOnly()) {
    667e:	lsls	r5, r1, #27
    6680:	bmi.n	666c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
    6682:	lsls	r6, r1, #31
    6684:	bmi.n	666c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
    m_attributes |= FS_ATTRIB_ARCHIVE;
    6686:	orr.w	r1, r1, #32
  if (oflag & O_TRUNC) {
    668a:	tst.w	r8, #1024	; 0x400
    m_attributes |= FS_ATTRIB_ARCHIVE;
    668e:	strb	r1, [r4, #0]
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    6690:	and.w	r1, r8, #8
    6694:	orr.w	r3, r3, r1
    6698:	strb	r3, [r4, #2]
  uint32_t sector() { return m_sector; }
    669a:	ldr	r1, [r0, #44]	; 0x2c
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16) |
    669c:	ldrh	r5, [r2, #20]
  m_dirSector = m_vol->cacheSectorNumber();
    669e:	str	r1, [r4, #24]
                 getLe16(dir->firstClusterLow);
    66a0:	ldrh	r1, [r2, #26]
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16) |
    66a2:	orr.w	r1, r1, r5, lsl #16
  if (oflag & O_TRUNC) {
    66a6:	beq.n	66ce <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xba>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    66a8:	cbnz	r1, 66f2 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xde>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    66aa:	orn	r3, r3, #127	; 0x7f
    66ae:	strb	r3, [r4, #2]
    66b0:	b.n	66d4 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xc0>
      if (oflag & O_TRUNC) {
    66b2:	tst.w	r8, #1024	; 0x400
    66b6:	bne.n	666c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    66b8:	and.w	r3, r8, #8
    66bc:	orr.w	r3, r3, #1
    66c0:	strb	r3, [r4, #2]
    66c2:	ldr	r1, [r0, #44]	; 0x2c
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16) |
    66c4:	ldrh	r3, [r2, #20]
  m_dirSector = m_vol->cacheSectorNumber();
    66c6:	str	r1, [r4, #24]
                 getLe16(dir->firstClusterLow);
    66c8:	ldrh	r1, [r2, #26]
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16) |
    66ca:	orr.w	r1, r1, r3, lsl #16
    m_firstCluster = firstCluster;
    66ce:	str	r1, [r4, #32]
  return *reinterpret_cast<const uint32_t*>(src);
    66d0:	ldr	r3, [r2, #28]
    m_fileSize = getLe32(dir->fileSize);
    66d2:	str	r3, [r4, #28]
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    66d4:	tst.w	r8, #16384	; 0x4000
    66d8:	bne.n	66e4 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xd0>
  return true;
    66da:	movs	r0, #1
}
    66dc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (oflag & O_ACCMODE) {
    66e0:	movs	r3, #2
    66e2:	b.n	667a <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x66>
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    66e4:	ldr	r1, [r4, #28]
    66e6:	mov	r0, r4
    66e8:	bl	6564 <FatFile::seekSet(unsigned long)>
    66ec:	cmp	r0, #0
    66ee:	bne.n	66da <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xc6>
    66f0:	b.n	666c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    66f2:	bl	6ca8 <FatPartition::freeChain(unsigned long)>
    66f6:	cmp	r0, #0
    66f8:	beq.n	666c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    66fa:	ldrb	r3, [r4, #2]
    66fc:	b.n	66aa <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x96>
    66fe:	nop

00006700 <FatFile::openNext(FatFile*, int)>:
  bool isOpen() const { return m_attributes; }
    6700:	ldrb	r3, [r0, #0]
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    6702:	cmp	r3, #0
    6704:	bne.n	6792 <FatFile::openNext(FatFile*, int)+0x92>
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
    6706:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    670a:	ldrb	r3, [r1, #0]
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
    670c:	sub	sp, #16
    670e:	mov	r4, r1
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    6710:	tst.w	r3, #208	; 0xd0
    6714:	beq.n	6778 <FatFile::openNext(FatFile*, int)+0x78>
  uint32_t curPosition() const { return m_curPosition; }
    6716:	ldr	r3, [r1, #20]
    6718:	ands.w	r5, r3, #31
    671c:	bne.n	6778 <FatFile::openNext(FatFile*, int)+0x78>
    671e:	mov	r6, r0
    6720:	mov	r8, r2
    6722:	mov	r9, r5
    int8_t n = read(&n, 1);
    6724:	movs	r2, #1
    6726:	add.w	r1, sp, #15
    672a:	mov	r0, r4
  uint8_t i = (m_curPosition >> 5) & 0XF;
    672c:	ubfx	sl, r3, #5, #4
    index = dirFile->curPosition() / FS_DIR_SIZE;
    6730:	lsrs	r7, r3, #5
    int8_t n = read(&n, 1);
    6732:	bl	60d4 <FatFile::read(void*, unsigned int)>
    if (n != 1) {
    6736:	sxtb	r0, r0
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    6738:	mov.w	r2, sl, lsl #5
    if (n != 1) {
    673c:	cmp	r0, #1
    673e:	bne.n	6778 <FatFile::openNext(FatFile*, int)+0x78>
    m_curPosition += FS_DIR_SIZE - 1;
    6740:	ldr	r3, [r4, #20]
  uint8_t* cacheBuffer() { return m_buffer; }
    6742:	ldr	r1, [r4, #8]
    6744:	adds	r3, #31
    6746:	add.w	ip, r1, #52	; 0x34
    674a:	str	r3, [r4, #20]
    if (dir->name[0] == FAT_NAME_FREE) {
    674c:	ldrb.w	r2, [ip, r2]
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    6750:	add.w	ip, ip, sl, lsl #5
    if (dir->name[0] == FAT_NAME_FREE) {
    6754:	cbz	r2, 6778 <FatFile::openNext(FatFile*, int)+0x78>
    if (dir->name[0] == '.' || dir->name[0] == FAT_NAME_DELETED) {
    6756:	cmp	r2, #46	; 0x2e
    6758:	beq.n	6780 <FatFile::openNext(FatFile*, int)+0x80>
    675a:	sub.w	r0, r2, #229	; 0xe5
    675e:	clz	r0, r0
    6762:	lsrs	r0, r0, #5
    6764:	cbnz	r0, 6780 <FatFile::openNext(FatFile*, int)+0x80>
  return (dir->attributes & FAT_ATTRIB_LABEL) == 0;
    6766:	ldrb.w	r1, [ip, #11]
    } else if (isFatFileOrSubdir(dir)) {
    676a:	ands.w	lr, r1, #8
    676e:	beq.n	6796 <FatFile::openNext(FatFile*, int)+0x96>
    } else if (isFatLongName(dir)) {
    6770:	cmp	r1, #15
    6772:	beq.n	6784 <FatFile::openNext(FatFile*, int)+0x84>
      lfnOrd = 0;
    6774:	mov	r5, r0
    6776:	b.n	6724 <FatFile::openNext(FatFile*, int)+0x24>
  return false;
    6778:	movs	r0, #0
}
    677a:	add	sp, #16
    677c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      lfnOrd = 0;
    6780:	movs	r5, #0
    6782:	b.n	6724 <FatFile::openNext(FatFile*, int)+0x24>
      if (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) {
    6784:	lsls	r1, r2, #25
    6786:	bpl.n	6724 <FatFile::openNext(FatFile*, int)+0x24>
        lfnOrd = ldir->order & 0X1F;
    6788:	and.w	r5, r2, #31
        checksum = ldir->checksum;
    678c:	ldrb.w	r9, [ip, #13]
    6790:	b.n	6724 <FatFile::openNext(FatFile*, int)+0x24>
  return false;
    6792:	movs	r0, #0
}
    6794:	bx	lr
      if (lfnOrd && checksum != lfnChecksum(dir->name)) {
    6796:	cbz	r5, 67ba <FatFile::openNext(FatFile*, int)+0xba>
  bool cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  bool createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  uint16_t getLfnChar(DirLfn_t* ldir, uint8_t i);
  uint8_t lfnChecksum(const uint8_t* name) {
    uint8_t sum = 0;
    for (uint8_t i = 0; i < 11; i++) {
    6798:	add.w	r1, ip, #10
    679c:	b.n	67a2 <FatFile::openNext(FatFile*, int)+0xa2>
      sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    679e:	ldrb.w	r2, [ip, #1]!
    67a2:	mov.w	r3, lr, lsl #7
    for (uint8_t i = 0; i < 11; i++) {
    67a6:	cmp	r1, ip
      sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    67a8:	orr.w	r3, r3, lr, lsr #1
    67ac:	uxtab	r3, r2, r3
    67b0:	uxtb.w	lr, r3
    for (uint8_t i = 0; i < 11; i++) {
    67b4:	bne.n	679e <FatFile::openNext(FatFile*, int)+0x9e>
    67b6:	cmp	lr, r9
    67b8:	bne.n	6778 <FatFile::openNext(FatFile*, int)+0x78>
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
    67ba:	mov	r3, r8
    67bc:	uxth	r2, r7
    67be:	mov	r1, r4
    67c0:	mov	r0, r6
    67c2:	str	r5, [sp, #0]
    67c4:	bl	6614 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    67c8:	b.n	677a <FatFile::openNext(FatFile*, int)+0x7a>
    67ca:	nop

000067cc <FatFile::sync()>:
  if (!isOpen()) {
    67cc:	ldrb	r3, [r0, #0]
    67ce:	cbz	r3, 67d4 <FatFile::sync()+0x8>
    67d0:	b.w	5ab0 <FatFile::sync() [clone .part.0]>
}
    67d4:	movs	r0, #1
    67d6:	bx	lr

000067d8 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>:
//------------------------------------------------------------------------------
bool FatFile::timestamp(uint8_t flags, uint16_t year, uint8_t month,
                        uint8_t day, uint8_t hour, uint8_t minute,
                        uint8_t second) {
    67d8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    67dc:	mov	r6, r1
  uint16_t dirDate;
  uint16_t dirTime;
  DirFat_t* dir;

  if (!isFile() || year < 1980 || year > 2107 || month < 1 || month > 12 ||
      day < 1 || day > 31 || hour > 23 || minute > 59 || second > 59) {
    67de:	ldrb	r1, [r0, #0]
                        uint8_t second) {
    67e0:	sub	sp, #8
      day < 1 || day > 31 || hour > 23 || minute > 59 || second > 59) {
    67e2:	lsls	r1, r1, #28
                        uint8_t second) {
    67e4:	ldrb.w	r7, [sp, #40]	; 0x28
    67e8:	ldrb.w	r9, [sp, #44]	; 0x2c
    67ec:	ldrb.w	sl, [sp, #48]	; 0x30
    67f0:	ldrb.w	r8, [sp, #52]	; 0x34
      day < 1 || day > 31 || hour > 23 || minute > 59 || second > 59) {
    67f4:	bpl.n	6828 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
  if (!isFile() || year < 1980 || year > 2107 || month < 1 || month > 12 ||
    67f6:	subw	r2, r2, #1980	; 0x7bc
    67fa:	uxth	r4, r2
    67fc:	cmp	r4, #127	; 0x7f
    67fe:	bhi.n	6828 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
    6800:	subs	r2, r3, #1
    6802:	str	r3, [sp, #4]
    6804:	cmp	r2, #11
    6806:	bhi.n	6828 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
      day < 1 || day > 31 || hour > 23 || minute > 59 || second > 59) {
    6808:	subs	r2, r7, #1
    680a:	cmp	r2, #30
    680c:	bhi.n	6828 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
    680e:	cmp.w	sl, #59	; 0x3b
    6812:	it	ls
    6814:	cmpls.w	r9, #23
    6818:	bhi.n	6828 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
    681a:	cmp.w	r8, #59	; 0x3b
    681e:	bhi.n	6828 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // update directory entry
  if (!sync()) {
    6820:	mov	r5, r0
  if (!isOpen()) {
    6822:	bl	5ab0 <FatFile::sync() [clone .part.0]>
  if (!sync()) {
    6826:	cbnz	r0, 6830 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x58>
  }
  return m_vol->cacheSync();

fail:
  return false;
}
    6828:	movs	r0, #0
    682a:	add	sp, #8
    682c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return m_cache.prepare(sector, options);
    6830:	ldr	r0, [r5, #8]
    6832:	movs	r2, #1
    6834:	ldr	r1, [r5, #24]
    6836:	adds	r0, #36	; 0x24
    6838:	bl	31dc <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    683c:	cmp	r0, #0
    683e:	beq.n	6828 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
                                              : year << 9 | month << 5 | day;
    6840:	ldr	r3, [sp, #4]
             : hour << 11 | minute << 5 | second >> 1;
    6842:	mov.w	r2, r8, lsr #1
  return dir + (m_dirIndex & 0XF);
    6846:	ldrh	r1, [r5, #4]
                                              : year << 9 | month << 5 | day;
    6848:	orr.w	r3, r7, r3, lsl #5
  if (flags & T_ACCESS) {
    684c:	lsls	r7, r6, #31
  return dir + (m_dirIndex & 0XF);
    684e:	and.w	r1, r1, #15
             : hour << 11 | minute << 5 | second >> 1;
    6852:	orr.w	r2, r2, sl, lsl #5
                                              : year << 9 | month << 5 | day;
    6856:	orr.w	r3, r3, r4, lsl #9
    685a:	add.w	r0, r0, r1, lsl #5
    685e:	uxth	r3, r3
             : hour << 11 | minute << 5 | second >> 1;
    6860:	orr.w	r2, r2, r9, lsl #11
  *reinterpret_cast<uint16_t*>(dst) = src;
    6864:	it	mi
    6866:	strhmi	r3, [r0, #18]
  if (flags & T_CREATE) {
    6868:	lsls	r4, r6, #30
    686a:	uxth	r2, r2
    686c:	bpl.n	6880 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xa8>
    dir->createTimeMs = second & 1 ? 100 : 0;
    686e:	ands.w	r8, r8, #1
    6872:	strh	r3, [r0, #16]
    6874:	strh	r2, [r0, #14]
    6876:	it	ne
    6878:	movne.w	r8, #100	; 0x64
    687c:	strb.w	r8, [r0, #13]
  if (flags & T_WRITE) {
    6880:	lsls	r1, r6, #29
    6882:	bpl.n	6888 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xb0>
    6884:	strh	r3, [r0, #24]
    6886:	strh	r2, [r0, #22]
  return m_vol->cacheSync();
    6888:	ldr	r4, [r5, #8]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    688a:	add.w	r0, r4, #36	; 0x24
    688e:	bl	3184 <FsCache::sync()>
    6892:	cmp	r0, #0
    6894:	beq.n	6828 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
    6896:	add.w	r0, r4, #564	; 0x234
    689a:	bl	3184 <FsCache::sync()>
    689e:	cmp	r0, #0
    68a0:	beq.n	6828 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
    68a2:	ldr	r0, [r4, #0]
  bool syncDevice() { return m_blockDev->syncDevice(); }
    68a4:	ldr	r3, [r0, #0]
    68a6:	ldr	r3, [r3, #28]
}
    68a8:	add	sp, #8
    68aa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    68ae:	bx	r3

000068b0 <FatFile::truncate()>:
//------------------------------------------------------------------------------
bool FatFile::truncate() {
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    68b0:	ldrb	r3, [r0, #2]
    68b2:	lsls	r3, r3, #30
    68b4:	bpl.n	6906 <FatFile::truncate()+0x56>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    68b6:	ldr	r3, [r0, #32]
bool FatFile::truncate() {
    68b8:	push	{r4, lr}
    68ba:	mov	r4, r0
    68bc:	sub	sp, #8
  if (m_firstCluster == 0) {
    68be:	cbz	r3, 68ec <FatFile::truncate()+0x3c>
    return true;
  }
  if (m_curCluster) {
    68c0:	ldr	r1, [r0, #16]
    68c2:	cbnz	r1, 690a <FatFile::truncate()+0x5a>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  } else {
    toFree = m_firstCluster;
    68c4:	str	r3, [sp, #4]
    m_firstCluster = 0;
    68c6:	str	r1, [r0, #32]
  }
  if (toFree) {
    if (!m_vol->freeChain(toFree)) {
    68c8:	mov	r1, r3
    68ca:	ldr	r0, [r4, #8]
    68cc:	bl	6ca8 <FatPartition::freeChain(unsigned long)>
    68d0:	cbz	r0, 6900 <FatFile::truncate()+0x50>
    }
  }
  m_fileSize = m_curPosition;

  // need to update directory entry
  m_flags |= FILE_FLAG_DIR_DIRTY;
    68d2:	ldrb	r3, [r4, #2]
  m_fileSize = m_curPosition;
    68d4:	ldr	r1, [r4, #20]
  m_flags |= FILE_FLAG_DIR_DIRTY;
    68d6:	orn	r3, r3, #127	; 0x7f
  if (!isOpen()) {
    68da:	ldrb	r2, [r4, #0]
  m_fileSize = m_curPosition;
    68dc:	str	r1, [r4, #28]
  m_flags |= FILE_FLAG_DIR_DIRTY;
    68de:	strb	r3, [r4, #2]
  if (!isOpen()) {
    68e0:	cbz	r2, 68ec <FatFile::truncate()+0x3c>
    68e2:	mov	r0, r4
    68e4:	bl	5ab0 <FatFile::sync() [clone .part.0]>
  return sync();

fail:
  return false;
}
    68e8:	add	sp, #8
    68ea:	pop	{r4, pc}
    return true;
    68ec:	movs	r0, #1
}
    68ee:	add	sp, #8
    68f0:	pop	{r4, pc}
  }
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) { return fatPut(cluster, 0x0FFFFFFF); }
    68f2:	mvn.w	r2, #4026531840	; 0xf0000000
    68f6:	ldr	r1, [r4, #16]
    68f8:	ldr	r0, [r4, #8]
    68fa:	bl	6bc0 <FatPartition::fatPut(unsigned long, unsigned long)>
      if (!m_vol->fatPutEOC(m_curCluster)) {
    68fe:	cbnz	r0, 691c <FatFile::truncate()+0x6c>
  return false;
    6900:	movs	r0, #0
}
    6902:	add	sp, #8
    6904:	pop	{r4, pc}
  return false;
    6906:	movs	r0, #0
}
    6908:	bx	lr
    toFree = 0;
    690a:	movs	r3, #0
    int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    690c:	add	r2, sp, #4
    690e:	ldr	r0, [r0, #8]
    toFree = 0;
    6910:	str	r3, [sp, #4]
    int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    6912:	bl	6b9c <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    6916:	cmp	r0, #0
    6918:	blt.n	6900 <FatFile::truncate()+0x50>
    if (fg) {
    691a:	bne.n	68f2 <FatFile::truncate()+0x42>
  if (toFree) {
    691c:	ldr	r3, [sp, #4]
    691e:	cmp	r3, #0
    6920:	beq.n	68d2 <FatFile::truncate()+0x22>
    6922:	b.n	68c8 <FatFile::truncate()+0x18>

00006924 <FatFile::write(void const*, unsigned int)>:
//------------------------------------------------------------------------------
size_t FatFile::write(const void* buf, size_t nbyte) {
    6924:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  bool isWritable() const { return m_flags & FILE_FLAG_WRITE; }
    6928:	ldrb	r3, [r0, #2]
    692a:	mov	r5, r0
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isWritable()) {
    692c:	lsls	r4, r3, #30
    692e:	bpl.n	6a20 <FatFile::write(void const*, unsigned int)+0xfc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    6930:	mov	r8, r1
    6932:	lsls	r1, r3, #28
    6934:	mov	r9, r2
    6936:	bmi.w	6aa4 <FatFile::write(void const*, unsigned int)+0x180>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    693a:	ldr	r3, [r5, #20]
    693c:	adds.w	r2, r3, r9
    6940:	bcs.n	6a20 <FatFile::write(void const*, unsigned int)+0xfc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    6942:	cmp.w	r9, #0
    6946:	beq.n	69ca <FatFile::write(void const*, unsigned int)+0xa6>
    6948:	mov	r7, r9
    m_status = 0;
    694a:	mov.w	sl, #0
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    694e:	ldr	r0, [r5, #8]
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    6950:	ubfx	r6, r3, #0, #9
    if (sectorOfCluster == 0 && sectorOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
    6954:	ldr	r1, [r5, #16]
    return (position >> 9) & m_clusterSectorMask;
    6956:	ldrb	r4, [r0, #5]
    if (sectorOfCluster == 0 && sectorOffset == 0) {
    6958:	ands.w	r4, r4, r3, lsr #9
    695c:	bne.n	69de <FatFile::write(void const*, unsigned int)+0xba>
    695e:	cmp	r6, #0
    6960:	bne.n	69de <FatFile::write(void const*, unsigned int)+0xba>
      if (m_curCluster != 0) {
    6962:	cmp	r1, #0
    6964:	beq.n	6a44 <FatFile::write(void const*, unsigned int)+0x120>
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
    6966:	ldrb	r2, [r5, #2]
    6968:	lsls	r2, r2, #25
    696a:	bpl.n	6a5a <FatFile::write(void const*, unsigned int)+0x136>
    696c:	ldr	r2, [r5, #28]
    696e:	cmp	r2, r3
    6970:	bls.n	6a5a <FatFile::write(void const*, unsigned int)+0x136>
          m_curCluster++;
    6972:	adds	r1, #1
    6974:	str	r1, [r5, #16]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    6976:	subs	r1, #2
    6978:	ldrb	r2, [r0, #6]
    697a:	ldr	r3, [r0, #20]
    697c:	lsls	r1, r2
    697e:	add	r1, r3
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    6980:	cmp.w	r7, #512	; 0x200
    6984:	bcc.n	6a2e <FatFile::write(void const*, unsigned int)+0x10a>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (nToWrite >= 2 * m_vol->bytesPerSector()) {
    6986:	cmp.w	r7, #1024	; 0x400
    698a:	bcc.n	6a6e <FatFile::write(void const*, unsigned int)+0x14a>
      // use multiple sector write command
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
    698c:	ldrb	r3, [r0, #4]
      uint32_t nSector = nToWrite >> m_vol->bytesPerSectorShift();
    698e:	lsrs	r2, r7, #9
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
    6990:	subs	r3, r3, r4
    6992:	cmp	r3, r2
    6994:	it	cs
    6996:	movcs	r3, r2
    return sector <= m_sector && m_sector < (sector + count);
    6998:	ldr	r2, [r0, #44]	; 0x2c
    699a:	cmp	r2, r1
      if (nSector > maxSectors) {
        nSector = maxSectors;
      }
      n = nSector << m_vol->bytesPerSectorShift();
    699c:	mov.w	r4, r3, lsl #9
    69a0:	bcc.n	69b2 <FatFile::write(void const*, unsigned int)+0x8e>
    69a2:	adds	r6, r3, r1
    69a4:	cmp	r2, r6
    69a6:	bcs.n	69b2 <FatFile::write(void const*, unsigned int)+0x8e>
    m_sector = 0XFFFFFFFF;
    69a8:	mov.w	r2, #4294967295
    m_status = 0;
    69ac:	strb.w	sl, [r0, #36]	; 0x24
    m_sector = 0XFFFFFFFF;
    69b0:	str	r2, [r0, #44]	; 0x2c
    return m_blockDev->writeSectors(sector, src, count);
    69b2:	ldr	r0, [r0, #40]	; 0x28
    69b4:	mov	r2, r8
    69b6:	ldr	r6, [r0, #0]
    69b8:	ldr	r6, [r6, #36]	; 0x24
    69ba:	blx	r6
      if (!m_vol->cacheSafeWrite(sector, src, nSector)) {
    69bc:	cbz	r0, 6a20 <FatFile::write(void const*, unsigned int)+0xfc>
      if (!m_vol->cacheSafeWrite(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    69be:	ldr	r3, [r5, #20]
  while (nToWrite) {
    69c0:	subs	r7, r7, r4
    src += n;
    69c2:	add	r8, r4
    m_curPosition += n;
    69c4:	add	r3, r4
    69c6:	str	r3, [r5, #20]
  while (nToWrite) {
    69c8:	bne.n	694e <FatFile::write(void const*, unsigned int)+0x2a>
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    69ca:	ldr	r2, [r5, #28]
    69cc:	cmp	r2, r3
    69ce:	bcs.n	6abe <FatFile::write(void const*, unsigned int)+0x19a>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    m_flags |= FILE_FLAG_DIR_DIRTY;
    69d0:	ldrb	r2, [r5, #2]
    69d2:	mov	r0, r9
    m_fileSize = m_curPosition;
    69d4:	str	r3, [r5, #28]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    69d6:	orn	r3, r2, #127	; 0x7f
    69da:	strb	r3, [r5, #2]
    69dc:	b.n	6a2a <FatFile::write(void const*, unsigned int)+0x106>
    69de:	ldrb	r2, [r0, #6]
    69e0:	subs	r1, #2
    69e2:	ldr	r3, [r0, #20]
    69e4:	lsls	r1, r2
    69e6:	add	r1, r3
    uint32_t sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    69e8:	add	r1, r4
    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    69ea:	cmp	r6, #0
    69ec:	beq.n	6980 <FatFile::write(void const*, unsigned int)+0x5c>
      n = m_vol->bytesPerSector() - sectorOffset;
    69ee:	rsb	r4, r6, #512	; 0x200
        cacheOption = FsCache::CACHE_FOR_WRITE;
    69f2:	movs	r2, #1
    69f4:	cmp	r4, r7
    69f6:	it	cs
    69f8:	movcs	r4, r7
    return m_cache.prepare(sector, options);
    69fa:	adds	r0, #36	; 0x24
    69fc:	bl	31dc <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    6a00:	cbz	r0, 6a20 <FatFile::write(void const*, unsigned int)+0xfc>
      memcpy(dst, src, n);
    6a02:	add	r0, r6
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    6a04:	add	r6, r4
      memcpy(dst, src, n);
    6a06:	mov	r2, r4
    6a08:	mov	r1, r8
    6a0a:	bl	a0d4 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    6a0e:	cmp.w	r6, #512	; 0x200
    6a12:	ldr	r0, [r5, #8]
    6a14:	bne.n	69be <FatFile::write(void const*, unsigned int)+0x9a>
  bool cacheSyncData() { return m_cache.sync(); }
    6a16:	adds	r0, #36	; 0x24
    6a18:	bl	3184 <FsCache::sync()>
        if (!m_vol->cacheSyncData()) {
    6a1c:	cmp	r0, #0
    6a1e:	bne.n	69be <FatFile::write(void const*, unsigned int)+0x9a>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
    6a20:	ldrb	r3, [r5, #1]
  return 0;
    6a22:	movs	r0, #0
  m_error |= WRITE_ERROR;
    6a24:	orr.w	r3, r3, #1
    6a28:	strb	r3, [r5, #1]
}
    6a2a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      n = m_vol->bytesPerSector() - sectorOffset;
    6a2e:	rsb	r4, r6, #512	; 0x200
      if (sectorOffset == 0 &&
    6a32:	ldr	r2, [r5, #20]
    6a34:	ldr	r3, [r5, #28]
    6a36:	cmp	r4, r7
    6a38:	it	cs
    6a3a:	movcs	r4, r7
    6a3c:	cmp	r2, r3
    6a3e:	bcc.n	6a4c <FatFile::write(void const*, unsigned int)+0x128>
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    6a40:	movs	r2, #5
    6a42:	b.n	69fa <FatFile::write(void const*, unsigned int)+0xd6>
        if (m_firstCluster == 0) {
    6a44:	ldr	r1, [r5, #32]
    6a46:	cbz	r1, 6a92 <FatFile::write(void const*, unsigned int)+0x16e>
          m_curCluster = m_firstCluster;
    6a48:	str	r1, [r5, #16]
    6a4a:	b.n	6976 <FatFile::write(void const*, unsigned int)+0x52>
          (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
    6a4c:	ldrb	r3, [r5, #2]
        cacheOption = FsCache::CACHE_FOR_WRITE;
    6a4e:	tst.w	r3, #32
    6a52:	ite	ne
    6a54:	movne	r2, #5
    6a56:	moveq	r2, #1
    6a58:	b.n	69fa <FatFile::write(void const*, unsigned int)+0xd6>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    6a5a:	add.w	r2, r5, #16
    6a5e:	bl	6b9c <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    6a62:	cmp	r0, #0
    6a64:	blt.n	6a20 <FatFile::write(void const*, unsigned int)+0xfc>
        if (fg == 0) {
    6a66:	beq.n	6ab2 <FatFile::write(void const*, unsigned int)+0x18e>
    uint32_t sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    6a68:	ldr	r0, [r5, #8]
    6a6a:	ldr	r1, [r5, #16]
    6a6c:	b.n	6976 <FatFile::write(void const*, unsigned int)+0x52>
    if (isCached(sector)) {
    6a6e:	ldr	r3, [r0, #44]	; 0x2c
    6a70:	cmp	r3, r1
    6a72:	bne.n	6a7e <FatFile::write(void const*, unsigned int)+0x15a>
    m_sector = 0XFFFFFFFF;
    6a74:	mov.w	r3, #4294967295
    m_status = 0;
    6a78:	strb.w	sl, [r0, #36]	; 0x24
    m_sector = 0XFFFFFFFF;
    6a7c:	str	r3, [r0, #44]	; 0x2c
    return m_blockDev->writeSector(sector, src);
    6a7e:	ldr	r0, [r0, #40]	; 0x28
    6a80:	mov	r2, r8
    6a82:	ldr	r3, [r0, #0]
    6a84:	ldr	r3, [r3, #32]
    6a86:	blx	r3
      if (!m_vol->cacheSafeWrite(sector, src)) {
    6a88:	cmp	r0, #0
    6a8a:	beq.n	6a20 <FatFile::write(void const*, unsigned int)+0xfc>
      n = m_vol->bytesPerSector();
    6a8c:	mov.w	r4, #512	; 0x200
    6a90:	b.n	69be <FatFile::write(void const*, unsigned int)+0x9a>
          if (!addCluster()) {
    6a92:	mov	r0, r5
    6a94:	bl	5b6c <FatFile::addCluster()>
    6a98:	cmp	r0, #0
    6a9a:	beq.n	6a20 <FatFile::write(void const*, unsigned int)+0xfc>
          m_firstCluster = m_curCluster;
    6a9c:	ldr	r1, [r5, #16]
    uint32_t sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    6a9e:	ldr	r0, [r5, #8]
          m_firstCluster = m_curCluster;
    6aa0:	str	r1, [r5, #32]
    6aa2:	b.n	6976 <FatFile::write(void const*, unsigned int)+0x52>
    if (!seekSet(m_fileSize)) {
    6aa4:	ldr	r1, [r0, #28]
    6aa6:	bl	6564 <FatFile::seekSet(unsigned long)>
    6aaa:	cmp	r0, #0
    6aac:	bne.w	693a <FatFile::write(void const*, unsigned int)+0x16>
    6ab0:	b.n	6a20 <FatFile::write(void const*, unsigned int)+0xfc>
          if (!addCluster()) {
    6ab2:	mov	r0, r5
    6ab4:	bl	5b6c <FatFile::addCluster()>
    6ab8:	cmp	r0, #0
    6aba:	bne.n	6a68 <FatFile::write(void const*, unsigned int)+0x144>
    6abc:	b.n	6a20 <FatFile::write(void const*, unsigned int)+0xfc>
  } else if (FsDateTime::callback) {
    6abe:	ldr	r3, [pc, #20]	; (6ad4 <FatFile::write(void const*, unsigned int)+0x1b0>)
    6ac0:	ldr	r3, [r3, #0]
    6ac2:	cbz	r3, 6ad0 <FatFile::write(void const*, unsigned int)+0x1ac>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    6ac4:	ldrb	r3, [r5, #2]
    6ac6:	mov	r0, r9
    6ac8:	orn	r3, r3, #127	; 0x7f
    6acc:	strb	r3, [r5, #2]
    6ace:	b.n	6a2a <FatFile::write(void const*, unsigned int)+0x106>
    6ad0:	mov	r0, r9
    6ad2:	b.n	6a2a <FatFile::write(void const*, unsigned int)+0x106>
    6ad4:	.word	0x20006404

00006ad8 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>:
fail:
  return false;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    6ad8:	push	{r4, r5, r6, lr}
  uint8_t fatType() const { return m_fatType; }
    6ada:	ldrb	r3, [r0, #7]
    6adc:	mov	r5, r0
    6ade:	mov	r4, r1
    6ae0:	mov	r6, r2
  if (cluster < 2 || cluster > m_lastCluster) {
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
    6ae2:	cmp	r3, #32
    6ae4:	beq.n	6b1a <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0x42>
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint16_t offset = (cluster << 2) & m_sectorMask;
    next = getLe32(pc + offset);
  } else if (fatType() == 16) {
    6ae6:	cmp	r3, #16
    6ae8:	beq.n	6af0 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0x18>
  }
  *value = next;
  return 1;

fail:
  return -1;
    6aea:	mov.w	r0, #4294967295
}
    6aee:	pop	{r4, r5, r6, pc}
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1));
    6af0:	ldr	r3, [r0, #24]
    6af2:	ubfx	r1, r1, #8, #8
    return m_fatCache.prepare(sector, options);
    6af6:	add.w	r0, r0, #564	; 0x234
    6afa:	movs	r2, #2
    6afc:	add	r1, r3
    6afe:	bl	31dc <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    6b02:	cmp	r0, #0
    6b04:	beq.n	6aea <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0x12>
    uint16_t offset = (cluster << 1) & m_sectorMask;
    6b06:	lsls	r1, r4, #1
  if (isEOC(next)) {
    6b08:	ldr	r2, [r5, #28]
    next = getLe16(pc + offset);
    6b0a:	and.w	r1, r1, #510	; 0x1fe
    6b0e:	ldrh	r3, [r0, r1]
  if (isEOC(next)) {
    6b10:	cmp	r2, r3
    6b12:	bcc.n	6b3c <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0x64>
  return 1;
    6b14:	movs	r0, #1
  *value = next;
    6b16:	str	r3, [r6, #0]
}
    6b18:	pop	{r4, r5, r6, pc}
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    6b1a:	ldr	r1, [r0, #24]
    6b1c:	movs	r2, #2
    6b1e:	add.w	r0, r0, #564	; 0x234
    6b22:	add.w	r1, r1, r4, lsr #7
    6b26:	bl	31dc <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    6b2a:	cmp	r0, #0
    6b2c:	beq.n	6aea <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0x12>
    uint16_t offset = (cluster << 2) & m_sectorMask;
    6b2e:	lsls	r1, r4, #2
  if (isEOC(next)) {
    6b30:	ldr	r2, [r5, #28]
    next = getLe32(pc + offset);
    6b32:	and.w	r1, r1, #508	; 0x1fc
  return *reinterpret_cast<const uint32_t*>(src);
    6b36:	ldr	r3, [r0, r1]
  if (isEOC(next)) {
    6b38:	cmp	r2, r3
    6b3a:	bcs.n	6b14 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0x3c>
    return 0;
    6b3c:	movs	r0, #0
}
    6b3e:	pop	{r4, r5, r6, pc}

00006b40 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]>:
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
    6b40:	push	{r3, r4, r5, lr}
  uint8_t fatType() const { return m_fatType; }
    6b42:	ldrb	r3, [r0, #7]
    6b44:	mov	r4, r1
    6b46:	mov	r5, r2
  if (cluster < 2 || cluster > m_lastCluster) {
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
    6b48:	cmp	r3, #32
    6b4a:	beq.n	6b78 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x38>
    uint16_t offset = (cluster << 2) & m_sectorMask;
    setLe32(pc + offset, value);
    return true;
  }

  if (fatType() == 16) {
    6b4c:	cmp	r3, #16
    6b4e:	beq.n	6b54 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x14>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
    6b50:	movs	r0, #0
}
    6b52:	pop	{r3, r4, r5, pc}
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1));
    6b54:	ldr	r3, [r0, #24]
    6b56:	ubfx	r1, r1, #8, #8
    return m_fatCache.prepare(sector, options);
    6b5a:	add.w	r0, r0, #564	; 0x234
    6b5e:	movs	r2, #3
    6b60:	add	r1, r3
    6b62:	bl	31dc <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    6b66:	mov	r3, r0
    6b68:	cmp	r0, #0
    6b6a:	beq.n	6b50 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x10>
    uint16_t offset = (cluster << 1) & m_sectorMask;
    6b6c:	lsls	r1, r4, #1
    return true;
    6b6e:	movs	r0, #1
    setLe16(pc + offset, value);
    6b70:	and.w	r1, r1, #510	; 0x1fe
    6b74:	strh	r5, [r3, r1]
}
    6b76:	pop	{r3, r4, r5, pc}
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    6b78:	ldr	r1, [r0, #24]
    6b7a:	movs	r2, #3
    6b7c:	add.w	r0, r0, #564	; 0x234
    6b80:	add.w	r1, r1, r4, lsr #7
    6b84:	bl	31dc <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    6b88:	mov	r3, r0
    6b8a:	cmp	r0, #0
    6b8c:	beq.n	6b50 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x10>
    uint16_t offset = (cluster << 2) & m_sectorMask;
    6b8e:	lsls	r1, r4, #2
    return true;
    6b90:	movs	r0, #1
    setLe32(pc + offset, value);
    6b92:	and.w	r1, r1, #508	; 0x1fc
  *reinterpret_cast<uint32_t*>(dst) = src;
    6b96:	str	r5, [r3, r1]
}
    6b98:	pop	{r3, r4, r5, pc}
    6b9a:	nop

00006b9c <FatPartition::fatGet(unsigned long, unsigned long*)>:
  if (cluster < 2 || cluster > m_lastCluster) {
    6b9c:	cmp	r1, #1
    6b9e:	bls.n	6bba <FatPartition::fatGet(unsigned long, unsigned long*)+0x1e>
int8_t FatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    6ba0:	push	{r4}
  if (cluster < 2 || cluster > m_lastCluster) {
    6ba2:	ldr	r4, [r0, #28]
    6ba4:	cmp	r4, r1
    6ba6:	bcc.n	6bb0 <FatPartition::fatGet(unsigned long, unsigned long*)+0x14>
}
    6ba8:	ldr.w	r4, [sp], #4
    6bac:	b.w	6ad8 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>
    6bb0:	mov.w	r0, #4294967295
    6bb4:	ldr.w	r4, [sp], #4
    6bb8:	bx	lr
    6bba:	mov.w	r0, #4294967295
    6bbe:	bx	lr

00006bc0 <FatPartition::fatPut(unsigned long, unsigned long)>:
  if (cluster < 2 || cluster > m_lastCluster) {
    6bc0:	cmp	r1, #1
    6bc2:	bls.n	6bde <FatPartition::fatPut(unsigned long, unsigned long)+0x1e>
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
    6bc4:	push	{r3, r4, r5, lr}
  if (cluster < 2 || cluster > m_lastCluster) {
    6bc6:	ldr	r3, [r0, #28]
    6bc8:	mov	r4, r1
    6bca:	cmp	r3, r1
    6bcc:	bcc.n	6bda <FatPartition::fatPut(unsigned long, unsigned long)+0x1a>
  uint8_t fatType() const { return m_fatType; }
    6bce:	ldrb	r3, [r0, #7]
    6bd0:	mov	r5, r2
  if (fatType() == 32) {
    6bd2:	cmp	r3, #32
    6bd4:	beq.n	6c06 <FatPartition::fatPut(unsigned long, unsigned long)+0x46>
  if (fatType() == 16) {
    6bd6:	cmp	r3, #16
    6bd8:	beq.n	6be2 <FatPartition::fatPut(unsigned long, unsigned long)+0x22>
  return false;
    6bda:	movs	r0, #0
}
    6bdc:	pop	{r3, r4, r5, pc}
  return false;
    6bde:	movs	r0, #0
}
    6be0:	bx	lr
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1));
    6be2:	ldr	r3, [r0, #24]
    6be4:	ubfx	r1, r1, #8, #8
    return m_fatCache.prepare(sector, options);
    6be8:	add.w	r0, r0, #564	; 0x234
    6bec:	movs	r2, #3
    6bee:	add	r1, r3
    6bf0:	bl	31dc <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    6bf4:	mov	r3, r0
    6bf6:	cmp	r0, #0
    6bf8:	beq.n	6bda <FatPartition::fatPut(unsigned long, unsigned long)+0x1a>
    uint16_t offset = (cluster << 1) & m_sectorMask;
    6bfa:	lsls	r4, r4, #1
    return true;
    6bfc:	movs	r0, #1
    setLe16(pc + offset, value);
    6bfe:	and.w	r4, r4, #510	; 0x1fe
    6c02:	strh	r5, [r3, r4]
}
    6c04:	pop	{r3, r4, r5, pc}
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    6c06:	ldr	r1, [r0, #24]
    6c08:	movs	r2, #3
    6c0a:	add.w	r0, r0, #564	; 0x234
    6c0e:	add.w	r1, r1, r4, lsr #7
    6c12:	bl	31dc <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    6c16:	mov	r3, r0
    6c18:	cmp	r0, #0
    6c1a:	beq.n	6bda <FatPartition::fatPut(unsigned long, unsigned long)+0x1a>
    uint16_t offset = (cluster << 2) & m_sectorMask;
    6c1c:	lsls	r4, r4, #2
    return true;
    6c1e:	movs	r0, #1
    setLe32(pc + offset, value);
    6c20:	and.w	r4, r4, #508	; 0x1fc
    6c24:	str	r5, [r3, r4]
}
    6c26:	pop	{r3, r4, r5, pc}

00006c28 <FatPartition::allocateCluster(unsigned long, unsigned long*)>:
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    6c28:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (m_allocSearchStart < current) {
    6c2c:	ldr	r4, [r0, #12]
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    6c2e:	sub	sp, #8
    6c30:	mov	r5, r0
    6c32:	mov	r6, r1
  if (m_allocSearchStart < current) {
    6c34:	cmp	r4, r1
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    6c36:	mov	r8, r2
  if (m_allocSearchStart < current) {
    6c38:	bcc.n	6ca2 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x7a>
    setStart = true;
    6c3a:	movs	r7, #1
    find++;
    6c3c:	adds	r4, #1
    if (find > m_lastCluster) {
    6c3e:	ldr	r3, [r5, #28]
    6c40:	add	r2, sp, #4
    6c42:	mov	r0, r5
    6c44:	cmp	r3, r4
    6c46:	bcs.n	6c54 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x2c>
      if (setStart) {
    6c48:	cbnz	r7, 6c98 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x70>
      find = m_allocSearchStart;
    6c4a:	ldr	r4, [r5, #12]
      setStart = true;
    6c4c:	movs	r7, #1
    find++;
    6c4e:	add	r4, r7
    if (find > m_lastCluster) {
    6c50:	cmp	r3, r4
    6c52:	bcc.n	6c98 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x70>
  if (cluster < 2 || cluster > m_lastCluster) {
    6c54:	cmp	r6, r4
    6c56:	it	ne
    6c58:	cmpne	r4, #1
    6c5a:	mov	r1, r4
    6c5c:	bls.n	6c98 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x70>
    6c5e:	bl	6ad8 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>
    if (fg < 0) {
    6c62:	cmp	r0, #0
    6c64:	blt.n	6c98 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x70>
    if (fg && f == 0) {
    6c66:	beq.n	6c3c <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x14>
    6c68:	ldr	r3, [sp, #4]
    6c6a:	cmp	r3, #0
    6c6c:	bne.n	6c3c <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x14>
  if (setStart) {
    6c6e:	cbz	r7, 6c72 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x4a>
    m_allocSearchStart = find;
    6c70:	str	r4, [r5, #12]
  bool fatPutEOC(uint32_t cluster) { return fatPut(cluster, 0x0FFFFFFF); }
    6c72:	mvn.w	r2, #4026531840	; 0xf0000000
    6c76:	mov	r1, r4
    6c78:	mov	r0, r5
    6c7a:	bl	6bc0 <FatPartition::fatPut(unsigned long, unsigned long)>
  if (!fatPutEOC(find)) {
    6c7e:	mov	r7, r0
    6c80:	cbz	r0, 6c98 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x70>
  if (current) {
    6c82:	cbnz	r6, 6c8a <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x62>
  *next = find;
    6c84:	str.w	r4, [r8]
  return true;
    6c88:	b.n	6c9a <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x72>
    if (!fatPut(current, find)) {
    6c8a:	mov	r1, r6
    6c8c:	mov	r0, r5
    6c8e:	mov	r2, r4
    6c90:	bl	6bc0 <FatPartition::fatPut(unsigned long, unsigned long)>
    6c94:	cmp	r0, #0
    6c96:	bne.n	6c84 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x5c>
  return false;
    6c98:	movs	r7, #0
}
    6c9a:	mov	r0, r7
    6c9c:	add	sp, #8
    6c9e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6ca2:	mov	r4, r1
    setStart = false;
    6ca4:	movs	r7, #0
    6ca6:	b.n	6c3c <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x14>

00006ca8 <FatPartition::freeChain(unsigned long)>:
//------------------------------------------------------------------------------
// free a cluster chain
bool FatPartition::freeChain(uint32_t cluster) {
    6ca8:	push	{r4, r5, r6, lr}
    6caa:	mov	r5, r0
    6cac:	sub	sp, #8
    6cae:	mov	r4, r1
    6cb0:	b.n	6ce2 <FatPartition::freeChain(unsigned long)+0x3a>
  if (cluster < 2 || cluster > m_lastCluster) {
    6cb2:	ldr	r3, [r5, #28]
    6cb4:	cmp	r4, r3
    6cb6:	bhi.n	6cec <FatPartition::freeChain(unsigned long)+0x44>
    6cb8:	bl	6ad8 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>
  if (cluster < 2 || cluster > m_lastCluster) {
    6cbc:	mov	r6, r0
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
    if (fg < 0) {
    6cbe:	mov	r1, r4
    6cc0:	movs	r2, #0
    6cc2:	cmp	r6, #0
    6cc4:	mov	r0, r5
    6cc6:	blt.n	6cec <FatPartition::freeChain(unsigned long)+0x44>
  if (cluster < 2 || cluster > m_lastCluster) {
    6cc8:	ldr	r3, [r5, #28]
    6cca:	cmp	r4, r3
    6ccc:	bhi.n	6cec <FatPartition::freeChain(unsigned long)+0x44>
    6cce:	bl	6b40 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);
    if (cluster < m_allocSearchStart) {
      m_allocSearchStart = cluster - 1;
    6cd2:	subs	r2, r4, #1
    if (!fatPut(cluster, 0)) {
    6cd4:	cbz	r0, 6cec <FatPartition::freeChain(unsigned long)+0x44>
    if (cluster < m_allocSearchStart) {
    6cd6:	ldr	r3, [r5, #12]
    6cd8:	cmp	r3, r4
    }
    cluster = next;
    6cda:	ldr	r4, [sp, #4]
      m_allocSearchStart = cluster - 1;
    6cdc:	it	hi
    6cde:	strhi	r2, [r5, #12]
  } while (fg);
    6ce0:	cbz	r6, 6cee <FatPartition::freeChain(unsigned long)+0x46>
  if (cluster < 2 || cluster > m_lastCluster) {
    6ce2:	cmp	r4, #1
    6ce4:	mov	r1, r4
    6ce6:	add	r2, sp, #4
    6ce8:	mov	r0, r5
    6cea:	bhi.n	6cb2 <FatPartition::freeChain(unsigned long)+0xa>

  return true;

fail:
  return false;
    6cec:	movs	r0, #0
}
    6cee:	add	sp, #8
    6cf0:	pop	{r4, r5, r6, pc}
    6cf2:	nop

00006cf4 <FatPartition::freeClusterCount()>:
//------------------------------------------------------------------------------
int32_t FatPartition::freeClusterCount() {
    6cf4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint8_t fatType() const { return m_fatType; }
    6cf8:	ldrb	r3, [r0, #7]
    6cfa:	mov	r6, r0
    return m_freeClusterCount;
  }
#endif  // MAINTAIN_FREE_CLUSTER_COUNT
  uint32_t free = 0;
  uint32_t sector;
  uint32_t todo = m_lastCluster + 1;
    6cfc:	ldr	r5, [r0, #28]
      }
      if (fg && c == 0) {
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    6cfe:	cmp	r3, #32
  uint32_t todo = m_lastCluster + 1;
    6d00:	add.w	r5, r5, #1
  } else if (fatType() == 16 || fatType() == 32) {
    6d04:	beq.n	6d0a <FatPartition::freeClusterCount()+0x16>
    6d06:	cmp	r3, #16
    6d08:	bne.n	6d88 <FatPartition::freeClusterCount()+0x94>
    sector = m_fatStartSector;
    6d0a:	ldr.w	r8, [r6, #24]
    while (todo) {
    6d0e:	cmp	r5, #0
    6d10:	beq.n	6d90 <FatPartition::freeClusterCount()+0x9c>
    return m_fatCache.prepare(sector, options);
    6d12:	add.w	r7, r6, #564	; 0x234
  uint32_t free = 0;
    6d16:	movs	r4, #0
    6d18:	mov	r1, r8
    6d1a:	movs	r2, #2
    6d1c:	mov	r0, r7
    6d1e:	add.w	r8, r8, #1
    6d22:	bl	31dc <FsCache::prepare(unsigned long, unsigned char)>
      uint8_t* pc = fatCachePrepare(sector++, FsCache::CACHE_FOR_READ);
      if (!pc) {
    6d26:	cbz	r0, 6d88 <FatPartition::freeClusterCount()+0x94>
        DBG_FAIL_MACRO;
        goto fail;
      }
      n = fatType() == 16 ? m_bytesPerSector / 2 : m_bytesPerSector / 4;
    6d28:	ldrb	r3, [r6, #7]
    6d2a:	cmp	r3, #16
    6d2c:	beq.n	6d56 <FatPartition::freeClusterCount()+0x62>
      if (todo < n) {
    6d2e:	cmp	r5, #127	; 0x7f
    6d30:	bhi.n	6d7c <FatPartition::freeClusterCount()+0x88>
        n = todo;
    6d32:	uxth	r3, r5
    6d34:	mov	r1, r5
    6d36:	subs	r2, r3, #1
    6d38:	subs	r3, r0, #4
    6d3a:	uxth	r2, r2
    6d3c:	add.w	r0, r0, r2, lsl #2
          }
        }
      } else {
        uint32_t* p32 = reinterpret_cast<uint32_t*>(pc);
        for (uint16_t i = 0; i < n; i++) {
          if (p32[i] == 0) {
    6d40:	ldr.w	r2, [r3, #4]!
    6d44:	cbnz	r2, 6d48 <FatPartition::freeClusterCount()+0x54>
            free++;
    6d46:	adds	r4, #1
        for (uint16_t i = 0; i < n; i++) {
    6d48:	cmp	r3, r0
    6d4a:	bne.n	6d40 <FatPartition::freeClusterCount()+0x4c>
    while (todo) {
    6d4c:	subs	r5, r5, r1
    6d4e:	bne.n	6d18 <FatPartition::freeClusterCount()+0x24>
  } else {
    // invalid FAT type
    DBG_FAIL_MACRO;
    goto fail;
  }
  setFreeClusterCount(free);
    6d50:	mov	r0, r4
  return free;

fail:
  return -1;
}
    6d52:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (todo < n) {
    6d56:	cmp	r5, #255	; 0xff
    6d58:	bls.n	6d82 <FatPartition::freeClusterCount()+0x8e>
    6d5a:	mov.w	r1, #256	; 0x100
      n = fatType() == 16 ? m_bytesPerSector / 2 : m_bytesPerSector / 4;
    6d5e:	mov	r3, r1
    6d60:	subs	r2, r3, #1
    6d62:	subs	r3, r0, #2
    6d64:	uxth	r2, r2
    6d66:	add.w	r0, r0, r2, lsl #1
          if (p16[i] == 0) {
    6d6a:	ldrh.w	r2, [r3, #2]!
    6d6e:	cbnz	r2, 6d72 <FatPartition::freeClusterCount()+0x7e>
            free++;
    6d70:	adds	r4, #1
        for (uint16_t i = 0; i < n; i++) {
    6d72:	cmp	r0, r3
    6d74:	bne.n	6d6a <FatPartition::freeClusterCount()+0x76>
    while (todo) {
    6d76:	subs	r5, r5, r1
    6d78:	bne.n	6d18 <FatPartition::freeClusterCount()+0x24>
    6d7a:	b.n	6d50 <FatPartition::freeClusterCount()+0x5c>
      if (todo < n) {
    6d7c:	movs	r1, #128	; 0x80
      n = fatType() == 16 ? m_bytesPerSector / 2 : m_bytesPerSector / 4;
    6d7e:	mov	r3, r1
    6d80:	b.n	6d36 <FatPartition::freeClusterCount()+0x42>
        n = todo;
    6d82:	uxth	r3, r5
    6d84:	mov	r1, r5
    6d86:	b.n	6d60 <FatPartition::freeClusterCount()+0x6c>
  return -1;
    6d88:	mov.w	r0, #4294967295
}
    6d8c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    while (todo) {
    6d90:	mov	r0, r5
  return free;
    6d92:	b.n	6d52 <FatPartition::freeClusterCount()+0x5e>

00006d94 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)>:
//------------------------------------------------------------------------------
bool FatPartition::init(FsBlockDevice* dev, uint8_t part, uint32_t volStart) {
    6d94:	push	{r3, r4, r5, r6, r7, lr}
    6d96:	mov	r6, r3
    m_sector = 0XFFFFFFFF;
    6d98:	mov.w	r3, #4294967295
  m_blockDev = dev;
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
    6d9c:	mov.w	ip, #0
bool FatPartition::init(FsBlockDevice* dev, uint8_t part, uint32_t volStart) {
    6da0:	mov	r4, r0
    6da2:	str	r3, [r0, #44]	; 0x2c
  m_allocSearchStart = 1;
  m_cache.init(dev);
    6da4:	add.w	r7, r0, #36	; 0x24
    6da8:	str.w	r3, [r0, #572]	; 0x23c
  m_allocSearchStart = 1;
    6dac:	movs	r3, #1
  m_blockDev = dev;
    6dae:	str	r1, [r0, #0]
  m_fatType = 0;
    6db0:	strb.w	ip, [r0, #7]
    m_blockDev = blockDev;
    6db4:	str	r1, [r0, #40]	; 0x28
    6db6:	str.w	r1, [r0, #568]	; 0x238
    m_status = 0;
    6dba:	strb.w	ip, [r0, #36]	; 0x24
    6dbe:	strb.w	ip, [r0, #564]	; 0x234
  m_allocSearchStart = 1;
    6dc2:	str	r3, [r0, #12]
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(dev);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    6dc4:	cbz	r2, 6dfc <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x68>
    if (part > 4) {
    6dc6:	cmp	r2, #4
    6dc8:	mov	r5, r2
    6dca:	bls.n	6dd0 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x3c>
  m_fatCache.setMirrorOffset(m_sectorsPerFat);
#endif  // USE_SEPARATE_FAT_CACHE
  return true;

fail:
  return false;
    6dcc:	movs	r0, #0
}
    6dce:	pop	{r3, r4, r5, r6, r7, pc}
    return m_cache.prepare(sector, options);
    6dd0:	mov	r2, ip
    6dd2:	mov	r1, ip
    6dd4:	mov	r0, r7
    6dd6:	bl	31dc <FsCache::prepare(unsigned long, unsigned char)>
    if (!mbr) {
    6dda:	cmp	r0, #0
    6ddc:	beq.n	6dcc <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x38>
    MbrPart_t* mp = mbr->part + part - 1;
    6dde:	mvn.w	r3, #4026531840	; 0xf0000000
    6de2:	add.w	r0, r0, #446	; 0x1be
    6de6:	add	r3, r5
    6de8:	lsls	r1, r3, #4
    6dea:	add.w	r3, r0, r3, lsl #4
    if (mp->type == 0 || (mp->boot != 0 && mp->boot != 0X80)) {
    6dee:	ldrb	r2, [r3, #4]
    6df0:	cmp	r2, #0
    6df2:	beq.n	6dcc <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x38>
    6df4:	ldrb	r2, [r0, r1]
    6df6:	lsls	r2, r2, #25
    6df8:	bne.n	6dcc <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x38>
  return *reinterpret_cast<const uint32_t*>(src);
    6dfa:	ldr	r6, [r3, #8]
    6dfc:	movs	r2, #0
    6dfe:	mov	r1, r6
    6e00:	mov	r0, r7
    6e02:	bl	31dc <FsCache::prepare(unsigned long, unsigned char)>
  if (!pbs) {
    6e06:	cmp	r0, #0
    6e08:	beq.n	6dcc <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x38>
  if (bpb->fatCount != 2 || getLe16(bpb->bytesPerSector) != m_bytesPerSector) {
    6e0a:	ldrb	r3, [r0, #16]
    6e0c:	cmp	r3, #2
    6e0e:	bne.n	6dcc <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x38>
    6e10:	ldrh.w	r3, [r0, #11]
    6e14:	cmp.w	r3, #512	; 0x200
    6e18:	bne.n	6dcc <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x38>
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    6e1a:	ldrb	r1, [r0, #13]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    6e1c:	subs	r3, r1, #1
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    6e1e:	cmp	r1, #1
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    6e20:	strb	r1, [r4, #4]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    6e22:	strb	r3, [r4, #5]
  m_sectorsPerClusterShift = 0;
    6e24:	mov.w	r3, #0
    6e28:	strb	r3, [r4, #6]
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    6e2a:	beq.n	6eb0 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x11c>
    6e2c:	movs	r2, #1
    6e2e:	lsls	r2, r2, #1
    m_sectorsPerClusterShift++;
    6e30:	adds	r3, #1
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    6e32:	uxtb	r2, r2
    m_sectorsPerClusterShift++;
    6e34:	uxtb	r3, r3
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    6e36:	cmp	r1, r2
    6e38:	beq.n	6e44 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0xb0>
    if (tmp == 0) {
    6e3a:	cmp	r3, #8
    6e3c:	bne.n	6e2e <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x9a>
  return false;
    6e3e:	movs	r0, #0
    6e40:	strb	r3, [r4, #6]
}
    6e42:	pop	{r3, r4, r5, r6, r7, pc}
  countOfClusters >>= m_sectorsPerClusterShift;
    6e44:	mov	r5, r3
    6e46:	strb	r3, [r4, #6]
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
    6e48:	ldrh	r1, [r0, #22]
    6e4a:	str	r1, [r4, #16]
  if (m_sectorsPerFat == 0) {
    6e4c:	cbnz	r1, 6e52 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0xbe>
    6e4e:	ldr	r1, [r0, #36]	; 0x24
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
    6e50:	str	r1, [r4, #16]
  m_fatStartSector = volStart + getLe16(bpb->reservedSectorCount);
    6e52:	ldrh	r3, [r0, #14]
  return *reinterpret_cast<const uint16_t*>(src);
    6e54:	ldrh.w	r2, [r0, #17]
    6e58:	add	r3, r6
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);
    6e5a:	strh	r2, [r4, #8]
      ((FS_DIR_SIZE * m_rootDirEntryCount + m_bytesPerSector - 1) /
    6e5c:	lsls	r2, r2, #5
  m_fatStartSector = volStart + getLe16(bpb->reservedSectorCount);
    6e5e:	str	r3, [r4, #24]
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
    6e60:	add.w	r3, r3, r1, lsl #1
      ((FS_DIR_SIZE * m_rootDirEntryCount + m_bytesPerSector - 1) /
    6e64:	addw	r2, r2, #511	; 0x1ff
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
    6e68:	str	r3, [r4, #32]
      m_rootDirStart +
    6e6a:	add.w	r3, r3, r2, lsr #9
  totalSectors = getLe16(bpb->totalSectors16);
    6e6e:	ldrh.w	r2, [r0, #19]
  m_dataStartSector =
    6e72:	str	r3, [r4, #20]
  if (totalSectors == 0) {
    6e74:	cbnz	r2, 6e78 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0xe4>
  return *reinterpret_cast<const uint32_t*>(src);
    6e76:	ldr	r2, [r0, #32]
  countOfClusters = totalSectors - (m_dataStartSector - volStart);
    6e78:	subs	r3, r6, r3
    6e7a:	add	r3, r2
  countOfClusters >>= m_sectorsPerClusterShift;
    6e7c:	lsrs	r3, r5
  m_lastCluster = countOfClusters + 1;
    6e7e:	adds	r2, r3, #1
    6e80:	str	r2, [r4, #28]
  if (countOfClusters < 4085) {
    6e82:	movw	r2, #4084	; 0xff4
    6e86:	cmp	r3, r2
    6e88:	bls.n	6ea4 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x110>
  } else if (countOfClusters < 65525) {
    6e8a:	movw	r2, #65524	; 0xfff4
    6e8e:	cmp	r3, r2
    6e90:	bls.n	6eac <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x118>
    6e92:	ldr	r2, [r0, #44]	; 0x2c
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
    6e94:	movs	r3, #32
    6e96:	str	r2, [r4, #32]
  return true;
    6e98:	movs	r0, #1
    m_fatType = 16;
    6e9a:	strb	r3, [r4, #7]
  /** Set the offset to the second FAT for mirroring.
   * \param[in] offset Sector offset to second FAT.
   */
  void setMirrorOffset(uint32_t offset) { m_mirrorOffset = offset; }
    6e9c:	str	r1, [r4, #48]	; 0x30
    6e9e:	str.w	r1, [r4, #576]	; 0x240
}
    6ea2:	pop	{r3, r4, r5, r6, r7, pc}
    m_fatType = 12;
    6ea4:	movs	r3, #12
  return false;
    6ea6:	movs	r0, #0
    m_fatType = 12;
    6ea8:	strb	r3, [r4, #7]
}
    6eaa:	pop	{r3, r4, r5, r6, r7, pc}
    6eac:	movs	r3, #16
    6eae:	b.n	6e98 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x104>
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    6eb0:	mov	r5, r3
    6eb2:	b.n	6e48 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0xb4>

00006eb4 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)>:
  } else if (i < 13) {
    setLe16(ldir->unicode3 + 2 * (i - 11), c);
  }
}
//==============================================================================
bool FatFile::cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    6eb4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  FatFile dir = *this;
    6eb8:	mov	lr, r0
bool FatFile::cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    6eba:	sub	sp, #40	; 0x28
    6ebc:	mov	r5, r2
    6ebe:	ldr	r4, [r2, #0]
    6ec0:	mov	r6, r0
    6ec2:	mov	r8, r1
  FatFile dir = *this;
    6ec4:	add.w	ip, sp, #4
  DirLfn_t* ldir;
  fname->reset();
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    6ec8:	mov	r7, r3
  FatFile dir = *this;
    6eca:	ldmia.w	lr!, {r0, r1, r2, r3}
    6ece:	stmia.w	ip!, {r0, r1, r2, r3}
    6ed2:	ldmia.w	lr!, {r0, r1, r2, r3}
    6ed6:	stmia.w	ip!, {r0, r1, r2, r3}
    6eda:	ldr.w	r3, [lr]
    6ede:	str	r4, [r5, #4]
    6ee0:	str.w	r3, [ip]
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    6ee4:	cmp	r7, #0
    6ee6:	beq.n	6f60 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xac>
    6ee8:	mov.w	r9, #1
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(index - order));
    6eec:	sub.w	r1, r8, r9
    return seekSet(32UL * index) ? readDirCache() : nullptr;
    6ef0:	add	r0, sp, #4
    6ef2:	uxth	r1, r1
    6ef4:	lsls	r1, r1, #5
    6ef6:	bl	6564 <FatFile::seekSet(unsigned long)>
    6efa:	cbz	r0, 6f64 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xb0>
    6efc:	movs	r1, #0
    6efe:	add	r0, sp, #4
    6f00:	bl	62a4 <FatFile::readDirCache(bool)>
    if (!ldir) {
    6f04:	mov	sl, r0
    6f06:	cbz	r0, 6f64 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xb0>
    6f08:	movs	r4, #0
    }
    // These should be checked in caller.
    DBG_HALT_IF(ldir->attributes != FAT_ATTRIB_LONG_NAME);
    DBG_HALT_IF(order != (ldir->order & 0X1F));
    for (uint8_t i = 0; i < 13; i++) {
      uint16_t u = getLfnChar(ldir, i);
    6f0a:	uxtb	r2, r4
    6f0c:	mov	r1, sl
    6f0e:	mov	r0, r6
    for (uint8_t i = 0; i < 13; i++) {
    6f10:	adds	r4, #1
      uint16_t u = getLfnChar(ldir, i);
    6f12:	bl	5908 <FatFile::getLfnChar(DirLfn_t*, unsigned char)>
      DBG_HALT_IF(cp == 0XFFFF);
      if (toUpcase(u) != toUpcase(cp)) {
        return false;
      }
#else   // USE_UTF8_LONG_NAMES
      if (u > 0X7F || toUpper(u) != toUpper(fname->getch())) {
    6f16:	uxtb	r3, r0
      if (fname->atEnd()) {
    6f18:	ldrd	r1, r2, [r5, #4]
    6f1c:	cmp	r2, r1
  char getch() { return atEnd() ? 0 : *next++; }
    6f1e:	add.w	ip, r1, #1
    6f22:	beq.n	6f6c <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xb8>
      if (u > 0X7F || toUpper(u) != toUpper(fname->getch())) {
    6f24:	cmp	r0, #127	; 0x7f
inline char toUpper(char c) { return isLower(c) ? c - 'a' + 'A' : c; }
    6f26:	sub.w	r2, r3, #97	; 0x61
    6f2a:	sub.w	lr, r3, #32
      if (u > 0X7F || toUpper(u) != toUpper(fname->getch())) {
    6f2e:	bhi.n	6f64 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xb0>
inline char toUpper(char c) { return isLower(c) ? c - 'a' + 'A' : c; }
    6f30:	cmp	r2, #25
    6f32:	str.w	ip, [r5, #4]
    6f36:	ldrb	r2, [r1, #0]
    6f38:	it	ls
    6f3a:	uxtbls.w	r3, lr
    6f3e:	sub.w	r1, r2, #97	; 0x61
    6f42:	sub.w	r0, r2, #32
    6f46:	cmp	r1, #25
    6f48:	it	ls
    6f4a:	uxtbls	r2, r0
      if (u > 0X7F || toUpper(u) != toUpper(fname->getch())) {
    6f4c:	cmp	r2, r3
    6f4e:	bne.n	6f64 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xb0>
    for (uint8_t i = 0; i < 13; i++) {
    6f50:	cmp	r4, #13
    6f52:	bne.n	6f0a <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x56>
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    6f54:	add.w	r9, r9, #1
    6f58:	uxtb.w	r9, r9
    6f5c:	cmp	r7, r9
    6f5e:	bcs.n	6eec <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x38>
        return false;
      }
#endif  // USE_UTF8_LONG_NAMES
    }
  }
  return true;
    6f60:	movs	r0, #1
    6f62:	b.n	6f66 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xb2>

fail:
  return false;
    6f64:	movs	r0, #0
}
    6f66:	add	sp, #40	; 0x28
    6f68:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return u == 0;
    6f6c:	clz	r0, r0
    6f70:	lsrs	r0, r0, #5
}
    6f72:	add	sp, #40	; 0x28
    6f74:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00006f78 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)>:
//------------------------------------------------------------------------------
bool FatFile::createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    6f78:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  FatFile dir = *this;
    6f7c:	mov	lr, r0
bool FatFile::createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    6f7e:	sub	sp, #40	; 0x28
    6f80:	mov	r4, r2
    6f82:	mov	r8, r1
    6f84:	mov	r6, r3
  FatFile dir = *this;
    6f86:	add.w	r9, sp, #4
    6f8a:	add.w	r7, r2, #17
    6f8e:	add.w	ip, r2, #28
    uint8_t sum = 0;
    6f92:	movs	r5, #0
    6f94:	ldmia.w	lr!, {r0, r1, r2, r3}
    6f98:	stmia.w	r9!, {r0, r1, r2, r3}
    6f9c:	ldmia.w	lr!, {r0, r1, r2, r3}
    6fa0:	stmia.w	r9!, {r0, r1, r2, r3}
    6fa4:	ldr.w	r3, [lr]
    6fa8:	str.w	r3, [r9]
      sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    6fac:	lsls	r3, r5, #7
    6fae:	ldrb.w	r2, [r7, #1]!
    6fb2:	orr.w	r3, r3, r5, lsr #1
    for (uint8_t i = 0; i < 11; i++) {
    6fb6:	cmp	r7, ip
      sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    6fb8:	uxtab	r3, r2, r3
    6fbc:	uxtb	r5, r3
    for (uint8_t i = 0; i < 11; i++) {
    6fbe:	bne.n	6fac <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x34>
  void reset() { next = begin; }
    6fc0:	ldr	r3, [r4, #0]
    6fc2:	str	r3, [r4, #4]
  DirLfn_t* ldir;
  uint8_t checksum = lfnChecksum(fname->sfn);
  uint8_t fc = 0;
  fname->reset();

  for (uint8_t order = 1; order <= lfnOrd; order++) {
    6fc4:	cmp	r6, #0
    6fc6:	beq.n	707c <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x104>
  uint8_t fc = 0;
    6fc8:	mov.w	r9, #0
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    6fcc:	mov.w	sl, #1
    return seekSet(32UL * index) ? readDirCache() : nullptr;
    6fd0:	mov	r7, r9
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(index - order));
    6fd2:	sub.w	r1, r8, sl
    6fd6:	add	r0, sp, #4
    6fd8:	uxth	r1, r1
    6fda:	lsls	r1, r1, #5
    6fdc:	bl	6564 <FatFile::seekSet(unsigned long)>
    6fe0:	cmp	r0, #0
    6fe2:	beq.n	708c <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x114>
    6fe4:	movs	r1, #0
    6fe6:	add	r0, sp, #4
    6fe8:	bl	62a4 <FatFile::readDirCache(bool)>
    if (!ldir) {
    6fec:	cmp	r0, #0
    6fee:	beq.n	708c <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x114>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dir.m_vol->cacheDirty();
    6ff0:	ldr	r2, [sp, #12]
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    6ff2:	cmp	sl, r6
  bool atEnd() { return next == end; }
    6ff4:	mov.w	ip, #1
  void dirty() { m_status |= CACHE_STATUS_DIRTY; }
    6ff8:	ldrb.w	r3, [r2, #36]	; 0x24
    6ffc:	orr.w	r3, r3, #1
    7000:	strb.w	r3, [r2, #36]	; 0x24
    7004:	ite	eq
    7006:	orreq.w	r2, sl, #64	; 0x40
    700a:	movne	r2, sl
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    700c:	movs	r3, #15
    ldir->mustBeZero1 = 0;
    700e:	strb	r7, [r0, #12]
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    7010:	strb	r2, [r0, #0]
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    7012:	adds	r2, r0, #1
    7014:	strb	r3, [r0, #11]
    7016:	movs	r3, #0
    ldir->checksum = checksum;
    7018:	strb	r5, [r0, #13]
    701a:	ldr	r1, [r4, #8]
  *reinterpret_cast<uint16_t*>(dst) = src;
    701c:	strh	r7, [r0, #26]
    setLe16(ldir->mustBeZero2, 0);
    for (uint8_t i = 0; i < 13; i++) {
    701e:	b.n	702e <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xb6>
    7020:	strh	r0, [r2, #0]
    7022:	add.w	ip, ip, #1
    7026:	adds	r3, #1
    7028:	adds	r2, #2
    702a:	uxtb.w	ip, ip
    702e:	ldr	r0, [r4, #4]
      uint16_t cp;
      if (fname->atEnd()) {
    7030:	cmp	r0, r1
    7032:	beq.n	7052 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xda>
  uint16_t get16() { return atEnd() ? 0 : *next++; }
    7034:	add.w	lr, r0, #1
    7038:	str.w	lr, [r4, #4]
    703c:	ldrb	r0, [r0, #0]
  if (i < 5) {
    703e:	cmp	r3, #4
    7040:	uxtb.w	lr, r3
    7044:	bls.n	7020 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xa8>
  } else if (i < 11) {
    7046:	cmp.w	lr, #10
    704a:	bhi.n	7066 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xee>
    704c:	strh.w	r0, [r2, #3]
}
    7050:	b.n	7022 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xaa>
        cp = fc++ ? 0XFFFF : 0;
    7052:	cmp.w	r9, #0
    7056:	beq.n	7084 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x10c>
    7058:	add.w	r9, r9, #1
    705c:	movw	r0, #65535	; 0xffff
    7060:	uxtb.w	r9, r9
    7064:	b.n	703e <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xc6>
    for (uint8_t i = 0; i < 13; i++) {
    7066:	cmp.w	ip, #13
  *reinterpret_cast<uint16_t*>(dst) = src;
    706a:	strh.w	r0, [r2, #5]
    706e:	bne.n	7022 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xaa>
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    7070:	add.w	sl, sl, #1
    7074:	uxtb.w	sl, sl
    7078:	cmp	r6, sl
    707a:	bcs.n	6fd2 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x5a>
        DBG_HALT_IF(cp == 0XFFFF);
      }
      putLfnChar(ldir, i, cp);
    }
  }
  return true;
    707c:	movs	r0, #1

fail:
  return false;
}
    707e:	add	sp, #40	; 0x28
    7080:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        cp = fc++ ? 0XFFFF : 0;
    7084:	mov	r0, r9
    7086:	mov.w	r9, #1
    708a:	b.n	703e <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xc6>
  return false;
    708c:	movs	r0, #0
}
    708e:	add	sp, #40	; 0x28
    7090:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00007094 <FatFile::makeSFN(FatLfn_t*)>:
  uint8_t uc = 0;
  uint8_t i = 0;
  uint8_t in = 7;
  const char* dot;
  const char* end = fname->end;
  const char* ptr = fname->begin;
    7094:	mov	r2, r0
  // Assume blanks removed from start and end.
  DBG_HALT_IF(*ptr == ' ' || *(end - 1) == ' ' || *(end - 1) == '.');

  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
    7096:	mov.w	r1, #538976288	; 0x20202020
  const char* ptr = fname->begin;
    709a:	ldr.w	r3, [r2], #18
bool FatFile::makeSFN(FatLfn_t* fname) {
    709e:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    fname->sfn[k] = ' ';
    70a2:	str.w	r1, [r0, #18]
bool FatFile::makeSFN(FatLfn_t* fname) {
    70a6:	mov	lr, r0
  const char* end = fname->end;
    70a8:	ldr	r4, [r0, #8]
    fname->sfn[k] = ' ';
    70aa:	str	r1, [r2, #4]
    70ac:	str.w	r1, [r2, #7]
  }
  // Not 8.3 if starts with dot.
  is83 = *ptr == '.' ? false : true;
    70b0:	ldrb	r2, [r3, #0]
    70b2:	cmp	r2, #46	; 0x2e
    70b4:	ite	ne
    70b6:	movne	r0, #1
    70b8:	moveq	r0, #0
  // Skip leading dots.
  for (; *ptr == '.'; ptr++) {
    70ba:	bne.n	70c4 <FatFile::makeSFN(FatLfn_t*)+0x30>
    70bc:	ldrb.w	r2, [r3, #1]!
    70c0:	cmp	r2, #46	; 0x2e
    70c2:	beq.n	70bc <FatFile::makeSFN(FatLfn_t*)+0x28>
  }
  // Find last dot.
  for (dot = end - 1; dot > ptr && *dot != '.'; dot--) {
    70c4:	subs	r1, r4, #1
    70c6:	cmp	r1, r3
    70c8:	bls.n	70e2 <FatFile::makeSFN(FatLfn_t*)+0x4e>
    70ca:	mov	r2, r1
    70cc:	b.n	70d4 <FatFile::makeSFN(FatLfn_t*)+0x40>
    70ce:	cmp	r3, r2
    70d0:	mov	r1, r2
    70d2:	beq.n	70e2 <FatFile::makeSFN(FatLfn_t*)+0x4e>
    70d4:	mov	r1, r2
    70d6:	subs	r2, #1
    70d8:	ldrb.w	ip, [r1]
    70dc:	cmp.w	ip, #46	; 0x2e
    70e0:	bne.n	70ce <FatFile::makeSFN(FatLfn_t*)+0x3a>
  }

  for (; ptr < end; ptr++) {
    70e2:	cmp	r4, r3
    70e4:	mov.w	r5, #0
    70e8:	bls.w	71f8 <FatFile::makeSFN(FatLfn_t*)+0x164>
    70ec:	movs	r6, #7
    70ee:	movs	r7, #8
    70f0:	mov	r9, r5
    70f2:	mov	r8, r5
    70f4:	b.n	7104 <FatFile::makeSFN(FatLfn_t*)+0x70>
    70f6:	adds	r3, #1
    c = *ptr;
    if (c == '.' && ptr == dot) {
      in = 10;                // Max index for full 8.3 name.
    70f8:	movs	r6, #10
      i = 8;                  // Place for extension.
    70fa:	mov.w	r9, #8
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    70fe:	movs	r7, #16
  for (; ptr < end; ptr++) {
    7100:	cmp	r4, r3
    7102:	bls.n	71bc <FatFile::makeSFN(FatLfn_t*)+0x128>
    c = *ptr;
    7104:	ldrb	r2, [r3, #0]
    if (c == '.' && ptr == dot) {
    7106:	cmp	r2, #46	; 0x2e
    7108:	it	eq
    710a:	cmpeq	r1, r3
    710c:	beq.n	70f6 <FatFile::makeSFN(FatLfn_t*)+0x62>
  if (c == '"' || c == '|' || c == '[' || c == '\\' || c == ']') {
    710e:	cmp	r2, #34	; 0x22
    7110:	beq.n	712e <FatFile::makeSFN(FatLfn_t*)+0x9a>
    7112:	cmp	r2, #124	; 0x7c
    7114:	beq.n	712e <FatFile::makeSFN(FatLfn_t*)+0x9a>
    7116:	sub.w	ip, r2, #91	; 0x5b
    711a:	cmp.w	ip, #2
    711e:	bls.n	712e <FatFile::makeSFN(FatLfn_t*)+0x9a>
  if ((0X2A <= c && c <= 0X2F && c != 0X2D) || (0X3A <= c && c <= 0X3F)) {
    7120:	sub.w	ip, r2, #42	; 0x2a
    7124:	cmp.w	ip, #5
    7128:	bhi.n	716e <FatFile::makeSFN(FatLfn_t*)+0xda>
    712a:	cmp	r2, #45	; 0x2d
    712c:	beq.n	716e <FatFile::makeSFN(FatLfn_t*)+0xda>
    } else {
      if (sfnReservedChar(c)) {
        is83 = false;
        // Skip UTF-8 trailing characters.
        if ((c & 0XC0) == 0X80) {
    712e:	and.w	r2, r2, #192	; 0xc0
    7132:	cmp	r2, #128	; 0x80
    7134:	beq.n	71f2 <FatFile::makeSFN(FatLfn_t*)+0x15e>
          continue;
        }
        c = '_';
      }
      if (i > in) {
    7136:	cmp	r6, r9
    7138:	bcs.n	719a <FatFile::makeSFN(FatLfn_t*)+0x106>
        is83 = false;
        if (in == 10 || ptr > dot) {
    713a:	cmp	r1, r3
    713c:	ite	cs
    713e:	movcs	r0, #0
    7140:	movcc	r0, #1
    7142:	cmp	r6, #10
    7144:	it	eq
    7146:	orreq.w	r0, r0, #1
    714a:	cmp	r0, #0
    714c:	beq.n	71de <FatFile::makeSFN(FatLfn_t*)+0x14a>
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
    714e:	ldrb.w	r3, [lr, #18]
    7152:	cmp	r3, #32
    7154:	beq.n	71d8 <FatFile::makeSFN(FatLfn_t*)+0x144>
  }
  if (is83) {
    fname->flags = (lc & uc) ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    7156:	ldrb.w	r3, [lr, #16]
    fname->flags = FNAME_FLAG_LOST_CHARS;
    715a:	movs	r0, #1
    fname->sfn[fname->seqPos] = '~';
    715c:	movs	r1, #126	; 0x7e
    fname->sfn[fname->seqPos + 1] = '1';
    715e:	movs	r2, #49	; 0x31
    fname->sfn[fname->seqPos] = '~';
    7160:	add	r3, lr
    fname->flags = FNAME_FLAG_LOST_CHARS;
    7162:	strb.w	r0, [lr, #17]
    fname->sfn[fname->seqPos] = '~';
    7166:	strb	r1, [r3, #18]
    fname->sfn[fname->seqPos + 1] = '1';
    7168:	strb	r2, [r3, #19]
  }
  return true;

fail:
  return false;
}
    716a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    716e:	sub.w	ip, r2, #58	; 0x3a
    7172:	cmp.w	ip, #5
    7176:	bls.n	712e <FatFile::makeSFN(FatLfn_t*)+0x9a>
      if (sfnReservedChar(c)) {
    7178:	sub.w	ip, r2, #33	; 0x21
    717c:	cmp.w	ip, #93	; 0x5d
    7180:	bhi.n	712e <FatFile::makeSFN(FatLfn_t*)+0x9a>
      if (i > in) {
    7182:	cmp	r6, r9
    7184:	bcc.n	713a <FatFile::makeSFN(FatLfn_t*)+0xa6>
      if (isLower(c)) {
    7186:	sub.w	ip, r2, #97	; 0x61
    718a:	cmp.w	ip, #25
    718e:	bhi.n	71e2 <FatFile::makeSFN(FatLfn_t*)+0x14e>
        c += 'A' - 'a';
    7190:	subs	r2, #32
        lc |= bit;
    7192:	orrs	r5, r7
        c += 'A' - 'a';
    7194:	uxtb	r2, r2
        lc |= bit;
    7196:	uxtb	r5, r5
    7198:	b.n	719e <FatFile::makeSFN(FatLfn_t*)+0x10a>
        is83 = false;
    719a:	movs	r0, #0
        c = '_';
    719c:	movs	r2, #95	; 0x5f
      fname->sfn[i++] = c;
    719e:	add.w	ip, r9, #1
    71a2:	add	r9, lr
  for (; ptr < end; ptr++) {
    71a4:	adds	r3, #1
      fname->sfn[i++] = c;
    71a6:	strb.w	r2, [r9, #18]
    71aa:	uxtb.w	r2, ip
      if (i < 7) {
    71ae:	cmp	r2, #6
        fname->seqPos = i;
    71b0:	mov	r9, r2
    71b2:	it	ls
    71b4:	strbls.w	r2, [lr, #16]
  for (; ptr < end; ptr++) {
    71b8:	cmp	r4, r3
    71ba:	bhi.n	7104 <FatFile::makeSFN(FatLfn_t*)+0x70>
  if (fname->sfn[0] == ' ') {
    71bc:	ldrb.w	r3, [lr, #18]
    71c0:	cmp	r3, #32
    71c2:	beq.n	71d8 <FatFile::makeSFN(FatLfn_t*)+0x144>
  if (is83) {
    71c4:	cmp	r0, #0
    71c6:	beq.n	7156 <FatFile::makeSFN(FatLfn_t*)+0xc2>
    fname->flags = (lc & uc) ? FNAME_FLAG_MIXED_CASE : lc;
    71c8:	tst.w	r8, r5
    71cc:	it	ne
    71ce:	movne	r5, #2
    71d0:	strb.w	r5, [lr, #17]
}
    71d4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  return false;
    71d8:	movs	r0, #0
}
    71da:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    71de:	mov	r3, r1
    71e0:	b.n	7100 <FatFile::makeSFN(FatLfn_t*)+0x6c>
      } else if (isUpper(c)) {
    71e2:	sub.w	ip, r2, #65	; 0x41
    71e6:	cmp.w	ip, #25
        uc |= bit;
    71ea:	it	ls
    71ec:	orrls.w	r8, r7, r8
    71f0:	b.n	719e <FatFile::makeSFN(FatLfn_t*)+0x10a>
  for (; ptr < end; ptr++) {
    71f2:	adds	r3, #1
        is83 = false;
    71f4:	movs	r0, #0
    71f6:	b.n	7100 <FatFile::makeSFN(FatLfn_t*)+0x6c>
  for (; ptr < end; ptr++) {
    71f8:	mov	r8, r5
    71fa:	b.n	71bc <FatFile::makeSFN(FatLfn_t*)+0x128>

000071fc <FatFile::makeUniqueSfn(FatLfn_t*)>:
//------------------------------------------------------------------------------
bool FatFile::makeUniqueSfn(FatLfn_t* fname) {
    71fc:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;
    7200:	mov.w	r9, #98	; 0x62
  DirFat_t* dir;
  uint16_t hex = 0;
    7204:	movs	r5, #0
bool FatFile::makeUniqueSfn(FatLfn_t* fname) {
    7206:	mov	r7, r1
    7208:	mov	r4, r0
    720a:	ldr.w	fp, [pc, #160]	; 72ac <FatFile::makeUniqueSfn(FatLfn_t*)+0xb0>
    for (uint8_t i = pos + 4; i > pos; i--) {
      uint8_t h = hex & 0XF;
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
      hex >>= 4;
    }
    fname->sfn[pos] = '~';
    720e:	mov.w	sl, #126	; 0x7e
  uint8_t pos = fname->seqPos;
    7212:	ldrb.w	r8, [r1, #16]
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFatFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    7216:	add.w	r6, r1, #18
	return systick_millis_count;
    721a:	cmp.w	r8, #3
    721e:	ldr.w	r3, [fp]
    7222:	it	cs
    7224:	movcs.w	r8, #3
    hex += millis();
    7228:	add	r3, r5
    722a:	uxth	r5, r3
    for (uint8_t i = pos + 4; i > pos; i--) {
    722c:	add.w	r3, r8, #4
    7230:	uxtb	r3, r3
      uint8_t h = hex & 0XF;
    7232:	and.w	r2, r5, #15
    for (uint8_t i = pos + 4; i > pos; i--) {
    7236:	subs	r0, r3, #1
      hex >>= 4;
    7238:	lsrs	r5, r5, #4
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    723a:	cmp	r2, #9
    723c:	add.w	r1, r2, #55	; 0x37
    7240:	it	ls
    7242:	addls.w	r1, r2, #48	; 0x30
    7246:	adds	r2, r7, r3
    for (uint8_t i = pos + 4; i > pos; i--) {
    7248:	uxtb	r3, r0
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    724a:	strb	r1, [r2, #18]
    for (uint8_t i = pos + 4; i > pos; i--) {
    724c:	cmp	r8, r3
    724e:	bne.n	7232 <FatFile::makeUniqueSfn(FatLfn_t*)+0x36>
    fname->sfn[pos] = '~';
    7250:	add.w	r3, r7, r8
  void rewind() { seekSet(0); }
    7254:	movs	r1, #0
    7256:	mov	r0, r4
    7258:	strb.w	sl, [r3, #18]
    725c:	bl	6564 <FatFile::seekSet(unsigned long)>
      dir = readDirCache(true);
    7260:	movs	r1, #1
    7262:	mov	r0, r4
    7264:	bl	62a4 <FatFile::readDirCache(bool)>
    7268:	mov	r3, r0
      if (isFatFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    726a:	movs	r2, #11
    726c:	mov	r0, r6
      if (!dir) {
    726e:	cbz	r3, 7298 <FatFile::makeUniqueSfn(FatLfn_t*)+0x9c>
      if (dir->name[0] == FAT_NAME_FREE) {
    7270:	ldrb.w	ip, [r3]
      if (isFatFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    7274:	mov	r1, r3
      if (dir->name[0] == FAT_NAME_FREE) {
    7276:	cmp.w	ip, #0
    727a:	beq.n	72a4 <FatFile::makeUniqueSfn(FatLfn_t*)+0xa8>
      if (isFatFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    727c:	ldrb	r3, [r3, #11]
    727e:	lsls	r3, r3, #28
    7280:	bmi.n	7260 <FatFile::makeUniqueSfn(FatLfn_t*)+0x64>
    7282:	bl	df1c <memcmp>
    7286:	cmp	r0, #0
    7288:	bne.n	7260 <FatFile::makeUniqueSfn(FatLfn_t*)+0x64>
  for (uint8_t seq = FIRST_HASH_SEQ; seq < 100; seq++) {
    728a:	add.w	r9, r9, #4294967295
    728e:	ands.w	r9, r9, #255	; 0xff
    7292:	bne.n	721a <FatFile::makeUniqueSfn(FatLfn_t*)+0x1e>
  }
  // fall inti fail - too many tries.
  DBG_FAIL_MACRO;

fail:
  return false;
    7294:	mov	r0, r9
fail:
    7296:	b.n	72a0 <FatFile::makeUniqueSfn(FatLfn_t*)+0xa4>
        if (!getError()) {
    7298:	ldrb	r0, [r4, #1]
    729a:	clz	r0, r0
    729e:	lsrs	r0, r0, #5

done:
  return true;
}
    72a0:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return true;
    72a4:	movs	r0, #1
}
    72a6:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    72aa:	nop
    72ac:	.word	0x200080e8

000072b0 <FatFile::open(FatFile*, FatLfn_t*, int)>:
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, FatLfn_t* fname, oflag_t oflag) {
    72b0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    72b4:	vpush	{d8}
    72b8:	sub	sp, #44	; 0x2c
    72ba:	strd	r0, r3, [sp, #8]
  uint16_t curIndex;
  uint16_t date;
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  auto vol = dirFile->m_vol;
    72be:	ldr	r3, [r1, #8]
    72c0:	str	r3, [sp, #28]

  if (!dirFile->isDir() || isOpen()) {
    72c2:	ldrb	r3, [r1, #0]
    72c4:	tst.w	r3, #208	; 0xd0
    72c8:	beq.n	7372 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
  bool isOpen() const { return m_attributes; }
    72ca:	ldr	r3, [sp, #8]
    72cc:	ldrb	r3, [r3, #0]
    72ce:	cmp	r3, #0
    72d0:	bne.n	7372 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  nameOrd = (fname->len + 12) / 13;
    72d2:	ldr	r3, [r2, #12]
    72d4:	mov	r8, r2
    72d6:	ldr	r2, [pc, #616]	; (7540 <FatFile::open(FatFile*, FatLfn_t*, int)+0x290>)
    72d8:	mov	r6, r1
    72da:	adds	r3, #12
    72dc:	umull	r2, r3, r2, r3
    72e0:	ubfx	r2, r3, #2, #8
  freeNeed = (fname->flags & FNAME_FLAG_NEED_LFN) ? 1 + nameOrd : 1;
    72e4:	ldrb.w	r3, [r8, #17]
    72e8:	lsls	r0, r3, #30
  nameOrd = (fname->len + 12) / 13;
    72ea:	str	r2, [sp, #16]
  freeNeed = (fname->flags & FNAME_FLAG_NEED_LFN) ? 1 + nameOrd : 1;
    72ec:	beq.w	743e <FatFile::open(FatFile*, FatLfn_t*, int)+0x18e>
    72f0:	adds	r7, r2, #1
    72f2:	uxtb	r7, r7
  uint8_t checksum = 0;
    72f4:	movs	r3, #0
  void rewind() { seekSet(0); }
    72f6:	mov	r0, r6
    72f8:	mov	r1, r3
    72fa:	mov	r4, r3
    72fc:	str	r3, [sp, #24]
    72fe:	bl	6564 <FatFile::seekSet(unsigned long)>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    7302:	add.w	r3, r8, #18
  uint8_t order = 0;
    7306:	mov	fp, r4
  uint8_t lfnOrd = 0;
    7308:	mov	r9, r4
  uint16_t freeIndex = 0;
    730a:	mov	sl, r4
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    730c:	vmov	s16, r3
  bool fnameFound = false;
    7310:	str	r4, [sp, #20]
    curIndex = dirFile->m_curPosition / FS_DIR_SIZE;
    7312:	ldr	r5, [r6, #20]
    dir = dirFile->readDirCache();
    7314:	movs	r1, #0
    7316:	mov	r0, r6
    7318:	bl	62a4 <FatFile::readDirCache(bool)>
    curIndex = dirFile->m_curPosition / FS_DIR_SIZE;
    731c:	ubfx	r5, r5, #5, #16
    if (!dir) {
    7320:	mov	r3, r0
    7322:	cbz	r0, 736e <FatFile::open(FatFile*, FatLfn_t*, int)+0xbe>
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
    7324:	ldrb	r2, [r0, #0]
    7326:	cmp	r2, #229	; 0xe5
    7328:	beq.n	737e <FatFile::open(FatFile*, FatLfn_t*, int)+0xce>
    732a:	cbz	r2, 737e <FatFile::open(FatFile*, FatLfn_t*, int)+0xce>
        freeFound = 0;
    732c:	cmp	r4, r7
    732e:	it	cc
    7330:	movcc	r4, #0
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    7332:	cmp	r2, #46	; 0x2e
    7334:	beq.n	738e <FatFile::open(FatFile*, FatLfn_t*, int)+0xde>
  return dir->attributes == FAT_ATTRIB_LONG_NAME;
    7336:	ldrb.w	ip, [r0, #11]
    } else if (isFatLongName(dir)) {
    733a:	cmp.w	ip, #15
    733e:	beq.n	73ea <FatFile::open(FatFile*, FatLfn_t*, int)+0x13a>
    } else if (isFatFileOrSubdir(dir)) {
    7340:	ands.w	ip, ip, #8
    7344:	bne.n	738e <FatFile::open(FatFile*, FatLfn_t*, int)+0xde>
      if (lfnOrd) {
    7346:	cmp.w	r9, #0
    734a:	bne.w	74f8 <FatFile::open(FatFile*, FatLfn_t*, int)+0x248>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    734e:	movs	r2, #11
    7350:	vmov	r1, s16
    7354:	bl	df1c <memcmp>
    7358:	cmp	r0, #0
    735a:	bne.n	7312 <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
    735c:	ldrb.w	r3, [r8, #17]
    7360:	ands.w	r3, r3, #1
    7364:	beq.w	7530 <FatFile::open(FatFile*, FatLfn_t*, int)+0x280>
          goto found;
        }
        fnameFound = true;
    7368:	movs	r3, #1
    736a:	str	r3, [sp, #20]
    736c:	b.n	7312 <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
      if (dirFile->getError()) {
    736e:	ldrb	r3, [r6, #1]
    7370:	cbz	r3, 7394 <FatFile::open(FatFile*, FatLfn_t*, int)+0xe4>
    goto fail;
  }
  return true;

fail:
  return false;
    7372:	movs	r0, #0
}
    7374:	add	sp, #44	; 0x2c
    7376:	vpop	{d8}
    737a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    curIndex = dirFile->m_curPosition / FS_DIR_SIZE;
    737e:	cmp	r4, #0
    7380:	it	eq
    7382:	moveq	sl, r5
      if (freeFound < freeNeed) {
    7384:	cmp	r4, r7
    7386:	bcs.n	738c <FatFile::open(FatFile*, FatLfn_t*, int)+0xdc>
        freeFound++;
    7388:	adds	r4, #1
    738a:	uxtb	r4, r4
      if (dir->name[0] == FAT_NAME_FREE) {
    738c:	cbz	r2, 7394 <FatFile::open(FatFile*, FatLfn_t*, int)+0xe4>
      lfnOrd = 0;
    738e:	mov.w	r9, #0
    7392:	b.n	7312 <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
    7394:	ldr	r3, [sp, #12]
    7396:	lsls	r2, r3, #22
    7398:	bpl.n	7372 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>

#define O_READ O_RDONLY
#define O_WRITE O_WRONLY

inline bool isWriteMode(oflag_t oflag) {
  oflag &= O_ACCMODE;
    739a:	and.w	r3, r3, #3
  return oflag == O_WRONLY || oflag == O_RDWR;
    739e:	subs	r3, #1
    73a0:	cmp	r3, #1
    73a2:	bhi.n	7372 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
  if (freeFound == 0) {
    73a4:	cmp	r4, #0
    73a6:	it	eq
    73a8:	moveq	sl, r5
  while (freeFound < freeNeed) {
    73aa:	cmp	r4, r7
    73ac:	bcc.n	73b6 <FatFile::open(FatFile*, FatLfn_t*, int)+0x106>
    73ae:	b.n	7442 <FatFile::open(FatFile*, FatLfn_t*, int)+0x192>
    freeFound++;
    73b0:	uxtb	r4, r3
  while (freeFound < freeNeed) {
    73b2:	cmp	r7, r4
    73b4:	beq.n	7442 <FatFile::open(FatFile*, FatLfn_t*, int)+0x192>
    dir = dirFile->readDirCache();
    73b6:	movs	r1, #0
    73b8:	mov	r0, r6
    73ba:	bl	62a4 <FatFile::readDirCache(bool)>
    freeFound++;
    73be:	adds	r3, r4, #1
    if (!dir) {
    73c0:	cmp	r0, #0
    73c2:	bne.n	73b0 <FatFile::open(FatFile*, FatLfn_t*, int)+0x100>
      if (dirFile->getError()) {
    73c4:	ldrb	r3, [r6, #1]
    73c6:	cmp	r3, #0
    73c8:	bne.n	7372 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
  while (freeFound < freeNeed) {
    73ca:	cmp	r7, r4
    73cc:	bls.n	7442 <FatFile::open(FatFile*, FatLfn_t*, int)+0x192>
    73ce:	ldr	r5, [sp, #28]
    73d0:	b.n	73de <FatFile::open(FatFile*, FatLfn_t*, int)+0x12e>
    return m_sectorsPerCluster * (m_bytesPerSector / FS_DIR_SIZE);
    73d2:	ldrb	r3, [r5, #4]
    freeFound += vol->dirEntriesPerCluster();
    73d4:	add.w	r4, r4, r3, lsl #4
    73d8:	uxtb	r4, r4
  while (freeFound < freeNeed) {
    73da:	cmp	r7, r4
    73dc:	bls.n	7442 <FatFile::open(FatFile*, FatLfn_t*, int)+0x192>
    if (!dirFile->addDirCluster()) {
    73de:	mov	r0, r6
    73e0:	bl	5ba0 <FatFile::addDirCluster()>
    73e4:	cmp	r0, #0
    73e6:	bne.n	73d2 <FatFile::open(FatFile*, FatLfn_t*, int)+0x122>
    73e8:	b.n	7372 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
      if (!lfnOrd) {
    73ea:	cmp.w	r9, #0
    73ee:	bne.n	7424 <FatFile::open(FatFile*, FatLfn_t*, int)+0x174>
        order = ldir->order & 0X1F;
    73f0:	and.w	fp, r2, #31
        if (order != nameOrd ||
    73f4:	ldr	r1, [sp, #16]
    73f6:	cmp	r1, fp
    73f8:	bne.n	7312 <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
    73fa:	ands.w	r9, r2, #64	; 0x40
    73fe:	beq.n	7312 <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
        checksum = ldir->checksum;
    7400:	ldrb	r3, [r0, #13]
    7402:	mov	r9, r1
    7404:	str	r3, [sp, #24]
      if (order == 1) {
    7406:	cmp.w	fp, #1
    740a:	bne.n	7312 <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
        if (!dirFile->cmpName(curIndex + 1, fname, lfnOrd)) {
    740c:	adds	r1, r5, #1
    740e:	mov	r3, r9
    7410:	mov	r2, r8
    7412:	mov	r0, r6
    7414:	uxth	r1, r1
    7416:	bl	6eb4 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)>
          lfnOrd = 0;
    741a:	cmp	r0, #0
    741c:	it	eq
    741e:	moveq.w	r9, #0
    7422:	b.n	7312 <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
      } else if (ldir->order != --order || checksum != ldir->checksum) {
    7424:	add.w	fp, fp, #4294967295
    7428:	uxtb.w	fp, fp
    742c:	cmp	r2, fp
    742e:	bne.n	738e <FatFile::open(FatFile*, FatLfn_t*, int)+0xde>
    7430:	ldrb	r3, [r0, #13]
    7432:	ldr	r2, [sp, #24]
    7434:	cmp	r3, r2
    7436:	beq.n	7406 <FatFile::open(FatFile*, FatLfn_t*, int)+0x156>
      lfnOrd = 0;
    7438:	mov.w	r9, #0
    743c:	b.n	7312 <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
  freeNeed = (fname->flags & FNAME_FLAG_NEED_LFN) ? 1 + nameOrd : 1;
    743e:	movs	r7, #1
    7440:	b.n	72f4 <FatFile::open(FatFile*, FatLfn_t*, int)+0x44>
  if (fnameFound) {
    7442:	ldr	r3, [sp, #20]
    7444:	cbz	r3, 7452 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1a2>
    if (!dirFile->makeUniqueSfn(fname)) {
    7446:	mov	r1, r8
    7448:	mov	r0, r6
    744a:	bl	71fc <FatFile::makeUniqueSfn(FatLfn_t*)>
    744e:	cmp	r0, #0
    7450:	beq.n	7372 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
  lfnOrd = freeNeed - 1;
    7452:	subs	r7, #1
  if (!dirFile->createLFN(curIndex, fname, lfnOrd)) {
    7454:	mov	r2, r8
    7456:	mov	r0, r6
  lfnOrd = freeNeed - 1;
    7458:	uxtb	r3, r7
  curIndex = freeIndex + lfnOrd;
    745a:	add.w	r5, sl, r3
  lfnOrd = freeNeed - 1;
    745e:	mov	r7, r3
  curIndex = freeIndex + lfnOrd;
    7460:	uxth	r5, r5
  if (!dirFile->createLFN(curIndex, fname, lfnOrd)) {
    7462:	mov	r1, r5
    7464:	bl	6f78 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)>
    7468:	cmp	r0, #0
    746a:	beq.n	7372 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    return seekSet(32UL * index) ? readDirCache() : nullptr;
    746c:	lsls	r1, r5, #5
    746e:	mov	r0, r6
    7470:	bl	6564 <FatFile::seekSet(unsigned long)>
    7474:	cmp	r0, #0
    7476:	beq.w	7372 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    747a:	movs	r1, #0
    747c:	mov	r0, r6
    747e:	bl	62a4 <FatFile::readDirCache(bool)>
  if (!dir) {
    7482:	mov	r4, r0
    7484:	cmp	r0, #0
    7486:	beq.w	7372 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
  memset(dir, 0, sizeof(DirFat_t));
    748a:	movs	r2, #32
    748c:	movs	r1, #0
    748e:	bl	e074 <memset>
  memcpy(dir->name, fname->sfn, 11);
    7492:	ldr.w	r2, [r8, #18]
    7496:	ldr.w	r3, [r8, #22]
    749a:	str	r2, [r4, #0]
    749c:	str	r3, [r4, #4]
    749e:	ldrb.w	r3, [r8, #28]
    74a2:	ldrh.w	r2, [r8, #26]
    74a6:	strb	r3, [r4, #10]
    74a8:	strh	r2, [r4, #8]
  dir->caseFlags = (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;
    74aa:	ldrb.w	r3, [r8, #17]
    74ae:	and.w	r3, r3, #24
    74b2:	strb	r3, [r4, #12]
  if (FsDateTime::callback) {
    74b4:	ldr	r3, [pc, #140]	; (7544 <FatFile::open(FatFile*, FatLfn_t*, int)+0x294>)
    74b6:	ldr	r3, [r3, #0]
    74b8:	cmp	r3, #0
    74ba:	beq.n	7534 <FatFile::open(FatFile*, FatLfn_t*, int)+0x284>
    FsDateTime::callback(&date, &time, &ms10);
    74bc:	add.w	r2, sp, #35	; 0x23
    74c0:	add.w	r1, sp, #38	; 0x26
    74c4:	add	r0, sp, #36	; 0x24
    74c6:	blx	r3
  *reinterpret_cast<uint16_t*>(dst) = src;
    74c8:	ldrh.w	r3, [sp, #36]	; 0x24
    74cc:	strh	r3, [r4, #16]
    74ce:	ldrh.w	r3, [sp, #38]	; 0x26
    74d2:	strh	r3, [r4, #14]
    dir->createTimeMs = ms10;
    74d4:	ldrb.w	r3, [sp, #35]	; 0x23
    74d8:	strb	r3, [r4, #13]
    74da:	ldr	r2, [sp, #28]
    74dc:	ldrb.w	r3, [r2, #36]	; 0x24
    74e0:	orr.w	r3, r3, #1
    74e4:	strb.w	r3, [r2, #36]	; 0x24
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
    74e8:	ldr	r3, [sp, #12]
    74ea:	mov	r2, r5
    74ec:	mov	r1, r6
    74ee:	ldr	r0, [sp, #8]
    74f0:	str	r7, [sp, #0]
    74f2:	bl	6614 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    74f6:	b.n	7374 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc4>
        if (1 == order && lfnChecksum(dir->name) == checksum) {
    74f8:	cmp.w	fp, #1
    74fc:	bne.w	7372 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    for (uint8_t i = 0; i < 11; i++) {
    7500:	adds	r0, #10
    7502:	b.n	7508 <FatFile::open(FatFile*, FatLfn_t*, int)+0x258>
      sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    7504:	ldrb.w	r2, [r3, #1]!
    7508:	mov.w	r1, ip, lsl #7
    for (uint8_t i = 0; i < 11; i++) {
    750c:	cmp	r0, r3
      sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    750e:	orr.w	r1, r1, ip, lsr #1
    7512:	uxtab	r2, r2, r1
    7516:	uxtb.w	ip, r2
    for (uint8_t i = 0; i < 11; i++) {
    751a:	bne.n	7504 <FatFile::open(FatFile*, FatLfn_t*, int)+0x254>
    751c:	ldr	r3, [sp, #24]
    751e:	cmp	r3, ip
    7520:	bne.w	7372 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    7524:	mov	r7, r9
  if (oflag & O_EXCL) {
    7526:	ldr	r3, [sp, #12]
    7528:	lsls	r1, r3, #20
    752a:	bmi.w	7372 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    752e:	b.n	74e8 <FatFile::open(FatFile*, FatLfn_t*, int)+0x238>
    7530:	mov	r7, r3
    7532:	b.n	7526 <FatFile::open(FatFile*, FatLfn_t*, int)+0x276>
    7534:	movw	r3, #22049	; 0x5621
    7538:	strh	r3, [r4, #16]
    753a:	strh	r3, [r4, #24]
    753c:	strh	r3, [r4, #18]
    if (FS_DEFAULT_TIME) {
    753e:	b.n	74da <FatFile::open(FatFile*, FatLfn_t*, int)+0x22a>
    7540:	.word	0x4ec4ec4f
    7544:	.word	0x20006404

00007548 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>:
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path, FatLfn_t* fname,
                            const char** ptr) {
  size_t len = 0;
  // Skip leading spaces.
  while (*path == ' ') {
    7548:	ldrb	r0, [r1, #0]
    754a:	cmp	r0, #32
                            const char** ptr) {
    754c:	push	{r4, r5}
  while (*path == ' ') {
    754e:	bne.n	7558 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x10>
    7550:	ldrb.w	r4, [r1, #1]!
    7554:	cmp	r4, #32
    7556:	beq.n	7550 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x8>
    path++;
  }
  fname->begin = path;
  fname->len = 0;
    7558:	movs	r5, #0
  fname->begin = path;
    755a:	str	r1, [r2, #0]
  fname->len = 0;
    755c:	str	r5, [r2, #12]
  while (*path && !isDirSeparator(*path)) {
    755e:	ldrb	r4, [r1, #0]
    7560:	cmp	r4, #47	; 0x2f
    7562:	beq.n	7584 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x3c>
    7564:	cbz	r4, 7584 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x3c>
    7566:	ldr	r0, [pc, #140]	; (75f4 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xac>)
      DBG_FAIL_MACRO;
      goto fail;
    }
#else   // USE_UTF8_LONG_NAMES
    uint8_t cp = *path++;
    if (cp >= 0X80 || lfnReservedChar(cp)) {
    7568:	tst.w	r4, #128	; 0x80
    uint8_t cp = *path++;
    756c:	add.w	r1, r1, #1
    if (cp >= 0X80 || lfnReservedChar(cp)) {
    7570:	bne.n	7584 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x3c>
    7572:	cmp	r4, #60	; 0x3c
    7574:	bhi.n	75d6 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x8e>
    7576:	cmp	r4, #33	; 0x21
    7578:	bhi.n	758a <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x42>
    757a:	add.w	ip, r4, #4294967295
    757e:	cmp.w	ip, #30
    7582:	bhi.n	759c <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x54>
  *ptr = path;
  return makeSFN(fname);

fail:
  return false;
}
    7584:	movs	r0, #0
    7586:	pop	{r4, r5}
    7588:	bx	lr
    758a:	sub.w	ip, r4, #34	; 0x22
    758e:	uxtb.w	ip, ip
    7592:	lsr.w	ip, r0, ip
    7596:	tst.w	ip, #1
    759a:	bne.n	7584 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x3c>
    if (cp != '.' && cp != ' ') {
    759c:	cmp	r4, #46	; 0x2e
    len++;
    759e:	add.w	r5, r5, #1
    if (cp != '.' && cp != ' ') {
    75a2:	beq.n	75a8 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x60>
    75a4:	cmp	r4, #32
    75a6:	bne.n	75e2 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x9a>
  while (*path && !isDirSeparator(*path)) {
    75a8:	ldrb	r4, [r1, #0]
    75aa:	cbz	r4, 75b0 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x68>
    75ac:	cmp	r4, #47	; 0x2f
    75ae:	bne.n	7568 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x20>
  if (!fname->len || fname->len > FAT_MAX_LFN_LENGTH) {
    75b0:	ldr	r0, [r2, #12]
    75b2:	subs	r0, #1
    75b4:	cmp	r0, #254	; 0xfe
    75b6:	bhi.n	7584 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x3c>
  for (; *path == ' ' || isDirSeparator(*path); path++) {
    75b8:	cmp	r4, #32
    75ba:	beq.n	75c0 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x78>
    75bc:	cmp	r4, #47	; 0x2f
    75be:	bne.n	75cc <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x84>
    75c0:	ldrb.w	r0, [r1, #1]!
    75c4:	cmp	r0, #32
    75c6:	beq.n	75c0 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x78>
    75c8:	cmp	r0, #47	; 0x2f
    75ca:	beq.n	75c0 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x78>
  return makeSFN(fname);
    75cc:	mov	r0, r2
  *ptr = path;
    75ce:	str	r1, [r3, #0]
}
    75d0:	pop	{r4, r5}
  return makeSFN(fname);
    75d2:	b.w	7094 <FatFile::makeSFN(FatLfn_t*)>
    75d6:	cmp	r4, #92	; 0x5c
    75d8:	beq.n	7584 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x3c>
    75da:	bls.n	75e8 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xa0>
    75dc:	cmp	r4, #124	; 0x7c
    75de:	beq.n	7584 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x3c>
    len++;
    75e0:	adds	r5, #1
      fname->end = path;
    75e2:	strd	r1, r5, [r2, #8]
    75e6:	b.n	75a8 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x60>
    75e8:	subs	r4, #62	; 0x3e
    75ea:	cmp	r4, #1
    75ec:	bhi.n	75e0 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x98>
}
    75ee:	movs	r0, #0
    75f0:	pop	{r4, r5}
    75f2:	bx	lr
    75f4:	.word	0x05002101

000075f8 <FatFile::remove()>:
//------------------------------------------------------------------------------
bool FatFile::remove() {
    75f8:	push	{r4, r5, r6, r7, lr}
  FatFile() {}
    75fa:	movs	r3, #0
    75fc:	sub	sp, #44	; 0x2c
    75fe:	str	r3, [sp, #4]
  FatFile dirFile;
  DirFat_t* dir;
  DirLfn_t* ldir;

  // Cant' remove not open for write.
  if (!isWritable()) {
    7600:	ldrb	r3, [r0, #2]
    7602:	lsls	r2, r3, #30
    7604:	bpl.n	7650 <FatFile::remove()+0x58>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
    7606:	ldr	r1, [r0, #32]
    7608:	mov	r5, r0
    760a:	cbz	r1, 7614 <FatFile::remove()+0x1c>
    760c:	ldr	r0, [r0, #8]
    760e:	bl	6ca8 <FatPartition::freeChain(unsigned long)>
    7612:	cbz	r0, 7650 <FatFile::remove()+0x58>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Cache directory entry.
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    7614:	movs	r1, #1
    7616:	mov	r0, r5
    7618:	bl	5c18 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    761c:	cbz	r0, 7650 <FatFile::remove()+0x58>
    for (uint8_t i = 0; i < 11; i++) {
    761e:	subs	r2, r0, #1
    7620:	add.w	ip, r0, #10
    uint8_t sum = 0;
    7624:	movs	r4, #0
      sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    7626:	lsls	r3, r4, #7
    7628:	ldrb.w	r1, [r2, #1]!
    762c:	orr.w	r3, r3, r4, lsr #1
    for (uint8_t i = 0; i < 11; i++) {
    7630:	cmp	ip, r2
      sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    7632:	uxtab	r3, r1, r3
    7636:	uxtb	r4, r3
    for (uint8_t i = 0; i < 11; i++) {
    7638:	bne.n	7626 <FatFile::remove()+0x2e>
    goto fail;
  }
  checksum = lfnChecksum(dir->name);

  // Mark entry deleted.
  dir->name[0] = FAT_NAME_DELETED;
    763a:	movs	r6, #229	; 0xe5

  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
    763c:	movs	r3, #0
  dir->name[0] = FAT_NAME_DELETED;
    763e:	strb	r6, [r0, #0]
  m_flags = 0;

  // Write entry to device.
  if (!m_vol->cacheSync()) {
    7640:	ldr	r7, [r5, #8]
  m_attributes = FILE_ATTR_CLOSED;
    7642:	strb	r3, [r5, #0]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    7644:	add.w	r0, r7, #36	; 0x24
  m_flags = 0;
    7648:	strb	r3, [r5, #2]
    764a:	bl	3184 <FsCache::sync()>
    764e:	cbnz	r0, 7656 <FatFile::remove()+0x5e>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
    7650:	movs	r0, #0
}
    7652:	add	sp, #44	; 0x2c
    7654:	pop	{r4, r5, r6, r7, pc}
    7656:	add.w	r0, r7, #564	; 0x234
    765a:	bl	3184 <FsCache::sync()>
    765e:	cmp	r0, #0
    7660:	beq.n	7650 <FatFile::remove()+0x58>
    7662:	ldr	r0, [r7, #0]
  bool syncDevice() { return m_blockDev->syncDevice(); }
    7664:	ldr	r3, [r0, #0]
    7666:	ldr	r3, [r3, #28]
    7668:	blx	r3
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    766a:	cmp	r0, #0
    766c:	beq.n	7650 <FatFile::remove()+0x58>
  if (!isLFN()) {
    766e:	ldrb	r3, [r5, #3]
    7670:	cmp	r3, #0
    7672:	beq.n	7652 <FatFile::remove()+0x5a>
  if (!dirFile.openCluster(this)) {
    7674:	mov	r1, r5
    7676:	add	r0, sp, #4
    7678:	bl	6044 <FatFile::openCluster(FatFile*)>
    767c:	cmp	r0, #0
    767e:	beq.n	7650 <FatFile::remove()+0x58>
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    7680:	ldrb	r3, [r5, #3]
    7682:	cmp	r3, #0
    7684:	beq.n	7650 <FatFile::remove()+0x58>
    7686:	movs	r7, #1
    7688:	b.n	76ce <FatFile::remove()+0xd6>
    return seekSet(32UL * index) ? readDirCache() : nullptr;
    768a:	add	r0, sp, #4
    768c:	bl	62a4 <FatFile::readDirCache(bool)>
    7690:	adds	r3, r7, #1
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    7692:	uxtb	r1, r7
    if (!ldir) {
    7694:	cmp	r0, #0
    7696:	beq.n	7650 <FatFile::remove()+0x58>
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    7698:	ldrb	r2, [r0, #11]
    769a:	cmp	r2, #15
    769c:	bne.n	7650 <FatFile::remove()+0x58>
        order != (ldir->order & 0X1F) || checksum != ldir->checksum) {
    769e:	ldrb	r2, [r0, #0]
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    76a0:	uxtb.w	ip, r3
    76a4:	uxth	r7, r3
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    76a6:	and.w	r3, r2, #31
    76aa:	cmp	r3, r1
    76ac:	bne.n	7650 <FatFile::remove()+0x58>
        order != (ldir->order & 0X1F) || checksum != ldir->checksum) {
    76ae:	ldrb	r3, [r0, #13]
    76b0:	cmp	r3, r4
    76b2:	bne.n	7650 <FatFile::remove()+0x58>
    ldir->order = FAT_NAME_DELETED;
    76b4:	strb	r6, [r0, #0]
    m_vol->cacheDirty();
    76b6:	ldr	r1, [r5, #8]
    76b8:	ldrb.w	r3, [r1, #36]	; 0x24
    76bc:	orr.w	r3, r3, #1
    76c0:	strb.w	r3, [r1, #36]	; 0x24
    if (last) {
    76c4:	lsls	r3, r2, #25
    76c6:	bmi.n	76e4 <FatFile::remove()+0xec>
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    76c8:	ldrb	r3, [r5, #3]
    76ca:	cmp	r3, ip
    76cc:	bcc.n	7650 <FatFile::remove()+0x58>
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.cacheDir(m_dirIndex - order));
    76ce:	ldrh	r1, [r5, #4]
    76d0:	add	r0, sp, #4
    76d2:	subs	r1, r1, r7
    76d4:	uxth	r1, r1
    76d6:	lsls	r1, r1, #5
    76d8:	bl	6564 <FatFile::seekSet(unsigned long)>
    76dc:	movs	r1, #0
    76de:	cmp	r0, #0
    76e0:	bne.n	768a <FatFile::remove()+0x92>
    76e2:	b.n	7650 <FatFile::remove()+0x58>
      if (!m_vol->cacheSync()) {
    76e4:	ldr	r4, [r5, #8]
    76e6:	add.w	r0, r4, #36	; 0x24
    76ea:	bl	3184 <FsCache::sync()>
    76ee:	cmp	r0, #0
    76f0:	beq.n	7650 <FatFile::remove()+0x58>
    76f2:	add.w	r0, r4, #564	; 0x234
    76f6:	bl	3184 <FsCache::sync()>
    76fa:	cmp	r0, #0
    76fc:	beq.n	7650 <FatFile::remove()+0x58>
    76fe:	ldr	r0, [r4, #0]
  bool syncDevice() { return m_blockDev->syncDevice(); }
    7700:	ldr	r3, [r0, #0]
    7702:	ldr	r3, [r3, #28]
    7704:	blx	r3
    7706:	b.n	7652 <FatFile::remove()+0x5a>

00007708 <FsBaseFile::FsBaseFile(FsBaseFile const&)>:
FsBaseFile::FsBaseFile(const FsBaseFile& from) {
    7708:	push	{r3, r4, r5, r6, r7, lr}
    770a:	movs	r6, #0
  if (from.m_fFile) {
    770c:	ldr	r7, [r1, #56]	; 0x38
FsBaseFile::FsBaseFile(const FsBaseFile& from) {
    770e:	mov	r5, r1
    7710:	mov	r4, r0
    7712:	strd	r6, r6, [r0, #56]	; 0x38
  if (from.m_fFile) {
    7716:	cbz	r7, 7740 <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x38>
    m_fFile = new (m_fileMem) FatFile;
    7718:	mov	r1, r0
    771a:	movs	r0, #36	; 0x24
    771c:	bl	7a0c <operator new(unsigned int, unsigned long*)>
  FatFile() {}
    7720:	strh	r6, [r0, #0]
    7722:	strb	r6, [r0, #2]
    *m_fFile = *from.m_fFile;
    7724:	mov	ip, r0
    7726:	ldr	r5, [r5, #56]	; 0x38
    m_fFile = new (m_fileMem) FatFile;
    7728:	str	r0, [r4, #56]	; 0x38
    *m_fFile = *from.m_fFile;
    772a:	ldmia	r5!, {r0, r1, r2, r3}
    772c:	stmia.w	ip!, {r0, r1, r2, r3}
    7730:	ldmia	r5!, {r0, r1, r2, r3}
    7732:	stmia.w	ip!, {r0, r1, r2, r3}
    7736:	ldr	r3, [r5, #0]
    7738:	str.w	r3, [ip]
}
    773c:	mov	r0, r4
    773e:	pop	{r3, r4, r5, r6, r7, pc}
  } else if (from.m_xFile) {
    7740:	ldr	r3, [r1, #60]	; 0x3c
    7742:	cmp	r3, #0
    7744:	beq.n	773c <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x34>
    m_xFile = new (m_fileMem) ExFatFile;
    7746:	mov	r1, r0
    7748:	movs	r0, #56	; 0x38
    774a:	bl	7a0c <operator new(unsigned int, unsigned long*)>
  ExFatFile() {}
    774e:	strb.w	r7, [r0, #49]	; 0x31
    7752:	strh	r7, [r0, #50]	; 0x32
    *m_xFile = *from.m_xFile;
    7754:	mov	r2, r0
    7756:	ldr	r3, [r5, #60]	; 0x3c
    m_xFile = new (m_fileMem) ExFatFile;
    7758:	str	r0, [r4, #60]	; 0x3c
    *m_xFile = *from.m_xFile;
    775a:	add.w	r7, r3, #48	; 0x30
    775e:	ldr	r6, [r3, #0]
    7760:	adds	r3, #16
    7762:	ldr.w	r5, [r3, #-12]
    7766:	adds	r2, #16
    7768:	ldr.w	r0, [r3, #-8]
    776c:	ldr.w	r1, [r3, #-4]
    7770:	cmp	r3, r7
    7772:	str.w	r6, [r2, #-16]
    7776:	str.w	r5, [r2, #-12]
    777a:	str.w	r0, [r2, #-8]
    777e:	str.w	r1, [r2, #-4]
    7782:	bne.n	775e <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x56>
    7784:	ldr	r3, [r3, #0]
}
    7786:	mov	r0, r4
    *m_xFile = *from.m_xFile;
    7788:	str	r3, [r2, #0]
}
    778a:	pop	{r3, r4, r5, r6, r7, pc}

0000778c <FsBaseFile::close()>:
//------------------------------------------------------------------------------
bool FsBaseFile::close() {
    778c:	push	{r4, lr}
    778e:	mov	r4, r0
  bool rtn = m_fFile ? m_fFile->close() : m_xFile ? m_xFile->close() : true;
    7790:	ldr	r0, [r0, #56]	; 0x38
    7792:	cbz	r0, 77a0 <FsBaseFile::close()+0x14>
    7794:	bl	5c38 <FatFile::close()>
  m_fFile = nullptr;
    7798:	movs	r3, #0
  m_xFile = nullptr;
    779a:	strd	r3, r3, [r4, #56]	; 0x38
  return rtn;
}
    779e:	pop	{r4, pc}
  bool rtn = m_fFile ? m_fFile->close() : m_xFile ? m_xFile->close() : true;
    77a0:	ldr	r0, [r4, #60]	; 0x3c
    77a2:	cbz	r0, 77b0 <FsBaseFile::close()+0x24>
    77a4:	bl	3b50 <ExFatFile::close()>
  m_fFile = nullptr;
    77a8:	movs	r3, #0
  m_xFile = nullptr;
    77aa:	strd	r3, r3, [r4, #56]	; 0x38
}
    77ae:	pop	{r4, pc}
  m_fFile = nullptr;
    77b0:	movs	r3, #0
  bool rtn = m_fFile ? m_fFile->close() : m_xFile ? m_xFile->close() : true;
    77b2:	movs	r0, #1
  m_xFile = nullptr;
    77b4:	strd	r3, r3, [r4, #56]	; 0x38
}
    77b8:	pop	{r4, pc}
    77ba:	nop

000077bc <FsBaseFile::open(FsVolume*, char const*, int)>:
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
  if (!vol) {
    77bc:	cmp	r1, #0
    77be:	beq.n	7858 <FsBaseFile::open(FsVolume*, char const*, int)+0x9c>
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
    77c0:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    77c4:	mov	r4, r0
  bool rtn = m_fFile ? m_fFile->close() : m_xFile ? m_xFile->close() : true;
    77c6:	ldr	r0, [r0, #56]	; 0x38
    77c8:	mov	r5, r1
    77ca:	mov	r8, r2
    77cc:	mov	r7, r3
    77ce:	cbz	r0, 7806 <FsBaseFile::open(FsVolume*, char const*, int)+0x4a>
    77d0:	bl	5c38 <FatFile::close()>
  m_fFile = nullptr;
    77d4:	movs	r6, #0
    return false;
  }
  close();
  if (vol->m_fVol) {
    77d6:	ldr.w	r9, [r5, #1152]	; 0x480
  m_xFile = nullptr;
    77da:	strd	r6, r6, [r4, #56]	; 0x38
  if (vol->m_fVol) {
    77de:	cmp.w	r9, #0
    77e2:	beq.n	7820 <FsBaseFile::open(FsVolume*, char const*, int)+0x64>
    m_fFile = new (m_fileMem) FatFile;
    77e4:	mov	r1, r4
    77e6:	movs	r0, #36	; 0x24
    77e8:	bl	7a0c <operator new(unsigned int, unsigned long*)>
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    77ec:	mov	r3, r7
    77ee:	strh	r6, [r0, #0]
    77f0:	mov	r2, r8
    77f2:	strb	r6, [r0, #2]
    m_fFile = new (m_fileMem) FatFile;
    77f4:	str	r0, [r4, #56]	; 0x38
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    77f6:	ldr.w	r1, [r5, #1152]	; 0x480
    77fa:	bl	6034 <FatFile::open(FatVolume*, char const*, int)>
    77fe:	cbnz	r0, 7852 <FsBaseFile::open(FsVolume*, char const*, int)+0x96>
      return true;
    }
    m_fFile = nullptr;
    7800:	str	r0, [r4, #56]	; 0x38
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
    7802:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  bool rtn = m_fFile ? m_fFile->close() : m_xFile ? m_xFile->close() : true;
    7806:	ldr	r0, [r4, #60]	; 0x3c
    7808:	cmp	r0, #0
    780a:	beq.n	77d4 <FsBaseFile::open(FsVolume*, char const*, int)+0x18>
    780c:	bl	3b50 <ExFatFile::close()>
  m_fFile = nullptr;
    7810:	movs	r6, #0
  if (vol->m_fVol) {
    7812:	ldr.w	r9, [r5, #1152]	; 0x480
  m_xFile = nullptr;
    7816:	strd	r6, r6, [r4, #56]	; 0x38
  if (vol->m_fVol) {
    781a:	cmp.w	r9, #0
    781e:	bne.n	77e4 <FsBaseFile::open(FsVolume*, char const*, int)+0x28>
  } else if (vol->m_xVol) {
    7820:	ldr.w	r3, [r5, #1156]	; 0x484
    7824:	cbz	r3, 784c <FsBaseFile::open(FsVolume*, char const*, int)+0x90>
    m_xFile = new (m_fileMem) ExFatFile;
    7826:	mov	r1, r4
    7828:	movs	r0, #56	; 0x38
    782a:	bl	7a0c <operator new(unsigned int, unsigned long*)>
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    782e:	mov	r3, r7
    7830:	strb.w	r9, [r0, #49]	; 0x31
    7834:	mov	r2, r8
    7836:	strh.w	r9, [r0, #50]	; 0x32
    m_xFile = new (m_fileMem) ExFatFile;
    783a:	str	r0, [r4, #60]	; 0x3c
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    783c:	ldr.w	r1, [r5, #1156]	; 0x484
    7840:	bl	43e8 <ExFatFile::open(ExFatVolume*, char const*, int)>
    7844:	cbnz	r0, 7852 <FsBaseFile::open(FsVolume*, char const*, int)+0x96>
    m_xFile = nullptr;
    7846:	str	r0, [r4, #60]	; 0x3c
}
    7848:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return false;
    784c:	movs	r0, #0
}
    784e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return true;
    7852:	movs	r0, #1
}
    7854:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return false;
    7858:	movs	r0, #0
}
    785a:	bx	lr

0000785c <FsBaseFile::openNext(FsBaseFile*, int)>:
    m_xFile = nullptr;
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::openNext(FsBaseFile* dir, oflag_t oflag) {
    785c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7860:	mov	r4, r0
  bool rtn = m_fFile ? m_fFile->close() : m_xFile ? m_xFile->close() : true;
    7862:	ldr	r0, [r0, #56]	; 0x38
bool FsBaseFile::openNext(FsBaseFile* dir, oflag_t oflag) {
    7864:	mov	r5, r1
    7866:	mov	r8, r2
  bool rtn = m_fFile ? m_fFile->close() : m_xFile ? m_xFile->close() : true;
    7868:	cbz	r0, 78bc <FsBaseFile::openNext(FsBaseFile*, int)+0x60>
    786a:	bl	5c38 <FatFile::close()>
  m_fFile = nullptr;
    786e:	movs	r6, #0
    7870:	str	r6, [r4, #56]	; 0x38
  close();
  if (dir->m_fFile) {
    7872:	ldr	r7, [r5, #56]	; 0x38
  m_xFile = nullptr;
    7874:	str	r6, [r4, #60]	; 0x3c
  if (dir->m_fFile) {
    7876:	cbz	r7, 7896 <FsBaseFile::openNext(FsBaseFile*, int)+0x3a>
    m_fFile = new (m_fileMem) FatFile;
    7878:	mov	r1, r4
    787a:	movs	r0, #36	; 0x24
    787c:	bl	7a0c <operator new(unsigned int, unsigned long*)>
    if (m_fFile->openNext(dir->m_fFile, oflag)) {
    7880:	mov	r2, r8
    7882:	strh	r6, [r0, #0]
    7884:	strb	r6, [r0, #2]
    m_fFile = new (m_fileMem) FatFile;
    7886:	str	r0, [r4, #56]	; 0x38
    if (m_fFile->openNext(dir->m_fFile, oflag)) {
    7888:	ldr	r1, [r5, #56]	; 0x38
    788a:	bl	6700 <FatFile::openNext(FatFile*, int)>
    788e:	cbnz	r0, 78b6 <FsBaseFile::openNext(FsBaseFile*, int)+0x5a>
      return true;
    }
    m_fFile = nullptr;
    7890:	str	r0, [r4, #56]	; 0x38
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
    7892:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (dir->m_xFile) {
    7896:	ldr	r0, [r5, #60]	; 0x3c
    7898:	cmp	r0, #0
    789a:	beq.n	7892 <FsBaseFile::openNext(FsBaseFile*, int)+0x36>
    m_xFile = new (m_fileMem) ExFatFile;
    789c:	mov	r1, r4
    789e:	movs	r0, #56	; 0x38
    78a0:	bl	7a0c <operator new(unsigned int, unsigned long*)>
    if (m_xFile->openNext(dir->m_xFile, oflag)) {
    78a4:	mov	r2, r8
    78a6:	strb.w	r7, [r0, #49]	; 0x31
    78aa:	strh	r7, [r0, #50]	; 0x32
    m_xFile = new (m_fileMem) ExFatFile;
    78ac:	str	r0, [r4, #60]	; 0x3c
    if (m_xFile->openNext(dir->m_xFile, oflag)) {
    78ae:	ldr	r1, [r5, #60]	; 0x3c
    78b0:	bl	43f8 <ExFatFile::openNext(ExFatFile*, int)>
    78b4:	cbz	r0, 78c8 <FsBaseFile::openNext(FsBaseFile*, int)+0x6c>
      return true;
    78b6:	movs	r0, #1
}
    78b8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  bool rtn = m_fFile ? m_fFile->close() : m_xFile ? m_xFile->close() : true;
    78bc:	ldr	r0, [r4, #60]	; 0x3c
    78be:	cmp	r0, #0
    78c0:	beq.n	786e <FsBaseFile::openNext(FsBaseFile*, int)+0x12>
    78c2:	bl	3b50 <ExFatFile::close()>
    78c6:	b.n	786e <FsBaseFile::openNext(FsBaseFile*, int)+0x12>
    m_xFile = nullptr;
    78c8:	str	r0, [r4, #60]	; 0x3c
}
    78ca:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    78ce:	nop

000078d0 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)>:
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part,
                     uint32_t volStart) {
    78d0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  m_fVol = nullptr;
    78d4:	movs	r5, #0
                     uint32_t volStart) {
    78d6:	mov	r6, r0
    78d8:	mov	r7, r1
  m_xVol = new (m_volMem) ExFatVolume;
    78da:	mov	r1, r0
  m_fVol = nullptr;
    78dc:	str.w	r5, [r0, #1152]	; 0x480
  m_xVol = new (m_volMem) ExFatVolume;
    78e0:	mov.w	r0, #1152	; 0x480
                     uint32_t volStart) {
    78e4:	mov	r8, r3
    78e6:	ldr.w	sl, [sp, #32]
    78ea:	mov	r9, r2
  m_xVol = new (m_volMem) ExFatVolume;
    78ec:	bl	7a0c <operator new(unsigned int, unsigned long*)>
    m_sector = 0XFFFFFFFF;
    78f0:	mov.w	r3, #4294967295
    m_blockDev = blockDev;
    78f4:	str	r5, [r0, #4]
    m_status = 0;
    78f6:	strb	r5, [r0, #0]
    if (!init(dev, part, volStart)) {
    78f8:	mov	r2, r8
    m_sector = 0XFFFFFFFF;
    78fa:	str	r3, [r0, #8]
    78fc:	mov	r1, r7
    78fe:	str.w	r3, [r0, #536]	; 0x218
    7902:	mov	r3, sl
    m_blockDev = blockDev;
    7904:	str.w	r5, [r0, #532]	; 0x214
    7908:	mov	r4, r0
    m_status = 0;
    790a:	strb.w	r5, [r0, #528]	; 0x210
  ExFatPartition() = default;
    790e:	strb.w	r5, [r0, #1092]	; 0x444
    7912:	strb.w	r5, [r0, #1145]	; 0x479
    7916:	strh.w	r5, [r0, #1146]	; 0x47a
    791a:	str.w	r0, [r6, #1156]	; 0x484
    791e:	bl	4844 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)>
    7922:	cmp	r0, #0
    7924:	bne.n	79a4 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0xd4>
  if (m_xVol && m_xVol->begin(blockDev, false, part, volStart)) {
    goto done;
  }
  m_xVol = nullptr;
    7926:	movs	r5, #0
  m_fVol = new (m_volMem) FatVolume;
    7928:	mov	r1, r6
    792a:	mov.w	r0, #1128	; 0x468
  m_xVol = nullptr;
    792e:	str.w	r5, [r6, #1156]	; 0x484
  m_fVol = new (m_volMem) FatVolume;
    7932:	bl	7a0c <operator new(unsigned int, unsigned long*)>
  FatPartition() = default;
    7936:	strb	r5, [r0, #7]
    m_blockDev = blockDev;
    7938:	str	r5, [r0, #40]	; 0x28
    if (!init(dev, part, volStart)) {
    793a:	mov	r3, sl
    m_status = 0;
    793c:	strb.w	r5, [r0, #36]	; 0x24
    7940:	mov	r2, r8
    m_blockDev = blockDev;
    7942:	str.w	r5, [r0, #568]	; 0x238
    7946:	mov	r1, r7
    m_status = 0;
    7948:	strb.w	r5, [r0, #564]	; 0x234
    794c:	mov	r4, r0
    794e:	strh.w	r5, [r0, #1092]	; 0x444
    7952:	strb.w	r5, [r0, #1094]	; 0x446
    m_sector = 0XFFFFFFFF;
    7956:	mov.w	r5, #4294967295
    795a:	str	r5, [r0, #44]	; 0x2c
    795c:	str.w	r5, [r0, #572]	; 0x23c
    7960:	str.w	r0, [r6, #1152]	; 0x480
    7964:	bl	6d94 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)>
    7968:	cbnz	r0, 7976 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0xa6>
  if (m_fVol && m_fVol->begin(blockDev, false, part, volStart)) {
    goto done;
  }
  m_fVol = nullptr;
    796a:	movs	r3, #0
  return false;
    796c:	mov	r0, r3
  m_fVol = nullptr;
    796e:	str.w	r3, [r6, #1152]	; 0x480
done:
  if (setCwv || !m_cwv) {
    m_cwv = this;
  }
  return true;
}
    7972:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    m_vwd.close();
    7976:	addw	r5, r4, #1092	; 0x444
    797a:	mov	r0, r5
    797c:	bl	5c38 <FatFile::close()>
    return m_vwd.openRoot(this);
    7980:	mov	r1, r4
    7982:	mov	r0, r5
    7984:	bl	609c <FatFile::openRoot(FatVolume*)>
    if (!chdir()) {
    7988:	cmp	r0, #0
    798a:	beq.n	796a <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0x9a>
    if (setCwv || !m_cwv) {
    798c:	ldr	r3, [pc, #72]	; (79d8 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0x108>)
    798e:	ldr	r2, [r3, #0]
    7990:	cbnz	r2, 79c2 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0xf2>
      m_cwv = this;
    7992:	str	r4, [r3, #0]
  if (setCwv || !m_cwv) {
    7994:	ldr	r3, [pc, #68]	; (79dc <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0x10c>)
    7996:	cmp.w	r9, #0
    799a:	beq.n	79ca <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0xfa>
  return true;
    799c:	movs	r0, #1
    m_cwv = this;
    799e:	str	r6, [r3, #0]
}
    79a0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    m_vwd.close();
    79a4:	add.w	r5, r4, #1096	; 0x448
    79a8:	mov	r0, r5
    79aa:	bl	3b50 <ExFatFile::close()>
    return m_vwd.openRoot(this);
    79ae:	mov	r1, r4
    79b0:	mov	r0, r5
    79b2:	bl	3bac <ExFatFile::openRoot(ExFatVolume*)>
    if (!chdir()) {
    79b6:	cmp	r0, #0
    79b8:	beq.n	7926 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0x56>
    if (setCwv || !m_cwv) {
    79ba:	ldr	r3, [pc, #36]	; (79e0 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0x110>)
    79bc:	ldr	r2, [r3, #0]
    79be:	cmp	r2, #0
    79c0:	beq.n	7992 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0xc2>
  if (setCwv || !m_cwv) {
    79c2:	ldr	r3, [pc, #24]	; (79dc <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0x10c>)
    79c4:	cmp.w	r9, #0
    79c8:	bne.n	799c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0xcc>
    79ca:	ldr	r2, [r3, #0]
    79cc:	cmp	r2, #0
    79ce:	beq.n	799c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0xcc>
  return true;
    79d0:	movs	r0, #1
}
    79d2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    79d6:	nop
    79d8:	.word	0x200065c8
    79dc:	.word	0x200065c4
    79e0:	.word	0x20006488

000079e4 <FsVolume::open(char const*, int)>:
bool FsVolume::ls(print_t* pr, const char* path, uint8_t flags) {
  FsBaseFile dir;
  return dir.open(this, path, O_RDONLY) && dir.ls(pr, flags);
}
//------------------------------------------------------------------------------
FsFile FsVolume::open(const char* path, oflag_t oflag) {
    79e4:	push	{r4, r5, r6, lr}
	constexpr Print() : write_error(0) {}
    79e6:	movs	r5, #0
    79e8:	mov.w	r6, #1000	; 0x3e8
    79ec:	mov	r4, r0
    79ee:	strb	r5, [r0, #4]
    79f0:	strb	r5, [r0, #12]
    79f2:	str	r6, [r0, #8]
  FsBaseFile() = default;
    79f4:	strd	r5, r5, [r0, #72]	; 0x48
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    79f8:	ldr	r5, [pc, #12]	; (7a08 <FsVolume::open(char const*, int)+0x24>)
    79fa:	str.w	r5, [r0], #16
  FsFile tmpFile;
  tmpFile.open(this, path, oflag);
    79fe:	bl	77bc <FsBaseFile::open(FsVolume*, char const*, int)>
  return tmpFile;
}
    7a02:	mov	r0, r4
    7a04:	pop	{r4, r5, r6, pc}
    7a06:	nop
    7a08:	.word	0x20000ab8

00007a0c <operator new(unsigned int, unsigned long*)>:
 */
#include "FsNew.h"
void* operator new(size_t size, newalign_t* ptr) {
  (void)size;
  return ptr;
}
    7a0c:	mov	r0, r1
    7a0e:	bx	lr

00007a10 <SdCardInterface::status()>:
   * \param[out] sds location for 64 status bytes.
   * \return true for success or false for failure.
   */
  virtual bool readSDS(sds_t* sds) = 0;
  /** \return card status. */
  virtual uint32_t status() { return 0XFFFFFFFF; }
    7a10:	mov.w	r0, #4294967295
    7a14:	bx	lr
    7a16:	nop

00007a18 <SharedSpiCard::errorCode() const>:
  uint8_t errorCode() const { return m_errorCode; }
    7a18:	ldrb	r0, [r0, #18]
    7a1a:	bx	lr

00007a1c <SharedSpiCard::errorData() const>:
  uint32_t errorData() const { return m_status; }
    7a1c:	ldrb	r0, [r0, #21]
    7a1e:	bx	lr

00007a20 <SharedSpiCard::type() const>:
  uint8_t type() const { return m_type; }
    7a20:	ldrb	r0, [r0, #22]
    7a22:	bx	lr

00007a24 <DedicatedSpiCard::hasDedicatedSpi()>:
   * \param[in] spiConfig SPI card configuration.
   * \return true for success or false for failure.
   */
  bool begin(SdSpiConfig spiConfig);
  /** \return true, can be in dedicaded state. */
  bool hasDedicatedSpi() { return true; }
    7a24:	movs	r0, #1
    7a26:	bx	lr

00007a28 <DedicatedSpiCard::isDedicatedSpi()>:
  /** \return true if in dedicated SPI state. */
  bool isDedicatedSpi() { return m_dedicatedSpi; }
    7a28:	ldrb	r0, [r0, #28]
    7a2a:	bx	lr

00007a2c <DedicatedSpiCard::~DedicatedSpiCard()>:
class DedicatedSpiCard : public SharedSpiCard {
    7a2c:	bx	lr
    7a2e:	nop

00007a30 <DedicatedSpiCard::~DedicatedSpiCard()>:
    7a30:	push	{r4, lr}
    7a32:	mov	r4, r0
    7a34:	movs	r1, #32
    7a36:	bl	d0ac <operator delete(void*, unsigned int)>
    7a3a:	mov	r0, r4
    7a3c:	pop	{r4, pc}
    7a3e:	nop

00007a40 <SharedSpiCard::end()>:
void SharedSpiCard::end() {
    7a40:	push	{r3, r4, r5, lr}
  if (m_beginCalled) {
    7a42:	ldrb	r3, [r0, #16]
    7a44:	cbz	r3, 7a5c <SharedSpiCard::end()+0x1c>
    syncDevice();
    7a46:	mov	r5, r0
    7a48:	mov	r4, r0
    7a4a:	ldr.w	r3, [r5], #4
    7a4e:	ldr	r3, [r3, #28]
    7a50:	blx	r3
  void spiEnd() { m_spiDriver.end(); }
    7a52:	mov	r0, r5
    7a54:	bl	a020 <SdSpiArduinoDriver::end()>
    m_beginCalled = false;
    7a58:	movs	r3, #0
    7a5a:	strb	r3, [r4, #16]
}
    7a5c:	pop	{r3, r4, r5, pc}
    7a5e:	nop

00007a60 <SharedSpiCard::writeStop()>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SharedSpiCard::writeStop() {
    7a60:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7a64:	ldr	r6, [pc, #128]	; (7ae8 <SharedSpiCard::writeStop()+0x88>)
    7a66:	mov	r7, r0
    return m_spiDriver.receive();
    7a68:	add.w	r8, r0, #4
    7a6c:	ldr	r5, [r6, #0]
  void set(uint16_t ms) { m_endTime = ms + millis16(); }
    7a6e:	add.w	r5, r5, #600	; 0x258
    7a72:	uxth	r5, r5
  explicit Timeout(uint16_t ms) { set(ms); }
    7a74:	b.n	7a7e <SharedSpiCard::writeStop()+0x1e>
    7a76:	ldr	r3, [r6, #0]
  bool timedOut() { return (int16_t)(m_endTime - millis16()) < 0; }
    7a78:	subs	r3, r5, r3
    if (timeout.timedOut()) {
    7a7a:	lsls	r3, r3, #16
    7a7c:	bmi.n	7aa0 <SharedSpiCard::writeStop()+0x40>
    7a7e:	mov	r0, r8
    7a80:	bl	a028 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    7a84:	cmp	r0, #255	; 0xff
    7a86:	mov	r4, r0
    7a88:	bne.n	7a76 <SharedSpiCard::writeStop()+0x16>
    m_spiDriver.send(data);
    7a8a:	movs	r1, #253	; 0xfd
    7a8c:	mov	r0, r8
    7a8e:	bl	a064 <SdSpiArduinoDriver::send(unsigned char)>
  if (m_spiActive) {
    7a92:	ldrb	r3, [r7, #19]
    7a94:	cbnz	r3, 7aca <SharedSpiCard::writeStop()+0x6a>
  if (!waitReady(SD_WRITE_TIMEOUT)) {
    goto fail;
  }
  spiSend(STOP_TRAN_TOKEN);
  spiStop();
  m_state = IDLE_STATE;
    7a96:	movs	r3, #0
    7a98:	movs	r0, #1
    7a9a:	strb	r3, [r7, #20]

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
    7a9c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_errorCode = code;
    7aa0:	movs	r3, #31
  if (m_spiActive) {
    7aa2:	ldrb	r0, [r7, #19]
    7aa4:	strb	r3, [r7, #18]
    7aa6:	cmp	r0, #0
    7aa8:	beq.n	7a9c <SharedSpiCard::writeStop()+0x3c>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    7aaa:	ldrb	r0, [r7, #17]
    7aac:	movs	r1, #1
    7aae:	bl	a0d0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    7ab2:	movs	r1, #255	; 0xff
    7ab4:	mov	r0, r8
    7ab6:	bl	a064 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    7aba:	mov	r0, r8
    7abc:	bl	9fd0 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    7ac0:	movs	r3, #0
  return false;
    7ac2:	mov	r0, r3
    m_spiActive = false;
    7ac4:	strb	r3, [r7, #19]
}
    7ac6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    7aca:	movs	r1, #1
    7acc:	ldrb	r0, [r7, #17]
    7ace:	bl	a0d0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    7ad2:	mov	r1, r4
    7ad4:	mov	r0, r8
    7ad6:	bl	a064 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    7ada:	mov	r0, r8
    7adc:	bl	9fd0 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    7ae0:	movs	r3, #0
    7ae2:	strb	r3, [r7, #19]
}
    7ae4:	b.n	7a96 <SharedSpiCard::writeStop()+0x36>
    7ae6:	nop
    7ae8:	.word	0x200080e8

00007aec <SharedSpiCard::isBusy()>:
bool SharedSpiCard::isBusy() {
    7aec:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (m_state == READ_STATE) {
    7af0:	ldrb	r3, [r0, #20]
    7af2:	cmp	r3, #1
    7af4:	beq.n	7b62 <SharedSpiCard::isBusy()+0x76>
  if (!spiActive) {
    7af6:	ldrb	r6, [r0, #19]
    7af8:	mov	r4, r0
    7afa:	cbz	r6, 7b10 <SharedSpiCard::isBusy()+0x24>
    return m_spiDriver.receive();
    7afc:	adds	r0, #4
    7afe:	bl	a028 <SdSpiArduinoDriver::receive()>
  bool rtn = 0XFF != spiReceive();
    7b02:	subs.w	r5, r0, #255	; 0xff
    7b06:	it	ne
    7b08:	movne	r5, #1
}
    7b0a:	mov	r0, r5
    7b0c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  void spiActivate() { m_spiDriver.activate(); }
    7b10:	adds	r7, r0, #4
    m_spiActive = true;
    7b12:	mov.w	r8, #1
    7b16:	mov	r0, r7
    7b18:	bl	9f94 <SdSpiArduinoDriver::activate()>
  void spiSelect() { sdCsWrite(m_csPin, false); }
    7b1c:	mov	r1, r6
    7b1e:	ldrb	r0, [r4, #17]
    7b20:	strb.w	r8, [r4, #19]
    7b24:	bl	a0d0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    7b28:	movs	r1, #255	; 0xff
    7b2a:	mov	r0, r7
    7b2c:	bl	a064 <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
    7b30:	mov	r0, r7
    7b32:	bl	a028 <SdSpiArduinoDriver::receive()>
  if (m_spiActive) {
    7b36:	ldrb	r3, [r4, #19]
  bool rtn = 0XFF != spiReceive();
    7b38:	subs.w	r5, r0, #255	; 0xff
    7b3c:	it	ne
    7b3e:	movne	r5, #1
  if (m_spiActive) {
    7b40:	cmp	r3, #0
    7b42:	beq.n	7b0a <SharedSpiCard::isBusy()+0x1e>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    7b44:	mov	r1, r8
    7b46:	ldrb	r0, [r4, #17]
    7b48:	bl	a0d0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    7b4c:	movs	r1, #255	; 0xff
    7b4e:	mov	r0, r7
    7b50:	bl	a064 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    7b54:	mov	r0, r7
    7b56:	bl	9fd0 <SdSpiArduinoDriver::deactivate()>
}
    7b5a:	mov	r0, r5
    m_spiActive = false;
    7b5c:	strb	r6, [r4, #19]
}
    7b5e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return false;
    7b62:	movs	r5, #0
}
    7b64:	mov	r0, r5
    7b66:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7b6a:	nop

00007b6c <SharedSpiCard::readData(unsigned char*, unsigned int)>:
bool SharedSpiCard::readData(uint8_t* dst, size_t count) {
    7b6c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7b70:	ldr	r7, [pc, #128]	; (7bf4 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x88>)
    7b72:	mov	r4, r0
    7b74:	mov	r8, r1
    7b76:	mov	r9, r2
    7b78:	ldr	r5, [r7, #0]
    return m_spiDriver.receive();
    7b7a:	adds	r6, r0, #4
  void set(uint16_t ms) { m_endTime = ms + millis16(); }
    7b7c:	add.w	r5, r5, #300	; 0x12c
    7b80:	uxth	r5, r5
  explicit Timeout(uint16_t ms) { set(ms); }
    7b82:	b.n	7b8c <SharedSpiCard::readData(unsigned char*, unsigned int)+0x20>
    7b84:	ldr	r3, [r7, #0]
  bool timedOut() { return (int16_t)(m_endTime - millis16()) < 0; }
    7b86:	subs	r3, r5, r3
    if (timeout.timedOut()) {
    7b88:	lsls	r3, r3, #16
    7b8a:	bmi.n	7ba8 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x3c>
    7b8c:	mov	r0, r6
    7b8e:	bl	a028 <SdSpiArduinoDriver::receive()>
  while ((m_status = spiReceive()) == 0XFF) {
    7b92:	cmp	r0, #255	; 0xff
    7b94:	strb	r0, [r4, #21]
    7b96:	beq.n	7b84 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x18>
  if (m_status != DATA_START_SECTOR) {
    7b98:	cmp	r0, #254	; 0xfe
    7b9a:	beq.n	7bd2 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x66>
    7b9c:	movs	r3, #25
  if (m_spiActive) {
    7b9e:	ldrb	r0, [r4, #19]
    m_errorCode = code;
    7ba0:	strb	r3, [r4, #18]
    7ba2:	cbnz	r0, 7bb2 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x46>
}
    7ba4:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    7ba8:	movs	r3, #30
  if (m_spiActive) {
    7baa:	ldrb	r0, [r4, #19]
    7bac:	strb	r3, [r4, #18]
    7bae:	cmp	r0, #0
    7bb0:	beq.n	7ba4 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x38>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    7bb2:	ldrb	r0, [r4, #17]
    7bb4:	movs	r1, #1
    7bb6:	bl	a0d0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    7bba:	movs	r1, #255	; 0xff
    7bbc:	mov	r0, r6
    7bbe:	bl	a064 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    7bc2:	mov	r0, r6
    7bc4:	bl	9fd0 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    7bc8:	movs	r3, #0
  return false;
    7bca:	mov	r0, r3
    m_spiActive = false;
    7bcc:	strb	r3, [r4, #19]
}
    7bce:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return m_spiDriver.receive(buf, n);
    7bd2:	mov	r2, r9
    7bd4:	mov	r1, r8
    7bd6:	mov	r0, r6
    7bd8:	bl	a040 <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>
  if ((m_status = spiReceive(dst, count))) {
    7bdc:	strb	r0, [r4, #21]
    7bde:	cbnz	r0, 7bf0 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x84>
    return m_spiDriver.receive();
    7be0:	mov	r0, r6
    7be2:	bl	a028 <SdSpiArduinoDriver::receive()>
    7be6:	mov	r0, r6
    7be8:	bl	a028 <SdSpiArduinoDriver::receive()>
  return true;
    7bec:	movs	r0, #1
    7bee:	b.n	7ba4 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x38>
    7bf0:	movs	r3, #38	; 0x26
    7bf2:	b.n	7b9e <SharedSpiCard::readData(unsigned char*, unsigned int)+0x32>
    7bf4:	.word	0x200080e8

00007bf8 <SharedSpiCard::readStop()>:
bool SharedSpiCard::readStop() {
    7bf8:	push	{r4, r5, r6, r7, lr}
  m_state = IDLE_STATE;
    7bfa:	movs	r7, #0
bool SharedSpiCard::readStop() {
    7bfc:	sub	sp, #12
  if (cardCommand(CMD12, 0)) {
    7bfe:	movs	r1, #12
bool SharedSpiCard::readStop() {
    7c00:	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
    7c02:	mov	r2, r7
  m_state = IDLE_STATE;
    7c04:	strb	r7, [r0, #20]
  if (cardCommand(CMD12, 0)) {
    7c06:	bl	7c80 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    7c0a:	cbnz	r0, 7c3a <SharedSpiCard::readStop()+0x42>
  if (m_spiActive) {
    7c0c:	ldrb	r6, [r4, #19]
    7c0e:	cbnz	r6, 7c18 <SharedSpiCard::readStop()+0x20>
  return true;
    7c10:	movs	r6, #1
}
    7c12:	mov	r0, r6
    7c14:	add	sp, #12
    7c16:	pop	{r4, r5, r6, r7, pc}
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    7c18:	mov	r5, r0
    7c1a:	movs	r1, #1
    7c1c:	ldrb	r0, [r4, #17]
    7c1e:	bl	a0d0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    7c22:	adds	r0, r4, #4
    7c24:	movs	r1, #255	; 0xff
    7c26:	str	r0, [sp, #4]
    7c28:	bl	a064 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    7c2c:	ldr	r0, [sp, #4]
    7c2e:	bl	9fd0 <SdSpiArduinoDriver::deactivate()>
    7c32:	mov	r0, r6
    m_spiActive = false;
    7c34:	strb	r5, [r4, #19]
}
    7c36:	add	sp, #12
    7c38:	pop	{r4, r5, r6, r7, pc}
    m_errorCode = code;
    7c3a:	movs	r3, #9
  if (m_spiActive) {
    7c3c:	ldrb	r6, [r4, #19]
    7c3e:	strb	r3, [r4, #18]
    7c40:	cmp	r6, #0
    7c42:	beq.n	7c12 <SharedSpiCard::readStop()+0x1a>
    m_spiDriver.send(data);
    7c44:	adds	r5, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    7c46:	ldrb	r0, [r4, #17]
    7c48:	movs	r1, #1
}
    7c4a:	mov	r6, r7
    7c4c:	bl	a0d0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    7c50:	movs	r1, #255	; 0xff
    7c52:	mov	r0, r5
    7c54:	bl	a064 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    7c58:	mov	r0, r5
    7c5a:	bl	9fd0 <SdSpiArduinoDriver::deactivate()>
}
    7c5e:	mov	r0, r6
    m_spiActive = false;
    7c60:	strb	r7, [r4, #19]
}
    7c62:	add	sp, #12
    7c64:	pop	{r4, r5, r6, r7, pc}
    7c66:	nop

00007c68 <SharedSpiCard::syncDevice()>:
  if (m_state == WRITE_STATE) {
    7c68:	ldrb	r2, [r0, #20]
    7c6a:	cmp	r2, #2
    7c6c:	beq.n	7c76 <SharedSpiCard::syncDevice()+0xe>
  if (m_state == READ_STATE) {
    7c6e:	cmp	r2, #1
    7c70:	beq.n	7c7c <SharedSpiCard::syncDevice()+0x14>
}
    7c72:	movs	r0, #1
    7c74:	bx	lr
    return writeStop();
    7c76:	ldr	r3, [r0, #0]
    7c78:	ldr	r3, [r3, #104]	; 0x68
    7c7a:	bx	r3
    return readStop();
    7c7c:	b.w	7bf8 <SharedSpiCard::readStop()>

00007c80 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>:
uint8_t SharedSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    7c80:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!syncDevice()) {
    7c84:	ldr	r3, [r0, #0]
uint8_t SharedSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    7c86:	sub	sp, #8
    7c88:	mov	r7, r1
    7c8a:	ldr	r1, [pc, #216]	; (7d64 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xe4>)
    7c8c:	str	r2, [sp, #4]
    7c8e:	mov	r6, r0
  if (!syncDevice()) {
    7c90:	ldr	r2, [r3, #28]
    7c92:	cmp	r2, r1
    7c94:	bne.n	7d52 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xd2>
  if (m_state == WRITE_STATE) {
    7c96:	ldrb	r2, [r0, #20]
    7c98:	cmp	r2, #2
    7c9a:	beq.n	7d24 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xa4>
  if (m_state == READ_STATE) {
    7c9c:	cmp	r2, #1
    7c9e:	beq.n	7d5a <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xda>
  if (!m_spiActive) {
    7ca0:	ldrb	r4, [r6, #19]
    7ca2:	cmp	r4, #0
    7ca4:	beq.n	7d34 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xb4>
  void spiActivate() { m_spiDriver.activate(); }
    7ca6:	adds	r5, r6, #4
  if (cmd != CMD0 && cmd != CMD12 && !waitReady(SD_CMD_TIMEOUT)) {
    7ca8:	cbz	r7, 7cd2 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x52>
    7caa:	cmp	r7, #12
    7cac:	beq.n	7cd2 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x52>
    7cae:	ldr.w	r8, [pc, #184]	; 7d68 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xe8>
    7cb2:	ldr.w	r4, [r8]
  void set(uint16_t ms) { m_endTime = ms + millis16(); }
    7cb6:	add.w	r4, r4, #300	; 0x12c
    7cba:	uxth	r4, r4
  explicit Timeout(uint16_t ms) { set(ms); }
    7cbc:	b.n	7cc8 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x48>
    7cbe:	ldr.w	r3, [r8]
  bool timedOut() { return (int16_t)(m_endTime - millis16()) < 0; }
    7cc2:	subs	r3, r4, r3
    if (timeout.timedOut()) {
    7cc4:	lsls	r1, r3, #16
    7cc6:	bmi.n	7d2c <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xac>
    return m_spiDriver.receive();
    7cc8:	mov	r0, r5
    7cca:	bl	a028 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    7cce:	cmp	r0, #255	; 0xff
    7cd0:	bne.n	7cbe <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x3e>
    m_spiDriver.send(data);
    7cd2:	add.w	r8, sp, #4
    7cd6:	add	r4, sp, #8
    7cd8:	orr.w	r1, r7, #64	; 0x40
    7cdc:	mov	r0, r5
    7cde:	bl	a064 <SdSpiArduinoDriver::send(unsigned char)>
    7ce2:	ldrb.w	r1, [r4, #-1]!
    7ce6:	mov	r0, r5
    7ce8:	bl	a064 <SdSpiArduinoDriver::send(unsigned char)>
  for (int8_t i = 3; i >= 0; i--) {
    7cec:	cmp	r4, r8
    7cee:	bne.n	7ce2 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x62>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
    7cf0:	cmp	r7, #0
    7cf2:	mov	r0, r5
    return m_spiDriver.receive();
    7cf4:	mov.w	r4, #10
    m_spiDriver.send(data);
    7cf8:	ite	eq
    7cfa:	moveq	r1, #149	; 0x95
    7cfc:	movne	r1, #135	; 0x87
    7cfe:	bl	a064 <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
    7d02:	mov	r0, r5
    7d04:	bl	a028 <SdSpiArduinoDriver::receive()>
    7d08:	mov	r0, r5
    7d0a:	bl	a028 <SdSpiArduinoDriver::receive()>
  } while (m_status & 0X80 && ++n < 10);
    7d0e:	lsls	r2, r0, #24
    7d10:	add.w	r3, r4, #4294967295
    m_status = spiReceive();
    7d14:	strb	r0, [r6, #21]
  } while (m_status & 0X80 && ++n < 10);
    7d16:	bpl.n	7d1e <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x9e>
    7d18:	ands.w	r4, r3, #255	; 0xff
    7d1c:	bne.n	7d08 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x88>
}
    7d1e:	add	sp, #8
    7d20:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return writeStop();
    7d24:	ldr	r3, [r3, #104]	; 0x68
    7d26:	blx	r3
  if (!syncDevice()) {
    7d28:	cmp	r0, #0
    7d2a:	bne.n	7ca0 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x20>
    return 0XFF;
    7d2c:	movs	r0, #255	; 0xff
}
    7d2e:	add	sp, #8
    7d30:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  void spiActivate() { m_spiDriver.activate(); }
    7d34:	adds	r5, r6, #4
    7d36:	mov	r0, r5
    7d38:	bl	9f94 <SdSpiArduinoDriver::activate()>
    m_spiActive = true;
    7d3c:	movs	r3, #1
  void spiSelect() { sdCsWrite(m_csPin, false); }
    7d3e:	mov	r1, r4
    7d40:	ldrb	r0, [r6, #17]
    7d42:	strb	r3, [r6, #19]
    7d44:	bl	a0d0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    7d48:	movs	r1, #255	; 0xff
    7d4a:	mov	r0, r5
    7d4c:	bl	a064 <SdSpiArduinoDriver::send(unsigned char)>
}
    7d50:	b.n	7ca8 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x28>
  if (!syncDevice()) {
    7d52:	blx	r2
    7d54:	cmp	r0, #0
    7d56:	beq.n	7d2c <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xac>
    7d58:	b.n	7ca0 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x20>
    return readStop();
    7d5a:	bl	7bf8 <SharedSpiCard::readStop()>
  if (!syncDevice()) {
    7d5e:	cmp	r0, #0
    7d60:	beq.n	7d2c <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xac>
    7d62:	b.n	7ca0 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x20>
    7d64:	.word	0x00007c69
    7d68:	.word	0x200080e8

00007d6c <SharedSpiCard::begin(SdSpiConfig)>:
bool SharedSpiCard::begin(SdSpiConfig spiConfig) {
    7d6c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7d70:	sub	sp, #32
    7d72:	mov	r5, r0
    7d74:	mov	sl, r2
  /** Save high speed SPISettings after SD initialization.
   *
   * \param[in] maxSck Maximum SCK frequency.
   */
  void setSckSpeed(uint32_t maxSck) {
    m_spiSettings = SPISettings(maxSck, MSBFIRST, SPI_MODE0);
    7d76:	ldr	r6, [pc, #480]	; (7f58 <SharedSpiCard::begin(SdSpiConfig)+0x1ec>)
    7d78:	add	r4, sp, #4
  void spiBegin(SdSpiConfig spiConfig) { m_spiDriver.begin(spiConfig); }
    7d7a:	adds	r7, r5, #4
    7d7c:	stmia.w	r4, {r1, r2, r3}
    m_beginCalled = false;
    7d80:	movs	r3, #0
    7d82:	ldrb.w	r0, [sp, #4]
    7d86:	strb	r3, [r5, #16]
  m_errorCode = SD_CARD_ERROR_NONE;
    7d88:	strh	r3, [r5, #18]
    m_state = IDLE_STATE;
    7d8a:	strh	r3, [r5, #20]
    m_type = 0;
    7d8c:	strb	r3, [r5, #22]
  m_csPin = spiConfig.csPin;
    7d8e:	strb	r0, [r5, #17]
  sdCsInit(m_csPin);
    7d90:	bl	a0c8 <sdCsInit(unsigned char)>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    7d94:	movs	r1, #1
    7d96:	ldrb	r0, [r5, #17]
    7d98:	bl	a0d0 <sdCsWrite(unsigned char, bool)>
    7d9c:	movs	r2, #7
    7d9e:	add	r3, sp, #20
    7da0:	strd	r6, r2, [r5, #8]
  spiBegin(spiConfig);
    7da4:	ldmia.w	r4, {r0, r1, r2}
    7da8:	stmia.w	r3, {r0, r1, r2}
  void spiBegin(SdSpiConfig spiConfig) { m_spiDriver.begin(spiConfig); }
    7dac:	mov	r0, r7
  m_beginCalled = true;
    7dae:	movs	r4, #1
    7db0:	ldmia	r3, {r1, r2, r3}
    7db2:	bl	9fa8 <SdSpiArduinoDriver::begin(SdSpiConfig)>
  if (!m_spiActive) {
    7db6:	ldrb	r6, [r5, #19]
  m_beginCalled = true;
    7db8:	strb	r4, [r5, #16]
  if (!m_spiActive) {
    7dba:	cmp	r6, #0
    7dbc:	beq.w	7eda <SharedSpiCard::begin(SdSpiConfig)+0x16e>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    7dc0:	movs	r4, #10
    7dc2:	movs	r1, #1
    7dc4:	ldrb	r0, [r5, #17]
    7dc6:	bl	a0d0 <sdCsWrite(unsigned char, bool)>
    return m_spiDriver.receive();
    7dca:	mov	r0, r7
    7dcc:	bl	a028 <SdSpiArduinoDriver::receive()>
  for (uint8_t i = 0; i < 10; i++) {
    7dd0:	subs	r1, r4, #1
    7dd2:	ands.w	r4, r1, #255	; 0xff
    7dd6:	bne.n	7dca <SharedSpiCard::begin(SdSpiConfig)+0x5e>
    7dd8:	ldr.w	r9, [pc, #388]	; 7f60 <SharedSpiCard::begin(SdSpiConfig)+0x1f4>
  void spiSelect() { sdCsWrite(m_csPin, false); }
    7ddc:	mov	r1, r4
    7dde:	ldrb	r0, [r5, #17]
    7de0:	bl	a0d0 <sdCsWrite(unsigned char, bool)>
    7de4:	ldr.w	r3, [r9]
  void set(uint16_t ms) { m_endTime = ms + millis16(); }
    7de8:	add.w	r8, r3, #2000	; 0x7d0
    7dec:	uxth.w	r8, r8
    7df0:	b.n	7dfe <SharedSpiCard::begin(SdSpiConfig)+0x92>
    7df2:	ldr.w	r3, [r9]
  bool timedOut() { return (int16_t)(m_endTime - millis16()) < 0; }
    7df6:	sub.w	r3, r8, r3
    if (timeout.timedOut()) {
    7dfa:	lsls	r0, r3, #16
    7dfc:	bmi.n	7e6a <SharedSpiCard::begin(SdSpiConfig)+0xfe>
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
    7dfe:	movs	r2, #0
    7e00:	mov	r0, r5
    7e02:	mov	r1, r2
    7e04:	bl	7c80 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    7e08:	cmp	r0, #1
    7e0a:	mov	r6, r0
    7e0c:	bne.n	7df2 <SharedSpiCard::begin(SdSpiConfig)+0x86>
    if (cardCommand(CMD8, 0x1AA) & R1_ILLEGAL_COMMAND) {
    7e0e:	movs	r1, #8
    7e10:	mov.w	r2, #426	; 0x1aa
    7e14:	mov	r0, r5
    7e16:	bl	7c80 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    7e1a:	lsls	r1, r0, #29
    7e1c:	bmi.n	7e7c <SharedSpiCard::begin(SdSpiConfig)+0x110>
    7e1e:	movs	r4, #4
    return m_spiDriver.receive();
    7e20:	mov	r0, r7
    7e22:	bl	a028 <SdSpiArduinoDriver::receive()>
    for (uint8_t i = 0; i < 4; i++) {
    7e26:	subs	r3, r4, #1
      m_status = spiReceive();
    7e28:	strb	r0, [r5, #21]
    for (uint8_t i = 0; i < 4; i++) {
    7e2a:	ands.w	r4, r3, #255	; 0xff
    7e2e:	bne.n	7e20 <SharedSpiCard::begin(SdSpiConfig)+0xb4>
    if (m_status == 0XAA) {
    7e30:	cmp	r0, #170	; 0xaa
    7e32:	beq.n	7e7a <SharedSpiCard::begin(SdSpiConfig)+0x10e>
    7e34:	ldr.w	r3, [r9]
  bool timedOut() { return (int16_t)(m_endTime - millis16()) < 0; }
    7e38:	sub.w	r3, r8, r3
    if (timeout.timedOut()) {
    7e3c:	lsls	r2, r3, #16
    7e3e:	bpl.n	7e0e <SharedSpiCard::begin(SdSpiConfig)+0xa2>
    7e40:	movs	r3, #6
  if (m_spiActive) {
    7e42:	ldrb	r0, [r5, #19]
    m_errorCode = code;
    7e44:	strb	r3, [r5, #18]
    7e46:	cbz	r0, 7e74 <SharedSpiCard::begin(SdSpiConfig)+0x108>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    7e48:	ldrb	r0, [r5, #17]
    7e4a:	movs	r1, #1
    7e4c:	bl	a0d0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    7e50:	movs	r1, #255	; 0xff
    7e52:	mov	r0, r7
    7e54:	bl	a064 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    7e58:	mov	r0, r7
    7e5a:	bl	9fd0 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    7e5e:	movs	r3, #0
  return false;
    7e60:	mov	r0, r3
    m_spiActive = false;
    7e62:	strb	r3, [r5, #19]
}
    7e64:	add	sp, #32
    7e66:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7e6a:	movs	r3, #1
  if (m_spiActive) {
    7e6c:	ldrb	r0, [r5, #19]
    m_errorCode = code;
    7e6e:	strb	r3, [r5, #18]
    7e70:	cmp	r0, #0
    7e72:	bne.n	7e48 <SharedSpiCard::begin(SdSpiConfig)+0xdc>
}
    7e74:	add	sp, #32
    7e76:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7e7a:	movs	r6, #2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
    7e7c:	ldr	r3, [r5, #0]
    7e7e:	ldr	r4, [pc, #220]	; (7f5c <SharedSpiCard::begin(SdSpiConfig)+0x1f0>)
  void type(uint8_t value) { m_type = value; }
    7e80:	strb	r6, [r5, #22]
    7e82:	ldr	r3, [r3, #92]	; 0x5c
    7e84:	cmp	r3, r4
    7e86:	bne.n	7ef8 <SharedSpiCard::begin(SdSpiConfig)+0x18c>
    7e88:	sub.w	r6, r6, #2
    7e8c:	clz	r6, r6
    7e90:	lsrs	r6, r6, #5
    7e92:	lsls	r6, r6, #30
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
    7e94:	b.n	7ea2 <SharedSpiCard::begin(SdSpiConfig)+0x136>
    7e96:	ldr.w	r3, [r9]
  bool timedOut() { return (int16_t)(m_endTime - millis16()) < 0; }
    7e9a:	sub.w	r3, r8, r3
    if (timeout.timedOut()) {
    7e9e:	lsls	r3, r3, #16
    7ea0:	bmi.n	7ef4 <SharedSpiCard::begin(SdSpiConfig)+0x188>
    cardCommand(CMD55, 0);
    7ea2:	movs	r1, #55	; 0x37
    7ea4:	movs	r2, #0
    7ea6:	mov	r0, r5
    7ea8:	bl	7c80 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    return cardCommand(cmd, arg);
    7eac:	mov	r2, r6
    7eae:	movs	r1, #41	; 0x29
    7eb0:	mov	r0, r5
    7eb2:	bl	7c80 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
    7eb6:	cmp	r0, #0
    7eb8:	bne.n	7e96 <SharedSpiCard::begin(SdSpiConfig)+0x12a>
  if (type() == SD_CARD_TYPE_SD2) {
    7eba:	ldr	r3, [r5, #0]
    7ebc:	ldr	r3, [r3, #92]	; 0x5c
    7ebe:	cmp	r3, r4
    7ec0:	bne.n	7f4e <SharedSpiCard::begin(SdSpiConfig)+0x1e2>
  uint8_t type() const { return m_type; }
    7ec2:	ldrb	r0, [r5, #22]
    7ec4:	cmp	r0, #2
    7ec6:	beq.n	7f1c <SharedSpiCard::begin(SdSpiConfig)+0x1b0>
  if (m_spiActive) {
    7ec8:	ldrb	r3, [r5, #19]
    7eca:	cbnz	r3, 7f00 <SharedSpiCard::begin(SdSpiConfig)+0x194>
    7ecc:	movs	r3, #7
  return true;
    7ece:	movs	r0, #1
    7ed0:	strd	sl, r3, [r5, #8]
}
    7ed4:	add	sp, #32
    7ed6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  void spiActivate() { m_spiDriver.activate(); }
    7eda:	mov	r0, r7
    7edc:	bl	9f94 <SdSpiArduinoDriver::activate()>
  void spiSelect() { sdCsWrite(m_csPin, false); }
    7ee0:	mov	r1, r6
    7ee2:	ldrb	r0, [r5, #17]
    m_spiActive = true;
    7ee4:	strb	r4, [r5, #19]
    7ee6:	bl	a0d0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    7eea:	movs	r1, #255	; 0xff
    7eec:	mov	r0, r7
    7eee:	bl	a064 <SdSpiArduinoDriver::send(unsigned char)>
}
    7ef2:	b.n	7dc0 <SharedSpiCard::begin(SdSpiConfig)+0x54>
    7ef4:	movs	r3, #23
    7ef6:	b.n	7e6c <SharedSpiCard::begin(SdSpiConfig)+0x100>
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
    7ef8:	mov	r0, r5
    7efa:	blx	r3
    7efc:	mov	r6, r0
    7efe:	b.n	7e88 <SharedSpiCard::begin(SdSpiConfig)+0x11c>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    7f00:	movs	r1, #1
    7f02:	ldrb	r0, [r5, #17]
    7f04:	bl	a0d0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    7f08:	movs	r1, #255	; 0xff
    7f0a:	mov	r0, r7
    7f0c:	bl	a064 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    7f10:	mov	r0, r7
    7f12:	bl	9fd0 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    7f16:	movs	r3, #0
    7f18:	strb	r3, [r5, #19]
}
    7f1a:	b.n	7ecc <SharedSpiCard::begin(SdSpiConfig)+0x160>
    if (cardCommand(CMD58, 0)) {
    7f1c:	movs	r2, #0
    7f1e:	movs	r1, #58	; 0x3a
    7f20:	mov	r0, r5
    7f22:	bl	7c80 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    7f26:	cbnz	r0, 7f54 <SharedSpiCard::begin(SdSpiConfig)+0x1e8>
    return m_spiDriver.receive();
    7f28:	mov	r0, r7
    7f2a:	bl	a028 <SdSpiArduinoDriver::receive()>
    if ((spiReceive() & 0XC0) == 0XC0) {
    7f2e:	and.w	r0, r0, #192	; 0xc0
    7f32:	cmp	r0, #192	; 0xc0
    7f34:	bne.n	7f3a <SharedSpiCard::begin(SdSpiConfig)+0x1ce>
  void type(uint8_t value) { m_type = value; }
    7f36:	movs	r3, #3
    7f38:	strb	r3, [r5, #22]
    return m_spiDriver.receive();
    7f3a:	mov	r0, r7
    7f3c:	bl	a028 <SdSpiArduinoDriver::receive()>
    7f40:	mov	r0, r7
    7f42:	bl	a028 <SdSpiArduinoDriver::receive()>
    7f46:	mov	r0, r7
    7f48:	bl	a028 <SdSpiArduinoDriver::receive()>
    for (uint8_t i = 0; i < 3; i++) {
    7f4c:	b.n	7ec8 <SharedSpiCard::begin(SdSpiConfig)+0x15c>
  if (type() == SD_CARD_TYPE_SD2) {
    7f4e:	mov	r0, r5
    7f50:	blx	r3
    7f52:	b.n	7ec4 <SharedSpiCard::begin(SdSpiConfig)+0x158>
    7f54:	movs	r3, #18
    7f56:	b.n	7e6c <SharedSpiCard::begin(SdSpiConfig)+0x100>
    7f58:	.word	0x00061a80
    7f5c:	.word	0x00007a21
    7f60:	.word	0x200080e8

00007f64 <SharedSpiCard::cardCMD6(unsigned long, unsigned char*)>:
bool SharedSpiCard::cardCMD6(uint32_t arg, uint8_t* status) {
    7f64:	push	{r4, r5, r6, lr}
    7f66:	mov	r4, r1
    7f68:	sub	sp, #8
    7f6a:	mov	r6, r2
  if (cardCommand(CMD6, arg)) {
    7f6c:	movs	r1, #6
    7f6e:	mov	r2, r4
bool SharedSpiCard::cardCMD6(uint32_t arg, uint8_t* status) {
    7f70:	mov	r4, r0
  if (cardCommand(CMD6, arg)) {
    7f72:	bl	7c80 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    7f76:	cbz	r0, 7fa6 <SharedSpiCard::cardCMD6(unsigned long, unsigned char*)+0x42>
    m_errorCode = code;
    7f78:	movs	r3, #4
    7f7a:	strb	r3, [r4, #18]
  if (m_spiActive) {
    7f7c:	ldrb	r0, [r4, #19]
    7f7e:	cbnz	r0, 7f84 <SharedSpiCard::cardCMD6(unsigned long, unsigned char*)+0x20>
}
    7f80:	add	sp, #8
    7f82:	pop	{r4, r5, r6, pc}
    m_spiDriver.send(data);
    7f84:	adds	r5, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    7f86:	ldrb	r0, [r4, #17]
    7f88:	movs	r1, #1
    7f8a:	bl	a0d0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    7f8e:	movs	r1, #255	; 0xff
    7f90:	mov	r0, r5
    7f92:	bl	a064 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    7f96:	mov	r0, r5
    7f98:	bl	9fd0 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    7f9c:	movs	r3, #0
  return false;
    7f9e:	mov	r0, r3
    m_spiActive = false;
    7fa0:	strb	r3, [r4, #19]
}
    7fa2:	add	sp, #8
    7fa4:	pop	{r4, r5, r6, pc}
  if (!readData(status, 64)) {
    7fa6:	mov	r5, r0
    7fa8:	movs	r2, #64	; 0x40
    7faa:	mov	r1, r6
    7fac:	mov	r0, r4
    7fae:	bl	7b6c <SharedSpiCard::readData(unsigned char*, unsigned int)>
    7fb2:	cmp	r0, #0
    7fb4:	beq.n	7f7c <SharedSpiCard::cardCMD6(unsigned long, unsigned char*)+0x18>
  if (m_spiActive) {
    7fb6:	ldrb	r6, [r4, #19]
    7fb8:	cmp	r6, #0
    7fba:	beq.n	7f80 <SharedSpiCard::cardCMD6(unsigned long, unsigned char*)+0x1c>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    7fbc:	ldrb	r0, [r4, #17]
    7fbe:	movs	r1, #1
    7fc0:	bl	a0d0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    7fc4:	adds	r0, r4, #4
    7fc6:	movs	r1, #255	; 0xff
    7fc8:	str	r0, [sp, #4]
    7fca:	bl	a064 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    7fce:	ldr	r0, [sp, #4]
    7fd0:	bl	9fd0 <SdSpiArduinoDriver::deactivate()>
}
    7fd4:	mov	r0, r6
    m_spiActive = false;
    7fd6:	strb	r5, [r4, #19]
}
    7fd8:	add	sp, #8
    7fda:	pop	{r4, r5, r6, pc}

00007fdc <SharedSpiCard::readOCR(unsigned long*)>:
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    7fdc:	push	{r3, r4, r5, r6, r7, lr}
  if (cardCommand(CMD58, 0)) {
    7fde:	movs	r2, #0
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    7fe0:	mov	r5, r1
  if (cardCommand(CMD58, 0)) {
    7fe2:	movs	r1, #58	; 0x3a
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    7fe4:	mov	r6, r0
  if (cardCommand(CMD58, 0)) {
    7fe6:	bl	7c80 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    7fea:	cbnz	r0, 8026 <SharedSpiCard::readOCR(unsigned long*)+0x4a>
    m_spiDriver.send(data);
    7fec:	adds	r7, r6, #4
    7fee:	adds	r4, r5, #4
    return m_spiDriver.receive();
    7ff0:	mov	r0, r7
    7ff2:	bl	a028 <SdSpiArduinoDriver::receive()>
    p[3 - i] = spiReceive();
    7ff6:	strb.w	r0, [r4, #-1]!
  for (uint8_t i = 0; i < 4; i++) {
    7ffa:	cmp	r5, r4
    7ffc:	bne.n	7ff0 <SharedSpiCard::readOCR(unsigned long*)+0x14>
  if (m_spiActive) {
    7ffe:	ldrb	r4, [r6, #19]
    8000:	cbnz	r4, 8008 <SharedSpiCard::readOCR(unsigned long*)+0x2c>
    8002:	movs	r4, #1
}
    8004:	mov	r0, r4
    8006:	pop	{r3, r4, r5, r6, r7, pc}
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    8008:	ldrb	r0, [r6, #17]
    800a:	movs	r1, #1
    800c:	bl	a0d0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    8010:	movs	r1, #255	; 0xff
    8012:	mov	r0, r7
    8014:	bl	a064 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    8018:	mov	r0, r7
    801a:	bl	9fd0 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    801e:	movs	r3, #0
}
    8020:	mov	r0, r4
    m_spiActive = false;
    8022:	strb	r3, [r6, #19]
}
    8024:	pop	{r3, r4, r5, r6, r7, pc}
    m_errorCode = code;
    8026:	movs	r3, #18
  if (m_spiActive) {
    8028:	ldrb	r4, [r6, #19]
    802a:	strb	r3, [r6, #18]
    802c:	cmp	r4, #0
    802e:	beq.n	8004 <SharedSpiCard::readOCR(unsigned long*)+0x28>
    m_spiDriver.send(data);
    8030:	adds	r4, r6, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    8032:	ldrb	r0, [r6, #17]
    8034:	movs	r1, #1
    8036:	bl	a0d0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    803a:	movs	r1, #255	; 0xff
    803c:	mov	r0, r4
    803e:	bl	a064 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    8042:	mov	r0, r4
    8044:	bl	9fd0 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    8048:	movs	r3, #0
  return false;
    804a:	mov	r4, r3
    m_spiActive = false;
    804c:	strb	r3, [r6, #19]
}
    804e:	mov	r0, r4
    8050:	pop	{r3, r4, r5, r6, r7, pc}
    8052:	nop

00008054 <SharedSpiCard::readRegister(unsigned char, void*)>:
bool SharedSpiCard::readRegister(uint8_t cmd, void* buf) {
    8054:	push	{r4, r5, r6, lr}
    8056:	mov	r6, r2
    8058:	sub	sp, #8
  if (cardCommand(cmd, 0)) {
    805a:	movs	r2, #0
bool SharedSpiCard::readRegister(uint8_t cmd, void* buf) {
    805c:	mov	r4, r0
  if (cardCommand(cmd, 0)) {
    805e:	bl	7c80 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    8062:	cbz	r0, 8092 <SharedSpiCard::readRegister(unsigned char, void*)+0x3e>
    m_errorCode = code;
    8064:	movs	r3, #28
    8066:	strb	r3, [r4, #18]
  if (m_spiActive) {
    8068:	ldrb	r0, [r4, #19]
    806a:	cbnz	r0, 8070 <SharedSpiCard::readRegister(unsigned char, void*)+0x1c>
}
    806c:	add	sp, #8
    806e:	pop	{r4, r5, r6, pc}
    m_spiDriver.send(data);
    8070:	adds	r5, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    8072:	ldrb	r0, [r4, #17]
    8074:	movs	r1, #1
    8076:	bl	a0d0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    807a:	movs	r1, #255	; 0xff
    807c:	mov	r0, r5
    807e:	bl	a064 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    8082:	mov	r0, r5
    8084:	bl	9fd0 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    8088:	movs	r3, #0
  return false;
    808a:	mov	r0, r3
    m_spiActive = false;
    808c:	strb	r3, [r4, #19]
}
    808e:	add	sp, #8
    8090:	pop	{r4, r5, r6, pc}
  if (!readData(dst, 16)) {
    8092:	mov	r5, r0
    8094:	movs	r2, #16
    8096:	mov	r1, r6
    8098:	mov	r0, r4
    809a:	bl	7b6c <SharedSpiCard::readData(unsigned char*, unsigned int)>
    809e:	cmp	r0, #0
    80a0:	beq.n	8068 <SharedSpiCard::readRegister(unsigned char, void*)+0x14>
  if (m_spiActive) {
    80a2:	ldrb	r6, [r4, #19]
    80a4:	cmp	r6, #0
    80a6:	beq.n	806c <SharedSpiCard::readRegister(unsigned char, void*)+0x18>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    80a8:	ldrb	r0, [r4, #17]
    80aa:	movs	r1, #1
    80ac:	bl	a0d0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    80b0:	adds	r0, r4, #4
    80b2:	movs	r1, #255	; 0xff
    80b4:	str	r0, [sp, #4]
    80b6:	bl	a064 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    80ba:	ldr	r0, [sp, #4]
    80bc:	bl	9fd0 <SdSpiArduinoDriver::deactivate()>
}
    80c0:	mov	r0, r6
    m_spiActive = false;
    80c2:	strb	r5, [r4, #19]
}
    80c4:	add	sp, #8
    80c6:	pop	{r4, r5, r6, pc}

000080c8 <SharedSpiCard::sectorCount()>:
  return readCSD(&csd) ? csd.capacity() : 0;
    80c8:	ldr	r3, [r0, #0]
    80ca:	ldr	r2, [pc, #144]	; (815c <SharedSpiCard::sectorCount()+0x94>)
    80cc:	ldr	r3, [r3, #72]	; 0x48
    80ce:	cmp	r3, r2
uint32_t SharedSpiCard::sectorCount() {
    80d0:	push	{lr}
    80d2:	sub	sp, #20
    80d4:	bne.n	80f4 <SharedSpiCard::sectorCount()+0x2c>
  bool readCSD(csd_t* csd) { return readRegister(CMD9, csd); }
    80d6:	mov	r2, sp
    80d8:	movs	r1, #9
    80da:	bl	8054 <SharedSpiCard::readRegister(unsigned char, void*)>
  return readCSD(&csd) ? csd.capacity() : 0;
    80de:	cbz	r0, 80ee <SharedSpiCard::sectorCount()+0x26>
  uint8_t csd[16];
  // Extract big endian fields.
  /** \return Capacity in sectors */
  uint32_t capacity() const {
    uint32_t c_size;
    uint8_t ver = csd[0] >> 6;
    80e0:	ldrb.w	r3, [sp]
    if (ver == 0) {
    80e4:	lsrs	r3, r3, #6
    80e6:	beq.n	80fa <SharedSpiCard::sectorCount()+0x32>
      c_size = (uint32_t)(csd[6] & 3) << 10;
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
      uint8_t c_size_mult = (csd[9] & 3) << 1 | csd[10] >> 7;
      uint8_t read_bl_len = csd[5] & 15;
      return (c_size + 1) << (c_size_mult + read_bl_len + 2 - 9);
    } else if (ver == 1) {
    80e8:	cmp	r3, #1
    80ea:	beq.n	813c <SharedSpiCard::sectorCount()+0x74>
    80ec:	movs	r0, #0
}
    80ee:	add	sp, #20
    80f0:	ldr.w	pc, [sp], #4
  return readCSD(&csd) ? csd.capacity() : 0;
    80f4:	mov	r1, sp
    80f6:	blx	r3
    80f8:	b.n	80de <SharedSpiCard::sectorCount()+0x16>
      uint8_t c_size_mult = (csd[9] & 3) << 1 | csd[10] >> 7;
    80fa:	ldrb.w	r3, [sp, #9]
      c_size = (uint32_t)(csd[6] & 3) << 10;
    80fe:	ldrb.w	r2, [sp, #6]
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
    8102:	ldrb.w	r0, [sp, #8]
      uint8_t c_size_mult = (csd[9] & 3) << 1 | csd[10] >> 7;
    8106:	lsls	r3, r3, #1
    8108:	ldrb.w	r1, [sp, #10]
      c_size = (uint32_t)(csd[6] & 3) << 10;
    810c:	lsls	r2, r2, #10
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
    810e:	ldrb.w	ip, [sp, #7]
    8112:	lsrs	r0, r0, #6
      uint8_t c_size_mult = (csd[9] & 3) << 1 | csd[10] >> 7;
    8114:	and.w	r3, r3, #6
      c_size = (uint32_t)(csd[6] & 3) << 10;
    8118:	and.w	r2, r2, #3072	; 0xc00
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
    811c:	orr.w	r0, r0, ip, lsl #2
      return (c_size + 1) << (c_size_mult + read_bl_len + 2 - 9);
    8120:	orr.w	r3, r3, r1, lsr #7
      uint8_t read_bl_len = csd[5] & 15;
    8124:	ldrb.w	r1, [sp, #5]
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
    8128:	orrs	r0, r2
      return (c_size + 1) << (c_size_mult + read_bl_len + 2 - 9);
    812a:	and.w	r2, r1, #15
    812e:	adds	r0, #1
    8130:	add	r3, r2
    8132:	subs	r3, #7
    8134:	lsls	r0, r3
}
    8136:	add	sp, #20
    8138:	ldr.w	pc, [sp], #4
      c_size = (uint32_t)(csd[7] & 63) << 16;
    813c:	ldrb.w	r3, [sp, #7]
      c_size |= (uint32_t)csd[8] << 8;
      c_size |= csd[9];
    8140:	ldrh.w	r0, [sp, #8]
      c_size = (uint32_t)(csd[7] & 63) << 16;
    8144:	lsls	r3, r3, #16
      c_size |= csd[9];
    8146:	rev16	r0, r0
      c_size = (uint32_t)(csd[7] & 63) << 16;
    8148:	and.w	r3, r3, #4128768	; 0x3f0000
      c_size |= csd[9];
    814c:	uxth	r0, r0
    814e:	orrs	r0, r3
      return (c_size + 1) << 10;
    8150:	adds	r0, #1
    8152:	lsls	r0, r0, #10
    8154:	add	sp, #20
    8156:	ldr.w	pc, [sp], #4
    815a:	nop
    815c:	.word	0x0000852d

00008160 <SharedSpiCard::readStart(unsigned long)>:
  if (type() != SD_CARD_TYPE_SDHC) {
    8160:	ldr	r3, [r0, #0]
bool SharedSpiCard::readStart(uint32_t sector) {
    8162:	mov	r2, r1
    8164:	push	{r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    8166:	ldr	r3, [r3, #92]	; 0x5c
bool SharedSpiCard::readStart(uint32_t sector) {
    8168:	sub	sp, #12
    816a:	ldr	r5, [pc, #88]	; (81c4 <SharedSpiCard::readStart(unsigned long)+0x64>)
    816c:	mov	r4, r0
  if (type() != SD_CARD_TYPE_SDHC) {
    816e:	cmp	r3, r5
    8170:	bne.n	81bc <SharedSpiCard::readStart(unsigned long)+0x5c>
  uint8_t type() const { return m_type; }
    8172:	ldrb	r0, [r0, #22]
    8174:	cmp	r0, #3
  if (cardCommand(CMD18, sector)) {
    8176:	mov.w	r1, #18
    817a:	mov	r0, r4
    sector <<= 9;
    817c:	it	ne
    817e:	lslne	r2, r2, #9
  if (cardCommand(CMD18, sector)) {
    8180:	bl	7c80 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    8184:	cbnz	r0, 8190 <SharedSpiCard::readStart(unsigned long)+0x30>
  m_state = READ_STATE;
    8186:	movs	r3, #1
  return true;
    8188:	mov	r0, r3
  m_state = READ_STATE;
    818a:	strb	r3, [r4, #20]
}
    818c:	add	sp, #12
    818e:	pop	{r4, r5, pc}
    m_errorCode = code;
    8190:	movs	r3, #12
  if (m_spiActive) {
    8192:	ldrb	r0, [r4, #19]
    8194:	strb	r3, [r4, #18]
    8196:	cmp	r0, #0
    8198:	beq.n	818c <SharedSpiCard::readStart(unsigned long)+0x2c>
    m_spiDriver.send(data);
    819a:	adds	r5, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    819c:	ldrb	r0, [r4, #17]
    819e:	movs	r1, #1
    81a0:	bl	a0d0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    81a4:	movs	r1, #255	; 0xff
    81a6:	mov	r0, r5
    81a8:	bl	a064 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    81ac:	mov	r0, r5
    81ae:	bl	9fd0 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    81b2:	movs	r3, #0
}
    81b4:	mov	r0, r3
    m_spiActive = false;
    81b6:	strb	r3, [r4, #19]
}
    81b8:	add	sp, #12
    81ba:	pop	{r4, r5, pc}
    81bc:	str	r1, [sp, #4]
  if (type() != SD_CARD_TYPE_SDHC) {
    81be:	blx	r3
    81c0:	ldr	r2, [sp, #4]
    81c2:	b.n	8174 <SharedSpiCard::readStart(unsigned long)+0x14>
    81c4:	.word	0x00007a21

000081c8 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)>:
  m_dedicatedSpi = spiOptionDedicated(spiConfig.options);
  return true;
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::readSector(uint32_t sector, uint8_t* dst) {
  return readSectors(sector, dst, 1);
    81c8:	ldr	r3, [r0, #0]
bool DedicatedSpiCard::readSector(uint32_t sector, uint8_t* dst) {
    81ca:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return readSectors(sector, dst, 1);
    81ce:	ldr	r7, [r3, #20]
    81d0:	ldr	r3, [pc, #88]	; (822c <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x64>)
    81d2:	cmp	r7, r3
    81d4:	bne.n	8216 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x4e>
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
  if (sdState() != READ_STATE || sector != m_curSector) {
    81d6:	ldrb	r3, [r0, #20]
    81d8:	mov	r4, r0
    81da:	mov	r5, r1
    81dc:	mov	r6, r2
    81de:	cmp	r3, #1
    81e0:	bne.n	81e8 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x20>
    81e2:	ldr	r3, [r0, #24]
    81e4:	cmp	r1, r3
    81e6:	beq.n	81f4 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x2c>
    if (!readStart(sector)) {
    81e8:	mov	r1, r5
    81ea:	mov	r0, r4
    81ec:	bl	8160 <SharedSpiCard::readStart(unsigned long)>
    81f0:	cbz	r0, 8210 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x48>
      goto fail;
    }
    m_curSector = sector;
    81f2:	str	r5, [r4, #24]
bool SharedSpiCard::readData(uint8_t* dst) { return readData(dst, 512); }
    81f4:	mov.w	r2, #512	; 0x200
    81f8:	mov	r1, r6
    81fa:	mov	r0, r4
    81fc:	bl	7b6c <SharedSpiCard::readData(unsigned char*, unsigned int)>
  }
  for (size_t i = 0; i < ns; i++, dst += 512) {
    if (!readData(dst)) {
    8200:	cbz	r0, 8210 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x48>
      goto fail;
    }
  }
  m_curSector += ns;
    8202:	ldr	r3, [r4, #24]
  return m_dedicatedSpi ? true : readStop();
    8204:	ldrb	r0, [r4, #28]
  m_curSector += ns;
    8206:	adds	r3, #1
    8208:	str	r3, [r4, #24]
  return m_dedicatedSpi ? true : readStop();
    820a:	cbz	r0, 8220 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x58>
}
    820c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

fail:
  return false;
    8210:	movs	r0, #0
}
    8212:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return readSectors(sector, dst, 1);
    8216:	mov	ip, r7
    8218:	movs	r3, #1
}
    821a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return readSectors(sector, dst, 1);
    821e:	bx	ip
  return m_dedicatedSpi ? true : readStop();
    8220:	mov	r0, r4
}
    8222:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return m_dedicatedSpi ? true : readStop();
    8226:	b.w	7bf8 <SharedSpiCard::readStop()>
    822a:	nop
    822c:	.word	0x000085a5

00008230 <SharedSpiCard::writeStart(unsigned long)>:
  if (type() != SD_CARD_TYPE_SDHC) {
    8230:	ldr	r3, [r0, #0]
bool SharedSpiCard::writeStart(uint32_t sector) {
    8232:	mov	r2, r1
    8234:	push	{r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    8236:	ldr	r3, [r3, #92]	; 0x5c
bool SharedSpiCard::writeStart(uint32_t sector) {
    8238:	sub	sp, #12
    823a:	ldr	r5, [pc, #88]	; (8294 <SharedSpiCard::writeStart(unsigned long)+0x64>)
    823c:	mov	r4, r0
  if (type() != SD_CARD_TYPE_SDHC) {
    823e:	cmp	r3, r5
    8240:	bne.n	828c <SharedSpiCard::writeStart(unsigned long)+0x5c>
  uint8_t type() const { return m_type; }
    8242:	ldrb	r0, [r0, #22]
    8244:	cmp	r0, #3
  if (cardCommand(CMD25, sector)) {
    8246:	mov.w	r1, #25
    824a:	mov	r0, r4
    sector <<= 9;
    824c:	it	ne
    824e:	lslne	r2, r2, #9
  if (cardCommand(CMD25, sector)) {
    8250:	bl	7c80 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    8254:	cbnz	r0, 8260 <SharedSpiCard::writeStart(unsigned long)+0x30>
  m_state = WRITE_STATE;
    8256:	movs	r3, #2
  return true;
    8258:	movs	r0, #1
  m_state = WRITE_STATE;
    825a:	strb	r3, [r4, #20]
}
    825c:	add	sp, #12
    825e:	pop	{r4, r5, pc}
    m_errorCode = code;
    8260:	movs	r3, #14
  if (m_spiActive) {
    8262:	ldrb	r0, [r4, #19]
    8264:	strb	r3, [r4, #18]
    8266:	cmp	r0, #0
    8268:	beq.n	825c <SharedSpiCard::writeStart(unsigned long)+0x2c>
    m_spiDriver.send(data);
    826a:	adds	r5, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    826c:	ldrb	r0, [r4, #17]
    826e:	movs	r1, #1
    8270:	bl	a0d0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    8274:	movs	r1, #255	; 0xff
    8276:	mov	r0, r5
    8278:	bl	a064 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    827c:	mov	r0, r5
    827e:	bl	9fd0 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    8282:	movs	r3, #0
}
    8284:	mov	r0, r3
    m_spiActive = false;
    8286:	strb	r3, [r4, #19]
}
    8288:	add	sp, #12
    828a:	pop	{r4, r5, pc}
    828c:	str	r1, [sp, #4]
  if (type() != SD_CARD_TYPE_SDHC) {
    828e:	blx	r3
    8290:	ldr	r2, [sp, #4]
    8292:	b.n	8244 <SharedSpiCard::writeStart(unsigned long)+0x14>
    8294:	.word	0x00007a21

00008298 <SharedSpiCard::erase(unsigned long, unsigned long)>:
  if (!readCSD(&csd)) {
    8298:	ldr	r3, [r0, #0]
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    829a:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (!readCSD(&csd)) {
    829e:	ldr	r3, [r3, #72]	; 0x48
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    82a0:	mov	r7, r2
    82a2:	ldr	r2, [pc, #260]	; (83a8 <SharedSpiCard::erase(unsigned long, unsigned long)+0x110>)
    82a4:	sub	sp, #20
    82a6:	mov	r4, r0
    82a8:	mov	r6, r1
    82aa:	cmp	r3, r2
    82ac:	bne.n	833a <SharedSpiCard::erase(unsigned long, unsigned long)+0xa2>
  bool readCSD(csd_t* csd) { return readRegister(CMD9, csd); }
    82ae:	mov	r2, sp
    82b0:	movs	r1, #9
    82b2:	bl	8054 <SharedSpiCard::readRegister(unsigned char, void*)>
    82b6:	mov	r5, r0
  if (!readCSD(&csd)) {
    82b8:	cbz	r5, 82e8 <SharedSpiCard::erase(unsigned long, unsigned long)+0x50>
    } else {
      return 0;
    }
  }
  /** \return true if erase granularity is single block. */
  bool eraseSingleBlock() const { return csd[10] & 0X40; }
    82ba:	ldrb.w	r3, [sp, #10]
  if (!csd.eraseSingleBlock()) {
    82be:	lsls	r2, r3, #25
    82c0:	bpl.n	82f4 <SharedSpiCard::erase(unsigned long, unsigned long)+0x5c>
  if (m_type != SD_CARD_TYPE_SDHC) {
    82c2:	ldrb	r3, [r4, #22]
    82c4:	cmp	r3, #3
    82c6:	beq.n	82cc <SharedSpiCard::erase(unsigned long, unsigned long)+0x34>
    firstSector <<= 9;
    82c8:	lsls	r6, r6, #9
    lastSector <<= 9;
    82ca:	lsls	r7, r7, #9
  if (cardCommand(CMD32, firstSector) || cardCommand(CMD33, lastSector) ||
    82cc:	mov	r2, r6
    82ce:	movs	r1, #32
    82d0:	mov	r0, r4
    82d2:	bl	7c80 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    82d6:	cbnz	r0, 82e4 <SharedSpiCard::erase(unsigned long, unsigned long)+0x4c>
    82d8:	mov	r2, r7
    82da:	movs	r1, #33	; 0x21
    82dc:	mov	r0, r4
    82de:	bl	7c80 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    82e2:	cbz	r0, 8342 <SharedSpiCard::erase(unsigned long, unsigned long)+0xaa>
    m_errorCode = code;
    82e4:	movs	r3, #39	; 0x27
    82e6:	strb	r3, [r4, #18]
  if (m_spiActive) {
    82e8:	ldrb	r5, [r4, #19]
    82ea:	cbnz	r5, 8314 <SharedSpiCard::erase(unsigned long, unsigned long)+0x7c>
}
    82ec:	mov	r0, r5
    82ee:	add	sp, #20
    82f0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  /** \return erase size in 512 byte blocks if eraseSingleBlock is false. */
  int eraseSize() const { return ((csd[10] & 0X3F) << 1 | csd[11] >> 7) + 1; }
    82f4:	lsls	r3, r3, #1
    82f6:	ldrb.w	r2, [sp, #11]
    82fa:	and.w	r3, r3, #126	; 0x7e
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    82fe:	orr.w	r3, r3, r2, lsr #7
    8302:	adds	r2, r7, #1
    8304:	orrs	r2, r6
    8306:	tst	r3, r2
    8308:	beq.n	82c2 <SharedSpiCard::erase(unsigned long, unsigned long)+0x2a>
    830a:	movs	r3, #40	; 0x28
  if (m_spiActive) {
    830c:	ldrb	r5, [r4, #19]
    830e:	strb	r3, [r4, #18]
    8310:	cmp	r5, #0
    8312:	beq.n	82ec <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
    m_spiDriver.send(data);
    8314:	adds	r5, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    8316:	ldrb	r0, [r4, #17]
    8318:	movs	r1, #1
    831a:	bl	a0d0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    831e:	movs	r1, #255	; 0xff
    8320:	mov	r0, r5
    8322:	bl	a064 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    8326:	mov	r0, r5
    8328:	bl	9fd0 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    832c:	movs	r3, #0
  return false;
    832e:	mov	r5, r3
    m_spiActive = false;
    8330:	strb	r3, [r4, #19]
}
    8332:	mov	r0, r5
    8334:	add	sp, #20
    8336:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (!readCSD(&csd)) {
    833a:	mov	r1, sp
    833c:	blx	r3
    833e:	mov	r5, r0
    8340:	b.n	82b8 <SharedSpiCard::erase(unsigned long, unsigned long)+0x20>
      cardCommand(CMD38, 0)) {
    8342:	mov	r2, r0
    8344:	movs	r1, #38	; 0x26
    8346:	mov	r0, r4
    8348:	bl	7c80 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
  if (cardCommand(CMD32, firstSector) || cardCommand(CMD33, lastSector) ||
    834c:	cmp	r0, #0
    834e:	bne.n	82e4 <SharedSpiCard::erase(unsigned long, unsigned long)+0x4c>
    8350:	ldr.w	r8, [pc, #88]	; 83ac <SharedSpiCard::erase(unsigned long, unsigned long)+0x114>
  void set(uint16_t ms) { m_endTime = ms + millis16(); }
    8354:	movw	r7, #10000	; 0x2710
    return m_spiDriver.receive();
    8358:	add.w	r9, r4, #4
    835c:	ldr.w	r3, [r8]
    8360:	add	r7, r3
    8362:	uxth	r7, r7
  explicit Timeout(uint16_t ms) { set(ms); }
    8364:	b.n	8370 <SharedSpiCard::erase(unsigned long, unsigned long)+0xd8>
    8366:	ldr.w	r3, [r8]
  bool timedOut() { return (int16_t)(m_endTime - millis16()) < 0; }
    836a:	subs	r3, r7, r3
    if (timeout.timedOut()) {
    836c:	lsls	r3, r3, #16
    836e:	bmi.n	83a0 <SharedSpiCard::erase(unsigned long, unsigned long)+0x108>
    8370:	mov	r0, r9
    8372:	bl	a028 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    8376:	cmp	r0, #255	; 0xff
    8378:	mov	r6, r0
    837a:	bne.n	8366 <SharedSpiCard::erase(unsigned long, unsigned long)+0xce>
  if (m_spiActive) {
    837c:	ldrb	r3, [r4, #19]
    837e:	cmp	r3, #0
    8380:	beq.n	82ec <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    8382:	movs	r1, #1
    8384:	ldrb	r0, [r4, #17]
  return true;
    8386:	mov	r5, r3
    8388:	bl	a0d0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    838c:	mov	r1, r6
    838e:	mov	r0, r9
    8390:	bl	a064 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    8394:	mov	r0, r9
    8396:	bl	9fd0 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    839a:	movs	r3, #0
    839c:	strb	r3, [r4, #19]
}
    839e:	b.n	82ec <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
    m_errorCode = code;
    83a0:	movs	r3, #41	; 0x29
    83a2:	strb	r3, [r4, #18]
    goto fail;
    83a4:	b.n	82e8 <SharedSpiCard::erase(unsigned long, unsigned long)+0x50>
    83a6:	nop
    83a8:	.word	0x0000852d
    83ac:	.word	0x200080e8

000083b0 <SharedSpiCard::readSCR(scr_t*)>:
bool SharedSpiCard::readSCR(scr_t* scr) {
    83b0:	push	{r4, r5, r6, lr}
    83b2:	mov	r4, r0
    83b4:	sub	sp, #8
    cardCommand(CMD55, 0);
    83b6:	movs	r2, #0
    83b8:	mov	r6, r1
    83ba:	movs	r1, #55	; 0x37
    83bc:	bl	7c80 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    return cardCommand(cmd, arg);
    83c0:	movs	r2, #0
    83c2:	movs	r1, #51	; 0x33
    83c4:	mov	r0, r4
    83c6:	bl	7c80 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
  if (cardAcmd(ACMD51, 0)) {
    83ca:	cbz	r0, 83fa <SharedSpiCard::readSCR(scr_t*)+0x4a>
    m_errorCode = code;
    83cc:	movs	r3, #24
    83ce:	strb	r3, [r4, #18]
  if (m_spiActive) {
    83d0:	ldrb	r0, [r4, #19]
    83d2:	cbnz	r0, 83d8 <SharedSpiCard::readSCR(scr_t*)+0x28>
}
    83d4:	add	sp, #8
    83d6:	pop	{r4, r5, r6, pc}
    m_spiDriver.send(data);
    83d8:	adds	r5, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    83da:	ldrb	r0, [r4, #17]
    83dc:	movs	r1, #1
    83de:	bl	a0d0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    83e2:	movs	r1, #255	; 0xff
    83e4:	mov	r0, r5
    83e6:	bl	a064 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    83ea:	mov	r0, r5
    83ec:	bl	9fd0 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    83f0:	movs	r3, #0
  return false;
    83f2:	mov	r0, r3
    m_spiActive = false;
    83f4:	strb	r3, [r4, #19]
}
    83f6:	add	sp, #8
    83f8:	pop	{r4, r5, r6, pc}
  if (!readData(dst, sizeof(scr_t))) {
    83fa:	mov	r5, r0
    83fc:	movs	r2, #8
    83fe:	mov	r1, r6
    8400:	mov	r0, r4
    8402:	bl	7b6c <SharedSpiCard::readData(unsigned char*, unsigned int)>
    8406:	cmp	r0, #0
    8408:	beq.n	83d0 <SharedSpiCard::readSCR(scr_t*)+0x20>
  if (m_spiActive) {
    840a:	ldrb	r6, [r4, #19]
    840c:	cmp	r6, #0
    840e:	beq.n	83d4 <SharedSpiCard::readSCR(scr_t*)+0x24>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    8410:	ldrb	r0, [r4, #17]
    8412:	movs	r1, #1
    8414:	bl	a0d0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    8418:	adds	r0, r4, #4
    841a:	movs	r1, #255	; 0xff
    841c:	str	r0, [sp, #4]
    841e:	bl	a064 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    8422:	ldr	r0, [sp, #4]
    8424:	bl	9fd0 <SdSpiArduinoDriver::deactivate()>
}
    8428:	mov	r0, r6
    m_spiActive = false;
    842a:	strb	r5, [r4, #19]
}
    842c:	add	sp, #8
    842e:	pop	{r4, r5, r6, pc}

00008430 <SharedSpiCard::readSDS(sds_t*)>:
bool SharedSpiCard::readSDS(sds_t* sds) {
    8430:	push	{r3, r4, r5, r6, r7, lr}
    8432:	mov	r4, r0
    cardCommand(CMD55, 0);
    8434:	movs	r2, #0
    8436:	mov	r5, r1
    8438:	movs	r1, #55	; 0x37
    843a:	bl	7c80 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    return cardCommand(cmd, arg);
    843e:	movs	r2, #0
    8440:	movs	r1, #13
    8442:	mov	r0, r4
    8444:	bl	7c80 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
  if (cardAcmd(ACMD13, 0) || spiReceive()) {
    8448:	cbz	r0, 8474 <SharedSpiCard::readSDS(sds_t*)+0x44>
    m_errorCode = code;
    844a:	movs	r3, #21
    844c:	strb	r3, [r4, #18]
  if (m_spiActive) {
    844e:	ldrb	r0, [r4, #19]
    8450:	cbnz	r0, 8454 <SharedSpiCard::readSDS(sds_t*)+0x24>
}
    8452:	pop	{r3, r4, r5, r6, r7, pc}
    m_spiDriver.send(data);
    8454:	adds	r5, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    8456:	ldrb	r0, [r4, #17]
    8458:	movs	r1, #1
    845a:	bl	a0d0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    845e:	movs	r1, #255	; 0xff
    8460:	mov	r0, r5
    8462:	bl	a064 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    8466:	mov	r0, r5
    8468:	bl	9fd0 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    846c:	movs	r3, #0
  return false;
    846e:	mov	r0, r3
    m_spiActive = false;
    8470:	strb	r3, [r4, #19]
}
    8472:	pop	{r3, r4, r5, r6, r7, pc}
    return m_spiDriver.receive();
    8474:	adds	r7, r4, #4
    8476:	mov	r0, r7
    8478:	bl	a028 <SdSpiArduinoDriver::receive()>
  if (cardAcmd(ACMD13, 0) || spiReceive()) {
    847c:	mov	r6, r0
    847e:	cmp	r0, #0
    8480:	bne.n	844a <SharedSpiCard::readSDS(sds_t*)+0x1a>
  if (!readData(dst, sizeof(sds_t))) {
    8482:	movs	r2, #64	; 0x40
    8484:	mov	r1, r5
    8486:	mov	r0, r4
    8488:	bl	7b6c <SharedSpiCard::readData(unsigned char*, unsigned int)>
    848c:	cmp	r0, #0
    848e:	beq.n	844e <SharedSpiCard::readSDS(sds_t*)+0x1e>
  if (m_spiActive) {
    8490:	ldrb	r5, [r4, #19]
    8492:	cmp	r5, #0
    8494:	beq.n	8452 <SharedSpiCard::readSDS(sds_t*)+0x22>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    8496:	ldrb	r0, [r4, #17]
    8498:	movs	r1, #1
    849a:	bl	a0d0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    849e:	movs	r1, #255	; 0xff
    84a0:	mov	r0, r7
    84a2:	bl	a064 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    84a6:	mov	r0, r7
    84a8:	bl	9fd0 <SdSpiArduinoDriver::deactivate()>
  return true;
    84ac:	mov	r0, r5
    m_spiActive = false;
    84ae:	strb	r6, [r4, #19]
}
    84b0:	pop	{r3, r4, r5, r6, r7, pc}
    84b2:	nop

000084b4 <SharedSpiCard::readCID(cid_t*)>:
  bool readCID(cid_t* cid) { return readRegister(CMD10, cid); }
    84b4:	push	{r4, r5, r6, lr}
  if (cardCommand(cmd, 0)) {
    84b6:	movs	r2, #0
    84b8:	sub	sp, #8
    84ba:	mov	r6, r1
    84bc:	movs	r1, #10
    84be:	mov	r4, r0
    84c0:	bl	7c80 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    84c4:	cbz	r0, 84f4 <SharedSpiCard::readCID(cid_t*)+0x40>
    m_errorCode = code;
    84c6:	movs	r3, #28
    84c8:	strb	r3, [r4, #18]
  if (m_spiActive) {
    84ca:	ldrb	r0, [r4, #19]
    84cc:	cbnz	r0, 84d2 <SharedSpiCard::readCID(cid_t*)+0x1e>
  bool readCID(cid_t* cid) { return readRegister(CMD10, cid); }
    84ce:	add	sp, #8
    84d0:	pop	{r4, r5, r6, pc}
    m_spiDriver.send(data);
    84d2:	adds	r5, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    84d4:	ldrb	r0, [r4, #17]
    84d6:	movs	r1, #1
    84d8:	bl	a0d0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    84dc:	movs	r1, #255	; 0xff
    84de:	mov	r0, r5
    84e0:	bl	a064 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    84e4:	mov	r0, r5
    84e6:	bl	9fd0 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    84ea:	movs	r3, #0
  return false;
    84ec:	mov	r0, r3
    m_spiActive = false;
    84ee:	strb	r3, [r4, #19]
  bool readCID(cid_t* cid) { return readRegister(CMD10, cid); }
    84f0:	add	sp, #8
    84f2:	pop	{r4, r5, r6, pc}
  if (!readData(dst, 16)) {
    84f4:	mov	r5, r0
    84f6:	movs	r2, #16
    84f8:	mov	r1, r6
    84fa:	mov	r0, r4
    84fc:	bl	7b6c <SharedSpiCard::readData(unsigned char*, unsigned int)>
    8500:	cmp	r0, #0
    8502:	beq.n	84ca <SharedSpiCard::readCID(cid_t*)+0x16>
  if (m_spiActive) {
    8504:	ldrb	r6, [r4, #19]
    8506:	cmp	r6, #0
    8508:	beq.n	84ce <SharedSpiCard::readCID(cid_t*)+0x1a>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    850a:	ldrb	r0, [r4, #17]
    850c:	movs	r1, #1
    850e:	bl	a0d0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    8512:	adds	r0, r4, #4
    8514:	movs	r1, #255	; 0xff
    8516:	str	r0, [sp, #4]
    8518:	bl	a064 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    851c:	ldr	r0, [sp, #4]
    851e:	bl	9fd0 <SdSpiArduinoDriver::deactivate()>
}
    8522:	mov	r0, r6
    m_spiActive = false;
    8524:	strb	r5, [r4, #19]
  bool readCID(cid_t* cid) { return readRegister(CMD10, cid); }
    8526:	add	sp, #8
    8528:	pop	{r4, r5, r6, pc}
    852a:	nop

0000852c <SharedSpiCard::readCSD(csd_t*)>:
  bool readCSD(csd_t* csd) { return readRegister(CMD9, csd); }
    852c:	push	{r4, r5, r6, lr}
  if (cardCommand(cmd, 0)) {
    852e:	movs	r2, #0
    8530:	sub	sp, #8
    8532:	mov	r6, r1
    8534:	movs	r1, #9
    8536:	mov	r4, r0
    8538:	bl	7c80 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    853c:	cbz	r0, 856c <SharedSpiCard::readCSD(csd_t*)+0x40>
    m_errorCode = code;
    853e:	movs	r3, #28
    8540:	strb	r3, [r4, #18]
  if (m_spiActive) {
    8542:	ldrb	r0, [r4, #19]
    8544:	cbnz	r0, 854a <SharedSpiCard::readCSD(csd_t*)+0x1e>
  bool readCSD(csd_t* csd) { return readRegister(CMD9, csd); }
    8546:	add	sp, #8
    8548:	pop	{r4, r5, r6, pc}
    m_spiDriver.send(data);
    854a:	adds	r5, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    854c:	ldrb	r0, [r4, #17]
    854e:	movs	r1, #1
    8550:	bl	a0d0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    8554:	movs	r1, #255	; 0xff
    8556:	mov	r0, r5
    8558:	bl	a064 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    855c:	mov	r0, r5
    855e:	bl	9fd0 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    8562:	movs	r3, #0
  return false;
    8564:	mov	r0, r3
    m_spiActive = false;
    8566:	strb	r3, [r4, #19]
  bool readCSD(csd_t* csd) { return readRegister(CMD9, csd); }
    8568:	add	sp, #8
    856a:	pop	{r4, r5, r6, pc}
  if (!readData(dst, 16)) {
    856c:	mov	r5, r0
    856e:	movs	r2, #16
    8570:	mov	r1, r6
    8572:	mov	r0, r4
    8574:	bl	7b6c <SharedSpiCard::readData(unsigned char*, unsigned int)>
    8578:	cmp	r0, #0
    857a:	beq.n	8542 <SharedSpiCard::readCSD(csd_t*)+0x16>
  if (m_spiActive) {
    857c:	ldrb	r6, [r4, #19]
    857e:	cmp	r6, #0
    8580:	beq.n	8546 <SharedSpiCard::readCSD(csd_t*)+0x1a>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    8582:	ldrb	r0, [r4, #17]
    8584:	movs	r1, #1
    8586:	bl	a0d0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    858a:	adds	r0, r4, #4
    858c:	movs	r1, #255	; 0xff
    858e:	str	r0, [sp, #4]
    8590:	bl	a064 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    8594:	ldr	r0, [sp, #4]
    8596:	bl	9fd0 <SdSpiArduinoDriver::deactivate()>
}
    859a:	mov	r0, r6
    m_spiActive = false;
    859c:	strb	r5, [r4, #19]
  bool readCSD(csd_t* csd) { return readRegister(CMD9, csd); }
    859e:	add	sp, #8
    85a0:	pop	{r4, r5, r6, pc}
    85a2:	nop

000085a4 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
bool DedicatedSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    85a4:	push	{r4, r5, r6, r7, lr}
    85a6:	mov	r4, r2
  if (sdState() != READ_STATE || sector != m_curSector) {
    85a8:	ldrb	r2, [r0, #20]
bool DedicatedSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    85aa:	sub	sp, #12
    85ac:	mov	r6, r0
  if (sdState() != READ_STATE || sector != m_curSector) {
    85ae:	cmp	r2, #1
bool DedicatedSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    85b0:	mov	r5, r1
    85b2:	mov	r7, r3
  if (sdState() != READ_STATE || sector != m_curSector) {
    85b4:	bne.n	85bc <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x18>
    85b6:	ldr	r3, [r0, #24]
    85b8:	cmp	r3, r1
    85ba:	beq.n	85c8 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x24>
    if (!readStart(sector)) {
    85bc:	mov	r1, r5
    85be:	mov	r0, r6
    85c0:	bl	8160 <SharedSpiCard::readStart(unsigned long)>
    85c4:	cbz	r0, 85e8 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x44>
    m_curSector = sector;
    85c6:	str	r5, [r6, #24]
  for (size_t i = 0; i < ns; i++, dst += 512) {
    85c8:	cbz	r7, 85f0 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x4c>
    if (!readStart(sector)) {
    85ca:	movs	r5, #0
    85cc:	b.n	85d2 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2e>
  for (size_t i = 0; i < ns; i++, dst += 512) {
    85ce:	cmp	r7, r5
    85d0:	beq.n	85f0 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x4c>
bool SharedSpiCard::readData(uint8_t* dst) { return readData(dst, 512); }
    85d2:	mov	r1, r4
    85d4:	mov.w	r2, #512	; 0x200
    85d8:	mov	r0, r6
  for (size_t i = 0; i < ns; i++, dst += 512) {
    85da:	adds	r5, #1
    85dc:	add.w	r4, r4, #512	; 0x200
bool SharedSpiCard::readData(uint8_t* dst) { return readData(dst, 512); }
    85e0:	bl	7b6c <SharedSpiCard::readData(unsigned char*, unsigned int)>
    if (!readData(dst)) {
    85e4:	cmp	r0, #0
    85e6:	bne.n	85ce <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2a>
  return false;
    85e8:	movs	r4, #0
}
    85ea:	mov	r0, r4
    85ec:	add	sp, #12
    85ee:	pop	{r4, r5, r6, r7, pc}
  m_curSector += ns;
    85f0:	ldr	r3, [r6, #24]
  return m_dedicatedSpi ? true : readStop();
    85f2:	ldrb	r4, [r6, #28]
  m_curSector += ns;
    85f4:	add	r3, r7
    85f6:	str	r3, [r6, #24]
  return m_dedicatedSpi ? true : readStop();
    85f8:	cbz	r4, 8602 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x5e>
    85fa:	movs	r4, #1
}
    85fc:	mov	r0, r4
    85fe:	add	sp, #12
    8600:	pop	{r4, r5, r6, r7, pc}
  if (cardCommand(CMD12, 0)) {
    8602:	mov	r2, r4
    8604:	movs	r1, #12
    8606:	mov	r0, r6
  m_state = IDLE_STATE;
    8608:	strb	r4, [r6, #20]
  if (cardCommand(CMD12, 0)) {
    860a:	bl	7c80 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    860e:	mov	r5, r0
    8610:	cbnz	r0, 8634 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x90>
  if (m_spiActive) {
    8612:	ldrb	r4, [r6, #19]
    8614:	cmp	r4, #0
    8616:	beq.n	85fa <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x56>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    8618:	movs	r1, #1
    861a:	ldrb	r0, [r6, #17]
    861c:	bl	a0d0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    8620:	adds	r0, r6, #4
    8622:	movs	r1, #255	; 0xff
    8624:	str	r0, [sp, #4]
    8626:	bl	a064 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    862a:	ldr	r0, [sp, #4]
    862c:	bl	9fd0 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    8630:	strb	r5, [r6, #19]
}
    8632:	b.n	85ea <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x46>
    m_errorCode = code;
    8634:	movs	r2, #9
  if (m_spiActive) {
    8636:	ldrb	r3, [r6, #19]
    8638:	strb	r2, [r6, #18]
    863a:	cmp	r3, #0
    863c:	beq.n	85e8 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x44>
    m_spiDriver.send(data);
    863e:	adds	r5, r6, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    8640:	movs	r1, #1
    8642:	ldrb	r0, [r6, #17]
    8644:	bl	a0d0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    8648:	movs	r1, #255	; 0xff
    864a:	mov	r0, r5
    864c:	bl	a064 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    8650:	mov	r0, r5
    8652:	bl	9fd0 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    8656:	strb	r4, [r6, #19]
}
    8658:	b.n	85ea <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x46>
    865a:	nop

0000865c <DedicatedSpiCard::setDedicatedSpi(bool)>:
//------------------------------------------------------------------------------
bool DedicatedSpiCard::setDedicatedSpi(bool value) {
  if (!syncDevice()) {
    865c:	ldr	r3, [r0, #0]
bool DedicatedSpiCard::setDedicatedSpi(bool value) {
    865e:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!syncDevice()) {
    8662:	ldr	r2, [r3, #28]
bool DedicatedSpiCard::setDedicatedSpi(bool value) {
    8664:	sub	sp, #8
    8666:	ldr	r5, [pc, #144]	; (86f8 <DedicatedSpiCard::setDedicatedSpi(bool)+0x9c>)
    8668:	mov	r4, r0
    866a:	mov	r6, r1
    866c:	cmp	r2, r5
    866e:	bne.n	8694 <DedicatedSpiCard::setDedicatedSpi(bool)+0x38>
  if (m_state == WRITE_STATE) {
    8670:	ldrb	r5, [r0, #20]
    8672:	cmp	r5, #2
    8674:	beq.n	8684 <DedicatedSpiCard::setDedicatedSpi(bool)+0x28>
  if (m_state == READ_STATE) {
    8676:	cmp	r5, #1
    8678:	beq.n	8698 <DedicatedSpiCard::setDedicatedSpi(bool)+0x3c>
    return false;
  }
  m_dedicatedSpi = value;
  return true;
    867a:	movs	r0, #1
  m_dedicatedSpi = value;
    867c:	strb	r6, [r4, #28]
}
    867e:	add	sp, #8
    8680:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return writeStop();
    8684:	ldr	r3, [r3, #104]	; 0x68
    8686:	blx	r3
  if (!syncDevice()) {
    8688:	cmp	r0, #0
    868a:	bne.n	867a <DedicatedSpiCard::setDedicatedSpi(bool)+0x1e>
    return false;
    868c:	movs	r0, #0
}
    868e:	add	sp, #8
    8690:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!syncDevice()) {
    8694:	blx	r2
    8696:	b.n	8688 <DedicatedSpiCard::setDedicatedSpi(bool)+0x2c>
  m_state = IDLE_STATE;
    8698:	mov.w	r8, #0
  if (cardCommand(CMD12, 0)) {
    869c:	movs	r1, #12
    869e:	mov	r2, r8
  m_state = IDLE_STATE;
    86a0:	strb.w	r8, [r0, #20]
  if (cardCommand(CMD12, 0)) {
    86a4:	bl	7c80 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    86a8:	mov	r7, r0
    86aa:	cbnz	r0, 86ce <DedicatedSpiCard::setDedicatedSpi(bool)+0x72>
  if (m_spiActive) {
    86ac:	ldrb	r3, [r4, #19]
    86ae:	cmp	r3, #0
    86b0:	beq.n	867a <DedicatedSpiCard::setDedicatedSpi(bool)+0x1e>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    86b2:	mov	r1, r5
    86b4:	ldrb	r0, [r4, #17]
    86b6:	bl	a0d0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    86ba:	adds	r0, r4, #4
    86bc:	movs	r1, #255	; 0xff
    86be:	str	r0, [sp, #4]
    86c0:	bl	a064 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    86c4:	ldr	r0, [sp, #4]
    86c6:	bl	9fd0 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    86ca:	strb	r7, [r4, #19]
    86cc:	b.n	867a <DedicatedSpiCard::setDedicatedSpi(bool)+0x1e>
    m_errorCode = code;
    86ce:	movs	r2, #9
  if (m_spiActive) {
    86d0:	ldrb	r3, [r4, #19]
    86d2:	strb	r2, [r4, #18]
    86d4:	cmp	r3, #0
    86d6:	beq.n	868c <DedicatedSpiCard::setDedicatedSpi(bool)+0x30>
    m_spiDriver.send(data);
    86d8:	adds	r6, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    86da:	mov	r1, r5
    86dc:	ldrb	r0, [r4, #17]
    86de:	bl	a0d0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    86e2:	movs	r1, #255	; 0xff
    86e4:	mov	r0, r6
    86e6:	bl	a064 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    86ea:	mov	r0, r6
    86ec:	bl	9fd0 <SdSpiArduinoDriver::deactivate()>
    return false;
    86f0:	mov	r0, r8
    m_spiActive = false;
    86f2:	strb.w	r8, [r4, #19]
    86f6:	b.n	867e <DedicatedSpiCard::setDedicatedSpi(bool)+0x22>
    86f8:	.word	0x00007c69

000086fc <SharedSpiCard::writeData(unsigned char, unsigned char const*)>:
bool SharedSpiCard::writeData(uint8_t token, const uint8_t* src) {
    86fc:	push	{r4, r5, r6, lr}
    m_spiDriver.send(data);
    86fe:	adds	r5, r0, #4
    8700:	mov	r6, r2
    8702:	mov	r4, r0
    8704:	mov	r0, r5
    8706:	bl	a064 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.send(buf, n);
    870a:	mov.w	r2, #512	; 0x200
    870e:	mov	r1, r6
    8710:	mov	r0, r5
    8712:	bl	a078 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>
    m_spiDriver.send(data);
    8716:	movs	r1, #255	; 0xff
    8718:	mov	r0, r5
    871a:	bl	a064 <SdSpiArduinoDriver::send(unsigned char)>
    871e:	movs	r1, #255	; 0xff
    8720:	mov	r0, r5
    8722:	bl	a064 <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
    8726:	mov	r0, r5
    8728:	bl	a028 <SdSpiArduinoDriver::receive()>
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    872c:	and.w	r3, r0, #31
  m_status = spiReceive();
    8730:	strb	r0, [r4, #21]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    8732:	cmp	r3, #5
    8734:	beq.n	8740 <SharedSpiCard::writeData(unsigned char, unsigned char const*)+0x44>
    m_errorCode = code;
    8736:	movs	r3, #33	; 0x21
  if (m_spiActive) {
    8738:	ldrb	r0, [r4, #19]
    873a:	strb	r3, [r4, #18]
    873c:	cbnz	r0, 8744 <SharedSpiCard::writeData(unsigned char, unsigned char const*)+0x48>
}
    873e:	pop	{r4, r5, r6, pc}
  return true;
    8740:	movs	r0, #1
}
    8742:	pop	{r4, r5, r6, pc}
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    8744:	ldrb	r0, [r4, #17]
    8746:	movs	r1, #1
    8748:	bl	a0d0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    874c:	movs	r1, #255	; 0xff
    874e:	mov	r0, r5
    8750:	bl	a064 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    8754:	mov	r0, r5
    8756:	bl	9fd0 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    875a:	movs	r3, #0
}
    875c:	mov	r0, r3
    m_spiActive = false;
    875e:	strb	r3, [r4, #19]
}
    8760:	pop	{r4, r5, r6, pc}
    8762:	nop

00008764 <SharedSpiCard::writeData(unsigned char const*)>:
bool SharedSpiCard::writeData(const uint8_t* src) {
    8764:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8768:	ldr	r5, [pc, #92]	; (87c8 <SharedSpiCard::writeData(unsigned char const*)+0x64>)
    876a:	mov	r6, r0
    876c:	mov	r7, r1
    return m_spiDriver.receive();
    876e:	add.w	r8, r0, #4
    8772:	ldr	r4, [r5, #0]
  void set(uint16_t ms) { m_endTime = ms + millis16(); }
    8774:	add.w	r4, r4, #600	; 0x258
    8778:	uxth	r4, r4
  explicit Timeout(uint16_t ms) { set(ms); }
    877a:	b.n	8784 <SharedSpiCard::writeData(unsigned char const*)+0x20>
    877c:	ldr	r3, [r5, #0]
  bool timedOut() { return (int16_t)(m_endTime - millis16()) < 0; }
    877e:	subs	r3, r4, r3
    if (timeout.timedOut()) {
    8780:	lsls	r3, r3, #16
    8782:	bmi.n	879e <SharedSpiCard::writeData(unsigned char const*)+0x3a>
    8784:	mov	r0, r8
    8786:	bl	a028 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    878a:	cmp	r0, #255	; 0xff
    878c:	bne.n	877c <SharedSpiCard::writeData(unsigned char const*)+0x18>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
    878e:	mov	r2, r7
    8790:	movs	r1, #252	; 0xfc
    8792:	mov	r0, r6
    8794:	bl	86fc <SharedSpiCard::writeData(unsigned char, unsigned char const*)>
    8798:	cbz	r0, 87a2 <SharedSpiCard::writeData(unsigned char const*)+0x3e>
}
    879a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_errorCode = code;
    879e:	movs	r3, #37	; 0x25
    87a0:	strb	r3, [r6, #18]
  if (m_spiActive) {
    87a2:	ldrb	r0, [r6, #19]
    87a4:	cmp	r0, #0
    87a6:	beq.n	879a <SharedSpiCard::writeData(unsigned char const*)+0x36>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    87a8:	ldrb	r0, [r6, #17]
    87aa:	movs	r1, #1
    87ac:	bl	a0d0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    87b0:	movs	r1, #255	; 0xff
    87b2:	mov	r0, r8
    87b4:	bl	a064 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    87b8:	mov	r0, r8
    87ba:	bl	9fd0 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    87be:	movs	r3, #0
}
    87c0:	mov	r0, r3
    m_spiActive = false;
    87c2:	strb	r3, [r6, #19]
}
    87c4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    87c8:	.word	0x200080e8

000087cc <SharedSpiCard::writeSector(unsigned long, unsigned char const*)>:
bool SharedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    87cc:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    87d0:	ldr	r3, [r0, #0]
bool SharedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    87d2:	mov	r5, r2
    87d4:	ldr	r2, [pc, #212]	; (88ac <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0xe0>)
    87d6:	mov	r4, r0
  if (type() != SD_CARD_TYPE_SDHC) {
    87d8:	ldr	r3, [r3, #92]	; 0x5c
bool SharedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    87da:	mov	r6, r1
    87dc:	cmp	r3, r2
    87de:	bne.n	889a <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0xce>
  uint8_t type() const { return m_type; }
    87e0:	ldrb	r0, [r0, #22]
  if (type() != SD_CARD_TYPE_SDHC) {
    87e2:	cmp	r0, #3
  if (cardCommand(CMD24, sector)) {
    87e4:	mov.w	r1, #24
    87e8:	mov	r0, r4
    sector <<= 9;
    87ea:	it	ne
    87ec:	lslne	r6, r6, #9
  if (cardCommand(CMD24, sector)) {
    87ee:	mov	r2, r6
    87f0:	bl	7c80 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    87f4:	cbz	r0, 880a <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x3e>
    m_errorCode = code;
    87f6:	movs	r3, #13
    87f8:	strb	r3, [r4, #18]
  if (m_spiActive) {
    87fa:	ldrb.w	r9, [r4, #19]
    87fe:	cmp.w	r9, #0
    8802:	bne.n	8876 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0xaa>
}
    8804:	mov	r0, r9
    8806:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (!writeData(DATA_START_SECTOR, src)) {
    880a:	mov	r2, r5
    880c:	movs	r1, #254	; 0xfe
    880e:	mov	r0, r4
    8810:	bl	86fc <SharedSpiCard::writeData(unsigned char, unsigned char const*)>
    8814:	mov	r9, r0
    8816:	cmp	r0, #0
    8818:	beq.n	87fa <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x2e>
    881a:	ldr	r7, [pc, #148]	; (88b0 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0xe4>)
    return m_spiDriver.receive();
    881c:	add.w	r8, r4, #4
    8820:	ldr	r6, [r7, #0]
  void set(uint16_t ms) { m_endTime = ms + millis16(); }
    8822:	add.w	r6, r6, #600	; 0x258
    8826:	uxth	r6, r6
  explicit Timeout(uint16_t ms) { set(ms); }
    8828:	b.n	8832 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x66>
    882a:	ldr	r3, [r7, #0]
  bool timedOut() { return (int16_t)(m_endTime - millis16()) < 0; }
    882c:	subs	r3, r6, r3
    if (timeout.timedOut()) {
    882e:	lsls	r3, r3, #16
    8830:	bmi.n	88a4 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0xd8>
    8832:	mov	r0, r8
    8834:	bl	a028 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    8838:	cmp	r0, #255	; 0xff
    883a:	mov	r5, r0
    883c:	bne.n	882a <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x5e>
  if (cardCommand(CMD13, 0) || spiReceive()) {
    883e:	movs	r2, #0
    8840:	movs	r1, #13
    8842:	mov	r0, r4
    8844:	bl	7c80 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    8848:	cbnz	r0, 889e <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0xd2>
    884a:	mov	r0, r8
    884c:	bl	a028 <SdSpiArduinoDriver::receive()>
    8850:	mov	r6, r0
    8852:	cbnz	r0, 889e <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0xd2>
  if (m_spiActive) {
    8854:	ldrb	r3, [r4, #19]
    8856:	cmp	r3, #0
    8858:	beq.n	8804 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x38>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    885a:	movs	r1, #1
    885c:	ldrb	r0, [r4, #17]
  return true;
    885e:	mov	r9, r3
    8860:	bl	a0d0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    8864:	mov	r1, r5
    8866:	mov	r0, r8
    8868:	bl	a064 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    886c:	mov	r0, r8
    886e:	bl	9fd0 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    8872:	strb	r6, [r4, #19]
}
    8874:	b.n	8804 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x38>
    m_spiDriver.send(data);
    8876:	adds	r5, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    8878:	ldrb	r0, [r4, #17]
    887a:	movs	r1, #1
    887c:	bl	a0d0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    8880:	movs	r1, #255	; 0xff
    8882:	mov	r0, r5
    8884:	bl	a064 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    8888:	mov	r0, r5
    888a:	bl	9fd0 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    888e:	movs	r3, #0
  return false;
    8890:	mov	r9, r3
    m_spiActive = false;
    8892:	strb	r3, [r4, #19]
}
    8894:	mov	r0, r9
    8896:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (type() != SD_CARD_TYPE_SDHC) {
    889a:	blx	r3
    889c:	b.n	87e2 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x16>
    m_errorCode = code;
    889e:	movs	r3, #10
    88a0:	strb	r3, [r4, #18]
    goto fail;
    88a2:	b.n	87fa <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x2e>
    88a4:	movs	r3, #36	; 0x24
    88a6:	strb	r3, [r4, #18]
    goto fail;
    88a8:	b.n	87fa <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x2e>
    88aa:	nop
    88ac:	.word	0x00007a21
    88b0:	.word	0x200080e8

000088b4 <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)>:
//------------------------------------------------------------------------------
bool DedicatedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    88b4:	push	{r4}
  if (m_dedicatedSpi) {
    88b6:	ldrb	r4, [r0, #28]
    88b8:	cbz	r4, 88c8 <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)+0x14>
    return writeSectors(sector, src, 1);
    88ba:	ldr	r4, [r0, #0]
    88bc:	movs	r3, #1
    88be:	ldr	r4, [r4, #36]	; 0x24
    88c0:	mov	ip, r4
  }
  return SharedSpiCard::writeSector(sector, src);
}
    88c2:	ldr.w	r4, [sp], #4
    return writeSectors(sector, src, 1);
    88c6:	bx	ip
}
    88c8:	ldr.w	r4, [sp], #4
  return SharedSpiCard::writeSector(sector, src);
    88cc:	b.w	87cc <SharedSpiCard::writeSector(unsigned long, unsigned char const*)>

000088d0 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
//------------------------------------------------------------------------------
bool DedicatedSpiCard::writeSectors(uint32_t sector, const uint8_t* src,
                                    size_t ns) {
    88d0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    88d4:	mov	sl, r3
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    88d6:	ldrb	r3, [r0, #20]
                                    size_t ns) {
    88d8:	sub	sp, #4
    88da:	mov	r7, r0
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    88dc:	cmp	r3, #2
                                    size_t ns) {
    88de:	mov	r4, r1
    88e0:	mov	r8, r2
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    88e2:	beq.n	8998 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0xc8>
    if (!writeStart(sector)) {
    88e4:	ldr	r3, [r7, #0]
    88e6:	mov	r1, r4
    88e8:	mov	r0, r7
    88ea:	ldr	r3, [r3, #100]	; 0x64
    88ec:	blx	r3
    88ee:	cmp	r0, #0
    88f0:	beq.n	8962 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x92>
      goto fail;
    }
    m_curSector = sector;
    88f2:	str	r4, [r7, #24]
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    88f4:	cmp.w	sl, #0
    88f8:	beq.n	8942 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x72>
    if (!writeStart(sector)) {
    88fa:	mov.w	r9, #0
    88fe:	ldr.w	fp, [pc, #164]	; 89a4 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0xd4>
    8902:	ldr	r5, [pc, #156]	; (89a0 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0xd0>)
    return m_spiDriver.receive();
    8904:	adds	r6, r7, #4
    if (!writeData(src)) {
    8906:	ldr	r3, [r7, #0]
    8908:	ldr	r3, [r3, #96]	; 0x60
    890a:	cmp	r3, fp
    890c:	bne.n	896a <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x9a>
    890e:	ldr	r4, [r5, #0]
  void set(uint16_t ms) { m_endTime = ms + millis16(); }
    8910:	add.w	r4, r4, #600	; 0x258
    8914:	uxth	r4, r4
  explicit Timeout(uint16_t ms) { set(ms); }
    8916:	b.n	8920 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x50>
    8918:	ldr	r3, [r5, #0]
  bool timedOut() { return (int16_t)(m_endTime - millis16()) < 0; }
    891a:	subs	r3, r4, r3
    if (timeout.timedOut()) {
    891c:	lsls	r3, r3, #16
    891e:	bmi.n	895a <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x8a>
    8920:	mov	r0, r6
    8922:	bl	a028 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    8926:	cmp	r0, #255	; 0xff
    8928:	bne.n	8918 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x48>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
    892a:	mov	r2, r8
    892c:	movs	r1, #252	; 0xfc
    892e:	mov	r0, r7
    8930:	bl	86fc <SharedSpiCard::writeData(unsigned char, unsigned char const*)>
    8934:	cbz	r0, 895e <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x8e>
  for (size_t i = 0; i < ns; i++, src += 512) {
    8936:	add.w	r9, r9, #1
    893a:	add.w	r8, r8, #512	; 0x200
    893e:	cmp	sl, r9
    8940:	bne.n	8906 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x36>
      goto fail;
    }
  }
  m_curSector += ns;
    8942:	ldr	r3, [r7, #24]
  return m_dedicatedSpi ? true : writeStop();
    8944:	ldrb	r0, [r7, #28]
  m_curSector += ns;
    8946:	add	r3, sl
    8948:	str	r3, [r7, #24]
  return m_dedicatedSpi ? true : writeStop();
    894a:	cbnz	r0, 8964 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x94>
    894c:	ldr	r3, [r7, #0]
    894e:	mov	r0, r7
    8950:	ldr	r3, [r3, #104]	; 0x68

fail:
  return false;
}
    8952:	add	sp, #4
    8954:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  return m_dedicatedSpi ? true : writeStop();
    8958:	bx	r3
    m_errorCode = code;
    895a:	movs	r3, #37	; 0x25
    895c:	strb	r3, [r7, #18]
  if (m_spiActive) {
    895e:	ldrb	r3, [r7, #19]
    8960:	cbnz	r3, 8976 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0xa6>
  return false;
    8962:	movs	r0, #0
}
    8964:	add	sp, #4
    8966:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (!writeData(src)) {
    896a:	mov	r1, r8
    896c:	mov	r0, r7
    896e:	blx	r3
    8970:	cmp	r0, #0
    8972:	bne.n	8936 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x66>
    8974:	b.n	8962 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x92>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    8976:	ldrb	r0, [r7, #17]
    8978:	movs	r1, #1
    897a:	bl	a0d0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    897e:	movs	r1, #255	; 0xff
    8980:	mov	r0, r6
    8982:	bl	a064 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    8986:	mov	r0, r6
    8988:	bl	9fd0 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    898c:	movs	r3, #0
  return false;
    898e:	mov	r0, r3
    m_spiActive = false;
    8990:	strb	r3, [r7, #19]
}
    8992:	add	sp, #4
    8994:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    8998:	ldr	r3, [r0, #24]
    899a:	cmp	r3, r1
    899c:	bne.n	88e4 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x14>
    899e:	b.n	88f4 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x24>
    89a0:	.word	0x200080e8
    89a4:	.word	0x00008765

000089a8 <DedicatedSpiCard::begin(SdSpiConfig)>:
bool DedicatedSpiCard::begin(SdSpiConfig spiConfig) {
    89a8:	push	{r4, lr}
    89aa:	sub	sp, #16
    89ac:	mov	r4, r0
    89ae:	add.w	ip, sp, #4
    89b2:	stmia.w	ip, {r1, r2, r3}
  if (!SharedSpiCard::begin(spiConfig)) {
    89b6:	ldmia.w	ip, {r1, r2, r3}
    89ba:	bl	7d6c <SharedSpiCard::begin(SdSpiConfig)>
    89be:	cbz	r0, 89ca <DedicatedSpiCard::begin(SdSpiConfig)+0x22>
const uint8_t USER_SPI_BEGIN = 2;
/**
 * \param[in] opt option field of SdSpiConfig.
 * \return true for dedicated SPI.
 */
inline bool spiOptionDedicated(uint8_t opt) { return opt & DEDICATED_SPI; }
    89c0:	ldrb.w	r3, [sp, #5]
    89c4:	and.w	r3, r3, #1
    89c8:	strb	r3, [r4, #28]
}
    89ca:	add	sp, #16
    89cc:	pop	{r4, pc}
    89ce:	nop

000089d0 <SdCardInterface::hasDedicatedSpi()>:
  virtual bool hasDedicatedSpi() { return false; }
    89d0:	movs	r0, #0
    89d2:	bx	lr

000089d4 <SdCardInterface::isDedicatedSpi()>:
  bool virtual isDedicatedSpi() { return false; }
    89d4:	movs	r0, #0
    89d6:	bx	lr

000089d8 <SdCardInterface::setDedicatedSpi(bool)>:
  }
    89d8:	movs	r0, #0
    89da:	bx	lr

000089dc <SdioCard::end()>:
   */
  bool cardCMD6(uint32_t arg, uint8_t* status);
  /** Disable an SDIO card.
   * not implemented.
   */
  void end() {}
    89dc:	bx	lr
    89de:	nop

000089e0 <sdIrs()>:
  return false;
}
//==============================================================================
// ISR
static void sdIrs() {
  SDHC_IRQSIGEN = 0;
    89e0:	ldr	r3, [pc, #32]	; (8a04 <sdIrs()+0x24>)
    89e2:	movs	r1, #0
  m_irqstat = SDHC_IRQSTAT;
    89e4:	ldr	r2, [pc, #32]	; (8a08 <sdIrs()+0x28>)
  SDHC_IRQSTAT = m_irqstat;
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
#endif
  m_dmaBusy = false;
    89e6:	ldr	r0, [pc, #36]	; (8a0c <sdIrs()+0x2c>)
static void sdIrs() {
    89e8:	push	{r4}
  SDHC_IRQSIGEN = 0;
    89ea:	str	r1, [r3, #56]	; 0x38
  m_irqstat = SDHC_IRQSTAT;
    89ec:	ldr	r4, [r3, #48]	; 0x30
    89ee:	str	r4, [r2, #0]
  SDHC_IRQSTAT = m_irqstat;
    89f0:	ldr	r2, [r2, #0]
}
    89f2:	ldr.w	r4, [sp], #4
  SDHC_IRQSTAT = m_irqstat;
    89f6:	str	r2, [r3, #48]	; 0x30
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
    89f8:	ldr	r2, [r3, #72]	; 0x48
    89fa:	bic.w	r2, r2, #129	; 0x81
    89fe:	str	r2, [r3, #72]	; 0x48
  m_dmaBusy = false;
    8a00:	strb	r1, [r0, #0]
}
    8a02:	bx	lr
    8a04:	.word	0x402c0000
    8a08:	.word	0x20006400
    8a0c:	.word	0x2000815c

00008a10 <isBusyDat()>:
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
}
//------------------------------------------------------------------------------
static bool isBusyCommandInhibit() { return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB; }
//------------------------------------------------------------------------------
static bool isBusyDat() { return SDHC_PRSSTAT & (1 << 24) ? false : true; }
    8a10:	ldr	r3, [pc, #12]	; (8a20 <isBusyDat()+0x10>)
    8a12:	ldr	r0, [r3, #36]	; 0x24
    8a14:	eor.w	r0, r0, #16777216	; 0x1000000
    8a18:	ubfx	r0, r0, #24, #1
    8a1c:	bx	lr
    8a1e:	nop
    8a20:	.word	0x402c0000

00008a24 <isBusyDMA()>:
//------------------------------------------------------------------------------
static bool isBusyDMA() { return m_dmaBusy; }
    8a24:	ldr	r3, [pc, #4]	; (8a2c <isBusyDMA()+0x8>)
    8a26:	ldrb	r0, [r3, #0]
    8a28:	bx	lr
    8a2a:	nop
    8a2c:	.word	0x2000815c

00008a30 <setSdclk(unsigned long)>:
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    8a30:	ldr	r2, [pc, #172]	; (8ae0 <setSdclk(unsigned long)+0xb0>)
  return (528000000U * 3) / ((CCM_ANALOG_PFD_528 & 0x3F) / 6) / divider;
    8a32:	ldr	r3, [pc, #176]	; (8ae4 <setSdclk(unsigned long)+0xb4>)
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    8a34:	ldr	r2, [r2, #36]	; 0x24
  return (528000000U * 3) / ((CCM_ANALOG_PFD_528 & 0x3F) / 6) / divider;
    8a36:	ldr.w	r3, [r3, #256]	; 0x100
    8a3a:	ldr	r1, [pc, #172]	; (8ae8 <setSdclk(unsigned long)+0xb8>)
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    8a3c:	ubfx	r2, r2, #11, #3
  return (528000000U * 3) / ((CCM_ANALOG_PFD_528 & 0x3F) / 6) / divider;
    8a40:	and.w	r3, r3, #63	; 0x3f
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    8a44:	adds	r2, #1
  }
  d[15] = 0;
  return true;
}
//------------------------------------------------------------------------------
static void setSdclk(uint32_t kHzMax) {
    8a46:	push	{r4, r5, r6, lr}
  return (528000000U * 3) / ((CCM_ANALOG_PFD_528 & 0x3F) / 6) / divider;
    8a48:	ldr	r4, [pc, #160]	; (8aec <setSdclk(unsigned long)+0xbc>)
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000 * kHzMax;
    8a4a:	mov.w	r5, #1000	; 0x3e8
  return (528000000U * 3) / ((CCM_ANALOG_PFD_528 & 0x3F) / 6) / divider;
    8a4e:	umull	r4, r3, r4, r3
  uint32_t maxSdclk = 1000 * kHzMax;
    8a52:	mul.w	r0, r5, r0
  return (528000000U * 3) / ((CCM_ANALOG_PFD_528 & 0x3F) / 6) / divider;
    8a56:	lsrs	r3, r3, #2
    8a58:	udiv	lr, r1, r3
    8a5c:	udiv	lr, lr, r2
  uint32_t base = baseClock();

  while ((base / (sdclkfs * DVS_LIMIT) > maxSdclk) &&
    8a60:	cmp.w	r0, lr, lsr #4
    8a64:	bcs.n	8ad2 <setSdclk(unsigned long)+0xa2>
  uint32_t sdclkfs = 1;
    8a66:	movs	r3, #1
         (sdclkfs < SDCLKFS_LIMIT)) {
    sdclkfs <<= 1;
    8a68:	mov	r6, r3
    8a6a:	lsls	r3, r3, #1
  while ((base / (sdclkfs * DVS_LIMIT) > maxSdclk) &&
    8a6c:	lsls	r2, r3, #4
    8a6e:	udiv	r2, lr, r2
    8a72:	cmp	r2, r0
    8a74:	bls.n	8a7a <setSdclk(unsigned long)+0x4a>
    8a76:	cmp	r3, #255	; 0xff
    8a78:	bls.n	8a68 <setSdclk(unsigned long)+0x38>
  }
  while ((base / (sdclkfs * dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    8a7a:	udiv	r2, lr, r3
  uint32_t sysctl =
      SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK | SDHC_SYSCTL_DVS_MASK |
                      SDHC_SYSCTL_SDCLKFS_MASK);

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs) |
                SDHC_SYSCTL_SDCLKFS(sdclkfs);
    8a7e:	lsls	r6, r6, #8
  while ((base / (sdclkfs * dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    8a80:	cmp	r0, r2
    8a82:	bcs.n	8ada <setSdclk(unsigned long)+0xaa>
    8a84:	mov.w	ip, r3, lsl #1
    8a88:	movs	r2, #1
    8a8a:	b.n	8a8e <setSdclk(unsigned long)+0x5e>
    8a8c:	mov	ip, r4
    dvs++;
    8a8e:	mov	r5, r2
  while ((base / (sdclkfs * dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    8a90:	add.w	r4, r3, ip
    dvs++;
    8a94:	adds	r2, #1
  while ((base / (sdclkfs * dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    8a96:	udiv	r1, lr, ip
    8a9a:	cmp	r1, r0
    8a9c:	bls.n	8ace <setSdclk(unsigned long)+0x9e>
    8a9e:	cmp	r2, #16
    8aa0:	bne.n	8a8c <setSdclk(unsigned long)+0x5c>
    8aa2:	movs	r5, #240	; 0xf0
  m_sdClkKhz = base / (1000 * sdclkfs * dvs);
    8aa4:	mov.w	r3, #1000	; 0x3e8
    8aa8:	ldr	r1, [pc, #68]	; (8af0 <setSdclk(unsigned long)+0xc0>)
      SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK | SDHC_SYSCTL_DVS_MASK |
    8aaa:	ldr	r2, [pc, #72]	; (8af4 <setSdclk(unsigned long)+0xc4>)
  m_sdClkKhz = base / (1000 * sdclkfs * dvs);
    8aac:	mul.w	ip, r3, ip
    8ab0:	udiv	r3, lr, ip
    8ab4:	str	r3, [r1, #0]
                      SDHC_SYSCTL_SDCLKFS_MASK);
    8ab6:	ldr	r3, [pc, #64]	; (8af8 <setSdclk(unsigned long)+0xc8>)
      SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK | SDHC_SYSCTL_DVS_MASK |
    8ab8:	ldr	r1, [r2, #44]	; 0x2c
                      SDHC_SYSCTL_SDCLKFS_MASK);
    8aba:	ands	r3, r1
  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs) |
    8abc:	orrs	r3, r5
    8abe:	orrs	r3, r6
    8ac0:	orr.w	r3, r3, #917504	; 0xe0000
    8ac4:	str	r3, [r2, #44]	; 0x2c

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
    8ac6:	ldr	r3, [r2, #36]	; 0x24
    8ac8:	lsls	r3, r3, #28
    8aca:	bpl.n	8ac6 <setSdclk(unsigned long)+0x96>

#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
  // Enable the SDHC clock.
  SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
}
    8acc:	pop	{r4, r5, r6, pc}
  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs) |
    8ace:	lsls	r5, r5, #4
    8ad0:	b.n	8aa4 <setSdclk(unsigned long)+0x74>
  while ((base / (sdclkfs * DVS_LIMIT) > maxSdclk) &&
    8ad2:	mov	r2, lr
    8ad4:	movs	r6, #0
  uint32_t sdclkfs = 1;
    8ad6:	movs	r3, #1
    8ad8:	b.n	8a80 <setSdclk(unsigned long)+0x50>
  while ((base / (sdclkfs * dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    8ada:	mov	ip, r3
    8adc:	movs	r5, #0
    8ade:	b.n	8aa4 <setSdclk(unsigned long)+0x74>
    8ae0:	.word	0x400fc000
    8ae4:	.word	0x400d8000
    8ae8:	.word	0x5e69ec00
    8aec:	.word	0xaaaaaaab
    8af0:	.word	0x20005c84
    8af4:	.word	0x402c0000
    8af8:	.word	0xfff0000f

00008afc <SdioCard::errorCode() const>:
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::errorCode() const { return m_errorCode; }
    8afc:	ldr	r3, [pc, #4]	; (8b04 <SdioCard::errorCode() const+0x8>)
    8afe:	ldrb	r0, [r3, #0]
    8b00:	bx	lr
    8b02:	nop
    8b04:	.word	0x20001a56

00008b08 <SdioCard::errorData() const>:
//------------------------------------------------------------------------------
uint32_t SdioCard::errorData() const { return m_irqstat; }
    8b08:	ldr	r3, [pc, #4]	; (8b10 <SdioCard::errorData() const+0x8>)
    8b0a:	ldr	r0, [r3, #0]
    8b0c:	bx	lr
    8b0e:	nop
    8b10:	.word	0x20006400

00008b14 <SdioCard::readCID(cid_t*)>:
  }
}
//------------------------------------------------------------------------------
uint32_t SdioCard::kHzSdClk() { return m_sdClkKhz; }
//------------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
    8b14:	push	{r4}
  memcpy(cid, &m_cid, sizeof(cid_t));
    8b16:	ldr	r4, [pc, #28]	; (8b34 <SdioCard::readCID(cid_t*)+0x20>)
bool SdioCard::readCID(cid_t* cid) {
    8b18:	mov	ip, r1
  memcpy(cid, &m_cid, sizeof(cid_t));
    8b1a:	ldmia	r4!, {r0, r1, r2, r3}
    8b1c:	str.w	r0, [ip]
  return true;
}
    8b20:	movs	r0, #1
  memcpy(cid, &m_cid, sizeof(cid_t));
    8b22:	str.w	r1, [ip, #4]
    8b26:	str.w	r2, [ip, #8]
    8b2a:	str.w	r3, [ip, #12]
}
    8b2e:	ldr.w	r4, [sp], #4
    8b32:	bx	lr
    8b34:	.word	0x2000618c

00008b38 <SdioCard::readCSD(csd_t*)>:
//------------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
    8b38:	push	{r4}
  memcpy(csd, &m_csd, sizeof(csd_t));
    8b3a:	ldr	r4, [pc, #28]	; (8b58 <SdioCard::readCSD(csd_t*)+0x20>)
bool SdioCard::readCSD(csd_t* csd) {
    8b3c:	mov	ip, r1
  memcpy(csd, &m_csd, sizeof(csd_t));
    8b3e:	ldmia	r4!, {r0, r1, r2, r3}
    8b40:	str.w	r0, [ip]
  return true;
}
    8b44:	movs	r0, #1
  memcpy(csd, &m_csd, sizeof(csd_t));
    8b46:	str.w	r1, [ip, #4]
    8b4a:	str.w	r2, [ip, #8]
    8b4e:	str.w	r3, [ip, #12]
}
    8b52:	ldr.w	r4, [sp], #4
    8b56:	bx	lr
    8b58:	.word	0x2000619c

00008b5c <SdioCard::readOCR(unsigned long*)>:
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
    8b5c:	ldr	r3, [pc, #8]	; (8b68 <SdioCard::readOCR(unsigned long*)+0xc>)
  return true;
}
    8b5e:	movs	r0, #1
  *ocr = m_ocr;
    8b60:	ldr	r3, [r3, #0]
    8b62:	str	r3, [r1, #0]
}
    8b64:	bx	lr
    8b66:	nop
    8b68:	.word	0x200061ac

00008b6c <SdioCard::readSCR(scr_t*)>:
//------------------------------------------------------------------------------
bool SdioCard::readSCR(scr_t* scr) {
  memcpy(scr, &m_scr, sizeof(scr_t));
    8b6c:	ldr	r2, [pc, #12]	; (8b7c <SdioCard::readSCR(scr_t*)+0x10>)
bool SdioCard::readSCR(scr_t* scr) {
    8b6e:	mov	r3, r1
  memcpy(scr, &m_scr, sizeof(scr_t));
    8b70:	ldmia	r2!, {r0, r1}
    8b72:	str	r0, [r3, #0]
  return true;
}
    8b74:	movs	r0, #1
  memcpy(scr, &m_scr, sizeof(scr_t));
    8b76:	str	r1, [r3, #4]
}
    8b78:	bx	lr
    8b7a:	nop
    8b7c:	.word	0x200061b4

00008b80 <SdioCard::readSDS(sds_t*)>:
//------------------------------------------------------------------------------
bool SdioCard::readSDS(sds_t* sds) {
    8b80:	push	{r4, r5, lr}
  memcpy(sds, &m_sds, sizeof(sds_t));
    8b82:	ldr	r4, [pc, #44]	; (8bb0 <SdioCard::readSDS(sds_t*)+0x30>)
    8b84:	mov	ip, r1
    8b86:	add.w	r5, r4, #64	; 0x40
    8b8a:	mov	lr, r4
    8b8c:	add.w	ip, ip, #16
    8b90:	adds	r4, #16
    8b92:	ldmia.w	lr!, {r0, r1, r2, r3}
    8b96:	cmp	lr, r5
    8b98:	str.w	r0, [ip, #-16]
    8b9c:	str.w	r1, [ip, #-12]
    8ba0:	str.w	r2, [ip, #-8]
    8ba4:	str.w	r3, [ip, #-4]
    8ba8:	bne.n	8b8a <SdioCard::readSDS(sds_t*)+0xa>
  return true;
}
    8baa:	movs	r0, #1
    8bac:	pop	{r4, r5, pc}
    8bae:	nop
    8bb0:	.word	0x200061bc

00008bb4 <SdioCard::~SdioCard()>:
class SdioCard : public SdCardInterface {
    8bb4:	bx	lr
    8bb6:	nop

00008bb8 <SdioCard::~SdioCard()>:
    8bb8:	push	{r4, lr}
    8bba:	mov	r4, r0
    8bbc:	movs	r1, #12
    8bbe:	bl	d0ac <operator delete(void*, unsigned int)>
    8bc2:	mov	r0, r4
    8bc4:	pop	{r4, pc}
    8bc6:	nop

00008bc8 <SdioCard::type() const>:
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::type() const {
  return m_version2 ? m_highCapacity ? SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2
    8bc8:	ldr	r3, [pc, #16]	; (8bdc <SdioCard::type() const+0x14>)
    8bca:	ldrb	r3, [r3, #0]
    8bcc:	cbz	r3, 8bd8 <SdioCard::type() const+0x10>
    8bce:	ldr	r3, [pc, #16]	; (8be0 <SdioCard::type() const+0x18>)
    8bd0:	ldrb	r0, [r3, #0]
    8bd2:	adds	r0, #2
    8bd4:	uxtb	r0, r0
    8bd6:	bx	lr
    8bd8:	movs	r0, #1
                    : SD_CARD_TYPE_SD1;
}
    8bda:	bx	lr
    8bdc:	.word	0x20008159
    8be0:	.word	0x2000815a

00008be4 <SdioCard::sectorCount()>:
    uint8_t ver = csd[0] >> 6;
    8be4:	ldr	r2, [pc, #88]	; (8c40 <SdioCard::sectorCount()+0x5c>)
    8be6:	ldrb	r3, [r2, #0]
    if (ver == 0) {
    8be8:	lsrs	r3, r3, #6
    8bea:	beq.n	8c0a <SdioCard::sectorCount()+0x26>
    } else if (ver == 1) {
    8bec:	cmp	r3, #1
    8bee:	beq.n	8bf4 <SdioCard::sectorCount()+0x10>
      return 0;
    8bf0:	movs	r0, #0
uint32_t SdioCard::sectorCount() { return m_csd.capacity(); }
    8bf2:	bx	lr
      c_size = (uint32_t)(csd[7] & 63) << 16;
    8bf4:	ldrb	r3, [r2, #7]
      c_size |= csd[9];
    8bf6:	ldrh	r0, [r2, #8]
      c_size = (uint32_t)(csd[7] & 63) << 16;
    8bf8:	lsls	r3, r3, #16
      c_size |= csd[9];
    8bfa:	rev16	r0, r0
      c_size = (uint32_t)(csd[7] & 63) << 16;
    8bfc:	and.w	r3, r3, #4128768	; 0x3f0000
      c_size |= csd[9];
    8c00:	uxth	r0, r0
    8c02:	orrs	r0, r3
      return (c_size + 1) << 10;
    8c04:	adds	r0, #1
    8c06:	lsls	r0, r0, #10
    8c08:	bx	lr
      uint8_t c_size_mult = (csd[9] & 3) << 1 | csd[10] >> 7;
    8c0a:	ldrb	r3, [r2, #9]
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
    8c0c:	ldrb	r0, [r2, #8]
    8c0e:	ldrb.w	ip, [r2, #7]
      uint8_t c_size_mult = (csd[9] & 3) << 1 | csd[10] >> 7;
    8c12:	lsls	r3, r3, #1
      c_size = (uint32_t)(csd[6] & 3) << 10;
    8c14:	ldrb	r1, [r2, #6]
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
    8c16:	lsrs	r0, r0, #6
      uint8_t c_size_mult = (csd[9] & 3) << 1 | csd[10] >> 7;
    8c18:	and.w	r3, r3, #6
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
    8c1c:	orr.w	r0, r0, ip, lsl #2
      uint8_t c_size_mult = (csd[9] & 3) << 1 | csd[10] >> 7;
    8c20:	ldrb.w	ip, [r2, #10]
      c_size = (uint32_t)(csd[6] & 3) << 10;
    8c24:	lsls	r1, r1, #10
      uint8_t read_bl_len = csd[5] & 15;
    8c26:	ldrb	r2, [r2, #5]
      return (c_size + 1) << (c_size_mult + read_bl_len + 2 - 9);
    8c28:	orr.w	r3, r3, ip, lsr #7
      c_size = (uint32_t)(csd[6] & 3) << 10;
    8c2c:	and.w	r1, r1, #3072	; 0xc00
      return (c_size + 1) << (c_size_mult + read_bl_len + 2 - 9);
    8c30:	and.w	r2, r2, #15
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
    8c34:	orrs	r0, r1
      return (c_size + 1) << (c_size_mult + read_bl_len + 2 - 9);
    8c36:	add	r3, r2
    8c38:	adds	r0, #1
    8c3a:	subs	r3, #7
    8c3c:	lsls	r0, r3
    8c3e:	bx	lr
    8c40:	.word	0x2000619c

00008c44 <waitDmaStatus()>:
static bool waitDmaStatus() {
    8c44:	push	{r3, r4, r5, r6, r7, lr}
  m_busyFcn = fcn;
    8c46:	ldr	r3, [pc, #76]	; (8c94 <waitDmaStatus()+0x50>)
    8c48:	ldr	r7, [pc, #76]	; (8c98 <waitDmaStatus()+0x54>)
static bool isBusyDMA() { return m_dmaBusy; }
    8c4a:	ldr	r5, [pc, #80]	; (8c9c <waitDmaStatus()+0x58>)
  m_busyFcn = fcn;
    8c4c:	str	r3, [r7, #0]
  uint32_t m = micros();
    8c4e:	bl	b87c <micros>
static bool isBusyDMA() { return m_dmaBusy; }
    8c52:	ldrb	r3, [r5, #0]
  while (fcn()) {
    8c54:	cbz	r3, 8c76 <waitDmaStatus()+0x32>
    8c56:	mov	r4, r0
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8c58:	ldr	r6, [pc, #68]	; (8ca0 <waitDmaStatus()+0x5c>)
    8c5a:	b.n	8c64 <waitDmaStatus()+0x20>
    yield();
    8c5c:	bl	c0e4 <yield>
static bool isBusyDMA() { return m_dmaBusy; }
    8c60:	ldrb	r3, [r5, #0]
  while (fcn()) {
    8c62:	cbz	r3, 8c76 <waitDmaStatus()+0x32>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8c64:	bl	b87c <micros>
    8c68:	subs	r0, r0, r4
    8c6a:	cmp	r0, r6
    8c6c:	bls.n	8c5c <waitDmaStatus()+0x18>
      m_busyFcn = 0;
    8c6e:	movs	r3, #0
    return false;  // Caller will set errorCode.
    8c70:	mov	r0, r3
      m_busyFcn = 0;
    8c72:	str	r3, [r7, #0]
}
    8c74:	pop	{r3, r4, r5, r6, r7, pc}
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    8c76:	ldr	r3, [pc, #44]	; (8ca4 <waitDmaStatus()+0x60>)
  m_busyFcn = 0;
    8c78:	movs	r2, #0
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    8c7a:	ldr	r0, [r3, #0]
  m_busyFcn = 0;
    8c7c:	str	r2, [r7, #0]
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    8c7e:	ands.w	r0, r0, #2
    8c82:	beq.n	8c74 <waitDmaStatus()+0x30>
    8c84:	ldr	r2, [r3, #0]
    8c86:	ldr	r3, [pc, #32]	; (8ca8 <waitDmaStatus()+0x64>)
    8c88:	tst	r2, r3
    8c8a:	ite	eq
    8c8c:	moveq	r0, #1
    8c8e:	movne	r0, #0
}
    8c90:	pop	{r3, r4, r5, r6, r7, pc}
    8c92:	nop
    8c94:	.word	0x00008a25
    8c98:	.word	0x200063fc
    8c9c:	.word	0x2000815c
    8ca0:	.word	0x000f4240
    8ca4:	.word	0x20006400
    8ca8:	.word	0x117f0000

00008cac <waitTransferComplete() [clone .part.0]>:
static bool waitTransferComplete() {
    8cac:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t m = micros();
    8cb0:	bl	b87c <micros>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    8cb4:	ldr	r6, [pc, #92]	; (8d14 <waitTransferComplete() [clone .part.0]+0x68>)
    8cb6:	ldr	r5, [pc, #96]	; (8d18 <waitTransferComplete() [clone .part.0]+0x6c>)
  uint32_t m = micros();
    8cb8:	mov	r7, r0
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8cba:	ldr.w	r8, [pc, #116]	; 8d30 <waitTransferComplete() [clone .part.0]+0x84>
  while (fcn()) {
    8cbe:	b.n	8cca <waitTransferComplete() [clone .part.0]+0x1e>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8cc0:	bl	b87c <micros>
    8cc4:	subs	r0, r0, r7
    8cc6:	cmp	r0, r8
    8cc8:	bhi.n	8d02 <waitTransferComplete() [clone .part.0]+0x56>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    8cca:	ldr	r4, [r6, #48]	; 0x30
  while (fcn()) {
    8ccc:	ands	r4, r5
    8cce:	beq.n	8cc0 <waitTransferComplete() [clone .part.0]+0x14>
  m_transferActive = false;
    8cd0:	ldr	r2, [pc, #72]	; (8d1c <waitTransferComplete() [clone .part.0]+0x70>)
    8cd2:	movs	r1, #0
  m_irqstat = SDHC_IRQSTAT;
    8cd4:	ldr	r3, [pc, #72]	; (8d20 <waitTransferComplete() [clone .part.0]+0x74>)
  m_transferActive = false;
    8cd6:	strb	r1, [r2, #0]
  m_irqstat = SDHC_IRQSTAT;
    8cd8:	ldr	r2, [r6, #48]	; 0x30
    8cda:	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    8cdc:	ldr	r1, [r3, #0]
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    8cde:	ldr	r2, [pc, #68]	; (8d24 <waitTransferComplete() [clone .part.0]+0x78>)
  SDHC_IRQSTAT = m_irqstat;
    8ce0:	str	r1, [r6, #48]	; 0x30
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    8ce2:	ldr	r3, [r3, #0]
    8ce4:	tst	r3, r2
    8ce6:	beq.n	8cfc <waitTransferComplete() [clone .part.0]+0x50>
  m_errorCode = code;
    8ce8:	ldr	r1, [pc, #60]	; (8d28 <waitTransferComplete() [clone .part.0]+0x7c>)
    8cea:	movs	r4, #32
  m_errorLine = line;
    8cec:	ldr	r3, [pc, #60]	; (8d2c <waitTransferComplete() [clone .part.0]+0x80>)
    8cee:	movw	r2, #682	; 0x2aa
    return sdError(SD_CARD_ERROR_TRANSFER_COMPLETE);
    8cf2:	movs	r0, #0
  m_errorCode = code;
    8cf4:	strb	r4, [r1, #0]
  m_errorLine = line;
    8cf6:	str	r2, [r3, #0]
}
    8cf8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return true;
    8cfc:	movs	r0, #1
}
    8cfe:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_transferActive = false;
    8d02:	ldr	r2, [pc, #24]	; (8d1c <waitTransferComplete() [clone .part.0]+0x70>)
  m_irqstat = SDHC_IRQSTAT;
    8d04:	ldr	r3, [pc, #24]	; (8d20 <waitTransferComplete() [clone .part.0]+0x74>)
  m_transferActive = false;
    8d06:	strb	r4, [r2, #0]
  m_irqstat = SDHC_IRQSTAT;
    8d08:	ldr	r2, [r6, #48]	; 0x30
    8d0a:	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    8d0c:	ldr	r3, [r3, #0]
    8d0e:	str	r3, [r6, #48]	; 0x30
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    8d10:	b.n	8ce8 <waitTransferComplete() [clone .part.0]+0x3c>
    8d12:	nop
    8d14:	.word	0x402c0000
    8d18:	.word	0x117f0002
    8d1c:	.word	0x2000815b
    8d20:	.word	0x20006400
    8d24:	.word	0x117f0000
    8d28:	.word	0x20001a56
    8d2c:	.word	0x20005c88
    8d30:	.word	0x000f4240

00008d34 <SdioCard::writeData(unsigned char const*)>:
//------------------------------------------------------------------------------
bool SdioCard::writeData(const uint8_t* src) {
    8d34:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (!m_transferActive) {
    8d38:	ldr	r4, [pc, #152]	; (8dd4 <SdioCard::writeData(unsigned char const*)+0xa0>)
bool SdioCard::writeData(const uint8_t* src) {
    8d3a:	mov	r7, r1
  if (!m_transferActive) {
    8d3c:	ldrb	r3, [r4, #0]
    8d3e:	cmp	r3, #0
    8d40:	bne.n	8db4 <SdioCard::writeData(unsigned char const*)+0x80>
  DBG_IRQSTAT();
  if (!waitTransferComplete()) {
    return false;
  }
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    8d42:	ldr	r3, [pc, #148]	; (8dd8 <SdioCard::writeData(unsigned char const*)+0xa4>)
    8d44:	ldr	r2, [r3, #36]	; 0x24
    8d46:	lsls	r2, r2, #23
    8d48:	bpl.n	8da2 <SdioCard::writeData(unsigned char const*)+0x6e>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    8d4a:	ldr	r5, [pc, #140]	; (8dd8 <SdioCard::writeData(unsigned char const*)+0xa4>)
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8d4c:	ldr.w	r8, [pc, #148]	; 8de4 <SdioCard::writeData(unsigned char const*)+0xb0>
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    8d50:	ldr	r3, [r5, #40]	; 0x28
    8d52:	orr.w	r3, r3, #65536	; 0x10000
    8d56:	str	r3, [r5, #40]	; 0x28
  uint32_t m = micros();
    8d58:	bl	b87c <micros>
    8d5c:	mov	r6, r0
  while (fcn()) {
    8d5e:	b.n	8d6a <SdioCard::writeData(unsigned char const*)+0x36>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8d60:	bl	b87c <micros>
    8d64:	subs	r0, r0, r6
    8d66:	cmp	r0, r8
    8d68:	bhi.n	8dc0 <SdioCard::writeData(unsigned char const*)+0x8c>
static bool isBusyFifoWrite() { return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN); }
    8d6a:	ldr	r3, [r5, #36]	; 0x24
  while (fcn()) {
    8d6c:	ands.w	r9, r3, #1024	; 0x400
    8d70:	beq.n	8d60 <SdioCard::writeData(unsigned char const*)+0x2c>
    8d72:	add.w	ip, r7, #60	; 0x3c
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0; iw < 512 / (4 * FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    8d76:	ldr	r0, [pc, #96]	; (8dd8 <SdioCard::writeData(unsigned char const*)+0xa4>)
    8d78:	add.w	r7, r7, #572	; 0x23c
    8d7c:	ldr	r3, [r0, #36]	; 0x24
    8d7e:	lsls	r3, r3, #21
    8d80:	bpl.n	8d7c <SdioCard::writeData(unsigned char const*)+0x48>
    8d82:	sub.w	r3, ip, #64	; 0x40
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      SDHC_DATPORT = p32[i];
    8d86:	ldr.w	r2, [r3, #4]!
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    8d8a:	cmp	ip, r3
      SDHC_DATPORT = p32[i];
    8d8c:	str	r2, [r0, #32]
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    8d8e:	bne.n	8d86 <SdioCard::writeData(unsigned char const*)+0x52>
  for (uint32_t iw = 0; iw < 512 / (4 * FIFO_WML); iw++) {
    8d90:	add.w	ip, ip, #64	; 0x40
    8d94:	cmp	ip, r7
    8d96:	bne.n	8d7c <SdioCard::writeData(unsigned char const*)+0x48>
    }
    p32 += FIFO_WML;
  }
  m_transferActive = true;
    8d98:	movs	r3, #1
  return true;
    8d9a:	mov	r0, r3
  m_transferActive = true;
    8d9c:	strb	r3, [r4, #0]
}
    8d9e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    8da2:	ldr	r2, [r3, #40]	; 0x28
    8da4:	bic.w	r2, r2, #65536	; 0x10000
    8da8:	str	r2, [r3, #40]	; 0x28
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    8daa:	ldr	r2, [r3, #40]	; 0x28
    8dac:	orr.w	r2, r2, #131072	; 0x20000
    8db0:	str	r2, [r3, #40]	; 0x28
    8db2:	b.n	8d4a <SdioCard::writeData(unsigned char const*)+0x16>
    8db4:	bl	8cac <waitTransferComplete() [clone .part.0]>
  if (!waitTransferComplete()) {
    8db8:	cmp	r0, #0
    8dba:	bne.n	8d42 <SdioCard::writeData(unsigned char const*)+0xe>
}
    8dbc:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  m_errorCode = code;
    8dc0:	ldr	r1, [pc, #24]	; (8ddc <SdioCard::writeData(unsigned char const*)+0xa8>)
    8dc2:	movs	r4, #34	; 0x22
  m_errorLine = line;
    8dc4:	ldr	r3, [pc, #24]	; (8de0 <SdioCard::writeData(unsigned char const*)+0xac>)
    8dc6:	movw	r2, #1055	; 0x41f
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
    8dca:	mov	r0, r9
  m_errorCode = code;
    8dcc:	strb	r4, [r1, #0]
  m_errorLine = line;
    8dce:	str	r2, [r3, #0]
}
    8dd0:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8dd4:	.word	0x2000815b
    8dd8:	.word	0x402c0000
    8ddc:	.word	0x20001a56
    8de0:	.word	0x20005c88
    8de4:	.word	0x000f4240

00008de8 <cardCommand(unsigned long, unsigned long)>:
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    8de8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8dec:	mov	r7, r0
    8dee:	mov	r8, r1
static bool isBusyCommandInhibit() { return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB; }
    8df0:	ldr	r4, [pc, #124]	; (8e70 <cardCommand(unsigned long, unsigned long)+0x88>)
  uint32_t m = micros();
    8df2:	bl	b87c <micros>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8df6:	ldr	r6, [pc, #124]	; (8e74 <cardCommand(unsigned long, unsigned long)+0x8c>)
  uint32_t m = micros();
    8df8:	mov	r5, r0
  while (fcn()) {
    8dfa:	b.n	8e06 <cardCommand(unsigned long, unsigned long)+0x1e>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8dfc:	bl	b87c <micros>
    8e00:	subs	r3, r0, r5
    8e02:	cmp	r3, r6
    8e04:	bhi.n	8e50 <cardCommand(unsigned long, unsigned long)+0x68>
static bool isBusyCommandInhibit() { return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB; }
    8e06:	ldr	r3, [r4, #36]	; 0x24
  while (fcn()) {
    8e08:	lsls	r1, r3, #31
    8e0a:	bmi.n	8dfc <cardCommand(unsigned long, unsigned long)+0x14>
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
    8e0c:	lsls	r3, r7, #10
  SDHC_CMDARG = arg;
    8e0e:	str.w	r8, [r4, #8]
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
    8e12:	bmi.n	8e56 <cardCommand(unsigned long, unsigned long)+0x6e>
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
    8e14:	bic.w	r3, r7, #255	; 0xff
  SDHC_XFERTYP = xfertyp;
    8e18:	ldr	r4, [pc, #84]	; (8e70 <cardCommand(unsigned long, unsigned long)+0x88>)
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
    8e1a:	ldr	r6, [pc, #92]	; (8e78 <cardCommand(unsigned long, unsigned long)+0x90>)
  SDHC_XFERTYP = xfertyp;
    8e1c:	str	r3, [r4, #12]
  uint32_t m = micros();
    8e1e:	bl	b87c <micros>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8e22:	ldr	r7, [pc, #80]	; (8e74 <cardCommand(unsigned long, unsigned long)+0x8c>)
  uint32_t m = micros();
    8e24:	mov	r5, r0
  while (fcn()) {
    8e26:	b.n	8e32 <cardCommand(unsigned long, unsigned long)+0x4a>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8e28:	bl	b87c <micros>
    8e2c:	subs	r0, r0, r5
    8e2e:	cmp	r0, r7
    8e30:	bhi.n	8e50 <cardCommand(unsigned long, unsigned long)+0x68>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
    8e32:	ldr	r3, [r4, #48]	; 0x30
  while (fcn()) {
    8e34:	tst	r3, r6
    8e36:	beq.n	8e28 <cardCommand(unsigned long, unsigned long)+0x40>
  m_irqstat = SDHC_IRQSTAT;
    8e38:	ldr	r2, [r4, #48]	; 0x30
    8e3a:	ldr	r3, [pc, #64]	; (8e7c <cardCommand(unsigned long, unsigned long)+0x94>)
    8e3c:	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    8e3e:	ldr	r2, [r3, #0]
    8e40:	str	r2, [r4, #48]	; 0x30
  return (m_irqstat & SDHC_IRQSTAT_CC) && !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
    8e42:	ldr	r2, [r3, #0]
    8e44:	lsls	r2, r2, #31
    8e46:	bpl.n	8e50 <cardCommand(unsigned long, unsigned long)+0x68>
    8e48:	ldr	r3, [r3, #0]
    8e4a:	tst.w	r3, #983040	; 0xf0000
    8e4e:	beq.n	8e68 <cardCommand(unsigned long, unsigned long)+0x80>
    8e50:	movs	r0, #0
}
    8e52:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    8e56:	ldr	r2, [r4, #72]	; 0x48
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
    8e58:	uxtb	r3, r7
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    8e5a:	bic.w	r2, r2, #255	; 0xff
    8e5e:	str	r2, [r4, #72]	; 0x48
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
    8e60:	ldr	r2, [r4, #72]	; 0x48
    8e62:	orrs	r3, r2
    8e64:	str	r3, [r4, #72]	; 0x48
    8e66:	b.n	8e14 <cardCommand(unsigned long, unsigned long)+0x2c>
  return (m_irqstat & SDHC_IRQSTAT_CC) && !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
    8e68:	movs	r0, #1
}
    8e6a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8e6e:	nop
    8e70:	.word	0x402c0000
    8e74:	.word	0x000f4240
    8e78:	.word	0x000f0001
    8e7c:	.word	0x20006400

00008e80 <readReg16(unsigned long, void*)>:
  if (!cardCommand(xfertyp, m_rca)) {
    8e80:	ldr	r3, [pc, #84]	; (8ed8 <readReg16(unsigned long, void*)+0x58>)
static bool readReg16(uint32_t xfertyp, void* data) {
    8e82:	push	{r4, r5, lr}
    8e84:	mov	r5, r1
    8e86:	sub	sp, #20
  if (!cardCommand(xfertyp, m_rca)) {
    8e88:	ldr	r1, [r3, #0]
    8e8a:	bl	8de8 <cardCommand(unsigned long, unsigned long)>
    8e8e:	cbz	r0, 8ed4 <readReg16(unsigned long, void*)+0x54>
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
    8e90:	ldr	r3, [pc, #72]	; (8edc <readReg16(unsigned long, void*)+0x5c>)
    8e92:	add.w	r4, r5, #15
    8e96:	ldr	r2, [r3, #16]
    8e98:	str	r2, [sp, #0]
    8e9a:	ldr	r1, [r3, #20]
    8e9c:	str	r1, [sp, #4]
    8e9e:	ldr	r1, [r3, #24]
    8ea0:	str	r1, [sp, #8]
    8ea2:	ldr	r3, [r3, #28]
    8ea4:	str	r3, [sp, #12]
  for (int i = 0; i < 15; i++) {
    8ea6:	movs	r3, #0
    8ea8:	b.n	8eae <readReg16(unsigned long, void*)+0x2e>
    d[14 - i] = sr[i / 4] >> 8 * (i % 4);
    8eaa:	ldr.w	r2, [lr, #-16]
    8eae:	and.w	ip, r3, #3
  for (int i = 0; i < 15; i++) {
    8eb2:	adds	r3, #1
    d[14 - i] = sr[i / 4] >> 8 * (i % 4);
    8eb4:	mov.w	ip, ip, lsl #3
    8eb8:	bic.w	lr, r3, #3
  for (int i = 0; i < 15; i++) {
    8ebc:	cmp	r3, #15
    d[14 - i] = sr[i / 4] >> 8 * (i % 4);
    8ebe:	lsr.w	r2, r2, ip
    8ec2:	add.w	r1, lr, #16
    8ec6:	strb.w	r2, [r4, #-1]!
    8eca:	add.w	lr, sp, r1
  for (int i = 0; i < 15; i++) {
    8ece:	bne.n	8eaa <readReg16(unsigned long, void*)+0x2a>
  d[15] = 0;
    8ed0:	movs	r3, #0
    8ed2:	strb	r3, [r5, #15]
}
    8ed4:	add	sp, #20
    8ed6:	pop	{r4, r5, pc}
    8ed8:	.word	0x200061b0
    8edc:	.word	0x402c0000

00008ee0 <SdioCard::isBusy()>:
bool SdioCard::isBusy() {
    8ee0:	push	{r4, lr}
  bool useDma() { return m_options & DMA_SDIO; }
    8ee2:	ldrb	r3, [r0, #8]
  if (m_sdioConfig.useDma()) {
    8ee4:	lsls	r3, r3, #31
    8ee6:	bpl.n	8ef4 <SdioCard::isBusy()+0x14>
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    8ee8:	ldr	r3, [pc, #84]	; (8f40 <SdioCard::isBusy()+0x60>)
    8eea:	ldr	r3, [r3, #0]
    8eec:	cbz	r3, 8f1c <SdioCard::isBusy()+0x3c>
}
    8eee:	ldmia.w	sp!, {r4, lr}
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    8ef2:	bx	r3
    if (m_transferActive) {
    8ef4:	ldr	r3, [pc, #76]	; (8f44 <SdioCard::isBusy()+0x64>)
    8ef6:	ldrb	r3, [r3, #0]
    8ef8:	cbnz	r3, 8f0a <SdioCard::isBusy()+0x2a>
    return SDHC_PRSSTAT & (1 << 24) ? false : true;
    8efa:	ldr	r3, [pc, #76]	; (8f48 <SdioCard::isBusy()+0x68>)
    8efc:	ldr	r4, [r3, #36]	; 0x24
    8efe:	eor.w	r4, r4, #16777216	; 0x1000000
    8f02:	ubfx	r4, r4, #24, #1
}
    8f06:	mov	r0, r4
    8f08:	pop	{r4, pc}
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    8f0a:	ldr	r3, [pc, #60]	; (8f48 <SdioCard::isBusy()+0x68>)
    8f0c:	ldr	r4, [pc, #60]	; (8f4c <SdioCard::isBusy()+0x6c>)
    8f0e:	ldr	r3, [r3, #48]	; 0x30
    8f10:	ands	r4, r3
      if (isBusyTransferComplete()) {
    8f12:	clz	r4, r4
    8f16:	lsrs	r4, r4, #5
}
    8f18:	mov	r0, r4
    8f1a:	pop	{r4, pc}
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    8f1c:	ldr	r3, [pc, #48]	; (8f50 <SdioCard::isBusy()+0x70>)
    8f1e:	ldrb	r4, [r3, #0]
    8f20:	cmp	r4, #0
    8f22:	beq.n	8f06 <SdioCard::isBusy()+0x26>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    8f24:	ldr	r3, [pc, #44]	; (8f54 <SdioCard::isBusy()+0x74>)
    8f26:	ldr	r0, [pc, #48]	; (8f58 <SdioCard::isBusy()+0x78>)
    8f28:	ldr	r1, [r3, #0]
    8f2a:	bl	8de8 <cardCommand(unsigned long, unsigned long)>
    8f2e:	cmp	r0, #0
    8f30:	beq.n	8f06 <SdioCard::isBusy()+0x26>
    8f32:	ldr	r3, [pc, #20]	; (8f48 <SdioCard::isBusy()+0x68>)
    8f34:	ldr	r4, [r3, #16]
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    8f36:	eor.w	r4, r4, #256	; 0x100
    8f3a:	ubfx	r4, r4, #8, #1
    8f3e:	b.n	8f06 <SdioCard::isBusy()+0x26>
    8f40:	.word	0x200063fc
    8f44:	.word	0x2000815b
    8f48:	.word	0x402c0000
    8f4c:	.word	0x117f0002
    8f50:	.word	0x20008158
    8f54:	.word	0x200061b0
    8f58:	.word	0x0d1a0000

00008f5c <SdioCard::status()>:
uint32_t SdioCard::status() { return statusCMD13(); }
    8f5c:	push	{r3, lr}
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    8f5e:	ldr	r3, [pc, #16]	; (8f70 <SdioCard::status()+0x14>)
    8f60:	ldr	r0, [pc, #16]	; (8f74 <SdioCard::status()+0x18>)
    8f62:	ldr	r1, [r3, #0]
    8f64:	bl	8de8 <cardCommand(unsigned long, unsigned long)>
    8f68:	cbz	r0, 8f6e <SdioCard::status()+0x12>
    8f6a:	ldr	r3, [pc, #12]	; (8f78 <SdioCard::status()+0x1c>)
    8f6c:	ldr	r0, [r3, #16]
uint32_t SdioCard::status() { return statusCMD13(); }
    8f6e:	pop	{r3, pc}
    8f70:	.word	0x200061b0
    8f74:	.word	0x0d1a0000
    8f78:	.word	0x402c0000

00008f7c <isBusyCMD13()>:
static bool isBusyCMD13() {
    8f7c:	push	{r3, lr}
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    8f7e:	ldr	r3, [pc, #28]	; (8f9c <isBusyCMD13()+0x20>)
    8f80:	ldr	r0, [pc, #28]	; (8fa0 <isBusyCMD13()+0x24>)
    8f82:	ldr	r1, [r3, #0]
    8f84:	bl	8de8 <cardCommand(unsigned long, unsigned long)>
    8f88:	cbz	r0, 8f98 <isBusyCMD13()+0x1c>
    8f8a:	ldr	r3, [pc, #24]	; (8fa4 <isBusyCMD13()+0x28>)
    8f8c:	ldr	r0, [r3, #16]
  return !(statusCMD13() & CARD_STATUS_READY_FOR_DATA);
    8f8e:	eor.w	r0, r0, #256	; 0x100
    8f92:	ubfx	r0, r0, #8, #1
}
    8f96:	pop	{r3, pc}
    8f98:	movs	r0, #1
    8f9a:	pop	{r3, pc}
    8f9c:	.word	0x200061b0
    8fa0:	.word	0x0d1a0000
    8fa4:	.word	0x402c0000

00008fa8 <SdioCard::writeStart(unsigned long)>:
    }
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
    8fa8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  m_busyFcn = fcn;
    8fac:	ldr	r3, [pc, #164]	; (9054 <SdioCard::writeStart(unsigned long)+0xac>)
bool SdioCard::writeStart(uint32_t sector) {
    8fae:	mov	r9, r1
  m_busyFcn = fcn;
    8fb0:	ldr.w	sl, [pc, #192]	; 9074 <SdioCard::writeStart(unsigned long)+0xcc>
    8fb4:	ldr	r6, [pc, #160]	; (9058 <SdioCard::writeStart(unsigned long)+0xb0>)
    8fb6:	str.w	r3, [sl]
  uint32_t m = micros();
    8fba:	bl	b87c <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    8fbe:	ldr	r5, [pc, #156]	; (905c <SdioCard::writeStart(unsigned long)+0xb4>)
  uint32_t m = micros();
    8fc0:	mov	r4, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    8fc2:	ldr.w	r8, [pc, #180]	; 9078 <SdioCard::writeStart(unsigned long)+0xd0>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8fc6:	ldr	r7, [pc, #152]	; (9060 <SdioCard::writeStart(unsigned long)+0xb8>)
  while (fcn()) {
    8fc8:	b.n	8fd8 <SdioCard::writeStart(unsigned long)+0x30>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8fca:	bl	b87c <micros>
    8fce:	subs	r0, r0, r4
    8fd0:	cmp	r0, r7
    8fd2:	bhi.n	9028 <SdioCard::writeStart(unsigned long)+0x80>
    yield();
    8fd4:	bl	c0e4 <yield>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    8fd8:	ldr	r1, [r6, #0]
    8fda:	mov	r0, r5
    8fdc:	bl	8de8 <cardCommand(unsigned long, unsigned long)>
    8fe0:	cmp	r0, #0
    8fe2:	beq.n	8fca <SdioCard::writeStart(unsigned long)+0x22>
    8fe4:	ldr.w	r3, [r8, #16]
  while (fcn()) {
    8fe8:	lsls	r3, r3, #23
    8fea:	bpl.n	8fca <SdioCard::writeStart(unsigned long)+0x22>
  m_busyFcn = 0;
    8fec:	movs	r3, #0
  }
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;

#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    8fee:	mov.w	r2, #512	; 0x200
  m_busyFcn = 0;
    8ff2:	str.w	r3, [sl]
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    8ff6:	ldr.w	r3, [r8, #40]	; 0x28
    8ffa:	bic.w	r3, r3, #65536	; 0x10000
    8ffe:	str.w	r3, [r8, #40]	; 0x28
#else   // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(MAX_BLKCNT) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512 * sector)) {
    9002:	ldr	r3, [pc, #96]	; (9064 <SdioCard::writeStart(unsigned long)+0xbc>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    9004:	str.w	r2, [r8, #4]
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512 * sector)) {
    9008:	ldrb	r3, [r3, #0]
    900a:	cbz	r3, 9040 <SdioCard::writeStart(unsigned long)+0x98>
    900c:	mov	r1, r9
    900e:	ldr	r0, [pc, #88]	; (9068 <SdioCard::writeStart(unsigned long)+0xc0>)
    9010:	bl	8de8 <cardCommand(unsigned long, unsigned long)>
    9014:	cbnz	r0, 9024 <SdioCard::writeStart(unsigned long)+0x7c>
  m_errorCode = code;
    9016:	ldr	r1, [pc, #84]	; (906c <SdioCard::writeStart(unsigned long)+0xc4>)
    9018:	movs	r4, #14
  m_errorLine = line;
    901a:	ldr	r3, [pc, #84]	; (9070 <SdioCard::writeStart(unsigned long)+0xc8>)
    901c:	movw	r2, #1150	; 0x47e
  m_errorCode = code;
    9020:	strb	r4, [r1, #0]
  m_errorLine = line;
    9022:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD25);
  }
  return true;
}
    9024:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_errorCode = code;
    9028:	ldr	r2, [pc, #64]	; (906c <SdioCard::writeStart(unsigned long)+0xc4>)
    902a:	movs	r1, #10
      m_busyFcn = 0;
    902c:	movs	r0, #0
  m_errorLine = line;
    902e:	ldr	r3, [pc, #64]	; (9070 <SdioCard::writeStart(unsigned long)+0xc8>)
  m_errorCode = code;
    9030:	strb	r1, [r2, #0]
  m_errorLine = line;
    9032:	movw	r2, #1138	; 0x472
      m_busyFcn = 0;
    9036:	str.w	r0, [sl]
  m_errorLine = line;
    903a:	str	r2, [r3, #0]
}
    903c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512 * sector)) {
    9040:	mov.w	r9, r9, lsl #9
    9044:	ldr	r0, [pc, #32]	; (9068 <SdioCard::writeStart(unsigned long)+0xc0>)
    9046:	mov	r1, r9
    9048:	bl	8de8 <cardCommand(unsigned long, unsigned long)>
    904c:	cmp	r0, #0
    904e:	bne.n	9024 <SdioCard::writeStart(unsigned long)+0x7c>
    9050:	b.n	9016 <SdioCard::writeStart(unsigned long)+0x6e>
    9052:	nop
    9054:	.word	0x00008f7d
    9058:	.word	0x200061b0
    905c:	.word	0x0d1a0000
    9060:	.word	0x000f4240
    9064:	.word	0x2000815a
    9068:	.word	0x193a0020
    906c:	.word	0x20001a56
    9070:	.word	0x20005c88
    9074:	.word	0x200063fc
    9078:	.word	0x402c0000

0000907c <SdioCard::cardCMD6(unsigned long, unsigned char*)>:
bool SdioCard::cardCMD6(uint32_t arg, uint8_t* status) {
    907c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9080:	mov	sl, r1
    9082:	mov	r9, r2
    9084:	ldr	r6, [pc, #144]	; (9118 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x9c>)
  uint32_t m = micros();
    9086:	bl	b87c <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    908a:	ldr	r5, [pc, #144]	; (911c <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xa0>)
  uint32_t m = micros();
    908c:	mov	r4, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    908e:	ldr.w	r8, [pc, #176]	; 9140 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xc4>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    9092:	ldr	r7, [pc, #140]	; (9120 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xa4>)
  while (fcn()) {
    9094:	b.n	90a0 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x24>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    9096:	bl	b87c <micros>
    909a:	subs	r0, r0, r4
    909c:	cmp	r0, r7
    909e:	bhi.n	90ec <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x70>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    90a0:	ldr	r1, [r6, #0]
    90a2:	mov	r0, r5
    90a4:	bl	8de8 <cardCommand(unsigned long, unsigned long)>
    90a8:	cmp	r0, #0
    90aa:	beq.n	9096 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x1a>
    90ac:	ldr.w	r3, [r8, #16]
  while (fcn()) {
    90b0:	lsls	r3, r3, #23
    90b2:	bpl.n	9096 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x1a>
  m_dmaBusy = true;
    90b4:	ldr	r3, [pc, #108]	; (9124 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xa8>)
    90b6:	movs	r2, #1
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    90b8:	mov	r1, sl
    90ba:	ldr	r0, [pc, #108]	; (9128 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xac>)
  m_dmaBusy = true;
    90bc:	strb	r2, [r3, #0]
  m_irqstat = 0;
    90be:	movs	r2, #0
    90c0:	ldr	r3, [pc, #104]	; (912c <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xb0>)
    90c2:	str	r2, [r3, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    90c4:	ldr	r2, [pc, #104]	; (9130 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xb4>)
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    90c6:	ldr	r3, [pc, #108]	; (9134 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xb8>)
  SDHC_DSADDR = (uint32_t)status;
    90c8:	str.w	r9, [r8]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    90cc:	str.w	r2, [r8, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    90d0:	str.w	r3, [r8, #56]	; 0x38
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    90d4:	bl	8de8 <cardCommand(unsigned long, unsigned long)>
    90d8:	cbnz	r0, 9100 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x84>
  m_errorCode = code;
    90da:	ldr	r1, [pc, #92]	; (9138 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xbc>)
    90dc:	movs	r4, #4
  m_errorLine = line;
    90de:	ldr	r3, [pc, #92]	; (913c <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xc0>)
    90e0:	movw	r2, #795	; 0x31b
  m_errorCode = code;
    90e4:	strb	r4, [r1, #0]
  m_errorLine = line;
    90e6:	str	r2, [r3, #0]
}
    90e8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_errorCode = code;
    90ec:	ldr	r1, [pc, #72]	; (9138 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xbc>)
    90ee:	movs	r4, #10
  m_errorLine = line;
    90f0:	ldr	r3, [pc, #72]	; (913c <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xc0>)
    90f2:	mov.w	r2, #788	; 0x314
    return sdError(SD_CARD_ERROR_CMD13);
    90f6:	movs	r0, #0
  m_errorCode = code;
    90f8:	strb	r4, [r1, #0]
  m_errorLine = line;
    90fa:	str	r2, [r3, #0]
}
    90fc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (!waitDmaStatus()) {
    9100:	bl	8c44 <waitDmaStatus()>
    9104:	cmp	r0, #0
    9106:	bne.n	90fc <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x80>
  m_errorCode = code;
    9108:	ldr	r1, [pc, #44]	; (9138 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xbc>)
    910a:	movs	r4, #38	; 0x26
  m_errorLine = line;
    910c:	ldr	r3, [pc, #44]	; (913c <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xc0>)
    910e:	movw	r2, #798	; 0x31e
  m_errorCode = code;
    9112:	strb	r4, [r1, #0]
  m_errorLine = line;
    9114:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_DMA);
    9116:	b.n	90fc <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x80>
    9118:	.word	0x200061b0
    911c:	.word	0x0d1a0000
    9120:	.word	0x000f4240
    9124:	.word	0x2000815c
    9128:	.word	0x063a0011
    912c:	.word	0x20006400
    9130:	.word	0x00010040
    9134:	.word	0x117f0002
    9138:	.word	0x20001a56
    913c:	.word	0x20005c88
    9140:	.word	0x402c0000

00009144 <SdioCard::readStop()>:
bool SdioCard::readStop() { return transferStop(); }
    9144:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    9148:	ldr	r4, [pc, #148]	; (91e0 <SdioCard::readStop()+0x9c>)
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    914a:	movs	r1, #0
    914c:	ldr	r0, [pc, #148]	; (91e4 <SdioCard::readStop()+0xa0>)
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    914e:	ldr	r3, [r4, #40]	; 0x28
    9150:	bic.w	r3, r3, #65536	; 0x10000
    9154:	str	r3, [r4, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    9156:	bl	8de8 <cardCommand(unsigned long, unsigned long)>
    915a:	mov	r5, r0
    915c:	cbnz	r0, 9172 <SdioCard::readStop()+0x2e>
  m_errorCode = code;
    915e:	ldr	r1, [pc, #136]	; (91e8 <SdioCard::readStop()+0xa4>)
    9160:	movs	r0, #9
  m_errorLine = line;
    9162:	ldr	r3, [pc, #136]	; (91ec <SdioCard::readStop()+0xa8>)
    9164:	movw	r2, #621	; 0x26d
  m_errorCode = code;
    9168:	strb	r0, [r1, #0]
  m_errorLine = line;
    916a:	str	r2, [r3, #0]
bool SdioCard::readStop() { return transferStop(); }
    916c:	mov	r0, r5
    916e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_busyFcn = fcn;
    9172:	ldr	r3, [pc, #124]	; (91f0 <SdioCard::readStop()+0xac>)
    9174:	ldr.w	r8, [pc, #128]	; 91f8 <SdioCard::readStop()+0xb4>
    9178:	str.w	r3, [r8]
  uint32_t m = micros();
    917c:	bl	b87c <micros>
static bool isBusyDat() { return SDHC_PRSSTAT & (1 << 24) ? false : true; }
    9180:	ldr	r3, [r4, #36]	; 0x24
  uint32_t m = micros();
    9182:	mov	r6, r0
  while (fcn()) {
    9184:	lsls	r0, r3, #7
    9186:	bmi.n	91ba <SdioCard::readStop()+0x76>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    9188:	ldr	r7, [pc, #104]	; (91f4 <SdioCard::readStop()+0xb0>)
    918a:	b.n	9196 <SdioCard::readStop()+0x52>
    yield();
    918c:	bl	c0e4 <yield>
static bool isBusyDat() { return SDHC_PRSSTAT & (1 << 24) ? false : true; }
    9190:	ldr	r3, [r4, #36]	; 0x24
  while (fcn()) {
    9192:	lsls	r1, r3, #7
    9194:	bmi.n	91ba <SdioCard::readStop()+0x76>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    9196:	bl	b87c <micros>
    919a:	subs	r3, r0, r6
    919c:	cmp	r3, r7
    919e:	bls.n	918c <SdioCard::readStop()+0x48>
  m_errorCode = code;
    91a0:	ldr	r2, [pc, #68]	; (91e8 <SdioCard::readStop()+0xa4>)
    91a2:	movs	r1, #10
      m_busyFcn = 0;
    91a4:	movs	r5, #0
  m_errorLine = line;
    91a6:	ldr	r3, [pc, #68]	; (91ec <SdioCard::readStop()+0xa8>)
  m_errorCode = code;
    91a8:	strb	r1, [r2, #0]
  m_errorLine = line;
    91aa:	mov.w	r2, #624	; 0x270
bool SdioCard::readStop() { return transferStop(); }
    91ae:	mov	r0, r5
      m_busyFcn = 0;
    91b0:	str.w	r5, [r8]
  m_errorLine = line;
    91b4:	str	r2, [r3, #0]
bool SdioCard::readStop() { return transferStop(); }
    91b6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_busyFcn = 0;
    91ba:	movs	r2, #0
  if (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB) {
    91bc:	ldr	r3, [pc, #32]	; (91e0 <SdioCard::readStop()+0x9c>)
  m_busyFcn = 0;
    91be:	str.w	r2, [r8]
  if (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB) {
    91c2:	ldr	r2, [r3, #36]	; 0x24
    91c4:	lsls	r2, r2, #30
    91c6:	bpl.n	916c <SdioCard::readStop()+0x28>
    uint32_t irqsststen = SDHC_IRQSTATEN;
    91c8:	ldr	r0, [r3, #52]	; 0x34
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    91ca:	ldr	r2, [r3, #40]	; 0x28
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    91cc:	ldr	r1, [r3, #44]	; 0x2c
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    91ce:	bic.w	r2, r2, #65536	; 0x10000
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    91d2:	orr.w	r1, r1, #67108864	; 0x4000000
    91d6:	str	r1, [r3, #44]	; 0x2c
    SDHC_IRQSTATEN = irqsststen;
    91d8:	str	r0, [r3, #52]	; 0x34
    SDHC_PROCTL = proctl;
    91da:	str	r2, [r3, #40]	; 0x28
    91dc:	b.n	916c <SdioCard::readStop()+0x28>
    91de:	nop
    91e0:	.word	0x402c0000
    91e4:	.word	0x0cdb0000
    91e8:	.word	0x20001a56
    91ec:	.word	0x20005c88
    91f0:	.word	0x00008a11
    91f4:	.word	0x000f4240
    91f8:	.word	0x200063fc

000091fc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>:
                        size_t n) {
    91fc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9200:	mov	r4, r2
  if ((3 & (uint32_t)buf) || n == 0) {
    9202:	ands.w	r2, r2, #3
                        size_t n) {
    9206:	sub	sp, #12
  if ((3 & (uint32_t)buf) || n == 0) {
    9208:	it	ne
    920a:	movne	r2, #1
    920c:	str	r3, [sp, #4]
    920e:	cmp	r3, #0
    9210:	it	eq
    9212:	orreq.w	r2, r2, #1
    9216:	cbz	r2, 922e <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x32>
  m_errorCode = code;
    9218:	ldr	r1, [pc, #184]	; (92d4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xd8>)
    921a:	movs	r0, #38	; 0x26
  m_errorLine = line;
    921c:	ldr	r3, [pc, #184]	; (92d8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xdc>)
    921e:	movw	r2, #547	; 0x223
  m_errorCode = code;
    9222:	strb	r0, [r1, #0]
  m_errorLine = line;
    9224:	str	r2, [r3, #0]
}
    9226:	movs	r0, #0
    9228:	add	sp, #12
    922a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  m_busyFcn = fcn;
    922e:	ldr	r3, [pc, #172]	; (92dc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xe0>)
    9230:	mov	r6, r0
    9232:	ldr	r2, [pc, #172]	; (92e0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xe4>)
    9234:	mov	r5, r1
    9236:	ldr.w	r9, [pc, #192]	; 92f8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xfc>
    923a:	str	r3, [r2, #0]
  uint32_t m = micros();
    923c:	bl	b87c <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    9240:	ldr.w	r8, [pc, #184]	; 92fc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x100>
  uint32_t m = micros();
    9244:	mov	r7, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    9246:	ldr.w	fp, [pc, #184]	; 9300 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x104>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    924a:	ldr.w	sl, [pc, #184]	; 9304 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x108>
  while (fcn()) {
    924e:	b.n	925e <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x62>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    9250:	bl	b87c <micros>
    9254:	subs	r0, r0, r7
    9256:	cmp	r0, sl
    9258:	bhi.n	92ba <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xbe>
    yield();
    925a:	bl	c0e4 <yield>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    925e:	ldr.w	r1, [r9]
    9262:	mov	r0, r8
    9264:	bl	8de8 <cardCommand(unsigned long, unsigned long)>
    9268:	cmp	r0, #0
    926a:	beq.n	9250 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x54>
    926c:	ldr.w	r3, [fp, #16]
  while (fcn()) {
    9270:	lsls	r3, r3, #23
    9272:	bpl.n	9250 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x54>
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    9274:	ldr	r2, [sp, #4]
  m_dmaBusy = true;
    9276:	movs	r0, #1
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    9278:	ldr	r3, [pc, #104]	; (92e4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xe8>)
  m_busyFcn = 0;
    927a:	ldr	r1, [pc, #100]	; (92e0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xe4>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    927c:	and.w	r3, r3, r2, lsl #16
  m_busyFcn = 0;
    9280:	movs	r2, #0
    9282:	str	r2, [r1, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    9284:	orr.w	r3, r3, #512	; 0x200
  m_dmaBusy = true;
    9288:	ldr	r1, [pc, #92]	; (92e8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xec>)
    928a:	strb	r0, [r1, #0]
  m_irqstat = 0;
    928c:	ldr	r1, [pc, #92]	; (92ec <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xf0>)
    928e:	str	r2, [r1, #0]
  SDHC_DSADDR = (uint32_t)buf;
    9290:	str.w	r4, [fp]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    9294:	str.w	r3, [fp, #4]
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512 * sector)) {
    9298:	ldr	r3, [pc, #84]	; (92f0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xf4>)
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    929a:	ldr	r2, [pc, #88]	; (92f4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xf8>)
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512 * sector)) {
    929c:	ldrb	r3, [r3, #0]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    929e:	str.w	r2, [fp, #56]	; 0x38
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512 * sector)) {
    92a2:	cbz	r3, 92d0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xd4>
    92a4:	mov	r1, r5
    92a6:	mov	r0, r6
    92a8:	bl	8de8 <cardCommand(unsigned long, unsigned long)>
    92ac:	cmp	r0, #0
    92ae:	beq.n	9226 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2a>
}
    92b0:	add	sp, #12
    92b2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  return waitDmaStatus();
    92b6:	b.w	8c44 <waitDmaStatus()>
  m_errorCode = code;
    92ba:	ldr	r2, [pc, #24]	; (92d4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xd8>)
    92bc:	movs	r1, #10
      m_busyFcn = 0;
    92be:	movs	r0, #0
  m_errorLine = line;
    92c0:	ldr	r3, [pc, #20]	; (92d8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xdc>)
      m_busyFcn = 0;
    92c2:	ldr	r4, [pc, #28]	; (92e0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xe4>)
  m_errorCode = code;
    92c4:	strb	r1, [r2, #0]
  m_errorLine = line;
    92c6:	movw	r2, #550	; 0x226
      m_busyFcn = 0;
    92ca:	str	r0, [r4, #0]
  m_errorLine = line;
    92cc:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD13);
    92ce:	b.n	9226 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2a>
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512 * sector)) {
    92d0:	lsls	r5, r5, #9
    92d2:	b.n	92a4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xa8>
    92d4:	.word	0x20001a56
    92d8:	.word	0x20005c88
    92dc:	.word	0x00008f7d
    92e0:	.word	0x200063fc
    92e4:	.word	0x1fff0000
    92e8:	.word	0x2000815c
    92ec:	.word	0x20006400
    92f0:	.word	0x2000815a
    92f4:	.word	0x117f0002
    92f8:	.word	0x200061b0
    92fc:	.word	0x0d1a0000
    9300:	.word	0x402c0000
    9304:	.word	0x000f4240

00009308 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    9308:	push	{r3, r4, r5, r6, r7, lr}
    930a:	mov	r6, r0
    930c:	ldrb	r0, [r0, #8]
    930e:	mov	r4, r1
    9310:	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    9312:	lsls	r0, r0, #31
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    9314:	mov	r7, r3
  if (m_sdioConfig.useDma()) {
    9316:	bmi.n	9340 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x38>
    for (size_t i = 0; i < n; i++) {
    9318:	cbz	r3, 933c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    931a:	add	r7, r1
    931c:	b.n	9322 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x1a>
    931e:	cmp	r4, r7
    9320:	beq.n	933c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
      if (!readSector(sector + i, dst + i * 512UL)) {
    9322:	ldr	r3, [r6, #0]
    9324:	mov	r2, r5
    9326:	mov	r1, r4
    9328:	mov	r0, r6
    932a:	ldr	r3, [r3, #16]
    for (size_t i = 0; i < n; i++) {
    932c:	adds	r4, #1
    932e:	add.w	r5, r5, #512	; 0x200
      if (!readSector(sector + i, dst + i * 512UL)) {
    9332:	blx	r3
    9334:	cmp	r0, #0
    9336:	bne.n	931e <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x16>
          return false;  // readSector will set errorCode.
    9338:	movs	r0, #0
}
    933a:	pop	{r3, r4, r5, r6, r7, pc}
  return true;
    933c:	movs	r0, #1
}
    933e:	pop	{r3, r4, r5, r6, r7, pc}
    if ((uint32_t)dst & 3) {
    9340:	lsls	r0, r2, #30
    9342:	beq.n	936a <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x62>
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    9344:	cmp	r3, #0
    9346:	beq.n	933c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    9348:	add	r7, r1
    934a:	b.n	9350 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x48>
    934c:	cmp	r4, r7
    934e:	beq.n	933c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
        if (!readSector(sector, dst)) {
    9350:	ldr	r3, [r6, #0]
    9352:	mov	r2, r5
    9354:	mov	r1, r4
    9356:	mov	r0, r6
    9358:	ldr	r3, [r3, #16]
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    935a:	adds	r4, #1
    935c:	add.w	r5, r5, #512	; 0x200
        if (!readSector(sector, dst)) {
    9360:	blx	r3
    9362:	cmp	r0, #0
    9364:	bne.n	934c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x44>
          return false;  // readSector will set errorCode.
    9366:	movs	r0, #0
    9368:	b.n	933a <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x32>
    if (!rdWrSectors(CMD18_DMA_XFERTYP, sector, dst, n)) {
    936a:	ldr	r0, [pc, #24]	; (9384 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x7c>)
    936c:	bl	91fc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    9370:	cmp	r0, #0
    9372:	bne.n	933c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
  m_errorCode = code;
    9374:	ldr	r1, [pc, #16]	; (9388 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x80>)
    9376:	movs	r4, #12
  m_errorLine = line;
    9378:	ldr	r3, [pc, #16]	; (938c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x84>)
    937a:	movw	r2, #974	; 0x3ce
  m_errorCode = code;
    937e:	strb	r4, [r1, #0]
  m_errorLine = line;
    9380:	str	r2, [r3, #0]
}
    9382:	pop	{r3, r4, r5, r6, r7, pc}
    9384:	.word	0x123a0037
    9388:	.word	0x20001a56
    938c:	.word	0x20005c88

00009390 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    9390:	push	{r3, r4, r5, r6, r7, lr}
    9392:	mov	r6, r0
    9394:	ldrb	r0, [r0, #8]
    9396:	mov	r4, r1
    9398:	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    939a:	lsls	r0, r0, #31
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    939c:	mov	r7, r3
  if (m_sdioConfig.useDma()) {
    939e:	bmi.n	93c8 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x38>
    for (size_t i = 0; i < n; i++) {
    93a0:	cbz	r3, 93c4 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    93a2:	add	r7, r1
    93a4:	b.n	93aa <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x1a>
    93a6:	cmp	r4, r7
    93a8:	beq.n	93c4 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
      if (!writeSector(sector + i, src + i * 512UL)) {
    93aa:	ldr	r3, [r6, #0]
    93ac:	mov	r2, r5
    93ae:	mov	r1, r4
    93b0:	mov	r0, r6
    93b2:	ldr	r3, [r3, #32]
    for (size_t i = 0; i < n; i++) {
    93b4:	adds	r4, #1
    93b6:	add.w	r5, r5, #512	; 0x200
      if (!writeSector(sector + i, src + i * 512UL)) {
    93ba:	blx	r3
    93bc:	cmp	r0, #0
    93be:	bne.n	93a6 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x16>
          return false;  // writeSector will set errorCode.
    93c0:	movs	r0, #0
}
    93c2:	pop	{r3, r4, r5, r6, r7, pc}
  return true;
    93c4:	movs	r0, #1
}
    93c6:	pop	{r3, r4, r5, r6, r7, pc}
    if (3 & (uint32_t)ptr) {
    93c8:	lsls	r0, r2, #30
    93ca:	beq.n	93f2 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x62>
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    93cc:	cmp	r3, #0
    93ce:	beq.n	93c4 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    93d0:	add	r7, r1
    93d2:	b.n	93d8 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x48>
    93d4:	cmp	r4, r7
    93d6:	beq.n	93c4 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
        if (!writeSector(sector, ptr)) {
    93d8:	ldr	r3, [r6, #0]
    93da:	mov	r2, r5
    93dc:	mov	r1, r4
    93de:	mov	r0, r6
    93e0:	ldr	r3, [r3, #32]
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    93e2:	adds	r4, #1
    93e4:	add.w	r5, r5, #512	; 0x200
        if (!writeSector(sector, ptr)) {
    93e8:	blx	r3
    93ea:	cmp	r0, #0
    93ec:	bne.n	93d4 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x44>
          return false;  // writeSector will set errorCode.
    93ee:	movs	r0, #0
    93f0:	b.n	93c2 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x32>
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
    93f2:	ldr	r0, [pc, #24]	; (940c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x7c>)
    93f4:	bl	91fc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    93f8:	cmp	r0, #0
    93fa:	bne.n	93c4 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
  m_errorCode = code;
    93fc:	ldr	r1, [pc, #16]	; (9410 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x80>)
    93fe:	movs	r4, #14
  m_errorLine = line;
    9400:	ldr	r3, [pc, #16]	; (9414 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x84>)
    9402:	movw	r2, #1124	; 0x464
  m_errorCode = code;
    9406:	strb	r4, [r1, #0]
  m_errorLine = line;
    9408:	str	r2, [r3, #0]
}
    940a:	pop	{r3, r4, r5, r6, r7, pc}
    940c:	.word	0x193a0027
    9410:	.word	0x20001a56
    9414:	.word	0x20005c88

00009418 <SdioCard::begin(SdioConfig)>:
  m_curState = IDLE_STATE;
    9418:	movs	r2, #0
  m_initDone = false;
    941a:	ldr	r3, [pc, #708]	; (96e0 <SdioCard::begin(SdioConfig)+0x2c8>)
bool SdioCard::begin(SdioConfig sdioConfig) {
    941c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  m_initDone = false;
    9420:	strb	r2, [r3, #0]
bool SdioCard::begin(SdioConfig sdioConfig) {
    9422:	mov	r6, r0
  CCM_ANALOG_PFD_528 |= (1 << 7);
    9424:	ldr	r3, [pc, #700]	; (96e4 <SdioCard::begin(SdioConfig)+0x2cc>)
bool SdioCard::begin(SdioConfig sdioConfig) {
    9426:	sub	sp, #76	; 0x4c
  m_errorCode = SD_CARD_ERROR_NONE;
    9428:	ldr	r4, [pc, #700]	; (96e8 <SdioCard::begin(SdioConfig)+0x2d0>)
  m_highCapacity = false;
    942a:	ldr.w	sl, [pc, #788]	; 9740 <SdioCard::begin(SdioConfig)+0x328>
  m_version2 = false;
    942e:	ldr	r7, [pc, #700]	; (96ec <SdioCard::begin(SdioConfig)+0x2d4>)
  m_errorCode = SD_CARD_ERROR_NONE;
    9430:	strb	r2, [r4, #0]
  m_curState = IDLE_STATE;
    9432:	strb	r2, [r0, #9]
  m_highCapacity = false;
    9434:	strb.w	r2, [sl]
  m_version2 = false;
    9438:	strb	r2, [r7, #0]
  CCM_ANALOG_PFD_528 |= (1 << 7);
    943a:	ldr.w	r2, [r3, #256]	; 0x100
  m_sdioConfig = sdioConfig;
    943e:	strb	r1, [r0, #8]
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    9440:	movs	r1, #5
  CCM_ANALOG_PFD_528 |= (1 << 7);
    9442:	orr.w	r2, r2, #128	; 0x80
  SDHC_MIX_CTRL |= 0x80000000;
    9446:	ldr.w	r8, [pc, #704]	; 9708 <SdioCard::begin(SdioConfig)+0x2f0>
  CCM_ANALOG_PFD_528 |= (1 << 7);
    944a:	str.w	r2, [r3, #256]	; 0x100
  CCM_ANALOG_PFD_528 &= ~(0x3F << 0);
    944e:	ldr.w	r2, [r3, #256]	; 0x100
    9452:	bic.w	r2, r2, #63	; 0x3f
    9456:	str.w	r2, [r3, #256]	; 0x100
  CCM_ANALOG_PFD_528 |= ((24) & 0x3F << 0);  // 12 - 35
    945a:	ldr.w	r2, [r3, #256]	; 0x100
    945e:	orr.w	r2, r2, #24
    9462:	str.w	r2, [r3, #256]	; 0x100
  CCM_ANALOG_PFD_528 &= ~(1 << 7);
    9466:	ldr.w	r2, [r3, #256]	; 0x100
    946a:	bic.w	r2, r2, #128	; 0x80
    946e:	str.w	r2, [r3, #256]	; 0x100
  CCM_CCGR6 |= CCM_CCGR6_USDHC1(CCM_CCGR_ON);
    9472:	add.w	r3, r3, #147456	; 0x24000
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    9476:	ldr	r2, [pc, #632]	; (96f0 <SdioCard::begin(SdioConfig)+0x2d8>)
  CCM_CCGR6 |= CCM_CCGR6_USDHC1(CCM_CCGR_ON);
    9478:	ldr.w	r0, [r3, #128]	; 0x80
    947c:	orr.w	r0, r0, #12
    9480:	str.w	r0, [r3, #128]	; 0x80
  CCM_CSCDR1 &= ~(CCM_CSCDR1_USDHC1_CLK_PODF_MASK);
    9484:	ldr	r0, [r3, #36]	; 0x24
    9486:	bic.w	r0, r0, #14336	; 0x3800
    948a:	str	r0, [r3, #36]	; 0x24
  CCM_CSCMR1 |= CCM_CSCMR1_USDHC1_CLK_SEL;  // PLL2PFD0
    948c:	ldr	r0, [r3, #28]
    948e:	orr.w	r0, r0, #65536	; 0x10000
    9492:	str	r0, [r3, #28]
  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((1));
    9494:	ldr	r0, [r3, #36]	; 0x24
    9496:	orr.w	r0, r0, #2048	; 0x800
    949a:	str	r0, [r3, #36]	; 0x24
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    949c:	str.w	r1, [r2, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    94a0:	str.w	r1, [r2, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    94a4:	str.w	r1, [r2, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    94a8:	str.w	r1, [r2, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    94ac:	str.w	r1, [r2, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    94b0:	str.w	r1, [r2, #456]	; 0x1c8
  SDHC_MIX_CTRL |= 0x80000000;
    94b4:	ldr.w	r2, [r8, #72]	; 0x48
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    94b8:	ldr	r3, [pc, #568]	; (96f4 <SdioCard::begin(SdioConfig)+0x2dc>)
  SDHC_MIX_CTRL |= 0x80000000;
    94ba:	orr.w	r2, r2, #2147483648	; 0x80000000
    94be:	str.w	r2, [r8, #72]	; 0x48
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    94c2:	ldr.w	r2, [r8, #44]	; 0x2c
    94c6:	orrs	r3, r2
    94c8:	str.w	r3, [r8, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) {
    94cc:	ldr.w	r5, [r8, #44]	; 0x2c
    94d0:	ands.w	r5, r5, #16777216	; 0x1000000
    94d4:	bne.n	94cc <SdioCard::begin(SdioConfig)+0xb4>
  setSdclk(SD_MAX_INIT_RATE_KHZ);
    94d6:	mov.w	r0, #400	; 0x190
    94da:	bl	8a30 <setSdclk(unsigned long)>
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    94de:	ldr	r3, [pc, #528]	; (96f0 <SdioCard::begin(SdioConfig)+0x2d8>)
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    94e0:	movw	r2, #28856	; 0x70b8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    94e4:	movw	r1, #4280	; 0x10b8
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    94e8:	str.w	r5, [r3, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    94ec:	str.w	r5, [r3, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    94f0:	str.w	r5, [r3, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    94f4:	str.w	r5, [r3, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    94f8:	str.w	r5, [r3, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    94fc:	str.w	r5, [r3, #456]	; 0x1c8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    9500:	str.w	r2, [r3, #956]	; 0x3bc
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;   // DAT3
    9504:	str.w	r2, [r3, #960]	; 0x3c0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;   // CMD
    9508:	str.w	r2, [r3, #940]	; 0x3ac
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    950c:	str.w	r1, [r3, #944]	; 0x3b0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02 = DATA_MASK;   // DAT0
    9510:	str.w	r2, [r3, #948]	; 0x3b4
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;   // DAT1
    9514:	str.w	r2, [r3, #952]	; 0x3b8
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    9518:	ldr	r3, [pc, #476]	; (96f8 <SdioCard::begin(SdioConfig)+0x2e0>)
    951a:	ldr	r2, [pc, #480]	; (96fc <SdioCard::begin(SdioConfig)+0x2e4>)
    951c:	str.w	r3, [r8, #52]	; 0x34
    9520:	ldr	r3, [pc, #476]	; (9700 <SdioCard::begin(SdioConfig)+0x2e8>)
    9522:	str.w	r2, [r3, #504]	; 0x1f8
  NVIC_SET_PRIORITY(IRQ_SDHC, 6 * 16);
    9526:	ldr	r3, [pc, #476]	; (9704 <SdioCard::begin(SdioConfig)+0x2ec>)
    9528:	movs	r2, #96	; 0x60
    952a:	strb.w	r2, [r3, #110]	; 0x6e
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    952e:	mov.w	r3, #3758153728	; 0xe000e000
    9532:	mov.w	r2, #16384	; 0x4000
    9536:	str.w	r2, [r3, #268]	; 0x10c
  SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    953a:	ldr.w	r3, [r8, #44]	; 0x2c
    953e:	orr.w	r3, r3, #134217728	; 0x8000000
    9542:	str.w	r3, [r8, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
    9546:	ldr	r3, [pc, #448]	; (9708 <SdioCard::begin(SdioConfig)+0x2f0>)
    9548:	ldr	r1, [r3, #44]	; 0x2c
    954a:	ands.w	r1, r1, #134217728	; 0x8000000
    954e:	bne.n	9548 <SdioCard::begin(SdioConfig)+0x130>
  if (!cardCommand(CMD0_XFERTYP, 0)) {
    9550:	mov	r0, r1
    9552:	bl	8de8 <cardCommand(unsigned long, unsigned long)>
    9556:	mov	fp, r0
    9558:	cbnz	r0, 956e <SdioCard::begin(SdioConfig)+0x156>
  m_errorCode = code;
    955a:	movs	r1, #1
  m_errorLine = line;
    955c:	ldr	r3, [pc, #428]	; (970c <SdioCard::begin(SdioConfig)+0x2f4>)
    955e:	movw	r2, #702	; 0x2be
  m_errorCode = code;
    9562:	strb	r1, [r4, #0]
  m_errorLine = line;
    9564:	str	r2, [r3, #0]
}
    9566:	mov	r0, fp
    9568:	add	sp, #76	; 0x4c
    956a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    956e:	mov.w	r8, #3
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
    9572:	ldr.w	r9, [pc, #464]	; 9744 <SdioCard::begin(SdioConfig)+0x32c>
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTA;
    9576:	ldr	r5, [pc, #400]	; (9708 <SdioCard::begin(SdioConfig)+0x2f0>)
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
    9578:	mov.w	r1, #426	; 0x1aa
    957c:	mov	r0, r9
    957e:	bl	8de8 <cardCommand(unsigned long, unsigned long)>
    9582:	cmp	r0, #0
    9584:	bne.n	9624 <SdioCard::begin(SdioConfig)+0x20c>
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTA;
    9586:	ldr	r3, [r5, #44]	; 0x2c
    9588:	orr.w	r3, r3, #16777216	; 0x1000000
    958c:	str	r3, [r5, #44]	; 0x2c
    while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) {
    958e:	ldr	r3, [r5, #44]	; 0x2c
    9590:	lsls	r3, r3, #7
    9592:	bmi.n	958e <SdioCard::begin(SdioConfig)+0x176>
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    9594:	subs.w	r8, r8, #1
    9598:	bne.n	9578 <SdioCard::begin(SdioConfig)+0x160>
  arg = m_version2 ? 0X40300000 : 0x00300000;
    959a:	ldrb	r3, [r7, #0]
    959c:	cmp	r3, #0
    959e:	ldr	r3, [pc, #368]	; (9710 <SdioCard::begin(SdioConfig)+0x2f8>)
    95a0:	ite	eq
    95a2:	moveq.w	r9, #3145728	; 0x300000
    95a6:	movne	r9, r3
  int m = micros();
    95a8:	bl	b87c <micros>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    95ac:	ldr	r7, [pc, #356]	; (9714 <SdioCard::begin(SdioConfig)+0x2fc>)
  int m = micros();
    95ae:	mov	r5, r0
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    95b0:	ldr.w	fp, [pc, #404]	; 9748 <SdioCard::begin(SdioConfig)+0x330>
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    95b4:	ldr.w	r8, [pc, #404]	; 974c <SdioCard::begin(SdioConfig)+0x334>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    95b8:	movs	r1, #0
    95ba:	mov	r0, r7
    95bc:	bl	8de8 <cardCommand(unsigned long, unsigned long)>
    95c0:	cbnz	r0, 95da <SdioCard::begin(SdioConfig)+0x1c2>
      return sdError(SD_CARD_ERROR_ACMD41);
    95c2:	mov.w	fp, #0
  m_errorCode = code;
    95c6:	movs	r1, #23
  m_errorLine = line;
    95c8:	ldr	r3, [pc, #320]	; (970c <SdioCard::begin(SdioConfig)+0x2f4>)
    95ca:	movw	r2, #723	; 0x2d3
}
    95ce:	mov	r0, fp
  m_errorCode = code;
    95d0:	strb	r1, [r4, #0]
  m_errorLine = line;
    95d2:	str	r2, [r3, #0]
}
    95d4:	add	sp, #76	; 0x4c
    95d6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    95da:	mov	r1, r9
    95dc:	mov	r0, fp
    95de:	bl	8de8 <cardCommand(unsigned long, unsigned long)>
    95e2:	cmp	r0, #0
    95e4:	beq.n	95c2 <SdioCard::begin(SdioConfig)+0x1aa>
        ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
    95e6:	bl	b87c <micros>
    95ea:	subs	r0, r0, r5
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    95ec:	ldr	r3, [pc, #280]	; (9708 <SdioCard::begin(SdioConfig)+0x2f0>)
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    95ee:	cmp	r0, r8
    95f0:	bhi.n	95c2 <SdioCard::begin(SdioConfig)+0x1aa>
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    95f2:	ldr	r2, [r3, #16]
    95f4:	cmp	r2, #0
    95f6:	bge.n	95b8 <SdioCard::begin(SdioConfig)+0x1a0>
  m_ocr = SDHC_CMDRSP0;
    95f8:	ldr	r1, [r3, #16]
    95fa:	ldr	r2, [pc, #284]	; (9718 <SdioCard::begin(SdioConfig)+0x300>)
    95fc:	str	r1, [r2, #0]
  if (SDHC_CMDRSP0 & 0x40000000) {
    95fe:	ldr	r3, [r3, #16]
    9600:	lsls	r5, r3, #1
    9602:	bpl.n	960a <SdioCard::begin(SdioConfig)+0x1f2>
    m_highCapacity = true;
    9604:	movs	r3, #1
    9606:	strb.w	r3, [sl]
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    960a:	movs	r1, #0
    960c:	ldr	r0, [pc, #268]	; (971c <SdioCard::begin(SdioConfig)+0x304>)
    960e:	bl	8de8 <cardCommand(unsigned long, unsigned long)>
    9612:	mov	fp, r0
    9614:	cbnz	r0, 964a <SdioCard::begin(SdioConfig)+0x232>
  m_errorCode = code;
    9616:	movs	r1, #2
  m_errorLine = line;
    9618:	ldr	r3, [pc, #240]	; (970c <SdioCard::begin(SdioConfig)+0x2f4>)
    961a:	mov.w	r2, #732	; 0x2dc
  m_errorCode = code;
    961e:	strb	r1, [r4, #0]
  m_errorLine = line;
    9620:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD2);
    9622:	b.n	9566 <SdioCard::begin(SdioConfig)+0x14e>
      if (SDHC_CMDRSP0 != 0X1AA) {
    9624:	ldr	r3, [pc, #224]	; (9708 <SdioCard::begin(SdioConfig)+0x2f0>)
    9626:	ldr	r3, [r3, #16]
    9628:	cmp.w	r3, #426	; 0x1aa
    962c:	beq.n	9640 <SdioCard::begin(SdioConfig)+0x228>
  m_errorCode = code;
    962e:	movs	r1, #6
  m_errorLine = line;
    9630:	ldr	r3, [pc, #216]	; (970c <SdioCard::begin(SdioConfig)+0x2f4>)
    9632:	mov.w	r2, #708	; 0x2c4
        return sdError(SD_CARD_ERROR_CMD8);
    9636:	mov.w	fp, #0
  m_errorCode = code;
    963a:	strb	r1, [r4, #0]
  m_errorLine = line;
    963c:	str	r2, [r3, #0]
        return sdError(SD_CARD_ERROR_CMD8);
    963e:	b.n	9566 <SdioCard::begin(SdioConfig)+0x14e>
      m_version2 = true;
    9640:	movs	r3, #1
  arg = m_version2 ? 0X40300000 : 0x00300000;
    9642:	ldr.w	r9, [pc, #204]	; 9710 <SdioCard::begin(SdioConfig)+0x2f8>
      m_version2 = true;
    9646:	strb	r3, [r7, #0]
  arg = m_version2 ? 0X40300000 : 0x00300000;
    9648:	b.n	95a8 <SdioCard::begin(SdioConfig)+0x190>
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    964a:	movs	r1, #0
    964c:	ldr	r0, [pc, #208]	; (9720 <SdioCard::begin(SdioConfig)+0x308>)
    964e:	bl	8de8 <cardCommand(unsigned long, unsigned long)>
    9652:	mov	fp, r0
    9654:	cbnz	r0, 9664 <SdioCard::begin(SdioConfig)+0x24c>
  m_errorCode = code;
    9656:	movs	r1, #3
  m_errorLine = line;
    9658:	ldr	r3, [pc, #176]	; (970c <SdioCard::begin(SdioConfig)+0x2f4>)
    965a:	movw	r2, #735	; 0x2df
  m_errorCode = code;
    965e:	strb	r1, [r4, #0]
  m_errorLine = line;
    9660:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD3);
    9662:	b.n	9566 <SdioCard::begin(SdioConfig)+0x14e>
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    9664:	ldr.w	sl, [pc, #160]	; 9708 <SdioCard::begin(SdioConfig)+0x2f0>
    9668:	ldr	r3, [pc, #184]	; (9724 <SdioCard::begin(SdioConfig)+0x30c>)
    966a:	ldr.w	r2, [sl, #16]
    966e:	ldr	r5, [pc, #184]	; (9728 <SdioCard::begin(SdioConfig)+0x310>)
    9670:	ands	r3, r2
  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    9672:	ldr	r1, [pc, #184]	; (972c <SdioCard::begin(SdioConfig)+0x314>)
    9674:	ldr	r0, [pc, #184]	; (9730 <SdioCard::begin(SdioConfig)+0x318>)
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    9676:	str	r3, [r5, #0]
  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    9678:	bl	8e80 <readReg16(unsigned long, void*)>
    967c:	mov	fp, r0
    967e:	cbnz	r0, 968e <SdioCard::begin(SdioConfig)+0x276>
  m_errorCode = code;
    9680:	movs	r1, #7
  m_errorLine = line;
    9682:	ldr	r3, [pc, #136]	; (970c <SdioCard::begin(SdioConfig)+0x2f4>)
    9684:	mov.w	r2, #740	; 0x2e4
  m_errorCode = code;
    9688:	strb	r1, [r4, #0]
  m_errorLine = line;
    968a:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD9);
    968c:	b.n	9566 <SdioCard::begin(SdioConfig)+0x14e>
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    968e:	ldr	r1, [pc, #164]	; (9734 <SdioCard::begin(SdioConfig)+0x31c>)
    9690:	ldr	r0, [pc, #164]	; (9738 <SdioCard::begin(SdioConfig)+0x320>)
    9692:	bl	8e80 <readReg16(unsigned long, void*)>
    9696:	mov	fp, r0
    9698:	cbnz	r0, 96a8 <SdioCard::begin(SdioConfig)+0x290>
  m_errorCode = code;
    969a:	movs	r1, #8
  m_errorLine = line;
    969c:	ldr	r3, [pc, #108]	; (970c <SdioCard::begin(SdioConfig)+0x2f4>)
    969e:	movw	r2, #743	; 0x2e7
  m_errorCode = code;
    96a2:	strb	r1, [r4, #0]
  m_errorLine = line;
    96a4:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD10);
    96a6:	b.n	9566 <SdioCard::begin(SdioConfig)+0x14e>
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    96a8:	ldr	r1, [r5, #0]
    96aa:	ldr	r0, [pc, #144]	; (973c <SdioCard::begin(SdioConfig)+0x324>)
    96ac:	bl	8de8 <cardCommand(unsigned long, unsigned long)>
    96b0:	mov	fp, r0
    96b2:	cbnz	r0, 96c2 <SdioCard::begin(SdioConfig)+0x2aa>
  m_errorCode = code;
    96b4:	movs	r1, #5
  m_errorLine = line;
    96b6:	ldr	r3, [pc, #84]	; (970c <SdioCard::begin(SdioConfig)+0x2f4>)
    96b8:	movw	r2, #746	; 0x2ea
  m_errorCode = code;
    96bc:	strb	r1, [r4, #0]
  m_errorLine = line;
    96be:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD7);
    96c0:	b.n	9566 <SdioCard::begin(SdioConfig)+0x14e>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    96c2:	ldr	r1, [r5, #0]
    96c4:	ldr	r0, [pc, #76]	; (9714 <SdioCard::begin(SdioConfig)+0x2fc>)
    96c6:	bl	8de8 <cardCommand(unsigned long, unsigned long)>
    96ca:	cmp	r0, #0
    96cc:	bne.n	9750 <SdioCard::begin(SdioConfig)+0x338>
  m_errorCode = code;
    96ce:	movs	r1, #20
  m_errorLine = line;
    96d0:	ldr	r3, [pc, #56]	; (970c <SdioCard::begin(SdioConfig)+0x2f4>)
    96d2:	movw	r2, #750	; 0x2ee
    return sdError(SD_CARD_ERROR_ACMD6);
    96d6:	mov.w	fp, #0
  m_errorCode = code;
    96da:	strb	r1, [r4, #0]
  m_errorLine = line;
    96dc:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_ACMD6);
    96de:	b.n	9566 <SdioCard::begin(SdioConfig)+0x14e>
    96e0:	.word	0x20008158
    96e4:	.word	0x400d8000
    96e8:	.word	0x20001a56
    96ec:	.word	0x20008159
    96f0:	.word	0x401f8000
    96f4:	.word	0x01008000
    96f8:	.word	0x117f000b
    96fc:	.word	0x000089e1
    9700:	.word	0x20001c00
    9704:	.word	0xe000e400
    9708:	.word	0x402c0000
    970c:	.word	0x20005c88
    9710:	.word	0x40300000
    9714:	.word	0x371a0000
    9718:	.word	0x200061ac
    971c:	.word	0x02090000
    9720:	.word	0x031a0000
    9724:	.word	0xffff0000
    9728:	.word	0x200061b0
    972c:	.word	0x2000619c
    9730:	.word	0x09090000
    9734:	.word	0x2000618c
    9738:	.word	0x0a090000
    973c:	.word	0x071b0000
    9740:	.word	0x2000815a
    9744:	.word	0x081a0000
    9748:	.word	0x29020000
    974c:	.word	0x000f4240
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    9750:	movs	r1, #2
    9752:	ldr	r0, [pc, #536]	; (996c <SdioCard::begin(SdioConfig)+0x554>)
    9754:	bl	8de8 <cardCommand(unsigned long, unsigned long)>
    9758:	cmp	r0, #0
    975a:	beq.n	96ce <SdioCard::begin(SdioConfig)+0x2b6>
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    975c:	ldr.w	r3, [sl, #40]	; 0x28
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    9760:	ldr.w	r9, [pc, #576]	; 99a4 <SdioCard::begin(SdioConfig)+0x58c>
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    9764:	bic.w	r3, r3, #6
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    9768:	ldr.w	r8, [pc, #540]	; 9988 <SdioCard::begin(SdioConfig)+0x570>
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    976c:	str.w	r3, [sl, #40]	; 0x28
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);
    9770:	ldr.w	r3, [sl, #40]	; 0x28
    9774:	orr.w	r3, r3, #2
    9778:	str.w	r3, [sl, #40]	; 0x28
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
    977c:	mov.w	r3, #1048592	; 0x100010
    9780:	str.w	r3, [sl, #68]	; 0x44
  uint32_t m = micros();
    9784:	bl	b87c <micros>
    9788:	mov	r7, r0
  while (fcn()) {
    978a:	b.n	9796 <SdioCard::begin(SdioConfig)+0x37e>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    978c:	bl	b87c <micros>
    9790:	subs	r0, r0, r7
    9792:	cmp	r0, r8
    9794:	bhi.n	97ee <SdioCard::begin(SdioConfig)+0x3d6>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    9796:	ldr	r1, [r5, #0]
    9798:	mov	r0, r9
    979a:	bl	8de8 <cardCommand(unsigned long, unsigned long)>
    979e:	cmp	r0, #0
    97a0:	beq.n	978c <SdioCard::begin(SdioConfig)+0x374>
    97a2:	ldr.w	r3, [sl, #16]
  while (fcn()) {
    97a6:	lsls	r0, r3, #23
    97a8:	bpl.n	978c <SdioCard::begin(SdioConfig)+0x374>
  m_dmaBusy = true;
    97aa:	movs	r3, #1
    97ac:	ldr.w	r8, [pc, #504]	; 99a8 <SdioCard::begin(SdioConfig)+0x590>
  m_irqstat = 0;
    97b0:	ldr	r7, [pc, #444]	; (9970 <SdioCard::begin(SdioConfig)+0x558>)
    97b2:	mov.w	fp, #0
  m_dmaBusy = true;
    97b6:	strb.w	r3, [r8]
  SDHC_DSADDR = (uint32_t)scr;
    97ba:	ldr.w	r9, [pc, #496]	; 99ac <SdioCard::begin(SdioConfig)+0x594>
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(8);
    97be:	ldr	r3, [pc, #436]	; (9974 <SdioCard::begin(SdioConfig)+0x55c>)
  m_irqstat = 0;
    97c0:	str.w	fp, [r7]
  SDHC_DSADDR = (uint32_t)scr;
    97c4:	str.w	r9, [sl]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(8);
    97c8:	str.w	r3, [sl, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    97cc:	ldr	r3, [pc, #424]	; (9978 <SdioCard::begin(SdioConfig)+0x560>)
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    97ce:	ldr	r0, [pc, #428]	; (997c <SdioCard::begin(SdioConfig)+0x564>)
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    97d0:	str.w	r3, [sl, #56]	; 0x38
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    97d4:	ldr	r1, [r5, #0]
    97d6:	bl	8de8 <cardCommand(unsigned long, unsigned long)>
    97da:	cbnz	r0, 9800 <SdioCard::begin(SdioConfig)+0x3e8>
  m_errorCode = code;
    97dc:	movs	r1, #24
  m_errorLine = line;
    97de:	ldr	r3, [pc, #416]	; (9980 <SdioCard::begin(SdioConfig)+0x568>)
    97e0:	movw	r2, #471	; 0x1d7
    return false;
    97e4:	mov.w	fp, #0
  m_errorCode = code;
    97e8:	strb	r1, [r4, #0]
  m_errorLine = line;
    97ea:	str	r2, [r3, #0]
  return false;
    97ec:	b.n	9566 <SdioCard::begin(SdioConfig)+0x14e>
  m_errorCode = code;
    97ee:	movs	r1, #10
  m_errorLine = line;
    97f0:	ldr	r3, [pc, #396]	; (9980 <SdioCard::begin(SdioConfig)+0x568>)
    97f2:	mov.w	r2, #464	; 0x1d0
    return false;
    97f6:	mov.w	fp, #0
  m_errorCode = code;
    97fa:	strb	r1, [r4, #0]
  m_errorLine = line;
    97fc:	str	r2, [r3, #0]
  return false;
    97fe:	b.n	9566 <SdioCard::begin(SdioConfig)+0x14e>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    9800:	mov	r1, fp
    9802:	ldr	r0, [pc, #384]	; (9984 <SdioCard::begin(SdioConfig)+0x56c>)
    9804:	bl	8de8 <cardCommand(unsigned long, unsigned long)>
    9808:	cmp	r0, #0
    980a:	beq.n	97dc <SdioCard::begin(SdioConfig)+0x3c4>
  if (!waitDmaStatus()) {
    980c:	bl	8c44 <waitDmaStatus()>
    9810:	mov	fp, r0
    9812:	cbnz	r0, 9822 <SdioCard::begin(SdioConfig)+0x40a>
  m_errorCode = code;
    9814:	movs	r1, #38	; 0x26
  m_errorLine = line;
    9816:	ldr	r3, [pc, #360]	; (9980 <SdioCard::begin(SdioConfig)+0x568>)
    9818:	mov.w	r2, #474	; 0x1da
  m_errorCode = code;
    981c:	strb	r1, [r4, #0]
  m_errorLine = line;
    981e:	str	r2, [r3, #0]
  return false;
    9820:	b.n	9566 <SdioCard::begin(SdioConfig)+0x14e>
  uint32_t m = micros();
    9822:	bl	b87c <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    9826:	ldr.w	sl, [pc, #380]	; 99a4 <SdioCard::begin(SdioConfig)+0x58c>
    982a:	ldr.w	fp, [pc, #388]	; 99b0 <SdioCard::begin(SdioConfig)+0x598>
  uint32_t m = micros();
    982e:	str	r0, [sp, #4]
  while (fcn()) {
    9830:	b.n	9840 <SdioCard::begin(SdioConfig)+0x428>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    9832:	bl	b87c <micros>
    9836:	ldr	r3, [sp, #4]
    9838:	subs	r0, r0, r3
    983a:	ldr	r3, [pc, #332]	; (9988 <SdioCard::begin(SdioConfig)+0x570>)
    983c:	cmp	r0, r3
    983e:	bhi.n	9890 <SdioCard::begin(SdioConfig)+0x478>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    9840:	ldr	r1, [r5, #0]
    9842:	mov	r0, sl
    9844:	bl	8de8 <cardCommand(unsigned long, unsigned long)>
    9848:	cmp	r0, #0
    984a:	beq.n	9832 <SdioCard::begin(SdioConfig)+0x41a>
    984c:	ldr.w	r3, [fp, #16]
  while (fcn()) {
    9850:	lsls	r1, r3, #23
    9852:	bpl.n	9832 <SdioCard::begin(SdioConfig)+0x41a>
  m_dmaBusy = true;
    9854:	movs	r2, #1
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    9856:	ldr	r0, [pc, #292]	; (997c <SdioCard::begin(SdioConfig)+0x564>)
  m_dmaBusy = true;
    9858:	strb.w	r2, [r8]
  m_irqstat = 0;
    985c:	mov.w	r8, #0
  SDHC_DSADDR = (uint32_t)scr;
    9860:	ldr	r2, [pc, #296]	; (998c <SdioCard::begin(SdioConfig)+0x574>)
  m_irqstat = 0;
    9862:	str.w	r8, [r7]
  SDHC_DSADDR = (uint32_t)scr;
    9866:	str.w	r2, [fp]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    986a:	ldr	r2, [pc, #292]	; (9990 <SdioCard::begin(SdioConfig)+0x578>)
    986c:	str.w	r2, [fp, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    9870:	ldr	r2, [pc, #260]	; (9978 <SdioCard::begin(SdioConfig)+0x560>)
    9872:	str.w	r2, [fp, #56]	; 0x38
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    9876:	ldr	r1, [r5, #0]
    9878:	bl	8de8 <cardCommand(unsigned long, unsigned long)>
    987c:	cbnz	r0, 98a2 <SdioCard::begin(SdioConfig)+0x48a>
  m_errorCode = code;
    987e:	movs	r1, #21
  m_errorLine = line;
    9880:	ldr	r3, [pc, #252]	; (9980 <SdioCard::begin(SdioConfig)+0x568>)
    9882:	movw	r2, #453	; 0x1c5
    return false;
    9886:	mov.w	fp, #0
  m_errorCode = code;
    988a:	strb	r1, [r4, #0]
  m_errorLine = line;
    988c:	str	r2, [r3, #0]
  return false;
    988e:	b.n	9566 <SdioCard::begin(SdioConfig)+0x14e>
  m_errorCode = code;
    9890:	movs	r1, #10
  m_errorLine = line;
    9892:	ldr	r3, [pc, #236]	; (9980 <SdioCard::begin(SdioConfig)+0x568>)
    9894:	mov.w	r2, #446	; 0x1be
    return false;
    9898:	mov.w	fp, #0
  m_errorCode = code;
    989c:	strb	r1, [r4, #0]
  m_errorLine = line;
    989e:	str	r2, [r3, #0]
  return false;
    98a0:	b.n	9566 <SdioCard::begin(SdioConfig)+0x14e>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    98a2:	mov	r1, r8
    98a4:	ldr	r0, [pc, #236]	; (9994 <SdioCard::begin(SdioConfig)+0x57c>)
    98a6:	bl	8de8 <cardCommand(unsigned long, unsigned long)>
    98aa:	cmp	r0, #0
    98ac:	beq.n	987e <SdioCard::begin(SdioConfig)+0x466>
  if (!waitDmaStatus()) {
    98ae:	bl	8c44 <waitDmaStatus()>
    98b2:	mov	fp, r0
    98b4:	cbnz	r0, 98c4 <SdioCard::begin(SdioConfig)+0x4ac>
  m_errorCode = code;
    98b6:	movs	r1, #38	; 0x26
  m_errorLine = line;
    98b8:	ldr	r3, [pc, #196]	; (9980 <SdioCard::begin(SdioConfig)+0x568>)
    98ba:	mov.w	r2, #456	; 0x1c8
  m_errorCode = code;
    98be:	strb	r1, [r4, #0]
  m_errorLine = line;
    98c0:	str	r2, [r3, #0]
  return false;
    98c2:	b.n	9566 <SdioCard::begin(SdioConfig)+0x14e>
  /** Bytes 0-3 SD Association, bytes 4-7 reserved for manufacturer. */
  uint8_t scr[8];
  /** \return SCR_STRUCTURE field  - must be zero.*/
  uint8_t srcStructure() const { return scr[0] >> 4; }
  /** \return SD_SPEC field 0 - v1.0 or V1.01, 1 - 1.10, 2 - V2.00 or greater */
  uint8_t sdSpec() const { return scr[0] & 0XF; }
    98c4:	ldrb.w	r3, [r9]
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    98c8:	lsls	r2, r3, #28
    98ca:	beq.n	98fe <SdioCard::begin(SdioConfig)+0x4e6>
  if (m_scr.sdSpec() > 0 && cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    98cc:	ldr	r3, [r6, #0]
    98ce:	add	r2, sp, #8
    98d0:	mvn.w	r1, #4278190080	; 0xff000000
    98d4:	mov	r0, r6
    98d6:	ldr	r3, [r3, #40]	; 0x28
    98d8:	blx	r3
    98da:	cbz	r0, 98fe <SdioCard::begin(SdioConfig)+0x4e6>
    98dc:	ldrb.w	r3, [sp, #21]
    98e0:	lsls	r3, r3, #30
    98e2:	bpl.n	98fe <SdioCard::begin(SdioConfig)+0x4e6>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    98e4:	ldr	r3, [r6, #0]
    98e6:	add	r2, sp, #8
    98e8:	mov	r0, r6
    98ea:	ldr	r1, [pc, #172]	; (9998 <SdioCard::begin(SdioConfig)+0x580>)
    98ec:	ldr	r3, [r3, #40]	; 0x28
    98ee:	blx	r3
  if (m_scr.sdSpec() > 0 && cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    98f0:	cbz	r0, 98fe <SdioCard::begin(SdioConfig)+0x4e6>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    98f2:	ldrb.w	r3, [sp, #24]
    98f6:	and.w	r3, r3, #15
    98fa:	cmp	r3, #1
    98fc:	beq.n	9964 <SdioCard::begin(SdioConfig)+0x54c>
    kHzSdClk = 25000;
    98fe:	movw	r0, #25000	; 0x61a8
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    9902:	ldr	r4, [pc, #152]	; (999c <SdioCard::begin(SdioConfig)+0x584>)
    9904:	movs	r3, #5
    9906:	str.w	r3, [r4, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    990a:	str.w	r3, [r4, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    990e:	str.w	r3, [r4, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    9912:	str.w	r3, [r4, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    9916:	str.w	r3, [r4, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    991a:	str.w	r3, [r4, #456]	; 0x1c8
  setSdclk(kHzSdClk);
    991e:	bl	8a30 <setSdclk(unsigned long)>
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    9922:	movs	r3, #0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    9924:	movw	r2, #28856	; 0x70b8
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    9928:	str.w	r3, [r4, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    992c:	str.w	r3, [r4, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    9930:	str.w	r3, [r4, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    9934:	str.w	r3, [r4, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    9938:	str.w	r3, [r4, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    993c:	str.w	r3, [r4, #456]	; 0x1c8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    9940:	movw	r3, #4280	; 0x10b8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    9944:	str.w	r2, [r4, #956]	; 0x3bc
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;   // DAT3
    9948:	str.w	r2, [r4, #960]	; 0x3c0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;   // CMD
    994c:	str.w	r2, [r4, #940]	; 0x3ac
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    9950:	str.w	r3, [r4, #944]	; 0x3b0
  m_initDone = true;
    9954:	movs	r3, #1
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02 = DATA_MASK;   // DAT0
    9956:	str.w	r2, [r4, #948]	; 0x3b4
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;   // DAT1
    995a:	str.w	r2, [r4, #952]	; 0x3b8
  m_initDone = true;
    995e:	ldr	r2, [pc, #64]	; (99a0 <SdioCard::begin(SdioConfig)+0x588>)
    9960:	strb	r3, [r2, #0]
  return true;
    9962:	b.n	9566 <SdioCard::begin(SdioConfig)+0x14e>
    kHzSdClk = 50000;
    9964:	movw	r0, #50000	; 0xc350
    9968:	b.n	9902 <SdioCard::begin(SdioConfig)+0x4ea>
    996a:	nop
    996c:	.word	0x061a0000
    9970:	.word	0x20006400
    9974:	.word	0x00010008
    9978:	.word	0x117f0002
    997c:	.word	0x371a0000
    9980:	.word	0x20005c88
    9984:	.word	0x333a0011
    9988:	.word	0x000f4240
    998c:	.word	0x200061bc
    9990:	.word	0x00010040
    9994:	.word	0x0d3a0011
    9998:	.word	0x80fffff1
    999c:	.word	0x401f8000
    99a0:	.word	0x20008158
    99a4:	.word	0x0d1a0000
    99a8:	.word	0x2000815c
    99ac:	.word	0x200061b4
    99b0:	.word	0x402c0000

000099b4 <SdioCard::readData(unsigned char*)>:
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    99b4:	ldr	r3, [pc, #220]	; (9a94 <SdioCard::readData(unsigned char*)+0xe0>)
    99b6:	ldr	r2, [r3, #36]	; 0x24
    99b8:	lsls	r2, r2, #22
bool SdioCard::readData(uint8_t* dst) {
    99ba:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    99be:	mov	r7, r1
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    99c0:	bmi.n	99de <SdioCard::readData(unsigned char*)+0x2a>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    99c2:	ldr	r2, [r3, #40]	; 0x28
    99c4:	bic.w	r2, r2, #65536	; 0x10000
    99c8:	str	r2, [r3, #40]	; 0x28
    noInterrupts();
    99ca:	cpsid	i
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    99cc:	ldr	r2, [r3, #40]	; 0x28
    99ce:	orr.w	r2, r2, #131072	; 0x20000
    99d2:	str	r2, [r3, #40]	; 0x28
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    99d4:	ldr	r2, [r3, #40]	; 0x28
    99d6:	orr.w	r2, r2, #65536	; 0x10000
    99da:	str	r2, [r3, #40]	; 0x28
    interrupts();
    99dc:	cpsie	i
  uint32_t m = micros();
    99de:	bl	b87c <micros>
static bool isBusyFifoRead() { return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN); }
    99e2:	ldr	r6, [pc, #176]	; (9a94 <SdioCard::readData(unsigned char*)+0xe0>)
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    99e4:	ldr.w	r8, [pc, #196]	; 9aac <SdioCard::readData(unsigned char*)+0xf8>
  uint32_t m = micros();
    99e8:	mov	r5, r0
  while (fcn()) {
    99ea:	b.n	99f6 <SdioCard::readData(unsigned char*)+0x42>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    99ec:	bl	b87c <micros>
    99f0:	subs	r3, r0, r5
    99f2:	cmp	r3, r8
    99f4:	bhi.n	9a66 <SdioCard::readData(unsigned char*)+0xb2>
static bool isBusyFifoRead() { return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN); }
    99f6:	ldr	r4, [r6, #36]	; 0x24
  while (fcn()) {
    99f8:	ands.w	r4, r4, #2048	; 0x800
    99fc:	beq.n	99ec <SdioCard::readData(unsigned char*)+0x38>
    99fe:	add.w	ip, r7, #60	; 0x3c
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    9a02:	ldr	r0, [pc, #144]	; (9a94 <SdioCard::readData(unsigned char*)+0xe0>)
    9a04:	add.w	r7, r7, #572	; 0x23c
    9a08:	ldr	r3, [r0, #36]	; 0x24
    9a0a:	lsls	r3, r3, #20
    9a0c:	bpl.n	9a08 <SdioCard::readData(unsigned char*)+0x54>
    9a0e:	sub.w	r3, ip, #64	; 0x40
      p32[i] = SDHC_DATPORT;
    9a12:	ldr	r2, [r0, #32]
    9a14:	str.w	r2, [r3, #4]!
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    9a18:	cmp	ip, r3
    9a1a:	bne.n	9a12 <SdioCard::readData(unsigned char*)+0x5e>
  for (uint32_t iw = 0; iw < 512 / (4 * FIFO_WML); iw++) {
    9a1c:	add.w	ip, ip, #64	; 0x40
    9a20:	cmp	r7, ip
    9a22:	bne.n	9a08 <SdioCard::readData(unsigned char*)+0x54>
  uint32_t m = micros();
    9a24:	bl	b87c <micros>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    9a28:	ldr	r7, [pc, #104]	; (9a94 <SdioCard::readData(unsigned char*)+0xe0>)
    9a2a:	ldr	r5, [pc, #108]	; (9a98 <SdioCard::readData(unsigned char*)+0xe4>)
  uint32_t m = micros();
    9a2c:	mov	r6, r0
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    9a2e:	ldr.w	r8, [pc, #124]	; 9aac <SdioCard::readData(unsigned char*)+0xf8>
  while (fcn()) {
    9a32:	b.n	9a3e <SdioCard::readData(unsigned char*)+0x8a>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    9a34:	bl	b87c <micros>
    9a38:	subs	r3, r0, r6
    9a3a:	cmp	r3, r8
    9a3c:	bhi.n	9a7a <SdioCard::readData(unsigned char*)+0xc6>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    9a3e:	ldr	r4, [r7, #48]	; 0x30
  while (fcn()) {
    9a40:	ands	r4, r5
    9a42:	beq.n	9a34 <SdioCard::readData(unsigned char*)+0x80>
  m_irqstat = SDHC_IRQSTAT;
    9a44:	ldr	r3, [r7, #48]	; 0x30
    9a46:	ldr	r2, [pc, #84]	; (9a9c <SdioCard::readData(unsigned char*)+0xe8>)
    9a48:	str	r3, [r2, #0]
  SDHC_IRQSTAT = m_irqstat;
    9a4a:	ldr	r3, [r2, #0]
    9a4c:	str	r3, [r7, #48]	; 0x30
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    9a4e:	ldr	r3, [r2, #0]
    9a50:	ands.w	r3, r3, #2
    9a54:	beq.n	9a8e <SdioCard::readData(unsigned char*)+0xda>
    9a56:	ldr	r2, [r2, #0]
    9a58:	ldr	r3, [pc, #68]	; (9aa0 <SdioCard::readData(unsigned char*)+0xec>)
    9a5a:	tst	r2, r3
    9a5c:	ite	eq
    9a5e:	moveq	r0, #1
    9a60:	movne	r0, #0
}
    9a62:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_errorCode = code;
    9a66:	ldr	r1, [pc, #60]	; (9aa4 <SdioCard::readData(unsigned char*)+0xf0>)
    9a68:	movs	r5, #27
  m_errorLine = line;
    9a6a:	ldr	r3, [pc, #60]	; (9aa8 <SdioCard::readData(unsigned char*)+0xf4>)
    9a6c:	movw	r2, #889	; 0x379
    return sdError(SD_CARD_ERROR_READ_FIFO);
    9a70:	mov	r0, r4
  m_errorCode = code;
    9a72:	strb	r5, [r1, #0]
  m_errorLine = line;
    9a74:	str	r2, [r3, #0]
}
    9a76:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_errorCode = code;
    9a7a:	ldr	r1, [pc, #40]	; (9aa4 <SdioCard::readData(unsigned char*)+0xf0>)
    9a7c:	movs	r5, #30
  m_errorLine = line;
    9a7e:	ldr	r3, [pc, #40]	; (9aa8 <SdioCard::readData(unsigned char*)+0xf4>)
    9a80:	mov.w	r2, #900	; 0x384
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
    9a84:	mov	r0, r4
  m_errorCode = code;
    9a86:	strb	r5, [r1, #0]
  m_errorLine = line;
    9a88:	str	r2, [r3, #0]
}
    9a8a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    9a8e:	mov	r0, r3
}
    9a90:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9a94:	.word	0x402c0000
    9a98:	.word	0x117f0002
    9a9c:	.word	0x20006400
    9aa0:	.word	0x117f0000
    9aa4:	.word	0x20001a56
    9aa8:	.word	0x20005c88
    9aac:	.word	0x000f4240

00009ab0 <SdioCard::readStart(unsigned long)>:
bool SdioCard::readStart(uint32_t sector) {
    9ab0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  m_busyFcn = fcn;
    9ab4:	ldr	r3, [pc, #164]	; (9b5c <SdioCard::readStart(unsigned long)+0xac>)
bool SdioCard::readStart(uint32_t sector) {
    9ab6:	mov	r9, r1
  m_busyFcn = fcn;
    9ab8:	ldr.w	sl, [pc, #192]	; 9b7c <SdioCard::readStart(unsigned long)+0xcc>
    9abc:	ldr	r6, [pc, #160]	; (9b60 <SdioCard::readStart(unsigned long)+0xb0>)
    9abe:	str.w	r3, [sl]
  uint32_t m = micros();
    9ac2:	bl	b87c <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    9ac6:	ldr	r5, [pc, #156]	; (9b64 <SdioCard::readStart(unsigned long)+0xb4>)
  uint32_t m = micros();
    9ac8:	mov	r4, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    9aca:	ldr.w	r8, [pc, #180]	; 9b80 <SdioCard::readStart(unsigned long)+0xd0>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    9ace:	ldr	r7, [pc, #152]	; (9b68 <SdioCard::readStart(unsigned long)+0xb8>)
  while (fcn()) {
    9ad0:	b.n	9ae0 <SdioCard::readStart(unsigned long)+0x30>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    9ad2:	bl	b87c <micros>
    9ad6:	subs	r0, r0, r4
    9ad8:	cmp	r0, r7
    9ada:	bhi.n	9b30 <SdioCard::readStart(unsigned long)+0x80>
    yield();
    9adc:	bl	c0e4 <yield>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    9ae0:	ldr	r1, [r6, #0]
    9ae2:	mov	r0, r5
    9ae4:	bl	8de8 <cardCommand(unsigned long, unsigned long)>
    9ae8:	cmp	r0, #0
    9aea:	beq.n	9ad2 <SdioCard::readStart(unsigned long)+0x22>
    9aec:	ldr.w	r3, [r8, #16]
  while (fcn()) {
    9af0:	lsls	r3, r3, #23
    9af2:	bpl.n	9ad2 <SdioCard::readStart(unsigned long)+0x22>
  m_busyFcn = 0;
    9af4:	movs	r3, #0
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    9af6:	mov.w	r2, #512	; 0x200
  m_busyFcn = 0;
    9afa:	str.w	r3, [sl]
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    9afe:	ldr.w	r3, [r8, #40]	; 0x28
    9b02:	orr.w	r3, r3, #65536	; 0x10000
    9b06:	str.w	r3, [r8, #40]	; 0x28
  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512 * sector)) {
    9b0a:	ldr	r3, [pc, #96]	; (9b6c <SdioCard::readStart(unsigned long)+0xbc>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    9b0c:	str.w	r2, [r8, #4]
  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512 * sector)) {
    9b10:	ldrb	r3, [r3, #0]
    9b12:	cbz	r3, 9b48 <SdioCard::readStart(unsigned long)+0x98>
    9b14:	mov	r1, r9
    9b16:	ldr	r0, [pc, #88]	; (9b70 <SdioCard::readStart(unsigned long)+0xc0>)
    9b18:	bl	8de8 <cardCommand(unsigned long, unsigned long)>
    9b1c:	cbnz	r0, 9b2c <SdioCard::readStart(unsigned long)+0x7c>
  m_errorCode = code;
    9b1e:	ldr	r1, [pc, #84]	; (9b74 <SdioCard::readStart(unsigned long)+0xc4>)
    9b20:	movs	r4, #12
  m_errorLine = line;
    9b22:	ldr	r3, [pc, #84]	; (9b78 <SdioCard::readStart(unsigned long)+0xc8>)
    9b24:	movw	r2, #1002	; 0x3ea
  m_errorCode = code;
    9b28:	strb	r4, [r1, #0]
  m_errorLine = line;
    9b2a:	str	r2, [r3, #0]
}
    9b2c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_errorCode = code;
    9b30:	ldr	r2, [pc, #64]	; (9b74 <SdioCard::readStart(unsigned long)+0xc4>)
    9b32:	movs	r1, #10
      m_busyFcn = 0;
    9b34:	movs	r0, #0
  m_errorLine = line;
    9b36:	ldr	r3, [pc, #64]	; (9b78 <SdioCard::readStart(unsigned long)+0xc8>)
  m_errorCode = code;
    9b38:	strb	r1, [r2, #0]
  m_errorLine = line;
    9b3a:	movw	r2, #990	; 0x3de
      m_busyFcn = 0;
    9b3e:	str.w	r0, [sl]
  m_errorLine = line;
    9b42:	str	r2, [r3, #0]
}
    9b44:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512 * sector)) {
    9b48:	mov.w	r9, r9, lsl #9
    9b4c:	ldr	r0, [pc, #32]	; (9b70 <SdioCard::readStart(unsigned long)+0xc0>)
    9b4e:	mov	r1, r9
    9b50:	bl	8de8 <cardCommand(unsigned long, unsigned long)>
    9b54:	cmp	r0, #0
    9b56:	bne.n	9b2c <SdioCard::readStart(unsigned long)+0x7c>
    9b58:	b.n	9b1e <SdioCard::readStart(unsigned long)+0x6e>
    9b5a:	nop
    9b5c:	.word	0x00008f7d
    9b60:	.word	0x200061b0
    9b64:	.word	0x0d1a0000
    9b68:	.word	0x000f4240
    9b6c:	.word	0x2000815a
    9b70:	.word	0x123a0030
    9b74:	.word	0x20001a56
    9b78:	.word	0x20005c88
    9b7c:	.word	0x200063fc
    9b80:	.word	0x402c0000

00009b84 <SdioCard::stopTransmission(bool)>:
bool SdioCard::stopTransmission(bool blocking) {
    9b84:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_curState = IDLE_STATE;
    9b88:	movs	r2, #0
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    9b8a:	ldr	r4, [pc, #116]	; (9c00 <SdioCard::stopTransmission(bool)+0x7c>)
bool SdioCard::stopTransmission(bool blocking) {
    9b8c:	mov	r5, r1
  m_curState = IDLE_STATE;
    9b8e:	strb	r2, [r0, #9]
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    9b90:	mov	r1, r2
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    9b92:	ldr	r3, [r4, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    9b94:	ldr	r0, [pc, #108]	; (9c04 <SdioCard::stopTransmission(bool)+0x80>)
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    9b96:	bic.w	r3, r3, #65536	; 0x10000
    9b9a:	str	r3, [r4, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    9b9c:	bl	8de8 <cardCommand(unsigned long, unsigned long)>
    9ba0:	cbnz	r0, 9bb4 <SdioCard::stopTransmission(bool)+0x30>
  m_errorCode = code;
    9ba2:	ldr	r1, [pc, #100]	; (9c08 <SdioCard::stopTransmission(bool)+0x84>)
    9ba4:	movs	r4, #9
  m_errorLine = line;
    9ba6:	ldr	r3, [pc, #100]	; (9c0c <SdioCard::stopTransmission(bool)+0x88>)
    9ba8:	movw	r2, #1018	; 0x3fa
  m_errorCode = code;
    9bac:	strb	r4, [r1, #0]
  m_errorLine = line;
    9bae:	str	r2, [r3, #0]
}
    9bb0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (blocking) {
    9bb4:	cmp	r5, #0
    9bb6:	beq.n	9bb0 <SdioCard::stopTransmission(bool)+0x2c>
  m_busyFcn = fcn;
    9bb8:	ldr	r3, [pc, #84]	; (9c10 <SdioCard::stopTransmission(bool)+0x8c>)
    9bba:	ldr	r6, [pc, #88]	; (9c14 <SdioCard::stopTransmission(bool)+0x90>)
    9bbc:	str	r3, [r6, #0]
  uint32_t m = micros();
    9bbe:	bl	b87c <micros>
static bool isBusyDat() { return SDHC_PRSSTAT & (1 << 24) ? false : true; }
    9bc2:	ldr	r3, [r4, #36]	; 0x24
  uint32_t m = micros();
    9bc4:	mov	r7, r0
  while (fcn()) {
    9bc6:	lsls	r2, r3, #7
    9bc8:	bmi.n	9bf8 <SdioCard::stopTransmission(bool)+0x74>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    9bca:	ldr.w	r8, [pc, #76]	; 9c18 <SdioCard::stopTransmission(bool)+0x94>
    9bce:	b.n	9bda <SdioCard::stopTransmission(bool)+0x56>
    yield();
    9bd0:	bl	c0e4 <yield>
static bool isBusyDat() { return SDHC_PRSSTAT & (1 << 24) ? false : true; }
    9bd4:	ldr	r3, [r4, #36]	; 0x24
  while (fcn()) {
    9bd6:	lsls	r3, r3, #7
    9bd8:	bmi.n	9bf8 <SdioCard::stopTransmission(bool)+0x74>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    9bda:	bl	b87c <micros>
    9bde:	subs	r0, r0, r7
    9be0:	cmp	r0, r8
    9be2:	bls.n	9bd0 <SdioCard::stopTransmission(bool)+0x4c>
  m_errorCode = code;
    9be4:	ldr	r2, [pc, #32]	; (9c08 <SdioCard::stopTransmission(bool)+0x84>)
    9be6:	movs	r1, #10
      m_busyFcn = 0;
    9be8:	movs	r0, #0
  m_errorLine = line;
    9bea:	ldr	r3, [pc, #32]	; (9c0c <SdioCard::stopTransmission(bool)+0x88>)
  m_errorCode = code;
    9bec:	strb	r1, [r2, #0]
  m_errorLine = line;
    9bee:	movw	r2, #1022	; 0x3fe
      m_busyFcn = 0;
    9bf2:	str	r0, [r6, #0]
  m_errorLine = line;
    9bf4:	str	r2, [r3, #0]
      return sdError(SD_CARD_ERROR_CMD13);
    9bf6:	b.n	9bb0 <SdioCard::stopTransmission(bool)+0x2c>
  m_busyFcn = 0;
    9bf8:	movs	r3, #0
  return true;
    9bfa:	mov	r0, r5
  m_busyFcn = 0;
    9bfc:	str	r3, [r6, #0]
  return false;  // Caller will set errorCode.
    9bfe:	b.n	9bb0 <SdioCard::stopTransmission(bool)+0x2c>
    9c00:	.word	0x402c0000
    9c04:	.word	0x0cdb0000
    9c08:	.word	0x20001a56
    9c0c:	.word	0x20005c88
    9c10:	.word	0x00008a11
    9c14:	.word	0x200063fc
    9c18:	.word	0x000f4240

00009c1c <SdioCard::syncDevice()>:
  if (!m_transferActive) {
    9c1c:	ldr	r3, [pc, #40]	; (9c48 <SdioCard::syncDevice()+0x2c>)
    9c1e:	ldrb	r3, [r3, #0]
bool SdioCard::syncDevice() {
    9c20:	push	{r4, lr}
    9c22:	mov	r4, r0
  if (!m_transferActive) {
    9c24:	cbnz	r3, 9c2e <SdioCard::syncDevice()+0x12>
  if (m_curState != IDLE_STATE) {
    9c26:	ldrb	r3, [r4, #9]
    9c28:	cbnz	r3, 9c3c <SdioCard::syncDevice()+0x20>
  return true;
    9c2a:	movs	r0, #1
}
    9c2c:	pop	{r4, pc}
    9c2e:	bl	8cac <waitTransferComplete() [clone .part.0]>
  if (!waitTransferComplete()) {
    9c32:	cmp	r0, #0
    9c34:	beq.n	9c2c <SdioCard::syncDevice()+0x10>
  if (m_curState != IDLE_STATE) {
    9c36:	ldrb	r3, [r4, #9]
    9c38:	cmp	r3, #0
    9c3a:	beq.n	9c2a <SdioCard::syncDevice()+0xe>
    return stopTransmission(true);
    9c3c:	mov	r0, r4
    9c3e:	movs	r1, #1
}
    9c40:	ldmia.w	sp!, {r4, lr}
    return stopTransmission(true);
    9c44:	b.w	9b84 <SdioCard::stopTransmission(bool)>
    9c48:	.word	0x2000815b

00009c4c <SdioCard::erase(unsigned long, unsigned long)>:
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    9c4c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (m_curState != IDLE_STATE && !syncDevice()) {
    9c50:	ldrb	r3, [r0, #9]
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    9c52:	mov	r5, r1
    9c54:	mov	r6, r2
  if (m_curState != IDLE_STATE && !syncDevice()) {
    9c56:	cbz	r3, 9c88 <SdioCard::erase(unsigned long, unsigned long)+0x3c>
    9c58:	ldr	r3, [r0, #0]
    9c5a:	mov	r4, r0
    9c5c:	ldr	r2, [pc, #252]	; (9d5c <SdioCard::erase(unsigned long, unsigned long)+0x110>)
    9c5e:	ldr	r3, [r3, #28]
    9c60:	cmp	r3, r2
    9c62:	bne.n	9cfa <SdioCard::erase(unsigned long, unsigned long)+0xae>
  if (!m_transferActive) {
    9c64:	ldr	r3, [pc, #248]	; (9d60 <SdioCard::erase(unsigned long, unsigned long)+0x114>)
    9c66:	ldrb	r3, [r3, #0]
    9c68:	cbnz	r3, 9c7a <SdioCard::erase(unsigned long, unsigned long)+0x2e>
    return stopTransmission(true);
    9c6a:	movs	r1, #1
    9c6c:	mov	r0, r4
    9c6e:	bl	9b84 <SdioCard::stopTransmission(bool)>
  if (m_curState != IDLE_STATE && !syncDevice()) {
    9c72:	cbnz	r0, 9c88 <SdioCard::erase(unsigned long, unsigned long)+0x3c>
    return false;
    9c74:	movs	r0, #0
}
    9c76:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9c7a:	bl	8cac <waitTransferComplete() [clone .part.0]>
  if (!waitTransferComplete()) {
    9c7e:	cmp	r0, #0
    9c80:	beq.n	9c74 <SdioCard::erase(unsigned long, unsigned long)+0x28>
  if (m_curState != IDLE_STATE) {
    9c82:	ldrb	r3, [r4, #9]
    9c84:	cmp	r3, #0
    9c86:	bne.n	9c6a <SdioCard::erase(unsigned long, unsigned long)+0x1e>
  bool eraseSingleBlock() const { return csd[10] & 0X40; }
    9c88:	ldr	r4, [pc, #216]	; (9d64 <SdioCard::erase(unsigned long, unsigned long)+0x118>)
    9c8a:	ldrb	r3, [r4, #10]
  if (!m_csd.eraseSingleBlock()) {
    9c8c:	ands.w	r0, r3, #64	; 0x40
    9c90:	bne.n	9cb8 <SdioCard::erase(unsigned long, unsigned long)+0x6c>
  int eraseSize() const { return ((csd[10] & 0X3F) << 1 | csd[11] >> 7) + 1; }
    9c92:	lsls	r3, r3, #1
    9c94:	ldrb	r2, [r4, #11]
    9c96:	and.w	r3, r3, #126	; 0x7e
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    9c9a:	orr.w	r3, r3, r2, lsr #7
    9c9e:	adds	r2, r6, #1
    9ca0:	orrs	r2, r5
    9ca2:	tst	r3, r2
    9ca4:	beq.n	9cb8 <SdioCard::erase(unsigned long, unsigned long)+0x6c>
  m_errorCode = code;
    9ca6:	ldr	r1, [pc, #192]	; (9d68 <SdioCard::erase(unsigned long, unsigned long)+0x11c>)
    9ca8:	movs	r4, #40	; 0x28
  m_errorLine = line;
    9caa:	ldr	r3, [pc, #192]	; (9d6c <SdioCard::erase(unsigned long, unsigned long)+0x120>)
    9cac:	movw	r2, #813	; 0x32d
  m_errorCode = code;
    9cb0:	strb	r4, [r1, #0]
  m_errorLine = line;
    9cb2:	str	r2, [r3, #0]
}
    9cb4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!m_highCapacity) {
    9cb8:	ldr	r3, [pc, #180]	; (9d70 <SdioCard::erase(unsigned long, unsigned long)+0x124>)
    9cba:	ldrb	r3, [r3, #0]
    9cbc:	cbnz	r3, 9cc2 <SdioCard::erase(unsigned long, unsigned long)+0x76>
    firstSector <<= 9;
    9cbe:	lsls	r5, r5, #9
    lastSector <<= 9;
    9cc0:	lsls	r6, r6, #9
  if (!cardCommand(CMD32_XFERTYP, firstSector)) {
    9cc2:	mov	r1, r5
    9cc4:	ldr	r0, [pc, #172]	; (9d74 <SdioCard::erase(unsigned long, unsigned long)+0x128>)
    9cc6:	bl	8de8 <cardCommand(unsigned long, unsigned long)>
    9cca:	cbnz	r0, 9cde <SdioCard::erase(unsigned long, unsigned long)+0x92>
  m_errorCode = code;
    9ccc:	ldr	r1, [pc, #152]	; (9d68 <SdioCard::erase(unsigned long, unsigned long)+0x11c>)
    9cce:	movs	r4, #15
  m_errorLine = line;
    9cd0:	ldr	r3, [pc, #152]	; (9d6c <SdioCard::erase(unsigned long, unsigned long)+0x120>)
    9cd2:	movw	r2, #821	; 0x335
  m_errorCode = code;
    9cd6:	strb	r4, [r1, #0]
  m_errorLine = line;
    9cd8:	str	r2, [r3, #0]
}
    9cda:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!cardCommand(CMD33_XFERTYP, lastSector)) {
    9cde:	mov	r1, r6
    9ce0:	ldr	r0, [pc, #148]	; (9d78 <SdioCard::erase(unsigned long, unsigned long)+0x12c>)
    9ce2:	bl	8de8 <cardCommand(unsigned long, unsigned long)>
    9ce6:	cbnz	r0, 9d02 <SdioCard::erase(unsigned long, unsigned long)+0xb6>
  m_errorCode = code;
    9ce8:	ldr	r1, [pc, #124]	; (9d68 <SdioCard::erase(unsigned long, unsigned long)+0x11c>)
    9cea:	movs	r4, #16
  m_errorLine = line;
    9cec:	ldr	r3, [pc, #124]	; (9d6c <SdioCard::erase(unsigned long, unsigned long)+0x120>)
    9cee:	mov.w	r2, #824	; 0x338
  m_errorCode = code;
    9cf2:	strb	r4, [r1, #0]
  m_errorLine = line;
    9cf4:	str	r2, [r3, #0]
}
    9cf6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (m_curState != IDLE_STATE && !syncDevice()) {
    9cfa:	blx	r3
    9cfc:	cmp	r0, #0
    9cfe:	beq.n	9c74 <SdioCard::erase(unsigned long, unsigned long)+0x28>
    9d00:	b.n	9c88 <SdioCard::erase(unsigned long, unsigned long)+0x3c>
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    9d02:	movs	r1, #0
    9d04:	ldr	r0, [pc, #116]	; (9d7c <SdioCard::erase(unsigned long, unsigned long)+0x130>)
    9d06:	bl	8de8 <cardCommand(unsigned long, unsigned long)>
    9d0a:	cbnz	r0, 9d1c <SdioCard::erase(unsigned long, unsigned long)+0xd0>
  m_errorCode = code;
    9d0c:	ldr	r1, [pc, #88]	; (9d68 <SdioCard::erase(unsigned long, unsigned long)+0x11c>)
    9d0e:	movs	r4, #17
  m_errorLine = line;
    9d10:	ldr	r3, [pc, #88]	; (9d6c <SdioCard::erase(unsigned long, unsigned long)+0x120>)
    9d12:	movw	r2, #827	; 0x33b
  m_errorCode = code;
    9d16:	strb	r4, [r1, #0]
  m_errorLine = line;
    9d18:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD38);
    9d1a:	b.n	9cb4 <SdioCard::erase(unsigned long, unsigned long)+0x68>
  uint32_t m = micros();
    9d1c:	bl	b87c <micros>
    9d20:	ldr	r6, [pc, #92]	; (9d80 <SdioCard::erase(unsigned long, unsigned long)+0x134>)
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    9d22:	ldr	r5, [pc, #96]	; (9d84 <SdioCard::erase(unsigned long, unsigned long)+0x138>)
  uint32_t m = micros();
    9d24:	mov	r4, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    9d26:	ldr.w	r8, [pc, #100]	; 9d8c <SdioCard::erase(unsigned long, unsigned long)+0x140>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    9d2a:	ldr	r7, [pc, #92]	; (9d88 <SdioCard::erase(unsigned long, unsigned long)+0x13c>)
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    9d2c:	ldr	r1, [r6, #0]
    9d2e:	mov	r0, r5
    9d30:	bl	8de8 <cardCommand(unsigned long, unsigned long)>
    9d34:	cbz	r0, 9d3e <SdioCard::erase(unsigned long, unsigned long)+0xf2>
    9d36:	ldr.w	r3, [r8, #16]
  while (fcn()) {
    9d3a:	lsls	r3, r3, #23
    9d3c:	bmi.n	9cb4 <SdioCard::erase(unsigned long, unsigned long)+0x68>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    9d3e:	bl	b87c <micros>
    9d42:	subs	r0, r0, r4
    9d44:	cmp	r0, r7
    9d46:	bls.n	9d2c <SdioCard::erase(unsigned long, unsigned long)+0xe0>
  m_errorCode = code;
    9d48:	ldr	r1, [pc, #28]	; (9d68 <SdioCard::erase(unsigned long, unsigned long)+0x11c>)
    9d4a:	movs	r4, #41	; 0x29
  m_errorLine = line;
    9d4c:	ldr	r3, [pc, #28]	; (9d6c <SdioCard::erase(unsigned long, unsigned long)+0x120>)
    9d4e:	movw	r2, #830	; 0x33e
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
    9d52:	movs	r0, #0
  m_errorCode = code;
    9d54:	strb	r4, [r1, #0]
  m_errorLine = line;
    9d56:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
    9d58:	b.n	9cb4 <SdioCard::erase(unsigned long, unsigned long)+0x68>
    9d5a:	nop
    9d5c:	.word	0x00009c1d
    9d60:	.word	0x2000815b
    9d64:	.word	0x2000619c
    9d68:	.word	0x20001a56
    9d6c:	.word	0x20005c88
    9d70:	.word	0x2000815a
    9d74:	.word	0x201a0000
    9d78:	.word	0x211a0000
    9d7c:	.word	0x261b0000
    9d80:	.word	0x200061b0
    9d84:	.word	0x0d1a0000
    9d88:	.word	0x000f4240
    9d8c:	.word	0x402c0000

00009d90 <SdioCard::readSector(unsigned long, unsigned char*)>:
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    9d90:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9d94:	mov	r4, r0
    9d96:	ldrb	r0, [r0, #8]
    9d98:	sub.w	sp, sp, #512	; 0x200
    9d9c:	mov	r6, r2
  if (m_sdioConfig.useDma()) {
    9d9e:	ands.w	r5, r0, #1
    9da2:	beq.n	9dcc <SdioCard::readSector(unsigned long, unsigned char*)+0x3c>
    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;
    9da4:	lsls	r3, r2, #30
    9da6:	beq.n	9e22 <SdioCard::readSector(unsigned long, unsigned char*)+0x92>
    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    9da8:	movs	r3, #1
    9daa:	ldr	r0, [pc, #224]	; (9e8c <SdioCard::readSector(unsigned long, unsigned char*)+0xfc>)
    9dac:	mov	r2, sp
    9dae:	bl	91fc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    9db2:	cmp	r0, #0
    9db4:	beq.n	9e2c <SdioCard::readSector(unsigned long, unsigned char*)+0x9c>
      memcpy(dst, aligned, 512);
    9db6:	mov.w	r2, #512	; 0x200
    9dba:	mov	r1, sp
    9dbc:	mov	r0, r6
    9dbe:	bl	a0d4 <memcpy>
}
    9dc2:	mov	r0, r5
    9dc4:	add.w	sp, sp, #512	; 0x200
    9dc8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!m_transferActive) {
    9dcc:	ldr.w	r8, [pc, #204]	; 9e9c <SdioCard::readSector(unsigned long, unsigned char*)+0x10c>
    9dd0:	mov	r7, r1
    9dd2:	ldrb.w	r3, [r8]
    9dd6:	cmp	r3, #0
    9dd8:	bne.n	9e46 <SdioCard::readSector(unsigned long, unsigned char*)+0xb6>
    if (m_curState != READ_STATE || sector != m_curSector) {
    9dda:	ldrb	r3, [r4, #9]
    9ddc:	cmp	r3, #1
    9dde:	beq.n	9e54 <SdioCard::readSector(unsigned long, unsigned char*)+0xc4>
      if (!syncDevice()) {
    9de0:	ldr	r2, [r4, #0]
    9de2:	ldr	r1, [pc, #172]	; (9e90 <SdioCard::readSector(unsigned long, unsigned char*)+0x100>)
    9de4:	ldr	r2, [r2, #28]
    9de6:	cmp	r2, r1
    9de8:	bne.n	9e80 <SdioCard::readSector(unsigned long, unsigned char*)+0xf0>
  if (!m_transferActive) {
    9dea:	ldrb.w	r2, [r8]
    9dee:	cmp	r2, #0
    9df0:	bne.n	9e5c <SdioCard::readSector(unsigned long, unsigned char*)+0xcc>
  if (m_curState != IDLE_STATE) {
    9df2:	cmp	r3, #0
    9df4:	bne.n	9e6a <SdioCard::readSector(unsigned long, unsigned char*)+0xda>
      if (!readStart(sector)) {
    9df6:	mov	r1, r7
    9df8:	mov	r0, r4
    9dfa:	bl	9ab0 <SdioCard::readStart(unsigned long)>
    9dfe:	cbz	r0, 9e3c <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
      m_curState = READ_STATE;
    9e00:	movs	r3, #1
      m_curSector = sector;
    9e02:	str	r7, [r4, #4]
      m_curState = READ_STATE;
    9e04:	strb	r3, [r4, #9]
    if (!readData(dst)) {
    9e06:	mov	r1, r6
    9e08:	mov	r0, r4
    9e0a:	bl	99b4 <SdioCard::readData(unsigned char*)>
    9e0e:	cbz	r0, 9e3c <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
    m_curSector++;
    9e10:	ldr	r3, [r4, #4]
  return true;
    9e12:	mov	r5, r0
    m_curSector++;
    9e14:	adds	r3, #1
}
    9e16:	mov	r0, r5
    m_curSector++;
    9e18:	str	r3, [r4, #4]
}
    9e1a:	add.w	sp, sp, #512	; 0x200
    9e1e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    9e22:	movs	r3, #1
    9e24:	ldr	r0, [pc, #100]	; (9e8c <SdioCard::readSector(unsigned long, unsigned char*)+0xfc>)
    9e26:	bl	91fc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    9e2a:	cbnz	r0, 9e3c <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
  m_errorCode = code;
    9e2c:	ldr	r1, [pc, #100]	; (9e94 <SdioCard::readSector(unsigned long, unsigned char*)+0x104>)
    9e2e:	movs	r0, #11
  m_errorLine = line;
    9e30:	ldr	r3, [pc, #100]	; (9e98 <SdioCard::readSector(unsigned long, unsigned char*)+0x108>)
    9e32:	movw	r2, #929	; 0x3a1
      return sdError(SD_CARD_ERROR_CMD17);
    9e36:	movs	r5, #0
  m_errorCode = code;
    9e38:	strb	r0, [r1, #0]
  m_errorLine = line;
    9e3a:	str	r2, [r3, #0]
}
    9e3c:	mov	r0, r5
    9e3e:	add.w	sp, sp, #512	; 0x200
    9e42:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9e46:	bl	8cac <waitTransferComplete() [clone .part.0]>
    if (!waitTransferComplete()) {
    9e4a:	cmp	r0, #0
    9e4c:	beq.n	9e3c <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
    if (m_curState != READ_STATE || sector != m_curSector) {
    9e4e:	ldrb	r3, [r4, #9]
    9e50:	cmp	r3, #1
    9e52:	bne.n	9de0 <SdioCard::readSector(unsigned long, unsigned char*)+0x50>
    9e54:	ldr	r2, [r4, #4]
    9e56:	cmp	r2, r7
    9e58:	bne.n	9de0 <SdioCard::readSector(unsigned long, unsigned char*)+0x50>
    9e5a:	b.n	9e06 <SdioCard::readSector(unsigned long, unsigned char*)+0x76>
    9e5c:	bl	8cac <waitTransferComplete() [clone .part.0]>
  if (!waitTransferComplete()) {
    9e60:	cmp	r0, #0
    9e62:	beq.n	9e3c <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
  if (m_curState != IDLE_STATE) {
    9e64:	ldrb	r3, [r4, #9]
    9e66:	cmp	r3, #0
    9e68:	beq.n	9df6 <SdioCard::readSector(unsigned long, unsigned char*)+0x66>
    return stopTransmission(true);
    9e6a:	movs	r1, #1
    9e6c:	mov	r0, r4
    9e6e:	bl	9b84 <SdioCard::stopTransmission(bool)>
      if (!syncDevice()) {
    9e72:	cmp	r0, #0
    9e74:	bne.n	9df6 <SdioCard::readSector(unsigned long, unsigned char*)+0x66>
}
    9e76:	mov	r0, r5
    9e78:	add.w	sp, sp, #512	; 0x200
    9e7c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (!syncDevice()) {
    9e80:	mov	r0, r4
    9e82:	blx	r2
    9e84:	cmp	r0, #0
    9e86:	beq.n	9e76 <SdioCard::readSector(unsigned long, unsigned char*)+0xe6>
    9e88:	b.n	9df6 <SdioCard::readSector(unsigned long, unsigned char*)+0x66>
    9e8a:	nop
    9e8c:	.word	0x113a0011
    9e90:	.word	0x00009c1d
    9e94:	.word	0x20001a56
    9e98:	.word	0x20005c88
    9e9c:	.word	0x2000815b

00009ea0 <SdioCard::writeSector(unsigned long, unsigned char const*)>:
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    9ea0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9ea4:	ldrb	r4, [r0, #8]
    9ea6:	sub.w	sp, sp, #512	; 0x200
    9eaa:	mov	r7, r1
    9eac:	mov	r8, r2
  if (m_sdioConfig.useDma()) {
    9eae:	ands.w	r4, r4, #1
    9eb2:	beq.n	9ef0 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x50>
    if (3 & (uint32_t)src) {
    9eb4:	tst.w	r2, #3
    9eb8:	beq.n	9ec8 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x28>
      memcpy(aligned, src, 512);
    9eba:	mov	r0, sp
    9ebc:	mov	r1, r2
    9ebe:	mov.w	r2, #512	; 0x200
      ptr = aligned;
    9ec2:	mov	r8, r0
      memcpy(aligned, src, 512);
    9ec4:	bl	a0d4 <memcpy>
    if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
    9ec8:	movs	r3, #1
    9eca:	mov	r2, r8
    9ecc:	mov	r1, r7
    9ece:	ldr	r0, [pc, #176]	; (9f80 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xe0>)
    9ed0:	bl	91fc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    9ed4:	mov	r4, r0
    9ed6:	cbnz	r0, 9ee6 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
  m_errorCode = code;
    9ed8:	ldr	r1, [pc, #168]	; (9f84 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xe4>)
    9eda:	movs	r0, #13
  m_errorLine = line;
    9edc:	ldr	r3, [pc, #168]	; (9f88 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xe8>)
    9ede:	mov.w	r2, #1080	; 0x438
  m_errorCode = code;
    9ee2:	strb	r0, [r1, #0]
  m_errorLine = line;
    9ee4:	str	r2, [r3, #0]
}
    9ee6:	mov	r0, r4
    9ee8:	add.w	sp, sp, #512	; 0x200
    9eec:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!m_transferActive) {
    9ef0:	ldr	r5, [pc, #152]	; (9f8c <SdioCard::writeSector(unsigned long, unsigned char const*)+0xec>)
    9ef2:	mov	r6, r0
    9ef4:	ldrb	r3, [r5, #0]
    9ef6:	cbnz	r3, 9f44 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xa4>
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    9ef8:	ldrb	r3, [r6, #9]
    9efa:	cmp	r3, #2
    9efc:	beq.n	9f52 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xb2>
      if (!syncDevice()) {
    9efe:	ldr	r2, [r6, #0]
    9f00:	ldr	r1, [pc, #140]	; (9f90 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xf0>)
    9f02:	ldr	r2, [r2, #28]
    9f04:	cmp	r2, r1
    9f06:	bne.n	9f76 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xd6>
  if (!m_transferActive) {
    9f08:	ldrb	r2, [r5, #0]
    9f0a:	cbnz	r2, 9f5a <SdioCard::writeSector(unsigned long, unsigned char const*)+0xba>
  if (m_curState != IDLE_STATE) {
    9f0c:	cmp	r3, #0
    9f0e:	bne.n	9f68 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xc8>
      if (!writeStart(sector)) {
    9f10:	ldr	r3, [r6, #0]
    9f12:	mov	r1, r7
    9f14:	mov	r0, r6
    9f16:	ldr	r3, [r3, #100]	; 0x64
    9f18:	blx	r3
    9f1a:	cmp	r0, #0
    9f1c:	beq.n	9ee6 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
      m_curState = WRITE_STATE;
    9f1e:	movs	r3, #2
      m_curSector = sector;
    9f20:	str	r7, [r6, #4]
      m_curState = WRITE_STATE;
    9f22:	strb	r3, [r6, #9]
    if (!writeData(src)) {
    9f24:	ldr	r3, [r6, #0]
    9f26:	mov	r1, r8
    9f28:	mov	r0, r6
    9f2a:	ldr	r3, [r3, #96]	; 0x60
    9f2c:	blx	r3
    9f2e:	cmp	r0, #0
    9f30:	beq.n	9ee6 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
    m_curSector++;
    9f32:	ldr	r3, [r6, #4]
  return true;
    9f34:	mov	r4, r0
    m_curSector++;
    9f36:	adds	r3, #1
}
    9f38:	mov	r0, r4
    m_curSector++;
    9f3a:	str	r3, [r6, #4]
}
    9f3c:	add.w	sp, sp, #512	; 0x200
    9f40:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9f44:	bl	8cac <waitTransferComplete() [clone .part.0]>
    if (!waitTransferComplete()) {
    9f48:	cmp	r0, #0
    9f4a:	beq.n	9ee6 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    9f4c:	ldrb	r3, [r6, #9]
    9f4e:	cmp	r3, #2
    9f50:	bne.n	9efe <SdioCard::writeSector(unsigned long, unsigned char const*)+0x5e>
    9f52:	ldr	r2, [r6, #4]
    9f54:	cmp	r2, r7
    9f56:	bne.n	9efe <SdioCard::writeSector(unsigned long, unsigned char const*)+0x5e>
    9f58:	b.n	9f24 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x84>
    9f5a:	bl	8cac <waitTransferComplete() [clone .part.0]>
  if (!waitTransferComplete()) {
    9f5e:	cmp	r0, #0
    9f60:	beq.n	9ee6 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
  if (m_curState != IDLE_STATE) {
    9f62:	ldrb	r3, [r6, #9]
    9f64:	cmp	r3, #0
    9f66:	beq.n	9f10 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x70>
    return stopTransmission(true);
    9f68:	movs	r1, #1
    9f6a:	mov	r0, r6
    9f6c:	bl	9b84 <SdioCard::stopTransmission(bool)>
      if (!syncDevice()) {
    9f70:	cmp	r0, #0
    9f72:	beq.n	9ee6 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
    9f74:	b.n	9f10 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x70>
    9f76:	mov	r0, r6
    9f78:	blx	r2
    9f7a:	cmp	r0, #0
    9f7c:	beq.n	9ee6 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
    9f7e:	b.n	9f10 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x70>
    9f80:	.word	0x183a0001
    9f84:	.word	0x20001a56
    9f88:	.word	0x20005c88
    9f8c:	.word	0x2000815b
    9f90:	.word	0x00009c1d

00009f94 <SdSpiArduinoDriver::activate()>:
 */
#include "SdSpiDriver.h"
#if defined(SD_USE_CUSTOM_SPI) && defined(__arm__) && defined(CORE_TEENSY)
#define USE_BLOCK_TRANSFER 1
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::activate() { m_spi->beginTransaction(m_spiSettings); }
    9f94:	push	{r3, lr}
    9f96:	mov	r3, r0
    9f98:	ldr.w	r0, [r3], #4
    9f9c:	ldmia.w	r3, {r1, r2}
    9fa0:	bl	1d70 <SPIClass::beginTransaction(SPISettings)>
    9fa4:	pop	{r3, pc}
    9fa6:	nop

00009fa8 <SdSpiArduinoDriver::begin(SdSpiConfig)>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::begin(SdSpiConfig spiConfig) {
    9fa8:	sub	sp, #16
    9faa:	add.w	ip, sp, #16
    9fae:	stmdb	ip, {r1, r2, r3}
    9fb2:	mov	r2, r0
  if (spiConfig.spiPort) {
    9fb4:	cbz	r3, 9fc0 <SdSpiArduinoDriver::begin(SdSpiConfig)+0x18>
    m_spi->setSCK(SDCARD_SCK_PIN);
#endif  // defined(SDCARD_SPI) && defined(SDCARD_SS_PIN)
  } else {
    m_spi = &SPI;
  }
  m_spi->begin();
    9fb6:	mov	r0, r3
    9fb8:	str	r3, [r2, #0]
}
    9fba:	add	sp, #16
  m_spi->begin();
    9fbc:	b.w	26c0 <SPIClass::begin()>
    m_spi = &SPI;
    9fc0:	ldr	r3, [pc, #8]	; (9fcc <SdSpiArduinoDriver::begin(SdSpiConfig)+0x24>)
  m_spi->begin();
    9fc2:	mov	r0, r3
    9fc4:	str	r3, [r2, #0]
}
    9fc6:	add	sp, #16
  m_spi->begin();
    9fc8:	b.w	26c0 <SPIClass::begin()>
    9fcc:	.word	0x200057d0

00009fd0 <SdSpiArduinoDriver::deactivate()>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::deactivate() { m_spi->endTransaction(); }
    9fd0:	ldr	r2, [r0, #0]
		if (interruptMasksUsed) {
    9fd2:	ldrb	r3, [r2, #19]
    9fd4:	cbz	r3, a01c <SdSpiArduinoDriver::deactivate()+0x4c>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    9fd6:	lsls	r0, r3, #31
    9fd8:	bpl.n	9fe4 <SdSpiArduinoDriver::deactivate()+0x14>
    9fda:	ldr	r0, [r2, #40]	; 0x28
    9fdc:	mov.w	r1, #3758153728	; 0xe000e000
    9fe0:	str.w	r0, [r1, #256]	; 0x100
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    9fe4:	lsls	r1, r3, #30
    9fe6:	bpl.n	9ff2 <SdSpiArduinoDriver::deactivate()+0x22>
    9fe8:	ldr	r0, [r2, #44]	; 0x2c
    9fea:	mov.w	r1, #3758153728	; 0xe000e000
    9fee:	str.w	r0, [r1, #260]	; 0x104
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    9ff2:	lsls	r0, r3, #29
    9ff4:	bpl.n	a000 <SdSpiArduinoDriver::deactivate()+0x30>
    9ff6:	ldr	r0, [r2, #48]	; 0x30
    9ff8:	mov.w	r1, #3758153728	; 0xe000e000
    9ffc:	str.w	r0, [r1, #264]	; 0x108
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    a000:	lsls	r1, r3, #28
    a002:	bpl.n	a00e <SdSpiArduinoDriver::deactivate()+0x3e>
    a004:	ldr	r0, [r2, #52]	; 0x34
    a006:	mov.w	r1, #3758153728	; 0xe000e000
    a00a:	str.w	r0, [r1, #268]	; 0x10c
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    a00e:	lsls	r3, r3, #27
    a010:	bpl.n	a01c <SdSpiArduinoDriver::deactivate()+0x4c>
    a012:	ldr	r2, [r2, #56]	; 0x38
    a014:	mov.w	r3, #3758153728	; 0xe000e000
    a018:	str.w	r2, [r3, #272]	; 0x110
    a01c:	bx	lr
    a01e:	nop

0000a020 <SdSpiArduinoDriver::end()>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::end() { m_spi->end(); }
    a020:	ldr	r0, [r0, #0]
    a022:	b.w	28fc <SPIClass::end()>
    a026:	nop

0000a028 <SdSpiArduinoDriver::receive()>:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    a028:	ldr	r2, [r0, #0]
		port().TDR = data;
    a02a:	movs	r3, #255	; 0xff
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    a02c:	ldr	r2, [r2, #0]
		port().TDR = data;
    a02e:	str	r3, [r2, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    a030:	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    a032:	tst.w	r3, #2031616	; 0x1f0000
    a036:	beq.n	a030 <SdSpiArduinoDriver::receive()+0x8>
    a038:	ldr	r0, [r2, #116]	; 0x74
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive() { return m_spi->transfer(0XFF); }
    a03a:	uxtb	r0, r0
    a03c:	bx	lr
    a03e:	nop

0000a040 <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>:
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
    a040:	push	{r4, r5, lr}
    a042:	mov	r4, r1
    a044:	sub	sp, #12
    a046:	mov	r5, r0
#if USE_BLOCK_TRANSFER
  memset(buf, 0XFF, count);
    a048:	movs	r1, #255	; 0xff
    a04a:	mov	r0, r4
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
    a04c:	str	r2, [sp, #4]
  memset(buf, 0XFF, count);
    a04e:	bl	e074 <memset>
		transfer(buf, buf, count);
    a052:	ldr	r0, [r5, #0]
    a054:	ldr	r3, [sp, #4]
    a056:	mov	r2, r4
    a058:	mov	r1, r4
    a05a:	bl	28f4 <SPIClass::transfer(void const*, void*, unsigned int)>
  for (size_t i = 0; i < count; i++) {
    buf[i] = m_spi->transfer(0XFF);
  }
#endif  // USE_BLOCK_TRANSFER
  return 0;
}
    a05e:	movs	r0, #0
    a060:	add	sp, #12
    a062:	pop	{r4, r5, pc}

0000a064 <SdSpiArduinoDriver::send(unsigned char)>:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    a064:	ldr	r3, [r0, #0]
    a066:	ldr	r2, [r3, #0]
		port().TDR = data;
    a068:	str	r1, [r2, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    a06a:	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    a06c:	tst.w	r3, #2031616	; 0x1f0000
    a070:	beq.n	a06a <SdSpiArduinoDriver::send(unsigned char)+0x6>
    a072:	ldr	r3, [r2, #116]	; 0x74
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(uint8_t data) { m_spi->transfer(data); }
    a074:	bx	lr
    a076:	nop

0000a078 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf, size_t count) {
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    a078:	subs	r3, r2, #1
    a07a:	cmp.w	r3, #512	; 0x200
void SdSpiArduinoDriver::send(const uint8_t* buf, size_t count) {
    a07e:	push	{r4, r5, lr}
    a080:	mov	r4, r2
    a082:	sub.w	sp, sp, #516	; 0x204
    a086:	mov	r5, r0
  if (0 < count && count <= 512) {
    a088:	bcc.n	a0ae <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x36>
    memcpy(tmp, buf, count);
    m_spi->transfer(tmp, count);
    return;
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    a08a:	cbz	r2, a0a8 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x30>
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    a08c:	ldr	r3, [r0, #0]
    a08e:	subs	r0, r1, #1
    a090:	ldr	r1, [r3, #0]
    a092:	adds	r2, r0, r2
		port().TDR = data;
    a094:	ldrb.w	r3, [r0, #1]!
    a098:	str	r3, [r1, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    a09a:	ldr	r3, [r1, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    a09c:	tst.w	r3, #2031616	; 0x1f0000
    a0a0:	beq.n	a09a <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x22>
    a0a2:	cmp	r0, r2
    a0a4:	ldr	r3, [r1, #116]	; 0x74
    a0a6:	bne.n	a094 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x1c>
    m_spi->transfer(buf[i]);
  }
}
    a0a8:	add.w	sp, sp, #516	; 0x204
    a0ac:	pop	{r4, r5, pc}
    memcpy(tmp, buf, count);
    a0ae:	mov	r0, sp
    a0b0:	bl	a0d4 <memcpy>
		transfer(buf, buf, count);
    a0b4:	mov	r2, sp
    a0b6:	mov	r3, r4
    a0b8:	ldr	r0, [r5, #0]
    a0ba:	mov	r1, r2
    a0bc:	bl	28f4 <SPIClass::transfer(void const*, void*, unsigned int)>
}
    a0c0:	add.w	sp, sp, #516	; 0x204
    a0c4:	pop	{r4, r5, pc}
    a0c6:	nop

0000a0c8 <sdCsInit(unsigned char)>:
 */
#include "SdSpiDriver.h"
#if ENABLE_ARDUINO_FEATURES
#if SD_CHIP_SELECT_MODE == 0
//------------------------------------------------------------------------------
void sdCsInit(SdCsPin_t pin) { pinMode(pin, OUTPUT); }
    a0c8:	movs	r1, #1
    a0ca:	b.w	bc80 <pinMode>
    a0ce:	nop

0000a0d0 <sdCsWrite(unsigned char, bool)>:
//------------------------------------------------------------------------------
void sdCsWrite(SdCsPin_t pin, bool level) { digitalWrite(pin, level); }
    a0d0:	b.w	bc08 <digitalWrite>

0000a0d4 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    a0d4:	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    a0d6:	orr.w	r3, r1, r0
	ands	r3, r3, #3
    a0da:	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    a0de:	bne.n	a1bc <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    a0e0:	subs	r2, #64	; 0x40
	blo	.Lmid_block
    a0e2:	bcc.n	a168 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    a0e4:	ldr.w	r3, [r1], #4
    a0e8:	str.w	r3, [r0], #4
    a0ec:	ldr.w	r3, [r1], #4
    a0f0:	str.w	r3, [r0], #4
    a0f4:	ldr.w	r3, [r1], #4
    a0f8:	str.w	r3, [r0], #4
    a0fc:	ldr.w	r3, [r1], #4
    a100:	str.w	r3, [r0], #4
    a104:	ldr.w	r3, [r1], #4
    a108:	str.w	r3, [r0], #4
    a10c:	ldr.w	r3, [r1], #4
    a110:	str.w	r3, [r0], #4
    a114:	ldr.w	r3, [r1], #4
    a118:	str.w	r3, [r0], #4
    a11c:	ldr.w	r3, [r1], #4
    a120:	str.w	r3, [r0], #4
    a124:	ldr.w	r3, [r1], #4
    a128:	str.w	r3, [r0], #4
    a12c:	ldr.w	r3, [r1], #4
    a130:	str.w	r3, [r0], #4
    a134:	ldr.w	r3, [r1], #4
    a138:	str.w	r3, [r0], #4
    a13c:	ldr.w	r3, [r1], #4
    a140:	str.w	r3, [r0], #4
    a144:	ldr.w	r3, [r1], #4
    a148:	str.w	r3, [r0], #4
    a14c:	ldr.w	r3, [r1], #4
    a150:	str.w	r3, [r0], #4
    a154:	ldr.w	r3, [r1], #4
    a158:	str.w	r3, [r0], #4
    a15c:	ldr.w	r3, [r1], #4
    a160:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    a164:	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    a166:	bcs.n	a0e4 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    a168:	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    a16a:	bcc.n	a190 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    a16c:	ldr.w	r3, [r1], #4
    a170:	str.w	r3, [r0], #4
    a174:	ldr.w	r3, [r1], #4
    a178:	str.w	r3, [r0], #4
    a17c:	ldr.w	r3, [r1], #4
    a180:	str.w	r3, [r0], #4
    a184:	ldr.w	r3, [r1], #4
    a188:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    a18c:	subs	r2, #16
	bhs	.Lmid_block_loop
    a18e:	bcs.n	a16c <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    a190:	adds	r2, #12
	blo	.Lcopy_less_than_4
    a192:	bcc.n	a1a0 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    a194:	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    a198:	str.w	r3, [r0], #4
	subs	r2, #4
    a19c:	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    a19e:	bcs.n	a194 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    a1a0:	adds	r2, #4
	beq	.Ldone
    a1a2:	beq.n	a1b6 <memcpy+0xe2>

	lsls	r2, r2, #31
    a1a4:	lsls	r2, r2, #31
	itt ne
    a1a6:	itt	ne
	ldrbne  r3, [r1], #1
    a1a8:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    a1ac:	strbne.w	r3, [r0], #1

	bcc	.Ldone
    a1b0:	bcc.n	a1b6 <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    a1b2:	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    a1b4:	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    a1b6:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    a1b8:	bx	lr
    a1ba:	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    a1bc:	cmp	r2, #8
	blo	.Lbyte_copy
    a1be:	bcc.n	a1e8 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    a1c0:	lsls	r3, r1, #30
	beq	.Ldst_aligned
    a1c2:	beq.n	a0e0 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    a1c4:	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    a1c8:	beq.n	a0e0 <memcpy+0xc>

	rsb	r3, #4
    a1ca:	rsb	r3, r3, #4
	subs	r2, r3
    a1ce:	subs	r2, r2, r3

	lsls    r3, r3, #31
    a1d0:	lsls	r3, r3, #31
	itt ne
    a1d2:	itt	ne
	ldrbne  r3, [r1], #1
    a1d4:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    a1d8:	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    a1dc:	bcc.n	a0e0 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    a1de:	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    a1e2:	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    a1e6:	b.n	a0e0 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    a1e8:	subs	r2, #4
	blo	.Lcopy_less_than_4
    a1ea:	bcc.n	a1a0 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    a1ec:	subs	r2, #1
	ldrb    r3, [r1], #1
    a1ee:	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    a1f2:	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    a1f6:	bcs.n	a1ec <memcpy+0x118>

	ldrb	r3, [r1]
    a1f8:	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    a1fa:	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    a1fc:	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    a1fe:	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    a200:	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    a202:	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    a204:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    a206:	bx	lr

0000a208 <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    a208:	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    a20a:	ldr	r4, [pc, #80]	; (a25c <rx_queue_transfer+0x54>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    a20c:	mov.w	r5, #3758153728	; 0xe000e000
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    a210:	ldr	r6, [pc, #76]	; (a260 <rx_queue_transfer+0x58>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    a212:	mov.w	r2, #131072	; 0x20000
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    a216:	add.w	r4, r4, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    a21a:	ldr	r7, [pc, #72]	; (a264 <rx_queue_transfer+0x5c>)
    a21c:	add.w	r6, r6, r0, lsl #5
{
    a220:	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
    a222:	str.w	r2, [r5, #396]	; 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    a226:	mov	r1, r4
    a228:	ldrh	r2, [r7, #0]
    a22a:	mov	r0, r6
    a22c:	bl	b75c <usb_prepare_transfer>
	arm_dcache_delete(buffer, rx_packet_size);
    a230:	ldrh	r3, [r7, #0]
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    a232:	add	r3, r4
	asm volatile("": : :"memory");
	asm("dsb");
    a234:	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
    a238:	str.w	r4, [r5, #3932]	; 0xf5c
		location += 32;
    a23c:	adds	r4, #32
	} while (location < end_addr);
    a23e:	cmp	r3, r4
    a240:	bhi.n	a238 <rx_queue_transfer+0x30>
	asm("dsb");
    a242:	dsb	sy
	asm("isb");
    a246:	isb	sy
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    a24a:	movs	r0, #3
    a24c:	mov	r1, r6
    a24e:	bl	b7b4 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    a252:	mov.w	r3, #131072	; 0x20000
    a256:	str.w	r3, [r5, #268]	; 0x10c
}
    a25a:	pop	{r3, r4, r5, r6, r7, pc}
    a25c:	.word	0x20001f20
    a260:	.word	0x20002f20
    a264:	.word	0x2000814a

0000a268 <rx_event>:

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    a268:	ldr	r3, [pc, #144]	; (a2fc <rx_event+0x94>)
{
    a26a:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    a26e:	ldrh	r4, [r3, #0]
    a270:	ldr	r3, [r0, #4]
	int i = t->callback_param;
    a272:	ldr	r5, [r0, #28]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    a274:	ubfx	r3, r3, #16, #15
    a278:	subs	r4, r4, r3
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    a27a:	cmp	r4, #0
    a27c:	ble.n	a2c8 <rx_event+0x60>
		// received a packet with data
		uint32_t head = rx_head;
    a27e:	ldr	r1, [pc, #128]	; (a300 <rx_event+0x98>)
		if (head != rx_tail) {
    a280:	ldr	r0, [pc, #128]	; (a304 <rx_event+0x9c>)
		uint32_t head = rx_head;
    a282:	ldrb	r2, [r1, #0]
		if (head != rx_tail) {
    a284:	ldrb	r0, [r0, #0]
		uint32_t head = rx_head;
    a286:	uxtb	r3, r2
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
    a288:	ldr	r6, [pc, #124]	; (a308 <rx_event+0xa0>)
		if (head != rx_tail) {
    a28a:	cmp	r2, r0
			uint32_t ii = rx_list[head];
    a28c:	ldr	r0, [pc, #124]	; (a30c <rx_event+0xa4>)
		if (head != rx_tail) {
    a28e:	beq.n	a2a0 <rx_event+0x38>
			uint32_t ii = rx_list[head];
    a290:	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
    a294:	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    a298:	rsb	r2, r7, #512	; 0x200
    a29c:	cmp	r4, r2
    a29e:	bls.n	a2d2 <rx_event+0x6a>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    a2a0:	adds	r3, #1
		rx_index[i] = 0;
    a2a2:	movs	r2, #0
		rx_count[i] = len;
    a2a4:	strh.w	r4, [r6, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
    a2a8:	cmp	r3, #8
		rx_index[i] = 0;
    a2aa:	ldr	r6, [pc, #100]	; (a310 <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
    a2ac:	it	hi
    a2ae:	movhi	r3, r2
		rx_index[i] = 0;
    a2b0:	strh.w	r2, [r6, r5, lsl #1]
		rx_list[head] = i;
		rx_head = head;
    a2b4:	it	ls
    a2b6:	uxtbls	r2, r3
		rx_list[head] = i;
    a2b8:	strb	r5, [r0, r3]
		rx_available += len;
    a2ba:	ldr	r3, [pc, #88]	; (a314 <rx_event+0xac>)
		rx_head = head;
    a2bc:	strb	r2, [r1, #0]
		rx_available += len;
    a2be:	ldr	r2, [r3, #0]
    a2c0:	add	r4, r2
    a2c2:	str	r4, [r3, #0]
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
    a2c4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rx_queue_transfer(i);
    a2c8:	mov	r0, r5
}
    a2ca:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_queue_transfer(i);
    a2ce:	b.w	a208 <rx_queue_transfer>
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    a2d2:	add.w	r0, r7, r8, lsl #9
    a2d6:	ldr	r1, [pc, #64]	; (a318 <rx_event+0xb0>)
    a2d8:	mov	r2, r4
				rx_count[ii] = count + len;
    a2da:	add	r7, r4
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    a2dc:	add	r0, r1
    a2de:	add.w	r1, r1, r5, lsl #9
    a2e2:	bl	a0d4 <memcpy>
				rx_available += len;
    a2e6:	ldr	r2, [pc, #44]	; (a314 <rx_event+0xac>)
				rx_queue_transfer(i);
    a2e8:	mov	r0, r5
				rx_count[ii] = count + len;
    a2ea:	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
    a2ee:	ldr	r3, [r2, #0]
    a2f0:	add	r3, r4
}
    a2f2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				rx_available += len;
    a2f6:	str	r3, [r2, #0]
				rx_queue_transfer(i);
    a2f8:	b.w	a208 <rx_queue_transfer>
    a2fc:	.word	0x2000814a
    a300:	.word	0x20008167
    a304:	.word	0x20008169
    a308:	.word	0x20008084
    a30c:	.word	0x200080bc
    a310:	.word	0x200080a0
    a314:	.word	0x2000807c
    a318:	.word	0x20001f20

0000a31c <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    a31c:	ldr	r3, [pc, #116]	; (a394 <usb_serial_flush_callback+0x78>)
    a31e:	ldrb	r2, [r3, #0]
    a320:	cmp	r2, #0
    a322:	bne.n	a392 <usb_serial_flush_callback+0x76>
	if (!usb_configuration) return;
    a324:	and.w	r3, r2, #255	; 0xff
    a328:	ldr	r2, [pc, #108]	; (a398 <usb_serial_flush_callback+0x7c>)
    a32a:	ldrb	r2, [r2, #0]
    a32c:	cbz	r2, a392 <usb_serial_flush_callback+0x76>
{
    a32e:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_available == 0) return;
    a332:	ldr	r5, [pc, #104]	; (a39c <usb_serial_flush_callback+0x80>)
    a334:	ldrh	r2, [r5, #0]
    a336:	cbz	r2, a38e <usb_serial_flush_callback+0x72>
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    a338:	ldr	r6, [pc, #100]	; (a3a0 <usb_serial_flush_callback+0x84>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    a33a:	rsb	r8, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    a33e:	ldr	r7, [pc, #100]	; (a3a4 <usb_serial_flush_callback+0x88>)
    a340:	ldrb	r2, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    a342:	ldr	r4, [pc, #100]	; (a3a8 <usb_serial_flush_callback+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    a344:	add.w	r7, r7, r2, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    a348:	add.w	r4, r4, r2, lsl #11
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    a34c:	mov	r2, r8
    a34e:	mov	r0, r7
    a350:	mov	r1, r4
    a352:	bl	b75c <usb_prepare_transfer>
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    a356:	add.w	r2, r4, r8
	asm volatile("": : :"memory");
	asm("dsb");
    a35a:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    a35e:	mov.w	r3, #3758153728	; 0xe000e000
    a362:	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    a366:	adds	r4, #32
	} while (location < end_addr);
    a368:	cmp	r2, r4
    a36a:	bhi.n	a362 <usb_serial_flush_callback+0x46>
	asm("dsb");
    a36c:	dsb	sy
	asm("isb");
    a370:	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    a374:	movs	r0, #3
    a376:	mov	r1, r7
    a378:	bl	b78c <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    a37c:	ldrb	r3, [r6, #0]
    a37e:	adds	r3, #1
    a380:	uxtb	r3, r3
    a382:	cmp	r3, #3
    a384:	it	hi
    a386:	movhi	r3, #0
    a388:	strb	r3, [r6, #0]
	tx_available = 0;
    a38a:	movs	r3, #0
    a38c:	strh	r3, [r5, #0]
}
    a38e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a392:	bx	lr
    a394:	.word	0x20008170
    a398:	.word	0x20008177
    a39c:	.word	0x20008150
    a3a0:	.word	0x2000816e
    a3a4:	.word	0x20003120
    a3a8:	.word	0x20003240

0000a3ac <usb_serial_write.part.0>:
int usb_serial_write(const void *buffer, uint32_t size)
    a3ac:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a3b0:	sub	sp, #20
	while (size > 0) {
    a3b2:	strd	r1, r0, [sp, #4]
    a3b6:	cmp	r1, #0
    a3b8:	beq.w	a53a <usb_serial_write.part.0+0x18e>
	uint32_t sent=0;
    a3bc:	movs	r3, #0
    a3be:	ldr	r4, [pc, #384]	; (a540 <usb_serial_write.part.0+0x194>)
    a3c0:	ldr.w	r8, [pc, #408]	; a55c <usb_serial_write.part.0+0x1b0>
    a3c4:	ldr.w	sl, [pc, #408]	; a560 <usb_serial_write.part.0+0x1b4>
				wait_begin_at = systick_millis_count;
    a3c8:	ldr	r7, [pc, #376]	; (a544 <usb_serial_write.part.0+0x198>)
	uint32_t sent=0;
    a3ca:	str	r3, [sp, #0]
		tx_noautoflush = 1;
    a3cc:	movs	r3, #1
		transfer_t *xfer = tx_transfer + tx_head;
    a3ce:	ldr	r2, [pc, #376]	; (a548 <usb_serial_write.part.0+0x19c>)
		tx_noautoflush = 1;
    a3d0:	strb	r3, [r4, #0]
		transfer_t *xfer = tx_transfer + tx_head;
    a3d2:	ldr	r3, [pc, #376]	; (a54c <usb_serial_write.part.0+0x1a0>)
    a3d4:	ldrb	r1, [r3, #0]
		while (!tx_available) {
    a3d6:	ldrh.w	r3, [r8]
		transfer_t *xfer = tx_transfer + tx_head;
    a3da:	add.w	r9, r2, r1, lsl #5
		while (!tx_available) {
    a3de:	cmp	r3, #0
    a3e0:	bne.w	a532 <usb_serial_write.part.0+0x186>
		uint32_t wait_begin_at=0;
    a3e4:	mov	r6, r3
		int waiting=0;
    a3e6:	mov	r5, r3
			tx_noautoflush = 0;
    a3e8:	mov	fp, r3
			uint32_t status = usb_transfer_status(xfer);
    a3ea:	mov	r0, r9
    a3ec:	bl	b7d0 <usb_transfer_status>
			if (!(status & 0x80)) {
    a3f0:	ands.w	r0, r0, #128	; 0x80
    a3f4:	beq.w	a510 <usb_serial_write.part.0+0x164>
			asm("dsb" ::: "memory");
    a3f8:	dsb	sy
			if (transmit_previous_timeout) return sent;
    a3fc:	ldrb.w	r3, [sl]
			tx_noautoflush = 0;
    a400:	strb.w	fp, [r4]
			if (!waiting) {
    a404:	cbnz	r5, a408 <usb_serial_write.part.0+0x5c>
				wait_begin_at = systick_millis_count;
    a406:	ldr	r6, [r7, #0]
			if (transmit_previous_timeout) return sent;
    a408:	cmp	r3, #0
    a40a:	bne.n	a508 <usb_serial_write.part.0+0x15c>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    a40c:	ldr	r3, [r7, #0]
    a40e:	subs	r3, r3, r6
    a410:	cmp	r3, #120	; 0x78
    a412:	bhi.w	a524 <usb_serial_write.part.0+0x178>
			if (!usb_configuration) return sent;
    a416:	ldr	r3, [pc, #312]	; (a550 <usb_serial_write.part.0+0x1a4>)
    a418:	ldrb	r3, [r3, #0]
    a41a:	cmp	r3, #0
    a41c:	beq.n	a508 <usb_serial_write.part.0+0x15c>
			yield();
    a41e:	bl	c0e4 <yield>
			tx_noautoflush = 1;
    a422:	movs	r2, #1
		while (!tx_available) {
    a424:	ldrh.w	r3, [r8]
    a428:	mov	r5, r2
			tx_noautoflush = 1;
    a42a:	strb	r2, [r4, #0]
		while (!tx_available) {
    a42c:	cmp	r3, #0
    a42e:	beq.n	a3ea <usb_serial_write.part.0+0x3e>
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    a430:	ldr	r2, [pc, #280]	; (a54c <usb_serial_write.part.0+0x1a0>)
    a432:	rsb	r0, r3, #2048	; 0x800
    a436:	ldrb	r1, [r2, #0]
    a438:	mov	r2, r3
    a43a:	add.w	r0, r0, r1, lsl #11
    a43e:	ldr	r5, [pc, #276]	; (a554 <usb_serial_write.part.0+0x1a8>)
    a440:	lsls	r1, r1, #11
    a442:	add	r0, r5
		if (size >= tx_available) {
    a444:	ldr	r5, [sp, #4]
    a446:	cmp	r5, r2
    a448:	bcs.n	a47a <usb_serial_write.part.0+0xce>
			memcpy(txdata, data, size);
    a44a:	str	r3, [sp, #12]
    a44c:	ldrd	r5, r1, [sp, #4]
    a450:	mov	r2, r5
    a452:	bl	a0d4 <memcpy>
			tx_available -= size;
    a456:	ldr	r3, [sp, #12]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    a458:	mov.w	r2, #3221225472	; 0xc0000000
			tx_available -= size;
    a45c:	subs	r3, r3, r5
    a45e:	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    a462:	ldr	r3, [pc, #244]	; (a558 <usb_serial_write.part.0+0x1ac>)
    a464:	str.w	r2, [r3, #132]	; 0x84
		asm("dsb" ::: "memory");
    a468:	dsb	sy
			sent += size;
    a46c:	ldr	r0, [sp, #0]
		tx_noautoflush = 0;
    a46e:	movs	r3, #0
			sent += size;
    a470:	add	r0, r5
		tx_noautoflush = 0;
    a472:	strb	r3, [r4, #0]
}
    a474:	add	sp, #20
    a476:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    a47a:	ldr	r3, [pc, #216]	; (a554 <usb_serial_write.part.0+0x1a8>)
    a47c:	adds	r5, r1, r3
			memcpy(txdata, data, tx_available);
    a47e:	ldr	r1, [sp, #8]
    a480:	bl	a0d4 <memcpy>
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    a484:	movs	r3, #0
    a486:	mov.w	r2, #2048	; 0x800
    a48a:	mov	r1, r5
    a48c:	mov	r0, r9
    a48e:	bl	b75c <usb_prepare_transfer>
	asm("dsb");
    a492:	dsb	sy
    a496:	add.w	r2, r5, #32
	uint32_t end_addr = (uint32_t)addr + size;
    a49a:	add.w	r3, r5, #2048	; 0x800
    a49e:	cmp	r3, r2
    a4a0:	ite	cc
    a4a2:	movcc	r3, #1
    a4a4:	movcs	r3, #64	; 0x40
		SCB_CACHE_DCCIMVAC = location;
    a4a6:	mov.w	r2, #3758153728	; 0xe000e000
    a4aa:	add.w	r3, r5, r3, lsl #5
    a4ae:	str.w	r5, [r2, #3952]	; 0xf70
		location += 32;
    a4b2:	adds	r5, #32
	} while (location < end_addr);
    a4b4:	cmp	r3, r5
    a4b6:	bne.n	a4ae <usb_serial_write.part.0+0x102>
	asm("dsb");
    a4b8:	dsb	sy
	asm("isb");
    a4bc:	isb	sy
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    a4c0:	movs	r0, #3
    a4c2:	mov	r1, r9
    a4c4:	bl	b78c <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    a4c8:	ldr	r2, [pc, #128]	; (a54c <usb_serial_write.part.0+0x1a0>)
    a4ca:	ldrb	r3, [r2, #0]
    a4cc:	adds	r3, #1
    a4ce:	uxtb	r3, r3
    a4d0:	cmp	r3, #3
    a4d2:	itt	hi
    a4d4:	movhi	r3, #0
    a4d6:	ldrhi	r2, [pc, #116]	; (a54c <usb_serial_write.part.0+0x1a0>)
    a4d8:	strb	r3, [r2, #0]
			size -= tx_available;
    a4da:	ldrh.w	r3, [r8]
    a4de:	ldr	r2, [sp, #4]
    a4e0:	subs	r1, r2, r3
			sent += tx_available;
    a4e2:	ldr	r2, [sp, #0]
    a4e4:	add	r2, r3
			size -= tx_available;
    a4e6:	str	r1, [sp, #4]
			sent += tx_available;
    a4e8:	str	r2, [sp, #0]
			data += tx_available;
    a4ea:	ldr	r2, [sp, #8]
    a4ec:	add	r2, r3
			tx_available = 0;
    a4ee:	movs	r3, #0
			data += tx_available;
    a4f0:	str	r2, [sp, #8]
	USB1_GPTIMER0CTRL = 0;
    a4f2:	ldr	r2, [pc, #100]	; (a558 <usb_serial_write.part.0+0x1ac>)
			tx_available = 0;
    a4f4:	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = 0;
    a4f8:	str.w	r3, [r2, #132]	; 0x84
		asm("dsb" ::: "memory");
    a4fc:	dsb	sy
		tx_noautoflush = 0;
    a500:	strb	r3, [r4, #0]
	while (size > 0) {
    a502:	cmp	r1, #0
    a504:	bne.w	a3cc <usb_serial_write.part.0+0x20>
	return sent;
    a508:	ldr	r0, [sp, #0]
}
    a50a:	add	sp, #20
    a50c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				tx_available = TX_SIZE;
    a510:	mov.w	r2, #2048	; 0x800
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    a514:	ldr	r3, [pc, #52]	; (a54c <usb_serial_write.part.0+0x1a0>)
				transmit_previous_timeout = 0;
    a516:	strb.w	r0, [sl]
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    a51a:	ldrb	r1, [r3, #0]
				break;
    a51c:	mov	r3, r2
				tx_available = TX_SIZE;
    a51e:	strh.w	r2, [r8]
				break;
    a522:	b.n	a43a <usb_serial_write.part.0+0x8e>
				transmit_previous_timeout = 1;
    a524:	movs	r3, #1
				return sent;
    a526:	ldr	r0, [sp, #0]
				transmit_previous_timeout = 1;
    a528:	strb.w	r3, [sl]
}
    a52c:	add	sp, #20
    a52e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    a532:	mov	r2, r3
    a534:	rsb	r0, r3, #2048	; 0x800
    a538:	b.n	a43a <usb_serial_write.part.0+0x8e>
	while (size > 0) {
    a53a:	ldr	r0, [sp, #4]
	return sent;
    a53c:	b.n	a50a <usb_serial_write.part.0+0x15e>
    a53e:	nop
    a540:	.word	0x20008170
    a544:	.word	0x200080e8
    a548:	.word	0x20003120
    a54c:	.word	0x2000816e
    a550:	.word	0x20008177
    a554:	.word	0x20003240
    a558:	.word	0x402e0000
    a55c:	.word	0x20008150
    a560:	.word	0x2000816c

0000a564 <usb_serial_reset>:
}
    a564:	bx	lr
    a566:	nop

0000a568 <usb_serial_configure>:
	if (usb_high_speed) {
    a568:	ldr	r3, [pc, #168]	; (a614 <usb_serial_configure+0xac>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
    a56a:	movs	r1, #0
    a56c:	movs	r2, #128	; 0x80
    a56e:	ldr	r0, [pc, #168]	; (a618 <usb_serial_configure+0xb0>)
{
    a570:	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
    a572:	ldrb	r3, [r3, #0]
	tx_head = 0;
    a574:	movs	r4, #0
		tx_packet_size = CDC_TX_SIZE_480;
    a576:	ldr	r5, [pc, #164]	; (a61c <usb_serial_configure+0xb4>)
	if (usb_high_speed) {
    a578:	cmp	r3, r1
		rx_packet_size = CDC_RX_SIZE_480;
    a57a:	ldr	r6, [pc, #164]	; (a620 <usb_serial_configure+0xb8>)
	if (usb_high_speed) {
    a57c:	ite	eq
    a57e:	moveq	r3, #64	; 0x40
    a580:	movne.w	r3, #512	; 0x200
		tx_packet_size = CDC_TX_SIZE_480;
    a584:	strh	r3, [r5, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    a586:	strh	r3, [r6, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    a588:	bl	e074 <memset>
	tx_head = 0;
    a58c:	ldr	r2, [pc, #148]	; (a624 <usb_serial_configure+0xbc>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    a58e:	mov	r1, r4
	tx_available = 0;
    a590:	ldr	r3, [pc, #148]	; (a628 <usb_serial_configure+0xc0>)
	tx_head = 0;
    a592:	strb	r4, [r2, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    a594:	mov.w	r2, #256	; 0x100
    a598:	ldr	r0, [pc, #144]	; (a62c <usb_serial_configure+0xc4>)
	tx_available = 0;
    a59a:	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    a59c:	bl	e074 <memset>
	memset(rx_count, 0, sizeof(rx_count));
    a5a0:	ldr	r2, [pc, #140]	; (a630 <usb_serial_configure+0xc8>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    a5a2:	movs	r1, #16
	memset(rx_index, 0, sizeof(rx_index));
    a5a4:	ldr	r3, [pc, #140]	; (a634 <usb_serial_configure+0xcc>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    a5a6:	movs	r0, #2
	memset(rx_count, 0, sizeof(rx_count));
    a5a8:	strd	r4, r4, [r2]
    a5ac:	strd	r4, r4, [r2, #8]
	rx_head = 0;
    a5b0:	ldr	r2, [pc, #132]	; (a638 <usb_serial_configure+0xd0>)
	memset(rx_index, 0, sizeof(rx_index));
    a5b2:	strd	r4, r4, [r3]
	rx_head = 0;
    a5b6:	strb	r4, [r2, #0]
	rx_available = 0;
    a5b8:	ldr	r2, [pc, #128]	; (a63c <usb_serial_configure+0xd4>)
	memset(rx_index, 0, sizeof(rx_index));
    a5ba:	strd	r4, r4, [r3, #8]
	rx_tail = 0;
    a5be:	ldr	r3, [pc, #128]	; (a640 <usb_serial_configure+0xd8>)
    a5c0:	strb	r4, [r3, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    a5c2:	mov	r3, r4
	rx_available = 0;
    a5c4:	str	r4, [r2, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    a5c6:	mov	r2, r4
    a5c8:	bl	b628 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    a5cc:	mov	r2, r4
    a5ce:	ldrh	r1, [r6, #0]
    a5d0:	movs	r0, #3
    a5d2:	ldr	r3, [pc, #112]	; (a644 <usb_serial_configure+0xdc>)
    a5d4:	bl	b5c4 <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    a5d8:	mov	r3, r4
    a5da:	movs	r2, #1
    a5dc:	ldrh	r1, [r5, #0]
    a5de:	movs	r0, #3
    a5e0:	bl	b628 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    a5e4:	mov	r0, r4
    a5e6:	adds	r4, #1
    a5e8:	bl	a208 <rx_queue_transfer>
    a5ec:	cmp	r4, #8
    a5ee:	bne.n	a5e4 <usb_serial_configure+0x7c>
	USB1_GPTIMER0CTRL = 0;
    a5f0:	ldr	r3, [pc, #84]	; (a648 <usb_serial_configure+0xe0>)
	USB1_GPTIMER0LD = microseconds - 1;
    a5f2:	movs	r2, #74	; 0x4a
	usb_timer0_callback = callback;
    a5f4:	ldr	r0, [pc, #84]	; (a64c <usb_serial_configure+0xe4>)
	USB1_GPTIMER0CTRL = 0;
    a5f6:	movs	r1, #0
	usb_timer0_callback = callback;
    a5f8:	ldr	r4, [pc, #84]	; (a650 <usb_serial_configure+0xe8>)
    a5fa:	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
    a5fc:	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    a600:	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    a604:	ldr.w	r2, [r3, #328]	; 0x148
    a608:	orr.w	r2, r2, #16777216	; 0x1000000
    a60c:	str.w	r2, [r3, #328]	; 0x148
}
    a610:	pop	{r4, r5, r6, pc}
    a612:	nop
    a614:	.word	0x20008178
    a618:	.word	0x20003120
    a61c:	.word	0x20008154
    a620:	.word	0x2000814a
    a624:	.word	0x2000816e
    a628:	.word	0x20008150
    a62c:	.word	0x20002f20
    a630:	.word	0x20008084
    a634:	.word	0x200080a0
    a638:	.word	0x20008167
    a63c:	.word	0x2000807c
    a640:	.word	0x20008169
    a644:	.word	0x0000a269
    a648:	.word	0x402e0000
    a64c:	.word	0x2000812c
    a650:	.word	0x0000a31d

0000a654 <usb_serial_read>:
{
    a654:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
    a658:	mov.w	r3, #3758153728	; 0xe000e000
    a65c:	mov.w	r2, #131072	; 0x20000
	uint32_t tail = rx_tail;
    a660:	ldr.w	sl, [pc, #200]	; a72c <usb_serial_read+0xd8>
{
    a664:	sub	sp, #12
	NVIC_DISABLE_IRQ(IRQ_USB1);
    a666:	str.w	r2, [r3, #396]	; 0x18c
	while (count < size && tail != rx_head) {
    a66a:	mov	fp, r1
	uint32_t tail = rx_tail;
    a66c:	ldrb.w	r4, [sl]
	while (count < size && tail != rx_head) {
    a670:	cmp	r1, #0
    a672:	beq.n	a714 <usb_serial_read+0xc0>
    a674:	mov	r8, r0
    a676:	uxtb	r4, r4
	uint32_t count=0;
    a678:	movs	r7, #0
		uint32_t avail = rx_count[i] - rx_index[i];
    a67a:	ldr.w	r9, [pc, #180]	; a730 <usb_serial_read+0xdc>
	while (count < size && tail != rx_head) {
    a67e:	ldr	r3, [pc, #152]	; (a718 <usb_serial_read+0xc4>)
		uint32_t len = size - count;
    a680:	sub.w	r2, fp, r7
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    a684:	ldr	r1, [pc, #148]	; (a71c <usb_serial_read+0xc8>)
	while (count < size && tail != rx_head) {
    a686:	ldrb	r3, [r3, #0]
    a688:	cmp	r3, r4
		if (++tail > RX_NUM) tail = 0;
    a68a:	add.w	r4, r4, #1
	while (count < size && tail != rx_head) {
    a68e:	beq.n	a710 <usb_serial_read+0xbc>
		if (++tail > RX_NUM) tail = 0;
    a690:	cmp	r4, #9
		uint32_t i = rx_list[tail];
    a692:	ldr	r3, [pc, #140]	; (a720 <usb_serial_read+0xcc>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    a694:	mov	r0, r8
		if (++tail > RX_NUM) tail = 0;
    a696:	it	cs
    a698:	movcs	r4, #0
		uint32_t i = rx_list[tail];
    a69a:	ldrb	r6, [r3, r4]
		uint32_t avail = rx_count[i] - rx_index[i];
    a69c:	ldrh.w	ip, [r9, r6, lsl #1]
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    a6a0:	add.w	r3, ip, r6, lsl #9
    a6a4:	add	r1, r3
		uint32_t avail = rx_count[i] - rx_index[i];
    a6a6:	ldr	r3, [pc, #124]	; (a724 <usb_serial_read+0xd0>)
    a6a8:	ldrh.w	r5, [r3, r6, lsl #1]
    a6ac:	sub.w	r5, r5, ip
		if (avail > len) {
    a6b0:	cmp	r2, r5
    a6b2:	bcs.n	a6ee <usb_serial_read+0x9a>
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    a6b4:	add.w	ip, ip, r6, lsl #9
    a6b8:	ldr	r1, [pc, #96]	; (a71c <usb_serial_read+0xc8>)
			rx_available -= len;
    a6ba:	ldr	r4, [pc, #108]	; (a728 <usb_serial_read+0xd4>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    a6bc:	add	r1, ip
    a6be:	str	r2, [sp, #4]
    a6c0:	bl	a0d4 <memcpy>
			rx_available -= len;
    a6c4:	ldr	r1, [r4, #0]
			rx_index[i] += len;
    a6c6:	ldrh.w	r5, [r9, r6, lsl #1]
	return count;
    a6ca:	mov	r0, fp
			rx_index[i] += len;
    a6cc:	ldr	r2, [sp, #4]
			rx_available -= len;
    a6ce:	sub.w	r1, r1, fp
			rx_index[i] += len;
    a6d2:	add	r2, r5
			rx_available -= len;
    a6d4:	add	r1, r7
			rx_index[i] += len;
    a6d6:	strh.w	r2, [r9, r6, lsl #1]
			rx_available -= len;
    a6da:	str	r1, [r4, #0]
	NVIC_ENABLE_IRQ(IRQ_USB1);
    a6dc:	mov.w	r3, #3758153728	; 0xe000e000
    a6e0:	mov.w	r2, #131072	; 0x20000
    a6e4:	str.w	r2, [r3, #268]	; 0x10c
}
    a6e8:	add	sp, #12
    a6ea:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    a6ee:	mov	r2, r5
			count += avail;
    a6f0:	add	r7, r5
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    a6f2:	bl	a0d4 <memcpy>
			rx_available -= avail;
    a6f6:	ldr	r1, [pc, #48]	; (a728 <usb_serial_read+0xd4>)
			rx_tail = tail;
    a6f8:	uxtb	r3, r4
			rx_queue_transfer(i);
    a6fa:	mov	r0, r6
			rx_available -= avail;
    a6fc:	ldr	r2, [r1, #0]
			p += avail;
    a6fe:	add	r8, r5
			rx_available -= avail;
    a700:	subs	r2, r2, r5
    a702:	str	r2, [r1, #0]
			rx_tail = tail;
    a704:	strb.w	r3, [sl]
			rx_queue_transfer(i);
    a708:	bl	a208 <rx_queue_transfer>
	while (count < size && tail != rx_head) {
    a70c:	cmp	fp, r7
    a70e:	bhi.n	a67e <usb_serial_read+0x2a>
	return count;
    a710:	mov	r0, r7
    a712:	b.n	a6dc <usb_serial_read+0x88>
	while (count < size && tail != rx_head) {
    a714:	mov	r0, r1
    a716:	b.n	a6dc <usb_serial_read+0x88>
    a718:	.word	0x20008167
    a71c:	.word	0x20001f20
    a720:	.word	0x200080bc
    a724:	.word	0x20008084
    a728:	.word	0x2000807c
    a72c:	.word	0x20008169
    a730:	.word	0x200080a0

0000a734 <usb_serial_peekchar>:
	if (tail == rx_head) return -1;
    a734:	ldr	r3, [pc, #44]	; (a764 <usb_serial_peekchar+0x30>)
	uint32_t tail = rx_tail;
    a736:	ldr	r2, [pc, #48]	; (a768 <usb_serial_peekchar+0x34>)
    a738:	ldrb	r2, [r2, #0]
	if (tail == rx_head) return -1;
    a73a:	ldrb	r1, [r3, #0]
	uint32_t tail = rx_tail;
    a73c:	uxtb	r3, r2
	if (tail == rx_head) return -1;
    a73e:	cmp	r2, r1
    a740:	beq.n	a75e <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
    a742:	adds	r3, #1
	uint32_t i = rx_list[tail];
    a744:	ldr	r0, [pc, #36]	; (a76c <usb_serial_peekchar+0x38>)
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    a746:	ldr	r2, [pc, #40]	; (a770 <usb_serial_peekchar+0x3c>)
	if (++tail > RX_NUM) tail = 0;
    a748:	cmp	r3, #9
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    a74a:	ldr	r1, [pc, #40]	; (a774 <usb_serial_peekchar+0x40>)
	if (++tail > RX_NUM) tail = 0;
    a74c:	it	cs
    a74e:	movcs	r3, #0
	uint32_t i = rx_list[tail];
    a750:	ldrb	r3, [r0, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    a752:	ldrh.w	r1, [r1, r3, lsl #1]
    a756:	add.w	r3, r2, r3, lsl #9
    a75a:	ldrb	r0, [r3, r1]
    a75c:	bx	lr
	if (tail == rx_head) return -1;
    a75e:	mov.w	r0, #4294967295
}
    a762:	bx	lr
    a764:	.word	0x20008167
    a768:	.word	0x20008169
    a76c:	.word	0x200080bc
    a770:	.word	0x20001f20
    a774:	.word	0x200080a0

0000a778 <usb_serial_available>:
	uint32_t n = rx_available;
    a778:	ldr	r3, [pc, #16]	; (a78c <usb_serial_available+0x14>)
{
    a77a:	push	{r4, lr}
	uint32_t n = rx_available;
    a77c:	ldr	r4, [r3, #0]
	if (n == 0) yield();
    a77e:	cbz	r4, a784 <usb_serial_available+0xc>
}
    a780:	mov	r0, r4
    a782:	pop	{r4, pc}
	if (n == 0) yield();
    a784:	bl	c0e4 <yield>
}
    a788:	mov	r0, r4
    a78a:	pop	{r4, pc}
    a78c:	.word	0x2000807c

0000a790 <usb_serial_flush_input>:
{
    a790:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tail = rx_tail;
    a794:	ldr	r6, [pc, #80]	; (a7e8 <usb_serial_flush_input+0x58>)
	while (tail != rx_head) {
    a796:	ldr	r5, [pc, #84]	; (a7ec <usb_serial_flush_input+0x5c>)
	uint32_t tail = rx_tail;
    a798:	ldrb	r3, [r6, #0]
	while (tail != rx_head) {
    a79a:	ldrb	r2, [r5, #0]
    a79c:	cmp	r3, r2
    a79e:	beq.n	a7e4 <usb_serial_flush_input+0x54>
    a7a0:	uxtb	r4, r3
    a7a2:	ldr.w	r9, [pc, #80]	; a7f4 <usb_serial_flush_input+0x64>
    a7a6:	ldr.w	fp, [pc, #80]	; a7f8 <usb_serial_flush_input+0x68>
    a7aa:	ldr.w	r8, [pc, #80]	; a7fc <usb_serial_flush_input+0x6c>
    a7ae:	ldr	r7, [pc, #64]	; (a7f0 <usb_serial_flush_input+0x60>)
		if (++tail > RX_NUM) tail = 0;
    a7b0:	adds	r4, #1
    a7b2:	cmp	r4, #8
		rx_tail = tail;
    a7b4:	uxtb.w	sl, r4
		if (++tail > RX_NUM) tail = 0;
    a7b8:	bls.n	a7be <usb_serial_flush_input+0x2e>
    a7ba:	movs	r4, #0
    a7bc:	mov	sl, r4
		uint32_t i = rx_list[tail];
    a7be:	ldrb.w	r0, [r9, r4]
		rx_available -= rx_count[i] - rx_index[i];
    a7c2:	ldr.w	r3, [fp]
    a7c6:	ldrh.w	r2, [r8, r0, lsl #1]
    a7ca:	ldrh.w	r1, [r7, r0, lsl #1]
    a7ce:	subs	r2, r2, r1
    a7d0:	subs	r3, r3, r2
    a7d2:	str.w	r3, [fp]
		rx_queue_transfer(i);
    a7d6:	bl	a208 <rx_queue_transfer>
		rx_tail = tail;
    a7da:	strb.w	sl, [r6]
	while (tail != rx_head) {
    a7de:	ldrb	r3, [r5, #0]
    a7e0:	cmp	r3, r4
    a7e2:	bne.n	a7b0 <usb_serial_flush_input+0x20>
}
    a7e4:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a7e8:	.word	0x20008169
    a7ec:	.word	0x20008167
    a7f0:	.word	0x200080a0
    a7f4:	.word	0x200080bc
    a7f8:	.word	0x2000807c
    a7fc:	.word	0x20008084

0000a800 <usb_serial_getchar>:
{
    a800:	push	{lr}
    a802:	sub	sp, #12
	if (usb_serial_read(&c, 1)) return c;
    a804:	movs	r1, #1
    a806:	add.w	r0, sp, #7
    a80a:	bl	a654 <usb_serial_read>
    a80e:	cbz	r0, a81a <usb_serial_getchar+0x1a>
    a810:	ldrb.w	r0, [sp, #7]
}
    a814:	add	sp, #12
    a816:	ldr.w	pc, [sp], #4
	return -1;
    a81a:	mov.w	r0, #4294967295
    a81e:	b.n	a814 <usb_serial_getchar+0x14>

0000a820 <usb_serial_putchar>:
	if (!usb_configuration) return 0;
    a820:	ldr	r3, [pc, #36]	; (a848 <usb_serial_putchar+0x28>)
{
    a822:	push	{lr}
    a824:	sub	sp, #12
	if (!usb_configuration) return 0;
    a826:	ldrb	r3, [r3, #0]
{
    a828:	strb.w	r0, [sp, #7]
	if (!usb_configuration) return 0;
    a82c:	cbz	r3, a83e <usb_serial_putchar+0x1e>
    a82e:	movs	r1, #1
    a830:	add.w	r0, sp, #7
    a834:	bl	a3ac <usb_serial_write.part.0>
}
    a838:	add	sp, #12
    a83a:	ldr.w	pc, [sp], #4
    a83e:	and.w	r0, r3, #255	; 0xff
    a842:	add	sp, #12
    a844:	ldr.w	pc, [sp], #4
    a848:	.word	0x20008177

0000a84c <usb_serial_write>:
	if (!usb_configuration) return 0;
    a84c:	ldr	r3, [pc, #16]	; (a860 <usb_serial_write+0x14>)
    a84e:	ldrb	r3, [r3, #0]
    a850:	and.w	r2, r3, #255	; 0xff
    a854:	cbz	r3, a85a <usb_serial_write+0xe>
    a856:	b.w	a3ac <usb_serial_write.part.0>
}
    a85a:	mov	r0, r2
    a85c:	bx	lr
    a85e:	nop
    a860:	.word	0x20008177

0000a864 <usb_serial_write_buffer_free>:
{
    a864:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (uint32_t i=0; i < TX_NUM; i++) {
    a868:	movs	r4, #0
	tx_noautoflush = 1;
    a86a:	ldr.w	r8, [pc, #68]	; a8b0 <usb_serial_write_buffer_free+0x4c>
    a86e:	movs	r3, #1
    a870:	ldr	r5, [pc, #52]	; (a8a8 <usb_serial_write_buffer_free+0x44>)
	uint32_t sum = 0;
    a872:	mov	r7, r4
    a874:	ldr	r6, [pc, #52]	; (a8ac <usb_serial_write_buffer_free+0x48>)
	tx_noautoflush = 1;
    a876:	strb.w	r3, [r8]
		if (i == tx_head) continue;
    a87a:	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    a87c:	mov	r0, r5
	for (uint32_t i=0; i < TX_NUM; i++) {
    a87e:	adds	r5, #32
		if (i == tx_head) continue;
    a880:	cmp	r3, r4
	for (uint32_t i=0; i < TX_NUM; i++) {
    a882:	add.w	r4, r4, #1
		if (i == tx_head) continue;
    a886:	beq.n	a894 <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    a888:	bl	b7d0 <usb_transfer_status>
    a88c:	lsls	r3, r0, #24
    a88e:	it	pl
    a890:	addpl.w	r7, r7, #2048	; 0x800
	for (uint32_t i=0; i < TX_NUM; i++) {
    a894:	cmp	r4, #4
    a896:	bne.n	a87a <usb_serial_write_buffer_free+0x16>
	asm("dsb" ::: "memory");
    a898:	dsb	sy
	tx_noautoflush = 0;
    a89c:	movs	r3, #0
}
    a89e:	mov	r0, r7
	tx_noautoflush = 0;
    a8a0:	strb.w	r3, [r8]
}
    a8a4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a8a8:	.word	0x20003120
    a8ac:	.word	0x2000816e
    a8b0:	.word	0x20008170

0000a8b4 <usb_serial_flush_output>:
{
    a8b4:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!usb_configuration) return;
    a8b8:	ldr	r3, [pc, #116]	; (a930 <usb_serial_flush_output+0x7c>)
    a8ba:	ldrb	r3, [r3, #0]
    a8bc:	cbz	r3, a8c4 <usb_serial_flush_output+0x10>
	if (tx_available == 0) return;
    a8be:	ldr	r5, [pc, #116]	; (a934 <usb_serial_flush_output+0x80>)
    a8c0:	ldrh	r2, [r5, #0]
    a8c2:	cbnz	r2, a8c8 <usb_serial_flush_output+0x14>
}
    a8c4:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	transfer_t *xfer = tx_transfer + tx_head;
    a8c8:	ldr	r6, [pc, #108]	; (a938 <usb_serial_flush_output+0x84>)
	uint32_t txnum = TX_SIZE - tx_available;
    a8ca:	rsb	r9, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    a8ce:	ldr	r1, [pc, #108]	; (a93c <usb_serial_flush_output+0x88>)
    a8d0:	ldrb	r3, [r6, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    a8d2:	mov	r2, r9
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    a8d4:	ldr	r4, [pc, #104]	; (a940 <usb_serial_flush_output+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    a8d6:	add.w	r8, r1, r3, lsl #5
	tx_noautoflush = 1;
    a8da:	ldr	r7, [pc, #104]	; (a944 <usb_serial_flush_output+0x90>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    a8dc:	add.w	r4, r4, r3, lsl #11
	tx_noautoflush = 1;
    a8e0:	movs	r3, #1
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    a8e2:	mov	r0, r8
	tx_noautoflush = 1;
    a8e4:	strb	r3, [r7, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    a8e6:	mov	r1, r4
    a8e8:	movs	r3, #0
    a8ea:	bl	b75c <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    a8ee:	add.w	r2, r4, r9
	asm("dsb");
    a8f2:	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    a8f6:	mov.w	r3, #3758153728	; 0xe000e000
    a8fa:	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    a8fe:	adds	r4, #32
	} while (location < end_addr);
    a900:	cmp	r2, r4
    a902:	bhi.n	a8fa <usb_serial_flush_output+0x46>
	asm("dsb");
    a904:	dsb	sy
	asm("isb");
    a908:	isb	sy
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    a90c:	movs	r0, #3
    a90e:	mov	r1, r8
    a910:	bl	b78c <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    a914:	ldrb	r3, [r6, #0]
    a916:	adds	r3, #1
    a918:	uxtb	r3, r3
    a91a:	cmp	r3, #3
    a91c:	it	hi
    a91e:	movhi	r3, #0
    a920:	strb	r3, [r6, #0]
	tx_available = 0;
    a922:	movs	r3, #0
    a924:	strh	r3, [r5, #0]
	asm("dsb" ::: "memory");
    a926:	dsb	sy
	tx_noautoflush = 0;
    a92a:	strb	r3, [r7, #0]
}
    a92c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    a930:	.word	0x20008177
    a934:	.word	0x20008150
    a938:	.word	0x2000816e
    a93c:	.word	0x20003120
    a940:	.word	0x20003240
    a944:	.word	0x20008170

0000a948 <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    a948:	ldr	r1, [pc, #648]	; (abd4 <set_arm_clock+0x28c>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    a94a:	ldr	r3, [pc, #652]	; (abd8 <set_arm_clock+0x290>)
	if (frequency > 528000000) {
    a94c:	cmp	r0, r1
{
    a94e:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t dcdc = DCDC_REG3;
    a952:	ldr	r4, [pc, #648]	; (abdc <set_arm_clock+0x294>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    a954:	ldr	r6, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    a956:	ldr	r2, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    a958:	ldr.w	r8, [r4, #12]
	if (frequency > 528000000) {
    a95c:	bls.n	a996 <set_arm_clock+0x4e>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    a95e:	ldr	r3, [pc, #640]	; (abe0 <set_arm_clock+0x298>)
    a960:	cmp	r0, r3
    a962:	bls.w	ab6a <set_arm_clock+0x222>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    a966:	subs	r3, r0, r3
    a968:	ldr	r1, [pc, #632]	; (abe4 <set_arm_clock+0x29c>)
    a96a:	lsrs	r3, r3, #8
    a96c:	umull	r1, r3, r1, r3
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    a970:	movw	r1, #1575	; 0x627
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    a974:	lsrs	r3, r3, #7
    a976:	add.w	r3, r3, r3, lsl #2
    a97a:	add.w	r3, r3, r3, lsl #2
    a97e:	addw	r3, r3, #1250	; 0x4e2
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    a982:	cmp	r3, r1
    a984:	it	cs
    a986:	movcs	r3, r1
    a988:	sub.w	r7, r3, #800	; 0x320
    a98c:	ldr	r3, [pc, #600]	; (abe8 <set_arm_clock+0x2a0>)
    a98e:	umull	r3, r7, r3, r7
    a992:	lsrs	r7, r7, #3
    a994:	b.n	a9a0 <set_arm_clock+0x58>
	} else if (frequency <= 24000000) {
    a996:	ldr	r7, [pc, #596]	; (abec <set_arm_clock+0x2a4>)
    a998:	cmp	r0, r7
    a99a:	ite	hi
    a99c:	movhi	r7, #14
    a99e:	movls	r7, #6
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    a9a0:	ldr	r1, [pc, #564]	; (abd8 <set_arm_clock+0x290>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    a9a2:	and.w	r9, r8, #31
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    a9a6:	ldr.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    a9aa:	cmp	r9, r7
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    a9ac:	orr.w	r3, r3, #192	; 0xc0
    a9b0:	str.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    a9b4:	bcs.n	a9d0 <set_arm_clock+0x88>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    a9b6:	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    a9ba:	sub.w	r1, r1, #507904	; 0x7c000
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    a9be:	orr.w	r8, r8, r7
		DCDC_REG3 = dcdc;
    a9c2:	str.w	r8, [r1, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    a9c6:	ldr	r3, [r1, #0]
    a9c8:	cmp	r3, #0
    a9ca:	bge.n	a9c6 <set_arm_clock+0x7e>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    a9cc:	and.w	r9, r8, #31
	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    a9d0:	ands.w	r3, r6, #33554432	; 0x2000000
    a9d4:	bne.n	aa20 <set_arm_clock+0xd8>
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    a9d6:	ldr	r1, [pc, #536]	; (abf0 <set_arm_clock+0x2a8>)
    a9d8:	ldr	r4, [r1, #16]
    a9da:	ldr	r1, [pc, #536]	; (abf4 <set_arm_clock+0x2ac>)
    a9dc:	bics	r1, r4
    a9de:	beq.w	abb6 <set_arm_clock+0x26e>
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    a9e2:	eor.w	r1, r2, #4096	; 0x1000
    a9e6:	mov	r4, r6
    a9e8:	mov.w	r5, #4096	; 0x1000
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    a9ec:	tst.w	r4, #939524096	; 0x38000000
    a9f0:	beq.n	a9fc <set_arm_clock+0xb4>
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    a9f2:	bic.w	r6, r6, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    a9f6:	orrs	r6, r3
			CCM_CBCDR = cbcdr;
    a9f8:	ldr	r3, [pc, #476]	; (abd8 <set_arm_clock+0x290>)
    a9fa:	str	r6, [r3, #20]
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    a9fc:	tst.w	r1, #12288	; 0x3000
    aa00:	beq.n	aa12 <set_arm_clock+0xca>
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    aa02:	bic.w	r2, r2, #12288	; 0x3000
			CCM_CBCMR = cbcmr;
    aa06:	ldr	r1, [pc, #464]	; (abd8 <set_arm_clock+0x290>)
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    aa08:	orrs	r2, r5
			CCM_CBCMR = cbcmr;
    aa0a:	str	r2, [r1, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    aa0c:	ldr	r3, [r1, #72]	; 0x48
    aa0e:	lsls	r2, r3, #28
    aa10:	bmi.n	aa0c <set_arm_clock+0xc4>
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    aa12:	orr.w	r6, r6, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    aa16:	ldr	r2, [pc, #448]	; (abd8 <set_arm_clock+0x290>)
    aa18:	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    aa1a:	ldr	r3, [r2, #72]	; 0x48
    aa1c:	lsls	r3, r3, #26
    aa1e:	bmi.n	aa1a <set_arm_clock+0xd2>
	while (frequency * div_arm * div_ahb < 648000000) {
    aa20:	ldr	r4, [pc, #468]	; (abf8 <set_arm_clock+0x2b0>)
    aa22:	cmp	r0, r4
    aa24:	bhi.w	abc4 <set_arm_clock+0x27c>
	uint32_t div_ahb = 1;
    aa28:	mov.w	ip, #1
    aa2c:	mov	r1, r0
	uint32_t div_arm = 1;
    aa2e:	mov	r3, ip
	while (frequency * div_arm * div_ahb < 648000000) {
    aa30:	mla	r2, r3, r1, r1
			div_arm = div_arm + 1;
    aa34:	add.w	lr, r3, #1
				div_ahb = div_ahb + 1;
    aa38:	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    aa3c:	cmp	r2, r4
    aa3e:	bhi.n	aa72 <set_arm_clock+0x12a>
		if (div_arm < 8) {
    aa40:	cmp.w	lr, #8
				div_arm = 1;
    aa44:	mov.w	r3, #1
		if (div_arm < 8) {
    aa48:	bne.w	ab66 <set_arm_clock+0x21e>
			if (div_ahb < 5) {
    aa4c:	cmp.w	ip, #4
    aa50:	bhi.w	ab76 <set_arm_clock+0x22e>
	while (frequency * div_arm * div_ahb < 648000000) {
    aa54:	adds	r2, r1, r0
    aa56:	cmp	r2, r4
    aa58:	bhi.w	aba4 <set_arm_clock+0x25c>
    aa5c:	mul.w	r1, r5, r0
				div_ahb = div_ahb + 1;
    aa60:	mov	ip, r5
			div_arm = div_arm + 1;
    aa62:	add.w	lr, r3, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    aa66:	mla	r2, r3, r1, r1
				div_ahb = div_ahb + 1;
    aa6a:	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    aa6e:	cmp	r2, r4
    aa70:	bls.n	aa40 <set_arm_clock+0xf8>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    aa72:	add.w	r1, ip, #4294967295
    aa76:	lsls	r4, r1, #10
    aa78:	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    aa7c:	ldr	r0, [pc, #380]	; (abfc <set_arm_clock+0x2b4>)
    aa7e:	add	r0, r2
	if (mult > 108) mult = 108;
    aa80:	ldr	r2, [pc, #380]	; (ac00 <set_arm_clock+0x2b8>)
    aa82:	cmp	r0, r2
    aa84:	bls.n	ab86 <set_arm_clock+0x23e>
    aa86:	ldr.w	sl, [pc, #420]	; ac2c <set_arm_clock+0x2e4>
    aa8a:	movs	r2, #108	; 0x6c
    aa8c:	ldr	r0, [pc, #372]	; (ac04 <set_arm_clock+0x2bc>)
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    aa8e:	ldr	r5, [pc, #352]	; (abf0 <set_arm_clock+0x2a8>)
	frequency = mult * 12000000 / div_arm / div_ahb;
    aa90:	udiv	r0, r0, lr
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    aa94:	ldr.w	lr, [r5]
	frequency = mult * 12000000 / div_arm / div_ahb;
    aa98:	udiv	r0, r0, ip
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    aa9c:	ldr.w	ip, [pc, #400]	; ac30 <set_arm_clock+0x2e8>
    aaa0:	and.w	ip, lr, ip
    aaa4:	cmp	ip, sl
    aaa6:	beq.n	aabc <set_arm_clock+0x174>
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    aaa8:	orr.w	r2, r2, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    aaac:	mov.w	ip, #4096	; 0x1000
    aab0:	str.w	ip, [r5]
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    aab4:	str	r2, [r5, #0]
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    aab6:	ldr	r2, [r5, #0]
    aab8:	cmp	r2, #0
    aaba:	bge.n	aab6 <set_arm_clock+0x16e>
	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    aabc:	ldr	r2, [pc, #280]	; (abd8 <set_arm_clock+0x290>)
    aabe:	ldr	r5, [r2, #16]
    aac0:	and.w	r5, r5, #7
    aac4:	cmp	r5, r3
    aac6:	beq.n	aad0 <set_arm_clock+0x188>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    aac8:	str	r3, [r2, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    aaca:	ldr	r3, [r2, #72]	; 0x48
    aacc:	lsls	r5, r3, #15
    aace:	bmi.n	aaca <set_arm_clock+0x182>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    aad0:	tst.w	r1, #7168	; 0x1c00
    aad4:	beq.n	aaea <set_arm_clock+0x1a2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    aad6:	bic.w	r6, r6, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    aada:	and.w	r4, r4, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
    aade:	ldr	r2, [pc, #248]	; (abd8 <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    aae0:	orrs	r6, r4
		CCM_CBCDR = cbcdr;
    aae2:	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    aae4:	ldr	r3, [r2, #72]	; 0x48
    aae6:	lsls	r1, r3, #30
    aae8:	bmi.n	aae4 <set_arm_clock+0x19c>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    aaea:	ldr	r1, [pc, #284]	; (ac08 <set_arm_clock+0x2c0>)
	if (div_ipg > 4) div_ipg = 4;
    aaec:	ldr	r2, [pc, #284]	; (ac0c <set_arm_clock+0x2c4>)
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    aaee:	add	r1, r0
	if (div_ipg > 4) div_ipg = 4;
    aaf0:	cmp	r1, r2
    aaf2:	bhi.n	ab6e <set_arm_clock+0x226>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    aaf4:	ldr	r3, [pc, #280]	; (ac10 <set_arm_clock+0x2c8>)
    aaf6:	lsrs	r1, r1, #7
    aaf8:	umull	r3, r1, r3, r1
    aafc:	lsrs	r1, r1, #12
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    aafe:	subs	r3, r1, #1
    ab00:	lsls	r3, r3, #8
    ab02:	eor.w	r2, r6, r3
    ab06:	tst.w	r2, #768	; 0x300
    ab0a:	beq.n	ab1a <set_arm_clock+0x1d2>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    ab0c:	bic.w	r6, r6, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    ab10:	and.w	r3, r3, #768	; 0x300
		CCM_CBCDR = cbcdr;
    ab14:	ldr	r2, [pc, #192]	; (abd8 <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    ab16:	orrs	r3, r6
		CCM_CBCDR = cbcdr;
    ab18:	str	r3, [r2, #20]
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    ab1a:	ldr	r2, [pc, #188]	; (abd8 <set_arm_clock+0x290>)
    ab1c:	ldr	r3, [r2, #20]
    ab1e:	bic.w	r3, r3, #33554432	; 0x2000000
    ab22:	str	r3, [r2, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    ab24:	ldr	r3, [r2, #72]	; 0x48
    ab26:	lsls	r3, r3, #26
    ab28:	bmi.n	ab24 <set_arm_clock+0x1dc>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    ab2a:	ldr	r3, [pc, #232]	; (ac14 <set_arm_clock+0x2cc>)
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    ab2c:	cmp	r7, r9
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    ab2e:	umull	r2, r3, r3, r0
    ab32:	mov.w	r2, #4294967295
    ab36:	mov.w	r3, r3, lsr #18
	F_BUS_ACTUAL = frequency / div_ipg;
    ab3a:	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    ab3e:	udiv	r3, r2, r3
	F_CPU_ACTUAL = frequency;
    ab42:	ldr	r2, [pc, #212]	; (ac18 <set_arm_clock+0x2d0>)
    ab44:	str	r0, [r2, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
    ab46:	ldr	r2, [pc, #212]	; (ac1c <set_arm_clock+0x2d4>)
    ab48:	str	r1, [r2, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    ab4a:	ldr	r2, [pc, #212]	; (ac20 <set_arm_clock+0x2d8>)
    ab4c:	str	r3, [r2, #0]
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    ab4e:	bcs.n	ab62 <set_arm_clock+0x21a>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    ab50:	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    ab54:	ldr	r2, [pc, #132]	; (abdc <set_arm_clock+0x294>)
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    ab56:	orr.w	r7, r8, r7
		DCDC_REG3 = dcdc;
    ab5a:	str	r7, [r2, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    ab5c:	ldr	r3, [r2, #0]
    ab5e:	cmp	r3, #0
    ab60:	bge.n	ab5c <set_arm_clock+0x214>
	}

	return frequency;
}
    ab62:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ab66:	mov	r3, lr
    ab68:	b.n	aa30 <set_arm_clock+0xe8>
    ab6a:	movs	r7, #18
    ab6c:	b.n	a9a0 <set_arm_clock+0x58>
    ab6e:	mov.w	r3, #768	; 0x300
	if (div_ipg > 4) div_ipg = 4;
    ab72:	movs	r1, #4
    ab74:	b.n	ab02 <set_arm_clock+0x1ba>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    ab76:	add.w	r1, ip, #4294967295
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    ab7a:	ldr	r0, [pc, #128]	; (abfc <set_arm_clock+0x2b4>)
    ab7c:	movs	r3, #7
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    ab7e:	lsls	r4, r1, #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    ab80:	add	r0, r2
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    ab82:	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    ab86:	ldr	r2, [pc, #156]	; (ac24 <set_arm_clock+0x2dc>)
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    ab88:	ldr.w	sl, [pc, #168]	; ac34 <set_arm_clock+0x2ec>
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    ab8c:	umull	r2, r0, r2, r0
    ab90:	lsrs	r2, r0, #20
	frequency = mult * 12000000 / div_arm / div_ahb;
    ab92:	ldr	r0, [pc, #148]	; (ac28 <set_arm_clock+0x2e0>)
    ab94:	cmp	r2, #54	; 0x36
    ab96:	it	cc
    ab98:	movcc	r2, #54	; 0x36
    ab9a:	mul.w	r0, r2, r0
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    ab9e:	orr.w	sl, r2, sl
    aba2:	b.n	aa8e <set_arm_clock+0x146>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    aba4:	mov.w	r4, ip, lsl #10
    aba8:	movs	r3, #0
    abaa:	eor.w	r1, r6, ip, lsl #10
				div_arm = 1;
    abae:	mov.w	lr, #1
				div_ahb = div_ahb + 1;
    abb2:	mov	ip, r5
    abb4:	b.n	aa7c <set_arm_clock+0x134>
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    abb6:	mov	r5, r3
    abb8:	eor.w	r4, r6, #402653184	; 0x18000000
    abbc:	mov	r1, r2
    abbe:	mov.w	r3, #402653184	; 0x18000000
    abc2:	b.n	a9ec <set_arm_clock+0xa4>
	while (frequency * div_arm * div_ahb < 648000000) {
    abc4:	movs	r4, #0
	uint32_t div_ahb = 1;
    abc6:	mov.w	ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    abca:	mov	r2, r0
    abcc:	mov	r1, r6
    abce:	mov	r3, r4
	uint32_t div_arm = 1;
    abd0:	mov	lr, ip
    abd2:	b.n	aa7c <set_arm_clock+0x134>
    abd4:	.word	0x1f78a400
    abd8:	.word	0x400fc000
    abdc:	.word	0x40080000
    abe0:	.word	0x23c34600
    abe4:	.word	0x004cb223
    abe8:	.word	0x51eb851f
    abec:	.word	0x016e3600
    abf0:	.word	0x400d8000
    abf4:	.word	0x80003040
    abf8:	.word	0x269fb1ff
    abfc:	.word	0x005b8d80
    ac00:	.word	0x4df67eff
    ac04:	.word	0x4d3f6400
    ac08:	.word	0x08f0d17f
    ac0c:	.word	0x2cb4177f
    ac10:	.word	0x00e5109f
    ac14:	.word	0x431bde83
    ac18:	.word	0x20001460
    ac1c:	.word	0x2000145c
    ac20:	.word	0x200080e0
    ac24:	.word	0x165e9f81
    ac28:	.word	0x00b71b00
    ac2c:	.word	0x8000206c
    ac30:	.word	0x8001307f
    ac34:	.word	0x80002000

0000ac38 <endpoint0_receive>:
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
	while (USB1_ENDPTPRIME) ;
}

static void endpoint0_receive(void *data, uint32_t len, int notify)
{
    ac38:	push	{r4, r5}
	//printf("rx %lu\n", len);
	if (len > 0) {
    ac3a:	cmp	r1, #0
    ac3c:	bne.n	aca2 <endpoint0_receive+0x6a>
    ac3e:	ldr	r4, [pc, #172]	; (acec <endpoint0_receive+0xb4>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    ac40:	ldr	r3, [pc, #172]	; (acf0 <endpoint0_receive+0xb8>)
    ac42:	movs	r1, #1
    ac44:	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    ac46:	cbz	r2, ac80 <endpoint0_receive+0x48>
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    ac48:	ldr	r1, [pc, #168]	; (acf4 <endpoint0_receive+0xbc>)
	endpoint0_transfer_ack.pointer0 = 0;
    ac4a:	movs	r2, #0
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    ac4c:	movw	r5, #32896	; 0x8080
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    ac50:	mov.w	r0, #65537	; 0x10001
	endpoint0_transfer_ack.pointer0 = 0;
    ac54:	str	r2, [r3, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    ac56:	str	r5, [r3, #4]
	endpoint_queue_head[1].status = 0;
    ac58:	strd	r3, r2, [r4, #72]	; 0x48
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    ac5c:	str.w	r0, [r1, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    ac60:	mov.w	r2, #65536	; 0x10000
	USB1_ENDPTPRIME |= (1<<16);
    ac64:	ldr.w	r3, [r1, #432]	; 0x1b0
    ac68:	orrs	r3, r2
    ac6a:	str.w	r3, [r1, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    ac6e:	ldr	r3, [pc, #136]	; (acf8 <endpoint0_receive+0xc0>)
	while (USB1_ENDPTPRIME) ;
    ac70:	ldr	r1, [pc, #128]	; (acf4 <endpoint0_receive+0xbc>)
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    ac72:	str	r2, [r3, #0]
	while (USB1_ENDPTPRIME) ;
    ac74:	ldr.w	r3, [r1, #432]	; 0x1b0
    ac78:	cmp	r3, #0
    ac7a:	bne.n	ac74 <endpoint0_receive+0x3c>
}
    ac7c:	pop	{r4, r5}
    ac7e:	bx	lr
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    ac80:	ldr	r1, [pc, #112]	; (acf4 <endpoint0_receive+0xbc>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    ac82:	movs	r5, #128	; 0x80
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    ac84:	mov.w	r0, #65537	; 0x10001
	endpoint0_transfer_ack.pointer0 = 0;
    ac88:	str	r2, [r3, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    ac8a:	str	r5, [r3, #4]
	endpoint_queue_head[1].status = 0;
    ac8c:	strd	r3, r2, [r4, #72]	; 0x48
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    ac90:	str.w	r0, [r1, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    ac94:	ldr.w	r3, [r1, #432]	; 0x1b0
    ac98:	orr.w	r3, r3, #65536	; 0x10000
    ac9c:	str.w	r3, [r1, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    aca0:	b.n	ac6e <endpoint0_receive+0x36>
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    aca2:	lsls	r1, r1, #16
		endpoint0_transfer_data.next = 1;
    aca4:	ldr	r3, [pc, #84]	; (acfc <endpoint0_receive+0xc4>)
    aca6:	movs	r4, #1
		endpoint_queue_head[0].status = 0;
    aca8:	movs	r5, #0
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    acaa:	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    acae:	str	r0, [r3, #8]
		endpoint0_transfer_data.next = 1;
    acb0:	str	r4, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    acb2:	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    acb4:	add.w	r1, r0, #4096	; 0x1000
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    acb8:	ldr	r4, [pc, #48]	; (acec <endpoint0_receive+0xb4>)
		endpoint0_transfer_data.pointer1 = addr + 4096;
    acba:	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    acbc:	add.w	r1, r0, #8192	; 0x2000
		endpoint_queue_head[0].status = 0;
    acc0:	str	r5, [r4, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    acc2:	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    acc4:	add.w	r1, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    acc8:	add.w	r0, r0, #16384	; 0x4000
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    accc:	str	r3, [r4, #8]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    acce:	str	r1, [r3, #20]
		USB1_ENDPTPRIME |= (1<<0);
    acd0:	ldr	r1, [pc, #32]	; (acf4 <endpoint0_receive+0xbc>)
		endpoint0_transfer_data.pointer4 = addr + 16384;
    acd2:	str	r0, [r3, #24]
		USB1_ENDPTPRIME |= (1<<0);
    acd4:	ldr.w	r3, [r1, #432]	; 0x1b0
    acd8:	orr.w	r3, r3, #1
    acdc:	str.w	r3, [r1, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    ace0:	ldr.w	r3, [r1, #432]	; 0x1b0
    ace4:	cmp	r3, #0
    ace6:	bne.n	ace0 <endpoint0_receive+0xa8>
    ace8:	b.n	ac40 <endpoint0_receive+0x8>
    acea:	nop
    acec:	.word	0x20000000
    acf0:	.word	0x20001ee0
    acf4:	.word	0x402e0000
    acf8:	.word	0x20007990
    acfc:	.word	0x20001f00

0000ad00 <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    ad00:	ldr	r3, [r0, #56]	; 0x38
{
    ad02:	push	{r4, r5, r6, r7}
	if (endpoint->callback_function) {
    ad04:	cbz	r3, ad0e <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    ad06:	ldr	r3, [r2, #4]
    ad08:	orr.w	r3, r3, #32768	; 0x8000
    ad0c:	str	r3, [r2, #4]
	}
	__disable_irq();
    ad0e:	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    ad10:	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    ad12:	cbz	r4, ad64 <schedule_transfer+0x64>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    ad14:	ldr	r3, [pc, #104]	; (ad80 <schedule_transfer+0x80>)
		last->next = (uint32_t)transfer;
    ad16:	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    ad18:	ldr.w	r4, [r3, #432]	; 0x1b0
    ad1c:	tst	r4, r1
    ad1e:	bne.n	ad5c <schedule_transfer+0x5c>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    ad20:	ldr	r6, [pc, #96]	; (ad84 <schedule_transfer+0x84>)
    ad22:	ldr	r7, [r6, #4]
    ad24:	b.n	ad30 <schedule_transfer+0x30>
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    ad26:	ldr	r4, [r6, #4]
    ad28:	subs	r4, r4, r7
    ad2a:	cmp.w	r4, #2400	; 0x960
    ad2e:	bcs.n	ad48 <schedule_transfer+0x48>
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    ad30:	ldr.w	r4, [r3, #320]	; 0x140
    ad34:	orr.w	r4, r4, #16384	; 0x4000
    ad38:	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    ad3c:	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    ad40:	ldr.w	r4, [r3, #320]	; 0x140
    ad44:	lsls	r4, r4, #17
    ad46:	bpl.n	ad26 <schedule_transfer+0x26>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    ad48:	ands	r5, r1
    ad4a:	bne.n	ad5c <schedule_transfer+0x5c>
		//ret |= 0x02;
		endpoint->next = (uint32_t)transfer;
		endpoint->status = 0;
		USB1_ENDPTPRIME |= epmask;
    ad4c:	ldr	r4, [pc, #48]	; (ad80 <schedule_transfer+0x80>)
		endpoint->status = 0;
    ad4e:	strd	r2, r5, [r0, #8]
		USB1_ENDPTPRIME |= epmask;
    ad52:	ldr.w	r3, [r4, #432]	; 0x1b0
    ad56:	orrs	r3, r1
    ad58:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
	USB1_ENDPTPRIME |= epmask;
	endpoint->first_transfer = transfer;
end:
	endpoint->last_transfer = transfer;
    ad5c:	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    ad5e:	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    ad60:	pop	{r4, r5, r6, r7}
    ad62:	bx	lr
	USB1_ENDPTPRIME |= epmask;
    ad64:	ldr	r5, [pc, #24]	; (ad80 <schedule_transfer+0x80>)
	endpoint->status = 0;
    ad66:	strd	r2, r4, [r0, #8]
	USB1_ENDPTPRIME |= epmask;
    ad6a:	ldr.w	r3, [r5, #432]	; 0x1b0
    ad6e:	orrs	r3, r1
    ad70:	str.w	r3, [r5, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    ad74:	str	r2, [r0, #48]	; 0x30
	endpoint->last_transfer = transfer;
    ad76:	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    ad78:	cpsie	i
}
    ad7a:	pop	{r4, r5, r6, r7}
    ad7c:	bx	lr
    ad7e:	nop
    ad80:	.word	0x402e0000
    ad84:	.word	0xe0001000

0000ad88 <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    ad88:	push	{r4, r5, r6, lr}
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    ad8a:	ldr	r5, [r0, #48]	; 0x30
	if (first == NULL) return;
    ad8c:	cbz	r5, adb6 <run_callbacks+0x2e>
    ad8e:	mov	r6, r0
    ad90:	mov	r2, r5

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
    ad92:	movs	r4, #0
    ad94:	b.n	ad9e <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
    ad96:	ldr	r2, [r2, #0]
		count++;
    ad98:	adds	r4, #1
		if ((uint32_t)t == 1) {
    ad9a:	cmp	r2, #1
    ad9c:	beq.n	adb8 <run_callbacks+0x30>
		if (t->status & (1<<7)) {
    ad9e:	ldr	r3, [r2, #4]
    ada0:	ands.w	r3, r3, #128	; 0x80
    ada4:	beq.n	ad96 <run_callbacks+0xe>
			ep->first_transfer = t;
    ada6:	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    ada8:	cbz	r4, adb6 <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
    adaa:	mov	r0, r5
		ep->callback_function(first);
    adac:	ldr	r3, [r6, #56]	; 0x38
		transfer_t *next = (transfer_t *)first->next;
    adae:	ldr	r5, [r5, #0]
		ep->callback_function(first);
    adb0:	blx	r3
	while (count) {
    adb2:	subs	r4, #1
    adb4:	bne.n	adaa <run_callbacks+0x22>
		first = next;
		count--;
	}
}
    adb6:	pop	{r4, r5, r6, pc}
			ep->last_transfer = NULL;
    adb8:	strd	r3, r3, [r6, #48]	; 0x30
			break;
    adbc:	b.n	ada8 <run_callbacks+0x20>
    adbe:	nop

0000adc0 <endpoint0_transmit.constprop.0>:
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    adc0:	push	{r4, r5}
	if (len > 0) {
    adc2:	cbnz	r1, adfc <endpoint0_transmit.constprop.0+0x3c>
    adc4:	ldr	r4, [pc, #124]	; (ae44 <endpoint0_transmit.constprop.0+0x84>)
	endpoint0_transfer_ack.next = 1;
    adc6:	ldr	r3, [pc, #128]	; (ae48 <endpoint0_transmit.constprop.0+0x88>)
	endpoint0_transfer_ack.pointer0 = 0;
    adc8:	movs	r1, #0
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    adca:	ldr	r2, [pc, #128]	; (ae4c <endpoint0_transmit.constprop.0+0x8c>)
	endpoint0_transfer_ack.next = 1;
    adcc:	movs	r5, #1
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    adce:	mov.w	r0, #65537	; 0x10001
	endpoint0_transfer_ack.pointer0 = 0;
    add2:	str	r1, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    add4:	str	r5, [r3, #0]
	endpoint_queue_head[0].status = 0;
    add6:	strd	r3, r1, [r4, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    adda:	movs	r4, #128	; 0x80
    addc:	str	r4, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    adde:	str.w	r0, [r2, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    ade2:	ldr.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    ade6:	ldr	r0, [pc, #104]	; (ae50 <endpoint0_transmit.constprop.0+0x90>)
	USB1_ENDPTPRIME |= (1<<0);
    ade8:	orrs	r3, r5
    adea:	str.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    adee:	str	r1, [r0, #0]
	while (USB1_ENDPTPRIME) ;
    adf0:	ldr.w	r3, [r2, #432]	; 0x1b0
    adf4:	cmp	r3, #0
    adf6:	bne.n	adf0 <endpoint0_transmit.constprop.0+0x30>
}
    adf8:	pop	{r4, r5}
    adfa:	bx	lr
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    adfc:	lsls	r1, r1, #16
		endpoint0_transfer_data.next = 1;
    adfe:	ldr	r3, [pc, #84]	; (ae54 <endpoint0_transmit.constprop.0+0x94>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    ae00:	ldr	r4, [pc, #64]	; (ae44 <endpoint0_transmit.constprop.0+0x84>)
		endpoint0_transfer_data.next = 1;
    ae02:	movs	r5, #1
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    ae04:	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    ae08:	str	r0, [r3, #8]
		USB1_ENDPTPRIME |= (1<<16);
    ae0a:	ldr	r2, [pc, #64]	; (ae4c <endpoint0_transmit.constprop.0+0x8c>)
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    ae0c:	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    ae0e:	add.w	r1, r0, #4096	; 0x1000
		endpoint0_transfer_data.next = 1;
    ae12:	str	r5, [r3, #0]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    ae14:	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    ae16:	add.w	r1, r0, #8192	; 0x2000
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    ae1a:	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.pointer2 = addr + 8192;
    ae1c:	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    ae1e:	add.w	r1, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    ae22:	add.w	r0, r0, #16384	; 0x4000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    ae26:	str	r1, [r3, #20]
		endpoint_queue_head[1].status = 0;
    ae28:	movs	r1, #0
		endpoint0_transfer_data.pointer4 = addr + 16384;
    ae2a:	str	r0, [r3, #24]
		endpoint_queue_head[1].status = 0;
    ae2c:	str	r1, [r4, #76]	; 0x4c
		USB1_ENDPTPRIME |= (1<<16);
    ae2e:	ldr.w	r3, [r2, #432]	; 0x1b0
    ae32:	orr.w	r3, r3, #65536	; 0x10000
    ae36:	str.w	r3, [r2, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    ae3a:	ldr.w	r3, [r2, #432]	; 0x1b0
    ae3e:	cmp	r3, #0
    ae40:	bne.n	ae3a <endpoint0_transmit.constprop.0+0x7a>
    ae42:	b.n	adc6 <endpoint0_transmit.constprop.0+0x6>
    ae44:	.word	0x20000000
    ae48:	.word	0x20001ee0
    ae4c:	.word	0x402e0000
    ae50:	.word	0x20007990
    ae54:	.word	0x20001f00

0000ae58 <usb_stop_sof_interrupts>:
	sof_usage &= ~(1 << interface);
    ae58:	ldr	r1, [pc, #32]	; (ae7c <usb_stop_sof_interrupts+0x24>)
    ae5a:	movs	r2, #1
    ae5c:	ldrb	r3, [r1, #0]
    ae5e:	lsl.w	r0, r2, r0
    ae62:	bic.w	r0, r3, r0
    ae66:	strb	r0, [r1, #0]
	if (sof_usage == 0) {
    ae68:	cbnz	r0, ae78 <usb_stop_sof_interrupts+0x20>
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    ae6a:	ldr	r2, [pc, #20]	; (ae80 <usb_stop_sof_interrupts+0x28>)
    ae6c:	ldr.w	r3, [r2, #328]	; 0x148
    ae70:	bic.w	r3, r3, #128	; 0x80
    ae74:	str.w	r3, [r2, #328]	; 0x148
}
    ae78:	bx	lr
    ae7a:	nop
    ae7c:	.word	0x2000816b
    ae80:	.word	0x402e0000

0000ae84 <usb_isr>:
{
    ae84:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t status = USB1_USBSTS;
    ae88:	ldr	r4, [pc, #672]	; (b12c <usb_isr+0x2a8>)
{
    ae8a:	sub	sp, #28
	uint32_t status = USB1_USBSTS;
    ae8c:	ldr.w	r6, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    ae90:	lsls	r1, r6, #31
	USB1_USBSTS = status;
    ae92:	str.w	r6, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    ae96:	bpl.w	afd2 <usb_isr+0x14e>
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    ae9a:	ldr.w	r3, [r4, #428]	; 0x1ac
		while (setupstatus) {
    ae9e:	cmp	r3, #0
    aea0:	beq.n	af6a <usb_isr+0xe6>
    aea2:	ldr	r5, [pc, #652]	; (b130 <usb_isr+0x2ac>)
    aea4:	ldr.w	r9, [pc, #656]	; b138 <usb_isr+0x2b4>
		usb_configuration = setup.wValue;
    aea8:	ldr.w	fp, [pc, #684]	; b158 <usb_isr+0x2d4>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    aeac:	ldr.w	r8, [pc, #684]	; b15c <usb_isr+0x2d8>
			USB1_ENDPTSETUPSTAT = setupstatus;
    aeb0:	str.w	r3, [r4, #428]	; 0x1ac
				s.word2 = endpoint_queue_head[0].setup1;
    aeb4:	ldrd	r7, r0, [r5, #40]	; 0x28
				USB1_USBCMD |= USB_USBCMD_SUTW;
    aeb8:	ldr.w	r3, [r4, #320]	; 0x140
    aebc:	orr.w	r3, r3, #8192	; 0x2000
    aec0:	str.w	r3, [r4, #320]	; 0x140
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    aec4:	ldr.w	r3, [r4, #320]	; 0x140
    aec8:	lsls	r3, r3, #18
    aeca:	bpl.n	aeb8 <usb_isr+0x34>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    aecc:	ldr.w	r3, [r4, #320]	; 0x140
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    aed0:	mov.w	r2, #65537	; 0x10001
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    aed4:	bic.w	r3, r3, #8192	; 0x2000
    aed8:	str.w	r3, [r4, #320]	; 0x140
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    aedc:	str.w	r2, [r4, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    aee0:	ldr.w	r3, [r4, #436]	; 0x1b4
    aee4:	ands.w	r3, r3, #65537	; 0x10001
    aee8:	bne.n	aee0 <usb_isr+0x5c>
			endpoint0_notify_mask = 0;
    aeea:	uxth	r2, r7
    aeec:	str.w	r3, [r9]
	switch (setup.wRequestAndType) {
    aef0:	cmp.w	r2, #2304	; 0x900
	setup.bothwords = setupdata;
    aef4:	strd	r7, r0, [sp, #16]
	switch (setup.wRequestAndType) {
    aef8:	beq.w	b260 <usb_isr+0x3dc>
    aefc:	bhi.w	b086 <usb_isr+0x202>
    af00:	movw	r1, #770	; 0x302
    af04:	cmp	r2, r1
    af06:	beq.w	b356 <usb_isr+0x4d2>
    af0a:	bls.w	b0c8 <usb_isr+0x244>
    af0e:	movw	r1, #1665	; 0x681
    af12:	cmp	r2, r1
    af14:	bhi.w	b070 <usb_isr+0x1ec>
    af18:	cmp.w	r2, #1664	; 0x680
    af1c:	bcs.w	b2ca <usb_isr+0x446>
    af20:	cmp.w	r2, #1280	; 0x500
    af24:	bne.w	b064 <usb_isr+0x1e0>
	endpoint0_transfer_ack.next = 1;
    af28:	ldr	r2, [pc, #520]	; (b134 <usb_isr+0x2b0>)
	endpoint_queue_head[1].status = 0;
    af2a:	str	r3, [r5, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    af2c:	str	r3, [r2, #8]
	endpoint0_transfer_ack.next = 1;
    af2e:	movs	r3, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    af30:	str	r2, [r5, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    af32:	str	r3, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    af34:	movs	r3, #128	; 0x80
    af36:	str	r3, [r2, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    af38:	mov.w	r3, #65537	; 0x10001
    af3c:	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    af40:	ldr.w	r3, [r4, #432]	; 0x1b0
    af44:	orr.w	r3, r3, #65536	; 0x10000
    af48:	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    af4c:	ldr.w	r3, [r4, #432]	; 0x1b0
    af50:	cmp	r3, #0
    af52:	bne.n	af4c <usb_isr+0xc8>
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    af54:	ldrh.w	r3, [sp, #18]
    af58:	lsls	r3, r3, #25
    af5a:	orr.w	r3, r3, #16777216	; 0x1000000
    af5e:	str.w	r3, [r4, #340]	; 0x154
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    af62:	ldr.w	r3, [r4, #428]	; 0x1ac
		while (setupstatus) {
    af66:	cmp	r3, #0
    af68:	bne.n	aeb0 <usb_isr+0x2c>
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    af6a:	ldr	r3, [pc, #448]	; (b12c <usb_isr+0x2a8>)
    af6c:	ldr.w	r4, [r3, #444]	; 0x1bc
		if (completestatus) {
    af70:	cbz	r4, afd2 <usb_isr+0x14e>
			if (completestatus & endpoint0_notify_mask) {
    af72:	ldr	r2, [pc, #452]	; (b138 <usb_isr+0x2b4>)
			USB1_ENDPTCOMPLETE = completestatus;
    af74:	str.w	r4, [r3, #444]	; 0x1bc
			if (completestatus & endpoint0_notify_mask) {
    af78:	ldr	r1, [r2, #0]
    af7a:	tst	r4, r1
    af7c:	bne.w	b490 <usb_isr+0x60c>
			completestatus &= endpointN_notify_mask;
    af80:	ldr	r3, [pc, #440]	; (b13c <usb_isr+0x2b8>)
    af82:	ldr	r3, [r3, #0]
			if (completestatus) {
    af84:	ands	r4, r3
    af86:	beq.n	afd2 <usb_isr+0x14e>
				while (tx) {
    af88:	movs.w	r8, r4, lsr #16
    af8c:	beq.n	afb0 <usb_isr+0x12c>
    af8e:	ldr	r5, [pc, #416]	; (b130 <usb_isr+0x2ac>)
					tx &= ~(1<<p);
    af90:	mov.w	r9, #1
					int p=__builtin_ctz(tx);
    af94:	rbit	r7, r8
    af98:	clz	r7, r7
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    af9c:	add.w	r0, r5, r7, lsl #7
					tx &= ~(1<<p);
    afa0:	lsl.w	r7, r9, r7
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    afa4:	adds	r0, #64	; 0x40
    afa6:	bl	ad88 <run_callbacks>
				while (tx) {
    afaa:	bics.w	r8, r8, r7
    afae:	bne.n	af94 <usb_isr+0x110>
				uint32_t rx = completestatus & 0xffff;
    afb0:	uxth	r4, r4
				while(rx) {
    afb2:	cbz	r4, afd2 <usb_isr+0x14e>
    afb4:	ldr	r5, [pc, #376]	; (b130 <usb_isr+0x2ac>)
					rx &= ~(1<<p);
    afb6:	mov.w	r8, #1
					int p=__builtin_ctz(rx);
    afba:	rbit	r7, r4
    afbe:	clz	r7, r7
					run_callbacks(endpoint_queue_head + p * 2);
    afc2:	add.w	r0, r5, r7, lsl #7
					rx &= ~(1<<p);
    afc6:	lsl.w	r7, r8, r7
					run_callbacks(endpoint_queue_head + p * 2);
    afca:	bl	ad88 <run_callbacks>
				while(rx) {
    afce:	bics	r4, r7
    afd0:	bne.n	afba <usb_isr+0x136>
	if (status & USB_USBSTS_URI) { // page 3164
    afd2:	lsls	r2, r6, #25
    afd4:	bpl.n	b004 <usb_isr+0x180>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    afd6:	ldr	r3, [pc, #340]	; (b12c <usb_isr+0x2a8>)
    afd8:	ldr.w	r2, [r3, #428]	; 0x1ac
    afdc:	str.w	r2, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    afe0:	ldr.w	r2, [r3, #444]	; 0x1bc
    afe4:	str.w	r2, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    afe8:	ldr.w	r4, [r3, #432]	; 0x1b0
    afec:	cmp	r4, #0
    afee:	bne.n	afe8 <usb_isr+0x164>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    aff0:	mov.w	r2, #4294967295
    aff4:	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    aff8:	ldr.w	r3, [r3, #388]	; 0x184
		usb_serial_reset();
    affc:	bl	a564 <usb_serial_reset>
		endpointN_notify_mask = 0;
    b000:	ldr	r3, [pc, #312]	; (b13c <usb_isr+0x2b8>)
    b002:	str	r4, [r3, #0]
	if (status & USB_USBSTS_TI0) {
    b004:	lsls	r4, r6, #7
    b006:	bpl.n	b010 <usb_isr+0x18c>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    b008:	ldr	r3, [pc, #308]	; (b140 <usb_isr+0x2bc>)
    b00a:	ldr	r3, [r3, #0]
    b00c:	cbz	r3, b010 <usb_isr+0x18c>
    b00e:	blx	r3
	if (status & USB_USBSTS_TI1) {
    b010:	lsls	r0, r6, #6
    b012:	bpl.n	b01c <usb_isr+0x198>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    b014:	ldr	r3, [pc, #300]	; (b144 <usb_isr+0x2c0>)
    b016:	ldr	r3, [r3, #0]
    b018:	cbz	r3, b01c <usb_isr+0x198>
    b01a:	blx	r3
	if (status & USB_USBSTS_PCI) {
    b01c:	lsls	r1, r6, #29
    b01e:	bpl.n	b034 <usb_isr+0x1b0>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    b020:	ldr	r3, [pc, #264]	; (b12c <usb_isr+0x2a8>)
    b022:	ldr.w	r3, [r3, #388]	; 0x184
    b026:	ands.w	r3, r3, #512	; 0x200
    b02a:	beq.w	b24e <usb_isr+0x3ca>
			usb_high_speed = 1;
    b02e:	ldr	r3, [pc, #280]	; (b148 <usb_isr+0x2c4>)
    b030:	movs	r2, #1
    b032:	strb	r2, [r3, #0]
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    b034:	ldr	r3, [pc, #244]	; (b12c <usb_isr+0x2a8>)
    b036:	ldr.w	r3, [r3, #328]	; 0x148
    b03a:	lsls	r2, r3, #24
    b03c:	bpl.n	b05e <usb_isr+0x1da>
    b03e:	lsls	r3, r6, #24
    b040:	bpl.n	b05e <usb_isr+0x1da>
		if (usb_reboot_timer) {
    b042:	ldr	r2, [pc, #264]	; (b14c <usb_isr+0x2c8>)
    b044:	ldrb	r3, [r2, #0]
    b046:	cbz	r3, b054 <usb_isr+0x1d0>
			if (--usb_reboot_timer == 0) {
    b048:	subs	r3, #1
    b04a:	uxtb	r3, r3
    b04c:	strb	r3, [r2, #0]
    b04e:	cmp	r3, #0
    b050:	beq.w	b586 <usb_isr+0x702>
}
    b054:	add	sp, #28
    b056:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		usb_midi_flush_output();
    b05a:	b.w	bfe8 <usb_midi_flush_output>
}
    b05e:	add	sp, #28
    b060:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (setup.wRequestAndType) {
    b064:	bls.n	b160 <usb_isr+0x2dc>
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    b066:	mov.w	r3, #65537	; 0x10001
    b06a:	str.w	r3, [r4, #448]	; 0x1c0
    b06e:	b.n	af62 <usb_isr+0xde>
	switch (setup.wRequestAndType) {
    b070:	cmp.w	r2, #2176	; 0x880
    b074:	bne.n	b066 <usb_isr+0x1e2>
		reply_buffer[0] = usb_configuration;
    b076:	ldr	r0, [pc, #216]	; (b150 <usb_isr+0x2cc>)
		endpoint0_transmit(reply_buffer, 1, 0);
    b078:	movs	r1, #1
		reply_buffer[0] = usb_configuration;
    b07a:	ldrb.w	r3, [fp]
    b07e:	strb	r3, [r0, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    b080:	bl	adc0 <endpoint0_transmit.constprop.0>
		return;
    b084:	b.n	af62 <usb_isr+0xde>
	switch (setup.wRequestAndType) {
    b086:	movw	r1, #8737	; 0x2221
    b08a:	cmp	r2, r1
    b08c:	beq.w	b436 <usb_isr+0x5b2>
    b090:	bls.w	b1c6 <usb_isr+0x342>
    b094:	movw	r1, #33186	; 0x81a2
    b098:	cmp	r2, r1
    b09a:	beq.w	b41c <usb_isr+0x598>
    b09e:	bls.n	b18e <usb_isr+0x30a>
    b0a0:	movw	r3, #33953	; 0x84a1
    b0a4:	cmp	r2, r3
    b0a6:	bne.w	b216 <usb_isr+0x392>
		if (setup.wLength <= sizeof(endpoint0_buffer)) {
    b0aa:	cmp.w	r0, #589824	; 0x90000
    b0ae:	bcs.n	b066 <usb_isr+0x1e2>
			if (usb_audio_get_feature(&setup, endpoint0_buffer, &len)) {
    b0b0:	add	r2, sp, #12
    b0b2:	ldr	r1, [pc, #160]	; (b154 <usb_isr+0x2d0>)
    b0b4:	add	r0, sp, #16
    b0b6:	bl	cf6c <usb_audio_get_feature>
    b0ba:	cmp	r0, #0
    b0bc:	beq.n	b066 <usb_isr+0x1e2>
				endpoint0_transmit(endpoint0_buffer, len, 0);
    b0be:	ldr	r1, [sp, #12]
    b0c0:	ldr	r0, [pc, #144]	; (b154 <usb_isr+0x2d0>)
    b0c2:	bl	adc0 <endpoint0_transmit.constprop.0>
				return;
    b0c6:	b.n	af62 <usb_isr+0xde>
	switch (setup.wRequestAndType) {
    b0c8:	cmp	r2, #130	; 0x82
    b0ca:	beq.w	b3f0 <usb_isr+0x56c>
    b0ce:	bls.w	b23c <usb_isr+0x3b8>
    b0d2:	cmp.w	r2, #258	; 0x102
    b0d6:	bne.w	b226 <usb_isr+0x3a2>
		if (endpoint > 7) break;
    b0da:	tst.w	r0, #120	; 0x78
    b0de:	uxth	r3, r0
    b0e0:	bne.n	b066 <usb_isr+0x1e2>
		endpoint = setup.wIndex & 0x7F;
    b0e2:	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    b0e6:	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    b0ea:	ldr.w	r3, [r8, r2, lsl #2]
    b0ee:	ite	ne
    b0f0:	bicne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    b0f4:	biceq.w	r3, r3, #1
    b0f8:	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    b0fc:	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    b0fe:	ldr	r3, [pc, #52]	; (b134 <usb_isr+0x2b0>)
	endpoint_queue_head[1].status = 0;
    b100:	str	r2, [r5, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    b102:	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    b104:	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    b106:	str	r3, [r5, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    b108:	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    b10a:	movs	r2, #128	; 0x80
    b10c:	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    b10e:	mov.w	r3, #65537	; 0x10001
    b112:	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    b116:	ldr.w	r3, [r4, #432]	; 0x1b0
    b11a:	orr.w	r3, r3, #65536	; 0x10000
    b11e:	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    b122:	ldr.w	r3, [r4, #432]	; 0x1b0
    b126:	cmp	r3, #0
    b128:	bne.n	b122 <usb_isr+0x29e>
    b12a:	b.n	af62 <usb_isr+0xde>
    b12c:	.word	0x402e0000
    b130:	.word	0x20000000
    b134:	.word	0x20001ee0
    b138:	.word	0x20007990
    b13c:	.word	0x20007994
    b140:	.word	0x2000812c
    b144:	.word	0x20008130
    b148:	.word	0x20008178
    b14c:	.word	0x20008179
    b150:	.word	0x20008074
    b154:	.word	0x20007988
    b158:	.word	0x20008177
    b15c:	.word	0x402e01c0
	switch (setup.wRequestAndType) {
    b160:	movw	r3, #801	; 0x321
    b164:	cmp	r2, r3
    b166:	beq.n	b172 <usb_isr+0x2ee>
    b168:	movw	r3, #1057	; 0x421
    b16c:	cmp	r2, r3
    b16e:	bne.w	b066 <usb_isr+0x1e2>
		if (setup.wLength <= sizeof(endpoint0_buffer)) {
    b172:	cmp.w	r0, #589824	; 0x90000
    b176:	mov.w	r1, r0, lsr #16
    b17a:	bcs.w	b066 <usb_isr+0x1e2>
			endpoint0_setupdata.bothwords = setupdata;
    b17e:	ldr	r3, [pc, #724]	; (b454 <usb_isr+0x5d0>)
			endpoint0_receive(endpoint0_buffer, setup.wLength, 1);
    b180:	movs	r2, #1
			endpoint0_setupdata.bothwords = setupdata;
    b182:	strd	r7, r0, [r3]
			endpoint0_receive(endpoint0_buffer, setup.wLength, 1);
    b186:	ldr	r0, [pc, #720]	; (b458 <usb_isr+0x5d4>)
    b188:	bl	ac38 <endpoint0_receive>
			return; // handle these after ACK
    b18c:	b.n	af62 <usb_isr+0xde>
	switch (setup.wRequestAndType) {
    b18e:	movw	r3, #8993	; 0x2321
    b192:	cmp	r2, r3
    b194:	bne.n	b1e2 <usb_isr+0x35e>
	endpoint0_transfer_ack.next = 1;
    b196:	ldr	r3, [pc, #708]	; (b45c <usb_isr+0x5d8>)
	endpoint0_transfer_ack.pointer0 = 0;
    b198:	movs	r2, #0
    b19a:	str	r2, [r3, #8]
	endpoint_queue_head[1].status = 0;
    b19c:	str	r2, [r5, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
    b19e:	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    b1a0:	str	r3, [r5, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    b1a2:	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    b1a4:	movs	r2, #128	; 0x80
    b1a6:	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    b1a8:	mov.w	r3, #65537	; 0x10001
    b1ac:	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    b1b0:	ldr.w	r3, [r4, #432]	; 0x1b0
    b1b4:	orr.w	r3, r3, #65536	; 0x10000
    b1b8:	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    b1bc:	ldr.w	r3, [r4, #432]	; 0x1b0
    b1c0:	cmp	r3, #0
    b1c2:	bne.n	b1bc <usb_isr+0x338>
    b1c4:	b.n	af62 <usb_isr+0xde>
	switch (setup.wRequestAndType) {
    b1c6:	movw	r1, #2817	; 0xb01
    b1ca:	cmp	r2, r1
    b1cc:	beq.w	b3aa <usb_isr+0x526>
    b1d0:	movw	r3, #8225	; 0x2021
    b1d4:	cmp	r2, r3
    b1d6:	bne.n	b1ee <usb_isr+0x36a>
		if (setup.wLength != 7) break;
    b1d8:	lsrs	r1, r0, #16
    b1da:	cmp	r1, #7
    b1dc:	bne.w	b066 <usb_isr+0x1e2>
    b1e0:	b.n	b17e <usb_isr+0x2fa>
	switch (setup.wRequestAndType) {
    b1e2:	movw	r3, #33185	; 0x81a1
    b1e6:	cmp	r2, r3
    b1e8:	beq.w	b0aa <usb_isr+0x226>
    b1ec:	b.n	b066 <usb_isr+0x1e2>
    b1ee:	movw	r3, #2689	; 0xa81
    b1f2:	cmp	r2, r3
    b1f4:	bne.w	b066 <usb_isr+0x1e2>
		if (setup.wIndex == AUDIO_INTERFACE+1) {
    b1f8:	uxth	r0, r0
    b1fa:	cmp	r0, #4
    b1fc:	beq.w	b574 <usb_isr+0x6f0>
		} else if (setup.wIndex == AUDIO_INTERFACE+2) {
    b200:	cmp	r0, #5
    b202:	bne.w	b066 <usb_isr+0x1e2>
			endpoint0_buffer[0] = usb_audio_receive_setting;
    b206:	ldr	r3, [pc, #600]	; (b460 <usb_isr+0x5dc>)
    b208:	ldrb	r3, [r3, #0]
			endpoint0_transmit(endpoint0_buffer, 1, 0);
    b20a:	movs	r1, #1
			endpoint0_buffer[0] = usb_audio_receive_setting;
    b20c:	ldr	r0, [pc, #584]	; (b458 <usb_isr+0x5d4>)
    b20e:	strb	r3, [r0, #0]
			endpoint0_transmit(endpoint0_buffer, 1, 0);
    b210:	bl	adc0 <endpoint0_transmit.constprop.0>
			return;
    b214:	b.n	af62 <usb_isr+0xde>
	switch (setup.wRequestAndType) {
    b216:	bic.w	r2, r2, #256	; 0x100
    b21a:	movw	r3, #33441	; 0x82a1
    b21e:	cmp	r2, r3
    b220:	beq.w	b0aa <usb_isr+0x226>
    b224:	b.n	b066 <usb_isr+0x1e2>
    b226:	bcc.w	b066 <usb_isr+0x1e2>
    b22a:	movw	r3, #289	; 0x121
    b22e:	cmp	r2, r3
    b230:	beq.n	b172 <usb_isr+0x2ee>
    b232:	movw	r3, #545	; 0x221
    b236:	cmp	r2, r3
    b238:	beq.n	b172 <usb_isr+0x2ee>
    b23a:	b.n	b066 <usb_isr+0x1e2>
    b23c:	cmp	r2, #128	; 0x80
    b23e:	bne.w	b066 <usb_isr+0x1e2>
		reply_buffer[0] = 0;
    b242:	ldr	r0, [pc, #544]	; (b464 <usb_isr+0x5e0>)
		endpoint0_transmit(reply_buffer, 2, 0);
    b244:	movs	r1, #2
		reply_buffer[0] = 0;
    b246:	strh	r3, [r0, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    b248:	bl	adc0 <endpoint0_transmit.constprop.0>
		return;
    b24c:	b.n	af62 <usb_isr+0xde>
			usb_high_speed = 0;
    b24e:	ldr	r2, [pc, #536]	; (b468 <usb_isr+0x5e4>)
    b250:	strb	r3, [r2, #0]
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    b252:	ldr	r3, [pc, #536]	; (b46c <usb_isr+0x5e8>)
    b254:	ldr.w	r3, [r3, #328]	; 0x148
    b258:	lsls	r2, r3, #24
    b25a:	bpl.w	b05e <usb_isr+0x1da>
    b25e:	b.n	b03e <usb_isr+0x1ba>
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    b260:	ldr	r1, [pc, #524]	; (b470 <usb_isr+0x5ec>)
		usb_configuration = setup.wValue;
    b262:	ubfx	ip, r7, #16, #8
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    b266:	mov.w	r2, #13107400	; 0xc800c8
    b26a:	str	r3, [sp, #4]
		usb_configuration = setup.wValue;
    b26c:	strb.w	ip, [fp]
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    b270:	str.w	r1, [r4, #456]	; 0x1c8
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    b274:	str.w	r2, [r4, #460]	; 0x1cc
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    b278:	str.w	r2, [r4, #464]	; 0x1d0
		USB1_ENDPTCTRL5 = ENDPOINT5_CONFIG;
    b27c:	mov.w	r2, #12845252	; 0xc400c4
    b280:	str.w	r2, [r4, #468]	; 0x1d4
		USB1_ENDPTCTRL6 = ENDPOINT6_CONFIG;
    b284:	subs	r2, #194	; 0xc2
    b286:	str.w	r2, [r4, #472]	; 0x1d8
		usb_serial_configure();
    b28a:	bl	a568 <usb_serial_configure>
		usb_midi_configure();
    b28e:	bl	bf24 <usb_midi_configure>
		usb_audio_configure();
    b292:	bl	ce84 <usb_audio_configure>
	endpoint0_transfer_ack.next = 1;
    b296:	ldr	r2, [pc, #452]	; (b45c <usb_isr+0x5d8>)
    b298:	movs	r1, #1
	endpoint_queue_head[1].status = 0;
    b29a:	ldr	r3, [sp, #4]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    b29c:	str	r2, [r5, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    b29e:	str	r1, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    b2a0:	movs	r1, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
    b2a2:	str	r3, [r2, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    b2a4:	str	r1, [r2, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    b2a6:	mov.w	r2, #65537	; 0x10001
	endpoint_queue_head[1].status = 0;
    b2aa:	str	r3, [r5, #76]	; 0x4c
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    b2ac:	str.w	r2, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    b2b0:	ldr.w	r2, [r4, #432]	; 0x1b0
    b2b4:	orr.w	r2, r2, #65536	; 0x10000
    b2b8:	str.w	r2, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    b2bc:	str.w	r3, [r9]
	while (USB1_ENDPTPRIME) ;
    b2c0:	ldr.w	r3, [r4, #432]	; 0x1b0
    b2c4:	cmp	r3, #0
    b2c6:	bne.n	b2c0 <usb_isr+0x43c>
    b2c8:	b.n	af62 <usb_isr+0xde>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    b2ca:	ldr	r3, [pc, #424]	; (b474 <usb_isr+0x5f0>)
    b2cc:	ldr	r1, [r3, #4]
    b2ce:	cmp	r1, #0
    b2d0:	beq.w	b066 <usb_isr+0x1e2>
    b2d4:	mov.w	ip, r7, lsr #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    b2d8:	uxth.w	lr, r0
    b2dc:	b.n	b2e8 <usb_isr+0x464>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    b2de:	ldr	r1, [r3, #16]
    b2e0:	adds	r3, #12
    b2e2:	cmp	r1, #0
    b2e4:	beq.w	b066 <usb_isr+0x1e2>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    b2e8:	ldrh	r2, [r3, #0]
    b2ea:	cmp	r2, ip
    b2ec:	bne.n	b2de <usb_isr+0x45a>
    b2ee:	ldrh	r2, [r3, #2]
    b2f0:	cmp	r2, lr
    b2f2:	bne.n	b2de <usb_isr+0x45a>
				if ((setup.wValue >> 8) == 3) {
    b2f4:	mov.w	r2, ip, lsr #8
    b2f8:	cmp	r2, #3
    b2fa:	beq.w	b4c2 <usb_isr+0x63e>
					datalen = list->length;
    b2fe:	ldrh	r2, [r3, #8]
				if (datalen > setup.wLength) datalen = setup.wLength;
    b300:	lsrs	r0, r0, #16
    b302:	cmp	r2, r0
    b304:	it	cs
    b306:	movcs	r2, r0
				if (setup.wValue == 0x200) {
    b308:	cmp.w	ip, #512	; 0x200
    b30c:	mov	r7, r2
    b30e:	bne.w	b4ce <usb_isr+0x64a>
					if (usb_high_speed) src = usb_config_descriptor_480;
    b312:	ldr	r3, [pc, #340]	; (b468 <usb_isr+0x5e4>)
    b314:	ldr	r1, [pc, #352]	; (b478 <usb_isr+0x5f4>)
    b316:	ldrb	r0, [r3, #0]
    b318:	ldr	r3, [pc, #352]	; (b47c <usb_isr+0x5f8>)
					memcpy(usb_descriptor_buffer, src, datalen);
    b31a:	ldr.w	sl, [pc, #356]	; b480 <usb_isr+0x5fc>
    b31e:	cmp	r0, #0
    b320:	it	ne
    b322:	movne	r1, r3
    b324:	ldr	r0, [pc, #344]	; (b480 <usb_isr+0x5fc>)
    b326:	bl	a0d4 <memcpy>
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    b32a:	bic.w	r3, sl, #31
	uint32_t end_addr = (uint32_t)addr + size;
    b32e:	add.w	r1, sl, r7
	asm("dsb");
    b332:	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    b336:	mov.w	r0, #3758153728	; 0xe000e000
    b33a:	str.w	r3, [r0, #3952]	; 0xf70
		location += 32;
    b33e:	adds	r3, #32
	} while (location < end_addr);
    b340:	cmp	r1, r3
    b342:	bhi.n	b33a <usb_isr+0x4b6>
	asm("dsb");
    b344:	dsb	sy
	asm("isb");
    b348:	isb	sy
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    b34c:	ldr	r0, [pc, #304]	; (b480 <usb_isr+0x5fc>)
    b34e:	mov	r1, r7
    b350:	bl	adc0 <endpoint0_transmit.constprop.0>
				return;
    b354:	b.n	af62 <usb_isr+0xde>
		if (endpoint > 7) break;
    b356:	tst.w	r0, #120	; 0x78
    b35a:	uxth	r3, r0
    b35c:	bne.w	b066 <usb_isr+0x1e2>
		endpoint = setup.wIndex & 0x7F;
    b360:	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    b364:	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    b368:	ldr.w	r3, [r8, r2, lsl #2]
    b36c:	ite	ne
    b36e:	orrne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    b372:	orreq.w	r3, r3, #1
    b376:	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    b37a:	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    b37c:	ldr	r3, [pc, #220]	; (b45c <usb_isr+0x5d8>)
	endpoint_queue_head[1].status = 0;
    b37e:	str	r2, [r5, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    b380:	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    b382:	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    b384:	str	r3, [r5, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    b386:	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    b388:	movs	r2, #128	; 0x80
    b38a:	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    b38c:	mov.w	r3, #65537	; 0x10001
    b390:	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    b394:	ldr.w	r3, [r4, #432]	; 0x1b0
    b398:	orr.w	r3, r3, #65536	; 0x10000
    b39c:	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    b3a0:	ldr.w	r3, [r4, #432]	; 0x1b0
    b3a4:	cmp	r3, #0
    b3a6:	bne.n	b3a0 <usb_isr+0x51c>
    b3a8:	b.n	af62 <usb_isr+0xde>
		if (setup.wIndex == AUDIO_INTERFACE+1) {
    b3aa:	uxth	r0, r0
    b3ac:	cmp	r0, #4
    b3ae:	beq.w	b53c <usb_isr+0x6b8>
		} else if (setup.wIndex == AUDIO_INTERFACE+2) {
    b3b2:	cmp	r0, #5
    b3b4:	bne.w	b066 <usb_isr+0x1e2>
	endpoint0_transfer_ack.next = 1;
    b3b8:	ldr	r2, [pc, #160]	; (b45c <usb_isr+0x5d8>)
			usb_audio_receive_setting = setup.wValue;
    b3ba:	ubfx	ip, r7, #16, #16
	endpoint_queue_head[1].status = 0;
    b3be:	str	r3, [r5, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    b3c0:	str	r3, [r2, #8]
			usb_audio_receive_setting = setup.wValue;
    b3c2:	ldr	r3, [pc, #156]	; (b460 <usb_isr+0x5dc>)
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    b3c4:	str	r2, [r5, #72]	; 0x48
			usb_audio_receive_setting = setup.wValue;
    b3c6:	strb.w	ip, [r3]
	endpoint0_transfer_ack.next = 1;
    b3ca:	movs	r3, #1
    b3cc:	str	r3, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    b3ce:	movs	r3, #128	; 0x80
    b3d0:	str	r3, [r2, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    b3d2:	mov.w	r3, #65537	; 0x10001
    b3d6:	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    b3da:	ldr.w	r3, [r4, #432]	; 0x1b0
    b3de:	orr.w	r3, r3, #65536	; 0x10000
    b3e2:	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    b3e6:	ldr.w	r3, [r4, #432]	; 0x1b0
    b3ea:	cmp	r3, #0
    b3ec:	bne.n	b3e6 <usb_isr+0x562>
    b3ee:	b.n	af62 <usb_isr+0xde>
		endpoint = setup.wIndex & 0x7F;
    b3f0:	uxth	r3, r0
		if (endpoint > 7) break;
    b3f2:	ands.w	r0, r0, #120	; 0x78
    b3f6:	bne.w	b066 <usb_isr+0x1e2>
		endpoint = setup.wIndex & 0x7F;
    b3fa:	and.w	r2, r3, #127	; 0x7f
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    b3fe:	ldr.w	r1, [r8, r2, lsl #2]
		reply_buffer[0] = 0;
    b402:	ldr	r2, [pc, #96]	; (b464 <usb_isr+0x5e0>)
    b404:	strh	r0, [r2, #0]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    b406:	lsls	r0, r3, #24
    b408:	bmi.n	b4bc <usb_isr+0x638>
    b40a:	lsls	r7, r1, #31
    b40c:	bpl.n	b412 <usb_isr+0x58e>
			reply_buffer[0] = 1;
    b40e:	movs	r3, #1
    b410:	strb	r3, [r2, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    b412:	movs	r1, #2
    b414:	ldr	r0, [pc, #76]	; (b464 <usb_isr+0x5e0>)
    b416:	bl	adc0 <endpoint0_transmit.constprop.0>
		return;
    b41a:	b.n	af62 <usb_isr+0xde>
		if (setup.wLength >= 3) {
    b41c:	cmp.w	r0, #196608	; 0x30000
    b420:	bcc.w	b066 <usb_isr+0x1e2>
			endpoint0_buffer[0] = 44100 & 255;
    b424:	ldr	r0, [pc, #48]	; (b458 <usb_isr+0x5d4>)
			endpoint0_transmit(endpoint0_buffer, 3, 0);
    b426:	movs	r1, #3
			endpoint0_buffer[2] = 0;
    b428:	strb	r3, [r0, #2]
			endpoint0_buffer[0] = 44100 & 255;
    b42a:	movw	r3, #44100	; 0xac44
    b42e:	strh	r3, [r0, #0]
			endpoint0_transmit(endpoint0_buffer, 3, 0);
    b430:	bl	adc0 <endpoint0_transmit.constprop.0>
			return;
    b434:	b.n	af62 <usb_isr+0xde>
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
    b436:	uxth	r0, r0
    b438:	cmp	r0, #0
    b43a:	bne.w	b196 <usb_isr+0x312>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    b43e:	ldr	r3, [pc, #68]	; (b484 <usb_isr+0x600>)
			usb_cdc_line_rtsdtr = setup.wValue;
    b440:	ubfx	ip, r7, #16, #8
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    b444:	ldr	r2, [r3, #0]
    b446:	ldr	r3, [pc, #64]	; (b488 <usb_isr+0x604>)
    b448:	str	r2, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    b44a:	ldr	r3, [pc, #64]	; (b48c <usb_isr+0x608>)
    b44c:	strb.w	ip, [r3]
    b450:	b.n	b196 <usb_isr+0x312>
    b452:	nop
    b454:	.word	0x200052f8
    b458:	.word	0x20007988
    b45c:	.word	0x20001ee0
    b460:	.word	0x20008172
    b464:	.word	0x20008074
    b468:	.word	0x20008178
    b46c:	.word	0x402e0000
    b470:	.word	0x00cc0002
    b474:	.word	0x200012a8
    b478:	.word	0x600020bc
    b47c:	.word	0x60002214
    b480:	.word	0x20205100
    b484:	.word	0x200080e8
    b488:	.word	0x20008128
    b48c:	.word	0x20008176
				endpoint0_notify_mask = 0;
    b490:	movs	r1, #0
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    b492:	movw	r0, #8225	; 0x2021
				endpoint0_notify_mask = 0;
    b496:	str	r1, [r2, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
    b498:	ldr	r1, [pc, #244]	; (b590 <usb_isr+0x70c>)
    b49a:	ldrd	r2, r1, [r1]
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    b49e:	uxth	r5, r2
    b4a0:	cmp	r5, r0
    b4a2:	beq.n	b4f6 <usb_isr+0x672>
	if (setup.word1 == 0x02010121 || setup.word1 == 0x01000121 /* TODO: check setup.word2 */) {
    b4a4:	ldr	r3, [pc, #236]	; (b594 <usb_isr+0x710>)
    b4a6:	cmp	r2, r3
    b4a8:	beq.n	b4b2 <usb_isr+0x62e>
    b4aa:	ldr	r3, [pc, #236]	; (b598 <usb_isr+0x714>)
    b4ac:	cmp	r2, r3
    b4ae:	bne.w	af80 <usb_isr+0xfc>
		usb_audio_set_feature(&endpoint0_setupdata, endpoint0_buffer);
    b4b2:	ldr	r1, [pc, #232]	; (b59c <usb_isr+0x718>)
    b4b4:	ldr	r0, [pc, #216]	; (b590 <usb_isr+0x70c>)
    b4b6:	bl	cfd0 <usb_audio_set_feature>
    b4ba:	b.n	af80 <usb_isr+0xfc>
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    b4bc:	lsls	r3, r1, #15
    b4be:	bmi.n	b40e <usb_isr+0x58a>
    b4c0:	b.n	b412 <usb_isr+0x58e>
					datalen = *(list->addr);
    b4c2:	ldrb	r2, [r1, #0]
				if (datalen > setup.wLength) datalen = setup.wLength;
    b4c4:	lsrs	r0, r0, #16
    b4c6:	cmp	r2, r0
    b4c8:	it	cs
    b4ca:	movcs	r2, r0
    b4cc:	mov	r7, r2
				} else if (setup.wValue == 0x700) {
    b4ce:	cmp.w	ip, #1792	; 0x700
    b4d2:	bne.n	b578 <usb_isr+0x6f4>
					if (usb_high_speed) src = usb_config_descriptor_12;
    b4d4:	ldr	r3, [pc, #200]	; (b5a0 <usb_isr+0x71c>)
					memcpy(usb_descriptor_buffer, src, datalen);
    b4d6:	mov	r2, r7
    b4d8:	ldr.w	sl, [pc, #228]	; b5c0 <usb_isr+0x73c>
					if (usb_high_speed) src = usb_config_descriptor_12;
    b4dc:	ldrb	r0, [r3, #0]
    b4de:	ldr	r1, [pc, #196]	; (b5a4 <usb_isr+0x720>)
    b4e0:	ldr	r3, [pc, #196]	; (b5a8 <usb_isr+0x724>)
					memcpy(usb_descriptor_buffer, src, datalen);
    b4e2:	cmp	r0, #0
    b4e4:	it	ne
    b4e6:	movne	r1, r3
    b4e8:	mov	r0, sl
    b4ea:	bl	a0d4 <memcpy>
					usb_descriptor_buffer[1] = 7;
    b4ee:	movs	r3, #7
    b4f0:	strb.w	r3, [sl, #1]
    b4f4:	b.n	b32a <usb_isr+0x4a6>
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    b4f6:	uxth	r1, r1
    b4f8:	cmp	r1, #0
    b4fa:	bne.n	b4a4 <usb_isr+0x620>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    b4fc:	ldr	r1, [pc, #156]	; (b59c <usb_isr+0x718>)
    b4fe:	ldr	r5, [pc, #172]	; (b5ac <usb_isr+0x728>)
    b500:	ldmia	r1, {r0, r1}
    b502:	strh	r1, [r5, #4]
		if (usb_cdc_line_coding[0] == 134) {
    b504:	cmp	r0, #134	; 0x86
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    b506:	mov.w	r1, r1, lsr #16
    b50a:	str	r0, [r5, #0]
    b50c:	strb	r1, [r5, #6]
		if (usb_cdc_line_coding[0] == 134) {
    b50e:	bne.n	b4a4 <usb_isr+0x620>
	__disable_irq();
    b510:	cpsid	i
	sof_usage |= (1 << interface);
    b512:	ldr	r0, [pc, #156]	; (b5b0 <usb_isr+0x72c>)
    b514:	ldrb	r1, [r0, #0]
    b516:	orr.w	r1, r1, #64	; 0x40
    b51a:	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
    b51c:	ldr.w	r1, [r3, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    b520:	lsls	r5, r1, #24
    b522:	bmi.n	b532 <usb_isr+0x6ae>
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    b524:	orr.w	r1, r1, #128	; 0x80
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    b528:	movs	r0, #128	; 0x80
    b52a:	str.w	r0, [r3, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    b52e:	str.w	r1, [r3, #328]	; 0x148
	__enable_irq();
    b532:	cpsie	i
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    b534:	ldr	r3, [pc, #124]	; (b5b4 <usb_isr+0x730>)
    b536:	movs	r1, #80	; 0x50
    b538:	strb	r1, [r3, #0]
    b53a:	b.n	b4a4 <usb_isr+0x620>
	endpoint0_transfer_ack.next = 1;
    b53c:	ldr	r2, [pc, #120]	; (b5b8 <usb_isr+0x734>)
			usb_audio_transmit_setting = setup.wValue;
    b53e:	ubfx	ip, r7, #16, #16
	endpoint_queue_head[1].status = 0;
    b542:	str	r3, [r5, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    b544:	str	r3, [r2, #8]
			usb_audio_transmit_setting = setup.wValue;
    b546:	ldr	r3, [pc, #116]	; (b5bc <usb_isr+0x738>)
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    b548:	str	r2, [r5, #72]	; 0x48
			usb_audio_transmit_setting = setup.wValue;
    b54a:	strb.w	ip, [r3]
	endpoint0_transfer_ack.next = 1;
    b54e:	movs	r3, #1
    b550:	str	r3, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    b552:	movs	r3, #128	; 0x80
    b554:	str	r3, [r2, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    b556:	mov.w	r3, #65537	; 0x10001
    b55a:	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    b55e:	ldr.w	r3, [r4, #432]	; 0x1b0
    b562:	orr.w	r3, r3, #65536	; 0x10000
    b566:	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    b56a:	ldr.w	r3, [r4, #432]	; 0x1b0
    b56e:	cmp	r3, #0
    b570:	bne.n	b56a <usb_isr+0x6e6>
    b572:	b.n	af62 <usb_isr+0xde>
			endpoint0_buffer[0] = usb_audio_transmit_setting;
    b574:	ldr	r3, [pc, #68]	; (b5bc <usb_isr+0x738>)
    b576:	b.n	b208 <usb_isr+0x384>
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    b578:	ldr.w	sl, [pc, #68]	; b5c0 <usb_isr+0x73c>
    b57c:	mov	r2, r7
    b57e:	mov	r0, sl
    b580:	bl	a0d4 <memcpy>
    b584:	b.n	b32a <usb_isr+0x4a6>
				usb_stop_sof_interrupts(NUM_INTERFACE);
    b586:	movs	r0, #6
    b588:	bl	ae58 <usb_stop_sof_interrupts>
				_reboot_Teensyduino_();
    b58c:	bl	136a0 <___reboot_Teensyduino__veneer>
    b590:	.word	0x200052f8
    b594:	.word	0x02010121
    b598:	.word	0x01000121
    b59c:	.word	0x20007988
    b5a0:	.word	0x20008178
    b5a4:	.word	0x60002214
    b5a8:	.word	0x600020bc
    b5ac:	.word	0x20008120
    b5b0:	.word	0x2000816b
    b5b4:	.word	0x20008179
    b5b8:	.word	0x20001ee0
    b5bc:	.word	0x20008175
    b5c0:	.word	0x20205100

0000b5c4 <usb_config_rx>:
{
    b5c4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b5c8:	mov	r7, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    b5ca:	subs	r3, r0, #2
    b5cc:	cmp	r3, #4
    b5ce:	bls.n	b5d4 <usb_config_rx+0x10>
}
    b5d0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    b5d4:	ldr.w	r9, [pc, #76]	; b624 <usb_config_rx+0x60>
    b5d8:	mov	r5, r2
    b5da:	mov	r4, r1
	memset(qh, 0, sizeof(endpoint_t));
    b5dc:	movs	r2, #60	; 0x3c
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    b5de:	add.w	r8, r9, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    b5e2:	mov	r6, r0
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    b5e4:	mov.w	sl, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    b5e8:	movs	r1, #0
    b5ea:	add.w	r0, r8, #4
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    b5ee:	lsls	r4, r4, #16
	memset(qh, 0, sizeof(endpoint_t));
    b5f0:	bl	e074 <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    b5f4:	clz	r2, r5
	qh->next = 1; // Terminate bit = 1
    b5f8:	movs	r3, #1
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    b5fa:	lsrs	r2, r2, #5
    b5fc:	orr.w	r4, r4, r2, lsl #29
	qh->config = config;
    b600:	str.w	r4, [r9, sl]
	qh->callback_function = callback;
    b604:	str.w	r7, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    b608:	str.w	r3, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << ep);
    b60c:	cmp	r7, #0
    b60e:	beq.n	b5d0 <usb_config_rx+0xc>
    b610:	ldr	r2, [pc, #12]	; (b620 <usb_config_rx+0x5c>)
    b612:	lsls	r3, r6
    b614:	ldr	r1, [r2, #0]
    b616:	orrs	r3, r1
    b618:	str	r3, [r2, #0]
}
    b61a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b61e:	nop
    b620:	.word	0x20007994
    b624:	.word	0x20000000

0000b628 <usb_config_tx>:
{
    b628:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b62c:	mov	r5, r1
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    b62e:	subs	r1, r0, #2
    b630:	cmp	r1, #4
    b632:	bls.n	b638 <usb_config_tx+0x10>
}
    b634:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    b638:	lsls	r7, r0, #7
    b63a:	ldr.w	r9, [pc, #76]	; b688 <usb_config_tx+0x60>
    b63e:	mov	sl, r2
    b640:	mov	r4, r0
    b642:	adds	r7, #64	; 0x40
	memset(qh, 0, sizeof(endpoint_t));
    b644:	movs	r2, #60	; 0x3c
    b646:	movs	r1, #0
    b648:	mov	r6, r3
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    b64a:	add.w	r8, r9, r7
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    b64e:	lsls	r5, r5, #16
	memset(qh, 0, sizeof(endpoint_t));
    b650:	add.w	r0, r8, #4
    b654:	bl	e074 <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    b658:	clz	r2, sl
    b65c:	lsrs	r2, r2, #5
    b65e:	orr.w	r2, r5, r2, lsl #29
	qh->config = config;
    b662:	str.w	r2, [r9, r7]
	qh->next = 1; // Terminate bit = 1
    b666:	movs	r2, #1
	qh->callback_function = callback;
    b668:	str.w	r6, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    b66c:	str.w	r2, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    b670:	cmp	r6, #0
    b672:	beq.n	b634 <usb_config_tx+0xc>
    b674:	ldr	r3, [pc, #12]	; (b684 <usb_config_tx+0x5c>)
    b676:	adds	r4, #16
    b678:	ldr	r1, [r3, #0]
    b67a:	lsls	r2, r4
    b67c:	orrs	r2, r1
    b67e:	str	r2, [r3, #0]
}
    b680:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b684:	.word	0x20007994
    b688:	.word	0x20000000

0000b68c <usb_config_rx_iso>:
{
    b68c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b690:	mov	r4, r2
	if (mult < 1 || mult > 3) return;
    b692:	subs	r2, #1
    b694:	cmp	r2, #2
    b696:	bhi.n	b6a2 <usb_config_rx_iso+0x16>
    b698:	mov	r5, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    b69a:	subs	r3, r0, #2
    b69c:	mov	r7, r0
    b69e:	cmp	r3, #4
    b6a0:	bls.n	b6a6 <usb_config_rx_iso+0x1a>
}
    b6a2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    b6a6:	ldr.w	r9, [pc, #68]	; b6ec <usb_config_rx_iso+0x60>
    b6aa:	mov	r6, r1
	uint32_t config = (packet_size << 16) | (mult << 30);
    b6ac:	lsls	r4, r4, #30
	memset(qh, 0, sizeof(endpoint_t));
    b6ae:	movs	r2, #60	; 0x3c
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    b6b0:	add.w	r8, r9, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    b6b4:	movs	r1, #0
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    b6b6:	mov.w	sl, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    b6ba:	add.w	r0, r8, #4
	uint32_t config = (packet_size << 16) | (mult << 30);
    b6be:	orr.w	r4, r4, r6, lsl #16
	memset(qh, 0, sizeof(endpoint_t));
    b6c2:	bl	e074 <memset>
	qh->next = 1; // Terminate bit = 1
    b6c6:	movs	r3, #1
	qh->config = config;
    b6c8:	str.w	r4, [r9, sl]
	qh->callback_function = callback;
    b6cc:	str.w	r5, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    b6d0:	str.w	r3, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << ep);
    b6d4:	cmp	r5, #0
    b6d6:	beq.n	b6a2 <usb_config_rx_iso+0x16>
    b6d8:	ldr	r2, [pc, #12]	; (b6e8 <usb_config_rx_iso+0x5c>)
    b6da:	lsls	r3, r7
    b6dc:	ldr	r1, [r2, #0]
    b6de:	orrs	r3, r1
    b6e0:	str	r3, [r2, #0]
}
    b6e2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b6e6:	nop
    b6e8:	.word	0x20007994
    b6ec:	.word	0x20000000

0000b6f0 <usb_config_tx_iso>:
{
    b6f0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b6f4:	mov	r4, r2
	if (mult < 1 || mult > 3) return;
    b6f6:	subs	r2, #1
    b6f8:	cmp	r2, #2
    b6fa:	bhi.n	b706 <usb_config_tx_iso+0x16>
    b6fc:	mov	r5, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    b6fe:	subs	r3, r0, #2
    b700:	mov	r7, r0
    b702:	cmp	r3, #4
    b704:	bls.n	b70a <usb_config_tx_iso+0x1a>
}
    b706:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    b70a:	mov.w	r8, r0, lsl #7
    b70e:	ldr.w	sl, [pc, #72]	; b758 <usb_config_tx_iso+0x68>
    b712:	mov	r6, r1
	uint32_t config = (packet_size << 16) | (mult << 30);
    b714:	lsls	r4, r4, #30
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    b716:	add.w	r8, r8, #64	; 0x40
	memset(qh, 0, sizeof(endpoint_t));
    b71a:	movs	r2, #60	; 0x3c
    b71c:	movs	r1, #0
	uint32_t config = (packet_size << 16) | (mult << 30);
    b71e:	orr.w	r4, r4, r6, lsl #16
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    b722:	add.w	r9, sl, r8
	memset(qh, 0, sizeof(endpoint_t));
    b726:	add.w	r0, r9, #4
    b72a:	bl	e074 <memset>
	qh->next = 1; // Terminate bit = 1
    b72e:	movs	r3, #1
	qh->config = config;
    b730:	str.w	r4, [sl, r8]
	qh->callback_function = callback;
    b734:	str.w	r5, [r9, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    b738:	str.w	r3, [r9, #8]
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    b73c:	cmp	r5, #0
    b73e:	beq.n	b706 <usb_config_tx_iso+0x16>
    b740:	ldr	r2, [pc, #16]	; (b754 <usb_config_tx_iso+0x64>)
    b742:	add.w	r0, r7, #16
    b746:	ldr	r1, [r2, #0]
    b748:	lsls	r3, r0
    b74a:	orrs	r3, r1
    b74c:	str	r3, [r2, #0]
}
    b74e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b752:	nop
    b754:	.word	0x20007994
    b758:	.word	0x20000000

0000b75c <usb_prepare_transfer>:
	transfer->status = (len << 16) | (1<<7);
    b75c:	lsls	r2, r2, #16
	transfer->pointer0 = addr;
    b75e:	str	r1, [r0, #8]
	transfer->callback_param = param;
    b760:	str	r3, [r0, #28]
	transfer->pointer3 = addr + 12288;
    b762:	add.w	r3, r1, #12288	; 0x3000
	transfer->status = (len << 16) | (1<<7);
    b766:	orr.w	r2, r2, #128	; 0x80
{
    b76a:	push	{r4}
	transfer->next = 1;
    b76c:	movs	r4, #1
	transfer->status = (len << 16) | (1<<7);
    b76e:	str	r2, [r0, #4]
	transfer->pointer2 = addr + 8192;
    b770:	add.w	r2, r1, #8192	; 0x2000
	transfer->next = 1;
    b774:	str	r4, [r0, #0]
	transfer->pointer1 = addr + 4096;
    b776:	add.w	r4, r1, #4096	; 0x1000
	transfer->pointer4 = addr + 16384;
    b77a:	add.w	r1, r1, #16384	; 0x4000
	transfer->pointer1 = addr + 4096;
    b77e:	str	r4, [r0, #12]
	transfer->pointer4 = addr + 16384;
    b780:	str	r1, [r0, #24]
}
    b782:	ldr.w	r4, [sp], #4
	transfer->pointer3 = addr + 12288;
    b786:	strd	r2, r3, [r0, #16]
}
    b78a:	bx	lr

0000b78c <usb_transmit>:

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    b78c:	subs	r3, r0, #2
{
    b78e:	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    b790:	cmp	r3, #4
    b792:	bls.n	b796 <usb_transmit+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}
    b794:	bx	lr
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    b796:	ldr	r3, [pc, #24]	; (b7b0 <usb_transmit+0x24>)
	uint32_t mask = 1 << (endpoint_number + 16);
    b798:	add.w	r1, r0, #16
    b79c:	mov.w	ip, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    b7a0:	add.w	r0, r3, r0, lsl #7
	schedule_transfer(endpoint, mask, transfer);
    b7a4:	lsl.w	r1, ip, r1
    b7a8:	adds	r0, #64	; 0x40
    b7aa:	b.w	ad00 <schedule_transfer>
    b7ae:	nop
    b7b0:	.word	0x20000000

0000b7b4 <usb_receive>:

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    b7b4:	subs	r3, r0, #2
{
    b7b6:	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    b7b8:	cmp	r3, #4
    b7ba:	bls.n	b7be <usb_receive+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
}
    b7bc:	bx	lr
	uint32_t mask = 1 << endpoint_number;
    b7be:	movs	r1, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
    b7c0:	ldr	r3, [pc, #8]	; (b7cc <usb_receive+0x18>)
	schedule_transfer(endpoint, mask, transfer);
    b7c2:	lsls	r1, r0
    b7c4:	add.w	r0, r3, r0, lsl #7
    b7c8:	b.w	ad00 <schedule_transfer>
    b7cc:	.word	0x20000000

0000b7d0 <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
    b7d0:	ldr	r0, [r0, #4]
#endif
}
    b7d2:	bx	lr

0000b7d4 <delay>:
// or delayNanoseconds().
void delay(uint32_t msec)
{
	uint32_t start;

	if (msec == 0) return;
    b7d4:	cbnz	r0, b7d8 <delay+0x4>
    b7d6:	bx	lr
{
    b7d8:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    b7dc:	movs	r1, #1
    b7de:	mov	r9, r0
    b7e0:	ldr	r4, [pc, #132]	; (b868 <delay+0x94>)
    b7e2:	ldr	r5, [pc, #136]	; (b86c <delay+0x98>)
    b7e4:	ldr	r6, [pc, #136]	; (b870 <delay+0x9c>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    b7e6:	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    b7ea:	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    b7ec:	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    b7ee:	strex	r3, r1, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    b7f2:	cmp	r3, #0
    b7f4:	bne.n	b7e6 <delay+0x12>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    b7f6:	ldr	r1, [pc, #124]	; (b874 <delay+0xa0>)
    b7f8:	ldr	r3, [r1, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    b7fa:	mov.w	fp, #1000	; 0x3e8
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    b7fe:	ldr.w	sl, [pc, #120]	; b878 <delay+0xa4>
	uint32_t ccdelta = cyccnt - scc;
    b802:	subs	r3, r3, r0
    b804:	movs	r7, #1
	uint32_t usec = 1000*smc + frac;
    b806:	mul.w	r8, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    b80a:	ldr.w	r2, [sl]
    b80e:	umull	r3, r2, r3, r2
	uint32_t usec = 1000*smc + frac;
    b812:	cmp	r2, fp
    b814:	ite	ls
    b816:	addls	r8, r2
    b818:	addhi	r8, fp
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    b81a:	ldrex	r3, [r4]
		smc = systick_millis_count;
    b81e:	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    b820:	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    b822:	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    b826:	cmp	r3, #0
    b828:	bne.n	b81a <delay+0x46>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    b82a:	ldr	r3, [r1, #4]
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    b82c:	ldr.w	ip, [sl]
	uint32_t ccdelta = cyccnt - scc;
    b830:	subs	r3, r3, r0
	uint32_t usec = 1000*smc + frac;
    b832:	mul.w	r2, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    b836:	umull	r3, ip, r3, ip
	uint32_t usec = 1000*smc + frac;
    b83a:	cmp.w	ip, #1000	; 0x3e8
    b83e:	ite	ls
    b840:	addls	r2, ip
    b842:	addhi.w	r2, r2, #1000	; 0x3e8
		while ((micros() - start) >= 1000) {
    b846:	sub.w	r2, r2, r8
    b84a:	cmp.w	r2, #1000	; 0x3e8
    b84e:	bcc.n	b85e <delay+0x8a>
			if (--msec == 0) return;
    b850:	subs.w	r9, r9, #1
			start += 1000;
    b854:	add.w	r8, r8, #1000	; 0x3e8
			if (--msec == 0) return;
    b858:	bne.n	b81a <delay+0x46>
}
    b85a:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		yield();
    b85e:	bl	c0e4 <yield>
		while ((micros() - start) >= 1000) {
    b862:	ldr	r1, [pc, #16]	; (b874 <delay+0xa0>)
    b864:	b.n	b81a <delay+0x46>
    b866:	nop
    b868:	.word	0x200080ec
    b86c:	.word	0x200080e8
    b870:	.word	0x200080e4
    b874:	.word	0xe0001000
    b878:	.word	0x200080e0

0000b87c <micros>:
{
    b87c:	push	{r4, r5}
    b87e:	ldr	r3, [pc, #60]	; (b8bc <micros+0x40>)
    b880:	mov.w	ip, #1
    b884:	ldr	r5, [pc, #56]	; (b8c0 <micros+0x44>)
    b886:	ldr	r4, [pc, #60]	; (b8c4 <micros+0x48>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    b888:	ldrex	r2, [r3]
		smc = systick_millis_count;
    b88c:	ldr	r0, [r5, #0]
		scc = systick_cycle_count;
    b88e:	ldr	r1, [r4, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    b890:	strex	r2, ip, [r3]
	} while ( __STREXW(1, &systick_safe_read));
    b894:	cmp	r2, #0
    b896:	bne.n	b888 <micros+0xc>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    b898:	ldr	r3, [pc, #44]	; (b8c8 <micros+0x4c>)
    b89a:	ldr	r3, [r3, #4]
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    b89c:	ldr	r2, [pc, #44]	; (b8cc <micros+0x50>)
	uint32_t ccdelta = cyccnt - scc;
    b89e:	subs	r3, r3, r1
	uint32_t usec = 1000*smc + frac;
    b8a0:	mov.w	r1, #1000	; 0x3e8
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    b8a4:	ldr	r2, [r2, #0]
	uint32_t usec = 1000*smc + frac;
    b8a6:	mul.w	r0, r1, r0
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    b8aa:	umull	r3, r2, r3, r2
	return usec;
}
    b8ae:	pop	{r4, r5}
    b8b0:	cmp	r2, r1
    b8b2:	ite	ls
    b8b4:	addls	r0, r0, r2
    b8b6:	addhi	r0, r0, r1
    b8b8:	bx	lr
    b8ba:	nop
    b8bc:	.word	0x200080ec
    b8c0:	.word	0x200080e8
    b8c4:	.word	0x200080e4
    b8c8:	.word	0xe0001000
    b8cc:	.word	0x200080e0

0000b8d0 <unused_interrupt_vector>:
	__disable_irq();
    b8d0:	cpsid	i
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
    b8d2:	mrs	r3, IPSR
	info->ipsr = ipsr;
    b8d6:	ldr	r4, [pc, #316]	; (ba14 <unused_interrupt_vector+0x144>)
    b8d8:	str.w	r3, [r4, #132]	; 0x84
	asm volatile("mrs %0, msp\n" : "=r" (stack) :: "memory");
    b8dc:	mrs	r2, MSP
	info->cfsr = SCB_CFSR;
    b8e0:	mov.w	r3, #3758153728	; 0xe000e000
	p = (uint32_t *)info;
    b8e4:	ldr	r6, [pc, #304]	; (ba18 <unused_interrupt_vector+0x148>)
	while (p < end) {
    b8e6:	ldr	r5, [pc, #308]	; (ba1c <unused_interrupt_vector+0x14c>)
	info->cfsr = SCB_CFSR;
    b8e8:	ldr.w	r0, [r3, #3368]	; 0xd28
	info->hfsr = SCB_HFSR;
    b8ec:	ldr.w	r1, [r3, #3372]	; 0xd2c
    b8f0:	strd	r0, r1, [r4, #136]	; 0x88
	info->mmfar = SCB_MMFAR;
    b8f4:	ldr.w	r1, [r3, #3380]	; 0xd34
	info->bfar = SCB_BFAR;
    b8f8:	ldr.w	r3, [r3, #3384]	; 0xd38
    b8fc:	strd	r1, r3, [r4, #144]	; 0x90
	info->ret = stack[6];
    b900:	ldr	r3, [r2, #24]
    b902:	str.w	r3, [r4, #152]	; 0x98
	info->xpsr = stack[7];
    b906:	ldr	r3, [r2, #28]
    b908:	str.w	r3, [r4, #156]	; 0x9c
	info->temp = tempmonGetTemp();
    b90c:	bl	bba8 <tempmonGetTemp>
    b910:	vstr	s0, [r4, #160]	; 0xa0
	info->time = rtc_get();
    b914:	bl	bab0 <rtc_get>
	info->len = sizeof(*info) / 4;
    b918:	movs	r1, #11
	crc = 0xFFFFFFFF;
    b91a:	mov.w	r2, #4294967295
	info->time = rtc_get();
    b91e:	str.w	r0, [r4, #164]	; 0xa4
	info->len = sizeof(*info) / 4;
    b922:	mov	r3, r1
    b924:	str.w	r1, [r4, #128]	; 0x80
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    b928:	ldr	r1, [pc, #244]	; (ba20 <unused_interrupt_vector+0x150>)
		crc ^= *p++;
    b92a:	adds	r0, r6, #4
    b92c:	eors	r2, r3
    b92e:	movs	r4, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    b930:	and.w	r3, r2, #1
    b934:	subs	r4, #1
    b936:	mul.w	r3, r1, r3
    b93a:	eor.w	r2, r3, r2, lsr #1
    b93e:	bne.n	b930 <unused_interrupt_vector+0x60>
	while (p < end) {
    b940:	cmp	r0, r5
    b942:	beq.n	b94a <unused_interrupt_vector+0x7a>
		crc ^= *p++;
    b944:	ldr	r3, [r6, #4]
    b946:	mov	r6, r0
    b948:	b.n	b92a <unused_interrupt_vector+0x5a>
	info->crc = crc;
    b94a:	ldr	r3, [pc, #200]	; (ba14 <unused_interrupt_vector+0x144>)
    b94c:	str.w	r2, [r3, #168]	; 0xa8
	asm("dsb");
    b950:	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    b954:	mov.w	r3, #3758153728	; 0xe000e000
    b958:	ldr	r1, [pc, #188]	; (ba18 <unused_interrupt_vector+0x148>)
    b95a:	ldr	r2, [pc, #200]	; (ba24 <unused_interrupt_vector+0x154>)
    b95c:	str.w	r1, [r3, #3952]	; 0xf70
    b960:	str.w	r2, [r3, #3952]	; 0xf70
	asm("dsb");
    b964:	dsb	sy
	asm("isb");
    b968:	isb	sy
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    b96c:	ldr	r2, [pc, #184]	; (ba28 <unused_interrupt_vector+0x158>)
	PIT_MCR = PIT_MCR_MDIS;
    b96e:	movs	r5, #2
    b970:	ldr	r0, [pc, #184]	; (ba2c <unused_interrupt_vector+0x15c>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    b972:	ldr	r3, [r2, #108]	; 0x6c
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    b974:	ldr	r1, [pc, #184]	; (ba30 <unused_interrupt_vector+0x160>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    b976:	orr.w	r3, r3, #12288	; 0x3000
    b97a:	str	r3, [r2, #108]	; 0x6c
	PIT_MCR = PIT_MCR_MDIS;
    b97c:	str	r5, [r0, #0]
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    b97e:	ldr	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    b980:	ldr	r0, [pc, #176]	; (ba34 <unused_interrupt_vector+0x164>)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    b982:	bic.w	r3, r3, #127	; 0x7f
    b986:	orr.w	r3, r3, #64	; 0x40
    b98a:	str	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    b98c:	ldr	r3, [r1, #0]
    b98e:	cmp	r3, r0
    b990:	bhi.n	ba0e <unused_interrupt_vector+0x13e>
	PIT_MCR = 0;
    b992:	ldr	r5, [pc, #152]	; (ba2c <unused_interrupt_vector+0x15c>)
    b994:	movs	r1, #0
	NVIC_ICER0 = 0xFFFFFFFF;
    b996:	mov.w	r3, #3758153728	; 0xe000e000
    b99a:	mov.w	r2, #4294967295
	PIT_MCR = 0;
    b99e:	str	r1, [r5, #0]
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    b9a0:	movs	r6, #1
	PIT_TCTRL0 = 0;
    b9a2:	str.w	r1, [r5, #264]	; 0x108
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
    b9a6:	ldr	r1, [pc, #144]	; (ba38 <unused_interrupt_vector+0x168>)
    b9a8:	str.w	r1, [r5, #256]	; 0x100
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    b9ac:	str.w	r6, [r5, #264]	; 0x108
	NVIC_ICER0 = 0xFFFFFFFF;
    b9b0:	str.w	r2, [r3, #384]	; 0x180
	NVIC_ICER1 = 0xFFFFFFFF;
    b9b4:	str.w	r2, [r3, #388]	; 0x184
	NVIC_ICER2 = 0xFFFFFFFF;
    b9b8:	str.w	r2, [r3, #392]	; 0x188
	NVIC_ICER3 = 0xFFFFFFFF;
    b9bc:	str.w	r2, [r3, #396]	; 0x18c
	NVIC_ICER4 = 0xFFFFFFFF;
    b9c0:	str.w	r2, [r3, #400]	; 0x190
	count = 0;
    b9c4:	b.n	b9ca <unused_interrupt_vector+0xfa>
		usb_isr();
    b9c6:	bl	ae84 <usb_isr>
		if (PIT_TFLG0) {
    b9ca:	ldr.w	r3, [r5, #268]	; 0x10c
    b9ce:	cmp	r3, #0
    b9d0:	beq.n	b9c6 <unused_interrupt_vector+0xf6>
			if (++count >= 80) break;  // reboot after 8 seconds
    b9d2:	adds	r4, #1
			PIT_TFLG0 = 1;
    b9d4:	str.w	r6, [r5, #268]	; 0x10c
			if (++count >= 80) break;  // reboot after 8 seconds
    b9d8:	cmp	r4, #79	; 0x4f
    b9da:	bls.n	b9c6 <unused_interrupt_vector+0xf6>
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    b9dc:	ldr	r3, [pc, #92]	; (ba3c <unused_interrupt_vector+0x16c>)
	USB1_USBCMD = USB_USBCMD_RST;
    b9de:	movs	r0, #2
    b9e0:	ldr	r1, [pc, #92]	; (ba40 <unused_interrupt_vector+0x170>)
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    b9e2:	mov.w	r2, #2147483648	; 0x80000000
	USB1_USBCMD = USB_USBCMD_RST;
    b9e6:	str.w	r0, [r1, #320]	; 0x140
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    b9ea:	str	r2, [r3, #52]	; 0x34
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    b9ec:	ldr.w	r3, [r5, #268]	; 0x10c
    b9f0:	cbnz	r3, ba02 <unused_interrupt_vector+0x132>
	SRC_GPR5 = 0x0BAD00F1;
    b9f2:	ldr	r0, [pc, #80]	; (ba44 <unused_interrupt_vector+0x174>)
    b9f4:	ldr	r1, [pc, #80]	; (ba48 <unused_interrupt_vector+0x178>)
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    b9f6:	ldr	r2, [pc, #52]	; (ba2c <unused_interrupt_vector+0x15c>)
	SRC_GPR5 = 0x0BAD00F1;
    b9f8:	str	r1, [r0, #48]	; 0x30
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    b9fa:	ldr.w	r3, [r2, #268]	; 0x10c
    b9fe:	cmp	r3, #0
    ba00:	beq.n	b9f8 <unused_interrupt_vector+0x128>
	SCB_AIRCR = 0x05FA0004;
    ba02:	mov.w	r3, #3758153728	; 0xe000e000
    ba06:	ldr	r2, [pc, #68]	; (ba4c <unused_interrupt_vector+0x17c>)
    ba08:	str.w	r2, [r3, #3340]	; 0xd0c
	while (1) ;
    ba0c:	b.n	ba0c <unused_interrupt_vector+0x13c>
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    ba0e:	bl	a948 <set_arm_clock>
    ba12:	b.n	b992 <unused_interrupt_vector+0xc2>
    ba14:	.word	0x2027ff00
    ba18:	.word	0x2027ff80
    ba1c:	.word	0x2027ffa8
    ba20:	.word	0xedb88320
    ba24:	.word	0x2027ffa0
    ba28:	.word	0x400fc000
    ba2c:	.word	0x40084000
    ba30:	.word	0x20001460
    ba34:	.word	0x0bcd3d80
    ba38:	.word	0x00249f00
    ba3c:	.word	0x400d9000
    ba40:	.word	0x402e0000
    ba44:	.word	0x400f8000
    ba48:	.word	0x0bad00f1
    ba4c:	.word	0x05fa0004

0000ba50 <_sbrk>:

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
        char *prev = __brkval;
    ba50:	ldr	r1, [pc, #40]	; (ba7c <_sbrk+0x2c>)
    ba52:	ldr	r2, [r1, #0]
        if (incr != 0) {
    ba54:	cbz	r0, ba66 <_sbrk+0x16>
{
    ba56:	push	{r3, lr}
                if (prev + incr > (char *)&_heap_end) {
    ba58:	adds	r3, r2, r0
    ba5a:	ldr	r0, [pc, #36]	; (ba80 <_sbrk+0x30>)
    ba5c:	cmp	r3, r0
    ba5e:	bhi.n	ba6a <_sbrk+0x1a>
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
    ba60:	mov	r0, r2
                __brkval = prev + incr;
    ba62:	str	r3, [r1, #0]
}
    ba64:	pop	{r3, pc}
    ba66:	mov	r0, r2
    ba68:	bx	lr
                        errno = ENOMEM;
    ba6a:	bl	e2e0 <__errno>
    ba6e:	movs	r3, #12
                        return (void *)-1;
    ba70:	mov.w	r2, #4294967295
                        errno = ENOMEM;
    ba74:	str	r3, [r0, #0]
}
    ba76:	mov	r0, r2
    ba78:	pop	{r3, pc}
    ba7a:	nop
    ba7c:	.word	0x20001494
    ba80:	.word	0x20280000

0000ba84 <_read>:

__attribute__((weak))
int _read(int file, char *ptr, int len)
{
	return 0;
}
    ba84:	movs	r0, #0
    ba86:	bx	lr

0000ba88 <_close>:

__attribute__((weak))
int _close(int fd)
{
	return -1;
}
    ba88:	mov.w	r0, #4294967295
    ba8c:	bx	lr
    ba8e:	nop

0000ba90 <_fstat>:
#include <sys/stat.h>

__attribute__((weak))
int _fstat(int fd, struct stat *st)
{
	st->st_mode = S_IFCHR;
    ba90:	mov.w	r3, #8192	; 0x2000
	return 0;
}
    ba94:	movs	r0, #0
	st->st_mode = S_IFCHR;
    ba96:	str	r3, [r1, #4]
}
    ba98:	bx	lr
    ba9a:	nop

0000ba9c <_isatty>:

__attribute__((weak))
int _isatty(int fd)
{
	return 1;
}
    ba9c:	movs	r0, #1
    ba9e:	bx	lr

0000baa0 <_lseek>:

__attribute__((weak))
int _lseek(int fd, long long offset, int whence)
{
	return -1;
}
    baa0:	mov.w	r0, #4294967295
    baa4:	bx	lr
    baa6:	nop

0000baa8 <__cxa_pure_virtual>:
}

__attribute__((weak))
void __cxa_pure_virtual()
{
	while (1) asm ("WFI");
    baa8:	wfi
    baaa:	b.n	baa8 <__cxa_pure_virtual>

0000baac <abort>:
}

__attribute__((weak))
void abort(void)
{
	while (1) asm ("WFI");
    baac:	wfi
    baae:	b.n	baac <abort>

0000bab0 <rtc_get>:
	uint32_t hi1 = SNVS_HPRTCMR;
    bab0:	ldr	r2, [pc, #28]	; (bad0 <rtc_get+0x20>)
    bab2:	ldr	r0, [r2, #36]	; 0x24
	uint32_t lo1 = SNVS_HPRTCLR;
    bab4:	ldr	r3, [r2, #40]	; 0x28
		uint32_t hi2 = SNVS_HPRTCMR;
    bab6:	mov	r1, r3
    bab8:	mov	ip, r0
    baba:	ldr	r0, [r2, #36]	; 0x24
		uint32_t lo2 = SNVS_HPRTCLR;
    babc:	ldr	r3, [r2, #40]	; 0x28
		if (lo1 == lo2 && hi1 == hi2) {
    babe:	cmp	r1, r3
    bac0:	bne.n	bab6 <rtc_get+0x6>
    bac2:	cmp	ip, r0
    bac4:	bne.n	bab6 <rtc_get+0x6>
			return (hi2 << 17) | (lo2 >> 15);
    bac6:	lsrs	r3, r3, #15
}
    bac8:	orr.w	r0, r3, r0, lsl #17
    bacc:	bx	lr
    bace:	nop
    bad0:	.word	0x400d4000

0000bad4 <sm_align_pool>:
	if (spool->pool_size % HEADER_SZ) return 0;
	return 1;
}

int sm_align_pool(struct smalloc_pool *spool)
{
    bad4:	push	{r3, lr}
	size_t x;

	if (smalloc_verify_pool(spool)) return 1;

	x = spool->pool_size % HEADER_SZ;
    bad6:	ldrd	r3, r2, [r0]
	if (!spool->pool || !spool->pool_size) return 0;
    bada:	cbz	r3, baf4 <sm_align_pool+0x20>
    badc:	cbz	r2, bb0e <sm_align_pool+0x3a>
	if (spool->pool_size % HEADER_SZ) return 0;
    bade:	ldr	r3, [pc, #60]	; (bb1c <sm_align_pool+0x48>)
    bae0:	umull	r1, r3, r3, r2
    bae4:	lsrs	r3, r3, #3
    bae6:	add.w	r3, r3, r3, lsl #1
    baea:	subs.w	r3, r2, r3, lsl #2
    baee:	bne.n	bb06 <sm_align_pool+0x32>
	if (smalloc_verify_pool(spool)) return 1;
    baf0:	movs	r0, #1
		errno = ENOSPC;
		return 0;
	}

	return 1;
}
    baf2:	pop	{r3, pc}
	x = spool->pool_size % HEADER_SZ;
    baf4:	ldr	r3, [pc, #36]	; (bb1c <sm_align_pool+0x48>)
    baf6:	umull	r1, r3, r3, r2
    bafa:	lsrs	r3, r3, #3
    bafc:	add.w	r3, r3, r3, lsl #1
	if (x) spool->pool_size -= x;
    bb00:	subs.w	r3, r2, r3, lsl #2
    bb04:	beq.n	bb0a <sm_align_pool+0x36>
    bb06:	subs	r2, r2, r3
    bb08:	str	r2, [r0, #4]
	if (spool->pool_size <= MIN_POOL_SZ) {
    bb0a:	cmp	r2, #240	; 0xf0
    bb0c:	bhi.n	baf0 <sm_align_pool+0x1c>
		errno = ENOSPC;
    bb0e:	bl	e2e0 <__errno>
    bb12:	movs	r2, #28
    bb14:	mov	r3, r0
    bb16:	movs	r0, #0
    bb18:	str	r2, [r3, #0]
}
    bb1a:	pop	{r3, pc}
    bb1c:	.word	0xaaaaaaab

0000bb20 <sm_set_pool>:

int sm_set_pool(struct smalloc_pool *spool, void *new_pool, size_t new_pool_size, int do_zero, smalloc_oom_handler oom_handler)
{
    bb20:	push	{r4, r5, r6, lr}
	if (!spool) {
    bb22:	mov	r4, r0
    bb24:	cbz	r0, bb76 <sm_set_pool+0x56>
		errno = EINVAL;
		return 0;
	}

	if (!new_pool || !new_pool_size) {
    bb26:	cbz	r1, bb30 <sm_set_pool+0x10>
    bb28:	clz	r6, r2
    bb2c:	lsrs	r6, r6, #5
    bb2e:	cbnz	r2, bb5a <sm_set_pool+0x3a>
	if (!spool->pool || !spool->pool_size) return 0;
    bb30:	ldr	r0, [r4, #0]
    bb32:	cbz	r0, bb76 <sm_set_pool+0x56>
    bb34:	ldr	r2, [r4, #4]
    bb36:	cbz	r2, bb76 <sm_set_pool+0x56>
	if (spool->pool_size % HEADER_SZ) return 0;
    bb38:	ldr	r3, [pc, #96]	; (bb9c <sm_set_pool+0x7c>)
    bb3a:	ldr	r1, [pc, #100]	; (bba0 <sm_set_pool+0x80>)
    bb3c:	mul.w	r3, r2, r3
    bb40:	cmp.w	r1, r3, ror #2
    bb44:	bcc.n	bb76 <sm_set_pool+0x56>
		if (smalloc_verify_pool(spool)) {
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    bb46:	ldr	r3, [r4, #8]
    bb48:	cbnz	r3, bb84 <sm_set_pool+0x64>
			memset(spool, 0, sizeof(struct smalloc_pool));
    bb4a:	movs	r2, #0
			return 1;
    bb4c:	movs	r3, #1
			memset(spool, 0, sizeof(struct smalloc_pool));
    bb4e:	str	r2, [r4, #0]
    bb50:	str	r2, [r4, #4]
    bb52:	str	r2, [r4, #8]
    bb54:	str	r2, [r4, #12]
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
}
    bb56:	mov	r0, r3
    bb58:	pop	{r4, r5, r6, pc}
	spool->pool = new_pool;
    bb5a:	mov	r5, r3
	spool->oomfn = oom_handler;
    bb5c:	ldr	r3, [sp, #16]
	spool->pool_size = new_pool_size;
    bb5e:	strd	r1, r2, [r0]
	spool->oomfn = oom_handler;
    bb62:	str	r3, [r0, #12]
	if (!sm_align_pool(spool)) return 0;
    bb64:	bl	bad4 <sm_align_pool>
    bb68:	mov	r3, r0
    bb6a:	cmp	r0, #0
    bb6c:	beq.n	bb56 <sm_set_pool+0x36>
	if (do_zero) {
    bb6e:	cbnz	r5, bb8c <sm_set_pool+0x6c>
	return 1;
    bb70:	movs	r3, #1
}
    bb72:	mov	r0, r3
    bb74:	pop	{r4, r5, r6, pc}
		errno = EINVAL;
    bb76:	bl	e2e0 <__errno>
    bb7a:	movs	r2, #22
		return 0;
    bb7c:	movs	r3, #0
		errno = EINVAL;
    bb7e:	str	r2, [r0, #0]
}
    bb80:	mov	r0, r3
    bb82:	pop	{r4, r5, r6, pc}
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    bb84:	movs	r1, #0
    bb86:	bl	e074 <memset>
    bb8a:	b.n	bb4a <sm_set_pool+0x2a>
		memset(spool->pool, 0, spool->pool_size);
    bb8c:	ldr	r2, [r4, #4]
    bb8e:	mov	r1, r6
    bb90:	ldr	r0, [r4, #0]
		spool->do_zero = do_zero;
    bb92:	str	r5, [r4, #8]
		memset(spool->pool, 0, spool->pool_size);
    bb94:	bl	e074 <memset>
	return 1;
    bb98:	movs	r3, #1
    bb9a:	b.n	bb56 <sm_set_pool+0x36>
    bb9c:	.word	0xaaaaaaab
    bba0:	.word	0x15555555

0000bba4 <Panic_Temp_isr>:
  unused_interrupt_vector();
    bba4:	b.w	b8d0 <unused_interrupt_vector>

0000bba8 <tempmonGetTemp>:
float tempmonGetTemp(void)
{
    uint32_t nmeas;
    float tmeas;

    while (!(TEMPMON_TEMPSENSE0 & 0x4U))
    bba8:	ldr	r2, [pc, #72]	; (bbf4 <tempmonGetTemp+0x4c>)
    bbaa:	ldr.w	r3, [r2, #128]	; 0x80
    bbae:	lsls	r3, r3, #29
    bbb0:	bpl.n	bbaa <tempmonGetTemp+0x2>
    {
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    bbb2:	ldr.w	r3, [r2, #128]	; 0x80
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    bbb6:	ldr	r0, [pc, #64]	; (bbf8 <tempmonGetTemp+0x50>)
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    bbb8:	ubfx	r3, r3, #8, #12
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    bbbc:	ldr	r1, [pc, #60]	; (bbfc <tempmonGetTemp+0x54>)
    bbbe:	vldr	s14, [r0]
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    bbc2:	vmov	s15, r3
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    bbc6:	vldr	s12, [r1]
    bbca:	vcvt.f32.u32	s14, s14
    bbce:	ldr	r2, [pc, #48]	; (bc00 <tempmonGetTemp+0x58>)
    bbd0:	vcvt.f32.s32	s15, s15
    bbd4:	ldr	r3, [pc, #44]	; (bc04 <tempmonGetTemp+0x5c>)
    bbd6:	vldr	s13, [r2]
    bbda:	vsub.f32	s15, s15, s14
    bbde:	vldr	s14, [r3]
    bbe2:	vcvt.f32.u32	s14, s14
    bbe6:	vmul.f32	s15, s15, s12
    bbea:	vdiv.f32	s0, s15, s13

    return tmeas;
}
    bbee:	vsub.f32	s0, s14, s0
    bbf2:	bx	lr
    bbf4:	.word	0x400d8100
    bbf8:	.word	0x200080d0
    bbfc:	.word	0x200080d8
    bc00:	.word	0x200080dc
    bc04:	.word	0x200080d4

0000bc08 <digitalWrite>:
void digitalWrite(uint8_t pin, uint8_t val)
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
    bc08:	cmp	r0, #54	; 0x36
    bc0a:	bhi.n	bc3a <digitalWrite+0x32>
	p = digital_pin_to_info_PGM + pin;
    bc0c:	lsls	r2, r0, #4
    bc0e:	ldr	r3, [pc, #64]	; (bc50 <digitalWrite+0x48>)
    bc10:	add.w	r0, r3, r0, lsl #4
	pinmode = *(p->reg + 1);
    bc14:	ldr	r3, [r3, r2]
{
    bc16:	push	{r4}
	mask = p->mask;
    bc18:	ldr	r2, [r0, #12]
	pinmode = *(p->reg + 1);
    bc1a:	ldr	r4, [r3, #4]
	if (pinmode & mask) {
    bc1c:	tst	r4, r2
    bc1e:	beq.n	bc2c <digitalWrite+0x24>
		// pin is configured for output mode
		if (val) {
    bc20:	cbnz	r1, bc3c <digitalWrite+0x34>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
    bc22:	ldr.w	r4, [sp], #4
			*(p->reg + 0x22) = mask; // clear register
    bc26:	str.w	r2, [r3, #136]	; 0x88
}
    bc2a:	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    bc2c:	ldr	r3, [r0, #8]
		if (val) {
    bc2e:	cbz	r1, bc46 <digitalWrite+0x3e>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    bc30:	ldr	r2, [pc, #32]	; (bc54 <digitalWrite+0x4c>)
}
    bc32:	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    bc36:	str	r2, [r3, #0]
}
    bc38:	bx	lr
    bc3a:	bx	lr
    bc3c:	ldr.w	r4, [sp], #4
			*(p->reg + 0x21) = mask; // set register
    bc40:	str.w	r2, [r3, #132]	; 0x84
}
    bc44:	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    bc46:	ldr	r2, [pc, #16]	; (bc58 <digitalWrite+0x50>)
}
    bc48:	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    bc4c:	str	r2, [r3, #0]
}
    bc4e:	bx	lr
    bc50:	.word	0x20000ebc
    bc54:	.word	0x0001f038
    bc58:	.word	0x00013038

0000bc5c <digitalRead>:

uint8_t digitalRead(uint8_t pin)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return 0;
    bc5c:	cmp	r0, #54	; 0x36
    bc5e:	bhi.n	bc78 <digitalRead+0x1c>
	p = digital_pin_to_info_PGM + pin;
    bc60:	ldr	r3, [pc, #24]	; (bc7c <digitalRead+0x20>)
    bc62:	lsls	r2, r0, #4
    bc64:	add.w	r0, r3, r0, lsl #4
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
    bc68:	ldr	r2, [r3, r2]
    bc6a:	ldr	r3, [r0, #12]
    bc6c:	ldr	r2, [r2, #8]
    bc6e:	tst	r2, r3
    bc70:	ite	ne
    bc72:	movne	r0, #1
    bc74:	moveq	r0, #0
    bc76:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return 0;
    bc78:	movs	r0, #0
}
    bc7a:	bx	lr
    bc7c:	.word	0x20000ebc

0000bc80 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    bc80:	cmp	r0, #54	; 0x36
    bc82:	bhi.n	bcd8 <pinMode+0x58>
	p = digital_pin_to_info_PGM + pin;
    bc84:	ldr	r3, [pc, #88]	; (bce0 <pinMode+0x60>)
    bc86:	lsls	r2, r0, #4
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    bc88:	cmp	r1, #1
	p = digital_pin_to_info_PGM + pin;
    bc8a:	add.w	r0, r3, r0, lsl #4
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    bc8e:	ldr	r2, [r3, r2]
{
    bc90:	push	{r4}
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    bc92:	ldr	r3, [r2, #4]
    bc94:	ldr	r4, [r0, #12]
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    bc96:	beq.n	bcb6 <pinMode+0x36>
    bc98:	cmp	r1, #4
    bc9a:	beq.n	bcb6 <pinMode+0x36>
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    bc9c:	bic.w	r3, r3, r4
    bca0:	str	r3, [r2, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    bca2:	ldr	r3, [r0, #8]
		if (mode == INPUT) {
    bca4:	cbz	r1, bcd2 <pinMode+0x52>
		} else if (mode == INPUT_PULLUP) {
    bca6:	cmp	r1, #2
    bca8:	beq.n	bcda <pinMode+0x5a>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
    bcaa:	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    bcac:	ite	eq
    bcae:	ldreq	r2, [pc, #52]	; (bce4 <pinMode+0x64>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    bcb0:	ldrne	r2, [pc, #52]	; (bce8 <pinMode+0x68>)
    bcb2:	str	r2, [r3, #0]
    bcb4:	b.n	bcc6 <pinMode+0x46>
		*(p->reg + 1) |= p->mask; // TODO: atomic
    bcb6:	orrs	r3, r4
		if (mode == OUTPUT) {
    bcb8:	cmp	r1, #1
		*(p->reg + 1) |= p->mask; // TODO: atomic
    bcba:	str	r3, [r2, #4]
			*(p->pad) = IOMUXC_PAD_DSE(7);
    bcbc:	ldr	r3, [r0, #8]
		if (mode == OUTPUT) {
    bcbe:	beq.n	bcd2 <pinMode+0x52>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    bcc0:	movw	r2, #2104	; 0x838
    bcc4:	str	r2, [r3, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    bcc6:	ldr	r3, [r0, #4]
    bcc8:	movs	r2, #21
}
    bcca:	ldr.w	r4, [sp], #4
	*(p->mux) = 5 | 0x10;
    bcce:	str	r2, [r3, #0]
}
    bcd0:	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7);
    bcd2:	movs	r2, #56	; 0x38
    bcd4:	str	r2, [r3, #0]
    bcd6:	b.n	bcc6 <pinMode+0x46>
    bcd8:	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    bcda:	ldr	r2, [pc, #16]	; (bcec <pinMode+0x6c>)
    bcdc:	str	r2, [r3, #0]
    bcde:	b.n	bcc6 <pinMode+0x46>
    bce0:	.word	0x20000ebc
    bce4:	.word	0x00013038
    bce8:	.word	0x00010038
    bcec:	.word	0x0001f038

0000bcf0 <flexpwm_init>:
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    bcf0:	movs	r3, #0
	p->FSTS0 = 0x000F; // clear fault status
    bcf2:	movs	r2, #15
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    bcf4:	movw	ip, #33464	; 0x82b8
	for (i=0; i < 4; i++) {
    bcf8:	mov	r1, r3
{
    bcfa:	push	{r4, lr}
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    bcfc:	mov.w	r4, #61440	; 0xf000
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    bd00:	mov.w	lr, #1024	; 0x400
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    bd04:	strh.w	r4, [r0, #396]	; 0x18c
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    bd08:	mov.w	r4, #57344	; 0xe000
	p->FSTS0 = 0x000F; // clear fault status
    bd0c:	strh.w	r2, [r0, #398]	; 0x18e
		p->SM[i].OCTRL = 0;
    bd10:	mov	r2, r1
	p->FFILT0 = 0;
    bd12:	strh.w	r3, [r0, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    bd16:	ldrh.w	r3, [r0, #392]	; 0x188
    bd1a:	uxth	r3, r3
    bd1c:	orr.w	r3, r3, #240	; 0xf0
    bd20:	strh.w	r3, [r0, #392]	; 0x188
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    bd24:	add.w	r3, r1, r1, lsl #1
	for (i=0; i < 4; i++) {
    bd28:	adds	r1, #1
    bd2a:	add.w	r3, r0, r3, lsl #5
    bd2e:	cmp	r1, #4
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    bd30:	strh	r4, [r3, #4]
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    bd32:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    bd36:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    bd38:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    bd3a:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    bd3c:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    bd3e:	strh.w	ip, [r3, #14]
		p->SM[i].VAL2 = 0;
    bd42:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    bd44:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    bd46:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    bd48:	strh	r2, [r3, #30]
	for (i=0; i < 4; i++) {
    bd4a:	bne.n	bd24 <flexpwm_init+0x34>
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    bd4c:	ldrh.w	r3, [r0, #392]	; 0x188
    bd50:	uxth	r3, r3
    bd52:	orr.w	r3, r3, #15
    bd56:	strh.w	r3, [r0, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    bd5a:	ldrh.w	r3, [r0, #392]	; 0x188
    bd5e:	uxth	r3, r3
    bd60:	orr.w	r3, r3, #3840	; 0xf00
    bd64:	strh.w	r3, [r0, #392]	; 0x188
}
    bd68:	pop	{r4, pc}
    bd6a:	nop

0000bd6c <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    bd6c:	ldr	r3, [pc, #220]	; (be4c <pwm_init+0xe0>)
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    bd6e:	ldr	r2, [pc, #224]	; (be50 <pwm_init+0xe4>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    bd70:	ldr	r1, [r3, #120]	; 0x78
		CCM_CCGR6_QTIMER3(CCM_CCGR_ON) | CCM_CCGR6_QTIMER4(CCM_CCGR_ON);
	flexpwm_init(&IMXRT_FLEXPWM1);
    bd72:	ldr	r0, [pc, #224]	; (be54 <pwm_init+0xe8>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    bd74:	orr.w	r1, r1, #16711680	; 0xff0000
{
    bd78:	push	{r4, r5, r6, lr}
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    bd7a:	str	r1, [r3, #120]	; 0x78
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    bd7c:	movw	r6, #4097	; 0x1001
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    bd80:	ldr.w	r1, [r3, #128]	; 0x80
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    bd84:	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    bd88:	movw	r4, #12326	; 0x3026
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    bd8c:	orrs	r2, r1
    bd8e:	str.w	r2, [r3, #128]	; 0x80
	flexpwm_init(&IMXRT_FLEXPWM1);
    bd92:	bl	bcf0 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM2);
    bd96:	add.w	r0, r0, #16384	; 0x4000
    bd9a:	bl	bcf0 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM3);
    bd9e:	add.w	r0, r0, #16384	; 0x4000
    bda2:	bl	bcf0 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM4);
    bda6:	add.w	r0, r0, #16384	; 0x4000
    bdaa:	bl	bcf0 <flexpwm_init>
	for (i=0; i < 4; i++) {
    bdae:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    bdb0:	sub.w	r0, r0, #2146304	; 0x20c000
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    bdb4:	mov.w	lr, #15
		p->CH[i].CTRL = 0; // stop timer
    bdb8:	mov	r1, r2
    bdba:	add.w	r3, r0, r2, lsl #5
    bdbe:	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    bdc2:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    bdc4:	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    bdc6:	cmp	r2, #4
		p->CH[i].CNTR = 0;
    bdc8:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    bdca:	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    bdce:	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    bdd0:	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    bdd2:	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    bdd6:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    bdd8:	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    bdda:	bne.n	bdba <pwm_init+0x4e>
    bddc:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    bdde:	ldr	r0, [pc, #120]	; (be58 <pwm_init+0xec>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    bde0:	mov.w	lr, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    bde4:	movw	r6, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    bde8:	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    bdea:	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    bdee:	movw	r4, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    bdf2:	add.w	r3, r0, r2, lsl #5
    bdf6:	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    bdfa:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    bdfc:	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    bdfe:	cmp	r2, #4
		p->CH[i].CNTR = 0;
    be00:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    be02:	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    be06:	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    be08:	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    be0a:	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    be0e:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    be10:	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    be12:	bne.n	bdf2 <pwm_init+0x86>
    be14:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    be16:	ldr	r0, [pc, #68]	; (be5c <pwm_init+0xf0>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    be18:	movs	r6, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    be1a:	movw	r5, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    be1e:	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    be20:	movw	r4, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    be24:	movw	lr, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    be28:	add.w	r3, r0, r2, lsl #5
    be2c:	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    be30:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    be32:	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    be34:	cmp	r2, #4
		p->CH[i].CNTR = 0;
    be36:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    be38:	strh	r6, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    be3a:	strh	r5, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    be3c:	strh	r4, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    be3e:	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    be42:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    be44:	strh.w	lr, [r3, #12]
	for (i=0; i < 4; i++) {
    be48:	bne.n	be28 <pwm_init+0xbc>
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    be4a:	pop	{r4, r5, r6, pc}
    be4c:	.word	0x400fc000
    be50:	.word	0xfc030000
    be54:	.word	0x403dc000
    be58:	.word	0x401e0000
    be5c:	.word	0x401e4000

0000be60 <rx_queue_transfer>:
{
    be60:	push	{r3, r4, r5, r6, r7, lr}
	void *buffer = rx_buffer + i * MIDI_RX_SIZE_480;
    be62:	ldr	r4, [pc, #80]	; (beb4 <rx_queue_transfer+0x54>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    be64:	mov.w	r5, #3758153728	; 0xe000e000
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    be68:	ldr	r6, [pc, #76]	; (beb8 <rx_queue_transfer+0x58>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    be6a:	mov.w	r2, #131072	; 0x20000
	void *buffer = rx_buffer + i * MIDI_RX_SIZE_480;
    be6e:	add.w	r4, r4, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    be72:	ldr	r7, [pc, #72]	; (bebc <rx_queue_transfer+0x5c>)
    be74:	add.w	r6, r6, r0, lsl #5
{
    be78:	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
    be7a:	str.w	r2, [r5, #396]	; 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    be7e:	mov	r1, r4
    be80:	ldrh	r2, [r7, #0]
    be82:	mov	r0, r6
    be84:	bl	b75c <usb_prepare_transfer>
	arm_dcache_delete(buffer, rx_packet_size);
    be88:	ldrh	r3, [r7, #0]
	uint32_t end_addr = (uint32_t)addr + size;
    be8a:	add	r3, r4
	asm("dsb");
    be8c:	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    be90:	str.w	r4, [r5, #3932]	; 0xf5c
		location += 32;
    be94:	adds	r4, #32
	} while (location < end_addr);
    be96:	cmp	r3, r4
    be98:	bhi.n	be90 <rx_queue_transfer+0x30>
	asm("dsb");
    be9a:	dsb	sy
	asm("isb");
    be9e:	isb	sy
	usb_receive(MIDI_RX_ENDPOINT, rx_transfer + i);
    bea2:	movs	r0, #4
    bea4:	mov	r1, r6
    bea6:	bl	b7b4 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    beaa:	mov.w	r3, #131072	; 0x20000
    beae:	str.w	r3, [r5, #268]	; 0x10c
}
    beb2:	pop	{r3, r4, r5, r6, r7, pc}
    beb4:	.word	0x20203d00
    beb8:	.word	0x20003020
    bebc:	.word	0x2000814c

0000bec0 <rx_event>:
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    bec0:	ldr	r2, [r0, #4]
	len &= 0xFFFC; // MIDI packets must be multiple of 4 bytes
    bec2:	movw	r1, #65532	; 0xfffc
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    bec6:	ldr	r3, [pc, #68]	; (bf0c <rx_event+0x4c>)
    bec8:	ubfx	r2, r2, #16, #15
	int i = t->callback_param;
    becc:	ldr	r0, [r0, #28]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    bece:	ldrh	r3, [r3, #0]
    bed0:	subs	r3, r3, r2
	if (len > 0) {
    bed2:	ands	r3, r1
    bed4:	beq.n	bf06 <rx_event+0x46>
		rx_count[i] = len;
    bed6:	ldr	r1, [pc, #56]	; (bf10 <rx_event+0x50>)
{
    bed8:	push	{r4, r5}
		uint32_t head = rx_head;
    beda:	ldr	r4, [pc, #56]	; (bf14 <rx_event+0x54>)
		rx_index[i] = 0;
    bedc:	ldr	r5, [pc, #56]	; (bf18 <rx_event+0x58>)
		uint32_t head = rx_head;
    bede:	ldrb	r2, [r4, #0]
		rx_count[i] = len;
    bee0:	strh.w	r3, [r1, r0, lsl #1]
		rx_index[i] = 0;
    bee4:	movs	r1, #0
		if (++head > RX_NUM) head = 0;
    bee6:	adds	r2, #1
		rx_index[i] = 0;
    bee8:	strh.w	r1, [r5, r0, lsl #1]
		if (++head > RX_NUM) head = 0;
    beec:	cmp	r2, #6
		rx_head = head;
    beee:	ite	ls
    bef0:	uxtbls	r1, r2
		if (++head > RX_NUM) head = 0;
    bef2:	movhi	r2, r1
		rx_head = head;
    bef4:	strb	r1, [r4, #0]
		rx_available += len;
    bef6:	ldr	r1, [pc, #36]	; (bf1c <rx_event+0x5c>)
    bef8:	ldr	r4, [r1, #0]
    befa:	add	r3, r4
    befc:	str	r3, [r1, #0]
		rx_list[head] = i;
    befe:	ldr	r3, [pc, #32]	; (bf20 <rx_event+0x60>)
    bf00:	strb	r0, [r3, r2]
}
    bf02:	pop	{r4, r5}
    bf04:	bx	lr
		rx_queue_transfer(i);
    bf06:	b.w	be60 <rx_queue_transfer>
    bf0a:	nop
    bf0c:	.word	0x2000814c
    bf10:	.word	0x20008094
    bf14:	.word	0x20008168
    bf18:	.word	0x200080b0
    bf1c:	.word	0x20008080
    bf20:	.word	0x200080c8

0000bf24 <usb_midi_configure>:
	if (usb_high_speed) {
    bf24:	ldr	r3, [pc, #132]	; (bfac <usb_midi_configure+0x88>)
{
    bf26:	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
    bf28:	ldrb	r3, [r3, #0]
    bf2a:	cmp	r3, #0
    bf2c:	beq.n	bfa6 <usb_midi_configure+0x82>
    bf2e:	mov.w	r3, #512	; 0x200
    bf32:	mov	r6, r3
		rx_packet_size = MIDI_RX_SIZE_480;
    bf34:	ldr	r1, [pc, #120]	; (bfb0 <usb_midi_configure+0x8c>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
    bf36:	movs	r2, #128	; 0x80
		tx_packet_size = MIDI_TX_SIZE_480;
    bf38:	ldr	r5, [pc, #120]	; (bfb4 <usb_midi_configure+0x90>)
	tx_head = 0;
    bf3a:	movs	r4, #0
		rx_packet_size = MIDI_RX_SIZE_480;
    bf3c:	strh	r3, [r1, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    bf3e:	movs	r1, #0
    bf40:	ldr	r0, [pc, #116]	; (bfb8 <usb_midi_configure+0x94>)
		tx_packet_size = MIDI_TX_SIZE_480;
    bf42:	strh	r3, [r5, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    bf44:	bl	e074 <memset>
	tx_head = 0;
    bf48:	ldr	r2, [pc, #112]	; (bfbc <usb_midi_configure+0x98>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    bf4a:	mov	r1, r4
	tx_available = 0;
    bf4c:	ldr	r3, [pc, #112]	; (bfc0 <usb_midi_configure+0x9c>)
	tx_head = 0;
    bf4e:	strb	r4, [r2, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    bf50:	movs	r2, #192	; 0xc0
    bf52:	ldr	r0, [pc, #112]	; (bfc4 <usb_midi_configure+0xa0>)
	tx_available = 0;
    bf54:	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    bf56:	bl	e074 <memset>
	memset(rx_count, 0, sizeof(rx_count));
    bf5a:	ldr	r2, [pc, #108]	; (bfc8 <usb_midi_configure+0xa4>)
	usb_config_rx(MIDI_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    bf5c:	mov	r1, r6
	memset(rx_index, 0, sizeof(rx_index));
    bf5e:	ldr	r3, [pc, #108]	; (bfcc <usb_midi_configure+0xa8>)
	usb_config_rx(MIDI_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    bf60:	movs	r0, #4
	memset(rx_count, 0, sizeof(rx_count));
    bf62:	str	r4, [r2, #8]
	memset(rx_index, 0, sizeof(rx_index));
    bf64:	str	r4, [r3, #8]
	memset(rx_count, 0, sizeof(rx_count));
    bf66:	strd	r4, r4, [r2]
	rx_head = 0;
    bf6a:	ldr	r2, [pc, #100]	; (bfd0 <usb_midi_configure+0xac>)
	memset(rx_index, 0, sizeof(rx_index));
    bf6c:	strd	r4, r4, [r3]
	rx_head = 0;
    bf70:	strb	r4, [r2, #0]
	rx_tail = 0;
    bf72:	ldr	r3, [pc, #96]	; (bfd4 <usb_midi_configure+0xb0>)
	rx_available = 0;
    bf74:	ldr	r2, [pc, #96]	; (bfd8 <usb_midi_configure+0xb4>)
	rx_tail = 0;
    bf76:	strb	r4, [r3, #0]
	usb_config_rx(MIDI_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    bf78:	ldr	r3, [pc, #96]	; (bfdc <usb_midi_configure+0xb8>)
	rx_available = 0;
    bf7a:	str	r4, [r2, #0]
	usb_config_rx(MIDI_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    bf7c:	mov	r2, r4
    bf7e:	bl	b5c4 <usb_config_rx>
	usb_config_tx(MIDI_TX_ENDPOINT, tx_packet_size, 0, NULL); // TODO: is ZLP needed?
    bf82:	mov	r3, r4
    bf84:	mov	r2, r4
    bf86:	ldrh	r1, [r5, #0]
    bf88:	movs	r0, #4
    bf8a:	bl	b628 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    bf8e:	mov	r0, r4
    bf90:	adds	r4, #1
    bf92:	bl	be60 <rx_queue_transfer>
    bf96:	cmp	r4, #6
    bf98:	bne.n	bf8e <usb_midi_configure+0x6a>
	transmit_previous_timeout = 0;
    bf9a:	movs	r3, #0
    bf9c:	ldr	r1, [pc, #64]	; (bfe0 <usb_midi_configure+0xbc>)
	tx_noautoflush = 0;
    bf9e:	ldr	r2, [pc, #68]	; (bfe4 <usb_midi_configure+0xc0>)
	transmit_previous_timeout = 0;
    bfa0:	strb	r3, [r1, #0]
	tx_noautoflush = 0;
    bfa2:	strb	r3, [r2, #0]
}
    bfa4:	pop	{r4, r5, r6, pc}
    bfa6:	movs	r3, #64	; 0x40
    bfa8:	mov	r6, r3
    bfaa:	b.n	bf34 <usb_midi_configure+0x10>
    bfac:	.word	0x20008178
    bfb0:	.word	0x2000814c
    bfb4:	.word	0x20008156
    bfb8:	.word	0x200031a0
    bfbc:	.word	0x2000816f
    bfc0:	.word	0x20008152
    bfc4:	.word	0x20003020
    bfc8:	.word	0x20008094
    bfcc:	.word	0x200080b0
    bfd0:	.word	0x20008168
    bfd4:	.word	0x2000816a
    bfd8:	.word	0x20008080
    bfdc:	.word	0x0000bec1
    bfe0:	.word	0x2000816d
    bfe4:	.word	0x20008171

0000bfe8 <usb_midi_flush_output>:
{
    bfe8:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (tx_noautoflush == 0 && tx_available > 0) {
    bfec:	ldr	r3, [pc, #132]	; (c074 <usb_midi_flush_output+0x8c>)
    bfee:	ldrb	r5, [r3, #0]
    bff0:	cbnz	r5, bff8 <usb_midi_flush_output+0x10>
    bff2:	ldr	r6, [pc, #132]	; (c078 <usb_midi_flush_output+0x90>)
    bff4:	ldrh	r3, [r6, #0]
    bff6:	cbnz	r3, bffc <usb_midi_flush_output+0x14>
}
    bff8:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		uint32_t head = tx_head;
    bffc:	ldr.w	r8, [pc, #136]	; c088 <usb_midi_flush_output+0xa0>
		transfer_t *xfer = tx_transfer + head;
    c000:	ldr	r2, [pc, #120]	; (c07c <usb_midi_flush_output+0x94>)
		uint32_t head = tx_head;
    c002:	ldrb.w	r7, [r8]
		uint8_t *txbuf = txbuffer + (head * TX_SIZE);
    c006:	ldr	r4, [pc, #120]	; (c080 <usb_midi_flush_output+0x98>)
		transfer_t *xfer = tx_transfer + head;
    c008:	add.w	r9, r2, r7, lsl #5
		uint32_t len = tx_packet_size - tx_available;
    c00c:	ldr	r2, [pc, #116]	; (c084 <usb_midi_flush_output+0x9c>)
		uint8_t *txbuf = txbuffer + (head * TX_SIZE);
    c00e:	add.w	r4, r4, r7, lsl #9
		uint32_t len = tx_packet_size - tx_available;
    c012:	ldrh	r2, [r2, #0]
		usb_prepare_transfer(xfer, txbuf, len, 0);
    c014:	mov	r0, r9
    c016:	mov	r1, r4
    c018:	subs	r2, r2, r3
    c01a:	mov	r3, r5
    c01c:	bl	b75c <usb_prepare_transfer>
	asm("dsb");
    c020:	dsb	sy
    c024:	add.w	r2, r4, #32
	uint32_t end_addr = (uint32_t)addr + size;
    c028:	add.w	r3, r4, #512	; 0x200
    c02c:	cmp	r3, r2
    c02e:	ite	cc
    c030:	movcc	r3, #1
    c032:	movcs	r3, #16
		SCB_CACHE_DCCIMVAC = location;
    c034:	mov.w	r2, #3758153728	; 0xe000e000
    c038:	add.w	r3, r4, r3, lsl #5
    c03c:	str.w	r4, [r2, #3952]	; 0xf70
		location += 32;
    c040:	adds	r4, #32
	} while (location < end_addr);
    c042:	cmp	r4, r3
    c044:	bne.n	c03c <usb_midi_flush_output+0x54>
	asm("dsb");
    c046:	dsb	sy
	asm("isb");
    c04a:	isb	sy
		if (++head >= TX_NUM) head = 0;
    c04e:	adds	r7, #1
		usb_transmit(MIDI_TX_ENDPOINT, xfer);
    c050:	mov	r1, r9
    c052:	movs	r0, #4
    c054:	bl	b78c <usb_transmit>
		if (++head >= TX_NUM) head = 0;
    c058:	cmp	r7, #3
		tx_available = 0;
    c05a:	mov.w	r3, #0
		usb_stop_sof_interrupts(MIDI_INTERFACE);
    c05e:	mov.w	r0, #2
		tx_head = head;
    c062:	it	ls
    c064:	uxtbls	r5, r7
		tx_available = 0;
    c066:	strh	r3, [r6, #0]
		tx_head = head;
    c068:	strb.w	r5, [r8]
}
    c06c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		usb_stop_sof_interrupts(MIDI_INTERFACE);
    c070:	b.w	ae58 <usb_stop_sof_interrupts>
    c074:	.word	0x20008171
    c078:	.word	0x20008152
    c07c:	.word	0x200031a0
    c080:	.word	0x20204900
    c084:	.word	0x20008156
    c088:	.word	0x2000816f

0000c08c <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    c08c:	ldr	r2, [pc, #72]	; (c0d8 <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    c08e:	ldr	r3, [pc, #76]	; (c0dc <usb_init_serialnumber+0x50>)
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    c090:	ldr.w	r0, [r2, #544]	; 0x220
    c094:	bic.w	r0, r0, #4278190080	; 0xff000000
	if (num < 10000000) num = num * 10;
    c098:	cmp	r0, r3
{
    c09a:	push	{r4, lr}
    c09c:	sub	sp, #16
	if (num < 10000000) num = num * 10;
    c09e:	bcs.n	c0a6 <usb_init_serialnumber+0x1a>
    c0a0:	add.w	r0, r0, r0, lsl #2
    c0a4:	lsls	r0, r0, #1
	ultoa(num, buf, 10);
    c0a6:	ldr	r4, [pc, #56]	; (c0e0 <usb_init_serialnumber+0x54>)
    c0a8:	add	r1, sp, #4
    c0aa:	movs	r2, #10
    c0ac:	bl	d0b0 <ultoa>
	for (i=0; i<10; i++) {
    c0b0:	add	r1, sp, #4
    c0b2:	movs	r3, #0
    c0b4:	mov	r0, r4
		char c = buf[i];
    c0b6:	ldrb.w	r2, [r1], #1
	for (i=0; i<10; i++) {
    c0ba:	adds	r3, #1
		if (!c) break;
    c0bc:	cbz	r2, c0ce <usb_init_serialnumber+0x42>
	for (i=0; i<10; i++) {
    c0be:	cmp	r3, #10
		usb_string_serial_number_default.wString[i] = c;
    c0c0:	strh.w	r2, [r0, #2]!
	for (i=0; i<10; i++) {
    c0c4:	bne.n	c0b6 <usb_init_serialnumber+0x2a>
    c0c6:	movs	r3, #22
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    c0c8:	strb	r3, [r4, #0]
}
    c0ca:	add	sp, #16
    c0cc:	pop	{r4, pc}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    c0ce:	lsls	r3, r3, #1
    c0d0:	uxtb	r3, r3
    c0d2:	strb	r3, [r4, #0]
}
    c0d4:	add	sp, #16
    c0d6:	pop	{r4, pc}
    c0d8:	.word	0x401f4400
    c0dc:	.word	0x00989680
    c0e0:	.word	0x20001a40

0000c0e4 <yield>:

extern const uint8_t _serialEvent_default;	

void yield(void) __attribute__ ((weak));
void yield(void)
{
    c0e4:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
    c0e8:	ldr	r6, [pc, #200]	; (c1b4 <yield+0xd0>)
    c0ea:	ldrb	r3, [r6, #0]
    c0ec:	cbz	r3, c108 <yield+0x24>
	if (running) return; // TODO: does this need to be atomic?
    c0ee:	ldr	r7, [pc, #200]	; (c1b8 <yield+0xd4>)
    c0f0:	ldrb	r2, [r7, #0]
    c0f2:	cbnz	r2, c108 <yield+0x24>
	running = 1;
    c0f4:	movs	r2, #1


	// USB Serial - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    c0f6:	lsls	r1, r3, #31
	running = 1;
    c0f8:	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    c0fa:	bmi.n	c186 <yield+0xa2>
		if (_serialEventUSB2_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIALUSB2;
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) HardwareSerial::processSerialEventsList();
    c0fc:	lsls	r2, r3, #30
    c0fe:	bmi.n	c14e <yield+0x6a>

	running = 0;
    c100:	movs	r2, #0
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    c102:	lsls	r3, r3, #29
	running = 0;
    c104:	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    c106:	bmi.n	c10c <yield+0x28>
	
};
    c108:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	// Wait for event(s) to occur.  These are most likely to be useful when
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);
	static void runFromYield() {
		if (!firstYield) return;  
    c10c:	ldr	r3, [pc, #172]	; (c1bc <yield+0xd8>)
    c10e:	ldr	r2, [r3, #0]
    c110:	cmp	r2, #0
    c112:	beq.n	c108 <yield+0x24>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    c114:	mrs	r2, IPSR
		if (ipsr != 0) return;
    c118:	cmp	r2, #0
    c11a:	bne.n	c108 <yield+0x24>
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    c11c:	mrs	r5, PRIMASK
		__disable_irq();
    c120:	cpsid	i
		EventResponder *first = firstYield;
    c122:	ldr	r0, [r3, #0]
		if (first == nullptr) {
    c124:	cmp	r0, #0
    c126:	beq.n	c1a0 <yield+0xbc>
		if (runningFromYield) {
    c128:	ldr	r4, [pc, #148]	; (c1c0 <yield+0xdc>)
    c12a:	ldrb	r1, [r4, #0]
    c12c:	cmp	r1, #0
    c12e:	bne.n	c1a0 <yield+0xbc>
		runningFromYield = true;
    c130:	movs	r2, #1
    c132:	strb	r2, [r4, #0]
		firstYield = first->_next;
    c134:	ldr	r2, [r0, #20]
    c136:	str	r2, [r3, #0]
		if (firstYield) {
    c138:	cmp	r2, #0
    c13a:	beq.n	c1ae <yield+0xca>
			firstYield->_prev = nullptr;
    c13c:	str	r1, [r2, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    c13e:	cbnz	r5, c142 <yield+0x5e>
    c140:	cpsie	i
		first->_triggered = false;
    c142:	movs	r5, #0
		(*(first->_function))(*first);
    c144:	ldr	r3, [r0, #8]
		first->_triggered = false;
    c146:	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    c148:	blx	r3
		runningFromYield = false;
    c14a:	strb	r5, [r4, #0]
    c14c:	b.n	c108 <yield+0x24>
	*/

	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    c14e:	ldr.w	r8, [pc, #124]	; c1cc <yield+0xe8>
    c152:	ldrb.w	r2, [r8]
    c156:	cmp	r2, #0
    c158:	beq.n	c100 <yield+0x1c>
    c15a:	movs	r5, #0
    c15c:	ldr.w	r9, [pc, #112]	; c1d0 <yield+0xec>
    c160:	mov	r3, r5
			s_serials_with_serial_events[i]->doYieldCode();
    c162:	ldr.w	r4, [r9, r3, lsl #2]
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    c166:	adds	r5, #1
	static HardwareSerial 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
    c168:	ldr	r3, [r4, #0]
    c16a:	mov	r0, r4
    c16c:	ldr	r3, [r3, #16]
    c16e:	blx	r3
    c170:	cbz	r0, c178 <yield+0x94>
    c172:	ldr	r3, [r4, #20]
    c174:	ldr	r3, [r3, #8]
    c176:	blx	r3
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    c178:	ldrb.w	r2, [r8]
    c17c:	uxtb	r3, r5
    c17e:	cmp	r2, r3
    c180:	bhi.n	c162 <yield+0x7e>
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    c182:	ldrb	r3, [r6, #0]
    c184:	b.n	c100 <yield+0x1c>
    c186:	bl	a778 <usb_serial_available>
		if (Serial.available()) serialEvent();
    c18a:	cbnz	r0, c1a8 <yield+0xc4>
		if (_serialEvent_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIAL;
    c18c:	ldr	r3, [pc, #52]	; (c1c4 <yield+0xe0>)
    c18e:	ldrb	r3, [r3, #0]
    c190:	cbnz	r3, c196 <yield+0xb2>
    c192:	ldrb	r3, [r6, #0]
    c194:	b.n	c0fc <yield+0x18>
    c196:	ldrb	r3, [r6, #0]
    c198:	and.w	r3, r3, #254	; 0xfe
    c19c:	strb	r3, [r6, #0]
    c19e:	b.n	c0fc <yield+0x18>
		if (doit) __enable_irq();
    c1a0:	cmp	r5, #0
    c1a2:	bne.n	c108 <yield+0x24>
    c1a4:	cpsie	i
    c1a6:	b.n	c108 <yield+0x24>
		if (Serial.available()) serialEvent();
    c1a8:	bl	d0a4 <serialEvent()>
    c1ac:	b.n	c18c <yield+0xa8>
			lastYield = nullptr;
    c1ae:	ldr	r3, [pc, #24]	; (c1c8 <yield+0xe4>)
    c1b0:	str	r2, [r3, #0]
    c1b2:	b.n	c13e <yield+0x5a>
    c1b4:	.word	0x20001a57
    c1b8:	.word	0x20008163
    c1bc:	.word	0x20006504
    c1c0:	.word	0x20008160
    c1c4:	.word	0x60002376
    c1c8:	.word	0x20006510
    c1cc:	.word	0x20008161
    c1d0:	.word	0x20006514

0000c1d4 <EventResponder::triggerEventNotImmediate()>:
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    c1d4:	mrs	r2, PRIMASK
		__disable_irq();
    c1d8:	cpsid	i
	if (_triggered == false) {
    c1da:	ldrb	r3, [r0, #29]
    c1dc:	cbnz	r3, c1f6 <EventResponder::triggerEventNotImmediate()+0x22>
		if (_type == EventTypeYield) {
    c1de:	ldrb	r1, [r0, #28]
    c1e0:	cmp	r1, #1
{
    c1e2:	push	{r4, r5}
		if (_type == EventTypeYield) {
    c1e4:	beq.n	c1fe <EventResponder::triggerEventNotImmediate()+0x2a>
		} else if (_type == EventTypeInterrupt) {
    c1e6:	cmp	r1, #3
    c1e8:	beq.n	c212 <EventResponder::triggerEventNotImmediate()+0x3e>
		_triggered = true;
    c1ea:	movs	r3, #1
    c1ec:	strb	r3, [r0, #29]
		if (doit) __enable_irq();
    c1ee:	cbnz	r2, c1f2 <EventResponder::triggerEventNotImmediate()+0x1e>
    c1f0:	cpsie	i
}
    c1f2:	pop	{r4, r5}
    c1f4:	bx	lr
    c1f6:	cbnz	r2, c1fc <EventResponder::triggerEventNotImmediate()+0x28>
    c1f8:	cpsie	i
    c1fa:	bx	lr
    c1fc:	bx	lr
			if (firstYield == nullptr) {
    c1fe:	ldr	r4, [pc, #72]	; (c248 <EventResponder::triggerEventNotImmediate()+0x74>)
    c200:	ldr	r1, [r4, #0]
    c202:	cbz	r1, c232 <EventResponder::triggerEventNotImmediate()+0x5e>
				_prev = lastYield;
    c204:	ldr	r1, [pc, #68]	; (c24c <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
    c206:	str	r3, [r0, #20]
				_prev = lastYield;
    c208:	ldr	r3, [r1, #0]
				lastYield = this;
    c20a:	str	r0, [r1, #0]
				_prev = lastYield;
    c20c:	str	r3, [r0, #24]
				_prev->_next = this;
    c20e:	str	r0, [r3, #20]
				lastYield = this;
    c210:	b.n	c1ea <EventResponder::triggerEventNotImmediate()+0x16>
			if (firstInterrupt == nullptr) {
    c212:	ldr	r5, [pc, #60]	; (c250 <EventResponder::triggerEventNotImmediate()+0x7c>)
    c214:	ldr	r1, [pc, #60]	; (c254 <EventResponder::triggerEventNotImmediate()+0x80>)
    c216:	ldr	r4, [r5, #0]
    c218:	cbz	r4, c23e <EventResponder::triggerEventNotImmediate()+0x6a>
				_next = nullptr;
    c21a:	str	r3, [r0, #20]
				_prev = lastInterrupt;
    c21c:	ldr	r3, [r1, #0]
    c21e:	str	r3, [r0, #24]
				_prev->_next = this;
    c220:	str	r0, [r3, #20]
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    c222:	mov.w	r3, #3758153728	; 0xe000e000
    c226:	mov.w	r4, #268435456	; 0x10000000
				lastInterrupt = this;
    c22a:	str	r0, [r1, #0]
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    c22c:	str.w	r4, [r3, #3332]	; 0xd04
    c230:	b.n	c1ea <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
    c232:	ldr	r3, [pc, #24]	; (c24c <EventResponder::triggerEventNotImmediate()+0x78>)
				firstYield = this;
    c234:	str	r0, [r4, #0]
				lastYield = this;
    c236:	str	r0, [r3, #0]
				_prev = nullptr;
    c238:	strd	r1, r1, [r0, #20]
				lastYield = this;
    c23c:	b.n	c1ea <EventResponder::triggerEventNotImmediate()+0x16>
				_prev = nullptr;
    c23e:	strd	r4, r4, [r0, #20]
				firstInterrupt = this;
    c242:	str	r0, [r5, #0]
				lastInterrupt = this;
    c244:	b.n	c222 <EventResponder::triggerEventNotImmediate()+0x4e>
    c246:	nop
    c248:	.word	0x20006504
    c24c:	.word	0x20006510
    c250:	.word	0x2000650c
    c254:	.word	0x20006508

0000c258 <EventResponder::runFromInterrupt()>:
{
    c258:	push	{r4, r5, r6, lr}
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    c25a:	mrs	r2, PRIMASK
		__disable_irq();
    c25e:	cpsid	i
		EventResponder *first = firstInterrupt;
    c260:	ldr	r4, [pc, #48]	; (c294 <EventResponder::runFromInterrupt()+0x3c>)
    c262:	ldr	r0, [r4, #0]
		if (first) {
    c264:	cbz	r0, c288 <EventResponder::runFromInterrupt()+0x30>
				lastInterrupt = nullptr;
    c266:	ldr	r6, [pc, #48]	; (c298 <EventResponder::runFromInterrupt()+0x40>)
				firstInterrupt->_prev = nullptr;
    c268:	movs	r5, #0
			firstInterrupt = first->_next;
    c26a:	ldr	r3, [r0, #20]
    c26c:	str	r3, [r4, #0]
			if (firstInterrupt) {
    c26e:	cbz	r3, c28e <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    c270:	str	r5, [r3, #24]
		if (doit) __enable_irq();
    c272:	cbnz	r2, c276 <EventResponder::runFromInterrupt()+0x1e>
    c274:	cpsie	i
			(*(first->_function))(*first);
    c276:	ldr	r3, [r0, #8]
			first->_triggered = false;
    c278:	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    c27a:	blx	r3
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    c27c:	mrs	r2, PRIMASK
		__disable_irq();
    c280:	cpsid	i
		EventResponder *first = firstInterrupt;
    c282:	ldr	r0, [r4, #0]
		if (first) {
    c284:	cmp	r0, #0
    c286:	bne.n	c26a <EventResponder::runFromInterrupt()+0x12>
		if (doit) __enable_irq();
    c288:	cbnz	r2, c28c <EventResponder::runFromInterrupt()+0x34>
    c28a:	cpsie	i
}
    c28c:	pop	{r4, r5, r6, pc}
				lastInterrupt = nullptr;
    c28e:	str	r3, [r6, #0]
    c290:	b.n	c272 <EventResponder::runFromInterrupt()+0x1a>
    c292:	nop
    c294:	.word	0x2000650c
    c298:	.word	0x20006508

0000c29c <pendablesrvreq_isr>:
	EventResponder::runFromInterrupt();
    c29c:	b.w	c258 <EventResponder::runFromInterrupt()>

0000c2a0 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    c2a0:	ldr	r1, [pc, #16]	; (c2b4 <systick_isr+0x14>)
	systick_millis_count++;
    c2a2:	ldr	r2, [pc, #20]	; (c2b8 <systick_isr+0x18>)
	systick_cycle_count = ARM_DWT_CYCCNT;
    c2a4:	ldr	r1, [r1, #4]
    c2a6:	ldr	r3, [pc, #20]	; (c2bc <systick_isr+0x1c>)
    c2a8:	str	r1, [r3, #0]
	systick_millis_count++;
    c2aa:	ldr	r3, [r2, #0]
    c2ac:	adds	r3, #1
    c2ae:	str	r3, [r2, #0]
}
    c2b0:	bx	lr
    c2b2:	nop
    c2b4:	.word	0xe0001000
    c2b8:	.word	0x200080e8
    c2bc:	.word	0x200080e4

0000c2c0 <DMAChannel::begin(bool)>:
#warning "CR is defined as something?"
#endif


void DMAChannel::begin(bool force_initialization)
{
    c2c0:	push	{r4, r5}
	uint32_t ch = 0;

	__disable_irq();
    c2c2:	cpsid	i
	if (!force_initialization && TCD && channel < DMA_MAX_CHANNELS
    c2c4:	cbnz	r1, c2d0 <DMAChannel::begin(bool)+0x10>
    c2c6:	ldr	r3, [r0, #0]
    c2c8:	cbz	r3, c2d0 <DMAChannel::begin(bool)+0x10>
    c2ca:	ldrb	r2, [r0, #4]
    c2cc:	cmp	r2, #15
    c2ce:	bls.n	c348 <DMAChannel::begin(bool)+0x88>
	  && (dma_channel_allocated_mask & (1 << channel))
    c2d0:	ldr	r4, [pc, #144]	; (c364 <DMAChannel::begin(bool)+0xa4>)
    c2d2:	ldrh	r1, [r4, #0]
{
    c2d4:	movs	r3, #0
		// DMA channel already allocated
		__enable_irq();
		return;
	}
	while (1) {
		if (!(dma_channel_allocated_mask & (1 << ch))) {
    c2d6:	asr.w	r2, r1, r3
    c2da:	ands.w	r2, r2, #1
    c2de:	beq.n	c2f2 <DMAChannel::begin(bool)+0x32>
			dma_channel_allocated_mask |= (1 << ch);
			__enable_irq();
			break;
		}
		if (++ch >= DMA_MAX_CHANNELS) {
    c2e0:	adds	r3, #1
    c2e2:	cmp	r3, #16
    c2e4:	bne.n	c2d6 <DMAChannel::begin(bool)+0x16>
			__enable_irq();
    c2e6:	cpsie	i
			TCD = (TCD_t *)0;
    c2e8:	movs	r2, #0
			channel = DMA_MAX_CHANNELS;
    c2ea:	strb	r3, [r0, #4]
			TCD = (TCD_t *)0;
    c2ec:	str	r2, [r0, #0]
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
}
    c2ee:	pop	{r4, r5}
    c2f0:	bx	lr
			dma_channel_allocated_mask |= (1 << ch);
    c2f2:	mov.w	ip, #1
    c2f6:	lsl.w	ip, ip, r3
    c2fa:	orr.w	r1, r1, ip
    c2fe:	strh	r1, [r4, #0]
			__enable_irq();
    c300:	cpsie	i
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    c302:	ldr	r1, [pc, #100]	; (c368 <DMAChannel::begin(bool)+0xa8>)
	channel = ch;
    c304:	uxtb.w	ip, r3
	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    c308:	ldr	r4, [pc, #96]	; (c36c <DMAChannel::begin(bool)+0xac>)
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    c30a:	add	r1, r3
	channel = ch;
    c30c:	strb.w	ip, [r0, #4]
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    c310:	lsls	r3, r1, #5
	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    c312:	ldr	r1, [r4, #124]	; 0x7c
    c314:	orr.w	r1, r1, #192	; 0xc0
    c318:	str	r1, [r4, #124]	; 0x7c
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
    c31a:	movw	r4, #1154	; 0x482
    c31e:	ldr	r1, [pc, #80]	; (c370 <DMAChannel::begin(bool)+0xb0>)
    c320:	str	r4, [r1, #0]
	DMA_CERQ = ch;
    c322:	strb.w	ip, [r1, #26]
	DMA_CERR = ch;
    c326:	strb.w	ip, [r1, #30]
	DMA_CEEI = ch;
    c32a:	strb.w	ip, [r1, #24]
	DMA_CINT = ch;
    c32e:	strb.w	ip, [r1, #31]
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    c332:	str	r3, [r0, #0]
}
    c334:	pop	{r4, r5}
	*p++ = 0;
    c336:	strd	r2, r2, [r3]
	*p++ = 0;
    c33a:	strd	r2, r2, [r3, #8]
	*p++ = 0;
    c33e:	strd	r2, r2, [r3, #16]
	*p++ = 0;
    c342:	strd	r2, r2, [r3, #24]
}
    c346:	bx	lr
	  && (dma_channel_allocated_mask & (1 << channel))
    c348:	ldr	r4, [pc, #24]	; (c364 <DMAChannel::begin(bool)+0xa4>)
    c34a:	ldrh	r1, [r4, #0]
    c34c:	asr.w	r5, r1, r2
    c350:	lsls	r5, r5, #31
    c352:	bpl.n	c2d4 <DMAChannel::begin(bool)+0x14>
	  && (uint32_t)TCD == (uint32_t)(0x400E9000 + channel * 32)) {
    c354:	ldr	r5, [pc, #16]	; (c368 <DMAChannel::begin(bool)+0xa8>)
    c356:	add	r5, r2
    c358:	cmp.w	r3, r5, lsl #5
    c35c:	bne.n	c2d4 <DMAChannel::begin(bool)+0x14>
		__enable_irq();
    c35e:	cpsie	i
		return;
    c360:	b.n	c2ee <DMAChannel::begin(bool)+0x2e>
    c362:	nop
    c364:	.word	0x20008146
    c368:	.word	0x02007480
    c36c:	.word	0x400fc000
    c370:	.word	0x400e8000

0000c374 <DMAChannel::release()>:

void DMAChannel::release(void)
{
	if (channel >= DMA_MAX_CHANNELS) return;
    c374:	ldrb	r3, [r0, #4]
    c376:	cmp	r3, #15
    c378:	bhi.n	c39e <DMAChannel::release()+0x2a>
	DMA_CERQ = channel;
    c37a:	ldr	r2, [pc, #36]	; (c3a0 <DMAChannel::release()+0x2c>)
    c37c:	strb	r3, [r2, #26]
	__disable_irq();
    c37e:	cpsid	i
	dma_channel_allocated_mask &= ~(1 << channel);
    c380:	ldr	r1, [pc, #32]	; (c3a4 <DMAChannel::release()+0x30>)
    c382:	movs	r2, #1
    c384:	ldrb.w	ip, [r0, #4]
    c388:	ldrh	r3, [r1, #0]
    c38a:	lsl.w	r2, r2, ip
    c38e:	bic.w	r3, r3, r2
    c392:	strh	r3, [r1, #0]
	__enable_irq();
    c394:	cpsie	i
	channel = DMA_MAX_CHANNELS;
    c396:	movs	r2, #16
	TCD = (TCD_t *)0;
    c398:	movs	r3, #0
	channel = DMA_MAX_CHANNELS;
    c39a:	strb	r2, [r0, #4]
	TCD = (TCD_t *)0;
    c39c:	str	r3, [r0, #0]
}
    c39e:	bx	lr
    c3a0:	.word	0x400e8000
    c3a4:	.word	0x20008146

0000c3a8 <usb_serial_class::clear()>:
        virtual void clear(void) { usb_serial_flush_input(); }
    c3a8:	b.w	a790 <usb_serial_flush_input>

0000c3ac <usb_serial_class::peek()>:
        virtual int peek() { return usb_serial_peekchar(); }
    c3ac:	b.w	a734 <usb_serial_peekchar>

0000c3b0 <usb_serial_class::read()>:
        virtual int read() { return usb_serial_getchar(); }
    c3b0:	b.w	a800 <usb_serial_getchar>

0000c3b4 <usb_serial_class::available()>:
        virtual int available() { return usb_serial_available(); }
    c3b4:	b.w	a778 <usb_serial_available>

0000c3b8 <usb_serial_class::flush()>:
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    c3b8:	b.w	a8b4 <usb_serial_flush_output>

0000c3bc <usb_serial_class::availableForWrite()>:
	size_t write(int n) { return write((uint8_t)n); }
	// Returns the number of bytes which may be transmitted by write() or print()
	// without waiting.  Typically programs which must maintain rapid checking
	// and response to sensors use availableForWrite() to decide whether to
	// transmit.
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    c3bc:	b.w	a864 <usb_serial_write_buffer_free>

0000c3c0 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    c3c0:	mov	r0, r1
    c3c2:	mov	r1, r2
    c3c4:	b.w	a84c <usb_serial_write>

0000c3c8 <usb_serial_class::write(unsigned char)>:
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    c3c8:	mov	r0, r1
    c3ca:	b.w	a820 <usb_serial_putchar>
    c3ce:	nop

0000c3d0 <breakTime(unsigned long, DateTimeFields&)>:
  tm.sec = time % 60;
    c3d0:	ldr	r2, [pc, #308]	; (c508 <breakTime(unsigned long, DateTimeFields&)+0x138>)
{
    c3d2:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  tm.sec = time % 60;
    c3d6:	umull	r4, r3, r2, r0
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    c3da:	movw	sl, #365	; 0x16d
    c3de:	ldr	r7, [pc, #300]	; (c50c <breakTime(unsigned long, DateTimeFields&)+0x13c>)
  tm.sec = time % 60;
    c3e0:	lsrs	r3, r3, #5
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    c3e2:	ldr.w	r8, [pc, #312]	; c51c <breakTime(unsigned long, DateTimeFields&)+0x14c>
    c3e6:	ldr.w	r9, [pc, #312]	; c520 <breakTime(unsigned long, DateTimeFields&)+0x150>
  tm.min = time % 60;
    c3ea:	umull	r4, r2, r2, r3
  tm.sec = time % 60;
    c3ee:	rsb	r4, r3, r3, lsl #4
  tm.min = time % 60;
    c3f2:	lsrs	r2, r2, #5
  tm.sec = time % 60;
    c3f4:	sub.w	r0, r0, r4, lsl #2
  tm.hour = time % 24;
    c3f8:	ldr	r4, [pc, #276]	; (c510 <breakTime(unsigned long, DateTimeFields&)+0x140>)
  tm.min = time % 60;
    c3fa:	rsb	r5, r2, r2, lsl #4
  tm.sec = time % 60;
    c3fe:	strb	r0, [r1, #0]
  tm.min = time % 60;
    c400:	sub.w	r3, r3, r5, lsl #2
  tm.hour = time % 24;
    c404:	umull	r5, r4, r4, r2
    c408:	lsrs	r4, r4, #4
  tm.min = time % 60;
    c40a:	strb	r3, [r1, #1]
  tm.wday = ((time + 4) % 7);  // Sunday is day 0
    c40c:	ldr	r3, [pc, #260]	; (c514 <breakTime(unsigned long, DateTimeFields&)+0x144>)
    c40e:	adds	r5, r4, #4
  tm.hour = time % 24;
    c410:	add.w	r0, r4, r4, lsl #1
    c414:	sub.w	r2, r2, r0, lsl #3
  tm.wday = ((time + 4) % 7);  // Sunday is day 0
    c418:	umull	r0, r3, r3, r5
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    c41c:	movs	r0, #0
  tm.hour = time % 24;
    c41e:	strb	r2, [r1, #2]
  tm.wday = ((time + 4) % 7);  // Sunday is day 0
    c420:	subs	r2, r5, r3
    c422:	add.w	r3, r3, r2, lsr #1
  days = 0;
    c426:	mov	r2, r0
  tm.wday = ((time + 4) % 7);  // Sunday is day 0
    c428:	lsrs	r3, r3, #2
    c42a:	rsb	r3, r3, r3, lsl #3
    c42e:	subs	r5, r5, r3
    c430:	strb	r5, [r1, #3]
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    c432:	uxtb.w	lr, r0
    c436:	movw	ip, #365	; 0x16d
    c43a:	addw	r3, lr, #1970	; 0x7b2
    c43e:	ands.w	r5, r3, #3
    c442:	mul.w	r6, r7, r3
    c446:	bne.n	c45a <breakTime(unsigned long, DateTimeFields&)+0x8a>
    c448:	cmp.w	r8, r6, ror #2
    c44c:	mov.w	ip, #366	; 0x16e
    c450:	bcc.n	c45a <breakTime(unsigned long, DateTimeFields&)+0x8a>
    c452:	cmp.w	r9, r6, ror #4
    c456:	it	cc
    c458:	movcc	ip, sl
    c45a:	add	r2, ip
    c45c:	adds	r0, #1
    c45e:	cmp	r4, r2
    c460:	bcs.n	c432 <breakTime(unsigned long, DateTimeFields&)+0x62>
  tm.year = year + 70; // year is offset from 1970
    c462:	add.w	lr, lr, #70	; 0x46
  days -= LEAP_YEAR(year) ? 366 : 365;
    c466:	ldr	r6, [pc, #176]	; (c518 <breakTime(unsigned long, DateTimeFields&)+0x148>)
  tm.year = year + 70; // year is offset from 1970
    c468:	strb.w	lr, [r1, #6]
  days -= LEAP_YEAR(year) ? 366 : 365;
    c46c:	umull	r0, r6, r6, r3
    c470:	cbz	r5, c4d4 <breakTime(unsigned long, DateTimeFields&)+0x104>
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    c472:	lsrs	r7, r6, #5
    c474:	mov.w	ip, #100	; 0x64
    c478:	mov.w	r0, #400	; 0x190
    c47c:	lsrs	r6, r6, #7
    c47e:	mls	r7, ip, r7, r3
    c482:	mls	r6, r0, r6, r3
  days -= LEAP_YEAR(year) ? 366 : 365;
    c486:	movw	r0, #365	; 0x16d
  time  -= days; // now it is days in this year, starting at 0
    c48a:	subs	r4, r4, r2
    c48c:	movs	r3, #0
    c48e:	movs	r2, #1
      monthLength = monthDays[month];
    c490:	ldr.w	lr, [pc, #144]	; c524 <breakTime(unsigned long, DateTimeFields&)+0x154>
  time  -= days; // now it is days in this year, starting at 0
    c494:	add	r0, r4
  for (month=0; month<12; month++) {
    c496:	b.n	c4ae <breakTime(unsigned long, DateTimeFields&)+0xde>
    if (time >= monthLength) {
    c498:	ldrb.w	r4, [r3, lr]
    c49c:	cmp	r4, r0
    c49e:	bhi.n	c4be <breakTime(unsigned long, DateTimeFields&)+0xee>
  for (month=0; month<12; month++) {
    c4a0:	cmp	r2, #12
      time -= monthLength;
    c4a2:	sub.w	r0, r0, r4
  for (month=0; month<12; month++) {
    c4a6:	beq.n	c4c0 <breakTime(unsigned long, DateTimeFields&)+0xf0>
    c4a8:	adds	r2, #1
    c4aa:	adds	r3, #1
    c4ac:	uxtb	r2, r2
    if (month==1) { // february
    c4ae:	cmp	r3, #1
    c4b0:	uxtb.w	ip, r3
    c4b4:	bne.n	c498 <breakTime(unsigned long, DateTimeFields&)+0xc8>
      if (LEAP_YEAR(year)) {
    c4b6:	cbnz	r5, c4ca <breakTime(unsigned long, DateTimeFields&)+0xfa>
    c4b8:	cbz	r7, c4ee <breakTime(unsigned long, DateTimeFields&)+0x11e>
    c4ba:	movs	r4, #29
    c4bc:	b.n	c4cc <breakTime(unsigned long, DateTimeFields&)+0xfc>
    c4be:	mov	r2, ip
  tm.mday = time + 1;     // day of month
    c4c0:	adds	r0, #1
  tm.mon = month;  // jan is month 0
    c4c2:	strb	r2, [r1, #5]
  tm.mday = time + 1;     // day of month
    c4c4:	strb	r0, [r1, #4]
}
    c4c6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c4ca:	movs	r4, #28
    if (time >= monthLength) {
    c4cc:	cmp	r0, r4
    c4ce:	bcc.n	c502 <breakTime(unsigned long, DateTimeFields&)+0x132>
      time -= monthLength;
    c4d0:	subs	r0, r0, r4
  for (month=0; month<12; month++) {
    c4d2:	b.n	c4a8 <breakTime(unsigned long, DateTimeFields&)+0xd8>
  days -= LEAP_YEAR(year) ? 366 : 365;
    c4d4:	movs	r0, #100	; 0x64
    c4d6:	lsrs	r7, r6, #5
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    c4d8:	lsrs	r6, r6, #7
  days -= LEAP_YEAR(year) ? 366 : 365;
    c4da:	mls	r7, r0, r7, r3
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    c4de:	mov.w	r0, #400	; 0x190
    c4e2:	mls	r6, r0, r6, r3
  days -= LEAP_YEAR(year) ? 366 : 365;
    c4e6:	cbz	r7, c4f8 <breakTime(unsigned long, DateTimeFields&)+0x128>
    c4e8:	mov.w	r0, #366	; 0x16e
    c4ec:	b.n	c48a <breakTime(unsigned long, DateTimeFields&)+0xba>
      if (LEAP_YEAR(year)) {
    c4ee:	cmp	r6, #0
    c4f0:	ite	ne
    c4f2:	movne	r4, #28
    c4f4:	moveq	r4, #29
    c4f6:	b.n	c4cc <breakTime(unsigned long, DateTimeFields&)+0xfc>
  days -= LEAP_YEAR(year) ? 366 : 365;
    c4f8:	cmp	r6, #0
    c4fa:	bne.n	c486 <breakTime(unsigned long, DateTimeFields&)+0xb6>
    c4fc:	mov.w	r0, #366	; 0x16e
    c500:	b.n	c48a <breakTime(unsigned long, DateTimeFields&)+0xba>
    if (time >= monthLength) {
    c502:	movs	r2, #1
    c504:	b.n	c4c0 <breakTime(unsigned long, DateTimeFields&)+0xf0>
    c506:	nop
    c508:	.word	0x88888889
    c50c:	.word	0xc28f5c29
    c510:	.word	0xaaaaaaab
    c514:	.word	0x24924925
    c518:	.word	0x51eb851f
    c51c:	.word	0x028f5c28
    c520:	.word	0x00a3d70a
    c524:	.word	0x20000770

0000c528 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    c528:	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    c52a:	bl	1870 <setup>
	while (1) {
		loop();
    c52e:	bl	18b8 <loop>
		yield();
    c532:	bl	c0e4 <yield>
	while (1) {
    c536:	b.n	c52e <main+0x6>

0000c538 <AudioStream::update_all()>:
	void transmit(audio_block_t *block, unsigned char index = 0);
	audio_block_t * receiveReadOnly(unsigned int index = 0);
	audio_block_t * receiveWritable(unsigned int index = 0);
	static bool update_setup(void);
	static void update_stop(void);
	static void update_all(void) { NVIC_SET_PENDING(IRQ_SOFTWARE); }
    c538:	mov.w	r3, #3758153728	; 0xe000e000
    c53c:	movs	r2, #64	; 0x40
    c53e:	str.w	r2, [r3, #520]	; 0x208
    c542:	bx	lr

0000c544 <software_isr()>:
}

AudioStream * AudioStream::first_update = NULL;

void software_isr(void) // AudioStream::update_all()
{
    c544:	push	{r3, r4, r5, r6, r7, lr}
	AudioStream *p;

	uint32_t totalcycles = ARM_DWT_CYCCNT;
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
    c546:	ldr	r3, [pc, #80]	; (c598 <software_isr()+0x54>)
	uint32_t totalcycles = ARM_DWT_CYCCNT;
    c548:	ldr	r5, [pc, #80]	; (c59c <software_isr()+0x58>)
	for (p = AudioStream::first_update; p; p = p->next_update) {
    c54a:	ldr	r4, [r3, #0]
	uint32_t totalcycles = ARM_DWT_CYCCNT;
    c54c:	ldr	r6, [r5, #4]
	for (p = AudioStream::first_update; p; p = p->next_update) {
    c54e:	cbz	r4, c578 <software_isr()+0x34>
		if (p->active) {
    c550:	ldrb	r3, [r4, #8]
			uint32_t cycles = ARM_DWT_CYCCNT;
			p->update();
    c552:	mov	r0, r4
		if (p->active) {
    c554:	cbz	r3, c572 <software_isr()+0x2e>
			p->update();
    c556:	ldr	r3, [r4, #0]
			uint32_t cycles = ARM_DWT_CYCCNT;
    c558:	ldr	r7, [r5, #4]
			p->update();
    c55a:	ldr	r3, [r3, #0]
    c55c:	blx	r3
			// TODO: traverse inputQueueArray and release
			// any input blocks that weren't consumed?
			cycles = (ARM_DWT_CYCCNT - cycles) >> 6;
    c55e:	ldr	r3, [r5, #4]
			p->cpu_cycles = cycles;
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
    c560:	ldrh	r1, [r4, #6]
			cycles = (ARM_DWT_CYCCNT - cycles) >> 6;
    c562:	subs	r3, r3, r7
			p->cpu_cycles = cycles;
    c564:	ubfx	r2, r3, #6, #16
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
    c568:	cmp.w	r1, r3, lsr #6
			p->cpu_cycles = cycles;
    c56c:	strh	r2, [r4, #4]
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
    c56e:	it	cc
    c570:	strhcc	r2, [r4, #6]
	for (p = AudioStream::first_update; p; p = p->next_update) {
    c572:	ldr	r4, [r4, #20]
    c574:	cmp	r4, #0
    c576:	bne.n	c550 <software_isr()+0xc>
		}
	}
	//digitalWriteFast(2, LOW);
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 6;
    c578:	ldr	r3, [pc, #32]	; (c59c <software_isr()+0x58>)
	AudioStream::cpu_cycles_total = totalcycles;
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    c57a:	ldr	r2, [pc, #36]	; (c5a0 <software_isr()+0x5c>)
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 6;
    c57c:	ldr	r3, [r3, #4]
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    c57e:	ldrh	r0, [r2, #0]
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 6;
    c580:	subs	r3, r3, r6
	AudioStream::cpu_cycles_total = totalcycles;
    c582:	ldr	r4, [pc, #32]	; (c5a4 <software_isr()+0x60>)
    c584:	ubfx	r1, r3, #6, #16
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    c588:	cmp.w	r0, r3, lsr #6
	AudioStream::cpu_cycles_total = totalcycles;
    c58c:	strh	r1, [r4, #0]
		AudioStream::cpu_cycles_total_max = totalcycles;
    c58e:	it	cc
    c590:	strhcc	r1, [r2, #0]

	asm("DSB");
    c592:	dsb	sy
}
    c596:	pop	{r3, r4, r5, r6, r7, pc}
    c598:	.word	0x20006410
    c59c:	.word	0xe0001000
    c5a0:	.word	0x2000813a
    c5a4:	.word	0x20008138

0000c5a8 <AudioStream::allocate()>:
{
    c5a8:	push	{r4, r5}
	__disable_irq();
    c5aa:	cpsid	i
	index = memory_pool_first_mask;
    c5ac:	ldr	r5, [pc, #144]	; (c640 <AudioStream::allocate()+0x98>)
	p += index;
    c5ae:	ldr	r4, [pc, #148]	; (c644 <AudioStream::allocate()+0x9c>)
	index = memory_pool_first_mask;
    c5b0:	ldrh	r2, [r5, #0]
		if (p >= end) {
    c5b2:	add.w	r1, r4, #112	; 0x70
	p += index;
    c5b6:	add.w	r3, r4, r2, lsl #2
		if (p >= end) {
    c5ba:	cmp	r3, r1
    c5bc:	bcs.n	c638 <AudioStream::allocate()+0x90>
    c5be:	add.w	r1, r4, #111	; 0x6f
    c5c2:	adds	r0, r2, #1
    c5c4:	subs	r1, r1, r3
    c5c6:	add.w	r0, r0, r1, lsr #2
    c5ca:	b.n	c5d2 <AudioStream::allocate()+0x2a>
		index++;
    c5cc:	adds	r2, #1
		if (p >= end) {
    c5ce:	cmp	r2, r0
    c5d0:	beq.n	c638 <AudioStream::allocate()+0x90>
		index++;
    c5d2:	mov	ip, r3
		avail = *p;
    c5d4:	ldr.w	r1, [r3], #4
		if (avail) break;
    c5d8:	cmp	r1, #0
    c5da:	beq.n	c5cc <AudioStream::allocate()+0x24>
	n = __builtin_clz(avail);
    c5dc:	clz	r0, r1
	avail &= ~(0x80000000 >> n);
    c5e0:	mov.w	r3, #2147483648	; 0x80000000
    c5e4:	lsrs	r3, r0
    c5e6:	bic.w	r1, r1, r3
	*p = avail;
    c5ea:	str.w	r1, [ip]
	if (!avail) index++;
    c5ee:	cbnz	r1, c5f2 <AudioStream::allocate()+0x4a>
    c5f0:	adds	r2, #1
	used = memory_used + 1;
    c5f2:	ldr	r3, [pc, #84]	; (c648 <AudioStream::allocate()+0xa0>)
	memory_pool_first_mask = index;
    c5f4:	strh	r2, [r5, #0]
	used = memory_used + 1;
    c5f6:	ldrh	r2, [r3, #0]
	memory_used = used;
    c5f8:	adds	r2, #1
    c5fa:	uxth	r1, r2
    c5fc:	strh	r1, [r3, #0]
	__enable_irq();
    c5fe:	cpsie	i
	index = p - memory_pool_available_mask;
    c600:	sub.w	ip, ip, r4
	block = memory_pool + ((index << 5) + (31 - n));
    c604:	movw	r3, #8060	; 0x1f7c
    c608:	rsb	r4, r0, r0, lsl #24
	index = p - memory_pool_available_mask;
    c60c:	mov.w	ip, ip, asr #2
	block = memory_pool + ((index << 5) + (31 - n));
    c610:	rsb	r0, r0, r4, lsl #6
	block->ref_count = 1;
    c614:	movs	r4, #1
	block = memory_pool + ((index << 5) + (31 - n));
    c616:	add.w	ip, ip, ip, lsl #6
    c61a:	add.w	r3, r3, ip, lsl #7
    c61e:	add.w	r3, r3, r0, lsl #2
    c622:	ldr	r0, [pc, #40]	; (c64c <AudioStream::allocate()+0xa4>)
    c624:	ldr	r0, [r0, #0]
	block->ref_count = 1;
    c626:	strb	r4, [r0, r3]
	block = memory_pool + ((index << 5) + (31 - n));
    c628:	add	r0, r3
	if (used > memory_used_max) memory_used_max = used;
    c62a:	ldr	r3, [pc, #36]	; (c650 <AudioStream::allocate()+0xa8>)
    c62c:	ldrh	r4, [r3, #0]
    c62e:	cmp	r4, r2
}
    c630:	pop	{r4, r5}
	if (used > memory_used_max) memory_used_max = used;
    c632:	it	cc
    c634:	strhcc	r1, [r3, #0]
}
    c636:	bx	lr
			__enable_irq();
    c638:	cpsie	i
			return NULL;
    c63a:	movs	r0, #0
}
    c63c:	pop	{r4, r5}
    c63e:	bx	lr
    c640:	.word	0x2000813c
    c644:	.word	0x20006414
    c648:	.word	0x20008134
    c64c:	.word	0x2000640c
    c650:	.word	0x20008136

0000c654 <AudioStream::release(audio_block_struct*)>:
	uint32_t mask = (0x80000000 >> (31 - (block->memory_pool_index & 0x1F)));
    c654:	ldrh	r2, [r0, #2]
	__disable_irq();
    c656:	cpsid	i
	if (block->ref_count > 1) {
    c658:	ldrb	r3, [r0, #0]
    c65a:	cmp	r3, #1
    c65c:	bls.n	c666 <AudioStream::release(audio_block_struct*)+0x12>
		block->ref_count--;
    c65e:	subs	r3, #1
    c660:	strb	r3, [r0, #0]
	__enable_irq();
    c662:	cpsie	i
}
    c664:	bx	lr
	uint32_t mask = (0x80000000 >> (31 - (block->memory_pool_index & 0x1F)));
    c666:	mvns	r1, r2
	uint32_t index = block->memory_pool_index >> 5;
    c668:	lsrs	r3, r2, #5
		memory_pool_available_mask[index] |= mask;
    c66a:	ldr	r0, [pc, #44]	; (c698 <AudioStream::release(audio_block_struct*)+0x44>)
	uint32_t mask = (0x80000000 >> (31 - (block->memory_pool_index & 0x1F)));
    c66c:	mov.w	r2, #2147483648	; 0x80000000
    c670:	and.w	r1, r1, #31
    c674:	lsrs	r2, r1
		memory_pool_available_mask[index] |= mask;
    c676:	ldr.w	r1, [r0, r3, lsl #2]
    c67a:	orrs	r2, r1
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
    c67c:	ldr	r1, [pc, #28]	; (c69c <AudioStream::release(audio_block_struct*)+0x48>)
    c67e:	ldrh.w	ip, [r1]
		memory_pool_available_mask[index] |= mask;
    c682:	str.w	r2, [r0, r3, lsl #2]
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
    c686:	cmp	ip, r3
		memory_used--;
    c688:	ldr	r2, [pc, #20]	; (c6a0 <AudioStream::release(audio_block_struct*)+0x4c>)
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
    c68a:	it	hi
    c68c:	strhhi	r3, [r1, #0]
		memory_used--;
    c68e:	ldrh	r3, [r2, #0]
    c690:	subs	r3, #1
    c692:	strh	r3, [r2, #0]
	__enable_irq();
    c694:	cpsie	i
}
    c696:	bx	lr
    c698:	.word	0x20006414
    c69c:	.word	0x2000813c
    c6a0:	.word	0x20008134

0000c6a4 <AudioStream::transmit(audio_block_struct*, unsigned char)>:
	for (AudioConnection *c = destination_list; c != NULL; c = c->next_dest) {
    c6a4:	ldr	r3, [r0, #12]
    c6a6:	cbnz	r3, c6ae <AudioStream::transmit(audio_block_struct*, unsigned char)+0xa>
    c6a8:	b.n	c6e6 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x42>
    c6aa:	ldr	r3, [r3, #12]
    c6ac:	cbz	r3, c6e8 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x44>
		if (c->src_index == index) {
    c6ae:	ldrb	r0, [r3, #8]
    c6b0:	cmp	r0, r2
    c6b2:	bne.n	c6aa <AudioStream::transmit(audio_block_struct*, unsigned char)+0x6>
{
    c6b4:	push	{r4}
			if (c->dst->inputQueue[c->dest_index] == NULL) {
    c6b6:	ldr	r0, [r3, #4]
    c6b8:	ldrb.w	ip, [r3, #9]
    c6bc:	ldr	r0, [r0, #16]
    c6be:	ldr.w	r4, [r0, ip, lsl #2]
    c6c2:	cbz	r4, c6da <AudioStream::transmit(audio_block_struct*, unsigned char)+0x36>
	for (AudioConnection *c = destination_list; c != NULL; c = c->next_dest) {
    c6c4:	ldr	r3, [r3, #12]
    c6c6:	cbz	r3, c6d4 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x30>
		if (c->src_index == index) {
    c6c8:	ldrb	r0, [r3, #8]
    c6ca:	cmp	r0, r2
    c6cc:	beq.n	c6b6 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x12>
	for (AudioConnection *c = destination_list; c != NULL; c = c->next_dest) {
    c6ce:	ldr	r3, [r3, #12]
    c6d0:	cmp	r3, #0
    c6d2:	bne.n	c6c8 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x24>
}
    c6d4:	ldr.w	r4, [sp], #4
    c6d8:	bx	lr
				c->dst->inputQueue[c->dest_index] = block;
    c6da:	str.w	r1, [r0, ip, lsl #2]
				block->ref_count++;
    c6de:	ldrb	r0, [r1, #0]
    c6e0:	adds	r0, #1
    c6e2:	strb	r0, [r1, #0]
    c6e4:	b.n	c6c4 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x20>
    c6e6:	bx	lr
    c6e8:	bx	lr
    c6ea:	nop

0000c6ec <AudioStream::receiveReadOnly(unsigned int)>:
	if (index >= num_inputs) return NULL;
    c6ec:	ldrb	r3, [r0, #9]
    c6ee:	cmp	r3, r1
    c6f0:	bls.n	c700 <AudioStream::receiveReadOnly(unsigned int)+0x14>
	in = inputQueue[index];
    c6f2:	ldr	r3, [r0, #16]
	inputQueue[index] = NULL;
    c6f4:	movs	r2, #0
	in = inputQueue[index];
    c6f6:	ldr.w	r0, [r3, r1, lsl #2]
	inputQueue[index] = NULL;
    c6fa:	str.w	r2, [r3, r1, lsl #2]
	return in;
    c6fe:	bx	lr
	if (index >= num_inputs) return NULL;
    c700:	movs	r0, #0
}
    c702:	bx	lr

0000c704 <AudioStream::receiveWritable(unsigned int)>:
{
    c704:	push	{r3, r4, r5, lr}
	if (index >= num_inputs) return NULL;
    c706:	ldrb	r3, [r0, #9]
    c708:	cmp	r3, r1
    c70a:	bls.n	c744 <AudioStream::receiveWritable(unsigned int)+0x40>
	in = inputQueue[index];
    c70c:	ldr	r3, [r0, #16]
	inputQueue[index] = NULL;
    c70e:	movs	r2, #0
	in = inputQueue[index];
    c710:	ldr.w	r4, [r3, r1, lsl #2]
	inputQueue[index] = NULL;
    c714:	str.w	r2, [r3, r1, lsl #2]
	if (in && in->ref_count > 1) {
    c718:	cbz	r4, c744 <AudioStream::receiveWritable(unsigned int)+0x40>
    c71a:	ldrb	r3, [r4, #0]
    c71c:	cmp	r3, #1
    c71e:	bhi.n	c724 <AudioStream::receiveWritable(unsigned int)+0x20>
}
    c720:	mov	r0, r4
    c722:	pop	{r3, r4, r5, pc}
		p = allocate();
    c724:	bl	c5a8 <AudioStream::allocate()>
		if (p) memcpy(p->data, in->data, sizeof(p->data));
    c728:	mov	r5, r0
    c72a:	cbz	r0, c738 <AudioStream::receiveWritable(unsigned int)+0x34>
    c72c:	mov.w	r2, #256	; 0x100
    c730:	adds	r1, r4, #4
    c732:	adds	r0, #4
    c734:	bl	a0d4 <memcpy>
		in->ref_count--;
    c738:	ldrb	r3, [r4, #0]
    c73a:	subs	r3, #1
    c73c:	strb	r3, [r4, #0]
		p = allocate();
    c73e:	mov	r4, r5
}
    c740:	mov	r0, r4
    c742:	pop	{r3, r4, r5, pc}
	if (index >= num_inputs) return NULL;
    c744:	movs	r4, #0
}
    c746:	mov	r0, r4
    c748:	pop	{r3, r4, r5, pc}
    c74a:	nop

0000c74c <AudioConnection::connect()>:
		if (isConnected) // already connected
    c74c:	ldrb	r3, [r0, #16]
    c74e:	cbnz	r3, c790 <AudioConnection::connect()+0x44>
		if (!src || !dst) // NULL src or dst - [old] Stream object destroyed
    c750:	ldr	r3, [r0, #0]
    c752:	mov	r1, r0
    c754:	cbz	r3, c796 <AudioConnection::connect()+0x4a>
    c756:	ldr	r3, [r0, #4]
    c758:	cbz	r3, c796 <AudioConnection::connect()+0x4a>
		if (dest_index >= dst->num_inputs) // input number too high
    c75a:	ldrb	r2, [r0, #9]
    c75c:	ldrb	r3, [r3, #9]
    c75e:	cmp	r2, r3
    c760:	bcs.n	c79c <AudioConnection::connect()+0x50>
{
    c762:	push	{r4, r5}
		__disable_irq();
    c764:	cpsid	i
		s = AudioStream::first_update; // first AudioStream in the stream list
    c766:	ldr	r3, [pc, #172]	; (c814 <AudioConnection::connect()+0xc8>)
    c768:	ldr	r4, [r3, #0]
		while (s) // go through all AudioStream objects
    c76a:	cbz	r4, c7a8 <AudioConnection::connect()+0x5c>
			p = s->destination_list;	// first patchCord in this stream's list
    c76c:	ldr	r3, [r4, #12]
			while (p)
    c76e:	cbz	r3, c7a2 <AudioConnection::connect()+0x56>
				if (p->dst == dst && p->dest_index == dest_index) // same destination - it's in use!
    c770:	ldr	r0, [r1, #4]
    c772:	b.n	c778 <AudioConnection::connect()+0x2c>
				p = p->next_dest;
    c774:	ldr	r3, [r3, #12]
			while (p)
    c776:	cbz	r3, c7a2 <AudioConnection::connect()+0x56>
				if (p->dst == dst && p->dest_index == dest_index) // same destination - it's in use!
    c778:	ldr	r2, [r3, #4]
    c77a:	cmp	r2, r0
    c77c:	bne.n	c774 <AudioConnection::connect()+0x28>
    c77e:	ldrb.w	ip, [r3, #9]
    c782:	ldrb	r2, [r1, #9]
    c784:	cmp	ip, r2
    c786:	bne.n	c774 <AudioConnection::connect()+0x28>
					__enable_irq();
    c788:	cpsie	i
					return 4;
    c78a:	movs	r0, #4
}
    c78c:	pop	{r4, r5}
    c78e:	bx	lr
	int result = 1;
    c790:	movs	r0, #1
	__enable_irq();
    c792:	cpsie	i
}
    c794:	bx	lr
			result = 3;
    c796:	movs	r0, #3
	__enable_irq();
    c798:	cpsie	i
}
    c79a:	bx	lr
			result = 2;
    c79c:	movs	r0, #2
	__enable_irq();
    c79e:	cpsie	i
}
    c7a0:	bx	lr
			s = s->next_update;
    c7a2:	ldr	r4, [r4, #20]
		while (s) // go through all AudioStream objects
    c7a4:	cmp	r4, #0
    c7a6:	bne.n	c76c <AudioConnection::connect()+0x20>
		pp = &AudioStream::unused;
    c7a8:	ldr	r4, [pc, #108]	; (c818 <AudioConnection::connect()+0xcc>)
    c7aa:	ldr	r3, [r4, #0]
		while (*pp && *pp != this)
    c7ac:	cbz	r3, c7c0 <AudioConnection::connect()+0x74>
    c7ae:	cmp	r1, r3
    c7b0:	bne.n	c7b8 <AudioConnection::connect()+0x6c>
    c7b2:	b.n	c7cc <AudioConnection::connect()+0x80>
    c7b4:	cmp	r1, r3
    c7b6:	beq.n	c7c8 <AudioConnection::connect()+0x7c>
			pp = &((*pp)->next_dest);
    c7b8:	mov	r2, r3
    c7ba:	ldr	r3, [r3, #12]
		while (*pp && *pp != this)
    c7bc:	cmp	r3, #0
    c7be:	bne.n	c7b4 <AudioConnection::connect()+0x68>
			result = 5;
    c7c0:	movs	r0, #5
	__enable_irq();
    c7c2:	cpsie	i
}
    c7c4:	pop	{r4, r5}
    c7c6:	bx	lr
			pp = &((*pp)->next_dest);
    c7c8:	add.w	r4, r2, #12
		p = src->destination_list; // first AudioConnection
    c7cc:	ldr	r5, [r1, #0]
    c7ce:	ldr	r0, [r5, #12]
		if (p == NULL) 
    c7d0:	cbz	r0, c80e <AudioConnection::connect()+0xc2>
			while (p->next_dest)  // scan source Stream's connection list for duplicates
    c7d2:	ldr	r3, [r0, #12]
    c7d4:	cbnz	r3, c7de <AudioConnection::connect()+0x92>
    c7d6:	b.n	c7ea <AudioConnection::connect()+0x9e>
    c7d8:	ldr	r2, [r3, #12]
    c7da:	cbz	r2, c7ec <AudioConnection::connect()+0xa0>
    c7dc:	mov	r3, r2
				if (&p->src == &this->src && &p->dst == &this->dst
    c7de:	cmp	r1, r0
    c7e0:	mov	r0, r3
    c7e2:	bne.n	c7d8 <AudioConnection::connect()+0x8c>
					__enable_irq();
    c7e4:	cpsie	i
					return 6;
    c7e6:	movs	r0, #6
    c7e8:	b.n	c78c <AudioConnection::connect()+0x40>
			while (p->next_dest)  // scan source Stream's connection list for duplicates
    c7ea:	mov	r3, r0
			p->next_dest = this; // end of list, can link ourselves in
    c7ec:	str	r1, [r3, #12]
		*pp = next_dest;  // remove ourselves from the unused list
    c7ee:	ldr	r3, [r1, #12]
		next_dest = NULL; // we're last in the source's destination list
    c7f0:	movs	r0, #0
		*pp = next_dest;  // remove ourselves from the unused list
    c7f2:	str	r3, [r4, #0]
		src->active = true;
    c7f4:	movs	r3, #1
		next_dest = NULL; // we're last in the source's destination list
    c7f6:	str	r0, [r1, #12]
		src->numConnections++;
    c7f8:	ldrb	r2, [r5, #10]
		src->active = true;
    c7fa:	strb	r3, [r5, #8]
		src->numConnections++;
    c7fc:	add	r2, r3
    c7fe:	strb	r2, [r5, #10]
		dst->numConnections++;
    c800:	ldr	r2, [r1, #4]
    c802:	ldrb	r4, [r2, #10]
		dst->active = true;
    c804:	strb	r3, [r2, #8]
		dst->numConnections++;
    c806:	add	r4, r3
    c808:	strb	r4, [r2, #10]
		isConnected = true;
    c80a:	strb	r3, [r1, #16]
		result = 0;
    c80c:	b.n	c7c2 <AudioConnection::connect()+0x76>
			src->destination_list = this;
    c80e:	str	r1, [r5, #12]
    c810:	b.n	c7ee <AudioConnection::connect()+0xa2>
    c812:	nop
    c814:	.word	0x20006410
    c818:	.word	0x20006484

0000c81c <AudioConnection::AudioConnection(AudioStream&, unsigned char, AudioStream&, unsigned char)>:
AudioConnection::AudioConnection(AudioStream &source, unsigned char sourceOutput,
    c81c:	push	{r4, lr}
		dst = &destination;
    c81e:	strd	r1, r3, [r0]
	next_dest = AudioStream::unused;
    c822:	ldr	r3, [pc, #28]	; (c840 <AudioConnection::AudioConnection(AudioStream&, unsigned char, AudioStream&, unsigned char)+0x24>)
	isConnected = false;	  
    c824:	movs	r1, #0
		src_index = sourceOutput;
    c826:	strb	r2, [r0, #8]
AudioConnection::AudioConnection(AudioStream &source, unsigned char sourceOutput,
    c828:	mov	r4, r0
	next_dest = AudioStream::unused;
    c82a:	ldr	r2, [r3, #0]
	AudioStream::unused = this;
    c82c:	str	r0, [r3, #0]
AudioConnection::AudioConnection(AudioStream &source, unsigned char sourceOutput,
    c82e:	ldrb.w	r3, [sp, #8]
	isConnected = false;	  
    c832:	strb	r1, [r0, #16]
	next_dest = AudioStream::unused;
    c834:	str	r2, [r0, #12]
		dest_index = destinationInput;
    c836:	strb	r3, [r0, #9]
		result = connect();
    c838:	bl	c74c <AudioConnection::connect()>
}
    c83c:	mov	r0, r4
    c83e:	pop	{r4, pc}
    c840:	.word	0x20006484

0000c844 <AudioConnection::disconnect()>:
{
    c844:	push	{r3, r4, r5, lr}
	if (!isConnected) return 1;
    c846:	ldrb	r3, [r0, #16]
    c848:	cmp	r3, #0
    c84a:	beq.n	c8ba <AudioConnection::disconnect()+0x76>
	if (dest_index >= dst->num_inputs) return 2; // should never happen!
    c84c:	ldr	r3, [r0, #4]
    c84e:	mov	r4, r0
    c850:	ldrb	r2, [r0, #9]
    c852:	ldrb	r3, [r3, #9]
    c854:	cmp	r2, r3
    c856:	bcs.n	c8ca <AudioConnection::disconnect()+0x86>
	__disable_irq();
    c858:	cpsid	i
	p = src->destination_list;
    c85a:	ldr	r1, [r0, #0]
    c85c:	ldr	r3, [r1, #12]
	if (p == NULL) {
    c85e:	cmp	r3, #0
    c860:	beq.n	c8be <AudioConnection::disconnect()+0x7a>
	} else if (p == this) {
    c862:	cmp	r0, r3
    c864:	beq.n	c8ce <AudioConnection::disconnect()+0x8a>
			if (p->next_dest == this) // found the parent of the disconnecting object
    c866:	mov	r2, r3
    c868:	ldr	r3, [r3, #12]
    c86a:	cmp	r4, r3
    c86c:	beq.n	c8c4 <AudioConnection::disconnect()+0x80>
		while (p)
    c86e:	cmp	r3, #0
    c870:	bne.n	c866 <AudioConnection::disconnect()+0x22>
	if(dst->inputQueue[dest_index] != NULL) {
    c872:	ldr	r2, [r4, #4]
    c874:	ldrb	r0, [r4, #9]
    c876:	ldr	r3, [r2, #16]
    c878:	ldr.w	r0, [r3, r0, lsl #2]
    c87c:	cbz	r0, c892 <AudioConnection::disconnect()+0x4e>
		AudioStream::release(dst->inputQueue[dest_index]);
    c87e:	bl	c654 <AudioStream::release(audio_block_struct*)>
		__disable_irq();
    c882:	cpsid	i
		dst->inputQueue[dest_index] = NULL;
    c884:	ldr	r2, [r4, #4]
    c886:	movs	r5, #0
    c888:	ldrb	r0, [r4, #9]
    c88a:	ldr	r3, [r2, #16]
	src->numConnections--;
    c88c:	ldr	r1, [r4, #0]
		dst->inputQueue[dest_index] = NULL;
    c88e:	str.w	r5, [r3, r0, lsl #2]
	src->numConnections--;
    c892:	ldrb	r3, [r1, #10]
    c894:	subs	r3, #1
    c896:	uxtb	r3, r3
    c898:	strb	r3, [r1, #10]
	if (src->numConnections == 0) {
    c89a:	cbnz	r3, c89e <AudioConnection::disconnect()+0x5a>
		src->active = false;
    c89c:	strb	r3, [r1, #8]
	dst->numConnections--;
    c89e:	ldrb	r3, [r2, #10]
    c8a0:	subs	r3, #1
    c8a2:	uxtb	r3, r3
    c8a4:	strb	r3, [r2, #10]
	if (dst->numConnections == 0) {
    c8a6:	cbnz	r3, c8aa <AudioConnection::disconnect()+0x66>
		dst->active = false;
    c8a8:	strb	r3, [r2, #8]
	next_dest = dst->unused;
    c8aa:	ldr	r3, [pc, #40]	; (c8d4 <AudioConnection::disconnect()+0x90>)
	isConnected = false;
    c8ac:	movs	r0, #0
	next_dest = dst->unused;
    c8ae:	ldr	r2, [r3, #0]
	isConnected = false;
    c8b0:	strb	r0, [r4, #16]
	dst->unused = this;
    c8b2:	str	r4, [r3, #0]
	next_dest = dst->unused;
    c8b4:	str	r2, [r4, #12]
	__enable_irq();
    c8b6:	cpsie	i
}
    c8b8:	pop	{r3, r4, r5, pc}
	if (!isConnected) return 1;
    c8ba:	movs	r0, #1
}
    c8bc:	pop	{r3, r4, r5, pc}
		__enable_irq();
    c8be:	cpsie	i
		return 3;
    c8c0:	movs	r0, #3
}
    c8c2:	pop	{r3, r4, r5, pc}
				p-> next_dest = this->next_dest; // skip parent's link past us
    c8c4:	ldr	r3, [r4, #12]
    c8c6:	str	r3, [r2, #12]
				break;
    c8c8:	b.n	c872 <AudioConnection::disconnect()+0x2e>
	if (dest_index >= dst->num_inputs) return 2; // should never happen!
    c8ca:	movs	r0, #2
}
    c8cc:	pop	{r3, r4, r5, pc}
		if (p->next_dest) {
    c8ce:	ldr	r3, [r0, #12]
			src->destination_list = NULL;
    c8d0:	str	r3, [r1, #12]
    c8d2:	b.n	c872 <AudioConnection::disconnect()+0x2e>
    c8d4:	.word	0x20006484

0000c8d8 <AudioConnection::~AudioConnection()>:
AudioConnection::~AudioConnection()
    c8d8:	push	{r4, lr}
    c8da:	mov	r4, r0
	disconnect(); // disconnect ourselves: puts us on the unused list
    c8dc:	bl	c844 <AudioConnection::disconnect()>
	pp = &AudioStream::unused;
    c8e0:	ldr	r2, [pc, #36]	; (c908 <AudioConnection::~AudioConnection()+0x30>)
    c8e2:	ldr	r3, [r2, #0]
	while (*pp && *pp != this)
    c8e4:	cbz	r3, c8f8 <AudioConnection::~AudioConnection()+0x20>
    c8e6:	cmp	r4, r3
    c8e8:	bne.n	c8f0 <AudioConnection::~AudioConnection()+0x18>
    c8ea:	b.n	c8fe <AudioConnection::~AudioConnection()+0x26>
    c8ec:	cmp	r4, r3
    c8ee:	beq.n	c8fc <AudioConnection::~AudioConnection()+0x24>
		pp = &((*pp)->next_dest);
    c8f0:	mov	r2, r3
    c8f2:	ldr	r3, [r3, #12]
	while (*pp && *pp != this)
    c8f4:	cmp	r3, #0
    c8f6:	bne.n	c8ec <AudioConnection::~AudioConnection()+0x14>
}
    c8f8:	mov	r0, r4
    c8fa:	pop	{r4, pc}
		pp = &((*pp)->next_dest);
    c8fc:	adds	r2, #12
		*pp = next_dest; // remove ourselves from the unused list
    c8fe:	ldr	r3, [r4, #12]
}
    c900:	mov	r0, r4
		*pp = next_dest; // remove ourselves from the unused list
    c902:	str	r3, [r2, #0]
}
    c904:	pop	{r4, pc}
    c906:	nop
    c908:	.word	0x20006484

0000c90c <AudioStream::update_setup()>:
	if (update_scheduled) return false;
    c90c:	ldr	r3, [pc, #48]	; (c940 <AudioStream::update_setup()+0x34>)
    c90e:	ldrb	r2, [r3, #0]
    c910:	cbnz	r2, c93a <AudioStream::update_setup()+0x2e>
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
    c912:	ldr	r2, [pc, #48]	; (c944 <AudioStream::update_setup()+0x38>)
    c914:	ldr	r1, [pc, #48]	; (c948 <AudioStream::update_setup()+0x3c>)
{
    c916:	push	{r4}
    c918:	str.w	r1, [r2, #344]	; 0x158
	NVIC_SET_PRIORITY(IRQ_SOFTWARE, 208); // 255 = lowest priority
    c91c:	ldr	r0, [pc, #44]	; (c94c <AudioStream::update_setup()+0x40>)
    c91e:	movs	r4, #208	; 0xd0
	update_scheduled = true;
    c920:	movs	r2, #1
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
    c922:	mov.w	r1, #3758153728	; 0xe000e000
	NVIC_SET_PRIORITY(IRQ_SOFTWARE, 208); // 255 = lowest priority
    c926:	strb.w	r4, [r0, #70]	; 0x46
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
    c92a:	movs	r4, #64	; 0x40
	update_scheduled = true;
    c92c:	mov	r0, r2
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
    c92e:	str.w	r4, [r1, #264]	; 0x108
}
    c932:	ldr.w	r4, [sp], #4
	update_scheduled = true;
    c936:	strb	r2, [r3, #0]
}
    c938:	bx	lr
	if (update_scheduled) return false;
    c93a:	movs	r0, #0
}
    c93c:	bx	lr
    c93e:	nop
    c940:	.word	0x2000815d
    c944:	.word	0x20001c00
    c948:	.word	0x0000c545
    c94c:	.word	0xe000e400

0000c950 <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)>:
	update_responsibility = false;
}

static void copy_to_buffers(const uint32_t *src, int16_t *left, int16_t *right, unsigned int len)
{
	uint32_t *target = (uint32_t*) src + len; 
    c950:	add.w	r3, r0, r3, lsl #2
	while ((src < target) && (((uintptr_t) left & 0x02) != 0)) {
    c954:	cmp	r0, r3
{
    c956:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	while ((src < target) && (((uintptr_t) left & 0x02) != 0)) {
    c95a:	bcc.n	c970 <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)+0x20>
    c95c:	b.n	c974 <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)+0x24>
		uint32_t n = *src++;
    c95e:	ldr.w	r4, [r0], #4
		*left++ = n & 0xFFFF;
		*right++ = n >> 16;
    c962:	lsrs	r5, r4, #16
	while ((src < target) && (((uintptr_t) left & 0x02) != 0)) {
    c964:	cmp	r3, r0
		*left++ = n & 0xFFFF;
    c966:	strh.w	r4, [r1], #2
		*right++ = n >> 16;
    c96a:	strh.w	r5, [r2], #2
	while ((src < target) && (((uintptr_t) left & 0x02) != 0)) {
    c96e:	bls.n	c974 <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)+0x24>
    c970:	lsls	r4, r1, #30
    c972:	bmi.n	c95e <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)+0xe>
	}

	while ((src < target - 2)) {
    c974:	sub.w	r4, r3, #8
    c978:	cmp	r0, r4
    c97a:	bcs.n	c9de <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)+0x8e>
    c97c:	sub.w	r8, r3, #9
    c980:	add.w	ip, r0, #8
    c984:	mov	lr, r2
		uint32_t n1 = *src++;
		uint32_t n = *src++;
		*(uint32_t *)left = (n1 & 0xFFFF) | ((n & 0xFFFF) << 16);
		left+=2;
		*(uint32_t *)right = (n1 >> 16) | ((n & 0xFFFF0000)) ;
    c986:	ldr	r7, [pc, #92]	; (c9e4 <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)+0x94>)
    c988:	sub.w	r8, r8, r0
    c98c:	mov.w	r8, r8, lsr #3
    c990:	add.w	r8, r8, #1
    c994:	mov.w	r9, r8, lsl #2
    c998:	add.w	r6, r1, r8, lsl #2
		uint32_t n = *src++;
    c99c:	ldrd	sl, r4, [ip, #-8]
	while ((src < target - 2)) {
    c9a0:	add.w	ip, ip, #8
		*(uint32_t *)left = (n1 & 0xFFFF) | ((n & 0xFFFF) << 16);
    c9a4:	uxth.w	r5, sl
    c9a8:	orr.w	r5, r5, r4, lsl #16
		*(uint32_t *)right = (n1 >> 16) | ((n & 0xFFFF0000)) ;
    c9ac:	ands	r4, r7
		*(uint32_t *)left = (n1 & 0xFFFF) | ((n & 0xFFFF) << 16);
    c9ae:	str.w	r5, [r1], #4
		*(uint32_t *)right = (n1 >> 16) | ((n & 0xFFFF0000)) ;
    c9b2:	orr.w	r4, r4, sl, lsr #16
	while ((src < target - 2)) {
    c9b6:	cmp	r1, r6
		*(uint32_t *)right = (n1 >> 16) | ((n & 0xFFFF0000)) ;
    c9b8:	str.w	r4, [lr], #4
	while ((src < target - 2)) {
    c9bc:	bne.n	c99c <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)+0x4c>
		uint32_t n = *src++;
    c9be:	add.w	r0, r0, r8, lsl #3
		right+=2;
    c9c2:	add	r2, r9
	}

	while ((src < target)) {
    c9c4:	cmp	r3, r0
    c9c6:	bls.n	c9da <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)+0x8a>
		uint32_t n = *src++;
    c9c8:	ldr.w	r1, [r0], #4
		*left++ = n & 0xFFFF;
		*right++ = n >> 16;
    c9cc:	lsrs	r4, r1, #16
	while ((src < target)) {
    c9ce:	cmp	r3, r0
		*left++ = n & 0xFFFF;
    c9d0:	strh.w	r1, [r6], #2
		*right++ = n >> 16;
    c9d4:	strh.w	r4, [r2], #2
	while ((src < target)) {
    c9d8:	bhi.n	c9c8 <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)+0x78>
	}
}
    c9da:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	while ((src < target - 2)) {
    c9de:	mov	r6, r1
	while ((src < target)) {
    c9e0:	b.n	c9c4 <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)+0x74>
    c9e2:	nop
    c9e4:	.word	0xffff0000

0000c9e8 <sync_event(transfer_struct*)>:
{
    c9e8:	push	{r3, r4, r5, lr}
	usb_audio_sync_feedback = feedback_accumulator >> usb_audio_sync_rshift;
    c9ea:	ldr	r2, [pc, #68]	; (ca30 <sync_event(transfer_struct*)+0x48>)
    c9ec:	ldr	r3, [pc, #68]	; (ca34 <sync_event(transfer_struct*)+0x4c>)
    c9ee:	ldrb	r1, [r2, #0]
    c9f0:	ldr	r2, [r3, #0]
	usb_prepare_transfer(&sync_transfer, &usb_audio_sync_feedback, usb_audio_sync_nbytes, 0);
    c9f2:	movs	r3, #0
	usb_audio_sync_feedback = feedback_accumulator >> usb_audio_sync_rshift;
    c9f4:	ldr	r4, [pc, #64]	; (ca38 <sync_event(transfer_struct*)+0x50>)
	usb_prepare_transfer(&sync_transfer, &usb_audio_sync_feedback, usb_audio_sync_nbytes, 0);
    c9f6:	ldr	r5, [pc, #68]	; (ca3c <sync_event(transfer_struct*)+0x54>)
	usb_audio_sync_feedback = feedback_accumulator >> usb_audio_sync_rshift;
    c9f8:	lsrs	r2, r1
	usb_prepare_transfer(&sync_transfer, &usb_audio_sync_feedback, usb_audio_sync_nbytes, 0);
    c9fa:	ldr	r0, [pc, #68]	; (ca40 <sync_event(transfer_struct*)+0x58>)
    c9fc:	mov	r1, r4
	usb_audio_sync_feedback = feedback_accumulator >> usb_audio_sync_rshift;
    c9fe:	str	r2, [r4, #0]
	usb_prepare_transfer(&sync_transfer, &usb_audio_sync_feedback, usb_audio_sync_nbytes, 0);
    ca00:	ldrb	r2, [r5, #0]
    ca02:	bl	b75c <usb_prepare_transfer>
	arm_dcache_flush(&usb_audio_sync_feedback, usb_audio_sync_nbytes);
    ca06:	ldrb	r3, [r5, #0]
	uint32_t end_addr = (uint32_t)addr + size;
    ca08:	add	r3, r4
	asm("dsb");
    ca0a:	dsb	sy
		SCB_CACHE_DCCMVAC = location;
    ca0e:	mov.w	r2, #3758153728	; 0xe000e000
    ca12:	str.w	r4, [r2, #3944]	; 0xf68
		location += 32;
    ca16:	adds	r4, #32
	} while (location < end_addr);
    ca18:	cmp	r3, r4
    ca1a:	bhi.n	ca12 <sync_event(transfer_struct*)+0x2a>
	asm("dsb");
    ca1c:	dsb	sy
	asm("isb");
    ca20:	isb	sy
	usb_transmit(AUDIO_SYNC_ENDPOINT, &sync_transfer);
    ca24:	ldr	r1, [pc, #24]	; (ca40 <sync_event(transfer_struct*)+0x58>)
    ca26:	movs	r0, #6
}
    ca28:	ldmia.w	sp!, {r3, r4, r5, lr}
	usb_transmit(AUDIO_SYNC_ENDPOINT, &sync_transfer);
    ca2c:	b.w	b78c <usb_transmit>
    ca30:	.word	0x20008174
    ca34:	.word	0x200079ac
    ca38:	.word	0x20205260
    ca3c:	.word	0x20008173
    ca40:	.word	0x20003100

0000ca44 <AudioOutputUSB::update()>:
		len--;
	}
}

void AudioOutputUSB::update(void)
{
    ca44:	push	{r3, r4, r5, lr}
    ca46:	mov	r5, r0
	audio_block_t *left, *right;

	// TODO: we shouldn't be writing to these......
	//left = receiveReadOnly(0); // input 0 = left channel
	//right = receiveReadOnly(1); // input 1 = right channel
	left = receiveWritable(0); // input 0 = left channel
    ca48:	movs	r1, #0
    ca4a:	bl	c704 <AudioStream::receiveWritable(unsigned int)>
	right = receiveWritable(1); // input 1 = right channel
    ca4e:	movs	r1, #1
	left = receiveWritable(0); // input 0 = left channel
    ca50:	mov	r4, r0
	right = receiveWritable(1); // input 1 = right channel
    ca52:	mov	r0, r5
    ca54:	bl	c704 <AudioStream::receiveWritable(unsigned int)>
	if (usb_audio_transmit_setting == 0) {
    ca58:	ldr	r3, [pc, #236]	; (cb48 <AudioOutputUSB::update()+0x104>)
	right = receiveWritable(1); // input 1 = right channel
    ca5a:	mov	r5, r0
	if (usb_audio_transmit_setting == 0) {
    ca5c:	ldrb	r3, [r3, #0]
    ca5e:	cbz	r3, ca9e <AudioOutputUSB::update()+0x5a>
		if (right_1st) { release(right_1st); right_1st = NULL; }
		if (right_2nd) { release(right_2nd); right_2nd = NULL; }
		offset_1st = 0;
		return;
	}
	if (left == NULL) {
    ca60:	cmp	r4, #0
    ca62:	beq.n	cafa <AudioOutputUSB::update()+0xb6>
			if (right) release(right);
			return;
		}
		memset(left->data, 0, sizeof(left->data));
	}
	if (right == NULL) {
    ca64:	cmp	r5, #0
    ca66:	beq.n	cb12 <AudioOutputUSB::update()+0xce>
			release(left);
			return;
		}
		memset(right->data, 0, sizeof(right->data));
	}
	__disable_irq();
    ca68:	cpsid	i
	if (left_1st == NULL) {
    ca6a:	ldr	r3, [pc, #224]	; (cb4c <AudioOutputUSB::update()+0x108>)
    ca6c:	ldr	r0, [r3, #0]
    ca6e:	cmp	r0, #0
    ca70:	beq.n	caee <AudioOutputUSB::update()+0xaa>
		left_1st = left;
		right_1st = right;
		offset_1st = 0;
	} else if (left_2nd == NULL) {
    ca72:	ldr	r2, [pc, #220]	; (cb50 <AudioOutputUSB::update()+0x10c>)
    ca74:	ldr	r1, [r2, #0]
    ca76:	cmp	r1, #0
    ca78:	beq.n	cb28 <AudioOutputUSB::update()+0xe4>
		left_2nd = left;
		right_2nd = right;
	} else {
		// buffer overrun - PC is consuming too slowly
		audio_block_t *discard1 = left_1st;
		left_1st = left_2nd;
    ca7a:	str	r1, [r3, #0]
		left_2nd = left;
		audio_block_t *discard2 = right_1st;
		right_1st = right_2nd;
    ca7c:	ldr	r1, [pc, #212]	; (cb54 <AudioOutputUSB::update()+0x110>)
		audio_block_t *discard2 = right_1st;
    ca7e:	ldr	r3, [pc, #216]	; (cb58 <AudioOutputUSB::update()+0x114>)
		left_2nd = left;
    ca80:	str	r4, [r2, #0]
		right_2nd = right;
		offset_1st = 0; // TODO: discard part of this data?
    ca82:	movs	r4, #0
		right_1st = right_2nd;
    ca84:	ldr	r2, [r1, #0]
		right_2nd = right;
    ca86:	str	r5, [r1, #0]
		offset_1st = 0; // TODO: discard part of this data?
    ca88:	ldr	r1, [pc, #208]	; (cb5c <AudioOutputUSB::update()+0x118>)
    ca8a:	strh	r4, [r1, #0]
		audio_block_t *discard2 = right_1st;
    ca8c:	ldr	r4, [r3, #0]
		right_1st = right_2nd;
    ca8e:	str	r2, [r3, #0]
		//serial_print("*");
		release(discard1);
    ca90:	bl	c654 <AudioStream::release(audio_block_struct*)>
		release(discard2);
    ca94:	mov	r0, r4
    ca96:	bl	c654 <AudioStream::release(audio_block_struct*)>
	}
	__enable_irq();
    ca9a:	cpsie	i
}
    ca9c:	pop	{r3, r4, r5, pc}
		if (left) release(left);
    ca9e:	cbz	r4, caa6 <AudioOutputUSB::update()+0x62>
    caa0:	mov	r0, r4
    caa2:	bl	c654 <AudioStream::release(audio_block_struct*)>
		if (right) release(right);
    caa6:	cbz	r5, caae <AudioOutputUSB::update()+0x6a>
    caa8:	mov	r0, r5
    caaa:	bl	c654 <AudioStream::release(audio_block_struct*)>
		if (left_1st) { release(left_1st); left_1st = NULL; }
    caae:	ldr	r4, [pc, #156]	; (cb4c <AudioOutputUSB::update()+0x108>)
    cab0:	ldr	r0, [r4, #0]
    cab2:	cbz	r0, cabc <AudioOutputUSB::update()+0x78>
    cab4:	bl	c654 <AudioStream::release(audio_block_struct*)>
    cab8:	movs	r3, #0
    caba:	str	r3, [r4, #0]
		if (left_2nd) { release(left_2nd); left_2nd = NULL; }
    cabc:	ldr	r4, [pc, #144]	; (cb50 <AudioOutputUSB::update()+0x10c>)
    cabe:	ldr	r0, [r4, #0]
    cac0:	cbz	r0, caca <AudioOutputUSB::update()+0x86>
    cac2:	bl	c654 <AudioStream::release(audio_block_struct*)>
    cac6:	movs	r3, #0
    cac8:	str	r3, [r4, #0]
		if (right_1st) { release(right_1st); right_1st = NULL; }
    caca:	ldr	r4, [pc, #140]	; (cb58 <AudioOutputUSB::update()+0x114>)
    cacc:	ldr	r0, [r4, #0]
    cace:	cbz	r0, cad8 <AudioOutputUSB::update()+0x94>
    cad0:	bl	c654 <AudioStream::release(audio_block_struct*)>
    cad4:	movs	r3, #0
    cad6:	str	r3, [r4, #0]
		if (right_2nd) { release(right_2nd); right_2nd = NULL; }
    cad8:	ldr	r4, [pc, #120]	; (cb54 <AudioOutputUSB::update()+0x110>)
    cada:	ldr	r0, [r4, #0]
    cadc:	cbz	r0, cae6 <AudioOutputUSB::update()+0xa2>
    cade:	bl	c654 <AudioStream::release(audio_block_struct*)>
    cae2:	movs	r3, #0
    cae4:	str	r3, [r4, #0]
		offset_1st = 0;
    cae6:	ldr	r3, [pc, #116]	; (cb5c <AudioOutputUSB::update()+0x118>)
    cae8:	movs	r2, #0
    caea:	strh	r2, [r3, #0]
}
    caec:	pop	{r3, r4, r5, pc}
		left_1st = left;
    caee:	str	r4, [r3, #0]
		right_1st = right;
    caf0:	ldr	r2, [pc, #100]	; (cb58 <AudioOutputUSB::update()+0x114>)
		offset_1st = 0;
    caf2:	ldr	r3, [pc, #104]	; (cb5c <AudioOutputUSB::update()+0x118>)
		right_1st = right;
    caf4:	str	r5, [r2, #0]
		offset_1st = 0;
    caf6:	strh	r0, [r3, #0]
    caf8:	b.n	ca9a <AudioOutputUSB::update()+0x56>
		left = allocate();
    cafa:	bl	c5a8 <AudioStream::allocate()>
		if (left == NULL) {
    cafe:	mov	r4, r0
    cb00:	cbz	r0, cb30 <AudioOutputUSB::update()+0xec>
		memset(left->data, 0, sizeof(left->data));
    cb02:	mov.w	r2, #256	; 0x100
    cb06:	movs	r1, #0
    cb08:	adds	r0, #4
    cb0a:	bl	e074 <memset>
	if (right == NULL) {
    cb0e:	cmp	r5, #0
    cb10:	bne.n	ca68 <AudioOutputUSB::update()+0x24>
		right = allocate();
    cb12:	bl	c5a8 <AudioStream::allocate()>
		if (right == NULL) {
    cb16:	mov	r5, r0
    cb18:	cbz	r0, cb3e <AudioOutputUSB::update()+0xfa>
		memset(right->data, 0, sizeof(right->data));
    cb1a:	mov.w	r2, #256	; 0x100
    cb1e:	movs	r1, #0
    cb20:	adds	r0, #4
    cb22:	bl	e074 <memset>
    cb26:	b.n	ca68 <AudioOutputUSB::update()+0x24>
		right_2nd = right;
    cb28:	ldr	r3, [pc, #40]	; (cb54 <AudioOutputUSB::update()+0x110>)
		left_2nd = left;
    cb2a:	str	r4, [r2, #0]
		right_2nd = right;
    cb2c:	str	r5, [r3, #0]
    cb2e:	b.n	ca9a <AudioOutputUSB::update()+0x56>
			if (right) release(right);
    cb30:	cmp	r5, #0
    cb32:	beq.n	ca9c <AudioOutputUSB::update()+0x58>
    cb34:	mov	r0, r5
}
    cb36:	ldmia.w	sp!, {r3, r4, r5, lr}
			if (right) release(right);
    cb3a:	b.w	c654 <AudioStream::release(audio_block_struct*)>
			release(left);
    cb3e:	mov	r0, r4
}
    cb40:	ldmia.w	sp!, {r3, r4, r5, lr}
			release(left);
    cb44:	b.w	c654 <AudioStream::release(audio_block_struct*)>
    cb48:	.word	0x20008175
    cb4c:	.word	0x200064f4
    cb50:	.word	0x200064f8
    cb54:	.word	0x20006500
    cb58:	.word	0x200064fc
    cb5c:	.word	0x20008140

0000cb60 <usb_audio_receive_callback>:
{
    cb60:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	AudioInputUSB::receive_flag = 1;
    cb64:	movs	r2, #1
    cb66:	ldr	r3, [pc, #296]	; (cc90 <usb_audio_receive_callback+0x130>)
	left = AudioInputUSB::incoming_left;
    cb68:	ldr.w	sl, [pc, #312]	; cca4 <usb_audio_receive_callback+0x144>
	len >>= 2; // 1 sample = 4 bytes: 2 left, 2 right
    cb6c:	lsrs	r6, r0, #2
	AudioInputUSB::receive_flag = 1;
    cb6e:	strb	r2, [r3, #0]
	count = AudioInputUSB::incoming_count;
    cb70:	ldr	r3, [pc, #288]	; (cc94 <usb_audio_receive_callback+0x134>)
	left = AudioInputUSB::incoming_left;
    cb72:	ldr.w	r4, [sl]
	count = AudioInputUSB::incoming_count;
    cb76:	ldrh	r7, [r3, #0]
	right = AudioInputUSB::incoming_right;
    cb78:	ldr	r3, [pc, #284]	; (cc98 <usb_audio_receive_callback+0x138>)
	count = AudioInputUSB::incoming_count;
    cb7a:	mov	r9, r7
	right = AudioInputUSB::incoming_right;
    cb7c:	ldr	r5, [r3, #0]
	if (left == NULL) {
    cb7e:	cmp	r4, #0
    cb80:	beq.n	cc18 <usb_audio_receive_callback+0xb8>
	if (right == NULL) {
    cb82:	cmp	r5, #0
    cb84:	beq.n	cc2a <usb_audio_receive_callback+0xca>
	while (len > 0) {
    cb86:	cmp	r6, #0
    cb88:	beq.n	cc3c <usb_audio_receive_callback+0xdc>
		avail = AUDIO_BLOCK_SAMPLES - count;
    cb8a:	rsb	r3, r7, #128	; 0x80
		if (len < avail) {
    cb8e:	cmp	r6, r3
    cb90:	bcc.n	cc88 <usb_audio_receive_callback+0x128>
    cb92:	ldr.w	fp, [pc, #276]	; cca8 <usb_audio_receive_callback+0x148>
    cb96:	ldr	r7, [pc, #260]	; (cc9c <usb_audio_receive_callback+0x13c>)
			if (AudioInputUSB::ready_left || AudioInputUSB::ready_right) return;
    cb98:	ldr.w	r8, [pc, #272]	; ccac <usb_audio_receive_callback+0x14c>
		} else if (avail > 0) {
    cb9c:	cbnz	r3, cbde <usb_audio_receive_callback+0x7e>
			if (AudioInputUSB::ready_left || AudioInputUSB::ready_right) return;
    cb9e:	ldr	r3, [r7, #0]
    cba0:	cmp	r3, #0
    cba2:	bne.n	cc14 <usb_audio_receive_callback+0xb4>
    cba4:	ldr.w	r3, [r8]
    cba8:	cmp	r3, #0
    cbaa:	bne.n	cc14 <usb_audio_receive_callback+0xb4>
			AudioInputUSB::ready_left = left;
    cbac:	str	r4, [r7, #0]
			AudioInputUSB::ready_right = right;
    cbae:	str.w	r5, [r8]
			left = AudioStream::allocate();
    cbb2:	bl	c5a8 <AudioStream::allocate()>
			if (left == NULL) {
    cbb6:	mov	r4, r0
    cbb8:	cmp	r0, #0
    cbba:	beq.n	cc44 <usb_audio_receive_callback+0xe4>
			right = AudioStream::allocate();
    cbbc:	bl	c5a8 <AudioStream::allocate()>
			if (right == NULL) {
    cbc0:	mov	r5, r0
    cbc2:	cmp	r0, #0
    cbc4:	beq.n	cc54 <usb_audio_receive_callback+0xf4>
			AudioInputUSB::incoming_right = right;
    cbc6:	ldr	r3, [pc, #208]	; (cc98 <usb_audio_receive_callback+0x138>)
			AudioInputUSB::incoming_left = left;
    cbc8:	str.w	r4, [sl]
			AudioInputUSB::incoming_right = right;
    cbcc:	str	r0, [r3, #0]
	while (len > 0) {
    cbce:	cmp	r6, #0
    cbd0:	beq.n	cc3a <usb_audio_receive_callback+0xda>
		if (len < avail) {
    cbd2:	cmp	r6, #127	; 0x7f
			count = 0;
    cbd4:	mov.w	r9, #0
		avail = AUDIO_BLOCK_SAMPLES - count;
    cbd8:	mov.w	r3, #128	; 0x80
		if (len < avail) {
    cbdc:	bls.n	cc6a <usb_audio_receive_callback+0x10a>
			copy_to_buffers(data, left->data + count, right->data + count, avail);
    cbde:	adds	r2, r5, #4
    cbe0:	adds	r1, r4, #4
    cbe2:	mov	r0, fp
    cbe4:	add	r6, r9
    cbe6:	add.w	r2, r2, r9, lsl #1
    cbea:	add.w	r1, r1, r9, lsl #1
			len -= avail;
    cbee:	subs	r6, #128	; 0x80
			data += avail;
    cbf0:	add.w	fp, fp, r3, lsl #2
			copy_to_buffers(data, left->data + count, right->data + count, avail);
    cbf4:	bl	c950 <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)>
			if (AudioInputUSB::ready_left || AudioInputUSB::ready_right) {
    cbf8:	ldr	r3, [r7, #0]
    cbfa:	cbnz	r3, cc04 <usb_audio_receive_callback+0xa4>
    cbfc:	ldr.w	r3, [r8]
    cc00:	cmp	r3, #0
    cc02:	beq.n	cbac <usb_audio_receive_callback+0x4c>
				AudioInputUSB::incoming_count = count + avail;
    cc04:	movs	r3, #128	; 0x80
    cc06:	ldr	r2, [pc, #140]	; (cc94 <usb_audio_receive_callback+0x134>)
    cc08:	strh	r3, [r2, #0]
				if (len > 0) {
    cc0a:	cbz	r6, cc14 <usb_audio_receive_callback+0xb4>
					usb_audio_overrun_count++;
    cc0c:	ldr	r2, [pc, #144]	; (cca0 <usb_audio_receive_callback+0x140>)
    cc0e:	ldr	r3, [r2, #0]
    cc10:	adds	r3, #1
    cc12:	str	r3, [r2, #0]
}
    cc14:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		left = AudioStream::allocate();
    cc18:	bl	c5a8 <AudioStream::allocate()>
		if (left == NULL) return;
    cc1c:	mov	r4, r0
    cc1e:	cmp	r0, #0
    cc20:	beq.n	cc14 <usb_audio_receive_callback+0xb4>
		AudioInputUSB::incoming_left = left;
    cc22:	str.w	r0, [sl]
	if (right == NULL) {
    cc26:	cmp	r5, #0
    cc28:	bne.n	cb86 <usb_audio_receive_callback+0x26>
		right = AudioStream::allocate();
    cc2a:	bl	c5a8 <AudioStream::allocate()>
		if (right == NULL) return;
    cc2e:	mov	r5, r0
    cc30:	cmp	r0, #0
    cc32:	beq.n	cc14 <usb_audio_receive_callback+0xb4>
		AudioInputUSB::incoming_right = right;
    cc34:	ldr	r3, [pc, #96]	; (cc98 <usb_audio_receive_callback+0x138>)
    cc36:	str	r0, [r3, #0]
    cc38:	b.n	cb86 <usb_audio_receive_callback+0x26>
    cc3a:	mov	r7, r6
	AudioInputUSB::incoming_count = count;
    cc3c:	ldr	r3, [pc, #84]	; (cc94 <usb_audio_receive_callback+0x134>)
    cc3e:	strh	r7, [r3, #0]
}
    cc40:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				AudioInputUSB::incoming_right = NULL;
    cc44:	ldr	r3, [pc, #80]	; (cc98 <usb_audio_receive_callback+0x138>)
				AudioInputUSB::incoming_left = NULL;
    cc46:	str.w	r0, [sl]
				AudioInputUSB::incoming_right = NULL;
    cc4a:	str	r0, [r3, #0]
				AudioInputUSB::incoming_count = 0;
    cc4c:	ldr	r3, [pc, #68]	; (cc94 <usb_audio_receive_callback+0x134>)
    cc4e:	strh	r0, [r3, #0]
}
    cc50:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				AudioStream::release(left);
    cc54:	mov	r0, r4
    cc56:	bl	c654 <AudioStream::release(audio_block_struct*)>
				AudioInputUSB::incoming_right = NULL;
    cc5a:	ldr	r3, [pc, #60]	; (cc98 <usb_audio_receive_callback+0x138>)
				AudioInputUSB::incoming_left = NULL;
    cc5c:	str.w	r5, [sl]
				AudioInputUSB::incoming_right = NULL;
    cc60:	str	r5, [r3, #0]
				AudioInputUSB::incoming_count = 0;
    cc62:	ldr	r3, [pc, #48]	; (cc94 <usb_audio_receive_callback+0x134>)
    cc64:	strh	r5, [r3, #0]
}
    cc66:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cc6a:	mov	r7, r9
    cc6c:	mov	r3, r9
			copy_to_buffers(data, left->data + count, right->data + count, len);
    cc6e:	adds	r2, r5, #4
    cc70:	adds	r1, r4, #4
    cc72:	mov	r0, fp
			AudioInputUSB::incoming_count = count + len;
    cc74:	add	r7, r6
			copy_to_buffers(data, left->data + count, right->data + count, len);
    cc76:	add	r2, r3
    cc78:	add	r1, r3
    cc7a:	mov	r3, r6
    cc7c:	bl	c950 <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)>
			AudioInputUSB::incoming_count = count + len;
    cc80:	ldr	r3, [pc, #16]	; (cc94 <usb_audio_receive_callback+0x134>)
    cc82:	strh	r7, [r3, #0]
}
    cc84:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			copy_to_buffers(data, left->data + count, right->data + count, len);
    cc88:	lsls	r3, r7, #1
    cc8a:	ldr.w	fp, [pc, #28]	; cca8 <usb_audio_receive_callback+0x148>
    cc8e:	b.n	cc6e <usb_audio_receive_callback+0x10e>
    cc90:	.word	0x2000815e
    cc94:	.word	0x2000813e
    cc98:	.word	0x200064b0
    cc9c:	.word	0x200064a4
    cca0:	.word	0x20008118
    cca4:	.word	0x200064ac
    cca8:	.word	0x20205280
    ccac:	.word	0x200064a8

0000ccb0 <rx_event(transfer_struct*)>:
{
    ccb0:	push	{r3, lr}
	if (t) {
    ccb2:	cbz	r0, ccc4 <rx_event(transfer_struct*)+0x14>
		int len = AUDIO_RX_SIZE - ((rx_transfer.status >> 16) & 0x7FFF);
    ccb4:	ldr	r3, [pc, #68]	; (ccfc <rx_event(transfer_struct*)+0x4c>)
    ccb6:	ldr	r0, [r3, #4]
    ccb8:	ubfx	r0, r0, #16, #15
		usb_audio_receive_callback(len);
    ccbc:	rsb	r0, r0, #180	; 0xb4
    ccc0:	bl	cb60 <usb_audio_receive_callback>
	usb_prepare_transfer(&rx_transfer, rx_buffer, AUDIO_RX_SIZE, 0);
    ccc4:	movs	r3, #0
    ccc6:	movs	r2, #180	; 0xb4
    ccc8:	ldr	r1, [pc, #52]	; (cd00 <rx_event(transfer_struct*)+0x50>)
    ccca:	ldr	r0, [pc, #48]	; (ccfc <rx_event(transfer_struct*)+0x4c>)
    cccc:	bl	b75c <usb_prepare_transfer>
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    ccd0:	ldr	r3, [pc, #44]	; (cd00 <rx_event(transfer_struct*)+0x50>)
	uint32_t end_addr = (uint32_t)addr + size;
    ccd2:	add.w	r1, r3, #180	; 0xb4
	asm("dsb");
    ccd6:	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    ccda:	mov.w	r2, #3758153728	; 0xe000e000
    ccde:	str.w	r3, [r2, #3932]	; 0xf5c
		location += 32;
    cce2:	adds	r3, #32
	} while (location < end_addr);
    cce4:	cmp	r1, r3
    cce6:	bhi.n	ccde <rx_event(transfer_struct*)+0x2e>
	asm("dsb");
    cce8:	dsb	sy
	asm("isb");
    ccec:	isb	sy
	usb_receive(AUDIO_RX_ENDPOINT, &rx_transfer);
    ccf0:	ldr	r1, [pc, #8]	; (ccfc <rx_event(transfer_struct*)+0x4c>)
    ccf2:	movs	r0, #5
}
    ccf4:	ldmia.w	sp!, {r3, lr}
	usb_receive(AUDIO_RX_ENDPOINT, &rx_transfer);
    ccf8:	b.w	b7b4 <usb_receive>
    ccfc:	.word	0x200030e0
    cd00:	.word	0x20205280

0000cd04 <AudioOutputUSB::begin()>:
	update_responsibility = false;
    cd04:	movs	r3, #0
    cd06:	ldr	r0, [pc, #12]	; (cd14 <AudioOutputUSB::begin()+0x10>)
	left_1st = NULL;
    cd08:	ldr	r1, [pc, #12]	; (cd18 <AudioOutputUSB::begin()+0x14>)
	right_1st = NULL;
    cd0a:	ldr	r2, [pc, #16]	; (cd1c <AudioOutputUSB::begin()+0x18>)
	update_responsibility = false;
    cd0c:	strb	r3, [r0, #0]
	left_1st = NULL;
    cd0e:	str	r3, [r1, #0]
	right_1st = NULL;
    cd10:	str	r3, [r2, #0]
}
    cd12:	bx	lr
    cd14:	.word	0x2000815f
    cd18:	.word	0x200064f4
    cd1c:	.word	0x200064fc

0000cd20 <usb_audio_transmit_callback>:
{
	static uint32_t count=5;
	uint32_t avail, num, target, offset, len=0;
	audio_block_t *left, *right;

	if (++count < 10) {   // TODO: dynamic adjust to match USB rate
    cd20:	ldr	r2, [pc, #228]	; (ce08 <usb_audio_transmit_callback+0xe8>)
{
    cd22:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (++count < 10) {   // TODO: dynamic adjust to match USB rate
    cd26:	ldr	r3, [r2, #0]
    cd28:	adds	r3, #1
    cd2a:	cmp	r3, #9
{
    cd2c:	vpush	{d8}
	if (++count < 10) {   // TODO: dynamic adjust to match USB rate
    cd30:	bls.n	cdde <usb_audio_transmit_callback+0xbe>
		target = 44;
	} else {
		count = 0;
    cd32:	movs	r1, #180	; 0xb4
    cd34:	movs	r3, #0
		target = 45;
    cd36:	mov.w	r9, #45	; 0x2d
		count = 0;
    cd3a:	vmov	s16, r1
    cd3e:	str	r3, [r2, #0]
{
    cd40:	movs	r7, #0
    cd42:	ldr.w	fp, [pc, #216]	; ce1c <usb_audio_transmit_callback+0xfc>
			memset(usb_audio_transmit_buffer + len, 0, num * 4);
			//serial_print("%");
			break;
		}
		right = AudioOutputUSB::right_1st;
		offset = AudioOutputUSB::offset_1st;
    cd46:	ldr.w	sl, [pc, #216]	; ce20 <usb_audio_transmit_callback+0x100>
		left = AudioOutputUSB::left_1st;
    cd4a:	ldr.w	r0, [fp]
		num = target - len;
    cd4e:	sub.w	r2, r9, r7
		if (left == NULL) {
    cd52:	cmp	r0, #0
    cd54:	beq.n	cdec <usb_audio_transmit_callback+0xcc>
		offset = AudioOutputUSB::offset_1st;
    cd56:	ldrh.w	ip, [sl]

		avail = AUDIO_BLOCK_SAMPLES - offset;
		if (num > avail) num = avail;

		copy_from_buffers((uint32_t *)usb_audio_transmit_buffer + len,
			left->data + offset, right->data + offset, num);
    cd5a:	adds	r5, r0, #4
		right = AudioOutputUSB::right_1st;
    cd5c:	ldr	r3, [pc, #172]	; (ce0c <usb_audio_transmit_callback+0xec>)
		copy_from_buffers((uint32_t *)usb_audio_transmit_buffer + len,
    cd5e:	add.w	r5, r5, ip, lsl #1
		right = AudioOutputUSB::right_1st;
    cd62:	ldr.w	r8, [r3]
		avail = AUDIO_BLOCK_SAMPLES - offset;
    cd66:	rsb	r3, ip, #128	; 0x80
    cd6a:	cmp	r2, r3
			left->data + offset, right->data + offset, num);
    cd6c:	add.w	r4, r8, #4
    cd70:	it	cs
    cd72:	movcs	r2, r3
		copy_from_buffers((uint32_t *)usb_audio_transmit_buffer + len,
    cd74:	ldr	r3, [pc, #152]	; (ce10 <usb_audio_transmit_callback+0xf0>)
    cd76:	add.w	r4, r4, ip, lsl #1
    cd7a:	add.w	r6, r3, r7, lsl #2
	while (len > 0) {
    cd7e:	cbz	r2, cd98 <usb_audio_transmit_callback+0x78>
    cd80:	mov	r1, r2
		*dst++ = (*right++ << 16) | (*left++ & 0xFFFF);
    cd82:	ldrsh.w	r3, [r5], #2
	while (len > 0) {
    cd86:	subs	r1, #1
		*dst++ = (*right++ << 16) | (*left++ & 0xFFFF);
    cd88:	ldrsh.w	lr, [r4], #2
    cd8c:	uxth	r3, r3
    cd8e:	orr.w	r3, r3, lr, lsl #16
    cd92:	str.w	r3, [r6], #4
	while (len > 0) {
    cd96:	bne.n	cd82 <usb_audio_transmit_callback+0x62>
		len += num;
		offset += num;
    cd98:	add	ip, r2
		len += num;
    cd9a:	add	r7, r2
		if (offset >= AUDIO_BLOCK_SAMPLES) {
    cd9c:	cmp.w	ip, #127	; 0x7f
    cda0:	bhi.n	cdba <usb_audio_transmit_callback+0x9a>
			AudioOutputUSB::left_2nd = NULL;
			AudioOutputUSB::right_1st = AudioOutputUSB::right_2nd;
			AudioOutputUSB::right_2nd = NULL;
			AudioOutputUSB::offset_1st = 0;
		} else {
			AudioOutputUSB::offset_1st = offset;
    cda2:	uxth.w	ip, ip
	while (len < target) {
    cda6:	cmp	r7, r9
			AudioOutputUSB::offset_1st = offset;
    cda8:	strh.w	ip, [sl]
	while (len < target) {
    cdac:	bcc.n	cd4a <usb_audio_transmit_callback+0x2a>
		}
	}
	return target * 4;
}
    cdae:	vmov	r0, s16
    cdb2:	vpop	{d8}
    cdb6:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			AudioStream::release(left);
    cdba:	bl	c654 <AudioStream::release(audio_block_struct*)>
			AudioStream::release(right);
    cdbe:	mov	r0, r8
    cdc0:	bl	c654 <AudioStream::release(audio_block_struct*)>
			AudioOutputUSB::left_1st = AudioOutputUSB::left_2nd;
    cdc4:	ldr	r0, [pc, #76]	; (ce14 <usb_audio_transmit_callback+0xf4>)
			AudioOutputUSB::right_1st = AudioOutputUSB::right_2nd;
    cdc6:	ldr	r3, [pc, #80]	; (ce18 <usb_audio_transmit_callback+0xf8>)
			AudioOutputUSB::left_2nd = NULL;
    cdc8:	movs	r2, #0
			AudioOutputUSB::left_1st = AudioOutputUSB::left_2nd;
    cdca:	ldr	r1, [r0, #0]
    cdcc:	mov	ip, r2
			AudioOutputUSB::left_2nd = NULL;
    cdce:	str	r2, [r0, #0]
			AudioOutputUSB::left_1st = AudioOutputUSB::left_2nd;
    cdd0:	str.w	r1, [fp]
			AudioOutputUSB::right_1st = AudioOutputUSB::right_2nd;
    cdd4:	ldr	r1, [r3, #0]
			AudioOutputUSB::right_2nd = NULL;
    cdd6:	str	r2, [r3, #0]
			AudioOutputUSB::right_1st = AudioOutputUSB::right_2nd;
    cdd8:	ldr	r3, [pc, #48]	; (ce0c <usb_audio_transmit_callback+0xec>)
    cdda:	str	r1, [r3, #0]
			AudioOutputUSB::offset_1st = 0;
    cddc:	b.n	cda6 <usb_audio_transmit_callback+0x86>
	if (++count < 10) {   // TODO: dynamic adjust to match USB rate
    cdde:	movs	r1, #176	; 0xb0
		target = 44;
    cde0:	mov.w	r9, #44	; 0x2c
	if (++count < 10) {   // TODO: dynamic adjust to match USB rate
    cde4:	str	r3, [r2, #0]
    cde6:	vmov	s16, r1
    cdea:	b.n	cd40 <usb_audio_transmit_callback+0x20>
			memset(usb_audio_transmit_buffer + len, 0, num * 4);
    cdec:	ldr	r3, [pc, #32]	; (ce10 <usb_audio_transmit_callback+0xf0>)
    cdee:	mov	r1, r0
    cdf0:	lsls	r2, r2, #2
    cdf2:	add.w	r0, r3, r7, lsl #1
    cdf6:	bl	e074 <memset>
}
    cdfa:	vmov	r0, s16
    cdfe:	vpop	{d8}
    ce02:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ce06:	nop
    ce08:	.word	0x2000148c
    ce0c:	.word	0x200064fc
    ce10:	.word	0x20005240
    ce14:	.word	0x200064f8
    ce18:	.word	0x20006500
    ce1c:	.word	0x200064f4
    ce20:	.word	0x20008140

0000ce24 <tx_event(transfer_struct*)>:
{
    ce24:	push	{r3, r4, r5, lr}
	int len = usb_audio_transmit_callback();
    ce26:	bl	cd20 <usb_audio_transmit_callback>
	usb_audio_sync_feedback = feedback_accumulator >> usb_audio_sync_rshift;
    ce2a:	ldr	r2, [pc, #68]	; (ce70 <tx_event(transfer_struct*)+0x4c>)
    ce2c:	ldr	r3, [pc, #68]	; (ce74 <tx_event(transfer_struct*)+0x50>)
	int len = usb_audio_transmit_callback();
    ce2e:	mov	r5, r0
	usb_audio_sync_feedback = feedback_accumulator >> usb_audio_sync_rshift;
    ce30:	ldr	r2, [r2, #0]
    ce32:	ldrb	r3, [r3, #0]
	usb_prepare_transfer(&tx_transfer, usb_audio_transmit_buffer, len, 0);
    ce34:	ldr	r4, [pc, #64]	; (ce78 <tx_event(transfer_struct*)+0x54>)
	usb_audio_sync_feedback = feedback_accumulator >> usb_audio_sync_rshift;
    ce36:	lsrs	r2, r3
    ce38:	ldr	r1, [pc, #64]	; (ce7c <tx_event(transfer_struct*)+0x58>)
	usb_prepare_transfer(&tx_transfer, usb_audio_transmit_buffer, len, 0);
    ce3a:	movs	r3, #0
	usb_audio_sync_feedback = feedback_accumulator >> usb_audio_sync_rshift;
    ce3c:	str	r2, [r1, #0]
	usb_prepare_transfer(&tx_transfer, usb_audio_transmit_buffer, len, 0);
    ce3e:	mov	r2, r0
    ce40:	mov	r1, r4
    ce42:	ldr	r0, [pc, #60]	; (ce80 <tx_event(transfer_struct*)+0x5c>)
    ce44:	bl	b75c <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    ce48:	adds	r0, r4, r5
	asm("dsb");
    ce4a:	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    ce4e:	mov.w	r3, #3758153728	; 0xe000e000
    ce52:	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    ce56:	adds	r4, #32
	} while (location < end_addr);
    ce58:	cmp	r0, r4
    ce5a:	bhi.n	ce52 <tx_event(transfer_struct*)+0x2e>
	asm("dsb");
    ce5c:	dsb	sy
	asm("isb");
    ce60:	isb	sy
	usb_transmit(AUDIO_TX_ENDPOINT, &tx_transfer);
    ce64:	ldr	r1, [pc, #24]	; (ce80 <tx_event(transfer_struct*)+0x5c>)
    ce66:	movs	r0, #5
}
    ce68:	ldmia.w	sp!, {r3, r4, r5, lr}
	usb_transmit(AUDIO_TX_ENDPOINT, &tx_transfer);
    ce6c:	b.w	b78c <usb_transmit>
    ce70:	.word	0x200079ac
    ce74:	.word	0x20008174
    ce78:	.word	0x20005240
    ce7c:	.word	0x20205260
    ce80:	.word	0x20003220

0000ce84 <usb_audio_configure>:
{
    ce84:	push	{r3, r4, r5, lr}
	usb_audio_overrun_count = 0;
    ce86:	ldr	r1, [pc, #172]	; (cf34 <usb_audio_configure+0xb0>)
	usb_audio_underrun_count = 0;
    ce88:	movs	r4, #0
    ce8a:	ldr	r3, [pc, #172]	; (cf38 <usb_audio_configure+0xb4>)
	if (usb_high_speed) {
    ce8c:	ldr	r2, [pc, #172]	; (cf3c <usb_audio_configure+0xb8>)
	usb_audio_underrun_count = 0;
    ce8e:	str	r4, [r3, #0]
	usb_audio_overrun_count = 0;
    ce90:	str	r4, [r1, #0]
	if (usb_high_speed) {
    ce92:	ldrb	r1, [r2, #0]
	feedback_accumulator = 739875226; // 44.1 * 2^24
    ce94:	ldr	r3, [pc, #168]	; (cf40 <usb_audio_configure+0xbc>)
	if (usb_high_speed) {
    ce96:	cmp	r1, r4
	feedback_accumulator = 739875226; // 44.1 * 2^24
    ce98:	ldr	r2, [pc, #168]	; (cf44 <usb_audio_configure+0xc0>)
		usb_audio_sync_nbytes = 4;
    ce9a:	ldr	r5, [pc, #172]	; (cf48 <usb_audio_configure+0xc4>)
	memset(&rx_transfer, 0, sizeof(rx_transfer));
    ce9c:	mov	r1, r4
	feedback_accumulator = 739875226; // 44.1 * 2^24
    ce9e:	str	r2, [r3, #0]
	if (usb_high_speed) {
    cea0:	itete	eq
    cea2:	moveq	r3, #3
    cea4:	movne	r3, #4
    cea6:	moveq	r0, #10
    cea8:	movne	r0, #8
	memset(&rx_transfer, 0, sizeof(rx_transfer));
    ceaa:	movs	r2, #32
		usb_audio_sync_nbytes = 4;
    ceac:	strb	r3, [r5, #0]
		usb_audio_sync_rshift = 8;
    ceae:	ldr	r3, [pc, #156]	; (cf4c <usb_audio_configure+0xc8>)
    ceb0:	strb	r0, [r3, #0]
	memset(&rx_transfer, 0, sizeof(rx_transfer));
    ceb2:	ldr	r0, [pc, #156]	; (cf50 <usb_audio_configure+0xcc>)
    ceb4:	bl	e074 <memset>
	usb_config_rx_iso(AUDIO_RX_ENDPOINT, AUDIO_RX_SIZE, 1, rx_event);
    ceb8:	movs	r2, #1
    ceba:	movs	r1, #180	; 0xb4
    cebc:	movs	r0, #5
    cebe:	ldr	r3, [pc, #148]	; (cf54 <usb_audio_configure+0xd0>)
    cec0:	bl	b68c <usb_config_rx_iso>
	usb_prepare_transfer(&rx_transfer, rx_buffer, AUDIO_RX_SIZE, 0);
    cec4:	mov	r3, r4
    cec6:	movs	r2, #180	; 0xb4
    cec8:	ldr	r1, [pc, #140]	; (cf58 <usb_audio_configure+0xd4>)
    ceca:	ldr	r0, [pc, #132]	; (cf50 <usb_audio_configure+0xcc>)
    cecc:	bl	b75c <usb_prepare_transfer>
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    ced0:	ldr	r3, [pc, #132]	; (cf58 <usb_audio_configure+0xd4>)
	uint32_t end_addr = (uint32_t)addr + size;
    ced2:	add.w	r1, r3, #180	; 0xb4
	asm("dsb");
    ced6:	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    ceda:	mov.w	r2, #3758153728	; 0xe000e000
    cede:	str.w	r3, [r2, #3932]	; 0xf5c
		location += 32;
    cee2:	adds	r3, #32
	} while (location < end_addr);
    cee4:	cmp	r1, r3
    cee6:	bhi.n	cede <usb_audio_configure+0x5a>
	asm("dsb");
    cee8:	dsb	sy
	asm("isb");
    ceec:	isb	sy
	usb_receive(AUDIO_RX_ENDPOINT, &rx_transfer);
    cef0:	ldr	r1, [pc, #92]	; (cf50 <usb_audio_configure+0xcc>)
    cef2:	movs	r0, #5
    cef4:	bl	b7b4 <usb_receive>
	memset(&sync_transfer, 0, sizeof(sync_transfer));
    cef8:	movs	r2, #32
    cefa:	movs	r1, #0
    cefc:	ldr	r0, [pc, #92]	; (cf5c <usb_audio_configure+0xd8>)
    cefe:	bl	e074 <memset>
	usb_config_tx_iso(AUDIO_SYNC_ENDPOINT, usb_audio_sync_nbytes, 1, sync_event);
    cf02:	ldr	r3, [pc, #92]	; (cf60 <usb_audio_configure+0xdc>)
    cf04:	ldrb	r1, [r5, #0]
    cf06:	movs	r2, #1
    cf08:	movs	r0, #6
    cf0a:	bl	b6f0 <usb_config_tx_iso>
	sync_event(NULL);
    cf0e:	movs	r0, #0
    cf10:	bl	c9e8 <sync_event(transfer_struct*)>
	memset(&tx_transfer, 0, sizeof(tx_transfer));
    cf14:	movs	r2, #32
    cf16:	movs	r1, #0
    cf18:	ldr	r0, [pc, #72]	; (cf64 <usb_audio_configure+0xe0>)
    cf1a:	bl	e074 <memset>
	usb_config_tx_iso(AUDIO_TX_ENDPOINT, AUDIO_TX_SIZE, 1, tx_event);
    cf1e:	movs	r0, #5
    cf20:	ldr	r3, [pc, #68]	; (cf68 <usb_audio_configure+0xe4>)
    cf22:	movs	r2, #1
    cf24:	movs	r1, #180	; 0xb4
    cf26:	bl	b6f0 <usb_config_tx_iso>
	tx_event(NULL);
    cf2a:	movs	r0, #0
}
    cf2c:	ldmia.w	sp!, {r3, r4, r5, lr}
	tx_event(NULL);
    cf30:	b.w	ce24 <tx_event(transfer_struct*)>
    cf34:	.word	0x20008118
    cf38:	.word	0x2000811c
    cf3c:	.word	0x20008178
    cf40:	.word	0x200079ac
    cf44:	.word	0x2c19999a
    cf48:	.word	0x20008173
    cf4c:	.word	0x20008174
    cf50:	.word	0x200030e0
    cf54:	.word	0x0000ccb1
    cf58:	.word	0x20205280
    cf5c:	.word	0x20003100
    cf60:	.word	0x0000c9e9
    cf64:	.word	0x20003220
    cf68:	.word	0x0000ce25

0000cf6c <usb_audio_get_feature>:
};

int usb_audio_get_feature(void *stp, uint8_t *data, uint32_t *datalen)
{
	struct setup_struct setup = *((struct setup_struct *)stp);
	if (setup.bmRequestType==0xA1) { // should check bRequest, bChannel, and UnitID
    cf6c:	ldrb	r3, [r0, #0]
    cf6e:	cmp	r3, #161	; 0xa1
    cf70:	beq.n	cf76 <usb_audio_get_feature+0xa>
			if (setup.bCS==0x01) { // mute
				data[0] = AudioInputUSB::features.mute;  // 1=mute, 0=unmute
				*datalen = 1;
				return 1;
			}
			else if (setup.bCS==0x02) { // volume
    cf72:	movs	r0, #0
				*datalen = 2;
				return 1;
			}
	}
	return 0;
}
    cf74:	bx	lr
	struct setup_struct setup = *((struct setup_struct *)stp);
    cf76:	ldrb	r3, [r0, #3]
    cf78:	ldrb	r0, [r0, #1]
			if (setup.bCS==0x01) { // mute
    cf7a:	cmp	r3, #1
    cf7c:	beq.n	cf90 <usb_audio_get_feature+0x24>
			else if (setup.bCS==0x02) { // volume
    cf7e:	cmp	r3, #2
    cf80:	bne.n	cf72 <usb_audio_get_feature+0x6>
				if (setup.bRequest==0x81) { // GET_CURR
    cf82:	subs	r0, #129	; 0x81
    cf84:	cmp	r0, #3
    cf86:	bhi.n	cf72 <usb_audio_get_feature+0x6>
    cf88:	tbb	[pc, r0]
    cf8c:	.word	0x0b13171b
{
    cf90:	push	{r4}
				data[0] = AudioInputUSB::features.mute;  // 1=mute, 0=unmute
    cf92:	ldr	r4, [pc, #56]	; (cfcc <usb_audio_get_feature+0x60>)
				return 1;
    cf94:	mov	r0, r3
				data[0] = AudioInputUSB::features.mute;  // 1=mute, 0=unmute
    cf96:	ldr	r4, [r4, #4]
    cf98:	strb	r4, [r1, #0]
}
    cf9a:	ldr.w	r4, [sp], #4
				*datalen = 1;
    cf9e:	str	r3, [r2, #0]
}
    cfa0:	bx	lr
					data[0] = 1; // increment vol by by 1
    cfa2:	movs	r3, #1
    cfa4:	movs	r0, #0
    cfa6:	strb	r3, [r1, #0]
				*datalen = 2;
    cfa8:	movs	r3, #2
					data[1] = (AudioInputUSB::features.volume>>8) & 0xFF;
    cfaa:	strb	r0, [r1, #1]
				return 1;
    cfac:	movs	r0, #1
				*datalen = 2;
    cfae:	str	r3, [r2, #0]
				return 1;
    cfb0:	bx	lr
					data[0] = FEATURE_MAX_VOLUME;  // max level, for range of 0 to MAX
    cfb2:	movs	r3, #255	; 0xff
    cfb4:	movs	r0, #0
    cfb6:	strb	r3, [r1, #0]
					data[1] = 0;
    cfb8:	b.n	cfa8 <usb_audio_get_feature+0x3c>
					data[0] = 0;     // min level is 0
    cfba:	movs	r3, #0
    cfbc:	mov	r0, r3
    cfbe:	strb	r3, [r1, #0]
					data[1] = 0;
    cfc0:	b.n	cfa8 <usb_audio_get_feature+0x3c>
					data[0] = AudioInputUSB::features.volume & 0xFF;
    cfc2:	ldr	r3, [pc, #8]	; (cfcc <usb_audio_get_feature+0x60>)
    cfc4:	ldr	r0, [r3, #8]
    cfc6:	strb	r0, [r1, #0]
					data[1] = (AudioInputUSB::features.volume>>8) & 0xFF;
    cfc8:	ldrb	r0, [r3, #9]
    cfca:	b.n	cfa8 <usb_audio_get_feature+0x3c>
    cfcc:	.word	0x20001478

0000cfd0 <usb_audio_set_feature>:

int usb_audio_set_feature(void *stp, uint8_t *buf) 
{
	struct setup_struct setup = *((struct setup_struct *)stp);
	if (setup.bmRequestType==0x21) { // should check bRequest, bChannel and UnitID
    cfd0:	ldrb	r3, [r0, #0]
    cfd2:	cmp	r3, #33	; 0x21
    cfd4:	beq.n	cfda <usb_audio_set_feature+0xa>
					AudioInputUSB::features.change = 1;
					return 1;
				}
			}
	}
	return 0;
    cfd6:	movs	r0, #0
}
    cfd8:	bx	lr
	struct setup_struct setup = *((struct setup_struct *)stp);
    cfda:	ldrb	r3, [r0, #3]
    cfdc:	ldrb	r2, [r0, #1]
			if (setup.bCS==0x01) { // mute
    cfde:	cmp	r3, #1
    cfe0:	beq.n	cff6 <usb_audio_set_feature+0x26>
				if (setup.bRequest==0x01) { // SET_CUR
    cfe2:	cmp	r3, #2
    cfe4:	bne.n	cfd6 <usb_audio_set_feature+0x6>
    cfe6:	cmp	r2, #1
    cfe8:	bne.n	cfd6 <usb_audio_set_feature+0x6>
					AudioInputUSB::features.volume = buf[0];
    cfea:	ldr	r3, [pc, #28]	; (d008 <usb_audio_set_feature+0x38>)
					return 1;
    cfec:	mov	r0, r2
					AudioInputUSB::features.volume = buf[0];
    cfee:	ldrb	r1, [r1, #0]
					AudioInputUSB::features.change = 1;
    cff0:	str	r2, [r3, #0]
					AudioInputUSB::features.volume = buf[0];
    cff2:	str	r1, [r3, #8]
					return 1;
    cff4:	bx	lr
				if (setup.bRequest==0x01) { // SET_CUR
    cff6:	cmp	r2, #1
    cff8:	bne.n	cfd6 <usb_audio_set_feature+0x6>
					AudioInputUSB::features.mute = buf[0]; // 1=mute,0=unmute
    cffa:	ldr	r3, [pc, #12]	; (d008 <usb_audio_set_feature+0x38>)
					return 1;
    cffc:	mov	r0, r2
					AudioInputUSB::features.mute = buf[0]; // 1=mute,0=unmute
    cffe:	ldrb	r1, [r1, #0]
					AudioInputUSB::features.change = 1;
    d000:	strd	r2, r1, [r3]
					return 1;
    d004:	bx	lr
    d006:	nop
    d008:	.word	0x20001478

0000d00c <Print::write(unsigned char const*, unsigned int)>:

#include "debug/printf.h"
#undef printf

size_t Print::write(const uint8_t *buffer, size_t size)
{
    d00c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (buffer == nullptr) return 0;
    d010:	mov	r4, r1
    d012:	cbz	r1, d04a <Print::write(unsigned char const*, unsigned int)+0x3e>
	size_t count = 0;
	while (size--) count += write(*buffer++);
    d014:	cbz	r2, d052 <Print::write(unsigned char const*, unsigned int)+0x46>
    d016:	mov	r8, r0
    d018:	adds	r6, r1, r2
	size_t count = 0;
    d01a:	movs	r5, #0
    d01c:	ldr	r7, [pc, #56]	; (d058 <Print::write(unsigned char const*, unsigned int)+0x4c>)
    d01e:	b.n	d02a <Print::write(unsigned char const*, unsigned int)+0x1e>
    d020:	bl	a820 <usb_serial_putchar>
	while (size--) count += write(*buffer++);
    d024:	cmp	r4, r6
    d026:	add	r5, r0
    d028:	beq.n	d044 <Print::write(unsigned char const*, unsigned int)+0x38>
    d02a:	ldr.w	r3, [r8]
    d02e:	ldrb.w	r0, [r4], #1
    d032:	ldr	r3, [r3, #0]
    d034:	cmp	r3, r7
    d036:	beq.n	d020 <Print::write(unsigned char const*, unsigned int)+0x14>
    d038:	mov	r1, r0
    d03a:	mov	r0, r8
    d03c:	blx	r3
    d03e:	cmp	r4, r6
    d040:	add	r5, r0
    d042:	bne.n	d02a <Print::write(unsigned char const*, unsigned int)+0x1e>
	return count;
}
    d044:	mov	r0, r5
    d046:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (buffer == nullptr) return 0;
    d04a:	mov	r5, r1
}
    d04c:	mov	r0, r5
    d04e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (buffer == nullptr) return 0;
    d052:	mov	r5, r2
    d054:	b.n	d044 <Print::write(unsigned char const*, unsigned int)+0x38>
    d056:	nop
    d058:	.word	0x0000c3c9

0000d05c <Print::println()>:
	if (n < 0) return printNumber64(-n, 10, 1);
	return printNumber64(n, 10, 0);
}

size_t Print::println(void)
{
    d05c:	push	{lr}
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    d05e:	ldr	r3, [r0, #0]
{
    d060:	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
    d062:	movw	ip, #2573	; 0xa0d
	return write(buf, 2);
    d066:	movs	r2, #2
    d068:	add	r1, sp, #4
    d06a:	ldr	r3, [r3, #4]
	uint8_t buf[2]={'\r', '\n'};
    d06c:	strh.w	ip, [sp, #4]
	return write(buf, 2);
    d070:	blx	r3
}
    d072:	add	sp, #12
    d074:	ldr.w	pc, [sp], #4

0000d078 <_write>:

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
	((class Print *)file)->write((uint8_t *)ptr, len);
    d078:	ldr	r3, [r0, #0]
{
    d07a:	push	{r4, lr}
    d07c:	mov	r4, r2
	((class Print *)file)->write((uint8_t *)ptr, len);
    d07e:	ldr	r3, [r3, #4]
    d080:	blx	r3
	return len;
}
    d082:	mov	r0, r4
    d084:	pop	{r4, pc}
    d086:	nop

0000d088 <Print::printf(char const*, ...)>:
}

int Print::printf(const char *format, ...)
{
    d088:	push	{r1, r2, r3}
    d08a:	push	{lr}
    d08c:	sub	sp, #8
    d08e:	add	r2, sp, #12
    d090:	ldr.w	r1, [r2], #4
	va_list ap;
	va_start(ap, format);
    d094:	str	r2, [sp, #4]
#ifdef __STRICT_ANSI__
	va_end(ap);
	return 0;  // TODO: make this work with -std=c++0x
#else
	int retval = vdprintf((int)this, format, ap);
    d096:	bl	de9c <vdprintf>
	va_end(ap);
	return retval;
#endif
}
    d09a:	add	sp, #8
    d09c:	ldr.w	lr, [sp], #4
    d0a0:	add	sp, #12
    d0a2:	bx	lr

0000d0a4 <serialEvent()>:

#include <Arduino.h>
void serialEvent() __attribute__((weak));
void serialEvent() {
}
    d0a4:	bx	lr
    d0a6:	nop

0000d0a8 <operator new(unsigned int)>:

#include <stdlib.h>

void * operator new(size_t size)
{
	return malloc(size);
    d0a8:	b.w	d240 <malloc>

0000d0ac <operator delete(void*, unsigned int)>:
	free(ptr);
}

void operator delete(void * ptr, size_t size)
{
	free(ptr);
    d0ac:	b.w	d250 <free>

0000d0b0 <ultoa>:
	int i=0, j;
    d0b0:	add.w	ip, r1, #4294967295
{
    d0b4:	push	{r4, r5, r6, lr}
		digit = val % radix;
    d0b6:	mov	r6, ip
	int i=0, j;
    d0b8:	movs	r4, #0
    d0ba:	b.n	d0be <ultoa+0xe>
		i++;
    d0bc:	adds	r4, #1
		digit = val % radix;
    d0be:	udiv	r5, r0, r2
    d0c2:	mls	r3, r2, r5, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    d0c6:	cmp	r3, #9
    d0c8:	add.w	lr, r3, #55	; 0x37
    d0cc:	add.w	r3, r3, #48	; 0x30
    d0d0:	uxtb.w	lr, lr
    d0d4:	it	ls
    d0d6:	uxtbls.w	lr, r3
		if (val == 0) break;
    d0da:	cmp	r0, r2
		val /= radix;
    d0dc:	mov	r0, r5
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    d0de:	strb.w	lr, [r6, #1]!
		if (val == 0) break;
    d0e2:	bcs.n	d0bc <ultoa+0xc>
	buf[i + 1] = 0;
    d0e4:	adds	r3, r4, #1
    d0e6:	movs	r2, #0
    d0e8:	adds	r0, r1, r3
    d0ea:	strb	r2, [r1, r3]
	for (j=0; j < i; j++, i--) {
    d0ec:	cbz	r4, d10e <ultoa+0x5e>
		t = buf[j];
    d0ee:	mov	r2, ip
    d0f0:	ldrb.w	r5, [ip, #1]!
		buf[j] = buf[i];
    d0f4:	ldrb.w	r6, [r0, #-1]!
	for (j=0; j < i; j++, i--) {
    d0f8:	sub.w	r3, r1, ip
    d0fc:	adds	r2, #2
		buf[j] = buf[i];
    d0fe:	strb.w	r6, [ip]
	for (j=0; j < i; j++, i--) {
    d102:	subs	r3, #1
    d104:	subs	r2, r2, r1
		buf[i] = t;
    d106:	strb	r5, [r0, #0]
	for (j=0; j < i; j++, i--) {
    d108:	add	r3, r4
    d10a:	cmp	r2, r3
    d10c:	blt.n	d0ee <ultoa+0x3e>
}
    d10e:	mov	r0, r1
    d110:	pop	{r4, r5, r6, pc}
    d112:	nop

0000d114 <pit_isr()>:

//FASTRUN
static void pit_isr()
{
    d114:	push	{r4, lr}

		}
	}
#else
	IMXRT_PIT_CHANNEL_t *channel= IMXRT_PIT_CHANNELS;
	if (funct_table[0] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[0]();}
    d116:	ldr	r4, [pc, #76]	; (d164 <pit_isr()+0x50>)
    d118:	ldr	r3, [r4, #0]
    d11a:	cbz	r3, d122 <pit_isr()+0xe>
    d11c:	ldr	r2, [pc, #72]	; (d168 <pit_isr()+0x54>)
    d11e:	ldr	r1, [r2, #12]
    d120:	cbnz	r1, d15c <pit_isr()+0x48>
	channel++;
	if (funct_table[1] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[1]();}
    d122:	ldr	r3, [r4, #4]
    d124:	cbz	r3, d12c <pit_isr()+0x18>
    d126:	ldr	r2, [pc, #64]	; (d168 <pit_isr()+0x54>)
    d128:	ldr	r1, [r2, #28]
    d12a:	cbnz	r1, d154 <pit_isr()+0x40>
	channel++;
	if (funct_table[2] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[2]();}
    d12c:	ldr	r3, [r4, #8]
    d12e:	cbz	r3, d136 <pit_isr()+0x22>
    d130:	ldr	r2, [pc, #52]	; (d168 <pit_isr()+0x54>)
    d132:	ldr	r1, [r2, #44]	; 0x2c
    d134:	cbnz	r1, d14c <pit_isr()+0x38>
	channel++;
	if (funct_table[3] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[3]();}
    d136:	ldr	r3, [r4, #12]
    d138:	cbz	r3, d14a <pit_isr()+0x36>
    d13a:	ldr	r2, [pc, #44]	; (d168 <pit_isr()+0x54>)
    d13c:	ldr	r1, [r2, #60]	; 0x3c
    d13e:	cbz	r1, d14a <pit_isr()+0x36>
    d140:	movs	r1, #1
#endif
}
    d142:	ldmia.w	sp!, {r4, lr}
	if (funct_table[3] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[3]();}
    d146:	str	r1, [r2, #60]	; 0x3c
    d148:	bx	r3
}
    d14a:	pop	{r4, pc}
	if (funct_table[2] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[2]();}
    d14c:	movs	r1, #1
    d14e:	str	r1, [r2, #44]	; 0x2c
    d150:	blx	r3
    d152:	b.n	d136 <pit_isr()+0x22>
	if (funct_table[1] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[1]();}
    d154:	movs	r1, #1
    d156:	str	r1, [r2, #28]
    d158:	blx	r3
    d15a:	b.n	d12c <pit_isr()+0x18>
	if (funct_table[0] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[0]();}
    d15c:	movs	r1, #1
    d15e:	str	r1, [r2, #12]
    d160:	blx	r3
    d162:	b.n	d122 <pit_isr()+0xe>
    d164:	.word	0x20001ec0
    d168:	.word	0x40084100

0000d16c <IntervalTimer::beginCycles(void (*)(), unsigned long)>:
	if (channel) {
    d16c:	ldr	r3, [r0, #0]
{
    d16e:	mov	ip, r0
    d170:	push	{r4}
	if (channel) {
    d172:	cbz	r3, d1d2 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0x66>
		channel->TCTRL = 0;
    d174:	movs	r0, #0
    d176:	str	r0, [r3, #8]
		channel->TFLG = 1;
    d178:	movs	r0, #1
    d17a:	str	r0, [r3, #12]
	channel->LDVAL = cycles;
    d17c:	str	r2, [r3, #0]
	int index = channel - IMXRT_PIT_CHANNELS;
    d17e:	ldr	r2, [pc, #140]	; (d20c <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xa0>)
	funct_table[index] = funct;
    d180:	ldr	r0, [pc, #140]	; (d210 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xa4>)
	int index = channel - IMXRT_PIT_CHANNELS;
    d182:	add	r2, r3
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
    d184:	ldr	r4, [pc, #140]	; (d214 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xa8>)
    d186:	asrs	r2, r2, #4
	funct_table[index] = funct;
    d188:	str.w	r1, [r0, r2, lsl #2]
	channel->TCTRL = 3;
    d18c:	movs	r0, #3
	nvic_priorites[index] = nvic_priority;
    d18e:	ldr	r1, [pc, #136]	; (d218 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xac>)
	channel->TCTRL = 3;
    d190:	str	r0, [r3, #8]
	nvic_priorites[index] = nvic_priority;
    d192:	ldrb.w	r3, [ip, #4]
    d196:	ldr	r0, [pc, #132]	; (d21c <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xb0>)
    d198:	strb	r3, [r1, r2]
		if (top_priority > nvic_priorites[i]) top_priority = nvic_priorites[i];
    d19a:	ldrb	r3, [r1, #0]
    d19c:	ldrb	r2, [r1, #1]
    d19e:	str.w	r4, [r0, #552]	; 0x228
    d1a2:	cmp	r3, r2
    d1a4:	ldrb	r0, [r1, #2]
    d1a6:	it	cs
    d1a8:	movcs	r3, r2
    d1aa:	ldrb	r2, [r1, #3]
    d1ac:	cmp	r3, r0
    d1ae:	it	cs
    d1b0:	movcs	r3, r0
    d1b2:	cmp	r3, r2
    d1b4:	it	cs
    d1b6:	movcs	r3, r2
	NVIC_SET_PRIORITY(IRQ_PIT, top_priority);
    d1b8:	ldr	r4, [pc, #100]	; (d220 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xb4>)
	NVIC_ENABLE_IRQ(IRQ_PIT);
    d1ba:	mov.w	r2, #3758153728	; 0xe000e000
    d1be:	mov.w	r1, #67108864	; 0x4000000
	return true;
    d1c2:	movs	r0, #1
	NVIC_SET_PRIORITY(IRQ_PIT, top_priority);
    d1c4:	strb.w	r3, [r4, #122]	; 0x7a
}
    d1c8:	ldr.w	r4, [sp], #4
	NVIC_ENABLE_IRQ(IRQ_PIT);
    d1cc:	str.w	r1, [r2, #268]	; 0x10c
}
    d1d0:	bx	lr
		CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    d1d2:	ldr	r0, [pc, #80]	; (d224 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xb8>)
			if (++channel >= IMXRT_PIT_CHANNELS + NUM_CHANNELS) {
    d1d4:	ldr	r4, [pc, #80]	; (d228 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xbc>)
		CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    d1d6:	ldr	r3, [r0, #108]	; 0x6c
    d1d8:	orr.w	r3, r3, #12288	; 0x3000
    d1dc:	str	r3, [r0, #108]	; 0x6c
		PIT_MCR = 1;
    d1de:	movs	r0, #1
    d1e0:	ldr	r3, [pc, #72]	; (d22c <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xc0>)
    d1e2:	str	r0, [r3, #0]
		channel = IMXRT_PIT_CHANNELS;
    d1e4:	ldr	r0, [pc, #72]	; (d230 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xc4>)
    d1e6:	mov	r3, r0
    d1e8:	str.w	r0, [ip]
			if (channel->TCTRL == 0) break;
    d1ec:	ldr	r0, [r3, #8]
    d1ee:	cmp	r0, #0
    d1f0:	beq.n	d17c <IntervalTimer::beginCycles(void (*)(), unsigned long)+0x10>
			if (++channel >= IMXRT_PIT_CHANNELS + NUM_CHANNELS) {
    d1f2:	adds	r3, #16
    d1f4:	cmp	r3, r4
    d1f6:	str.w	r3, [ip]
    d1fa:	bne.n	d1ec <IntervalTimer::beginCycles(void (*)(), unsigned long)+0x80>
				channel = NULL;
    d1fc:	movs	r3, #0
}
    d1fe:	ldr.w	r4, [sp], #4
				return false;
    d202:	mov	r0, r3
				channel = NULL;
    d204:	str.w	r3, [ip]
}
    d208:	bx	lr
    d20a:	nop
    d20c:	.word	0xbff7bf00
    d210:	.word	0x20001ec0
    d214:	.word	0x0000d115
    d218:	.word	0x20001484
    d21c:	.word	0x20001c00
    d220:	.word	0xe000e400
    d224:	.word	0x400fc000
    d228:	.word	0x40084140
    d22c:	.word	0x40084000
    d230:	.word	0x40084100

0000d234 <__aeabi_atexit>:
    d234:	mov	r3, r0
    d236:	mov	r0, r1
    d238:	mov	r1, r3
    d23a:	b.w	dbb0 <__cxa_atexit>
    d23e:	nop

0000d240 <malloc>:
    d240:	ldr	r3, [pc, #8]	; (d24c <malloc+0xc>)
    d242:	mov	r1, r0
    d244:	ldr	r0, [r3, #0]
    d246:	b.w	d260 <_malloc_r>
    d24a:	nop
    d24c:	.word	0x20001a24

0000d250 <free>:
    d250:	ldr	r3, [pc, #8]	; (d25c <free+0xc>)
    d252:	mov	r1, r0
    d254:	ldr	r0, [r3, #0]
    d256:	b.w	e604 <_free_r>
    d25a:	nop
    d25c:	.word	0x20001a24

0000d260 <_malloc_r>:
    d260:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d264:	add.w	r6, r1, #11
    d268:	cmp	r6, #22
    d26a:	sub	sp, #12
    d26c:	mov	r4, r0
    d26e:	bhi.n	d2ba <_malloc_r+0x5a>
    d270:	cmp	r1, #16
    d272:	bhi.w	d3ea <_malloc_r+0x18a>
    d276:	bl	d7c0 <__malloc_lock>
    d27a:	movs	r6, #16
    d27c:	movs	r2, #24
    d27e:	movs	r0, #2
    d280:	ldr	r7, [pc, #724]	; (d558 <_malloc_r+0x2f8>)
    d282:	add	r2, r7
    d284:	sub.w	r1, r2, #8
    d288:	ldr	r3, [r2, #4]
    d28a:	cmp	r3, r1
    d28c:	beq.w	d404 <_malloc_r+0x1a4>
    d290:	ldr	r2, [r3, #4]
    d292:	ldr	r1, [r3, #12]
    d294:	bic.w	r2, r2, #3
    d298:	add	r2, r3
    d29a:	ldr	r5, [r3, #8]
    d29c:	str	r1, [r5, #12]
    d29e:	str	r5, [r1, #8]
    d2a0:	ldr	r1, [r2, #4]
    d2a2:	orr.w	r1, r1, #1
    d2a6:	mov	r0, r4
    d2a8:	str	r1, [r2, #4]
    d2aa:	add.w	r5, r3, #8
    d2ae:	bl	d7cc <__malloc_unlock>
    d2b2:	mov	r0, r5
    d2b4:	add	sp, #12
    d2b6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d2ba:	bics.w	r6, r6, #7
    d2be:	bmi.w	d3ea <_malloc_r+0x18a>
    d2c2:	cmp	r1, r6
    d2c4:	bhi.w	d3ea <_malloc_r+0x18a>
    d2c8:	bl	d7c0 <__malloc_lock>
    d2cc:	cmp.w	r6, #504	; 0x1f8
    d2d0:	bcc.w	d608 <_malloc_r+0x3a8>
    d2d4:	lsrs	r3, r6, #9
    d2d6:	beq.w	d3f8 <_malloc_r+0x198>
    d2da:	cmp	r3, #4
    d2dc:	bhi.w	d5be <_malloc_r+0x35e>
    d2e0:	lsrs	r3, r6, #6
    d2e2:	add.w	r0, r3, #57	; 0x39
    d2e6:	add.w	ip, r3, #56	; 0x38
    d2ea:	lsls	r3, r0, #3
    d2ec:	ldr	r7, [pc, #616]	; (d558 <_malloc_r+0x2f8>)
    d2ee:	add	r3, r7
    d2f0:	sub.w	r5, r3, #8
    d2f4:	ldr	r3, [r3, #4]
    d2f6:	cmp	r5, r3
    d2f8:	bne.n	d308 <_malloc_r+0xa8>
    d2fa:	b.n	d316 <_malloc_r+0xb6>
    d2fc:	cmp	r1, #0
    d2fe:	bge.w	d550 <_malloc_r+0x2f0>
    d302:	ldr	r3, [r3, #12]
    d304:	cmp	r5, r3
    d306:	beq.n	d316 <_malloc_r+0xb6>
    d308:	ldr	r2, [r3, #4]
    d30a:	bic.w	r2, r2, #3
    d30e:	subs	r1, r2, r6
    d310:	cmp	r1, #15
    d312:	ble.n	d2fc <_malloc_r+0x9c>
    d314:	mov	r0, ip
    d316:	ldr	r5, [r7, #16]
    d318:	ldr.w	ip, [pc, #592]	; d56c <_malloc_r+0x30c>
    d31c:	cmp	r5, ip
    d31e:	beq.n	d41a <_malloc_r+0x1ba>
    d320:	ldr	r2, [r5, #4]
    d322:	bic.w	r2, r2, #3
    d326:	subs	r3, r2, r6
    d328:	cmp	r3, #15
    d32a:	bgt.w	d624 <_malloc_r+0x3c4>
    d32e:	cmp	r3, #0
    d330:	strd	ip, ip, [r7, #16]
    d334:	bge.w	d610 <_malloc_r+0x3b0>
    d338:	cmp.w	r2, #512	; 0x200
    d33c:	bcs.w	d574 <_malloc_r+0x314>
    d340:	lsrs	r3, r2, #3
    d342:	ldr	r1, [r7, #4]
    d344:	adds	r3, #1
    d346:	mov.w	lr, r2, lsr #5
    d34a:	movs	r2, #1
    d34c:	lsl.w	r2, r2, lr
    d350:	orrs	r2, r1
    d352:	ldr.w	lr, [r7, r3, lsl #3]
    d356:	str.w	lr, [r5, #8]
    d35a:	add.w	r1, r7, r3, lsl #3
    d35e:	subs	r1, #8
    d360:	str	r1, [r5, #12]
    d362:	str	r2, [r7, #4]
    d364:	str.w	r5, [r7, r3, lsl #3]
    d368:	str.w	r5, [lr, #12]
    d36c:	asrs	r3, r0, #2
    d36e:	movs	r1, #1
    d370:	lsls	r1, r3
    d372:	cmp	r1, r2
    d374:	bhi.n	d426 <_malloc_r+0x1c6>
    d376:	tst	r1, r2
    d378:	bne.n	d388 <_malloc_r+0x128>
    d37a:	bic.w	r0, r0, #3
    d37e:	lsls	r1, r1, #1
    d380:	tst	r1, r2
    d382:	add.w	r0, r0, #4
    d386:	beq.n	d37e <_malloc_r+0x11e>
    d388:	add.w	r9, r7, r0, lsl #3
    d38c:	mov	r5, r9
    d38e:	mov	lr, r0
    d390:	ldr.w	r8, [r5, #12]
    d394:	cmp	r5, r8
    d396:	bne.n	d3aa <_malloc_r+0x14a>
    d398:	b.n	d5d6 <_malloc_r+0x376>
    d39a:	cmp	r3, #0
    d39c:	bge.w	d5e8 <_malloc_r+0x388>
    d3a0:	ldr.w	r8, [r8, #12]
    d3a4:	cmp	r5, r8
    d3a6:	beq.w	d5d6 <_malloc_r+0x376>
    d3aa:	ldr.w	r2, [r8, #4]
    d3ae:	bic.w	r2, r2, #3
    d3b2:	subs	r3, r2, r6
    d3b4:	cmp	r3, #15
    d3b6:	ble.n	d39a <_malloc_r+0x13a>
    d3b8:	mov	r0, r4
    d3ba:	ldrd	r5, r4, [r8, #8]
    d3be:	add.w	r1, r8, r6
    d3c2:	orr.w	r6, r6, #1
    d3c6:	str.w	r6, [r8, #4]
    d3ca:	str	r4, [r5, #12]
    d3cc:	str	r5, [r4, #8]
    d3ce:	orr.w	r4, r3, #1
    d3d2:	strd	r1, r1, [r7, #16]
    d3d6:	strd	ip, ip, [r1, #8]
    d3da:	str	r4, [r1, #4]
    d3dc:	str.w	r3, [r8, r2]
    d3e0:	bl	d7cc <__malloc_unlock>
    d3e4:	add.w	r5, r8, #8
    d3e8:	b.n	d3f0 <_malloc_r+0x190>
    d3ea:	movs	r3, #12
    d3ec:	str	r3, [r4, #0]
    d3ee:	movs	r5, #0
    d3f0:	mov	r0, r5
    d3f2:	add	sp, #12
    d3f4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d3f8:	mov.w	r3, #512	; 0x200
    d3fc:	movs	r0, #64	; 0x40
    d3fe:	mov.w	ip, #63	; 0x3f
    d402:	b.n	d2ec <_malloc_r+0x8c>
    d404:	ldr	r3, [r2, #12]
    d406:	cmp	r2, r3
    d408:	it	eq
    d40a:	addeq	r0, #2
    d40c:	bne.w	d290 <_malloc_r+0x30>
    d410:	ldr	r5, [r7, #16]
    d412:	ldr.w	ip, [pc, #344]	; d56c <_malloc_r+0x30c>
    d416:	cmp	r5, ip
    d418:	bne.n	d320 <_malloc_r+0xc0>
    d41a:	ldr	r2, [r7, #4]
    d41c:	asrs	r3, r0, #2
    d41e:	movs	r1, #1
    d420:	lsls	r1, r3
    d422:	cmp	r1, r2
    d424:	bls.n	d376 <_malloc_r+0x116>
    d426:	ldr	r5, [r7, #8]
    d428:	ldr	r3, [r5, #4]
    d42a:	bic.w	r9, r3, #3
    d42e:	cmp	r6, r9
    d430:	bhi.n	d43a <_malloc_r+0x1da>
    d432:	sub.w	r3, r9, r6
    d436:	cmp	r3, #15
    d438:	bgt.n	d530 <_malloc_r+0x2d0>
    d43a:	ldr.w	fp, [pc, #308]	; d570 <_malloc_r+0x310>
    d43e:	ldr	r3, [pc, #284]	; (d55c <_malloc_r+0x2fc>)
    d440:	ldr.w	r2, [fp]
    d444:	ldr	r3, [r3, #0]
    d446:	adds	r2, #1
    d448:	add	r3, r6
    d44a:	add.w	sl, r5, r9
    d44e:	beq.w	d6b8 <_malloc_r+0x458>
    d452:	add.w	r3, r3, #4096	; 0x1000
    d456:	adds	r3, #15
    d458:	bic.w	r8, r3, #4080	; 0xff0
    d45c:	bic.w	r8, r8, #15
    d460:	mov	r1, r8
    d462:	mov	r0, r4
    d464:	bl	e290 <_sbrk_r>
    d468:	adds	r1, r0, #1
    d46a:	mov	r2, r0
    d46c:	beq.w	d656 <_malloc_r+0x3f6>
    d470:	cmp	sl, r0
    d472:	bhi.w	d652 <_malloc_r+0x3f2>
    d476:	ldr	r3, [pc, #232]	; (d560 <_malloc_r+0x300>)
    d478:	ldr	r1, [r3, #0]
    d47a:	add	r1, r8
    d47c:	str	r1, [r3, #0]
    d47e:	mov	r0, r1
    d480:	beq.w	d720 <_malloc_r+0x4c0>
    d484:	ldr.w	r1, [fp]
    d488:	str	r3, [sp, #4]
    d48a:	adds	r1, #1
    d48c:	ittet	ne
    d48e:	subne.w	r1, r2, sl
    d492:	addne	r1, r1, r0
    d494:	streq.w	r2, [fp]
    d498:	strne	r1, [r3, #0]
    d49a:	ands.w	fp, r2, #7
    d49e:	beq.w	d6d0 <_malloc_r+0x470>
    d4a2:	rsb	r1, fp, #8
    d4a6:	add	r2, r1
    d4a8:	rsb	r1, fp, #4096	; 0x1000
    d4ac:	add	r8, r2
    d4ae:	adds	r1, #8
    d4b0:	sub.w	r1, r1, r8
    d4b4:	ubfx	sl, r1, #0, #12
    d4b8:	mov	r1, sl
    d4ba:	mov	r0, r4
    d4bc:	str	r2, [sp, #0]
    d4be:	bl	e290 <_sbrk_r>
    d4c2:	adds	r2, r0, #1
    d4c4:	ldrd	r2, r3, [sp]
    d4c8:	beq.w	d76a <_malloc_r+0x50a>
    d4cc:	subs	r0, r0, r2
    d4ce:	add.w	r8, r0, sl
    d4d2:	ldr	r1, [r3, #0]
    d4d4:	str	r2, [r7, #8]
    d4d6:	orr.w	r0, r8, #1
    d4da:	add	r1, sl
    d4dc:	cmp	r5, r7
    d4de:	str	r0, [r2, #4]
    d4e0:	str	r1, [r3, #0]
    d4e2:	beq.w	d738 <_malloc_r+0x4d8>
    d4e6:	cmp.w	r9, #15
    d4ea:	bls.w	d73c <_malloc_r+0x4dc>
    d4ee:	ldr	r0, [r5, #4]
    d4f0:	sub.w	ip, r9, #12
    d4f4:	bic.w	ip, ip, #7
    d4f8:	and.w	r0, r0, #1
    d4fc:	orr.w	r0, r0, ip
    d500:	str	r0, [r5, #4]
    d502:	mov.w	lr, #5
    d506:	add.w	r0, r5, ip
    d50a:	cmp.w	ip, #15
    d50e:	strd	lr, lr, [r0, #4]
    d512:	bhi.w	d77a <_malloc_r+0x51a>
    d516:	ldr	r0, [r2, #4]
    d518:	mov	r5, r2
    d51a:	ldr	r3, [pc, #72]	; (d564 <_malloc_r+0x304>)
    d51c:	ldr	r2, [r3, #0]
    d51e:	cmp	r2, r1
    d520:	it	cc
    d522:	strcc	r1, [r3, #0]
    d524:	ldr	r3, [pc, #64]	; (d568 <_malloc_r+0x308>)
    d526:	ldr	r2, [r3, #0]
    d528:	cmp	r2, r1
    d52a:	it	cc
    d52c:	strcc	r1, [r3, #0]
    d52e:	b.n	d65a <_malloc_r+0x3fa>
    d530:	adds	r2, r5, r6
    d532:	orr.w	r3, r3, #1
    d536:	orr.w	r6, r6, #1
    d53a:	str	r6, [r5, #4]
    d53c:	mov	r0, r4
    d53e:	str	r2, [r7, #8]
    d540:	str	r3, [r2, #4]
    d542:	bl	d7cc <__malloc_unlock>
    d546:	adds	r5, #8
    d548:	mov	r0, r5
    d54a:	add	sp, #12
    d54c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d550:	ldr	r1, [r3, #12]
    d552:	add	r2, r3
    d554:	b.n	d29a <_malloc_r+0x3a>
    d556:	nop
    d558:	.word	0x20001608
    d55c:	.word	0x200067a8
    d560:	.word	0x20006778
    d564:	.word	0x200067a0
    d568:	.word	0x200067a4
    d56c:	.word	0x20001610
    d570:	.word	0x20001a10
    d574:	cmp.w	r2, #2560	; 0xa00
    d578:	mov.w	r3, r2, lsr #9
    d57c:	bcc.n	d646 <_malloc_r+0x3e6>
    d57e:	cmp	r3, #20
    d580:	bhi.w	d6f2 <_malloc_r+0x492>
    d584:	add.w	r1, r3, #92	; 0x5c
    d588:	lsls	r1, r1, #3
    d58a:	adds	r3, #91	; 0x5b
    d58c:	add.w	lr, r7, r1
    d590:	ldr	r1, [r7, r1]
    d592:	sub.w	lr, lr, #8
    d596:	cmp	lr, r1
    d598:	beq.w	d6be <_malloc_r+0x45e>
    d59c:	ldr	r3, [r1, #4]
    d59e:	bic.w	r3, r3, #3
    d5a2:	cmp	r3, r2
    d5a4:	bls.n	d5ac <_malloc_r+0x34c>
    d5a6:	ldr	r1, [r1, #8]
    d5a8:	cmp	lr, r1
    d5aa:	bne.n	d59c <_malloc_r+0x33c>
    d5ac:	ldr.w	lr, [r1, #12]
    d5b0:	ldr	r2, [r7, #4]
    d5b2:	strd	r1, lr, [r5, #8]
    d5b6:	str.w	r5, [lr, #8]
    d5ba:	str	r5, [r1, #12]
    d5bc:	b.n	d36c <_malloc_r+0x10c>
    d5be:	cmp	r3, #20
    d5c0:	bls.n	d676 <_malloc_r+0x416>
    d5c2:	cmp	r3, #84	; 0x54
    d5c4:	bhi.w	d702 <_malloc_r+0x4a2>
    d5c8:	lsrs	r3, r6, #12
    d5ca:	add.w	r0, r3, #111	; 0x6f
    d5ce:	add.w	ip, r3, #110	; 0x6e
    d5d2:	lsls	r3, r0, #3
    d5d4:	b.n	d2ec <_malloc_r+0x8c>
    d5d6:	add.w	lr, lr, #1
    d5da:	tst.w	lr, #3
    d5de:	add.w	r5, r5, #8
    d5e2:	bne.w	d390 <_malloc_r+0x130>
    d5e6:	b.n	d68c <_malloc_r+0x42c>
    d5e8:	add	r2, r8
    d5ea:	mov	r5, r8
    d5ec:	ldr	r3, [r2, #4]
    d5ee:	ldr.w	r1, [r8, #12]
    d5f2:	orr.w	r3, r3, #1
    d5f6:	str	r3, [r2, #4]
    d5f8:	ldr.w	r3, [r5, #8]!
    d5fc:	mov	r0, r4
    d5fe:	str	r1, [r3, #12]
    d600:	str	r3, [r1, #8]
    d602:	bl	d7cc <__malloc_unlock>
    d606:	b.n	d3f0 <_malloc_r+0x190>
    d608:	lsrs	r0, r6, #3
    d60a:	add.w	r2, r6, #8
    d60e:	b.n	d280 <_malloc_r+0x20>
    d610:	add	r2, r5
    d612:	mov	r0, r4
    d614:	ldr	r3, [r2, #4]
    d616:	orr.w	r3, r3, #1
    d61a:	str	r3, [r2, #4]
    d61c:	adds	r5, #8
    d61e:	bl	d7cc <__malloc_unlock>
    d622:	b.n	d3f0 <_malloc_r+0x190>
    d624:	adds	r1, r5, r6
    d626:	mov	r0, r4
    d628:	orr.w	r6, r6, #1
    d62c:	orr.w	r4, r3, #1
    d630:	str	r6, [r5, #4]
    d632:	strd	r1, r1, [r7, #16]
    d636:	strd	ip, ip, [r1, #8]
    d63a:	str	r4, [r1, #4]
    d63c:	str	r3, [r5, r2]
    d63e:	bl	d7cc <__malloc_unlock>
    d642:	adds	r5, #8
    d644:	b.n	d3f0 <_malloc_r+0x190>
    d646:	lsrs	r3, r2, #6
    d648:	add.w	r1, r3, #57	; 0x39
    d64c:	lsls	r1, r1, #3
    d64e:	adds	r3, #56	; 0x38
    d650:	b.n	d58c <_malloc_r+0x32c>
    d652:	cmp	r5, r7
    d654:	beq.n	d716 <_malloc_r+0x4b6>
    d656:	ldr	r5, [r7, #8]
    d658:	ldr	r0, [r5, #4]
    d65a:	bic.w	r8, r0, #3
    d65e:	cmp	r6, r8
    d660:	sub.w	r3, r8, r6
    d664:	bhi.n	d66c <_malloc_r+0x40c>
    d666:	cmp	r3, #15
    d668:	bgt.w	d530 <_malloc_r+0x2d0>
    d66c:	mov	r0, r4
    d66e:	bl	d7cc <__malloc_unlock>
    d672:	movs	r5, #0
    d674:	b.n	d3f0 <_malloc_r+0x190>
    d676:	add.w	r0, r3, #92	; 0x5c
    d67a:	add.w	ip, r3, #91	; 0x5b
    d67e:	lsls	r3, r0, #3
    d680:	b.n	d2ec <_malloc_r+0x8c>
    d682:	ldr.w	r3, [r9], #-8
    d686:	cmp	r3, r9
    d688:	bne.w	d7b8 <_malloc_r+0x558>
    d68c:	tst.w	r0, #3
    d690:	add.w	r0, r0, #4294967295
    d694:	bne.n	d682 <_malloc_r+0x422>
    d696:	ldr	r3, [r7, #4]
    d698:	bic.w	r3, r3, r1
    d69c:	str	r3, [r7, #4]
    d69e:	lsls	r1, r1, #1
    d6a0:	cmp	r1, r3
    d6a2:	bhi.w	d426 <_malloc_r+0x1c6>
    d6a6:	cbnz	r1, d6b0 <_malloc_r+0x450>
    d6a8:	b.n	d426 <_malloc_r+0x1c6>
    d6aa:	lsls	r1, r1, #1
    d6ac:	add.w	lr, lr, #4
    d6b0:	tst	r1, r3
    d6b2:	beq.n	d6aa <_malloc_r+0x44a>
    d6b4:	mov	r0, lr
    d6b6:	b.n	d388 <_malloc_r+0x128>
    d6b8:	add.w	r8, r3, #16
    d6bc:	b.n	d460 <_malloc_r+0x200>
    d6be:	asrs	r2, r3, #2
    d6c0:	mov.w	r8, #1
    d6c4:	ldr	r3, [r7, #4]
    d6c6:	lsl.w	r2, r8, r2
    d6ca:	orrs	r2, r3
    d6cc:	str	r2, [r7, #4]
    d6ce:	b.n	d5b2 <_malloc_r+0x352>
    d6d0:	add.w	r1, r2, r8
    d6d4:	negs	r1, r1
    d6d6:	ubfx	sl, r1, #0, #12
    d6da:	mov	r1, sl
    d6dc:	mov	r0, r4
    d6de:	str	r2, [sp, #0]
    d6e0:	bl	e290 <_sbrk_r>
    d6e4:	adds	r3, r0, #1
    d6e6:	ldrd	r2, r3, [sp]
    d6ea:	bne.w	d4cc <_malloc_r+0x26c>
    d6ee:	mov	sl, fp
    d6f0:	b.n	d4d2 <_malloc_r+0x272>
    d6f2:	cmp	r3, #84	; 0x54
    d6f4:	bhi.n	d742 <_malloc_r+0x4e2>
    d6f6:	lsrs	r3, r2, #12
    d6f8:	add.w	r1, r3, #111	; 0x6f
    d6fc:	lsls	r1, r1, #3
    d6fe:	adds	r3, #110	; 0x6e
    d700:	b.n	d58c <_malloc_r+0x32c>
    d702:	cmp.w	r3, #340	; 0x154
    d706:	bhi.n	d754 <_malloc_r+0x4f4>
    d708:	lsrs	r3, r6, #15
    d70a:	add.w	r0, r3, #120	; 0x78
    d70e:	add.w	ip, r3, #119	; 0x77
    d712:	lsls	r3, r0, #3
    d714:	b.n	d2ec <_malloc_r+0x8c>
    d716:	ldr	r3, [pc, #164]	; (d7bc <_malloc_r+0x55c>)
    d718:	ldr	r0, [r3, #0]
    d71a:	add	r0, r8
    d71c:	str	r0, [r3, #0]
    d71e:	b.n	d484 <_malloc_r+0x224>
    d720:	ubfx	ip, sl, #0, #12
    d724:	cmp.w	ip, #0
    d728:	bne.w	d484 <_malloc_r+0x224>
    d72c:	ldr	r5, [r7, #8]
    d72e:	add	r8, r9
    d730:	orr.w	r0, r8, #1
    d734:	str	r0, [r5, #4]
    d736:	b.n	d51a <_malloc_r+0x2ba>
    d738:	mov	r5, r2
    d73a:	b.n	d51a <_malloc_r+0x2ba>
    d73c:	movs	r3, #1
    d73e:	str	r3, [r2, #4]
    d740:	b.n	d66c <_malloc_r+0x40c>
    d742:	cmp.w	r3, #340	; 0x154
    d746:	bhi.n	d790 <_malloc_r+0x530>
    d748:	lsrs	r3, r2, #15
    d74a:	add.w	r1, r3, #120	; 0x78
    d74e:	lsls	r1, r1, #3
    d750:	adds	r3, #119	; 0x77
    d752:	b.n	d58c <_malloc_r+0x32c>
    d754:	movw	r2, #1364	; 0x554
    d758:	cmp	r3, r2
    d75a:	bhi.n	d7a4 <_malloc_r+0x544>
    d75c:	lsrs	r3, r6, #18
    d75e:	add.w	r0, r3, #125	; 0x7d
    d762:	add.w	ip, r3, #124	; 0x7c
    d766:	lsls	r3, r0, #3
    d768:	b.n	d2ec <_malloc_r+0x8c>
    d76a:	sub.w	fp, fp, #8
    d76e:	add	r8, fp
    d770:	sub.w	r8, r8, r2
    d774:	mov.w	sl, #0
    d778:	b.n	d4d2 <_malloc_r+0x272>
    d77a:	add.w	r1, r5, #8
    d77e:	mov	r0, r4
    d780:	str	r3, [sp, #0]
    d782:	bl	e604 <_free_r>
    d786:	ldr	r5, [r7, #8]
    d788:	ldr	r3, [sp, #0]
    d78a:	ldr	r0, [r5, #4]
    d78c:	ldr	r1, [r3, #0]
    d78e:	b.n	d51a <_malloc_r+0x2ba>
    d790:	movw	r1, #1364	; 0x554
    d794:	cmp	r3, r1
    d796:	bhi.n	d7b0 <_malloc_r+0x550>
    d798:	lsrs	r3, r2, #18
    d79a:	add.w	r1, r3, #125	; 0x7d
    d79e:	lsls	r1, r1, #3
    d7a0:	adds	r3, #124	; 0x7c
    d7a2:	b.n	d58c <_malloc_r+0x32c>
    d7a4:	mov.w	r3, #1016	; 0x3f8
    d7a8:	movs	r0, #127	; 0x7f
    d7aa:	mov.w	ip, #126	; 0x7e
    d7ae:	b.n	d2ec <_malloc_r+0x8c>
    d7b0:	mov.w	r1, #1016	; 0x3f8
    d7b4:	movs	r3, #126	; 0x7e
    d7b6:	b.n	d58c <_malloc_r+0x32c>
    d7b8:	ldr	r3, [r7, #4]
    d7ba:	b.n	d69e <_malloc_r+0x43e>
    d7bc:	.word	0x20006778

0000d7c0 <__malloc_lock>:
    d7c0:	ldr	r0, [pc, #4]	; (d7c8 <__malloc_lock+0x8>)
    d7c2:	b.w	e33c <__retarget_lock_acquire_recursive>
    d7c6:	nop
    d7c8:	.word	0x20006770

0000d7cc <__malloc_unlock>:
    d7cc:	ldr	r0, [pc, #4]	; (d7d4 <__malloc_unlock+0x8>)
    d7ce:	b.w	e340 <__retarget_lock_release_recursive>
    d7d2:	nop
    d7d4:	.word	0x20006770

0000d7d8 <_realloc_r>:
    d7d8:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d7dc:	mov	r7, r2
    d7de:	cmp	r1, #0
    d7e0:	beq.w	d914 <_realloc_r+0x13c>
    d7e4:	mov	r4, r1
    d7e6:	add.w	r5, r7, #11
    d7ea:	mov	r8, r0
    d7ec:	bl	d7c0 <__malloc_lock>
    d7f0:	cmp	r5, #22
    d7f2:	ldr.w	r1, [r4, #-4]
    d7f6:	bhi.n	d8b0 <_realloc_r+0xd8>
    d7f8:	movs	r5, #16
    d7fa:	mov	r2, r5
    d7fc:	cmp	r7, r5
    d7fe:	bhi.n	d8ba <_realloc_r+0xe2>
    d800:	bic.w	r6, r1, #3
    d804:	cmp	r6, r2
    d806:	sub.w	r9, r4, #8
    d80a:	bge.n	d8d2 <_realloc_r+0xfa>
    d80c:	ldr	r3, [pc, #752]	; (db00 <_realloc_r+0x328>)
    d80e:	ldr.w	ip, [r3, #8]
    d812:	add.w	r0, r9, r6
    d816:	cmp	ip, r0
    d818:	beq.w	d94a <_realloc_r+0x172>
    d81c:	ldr.w	ip, [r0, #4]
    d820:	bic.w	r3, ip, #1
    d824:	add	r3, r0
    d826:	ldr	r3, [r3, #4]
    d828:	lsls	r3, r3, #31
    d82a:	bmi.n	d8fe <_realloc_r+0x126>
    d82c:	bic.w	ip, ip, #3
    d830:	add.w	r3, r6, ip
    d834:	cmp	r3, r2
    d836:	bge.n	d8c8 <_realloc_r+0xf0>
    d838:	lsls	r3, r1, #31
    d83a:	bmi.n	d85e <_realloc_r+0x86>
    d83c:	ldr.w	r3, [r4, #-8]
    d840:	sub.w	sl, r9, r3
    d844:	ldr.w	r3, [sl, #4]
    d848:	bic.w	r1, r3, #3
    d84c:	add	ip, r1
    d84e:	add	ip, r6
    d850:	cmp	ip, r2
    d852:	bge.w	da78 <_realloc_r+0x2a0>
    d856:	adds	r3, r6, r1
    d858:	cmp	r3, r2
    d85a:	bge.w	da2e <_realloc_r+0x256>
    d85e:	mov	r1, r7
    d860:	mov	r0, r8
    d862:	bl	d260 <_malloc_r>
    d866:	mov	r7, r0
    d868:	cbz	r0, d8a4 <_realloc_r+0xcc>
    d86a:	ldr.w	r3, [r4, #-4]
    d86e:	bic.w	r3, r3, #1
    d872:	add	r3, r9
    d874:	sub.w	r2, r0, #8
    d878:	cmp	r3, r2
    d87a:	beq.w	da22 <_realloc_r+0x24a>
    d87e:	subs	r2, r6, #4
    d880:	cmp	r2, #36	; 0x24
    d882:	bhi.w	da70 <_realloc_r+0x298>
    d886:	cmp	r2, #19
    d888:	bhi.w	d9e4 <_realloc_r+0x20c>
    d88c:	mov	r3, r0
    d88e:	mov	r2, r4
    d890:	ldr	r1, [r2, #0]
    d892:	str	r1, [r3, #0]
    d894:	ldr	r1, [r2, #4]
    d896:	str	r1, [r3, #4]
    d898:	ldr	r2, [r2, #8]
    d89a:	str	r2, [r3, #8]
    d89c:	mov	r1, r4
    d89e:	mov	r0, r8
    d8a0:	bl	e604 <_free_r>
    d8a4:	mov	r0, r8
    d8a6:	bl	d7cc <__malloc_unlock>
    d8aa:	mov	r0, r7
    d8ac:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d8b0:	bic.w	r5, r5, #7
    d8b4:	cmp	r5, #0
    d8b6:	mov	r2, r5
    d8b8:	bge.n	d7fc <_realloc_r+0x24>
    d8ba:	movs	r3, #12
    d8bc:	str.w	r3, [r8]
    d8c0:	movs	r7, #0
    d8c2:	mov	r0, r7
    d8c4:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d8c8:	mov	r6, r3
    d8ca:	ldrd	r2, r3, [r0, #8]
    d8ce:	str	r3, [r2, #12]
    d8d0:	str	r2, [r3, #8]
    d8d2:	subs	r3, r6, r5
    d8d4:	cmp	r3, #15
    d8d6:	bhi.n	d91e <_realloc_r+0x146>
    d8d8:	ldr.w	r3, [r9, #4]
    d8dc:	and.w	r3, r3, #1
    d8e0:	orrs	r3, r6
    d8e2:	add	r6, r9
    d8e4:	str.w	r3, [r9, #4]
    d8e8:	ldr	r3, [r6, #4]
    d8ea:	orr.w	r3, r3, #1
    d8ee:	str	r3, [r6, #4]
    d8f0:	mov	r0, r8
    d8f2:	mov	r7, r4
    d8f4:	bl	d7cc <__malloc_unlock>
    d8f8:	mov	r0, r7
    d8fa:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d8fe:	lsls	r1, r1, #31
    d900:	bmi.n	d85e <_realloc_r+0x86>
    d902:	ldr.w	r3, [r4, #-8]
    d906:	sub.w	sl, r9, r3
    d90a:	ldr.w	r1, [sl, #4]
    d90e:	bic.w	r1, r1, #3
    d912:	b.n	d856 <_realloc_r+0x7e>
    d914:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d918:	mov	r1, r2
    d91a:	b.w	d260 <_malloc_r>
    d91e:	ldr.w	r2, [r9, #4]
    d922:	add.w	r1, r9, r5
    d926:	and.w	r2, r2, #1
    d92a:	add	r6, r9
    d92c:	orr.w	r3, r3, #1
    d930:	orrs	r2, r5
    d932:	str.w	r2, [r9, #4]
    d936:	str	r3, [r1, #4]
    d938:	ldr	r3, [r6, #4]
    d93a:	orr.w	r3, r3, #1
    d93e:	adds	r1, #8
    d940:	str	r3, [r6, #4]
    d942:	mov	r0, r8
    d944:	bl	e604 <_free_r>
    d948:	b.n	d8f0 <_realloc_r+0x118>
    d94a:	ldr.w	r0, [ip, #4]
    d94e:	bic.w	fp, r0, #3
    d952:	add.w	ip, r6, fp
    d956:	add.w	r0, r5, #16
    d95a:	cmp	ip, r0
    d95c:	bge.n	d9fa <_realloc_r+0x222>
    d95e:	lsls	r1, r1, #31
    d960:	bmi.w	d85e <_realloc_r+0x86>
    d964:	ldr.w	r1, [r4, #-8]
    d968:	sub.w	sl, r9, r1
    d96c:	ldr.w	r1, [sl, #4]
    d970:	bic.w	r1, r1, #3
    d974:	add	fp, r1
    d976:	add	fp, r6
    d978:	cmp	r0, fp
    d97a:	bgt.w	d856 <_realloc_r+0x7e>
    d97e:	mov	r7, sl
    d980:	ldr.w	r1, [sl, #12]
    d984:	ldr.w	r0, [r7, #8]!
    d988:	subs	r2, r6, #4
    d98a:	cmp	r2, #36	; 0x24
    d98c:	str	r1, [r0, #12]
    d98e:	str	r0, [r1, #8]
    d990:	bhi.w	db4a <_realloc_r+0x372>
    d994:	cmp	r2, #19
    d996:	bls.w	db46 <_realloc_r+0x36e>
    d99a:	ldr	r1, [r4, #0]
    d99c:	str.w	r1, [sl, #8]
    d9a0:	ldr	r1, [r4, #4]
    d9a2:	str.w	r1, [sl, #12]
    d9a6:	cmp	r2, #27
    d9a8:	bhi.w	db6a <_realloc_r+0x392>
    d9ac:	adds	r4, #8
    d9ae:	add.w	r2, sl, #16
    d9b2:	ldr	r1, [r4, #0]
    d9b4:	str	r1, [r2, #0]
    d9b6:	ldr	r1, [r4, #4]
    d9b8:	str	r1, [r2, #4]
    d9ba:	ldr	r1, [r4, #8]
    d9bc:	str	r1, [r2, #8]
    d9be:	add.w	r1, sl, r5
    d9c2:	sub.w	r2, fp, r5
    d9c6:	orr.w	r2, r2, #1
    d9ca:	str	r1, [r3, #8]
    d9cc:	str	r2, [r1, #4]
    d9ce:	ldr.w	r3, [sl, #4]
    d9d2:	and.w	r3, r3, #1
    d9d6:	orrs	r3, r5
    d9d8:	mov	r0, r8
    d9da:	str.w	r3, [sl, #4]
    d9de:	bl	d7cc <__malloc_unlock>
    d9e2:	b.n	d8c2 <_realloc_r+0xea>
    d9e4:	ldr	r3, [r4, #0]
    d9e6:	str	r3, [r0, #0]
    d9e8:	ldr	r3, [r4, #4]
    d9ea:	str	r3, [r0, #4]
    d9ec:	cmp	r2, #27
    d9ee:	bhi.n	dac2 <_realloc_r+0x2ea>
    d9f0:	add.w	r2, r4, #8
    d9f4:	add.w	r3, r0, #8
    d9f8:	b.n	d890 <_realloc_r+0xb8>
    d9fa:	add.w	r2, r9, r5
    d9fe:	str	r2, [r3, #8]
    da00:	sub.w	r3, ip, r5
    da04:	orr.w	r3, r3, #1
    da08:	str	r3, [r2, #4]
    da0a:	ldr.w	r3, [r4, #-4]
    da0e:	and.w	r3, r3, #1
    da12:	orrs	r3, r5
    da14:	mov	r0, r8
    da16:	str.w	r3, [r4, #-4]
    da1a:	bl	d7cc <__malloc_unlock>
    da1e:	mov	r7, r4
    da20:	b.n	d8c2 <_realloc_r+0xea>
    da22:	ldr.w	r3, [r0, #-4]
    da26:	bic.w	r3, r3, #3
    da2a:	add	r6, r3
    da2c:	b.n	d8d2 <_realloc_r+0xfa>
    da2e:	mov	r7, sl
    da30:	ldr.w	r1, [sl, #12]
    da34:	ldr.w	r0, [r7, #8]!
    da38:	subs	r2, r6, #4
    da3a:	cmp	r2, #36	; 0x24
    da3c:	str	r1, [r0, #12]
    da3e:	str	r0, [r1, #8]
    da40:	bhi.n	dadc <_realloc_r+0x304>
    da42:	cmp	r2, #19
    da44:	bls.n	dad8 <_realloc_r+0x300>
    da46:	ldr	r1, [r4, #0]
    da48:	str.w	r1, [sl, #8]
    da4c:	ldr	r1, [r4, #4]
    da4e:	str.w	r1, [sl, #12]
    da52:	cmp	r2, #27
    da54:	bhi.n	db04 <_realloc_r+0x32c>
    da56:	adds	r4, #8
    da58:	add.w	r2, sl, #16
    da5c:	mov	r6, r3
    da5e:	ldr	r3, [r4, #0]
    da60:	str	r3, [r2, #0]
    da62:	ldr	r3, [r4, #4]
    da64:	str	r3, [r2, #4]
    da66:	ldr	r3, [r4, #8]
    da68:	str	r3, [r2, #8]
    da6a:	mov	r9, sl
    da6c:	mov	r4, r7
    da6e:	b.n	d8d2 <_realloc_r+0xfa>
    da70:	mov	r1, r4
    da72:	bl	df7c <memmove>
    da76:	b.n	d89c <_realloc_r+0xc4>
    da78:	ldrd	r1, r3, [r0, #8]
    da7c:	mov	r7, sl
    da7e:	str	r3, [r1, #12]
    da80:	str	r1, [r3, #8]
    da82:	ldr.w	r1, [r7, #8]!
    da86:	ldr.w	r3, [sl, #12]
    da8a:	str	r3, [r1, #12]
    da8c:	subs	r2, r6, #4
    da8e:	cmp	r2, #36	; 0x24
    da90:	str	r1, [r3, #8]
    da92:	bhi.n	daf0 <_realloc_r+0x318>
    da94:	cmp	r2, #19
    da96:	bls.n	daec <_realloc_r+0x314>
    da98:	ldr	r3, [r4, #0]
    da9a:	str.w	r3, [sl, #8]
    da9e:	ldr	r3, [r4, #4]
    daa0:	str.w	r3, [sl, #12]
    daa4:	cmp	r2, #27
    daa6:	bhi.n	db2e <_realloc_r+0x356>
    daa8:	adds	r4, #8
    daaa:	add.w	r3, sl, #16
    daae:	ldr	r2, [r4, #0]
    dab0:	str	r2, [r3, #0]
    dab2:	ldr	r2, [r4, #4]
    dab4:	str	r2, [r3, #4]
    dab6:	ldr	r2, [r4, #8]
    dab8:	str	r2, [r3, #8]
    daba:	mov	r6, ip
    dabc:	mov	r9, sl
    dabe:	mov	r4, r7
    dac0:	b.n	d8d2 <_realloc_r+0xfa>
    dac2:	ldr	r3, [r4, #8]
    dac4:	str	r3, [r0, #8]
    dac6:	ldr	r3, [r4, #12]
    dac8:	str	r3, [r0, #12]
    daca:	cmp	r2, #36	; 0x24
    dacc:	beq.n	db1c <_realloc_r+0x344>
    dace:	add.w	r2, r4, #16
    dad2:	add.w	r3, r0, #16
    dad6:	b.n	d890 <_realloc_r+0xb8>
    dad8:	mov	r2, r7
    dada:	b.n	da5c <_realloc_r+0x284>
    dadc:	mov	r1, r4
    dade:	mov	r0, r7
    dae0:	mov	r6, r3
    dae2:	mov	r9, sl
    dae4:	bl	df7c <memmove>
    dae8:	mov	r4, r7
    daea:	b.n	d8d2 <_realloc_r+0xfa>
    daec:	mov	r3, r7
    daee:	b.n	daae <_realloc_r+0x2d6>
    daf0:	mov	r1, r4
    daf2:	mov	r0, r7
    daf4:	mov	r6, ip
    daf6:	mov	r9, sl
    daf8:	bl	df7c <memmove>
    dafc:	mov	r4, r7
    dafe:	b.n	d8d2 <_realloc_r+0xfa>
    db00:	.word	0x20001608
    db04:	ldr	r1, [r4, #8]
    db06:	str.w	r1, [sl, #16]
    db0a:	ldr	r1, [r4, #12]
    db0c:	str.w	r1, [sl, #20]
    db10:	cmp	r2, #36	; 0x24
    db12:	beq.n	db56 <_realloc_r+0x37e>
    db14:	adds	r4, #16
    db16:	add.w	r2, sl, #24
    db1a:	b.n	da5c <_realloc_r+0x284>
    db1c:	ldr	r3, [r4, #16]
    db1e:	str	r3, [r0, #16]
    db20:	ldr	r1, [r4, #20]
    db22:	str	r1, [r0, #20]
    db24:	add.w	r2, r4, #24
    db28:	add.w	r3, r0, #24
    db2c:	b.n	d890 <_realloc_r+0xb8>
    db2e:	ldr	r3, [r4, #8]
    db30:	str.w	r3, [sl, #16]
    db34:	ldr	r3, [r4, #12]
    db36:	str.w	r3, [sl, #20]
    db3a:	cmp	r2, #36	; 0x24
    db3c:	beq.n	db82 <_realloc_r+0x3aa>
    db3e:	adds	r4, #16
    db40:	add.w	r3, sl, #24
    db44:	b.n	daae <_realloc_r+0x2d6>
    db46:	mov	r2, r7
    db48:	b.n	d9b2 <_realloc_r+0x1da>
    db4a:	mov	r1, r4
    db4c:	mov	r0, r7
    db4e:	bl	df7c <memmove>
    db52:	ldr	r3, [pc, #88]	; (dbac <_realloc_r+0x3d4>)
    db54:	b.n	d9be <_realloc_r+0x1e6>
    db56:	ldr	r2, [r4, #16]
    db58:	str.w	r2, [sl, #24]
    db5c:	ldr	r2, [r4, #20]
    db5e:	str.w	r2, [sl, #28]
    db62:	adds	r4, #24
    db64:	add.w	r2, sl, #32
    db68:	b.n	da5c <_realloc_r+0x284>
    db6a:	ldr	r1, [r4, #8]
    db6c:	str.w	r1, [sl, #16]
    db70:	ldr	r1, [r4, #12]
    db72:	str.w	r1, [sl, #20]
    db76:	cmp	r2, #36	; 0x24
    db78:	beq.n	db96 <_realloc_r+0x3be>
    db7a:	adds	r4, #16
    db7c:	add.w	r2, sl, #24
    db80:	b.n	d9b2 <_realloc_r+0x1da>
    db82:	ldr	r3, [r4, #16]
    db84:	str.w	r3, [sl, #24]
    db88:	ldr	r3, [r4, #20]
    db8a:	str.w	r3, [sl, #28]
    db8e:	adds	r4, #24
    db90:	add.w	r3, sl, #32
    db94:	b.n	daae <_realloc_r+0x2d6>
    db96:	ldr	r2, [r4, #16]
    db98:	str.w	r2, [sl, #24]
    db9c:	ldr	r2, [r4, #20]
    db9e:	str.w	r2, [sl, #28]
    dba2:	adds	r4, #24
    dba4:	add.w	r2, sl, #32
    dba8:	b.n	d9b2 <_realloc_r+0x1da>
    dbaa:	nop
    dbac:	.word	0x20001608

0000dbb0 <__cxa_atexit>:
    dbb0:	mov	r3, r2
    dbb2:	mov	r2, r1
    dbb4:	mov	r1, r0
    dbb6:	movs	r0, #2
    dbb8:	b.w	e4dc <__register_exitproc>

0000dbbc <stdio_exit_handler>:
    dbbc:	ldr	r2, [pc, #8]	; (dbc8 <stdio_exit_handler+0xc>)
    dbbe:	ldr	r1, [pc, #12]	; (dbcc <stdio_exit_handler+0x10>)
    dbc0:	ldr	r0, [pc, #12]	; (dbd0 <stdio_exit_handler+0x14>)
    dbc2:	b.w	dd3c <_fwalk_sglue>
    dbc6:	nop
    dbc8:	.word	0x20001a18
    dbcc:	.word	0x00010b15
    dbd0:	.word	0x20001338

0000dbd4 <cleanup_stdio>:
    dbd4:	ldr	r3, [pc, #48]	; (dc08 <cleanup_stdio+0x34>)
    dbd6:	ldr	r1, [r0, #4]
    dbd8:	cmp	r1, r3
    dbda:	push	{r4, lr}
    dbdc:	mov	r4, r0
    dbde:	beq.n	dbe4 <cleanup_stdio+0x10>
    dbe0:	bl	10b14 <_fclose_r>
    dbe4:	ldr	r1, [r4, #8]
    dbe6:	ldr	r3, [pc, #36]	; (dc0c <cleanup_stdio+0x38>)
    dbe8:	cmp	r1, r3
    dbea:	beq.n	dbf2 <cleanup_stdio+0x1e>
    dbec:	mov	r0, r4
    dbee:	bl	10b14 <_fclose_r>
    dbf2:	ldr	r1, [r4, #12]
    dbf4:	ldr	r3, [pc, #24]	; (dc10 <cleanup_stdio+0x3c>)
    dbf6:	cmp	r1, r3
    dbf8:	beq.n	dc04 <cleanup_stdio+0x30>
    dbfa:	mov	r0, r4
    dbfc:	ldmia.w	sp!, {r4, lr}
    dc00:	b.w	10b14 <_fclose_r>
    dc04:	pop	{r4, pc}
    dc06:	nop
    dc08:	.word	0x200067ac
    dc0c:	.word	0x20006814
    dc10:	.word	0x2000687c

0000dc14 <global_stdio_init.part.0>:
    dc14:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    dc18:	ldr	r4, [pc, #168]	; (dcc4 <global_stdio_init.part.0+0xb0>)
    dc1a:	ldr	r3, [pc, #172]	; (dcc8 <global_stdio_init.part.0+0xb4>)
    dc1c:	ldr	r0, [pc, #172]	; (dccc <global_stdio_init.part.0+0xb8>)
    dc1e:	ldr.w	r9, [pc, #192]	; dce0 <global_stdio_init.part.0+0xcc>
    dc22:	ldr.w	r8, [pc, #192]	; dce4 <global_stdio_init.part.0+0xd0>
    dc26:	ldr	r7, [pc, #168]	; (dcd0 <global_stdio_init.part.0+0xbc>)
    dc28:	str	r0, [r3, #0]
    dc2a:	movs	r5, #0
    dc2c:	movs	r3, #4
    dc2e:	movs	r2, #8
    dc30:	mov	r1, r5
    dc32:	add.w	r0, r4, #92	; 0x5c
    dc36:	ldr	r6, [pc, #156]	; (dcd4 <global_stdio_init.part.0+0xc0>)
    dc38:	str	r5, [r4, #100]	; 0x64
    dc3a:	strd	r5, r3, [r4, #8]
    dc3e:	strd	r5, r5, [r4]
    dc42:	strd	r5, r5, [r4, #16]
    dc46:	str	r5, [r4, #24]
    dc48:	bl	e074 <memset>
    dc4c:	ldr	r3, [pc, #136]	; (dcd8 <global_stdio_init.part.0+0xc4>)
    dc4e:	str	r3, [r4, #116]	; 0x74
    dc50:	movs	r2, #8
    dc52:	mov	r1, r5
    dc54:	add.w	r0, r4, #196	; 0xc4
    dc58:	strd	r4, r9, [r4, #28]
    dc5c:	strd	r8, r7, [r4, #36]	; 0x24
    dc60:	strd	r5, r5, [r4, #104]	; 0x68
    dc64:	strd	r5, r5, [r4, #120]	; 0x78
    dc68:	str.w	r5, [r4, #204]	; 0xcc
    dc6c:	str	r5, [r4, #112]	; 0x70
    dc6e:	str.w	r5, [r4, #128]	; 0x80
    dc72:	str	r6, [r4, #44]	; 0x2c
    dc74:	bl	e074 <memset>
    dc78:	ldr	r3, [pc, #96]	; (dcdc <global_stdio_init.part.0+0xc8>)
    dc7a:	str.w	r3, [r4, #220]	; 0xdc
    dc7e:	mov	r1, r5
    dc80:	add.w	r3, r4, #104	; 0x68
    dc84:	movs	r2, #8
    dc86:	add.w	r0, r4, #300	; 0x12c
    dc8a:	str.w	r3, [r4, #132]	; 0x84
    dc8e:	strd	r9, r8, [r4, #136]	; 0x88
    dc92:	strd	r7, r6, [r4, #144]	; 0x90
    dc96:	strd	r5, r5, [r4, #208]	; 0xd0
    dc9a:	strd	r5, r5, [r4, #224]	; 0xe0
    dc9e:	str.w	r5, [r4, #308]	; 0x134
    dca2:	str.w	r5, [r4, #216]	; 0xd8
    dca6:	str.w	r5, [r4, #232]	; 0xe8
    dcaa:	bl	e074 <memset>
    dcae:	add.w	r3, r4, #208	; 0xd0
    dcb2:	strd	r9, r8, [r4, #240]	; 0xf0
    dcb6:	strd	r7, r6, [r4, #248]	; 0xf8
    dcba:	str.w	r3, [r4, #236]	; 0xec
    dcbe:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    dcc2:	nop
    dcc4:	.word	0x200067ac
    dcc8:	.word	0x200068e4
    dccc:	.word	0x0000dbbd
    dcd0:	.word	0x0000de29
    dcd4:	.word	0x0000de49
    dcd8:	.word	0x00010009
    dcdc:	.word	0x00020012
    dce0:	.word	0x0000ddc5
    dce4:	.word	0x0000dde9

0000dce8 <__sinit>:
    dce8:	push	{r4, lr}
    dcea:	mov	r4, r0
    dcec:	ldr	r0, [pc, #40]	; (dd18 <__sinit+0x30>)
    dcee:	bl	e33c <__retarget_lock_acquire_recursive>
    dcf2:	ldr	r3, [r4, #52]	; 0x34
    dcf4:	cbnz	r3, dd00 <__sinit+0x18>
    dcf6:	ldr	r3, [pc, #36]	; (dd1c <__sinit+0x34>)
    dcf8:	ldr	r2, [pc, #36]	; (dd20 <__sinit+0x38>)
    dcfa:	ldr	r3, [r3, #0]
    dcfc:	str	r2, [r4, #52]	; 0x34
    dcfe:	cbz	r3, dd0a <__sinit+0x22>
    dd00:	ldmia.w	sp!, {r4, lr}
    dd04:	ldr	r0, [pc, #16]	; (dd18 <__sinit+0x30>)
    dd06:	b.w	e340 <__retarget_lock_release_recursive>
    dd0a:	bl	dc14 <global_stdio_init.part.0>
    dd0e:	ldmia.w	sp!, {r4, lr}
    dd12:	ldr	r0, [pc, #4]	; (dd18 <__sinit+0x30>)
    dd14:	b.w	e340 <__retarget_lock_release_recursive>
    dd18:	.word	0x20006774
    dd1c:	.word	0x200068e4
    dd20:	.word	0x0000dbd5

0000dd24 <__sfp_lock_acquire>:
    dd24:	ldr	r0, [pc, #4]	; (dd2c <__sfp_lock_acquire+0x8>)
    dd26:	b.w	e33c <__retarget_lock_acquire_recursive>
    dd2a:	nop
    dd2c:	.word	0x20006774

0000dd30 <__sfp_lock_release>:
    dd30:	ldr	r0, [pc, #4]	; (dd38 <__sfp_lock_release+0x8>)
    dd32:	b.w	e340 <__retarget_lock_release_recursive>
    dd36:	nop
    dd38:	.word	0x20006774

0000dd3c <_fwalk_sglue>:
    dd3c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    dd40:	mov	r8, r0
    dd42:	mov	r7, r1
    dd44:	mov	r6, r2
    dd46:	mov.w	r9, #0
    dd4a:	ldrd	r5, r4, [r6, #4]
    dd4e:	subs	r5, #1
    dd50:	bmi.n	dd76 <_fwalk_sglue+0x3a>
    dd52:	ldrh	r3, [r4, #12]
    dd54:	cmp	r3, #1
    dd56:	add.w	r5, r5, #4294967295
    dd5a:	bls.n	dd6e <_fwalk_sglue+0x32>
    dd5c:	ldrsh.w	r3, [r4, #14]
    dd60:	adds	r3, #1
    dd62:	mov	r1, r4
    dd64:	beq.n	dd6e <_fwalk_sglue+0x32>
    dd66:	mov	r0, r8
    dd68:	blx	r7
    dd6a:	orr.w	r9, r9, r0
    dd6e:	adds	r3, r5, #1
    dd70:	add.w	r4, r4, #104	; 0x68
    dd74:	bne.n	dd52 <_fwalk_sglue+0x16>
    dd76:	ldr	r6, [r6, #0]
    dd78:	cmp	r6, #0
    dd7a:	bne.n	dd4a <_fwalk_sglue+0xe>
    dd7c:	mov	r0, r9
    dd7e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    dd82:	nop

0000dd84 <sprintf>:
    dd84:	push	{r1, r2, r3}
    dd86:	push	{r4, lr}
    dd88:	sub	sp, #116	; 0x74
    dd8a:	mvn.w	r1, #2147483648	; 0x80000000
    dd8e:	add	r3, sp, #124	; 0x7c
    dd90:	strd	r0, r1, [sp, #24]
    dd94:	str	r1, [sp, #16]
    dd96:	ldr	r1, [pc, #36]	; (ddbc <sprintf+0x38>)
    dd98:	ldr.w	r2, [r3], #4
    dd9c:	str	r0, [sp, #8]
    dd9e:	ldr	r4, [pc, #32]	; (ddc0 <sprintf+0x3c>)
    dda0:	ldr	r0, [r1, #0]
    dda2:	str	r3, [sp, #4]
    dda4:	add	r1, sp, #8
    dda6:	str	r4, [sp, #20]
    dda8:	bl	efd0 <_svfprintf_r>
    ddac:	ldr	r3, [sp, #8]
    ddae:	movs	r2, #0
    ddb0:	strb	r2, [r3, #0]
    ddb2:	add	sp, #116	; 0x74
    ddb4:	ldmia.w	sp!, {r4, lr}
    ddb8:	add	sp, #12
    ddba:	bx	lr
    ddbc:	.word	0x20001a24
    ddc0:	.word	0xffff0208

0000ddc4 <__sread>:
    ddc4:	push	{r4, lr}
    ddc6:	mov	r4, r1
    ddc8:	ldrsh.w	r1, [r1, #14]
    ddcc:	bl	e264 <_read_r>
    ddd0:	cmp	r0, #0
    ddd2:	blt.n	dddc <__sread+0x18>
    ddd4:	ldr	r3, [r4, #80]	; 0x50
    ddd6:	add	r3, r0
    ddd8:	str	r3, [r4, #80]	; 0x50
    ddda:	pop	{r4, pc}
    dddc:	ldrh	r3, [r4, #12]
    ddde:	bic.w	r3, r3, #4096	; 0x1000
    dde2:	strh	r3, [r4, #12]
    dde4:	pop	{r4, pc}
    dde6:	nop

0000dde8 <__swrite>:
    dde8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ddec:	mov	r4, r1
    ddee:	ldrsh.w	r1, [r1, #12]
    ddf2:	mov	r7, r3
    ddf4:	lsls	r3, r1, #23
    ddf6:	mov	r5, r0
    ddf8:	mov	r6, r2
    ddfa:	bmi.n	de14 <__swrite+0x2c>
    ddfc:	bic.w	r1, r1, #4096	; 0x1000
    de00:	strh	r1, [r4, #12]
    de02:	mov	r3, r7
    de04:	ldrsh.w	r1, [r4, #14]
    de08:	mov	r2, r6
    de0a:	mov	r0, r5
    de0c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    de10:	b.w	e2b4 <_write_r>
    de14:	ldrsh.w	r1, [r4, #14]
    de18:	movs	r3, #2
    de1a:	movs	r2, #0
    de1c:	bl	e238 <_lseek_r>
    de20:	ldrsh.w	r1, [r4, #12]
    de24:	b.n	ddfc <__swrite+0x14>
    de26:	nop

0000de28 <__sseek>:
    de28:	push	{r4, lr}
    de2a:	mov	r4, r1
    de2c:	ldrsh.w	r1, [r1, #14]
    de30:	bl	e238 <_lseek_r>
    de34:	ldrh	r3, [r4, #12]
    de36:	adds	r2, r0, #1
    de38:	itee	eq
    de3a:	biceq.w	r3, r3, #4096	; 0x1000
    de3e:	orrne.w	r3, r3, #4096	; 0x1000
    de42:	strne	r0, [r4, #80]	; 0x50
    de44:	strh	r3, [r4, #12]
    de46:	pop	{r4, pc}

0000de48 <__sclose>:
    de48:	ldrsh.w	r1, [r1, #14]
    de4c:	b.w	e214 <_close_r>

0000de50 <_vdprintf_r>:
    de50:	push	{r4, r5, r6, r7, lr}
    de52:	sub.w	sp, sp, #532	; 0x214
    de56:	add	r7, sp, #16
    de58:	str	r3, [sp, #0]
    de5a:	mov	r3, r2
    de5c:	mov.w	r2, #512	; 0x200
    de60:	mov	r6, r1
    de62:	str	r2, [sp, #12]
    de64:	mov	r1, r7
    de66:	add	r2, sp, #12
    de68:	mov	r5, r0
    de6a:	bl	deb8 <_vasnprintf_r>
    de6e:	cbz	r0, de94 <_vdprintf_r+0x44>
    de70:	mov	r4, r0
    de72:	mov	r2, r0
    de74:	ldr	r3, [sp, #12]
    de76:	mov	r1, r6
    de78:	mov	r0, r5
    de7a:	bl	e2b4 <_write_r>
    de7e:	cmp	r4, r7
    de80:	str	r0, [sp, #12]
    de82:	beq.n	de8e <_vdprintf_r+0x3e>
    de84:	mov	r0, r5
    de86:	mov	r1, r4
    de88:	bl	e604 <_free_r>
    de8c:	ldr	r0, [sp, #12]
    de8e:	add.w	sp, sp, #532	; 0x214
    de92:	pop	{r4, r5, r6, r7, pc}
    de94:	mov.w	r0, #4294967295
    de98:	b.n	de8e <_vdprintf_r+0x3e>
    de9a:	nop

0000de9c <vdprintf>:
    de9c:	push	{r4}
    de9e:	ldr	r4, [pc, #20]	; (deb4 <vdprintf+0x18>)
    dea0:	mov	ip, r0
    dea2:	mov	r3, r2
    dea4:	ldr	r0, [r4, #0]
    dea6:	ldr.w	r4, [sp], #4
    deaa:	mov	r2, r1
    deac:	mov	r1, ip
    deae:	b.w	de50 <_vdprintf_r>
    deb2:	nop
    deb4:	.word	0x20001a24

0000deb8 <_vasnprintf_r>:
    deb8:	push	{r4, r5, lr}
    deba:	ldr	r4, [r2, #0]
    debc:	mov	r5, r2
    debe:	sub	sp, #108	; 0x6c
    dec0:	mov	r2, r3
    dec2:	cbz	r1, dec8 <_vasnprintf_r+0x10>
    dec4:	cmp	r4, #0
    dec6:	bne.n	defc <_vasnprintf_r+0x44>
    dec8:	movs	r1, #0
    deca:	mov.w	r3, #648	; 0x288
    dece:	strh.w	r3, [sp, #12]
    ded2:	str	r1, [sp, #0]
    ded4:	str	r1, [sp, #16]
    ded6:	movw	r3, #65535	; 0xffff
    deda:	str	r1, [sp, #8]
    dedc:	str	r1, [sp, #20]
    dede:	strh.w	r3, [sp, #14]
    dee2:	mov	r1, sp
    dee4:	ldr	r3, [sp, #120]	; 0x78
    dee6:	bl	efd0 <_svfprintf_r>
    deea:	cmp	r0, #0
    deec:	blt.n	df16 <_vasnprintf_r+0x5e>
    deee:	ldr	r3, [sp, #0]
    def0:	str	r0, [r5, #0]
    def2:	movs	r2, #0
    def4:	strb	r2, [r3, #0]
    def6:	ldr	r0, [sp, #16]
    def8:	add	sp, #108	; 0x6c
    defa:	pop	{r4, r5, pc}
    defc:	mov.w	r3, #1544	; 0x608
    df00:	str	r1, [sp, #0]
    df02:	str	r1, [sp, #16]
    df04:	strh.w	r3, [sp, #12]
    df08:	mov	r1, r4
    df0a:	bge.n	ded6 <_vasnprintf_r+0x1e>
    df0c:	movs	r3, #139	; 0x8b
    df0e:	str	r3, [r0, #0]
    df10:	movs	r0, #0
    df12:	add	sp, #108	; 0x6c
    df14:	pop	{r4, r5, pc}
    df16:	movs	r0, #0
    df18:	b.n	def8 <_vasnprintf_r+0x40>
    df1a:	nop

0000df1c <memcmp>:
    df1c:	cmp	r2, #3
    df1e:	push	{r4, r5, r6, lr}
    df20:	bls.n	df4c <memcmp+0x30>
    df22:	orr.w	r3, r0, r1
    df26:	lsls	r3, r3, #30
    df28:	bne.n	df70 <memcmp+0x54>
    df2a:	mov	r4, r0
    df2c:	mov	r3, r1
    df2e:	mov	r1, r3
    df30:	mov	r0, r4
    df32:	ldr	r6, [r1, #0]
    df34:	ldr	r5, [r0, #0]
    df36:	cmp	r5, r6
    df38:	add.w	r4, r4, #4
    df3c:	add.w	r3, r3, #4
    df40:	bne.n	df70 <memcmp+0x54>
    df42:	subs	r2, #4
    df44:	cmp	r2, #3
    df46:	mov	r0, r4
    df48:	mov	r1, r3
    df4a:	bhi.n	df2e <memcmp+0x12>
    df4c:	subs	r4, r2, #1
    df4e:	cbz	r2, df78 <memcmp+0x5c>
    df50:	subs	r2, r0, #1
    df52:	subs	r1, #1
    df54:	b.n	df5a <memcmp+0x3e>
    df56:	adds	r3, r0, r3
    df58:	beq.n	df74 <memcmp+0x58>
    df5a:	ldrb.w	lr, [r2, #1]!
    df5e:	ldrb.w	ip, [r1, #1]!
    df62:	cmp	lr, ip
    df64:	sub.w	r3, r4, r2
    df68:	beq.n	df56 <memcmp+0x3a>
    df6a:	sub.w	r0, lr, ip
    df6e:	pop	{r4, r5, r6, pc}
    df70:	subs	r4, r2, #1
    df72:	b.n	df50 <memcmp+0x34>
    df74:	mov	r0, r3
    df76:	pop	{r4, r5, r6, pc}
    df78:	mov	r0, r2
    df7a:	pop	{r4, r5, r6, pc}

0000df7c <memmove>:
    df7c:	cmp	r0, r1
    df7e:	bls.n	df9c <memmove+0x20>
    df80:	adds	r3, r1, r2
    df82:	cmp	r3, r0
    df84:	bls.n	df9c <memmove+0x20>
    df86:	add.w	ip, r0, r2
    df8a:	cbz	r2, dfbc <memmove+0x40>
    df8c:	mov	r2, ip
    df8e:	ldrb.w	ip, [r3, #-1]!
    df92:	strb.w	ip, [r2, #-1]!
    df96:	cmp	r1, r3
    df98:	bne.n	df8e <memmove+0x12>
    df9a:	bx	lr
    df9c:	cmp	r2, #15
    df9e:	bhi.n	dfbe <memmove+0x42>
    dfa0:	mov	r3, r0
    dfa2:	add.w	ip, r2, #4294967295
    dfa6:	cbz	r2, dfbc <memmove+0x40>
    dfa8:	add.w	ip, ip, #1
    dfac:	subs	r3, #1
    dfae:	add	ip, r1
    dfb0:	ldrb.w	r2, [r1], #1
    dfb4:	strb.w	r2, [r3, #1]!
    dfb8:	cmp	r1, ip
    dfba:	bne.n	dfb0 <memmove+0x34>
    dfbc:	bx	lr
    dfbe:	orr.w	r3, r0, r1
    dfc2:	lsls	r3, r3, #30
    dfc4:	bne.n	e068 <memmove+0xec>
    dfc6:	sub.w	r3, r2, #16
    dfca:	push	{r4, r5, r6, lr}
    dfcc:	add.w	ip, r1, #32
    dfd0:	bic.w	r5, r3, #15
    dfd4:	add.w	lr, r1, #16
    dfd8:	add.w	r4, r0, #16
    dfdc:	add	ip, r5
    dfde:	lsrs	r3, r3, #4
    dfe0:	ldr.w	r5, [lr, #-16]
    dfe4:	str.w	r5, [r4, #-16]
    dfe8:	ldr.w	r5, [lr, #-12]
    dfec:	str.w	r5, [r4, #-12]
    dff0:	ldr.w	r5, [lr, #-8]
    dff4:	str.w	r5, [r4, #-8]
    dff8:	ldr.w	r5, [lr, #-4]
    dffc:	str.w	r5, [r4, #-4]
    e000:	add.w	lr, lr, #16
    e004:	cmp	lr, ip
    e006:	add.w	r4, r4, #16
    e00a:	bne.n	dfe0 <memmove+0x64>
    e00c:	adds	r3, #1
    e00e:	tst.w	r2, #12
    e012:	add.w	r1, r1, r3, lsl #4
    e016:	and.w	r4, r2, #15
    e01a:	add.w	r3, r0, r3, lsl #4
    e01e:	beq.n	e070 <memmove+0xf4>
    e020:	subs	r4, #4
    e022:	bic.w	r6, r4, #3
    e026:	mov.w	ip, r4, lsr #2
    e02a:	add	r6, r3
    e02c:	subs	r4, r3, #4
    e02e:	mov	lr, r1
    e030:	ldr.w	r5, [lr], #4
    e034:	str.w	r5, [r4, #4]!
    e038:	cmp	r4, r6
    e03a:	bne.n	e030 <memmove+0xb4>
    e03c:	add.w	r4, ip, #1
    e040:	and.w	r2, r2, #3
    e044:	add.w	r3, r3, r4, lsl #2
    e048:	add.w	r1, r1, r4, lsl #2
    e04c:	add.w	ip, r2, #4294967295
    e050:	cbz	r2, e066 <memmove+0xea>
    e052:	add.w	ip, ip, #1
    e056:	subs	r3, #1
    e058:	add	ip, r1
    e05a:	ldrb.w	r2, [r1], #1
    e05e:	strb.w	r2, [r3, #1]!
    e062:	cmp	r1, ip
    e064:	bne.n	e05a <memmove+0xde>
    e066:	pop	{r4, r5, r6, pc}
    e068:	add.w	ip, r2, #4294967295
    e06c:	mov	r3, r0
    e06e:	b.n	dfa8 <memmove+0x2c>
    e070:	mov	r2, r4
    e072:	b.n	e04c <memmove+0xd0>

0000e074 <memset>:
    e074:	lsls	r3, r0, #30
    e076:	push	{r4, r5, lr}
    e078:	beq.n	e10c <memset+0x98>
    e07a:	subs	r4, r2, #1
    e07c:	cmp	r2, #0
    e07e:	beq.n	e100 <memset+0x8c>
    e080:	uxtb	r2, r1
    e082:	mov	r3, r0
    e084:	b.n	e08a <memset+0x16>
    e086:	subs	r4, #1
    e088:	bcc.n	e100 <memset+0x8c>
    e08a:	strb.w	r2, [r3], #1
    e08e:	lsls	r5, r3, #30
    e090:	bne.n	e086 <memset+0x12>
    e092:	cmp	r4, #3
    e094:	bls.n	e0f2 <memset+0x7e>
    e096:	uxtb	r5, r1
    e098:	orr.w	r5, r5, r5, lsl #8
    e09c:	cmp	r4, #15
    e09e:	orr.w	r5, r5, r5, lsl #16
    e0a2:	bls.n	e112 <memset+0x9e>
    e0a4:	sub.w	r2, r4, #16
    e0a8:	bic.w	ip, r2, #15
    e0ac:	add.w	lr, r3, #32
    e0b0:	add	lr, ip
    e0b2:	mov.w	ip, r2, lsr #4
    e0b6:	add.w	r2, r3, #16
    e0ba:	strd	r5, r5, [r2, #-16]
    e0be:	strd	r5, r5, [r2, #-8]
    e0c2:	adds	r2, #16
    e0c4:	cmp	r2, lr
    e0c6:	bne.n	e0ba <memset+0x46>
    e0c8:	add.w	r2, ip, #1
    e0cc:	tst.w	r4, #12
    e0d0:	add.w	r2, r3, r2, lsl #4
    e0d4:	and.w	ip, r4, #15
    e0d8:	beq.n	e102 <memset+0x8e>
    e0da:	sub.w	r3, ip, #4
    e0de:	bic.w	r3, r3, #3
    e0e2:	adds	r3, #4
    e0e4:	add	r3, r2
    e0e6:	str.w	r5, [r2], #4
    e0ea:	cmp	r3, r2
    e0ec:	bne.n	e0e6 <memset+0x72>
    e0ee:	and.w	r4, ip, #3
    e0f2:	cbz	r4, e100 <memset+0x8c>
    e0f4:	uxtb	r1, r1
    e0f6:	add	r4, r3
    e0f8:	strb.w	r1, [r3], #1
    e0fc:	cmp	r4, r3
    e0fe:	bne.n	e0f8 <memset+0x84>
    e100:	pop	{r4, r5, pc}
    e102:	mov	r4, ip
    e104:	mov	r3, r2
    e106:	cmp	r4, #0
    e108:	bne.n	e0f4 <memset+0x80>
    e10a:	b.n	e100 <memset+0x8c>
    e10c:	mov	r3, r0
    e10e:	mov	r4, r2
    e110:	b.n	e092 <memset+0x1e>
    e112:	mov	r2, r3
    e114:	mov	ip, r4
    e116:	b.n	e0da <memset+0x66>

0000e118 <strncmp>:
    e118:	cmp	r2, #0
    e11a:	beq.n	e19a <strncmp+0x82>
    e11c:	orr.w	r3, r0, r1
    e120:	lsls	r3, r3, #30
    e122:	push	{r4, r5, lr}
    e124:	mov	ip, r0
    e126:	bne.n	e188 <strncmp+0x70>
    e128:	cmp	r2, #3
    e12a:	bls.n	e188 <strncmp+0x70>
    e12c:	mov	r3, r1
    e12e:	b.n	e142 <strncmp+0x2a>
    e130:	subs	r2, #4
    e132:	mov	ip, r0
    e134:	mov	r1, r3
    e136:	beq.n	e184 <strncmp+0x6c>
    e138:	tst.w	lr, #2155905152	; 0x80808080
    e13c:	bne.n	e184 <strncmp+0x6c>
    e13e:	cmp	r2, #3
    e140:	bls.n	e188 <strncmp+0x70>
    e142:	ldr	r4, [r0, #0]
    e144:	mov	r1, r3
    e146:	ldr.w	r5, [r3], #4
    e14a:	sub.w	lr, r4, #16843009	; 0x1010101
    e14e:	cmp	r4, r5
    e150:	mov	ip, r0
    e152:	bic.w	lr, lr, r4
    e156:	add.w	r0, r0, #4
    e15a:	beq.n	e130 <strncmp+0x18>
    e15c:	ldrb.w	r0, [ip]
    e160:	ldrb	r4, [r1, #0]
    e162:	cmp	r0, r4
    e164:	bne.n	e19e <strncmp+0x86>
    e166:	mov	lr, ip
    e168:	cbz	r0, e186 <strncmp+0x6e>
    e16a:	ldrb.w	r0, [lr, #1]!
    e16e:	ldrb.w	r4, [r1, #1]!
    e172:	sub.w	r3, r2, lr
    e176:	cmp	r0, r4
    e178:	add.w	r3, r3, #4294967295
    e17c:	bne.n	e19e <strncmp+0x86>
    e17e:	adds.w	r3, ip, r3
    e182:	bne.n	e168 <strncmp+0x50>
    e184:	movs	r0, #0
    e186:	pop	{r4, r5, pc}
    e188:	ldrb.w	r0, [ip]
    e18c:	ldrb	r4, [r1, #0]
    e18e:	cmp	r4, r0
    e190:	bne.n	e19e <strncmp+0x86>
    e192:	cmp	r2, #1
    e194:	beq.n	e184 <strncmp+0x6c>
    e196:	mov	lr, ip
    e198:	b.n	e168 <strncmp+0x50>
    e19a:	mov	r0, r2
    e19c:	bx	lr
    e19e:	subs	r0, r0, r4
    e1a0:	pop	{r4, r5, pc}
    e1a2:	nop

0000e1a4 <strncpy>:
    e1a4:	orr.w	r3, r0, r1
    e1a8:	lsls	r3, r3, #30
    e1aa:	push	{r4, r5, lr}
    e1ac:	bne.n	e1b2 <strncpy+0xe>
    e1ae:	cmp	r2, #3
    e1b0:	bhi.n	e1d2 <strncpy+0x2e>
    e1b2:	mov	ip, r0
    e1b4:	add.w	lr, r1, #4294967295
    e1b8:	b.n	e1ca <strncpy+0x26>
    e1ba:	ldrb.w	r1, [lr, #1]!
    e1be:	strb.w	r1, [r3], #1
    e1c2:	subs	r4, r2, #1
    e1c4:	cbz	r1, e1f8 <strncpy+0x54>
    e1c6:	mov	ip, r3
    e1c8:	mov	r2, r4
    e1ca:	mov	r3, ip
    e1cc:	cmp	r2, #0
    e1ce:	bne.n	e1ba <strncpy+0x16>
    e1d0:	pop	{r4, r5, pc}
    e1d2:	mov	r3, r1
    e1d4:	mov	ip, r0
    e1d6:	mov	r1, r3
    e1d8:	ldr.w	r5, [r3], #4
    e1dc:	sub.w	r4, r5, #16843009	; 0x1010101
    e1e0:	bic.w	r4, r4, r5
    e1e4:	tst.w	r4, #2155905152	; 0x80808080
    e1e8:	bne.n	e1b4 <strncpy+0x10>
    e1ea:	subs	r2, #4
    e1ec:	cmp	r2, #3
    e1ee:	str.w	r5, [ip], #4
    e1f2:	mov	r1, r3
    e1f4:	bhi.n	e1d6 <strncpy+0x32>
    e1f6:	b.n	e1b4 <strncpy+0x10>
    e1f8:	add	ip, r2
    e1fa:	cmp	r4, #0
    e1fc:	beq.n	e1d0 <strncpy+0x2c>
    e1fe:	strb.w	r1, [r3], #1
    e202:	cmp	r3, ip
    e204:	bne.n	e1fe <strncpy+0x5a>
    e206:	pop	{r4, r5, pc}

0000e208 <__locale_mb_cur_max>:
    e208:	ldr	r3, [pc, #4]	; (e210 <__locale_mb_cur_max+0x8>)
    e20a:	ldrb.w	r0, [r3, #296]	; 0x128
    e20e:	bx	lr
    e210:	.word	0x2000149c

0000e214 <_close_r>:
    e214:	push	{r3, r4, r5, lr}
    e216:	ldr	r5, [pc, #28]	; (e234 <_close_r+0x20>)
    e218:	movs	r2, #0
    e21a:	mov	r4, r0
    e21c:	mov	r0, r1
    e21e:	str	r2, [r5, #0]
    e220:	bl	ba88 <_close>
    e224:	adds	r3, r0, #1
    e226:	beq.n	e22a <_close_r+0x16>
    e228:	pop	{r3, r4, r5, pc}
    e22a:	ldr	r3, [r5, #0]
    e22c:	cmp	r3, #0
    e22e:	beq.n	e228 <_close_r+0x14>
    e230:	str	r3, [r4, #0]
    e232:	pop	{r3, r4, r5, pc}
    e234:	.word	0x20007998

0000e238 <_lseek_r>:
    e238:	push	{r3, r4, r5, lr}
    e23a:	mov	r4, r1
    e23c:	ldr	r5, [pc, #32]	; (e260 <_lseek_r+0x28>)
    e23e:	mov	ip, r0
    e240:	mov	r1, r2
    e242:	mov	r0, r4
    e244:	mov	r2, r3
    e246:	movs	r3, #0
    e248:	str	r3, [r5, #0]
    e24a:	mov	r4, ip
    e24c:	bl	baa0 <_lseek>
    e250:	adds	r3, r0, #1
    e252:	beq.n	e256 <_lseek_r+0x1e>
    e254:	pop	{r3, r4, r5, pc}
    e256:	ldr	r3, [r5, #0]
    e258:	cmp	r3, #0
    e25a:	beq.n	e254 <_lseek_r+0x1c>
    e25c:	str	r3, [r4, #0]
    e25e:	pop	{r3, r4, r5, pc}
    e260:	.word	0x20007998

0000e264 <_read_r>:
    e264:	push	{r3, r4, r5, lr}
    e266:	mov	r4, r1
    e268:	ldr	r5, [pc, #32]	; (e28c <_read_r+0x28>)
    e26a:	mov	ip, r0
    e26c:	mov	r1, r2
    e26e:	mov	r0, r4
    e270:	mov	r2, r3
    e272:	movs	r3, #0
    e274:	str	r3, [r5, #0]
    e276:	mov	r4, ip
    e278:	bl	ba84 <_read>
    e27c:	adds	r3, r0, #1
    e27e:	beq.n	e282 <_read_r+0x1e>
    e280:	pop	{r3, r4, r5, pc}
    e282:	ldr	r3, [r5, #0]
    e284:	cmp	r3, #0
    e286:	beq.n	e280 <_read_r+0x1c>
    e288:	str	r3, [r4, #0]
    e28a:	pop	{r3, r4, r5, pc}
    e28c:	.word	0x20007998

0000e290 <_sbrk_r>:
    e290:	push	{r3, r4, r5, lr}
    e292:	ldr	r5, [pc, #28]	; (e2b0 <_sbrk_r+0x20>)
    e294:	movs	r2, #0
    e296:	mov	r4, r0
    e298:	mov	r0, r1
    e29a:	str	r2, [r5, #0]
    e29c:	bl	ba50 <_sbrk>
    e2a0:	adds	r3, r0, #1
    e2a2:	beq.n	e2a6 <_sbrk_r+0x16>
    e2a4:	pop	{r3, r4, r5, pc}
    e2a6:	ldr	r3, [r5, #0]
    e2a8:	cmp	r3, #0
    e2aa:	beq.n	e2a4 <_sbrk_r+0x14>
    e2ac:	str	r3, [r4, #0]
    e2ae:	pop	{r3, r4, r5, pc}
    e2b0:	.word	0x20007998

0000e2b4 <_write_r>:
    e2b4:	push	{r3, r4, r5, lr}
    e2b6:	mov	r4, r1
    e2b8:	ldr	r5, [pc, #32]	; (e2dc <_write_r+0x28>)
    e2ba:	mov	ip, r0
    e2bc:	mov	r1, r2
    e2be:	mov	r0, r4
    e2c0:	mov	r2, r3
    e2c2:	movs	r3, #0
    e2c4:	str	r3, [r5, #0]
    e2c6:	mov	r4, ip
    e2c8:	bl	d078 <_write>
    e2cc:	adds	r3, r0, #1
    e2ce:	beq.n	e2d2 <_write_r+0x1e>
    e2d0:	pop	{r3, r4, r5, pc}
    e2d2:	ldr	r3, [r5, #0]
    e2d4:	cmp	r3, #0
    e2d6:	beq.n	e2d0 <_write_r+0x1c>
    e2d8:	str	r3, [r4, #0]
    e2da:	pop	{r3, r4, r5, pc}
    e2dc:	.word	0x20007998

0000e2e0 <__errno>:
    e2e0:	ldr	r3, [pc, #4]	; (e2e8 <__errno+0x8>)
    e2e2:	ldr	r0, [r3, #0]
    e2e4:	bx	lr
    e2e6:	nop
    e2e8:	.word	0x20001a24

0000e2ec <__libc_init_array>:
    e2ec:	push	{r4, r5, r6, lr}
    e2ee:	ldr	r6, [pc, #52]	; (e324 <__libc_init_array+0x38>)
    e2f0:	ldr	r5, [pc, #52]	; (e328 <__libc_init_array+0x3c>)
    e2f2:	subs	r6, r6, r5
    e2f4:	asrs	r6, r6, #2
    e2f6:	beq.n	e306 <__libc_init_array+0x1a>
    e2f8:	movs	r4, #0
    e2fa:	ldr.w	r3, [r5], #4
    e2fe:	adds	r4, #1
    e300:	blx	r3
    e302:	cmp	r6, r4
    e304:	bne.n	e2fa <__libc_init_array+0xe>
    e306:	ldr	r6, [pc, #36]	; (e32c <__libc_init_array+0x40>)
    e308:	ldr	r5, [pc, #36]	; (e330 <__libc_init_array+0x44>)
    e30a:	subs	r6, r6, r5
    e30c:	bl	136a8 <___init_veneer>
    e310:	asrs	r6, r6, #2
    e312:	beq.n	e322 <__libc_init_array+0x36>
    e314:	movs	r4, #0
    e316:	ldr.w	r3, [r5], #4
    e31a:	adds	r4, #1
    e31c:	blx	r3
    e31e:	cmp	r6, r4
    e320:	bne.n	e316 <__libc_init_array+0x2a>
    e322:	pop	{r4, r5, r6, pc}
    e324:	.word	0x60001f10
    e328:	.word	0x60001f10
    e32c:	.word	0x60001f8c
    e330:	.word	0x60001f10

0000e334 <__retarget_lock_init_recursive>:
    e334:	bx	lr
    e336:	nop

0000e338 <__retarget_lock_close_recursive>:
    e338:	bx	lr
    e33a:	nop

0000e33c <__retarget_lock_acquire_recursive>:
    e33c:	bx	lr
    e33e:	nop

0000e340 <__retarget_lock_release_recursive>:
    e340:	bx	lr
    e342:	nop
	...

0000e350 <memchr>:
    e350:	and.w	r1, r1, #255	; 0xff
    e354:	cmp	r2, #16
    e356:	blt.n	e3b0 <memchr+0x60>
    e358:	tst.w	r0, #7
    e35c:	beq.n	e370 <memchr+0x20>
    e35e:	ldrb.w	r3, [r0], #1
    e362:	subs	r2, #1
    e364:	cmp	r3, r1
    e366:	beq.n	e3c4 <memchr+0x74>
    e368:	tst.w	r0, #7
    e36c:	cbz	r2, e3c0 <memchr+0x70>
    e36e:	bne.n	e35e <memchr+0xe>
    e370:	push	{r4, r5, r6, r7}
    e372:	orr.w	r1, r1, r1, lsl #8
    e376:	orr.w	r1, r1, r1, lsl #16
    e37a:	bic.w	r4, r2, #7
    e37e:	mvns.w	r7, #0
    e382:	movs	r3, #0
    e384:	ldrd	r5, r6, [r0], #8
    e388:	subs	r4, #8
    e38a:	eor.w	r5, r5, r1
    e38e:	eor.w	r6, r6, r1
    e392:	uadd8	r5, r5, r7
    e396:	sel	r5, r3, r7
    e39a:	uadd8	r6, r6, r7
    e39e:	sel	r6, r5, r7
    e3a2:	cbnz	r6, e3c8 <memchr+0x78>
    e3a4:	bne.n	e384 <memchr+0x34>
    e3a6:	pop	{r4, r5, r6, r7}
    e3a8:	and.w	r1, r1, #255	; 0xff
    e3ac:	and.w	r2, r2, #7
    e3b0:	cbz	r2, e3c0 <memchr+0x70>
    e3b2:	ldrb.w	r3, [r0], #1
    e3b6:	subs	r2, #1
    e3b8:	eor.w	r3, r3, r1
    e3bc:	cbz	r3, e3c4 <memchr+0x74>
    e3be:	bne.n	e3b2 <memchr+0x62>
    e3c0:	movs	r0, #0
    e3c2:	bx	lr
    e3c4:	subs	r0, #1
    e3c6:	bx	lr
    e3c8:	cmp	r5, #0
    e3ca:	itte	eq
    e3cc:	moveq	r5, r6
    e3ce:	subeq	r0, #3
    e3d0:	subne	r0, #7
    e3d2:	tst.w	r5, #1
    e3d6:	bne.n	e3e8 <memchr+0x98>
    e3d8:	adds	r0, #1
    e3da:	tst.w	r5, #256	; 0x100
    e3de:	ittt	eq
    e3e0:	addeq	r0, #1
    e3e2:	tsteq.w	r5, #98304	; 0x18000
    e3e6:	addeq	r0, #1
    e3e8:	pop	{r4, r5, r6, r7}
    e3ea:	subs	r0, #1
    e3ec:	bx	lr
    e3ee:	nop
	...

0000e400 <strlen>:
    e400:	pld	[r0]
    e404:	strd	r4, r5, [sp, #-8]!
    e408:	bic.w	r1, r0, #7
    e40c:	mvn.w	ip, #0
    e410:	ands.w	r4, r0, #7
    e414:	pld	[r1, #32]
    e418:	bne.w	e4ae <strlen+0xae>
    e41c:	mov.w	r4, #0
    e420:	mvn.w	r0, #7
    e424:	ldrd	r2, r3, [r1]
    e428:	pld	[r1, #64]	; 0x40
    e42c:	add.w	r0, r0, #8
    e430:	uadd8	r2, r2, ip
    e434:	sel	r2, r4, ip
    e438:	uadd8	r3, r3, ip
    e43c:	sel	r3, r2, ip
    e440:	cbnz	r3, e496 <strlen+0x96>
    e442:	ldrd	r2, r3, [r1, #8]
    e446:	uadd8	r2, r2, ip
    e44a:	add.w	r0, r0, #8
    e44e:	sel	r2, r4, ip
    e452:	uadd8	r3, r3, ip
    e456:	sel	r3, r2, ip
    e45a:	cbnz	r3, e496 <strlen+0x96>
    e45c:	ldrd	r2, r3, [r1, #16]
    e460:	uadd8	r2, r2, ip
    e464:	add.w	r0, r0, #8
    e468:	sel	r2, r4, ip
    e46c:	uadd8	r3, r3, ip
    e470:	sel	r3, r2, ip
    e474:	cbnz	r3, e496 <strlen+0x96>
    e476:	ldrd	r2, r3, [r1, #24]
    e47a:	add.w	r1, r1, #32
    e47e:	uadd8	r2, r2, ip
    e482:	add.w	r0, r0, #8
    e486:	sel	r2, r4, ip
    e48a:	uadd8	r3, r3, ip
    e48e:	sel	r3, r2, ip
    e492:	cmp	r3, #0
    e494:	beq.n	e424 <strlen+0x24>
    e496:	cmp	r2, #0
    e498:	itt	eq
    e49a:	addeq	r0, #4
    e49c:	moveq	r2, r3
    e49e:	rev	r2, r2
    e4a0:	clz	r2, r2
    e4a4:	ldrd	r4, r5, [sp], #8
    e4a8:	add.w	r0, r0, r2, lsr #3
    e4ac:	bx	lr
    e4ae:	ldrd	r2, r3, [r1]
    e4b2:	and.w	r5, r4, #3
    e4b6:	rsb	r0, r4, #0
    e4ba:	mov.w	r5, r5, lsl #3
    e4be:	tst.w	r4, #4
    e4c2:	pld	[r1, #64]	; 0x40
    e4c6:	lsl.w	r5, ip, r5
    e4ca:	orn	r2, r2, r5
    e4ce:	itt	ne
    e4d0:	ornne	r3, r3, r5
    e4d4:	movne	r2, ip
    e4d6:	mov.w	r4, #0
    e4da:	b.n	e430 <strlen+0x30>

0000e4dc <__register_exitproc>:
    e4dc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e4e0:	ldr.w	sl, [pc, #124]	; e560 <__register_exitproc+0x84>
    e4e4:	mov	r6, r0
    e4e6:	ldr.w	r0, [sl]
    e4ea:	mov	r8, r3
    e4ec:	mov	r7, r1
    e4ee:	mov	r9, r2
    e4f0:	bl	e33c <__retarget_lock_acquire_recursive>
    e4f4:	ldr	r3, [pc, #96]	; (e558 <__register_exitproc+0x7c>)
    e4f6:	ldr	r4, [r3, #0]
    e4f8:	cbz	r4, e544 <__register_exitproc+0x68>
    e4fa:	ldr	r5, [r4, #4]
    e4fc:	cmp	r5, #31
    e4fe:	bgt.n	e54a <__register_exitproc+0x6e>
    e500:	cbnz	r6, e51a <__register_exitproc+0x3e>
    e502:	adds	r3, r5, #1
    e504:	adds	r5, #2
    e506:	ldr.w	r0, [sl]
    e50a:	str	r3, [r4, #4]
    e50c:	str.w	r7, [r4, r5, lsl #2]
    e510:	bl	e340 <__retarget_lock_release_recursive>
    e514:	movs	r0, #0
    e516:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e51a:	add.w	r1, r4, r5, lsl #2
    e51e:	movs	r3, #1
    e520:	str.w	r9, [r1, #136]	; 0x88
    e524:	ldr.w	r2, [r4, #392]	; 0x188
    e528:	lsls	r3, r5
    e52a:	orrs	r2, r3
    e52c:	cmp	r6, #2
    e52e:	str.w	r2, [r4, #392]	; 0x188
    e532:	str.w	r8, [r1, #264]	; 0x108
    e536:	bne.n	e502 <__register_exitproc+0x26>
    e538:	ldr.w	r2, [r4, #396]	; 0x18c
    e53c:	orrs	r2, r3
    e53e:	str.w	r2, [r4, #396]	; 0x18c
    e542:	b.n	e502 <__register_exitproc+0x26>
    e544:	ldr	r4, [pc, #20]	; (e55c <__register_exitproc+0x80>)
    e546:	str	r4, [r3, #0]
    e548:	b.n	e4fa <__register_exitproc+0x1e>
    e54a:	ldr.w	r0, [sl]
    e54e:	bl	e340 <__retarget_lock_release_recursive>
    e552:	mov.w	r0, #4294967295
    e556:	b.n	e516 <__register_exitproc+0x3a>
    e558:	.word	0x200065d8
    e55c:	.word	0x200065dc
    e560:	.word	0x20001490

0000e564 <_malloc_trim_r>:
    e564:	push	{r3, r4, r5, r6, r7, lr}
    e566:	ldr	r7, [pc, #144]	; (e5f8 <_malloc_trim_r+0x94>)
    e568:	mov	r4, r1
    e56a:	mov	r6, r0
    e56c:	bl	d7c0 <__malloc_lock>
    e570:	ldr	r3, [r7, #8]
    e572:	ldr	r5, [r3, #4]
    e574:	rsb	r1, r4, #4064	; 0xfe0
    e578:	adds	r1, #15
    e57a:	bic.w	r5, r5, #3
    e57e:	adds	r3, r1, r5
    e580:	bic.w	r3, r3, #4080	; 0xff0
    e584:	bic.w	r3, r3, #15
    e588:	sub.w	r4, r3, #4096	; 0x1000
    e58c:	cmp.w	r4, #4096	; 0x1000
    e590:	blt.n	e5a2 <_malloc_trim_r+0x3e>
    e592:	movs	r1, #0
    e594:	mov	r0, r6
    e596:	bl	e290 <_sbrk_r>
    e59a:	ldr	r3, [r7, #8]
    e59c:	add	r3, r5
    e59e:	cmp	r0, r3
    e5a0:	beq.n	e5ac <_malloc_trim_r+0x48>
    e5a2:	mov	r0, r6
    e5a4:	bl	d7cc <__malloc_unlock>
    e5a8:	movs	r0, #0
    e5aa:	pop	{r3, r4, r5, r6, r7, pc}
    e5ac:	negs	r1, r4
    e5ae:	mov	r0, r6
    e5b0:	bl	e290 <_sbrk_r>
    e5b4:	adds	r0, #1
    e5b6:	beq.n	e5d4 <_malloc_trim_r+0x70>
    e5b8:	ldr	r2, [pc, #64]	; (e5fc <_malloc_trim_r+0x98>)
    e5ba:	ldr	r3, [r7, #8]
    e5bc:	subs	r5, r5, r4
    e5be:	orr.w	r5, r5, #1
    e5c2:	str	r5, [r3, #4]
    e5c4:	ldr	r3, [r2, #0]
    e5c6:	mov	r0, r6
    e5c8:	subs	r3, r3, r4
    e5ca:	str	r3, [r2, #0]
    e5cc:	bl	d7cc <__malloc_unlock>
    e5d0:	movs	r0, #1
    e5d2:	pop	{r3, r4, r5, r6, r7, pc}
    e5d4:	movs	r1, #0
    e5d6:	mov	r0, r6
    e5d8:	bl	e290 <_sbrk_r>
    e5dc:	ldr	r2, [r7, #8]
    e5de:	subs	r3, r0, r2
    e5e0:	cmp	r3, #15
    e5e2:	ble.n	e5a2 <_malloc_trim_r+0x3e>
    e5e4:	orr.w	r3, r3, #1
    e5e8:	str	r3, [r2, #4]
    e5ea:	ldr	r3, [pc, #20]	; (e600 <_malloc_trim_r+0x9c>)
    e5ec:	ldr	r1, [pc, #12]	; (e5fc <_malloc_trim_r+0x98>)
    e5ee:	ldr	r3, [r3, #0]
    e5f0:	subs	r0, r0, r3
    e5f2:	str	r0, [r1, #0]
    e5f4:	b.n	e5a2 <_malloc_trim_r+0x3e>
    e5f6:	nop
    e5f8:	.word	0x20001608
    e5fc:	.word	0x20006778
    e600:	.word	0x20001a10

0000e604 <_free_r>:
    e604:	cmp	r1, #0
    e606:	beq.n	e6cc <_free_r+0xc8>
    e608:	push	{r3, r4, r5, r6, r7, lr}
    e60a:	mov	r4, r1
    e60c:	mov	r6, r0
    e60e:	bl	d7c0 <__malloc_lock>
    e612:	ldr.w	r2, [r4, #-4]
    e616:	ldr	r7, [pc, #492]	; (e804 <_free_r+0x200>)
    e618:	sub.w	r5, r4, #8
    e61c:	bic.w	r1, r2, #1
    e620:	add.w	ip, r5, r1
    e624:	ldr	r0, [r7, #8]
    e626:	ldr.w	r3, [ip, #4]
    e62a:	cmp	r0, ip
    e62c:	bic.w	r3, r3, #3
    e630:	beq.w	e74a <_free_r+0x146>
    e634:	lsls	r2, r2, #31
    e636:	str.w	r3, [ip, #4]
    e63a:	bmi.n	e6a2 <_free_r+0x9e>
    e63c:	ldr.w	r2, [r4, #-8]
    e640:	subs	r5, r5, r2
    e642:	add	r1, r2
    e644:	ldr	r2, [r5, #8]
    e646:	add.w	r0, r7, #8
    e64a:	cmp	r2, r0
    e64c:	beq.n	e724 <_free_r+0x120>
    e64e:	add.w	r4, ip, r3
    e652:	ldr.w	lr, [r4, #4]
    e656:	ldr	r4, [r5, #12]
    e658:	str	r4, [r2, #12]
    e65a:	tst.w	lr, #1
    e65e:	str	r2, [r4, #8]
    e660:	beq.w	e792 <_free_r+0x18e>
    e664:	orr.w	r3, r1, #1
    e668:	str	r3, [r5, #4]
    e66a:	str.w	r1, [ip]
    e66e:	cmp.w	r1, #512	; 0x200
    e672:	bcs.n	e6e0 <_free_r+0xdc>
    e674:	ldr	r0, [r7, #4]
    e676:	lsrs	r3, r1, #3
    e678:	movs	r2, #1
    e67a:	lsrs	r1, r1, #5
    e67c:	adds	r3, #1
    e67e:	lsls	r2, r1
    e680:	orrs	r2, r0
    e682:	ldr.w	r1, [r7, r3, lsl #3]
    e686:	str	r2, [r7, #4]
    e688:	add.w	r2, r7, r3, lsl #3
    e68c:	subs	r2, #8
    e68e:	strd	r1, r2, [r5, #8]
    e692:	str.w	r5, [r7, r3, lsl #3]
    e696:	str	r5, [r1, #12]
    e698:	mov	r0, r6
    e69a:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    e69e:	b.w	d7cc <__malloc_unlock>
    e6a2:	add.w	r2, ip, r3
    e6a6:	ldr	r2, [r2, #4]
    e6a8:	lsls	r0, r2, #31
    e6aa:	bmi.n	e6ce <_free_r+0xca>
    e6ac:	add	r1, r3
    e6ae:	add.w	r0, r7, #8
    e6b2:	ldr.w	r3, [ip, #8]
    e6b6:	cmp	r3, r0
    e6b8:	beq.n	e7a2 <_free_r+0x19e>
    e6ba:	ldr.w	r2, [ip, #12]
    e6be:	str	r2, [r3, #12]
    e6c0:	str	r3, [r2, #8]
    e6c2:	orr.w	r3, r1, #1
    e6c6:	str	r3, [r5, #4]
    e6c8:	str	r1, [r5, r1]
    e6ca:	b.n	e66e <_free_r+0x6a>
    e6cc:	bx	lr
    e6ce:	orr.w	r3, r1, #1
    e6d2:	cmp.w	r1, #512	; 0x200
    e6d6:	str.w	r3, [r4, #-4]
    e6da:	str.w	r1, [ip]
    e6de:	bcc.n	e674 <_free_r+0x70>
    e6e0:	cmp.w	r1, #2560	; 0xa00
    e6e4:	mov.w	r3, r1, lsr #9
    e6e8:	bcs.n	e77c <_free_r+0x178>
    e6ea:	lsrs	r3, r1, #6
    e6ec:	add.w	r0, r3, #57	; 0x39
    e6f0:	add.w	r2, r3, #56	; 0x38
    e6f4:	lsls	r3, r0, #3
    e6f6:	adds	r0, r7, r3
    e6f8:	ldr	r3, [r7, r3]
    e6fa:	subs	r0, #8
    e6fc:	cmp	r0, r3
    e6fe:	beq.n	e7b4 <_free_r+0x1b0>
    e700:	ldr	r2, [r3, #4]
    e702:	bic.w	r2, r2, #3
    e706:	cmp	r2, r1
    e708:	bls.n	e710 <_free_r+0x10c>
    e70a:	ldr	r3, [r3, #8]
    e70c:	cmp	r0, r3
    e70e:	bne.n	e700 <_free_r+0xfc>
    e710:	ldr	r0, [r3, #12]
    e712:	strd	r3, r0, [r5, #8]
    e716:	str	r5, [r0, #8]
    e718:	str	r5, [r3, #12]
    e71a:	mov	r0, r6
    e71c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    e720:	b.w	d7cc <__malloc_unlock>
    e724:	add.w	r2, ip, r3
    e728:	ldr	r2, [r2, #4]
    e72a:	lsls	r2, r2, #31
    e72c:	bmi.n	e7f6 <_free_r+0x1f2>
    e72e:	add	r3, r1
    e730:	ldrd	r1, r2, [ip, #8]
    e734:	str	r2, [r1, #12]
    e736:	str	r1, [r2, #8]
    e738:	orr.w	r2, r3, #1
    e73c:	str	r2, [r5, #4]
    e73e:	mov	r0, r6
    e740:	str	r3, [r5, r3]
    e742:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    e746:	b.w	d7cc <__malloc_unlock>
    e74a:	add	r3, r1
    e74c:	lsls	r1, r2, #31
    e74e:	bmi.n	e760 <_free_r+0x15c>
    e750:	ldr.w	r2, [r4, #-8]
    e754:	subs	r5, r5, r2
    e756:	add	r3, r2
    e758:	ldrd	r1, r2, [r5, #8]
    e75c:	str	r2, [r1, #12]
    e75e:	str	r1, [r2, #8]
    e760:	orr.w	r2, r3, #1
    e764:	str	r2, [r5, #4]
    e766:	ldr	r2, [pc, #160]	; (e808 <_free_r+0x204>)
    e768:	str	r5, [r7, #8]
    e76a:	ldr	r2, [r2, #0]
    e76c:	cmp	r2, r3
    e76e:	bhi.n	e698 <_free_r+0x94>
    e770:	ldr	r3, [pc, #152]	; (e80c <_free_r+0x208>)
    e772:	mov	r0, r6
    e774:	ldr	r1, [r3, #0]
    e776:	bl	e564 <_malloc_trim_r>
    e77a:	b.n	e698 <_free_r+0x94>
    e77c:	cmp	r3, #20
    e77e:	bls.n	e796 <_free_r+0x192>
    e780:	cmp	r3, #84	; 0x54
    e782:	bhi.n	e7c4 <_free_r+0x1c0>
    e784:	lsrs	r3, r1, #12
    e786:	add.w	r0, r3, #111	; 0x6f
    e78a:	add.w	r2, r3, #110	; 0x6e
    e78e:	lsls	r3, r0, #3
    e790:	b.n	e6f6 <_free_r+0xf2>
    e792:	add	r1, r3
    e794:	b.n	e6b2 <_free_r+0xae>
    e796:	add.w	r0, r3, #92	; 0x5c
    e79a:	add.w	r2, r3, #91	; 0x5b
    e79e:	lsls	r3, r0, #3
    e7a0:	b.n	e6f6 <_free_r+0xf2>
    e7a2:	orr.w	r3, r1, #1
    e7a6:	strd	r5, r5, [r7, #16]
    e7aa:	strd	r0, r0, [r5, #8]
    e7ae:	str	r3, [r5, #4]
    e7b0:	str	r1, [r5, r1]
    e7b2:	b.n	e698 <_free_r+0x94>
    e7b4:	ldr	r1, [r7, #4]
    e7b6:	asrs	r2, r2, #2
    e7b8:	movs	r4, #1
    e7ba:	lsl.w	r2, r4, r2
    e7be:	orrs	r2, r1
    e7c0:	str	r2, [r7, #4]
    e7c2:	b.n	e712 <_free_r+0x10e>
    e7c4:	cmp.w	r3, #340	; 0x154
    e7c8:	bhi.n	e7d8 <_free_r+0x1d4>
    e7ca:	lsrs	r3, r1, #15
    e7cc:	add.w	r0, r3, #120	; 0x78
    e7d0:	add.w	r2, r3, #119	; 0x77
    e7d4:	lsls	r3, r0, #3
    e7d6:	b.n	e6f6 <_free_r+0xf2>
    e7d8:	movw	r2, #1364	; 0x554
    e7dc:	cmp	r3, r2
    e7de:	bhi.n	e7ee <_free_r+0x1ea>
    e7e0:	lsrs	r3, r1, #18
    e7e2:	add.w	r0, r3, #125	; 0x7d
    e7e6:	add.w	r2, r3, #124	; 0x7c
    e7ea:	lsls	r3, r0, #3
    e7ec:	b.n	e6f6 <_free_r+0xf2>
    e7ee:	mov.w	r3, #1016	; 0x3f8
    e7f2:	movs	r2, #126	; 0x7e
    e7f4:	b.n	e6f6 <_free_r+0xf2>
    e7f6:	orr.w	r3, r1, #1
    e7fa:	str	r3, [r5, #4]
    e7fc:	str.w	r1, [ip]
    e800:	b.n	e698 <_free_r+0x94>
    e802:	nop
    e804:	.word	0x20001608
    e808:	.word	0x20001a14
    e80c:	.word	0x200067a8

0000e810 <__ascii_mbtowc>:
    e810:	sub	sp, #8
    e812:	cbz	r1, e828 <__ascii_mbtowc+0x18>
    e814:	cbz	r2, e82e <__ascii_mbtowc+0x1e>
    e816:	cbz	r3, e834 <__ascii_mbtowc+0x24>
    e818:	ldrb	r3, [r2, #0]
    e81a:	str	r3, [r1, #0]
    e81c:	ldrb	r2, [r2, #0]
    e81e:	subs	r0, r2, #0
    e820:	it	ne
    e822:	movne	r0, #1
    e824:	add	sp, #8
    e826:	bx	lr
    e828:	add	r1, sp, #4
    e82a:	cmp	r2, #0
    e82c:	bne.n	e816 <__ascii_mbtowc+0x6>
    e82e:	mov	r0, r2
    e830:	add	sp, #8
    e832:	bx	lr
    e834:	mvn.w	r0, #1
    e838:	b.n	e824 <__ascii_mbtowc+0x14>
    e83a:	nop

0000e83c <_Balloc>:
    e83c:	ldr	r3, [r0, #68]	; 0x44
    e83e:	push	{r4, r5, r6, lr}
    e840:	mov	r5, r0
    e842:	mov	r4, r1
    e844:	cbz	r3, e85a <_Balloc+0x1e>
    e846:	ldr.w	r0, [r3, r4, lsl #2]
    e84a:	cbz	r0, e86e <_Balloc+0x32>
    e84c:	ldr	r2, [r0, #0]
    e84e:	str.w	r2, [r3, r4, lsl #2]
    e852:	movs	r3, #0
    e854:	strd	r3, r3, [r0, #12]
    e858:	pop	{r4, r5, r6, pc}
    e85a:	movs	r2, #33	; 0x21
    e85c:	movs	r1, #4
    e85e:	bl	10e20 <_calloc_r>
    e862:	mov	r3, r0
    e864:	str	r0, [r5, #68]	; 0x44
    e866:	cmp	r0, #0
    e868:	bne.n	e846 <_Balloc+0xa>
    e86a:	movs	r0, #0
    e86c:	pop	{r4, r5, r6, pc}
    e86e:	movs	r1, #1
    e870:	lsl.w	r6, r1, r4
    e874:	adds	r2, r6, #5
    e876:	lsls	r2, r2, #2
    e878:	mov	r0, r5
    e87a:	bl	10e20 <_calloc_r>
    e87e:	cmp	r0, #0
    e880:	beq.n	e86a <_Balloc+0x2e>
    e882:	strd	r4, r6, [r0, #4]
    e886:	b.n	e852 <_Balloc+0x16>

0000e888 <_Bfree>:
    e888:	cbz	r1, e898 <_Bfree+0x10>
    e88a:	ldr	r3, [r0, #68]	; 0x44
    e88c:	ldr	r2, [r1, #4]
    e88e:	ldr.w	r0, [r3, r2, lsl #2]
    e892:	str	r0, [r1, #0]
    e894:	str.w	r1, [r3, r2, lsl #2]
    e898:	bx	lr
    e89a:	nop

0000e89c <__multadd>:
    e89c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e8a0:	ldr	r6, [r1, #16]
    e8a2:	mov	r8, r0
    e8a4:	mov	r7, r1
    e8a6:	mov	r5, r3
    e8a8:	add.w	lr, r1, #20
    e8ac:	movs	r0, #0
    e8ae:	ldr.w	r1, [lr]
    e8b2:	uxth	r4, r1
    e8b4:	mla	r3, r2, r4, r5
    e8b8:	lsrs	r1, r1, #16
    e8ba:	mov.w	ip, r3, lsr #16
    e8be:	mla	ip, r2, r1, ip
    e8c2:	adds	r0, #1
    e8c4:	uxth	r4, r3
    e8c6:	add.w	r4, r4, ip, lsl #16
    e8ca:	cmp	r6, r0
    e8cc:	str.w	r4, [lr], #4
    e8d0:	mov.w	r5, ip, lsr #16
    e8d4:	bgt.n	e8ae <__multadd+0x12>
    e8d6:	cbz	r5, e8e8 <__multadd+0x4c>
    e8d8:	ldr	r3, [r7, #8]
    e8da:	cmp	r3, r6
    e8dc:	ble.n	e8ee <__multadd+0x52>
    e8de:	add.w	r3, r7, r6, lsl #2
    e8e2:	adds	r6, #1
    e8e4:	str	r5, [r3, #20]
    e8e6:	str	r6, [r7, #16]
    e8e8:	mov	r0, r7
    e8ea:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e8ee:	ldr	r1, [r7, #4]
    e8f0:	mov	r0, r8
    e8f2:	adds	r1, #1
    e8f4:	bl	e83c <_Balloc>
    e8f8:	mov	r4, r0
    e8fa:	cbz	r0, e92a <__multadd+0x8e>
    e8fc:	ldr	r2, [r7, #16]
    e8fe:	adds	r2, #2
    e900:	add.w	r1, r7, #12
    e904:	lsls	r2, r2, #2
    e906:	adds	r0, #12
    e908:	bl	a0d4 <memcpy>
    e90c:	ldr.w	r3, [r8, #68]	; 0x44
    e910:	ldr	r2, [r7, #4]
    e912:	ldr.w	r1, [r3, r2, lsl #2]
    e916:	str	r1, [r7, #0]
    e918:	str.w	r7, [r3, r2, lsl #2]
    e91c:	mov	r7, r4
    e91e:	add.w	r3, r7, r6, lsl #2
    e922:	adds	r6, #1
    e924:	str	r5, [r3, #20]
    e926:	str	r6, [r7, #16]
    e928:	b.n	e8e8 <__multadd+0x4c>
    e92a:	ldr	r3, [pc, #12]	; (e938 <__multadd+0x9c>)
    e92c:	ldr	r0, [pc, #12]	; (e93c <__multadd+0xa0>)
    e92e:	mov	r2, r4
    e930:	movs	r1, #186	; 0xba
    e932:	bl	10de0 <__assert_func>
    e936:	nop
    e938:	.word	0x20000c78
    e93c:	.word	0x20000c8c

0000e940 <__hi0bits>:
    e940:	lsrs	r3, r0, #16
    e942:	lsls	r3, r3, #16
    e944:	cbnz	r3, e97c <__hi0bits+0x3c>
    e946:	lsls	r0, r0, #16
    e948:	movs	r3, #16
    e94a:	tst.w	r0, #4278190080	; 0xff000000
    e94e:	itt	eq
    e950:	lsleq	r0, r0, #8
    e952:	addeq	r3, #8
    e954:	tst.w	r0, #4026531840	; 0xf0000000
    e958:	itt	eq
    e95a:	lsleq	r0, r0, #4
    e95c:	addeq	r3, #4
    e95e:	tst.w	r0, #3221225472	; 0xc0000000
    e962:	itt	eq
    e964:	lsleq	r0, r0, #2
    e966:	addeq	r3, #2
    e968:	cmp	r0, #0
    e96a:	blt.n	e978 <__hi0bits+0x38>
    e96c:	tst.w	r0, #1073741824	; 0x40000000
    e970:	add.w	r3, r3, #1
    e974:	it	eq
    e976:	moveq	r3, #32
    e978:	mov	r0, r3
    e97a:	bx	lr
    e97c:	movs	r3, #0
    e97e:	b.n	e94a <__hi0bits+0xa>

0000e980 <__lo0bits>:
    e980:	ldr	r3, [r0, #0]
    e982:	ands.w	r2, r3, #7
    e986:	beq.n	e99a <__lo0bits+0x1a>
    e988:	lsls	r1, r3, #31
    e98a:	bmi.n	e9cc <__lo0bits+0x4c>
    e98c:	lsls	r2, r3, #30
    e98e:	bpl.n	e9d6 <__lo0bits+0x56>
    e990:	lsrs	r3, r3, #1
    e992:	str	r3, [r0, #0]
    e994:	movs	r2, #1
    e996:	mov	r0, r2
    e998:	bx	lr
    e99a:	uxth	r1, r3
    e99c:	cbnz	r1, e9a2 <__lo0bits+0x22>
    e99e:	lsrs	r3, r3, #16
    e9a0:	movs	r2, #16
    e9a2:	uxtb	r1, r3
    e9a4:	cbnz	r1, e9aa <__lo0bits+0x2a>
    e9a6:	adds	r2, #8
    e9a8:	lsrs	r3, r3, #8
    e9aa:	lsls	r1, r3, #28
    e9ac:	itt	eq
    e9ae:	lsreq	r3, r3, #4
    e9b0:	addeq	r2, #4
    e9b2:	lsls	r1, r3, #30
    e9b4:	itt	eq
    e9b6:	lsreq	r3, r3, #2
    e9b8:	addeq	r2, #2
    e9ba:	lsls	r1, r3, #31
    e9bc:	bmi.n	e9c6 <__lo0bits+0x46>
    e9be:	lsrs	r3, r3, #1
    e9c0:	add.w	r2, r2, #1
    e9c4:	beq.n	e9d2 <__lo0bits+0x52>
    e9c6:	str	r3, [r0, #0]
    e9c8:	mov	r0, r2
    e9ca:	bx	lr
    e9cc:	movs	r2, #0
    e9ce:	mov	r0, r2
    e9d0:	bx	lr
    e9d2:	movs	r2, #32
    e9d4:	b.n	e996 <__lo0bits+0x16>
    e9d6:	lsrs	r3, r3, #2
    e9d8:	movs	r2, #2
    e9da:	str	r3, [r0, #0]
    e9dc:	mov	r0, r2
    e9de:	bx	lr

0000e9e0 <__i2b>:
    e9e0:	push	{r3, r4, r5, lr}
    e9e2:	ldr	r3, [r0, #68]	; 0x44
    e9e4:	mov	r4, r0
    e9e6:	mov	r5, r1
    e9e8:	cbz	r3, e9fe <__i2b+0x1e>
    e9ea:	ldr	r0, [r3, #4]
    e9ec:	cbz	r0, ea1c <__i2b+0x3c>
    e9ee:	ldr	r2, [r0, #0]
    e9f0:	str	r2, [r3, #4]
    e9f2:	movs	r2, #0
    e9f4:	movs	r3, #1
    e9f6:	strd	r3, r5, [r0, #16]
    e9fa:	str	r2, [r0, #12]
    e9fc:	pop	{r3, r4, r5, pc}
    e9fe:	movs	r2, #33	; 0x21
    ea00:	movs	r1, #4
    ea02:	bl	10e20 <_calloc_r>
    ea06:	mov	r3, r0
    ea08:	str	r0, [r4, #68]	; 0x44
    ea0a:	cmp	r0, #0
    ea0c:	bne.n	e9ea <__i2b+0xa>
    ea0e:	ldr	r3, [pc, #36]	; (ea34 <__i2b+0x54>)
    ea10:	ldr	r0, [pc, #36]	; (ea38 <__i2b+0x58>)
    ea12:	movs	r2, #0
    ea14:	movw	r1, #325	; 0x145
    ea18:	bl	10de0 <__assert_func>
    ea1c:	movs	r2, #28
    ea1e:	movs	r1, #1
    ea20:	mov	r0, r4
    ea22:	bl	10e20 <_calloc_r>
    ea26:	cmp	r0, #0
    ea28:	beq.n	ea0e <__i2b+0x2e>
    ea2a:	movs	r2, #1
    ea2c:	movs	r3, #2
    ea2e:	strd	r2, r3, [r0, #4]
    ea32:	b.n	e9f2 <__i2b+0x12>
    ea34:	.word	0x20000c78
    ea38:	.word	0x20000c8c

0000ea3c <__multiply>:
    ea3c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ea40:	ldr	r6, [r1, #16]
    ea42:	ldr	r5, [r2, #16]
    ea44:	cmp	r6, r5
    ea46:	sub	sp, #20
    ea48:	mov	r8, r1
    ea4a:	mov	r4, r2
    ea4c:	blt.n	ea5a <__multiply+0x1e>
    ea4e:	mov	r2, r5
    ea50:	mov	r3, r4
    ea52:	mov	r5, r6
    ea54:	mov	r4, r1
    ea56:	mov	r6, r2
    ea58:	mov	r8, r3
    ea5a:	ldr	r3, [r4, #8]
    ea5c:	ldr	r1, [r4, #4]
    ea5e:	adds	r7, r5, r6
    ea60:	cmp	r3, r7
    ea62:	it	lt
    ea64:	addlt	r1, #1
    ea66:	bl	e83c <_Balloc>
    ea6a:	str	r0, [sp, #4]
    ea6c:	cmp	r0, #0
    ea6e:	beq.w	eb80 <__multiply+0x144>
    ea72:	ldr	r3, [sp, #4]
    ea74:	add.w	r9, r3, #20
    ea78:	add.w	sl, r9, r7, lsl #2
    ea7c:	cmp	r9, sl
    ea7e:	bcs.n	ea8c <__multiply+0x50>
    ea80:	mov	r3, r9
    ea82:	movs	r2, #0
    ea84:	str.w	r2, [r3], #4
    ea88:	cmp	sl, r3
    ea8a:	bhi.n	ea84 <__multiply+0x48>
    ea8c:	add.w	r8, r8, #20
    ea90:	add.w	fp, r8, r6, lsl #2
    ea94:	add.w	r3, r4, #20
    ea98:	cmp	r8, fp
    ea9a:	mov	r2, r3
    ea9c:	add.w	r5, r3, r5, lsl #2
    eaa0:	bcs.n	eb62 <__multiply+0x126>
    eaa2:	subs	r3, r5, r4
    eaa4:	subs	r3, #21
    eaa6:	bic.w	r3, r3, #3
    eaaa:	adds	r3, #4
    eaac:	adds	r4, #21
    eaae:	cmp	r5, r4
    eab0:	it	cc
    eab2:	movcc	r3, #4
    eab4:	strd	sl, r7, [sp, #8]
    eab8:	mov	ip, r5
    eaba:	mov	r7, r3
    eabc:	mov	sl, r2
    eabe:	b.n	eacc <__multiply+0x90>
    eac0:	lsrs	r1, r1, #16
    eac2:	bne.n	eb18 <__multiply+0xdc>
    eac4:	cmp	fp, r8
    eac6:	add.w	r9, r9, #4
    eaca:	bls.n	eb5e <__multiply+0x122>
    eacc:	ldr.w	r1, [r8], #4
    ead0:	uxth	r5, r1
    ead2:	cmp	r5, #0
    ead4:	beq.n	eac0 <__multiply+0x84>
    ead6:	mov	r6, sl
    ead8:	mov	r4, r9
    eada:	movs	r3, #0
    eadc:	ldr.w	r1, [r6], #4
    eae0:	ldr	r2, [r4, #0]
    eae2:	uxth.w	lr, r1
    eae6:	uxth	r0, r2
    eae8:	lsrs	r1, r1, #16
    eaea:	mla	r0, r5, lr, r0
    eaee:	lsrs	r2, r2, #16
    eaf0:	add	r3, r0
    eaf2:	mla	r2, r5, r1, r2
    eaf6:	add.w	r2, r2, r3, lsr #16
    eafa:	uxth	r3, r3
    eafc:	orr.w	r3, r3, r2, lsl #16
    eb00:	cmp	ip, r6
    eb02:	str.w	r3, [r4], #4
    eb06:	mov.w	r3, r2, lsr #16
    eb0a:	bhi.n	eadc <__multiply+0xa0>
    eb0c:	str.w	r3, [r9, r7]
    eb10:	ldr.w	r1, [r8, #-4]
    eb14:	lsrs	r1, r1, #16
    eb16:	beq.n	eac4 <__multiply+0x88>
    eb18:	ldr.w	r3, [r9]
    eb1c:	mov	r0, sl
    eb1e:	mov	r2, r3
    eb20:	mov	r4, r9
    eb22:	movs	r6, #0
    eb24:	ldrh	r5, [r0, #0]
    eb26:	lsrs	r2, r2, #16
    eb28:	mla	r2, r1, r5, r2
    eb2c:	add	r6, r2
    eb2e:	uxth	r3, r3
    eb30:	orr.w	r3, r3, r6, lsl #16
    eb34:	str.w	r3, [r4], #4
    eb38:	ldr.w	r5, [r0], #4
    eb3c:	ldr	r2, [r4, #0]
    eb3e:	lsrs	r5, r5, #16
    eb40:	uxth	r3, r2
    eb42:	mla	r3, r1, r5, r3
    eb46:	add.w	r3, r3, r6, lsr #16
    eb4a:	cmp	ip, r0
    eb4c:	mov.w	r6, r3, lsr #16
    eb50:	bhi.n	eb24 <__multiply+0xe8>
    eb52:	cmp	fp, r8
    eb54:	str.w	r3, [r9, r7]
    eb58:	add.w	r9, r9, #4
    eb5c:	bhi.n	eacc <__multiply+0x90>
    eb5e:	ldrd	sl, r7, [sp, #8]
    eb62:	cmp	r7, #0
    eb64:	bgt.n	eb6c <__multiply+0x130>
    eb66:	b.n	eb74 <__multiply+0x138>
    eb68:	subs	r7, #1
    eb6a:	beq.n	eb74 <__multiply+0x138>
    eb6c:	ldr.w	r3, [sl, #-4]!
    eb70:	cmp	r3, #0
    eb72:	beq.n	eb68 <__multiply+0x12c>
    eb74:	ldr	r3, [sp, #4]
    eb76:	mov	r0, r3
    eb78:	str	r7, [r3, #16]
    eb7a:	add	sp, #20
    eb7c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    eb80:	ldr	r3, [pc, #12]	; (eb90 <__multiply+0x154>)
    eb82:	ldr	r0, [pc, #16]	; (eb94 <__multiply+0x158>)
    eb84:	ldr	r2, [sp, #4]
    eb86:	mov.w	r1, #354	; 0x162
    eb8a:	bl	10de0 <__assert_func>
    eb8e:	nop
    eb90:	.word	0x20000c78
    eb94:	.word	0x20000c8c

0000eb98 <__pow5mult>:
    eb98:	ands.w	r3, r2, #3
    eb9c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    eba0:	mov	r4, r2
    eba2:	mov	r6, r0
    eba4:	bne.n	ec0c <__pow5mult+0x74>
    eba6:	mov	r5, r1
    eba8:	asrs	r4, r4, #2
    ebaa:	beq.n	ebee <__pow5mult+0x56>
    ebac:	ldr.w	r8, [r6, #64]	; 0x40
    ebb0:	cmp.w	r8, #0
    ebb4:	beq.n	ec1e <__pow5mult+0x86>
    ebb6:	lsls	r3, r4, #31
    ebb8:	mov.w	r7, #0
    ebbc:	bmi.n	ebce <__pow5mult+0x36>
    ebbe:	asrs	r4, r4, #1
    ebc0:	beq.n	ebee <__pow5mult+0x56>
    ebc2:	ldr.w	r0, [r8]
    ebc6:	cbz	r0, ebf4 <__pow5mult+0x5c>
    ebc8:	mov	r8, r0
    ebca:	lsls	r3, r4, #31
    ebcc:	bpl.n	ebbe <__pow5mult+0x26>
    ebce:	mov	r2, r8
    ebd0:	mov	r1, r5
    ebd2:	mov	r0, r6
    ebd4:	bl	ea3c <__multiply>
    ebd8:	cbz	r5, ec08 <__pow5mult+0x70>
    ebda:	ldr	r1, [r5, #4]
    ebdc:	ldr	r3, [r6, #68]	; 0x44
    ebde:	asrs	r4, r4, #1
    ebe0:	ldr.w	r2, [r3, r1, lsl #2]
    ebe4:	str	r2, [r5, #0]
    ebe6:	str.w	r5, [r3, r1, lsl #2]
    ebea:	mov	r5, r0
    ebec:	bne.n	ebc2 <__pow5mult+0x2a>
    ebee:	mov	r0, r5
    ebf0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ebf4:	mov	r2, r8
    ebf6:	mov	r1, r8
    ebf8:	mov	r0, r6
    ebfa:	bl	ea3c <__multiply>
    ebfe:	str.w	r0, [r8]
    ec02:	str	r7, [r0, #0]
    ec04:	mov	r8, r0
    ec06:	b.n	ebca <__pow5mult+0x32>
    ec08:	mov	r5, r0
    ec0a:	b.n	ebbe <__pow5mult+0x26>
    ec0c:	subs	r3, #1
    ec0e:	ldr	r2, [pc, #60]	; (ec4c <__pow5mult+0xb4>)
    ec10:	ldr.w	r2, [r2, r3, lsl #2]
    ec14:	movs	r3, #0
    ec16:	bl	e89c <__multadd>
    ec1a:	mov	r5, r0
    ec1c:	b.n	eba8 <__pow5mult+0x10>
    ec1e:	movs	r1, #1
    ec20:	mov	r0, r6
    ec22:	bl	e83c <_Balloc>
    ec26:	mov	r8, r0
    ec28:	cbz	r0, ec3c <__pow5mult+0xa4>
    ec2a:	movs	r3, #1
    ec2c:	movw	r2, #625	; 0x271
    ec30:	strd	r3, r2, [r0, #16]
    ec34:	movs	r3, #0
    ec36:	str	r0, [r6, #64]	; 0x40
    ec38:	str	r3, [r0, #0]
    ec3a:	b.n	ebb6 <__pow5mult+0x1e>
    ec3c:	ldr	r3, [pc, #16]	; (ec50 <__pow5mult+0xb8>)
    ec3e:	ldr	r0, [pc, #20]	; (ec54 <__pow5mult+0xbc>)
    ec40:	mov	r2, r8
    ec42:	movw	r1, #325	; 0x145
    ec46:	bl	10de0 <__assert_func>
    ec4a:	nop
    ec4c:	.word	0x20001250
    ec50:	.word	0x20000c78
    ec54:	.word	0x20000c8c

0000ec58 <__lshift>:
    ec58:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ec5c:	mov	r5, r1
    ec5e:	mov	r4, r2
    ec60:	ldr	r7, [r5, #16]
    ec62:	ldr	r3, [r5, #8]
    ec64:	ldr	r1, [r1, #4]
    ec66:	add.w	r7, r7, r2, asr #5
    ec6a:	adds	r6, r7, #1
    ec6c:	cmp	r6, r3
    ec6e:	mov	r8, r0
    ec70:	mov.w	r9, r2, asr #5
    ec74:	ble.n	ec80 <__lshift+0x28>
    ec76:	lsls	r3, r3, #1
    ec78:	cmp	r6, r3
    ec7a:	add.w	r1, r1, #1
    ec7e:	bgt.n	ec76 <__lshift+0x1e>
    ec80:	mov	r0, r8
    ec82:	bl	e83c <_Balloc>
    ec86:	mov	ip, r0
    ec88:	cmp	r0, #0
    ec8a:	beq.n	ed32 <__lshift+0xda>
    ec8c:	cmp.w	r9, #0
    ec90:	add.w	r2, r0, #20
    ec94:	ble.n	ecb4 <__lshift+0x5c>
    ec96:	add.w	r1, r9, #5
    ec9a:	mov.w	lr, r1, lsl #2
    ec9e:	mov	r3, r2
    eca0:	add.w	r1, r0, r1, lsl #2
    eca4:	movs	r0, #0
    eca6:	str.w	r0, [r3], #4
    ecaa:	cmp	r3, r1
    ecac:	bne.n	eca6 <__lshift+0x4e>
    ecae:	sub.w	r3, lr, #20
    ecb2:	add	r2, r3
    ecb4:	ldr	r1, [r5, #16]
    ecb6:	add.w	r3, r5, #20
    ecba:	ands.w	lr, r4, #31
    ecbe:	add.w	r1, r3, r1, lsl #2
    ecc2:	beq.n	ed22 <__lshift+0xca>
    ecc4:	rsb	r9, lr, #32
    ecc8:	mov	r0, r2
    ecca:	mov.w	sl, #0
    ecce:	ldr	r4, [r3, #0]
    ecd0:	lsl.w	r4, r4, lr
    ecd4:	orr.w	r4, r4, sl
    ecd8:	str.w	r4, [r0], #4
    ecdc:	ldr.w	r4, [r3], #4
    ece0:	cmp	r1, r3
    ece2:	lsr.w	sl, r4, r9
    ece6:	bhi.n	ecce <__lshift+0x76>
    ece8:	subs	r3, r1, r5
    ecea:	subs	r3, #21
    ecec:	bic.w	r3, r3, #3
    ecf0:	adds	r3, #4
    ecf2:	add.w	r0, r5, #21
    ecf6:	cmp	r1, r0
    ecf8:	it	cc
    ecfa:	movcc	r3, #4
    ecfc:	cmp.w	sl, #0
    ed00:	it	ne
    ed02:	movne	r7, r6
    ed04:	str.w	sl, [r2, r3]
    ed08:	ldr.w	r3, [r8, #68]	; 0x44
    ed0c:	ldr	r2, [r5, #4]
    ed0e:	str.w	r7, [ip, #16]
    ed12:	ldr.w	r1, [r3, r2, lsl #2]
    ed16:	str	r1, [r5, #0]
    ed18:	mov	r0, ip
    ed1a:	str.w	r5, [r3, r2, lsl #2]
    ed1e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ed22:	subs	r2, #4
    ed24:	ldr.w	r0, [r3], #4
    ed28:	str.w	r0, [r2, #4]!
    ed2c:	cmp	r1, r3
    ed2e:	bhi.n	ed24 <__lshift+0xcc>
    ed30:	b.n	ed08 <__lshift+0xb0>
    ed32:	ldr	r3, [pc, #12]	; (ed40 <__lshift+0xe8>)
    ed34:	ldr	r0, [pc, #12]	; (ed44 <__lshift+0xec>)
    ed36:	mov	r2, ip
    ed38:	mov.w	r1, #478	; 0x1de
    ed3c:	bl	10de0 <__assert_func>
    ed40:	.word	0x20000c78
    ed44:	.word	0x20000c8c

0000ed48 <__mcmp>:
    ed48:	ldr	r3, [r1, #16]
    ed4a:	mov	ip, r0
    ed4c:	ldr	r0, [r0, #16]
    ed4e:	subs	r0, r0, r3
    ed50:	bne.n	ed80 <__mcmp+0x38>
    ed52:	add.w	ip, ip, #20
    ed56:	adds	r1, #20
    ed58:	add.w	r2, ip, r3, lsl #2
    ed5c:	push	{r4}
    ed5e:	add.w	r3, r1, r3, lsl #2
    ed62:	b.n	ed68 <__mcmp+0x20>
    ed64:	cmp	ip, r2
    ed66:	bcs.n	ed7a <__mcmp+0x32>
    ed68:	ldr.w	r4, [r2, #-4]!
    ed6c:	ldr.w	r1, [r3, #-4]!
    ed70:	cmp	r4, r1
    ed72:	beq.n	ed64 <__mcmp+0x1c>
    ed74:	bcs.n	ed82 <__mcmp+0x3a>
    ed76:	mov.w	r0, #4294967295
    ed7a:	ldr.w	r4, [sp], #4
    ed7e:	bx	lr
    ed80:	bx	lr
    ed82:	movs	r0, #1
    ed84:	ldr.w	r4, [sp], #4
    ed88:	bx	lr
    ed8a:	nop

0000ed8c <__mdiff>:
    ed8c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ed90:	ldr	r7, [r1, #16]
    ed92:	ldr	r3, [r2, #16]
    ed94:	subs	r7, r7, r3
    ed96:	cmp	r7, #0
    ed98:	mov	r6, r1
    ed9a:	mov	r8, r2
    ed9c:	bne.n	ee9e <__mdiff+0x112>
    ed9e:	add.w	r5, r1, #20
    eda2:	adds	r2, #20
    eda4:	add.w	r2, r2, r3, lsl #2
    eda8:	add.w	r3, r5, r3, lsl #2
    edac:	b.n	edb2 <__mdiff+0x26>
    edae:	cmp	r5, r3
    edb0:	bcs.n	eea4 <__mdiff+0x118>
    edb2:	ldr.w	r1, [r3, #-4]!
    edb6:	ldr.w	r4, [r2, #-4]!
    edba:	cmp	r1, r4
    edbc:	beq.n	edae <__mdiff+0x22>
    edbe:	bcc.n	ee94 <__mdiff+0x108>
    edc0:	ldr	r1, [r6, #4]
    edc2:	bl	e83c <_Balloc>
    edc6:	mov	r9, r0
    edc8:	cmp	r0, #0
    edca:	beq.n	eebc <__mdiff+0x130>
    edcc:	ldr	r5, [r6, #16]
    edce:	ldr.w	r2, [r8, #16]
    edd2:	str	r7, [r0, #12]
    edd4:	add.w	lr, r8, #20
    edd8:	add.w	r0, r6, #20
    eddc:	add.w	sl, r9, #20
    ede0:	add.w	r1, r6, #16
    ede4:	add.w	r2, lr, r2, lsl #2
    ede8:	add.w	r7, r0, r5, lsl #2
    edec:	mov	r6, sl
    edee:	mov.w	ip, #0
    edf2:	ldr.w	r4, [lr], #4
    edf6:	ldr.w	fp, [r1, #4]!
    edfa:	uxth	r3, r4
    edfc:	uxtah	ip, ip, fp
    ee00:	sub.w	r3, ip, r3
    ee04:	mov.w	ip, r4, lsr #16
    ee08:	rsb	ip, ip, fp, lsr #16
    ee0c:	add.w	ip, ip, r3, asr #16
    ee10:	uxth	r3, r3
    ee12:	orr.w	r3, r3, ip, lsl #16
    ee16:	cmp	r2, lr
    ee18:	str.w	r3, [r6], #4
    ee1c:	mov.w	ip, ip, asr #16
    ee20:	bhi.n	edf2 <__mdiff+0x66>
    ee22:	sub.w	r1, r2, r8
    ee26:	subs	r1, #21
    ee28:	add.w	r8, r8, #21
    ee2c:	cmp	r2, r8
    ee2e:	bic.w	r4, r1, #3
    ee32:	add.w	r4, r4, #4
    ee36:	it	cc
    ee38:	movcc	r4, #4
    ee3a:	add	r0, r4
    ee3c:	bic.w	r2, r1, #3
    ee40:	it	cc
    ee42:	movcc	r2, #0
    ee44:	cmp	r7, r0
    ee46:	add	r2, sl
    ee48:	add	r4, sl
    ee4a:	bls.n	ee7e <__mdiff+0xf2>
    ee4c:	mov	r6, r4
    ee4e:	mov	r1, r0
    ee50:	ldr.w	r3, [r1], #4
    ee54:	uxtah	ip, ip, r3
    ee58:	mov.w	r2, ip, asr #16
    ee5c:	add.w	r2, r2, r3, lsr #16
    ee60:	uxth.w	ip, ip
    ee64:	orr.w	r3, ip, r2, lsl #16
    ee68:	cmp	r7, r1
    ee6a:	str.w	r3, [r6], #4
    ee6e:	mov.w	ip, r2, asr #16
    ee72:	bhi.n	ee50 <__mdiff+0xc4>
    ee74:	subs	r7, #1
    ee76:	subs	r7, r7, r0
    ee78:	bic.w	r7, r7, #3
    ee7c:	adds	r2, r4, r7
    ee7e:	cbnz	r3, ee8a <__mdiff+0xfe>
    ee80:	ldr.w	r3, [r2, #-4]!
    ee84:	subs	r5, #1
    ee86:	cmp	r3, #0
    ee88:	beq.n	ee80 <__mdiff+0xf4>
    ee8a:	str.w	r5, [r9, #16]
    ee8e:	mov	r0, r9
    ee90:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ee94:	mov	r3, r6
    ee96:	movs	r7, #1
    ee98:	mov	r6, r8
    ee9a:	mov	r8, r3
    ee9c:	b.n	edc0 <__mdiff+0x34>
    ee9e:	blt.n	ee94 <__mdiff+0x108>
    eea0:	movs	r7, #0
    eea2:	b.n	edc0 <__mdiff+0x34>
    eea4:	movs	r1, #0
    eea6:	bl	e83c <_Balloc>
    eeaa:	mov	r9, r0
    eeac:	cbz	r0, eeca <__mdiff+0x13e>
    eeae:	movs	r2, #1
    eeb0:	movs	r3, #0
    eeb2:	strd	r2, r3, [r9, #16]
    eeb6:	mov	r0, r9
    eeb8:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    eebc:	ldr	r3, [pc, #24]	; (eed8 <__mdiff+0x14c>)
    eebe:	ldr	r0, [pc, #28]	; (eedc <__mdiff+0x150>)
    eec0:	mov	r2, r9
    eec2:	movw	r1, #581	; 0x245
    eec6:	bl	10de0 <__assert_func>
    eeca:	ldr	r3, [pc, #12]	; (eed8 <__mdiff+0x14c>)
    eecc:	ldr	r0, [pc, #12]	; (eedc <__mdiff+0x150>)
    eece:	mov	r2, r9
    eed0:	movw	r1, #567	; 0x237
    eed4:	bl	10de0 <__assert_func>
    eed8:	.word	0x20000c78
    eedc:	.word	0x20000c8c

0000eee0 <__d2b>:
    eee0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    eee4:	mov	r8, r1
    eee6:	sub	sp, #12
    eee8:	movs	r1, #1
    eeea:	vmov	r6, r7, d0
    eeee:	mov	r5, r2
    eef0:	bl	e83c <_Balloc>
    eef4:	mov	r4, r0
    eef6:	cmp	r0, #0
    eef8:	beq.n	ef9e <__d2b+0xbe>
    eefa:	ubfx	r9, r7, #20, #11
    eefe:	ubfx	r3, r7, #0, #20
    ef02:	cmp.w	r9, #0
    ef06:	beq.n	ef0c <__d2b+0x2c>
    ef08:	orr.w	r3, r3, #1048576	; 0x100000
    ef0c:	cmp	r6, #0
    ef0e:	str	r3, [sp, #4]
    ef10:	bne.n	ef44 <__d2b+0x64>
    ef12:	add	r0, sp, #4
    ef14:	bl	e980 <__lo0bits>
    ef18:	ldr	r2, [sp, #4]
    ef1a:	str	r2, [r4, #20]
    ef1c:	movs	r2, #1
    ef1e:	add.w	r3, r0, #32
    ef22:	str	r2, [r4, #16]
    ef24:	cmp.w	r9, #0
    ef28:	beq.n	ef76 <__d2b+0x96>
    ef2a:	subw	r9, r9, #1075	; 0x433
    ef2e:	add.w	r2, r9, r3
    ef32:	mov	r0, r4
    ef34:	rsb	r3, r3, #53	; 0x35
    ef38:	str.w	r2, [r8]
    ef3c:	str	r3, [r5, #0]
    ef3e:	add	sp, #12
    ef40:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    ef44:	mov	r0, sp
    ef46:	str	r6, [sp, #0]
    ef48:	bl	e980 <__lo0bits>
    ef4c:	mov	r3, r0
    ef4e:	cbz	r0, ef96 <__d2b+0xb6>
    ef50:	ldrd	r0, r2, [sp]
    ef54:	rsb	r1, r3, #32
    ef58:	lsl.w	r1, r2, r1
    ef5c:	orrs	r1, r0
    ef5e:	lsrs	r2, r3
    ef60:	str	r1, [r4, #20]
    ef62:	str	r2, [sp, #4]
    ef64:	cmp	r2, #0
    ef66:	str	r2, [r4, #24]
    ef68:	ite	ne
    ef6a:	movne	r2, #2
    ef6c:	moveq	r2, #1
    ef6e:	str	r2, [r4, #16]
    ef70:	cmp.w	r9, #0
    ef74:	bne.n	ef2a <__d2b+0x4a>
    ef76:	subw	r3, r3, #1074	; 0x432
    ef7a:	str.w	r3, [r8]
    ef7e:	add.w	r3, r4, r2, lsl #2
    ef82:	ldr	r0, [r3, #16]
    ef84:	bl	e940 <__hi0bits>
    ef88:	rsb	r3, r0, r2, lsl #5
    ef8c:	mov	r0, r4
    ef8e:	str	r3, [r5, #0]
    ef90:	add	sp, #12
    ef92:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    ef96:	ldr	r2, [sp, #0]
    ef98:	str	r2, [r4, #20]
    ef9a:	ldr	r2, [sp, #4]
    ef9c:	b.n	ef64 <__d2b+0x84>
    ef9e:	ldr	r3, [pc, #12]	; (efac <__d2b+0xcc>)
    efa0:	ldr	r0, [pc, #12]	; (efb0 <__d2b+0xd0>)
    efa2:	mov	r2, r4
    efa4:	movw	r1, #783	; 0x30f
    efa8:	bl	10de0 <__assert_func>
    efac:	.word	0x20000c78
    efb0:	.word	0x20000c8c

0000efb4 <__ascii_wctomb>:
    efb4:	cbz	r1, efca <__ascii_wctomb+0x16>
    efb6:	cmp	r2, #255	; 0xff
    efb8:	bhi.n	efc0 <__ascii_wctomb+0xc>
    efba:	strb	r2, [r1, #0]
    efbc:	movs	r0, #1
    efbe:	bx	lr
    efc0:	movs	r3, #138	; 0x8a
    efc2:	str	r3, [r0, #0]
    efc4:	mov.w	r0, #4294967295
    efc8:	bx	lr
    efca:	mov	r0, r1
    efcc:	bx	lr
    efce:	nop

0000efd0 <_svfprintf_r>:
    efd0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    efd4:	vpush	{d8-d11}
    efd8:	sub	sp, #324	; 0x144
    efda:	mov	r4, r1
    efdc:	vmov	s22, r1
    efe0:	mov	r8, r2
    efe2:	str	r3, [sp, #32]
    efe4:	mov	fp, r0
    efe6:	bl	10d60 <_localeconv_r>
    efea:	ldr	r3, [r0, #0]
    efec:	str	r3, [sp, #72]	; 0x48
    efee:	mov	r0, r3
    eff0:	bl	e400 <strlen>
    eff4:	add	r7, sp, #128	; 0x80
    eff6:	str	r0, [sp, #64]	; 0x40
    eff8:	movs	r2, #8
    effa:	movs	r1, #0
    effc:	mov	r0, r7
    effe:	bl	e074 <memset>
    f002:	ldrh	r3, [r4, #12]
    f004:	lsls	r3, r3, #24
    f006:	bpl.n	f010 <_svfprintf_r+0x40>
    f008:	ldr	r3, [r4, #16]
    f00a:	cmp	r3, #0
    f00c:	beq.w	feba <_svfprintf_r+0xeea>
    f010:	movs	r3, #0
    f012:	vldr	d8, [pc, #524]	; f220 <_svfprintf_r+0x250>
    f016:	vldr	d9, [pc, #528]	; f228 <_svfprintf_r+0x258>
    f01a:	strd	r3, r3, [sp, #148]	; 0x94
    f01e:	strd	r3, r3, [sp, #76]	; 0x4c
    f022:	strd	r3, r3, [sp, #84]	; 0x54
    f026:	add	r2, sp, #156	; 0x9c
    f028:	str	r3, [sp, #56]	; 0x38
    f02a:	str	r2, [sp, #144]	; 0x90
    f02c:	mov	sl, r2
    f02e:	str	r3, [sp, #68]	; 0x44
    f030:	str	r3, [sp, #16]
    f032:	mov	r4, r8
    f034:	mov	r9, r4
    f036:	ldr	r3, [pc, #504]	; (f230 <_svfprintf_r+0x260>)
    f038:	ldr.w	r5, [r3, #228]	; 0xe4
    f03c:	bl	e208 <__locale_mb_cur_max>
    f040:	mov	r2, r9
    f042:	mov	r3, r0
    f044:	add	r1, sp, #112	; 0x70
    f046:	str	r7, [sp, #0]
    f048:	mov	r0, fp
    f04a:	blx	r5
    f04c:	cmp	r0, #0
    f04e:	beq.w	f1b2 <_svfprintf_r+0x1e2>
    f052:	blt.w	f1a2 <_svfprintf_r+0x1d2>
    f056:	ldr	r2, [sp, #112]	; 0x70
    f058:	cmp	r2, #37	; 0x25
    f05a:	mov	r3, r0
    f05c:	beq.n	f062 <_svfprintf_r+0x92>
    f05e:	add	r9, r3
    f060:	b.n	f036 <_svfprintf_r+0x66>
    f062:	subs.w	r5, r9, r4
    f066:	mov	r6, r0
    f068:	bne.w	f1ba <_svfprintf_r+0x1ea>
    f06c:	movs	r3, #0
    f06e:	mov.w	r2, #4294967295
    f072:	strb.w	r3, [sp, #103]	; 0x67
    f076:	mov	r8, r3
    f078:	str	r3, [sp, #24]
    f07a:	add.w	r9, r9, #1
    f07e:	ldrb.w	r3, [r9]
    f082:	str	r2, [sp, #12]
    f084:	movs	r5, #43	; 0x2b
    f086:	movs	r6, #32
    f088:	add.w	r9, r9, #1
    f08c:	sub.w	r2, r3, #32
    f090:	cmp	r2, #90	; 0x5a
    f092:	bhi.w	f234 <_svfprintf_r+0x264>
    f096:	tbh	[pc, r2, lsl #1]
    f09a:	.short	0x02e8
    f09c:	.word	0x00cd00cd
    f0a0:	.word	0x00cd02e3
    f0a4:	.word	0x00cd00cd
    f0a8:	.word	0x00cd006a
    f0ac:	.word	0x020500cd
    f0b0:	.word	0x00cd0284
    f0b4:	.word	0x02c90210
    f0b8:	.word	0x02bd00cd
    f0bc:	.word	0x005b005b
    f0c0:	.word	0x005b005b
    f0c4:	.word	0x005b005b
    f0c8:	.word	0x005b005b
    f0cc:	.word	0x00cd005b
    f0d0:	.word	0x00cd00cd
    f0d4:	.word	0x00cd00cd
    f0d8:	.word	0x00cd00cd
    f0dc:	.word	0x00cd0153
    f0e0:	.word	0x021a0183
    f0e4:	.word	0x01530153
    f0e8:	.word	0x00cd0153
    f0ec:	.word	0x00cd00cd
    f0f0:	.word	0x021500cd
    f0f4:	.word	0x00cd00cd
    f0f8:	.word	0x00cd0296
    f0fc:	.word	0x00cd00cd
    f100:	.word	0x00cd01ab
    f104:	.word	0x00cd02aa
    f108:	.word	0x06e300cd
    f10c:	.word	0x00cd00cd
    f110:	.word	0x00cd00cd
    f114:	.word	0x00cd00cd
    f118:	.word	0x00cd00cd
    f11c:	.word	0x00cd0153
    f120:	.word	0x01de0183
    f124:	.word	0x01530153
    f128:	.word	0x02770153
    f12c:	.word	0x007f01de
    f130:	.word	0x028900cd
    f134:	.word	0x025f00cd
    f138:	.word	0x022f06e0
    f13c:	.word	0x00cd007f
    f140:	.word	0x007c01ab
    f144:	.word	0x00cd06b8
    f148:	.word	0x06bd00cd
    f14c:	.word	0x007c00cd
    f150:	sub.w	r2, r3, #48	; 0x30
    f154:	movs	r1, #0
    f156:	ldrb.w	r3, [r9], #1
    f15a:	add.w	r1, r1, r1, lsl #2
    f15e:	add.w	r1, r2, r1, lsl #1
    f162:	sub.w	r2, r3, #48	; 0x30
    f166:	cmp	r2, #9
    f168:	bls.n	f156 <_svfprintf_r+0x186>
    f16a:	str	r1, [sp, #24]
    f16c:	b.n	f08c <_svfprintf_r+0xbc>
    f16e:	mov	r0, fp
    f170:	bl	10d60 <_localeconv_r>
    f174:	ldr	r3, [r0, #4]
    f176:	str	r3, [sp, #84]	; 0x54
    f178:	mov	r0, r3
    f17a:	bl	e400 <strlen>
    f17e:	str	r0, [sp, #88]	; 0x58
    f180:	mov	r0, fp
    f182:	bl	10d60 <_localeconv_r>
    f186:	ldr	r3, [r0, #8]
    f188:	str	r3, [sp, #76]	; 0x4c
    f18a:	ldr	r3, [sp, #88]	; 0x58
    f18c:	cmp	r3, #0
    f18e:	bne.w	fdec <_svfprintf_r+0xe1c>
    f192:	ldrb.w	r3, [r9]
    f196:	b.n	f088 <_svfprintf_r+0xb8>
    f198:	ldrb.w	r3, [r9]
    f19c:	orr.w	r8, r8, #32
    f1a0:	b.n	f088 <_svfprintf_r+0xb8>
    f1a2:	movs	r2, #8
    f1a4:	movs	r1, #0
    f1a6:	mov	r0, r7
    f1a8:	bl	e074 <memset>
    f1ac:	movs	r3, #1
    f1ae:	add	r9, r3
    f1b0:	b.n	f036 <_svfprintf_r+0x66>
    f1b2:	subs.w	r5, r9, r4
    f1b6:	mov	r6, r0
    f1b8:	beq.n	f1de <_svfprintf_r+0x20e>
    f1ba:	ldr	r3, [sp, #152]	; 0x98
    f1bc:	add	r3, r5
    f1be:	str	r3, [sp, #152]	; 0x98
    f1c0:	ldr	r3, [sp, #148]	; 0x94
    f1c2:	adds	r3, #1
    f1c4:	cmp	r3, #7
    f1c6:	strd	r4, r5, [sl]
    f1ca:	str	r3, [sp, #148]	; 0x94
    f1cc:	bgt.n	f208 <_svfprintf_r+0x238>
    f1ce:	add.w	sl, sl, #8
    f1d2:	ldr	r3, [sp, #16]
    f1d4:	add	r3, r5
    f1d6:	str	r3, [sp, #16]
    f1d8:	cmp	r6, #0
    f1da:	bne.w	f06c <_svfprintf_r+0x9c>
    f1de:	ldr	r3, [sp, #152]	; 0x98
    f1e0:	cmp	r3, #0
    f1e2:	bne.w	105fc <_svfprintf_r+0x162c>
    f1e6:	vmov	r3, s22
    f1ea:	ldrsh.w	r3, [r3, #12]
    f1ee:	tst.w	r3, #64	; 0x40
    f1f2:	ldr	r3, [sp, #16]
    f1f4:	it	ne
    f1f6:	movne.w	r3, #4294967295
    f1fa:	str	r3, [sp, #16]
    f1fc:	ldr	r0, [sp, #16]
    f1fe:	add	sp, #324	; 0x144
    f200:	vpop	{d8-d11}
    f204:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f208:	vmov	r1, s22
    f20c:	add	r2, sp, #144	; 0x90
    f20e:	mov	r0, fp
    f210:	bl	11d38 <__ssprint_r>
    f214:	cmp	r0, #0
    f216:	bne.n	f1e6 <_svfprintf_r+0x216>
    f218:	add.w	sl, sp, #156	; 0x9c
    f21c:	b.n	f1d2 <_svfprintf_r+0x202>
    f21e:	nop
	...
    f228:	.word	0xffffffff
    f22c:	.word	0x7fefffff
    f230:	.word	0x2000149c
    f234:	str	r3, [sp, #44]	; 0x2c
    f236:	cmp	r3, #0
    f238:	beq.n	f1de <_svfprintf_r+0x20e>
    f23a:	movs	r1, #0
    f23c:	strd	r1, r1, [sp, #48]	; 0x30
    f240:	strb.w	r3, [sp, #220]	; 0xdc
    f244:	movs	r3, #1
    f246:	strb.w	r1, [sp, #103]	; 0x67
    f24a:	str	r3, [sp, #8]
    f24c:	str	r1, [sp, #28]
    f24e:	str	r3, [sp, #20]
    f250:	str	r1, [sp, #12]
    f252:	str	r1, [sp, #60]	; 0x3c
    f254:	add	r4, sp, #220	; 0xdc
    f256:	ands.w	r3, r8, #2
    f25a:	str	r3, [sp, #36]	; 0x24
    f25c:	beq.n	f264 <_svfprintf_r+0x294>
    f25e:	ldr	r3, [sp, #8]
    f260:	adds	r3, #2
    f262:	str	r3, [sp, #8]
    f264:	ands.w	r3, r8, #132	; 0x84
    f268:	str	r3, [sp, #40]	; 0x28
    f26a:	bne.n	f278 <_svfprintf_r+0x2a8>
    f26c:	ldr	r3, [sp, #24]
    f26e:	ldr	r2, [sp, #8]
    f270:	subs	r5, r3, r2
    f272:	cmp	r5, #0
    f274:	bgt.w	f94a <_svfprintf_r+0x97a>
    f278:	ldr	r2, [sp, #152]	; 0x98
    f27a:	cbz	r1, f2a0 <_svfprintf_r+0x2d0>
    f27c:	ldr	r1, [sp, #148]	; 0x94
    f27e:	add.w	r0, sp, #103	; 0x67
    f282:	adds	r1, #1
    f284:	adds	r2, #1
    f286:	str.w	r0, [sl]
    f28a:	cmp	r1, #7
    f28c:	mov.w	r0, #1
    f290:	str	r2, [sp, #152]	; 0x98
    f292:	str	r1, [sp, #148]	; 0x94
    f294:	str.w	r0, [sl, #4]
    f298:	bgt.w	f9e0 <_svfprintf_r+0xa10>
    f29c:	add.w	sl, sl, #8
    f2a0:	ldr	r3, [sp, #36]	; 0x24
    f2a2:	cbz	r3, f2c6 <_svfprintf_r+0x2f6>
    f2a4:	ldr	r3, [sp, #148]	; 0x94
    f2a6:	add	r1, sp, #104	; 0x68
    f2a8:	adds	r3, #1
    f2aa:	adds	r2, #2
    f2ac:	str.w	r1, [sl]
    f2b0:	cmp	r3, #7
    f2b2:	mov.w	r1, #2
    f2b6:	str	r2, [sp, #152]	; 0x98
    f2b8:	str	r3, [sp, #148]	; 0x94
    f2ba:	str.w	r1, [sl, #4]
    f2be:	bgt.w	fa08 <_svfprintf_r+0xa38>
    f2c2:	add.w	sl, sl, #8
    f2c6:	ldr	r3, [sp, #40]	; 0x28
    f2c8:	cmp	r3, #128	; 0x80
    f2ca:	beq.w	f7a6 <_svfprintf_r+0x7d6>
    f2ce:	ldr	r3, [sp, #12]
    f2d0:	ldr	r1, [sp, #20]
    f2d2:	subs	r5, r3, r1
    f2d4:	cmp	r5, #0
    f2d6:	bgt.w	f824 <_svfprintf_r+0x854>
    f2da:	tst.w	r8, #256	; 0x100
    f2de:	bne.w	f6fc <_svfprintf_r+0x72c>
    f2e2:	ldr	r3, [sp, #20]
    f2e4:	str.w	r3, [sl, #4]
    f2e8:	add	r2, r3
    f2ea:	ldr	r3, [sp, #148]	; 0x94
    f2ec:	str.w	r4, [sl]
    f2f0:	adds	r3, #1
    f2f2:	cmp	r3, #7
    f2f4:	str	r2, [sp, #152]	; 0x98
    f2f6:	str	r3, [sp, #148]	; 0x94
    f2f8:	bgt.w	f932 <_svfprintf_r+0x962>
    f2fc:	add.w	sl, sl, #8
    f300:	tst.w	r8, #4
    f304:	beq.n	f312 <_svfprintf_r+0x342>
    f306:	ldr	r3, [sp, #24]
    f308:	ldr	r1, [sp, #8]
    f30a:	subs	r4, r3, r1
    f30c:	cmp	r4, #0
    f30e:	bgt.w	fa22 <_svfprintf_r+0xa52>
    f312:	ldr	r3, [sp, #16]
    f314:	ldr	r1, [sp, #24]
    f316:	ldr	r0, [sp, #8]
    f318:	cmp	r1, r0
    f31a:	ite	ge
    f31c:	addge	r3, r3, r1
    f31e:	addlt	r3, r3, r0
    f320:	str	r3, [sp, #16]
    f322:	cmp	r2, #0
    f324:	bne.w	f888 <_svfprintf_r+0x8b8>
    f328:	movs	r3, #0
    f32a:	str	r3, [sp, #148]	; 0x94
    f32c:	ldr	r3, [sp, #28]
    f32e:	cbz	r3, f338 <_svfprintf_r+0x368>
    f330:	ldr	r1, [sp, #28]
    f332:	mov	r0, fp
    f334:	bl	e604 <_free_r>
    f338:	add.w	sl, sp, #156	; 0x9c
    f33c:	mov	r4, r9
    f33e:	b.n	f034 <_svfprintf_r+0x64>
    f340:	str	r3, [sp, #44]	; 0x2c
    f342:	ldr	r3, [sp, #32]
    f344:	adds	r3, #7
    f346:	bic.w	r3, r3, #7
    f34a:	vldmia	r3!, {d8}
    f34e:	vabs.f64	d7, d8
    f352:	vcmp.f64	d7, d9
    f356:	vmrs	APSR_nzcv, fpscr
    f35a:	str	r3, [sp, #32]
    f35c:	ble.w	fd32 <_svfprintf_r+0xd62>
    f360:	vcmpe.f64	d8, #0.0
    f364:	vmrs	APSR_nzcv, fpscr
    f368:	bmi.w	1041e <_svfprintf_r+0x144e>
    f36c:	ldrb.w	r1, [sp, #103]	; 0x67
    f370:	ldr	r4, [pc, #684]	; (f620 <_svfprintf_r+0x650>)
    f372:	ldr	r3, [pc, #688]	; (f624 <_svfprintf_r+0x654>)
    f374:	bic.w	r8, r8, #128	; 0x80
    f378:	ldr	r2, [sp, #44]	; 0x2c
    f37a:	cmp	r2, #71	; 0x47
    f37c:	it	gt
    f37e:	movgt	r4, r3
    f380:	movs	r3, #0
    f382:	strd	r3, r3, [sp, #48]	; 0x30
    f386:	movs	r2, #3
    f388:	str	r3, [sp, #28]
    f38a:	str	r2, [sp, #8]
    f38c:	str	r2, [sp, #20]
    f38e:	str	r3, [sp, #12]
    f390:	str	r3, [sp, #60]	; 0x3c
    f392:	cmp	r1, #0
    f394:	beq.w	f256 <_svfprintf_r+0x286>
    f398:	ldr	r3, [sp, #8]
    f39a:	adds	r3, #1
    f39c:	str	r3, [sp, #8]
    f39e:	b.n	f256 <_svfprintf_r+0x286>
    f3a0:	cmp	r3, #67	; 0x43
    f3a2:	str	r3, [sp, #44]	; 0x2c
    f3a4:	beq.n	f3ae <_svfprintf_r+0x3de>
    f3a6:	tst.w	r8, #16
    f3aa:	beq.w	fe68 <_svfprintf_r+0xe98>
    f3ae:	ldr	r5, [sp, #32]
    f3b0:	movs	r2, #8
    f3b2:	movs	r1, #0
    f3b4:	add	r0, sp, #136	; 0x88
    f3b6:	add	r4, sp, #220	; 0xdc
    f3b8:	bl	e074 <memset>
    f3bc:	add	r3, sp, #136	; 0x88
    f3be:	ldr.w	r2, [r5], #4
    f3c2:	mov	r1, r4
    f3c4:	mov	r0, fp
    f3c6:	bl	11cac <_wcrtomb_r>
    f3ca:	mov	r3, r0
    f3cc:	adds	r3, #1
    f3ce:	str	r0, [sp, #20]
    f3d0:	beq.w	109b0 <_svfprintf_r+0x19e0>
    f3d4:	ldr	r3, [sp, #20]
    f3d6:	str	r5, [sp, #32]
    f3d8:	bic.w	r3, r3, r3, asr #31
    f3dc:	str	r3, [sp, #8]
    f3de:	movs	r1, #0
    f3e0:	strd	r1, r1, [sp, #48]	; 0x30
    f3e4:	strb.w	r1, [sp, #103]	; 0x67
    f3e8:	str	r1, [sp, #28]
    f3ea:	str	r1, [sp, #12]
    f3ec:	str	r1, [sp, #60]	; 0x3c
    f3ee:	b.n	f256 <_svfprintf_r+0x286>
    f3f0:	str	r3, [sp, #44]	; 0x2c
    f3f2:	ldr	r3, [sp, #32]
    f3f4:	mov	r2, r3
    f3f6:	movs	r3, #0
    f3f8:	strb.w	r3, [sp, #103]	; 0x67
    f3fc:	mov	r3, r2
    f3fe:	ldr.w	r4, [r3], #4
    f402:	str	r3, [sp, #32]
    f404:	cmp	r4, #0
    f406:	beq.w	fe9a <_svfprintf_r+0xeca>
    f40a:	ldr	r3, [sp, #44]	; 0x2c
    f40c:	cmp	r3, #83	; 0x53
    f40e:	beq.w	101ea <_svfprintf_r+0x121a>
    f412:	ands.w	r3, r8, #16
    f416:	str	r3, [sp, #48]	; 0x30
    f418:	bne.w	101ea <_svfprintf_r+0x121a>
    f41c:	ldr	r3, [sp, #12]
    f41e:	adds	r5, r3, #1
    f420:	beq.w	105ee <_svfprintf_r+0x161e>
    f424:	ldr	r1, [sp, #48]	; 0x30
    f426:	mov	r2, r3
    f428:	mov	r0, r4
    f42a:	bl	e350 <memchr>
    f42e:	str	r0, [sp, #28]
    f430:	cmp	r0, #0
    f432:	beq.w	10a86 <_svfprintf_r+0x1ab6>
    f436:	ldr	r3, [sp, #28]
    f438:	subs	r2, r3, r4
    f43a:	str	r2, [sp, #20]
    f43c:	ldr	r3, [sp, #48]	; 0x30
    f43e:	str	r3, [sp, #12]
    f440:	bic.w	r2, r2, r2, asr #31
    f444:	str	r3, [sp, #60]	; 0x3c
    f446:	str	r3, [sp, #52]	; 0x34
    f448:	str	r3, [sp, #28]
    f44a:	movs	r3, #115	; 0x73
    f44c:	ldrb.w	r1, [sp, #103]	; 0x67
    f450:	str	r2, [sp, #8]
    f452:	str	r3, [sp, #44]	; 0x2c
    f454:	b.n	f392 <_svfprintf_r+0x3c2>
    f456:	tst.w	r8, #32
    f45a:	str	r3, [sp, #44]	; 0x2c
    f45c:	ldr	r3, [sp, #32]
    f45e:	beq.n	f4dc <_svfprintf_r+0x50c>
    f460:	adds	r3, #7
    f462:	bic.w	r3, r3, #7
    f466:	mov	r2, r3
    f468:	mov	r1, r2
    f46a:	ldr	r3, [r3, #4]
    f46c:	ldr.w	r2, [r1], #8
    f470:	str	r1, [sp, #32]
    f472:	mov	r1, r3
    f474:	cmp	r3, #0
    f476:	blt.w	fc92 <_svfprintf_r+0xcc2>
    f47a:	ldr	r3, [sp, #12]
    f47c:	adds	r3, #1
    f47e:	beq.w	f9be <_svfprintf_r+0x9ee>
    f482:	bic.w	r0, r8, #128	; 0x80
    f486:	orrs.w	r3, r2, r1
    f48a:	str	r0, [sp, #8]
    f48c:	bne.w	f9c2 <_svfprintf_r+0x9f2>
    f490:	ldr	r3, [sp, #12]
    f492:	cmp	r3, #0
    f494:	bne.w	f9cc <_svfprintf_r+0x9fc>
    f498:	mov	r8, r0
    f49a:	movs	r3, #0
    f49c:	str	r3, [sp, #12]
    f49e:	str	r3, [sp, #20]
    f4a0:	add	r4, sp, #320	; 0x140
    f4a2:	b.n	f6b2 <_svfprintf_r+0x6e2>
    f4a4:	ldr	r3, [sp, #32]
    f4a6:	ldr.w	r2, [r3], #4
    f4aa:	str	r2, [sp, #24]
    f4ac:	cmp	r2, #0
    f4ae:	bge.w	fce4 <_svfprintf_r+0xd14>
    f4b2:	ldr	r2, [sp, #24]
    f4b4:	str	r3, [sp, #32]
    f4b6:	negs	r2, r2
    f4b8:	str	r2, [sp, #24]
    f4ba:	ldrb.w	r3, [r9]
    f4be:	orr.w	r8, r8, #4
    f4c2:	b.n	f088 <_svfprintf_r+0xb8>
    f4c4:	ldrb.w	r3, [r9]
    f4c8:	orr.w	r8, r8, #8
    f4cc:	b.n	f088 <_svfprintf_r+0xb8>
    f4ce:	orr.w	r8, r8, #16
    f4d2:	tst.w	r8, #32
    f4d6:	str	r3, [sp, #44]	; 0x2c
    f4d8:	ldr	r3, [sp, #32]
    f4da:	bne.n	f460 <_svfprintf_r+0x490>
    f4dc:	tst.w	r8, #16
    f4e0:	bne.w	fcfa <_svfprintf_r+0xd2a>
    f4e4:	tst.w	r8, #64	; 0x40
    f4e8:	beq.w	fcf2 <_svfprintf_r+0xd22>
    f4ec:	ldrsh.w	r2, [r3], #4
    f4f0:	str	r3, [sp, #32]
    f4f2:	asrs	r1, r2, #31
    f4f4:	mov	r3, r1
    f4f6:	b.n	f474 <_svfprintf_r+0x4a4>
    f4f8:	ldr	r3, [sp, #32]
    f4fa:	orr.w	r2, r8, #2
    f4fe:	str	r2, [sp, #8]
    f500:	ldr.w	r2, [r3], #4
    f504:	str	r3, [sp, #32]
    f506:	movw	r3, #30768	; 0x7830
    f50a:	strh.w	r3, [sp, #104]	; 0x68
    f50e:	movs	r0, #120	; 0x78
    f510:	ldr	r3, [pc, #276]	; (f628 <_svfprintf_r+0x658>)
    f512:	str	r3, [sp, #68]	; 0x44
    f514:	movs	r1, #0
    f516:	movs	r3, #2
    f518:	str	r0, [sp, #44]	; 0x2c
    f51a:	movs	r0, #0
    f51c:	ldr	r4, [sp, #12]
    f51e:	strb.w	r0, [sp, #103]	; 0x67
    f522:	adds	r0, r4, #1
    f524:	beq.w	f682 <_svfprintf_r+0x6b2>
    f528:	ldr	r0, [sp, #8]
    f52a:	bic.w	r8, r0, #128	; 0x80
    f52e:	orrs.w	r0, r2, r1
    f532:	bne.w	f67e <_svfprintf_r+0x6ae>
    f536:	cmp	r4, #0
    f538:	bne.w	10298 <_svfprintf_r+0x12c8>
    f53c:	cmp	r3, #0
    f53e:	bne.n	f49a <_svfprintf_r+0x4ca>
    f540:	ldr	r3, [sp, #8]
    f542:	ands.w	r3, r3, #1
    f546:	str	r3, [sp, #20]
    f548:	beq.w	fcee <_svfprintf_r+0xd1e>
    f54c:	movs	r3, #48	; 0x30
    f54e:	strb.w	r3, [sp, #319]	; 0x13f
    f552:	addw	r4, sp, #319	; 0x13f
    f556:	b.n	f6b2 <_svfprintf_r+0x6e2>
    f558:	tst.w	r8, #32
    f55c:	bne.w	fd08 <_svfprintf_r+0xd38>
    f560:	tst.w	r8, #16
    f564:	bne.w	102a6 <_svfprintf_r+0x12d6>
    f568:	tst.w	r8, #64	; 0x40
    f56c:	bne.w	1049e <_svfprintf_r+0x14ce>
    f570:	tst.w	r8, #512	; 0x200
    f574:	beq.w	102a6 <_svfprintf_r+0x12d6>
    f578:	ldr	r3, [sp, #32]
    f57a:	ldr	r1, [sp, #16]
    f57c:	ldr.w	r2, [r3], #4
    f580:	str	r3, [sp, #32]
    f582:	strb	r1, [r2, #0]
    f584:	mov	r4, r9
    f586:	b.n	f034 <_svfprintf_r+0x64>
    f588:	ldrb.w	r3, [r9]
    f58c:	cmp	r3, #104	; 0x68
    f58e:	ittte	eq
    f590:	ldrbeq.w	r3, [r9, #1]
    f594:	orreq.w	r8, r8, #512	; 0x200
    f598:	addeq.w	r9, r9, #1
    f59c:	orrne.w	r8, r8, #64	; 0x40
    f5a0:	b.n	f088 <_svfprintf_r+0xb8>
    f5a2:	ldrb.w	r3, [r9]
    f5a6:	strb.w	r5, [sp, #103]	; 0x67
    f5aa:	b.n	f088 <_svfprintf_r+0xb8>
    f5ac:	ldrb.w	r3, [r9]
    f5b0:	cmp	r3, #108	; 0x6c
    f5b2:	ittte	eq
    f5b4:	ldrbeq.w	r3, [r9, #1]
    f5b8:	orreq.w	r8, r8, #32
    f5bc:	addeq.w	r9, r9, #1
    f5c0:	orrne.w	r8, r8, #16
    f5c4:	b.n	f088 <_svfprintf_r+0xb8>
    f5c6:	str	r3, [sp, #44]	; 0x2c
    f5c8:	orr.w	r8, r8, #16
    f5cc:	ands.w	r1, r8, #32
    f5d0:	beq.w	fc76 <_svfprintf_r+0xca6>
    f5d4:	ldr	r3, [sp, #32]
    f5d6:	adds	r3, #7
    f5d8:	bic.w	r3, r3, #7
    f5dc:	ldr	r1, [r3, #4]
    f5de:	ldr.w	r2, [r3], #8
    f5e2:	str	r3, [sp, #32]
    f5e4:	bic.w	r3, r8, #1024	; 0x400
    f5e8:	str	r3, [sp, #8]
    f5ea:	movs	r3, #0
    f5ec:	b.n	f51a <_svfprintf_r+0x54a>
    f5ee:	str	r3, [sp, #44]	; 0x2c
    f5f0:	orr.w	r3, r8, #16
    f5f4:	str	r3, [sp, #8]
    f5f6:	ldr	r3, [sp, #8]
    f5f8:	ands.w	r1, r3, #32
    f5fc:	beq.w	fc52 <_svfprintf_r+0xc82>
    f600:	ldr	r3, [sp, #32]
    f602:	adds	r3, #7
    f604:	bic.w	r3, r3, #7
    f608:	ldr	r1, [r3, #4]
    f60a:	ldr.w	r2, [r3], #8
    f60e:	str	r3, [sp, #32]
    f610:	movs	r3, #1
    f612:	b.n	f51a <_svfprintf_r+0x54a>
    f614:	ldrb.w	r3, [r9]
    f618:	orr.w	r8, r8, #128	; 0x80
    f61c:	b.n	f088 <_svfprintf_r+0xb8>
    f61e:	nop
    f620:	.word	0x20000e58
    f624:	.word	0x20000e5c
    f628:	.word	0x20000e68
    f62c:	mov	r1, r9
    f62e:	ldrb.w	r3, [r1], #1
    f632:	cmp	r3, #42	; 0x2a
    f634:	beq.w	10aca <_svfprintf_r+0x1afa>
    f638:	sub.w	r2, r3, #48	; 0x30
    f63c:	cmp	r2, #9
    f63e:	mov	r9, r1
    f640:	it	ls
    f642:	movls	r1, #0
    f644:	bhi.w	108d0 <_svfprintf_r+0x1900>
    f648:	ldrb.w	r3, [r9], #1
    f64c:	add.w	r1, r1, r1, lsl #2
    f650:	add.w	r1, r2, r1, lsl #1
    f654:	sub.w	r2, r3, #48	; 0x30
    f658:	cmp	r2, #9
    f65a:	bls.n	f648 <_svfprintf_r+0x678>
    f65c:	str	r1, [sp, #12]
    f65e:	b.n	f08c <_svfprintf_r+0xbc>
    f660:	ldrb.w	r3, [r9]
    f664:	orr.w	r8, r8, #1
    f668:	b.n	f088 <_svfprintf_r+0xb8>
    f66a:	ldrb.w	r3, [sp, #103]	; 0x67
    f66e:	cmp	r3, #0
    f670:	bne.w	f192 <_svfprintf_r+0x1c2>
    f674:	ldrb.w	r3, [r9]
    f678:	strb.w	r6, [sp, #103]	; 0x67
    f67c:	b.n	f088 <_svfprintf_r+0xb8>
    f67e:	str.w	r8, [sp, #8]
    f682:	cmp	r3, #1
    f684:	beq.w	f9c2 <_svfprintf_r+0x9f2>
    f688:	cmp	r3, #2
    f68a:	add	r4, sp, #320	; 0x140
    f68c:	bne.n	f6d0 <_svfprintf_r+0x700>
    f68e:	ldr	r0, [sp, #68]	; 0x44
    f690:	and.w	r3, r2, #15
    f694:	lsrs	r2, r2, #4
    f696:	ldrb	r3, [r0, r3]
    f698:	strb.w	r3, [r4, #-1]!
    f69c:	orr.w	r2, r2, r1, lsl #28
    f6a0:	lsrs	r1, r1, #4
    f6a2:	orrs.w	r3, r2, r1
    f6a6:	bne.n	f690 <_svfprintf_r+0x6c0>
    f6a8:	add	r3, sp, #320	; 0x140
    f6aa:	subs	r3, r3, r4
    f6ac:	ldr.w	r8, [sp, #8]
    f6b0:	str	r3, [sp, #20]
    f6b2:	ldr	r2, [sp, #20]
    f6b4:	ldr	r0, [sp, #12]
    f6b6:	ldrb.w	r1, [sp, #103]	; 0x67
    f6ba:	cmp	r2, r0
    f6bc:	mov.w	r3, #0
    f6c0:	it	lt
    f6c2:	movlt	r2, r0
    f6c4:	strd	r3, r3, [sp, #48]	; 0x30
    f6c8:	str	r3, [sp, #28]
    f6ca:	str	r2, [sp, #8]
    f6cc:	str	r3, [sp, #60]	; 0x3c
    f6ce:	b.n	f392 <_svfprintf_r+0x3c2>
    f6d0:	and.w	r3, r2, #7
    f6d4:	lsrs	r2, r2, #3
    f6d6:	orr.w	r2, r2, r1, lsl #29
    f6da:	lsrs	r1, r1, #3
    f6dc:	adds	r3, #48	; 0x30
    f6de:	orrs.w	r5, r2, r1
    f6e2:	mov	r0, r4
    f6e4:	strb.w	r3, [r4, #-1]!
    f6e8:	bne.n	f6d0 <_svfprintf_r+0x700>
    f6ea:	ldr	r2, [sp, #8]
    f6ec:	lsls	r1, r2, #31
    f6ee:	bmi.w	fb8c <_svfprintf_r+0xbbc>
    f6f2:	add	r3, sp, #320	; 0x140
    f6f4:	subs	r3, r3, r4
    f6f6:	mov	r8, r2
    f6f8:	str	r3, [sp, #20]
    f6fa:	b.n	f6b2 <_svfprintf_r+0x6e2>
    f6fc:	ldr	r3, [sp, #44]	; 0x2c
    f6fe:	cmp	r3, #101	; 0x65
    f700:	ble.w	f8ac <_svfprintf_r+0x8dc>
    f704:	vcmp.f64	d8, #0.0
    f708:	vmrs	APSR_nzcv, fpscr
    f70c:	bne.w	fa92 <_svfprintf_r+0xac2>
    f710:	ldr	r3, [sp, #148]	; 0x94
    f712:	ldr	r1, [pc, #744]	; (f9fc <_svfprintf_r+0xa2c>)
    f714:	str.w	r1, [sl]
    f718:	adds	r3, #1
    f71a:	adds	r2, #1
    f71c:	movs	r1, #1
    f71e:	cmp	r3, #7
    f720:	str	r2, [sp, #152]	; 0x98
    f722:	str	r3, [sp, #148]	; 0x94
    f724:	str.w	r1, [sl, #4]
    f728:	bgt.w	101ce <_svfprintf_r+0x11fe>
    f72c:	add.w	sl, sl, #8
    f730:	ldr	r3, [sp, #108]	; 0x6c
    f732:	ldr	r1, [sp, #56]	; 0x38
    f734:	cmp	r3, r1
    f736:	bge.w	fcda <_svfprintf_r+0xd0a>
    f73a:	ldr	r3, [sp, #64]	; 0x40
    f73c:	ldr	r1, [sp, #72]	; 0x48
    f73e:	add	r2, r3
    f740:	strd	r1, r3, [sl]
    f744:	ldr	r3, [sp, #148]	; 0x94
    f746:	str	r2, [sp, #152]	; 0x98
    f748:	adds	r3, #1
    f74a:	cmp	r3, #7
    f74c:	str	r3, [sp, #148]	; 0x94
    f74e:	bgt.w	fe80 <_svfprintf_r+0xeb0>
    f752:	add.w	sl, sl, #8
    f756:	ldr	r3, [sp, #56]	; 0x38
    f758:	subs	r4, r3, #1
    f75a:	cmp	r4, #0
    f75c:	ble.w	f300 <_svfprintf_r+0x330>
    f760:	cmp	r4, #16
    f762:	ldr	r3, [sp, #148]	; 0x94
    f764:	ble.w	10244 <_svfprintf_r+0x1274>
    f768:	vmov	r6, s22
    f76c:	movs	r5, #16
    f76e:	b.n	f77c <_svfprintf_r+0x7ac>
    f770:	add.w	sl, sl, #8
    f774:	subs	r4, #16
    f776:	cmp	r4, #16
    f778:	ble.w	10244 <_svfprintf_r+0x1274>
    f77c:	adds	r3, #1
    f77e:	ldr	r1, [pc, #640]	; (fa00 <_svfprintf_r+0xa30>)
    f780:	adds	r2, #16
    f782:	cmp	r3, #7
    f784:	strd	r1, r5, [sl]
    f788:	strd	r3, r2, [sp, #148]	; 0x94
    f78c:	ble.n	f770 <_svfprintf_r+0x7a0>
    f78e:	add	r2, sp, #144	; 0x90
    f790:	mov	r1, r6
    f792:	mov	r0, fp
    f794:	bl	11d38 <__ssprint_r>
    f798:	cmp	r0, #0
    f79a:	bne.n	f89a <_svfprintf_r+0x8ca>
    f79c:	ldrd	r3, r2, [sp, #148]	; 0x94
    f7a0:	add.w	sl, sp, #156	; 0x9c
    f7a4:	b.n	f774 <_svfprintf_r+0x7a4>
    f7a6:	ldr	r3, [sp, #24]
    f7a8:	ldr	r1, [sp, #8]
    f7aa:	subs	r5, r3, r1
    f7ac:	cmp	r5, #0
    f7ae:	ble.w	f2ce <_svfprintf_r+0x2fe>
    f7b2:	cmp	r5, #16
    f7b4:	ldr	r3, [sp, #148]	; 0x94
    f7b6:	ble.n	f7fc <_svfprintf_r+0x82c>
    f7b8:	str	r4, [sp, #36]	; 0x24
    f7ba:	movs	r6, #16
    f7bc:	vmov	r4, s22
    f7c0:	b.n	f7cc <_svfprintf_r+0x7fc>
    f7c2:	subs	r5, #16
    f7c4:	cmp	r5, #16
    f7c6:	add.w	sl, sl, #8
    f7ca:	ble.n	f7fa <_svfprintf_r+0x82a>
    f7cc:	adds	r3, #1
    f7ce:	ldr	r1, [pc, #560]	; (fa00 <_svfprintf_r+0xa30>)
    f7d0:	adds	r2, #16
    f7d2:	cmp	r3, #7
    f7d4:	strd	r1, r6, [sl]
    f7d8:	strd	r3, r2, [sp, #148]	; 0x94
    f7dc:	ble.n	f7c2 <_svfprintf_r+0x7f2>
    f7de:	add	r2, sp, #144	; 0x90
    f7e0:	mov	r1, r4
    f7e2:	mov	r0, fp
    f7e4:	add.w	sl, sp, #156	; 0x9c
    f7e8:	bl	11d38 <__ssprint_r>
    f7ec:	cmp	r0, #0
    f7ee:	bne.n	f89a <_svfprintf_r+0x8ca>
    f7f0:	subs	r5, #16
    f7f2:	cmp	r5, #16
    f7f4:	ldrd	r3, r2, [sp, #148]	; 0x94
    f7f8:	bgt.n	f7cc <_svfprintf_r+0x7fc>
    f7fa:	ldr	r4, [sp, #36]	; 0x24
    f7fc:	ldr	r1, [pc, #512]	; (fa00 <_svfprintf_r+0xa30>)
    f7fe:	str.w	r5, [sl, #4]
    f802:	adds	r3, #1
    f804:	add	r2, r5
    f806:	cmp	r3, #7
    f808:	strd	r3, r2, [sp, #148]	; 0x94
    f80c:	str.w	r1, [sl]
    f810:	bgt.w	10260 <_svfprintf_r+0x1290>
    f814:	ldr	r3, [sp, #12]
    f816:	ldr	r1, [sp, #20]
    f818:	subs	r5, r3, r1
    f81a:	cmp	r5, #0
    f81c:	add.w	sl, sl, #8
    f820:	ble.w	f2da <_svfprintf_r+0x30a>
    f824:	cmp	r5, #16
    f826:	ldr	r3, [sp, #148]	; 0x94
    f828:	ble.n	f86a <_svfprintf_r+0x89a>
    f82a:	mov	r1, sl
    f82c:	movs	r6, #16
    f82e:	vmov	sl, s22
    f832:	b.n	f83e <_svfprintf_r+0x86e>
    f834:	subs	r5, #16
    f836:	cmp	r5, #16
    f838:	add.w	r1, r1, #8
    f83c:	ble.n	f868 <_svfprintf_r+0x898>
    f83e:	adds	r3, #1
    f840:	ldr	r0, [pc, #444]	; (fa00 <_svfprintf_r+0xa30>)
    f842:	adds	r2, #16
    f844:	cmp	r3, #7
    f846:	strd	r0, r6, [r1]
    f84a:	strd	r3, r2, [sp, #148]	; 0x94
    f84e:	ble.n	f834 <_svfprintf_r+0x864>
    f850:	add	r2, sp, #144	; 0x90
    f852:	mov	r1, sl
    f854:	mov	r0, fp
    f856:	bl	11d38 <__ssprint_r>
    f85a:	cbnz	r0, f89a <_svfprintf_r+0x8ca>
    f85c:	subs	r5, #16
    f85e:	cmp	r5, #16
    f860:	ldrd	r3, r2, [sp, #148]	; 0x94
    f864:	add	r1, sp, #156	; 0x9c
    f866:	bgt.n	f83e <_svfprintf_r+0x86e>
    f868:	mov	sl, r1
    f86a:	adds	r3, #1
    f86c:	ldr	r1, [pc, #400]	; (fa00 <_svfprintf_r+0xa30>)
    f86e:	str.w	r5, [sl, #4]
    f872:	add	r2, r5
    f874:	cmp	r3, #7
    f876:	strd	r3, r2, [sp, #148]	; 0x94
    f87a:	str.w	r1, [sl]
    f87e:	bgt.w	fc36 <_svfprintf_r+0xc66>
    f882:	add.w	sl, sl, #8
    f886:	b.n	f2da <_svfprintf_r+0x30a>
    f888:	vmov	r1, s22
    f88c:	add	r2, sp, #144	; 0x90
    f88e:	mov	r0, fp
    f890:	bl	11d38 <__ssprint_r>
    f894:	cmp	r0, #0
    f896:	beq.w	f328 <_svfprintf_r+0x358>
    f89a:	ldr	r3, [sp, #28]
    f89c:	cmp	r3, #0
    f89e:	beq.w	f1e6 <_svfprintf_r+0x216>
    f8a2:	ldr	r1, [sp, #28]
    f8a4:	mov	r0, fp
    f8a6:	bl	e604 <_free_r>
    f8aa:	b.n	f1e6 <_svfprintf_r+0x216>
    f8ac:	ldr	r3, [sp, #56]	; 0x38
    f8ae:	cmp	r3, #1
    f8b0:	ble.w	fba8 <_svfprintf_r+0xbd8>
    f8b4:	ldr	r3, [sp, #148]	; 0x94
    f8b6:	str.w	r4, [sl]
    f8ba:	adds	r3, #1
    f8bc:	adds	r2, #1
    f8be:	movs	r1, #1
    f8c0:	cmp	r3, #7
    f8c2:	str	r2, [sp, #152]	; 0x98
    f8c4:	str	r3, [sp, #148]	; 0x94
    f8c6:	str.w	r1, [sl, #4]
    f8ca:	bgt.w	fcbe <_svfprintf_r+0xcee>
    f8ce:	add.w	sl, sl, #8
    f8d2:	ldr	r1, [sp, #64]	; 0x40
    f8d4:	ldr	r0, [sp, #72]	; 0x48
    f8d6:	adds	r3, #1
    f8d8:	add	r2, r1
    f8da:	cmp	r3, #7
    f8dc:	strd	r0, r1, [sl]
    f8e0:	strd	r3, r2, [sp, #148]	; 0x94
    f8e4:	bgt.w	fca2 <_svfprintf_r+0xcd2>
    f8e8:	add.w	sl, sl, #8
    f8ec:	vcmp.f64	d8, #0.0
    f8f0:	vmrs	APSR_nzcv, fpscr
    f8f4:	beq.w	fbe6 <_svfprintf_r+0xc16>
    f8f8:	ldr	r1, [sp, #56]	; 0x38
    f8fa:	adds	r3, #1
    f8fc:	subs	r1, #1
    f8fe:	adds	r4, #1
    f900:	add	r2, r1
    f902:	cmp	r3, #7
    f904:	str.w	r4, [sl]
    f908:	str	r3, [sp, #148]	; 0x94
    f90a:	str.w	r1, [sl, #4]
    f90e:	str	r2, [sp, #152]	; 0x98
    f910:	bgt.w	fbca <_svfprintf_r+0xbfa>
    f914:	add.w	sl, sl, #8
    f918:	ldr	r1, [sp, #80]	; 0x50
    f91a:	str.w	r1, [sl, #4]
    f91e:	adds	r3, #1
    f920:	add	r2, r1
    f922:	cmp	r3, #7
    f924:	add	r1, sp, #120	; 0x78
    f926:	strd	r3, r2, [sp, #148]	; 0x94
    f92a:	str.w	r1, [sl]
    f92e:	ble.w	f2fc <_svfprintf_r+0x32c>
    f932:	vmov	r1, s22
    f936:	add	r2, sp, #144	; 0x90
    f938:	mov	r0, fp
    f93a:	bl	11d38 <__ssprint_r>
    f93e:	cmp	r0, #0
    f940:	bne.n	f89a <_svfprintf_r+0x8ca>
    f942:	ldr	r2, [sp, #152]	; 0x98
    f944:	add.w	sl, sp, #156	; 0x9c
    f948:	b.n	f300 <_svfprintf_r+0x330>
    f94a:	cmp	r5, #16
    f94c:	ldrd	r1, r2, [sp, #148]	; 0x94
    f950:	ldr	r6, [pc, #176]	; (fa04 <_svfprintf_r+0xa34>)
    f952:	ble.n	f99e <_svfprintf_r+0x9ce>
    f954:	str	r4, [sp, #92]	; 0x5c
    f956:	movs	r3, #16
    f958:	vmov	r4, s22
    f95c:	mov	r0, r1
    f95e:	b.n	f96a <_svfprintf_r+0x99a>
    f960:	subs	r5, #16
    f962:	cmp	r5, #16
    f964:	add.w	sl, sl, #8
    f968:	ble.n	f99a <_svfprintf_r+0x9ca>
    f96a:	adds	r0, #1
    f96c:	adds	r2, #16
    f96e:	cmp	r0, #7
    f970:	strd	r6, r3, [sl]
    f974:	strd	r0, r2, [sp, #148]	; 0x94
    f978:	ble.n	f960 <_svfprintf_r+0x990>
    f97a:	add	r2, sp, #144	; 0x90
    f97c:	mov	r1, r4
    f97e:	mov	r0, fp
    f980:	add.w	sl, sp, #156	; 0x9c
    f984:	bl	11d38 <__ssprint_r>
    f988:	cmp	r0, #0
    f98a:	bne.n	f89a <_svfprintf_r+0x8ca>
    f98c:	subs	r5, #16
    f98e:	cmp	r5, #16
    f990:	ldrd	r0, r2, [sp, #148]	; 0x94
    f994:	mov.w	r3, #16
    f998:	bgt.n	f96a <_svfprintf_r+0x99a>
    f99a:	ldr	r4, [sp, #92]	; 0x5c
    f99c:	mov	r1, r0
    f99e:	adds	r1, #1
    f9a0:	add	r2, r5
    f9a2:	cmp	r1, #7
    f9a4:	strd	r1, r2, [sp, #148]	; 0x94
    f9a8:	str.w	r6, [sl]
    f9ac:	str.w	r5, [sl, #4]
    f9b0:	bgt.w	1012e <_svfprintf_r+0x115e>
    f9b4:	ldrb.w	r1, [sp, #103]	; 0x67
    f9b8:	add.w	sl, sl, #8
    f9bc:	b.n	f27a <_svfprintf_r+0x2aa>
    f9be:	str.w	r8, [sp, #8]
    f9c2:	cmp	r2, #10
    f9c4:	sbcs.w	r3, r1, #0
    f9c8:	bcs.w	10056 <_svfprintf_r+0x1086>
    f9cc:	adds	r2, #48	; 0x30
    f9ce:	movs	r3, #1
    f9d0:	ldr.w	r8, [sp, #8]
    f9d4:	strb.w	r2, [sp, #319]	; 0x13f
    f9d8:	str	r3, [sp, #20]
    f9da:	addw	r4, sp, #319	; 0x13f
    f9de:	b.n	f6b2 <_svfprintf_r+0x6e2>
    f9e0:	vmov	r1, s22
    f9e4:	add	r2, sp, #144	; 0x90
    f9e6:	mov	r0, fp
    f9e8:	bl	11d38 <__ssprint_r>
    f9ec:	cmp	r0, #0
    f9ee:	bne.w	f89a <_svfprintf_r+0x8ca>
    f9f2:	ldr	r2, [sp, #152]	; 0x98
    f9f4:	add.w	sl, sp, #156	; 0x9c
    f9f8:	b.n	f2a0 <_svfprintf_r+0x2d0>
    f9fa:	nop
    f9fc:	.word	0x20000e98
    fa00:	.word	0x20001314
    fa04:	.word	0x20000e9c
    fa08:	vmov	r1, s22
    fa0c:	add	r2, sp, #144	; 0x90
    fa0e:	mov	r0, fp
    fa10:	bl	11d38 <__ssprint_r>
    fa14:	cmp	r0, #0
    fa16:	bne.w	f89a <_svfprintf_r+0x8ca>
    fa1a:	ldr	r2, [sp, #152]	; 0x98
    fa1c:	add.w	sl, sp, #156	; 0x9c
    fa20:	b.n	f2c6 <_svfprintf_r+0x2f6>
    fa22:	cmp	r4, #16
    fa24:	ldr	r3, [sp, #148]	; 0x94
    fa26:	ldr	r6, [pc, #760]	; (fd20 <_svfprintf_r+0xd50>)
    fa28:	ble.n	fa6a <_svfprintf_r+0xa9a>
    fa2a:	vmov	r8, s22
    fa2e:	movs	r5, #16
    fa30:	b.n	fa3c <_svfprintf_r+0xa6c>
    fa32:	subs	r4, #16
    fa34:	cmp	r4, #16
    fa36:	add.w	sl, sl, #8
    fa3a:	ble.n	fa6a <_svfprintf_r+0xa9a>
    fa3c:	adds	r3, #1
    fa3e:	adds	r2, #16
    fa40:	cmp	r3, #7
    fa42:	strd	r6, r5, [sl]
    fa46:	strd	r3, r2, [sp, #148]	; 0x94
    fa4a:	ble.n	fa32 <_svfprintf_r+0xa62>
    fa4c:	add	r2, sp, #144	; 0x90
    fa4e:	mov	r1, r8
    fa50:	mov	r0, fp
    fa52:	add.w	sl, sp, #156	; 0x9c
    fa56:	bl	11d38 <__ssprint_r>
    fa5a:	cmp	r0, #0
    fa5c:	bne.w	f89a <_svfprintf_r+0x8ca>
    fa60:	subs	r4, #16
    fa62:	cmp	r4, #16
    fa64:	ldrd	r3, r2, [sp, #148]	; 0x94
    fa68:	bgt.n	fa3c <_svfprintf_r+0xa6c>
    fa6a:	adds	r3, #1
    fa6c:	add	r2, r4
    fa6e:	cmp	r3, #7
    fa70:	strd	r6, r4, [sl]
    fa74:	strd	r3, r2, [sp, #148]	; 0x94
    fa78:	ble.w	f312 <_svfprintf_r+0x342>
    fa7c:	vmov	r1, s22
    fa80:	add	r2, sp, #144	; 0x90
    fa82:	mov	r0, fp
    fa84:	bl	11d38 <__ssprint_r>
    fa88:	cmp	r0, #0
    fa8a:	bne.w	f89a <_svfprintf_r+0x8ca>
    fa8e:	ldr	r2, [sp, #152]	; 0x98
    fa90:	b.n	f312 <_svfprintf_r+0x342>
    fa92:	ldr	r1, [sp, #108]	; 0x6c
    fa94:	cmp	r1, #0
    fa96:	ble.w	1014e <_svfprintf_r+0x117e>
    fa9a:	ldr	r6, [sp, #48]	; 0x30
    fa9c:	ldr	r3, [sp, #56]	; 0x38
    fa9e:	cmp	r6, r3
    faa0:	it	ge
    faa2:	movge	r6, r3
    faa4:	cmp	r6, #0
    faa6:	ble.n	fac0 <_svfprintf_r+0xaf0>
    faa8:	ldr	r3, [sp, #148]	; 0x94
    faaa:	adds	r3, #1
    faac:	add	r2, r6
    faae:	cmp	r3, #7
    fab0:	strd	r4, r6, [sl]
    fab4:	str	r2, [sp, #152]	; 0x98
    fab6:	str	r3, [sp, #148]	; 0x94
    fab8:	bgt.w	107ce <_svfprintf_r+0x17fe>
    fabc:	add.w	sl, sl, #8
    fac0:	ldr	r5, [sp, #48]	; 0x30
    fac2:	cmp	r6, #0
    fac4:	it	ge
    fac6:	subge	r5, r5, r6
    fac8:	cmp	r5, #0
    faca:	bgt.w	fed4 <_svfprintf_r+0xf04>
    face:	ldr	r3, [sp, #48]	; 0x30
    fad0:	tst.w	r8, #1024	; 0x400
    fad4:	add	r3, r4
    fad6:	str	r3, [sp, #20]
    fad8:	bne.w	ff1a <_svfprintf_r+0xf4a>
    fadc:	ldr	r3, [sp, #108]	; 0x6c
    fade:	ldr	r1, [sp, #56]	; 0x38
    fae0:	cmp	r3, r1
    fae2:	blt.n	faec <_svfprintf_r+0xb1c>
    fae4:	tst.w	r8, #1
    fae8:	beq.w	1048a <_svfprintf_r+0x14ba>
    faec:	ldr	r1, [sp, #64]	; 0x40
    faee:	ldr	r0, [sp, #72]	; 0x48
    faf0:	add	r2, r1
    faf2:	strd	r0, r1, [sl]
    faf6:	ldr	r1, [sp, #148]	; 0x94
    faf8:	str	r2, [sp, #152]	; 0x98
    fafa:	adds	r1, #1
    fafc:	cmp	r1, #7
    fafe:	str	r1, [sp, #148]	; 0x94
    fb00:	bgt.w	1084e <_svfprintf_r+0x187e>
    fb04:	add.w	sl, sl, #8
    fb08:	ldr	r1, [sp, #56]	; 0x38
    fb0a:	adds	r5, r4, r1
    fb0c:	subs	r4, r1, r3
    fb0e:	ldr	r3, [sp, #20]
    fb10:	subs	r5, r5, r3
    fb12:	cmp	r5, r4
    fb14:	it	ge
    fb16:	movge	r5, r4
    fb18:	cmp	r5, #0
    fb1a:	ble.n	fb38 <_svfprintf_r+0xb68>
    fb1c:	str.w	r3, [sl]
    fb20:	ldr	r3, [sp, #148]	; 0x94
    fb22:	str.w	r5, [sl, #4]
    fb26:	adds	r3, #1
    fb28:	add	r2, r5
    fb2a:	cmp	r3, #7
    fb2c:	str	r2, [sp, #152]	; 0x98
    fb2e:	str	r3, [sp, #148]	; 0x94
    fb30:	bgt.w	108aa <_svfprintf_r+0x18da>
    fb34:	add.w	sl, sl, #8
    fb38:	cmp	r5, #0
    fb3a:	it	ge
    fb3c:	subge	r4, r4, r5
    fb3e:	cmp	r4, #0
    fb40:	ble.w	f300 <_svfprintf_r+0x330>
    fb44:	cmp	r4, #16
    fb46:	ldr	r3, [sp, #148]	; 0x94
    fb48:	ble.w	10244 <_svfprintf_r+0x1274>
    fb4c:	vmov	r6, s22
    fb50:	movs	r5, #16
    fb52:	b.n	fb60 <_svfprintf_r+0xb90>
    fb54:	add.w	sl, sl, #8
    fb58:	subs	r4, #16
    fb5a:	cmp	r4, #16
    fb5c:	ble.w	10244 <_svfprintf_r+0x1274>
    fb60:	adds	r3, #1
    fb62:	ldr	r1, [pc, #448]	; (fd24 <_svfprintf_r+0xd54>)
    fb64:	adds	r2, #16
    fb66:	cmp	r3, #7
    fb68:	strd	r1, r5, [sl]
    fb6c:	strd	r3, r2, [sp, #148]	; 0x94
    fb70:	ble.n	fb54 <_svfprintf_r+0xb84>
    fb72:	add	r2, sp, #144	; 0x90
    fb74:	mov	r1, r6
    fb76:	mov	r0, fp
    fb78:	bl	11d38 <__ssprint_r>
    fb7c:	cmp	r0, #0
    fb7e:	bne.w	f89a <_svfprintf_r+0x8ca>
    fb82:	ldrd	r3, r2, [sp, #148]	; 0x94
    fb86:	add.w	sl, sp, #156	; 0x9c
    fb8a:	b.n	fb58 <_svfprintf_r+0xb88>
    fb8c:	cmp	r3, #48	; 0x30
    fb8e:	beq.w	f6a8 <_svfprintf_r+0x6d8>
    fb92:	movs	r3, #48	; 0x30
    fb94:	subs	r0, #2
    fb96:	strb.w	r3, [r4, #-1]
    fb9a:	add	r3, sp, #320	; 0x140
    fb9c:	subs	r3, r3, r0
    fb9e:	ldr.w	r8, [sp, #8]
    fba2:	str	r3, [sp, #20]
    fba4:	mov	r4, r0
    fba6:	b.n	f6b2 <_svfprintf_r+0x6e2>
    fba8:	tst.w	r8, #1
    fbac:	bne.w	f8b4 <_svfprintf_r+0x8e4>
    fbb0:	ldr	r3, [sp, #148]	; 0x94
    fbb2:	str.w	r4, [sl]
    fbb6:	adds	r3, #1
    fbb8:	adds	r2, #1
    fbba:	movs	r1, #1
    fbbc:	cmp	r3, #7
    fbbe:	str	r2, [sp, #152]	; 0x98
    fbc0:	str	r3, [sp, #148]	; 0x94
    fbc2:	str.w	r1, [sl, #4]
    fbc6:	ble.w	f914 <_svfprintf_r+0x944>
    fbca:	vmov	r1, s22
    fbce:	add	r2, sp, #144	; 0x90
    fbd0:	mov	r0, fp
    fbd2:	bl	11d38 <__ssprint_r>
    fbd6:	cmp	r0, #0
    fbd8:	bne.w	f89a <_svfprintf_r+0x8ca>
    fbdc:	ldrd	r3, r2, [sp, #148]	; 0x94
    fbe0:	add.w	sl, sp, #156	; 0x9c
    fbe4:	b.n	f918 <_svfprintf_r+0x948>
    fbe6:	ldr	r1, [sp, #56]	; 0x38
    fbe8:	subs	r4, r1, #1
    fbea:	cmp	r4, #0
    fbec:	ble.w	f918 <_svfprintf_r+0x948>
    fbf0:	cmp	r4, #16
    fbf2:	ble.w	102b8 <_svfprintf_r+0x12e8>
    fbf6:	vmov	r6, s22
    fbfa:	movs	r5, #16
    fbfc:	b.n	fc0a <_svfprintf_r+0xc3a>
    fbfe:	add.w	sl, sl, #8
    fc02:	subs	r4, #16
    fc04:	cmp	r4, #16
    fc06:	ble.w	102b8 <_svfprintf_r+0x12e8>
    fc0a:	adds	r3, #1
    fc0c:	ldr	r1, [pc, #276]	; (fd24 <_svfprintf_r+0xd54>)
    fc0e:	adds	r2, #16
    fc10:	cmp	r3, #7
    fc12:	strd	r1, r5, [sl]
    fc16:	strd	r3, r2, [sp, #148]	; 0x94
    fc1a:	ble.n	fbfe <_svfprintf_r+0xc2e>
    fc1c:	add	r2, sp, #144	; 0x90
    fc1e:	mov	r1, r6
    fc20:	mov	r0, fp
    fc22:	bl	11d38 <__ssprint_r>
    fc26:	cmp	r0, #0
    fc28:	bne.w	f89a <_svfprintf_r+0x8ca>
    fc2c:	ldrd	r3, r2, [sp, #148]	; 0x94
    fc30:	add.w	sl, sp, #156	; 0x9c
    fc34:	b.n	fc02 <_svfprintf_r+0xc32>
    fc36:	vmov	r1, s22
    fc3a:	add	r2, sp, #144	; 0x90
    fc3c:	mov	r0, fp
    fc3e:	bl	11d38 <__ssprint_r>
    fc42:	cmp	r0, #0
    fc44:	bne.w	f89a <_svfprintf_r+0x8ca>
    fc48:	ldr	r2, [sp, #152]	; 0x98
    fc4a:	add.w	sl, sp, #156	; 0x9c
    fc4e:	b.w	f2da <_svfprintf_r+0x30a>
    fc52:	ldr	r3, [sp, #8]
    fc54:	ands.w	r3, r3, #16
    fc58:	bne.w	fdde <_svfprintf_r+0xe0e>
    fc5c:	ldr	r2, [sp, #8]
    fc5e:	ands.w	r2, r2, #64	; 0x40
    fc62:	beq.w	1035a <_svfprintf_r+0x138a>
    fc66:	ldr	r0, [sp, #32]
    fc68:	ldr.w	r2, [r0], #4
    fc6c:	str	r0, [sp, #32]
    fc6e:	mov	r1, r3
    fc70:	uxth	r2, r2
    fc72:	movs	r3, #1
    fc74:	b.n	f51a <_svfprintf_r+0x54a>
    fc76:	ands.w	r3, r8, #16
    fc7a:	bne.n	fd28 <_svfprintf_r+0xd58>
    fc7c:	ands.w	r2, r8, #64	; 0x40
    fc80:	beq.w	1033e <_svfprintf_r+0x136e>
    fc84:	ldr	r0, [sp, #32]
    fc86:	ldr.w	r2, [r0], #4
    fc8a:	str	r0, [sp, #32]
    fc8c:	mov	r1, r3
    fc8e:	uxth	r2, r2
    fc90:	b.n	f5e4 <_svfprintf_r+0x614>
    fc92:	negs	r2, r2
    fc94:	sbc.w	r1, r1, r1, lsl #1
    fc98:	str.w	r8, [sp, #8]
    fc9c:	movs	r0, #45	; 0x2d
    fc9e:	movs	r3, #1
    fca0:	b.n	f51c <_svfprintf_r+0x54c>
    fca2:	vmov	r1, s22
    fca6:	add	r2, sp, #144	; 0x90
    fca8:	mov	r0, fp
    fcaa:	bl	11d38 <__ssprint_r>
    fcae:	cmp	r0, #0
    fcb0:	bne.w	f89a <_svfprintf_r+0x8ca>
    fcb4:	ldrd	r3, r2, [sp, #148]	; 0x94
    fcb8:	add.w	sl, sp, #156	; 0x9c
    fcbc:	b.n	f8ec <_svfprintf_r+0x91c>
    fcbe:	vmov	r1, s22
    fcc2:	add	r2, sp, #144	; 0x90
    fcc4:	mov	r0, fp
    fcc6:	bl	11d38 <__ssprint_r>
    fcca:	cmp	r0, #0
    fccc:	bne.w	f89a <_svfprintf_r+0x8ca>
    fcd0:	ldrd	r3, r2, [sp, #148]	; 0x94
    fcd4:	add.w	sl, sp, #156	; 0x9c
    fcd8:	b.n	f8d2 <_svfprintf_r+0x902>
    fcda:	tst.w	r8, #1
    fcde:	beq.w	f300 <_svfprintf_r+0x330>
    fce2:	b.n	f73a <_svfprintf_r+0x76a>
    fce4:	str	r3, [sp, #32]
    fce6:	ldrb.w	r3, [r9]
    fcea:	b.w	f088 <_svfprintf_r+0xb8>
    fcee:	add	r4, sp, #320	; 0x140
    fcf0:	b.n	f6b2 <_svfprintf_r+0x6e2>
    fcf2:	tst.w	r8, #512	; 0x200
    fcf6:	bne.w	104b0 <_svfprintf_r+0x14e0>
    fcfa:	ldr.w	r2, [r3], #4
    fcfe:	str	r3, [sp, #32]
    fd00:	asrs	r1, r2, #31
    fd02:	mov	r3, r1
    fd04:	b.w	f474 <_svfprintf_r+0x4a4>
    fd08:	ldr	r3, [sp, #32]
    fd0a:	ldr	r0, [sp, #16]
    fd0c:	ldr.w	r1, [r3], #4
    fd10:	str	r3, [sp, #32]
    fd12:	asrs	r2, r0, #31
    fd14:	strd	r0, r2, [r1]
    fd18:	mov	r4, r9
    fd1a:	b.w	f034 <_svfprintf_r+0x64>
    fd1e:	nop
    fd20:	.word	0x20000e9c
    fd24:	.word	0x20001314
    fd28:	ldr	r3, [sp, #32]
    fd2a:	ldr.w	r2, [r3], #4
    fd2e:	str	r3, [sp, #32]
    fd30:	b.n	f5e4 <_svfprintf_r+0x614>
    fd32:	vcmp.f64	d8, d8
    fd36:	vmrs	APSR_nzcv, fpscr
    fd3a:	bvs.w	10a66 <_svfprintf_r+0x1a96>
    fd3e:	ldr	r3, [sp, #44]	; 0x2c
    fd40:	cmp	r3, #97	; 0x61
    fd42:	beq.w	107ea <_svfprintf_r+0x181a>
    fd46:	cmp	r3, #65	; 0x41
    fd48:	beq.w	108cc <_svfprintf_r+0x18fc>
    fd4c:	ldr	r3, [sp, #12]
    fd4e:	adds	r3, #1
    fd50:	ldr	r3, [sp, #44]	; 0x2c
    fd52:	bic.w	r5, r3, #32
    fd56:	beq.w	1065a <_svfprintf_r+0x168a>
    fd5a:	cmp	r5, #71	; 0x47
    fd5c:	bne.n	fd68 <_svfprintf_r+0xd98>
    fd5e:	ldr	r3, [sp, #12]
    fd60:	cmp	r3, #0
    fd62:	it	eq
    fd64:	moveq	r3, #1
    fd66:	str	r3, [sp, #12]
    fd68:	vmov	r3, s17
    fd6c:	cmp	r3, #0
    fd6e:	orr.w	r2, r8, #256	; 0x100
    fd72:	mov	r6, r8
    fd74:	blt.w	109a8 <_svfprintf_r+0x19d8>
    fd78:	vmov.f64	d10, d8
    fd7c:	movs	r3, #0
    fd7e:	mov	r8, r2
    fd80:	str	r3, [sp, #36]	; 0x24
    fd82:	str	r3, [sp, #28]
    fd84:	ldr	r3, [sp, #44]	; 0x2c
    fd86:	subs	r3, #65	; 0x41
    fd88:	cmp	r3, #37	; 0x25
    fd8a:	bhi.w	104be <_svfprintf_r+0x14ee>
    fd8e:	tbh	[pc, r3, lsl #1]
    fd92:	.short	0x046f
    fd94:	.word	0x03960396
    fd98:	.word	0x04680396
    fd9c:	.word	0x0396046c
    fda0:	.word	0x03960396
    fda4:	.word	0x03960396
    fda8:	.word	0x03960396
    fdac:	.word	0x03960396
    fdb0:	.word	0x03960396
    fdb4:	.word	0x03960396
    fdb8:	.word	0x03960396
    fdbc:	.word	0x03960396
    fdc0:	.word	0x03960396
    fdc4:	.word	0x03960396
    fdc8:	.word	0x03960396
    fdcc:	.word	0x03960396
    fdd0:	.word	0x03960396
    fdd4:	.word	0x03960396
    fdd8:	.word	0x04680396
    fddc:	.short	0x046c
    fdde:	ldr	r3, [sp, #32]
    fde0:	ldr.w	r2, [r3], #4
    fde4:	str	r3, [sp, #32]
    fde6:	movs	r3, #1
    fde8:	b.w	f51a <_svfprintf_r+0x54a>
    fdec:	ldr	r3, [sp, #76]	; 0x4c
    fdee:	cmp	r3, #0
    fdf0:	beq.w	f192 <_svfprintf_r+0x1c2>
    fdf4:	ldr	r3, [sp, #76]	; 0x4c
    fdf6:	ldrb	r3, [r3, #0]
    fdf8:	cmp	r3, #0
    fdfa:	beq.w	f192 <_svfprintf_r+0x1c2>
    fdfe:	ldrb.w	r3, [r9]
    fe02:	orr.w	r8, r8, #1024	; 0x400
    fe06:	b.w	f088 <_svfprintf_r+0xb8>
    fe0a:	str	r3, [sp, #44]	; 0x2c
    fe0c:	str.w	r8, [sp, #8]
    fe10:	b.w	f5f6 <_svfprintf_r+0x626>
    fe14:	str	r3, [sp, #44]	; 0x2c
    fe16:	ldr	r3, [pc, #616]	; (10080 <_svfprintf_r+0x10b0>)
    fe18:	str	r3, [sp, #68]	; 0x44
    fe1a:	ands.w	r1, r8, #32
    fe1e:	beq.w	1002c <_svfprintf_r+0x105c>
    fe22:	ldr	r3, [sp, #32]
    fe24:	adds	r3, #7
    fe26:	bic.w	r3, r3, #7
    fe2a:	ldr	r1, [r3, #4]
    fe2c:	ldr.w	r2, [r3], #8
    fe30:	str	r3, [sp, #32]
    fe32:	tst.w	r8, #1
    fe36:	beq.n	fe4e <_svfprintf_r+0xe7e>
    fe38:	orrs.w	r3, r2, r1
    fe3c:	beq.n	fe4e <_svfprintf_r+0xe7e>
    fe3e:	ldr	r3, [sp, #44]	; 0x2c
    fe40:	strb.w	r3, [sp, #105]	; 0x69
    fe44:	movs	r3, #48	; 0x30
    fe46:	orr.w	r8, r8, #2
    fe4a:	strb.w	r3, [sp, #104]	; 0x68
    fe4e:	bic.w	r3, r8, #1024	; 0x400
    fe52:	str	r3, [sp, #8]
    fe54:	movs	r3, #2
    fe56:	b.w	f51a <_svfprintf_r+0x54a>
    fe5a:	str	r3, [sp, #44]	; 0x2c
    fe5c:	b.w	f5cc <_svfprintf_r+0x5fc>
    fe60:	str	r3, [sp, #44]	; 0x2c
    fe62:	ldr	r3, [pc, #544]	; (10084 <_svfprintf_r+0x10b4>)
    fe64:	str	r3, [sp, #68]	; 0x44
    fe66:	b.n	fe1a <_svfprintf_r+0xe4a>
    fe68:	ldr	r3, [sp, #32]
    fe6a:	movs	r1, #1
    fe6c:	ldr.w	r2, [r3], #4
    fe70:	str	r1, [sp, #8]
    fe72:	strb.w	r2, [sp, #220]	; 0xdc
    fe76:	str	r3, [sp, #32]
    fe78:	str	r1, [sp, #20]
    fe7a:	add	r4, sp, #220	; 0xdc
    fe7c:	b.w	f3de <_svfprintf_r+0x40e>
    fe80:	vmov	r1, s22
    fe84:	add	r2, sp, #144	; 0x90
    fe86:	mov	r0, fp
    fe88:	bl	11d38 <__ssprint_r>
    fe8c:	cmp	r0, #0
    fe8e:	bne.w	f89a <_svfprintf_r+0x8ca>
    fe92:	ldr	r2, [sp, #152]	; 0x98
    fe94:	add.w	sl, sp, #156	; 0x9c
    fe98:	b.n	f756 <_svfprintf_r+0x786>
    fe9a:	ldr	r3, [sp, #12]
    fe9c:	str	r4, [sp, #28]
    fe9e:	cmp	r3, #6
    fea0:	mov	r2, r4
    fea2:	it	cs
    fea4:	movcs	r3, #6
    fea6:	str	r4, [sp, #12]
    fea8:	mov	r1, r4
    feaa:	strd	r2, r2, [sp, #48]	; 0x30
    feae:	ldr	r4, [pc, #472]	; (10088 <_svfprintf_r+0x10b8>)
    feb0:	str	r3, [sp, #8]
    feb2:	str	r3, [sp, #20]
    feb4:	str	r2, [sp, #60]	; 0x3c
    feb6:	b.w	f392 <_svfprintf_r+0x3c2>
    feba:	movs	r1, #64	; 0x40
    febc:	mov	r0, fp
    febe:	bl	d260 <_malloc_r>
    fec2:	str	r0, [r4, #0]
    fec4:	str	r0, [r4, #16]
    fec6:	cmp	r0, #0
    fec8:	beq.w	10aea <_svfprintf_r+0x1b1a>
    fecc:	movs	r3, #64	; 0x40
    fece:	str	r3, [r4, #20]
    fed0:	b.w	f010 <_svfprintf_r+0x40>
    fed4:	cmp	r5, #16
    fed6:	ldr	r3, [sp, #148]	; 0x94
    fed8:	ble.w	10396 <_svfprintf_r+0x13c6>
    fedc:	mov	r1, sl
    fede:	movs	r6, #16
    fee0:	vmov	sl, s22
    fee4:	b.n	fef0 <_svfprintf_r+0xf20>
    fee6:	adds	r1, #8
    fee8:	subs	r5, #16
    feea:	cmp	r5, #16
    feec:	ble.w	10394 <_svfprintf_r+0x13c4>
    fef0:	adds	r3, #1
    fef2:	ldr	r0, [pc, #408]	; (1008c <_svfprintf_r+0x10bc>)
    fef4:	adds	r2, #16
    fef6:	cmp	r3, #7
    fef8:	strd	r0, r6, [r1]
    fefc:	strd	r3, r2, [sp, #148]	; 0x94
    ff00:	ble.n	fee6 <_svfprintf_r+0xf16>
    ff02:	add	r2, sp, #144	; 0x90
    ff04:	mov	r1, sl
    ff06:	mov	r0, fp
    ff08:	bl	11d38 <__ssprint_r>
    ff0c:	cmp	r0, #0
    ff0e:	bne.w	f89a <_svfprintf_r+0x8ca>
    ff12:	ldrd	r3, r2, [sp, #148]	; 0x94
    ff16:	add	r1, sp, #156	; 0x9c
    ff18:	b.n	fee8 <_svfprintf_r+0xf18>
    ff1a:	ldr	r3, [sp, #56]	; 0x38
    ff1c:	str.w	r9, [sp, #36]	; 0x24
    ff20:	adds	r3, r4, r3
    ff22:	str	r3, [sp, #12]
    ff24:	ldr	r3, [sp, #52]	; 0x34
    ff26:	str.w	r8, [sp, #40]	; 0x28
    ff2a:	ldr	r6, [sp, #76]	; 0x4c
    ff2c:	ldr	r5, [sp, #20]
    ff2e:	ldr.w	r9, [sp, #88]	; 0x58
    ff32:	ldr.w	r8, [sp, #60]	; 0x3c
    ff36:	str	r4, [sp, #44]	; 0x2c
    ff38:	vmov	r1, s22
    ff3c:	mov	r0, sl
    ff3e:	cmp	r3, #0
    ff40:	beq.n	ffac <_svfprintf_r+0xfdc>
    ff42:	cmp.w	r8, #0
    ff46:	bne.n	ffb4 <_svfprintf_r+0xfe4>
    ff48:	ldr	r3, [sp, #52]	; 0x34
    ff4a:	subs	r3, #1
    ff4c:	subs	r6, #1
    ff4e:	str	r3, [sp, #52]	; 0x34
    ff50:	ldr	r3, [sp, #84]	; 0x54
    ff52:	strd	r3, r9, [r0]
    ff56:	ldr	r3, [sp, #148]	; 0x94
    ff58:	adds	r3, #1
    ff5a:	add	r2, r9
    ff5c:	cmp	r3, #7
    ff5e:	str	r2, [sp, #152]	; 0x98
    ff60:	str	r3, [sp, #148]	; 0x94
    ff62:	bgt.n	1003e <_svfprintf_r+0x106e>
    ff64:	adds	r0, #8
    ff66:	ldr	r3, [sp, #12]
    ff68:	ldrb.w	ip, [r6]
    ff6c:	subs	r3, r3, r5
    ff6e:	cmp	r3, ip
    ff70:	it	ge
    ff72:	movge	r3, ip
    ff74:	cmp	r3, #0
    ff76:	mov	sl, r3
    ff78:	ble.n	ff94 <_svfprintf_r+0xfc4>
    ff7a:	ldr	r4, [sp, #148]	; 0x94
    ff7c:	adds	r4, #1
    ff7e:	add	r2, r3
    ff80:	cmp	r4, #7
    ff82:	strd	r5, r3, [r0]
    ff86:	str	r2, [sp, #152]	; 0x98
    ff88:	str	r4, [sp, #148]	; 0x94
    ff8a:	bgt.w	1027c <_svfprintf_r+0x12ac>
    ff8e:	ldrb.w	ip, [r6]
    ff92:	adds	r0, #8
    ff94:	cmp.w	sl, #0
    ff98:	ite	ge
    ff9a:	subge.w	r4, ip, sl
    ff9e:	movlt	r4, ip
    ffa0:	cmp	r4, #0
    ffa2:	bgt.n	ffba <_svfprintf_r+0xfea>
    ffa4:	add	r5, ip
    ffa6:	ldr	r3, [sp, #52]	; 0x34
    ffa8:	cmp	r3, #0
    ffaa:	bne.n	ff42 <_svfprintf_r+0xf72>
    ffac:	cmp.w	r8, #0
    ffb0:	beq.w	1070c <_svfprintf_r+0x173c>
    ffb4:	add.w	r8, r8, #4294967295
    ffb8:	b.n	ff50 <_svfprintf_r+0xf80>
    ffba:	cmp	r4, #16
    ffbc:	ldr.w	ip, [sp, #148]	; 0x94
    ffc0:	ble.n	1000c <_svfprintf_r+0x103c>
    ffc2:	str	r5, [sp, #20]
    ffc4:	mov.w	sl, #16
    ffc8:	mov	r3, ip
    ffca:	mov	r5, r1
    ffcc:	b.n	ffd8 <_svfprintf_r+0x1008>
    ffce:	subs	r4, #16
    ffd0:	cmp	r4, #16
    ffd2:	add.w	r0, r0, #8
    ffd6:	ble.n	10006 <_svfprintf_r+0x1036>
    ffd8:	adds	r3, #1
    ffda:	ldr	r1, [pc, #176]	; (1008c <_svfprintf_r+0x10bc>)
    ffdc:	adds	r2, #16
    ffde:	cmp	r3, #7
    ffe0:	strd	r1, sl, [r0]
    ffe4:	strd	r3, r2, [sp, #148]	; 0x94
    ffe8:	ble.n	ffce <_svfprintf_r+0xffe>
    ffea:	add	r2, sp, #144	; 0x90
    ffec:	mov	r1, r5
    ffee:	mov	r0, fp
    fff0:	bl	11d38 <__ssprint_r>
    fff4:	cmp	r0, #0
    fff6:	bne.w	f89a <_svfprintf_r+0x8ca>
    fffa:	subs	r4, #16
    fffc:	cmp	r4, #16
    fffe:	ldrd	r3, r2, [sp, #148]	; 0x94
   10002:	add	r0, sp, #156	; 0x9c
   10004:	bgt.n	ffd8 <_svfprintf_r+0x1008>
   10006:	mov	r1, r5
   10008:	ldr	r5, [sp, #20]
   1000a:	mov	ip, r3
   1000c:	add.w	r3, ip, #1
   10010:	add	r2, r4
   10012:	str	r4, [r0, #4]
   10014:	cmp	r3, #7
   10016:	ldr	r4, [pc, #116]	; (1008c <_svfprintf_r+0x10bc>)
   10018:	str	r4, [r0, #0]
   1001a:	strd	r3, r2, [sp, #148]	; 0x94
   1001e:	bgt.w	107ae <_svfprintf_r+0x17de>
   10022:	ldrb.w	ip, [r6]
   10026:	adds	r0, #8
   10028:	add	r5, ip
   1002a:	b.n	ffa6 <_svfprintf_r+0xfd6>
   1002c:	ands.w	r3, r8, #16
   10030:	beq.w	101b8 <_svfprintf_r+0x11e8>
   10034:	ldr	r3, [sp, #32]
   10036:	ldr.w	r2, [r3], #4
   1003a:	str	r3, [sp, #32]
   1003c:	b.n	fe32 <_svfprintf_r+0xe62>
   1003e:	add	r2, sp, #144	; 0x90
   10040:	mov	r0, fp
   10042:	str	r1, [sp, #20]
   10044:	bl	11d38 <__ssprint_r>
   10048:	cmp	r0, #0
   1004a:	bne.w	f89a <_svfprintf_r+0x8ca>
   1004e:	ldr	r2, [sp, #152]	; 0x98
   10050:	ldr	r1, [sp, #20]
   10052:	add	r0, sp, #156	; 0x9c
   10054:	b.n	ff66 <_svfprintf_r+0xf96>
   10056:	ldr	r0, [sp, #8]
   10058:	str.w	sl, [sp, #28]
   1005c:	add	r4, sp, #320	; 0x140
   1005e:	and.w	r0, r0, #1024	; 0x400
   10062:	movs	r5, #0
   10064:	vmov	s20, fp
   10068:	ldr	r3, [pc, #36]	; (10090 <_svfprintf_r+0x10c0>)
   1006a:	ldr.w	sl, [sp, #76]	; 0x4c
   1006e:	str.w	r9, [sp, #20]
   10072:	mov	fp, r4
   10074:	mov.w	r8, #5
   10078:	mov	ip, r5
   1007a:	mov	r4, r0
   1007c:	b.n	100a0 <_svfprintf_r+0x10d0>
   1007e:	nop
   10080:	.word	0x20000e68
   10084:	.word	0x20000e7c
   10088:	.word	0x20000e90
   1008c:	.word	0x20001314
   10090:	.word	0xcccccccd
   10094:	cmp	r2, #10
   10096:	sbcs.w	r1, r1, #0
   1009a:	bcc.n	1010a <_svfprintf_r+0x113a>
   1009c:	mov	r2, r9
   1009e:	mov	r1, r6
   100a0:	adds	r0, r2, r1
   100a2:	adc.w	r0, r0, #0
   100a6:	umull	r5, r6, r3, r0
   100aa:	bic.w	r5, r6, #3
   100ae:	add.w	r5, r5, r6, lsr #2
   100b2:	subs	r0, r0, r5
   100b4:	subs	r5, r2, r0
   100b6:	mov.w	r6, #3435973836	; 0xcccccccc
   100ba:	sbc.w	lr, r1, #0
   100be:	mul.w	r6, r6, r5
   100c2:	umull	r9, r5, r5, r3
   100c6:	mla	r6, r3, lr, r6
   100ca:	and.w	lr, r9, #1
   100ce:	add	r6, r5
   100d0:	umull	r5, lr, lr, r8
   100d4:	adds	r5, r5, r0
   100d6:	mov.w	r9, r9, lsr #1
   100da:	adds	r5, #48	; 0x30
   100dc:	strb.w	r5, [fp, #-1]
   100e0:	orr.w	r9, r9, r6, lsl #31
   100e4:	add.w	ip, ip, #1
   100e8:	add.w	fp, fp, #4294967295
   100ec:	lsrs	r6, r6, #1
   100ee:	cmp	r4, #0
   100f0:	beq.n	10094 <_svfprintf_r+0x10c4>
   100f2:	ldrb.w	r0, [sl]
   100f6:	cmp	ip, r0
   100f8:	bne.n	10094 <_svfprintf_r+0x10c4>
   100fa:	cmp.w	ip, #255	; 0xff
   100fe:	beq.n	10094 <_svfprintf_r+0x10c4>
   10100:	cmp	r2, #10
   10102:	sbcs.w	r1, r1, #0
   10106:	bcs.w	10428 <_svfprintf_r+0x1458>
   1010a:	mov	r4, fp
   1010c:	add	r3, sp, #320	; 0x140
   1010e:	subs	r3, r3, r4
   10110:	ldr.w	r9, [sp, #20]
   10114:	str.w	sl, [sp, #76]	; 0x4c
   10118:	vmov	fp, s20
   1011c:	ldr.w	sl, [sp, #28]
   10120:	ldr.w	r8, [sp, #8]
   10124:	str.w	ip, [sp, #56]	; 0x38
   10128:	str	r3, [sp, #20]
   1012a:	b.w	f6b2 <_svfprintf_r+0x6e2>
   1012e:	vmov	r1, s22
   10132:	add	r2, sp, #144	; 0x90
   10134:	mov	r0, fp
   10136:	bl	11d38 <__ssprint_r>
   1013a:	cmp	r0, #0
   1013c:	bne.w	f89a <_svfprintf_r+0x8ca>
   10140:	ldrb.w	r1, [sp, #103]	; 0x67
   10144:	ldr	r2, [sp, #152]	; 0x98
   10146:	add.w	sl, sp, #156	; 0x9c
   1014a:	b.w	f27a <_svfprintf_r+0x2aa>
   1014e:	ldr	r3, [sp, #148]	; 0x94
   10150:	ldr	r0, [pc, #760]	; (1044c <_svfprintf_r+0x147c>)
   10152:	str.w	r0, [sl]
   10156:	adds	r3, #1
   10158:	adds	r2, #1
   1015a:	movs	r0, #1
   1015c:	cmp	r3, #7
   1015e:	str	r2, [sp, #152]	; 0x98
   10160:	str	r3, [sp, #148]	; 0x94
   10162:	str.w	r0, [sl, #4]
   10166:	bgt.w	10458 <_svfprintf_r+0x1488>
   1016a:	add.w	sl, sl, #8
   1016e:	cmp	r1, #0
   10170:	bne.w	102d2 <_svfprintf_r+0x1302>
   10174:	ldr	r1, [sp, #56]	; 0x38
   10176:	and.w	r3, r8, #1
   1017a:	orrs	r3, r1
   1017c:	beq.w	f300 <_svfprintf_r+0x330>
   10180:	ldr	r3, [sp, #64]	; 0x40
   10182:	ldr	r1, [sp, #72]	; 0x48
   10184:	add	r2, r3
   10186:	strd	r1, r3, [sl]
   1018a:	ldr	r3, [sp, #148]	; 0x94
   1018c:	str	r2, [sp, #152]	; 0x98
   1018e:	adds	r3, #1
   10190:	cmp	r3, #7
   10192:	str	r3, [sp, #148]	; 0x94
   10194:	bgt.w	1063c <_svfprintf_r+0x166c>
   10198:	add.w	sl, sl, #8
   1019c:	ldr	r1, [sp, #56]	; 0x38
   1019e:	str.w	r4, [sl]
   101a2:	adds	r3, #1
   101a4:	add	r2, r1
   101a6:	cmp	r3, #7
   101a8:	strd	r3, r2, [sp, #148]	; 0x94
   101ac:	str.w	r1, [sl, #4]
   101b0:	ble.w	f2fc <_svfprintf_r+0x32c>
   101b4:	b.w	f932 <_svfprintf_r+0x962>
   101b8:	ands.w	r2, r8, #64	; 0x40
   101bc:	beq.w	1037a <_svfprintf_r+0x13aa>
   101c0:	ldr	r0, [sp, #32]
   101c2:	ldr.w	r2, [r0], #4
   101c6:	str	r0, [sp, #32]
   101c8:	mov	r1, r3
   101ca:	uxth	r2, r2
   101cc:	b.n	fe32 <_svfprintf_r+0xe62>
   101ce:	vmov	r1, s22
   101d2:	add	r2, sp, #144	; 0x90
   101d4:	mov	r0, fp
   101d6:	bl	11d38 <__ssprint_r>
   101da:	cmp	r0, #0
   101dc:	bne.w	f89a <_svfprintf_r+0x8ca>
   101e0:	ldr	r2, [sp, #152]	; 0x98
   101e2:	add.w	sl, sp, #156	; 0x9c
   101e6:	b.w	f730 <_svfprintf_r+0x760>
   101ea:	add	r6, sp, #136	; 0x88
   101ec:	movs	r2, #8
   101ee:	movs	r1, #0
   101f0:	mov	r0, r6
   101f2:	str	r4, [sp, #116]	; 0x74
   101f4:	bl	e074 <memset>
   101f8:	ldr	r3, [sp, #12]
   101fa:	adds	r2, r3, #1
   101fc:	beq.w	103b6 <_svfprintf_r+0x13e6>
   10200:	movs	r5, #0
   10202:	str.w	r9, [sp, #8]
   10206:	str.w	r8, [sp, #28]
   1020a:	mov	r9, r3
   1020c:	mov	r8, r5
   1020e:	b.n	1022a <_svfprintf_r+0x125a>
   10210:	add	r1, sp, #220	; 0xdc
   10212:	mov	r0, fp
   10214:	bl	11cac <_wcrtomb_r>
   10218:	adds	r3, r0, #1
   1021a:	add	r0, r8
   1021c:	beq.w	109b0 <_svfprintf_r+0x19e0>
   10220:	cmp	r0, r9
   10222:	bgt.n	10236 <_svfprintf_r+0x1266>
   10224:	beq.w	10a58 <_svfprintf_r+0x1a88>
   10228:	mov	r8, r0
   1022a:	ldr	r2, [sp, #116]	; 0x74
   1022c:	ldr	r2, [r2, r5]
   1022e:	mov	r3, r6
   10230:	adds	r5, #4
   10232:	cmp	r2, #0
   10234:	bne.n	10210 <_svfprintf_r+0x1240>
   10236:	str.w	r8, [sp, #20]
   1023a:	ldr.w	r9, [sp, #8]
   1023e:	ldr.w	r8, [sp, #28]
   10242:	b.n	103d0 <_svfprintf_r+0x1400>
   10244:	adds	r3, #1
   10246:	ldr	r1, [pc, #520]	; (10450 <_svfprintf_r+0x1480>)
   10248:	str.w	r4, [sl, #4]
   1024c:	add	r2, r4
   1024e:	cmp	r3, #7
   10250:	str.w	r1, [sl]
   10254:	strd	r3, r2, [sp, #148]	; 0x94
   10258:	ble.w	f2fc <_svfprintf_r+0x32c>
   1025c:	b.w	f932 <_svfprintf_r+0x962>
   10260:	vmov	r1, s22
   10264:	add	r2, sp, #144	; 0x90
   10266:	mov	r0, fp
   10268:	bl	11d38 <__ssprint_r>
   1026c:	cmp	r0, #0
   1026e:	bne.w	f89a <_svfprintf_r+0x8ca>
   10272:	ldr	r2, [sp, #152]	; 0x98
   10274:	add.w	sl, sp, #156	; 0x9c
   10278:	b.w	f2ce <_svfprintf_r+0x2fe>
   1027c:	add	r2, sp, #144	; 0x90
   1027e:	mov	r0, fp
   10280:	str	r1, [sp, #20]
   10282:	bl	11d38 <__ssprint_r>
   10286:	cmp	r0, #0
   10288:	bne.w	f89a <_svfprintf_r+0x8ca>
   1028c:	ldrb.w	ip, [r6]
   10290:	ldr	r2, [sp, #152]	; 0x98
   10292:	ldr	r1, [sp, #20]
   10294:	add	r0, sp, #156	; 0x9c
   10296:	b.n	ff94 <_svfprintf_r+0xfc4>
   10298:	cmp	r3, #1
   1029a:	str.w	r8, [sp, #8]
   1029e:	bne.w	f688 <_svfprintf_r+0x6b8>
   102a2:	b.w	f9cc <_svfprintf_r+0x9fc>
   102a6:	ldr	r3, [sp, #32]
   102a8:	ldr	r1, [sp, #16]
   102aa:	ldr.w	r2, [r3], #4
   102ae:	mov	r4, r9
   102b0:	str	r1, [r2, #0]
   102b2:	str	r3, [sp, #32]
   102b4:	b.w	f034 <_svfprintf_r+0x64>
   102b8:	adds	r3, #1
   102ba:	ldr	r1, [pc, #404]	; (10450 <_svfprintf_r+0x1480>)
   102bc:	str.w	r4, [sl, #4]
   102c0:	add	r2, r4
   102c2:	cmp	r3, #7
   102c4:	strd	r3, r2, [sp, #148]	; 0x94
   102c8:	str.w	r1, [sl]
   102cc:	ble.w	f914 <_svfprintf_r+0x944>
   102d0:	b.n	fbca <_svfprintf_r+0xbfa>
   102d2:	ldr	r3, [sp, #64]	; 0x40
   102d4:	ldr	r0, [sp, #72]	; 0x48
   102d6:	add	r2, r3
   102d8:	strd	r0, r3, [sl]
   102dc:	ldr	r3, [sp, #148]	; 0x94
   102de:	str	r2, [sp, #152]	; 0x98
   102e0:	adds	r3, #1
   102e2:	cmp	r3, #7
   102e4:	str	r3, [sp, #148]	; 0x94
   102e6:	bgt.w	1063c <_svfprintf_r+0x166c>
   102ea:	add.w	sl, sl, #8
   102ee:	cmp	r1, #0
   102f0:	bge.w	1019c <_svfprintf_r+0x11cc>
   102f4:	negs	r5, r1
   102f6:	adds	r1, #16
   102f8:	bge.w	1091a <_svfprintf_r+0x194a>
   102fc:	vmov	r1, s22
   10300:	movs	r6, #16
   10302:	b.n	10310 <_svfprintf_r+0x1340>
   10304:	add.w	sl, sl, #8
   10308:	subs	r5, #16
   1030a:	cmp	r5, #16
   1030c:	ble.w	1091a <_svfprintf_r+0x194a>
   10310:	adds	r3, #1
   10312:	ldr	r0, [pc, #316]	; (10450 <_svfprintf_r+0x1480>)
   10314:	adds	r2, #16
   10316:	cmp	r3, #7
   10318:	strd	r0, r6, [sl]
   1031c:	strd	r3, r2, [sp, #148]	; 0x94
   10320:	ble.n	10304 <_svfprintf_r+0x1334>
   10322:	add	r2, sp, #144	; 0x90
   10324:	mov	r0, fp
   10326:	str	r1, [sp, #12]
   10328:	bl	11d38 <__ssprint_r>
   1032c:	cmp	r0, #0
   1032e:	bne.w	f89a <_svfprintf_r+0x8ca>
   10332:	ldrd	r3, r2, [sp, #148]	; 0x94
   10336:	ldr	r1, [sp, #12]
   10338:	add.w	sl, sp, #156	; 0x9c
   1033c:	b.n	10308 <_svfprintf_r+0x1338>
   1033e:	ldr	r3, [sp, #32]
   10340:	ands.w	r1, r8, #512	; 0x200
   10344:	itte	ne
   10346:	movne	r1, r2
   10348:	ldrne.w	r2, [r3], #4
   1034c:	ldreq.w	r2, [r3], #4
   10350:	str	r3, [sp, #32]
   10352:	it	ne
   10354:	uxtbne	r2, r2
   10356:	b.w	f5e4 <_svfprintf_r+0x614>
   1035a:	ldr	r3, [sp, #8]
   1035c:	ands.w	r1, r3, #512	; 0x200
   10360:	ldr	r3, [sp, #32]
   10362:	itte	ne
   10364:	movne	r1, r2
   10366:	ldrne.w	r2, [r3], #4
   1036a:	ldreq.w	r2, [r3], #4
   1036e:	str	r3, [sp, #32]
   10370:	it	ne
   10372:	uxtbne	r2, r2
   10374:	movs	r3, #1
   10376:	b.w	f51a <_svfprintf_r+0x54a>
   1037a:	ldr	r3, [sp, #32]
   1037c:	ands.w	r1, r8, #512	; 0x200
   10380:	itte	ne
   10382:	movne	r1, r2
   10384:	ldrne.w	r2, [r3], #4
   10388:	ldreq.w	r2, [r3], #4
   1038c:	str	r3, [sp, #32]
   1038e:	it	ne
   10390:	uxtbne	r2, r2
   10392:	b.n	fe32 <_svfprintf_r+0xe62>
   10394:	mov	sl, r1
   10396:	adds	r3, #1
   10398:	ldr	r1, [pc, #180]	; (10450 <_svfprintf_r+0x1480>)
   1039a:	str.w	r5, [sl, #4]
   1039e:	add	r2, r5
   103a0:	cmp	r3, #7
   103a2:	strd	r3, r2, [sp, #148]	; 0x94
   103a6:	str.w	r1, [sl]
   103aa:	bgt.w	10620 <_svfprintf_r+0x1650>
   103ae:	add.w	sl, sl, #8
   103b2:	b.w	face <_svfprintf_r+0xafe>
   103b6:	movs	r3, #0
   103b8:	mov	r1, r3
   103ba:	str	r6, [sp, #0]
   103bc:	add	r2, sp, #116	; 0x74
   103be:	mov	r0, fp
   103c0:	bl	11cf8 <_wcsrtombs_r>
   103c4:	mov	r3, r0
   103c6:	adds	r3, #1
   103c8:	str	r0, [sp, #20]
   103ca:	beq.w	109b0 <_svfprintf_r+0x19e0>
   103ce:	str	r4, [sp, #116]	; 0x74
   103d0:	ldr	r3, [sp, #20]
   103d2:	cmp	r3, #0
   103d4:	beq.n	10474 <_svfprintf_r+0x14a4>
   103d6:	cmp	r3, #99	; 0x63
   103d8:	bgt.w	1060c <_svfprintf_r+0x163c>
   103dc:	movs	r3, #0
   103de:	str	r3, [sp, #28]
   103e0:	add	r4, sp, #220	; 0xdc
   103e2:	movs	r2, #8
   103e4:	movs	r1, #0
   103e6:	mov	r0, r6
   103e8:	bl	e074 <memset>
   103ec:	ldr	r5, [sp, #20]
   103ee:	str	r6, [sp, #0]
   103f0:	mov	r3, r5
   103f2:	add	r2, sp, #116	; 0x74
   103f4:	mov	r1, r4
   103f6:	mov	r0, fp
   103f8:	bl	11cf8 <_wcsrtombs_r>
   103fc:	cmp	r5, r0
   103fe:	bne.w	10afa <_svfprintf_r+0x1b2a>
   10402:	ldr	r2, [sp, #20]
   10404:	movs	r3, #0
   10406:	strb	r3, [r4, r2]
   10408:	bic.w	r2, r2, r2, asr #31
   1040c:	strd	r3, r3, [sp, #48]	; 0x30
   10410:	ldrb.w	r1, [sp, #103]	; 0x67
   10414:	str	r3, [sp, #12]
   10416:	str	r2, [sp, #8]
   10418:	str	r3, [sp, #60]	; 0x3c
   1041a:	b.w	f392 <_svfprintf_r+0x3c2>
   1041e:	movs	r1, #45	; 0x2d
   10420:	strb.w	r1, [sp, #103]	; 0x67
   10424:	b.w	f370 <_svfprintf_r+0x3a0>
   10428:	ldr	r3, [sp, #88]	; 0x58
   1042a:	ldr	r1, [sp, #84]	; 0x54
   1042c:	sub.w	fp, fp, r3
   10430:	mov	r2, r3
   10432:	mov	r0, fp
   10434:	bl	e1a4 <strncpy>
   10438:	ldrb.w	r2, [sl, #1]
   1043c:	ldr	r3, [pc, #20]	; (10454 <_svfprintf_r+0x1484>)
   1043e:	cbz	r2, 10444 <_svfprintf_r+0x1474>
   10440:	add.w	sl, sl, #1
   10444:	mov.w	ip, #0
   10448:	b.n	1009c <_svfprintf_r+0x10cc>
   1044a:	nop
   1044c:	.word	0x20000e98
   10450:	.word	0x20001314
   10454:	.word	0xcccccccd
   10458:	vmov	r1, s22
   1045c:	add	r2, sp, #144	; 0x90
   1045e:	mov	r0, fp
   10460:	bl	11d38 <__ssprint_r>
   10464:	cmp	r0, #0
   10466:	bne.w	f89a <_svfprintf_r+0x8ca>
   1046a:	ldr	r1, [sp, #108]	; 0x6c
   1046c:	ldr	r2, [sp, #152]	; 0x98
   1046e:	add.w	sl, sp, #156	; 0x9c
   10472:	b.n	1016e <_svfprintf_r+0x119e>
   10474:	ldr	r3, [sp, #20]
   10476:	ldrb.w	r1, [sp, #103]	; 0x67
   1047a:	str	r3, [sp, #60]	; 0x3c
   1047c:	strd	r3, r3, [sp, #8]
   10480:	strd	r3, r3, [sp, #48]	; 0x30
   10484:	str	r3, [sp, #28]
   10486:	b.w	f392 <_svfprintf_r+0x3c2>
   1048a:	ldr	r1, [sp, #56]	; 0x38
   1048c:	ldr	r0, [sp, #20]
   1048e:	adds	r5, r4, r1
   10490:	subs	r5, r5, r0
   10492:	subs	r4, r1, r3
   10494:	cmp	r5, r4
   10496:	it	ge
   10498:	movge	r5, r4
   1049a:	b.w	fb38 <_svfprintf_r+0xb68>
   1049e:	ldr	r3, [sp, #32]
   104a0:	ldr	r1, [sp, #16]
   104a2:	ldr.w	r2, [r3], #4
   104a6:	str	r3, [sp, #32]
   104a8:	strh	r1, [r2, #0]
   104aa:	mov	r4, r9
   104ac:	b.w	f034 <_svfprintf_r+0x64>
   104b0:	ldrsb.w	r2, [r3], #4
   104b4:	str	r3, [sp, #32]
   104b6:	asrs	r1, r2, #31
   104b8:	mov	r3, r1
   104ba:	b.w	f474 <_svfprintf_r+0x4a4>
   104be:	ldr	r2, [sp, #12]
   104c0:	movs	r1, #2
   104c2:	add	r3, sp, #136	; 0x88
   104c4:	str	r3, [sp, #4]
   104c6:	add	r3, sp, #116	; 0x74
   104c8:	str	r3, [sp, #0]
   104ca:	mov	r0, fp
   104cc:	add	r3, sp, #108	; 0x6c
   104ce:	vmov.f64	d0, d10
   104d2:	str	r2, [sp, #8]
   104d4:	bl	10fc0 <_dtoa_r>
   104d8:	cmp	r5, #71	; 0x47
   104da:	ldr	r2, [sp, #8]
   104dc:	mov	r4, r0
   104de:	beq.w	107a4 <_svfprintf_r+0x17d4>
   104e2:	cmp	r5, #70	; 0x46
   104e4:	add	r0, r2
   104e6:	bne.n	104f4 <_svfprintf_r+0x1524>
   104e8:	ldrb	r3, [r4, #0]
   104ea:	cmp	r3, #48	; 0x30
   104ec:	beq.w	109ce <_svfprintf_r+0x19fe>
   104f0:	ldr	r2, [sp, #108]	; 0x6c
   104f2:	add	r0, r2
   104f4:	vcmp.f64	d10, #0.0
   104f8:	vmrs	APSR_nzcv, fpscr
   104fc:	bne.w	1078c <_svfprintf_r+0x17bc>
   10500:	mov	r3, r0
   10502:	subs	r3, r3, r4
   10504:	str	r3, [sp, #56]	; 0x38
   10506:	cmp	r5, #71	; 0x47
   10508:	beq.w	1072c <_svfprintf_r+0x175c>
   1050c:	cmp	r5, #70	; 0x46
   1050e:	beq.w	1087c <_svfprintf_r+0x18ac>
   10512:	ldr	r3, [sp, #108]	; 0x6c
   10514:	str	r3, [sp, #48]	; 0x30
   10516:	ldr	r3, [sp, #48]	; 0x30
   10518:	cmp	r5, #65	; 0x41
   1051a:	add.w	r3, r3, #4294967295
   1051e:	str	r3, [sp, #108]	; 0x6c
   10520:	beq.w	108ee <_svfprintf_r+0x191e>
   10524:	ldrb.w	r2, [sp, #44]	; 0x2c
   10528:	movs	r1, #0
   1052a:	cmp	r3, #0
   1052c:	it	lt
   1052e:	ldrlt	r3, [sp, #48]	; 0x30
   10530:	strb.w	r2, [sp, #120]	; 0x78
   10534:	itte	lt
   10536:	rsblt	r3, r3, #1
   1053a:	movlt	r2, #45	; 0x2d
   1053c:	movge	r2, #43	; 0x2b
   1053e:	cmp	r3, #9
   10540:	strb.w	r2, [sp, #121]	; 0x79
   10544:	ble.w	108fc <_svfprintf_r+0x192c>
   10548:	add.w	r5, sp, #143	; 0x8f
   1054c:	ldr.w	ip, [pc, #1052]	; 1096c <_svfprintf_r+0x199c>
   10550:	mov	r2, r5
   10552:	mov	r0, r2
   10554:	smull	r2, r1, ip, r3
   10558:	asrs	r2, r3, #31
   1055a:	rsb	r2, r2, r1, asr #2
   1055e:	add.w	r1, r2, r2, lsl #2
   10562:	sub.w	r1, r3, r1, lsl #1
   10566:	adds	r1, #48	; 0x30
   10568:	strb.w	r1, [r0, #-1]
   1056c:	mov	r1, r3
   1056e:	cmp	r1, #99	; 0x63
   10570:	mov	r3, r2
   10572:	add.w	r2, r0, #4294967295
   10576:	bgt.n	10552 <_svfprintf_r+0x1582>
   10578:	adds	r3, #48	; 0x30
   1057a:	uxtb	r1, r3
   1057c:	subs	r3, r0, #2
   1057e:	cmp	r5, r3
   10580:	strb.w	r1, [r2, #-1]
   10584:	bls.w	10a9e <_svfprintf_r+0x1ace>
   10588:	mov	r3, r2
   1058a:	add.w	r2, sp, #122	; 0x7a
   1058e:	b.n	10594 <_svfprintf_r+0x15c4>
   10590:	ldrb.w	r1, [r3], #1
   10594:	strb.w	r1, [r2], #1
   10598:	cmp	r5, r3
   1059a:	bne.n	10590 <_svfprintf_r+0x15c0>
   1059c:	add.w	r3, sp, #145	; 0x91
   105a0:	add.w	r2, sp, #122	; 0x7a
   105a4:	subs	r3, r3, r0
   105a6:	add	r3, r2
   105a8:	add	r2, sp, #120	; 0x78
   105aa:	subs	r3, r3, r2
   105ac:	str	r3, [sp, #80]	; 0x50
   105ae:	ldr	r3, [sp, #56]	; 0x38
   105b0:	ldr	r2, [sp, #80]	; 0x50
   105b2:	cmp	r3, #1
   105b4:	add	r2, r3
   105b6:	str	r2, [sp, #20]
   105b8:	ble.w	109c2 <_svfprintf_r+0x19f2>
   105bc:	ldr	r3, [sp, #20]
   105be:	ldr	r2, [sp, #64]	; 0x40
   105c0:	add	r3, r2
   105c2:	str	r3, [sp, #20]
   105c4:	bic.w	r3, r6, #1024	; 0x400
   105c8:	ldr	r2, [sp, #20]
   105ca:	orr.w	r8, r3, #256	; 0x100
   105ce:	movs	r3, #0
   105d0:	strd	r3, r3, [sp, #48]	; 0x30
   105d4:	bic.w	r2, r2, r2, asr #31
   105d8:	str	r3, [sp, #60]	; 0x3c
   105da:	str	r2, [sp, #8]
   105dc:	ldr	r3, [sp, #36]	; 0x24
   105de:	cmp	r3, #0
   105e0:	bne.w	10746 <_svfprintf_r+0x1776>
   105e4:	ldrb.w	r1, [sp, #103]	; 0x67
   105e8:	str	r3, [sp, #12]
   105ea:	b.w	f392 <_svfprintf_r+0x3c2>
   105ee:	mov	r0, r4
   105f0:	bl	e400 <strlen>
   105f4:	mov	r2, r0
   105f6:	str	r0, [sp, #20]
   105f8:	b.w	f43c <_svfprintf_r+0x46c>
   105fc:	vmov	r1, s22
   10600:	add	r2, sp, #144	; 0x90
   10602:	mov	r0, fp
   10604:	bl	11d38 <__ssprint_r>
   10608:	b.w	f1e6 <_svfprintf_r+0x216>
   1060c:	adds	r1, r3, #1
   1060e:	mov	r0, fp
   10610:	bl	d260 <_malloc_r>
   10614:	mov	r4, r0
   10616:	cmp	r0, #0
   10618:	beq.w	109b0 <_svfprintf_r+0x19e0>
   1061c:	str	r0, [sp, #28]
   1061e:	b.n	103e2 <_svfprintf_r+0x1412>
   10620:	vmov	r1, s22
   10624:	add	r2, sp, #144	; 0x90
   10626:	mov	r0, fp
   10628:	bl	11d38 <__ssprint_r>
   1062c:	cmp	r0, #0
   1062e:	bne.w	f89a <_svfprintf_r+0x8ca>
   10632:	ldr	r2, [sp, #152]	; 0x98
   10634:	add.w	sl, sp, #156	; 0x9c
   10638:	b.w	face <_svfprintf_r+0xafe>
   1063c:	vmov	r1, s22
   10640:	add	r2, sp, #144	; 0x90
   10642:	mov	r0, fp
   10644:	bl	11d38 <__ssprint_r>
   10648:	cmp	r0, #0
   1064a:	bne.w	f89a <_svfprintf_r+0x8ca>
   1064e:	ldrd	r3, r2, [sp, #148]	; 0x94
   10652:	ldr	r1, [sp, #108]	; 0x6c
   10654:	add.w	sl, sp, #156	; 0x9c
   10658:	b.n	102ee <_svfprintf_r+0x131e>
   1065a:	movs	r3, #6
   1065c:	str	r3, [sp, #12]
   1065e:	b.w	fd68 <_svfprintf_r+0xd98>
   10662:	ldr	r3, [sp, #12]
   10664:	movs	r1, #2
   10666:	adds	r2, r3, #1
   10668:	b.n	104c2 <_svfprintf_r+0x14f2>
   1066a:	ldr	r2, [sp, #12]
   1066c:	movs	r1, #3
   1066e:	b.n	104c2 <_svfprintf_r+0x14f2>
   10670:	add	r0, sp, #108	; 0x6c
   10672:	vmov.f64	d0, d10
   10676:	bl	10d68 <frexp>
   1067a:	vmov.f64	d7, #64	; 0x3e000000  0.125
   1067e:	vmul.f64	d0, d0, d7
   10682:	vcmp.f64	d0, #0.0
   10686:	vmrs	APSR_nzcv, fpscr
   1068a:	bne.n	10690 <_svfprintf_r+0x16c0>
   1068c:	movs	r3, #1
   1068e:	str	r3, [sp, #108]	; 0x6c
   10690:	ldr	r0, [pc, #716]	; (10960 <_svfprintf_r+0x1990>)
   10692:	ldr	r3, [sp, #12]
   10694:	vmov.f64	d5, #48	; 0x41800000  16.0
   10698:	subs	r3, #1
   1069a:	mov	r2, r4
   1069c:	b.n	106a8 <_svfprintf_r+0x16d8>
   1069e:	vcmp.f64	d0, #0.0
   106a2:	vmrs	APSR_nzcv, fpscr
   106a6:	beq.n	106d0 <_svfprintf_r+0x1700>
   106a8:	vmul.f64	d0, d0, d5
   106ac:	vcvt.s32.f64	s15, d0
   106b0:	cmp.w	r3, #4294967295
   106b4:	vmov	r1, s15
   106b8:	ldrb	r1, [r0, r1]
   106ba:	vcvt.f64.s32	d6, s15
   106be:	mov	ip, r2
   106c0:	vsub.f64	d0, d0, d6
   106c4:	strb.w	r1, [r2], #1
   106c8:	mov	r1, r3
   106ca:	add.w	r3, r3, #4294967295
   106ce:	bne.n	1069e <_svfprintf_r+0x16ce>
   106d0:	vmov.f64	d6, #96	; 0x3f000000  0.5
   106d4:	vcmpe.f64	d0, d6
   106d8:	vmrs	APSR_nzcv, fpscr
   106dc:	bgt.w	10970 <_svfprintf_r+0x19a0>
   106e0:	vcmp.f64	d0, d6
   106e4:	vmrs	APSR_nzcv, fpscr
   106e8:	bne.n	106f4 <_svfprintf_r+0x1724>
   106ea:	vmov	r3, s15
   106ee:	lsls	r3, r3, #31
   106f0:	bmi.w	10970 <_svfprintf_r+0x19a0>
   106f4:	cmp	r1, #0
   106f6:	blt.n	10706 <_svfprintf_r+0x1736>
   106f8:	adds	r3, r1, #1
   106fa:	add	r3, r2
   106fc:	movs	r1, #48	; 0x30
   106fe:	strb.w	r1, [r2], #1
   10702:	cmp	r3, r2
   10704:	bne.n	106fe <_svfprintf_r+0x172e>
   10706:	subs	r3, r2, r4
   10708:	str	r3, [sp, #56]	; 0x38
   1070a:	b.n	10506 <_svfprintf_r+0x1536>
   1070c:	ldr	r4, [sp, #44]	; 0x2c
   1070e:	ldr	r3, [sp, #56]	; 0x38
   10710:	ldr.w	r9, [sp, #36]	; 0x24
   10714:	ldr.w	r8, [sp, #40]	; 0x28
   10718:	str	r6, [sp, #76]	; 0x4c
   1071a:	adds	r3, r4, r3
   1071c:	cmp	r5, r3
   1071e:	mov	r1, r5
   10720:	it	cs
   10722:	movcs	r1, r3
   10724:	mov	sl, r0
   10726:	str	r1, [sp, #20]
   10728:	b.w	fadc <_svfprintf_r+0xb0c>
   1072c:	ldr	r3, [sp, #108]	; 0x6c
   1072e:	str	r3, [sp, #48]	; 0x30
   10730:	adds	r2, r3, #3
   10732:	blt.n	1073a <_svfprintf_r+0x176a>
   10734:	ldr	r2, [sp, #12]
   10736:	cmp	r3, r2
   10738:	ble.n	10754 <_svfprintf_r+0x1784>
   1073a:	ldr	r3, [sp, #44]	; 0x2c
   1073c:	subs	r3, #2
   1073e:	str	r3, [sp, #44]	; 0x2c
   10740:	bic.w	r5, r3, #32
   10744:	b.n	10516 <_svfprintf_r+0x1546>
   10746:	movs	r1, #45	; 0x2d
   10748:	movs	r3, #0
   1074a:	strb.w	r1, [sp, #103]	; 0x67
   1074e:	str	r3, [sp, #12]
   10750:	b.w	f398 <_svfprintf_r+0x3c8>
   10754:	ldr	r3, [sp, #48]	; 0x30
   10756:	ldr	r2, [sp, #56]	; 0x38
   10758:	cmp	r3, r2
   1075a:	blt.w	108d8 <_svfprintf_r+0x1908>
   1075e:	lsls	r0, r6, #31
   10760:	ldr	r3, [sp, #48]	; 0x30
   10762:	bpl.w	109ca <_svfprintf_r+0x19fa>
   10766:	ldr	r2, [sp, #64]	; 0x40
   10768:	add	r3, r2
   1076a:	str	r3, [sp, #20]
   1076c:	lsls	r1, r6, #21
   1076e:	bpl.n	10778 <_svfprintf_r+0x17a8>
   10770:	ldr	r3, [sp, #48]	; 0x30
   10772:	cmp	r3, #0
   10774:	bgt.w	109e2 <_svfprintf_r+0x1a12>
   10778:	ldr	r3, [sp, #20]
   1077a:	bic.w	r3, r3, r3, asr #31
   1077e:	str	r3, [sp, #8]
   10780:	movs	r3, #103	; 0x67
   10782:	str	r3, [sp, #44]	; 0x2c
   10784:	movs	r3, #0
   10786:	str	r3, [sp, #60]	; 0x3c
   10788:	str	r3, [sp, #52]	; 0x34
   1078a:	b.n	105dc <_svfprintf_r+0x160c>
   1078c:	ldr	r3, [sp, #136]	; 0x88
   1078e:	cmp	r3, r0
   10790:	bcs.w	10502 <_svfprintf_r+0x1532>
   10794:	movs	r1, #48	; 0x30
   10796:	adds	r2, r3, #1
   10798:	str	r2, [sp, #136]	; 0x88
   1079a:	strb	r1, [r3, #0]
   1079c:	ldr	r3, [sp, #136]	; 0x88
   1079e:	cmp	r0, r3
   107a0:	bhi.n	10796 <_svfprintf_r+0x17c6>
   107a2:	b.n	10502 <_svfprintf_r+0x1532>
   107a4:	lsls	r3, r6, #31
   107a6:	bmi.w	108f8 <_svfprintf_r+0x1928>
   107aa:	ldr	r3, [sp, #136]	; 0x88
   107ac:	b.n	10502 <_svfprintf_r+0x1532>
   107ae:	add	r2, sp, #144	; 0x90
   107b0:	mov	r0, fp
   107b2:	str	r1, [sp, #20]
   107b4:	bl	11d38 <__ssprint_r>
   107b8:	cmp	r0, #0
   107ba:	bne.w	f89a <_svfprintf_r+0x8ca>
   107be:	ldrb.w	ip, [r6]
   107c2:	ldr	r2, [sp, #152]	; 0x98
   107c4:	ldr	r1, [sp, #20]
   107c6:	add	r0, sp, #156	; 0x9c
   107c8:	add	r5, ip
   107ca:	b.w	ffa6 <_svfprintf_r+0xfd6>
   107ce:	vmov	r1, s22
   107d2:	add	r2, sp, #144	; 0x90
   107d4:	mov	r0, fp
   107d6:	bl	11d38 <__ssprint_r>
   107da:	cmp	r0, #0
   107dc:	bne.w	f89a <_svfprintf_r+0x8ca>
   107e0:	ldr	r2, [sp, #152]	; 0x98
   107e2:	add.w	sl, sp, #156	; 0x9c
   107e6:	b.w	fac0 <_svfprintf_r+0xaf0>
   107ea:	movs	r3, #120	; 0x78
   107ec:	strb.w	r3, [sp, #105]	; 0x69
   107f0:	movs	r3, #48	; 0x30
   107f2:	strb.w	r3, [sp, #104]	; 0x68
   107f6:	ldr	r3, [sp, #12]
   107f8:	cmp	r3, #99	; 0x63
   107fa:	orr.w	r6, r8, #2
   107fe:	bgt.w	1094e <_svfprintf_r+0x197e>
   10802:	movs	r3, #0
   10804:	str	r3, [sp, #28]
   10806:	add	r4, sp, #220	; 0xdc
   10808:	vmov	r3, s17
   1080c:	cmp	r3, #0
   1080e:	orr.w	r8, r8, #258	; 0x102
   10812:	blt.n	1086c <_svfprintf_r+0x189c>
   10814:	vmov.f64	d10, d8
   10818:	ldr	r3, [sp, #44]	; 0x2c
   1081a:	bic.w	r5, r3, #32
   1081e:	movs	r3, #0
   10820:	str	r3, [sp, #36]	; 0x24
   10822:	ldr	r3, [sp, #44]	; 0x2c
   10824:	cmp	r3, #97	; 0x61
   10826:	bne.w	fd84 <_svfprintf_r+0xdb4>
   1082a:	vmov.f64	d0, d10
   1082e:	add	r0, sp, #108	; 0x6c
   10830:	bl	10d68 <frexp>
   10834:	vmov.f64	d7, #64	; 0x3e000000  0.125
   10838:	vmul.f64	d0, d0, d7
   1083c:	vcmp.f64	d0, #0.0
   10840:	vmrs	APSR_nzcv, fpscr
   10844:	bne.n	1084a <_svfprintf_r+0x187a>
   10846:	movs	r3, #1
   10848:	str	r3, [sp, #108]	; 0x6c
   1084a:	ldr	r0, [pc, #280]	; (10964 <_svfprintf_r+0x1994>)
   1084c:	b.n	10692 <_svfprintf_r+0x16c2>
   1084e:	vmov	r1, s22
   10852:	add	r2, sp, #144	; 0x90
   10854:	mov	r0, fp
   10856:	bl	11d38 <__ssprint_r>
   1085a:	cmp	r0, #0
   1085c:	bne.w	f89a <_svfprintf_r+0x8ca>
   10860:	ldr	r3, [sp, #108]	; 0x6c
   10862:	ldr	r2, [sp, #152]	; 0x98
   10864:	add.w	sl, sp, #156	; 0x9c
   10868:	b.w	fb08 <_svfprintf_r+0xb38>
   1086c:	ldr	r3, [sp, #44]	; 0x2c
   1086e:	bic.w	r5, r3, #32
   10872:	movs	r3, #45	; 0x2d
   10874:	str	r3, [sp, #36]	; 0x24
   10876:	vneg.f64	d10, d8
   1087a:	b.n	10822 <_svfprintf_r+0x1852>
   1087c:	ldr	r2, [sp, #108]	; 0x6c
   1087e:	str	r2, [sp, #48]	; 0x30
   10880:	cmp	r2, #0
   10882:	and.w	r3, r6, #1
   10886:	ble.w	10aa4 <_svfprintf_r+0x1ad4>
   1088a:	ldr	r1, [sp, #12]
   1088c:	orrs	r3, r1
   1088e:	bne.w	10a30 <_svfprintf_r+0x1a60>
   10892:	ldr	r3, [sp, #48]	; 0x30
   10894:	str	r3, [sp, #20]
   10896:	movs	r3, #102	; 0x66
   10898:	str	r3, [sp, #44]	; 0x2c
   1089a:	lsls	r2, r6, #21
   1089c:	bmi.w	109e6 <_svfprintf_r+0x1a16>
   108a0:	ldr	r3, [sp, #20]
   108a2:	bic.w	r3, r3, r3, asr #31
   108a6:	str	r3, [sp, #8]
   108a8:	b.n	10784 <_svfprintf_r+0x17b4>
   108aa:	vmov	r1, s22
   108ae:	add	r2, sp, #144	; 0x90
   108b0:	mov	r0, fp
   108b2:	bl	11d38 <__ssprint_r>
   108b6:	cmp	r0, #0
   108b8:	bne.w	f89a <_svfprintf_r+0x8ca>
   108bc:	ldr	r4, [sp, #108]	; 0x6c
   108be:	ldr	r3, [sp, #56]	; 0x38
   108c0:	ldr	r2, [sp, #152]	; 0x98
   108c2:	subs	r4, r3, r4
   108c4:	add.w	sl, sp, #156	; 0x9c
   108c8:	b.w	fb38 <_svfprintf_r+0xb68>
   108cc:	movs	r3, #88	; 0x58
   108ce:	b.n	107ec <_svfprintf_r+0x181c>
   108d0:	movs	r2, #0
   108d2:	str	r2, [sp, #12]
   108d4:	b.w	f08c <_svfprintf_r+0xbc>
   108d8:	ldr	r3, [sp, #56]	; 0x38
   108da:	ldr	r2, [sp, #64]	; 0x40
   108dc:	adds	r2, r3, r2
   108de:	ldr	r3, [sp, #48]	; 0x30
   108e0:	str	r2, [sp, #20]
   108e2:	cmp	r3, #0
   108e4:	ble.w	10a3e <_svfprintf_r+0x1a6e>
   108e8:	movs	r3, #103	; 0x67
   108ea:	str	r3, [sp, #44]	; 0x2c
   108ec:	b.n	1089a <_svfprintf_r+0x18ca>
   108ee:	ldr	r2, [sp, #44]	; 0x2c
   108f0:	adds	r2, #15
   108f2:	uxtb	r2, r2
   108f4:	movs	r1, #1
   108f6:	b.n	1052a <_svfprintf_r+0x155a>
   108f8:	adds	r0, r4, r2
   108fa:	b.n	104f4 <_svfprintf_r+0x1524>
   108fc:	cmp	r1, #0
   108fe:	bne.w	10a52 <_svfprintf_r+0x1a82>
   10902:	movs	r2, #48	; 0x30
   10904:	strb.w	r2, [sp, #122]	; 0x7a
   10908:	add.w	r2, sp, #123	; 0x7b
   1090c:	adds	r3, #48	; 0x30
   1090e:	strb.w	r3, [r2], #1
   10912:	add	r3, sp, #120	; 0x78
   10914:	subs	r3, r2, r3
   10916:	str	r3, [sp, #80]	; 0x50
   10918:	b.n	105ae <_svfprintf_r+0x15de>
   1091a:	adds	r3, #1
   1091c:	ldr	r1, [pc, #72]	; (10968 <_svfprintf_r+0x1998>)
   1091e:	str.w	r5, [sl, #4]
   10922:	add	r2, r5
   10924:	cmp	r3, #7
   10926:	strd	r3, r2, [sp, #148]	; 0x94
   1092a:	str.w	r1, [sl]
   1092e:	ble.w	10198 <_svfprintf_r+0x11c8>
   10932:	vmov	r1, s22
   10936:	add	r2, sp, #144	; 0x90
   10938:	mov	r0, fp
   1093a:	bl	11d38 <__ssprint_r>
   1093e:	cmp	r0, #0
   10940:	bne.w	f89a <_svfprintf_r+0x8ca>
   10944:	ldrd	r3, r2, [sp, #148]	; 0x94
   10948:	add.w	sl, sp, #156	; 0x9c
   1094c:	b.n	1019c <_svfprintf_r+0x11cc>
   1094e:	adds	r1, r3, #1
   10950:	mov	r0, fp
   10952:	bl	d260 <_malloc_r>
   10956:	mov	r4, r0
   10958:	cbz	r0, 109b0 <_svfprintf_r+0x19e0>
   1095a:	str	r0, [sp, #28]
   1095c:	b.n	10808 <_svfprintf_r+0x1838>
   1095e:	nop
   10960:	.word	0x20000e7c
   10964:	.word	0x20000e68
   10968:	.word	0x20001314
   1096c:	.word	0x66666667
   10970:	str.w	ip, [sp, #136]	; 0x88
   10974:	ldrb.w	r1, [r2, #-1]
   10978:	ldrb.w	ip, [r0, #15]
   1097c:	cmp	r1, ip
   1097e:	mov	r3, r2
   10980:	bne.n	10998 <_svfprintf_r+0x19c8>
   10982:	mov.w	lr, #48	; 0x30
   10986:	strb.w	lr, [r3, #-1]
   1098a:	ldr	r3, [sp, #136]	; 0x88
   1098c:	subs	r1, r3, #1
   1098e:	str	r1, [sp, #136]	; 0x88
   10990:	ldrb.w	r1, [r3, #-1]
   10994:	cmp	ip, r1
   10996:	beq.n	10986 <_svfprintf_r+0x19b6>
   10998:	cmp	r1, #57	; 0x39
   1099a:	itet	ne
   1099c:	addne	r1, #1
   1099e:	ldrbeq	r1, [r0, #10]
   109a0:	uxtbne	r1, r1
   109a2:	strb.w	r1, [r3, #-1]
   109a6:	b.n	10706 <_svfprintf_r+0x1736>
   109a8:	movs	r3, #0
   109aa:	mov	r8, r2
   109ac:	str	r3, [sp, #28]
   109ae:	b.n	10872 <_svfprintf_r+0x18a2>
   109b0:	vmov	r2, s22
   109b4:	ldrsh.w	r3, [r2, #12]
   109b8:	orr.w	r3, r3, #64	; 0x40
   109bc:	strh	r3, [r2, #12]
   109be:	b.w	f1ee <_svfprintf_r+0x21e>
   109c2:	lsls	r5, r6, #31
   109c4:	bpl.w	105c4 <_svfprintf_r+0x15f4>
   109c8:	b.n	105bc <_svfprintf_r+0x15ec>
   109ca:	str	r3, [sp, #20]
   109cc:	b.n	1076c <_svfprintf_r+0x179c>
   109ce:	vcmp.f64	d10, #0.0
   109d2:	vmrs	APSR_nzcv, fpscr
   109d6:	beq.w	104f0 <_svfprintf_r+0x1520>
   109da:	rsb	r2, r2, #1
   109de:	str	r2, [sp, #108]	; 0x6c
   109e0:	b.n	104f2 <_svfprintf_r+0x1522>
   109e2:	movs	r3, #103	; 0x67
   109e4:	str	r3, [sp, #44]	; 0x2c
   109e6:	ldr	r1, [sp, #76]	; 0x4c
   109e8:	ldrb	r3, [r1, #0]
   109ea:	cmp	r3, #255	; 0xff
   109ec:	beq.n	10ae2 <_svfprintf_r+0x1b12>
   109ee:	movs	r5, #0
   109f0:	ldr	r2, [sp, #48]	; 0x30
   109f2:	mov	r0, r5
   109f4:	b.n	109fe <_svfprintf_r+0x1a2e>
   109f6:	adds	r0, #1
   109f8:	adds	r1, #1
   109fa:	cmp	r3, #255	; 0xff
   109fc:	beq.n	10a10 <_svfprintf_r+0x1a40>
   109fe:	cmp	r3, r2
   10a00:	bge.n	10a10 <_svfprintf_r+0x1a40>
   10a02:	subs	r2, r2, r3
   10a04:	ldrb	r3, [r1, #1]
   10a06:	cmp	r3, #0
   10a08:	bne.n	109f6 <_svfprintf_r+0x1a26>
   10a0a:	ldrb	r3, [r1, #0]
   10a0c:	adds	r5, #1
   10a0e:	b.n	109fa <_svfprintf_r+0x1a2a>
   10a10:	str	r2, [sp, #48]	; 0x30
   10a12:	str	r1, [sp, #76]	; 0x4c
   10a14:	str	r0, [sp, #52]	; 0x34
   10a16:	str	r5, [sp, #60]	; 0x3c
   10a18:	ldr	r2, [sp, #60]	; 0x3c
   10a1a:	ldr	r3, [sp, #52]	; 0x34
   10a1c:	ldr	r1, [sp, #88]	; 0x58
   10a1e:	add	r3, r2
   10a20:	ldr	r2, [sp, #20]
   10a22:	mla	r3, r1, r3, r2
   10a26:	str	r3, [sp, #20]
   10a28:	bic.w	r3, r3, r3, asr #31
   10a2c:	str	r3, [sp, #8]
   10a2e:	b.n	105dc <_svfprintf_r+0x160c>
   10a30:	ldr	r3, [sp, #64]	; 0x40
   10a32:	adds	r3, r2, r3
   10a34:	add	r1, r3
   10a36:	movs	r3, #102	; 0x66
   10a38:	str	r1, [sp, #20]
   10a3a:	str	r3, [sp, #44]	; 0x2c
   10a3c:	b.n	1089a <_svfprintf_r+0x18ca>
   10a3e:	rsb	r3, r3, #1
   10a42:	add	r2, r3
   10a44:	bic.w	r3, r2, r2, asr #31
   10a48:	str	r3, [sp, #8]
   10a4a:	movs	r3, #103	; 0x67
   10a4c:	str	r2, [sp, #20]
   10a4e:	str	r3, [sp, #44]	; 0x2c
   10a50:	b.n	10784 <_svfprintf_r+0x17b4>
   10a52:	add.w	r2, sp, #122	; 0x7a
   10a56:	b.n	1090c <_svfprintf_r+0x193c>
   10a58:	ldr	r3, [sp, #12]
   10a5a:	ldr.w	r9, [sp, #8]
   10a5e:	ldr.w	r8, [sp, #28]
   10a62:	str	r3, [sp, #20]
   10a64:	b.n	103d0 <_svfprintf_r+0x1400>
   10a66:	vmov	r3, s17
   10a6a:	cmp	r3, #0
   10a6c:	ite	lt
   10a6e:	movlt	r1, #45	; 0x2d
   10a70:	ldrbge.w	r1, [sp, #103]	; 0x67
   10a74:	ldr	r4, [pc, #148]	; (10b0c <_svfprintf_r+0x1b3c>)
   10a76:	ldr	r3, [pc, #152]	; (10b10 <_svfprintf_r+0x1b40>)
   10a78:	it	lt
   10a7a:	strblt.w	r1, [sp, #103]	; 0x67
   10a7e:	bic.w	r8, r8, #128	; 0x80
   10a82:	b.w	f378 <_svfprintf_r+0x3a8>
   10a86:	ldr	r3, [sp, #12]
   10a88:	str	r3, [sp, #8]
   10a8a:	str	r3, [sp, #20]
   10a8c:	movs	r3, #115	; 0x73
   10a8e:	ldrb.w	r1, [sp, #103]	; 0x67
   10a92:	str	r0, [sp, #12]
   10a94:	str	r0, [sp, #60]	; 0x3c
   10a96:	str	r0, [sp, #52]	; 0x34
   10a98:	str	r3, [sp, #44]	; 0x2c
   10a9a:	b.w	f392 <_svfprintf_r+0x3c2>
   10a9e:	movs	r3, #2
   10aa0:	str	r3, [sp, #80]	; 0x50
   10aa2:	b.n	105ae <_svfprintf_r+0x15de>
   10aa4:	ldr	r2, [sp, #12]
   10aa6:	orrs	r3, r2
   10aa8:	bne.n	10ab6 <_svfprintf_r+0x1ae6>
   10aaa:	movs	r3, #1
   10aac:	movs	r2, #102	; 0x66
   10aae:	str	r3, [sp, #8]
   10ab0:	str	r2, [sp, #44]	; 0x2c
   10ab2:	str	r3, [sp, #20]
   10ab4:	b.n	10784 <_svfprintf_r+0x17b4>
   10ab6:	ldr	r3, [sp, #64]	; 0x40
   10ab8:	adds	r3, #1
   10aba:	add	r2, r3
   10abc:	bic.w	r3, r2, r2, asr #31
   10ac0:	str	r3, [sp, #8]
   10ac2:	movs	r3, #102	; 0x66
   10ac4:	str	r2, [sp, #20]
   10ac6:	str	r3, [sp, #44]	; 0x2c
   10ac8:	b.n	10784 <_svfprintf_r+0x17b4>
   10aca:	ldr	r2, [sp, #32]
   10acc:	ldrb.w	r3, [r9, #1]
   10ad0:	mov	r9, r1
   10ad2:	ldr.w	r1, [r2], #4
   10ad6:	str	r2, [sp, #32]
   10ad8:	orr.w	r1, r1, r1, asr #31
   10adc:	str	r1, [sp, #12]
   10ade:	b.w	f088 <_svfprintf_r+0xb8>
   10ae2:	movs	r3, #0
   10ae4:	str	r3, [sp, #60]	; 0x3c
   10ae6:	str	r3, [sp, #52]	; 0x34
   10ae8:	b.n	10a18 <_svfprintf_r+0x1a48>
   10aea:	movs	r3, #12
   10aec:	str.w	r3, [fp]
   10af0:	mov.w	r3, #4294967295
   10af4:	str	r3, [sp, #16]
   10af6:	b.w	f1fc <_svfprintf_r+0x22c>
   10afa:	vmov	r2, s22
   10afe:	ldrh	r3, [r2, #12]
   10b00:	orr.w	r3, r3, #64	; 0x40
   10b04:	strh	r3, [r2, #12]
   10b06:	b.w	f89a <_svfprintf_r+0x8ca>
   10b0a:	nop
   10b0c:	.word	0x20000e60
   10b10:	.word	0x20000e64

00010b14 <_fclose_r>:
   10b14:	push	{r4, r5, r6, lr}
   10b16:	cmp	r1, #0
   10b18:	beq.n	10bb2 <_fclose_r+0x9e>
   10b1a:	mov	r6, r0
   10b1c:	mov	r4, r1
   10b1e:	cbz	r0, 10b26 <_fclose_r+0x12>
   10b20:	ldr	r3, [r0, #52]	; 0x34
   10b22:	cmp	r3, #0
   10b24:	beq.n	10bb8 <_fclose_r+0xa4>
   10b26:	ldr	r3, [r4, #100]	; 0x64
   10b28:	lsls	r0, r3, #31
   10b2a:	bpl.n	10b96 <_fclose_r+0x82>
   10b2c:	ldrsh.w	r3, [r4, #12]
   10b30:	cmp	r3, #0
   10b32:	beq.n	10bb2 <_fclose_r+0x9e>
   10b34:	mov	r1, r4
   10b36:	mov	r0, r6
   10b38:	bl	10bdc <__sflush_r>
   10b3c:	ldr	r3, [r4, #44]	; 0x2c
   10b3e:	mov	r5, r0
   10b40:	cbz	r3, 10b50 <_fclose_r+0x3c>
   10b42:	ldr	r1, [r4, #28]
   10b44:	mov	r0, r6
   10b46:	blx	r3
   10b48:	cmp	r0, #0
   10b4a:	it	lt
   10b4c:	movlt.w	r5, #4294967295
   10b50:	ldrh	r3, [r4, #12]
   10b52:	lsls	r2, r3, #24
   10b54:	bmi.n	10bd0 <_fclose_r+0xbc>
   10b56:	ldr	r1, [r4, #48]	; 0x30
   10b58:	cbz	r1, 10b6c <_fclose_r+0x58>
   10b5a:	add.w	r3, r4, #64	; 0x40
   10b5e:	cmp	r1, r3
   10b60:	beq.n	10b68 <_fclose_r+0x54>
   10b62:	mov	r0, r6
   10b64:	bl	e604 <_free_r>
   10b68:	movs	r3, #0
   10b6a:	str	r3, [r4, #48]	; 0x30
   10b6c:	ldr	r1, [r4, #68]	; 0x44
   10b6e:	cbz	r1, 10b7a <_fclose_r+0x66>
   10b70:	mov	r0, r6
   10b72:	bl	e604 <_free_r>
   10b76:	movs	r3, #0
   10b78:	str	r3, [r4, #68]	; 0x44
   10b7a:	bl	dd24 <__sfp_lock_acquire>
   10b7e:	ldr	r3, [r4, #100]	; 0x64
   10b80:	movs	r2, #0
   10b82:	lsls	r3, r3, #31
   10b84:	strh	r2, [r4, #12]
   10b86:	bpl.n	10bc8 <_fclose_r+0xb4>
   10b88:	ldr	r0, [r4, #88]	; 0x58
   10b8a:	bl	e338 <__retarget_lock_close_recursive>
   10b8e:	bl	dd30 <__sfp_lock_release>
   10b92:	mov	r0, r5
   10b94:	pop	{r4, r5, r6, pc}
   10b96:	ldrh	r3, [r4, #12]
   10b98:	lsls	r1, r3, #22
   10b9a:	bmi.n	10b34 <_fclose_r+0x20>
   10b9c:	ldr	r0, [r4, #88]	; 0x58
   10b9e:	bl	e33c <__retarget_lock_acquire_recursive>
   10ba2:	ldrsh.w	r3, [r4, #12]
   10ba6:	cmp	r3, #0
   10ba8:	bne.n	10b34 <_fclose_r+0x20>
   10baa:	ldr	r5, [r4, #100]	; 0x64
   10bac:	ands.w	r5, r5, #1
   10bb0:	beq.n	10bbe <_fclose_r+0xaa>
   10bb2:	movs	r5, #0
   10bb4:	mov	r0, r5
   10bb6:	pop	{r4, r5, r6, pc}
   10bb8:	bl	dce8 <__sinit>
   10bbc:	b.n	10b26 <_fclose_r+0x12>
   10bbe:	ldr	r0, [r4, #88]	; 0x58
   10bc0:	bl	e340 <__retarget_lock_release_recursive>
   10bc4:	mov	r0, r5
   10bc6:	pop	{r4, r5, r6, pc}
   10bc8:	ldr	r0, [r4, #88]	; 0x58
   10bca:	bl	e340 <__retarget_lock_release_recursive>
   10bce:	b.n	10b88 <_fclose_r+0x74>
   10bd0:	ldr	r1, [r4, #16]
   10bd2:	mov	r0, r6
   10bd4:	bl	e604 <_free_r>
   10bd8:	b.n	10b56 <_fclose_r+0x42>
   10bda:	nop

00010bdc <__sflush_r>:
   10bdc:	ldrsh.w	r2, [r1, #12]
   10be0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10be4:	mov	r4, r1
   10be6:	lsls	r1, r2, #28
   10be8:	mov	r8, r0
   10bea:	bmi.n	10c7c <__sflush_r+0xa0>
   10bec:	ldr	r3, [r4, #4]
   10bee:	orr.w	r2, r2, #2048	; 0x800
   10bf2:	cmp	r3, #0
   10bf4:	strh	r2, [r4, #12]
   10bf6:	ble.n	10cb6 <__sflush_r+0xda>
   10bf8:	ldr	r5, [r4, #40]	; 0x28
   10bfa:	cmp	r5, #0
   10bfc:	beq.n	10cb0 <__sflush_r+0xd4>
   10bfe:	movs	r3, #0
   10c00:	ldr.w	r6, [r8]
   10c04:	str.w	r3, [r8]
   10c08:	uxth	r3, r2
   10c0a:	ands.w	r2, r2, #4096	; 0x1000
   10c0e:	bne.n	10cbe <__sflush_r+0xe2>
   10c10:	movs	r3, #1
   10c12:	ldr	r1, [r4, #28]
   10c14:	mov	r0, r8
   10c16:	blx	r5
   10c18:	adds	r3, r0, #1
   10c1a:	beq.n	10cec <__sflush_r+0x110>
   10c1c:	ldrh	r3, [r4, #12]
   10c1e:	ldr	r5, [r4, #40]	; 0x28
   10c20:	lsls	r7, r3, #29
   10c22:	bpl.n	10c30 <__sflush_r+0x54>
   10c24:	ldr	r3, [r4, #4]
   10c26:	subs	r0, r0, r3
   10c28:	ldr	r3, [r4, #48]	; 0x30
   10c2a:	cbz	r3, 10c30 <__sflush_r+0x54>
   10c2c:	ldr	r3, [r4, #60]	; 0x3c
   10c2e:	subs	r0, r0, r3
   10c30:	ldr	r1, [r4, #28]
   10c32:	mov	r2, r0
   10c34:	movs	r3, #0
   10c36:	mov	r0, r8
   10c38:	blx	r5
   10c3a:	adds	r1, r0, #1
   10c3c:	bne.n	10cc2 <__sflush_r+0xe6>
   10c3e:	ldr.w	r3, [r8]
   10c42:	cmp	r3, #0
   10c44:	beq.n	10cc2 <__sflush_r+0xe6>
   10c46:	cmp	r3, #29
   10c48:	beq.n	10c4e <__sflush_r+0x72>
   10c4a:	cmp	r3, #22
   10c4c:	bne.n	10cfc <__sflush_r+0x120>
   10c4e:	ldrh	r3, [r4, #12]
   10c50:	ldr	r2, [r4, #16]
   10c52:	str	r2, [r4, #0]
   10c54:	bic.w	r3, r3, #2048	; 0x800
   10c58:	movs	r1, #0
   10c5a:	str	r1, [r4, #4]
   10c5c:	strh	r3, [r4, #12]
   10c5e:	ldr	r1, [r4, #48]	; 0x30
   10c60:	str.w	r6, [r8]
   10c64:	cbz	r1, 10cb0 <__sflush_r+0xd4>
   10c66:	add.w	r3, r4, #64	; 0x40
   10c6a:	cmp	r1, r3
   10c6c:	beq.n	10c74 <__sflush_r+0x98>
   10c6e:	mov	r0, r8
   10c70:	bl	e604 <_free_r>
   10c74:	movs	r0, #0
   10c76:	str	r0, [r4, #48]	; 0x30
   10c78:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10c7c:	ldr	r6, [r4, #16]
   10c7e:	cbz	r6, 10cb0 <__sflush_r+0xd4>
   10c80:	uxth	r3, r2
   10c82:	ldr	r5, [r4, #0]
   10c84:	str	r6, [r4, #0]
   10c86:	lsls	r2, r3, #30
   10c88:	ite	eq
   10c8a:	ldreq	r3, [r4, #20]
   10c8c:	movne	r3, #0
   10c8e:	subs	r5, r5, r6
   10c90:	str	r3, [r4, #8]
   10c92:	b.n	10cac <__sflush_r+0xd0>
   10c94:	mov	r3, r5
   10c96:	mov	r2, r6
   10c98:	ldr	r1, [r4, #28]
   10c9a:	ldr	r7, [r4, #36]	; 0x24
   10c9c:	mov	r0, r8
   10c9e:	blx	r7
   10ca0:	subs.w	ip, r0, #0
   10ca4:	sub.w	r5, r5, ip
   10ca8:	add	r6, ip
   10caa:	ble.n	10cdc <__sflush_r+0x100>
   10cac:	cmp	r5, #0
   10cae:	bgt.n	10c94 <__sflush_r+0xb8>
   10cb0:	movs	r0, #0
   10cb2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10cb6:	ldr	r3, [r4, #60]	; 0x3c
   10cb8:	cmp	r3, #0
   10cba:	bgt.n	10bf8 <__sflush_r+0x1c>
   10cbc:	b.n	10cb0 <__sflush_r+0xd4>
   10cbe:	ldr	r0, [r4, #80]	; 0x50
   10cc0:	b.n	10c20 <__sflush_r+0x44>
   10cc2:	ldrsh.w	r3, [r4, #12]
   10cc6:	ldr	r2, [r4, #16]
   10cc8:	str	r2, [r4, #0]
   10cca:	bic.w	r3, r3, #2048	; 0x800
   10cce:	strh	r3, [r4, #12]
   10cd0:	movs	r2, #0
   10cd2:	lsls	r3, r3, #19
   10cd4:	str	r2, [r4, #4]
   10cd6:	bpl.n	10c5e <__sflush_r+0x82>
   10cd8:	str	r0, [r4, #80]	; 0x50
   10cda:	b.n	10c5e <__sflush_r+0x82>
   10cdc:	ldrh	r3, [r4, #12]
   10cde:	orr.w	r3, r3, #64	; 0x40
   10ce2:	mov.w	r0, #4294967295
   10ce6:	strh	r3, [r4, #12]
   10ce8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10cec:	ldr.w	r3, [r8]
   10cf0:	cmp	r3, #0
   10cf2:	beq.n	10c1c <__sflush_r+0x40>
   10cf4:	cmp	r3, #29
   10cf6:	beq.n	10d06 <__sflush_r+0x12a>
   10cf8:	cmp	r3, #22
   10cfa:	beq.n	10d06 <__sflush_r+0x12a>
   10cfc:	ldrh	r3, [r4, #12]
   10cfe:	orr.w	r3, r3, #64	; 0x40
   10d02:	strh	r3, [r4, #12]
   10d04:	b.n	10cb2 <__sflush_r+0xd6>
   10d06:	str.w	r6, [r8]
   10d0a:	b.n	10cb0 <__sflush_r+0xd4>

00010d0c <_fflush_r>:
   10d0c:	push	{r3, r4, r5, lr}
   10d0e:	mov	r4, r1
   10d10:	mov	r5, r0
   10d12:	cbz	r0, 10d18 <_fflush_r+0xc>
   10d14:	ldr	r3, [r0, #52]	; 0x34
   10d16:	cbz	r3, 10d5a <_fflush_r+0x4e>
   10d18:	ldrsh.w	r0, [r4, #12]
   10d1c:	cbz	r0, 10d42 <_fflush_r+0x36>
   10d1e:	ldr	r3, [r4, #100]	; 0x64
   10d20:	lsls	r3, r3, #31
   10d22:	bmi.n	10d28 <_fflush_r+0x1c>
   10d24:	lsls	r1, r0, #22
   10d26:	bpl.n	10d48 <_fflush_r+0x3c>
   10d28:	mov	r0, r5
   10d2a:	mov	r1, r4
   10d2c:	bl	10bdc <__sflush_r>
   10d30:	ldr	r3, [r4, #100]	; 0x64
   10d32:	lsls	r2, r3, #31
   10d34:	mov	r5, r0
   10d36:	bmi.n	10d3e <_fflush_r+0x32>
   10d38:	ldrh	r3, [r4, #12]
   10d3a:	lsls	r3, r3, #22
   10d3c:	bpl.n	10d50 <_fflush_r+0x44>
   10d3e:	mov	r0, r5
   10d40:	pop	{r3, r4, r5, pc}
   10d42:	mov	r5, r0
   10d44:	mov	r0, r5
   10d46:	pop	{r3, r4, r5, pc}
   10d48:	ldr	r0, [r4, #88]	; 0x58
   10d4a:	bl	e33c <__retarget_lock_acquire_recursive>
   10d4e:	b.n	10d28 <_fflush_r+0x1c>
   10d50:	ldr	r0, [r4, #88]	; 0x58
   10d52:	bl	e340 <__retarget_lock_release_recursive>
   10d56:	mov	r0, r5
   10d58:	pop	{r3, r4, r5, pc}
   10d5a:	bl	dce8 <__sinit>
   10d5e:	b.n	10d18 <_fflush_r+0xc>

00010d60 <_localeconv_r>:
   10d60:	ldr	r0, [pc, #0]	; (10d64 <_localeconv_r+0x4>)
   10d62:	bx	lr
   10d64:	.word	0x2000158c

00010d68 <frexp>:
   10d68:	push	{r4, r5}
   10d6a:	sub	sp, #8
   10d6c:	vstr	d0, [sp]
   10d70:	ldr	r2, [sp, #4]
   10d72:	ldr	r4, [pc, #100]	; (10dd8 <frexp+0x70>)
   10d74:	bic.w	r3, r2, #2147483648	; 0x80000000
   10d78:	movs	r1, #0
   10d7a:	cmp	r3, r4
   10d7c:	str	r1, [r0, #0]
   10d7e:	bgt.n	10dc4 <frexp+0x5c>
   10d80:	ldr	r4, [sp, #0]
   10d82:	orrs	r4, r3
   10d84:	beq.n	10dc4 <frexp+0x5c>
   10d86:	ldr	r4, [pc, #84]	; (10ddc <frexp+0x74>)
   10d88:	ands	r4, r2
   10d8a:	cbnz	r4, 10da2 <frexp+0x3a>
   10d8c:	vldr	d7, [pc, #64]	; 10dd0 <frexp+0x68>
   10d90:	vmul.f64	d7, d0, d7
   10d94:	vstr	d7, [sp]
   10d98:	ldr	r2, [sp, #4]
   10d9a:	mvn.w	r1, #53	; 0x35
   10d9e:	bic.w	r3, r2, #2147483648	; 0x80000000
   10da2:	bic.w	r2, r2, #2139095040	; 0x7f800000
   10da6:	ldrd	r4, r5, [sp]
   10daa:	bic.w	r2, r2, #7340032	; 0x700000
   10dae:	orr.w	r5, r2, #1069547520	; 0x3fc00000
   10db2:	asrs	r3, r3, #20
   10db4:	orr.w	r5, r5, #2097152	; 0x200000
   10db8:	subw	r3, r3, #1022	; 0x3fe
   10dbc:	strd	r4, r5, [sp]
   10dc0:	add	r3, r1
   10dc2:	str	r3, [r0, #0]
   10dc4:	vldr	d0, [sp]
   10dc8:	add	sp, #8
   10dca:	pop	{r4, r5}
   10dcc:	bx	lr
   10dce:	nop
   10dd0:	.word	0x00000000
   10dd4:	.word	0x43500000
   10dd8:	.word	0x7fefffff
   10ddc:	.word	0x7ff00000

00010de0 <__assert_func>:
   10de0:	push	{lr}
   10de2:	ldr	r4, [pc, #44]	; (10e10 <__assert_func+0x30>)
   10de4:	ldr	r5, [r4, #0]
   10de6:	mov	r4, r2
   10de8:	ldr	r6, [r5, #12]
   10dea:	mov	r2, r3
   10dec:	sub	sp, #20
   10dee:	mov	r3, r0
   10df0:	mov	r5, r1
   10df2:	cbz	r4, 10e08 <__assert_func+0x28>
   10df4:	ldr	r1, [pc, #28]	; (10e14 <__assert_func+0x34>)
   10df6:	str	r5, [sp, #0]
   10df8:	strd	r1, r4, [sp, #4]
   10dfc:	mov	r0, r6
   10dfe:	ldr	r1, [pc, #24]	; (10e18 <__assert_func+0x38>)
   10e00:	bl	11d10 <fiprintf>
   10e04:	bl	baac <abort>
   10e08:	ldr	r1, [pc, #16]	; (10e1c <__assert_func+0x3c>)
   10e0a:	mov	r4, r1
   10e0c:	b.n	10df6 <__assert_func+0x16>
   10e0e:	nop
   10e10:	.word	0x20001a24
   10e14:	.word	0x20000c38
   10e18:	.word	0x20000c48
   10e1c:	.word	0x20000790

00010e20 <_calloc_r>:
   10e20:	push	{r3, r4, r5, lr}
   10e22:	umull	r1, r4, r1, r2
   10e26:	cbnz	r4, 10e8c <_calloc_r+0x6c>
   10e28:	bl	d260 <_malloc_r>
   10e2c:	mov	r5, r0
   10e2e:	cbz	r0, 10e6a <_calloc_r+0x4a>
   10e30:	ldr.w	r2, [r0, #-4]
   10e34:	bic.w	r2, r2, #3
   10e38:	subs	r2, #4
   10e3a:	cmp	r2, #36	; 0x24
   10e3c:	bhi.n	10e6e <_calloc_r+0x4e>
   10e3e:	cmp	r2, #19
   10e40:	bls.n	10e78 <_calloc_r+0x58>
   10e42:	cmp	r2, #27
   10e44:	strd	r4, r4, [r0]
   10e48:	bls.n	10e86 <_calloc_r+0x66>
   10e4a:	cmp	r2, #36	; 0x24
   10e4c:	ite	ne
   10e4e:	addne.w	r2, r0, #16
   10e52:	addeq.w	r2, r0, #24
   10e56:	mov.w	r3, #0
   10e5a:	strd	r4, r4, [r0, #8]
   10e5e:	itt	eq
   10e60:	streq	r4, [r0, #16]
   10e62:	streq	r4, [r0, #20]
   10e64:	strd	r3, r3, [r2]
   10e68:	str	r3, [r2, #8]
   10e6a:	mov	r0, r5
   10e6c:	pop	{r3, r4, r5, pc}
   10e6e:	mov	r1, r4
   10e70:	bl	e074 <memset>
   10e74:	mov	r0, r5
   10e76:	pop	{r3, r4, r5, pc}
   10e78:	mov	r2, r0
   10e7a:	movs	r3, #0
   10e7c:	strd	r3, r3, [r2]
   10e80:	str	r3, [r2, #8]
   10e82:	mov	r0, r5
   10e84:	pop	{r3, r4, r5, pc}
   10e86:	add.w	r2, r0, #8
   10e8a:	b.n	10e7a <_calloc_r+0x5a>
   10e8c:	bl	e2e0 <__errno>
   10e90:	movs	r3, #12
   10e92:	movs	r5, #0
   10e94:	str	r3, [r0, #0]
   10e96:	b.n	10e6a <_calloc_r+0x4a>

00010e98 <quorem>:
   10e98:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10e9c:	ldr	r3, [r0, #16]
   10e9e:	ldr	r4, [r1, #16]
   10ea0:	cmp	r3, r4
   10ea2:	sub	sp, #12
   10ea4:	blt.w	10fb6 <quorem+0x11e>
   10ea8:	subs	r4, #1
   10eaa:	add.w	r5, r1, #20
   10eae:	lsls	r3, r4, #2
   10eb0:	add.w	r8, r0, #20
   10eb4:	str	r3, [sp, #0]
   10eb6:	ldr.w	r3, [r5, r4, lsl #2]
   10eba:	ldr.w	r2, [r8, r4, lsl #2]
   10ebe:	adds	r3, #1
   10ec0:	mov	r9, r0
   10ec2:	cmp	r2, r3
   10ec4:	add.w	r0, r8, r4, lsl #2
   10ec8:	add.w	r7, r5, r4, lsl #2
   10ecc:	str	r0, [sp, #4]
   10ece:	udiv	r6, r2, r3
   10ed2:	bcc.n	10f4c <quorem+0xb4>
   10ed4:	mov.w	ip, #0
   10ed8:	mov	lr, r5
   10eda:	mov	r0, r8
   10edc:	mov	sl, ip
   10ede:	mov	r3, ip
   10ee0:	ldr.w	fp, [lr], #4
   10ee4:	ldr	r2, [r0, #0]
   10ee6:	uxth.w	ip, fp
   10eea:	mla	r3, r6, ip, r3
   10eee:	mov.w	ip, r3, lsr #16
   10ef2:	mov.w	fp, fp, lsr #16
   10ef6:	mla	ip, r6, fp, ip
   10efa:	uxth	r3, r3
   10efc:	sub.w	r3, sl, r3
   10f00:	uxth.w	sl, ip
   10f04:	uxtah	r3, r3, r2
   10f08:	rsb	r2, sl, r2, lsr #16
   10f0c:	add.w	r2, r2, r3, asr #16
   10f10:	uxth	r3, r3
   10f12:	orr.w	r3, r3, r2, lsl #16
   10f16:	cmp	r7, lr
   10f18:	str.w	r3, [r0], #4
   10f1c:	mov.w	sl, r2, asr #16
   10f20:	mov.w	r3, ip, lsr #16
   10f24:	bcs.n	10ee0 <quorem+0x48>
   10f26:	ldr	r3, [sp, #0]
   10f28:	ldr.w	r3, [r8, r3]
   10f2c:	cbnz	r3, 10f4c <quorem+0xb4>
   10f2e:	ldr	r3, [sp, #4]
   10f30:	subs	r3, #4
   10f32:	cmp	r8, r3
   10f34:	bcc.n	10f40 <quorem+0xa8>
   10f36:	b.n	10f48 <quorem+0xb0>
   10f38:	cmp	r8, r3
   10f3a:	add.w	r4, r4, #4294967295
   10f3e:	bcs.n	10f48 <quorem+0xb0>
   10f40:	ldr.w	r2, [r3], #-4
   10f44:	cmp	r2, #0
   10f46:	beq.n	10f38 <quorem+0xa0>
   10f48:	str.w	r4, [r9, #16]
   10f4c:	mov	r0, r9
   10f4e:	bl	ed48 <__mcmp>
   10f52:	cmp	r0, #0
   10f54:	blt.n	10fae <quorem+0x116>
   10f56:	adds	r6, #1
   10f58:	mov	r1, r8
   10f5a:	movs	r3, #0
   10f5c:	ldr.w	r0, [r5], #4
   10f60:	ldr.w	ip, [r1]
   10f64:	uxth	r2, r0
   10f66:	subs	r2, r3, r2
   10f68:	lsrs	r3, r0, #16
   10f6a:	uxtah	r2, r2, ip
   10f6e:	rsb	r3, r3, ip, lsr #16
   10f72:	add.w	r3, r3, r2, asr #16
   10f76:	uxth	r2, r2
   10f78:	orr.w	r2, r2, r3, lsl #16
   10f7c:	cmp	r7, r5
   10f7e:	str.w	r2, [r1], #4
   10f82:	mov.w	r3, r3, asr #16
   10f86:	bcs.n	10f5c <quorem+0xc4>
   10f88:	ldr.w	r2, [r8, r4, lsl #2]
   10f8c:	add.w	r3, r8, r4, lsl #2
   10f90:	cbnz	r2, 10fae <quorem+0x116>
   10f92:	subs	r3, #4
   10f94:	cmp	r8, r3
   10f96:	bcc.n	10fa2 <quorem+0x10a>
   10f98:	b.n	10faa <quorem+0x112>
   10f9a:	cmp	r8, r3
   10f9c:	add.w	r4, r4, #4294967295
   10fa0:	bcs.n	10faa <quorem+0x112>
   10fa2:	ldr.w	r2, [r3], #-4
   10fa6:	cmp	r2, #0
   10fa8:	beq.n	10f9a <quorem+0x102>
   10faa:	str.w	r4, [r9, #16]
   10fae:	mov	r0, r6
   10fb0:	add	sp, #12
   10fb2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10fb6:	movs	r0, #0
   10fb8:	add	sp, #12
   10fba:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10fbe:	nop

00010fc0 <_dtoa_r>:
   10fc0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10fc4:	vpush	{d8}
   10fc8:	sub	sp, #60	; 0x3c
   10fca:	vstr	d0, [sp, #8]
   10fce:	str	r1, [sp, #4]
   10fd0:	ldr	r1, [r0, #56]	; 0x38
   10fd2:	ldr	r5, [sp, #104]	; 0x68
   10fd4:	str	r3, [sp, #20]
   10fd6:	vmov	r6, r7, d0
   10fda:	mov	r4, r0
   10fdc:	mov	fp, r2
   10fde:	cbz	r1, 10ff2 <_dtoa_r+0x32>
   10fe0:	ldr	r2, [r0, #60]	; 0x3c
   10fe2:	str	r2, [r1, #4]
   10fe4:	movs	r3, #1
   10fe6:	lsls	r3, r2
   10fe8:	str	r3, [r1, #8]
   10fea:	bl	e888 <_Bfree>
   10fee:	movs	r3, #0
   10ff0:	str	r3, [r4, #56]	; 0x38
   10ff2:	subs.w	r8, r7, #0
   10ff6:	ite	lt
   10ff8:	movlt	r3, #1
   10ffa:	movge	r3, #0
   10ffc:	str	r3, [r5, #0]
   10ffe:	ldr	r3, [pc, #760]	; (112f8 <_dtoa_r+0x338>)
   11000:	itt	lt
   11002:	biclt.w	r8, r8, #2147483648	; 0x80000000
   11006:	strlt.w	r8, [sp, #12]
   1100a:	bics.w	r3, r3, r8
   1100e:	beq.w	11150 <_dtoa_r+0x190>
   11012:	vldr	d8, [sp, #8]
   11016:	vcmp.f64	d8, #0.0
   1101a:	vmrs	APSR_nzcv, fpscr
   1101e:	bne.n	11044 <_dtoa_r+0x84>
   11020:	ldr	r2, [sp, #20]
   11022:	movs	r3, #1
   11024:	str	r3, [r2, #0]
   11026:	ldr	r3, [sp, #108]	; 0x6c
   11028:	cmp	r3, #0
   1102a:	beq.w	114ac <_dtoa_r+0x4ec>
   1102e:	ldr	r3, [pc, #716]	; (112fc <_dtoa_r+0x33c>)
   11030:	ldr	r2, [sp, #108]	; 0x6c
   11032:	str	r3, [r2, #0]
   11034:	subs	r3, #1
   11036:	str	r3, [sp, #0]
   11038:	ldr	r0, [sp, #0]
   1103a:	add	sp, #60	; 0x3c
   1103c:	vpop	{d8}
   11040:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11044:	add	r2, sp, #48	; 0x30
   11046:	add	r1, sp, #52	; 0x34
   11048:	mov	r0, r4
   1104a:	vmov.f64	d0, d8
   1104e:	bl	eee0 <__d2b>
   11052:	movs.w	r3, r8, lsr #20
   11056:	mov	r5, r0
   11058:	bne.w	11180 <_dtoa_r+0x1c0>
   1105c:	ldrd	r1, r3, [sp, #48]	; 0x30
   11060:	add	r3, r1
   11062:	addw	r2, r3, #1074	; 0x432
   11066:	cmp	r2, #32
   11068:	ble.w	11660 <_dtoa_r+0x6a0>
   1106c:	rsb	r2, r2, #64	; 0x40
   11070:	lsl.w	r8, r8, r2
   11074:	addw	r2, r3, #1042	; 0x412
   11078:	lsrs	r6, r2
   1107a:	orr.w	r2, r8, r6
   1107e:	vmov	s14, r2
   11082:	vcvt.f64.u32	d7, s14
   11086:	subs	r0, r3, #1
   11088:	vmov	r6, s15
   1108c:	vmov	r2, r3, d7
   11090:	mov.w	sl, #1
   11094:	sub.w	r3, r6, #32505856	; 0x1f00000
   11098:	vldr	d3, [pc, #580]	; 112e0 <_dtoa_r+0x320>
   1109c:	vldr	d7, [pc, #584]	; 112e8 <_dtoa_r+0x328>
   110a0:	vldr	d5, [pc, #588]	; 112f0 <_dtoa_r+0x330>
   110a4:	vmov	s13, r0
   110a8:	vmov	d2, r2, r3
   110ac:	vcvt.f64.s32	d4, s13
   110b0:	vmov.f64	d6, #120	; 0x3fc00000  1.5
   110b4:	vsub.f64	d6, d2, d6
   110b8:	vfma.f64	d7, d6, d3
   110bc:	vfma.f64	d7, d4, d5
   110c0:	vcvt.s32.f64	s13, d7
   110c4:	vcmpe.f64	d7, #0.0
   110c8:	vmrs	APSR_nzcv, fpscr
   110cc:	vmov	r7, s13
   110d0:	bpl.n	110e4 <_dtoa_r+0x124>
   110d2:	vcvt.f64.s32	d6, s13
   110d6:	vcmp.f64	d6, d7
   110da:	vmrs	APSR_nzcv, fpscr
   110de:	it	ne
   110e0:	addne.w	r7, r7, #4294967295
   110e4:	cmp	r7, #22
   110e6:	bhi.w	11374 <_dtoa_r+0x3b4>
   110ea:	ldr	r3, [pc, #532]	; (11300 <_dtoa_r+0x340>)
   110ec:	add.w	r3, r3, r7, lsl #3
   110f0:	vldr	d7, [r3]
   110f4:	vcmpe.f64	d8, d7
   110f8:	vmrs	APSR_nzcv, fpscr
   110fc:	bpl.n	111ae <_dtoa_r+0x1ee>
   110fe:	subs	r1, r1, r0
   11100:	movs	r3, #0
   11102:	subs.w	r8, r1, #1
   11106:	add.w	r7, r7, #4294967295
   1110a:	str	r3, [sp, #40]	; 0x28
   1110c:	bmi.w	11382 <_dtoa_r+0x3c2>
   11110:	movs	r3, #0
   11112:	str	r3, [sp, #24]
   11114:	cmp	r7, #0
   11116:	bge.n	111be <_dtoa_r+0x1fe>
   11118:	ldr	r3, [sp, #24]
   1111a:	str	r7, [sp, #16]
   1111c:	subs	r3, r3, r7
   1111e:	str	r3, [sp, #24]
   11120:	negs	r3, r7
   11122:	str	r3, [sp, #32]
   11124:	ldr	r3, [sp, #4]
   11126:	cmp	r3, #9
   11128:	mov.w	r7, #0
   1112c:	bhi.n	111cc <_dtoa_r+0x20c>
   1112e:	cmp	r3, #5
   11130:	ble.w	1166e <_dtoa_r+0x6ae>
   11134:	subs	r3, #4
   11136:	str	r3, [sp, #4]
   11138:	movs	r6, #0
   1113a:	ldr	r3, [sp, #4]
   1113c:	subs	r2, r3, #2
   1113e:	cmp	r2, #3
   11140:	bhi.w	1138e <_dtoa_r+0x3ce>
   11144:	tbh	[pc, r2, lsl #1]
   11148:	.word	0x03a703aa
   1114c:	.word	0x037e039d
   11150:	ldr	r2, [sp, #20]
   11152:	ubfx	r8, r8, #0, #20
   11156:	movw	r3, #9999	; 0x270f
   1115a:	orrs.w	r8, r8, r6
   1115e:	str	r3, [r2, #0]
   11160:	bne.n	111a0 <_dtoa_r+0x1e0>
   11162:	ldr	r3, [sp, #108]	; 0x6c
   11164:	cmp	r3, #0
   11166:	beq.w	11c8c <_dtoa_r+0xccc>
   1116a:	ldr	r3, [pc, #408]	; (11304 <_dtoa_r+0x344>)
   1116c:	str	r3, [sp, #0]
   1116e:	adds	r3, #8
   11170:	ldr	r2, [sp, #108]	; 0x6c
   11172:	ldr	r0, [sp, #0]
   11174:	str	r3, [r2, #0]
   11176:	add	sp, #60	; 0x3c
   11178:	vpop	{d8}
   1117c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11180:	vmov	r6, s17
   11184:	ubfx	r6, r6, #0, #20
   11188:	subw	r0, r3, #1023	; 0x3ff
   1118c:	vmov	r2, r3, d8
   11190:	orr.w	r3, r6, #1069547520	; 0x3fc00000
   11194:	ldr	r1, [sp, #48]	; 0x30
   11196:	mov.w	sl, #0
   1119a:	orr.w	r3, r3, #3145728	; 0x300000
   1119e:	b.n	11098 <_dtoa_r+0xd8>
   111a0:	ldr	r3, [sp, #108]	; 0x6c
   111a2:	cmp	r3, #0
   111a4:	bne.w	1181e <_dtoa_r+0x85e>
   111a8:	ldr	r3, [pc, #348]	; (11308 <_dtoa_r+0x348>)
   111aa:	str	r3, [sp, #0]
   111ac:	b.n	11038 <_dtoa_r+0x78>
   111ae:	subs	r1, r1, r0
   111b0:	movs	r3, #0
   111b2:	subs.w	r8, r1, #1
   111b6:	str	r3, [sp, #40]	; 0x28
   111b8:	bmi.w	11382 <_dtoa_r+0x3c2>
   111bc:	str	r3, [sp, #24]
   111be:	movs	r3, #0
   111c0:	str	r3, [sp, #32]
   111c2:	ldr	r3, [sp, #4]
   111c4:	str	r7, [sp, #16]
   111c6:	cmp	r3, #9
   111c8:	add	r8, r7
   111ca:	bls.n	1112e <_dtoa_r+0x16e>
   111cc:	movs	r3, #0
   111ce:	movs	r6, #1
   111d0:	str	r3, [sp, #4]
   111d2:	str	r6, [sp, #28]
   111d4:	mov.w	r9, #4294967295
   111d8:	mov	fp, r3
   111da:	movs	r1, #0
   111dc:	str	r1, [r4, #60]	; 0x3c
   111de:	str.w	r9, [sp, #44]	; 0x2c
   111e2:	mov	r0, r4
   111e4:	bl	e83c <_Balloc>
   111e8:	str	r0, [sp, #0]
   111ea:	cmp	r0, #0
   111ec:	beq.w	11c70 <_dtoa_r+0xcb0>
   111f0:	ldr	r3, [sp, #0]
   111f2:	str	r3, [r4, #56]	; 0x38
   111f4:	cmp.w	r9, #14
   111f8:	bhi.w	113b4 <_dtoa_r+0x3f4>
   111fc:	cmp	r6, #0
   111fe:	beq.w	113b4 <_dtoa_r+0x3f4>
   11202:	ldr	r3, [sp, #16]
   11204:	cmp	r3, #0
   11206:	ble.w	119c6 <_dtoa_r+0xa06>
   1120a:	ldr	r2, [pc, #244]	; (11300 <_dtoa_r+0x340>)
   1120c:	and.w	r1, r3, #15
   11210:	add.w	r2, r2, r1, lsl #3
   11214:	vldr	d7, [r2]
   11218:	asrs	r2, r3, #4
   1121a:	lsls	r3, r3, #23
   1121c:	bpl.w	11924 <_dtoa_r+0x964>
   11220:	ldr	r1, [pc, #232]	; (1130c <_dtoa_r+0x34c>)
   11222:	vldr	d6, [r1, #32]
   11226:	and.w	r2, r2, #15
   1122a:	movs	r0, #3
   1122c:	vdiv.f64	d5, d8, d6
   11230:	cbz	r2, 1124a <_dtoa_r+0x28a>
   11232:	ldr	r1, [pc, #216]	; (1130c <_dtoa_r+0x34c>)
   11234:	lsls	r6, r2, #31
   11236:	bpl.n	11242 <_dtoa_r+0x282>
   11238:	vldr	d6, [r1]
   1123c:	adds	r0, #1
   1123e:	vmul.f64	d7, d7, d6
   11242:	asrs	r2, r2, #1
   11244:	add.w	r1, r1, #8
   11248:	bne.n	11234 <_dtoa_r+0x274>
   1124a:	vdiv.f64	d6, d5, d7
   1124e:	ldr	r3, [sp, #40]	; 0x28
   11250:	cbz	r3, 11262 <_dtoa_r+0x2a2>
   11252:	vmov.f64	d7, #112	; 0x3f800000  1.0
   11256:	vcmpe.f64	d6, d7
   1125a:	vmrs	APSR_nzcv, fpscr
   1125e:	bmi.w	11bbe <_dtoa_r+0xbfe>
   11262:	vmov	s15, r0
   11266:	vcvt.f64.s32	d5, s15
   1126a:	vmov.f64	d7, #28	; 0x40e00000  7.0
   1126e:	vfma.f64	d7, d5, d6
   11272:	vmov	r2, s15
   11276:	vmov	r0, r1, d7
   1127a:	sub.w	r1, r2, #54525952	; 0x3400000
   1127e:	cmp.w	r9, #0
   11282:	beq.w	11996 <_dtoa_r+0x9d6>
   11286:	ldr	r6, [sp, #16]
   11288:	mov	r2, r9
   1128a:	ldr	r3, [sp, #28]
   1128c:	cmp	r3, #0
   1128e:	beq.w	11b20 <_dtoa_r+0xb60>
   11292:	vmov.f64	d3, #96	; 0x3f000000  0.5
   11296:	ldr	r3, [pc, #104]	; (11300 <_dtoa_r+0x340>)
   11298:	vcvt.s32.f64	s9, d6
   1129c:	add.w	ip, r3, r2, lsl #3
   112a0:	vcvt.f64.s32	d7, s9
   112a4:	vsub.f64	d7, d6, d7
   112a8:	vldr	d6, [ip, #-8]
   112ac:	vdiv.f64	d5, d3, d6
   112b0:	vmov	d6, r0, r1
   112b4:	vmov	r0, s9
   112b8:	vsub.f64	d5, d5, d6
   112bc:	ldr	r1, [sp, #0]
   112be:	vcmpe.f64	d5, d7
   112c2:	adds	r0, #48	; 0x30
   112c4:	vmrs	APSR_nzcv, fpscr
   112c8:	strb.w	r0, [r1], #1
   112cc:	bgt.w	11c28 <_dtoa_r+0xc68>
   112d0:	vmov.f64	d2, #112	; 0x3f800000  1.0
   112d4:	vmov.f64	d4, #36	; 0x41200000  10.0
   112d8:	mov.w	ip, #0
   112dc:	b.n	11342 <_dtoa_r+0x382>
   112de:	nop
   112e0:	.word	0x636f4361
   112e4:	.word	0x3fd287a7
   112e8:	.word	0x8b60c8b3
   112ec:	.word	0x3fc68a28
   112f0:	.word	0x509f79fb
   112f4:	.word	0x3fd34413
   112f8:	.word	0x7ff00000
   112fc:	.word	0x20000e99
   11300:	.word	0x200003a8
   11304:	.word	0x20000dec
   11308:	.word	0x20000df8
   1130c:	.word	0x20000380
   11310:	add.w	ip, ip, #1
   11314:	cmp	ip, r2
   11316:	bge.n	113b4 <_dtoa_r+0x3f4>
   11318:	vmul.f64	d7, d7, d4
   1131c:	vmul.f64	d5, d5, d4
   11320:	vcvt.s32.f64	s13, d7
   11324:	vmov	r3, s13
   11328:	vcvt.f64.s32	d3, s13
   1132c:	adds	r3, #48	; 0x30
   1132e:	vsub.f64	d7, d7, d3
   11332:	vcmpe.f64	d7, d5
   11336:	vmrs	APSR_nzcv, fpscr
   1133a:	strb.w	r3, [r1], #1
   1133e:	bmi.w	11c28 <_dtoa_r+0xc68>
   11342:	vsub.f64	d6, d2, d7
   11346:	vcmpe.f64	d6, d5
   1134a:	vmrs	APSR_nzcv, fpscr
   1134e:	bpl.n	11310 <_dtoa_r+0x350>
   11350:	ldr	r2, [sp, #0]
   11352:	str	r6, [sp, #16]
   11354:	b.n	1135c <_dtoa_r+0x39c>
   11356:	cmp	r2, r1
   11358:	beq.w	11bfc <_dtoa_r+0xc3c>
   1135c:	mov	r9, r1
   1135e:	ldrb.w	r3, [r1, #-1]!
   11362:	cmp	r3, #57	; 0x39
   11364:	beq.n	11356 <_dtoa_r+0x396>
   11366:	adds	r3, #1
   11368:	uxtb	r3, r3
   1136a:	strb	r3, [r1, #0]
   1136c:	ldr	r3, [sp, #16]
   1136e:	adds	r3, #1
   11370:	str	r3, [sp, #16]
   11372:	b.n	11620 <_dtoa_r+0x660>
   11374:	subs	r1, r1, r0
   11376:	movs	r3, #1
   11378:	subs.w	r8, r1, #1
   1137c:	str	r3, [sp, #40]	; 0x28
   1137e:	bpl.w	11110 <_dtoa_r+0x150>
   11382:	rsb	r3, r1, #1
   11386:	str	r3, [sp, #24]
   11388:	mov.w	r8, #0
   1138c:	b.n	11114 <_dtoa_r+0x154>
   1138e:	movs	r6, #0
   11390:	str	r6, [r4, #60]	; 0x3c
   11392:	mov	r1, r6
   11394:	mov	r0, r4
   11396:	bl	e83c <_Balloc>
   1139a:	str	r0, [sp, #0]
   1139c:	cmp	r0, #0
   1139e:	beq.w	11c70 <_dtoa_r+0xcb0>
   113a2:	ldr	r3, [sp, #0]
   113a4:	str	r3, [r4, #56]	; 0x38
   113a6:	mov.w	r3, #4294967295
   113aa:	str	r3, [sp, #44]	; 0x2c
   113ac:	mov	r9, r3
   113ae:	movs	r3, #1
   113b0:	mov	fp, r6
   113b2:	str	r3, [sp, #28]
   113b4:	ldr	r2, [sp, #52]	; 0x34
   113b6:	cmp	r2, #0
   113b8:	blt.n	11466 <_dtoa_r+0x4a6>
   113ba:	ldr	r1, [sp, #16]
   113bc:	cmp	r1, #14
   113be:	bgt.n	11466 <_dtoa_r+0x4a6>
   113c0:	ldr	r3, [pc, #732]	; (116a0 <_dtoa_r+0x6e0>)
   113c2:	cmp.w	fp, #0
   113c6:	add.w	r3, r3, r1, lsl #3
   113ca:	vldr	d6, [r3]
   113ce:	bge.n	113fc <_dtoa_r+0x43c>
   113d0:	cmp.w	r9, #0
   113d4:	bgt.n	113fc <_dtoa_r+0x43c>
   113d6:	bne.w	119be <_dtoa_r+0x9fe>
   113da:	vmov.f64	d7, #20	; 0x40a00000  5.0
   113de:	vmul.f64	d7, d6, d7
   113e2:	vcmpe.f64	d8, d7
   113e6:	vmrs	APSR_nzcv, fpscr
   113ea:	mov	sl, r9
   113ec:	mov	r6, r9
   113ee:	bhi.w	118cc <_dtoa_r+0x90c>
   113f2:	ldr.w	r8, [sp]
   113f6:	mvn.w	fp, fp
   113fa:	b.n	118de <_dtoa_r+0x91e>
   113fc:	vdiv.f64	d7, d8, d6
   11400:	vcvt.s32.f64	s14, d7
   11404:	ldr	r1, [sp, #0]
   11406:	vmov	r3, s14
   1140a:	cmp.w	r9, #1
   1140e:	add.w	r3, r3, #48	; 0x30
   11412:	vcvt.f64.s32	d5, s14
   11416:	strb.w	r3, [r1], #1
   1141a:	vfms.f64	d8, d5, d6
   1141e:	beq.w	11a8a <_dtoa_r+0xaca>
   11422:	vmov.f64	d4, #36	; 0x41200000  10.0
   11426:	movs	r3, #1
   11428:	b.n	1144e <_dtoa_r+0x48e>
   1142a:	vdiv.f64	d7, d8, d6
   1142e:	vcvt.s32.f64	s14, d7
   11432:	adds	r3, #1
   11434:	vmov	r2, s14
   11438:	cmp	r3, r9
   1143a:	add.w	r2, r2, #48	; 0x30
   1143e:	vcvt.f64.s32	d5, s14
   11442:	strb.w	r2, [r1], #1
   11446:	vfms.f64	d8, d5, d6
   1144a:	beq.w	11a8a <_dtoa_r+0xaca>
   1144e:	vmul.f64	d8, d8, d4
   11452:	vcmp.f64	d8, #0.0
   11456:	vmrs	APSR_nzcv, fpscr
   1145a:	bne.n	1142a <_dtoa_r+0x46a>
   1145c:	ldr	r3, [sp, #16]
   1145e:	adds	r3, #1
   11460:	str	r3, [sp, #16]
   11462:	mov	r9, r1
   11464:	b.n	11620 <_dtoa_r+0x660>
   11466:	ldr	r3, [sp, #28]
   11468:	cbz	r3, 114bc <_dtoa_r+0x4fc>
   1146a:	ldr	r3, [sp, #4]
   1146c:	cmp	r3, #1
   1146e:	ble.w	1195e <_dtoa_r+0x99e>
   11472:	ldr	r3, [sp, #32]
   11474:	add.w	sl, r9, #4294967295
   11478:	cmp	r3, sl
   1147a:	bge.w	118fc <_dtoa_r+0x93c>
   1147e:	ldr	r3, [sp, #32]
   11480:	str.w	sl, [sp, #32]
   11484:	sub.w	r2, sl, r3
   11488:	add	r7, r2
   1148a:	mov.w	sl, #0
   1148e:	cmp.w	r9, #0
   11492:	blt.w	11ae0 <_dtoa_r+0xb20>
   11496:	ldr	r3, [sp, #24]
   11498:	str	r3, [sp, #36]	; 0x24
   1149a:	add	r3, r9
   1149c:	add	r8, r9
   1149e:	str	r3, [sp, #24]
   114a0:	movs	r1, #1
   114a2:	mov	r0, r4
   114a4:	bl	e9e0 <__i2b>
   114a8:	mov	r6, r0
   114aa:	b.n	114c6 <_dtoa_r+0x506>
   114ac:	ldr	r3, [pc, #500]	; (116a4 <_dtoa_r+0x6e4>)
   114ae:	str	r3, [sp, #0]
   114b0:	ldr	r0, [sp, #0]
   114b2:	add	sp, #60	; 0x3c
   114b4:	vpop	{d8}
   114b8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   114bc:	ldr	r3, [sp, #24]
   114be:	ldr.w	sl, [sp, #32]
   114c2:	ldr	r6, [sp, #28]
   114c4:	str	r3, [sp, #36]	; 0x24
   114c6:	ldr	r3, [sp, #36]	; 0x24
   114c8:	cbz	r3, 114e6 <_dtoa_r+0x526>
   114ca:	cmp.w	r8, #0
   114ce:	ble.n	114e6 <_dtoa_r+0x526>
   114d0:	cmp	r3, r8
   114d2:	ldr	r1, [sp, #24]
   114d4:	mov	r2, r3
   114d6:	it	ge
   114d8:	movge	r2, r8
   114da:	subs	r1, r1, r2
   114dc:	subs	r3, r3, r2
   114de:	str	r1, [sp, #24]
   114e0:	str	r3, [sp, #36]	; 0x24
   114e2:	sub.w	r8, r8, r2
   114e6:	ldr	r3, [sp, #32]
   114e8:	cbz	r3, 11504 <_dtoa_r+0x544>
   114ea:	ldr	r3, [sp, #28]
   114ec:	cmp	r3, #0
   114ee:	beq.w	11a40 <_dtoa_r+0xa80>
   114f2:	cmp.w	sl, #0
   114f6:	bgt.w	11902 <_dtoa_r+0x942>
   114fa:	ldr	r3, [sp, #32]
   114fc:	subs.w	r2, r3, sl
   11500:	bne.w	11b02 <_dtoa_r+0xb42>
   11504:	movs	r1, #1
   11506:	mov	r0, r4
   11508:	bl	e9e0 <__i2b>
   1150c:	cmp	r7, #0
   1150e:	mov	sl, r0
   11510:	bgt.w	11672 <_dtoa_r+0x6b2>
   11514:	ldr	r3, [sp, #4]
   11516:	cmp	r3, #1
   11518:	ble.w	1182a <_dtoa_r+0x86a>
   1151c:	movs	r3, #0
   1151e:	str	r3, [sp, #32]
   11520:	movs	r0, #1
   11522:	cmp	r7, #0
   11524:	bne.w	1168a <_dtoa_r+0x6ca>
   11528:	add	r0, r8
   1152a:	ands.w	r0, r0, #31
   1152e:	beq.w	11826 <_dtoa_r+0x866>
   11532:	rsb	r2, r0, #32
   11536:	cmp	r2, #4
   11538:	bgt.w	1164c <_dtoa_r+0x68c>
   1153c:	bne.w	1192c <_dtoa_r+0x96c>
   11540:	ldr	r3, [sp, #24]
   11542:	cmp	r3, #0
   11544:	ble.n	11552 <_dtoa_r+0x592>
   11546:	mov	r1, r5
   11548:	mov	r2, r3
   1154a:	mov	r0, r4
   1154c:	bl	ec58 <__lshift>
   11550:	mov	r5, r0
   11552:	cmp.w	r8, #0
   11556:	ble.n	11564 <_dtoa_r+0x5a4>
   11558:	mov	r1, sl
   1155a:	mov	r2, r8
   1155c:	mov	r0, r4
   1155e:	bl	ec58 <__lshift>
   11562:	mov	sl, r0
   11564:	ldr	r3, [sp, #40]	; 0x28
   11566:	cmp	r3, #0
   11568:	bne.w	117ea <_dtoa_r+0x82a>
   1156c:	cmp.w	r9, #0
   11570:	ble.w	117be <_dtoa_r+0x7fe>
   11574:	ldr	r3, [sp, #28]
   11576:	cmp	r3, #0
   11578:	bne.w	116c2 <_dtoa_r+0x702>
   1157c:	ldr	r3, [sp, #16]
   1157e:	adds	r3, #1
   11580:	str	r3, [sp, #16]
   11582:	ldr.w	r8, [sp]
   11586:	movs	r7, #1
   11588:	b.n	1159a <_dtoa_r+0x5da>
   1158a:	mov	r1, r5
   1158c:	movs	r3, #0
   1158e:	movs	r2, #10
   11590:	mov	r0, r4
   11592:	bl	e89c <__multadd>
   11596:	adds	r7, #1
   11598:	mov	r5, r0
   1159a:	mov	r1, sl
   1159c:	mov	r0, r5
   1159e:	bl	10e98 <quorem>
   115a2:	cmp	r9, r7
   115a4:	add.w	r0, r0, #48	; 0x30
   115a8:	strb.w	r0, [r8], #1
   115ac:	bgt.n	1158a <_dtoa_r+0x5ca>
   115ae:	cmp.w	r9, #0
   115b2:	ldr	r2, [sp, #0]
   115b4:	ite	gt
   115b6:	movgt	fp, r9
   115b8:	movle.w	fp, #1
   115bc:	mov	r3, r0
   115be:	add	fp, r2
   115c0:	movs	r7, #0
   115c2:	mov	r1, r5
   115c4:	movs	r2, #1
   115c6:	mov	r0, r4
   115c8:	str	r3, [sp, #4]
   115ca:	bl	ec58 <__lshift>
   115ce:	mov	r1, sl
   115d0:	mov	r5, r0
   115d2:	bl	ed48 <__mcmp>
   115d6:	cmp	r0, #0
   115d8:	ble.w	1193a <_dtoa_r+0x97a>
   115dc:	ldrb.w	r3, [fp, #-1]
   115e0:	ldr	r2, [sp, #0]
   115e2:	add.w	fp, fp, #4294967295
   115e6:	b.n	115f2 <_dtoa_r+0x632>
   115e8:	cmp	r2, fp
   115ea:	beq.w	11950 <_dtoa_r+0x990>
   115ee:	ldrb.w	r3, [fp, #-1]!
   115f2:	cmp	r3, #57	; 0x39
   115f4:	add.w	r9, fp, #1
   115f8:	beq.n	115e8 <_dtoa_r+0x628>
   115fa:	adds	r3, #1
   115fc:	strb.w	r3, [fp]
   11600:	mov	r1, sl
   11602:	mov	r0, r4
   11604:	bl	e888 <_Bfree>
   11608:	cbz	r6, 11620 <_dtoa_r+0x660>
   1160a:	cbz	r7, 11618 <_dtoa_r+0x658>
   1160c:	cmp	r7, r6
   1160e:	beq.n	11618 <_dtoa_r+0x658>
   11610:	mov	r1, r7
   11612:	mov	r0, r4
   11614:	bl	e888 <_Bfree>
   11618:	mov	r1, r6
   1161a:	mov	r0, r4
   1161c:	bl	e888 <_Bfree>
   11620:	mov	r1, r5
   11622:	mov	r0, r4
   11624:	bl	e888 <_Bfree>
   11628:	movs	r3, #0
   1162a:	strb.w	r3, [r9]
   1162e:	ldrd	r2, r3, [sp, #16]
   11632:	str	r2, [r3, #0]
   11634:	ldr	r3, [sp, #108]	; 0x6c
   11636:	cmp	r3, #0
   11638:	beq.w	11038 <_dtoa_r+0x78>
   1163c:	ldr	r0, [sp, #0]
   1163e:	str.w	r9, [r3]
   11642:	add	sp, #60	; 0x3c
   11644:	vpop	{d8}
   11648:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1164c:	rsb	r0, r0, #28
   11650:	ldr	r3, [sp, #24]
   11652:	add	r3, r0
   11654:	str	r3, [sp, #24]
   11656:	ldr	r3, [sp, #36]	; 0x24
   11658:	add	r3, r0
   1165a:	str	r3, [sp, #36]	; 0x24
   1165c:	add	r8, r0
   1165e:	b.n	11540 <_dtoa_r+0x580>
   11660:	rsb	r2, r2, #32
   11664:	lsl.w	r2, r6, r2
   11668:	vmov	s14, r2
   1166c:	b.n	11082 <_dtoa_r+0xc2>
   1166e:	movs	r6, #1
   11670:	b.n	1113a <_dtoa_r+0x17a>
   11672:	mov	r1, r0
   11674:	mov	r2, r7
   11676:	mov	r0, r4
   11678:	bl	eb98 <__pow5mult>
   1167c:	ldr	r3, [sp, #4]
   1167e:	cmp	r3, #1
   11680:	mov	sl, r0
   11682:	ble.w	11a10 <_dtoa_r+0xa50>
   11686:	movs	r3, #0
   11688:	str	r3, [sp, #32]
   1168a:	ldr.w	r2, [sl, #16]
   1168e:	add.w	r2, sl, r2, lsl #2
   11692:	ldr	r0, [r2, #16]
   11694:	bl	e940 <__hi0bits>
   11698:	rsb	r0, r0, #32
   1169c:	b.n	11528 <_dtoa_r+0x568>
   1169e:	nop
   116a0:	.word	0x200003a8
   116a4:	.word	0x20000e98
   116a8:	mov	r1, r6
   116aa:	movs	r3, #0
   116ac:	movs	r2, #10
   116ae:	mov	r0, r4
   116b0:	bl	e89c <__multadd>
   116b4:	ldr	r3, [sp, #44]	; 0x2c
   116b6:	cmp	r3, #0
   116b8:	mov	r6, r0
   116ba:	ble.w	11c5a <_dtoa_r+0xc9a>
   116be:	str	r7, [sp, #16]
   116c0:	mov	r9, r3
   116c2:	ldr	r3, [sp, #36]	; 0x24
   116c4:	cmp	r3, #0
   116c6:	ble.n	116d4 <_dtoa_r+0x714>
   116c8:	mov	r1, r6
   116ca:	mov	r2, r3
   116cc:	mov	r0, r4
   116ce:	bl	ec58 <__lshift>
   116d2:	mov	r6, r0
   116d4:	ldr	r3, [sp, #32]
   116d6:	cmp	r3, #0
   116d8:	bne.w	11ab2 <_dtoa_r+0xaf2>
   116dc:	mov	r8, r6
   116de:	ldr	r3, [sp, #8]
   116e0:	ldr	r7, [sp, #0]
   116e2:	and.w	r2, r3, #1
   116e6:	subs	r3, r7, #1
   116e8:	add	r3, r9
   116ea:	str	r3, [sp, #32]
   116ec:	ldr	r3, [sp, #4]
   116ee:	str	r2, [sp, #40]	; 0x28
   116f0:	orrs	r3, r2
   116f2:	str	r3, [sp, #36]	; 0x24
   116f4:	mov	r1, sl
   116f6:	mov	r0, r5
   116f8:	bl	10e98 <quorem>
   116fc:	mov	r1, r6
   116fe:	mov	fp, r0
   11700:	mov	r0, r5
   11702:	bl	ed48 <__mcmp>
   11706:	mov	r2, r8
   11708:	mov	r1, sl
   1170a:	mov	r9, r0
   1170c:	mov	r0, r4
   1170e:	bl	ed8c <__mdiff>
   11712:	ldr	r2, [r0, #12]
   11714:	mov	r1, r0
   11716:	add.w	r3, fp, #48	; 0x30
   1171a:	cmp	r2, #0
   1171c:	bne.n	117a4 <_dtoa_r+0x7e4>
   1171e:	strd	r0, r3, [sp, #24]
   11722:	mov	r0, r5
   11724:	bl	ed48 <__mcmp>
   11728:	ldr	r1, [sp, #24]
   1172a:	str	r0, [sp, #8]
   1172c:	mov	r0, r4
   1172e:	bl	e888 <_Bfree>
   11732:	ldr	r2, [sp, #8]
   11734:	ldr	r3, [sp, #28]
   11736:	cbnz	r2, 11740 <_dtoa_r+0x780>
   11738:	ldr	r1, [sp, #36]	; 0x24
   1173a:	cmp	r1, #0
   1173c:	beq.w	11c3c <_dtoa_r+0xc7c>
   11740:	cmp.w	r9, #0
   11744:	blt.w	11a4e <_dtoa_r+0xa8e>
   11748:	ldr	r1, [sp, #4]
   1174a:	orr.w	r9, r9, r1
   1174e:	ldr	r1, [sp, #40]	; 0x28
   11750:	orrs.w	r9, r1, r9
   11754:	beq.w	11a4e <_dtoa_r+0xa8e>
   11758:	cmp	r2, #0
   1175a:	bgt.w	11aea <_dtoa_r+0xb2a>
   1175e:	ldr	r2, [sp, #32]
   11760:	strb	r3, [r7, #0]
   11762:	add.w	r9, r7, #1
   11766:	cmp	r7, r2
   11768:	mov	fp, r9
   1176a:	beq.w	11af6 <_dtoa_r+0xb36>
   1176e:	mov	r1, r5
   11770:	movs	r3, #0
   11772:	movs	r2, #10
   11774:	mov	r0, r4
   11776:	bl	e89c <__multadd>
   1177a:	cmp	r6, r8
   1177c:	mov	r5, r0
   1177e:	mov	r1, r6
   11780:	mov.w	r3, #0
   11784:	mov.w	r2, #10
   11788:	mov	r0, r4
   1178a:	beq.n	117b2 <_dtoa_r+0x7f2>
   1178c:	bl	e89c <__multadd>
   11790:	mov	r1, r8
   11792:	mov	r6, r0
   11794:	movs	r3, #0
   11796:	movs	r2, #10
   11798:	mov	r0, r4
   1179a:	bl	e89c <__multadd>
   1179e:	mov	r7, r9
   117a0:	mov	r8, r0
   117a2:	b.n	116f4 <_dtoa_r+0x734>
   117a4:	mov	r0, r4
   117a6:	str	r3, [sp, #8]
   117a8:	bl	e888 <_Bfree>
   117ac:	ldr	r3, [sp, #8]
   117ae:	movs	r2, #1
   117b0:	b.n	11740 <_dtoa_r+0x780>
   117b2:	bl	e89c <__multadd>
   117b6:	mov	r7, r9
   117b8:	mov	r6, r0
   117ba:	mov	r8, r0
   117bc:	b.n	116f4 <_dtoa_r+0x734>
   117be:	ldr	r3, [sp, #4]
   117c0:	cmp	r3, #2
   117c2:	bgt.n	118a8 <_dtoa_r+0x8e8>
   117c4:	ldr	r3, [sp, #28]
   117c6:	cmp	r3, #0
   117c8:	bne.w	116c2 <_dtoa_r+0x702>
   117cc:	ldr	r3, [sp, #16]
   117ce:	mov	r1, sl
   117d0:	adds	r3, #1
   117d2:	mov	r0, r5
   117d4:	str	r3, [sp, #16]
   117d6:	bl	10e98 <quorem>
   117da:	ldr.w	fp, [sp]
   117de:	add.w	r3, r0, #48	; 0x30
   117e2:	strb.w	r3, [fp], #1
   117e6:	movs	r7, #0
   117e8:	b.n	115c2 <_dtoa_r+0x602>
   117ea:	mov	r1, sl
   117ec:	mov	r0, r5
   117ee:	bl	ed48 <__mcmp>
   117f2:	cmp	r0, #0
   117f4:	bge.w	1156c <_dtoa_r+0x5ac>
   117f8:	mov	r1, r5
   117fa:	movs	r3, #0
   117fc:	movs	r2, #10
   117fe:	mov	r0, r4
   11800:	bl	e89c <__multadd>
   11804:	ldr	r3, [sp, #16]
   11806:	subs	r7, r3, #1
   11808:	ldr	r3, [sp, #28]
   1180a:	mov	r5, r0
   1180c:	cmp	r3, #0
   1180e:	bne.w	116a8 <_dtoa_r+0x6e8>
   11812:	ldr	r3, [sp, #44]	; 0x2c
   11814:	cmp	r3, #0
   11816:	ble.w	11c4a <_dtoa_r+0xc8a>
   1181a:	mov	r9, r3
   1181c:	b.n	11582 <_dtoa_r+0x5c2>
   1181e:	ldr	r3, [pc, #752]	; (11b10 <_dtoa_r+0xb50>)
   11820:	str	r3, [sp, #0]
   11822:	adds	r3, #3
   11824:	b.n	11170 <_dtoa_r+0x1b0>
   11826:	movs	r0, #28
   11828:	b.n	11650 <_dtoa_r+0x690>
   1182a:	ldrd	r0, r1, [sp, #8]
   1182e:	cmp	r0, #0
   11830:	bne.w	1151c <_dtoa_r+0x55c>
   11834:	ubfx	r2, r1, #0, #20
   11838:	cmp	r2, #0
   1183a:	beq.w	11a26 <_dtoa_r+0xa66>
   1183e:	ldr	r3, [sp, #8]
   11840:	str	r3, [sp, #32]
   11842:	b.n	11520 <_dtoa_r+0x560>
   11844:	movs	r3, #1
   11846:	str	r3, [sp, #28]
   11848:	ldr	r3, [sp, #16]
   1184a:	add	r3, fp
   1184c:	add.w	r9, r3, #1
   11850:	cmp.w	r9, #1
   11854:	mov	ip, r9
   11856:	str	r3, [sp, #44]	; 0x2c
   11858:	it	lt
   1185a:	movlt.w	ip, #1
   1185e:	movs	r1, #0
   11860:	cmp.w	ip, #23
   11864:	str	r1, [r4, #60]	; 0x3c
   11866:	ble.w	111e2 <_dtoa_r+0x222>
   1186a:	movs	r0, #1
   1186c:	movs	r2, #4
   1186e:	lsls	r2, r2, #1
   11870:	add.w	r3, r2, #20
   11874:	cmp	r3, ip
   11876:	mov	r1, r0
   11878:	add.w	r0, r0, #1
   1187c:	bls.n	1186e <_dtoa_r+0x8ae>
   1187e:	str	r1, [r4, #60]	; 0x3c
   11880:	b.n	111e2 <_dtoa_r+0x222>
   11882:	movs	r3, #1
   11884:	str	r3, [sp, #28]
   11886:	cmp.w	fp, #0
   1188a:	ble.n	11932 <_dtoa_r+0x972>
   1188c:	str.w	fp, [sp, #44]	; 0x2c
   11890:	mov	r9, fp
   11892:	mov	ip, fp
   11894:	b.n	1185e <_dtoa_r+0x89e>
   11896:	movs	r3, #0
   11898:	str	r3, [sp, #28]
   1189a:	b.n	11848 <_dtoa_r+0x888>
   1189c:	movs	r3, #0
   1189e:	str	r3, [sp, #28]
   118a0:	b.n	11886 <_dtoa_r+0x8c6>
   118a2:	ldr.w	r9, [sp, #44]	; 0x2c
   118a6:	str	r7, [sp, #16]
   118a8:	cmp.w	r9, #0
   118ac:	bne.w	113f2 <_dtoa_r+0x432>
   118b0:	mov	r1, sl
   118b2:	mov	r3, r9
   118b4:	movs	r2, #5
   118b6:	mov	r0, r4
   118b8:	bl	e89c <__multadd>
   118bc:	mov	r1, r0
   118be:	mov	sl, r0
   118c0:	mov	r0, r5
   118c2:	bl	ed48 <__mcmp>
   118c6:	cmp	r0, #0
   118c8:	ble.w	113f2 <_dtoa_r+0x432>
   118cc:	ldr	r3, [sp, #16]
   118ce:	add.w	fp, r3, #1
   118d2:	ldr	r3, [sp, #0]
   118d4:	movs	r2, #49	; 0x31
   118d6:	mov	r8, r3
   118d8:	strb.w	r2, [r3], #1
   118dc:	str	r3, [sp, #0]
   118de:	mov	r1, sl
   118e0:	mov	r0, r4
   118e2:	bl	e888 <_Bfree>
   118e6:	add.w	r3, fp, #1
   118ea:	ldr.w	r9, [sp]
   118ee:	str	r3, [sp, #16]
   118f0:	str.w	r8, [sp]
   118f4:	cmp	r6, #0
   118f6:	bne.w	11618 <_dtoa_r+0x658>
   118fa:	b.n	11620 <_dtoa_r+0x660>
   118fc:	sub.w	sl, r3, sl
   11900:	b.n	1148e <_dtoa_r+0x4ce>
   11902:	mov	r1, r6
   11904:	mov	r2, sl
   11906:	mov	r0, r4
   11908:	bl	eb98 <__pow5mult>
   1190c:	mov	r2, r5
   1190e:	mov	r1, r0
   11910:	mov	r6, r0
   11912:	mov	r0, r4
   11914:	bl	ea3c <__multiply>
   11918:	mov	r1, r5
   1191a:	mov	r5, r0
   1191c:	mov	r0, r4
   1191e:	bl	e888 <_Bfree>
   11922:	b.n	114fa <_dtoa_r+0x53a>
   11924:	movs	r0, #2
   11926:	vmov.f64	d5, d8
   1192a:	b.n	11230 <_dtoa_r+0x270>
   1192c:	rsb	r0, r0, #60	; 0x3c
   11930:	b.n	11650 <_dtoa_r+0x690>
   11932:	mov.w	fp, #1
   11936:	mov	r9, fp
   11938:	b.n	111da <_dtoa_r+0x21a>
   1193a:	bne.n	11944 <_dtoa_r+0x984>
   1193c:	ldr	r3, [sp, #4]
   1193e:	lsls	r3, r3, #31
   11940:	bmi.w	115dc <_dtoa_r+0x61c>
   11944:	mov	r9, fp
   11946:	ldrb.w	r3, [fp, #-1]!
   1194a:	cmp	r3, #48	; 0x30
   1194c:	beq.n	11944 <_dtoa_r+0x984>
   1194e:	b.n	11600 <_dtoa_r+0x640>
   11950:	ldr	r3, [sp, #16]
   11952:	ldr	r2, [sp, #0]
   11954:	adds	r3, #1
   11956:	str	r3, [sp, #16]
   11958:	movs	r3, #49	; 0x31
   1195a:	strb	r3, [r2, #0]
   1195c:	b.n	11600 <_dtoa_r+0x640>
   1195e:	cmp.w	sl, #0
   11962:	beq.w	11bac <_dtoa_r+0xbec>
   11966:	addw	r2, r2, #1075	; 0x433
   1196a:	ldr	r3, [sp, #24]
   1196c:	str	r3, [sp, #36]	; 0x24
   1196e:	add	r3, r2
   11970:	ldr.w	sl, [sp, #32]
   11974:	str	r3, [sp, #24]
   11976:	add	r8, r2
   11978:	b.n	114a0 <_dtoa_r+0x4e0>
   1197a:	vmov	s15, r0
   1197e:	vmov.f64	d5, #28	; 0x40e00000  7.0
   11982:	vcvt.f64.s32	d7, s15
   11986:	vfma.f64	d5, d6, d7
   1198a:	vmov	r2, s11
   1198e:	vmov	r0, r1, d5
   11992:	sub.w	r1, r2, #54525952	; 0x3400000
   11996:	vmov	d5, r0, r1
   1199a:	vmov.f64	d7, #20	; 0x40a00000  5.0
   1199e:	vsub.f64	d7, d6, d7
   119a2:	vcmpe.f64	d7, d5
   119a6:	vmrs	APSR_nzcv, fpscr
   119aa:	bgt.w	11c1c <_dtoa_r+0xc5c>
   119ae:	vneg.f64	d5, d5
   119b2:	vcmpe.f64	d7, d5
   119b6:	vmrs	APSR_nzcv, fpscr
   119ba:	bpl.w	113b4 <_dtoa_r+0x3f4>
   119be:	mov.w	sl, #0
   119c2:	mov	r6, sl
   119c4:	b.n	113f2 <_dtoa_r+0x432>
   119c6:	beq.w	11bb4 <_dtoa_r+0xbf4>
   119ca:	ldr	r3, [sp, #16]
   119cc:	ldr	r1, [pc, #324]	; (11b14 <_dtoa_r+0xb54>)
   119ce:	negs	r2, r3
   119d0:	and.w	r0, r2, #15
   119d4:	add.w	r1, r1, r0, lsl #3
   119d8:	vldr	d6, [r1]
   119dc:	asrs	r2, r2, #4
   119de:	vmul.f64	d6, d8, d6
   119e2:	beq.w	11c6a <_dtoa_r+0xcaa>
   119e6:	vmov.f64	d7, d6
   119ea:	ldr	r1, [pc, #300]	; (11b18 <_dtoa_r+0xb58>)
   119ec:	movs	r6, #0
   119ee:	movs	r0, #2
   119f0:	lsls	r3, r2, #31
   119f2:	bpl.n	11a00 <_dtoa_r+0xa40>
   119f4:	vldr	d5, [r1]
   119f8:	adds	r0, #1
   119fa:	movs	r6, #1
   119fc:	vmul.f64	d7, d7, d5
   11a00:	asrs	r2, r2, #1
   11a02:	add.w	r1, r1, #8
   11a06:	bne.n	119f0 <_dtoa_r+0xa30>
   11a08:	cmp	r6, #0
   11a0a:	vseleq.f64	d6, d6, d7
   11a0e:	b.n	1124e <_dtoa_r+0x28e>
   11a10:	ldr	r3, [sp, #8]
   11a12:	cmp	r3, #0
   11a14:	bne.w	11686 <_dtoa_r+0x6c6>
   11a18:	ldrd	r0, r1, [sp, #8]
   11a1c:	ubfx	r2, r1, #0, #20
   11a20:	cmp	r2, #0
   11a22:	bne.w	11c94 <_dtoa_r+0xcd4>
   11a26:	ldr	r2, [pc, #244]	; (11b1c <_dtoa_r+0xb5c>)
   11a28:	ands	r2, r1
   11a2a:	cmp	r2, #0
   11a2c:	beq.w	11c24 <_dtoa_r+0xc64>
   11a30:	ldr	r3, [sp, #24]
   11a32:	adds	r3, #1
   11a34:	str	r3, [sp, #24]
   11a36:	movs	r3, #1
   11a38:	add.w	r8, r8, #1
   11a3c:	str	r3, [sp, #32]
   11a3e:	b.n	11520 <_dtoa_r+0x560>
   11a40:	mov	r1, r5
   11a42:	ldr	r2, [sp, #32]
   11a44:	mov	r0, r4
   11a46:	bl	eb98 <__pow5mult>
   11a4a:	mov	r5, r0
   11a4c:	b.n	11504 <_dtoa_r+0x544>
   11a4e:	cmp	r2, #0
   11a50:	ble.n	11a78 <_dtoa_r+0xab8>
   11a52:	mov	r1, r5
   11a54:	movs	r2, #1
   11a56:	mov	r0, r4
   11a58:	str	r3, [sp, #4]
   11a5a:	bl	ec58 <__lshift>
   11a5e:	mov	r1, sl
   11a60:	mov	r5, r0
   11a62:	bl	ed48 <__mcmp>
   11a66:	cmp	r0, #0
   11a68:	ldr	r3, [sp, #4]
   11a6a:	ble.w	11c30 <_dtoa_r+0xc70>
   11a6e:	cmp	r3, #57	; 0x39
   11a70:	beq.w	11c08 <_dtoa_r+0xc48>
   11a74:	add.w	r3, fp, #49	; 0x31
   11a78:	mov	r9, r7
   11a7a:	strb.w	r3, [r9], #1
   11a7e:	ldr	r3, [sp, #16]
   11a80:	adds	r3, #1
   11a82:	mov	r7, r6
   11a84:	str	r3, [sp, #16]
   11a86:	mov	r6, r8
   11a88:	b.n	11600 <_dtoa_r+0x640>
   11a8a:	vadd.f64	d8, d8, d8
   11a8e:	vcmpe.f64	d8, d6
   11a92:	vmrs	APSR_nzcv, fpscr
   11a96:	bgt.n	11aae <_dtoa_r+0xaee>
   11a98:	vcmp.f64	d8, d6
   11a9c:	vmrs	APSR_nzcv, fpscr
   11aa0:	bne.w	1145c <_dtoa_r+0x49c>
   11aa4:	vmov	r3, s14
   11aa8:	lsls	r0, r3, #31
   11aaa:	bpl.w	1145c <_dtoa_r+0x49c>
   11aae:	ldr	r2, [sp, #0]
   11ab0:	b.n	1135c <_dtoa_r+0x39c>
   11ab2:	ldr	r1, [r6, #4]
   11ab4:	mov	r0, r4
   11ab6:	bl	e83c <_Balloc>
   11aba:	mov	r7, r0
   11abc:	cmp	r0, #0
   11abe:	beq.w	11c7e <_dtoa_r+0xcbe>
   11ac2:	ldr	r3, [r6, #16]
   11ac4:	adds	r3, #2
   11ac6:	lsls	r2, r3, #2
   11ac8:	add.w	r1, r6, #12
   11acc:	adds	r0, #12
   11ace:	bl	a0d4 <memcpy>
   11ad2:	mov	r1, r7
   11ad4:	movs	r2, #1
   11ad6:	mov	r0, r4
   11ad8:	bl	ec58 <__lshift>
   11adc:	mov	r8, r0
   11ade:	b.n	116de <_dtoa_r+0x71e>
   11ae0:	ldr	r3, [sp, #24]
   11ae2:	sub.w	r3, r3, r9
   11ae6:	str	r3, [sp, #36]	; 0x24
   11ae8:	b.n	114a0 <_dtoa_r+0x4e0>
   11aea:	cmp	r3, #57	; 0x39
   11aec:	beq.w	11c08 <_dtoa_r+0xc48>
   11af0:	mov	r9, r7
   11af2:	adds	r3, #1
   11af4:	b.n	11a7a <_dtoa_r+0xaba>
   11af6:	ldr	r2, [sp, #16]
   11af8:	adds	r2, #1
   11afa:	mov	r7, r6
   11afc:	str	r2, [sp, #16]
   11afe:	mov	r6, r8
   11b00:	b.n	115c2 <_dtoa_r+0x602>
   11b02:	mov	r1, r5
   11b04:	mov	r0, r4
   11b06:	bl	eb98 <__pow5mult>
   11b0a:	mov	r5, r0
   11b0c:	b.n	11504 <_dtoa_r+0x544>
   11b0e:	nop
   11b10:	.word	0x20000df8
   11b14:	.word	0x200003a8
   11b18:	.word	0x20000380
   11b1c:	.word	0x7ff00000
   11b20:	ldr	r3, [pc, #376]	; (11c9c <_dtoa_r+0xcdc>)
   11b22:	vcvt.s32.f64	s11, d6
   11b26:	add.w	ip, r3, r2, lsl #3
   11b2a:	vldr	d3, [ip, #-8]
   11b2e:	vcvt.f64.s32	d7, s11
   11b32:	vsub.f64	d7, d6, d7
   11b36:	vmov	d6, r0, r1
   11b3a:	vmov	r1, s11
   11b3e:	vmul.f64	d3, d3, d6
   11b42:	ldr	r0, [sp, #0]
   11b44:	adds	r1, #48	; 0x30
   11b46:	cmp	r2, #1
   11b48:	strb.w	r1, [r0], #1
   11b4c:	beq.w	11c56 <_dtoa_r+0xc96>
   11b50:	vmov.f64	d4, #36	; 0x41200000  10.0
   11b54:	ldr	r3, [sp, #0]
   11b56:	adds	r1, r3, r2
   11b58:	vmul.f64	d7, d7, d4
   11b5c:	vcvt.s32.f64	s13, d7
   11b60:	vmov	r3, s13
   11b64:	adds	r3, #48	; 0x30
   11b66:	strb.w	r3, [r0], #1
   11b6a:	cmp	r1, r0
   11b6c:	vcvt.f64.s32	d5, s13
   11b70:	vsub.f64	d7, d7, d5
   11b74:	bne.n	11b58 <_dtoa_r+0xb98>
   11b76:	vmov.f64	d6, #96	; 0x3f000000  0.5
   11b7a:	vadd.f64	d5, d3, d6
   11b7e:	vcmpe.f64	d5, d7
   11b82:	vmrs	APSR_nzcv, fpscr
   11b86:	bmi.w	11350 <_dtoa_r+0x390>
   11b8a:	vsub.f64	d6, d6, d3
   11b8e:	vcmpe.f64	d6, d7
   11b92:	vmrs	APSR_nzcv, fpscr
   11b96:	ble.w	113b4 <_dtoa_r+0x3f4>
   11b9a:	mov	r9, r1
   11b9c:	subs	r1, #1
   11b9e:	ldrb.w	r3, [r9, #-1]
   11ba2:	cmp	r3, #48	; 0x30
   11ba4:	beq.n	11b9a <_dtoa_r+0xbda>
   11ba6:	adds	r3, r6, #1
   11ba8:	str	r3, [sp, #16]
   11baa:	b.n	11620 <_dtoa_r+0x660>
   11bac:	ldr	r2, [sp, #48]	; 0x30
   11bae:	rsb	r2, r2, #54	; 0x36
   11bb2:	b.n	1196a <_dtoa_r+0x9aa>
   11bb4:	movs	r0, #2
   11bb6:	vmov.f64	d6, d8
   11bba:	b.w	1124e <_dtoa_r+0x28e>
   11bbe:	cmp.w	r9, #0
   11bc2:	beq.w	1197a <_dtoa_r+0x9ba>
   11bc6:	ldr	r2, [sp, #44]	; 0x2c
   11bc8:	cmp	r2, #0
   11bca:	ble.w	113b4 <_dtoa_r+0x3f4>
   11bce:	vmov.f64	d4, #36	; 0x41200000  10.0
   11bd2:	vmul.f64	d6, d6, d4
   11bd6:	adds	r0, #1
   11bd8:	vmov	s15, r0
   11bdc:	ldr	r3, [sp, #16]
   11bde:	vcvt.f64.s32	d5, s15
   11be2:	vmov.f64	d7, #28	; 0x40e00000  7.0
   11be6:	vfma.f64	d7, d6, d5
   11bea:	vmov	ip, s15
   11bee:	vmov	r0, r1, d7
   11bf2:	subs	r6, r3, #1
   11bf4:	sub.w	r1, ip, #54525952	; 0x3400000
   11bf8:	b.w	1128a <_dtoa_r+0x2ca>
   11bfc:	ldr	r3, [sp, #16]
   11bfe:	adds	r3, #1
   11c00:	str	r3, [sp, #16]
   11c02:	movs	r3, #49	; 0x31
   11c04:	b.w	1136a <_dtoa_r+0x3aa>
   11c08:	ldr	r3, [sp, #16]
   11c0a:	mov	fp, r7
   11c0c:	adds	r3, #1
   11c0e:	str	r3, [sp, #16]
   11c10:	movs	r3, #57	; 0x39
   11c12:	mov	r7, r6
   11c14:	strb.w	r3, [fp], #1
   11c18:	mov	r6, r8
   11c1a:	b.n	115e0 <_dtoa_r+0x620>
   11c1c:	mov.w	sl, #0
   11c20:	mov	r6, sl
   11c22:	b.n	118cc <_dtoa_r+0x90c>
   11c24:	str	r2, [sp, #32]
   11c26:	b.n	11520 <_dtoa_r+0x560>
   11c28:	adds	r3, r6, #1
   11c2a:	str	r3, [sp, #16]
   11c2c:	mov	r9, r1
   11c2e:	b.n	11620 <_dtoa_r+0x660>
   11c30:	bne.w	11a78 <_dtoa_r+0xab8>
   11c34:	lsls	r2, r3, #31
   11c36:	bpl.w	11a78 <_dtoa_r+0xab8>
   11c3a:	b.n	11a6e <_dtoa_r+0xaae>
   11c3c:	cmp	r3, #57	; 0x39
   11c3e:	beq.n	11c08 <_dtoa_r+0xc48>
   11c40:	cmp.w	r9, #0
   11c44:	bgt.w	11a74 <_dtoa_r+0xab4>
   11c48:	b.n	11a78 <_dtoa_r+0xab8>
   11c4a:	ldr	r3, [sp, #4]
   11c4c:	cmp	r3, #2
   11c4e:	bgt.w	118a2 <_dtoa_r+0x8e2>
   11c52:	str	r7, [sp, #16]
   11c54:	b.n	117cc <_dtoa_r+0x80c>
   11c56:	mov	r1, r0
   11c58:	b.n	11b76 <_dtoa_r+0xbb6>
   11c5a:	ldr	r3, [sp, #4]
   11c5c:	cmp	r3, #2
   11c5e:	bgt.w	118a2 <_dtoa_r+0x8e2>
   11c62:	ldr.w	r9, [sp, #44]	; 0x2c
   11c66:	str	r7, [sp, #16]
   11c68:	b.n	116c2 <_dtoa_r+0x702>
   11c6a:	movs	r0, #2
   11c6c:	b.w	1124e <_dtoa_r+0x28e>
   11c70:	ldr	r3, [pc, #44]	; (11ca0 <_dtoa_r+0xce0>)
   11c72:	ldr	r0, [pc, #48]	; (11ca4 <_dtoa_r+0xce4>)
   11c74:	movs	r2, #0
   11c76:	movw	r1, #431	; 0x1af
   11c7a:	bl	10de0 <__assert_func>
   11c7e:	ldr	r3, [pc, #32]	; (11ca0 <_dtoa_r+0xce0>)
   11c80:	ldr	r0, [pc, #32]	; (11ca4 <_dtoa_r+0xce4>)
   11c82:	mov	r2, r7
   11c84:	movw	r1, #751	; 0x2ef
   11c88:	bl	10de0 <__assert_func>
   11c8c:	ldr	r3, [pc, #24]	; (11ca8 <_dtoa_r+0xce8>)
   11c8e:	str	r3, [sp, #0]
   11c90:	b.w	11038 <_dtoa_r+0x78>
   11c94:	ldr	r3, [sp, #8]
   11c96:	str	r3, [sp, #32]
   11c98:	b.n	1168a <_dtoa_r+0x6ca>
   11c9a:	nop
   11c9c:	.word	0x200003a8
   11ca0:	.word	0x20000c78
   11ca4:	.word	0x20000dfc
   11ca8:	.word	0x20000dec

00011cac <_wcrtomb_r>:
   11cac:	push	{r4, r5, r6, lr}
   11cae:	mov	r5, r0
   11cb0:	sub	sp, #16
   11cb2:	cbz	r3, 11ccc <_wcrtomb_r+0x20>
   11cb4:	mov	r4, r3
   11cb6:	cbz	r1, 11cd4 <_wcrtomb_r+0x28>
   11cb8:	ldr	r3, [pc, #56]	; (11cf4 <_wcrtomb_r+0x48>)
   11cba:	mov	r0, r5
   11cbc:	ldr.w	r6, [r3, #224]	; 0xe0
   11cc0:	mov	r3, r4
   11cc2:	blx	r6
   11cc4:	adds	r3, r0, #1
   11cc6:	beq.n	11ce8 <_wcrtomb_r+0x3c>
   11cc8:	add	sp, #16
   11cca:	pop	{r4, r5, r6, pc}
   11ccc:	add.w	r4, r0, #260	; 0x104
   11cd0:	cmp	r1, #0
   11cd2:	bne.n	11cb8 <_wcrtomb_r+0xc>
   11cd4:	ldr	r2, [pc, #28]	; (11cf4 <_wcrtomb_r+0x48>)
   11cd6:	mov	r3, r4
   11cd8:	ldr.w	r6, [r2, #224]	; 0xe0
   11cdc:	mov	r0, r5
   11cde:	mov	r2, r1
   11ce0:	add	r1, sp, #4
   11ce2:	blx	r6
   11ce4:	adds	r3, r0, #1
   11ce6:	bne.n	11cc8 <_wcrtomb_r+0x1c>
   11ce8:	movs	r2, #0
   11cea:	movs	r3, #138	; 0x8a
   11cec:	str	r2, [r4, #0]
   11cee:	str	r3, [r5, #0]
   11cf0:	add	sp, #16
   11cf2:	pop	{r4, r5, r6, pc}
   11cf4:	.word	0x2000149c

00011cf8 <_wcsrtombs_r>:
   11cf8:	push	{r4, lr}
   11cfa:	sub	sp, #8
   11cfc:	ldr	r4, [sp, #16]
   11cfe:	strd	r3, r4, [sp]
   11d02:	mov.w	r3, #4294967295
   11d06:	bl	13498 <_wcsnrtombs_r>
   11d0a:	add	sp, #8
   11d0c:	pop	{r4, pc}
   11d0e:	nop

00011d10 <fiprintf>:
   11d10:	push	{r1, r2, r3}
   11d12:	push	{r4, lr}
   11d14:	sub	sp, #12
   11d16:	add	r3, sp, #20
   11d18:	ldr	r4, [pc, #24]	; (11d34 <fiprintf+0x24>)
   11d1a:	ldr.w	r2, [r3], #4
   11d1e:	str	r3, [sp, #4]
   11d20:	mov	r1, r0
   11d22:	ldr	r0, [r4, #0]
   11d24:	bl	11eb0 <_vfiprintf_r>
   11d28:	add	sp, #12
   11d2a:	ldmia.w	sp!, {r4, lr}
   11d2e:	add	sp, #12
   11d30:	bx	lr
   11d32:	nop
   11d34:	.word	0x20001a24

00011d38 <__ssprint_r>:
   11d38:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11d3c:	ldr	r3, [r2, #8]
   11d3e:	ldr	r7, [r2, #0]
   11d40:	sub	sp, #12
   11d42:	mov	sl, r2
   11d44:	cmp	r3, #0
   11d46:	beq.n	11e2a <__ssprint_r+0xf2>
   11d48:	mov	r9, r0
   11d4a:	ldr	r2, [r1, #8]
   11d4c:	ldr	r0, [r1, #0]
   11d4e:	mov	r4, r1
   11d50:	adds	r7, #8
   11d52:	b.n	11ddc <__ssprint_r+0xa4>
   11d54:	ldrh	r3, [r4, #12]
   11d56:	tst.w	r3, #1152	; 0x480
   11d5a:	beq.n	11dba <__ssprint_r+0x82>
   11d5c:	ldrd	r1, r6, [r4, #16]
   11d60:	sub.w	r8, r0, r1
   11d64:	add.w	r6, r6, r6, lsl #1
   11d68:	add.w	r6, r6, r6, lsr #31
   11d6c:	add.w	r0, r8, #1
   11d70:	asrs	r6, r6, #1
   11d72:	add	r0, r5
   11d74:	cmp	r0, r6
   11d76:	mov	r2, r6
   11d78:	itt	hi
   11d7a:	movhi	r6, r0
   11d7c:	movhi	r2, r6
   11d7e:	lsls	r3, r3, #21
   11d80:	bpl.n	11df2 <__ssprint_r+0xba>
   11d82:	mov	r1, r2
   11d84:	mov	r0, r9
   11d86:	bl	d260 <_malloc_r>
   11d8a:	str	r0, [sp, #4]
   11d8c:	cmp	r0, #0
   11d8e:	beq.n	11e06 <__ssprint_r+0xce>
   11d90:	mov	r2, r8
   11d92:	ldr	r1, [r4, #16]
   11d94:	bl	a0d4 <memcpy>
   11d98:	ldrh	r2, [r4, #12]
   11d9a:	ldr	r3, [sp, #4]
   11d9c:	bic.w	r2, r2, #1152	; 0x480
   11da0:	orr.w	r2, r2, #128	; 0x80
   11da4:	strh	r2, [r4, #12]
   11da6:	sub.w	r2, r6, r8
   11daa:	add.w	r0, r3, r8
   11dae:	str	r6, [r4, #20]
   11db0:	str	r2, [r4, #8]
   11db2:	str	r3, [r4, #16]
   11db4:	str	r0, [r4, #0]
   11db6:	mov	r6, r5
   11db8:	mov	r8, r5
   11dba:	mov	r2, r8
   11dbc:	mov	r1, fp
   11dbe:	bl	df7c <memmove>
   11dc2:	ldr.w	r3, [sl, #8]
   11dc6:	ldr	r2, [r4, #8]
   11dc8:	ldr	r0, [r4, #0]
   11dca:	subs	r2, r2, r6
   11dcc:	add	r0, r8
   11dce:	subs	r3, r3, r5
   11dd0:	str	r2, [r4, #8]
   11dd2:	str	r0, [r4, #0]
   11dd4:	str.w	r3, [sl, #8]
   11dd8:	cbz	r3, 11e2a <__ssprint_r+0xf2>
   11dda:	adds	r7, #8
   11ddc:	ldrd	fp, r5, [r7, #-8]
   11de0:	cmp	r5, #0
   11de2:	beq.n	11dda <__ssprint_r+0xa2>
   11de4:	cmp	r2, r5
   11de6:	mov	r6, r2
   11de8:	mov	r8, r2
   11dea:	bls.n	11d54 <__ssprint_r+0x1c>
   11dec:	mov	r6, r5
   11dee:	mov	r8, r5
   11df0:	b.n	11dba <__ssprint_r+0x82>
   11df2:	mov	r0, r9
   11df4:	bl	d7d8 <_realloc_r>
   11df8:	mov	r3, r0
   11dfa:	cmp	r0, #0
   11dfc:	bne.n	11da6 <__ssprint_r+0x6e>
   11dfe:	ldr	r1, [r4, #16]
   11e00:	mov	r0, r9
   11e02:	bl	e604 <_free_r>
   11e06:	ldrh	r3, [r4, #12]
   11e08:	movs	r2, #12
   11e0a:	orr.w	r3, r3, #64	; 0x40
   11e0e:	str.w	r2, [r9]
   11e12:	mov.w	r0, #4294967295
   11e16:	strh	r3, [r4, #12]
   11e18:	movs	r2, #0
   11e1a:	movs	r3, #0
   11e1c:	str.w	r2, [sl, #8]
   11e20:	str.w	r3, [sl, #4]
   11e24:	add	sp, #12
   11e26:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11e2a:	movs	r0, #0
   11e2c:	movs	r3, #0
   11e2e:	str.w	r3, [sl, #4]
   11e32:	add	sp, #12
   11e34:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00011e38 <__sprint_r.part.0>:
   11e38:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11e3c:	ldr	r3, [r1, #100]	; 0x64
   11e3e:	lsls	r4, r3, #18
   11e40:	mov	r8, r2
   11e42:	bpl.n	11ea0 <__sprint_r.part.0+0x68>
   11e44:	ldr	r3, [r2, #8]
   11e46:	ldr	r2, [r2, #0]
   11e48:	cbz	r3, 11e9c <__sprint_r.part.0+0x64>
   11e4a:	mov	fp, r1
   11e4c:	mov	r6, r0
   11e4e:	add.w	r9, r2, #8
   11e52:	ldrd	r5, sl, [r9, #-8]
   11e56:	movs.w	r7, sl, lsr #2
   11e5a:	beq.n	11e88 <__sprint_r.part.0+0x50>
   11e5c:	subs	r5, #4
   11e5e:	movs	r4, #0
   11e60:	b.n	11e66 <__sprint_r.part.0+0x2e>
   11e62:	cmp	r7, r4
   11e64:	beq.n	11e84 <__sprint_r.part.0+0x4c>
   11e66:	ldr.w	r1, [r5, #4]!
   11e6a:	mov	r2, fp
   11e6c:	mov	r0, r6
   11e6e:	bl	13328 <_fputwc_r>
   11e72:	adds	r3, r0, #1
   11e74:	add.w	r4, r4, #1
   11e78:	bne.n	11e62 <__sprint_r.part.0+0x2a>
   11e7a:	movs	r3, #0
   11e7c:	strd	r3, r3, [r8, #4]
   11e80:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11e84:	ldr.w	r3, [r8, #8]
   11e88:	bic.w	sl, sl, #3
   11e8c:	sub.w	r3, r3, sl
   11e90:	str.w	r3, [r8, #8]
   11e94:	add.w	r9, r9, #8
   11e98:	cmp	r3, #0
   11e9a:	bne.n	11e52 <__sprint_r.part.0+0x1a>
   11e9c:	movs	r0, #0
   11e9e:	b.n	11e7a <__sprint_r.part.0+0x42>
   11ea0:	bl	12ebc <__sfvwrite_r>
   11ea4:	movs	r3, #0
   11ea6:	strd	r3, r3, [r8, #4]
   11eaa:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11eae:	nop

00011eb0 <_vfiprintf_r>:
   11eb0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11eb4:	vpush	{d8}
   11eb8:	sub	sp, #276	; 0x114
   11eba:	add.w	sl, sp, #80	; 0x50
   11ebe:	mov	fp, r0
   11ec0:	vmov	s16, r1
   11ec4:	mov	r6, r2
   11ec6:	movs	r1, #0
   11ec8:	movs	r2, #8
   11eca:	mov	r0, sl
   11ecc:	mov	r4, r3
   11ece:	str	r3, [sp, #28]
   11ed0:	bl	e074 <memset>
   11ed4:	cmp.w	fp, #0
   11ed8:	beq.n	11ee4 <_vfiprintf_r+0x34>
   11eda:	ldr.w	r3, [fp, #52]	; 0x34
   11ede:	cmp	r3, #0
   11ee0:	beq.w	12c24 <_vfiprintf_r+0xd74>
   11ee4:	vmov	r2, s16
   11ee8:	ldr	r3, [r2, #100]	; 0x64
   11eea:	lsls	r3, r3, #31
   11eec:	bpl.w	12916 <_vfiprintf_r+0xa66>
   11ef0:	ldrsh.w	r1, [r2, #12]
   11ef4:	uxth	r2, r1
   11ef6:	lsls	r5, r2, #18
   11ef8:	bmi.n	11f12 <_vfiprintf_r+0x62>
   11efa:	vmov	r3, s16
   11efe:	orr.w	r1, r1, #8192	; 0x2000
   11f02:	strh	r1, [r3, #12]
   11f04:	ldr	r3, [r3, #100]	; 0x64
   11f06:	uxth	r2, r1
   11f08:	vmov	r1, s16
   11f0c:	bic.w	r3, r3, #8192	; 0x2000
   11f10:	str	r3, [r1, #100]	; 0x64
   11f12:	lsls	r0, r2, #28
   11f14:	bpl.w	12122 <_vfiprintf_r+0x272>
   11f18:	vmov	r3, s16
   11f1c:	ldr	r3, [r3, #16]
   11f1e:	cmp	r3, #0
   11f20:	beq.w	12122 <_vfiprintf_r+0x272>
   11f24:	and.w	r3, r2, #26
   11f28:	cmp	r3, #10
   11f2a:	beq.w	12142 <_vfiprintf_r+0x292>
   11f2e:	movs	r3, #0
   11f30:	strd	r3, r3, [sp, #100]	; 0x64
   11f34:	strd	r3, r3, [sp, #52]	; 0x34
   11f38:	add	r2, sp, #108	; 0x6c
   11f3a:	str	r3, [sp, #48]	; 0x30
   11f3c:	str	r2, [sp, #96]	; 0x60
   11f3e:	mov	r9, r2
   11f40:	str	r3, [sp, #44]	; 0x2c
   11f42:	str	r3, [sp, #20]
   11f44:	mov	r8, r6
   11f46:	mov	r4, r8
   11f48:	ldr	r3, [pc, #672]	; (121ec <_vfiprintf_r+0x33c>)
   11f4a:	ldr.w	r5, [r3, #228]	; 0xe4
   11f4e:	bl	e208 <__locale_mb_cur_max>
   11f52:	mov	r2, r4
   11f54:	mov	r3, r0
   11f56:	add	r1, sp, #72	; 0x48
   11f58:	str.w	sl, [sp]
   11f5c:	mov	r0, fp
   11f5e:	blx	r5
   11f60:	cmp	r0, #0
   11f62:	beq.w	121f0 <_vfiprintf_r+0x340>
   11f66:	blt.w	121dc <_vfiprintf_r+0x32c>
   11f6a:	ldr	r2, [sp, #72]	; 0x48
   11f6c:	cmp	r2, #37	; 0x25
   11f6e:	mov	r3, r0
   11f70:	beq.n	11f76 <_vfiprintf_r+0xc6>
   11f72:	add	r4, r3
   11f74:	b.n	11f48 <_vfiprintf_r+0x98>
   11f76:	subs.w	r6, r4, r8
   11f7a:	mov	r5, r0
   11f7c:	bne.w	121f8 <_vfiprintf_r+0x348>
   11f80:	movs	r3, #0
   11f82:	ldrb	r1, [r4, #1]
   11f84:	strb.w	r3, [sp, #67]	; 0x43
   11f88:	add.w	r8, r4, #1
   11f8c:	str	r3, [sp, #24]
   11f8e:	mov.w	r7, #4294967295
   11f92:	mov	r6, r3
   11f94:	movs	r4, #43	; 0x2b
   11f96:	add.w	r8, r8, #1
   11f9a:	sub.w	r3, r1, #32
   11f9e:	cmp	r3, #90	; 0x5a
   11fa0:	bhi.w	12294 <_vfiprintf_r+0x3e4>
   11fa4:	tbh	[pc, r3, lsl #1]
   11fa8:	.word	0x017602b5
   11fac:	.word	0x02b00176
   11fb0:	.word	0x01760176
   11fb4:	.word	0x006a0176
   11fb8:	.word	0x01760176
   11fbc:	.word	0x028d027d
   11fc0:	.word	0x02880176
   11fc4:	.word	0x01760297
   11fc8:	.word	0x005b0292
   11fcc:	.word	0x005b005b
   11fd0:	.word	0x005b005b
   11fd4:	.word	0x005b005b
   11fd8:	.word	0x005b005b
   11fdc:	.word	0x01760176
   11fe0:	.word	0x01760176
   11fe4:	.word	0x01760176
   11fe8:	.word	0x01760176
   11fec:	.word	0x025c0176
   11ff0:	.word	0x01760084
   11ff4:	.word	0x01760176
   11ff8:	.word	0x01760176
   11ffc:	.word	0x01760176
   12000:	.word	0x01760176
   12004:	.word	0x00e80176
   12008:	.word	0x01760176
   1200c:	.word	0x02330176
   12010:	.word	0x02da0176
   12014:	.word	0x01760176
   12018:	.word	0x0176058b
   1201c:	.word	0x01760176
   12020:	.word	0x01760176
   12024:	.word	0x01760176
   12028:	.word	0x01760176
   1202c:	.word	0x025c0176
   12030:	.word	0x01760086
   12034:	.word	0x01760176
   12038:	.word	0x008602cd
   1203c:	.word	0x0176007f
   12040:	.word	0x017602c0
   12044:	.word	0x00ea02fd
   12048:	.word	0x007f02ed
   1204c:	.word	0x02330176
   12050:	.word	0x0569007c
   12054:	.word	0x01760176
   12058:	.word	0x0176056b
   1205c:	.short	0x007c
   1205e:	sub.w	r3, r1, #48	; 0x30
   12062:	movs	r2, #0
   12064:	ldrb.w	r1, [r8], #1
   12068:	add.w	r2, r2, r2, lsl #2
   1206c:	add.w	r2, r3, r2, lsl #1
   12070:	sub.w	r3, r1, #48	; 0x30
   12074:	cmp	r3, #9
   12076:	bls.n	12064 <_vfiprintf_r+0x1b4>
   12078:	str	r2, [sp, #24]
   1207a:	b.n	11f9a <_vfiprintf_r+0xea>
   1207c:	mov	r0, fp
   1207e:	bl	10d60 <_localeconv_r>
   12082:	ldr	r3, [r0, #4]
   12084:	str	r3, [sp, #52]	; 0x34
   12086:	mov	r0, r3
   12088:	bl	e400 <strlen>
   1208c:	str	r0, [sp, #56]	; 0x38
   1208e:	mov	r5, r0
   12090:	mov	r0, fp
   12092:	bl	10d60 <_localeconv_r>
   12096:	ldr	r3, [r0, #8]
   12098:	str	r3, [sp, #44]	; 0x2c
   1209a:	cmp	r5, #0
   1209c:	bne.w	12a4c <_vfiprintf_r+0xb9c>
   120a0:	ldrb.w	r1, [r8]
   120a4:	b.n	11f96 <_vfiprintf_r+0xe6>
   120a6:	ldrb.w	r1, [r8]
   120aa:	orr.w	r6, r6, #32
   120ae:	b.n	11f96 <_vfiprintf_r+0xe6>
   120b0:	orr.w	r6, r6, #16
   120b4:	lsls	r4, r6, #26
   120b6:	bpl.w	123d6 <_vfiprintf_r+0x526>
   120ba:	ldr	r3, [sp, #28]
   120bc:	adds	r3, #7
   120be:	bic.w	r3, r3, #7
   120c2:	mov	r2, r3
   120c4:	ldr	r1, [r3, #4]
   120c6:	ldr.w	r3, [r2], #8
   120ca:	str	r2, [sp, #28]
   120cc:	mov	r2, r1
   120ce:	cmp	r1, #0
   120d0:	blt.w	129b4 <_vfiprintf_r+0xb04>
   120d4:	adds	r1, r7, #1
   120d6:	beq.w	12c1e <_vfiprintf_r+0xd6e>
   120da:	bic.w	r1, r6, #128	; 0x80
   120de:	str	r1, [sp, #12]
   120e0:	orrs.w	r1, r3, r2
   120e4:	beq.w	12966 <_vfiprintf_r+0xab6>
   120e8:	cmp	r3, #10
   120ea:	sbcs.w	r1, r2, #0
   120ee:	bcs.w	12b74 <_vfiprintf_r+0xcc4>
   120f2:	adds	r3, #48	; 0x30
   120f4:	strb.w	r3, [sp, #271]	; 0x10f
   120f8:	ldr	r6, [sp, #12]
   120fa:	movs	r3, #1
   120fc:	str	r3, [sp, #16]
   120fe:	addw	r4, sp, #271	; 0x10f
   12102:	ldr	r3, [sp, #16]
   12104:	cmp	r3, r7
   12106:	it	lt
   12108:	movlt	r3, r7
   1210a:	str	r3, [sp, #12]
   1210c:	movs	r3, #0
   1210e:	str	r3, [sp, #32]
   12110:	ldrb.w	r3, [sp, #67]	; 0x43
   12114:	cmp	r3, #0
   12116:	beq.w	122b0 <_vfiprintf_r+0x400>
   1211a:	ldr	r3, [sp, #12]
   1211c:	adds	r3, #1
   1211e:	str	r3, [sp, #12]
   12120:	b.n	122b0 <_vfiprintf_r+0x400>
   12122:	vmov	r1, s16
   12126:	mov	r0, fp
   12128:	vmov	r5, s16
   1212c:	bl	131b0 <__swsetup_r>
   12130:	cmp	r0, #0
   12132:	bne.w	12dda <_vfiprintf_r+0xf2a>
   12136:	ldrh	r2, [r5, #12]
   12138:	and.w	r3, r2, #26
   1213c:	cmp	r3, #10
   1213e:	bne.w	11f2e <_vfiprintf_r+0x7e>
   12142:	vmov	r1, s16
   12146:	ldrsh.w	r3, [r1, #14]
   1214a:	cmp	r3, #0
   1214c:	blt.w	11f2e <_vfiprintf_r+0x7e>
   12150:	ldr	r3, [r1, #100]	; 0x64
   12152:	lsls	r3, r3, #31
   12154:	bmi.n	1215c <_vfiprintf_r+0x2ac>
   12156:	lsls	r7, r2, #22
   12158:	bpl.w	12d80 <_vfiprintf_r+0xed0>
   1215c:	vmov	r1, s16
   12160:	mov	r3, r4
   12162:	mov	r2, r6
   12164:	mov	r0, fp
   12166:	bl	12e3c <__sbprintf>
   1216a:	str	r0, [sp, #20]
   1216c:	ldr	r0, [sp, #20]
   1216e:	add	sp, #276	; 0x114
   12170:	vpop	{d8}
   12174:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12178:	orr.w	r6, r6, #16
   1217c:	ands.w	r2, r6, #32
   12180:	beq.w	123f0 <_vfiprintf_r+0x540>
   12184:	ldr	r3, [sp, #28]
   12186:	adds	r3, #7
   12188:	bic.w	r3, r3, #7
   1218c:	mov	r1, r3
   1218e:	ldr	r2, [r3, #4]
   12190:	ldr.w	r3, [r1], #8
   12194:	str	r1, [sp, #28]
   12196:	bic.w	r1, r6, #1024	; 0x400
   1219a:	str	r1, [sp, #12]
   1219c:	movs	r1, #0
   1219e:	movs	r0, #0
   121a0:	strb.w	r0, [sp, #67]	; 0x43
   121a4:	adds	r0, r7, #1
   121a6:	beq.w	125ca <_vfiprintf_r+0x71a>
   121aa:	ldr	r0, [sp, #12]
   121ac:	bic.w	r6, r0, #128	; 0x80
   121b0:	orrs.w	r0, r3, r2
   121b4:	bne.w	125c8 <_vfiprintf_r+0x718>
   121b8:	cmp	r7, #0
   121ba:	bne.w	12c2e <_vfiprintf_r+0xd7e>
   121be:	cmp	r1, #0
   121c0:	bne.w	1296e <_vfiprintf_r+0xabe>
   121c4:	ldr	r3, [sp, #12]
   121c6:	ands.w	r3, r3, #1
   121ca:	str	r3, [sp, #16]
   121cc:	beq.w	129f2 <_vfiprintf_r+0xb42>
   121d0:	movs	r3, #48	; 0x30
   121d2:	strb.w	r3, [sp, #271]	; 0x10f
   121d6:	addw	r4, sp, #271	; 0x10f
   121da:	b.n	12102 <_vfiprintf_r+0x252>
   121dc:	movs	r2, #8
   121de:	movs	r1, #0
   121e0:	mov	r0, sl
   121e2:	bl	e074 <memset>
   121e6:	movs	r3, #1
   121e8:	add	r4, r3
   121ea:	b.n	11f48 <_vfiprintf_r+0x98>
   121ec:	.word	0x2000149c
   121f0:	subs.w	r6, r4, r8
   121f4:	mov	r5, r0
   121f6:	beq.n	12230 <_vfiprintf_r+0x380>
   121f8:	ldr	r3, [sp, #100]	; 0x64
   121fa:	ldr	r2, [sp, #104]	; 0x68
   121fc:	adds	r3, #1
   121fe:	add	r2, r6
   12200:	cmp	r3, #7
   12202:	strd	r8, r6, [r9]
   12206:	str	r2, [sp, #104]	; 0x68
   12208:	str	r3, [sp, #100]	; 0x64
   1220a:	ble.n	12246 <_vfiprintf_r+0x396>
   1220c:	cmp	r2, #0
   1220e:	beq.w	1295e <_vfiprintf_r+0xaae>
   12212:	vmov	r1, s16
   12216:	add	r2, sp, #96	; 0x60
   12218:	mov	r0, fp
   1221a:	bl	11e38 <__sprint_r.part.0>
   1221e:	cbnz	r0, 1226a <_vfiprintf_r+0x3ba>
   12220:	add.w	r9, sp, #108	; 0x6c
   12224:	ldr	r3, [sp, #20]
   12226:	add	r3, r6
   12228:	str	r3, [sp, #20]
   1222a:	cmp	r5, #0
   1222c:	bne.w	11f80 <_vfiprintf_r+0xd0>
   12230:	ldr	r3, [sp, #104]	; 0x68
   12232:	cmp	r3, #0
   12234:	bne.w	12dba <_vfiprintf_r+0xf0a>
   12238:	vmov	r3, s16
   1223c:	movs	r2, #0
   1223e:	ldrsh.w	r3, [r3, #12]
   12242:	str	r2, [sp, #100]	; 0x64
   12244:	b.n	12272 <_vfiprintf_r+0x3c2>
   12246:	add.w	r9, r9, #8
   1224a:	b.n	12224 <_vfiprintf_r+0x374>
   1224c:	vmov	r1, s16
   12250:	add	r2, sp, #96	; 0x60
   12252:	mov	r0, fp
   12254:	bl	11e38 <__sprint_r.part.0>
   12258:	cmp	r0, #0
   1225a:	beq.w	123aa <_vfiprintf_r+0x4fa>
   1225e:	ldr	r3, [sp, #32]
   12260:	cbz	r3, 1226a <_vfiprintf_r+0x3ba>
   12262:	ldr	r1, [sp, #32]
   12264:	mov	r0, fp
   12266:	bl	e604 <_free_r>
   1226a:	vmov	r3, s16
   1226e:	ldrsh.w	r3, [r3, #12]
   12272:	vmov	r2, s16
   12276:	ldr	r2, [r2, #100]	; 0x64
   12278:	tst.w	r2, #1
   1227c:	uxth	r2, r3
   1227e:	beq.w	123c2 <_vfiprintf_r+0x512>
   12282:	lsls	r0, r2, #25
   12284:	bmi.w	12dec <_vfiprintf_r+0xf3c>
   12288:	ldr	r0, [sp, #20]
   1228a:	add	sp, #276	; 0x114
   1228c:	vpop	{d8}
   12290:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12294:	cmp	r1, #0
   12296:	beq.n	12230 <_vfiprintf_r+0x380>
   12298:	movs	r3, #0
   1229a:	strb.w	r3, [sp, #67]	; 0x43
   1229e:	movs	r3, #1
   122a0:	strd	r3, r3, [sp, #12]
   122a4:	strb.w	r1, [sp, #172]	; 0xac
   122a8:	add	r4, sp, #172	; 0xac
   122aa:	movs	r3, #0
   122ac:	str	r3, [sp, #32]
   122ae:	mov	r7, r3
   122b0:	ands.w	r3, r6, #2
   122b4:	str	r3, [sp, #36]	; 0x24
   122b6:	beq.n	122be <_vfiprintf_r+0x40e>
   122b8:	ldr	r3, [sp, #12]
   122ba:	adds	r3, #2
   122bc:	str	r3, [sp, #12]
   122be:	ands.w	r3, r6, #132	; 0x84
   122c2:	str	r3, [sp, #40]	; 0x28
   122c4:	bne.n	122d2 <_vfiprintf_r+0x422>
   122c6:	ldr	r3, [sp, #24]
   122c8:	ldr	r2, [sp, #12]
   122ca:	subs	r5, r3, r2
   122cc:	cmp	r5, #0
   122ce:	bgt.w	127c8 <_vfiprintf_r+0x918>
   122d2:	ldrd	r0, r3, [sp, #100]	; 0x64
   122d6:	adds	r1, r0, #1
   122d8:	ldrb.w	r2, [sp, #67]	; 0x43
   122dc:	cbz	r2, 12300 <_vfiprintf_r+0x450>
   122de:	movs	r2, #1
   122e0:	adds	r3, #1
   122e2:	str.w	r2, [r9, #4]
   122e6:	cmp	r1, #7
   122e8:	add.w	r2, sp, #67	; 0x43
   122ec:	strd	r1, r3, [sp, #100]	; 0x64
   122f0:	str.w	r2, [r9]
   122f4:	bgt.w	1278c <_vfiprintf_r+0x8dc>
   122f8:	mov	r0, r1
   122fa:	add.w	r9, r9, #8
   122fe:	adds	r1, #1
   12300:	ldr	r2, [sp, #36]	; 0x24
   12302:	cbz	r2, 1233e <_vfiprintf_r+0x48e>
   12304:	add	r2, sp, #68	; 0x44
   12306:	adds	r3, #2
   12308:	str.w	r2, [r9]
   1230c:	cmp	r1, #7
   1230e:	mov.w	r2, #2
   12312:	strd	r1, r3, [sp, #100]	; 0x64
   12316:	str.w	r2, [r9, #4]
   1231a:	ble.w	127be <_vfiprintf_r+0x90e>
   1231e:	cmp	r3, #0
   12320:	beq.w	129aa <_vfiprintf_r+0xafa>
   12324:	vmov	r1, s16
   12328:	add	r2, sp, #96	; 0x60
   1232a:	mov	r0, fp
   1232c:	bl	11e38 <__sprint_r.part.0>
   12330:	cmp	r0, #0
   12332:	bne.n	1225e <_vfiprintf_r+0x3ae>
   12334:	ldrd	r0, r3, [sp, #100]	; 0x64
   12338:	add.w	r9, sp, #108	; 0x6c
   1233c:	adds	r1, r0, #1
   1233e:	ldr	r2, [sp, #40]	; 0x28
   12340:	cmp	r2, #128	; 0x80
   12342:	beq.w	1264e <_vfiprintf_r+0x79e>
   12346:	ldr	r2, [sp, #16]
   12348:	subs	r5, r7, r2
   1234a:	cmp	r5, #0
   1234c:	bgt.w	126fe <_vfiprintf_r+0x84e>
   12350:	ldr	r2, [sp, #16]
   12352:	str.w	r4, [r9]
   12356:	add	r3, r2
   12358:	cmp	r1, #7
   1235a:	strd	r1, r3, [sp, #100]	; 0x64
   1235e:	str.w	r2, [r9, #4]
   12362:	ble.w	12642 <_vfiprintf_r+0x792>
   12366:	cmp	r3, #0
   12368:	beq.w	12856 <_vfiprintf_r+0x9a6>
   1236c:	vmov	r1, s16
   12370:	add	r2, sp, #96	; 0x60
   12372:	mov	r0, fp
   12374:	bl	11e38 <__sprint_r.part.0>
   12378:	cmp	r0, #0
   1237a:	bne.w	1225e <_vfiprintf_r+0x3ae>
   1237e:	ldr	r3, [sp, #104]	; 0x68
   12380:	add.w	r9, sp, #108	; 0x6c
   12384:	lsls	r5, r6, #29
   12386:	bpl.n	12394 <_vfiprintf_r+0x4e4>
   12388:	ldr	r2, [sp, #24]
   1238a:	ldr	r1, [sp, #12]
   1238c:	subs	r4, r2, r1
   1238e:	cmp	r4, #0
   12390:	bgt.w	1286a <_vfiprintf_r+0x9ba>
   12394:	ldrd	r2, r1, [sp, #20]
   12398:	ldr	r0, [sp, #12]
   1239a:	cmp	r1, r0
   1239c:	ite	ge
   1239e:	addge	r2, r2, r1
   123a0:	addlt	r2, r2, r0
   123a2:	str	r2, [sp, #20]
   123a4:	cmp	r3, #0
   123a6:	bne.w	1224c <_vfiprintf_r+0x39c>
   123aa:	ldr	r1, [sp, #32]
   123ac:	movs	r3, #0
   123ae:	str	r3, [sp, #100]	; 0x64
   123b0:	cmp	r1, #0
   123b2:	beq.w	12648 <_vfiprintf_r+0x798>
   123b6:	mov	r0, fp
   123b8:	bl	e604 <_free_r>
   123bc:	add.w	r9, sp, #108	; 0x6c
   123c0:	b.n	11f46 <_vfiprintf_r+0x96>
   123c2:	lsls	r4, r3, #22
   123c4:	bmi.w	12282 <_vfiprintf_r+0x3d2>
   123c8:	vmov	r4, s16
   123cc:	ldr	r0, [r4, #88]	; 0x58
   123ce:	bl	e340 <__retarget_lock_release_recursive>
   123d2:	ldrh	r2, [r4, #12]
   123d4:	b.n	12282 <_vfiprintf_r+0x3d2>
   123d6:	lsls	r0, r6, #27
   123d8:	ldr	r2, [sp, #28]
   123da:	bmi.w	12a1c <_vfiprintf_r+0xb6c>
   123de:	lsls	r1, r6, #25
   123e0:	bpl.w	12a16 <_vfiprintf_r+0xb66>
   123e4:	ldrsh.w	r3, [r2], #4
   123e8:	str	r2, [sp, #28]
   123ea:	asrs	r2, r3, #31
   123ec:	mov	r1, r2
   123ee:	b.n	120ce <_vfiprintf_r+0x21e>
   123f0:	ands.w	r3, r6, #16
   123f4:	ldr	r1, [sp, #28]
   123f6:	bne.w	12a0c <_vfiprintf_r+0xb5c>
   123fa:	ands.w	r0, r6, #64	; 0x40
   123fe:	beq.w	12a04 <_vfiprintf_r+0xb54>
   12402:	mov	r2, r3
   12404:	ldr.w	r3, [r1], #4
   12408:	str	r1, [sp, #28]
   1240a:	uxth	r3, r3
   1240c:	b.n	12196 <_vfiprintf_r+0x2e6>
   1240e:	ldr	r3, [sp, #28]
   12410:	mov	r2, r3
   12412:	movs	r3, #0
   12414:	strb.w	r3, [sp, #67]	; 0x43
   12418:	mov	r3, r2
   1241a:	ldr.w	r4, [r3], #4
   1241e:	str	r3, [sp, #12]
   12420:	cmp	r4, #0
   12422:	beq.w	12c4a <_vfiprintf_r+0xd9a>
   12426:	cmp	r1, #83	; 0x53
   12428:	beq.w	12af6 <_vfiprintf_r+0xc46>
   1242c:	ands.w	r5, r6, #16
   12430:	bne.w	12af6 <_vfiprintf_r+0xc46>
   12434:	adds	r3, r7, #1
   12436:	beq.w	12da0 <_vfiprintf_r+0xef0>
   1243a:	mov	r2, r7
   1243c:	mov	r1, r5
   1243e:	mov	r0, r4
   12440:	bl	e350 <memchr>
   12444:	str	r0, [sp, #32]
   12446:	cmp	r0, #0
   12448:	beq.w	12d8a <_vfiprintf_r+0xeda>
   1244c:	subs	r3, r0, r4
   1244e:	ldr	r2, [sp, #12]
   12450:	str	r3, [sp, #16]
   12452:	bic.w	r3, r3, r3, asr #31
   12456:	mov	r7, r5
   12458:	str	r2, [sp, #28]
   1245a:	str	r3, [sp, #12]
   1245c:	str	r5, [sp, #32]
   1245e:	b.n	12110 <_vfiprintf_r+0x260>
   12460:	cmp	r1, #67	; 0x43
   12462:	beq.n	1246a <_vfiprintf_r+0x5ba>
   12464:	lsls	r5, r6, #27
   12466:	bpl.w	12ac4 <_vfiprintf_r+0xc14>
   1246a:	ldr	r5, [sp, #28]
   1246c:	movs	r2, #8
   1246e:	movs	r1, #0
   12470:	add	r0, sp, #88	; 0x58
   12472:	add	r4, sp, #172	; 0xac
   12474:	bl	e074 <memset>
   12478:	add	r3, sp, #88	; 0x58
   1247a:	ldr.w	r2, [r5], #4
   1247e:	mov	r1, r4
   12480:	mov	r0, fp
   12482:	bl	11cac <_wcrtomb_r>
   12486:	mov	r3, r0
   12488:	adds	r3, #1
   1248a:	str	r0, [sp, #16]
   1248c:	beq.w	12df6 <_vfiprintf_r+0xf46>
   12490:	ldr	r3, [sp, #16]
   12492:	str	r5, [sp, #28]
   12494:	bic.w	r3, r3, r3, asr #31
   12498:	str	r3, [sp, #12]
   1249a:	movs	r3, #0
   1249c:	strb.w	r3, [sp, #67]	; 0x43
   124a0:	b.n	122aa <_vfiprintf_r+0x3fa>
   124a2:	ldr	r3, [sp, #28]
   124a4:	ldr.w	r2, [r3], #4
   124a8:	str	r2, [sp, #24]
   124aa:	cmp	r2, #0
   124ac:	bge.w	129e8 <_vfiprintf_r+0xb38>
   124b0:	ldr	r2, [sp, #24]
   124b2:	negs	r2, r2
   124b4:	strd	r2, r3, [sp, #24]
   124b8:	ldrb.w	r1, [r8]
   124bc:	orr.w	r6, r6, #4
   124c0:	b.n	11f96 <_vfiprintf_r+0xe6>
   124c2:	ldrb.w	r1, [r8]
   124c6:	strb.w	r4, [sp, #67]	; 0x43
   124ca:	b.n	11f96 <_vfiprintf_r+0xe6>
   124cc:	ldrb.w	r1, [r8]
   124d0:	orr.w	r6, r6, #128	; 0x80
   124d4:	b.n	11f96 <_vfiprintf_r+0xe6>
   124d6:	mov	r2, r8
   124d8:	ldrb.w	r1, [r2], #1
   124dc:	cmp	r1, #42	; 0x2a
   124de:	beq.w	12e0e <_vfiprintf_r+0xf5e>
   124e2:	sub.w	r3, r1, #48	; 0x30
   124e6:	cmp	r3, #9
   124e8:	mov	r8, r2
   124ea:	mov.w	r7, #0
   124ee:	bhi.w	11f9a <_vfiprintf_r+0xea>
   124f2:	ldrb.w	r1, [r8], #1
   124f6:	add.w	r7, r7, r7, lsl #2
   124fa:	add.w	r7, r3, r7, lsl #1
   124fe:	sub.w	r3, r1, #48	; 0x30
   12502:	cmp	r3, #9
   12504:	bls.n	124f2 <_vfiprintf_r+0x642>
   12506:	b.n	11f9a <_vfiprintf_r+0xea>
   12508:	ldrb.w	r1, [r8]
   1250c:	orr.w	r6, r6, #1
   12510:	b.n	11f96 <_vfiprintf_r+0xe6>
   12512:	ldrb.w	r3, [sp, #67]	; 0x43
   12516:	cmp	r3, #0
   12518:	bne.w	120a0 <_vfiprintf_r+0x1f0>
   1251c:	movs	r3, #32
   1251e:	ldrb.w	r1, [r8]
   12522:	strb.w	r3, [sp, #67]	; 0x43
   12526:	b.n	11f96 <_vfiprintf_r+0xe6>
   12528:	ldrb.w	r1, [r8]
   1252c:	cmp	r1, #108	; 0x6c
   1252e:	ittte	eq
   12530:	ldrbeq.w	r1, [r8, #1]
   12534:	orreq.w	r6, r6, #32
   12538:	addeq.w	r8, r8, #1
   1253c:	orrne.w	r6, r6, #16
   12540:	b.n	11f96 <_vfiprintf_r+0xe6>
   12542:	ldrb.w	r1, [r8]
   12546:	cmp	r1, #104	; 0x68
   12548:	ittte	eq
   1254a:	ldrbeq.w	r1, [r8, #1]
   1254e:	orreq.w	r6, r6, #512	; 0x200
   12552:	addeq.w	r8, r8, #1
   12556:	orrne.w	r6, r6, #64	; 0x40
   1255a:	b.n	11f96 <_vfiprintf_r+0xe6>
   1255c:	orr.w	r3, r6, #16
   12560:	str	r3, [sp, #12]
   12562:	ldr	r3, [sp, #12]
   12564:	ands.w	r2, r3, #32
   12568:	beq.w	12978 <_vfiprintf_r+0xac8>
   1256c:	ldr	r3, [sp, #28]
   1256e:	adds	r3, #7
   12570:	bic.w	r3, r3, #7
   12574:	mov	r1, r3
   12576:	ldr	r2, [r3, #4]
   12578:	ldr.w	r3, [r1], #8
   1257c:	str	r1, [sp, #28]
   1257e:	movs	r1, #1
   12580:	b.n	1219e <_vfiprintf_r+0x2ee>
   12582:	ldr	r2, [sp, #28]
   12584:	orr.w	r3, r6, #2
   12588:	str	r3, [sp, #12]
   1258a:	ldr.w	r3, [r2], #4
   1258e:	str	r2, [sp, #28]
   12590:	movw	r2, #30768	; 0x7830
   12594:	strh.w	r2, [sp, #68]	; 0x44
   12598:	ldr	r2, [pc, #736]	; (1287c <_vfiprintf_r+0x9cc>)
   1259a:	str	r2, [sp, #48]	; 0x30
   1259c:	movs	r1, #2
   1259e:	movs	r2, #0
   125a0:	b.n	1219e <_vfiprintf_r+0x2ee>
   125a2:	lsls	r7, r6, #26
   125a4:	bmi.w	12a38 <_vfiprintf_r+0xb88>
   125a8:	lsls	r5, r6, #27
   125aa:	bmi.w	12c3a <_vfiprintf_r+0xd8a>
   125ae:	lsls	r4, r6, #25
   125b0:	bmi.w	12d5e <_vfiprintf_r+0xeae>
   125b4:	lsls	r0, r6, #22
   125b6:	bpl.w	12c3a <_vfiprintf_r+0xd8a>
   125ba:	ldr	r3, [sp, #28]
   125bc:	ldr	r1, [sp, #20]
   125be:	ldr.w	r2, [r3], #4
   125c2:	str	r3, [sp, #28]
   125c4:	strb	r1, [r2, #0]
   125c6:	b.n	11f46 <_vfiprintf_r+0x96>
   125c8:	str	r6, [sp, #12]
   125ca:	cmp	r1, #1
   125cc:	beq.w	120e8 <_vfiprintf_r+0x238>
   125d0:	cmp	r1, #2
   125d2:	add	r4, sp, #272	; 0x110
   125d4:	bne.n	125fa <_vfiprintf_r+0x74a>
   125d6:	ldr	r0, [sp, #48]	; 0x30
   125d8:	and.w	r1, r3, #15
   125dc:	lsrs	r3, r3, #4
   125de:	ldrb	r1, [r0, r1]
   125e0:	strb.w	r1, [r4, #-1]!
   125e4:	orr.w	r3, r3, r2, lsl #28
   125e8:	lsrs	r2, r2, #4
   125ea:	orrs.w	r1, r3, r2
   125ee:	bne.n	125d8 <_vfiprintf_r+0x728>
   125f0:	ldr	r6, [sp, #12]
   125f2:	add	r3, sp, #272	; 0x110
   125f4:	subs	r3, r3, r4
   125f6:	str	r3, [sp, #16]
   125f8:	b.n	12102 <_vfiprintf_r+0x252>
   125fa:	and.w	r1, r3, #7
   125fe:	lsrs	r3, r3, #3
   12600:	orr.w	r3, r3, r2, lsl #29
   12604:	lsrs	r2, r2, #3
   12606:	adds	r1, #48	; 0x30
   12608:	orrs.w	r5, r3, r2
   1260c:	mov	r0, r4
   1260e:	strb.w	r1, [r4, #-1]!
   12612:	bne.n	125fa <_vfiprintf_r+0x74a>
   12614:	ldr	r6, [sp, #12]
   12616:	lsls	r3, r6, #31
   12618:	bpl.n	125f2 <_vfiprintf_r+0x742>
   1261a:	cmp	r1, #48	; 0x30
   1261c:	beq.n	125f0 <_vfiprintf_r+0x740>
   1261e:	movs	r3, #48	; 0x30
   12620:	subs	r0, #2
   12622:	strb.w	r3, [r4, #-1]
   12626:	add	r3, sp, #272	; 0x110
   12628:	subs	r3, r3, r0
   1262a:	ldr	r6, [sp, #12]
   1262c:	str	r3, [sp, #16]
   1262e:	mov	r4, r0
   12630:	b.n	12102 <_vfiprintf_r+0x252>
   12632:	ldr	r3, [sp, #16]
   12634:	str	r4, [sp, #108]	; 0x6c
   12636:	movs	r2, #1
   12638:	str	r3, [sp, #112]	; 0x70
   1263a:	str	r3, [sp, #104]	; 0x68
   1263c:	str	r2, [sp, #100]	; 0x64
   1263e:	add.w	r9, sp, #108	; 0x6c
   12642:	add.w	r9, r9, #8
   12646:	b.n	12384 <_vfiprintf_r+0x4d4>
   12648:	add.w	r9, sp, #108	; 0x6c
   1264c:	b.n	11f46 <_vfiprintf_r+0x96>
   1264e:	ldr	r2, [sp, #24]
   12650:	ldr	r5, [sp, #12]
   12652:	subs	r5, r2, r5
   12654:	cmp	r5, #0
   12656:	ble.w	12346 <_vfiprintf_r+0x496>
   1265a:	cmp	r5, #16
   1265c:	ble.w	12dd6 <_vfiprintf_r+0xf26>
   12660:	str	r4, [sp, #36]	; 0x24
   12662:	vmov	r4, s16
   12666:	b.n	12678 <_vfiprintf_r+0x7c8>
   12668:	add.w	ip, r0, #2
   1266c:	add.w	r9, r9, #8
   12670:	mov	r0, r2
   12672:	subs	r5, #16
   12674:	cmp	r5, #16
   12676:	ble.n	126b6 <_vfiprintf_r+0x806>
   12678:	ldr	r1, [pc, #516]	; (12880 <_vfiprintf_r+0x9d0>)
   1267a:	str.w	r1, [r9]
   1267e:	adds	r2, r0, #1
   12680:	adds	r3, #16
   12682:	movs	r1, #16
   12684:	cmp	r2, #7
   12686:	strd	r2, r3, [sp, #100]	; 0x64
   1268a:	str.w	r1, [r9, #4]
   1268e:	ble.n	12668 <_vfiprintf_r+0x7b8>
   12690:	add	r2, sp, #96	; 0x60
   12692:	cmp	r3, #0
   12694:	beq.n	12780 <_vfiprintf_r+0x8d0>
   12696:	mov	r1, r4
   12698:	mov	r0, fp
   1269a:	add.w	r9, sp, #108	; 0x6c
   1269e:	bl	11e38 <__sprint_r.part.0>
   126a2:	cmp	r0, #0
   126a4:	bne.w	1225e <_vfiprintf_r+0x3ae>
   126a8:	ldrd	r0, r3, [sp, #100]	; 0x64
   126ac:	subs	r5, #16
   126ae:	cmp	r5, #16
   126b0:	add.w	ip, r0, #1
   126b4:	bgt.n	12678 <_vfiprintf_r+0x7c8>
   126b6:	ldr	r4, [sp, #36]	; 0x24
   126b8:	ldr	r2, [pc, #452]	; (12880 <_vfiprintf_r+0x9d0>)
   126ba:	str.w	r5, [r9, #4]
   126be:	add	r3, r5
   126c0:	cmp.w	ip, #7
   126c4:	strd	ip, r3, [sp, #100]	; 0x64
   126c8:	str.w	r2, [r9]
   126cc:	ble.w	129f8 <_vfiprintf_r+0xb48>
   126d0:	cmp	r3, #0
   126d2:	beq.w	12d14 <_vfiprintf_r+0xe64>
   126d6:	vmov	r1, s16
   126da:	add	r2, sp, #96	; 0x60
   126dc:	mov	r0, fp
   126de:	bl	11e38 <__sprint_r.part.0>
   126e2:	cmp	r0, #0
   126e4:	bne.w	1225e <_vfiprintf_r+0x3ae>
   126e8:	ldr	r2, [sp, #16]
   126ea:	ldrd	r0, r3, [sp, #100]	; 0x64
   126ee:	subs	r5, r7, r2
   126f0:	cmp	r5, #0
   126f2:	add.w	r1, r0, #1
   126f6:	add.w	r9, sp, #108	; 0x6c
   126fa:	ble.w	12350 <_vfiprintf_r+0x4a0>
   126fe:	cmp	r5, #16
   12700:	ble.n	12756 <_vfiprintf_r+0x8a6>
   12702:	str	r4, [sp, #36]	; 0x24
   12704:	movs	r7, #16
   12706:	vmov	r4, s16
   1270a:	b.n	1271c <_vfiprintf_r+0x86c>
   1270c:	add.w	ip, r0, #2
   12710:	add.w	r9, r9, #8
   12714:	mov	r0, r2
   12716:	subs	r5, #16
   12718:	cmp	r5, #16
   1271a:	ble.n	12752 <_vfiprintf_r+0x8a2>
   1271c:	adds	r2, r0, #1
   1271e:	ldr	r1, [pc, #352]	; (12880 <_vfiprintf_r+0x9d0>)
   12720:	adds	r3, #16
   12722:	cmp	r2, #7
   12724:	strd	r1, r7, [r9]
   12728:	strd	r2, r3, [sp, #100]	; 0x64
   1272c:	ble.n	1270c <_vfiprintf_r+0x85c>
   1272e:	add	r2, sp, #96	; 0x60
   12730:	cbz	r3, 12774 <_vfiprintf_r+0x8c4>
   12732:	mov	r1, r4
   12734:	mov	r0, fp
   12736:	add.w	r9, sp, #108	; 0x6c
   1273a:	bl	11e38 <__sprint_r.part.0>
   1273e:	cmp	r0, #0
   12740:	bne.w	1225e <_vfiprintf_r+0x3ae>
   12744:	ldrd	r0, r3, [sp, #100]	; 0x64
   12748:	subs	r5, #16
   1274a:	cmp	r5, #16
   1274c:	add.w	ip, r0, #1
   12750:	bgt.n	1271c <_vfiprintf_r+0x86c>
   12752:	ldr	r4, [sp, #36]	; 0x24
   12754:	mov	r1, ip
   12756:	ldr	r2, [pc, #296]	; (12880 <_vfiprintf_r+0x9d0>)
   12758:	str.w	r5, [r9, #4]
   1275c:	add	r3, r5
   1275e:	cmp	r1, #7
   12760:	strd	r1, r3, [sp, #100]	; 0x64
   12764:	str.w	r2, [r9]
   12768:	bgt.w	1293a <_vfiprintf_r+0xa8a>
   1276c:	add.w	r9, r9, #8
   12770:	adds	r1, #1
   12772:	b.n	12350 <_vfiprintf_r+0x4a0>
   12774:	mov.w	ip, #1
   12778:	mov	r0, r3
   1277a:	add.w	r9, sp, #108	; 0x6c
   1277e:	b.n	12716 <_vfiprintf_r+0x866>
   12780:	mov.w	ip, #1
   12784:	mov	r0, r3
   12786:	add.w	r9, sp, #108	; 0x6c
   1278a:	b.n	12672 <_vfiprintf_r+0x7c2>
   1278c:	cmp	r3, #0
   1278e:	beq.w	1299a <_vfiprintf_r+0xaea>
   12792:	vmov	r1, s16
   12796:	add	r2, sp, #96	; 0x60
   12798:	mov	r0, fp
   1279a:	bl	11e38 <__sprint_r.part.0>
   1279e:	cmp	r0, #0
   127a0:	bne.w	1225e <_vfiprintf_r+0x3ae>
   127a4:	ldrd	r0, r3, [sp, #100]	; 0x64
   127a8:	add.w	r9, sp, #108	; 0x6c
   127ac:	adds	r1, r0, #1
   127ae:	b.n	12300 <_vfiprintf_r+0x450>
   127b0:	movs	r3, #2
   127b2:	add	r2, sp, #68	; 0x44
   127b4:	str	r3, [sp, #112]	; 0x70
   127b6:	str	r2, [sp, #108]	; 0x6c
   127b8:	movs	r1, #1
   127ba:	add.w	r9, sp, #108	; 0x6c
   127be:	mov	r0, r1
   127c0:	add.w	r9, r9, #8
   127c4:	adds	r1, r0, #1
   127c6:	b.n	1233e <_vfiprintf_r+0x48e>
   127c8:	cmp	r5, #16
   127ca:	ble.w	12d98 <_vfiprintf_r+0xee8>
   127ce:	ldrd	r1, r3, [sp, #100]	; 0x64
   127d2:	str	r4, [sp, #60]	; 0x3c
   127d4:	mov	r0, r1
   127d6:	vmov	r4, s16
   127da:	b.n	127ec <_vfiprintf_r+0x93c>
   127dc:	add.w	ip, r0, #2
   127e0:	add.w	r9, r9, #8
   127e4:	mov	r0, r2
   127e6:	subs	r5, #16
   127e8:	cmp	r5, #16
   127ea:	ble.n	12828 <_vfiprintf_r+0x978>
   127ec:	ldr	r1, [pc, #148]	; (12884 <_vfiprintf_r+0x9d4>)
   127ee:	str.w	r1, [r9]
   127f2:	adds	r2, r0, #1
   127f4:	adds	r3, #16
   127f6:	movs	r1, #16
   127f8:	cmp	r2, #7
   127fa:	strd	r2, r3, [sp, #100]	; 0x64
   127fe:	str.w	r1, [r9, #4]
   12802:	ble.n	127dc <_vfiprintf_r+0x92c>
   12804:	add	r2, sp, #96	; 0x60
   12806:	cbz	r3, 1284a <_vfiprintf_r+0x99a>
   12808:	mov	r1, r4
   1280a:	mov	r0, fp
   1280c:	add.w	r9, sp, #108	; 0x6c
   12810:	bl	11e38 <__sprint_r.part.0>
   12814:	cmp	r0, #0
   12816:	bne.w	1225e <_vfiprintf_r+0x3ae>
   1281a:	ldrd	r0, r3, [sp, #100]	; 0x64
   1281e:	subs	r5, #16
   12820:	cmp	r5, #16
   12822:	add.w	ip, r0, #1
   12826:	bgt.n	127ec <_vfiprintf_r+0x93c>
   12828:	ldr	r4, [sp, #60]	; 0x3c
   1282a:	mov	r0, ip
   1282c:	ldr	r2, [pc, #84]	; (12884 <_vfiprintf_r+0x9d4>)
   1282e:	str.w	r5, [r9, #4]
   12832:	add	r3, r5
   12834:	cmp	r0, #7
   12836:	strd	r0, r3, [sp, #100]	; 0x64
   1283a:	str.w	r2, [r9]
   1283e:	bgt.w	129c4 <_vfiprintf_r+0xb14>
   12842:	add.w	r9, r9, #8
   12846:	adds	r1, r0, #1
   12848:	b.n	122d8 <_vfiprintf_r+0x428>
   1284a:	mov	r0, r3
   1284c:	mov.w	ip, #1
   12850:	add.w	r9, sp, #108	; 0x6c
   12854:	b.n	127e6 <_vfiprintf_r+0x936>
   12856:	lsls	r6, r6, #29
   12858:	str	r3, [sp, #100]	; 0x64
   1285a:	bpl.n	12904 <_vfiprintf_r+0xa54>
   1285c:	ldr	r2, [sp, #24]
   1285e:	ldr	r1, [sp, #12]
   12860:	subs	r4, r2, r1
   12862:	cmp	r4, #0
   12864:	ble.n	12904 <_vfiprintf_r+0xa54>
   12866:	add.w	r9, sp, #108	; 0x6c
   1286a:	cmp	r4, #16
   1286c:	ble.w	12dd0 <_vfiprintf_r+0xf20>
   12870:	ldr	r1, [sp, #100]	; 0x64
   12872:	vmov	r6, s16
   12876:	movs	r5, #16
   12878:	b.n	12896 <_vfiprintf_r+0x9e6>
   1287a:	nop
   1287c:	.word	0x20000e68
   12880:	.word	0x20001324
   12884:	.word	0x20000eac
   12888:	adds	r0, r1, #2
   1288a:	add.w	r9, r9, #8
   1288e:	mov	r1, r2
   12890:	subs	r4, #16
   12892:	cmp	r4, #16
   12894:	ble.n	128cc <_vfiprintf_r+0xa1c>
   12896:	adds	r2, r1, #1
   12898:	ldr	r0, [pc, #716]	; (12b68 <_vfiprintf_r+0xcb8>)
   1289a:	adds	r3, #16
   1289c:	cmp	r2, #7
   1289e:	strd	r0, r5, [r9]
   128a2:	strd	r2, r3, [sp, #100]	; 0x64
   128a6:	ble.n	12888 <_vfiprintf_r+0x9d8>
   128a8:	add	r2, sp, #96	; 0x60
   128aa:	cbz	r3, 128fa <_vfiprintf_r+0xa4a>
   128ac:	mov	r1, r6
   128ae:	mov	r0, fp
   128b0:	bl	11e38 <__sprint_r.part.0>
   128b4:	cmp	r0, #0
   128b6:	bne.w	1225e <_vfiprintf_r+0x3ae>
   128ba:	ldrd	r1, r3, [sp, #100]	; 0x64
   128be:	subs	r4, #16
   128c0:	cmp	r4, #16
   128c2:	add.w	r0, r1, #1
   128c6:	add.w	r9, sp, #108	; 0x6c
   128ca:	bgt.n	12896 <_vfiprintf_r+0x9e6>
   128cc:	ldr	r2, [pc, #664]	; (12b68 <_vfiprintf_r+0xcb8>)
   128ce:	str.w	r4, [r9, #4]
   128d2:	add	r3, r4
   128d4:	cmp	r0, #7
   128d6:	strd	r0, r3, [sp, #100]	; 0x64
   128da:	str.w	r2, [r9]
   128de:	ble.w	12394 <_vfiprintf_r+0x4e4>
   128e2:	cbz	r3, 12904 <_vfiprintf_r+0xa54>
   128e4:	vmov	r1, s16
   128e8:	add	r2, sp, #96	; 0x60
   128ea:	mov	r0, fp
   128ec:	bl	11e38 <__sprint_r.part.0>
   128f0:	cmp	r0, #0
   128f2:	bne.w	1225e <_vfiprintf_r+0x3ae>
   128f6:	ldr	r3, [sp, #104]	; 0x68
   128f8:	b.n	12394 <_vfiprintf_r+0x4e4>
   128fa:	movs	r0, #1
   128fc:	mov	r1, r3
   128fe:	add.w	r9, sp, #108	; 0x6c
   12902:	b.n	12890 <_vfiprintf_r+0x9e0>
   12904:	ldrd	r3, r2, [sp, #20]
   12908:	ldr	r1, [sp, #12]
   1290a:	cmp	r2, r1
   1290c:	ite	ge
   1290e:	addge	r3, r3, r2
   12910:	addlt	r3, r3, r1
   12912:	str	r3, [sp, #20]
   12914:	b.n	123aa <_vfiprintf_r+0x4fa>
   12916:	ldrsh.w	r1, [r2, #12]
   1291a:	lsls	r7, r1, #22
   1291c:	vmov	r3, s16
   12920:	uxth	r2, r1
   12922:	bmi.w	11ef6 <_vfiprintf_r+0x46>
   12926:	vmov	r5, s16
   1292a:	ldr	r0, [r3, #88]	; 0x58
   1292c:	bl	e33c <__retarget_lock_acquire_recursive>
   12930:	ldrsh.w	r1, [r5, #12]
   12934:	uxth	r2, r1
   12936:	b.w	11ef6 <_vfiprintf_r+0x46>
   1293a:	cmp	r3, #0
   1293c:	beq.w	12632 <_vfiprintf_r+0x782>
   12940:	vmov	r1, s16
   12944:	add	r2, sp, #96	; 0x60
   12946:	mov	r0, fp
   12948:	bl	11e38 <__sprint_r.part.0>
   1294c:	cmp	r0, #0
   1294e:	bne.w	1225e <_vfiprintf_r+0x3ae>
   12952:	ldr	r1, [sp, #100]	; 0x64
   12954:	ldr	r3, [sp, #104]	; 0x68
   12956:	adds	r1, #1
   12958:	add.w	r9, sp, #108	; 0x6c
   1295c:	b.n	12350 <_vfiprintf_r+0x4a0>
   1295e:	str	r2, [sp, #100]	; 0x64
   12960:	add.w	r9, sp, #108	; 0x6c
   12964:	b.n	12224 <_vfiprintf_r+0x374>
   12966:	cmp	r7, #0
   12968:	bne.w	120f2 <_vfiprintf_r+0x242>
   1296c:	ldr	r6, [sp, #12]
   1296e:	movs	r7, #0
   12970:	str	r7, [sp, #16]
   12972:	add	r4, sp, #272	; 0x110
   12974:	b.w	12102 <_vfiprintf_r+0x252>
   12978:	ldr	r3, [sp, #12]
   1297a:	ands.w	r3, r3, #16
   1297e:	bne.n	12a2a <_vfiprintf_r+0xb7a>
   12980:	ldr	r2, [sp, #12]
   12982:	ands.w	r0, r2, #64	; 0x40
   12986:	beq.w	12c60 <_vfiprintf_r+0xdb0>
   1298a:	ldr	r1, [sp, #28]
   1298c:	mov	r2, r3
   1298e:	ldr.w	r3, [r1], #4
   12992:	str	r1, [sp, #28]
   12994:	uxth	r3, r3
   12996:	movs	r1, #1
   12998:	b.n	1219e <_vfiprintf_r+0x2ee>
   1299a:	ldr	r2, [sp, #36]	; 0x24
   1299c:	cmp	r2, #0
   1299e:	bne.n	12a6a <_vfiprintf_r+0xbba>
   129a0:	mov	r0, r3
   129a2:	movs	r1, #1
   129a4:	add.w	r9, sp, #108	; 0x6c
   129a8:	b.n	1233e <_vfiprintf_r+0x48e>
   129aa:	movs	r1, #1
   129ac:	mov	r0, r3
   129ae:	add.w	r9, sp, #108	; 0x6c
   129b2:	b.n	1233e <_vfiprintf_r+0x48e>
   129b4:	negs	r3, r3
   129b6:	sbc.w	r2, r2, r2, lsl #1
   129ba:	str	r6, [sp, #12]
   129bc:	movs	r0, #45	; 0x2d
   129be:	movs	r1, #1
   129c0:	b.w	121a0 <_vfiprintf_r+0x2f0>
   129c4:	cmp	r3, #0
   129c6:	beq.w	12ada <_vfiprintf_r+0xc2a>
   129ca:	vmov	r1, s16
   129ce:	add	r2, sp, #96	; 0x60
   129d0:	mov	r0, fp
   129d2:	bl	11e38 <__sprint_r.part.0>
   129d6:	cmp	r0, #0
   129d8:	bne.w	1225e <_vfiprintf_r+0x3ae>
   129dc:	ldrd	r0, r3, [sp, #100]	; 0x64
   129e0:	add.w	r9, sp, #108	; 0x6c
   129e4:	adds	r1, r0, #1
   129e6:	b.n	122d8 <_vfiprintf_r+0x428>
   129e8:	ldrb.w	r1, [r8]
   129ec:	str	r3, [sp, #28]
   129ee:	b.w	11f96 <_vfiprintf_r+0xe6>
   129f2:	add	r4, sp, #272	; 0x110
   129f4:	b.w	12102 <_vfiprintf_r+0x252>
   129f8:	add.w	r9, r9, #8
   129fc:	add.w	r1, ip, #1
   12a00:	mov	r0, ip
   12a02:	b.n	12346 <_vfiprintf_r+0x496>
   12a04:	ands.w	r2, r6, #512	; 0x200
   12a08:	bne.w	12d3a <_vfiprintf_r+0xe8a>
   12a0c:	ldr.w	r3, [r1], #4
   12a10:	str	r1, [sp, #28]
   12a12:	b.w	12196 <_vfiprintf_r+0x2e6>
   12a16:	lsls	r3, r6, #22
   12a18:	bmi.w	12d2c <_vfiprintf_r+0xe7c>
   12a1c:	ldr.w	r3, [r2], #4
   12a20:	str	r2, [sp, #28]
   12a22:	asrs	r2, r3, #31
   12a24:	mov	r1, r2
   12a26:	b.w	120ce <_vfiprintf_r+0x21e>
   12a2a:	ldr	r1, [sp, #28]
   12a2c:	ldr.w	r3, [r1], #4
   12a30:	str	r1, [sp, #28]
   12a32:	movs	r1, #1
   12a34:	b.w	1219e <_vfiprintf_r+0x2ee>
   12a38:	ldr	r3, [sp, #28]
   12a3a:	ldr	r0, [sp, #20]
   12a3c:	ldr.w	r1, [r3], #4
   12a40:	str	r3, [sp, #28]
   12a42:	asrs	r2, r0, #31
   12a44:	strd	r0, r2, [r1]
   12a48:	b.w	11f46 <_vfiprintf_r+0x96>
   12a4c:	ldr	r3, [sp, #44]	; 0x2c
   12a4e:	cmp	r3, #0
   12a50:	beq.w	120a0 <_vfiprintf_r+0x1f0>
   12a54:	ldr	r3, [sp, #44]	; 0x2c
   12a56:	ldrb	r3, [r3, #0]
   12a58:	cmp	r3, #0
   12a5a:	beq.w	120a0 <_vfiprintf_r+0x1f0>
   12a5e:	ldrb.w	r1, [r8]
   12a62:	orr.w	r6, r6, #1024	; 0x400
   12a66:	b.w	11f96 <_vfiprintf_r+0xe6>
   12a6a:	movs	r3, #2
   12a6c:	add	r2, sp, #68	; 0x44
   12a6e:	str	r3, [sp, #112]	; 0x70
   12a70:	str	r2, [sp, #108]	; 0x6c
   12a72:	movs	r0, #1
   12a74:	add.w	r9, sp, #108	; 0x6c
   12a78:	b.n	127c0 <_vfiprintf_r+0x910>
   12a7a:	str	r6, [sp, #12]
   12a7c:	b.n	12562 <_vfiprintf_r+0x6b2>
   12a7e:	ldr	r3, [pc, #236]	; (12b6c <_vfiprintf_r+0xcbc>)
   12a80:	str	r3, [sp, #48]	; 0x30
   12a82:	ands.w	r2, r6, #32
   12a86:	beq.n	12b3c <_vfiprintf_r+0xc8c>
   12a88:	ldr	r3, [sp, #28]
   12a8a:	adds	r3, #7
   12a8c:	bic.w	r3, r3, #7
   12a90:	mov	r0, r3
   12a92:	ldr	r2, [r3, #4]
   12a94:	ldr.w	r3, [r0], #8
   12a98:	str	r0, [sp, #28]
   12a9a:	lsls	r4, r6, #31
   12a9c:	bpl.n	12ab2 <_vfiprintf_r+0xc02>
   12a9e:	orrs.w	r0, r3, r2
   12aa2:	beq.n	12ab2 <_vfiprintf_r+0xc02>
   12aa4:	strb.w	r1, [sp, #69]	; 0x45
   12aa8:	movs	r1, #48	; 0x30
   12aaa:	orr.w	r6, r6, #2
   12aae:	strb.w	r1, [sp, #68]	; 0x44
   12ab2:	bic.w	r1, r6, #1024	; 0x400
   12ab6:	str	r1, [sp, #12]
   12ab8:	movs	r1, #2
   12aba:	b.w	1219e <_vfiprintf_r+0x2ee>
   12abe:	ldr	r3, [pc, #176]	; (12b70 <_vfiprintf_r+0xcc0>)
   12ac0:	str	r3, [sp, #48]	; 0x30
   12ac2:	b.n	12a82 <_vfiprintf_r+0xbd2>
   12ac4:	ldr	r3, [sp, #28]
   12ac6:	movs	r1, #1
   12ac8:	ldr.w	r2, [r3], #4
   12acc:	str	r1, [sp, #12]
   12ace:	strb.w	r2, [sp, #172]	; 0xac
   12ad2:	str	r3, [sp, #28]
   12ad4:	str	r1, [sp, #16]
   12ad6:	add	r4, sp, #172	; 0xac
   12ad8:	b.n	1249a <_vfiprintf_r+0x5ea>
   12ada:	ldrb.w	r2, [sp, #67]	; 0x43
   12ade:	cmp	r2, #0
   12ae0:	bne.w	12d48 <_vfiprintf_r+0xe98>
   12ae4:	ldr	r2, [sp, #36]	; 0x24
   12ae6:	cmp	r2, #0
   12ae8:	bne.w	127b0 <_vfiprintf_r+0x900>
   12aec:	mov	r0, r3
   12aee:	movs	r1, #1
   12af0:	add.w	r9, sp, #108	; 0x6c
   12af4:	b.n	12346 <_vfiprintf_r+0x496>
   12af6:	movs	r1, #0
   12af8:	movs	r2, #8
   12afa:	add	r0, sp, #88	; 0x58
   12afc:	str	r4, [sp, #76]	; 0x4c
   12afe:	bl	e074 <memset>
   12b02:	adds	r1, r7, #1
   12b04:	beq.w	12c80 <_vfiprintf_r+0xdd0>
   12b08:	movs	r5, #0
   12b0a:	str	r4, [sp, #28]
   12b0c:	mov	r4, r5
   12b0e:	b.n	12b2a <_vfiprintf_r+0xc7a>
   12b10:	add	r1, sp, #172	; 0xac
   12b12:	mov	r0, fp
   12b14:	bl	11cac <_wcrtomb_r>
   12b18:	adds	r2, r0, #1
   12b1a:	add	r0, r4
   12b1c:	beq.w	12df6 <_vfiprintf_r+0xf46>
   12b20:	cmp	r0, r7
   12b22:	bgt.n	12b36 <_vfiprintf_r+0xc86>
   12b24:	beq.w	12e08 <_vfiprintf_r+0xf58>
   12b28:	mov	r4, r0
   12b2a:	ldr	r2, [sp, #76]	; 0x4c
   12b2c:	ldr	r2, [r2, r5]
   12b2e:	add	r3, sp, #88	; 0x58
   12b30:	adds	r5, #4
   12b32:	cmp	r2, #0
   12b34:	bne.n	12b10 <_vfiprintf_r+0xc60>
   12b36:	str	r4, [sp, #16]
   12b38:	ldr	r4, [sp, #28]
   12b3a:	b.n	12c9c <_vfiprintf_r+0xdec>
   12b3c:	ands.w	r3, r6, #16
   12b40:	ldr	r0, [sp, #28]
   12b42:	bne.n	12b5e <_vfiprintf_r+0xcae>
   12b44:	ands.w	r4, r6, #64	; 0x40
   12b48:	beq.n	12b56 <_vfiprintf_r+0xca6>
   12b4a:	mov	r2, r3
   12b4c:	ldr.w	r3, [r0], #4
   12b50:	str	r0, [sp, #28]
   12b52:	uxth	r3, r3
   12b54:	b.n	12a9a <_vfiprintf_r+0xbea>
   12b56:	ands.w	r2, r6, #512	; 0x200
   12b5a:	bne.w	12d20 <_vfiprintf_r+0xe70>
   12b5e:	ldr.w	r3, [r0], #4
   12b62:	str	r0, [sp, #28]
   12b64:	b.n	12a9a <_vfiprintf_r+0xbea>
   12b66:	nop
   12b68:	.word	0x20000eac
   12b6c:	.word	0x20000e68
   12b70:	.word	0x20000e7c
   12b74:	ldr	r1, [sp, #12]
   12b76:	str	r7, [sp, #16]
   12b78:	add	r4, sp, #272	; 0x110
   12b7a:	mov	lr, r3
   12b7c:	vmov	s17, fp
   12b80:	and.w	r6, r1, #1024	; 0x400
   12b84:	mov.w	ip, #0
   12b88:	mov	r3, r4
   12b8a:	b.n	12b9a <_vfiprintf_r+0xcea>
   12b8c:	cmp.w	lr, #10
   12b90:	sbcs.w	r2, r2, #0
   12b94:	bcc.n	12c0a <_vfiprintf_r+0xd5a>
   12b96:	mov	lr, r4
   12b98:	mov	r2, r5
   12b9a:	ldr	r1, [pc, #664]	; (12e34 <_vfiprintf_r+0xf84>)
   12b9c:	adds.w	r0, lr, r2
   12ba0:	adc.w	r0, r0, #0
   12ba4:	mov	r7, r1
   12ba6:	umull	r1, r4, r1, r0
   12baa:	bic.w	r1, r4, #3
   12bae:	add.w	r1, r1, r4, lsr #2
   12bb2:	subs	r0, r0, r1
   12bb4:	subs.w	r1, lr, r0
   12bb8:	mov.w	r5, #3435973836	; 0xcccccccc
   12bbc:	sbc.w	r4, r2, #0
   12bc0:	mul.w	r5, r5, r1
   12bc4:	mla	r5, r7, r4, r5
   12bc8:	umull	r4, r1, r1, r7
   12bcc:	add	r5, r1
   12bce:	movs	r7, #5
   12bd0:	and.w	r1, r4, #1
   12bd4:	umull	r1, fp, r1, r7
   12bd8:	adds	r1, r1, r0
   12bda:	lsrs	r4, r4, #1
   12bdc:	adds	r1, #48	; 0x30
   12bde:	strb.w	r1, [r3, #-1]
   12be2:	orr.w	r4, r4, r5, lsl #31
   12be6:	add.w	ip, ip, #1
   12bea:	subs	r3, #1
   12bec:	lsrs	r5, r5, #1
   12bee:	cmp	r6, #0
   12bf0:	beq.n	12b8c <_vfiprintf_r+0xcdc>
   12bf2:	ldr	r1, [sp, #44]	; 0x2c
   12bf4:	ldrb	r1, [r1, #0]
   12bf6:	cmp	r1, ip
   12bf8:	bne.n	12b8c <_vfiprintf_r+0xcdc>
   12bfa:	cmp.w	ip, #255	; 0xff
   12bfe:	beq.n	12b8c <_vfiprintf_r+0xcdc>
   12c00:	cmp.w	lr, #10
   12c04:	sbcs.w	r2, r2, #0
   12c08:	bcs.n	12ce4 <_vfiprintf_r+0xe34>
   12c0a:	mov	r4, r3
   12c0c:	add	r3, sp, #272	; 0x110
   12c0e:	subs	r3, r3, r4
   12c10:	ldr	r7, [sp, #16]
   12c12:	ldr	r6, [sp, #12]
   12c14:	str	r3, [sp, #16]
   12c16:	vmov	fp, s17
   12c1a:	b.w	12102 <_vfiprintf_r+0x252>
   12c1e:	str	r6, [sp, #12]
   12c20:	b.w	120e8 <_vfiprintf_r+0x238>
   12c24:	mov	r0, fp
   12c26:	bl	dce8 <__sinit>
   12c2a:	b.w	11ee4 <_vfiprintf_r+0x34>
   12c2e:	cmp	r1, #1
   12c30:	str	r6, [sp, #12]
   12c32:	bne.w	125d0 <_vfiprintf_r+0x720>
   12c36:	b.w	120f2 <_vfiprintf_r+0x242>
   12c3a:	ldr	r3, [sp, #28]
   12c3c:	ldr	r1, [sp, #20]
   12c3e:	ldr.w	r2, [r3], #4
   12c42:	str	r1, [r2, #0]
   12c44:	str	r3, [sp, #28]
   12c46:	b.w	11f46 <_vfiprintf_r+0x96>
   12c4a:	cmp	r7, #6
   12c4c:	mov	r3, r7
   12c4e:	ldr	r2, [sp, #12]
   12c50:	ldr	r4, [pc, #484]	; (12e38 <_vfiprintf_r+0xf88>)
   12c52:	str	r2, [sp, #28]
   12c54:	it	cs
   12c56:	movcs	r3, #6
   12c58:	str	r3, [sp, #16]
   12c5a:	str	r3, [sp, #12]
   12c5c:	b.w	122aa <_vfiprintf_r+0x3fa>
   12c60:	ldr	r3, [sp, #12]
   12c62:	ldr	r1, [sp, #28]
   12c64:	ands.w	r2, r3, #512	; 0x200
   12c68:	ite	ne
   12c6a:	ldrne.w	r3, [r1], #4
   12c6e:	ldreq.w	r3, [r1], #4
   12c72:	str	r1, [sp, #28]
   12c74:	itt	ne
   12c76:	movne	r2, r0
   12c78:	uxtbne	r3, r3
   12c7a:	movs	r1, #1
   12c7c:	b.w	1219e <_vfiprintf_r+0x2ee>
   12c80:	add	r3, sp, #88	; 0x58
   12c82:	str	r3, [sp, #0]
   12c84:	movs	r3, #0
   12c86:	mov	r1, r3
   12c88:	add	r2, sp, #76	; 0x4c
   12c8a:	mov	r0, fp
   12c8c:	bl	11cf8 <_wcsrtombs_r>
   12c90:	mov	r3, r0
   12c92:	adds	r3, #1
   12c94:	str	r0, [sp, #16]
   12c96:	beq.w	12df6 <_vfiprintf_r+0xf46>
   12c9a:	str	r4, [sp, #76]	; 0x4c
   12c9c:	ldr	r3, [sp, #16]
   12c9e:	cmp	r3, #0
   12ca0:	beq.n	12d04 <_vfiprintf_r+0xe54>
   12ca2:	cmp	r3, #99	; 0x63
   12ca4:	bgt.n	12d6e <_vfiprintf_r+0xebe>
   12ca6:	movs	r3, #0
   12ca8:	str	r3, [sp, #32]
   12caa:	add	r4, sp, #172	; 0xac
   12cac:	movs	r2, #8
   12cae:	movs	r1, #0
   12cb0:	add	r0, sp, #88	; 0x58
   12cb2:	bl	e074 <memset>
   12cb6:	ldr	r5, [sp, #16]
   12cb8:	add	r3, sp, #88	; 0x58
   12cba:	str	r3, [sp, #0]
   12cbc:	add	r2, sp, #76	; 0x4c
   12cbe:	mov	r3, r5
   12cc0:	mov	r1, r4
   12cc2:	mov	r0, fp
   12cc4:	bl	11cf8 <_wcsrtombs_r>
   12cc8:	cmp	r5, r0
   12cca:	bne.w	12e24 <_vfiprintf_r+0xf74>
   12cce:	ldr	r3, [sp, #12]
   12cd0:	ldr	r2, [sp, #16]
   12cd2:	str	r3, [sp, #28]
   12cd4:	movs	r3, #0
   12cd6:	strb	r3, [r4, r2]
   12cd8:	mov	r7, r3
   12cda:	bic.w	r3, r2, r2, asr #31
   12cde:	str	r3, [sp, #12]
   12ce0:	b.w	12110 <_vfiprintf_r+0x260>
   12ce4:	ldr	r2, [sp, #56]	; 0x38
   12ce6:	ldr	r1, [sp, #52]	; 0x34
   12ce8:	subs	r3, r3, r2
   12cea:	mov	r0, r3
   12cec:	str	r3, [sp, #32]
   12cee:	bl	e1a4 <strncpy>
   12cf2:	ldr	r1, [sp, #44]	; 0x2c
   12cf4:	ldr	r3, [sp, #32]
   12cf6:	ldrb	r2, [r1, #1]
   12cf8:	cbz	r2, 12cfe <_vfiprintf_r+0xe4e>
   12cfa:	adds	r1, #1
   12cfc:	str	r1, [sp, #44]	; 0x2c
   12cfe:	mov.w	ip, #0
   12d02:	b.n	12b96 <_vfiprintf_r+0xce6>
   12d04:	ldr	r3, [sp, #12]
   12d06:	str	r3, [sp, #28]
   12d08:	ldr	r3, [sp, #16]
   12d0a:	str	r3, [sp, #12]
   12d0c:	mov	r7, r3
   12d0e:	str	r3, [sp, #32]
   12d10:	b.w	12110 <_vfiprintf_r+0x260>
   12d14:	movs	r1, #1
   12d16:	mov	r0, r3
   12d18:	add.w	r9, sp, #108	; 0x6c
   12d1c:	b.w	12346 <_vfiprintf_r+0x496>
   12d20:	ldr.w	r3, [r0], #4
   12d24:	str	r0, [sp, #28]
   12d26:	mov	r2, r4
   12d28:	uxtb	r3, r3
   12d2a:	b.n	12a9a <_vfiprintf_r+0xbea>
   12d2c:	ldrsb.w	r3, [r2], #4
   12d30:	str	r2, [sp, #28]
   12d32:	asrs	r2, r3, #31
   12d34:	mov	r1, r2
   12d36:	b.w	120ce <_vfiprintf_r+0x21e>
   12d3a:	ldr.w	r3, [r1], #4
   12d3e:	str	r1, [sp, #28]
   12d40:	mov	r2, r0
   12d42:	uxtb	r3, r3
   12d44:	b.w	12196 <_vfiprintf_r+0x2e6>
   12d48:	movs	r3, #1
   12d4a:	str	r3, [sp, #112]	; 0x70
   12d4c:	movs	r1, #1
   12d4e:	add.w	r3, sp, #67	; 0x43
   12d52:	str	r3, [sp, #108]	; 0x6c
   12d54:	add.w	r9, sp, #108	; 0x6c
   12d58:	mov	r3, r1
   12d5a:	b.w	122f8 <_vfiprintf_r+0x448>
   12d5e:	ldr	r3, [sp, #28]
   12d60:	ldr	r1, [sp, #20]
   12d62:	ldr.w	r2, [r3], #4
   12d66:	str	r3, [sp, #28]
   12d68:	strh	r1, [r2, #0]
   12d6a:	b.w	11f46 <_vfiprintf_r+0x96>
   12d6e:	adds	r1, r3, #1
   12d70:	mov	r0, fp
   12d72:	bl	d260 <_malloc_r>
   12d76:	mov	r4, r0
   12d78:	cmp	r0, #0
   12d7a:	beq.n	12df6 <_vfiprintf_r+0xf46>
   12d7c:	str	r0, [sp, #32]
   12d7e:	b.n	12cac <_vfiprintf_r+0xdfc>
   12d80:	ldr	r0, [r1, #88]	; 0x58
   12d82:	bl	e340 <__retarget_lock_release_recursive>
   12d86:	b.w	1215c <_vfiprintf_r+0x2ac>
   12d8a:	ldr	r3, [sp, #12]
   12d8c:	str	r3, [sp, #28]
   12d8e:	strd	r7, r7, [sp, #12]
   12d92:	ldr	r7, [sp, #32]
   12d94:	b.w	12110 <_vfiprintf_r+0x260>
   12d98:	ldr	r0, [sp, #100]	; 0x64
   12d9a:	ldr	r3, [sp, #104]	; 0x68
   12d9c:	adds	r0, #1
   12d9e:	b.n	1282c <_vfiprintf_r+0x97c>
   12da0:	ldr	r3, [sp, #12]
   12da2:	str	r3, [sp, #28]
   12da4:	mov	r0, r4
   12da6:	bl	e400 <strlen>
   12daa:	bic.w	r3, r0, r0, asr #31
   12dae:	mov	r7, r5
   12db0:	str	r0, [sp, #16]
   12db2:	str	r3, [sp, #12]
   12db4:	str	r5, [sp, #32]
   12db6:	b.w	12110 <_vfiprintf_r+0x260>
   12dba:	vmov	r1, s16
   12dbe:	add	r2, sp, #96	; 0x60
   12dc0:	mov	r0, fp
   12dc2:	bl	11e38 <__sprint_r.part.0>
   12dc6:	cmp	r0, #0
   12dc8:	beq.w	12238 <_vfiprintf_r+0x388>
   12dcc:	b.w	1226a <_vfiprintf_r+0x3ba>
   12dd0:	ldr	r0, [sp, #100]	; 0x64
   12dd2:	adds	r0, #1
   12dd4:	b.n	128cc <_vfiprintf_r+0xa1c>
   12dd6:	mov	ip, r1
   12dd8:	b.n	126b8 <_vfiprintf_r+0x808>
   12dda:	ldr	r3, [r5, #100]	; 0x64
   12ddc:	lsls	r1, r3, #31
   12dde:	bmi.n	12dec <_vfiprintf_r+0xf3c>
   12de0:	ldrh	r3, [r5, #12]
   12de2:	lsls	r2, r3, #22
   12de4:	bmi.n	12dec <_vfiprintf_r+0xf3c>
   12de6:	ldr	r0, [r5, #88]	; 0x58
   12de8:	bl	e340 <__retarget_lock_release_recursive>
   12dec:	mov.w	r3, #4294967295
   12df0:	str	r3, [sp, #20]
   12df2:	b.w	12288 <_vfiprintf_r+0x3d8>
   12df6:	vmov	r2, s16
   12dfa:	ldrsh.w	r3, [r2, #12]
   12dfe:	orr.w	r3, r3, #64	; 0x40
   12e02:	strh	r3, [r2, #12]
   12e04:	b.w	12272 <_vfiprintf_r+0x3c2>
   12e08:	ldr	r4, [sp, #28]
   12e0a:	str	r7, [sp, #16]
   12e0c:	b.n	12c9c <_vfiprintf_r+0xdec>
   12e0e:	ldr	r3, [sp, #28]
   12e10:	ldrb.w	r1, [r8, #1]
   12e14:	ldr.w	r7, [r3], #4
   12e18:	str	r3, [sp, #28]
   12e1a:	mov	r8, r2
   12e1c:	orr.w	r7, r7, r7, asr #31
   12e20:	b.w	11f96 <_vfiprintf_r+0xe6>
   12e24:	vmov	r2, s16
   12e28:	ldrh	r3, [r2, #12]
   12e2a:	orr.w	r3, r3, #64	; 0x40
   12e2e:	strh	r3, [r2, #12]
   12e30:	b.w	1225e <_vfiprintf_r+0x3ae>
   12e34:	.word	0xcccccccd
   12e38:	.word	0x20000e90

00012e3c <__sbprintf>:
   12e3c:	push	{r4, r5, r6, lr}
   12e3e:	mov	r4, r1
   12e40:	ldrh	r1, [r1, #12]
   12e42:	sub.w	sp, sp, #1136	; 0x470
   12e46:	bic.w	r1, r1, #2
   12e4a:	strh.w	r1, [sp, #20]
   12e4e:	ldr	r1, [r4, #100]	; 0x64
   12e50:	str	r1, [sp, #108]	; 0x6c
   12e52:	ldrh	r1, [r4, #14]
   12e54:	strh.w	r1, [sp, #22]
   12e58:	ldr	r1, [r4, #28]
   12e5a:	str	r1, [sp, #36]	; 0x24
   12e5c:	ldr	r1, [r4, #36]	; 0x24
   12e5e:	str	r1, [sp, #44]	; 0x2c
   12e60:	add	r1, sp, #112	; 0x70
   12e62:	str	r1, [sp, #8]
   12e64:	str	r1, [sp, #24]
   12e66:	mov.w	r1, #1024	; 0x400
   12e6a:	mov	r6, r0
   12e6c:	str	r1, [sp, #16]
   12e6e:	str	r1, [sp, #28]
   12e70:	add	r0, sp, #96	; 0x60
   12e72:	movs	r1, #0
   12e74:	strd	r3, r2, [sp]
   12e78:	str	r1, [sp, #32]
   12e7a:	bl	e334 <__retarget_lock_init_recursive>
   12e7e:	ldrd	r3, r2, [sp]
   12e82:	add	r1, sp, #8
   12e84:	mov	r0, r6
   12e86:	bl	11eb0 <_vfiprintf_r>
   12e8a:	subs	r5, r0, #0
   12e8c:	blt.n	12e9e <__sbprintf+0x62>
   12e8e:	add	r1, sp, #8
   12e90:	mov	r0, r6
   12e92:	bl	10d0c <_fflush_r>
   12e96:	cmp	r0, #0
   12e98:	it	ne
   12e9a:	movne.w	r5, #4294967295
   12e9e:	ldrh.w	r3, [sp, #20]
   12ea2:	lsls	r3, r3, #25
   12ea4:	bpl.n	12eae <__sbprintf+0x72>
   12ea6:	ldrh	r3, [r4, #12]
   12ea8:	orr.w	r3, r3, #64	; 0x40
   12eac:	strh	r3, [r4, #12]
   12eae:	ldr	r0, [sp, #96]	; 0x60
   12eb0:	bl	e338 <__retarget_lock_close_recursive>
   12eb4:	mov	r0, r5
   12eb6:	add.w	sp, sp, #1136	; 0x470
   12eba:	pop	{r4, r5, r6, pc}

00012ebc <__sfvwrite_r>:
   12ebc:	ldr	r3, [r2, #8]
   12ebe:	cmp	r3, #0
   12ec0:	beq.w	12fce <__sfvwrite_r+0x112>
   12ec4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ec8:	ldrsh.w	r3, [r1, #12]
   12ecc:	mov	r4, r1
   12ece:	lsls	r1, r3, #28
   12ed0:	mov	r8, r0
   12ed2:	sub	sp, #12
   12ed4:	mov	r7, r2
   12ed6:	uxth	r0, r3
   12ed8:	bpl.n	12f26 <__sfvwrite_r+0x6a>
   12eda:	ldr	r3, [r4, #16]
   12edc:	cbz	r3, 12f26 <__sfvwrite_r+0x6a>
   12ede:	ands.w	r3, r0, #2
   12ee2:	ldr	r5, [r7, #0]
   12ee4:	beq.n	12f42 <__sfvwrite_r+0x86>
   12ee6:	mov.w	sl, #0
   12eea:	ldr.w	fp, [pc, #704]	; 131ac <__sfvwrite_r+0x2f0>
   12eee:	mov	r6, sl
   12ef0:	mov	r9, r7
   12ef2:	cmp	r6, fp
   12ef4:	mov	r3, r6
   12ef6:	mov	r2, sl
   12ef8:	it	cs
   12efa:	movcs	r3, fp
   12efc:	mov	r0, r8
   12efe:	cmp	r6, #0
   12f00:	beq.n	12fa8 <__sfvwrite_r+0xec>
   12f02:	ldr	r1, [r4, #28]
   12f04:	ldr	r7, [r4, #36]	; 0x24
   12f06:	blx	r7
   12f08:	cmp	r0, #0
   12f0a:	ble.n	12fba <__sfvwrite_r+0xfe>
   12f0c:	ldr.w	r3, [r9, #8]
   12f10:	subs	r3, r3, r0
   12f12:	add	sl, r0
   12f14:	subs	r6, r6, r0
   12f16:	str.w	r3, [r9, #8]
   12f1a:	cmp	r3, #0
   12f1c:	bne.n	12ef2 <__sfvwrite_r+0x36>
   12f1e:	movs	r0, #0
   12f20:	add	sp, #12
   12f22:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12f26:	mov	r1, r4
   12f28:	mov	r0, r8
   12f2a:	bl	131b0 <__swsetup_r>
   12f2e:	cmp	r0, #0
   12f30:	bne.w	131a4 <__sfvwrite_r+0x2e8>
   12f34:	ldrsh.w	r3, [r4, #12]
   12f38:	ldr	r5, [r7, #0]
   12f3a:	uxth	r0, r3
   12f3c:	ands.w	r3, r0, #2
   12f40:	bne.n	12ee6 <__sfvwrite_r+0x2a>
   12f42:	ands.w	r9, r0, #1
   12f46:	bne.n	12fd2 <__sfvwrite_r+0x116>
   12f48:	mov	r6, r9
   12f4a:	str	r7, [sp, #0]
   12f4c:	cbz	r6, 12fa0 <__sfvwrite_r+0xe4>
   12f4e:	lsls	r2, r0, #22
   12f50:	ldr.w	fp, [r4, #8]
   12f54:	bpl.w	13062 <__sfvwrite_r+0x1a6>
   12f58:	cmp	fp, r6
   12f5a:	mov	r2, fp
   12f5c:	bhi.w	130c8 <__sfvwrite_r+0x20c>
   12f60:	tst.w	r0, #1152	; 0x480
   12f64:	bne.w	130ea <__sfvwrite_r+0x22e>
   12f68:	ldr	r0, [r4, #0]
   12f6a:	str	r2, [sp, #4]
   12f6c:	mov	r1, r9
   12f6e:	bl	df7c <memmove>
   12f72:	ldr	r3, [r4, #8]
   12f74:	ldr	r2, [sp, #4]
   12f76:	sub.w	r1, r3, fp
   12f7a:	ldr	r3, [r4, #0]
   12f7c:	str	r1, [r4, #8]
   12f7e:	add	r3, r2
   12f80:	mov	sl, r6
   12f82:	str	r3, [r4, #0]
   12f84:	movs	r6, #0
   12f86:	ldr	r2, [sp, #0]
   12f88:	ldr	r3, [r2, #8]
   12f8a:	sub.w	r3, r3, sl
   12f8e:	add	r9, sl
   12f90:	str	r3, [r2, #8]
   12f92:	cmp	r3, #0
   12f94:	beq.n	12f1e <__sfvwrite_r+0x62>
   12f96:	ldrsh.w	r0, [r4, #12]
   12f9a:	uxth	r0, r0
   12f9c:	cmp	r6, #0
   12f9e:	bne.n	12f4e <__sfvwrite_r+0x92>
   12fa0:	ldrd	r9, r6, [r5]
   12fa4:	adds	r5, #8
   12fa6:	b.n	12f4c <__sfvwrite_r+0x90>
   12fa8:	ldrd	sl, r6, [r5]
   12fac:	adds	r5, #8
   12fae:	b.n	12ef2 <__sfvwrite_r+0x36>
   12fb0:	mov	r1, r4
   12fb2:	mov	r0, r8
   12fb4:	bl	10d0c <_fflush_r>
   12fb8:	cbz	r0, 1301e <__sfvwrite_r+0x162>
   12fba:	ldrsh.w	r3, [r4, #12]
   12fbe:	orr.w	r3, r3, #64	; 0x40
   12fc2:	mov.w	r0, #4294967295
   12fc6:	strh	r3, [r4, #12]
   12fc8:	add	sp, #12
   12fca:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12fce:	movs	r0, #0
   12fd0:	bx	lr
   12fd2:	mov	r6, r3
   12fd4:	mov	sl, r7
   12fd6:	mov	r9, r3
   12fd8:	mov	r0, r3
   12fda:	str	r5, [sp, #0]
   12fdc:	mov	r7, r3
   12fde:	cbz	r6, 1303a <__sfvwrite_r+0x17e>
   12fe0:	cmp	r0, #0
   12fe2:	beq.n	1304a <__sfvwrite_r+0x18e>
   12fe4:	mov	r2, r9
   12fe6:	ldrd	r1, r3, [r4, #16]
   12fea:	ldr	r0, [r4, #0]
   12fec:	ldr	r5, [r4, #8]
   12fee:	cmp	r2, r6
   12ff0:	it	cs
   12ff2:	movcs	r2, r6
   12ff4:	cmp	r0, r1
   12ff6:	bls.n	13002 <__sfvwrite_r+0x146>
   12ff8:	add.w	fp, r5, r3
   12ffc:	cmp	r2, fp
   12ffe:	bgt.w	13150 <__sfvwrite_r+0x294>
   13002:	cmp	r3, r2
   13004:	bgt.n	130d0 <__sfvwrite_r+0x214>
   13006:	ldr	r1, [r4, #28]
   13008:	ldr	r5, [r4, #36]	; 0x24
   1300a:	mov	r2, r7
   1300c:	mov	r0, r8
   1300e:	blx	r5
   13010:	subs.w	fp, r0, #0
   13014:	ble.n	12fba <__sfvwrite_r+0xfe>
   13016:	subs.w	r9, r9, fp
   1301a:	beq.n	12fb0 <__sfvwrite_r+0xf4>
   1301c:	movs	r0, #1
   1301e:	ldr.w	r3, [sl, #8]
   13022:	sub.w	r3, r3, fp
   13026:	add	r7, fp
   13028:	sub.w	r6, r6, fp
   1302c:	str.w	r3, [sl, #8]
   13030:	cmp	r3, #0
   13032:	beq.w	12f1e <__sfvwrite_r+0x62>
   13036:	cmp	r6, #0
   13038:	bne.n	12fe0 <__sfvwrite_r+0x124>
   1303a:	ldr	r2, [sp, #0]
   1303c:	ldr	r6, [r2, #4]
   1303e:	mov	r3, r2
   13040:	adds	r2, #8
   13042:	str	r2, [sp, #0]
   13044:	cmp	r6, #0
   13046:	beq.n	1303a <__sfvwrite_r+0x17e>
   13048:	ldr	r7, [r3, #0]
   1304a:	mov	r2, r6
   1304c:	movs	r1, #10
   1304e:	mov	r0, r7
   13050:	bl	e350 <memchr>
   13054:	cmp	r0, #0
   13056:	beq.w	13192 <__sfvwrite_r+0x2d6>
   1305a:	adds	r0, #1
   1305c:	sub.w	r9, r0, r7
   13060:	b.n	12fe4 <__sfvwrite_r+0x128>
   13062:	ldr	r0, [r4, #0]
   13064:	ldr	r3, [r4, #16]
   13066:	cmp	r0, r3
   13068:	bhi.n	13098 <__sfvwrite_r+0x1dc>
   1306a:	ldr	r2, [r4, #20]
   1306c:	cmp	r2, r6
   1306e:	bhi.n	13098 <__sfvwrite_r+0x1dc>
   13070:	mvn.w	r3, #2147483648	; 0x80000000
   13074:	cmp	r3, r6
   13076:	it	cs
   13078:	movcs	r3, r6
   1307a:	ldr	r1, [r4, #28]
   1307c:	sdiv	r3, r3, r2
   13080:	ldr	r7, [r4, #36]	; 0x24
   13082:	mul.w	r3, r2, r3
   13086:	mov	r0, r8
   13088:	mov	r2, r9
   1308a:	blx	r7
   1308c:	subs.w	sl, r0, #0
   13090:	ble.n	12fba <__sfvwrite_r+0xfe>
   13092:	sub.w	r6, r6, sl
   13096:	b.n	12f86 <__sfvwrite_r+0xca>
   13098:	cmp	fp, r6
   1309a:	mov	sl, fp
   1309c:	it	cs
   1309e:	movcs	sl, r6
   130a0:	mov	r2, sl
   130a2:	mov	r1, r9
   130a4:	bl	df7c <memmove>
   130a8:	ldr	r3, [r4, #8]
   130aa:	ldr	r2, [r4, #0]
   130ac:	sub.w	r3, r3, sl
   130b0:	add	r2, sl
   130b2:	str	r3, [r4, #8]
   130b4:	str	r2, [r4, #0]
   130b6:	cmp	r3, #0
   130b8:	bne.n	13092 <__sfvwrite_r+0x1d6>
   130ba:	mov	r1, r4
   130bc:	mov	r0, r8
   130be:	bl	10d0c <_fflush_r>
   130c2:	cmp	r0, #0
   130c4:	beq.n	13092 <__sfvwrite_r+0x1d6>
   130c6:	b.n	12fba <__sfvwrite_r+0xfe>
   130c8:	ldr	r0, [r4, #0]
   130ca:	mov	fp, r6
   130cc:	mov	r2, r6
   130ce:	b.n	12f6a <__sfvwrite_r+0xae>
   130d0:	mov	r1, r7
   130d2:	str	r2, [sp, #4]
   130d4:	bl	df7c <memmove>
   130d8:	ldr	r2, [sp, #4]
   130da:	ldr	r3, [r4, #8]
   130dc:	subs	r3, r3, r2
   130de:	str	r3, [r4, #8]
   130e0:	ldr	r3, [r4, #0]
   130e2:	add	r3, r2
   130e4:	str	r3, [r4, #0]
   130e6:	mov	fp, r2
   130e8:	b.n	13016 <__sfvwrite_r+0x15a>
   130ea:	ldr	r3, [r4, #0]
   130ec:	ldr	r1, [r4, #16]
   130ee:	sub.w	fp, r3, r1
   130f2:	ldr	r3, [r4, #20]
   130f4:	add.w	sl, r3, r3, lsl #1
   130f8:	add.w	sl, sl, sl, lsr #31
   130fc:	add.w	r3, fp, #1
   13100:	mov.w	sl, sl, asr #1
   13104:	add	r3, r6
   13106:	cmp	r3, sl
   13108:	mov	r2, sl
   1310a:	itt	hi
   1310c:	movhi	sl, r3
   1310e:	movhi	r2, sl
   13110:	lsls	r3, r0, #21
   13112:	bpl.n	1316e <__sfvwrite_r+0x2b2>
   13114:	mov	r1, r2
   13116:	mov	r0, r8
   13118:	bl	d260 <_malloc_r>
   1311c:	cmp	r0, #0
   1311e:	beq.n	13198 <__sfvwrite_r+0x2dc>
   13120:	mov	r2, fp
   13122:	ldr	r1, [r4, #16]
   13124:	str	r0, [sp, #4]
   13126:	bl	a0d4 <memcpy>
   1312a:	ldrh	r2, [r4, #12]
   1312c:	ldr	r3, [sp, #4]
   1312e:	bic.w	r2, r2, #1152	; 0x480
   13132:	orr.w	r2, r2, #128	; 0x80
   13136:	strh	r2, [r4, #12]
   13138:	add.w	r0, r3, fp
   1313c:	str	r3, [r4, #16]
   1313e:	sub.w	r3, sl, fp
   13142:	str.w	sl, [r4, #20]
   13146:	str	r3, [r4, #8]
   13148:	str	r0, [r4, #0]
   1314a:	mov	fp, r6
   1314c:	mov	r2, r6
   1314e:	b.n	12f6a <__sfvwrite_r+0xae>
   13150:	mov	r1, r7
   13152:	mov	r2, fp
   13154:	bl	df7c <memmove>
   13158:	ldr	r3, [r4, #0]
   1315a:	add	r3, fp
   1315c:	str	r3, [r4, #0]
   1315e:	mov	r1, r4
   13160:	mov	r0, r8
   13162:	bl	10d0c <_fflush_r>
   13166:	cmp	r0, #0
   13168:	beq.w	13016 <__sfvwrite_r+0x15a>
   1316c:	b.n	12fba <__sfvwrite_r+0xfe>
   1316e:	mov	r0, r8
   13170:	bl	d7d8 <_realloc_r>
   13174:	mov	r3, r0
   13176:	cmp	r0, #0
   13178:	bne.n	13138 <__sfvwrite_r+0x27c>
   1317a:	ldr	r1, [r4, #16]
   1317c:	mov	r0, r8
   1317e:	bl	e604 <_free_r>
   13182:	ldrsh.w	r3, [r4, #12]
   13186:	movs	r2, #12
   13188:	bic.w	r3, r3, #128	; 0x80
   1318c:	str.w	r2, [r8]
   13190:	b.n	12fbe <__sfvwrite_r+0x102>
   13192:	adds	r2, r6, #1
   13194:	mov	r9, r2
   13196:	b.n	12fe6 <__sfvwrite_r+0x12a>
   13198:	movs	r2, #12
   1319a:	ldrsh.w	r3, [r4, #12]
   1319e:	str.w	r2, [r8]
   131a2:	b.n	12fbe <__sfvwrite_r+0x102>
   131a4:	mov.w	r0, #4294967295
   131a8:	b.n	12f20 <__sfvwrite_r+0x64>
   131aa:	nop
   131ac:	.word	0x7ffffc00

000131b0 <__swsetup_r>:
   131b0:	push	{r3, r4, r5, lr}
   131b2:	ldr	r3, [pc, #196]	; (13278 <__swsetup_r+0xc8>)
   131b4:	ldr	r3, [r3, #0]
   131b6:	mov	r5, r0
   131b8:	mov	r4, r1
   131ba:	cbz	r3, 131c2 <__swsetup_r+0x12>
   131bc:	ldr	r2, [r3, #52]	; 0x34
   131be:	cmp	r2, #0
   131c0:	beq.n	13260 <__swsetup_r+0xb0>
   131c2:	ldrsh.w	r3, [r4, #12]
   131c6:	lsls	r0, r3, #28
   131c8:	uxth	r2, r3
   131ca:	bpl.n	13206 <__swsetup_r+0x56>
   131cc:	ldr	r1, [r4, #16]
   131ce:	cbz	r1, 1321c <__swsetup_r+0x6c>
   131d0:	ands.w	r0, r2, #1
   131d4:	beq.n	131e6 <__swsetup_r+0x36>
   131d6:	movs	r0, #0
   131d8:	str	r0, [r4, #8]
   131da:	ldr	r0, [r4, #20]
   131dc:	negs	r0, r0
   131de:	str	r0, [r4, #24]
   131e0:	cbz	r1, 131f2 <__swsetup_r+0x42>
   131e2:	movs	r0, #0
   131e4:	pop	{r3, r4, r5, pc}
   131e6:	lsls	r5, r2, #30
   131e8:	it	pl
   131ea:	ldrpl	r0, [r4, #20]
   131ec:	str	r0, [r4, #8]
   131ee:	cmp	r1, #0
   131f0:	bne.n	131e2 <__swsetup_r+0x32>
   131f2:	lsls	r2, r2, #24
   131f4:	it	pl
   131f6:	movpl	r0, r1
   131f8:	bpl.n	131e4 <__swsetup_r+0x34>
   131fa:	orr.w	r3, r3, #64	; 0x40
   131fe:	strh	r3, [r4, #12]
   13200:	mov.w	r0, #4294967295
   13204:	pop	{r3, r4, r5, pc}
   13206:	lsls	r1, r2, #27
   13208:	bpl.n	13268 <__swsetup_r+0xb8>
   1320a:	lsls	r2, r2, #29
   1320c:	bmi.n	13238 <__swsetup_r+0x88>
   1320e:	ldr	r1, [r4, #16]
   13210:	orr.w	r3, r3, #8
   13214:	strh	r3, [r4, #12]
   13216:	uxth	r2, r3
   13218:	cmp	r1, #0
   1321a:	bne.n	131d0 <__swsetup_r+0x20>
   1321c:	and.w	r0, r2, #640	; 0x280
   13220:	cmp.w	r0, #512	; 0x200
   13224:	beq.n	131d0 <__swsetup_r+0x20>
   13226:	mov	r1, r4
   13228:	mov	r0, r5
   1322a:	bl	134bc <__smakebuf_r>
   1322e:	ldrsh.w	r3, [r4, #12]
   13232:	ldr	r1, [r4, #16]
   13234:	uxth	r2, r3
   13236:	b.n	131d0 <__swsetup_r+0x20>
   13238:	ldr	r1, [r4, #48]	; 0x30
   1323a:	cbz	r1, 13252 <__swsetup_r+0xa2>
   1323c:	add.w	r2, r4, #64	; 0x40
   13240:	cmp	r1, r2
   13242:	beq.n	1324e <__swsetup_r+0x9e>
   13244:	mov	r0, r5
   13246:	bl	e604 <_free_r>
   1324a:	ldrsh.w	r3, [r4, #12]
   1324e:	movs	r2, #0
   13250:	str	r2, [r4, #48]	; 0x30
   13252:	ldr	r1, [r4, #16]
   13254:	movs	r2, #0
   13256:	strd	r1, r2, [r4]
   1325a:	bic.w	r3, r3, #36	; 0x24
   1325e:	b.n	13210 <__swsetup_r+0x60>
   13260:	mov	r0, r3
   13262:	bl	dce8 <__sinit>
   13266:	b.n	131c2 <__swsetup_r+0x12>
   13268:	movs	r2, #9
   1326a:	orr.w	r3, r3, #64	; 0x40
   1326e:	str	r2, [r5, #0]
   13270:	mov.w	r0, #4294967295
   13274:	strh	r3, [r4, #12]
   13276:	pop	{r3, r4, r5, pc}
   13278:	.word	0x20001a24

0001327c <__fputwc>:
   1327c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13280:	sub	sp, #8
   13282:	mov	sl, r0
   13284:	mov	r8, r1
   13286:	mov	r4, r2
   13288:	bl	e208 <__locale_mb_cur_max>
   1328c:	cmp	r0, #1
   1328e:	bne.n	13298 <__fputwc+0x1c>
   13290:	add.w	r3, r8, #4294967295
   13294:	cmp	r3, #254	; 0xfe
   13296:	bls.n	13306 <__fputwc+0x8a>
   13298:	add.w	r9, sp, #4
   1329c:	mov	r2, r8
   1329e:	add.w	r3, r4, #92	; 0x5c
   132a2:	mov	r1, r9
   132a4:	mov	r0, sl
   132a6:	bl	11cac <_wcrtomb_r>
   132aa:	adds	r2, r0, #1
   132ac:	mov	r6, r0
   132ae:	beq.n	13316 <__fputwc+0x9a>
   132b0:	cbz	r0, 132fc <__fputwc+0x80>
   132b2:	ldrb.w	ip, [sp, #4]
   132b6:	movs	r5, #0
   132b8:	b.n	132ce <__fputwc+0x52>
   132ba:	ldr	r3, [r4, #0]
   132bc:	adds	r2, r3, #1
   132be:	str	r2, [r4, #0]
   132c0:	strb.w	ip, [r3]
   132c4:	adds	r5, #1
   132c6:	cmp	r5, r6
   132c8:	bcs.n	132fc <__fputwc+0x80>
   132ca:	ldrb.w	ip, [r9, #1]!
   132ce:	ldr	r3, [r4, #8]
   132d0:	subs	r3, #1
   132d2:	cmp	r3, #0
   132d4:	str	r3, [r4, #8]
   132d6:	bge.n	132ba <__fputwc+0x3e>
   132d8:	ldr	r7, [r4, #24]
   132da:	cmp	r3, r7
   132dc:	mov	r1, ip
   132de:	mov	r2, r4
   132e0:	mov	r0, sl
   132e2:	blt.n	132ea <__fputwc+0x6e>
   132e4:	cmp.w	ip, #10
   132e8:	bne.n	132ba <__fputwc+0x3e>
   132ea:	bl	13594 <__swbuf_r>
   132ee:	adds	r3, r0, #1
   132f0:	bne.n	132c4 <__fputwc+0x48>
   132f2:	mov	r6, r0
   132f4:	mov	r0, r6
   132f6:	add	sp, #8
   132f8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   132fc:	mov	r6, r8
   132fe:	mov	r0, r6
   13300:	add	sp, #8
   13302:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13306:	uxtb.w	ip, r8
   1330a:	strb.w	ip, [sp, #4]
   1330e:	mov	r6, r0
   13310:	add.w	r9, sp, #4
   13314:	b.n	132b6 <__fputwc+0x3a>
   13316:	ldrh	r3, [r4, #12]
   13318:	mov	r0, r6
   1331a:	orr.w	r3, r3, #64	; 0x40
   1331e:	strh	r3, [r4, #12]
   13320:	add	sp, #8
   13322:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13326:	nop

00013328 <_fputwc_r>:
   13328:	push	{r4, r5, lr}
   1332a:	ldr	r3, [r2, #100]	; 0x64
   1332c:	tst.w	r3, #1
   13330:	ldrsh.w	r3, [r2, #12]
   13334:	mov	r4, r2
   13336:	sub	sp, #12
   13338:	mov	r5, r0
   1333a:	uxth	r2, r3
   1333c:	bne.n	13342 <_fputwc_r+0x1a>
   1333e:	lsls	r0, r3, #22
   13340:	bpl.n	1337c <_fputwc_r+0x54>
   13342:	lsls	r0, r2, #18
   13344:	bmi.n	13354 <_fputwc_r+0x2c>
   13346:	ldr	r2, [r4, #100]	; 0x64
   13348:	orr.w	r3, r3, #8192	; 0x2000
   1334c:	orr.w	r2, r2, #8192	; 0x2000
   13350:	strh	r3, [r4, #12]
   13352:	str	r2, [r4, #100]	; 0x64
   13354:	mov	r2, r4
   13356:	mov	r0, r5
   13358:	bl	1327c <__fputwc>
   1335c:	ldr	r3, [r4, #100]	; 0x64
   1335e:	lsls	r2, r3, #31
   13360:	mov	r5, r0
   13362:	bmi.n	1336a <_fputwc_r+0x42>
   13364:	ldrh	r3, [r4, #12]
   13366:	lsls	r3, r3, #22
   13368:	bpl.n	13370 <_fputwc_r+0x48>
   1336a:	mov	r0, r5
   1336c:	add	sp, #12
   1336e:	pop	{r4, r5, pc}
   13370:	ldr	r0, [r4, #88]	; 0x58
   13372:	bl	e340 <__retarget_lock_release_recursive>
   13376:	mov	r0, r5
   13378:	add	sp, #12
   1337a:	pop	{r4, r5, pc}
   1337c:	ldr	r0, [r4, #88]	; 0x58
   1337e:	str	r1, [sp, #4]
   13380:	bl	e33c <__retarget_lock_acquire_recursive>
   13384:	ldrsh.w	r3, [r4, #12]
   13388:	ldr	r1, [sp, #4]
   1338a:	uxth	r2, r3
   1338c:	b.n	13342 <_fputwc_r+0x1a>
   1338e:	nop

00013390 <_wcsnrtombs_l>:
   13390:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13394:	sub	sp, #44	; 0x2c
   13396:	ldrd	r8, sl, [sp, #84]	; 0x54
   1339a:	ldr	r7, [sp, #80]	; 0x50
   1339c:	str	r1, [sp, #12]
   1339e:	mov	r9, r0
   133a0:	str	r2, [sp, #20]
   133a2:	mov	r6, r3
   133a4:	cmp.w	r8, #0
   133a8:	beq.n	13464 <_wcsnrtombs_l+0xd4>
   133aa:	ldr	r3, [sp, #12]
   133ac:	cmp	r3, #0
   133ae:	beq.n	1346e <_wcsnrtombs_l+0xde>
   133b0:	ldr	r3, [sp, #20]
   133b2:	ldr	r5, [r3, #0]
   133b4:	cmp	r7, #0
   133b6:	beq.n	1348e <_wcsnrtombs_l+0xfe>
   133b8:	subs	r4, r6, #1
   133ba:	cbz	r6, 13410 <_wcsnrtombs_l+0x80>
   133bc:	ldr	r3, [sp, #12]
   133be:	str	r3, [sp, #16]
   133c0:	subs	r5, #4
   133c2:	movs	r6, #0
   133c4:	str	r5, [sp, #4]
   133c6:	b.n	133e0 <_wcsnrtombs_l+0x50>
   133c8:	ldr	r3, [sp, #12]
   133ca:	cbnz	r3, 13418 <_wcsnrtombs_l+0x88>
   133cc:	ldr	r3, [sp, #4]
   133ce:	ldr	r2, [r3, #0]
   133d0:	cmp	r2, #0
   133d2:	beq.n	1344a <_wcsnrtombs_l+0xba>
   133d4:	cmp	ip, r7
   133d6:	bcs.n	13492 <_wcsnrtombs_l+0x102>
   133d8:	subs	r4, #1
   133da:	adds	r3, r4, #1
   133dc:	mov	r6, ip
   133de:	beq.n	13410 <_wcsnrtombs_l+0x80>
   133e0:	ldr.w	r3, [r8]
   133e4:	str	r3, [sp, #8]
   133e6:	ldr	r3, [sp, #4]
   133e8:	ldr.w	r5, [sl, #224]	; 0xe0
   133ec:	ldr.w	r2, [r3, #4]!
   133f0:	str	r3, [sp, #4]
   133f2:	add	r1, sp, #28
   133f4:	mov	r3, r8
   133f6:	mov	r0, r9
   133f8:	ldr.w	fp, [r8, #4]
   133fc:	blx	r5
   133fe:	adds	r2, r0, #1
   13400:	beq.n	13478 <_wcsnrtombs_l+0xe8>
   13402:	add.w	ip, r0, r6
   13406:	cmp	ip, r7
   13408:	bls.n	133c8 <_wcsnrtombs_l+0x38>
   1340a:	ldr	r3, [sp, #8]
   1340c:	strd	r3, fp, [r8]
   13410:	mov	r0, r6
   13412:	add	sp, #44	; 0x2c
   13414:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13418:	cmp	r0, #0
   1341a:	ble.n	1343a <_wcsnrtombs_l+0xaa>
   1341c:	ldr	r3, [sp, #16]
   1341e:	ldr	r5, [sp, #4]
   13420:	add	r0, r3
   13422:	subs	r2, r3, #1
   13424:	add	r1, sp, #28
   13426:	add.w	lr, r0, #4294967295
   1342a:	ldrb.w	r3, [r1], #1
   1342e:	strb.w	r3, [r2, #1]!
   13432:	cmp	r2, lr
   13434:	bne.n	1342a <_wcsnrtombs_l+0x9a>
   13436:	str	r5, [sp, #4]
   13438:	str	r0, [sp, #16]
   1343a:	ldr	r3, [sp, #20]
   1343c:	ldr	r2, [r3, #0]
   1343e:	adds	r2, #4
   13440:	str	r2, [r3, #0]
   13442:	ldr	r3, [sp, #4]
   13444:	ldr	r2, [r3, #0]
   13446:	cmp	r2, #0
   13448:	bne.n	133d4 <_wcsnrtombs_l+0x44>
   1344a:	ldr	r3, [sp, #12]
   1344c:	cbz	r3, 13452 <_wcsnrtombs_l+0xc2>
   1344e:	ldr	r3, [sp, #20]
   13450:	str	r2, [r3, #0]
   13452:	add.w	r6, ip, #4294967295
   13456:	movs	r2, #0
   13458:	mov	r0, r6
   1345a:	str.w	r2, [r8]
   1345e:	add	sp, #44	; 0x2c
   13460:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13464:	ldr	r3, [sp, #12]
   13466:	add.w	r8, r0, #268	; 0x10c
   1346a:	cmp	r3, #0
   1346c:	bne.n	133b0 <_wcsnrtombs_l+0x20>
   1346e:	ldr	r3, [sp, #20]
   13470:	mov.w	r7, #4294967295
   13474:	ldr	r5, [r3, #0]
   13476:	b.n	133b8 <_wcsnrtombs_l+0x28>
   13478:	mov	r6, r0
   1347a:	movs	r1, #138	; 0x8a
   1347c:	movs	r2, #0
   1347e:	mov	r0, r6
   13480:	str.w	r1, [r9]
   13484:	str.w	r2, [r8]
   13488:	add	sp, #44	; 0x2c
   1348a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1348e:	mov	r6, r7
   13490:	b.n	13410 <_wcsnrtombs_l+0x80>
   13492:	mov	r6, ip
   13494:	b.n	13410 <_wcsnrtombs_l+0x80>
   13496:	nop

00013498 <_wcsnrtombs_r>:
   13498:	push	{r4, lr}
   1349a:	sub	sp, #16
   1349c:	ldr	r4, [pc, #20]	; (134b4 <_wcsnrtombs_r+0x1c>)
   1349e:	ldr	r0, [sp, #24]
   134a0:	str	r0, [sp, #0]
   134a2:	ldr	r0, [sp, #28]
   134a4:	str	r0, [sp, #4]
   134a6:	ldr	r0, [pc, #16]	; (134b8 <_wcsnrtombs_r+0x20>)
   134a8:	ldr	r0, [r0, #0]
   134aa:	str	r4, [sp, #8]
   134ac:	bl	13390 <_wcsnrtombs_l>
   134b0:	add	sp, #16
   134b2:	pop	{r4, pc}
   134b4:	.word	0x2000149c
   134b8:	.word	0x20001a24

000134bc <__smakebuf_r>:
   134bc:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   134c0:	ldrh	r3, [r1, #12]
   134c2:	mov	r4, r1
   134c4:	lsls	r1, r3, #30
   134c6:	sub	sp, #88	; 0x58
   134c8:	bpl.n	134dc <__smakebuf_r+0x20>
   134ca:	add.w	r3, r4, #67	; 0x43
   134ce:	movs	r2, #1
   134d0:	strd	r3, r2, [r4, #16]
   134d4:	str	r3, [r4, #0]
   134d6:	add	sp, #88	; 0x58
   134d8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   134dc:	ldrsh.w	r1, [r4, #14]
   134e0:	cmp	r1, #0
   134e2:	mov	r6, r0
   134e4:	blt.n	13532 <__smakebuf_r+0x76>
   134e6:	mov	r2, sp
   134e8:	bl	13644 <_fstat_r>
   134ec:	cmp	r0, #0
   134ee:	blt.n	13530 <__smakebuf_r+0x74>
   134f0:	ldr	r5, [sp, #4]
   134f2:	and.w	r5, r5, #61440	; 0xf000
   134f6:	sub.w	r5, r5, #8192	; 0x2000
   134fa:	clz	r5, r5
   134fe:	mov.w	r8, #1024	; 0x400
   13502:	lsrs	r5, r5, #5
   13504:	mov.w	r7, #2048	; 0x800
   13508:	mov	r1, r8
   1350a:	mov	r0, r6
   1350c:	bl	d260 <_malloc_r>
   13510:	cbz	r0, 1354c <__smakebuf_r+0x90>
   13512:	ldrsh.w	r3, [r4, #12]
   13516:	str.w	r8, [r4, #20]
   1351a:	orr.w	r3, r3, #128	; 0x80
   1351e:	str	r0, [r4, #0]
   13520:	str	r0, [r4, #16]
   13522:	strh	r3, [r4, #12]
   13524:	cbnz	r5, 13574 <__smakebuf_r+0xb8>
   13526:	orrs	r3, r7
   13528:	strh	r3, [r4, #12]
   1352a:	add	sp, #88	; 0x58
   1352c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13530:	ldrh	r3, [r4, #12]
   13532:	ands.w	r5, r3, #128	; 0x80
   13536:	beq.n	1356c <__smakebuf_r+0xb0>
   13538:	mov.w	r8, #64	; 0x40
   1353c:	movs	r5, #0
   1353e:	mov	r1, r8
   13540:	mov	r0, r6
   13542:	mov	r7, r5
   13544:	bl	d260 <_malloc_r>
   13548:	cmp	r0, #0
   1354a:	bne.n	13512 <__smakebuf_r+0x56>
   1354c:	ldrsh.w	r3, [r4, #12]
   13550:	lsls	r2, r3, #22
   13552:	bmi.n	134d6 <__smakebuf_r+0x1a>
   13554:	bic.w	r3, r3, #3
   13558:	add.w	r2, r4, #67	; 0x43
   1355c:	orr.w	r3, r3, #2
   13560:	movs	r1, #1
   13562:	strd	r2, r1, [r4, #16]
   13566:	strh	r3, [r4, #12]
   13568:	str	r2, [r4, #0]
   1356a:	b.n	134d6 <__smakebuf_r+0x1a>
   1356c:	mov.w	r8, #1024	; 0x400
   13570:	mov	r7, r5
   13572:	b.n	13508 <__smakebuf_r+0x4c>
   13574:	ldrsh.w	r1, [r4, #14]
   13578:	mov	r0, r6
   1357a:	bl	13670 <_isatty_r>
   1357e:	cbnz	r0, 13586 <__smakebuf_r+0xca>
   13580:	ldrsh.w	r3, [r4, #12]
   13584:	b.n	13526 <__smakebuf_r+0x6a>
   13586:	ldrh	r3, [r4, #12]
   13588:	bic.w	r3, r3, #3
   1358c:	orr.w	r3, r3, #1
   13590:	sxth	r3, r3
   13592:	b.n	13526 <__smakebuf_r+0x6a>

00013594 <__swbuf_r>:
   13594:	push	{r3, r4, r5, r6, r7, lr}
   13596:	mov	r5, r1
   13598:	mov	r4, r2
   1359a:	mov	r6, r0
   1359c:	cbz	r0, 135a4 <__swbuf_r+0x10>
   1359e:	ldr	r3, [r0, #52]	; 0x34
   135a0:	cmp	r3, #0
   135a2:	beq.n	1363e <__swbuf_r+0xaa>
   135a4:	ldrsh.w	r2, [r4, #12]
   135a8:	ldr	r3, [r4, #24]
   135aa:	str	r3, [r4, #8]
   135ac:	lsls	r7, r2, #28
   135ae:	uxth	r0, r2
   135b0:	bpl.n	135ea <__swbuf_r+0x56>
   135b2:	ldr	r3, [r4, #16]
   135b4:	cbz	r3, 135ea <__swbuf_r+0x56>
   135b6:	uxtb	r5, r5
   135b8:	lsls	r1, r0, #18
   135ba:	mov	r7, r5
   135bc:	bpl.n	13604 <__swbuf_r+0x70>
   135be:	ldr	r2, [r4, #0]
   135c0:	ldr	r1, [r4, #20]
   135c2:	subs	r3, r2, r3
   135c4:	cmp	r1, r3
   135c6:	ble.n	1361c <__swbuf_r+0x88>
   135c8:	adds	r3, #1
   135ca:	ldr	r1, [r4, #8]
   135cc:	subs	r1, #1
   135ce:	str	r1, [r4, #8]
   135d0:	adds	r1, r2, #1
   135d2:	str	r1, [r4, #0]
   135d4:	strb	r5, [r2, #0]
   135d6:	ldr	r2, [r4, #20]
   135d8:	cmp	r2, r3
   135da:	beq.n	1362c <__swbuf_r+0x98>
   135dc:	ldrh	r3, [r4, #12]
   135de:	lsls	r3, r3, #31
   135e0:	bpl.n	135e6 <__swbuf_r+0x52>
   135e2:	cmp	r5, #10
   135e4:	beq.n	1362c <__swbuf_r+0x98>
   135e6:	mov	r0, r7
   135e8:	pop	{r3, r4, r5, r6, r7, pc}
   135ea:	mov	r1, r4
   135ec:	mov	r0, r6
   135ee:	bl	131b0 <__swsetup_r>
   135f2:	cbnz	r0, 13638 <__swbuf_r+0xa4>
   135f4:	ldrsh.w	r2, [r4, #12]
   135f8:	ldr	r3, [r4, #16]
   135fa:	uxth	r0, r2
   135fc:	uxtb	r5, r5
   135fe:	lsls	r1, r0, #18
   13600:	mov	r7, r5
   13602:	bmi.n	135be <__swbuf_r+0x2a>
   13604:	orr.w	r2, r2, #8192	; 0x2000
   13608:	strh	r2, [r4, #12]
   1360a:	ldr	r2, [r4, #100]	; 0x64
   1360c:	ldr	r1, [r4, #20]
   1360e:	bic.w	r2, r2, #8192	; 0x2000
   13612:	str	r2, [r4, #100]	; 0x64
   13614:	ldr	r2, [r4, #0]
   13616:	subs	r3, r2, r3
   13618:	cmp	r1, r3
   1361a:	bgt.n	135c8 <__swbuf_r+0x34>
   1361c:	mov	r1, r4
   1361e:	mov	r0, r6
   13620:	bl	10d0c <_fflush_r>
   13624:	cbnz	r0, 13638 <__swbuf_r+0xa4>
   13626:	ldr	r2, [r4, #0]
   13628:	movs	r3, #1
   1362a:	b.n	135ca <__swbuf_r+0x36>
   1362c:	mov	r1, r4
   1362e:	mov	r0, r6
   13630:	bl	10d0c <_fflush_r>
   13634:	cmp	r0, #0
   13636:	beq.n	135e6 <__swbuf_r+0x52>
   13638:	mov.w	r7, #4294967295
   1363c:	b.n	135e6 <__swbuf_r+0x52>
   1363e:	bl	dce8 <__sinit>
   13642:	b.n	135a4 <__swbuf_r+0x10>

00013644 <_fstat_r>:
   13644:	push	{r4, r5, r6, lr}
   13646:	mov	r4, r1
   13648:	ldr	r5, [pc, #32]	; (1366c <_fstat_r+0x28>)
   1364a:	mov	r3, r0
   1364c:	movs	r6, #0
   1364e:	mov	r0, r4
   13650:	mov	r1, r2
   13652:	mov	r4, r3
   13654:	str	r6, [r5, #0]
   13656:	bl	ba90 <_fstat>
   1365a:	adds	r3, r0, #1
   1365c:	beq.n	13660 <_fstat_r+0x1c>
   1365e:	pop	{r4, r5, r6, pc}
   13660:	ldr	r3, [r5, #0]
   13662:	cmp	r3, #0
   13664:	beq.n	1365e <_fstat_r+0x1a>
   13666:	str	r3, [r4, #0]
   13668:	pop	{r4, r5, r6, pc}
   1366a:	nop
   1366c:	.word	0x20007998

00013670 <_isatty_r>:
   13670:	push	{r3, r4, r5, lr}
   13672:	ldr	r5, [pc, #28]	; (13690 <_isatty_r+0x20>)
   13674:	movs	r2, #0
   13676:	mov	r4, r0
   13678:	mov	r0, r1
   1367a:	str	r2, [r5, #0]
   1367c:	bl	ba9c <_isatty>
   13680:	adds	r3, r0, #1
   13682:	beq.n	13686 <_isatty_r+0x16>
   13684:	pop	{r3, r4, r5, pc}
   13686:	ldr	r3, [r5, #0]
   13688:	cmp	r3, #0
   1368a:	beq.n	13684 <_isatty_r+0x14>
   1368c:	str	r3, [r4, #0]
   1368e:	pop	{r3, r4, r5, pc}
   13690:	.word	0x20007998
   13694:	.word	0x00000000

00013698 <___ZN11AudioStream17initialize_memoryEP18audio_block_structj_veneer>:
   13698:	ldr.w	pc, [pc]	; 1369c <___ZN11AudioStream17initialize_memoryEP18audio_block_structj_veneer+0x4>
   1369c:	.word	0x60001d99

000136a0 <___reboot_Teensyduino__veneer>:
   136a0:	ldr.w	pc, [pc]	; 136a4 <___reboot_Teensyduino__veneer+0x4>
   136a4:	.word	0x60001731

000136a8 <___init_veneer>:
   136a8:	ldr.w	pc, [pc]	; 136ac <___init_veneer+0x4>
   136ac:	.word	0x60001eb5

Disassembly of section .fini:

000136b0 <_fini>:
   136b0:	push	{r3, r4, r5, r6, r7, lr}
   136b2:	nop

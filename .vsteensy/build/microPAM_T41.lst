
.vsteensy/build/microPAM_T41.elf:     file format elf32-littlearm

SYMBOL TABLE:
60000000 l    d  .text.headers	00000000 .text.headers
60001400 l    d  .text.code	00000000 .text.code
60001f8c l    d  .text.progmem	00000000 .text.progmem
00000000 l    d  .text.itcm	00000000 .text.itcm
00013670 l    d  .fini	00000000 .fini
00013674 l    d  .ARM.exidx	00000000 .ARM.exidx
20000000 l    d  .data	00000000 .data
20001ec0 l    d  .bss	00000000 .bss
20200000 l    d  .bss.dma	00000000 .bss.dma
70000000 l    d  .bss.extram	00000000 .bss.extram
600178b4 l    d  .text.csf	00000000 .text.csf
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_loclists	00000000 .debug_loclists
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_rnglists	00000000 .debug_rnglists
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 l    df *ABS*	00000000 bootdata.c
00000000 l    df *ABS*	00000000 startup.c
60001400 l     F .text.code	00000016 memory_copy
60001418 l     F .text.code	00000010 memory_clear
00000000 l    df *ABS*	00000000 usb.c
0000ac08 l     F .text.itcm	000000c8 endpoint0_receive
0000acd0 l     F .text.itcm	00000088 schedule_transfer
0000ad58 l     F .text.itcm	00000036 run_callbacks
0000ad90 l     F .text.itcm	00000098 endpoint0_transmit.constprop.0
20007984 l     O .bss	00000008 endpoint0_buffer
2000798c l     O .bss	00000004 endpoint0_notify_mask
200052f8 l     O .bss	00000008 endpoint0_setupdata
20007990 l     O .bss	00000004 endpointN_notify_mask
20008070 l     O .bss	00000008 reply_buffer
20008165 l     O .bss	00000001 sof_usage
20008173 l     O .bss	00000001 usb_reboot_timer
00000000 l    df *ABS*	00000000 tempmon.c
200080cc l     O .bss	00000004 s_hotCount
200080d0 l     O .bss	00000004 s_hotTemp
200080d4 l     O .bss	00000004 s_hot_ROOM
200080d8 l     O .bss	00000004 s_roomC_hotC
00000000 l    df *ABS*	00000000 audiostream.cpp
00000000 l    df *ABS*	00000000 analog.c
2000815f l     O .bss	00000001 calibrating
00000000 l    df *ABS*	00000000 crti.o
00000000 l    df *ABS*	00000000 crtn.o
00000000 l    df *ABS*	00000000 crtstuff.c
00000020 l     F .text.itcm	00000000 register_tm_clones
00000044 l     F .text.itcm	00000000 frame_dummy
20007c44 l     O .bss	00000000 object.0
60001f10 l     O .text.code	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 main.cpp
000011a8 l     F .text.itcm	00000654 storeData(int) [clone .part.0]
20200000 l     O .bss.dma	00003cf0 setup::data
00001a28 l     F .text.itcm	000001c4 _GLOBAL__sub_I_DirPrefix
20005c8c l     O .bss	00000400 i2s_rx_buffer_32
2000608c l     O .bss	00000100 dout
200061fc l     O .bss	00000100 outData
200062fc l     O .bss	00000100 tempData
200065cc l     O .bss	00000004 loop::ic
200065d0 l     O .bss	00000004 loop::t0
20008140 l     O .bss	00000002 loop::status
200065d4 l     O .bss	00000004 AudioCompress::compress(void*)::nout
00000000 l    df *ABS*	00000000 output_i2s_oct.cpp
00001bec l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN17AudioOutputI2SOct13block_ch1_1stE
00000000 l    df *ABS*	00000000 output_pwm.cpp
00001c04 l     F .text.itcm	0000001c __tcf_0
00001c20 l     F .text.itcm	00000030 _GLOBAL__sub_I__ZN14AudioOutputPWM21update_responsibilityE
00000000 l    df *ABS*	00000000 input_i2s.cpp
00001c50 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE
00000000 l    df *ABS*	00000000 output_pt8211_2.cpp
00001c68 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN19AudioOutputPT8211_214block_left_1stE
00000000 l    df *ABS*	00000000 output_pt8211.cpp
00001c80 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE
00000000 l    df *ABS*	00000000 input_spdif3.cpp
00001c98 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN16AudioInputSPDIF310block_leftE
00000000 l    df *ABS*	00000000 input_tdm2.cpp
00001cb0 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN14AudioInputTDM214block_incomingE
00000000 l    df *ABS*	00000000 input_adc.cpp
00001cc8 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN16AudioInputAnalog3dmaE
00000000 l    df *ABS*	00000000 input_pdm_i2s2.cpp
00001ce0 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN14AudioInputPDM210block_leftE
00000000 l    df *ABS*	00000000 input_i2s2.cpp
00001cf8 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN14AudioInputI2S210block_leftE
00000000 l    df *ABS*	00000000 input_i2s_quad.cpp
00001d10 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E
00000000 l    df *ABS*	00000000 output_i2s_quad.cpp
00001d28 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE
00000000 l    df *ABS*	00000000 output_tdm2.cpp
00001e50 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN15AudioOutputTDM211block_inputE
00000000 l    df *ABS*	00000000 output_i2s2.cpp
00001e68 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN15AudioOutputI2S214block_left_1stE
00000000 l    df *ABS*	00000000 output_i2s_hex.cpp
00001e80 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN17AudioOutputI2SHex13block_ch1_1stE
00000000 l    df *ABS*	00000000 input_i2s_oct.cpp
00001e98 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E
00000000 l    df *ABS*	00000000 output_tdm.cpp
00001eb0 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE
00000000 l    df *ABS*	00000000 input_tdm.cpp
00001ec8 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE
00000000 l    df *ABS*	00000000 input_i2s_hex.cpp
00001ee0 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E
00000000 l    df *ABS*	00000000 output_spdif3.cpp
00001ef8 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN17AudioOutputSPDIF314block_left_1stE
00000000 l    df *ABS*	00000000 output_mqs.cpp
00001f10 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN14AudioOutputMQS14block_left_1stE
00000000 l    df *ABS*	00000000 async_input_spdif3.cpp
0000201c l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN21AsyncAudioInputSPDIF310microsLastE
00000000 l    df *ABS*	00000000 input_pdm.cpp
00002034 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE
00000000 l    df *ABS*	00000000 output_i2s.cpp
0000204c l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE
00000000 l    df *ABS*	00000000 output_spdif2.cpp
00002064 l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN17AudioOutputSPDIF214block_left_1stE
00000000 l    df *ABS*	00000000 output_spdif.cpp
0000207c l     F .text.itcm	00000018 _GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE
00000000 l    df *ABS*	00000000 wireimxrt.cpp
000023f0 l     F .text.itcm	00000044 _GLOBAL__sub_I__ZN7TwoWire5beginEv
00000000 l    df *ABS*	00000000 spi.cpp
0000244c l     F .text.itcm	00000060 SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]
00002914 l     F .text.itcm	00000048 _GLOBAL__sub_I__ZN8SPIClass5beginEv
00000000 l    df *ABS*	00000000 sd.cpp
00003028 l     F .text.itcm	0000008c _GLOBAL__sub_I_SD
00000000 l    df *ABS*	00000000 usb_desc.c
20001a20 l     O .data	00000012 device_descriptor
6000236c l     O .text.progmem	0000000a qualifier_descriptor
00000000 l    df *ABS*	00000000 serialevent.cpp
00000000 l    df *ABS*	00000000 effect_delay_ext.cpp
00000000 l    df *ABS*	00000000 record_queue.cpp
00000000 l    df *ABS*	00000000 time.cpp
20000764 l     O .data	0000000c monthDays
00000000 l    df *ABS*	00000000 fsstructs.cpp
00000000 l    df *ABS*	00000000 fscache.cpp
00000000 l    df *ABS*	00000000 upcase.cpp
20000564 l     O .data	0000012c lookupTable
20000690 l     O .data	000000d4 mapTable
00000000 l    df *ABS*	00000000 fsdatetime.cpp
000032b4 l     F .text.itcm	00000014 dateTimeMs10(unsigned short*, unsigned short*, unsigned char*)
00000000 l    df *ABS*	00000000 exfatformatter.cpp
000032e0 l     F .text.itcm	00000020 Print::write(char const*) [clone .isra.0]
00000000 l    df *ABS*	00000000 exfatname.cpp
00000000 l    df *ABS*	00000000 exfatfile.cpp
00000000 l    df *ABS*	00000000 exfatpartition.cpp
00000000 l    df *ABS*	00000000 exfatfilewrite.cpp
00000000 l    df *ABS*	00000000 fatformatter.cpp
00000000 l    df *ABS*	00000000 fatname.cpp
00000000 l    df *ABS*	00000000 fatfile.cpp
00005a80 l     F .text.itcm	000000bc FatFile::sync() [clone .part.0]
00000000 l    df *ABS*	00000000 fatpartition.cpp
00006aa8 l     F .text.itcm	00000068 FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]
00006b10 l     F .text.itcm	0000005a FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]
00000000 l    df *ABS*	00000000 fatfilelfn.cpp
00000000 l    df *ABS*	00000000 fsfile.cpp
00000000 l    df *ABS*	00000000 fsvolume.cpp
00000000 l    df *ABS*	00000000 fsnew.cpp
00000000 l    df *ABS*	00000000 sdspicard.cpp
00000000 l    df *ABS*	00000000 sdioteensy.cpp
000089b0 l     F .text.itcm	00000030 sdIrs()
000089e0 l     F .text.itcm	00000014 isBusyDat()
000089f4 l     F .text.itcm	0000000c isBusyDMA()
00008a00 l     F .text.itcm	000000cc setSdclk(unsigned long)
00008c14 l     F .text.itcm	00000068 waitDmaStatus()
00008c7c l     F .text.itcm	00000088 waitTransferComplete() [clone .part.0]
00008db8 l     F .text.itcm	00000098 cardCommand(unsigned long, unsigned long)
00008e50 l     F .text.itcm	00000060 readReg16(unsigned long, void*)
00008f4c l     F .text.itcm	0000002c isBusyCMD13()
000091cc l     F .text.itcm	0000010c rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)
20008152 l     O .bss	00000001 m_initDone
20005c84 l     O .bss	00000004 m_sdClkKhz
20008153 l     O .bss	00000001 m_version2
20005c88 l     O .bss	00000004 m_errorLine
20008154 l     O .bss	00000001 m_highCapacity
20008155 l     O .bss	00000001 m_transferActive
2000618c l     O .bss	00000010 m_cid
2000619c l     O .bss	00000010 m_csd
200061ac l     O .bss	00000004 m_ocr
200061b0 l     O .bss	00000004 m_rca
200061b4 l     O .bss	00000008 m_scr
200061bc l     O .bss	00000040 m_sds
200063fc l     O .bss	00000004 m_busyFcn
20008156 l     O .bss	00000001 m_dmaBusy
20006400 l     O .bss	00000004 m_irqstat
20001a4e l     O .data	00000001 m_errorCode
00000000 l    df *ABS*	00000000 sdspiteensy3.cpp
00000000 l    df *ABS*	00000000 sdspichipselect.cpp
00000000 l    df *ABS*	00000000 memcpy-armv7m.o
00000000 l    df *ABS*	00000000 usb_serial.c
0000a1d8 l     F .text.itcm	00000060 rx_queue_transfer
20001f20 l     O .bss	00001000 rx_buffer
0000a238 l     F .text.itcm	000000b4 rx_event
0000a2ec l     F .text.itcm	00000090 usb_serial_flush_callback
20003240 l     O .bss	00002000 txbuffer
0000a37c l     F .text.itcm	000001b8 usb_serial_write.part.0
20008078 l     O .bss	00000004 rx_available
20008080 l     O .bss	00000010 rx_count
20008161 l     O .bss	00000001 rx_head
2000809c l     O .bss	00000010 rx_index
200080b8 l     O .bss	00000009 rx_list
20008146 l     O .bss	00000002 rx_packet_size
20008163 l     O .bss	00000001 rx_tail
20002f20 l     O .bss	00000100 rx_transfer
20008166 l     O .bss	00000001 transmit_previous_timeout
2000814a l     O .bss	00000002 tx_available
20008168 l     O .bss	00000001 tx_head
2000816a l     O .bss	00000001 tx_noautoflush
2000814e l     O .bss	00000002 tx_packet_size
20003120 l     O .bss	00000080 tx_transfer
00000000 l    df *ABS*	00000000 clockspeed.c
00000000 l    df *ABS*	00000000 delay.c
00000000 l    df *ABS*	00000000 rtc.c
00000000 l    df *ABS*	00000000 sm_pool.c
00000000 l    df *ABS*	00000000 digital.c
00000000 l    df *ABS*	00000000 pwm.c
00000000 l    df *ABS*	00000000 usb_midi.c
0000be30 l     F .text.itcm	00000060 rx_queue_transfer
0000be90 l     F .text.itcm	00000064 rx_event
2000807c l     O .bss	00000004 rx_available
20008090 l     O .bss	0000000c rx_count
20008162 l     O .bss	00000001 rx_head
200080ac l     O .bss	0000000c rx_index
200080c4 l     O .bss	00000007 rx_list
20008148 l     O .bss	00000002 rx_packet_size
20008164 l     O .bss	00000001 rx_tail
20003020 l     O .bss	000000c0 rx_transfer
20008167 l     O .bss	00000001 transmit_previous_timeout
2000814c l     O .bss	00000002 tx_available
20008169 l     O .bss	00000001 tx_head
2000816b l     O .bss	00000001 tx_noautoflush
20008150 l     O .bss	00000002 tx_packet_size
200031a0 l     O .bss	00000080 tx_transfer
20203d00 l     O .bss.dma	00000c00 rx_buffer
20204900 l     O .bss.dma	00000800 txbuffer
00000000 l    df *ABS*	00000000 yield.cpp
2000815d l     O .bss	00000001 yield::running
00000000 l    df *ABS*	00000000 eventresponder.cpp
00000000 l    df *ABS*	00000000 dmachannel.cpp
00000000 l    df *ABS*	00000000 usb_inst.cpp
00000000 l    df *ABS*	00000000 time.cpp
20000770 l     O .data	0000000c monthDays
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 usb_audio.cpp
0000c920 l     F .text.itcm	00000098 copy_to_buffers(unsigned long const*, short*, short*, unsigned int)
0000c9b8 l     F .text.itcm	0000005c sync_event(transfer_struct*)
0000cc80 l     F .text.itcm	00000054 rx_event(transfer_struct*)
0000cdf4 l     F .text.itcm	00000060 tx_event(transfer_struct*)
20001484 l     O .data	00000004 usb_audio_transmit_callback::count
20205280 l     O .bss.dma	000000b4 rx_buffer
20205340 l     O .bss.dma	000000b4 tx_buffer
00000000 l    df *ABS*	00000000 print.cpp
00000000 l    df *ABS*	00000000 new.cpp
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 intervaltimer.cpp
0000d0e4 l     F .text.itcm	00000058 pit_isr()
20001ec0 l     O .bss	00000010 funct_table
00000000 l    df *ABS*	00000000 atexit_arm.o
00000000 l    df *ABS*	00000000 libc_a-malloc.o
00000000 l    df *ABS*	00000000 libc_a-mallocr.o
00000000 l    df *ABS*	00000000 libc_a-mlock.o
00000000 l    df *ABS*	00000000 libc_a-reallocr.o
00000000 l    df *ABS*	00000000 libc_a-cxa_atexit.o
00000000 l    df *ABS*	00000000 libc_a-findfp.o
0000db8c l     F .text.itcm	00000018 stdio_exit_handler
0000dba4 l     F .text.itcm	00000040 cleanup_stdio
0000dbe4 l     F .text.itcm	000000d4 global_stdio_init.part.0
00000000 l    df *ABS*	00000000 libc_a-fwalk.o
00000000 l    df *ABS*	00000000 libc_a-sprintf.o
00000000 l    df *ABS*	00000000 libc_a-stdio.o
00000000 l    df *ABS*	00000000 libc_a-vdprintf.o
00000000 l    df *ABS*	00000000 libc_a-vasnprintf.o
00000000 l    df *ABS*	00000000 libc_a-memcmp.o
00000000 l    df *ABS*	00000000 libc_a-memmove.o
00000000 l    df *ABS*	00000000 libc_a-memset.o
00000000 l    df *ABS*	00000000 libc_a-strncmp.o
00000000 l    df *ABS*	00000000 libc_a-strncpy.o
00000000 l    df *ABS*	00000000 libc_a-locale.o
00000000 l    df *ABS*	00000000 libc_a-closer.o
00000000 l    df *ABS*	00000000 libc_a-lseekr.o
00000000 l    df *ABS*	00000000 libc_a-readr.o
00000000 l    df *ABS*	00000000 libc_a-sbrkr.o
00000000 l    df *ABS*	00000000 libc_a-writer.o
00000000 l    df *ABS*	00000000 libc_a-errno.o
00000000 l    df *ABS*	00000000 libc_a-init.o
00000000 l    df *ABS*	00000000 libc_a-lock.o
00000000 l    df *ABS*	00000000 libc_a-memchr.o
00000000 l    df *ABS*	00000000 libc_a-strlen.o
00000000 l    df *ABS*	00000000 libc_a-__atexit.o
00000000 l    df *ABS*	00000000 libc_a-freer.o
00000000 l    df *ABS*	00000000 libc_a-mbtowc_r.o
00000000 l    df *ABS*	00000000 libc_a-mprec.o
00000000 l    df *ABS*	00000000 libc_a-wctomb_r.o
00000000 l    df *ABS*	00000000 libc_a-svfprintf.o
00000000 l    df *ABS*	00000000 libc_a-fclose.o
00000000 l    df *ABS*	00000000 libc_a-fflush.o
00000000 l    df *ABS*	00000000 libc_a-localeconv.o
00000000 l    df *ABS*	00000000 libm_a-s_frexp.o
00000000 l    df *ABS*	00000000 libc_a-assert.o
00000000 l    df *ABS*	00000000 libc_a-callocr.o
00000000 l    df *ABS*	00000000 libc_a-dtoa.o
00010e58 l     F .text.itcm	00000126 quorem
00000000 l    df *ABS*	00000000 libc_a-wcrtomb.o
00000000 l    df *ABS*	00000000 libc_a-wcsrtombs.o
00000000 l    df *ABS*	00000000 libc_a-fiprintf.o
00000000 l    df *ABS*	00000000 libc_a-svfiprintf.o
00000000 l    df *ABS*	00000000 libc_a-vfiprintf.o
00011df8 l     F .text.itcm	00000076 __sprint_r.part.0
00012dfc l     F .text.itcm	00000080 __sbprintf
00000000 l    df *ABS*	00000000 libc_a-fvwrite.o
00000000 l    df *ABS*	00000000 libc_a-wsetup.o
00000000 l    df *ABS*	00000000 libc_a-fputwc.o
00000000 l    df *ABS*	00000000 libc_a-wcsnrtombs.o
00000000 l    df *ABS*	00000000 libc_a-makebuf.o
00000000 l    df *ABS*	00000000 libc_a-wbuf.o
00000000 l    df *ABS*	00000000 libc_a-fstatr.o
00000000 l    df *ABS*	00000000 libc_a-isattyr.o
00000000 l    df *ABS*	00000000 libc_a-ctype_.o
00000000 l    df *ABS*	00000000 libc_a-impure.o
00000000 l    df *ABS*	00000000 libc_a-__call_atexit.o
00000000 l    df *ABS*	00000000 exfatvolume.cpp
00000000 l    df *ABS*	00000000 fatvolume.cpp
00000000 l    df *ABS*	00000000 hardwareserial.cpp
00013658 l     F .text.itcm	00000008 ___init_veneer
00013660 l     F .text.itcm	00000008 ___ZN11AudioStream17initialize_memoryEP18audio_block_structj_veneer
00013668 l     F .text.itcm	00000008 ___reboot_Teensyduino__veneer
60001ec0 l     F .text.code	00000008 __usb_init_serialnumber_veneer
60001ec8 l     F .text.code	00000008 __delay_veneer
60001ed0 l     F .text.code	00000008 __memset_veneer
60001ed8 l     F .text.code	00000008 ___Znwj_veneer
60001ee0 l     F .text.code	00000008 __pwm_init_veneer
60001ee8 l     F .text.code	00000008 __main_veneer
60001ef0 l     F .text.code	00000008 ____libc_init_array_veneer
60001ef8 l     F .text.code	00000008 __sm_set_pool_veneer
60001f00 l     F .text.code	00000008 ___ZN13IntervalTimer11beginCyclesEPFvvEm_veneer
60001f08 l     F .text.code	00000008 __set_arm_clock_veneer
00000318  w    F .text.itcm	0000006e SDFile::getModifyTime(DateTimeFields&)
200064b0 g     O .bss	00000004 AudioInputUSB::incoming_right
000031fc g     F .text.itcm	000000b8 toUpcase(unsigned short)
00001f68 g     F .text.itcm	00000016 AudioRecordQueue::available()
0000a748 g     F .text.itcm	00000018 usb_serial_available
200064f8 g     O .bss	00000004 AudioOutputUSB::left_2nd
200065bc g     O .bss	00000008 I2S_32::dma
00013630 g     F .text.itcm	00000024 _isatty_r
200065ac g     O .bss	00000008 AsyncAudioInputSPDIF3::dma
2000813a g     O .bss	00000002 AudioInputUSB::incoming_count
6000178c g     F .text.code	00000002 startup_default_late_hook
0000e208 g     F .text.itcm	0000002c _lseek_r
2000640c g     O .bss	00000004 AudioStream::memory_pool
000092d8 g     F .text.itcm	00000088 SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)
0000c0b4  w    F .text.itcm	000000f0 yield
0000904c g     F .text.itcm	000000c8 SdioCard::cardCMD6(unsigned long, unsigned char*)
00007a00  w    F .text.itcm	0000000e DedicatedSpiCard::~DedicatedSpiCard()
20007cc8 g     O .bss	00000040 proc_stat
2000812c g     O .bss	00000004 usb_timer1_callback
200009c4 g     O .data	0000000c vtable for AudioCompress
000068f4 g     F .text.itcm	000001b4 FatFile::write(void const*, unsigned int)
20005240 g     O .bss	000000b4 usb_audio_transmit_buffer
600020a0 g     O .text.progmem	00000018 usb_string_manufacturer_name_default
20007cac g     O .bss	0000001c proc
60001888 g     F .text.code	00000384 configure_external_ram
000079f8  w    F .text.itcm	00000004 DedicatedSpiCard::isDedicatedSpi()
00006880 g     F .text.itcm	00000074 FatFile::truncate()
20005a04 g     O .bss	00000140 Wire1
00007064 g     F .text.itcm	00000168 FatFile::makeSFN(FatLfn_t*)
20008157 g     O .bss	00000001 AudioStream::update_scheduled
20006404 g     O .bss	00000004 FsDateTime::callback
2000676c g     O .bss	00000001 __lock___atexit_recursive_mutex
00011c6c g     F .text.itcm	0000004c _wcrtomb_r
2000816f g     O .bss	00000001 usb_audio_transmit_setting
000071cc g     F .text.itcm	000000b4 FatFile::makeUniqueSfn(FatLfn_t*)
00008200 g     F .text.itcm	00000068 SharedSpiCard::writeStart(unsigned long)
00005490 g     F .text.itcm	00000056 FatFormatter::initPbs()
0000d02c g     F .text.itcm	0000001c Print::println()
00008978 g     F .text.itcm	00000026 DedicatedSpiCard::begin(SdSpiConfig)
00002320 g     F .text.itcm	000000ac TwoWire::isr()
200009e8 g     O .data	00000074 vtable for DedicatedSpiCard
20008130 g     O .bss	00000002 AudioStream::memory_used
0000ddf8 g     F .text.itcm	00000020 __sseek
0000dcb8 g     F .text.itcm	0000003c __sinit
00003e10 g     F .text.itcm	000000ea ExFatFile::seekSet(unsigned long long)
00013554 g     F .text.itcm	000000b0 __swbuf_r
00000484  w    F .text.itcm	00000028 File::flush()
00000388  w    F .text.itcm	0000006e SDFile::getCreateTime(DateTimeFields&)
20008114 g     O .bss	00000004 usb_audio_overrun_count
0000d79c g     F .text.itcm	0000000c __malloc_unlock
00000590  w    F .text.itcm	000000b0 SDFile::openNextFile(unsigned char)
200065c4 g     O .bss	00000004 FsVolume::m_cwv
00005f0c g     F .text.itcm	000000f8 FatFile::open(FatFile*, char const*, int)
200058c0 g     O .bss	00000004 SerNum
000079ec  w    F .text.itcm	00000004 SharedSpiCard::errorData() const
60001e60 g     F .text.code	00000054 analog_init
000017fc g     F .text.itcm	0000005c storeBegin()
0000de20 g     F .text.itcm	0000004a _vdprintf_r
00005c7c g     F .text.itcm	00000020 FatFile::getCreateDateTime(unsigned short*, unsigned short*)
00007fac g     F .text.itcm	00000076 SharedSpiCard::readOCR(unsigned long*)
20001458 g     O .data	00000004 F_CPU_ACTUAL
20000ae0  w    O .data	0000005c vtable for SDFile
200064a8 g     O .bss	00000004 AudioInputUSB::ready_right
0000df4c g     F .text.itcm	000000f8 memmove
00009b54 g     F .text.itcm	00000098 SdioCard::stopTransmission(bool)
0000e7fc g     F .text.itcm	0000004c _Balloc
0001367c g       .ARM.exidx	00000000 __exidx_end
200079a8 g     O .bss	00000004 feedback_accumulator
00006c78 g     F .text.itcm	0000004a FatPartition::freeChain(unsigned long)
2000815a g     O .bss	00000001 EventResponder::runningFromYield
0000ccd4 g     F .text.itcm	0000001c AudioOutputUSB::begin()
00009ff8 g     F .text.itcm	00000016 SdSpiArduinoDriver::receive()
0000bb78 g     F .text.itcm	00000060 tempmonGetTemp
00005998 g     F .text.itcm	000000e4 FatFile::getName7(char*, unsigned int)
0000cfdc g     F .text.itcm	00000050 Print::write(unsigned char const*, unsigned int)
20001488 g     O .data	00000004 __atexit_recursive_mutex
0000e2b0 g     F .text.itcm	0000000c __errno
00000670  w    F .text.itcm	00000026 SDFile::isDirectory()
00004ee0 g     F .text.itcm	00000176 ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
00000858  w    F .text.itcm	00000044 File::write(unsigned char const*, unsigned int)
20003220 g     O .bss	00000020 tx_transfer
60001000 g     O .text.headers	00000020 ImageVectorTable
00002664  w    F .text.itcm	0000002c SPIClass::SPIClass(unsigned int, unsigned int)
000009b4  w    F .text.itcm	000000a8 File::~File()
2000650c g     O .bss	00000004 EventResponder::firstInterrupt
0000b7a0 g     F .text.itcm	00000004 usb_transfer_status
20007c70 g     O .bss	00000014 patchCord2
0000baf0 g     F .text.itcm	00000084 sm_set_pool
00003370 g     F .text.itcm	0000004c ExFatFormatter::writeUpcaseUnicode(unsigned short)
0000ca14 g     F .text.itcm	0000011c AudioOutputUSB::update()
200068e4 g     O .bss	00000004 __stdio_exit_handler
000076d8 g     F .text.itcm	00000084 FsBaseFile::FsBaseFile(FsBaseFile const&)
00004900 g     F .text.itcm	00000018 ExFatPartition::rootLength()
20006594 g     O .bss	00000008 AudioOutputSPDIF3::dma
0000076c  w    F .text.itcm	00000054 SDFile::setCreateTime(DateTimeFields const&)
0000c390  w    F .text.itcm	00000008 usb_serial_class::write(unsigned char const*, unsigned int)
00013604 g     F .text.itcm	0000002c _fstat_r
20000ebc g     O .data	00000370 digital_pin_to_info_PGM
20007994 g     O .bss	00000004 errno
0000a010 g     F .text.itcm	00000024 SdSpiArduinoDriver::receive(unsigned char*, unsigned int)
00004660 g     F .text.itcm	00000042 ExFatPartition::fatGet(unsigned long, unsigned long*)
60001fdc g     O .text.progmem	00000050 TwoWire::i2c3_hardware
00013678 g       .text.itcm	00000000 _etext
00002588 g     F .text.itcm	000000dc _spi_dma_rxISR0()
00007518 g     F .text.itcm	000000b0 FatFile::parsePathName(char const*, FatLfn_t*, char const**)
20001ec0 g       .bss	00000000 _sbss
000054e8 g     F .text.itcm	0000005c FatFormatter::writeMbr()
0000a098 g     F .text.itcm	00000006 sdCsInit(unsigned char)
00002e3c g     F .text.itcm	00000114 SDClass::mediaPresent()
00008ad8 g     F .text.itcm	0000000c SdioCard::errorData() const
200080ec g     O .bss	00000002 tempData0
00009e70 g     F .text.itcm	000000f4 SdioCard::writeSector(unsigned long, unsigned char const*)
0000346c g     F .text.itcm	0000052c ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)
0000bc2c g     F .text.itcm	00000024 digitalRead
60002378 g       *ABS*	00000000 _stextload
000018a0 g     F .text.itcm	00000188 loop
0000c6bc g     F .text.itcm	00000018 AudioStream::receiveReadOnly(unsigned int)
0000bcc0 g     F .text.itcm	0000007a flexpwm_init
0000cfa0 g     F .text.itcm	0000003c usb_audio_set_feature
0000bfb8 g     F .text.itcm	000000a4 usb_midi_flush_output
20008144 g     O .bss	00000002 haveSD
0000b594 g     F .text.itcm	00000064 usb_config_rx
00003ba4 g     F .text.itcm	000000a0 ExFatFile::parsePathName(char const*, ExName_t*, char const**)
20007c84 g     O .bss	00000014 patchCord3
00009984 g     F .text.itcm	000000fc SdioCard::readData(unsigned char*)
20006508 g     O .bss	00000004 EventResponder::lastInterrupt
0000775c g     F .text.itcm	0000002e FsBaseFile::close()
000028cc g     F .text.itcm	00000048 SPIClass::end()
0000a0a4 g     F .text.itcm	00000134 memcpy
000003f8  w    F .text.itcm	00000060 File::available()
00007a30 g     F .text.itcm	0000008c SharedSpiCard::writeStop()
20001ec0 g     O .data	00000000 .hidden __TMC_END__
200079c0 g     O .bss	00000080 fileName
000046e4 g     F .text.itcm	000000be ExFatPartition::freeChain(unsigned long)
0000624c g     F .text.itcm	00000028 FatFile::peek()
0000ef90 g     F .text.itcm	00001b44 _svfprintf_r
2000815e  w    O .bss	00000001 SDFile::name()::zeroterm
200080e4 g     O .bss	00000004 systick_millis_count
00004d08 g     F .text.itcm	000000a2 ExFatFile::rename(ExFatFile*, char const*)
00000240  w    F .text.itcm	0000003c SDFile::truncate(unsigned long long)
200064f4 g     O .bss	00000004 AudioOutputUSB::left_1st
20008171 g     O .bss	00000001 usb_configuration
000079e0  w    F .text.itcm	00000006 SdCardInterface::status()
60000000 g     O .text.headers	00000200 FlexSPI_NOR_Config
0000baa4 g     F .text.itcm	0000004c sm_align_pool
00009bec g     F .text.itcm	00000030 SdioCard::syncDevice()
00008d04 g     F .text.itcm	000000b4 SdioCard::writeData(unsigned char const*)
00001120 g     F .text.itcm	00000088 makeHeader(char*)
0000080c  w    F .text.itcm	0000004c StreamFile<FsBaseFile, unsigned long long>::available()
00006274 g     F .text.itcm	00000044 FatFile::readDirCache(bool)
00008098 g     F .text.itcm	00000098 SharedSpiCard::sectorCount()
20006414 g     O .bss	00000070 AudioStream::memory_pool_available_mask
600020a0  w    O .text.progmem	00000018 usb_string_manufacturer_name
0000d210 g     F .text.itcm	00000010 malloc
2000145c g     O .data	00000004 FilePrefix
60001f8c g     O .text.progmem	00000050 TwoWire::i2c1_hardware
00002d58 g     F .text.itcm	000000e2 SDClass::format(int, char, Print&)
20000ab0  w    O .data	00000024 vtable for FsFile
0000ba60  w    F .text.itcm	0000000a _fstat
00002210  w    F .text.itcm	0000001e TwoWire::read()
00010da0 g     F .text.itcm	00000040 __assert_func
00002434  w    F .text.itcm	00000016 EventResponder::triggerEvent(int, void*)
2000813c g     O .bss	00000002 AudioOutputUSB::offset_1st
200003a8 g     O .data	000000c8 __mprec_tens
60001648 g     F .text.code	000000e8 usb_init
20008138 g     O .bss	00000002 AudioStream::memory_pool_first_mask
20205260 g     O .bss.dma	00000004 usb_audio_sync_feedback
000079e8  w    F .text.itcm	00000004 SharedSpiCard::errorCode() const
00000924  w    F .text.itcm	0000008e SDFile::seek(unsigned long long, int)
200067a8 g     O .bss	00000004 __malloc_top_pad
20005820 g     O .bss	00000050 SPI1
200080e8 g     O .bss	00000004 systick_safe_read
aaaaaabf g       *ABS*	00000000 _flexram_bank_config
00005058 g     F .text.itcm	000000e4 ExFatFile::truncate()
20001490 g     O .data	00000000 .hidden __dso_handle
00010d20 g     F .text.itcm	00000008 _localeconv_r
00009fa0 g     F .text.itcm	0000004e SdSpiArduinoDriver::deactivate()
00012e7c g     F .text.itcm	000002f4 __sfvwrite_r
0000e9a0 g     F .text.itcm	0000005c __i2b
20000000 g       .data	00000000 _sdata
00005660 g     F .text.itcm	000001c4 FatFormatter::makeFat32()
60002214 g     O .text.progmem	00000155 usb_config_descriptor_480
00009ff0 g     F .text.itcm	00000006 SdSpiArduinoDriver::end()
00005b3c g     F .text.itcm	00000034 FatFile::addCluster()
0000e260 g     F .text.itcm	00000024 _sbrk_r
00008b98 g     F .text.itcm	0000001c SdioCard::type() const
60001784 g     F .text.code	00000002 startup_default_early_hook
60001428 g     F .text.code	00000220 ResetHandler
0000a7d0 g     F .text.itcm	00000020 usb_serial_getchar
000001f0  w    F .text.itcm	00000050 SDFile::name()
2000811c g     O .bss	00000008 usb_cdc_line_coding
0000bbd8 g     F .text.itcm	00000054 digitalWrite
20006510 g     O .bss	00000004 EventResponder::lastYield
00003b7c g     F .text.itcm	00000028 ExFatFile::openRoot(ExFatVolume*)
0000e234 g     F .text.itcm	0000002c _read_r
0000bef4 g     F .text.itcm	000000c4 usb_midi_configure
000006b0  w    F .text.itcm	00000038 StreamFile<FsBaseFile, unsigned long long>::read()
000079fc  w    F .text.itcm	00000002 DedicatedSpiCard::~DedicatedSpiCard()
00003300 g     F .text.itcm	0000002e ExFatFormatter::syncUpcase()
0000027c  w    F .text.itcm	00000054 SDFile::setModifyTime(DateTimeFields const&)
00010ad4 g     F .text.itcm	000000c6 _fclose_r
00008ae4 g     F .text.itcm	00000024 SdioCard::readCID(cid_t*)
20007998 g     O .bss	00000010 extmem_smalloc_pool
200067a0 g     O .bss	00000004 __malloc_max_sbrked_mem
00008574 g     F .text.itcm	000000b6 DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)
20008159 g     O .bss	00000001 AudioOutputUSB::update_responsibility
00000558  w    F .text.itcm	0000001a SDFile::position()
0000bc50 g     F .text.itcm	00000070 pinMode
200064a4 g     O .bss	00000004 AudioInputUSB::ready_left
200064c4 g     O .bss	00000008 AudioInputTDM2::dma
20005b44 g     O .bss	00000140 Wire2
60017c00 g     O .text.csf	00000c00 hab_csf
00000458  w    F .text.itcm	0000002c File::peek()
00006cc4 g     F .text.itcm	000000a0 FatPartition::freeClusterCount()
20280000 g       .text.csf	00000000 _heap_end
000029e4  w    F .text.itcm	000000c8 SDClass::open(char const*, unsigned char)
00013674 g       .ARM.exidx	00000000 __exidx_start
70000000 g       .bss.extram	00000000 _extram_end
000001e4  w    F .text.itcm	0000000c DMAChannel::~DMAChannel()
0000ba6c  w    F .text.itcm	00000004 _isatty
20006504 g     O .bss	00000004 EventResponder::firstYield
20001450 g     O .data	00000004 DirPrefix
00000738  w    F .text.itcm	00000034 StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)
0000d7a8 g     F .text.itcm	000003d8 _realloc_r
00000698  w    F .text.itcm	00000018 SDFile::read(void*, unsigned int)
0000e2bc g     F .text.itcm	00000048 __libc_init_array
000002d0  w    F .text.itcm	00000046 SDFile::rewindDirectory()
00002204  w    F .text.itcm	0000000c TwoWire::available()
000043b8 g     F .text.itcm	0000000e ExFatFile::open(ExFatVolume*, char const*, int)
00002960 g     F .text.itcm	00000084 SDClass::dateTime(unsigned short*, unsigned short*)
00004c58 g     F .text.itcm	000000ae ExFatFile::addDirCluster()
0000cf3c g     F .text.itcm	00000064 usb_audio_get_feature
000132e8 g     F .text.itcm	00000066 _fputwc_r
00002664  w    F .text.itcm	0000002c SPIClass::SPIClass(unsigned int, unsigned int)
20000380 g     O .data	00000028 __mprec_bigtens
0000ba7c  w    F .text.itcm	00000004 abort
0000c378  w    F .text.itcm	00000004 usb_serial_class::clear()
0000ba20 g     F .text.itcm	00000034 _sbrk
600159f4 g       *ABS*	00000000 _sdataload
00000084 g     F .text.itcm	0000009c I2S_32::isr32()
0000ed08 g     F .text.itcm	00000042 __mcmp
20000b60 g     O .data	00000030 vtable for SDClass
200064ec g     O .bss	00000008 AudioOutputTDM::dma
2000148c g     O .data	00000004 __brkval
20008170 g     O .bss	00000001 usb_cdc_line_rtsdtr
60001eb4 g     F .text.code	00000000 _init
0000a534 g     F .text.itcm	00000002 usb_serial_reset
00005be8 g     F .text.itcm	0000001e FatFile::cacheDirEntry(unsigned char)
20000844 g     O .data	00000070 SPIClass::spiclass_lpspi1_hardware
2000816d g     O .bss	00000001 usb_audio_sync_nbytes
60001d98 g     F .text.code	000000c8 AudioStream::initialize_memory(audio_block_struct*, unsigned int)
00002b64  w    F .text.itcm	00000054 SDClass::remove(char const*)
000001bc  w    F .text.itcm	00000028 SDFile::close()
0000089c  w    F .text.itcm	00000040 SDFile::~SDFile()
600020bc g     O .text.progmem	00000155 usb_config_descriptor_12
20000b90 g     O .data	00000024 vtable for TwoWire
00009f78 g     F .text.itcm	00000028 SdSpiArduinoDriver::begin(SdSpiConfig)
200068e8 g     O .bss	00000018 acq
200081a0 g       .bss	00000000 _ebss
00009360 g     F .text.itcm	00000088 SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)
20007c40 g     O .bss	00000004 hour_
000006e8  w    F .text.itcm	00000014 StreamFile<FsBaseFile, unsigned long long>::flush()
0000e900 g     F .text.itcm	00000040 __hi0bits
00003ae4 g     F .text.itcm	0000003c ExFatFile::dirCache(unsigned char, unsigned char)
000023d8 g     F .text.itcm	0000000c lpi2c3_isr()
00002f50 g     F .text.itcm	000000d8 SDClass::begin(unsigned char)
00004dac g     F .text.itcm	0000005e ExFatFile::mkdir(ExFatFile*, ExName_t*)
20205400 g       .bss.dma	00000000 _heap_start
20006770 g     O .bss	00000001 __lock___malloc_recursive_mutex
200080f4 g     O .bss	00000020 usb1
0000295c  w    F .text.itcm	00000002 SDClass::~SDClass()
6000202c g     O .text.progmem	00000050 TwoWire::i2c4_hardware
000001e4  w    F .text.itcm	0000000c DMAChannel::~DMAChannel()
200067ac g     O .bss	00000138 __sf
20006980 g     O .bss	00001000 diskBuffer
200064fc g     O .bss	00000004 AudioOutputUSB::right_1st
00008484  w    F .text.itcm	00000076 SharedSpiCard::readCID(cid_t*)
00007c50 g     F .text.itcm	000000ec SharedSpiCard::cardCommand(unsigned char, unsigned long)
000009b4  w    F .text.itcm	000000a8 File::~File()
00000003 g       *ABS*	00000000 _itcm_block_count
20001f00 g     O .bss	00000020 endpoint0_transfer_data
000058d8 g     F .text.itcm	0000002a FatFile::getLfnChar(DirLfn_t*, unsigned char)
000031ac g     F .text.itcm	0000004e FsCache::prepare(unsigned long, unsigned char)
0000d07c g     F .text.itcm	00000004 operator delete(void*, unsigned int)
0000bd3c g     F .text.itcm	000000f4 pwm_init
0000cb30 g     F .text.itcm	00000150 usb_audio_receive_callback
200079ac g     O .bss	00000014 file
000022b4  w    F .text.itcm	0000006c TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)
00000c08 g     F .text.itcm	000000d0 I2S_32::begin()
60018800 g       .text.csf	00000000 __text_csf_end
60001c0c g     F .text.code	0000005c usb_pll_start
0000eb58 g     F .text.itcm	000000c0 __pow5mult
000064a4 g     F .text.itcm	00000090 FatFile::rmdir()
200009dc g     O .data	0000000c vtable for AudioRecordQueue
000023e4 g     F .text.itcm	0000000c lpi2c4_isr()
00006bf8 g     F .text.itcm	00000080 FatPartition::allocateCluster(unsigned long, unsigned long*)
000022b4  w    F .text.itcm	0000006c TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)
000089ac  w    F .text.itcm	00000002 SdioCard::end()
00002bf4  w    F .text.itcm	00000036 SDClass::exists(char const*)
200080f0 g     O .bss	00000004 tx_
20006484 g     O .bss	00000004 AudioStream::unused
20001ee0 g     O .bss	00000020 endpoint0_transfer_ack
20008124 g     O .bss	00000004 usb_cdc_line_rtsdtr_millis
0000b75c g     F .text.itcm	00000028 usb_transmit
0000c514 g     F .text.itcm	00000064 software_isr()
0000c270 g     F .text.itcm	00000020 systick_isr
000039fc g     F .text.itcm	00000082 ExFatFile::getName7(char*, unsigned int)
0000e310 g     F .text.itcm	00000002 __retarget_lock_release_recursive
20006410 g     O .bss	00000004 AudioStream::first_update
20001460 g     O .data	00000010 Serial
20008132 g     O .bss	00000002 AudioStream::memory_used_max
0000c8a8 g     F .text.itcm	00000034 AudioConnection::~AudioConnection()
0000c398  w    F .text.itcm	00000006 usb_serial_class::write(unsigned char)
0000782c g     F .text.itcm	00000072 FsBaseFile::openNext(FsBaseFile*, int)
60001784  w    F .text.code	00000002 startup_early_hook
2000816c g     O .bss	00000001 usb_audio_receive_setting
00004918 g     F .text.itcm	00000092 ExFatFile::addCluster()
20006408 g     O .bss	00000004 FsDateTime::callback2
20000a84  w    O .data	0000002c vtable for File
00007b3c g     F .text.itcm	0000008c SharedSpiCard::readData(unsigned char*, unsigned int)
00002c2c  w    F .text.itcm	000000f0 SDClass::usedSize()
0000a704 g     F .text.itcm	00000044 usb_serial_peekchar
0000dcf4 g     F .text.itcm	0000000c __sfp_lock_acquire
0000e320 g     F .text.itcm	00000000 memchr
00006b90 g     F .text.itcm	00000068 FatPartition::fatPut(unsigned long, unsigned long)
0000a918 g     F .text.itcm	000002f0 set_arm_clock
200080e0 g     O .bss	00000004 systick_cycle_count
20001a38 g     O .data	00000016 usb_string_serial_number_default
0000e5c4 g     F .text.itcm	0000020c _free_r
00008268 g     F .text.itcm	00000118 SharedSpiCard::erase(unsigned long, unsigned long)
000086cc g     F .text.itcm	00000066 SharedSpiCard::writeData(unsigned char, unsigned char const*)
00009114 g     F .text.itcm	000000b8 SdioCard::readStop()
000079f0  w    F .text.itcm	00000004 SharedSpiCard::type() const
0000e1d8 g     F .text.itcm	0000000c __locale_mb_cur_max
00011cb8 g     F .text.itcm	00000016 _wcsrtombs_r
200065dc g     O .bss	00000190 __atexit0
0000c388  w    F .text.itcm	00000004 usb_serial_class::flush()
00008380 g     F .text.itcm	00000080 SharedSpiCard::readSCR(scr_t*)
000033bc g     F .text.itcm	000000b0 ExFatFormatter::writeUpcase(unsigned long)
20001a08 g     O .data	00000004 __malloc_sbrk_base
0000c380  w    F .text.itcm	00000004 usb_serial_class::read()
2000657c g     O .bss	00000008 AudioOutputI2SOct::dma
2000813e g     O .bss	00000002 I2S_32::block_offset
000075c8 g     F .text.itcm	00000110 FatFile::remove()
0000ba70  w    F .text.itcm	00000006 _lseek
0000ba78  w    F .text.itcm	00000004 __cxa_pure_virtual
0000ec18 g     F .text.itcm	000000f0 __lshift
00005e28 g     F .text.itcm	000000e2 FatFile::mkdir(FatFile*, char const*, bool)
0000b72c g     F .text.itcm	00000030 usb_prepare_transfer
000079f4  w    F .text.itcm	00000004 DedicatedSpiCard::hasDedicatedSpi()
0000b8a0 g     F .text.itcm	00000180 unused_interrupt_vector
200064ac g     O .bss	00000004 AudioInputUSB::incoming_left
00011cf8 g     F .text.itcm	00000100 __ssprint_r
60001c68 g     F .text.code	00000130 tempmon_init
20008128 g     O .bss	00000004 usb_timer0_callback
00006f48 g     F .text.itcm	0000011c FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)
0000de88 g     F .text.itcm	00000062 _vasnprintf_r
0000d074  w    F .text.itcm	00000002 serialEvent()
200064dc g     O .bss	00000010 AudioOutputPWM::dma
0000e49c g     F .text.itcm	00000088 __register_exitproc
000042c4 g     F .text.itcm	000000f4 ExFatFile::open(ExFatFile*, char const*, int)
0000c6d4 g     F .text.itcm	00000046 AudioStream::receiveWritable(unsigned int)
0000e0e8 g     F .text.itcm	0000008a strncmp
00006e84 g     F .text.itcm	000000c4 FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)
000078a0 g     F .text.itcm	00000114 FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)
00004e0c g     F .text.itcm	000000d2 ExFatFile::mkdir(ExFatFile*, char const*, bool)
00005544 g     F .text.itcm	0000011c FatFormatter::makeFat16()
0000c7ec g     F .text.itcm	00000028 AudioConnection::AudioConnection(AudioStream&, unsigned char, AudioStream&, unsigned char)
0000a760 g     F .text.itcm	00000070 usb_serial_flush_input
000047a4 g     F .text.itcm	00000070 ExFatPartition::freeClusterCount()
20000ad4 g     O .data	0000000c vtable for I2S_32
0000e9fc g     F .text.itcm	0000015c __multiply
0000a7f0 g     F .text.itcm	0000002c usb_serial_putchar
00000025 g       *ABS*	00000000 _teensy_model_identifier
00007d3c g     F .text.itcm	000001f8 SharedSpiCard::begin(SdSpiConfig)
20006534 g     O .bss	00000008 AudioOutputI2S2::dma
0000e174 g     F .text.itcm	00000064 strncpy
20006778 g     O .bss	00000028 __malloc_current_mallinfo
200064b4 g     O .bss	00000008 AudioInputI2S2::dma
20000924 g     O .data	00000070 SPIClass::spiclass_lpspi4_hardware
0000eea0 g     F .text.itcm	000000d4 __d2b
00008734 g     F .text.itcm	00000068 SharedSpiCard::writeData(unsigned char const*)
20006514 g     O .bss	00000020 HardwareSerial::s_serials_with_serial_events
000089a4  w    F .text.itcm	00000004 SdCardInterface::isDedicatedSpi()
60001730 g     F .text.code	00000054 _reboot_Teensyduino_
0000d13c g     F .text.itcm	000000c8 IntervalTimer::beginCycles(void (*)(), unsigned long)
00008b88  w    F .text.itcm	0000000e SdioCard::~SdioCard()
0000c7ec g     F .text.itcm	00000028 AudioConnection::AudioConnection(AudioStream&, unsigned char, AudioStream&, unsigned char)
00000b0c g     F .text.itcm	000000fc I2S_32::config_i2s()
60001788 g     F .text.code	00000002 startup_default_middle_hook
000088a0 g     F .text.itcm	000000d8 DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)
00008024 g     F .text.itcm	00000074 SharedSpiCard::readRegister(unsigned char, void*)
00000cd8 g     F .text.itcm	000002fc AudioCompress::compress(void*)
00008f78 g     F .text.itcm	000000d4 SdioCard::writeStart(unsigned long)
0000ae54 g     F .text.itcm	00000740 usb_isr
0000db80 g     F .text.itcm	0000000c __cxa_atexit
00003c44 g     F .text.itcm	0000019e ExFatFile::read(void*, unsigned int)
0000c8dc g     F .text.itcm	00000044 AudioStream::update_setup()
0000e1e4 g     F .text.itcm	00000024 _close_r
00007bc8 g     F .text.itcm	0000006e SharedSpiCard::readStop()
00000658  w    F .text.itcm	00000018 SDFile::peek()
00003154 g     F .text.itcm	00000056 FsCache::sync()
200065a4 g     O .bss	00000008 AudioOutputPT8211_2::dma
200057d0 g     O .bss	00000050 SPI
0000deec g     F .text.itcm	00000060 memcmp
200065b8 g     O .bss	00000004 I2S_32::block_right
20000a5c  w    O .data	00000028 vtable for usb_serial_class
0000a034 g     F .text.itcm	00000012 SdSpiArduinoDriver::send(unsigned char)
0000e308 g     F .text.itcm	00000002 __retarget_lock_close_recursive
0000a0a0 g     F .text.itcm	00000004 sdCsWrite(unsigned char, bool)
200080dc g     O .bss	00000004 scale_cpu_cycles_to_microseconds
20005870 g     O .bss	00000050 SPI2
00013170 g     F .text.itcm	000000cc __swsetup_r
00004a60 g     F .text.itcm	0000005e ExFatFile::rmdir()
2000654c g     O .bss	00000008 AudioInputI2SHex::dma
00008130 g     F .text.itcm	00000068 SharedSpiCard::readStart(unsigned long)
20001600 g     O .data	00000408 __malloc_av_
200065d8 g     O .bss	00000004 __atexit
000006fc  w    F .text.itcm	00000014 SDFile::flush()
0000dd94 g     F .text.itcm	00000022 __sread
200030e0 g     O .bss	00000020 rx_transfer
0000a884 g     F .text.itcm	00000094 usb_serial_flush_output
2000648c g     O .bss	00000008 AudioInputI2S::dma
0000d790 g     F .text.itcm	0000000c __malloc_lock
000032c8 g     F .text.itcm	00000018 FsDateTime::setCallback(void (*)(unsigned short*, unsigned short*))
200009d0 g     O .data	0000000c vtable for AudioOutputUSB
20001c00 g     O .data	000002c0 _VectorsRam
20007d08 g     O .bss	00000368 queue1
0000a048 g     F .text.itcm	0000004e SdSpiArduinoDriver::send(unsigned char const*, unsigned int)
000053bc g     F .text.itcm	000000d4 FatFormatter::initFatDir(unsigned char, unsigned long)
00010ccc g     F .text.itcm	00000054 _fflush_r
00001f28 g     F .text.itcm	0000003e AudioRecordQueue::update()
00010de0 g     F .text.itcm	00000078 _calloc_r
00002690 g     F .text.itcm	00000234 SPIClass::begin()
00007280 g     F .text.itcm	00000298 FatFile::open(FatFile*, FatLfn_t*, int)
20001a4f g     O .data	00000001 yield_active_check_flags
00004bf8 g     F .text.itcm	0000005e ExFatFile::sync()
0000e30c g     F .text.itcm	00000002 __retarget_lock_acquire_recursive
20008172 g     O .bss	00000001 usb_high_speed
000062b8 g     F .text.itcm	000001ea FatFile::rename(FatFile*, char const*)
00008eb0 g     F .text.itcm	0000007c SdioCard::isBusy()
2000656c g     O .bss	00000008 AudioInputI2SQuad::dma
0000e044 g     F .text.itcm	000000a4 memset
0000c4f8 g     F .text.itcm	00000010 main
200064cc g     O .bss	00000008 AudioOutputI2S::dma
200067a4 g     O .bss	00000004 __malloc_max_total_mem
000043ec g     F .text.itcm	000000c0 ExFatPartition::bitmapFind(unsigned long, unsigned long)
0000e304 g     F .text.itcm	00000002 __retarget_lock_init_recursive
20205100 g     O .bss.dma	00000155 usb_descriptor_buffer
0000879c g     F .text.itcm	000000e8 SharedSpiCard::writeSector(unsigned long, unsigned char const*)
200065b4 g     O .bss	00000004 I2S_32::block_left
0000513c g     F .text.itcm	00000280 ExFatFile::write(void const*, unsigned int)
000030b4 g     F .text.itcm	000000a0 lbaToMbrChs(unsigned char*, unsigned long, unsigned long)
00005c28 g     F .text.itcm	00000052 FatFile::dirEntry(DirFat_t*)
000007c0  w    F .text.itcm	0000004c SDFile::available()
0000de18 g     F .text.itcm	00000008 __sclose
0000c05c g     F .text.itcm	00000058 usb_init_serialnumber
60001f8c g       .text.code	00000000 __init_array_end
00010f80 g     F .text.itcm	00000cec _dtoa_r
0000d230 g     F .text.itcm	00000560 _malloc_r
00008198 g     F .text.itcm	00000068 DedicatedSpiCard::readSector(unsigned long, unsigned char*)
2000815b g     O .bss	00000001 HardwareSerial::s_count_serials_with_serial_events
0000ef74 g     F .text.itcm	0000001a __ascii_wctomb
2000816e g     O .bss	00000001 usb_audio_sync_rshift
00000070  w    F .text.itcm	00000012 SDFile::isOpen()
000076d8 g     F .text.itcm	00000084 FsBaseFile::FsBaseFile(FsBaseFile const&)
200065c8 g     O .bss	00000004 FatVolume::m_cwv
20006554 g     O .bss	00000008 AudioInputI2SOct::dma
20000c28  w    O .data	00000010 SPIClass::beginTransaction(SPISettings)::clk_sel
0000c1a4 g     F .text.itcm	00000084 EventResponder::triggerEventNotImmediate()
000028c4 g     F .text.itcm	00000008 SPIClass::transfer(void const*, void*, unsigned int)
0000b84c g     F .text.itcm	00000054 micros
00004ac0 g     F .text.itcm	00000138 ExFatFile::syncDir()
00008400 g     F .text.itcm	00000082 SharedSpiCard::readSDS(sds_t*)
0000e524 g     F .text.itcm	000000a0 _malloc_trim_r
00013350 g     F .text.itcm	00000106 _wcsnrtombs_l
600020b8 g     O .text.progmem	00000004 string0
0000a81c g     F .text.itcm	00000018 usb_serial_write
6000178c  w    F .text.code	00000002 startup_late_hook
00008884 g     F .text.itcm	0000001c DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)
0000c384  w    F .text.itcm	00000004 usb_serial_class::available()
60002376 g     O .text.progmem	00000001 _serialEvent_default
0000679c g     F .text.itcm	0000000c FatFile::sync()
00005824 g     F .text.itcm	000000b4 FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)
00002bb8  w    F .text.itcm	0000003a SDClass::mkdir(char const*)
20000000 g     O .data	00000380 endpoint_queue_head
20006900 g     O .bss	00000080 dirName
6000207c  w    O .text.progmem	00000024 usb_string_product_name
0000b7a4 g     F .text.itcm	000000a8 delay
20008142 g     O .bss	00000002 dma_channel_allocated_mask
00003b58 g     F .text.itcm	00000022 ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)
00013670 g     F .fini	00000000 _fini
0000224c g     F .text.itcm	0000002a TwoWire::write(unsigned char)
00007abc g     F .text.itcm	0000007e SharedSpiCard::isBusy()
20006584 g     O .bss	00000008 AudioOutputPT8211::dma
60001020 g     O .text.headers	0000000c BootData
200064d4 g     O .bss	00000008 AudioOutputMQS::dma
20008118 g     O .bss	00000004 usb_audio_underrun_count
000043c8 g     F .text.itcm	00000024 ExFatFile::openNext(ExFatFile*, int)
0000d058 g     F .text.itcm	0000001c Print::printf(char const*, ...)
0000dd54 g     F .text.itcm	00000040 sprintf
00001f80 g     F .text.itcm	00000048 AudioRecordQueue::clear()
00005c08 g     F .text.itcm	0000001e FatFile::close()
0000bb74 g     F .text.itcm	00000004 Panic_Temp_isr
000008dc  w    F .text.itcm	00000048 SDFile::~SDFile()
00005cbc g     F .text.itcm	0000016a FatFile::mkdir(FatFile*, FatLfn_t*)
00013458 g     F .text.itcm	00000024 _wcsnrtombs_r
00008b84  w    F .text.itcm	00000002 SdioCard::~SdioCard()
00000640  w    F .text.itcm	00000018 StreamFile<FsBaseFile, unsigned long long>::peek()
00000504  w    F .text.itcm	00000054 File::write(unsigned char)
0000e284 g     F .text.itcm	0000002c _write_r
0000ce54 g     F .text.itcm	000000e8 usb_audio_configure
00000120 g     F .text.itcm	0000009c I2S_32::update()
20005300 g     O .bss	000004d0 SD
00009c1c g     F .text.itcm	00000144 SdioCard::erase(unsigned long, unsigned long)
2000815c g     O .bss	00000001 I2S_32::update_responsibility
0000c624 g     F .text.itcm	00000050 AudioStream::release(audio_block_struct*)
20003100 g     O .bss	00000020 sync_transfer
20001a1c g     O .data	00000004 _impure_ptr
20000b3c  w    O .data	00000024 vtable for Stream
00003de4 g     F .text.itcm	0000002c ExFatFile::peek()
00010b9c g     F .text.itcm	00000130 __sflush_r
20000994  w    O .data	00000024 vtable for StreamFile<FsBaseFile, unsigned long long>
20006564 g     O .bss	00000008 AudioOutputSPDIF::dma
200058c4 g     O .bss	00000140 Wire
00000724  w    F .text.itcm	00000014 SDFile::write(void const*, unsigned int)
0000c674 g     F .text.itcm	00000046 AudioStream::transmit(audio_block_struct*, unsigned char)
000079b4 g     F .text.itcm	00000028 FsVolume::open(char const*, int)
0000dd0c g     F .text.itcm	00000046 _fwalk_sglue
00008acc g     F .text.itcm	0000000c SdioCard::errorCode() const
00006004 g     F .text.itcm	0000000e FatFile::open(FatVolume*, char const*, int)
00000710  w    F .text.itcm	00000014 StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)
60001f10 g       .text.code	00000000 __preinit_array_end
2000649c g     O .bss	00000008 AudioInputTDM::dma
00001090 g     F .text.itcm	00000090 newFileName(char*)
2000653c g     O .bss	00000008 AudioOutputTDM2::dma
000045a4 g     F .text.itcm	00000036 ExFatPartition::dirCache(DirPos_t*, unsigned char)
0000e7d0 g     F .text.itcm	0000002a __ascii_mbtowc
0000c578 g     F .text.itcm	000000ac AudioStream::allocate()
20007a40 g     O .bss	00000200 header
00006d64 g     F .text.itcm	00000120 FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)
0000ae28 g     F .text.itcm	0000002c usb_stop_sof_interrupts
00002230  w    F .text.itcm	00000018 TwoWire::peek()
00002248  w    F .text.itcm	00000002 TwoWire::flush()
00001858 g     F .text.itcm	00000048 setup
200012a0 g     O .data	0000006c usb_descriptor_list
00008f2c g     F .text.itcm	00000020 SdioCard::status()
00005c9c g     F .text.itcm	00000020 FatFile::getModifyDateTime(unsigned short*, unsigned short*)
0000b65c g     F .text.itcm	00000064 usb_config_rx_iso
0000006c  w    F .text.itcm	00000002 Print::flush()
00001fc8 g     F .text.itcm	0000003a AudioRecordQueue::readBuffer()
20007c5c g     O .bss	00000014 patchCord1
20007c98 g     O .bss	00000014 patchCord4
00002aac  w    F .text.itcm	00000052 SDClass::rmdir(char const*)
000060a4 g     F .text.itcm	000001a8 FatFile::read(void*, unsigned int)
0000606c g     F .text.itcm	00000036 FatFile::openRoot(FatVolume*)
20006488 g     O .bss	00000004 ExFatVolume::m_cwv
20068000 g       .text.csf	00000000 _estack
000079dc g     F .text.itcm	00000004 operator new(unsigned int, unsigned long*)
0000c344 g     F .text.itcm	00000034 DMAChannel::release()
000004ac  w    F .text.itcm	00000058 File::read()
00002004 g     F .text.itcm	00000016 AudioRecordQueue::freeBuffer()
0000a834 g     F .text.itcm	00000050 usb_serial_write_buffer_free
0000c71c g     F .text.itcm	000000d0 AudioConnection::connect()
20001a10 g     O .data	0000000c __sglue
20006494 g     O .bss	00000008 AudioInputPDM::dma
0000a538 g     F .text.itcm	000000ec usb_serial_configure
00002278 g     F .text.itcm	0000003c TwoWire::write(unsigned char const*, unsigned int)
20008158 g     O .bss	00000001 AudioInputUSB::receive_flag
00000a5c  w    F .text.itcm	000000b0 File::~File()
0000d048  w    F .text.itcm	0000000e _write
200064bc g     O .bss	00000008 AudioInputPDM2::dma
20001ec0 g       .data	00000000 _edata
000046a4 g     F .text.itcm	00000040 ExFatPartition::fatPut(unsigned long, unsigned long)
20008160 g     O .bss	00000001 external_psram_size
00008b84  w    F .text.itcm	00000002 SdioCard::~SdioCard()
00004814 g     F .text.itcm	000000ec ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)
000079fc  w    F .text.itcm	00000002 DedicatedSpiCard::~DedicatedSpiCard()
0000862c g     F .text.itcm	000000a0 DedicatedSpiCard::setDedicatedSpi(bool)
00003a80 g     F .text.itcm	00000064 ExFatFile::hashName(ExName_t*)
20001470 g     O .data	0000000c AudioInputUSB::features
00005b70 g     F .text.itcm	00000078 FatFile::addDirCluster()
0001323c g     F .text.itcm	000000aa __fputwc
0000c38c  w    F .text.itcm	00000004 usb_serial_class::availableForWrite()
20001480 g     O .data	00000004 I2S_32::shift
000023cc g     F .text.itcm	0000000c lpi2c1_isr()
0000d080 g     F .text.itcm	00000062 ultoa
0000295c  w    F .text.itcm	00000002 SDClass::~SDClass()
0000778c g     F .text.itcm	000000a0 FsBaseFile::open(FsVolume*, char const*, int)
0000ddb8 g     F .text.itcm	0000003e __swrite
0000d078 g     F .text.itcm	00000004 operator new(unsigned int)
0000c228 g     F .text.itcm	00000044 EventResponder::runFromInterrupt()
20001a0c g     O .data	00000004 __malloc_trim_threshold
0000c814 g     F .text.itcm	00000094 AudioConnection::disconnect()
0000c37c  w    F .text.itcm	00000004 usb_serial_class::peek()
000089a8  w    F .text.itcm	00000004 SdCardInterface::setDedicatedSpi(bool)
00007f34 g     F .text.itcm	00000078 SharedSpiCard::cardCMD6(unsigned long, unsigned char*)
00011cd0 g     F .text.itcm	00000028 fiprintf
0000ccf0 g     F .text.itcm	00000104 usb_audio_transmit_callback
00011e70 g     F .text.itcm	00000f8c _vfiprintf_r
00001d40  w    F .text.itcm	00000110 SPIClass::beginTransaction(SPISettings)
0000ed4c g     F .text.itcm	00000154 __mdiff
00008b2c g     F .text.itcm	00000010 SdioCard::readOCR(unsigned long*)
200008b4 g     O .data	00000070 SPIClass::spiclass_lpspi3_hardware
000045dc g     F .text.itcm	00000082 ExFatPartition::dirSeek(DirPos_t*, unsigned long)
000024ac g     F .text.itcm	000000dc _spi_dma_rxISR1()
20006574 g     O .bss	00000008 AudioOutputI2SHex::dma
20001330 g     O .data	00000120 _impure_data
00003efc g     F .text.itcm	000003c6 ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)
20008134 g     O .bss	00000002 AudioStream::cpu_cycles_total
0000dd00 g     F .text.itcm	0000000c __sfp_lock_release
00009114 g     F .text.itcm	000000b8 SdioCard::writeStop()
00003b20 g     F .text.itcm	00000014 ExFatFile::close()
20000ce8 g     O .data	00000101 _ctype_
0000ba54  w    F .text.itcm	00000004 _read
60001f10 g       .text.code	00000000 __init_array_start
20001454 g     O .data	00000004 F_BUS_ACTUAL
20007980 g     O .bss	00000004 disk_count
00003330 g     F .text.itcm	00000040 ExFatFormatter::writeUpcaseByte(unsigned char)
00002b00  w    F .text.itcm	00000064 SDClass::rename(char const*, char const*)
00008b3c g     F .text.itcm	00000014 SdioCard::readSCR(scr_t*)
0000c508  w    F .text.itcm	0000000c AudioStream::update_all()
0001347c g     F .text.itcm	000000d8 __smakebuf_r
00000000 g       .text.itcm	00000000 _stext
0000c290 g     F .text.itcm	000000b4 DMAChannel::begin(bool)
2000147c g     O .data	00000004 IntervalTimer::nvic_priorites
00007a10 g     F .text.itcm	0000001e SharedSpiCard::end()
0000e3c0 g     F .text.itcm	000000dc strlen
00006014 g     F .text.itcm	00000056 FatFile::openCluster(FatFile*)
00006534 g     F .text.itcm	000000ae FatFile::seekSet(unsigned long)
6000207c g     O .text.progmem	00000024 usb_string_product_name_default
2000659c g     O .bss	00000008 AudioOutputI2SQuad::dma
0000de6c g     F .text.itcm	0000001c vdprintf
00008bb4 g     F .text.itcm	00000060 SdioCard::sectorCount()
00008b50 g     F .text.itcm	00000034 SdioCard::readSDS(sds_t*)
000066d0 g     F .text.itcm	000000ca FatFile::openNext(FatFile*, int)
20006500 g     O .bss	00000004 AudioOutputUSB::right_2nd
60001788  w    F .text.code	00000002 startup_middle_hook
20000bb4 g     O .data	00000074 vtable for SdioCard
00005a7c g     F .text.itcm	00000004 FatFile::getName(char*, unsigned int)
60001790 g     F .text.code	000000f8 configure_cache
000089a0  w    F .text.itcm	00000004 SdCardInterface::hasDedicatedSpi()
0000c3a0 g     F .text.itcm	00000158 breakTime(unsigned long, DateTimeFields&)
000084fc  w    F .text.itcm	00000076 SharedSpiCard::readCSD(csd_t*)
2000658c g     O .bss	00000008 AudioOutputSPDIF2::dma
00000ff8 g     F .text.itcm	00000098 newDirectory(char*)
00009a80 g     F .text.itcm	000000d4 SdioCard::readStart(unsigned long)
0000b6c0 g     F .text.itcm	0000006c usb_config_tx_iso
20006544 g     O .bss	00000008 AudioInputAnalog::dma
20008136 g     O .bss	00000002 AudioStream::cpu_cycles_total_max
00009f64 g     F .text.itcm	00000012 SdSpiArduinoDriver::activate()
60001f10 g       .text.code	00000000 __preinit_array_start
0000b784 g     F .text.itcm	0000001c usb_receive
200009b8  w    O .data	0000000c vtable for AudioStream
000044ac g     F .text.itcm	000000aa ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)
0000e940 g     F .text.itcm	00000060 __lo0bits
00004558 g     F .text.itcm	0000004c ExFatPartition::chainSize(unsigned long)
20001a34 g     O .data	00000004 tempDatai
000065e4 g     F .text.itcm	000000ea FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)
00018800 g       *ABS*	00000000 _flashimagelen
000067a8 g     F .text.itcm	000000d8 FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
00007c38 g     F .text.itcm	00000018 SharedSpiCard::syncDevice()
0000d204 g     F .text.itcm	0000000a __aeabi_atexit
0000ba80 g     F .text.itcm	00000024 rtc_get
000049ac g     F .text.itcm	000000b4 ExFatFile::remove()
00010d28 g     F .text.itcm	00000078 frexp
70000000 g       .bss.extram	00000000 _extram_start
0000c26c g     F .text.itcm	00000004 pendablesrvreq_isr
00002d1c  w    F .text.itcm	0000003c SDClass::totalSize()
2000655c g     O .bss	00000008 AudioInputSPDIF3::dma
0000c8a8 g     F .text.itcm	00000034 AudioConnection::~AudioConnection()
00000068  w    F .text.itcm	00000004 Print::availableForWrite()
20001494 g     O .data	0000016c __global_locale
000093e8 g     F .text.itcm	0000059c SdioCard::begin(SdioConfig)
00000fd4 g     F .text.itcm	00000022 AudioCompress::update()
00002094 g     F .text.itcm	00000170 breakTime(long long, tmElements_t&)
00003b34 g     F .text.itcm	00000022 ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)
0000a624 g     F .text.itcm	000000e0 usb_serial_read
20006774 g     O .bss	00000001 __lock___sfp_recursive_mutex
0000b5f8 g     F .text.itcm	00000064 usb_config_tx
0000ba58  w    F .text.itcm	00000006 _close
00006b6c g     F .text.itcm	00000024 FatPartition::fatGet(unsigned long, unsigned long*)
0000d220 g     F .text.itcm	00000010 free
00003998 g     F .text.itcm	00000064 ExFatFile::cmpName(DirName_t const*, ExName_t*)
0000e85c g     F .text.itcm	000000a4 __multadd
0000e848 g     F .text.itcm	00000012 _Bfree
00000574  w    F .text.itcm	0000001a SDFile::size()
00005904 g     F .text.itcm	00000094 FatFile::getSFN(char*, unsigned int)
0000089c  w    F .text.itcm	00000040 SDFile::~SDFile()
20001a38  w    O .data	00000016 usb_string_serial_number
00009d60 g     F .text.itcm	00000110 SdioCard::readSector(unsigned long, unsigned char*)
00008b08 g     F .text.itcm	00000024 SdioCard::readCSD(csd_t*)



Disassembly of section .text.code:

60001400 <memory_copy>:
}

__attribute__((section(".startup"), optimize("O1")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001400:	cmp	r0, r1
60001402:	beq.n	60001414 <memory_copy+0x14>
	while (dest < dest_end) {
60001404:	cmp	r0, r2
60001406:	bcs.n	60001414 <memory_copy+0x14>
		*dest++ = *src++;
60001408:	ldr.w	r3, [r1], #4
6000140c:	str.w	r3, [r0], #4
	while (dest < dest_end) {
60001410:	cmp	r2, r0
60001412:	bhi.n	60001408 <memory_copy+0x8>
	}
}
60001414:	bx	lr
60001416:	nop

60001418 <memory_clear>:

__attribute__((section(".startup"), optimize("O1")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
60001418:	cmp	r0, r1
6000141a:	bcs.n	60001426 <memory_clear+0xe>
		*dest++ = 0;
6000141c:	movs	r3, #0
6000141e:	str.w	r3, [r0], #4
	while (dest < dest_end) {
60001422:	cmp	r1, r0
60001424:	bhi.n	6000141e <memory_clear+0x6>
	}
}
60001426:	bx	lr

60001428 <ResetHandler>:
{
60001428:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000142c:	ldr	r2, [pc, #416]	; (600015d0 <ResetHandler+0x1a8>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000142e:	mov.w	r1, #11141120	; 0xaa0000
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001432:	ldr	r3, [pc, #416]	; (600015d4 <ResetHandler+0x1ac>)
	IOMUXC_GPR_GPR16 = 0x00200007;
60001434:	ldr	r0, [pc, #416]	; (600015d8 <ResetHandler+0x1b0>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001436:	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001438:	str	r0, [r3, #64]	; 0x40
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
6000143a:	ldr	r2, [pc, #416]	; (600015dc <ResetHandler+0x1b4>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000143c:	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
6000143e:	mov	sp, r2
	__asm__ volatile("dsb":::"memory");
60001440:	dsb	sy
	__asm__ volatile("isb":::"memory");
60001444:	isb	sy
	startup_early_hook(); // must be in FLASHMEM, as ITCM is not yet initialized!
60001448:	bl	60001784 <startup_default_early_hook>
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
6000144c:	movs	r4, #8
6000144e:	ldr	r3, [pc, #400]	; (600015e0 <ResetHandler+0x1b8>)
	memory_copy(&_stext, &_stextload, &_etext);
60001450:	ldr	r2, [pc, #400]	; (600015e4 <ResetHandler+0x1bc>)
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001452:	str.w	r4, [r3, #340]	; 0x154
	memory_copy(&_stext, &_stextload, &_etext);
60001456:	ldr	r1, [pc, #400]	; (600015e8 <ResetHandler+0x1c0>)
60001458:	ldr	r0, [pc, #400]	; (600015ec <ResetHandler+0x1c4>)
6000145a:	bl	60001400 <memory_copy>
	memory_copy(&_sdata, &_sdataload, &_edata);
6000145e:	ldr	r2, [pc, #400]	; (600015f0 <ResetHandler+0x1c8>)
60001460:	ldr	r1, [pc, #400]	; (600015f4 <ResetHandler+0x1cc>)
60001462:	ldr	r0, [pc, #404]	; (600015f8 <ResetHandler+0x1d0>)
60001464:	bl	60001400 <memory_copy>
	memory_clear(&_sbss, &_ebss);
60001468:	ldr	r1, [pc, #400]	; (600015fc <ResetHandler+0x1d4>)
6000146a:	ldr	r0, [pc, #404]	; (60001600 <ResetHandler+0x1d8>)
6000146c:	bl	60001418 <memory_clear>
	SCB_CPACR = 0x00F00000;
60001470:	ldr	r4, [pc, #400]	; (60001604 <ResetHandler+0x1dc>)
60001472:	mov.w	r1, #3758153728	; 0xe000e000
60001476:	mov.w	r0, #15728640	; 0xf00000
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
6000147a:	movs	r3, #0
6000147c:	ldr	r2, [pc, #392]	; (60001608 <ResetHandler+0x1e0>)
	SCB_CPACR = 0x00F00000;
6000147e:	str.w	r0, [r1, #3464]	; 0xd88
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
60001482:	str.w	r2, [r4, r3, lsl #2]
60001486:	adds	r3, #1
60001488:	cmp	r3, #176	; 0xb0
6000148a:	bne.n	60001482 <ResetHandler+0x5a>
6000148c:	ldr	r3, [pc, #380]	; (6000160c <ResetHandler+0x1e4>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
6000148e:	movs	r1, #128	; 0x80
60001490:	ldr	r2, [pc, #380]	; (60001610 <ResetHandler+0x1e8>)
60001492:	strb.w	r1, [r3], #1
60001496:	cmp	r3, r2
60001498:	bne.n	60001492 <ResetHandler+0x6a>
	SCB_VTOR = (uint32_t)_VectorsRam;
6000149a:	mov.w	r5, #3758153728	; 0xe000e000
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
6000149e:	ldr	r6, [pc, #320]	; (600015e0 <ResetHandler+0x1b8>)
600014a0:	mov.w	r9, #2155905152	; 0x80808080
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014a4:	ldr.w	fp, [pc, #404]	; 6000163c <ResetHandler+0x214>
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014a8:	ldr.w	sl, [pc, #404]	; 60001640 <ResetHandler+0x218>
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014ac:	mov.w	r1, #4294967295
	SCB_VTOR = (uint32_t)_VectorsRam;
600014b0:	str.w	r4, [r5, #3336]	; 0xd08
	SYST_CVR = 0;
600014b4:	movs	r7, #0
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014b6:	str.w	r9, [r6, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014ba:	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
600014be:	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014c2:	str.w	sl, [r6, #240]	; 0xf0
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014c6:	ldr.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014ca:	ldr.w	r8, [pc, #376]	; 60001644 <ResetHandler+0x21c>
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014ce:	orr.w	r3, r3, #458752	; 0x70000
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014d2:	ldr	r2, [pc, #256]	; (600015d4 <ResetHandler+0x1ac>)
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014d4:	str.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014d8:	ldr.w	r3, [r8, #28]
600014dc:	bic.w	r3, r3, #127	; 0x7f
600014e0:	orr.w	r3, r3, #64	; 0x40
600014e4:	str.w	r3, [r8, #28]
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
600014e8:	ldr.w	r3, [r8, #36]	; 0x24
600014ec:	bic.w	r3, r3, #127	; 0x7f
600014f0:	orr.w	r3, r3, #64	; 0x40
600014f4:	str.w	r3, [r8, #36]	; 0x24
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014f8:	str	r1, [r2, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
600014fa:	str	r1, [r2, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
600014fc:	str	r1, [r2, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
600014fe:	str	r1, [r2, #116]	; 0x74
	configure_cache();
60001500:	bl	60001790 <configure_cache>
	_VectorsRam[14] = pendablesrvreq_isr;
60001504:	ldr	r3, [pc, #268]	; (60001614 <ResetHandler+0x1ec>)
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001506:	ldr	r1, [pc, #272]	; (60001618 <ResetHandler+0x1f0>)
	_VectorsRam[14] = pendablesrvreq_isr;
60001508:	str	r3, [r4, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
6000150a:	ldr	r3, [pc, #272]	; (6000161c <ResetHandler+0x1f4>)
6000150c:	str	r3, [r4, #60]	; 0x3c
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
6000150e:	movs	r3, #99	; 0x63
60001510:	str	r3, [r5, #20]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001512:	movs	r3, #3
	SYST_CVR = 0;
60001514:	str	r7, [r5, #24]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001516:	str	r3, [r5, #16]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
60001518:	ldr	r3, [pc, #260]	; (60001620 <ResetHandler+0x1f8>)
6000151a:	str.w	r3, [r5, #3360]	; 0xd20
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
6000151e:	ldr.w	r3, [r5, #3580]	; 0xdfc
60001522:	orr.w	r3, r3, #16777216	; 0x1000000
60001526:	str.w	r3, [r5, #3580]	; 0xdfc
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000152a:	ldr	r3, [pc, #248]	; (60001624 <ResetHandler+0x1fc>)
6000152c:	ldr	r2, [r3, #0]
6000152e:	orr.w	r2, r2, #1
60001532:	str	r2, [r3, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001534:	ldr	r3, [r3, #4]
60001536:	str	r3, [r1, #0]
	usb_pll_start();	
60001538:	bl	60001c0c <usb_pll_start>
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
6000153c:	str.w	r9, [r6, #260]	; 0x104
	set_arm_clock(F_CPU);
60001540:	ldr	r0, [pc, #228]	; (60001628 <ResetHandler+0x200>)
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001542:	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
60001546:	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000154a:	str.w	sl, [r6, #240]	; 0xf0
	set_arm_clock(F_CPU);
6000154e:	bl	60001f08 <__set_arm_clock_veneer>
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001552:	ldr.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
60001556:	ldr	r3, [pc, #212]	; (6000162c <ResetHandler+0x204>)
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
60001558:	ldr	r2, [pc, #212]	; (60001630 <ResetHandler+0x208>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000155a:	orr.w	r1, r1, #12288	; 0x3000
6000155e:	str.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
60001562:	str	r7, [r3, #0]
	PIT_TCTRL0 = 0;
60001564:	str.w	r7, [r3, #264]	; 0x108
	PIT_TCTRL1 = 0;
60001568:	str.w	r7, [r3, #280]	; 0x118
	PIT_TCTRL2 = 0;
6000156c:	str.w	r7, [r3, #296]	; 0x128
	PIT_TCTRL3 = 0;
60001570:	str.w	r7, [r3, #312]	; 0x138
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
60001574:	ldr	r3, [r2, #56]	; 0x38
60001576:	lsls	r3, r3, #31
60001578:	bmi.n	6000158c <ResetHandler+0x164>
		SNVS_LPSRTCMR = 1546300800u >> 17;
6000157a:	movw	r3, #11797	; 0x2e15
		SNVS_LPSRTCLR = 1546300800u << 15;
6000157e:	ldr	r1, [pc, #180]	; (60001634 <ResetHandler+0x20c>)
60001580:	str	r1, [r2, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
60001582:	str	r3, [r2, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
60001584:	ldr	r3, [r2, #56]	; 0x38
60001586:	orr.w	r3, r3, #1
6000158a:	str	r3, [r2, #56]	; 0x38
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
6000158c:	ldr	r2, [pc, #160]	; (60001630 <ResetHandler+0x208>)
6000158e:	ldr	r4, [pc, #168]	; (60001638 <ResetHandler+0x210>)
60001590:	ldr	r3, [r2, #8]
60001592:	orr.w	r3, r3, #65537	; 0x10001
60001596:	str	r3, [r2, #8]
	configure_external_ram();
60001598:	bl	60001888 <configure_external_ram>
	analog_init();
6000159c:	bl	60001e60 <analog_init>
	pwm_init();
600015a0:	bl	60001ee0 <__pwm_init_veneer>
	tempmon_init();
600015a4:	bl	60001c68 <tempmon_init>
	startup_middle_hook();
600015a8:	bl	60001788 <startup_default_middle_hook>
// Returns the number of milliseconds since your program started running.
// This 32 bit number will roll back to zero after about 49.7 days.  For a
// simpler way to build delays or timeouts, consider using elapsedMillis.
static inline uint32_t millis(void)
{
	return systick_millis_count;
600015ac:	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015ae:	cmp	r3, #19
600015b0:	bls.n	600015ac <ResetHandler+0x184>
	usb_init();
600015b2:	bl	60001648 <usb_init>
600015b6:	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_AFTER + TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015b8:	cmp.w	r3, #300	; 0x12c
600015bc:	bcc.n	600015b6 <ResetHandler+0x18e>
	startup_late_hook();
600015be:	bl	6000178c <startup_default_late_hook>
	__libc_init_array();
600015c2:	bl	60001ef0 <____libc_init_array_veneer>
	main();
600015c6:	bl	60001ee8 <__main_veneer>
	while (1) asm("WFI");
600015ca:	wfi
600015cc:	b.n	600015ca <ResetHandler+0x1a2>
600015ce:	nop
600015d0:	.word	0xaaaaaabf
600015d4:	.word	0x400ac000
600015d8:	.word	0x00200007
600015dc:	.word	0x20068000
600015e0:	.word	0x400d8000
600015e4:	.word	0x00013678
600015e8:	.word	0x60002378
600015ec:	.word	0x00000000
600015f0:	.word	0x20001ec0
600015f4:	.word	0x600159f4
600015f8:	.word	0x20000000
600015fc:	.word	0x200081a0
60001600:	.word	0x20001ec0
60001604:	.word	0x20001c00
60001608:	.word	0x0000b8a1
6000160c:	.word	0xe000e400
60001610:	.word	0xe000e4a0
60001614:	.word	0x0000c26d
60001618:	.word	0x200080e0
6000161c:	.word	0x0000c271
60001620:	.word	0x20200000
60001624:	.word	0xe0001000
60001628:	.word	0x016e3600
6000162c:	.word	0x40084000
60001630:	.word	0x400d4000
60001634:	.word	0x56c00000
60001638:	.word	0x200080e4
6000163c:	.word	0x2018101b
60001640:	.word	0x13110d0c
60001644:	.word	0x400fc000

60001648 <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001648:	ldr	r3, [pc, #196]	; (60001710 <usb_init+0xc8>)
6000164a:	movw	r2, #3937	; 0xf61
{
6000164e:	push	{r4, lr}
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001650:	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001654:	movw	r4, #1028	; 0x404
	usb_init_serialnumber();
60001658:	bl	60001ec0 <__usb_init_serialnumber_veneer>
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
6000165c:	ldr	r2, [pc, #180]	; (60001714 <usb_init+0xcc>)
	USB1_BURSTSIZE = 0x0404;
6000165e:	ldr	r1, [pc, #184]	; (60001718 <usb_init+0xd0>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001660:	ldr.w	r3, [r2, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001664:	ldr	r0, [pc, #180]	; (6000171c <usb_init+0xd4>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001666:	orr.w	r3, r3, #3
6000166a:	str.w	r3, [r2, #128]	; 0x80
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
6000166e:	ldr	r3, [pc, #176]	; (60001720 <usb_init+0xd8>)
	USB1_BURSTSIZE = 0x0404;
60001670:	str.w	r4, [r1, #352]	; 0x160
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001674:	ldr	r2, [r0, #0]
60001676:	tst	r2, r3
60001678:	bne.n	60001682 <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
6000167a:	ldr.w	r3, [r1, #424]	; 0x1a8
6000167e:	lsls	r2, r3, #30
60001680:	beq.n	600016ba <usb_init+0x72>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001682:	ldr	r2, [pc, #148]	; (60001718 <usb_init+0xd0>)
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
60001684:	mov.w	r1, #2147483648	; 0x80000000
60001688:	ldr	r3, [pc, #144]	; (6000171c <usb_init+0xd4>)
6000168a:	str	r1, [r3, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
6000168c:	ldr.w	r3, [r2, #320]	; 0x140
60001690:	orr.w	r3, r3, #2
60001694:	str.w	r3, [r2, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
60001698:	ldr.w	r3, [r2, #320]	; 0x140
6000169c:	lsls	r3, r3, #30
6000169e:	bmi.n	60001698 <usb_init+0x50>
		NVIC_CLEAR_PENDING(IRQ_USB1);
600016a0:	mov.w	r0, #131072	; 0x20000
600016a4:	mov.w	r1, #3758153728	; 0xe000e000
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
600016a8:	ldr	r3, [pc, #112]	; (6000171c <usb_init+0xd4>)
600016aa:	mov.w	r2, #2147483648	; 0x80000000
		NVIC_CLEAR_PENDING(IRQ_USB1);
600016ae:	str.w	r0, [r1, #652]	; 0x28c
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
600016b2:	movs	r0, #25
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
600016b4:	str	r2, [r3, #56]	; 0x38
		delay(25);
600016b6:	bl	60001ec8 <__delay_veneer>
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
600016ba:	ldr	r2, [pc, #96]	; (6000171c <usb_init+0xd4>)
600016bc:	mov.w	r0, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600016c0:	ldr	r4, [pc, #84]	; (60001718 <usb_init+0xd0>)
	USBPHY1_PWD = 0;
600016c2:	movs	r1, #0
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
600016c4:	str	r0, [r2, #56]	; 0x38
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600016c6:	movs	r0, #10
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600016c8:	ldr	r3, [pc, #88]	; (60001724 <usb_init+0xdc>)
	USBPHY1_PWD = 0;
600016ca:	str	r1, [r2, #0]
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600016cc:	mov.w	r2, #896	; 0x380
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600016d0:	str.w	r0, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600016d4:	mov	r0, r3
600016d6:	bl	60001ed0 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
	endpoint_queue_head[1].config = (64 << 16);
600016da:	mov.w	r2, #4194304	; 0x400000
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600016de:	mov	r3, r0
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
600016e0:	mov.w	r0, #4227072	; 0x408000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
600016e4:	movw	r1, #323	; 0x143
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
600016e8:	str	r0, [r3, #0]
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
600016ea:	str.w	r3, [r4, #344]	; 0x158
	endpoint_queue_head[1].config = (64 << 16);
600016ee:	str	r2, [r3, #64]	; 0x40
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* volatile _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
600016f0:	ldr	r3, [pc, #52]	; (60001728 <usb_init+0xe0>)
600016f2:	ldr	r2, [pc, #56]	; (6000172c <usb_init+0xe4>)
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
600016f4:	str.w	r1, [r4, #328]	; 0x148
600016f8:	str.w	r2, [r3, #516]	; 0x204
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &usb_isr;
	attachInterruptVector(IRQ_USB1, &usb_isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
600016fc:	mov.w	r2, #3758153728	; 0xe000e000
60001700:	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001704:	movs	r3, #1
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001706:	str.w	r1, [r2, #268]	; 0x10c
	USB1_USBCMD = USB_USBCMD_RS;
6000170a:	str.w	r3, [r4, #320]	; 0x140
	//transfer_log_head = 0;
	//transfer_log_count = 0;
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}
6000170e:	pop	{r4, pc}
60001710:	.word	0x400d8000
60001714:	.word	0x400fc000
60001718:	.word	0x402e0000
6000171c:	.word	0x400d9000
60001720:	.word	0x001e1c00
60001724:	.word	0x20000000
60001728:	.word	0x20001c00
6000172c:	.word	0x0000ae55

60001730 <_reboot_Teensyduino_>:


FLASHMEM void _reboot_Teensyduino_(void)
{
60001730:	push	{r3, lr}
	if (!(HW_OCOTP_CFG5 & 0x02)) {
60001732:	ldr	r3, [pc, #56]	; (6000176c <_reboot_Teensyduino_+0x3c>)
60001734:	ldr	r3, [r3, #96]	; 0x60
60001736:	lsls	r3, r3, #30
60001738:	bmi.n	6000173c <_reboot_Teensyduino_+0xc>
		asm("bkpt #251"); // run bootloader
6000173a:	bkpt	0x00fb
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
6000173c:	cpsid	i
		USB1_USBCMD = 0;
6000173e:	ldr	r3, [pc, #48]	; (60001770 <_reboot_Teensyduino_+0x40>)
60001740:	movs	r0, #0
		IOMUXC_GPR_GPR16 = 0x00200003;
60001742:	ldr	r2, [pc, #48]	; (60001774 <_reboot_Teensyduino_+0x44>)
		USB1_USBCMD = 0;
60001744:	str.w	r0, [r3, #320]	; 0x140
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001748:	add.w	r3, r3, #3758096384	; 0xe0000000
		IOMUXC_GPR_GPR16 = 0x00200003;
6000174c:	ldr	r1, [pc, #40]	; (60001778 <_reboot_Teensyduino_+0x48>)
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
6000174e:	sub.w	r3, r3, #913408	; 0xdf000
		IOMUXC_GPR_GPR16 = 0x00200003;
60001752:	str	r1, [r2, #64]	; 0x40
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001754:	mov	sp, r3
		__asm__ volatile("dsb":::"memory");
60001756:	dsb	sy
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
6000175a:	mov.w	r3, #2097152	; 0x200000
		*p = 0xEB120000;
6000175e:	ldr	r0, [pc, #28]	; (6000177c <_reboot_Teensyduino_+0x4c>)
60001760:	ldr	r2, [pc, #28]	; (60001780 <_reboot_Teensyduino_+0x50>)
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001762:	ldr	r3, [r3, #28]
		*p = 0xEB120000;
60001764:	str	r2, [r0, #0]
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001766:	ldr	r3, [r3, #8]
60001768:	blx	r3
	}
	__builtin_unreachable();
6000176a:	nop
6000176c:	.word	0x401f4400
60001770:	.word	0x402e0000
60001774:	.word	0x400ac000
60001778:	.word	0x00200003
6000177c:	.word	0x20208000
60001780:	.word	0xeb120000

60001784 <startup_default_early_hook>:
FLASHMEM void startup_default_early_hook(void) {}
60001784:	bx	lr
60001786:	nop

60001788 <startup_default_middle_hook>:
60001788:	bx	lr
6000178a:	nop

6000178c <startup_default_late_hook>:
6000178c:	bx	lr
6000178e:	nop

60001790 <configure_cache>:
{
60001790:	push	{r4}
	SCB_MPU_CTRL = 0; // turn off MPU
60001792:	mov.w	r3, #3758153728	; 0xe000e000
60001796:	movs	r1, #0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001798:	movs	r4, #16
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
6000179a:	ldr	r0, [pc, #172]	; (60001848 <configure_cache+0xb8>)
	SCB_MPU_CTRL = 0; // turn off MPU
6000179c:	str.w	r1, [r3, #3476]	; 0xd94
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600017a0:	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
600017a4:	movs	r4, #17
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600017a6:	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600017aa:	ldr	r0, [pc, #160]	; (6000184c <configure_cache+0xbc>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
600017ac:	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
600017b0:	movs	r4, #18
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600017b2:	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600017b6:	ldr	r0, [pc, #152]	; (60001850 <configure_cache+0xc0>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
600017b8:	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600017bc:	ldr	r2, [pc, #148]	; (60001854 <configure_cache+0xc4>)
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600017be:	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
600017c2:	ldr	r4, [pc, #148]	; (60001858 <configure_cache+0xc8>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600017c4:	orr.w	r2, r2, #21
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600017c8:	ldr	r0, [pc, #144]	; (6000185c <configure_cache+0xcc>)
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
600017ca:	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600017ce:	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600017d2:	ldr	r4, [pc, #140]	; (60001860 <configure_cache+0xd0>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600017d4:	ldr	r0, [pc, #140]	; (60001864 <configure_cache+0xd4>)
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600017d6:	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600017da:	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600017de:	ldr	r4, [pc, #136]	; (60001868 <configure_cache+0xd8>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600017e0:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
600017e4:	ldr	r0, [pc, #132]	; (6000186c <configure_cache+0xdc>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600017e6:	ldr	r2, [pc, #136]	; (60001870 <configure_cache+0xe0>)
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600017e8:	str.w	r4, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
600017ec:	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600017f0:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600017f4:	add.w	r2, r2, #327680	; 0x50000
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
600017f8:	ldr	r4, [pc, #120]	; (60001874 <configure_cache+0xe4>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600017fa:	adds	r2, #12
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
600017fc:	ldr	r0, [pc, #120]	; (60001878 <configure_cache+0xe8>)
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
600017fe:	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001802:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001806:	ldr	r2, [pc, #116]	; (6000187c <configure_cache+0xec>)
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
60001808:	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
6000180c:	ldr	r4, [pc, #112]	; (60001880 <configure_cache+0xf0>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
6000180e:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
60001812:	movs	r2, #1
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001814:	ldr	r0, [pc, #108]	; (60001884 <configure_cache+0xf4>)
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001816:	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
6000181a:	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
6000181e:	str.w	r2, [r3, #3476]	; 0xd94
	asm("dsb");
60001822:	dsb	sy
	asm("isb");
60001826:	isb	sy
	SCB_CACHE_ICIALLU = 0;
6000182a:	str.w	r1, [r3, #3920]	; 0xf50
	asm("dsb");
6000182e:	dsb	sy
	asm("isb");
60001832:	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001836:	ldr.w	r2, [r3, #3348]	; 0xd14
}
6000183a:	ldr.w	r4, [sp], #4
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
6000183e:	orr.w	r2, r2, #196608	; 0x30000
60001842:	str.w	r2, [r3, #3348]	; 0xd14
}
60001846:	bx	lr
60001848:	.word	0x1000003f
6000184c:	.word	0x03080025
60001850:	.word	0x00100009
60001854:	.word	0x200081a0
60001858:	.word	0x00200013
6000185c:	.word	0x07020021
60001860:	.word	0x20000014
60001864:	.word	0x13080025
60001868:	.word	0x10000009
6000186c:	.word	0x20200016
60001870:	.word	0x130b0027
60001874:	.word	0x40000017
60001878:	.word	0x60000018
6000187c:	.word	0x070b002f
60001880:	.word	0x70000019
60001884:	.word	0x130b002f

60001888 <configure_external_ram>:
{
60001888:	push	{r4, r5, r6, r7, lr}
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
6000188a:	ldr	r3, [pc, #736]	; (60001b6c <configure_external_ram+0x2e4>)
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
6000188c:	movs	r2, #24
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
6000188e:	ldr	r6, [pc, #736]	; (60001b70 <configure_external_ram+0x2e8>)
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
60001890:	movs	r0, #1
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
60001892:	ldr	r7, [pc, #736]	; (60001b74 <configure_external_ram+0x2ec>)
{
60001894:	sub	sp, #12
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001896:	str.w	r6, [r3, #604]	; 0x25c
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
6000189a:	ldr	r1, [pc, #732]	; (60001b78 <configure_external_ram+0x2f0>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
6000189c:	str.w	r7, [r3, #608]	; 0x260
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600018a0:	ldr	r5, [pc, #728]	; (60001b7c <configure_external_ram+0x2f4>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600018a2:	str.w	r6, [r3, #612]	; 0x264
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
600018a6:	sub.w	r6, r6, #45056	; 0xb000
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
600018aa:	ldr	r4, [pc, #724]	; (60001b80 <configure_external_ram+0x2f8>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
600018ac:	str.w	r6, [r3, #616]	; 0x268
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600018b0:	str.w	r5, [r3, #620]	; 0x26c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600018b4:	str.w	r5, [r3, #624]	; 0x270
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600018b8:	str.w	r5, [r3, #628]	; 0x274
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600018bc:	str.w	r5, [r3, #632]	; 0x278
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
600018c0:	movw	r5, #34572	; 0x870c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
600018c4:	str	r2, [r3, #108]	; 0x6c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_23 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DQS
600018c6:	str	r2, [r3, #112]	; 0x70
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_24 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS0_B (RAM)
600018c8:	str	r2, [r3, #116]	; 0x74
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_25 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SCLK
600018ca:	str	r2, [r3, #120]	; 0x78
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
600018cc:	str	r2, [r3, #124]	; 0x7c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
600018ce:	str.w	r2, [r3, #128]	; 0x80
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
600018d2:	str.w	r2, [r3, #132]	; 0x84
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3
600018d6:	str.w	r2, [r3, #136]	; 0x88
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
600018da:	str.w	r0, [r1, #812]	; 0x32c
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
600018de:	ldr	r2, [pc, #676]	; (60001b84 <configure_external_ram+0x2fc>)
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT = 1; // GPIO_EMC_26 for Mode: ALT8
600018e0:	str.w	r0, [r1, #816]	; 0x330
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT = 1; // GPIO_EMC_27 for Mode: ALT8
600018e4:	str.w	r0, [r1, #820]	; 0x334
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
600018e8:	str.w	r0, [r1, #824]	; 0x338
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
600018ec:	str.w	r0, [r1, #828]	; 0x33c
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8
600018f0:	str.w	r0, [r1, #848]	; 0x350
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
600018f4:	ldr	r1, [r4, #24]
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
600018f6:	ldr	r3, [pc, #656]	; (60001b88 <configure_external_ram+0x300>)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
600018f8:	ands	r2, r1
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
600018fa:	ldr	r0, [pc, #656]	; (60001b8c <configure_external_ram+0x304>)
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
600018fc:	ldr	r1, [pc, #656]	; (60001b90 <configure_external_ram+0x308>)
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
600018fe:	orrs	r3, r2
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001900:	ldr	r2, [pc, #656]	; (60001b94 <configure_external_ram+0x30c>)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001902:	str	r3, [r4, #24]
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);
60001904:	ldr.w	r3, [r4, #132]	; 0x84
60001908:	orr.w	r3, r3, #12
6000190c:	str.w	r3, [r4, #132]	; 0x84
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
60001910:	mov.w	r4, #4294967295
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
60001914:	ldr	r3, [r0, #0]
60001916:	orr.w	r3, r3, #2
6000191a:	str	r3, [r0, #0]
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
6000191c:	ldr	r3, [r0, #0]
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
6000191e:	ands	r3, r5
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
60001920:	mov.w	r5, #8192	; 0x2000
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001924:	orrs	r2, r3
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001926:	ldr	r3, [pc, #624]	; (60001b98 <configure_external_ram+0x310>)
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60001928:	str	r2, [r0, #0]
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
6000192a:	str	r4, [r0, #4]
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
6000192c:	ldr	r2, [r1, #8]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
6000192e:	ldr	r4, [pc, #620]	; (60001b9c <configure_external_ram+0x314>)
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001930:	ands	r3, r2
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001932:	ldr	r2, [pc, #620]	; (60001ba0 <configure_external_ram+0x318>)
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
60001934:	orr.w	r3, r3, #536870912	; 0x20000000
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001938:	str	r3, [r0, #8]
	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
6000193a:	ldr	r3, [r0, #12]
6000193c:	bic.w	r3, r3, #120	; 0x78
60001940:	str	r3, [r0, #12]
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001942:	ldr	r3, [r0, #32]
60001944:	ands	r3, r2
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001946:	orrs	r3, r4
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001948:	str	r3, [r0, #32]
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
6000194a:	ldr	r3, [r0, #32]
6000194c:	ands	r3, r2
	FLEXSPI2_AHBRXBUF2CR0 = mask;
6000194e:	ldr	r2, [pc, #596]	; (60001ba4 <configure_external_ram+0x31c>)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001950:	orrs	r3, r4
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001952:	ldr	r4, [pc, #596]	; (60001ba8 <configure_external_ram+0x320>)
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001954:	str	r3, [r0, #36]	; 0x24
	FLEXSPI2_AHBRXBUF2CR0 = mask;
60001956:	str	r2, [r0, #40]	; 0x28
	FLEXSPI2_AHBRXBUF3CR0 = mask;
60001958:	str	r2, [r0, #44]	; 0x2c
	FLEXSPI2_INTEN = 0;
6000195a:	movs	r2, #0
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
6000195c:	ldr.w	r3, [r1, #184]	; 0xb8
60001960:	bic.w	r3, r3, #63	; 0x3f
60001964:	orr.w	r3, r3, #1
60001968:	str.w	r3, [r0, #184]	; 0xb8
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
6000196c:	ldr.w	r3, [r1, #188]	; 0xbc
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001970:	ldr	r1, [pc, #568]	; (60001bac <configure_external_ram+0x324>)
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
60001972:	bic.w	r3, r3, #63	; 0x3f
60001976:	orr.w	r3, r3, #1
6000197a:	str.w	r3, [r0, #188]	; 0xbc
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
6000197e:	movw	r3, #1541	; 0x605
	FLEXSPI2_INTEN = 0;
60001982:	str	r2, [r0, #16]
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
60001984:	str	r5, [r0, #96]	; 0x60
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001986:	str	r4, [r0, #112]	; 0x70
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001988:	str.w	r3, [r0, #128]	; 0x80
	FLEXSPI2_FLSHA2CR0 = 0x2000; // 8 MByte
6000198c:	str	r5, [r0, #100]	; 0x64
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
6000198e:	str	r4, [r0, #116]	; 0x74
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001990:	movs	r4, #2
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001992:	str.w	r3, [r0, #132]	; 0x84
	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
60001996:	ldr	r3, [r0, #0]
60001998:	bic.w	r3, r3, #2
6000199c:	str	r3, [r0, #0]
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
6000199e:	str	r1, [r0, #24]
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600019a0:	ldr	r3, [pc, #524]	; (60001bb0 <configure_external_ram+0x328>)
	for (int i=0; i < 64; i++) luttable[i] = 0;
600019a2:	ldr	r1, [pc, #528]	; (60001bb4 <configure_external_ram+0x32c>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600019a4:	str	r4, [r0, #28]
	for (int i=0; i < 64; i++) luttable[i] = 0;
600019a6:	str.w	r2, [r3], #4
600019aa:	cmp	r3, r1
600019ac:	bne.n	600019a6 <configure_external_ram+0x11e>
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
600019ae:	ldr	r2, [pc, #476]	; (60001b8c <configure_external_ram+0x304>)
600019b0:	ldr	r3, [r2, #0]
600019b2:	orr.w	r3, r3, #1
600019b6:	str	r3, [r2, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
600019b8:	ldr	r3, [r2, #0]
600019ba:	ands.w	r3, r3, #1
600019be:	bne.n	600019b8 <configure_external_ram+0x130>
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600019c0:	ldr	r0, [pc, #488]	; (60001bac <configure_external_ram+0x324>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600019c2:	movs	r1, #2
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
600019c4:	movw	r4, #1781	; 0x6f5
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600019c8:	str	r0, [r2, #24]
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
600019ca:	movw	r0, #1177	; 0x499
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600019ce:	str	r1, [r2, #28]
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
600019d0:	movw	r1, #1126	; 0x466
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
600019d4:	str.w	r4, [r2, #512]	; 0x200
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
600019d8:	movw	r4, #9217	; 0x2401
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
600019dc:	str.w	r1, [r2, #528]	; 0x210
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
600019e0:	ldr	r1, [pc, #468]	; (60001bb8 <configure_external_ram+0x330>)
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
600019e2:	str.w	r0, [r2, #544]	; 0x220
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
600019e6:	str.w	r1, [r2, #560]	; 0x230
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
600019ea:	movw	r1, #1077	; 0x435
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
600019ee:	ldr	r0, [pc, #460]	; (60001bbc <configure_external_ram+0x334>)
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
600019f0:	str.w	r4, [r2, #564]	; 0x234
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
600019f4:	str.w	r1, [r2, #576]	; 0x240
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
600019f8:	ldr	r4, [pc, #452]	; (60001bc0 <configure_external_ram+0x338>)
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
600019fa:	str.w	r0, [r2, #592]	; 0x250
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
600019fe:	movw	r0, #8705	; 0x2201
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
60001a02:	ldr	r1, [pc, #448]	; (60001bc4 <configure_external_ram+0x33c>)
60001a04:	str.w	r1, [r2, #596]	; 0x254
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a08:	movs	r1, #1
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
60001a0a:	str.w	r4, [r2, #608]	; 0x260
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
60001a0e:	str.w	r0, [r2, #612]	; 0x264
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a12:	ldr	r0, [pc, #376]	; (60001b8c <configure_external_ram+0x304>)
	FLEXSPI2_IPCR0 = addr;
60001a14:	str.w	r3, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a18:	str.w	r3, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a1c:	str.w	r1, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a20:	ldr	r3, [r0, #20]
60001a22:	lsls	r2, r3, #31
60001a24:	bpl.n	60001a20 <configure_external_ram+0x198>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a26:	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001a28:	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a2a:	mov.w	r2, #65536	; 0x10000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a2e:	ldr	r1, [pc, #348]	; (60001b8c <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a30:	str	r3, [r0, #20]
	FLEXSPI2_IPCR0 = addr;
60001a32:	str.w	r4, [r0, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a36:	str.w	r2, [r0, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a3a:	str.w	r3, [r0, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a3e:	ldr	r3, [r1, #20]
60001a40:	lsls	r3, r3, #31
60001a42:	bpl.n	60001a3e <configure_external_ram+0x1b6>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a44:	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001a46:	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a48:	mov.w	r0, #131072	; 0x20000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a4c:	ldr	r2, [pc, #316]	; (60001b8c <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a4e:	str	r3, [r1, #20]
	FLEXSPI2_IPCR0 = addr;
60001a50:	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a54:	str.w	r0, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a58:	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a5c:	ldr	r3, [r2, #20]
60001a5e:	lsls	r7, r3, #31
60001a60:	bpl.n	60001a5c <configure_external_ram+0x1d4>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a62:	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001a64:	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001a66:	ldr	r0, [pc, #352]	; (60001bc8 <configure_external_ram+0x340>)
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a68:	ldr	r1, [pc, #288]	; (60001b8c <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a6a:	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
60001a6c:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001a70:	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a74:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a78:	ldr	r3, [r1, #20]
60001a7a:	lsls	r6, r3, #31
60001a7c:	bpl.n	60001a78 <configure_external_ram+0x1f0>
	uint32_t id = FLEXSPI2_RFDR0;
60001a7e:	ldr.w	r3, [r1, #256]	; 0x100
	if (flexspi2_psram_id(0) == 0x5D0D) {
60001a82:	movw	r2, #23821	; 0x5d0d
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001a86:	movs	r0, #33	; 0x21
	return id & 0xFFFF;
60001a88:	uxth	r3, r3
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001a8a:	str	r0, [r1, #20]
	if (flexspi2_psram_id(0) == 0x5D0D) {
60001a8c:	cmp	r3, r2
60001a8e:	bne.n	60001b5c <configure_external_ram+0x2d4>
	FLEXSPI2_IPCR0 = addr;
60001a90:	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a92:	mov.w	r2, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a96:	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a98:	ldr	r0, [pc, #240]	; (60001b8c <configure_external_ram+0x304>)
	FLEXSPI2_IPCR0 = addr;
60001a9a:	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a9e:	str.w	r2, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001aa2:	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001aa6:	ldr	r3, [r0, #20]
60001aa8:	lsls	r5, r3, #31
60001aaa:	bpl.n	60001aa6 <configure_external_ram+0x21e>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001aac:	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001aae:	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001ab2:	movs	r1, #0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001ab4:	ldr	r2, [pc, #212]	; (60001b8c <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001ab6:	str	r3, [r0, #20]
	FLEXSPI2_IPCR0 = addr;
60001ab8:	str.w	r4, [r0, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001abc:	str.w	r1, [r0, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001ac0:	str.w	r3, [r0, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001ac4:	ldr	r3, [r2, #20]
60001ac6:	lsls	r4, r3, #31
60001ac8:	bpl.n	60001ac4 <configure_external_ram+0x23c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001aca:	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001acc:	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001ad0:	mov.w	r0, #65536	; 0x10000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001ad4:	ldr	r1, [pc, #180]	; (60001b8c <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001ad6:	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
60001ad8:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001adc:	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001ae0:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001ae4:	ldr	r3, [r1, #20]
60001ae6:	lsls	r0, r3, #31
60001ae8:	bpl.n	60001ae4 <configure_external_ram+0x25c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001aea:	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001aec:	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001af0:	mov.w	r0, #131072	; 0x20000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001af4:	ldr	r2, [pc, #148]	; (60001b8c <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001af6:	str	r3, [r1, #20]
	FLEXSPI2_IPCR0 = addr;
60001af8:	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001afc:	str.w	r0, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001b00:	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b04:	ldr	r3, [r2, #20]
60001b06:	lsls	r1, r3, #31
60001b08:	bpl.n	60001b04 <configure_external_ram+0x27c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b0a:	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001b0c:	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001b10:	ldr	r0, [pc, #180]	; (60001bc8 <configure_external_ram+0x340>)
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b12:	ldr	r1, [pc, #120]	; (60001b8c <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b14:	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
60001b16:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001b1a:	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001b1e:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b22:	ldr	r3, [r1, #20]
60001b24:	lsls	r2, r3, #31
60001b26:	bpl.n	60001b22 <configure_external_ram+0x29a>
	uint32_t id = FLEXSPI2_RFDR0;
60001b28:	ldr.w	r3, [r1, #256]	; 0x100
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001b2c:	movw	r2, #23821	; 0x5d0d
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001b30:	movs	r0, #33	; 0x21
	return id & 0xFFFF;
60001b32:	uxth	r3, r3
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001b34:	str	r0, [r1, #20]
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001b36:	cmp	r3, r2
60001b38:	beq.n	60001bdc <configure_external_ram+0x354>
60001b3a:	movs	r5, #8
60001b3c:	mov.w	r4, #8388608	; 0x800000
			external_psram_size * 0x100000 -
60001b40:	ldr	r1, [pc, #136]	; (60001bcc <configure_external_ram+0x344>)
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001b42:	movs	r0, #0
			external_psram_size * 0x100000 -
60001b44:	ldr	r3, [pc, #136]	; (60001bd0 <configure_external_ram+0x348>)
			external_psram_size = 16;
60001b46:	ldr	r2, [pc, #140]	; (60001bd4 <configure_external_ram+0x34c>)
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001b48:	str	r0, [sp, #0]
			external_psram_size = 16;
60001b4a:	strb	r5, [r2, #0]
			external_psram_size * 0x100000 -
60001b4c:	subs	r2, r3, r1
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001b4e:	movs	r3, #1
60001b50:	ldr	r0, [pc, #132]	; (60001bd8 <configure_external_ram+0x350>)
60001b52:	add	r2, r4
60001b54:	bl	60001ef8 <__sm_set_pool_veneer>
}
60001b58:	add	sp, #12
60001b5a:	pop	{r4, r5, r6, r7, pc}
		memset(&extmem_smalloc_pool, 0, sizeof(extmem_smalloc_pool));
60001b5c:	ldr	r3, [pc, #120]	; (60001bd8 <configure_external_ram+0x350>)
60001b5e:	movs	r2, #0
60001b60:	strd	r2, r2, [r3]
60001b64:	strd	r2, r2, [r3, #8]
}
60001b68:	add	sp, #12
60001b6a:	pop	{r4, r5, r6, r7, pc}
60001b6c:	.word	0x401f8000
60001b70:	.word	0x0001b0f9
60001b74:	.word	0x000110f9
60001b78:	.word	0x401f8400
60001b7c:	.word	0x000170f9
60001b80:	.word	0x400fc000
60001b84:	.word	0x1ffffcff
60001b88:	.word	0xa0000300
60001b8c:	.word	0x402a4000
60001b90:	.word	0x402a8000
60001b94:	.word	0xffff0012
60001b98:	.word	0x00f737ff
60001b9c:	.word	0x80000040
60001ba0:	.word	0x7cf0ff00
60001ba4:	.word	0x830f00ff
60001ba8:	.word	0x00020063
60001bac:	.word	0x5af05af0
60001bb0:	.word	0x402a4200
60001bb4:	.word	0x402a4300
60001bb8:	.word	0x3018049f
60001bbc:	.word	0x0a1806eb
60001bc0:	.word	0x0a180638
60001bc4:	.word	0x26013206
60001bc8:	.word	0x00030004
60001bcc:	.word	0x70000000
60001bd0:	.word	0x70000000
60001bd4:	.word	0x20008160
60001bd8:	.word	0x20007998
	FLEXSPI2_IPCR0 = addr;
60001bdc:	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001be0:	mov.w	r2, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001be4:	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001be6:	ldr	r0, [pc, #32]	; (60001c08 <configure_external_ram+0x380>)
	FLEXSPI2_IPCR0 = addr;
60001be8:	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001bec:	str.w	r2, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001bf0:	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001bf4:	ldr	r3, [r0, #20]
60001bf6:	lsls	r3, r3, #31
60001bf8:	bpl.n	60001bf4 <configure_external_ram+0x36c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001bfa:	movs	r3, #1
60001bfc:	movs	r5, #16
60001bfe:	mov.w	r4, #16777216	; 0x1000000
60001c02:	str	r3, [r0, #20]
			external_psram_size = 16;
60001c04:	b.n	60001b40 <configure_external_ram+0x2b8>
60001c06:	nop
60001c08:	.word	0x402a4000

60001c0c <usb_pll_start>:
{
60001c0c:	push	{r4, r5, r6, r7}
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001c0e:	ldr	r2, [pc, #84]	; (60001c64 <usb_pll_start+0x58>)
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001c10:	movs	r7, #64	; 0x40
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001c12:	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001c16:	mov.w	r6, #4096	; 0x1000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001c1a:	mov.w	r5, #8192	; 0x2000
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001c1e:	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001c22:	movw	r0, #12354	; 0x3042
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001c26:	ldr	r3, [r2, #16]
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001c28:	tst.w	r3, #2
60001c2c:	bne.n	60001c4c <usb_pll_start+0x40>
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
60001c2e:	tst.w	r3, #8192	; 0x2000
60001c32:	beq.n	60001c54 <usb_pll_start+0x48>
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
60001c34:	tst.w	r3, #4096	; 0x1000
60001c38:	beq.n	60001c58 <usb_pll_start+0x4c>
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
60001c3a:	cmp	r3, #0
60001c3c:	bge.n	60001c26 <usb_pll_start+0x1a>
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
60001c3e:	tst.w	r3, #65536	; 0x10000
60001c42:	bne.n	60001c5c <usb_pll_start+0x50>
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
60001c44:	lsls	r3, r3, #25
60001c46:	bpl.n	60001c60 <usb_pll_start+0x54>
}
60001c48:	pop	{r4, r5, r6, r7}
60001c4a:	bx	lr
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001c4c:	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60001c4e:	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001c50:	str	r0, [r2, #24]
			continue;
60001c52:	b.n	60001c26 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001c54:	str	r5, [r2, #20]
			continue;
60001c56:	b.n	60001c26 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001c58:	str	r6, [r2, #20]
			continue;
60001c5a:	b.n	60001c26 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001c5c:	str	r1, [r2, #24]
			continue;
60001c5e:	b.n	60001c26 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001c60:	str	r7, [r2, #20]
			continue;
60001c62:	b.n	60001c26 <usb_pll_start+0x1a>
60001c64:	.word	0x400d8000

60001c68 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001c68:	ldr	r2, [pc, #252]	; (60001d68 <tempmon_init+0x100>)

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001c6a:	movs	r0, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
60001c6c:	ldr	r1, [pc, #252]	; (60001d6c <tempmon_init+0x104>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001c6e:	vmov.f32	s11, #57	; 0x41c80000  25.0
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001c72:	ldr.w	r3, [r2, #128]	; 0x80
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001c76:	mov.w	ip, #0
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c7a:	vldr	s12, [pc, #244]	; 60001d70 <tempmon_init+0x108>
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001c7e:	bic.w	r3, r3, #1
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c82:	vldr	s10, [pc, #240]	; 60001d74 <tempmon_init+0x10c>
{
60001c86:	push	{r4, r5}
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001c88:	str.w	r3, [r2, #128]	; 0x80
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001c8c:	str.w	r0, [r2, #144]	; 0x90
  calibrationData = HW_OCOTP_ANA1;
60001c90:	ldr.w	r1, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001c94:	ldr	r5, [pc, #224]	; (60001d78 <tempmon_init+0x110>)
60001c96:	uxtb	r3, r1
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001c98:	ldr	r4, [pc, #224]	; (60001d7c <tempmon_init+0x114>)
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001c9a:	ldr	r0, [pc, #228]	; (60001d80 <tempmon_init+0x118>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001c9c:	str	r3, [r5, #0]
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001c9e:	vmov	s15, r3
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001ca2:	lsrs	r3, r1, #20
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001ca4:	ubfx	r1, r1, #8, #12
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001ca8:	vcvt.f32.s32	s15, s15
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001cac:	vmov	s13, r3
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001cb0:	vmov	s14, r1
60001cb4:	ldr	r3, [pc, #204]	; (60001d84 <tempmon_init+0x11c>)
60001cb6:	vcvt.f32.s32	s14, s14
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001cba:	str	r1, [r4, #0]
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001cbc:	vcvt.f32.s32	s13, s13
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001cc0:	ldr	r1, [pc, #196]	; (60001d88 <tempmon_init+0x120>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001cc2:	vsub.f32	s12, s15, s12
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001cc6:	vsub.f32	s10, s15, s10
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001cca:	vsub.f32	s13, s13, s14
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001cce:	vsub.f32	s15, s15, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001cd2:	vmul.f32	s12, s12, s13
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001cd6:	vstr	s13, [r3]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001cda:	vmul.f32	s10, s10, s13
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001cde:	ldr.w	r3, [r2, #128]	; 0x80
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001ce2:	vmul.f32	s9, s15, s13
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001ce6:	vstr	s15, [r0]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001cea:	vdiv.f32	s11, s12, s15
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001cee:	ldr	r0, [pc, #156]	; (60001d8c <tempmon_init+0x124>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001cf0:	vdiv.f32	s12, s10, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001cf4:	vdiv.f32	s13, s9, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001cf8:	vadd.f32	s11, s11, s14
60001cfc:	vcvt.u32.f32	s11, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d00:	vadd.f32	s12, s12, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001d04:	vmov	r4, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d08:	vcvt.u32.f32	s12, s12
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001d0c:	orr.w	r3, r3, r4, lsl #20
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d10:	vadd.f32	s15, s13, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001d14:	str.w	r3, [r2, #128]	; 0x80
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001d18:	vmov	r3, s12
60001d1c:	ldr.w	r4, [r2, #400]	; 0x190
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d20:	vcvt.u32.f32	s15, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001d24:	and.w	r1, r1, r3, lsl #16
60001d28:	orrs	r1, r4
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d2a:	vmov	r3, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001d2e:	str.w	r1, [r2, #400]	; 0x190
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001d32:	ubfx	r3, r3, #0, #12
60001d36:	ldr.w	r1, [r2, #400]	; 0x190
60001d3a:	orrs	r3, r1
60001d3c:	ldr	r1, [pc, #80]	; (60001d90 <tempmon_init+0x128>)
60001d3e:	str.w	r3, [r2, #400]	; 0x190
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
60001d42:	ldr.w	r3, [r2, #128]	; 0x80
60001d46:	orr.w	r3, r3, #2
60001d4a:	str.w	r3, [r2, #128]	; 0x80
60001d4e:	ldr	r3, [pc, #68]	; (60001d94 <tempmon_init+0x12c>)
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001d50:	strb.w	ip, [r0, #64]	; 0x40
60001d54:	str.w	r3, [r1, #320]	; 0x140
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001d58:	mov.w	r3, #3758153728	; 0xe000e000
60001d5c:	movs	r2, #1
}
60001d5e:	pop	{r4, r5}
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001d60:	str.w	r2, [r3, #264]	; 0x108
}
60001d64:	bx	lr
60001d66:	nop
60001d68:	.word	0x400d8100
60001d6c:	.word	0x401f4400
60001d70:	.word	0x42aa0000
60001d74:	.word	0x42b40000
60001d78:	.word	0x200080d0
60001d7c:	.word	0x200080cc
60001d80:	.word	0x200080d4
60001d84:	.word	0x200080d8
60001d88:	.word	0x0fff0000
60001d8c:	.word	0xe000e400
60001d90:	.word	0x20001c00
60001d94:	.word	0x0000bb75

60001d98 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)>:
	unsigned int i;
	unsigned int maxnum = MAX_AUDIO_MEMORY / AUDIO_BLOCK_SAMPLES / 2;

	//Serial.println("AudioStream initialize_memory");
	//delay(10);
	if (num > maxnum) num = maxnum;
60001d98:	cmp.w	r1, #896	; 0x380
{
60001d9c:	push	{r3, r4, r5, r6, r7, lr}
60001d9e:	mov	r6, r1
60001da0:	mov	r7, r1
60001da2:	it	cs
60001da4:	movcs.w	r6, #896	; 0x380
60001da8:	mov	r5, r0
	__disable_irq();
60001daa:	cpsid	i
	memory_pool = data;
60001dac:	ldr	r3, [pc, #140]	; (60001e3c <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xa4>)
	memory_pool_first_mask = 0;
60001dae:	movs	r4, #0
	for (i=0; i < NUM_MASKS; i++) {
		memory_pool_available_mask[i] = 0;
60001db0:	movs	r2, #112	; 0x70
	memory_pool = data;
60001db2:	str	r0, [r3, #0]
		memory_pool_available_mask[i] = 0;
60001db4:	mov	r1, r4
	memory_pool_first_mask = 0;
60001db6:	ldr	r3, [pc, #136]	; (60001e40 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xa8>)
		memory_pool_available_mask[i] = 0;
60001db8:	ldr	r0, [pc, #136]	; (60001e44 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xac>)
	memory_pool_first_mask = 0;
60001dba:	strh	r4, [r3, #0]
		memory_pool_available_mask[i] = 0;
60001dbc:	bl	60001ed0 <__memset_veneer>
	}
	for (i=0; i < num; i++) {
60001dc0:	cbz	r7, 60001df6 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x5e>
60001dc2:	mov	r1, r4
60001dc4:	ldr	r0, [pc, #124]	; (60001e44 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xac>)
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
60001dc6:	mov.w	ip, #1
60001dca:	lsrs	r2, r1, #5
60001dcc:	and.w	r3, r1, #31
	for (i=0; i < num; i++) {
60001dd0:	adds	r1, #1
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
60001dd2:	ldr.w	r4, [r0, r2, lsl #2]
60001dd6:	lsl.w	r3, ip, r3
	for (i=0; i < num; i++) {
60001dda:	cmp	r6, r1
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
60001ddc:	orr.w	r3, r3, r4
60001de0:	str.w	r3, [r0, r2, lsl #2]
	for (i=0; i < num; i++) {
60001de4:	bhi.n	60001dca <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x32>
60001de6:	mov	r0, r5
60001de8:	movs	r3, #0
	}
	for (i=0; i < num; i++) {
		data[i].memory_pool_index = i;
60001dea:	strh	r3, [r0, #2]
	for (i=0; i < num; i++) {
60001dec:	adds	r3, #1
60001dee:	add.w	r0, r0, #260	; 0x104
60001df2:	cmp	r6, r3
60001df4:	bhi.n	60001dea <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x52>
	}
	if (update_scheduled == false) {
60001df6:	ldr	r4, [pc, #80]	; (60001e48 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xb0>)
60001df8:	ldrb	r5, [r4, #0]
60001dfa:	cbz	r5, 60001e00 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x68>
			float usec = 1e6 * AUDIO_BLOCK_SAMPLES / AUDIO_SAMPLE_RATE_EXACT;
			timer->begin(update_all, usec);
			update_setup();
		}
	}
	__enable_irq();
60001dfc:	cpsie	i
}
60001dfe:	pop	{r3, r4, r5, r6, r7, pc}
		IntervalTimer *timer = new IntervalTimer();
60001e00:	movs	r0, #8
60001e02:	bl	60001ed8 <___Znwj_veneer>
// some of these 4 possible instances may be in use by libraries.
class IntervalTimer {
private:
	static const uint32_t MAX_PERIOD = UINT32_MAX / (24000000 / 1000000);
public:
	constexpr IntervalTimer() {
60001e06:	movs	r2, #128	; 0x80
	// or false if all hardware timers are already in use.
	bool begin(void (*funct)(), float microseconds) {
		if (microseconds <= 0 || microseconds > MAX_PERIOD) return false;
		uint32_t cycles = (float)(24000000 / 1000000) * microseconds - 0.5f;
		if (cycles < 17) return false;
		return beginCycles(funct, cycles);
60001e08:	ldr	r1, [pc, #64]	; (60001e4c <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xb4>)
	constexpr IntervalTimer() {
60001e0a:	strb	r2, [r0, #4]
60001e0c:	str	r5, [r0, #0]
		return beginCycles(funct, cycles);
60001e0e:	ldr	r2, [pc, #64]	; (60001e50 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xb8>)
60001e10:	bl	60001f00 <___ZN13IntervalTimer11beginCyclesEPFvvEm_veneer>
// their constructors.
bool AudioStream::update_scheduled = false;

bool AudioStream::update_setup(void)
{
	if (update_scheduled) return false;
60001e14:	ldrb	r3, [r4, #0]
60001e16:	cmp	r3, #0
60001e18:	bne.n	60001dfc <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x64>
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
60001e1a:	ldr	r3, [pc, #56]	; (60001e54 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xbc>)
60001e1c:	ldr	r2, [pc, #56]	; (60001e58 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xc0>)
60001e1e:	str.w	r2, [r3, #344]	; 0x158
	attachInterruptVector(IRQ_SOFTWARE, software_isr);
	NVIC_SET_PRIORITY(IRQ_SOFTWARE, 208); // 255 = lowest priority
60001e22:	ldr	r1, [pc, #56]	; (60001e5c <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xc4>)
60001e24:	movs	r0, #208	; 0xd0
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
60001e26:	mov.w	r3, #3758153728	; 0xe000e000
60001e2a:	movs	r2, #64	; 0x40
	NVIC_SET_PRIORITY(IRQ_SOFTWARE, 208); // 255 = lowest priority
60001e2c:	strb.w	r0, [r1, #70]	; 0x46
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
60001e30:	str.w	r2, [r3, #264]	; 0x108
	update_scheduled = true;
60001e34:	movs	r3, #1
60001e36:	strb	r3, [r4, #0]
	__enable_irq();
60001e38:	cpsie	i
}
60001e3a:	pop	{r3, r4, r5, r6, r7, pc}
60001e3c:	.word	0x2000640c
60001e40:	.word	0x20008138
60001e44:	.word	0x20006414
60001e48:	.word	0x20008157
60001e4c:	.word	0x0000c509
60001e50:	.word	0x0001101b
60001e54:	.word	0x20001c00
60001e58:	.word	0x0000c515
60001e5c:	.word	0xe000e400

60001e60 <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001e60:	ldr	r3, [pc, #64]	; (60001ea4 <analog_init+0x44>)
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001e62:	movs	r0, #160	; 0xa0
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001e64:	ldr	r2, [pc, #64]	; (60001ea8 <analog_init+0x48>)
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001e66:	ldr	r1, [r3, #108]	; 0x6c
60001e68:	orr.w	r1, r1, #196608	; 0x30000
{
60001e6c:	push	{r4}
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001e6e:	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001e70:	movw	r4, #1591	; 0x637
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
60001e74:	ldr	r1, [r3, #108]	; 0x6c
60001e76:	orr.w	r1, r1, #768	; 0x300
60001e7a:	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001e7c:	str	r4, [r2, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001e7e:	str	r0, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) {
60001e80:	ldr	r3, [r2, #72]	; 0x48
60001e82:	lsls	r3, r3, #24
60001e84:	bmi.n	60001e80 <analog_init+0x20>
		//yield();
	}
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001e86:	ldr	r2, [pc, #36]	; (60001eac <analog_init+0x4c>)
60001e88:	movw	r1, #1591	; 0x637
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001e8c:	movs	r3, #160	; 0xa0
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001e8e:	str	r1, [r2, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001e90:	str	r3, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) {
60001e92:	ldr	r3, [r2, #72]	; 0x48
60001e94:	ands.w	r3, r3, #128	; 0x80
60001e98:	bne.n	60001e92 <analog_init+0x32>
		//yield();
	}
	calibrating = 0;
60001e9a:	ldr	r2, [pc, #20]	; (60001eb0 <analog_init+0x50>)
60001e9c:	strb	r3, [r2, #0]
}
60001e9e:	ldr.w	r4, [sp], #4
60001ea2:	bx	lr
60001ea4:	.word	0x400fc000
60001ea8:	.word	0x400c4000
60001eac:	.word	0x400c8000
60001eb0:	.word	0x2000815f

60001eb4 <_init>:
60001eb4:	push	{r3, r4, r5, r6, r7, lr}
60001eb6:	nop
60001eb8:	pop	{r3, r4, r5, r6, r7}
60001eba:	pop	{r3}
60001ebc:	mov	lr, r3
60001ebe:	bx	lr

60001ec0 <__usb_init_serialnumber_veneer>:
60001ec0:	ldr.w	pc, [pc]	; 60001ec4 <__usb_init_serialnumber_veneer+0x4>
60001ec4:	.word	0x0000c05d

60001ec8 <__delay_veneer>:
60001ec8:	ldr.w	pc, [pc]	; 60001ecc <__delay_veneer+0x4>
60001ecc:	.word	0x0000b7a5

60001ed0 <__memset_veneer>:
60001ed0:	ldr.w	pc, [pc]	; 60001ed4 <__memset_veneer+0x4>
60001ed4:	.word	0x0000e045

60001ed8 <___Znwj_veneer>:
60001ed8:	ldr.w	pc, [pc]	; 60001edc <___Znwj_veneer+0x4>
60001edc:	.word	0x0000d079

60001ee0 <__pwm_init_veneer>:
60001ee0:	ldr.w	pc, [pc]	; 60001ee4 <__pwm_init_veneer+0x4>
60001ee4:	.word	0x0000bd3d

60001ee8 <__main_veneer>:
60001ee8:	ldr.w	pc, [pc]	; 60001eec <__main_veneer+0x4>
60001eec:	.word	0x0000c4f9

60001ef0 <____libc_init_array_veneer>:
60001ef0:	ldr.w	pc, [pc]	; 60001ef4 <____libc_init_array_veneer+0x4>
60001ef4:	.word	0x0000e2bd

60001ef8 <__sm_set_pool_veneer>:
60001ef8:	ldr.w	pc, [pc]	; 60001efc <__sm_set_pool_veneer+0x4>
60001efc:	.word	0x0000baf1

60001f00 <___ZN13IntervalTimer11beginCyclesEPFvvEm_veneer>:
60001f00:	ldr.w	pc, [pc]	; 60001f04 <___ZN13IntervalTimer11beginCyclesEPFvvEm_veneer+0x4>
60001f04:	.word	0x0000d13d

60001f08 <__set_arm_clock_veneer>:
60001f08:	ldr.w	pc, [pc]	; 60001f0c <__set_arm_clock_veneer+0x4>
60001f0c:	.word	0x0000a919

60001f10 <__frame_dummy_init_array_entry>:
60001f10:	E...).......!...
60001f20:	Q...i...........
60001f30:	................
60001f40:	....)...Q...i...
60001f50:	................
60001f60:	............. ..
60001f70:	5 ..M ..e ..} ..
60001f80:	.#...)..)0..

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <register_tm_clones>:
}
      20:	ldr	r0, [pc, #20]	; (38 <_teensy_model_identifier+0x13>)
      22:	ldr	r3, [pc, #24]	; (3c <_teensy_model_identifier+0x17>)
	__disable_irq();
	sof_usage |= (1 << interface);
	uint32_t intr = USB1_USBINTR;
	if (!(intr & USB_USBINTR_SRE)) {
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
		USB1_USBINTR = intr | USB_USBINTR_SRE;
      24:	subs	r3, r3, r0
      26:	lsrs	r1, r3, #31
	}
	__enable_irq();
      28:	add.w	r1, r1, r3, asr #2
}
      2c:	asrs	r1, r1, #1
      2e:	beq.n	36 <_teensy_model_identifier+0x11>
      30:	ldr	r3, [pc, #12]	; (40 <_teensy_model_identifier+0x1b>)
      32:	cbz	r3, 36 <_teensy_model_identifier+0x11>
      34:	bx	r3
      36:	bx	lr
	SNVS_LPSRTCMR = t >> 17;
	// start the SRTC
	SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
	while (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)); // wait
	// start the RTC and sync it to the SRTC
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
      38:	.word	0x20001ec0
      3c:	.word	0x20001ec0
}
      40:	.word	0x00000000

00000044 <frame_dummy>:
      44:	push	{r3, lr}
      46:	ldr	r3, [pc, #20]	; (5c <frame_dummy+0x18>)
  }
  m_vwd = dir;
  return true;

fail:
  return false;
      48:	cbz	r3, 52 <frame_dummy+0xe>
}
      4a:	ldr	r1, [pc, #20]	; (60 <frame_dummy+0x1c>)
      4c:	ldr	r0, [pc, #20]	; (64 <frame_dummy+0x20>)
      4e:	nop.w
		}
		NVIC_SET_PRIORITY(IRQ_PIT, top_priority);
		channel = 0;
	}
#endif
}
      52:	ldmia.w	sp!, {r3, lr}
      56:	b.w	20 <register_tm_clones>
	if (pin < NUM_DIGITAL_PINS) {
		cdPin_ = pin;
		pinMode(cdPin_, INPUT_PULLUP);
	} else {
		cdPin_ = 0xff;
		return false;
      5a:	nop
  m_vwd = dir;
  return true;

fail:
  return false;
}
      5c:	.word	0x00000000
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::open(uint32_t index, oflag_t oflag) {
  ExFatVolume* vol = ExFatVolume::cwv();
  return vol ? open(vol->vwd(), index, oflag) : false;
      60:	.word	0x20007c44
  m_attributes = FILE_ATTR_CLOSED;
      64:	.word	0x60018800

00000068 <Print::availableForWrite()>:
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
	virtual size_t write(const uint8_t *buffer, size_t size);
	virtual int availableForWrite(void)		{ return 0; }
      68:	movs	r0, #0
      6a:	bx	lr

0000006c <Print::flush()>:
	virtual void flush()				{ }
      6c:	bx	lr
  return rtn;
      6e:	nop

00000070 <SDFile::isOpen()>:
    return m_fFile   ? m_fFile->isHidden()
           : m_xFile ? m_xFile->isHidden()
                     : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() const { return m_fFile || m_xFile; }
      70:	ldr	r3, [r0, #80]	; 0x50
      72:	cbz	r3, 78 <SDFile::isOpen()+0x8>
      74:	movs	r0, #1
			sdfatfile.close();
		}
	}
	virtual bool isOpen() {
		return sdfatfile.isOpen();
	}
      76:	bx	lr
      78:	ldr	r0, [r0, #84]	; 0x54
      7a:	subs	r0, #0
      7c:	it	ne
      7e:	movne	r0, #1
      80:	bx	lr
  if (sep) {
    *--str = sep;
  }
  str = fmtBase10(str, n);
  if (n < 10) {
    *--str = '0';
      82:	nop

00000084 <I2S_32::isr32()>:
      84:	ldr	r2, [pc, #120]	; (100 <I2S_32::isr32()+0x7c>)
    char sign;
    if (tz & 0X40) {
      sign = '-';
      tz = -tz;
    } else {
      sign = '+';
      86:	ldr	r3, [pc, #124]	; (104 <I2S_32::isr32()+0x80>)
      88:	ldr	r1, [pc, #124]	; (108 <I2S_32::isr32()+0x84>)
}
      8a:	push	{r4, lr}
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
			break;
      8c:	ldr	r4, [r2, #0]
      8e:	ldrb	r0, [r2, #4]
      90:	ldr	r2, [r4, #16]
      92:	strb	r0, [r1, #31]
  if (from.m_fFile) {
    m_fFile = new (m_fileMem) FatFile;
    *m_fFile = *from.m_fFile;
  } else if (from.m_xFile) {
    m_xFile = new (m_fileMem) ExFatFile;
    *m_xFile = *from.m_xFile;
      94:	cmp	r2, r3
  }
  return *this;
}
      96:	bcs.n	ae <I2S_32::isr32()+0x2a>
      98:	ldr	r2, [pc, #112]	; (10c <I2S_32::isr32()+0x88>)
	dma.enable();

	I2S1_RCSR = I2S_RCSR_RE | I2S_RCSR_BCE | I2S_RCSR_FRDE | I2S_RCSR_FR;
	dma.attachInterrupt(isr);	
#endif	
}
      9a:	ldrb	r2, [r2, #0]
      9c:	cbz	r2, f8 <I2S_32::isr32()+0x74>
      9e:	mov.w	r2, #3758153728	; 0xe000e000
      a2:	movs	r1, #64	; 0x40
      a4:	add.w	lr, r3, #512	; 0x200
      a8:	str.w	r1, [r2, #520]	; 0x208
      ac:	b.n	b4 <I2S_32::isr32()+0x30>
      ae:	mov	lr, r3
      b0:	sub.w	r3, r3, #512	; 0x200
      b4:	ldr	r1, [pc, #88]	; (110 <I2S_32::isr32()+0x8c>)
      b6:	ldr	r2, [pc, #92]	; (114 <I2S_32::isr32()+0x90>)
      b8:	ldr	r0, [r1, #0]
      ba:	ldr	r2, [r2, #0]
      bc:	cbz	r0, f6 <I2S_32::isr32()+0x72>
      be:	cbz	r2, f6 <I2S_32::isr32()+0x72>
      c0:	ldr	r4, [pc, #84]	; (118 <I2S_32::isr32()+0x94>)
      c2:	ldrh	r1, [r4, #0]
      c4:	cmp	r1, #64	; 0x40
      c6:	bhi.n	f6 <I2S_32::isr32()+0x72>
      c8:	add.w	ip, r1, #2
  // Maintain count of free clusters.
  updateFreeClusterCount(-count);

  // return first cluster number to caller
  *firstCluster = bgnCluster;
  return true;
      cc:	adds	r1, #64	; 0x40
	I2S1_RCSR = 0;
	I2S1_RCSR = I2S_RCSR_RE | I2S_RCSR_BCE | I2S_RCSR_FRDE | I2S_RCSR_FR;
	update_responsibility = update_setup();
	dma.attachInterrupt(isr);
#endif
}
      ce:	add.w	r0, r0, ip, lsl #1
      d2:	strh	r1, [r4, #0]

	I2S2_RCSR |= I2S_RCSR_RE | I2S_RCSR_BCE | I2S_RCSR_FRDE | I2S_RCSR_FR;
	I2S2_TCSR |= I2S_TCSR_TE | I2S_TCSR_BCE;
	dma.attachInterrupt(isr);	

}
      d4:	add.w	ip, r2, ip, lsl #1
      }
    }
  }
  // don't try to delete root
  if (!isRoot()) {
    if (!rmdir()) {
      d8:	ldr	r2, [pc, #64]	; (11c <I2S_32::isr32()+0x98>)
      da:	ldr	r4, [r2, #0]
  return writeStop();

fail:
  spiStop();
  return false;
}
      dc:	ldr.w	r1, [r3], #8
  seconds+= (tm.Day-1) * SECS_PER_DAY;
  seconds+= tm.Hour * SECS_PER_HOUR;
  seconds+= tm.Minute * SECS_PER_MIN;
  seconds+= tm.Second;
  return (time_t)seconds; 
}
      e0:	ldr.w	r2, [r3, #-4]
      e4:	asrs	r1, r4
      e6:	cmp	lr, r3
      e8:	asr.w	r2, r2, r4
      ec:	strh.w	r1, [r0], #2
  seconds += (tm.mday-1) * SECS_PER_DAY;
  seconds += tm.hour * SECS_PER_HOUR;
  seconds += tm.min * SECS_PER_MIN;
  seconds += tm.sec;
  return /*(time_t)*/ seconds;
}
      f0:	strh.w	r2, [ip], #2
    // Select MCLK
    IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
      & ~(IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL_MASK))
      | (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));

  }
      f4:	bhi.n	dc <I2S_32::isr32()+0x58>
      f6:	pop	{r4, pc}
      f8:	add.w	lr, r3, #512	; 0x200
      fc:	b.n	b4 <I2S_32::isr32()+0x30>
      fe:	nop
     100:	.word	0x200065bc
  
  if (daddr < (uint32_t)i2s_rx_buffer_32 + sizeof(i2s_rx_buffer_32) / 2) {
    // DMA is receiving to the first half of the buffer
    // need to remove data from the second half
    src = (int32_t *)&i2s_rx_buffer_32[AUDIO_BLOCK_SAMPLES];
    end = (int32_t *)&i2s_rx_buffer_32[AUDIO_BLOCK_SAMPLES*2];
     104:	.word	0x20005e8c
     108:	.word	0x400e8000
     10c:	.word	0x2000815c
     110:	.word	0x200065b4
     114:	.word	0x200065b8
     118:	.word	0x2000813e
     11c:	.word	0x20001480

00000120 <I2S_32::update()>:
    }
  }
}

void I2S_32::update(void)
{
     120:	push	{r3, r4, r5, r6, r7, lr}
     122:	mov	r6, r0
  audio_block_t *new_left=NULL, *new_right=NULL, *out_left=NULL, *out_right=NULL;

  // allocate 2 new blocks, but if one fails, allocate neither
  new_left = allocate();
     124:	bl	c578 <AudioStream::allocate()>
  if (new_left != NULL) {
     128:	cbz	r0, 15c <I2S_32::update()+0x3c>
    new_right = allocate();
     12a:	mov	r4, r0
     12c:	bl	c578 <AudioStream::allocate()>
    if (new_right == NULL) {
     130:	mov	r5, r0
     132:	cbz	r0, 156 <I2S_32::update()+0x36>
      release(new_left);
      new_left = NULL;
    }
  }
  __disable_irq();
     134:	cpsid	i
  if (block_offset >= AUDIO_BLOCK_SAMPLES) {
     136:	ldr	r3, [pc, #120]	; (1b0 <I2S_32::update()+0x90>)
     138:	ldrh	r2, [r3, #0]
     13a:	cmp	r2, #127	; 0x7f
     13c:	bhi.n	16e <I2S_32::update()+0x4e>
    release(out_left);
    transmit(out_right, 1);
    release(out_right);
  } else if (new_left != NULL) {
    // the DMA didn't fill blocks, but we allocated blocks
    if (block_left == NULL) {
     13e:	ldr	r1, [pc, #116]	; (1b4 <I2S_32::update()+0x94>)
     140:	ldr	r2, [r1, #0]
     142:	cbz	r2, 1a2 <I2S_32::update()+0x82>
      block_right = new_right;
      block_offset = 0;
      __enable_irq();
    } else {
      // the DMA already has blocks, doesn't need these
      __enable_irq();
     144:	cpsie	i
      release(new_left);
     146:	mov	r0, r4
     148:	bl	c624 <AudioStream::release(audio_block_struct*)>
      release(new_right);
     14c:	mov	r0, r5
    // The DMA didn't fill blocks, and we could not allocate
    // memory... the system is likely starving for memory!
    // Sadly, there's nothing we can do.
    __enable_irq();
  }
}
     14e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      release(new_right);
     152:	b.w	c624 <AudioStream::release(audio_block_struct*)>
      release(new_left);
     156:	mov	r0, r4
     158:	bl	c624 <AudioStream::release(audio_block_struct*)>
  __disable_irq();
     15c:	cpsid	i
  if (block_offset >= AUDIO_BLOCK_SAMPLES) {
     15e:	ldr	r3, [pc, #80]	; (1b0 <I2S_32::update()+0x90>)
     160:	ldrh	r2, [r3, #0]
     162:	cmp	r2, #127	; 0x7f
     164:	bhi.n	16a <I2S_32::update()+0x4a>
    __enable_irq();
     166:	cpsie	i
}
     168:	pop	{r3, r4, r5, r6, r7, pc}
  audio_block_t *new_left=NULL, *new_right=NULL, *out_left=NULL, *out_right=NULL;
     16a:	movs	r5, #0
  new_left = allocate();
     16c:	mov	r4, r5
    out_left = block_left;
     16e:	ldr	r0, [pc, #68]	; (1b4 <I2S_32::update()+0x94>)
    block_offset = 0;
     170:	movs	r2, #0
    out_right = block_right;
     172:	ldr	r1, [pc, #68]	; (1b8 <I2S_32::update()+0x98>)
    out_left = block_left;
     174:	ldr	r7, [r0, #0]
    block_offset = 0;
     176:	strh	r2, [r3, #0]
    block_left = new_left;
     178:	str	r4, [r0, #0]
    out_right = block_right;
     17a:	ldr	r4, [r1, #0]
    block_right = new_right;
     17c:	str	r5, [r1, #0]
    __enable_irq();
     17e:	cpsie	i
    transmit(out_left, 0);
     180:	mov	r1, r7
     182:	mov	r0, r6
     184:	bl	c674 <AudioStream::transmit(audio_block_struct*, unsigned char)>
    release(out_left);
     188:	mov	r0, r7
     18a:	bl	c624 <AudioStream::release(audio_block_struct*)>
    transmit(out_right, 1);
     18e:	mov	r0, r6
     190:	mov	r1, r4
     192:	movs	r2, #1
     194:	bl	c674 <AudioStream::transmit(audio_block_struct*, unsigned char)>
    release(out_right);
     198:	mov	r0, r4
}
     19a:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    release(out_right);
     19e:	b.w	c624 <AudioStream::release(audio_block_struct*)>
      block_left = new_left;
     1a2:	str	r4, [r1, #0]
      block_right = new_right;
     1a4:	ldr	r1, [pc, #16]	; (1b8 <I2S_32::update()+0x98>)
      block_offset = 0;
     1a6:	strh	r2, [r3, #0]
      block_right = new_right;
     1a8:	str	r0, [r1, #0]
      __enable_irq();
     1aa:	cpsie	i
}
     1ac:	pop	{r3, r4, r5, r6, r7, pc}
     1ae:	nop
     1b0:	.word	0x2000813e
     1b4:	.word	0x200065b4
     1b8:	.word	0x200065b8

000001bc <SDFile::close()>:
	virtual void close() {
     1bc:	push	{r4, lr}
     1be:	mov	r4, r0
		if (filename) {
     1c0:	ldr	r0, [r0, #88]	; 0x58
     1c2:	cbz	r0, 1cc <SDFile::close()+0x10>
			free(filename);
     1c4:	bl	d220 <free>
			filename = nullptr;
     1c8:	movs	r3, #0
     1ca:	str	r3, [r4, #88]	; 0x58
     1cc:	ldr	r3, [r4, #80]	; 0x50
     1ce:	cbz	r3, 1dc <SDFile::close()+0x20>
			sdfatfile.close();
     1d0:	add.w	r0, r4, #24
	}
     1d4:	ldmia.w	sp!, {r4, lr}
			sdfatfile.close();
     1d8:	b.w	775c <FsBaseFile::close()>
     1dc:	ldr	r3, [r4, #84]	; 0x54
     1de:	cmp	r3, #0
     1e0:	bne.n	1d0 <SDFile::close()+0x14>
	}
     1e2:	pop	{r4, pc}

000001e4 <DMAChannel::~DMAChannel()>:
	}
	DMAChannel & operator = (const DMASetting &rhs) {
		copy_tcd(TCD, rhs.TCD);
		return *this;
	}
	~DMAChannel() {
     1e4:	push	{r4, lr}
     1e6:	mov	r4, r0
		release();
     1e8:	bl	c344 <DMAChannel::release()>
	}
     1ec:	mov	r0, r4
     1ee:	pop	{r4, pc}

000001f0 <SDFile::name()>:
	virtual const char * name() {
     1f0:	push	{r4, lr}
     1f2:	mov	r4, r0
		if (!filename) {
     1f4:	ldr	r0, [r0, #88]	; 0x58
     1f6:	cbz	r0, 1fa <SDFile::name()+0xa>
				static char zeroterm = 0;
				filename = &zeroterm;
			}
		}
		return filename;
	}
     1f8:	pop	{r4, pc}
			filename = (char *)malloc(MAX_FILENAME_LEN);
     1fa:	mov.w	r0, #256	; 0x100
     1fe:	bl	d210 <malloc>
     202:	str	r0, [r4, #88]	; 0x58
			if (filename) {
     204:	cbz	r0, 234 <SDFile::name()+0x44>
    *name = 0;
     206:	movs	r2, #0
    return m_fFile   ? m_fFile->getName(name, len)
     208:	ldr	r3, [r4, #80]	; 0x50
    *name = 0;
     20a:	strb	r2, [r0, #0]
    return m_fFile   ? m_fFile->getName(name, len)
     20c:	cbz	r3, 21e <SDFile::name()+0x2e>
     20e:	mov	r1, r0
     210:	mov.w	r2, #256	; 0x100
     214:	mov	r0, r3
     216:	bl	5a7c <FatFile::getName(char*, unsigned int)>
		return filename;
     21a:	ldr	r0, [r4, #88]	; 0x58
	}
     21c:	pop	{r4, pc}
     21e:	ldr	r3, [r4, #84]	; 0x54
           : m_xFile ? m_xFile->getName(name, len)
     220:	cmp	r3, #0
     222:	beq.n	1f8 <SDFile::name()+0x8>
   */
  size_t getName(char* name, size_t size) {
#if USE_UTF8_LONG_NAMES
    return getName8(name, size);
#else   // USE_UTF8_LONG_NAMES
    return getName7(name, size);
     224:	mov	r1, r0
     226:	mov.w	r2, #256	; 0x100
     22a:	mov	r0, r3
     22c:	bl	39fc <ExFatFile::getName7(char*, unsigned int)>
		return filename;
     230:	ldr	r0, [r4, #88]	; 0x58
	}
     232:	pop	{r4, pc}
				filename = &zeroterm;
     234:	ldr	r3, [pc, #4]	; (23c <SDFile::name()+0x4c>)
     236:	mov	r0, r3
     238:	str	r3, [r4, #88]	; 0x58
	}
     23a:	pop	{r4, pc}
     23c:	.word	0x2000815e

00000240 <SDFile::truncate(unsigned long long)>:
	virtual bool truncate(uint64_t size=0) {
     240:	push	{r3, r4, r5, lr}
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint64_t length) {
    return m_fFile   ? length < (1ULL << 32) && m_fFile->truncate(length)
     242:	ldr	r5, [r0, #80]	; 0x50
     244:	cbz	r5, 262 <SDFile::truncate(unsigned long long)+0x22>
     246:	cbz	r3, 24c <SDFile::truncate(unsigned long long)+0xc>
	}
     248:	movs	r0, #0
     24a:	pop	{r3, r4, r5, pc}
   *
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint32_t length) { return seekSet(length) && truncate(); }
     24c:	mov	r1, r2
     24e:	mov	r0, r5
     250:	bl	6534 <FatFile::seekSet(unsigned long)>
     254:	cmp	r0, #0
     256:	beq.n	248 <SDFile::truncate(unsigned long long)+0x8>
     258:	mov	r0, r5
     25a:	ldmia.w	sp!, {r3, r4, r5, lr}
     25e:	b.w	6880 <FatFile::truncate()>
     262:	ldr	r4, [r0, #84]	; 0x54
           : m_xFile ? m_xFile->truncate(length)
     264:	cmp	r4, #0
     266:	beq.n	248 <SDFile::truncate(unsigned long long)+0x8>
   *
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint64_t length) { return seekSet(length) && truncate(); }
     268:	mov	r0, r4
     26a:	bl	3e10 <ExFatFile::seekSet(unsigned long long)>
     26e:	cmp	r0, #0
     270:	beq.n	248 <SDFile::truncate(unsigned long long)+0x8>
     272:	mov	r0, r4
     274:	ldmia.w	sp!, {r3, r4, r5, lr}
     278:	b.w	5058 <ExFatFile::truncate()>

0000027c <SDFile::setModifyTime(DateTimeFields const&)>:
		if (tm.year < 80 || tm.year > 207) return false;
		return sdfatfile.timestamp(T_CREATE, tm.year + 1900, tm.mon + 1,
			tm.mday, tm.hour, tm.min, tm.sec);
	}
	virtual bool setModifyTime(const DateTimeFields &tm) {
		if (tm.year < 80 || tm.year > 207) return false;
     27c:	ldrb	r2, [r1, #6]
     27e:	sub.w	r3, r2, #80	; 0x50
     282:	lsls	r3, r3, #24
     284:	bmi.n	2cc <SDFile::setModifyTime(DateTimeFields const&)+0x50>
		return sdfatfile.timestamp(T_WRITE, tm.year + 1900, tm.mon + 1,
     286:	addw	r2, r2, #1900	; 0x76c
	virtual bool setModifyTime(const DateTimeFields &tm) {
     28a:	push	{r4, r5, r6, r7, lr}
		return sdfatfile.timestamp(T_WRITE, tm.year + 1900, tm.mon + 1,
     28c:	ldrb	r3, [r1, #5]
	virtual bool setModifyTime(const DateTimeFields &tm) {
     28e:	sub	sp, #20
    return m_fFile   ? m_fFile->timestamp(flags, year, month, day, hour, minute,
     290:	ldr	r4, [r0, #80]	; 0x50
		return sdfatfile.timestamp(T_WRITE, tm.year + 1900, tm.mon + 1,
     292:	adds	r3, #1
			tm.mday, tm.hour, tm.min, tm.sec);
     294:	ldrb	r5, [r1, #4]
     296:	ldrb	r6, [r1, #2]
     298:	ldrb	r7, [r1, #1]
		return sdfatfile.timestamp(T_WRITE, tm.year + 1900, tm.mon + 1,
     29a:	uxtb	r3, r3
			tm.mday, tm.hour, tm.min, tm.sec);
     29c:	ldrb	r1, [r1, #0]
     29e:	cbz	r4, 2b4 <SDFile::setModifyTime(DateTimeFields const&)+0x38>
     2a0:	mov	r0, r4
     2a2:	str	r6, [sp, #4]
     2a4:	str	r5, [sp, #0]
     2a6:	strd	r7, r1, [sp, #8]
     2aa:	movs	r1, #4
     2ac:	bl	67a8 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
	}
     2b0:	add	sp, #20
     2b2:	pop	{r4, r5, r6, r7, pc}
     2b4:	ldr	r0, [r0, #84]	; 0x54
           : m_xFile ? m_xFile->timestamp(flags, year, month, day, hour, minute,
     2b6:	cmp	r0, #0
     2b8:	beq.n	2b0 <SDFile::setModifyTime(DateTimeFields const&)+0x34>
     2ba:	str	r6, [sp, #4]
     2bc:	str	r5, [sp, #0]
     2be:	strd	r7, r1, [sp, #8]
     2c2:	movs	r1, #4
     2c4:	bl	4ee0 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
     2c8:	add	sp, #20
     2ca:	pop	{r4, r5, r6, r7, pc}
		if (tm.year < 80 || tm.year > 207) return false;
     2cc:	movs	r0, #0
	}
     2ce:	bx	lr

000002d0 <SDFile::rewindDirectory()>:
	virtual void rewindDirectory(void) {
     2d0:	push	{r4, lr}
     2d2:	mov	r4, r0
    return m_fFile ? m_fFile->isDir() : m_xFile ? m_xFile->isDir() : false;
     2d4:	ldr	r0, [r0, #80]	; 0x50
     2d6:	cbz	r0, 2fa <SDFile::rewindDirectory()+0x2a>
   * If an error occurs or end of file is reached return -1.
   */
  int read() { return BaseFile::read(); }
  /** Rewind a file if it is a directory */
  void rewindDirectory() {
    if (BaseFile::isDir()) {
     2d8:	ldrb	r3, [r0, #0]
     2da:	tst.w	r3, #208	; 0xd0
     2de:	bne.n	2e2 <SDFile::rewindDirectory()+0x12>
	}
     2e0:	pop	{r4, pc}
  void rewind() { seekSet(0); }
     2e2:	movs	r1, #0
     2e4:	bl	6534 <FatFile::seekSet(unsigned long)>
    if (m_xFile) m_xFile->rewind();
     2e8:	ldr	r0, [r4, #84]	; 0x54
     2ea:	cmp	r0, #0
     2ec:	beq.n	2e0 <SDFile::rewindDirectory()+0x10>
  void rewind() { seekSet(0); }
     2ee:	movs	r2, #0
     2f0:	movs	r3, #0
     2f2:	ldmia.w	sp!, {r4, lr}
     2f6:	b.w	3e10 <ExFatFile::seekSet(unsigned long long)>
     2fa:	ldr	r0, [r4, #84]	; 0x54
    return m_fFile ? m_fFile->isDir() : m_xFile ? m_xFile->isDir() : false;
     2fc:	cmp	r0, #0
     2fe:	beq.n	2e0 <SDFile::rewindDirectory()+0x10>
     300:	ldrb.w	r3, [r0, #49]	; 0x31
     304:	tst.w	r3, #80	; 0x50
     308:	beq.n	2e0 <SDFile::rewindDirectory()+0x10>
     30a:	movs	r2, #0
     30c:	movs	r3, #0
     30e:	ldmia.w	sp!, {r4, lr}
     312:	b.w	3e10 <ExFatFile::seekSet(unsigned long long)>
				awidth--;
			}
		}
		if (copysignf(1.0f, val)<0) *buf++ = '-';
		if (DTOA_UPPER) {
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
     316:	nop

00000318 <SDFile::getModifyTime(DateTimeFields&)>:
    return m_fFile   ? m_fFile->getModifyDateTime(pdate, ptime)
     318:	ldr	r3, [r0, #80]	; 0x50
	virtual bool getModifyTime(DateTimeFields &tm) {
     31a:	push	{r4, lr}
     31c:	mov	r4, r1
     31e:	sub	sp, #8
     320:	cbz	r3, 36e <SDFile::getModifyTime(DateTimeFields&)+0x56>
     322:	add.w	r2, sp, #6
     326:	add	r1, sp, #4
     328:	mov	r0, r3
     32a:	bl	5c9c <FatFile::getModifyDateTime(unsigned short*, unsigned short*)>
		if (!sdfatfile.getModifyDateTime(&fat_date, &fat_time)) return false;
     32e:	cbz	r0, 380 <SDFile::getModifyTime(DateTimeFields&)+0x68>
		if ((fat_date == 0) && (fat_time == 0)) return false;
     330:	ldrh.w	r3, [sp, #4]
     334:	ldrh.w	r2, [sp, #6]
     338:	orrs.w	r1, r3, r2
     33c:	beq.n	380 <SDFile::getModifyTime(DateTimeFields&)+0x68>
 * \param[in] fatTime Time in packed dir format.
 *
 * \return Extracted minute [0,59]
 */
static inline uint8_t FS_MINUTE(uint16_t fatTime) {
  return (fatTime >> 5) & 0X3F;
     33e:	ubfx	ip, r2, #5, #6
 * \param[in] fatTime Time in packed dir format.
 *
 * \return Extracted second [0,58]
 */
static inline uint8_t FS_SECOND(uint16_t fatTime) {
  return 2 * (fatTime & 0X1F);
     342:	and.w	r0, r2, #31
static inline uint8_t FS_HOUR(uint16_t fatTime) { return fatTime >> 11; }
     346:	lsrs	r2, r2, #11
  return (fatDate >> 5) & 0XF;
     348:	ubfx	r1, r3, #5, #4
  return 2 * (fatTime & 0X1F);
     34c:	lsls	r0, r0, #1
		tm.min = FS_MINUTE(fat_time);
     34e:	strb.w	ip, [r4, #1]
static inline uint8_t FS_HOUR(uint16_t fatTime) { return fatTime >> 11; }
     352:	strb	r2, [r4, #2]
  return 1980 + (fatDate >> 9);
     354:	lsrs	r2, r3, #9
		tm.mon = FS_MONTH(fat_date) - 1;
     356:	subs	r1, #1
static inline uint8_t FS_DAY(uint16_t fatDate) { return fatDate & 0X1F; }
     358:	and.w	r3, r3, #31
		tm.year = FS_YEAR(fat_date) - 1900;
     35c:	add.w	r2, r2, #1872	; 0x750
		tm.sec = FS_SECOND(fat_time);
     360:	strb	r0, [r4, #0]
		return true;
     362:	movs	r0, #1
		tm.mon = FS_MONTH(fat_date) - 1;
     364:	strb	r1, [r4, #5]
		tm.mday = FS_DAY(fat_date);
     366:	strb	r3, [r4, #4]
		tm.year = FS_YEAR(fat_date) - 1900;
     368:	strb	r2, [r4, #6]
	}
     36a:	add	sp, #8
     36c:	pop	{r4, pc}
     36e:	ldr	r0, [r0, #84]	; 0x54
           : m_xFile ? m_xFile->getModifyDateTime(pdate, ptime)
     370:	cbz	r0, 380 <SDFile::getModifyTime(DateTimeFields&)+0x68>
     372:	add.w	r2, sp, #6
     376:	add	r1, sp, #4
     378:	bl	3b58 <ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)>
     37c:	cmp	r0, #0
     37e:	bne.n	330 <SDFile::getModifyTime(DateTimeFields&)+0x18>
		if (!sdfatfile.getModifyDateTime(&fat_date, &fat_time)) return false;
     380:	movs	r0, #0
	}
     382:	add	sp, #8
     384:	pop	{r4, pc}
		usb_midi_msg_data2 = len >> 8;
		usb_midi_msg_sysex_len = 0;
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
		if (usb_midi_handleSysExPartial) {
			(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, len, 1);
		} else if (usb_midi_handleSysExComplete) {
     386:	nop

00000388 <SDFile::getCreateTime(DateTimeFields&)>:
    return m_fFile   ? m_fFile->getCreateDateTime(pdate, ptime)
     388:	ldr	r3, [r0, #80]	; 0x50
	virtual bool getCreateTime(DateTimeFields &tm) {
     38a:	push	{r4, lr}
     38c:	mov	r4, r1
     38e:	sub	sp, #8
     390:	cbz	r3, 3de <SDFile::getCreateTime(DateTimeFields&)+0x56>
     392:	add.w	r2, sp, #6
     396:	add	r1, sp, #4
     398:	mov	r0, r3
     39a:	bl	5c7c <FatFile::getCreateDateTime(unsigned short*, unsigned short*)>
		if (!sdfatfile.getCreateDateTime(&fat_date, &fat_time)) return false;
     39e:	cbz	r0, 3f0 <SDFile::getCreateTime(DateTimeFields&)+0x68>
		if ((fat_date == 0) && (fat_time == 0)) return false;
     3a0:	ldrh.w	r3, [sp, #4]
     3a4:	ldrh.w	r2, [sp, #6]
     3a8:	orrs.w	r1, r3, r2
     3ac:	beq.n	3f0 <SDFile::getCreateTime(DateTimeFields&)+0x68>
  return (fatTime >> 5) & 0X3F;
     3ae:	ubfx	ip, r2, #5, #6
  return 2 * (fatTime & 0X1F);
     3b2:	and.w	r0, r2, #31
static inline uint8_t FS_HOUR(uint16_t fatTime) { return fatTime >> 11; }
     3b6:	lsrs	r2, r2, #11
  return (fatDate >> 5) & 0XF;
     3b8:	ubfx	r1, r3, #5, #4
  return 2 * (fatTime & 0X1F);
     3bc:	lsls	r0, r0, #1
		tm.min = FS_MINUTE(fat_time);
     3be:	strb.w	ip, [r4, #1]
static inline uint8_t FS_HOUR(uint16_t fatTime) { return fatTime >> 11; }
     3c2:	strb	r2, [r4, #2]
  return 1980 + (fatDate >> 9);
     3c4:	lsrs	r2, r3, #9
		tm.mon = FS_MONTH(fat_date) - 1;
     3c6:	subs	r1, #1
static inline uint8_t FS_DAY(uint16_t fatDate) { return fatDate & 0X1F; }
     3c8:	and.w	r3, r3, #31
		tm.year = FS_YEAR(fat_date) - 1900;
     3cc:	add.w	r2, r2, #1872	; 0x750
		tm.sec = FS_SECOND(fat_time);
     3d0:	strb	r0, [r4, #0]
		return true;
     3d2:	movs	r0, #1
		tm.mon = FS_MONTH(fat_date) - 1;
     3d4:	strb	r1, [r4, #5]
		tm.mday = FS_DAY(fat_date);
     3d6:	strb	r3, [r4, #4]
		tm.year = FS_YEAR(fat_date) - 1900;
     3d8:	strb	r2, [r4, #6]
	}
     3da:	add	sp, #8
     3dc:	pop	{r4, pc}
     3de:	ldr	r0, [r0, #84]	; 0x54
           : m_xFile ? m_xFile->getCreateDateTime(pdate, ptime)
     3e0:	cbz	r0, 3f0 <SDFile::getCreateTime(DateTimeFields&)+0x68>
     3e2:	add.w	r2, sp, #6
     3e6:	add	r1, sp, #4
     3e8:	bl	3b34 <ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)>
     3ec:	cmp	r0, #0
     3ee:	bne.n	3a0 <SDFile::getCreateTime(DateTimeFields&)+0x18>
		if (!sdfatfile.getCreateDateTime(&fat_date, &fat_time)) return false;
     3f0:	movs	r0, #0
	}
     3f2:	add	sp, #8
     3f4:	pop	{r4, pc}
			#endif //defined(AUDIO_PT8211_INTERPOLATION_LINEAR)
		#else
			memcpy_tointerleaveL(dest, blockL->data + offsetL);
			offsetL += (AUDIO_BLOCK_SAMPLES / 2);
		#endif //defined(AUDIO_PT8211_OVERSAMPLING)
	} else if (blockR) {
     3f6:	nop

000003f8 <File::available()>:
	size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
	}
	// Returns the number of bytes which may be read from a file
	int available() {
		return (f) ? f->available() : 0;
     3f8:	ldr	r0, [r0, #16]
     3fa:	cbz	r0, 422 <File::available()+0x2a>
     3fc:	ldr	r3, [r0, #0]
     3fe:	ldr	r2, [pc, #84]	; (454 <File::available()+0x5c>)
     400:	ldr	r3, [r3, #16]
     402:	cmp	r3, r2
     404:	bne.n	452 <File::available()+0x5a>
    return m_fFile ? m_fFile->available() : m_xFile ? m_xFile->available() : 0;
     406:	ldr	r3, [r0, #80]	; 0x50
     408:	cbz	r3, 424 <File::available()+0x2c>
    return isFile() ? fileSize() - curPosition() : 0;
     40a:	ldrb	r0, [r3, #0]
     40c:	ands.w	r0, r0, #8
     410:	beq.n	422 <File::available()+0x2a>
     412:	ldr	r0, [r3, #28]
     414:	ldr	r3, [r3, #20]
    return n > INT_MAX ? INT_MAX : n;
     416:	subs	r0, r0, r3
     418:	it	mi
     41a:	mvnmi.w	r0, #2147483648	; 0x80000000
     41e:	bx	lr
     420:	mov	r0, r3
	}
     422:	bx	lr
     424:	ldr	r3, [r0, #84]	; 0x54
     426:	cmp	r3, #0
     428:	beq.n	420 <File::available()+0x28>
  uint64_t available64() { return isFile() ? fileSize() - curPosition() : 0; }
     42a:	ldrb.w	r0, [r3, #49]	; 0x31
     42e:	ands.w	r0, r0, #8
     432:	beq.n	422 <File::available()+0x2a>
     434:	ldr	r0, [r3, #16]
     436:	ldr	r1, [r3, #0]
     438:	ldr	r2, [r3, #20]
     43a:	subs	r0, r0, r1
     43c:	ldr	r3, [r3, #4]
     43e:	sbc.w	r3, r2, r3
    return n > INT_MAX ? INT_MAX : n;
     442:	cmp.w	r0, #2147483648	; 0x80000000
     446:	sbcs.w	r3, r3, #0
     44a:	bcc.n	422 <File::available()+0x2a>
     44c:	mvn.w	r0, #2147483648	; 0x80000000
     450:	bx	lr
		return (f) ? f->available() : 0;
     452:	bx	r3
     454:	.word	0x000007c1

00000458 <File::peek()>:
	int peek() {
		return (f) ? f->peek() : -1;
     458:	ldr	r3, [r0, #16]
     45a:	cbz	r3, 47a <File::peek()+0x22>
     45c:	ldr	r2, [r3, #0]
     45e:	ldr	r1, [pc, #32]	; (480 <File::peek()+0x28>)
     460:	ldr	r2, [r2, #20]
     462:	cmp	r2, r1
     464:	bne.n	476 <File::peek()+0x1e>
    return m_fFile ? m_fFile->peek() : m_xFile ? m_xFile->peek() : -1;
     466:	ldr	r0, [r3, #80]	; 0x50
     468:	cbz	r0, 46e <File::peek()+0x16>
     46a:	b.w	624c <FatFile::peek()>
     46e:	ldr	r0, [r3, #84]	; 0x54
     470:	cbz	r0, 47a <File::peek()+0x22>
     472:	b.w	3de4 <ExFatFile::peek()>
     476:	mov	r0, r3
     478:	bx	r2
	}
     47a:	mov.w	r0, #4294967295
     47e:	bx	lr
     480:	.word	0x00000659

00000484 <File::flush()>:
	void flush() {
		if (f) f->flush();
     484:	ldr	r3, [r0, #16]
     486:	cbz	r3, 4a2 <File::flush()+0x1e>
     488:	ldr	r2, [r3, #0]
     48a:	ldr	r1, [pc, #28]	; (4a8 <File::flush()+0x24>)
     48c:	ldr	r2, [r2, #24]
     48e:	cmp	r2, r1
     490:	bne.n	4a4 <File::flush()+0x20>
    return m_fFile ? m_fFile->sync() : m_xFile ? m_xFile->sync() : false;
     492:	ldr	r0, [r3, #80]	; 0x50
     494:	cbz	r0, 49a <File::flush()+0x16>
     496:	b.w	679c <FatFile::sync()>
     49a:	ldr	r0, [r3, #84]	; 0x54
     49c:	cbz	r0, 4a2 <File::flush()+0x1e>
     49e:	b.w	4bf8 <ExFatFile::sync()>
	}
     4a2:	bx	lr
		if (f) f->flush();
     4a4:	mov	r0, r3
     4a6:	bx	r2
     4a8:	.word	0x000006fd

000004ac <File::read()>:
	}
	bool seek(uint64_t pos) {
		return seek(pos, SeekSet);
	}
	int read() {
		if (!f) return -1;
     4ac:	ldr	r3, [r0, #16]
     4ae:	cbz	r3, 4fa <File::read()+0x4e>
		unsigned char b;
		if (f->read(&b, 1) < 1) return -1;
     4b0:	ldr	r1, [r3, #0]
     4b2:	ldr	r2, [pc, #76]	; (500 <File::read()+0x54>)
	int read() {
     4b4:	push	{r4, lr}
		if (f->read(&b, 1) < 1) return -1;
     4b6:	ldr	r4, [r1, #8]
	int read() {
     4b8:	sub	sp, #8
     4ba:	cmp	r4, r2
     4bc:	bne.n	4e8 <File::read()+0x3c>
    return m_fFile   ? m_fFile->read(buf, count)
     4be:	ldr	r0, [r3, #80]	; 0x50
     4c0:	cbz	r0, 4d6 <File::read()+0x2a>
     4c2:	movs	r2, #1
     4c4:	add.w	r1, sp, #7
     4c8:	bl	60a4 <FatFile::read(void*, unsigned int)>
		if (f->read(&b, 1) < 1) return -1;
     4cc:	cbz	r0, 4f4 <File::read()+0x48>
		return b;
     4ce:	ldrb.w	r0, [sp, #7]
	}
     4d2:	add	sp, #8
     4d4:	pop	{r4, pc}
     4d6:	ldr	r0, [r3, #84]	; 0x54
           : m_xFile ? m_xFile->read(buf, count)
     4d8:	cmp	r0, #0
     4da:	beq.n	4ce <File::read()+0x22>
     4dc:	movs	r2, #1
     4de:	add.w	r1, sp, #7
     4e2:	bl	3c44 <ExFatFile::read(void*, unsigned int)>
     4e6:	b.n	4cc <File::read()+0x20>
		if (f->read(&b, 1) < 1) return -1;
     4e8:	movs	r2, #1
     4ea:	add.w	r1, sp, #7
     4ee:	mov	r0, r3
     4f0:	blx	r4
     4f2:	b.n	4cc <File::read()+0x20>
		if (!f) return -1;
     4f4:	mov.w	r0, #4294967295
     4f8:	b.n	4d2 <File::read()+0x26>
     4fa:	mov.w	r0, #4294967295
	}
     4fe:	bx	lr
     500:	.word	0x00000699

00000504 <File::write(unsigned char)>:
	size_t write(uint8_t b) {
     504:	push	{lr}
		return (f) ? f->write(&b, 1) : 0;
     506:	ldr	r0, [r0, #16]
	size_t write(uint8_t b) {
     508:	sub	sp, #12
     50a:	strb.w	r1, [sp, #7]
		return (f) ? f->write(&b, 1) : 0;
     50e:	cbz	r0, 52a <File::write(unsigned char)+0x26>
     510:	ldr	r3, [r0, #0]
     512:	ldr	r2, [pc, #64]	; (554 <File::write(unsigned char)+0x50>)
     514:	ldr	r3, [r3, #12]
     516:	cmp	r3, r2
     518:	bne.n	546 <File::write(unsigned char)+0x42>
   *
   * \return For success write() returns the number of bytes written, always
   * \a nbyte.  If an error occurs, write() returns zero and writeError is set.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile   ? m_fFile->write(buf, count)
     51a:	ldr	r3, [r0, #80]	; 0x50
     51c:	cbz	r3, 530 <File::write(unsigned char)+0x2c>
     51e:	movs	r2, #1
     520:	add.w	r1, sp, #7
     524:	mov	r0, r3
     526:	bl	68f4 <FatFile::write(void const*, unsigned int)>
	}
     52a:	add	sp, #12
     52c:	ldr.w	pc, [sp], #4
     530:	ldr	r0, [r0, #84]	; 0x54
           : m_xFile ? m_xFile->write(buf, count)
     532:	cmp	r0, #0
     534:	beq.n	52a <File::write(unsigned char)+0x26>
     536:	movs	r2, #1
     538:	add.w	r1, sp, #7
     53c:	bl	513c <ExFatFile::write(void const*, unsigned int)>
     540:	add	sp, #12
     542:	ldr.w	pc, [sp], #4
		return (f) ? f->write(&b, 1) : 0;
     546:	movs	r2, #1
     548:	add.w	r1, sp, #7
     54c:	blx	r3
	}
     54e:	add	sp, #12
     550:	ldr.w	pc, [sp], #4
     554:	.word	0x00000725

00000558 <SDFile::position()>:
    return m_fFile   ? m_fFile->curPosition()
     558:	ldr	r3, [r0, #80]	; 0x50
     55a:	cbz	r3, 562 <SDFile::position()+0xa>
     55c:	ldr	r0, [r3, #20]
     55e:	movs	r1, #0
     560:	bx	lr
     562:	ldr	r3, [r0, #84]	; 0x54
           : m_xFile ? m_xFile->curPosition()
     564:	cbz	r3, 56c <SDFile::position()+0x14>
  uint64_t curPosition() const { return m_curPosition; }
     566:	ldrd	r0, r1, [r3]
     56a:	bx	lr
     56c:	mov	r0, r3
     56e:	mov	r1, r3
	}
     570:	bx	lr
     572:	nop

00000574 <SDFile::size()>:
    return m_fFile ? m_fFile->fileSize() : m_xFile ? m_xFile->fileSize() : 0;
     574:	ldr	r3, [r0, #80]	; 0x50
     576:	cbz	r3, 57e <SDFile::size()+0xa>
     578:	ldr	r0, [r3, #28]
     57a:	movs	r1, #0
     57c:	bx	lr
     57e:	ldr	r3, [r0, #84]	; 0x54
     580:	cbz	r3, 588 <SDFile::size()+0x14>
  uint64_t fileSize() const { return m_validLength; }
     582:	ldrd	r0, r1, [r3, #16]
     586:	bx	lr
     588:	mov	r0, r3
     58a:	mov	r1, r3
	}
     58c:	bx	lr
     58e:	nop

00000590 <SDFile::openNextFile(unsigned char)>:
	virtual File openNextFile(uint8_t mode=0) {
     590:	push	{r4, r5, r6, r7, lr}
     592:	sub	sp, #84	; 0x54
	constexpr Print() : write_error(0) {}
     594:	movs	r2, #0
#include "Print.h"

class Stream : public Print
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     596:	mov.w	r4, #1000	; 0x3e8
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     59a:	ldr	r7, [pc, #144]	; (62c <SDFile::openNextFile(unsigned char)+0x9c>)
   * \param[in] oflag open flags.
   * \return a FatStream object.
   */
  FsFile openNextFile(oflag_t oflag = O_RDONLY) {
    FsFile tmpFile;
    tmpFile.openNext(this, oflag);
     59c:	adds	r1, #24
     59e:	mov	r5, r0
     5a0:	add	r0, sp, #16
     5a2:	strb.w	r2, [sp, #4]
     5a6:	str	r4, [sp, #8]
     5a8:	strb.w	r2, [sp, #12]
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     5ac:	str	r7, [sp, #0]
  FsBaseFile() = default;
     5ae:	strd	r2, r2, [sp, #72]	; 0x48
    tmpFile.openNext(this, oflag);
     5b2:	bl	782c <FsBaseFile::openNext(FsBaseFile*, int)>
  bool isOpen() const { return m_fFile || m_xFile; }
     5b6:	ldr	r3, [sp, #72]	; 0x48
     5b8:	cbz	r3, 618 <SDFile::openNextFile(unsigned char)+0x88>
		if (file) return File(new SDFile(file));
     5ba:	movs	r0, #92	; 0x5c
class FileImpl {
     5bc:	movs	r6, #0
     5be:	bl	d078 <operator new(unsigned int)>
class Print
     5c2:	ldrb.w	r3, [sp, #4]
     5c6:	mov	r4, r0
     5c8:	str	r6, [r0, #4]
     5ca:	strb	r3, [r0, #12]
class StreamFile : public stream_t, public BaseFile {
     5cc:	add	r1, sp, #16
class Stream : public Print
     5ce:	ldr	r3, [sp, #8]
     5d0:	adds	r0, #24
     5d2:	str.w	r3, [r0, #-8]
     5d6:	ldrb.w	r3, [sp, #12]
     5da:	strb.w	r3, [r0, #-4]
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
     5de:	ldr	r3, [pc, #80]	; (630 <SDFile::openNextFile(unsigned char)+0xa0>)
     5e0:	str.w	r3, [r0, #-24]
     5e4:	ldr	r3, [pc, #76]	; (634 <SDFile::openNextFile(unsigned char)+0xa4>)
     5e6:	str.w	r3, [r0, #-16]
     5ea:	bl	76d8 <FsBaseFile::FsBaseFile(FsBaseFile const&)>
	File(FileImpl *file) {
     5ee:	ldr	r3, [pc, #72]	; (638 <SDFile::openNextFile(unsigned char)+0xa8>)
	constexpr Stream() : _timeout(1000), read_error(0) {}
     5f0:	mov.w	r2, #1000	; 0x3e8
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     5f4:	str	r7, [r4, #8]
     5f6:	str	r3, [r5, #0]
		if (f) f->refcount++;
     5f8:	ldr	r3, [r4, #4]
     5fa:	str	r6, [r4, #88]	; 0x58
     5fc:	adds	r3, #1
	constexpr Print() : write_error(0) {}
     5fe:	strb	r6, [r5, #4]
     600:	strb	r6, [r5, #12]
     602:	str	r2, [r5, #8]
		f = file;
     604:	str	r4, [r5, #16]
		if (f) f->refcount++;
     606:	str	r3, [r4, #4]
     608:	ldr	r3, [pc, #48]	; (63c <SDFile::openNextFile(unsigned char)+0xac>)
  ~FsBaseFile() { close(); }
     60a:	add	r0, sp, #16
     60c:	str	r3, [sp, #0]
     60e:	bl	775c <FsBaseFile::close()>
	}
     612:	mov	r0, r5
     614:	add	sp, #84	; 0x54
     616:	pop	{r4, r5, r6, r7, pc}
  bool isOpen() const { return m_fFile || m_xFile; }
     618:	ldr	r3, [sp, #76]	; 0x4c
     61a:	cmp	r3, #0
     61c:	bne.n	5ba <SDFile::openNextFile(unsigned char)+0x2a>
	constexpr File() : f(nullptr) { }
     61e:	ldr	r2, [pc, #24]	; (638 <SDFile::openNextFile(unsigned char)+0xa8>)
     620:	strb	r3, [r5, #4]
     622:	str	r4, [r5, #8]
     624:	strb	r3, [r5, #12]
     626:	str	r2, [r5, #0]
     628:	str	r3, [r5, #16]
     62a:	b.n	608 <SDFile::openNextFile(unsigned char)+0x78>
     62c:	.word	0x20000ab8
     630:	.word	0x20000ae8
     634:	.word	0x20000b44
     638:	.word	0x20000a8c
     63c:	.word	0x2000099c

00000640 <StreamFile<FsBaseFile, unsigned long long>::peek()>:
    return m_fFile ? m_fFile->peek() : m_xFile ? m_xFile->peek() : -1;
     640:	ldr	r3, [r0, #72]	; 0x48
     642:	cbz	r3, 64a <StreamFile<FsBaseFile, unsigned long long>::peek()+0xa>
     644:	mov	r0, r3
     646:	b.w	624c <FatFile::peek()>
     64a:	ldr	r0, [r0, #76]	; 0x4c
     64c:	cbz	r0, 652 <StreamFile<FsBaseFile, unsigned long long>::peek()+0x12>
     64e:	b.w	3de4 <ExFatFile::peek()>
  int peek() { return BaseFile::peek(); }
     652:	mov.w	r0, #4294967295
     656:	bx	lr

00000658 <SDFile::peek()>:
     658:	ldr	r3, [r0, #80]	; 0x50
     65a:	cbz	r3, 662 <SDFile::peek()+0xa>
     65c:	mov	r0, r3
     65e:	b.w	624c <FatFile::peek()>
     662:	ldr	r0, [r0, #84]	; 0x54
     664:	cbz	r0, 66a <SDFile::peek()+0x12>
     666:	b.w	3de4 <ExFatFile::peek()>
	}
     66a:	mov.w	r0, #4294967295
     66e:	bx	lr

00000670 <SDFile::isDirectory()>:
    return m_fFile ? m_fFile->isDir() : m_xFile ? m_xFile->isDir() : false;
     670:	ldr	r3, [r0, #80]	; 0x50
     672:	cbz	r3, 682 <SDFile::isDirectory()+0x12>
  bool isDir() const { return m_attributes & FILE_ATTR_DIR; }
     674:	ldrb	r3, [r3, #0]
     676:	tst.w	r3, #208	; 0xd0
     67a:	ite	ne
     67c:	movne	r0, #1
     67e:	moveq	r0, #0
     680:	bx	lr
     682:	ldr	r0, [r0, #84]	; 0x54
     684:	cbz	r0, 694 <SDFile::isDirectory()+0x24>
     686:	ldrb.w	r3, [r0, #49]	; 0x31
     68a:	tst.w	r3, #80	; 0x50
     68e:	ite	ne
     690:	movne	r0, #1
     692:	moveq	r0, #0
	}
     694:	bx	lr
     696:	nop

00000698 <SDFile::read(void*, unsigned int)>:
    return m_fFile   ? m_fFile->read(buf, count)
     698:	ldr	r3, [r0, #80]	; 0x50
     69a:	cbz	r3, 6a2 <SDFile::read(void*, unsigned int)+0xa>
     69c:	mov	r0, r3
     69e:	b.w	60a4 <FatFile::read(void*, unsigned int)>
     6a2:	ldr	r0, [r0, #84]	; 0x54
           : m_xFile ? m_xFile->read(buf, count)
     6a4:	cbz	r0, 6aa <SDFile::read(void*, unsigned int)+0x12>
     6a6:	b.w	3c44 <ExFatFile::read(void*, unsigned int)>
	}
     6aa:	mov.w	r0, #4294967295
     6ae:	bx	lr

000006b0 <StreamFile<FsBaseFile, unsigned long long>::read()>:
    return m_fFile   ? m_fFile->read(buf, count)
     6b0:	ldr	r3, [r0, #72]	; 0x48
  int read() { return BaseFile::read(); }
     6b2:	push	{lr}
     6b4:	sub	sp, #12
     6b6:	cbz	r3, 6d2 <StreamFile<FsBaseFile, unsigned long long>::read()+0x22>
     6b8:	movs	r2, #1
     6ba:	add.w	r1, sp, #7
     6be:	mov	r0, r3
     6c0:	bl	60a4 <FatFile::read(void*, unsigned int)>
    return read(&b, 1) == 1 ? b : -1;
     6c4:	cmp	r0, #1
     6c6:	bne.n	6e2 <StreamFile<FsBaseFile, unsigned long long>::read()+0x32>
     6c8:	ldrb.w	r0, [sp, #7]
     6cc:	add	sp, #12
     6ce:	ldr.w	pc, [sp], #4
     6d2:	ldr	r0, [r0, #76]	; 0x4c
           : m_xFile ? m_xFile->read(buf, count)
     6d4:	cbz	r0, 6e2 <StreamFile<FsBaseFile, unsigned long long>::read()+0x32>
     6d6:	movs	r2, #1
     6d8:	add.w	r1, sp, #7
     6dc:	bl	3c44 <ExFatFile::read(void*, unsigned int)>
     6e0:	b.n	6c4 <StreamFile<FsBaseFile, unsigned long long>::read()+0x14>
    return read(&b, 1) == 1 ? b : -1;
     6e2:	mov.w	r0, #4294967295
     6e6:	b.n	6cc <StreamFile<FsBaseFile, unsigned long long>::read()+0x1c>

000006e8 <StreamFile<FsBaseFile, unsigned long long>::flush()>:
    return m_fFile ? m_fFile->sync() : m_xFile ? m_xFile->sync() : false;
     6e8:	ldr	r3, [r0, #72]	; 0x48
     6ea:	cbz	r3, 6f2 <StreamFile<FsBaseFile, unsigned long long>::flush()+0xa>
     6ec:	mov	r0, r3
     6ee:	b.w	679c <FatFile::sync()>
     6f2:	ldr	r0, [r0, #76]	; 0x4c
     6f4:	cbz	r0, 6fa <StreamFile<FsBaseFile, unsigned long long>::flush()+0x12>
     6f6:	b.w	4bf8 <ExFatFile::sync()>
  void flush() { BaseFile::sync(); }
     6fa:	bx	lr

000006fc <SDFile::flush()>:
     6fc:	ldr	r3, [r0, #80]	; 0x50
     6fe:	cbz	r3, 706 <SDFile::flush()+0xa>
     700:	mov	r0, r3
     702:	b.w	679c <FatFile::sync()>
     706:	ldr	r0, [r0, #84]	; 0x54
     708:	cbz	r0, 70e <SDFile::flush()+0x12>
     70a:	b.w	4bf8 <ExFatFile::sync()>
	}
     70e:	bx	lr

00000710 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)>:
    return m_fFile   ? m_fFile->write(buf, count)
     710:	ldr	r3, [r0, #72]	; 0x48
     712:	cbz	r3, 71a <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0xa>
     714:	mov	r0, r3
     716:	b.w	68f4 <FatFile::write(void const*, unsigned int)>
     71a:	ldr	r0, [r0, #76]	; 0x4c
           : m_xFile ? m_xFile->write(buf, count)
     71c:	cbz	r0, 722 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0x12>
     71e:	b.w	513c <ExFatFile::write(void const*, unsigned int)>
   * \return For success write() returns the number of bytes written, always
   * \a size.
   */
  size_t write(const uint8_t* buffer, size_t size) {
    return BaseFile::write(buffer, size);
  }
     722:	bx	lr

00000724 <SDFile::write(void const*, unsigned int)>:
    return m_fFile   ? m_fFile->write(buf, count)
     724:	ldr	r3, [r0, #80]	; 0x50
     726:	cbz	r3, 72e <SDFile::write(void const*, unsigned int)+0xa>
     728:	mov	r0, r3
     72a:	b.w	68f4 <FatFile::write(void const*, unsigned int)>
     72e:	ldr	r0, [r0, #84]	; 0x54
           : m_xFile ? m_xFile->write(buf, count)
     730:	cbz	r0, 736 <SDFile::write(void const*, unsigned int)+0x12>
     732:	b.w	513c <ExFatFile::write(void const*, unsigned int)>
	}
     736:	bx	lr

00000738 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)>:
  size_t write(uint8_t b) { return BaseFile::write(b); }
     738:	push	{lr}
    return m_fFile   ? m_fFile->write(buf, count)
     73a:	ldr	r3, [r0, #72]	; 0x48
     73c:	sub	sp, #12
     73e:	strb.w	r1, [sp, #7]
     742:	cbz	r3, 756 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x1e>
     744:	movs	r2, #1
     746:	add.w	r1, sp, #7
     74a:	mov	r0, r3
     74c:	bl	68f4 <FatFile::write(void const*, unsigned int)>
     750:	add	sp, #12
     752:	ldr.w	pc, [sp], #4
     756:	ldr	r0, [r0, #76]	; 0x4c
           : m_xFile ? m_xFile->write(buf, count)
     758:	cmp	r0, #0
     75a:	beq.n	750 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x18>
     75c:	movs	r2, #1
     75e:	add.w	r1, sp, #7
     762:	bl	513c <ExFatFile::write(void const*, unsigned int)>
     766:	add	sp, #12
     768:	ldr.w	pc, [sp], #4

0000076c <SDFile::setCreateTime(DateTimeFields const&)>:
		if (tm.year < 80 || tm.year > 207) return false;
     76c:	ldrb	r2, [r1, #6]
     76e:	sub.w	r3, r2, #80	; 0x50
     772:	lsls	r3, r3, #24
     774:	bmi.n	7bc <SDFile::setCreateTime(DateTimeFields const&)+0x50>
		return sdfatfile.timestamp(T_CREATE, tm.year + 1900, tm.mon + 1,
     776:	addw	r2, r2, #1900	; 0x76c
	virtual bool setCreateTime(const DateTimeFields &tm) {
     77a:	push	{r4, r5, r6, r7, lr}
		return sdfatfile.timestamp(T_CREATE, tm.year + 1900, tm.mon + 1,
     77c:	ldrb	r3, [r1, #5]
	virtual bool setCreateTime(const DateTimeFields &tm) {
     77e:	sub	sp, #20
    return m_fFile   ? m_fFile->timestamp(flags, year, month, day, hour, minute,
     780:	ldr	r4, [r0, #80]	; 0x50
		return sdfatfile.timestamp(T_CREATE, tm.year + 1900, tm.mon + 1,
     782:	adds	r3, #1
			tm.mday, tm.hour, tm.min, tm.sec);
     784:	ldrb	r5, [r1, #4]
     786:	ldrb	r6, [r1, #2]
     788:	ldrb	r7, [r1, #1]
		return sdfatfile.timestamp(T_CREATE, tm.year + 1900, tm.mon + 1,
     78a:	uxtb	r3, r3
			tm.mday, tm.hour, tm.min, tm.sec);
     78c:	ldrb	r1, [r1, #0]
     78e:	cbz	r4, 7a4 <SDFile::setCreateTime(DateTimeFields const&)+0x38>
     790:	mov	r0, r4
     792:	str	r6, [sp, #4]
     794:	str	r5, [sp, #0]
     796:	strd	r7, r1, [sp, #8]
     79a:	movs	r1, #2
     79c:	bl	67a8 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
	}
     7a0:	add	sp, #20
     7a2:	pop	{r4, r5, r6, r7, pc}
     7a4:	ldr	r0, [r0, #84]	; 0x54
           : m_xFile ? m_xFile->timestamp(flags, year, month, day, hour, minute,
     7a6:	cmp	r0, #0
     7a8:	beq.n	7a0 <SDFile::setCreateTime(DateTimeFields const&)+0x34>
     7aa:	str	r6, [sp, #4]
     7ac:	str	r5, [sp, #0]
     7ae:	strd	r7, r1, [sp, #8]
     7b2:	movs	r1, #2
     7b4:	bl	4ee0 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
     7b8:	add	sp, #20
     7ba:	pop	{r4, r5, r6, r7, pc}
		if (tm.year < 80 || tm.year > 207) return false;
     7bc:	movs	r0, #0
	}
     7be:	bx	lr

000007c0 <SDFile::available()>:
    return m_fFile ? m_fFile->available() : m_xFile ? m_xFile->available() : 0;
     7c0:	ldr	r3, [r0, #80]	; 0x50
     7c2:	cbz	r3, 7da <SDFile::available()+0x1a>
    return isFile() ? fileSize() - curPosition() : 0;
     7c4:	ldrb	r0, [r3, #0]
     7c6:	ands.w	r0, r0, #8
     7ca:	beq.n	7e8 <SDFile::available()+0x28>
     7cc:	ldr	r0, [r3, #28]
     7ce:	ldr	r3, [r3, #20]
    return n > INT_MAX ? INT_MAX : n;
     7d0:	subs	r0, r0, r3
     7d2:	it	mi
     7d4:	mvnmi.w	r0, #2147483648	; 0x80000000
     7d8:	bx	lr
     7da:	ldr	r3, [r0, #84]	; 0x54
     7dc:	cbz	r3, 808 <SDFile::available()+0x48>
  uint64_t available64() { return isFile() ? fileSize() - curPosition() : 0; }
     7de:	ldrb.w	r0, [r3, #49]	; 0x31
     7e2:	ands.w	r0, r0, #8
     7e6:	bne.n	7ea <SDFile::available()+0x2a>
	}
     7e8:	bx	lr
     7ea:	ldr	r0, [r3, #16]
     7ec:	ldr	r1, [r3, #0]
     7ee:	ldr	r2, [r3, #20]
     7f0:	subs	r0, r0, r1
     7f2:	ldr	r3, [r3, #4]
     7f4:	sbc.w	r3, r2, r3
    return n > INT_MAX ? INT_MAX : n;
     7f8:	cmp.w	r0, #2147483648	; 0x80000000
     7fc:	sbcs.w	r3, r3, #0
     800:	bcc.n	7e8 <SDFile::available()+0x28>
     802:	mvn.w	r0, #2147483648	; 0x80000000
     806:	bx	lr
     808:	mov	r0, r3
		return sdfatfile.available();
     80a:	b.n	7e8 <SDFile::available()+0x28>

0000080c <StreamFile<FsBaseFile, unsigned long long>::available()>:
     80c:	ldr	r3, [r0, #72]	; 0x48
     80e:	cbz	r3, 826 <StreamFile<FsBaseFile, unsigned long long>::available()+0x1a>
    return isFile() ? fileSize() - curPosition() : 0;
     810:	ldrb	r0, [r3, #0]
     812:	ands.w	r0, r0, #8
     816:	beq.n	834 <StreamFile<FsBaseFile, unsigned long long>::available()+0x28>
     818:	ldr	r0, [r3, #28]
     81a:	ldr	r3, [r3, #20]
    return n > INT_MAX ? INT_MAX : n;
     81c:	subs	r0, r0, r3
     81e:	it	mi
     820:	mvnmi.w	r0, #2147483648	; 0x80000000
     824:	bx	lr
     826:	ldr	r3, [r0, #76]	; 0x4c
     828:	cbz	r3, 854 <StreamFile<FsBaseFile, unsigned long long>::available()+0x48>
  uint64_t available64() { return isFile() ? fileSize() - curPosition() : 0; }
     82a:	ldrb.w	r0, [r3, #49]	; 0x31
     82e:	ands.w	r0, r0, #8
     832:	bne.n	836 <StreamFile<FsBaseFile, unsigned long long>::available()+0x2a>
  int available() { return BaseFile::available(); }
     834:	bx	lr
     836:	ldr	r0, [r3, #16]
     838:	ldr	r1, [r3, #0]
     83a:	ldr	r2, [r3, #20]
     83c:	subs	r0, r0, r1
     83e:	ldr	r3, [r3, #4]
     840:	sbc.w	r3, r2, r3
    return n > INT_MAX ? INT_MAX : n;
     844:	cmp.w	r0, #2147483648	; 0x80000000
     848:	sbcs.w	r3, r3, #0
     84c:	bcc.n	834 <StreamFile<FsBaseFile, unsigned long long>::available()+0x28>
     84e:	mvn.w	r0, #2147483648	; 0x80000000
     852:	bx	lr
     854:	mov	r0, r3
     856:	b.n	834 <StreamFile<FsBaseFile, unsigned long long>::available()+0x28>

00000858 <File::write(unsigned char const*, unsigned int)>:
		return (f) ? f->write((void*)buf, size) : 0;
     858:	ldr	r3, [r0, #16]
     85a:	cbz	r3, 892 <File::write(unsigned char const*, unsigned int)+0x3a>
     85c:	ldr	r0, [pc, #56]	; (898 <File::write(unsigned char const*, unsigned int)+0x40>)
	virtual size_t write(const uint8_t *buf, size_t size) {
     85e:	push	{r4}
		return (f) ? f->write((void*)buf, size) : 0;
     860:	ldr	r4, [r3, #0]
     862:	ldr	r4, [r4, #12]
     864:	cmp	r4, r0
     866:	bne.n	888 <File::write(unsigned char const*, unsigned int)+0x30>
    return m_fFile   ? m_fFile->write(buf, count)
     868:	ldr	r0, [r3, #80]	; 0x50
     86a:	cbz	r0, 874 <File::write(unsigned char const*, unsigned int)+0x1c>
	}
     86c:	ldr.w	r4, [sp], #4
     870:	b.w	68f4 <FatFile::write(void const*, unsigned int)>
     874:	ldr	r0, [r3, #84]	; 0x54
           : m_xFile ? m_xFile->write(buf, count)
     876:	cbz	r0, 880 <File::write(unsigned char const*, unsigned int)+0x28>
     878:	ldr.w	r4, [sp], #4
     87c:	b.w	513c <ExFatFile::write(void const*, unsigned int)>
     880:	movs	r0, #0
     882:	ldr.w	r4, [sp], #4
     886:	bx	lr
		return (f) ? f->write((void*)buf, size) : 0;
     888:	mov	r0, r3
     88a:	mov	r3, r4
	}
     88c:	ldr.w	r4, [sp], #4
		return (f) ? f->write((void*)buf, size) : 0;
     890:	bx	r3
	}
     892:	movs	r0, #0
     894:	bx	lr
     896:	nop
     898:	.word	0x00000725

0000089c <SDFile::~SDFile()>:
	virtual ~SDFile(void) {
     89c:	push	{r3, r4, r5, lr}
     89e:	mov	r4, r0
     8a0:	ldr	r3, [pc, #48]	; (8d4 <SDFile::~SDFile()+0x38>)
		if (filename) {
     8a2:	ldr	r0, [r0, #88]	; 0x58
	virtual ~SDFile(void) {
     8a4:	str	r3, [r4, #0]
		if (filename) {
     8a6:	cbz	r0, 8b0 <SDFile::~SDFile()+0x14>
			free(filename);
     8a8:	bl	d220 <free>
			filename = nullptr;
     8ac:	movs	r3, #0
     8ae:	str	r3, [r4, #88]	; 0x58
  bool isOpen() const { return m_fFile || m_xFile; }
     8b0:	ldr	r3, [r4, #80]	; 0x50
			sdfatfile.close();
     8b2:	add.w	r5, r4, #24
     8b6:	cbz	r3, 8cc <SDFile::~SDFile()+0x30>
     8b8:	mov	r0, r5
     8ba:	bl	775c <FsBaseFile::close()>
class StreamFile : public stream_t, public BaseFile {
     8be:	ldr	r3, [pc, #24]	; (8d8 <SDFile::~SDFile()+0x3c>)
  ~FsBaseFile() { close(); }
     8c0:	mov	r0, r5
     8c2:	str	r3, [r4, #8]
     8c4:	bl	775c <FsBaseFile::close()>
	}
     8c8:	mov	r0, r4
     8ca:	pop	{r3, r4, r5, pc}
  bool isOpen() const { return m_fFile || m_xFile; }
     8cc:	ldr	r3, [r4, #84]	; 0x54
     8ce:	cmp	r3, #0
     8d0:	bne.n	8b8 <SDFile::~SDFile()+0x1c>
     8d2:	b.n	8be <SDFile::~SDFile()+0x22>
     8d4:	.word	0x20000ae8
     8d8:	.word	0x2000099c

000008dc <SDFile::~SDFile()>:
	virtual ~SDFile(void) {
     8dc:	push	{r3, r4, r5, lr}
     8de:	mov	r4, r0
     8e0:	ldr	r3, [pc, #56]	; (91c <SDFile::~SDFile()+0x40>)
		if (filename) {
     8e2:	ldr	r0, [r0, #88]	; 0x58
	virtual ~SDFile(void) {
     8e4:	str	r3, [r4, #0]
		if (filename) {
     8e6:	cbz	r0, 8f0 <SDFile::~SDFile()+0x14>
			free(filename);
     8e8:	bl	d220 <free>
			filename = nullptr;
     8ec:	movs	r3, #0
     8ee:	str	r3, [r4, #88]	; 0x58
     8f0:	ldr	r3, [r4, #80]	; 0x50
			sdfatfile.close();
     8f2:	add.w	r5, r4, #24
     8f6:	cbz	r3, 914 <SDFile::~SDFile()+0x38>
     8f8:	mov	r0, r5
     8fa:	bl	775c <FsBaseFile::close()>
     8fe:	ldr	r3, [pc, #32]	; (920 <SDFile::~SDFile()+0x44>)
  ~FsBaseFile() { close(); }
     900:	mov	r0, r5
     902:	str	r3, [r4, #8]
     904:	bl	775c <FsBaseFile::close()>
	}
     908:	mov	r0, r4
     90a:	movs	r1, #92	; 0x5c
     90c:	bl	d07c <operator delete(void*, unsigned int)>
     910:	mov	r0, r4
     912:	pop	{r3, r4, r5, pc}
  bool isOpen() const { return m_fFile || m_xFile; }
     914:	ldr	r3, [r4, #84]	; 0x54
     916:	cmp	r3, #0
     918:	bne.n	8f8 <SDFile::~SDFile()+0x1c>
     91a:	b.n	8fe <SDFile::~SDFile()+0x22>
     91c:	.word	0x20000ae8
     920:	.word	0x2000099c

00000924 <SDFile::seek(unsigned long long, int)>:
	virtual bool seek(uint64_t pos, int mode = SeekSet) {
     924:	push	{r4, r5}
     926:	ldr	r4, [sp, #8]
     928:	mov	r1, r2
     92a:	mov	ip, r3
		if (mode == SeekSet) return sdfatfile.seekSet(pos);
     92c:	cbz	r4, 93c <SDFile::seek(unsigned long long, int)+0x18>
		if (mode == SeekCur) return sdfatfile.seekCur(pos);
     92e:	cmp	r4, #1
     930:	beq.n	96c <SDFile::seek(unsigned long long, int)+0x48>
		if (mode == SeekEnd) return sdfatfile.seekEnd(pos);
     932:	cmp	r4, #2
     934:	beq.n	954 <SDFile::seek(unsigned long long, int)+0x30>
	}
     936:	movs	r0, #0
     938:	pop	{r4, r5}
     93a:	bx	lr
    return m_fFile   ? pos < (1ULL << 32) && m_fFile->seekSet(pos)
     93c:	ldr	r5, [r0, #80]	; 0x50
     93e:	cbz	r5, 97e <SDFile::seek(unsigned long long, int)+0x5a>
     940:	mov.w	r3, #4294967295
     944:	cmp	r3, r2
     946:	sbcs.w	r4, r4, ip
     94a:	bcc.n	936 <SDFile::seek(unsigned long long, int)+0x12>
     94c:	mov	r0, r5
     94e:	pop	{r4, r5}
     950:	b.w	6534 <FatFile::seekSet(unsigned long)>
    return m_fFile ? m_fFile->fileSize() : m_xFile ? m_xFile->fileSize() : 0;
     954:	ldr	r2, [r0, #80]	; 0x50
     956:	cbz	r2, 99c <SDFile::seek(unsigned long long, int)+0x78>
     958:	ldr	r3, [r2, #28]
  bool seekEnd(int64_t offset = 0) { return seekSet(fileSize() + offset); }
     95a:	adds	r1, r3, r1
     95c:	adc.w	r3, ip, #0
    return m_fFile   ? pos < (1ULL << 32) && m_fFile->seekSet(pos)
     960:	cmp	r3, #0
     962:	bne.n	936 <SDFile::seek(unsigned long long, int)+0x12>
     964:	mov	r0, r2
     966:	pop	{r4, r5}
     968:	b.w	6534 <FatFile::seekSet(unsigned long)>
    return m_fFile   ? m_fFile->curPosition()
     96c:	ldr	r2, [r0, #80]	; 0x50
     96e:	cbz	r2, 98a <SDFile::seek(unsigned long long, int)+0x66>
     970:	ldr	r3, [r2, #20]
  bool seekCur(int64_t offset) { return seekSet(curPosition() + offset); }
     972:	adds	r1, r3, r1
     974:	adc.w	r3, ip, #0
    return m_fFile   ? pos < (1ULL << 32) && m_fFile->seekSet(pos)
     978:	cmp	r3, #0
     97a:	bne.n	936 <SDFile::seek(unsigned long long, int)+0x12>
     97c:	b.n	964 <SDFile::seek(unsigned long long, int)+0x40>
     97e:	ldr	r0, [r0, #84]	; 0x54
           : m_xFile ? m_xFile->seekSet(pos)
     980:	cmp	r0, #0
     982:	beq.n	936 <SDFile::seek(unsigned long long, int)+0x12>
     984:	pop	{r4, r5}
     986:	b.w	3e10 <ExFatFile::seekSet(unsigned long long)>
     98a:	ldr	r0, [r0, #84]	; 0x54
           : m_xFile ? m_xFile->curPosition()
     98c:	cmp	r0, #0
     98e:	beq.n	936 <SDFile::seek(unsigned long long, int)+0x12>
  bool seekCur(int64_t offset) { return seekSet(curPosition() + offset); }
     990:	ldrd	r2, r3, [r0]
     994:	adds	r2, r1, r2
           : m_xFile ? m_xFile->seekSet(pos)
     996:	adc.w	r3, ip, r3
     99a:	b.n	984 <SDFile::seek(unsigned long long, int)+0x60>
     99c:	ldr	r0, [r0, #84]	; 0x54
    return m_fFile ? m_fFile->fileSize() : m_xFile ? m_xFile->fileSize() : 0;
     99e:	cmp	r0, #0
     9a0:	beq.n	936 <SDFile::seek(unsigned long long, int)+0x12>
  bool seekEnd(int64_t offset = 0) { return seekSet(fileSize() + offset); }
     9a2:	ldrd	r2, r3, [r0, #16]
     9a6:	pop	{r4, r5}
     9a8:	adds	r2, r1, r2
           : m_xFile ? m_xFile->seekSet(pos)
     9aa:	adc.w	r3, ip, r3
     9ae:	b.w	3e10 <ExFatFile::seekSet(unsigned long long)>
     9b2:	nop

000009b4 <File::~File()>:
	virtual ~File() {
     9b4:	push	{r4, r5, r6, lr}
     9b6:	ldr	r3, [pc, #144]	; (a48 <File::~File()+0x94>)
     9b8:	mov	r4, r0
		if (f) dec_refcount();
     9ba:	ldr	r5, [r0, #16]
	virtual ~File() {
     9bc:	str	r3, [r0, #0]
		if (f) dec_refcount();
     9be:	cmp	r5, #0
     9c0:	beq.n	a28 <File::~File()+0x74>
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	using Print::write;
private:
	void dec_refcount() {
		if (--(f->refcount) == 0) {
     9c2:	ldr	r6, [r5, #4]
     9c4:	subs	r6, #1
     9c6:	str	r6, [r5, #4]
     9c8:	cbnz	r6, a28 <File::~File()+0x74>
			f->close();
     9ca:	ldr	r3, [r5, #0]
     9cc:	ldr	r2, [pc, #124]	; (a4c <File::~File()+0x98>)
     9ce:	ldr	r3, [r3, #44]	; 0x2c
     9d0:	cmp	r3, r2
     9d2:	bne.n	a34 <File::~File()+0x80>
		if (filename) {
     9d4:	ldr	r0, [r5, #88]	; 0x58
     9d6:	cbz	r0, 9de <File::~File()+0x2a>
			free(filename);
     9d8:	bl	d220 <free>
			filename = nullptr;
     9dc:	str	r6, [r5, #88]	; 0x58
  bool isOpen() const { return m_fFile || m_xFile; }
     9de:	ldr	r3, [r5, #80]	; 0x50
     9e0:	cbz	r3, a2c <File::~File()+0x78>
			sdfatfile.close();
     9e2:	add.w	r0, r5, #24
     9e6:	bl	775c <FsBaseFile::close()>
			delete f;
     9ea:	ldr	r5, [r4, #16]
     9ec:	cbz	r5, a28 <File::~File()+0x74>
     9ee:	ldr	r3, [r5, #0]
     9f0:	ldr	r2, [pc, #92]	; (a50 <File::~File()+0x9c>)
     9f2:	ldr	r3, [r3, #4]
     9f4:	cmp	r3, r2
     9f6:	bne.n	a42 <File::~File()+0x8e>
	virtual ~SDFile(void) {
     9f8:	ldr	r3, [pc, #88]	; (a54 <File::~File()+0xa0>)
		if (filename) {
     9fa:	ldr	r0, [r5, #88]	; 0x58
	virtual ~SDFile(void) {
     9fc:	str	r3, [r5, #0]
		if (filename) {
     9fe:	cbz	r0, a08 <File::~File()+0x54>
			free(filename);
     a00:	bl	d220 <free>
			filename = nullptr;
     a04:	movs	r3, #0
     a06:	str	r3, [r5, #88]	; 0x58
     a08:	ldr	r3, [r5, #80]	; 0x50
			sdfatfile.close();
     a0a:	add.w	r6, r5, #24
     a0e:	cbz	r3, a3a <File::~File()+0x86>
     a10:	mov	r0, r6
     a12:	bl	775c <FsBaseFile::close()>
     a16:	ldr	r3, [pc, #64]	; (a58 <File::~File()+0xa4>)
  ~FsBaseFile() { close(); }
     a18:	mov	r0, r6
     a1a:	str	r3, [r5, #8]
     a1c:	bl	775c <FsBaseFile::close()>
	}
     a20:	movs	r1, #92	; 0x5c
     a22:	mov	r0, r5
     a24:	bl	d07c <operator delete(void*, unsigned int)>
	}
     a28:	mov	r0, r4
     a2a:	pop	{r4, r5, r6, pc}
  bool isOpen() const { return m_fFile || m_xFile; }
     a2c:	ldr	r3, [r5, #84]	; 0x54
     a2e:	cmp	r3, #0
     a30:	bne.n	9e2 <File::~File()+0x2e>
     a32:	b.n	9ea <File::~File()+0x36>
			f->close();
     a34:	mov	r0, r5
     a36:	blx	r3
     a38:	b.n	9ea <File::~File()+0x36>
     a3a:	ldr	r3, [r5, #84]	; 0x54
     a3c:	cmp	r3, #0
     a3e:	bne.n	a10 <File::~File()+0x5c>
     a40:	b.n	a16 <File::~File()+0x62>
			delete f;
     a42:	mov	r0, r5
     a44:	blx	r3
     a46:	b.n	a28 <File::~File()+0x74>
     a48:	.word	0x20000a8c
     a4c:	.word	0x000001bd
     a50:	.word	0x000008dd
     a54:	.word	0x20000ae8
     a58:	.word	0x2000099c

00000a5c <File::~File()>:
	virtual ~File() {
     a5c:	push	{r4, r5, r6, lr}
     a5e:	ldr	r3, [pc, #152]	; (af8 <File::~File()+0x9c>)
     a60:	mov	r4, r0
		if (f) dec_refcount();
     a62:	ldr	r5, [r0, #16]
	virtual ~File() {
     a64:	str	r3, [r0, #0]
		if (f) dec_refcount();
     a66:	cmp	r5, #0
     a68:	beq.n	ad0 <File::~File()+0x74>
		if (--(f->refcount) == 0) {
     a6a:	ldr	r6, [r5, #4]
     a6c:	subs	r6, #1
     a6e:	str	r6, [r5, #4]
     a70:	cbnz	r6, ad0 <File::~File()+0x74>
			f->close();
     a72:	ldr	r3, [r5, #0]
     a74:	ldr	r2, [pc, #132]	; (afc <File::~File()+0xa0>)
     a76:	ldr	r3, [r3, #44]	; 0x2c
     a78:	cmp	r3, r2
     a7a:	bne.n	ae4 <File::~File()+0x88>
		if (filename) {
     a7c:	ldr	r0, [r5, #88]	; 0x58
     a7e:	cbz	r0, a86 <File::~File()+0x2a>
			free(filename);
     a80:	bl	d220 <free>
			filename = nullptr;
     a84:	str	r6, [r5, #88]	; 0x58
     a86:	ldr	r3, [r5, #80]	; 0x50
     a88:	cbz	r3, adc <File::~File()+0x80>
			sdfatfile.close();
     a8a:	add.w	r0, r5, #24
     a8e:	bl	775c <FsBaseFile::close()>
			delete f;
     a92:	ldr	r5, [r4, #16]
     a94:	cbz	r5, ad0 <File::~File()+0x74>
     a96:	ldr	r3, [r5, #0]
     a98:	ldr	r2, [pc, #100]	; (b00 <File::~File()+0xa4>)
     a9a:	ldr	r3, [r3, #4]
     a9c:	cmp	r3, r2
     a9e:	bne.n	af2 <File::~File()+0x96>
	virtual ~SDFile(void) {
     aa0:	ldr	r3, [pc, #96]	; (b04 <File::~File()+0xa8>)
		if (filename) {
     aa2:	ldr	r0, [r5, #88]	; 0x58
	virtual ~SDFile(void) {
     aa4:	str	r3, [r5, #0]
		if (filename) {
     aa6:	cbz	r0, ab0 <File::~File()+0x54>
			free(filename);
     aa8:	bl	d220 <free>
			filename = nullptr;
     aac:	movs	r3, #0
     aae:	str	r3, [r5, #88]	; 0x58
     ab0:	ldr	r3, [r5, #80]	; 0x50
			sdfatfile.close();
     ab2:	add.w	r6, r5, #24
     ab6:	cbz	r3, aea <File::~File()+0x8e>
     ab8:	mov	r0, r6
     aba:	bl	775c <FsBaseFile::close()>
     abe:	ldr	r3, [pc, #72]	; (b08 <File::~File()+0xac>)
  ~FsBaseFile() { close(); }
     ac0:	mov	r0, r6
     ac2:	str	r3, [r5, #8]
     ac4:	bl	775c <FsBaseFile::close()>
	}
     ac8:	movs	r1, #92	; 0x5c
     aca:	mov	r0, r5
     acc:	bl	d07c <operator delete(void*, unsigned int)>
	}
     ad0:	mov	r0, r4
     ad2:	movs	r1, #20
     ad4:	bl	d07c <operator delete(void*, unsigned int)>
     ad8:	mov	r0, r4
     ada:	pop	{r4, r5, r6, pc}
  bool isOpen() const { return m_fFile || m_xFile; }
     adc:	ldr	r3, [r5, #84]	; 0x54
     ade:	cmp	r3, #0
     ae0:	bne.n	a8a <File::~File()+0x2e>
     ae2:	b.n	a92 <File::~File()+0x36>
			f->close();
     ae4:	mov	r0, r5
     ae6:	blx	r3
     ae8:	b.n	a92 <File::~File()+0x36>
     aea:	ldr	r3, [r5, #84]	; 0x54
     aec:	cmp	r3, #0
     aee:	bne.n	ab8 <File::~File()+0x5c>
     af0:	b.n	abe <File::~File()+0x62>
			delete f;
     af2:	mov	r0, r5
     af4:	blx	r3
     af6:	b.n	ad0 <File::~File()+0x74>
     af8:	.word	0x20000a8c
     afc:	.word	0x000001bd
     b00:	.word	0x000008dd
     b04:	.word	0x20000ae8
     b08:	.word	0x2000099c

00000b0c <I2S_32::config_i2s()>:

//#define AUDIO_SAMPLE_RATE_EXACT 44100 // used for initialization

void I2S_32::config_i2s(void)
{
	CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
     b0c:	ldr	r2, [pc, #200]	; (bd8 <I2S_32::config_i2s()+0xcc>)

	// if either transmitter or receiver is enabled, do nothing
	if (I2S1_TCSR & I2S_TCSR_TE) return;
     b0e:	ldr	r1, [pc, #204]	; (bdc <I2S_32::config_i2s()+0xd0>)
	CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
     b10:	ldr	r3, [r2, #124]	; 0x7c
     b12:	orr.w	r3, r3, #786432	; 0xc0000
     b16:	str	r3, [r2, #124]	; 0x7c
	if (I2S1_TCSR & I2S_TCSR_TE) return;
     b18:	ldr	r3, [r1, #8]
     b1a:	cmp	r3, #0
     b1c:	blt.n	bd4 <I2S_32::config_i2s()+0xc8>
	if (I2S1_RCSR & I2S_RCSR_RE) return;
     b1e:	ldr.w	r3, [r1, #136]	; 0x88
     b22:	cmp	r3, #0
     b24:	blt.n	bd4 <I2S_32::config_i2s()+0xc8>
    CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
     b26:	ldr	r3, [pc, #184]	; (be0 <I2S_32::config_i2s()+0xd4>)
    CCM_ANALOG_PLL_AUDIO_DENOM = ndiv & CCM_ANALOG_PLL_AUDIO_DENOM_MASK;
     b28:	movw	r2, #10000	; 0x2710
    CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
     b2c:	ldr	r0, [pc, #180]	; (be4 <I2S_32::config_i2s()+0xd8>)
    CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
     b2e:	mov.w	r1, #2240	; 0x8c0
{
     b32:	push	{r4, r5}
    CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
     b34:	str	r0, [r3, #112]	; 0x70
    CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
     b36:	str.w	r1, [r3, #128]	; 0x80
    CCM_ANALOG_PLL_AUDIO_DENOM = ndiv & CCM_ANALOG_PLL_AUDIO_DENOM_MASK;
     b3a:	str.w	r2, [r3, #144]	; 0x90
    CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_POWERDOWN;//Switch on PLL
     b3e:	ldr	r2, [r3, #112]	; 0x70
     b40:	bic.w	r2, r2, #4096	; 0x1000
     b44:	str	r2, [r3, #112]	; 0x70
    while (!(CCM_ANALOG_PLL_AUDIO & CCM_ANALOG_PLL_AUDIO_LOCK)) {}; //Wait for pll-lock
     b46:	ldr	r2, [r3, #112]	; 0x70
     b48:	cmp	r2, #0
     b4a:	bge.n	b46 <I2S_32::config_i2s()+0x3a>
    CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
     b4c:	ldr.w	r0, [r3, #368]	; 0x170
	CORE_PIN20_CONFIG = 3;  //1:RX_SYNC

	int rsync = 0;
	int tsync = 1;

	I2S1_TMR = 0;
     b50:	movs	r5, #0
     b52:	ldr	r2, [pc, #148]	; (be8 <I2S_32::config_i2s()+0xdc>)
    CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
     b54:	ldr	r1, [pc, #128]	; (bd8 <I2S_32::config_i2s()+0xcc>)
    CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
     b56:	ands	r2, r0
    IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
     b58:	ldr	r4, [pc, #144]	; (bec <I2S_32::config_i2s()+0xe0>)
	CORE_PIN23_CONFIG = 3;  //1:MCLK
     b5a:	ldr	r0, [pc, #148]	; (bf0 <I2S_32::config_i2s()+0xe4>)
    CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
     b5c:	str.w	r2, [r3, #368]	; 0x170
    CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_BYPASS;//Disable Bypass
     b60:	ldr	r2, [r3, #112]	; 0x70
     b62:	bic.w	r2, r2, #65536	; 0x10000
     b66:	str	r2, [r3, #112]	; 0x70
    CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
     b68:	ldr	r2, [r1, #28]
    CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
     b6a:	ldr	r3, [pc, #136]	; (bf4 <I2S_32::config_i2s()+0xe8>)
    CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
     b6c:	bic.w	r2, r2, #3072	; 0xc00
        | CCM_CSCMR1_SAI1_CLK_SEL(2); // &0x03 // (0,1,2): PLL3PFD0, PLL5, PLL4
     b70:	orr.w	r2, r2, #2048	; 0x800
    CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
     b74:	str	r2, [r1, #28]
    CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
     b76:	ldr	r2, [r1, #40]	; 0x28
     b78:	ands	r3, r2
      | (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));
     b7a:	ldr	r2, [pc, #124]	; (bf8 <I2S_32::config_i2s()+0xec>)
        | CCM_CS1CDR_SAI1_CLK_PODF(n2-1); // &0x3f
     b7c:	orr.w	r3, r3, #206	; 0xce
    CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
     b80:	str	r3, [r1, #40]	; 0x28
     b82:	movs	r1, #3
    IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
     b84:	ldr	r3, [r4, #4]
      | (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));
     b86:	ands	r2, r3
	I2S1_TMR = 0;
     b88:	ldr	r3, [pc, #80]	; (bdc <I2S_32::config_i2s()+0xd0>)
     b8a:	orr.w	r2, r2, #524288	; 0x80000
    IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
     b8e:	str	r2, [r4, #4]
	//I2S1_TCSR = (1<<25); //Reset
	I2S1_TCR1 = I2S_TCR1_RFW(1);
     b90:	movs	r4, #1
	I2S1_TCR2 = I2S_TCR2_SYNC(tsync) | I2S_TCR2_BCP // sync=0; tx is async;
     b92:	ldr	r2, [pc, #104]	; (bfc <I2S_32::config_i2s()+0xf0>)
	CORE_PIN23_CONFIG = 3;  //1:MCLK
     b94:	str.w	r1, [r0, #288]	; 0x120
	CORE_PIN21_CONFIG = 3;  //1:RX_BCLK
     b98:	str.w	r1, [r0, #296]	; 0x128
	CORE_PIN20_CONFIG = 3;  //1:RX_SYNC
     b9c:	str.w	r1, [r0, #292]	; 0x124
		    | (I2S_TCR2_BCD | I2S_TCR2_DIV((1)) | I2S_TCR2_MSEL(1));
	I2S1_TCR3 = I2S_TCR3_TCE;
     ba0:	mov.w	r0, #65536	; 0x10000
	I2S1_TMR = 0;
     ba4:	str	r5, [r3, #96]	; 0x60
	I2S1_TCR4 = I2S_TCR4_FRSZ((2-1)) | I2S_TCR4_SYWD((32-1)) | I2S_TCR4_MF
     ba6:	ldr	r1, [pc, #88]	; (c00 <I2S_32::config_i2s()+0xf4>)
	I2S1_TCR1 = I2S_TCR1_RFW(1);
     ba8:	str	r4, [r3, #12]
	I2S1_TCR2 = I2S_TCR2_SYNC(tsync) | I2S_TCR2_BCP // sync=0; tx is async;
     baa:	str	r2, [r3, #16]
		    | I2S_TCR4_FSE | I2S_TCR4_FSP | I2S_TCR4_FSD;
	I2S1_TCR5 = I2S_TCR5_WNW((32-1)) | I2S_TCR5_W0W((32-1)) | I2S_TCR5_FBT((32-1));
     bac:	ldr	r2, [pc, #84]	; (c04 <I2S_32::config_i2s()+0xf8>)
	I2S1_TCR3 = I2S_TCR3_TCE;
     bae:	str	r0, [r3, #20]
	I2S1_TCR4 = I2S_TCR4_FRSZ((2-1)) | I2S_TCR4_SYWD((32-1)) | I2S_TCR4_MF
     bb0:	str	r1, [r3, #24]
	I2S1_TCR5 = I2S_TCR5_WNW((32-1)) | I2S_TCR5_W0W((32-1)) | I2S_TCR5_FBT((32-1));
     bb2:	str	r2, [r3, #28]

	I2S1_RMR = 0;
     bb4:	str.w	r5, [r3, #224]	; 0xe0
	//I2S1_RCSR = (1<<25); //Reset
	I2S1_RCR1 = I2S_RCR1_RFW(1);
     bb8:	str.w	r4, [r3, #140]	; 0x8c
	I2S1_RCR2 = I2S_RCR2_SYNC(rsync) | I2S_RCR2_BCP  // sync=0; rx is async;
     bbc:	add.w	r4, r4, #117440512	; 0x7000000
     bc0:	str.w	r4, [r3, #144]	; 0x90
  	    | (I2S_RCR2_BCD | I2S_RCR2_DIV((1)) | I2S_RCR2_MSEL(1));
	I2S1_RCR3 = I2S_RCR3_RCE;
     bc4:	str.w	r0, [r3, #148]	; 0x94
	I2S1_RCR4 = I2S_RCR4_FRSZ((2-1)) | I2S_RCR4_SYWD((32-1)) | I2S_RCR4_MF
     bc8:	str.w	r1, [r3, #152]	; 0x98
		    | I2S_RCR4_FSE | I2S_RCR4_FSP | I2S_RCR4_FSD;
	I2S1_RCR5 = I2S_RCR5_WNW((32-1)) | I2S_RCR5_W0W((32-1)) | I2S_RCR5_FBT((32-1));
     bcc:	str.w	r2, [r3, #156]	; 0x9c
}
     bd0:	pop	{r4, r5}
     bd2:	bx	lr
     bd4:	bx	lr
     bd6:	nop
     bd8:	.word	0x400fc000
     bdc:	.word	0x40384000
     be0:	.word	0x400d8000
     be4:	.word	0x0011201c
     be8:	.word	0xff7f7fff
     bec:	.word	0x400ac000
     bf0:	.word	0x401f8000
     bf4:	.word	0xfffffe00
     bf8:	.word	0xfff7fff8
     bfc:	.word	0x47000001
     c00:	.word	0x00011f1b
     c04:	.word	0x1f1f1f00

00000c08 <I2S_32::begin()>:
{ 
     c08:	push	{r3, r4, r5, lr}
  dma.begin(true); // Allocate the DMA channel first
     c0a:	ldr	r4, [pc, #144]	; (c9c <I2S_32::begin()+0x94>)
{ 
     c0c:	mov	r5, r0
  dma.begin(true); // Allocate the DMA channel first
     c0e:	movs	r1, #1
     c10:	mov	r0, r4
     c12:	bl	c290 <DMAChannel::begin(bool)>
  config_i2s();
     c16:	mov	r0, r5
     c18:	bl	b0c <I2S_32::config_i2s()>
	CORE_PIN8_CONFIG  = 3;  //1:RX_DATA0
     c1c:	ldr	r1, [pc, #128]	; (ca0 <I2S_32::begin()+0x98>)
     c1e:	movs	r0, #3
	IOMUXC_SAI1_RX_DATA0_SELECT_INPUT = 2;
     c20:	ldr	r3, [pc, #128]	; (ca4 <I2S_32::begin()+0x9c>)
     c22:	movs	r2, #2
  dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
     c24:	movs	r5, #6
	CORE_PIN8_CONFIG  = 3;  //1:RX_DATA0
     c26:	str.w	r0, [r1, #380]	; 0x17c
	IOMUXC_SAI1_RX_DATA0_SELECT_INPUT = 2;
     c2a:	str.w	r2, [r3, #404]	; 0x194
  dma.TCD->NBYTES_MLNO = 4;
     c2e:	movs	r2, #4
	dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0);
     c30:	ldr	r3, [r4, #0]
  dma.TCD->SOFF = 0;
     c32:	ldr	r1, [pc, #116]	; (ca8 <I2S_32::begin()+0xa0>)
  dma.TCD->NBYTES_MLNO = 4;
     c34:	str	r2, [r3, #8]
  dma.TCD->SOFF = 0;
     c36:	str	r1, [r3, #4]
  dma.TCD->DOFF = 4;
     c38:	strh	r2, [r3, #20]
  dma.TCD->CITER_ELINKNO = sizeof(i2s_rx_buffer_32) / 4;
     c3a:	mov.w	r2, #256	; 0x100
	dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0);
     c3e:	ldr	r0, [pc, #108]	; (cac <I2S_32::begin()+0xa4>)
  dma.TCD->DADDR = i2s_rx_buffer_32;
     c40:	ldr	r1, [pc, #108]	; (cb0 <I2S_32::begin()+0xa8>)
	dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0);
     c42:	str	r0, [r3, #0]
  dma.TCD->SLAST = 0;
     c44:	movs	r0, #0
  dma.TCD->DADDR = i2s_rx_buffer_32;
     c46:	str	r1, [r3, #16]
  dma.TCD->CITER_ELINKNO = sizeof(i2s_rx_buffer_32) / 4;
     c48:	strh	r2, [r3, #22]
	// trigger moves a single data unit, which is typically 8, 16 or
	// 32 bits.  If a channel is configured for 200 transfers

	// Use a hardware trigger to make the DMA channel run
	void triggerAtHardwareEvent(uint8_t source) {
		volatile uint32_t *mux = &DMAMUX_CHCFG0 + channel;
     c4a:	ldrb	r1, [r4, #4]
  dma.TCD->BITER_ELINKNO = sizeof(i2s_rx_buffer_32) / 4;
     c4c:	strh	r2, [r3, #30]
  dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
     c4e:	strh	r5, [r3, #28]
  dma.TCD->DLASTSGA = -sizeof(i2s_rx_buffer_32);
     c50:	subw	r5, r5, #1030	; 0x406
     c54:	ldr	r2, [pc, #92]	; (cb4 <I2S_32::begin()+0xac>)
  dma.TCD->SLAST = 0;
     c56:	str	r0, [r3, #12]
  dma.TCD->DLASTSGA = -sizeof(i2s_rx_buffer_32);
     c58:	str	r5, [r3, #24]
		//mux = (volatile uint32_t *)&(DMAMUX_CHCFG0) + channel;
		*mux = 0;
     c5a:	str.w	r0, [r2, r1, lsl #2]
		*mux = (source & 0x7F) | DMAMUX_CHCFG_ENBL;
     c5e:	ldr	r0, [pc, #88]	; (cb8 <I2S_32::begin()+0xb0>)
  I2S1_RCSR = I2S_RCSR_RE | I2S_RCSR_BCE | I2S_RCSR_FRDE | I2S_RCSR_FR;
     c60:	ldr	r3, [pc, #88]	; (cbc <I2S_32::begin()+0xb4>)
     c62:	str.w	r0, [r2, r1, lsl #2]
     c66:	ldr	r2, [pc, #88]	; (cc0 <I2S_32::begin()+0xb8>)
     c68:	str.w	r2, [r3, #136]	; 0x88
  update_responsibility = update_setup();
     c6c:	bl	c8dc <AudioStream::update_setup()>
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
     c70:	ldrb	r3, [r4, #4]
     c72:	ldr	r4, [pc, #80]	; (cc4 <I2S_32::begin()+0xbc>)
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     c74:	movs	r1, #1
     c76:	ldr	r2, [pc, #80]	; (cc8 <I2S_32::begin()+0xc0>)
     c78:	strb	r0, [r4, #0]
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
     c7a:	add.w	r0, r3, #16
		DMA_SERQ = channel;
     c7e:	ldr	r4, [pc, #76]	; (ccc <I2S_32::begin()+0xc4>)
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     c80:	add.w	r2, r2, r3, lsr #5
		DMA_SERQ = channel;
     c84:	strb	r3, [r4, #27]
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     c86:	and.w	r3, r3, #31
     c8a:	lsls	r2, r2, #2
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
     c8c:	ldr	r4, [pc, #64]	; (cd0 <I2S_32::begin()+0xc8>)
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     c8e:	lsls	r1, r3
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
     c90:	ldr	r3, [pc, #64]	; (cd4 <I2S_32::begin()+0xcc>)
     c92:	str.w	r4, [r3, r0, lsl #2]
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     c96:	str	r1, [r2, #0]
}
     c98:	pop	{r3, r4, r5, pc}
     c9a:	nop
     c9c:	.word	0x200065bc
     ca0:	.word	0x401f8000
     ca4:	.word	0x401f8400
     ca8:	.word	0x02020000
     cac:	.word	0x403840a0
     cb0:	.word	0x20005c8c
     cb4:	.word	0x400ec000
     cb8:	.word	0x80000013
     cbc:	.word	0x40384000
     cc0:	.word	0x92000001
     cc4:	.word	0x2000815c
     cc8:	.word	0x38003840
     ccc:	.word	0x400e8000
     cd0:	.word	0x00000085
     cd4:	.word	0x20001c00

00000cd8 <AudioCompress::compress(void*)>:
int16_t tempData0[NCH];

uint32_t proc_stat[MB];

int AudioCompress::compress(void *inp)
{   
     cd8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     cdc:	sub	sp, #20
     cde:	mov	r4, r1
     ce0:	str	r0, [sp, #8]
  int ret=1;
  uint32_t to = rtc_get();
     ce2:	bl	ba80 <rtc_get>
     ce6:	mov	sl, r0
  uint32_t t1 = micros();
     ce8:	bl	b84c <micros>

  int16_t *din = (int16_t *) inp;
  //
  // copy reference (first sample of all channels)
  for (int  ii = 0; ii < NCH; ii++) tempData0[ii]=tempDatai[ii] = din[ii];
     cec:	ldr	r3, [pc, #704]	; (fb0 <AudioCompress::compress(void*)+0x2d8>)
     cee:	add.w	r6, r4, #254	; 0xfe
     cf2:	ldrsh.w	r2, [r4]
  uint32_t t1 = micros();
     cf6:	mov	r9, r0
  for (int  ii = 0; ii < NCH; ii++) tempData0[ii]=tempDatai[ii] = din[ii];
     cf8:	ldr	r5, [r3, #0]
     cfa:	mov	r3, r4
     cfc:	ldr	r1, [pc, #692]	; (fb4 <AudioCompress::compress(void*)+0x2dc>)
     cfe:	strh	r2, [r5, #0]
     d00:	mov	r4, r5
     d02:	strh	r2, [r1, #0]
  
  //differentiate (equiv 6 dB/Octave HP filter)
  for (int  ii = NCH; ii < NSAMP; ii++) tempDatai[ii] = (din[ii] - din[ii - NCH]);
     d04:	mov	r1, r5
     d06:	mov	r0, r3
     d08:	adds	r3, #2
     d0a:	ldrh	r2, [r0, #2]
     d0c:	cmp	r3, r6
     d0e:	ldrh	r0, [r0, #0]
     d10:	sub.w	r2, r2, r0
     d14:	strh.w	r2, [r4, #2]!
     d18:	bne.n	d06 <AudioCompress::compress(void*)+0x2e>
     d1a:	add.w	r0, r5, #254	; 0xfe

  // find maximum in filtered data
  int32_t mx = 0;
     d1e:	movs	r2, #0
  for (int ii = NCH; ii < NSAMP; ii++)
  {
    int32_t dd =  tempDatai[ii];
    if(dd<0)  dd = -dd;
    if(dd>mx) mx = dd;
     d20:	ldrsh.w	r3, [r1, #2]!
     d24:	cmp	r3, #0
     d26:	it	lt
     d28:	neglt	r3, r3
     d2a:	uxth	r3, r3
     d2c:	cmp	r2, r3
     d2e:	it	lt
     d30:	movlt	r2, r3
  for (int ii = NCH; ii < NSAMP; ii++)
     d32:	cmp	r0, r1
     d34:	bne.n	d20 <AudioCompress::compress(void*)+0x48>
  }

  // estimate mask (allow only values > 2)
    int nb;
    for(nb=2; nb<MB; nb++) if(mx < (1<<(nb-1))) break;
     d36:	movs	r7, #2
     d38:	movs	r1, #1
     d3a:	subs	r5, r7, #1
     d3c:	lsl.w	r3, r1, r5
     d40:	cmp	r3, r2
     d42:	bgt.w	f4c <AudioCompress::compress(void*)+0x274>
     d46:	adds	r7, #1
     d48:	cmp	r7, #16
     d4a:	bne.n	d3a <AudioCompress::compress(void*)+0x62>
     d4c:	ldr	r2, [pc, #616]	; (fb8 <AudioCompress::compress(void*)+0x2e0>)
     d4e:	mov.w	r8, #142	; 0x8e
     d52:	movs	r3, #129	; 0x81
     d54:	movw	r0, #65535	; 0xffff
     d58:	str	r2, [sp, #4]
     d5a:	movs	r5, #15
     d5c:	movs	r2, #141	; 0x8d
     d5e:	str	r2, [sp, #12]
    // compression factor (16/nb)
    
    proc_stat[nb-1]++;
     d60:	ldr	r1, [pc, #600]	; (fbc <AudioCompress::compress(void*)+0x2e4>)
     d62:	ldr	r4, [pc, #604]	; (fc0 <AudioCompress::compress(void*)+0x2e8>)
     d64:	ldr.w	r2, [r1, r5, lsl #2]
     d68:	add.w	r6, r4, #254	; 0xfe
     d6c:	mov	fp, r4
     d6e:	adds	r2, #1
     d70:	str.w	r2, [r1, r5, lsl #2]
     d74:	mov	r2, r4
    
  // mask data (all but first sample) (mask needed for negative numbers)
  uint32_t msk = (1 << nb) - 1;
  for (int ii = NCH; ii < NSAMP; ii++) { tempData[ii] &= (uint16_t)msk; }
     d76:	ldrh.w	r1, [r2, #2]!
     d7a:	ands	r1, r0
     d7c:	cmp	r2, r6
     d7e:	strh	r1, [r2, #0]
     d80:	bne.n	d76 <AudioCompress::compress(void*)+0x9e>

  // ensure that ndat is even (to allow fast access to header)
  ndat= ((ndat>>1) + 1)<<1;

    // clean data store
  for (int ii = 0; ii < NSAMP; ii++) outData[ii]=0;
     d82:	ldr	r5, [pc, #576]	; (fc4 <AudioCompress::compress(void*)+0x2ec>)
     d84:	movs	r2, #232	; 0xe8
     d86:	movs	r1, #0
     d88:	str	r3, [sp, #0]
     d8a:	add.w	r0, r5, #24
     d8e:	bl	e044 <memset>
  *iptr++ = t1;
  *iptr++ = NCH;
  *iptr++ = NCH+ncmp; // number of data after header
  //
  int kk=NH;
  outData[kk++] = tempData[0]; tempData[0] = 0;
     d92:	ldrh.w	r2, [fp]
  *iptr++ = nb | shift<<16;
     d96:	ldr	r3, [sp, #4]
  outData[kk++] = tempData[0]; tempData[0] = 0;
     d98:	movs	r1, #0
     d9a:	strh	r2, [r5, #24]
  *iptr++ = 0xA5A5A5A5;
     d9c:	mov.w	r2, #2779096485	; 0xa5a5a5a5

  // pack data
    // 
    int nx = NX;
     da0:	mov.w	ip, #16
  outData[kk++] = tempData[0]; tempData[0] = 0;
     da4:	movs	r0, #13
  *iptr++ = 0xA5A5A5A5;
     da6:	str	r2, [r5, #0]
  *iptr++ = NCH;
     da8:	movs	r2, #1
  *iptr++ = t1;
     daa:	str.w	r9, [r5, #12]
  outData[kk++] = tempData[0]; tempData[0] = 0;
     dae:	strh.w	r1, [fp]
  *iptr++ = NCH;
     db2:	str	r2, [r5, #16]
  *iptr++ = to;
     db4:	strd	r3, sl, [r5, #4]
  *iptr++ = NCH+ncmp; // number of data after header
     db8:	ldr	r3, [sp, #0]
     dba:	str	r3, [r5, #20]
     dbc:	b.n	dd4 <AudioCompress::compress(void*)+0xfc>
    for (int ii = 0; ii < NSAMP; ii ++)
    {   nx -= nb;
        if(nx > 0)
        {   outData[kk] |= (tempData[ii] << nx);
     dbe:	ldrh.w	r1, [r5, r0, lsl #1]
     dc2:	mov	ip, r2
     dc4:	orr.w	lr, lr, r1
     dc8:	strh.w	lr, [r5, r0, lsl #1]
    for (int ii = 0; ii < NSAMP; ii ++)
     dcc:	cmp	r4, r6
     dce:	beq.n	e02 <AudioCompress::compress(void*)+0x12a>
        {   outData[kk] |= (tempData[ii] << nx);
     dd0:	ldrh.w	r1, [r4, #2]!
    {   nx -= nb;
     dd4:	sub.w	r2, ip, r7
        if(nx > 0)
     dd8:	cmp	r2, #0
        {   outData[kk] |= (tempData[ii] << nx);
     dda:	lsl.w	lr, r1, r2
        if(nx > 0)
     dde:	bgt.n	dbe <AudioCompress::compress(void*)+0xe6>
        else if(nx==0) 
        {   outData[kk++] |= tempData[ii];
            nx=NX;
        } 
        else    // nx is < 0
        {   outData[kk++] |= (tempData[ii] >> (-nx));
     de0:	sub.w	lr, r7, ip
     de4:	add.w	r9, r0, #1
            nx += NX;
     de8:	add.w	ip, r2, #16
        {   outData[kk++] |= tempData[ii];
     dec:	ldrh.w	r2, [r5, r0, lsl #1]
        else if(nx==0) 
     df0:	bne.n	e52 <AudioCompress::compress(void*)+0x17a>
        {   outData[kk++] |= tempData[ii];
     df2:	orrs	r2, r1
    for (int ii = 0; ii < NSAMP; ii ++)
     df4:	cmp	r4, r6
            nx=NX;
     df6:	mov.w	ip, #16
        {   outData[kk++] |= tempData[ii];
     dfa:	strh.w	r2, [r5, r0, lsl #1]
     dfe:	mov	r0, r9
    for (int ii = 0; ii < NSAMP; ii ++)
     e00:	bne.n	dd0 <AudioCompress::compress(void*)+0xf8>
    }

    // store actual data
    static int nout=0;

    if ((nout + ndat) <= NBLOCK)
     e02:	ldr	r6, [pc, #452]	; (fc8 <AudioCompress::compress(void*)+0x2f0>)
     e04:	ldr	r4, [r6, #0]
     e06:	add.w	r2, r4, r8
     e0a:	cmp	r2, #128	; 0x80
     e0c:	bgt.n	e6a <AudioCompress::compress(void*)+0x192>
     e0e:	mvn.w	r3, #2147483648	; 0x80000000
     e12:	ldr	r2, [pc, #440]	; (fcc <AudioCompress::compress(void*)+0x2f4>)
     e14:	ldr	r0, [pc, #428]	; (fc4 <AudioCompress::compress(void*)+0x2ec>)
     e16:	movw	r1, #42405	; 0xa5a5
     e1a:	add	r3, r4
     e1c:	add.w	r2, r2, r3, lsl #1
    { // all data fit in current block
        for (int ii = 0; ii < ndat; ii++) dout[nout++] = outData[ii];
     e20:	movs	r3, #0
     e22:	b.n	e28 <AudioCompress::compress(void*)+0x150>
     e24:	ldrh.w	r1, [r0, #2]!
     e28:	adds	r3, #1
     e2a:	strh.w	r1, [r2, #2]!
     e2e:	cmp	r3, r8
     e30:	blt.n	e24 <AudioCompress::compress(void*)+0x14c>
     e32:	cmp.w	r8, #0
     e36:	add.w	r3, r8, #4294967295
     e3a:	add.w	r4, r4, #1
  int ret=1;
     e3e:	mov.w	r7, #1
        for (int ii = 0; ii < ndat; ii++) dout[nout++] = outData[ii];
     e42:	it	le
     e44:	movle	r3, #0
     e46:	add	r3, r4
     e48:	str	r3, [r6, #0]
        for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
        // followed by rest of data
        while (ii < ndat) dout[nout++] = outData[ii++];
    }
    return ret;
}
     e4a:	mov	r0, r7
     e4c:	add	sp, #20
     e4e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        {   outData[kk++] |= (tempData[ii] >> (-nx));
     e52:	asr.w	lr, r1, lr
            outData[kk] = (tempData[ii] << nx);
     e56:	lsl.w	r1, r1, ip
        {   outData[kk++] |= (tempData[ii] >> (-nx));
     e5a:	orr.w	lr, lr, r2
     e5e:	strh.w	lr, [r5, r0, lsl #1]
     e62:	mov	r0, r9
            outData[kk] = (tempData[ii] << nx);
     e64:	strh.w	r1, [r5, r9, lsl #1]
     e68:	b.n	dcc <AudioCompress::compress(void*)+0xf4>
    else if ((nout + NH) > NBLOCK) //avoid partial header (special case)
     e6a:	cmp	r4, #116	; 0x74
     e6c:	ble.n	eb2 <AudioCompress::compress(void*)+0x1da>
        while(nout<NBLOCK) dout[nout++] = 0; // fill rest of block with zero
     e6e:	cmp	r4, #127	; 0x7f
     e70:	bgt.n	e88 <AudioCompress::compress(void*)+0x1b0>
     e72:	rsb	r2, r4, #128	; 0x80
     e76:	ldr	r0, [pc, #340]	; (fcc <AudioCompress::compress(void*)+0x2f4>)
     e78:	movs	r1, #0
     e7a:	lsls	r2, r2, #1
     e7c:	add.w	r0, r0, r4, lsl #1
     e80:	bl	e044 <memset>
     e84:	movs	r3, #128	; 0x80
     e86:	str	r3, [r6, #0]
  outputBlock=allocate();
     e88:	bl	c578 <AudioStream::allocate()>
  if(outputBlock)
     e8c:	mov	r7, r0
     e8e:	cmp	r0, #0
     e90:	bne.n	f8e <AudioCompress::compress(void*)+0x2b6>
        for (int ii=0; ii < ndat; ii++) dout[nout++] = outData[ii];
     e92:	cmp.w	r8, #0
     e96:	mov.w	r2, r8, lsl #1
     e9a:	ldr	r1, [pc, #296]	; (fc4 <AudioCompress::compress(void*)+0x2ec>)
     e9c:	it	le
     e9e:	movle	r2, #2
     ea0:	ldr	r0, [pc, #296]	; (fcc <AudioCompress::compress(void*)+0x2f4>)
     ea2:	bl	a0a4 <memcpy>
}
     ea6:	mov	r0, r7
     ea8:	str.w	r8, [r6]
     eac:	add	sp, #20
     eae:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        iptr[5] = (iptr[5]<<16) | (nr-NH);  //orig remaining data | actual remaining data after header 
     eb2:	rsb	r2, r4, #116	; 0x74
     eb6:	ldr	r0, [pc, #276]	; (fcc <AudioCompress::compress(void*)+0x2f4>)
     eb8:	orr.w	r3, r2, r3, lsl #16
     ebc:	movw	r2, #42405	; 0xa5a5
     ec0:	str	r3, [r5, #20]
        while (nout < NBLOCK) dout[nout++] = outData[ii++];
     ec2:	mvn.w	r3, #2147483648	; 0x80000000
     ec6:	ldr	r5, [pc, #252]	; (fc4 <AudioCompress::compress(void*)+0x2ec>)
     ec8:	add	r3, r4
     eca:	mov	r1, r5
     ecc:	add.w	r3, r0, r3, lsl #1
     ed0:	adds	r0, #254	; 0xfe
     ed2:	b.n	ed8 <AudioCompress::compress(void*)+0x200>
     ed4:	ldrh.w	r2, [r1, #2]!
     ed8:	strh.w	r2, [r3, #2]!
     edc:	cmp	r0, r3
     ede:	bne.n	ed4 <AudioCompress::compress(void*)+0x1fc>
     ee0:	movs	r3, #128	; 0x80
     ee2:	rsb	r9, r4, #128	; 0x80
     ee6:	str	r3, [r6, #0]
  outputBlock=allocate();
     ee8:	bl	c578 <AudioStream::allocate()>
  if(outputBlock)
     eec:	mov	r7, r0
     eee:	cmp	r0, #0
     ef0:	bne.n	f6e <AudioCompress::compress(void*)+0x296>
        iptr[5]=(iptr[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
     ef2:	ldr	r1, [r5, #20]
        while (ii < ndat) dout[nout++] = outData[ii++];
     ef4:	cmp	r9, r8
        nr=ndat0-ii; // for header
     ef6:	ldr	r3, [sp, #12]
        iptr[5]=(iptr[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
     ef8:	ldr	r2, [pc, #212]	; (fd0 <AudioCompress::compress(void*)+0x2f8>)
        nr=ndat0-ii; // for header
     efa:	sub.w	r3, r3, r9
        for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
     efe:	ldr.w	lr, [pc, #196]	; fc4 <AudioCompress::compress(void*)+0x2ec>
        iptr[5]=(iptr[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
     f02:	and.w	r2, r2, r1
        for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
     f06:	ldr.w	ip, [pc, #196]	; fcc <AudioCompress::compress(void*)+0x2f4>
        iptr[5]=(iptr[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
     f0a:	orr.w	r2, r2, r3
     f0e:	mov.w	r3, #12
     f12:	str	r2, [r5, #20]
        for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
     f14:	str	r3, [r6, #0]
     f16:	ldmia.w	lr!, {r0, r1, r2, r3}
     f1a:	stmia.w	ip!, {r0, r1, r2, r3}
     f1e:	ldmia.w	lr, {r0, r1}
     f22:	stmia.w	ip, {r0, r1}
        while (ii < ndat) dout[nout++] = outData[ii++];
     f26:	bge.n	e4a <AudioCompress::compress(void*)+0x172>
     f28:	sub.w	r2, r4, #128	; 0x80
     f2c:	add.w	r1, r5, r9, lsl #1
     f30:	add.w	r0, ip, #8
     f34:	add	r2, r8
     f36:	lsls	r2, r2, #1
     f38:	bl	a0a4 <memcpy>
     f3c:	sub.w	r3, r4, #116	; 0x74
}
     f40:	mov	r0, r7
        while (ii < ndat) dout[nout++] = outData[ii++];
     f42:	add	r3, r8
     f44:	str	r3, [r6, #0]
}
     f46:	add	sp, #20
     f48:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  int ncmp = (NSAMP*nb) / NX;
     f4c:	mov.w	r8, r7, lsl #3
  *iptr++ = nb | shift<<16;
     f50:	orr.w	r3, r7, #917504	; 0xe0000
  uint32_t msk = (1 << nb) - 1;
     f54:	lsl.w	r0, r1, r7
  *iptr++ = nb | shift<<16;
     f58:	str	r3, [sp, #4]
  int ndat = NH+NCH + ncmp;
     f5a:	add.w	r3, r8, #13
  uint32_t msk = (1 << nb) - 1;
     f5e:	subs	r0, #1
  int ndat = NH+NCH + ncmp;
     f60:	str	r3, [sp, #12]
  *iptr++ = NCH+ncmp; // number of data after header
     f62:	add.w	r3, r8, #1
  for (int ii = NCH; ii < NSAMP; ii++) { tempData[ii] &= (uint16_t)msk; }
     f66:	uxth	r0, r0
  ndat= ((ndat>>1) + 1)<<1;
     f68:	add.w	r8, r8, #14
     f6c:	b.n	d60 <AudioCompress::compress(void*)+0x88>
    memcpy(outputBlock->data,src,2*NSAMP);
     f6e:	mov.w	r2, #256	; 0x100
     f72:	ldr	r1, [pc, #88]	; (fcc <AudioCompress::compress(void*)+0x2f4>)
     f74:	adds	r0, #4
     f76:	bl	a0a4 <memcpy>
    transmit(outputBlock);
     f7a:	mov	r1, r7
     f7c:	ldr	r0, [sp, #8]
     f7e:	movs	r2, #0
     f80:	bl	c674 <AudioStream::transmit(audio_block_struct*, unsigned char)>
    release(outputBlock);
     f84:	mov	r0, r7
     f86:	bl	c624 <AudioStream::release(audio_block_struct*)>
  int ret=1;
     f8a:	movs	r7, #1
     f8c:	b.n	ef2 <AudioCompress::compress(void*)+0x21a>
    memcpy(outputBlock->data,src,2*NSAMP);
     f8e:	mov.w	r2, #256	; 0x100
     f92:	ldr	r1, [pc, #56]	; (fcc <AudioCompress::compress(void*)+0x2f4>)
     f94:	adds	r0, #4
     f96:	bl	a0a4 <memcpy>
    transmit(outputBlock);
     f9a:	ldr	r0, [sp, #8]
     f9c:	mov	r1, r7
     f9e:	movs	r2, #0
     fa0:	bl	c674 <AudioStream::transmit(audio_block_struct*, unsigned char)>
    release(outputBlock);
     fa4:	mov	r0, r7
  int ret=1;
     fa6:	movs	r7, #1
    release(outputBlock);
     fa8:	bl	c624 <AudioStream::release(audio_block_struct*)>
    return 1;
     fac:	b.n	e92 <AudioCompress::compress(void*)+0x1ba>
     fae:	nop
     fb0:	.word	0x20001a34
     fb4:	.word	0x200080ec
     fb8:	.word	0x000e0010
     fbc:	.word	0x20007cc8
     fc0:	.word	0x200062fc
     fc4:	.word	0x200061fc
     fc8:	.word	0x200065d4
     fcc:	.word	0x2000608c
     fd0:	.word	0xffff0000

00000fd4 <AudioCompress::update()>:
{ int ret=0;
     fd4:	push	{r3, r4, r5, lr}
  block_in=receiveReadOnly(0);
     fd6:	movs	r1, #0
{ int ret=0;
     fd8:	mov	r5, r0
  block_in=receiveReadOnly(0);
     fda:	bl	c6bc <AudioStream::receiveReadOnly(unsigned int)>
  if(block_in) 
     fde:	cbz	r0, ff4 <AudioCompress::update()+0x20>
    ret=compress(block_in->data);
     fe0:	mov	r4, r0
     fe2:	adds	r1, r0, #4
     fe4:	mov	r0, r5
     fe6:	bl	cd8 <AudioCompress::compress(void*)>
    release(block_in);
     fea:	mov	r0, r4
}
     fec:	ldmia.w	sp!, {r3, r4, r5, lr}
    release(block_in);
     ff0:	b.w	c624 <AudioStream::release(audio_block_struct*)>
}
     ff4:	pop	{r3, r4, r5, pc}
     ff6:	nop

00000ff8 <newDirectory(char*)>:
#else
  uint32_t getTeensySerial(void)  { return 0;}
#endif

int16_t newDirectory(char *dirName)
{ if(newHour())
     ff8:	push	{r4, r5, lr}
     ffa:	sub	sp, #28
     ffc:	mov	r4, r0
{   uint32_t tx=rtc_get();
     ffe:	bl	ba80 <rtc_get>
    int32_t h_ = (int32_t) tx/SECS_PER_HOUR;  // use hours since 1970 as measures
    1002:	ldr	r3, [pc, #116]	; (1078 <newDirectory(char*)+0x80>)
{   uint32_t tx=rtc_get();
    1004:	mov	r2, r0
    if(hour_== h_) return 0;
    1006:	ldr	r5, [pc, #116]	; (107c <newDirectory(char*)+0x84>)
    int32_t h_ = (int32_t) tx/SECS_PER_HOUR;  // use hours since 1970 as measures
    1008:	smull	r1, r3, r3, r2
    100c:	asrs	r1, r2, #31
    if(hour_== h_) return 0;
    100e:	ldr	r0, [r5, #0]
    int32_t h_ = (int32_t) tx/SECS_PER_HOUR;  // use hours since 1970 as measures
    1010:	add	r3, r2
    1012:	rsb	r3, r1, r3, asr #11
    if(hour_== h_) return 0;
    1016:	cmp	r3, r0
    1018:	beq.n	1070 <newDirectory(char*)+0x78>
    hour_ = h_;
    101a:	str	r3, [r5, #0]
    {   
        tmElements_t tm;
        breakTime(rtc_get(), tm);
    101c:	bl	ba80 <rtc_get>
    1020:	add	r2, sp, #16
    1022:	movs	r1, #0
    1024:	bl	2094 <breakTime(long long, tmElements_t&)>
        sprintf(dirName, "/%s%06x_%04d%02d%02d/%02d/", 
                      DirPrefix,(unsigned int)SerNum,
                              tmYearToCalendar(tm.Year),tm.Month, tm.Day, tm.Hour);
    1028:	ldrb.w	r2, [sp, #22]
        sprintf(dirName, "/%s%06x_%04d%02d%02d/%02d/", 
    102c:	ldrb.w	r1, [sp, #20]
    1030:	ldrb.w	r0, [sp, #21]
    1034:	addw	r2, r2, #1970	; 0x7b2
    1038:	ldrb.w	r5, [sp, #18]
    103c:	ldr	r3, [pc, #64]	; (1080 <newDirectory(char*)+0x88>)
    103e:	strd	r1, r5, [sp, #8]
    1042:	ldr	r3, [r3, #0]
    1044:	ldr	r1, [pc, #60]	; (1084 <newDirectory(char*)+0x8c>)
    1046:	strd	r2, r0, [sp]
    104a:	ldr	r2, [pc, #60]	; (1088 <newDirectory(char*)+0x90>)
    104c:	mov	r0, r4
    104e:	ldr	r2, [r2, #0]
    1050:	bl	dd54 <sprintf>
	// Discard all received data which has not been read.
        virtual void clear(void) { usb_serial_flush_input(); }
	// Transmit a single byte to your PC
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
	// Transmit a buffer containing any number of bytes to your PC
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    1054:	movs	r1, #1
    1056:	ldr	r0, [pc, #52]	; (108c <newDirectory(char*)+0x94>)
    1058:	bl	a81c <usb_serial_write>
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    105c:	mov	r0, r4
    105e:	bl	e3c0 <strlen>
    1062:	mov	r1, r0
    1064:	mov	r0, r4
    1066:	bl	a81c <usb_serial_write>
        //
        Serial.print("\n"); Serial.print(dirName);
        return 1;
    106a:	movs	r0, #1
    }
    return 0;
}
    106c:	add	sp, #28
    106e:	pop	{r4, r5, pc}
    return 0;
    1070:	movs	r0, #0
}
    1072:	add	sp, #28
    1074:	pop	{r4, r5, pc}
    1076:	nop
    1078:	.word	0x91a2b3c5
    107c:	.word	0x20007c40
    1080:	.word	0x200058c0
    1084:	.word	0x200004f8
    1088:	.word	0x20001450
    108c:	.word	0x200007a0

00001090 <newFileName(char*)>:

int16_t newFileName(char *fileName)
{
    1090:	push	{r4, r5, lr}
    1092:	sub	sp, #44	; 0x2c
    1094:	mov	r4, r0
    tmElements_t tm;
    breakTime(rtc_get(), tm);
    1096:	bl	ba80 <rtc_get>
    109a:	movs	r1, #0
    109c:	add	r2, sp, #32
    109e:	bl	2094 <breakTime(long long, tmElements_t&)>
    
    sprintf(fileName, "/%s%06x_%04d%02d%02d/%02d/%s_%02d%02d%02d.bin", 
    10a2:	ldrb.w	r0, [sp, #33]	; 0x21
    10a6:	ldr	r3, [pc, #96]	; (1108 <newFileName(char*)+0x78>)
    10a8:	str	r0, [sp, #24]
    10aa:	ldr	r0, [r3, #0]
    10ac:	ldrb.w	r1, [sp, #34]	; 0x22
    10b0:	str	r0, [sp, #16]
    10b2:	ldrb.w	r5, [sp, #32]
    10b6:	ldrb.w	r0, [sp, #36]	; 0x24
            DirPrefix,(unsigned int)SerNum,
                      tmYearToCalendar(tm.Year),tm.Month, tm.Day, tm.Hour, 
    10ba:	ldrb.w	r2, [sp, #38]	; 0x26
    sprintf(fileName, "/%s%06x_%04d%02d%02d/%02d/%s_%02d%02d%02d.bin", 
    10be:	ldr	r3, [pc, #76]	; (110c <newFileName(char*)+0x7c>)
    10c0:	str	r5, [sp, #28]
    10c2:	addw	r2, r2, #1970	; 0x7b2
    10c6:	ldr	r3, [r3, #0]
    10c8:	str	r1, [sp, #20]
    10ca:	strd	r0, r1, [sp, #8]
    10ce:	ldrb.w	r0, [sp, #37]	; 0x25
    10d2:	ldr	r1, [pc, #60]	; (1110 <newFileName(char*)+0x80>)
    10d4:	strd	r2, r0, [sp]
    10d8:	ldr	r2, [pc, #56]	; (1114 <newFileName(char*)+0x84>)
    10da:	mov	r0, r4
    10dc:	ldr	r2, [r2, #0]
    10de:	bl	dd54 <sprintf>
    10e2:	movs	r1, #1
    10e4:	ldr	r0, [pc, #48]	; (1118 <newFileName(char*)+0x88>)
    10e6:	bl	a81c <usb_serial_write>
    10ea:	movs	r1, #2
    10ec:	ldr	r0, [pc, #44]	; (111c <newFileName(char*)+0x8c>)
    10ee:	bl	a81c <usb_serial_write>
    10f2:	mov	r0, r4
    10f4:	bl	e3c0 <strlen>
    10f8:	mov	r1, r0
    10fa:	mov	r0, r4
    10fc:	bl	a81c <usb_serial_write>
                      FilePrefix, tm.Hour, tm.Minute, tm.Second);
    //
    Serial.print("\n"); Serial.print(": ");Serial.print(fileName);
    return 1;
}
    1100:	movs	r0, #1
    1102:	add	sp, #44	; 0x2c
    1104:	pop	{r4, r5, pc}
    1106:	nop
    1108:	.word	0x2000145c
    110c:	.word	0x200058c0
    1110:	.word	0x200004c4
    1114:	.word	0x20001450
    1118:	.word	0x200007a0
    111c:	.word	0x200004f4

00001120 <makeHeader(char*)>:

int16_t makeHeader(char *header)
{
    1120:	push	{r4, r5, lr}
     * @param header is pointer to header
     * 
     */
    #define MAGIC "WMXZ"
    tmElements_t tm;
    breakTime(rtc_get(), tm);
    1122:	movs	r5, #0
{
    1124:	sub	sp, #36	; 0x24
    1126:	mov	r4, r0
    breakTime(rtc_get(), tm);
    1128:	bl	ba80 <rtc_get>
    112c:	add	r2, sp, #24
    112e:	mov	r1, r5
    1130:	bl	2094 <breakTime(long long, tmElements_t&)>

    int nd=sprintf(header,"%s%04d%02d%02d_%02d%02d%02d",
    1134:	ldrb.w	r1, [sp, #24]
    1138:	ldrb.w	r2, [sp, #25]
    113c:	mov	r0, r4
            MAGIC,tmYearToCalendar(tm.Year),tm.Month,tm.Day,tm.Hour,tm.Minute,tm.Second);
    113e:	ldrb.w	r3, [sp, #30]
    int nd=sprintf(header,"%s%04d%02d%02d_%02d%02d%02d",
    1142:	strd	r2, r1, [sp, #12]
    1146:	ldrb.w	r1, [sp, #26]
    114a:	addw	r3, r3, #1970	; 0x7b2
    114e:	ldrb.w	r2, [sp, #28]
    1152:	strd	r2, r1, [sp, #4]
    1156:	ldrb.w	r1, [sp, #29]
    115a:	ldr	r2, [pc, #64]	; (119c <makeHeader(char*)+0x7c>)
    115c:	str	r1, [sp, #0]
    115e:	ldr	r1, [pc, #64]	; (11a0 <makeHeader(char*)+0x80>)
    1160:	bl	dd54 <sprintf>
    char *ptr = header+(nd+1);
    int32_t *iptr = (int32_t *) ptr;
    //float *fptr = (float *) ptr;
    
    // to be filled in
    iptr[0] = 10;                   // SW version
    1164:	movs	r1, #10
    char *ptr = header+(nd+1);
    1166:	adds	r3, r0, #1
    iptr[1] = (int32_t)SerNum;      // serial number
    1168:	ldr	r2, [pc, #56]	; (11a4 <makeHeader(char*)+0x84>)
    iptr[3] = nch;
    iptr[4] = t_acq;
    iptr[5] = t_on;
    iptr[6] = t_off;
    iptr[7] = DO_COMPRESS;
    iptr[8] = shift;
    116a:	movs	r0, #14
    iptr[0] = 10;                   // SW version
    116c:	str	r1, [r4, r3]
    char *ptr = header+(nd+1);
    116e:	add	r3, r4
    iptr[1] = (int32_t)SerNum;      // serial number
    1170:	ldr	r1, [r2, #0]

    uint32_t *uptr = (uint32_t*) header;
    uptr[127] = 0x55555555;
    1172:	mov.w	r2, #1431655765	; 0x55555555
    iptr[8] = shift;
    1176:	str	r0, [r3, #32]
    iptr[3] = nch;
    1178:	movs	r0, #1
    iptr[1] = (int32_t)SerNum;      // serial number
    117a:	str	r1, [r3, #4]
    iptr[2] = fsamp;
    117c:	movw	r1, #44100	; 0xac44
    iptr[6] = t_off;
    1180:	str	r5, [r3, #24]
    iptr[2] = fsamp;
    1182:	str	r1, [r3, #8]
    iptr[4] = t_acq;
    1184:	movs	r1, #60	; 0x3c
    iptr[3] = nch;
    1186:	str	r0, [r3, #12]
    iptr[4] = t_acq;
    1188:	str	r1, [r3, #16]
    iptr[5] = t_on;
    118a:	mov.w	r1, #300	; 0x12c
    iptr[7] = DO_COMPRESS;
    118e:	str	r0, [r3, #28]
    iptr[5] = t_on;
    1190:	str	r1, [r3, #20]
    uptr[127] = 0x55555555;
    1192:	str.w	r2, [r4, #508]	; 0x1fc
    //
    return 1;
}
    1196:	add	sp, #36	; 0x24
    1198:	pop	{r4, r5, pc}
    119a:	nop
    119c:	.word	0x20000470
    11a0:	.word	0x20000478
    11a4:	.word	0x200058c0

000011a8 <storeData(int) [clone .part.0]>:
      break;
    }
  }
}

int16_t storeData(int status)
    11a8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    11ac:	sub	sp, #80	; 0x50
{
  int32_t nbuf=sizeof(diskBuffer);

  if(!haveSD) return status;

  switch(status)
    11ae:	cmp	r0, #5
    11b0:	bhi.w	1420 <storeData(int) [clone .part.0]+0x278>
    11b4:	tbh	[pc, r0, lsl #1]
    11b8:	.word	0x00960060
    11bc:	.word	0x00db00bb
    11c0:	.word	0x00060006
		if (f) {
    11c4:	ldr	r5, [pc, #612]	; (142c <storeData(int) [clone .part.0]+0x284>)
    11c6:	ldr	r4, [r5, #16]
    11c8:	cmp	r4, #0
    11ca:	beq.w	1420 <storeData(int) [clone .part.0]+0x278>
			f->close();
    11ce:	ldr	r3, [r4, #0]
    11d0:	ldr	r6, [pc, #604]	; (1430 <storeData(int) [clone .part.0]+0x288>)
    11d2:	ldr	r3, [r3, #44]	; 0x2c
    11d4:	cmp	r3, r6
    11d6:	bne.w	16c2 <storeData(int) [clone .part.0]+0x51a>
		if (filename) {
    11da:	ldr	r0, [r4, #88]	; 0x58
    11dc:	cbz	r0, 11e6 <storeData(int) [clone .part.0]+0x3e>
			free(filename);
    11de:	bl	d220 <free>
			filename = nullptr;
    11e2:	movs	r3, #0
    11e4:	str	r3, [r4, #88]	; 0x58
    11e6:	ldr	r3, [r4, #80]	; 0x50
    11e8:	cmp	r3, #0
    11ea:	beq.w	1678 <storeData(int) [clone .part.0]+0x4d0>
			sdfatfile.close();
    11ee:	add.w	r0, r4, #24
    11f2:	bl	775c <FsBaseFile::close()>
		if (--(f->refcount) == 0) {
    11f6:	ldr	r7, [r5, #16]
    11f8:	ldr	r4, [r7, #4]
    11fa:	subs	r4, #1
    11fc:	str	r4, [r7, #4]
    11fe:	cmp	r4, #0
    1200:	bne.n	126a <storeData(int) [clone .part.0]+0xc2>
			f->close();
    1202:	ldr	r3, [r7, #0]
    1204:	ldr	r3, [r3, #44]	; 0x2c
    1206:	cmp	r3, r6
    1208:	bne.w	16e4 <storeData(int) [clone .part.0]+0x53c>
		if (filename) {
    120c:	ldr	r0, [r7, #88]	; 0x58
    120e:	cbz	r0, 1216 <storeData(int) [clone .part.0]+0x6e>
			free(filename);
    1210:	bl	d220 <free>
			filename = nullptr;
    1214:	str	r4, [r7, #88]	; 0x58
    1216:	ldr	r3, [r7, #80]	; 0x50
    1218:	cmp	r3, #0
    121a:	beq.w	16c8 <storeData(int) [clone .part.0]+0x520>
			sdfatfile.close();
    121e:	add.w	r0, r7, #24
    1222:	bl	775c <FsBaseFile::close()>
			delete f;
    1226:	ldr	r4, [r5, #16]
    1228:	cbz	r4, 126a <storeData(int) [clone .part.0]+0xc2>
    122a:	ldr	r3, [r4, #0]
    122c:	ldr	r2, [pc, #516]	; (1434 <storeData(int) [clone .part.0]+0x28c>)
    122e:	ldr	r3, [r3, #4]
    1230:	cmp	r3, r2
    1232:	bne.w	1712 <storeData(int) [clone .part.0]+0x56a>
	virtual ~SDFile(void) {
    1236:	ldr	r3, [pc, #512]	; (1438 <storeData(int) [clone .part.0]+0x290>)
		if (filename) {
    1238:	ldr	r0, [r4, #88]	; 0x58
	virtual ~SDFile(void) {
    123a:	str	r3, [r4, #0]
		if (filename) {
    123c:	cbz	r0, 1246 <storeData(int) [clone .part.0]+0x9e>
			free(filename);
    123e:	bl	d220 <free>
			filename = nullptr;
    1242:	movs	r3, #0
    1244:	str	r3, [r4, #88]	; 0x58
    1246:	ldr	r3, [r4, #80]	; 0x50
			sdfatfile.close();
    1248:	add.w	r6, r4, #24
    124c:	cmp	r3, #0
    124e:	beq.w	1668 <storeData(int) [clone .part.0]+0x4c0>
    1252:	mov	r0, r6
    1254:	bl	775c <FsBaseFile::close()>
    1258:	ldr	r3, [pc, #480]	; (143c <storeData(int) [clone .part.0]+0x294>)
  ~FsBaseFile() { close(); }
    125a:	mov	r0, r6
    125c:	str	r3, [r4, #8]
    125e:	bl	775c <FsBaseFile::close()>
	}
    1262:	movs	r1, #92	; 0x5c
    1264:	mov	r0, r4
    1266:	bl	d07c <operator delete(void*, unsigned int)>
		}
		f = nullptr;
    126a:	movs	r3, #0
	}
    126c:	mov.w	r0, #4294967295
		f = nullptr;
    1270:	str	r3, [r5, #16]
          break;
    default:
          status=-1;
  }
  return status;
}
    1272:	add	sp, #80	; 0x50
    1274:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          if(newDirectory(dirName)) 
    1278:	ldr	r0, [pc, #452]	; (1440 <storeData(int) [clone .part.0]+0x298>)
    127a:	bl	ff8 <newDirectory(char*)>
    127e:	cmp	r0, #0
    1280:	beq.w	1482 <storeData(int) [clone .part.0]+0x2da>
   * \param[in] path Path of the file to be tested for.
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    return m_fVol   ? m_fVol->exists(path)
    1284:	ldr	r4, [pc, #444]	; (1444 <storeData(int) [clone .part.0]+0x29c>)
    1286:	ldr.w	r2, [r4, #1156]	; 0x484
    128a:	cmp	r2, #0
    128c:	beq.w	1464 <storeData(int) [clone .part.0]+0x2bc>
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile tmp;
    return tmp.open(this, path, O_RDONLY);
    1290:	mov	r5, sp
  FatFile() {}
    1292:	movs	r3, #0
    1294:	mov	r1, r2
    1296:	ldr	r2, [pc, #424]	; (1440 <storeData(int) [clone .part.0]+0x298>)
    1298:	mov	r0, r5
    129a:	str	r3, [sp, #0]
    129c:	bl	6004 <FatFile::open(FatVolume*, char const*, int)>
          {   if( !SD.exists(dirName) && 
    12a0:	cmp	r0, #0
    12a2:	bne.w	1482 <storeData(int) [clone .part.0]+0x2da>
   * \param[in] pFlag Create missing parent directories if true.
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char* path, bool pFlag = true) {
    return m_fVol   ? m_fVol->mkdir(path, pFlag)
    12a6:	ldr.w	r6, [r4, #1156]	; 0x484
    12aa:	cmp	r6, #0
    12ac:	beq.w	17a6 <storeData(int) [clone .part.0]+0x5fe>
    12b0:	movs	r4, #0
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char* path, bool pFlag = true) {
    FatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
    12b2:	movs	r3, #1
    12b4:	ldr	r2, [pc, #392]	; (1440 <storeData(int) [clone .part.0]+0x298>)
    12b6:	addw	r1, r6, #1092	; 0x444
    12ba:	mov	r0, r5
    12bc:	str	r4, [sp, #0]
    12be:	bl	5e28 <FatFile::mkdir(FatFile*, char const*, bool)>
    12c2:	cmp	r0, #0
    12c4:	bne.w	1482 <storeData(int) [clone .part.0]+0x2da>
{ Serial.println();
    12c8:	ldr	r0, [pc, #380]	; (1448 <storeData(int) [clone .part.0]+0x2a0>)
    12ca:	bl	d02c <Print::println()>
    12ce:	movs	r2, #9
    12d0:	ldr	r1, [pc, #376]	; (144c <storeData(int) [clone .part.0]+0x2a4>)
    12d2:	ldr	r0, [pc, #372]	; (1448 <storeData(int) [clone .part.0]+0x2a0>)
    12d4:	bl	c390 <usb_serial_class::write(unsigned char const*, unsigned int)>
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
    12d8:	ldr	r0, [pc, #364]	; (1448 <storeData(int) [clone .part.0]+0x2a0>)
    12da:	bl	d02c <Print::println()>
                  !SD.mkdir(dirName)) return ErrorMsg("Error Dir");
    12de:	mov.w	r0, #4294967295
    12e2:	b.n	1424 <storeData(int) [clone .part.0]+0x27c>
          makeHeader(header);
    12e4:	ldr	r0, [pc, #360]	; (1450 <storeData(int) [clone .part.0]+0x2a8>)
    12e6:	bl	1120 <makeHeader(char*)>
          if(file.write((const void*)header,512) < 512) return ErrorMsg("Error Header");
    12ea:	ldr	r3, [pc, #320]	; (142c <storeData(int) [clone .part.0]+0x284>)
    12ec:	ldr	r3, [r3, #16]
		return (f) ? f->write(buf, size) : 0;
    12ee:	cbz	r3, 1314 <storeData(int) [clone .part.0]+0x16c>
    12f0:	ldr	r1, [r3, #0]
    12f2:	ldr	r2, [pc, #352]	; (1454 <storeData(int) [clone .part.0]+0x2ac>)
    12f4:	ldr	r4, [r1, #12]
    12f6:	cmp	r4, r2
    12f8:	bne.w	16ea <storeData(int) [clone .part.0]+0x542>
    return m_fFile   ? m_fFile->write(buf, count)
    12fc:	ldr	r0, [r3, #80]	; 0x50
    12fe:	cmp	r0, #0
    1300:	beq.w	15b8 <storeData(int) [clone .part.0]+0x410>
    1304:	mov.w	r2, #512	; 0x200
    1308:	ldr	r1, [pc, #324]	; (1450 <storeData(int) [clone .part.0]+0x2a8>)
    130a:	bl	68f4 <FatFile::write(void const*, unsigned int)>
    130e:	cmp.w	r0, #512	; 0x200
    1312:	bcs.n	1366 <storeData(int) [clone .part.0]+0x1be>
{ Serial.println();
    1314:	ldr	r0, [pc, #304]	; (1448 <storeData(int) [clone .part.0]+0x2a0>)
    1316:	bl	d02c <Print::println()>
    131a:	movs	r1, #12
    131c:	ldr	r0, [pc, #312]	; (1458 <storeData(int) [clone .part.0]+0x2b0>)
    131e:	bl	a81c <usb_serial_write>
    1322:	ldr	r0, [pc, #292]	; (1448 <storeData(int) [clone .part.0]+0x2a0>)
    1324:	bl	d02c <Print::println()>
          if(file.write((const void*)header,512) < 512) return ErrorMsg("Error Header");
    1328:	mov.w	r0, #4294967295
    132c:	b.n	1424 <storeData(int) [clone .part.0]+0x27c>
          disk_count++;
    132e:	ldr	r2, [pc, #300]	; (145c <storeData(int) [clone .part.0]+0x2b4>)
    1330:	ldr	r1, [pc, #248]	; (142c <storeData(int) [clone .part.0]+0x284>)
    1332:	ldr	r3, [r2, #0]
    1334:	ldr	r4, [r1, #16]
    1336:	adds	r3, #1
    1338:	str	r3, [r2, #0]
    133a:	cmp	r4, #0
    133c:	beq.w	159e <storeData(int) [clone .part.0]+0x3f6>
    1340:	ldr	r3, [r4, #0]
    1342:	ldr	r2, [pc, #272]	; (1454 <storeData(int) [clone .part.0]+0x2ac>)
    1344:	ldr	r3, [r3, #12]
    1346:	cmp	r3, r2
    1348:	bne.w	16fc <storeData(int) [clone .part.0]+0x554>
    134c:	ldr	r0, [r4, #80]	; 0x50
    134e:	cmp	r0, #0
    1350:	beq.w	15cc <storeData(int) [clone .part.0]+0x424>
    1354:	mov.w	r2, #4096	; 0x1000
    1358:	ldr	r1, [pc, #260]	; (1460 <storeData(int) [clone .part.0]+0x2b8>)
    135a:	bl	68f4 <FatFile::write(void const*, unsigned int)>
          if(file.write((const void *)diskBuffer, nbuf) < (size_t) nbuf) return ErrorMsg("Error Data");
    135e:	cmp.w	r0, #4096	; 0x1000
    1362:	bcc.w	159e <storeData(int) [clone .part.0]+0x3f6>
  switch(status)
    1366:	movs	r0, #2
}
    1368:	add	sp, #80	; 0x50
    136a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (f) {
    136e:	ldr	r5, [pc, #188]	; (142c <storeData(int) [clone .part.0]+0x284>)
    1370:	ldr	r4, [r5, #16]
    1372:	cmp	r4, #0
    1374:	beq.w	1686 <storeData(int) [clone .part.0]+0x4de>
			f->close();
    1378:	ldr	r3, [r4, #0]
    137a:	ldr	r6, [pc, #180]	; (1430 <storeData(int) [clone .part.0]+0x288>)
    137c:	ldr	r3, [r3, #44]	; 0x2c
    137e:	cmp	r3, r6
    1380:	bne.w	16f6 <storeData(int) [clone .part.0]+0x54e>
		if (filename) {
    1384:	ldr	r0, [r4, #88]	; 0x58
    1386:	cbz	r0, 1390 <storeData(int) [clone .part.0]+0x1e8>
			free(filename);
    1388:	bl	d220 <free>
			filename = nullptr;
    138c:	movs	r3, #0
    138e:	str	r3, [r4, #88]	; 0x58
  bool isOpen() const { return m_fFile || m_xFile; }
    1390:	ldr	r3, [r4, #80]	; 0x50
    1392:	cmp	r3, #0
    1394:	beq.w	16d2 <storeData(int) [clone .part.0]+0x52a>
			sdfatfile.close();
    1398:	add.w	r0, r4, #24
    139c:	bl	775c <FsBaseFile::close()>
		if (--(f->refcount) == 0) {
    13a0:	ldr	r7, [r5, #16]
    13a2:	ldr	r4, [r7, #4]
    13a4:	subs	r4, #1
    13a6:	str	r4, [r7, #4]
    13a8:	cmp	r4, #0
    13aa:	bne.n	1414 <storeData(int) [clone .part.0]+0x26c>
			f->close();
    13ac:	ldr	r3, [r7, #0]
    13ae:	ldr	r3, [r3, #44]	; 0x2c
    13b0:	cmp	r3, r6
    13b2:	bne.w	1672 <storeData(int) [clone .part.0]+0x4ca>
		if (filename) {
    13b6:	ldr	r0, [r7, #88]	; 0x58
    13b8:	cbz	r0, 13c0 <storeData(int) [clone .part.0]+0x218>
			free(filename);
    13ba:	bl	d220 <free>
			filename = nullptr;
    13be:	str	r4, [r7, #88]	; 0x58
    13c0:	ldr	r3, [r7, #80]	; 0x50
    13c2:	cmp	r3, #0
    13c4:	beq.w	1758 <storeData(int) [clone .part.0]+0x5b0>
			sdfatfile.close();
    13c8:	add.w	r0, r7, #24
    13cc:	bl	775c <FsBaseFile::close()>
			delete f;
    13d0:	ldr	r4, [r5, #16]
    13d2:	cbz	r4, 1414 <storeData(int) [clone .part.0]+0x26c>
    13d4:	ldr	r3, [r4, #0]
    13d6:	ldr	r2, [pc, #92]	; (1434 <storeData(int) [clone .part.0]+0x28c>)
    13d8:	ldr	r3, [r3, #4]
    13da:	cmp	r3, r2
    13dc:	bne.w	178c <storeData(int) [clone .part.0]+0x5e4>
	virtual ~SDFile(void) {
    13e0:	ldr	r3, [pc, #84]	; (1438 <storeData(int) [clone .part.0]+0x290>)
		if (filename) {
    13e2:	ldr	r0, [r4, #88]	; 0x58
	virtual ~SDFile(void) {
    13e4:	str	r3, [r4, #0]
		if (filename) {
    13e6:	cbz	r0, 13f0 <storeData(int) [clone .part.0]+0x248>
			free(filename);
    13e8:	bl	d220 <free>
			filename = nullptr;
    13ec:	movs	r3, #0
    13ee:	str	r3, [r4, #88]	; 0x58
    13f0:	ldr	r3, [r4, #80]	; 0x50
			sdfatfile.close();
    13f2:	add.w	r6, r4, #24
    13f6:	cmp	r3, #0
    13f8:	beq.w	1776 <storeData(int) [clone .part.0]+0x5ce>
    13fc:	mov	r0, r6
    13fe:	bl	775c <FsBaseFile::close()>
    1402:	ldr	r3, [pc, #56]	; (143c <storeData(int) [clone .part.0]+0x294>)
  ~FsBaseFile() { close(); }
    1404:	mov	r0, r6
    1406:	str	r3, [r4, #8]
    1408:	bl	775c <FsBaseFile::close()>
	}
    140c:	movs	r1, #92	; 0x5c
    140e:	mov	r0, r4
    1410:	bl	d07c <operator delete(void*, unsigned int)>
		f = nullptr;
    1414:	movs	r3, #0
	}
    1416:	mov	r0, r3
		f = nullptr;
    1418:	str	r3, [r5, #16]
    141a:	add	sp, #80	; 0x50
    141c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1420:	mov.w	r0, #4294967295
    1424:	add	sp, #80	; 0x50
    1426:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    142a:	nop
    142c:	.word	0x200079ac
    1430:	.word	0x000001bd
    1434:	.word	0x000008dd
    1438:	.word	0x20000ae8
    143c:	.word	0x2000099c
    1440:	.word	0x20006900
    1444:	.word	0x20005300
    1448:	.word	0x20001460
    144c:	.word	0x20000514
    1450:	.word	0x20007a40
    1454:	.word	0x00000725
    1458:	.word	0x20000548
    145c:	.word	0x20007980
    1460:	.word	0x20006980
    1464:	ldr.w	r1, [r4, #1160]	; 0x488
           : m_xVol ? m_xVol->exists(path)
    1468:	cmp	r1, #0
    146a:	beq.w	12c8 <storeData(int) [clone .part.0]+0x120>
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    ExFatFile tmp;
    return tmp.open(this, path, O_RDONLY);
    146e:	mov	r5, sp
    1470:	mov	r3, r2
  ExFatFile() {}
    1472:	str	r2, [sp, #48]	; 0x30
    1474:	mov	r0, r5
    1476:	ldr	r2, [pc, #672]	; (1718 <storeData(int) [clone .part.0]+0x570>)
    1478:	bl	43b8 <ExFatFile::open(ExFatVolume*, char const*, int)>
    147c:	cmp	r0, #0
    147e:	beq.w	12a6 <storeData(int) [clone .part.0]+0xfe>
          if(!newFileName(fileName))return ErrorMsg("Failing new file");
    1482:	ldr	r0, [pc, #664]	; (171c <storeData(int) [clone .part.0]+0x574>)
    1484:	bl	1090 <newFileName(char*)>
    1488:	cmp	r0, #0
    148a:	beq.w	17d4 <storeData(int) [clone .part.0]+0x62c>
	bool begin(uint8_t csPin = 10);
	File open(const char *filepath, uint8_t mode = FILE_READ) {
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
		SDFAT_FILE file = sdfs.open(filepath, flags);
    148e:	movw	r3, #514	; 0x202
    1492:	ldr	r2, [pc, #648]	; (171c <storeData(int) [clone .part.0]+0x574>)
    1494:	ldr	r1, [pc, #648]	; (1720 <storeData(int) [clone .part.0]+0x578>)
    1496:	mov	r0, sp
    1498:	bl	79b4 <FsVolume::open(char const*, int)>
  bool isOpen() const { return m_fFile || m_xFile; }
    149c:	ldr	r3, [sp, #72]	; 0x48
    149e:	cmp	r3, #0
    14a0:	beq.w	1692 <storeData(int) [clone .part.0]+0x4ea>
		if (file) return File(new SDFile(file));
    14a4:	movs	r0, #92	; 0x5c
class FileImpl {
    14a6:	movs	r5, #0
    14a8:	bl	d078 <operator new(unsigned int)>
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
    14ac:	ldr	r3, [pc, #628]	; (1724 <storeData(int) [clone .part.0]+0x57c>)
class Print
    14ae:	ldrb.w	r6, [sp, #4]
		if (file) return File(new SDFile(file));
    14b2:	mov	r4, r0
class Stream : public Print
    14b4:	ldr	r1, [sp, #8]
    14b6:	adds	r0, #24
    14b8:	ldrb.w	r2, [sp, #12]
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
    14bc:	str.w	r3, [r0, #-24]
    14c0:	ldr	r3, [pc, #612]	; (1728 <storeData(int) [clone .part.0]+0x580>)
    14c2:	strb.w	r6, [r0, #-12]
    14c6:	str.w	r1, [r0, #-8]
    14ca:	add	r1, sp, #16
    14cc:	str.w	r5, [r0, #-20]
    14d0:	strb.w	r2, [r0, #-4]
    14d4:	str.w	r3, [r0, #-16]
    14d8:	bl	76d8 <FsBaseFile::FsBaseFile(FsBaseFile const&)>
		if (f) f->refcount++;
    14dc:	ldr	r3, [r4, #4]
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    14de:	ldr	r2, [pc, #588]	; (172c <storeData(int) [clone .part.0]+0x584>)
  ~FsBaseFile() { close(); }
    14e0:	add	r0, sp, #16
    14e2:	adds	r3, #1
    14e4:	ldr.w	r8, [pc, #620]	; 1754 <storeData(int) [clone .part.0]+0x5ac>
    14e8:	str	r5, [r4, #88]	; 0x58
    14ea:	str	r3, [r4, #4]
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    14ec:	str	r2, [r4, #8]
		if (f) { dec_refcount(); /*Serial.println("File move assignment autoclose");*/ }
    14ee:	ldr	r5, [pc, #576]	; (1730 <storeData(int) [clone .part.0]+0x588>)
    14f0:	str.w	r8, [sp]
  ~FsBaseFile() { close(); }
    14f4:	bl	775c <FsBaseFile::close()>
		if (file.f) file.f->refcount++;
    14f8:	ldr	r7, [r4, #4]
		if (f) { dec_refcount(); /*Serial.println("File move assignment autoclose");*/ }
    14fa:	ldr	r6, [r5, #16]
		if (file.f) file.f->refcount++;
    14fc:	adds	r3, r7, #1
    14fe:	str	r3, [r4, #4]
		if (f) { dec_refcount(); /*Serial.println("File move assignment autoclose");*/ }
    1500:	cmp	r6, #0
    1502:	beq.w	1682 <storeData(int) [clone .part.0]+0x4da>
		if (--(f->refcount) == 0) {
    1506:	ldr	r3, [r6, #4]
    1508:	subs	r3, #1
    150a:	str	r3, [r6, #4]
    150c:	cmp	r3, #0
    150e:	bne.n	15de <storeData(int) [clone .part.0]+0x436>
			f->close();
    1510:	ldr	r3, [r6, #0]
    1512:	ldr	r2, [pc, #544]	; (1734 <storeData(int) [clone .part.0]+0x58c>)
    1514:	ldr	r3, [r3, #44]	; 0x2c
    1516:	cmp	r3, r2
    1518:	bne.w	1786 <storeData(int) [clone .part.0]+0x5de>
		if (filename) {
    151c:	ldr	r0, [r6, #88]	; 0x58
    151e:	cbz	r0, 1528 <storeData(int) [clone .part.0]+0x380>
			free(filename);
    1520:	bl	d220 <free>
			filename = nullptr;
    1524:	movs	r3, #0
    1526:	str	r3, [r6, #88]	; 0x58
  bool isOpen() const { return m_fFile || m_xFile; }
    1528:	ldr	r3, [r6, #80]	; 0x50
    152a:	cmp	r3, #0
    152c:	beq.w	1762 <storeData(int) [clone .part.0]+0x5ba>
			sdfatfile.close();
    1530:	add.w	r0, r6, #24
    1534:	bl	775c <FsBaseFile::close()>
			delete f;
    1538:	ldr	r6, [r5, #16]
    153a:	cbz	r6, 157c <storeData(int) [clone .part.0]+0x3d4>
    153c:	ldr	r3, [r6, #0]
    153e:	ldr	r2, [pc, #504]	; (1738 <storeData(int) [clone .part.0]+0x590>)
    1540:	ldr	r3, [r3, #4]
    1542:	cmp	r3, r2
    1544:	bne.w	17c8 <storeData(int) [clone .part.0]+0x620>
	virtual ~SDFile(void) {
    1548:	ldr	r3, [pc, #472]	; (1724 <storeData(int) [clone .part.0]+0x57c>)
		if (filename) {
    154a:	ldr	r0, [r6, #88]	; 0x58
	virtual ~SDFile(void) {
    154c:	str	r3, [r6, #0]
		if (filename) {
    154e:	cbz	r0, 1558 <storeData(int) [clone .part.0]+0x3b0>
			free(filename);
    1550:	bl	d220 <free>
			filename = nullptr;
    1554:	movs	r3, #0
    1556:	str	r3, [r6, #88]	; 0x58
    1558:	ldr	r3, [r6, #80]	; 0x50
			sdfatfile.close();
    155a:	add.w	r7, r6, #24
    155e:	cmp	r3, #0
    1560:	beq.w	1792 <storeData(int) [clone .part.0]+0x5ea>
    1564:	mov	r0, r7
    1566:	bl	775c <FsBaseFile::close()>
  ~FsBaseFile() { close(); }
    156a:	mov	r0, r7
    156c:	str.w	r8, [r6, #8]
    1570:	bl	775c <FsBaseFile::close()>
	}
    1574:	movs	r1, #92	; 0x5c
    1576:	mov	r0, r6
    1578:	bl	d07c <operator delete(void*, unsigned int)>
		f = file.f;
    157c:	str	r4, [r5, #16]
		if (f) dec_refcount();
    157e:	cmp	r4, #0
    1580:	bne.w	17ce <storeData(int) [clone .part.0]+0x626>
{ Serial.println();
    1584:	ldr	r0, [pc, #436]	; (173c <storeData(int) [clone .part.0]+0x594>)
    1586:	bl	d02c <Print::println()>
    158a:	movs	r1, #17
    158c:	ldr	r0, [pc, #432]	; (1740 <storeData(int) [clone .part.0]+0x598>)
    158e:	bl	a81c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    1592:	ldr	r0, [pc, #424]	; (173c <storeData(int) [clone .part.0]+0x594>)
    1594:	bl	d02c <Print::println()>
          if(!file) return ErrorMsg("Failing open file");
    1598:	mov.w	r0, #4294967295
    159c:	b.n	1424 <storeData(int) [clone .part.0]+0x27c>
{ Serial.println();
    159e:	ldr	r0, [pc, #412]	; (173c <storeData(int) [clone .part.0]+0x594>)
    15a0:	bl	d02c <Print::println()>
    15a4:	movs	r1, #10
    15a6:	ldr	r0, [pc, #412]	; (1744 <storeData(int) [clone .part.0]+0x59c>)
    15a8:	bl	a81c <usb_serial_write>
    15ac:	ldr	r0, [pc, #396]	; (173c <storeData(int) [clone .part.0]+0x594>)
    15ae:	bl	d02c <Print::println()>
          if(file.write((const void *)diskBuffer, nbuf) < (size_t) nbuf) return ErrorMsg("Error Data");
    15b2:	mov.w	r0, #4294967295
    15b6:	b.n	1424 <storeData(int) [clone .part.0]+0x27c>
    15b8:	ldr	r0, [r3, #84]	; 0x54
           : m_xFile ? m_xFile->write(buf, count)
    15ba:	cmp	r0, #0
    15bc:	beq.w	1314 <storeData(int) [clone .part.0]+0x16c>
    15c0:	mov.w	r2, #512	; 0x200
    15c4:	ldr	r1, [pc, #384]	; (1748 <storeData(int) [clone .part.0]+0x5a0>)
    15c6:	bl	513c <ExFatFile::write(void const*, unsigned int)>
    15ca:	b.n	130e <storeData(int) [clone .part.0]+0x166>
    15cc:	ldr	r0, [r4, #84]	; 0x54
    15ce:	cmp	r0, #0
    15d0:	beq.n	159e <storeData(int) [clone .part.0]+0x3f6>
    15d2:	mov.w	r2, #4096	; 0x1000
    15d6:	ldr	r1, [pc, #372]	; (174c <storeData(int) [clone .part.0]+0x5a4>)
    15d8:	bl	513c <ExFatFile::write(void const*, unsigned int)>
    15dc:	b.n	135e <storeData(int) [clone .part.0]+0x1b6>
		if (--(f->refcount) == 0) {
    15de:	ldr	r7, [r4, #4]
		f = file.f;
    15e0:	str	r4, [r5, #16]
		if (--(f->refcount) == 0) {
    15e2:	subs	r7, #1
    15e4:	str	r7, [r4, #4]
    15e6:	cmp	r7, #0
    15e8:	bne.n	168e <storeData(int) [clone .part.0]+0x4e6>
			f->close();
    15ea:	ldr	r3, [r4, #0]
    15ec:	ldr	r2, [pc, #324]	; (1734 <storeData(int) [clone .part.0]+0x58c>)
    15ee:	ldr	r3, [r3, #44]	; 0x2c
    15f0:	cmp	r3, r2
    15f2:	bne.w	1780 <storeData(int) [clone .part.0]+0x5d8>
		if (filename) {
    15f6:	ldr	r0, [r4, #88]	; 0x58
    15f8:	cbz	r0, 1600 <storeData(int) [clone .part.0]+0x458>
			free(filename);
    15fa:	bl	d220 <free>
			filename = nullptr;
    15fe:	str	r7, [r4, #88]	; 0x58
  bool isOpen() const { return m_fFile || m_xFile; }
    1600:	ldr	r3, [r4, #80]	; 0x50
    1602:	cmp	r3, #0
    1604:	beq.w	176c <storeData(int) [clone .part.0]+0x5c4>
			sdfatfile.close();
    1608:	add.w	r0, r4, #24
    160c:	bl	775c <FsBaseFile::close()>
			delete f;
    1610:	ldr	r3, [r4, #0]
    1612:	ldr	r2, [pc, #292]	; (1738 <storeData(int) [clone .part.0]+0x590>)
    1614:	ldr	r3, [r3, #4]
    1616:	cmp	r3, r2
    1618:	bne.n	168a <storeData(int) [clone .part.0]+0x4e2>
	virtual ~SDFile(void) {
    161a:	ldr	r3, [pc, #264]	; (1724 <storeData(int) [clone .part.0]+0x57c>)
		if (filename) {
    161c:	ldr	r0, [r4, #88]	; 0x58
	virtual ~SDFile(void) {
    161e:	str	r3, [r4, #0]
		if (filename) {
    1620:	cbz	r0, 162a <storeData(int) [clone .part.0]+0x482>
			free(filename);
    1622:	bl	d220 <free>
			filename = nullptr;
    1626:	movs	r3, #0
    1628:	str	r3, [r4, #88]	; 0x58
    162a:	ldr	r3, [r4, #80]	; 0x50
			sdfatfile.close();
    162c:	add.w	r6, r4, #24
    1630:	cmp	r3, #0
    1632:	beq.w	179c <storeData(int) [clone .part.0]+0x5f4>
    1636:	mov	r0, r6
    1638:	bl	775c <FsBaseFile::close()>
  ~FsBaseFile() { close(); }
    163c:	mov	r0, r6
    163e:	str.w	r8, [r4, #8]
    1642:	bl	775c <FsBaseFile::close()>
	}
    1646:	mov	r0, r4
    1648:	movs	r1, #92	; 0x5c
    164a:	bl	d07c <operator delete(void*, unsigned int)>
    164e:	ldr	r0, [r5, #16]
		return (f) ? f->isOpen() : false;
    1650:	cmp	r0, #0
    1652:	beq.n	1584 <storeData(int) [clone .part.0]+0x3dc>
    1654:	ldr	r3, [r0, #0]
    1656:	ldr	r2, [pc, #248]	; (1750 <storeData(int) [clone .part.0]+0x5a8>)
    1658:	ldr	r3, [r3, #48]	; 0x30
    165a:	cmp	r3, r2
    165c:	bne.n	1708 <storeData(int) [clone .part.0]+0x560>
  bool isOpen() const { return m_fFile || m_xFile; }
    165e:	ldr	r3, [r0, #80]	; 0x50
    1660:	cmp	r3, #0
    1662:	beq.n	16dc <storeData(int) [clone .part.0]+0x534>
  switch(status)
    1664:	movs	r0, #1
    1666:	b.n	1424 <storeData(int) [clone .part.0]+0x27c>
    1668:	ldr	r3, [r4, #84]	; 0x54
    166a:	cmp	r3, #0
    166c:	bne.w	1252 <storeData(int) [clone .part.0]+0xaa>
    1670:	b.n	1258 <storeData(int) [clone .part.0]+0xb0>
			f->close();
    1672:	mov	r0, r7
    1674:	blx	r3
    1676:	b.n	13d0 <storeData(int) [clone .part.0]+0x228>
    1678:	ldr	r3, [r4, #84]	; 0x54
    167a:	cmp	r3, #0
    167c:	bne.w	11ee <storeData(int) [clone .part.0]+0x46>
    1680:	b.n	11f6 <storeData(int) [clone .part.0]+0x4e>
		f = file.f;
    1682:	str	r4, [r5, #16]
		if (f) dec_refcount();
    1684:	b.n	15e4 <storeData(int) [clone .part.0]+0x43c>
    1686:	mov	r0, r4
    1688:	b.n	1424 <storeData(int) [clone .part.0]+0x27c>
			delete f;
    168a:	mov	r0, r4
    168c:	blx	r3
    168e:	ldr	r0, [r5, #16]
    1690:	b.n	1650 <storeData(int) [clone .part.0]+0x4a8>
    1692:	ldr	r4, [sp, #76]	; 0x4c
    1694:	cmp	r4, #0
    1696:	bne.w	14a4 <storeData(int) [clone .part.0]+0x2fc>
    169a:	ldr.w	r8, [pc, #184]	; 1754 <storeData(int) [clone .part.0]+0x5ac>
  ~FsBaseFile() { close(); }
    169e:	add	r0, sp, #16
		if (f) { dec_refcount(); /*Serial.println("File move assignment autoclose");*/ }
    16a0:	ldr	r5, [pc, #140]	; (1730 <storeData(int) [clone .part.0]+0x588>)
    16a2:	str.w	r8, [sp]
    16a6:	bl	775c <FsBaseFile::close()>
    16aa:	ldr	r6, [r5, #16]
    16ac:	cmp	r6, #0
    16ae:	beq.w	1584 <storeData(int) [clone .part.0]+0x3dc>
		if (--(f->refcount) == 0) {
    16b2:	ldr	r3, [r6, #4]
    16b4:	subs	r3, #1
    16b6:	str	r3, [r6, #4]
    16b8:	cmp	r3, #0
    16ba:	beq.w	1510 <storeData(int) [clone .part.0]+0x368>
		f = nullptr;
    16be:	str	r4, [r5, #16]
		return (f) ? f->isOpen() : false;
    16c0:	b.n	1584 <storeData(int) [clone .part.0]+0x3dc>
			f->close();
    16c2:	mov	r0, r4
    16c4:	blx	r3
    16c6:	b.n	11f6 <storeData(int) [clone .part.0]+0x4e>
  bool isOpen() const { return m_fFile || m_xFile; }
    16c8:	ldr	r3, [r7, #84]	; 0x54
    16ca:	cmp	r3, #0
    16cc:	bne.w	121e <storeData(int) [clone .part.0]+0x76>
    16d0:	b.n	1226 <storeData(int) [clone .part.0]+0x7e>
    16d2:	ldr	r3, [r4, #84]	; 0x54
    16d4:	cmp	r3, #0
    16d6:	bne.w	1398 <storeData(int) [clone .part.0]+0x1f0>
    16da:	b.n	13a0 <storeData(int) [clone .part.0]+0x1f8>
    16dc:	ldr	r3, [r0, #84]	; 0x54
    16de:	cmp	r3, #0
    16e0:	bne.n	1664 <storeData(int) [clone .part.0]+0x4bc>
    16e2:	b.n	1584 <storeData(int) [clone .part.0]+0x3dc>
			f->close();
    16e4:	mov	r0, r7
    16e6:	blx	r3
    16e8:	b.n	1226 <storeData(int) [clone .part.0]+0x7e>
		return (f) ? f->write(buf, size) : 0;
    16ea:	mov.w	r2, #512	; 0x200
    16ee:	ldr	r1, [pc, #88]	; (1748 <storeData(int) [clone .part.0]+0x5a0>)
    16f0:	mov	r0, r3
    16f2:	blx	r4
    16f4:	b.n	130e <storeData(int) [clone .part.0]+0x166>
			f->close();
    16f6:	mov	r0, r4
    16f8:	blx	r3
    16fa:	b.n	13a0 <storeData(int) [clone .part.0]+0x1f8>
		return (f) ? f->write(buf, size) : 0;
    16fc:	mov.w	r2, #4096	; 0x1000
    1700:	ldr	r1, [pc, #72]	; (174c <storeData(int) [clone .part.0]+0x5a4>)
    1702:	mov	r0, r4
    1704:	blx	r3
    1706:	b.n	135e <storeData(int) [clone .part.0]+0x1b6>
		return (f) ? f->isOpen() : false;
    1708:	blx	r3
    170a:	cmp	r0, #0
    170c:	beq.w	1584 <storeData(int) [clone .part.0]+0x3dc>
    1710:	b.n	1664 <storeData(int) [clone .part.0]+0x4bc>
			delete f;
    1712:	mov	r0, r4
    1714:	blx	r3
    1716:	b.n	126a <storeData(int) [clone .part.0]+0xc2>
    1718:	.word	0x20006900
    171c:	.word	0x200079c0
    1720:	.word	0x20005304
    1724:	.word	0x20000ae8
    1728:	.word	0x20000b44
    172c:	.word	0x20000ab8
    1730:	.word	0x200079ac
    1734:	.word	0x000001bd
    1738:	.word	0x000008dd
    173c:	.word	0x20001460
    1740:	.word	0x20000534
    1744:	.word	0x20000558
    1748:	.word	0x20007a40
    174c:	.word	0x20006980
    1750:	.word	0x00000071
    1754:	.word	0x2000099c
    1758:	ldr	r3, [r7, #84]	; 0x54
    175a:	cmp	r3, #0
    175c:	bne.w	13c8 <storeData(int) [clone .part.0]+0x220>
    1760:	b.n	13d0 <storeData(int) [clone .part.0]+0x228>
    1762:	ldr	r3, [r6, #84]	; 0x54
    1764:	cmp	r3, #0
    1766:	bne.w	1530 <storeData(int) [clone .part.0]+0x388>
    176a:	b.n	1538 <storeData(int) [clone .part.0]+0x390>
    176c:	ldr	r3, [r4, #84]	; 0x54
    176e:	cmp	r3, #0
    1770:	bne.w	1608 <storeData(int) [clone .part.0]+0x460>
    1774:	b.n	1610 <storeData(int) [clone .part.0]+0x468>
    1776:	ldr	r3, [r4, #84]	; 0x54
    1778:	cmp	r3, #0
    177a:	bne.w	13fc <storeData(int) [clone .part.0]+0x254>
    177e:	b.n	1402 <storeData(int) [clone .part.0]+0x25a>
			f->close();
    1780:	mov	r0, r4
    1782:	blx	r3
    1784:	b.n	1610 <storeData(int) [clone .part.0]+0x468>
    1786:	mov	r0, r6
    1788:	blx	r3
    178a:	b.n	1538 <storeData(int) [clone .part.0]+0x390>
			delete f;
    178c:	mov	r0, r4
    178e:	blx	r3
    1790:	b.n	1414 <storeData(int) [clone .part.0]+0x26c>
    1792:	ldr	r3, [r6, #84]	; 0x54
    1794:	cmp	r3, #0
    1796:	bne.w	1564 <storeData(int) [clone .part.0]+0x3bc>
    179a:	b.n	156a <storeData(int) [clone .part.0]+0x3c2>
    179c:	ldr	r3, [r4, #84]	; 0x54
    179e:	cmp	r3, #0
    17a0:	bne.w	1636 <storeData(int) [clone .part.0]+0x48e>
    17a4:	b.n	163c <storeData(int) [clone .part.0]+0x494>
    17a6:	ldr.w	r1, [r4, #1160]	; 0x488
           : m_xVol ? m_xVol->mkdir(path, pFlag)
    17aa:	cmp	r1, #0
    17ac:	beq.w	12c8 <storeData(int) [clone .part.0]+0x120>
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char* path, bool pFlag = true) {
    ExFatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
    17b0:	movs	r3, #1
    17b2:	ldr	r2, [pc, #60]	; (17f0 <storeData(int) [clone .part.0]+0x648>)
    17b4:	add.w	r1, r1, #1096	; 0x448
    17b8:	mov	r0, r5
    17ba:	str	r6, [sp, #48]	; 0x30
    17bc:	bl	4e0c <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
    17c0:	cmp	r0, #0
    17c2:	beq.w	12c8 <storeData(int) [clone .part.0]+0x120>
    17c6:	b.n	1482 <storeData(int) [clone .part.0]+0x2da>
    17c8:	mov	r0, r6
    17ca:	blx	r3
    17cc:	b.n	157c <storeData(int) [clone .part.0]+0x3d4>
		if (--(f->refcount) == 0) {
    17ce:	ldr	r7, [r4, #4]
    17d0:	subs	r7, #1
    17d2:	b.n	15e4 <storeData(int) [clone .part.0]+0x43c>
{ Serial.println();
    17d4:	ldr	r0, [pc, #28]	; (17f4 <storeData(int) [clone .part.0]+0x64c>)
    17d6:	bl	d02c <Print::println()>
    17da:	movs	r1, #16
    17dc:	ldr	r0, [pc, #24]	; (17f8 <storeData(int) [clone .part.0]+0x650>)
    17de:	bl	a81c <usb_serial_write>
    17e2:	ldr	r0, [pc, #16]	; (17f4 <storeData(int) [clone .part.0]+0x64c>)
    17e4:	bl	d02c <Print::println()>
          if(!newFileName(fileName))return ErrorMsg("Failing new file");
    17e8:	mov.w	r0, #4294967295
    17ec:	b.n	1424 <storeData(int) [clone .part.0]+0x27c>
    17ee:	nop
    17f0:	.word	0x20006900
    17f4:	.word	0x20001460
    17f8:	.word	0x20000520

000017fc <storeBegin()>:
{
    17fc:	push	{r3, r4, r5, r6, r7, lr}
    17fe:	movs	r4, #5
    if(!(SD.begin(BUILTIN_SDCARD))) 
    1800:	ldr	r6, [pc, #64]	; (1844 <storeBegin()+0x48>)
    1802:	ldr	r5, [pc, #68]	; (1848 <storeBegin()+0x4c>)
    1804:	ldr	r7, [pc, #68]	; (184c <storeBegin()+0x50>)
    1806:	movs	r1, #254	; 0xfe
    1808:	mov	r0, r6
    180a:	bl	2f50 <SDClass::begin(unsigned char)>
    180e:	mov	r3, r0
    1810:	movs	r1, #28
    1812:	mov	r0, r5
    1814:	cbnz	r3, 182c <storeBegin()+0x30>
    1816:	bl	a81c <usb_serial_write>
    181a:	mov	r0, r7
    181c:	bl	d02c <Print::println()>
      delay(100);
    1820:	movs	r0, #100	; 0x64
    1822:	bl	b7a4 <delay>
  for(int ii=0;ii<5;ii++)
    1826:	subs	r4, #1
    1828:	bne.n	1806 <storeBegin()+0xa>
}
    182a:	pop	{r3, r4, r5, r6, r7, pc}
    182c:	movs	r1, #13
    182e:	ldr	r0, [pc, #32]	; (1850 <storeBegin()+0x54>)
    1830:	bl	a81c <usb_serial_write>
    1834:	ldr	r0, [pc, #20]	; (184c <storeBegin()+0x50>)
    1836:	bl	d02c <Print::println()>
      haveSD=1;
    183a:	ldr	r3, [pc, #24]	; (1854 <storeBegin()+0x58>)
    183c:	movs	r2, #1
    183e:	strh	r2, [r3, #0]
}
    1840:	pop	{r3, r4, r5, r6, r7, pc}
    1842:	nop
    1844:	.word	0x20005300
    1848:	.word	0x20000494
    184c:	.word	0x20001460
    1850:	.word	0x200004b4
    1854:	.word	0x20008144

00001858 <setup>:
  AudioConnection          patchCord4(proc, 0, queue1, 0);
#else
  AudioConnection          patchCord4(acq, 0, queue1, 0);
#endif

void setup() {
    1858:	push	{r4, lr}
  // put your setup code here, to run once:
  AudioMemory(60);
    185a:	movs	r1, #60	; 0x3c
    185c:	ldr	r0, [pc, #44]	; (188c <setup+0x34>)
    185e:	bl	13660 <___ZN11AudioStream17initialize_memoryEP18audio_block_structj_veneer>
  void digitalShift(int32_t val){I2S_32::shift=val;}
    1862:	ldr	r1, [pc, #44]	; (1890 <setup+0x38>)
    1864:	movs	r0, #14
    num = HW_OCOTP_MAC0 & 0xFFFFFF;
    1866:	ldr	r3, [pc, #44]	; (1894 <setup+0x3c>)
  acq.digitalShift(shift);

  SerNum=getTeensySerial();
    1868:	ldr	r2, [pc, #44]	; (1898 <setup+0x40>)
    186a:	str	r0, [r1, #0]
    186c:	ldr.w	r3, [r3, #544]	; 0x220
#endif
public:
	AudioRecordQueue(void) : AudioStream(1, inputQueueArray),
		userblock(NULL), head(0), tail(0), enabled(0) { }
	void begin(void) {
		clear();
    1870:	ldr	r4, [pc, #40]	; (189c <setup+0x44>)
    1872:	bic.w	r3, r3, #4278190080	; 0xff000000
    1876:	str	r3, [r2, #0]
  
  #if START_MODE==-1
    while(!Serial);
  #endif

  storeBegin();
    1878:	bl	17fc <storeBegin()>
    187c:	mov	r0, r4
    187e:	bl	1f80 <AudioRecordQueue::clear()>
		enabled = 1;
    1882:	movs	r3, #1
    1884:	strb.w	r3, [r4, #870]	; 0x366

  queue1.begin();
}
    1888:	pop	{r4, pc}
    188a:	nop
    188c:	.word	0x20200000
    1890:	.word	0x20001480
    1894:	.word	0x401f4400
    1898:	.word	0x200058c0
    189c:	.word	0x20007d08

000018a0 <loop>:

extern int16_t tempData0[];
void loop() {
    18a0:	push	{r4, r5, r6, r7, lr}
    18a2:	sub	sp, #28
        virtual int available() { return usb_serial_available(); }
    18a4:	bl	a748 <usb_serial_available>
  // put your main code here, to run repeatedly:

  static int16_t status=START_MODE;

  // basic menu to start and stop archiving
  if(Serial.available())
    18a8:	cmp	r0, #0
    18aa:	bne.n	1930 <loop+0x90>
    18ac:	ldr	r6, [pc, #308]	; (19e4 <loop+0x144>)
    if(ch=='z') _reboot_Teensyduino_();
    while(Serial.available()) Serial.read();
  }

  // check end of file
  status=checkEndOfFile(status);
    18ae:	ldrsh.w	r4, [r6]
{ uint32_t tx=rtc_get();
    18b2:	bl	ba80 <rtc_get>
  tx = tx % t_acq;
    18b6:	ldr	r3, [pc, #304]	; (19e8 <loop+0x148>)
  if((status>1) && (tx_>0) && (tx < tx_)) status=3;
    18b8:	cmp	r4, #1
  tx = tx % t_acq;
    18ba:	umull	r2, r3, r3, r0
  if((status>1) && (tx_>0) && (tx < tx_)) status=3;
    18be:	ldr	r2, [pc, #300]	; (19ec <loop+0x14c>)
  tx = tx % t_acq;
    18c0:	mov.w	r3, r3, lsr #5
    18c4:	rsb	r3, r3, r3, lsl #4
    18c8:	sub.w	r3, r0, r3, lsl #2
  if((status>1) && (tx_>0) && (tx < tx_)) status=3;
    18cc:	ble.n	18d6 <loop+0x36>
    18ce:	ldr	r1, [r2, #0]
    18d0:	cmp	r3, r1
    18d2:	it	cc
    18d4:	movcc	r4, #3

  // if available transfer data to disk
  if(queue1.available()>=NBUF)
    18d6:	ldr	r0, [pc, #280]	; (19f0 <loop+0x150>)
  tx_=tx;
    18d8:	str	r3, [r2, #0]
  status=checkEndOfFile(status);
    18da:	strh	r4, [r6, #0]
  if(queue1.available()>=NBUF)
    18dc:	bl	1f68 <AudioRecordQueue::available()>
    18e0:	cmp	r0, #15
    18e2:	ble.n	191c <loop+0x7c>
    18e4:	ldr	r4, [pc, #268]	; (19f4 <loop+0x154>)
  { // fetch data from buffer
    for(int ii=0; ii<NBUF; ii++)
    { int16_t *buffer= queue1.readBuffer();
    18e6:	ldr	r5, [pc, #264]	; (19f0 <loop+0x150>)
    18e8:	add.w	r7, r4, #4096	; 0x1000
    18ec:	mov	r0, r5
    18ee:	bl	1fc8 <AudioRecordQueue::readBuffer()>
      memcpy(diskBuffer+ii*NSAMP, buffer, 2*NSAMP);
    18f2:	mov.w	r2, #256	; 0x100
    { int16_t *buffer= queue1.readBuffer();
    18f6:	mov	r1, r0
      memcpy(diskBuffer+ii*NSAMP, buffer, 2*NSAMP);
    18f8:	mov	r0, r4
    for(int ii=0; ii<NBUF; ii++)
    18fa:	add	r4, r2
      memcpy(diskBuffer+ii*NSAMP, buffer, 2*NSAMP);
    18fc:	bl	a0a4 <memcpy>
      queue1.freeBuffer();
    1900:	mov	r0, r5
    1902:	bl	2004 <AudioRecordQueue::freeBuffer()>
    for(int ii=0; ii<NBUF; ii++)
    1906:	cmp	r7, r4
    1908:	bne.n	18ec <loop+0x4c>
  if(!haveSD) return status;
    190a:	ldr	r3, [pc, #236]	; (19f8 <loop+0x158>)
    }

    // write data to disk
    //-------------------
    status=storeData(status);
    190c:	ldrsh.w	r0, [r6]
    1910:	ldrsh.w	r3, [r3]
    1914:	cbz	r3, 191a <loop+0x7a>
    1916:	bl	11a8 <storeData(int) [clone .part.0]>
    191a:	strh	r0, [r6, #0]
    191c:	ldr	r1, [pc, #220]	; (19fc <loop+0x15c>)
  #if DO_COMPRESS==1
    int32_t data = tempData0[0];
  #else
    int32_t data = diskBuffer[0];
  #endif
  if(millis()-t0>1000)
    191e:	ldr	r2, [pc, #224]	; (1a00 <loop+0x160>)
    1920:	ldr	r3, [r1, #0]
    1922:	ldr	r0, [r2, #0]
    1924:	subs	r3, r3, r0
    1926:	cmp.w	r3, #1000	; 0x3e8
    192a:	bhi.n	1954 <loop+0xb4>
        ic++, rtc_get()%60, AudioMemoryUsageMax(), 
        (float) fsamp/(float)(disk_count*NBUF*NSAMP), data, status);
    AudioMemoryUsageMaxReset();
    disk_count=0;
  }
}
    192c:	add	sp, #28
    192e:	pop	{r4, r5, r6, r7, pc}
        virtual int read() { return usb_serial_getchar(); }
    1930:	bl	a7d0 <usb_serial_getchar>
    char ch=Serial.read();
    1934:	uxtb	r0, r0
    if(ch=='s') status=0;
    1936:	cmp	r0, #115	; 0x73
    1938:	beq.n	19be <loop+0x11e>
    if(ch=='e') status=4;
    193a:	cmp	r0, #101	; 0x65
    193c:	bne.n	19c6 <loop+0x126>
    193e:	ldr	r6, [pc, #164]	; (19e4 <loop+0x144>)
    1940:	movs	r3, #4
    1942:	strh	r3, [r6, #0]
    if(ch=='z') _reboot_Teensyduino_();
    1944:	b.n	194a <loop+0xaa>
    1946:	bl	a7d0 <usb_serial_getchar>
        virtual int available() { return usb_serial_available(); }
    194a:	bl	a748 <usb_serial_available>
    while(Serial.available()) Serial.read();
    194e:	cmp	r0, #0
    1950:	bne.n	1946 <loop+0xa6>
    1952:	b.n	18ae <loop+0xe>
    Serial.printf("\n%10d %2d %3d %.2f %6d %d",
    1954:	ldr	r3, [pc, #172]	; (1a04 <loop+0x164>)
    1956:	ldr	r0, [r1, #0]
    1958:	ldr	r4, [r3, #0]
    int32_t data = tempData0[0];
    195a:	ldr	r1, [pc, #172]	; (1a08 <loop+0x168>)
  { t0=millis();
    195c:	str	r0, [r2, #0]
    Serial.printf("\n%10d %2d %3d %.2f %6d %d",
    195e:	adds	r2, r4, #1
    int32_t data = tempData0[0];
    1960:	ldrsh.w	r7, [r1]
        (float) fsamp/(float)(disk_count*NBUF*NSAMP), data, status);
    1964:	ldr	r5, [pc, #164]	; (1a0c <loop+0x16c>)
    Serial.printf("\n%10d %2d %3d %.2f %6d %d",
    1966:	str	r2, [r3, #0]
        ic++, rtc_get()%60, AudioMemoryUsageMax(), 
    1968:	bl	ba80 <rtc_get>
    Serial.printf("\n%10d %2d %3d %.2f %6d %d",
    196c:	ldrsh.w	r3, [r6]
    1970:	mov	r2, r4
    int32_t data = tempData0[0];
    1972:	str	r7, [sp, #16]
    Serial.printf("\n%10d %2d %3d %.2f %6d %d",
    1974:	str	r3, [sp, #20]
        (float) fsamp/(float)(disk_count*NBUF*NSAMP), data, status);
    1976:	ldr	r4, [r5, #0]
    1978:	vldr	s13, [pc, #148]	; 1a10 <loop+0x170>
    197c:	lsls	r4, r4, #11
    Serial.printf("\n%10d %2d %3d %.2f %6d %d",
    197e:	ldr	r1, [pc, #104]	; (19e8 <loop+0x148>)
        (float) fsamp/(float)(disk_count*NBUF*NSAMP), data, status);
    1980:	vmov	s15, r4
    Serial.printf("\n%10d %2d %3d %.2f %6d %d",
    1984:	umull	r3, r1, r1, r0
    1988:	ldr	r4, [pc, #136]	; (1a14 <loop+0x174>)
        (float) fsamp/(float)(disk_count*NBUF*NSAMP), data, status);
    198a:	vcvt.f32.u32	s15, s15
    Serial.printf("\n%10d %2d %3d %.2f %6d %d",
    198e:	lsrs	r1, r1, #5
    1990:	rsb	r1, r1, r1, lsl #4
        (float) fsamp/(float)(disk_count*NBUF*NSAMP), data, status);
    1994:	vdiv.f32	s14, s13, s15
    Serial.printf("\n%10d %2d %3d %.2f %6d %d",
    1998:	sub.w	r3, r0, r1, lsl #2
    199c:	ldr	r1, [pc, #120]	; (1a18 <loop+0x178>)
    199e:	ldr	r0, [pc, #124]	; (1a1c <loop+0x17c>)
    19a0:	vcvt.f64.f32	d7, s14
    19a4:	vstr	d7, [sp, #8]
    19a8:	ldrh	r6, [r4, #0]
    19aa:	str	r6, [sp, #0]
    19ac:	bl	d058 <Print::printf(char const*, ...)>
    AudioMemoryUsageMaxReset();
    19b0:	ldr	r3, [pc, #108]	; (1a20 <loop+0x180>)
    disk_count=0;
    19b2:	movs	r2, #0
    AudioMemoryUsageMaxReset();
    19b4:	ldrh	r3, [r3, #0]
    disk_count=0;
    19b6:	str	r2, [r5, #0]
    AudioMemoryUsageMaxReset();
    19b8:	strh	r3, [r4, #0]
}
    19ba:	add	sp, #28
    19bc:	pop	{r4, r5, r6, r7, pc}
    if(ch=='s') status=0;
    19be:	ldr	r6, [pc, #36]	; (19e4 <loop+0x144>)
    19c0:	movs	r3, #0
    19c2:	strh	r3, [r6, #0]
    if(ch=='z') _reboot_Teensyduino_();
    19c4:	b.n	194a <loop+0xaa>
    if(ch=='b') CPU_RESTART;
    19c6:	cmp	r0, #98	; 0x62
    19c8:	bne.n	19d8 <loop+0x138>
    19ca:	mov.w	r3, #3758153728	; 0xe000e000
    19ce:	ldr	r2, [pc, #84]	; (1a24 <loop+0x184>)
    19d0:	ldr	r6, [pc, #16]	; (19e4 <loop+0x144>)
    19d2:	str.w	r2, [r3, #3340]	; 0xd0c
    if(ch=='z') _reboot_Teensyduino_();
    19d6:	b.n	194a <loop+0xaa>
    19d8:	cmp	r0, #122	; 0x7a
    19da:	bne.n	19e0 <loop+0x140>
    19dc:	bl	13668 <___reboot_Teensyduino__veneer>
    19e0:	ldr	r6, [pc, #0]	; (19e4 <loop+0x144>)
    19e2:	b.n	194a <loop+0xaa>
    19e4:	.word	0x20008140
    19e8:	.word	0x88888889
    19ec:	.word	0x200080f0
    19f0:	.word	0x20007d08
    19f4:	.word	0x20006980
    19f8:	.word	0x20008144
    19fc:	.word	0x200080e4
    1a00:	.word	0x200065d0
    1a04:	.word	0x200065cc
    1a08:	.word	0x200080ec
    1a0c:	.word	0x20007980
    1a10:	.word	0x472c4400
    1a14:	.word	0x20008132
    1a18:	.word	0x2000122c
    1a1c:	.word	0x20001460
    1a20:	.word	0x20008130
    1a24:	.word	0x05fa0004

00001a28 <_GLOBAL__sub_I_DirPrefix>:
}
    1a28:	push	{r4, r5, r6, lr}
DMAChannel I2S_32::dma(false);
    1a2a:	ldr	r2, [pc, #364]	; (1b98 <_GLOBAL__sub_I_DirPrefix+0x170>)
    1a2c:	sub	sp, #8
    1a2e:	ldr	r1, [pc, #364]	; (1b9c <_GLOBAL__sub_I_DirPrefix+0x174>)
	constexpr Print() : write_error(0) {}
    1a30:	movs	r4, #0
    1a32:	ldr	r0, [pc, #364]	; (1ba0 <_GLOBAL__sub_I_DirPrefix+0x178>)
    1a34:	bl	d204 <__aeabi_atexit>
    1a38:	ldr	r0, [pc, #360]	; (1ba4 <_GLOBAL__sub_I_DirPrefix+0x17c>)
	File(FileImpl *file) {
    1a3a:	ldr	r3, [pc, #364]	; (1ba8 <_GLOBAL__sub_I_DirPrefix+0x180>)
	constexpr Stream() : _timeout(1000), read_error(0) {}
    1a3c:	mov.w	r1, #1000	; 0x3e8
			for (int i=0; i < num_inputs; i++) {
				inputQueue[i] = NULL;
			}
			// add to a simple list, for update_all
			// TODO: replace with a proper data flow analysis in update_all
			if (first_update == NULL) {
    1a40:	ldr	r5, [pc, #360]	; (1bac <_GLOBAL__sub_I_DirPrefix+0x184>)
File file=NULL; 
    1a42:	ldr	r2, [pc, #340]	; (1b98 <_GLOBAL__sub_I_DirPrefix+0x170>)
    1a44:	str	r1, [r0, #8]
    1a46:	str	r3, [r0, #0]
    1a48:	ldr	r1, [pc, #356]	; (1bb0 <_GLOBAL__sub_I_DirPrefix+0x188>)
    1a4a:	strb	r4, [r0, #4]
    1a4c:	strb	r4, [r0, #12]
		f = file;
    1a4e:	str	r4, [r0, #16]
    1a50:	bl	d204 <__aeabi_atexit>
		num_inputs(ninput), inputQueue(iqueue) {
    1a54:	ldr	r6, [pc, #348]	; (1bb4 <_GLOBAL__sub_I_DirPrefix+0x18c>)
    1a56:	ldr	r2, [pc, #352]	; (1bb8 <_GLOBAL__sub_I_DirPrefix+0x190>)
			if (first_update == NULL) {
    1a58:	ldr	r3, [r5, #0]
		num_inputs(ninput), inputQueue(iqueue) {
    1a5a:	str	r6, [r2, #0]
    1a5c:	str	r4, [r2, #16]
			active = false;
    1a5e:	strh	r4, [r2, #8]
			destination_list = NULL;
    1a60:	str	r4, [r2, #12]
			if (first_update == NULL) {
    1a62:	cmp	r3, #0
    1a64:	beq.w	1b8a <_GLOBAL__sub_I_DirPrefix+0x162>
				first_update = this;
			} else {
				AudioStream *p;
				for (p=first_update; p->next_update; p = p->next_update) ;
    1a68:	mov	r1, r3
    1a6a:	ldr	r3, [r3, #20]
    1a6c:	cmp	r3, #0
    1a6e:	bne.n	1a68 <_GLOBAL__sub_I_DirPrefix+0x40>
				p->next_update = this;
    1a70:	str	r2, [r1, #20]
			}
			next_update = NULL;
    1a72:	movs	r4, #0
	I2S_32(void) : AudioStream(0, NULL) {begin();}
    1a74:	ldr	r3, [pc, #324]	; (1bbc <_GLOBAL__sub_I_DirPrefix+0x194>)
    1a76:	ldr	r0, [pc, #320]	; (1bb8 <_GLOBAL__sub_I_DirPrefix+0x190>)
    1a78:	str	r3, [r2, #0]
    1a7a:	str	r4, [r2, #20]
			cpu_cycles = 0;
    1a7c:	str	r4, [r2, #4]
			cpu_cycles_max = 0;
			numConnections = 0;
    1a7e:	strb	r4, [r2, #10]
    1a80:	bl	c08 <I2S_32::begin()>
		num_inputs(ninput), inputQueue(iqueue) {
    1a84:	ldr	r2, [pc, #312]	; (1bc0 <_GLOBAL__sub_I_DirPrefix+0x198>)
			if (first_update == NULL) {
    1a86:	ldr	r3, [r5, #0]
		num_inputs(ninput), inputQueue(iqueue) {
    1a88:	mov	r1, r2
			destination_list = NULL;
    1a8a:	str	r4, [r2, #12]
		num_inputs(ninput), inputQueue(iqueue) {
    1a8c:	str.w	r6, [r1], #24
    1a90:	str	r1, [r2, #16]
			active = false;
    1a92:	mov.w	r1, #512	; 0x200
				inputQueue[i] = NULL;
    1a96:	strd	r4, r4, [r2, #24]
			active = false;
    1a9a:	strh	r1, [r2, #8]
			if (first_update == NULL) {
    1a9c:	cmp	r3, #0
    1a9e:	beq.n	1b94 <_GLOBAL__sub_I_DirPrefix+0x16c>
				for (p=first_update; p->next_update; p = p->next_update) ;
    1aa0:	mov	r1, r3
    1aa2:	ldr	r3, [r3, #20]
    1aa4:	cmp	r3, #0
    1aa6:	bne.n	1aa0 <_GLOBAL__sub_I_DirPrefix+0x78>
				p->next_update = this;
    1aa8:	str	r2, [r1, #20]
			next_update = NULL;
    1aaa:	movs	r4, #0
};

class AudioOutputUSB : public AudioStream
{
public:
	AudioOutputUSB(void) : AudioStream(2, inputQueueArray) { begin(); }
    1aac:	ldr	r3, [pc, #276]	; (1bc4 <_GLOBAL__sub_I_DirPrefix+0x19c>)
    1aae:	ldr	r0, [pc, #272]	; (1bc0 <_GLOBAL__sub_I_DirPrefix+0x198>)
    1ab0:	str	r4, [r2, #20]
			cpu_cycles = 0;
    1ab2:	str	r4, [r2, #4]
			numConnections = 0;
    1ab4:	strb	r4, [r2, #10]
    1ab6:	str	r3, [r2, #0]
    1ab8:	bl	ccd4 <AudioOutputUSB::begin()>
		num_inputs(ninput), inputQueue(iqueue) {
    1abc:	ldr	r2, [pc, #264]	; (1bc8 <_GLOBAL__sub_I_DirPrefix+0x1a0>)
			active = false;
    1abe:	mov.w	r1, #256	; 0x100
		num_inputs(ninput), inputQueue(iqueue) {
    1ac2:	mov	r3, r2
			destination_list = NULL;
    1ac4:	str	r4, [r2, #12]
				inputQueue[i] = NULL;
    1ac6:	str	r4, [r2, #24]
			if (first_update == NULL) {
    1ac8:	ldr	r4, [r5, #0]
		num_inputs(ninput), inputQueue(iqueue) {
    1aca:	str.w	r6, [r3], #24
			active = false;
    1ace:	strh	r1, [r2, #8]
		num_inputs(ninput), inputQueue(iqueue) {
    1ad0:	str	r3, [r2, #16]
			if (first_update == NULL) {
    1ad2:	cmp	r4, #0
    1ad4:	beq.n	1b8e <_GLOBAL__sub_I_DirPrefix+0x166>
    1ad6:	mov	r3, r4
				for (p=first_update; p->next_update; p = p->next_update) ;
    1ad8:	mov	r1, r3
    1ada:	ldr	r3, [r3, #20]
    1adc:	cmp	r3, #0
    1ade:	bne.n	1ad8 <_GLOBAL__sub_I_DirPrefix+0xb0>
				p->next_update = this;
    1ae0:	str	r2, [r1, #20]
			next_update = NULL;
    1ae2:	movs	r3, #0
		num_inputs(ninput), inputQueue(iqueue) {
    1ae4:	ldr	r1, [pc, #228]	; (1bcc <_GLOBAL__sub_I_DirPrefix+0x1a4>)
		userblock(NULL), head(0), tail(0), enabled(0) { }
    1ae6:	ldr	r0, [pc, #232]	; (1bd0 <_GLOBAL__sub_I_DirPrefix+0x1a8>)
    1ae8:	strb.w	r3, [r2, #868]	; 0x364
    1aec:	str	r0, [r2, #0]
    1aee:	movs	r0, #1
    1af0:	strb.w	r3, [r2, #869]	; 0x365
			next_update = NULL;
    1af4:	str	r3, [r2, #20]
			cpu_cycles = 0;
    1af6:	str	r3, [r2, #4]
			numConnections = 0;
    1af8:	strb	r3, [r2, #10]
    1afa:	str.w	r3, [r2, #864]	; 0x360
    1afe:	strb.w	r3, [r2, #870]	; 0x366
		num_inputs(ninput), inputQueue(iqueue) {
    1b02:	add.w	r2, r1, #24
			active = false;
    1b06:	strb	r3, [r1, #8]
		num_inputs(ninput), inputQueue(iqueue) {
    1b08:	strb	r0, [r1, #9]
			destination_list = NULL;
    1b0a:	str	r3, [r1, #12]
				inputQueue[i] = NULL;
    1b0c:	str	r3, [r1, #24]
		num_inputs(ninput), inputQueue(iqueue) {
    1b0e:	str	r2, [r1, #16]
				for (p=first_update; p->next_update; p = p->next_update) ;
    1b10:	mov	r2, r4
    1b12:	ldr	r4, [r4, #20]
    1b14:	cmp	r4, #0
    1b16:	bne.n	1b10 <_GLOBAL__sub_I_DirPrefix+0xe8>
  AudioCompress() : AudioStream(1, inputQueueArray) { }
    1b18:	ldr	r0, [pc, #184]	; (1bd4 <_GLOBAL__sub_I_DirPrefix+0x1ac>)
				p->next_update = this;
    1b1a:	str	r1, [r2, #20]
AudioConnection          patchCord1(acq, 0, usb1, 0);
    1b1c:	mov	r2, r4
    1b1e:	str	r4, [sp, #0]
    1b20:	ldr	r3, [pc, #156]	; (1bc0 <_GLOBAL__sub_I_DirPrefix+0x198>)
			next_update = NULL;
    1b22:	str	r4, [r1, #20]
			cpu_cycles = 0;
    1b24:	str	r4, [r1, #4]
			numConnections = 0;
    1b26:	strb	r4, [r1, #10]
    1b28:	str	r0, [r1, #0]
    1b2a:	ldr	r1, [pc, #140]	; (1bb8 <_GLOBAL__sub_I_DirPrefix+0x190>)
    1b2c:	ldr	r0, [pc, #168]	; (1bd8 <_GLOBAL__sub_I_DirPrefix+0x1b0>)
    1b2e:	bl	c7ec <AudioConnection::AudioConnection(AudioStream&, unsigned char, AudioStream&, unsigned char)>
    1b32:	ldr	r2, [pc, #100]	; (1b98 <_GLOBAL__sub_I_DirPrefix+0x170>)
    1b34:	ldr	r1, [pc, #164]	; (1bdc <_GLOBAL__sub_I_DirPrefix+0x1b4>)
    1b36:	ldr	r0, [pc, #160]	; (1bd8 <_GLOBAL__sub_I_DirPrefix+0x1b0>)
    1b38:	bl	d204 <__aeabi_atexit>
AudioConnection          patchCord2(acq, 1, usb1, 1);
    1b3c:	movs	r2, #1
    1b3e:	ldr	r3, [pc, #128]	; (1bc0 <_GLOBAL__sub_I_DirPrefix+0x198>)
    1b40:	str	r2, [sp, #0]
    1b42:	ldr	r1, [pc, #116]	; (1bb8 <_GLOBAL__sub_I_DirPrefix+0x190>)
    1b44:	ldr	r0, [pc, #152]	; (1be0 <_GLOBAL__sub_I_DirPrefix+0x1b8>)
    1b46:	bl	c7ec <AudioConnection::AudioConnection(AudioStream&, unsigned char, AudioStream&, unsigned char)>
    1b4a:	ldr	r2, [pc, #76]	; (1b98 <_GLOBAL__sub_I_DirPrefix+0x170>)
    1b4c:	ldr	r1, [pc, #140]	; (1bdc <_GLOBAL__sub_I_DirPrefix+0x1b4>)
    1b4e:	ldr	r0, [pc, #144]	; (1be0 <_GLOBAL__sub_I_DirPrefix+0x1b8>)
    1b50:	bl	d204 <__aeabi_atexit>
  AudioConnection          patchCord3(acq,  0, proc, 0);
    1b54:	ldr	r3, [pc, #116]	; (1bcc <_GLOBAL__sub_I_DirPrefix+0x1a4>)
    1b56:	mov	r2, r4
    1b58:	ldr	r1, [pc, #92]	; (1bb8 <_GLOBAL__sub_I_DirPrefix+0x190>)
    1b5a:	str	r4, [sp, #0]
    1b5c:	ldr	r0, [pc, #132]	; (1be4 <_GLOBAL__sub_I_DirPrefix+0x1bc>)
    1b5e:	bl	c7ec <AudioConnection::AudioConnection(AudioStream&, unsigned char, AudioStream&, unsigned char)>
    1b62:	ldr	r2, [pc, #52]	; (1b98 <_GLOBAL__sub_I_DirPrefix+0x170>)
    1b64:	ldr	r1, [pc, #116]	; (1bdc <_GLOBAL__sub_I_DirPrefix+0x1b4>)
    1b66:	ldr	r0, [pc, #124]	; (1be4 <_GLOBAL__sub_I_DirPrefix+0x1bc>)
    1b68:	bl	d204 <__aeabi_atexit>
  AudioConnection          patchCord4(proc, 0, queue1, 0);
    1b6c:	mov	r2, r4
    1b6e:	ldr	r1, [pc, #92]	; (1bcc <_GLOBAL__sub_I_DirPrefix+0x1a4>)
    1b70:	ldr	r3, [pc, #84]	; (1bc8 <_GLOBAL__sub_I_DirPrefix+0x1a0>)
    1b72:	str	r4, [sp, #0]
    1b74:	ldr	r0, [pc, #112]	; (1be8 <_GLOBAL__sub_I_DirPrefix+0x1c0>)
    1b76:	bl	c7ec <AudioConnection::AudioConnection(AudioStream&, unsigned char, AudioStream&, unsigned char)>
    1b7a:	ldr	r2, [pc, #28]	; (1b98 <_GLOBAL__sub_I_DirPrefix+0x170>)
    1b7c:	ldr	r1, [pc, #92]	; (1bdc <_GLOBAL__sub_I_DirPrefix+0x1b4>)
    1b7e:	ldr	r0, [pc, #104]	; (1be8 <_GLOBAL__sub_I_DirPrefix+0x1c0>)
}
    1b80:	add	sp, #8
    1b82:	ldmia.w	sp!, {r4, r5, r6, lr}
  AudioConnection          patchCord4(proc, 0, queue1, 0);
    1b86:	b.w	d204 <__aeabi_atexit>
				first_update = this;
    1b8a:	str	r2, [r5, #0]
    1b8c:	b.n	1a72 <_GLOBAL__sub_I_DirPrefix+0x4a>
    1b8e:	mov	r4, r2
    1b90:	str	r2, [r5, #0]
    1b92:	b.n	1ae2 <_GLOBAL__sub_I_DirPrefix+0xba>
    1b94:	str	r2, [r5, #0]
    1b96:	b.n	1aaa <_GLOBAL__sub_I_DirPrefix+0x82>
    1b98:	.word	0x20001490
    1b9c:	.word	0x000001e5
    1ba0:	.word	0x200065bc
    1ba4:	.word	0x200079ac
    1ba8:	.word	0x20000a8c
    1bac:	.word	0x20006410
    1bb0:	.word	0x000009b5
    1bb4:	.word	0x200009c0
    1bb8:	.word	0x200068e8
    1bbc:	.word	0x20000adc
    1bc0:	.word	0x200080f4
    1bc4:	.word	0x200009d8
    1bc8:	.word	0x20007d08
    1bcc:	.word	0x20007cac
    1bd0:	.word	0x200009e4
    1bd4:	.word	0x200009cc
    1bd8:	.word	0x20007c5c
    1bdc:	.word	0x0000c8a9
    1be0:	.word	0x20007c70
    1be4:	.word	0x20007c84
    1be8:	.word	0x20007c98

00001bec <_GLOBAL__sub_I__ZN17AudioOutputI2SOct13block_ch1_1stE>:
uint16_t  AudioOutputI2SOct::ch6_offset = 0;
uint16_t  AudioOutputI2SOct::ch7_offset = 0;
uint16_t  AudioOutputI2SOct::ch8_offset = 0;
bool AudioOutputI2SOct::update_responsibility = false;
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES*4];
DMAChannel AudioOutputI2SOct::dma(false);
    1bec:	ldr	r2, [pc, #8]	; (1bf8 <_GLOBAL__sub_I__ZN17AudioOutputI2SOct13block_ch1_1stE+0xc>)
    1bee:	ldr	r1, [pc, #12]	; (1bfc <_GLOBAL__sub_I__ZN17AudioOutputI2SOct13block_ch1_1stE+0x10>)
    1bf0:	ldr	r0, [pc, #12]	; (1c00 <_GLOBAL__sub_I__ZN17AudioOutputI2SOct13block_ch1_1stE+0x14>)
    1bf2:	b.w	d204 <__aeabi_atexit>
    1bf6:	nop
    1bf8:	.word	0x20001490
    1bfc:	.word	0x000001e5
    1c00:	.word	0x2000657c

00001c04 <__tcf_0>:

extern uint8_t analog_write_res;
extern const struct _pwm_pin_info_struct pwm_pin_info[];
volatile audio_block_t * AudioOutputPWM::block = NULL;
DMAMEM __attribute__((aligned(32))) static uint16_t pwm_tx_buffer[2][AUDIO_BLOCK_SAMPLES * 2];
DMAChannel AudioOutputPWM::dma[2];
    1c04:	push	{r4, lr}
		release();
    1c06:	ldr	r4, [pc, #20]	; (1c1c <__tcf_0+0x18>)
    1c08:	add.w	r0, r4, #8
    1c0c:	bl	c344 <DMAChannel::release()>
    1c10:	mov	r0, r4
    1c12:	ldmia.w	sp!, {r4, lr}
    1c16:	b.w	c344 <DMAChannel::release()>
    1c1a:	nop
    1c1c:	.word	0x200064dc

00001c20 <_GLOBAL__sub_I__ZN14AudioOutputPWM21update_responsibilityE>:
	old_block = (audio_block_t*)block ;  // block is defined as volatile
	block = new_block ;
	__enable_irq();
	if (old_block)
		release (old_block);
}
    1c20:	push	{r4, lr}
		begin();
    1c22:	ldr	r4, [pc, #32]	; (1c44 <_GLOBAL__sub_I__ZN14AudioOutputPWM21update_responsibilityE+0x24>)
    1c24:	movs	r1, #0
    1c26:	mov	r0, r4
    1c28:	bl	c290 <DMAChannel::begin(bool)>
    1c2c:	add.w	r0, r4, #8
    1c30:	movs	r1, #0
    1c32:	bl	c290 <DMAChannel::begin(bool)>
DMAChannel AudioOutputPWM::dma[2];
    1c36:	ldr	r2, [pc, #16]	; (1c48 <_GLOBAL__sub_I__ZN14AudioOutputPWM21update_responsibilityE+0x28>)
    1c38:	ldr	r1, [pc, #16]	; (1c4c <_GLOBAL__sub_I__ZN14AudioOutputPWM21update_responsibilityE+0x2c>)
    1c3a:	movs	r0, #0
}
    1c3c:	ldmia.w	sp!, {r4, lr}
DMAChannel AudioOutputPWM::dma[2];
    1c40:	b.w	d204 <__aeabi_atexit>
    1c44:	.word	0x200064dc
    1c48:	.word	0x20001490
    1c4c:	.word	0x00001c05

00001c50 <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE>:
DMAChannel AudioInputI2S::dma(false);
    1c50:	ldr	r2, [pc, #8]	; (1c5c <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE+0xc>)
    1c52:	ldr	r1, [pc, #12]	; (1c60 <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE+0x10>)
    1c54:	ldr	r0, [pc, #12]	; (1c64 <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE+0x14>)
    1c56:	b.w	d204 <__aeabi_atexit>
    1c5a:	nop
    1c5c:	.word	0x20001490
    1c60:	.word	0x000001e5
    1c64:	.word	0x2000648c

00001c68 <_GLOBAL__sub_I__ZN19AudioOutputPT8211_214block_left_1stE>:
DMAChannel AudioOutputPT8211_2::dma(false);
    1c68:	ldr	r2, [pc, #8]	; (1c74 <_GLOBAL__sub_I__ZN19AudioOutputPT8211_214block_left_1stE+0xc>)
    1c6a:	ldr	r1, [pc, #12]	; (1c78 <_GLOBAL__sub_I__ZN19AudioOutputPT8211_214block_left_1stE+0x10>)
    1c6c:	ldr	r0, [pc, #12]	; (1c7c <_GLOBAL__sub_I__ZN19AudioOutputPT8211_214block_left_1stE+0x14>)
    1c6e:	b.w	d204 <__aeabi_atexit>
    1c72:	nop
    1c74:	.word	0x20001490
    1c78:	.word	0x000001e5
    1c7c:	.word	0x200065a4

00001c80 <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE>:
#if defined(AUDIO_PT8211_OVERSAMPLING)
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES*4];
#else
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES];
#endif
DMAChannel AudioOutputPT8211::dma(false);
    1c80:	ldr	r2, [pc, #8]	; (1c8c <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE+0xc>)
    1c82:	ldr	r1, [pc, #12]	; (1c90 <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE+0x10>)
    1c84:	ldr	r0, [pc, #12]	; (1c94 <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE+0x14>)
    1c86:	b.w	d204 <__aeabi_atexit>
    1c8a:	nop
    1c8c:	.word	0x20001490
    1c90:	.word	0x000001e5
    1c94:	.word	0x20006584

00001c98 <_GLOBAL__sub_I__ZN16AudioInputSPDIF310block_leftE>:
static uint32_t spdif_rx_buffer[AUDIO_BLOCK_SAMPLES * 4];
audio_block_t * AudioInputSPDIF3::block_left = NULL;
audio_block_t * AudioInputSPDIF3::block_right = NULL;
uint16_t AudioInputSPDIF3::block_offset = 0;
bool AudioInputSPDIF3::update_responsibility = false;
DMAChannel AudioInputSPDIF3::dma(false);
    1c98:	ldr	r2, [pc, #8]	; (1ca4 <_GLOBAL__sub_I__ZN16AudioInputSPDIF310block_leftE+0xc>)
    1c9a:	ldr	r1, [pc, #12]	; (1ca8 <_GLOBAL__sub_I__ZN16AudioInputSPDIF310block_leftE+0x10>)
    1c9c:	ldr	r0, [pc, #12]	; (1cac <_GLOBAL__sub_I__ZN16AudioInputSPDIF310block_leftE+0x14>)
    1c9e:	b.w	d204 <__aeabi_atexit>
    1ca2:	nop
    1ca4:	.word	0x20001490
    1ca8:	.word	0x000001e5
    1cac:	.word	0x2000655c

00001cb0 <_GLOBAL__sub_I__ZN14AudioInputTDM214block_incomingE>:
DMAChannel AudioInputTDM2::dma(false);
    1cb0:	ldr	r2, [pc, #8]	; (1cbc <_GLOBAL__sub_I__ZN14AudioInputTDM214block_incomingE+0xc>)
    1cb2:	ldr	r1, [pc, #12]	; (1cc0 <_GLOBAL__sub_I__ZN14AudioInputTDM214block_incomingE+0x10>)
    1cb4:	ldr	r0, [pc, #12]	; (1cc4 <_GLOBAL__sub_I__ZN14AudioInputTDM214block_incomingE+0x14>)
    1cb6:	b.w	d204 <__aeabi_atexit>
    1cba:	nop
    1cbc:	.word	0x20001490
    1cc0:	.word	0x000001e5
    1cc4:	.word	0x200064c4

00001cc8 <_GLOBAL__sub_I__ZN16AudioInputAnalog3dmaE>:
#include <Arduino.h>
#include "input_adc.h"

extern "C" void xbar_connect(unsigned int input, unsigned int output);

DMAChannel AudioInputAnalog::dma(false);
    1cc8:	ldr	r2, [pc, #8]	; (1cd4 <_GLOBAL__sub_I__ZN16AudioInputAnalog3dmaE+0xc>)
    1cca:	ldr	r1, [pc, #12]	; (1cd8 <_GLOBAL__sub_I__ZN16AudioInputAnalog3dmaE+0x10>)
    1ccc:	ldr	r0, [pc, #12]	; (1cdc <_GLOBAL__sub_I__ZN16AudioInputAnalog3dmaE+0x14>)
    1cce:	b.w	d204 <__aeabi_atexit>
    1cd2:	nop
    1cd4:	.word	0x20001490
    1cd8:	.word	0x000001e5
    1cdc:	.word	0x20006544

00001ce0 <_GLOBAL__sub_I__ZN14AudioInputPDM210block_leftE>:

DMAMEM __attribute__((aligned(32))) static uint32_t pdm_buffer[AUDIO_BLOCK_SAMPLES*4];
static uint32_t leftover[14];
audio_block_t * AudioInputPDM2::block_left = NULL;
bool AudioInputPDM2::update_responsibility = false;
DMAChannel AudioInputPDM2::dma(false);
    1ce0:	ldr	r2, [pc, #8]	; (1cec <_GLOBAL__sub_I__ZN14AudioInputPDM210block_leftE+0xc>)
    1ce2:	ldr	r1, [pc, #12]	; (1cf0 <_GLOBAL__sub_I__ZN14AudioInputPDM210block_leftE+0x10>)
    1ce4:	ldr	r0, [pc, #12]	; (1cf4 <_GLOBAL__sub_I__ZN14AudioInputPDM210block_leftE+0x14>)
    1ce6:	b.w	d204 <__aeabi_atexit>
    1cea:	nop
    1cec:	.word	0x20001490
    1cf0:	.word	0x000001e5
    1cf4:	.word	0x200064bc

00001cf8 <_GLOBAL__sub_I__ZN14AudioInputI2S210block_leftE>:
DMAMEM __attribute__((aligned(32))) static uint32_t i2s2_rx_buffer[AUDIO_BLOCK_SAMPLES];
audio_block_t * AudioInputI2S2::block_left = NULL;
audio_block_t * AudioInputI2S2::block_right = NULL;
uint16_t AudioInputI2S2::block_offset = 0;
bool AudioInputI2S2::update_responsibility = false;
DMAChannel AudioInputI2S2::dma(false);
    1cf8:	ldr	r2, [pc, #8]	; (1d04 <_GLOBAL__sub_I__ZN14AudioInputI2S210block_leftE+0xc>)
    1cfa:	ldr	r1, [pc, #12]	; (1d08 <_GLOBAL__sub_I__ZN14AudioInputI2S210block_leftE+0x10>)
    1cfc:	ldr	r0, [pc, #12]	; (1d0c <_GLOBAL__sub_I__ZN14AudioInputI2S210block_leftE+0x14>)
    1cfe:	b.w	d204 <__aeabi_atexit>
    1d02:	nop
    1d04:	.word	0x20001490
    1d08:	.word	0x000001e5
    1d0c:	.word	0x200064b4

00001d10 <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E>:
audio_block_t * AudioInputI2SQuad::block_ch2 = NULL;
audio_block_t * AudioInputI2SQuad::block_ch3 = NULL;
audio_block_t * AudioInputI2SQuad::block_ch4 = NULL;
uint16_t AudioInputI2SQuad::block_offset = 0;
bool AudioInputI2SQuad::update_responsibility = false;
DMAChannel AudioInputI2SQuad::dma(false);
    1d10:	ldr	r2, [pc, #8]	; (1d1c <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E+0xc>)
    1d12:	ldr	r1, [pc, #12]	; (1d20 <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E+0x10>)
    1d14:	ldr	r0, [pc, #12]	; (1d24 <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E+0x14>)
    1d16:	b.w	d204 <__aeabi_atexit>
    1d1a:	nop
    1d1c:	.word	0x20001490
    1d20:	.word	0x000001e5
    1d24:	.word	0x2000656c

00001d28 <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE>:
uint16_t  AudioOutputI2SQuad::ch2_offset = 0;
uint16_t  AudioOutputI2SQuad::ch3_offset = 0;
uint16_t  AudioOutputI2SQuad::ch4_offset = 0;
bool AudioOutputI2SQuad::update_responsibility = false;
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES*2];
DMAChannel AudioOutputI2SQuad::dma(false);
    1d28:	ldr	r2, [pc, #8]	; (1d34 <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE+0xc>)
    1d2a:	ldr	r1, [pc, #12]	; (1d38 <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE+0x10>)
    1d2c:	ldr	r0, [pc, #12]	; (1d3c <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE+0x14>)
    1d2e:	b.w	d204 <__aeabi_atexit>
    1d32:	nop
    1d34:	.word	0x20001490
    1d38:	.word	0x000001e5
    1d3c:	.word	0x2000659c

00001d40 <SPIClass::beginTransaction(SPISettings)>:
	void notUsingInterrupt(IRQ_NUMBER_t interruptName);

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
    1d40:	push	{r4, r5}
    1d42:	sub	sp, #8
    1d44:	mov	r4, r1
    1d46:	add	r3, sp, #8
    1d48:	stmdb	r3, {r1, r2}
		if (interruptMasksUsed) {
    1d4c:	ldrb	r3, [r0, #19]
    1d4e:	cmp	r3, #0
    1d50:	beq.n	1db4 <SPIClass::beginTransaction(SPISettings)+0x74>
			__disable_irq();
    1d52:	cpsid	i
			if (interruptMasksUsed & 0x01) {
    1d54:	ldrb	r3, [r0, #19]
    1d56:	lsls	r2, r3, #31
    1d58:	bpl.n	1d6c <SPIClass::beginTransaction(SPISettings)+0x2c>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    1d5a:	mov.w	r1, #3758153728	; 0xe000e000
    1d5e:	ldr	r5, [r0, #20]
    1d60:	ldr.w	r2, [r1, #384]	; 0x180
    1d64:	ands	r2, r5
    1d66:	str	r2, [r0, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    1d68:	str.w	r2, [r1, #384]	; 0x180
			}
			if (interruptMasksUsed & 0x02) {
    1d6c:	lsls	r5, r3, #30
    1d6e:	bpl.n	1d82 <SPIClass::beginTransaction(SPISettings)+0x42>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    1d70:	mov.w	r1, #3758153728	; 0xe000e000
    1d74:	ldr	r5, [r0, #24]
    1d76:	ldr.w	r2, [r1, #388]	; 0x184
    1d7a:	ands	r2, r5
    1d7c:	str	r2, [r0, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    1d7e:	str.w	r2, [r1, #388]	; 0x184
			}
			if (interruptMasksUsed & 0x04) {
    1d82:	lsls	r1, r3, #29
    1d84:	bpl.n	1d98 <SPIClass::beginTransaction(SPISettings)+0x58>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    1d86:	mov.w	r1, #3758153728	; 0xe000e000
    1d8a:	ldr	r5, [r0, #28]
    1d8c:	ldr.w	r2, [r1, #392]	; 0x188
    1d90:	ands	r2, r5
    1d92:	str	r2, [r0, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    1d94:	str.w	r2, [r1, #392]	; 0x188
			}
			if (interruptMasksUsed & 0x08) {
    1d98:	lsls	r2, r3, #28
    1d9a:	bpl.n	1dae <SPIClass::beginTransaction(SPISettings)+0x6e>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    1d9c:	mov.w	r1, #3758153728	; 0xe000e000
    1da0:	ldr	r5, [r0, #32]
    1da2:	ldr.w	r2, [r1, #396]	; 0x18c
    1da6:	ands	r2, r5
    1da8:	str	r2, [r0, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    1daa:	str.w	r2, [r1, #396]	; 0x18c
			}
			if (interruptMasksUsed & 0x10) {
    1dae:	lsls	r3, r3, #27
    1db0:	bmi.n	1e12 <SPIClass::beginTransaction(SPISettings)+0xd2>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
				NVIC_ICER4 = interruptSave[4];
			}
			__enable_irq();
    1db2:	cpsie	i
		}
		inTransactionFlag = 1;
		#endif

		//printf("trans\n");
		if (settings.clock() != _clock) {
    1db4:	ldr	r3, [r0, #8]
    1db6:	cmp	r4, r3
    1db8:	beq.n	1e26 <SPIClass::beginTransaction(SPISettings)+0xe6>
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
    1dba:	ldr	r3, [pc, #136]	; (1e44 <SPIClass::beginTransaction(SPISettings)+0x104>)
		    _clock = settings.clock();
    1dbc:	str	r4, [r0, #8]
			uint32_t cbcmr = CCM_CBCMR;
    1dbe:	ldr	r3, [r3, #24]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    1dc0:	ldr	r2, [pc, #132]	; (1e48 <SPIClass::beginTransaction(SPISettings)+0x108>)
    1dc2:	ubfx	r1, r3, #4, #2
    1dc6:	ubfx	r3, r3, #26, #3
    1dca:	ldr.w	r1, [r2, r1, lsl #2]
    1dce:	adds	r3, #1
    1dd0:	udiv	r2, r1, r3
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    1dd4:	cbz	r4, 1e0a <SPIClass::beginTransaction(SPISettings)+0xca>

			if (d && clkhz/d > _clock) d++;
    1dd6:	cmp	r4, r2
    1dd8:	bhi.n	1e2a <SPIClass::beginTransaction(SPISettings)+0xea>
			d = _clock ? clkhz/_clock : clkhz;
    1dda:	udiv	r3, r2, r4
			if (d && clkhz/d > _clock) d++;
    1dde:	udiv	r2, r2, r3
    1de2:	cmp	r4, r2
    1de4:	bcc.n	1e40 <SPIClass::beginTransaction(SPISettings)+0x100>
			if (d > 257) d= 257;  // max div
    1de6:	cmp.w	r3, #258	; 0x102
    1dea:	bcc.n	1e2e <SPIClass::beginTransaction(SPISettings)+0xee>
    1dec:	ldr	r4, [pc, #92]	; (1e4c <SPIClass::beginTransaction(SPISettings)+0x10c>)
				div = d-2;
			} else {
				div =0;
			}
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    1dee:	str	r4, [r0, #12]
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    1df0:	ldr	r3, [r0, #0]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    1df2:	movs	r2, #3
		port().CR = 0;
    1df4:	movs	r0, #0
		port().TCR = settings.tcr;
    1df6:	ldr	r1, [sp, #4]
		port().CR = 0;
    1df8:	str	r0, [r3, #16]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    1dfa:	str	r2, [r3, #36]	; 0x24
		port().CR = LPSPI_CR_MEN;
    1dfc:	movs	r2, #1
		port().CCR = _ccr;
    1dfe:	str	r4, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
    1e00:	str	r1, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    1e02:	str	r2, [r3, #16]
	}
    1e04:	add	sp, #8
    1e06:	pop	{r4, r5}
    1e08:	bx	lr
			if (d && clkhz/d > _clock) d++;
    1e0a:	cmp	r1, r3
    1e0c:	bcc.n	1dee <SPIClass::beginTransaction(SPISettings)+0xae>
    1e0e:	adds	r3, r2, #1
    1e10:	b.n	1de6 <SPIClass::beginTransaction(SPISettings)+0xa6>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    1e12:	mov.w	r2, #3758153728	; 0xe000e000
    1e16:	ldr	r1, [r0, #36]	; 0x24
    1e18:	ldr.w	r3, [r2, #400]	; 0x190
    1e1c:	ands	r3, r1
    1e1e:	str	r3, [r0, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    1e20:	str.w	r3, [r2, #400]	; 0x190
    1e24:	b.n	1db2 <SPIClass::beginTransaction(SPISettings)+0x72>
		port().CCR = _ccr;
    1e26:	ldr	r4, [r0, #12]
    1e28:	b.n	1df0 <SPIClass::beginTransaction(SPISettings)+0xb0>
    1e2a:	movs	r4, #0
    1e2c:	b.n	1dee <SPIClass::beginTransaction(SPISettings)+0xae>
			if (d > 2) {
    1e2e:	cmp	r3, #2
    1e30:	bls.n	1e2a <SPIClass::beginTransaction(SPISettings)+0xea>
				div = d-2;
    1e32:	subs	r3, #2
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    1e34:	lsrs	r2, r3, #1
    1e36:	lsls	r4, r2, #8
    1e38:	orr.w	r4, r4, r2, lsl #16
    1e3c:	orrs	r4, r3
    1e3e:	b.n	1dee <SPIClass::beginTransaction(SPISettings)+0xae>
			d = _clock ? clkhz/_clock : clkhz;
    1e40:	mov	r2, r3
    1e42:	b.n	1e0e <SPIClass::beginTransaction(SPISettings)+0xce>
    1e44:	.word	0x400fc000
    1e48:	.word	0x20000c28
    1e4c:	.word	0x007f7fff

00001e50 <_GLOBAL__sub_I__ZN15AudioOutputTDM211block_inputE>:
audio_block_t * AudioOutputTDM2::block_input[16] = {
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr,
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr
};
bool AudioOutputTDM2::update_responsibility = false;
DMAChannel AudioOutputTDM2::dma(false);
    1e50:	ldr	r2, [pc, #8]	; (1e5c <_GLOBAL__sub_I__ZN15AudioOutputTDM211block_inputE+0xc>)
    1e52:	ldr	r1, [pc, #12]	; (1e60 <_GLOBAL__sub_I__ZN15AudioOutputTDM211block_inputE+0x10>)
    1e54:	ldr	r0, [pc, #12]	; (1e64 <_GLOBAL__sub_I__ZN15AudioOutputTDM211block_inputE+0x14>)
    1e56:	b.w	d204 <__aeabi_atexit>
    1e5a:	nop
    1e5c:	.word	0x20001490
    1e60:	.word	0x000001e5
    1e64:	.word	0x2000653c

00001e68 <_GLOBAL__sub_I__ZN15AudioOutputI2S214block_left_1stE>:
audio_block_t * AudioOutputI2S2::block_left_2nd = NULL;
audio_block_t * AudioOutputI2S2::block_right_2nd = NULL;
uint16_t  AudioOutputI2S2::block_left_offset = 0;
uint16_t  AudioOutputI2S2::block_right_offset = 0;
bool AudioOutputI2S2::update_responsibility = false;
DMAChannel AudioOutputI2S2::dma(false);
    1e68:	ldr	r2, [pc, #8]	; (1e74 <_GLOBAL__sub_I__ZN15AudioOutputI2S214block_left_1stE+0xc>)
    1e6a:	ldr	r1, [pc, #12]	; (1e78 <_GLOBAL__sub_I__ZN15AudioOutputI2S214block_left_1stE+0x10>)
    1e6c:	ldr	r0, [pc, #12]	; (1e7c <_GLOBAL__sub_I__ZN15AudioOutputI2S214block_left_1stE+0x14>)
    1e6e:	b.w	d204 <__aeabi_atexit>
    1e72:	nop
    1e74:	.word	0x20001490
    1e78:	.word	0x000001e5
    1e7c:	.word	0x20006534

00001e80 <_GLOBAL__sub_I__ZN17AudioOutputI2SHex13block_ch1_1stE>:
uint16_t  AudioOutputI2SHex::ch4_offset = 0;
uint16_t  AudioOutputI2SHex::ch5_offset = 0;
uint16_t  AudioOutputI2SHex::ch6_offset = 0;
bool AudioOutputI2SHex::update_responsibility = false;
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES*3];
DMAChannel AudioOutputI2SHex::dma(false);
    1e80:	ldr	r2, [pc, #8]	; (1e8c <_GLOBAL__sub_I__ZN17AudioOutputI2SHex13block_ch1_1stE+0xc>)
    1e82:	ldr	r1, [pc, #12]	; (1e90 <_GLOBAL__sub_I__ZN17AudioOutputI2SHex13block_ch1_1stE+0x10>)
    1e84:	ldr	r0, [pc, #12]	; (1e94 <_GLOBAL__sub_I__ZN17AudioOutputI2SHex13block_ch1_1stE+0x14>)
    1e86:	b.w	d204 <__aeabi_atexit>
    1e8a:	nop
    1e8c:	.word	0x20001490
    1e90:	.word	0x000001e5
    1e94:	.word	0x20006574

00001e98 <_GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E>:
audio_block_t * AudioInputI2SOct::block_ch6 = NULL;
audio_block_t * AudioInputI2SOct::block_ch7 = NULL;
audio_block_t * AudioInputI2SOct::block_ch8 = NULL;
uint16_t AudioInputI2SOct::block_offset = 0;
bool AudioInputI2SOct::update_responsibility = false;
DMAChannel AudioInputI2SOct::dma(false);
    1e98:	ldr	r2, [pc, #8]	; (1ea4 <_GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E+0xc>)
    1e9a:	ldr	r1, [pc, #12]	; (1ea8 <_GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E+0x10>)
    1e9c:	ldr	r0, [pc, #12]	; (1eac <_GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E+0x14>)
    1e9e:	b.w	d204 <__aeabi_atexit>
    1ea2:	nop
    1ea4:	.word	0x20001490
    1ea8:	.word	0x000001e5
    1eac:	.word	0x20006554

00001eb0 <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE>:
audio_block_t * AudioOutputTDM::block_input[16] = {
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr,
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr
};
bool AudioOutputTDM::update_responsibility = false;
DMAChannel AudioOutputTDM::dma(false);
    1eb0:	ldr	r2, [pc, #8]	; (1ebc <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE+0xc>)
    1eb2:	ldr	r1, [pc, #12]	; (1ec0 <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE+0x10>)
    1eb4:	ldr	r0, [pc, #12]	; (1ec4 <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE+0x14>)
    1eb6:	b.w	d204 <__aeabi_atexit>
    1eba:	nop
    1ebc:	.word	0x20001490
    1ec0:	.word	0x000001e5
    1ec4:	.word	0x200064ec

00001ec8 <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE>:
DMAChannel AudioInputTDM::dma(false);
    1ec8:	ldr	r2, [pc, #8]	; (1ed4 <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE+0xc>)
    1eca:	ldr	r1, [pc, #12]	; (1ed8 <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE+0x10>)
    1ecc:	ldr	r0, [pc, #12]	; (1edc <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE+0x14>)
    1ece:	b.w	d204 <__aeabi_atexit>
    1ed2:	nop
    1ed4:	.word	0x20001490
    1ed8:	.word	0x000001e5
    1edc:	.word	0x2000649c

00001ee0 <_GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E>:
audio_block_t * AudioInputI2SHex::block_ch4 = NULL;
audio_block_t * AudioInputI2SHex::block_ch5 = NULL;
audio_block_t * AudioInputI2SHex::block_ch6 = NULL;
uint16_t AudioInputI2SHex::block_offset = 0;
bool AudioInputI2SHex::update_responsibility = false;
DMAChannel AudioInputI2SHex::dma(false);
    1ee0:	ldr	r2, [pc, #8]	; (1eec <_GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E+0xc>)
    1ee2:	ldr	r1, [pc, #12]	; (1ef0 <_GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E+0x10>)
    1ee4:	ldr	r0, [pc, #12]	; (1ef4 <_GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E+0x14>)
    1ee6:	b.w	d204 <__aeabi_atexit>
    1eea:	nop
    1eec:	.word	0x20001490
    1ef0:	.word	0x000001e5
    1ef4:	.word	0x2000654c

00001ef8 <_GLOBAL__sub_I__ZN17AudioOutputSPDIF314block_left_1stE>:
audio_block_t * AudioOutputSPDIF3::block_left_1st = nullptr;
audio_block_t * AudioOutputSPDIF3::block_right_1st = nullptr;
audio_block_t * AudioOutputSPDIF3::block_left_2nd = nullptr;
audio_block_t * AudioOutputSPDIF3::block_right_2nd = nullptr;
bool AudioOutputSPDIF3::update_responsibility = false;
DMAChannel AudioOutputSPDIF3::dma(false);
    1ef8:	ldr	r2, [pc, #8]	; (1f04 <_GLOBAL__sub_I__ZN17AudioOutputSPDIF314block_left_1stE+0xc>)
    1efa:	ldr	r1, [pc, #12]	; (1f08 <_GLOBAL__sub_I__ZN17AudioOutputSPDIF314block_left_1stE+0x10>)
    1efc:	ldr	r0, [pc, #12]	; (1f0c <_GLOBAL__sub_I__ZN17AudioOutputSPDIF314block_left_1stE+0x14>)
    1efe:	b.w	d204 <__aeabi_atexit>
    1f02:	nop
    1f04:	.word	0x20001490
    1f08:	.word	0x000001e5
    1f0c:	.word	0x20006594

00001f10 <_GLOBAL__sub_I__ZN14AudioOutputMQS14block_left_1stE>:
audio_block_t * AudioOutputMQS::block_left_2nd = NULL;
audio_block_t * AudioOutputMQS::block_right_2nd = NULL;
uint16_t  AudioOutputMQS::block_left_offset = 0;
uint16_t  AudioOutputMQS::block_right_offset = 0;
bool AudioOutputMQS::update_responsibility = false;
DMAChannel AudioOutputMQS::dma(false);
    1f10:	ldr	r2, [pc, #8]	; (1f1c <_GLOBAL__sub_I__ZN14AudioOutputMQS14block_left_1stE+0xc>)
    1f12:	ldr	r1, [pc, #12]	; (1f20 <_GLOBAL__sub_I__ZN14AudioOutputMQS14block_left_1stE+0x10>)
    1f14:	ldr	r0, [pc, #12]	; (1f24 <_GLOBAL__sub_I__ZN14AudioOutputMQS14block_left_1stE+0x14>)
    1f16:	b.w	d204 <__aeabi_atexit>
    1f1a:	nop
    1f1c:	.word	0x20001490
    1f20:	.word	0x000001e5
    1f24:	.word	0x200064d4

00001f28 <AudioRecordQueue::update()>:
	release(userblock);
	userblock = NULL;
}

void AudioRecordQueue::update(void)
{
    1f28:	push	{r4, lr}
	audio_block_t *block;
	uint32_t h;

	block = receiveReadOnly();
    1f2a:	movs	r1, #0
{
    1f2c:	mov	r4, r0
	block = receiveReadOnly();
    1f2e:	bl	c6bc <AudioStream::receiveReadOnly(unsigned int)>
	if (!block) return;
    1f32:	cbz	r0, 1f5c <AudioRecordQueue::update()+0x34>
	if (!enabled) {
    1f34:	ldrb.w	r3, [r4, #870]	; 0x366
    1f38:	cbz	r3, 1f5e <AudioRecordQueue::update()+0x36>
		release(block);
		return;
	}
	h = head + 1;
    1f3a:	ldrb.w	r3, [r4, #868]	; 0x364
	if (h >= max_buffers) h = 0;
	if (h == tail) {
    1f3e:	ldrb.w	r1, [r4, #869]	; 0x365
	h = head + 1;
    1f42:	adds	r3, #1
	if (h >= max_buffers) h = 0;
    1f44:	cmp	r3, #209	; 0xd1
    1f46:	it	ge
    1f48:	movge	r3, #0
	if (h == tail) {
    1f4a:	cmp	r1, r3
    1f4c:	beq.n	1f5e <AudioRecordQueue::update()+0x36>
		release(block);
	} else {
		queue[h] = block;
    1f4e:	adds	r1, r3, #6
		head = h;
    1f50:	uxtb	r3, r3
		queue[h] = block;
    1f52:	add.w	r1, r4, r1, lsl #2
    1f56:	str	r0, [r1, #4]
		head = h;
    1f58:	strb.w	r3, [r4, #868]	; 0x364
	}
}
    1f5c:	pop	{r4, pc}
    1f5e:	ldmia.w	sp!, {r4, lr}
		release(block);
    1f62:	b.w	c624 <AudioStream::release(audio_block_struct*)>
    1f66:	nop

00001f68 <AudioRecordQueue::available()>:
	h = head;
    1f68:	ldrb.w	r1, [r0, #868]	; 0x364
	t = tail;
    1f6c:	ldrb.w	r2, [r0, #869]	; 0x365
	h = head;
    1f70:	uxtb	r3, r1
	if (h >= t) return h - t;
    1f72:	cmp	r1, r2
	t = tail;
    1f74:	uxtb	r0, r2
	return max_buffers + h - t;
    1f76:	it	cc
    1f78:	addcc	r3, #209	; 0xd1
    1f7a:	subs	r0, r3, r0
}
    1f7c:	bx	lr
    1f7e:	nop

00001f80 <AudioRecordQueue::clear()>:
{
    1f80:	push	{r3, r4, r5, lr}
    1f82:	mov	r5, r0
	if (userblock) {
    1f84:	ldr.w	r0, [r0, #864]	; 0x360
    1f88:	cbz	r0, 1f94 <AudioRecordQueue::clear()+0x14>
		release(userblock);
    1f8a:	bl	c624 <AudioStream::release(audio_block_struct*)>
		userblock = NULL;
    1f8e:	movs	r3, #0
    1f90:	str.w	r3, [r5, #864]	; 0x360
	t = tail;
    1f94:	ldrb.w	r2, [r5, #869]	; 0x365
	while (t != head) {
    1f98:	ldrb.w	r3, [r5, #868]	; 0x364
	t = tail;
    1f9c:	uxtb	r4, r2
	while (t != head) {
    1f9e:	cmp	r2, r3
    1fa0:	uxtb	r1, r3
    1fa2:	beq.n	1fc2 <AudioRecordQueue::clear()+0x42>
		if (++t >= max_buffers) t = 0;
    1fa4:	adds	r4, #1
    1fa6:	cmp	r4, #209	; 0xd1
    1fa8:	it	cs
    1faa:	movcs	r4, #0
		release(queue[t]);
    1fac:	adds	r3, r4, #6
    1fae:	add.w	r3, r5, r3, lsl #2
    1fb2:	ldr	r0, [r3, #4]
    1fb4:	bl	c624 <AudioStream::release(audio_block_struct*)>
	while (t != head) {
    1fb8:	ldrb.w	r3, [r5, #868]	; 0x364
    1fbc:	cmp	r3, r4
    1fbe:	bne.n	1fa4 <AudioRecordQueue::clear()+0x24>
	tail = t;
    1fc0:	uxtb	r1, r4
    1fc2:	strb.w	r1, [r5, #869]	; 0x365
}
    1fc6:	pop	{r3, r4, r5, pc}

00001fc8 <AudioRecordQueue::readBuffer()>:
	if (userblock) return NULL;
    1fc8:	ldr.w	r2, [r0, #864]	; 0x360
    1fcc:	cbnz	r2, 1ffc <AudioRecordQueue::readBuffer()+0x34>
	t = tail;
    1fce:	ldrb.w	r1, [r0, #869]	; 0x365
	if (t == head) return NULL;
    1fd2:	ldrb.w	ip, [r0, #868]	; 0x364
	t = tail;
    1fd6:	uxtb	r3, r1
	if (t == head) return NULL;
    1fd8:	cmp	r1, ip
    1fda:	beq.n	1ff8 <AudioRecordQueue::readBuffer()+0x30>
	if (++t >= max_buffers) t = 0;
    1fdc:	adds	r3, #1
    1fde:	cmp	r3, #208	; 0xd0
    1fe0:	ite	hi
    1fe2:	movhi	r3, r2
	tail = t;
    1fe4:	uxtbls	r2, r3
	userblock = queue[t];
    1fe6:	adds	r3, #6
    1fe8:	add.w	r3, r0, r3, lsl #2
    1fec:	ldr	r3, [r3, #4]
	tail = t;
    1fee:	strb.w	r2, [r0, #869]	; 0x365
	return userblock->data;
    1ff2:	adds	r2, r3, #4
	userblock = queue[t];
    1ff4:	str.w	r3, [r0, #864]	; 0x360
}
    1ff8:	mov	r0, r2
    1ffa:	bx	lr
	if (userblock) return NULL;
    1ffc:	movs	r2, #0
}
    1ffe:	mov	r0, r2
    2000:	bx	lr
    2002:	nop

00002004 <AudioRecordQueue::freeBuffer()>:
{
    2004:	push	{r4, lr}
    2006:	mov	r4, r0
	if (userblock == NULL) return;
    2008:	ldr.w	r0, [r0, #864]	; 0x360
    200c:	cbz	r0, 2018 <AudioRecordQueue::freeBuffer()+0x14>
	release(userblock);
    200e:	bl	c624 <AudioStream::release(audio_block_struct*)>
	userblock = NULL;
    2012:	movs	r3, #0
    2014:	str.w	r3, [r4, #864]	; 0x360
}
    2018:	pop	{r4, pc}
    201a:	nop

0000201c <_GLOBAL__sub_I__ZN21AsyncAudioInputSPDIF310microsLastE>:
static float bufferL[bufferLength];

volatile int32_t AsyncAudioInputSPDIF3::buffer_offset = 0;	// read by resample/ written in spdif input isr -> copied at the beginning of 'resmaple' protected by __disable_irq() in resample
int32_t AsyncAudioInputSPDIF3::resample_offset = 0; // read/written by resample/ read in spdif input isr -> no protection needed?

DMAChannel AsyncAudioInputSPDIF3::dma(false);
    201c:	ldr	r2, [pc, #8]	; (2028 <_GLOBAL__sub_I__ZN21AsyncAudioInputSPDIF310microsLastE+0xc>)
    201e:	ldr	r1, [pc, #12]	; (202c <_GLOBAL__sub_I__ZN21AsyncAudioInputSPDIF310microsLastE+0x10>)
    2020:	ldr	r0, [pc, #12]	; (2030 <_GLOBAL__sub_I__ZN21AsyncAudioInputSPDIF310microsLastE+0x14>)
    2022:	b.w	d204 <__aeabi_atexit>
    2026:	nop
    2028:	.word	0x20001490
    202c:	.word	0x000001e5
    2030:	.word	0x200065ac

00002034 <_GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE>:
#if defined(__IMXRT1062__) || defined(KINETISK)
DMAMEM __attribute__((aligned(32))) static uint32_t pdm_buffer[AUDIO_BLOCK_SAMPLES*4];
static uint32_t leftover[14];
audio_block_t * AudioInputPDM::block_left = NULL;
bool AudioInputPDM::update_responsibility = false;
DMAChannel AudioInputPDM::dma(false);
    2034:	ldr	r2, [pc, #8]	; (2040 <_GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE+0xc>)
    2036:	ldr	r1, [pc, #12]	; (2044 <_GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE+0x10>)
    2038:	ldr	r0, [pc, #12]	; (2048 <_GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE+0x14>)
    203a:	b.w	d204 <__aeabi_atexit>
    203e:	nop
    2040:	.word	0x20001490
    2044:	.word	0x000001e5
    2048:	.word	0x20006494

0000204c <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE>:
audio_block_t * AudioOutputI2S::block_left_2nd = NULL;
audio_block_t * AudioOutputI2S::block_right_2nd = NULL;
uint16_t  AudioOutputI2S::block_left_offset = 0;
uint16_t  AudioOutputI2S::block_right_offset = 0;
bool AudioOutputI2S::update_responsibility = false;
DMAChannel AudioOutputI2S::dma(false);
    204c:	ldr	r2, [pc, #8]	; (2058 <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE+0xc>)
    204e:	ldr	r1, [pc, #12]	; (205c <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE+0x10>)
    2050:	ldr	r0, [pc, #12]	; (2060 <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE+0x14>)
    2052:	b.w	d204 <__aeabi_atexit>
    2056:	nop
    2058:	.word	0x20001490
    205c:	.word	0x000001e5
    2060:	.word	0x200064cc

00002064 <_GLOBAL__sub_I__ZN17AudioOutputSPDIF214block_left_1stE>:
audio_block_t * AudioOutputSPDIF2::block_left_2nd = NULL;
audio_block_t * AudioOutputSPDIF2::block_right_2nd = NULL;
uint16_t  AudioOutputSPDIF2::block_left_offset = 0;
uint16_t  AudioOutputSPDIF2::block_right_offset = 0;
bool AudioOutputSPDIF2::update_responsibility = false;
DMAChannel AudioOutputSPDIF2::dma(false);
    2064:	ldr	r2, [pc, #8]	; (2070 <_GLOBAL__sub_I__ZN17AudioOutputSPDIF214block_left_1stE+0xc>)
    2066:	ldr	r1, [pc, #12]	; (2074 <_GLOBAL__sub_I__ZN17AudioOutputSPDIF214block_left_1stE+0x10>)
    2068:	ldr	r0, [pc, #12]	; (2078 <_GLOBAL__sub_I__ZN17AudioOutputSPDIF214block_left_1stE+0x14>)
    206a:	b.w	d204 <__aeabi_atexit>
    206e:	nop
    2070:	.word	0x20001490
    2074:	.word	0x000001e5
    2078:	.word	0x2000658c

0000207c <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE>:
audio_block_t * AudioOutputSPDIF::block_left_2nd = NULL;
audio_block_t * AudioOutputSPDIF::block_right_2nd = NULL;
uint16_t  AudioOutputSPDIF::block_left_offset = 0;
uint16_t  AudioOutputSPDIF::block_right_offset = 0;
bool AudioOutputSPDIF::update_responsibility = false;
DMAChannel AudioOutputSPDIF::dma(false);
    207c:	ldr	r2, [pc, #8]	; (2088 <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE+0xc>)
    207e:	ldr	r1, [pc, #12]	; (208c <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE+0x10>)
    2080:	ldr	r0, [pc, #12]	; (2090 <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE+0x14>)
    2082:	b.w	d204 <__aeabi_atexit>
    2086:	nop
    2088:	.word	0x20001490
    208c:	.word	0x000001e5
    2090:	.word	0x20006564

00002094 <breakTime(long long, tmElements_t&)>:
  tm.Second = time % 60;
    2094:	ldr	r1, [pc, #332]	; (21e4 <breakTime(long long, tmElements_t&)+0x150>)
void breakTime(time_t timeInput, tmElements_t &tm){
    2096:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  tm.Second = time % 60;
    209a:	umull	r4, r3, r1, r0
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    209e:	movw	sl, #365	; 0x16d
    20a2:	ldr	r7, [pc, #324]	; (21e8 <breakTime(long long, tmElements_t&)+0x154>)
  tm.Second = time % 60;
    20a4:	lsrs	r3, r3, #5
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    20a6:	ldr.w	r8, [pc, #336]	; 21f8 <breakTime(long long, tmElements_t&)+0x164>
    20aa:	ldr.w	r9, [pc, #336]	; 21fc <breakTime(long long, tmElements_t&)+0x168>
  tm.Minute = time % 60;
    20ae:	umull	r4, r1, r1, r3
  tm.Second = time % 60;
    20b2:	rsb	r4, r3, r3, lsl #4
  tm.Minute = time % 60;
    20b6:	lsrs	r1, r1, #5
  tm.Second = time % 60;
    20b8:	sub.w	r0, r0, r4, lsl #2
  tm.Hour = time % 24;
    20bc:	ldr	r4, [pc, #300]	; (21ec <breakTime(long long, tmElements_t&)+0x158>)
  tm.Minute = time % 60;
    20be:	rsb	r5, r1, r1, lsl #4
  tm.Hour = time % 24;
    20c2:	umull	r4, lr, r4, r1
  tm.Minute = time % 60;
    20c6:	sub.w	r3, r3, r5, lsl #2
  tm.Second = time % 60;
    20ca:	strb	r0, [r2, #0]
  tm.Hour = time % 24;
    20cc:	mov.w	lr, lr, lsr #4
  tm.Minute = time % 60;
    20d0:	strb	r3, [r2, #1]
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    20d2:	add.w	r4, lr, #4
  tm.Hour = time % 24;
    20d6:	add.w	r0, lr, lr, lsl #1
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    20da:	ldr	r3, [pc, #276]	; (21f0 <breakTime(long long, tmElements_t&)+0x15c>)
  tm.Hour = time % 24;
    20dc:	sub.w	r1, r1, r0, lsl #3
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    20e0:	umull	r0, r3, r3, r4
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    20e4:	movs	r0, #0
  tm.Hour = time % 24;
    20e6:	strb	r1, [r2, #2]
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    20e8:	subs	r1, r4, r3
    20ea:	add.w	r3, r3, r1, lsr #1
  days = 0;
    20ee:	mov	r1, r0
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    20f0:	lsrs	r3, r3, #2
    20f2:	rsb	r3, r3, r3, lsl #3
    20f6:	subs	r4, r4, r3
    20f8:	adds	r4, #1
    20fa:	strb	r4, [r2, #3]
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    20fc:	uxtb	r4, r0
    20fe:	movw	ip, #365	; 0x16d
    2102:	addw	r3, r4, #1970	; 0x7b2
    2106:	ands.w	r5, r3, #3
    210a:	mul.w	r6, r7, r3
    210e:	bne.n	2122 <breakTime(long long, tmElements_t&)+0x8e>
    2110:	cmp.w	r8, r6, ror #2
    2114:	mov.w	ip, #366	; 0x16e
    2118:	bcc.n	2122 <breakTime(long long, tmElements_t&)+0x8e>
    211a:	cmp.w	r9, r6, ror #4
    211e:	it	cc
    2120:	movcc	ip, sl
    2122:	add	r1, ip
    2124:	adds	r0, #1
    2126:	cmp	lr, r1
    2128:	bcs.n	20fc <breakTime(long long, tmElements_t&)+0x68>
  days -= LEAP_YEAR(year) ? 366 : 365;
    212a:	ldr	r6, [pc, #200]	; (21f4 <breakTime(long long, tmElements_t&)+0x160>)
  tm.Year = year; // year is offset from 1970 
    212c:	strb	r4, [r2, #6]
  days -= LEAP_YEAR(year) ? 366 : 365;
    212e:	umull	r0, r6, r6, r3
    2132:	cbz	r5, 219a <breakTime(long long, tmElements_t&)+0x106>
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    2134:	lsrs	r7, r6, #5
    2136:	movs	r4, #100	; 0x64
    2138:	mov.w	r0, #400	; 0x190
    213c:	lsrs	r6, r6, #7
    213e:	mls	r7, r4, r7, r3
    2142:	mls	r6, r0, r6, r3
  days -= LEAP_YEAR(year) ? 366 : 365;
    2146:	movw	r0, #365	; 0x16d
  time  -= days; // now it is days in this year, starting at 0
    214a:	sub.w	lr, lr, r1
    214e:	movs	r3, #0
    2150:	movs	r1, #1
    2152:	add	r0, lr
      monthLength = monthDays[month];
    2154:	ldr.w	lr, [pc, #168]	; 2200 <breakTime(long long, tmElements_t&)+0x16c>
    2158:	b.n	2170 <breakTime(long long, tmElements_t&)+0xdc>
    if (time >= monthLength) {
    215a:	ldrb.w	r4, [r3, lr]
    215e:	cmp	r4, r0
    2160:	bhi.n	21c8 <breakTime(long long, tmElements_t&)+0x134>
  for (month=0; month<12; month++) {
    2162:	cmp	r1, #12
      time -= monthLength;
    2164:	sub.w	r0, r0, r4
  for (month=0; month<12; month++) {
    2168:	beq.n	218a <breakTime(long long, tmElements_t&)+0xf6>
    216a:	adds	r1, #1
    216c:	adds	r3, #1
    216e:	uxtb	r1, r1
    if (month==1) { // february
    2170:	cmp	r3, #1
    2172:	uxtb.w	ip, r3
    2176:	bne.n	215a <breakTime(long long, tmElements_t&)+0xc6>
      if (LEAP_YEAR(year)) {
    2178:	cbnz	r5, 2180 <breakTime(long long, tmElements_t&)+0xec>
    217a:	cbz	r7, 21b4 <breakTime(long long, tmElements_t&)+0x120>
    217c:	movs	r4, #29
    217e:	b.n	2182 <breakTime(long long, tmElements_t&)+0xee>
    2180:	movs	r4, #28
    if (time >= monthLength) {
    2182:	cmp	r0, r4
    2184:	bcc.n	21dc <breakTime(long long, tmElements_t&)+0x148>
      time -= monthLength;
    2186:	subs	r0, r0, r4
  for (month=0; month<12; month++) {
    2188:	b.n	216a <breakTime(long long, tmElements_t&)+0xd6>
    218a:	mov.w	ip, #13
  tm.Day = time + 1;     // day of month
    218e:	adds	r0, #1
  tm.Month = month + 1;  // jan is month 1  
    2190:	strb.w	ip, [r2, #5]
  tm.Day = time + 1;     // day of month
    2194:	strb	r0, [r2, #4]
}
    2196:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  days -= LEAP_YEAR(year) ? 366 : 365;
    219a:	movs	r0, #100	; 0x64
    219c:	lsrs	r7, r6, #5
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    219e:	lsrs	r6, r6, #7
  days -= LEAP_YEAR(year) ? 366 : 365;
    21a0:	mls	r7, r0, r7, r3
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    21a4:	mov.w	r0, #400	; 0x190
    21a8:	mls	r6, r0, r6, r3
  days -= LEAP_YEAR(year) ? 366 : 365;
    21ac:	cbz	r7, 21be <breakTime(long long, tmElements_t&)+0x12a>
    21ae:	mov.w	r0, #366	; 0x16e
    21b2:	b.n	214a <breakTime(long long, tmElements_t&)+0xb6>
      if (LEAP_YEAR(year)) {
    21b4:	cmp	r6, #0
    21b6:	ite	ne
    21b8:	movne	r4, #28
    21ba:	moveq	r4, #29
    21bc:	b.n	2182 <breakTime(long long, tmElements_t&)+0xee>
  days -= LEAP_YEAR(year) ? 366 : 365;
    21be:	cmp	r6, #0
    21c0:	bne.n	2146 <breakTime(long long, tmElements_t&)+0xb2>
    21c2:	mov.w	r0, #366	; 0x16e
    21c6:	b.n	214a <breakTime(long long, tmElements_t&)+0xb6>
  for (month=0; month<12; month++) {
    21c8:	add.w	ip, ip, #1
  tm.Day = time + 1;     // day of month
    21cc:	adds	r0, #1
  for (month=0; month<12; month++) {
    21ce:	uxtb.w	ip, ip
  tm.Day = time + 1;     // day of month
    21d2:	strb	r0, [r2, #4]
  tm.Month = month + 1;  // jan is month 1  
    21d4:	strb.w	ip, [r2, #5]
}
    21d8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (time >= monthLength) {
    21dc:	mov.w	ip, #2
    21e0:	b.n	218e <breakTime(long long, tmElements_t&)+0xfa>
    21e2:	nop
    21e4:	.word	0x88888889
    21e8:	.word	0xc28f5c29
    21ec:	.word	0xaaaaaaab
    21f0:	.word	0x24924925
    21f4:	.word	0x51eb851f
    21f8:	.word	0x028f5c28
    21fc:	.word	0x00a3d70a
    2200:	.word	0x20000764

00002204 <TwoWire::available()>:
	}
	uint8_t requestFrom(uint8_t addr, uint8_t qty, uint32_t iaddr, uint8_t n, uint8_t stop);
	virtual size_t write(uint8_t data);
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
    2204:	ldrb.w	r2, [r0, #163]	; 0xa3
    2208:	ldrb.w	r0, [r0, #162]	; 0xa2
	}
    220c:	subs	r0, r2, r0
    220e:	bx	lr

00002210 <TwoWire::read()>:
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    2210:	ldrb.w	r3, [r0, #162]	; 0xa2
    2214:	ldrb.w	r2, [r0, #163]	; 0xa3
    2218:	cmp	r2, r3
    221a:	bls.n	2228 <TwoWire::read()+0x18>
		return rxBuffer[rxBufferIndex++];
    221c:	adds	r2, r3, #1
    221e:	add	r3, r0
    2220:	strb.w	r2, [r0, #162]	; 0xa2
    2224:	ldrb	r0, [r3, #26]
    2226:	bx	lr
		if (rxBufferIndex >= rxBufferLength) return -1;
    2228:	mov.w	r0, #4294967295
	}
    222c:	bx	lr
    222e:	nop

00002230 <TwoWire::peek()>:
	virtual int peek(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    2230:	ldrb.w	r3, [r0, #162]	; 0xa2
    2234:	ldrb.w	r2, [r0, #163]	; 0xa3
    2238:	cmp	r2, r3
    223a:	bls.n	2242 <TwoWire::peek()+0x12>
		return rxBuffer[rxBufferIndex];
    223c:	add	r0, r3
    223e:	ldrb	r0, [r0, #26]
    2240:	bx	lr
		if (rxBufferIndex >= rxBufferLength) return -1;
    2242:	mov.w	r0, #4294967295
	}
    2246:	bx	lr

00002248 <TwoWire::flush()>:
	virtual void flush(void) {
	}
    2248:	bx	lr
    224a:	nop

0000224c <TwoWire::write(unsigned char)>:
{
}


size_t TwoWire::write(uint8_t data)
{
    224c:	mov	r3, r0
	if (transmitting || slave_mode) {
    224e:	ldrh.w	r0, [r0, #304]	; 0x130
    2252:	cbz	r0, 2274 <TwoWire::write(unsigned char)+0x28>
		if (txBufferLength >= BUFFER_LENGTH+1) {
    2254:	ldrb.w	r2, [r3, #303]	; 0x12f
    2258:	cmp	r2, #136	; 0x88
    225a:	bls.n	2264 <TwoWire::write(unsigned char)+0x18>
	// format warnings are too pedantic - disable until newer toolchain offers better...
	// https://forum.pjrc.com/threads/62473?p=256873&viewfull=1#post256873
	// int printf(const char *format, ...) __attribute__ ((format (printf, 2, 3)));

  protected:
	void setWriteError(int err = 1) { write_error = err; }
    225c:	movs	r2, #1
			setWriteError();
			return 0;
    225e:	movs	r0, #0
    2260:	strb	r2, [r3, #4]
    2262:	bx	lr
		}
		txBuffer[txBufferLength++] = data;
    2264:	add.w	ip, r2, #1
		return 1;
    2268:	movs	r0, #1
		txBuffer[txBufferLength++] = data;
    226a:	add	r2, r3
    226c:	strb.w	ip, [r3, #303]	; 0x12f
    2270:	strb.w	r1, [r2, #165]	; 0xa5
	}
	return 0;
}
    2274:	bx	lr
    2276:	nop

00002278 <TwoWire::write(unsigned char const*, unsigned int)>:

size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
    2278:	push	{r3, r4, r5, lr}
	if (transmitting || slave_mode) {
    227a:	ldrh.w	r4, [r0, #304]	; 0x130
    227e:	cbnz	r4, 2284 <TwoWire::write(unsigned char const*, unsigned int)+0xc>
		memcpy(txBuffer + txBufferLength, data, quantity);
		txBufferLength += quantity;
		return quantity;
	}
	return 0;
}
    2280:	mov	r0, r4
    2282:	pop	{r3, r4, r5, pc}
		size_t avail = BUFFER_LENGTH+1 - txBufferLength;
    2284:	ldrb.w	r3, [r0, #303]	; 0x12f
    2288:	mov	r5, r0
    228a:	rsb	r4, r3, #137	; 0x89
		if (quantity > avail) {
    228e:	cmp	r2, r4
    2290:	bhi.n	22ae <TwoWire::write(unsigned char const*, unsigned int)+0x36>
    2292:	mov	r4, r2
		memcpy(txBuffer + txBufferLength, data, quantity);
    2294:	add.w	r0, r5, #165	; 0xa5
    2298:	mov	r2, r4
    229a:	add	r0, r3
    229c:	bl	a0a4 <memcpy>
		txBufferLength += quantity;
    22a0:	ldrb.w	r3, [r5, #303]	; 0x12f
}
    22a4:	mov	r0, r4
		txBufferLength += quantity;
    22a6:	add	r3, r4
    22a8:	strb.w	r3, [r5, #303]	; 0x12f
}
    22ac:	pop	{r3, r4, r5, pc}
    22ae:	movs	r2, #1
    22b0:	strb	r2, [r0, #4]
    22b2:	b.n	2294 <TwoWire::write(unsigned char const*, unsigned int)+0x1c>

000022b4 <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)>:
	constexpr TwoWire(IMXRT_LPI2C_t *myport, const I2C_Hardware_t &myhardware)
    22b4:	push	{r3, r4, r5, lr}
	constexpr Print() : write_error(0) {}
    22b6:	movs	r5, #0
    22b8:	mov	r3, r2
    22ba:	mov.w	r2, #1000	; 0x3e8
    22be:	mov	r4, r0
    22c0:	strb	r5, [r0, #4]
    22c2:	str	r2, [r0, #8]
		: port(myport), hardware(myhardware) {
    22c4:	movs	r2, #136	; 0x88
    22c6:	ldr	r0, [pc, #84]	; (231c <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)+0x68>)
    22c8:	str	r1, [r4, #16]
    22ca:	mov	r1, r5
    22cc:	str	r0, [r4, #0]
    22ce:	add.w	r0, r4, #26
    22d2:	str	r3, [r4, #20]
    22d4:	strb	r5, [r4, #12]
    22d6:	strb	r5, [r4, #24]
    22d8:	strb	r5, [r4, #25]
    22da:	bl	e044 <memset>
    22de:	movs	r2, #137	; 0x89
    22e0:	mov	r1, r5
    22e2:	add.w	r0, r4, #165	; 0xa5
    22e6:	strb.w	r5, [r4, #162]	; 0xa2
    22ea:	strb.w	r5, [r4, #163]	; 0xa3
    22ee:	strb.w	r5, [r4, #164]	; 0xa4
    22f2:	bl	e044 <memset>
	}
    22f6:	mov	r0, r4
		: port(myport), hardware(myhardware) {
    22f8:	strb.w	r5, [r4, #302]	; 0x12e
    22fc:	strb.w	r5, [r4, #303]	; 0x12f
    2300:	strb.w	r5, [r4, #304]	; 0x130
    2304:	strb.w	r5, [r4, #305]	; 0x131
    2308:	strb.w	r5, [r4, #306]	; 0x132
    230c:	strb.w	r5, [r4, #307]	; 0x133
    2310:	strb.w	r5, [r4, #308]	; 0x134
    2314:	strd	r5, r5, [r4, #312]	; 0x138
	}
    2318:	pop	{r3, r4, r5, pc}
    231a:	nop
    231c:	.word	0x20000b98

00002320 <TwoWire::isr()>:
}


void TwoWire::isr(void)
{
	uint32_t status = port->SSR;
    2320:	ldr	r3, [r0, #16]
{
    2322:	push	{r4, r5, r6, lr}
	uint32_t status = port->SSR;
    2324:	ldr.w	r5, [r3, #276]	; 0x114
{
    2328:	mov	r4, r0
	uint32_t w1c_bits = status & 0xF00;
	if (w1c_bits) port->SSR = w1c_bits;
    232a:	ands.w	r2, r5, #3840	; 0xf00
    232e:	beq.n	2334 <TwoWire::isr()+0x14>
    2330:	str.w	r2, [r3, #276]	; 0x114

	//Serial.print("isr ");
	//Serial.println(status, HEX);

	if (status & LPI2C_SSR_RDF) { // Receive Data Flag
    2334:	lsls	r6, r5, #30
    2336:	bpl.n	2350 <TwoWire::isr()+0x30>
		int rx = port->SRDR;
    2338:	ldr.w	r1, [r3, #368]	; 0x170
		if (rx & 0x8000) {
    233c:	lsls	r0, r1, #16
    233e:	bpl.n	23be <TwoWire::isr()+0x9e>
			rxBufferIndex = 0;
    2340:	movs	r2, #0
    2342:	movs	r0, #1
    2344:	strb.w	r2, [r4, #162]	; 0xa2
			rxBufferLength = 0;
		}
		if (rxBufferLength < BUFFER_LENGTH) {
			rxBuffer[rxBufferLength++] = rx & 255;
    2348:	add	r2, r4
    234a:	strb.w	r0, [r4, #163]	; 0xa3
    234e:	strb	r1, [r2, #26]
		}
		//Serial.print("rx = ");
		//Serial.println(rx, HEX);
	}
	if (status & LPI2C_SSR_TDF) { // Transmit Data Flag
    2350:	lsls	r2, r5, #31
    2352:	bpl.n	2376 <TwoWire::isr()+0x56>
		if (!transmitting) {
    2354:	ldrb.w	r6, [r4, #304]	; 0x130
    2358:	cbz	r6, 2398 <TwoWire::isr()+0x78>
				(*user_onRequest)();
			}
			txBufferIndex = 0;
			transmitting = 1;
		}
		if (txBufferIndex < txBufferLength) {
    235a:	ldrb.w	r6, [r4, #302]	; 0x12e
    235e:	ldrb.w	r2, [r4, #303]	; 0x12f
    2362:	cmp	r2, r6
    2364:	bls.n	23b6 <TwoWire::isr()+0x96>
			port->STDR = txBuffer[txBufferIndex++];
    2366:	adds	r2, r6, #1
    2368:	add	r6, r4
    236a:	strb.w	r2, [r4, #302]	; 0x12e
    236e:	ldrb.w	r2, [r6, #165]	; 0xa5
    2372:	str.w	r2, [r3, #352]	; 0x160
			port->STDR = 0;
		}
		//Serial.println("tx");
	}

	if (status & LPI2C_SSR_SDF) { // Stop
    2376:	lsls	r3, r5, #22
    2378:	bpl.n	2396 <TwoWire::isr()+0x76>
		//Serial.println("Stop");
		if (rxBufferLength > 0 && user_onReceive != nullptr) {
    237a:	ldrb.w	r0, [r4, #163]	; 0xa3
    237e:	cbz	r0, 2388 <TwoWire::isr()+0x68>
    2380:	ldr.w	r3, [r4, #316]	; 0x13c
    2384:	cbz	r3, 2388 <TwoWire::isr()+0x68>
			(*user_onReceive)(rxBufferLength);
    2386:	blx	r3
		}
		rxBufferIndex = 0;
    2388:	movs	r3, #0
    238a:	strh.w	r3, [r4, #162]	; 0xa2
		rxBufferLength = 0;
		txBufferIndex = 0;
    238e:	strh.w	r3, [r4, #302]	; 0x12e
		txBufferLength = 0;
		transmitting = 0;
    2392:	strb.w	r3, [r4, #304]	; 0x130
	}
}
    2396:	pop	{r4, r5, r6, pc}
			if (user_onRequest != nullptr) {
    2398:	ldr.w	r2, [r4, #312]	; 0x138
    239c:	cbz	r2, 23a2 <TwoWire::isr()+0x82>
				(*user_onRequest)();
    239e:	blx	r2
			port->STDR = txBuffer[txBufferIndex++];
    23a0:	ldr	r3, [r4, #16]
			txBufferIndex = 0;
    23a2:	movs	r2, #0
    23a4:	strb.w	r2, [r4, #302]	; 0x12e
			transmitting = 1;
    23a8:	movs	r2, #1
    23aa:	strb.w	r2, [r4, #304]	; 0x130
		if (txBufferIndex < txBufferLength) {
    23ae:	ldrb.w	r2, [r4, #303]	; 0x12f
    23b2:	cmp	r2, r6
    23b4:	bhi.n	2366 <TwoWire::isr()+0x46>
			port->STDR = 0;
    23b6:	movs	r2, #0
    23b8:	str.w	r2, [r3, #352]	; 0x160
    23bc:	b.n	2376 <TwoWire::isr()+0x56>
		if (rxBufferLength < BUFFER_LENGTH) {
    23be:	ldrb.w	r2, [r4, #163]	; 0xa3
    23c2:	cmp	r2, #135	; 0x87
    23c4:	bhi.n	2350 <TwoWire::isr()+0x30>
			rxBuffer[rxBufferLength++] = rx & 255;
    23c6:	adds	r0, r2, #1
    23c8:	uxtb	r0, r0
    23ca:	b.n	2348 <TwoWire::isr()+0x28>

000023cc <lpi2c1_isr()>:
void lpi2c1_isr(void) { Wire.isr(); }
void lpi2c3_isr(void) { Wire2.isr(); }
void lpi2c4_isr(void) { Wire1.isr(); }
void lpi2c2_isr(void) { Wire3.isr(); }
#else
void lpi2c1_isr(void) { Wire.isr(); }
    23cc:	ldr	r0, [pc, #4]	; (23d4 <lpi2c1_isr()+0x8>)
    23ce:	b.w	2320 <TwoWire::isr()>
    23d2:	nop
    23d4:	.word	0x200058c4

000023d8 <lpi2c3_isr()>:
void lpi2c3_isr(void) { Wire1.isr(); }
    23d8:	ldr	r0, [pc, #4]	; (23e0 <lpi2c3_isr()+0x8>)
    23da:	b.w	2320 <TwoWire::isr()>
    23de:	nop
    23e0:	.word	0x20005a04

000023e4 <lpi2c4_isr()>:
void lpi2c4_isr(void) { Wire2.isr(); }
    23e4:	ldr	r0, [pc, #4]	; (23ec <lpi2c4_isr()+0x8>)
    23e6:	b.w	2320 <TwoWire::isr()>
    23ea:	nop
    23ec:	.word	0x20005b44

000023f0 <_GLOBAL__sub_I__ZN7TwoWire5beginEv>:
	}
	port->MCCR1 = port->MCCR0;
	port->MCFGR0 = 0;
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
	port->MCR = LPI2C_MCR_MEN;
}
    23f0:	push	{r4, lr}
TwoWire Wire(&IMXRT_LPI2C1, TwoWire::i2c1_hardware);
    23f2:	ldr	r4, [pc, #36]	; (2418 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x28>)
    23f4:	ldr	r1, [pc, #36]	; (241c <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x2c>)
    23f6:	mov	r2, r4
    23f8:	ldr	r0, [pc, #36]	; (2420 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x30>)
    23fa:	bl	22b4 <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)>
	TwoWire Wire1(&IMXRT_LPI2C3, TwoWire::i2c3_hardware);
    23fe:	add.w	r2, r4, #80	; 0x50
    2402:	ldr	r1, [pc, #32]	; (2424 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x34>)
    2404:	ldr	r0, [pc, #32]	; (2428 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x38>)
    2406:	bl	22b4 <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)>
	TwoWire Wire2(&IMXRT_LPI2C4, TwoWire::i2c4_hardware);
    240a:	add.w	r2, r4, #160	; 0xa0
    240e:	ldr	r1, [pc, #28]	; (242c <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x3c>)
    2410:	ldr	r0, [pc, #28]	; (2430 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x40>)
    2412:	bl	22b4 <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)>
}
    2416:	pop	{r4, pc}
    2418:	.word	0x60001f8c
    241c:	.word	0x403f0000
    2420:	.word	0x200058c4
    2424:	.word	0x403f8000
    2428:	.word	0x20005a04
    242c:	.word	0x403fc000
    2430:	.word	0x20005b44

00002434 <EventResponder::triggerEvent(int, void*)>:
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    2434:	ldrb.w	ip, [r0, #28]
		_status = status;
    2438:	str	r1, [r0, #4]
		if (_type == EventTypeImmediate) {
    243a:	cmp.w	ip, #2
		_data = data;
    243e:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    2440:	bne.n	2446 <EventResponder::triggerEvent(int, void*)+0x12>
			(*_function)(*this);
    2442:	ldr	r3, [r0, #8]
    2444:	bx	r3
		} else {
			triggerEventNotImmediate();
    2446:	b.w	c1a4 <EventResponder::triggerEventNotImmediate()>
    244a:	nop

0000244c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]>:
	if (interruptMask[n >> 5] == 0) {
		interruptMasksUsed &= ~(1 << (n >> 5));
	}
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
    244c:	push	{r4, r5, r6, r7}
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    244e:	ldr	r4, [r0, #0]
    uint8_t *p_read = (uint8_t*)retbuf;
    size_t count_read = count;

	// Pass 1 keep it simple and don't try packing 8 bits into 16 yet..
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 
    2450:	movw	r5, #513	; 0x201

	while (count > 0) {
    2454:	mov	r6, r3
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 
    2456:	str	r5, [r4, #16]
	while (count > 0) {
    2458:	cbz	r3, 2484 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x38>
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    245a:	cbz	r1, 24a6 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x5a>
    245c:	ldrb.w	r5, [r1], #1
		count--; // how many bytes left to output.
    2460:	subs	r3, #1
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    2462:	str	r5, [r4, #100]	; 0x64
		// Make sure queue is not full before pushing next byte out
		do {
			if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    2464:	ldr	r5, [r4, #112]	; 0x70
    2466:	lsls	r7, r5, #30
    2468:	bmi.n	247a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x2e>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
				if (p_read) *p_read++ = b; 
    246a:	mov	r5, r2
				count_read--;
    246c:	subs	r6, #1
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    246e:	ldr	r7, [r4, #116]	; 0x74
				if (p_read) *p_read++ = b; 
    2470:	cbz	r2, 247a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x2e>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    2472:	strb.w	r7, [r5], #1
				if (p_read) *p_read++ = b; 
    2476:	mov	r2, r5
    2478:	ldr	r4, [r0, #0]
			}
		} while ((port().SR & LPSPI_SR_TDF) == 0) ;
    247a:	ldr	r5, [r4, #20]
    247c:	lsls	r5, r5, #31
    247e:	bpl.n	2464 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x18>
	while (count > 0) {
    2480:	cmp	r3, #0
    2482:	bne.n	245a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0xe>

	}

	// now lets wait for all of the read bytes to be returned...
	while (count_read) {
    2484:	cbz	r6, 24a2 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x56>
    2486:	ldr	r3, [r0, #0]
		if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    2488:	ldr	r1, [r3, #112]	; 0x70
    248a:	lsls	r1, r1, #30
    248c:	bmi.n	2484 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x38>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
			if (p_read) *p_read++ = b; 
    248e:	mov	r1, r2
			count_read--;
    2490:	subs	r6, #1
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    2492:	ldr	r3, [r3, #116]	; 0x74
			if (p_read) *p_read++ = b; 
    2494:	cmp	r2, #0
    2496:	beq.n	2484 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x38>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    2498:	strb.w	r3, [r1], #1
			if (p_read) *p_read++ = b; 
    249c:	mov	r2, r1
	while (count_read) {
    249e:	cmp	r6, #0
    24a0:	bne.n	2486 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x3a>
		}
	}
}
    24a2:	pop	{r4, r5, r6, r7}
    24a4:	bx	lr
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    24a6:	ldrb.w	r5, [r0, #60]	; 0x3c
    24aa:	b.n	2460 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x14>

000024ac <_spi_dma_rxISR1()>:

//-------------------------------------------------------------------------
// DMA RX ISR
//-------------------------------------------------------------------------
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
    24ac:	ldr	r3, [pc, #200]	; (2578 <_spi_dma_rxISR1()+0xcc>)
		DMA_CINT = channel;
    24ae:	ldr	r1, [pc, #204]	; (257c <_spi_dma_rxISR1()+0xd0>)
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    24b0:	push	{r4, r5, lr}
	_dmaTX->clearComplete();
    24b2:	ldrd	r5, r4, [r3, #68]	; 0x44
    24b6:	ldrb	r0, [r4, #4]
    24b8:	strb	r0, [r1, #31]
	_dmaRX->clearComplete();

	if (_dma_count_remaining) {
    24ba:	ldr	r2, [r3, #64]	; 0x40
	bool complete(void) {
		if (TCD->CSR & DMA_TCD_CSR_DONE) return true;
		return false;
	}
	void clearComplete(void) {
		DMA_CDNE = channel;
    24bc:	ldrb.w	ip, [r5, #4]
    24c0:	strb.w	ip, [r1, #28]
    24c4:	strb	r0, [r1, #28]
    24c6:	cbz	r2, 24de <_spi_dma_rxISR1()+0x32>
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > MAX_DMA_COUNT) {
    24c8:	cmp.w	r2, #32768	; 0x8000
    24cc:	bcc.n	2516 <_spi_dma_rxISR1()+0x6a>
			_dma_count_remaining -= MAX_DMA_COUNT;
    24ce:	ldr	r1, [pc, #176]	; (2580 <_spi_dma_rxISR1()+0xd4>)
    24d0:	add	r1, r2
		DMA_SERQ = channel;
    24d2:	ldr	r2, [pc, #168]	; (257c <_spi_dma_rxISR1()+0xd0>)
    24d4:	str	r1, [r3, #64]	; 0x40
    24d6:	strb	r0, [r2, #27]
    24d8:	strb.w	ip, [r2, #27]
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    24dc:	pop	{r4, r5, pc}
    24de:	ldr	r1, [r3, #0]
		}
		_dmaRX->enable();
		_dmaTX->enable();
	} else {

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    24e0:	movs	r4, #15

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    24e2:	ldr	r0, [r3, #76]	; 0x4c
		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    24e4:	str	r4, [r1, #88]	; 0x58
		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    24e6:	movw	r4, #769	; 0x301
 		port().DER = 0;		// DMA no longer doing TX (or RX)
    24ea:	str	r2, [r1, #28]
		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    24ec:	str	r4, [r1, #16]
		port().SR = 0x3f00;	// clear out all of the other status...
    24ee:	mov.w	r4, #16128	; 0x3f00
    24f2:	str	r4, [r1, #20]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    24f4:	movs	r1, #3
		_dma_event_responder->triggerEvent();
    24f6:	ldr	r4, [r0, #0]
    24f8:	ldr	r4, [r4, #0]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    24fa:	strb.w	r1, [r3, #61]	; 0x3d
		_dma_event_responder->triggerEvent();
    24fe:	ldr	r3, [pc, #132]	; (2584 <_spi_dma_rxISR1()+0xd8>)
    2500:	cmp	r4, r3
    2502:	bne.n	2552 <_spi_dma_rxISR1()+0xa6>
		if (_type == EventTypeImmediate) {
    2504:	ldrb	r3, [r0, #28]
		_status = status;
    2506:	str	r2, [r0, #4]
		if (_type == EventTypeImmediate) {
    2508:	cmp	r3, #2
		_data = data;
    250a:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    250c:	bne.n	255c <_spi_dma_rxISR1()+0xb0>
			(*_function)(*this);
    250e:	ldr	r3, [r0, #8]
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    2510:	ldmia.w	sp!, {r4, r5, lr}
    2514:	bx	r3
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining);
    2516:	ldr	r5, [r5, #0]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    2518:	ldrh	r1, [r5, #30]
    251a:	lsls	r1, r1, #16
    251c:	bmi.n	2564 <_spi_dma_rxISR1()+0xb8>
		tcd->BITER = len & 0x7fff;
    251e:	uxth	r2, r2
    2520:	strh	r2, [r5, #30]
	tcd->CITER = tcd->BITER; 
    2522:	ldr	r1, [r4, #0]
    2524:	ldrh	r4, [r5, #30]
    2526:	uxth	r4, r4
    2528:	strh	r4, [r5, #22]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    252a:	ldrh	r4, [r1, #30]
    252c:	lsls	r4, r4, #16
    252e:	bpl.n	253c <_spi_dma_rxISR1()+0x90>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    2530:	ldrh	r4, [r1, #30]
    2532:	ubfx	r2, r2, #0, #9
    2536:	and.w	r4, r4, #65024	; 0xfe00
    253a:	orrs	r2, r4
    253c:	strh	r2, [r1, #30]
	tcd->CITER = tcd->BITER; 
    253e:	ldrh	r2, [r1, #30]
    2540:	uxth	r2, r2
    2542:	strh	r2, [r1, #22]
    2544:	movs	r1, #0
    2546:	ldr	r2, [pc, #52]	; (257c <_spi_dma_rxISR1()+0xd0>)
			_dma_count_remaining -= MAX_DMA_COUNT;
    2548:	str	r1, [r3, #64]	; 0x40
    254a:	strb	r0, [r2, #27]
    254c:	strb.w	ip, [r2, #27]
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    2550:	pop	{r4, r5, pc}
		_dma_event_responder->triggerEvent();
    2552:	mov	r3, r4
    2554:	mov	r1, r2
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    2556:	ldmia.w	sp!, {r4, r5, lr}
		_dma_event_responder->triggerEvent();
    255a:	bx	r3
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    255c:	ldmia.w	sp!, {r4, r5, lr}
			triggerEventNotImmediate();
    2560:	b.w	c1a4 <EventResponder::triggerEventNotImmediate()>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    2564:	ldrh	r1, [r5, #30]
    2566:	ubfx	lr, r2, #0, #9
    256a:	uxth	r2, r2
    256c:	and.w	r1, r1, #65024	; 0xfe00
    2570:	orr.w	r1, r1, lr
    2574:	strh	r1, [r5, #30]
    2576:	b.n	2522 <_spi_dma_rxISR1()+0x76>
    2578:	.word	0x20005820
    257c:	.word	0x400e8000
    2580:	.word	0xffff8001
    2584:	.word	0x00002435

00002588 <_spi_dma_rxISR0()>:
	_dmaRX->clearInterrupt();
    2588:	ldr	r3, [pc, #200]	; (2654 <_spi_dma_rxISR0()+0xcc>)
		DMA_CINT = channel;
    258a:	ldr	r1, [pc, #204]	; (2658 <_spi_dma_rxISR0()+0xd0>)
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    258c:	push	{r4, r5, lr}
	_dmaTX->clearComplete();
    258e:	ldrd	r5, r4, [r3, #68]	; 0x44
    2592:	ldrb	r0, [r4, #4]
    2594:	strb	r0, [r1, #31]
	if (_dma_count_remaining) {
    2596:	ldr	r2, [r3, #64]	; 0x40
		DMA_CDNE = channel;
    2598:	ldrb.w	ip, [r5, #4]
    259c:	strb.w	ip, [r1, #28]
    25a0:	strb	r0, [r1, #28]
    25a2:	cbz	r2, 25ba <_spi_dma_rxISR0()+0x32>
		if (_dma_count_remaining > MAX_DMA_COUNT) {
    25a4:	cmp.w	r2, #32768	; 0x8000
    25a8:	bcc.n	25f2 <_spi_dma_rxISR0()+0x6a>
			_dma_count_remaining -= MAX_DMA_COUNT;
    25aa:	ldr	r1, [pc, #176]	; (265c <_spi_dma_rxISR0()+0xd4>)
    25ac:	add	r1, r2
		DMA_SERQ = channel;
    25ae:	ldr	r2, [pc, #168]	; (2658 <_spi_dma_rxISR0()+0xd0>)
    25b0:	str	r1, [r3, #64]	; 0x40
    25b2:	strb	r0, [r2, #27]
    25b4:	strb.w	ip, [r2, #27]
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    25b8:	pop	{r4, r5, pc}
    25ba:	ldr	r1, [r3, #0]
		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    25bc:	movs	r4, #15
		_dma_event_responder->triggerEvent();
    25be:	ldr	r0, [r3, #76]	; 0x4c
		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    25c0:	str	r4, [r1, #88]	; 0x58
		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    25c2:	movw	r4, #769	; 0x301
 		port().DER = 0;		// DMA no longer doing TX (or RX)
    25c6:	str	r2, [r1, #28]
		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    25c8:	str	r4, [r1, #16]
		port().SR = 0x3f00;	// clear out all of the other status...
    25ca:	mov.w	r4, #16128	; 0x3f00
    25ce:	str	r4, [r1, #20]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    25d0:	movs	r1, #3
		_dma_event_responder->triggerEvent();
    25d2:	ldr	r4, [r0, #0]
    25d4:	ldr	r4, [r4, #0]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    25d6:	strb.w	r1, [r3, #61]	; 0x3d
		_dma_event_responder->triggerEvent();
    25da:	ldr	r3, [pc, #132]	; (2660 <_spi_dma_rxISR0()+0xd8>)
    25dc:	cmp	r4, r3
    25de:	bne.n	262e <_spi_dma_rxISR0()+0xa6>
		if (_type == EventTypeImmediate) {
    25e0:	ldrb	r3, [r0, #28]
		_status = status;
    25e2:	str	r2, [r0, #4]
		if (_type == EventTypeImmediate) {
    25e4:	cmp	r3, #2
		_data = data;
    25e6:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    25e8:	bne.n	2638 <_spi_dma_rxISR0()+0xb0>
			(*_function)(*this);
    25ea:	ldr	r3, [r0, #8]
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    25ec:	ldmia.w	sp!, {r4, r5, lr}
    25f0:	bx	r3
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining);
    25f2:	ldr	r5, [r5, #0]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    25f4:	ldrh	r1, [r5, #30]
    25f6:	lsls	r1, r1, #16
    25f8:	bmi.n	2640 <_spi_dma_rxISR0()+0xb8>
		tcd->BITER = len & 0x7fff;
    25fa:	uxth	r2, r2
    25fc:	strh	r2, [r5, #30]
	tcd->CITER = tcd->BITER; 
    25fe:	ldr	r1, [r4, #0]
    2600:	ldrh	r4, [r5, #30]
    2602:	uxth	r4, r4
    2604:	strh	r4, [r5, #22]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    2606:	ldrh	r4, [r1, #30]
    2608:	lsls	r4, r4, #16
    260a:	bpl.n	2618 <_spi_dma_rxISR0()+0x90>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    260c:	ldrh	r4, [r1, #30]
    260e:	ubfx	r2, r2, #0, #9
    2612:	and.w	r4, r4, #65024	; 0xfe00
    2616:	orrs	r2, r4
    2618:	strh	r2, [r1, #30]
	tcd->CITER = tcd->BITER; 
    261a:	ldrh	r2, [r1, #30]
    261c:	uxth	r2, r2
    261e:	strh	r2, [r1, #22]
    2620:	movs	r1, #0
    2622:	ldr	r2, [pc, #52]	; (2658 <_spi_dma_rxISR0()+0xd0>)
			_dma_count_remaining -= MAX_DMA_COUNT;
    2624:	str	r1, [r3, #64]	; 0x40
    2626:	strb	r0, [r2, #27]
    2628:	strb.w	ip, [r2, #27]
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    262c:	pop	{r4, r5, pc}
		_dma_event_responder->triggerEvent();
    262e:	mov	r3, r4
    2630:	mov	r1, r2
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    2632:	ldmia.w	sp!, {r4, r5, lr}
		_dma_event_responder->triggerEvent();
    2636:	bx	r3
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    2638:	ldmia.w	sp!, {r4, r5, lr}
			triggerEventNotImmediate();
    263c:	b.w	c1a4 <EventResponder::triggerEventNotImmediate()>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    2640:	ldrh	r1, [r5, #30]
    2642:	ubfx	lr, r2, #0, #9
    2646:	uxth	r2, r2
    2648:	and.w	r1, r1, #65024	; 0xfe00
    264c:	orr.w	r1, r1, lr
    2650:	strh	r1, [r5, #30]
    2652:	b.n	25fe <_spi_dma_rxISR0()+0x76>
    2654:	.word	0x200057d0
    2658:	.word	0x400e8000
    265c:	.word	0xffff8001
    2660:	.word	0x00002435

00002664 <SPIClass::SPIClass(unsigned int, unsigned int)>:
		: port_addr(myport), hardware_addr(myhardware) {
    2664:	movs	r3, #0
    2666:	strd	r1, r2, [r0]
    266a:	strd	r3, r3, [r0, #8]
    266e:	strd	r3, r3, [r0, #16]
    2672:	strd	r3, r3, [r0, #24]
    2676:	strd	r3, r3, [r0, #32]
    267a:	strd	r3, r3, [r0, #40]	; 0x28
    267e:	strd	r3, r3, [r0, #48]	; 0x30
    2682:	str	r3, [r0, #56]	; 0x38
    2684:	strh	r3, [r0, #60]	; 0x3c
    2686:	strd	r3, r3, [r0, #64]	; 0x40
    268a:	strd	r3, r3, [r0, #72]	; 0x48
	}
    268e:	bx	lr

00002690 <SPIClass::begin()>:
	const SPI_Hardware_t & hardware() { return *(const SPI_Hardware_t *)hardware_addr; }
    2690:	ldr	r3, [r0, #4]
{
    2692:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    2696:	ldrd	r4, r1, [r3]
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
    269a:	ldr	r5, [pc, #516]	; (28a0 <SPIClass::begin()+0x210>)
	*(portControlRegister(hardware().miso_pin[miso_pin_index])) = fastio;
    269c:	mov.w	sl, #184	; 0xb8
	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    26a0:	ldr	r2, [r4, #0]
	port().CR = LPSPI_CR_RST;
    26a2:	mov.w	r8, #2
	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    26a6:	bic.w	r2, r2, r1
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
    26aa:	ldr	r1, [pc, #504]	; (28a4 <SPIClass::begin()+0x214>)
	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    26ac:	str	r2, [r4, #0]
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
    26ae:	ldr	r2, [r5, #24]
    26b0:	ands	r1, r2
		CCM_CBCMR_LPSPI_PODF(2) | CCM_CBCMR_LPSPI_CLK_SEL(1); // pg 714
    26b2:	ldr	r2, [pc, #500]	; (28a8 <SPIClass::begin()+0x218>)
    26b4:	orrs	r2, r1
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
    26b6:	str	r2, [r5, #24]
	*(portControlRegister(hardware().miso_pin[miso_pin_index])) = fastio;
    26b8:	ldrb.w	lr, [r0, #16]
    26bc:	ldr	r2, [pc, #492]	; (28ac <SPIClass::begin()+0x21c>)
    26be:	add.w	r6, r3, lr
	*(portConfigRegister(hardware().miso_pin[miso_pin_index])) = hardware().miso_mux[miso_pin_index];
    26c2:	add.w	lr, r3, lr, lsl #2
	*(portControlRegister(hardware().miso_pin[miso_pin_index])) = fastio;
    26c6:	ldrb	r1, [r6, #16]
    26c8:	add.w	r1, r2, r1, lsl #4
    26cc:	ldr	r1, [r1, #8]
    26ce:	str.w	sl, [r1]
	*(portControlRegister(hardware().mosi_pin[mosi_pin_index])) = fastio;
    26d2:	ldrb.w	ip, [r0, #17]
    26d6:	add.w	r5, r3, ip
	*(portConfigRegister(hardware().mosi_pin [mosi_pin_index])) = hardware().mosi_mux[mosi_pin_index];
    26da:	add.w	ip, ip, #10
	*(portControlRegister(hardware().mosi_pin[mosi_pin_index])) = fastio;
    26de:	ldrb.w	r1, [r5, #36]	; 0x24
    26e2:	add.w	r1, r2, r1, lsl #4
    26e6:	ldr	r1, [r1, #8]
    26e8:	str.w	sl, [r1]
	*(portControlRegister(hardware().sck_pin[sck_pin_index])) = fastio;
    26ec:	ldrb	r1, [r0, #18]
    26ee:	add.w	r9, r3, r1
	*(portConfigRegister(hardware().sck_pin [sck_pin_index])) = hardware().sck_mux[sck_pin_index];
    26f2:	add.w	r1, r3, r1, lsl #2
	*(portControlRegister(hardware().sck_pin[sck_pin_index])) = fastio;
    26f6:	ldrb.w	fp, [r9, #56]	; 0x38
    26fa:	add.w	fp, r2, fp, lsl #4
    26fe:	ldr.w	fp, [fp, #8]
    2702:	str.w	sl, [fp]
	hardware().clock_gate_register |= hardware().clock_gate_mask;
    2706:	ldr.w	sl, [r4]
    270a:	ldr	r7, [r3, #4]
    270c:	orr.w	sl, sl, r7
    2710:	str.w	sl, [r4]
	*(portConfigRegister(hardware().miso_pin[miso_pin_index])) = hardware().miso_mux[miso_pin_index];
    2714:	ldrb	r4, [r6, #16]
    2716:	ldr.w	lr, [lr, #20]
    271a:	add.w	r4, r2, r4, lsl #4
    271e:	ldr	r4, [r4, #4]
    2720:	str.w	lr, [r4]
	*(portConfigRegister(hardware().mosi_pin [mosi_pin_index])) = hardware().mosi_mux[mosi_pin_index];
    2724:	ldrb.w	r4, [r5, #36]	; 0x24
    2728:	ldr.w	ip, [r3, ip, lsl #2]
    272c:	add.w	r4, r2, r4, lsl #4
    2730:	ldr	r4, [r4, #4]
    2732:	str.w	ip, [r4]
	*(portConfigRegister(hardware().sck_pin [sck_pin_index])) = hardware().sck_mux[sck_pin_index];
    2736:	ldrb.w	r4, [r9, #56]	; 0x38
    273a:	add.w	r2, r2, r4, lsl #4
    273e:	ldr	r2, [r2, #4]
    2740:	ldr	r1, [r1, #60]	; 0x3c
    2742:	str	r1, [r2, #0]
	hardware().sck_select_input_register = hardware().sck_select_val[sck_pin_index];
    2744:	ldr	r2, [r3, #72]	; 0x48
    2746:	ldrb.w	r1, [r9, #68]	; 0x44
    274a:	str	r1, [r2, #0]
	hardware().miso_select_input_register = hardware().miso_select_val[miso_pin_index];
    274c:	ldr	r2, [r3, #32]
    274e:	ldrb	r1, [r6, #28]
	hardware().mosi_select_input_register = hardware().mosi_select_val[mosi_pin_index];
    2750:	ldr	r3, [r3, #52]	; 0x34
	hardware().miso_select_input_register = hardware().miso_select_val[miso_pin_index];
    2752:	str	r1, [r2, #0]
	hardware().mosi_select_input_register = hardware().mosi_select_val[mosi_pin_index];
    2754:	ldrb.w	r2, [r5, #48]	; 0x30
    2758:	str	r2, [r3, #0]
	port().FCR = LPSPI_FCR_TXWATER(15);
    275a:	movs	r2, #15
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    275c:	ldr	r3, [r0, #0]
	port().CR = LPSPI_CR_RST;
    275e:	str.w	r8, [r3, #16]
	port().FCR = LPSPI_FCR_TXWATER(15);
    2762:	str	r2, [r3, #88]	; 0x58
		if (interruptMasksUsed) {
    2764:	ldrb	r2, [r0, #19]
    2766:	cmp	r2, #0
    2768:	beq.n	27ce <SPIClass::begin()+0x13e>
			__disable_irq();
    276a:	cpsid	i
			if (interruptMasksUsed & 0x01) {
    276c:	ldrb	r3, [r0, #19]
    276e:	lsls	r4, r3, #31
    2770:	bpl.n	2784 <SPIClass::begin()+0xf4>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    2772:	mov.w	r1, #3758153728	; 0xe000e000
    2776:	ldr	r4, [r0, #20]
    2778:	ldr.w	r2, [r1, #384]	; 0x180
    277c:	ands	r2, r4
    277e:	str	r2, [r0, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    2780:	str.w	r2, [r1, #384]	; 0x180
			if (interruptMasksUsed & 0x02) {
    2784:	lsls	r1, r3, #30
    2786:	bpl.n	279a <SPIClass::begin()+0x10a>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    2788:	mov.w	r1, #3758153728	; 0xe000e000
    278c:	ldr	r4, [r0, #24]
    278e:	ldr.w	r2, [r1, #388]	; 0x184
    2792:	ands	r2, r4
    2794:	str	r2, [r0, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    2796:	str.w	r2, [r1, #388]	; 0x184
			if (interruptMasksUsed & 0x04) {
    279a:	lsls	r2, r3, #29
    279c:	bpl.n	27b0 <SPIClass::begin()+0x120>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    279e:	mov.w	r1, #3758153728	; 0xe000e000
    27a2:	ldr	r4, [r0, #28]
    27a4:	ldr.w	r2, [r1, #392]	; 0x188
    27a8:	ands	r2, r4
    27aa:	str	r2, [r0, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    27ac:	str.w	r2, [r1, #392]	; 0x188
			if (interruptMasksUsed & 0x08) {
    27b0:	lsls	r7, r3, #28
    27b2:	bpl.n	27c6 <SPIClass::begin()+0x136>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    27b4:	mov.w	r1, #3758153728	; 0xe000e000
    27b8:	ldr	r4, [r0, #32]
    27ba:	ldr.w	r2, [r1, #396]	; 0x18c
    27be:	ands	r2, r4
    27c0:	str	r2, [r0, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    27c2:	str.w	r2, [r1, #396]	; 0x18c
			if (interruptMasksUsed & 0x10) {
    27c6:	lsls	r6, r3, #27
    27c8:	bmi.n	2876 <SPIClass::begin()+0x1e6>
			__enable_irq();
    27ca:	cpsie	i
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    27cc:	ldr	r3, [r0, #0]
		if (settings.clock() != _clock) {
    27ce:	ldr	r4, [pc, #224]	; (28b0 <SPIClass::begin()+0x220>)
    27d0:	ldr	r2, [r0, #8]
    27d2:	cmp	r2, r4
    27d4:	beq.n	288a <SPIClass::begin()+0x1fa>
			uint32_t cbcmr = CCM_CBCMR;
    27d6:	ldr	r2, [pc, #200]	; (28a0 <SPIClass::begin()+0x210>)
		    _clock = settings.clock();
    27d8:	str	r4, [r0, #8]
			uint32_t cbcmr = CCM_CBCMR;
    27da:	ldr	r2, [r2, #24]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    27dc:	ldr	r1, [pc, #212]	; (28b4 <SPIClass::begin()+0x224>)
    27de:	ubfx	r6, r2, #4, #2
    27e2:	ubfx	r2, r2, #26, #3
			if (d && clkhz/d > _clock) d++;
    27e6:	ldr	r5, [pc, #208]	; (28b8 <SPIClass::begin()+0x228>)
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    27e8:	ldr.w	r1, [r1, r6, lsl #2]
    27ec:	adds	r2, #1
    27ee:	udiv	r2, r1, r2
			if (d && clkhz/d > _clock) d++;
    27f2:	cmp	r2, r5
    27f4:	bhi.n	285a <SPIClass::begin()+0x1ca>
    27f6:	movs	r2, #0
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    27f8:	str	r2, [r0, #12]
		port().CR = 0;
    27fa:	movs	r4, #0
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    27fc:	movs	r1, #3
		port().CR = 0;
    27fe:	str	r4, [r3, #16]
		port().TCR = settings.tcr;
    2800:	movs	r4, #7
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    2802:	str	r1, [r3, #36]	; 0x24
		port().CR = LPSPI_CR_MEN;
    2804:	movs	r1, #1
		port().CCR = _ccr;
    2806:	str	r2, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
    2808:	str	r4, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    280a:	str	r1, [r3, #16]
		if (interruptMasksUsed) {
    280c:	ldrb	r3, [r0, #19]
    280e:	cbz	r3, 2856 <SPIClass::begin()+0x1c6>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    2810:	lsls	r5, r3, #31
    2812:	bpl.n	281e <SPIClass::begin()+0x18e>
    2814:	ldr	r1, [r0, #40]	; 0x28
    2816:	mov.w	r2, #3758153728	; 0xe000e000
    281a:	str.w	r1, [r2, #256]	; 0x100
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    281e:	lsls	r4, r3, #30
    2820:	bpl.n	282c <SPIClass::begin()+0x19c>
    2822:	ldr	r1, [r0, #44]	; 0x2c
    2824:	mov.w	r2, #3758153728	; 0xe000e000
    2828:	str.w	r1, [r2, #260]	; 0x104
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    282c:	lsls	r1, r3, #29
    282e:	bpl.n	283a <SPIClass::begin()+0x1aa>
    2830:	ldr	r1, [r0, #48]	; 0x30
    2832:	mov.w	r2, #3758153728	; 0xe000e000
    2836:	str.w	r1, [r2, #264]	; 0x108
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    283a:	lsls	r2, r3, #28
    283c:	bpl.n	2848 <SPIClass::begin()+0x1b8>
    283e:	ldr	r1, [r0, #52]	; 0x34
    2840:	mov.w	r2, #3758153728	; 0xe000e000
    2844:	str.w	r1, [r2, #268]	; 0x10c
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    2848:	lsls	r3, r3, #27
    284a:	bpl.n	2856 <SPIClass::begin()+0x1c6>
    284c:	ldr	r2, [r0, #56]	; 0x38
    284e:	mov.w	r3, #3758153728	; 0xe000e000
    2852:	str.w	r2, [r3, #272]	; 0x110
}
    2856:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			d = _clock ? clkhz/_clock : clkhz;
    285a:	ldr	r1, [pc, #96]	; (28bc <SPIClass::begin()+0x22c>)
    285c:	umull	r5, r1, r1, r2
    2860:	lsrs	r1, r1, #20
			if (d && clkhz/d > _clock) d++;
    2862:	udiv	r2, r2, r1
    2866:	cmp	r2, r4
    2868:	it	hi
    286a:	addhi	r1, #1
			if (d > 257) d= 257;  // max div
    286c:	cmp.w	r1, #258	; 0x102
    2870:	bcc.n	288e <SPIClass::begin()+0x1fe>
    2872:	ldr	r2, [pc, #76]	; (28c0 <SPIClass::begin()+0x230>)
				div = d-2;
    2874:	b.n	27f8 <SPIClass::begin()+0x168>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    2876:	mov.w	r2, #3758153728	; 0xe000e000
    287a:	ldr	r1, [r0, #36]	; 0x24
    287c:	ldr.w	r3, [r2, #400]	; 0x190
    2880:	ands	r3, r1
    2882:	str	r3, [r0, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    2884:	str.w	r3, [r2, #400]	; 0x190
    2888:	b.n	27ca <SPIClass::begin()+0x13a>
		port().CCR = _ccr;
    288a:	ldr	r2, [r0, #12]
    288c:	b.n	27fa <SPIClass::begin()+0x16a>
			if (d > 2) {
    288e:	cmp	r1, #2
    2890:	bls.n	27f6 <SPIClass::begin()+0x166>
				div = d-2;
    2892:	subs	r1, #2
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    2894:	lsrs	r4, r1, #1
    2896:	lsls	r2, r4, #8
    2898:	orr.w	r2, r2, r4, lsl #16
    289c:	orrs	r2, r1
    289e:	b.n	27f8 <SPIClass::begin()+0x168>
    28a0:	.word	0x400fc000
    28a4:	.word	0xe3ffffcf
    28a8:	.word	0x08000010
    28ac:	.word	0x20000ebc
    28b0:	.word	0x003d0900
    28b4:	.word	0x20000c28
    28b8:	.word	0x003d08ff
    28bc:	.word	0x431bde83
    28c0:	.word	0x007f7fff

000028c4 <SPIClass::transfer(void const*, void*, unsigned int)>:
	if (count == 0) return;
    28c4:	cbz	r3, 28ca <SPIClass::transfer(void const*, void*, unsigned int)+0x6>
    28c6:	b.w	244c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]>
}
    28ca:	bx	lr

000028cc <SPIClass::end()>:
	const SPI_Hardware_t & hardware() { return *(const SPI_Hardware_t *)hardware_addr; }
    28cc:	ldr	r3, [r0, #4]
	if (hardware().clock_gate_register & hardware().clock_gate_mask) {
    28ce:	ldrd	r1, r2, [r3]
    28d2:	ldr	r1, [r1, #0]
    28d4:	tst	r1, r2
    28d6:	bne.n	28da <SPIClass::end()+0xe>
    28d8:	bx	lr
void SPIClass::end() {
    28da:	push	{r4, lr}
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    28dc:	ldr	r2, [r0, #0]
    28de:	mov	r4, r0
		port().CR = 0;  // turn off the enable
    28e0:	movs	r0, #0
		pinMode(hardware().miso_pin[miso_pin_index], INPUT_DISABLE);
    28e2:	movs	r1, #5
		port().CR = 0;  // turn off the enable
    28e4:	str	r0, [r2, #16]
		pinMode(hardware().miso_pin[miso_pin_index], INPUT_DISABLE);
    28e6:	ldrb	r2, [r4, #16]
    28e8:	add	r3, r2
    28ea:	ldrb	r0, [r3, #16]
    28ec:	bl	bc50 <pinMode>
		pinMode(hardware().mosi_pin[mosi_pin_index], INPUT_DISABLE);
    28f0:	ldrb	r2, [r4, #17]
    28f2:	ldr	r3, [r4, #4]
    28f4:	movs	r1, #5
    28f6:	add	r3, r2
    28f8:	ldrb.w	r0, [r3, #36]	; 0x24
    28fc:	bl	bc50 <pinMode>
		pinMode(hardware().sck_pin[sck_pin_index], INPUT_DISABLE);
    2900:	ldr	r3, [r4, #4]
    2902:	ldrb	r2, [r4, #18]
    2904:	movs	r1, #5
    2906:	add	r3, r2
}
    2908:	ldmia.w	sp!, {r4, lr}
		pinMode(hardware().sck_pin[sck_pin_index], INPUT_DISABLE);
    290c:	ldrb.w	r0, [r3, #56]	; 0x38
    2910:	b.w	bc50 <pinMode>

00002914 <_GLOBAL__sub_I__ZN8SPIClass5beginEv>:

	}
}
    2914:	push	{r3, lr}
SPIClass SPI((uintptr_t)&IMXRT_LPSPI4_S, (uintptr_t)&SPIClass::spiclass_lpspi4_hardware);
    2916:	ldr	r2, [pc, #32]	; (2938 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x24>)
    2918:	ldr	r1, [pc, #32]	; (293c <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x28>)
    291a:	ldr	r0, [pc, #36]	; (2940 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x2c>)
    291c:	bl	2664 <SPIClass::SPIClass(unsigned int, unsigned int)>
SPIClass SPI1((uintptr_t)&IMXRT_LPSPI3_S, (uintptr_t)&SPIClass::spiclass_lpspi3_hardware);
    2920:	ldr	r2, [pc, #32]	; (2944 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x30>)
    2922:	ldr	r1, [pc, #36]	; (2948 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x34>)
    2924:	ldr	r0, [pc, #36]	; (294c <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x38>)
    2926:	bl	2664 <SPIClass::SPIClass(unsigned int, unsigned int)>
SPIClass SPI2((uintptr_t)&IMXRT_LPSPI1_S, (uintptr_t)&SPIClass::spiclass_lpspi1_hardware);
    292a:	ldr	r2, [pc, #36]	; (2950 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x3c>)
    292c:	ldr	r1, [pc, #36]	; (2954 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x40>)
    292e:	ldr	r0, [pc, #40]	; (2958 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x44>)
    2930:	bl	2664 <SPIClass::SPIClass(unsigned int, unsigned int)>
}
    2934:	pop	{r3, pc}
    2936:	nop
    2938:	.word	0x20000924
    293c:	.word	0x403a0000
    2940:	.word	0x200057d0
    2944:	.word	0x200008b4
    2948:	.word	0x4039c000
    294c:	.word	0x20005820
    2950:	.word	0x20000844
    2954:	.word	0x40394000
    2958:	.word	0x20005870

0000295c <SDClass::~SDClass()>:
class SDClass : public FS
    295c:	bx	lr
    295e:	nop

00002960 <SDClass::dateTime(unsigned short*, unsigned short*)>:
{
    2960:	push	{r4, r5, lr}
    2962:	sub	sp, #12
    2964:	mov	r5, r0
    2966:	mov	r4, r1
uint32_t makeTime(const DateTimeFields &tm); // convert DateTimeFields to 32 bit time

class teensy3_clock_class
{
public:
        static unsigned long get(void) __attribute__((always_inline)) { return rtc_get(); }
    2968:	bl	ba80 <rtc_get>
	if (now < 315532800) { // before 1980
    296c:	ldr	r3, [pc, #112]	; (29e0 <SDClass::dateTime(unsigned short*, unsigned short*)+0x80>)
    296e:	cmp	r0, r3
    2970:	bhi.n	297c <SDClass::dateTime(unsigned short*, unsigned short*)+0x1c>
		*date = 0;
    2972:	movs	r3, #0
    2974:	strh	r3, [r5, #0]
		*time = 0;
    2976:	strh	r3, [r4, #0]
}
    2978:	add	sp, #12
    297a:	pop	{r4, r5, pc}
		breakTime(now, datetime);
    297c:	mov	r1, sp
    297e:	bl	c3a0 <breakTime(unsigned long, DateTimeFields&)>
		*date = FS_DATE(datetime.year + 1900, datetime.mon + 1, datetime.mday);
    2982:	ldrb.w	r3, [sp, #5]
    2986:	ldrb.w	r2, [sp, #6]
    298a:	adds	r3, #1
    298c:	ldrb.w	r1, [sp, #4]
  year -= 1980;
    2990:	subs	r2, #80	; 0x50
    2992:	uxtb	r3, r3
    2994:	uxth	r2, r2
  return year > 127 || month > 12 || day > 31 ? 0
    2996:	cmp	r1, #31
    2998:	it	ls
    299a:	cmpls	r3, #12
    299c:	bhi.n	29a2 <SDClass::dateTime(unsigned short*, unsigned short*)+0x42>
    299e:	cmp	r2, #127	; 0x7f
    29a0:	bls.n	29d4 <SDClass::dateTime(unsigned short*, unsigned short*)+0x74>
                                              : year << 9 | month << 5 | day;
    29a2:	movs	r1, #0
		*time = FS_TIME(datetime.hour, datetime.min, datetime.sec);
    29a4:	ldrb.w	r2, [sp, #2]
    29a8:	ldrb.w	r3, [sp, #1]
		*date = FS_DATE(datetime.year + 1900, datetime.mon + 1, datetime.mday);
    29ac:	strh	r1, [r5, #0]
  return hour > 23 || minute > 59 || second > 59
    29ae:	cmp	r2, #23
    29b0:	it	ls
    29b2:	cmpls	r3, #59	; 0x3b
		*time = FS_TIME(datetime.hour, datetime.min, datetime.sec);
    29b4:	ldrb.w	r1, [sp]
    29b8:	bhi.n	29be <SDClass::dateTime(unsigned short*, unsigned short*)+0x5e>
    29ba:	cmp	r1, #59	; 0x3b
    29bc:	bls.n	29c6 <SDClass::dateTime(unsigned short*, unsigned short*)+0x66>
             : hour << 11 | minute << 5 | second >> 1;
    29be:	movs	r3, #0
    29c0:	strh	r3, [r4, #0]
}
    29c2:	add	sp, #12
    29c4:	pop	{r4, r5, pc}
    29c6:	lsls	r3, r3, #5
    29c8:	orr.w	r3, r3, r2, lsl #11
    29cc:	orr.w	r3, r3, r1, lsr #1
    29d0:	uxth	r3, r3
    29d2:	b.n	29c0 <SDClass::dateTime(unsigned short*, unsigned short*)+0x60>
                                              : year << 9 | month << 5 | day;
    29d4:	orr.w	r1, r1, r3, lsl #5
    29d8:	orr.w	r1, r1, r2, lsl #9
    29dc:	uxth	r1, r1
    29de:	b.n	29a4 <SDClass::dateTime(unsigned short*, unsigned short*)+0x44>
    29e0:	.word	0x12cea5ff

000029e4 <SDClass::open(char const*, unsigned char)>:
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
    29e4:	cmp	r3, #1
	File open(const char *filepath, uint8_t mode = FILE_READ) {
    29e6:	push	{r4, r5, r6, r7, lr}
    29e8:	mov	r5, r0
    29ea:	sub	sp, #84	; 0x54
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
    29ec:	beq.n	2a6c <SDClass::open(char const*, unsigned char)+0x88>
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
    29ee:	cmp	r3, #2
    29f0:	movw	r0, #514	; 0x202
		SDFAT_FILE file = sdfs.open(filepath, flags);
    29f4:	add.w	r1, r1, #4
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
    29f8:	ite	eq
    29fa:	moveq	r3, r0
    29fc:	movne	r3, #0
		SDFAT_FILE file = sdfs.open(filepath, flags);
    29fe:	mov	r0, sp
    2a00:	bl	79b4 <FsVolume::open(char const*, int)>
    2a04:	ldr	r3, [sp, #72]	; 0x48
    2a06:	cmp	r3, #0
    2a08:	beq.n	2a7e <SDClass::open(char const*, unsigned char)+0x9a>
		if (file) return File(new SDFile(file));
    2a0a:	movs	r0, #92	; 0x5c
class FileImpl {
    2a0c:	movs	r6, #0
    2a0e:	bl	d078 <operator new(unsigned int)>
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
    2a12:	ldr	r3, [pc, #132]	; (2a98 <SDClass::open(char const*, unsigned char)+0xb4>)
    2a14:	add	r7, sp, #16
		if (file) return File(new SDFile(file));
    2a16:	mov	r4, r0
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
    2a18:	strd	r3, r6, [r0]
class Print
    2a1c:	ldrb.w	r3, [sp, #4]
    2a20:	mov	r1, r7
    2a22:	adds	r0, #24
    2a24:	strb.w	r3, [r0, #-12]
class Stream : public Print
    2a28:	ldr	r3, [pc, #112]	; (2a9c <SDClass::open(char const*, unsigned char)+0xb8>)
    2a2a:	str.w	r3, [r0, #-16]
    2a2e:	ldr	r3, [sp, #8]
    2a30:	str.w	r3, [r0, #-8]
    2a34:	ldrb.w	r3, [sp, #12]
    2a38:	strb.w	r3, [r0, #-4]
    2a3c:	bl	76d8 <FsBaseFile::FsBaseFile(FsBaseFile const&)>
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    2a40:	ldr	r3, [pc, #92]	; (2aa0 <SDClass::open(char const*, unsigned char)+0xbc>)
	constexpr Stream() : _timeout(1000), read_error(0) {}
    2a42:	mov.w	r2, #1000	; 0x3e8
    2a46:	str	r6, [r4, #88]	; 0x58
    2a48:	str	r3, [r4, #8]
	File(FileImpl *file) {
    2a4a:	ldr	r3, [pc, #88]	; (2aa4 <SDClass::open(char const*, unsigned char)+0xc0>)
	constexpr Print() : write_error(0) {}
    2a4c:	strb	r6, [r5, #4]
    2a4e:	str	r3, [r5, #0]
		if (f) f->refcount++;
    2a50:	ldr	r3, [r4, #4]
    2a52:	strb	r6, [r5, #12]
    2a54:	adds	r3, #1
    2a56:	str	r2, [r5, #8]
		f = file;
    2a58:	str	r4, [r5, #16]
		if (f) f->refcount++;
    2a5a:	str	r3, [r4, #4]
    2a5c:	ldr	r3, [pc, #72]	; (2aa8 <SDClass::open(char const*, unsigned char)+0xc4>)
  ~FsBaseFile() { close(); }
    2a5e:	mov	r0, r7
    2a60:	str	r3, [sp, #0]
    2a62:	bl	775c <FsBaseFile::close()>
		return File();
	}
    2a66:	mov	r0, r5
    2a68:	add	sp, #84	; 0x54
    2a6a:	pop	{r4, r5, r6, r7, pc}
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
    2a6c:	movw	r3, #16898	; 0x4202
		SDFAT_FILE file = sdfs.open(filepath, flags);
    2a70:	adds	r1, #4
    2a72:	mov	r0, sp
    2a74:	bl	79b4 <FsVolume::open(char const*, int)>
  bool isOpen() const { return m_fFile || m_xFile; }
    2a78:	ldr	r3, [sp, #72]	; 0x48
    2a7a:	cmp	r3, #0
    2a7c:	bne.n	2a0a <SDClass::open(char const*, unsigned char)+0x26>
    2a7e:	ldr	r3, [sp, #76]	; 0x4c
    2a80:	cmp	r3, #0
    2a82:	bne.n	2a0a <SDClass::open(char const*, unsigned char)+0x26>
    2a84:	mov.w	r1, #1000	; 0x3e8
	constexpr File() : f(nullptr) { }
    2a88:	ldr	r2, [pc, #24]	; (2aa4 <SDClass::open(char const*, unsigned char)+0xc0>)
    2a8a:	add	r7, sp, #16
    2a8c:	strb	r3, [r5, #4]
    2a8e:	str	r1, [r5, #8]
    2a90:	strb	r3, [r5, #12]
    2a92:	str	r2, [r5, #0]
    2a94:	str	r3, [r5, #16]
    2a96:	b.n	2a5c <SDClass::open(char const*, unsigned char)+0x78>
    2a98:	.word	0x20000ae8
    2a9c:	.word	0x20000b44
    2aa0:	.word	0x20000ab8
    2aa4:	.word	0x20000a8c
    2aa8:	.word	0x2000099c

00002aac <SDClass::rmdir(char const*)>:
		return sdfs.rename(oldfilepath, newfilepath);
	}
	bool remove(const char *filepath) {
		return sdfs.remove(filepath);
	}
	bool rmdir(const char *filepath) {
    2aac:	push	{r4, lr}
   * The subdirectory file will be removed only if it is empty.
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char* path) {
    return m_fVol ? m_fVol->rmdir(path) : m_xVol ? m_xVol->rmdir(path) : false;
    2aae:	ldr.w	r4, [r0, #1156]	; 0x484
    2ab2:	sub	sp, #56	; 0x38
    2ab4:	mov	r2, r1
    2ab6:	cbz	r4, 2aca <SDClass::rmdir(char const*)+0x1e>
    2ab8:	movs	r3, #0
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char* path) {
    FatFile sub;
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    2aba:	mov	r1, r4
    2abc:	mov	r0, sp
    2abe:	str	r3, [sp, #0]
    2ac0:	bl	6004 <FatFile::open(FatVolume*, char const*, int)>
    2ac4:	cbnz	r0, 2ae8 <SDClass::rmdir(char const*)+0x3c>
		return sdfs.rmdir(filepath);
	}
    2ac6:	add	sp, #56	; 0x38
    2ac8:	pop	{r4, pc}
    2aca:	ldr.w	r1, [r0, #1160]	; 0x488
    2ace:	cbz	r1, 2ae2 <SDClass::rmdir(char const*)+0x36>
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char* path) {
    ExFatFile sub;
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    2ad0:	mov	r3, r4
    2ad2:	mov	r0, sp
    2ad4:	str	r4, [sp, #48]	; 0x30
    2ad6:	bl	43b8 <ExFatFile::open(ExFatVolume*, char const*, int)>
    2ada:	cbnz	r0, 2af2 <SDClass::rmdir(char const*)+0x46>
    2adc:	movs	r0, #0
    2ade:	add	sp, #56	; 0x38
    2ae0:	pop	{r4, pc}
    2ae2:	mov	r0, r1
    2ae4:	add	sp, #56	; 0x38
    2ae6:	pop	{r4, pc}
    2ae8:	mov	r0, sp
    2aea:	bl	64a4 <FatFile::rmdir()>
    2aee:	add	sp, #56	; 0x38
    2af0:	pop	{r4, pc}
    2af2:	mov	r0, sp
    2af4:	bl	4a60 <ExFatFile::rmdir()>
    2af8:	cmp	r0, #0
    2afa:	beq.n	2adc <SDClass::rmdir(char const*)+0x30>
    2afc:	b.n	2ac6 <SDClass::rmdir(char const*)+0x1a>
    2afe:	nop

00002b00 <SDClass::rename(char const*, char const*)>:
	bool rename(const char *oldfilepath, const char *newfilepath) {
    2b00:	push	{r4, r5, r6, lr}
    return m_fVol   ? m_fVol->rename(oldPath, newPath)
    2b02:	ldr.w	r5, [r0, #1156]	; 0x484
    2b06:	sub	sp, #56	; 0x38
    2b08:	mov	r6, r2
    2b0a:	cbz	r5, 2b24 <SDClass::rename(char const*, char const*)+0x24>
#endif  // ENABLE_ARDUINO_STRING

 private:
  friend FatFile;
  static FatVolume* cwv() { return m_cwv; }
  FatFile* vwd() { return &m_vwd; }
    2b0c:	addw	r5, r5, #1092	; 0x444
    2b10:	movs	r3, #0
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
    2b12:	mov	r2, r1
    2b14:	mov	r0, sp
    2b16:	mov	r1, r5
    2b18:	str	r3, [sp, #0]
    2b1a:	bl	5f0c <FatFile::open(FatFile*, char const*, int)>
    2b1e:	cbnz	r0, 2b46 <SDClass::rename(char const*, char const*)+0x46>
	}
    2b20:	add	sp, #56	; 0x38
    2b22:	pop	{r4, r5, r6, pc}
    2b24:	ldr.w	r0, [r0, #1160]	; 0x488
           : m_xVol ? m_xVol->rename(oldPath, newPath)
    2b28:	cmp	r0, #0
    2b2a:	beq.n	2b20 <SDClass::rename(char const*, char const*)+0x20>
#endif  // ENABLE_ARDUINO_STRING

 private:
  friend ExFatFile;
  static ExFatVolume* cwv() { return m_cwv; }
  ExFatFile* vwd() { return &m_vwd; }
    2b2c:	add.w	r4, r0, #1096	; 0x448
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
    2b30:	mov	r2, r1
    2b32:	mov	r3, r5
    2b34:	mov	r0, sp
    2b36:	mov	r1, r4
    2b38:	str	r5, [sp, #48]	; 0x30
    2b3a:	bl	42c4 <ExFatFile::open(ExFatFile*, char const*, int)>
    2b3e:	cbnz	r0, 2b54 <SDClass::rename(char const*, char const*)+0x54>
    2b40:	movs	r0, #0
    2b42:	add	sp, #56	; 0x38
    2b44:	pop	{r4, r5, r6, pc}
    2b46:	mov	r2, r6
    2b48:	mov	r1, r5
    2b4a:	mov	r0, sp
    2b4c:	bl	62b8 <FatFile::rename(FatFile*, char const*)>
    2b50:	add	sp, #56	; 0x38
    2b52:	pop	{r4, r5, r6, pc}
    2b54:	mov	r2, r6
    2b56:	mov	r1, r4
    2b58:	mov	r0, sp
    2b5a:	bl	4d08 <ExFatFile::rename(ExFatFile*, char const*)>
    2b5e:	cmp	r0, #0
    2b60:	beq.n	2b40 <SDClass::rename(char const*, char const*)+0x40>
    2b62:	b.n	2b20 <SDClass::rename(char const*, char const*)+0x20>

00002b64 <SDClass::remove(char const*)>:
	bool remove(const char *filepath) {
    2b64:	push	{r4, lr}
    return m_fVol   ? m_fVol->remove(path)
    2b66:	ldr.w	r4, [r0, #1156]	; 0x484
    2b6a:	sub	sp, #56	; 0x38
    2b6c:	mov	r2, r1
    2b6e:	cbz	r4, 2b84 <SDClass::remove(char const*)+0x20>
    2b70:	movs	r0, #0
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    2b72:	movs	r3, #1
    2b74:	mov	r1, r4
    2b76:	str	r0, [sp, #0]
    2b78:	mov	r0, sp
    2b7a:	bl	6004 <FatFile::open(FatVolume*, char const*, int)>
    2b7e:	cbnz	r0, 2ba2 <SDClass::remove(char const*)+0x3e>
	}
    2b80:	add	sp, #56	; 0x38
    2b82:	pop	{r4, pc}
    2b84:	ldr.w	r1, [r0, #1160]	; 0x488
           : m_xVol ? m_xVol->remove(path)
    2b88:	cbz	r1, 2b9c <SDClass::remove(char const*)+0x38>
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    2b8a:	movs	r3, #1
    2b8c:	mov	r0, sp
    2b8e:	str	r4, [sp, #48]	; 0x30
    2b90:	bl	43b8 <ExFatFile::open(ExFatVolume*, char const*, int)>
    2b94:	cbnz	r0, 2bac <SDClass::remove(char const*)+0x48>
    2b96:	movs	r0, #0
    2b98:	add	sp, #56	; 0x38
    2b9a:	pop	{r4, pc}
    2b9c:	mov	r0, r1
    2b9e:	add	sp, #56	; 0x38
    2ba0:	pop	{r4, pc}
    2ba2:	mov	r0, sp
    2ba4:	bl	75c8 <FatFile::remove()>
    2ba8:	add	sp, #56	; 0x38
    2baa:	pop	{r4, pc}
    2bac:	mov	r0, sp
    2bae:	bl	49ac <ExFatFile::remove()>
    2bb2:	cmp	r0, #0
    2bb4:	beq.n	2b96 <SDClass::remove(char const*)+0x32>
    2bb6:	b.n	2b80 <SDClass::remove(char const*)+0x1c>

00002bb8 <SDClass::mkdir(char const*)>:
	bool mkdir(const char *filepath) {
    2bb8:	push	{r4, r5, lr}
    return m_fVol   ? m_fVol->mkdir(path, pFlag)
    2bba:	ldr.w	r4, [r0, #1156]	; 0x484
    2bbe:	sub	sp, #60	; 0x3c
    2bc0:	mov	r2, r1
    2bc2:	cbz	r4, 2bd8 <SDClass::mkdir(char const*)+0x20>
    2bc4:	movs	r5, #0
    return sub.mkdir(vwd(), path, pFlag);
    2bc6:	movs	r3, #1
    2bc8:	addw	r1, r4, #1092	; 0x444
    2bcc:	mov	r0, sp
    2bce:	str	r5, [sp, #0]
    2bd0:	bl	5e28 <FatFile::mkdir(FatFile*, char const*, bool)>
	}
    2bd4:	add	sp, #60	; 0x3c
    2bd6:	pop	{r4, r5, pc}
    2bd8:	ldr.w	r0, [r0, #1160]	; 0x488
           : m_xVol ? m_xVol->mkdir(path, pFlag)
    2bdc:	cmp	r0, #0
    2bde:	beq.n	2bd4 <SDClass::mkdir(char const*)+0x1c>
    return sub.mkdir(vwd(), path, pFlag);
    2be0:	add.w	r1, r0, #1096	; 0x448
    2be4:	movs	r3, #1
    2be6:	mov	r0, sp
    2be8:	str	r4, [sp, #48]	; 0x30
    2bea:	bl	4e0c <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
    2bee:	add	sp, #60	; 0x3c
    2bf0:	pop	{r4, r5, pc}
    2bf2:	nop

00002bf4 <SDClass::exists(char const*)>:
	bool exists(const char *filepath) {
    2bf4:	push	{r4, lr}
    return m_fVol   ? m_fVol->exists(path)
    2bf6:	ldr.w	r4, [r0, #1156]	; 0x484
    2bfa:	sub	sp, #56	; 0x38
    2bfc:	mov	r2, r1
    2bfe:	cbz	r4, 2c10 <SDClass::exists(char const*)+0x1c>
    2c00:	movs	r3, #0
    return tmp.open(this, path, O_RDONLY);
    2c02:	mov	r1, r4
    2c04:	mov	r0, sp
    2c06:	str	r3, [sp, #0]
    2c08:	bl	6004 <FatFile::open(FatVolume*, char const*, int)>
	}
    2c0c:	add	sp, #56	; 0x38
    2c0e:	pop	{r4, pc}
    2c10:	ldr.w	r1, [r0, #1160]	; 0x488
           : m_xVol ? m_xVol->exists(path)
    2c14:	cbz	r1, 2c24 <SDClass::exists(char const*)+0x30>
    return tmp.open(this, path, O_RDONLY);
    2c16:	mov	r3, r4
    2c18:	mov	r0, sp
    2c1a:	str	r4, [sp, #48]	; 0x30
    2c1c:	bl	43b8 <ExFatFile::open(ExFatVolume*, char const*, int)>
    2c20:	add	sp, #56	; 0x38
    2c22:	pop	{r4, pc}
    2c24:	mov	r0, r1
    2c26:	add	sp, #56	; 0x38
    2c28:	pop	{r4, pc}
    2c2a:	nop

00002c2c <SDClass::usedSize()>:
	uint64_t usedSize() {
    2c2c:	push	{r3, r4, r5, r6, r7, lr}
    2c2e:	mov	r5, r0
		if (!cardPreviouslyPresent) return (uint64_t)0;
    2c30:	ldrb.w	r0, [r0, #1228]	; 0x4cc
    2c34:	cbnz	r0, 2c3a <SDClass::usedSize()+0xe>
    2c36:	mov	r1, r0
		return (uint64_t)(sdfs.clusterCount() - sdfs.freeClusterCount())
		  * (uint64_t)sdfs.bytesPerCluster();
	}
    2c38:	pop	{r3, r4, r5, r6, r7, pc}
    return m_fVol   ? m_fVol->clusterCount()
    2c3a:	ldr.w	r3, [r5, #1156]	; 0x484
    2c3e:	cmp	r3, #0
    2c40:	beq.n	2cda <SDClass::usedSize()+0xae>
  /** Clear the cache and returns a pointer to the cache.  Not for normal apps.
   * \return A pointer to the cache buffer or zero if an error occurs.
   */
  uint8_t* cacheClear() { return m_cache.clear(); }
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const { return m_lastCluster - 1; }
    2c42:	ldr	r4, [r3, #28]
    2c44:	ldr.w	r0, [r5, #1164]	; 0x48c
    2c48:	subs	r4, #1
    }
    return rtn;
  }
  //----------------------------------------------------------------------------
  /** \return true if can be in dedicated SPI state */
  bool hasDedicatedSpi() { return m_card ? m_card->hasDedicatedSpi() : false; }
    2c4a:	cmp	r0, #0
    2c4c:	beq.n	2d06 <SDClass::usedSize()+0xda>
    2c4e:	ldr	r3, [r0, #0]
    2c50:	ldr	r3, [r3, #56]	; 0x38
    2c52:	blx	r3
    2c54:	cbz	r0, 2c90 <SDClass::usedSize()+0x64>
    2c56:	ldr.w	r0, [r5, #1164]	; 0x48c
    }
    errorPrint(pr);
  }
  //----------------------------------------------------------------------------
  /** \return true if in dedicated SPI state. */
  bool isDedicatedSpi() { return m_card ? m_card->isDedicatedSpi() : false; }
    2c5a:	cbz	r0, 2cbc <SDClass::usedSize()+0x90>
    2c5c:	ldr	r3, [r0, #0]
    2c5e:	ldr	r3, [r3, #60]	; 0x3c
    2c60:	blx	r3
    2c62:	cbnz	r0, 2c90 <SDClass::usedSize()+0x64>
    2c64:	ldr.w	r0, [r5, #1164]	; 0x48c
  /** Set SPI sharing state
   * \param[in] value desired state.
   * \return true for success else false;
   */
  bool setDedicatedSpi(bool value) {
    if (m_card) {
    2c68:	cbz	r0, 2cbc <SDClass::usedSize()+0x90>
      return m_card->setDedicatedSpi(value);
    2c6a:	ldr	r3, [r0, #0]
    2c6c:	movs	r1, #1
    2c6e:	ldr	r3, [r3, #64]	; 0x40
    2c70:	blx	r3
    if (switchSpi && !setDedicatedSpi(true)) {
    2c72:	mov	r7, r0
    2c74:	cbz	r0, 2cbc <SDClass::usedSize()+0x90>
    return m_fVol   ? m_fVol->freeClusterCount()
    2c76:	ldr.w	r0, [r5, #1156]	; 0x484
    2c7a:	cbnz	r0, 2cd4 <SDClass::usedSize()+0xa8>
    2c7c:	ldr.w	r3, [r5, #1160]	; 0x488
           : m_xVol ? m_xVol->freeClusterCount()
    2c80:	cbnz	r3, 2ca0 <SDClass::usedSize()+0x74>
    2c82:	ldr.w	r0, [r5, #1164]	; 0x48c
    if (m_card) {
    2c86:	cmp	r0, #0
    2c88:	beq.n	2d16 <SDClass::usedSize()+0xea>
    uint32_t rtn = Vol::freeClusterCount();
    2c8a:	mov.w	r6, #4294967295
    2c8e:	b.n	2cb0 <SDClass::usedSize()+0x84>
    return m_fVol   ? m_fVol->freeClusterCount()
    2c90:	ldr.w	r0, [r5, #1156]	; 0x484
    2c94:	cbnz	r0, 2cd2 <SDClass::usedSize()+0xa6>
    2c96:	ldr.w	r3, [r5, #1160]	; 0x488
           : m_xVol ? m_xVol->freeClusterCount()
    2c9a:	cmp	r3, #0
    2c9c:	beq.n	2d16 <SDClass::usedSize()+0xea>
    bool switchSpi = hasDedicatedSpi() && !isDedicatedSpi();
    2c9e:	mov	r7, r0
    2ca0:	mov	r0, r3
    2ca2:	bl	47a4 <ExFatPartition::freeClusterCount()>
    uint32_t rtn = Vol::freeClusterCount();
    2ca6:	mov	r6, r0
    if (switchSpi && !setDedicatedSpi(false)) {
    2ca8:	cbz	r7, 2cba <SDClass::usedSize()+0x8e>
    2caa:	ldr.w	r0, [r5, #1164]	; 0x48c
    if (m_card) {
    2cae:	cbz	r0, 2cbc <SDClass::usedSize()+0x90>
      return m_card->setDedicatedSpi(value);
    2cb0:	ldr	r3, [r0, #0]
    2cb2:	movs	r1, #0
    2cb4:	ldr	r3, [r3, #64]	; 0x40
    2cb6:	blx	r3
    if (switchSpi && !setDedicatedSpi(false)) {
    2cb8:	cbz	r0, 2cbc <SDClass::usedSize()+0x90>
		return (uint64_t)(sdfs.clusterCount() - sdfs.freeClusterCount())
    2cba:	subs	r4, r4, r6
    return m_fVol   ? m_fVol->bytesPerCluster()
    2cbc:	ldr.w	r3, [r5, #1156]	; 0x484
    2cc0:	cbz	r3, 2cf6 <SDClass::usedSize()+0xca>
    return m_bytesPerSector << m_sectorsPerClusterShift;
    2cc2:	ldrb	r3, [r3, #6]
    2cc4:	mov.w	r1, #512	; 0x200
    2cc8:	lsls	r1, r3
		  * (uint64_t)sdfs.bytesPerCluster();
    2cca:	uxth	r1, r1
    2ccc:	umull	r0, r1, r1, r4
	}
    2cd0:	pop	{r3, r4, r5, r6, r7, pc}
    bool switchSpi = hasDedicatedSpi() && !isDedicatedSpi();
    2cd2:	movs	r7, #0
    return m_fVol   ? m_fVol->freeClusterCount()
    2cd4:	bl	6cc4 <FatPartition::freeClusterCount()>
    2cd8:	b.n	2ca6 <SDClass::usedSize()+0x7a>
    2cda:	ldr.w	r3, [r5, #1160]	; 0x488
  uint32_t clusterCount() const {
    2cde:	ldr.w	r0, [r5, #1164]	; 0x48c
           : m_xVol ? m_xVol->clusterCount()
    2ce2:	cbz	r3, 2d10 <SDClass::usedSize()+0xe4>
  /** Clear the cache and returns a pointer to the cache.  Not for normal apps.
   * \return A pointer to the cache buffer or zero if an error occurs.
   */
  uint8_t* cacheClear() { return m_dataCache.clear(); }
  /** \return the cluster count for the partition. */
  uint32_t clusterCount() const { return m_clusterCount; }
    2ce4:	ldr.w	r4, [r3, #1072]	; 0x430
  bool hasDedicatedSpi() { return m_card ? m_card->hasDedicatedSpi() : false; }
    2ce8:	cmp	r0, #0
    2cea:	bne.n	2c4e <SDClass::usedSize()+0x22>
           : m_xVol ? m_xVol->freeClusterCount()
    2cec:	mov	r0, r3
    2cee:	bl	47a4 <ExFatPartition::freeClusterCount()>
    2cf2:	mov	r6, r0
    2cf4:	b.n	2cba <SDClass::usedSize()+0x8e>
    2cf6:	ldr.w	r3, [r5, #1160]	; 0x488
           : m_xVol ? m_xVol->bytesPerCluster()
    2cfa:	cbz	r3, 2d16 <SDClass::usedSize()+0xea>
		  * (uint64_t)sdfs.bytesPerCluster();
    2cfc:	ldr.w	r1, [r3, #1084]	; 0x43c
    2d00:	umull	r0, r1, r1, r4
	}
    2d04:	pop	{r3, r4, r5, r6, r7, pc}
    return m_fVol   ? m_fVol->freeClusterCount()
    2d06:	mov	r0, r3
    2d08:	bl	6cc4 <FatPartition::freeClusterCount()>
    2d0c:	mov	r6, r0
    2d0e:	b.n	2cba <SDClass::usedSize()+0x8e>
    2d10:	cbz	r0, 2d16 <SDClass::usedSize()+0xea>
           : m_xVol ? m_xVol->clusterCount()
    2d12:	mov	r4, r3
    2d14:	b.n	2c4e <SDClass::usedSize()+0x22>
  uint32_t bytesPerCluster() const {
    2d16:	movs	r0, #0
    2d18:	mov	r1, r0
    2d1a:	b.n	2c38 <SDClass::usedSize()+0xc>

00002d1c <SDClass::totalSize()>:
	uint64_t totalSize() {
		if (!cardPreviouslyPresent) return (uint64_t)0;
    2d1c:	ldrb.w	r3, [r0, #1228]	; 0x4cc
    2d20:	cbz	r3, 2d3c <SDClass::totalSize()+0x20>
    return m_fVol   ? m_fVol->clusterCount()
    2d22:	ldr.w	r3, [r0, #1156]	; 0x484
    2d26:	cbz	r3, 2d42 <SDClass::totalSize()+0x26>
    2d28:	ldrb	r2, [r3, #6]
    2d2a:	mov.w	r0, #512	; 0x200
  uint32_t clusterCount() const { return m_lastCluster - 1; }
    2d2e:	ldr	r1, [r3, #28]
    return m_bytesPerSector << m_sectorsPerClusterShift;
    2d30:	lsls	r0, r2
  uint32_t clusterCount() const { return m_lastCluster - 1; }
    2d32:	subs	r1, #1
		return (uint64_t)sdfs.clusterCount() * (uint64_t)sdfs.bytesPerCluster();
    2d34:	uxth	r0, r0
    2d36:	umull	r0, r1, r0, r1
    2d3a:	bx	lr
		if (!cardPreviouslyPresent) return (uint64_t)0;
    2d3c:	mov	r0, r3
    2d3e:	mov	r1, r0
	}
    2d40:	bx	lr
    2d42:	ldr.w	r0, [r0, #1160]	; 0x488
           : m_xVol ? m_xVol->clusterCount()
    2d46:	cmp	r0, #0
    2d48:	beq.n	2d3e <SDClass::totalSize()+0x22>
		return (uint64_t)sdfs.clusterCount() * (uint64_t)sdfs.bytesPerCluster();
    2d4a:	ldr.w	r1, [r0, #1084]	; 0x43c
    2d4e:	ldr.w	r0, [r0, #1072]	; 0x430
    2d52:	umull	r0, r1, r1, r0
    2d56:	bx	lr

00002d58 <SDClass::format(int, char, Print&)>:
{
    2d58:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  SdCard* card() { return m_card; }
    2d5c:	ldr.w	r5, [r0, #1164]	; 0x48c
    2d60:	sub	sp, #60	; 0x3c
	if (!card) return false; // no SD card
    2d62:	cbz	r5, 2d78 <SDClass::format(int, char, Print&)+0x20>
    2d64:	mov	r8, r3
	uint32_t sectors = card->sectorCount();
    2d66:	ldr	r3, [r5, #0]
    2d68:	mov	r4, r0
    2d6a:	mov	r0, r5
    2d6c:	ldr	r3, [r3, #24]
    2d6e:	blx	r3
	if (sectors <= 12288) return false; // card too small
    2d70:	cmp.w	r0, #12288	; 0x3000
	uint32_t sectors = card->sectorCount();
    2d74:	mov	r6, r0
	if (sectors <= 12288) return false; // card too small
    2d76:	bhi.n	2d82 <SDClass::format(int, char, Print&)+0x2a>
	if (!card) return false; // no SD card
    2d78:	movs	r6, #0
}
    2d7a:	mov	r0, r6
    2d7c:	add	sp, #60	; 0x3c
    2d7e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint8_t *buf = (uint8_t *)malloc(512);
    2d82:	mov.w	r0, #512	; 0x200
    2d86:	bl	d210 <malloc>
	if (!buf) return false; // unable to allocate memory
    2d8a:	mov	r7, r0
    2d8c:	cmp	r0, #0
    2d8e:	beq.n	2d78 <SDClass::format(int, char, Print&)+0x20>
		ret = exFatFormatter.format(card, buf, &pr);
    2d90:	add.w	r9, sp, #12
	if (sectors > 67108864) {
    2d94:	cmp.w	r6, #67108864	; 0x4000000
		ret = exFatFormatter.format(card, buf, &pr);
    2d98:	mov	r2, r0
    2d9a:	mov	r3, r8
    2d9c:	mov	r1, r5
    2d9e:	mov	r0, r9
	if (sectors > 67108864) {
    2da0:	bls.n	2e02 <SDClass::format(int, char, Print&)+0xaa>
		ret = exFatFormatter.format(card, buf, &pr);
    2da2:	bl	346c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)>
    2da6:	mov	r6, r0
	free(buf);
    2da8:	mov	r0, r7
    2daa:	bl	d220 <free>
	if (ret) {
    2dae:	cmp	r6, #0
    2db0:	beq.n	2d78 <SDClass::format(int, char, Print&)+0x20>
		card->syncDevice();
    2db2:	ldr	r3, [r5, #0]
    2db4:	mov	r0, r5
		sdfs.restart(); // TODO: is sdfs.volumeBegin() enough??
    2db6:	adds	r7, r4, #4
		card->syncDevice();
    2db8:	ldr	r3, [r3, #28]
    2dba:	blx	r3
    if (spiConfigBackupPin == 255) {
    2dbc:	ldrb.w	r3, [r4, #1212]	; 0x4bc
    2dc0:	cmp	r3, #255	; 0xff
    2dc2:	beq.n	2e0a <SDClass::format(int, char, Print&)+0xb2>
      SdSpiConfig spiConfig(spiConfigBackupPin, spiConfigBackupOptions,
    2dc4:	ldr.w	r3, [r4, #1216]	; 0x4c0
   *
   * \param[in] config SPI configuration.
   * \return generic card pointer.
   */
  SdCard* newCard(SdSpiConfig config) {
    m_spiCard.begin(config);
    2dc8:	addw	r5, r4, #1180	; 0x49c
    2dcc:	str	r3, [sp, #16]
    2dce:	mov	r0, r5
    2dd0:	ldr.w	r3, [r4, #1220]	; 0x4c4
  bool cardBegin(SdSpiConfig spiConfig) {
    2dd4:	str	r3, [sp, #20]
    2dd6:	ldrh.w	r3, [r4, #1212]	; 0x4bc
    2dda:	strh.w	r3, [sp, #12]
    2dde:	ldmia.w	r9, {r1, r2, r3}
    2de2:	bl	8978 <DedicatedSpiCard::begin(SdSpiConfig)>
    return m_card && !m_card->errorCode();
    2de6:	ldrb.w	r2, [r4, #1198]	; 0x4ae
    m_card = m_cardFactory.newCard(spiConfig);
    2dea:	str.w	r5, [r4, #1164]	; 0x48c
    return m_card && !m_card->errorCode();
    2dee:	cmp	r2, #0
    2df0:	bne.n	2d7a <SDClass::format(int, char, Print&)+0x22>
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    2df2:	movs	r3, #1
    2df4:	str	r2, [sp, #0]
    2df6:	mov	r1, r5
    2df8:	mov	r0, r7
    2dfa:	mov	r2, r3
    2dfc:	bl	78a0 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)>
    2e00:	b.n	2d7a <SDClass::format(int, char, Print&)+0x22>
		ret = fatFormatter.format(card, buf, &pr);
    2e02:	bl	5824 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)>
    2e06:	mov	r6, r0
    2e08:	b.n	2da8 <SDClass::format(int, char, Print&)+0x50>
   * \param[in] config SDIO configuration.
   * \return generic card pointer or nullptr if SDIO is not supported.
   */
  SdCard* newCard(SdioConfig config) {
#if HAS_SDIO_CLASS
    m_sdioCard.begin(config);
    2e0a:	add.w	r5, r4, #1168	; 0x490
    2e0e:	ldrb.w	r1, [r4, #1224]	; 0x4c8
    2e12:	mov	r0, r5
    2e14:	bl	93e8 <SdioCard::begin(SdioConfig)>
    return m_card && !m_card->errorCode();
    2e18:	mov	r0, r5
    m_card = m_cardFactory.newCard(sdioConfig);
    2e1a:	str.w	r5, [r4, #1164]	; 0x48c
    return m_card && !m_card->errorCode();
    2e1e:	bl	8acc <SdioCard::errorCode() const>
    2e22:	mov	r2, r0
    2e24:	cmp	r0, #0
    2e26:	bne.n	2d7a <SDClass::format(int, char, Print&)+0x22>
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    2e28:	movs	r3, #1
    2e2a:	ldr.w	r1, [r4, #1164]	; 0x48c
    2e2e:	mov	r0, r7
    2e30:	str	r2, [sp, #0]
    2e32:	mov	r2, r3
    2e34:	bl	78a0 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)>
    2e38:	b.n	2d7a <SDClass::format(int, char, Print&)+0x22>
    2e3a:	nop

00002e3c <SDClass::mediaPresent()>:
{
    2e3c:	push	{r4, r5, r6, r7, lr}
  SdCard* card() { return m_card; }
    2e3e:	ldr.w	r6, [r0, #1164]	; 0x48c
    2e42:	sub	sp, #28
    2e44:	mov	r4, r0
	if (card) {
    2e46:	cmp	r6, #0
    2e48:	beq.n	2ed2 <SDClass::mediaPresent()+0x96>
		if (cardPreviouslyPresent) {
    2e4a:	ldrb.w	r5, [r0, #1228]	; 0x4cc
			if (csPin_ == BUILTIN_SDCARD) {
    2e4e:	ldrb.w	r3, [r0, #1229]	; 0x4cd
		if (cardPreviouslyPresent) {
    2e52:	cbz	r5, 2e76 <SDClass::mediaPresent()+0x3a>
			if (csPin_ == BUILTIN_SDCARD) {
    2e54:	cmp	r3, #254	; 0xfe
    2e56:	beq.n	2f26 <SDClass::mediaPresent()+0xea>
				if (cdPin_ < NUM_DIGITAL_PINS) ret = digitalRead(cdPin_);
    2e58:	ldrb.w	r0, [r4, #1230]	; 0x4ce
    2e5c:	cmp	r0, #54	; 0x36
    2e5e:	bls.n	2ede <SDClass::mediaPresent()+0xa2>
					ret = card->readCID(&cid);
    2e60:	ldr	r3, [r6, #0]
    2e62:	add	r1, sp, #8
    2e64:	mov	r0, r6
    2e66:	ldr	r3, [r3, #68]	; 0x44
    2e68:	blx	r3
    2e6a:	mov	r5, r0
}
    2e6c:	mov	r0, r5
	cardPreviouslyPresent = ret;
    2e6e:	strb.w	r5, [r4, #1228]	; 0x4cc
}
    2e72:	add	sp, #28
    2e74:	pop	{r4, r5, r6, r7, pc}
			if (csPin_ == BUILTIN_SDCARD) ret = digitalReadFast(_SD_DAT3);
    2e76:	cmp	r3, #254	; 0xfe
    2e78:	beq.n	2eca <SDClass::mediaPresent()+0x8e>
				if (cdPin_ < NUM_DIGITAL_PINS) ret = digitalRead(cdPin_);
    2e7a:	ldrb.w	r0, [r0, #1230]	; 0x4ce
    2e7e:	cmp	r0, #54	; 0x36
    2e80:	bls.n	2f1c <SDClass::mediaPresent()+0xe0>
    if (spiConfigBackupPin == 255) {
    2e82:	ldrb.w	r3, [r4, #1212]	; 0x4bc
				ret = sdfs.restart();
    2e86:	adds	r7, r4, #4
    2e88:	cmp	r3, #255	; 0xff
    2e8a:	beq.n	2eea <SDClass::mediaPresent()+0xae>
      SdSpiConfig spiConfig(spiConfigBackupPin, spiConfigBackupOptions,
    2e8c:	ldr.w	r3, [r4, #1216]	; 0x4c0
    m_spiCard.begin(config);
    2e90:	addw	r6, r4, #1180	; 0x49c
    2e94:	ldr.w	r2, [r4, #1220]	; 0x4c4
  bool cardBegin(SdSpiConfig spiConfig) {
    2e98:	str	r3, [sp, #12]
    2e9a:	mov	r0, r6
    2e9c:	ldrh.w	r3, [r4, #1212]	; 0x4bc
    2ea0:	str	r2, [sp, #16]
    2ea2:	strh.w	r3, [sp, #8]
    2ea6:	add	r3, sp, #8
    2ea8:	ldmia	r3, {r1, r2, r3}
    2eaa:	bl	8978 <DedicatedSpiCard::begin(SdSpiConfig)>
    return m_card && !m_card->errorCode();
    2eae:	ldrb.w	r2, [r4, #1198]	; 0x4ae
    m_card = m_cardFactory.newCard(spiConfig);
    2eb2:	str.w	r6, [r4, #1164]	; 0x48c
    return m_card && !m_card->errorCode();
    2eb6:	cbnz	r2, 2ed4 <SDClass::mediaPresent()+0x98>
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    2eb8:	movs	r3, #1
    2eba:	str	r2, [sp, #0]
    2ebc:	mov	r1, r6
    2ebe:	mov	r0, r7
    2ec0:	mov	r2, r3
    2ec2:	bl	78a0 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)>
    2ec6:	mov	r5, r0
    2ec8:	b.n	2ed4 <SDClass::mediaPresent()+0x98>
			return (CORE_PIN46_PINREG & CORE_PIN46_BITMASK) ? 1 : 0;
    2eca:	ldr	r3, [pc, #128]	; (2f4c <SDClass::mediaPresent()+0x110>)
    2ecc:	ldr	r3, [r3, #8]
			if (ret)
    2ece:	lsls	r3, r3, #14
    2ed0:	bmi.n	2e82 <SDClass::mediaPresent()+0x46>
		ret = false;
    2ed2:	movs	r5, #0
}
    2ed4:	mov	r0, r5
	cardPreviouslyPresent = ret;
    2ed6:	strb.w	r5, [r4, #1228]	; 0x4cc
}
    2eda:	add	sp, #28
    2edc:	pop	{r4, r5, r6, r7, pc}
				if (cdPin_ < NUM_DIGITAL_PINS) ret = digitalRead(cdPin_);
    2ede:	bl	bc2c <digitalRead>
    2ee2:	subs	r5, r0, #0
    2ee4:	it	ne
    2ee6:	movne	r5, #1
    2ee8:	b.n	2ed4 <SDClass::mediaPresent()+0x98>
    m_sdioCard.begin(config);
    2eea:	add.w	r6, r4, #1168	; 0x490
    2eee:	ldrb.w	r1, [r4, #1224]	; 0x4c8
    2ef2:	mov	r0, r6
    2ef4:	bl	93e8 <SdioCard::begin(SdioConfig)>
    return m_card && !m_card->errorCode();
    2ef8:	mov	r0, r6
    m_card = m_cardFactory.newCard(sdioConfig);
    2efa:	str.w	r6, [r4, #1164]	; 0x48c
    return m_card && !m_card->errorCode();
    2efe:	bl	8acc <SdioCard::errorCode() const>
    2f02:	mov	r2, r0
    2f04:	cmp	r0, #0
    2f06:	bne.n	2ed4 <SDClass::mediaPresent()+0x98>
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    2f08:	movs	r3, #1
    2f0a:	str	r2, [sp, #0]
    2f0c:	mov	r0, r7
    2f0e:	ldr.w	r1, [r4, #1164]	; 0x48c
    2f12:	mov	r2, r3
    2f14:	bl	78a0 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)>
    2f18:	mov	r5, r0
    2f1a:	b.n	2ed4 <SDClass::mediaPresent()+0x98>
				if (cdPin_ < NUM_DIGITAL_PINS) ret = digitalRead(cdPin_);
    2f1c:	bl	bc2c <digitalRead>
			if (ret)
    2f20:	cmp	r0, #0
    2f22:	bne.n	2e82 <SDClass::mediaPresent()+0x46>
    2f24:	b.n	2ed2 <SDClass::mediaPresent()+0x96>
				s = card->status();
    2f26:	ldr	r3, [r6, #0]
    2f28:	mov	r0, r6
    2f2a:	ldr	r3, [r3, #88]	; 0x58
    2f2c:	blx	r3
			if (s == 0xFFFFFFFF) {
    2f2e:	adds	r2, r0, #1
				s = card->status();
    2f30:	mov	r3, r0
			if (s == 0xFFFFFFFF) {
    2f32:	beq.n	2e58 <SDClass::mediaPresent()+0x1c>
			} else if (s == 0) {
    2f34:	cmp	r0, #0
    2f36:	bne.n	2ed4 <SDClass::mediaPresent()+0x98>
				if (csPin_ == BUILTIN_SDCARD) 
    2f38:	ldrb.w	r2, [r4, #1229]	; 0x4cd
    2f3c:	cmp	r2, #254	; 0xfe
    2f3e:	bne.n	2ed2 <SDClass::mediaPresent()+0x96>
					pinMode(_SD_DAT3, INPUT_PULLDOWN);
    2f40:	movs	r1, #3
    2f42:	movs	r0, #46	; 0x2e
				ret = false;
    2f44:	mov	r5, r3
					pinMode(_SD_DAT3, INPUT_PULLDOWN);
    2f46:	bl	bc50 <pinMode>
    2f4a:	b.n	2ed4 <SDClass::mediaPresent()+0x98>
    2f4c:	.word	0x42008000

00002f50 <SDClass::begin(unsigned char)>:
bool SDClass::begin(uint8_t csPin) {
    2f50:	push	{r4, r5, r6, r7, lr}
    2f52:	mov	r5, r1
    2f54:	mov	r4, r0
    2f56:	sub	sp, #28
	FsDateTime::setCallback(dateTime);
    2f58:	ldr	r0, [pc, #196]	; (3020 <SDClass::begin(unsigned char)+0xd0>)
    2f5a:	bl	32c8 <FsDateTime::setCallback(void (*)(unsigned short*, unsigned short*))>
	if (csPin == BUILTIN_SDCARD) {
    2f5e:	cmp	r5, #254	; 0xfe
	csPin_ = csPin; // remember which one passed in. 
    2f60:	strb.w	r5, [r4, #1229]	; 0x4cd
	if (csPin == BUILTIN_SDCARD) {
    2f64:	beq.n	2fb4 <SDClass::begin(unsigned char)+0x64>
	if (csPin < NUM_DIGITAL_PINS) {
    2f66:	cmp	r5, #54	; 0x36
    2f68:	bls.n	2f70 <SDClass::begin(unsigned char)+0x20>
	return false;
    2f6a:	movs	r0, #0
}
    2f6c:	add	sp, #28
    2f6e:	pop	{r4, r5, r6, r7, pc}
    spiConfigBackupOptions = spiConfig.options;
    2f70:	movs	r6, #0
    spiConfigBackupClock = spiConfig.maxSck;
    2f72:	ldr	r3, [pc, #176]	; (3024 <SDClass::begin(unsigned char)+0xd4>)
    m_spiCard.begin(config);
    2f74:	addw	r7, r4, #1180	; 0x49c
    2f78:	strb.w	r5, [sp, #12]
    2f7c:	str.w	r3, [r4, #1216]	; 0x4c0
    2f80:	strb.w	r6, [sp, #13]
    2f84:	mov	r0, r7
    spiConfigBackupPin = spiConfig.csPin; 
    2f86:	strb.w	r5, [r4, #1212]	; 0x4bc
    spiConfigBackupOptions = spiConfig.options;
    2f8a:	strb.w	r6, [r4, #1213]	; 0x4bd
    spiConfigBackupPort = spiConfig.spiPort;
    2f8e:	str.w	r6, [r4, #1220]	; 0x4c4
    2f92:	strd	r3, r6, [sp, #16]
    2f96:	add	r3, sp, #24
    2f98:	ldmdb	r3, {r1, r2, r3}
    2f9c:	bl	8978 <DedicatedSpiCard::begin(SdSpiConfig)>
    return m_card && !m_card->errorCode();
    2fa0:	ldrb.w	r2, [r4, #1198]	; 0x4ae
    m_card = m_cardFactory.newCard(spiConfig);
    2fa4:	str.w	r7, [r4, #1164]	; 0x48c
    return m_card && !m_card->errorCode();
    2fa8:	cbz	r2, 3010 <SDClass::begin(unsigned char)+0xc0>
    return cardBegin(spiConfig) && Vol::begin(m_card);
    2faa:	mov	r0, r6
		cardPreviouslyPresent = ret;
    2fac:	strb.w	r0, [r4, #1228]	; 0x4cc
}
    2fb0:	add	sp, #28
    2fb2:	pop	{r4, r5, r6, r7, pc}
    sdioConfigBackup = sdioConfig;
    2fb4:	movs	r3, #0
    spiConfigBackupPin = 255; // Teensy
    2fb6:	movs	r2, #255	; 0xff
    m_sdioCard.begin(config);
    2fb8:	add.w	r5, r4, #1168	; 0x490
    2fbc:	strb.w	r2, [r4, #1212]	; 0x4bc
    2fc0:	mov	r1, r3
    sdioConfigBackup = sdioConfig;
    2fc2:	strb.w	r3, [r4, #1224]	; 0x4c8
    2fc6:	mov	r0, r5
    2fc8:	bl	93e8 <SdioCard::begin(SdioConfig)>
    return m_card && !m_card->errorCode();
    2fcc:	mov	r0, r5
    m_card = m_cardFactory.newCard(sdioConfig);
    2fce:	str.w	r5, [r4, #1164]	; 0x48c
    return m_card && !m_card->errorCode();
    2fd2:	bl	8acc <SdioCard::errorCode() const>
    2fd6:	mov	r2, r0
    2fd8:	cbnz	r0, 2ffa <SDClass::begin(unsigned char)+0xaa>
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    2fda:	movs	r3, #1
    2fdc:	ldr.w	r1, [r4, #1164]	; 0x48c
    2fe0:	adds	r0, r4, #4
    2fe2:	str	r2, [sp, #0]
    2fe4:	mov	r2, r3
    2fe6:	bl	78a0 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)>
    2fea:	cbz	r0, 2ffa <SDClass::begin(unsigned char)+0xaa>
		cardPreviouslyPresent = ret;
    2fec:	movs	r2, #1
		cdPin_ = _SD_DAT3;
    2fee:	movs	r3, #46	; 0x2e
		cardPreviouslyPresent = ret;
    2ff0:	strb.w	r2, [r4, #1228]	; 0x4cc
		cdPin_ = _SD_DAT3;
    2ff4:	strb.w	r3, [r4, #1230]	; 0x4ce
		if (!ret) pinMode(_SD_DAT3, INPUT_PULLDOWN);
    2ff8:	b.n	2f6c <SDClass::begin(unsigned char)+0x1c>
		cdPin_ = _SD_DAT3;
    2ffa:	movs	r0, #46	; 0x2e
		cardPreviouslyPresent = ret;
    2ffc:	movs	r5, #0
		if (!ret) pinMode(_SD_DAT3, INPUT_PULLDOWN);
    2ffe:	movs	r1, #3
		cdPin_ = _SD_DAT3;
    3000:	strb.w	r0, [r4, #1230]	; 0x4ce
		cardPreviouslyPresent = ret;
    3004:	strb.w	r5, [r4, #1228]	; 0x4cc
		if (!ret) pinMode(_SD_DAT3, INPUT_PULLDOWN);
    3008:	bl	bc50 <pinMode>
    300c:	mov	r0, r5
    300e:	b.n	2f6c <SDClass::begin(unsigned char)+0x1c>
    3010:	movs	r3, #1
    3012:	str	r2, [sp, #0]
    3014:	mov	r1, r7
    3016:	adds	r0, r4, #4
    3018:	mov	r2, r3
    301a:	bl	78a0 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)>
    301e:	b.n	2fac <SDClass::begin(unsigned char)+0x5c>
    3020:	.word	0x00002961
    3024:	.word	0x017d7840

00003028 <_GLOBAL__sub_I_SD>:
	SDClass() { }
    3028:	ldr	r0, [pc, #108]	; (3098 <_GLOBAL__sub_I_SD+0x70>)
  FsVolume() = default;
    302a:	movs	r3, #0
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
    302c:	ldr	r2, [pc, #108]	; (309c <_GLOBAL__sub_I_SD+0x74>)
    302e:	mov.w	ip, #255	; 0xff
	SPISettings() : _clock(4000000) {
    3032:	ldr	r1, [pc, #108]	; (30a0 <_GLOBAL__sub_I_SD+0x78>)
	}
	return true;
}
    3034:	push	{r4}
    3036:	ldr	r4, [pc, #108]	; (30a4 <_GLOBAL__sub_I_SD+0x7c>)
    3038:	str.w	r2, [r0, #1168]	; 0x490
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
    303c:	movs	r2, #7
    303e:	str	r4, [r0, #0]
  /** SD is in multi-sector read state. */
  static const uint8_t READ_STATE = 1;
  /** SD is in multi-sector write state. */
  static const uint8_t WRITE_STATE = 2;
  /** Construct an instance of SharedSpiCard. */
  SharedSpiCard() { initSharedSpiCard(); }
    3040:	mov.w	r4, #2752512	; 0x2a0000
	SPISettings() : _clock(4000000) {
    3044:	str.w	r1, [r0, #1188]	; 0x4a4
    3048:	mov.w	r1, #65280	; 0xff00
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
    304c:	str.w	r2, [r0, #1192]	; 0x4a8
 * \brief Raw access to SD and SDHC flash memory cards via dedicate SPI port.
 */
class DedicatedSpiCard : public SharedSpiCard {
 public:
  /** Construct an instance of DedicatedSpiCard. */
  DedicatedSpiCard() = default;
    3050:	ldr	r2, [pc, #84]	; (30a8 <_GLOBAL__sub_I_SD+0x80>)
    3052:	strh.w	r1, [r0, #1228]	; 0x4cc
  SdioConfig() {}
    3056:	strh.w	r3, [r0, #1176]	; 0x498
  SharedSpiCard() { initSharedSpiCard(); }
    305a:	str.w	r4, [r0, #1196]	; 0x4ac
    305e:	strh.w	r3, [r0, #1200]	; 0x4b0
    m_type = 0;
    3062:	strb.w	r3, [r0, #1202]	; 0x4b2
    3066:	strb.w	r3, [r0, #1224]	; 0x4c8
    306a:	strb.w	ip, [r0, #1230]	; 0x4ce
  DedicatedSpiCard() = default;
    306e:	str.w	r2, [r0, #1180]	; 0x49c
SDClass SD;
    3072:	ldr	r1, [pc, #56]	; (30ac <_GLOBAL__sub_I_SD+0x84>)
    3074:	ldr	r2, [pc, #56]	; (30b0 <_GLOBAL__sub_I_SD+0x88>)
}
    3076:	ldr.w	r4, [sp], #4
    307a:	str.w	r3, [r0, #1156]	; 0x484
    307e:	str.w	r3, [r0, #1160]	; 0x488
class SdBase : public Vol {
    3082:	str.w	r3, [r0, #1164]	; 0x48c
 * \brief Optimized SPI class for access to SD and SDHC flash memory cards.
 */
class SdSpiArduinoDriver {
 public:
  /** Constructor. */
  SdSpiArduinoDriver() = default;
    3086:	str.w	r3, [r0, #1184]	; 0x4a0
    308a:	str.w	r3, [r0, #1204]	; 0x4b4
    308e:	strb.w	r3, [r0, #1208]	; 0x4b8
SDClass SD;
    3092:	b.w	d204 <__aeabi_atexit>
    3096:	nop
    3098:	.word	0x20005300
    309c:	.word	0x20000bbc
    30a0:	.word	0x003d0900
    30a4:	.word	0x20000b68
    30a8:	.word	0x200009f0
    30ac:	.word	0x0000295d
    30b0:	.word	0x20001490

000030b4 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)>:
  uint32_t c;
  uint8_t h;
  uint8_t s;

  uint8_t numberOfHeads;
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
    30b4:	cmp.w	r1, #256	; 0x100
    30b8:	bhi.n	30fe <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x4a>
  if (capacityMB <= 16) {
    30ba:	cmp	r1, #16
    30bc:	bhi.n	311c <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x68>
    30be:	movs	r3, #64	; 0x40
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
    30c0:	mov.w	ip, #32
  } else if (capacityMB <= 4032) {
    numberOfHeads = 128;
  } else {
    numberOfHeads = 255;
  }
  c = lba / (numberOfHeads * sectorsPerTrack);
    30c4:	udiv	r1, r2, r3
  if (c <= 1023) {
    30c8:	cmp.w	r1, #1024	; 0x400
    30cc:	bcs.n	3110 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x5c>
    h = (lba % (numberOfHeads * sectorsPerTrack)) / sectorsPerTrack;
    30ce:	mls	r3, r3, r1, r2
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba) {
    30d2:	push	{lr}
    s = (lba % sectorsPerTrack) + 1;
    30d4:	udiv	lr, r2, ip
    h = (lba % (numberOfHeads * sectorsPerTrack)) / sectorsPerTrack;
    30d8:	udiv	r3, r3, ip
    s = (lba % sectorsPerTrack) + 1;
    30dc:	mls	r2, ip, lr, r2
    c = 1023;
    h = 254;
    s = 63;
  }
  chs[0] = h;
  chs[1] = ((c >> 2) & 0XC0) | s;
    30e0:	mov.w	ip, r1, lsr #2
    h = (lba % (numberOfHeads * sectorsPerTrack)) / sectorsPerTrack;
    30e4:	uxtb	r3, r3
    s = (lba % sectorsPerTrack) + 1;
    30e6:	adds	r2, #1
  chs[1] = ((c >> 2) & 0XC0) | s;
    30e8:	bic.w	ip, ip, #63	; 0x3f
  chs[2] = c;
    30ec:	uxtb	r1, r1
  chs[0] = h;
    30ee:	strb	r3, [r0, #0]
  chs[1] = ((c >> 2) & 0XC0) | s;
    30f0:	orr.w	r2, r2, ip
  chs[2] = c;
    30f4:	strb	r1, [r0, #2]
  chs[1] = ((c >> 2) & 0XC0) | s;
    30f6:	uxtb	r2, r2
    30f8:	strb	r2, [r0, #1]
}
    30fa:	ldr.w	pc, [sp], #4
    30fe:	movs	r3, #63	; 0x3f
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
    3100:	mov	ip, r3
  } else if (capacityMB <= 128) {
    3102:	cmp	r1, #128	; 0x80
    3104:	bls.n	3128 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x74>
  } else if (capacityMB <= 504) {
    3106:	cmp.w	r1, #504	; 0x1f8
    310a:	bhi.n	312c <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x78>
  c = lba / (numberOfHeads * sectorsPerTrack);
    310c:	lsls	r3, r3, #4
    310e:	b.n	30c4 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x10>
    3110:	movs	r1, #255	; 0xff
    h = 254;
    3112:	movs	r3, #254	; 0xfe
  chs[1] = ((c >> 2) & 0XC0) | s;
    3114:	strb	r1, [r0, #1]
  chs[0] = h;
    3116:	strb	r3, [r0, #0]
  chs[2] = c;
    3118:	strb	r1, [r0, #2]
    311a:	bx	lr
  } else if (capacityMB <= 32) {
    311c:	cmp	r1, #32
    311e:	bhi.n	314e <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x9a>
    3120:	movs	r3, #128	; 0x80
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
    3122:	mov.w	ip, #32
    3126:	b.n	30c4 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x10>
  c = lba / (numberOfHeads * sectorsPerTrack);
    3128:	lsls	r3, r3, #3
    312a:	b.n	30c4 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x10>
  } else if (capacityMB <= 1008) {
    312c:	cmp.w	r1, #1008	; 0x3f0
    3130:	bls.n	313c <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x88>
  } else if (capacityMB <= 2016) {
    3132:	cmp.w	r1, #2016	; 0x7e0
    3136:	bhi.n	3140 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x8c>
  c = lba / (numberOfHeads * sectorsPerTrack);
    3138:	lsls	r3, r3, #6
    313a:	b.n	30c4 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x10>
    313c:	lsls	r3, r3, #5
    313e:	b.n	30c4 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x10>
  } else if (capacityMB <= 4032) {
    3140:	cmp.w	r1, #4032	; 0xfc0
  c = lba / (numberOfHeads * sectorsPerTrack);
    3144:	ite	ls
    3146:	lslls	r3, r3, #7
    3148:	rsbhi	r3, r3, r3, lsl #8
    314c:	b.n	30c4 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x10>
    314e:	movs	r3, #32
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
    3150:	mov	ip, r3
    3152:	b.n	3102 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x4e>

00003154 <FsCache::sync()>:

fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
    3154:	push	{r4, r5, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
    3156:	ldrb	r3, [r0, #0]
bool FsCache::sync() {
    3158:	sub	sp, #12
  if (m_status & CACHE_STATUS_DIRTY) {
    315a:	lsls	r4, r3, #31
    315c:	bpl.n	319a <FsCache::sync()+0x46>
    if (!m_blockDev->writeSector(m_sector, m_buffer)) {
    315e:	mov	r4, r0
    3160:	ldr	r0, [r0, #4]
    3162:	add.w	r2, r4, #16
    3166:	ldr	r3, [r0, #0]
    3168:	ldr	r1, [r4, #8]
    316a:	str	r2, [sp, #4]
    316c:	ldr	r3, [r3, #32]
    316e:	blx	r3
    3170:	ldr	r2, [sp, #4]
    3172:	mov	r5, r0
    3174:	cbz	r0, 31a2 <FsCache::sync()+0x4e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    3176:	ldrb	r3, [r4, #0]
    3178:	lsls	r1, r3, #30
    317a:	bpl.n	318e <FsCache::sync()+0x3a>
      if (!m_blockDev->writeSector(m_sector + m_mirrorOffset, m_buffer)) {
    317c:	ldr	r3, [r4, #12]
    317e:	ldrd	r0, r1, [r4, #4]
    3182:	add	r1, r3
    3184:	ldr	r3, [r0, #0]
    3186:	ldr	r3, [r3, #32]
    3188:	blx	r3
    318a:	cbz	r0, 31a2 <FsCache::sync()+0x4e>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    318c:	ldrb	r3, [r4, #0]
    318e:	bic.w	r3, r3, #1
  }
  return true;

fail:
  return false;
}
    3192:	mov	r0, r5
    m_status &= ~CACHE_STATUS_DIRTY;
    3194:	strb	r3, [r4, #0]
}
    3196:	add	sp, #12
    3198:	pop	{r4, r5, pc}
  return true;
    319a:	movs	r5, #1
}
    319c:	mov	r0, r5
    319e:	add	sp, #12
    31a0:	pop	{r4, r5, pc}
  return false;
    31a2:	movs	r5, #0
}
    31a4:	mov	r0, r5
    31a6:	add	sp, #12
    31a8:	pop	{r4, r5, pc}
    31aa:	nop

000031ac <FsCache::prepare(unsigned long, unsigned char)>:
uint8_t* FsCache::prepare(uint32_t sector, uint8_t option) {
    31ac:	push	{r3, r4, r5, r6, r7, lr}
  if (!m_blockDev) {
    31ae:	ldr	r3, [r0, #4]
    31b0:	cbz	r3, 31f6 <FsCache::prepare(unsigned long, unsigned char)+0x4a>
  if (m_sector != sector) {
    31b2:	ldr	r3, [r0, #8]
    31b4:	mov	r4, r0
    31b6:	mov	r7, r1
    31b8:	mov	r5, r2
    31ba:	cmp	r3, r1
    31bc:	bne.n	31cc <FsCache::prepare(unsigned long, unsigned char)+0x20>
  m_status |= option & CACHE_STATUS_MASK;
    31be:	ldrb.w	r3, [r0], #16
    31c2:	and.w	r5, r5, #3
    31c6:	orrs	r3, r5
    31c8:	strb	r3, [r4, #0]
}
    31ca:	pop	{r3, r4, r5, r6, r7, pc}
    if (!sync()) {
    31cc:	bl	3154 <FsCache::sync()>
    31d0:	cbz	r0, 31f6 <FsCache::prepare(unsigned long, unsigned char)+0x4a>
    if (!(option & CACHE_OPTION_NO_READ)) {
    31d2:	lsls	r3, r5, #29
    31d4:	bpl.n	31e2 <FsCache::prepare(unsigned long, unsigned char)+0x36>
    31d6:	add.w	r6, r4, #16
      if (!m_blockDev->readSector(sector, m_buffer)) {
    31da:	mov	r0, r6
    m_sector = sector;
    31dc:	movs	r3, #0
    31de:	str	r7, [r4, #8]
    31e0:	b.n	31c2 <FsCache::prepare(unsigned long, unsigned char)+0x16>
      if (!m_blockDev->readSector(sector, m_buffer)) {
    31e2:	ldr	r0, [r4, #4]
    31e4:	add.w	r6, r4, #16
    31e8:	mov	r1, r7
    31ea:	ldr	r3, [r0, #0]
    31ec:	mov	r2, r6
    31ee:	ldr	r3, [r3, #16]
    31f0:	blx	r3
    31f2:	cmp	r0, #0
    31f4:	bne.n	31da <FsCache::prepare(unsigned long, unsigned char)+0x2e>
  return nullptr;
    31f6:	movs	r0, #0
}
    31f8:	pop	{r3, r4, r5, r6, r7, pc}
    31fa:	nop

000031fc <toUpcase(unsigned short)>:
}
//------------------------------------------------------------------------------
uint16_t toUpcase(uint16_t chr) {
  uint16_t i, first;
  // Optimize for simple ASCII.
  if (chr < 127) {
    31fc:	cmp	r0, #126	; 0x7e
    31fe:	bls.n	327e <toUpcase(unsigned short)+0x82>
  size_t right = size;
    3200:	mov.w	ip, #53	; 0x35
  size_t left = 0;
    3204:	movs	r3, #0
uint16_t toUpcase(uint16_t chr) {
    3206:	push	{r4, r5}
    3208:	ldr	r4, [pc, #160]	; (32ac <toUpcase(unsigned short)+0xb0>)
    320a:	b.n	3216 <toUpcase(unsigned short)+0x1a>
    if (readTable16(table[mid].key) <= key) {
    320c:	ldrh.w	r2, [r4, r1, lsl #2]
    3210:	cmp	r2, r0
    3212:	bhi.n	3256 <toUpcase(unsigned short)+0x5a>
    size_t mid = left + (right - left) / 2;
    3214:	mov	r3, r1
  while (right - left > 1) {
    3216:	sub.w	r2, ip, r3
    321a:	cmp	r2, #1
    size_t mid = left + (right - left) / 2;
    321c:	add.w	r1, r3, r2, lsr #1
  while (right - left > 1) {
    3220:	bhi.n	320c <toUpcase(unsigned short)+0x10>
    return chr - ('a' <= chr && chr <= 'z' ? 'a' - 'A' : 0);
  }
  i = searchPair16(reinterpret_cast<const pair16_t*>(mapTable), MAP_DIM, chr);
  first = readTable16(mapTable[i].base);
    3222:	uxth	r3, r3
    3224:	ldrh.w	r2, [r4, r3, lsl #2]
  if (first <= chr && (chr - first) < readTable8(mapTable[i].count)) {
    3228:	cmp	r0, r2
    322a:	bcs.n	325a <toUpcase(unsigned short)+0x5e>
    322c:	movs	r4, #75	; 0x4b
    322e:	movs	r3, #0
    3230:	ldr	r5, [pc, #124]	; (32b0 <toUpcase(unsigned short)+0xb4>)
    3232:	b.n	323e <toUpcase(unsigned short)+0x42>
    if (readTable16(table[mid].key) <= key) {
    3234:	ldrh.w	r2, [r5, r1, lsl #2]
    3238:	cmp	r2, r0
    323a:	bhi.n	327a <toUpcase(unsigned short)+0x7e>
    size_t mid = left + (right - left) / 2;
    323c:	mov	r3, r1
  while (right - left > 1) {
    323e:	subs	r2, r4, r3
    3240:	cmp	r2, #1
    size_t mid = left + (right - left) / 2;
    3242:	add.w	r1, r3, r2, lsr #1
  while (right - left > 1) {
    3246:	bhi.n	3234 <toUpcase(unsigned short)+0x38>
      return chr - ((chr - first) & 1);
    }
    return chr + (off ? off : -0x1C60);
  }
  i = searchPair16(lookupTable, LOOKUP_DIM, chr);
  if (readTable16(lookupTable[i].key) == chr) {
    3248:	uxth	r3, r3
    324a:	ldrh.w	r2, [r5, r3, lsl #2]
    324e:	cmp	r2, r0
    3250:	beq.n	3292 <toUpcase(unsigned short)+0x96>
    return readTable16(lookupTable[i].val);
  }
  return chr;
}
    3252:	pop	{r4, r5}
    3254:	bx	lr
    size_t mid = left + (right - left) / 2;
    3256:	mov	ip, r1
    3258:	b.n	3216 <toUpcase(unsigned short)+0x1a>
  if (first <= chr && (chr - first) < readTable8(mapTable[i].count)) {
    325a:	add.w	r4, r4, r3, lsl #2
    325e:	subs	r2, r0, r2
    3260:	ldrb	r3, [r4, #3]
    3262:	cmp	r2, r3
    3264:	bge.n	322c <toUpcase(unsigned short)+0x30>
    int8_t off = readTable8(mapTable[i].off);
    3266:	ldrsb.w	r3, [r4, #2]
    if (off == 1) {
    326a:	cmp	r3, #1
    326c:	beq.n	329c <toUpcase(unsigned short)+0xa0>
    return chr + (off ? off : -0x1C60);
    326e:	cbz	r3, 32a6 <toUpcase(unsigned short)+0xaa>
    3270:	uxth	r3, r3
    3272:	add	r3, r0
}
    3274:	pop	{r4, r5}
    return chr + (off ? off : -0x1C60);
    3276:	uxth	r0, r3
}
    3278:	bx	lr
    size_t mid = left + (right - left) / 2;
    327a:	mov	r4, r1
    327c:	b.n	323e <toUpcase(unsigned short)+0x42>
    return chr - ('a' <= chr && chr <= 'z' ? 'a' - 'A' : 0);
    327e:	sub.w	r3, r0, #97	; 0x61
    3282:	cmp	r3, #25
    3284:	ite	hi
    3286:	movhi	r3, #0
    3288:	movls	r3, #1
    328a:	sub.w	r3, r0, r3, lsl #5
    328e:	uxth	r0, r3
}
    3290:	bx	lr
    return readTable16(lookupTable[i].val);
    3292:	add.w	r5, r5, r3, lsl #2
    3296:	ldrh	r0, [r5, #2]
}
    3298:	pop	{r4, r5}
    329a:	bx	lr
      return chr - ((chr - first) & 1);
    329c:	and.w	r2, r2, #1
    32a0:	subs	r3, r0, r2
    32a2:	uxth	r0, r3
    32a4:	b.n	3252 <toUpcase(unsigned short)+0x56>
    return chr + (off ? off : -0x1C60);
    32a6:	movw	r3, #58272	; 0xe3a0
    32aa:	b.n	3272 <toUpcase(unsigned short)+0x76>
    32ac:	.word	0x20000690
    32b0:	.word	0x20000564

000032b4 <dateTimeMs10(unsigned short*, unsigned short*, unsigned char*)>:
  *ms10 = 0;
    32b4:	mov.w	ip, #0
  FsDateTime::callback2(date, time);
    32b8:	ldr	r3, [pc, #8]	; (32c4 <dateTimeMs10(unsigned short*, unsigned short*, unsigned char*)+0x10>)
  *ms10 = 0;
    32ba:	strb.w	ip, [r2]
  FsDateTime::callback2(date, time);
    32be:	ldr	r3, [r3, #0]
    32c0:	bx	r3
    32c2:	nop
    32c4:	.word	0x20006408

000032c8 <FsDateTime::setCallback(void (*)(unsigned short*, unsigned short*))>:
  callback = dateTimeMs10;
    32c8:	ldr	r2, [pc, #8]	; (32d4 <FsDateTime::setCallback(void (*)(unsigned short*, unsigned short*))+0xc>)
    32ca:	ldr	r1, [pc, #12]	; (32d8 <FsDateTime::setCallback(void (*)(unsigned short*, unsigned short*))+0x10>)
  callback2 = dateTime;
    32cc:	ldr	r3, [pc, #12]	; (32dc <FsDateTime::setCallback(void (*)(unsigned short*, unsigned short*))+0x14>)
  callback = dateTimeMs10;
    32ce:	str	r1, [r2, #0]
  callback2 = dateTime;
    32d0:	str	r0, [r3, #0]
}
    32d2:	bx	lr
    32d4:	.word	0x20006404
    32d8:	.word	0x000032b5
    32dc:	.word	0x20006408

000032e0 <Print::write(char const*) [clone .isra.0]>:
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    32e0:	push	{r4, lr}
    32e2:	mov	r4, r0
    32e4:	sub	sp, #8
    32e6:	mov	r0, r1
    32e8:	str	r1, [sp, #4]
    32ea:	bl	e3c0 <strlen>
    32ee:	ldr	r3, [r4, #0]
    32f0:	mov	r2, r0
    32f2:	ldr	r1, [sp, #4]
    32f4:	mov	r0, r4
    32f6:	ldr	r3, [r3, #4]
    32f8:	add	sp, #8
    32fa:	ldmia.w	sp!, {r4, lr}
    32fe:	bx	r3

00003300 <ExFatFormatter::syncUpcase()>:
  writeMsg(pr, "Format failed\r\n");
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFormatter::syncUpcase() {
  uint16_t index = m_upcaseSize & SECTOR_MASK;
    3300:	ldr	r3, [r0, #8]
    3302:	ubfx	r3, r3, #0, #9
  if (!index) {
    3306:	cbz	r3, 332a <ExFatFormatter::syncUpcase()+0x2a>
    return true;
  }
  for (size_t i = index; i < BYTES_PER_SECTOR; i++) {
    m_secBuf[i] = 0;
    3308:	movs	r1, #0
bool ExFatFormatter::syncUpcase() {
    330a:	push	{r4}
    m_secBuf[i] = 0;
    330c:	ldr	r2, [r0, #16]
    330e:	strb	r1, [r2, r3]
  for (size_t i = index; i < BYTES_PER_SECTOR; i++) {
    3310:	adds	r3, #1
    3312:	cmp.w	r3, #512	; 0x200
    3316:	bne.n	330c <ExFatFormatter::syncUpcase()+0xc>
  }
  return m_dev->writeSector(m_upcaseSector, m_secBuf);
    3318:	ldr	r1, [r0, #0]
    331a:	ldrd	r3, r2, [r0, #12]
    331e:	ldr	r4, [r3, #0]
    3320:	mov	r0, r3
    3322:	ldr	r3, [r4, #32]
}
    3324:	ldr.w	r4, [sp], #4
  return m_dev->writeSector(m_upcaseSector, m_secBuf);
    3328:	bx	r3
}
    332a:	movs	r0, #1
    332c:	bx	lr
    332e:	nop

00003330 <ExFatFormatter::writeUpcaseByte(unsigned char)>:
//------------------------------------------------------------------------------
bool ExFatFormatter::writeUpcaseByte(uint8_t b) {
  uint16_t index = m_upcaseSize & SECTOR_MASK;
    3330:	ldr	r2, [r0, #8]
bool ExFatFormatter::writeUpcaseByte(uint8_t b) {
    3332:	mov	r3, r0
  m_secBuf[index] = b;
    3334:	ldr	r0, [r0, #16]
  uint16_t index = m_upcaseSize & SECTOR_MASK;
    3336:	movw	ip, #511	; 0x1ff
    333a:	ubfx	r2, r2, #0, #9
  m_secBuf[index] = b;
    333e:	strb	r1, [r0, r2]
  m_upcaseChecksum = exFatChecksum(m_upcaseChecksum, b);
  m_upcaseSize++;
  if (index == SECTOR_MASK) {
    3340:	cmp	r2, ip
  uint8_t mustBeZero2[2];
  uint8_t unicode3[4];
} DirLfn_t;
//==============================================================================
inline uint32_t exFatChecksum(uint32_t sum, uint8_t data) {
  return (sum << 31) + (sum >> 1) + data;
    3342:	ldr	r0, [r3, #4]
    3344:	add.w	r1, r1, r0, ror #1
  m_upcaseSize++;
    3348:	ldr	r0, [r3, #8]
    334a:	add.w	r0, r0, #1
    334e:	strd	r1, r0, [r3, #4]
  if (index == SECTOR_MASK) {
    3352:	beq.n	3358 <ExFatFormatter::writeUpcaseByte(unsigned char)+0x28>
    return m_dev->writeSector(m_upcaseSector++, m_secBuf);
  }
  return true;
}
    3354:	movs	r0, #1
    3356:	bx	lr
    return m_dev->writeSector(m_upcaseSector++, m_secBuf);
    3358:	ldr	r0, [r3, #12]
    335a:	ldr	r1, [r3, #0]
bool ExFatFormatter::writeUpcaseByte(uint8_t b) {
    335c:	push	{r4}
    return m_dev->writeSector(m_upcaseSector++, m_secBuf);
    335e:	ldr	r4, [r0, #0]
    3360:	adds	r2, r1, #1
    3362:	ldr	r4, [r4, #32]
    3364:	str	r2, [r3, #0]
    3366:	ldr	r2, [r3, #16]
    3368:	mov	r3, r4
}
    336a:	ldr.w	r4, [sp], #4
    return m_dev->writeSector(m_upcaseSector++, m_secBuf);
    336e:	bx	r3

00003370 <ExFatFormatter::writeUpcaseUnicode(unsigned short)>:
//------------------------------------------------------------------------------
bool ExFatFormatter::writeUpcaseUnicode(uint16_t unicode) {
    3370:	push	{r3, r4, r5, lr}
  uint16_t index = m_upcaseSize & SECTOR_MASK;
    3372:	ldr	r3, [r0, #8]
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    3374:	uxtb	r2, r1
bool ExFatFormatter::writeUpcaseUnicode(uint16_t unicode) {
    3376:	mov	r5, r1
  m_secBuf[index] = b;
    3378:	ldr	r1, [r0, #16]
  uint16_t index = m_upcaseSize & SECTOR_MASK;
    337a:	ubfx	r3, r3, #0, #9
    337e:	movw	ip, #511	; 0x1ff
bool ExFatFormatter::writeUpcaseUnicode(uint16_t unicode) {
    3382:	mov	r4, r0
  m_secBuf[index] = b;
    3384:	strb	r2, [r1, r3]
  if (index == SECTOR_MASK) {
    3386:	cmp	r3, ip
    3388:	ldr	r1, [r0, #4]
    338a:	add.w	r2, r2, r1, ror #1
  m_upcaseChecksum = exFatChecksum(m_upcaseChecksum, b);
    338e:	str	r2, [r0, #4]
  m_upcaseSize++;
    3390:	ldr	r2, [r0, #8]
    3392:	add.w	r2, r2, #1
    3396:	str	r2, [r0, #8]
  if (index == SECTOR_MASK) {
    3398:	beq.n	33a6 <ExFatFormatter::writeUpcaseUnicode(unsigned short)+0x36>
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    339a:	lsrs	r1, r5, #8
    339c:	mov	r0, r4
}
    339e:	ldmia.w	sp!, {r3, r4, r5, lr}
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    33a2:	b.w	3330 <ExFatFormatter::writeUpcaseByte(unsigned char)>
    return m_dev->writeSector(m_upcaseSector++, m_secBuf);
    33a6:	ldr	r1, [r0, #0]
    33a8:	ldr	r0, [r0, #12]
    33aa:	adds	r2, r1, #1
    33ac:	ldr	r3, [r0, #0]
    33ae:	ldr	r3, [r3, #32]
    33b0:	str	r2, [r4, #0]
    33b2:	ldr	r2, [r4, #16]
    33b4:	blx	r3
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    33b6:	cmp	r0, #0
    33b8:	bne.n	339a <ExFatFormatter::writeUpcaseUnicode(unsigned short)+0x2a>
}
    33ba:	pop	{r3, r4, r5, pc}

000033bc <ExFatFormatter::writeUpcase(unsigned long)>:
//------------------------------------------------------------------------------
bool ExFatFormatter::writeUpcase(uint32_t sector) {
    33bc:	push	{r3, r4, r5, r6, r7, lr}
  uint32_t n;
  uint32_t ns;
  uint32_t ch = 0;
  uint16_t uc;

  m_upcaseSize = 0;
    33be:	movs	r3, #0
bool ExFatFormatter::writeUpcase(uint32_t sector) {
    33c0:	mov	r6, r0
  m_upcaseChecksum = 0;
  m_upcaseSector = sector;
    33c2:	str	r1, [r0, #0]
  uint32_t ch = 0;
    33c4:	mov	r5, r3
  m_upcaseChecksum = 0;
    33c6:	strd	r3, r3, [r0, #4]

  while (ch < 0X10000) {
    uc = toUpcase(ch);
    33ca:	uxth	r0, r5
    33cc:	bl	31fc <toUpcase(unsigned short)>
    if (uc != ch) {
    33d0:	cmp	r0, r5
    uc = toUpcase(ch);
    33d2:	mov	r4, r0
    if (uc != ch) {
    33d4:	beq.n	33e6 <ExFatFormatter::writeUpcase(unsigned long)+0x2a>
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    33d6:	uxtb	r1, r0
    33d8:	mov	r0, r6
    33da:	bl	3330 <ExFatFormatter::writeUpcaseByte(unsigned char)>
    33de:	cmp	r0, #0
    33e0:	bne.n	345a <ExFatFormatter::writeUpcase(unsigned long)+0x9e>
  }
  return true;

fail:
  return false;
}
    33e2:	movs	r0, #0
    33e4:	pop	{r3, r4, r5, r6, r7, pc}
      for (n = ch + 1; n < 0X10000 && n == toUpcase(n); n++) {
    33e6:	adds	r4, r5, #1
    33e8:	cmp.w	r4, #65536	; 0x10000
    33ec:	bne.n	33f8 <ExFatFormatter::writeUpcase(unsigned long)+0x3c>
    33ee:	b.n	3446 <ExFatFormatter::writeUpcase(unsigned long)+0x8a>
    33f0:	adds	r4, #1
    33f2:	cmp.w	r4, #65536	; 0x10000
    33f6:	beq.n	3402 <ExFatFormatter::writeUpcase(unsigned long)+0x46>
    33f8:	uxth	r0, r4
    33fa:	bl	31fc <toUpcase(unsigned short)>
    33fe:	cmp	r0, r4
    3400:	beq.n	33f0 <ExFatFormatter::writeUpcase(unsigned long)+0x34>
      ns = n - ch;
    3402:	subs	r7, r4, r5
      if (ns >= MINIMUM_UPCASE_SKIP) {
    3404:	cmp.w	r7, #512	; 0x200
    3408:	bcc.n	3446 <ExFatFormatter::writeUpcase(unsigned long)+0x8a>
        if (!writeUpcaseUnicode(0XFFFF) || !writeUpcaseUnicode(ns)) {
    340a:	movw	r1, #65535	; 0xffff
    340e:	mov	r0, r6
    3410:	bl	3370 <ExFatFormatter::writeUpcaseUnicode(unsigned short)>
    3414:	cmp	r0, #0
    3416:	beq.n	33e2 <ExFatFormatter::writeUpcase(unsigned long)+0x26>
    3418:	uxth	r1, r7
    341a:	mov	r0, r6
    341c:	bl	3370 <ExFatFormatter::writeUpcaseUnicode(unsigned short)>
    3420:	cmp	r0, #0
    3422:	beq.n	33e2 <ExFatFormatter::writeUpcase(unsigned long)+0x26>
    3424:	mov	r5, r4
  while (ch < 0X10000) {
    3426:	cmp.w	r5, #65536	; 0x10000
    342a:	bne.n	33ca <ExFatFormatter::writeUpcase(unsigned long)+0xe>
  if (!syncUpcase()) {
    342c:	mov	r0, r6
}
    342e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  if (!syncUpcase()) {
    3432:	b.w	3300 <ExFatFormatter::syncUpcase()>
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    3436:	ubfx	r1, r5, #8, #8
    343a:	mov	r0, r6
    343c:	adds	r5, #1
    343e:	bl	3330 <ExFatFormatter::writeUpcaseByte(unsigned char)>
    3442:	cmp	r0, #0
    3444:	beq.n	33e2 <ExFatFormatter::writeUpcase(unsigned long)+0x26>
        while (ch < n) {
    3446:	cmp	r5, r4
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    3448:	uxtb	r1, r5
    344a:	mov	r0, r6
        while (ch < n) {
    344c:	bcs.n	3426 <ExFatFormatter::writeUpcase(unsigned long)+0x6a>
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    344e:	bl	3330 <ExFatFormatter::writeUpcaseByte(unsigned char)>
    3452:	cmp	r0, #0
    3454:	bne.n	3436 <ExFatFormatter::writeUpcase(unsigned long)+0x7a>
}
    3456:	movs	r0, #0
    3458:	pop	{r3, r4, r5, r6, r7, pc}
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    345a:	ubfx	r1, r4, #8, #8
    345e:	mov	r0, r6
    3460:	bl	3330 <ExFatFormatter::writeUpcaseByte(unsigned char)>
    3464:	cmp	r0, #0
    3466:	beq.n	33e2 <ExFatFormatter::writeUpcase(unsigned long)+0x26>
      ch++;
    3468:	adds	r5, #1
    346a:	b.n	3426 <ExFatFormatter::writeUpcase(unsigned long)+0x6a>

0000346c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)>:
bool ExFatFormatter::format(FsBlockDevice* dev, uint8_t* secBuf, print_t* pr) {
    346c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3470:	mov	r7, r3
    3472:	sub	sp, #36	; 0x24
  sectorCount = dev->sectorCount();
    3474:	ldr	r3, [r1, #0]
bool ExFatFormatter::format(FsBlockDevice* dev, uint8_t* secBuf, print_t* pr) {
    3476:	mov	r5, r1
    3478:	str	r0, [sp, #16]
    347a:	mov	r4, r2
  m_dev = dev;
    347c:	str	r1, [r0, #12]
  m_secBuf = secBuf;
    347e:	str	r2, [r0, #16]
  sectorCount = dev->sectorCount();
    3480:	mov	r0, r1
    3482:	ldr	r3, [r3, #24]
    3484:	blx	r3
  if (sectorCount < 0X100000) {
    3486:	cmp.w	r0, #1048576	; 0x100000
  sectorCount = dev->sectorCount();
    348a:	str	r0, [sp, #0]
  if (sectorCount < 0X100000) {
    348c:	bcc.w	3640 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1d4>
  for (m = 1, vs = 0; m && sectorCount > m; m <<= 1, vs++) {
    3490:	movs	r3, #0
    3492:	movs	r2, #1
    3494:	ldr	r6, [sp, #0]
    3496:	adds	r3, #1
    3498:	lsls	r2, r2, #1
    349a:	uxtb	r3, r3
    349c:	beq.n	34a2 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x36>
    349e:	cmp	r6, r2
    34a0:	bhi.n	3496 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x2a>
  sectorsPerClusterShift = vs < 29 ? 8 : (vs - 11) / 2;
    34a2:	cmp	r3, #28
    34a4:	str	r6, [sp, #0]
    34a6:	bls.w	3618 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1ac>
    34aa:	sub.w	r8, r3, #11
  sectorsPerCluster = 1UL << sectorsPerClusterShift;
    34ae:	movs	r2, #1
  sectorsPerClusterShift = vs < 29 ? 8 : (vs - 11) / 2;
    34b0:	asr.w	r1, r8, r2
    34b4:	ubfx	r8, r8, #1, #8
  sectorsPerCluster = 1UL << sectorsPerClusterShift;
    34b8:	lsls	r2, r1
  sectorsPerClusterShift = vs < 29 ? 8 : (vs - 11) / 2;
    34ba:	str	r1, [sp, #8]
  sectorsPerCluster = 1UL << sectorsPerClusterShift;
    34bc:	str	r2, [sp, #28]
  fatLength = 1UL << (vs < 27 ? 13 : (vs + 1) / 2);
    34be:	adds	r3, #1
    34c0:	movs	r2, #1
    34c2:	asrs	r3, r3, #1
    34c4:	lsls	r2, r3
    34c6:	str	r2, [sp, #24]
  clusterCount = (sectorCount - 4 * fatLength) >> sectorsPerClusterShift;
    34c8:	movs	r2, #4
    34ca:	lsls	r2, r3
    34cc:	str	r2, [sp, #12]
  partitionOffset = 2 * fatLength;
    34ce:	movs	r2, #2
    34d0:	lsl.w	r3, r2, r3
    34d4:	str	r3, [sp, #4]
  clusterCount = (sectorCount - 4 * fatLength) >> sectorsPerClusterShift;
    34d6:	ldr	r2, [sp, #0]
  memset(secBuf, 0, BYTES_PER_SECTOR);
    34d8:	movs	r1, #0
  clusterCount = (sectorCount - 4 * fatLength) >> sectorsPerClusterShift;
    34da:	ldr	r3, [sp, #12]
  memset(secBuf, 0, BYTES_PER_SECTOR);
    34dc:	mov	r0, r4
  clusterCount = (sectorCount - 4 * fatLength) >> sectorsPerClusterShift;
    34de:	ldr	r6, [sp, #8]
  mbr->part->beginCHS[0] = 1;
    34e0:	mov.w	sl, #1
  clusterCount = (sectorCount - 4 * fatLength) >> sectorsPerClusterShift;
    34e4:	subs	r3, r2, r3
  memset(secBuf, 0, BYTES_PER_SECTOR);
    34e6:	mov.w	r2, #512	; 0x200
  *reinterpret_cast<uint16_t*>(dst) = src;
    34ea:	movw	fp, #43605	; 0xaa55
  clusterCount = (sectorCount - 4 * fatLength) >> sectorsPerClusterShift;
    34ee:	lsrs	r3, r6
  volumeLength = clusterHeapOffset + (clusterCount << sectorsPerClusterShift);
    34f0:	lsl.w	r9, r3, r6
    34f4:	str	r3, [sp, #20]
    34f6:	ldr	r6, [sp, #4]
  memset(secBuf, 0, BYTES_PER_SECTOR);
    34f8:	bl	e044 <memset>
  mbr->part->endCHS[1] = 0XFF;
    34fc:	movs	r3, #255	; 0xff
  mbr->part->beginCHS[0] = 1;
    34fe:	strb.w	sl, [r4, #447]	; 0x1bf
  mbr->part->beginCHS[1] = 1;
    3502:	strb.w	sl, [r4, #448]	; 0x1c0
  volumeLength = clusterHeapOffset + (clusterCount << sectorsPerClusterShift);
    3506:	add	r9, r6
  mbr->part->endCHS[1] = 0XFF;
    3508:	strb.w	r3, [r4, #452]	; 0x1c4
  if (!dev->writeSector(0, secBuf)) {
    350c:	mov	r2, r4
  mbr->part->endCHS[2] = 0XFF;
    350e:	strb.w	r3, [r4, #453]	; 0x1c5
  mbr->part->type = 7;
    3512:	movs	r3, #7
  if (!dev->writeSector(0, secBuf)) {
    3514:	movs	r1, #0
    3516:	mov	r0, r5
  mbr->part->type = 7;
    3518:	strb.w	r3, [r4, #450]	; 0x1c2
  mbr->part->endCHS[0] = 0XFE;
    351c:	movs	r3, #254	; 0xfe
  *reinterpret_cast<uint32_t*>(dst) = src;
    351e:	str.w	r6, [r4, #454]	; 0x1c6
    3522:	strb.w	r3, [r4, #451]	; 0x1c3
  if (!dev->writeSector(0, secBuf)) {
    3526:	ldr	r3, [r5, #0]
    3528:	str.w	r9, [r4, #458]	; 0x1ca
    352c:	ldr	r3, [r3, #32]
  *reinterpret_cast<uint16_t*>(dst) = src;
    352e:	strh.w	fp, [r4, #510]	; 0x1fe
    3532:	blx	r3
    3534:	cmp	r0, #0
    3536:	beq.n	3600 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
  memset(secBuf, 0, BYTES_PER_SECTOR);
    3538:	mov.w	r2, #512	; 0x200
    353c:	movs	r1, #0
    353e:	mov	r0, r4
    3540:	bl	e044 <memset>
  *reinterpret_cast<uint32_t*>(dst) = src;
    3544:	ldr	r3, [sp, #0]
  pbs->bpb.sectorsPerClusterShift = sectorsPerClusterShift;
    3546:	strb.w	r8, [r4, #109]	; 0x6d
  for (size_t i = 0; i < BYTES_PER_SECTOR; i++) {
    354a:	mov.w	r8, #0
    354e:	str	r3, [r4, #100]	; 0x64
    pbs->bootCode[i] = 0XF4;
    3550:	movs	r1, #244	; 0xf4
    3552:	ldr	r3, [sp, #20]
    3554:	add.w	r0, r4, #120	; 0x78
    3558:	ldr	r2, [sp, #24]
    355a:	str	r3, [r4, #92]	; 0x5c
  pbs->oemName[5] = ' ';
    355c:	movs	r3, #32
  setLe64(pbs->bpb.partitionOffset, partitionOffset);
    355e:	str	r6, [r4, #64]	; 0x40
  pbs->oemName[5] = ' ';
    3560:	strb	r3, [r4, #8]
  pbs->oemName[6] = ' ';
    3562:	strb	r3, [r4, #9]
  pbs->oemName[7] = ' ';
    3564:	strb	r3, [r4, #10]
  pbs->jmpInstruction[0] = 0XEB;
    3566:	movs	r3, #235	; 0xeb
    3568:	str	r6, [r4, #88]	; 0x58
  uint32_t checksum = 0;
    356a:	mov	r6, r8
  pbs->jmpInstruction[0] = 0XEB;
    356c:	strb	r3, [r4, #0]
  pbs->jmpInstruction[1] = 0X76;
    356e:	movs	r3, #118	; 0x76
  setLe64(pbs->bpb.volumeLength, volumeLength);
    3570:	str.w	r9, [r4, #72]	; 0x48
  pbs->jmpInstruction[1] = 0X76;
    3574:	strb	r3, [r4, #1]
  pbs->jmpInstruction[2] = 0X90;
    3576:	movs	r3, #144	; 0x90
  pbs->bpb.numberOfFats = 1;
    3578:	strb.w	sl, [r4, #110]	; 0x6e
  pbs->jmpInstruction[2] = 0X90;
    357c:	strb	r3, [r4, #2]
  pbs->oemName[0] = 'E';
    357e:	movs	r3, #69	; 0x45
    3580:	strb	r3, [r4, #3]
  pbs->oemName[1] = 'X';
    3582:	movs	r3, #88	; 0x58
    3584:	strb	r3, [r4, #4]
  pbs->oemName[2] = 'F';
    3586:	movs	r3, #70	; 0x46
    3588:	strb	r3, [r4, #5]
  pbs->oemName[3] = 'A';
    358a:	movs	r3, #65	; 0x41
    358c:	strb	r3, [r4, #6]
  pbs->oemName[4] = 'T';
    358e:	movs	r3, #84	; 0x54
    3590:	strb	r3, [r4, #7]
    3592:	movs	r3, #4
    3594:	str	r3, [r4, #96]	; 0x60
  *reinterpret_cast<uint16_t*>(dst) = src;
    3596:	mov.w	r3, #256	; 0x100
    359a:	strh.w	r3, [r4, #104]	; 0x68
  pbs->bpb.bytesPerSectorShift = BYTES_PER_SECTOR_SHIFT;
    359e:	movs	r3, #9
    35a0:	strb.w	r3, [r4, #108]	; 0x6c
  pbs->bpb.driveSelect = 0X80;
    35a4:	movs	r3, #128	; 0x80
  *reinterpret_cast<uint32_t*>(dst) = src;
    35a6:	strd	r2, r2, [r4, #80]	; 0x50
    35aa:	strb.w	r3, [r4, #111]	; 0x6f
    pbs->bootCode[i] = 0XF4;
    35ae:	mov.w	r2, #390	; 0x186
    35b2:	bl	e044 <memset>
  *reinterpret_cast<uint16_t*>(dst) = src;
    35b6:	strh.w	fp, [r4, #510]	; 0x1fe
    if (i == offsetof(ExFatPbs_t, bpb.volumeFlags[0]) ||
    35ba:	sub.w	r3, r8, #106	; 0x6a
    35be:	cmp	r3, #1
    35c0:	bls.n	35d0 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x164>
    35c2:	cmp.w	r8, #112	; 0x70
    35c6:	beq.n	35d0 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x164>
  return (sum << 31) + (sum >> 1) + data;
    35c8:	ldrb.w	r3, [r4, r8]
    35cc:	add.w	r6, r3, r6, ror #1
  for (size_t i = 0; i < BYTES_PER_SECTOR; i++) {
    35d0:	add.w	r8, r8, #1
    35d4:	cmp.w	r8, #512	; 0x200
    35d8:	bne.n	35ba <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x14e>
  if (!dev->writeSector(sector, secBuf) ||
    35da:	ldr	r3, [r5, #0]
    35dc:	mov	r2, r4
    35de:	ldr.w	r9, [sp, #4]
    35e2:	mov	r0, r5
    35e4:	ldr	r3, [r3, #32]
    35e6:	mov	r1, r9
    35e8:	blx	r3
    35ea:	cbz	r0, 3600 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
      !dev->writeSector(sector + BOOT_BACKUP_OFFSET, secBuf)) {
    35ec:	ldr	r3, [r5, #0]
    35ee:	mov	r1, r9
    35f0:	mov	r2, r4
    35f2:	mov	r0, r5
    35f4:	ldr	r3, [r3, #32]
    35f6:	adds	r1, #12
    35f8:	str.w	r9, [sp, #4]
    35fc:	blx	r3
  if (!dev->writeSector(sector, secBuf) ||
    35fe:	cbnz	r0, 3652 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1e6>
  writeMsg(pr, "Format failed\r\n");
    3600:	cbz	r7, 360e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1a2>
    3602:	ldr	r3, [r7, #0]
    3604:	movs	r2, #15
    3606:	ldr	r1, [pc, #736]	; (38e8 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x47c>)
    3608:	mov	r0, r7
    360a:	ldr	r3, [r3, #4]
    360c:	blx	r3
  return false;
    360e:	movs	r6, #0
}
    3610:	mov	r0, r6
    3612:	add	sp, #36	; 0x24
    3614:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  fatLength = 1UL << (vs < 27 ? 13 : (vs + 1) / 2);
    3618:	cmp	r3, #26
  sectorsPerClusterShift = vs < 29 ? 8 : (vs - 11) / 2;
    361a:	mov.w	r8, #8
  fatLength = 1UL << (vs < 27 ? 13 : (vs + 1) / 2);
    361e:	bhi.w	396e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x502>
    3622:	mov.w	r3, #16384	; 0x4000
  sectorsPerCluster = 1UL << sectorsPerClusterShift;
    3626:	str.w	r8, [sp, #8]
    362a:	str	r3, [sp, #4]
    362c:	mov.w	r3, #32768	; 0x8000
    3630:	str	r3, [sp, #12]
    3632:	mov.w	r3, #256	; 0x100
    3636:	str	r3, [sp, #28]
  fatLength = 1UL << (vs < 27 ? 13 : (vs + 1) / 2);
    3638:	mov.w	r3, #8192	; 0x2000
    363c:	str	r3, [sp, #24]
    363e:	b.n	34d6 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x6a>
    writeMsg(pr, "Device is too small\r\n");
    3640:	cmp	r7, #0
    3642:	beq.n	360e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1a2>
    3644:	ldr	r3, [r7, #0]
    3646:	movs	r2, #21
    3648:	ldr	r1, [pc, #672]	; (38ec <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x480>)
    364a:	mov	r0, r7
    364c:	ldr	r3, [r3, #4]
    364e:	blx	r3
  writeMsg(pr, "Format failed\r\n");
    3650:	b.n	3602 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x196>
  memset(secBuf, 0, BYTES_PER_SECTOR);
    3652:	mov	r2, r8
    3654:	movs	r1, #0
    3656:	mov	r0, r4
  sector++;
    3658:	add.w	sl, r9, #1
  memset(secBuf, 0, BYTES_PER_SECTOR);
    365c:	bl	e044 <memset>
  *reinterpret_cast<uint16_t*>(dst) = src;
    3660:	movw	r3, #43605	; 0xaa55
    3664:	add.w	r2, r9, #9
    3668:	addw	r9, r4, #511	; 0x1ff
    366c:	strh.w	r3, [r4, #510]	; 0x1fe
    3670:	movs	r3, #0
    3672:	mov	fp, r2
  uint32_t checksum = 0;
    3674:	mov	r8, r4
    3676:	b.n	367c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x210>
      checksum = exFatChecksum(checksum, secBuf[i]);
    3678:	ldrb.w	r3, [r8, #1]!
    for (size_t i = 0; i < BYTES_PER_SECTOR; i++) {
    367c:	cmp	r9, r8
  return (sum << 31) + (sum >> 1) + data;
    367e:	add.w	r6, r3, r6, ror #1
    3682:	bne.n	3678 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x20c>
    if (!dev->writeSector(sector, secBuf) ||
    3684:	ldr	r3, [r5, #0]
    3686:	mov	r2, r4
    3688:	mov	r1, sl
    368a:	mov	r0, r5
    368c:	ldr	r3, [r3, #32]
    368e:	blx	r3
    3690:	cmp	r0, #0
    3692:	beq.n	3600 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
        !dev->writeSector(sector + BOOT_BACKUP_OFFSET, secBuf)) {
    3694:	ldr	r3, [r5, #0]
    3696:	mov	r2, r4
    3698:	add.w	r1, sl, #12
    369c:	mov	r0, r5
    369e:	ldr	r3, [r3, #32]
    36a0:	blx	r3
    if (!dev->writeSector(sector, secBuf) ||
    36a2:	cmp	r0, #0
    36a4:	beq.n	3600 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
    sector++;
    36a6:	add.w	r3, sl, #1
  for (int j = 0; j < 8; j++) {
    36aa:	cmp	fp, r3
    36ac:	beq.n	36b4 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x248>
      checksum = exFatChecksum(checksum, secBuf[i]);
    36ae:	mov	sl, r3
    36b0:	ldrb	r3, [r4, #0]
    36b2:	b.n	3674 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x208>
  memset(secBuf, 0, BYTES_PER_SECTOR);
    36b4:	mov.w	r2, #512	; 0x200
    36b8:	movs	r1, #0
    36ba:	mov	r0, r4
    36bc:	mov	fp, r3
    36be:	bl	e044 <memset>
    36c2:	movs	r2, #0
    36c4:	add.w	sl, sl, #3
    36c8:	mov	r1, r2
  *reinterpret_cast<uint16_t*>(dst) = src;
    36ca:	mov	r3, r4
    36cc:	b.n	36d2 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x266>
      checksum = exFatChecksum(checksum, secBuf[i]);
    36ce:	ldrb.w	r1, [r3, #1]!
    for (size_t i = 0; i < BYTES_PER_SECTOR; i++) {
    36d2:	cmp	r8, r3
  return (sum << 31) + (sum >> 1) + data;
    36d4:	add.w	r6, r1, r6, ror #1
    36d8:	bne.n	36ce <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x262>
    if (!dev->writeSector(sector, secBuf) ||
    36da:	ldr	r3, [r5, #0]
    36dc:	mov	r2, r4
    36de:	mov	r1, fp
    36e0:	mov	r0, r5
    36e2:	ldr	r3, [r3, #32]
    36e4:	blx	r3
    36e6:	cmp	r0, #0
    36e8:	beq.n	3600 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
        !dev->writeSector(sector + BOOT_BACKUP_OFFSET, secBuf)) {
    36ea:	ldr	r3, [r5, #0]
    36ec:	mov	r2, r4
    36ee:	add.w	r1, fp, #12
    36f2:	mov	r0, r5
    36f4:	ldr	r3, [r3, #32]
    36f6:	blx	r3
    if (!dev->writeSector(sector, secBuf) ||
    36f8:	cmp	r0, #0
    36fa:	beq.n	3600 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
    sector++;
    36fc:	add.w	r1, fp, #1
  for (int j = 0; j < 2; j++) {
    3700:	cmp	sl, r1
    3702:	bne.n	37da <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x36e>
    3704:	subs	r3, r4, #4
    3706:	add.w	r2, r4, #508	; 0x1fc
  *reinterpret_cast<uint32_t*>(dst) = src;
    370a:	str.w	r6, [r3, #4]!
  for (size_t i = 0; i < BYTES_PER_SECTOR; i += 4) {
    370e:	cmp	r2, r3
    3710:	bne.n	370a <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x29e>
  if (!dev->writeSector(sector, secBuf) ||
    3712:	ldr	r3, [r5, #0]
    3714:	mov	r2, r4
    3716:	mov	r0, r5
    3718:	ldr	r3, [r3, #32]
    371a:	blx	r3
    371c:	cmp	r0, #0
    371e:	beq.w	3600 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
      !dev->writeSector(sector + BOOT_BACKUP_OFFSET, secBuf)) {
    3722:	ldr	r3, [r5, #0]
    3724:	add.w	r1, fp, #13
    3728:	mov	r2, r4
    372a:	mov	r0, r5
    372c:	ldr	r3, [r3, #32]
    372e:	blx	r3
  if (!dev->writeSector(sector, secBuf) ||
    3730:	cmp	r0, #0
    3732:	beq.w	3600 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
  writeMsg(pr, "Writing FAT ");
    3736:	cbz	r7, 3744 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x2d8>
    3738:	ldr	r3, [r7, #0]
    373a:	movs	r2, #12
    373c:	ldr	r1, [pc, #432]	; (38f0 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x484>)
    373e:	mov	r0, r7
    3740:	ldr	r3, [r3, #4]
    3742:	blx	r3
  sector = partitionOffset + fatOffset;
    3744:	ldr	r2, [sp, #24]
  memset(secBuf, 0, BYTES_PER_SECTOR);
    3746:	movs	r1, #0
  sector = partitionOffset + fatOffset;
    3748:	ldr	r3, [sp, #4]
  memset(secBuf, 0, BYTES_PER_SECTOR);
    374a:	mov	r0, r4
  for (uint32_t i = 0; i < ns; i++) {
    374c:	movs	r6, #0
  sector = partitionOffset + fatOffset;
    374e:	add	r3, r2
  memset(secBuf, 0, BYTES_PER_SECTOR);
    3750:	mov.w	r2, #512	; 0x200
  sector = partitionOffset + fatOffset;
    3754:	mov	r9, r3
  ns = ((clusterCount + 2) * 4 + BYTES_PER_SECTOR - 1) / BYTES_PER_SECTOR;
    3756:	ldr	r3, [sp, #20]
    3758:	mov.w	r8, r3, lsl #2
  memset(secBuf, 0, BYTES_PER_SECTOR);
    375c:	bl	e044 <memset>
  secBuf[0] = 0XF8;
    3760:	mov	r3, r4
    secBuf[i] = 0XFF;
    3762:	mov.w	r2, #4294967295
  ns = ((clusterCount + 2) * 4 + BYTES_PER_SECTOR - 1) / BYTES_PER_SECTOR;
    3766:	addw	r8, r8, #519	; 0x207
  secBuf[0] = 0XF8;
    376a:	movs	r1, #248	; 0xf8
      writeMsg(pr, ".");
    376c:	subs.w	fp, r7, #0
  ns = ((clusterCount + 2) * 4 + BYTES_PER_SECTOR - 1) / BYTES_PER_SECTOR;
    3770:	mov.w	sl, r8, lsr #9
  secBuf[0] = 0XF8;
    3774:	strb.w	r1, [r3], #1
    if (i % (ns / 32) == 0) {
    3778:	mov.w	r8, r8, lsr #14
    secBuf[i] = 0XFF;
    377c:	str.w	r2, [r4, #1]
      writeMsg(pr, ".");
    3780:	it	ne
    3782:	movne.w	fp, #1
    secBuf[i] = 0XFF;
    3786:	str	r2, [r3, #12]
    3788:	str	r2, [r3, #4]
    378a:	str	r2, [r3, #8]
    378c:	str.w	r2, [r3, #15]
    3790:	b.n	3798 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x32c>
  for (uint32_t i = 0; i < ns; i++) {
    3792:	adds	r6, #1
    3794:	cmp	sl, r6
    3796:	beq.n	37e0 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x374>
    if (i % (ns / 32) == 0) {
    3798:	udiv	r3, r6, r8
    379c:	mls	r3, r8, r3, r6
      writeMsg(pr, ".");
    37a0:	cbnz	r3, 37b4 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x348>
    37a2:	cmp.w	fp, #0
    37a6:	beq.n	37b4 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x348>
    37a8:	ldr	r3, [r7, #0]
    37aa:	movs	r2, #1
    37ac:	ldr	r1, [pc, #324]	; (38f4 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x488>)
    37ae:	mov	r0, r7
    37b0:	ldr	r3, [r3, #4]
    37b2:	blx	r3
    if (!dev->writeSector(sector + i, secBuf)) {
    37b4:	ldr	r3, [r5, #0]
    37b6:	add.w	r1, r9, r6
    37ba:	mov	r2, r4
    37bc:	mov	r0, r5
    37be:	ldr	r3, [r3, #32]
    37c0:	blx	r3
    37c2:	cmp	r0, #0
    37c4:	beq.w	3600 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
    if (i == 0) {
    37c8:	cmp	r6, #0
    37ca:	bne.n	3792 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x326>
      memset(secBuf, 0, BYTES_PER_SECTOR);
    37cc:	mov	r1, r6
    37ce:	mov.w	r2, #512	; 0x200
    37d2:	mov	r0, r4
    37d4:	bl	e044 <memset>
    37d8:	b.n	3792 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x326>
      checksum = exFatChecksum(checksum, secBuf[i]);
    37da:	mov	fp, r1
    37dc:	ldrb	r1, [r4, #0]
    37de:	b.n	36ca <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x25e>
  writeMsg(pr, "\r\n");
    37e0:	cmp	r7, #0
    37e2:	beq.n	384e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x3e2>
    37e4:	ldr	r3, [r7, #0]
    37e6:	movs	r2, #2
    37e8:	ldr	r1, [pc, #268]	; (38f8 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x48c>)
    37ea:	mov	r0, r7
    37ec:	ldr	r3, [r3, #4]
    37ee:	blx	r3
  bitmapSize = (clusterCount + 7) / 8;
    37f0:	ldr	r6, [sp, #20]
  if (ns > sectorsPerCluster) {
    37f2:	ldr	r2, [sp, #28]
  bitmapSize = (clusterCount + 7) / 8;
    37f4:	adds	r6, #7
    37f6:	lsrs	r6, r6, #3
  ns = (bitmapSize + BYTES_PER_SECTOR - 1) / BYTES_PER_SECTOR;
    37f8:	addw	r3, r6, #511	; 0x1ff
  if (ns > sectorsPerCluster) {
    37fc:	cmp.w	r2, r3, lsr #9
  ns = (bitmapSize + BYTES_PER_SECTOR - 1) / BYTES_PER_SECTOR;
    3800:	mov.w	r9, r3, lsr #9
  if (ns > sectorsPerCluster) {
    3804:	bcc.w	3602 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x196>
  memset(secBuf, 0, BYTES_PER_SECTOR);
    3808:	mov.w	r2, #512	; 0x200
    380c:	movs	r1, #0
    380e:	mov	r0, r4
    3810:	bl	e044 <memset>
  secBuf[0] = 0X7;
    3814:	movs	r3, #7
    3816:	strb	r3, [r4, #0]
  for (uint32_t i = 0; i < ns; i++) {
    3818:	cmp.w	r9, #0
    381c:	beq.w	3934 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x4c8>
    3820:	mov.w	r8, #0
    3824:	b.n	3838 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x3cc>
    if (i == 0) {
    3826:	cmp.w	r8, #0
    382a:	bne.n	3830 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x3c4>
      secBuf[0] = 0;
    382c:	strb.w	r8, [r4]
  for (uint32_t i = 0; i < ns; i++) {
    3830:	add.w	r8, r8, #1
    3834:	cmp	r9, r8
    3836:	bls.n	3930 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x4c4>
    if (!dev->writeSector(sector + i, secBuf)) {
    3838:	ldr	r2, [sp, #12]
    383a:	mov	r0, r5
    383c:	ldr	r3, [r5, #0]
    383e:	add.w	r1, r2, r8
    3842:	mov	r2, r4
    3844:	ldr	r3, [r3, #32]
    3846:	blx	r3
    3848:	cmp	r0, #0
    384a:	bne.n	3826 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x3ba>
    384c:	b.n	3600 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
  bitmapSize = (clusterCount + 7) / 8;
    384e:	ldr	r6, [sp, #20]
  if (ns > sectorsPerCluster) {
    3850:	ldr	r2, [sp, #28]
  bitmapSize = (clusterCount + 7) / 8;
    3852:	adds	r6, #7
    3854:	lsrs	r6, r6, #3
  ns = (bitmapSize + BYTES_PER_SECTOR - 1) / BYTES_PER_SECTOR;
    3856:	addw	r3, r6, #511	; 0x1ff
  if (ns > sectorsPerCluster) {
    385a:	cmp.w	r2, r3, lsr #9
  ns = (bitmapSize + BYTES_PER_SECTOR - 1) / BYTES_PER_SECTOR;
    385e:	mov.w	r9, r3, lsr #9
  if (ns > sectorsPerCluster) {
    3862:	bcc.w	360e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1a2>
  memset(secBuf, 0, BYTES_PER_SECTOR);
    3866:	mov.w	r2, #512	; 0x200
    386a:	mov	r1, r7
    386c:	mov	r0, r4
    386e:	bl	e044 <memset>
  secBuf[0] = 0X7;
    3872:	movs	r3, #7
    3874:	strb	r3, [r4, #0]
  for (uint32_t i = 0; i < ns; i++) {
    3876:	cmp.w	r9, #0
    387a:	bne.n	3820 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x3b4>
  if (!writeUpcase(partitionOffset + clusterHeapOffset + sectorsPerCluster)) {
    387c:	ldr	r3, [sp, #12]
    387e:	ldr	r2, [sp, #28]
    3880:	ldr	r0, [sp, #16]
    3882:	adds	r1, r3, r2
    3884:	bl	33bc <ExFatFormatter::writeUpcase(unsigned long)>
    3888:	cmp	r0, #0
    388a:	beq.w	360e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1a2>
  if (m_upcaseSize > BYTES_PER_SECTOR * sectorsPerCluster) {
    388e:	ldr	r2, [sp, #8]
    3890:	mov.w	r3, #512	; 0x200
    3894:	lsls	r3, r2
    3896:	ldr	r2, [sp, #16]
    3898:	ldr	r2, [r2, #8]
    389a:	cmp	r2, r3
    389c:	bhi.w	360e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1a2>
  sector = partitionOffset + clusterHeapOffset + 2 * sectorsPerCluster;
    38a0:	mov.w	r8, #2
    38a4:	ldr	r3, [sp, #8]
  memset(secBuf, 0, BYTES_PER_SECTOR);
    38a6:	mov.w	r2, #512	; 0x200
    38aa:	movs	r1, #0
  sector = partitionOffset + clusterHeapOffset + 2 * sectorsPerCluster;
    38ac:	lsl.w	r9, r8, r3
    38b0:	ldr	r3, [sp, #12]
  memset(secBuf, 0, BYTES_PER_SECTOR);
    38b2:	mov	r0, r4
  sector = partitionOffset + clusterHeapOffset + 2 * sectorsPerCluster;
    38b4:	add	r9, r3
  memset(secBuf, 0, BYTES_PER_SECTOR);
    38b6:	bl	e044 <memset>
  dbm->type = EXFAT_TYPE_BITMAP;
    38ba:	movs	r2, #129	; 0x81
  label->type = EXFAT_TYPE_LABEL & 0X7F;
    38bc:	movs	r3, #3
  setLe32(dup->checksum, m_upcaseChecksum);
    38be:	ldr	r1, [sp, #16]
    38c0:	add.w	r9, r9, #4294967295
  dbm->type = EXFAT_TYPE_BITMAP;
    38c4:	strb.w	r2, [r4, #32]
  dup->type = EXFAT_TYPE_UPCASE;
    38c8:	movs	r2, #130	; 0x82
  label->type = EXFAT_TYPE_LABEL & 0X7F;
    38ca:	strb	r3, [r4, #0]
  dup->type = EXFAT_TYPE_UPCASE;
    38cc:	strb.w	r2, [r4, #64]	; 0x40
  setLe64(dbm->size, bitmapSize);
    38d0:	strd	r8, r6, [r4, #52]	; 0x34
  setLe32(dup->checksum, m_upcaseChecksum);
    38d4:	ldr	r2, [r1, #4]
  *reinterpret_cast<uint64_t*>(dst) = src;
    38d6:	mov.w	r8, #1
  *reinterpret_cast<uint32_t*>(dst) = src;
    38da:	str	r3, [r4, #84]	; 0x54
    38dc:	str	r2, [r4, #68]	; 0x44
  setLe64(dup->size, m_upcaseSize);
    38de:	ldr	r3, [r1, #8]
    38e0:	str	r3, [r4, #88]	; 0x58
  setLe64(dbm->size, bitmapSize);
    38e2:	movs	r3, #0
  setLe64(dup->size, m_upcaseSize);
    38e4:	str	r3, [r4, #92]	; 0x5c
  for (uint32_t i = 0; i < ns; i++) {
    38e6:	b.n	3906 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x49a>
    38e8:	.word	0x2000082c
    38ec:	.word	0x200007c8
    38f0:	.word	0x200007e0
    38f4:	.word	0x200007f0
    38f8:	.word	0x20000808
    38fc:	ldr	r3, [sp, #28]
    38fe:	cmp	r8, r3
    3900:	bcs.n	397a <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x50e>
    3902:	add.w	r8, r8, #1
    if (!dev->writeSector(sector + i, secBuf)) {
    3906:	ldr	r3, [r5, #0]
    3908:	add.w	r1, r9, r8
    390c:	mov	r2, r4
    390e:	mov	r0, r5
    3910:	ldr	r3, [r3, #32]
    3912:	blx	r3
    3914:	mov	r6, r0
    3916:	cmp	r0, #0
    3918:	beq.w	3600 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
    if (i == 0) {
    391c:	cmp.w	r8, #1
    3920:	bne.n	38fc <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x490>
      memset(secBuf, 0, BYTES_PER_SECTOR);
    3922:	mov.w	r2, #512	; 0x200
    3926:	movs	r1, #0
    3928:	mov	r0, r4
    392a:	bl	e044 <memset>
  for (uint32_t i = 0; i < ns; i++) {
    392e:	b.n	3902 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x496>
  writeMsg(pr, "Writing upcase table\r\n");
    3930:	cmp	r7, #0
    3932:	beq.n	387c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x410>
    3934:	ldr	r3, [r7, #0]
    3936:	movs	r2, #22
    3938:	ldr	r1, [pc, #80]	; (398c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x520>)
    393a:	mov	r0, r7
    393c:	ldr	r3, [r3, #4]
    393e:	blx	r3
  if (!writeUpcase(partitionOffset + clusterHeapOffset + sectorsPerCluster)) {
    3940:	ldr	r3, [sp, #12]
    3942:	ldr	r2, [sp, #28]
    3944:	ldr	r0, [sp, #16]
    3946:	adds	r1, r3, r2
    3948:	bl	33bc <ExFatFormatter::writeUpcase(unsigned long)>
    394c:	cmp	r0, #0
    394e:	beq.w	3602 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x196>
  if (m_upcaseSize > BYTES_PER_SECTOR * sectorsPerCluster) {
    3952:	ldr	r2, [sp, #8]
    3954:	mov.w	r3, #512	; 0x200
    3958:	lsls	r3, r2
    395a:	ldr	r2, [sp, #16]
    395c:	ldr	r2, [r2, #8]
    395e:	cmp	r2, r3
    3960:	bhi.w	3602 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x196>
  writeMsg(pr, "Writing root\r\n");
    3964:	ldr	r1, [pc, #40]	; (3990 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x524>)
    3966:	mov	r0, r7
    3968:	bl	32e0 <Print::write(char const*) [clone .isra.0]>
    396c:	b.n	38a0 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x434>
  sectorsPerCluster = 1UL << sectorsPerClusterShift;
    396e:	mov.w	r2, #256	; 0x100
    3972:	str.w	r8, [sp, #8]
    3976:	str	r2, [sp, #28]
    3978:	b.n	34be <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x52>
  writeMsg(pr, "Format done\r\n");
    397a:	cmp	r7, #0
    397c:	beq.w	3610 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1a4>
    3980:	ldr	r1, [pc, #16]	; (3994 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x528>)
    3982:	mov	r0, r7
    3984:	bl	32e0 <Print::write(char const*) [clone .isra.0]>
    3988:	b.n	3610 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1a4>
    398a:	nop
    398c:	.word	0x200007f4
    3990:	.word	0x2000080c
    3994:	.word	0x2000081c

00003998 <ExFatFile::cmpName(DirName_t const*, ExName_t*)>:
  hash = ((hash << 15) | (hash >> 1)) + (c & 0XFF);
  hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
  return hash;
}
//------------------------------------------------------------------------------
bool ExFatFile::cmpName(const DirName_t* dirName, ExName_t* fname) {
    3998:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  const char* next;
  /** Position one beyond last LFN character. */
  const char* end;
#if !USE_UTF8_LONG_NAMES
  /** \return true if at end. */
  bool atEnd() { return next == end; }
    399c:	ldrd	r3, r8, [r2, #4]
    39a0:	add.w	r9, r3, #15
  return *reinterpret_cast<const uint16_t*>(src);
    39a4:	ldrh.w	r0, [r1, #2]!
  for (uint8_t i = 0; i < 15; i++) {
    uint16_t u = getLe16(dirName->unicode + 2 * i);
    if (fname->atEnd()) {
    39a8:	cmp	r8, r3
  /** Reset to start of LFN. */
  void reset() { next = begin; }
  /** \return next char of LFN. */
  char getch() { return atEnd() ? 0 : *next++; }
    39aa:	add.w	r3, r3, #1
    if (toUpcase(cp) != toUpcase(u)) {
      return false;
    }
#else   // USE_UTF8_LONG_NAMES
    char c = fname->getch();
    if (u >= 0x7F || toUpper(c) != toUpper(u)) {
    39ae:	uxtb.w	ip, r0
    if (fname->atEnd()) {
    39b2:	beq.n	39f2 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x5a>
    39b4:	str	r3, [r2, #4]
    if (u >= 0x7F || toUpper(c) != toUpper(u)) {
    39b6:	cmp	r0, #126	; 0x7e
    39b8:	ldrb.w	lr, [r3, #-1]
static char toUpper(char c) { return 'a' <= c && c <= 'z' ? c - 'a' + 'A' : c; }
    39bc:	sub.w	r4, ip, #97	; 0x61
    39c0:	sub.w	r6, ip, #32
    39c4:	sub.w	r5, lr, #97	; 0x61
    39c8:	sub.w	r7, lr, #32
    if (u >= 0x7F || toUpper(c) != toUpper(u)) {
    39cc:	bhi.n	39ec <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x54>
static char toUpper(char c) { return 'a' <= c && c <= 'z' ? c - 'a' + 'A' : c; }
    39ce:	cmp	r5, #25
    39d0:	it	ls
    39d2:	uxtbls.w	lr, r7
    39d6:	cmp	r4, #25
    39d8:	it	ls
    39da:	uxtbls.w	ip, r6
    if (u >= 0x7F || toUpper(c) != toUpper(u)) {
    39de:	cmp	ip, lr
    39e0:	bne.n	39ec <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x54>
  for (uint8_t i = 0; i < 15; i++) {
    39e2:	cmp	r9, r3
    39e4:	bne.n	39a4 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0xc>
      return false;
    }
#endif  // USE_UTF8_LONG_NAMES
  }
  return true;
    39e6:	movs	r0, #1
}
    39e8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return false;
    39ec:	movs	r0, #0
}
    39ee:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return u == 0;
    39f2:	clz	r0, r0
    39f6:	lsrs	r0, r0, #5
}
    39f8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000039fc <ExFatFile::getName7(char*, unsigned int)>:
//------------------------------------------------------------------------------
size_t ExFatFile::getName7(char* name, size_t count) {
    39fc:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  DirName_t* dn;
  size_t n = 0;
  if (!isOpen()) {
    3a00:	ldrb.w	r3, [r0, #49]	; 0x31
size_t ExFatFile::getName7(char* name, size_t count) {
    3a04:	mov	r7, r1
  if (!isOpen()) {
    3a06:	cbz	r3, 3a6e <ExFatFile::getName7(char*, unsigned int)+0x72>
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t is = 2; is <= m_setCount; is++) {
    3a08:	ldrb.w	r3, [r0, #48]	; 0x30
    3a0c:	mov	r6, r0
    3a0e:	cmp	r3, #1
    3a10:	bls.n	3a7a <ExFatFile::getName7(char*, unsigned int)+0x7e>
    3a12:	mov	r5, r2
    3a14:	mov.w	r8, #2
  size_t n = 0;
    3a18:	movs	r4, #0
    dn = reinterpret_cast<DirName_t*>(dirCache(is, FsCache::CACHE_FOR_READ));
    3a1a:	movs	r2, #0
    3a1c:	mov	r1, r8
    3a1e:	mov	r0, r6
    3a20:	bl	3ae4 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
    3a24:	mov	ip, r0
    3a26:	cbz	r0, 3a6e <ExFatFile::getName7(char*, unsigned int)+0x72>
    3a28:	ldrb	r3, [r0, #0]
    3a2a:	cmp	r3, #193	; 0xc1
    3a2c:	bne.n	3a6e <ExFatFile::getName7(char*, unsigned int)+0x72>
    3a2e:	add.w	lr, r4, #4294967295
    3a32:	add.w	r2, r4, #15
    3a36:	add	lr, r7
    3a38:	ldrh.w	r3, [ip, #2]!
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (uint8_t in = 0; in < 15; in++) {
      uint16_t c = getLe16(dn->unicode + 2 * in);
      if (c == 0) {
    3a3c:	cbz	r3, 3a62 <ExFatFile::getName7(char*, unsigned int)+0x66>
        goto done;
      }
      if ((n + 1) >= count) {
    3a3e:	adds	r4, #1
    3a40:	cmp	r4, r5
    3a42:	bcs.n	3a6e <ExFatFile::getName7(char*, unsigned int)+0x72>
        DBG_FAIL_MACRO;
        goto fail;
      }
      name[n++] = c < 0X7F ? c : '?';
    3a44:	cmp	r3, #127	; 0x7f
    3a46:	it	cs
    3a48:	movcs	r3, #63	; 0x3f
    for (uint8_t in = 0; in < 15; in++) {
    3a4a:	cmp	r4, r2
      name[n++] = c < 0X7F ? c : '?';
    3a4c:	strb.w	r3, [lr, #1]!
    for (uint8_t in = 0; in < 15; in++) {
    3a50:	bne.n	3a38 <ExFatFile::getName7(char*, unsigned int)+0x3c>
  for (uint8_t is = 2; is <= m_setCount; is++) {
    3a52:	add.w	r8, r8, #1
    3a56:	ldrb.w	r3, [r6, #48]	; 0x30
    3a5a:	uxtb.w	r8, r8
    3a5e:	cmp	r3, r8
    3a60:	bcs.n	3a1a <ExFatFile::getName7(char*, unsigned int)+0x1e>
    }
  }
done:
  name[n] = 0;
    3a62:	add	r7, r4
    3a64:	movs	r3, #0
  return n;

fail:
  *name = 0;
  return 0;
}
    3a66:	mov	r0, r4
  name[n] = 0;
    3a68:	strb	r3, [r7, #0]
}
    3a6a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  *name = 0;
    3a6e:	movs	r3, #0
  return 0;
    3a70:	mov	r4, r3
  *name = 0;
    3a72:	strb	r3, [r7, #0]
}
    3a74:	mov	r0, r4
    3a76:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  size_t n = 0;
    3a7a:	movs	r4, #0
    3a7c:	b.n	3a64 <ExFatFile::getName7(char*, unsigned int)+0x68>
    3a7e:	nop

00003a80 <ExFatFile::hashName(ExName_t*)>:
fail:
  *name = 0;
  return 0;
}
//------------------------------------------------------------------------------
bool ExFatFile::hashName(ExName_t* fname) {
    3a80:	push	{r4, r5, lr}
  void reset() { next = begin; }
    3a82:	ldr	r5, [r1, #0]
  bool atEnd() { return next == end; }
    3a84:	ldr	r4, [r1, #8]
  void reset() { next = begin; }
    3a86:	str	r5, [r1, #4]
    }
    hash = exFatHash(u, hash);
    fname->nameLength++;
  }
#else   // USE_UTF8_LONG_NAMES
  while (!fname->atEnd()) {
    3a88:	cmp	r4, r5
    3a8a:	beq.n	3ad8 <ExFatFile::hashName(ExName_t*)+0x58>
    3a8c:	mov	r2, r5
  uint16_t hash = 0;
    3a8e:	movs	r3, #0
  char getch() { return atEnd() ? 0 : *next++; }
    3a90:	adds	r2, #1
  hash = ((hash << 15) | (hash >> 1)) + u;
    3a92:	lsls	r0, r3, #15
    3a94:	str	r2, [r1, #4]
    3a96:	orr.w	r3, r0, r3, lsr #1
    3a9a:	ldrb.w	r0, [r2, #-1]
static char toUpper(char c) { return 'a' <= c && c <= 'z' ? c - 'a' + 'A' : c; }
    3a9e:	sub.w	ip, r0, #97	; 0x61
    3aa2:	sub.w	lr, r0, #32
    3aa6:	cmp.w	ip, #25
    3aaa:	it	ls
    3aac:	uxtbls.w	r0, lr
  while (!fname->atEnd()) {
    3ab0:	cmp	r4, r2
  hash = ((hash << 15) | (hash >> 1)) + u;
    3ab2:	add	r3, r0
  hash = ((hash << 15) | (hash >> 1));
    3ab4:	mov.w	r0, r3, lsl #15
    3ab8:	ubfx	r3, r3, #1, #15
    3abc:	and.w	r0, r0, #32768	; 0x8000
    3ac0:	orr.w	r3, r3, r0
  while (!fname->atEnd()) {
    3ac4:	bne.n	3a90 <ExFatFile::hashName(ExName_t*)+0x10>
    // Convert to byte for smaller exFatHash.
    char c = fname->getch();
    hash = exFatHash(c, hash);
  }
  fname->nameLength = fname->end - fname->begin;
    3ac6:	subs	r4, r4, r5
#endif  // USE_UTF8_LONG_NAMES
  fname->nameHash = hash;
    3ac8:	strh	r3, [r1, #16]
  if (!fname->nameLength || fname->nameLength > EXFAT_MAX_NAME_LENGTH) {
    3aca:	subs	r0, r4, #1
  fname->nameLength = fname->end - fname->begin;
    3acc:	str	r4, [r1, #12]
  if (!fname->nameLength || fname->nameLength > EXFAT_MAX_NAME_LENGTH) {
    3ace:	cmp	r0, #254	; 0xfe
    3ad0:	ite	hi
    3ad2:	movhi	r0, #0
    3ad4:	movls	r0, #1
  }
  return true;

fail:
  return false;
}
    3ad6:	pop	{r4, r5, pc}
  while (!fname->atEnd()) {
    3ad8:	movs	r0, #0
    3ada:	mov	r4, r0
  uint16_t hash = 0;
    3adc:	mov	r3, r0
  fname->nameLength = fname->end - fname->begin;
    3ade:	str	r4, [r1, #12]
  fname->nameHash = hash;
    3ae0:	strh	r3, [r1, #16]
}
    3ae2:	pop	{r4, r5, pc}

00003ae4 <ExFatFile::dirCache(unsigned char, unsigned char)>:
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    3ae4:	push	{r4, r5, r6, lr}
  DirPos_t pos = m_dirPos;
    3ae6:	add.w	r3, r0, #36	; 0x24
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    3aea:	sub	sp, #16
    3aec:	mov	ip, r1
    3aee:	mov	r4, r0
  DirPos_t pos = m_dirPos;
    3af0:	add	r5, sp, #4
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    3af2:	mov	r6, r2
  DirPos_t pos = m_dirPos;
    3af4:	ldmia.w	r3, {r0, r1, r2}
    3af8:	stmia.w	r5, {r0, r1, r2}
  if (m_vol->dirSeek(&pos, FS_DIR_SIZE * set) != 1) {
    3afc:	mov.w	r2, ip, lsl #5
    3b00:	mov	r1, r5
    3b02:	ldr	r0, [r4, #32]
    3b04:	bl	45dc <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    3b08:	cmp	r0, #1
    3b0a:	bne.n	3b1a <ExFatFile::dirCache(unsigned char, unsigned char)+0x36>
  return m_vol->dirCache(&pos, options);
    3b0c:	mov	r2, r6
    3b0e:	mov	r1, r5
    3b10:	ldr	r0, [r4, #32]
    3b12:	bl	45a4 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
}
    3b16:	add	sp, #16
    3b18:	pop	{r4, r5, r6, pc}
    return nullptr;
    3b1a:	movs	r0, #0
}
    3b1c:	add	sp, #16
    3b1e:	pop	{r4, r5, r6, pc}

00003b20 <ExFatFile::close()>:
bool ExFatFile::close() {
    3b20:	push	{r4, lr}
    3b22:	mov	r4, r0
  bool rtn = sync();
    3b24:	bl	4bf8 <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    3b28:	movs	r3, #0
    3b2a:	strb.w	r3, [r4, #49]	; 0x31
  m_flags = 0;
    3b2e:	strb.w	r3, [r4, #51]	; 0x33
}
    3b32:	pop	{r4, pc}

00003b34 <ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)>:
bool ExFatFile::getCreateDateTime(uint16_t* pdate, uint16_t* ptime) {
    3b34:	push	{r3, r4, r5, lr}
    3b36:	mov	r4, r2
    3b38:	mov	r5, r1
      m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_READ));
    3b3a:	movs	r2, #0
    3b3c:	add.w	r1, r0, #36	; 0x24
    3b40:	ldr	r0, [r0, #32]
    3b42:	bl	45a4 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    3b46:	mov	r3, r0
    3b48:	cbz	r0, 3b54 <ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)+0x20>
    3b4a:	ldrh	r2, [r0, #10]
  return true;
    3b4c:	movs	r0, #1
  *pdate = getLe16(df->createDate);
    3b4e:	strh	r2, [r5, #0]
    3b50:	ldrh	r3, [r3, #8]
  *ptime = getLe16(df->createTime);
    3b52:	strh	r3, [r4, #0]
}
    3b54:	pop	{r3, r4, r5, pc}
    3b56:	nop

00003b58 <ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)>:
bool ExFatFile::getModifyDateTime(uint16_t* pdate, uint16_t* ptime) {
    3b58:	push	{r3, r4, r5, lr}
    3b5a:	mov	r4, r2
    3b5c:	mov	r5, r1
      m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_READ));
    3b5e:	movs	r2, #0
    3b60:	add.w	r1, r0, #36	; 0x24
    3b64:	ldr	r0, [r0, #32]
    3b66:	bl	45a4 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    3b6a:	mov	r3, r0
    3b6c:	cbz	r0, 3b78 <ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)+0x20>
    3b6e:	ldrh	r2, [r0, #14]
  return true;
    3b70:	movs	r0, #1
  *pdate = getLe16(df->modifyDate);
    3b72:	strh	r2, [r5, #0]
    3b74:	ldrh	r3, [r3, #12]
  *ptime = getLe16(df->modifyTime);
    3b76:	strh	r3, [r4, #0]
}
    3b78:	pop	{r3, r4, r5, pc}
    3b7a:	nop

00003b7c <ExFatFile::openRoot(ExFatVolume*)>:
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRoot(ExFatVolume* vol) {
    3b7c:	push	{r3, r4, r5, lr}
    3b7e:	mov	r5, r1
  if (isOpen()) {
    3b80:	ldrb.w	r1, [r0, #49]	; 0x31
    3b84:	cbz	r1, 3b8a <ExFatFile::openRoot(ExFatVolume*)+0xe>
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
  return true;

fail:
  return false;
    3b86:	movs	r0, #0
}
    3b88:	pop	{r3, r4, r5, pc}
  memset(this, 0, sizeof(ExFatFile));
    3b8a:	movs	r2, #56	; 0x38
    3b8c:	mov	r4, r0
    3b8e:	bl	e044 <memset>
  m_flags = FILE_FLAG_READ;
    3b92:	movs	r3, #1
  m_attributes = FILE_ATTR_ROOT;
    3b94:	movs	r2, #64	; 0x40
  m_vol = vol;
    3b96:	str	r5, [r4, #32]
  m_flags = FILE_FLAG_READ;
    3b98:	mov	r0, r3
    3b9a:	strb.w	r3, [r4, #51]	; 0x33
  m_attributes = FILE_ATTR_ROOT;
    3b9e:	strb.w	r2, [r4, #49]	; 0x31
}
    3ba2:	pop	{r3, r4, r5, pc}

00003ba4 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>:
//------------------------------------------------------------------------------
bool ExFatFile::parsePathName(const char* path, ExName_t* fname,
                              const char** ptr) {
    3ba4:	push	{r4, r5, r6, r7}
    3ba6:	mov	r5, r1
  // Skip leading spaces.
  while (*path == ' ') {
    3ba8:	ldrb	r1, [r1, #0]
    3baa:	cmp	r1, #32
    3bac:	bne.n	3bb6 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x12>
    3bae:	ldrb.w	r4, [r5, #1]!
    3bb2:	cmp	r4, #32
    3bb4:	beq.n	3bae <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa>
    path++;
  }
  fname->begin = path;
    3bb6:	str	r5, [r2, #0]
  fname->end = path;
    3bb8:	str	r5, [r2, #8]
  while (*path && !isDirSeparator(*path)) {
    3bba:	ldrb	r4, [r5, #0]
    3bbc:	cmp	r4, #47	; 0x2f
    3bbe:	beq.n	3be4 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x40>
    3bc0:	cbz	r4, 3be4 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x40>
    3bc2:	adds	r6, r5, #1
    3bc4:	cmp	r4, #60	; 0x3c
    3bc6:	ldr	r7, [pc, #120]	; (3c40 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x9c>)
    uint8_t c = *path++;
    3bc8:	mov	r5, r6
  return !(lfnReservedChar(c) || c & 0X80);
    3bca:	bhi.n	3c22 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x7e>
    3bcc:	cmp	r4, #33	; 0x21
    3bce:	bhi.n	3bf6 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x52>
    3bd0:	add.w	ip, r4, #4294967295
    3bd4:	cmp.w	ip, #30
    3bd8:	bhi.n	3c08 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x64>
  *ptr = path;
  return hashName(fname);

fail:
  return false;
}
    3bda:	movs	r0, #0
    3bdc:	pop	{r4, r5, r6, r7}
    3bde:	bx	lr
  for (; *path == ' ' || isDirSeparator(*path); path++) {
    3be0:	ldrb.w	r4, [r5, #1]!
    3be4:	cmp	r4, #32
    3be6:	beq.n	3be0 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x3c>
    3be8:	cmp	r4, #47	; 0x2f
    3bea:	beq.n	3be0 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x3c>
  *ptr = path;
    3bec:	str	r5, [r3, #0]
  return hashName(fname);
    3bee:	mov	r1, r2
}
    3bf0:	pop	{r4, r5, r6, r7}
  return hashName(fname);
    3bf2:	b.w	3a80 <ExFatFile::hashName(ExName_t*)>
    3bf6:	sub.w	ip, r4, #34	; 0x22
    3bfa:	uxtb.w	ip, ip
    3bfe:	lsr.w	ip, r7, ip
    3c02:	tst.w	ip, #1
    3c06:	bne.n	3bda <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x36>
    if (c != '.' && c != ' ') {
    3c08:	cmp	r4, #46	; 0x2e
    3c0a:	beq.n	3c10 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x6c>
    3c0c:	cmp	r4, #32
    3c0e:	bne.n	3c30 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x8c>
  while (*path && !isDirSeparator(*path)) {
    3c10:	ldrb.w	r4, [r6], #1
    3c14:	cmp	r4, #0
    3c16:	beq.n	3be4 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x40>
    3c18:	cmp	r4, #47	; 0x2f
    3c1a:	beq.n	3be4 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x40>
    uint8_t c = *path++;
    3c1c:	cmp	r4, #60	; 0x3c
    3c1e:	mov	r5, r6
  return !(lfnReservedChar(c) || c & 0X80);
    3c20:	bls.n	3bcc <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x28>
    3c22:	cmp	r4, #92	; 0x5c
    3c24:	beq.n	3bda <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x36>
    3c26:	bls.n	3c34 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x90>
    3c28:	cmp	r4, #124	; 0x7c
    3c2a:	beq.n	3bda <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x36>
    3c2c:	lsls	r1, r4, #24
    3c2e:	bmi.n	3bda <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x36>
      fname->end = path;
    3c30:	str	r6, [r2, #8]
    3c32:	b.n	3c10 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x6c>
    3c34:	subs	r4, #62	; 0x3e
    3c36:	cmp	r4, #1
    3c38:	bhi.n	3c30 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x8c>
}
    3c3a:	movs	r0, #0
    3c3c:	pop	{r4, r5, r6, r7}
    3c3e:	bx	lr
    3c40:	.word	0x05002101

00003c44 <ExFatFile::read(void*, unsigned int)>:
  m_curPosition = saveCurPosition;
  m_curCluster = saveCurCluster;
  return c;
}
//------------------------------------------------------------------------------
int ExFatFile::read(void* buf, size_t count) {
    3c44:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  bool isReadable() const { return m_flags & FILE_FLAG_READ; }
    3c48:	ldrb.w	r3, [r0, #51]	; 0x33
    3c4c:	sub	sp, #12
    3c4e:	mov	r5, r0
  uint8_t* cache;
  uint16_t sectorOffset;
  uint32_t sector;
  uint32_t clusterOffset;

  if (!isReadable()) {
    3c50:	lsls	r4, r3, #31
    3c52:	bpl.n	3d3e <ExFatFile::read(void*, unsigned int)+0xfa>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isContiguous() || isFile()) {
    3c54:	lsls	r0, r3, #25
    3c56:	mov	r7, r1
    3c58:	mov	r8, r2
    3c5a:	bpl.w	3dbe <ExFatFile::read(void*, unsigned int)+0x17a>
    if ((m_curPosition + count) > m_validLength) {
    3c5e:	ldrd	r2, r3, [r5]
    3c62:	ldrd	r1, r0, [r5, #16]
    3c66:	adds.w	r4, r8, r2
    3c6a:	adc.w	r3, r3, #0
    3c6e:	cmp	r1, r4
    3c70:	sbcs.w	r3, r0, r3
    3c74:	bcc.w	3dca <ExFatFile::read(void*, unsigned int)+0x186>
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    3c78:	cmp.w	r8, #0
    3c7c:	beq.n	3d36 <ExFatFile::read(void*, unsigned int)+0xf2>
    if ((m_curPosition + count) > m_validLength) {
    3c7e:	mov	r6, r8
        m_curCluster =
            isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
      } else if (isContiguous()) {
        m_curCluster++;
      } else {
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    3c80:	add.w	r9, r5, #24
    if ((m_curPosition + count) > m_validLength) {
    3c84:	ldrd	r3, r2, [r5]
    clusterOffset = m_curPosition & m_vol->clusterMask();
    3c88:	ldr.w	sl, [r5, #32]
    3c8c:	ldr.w	r4, [sl, #1080]	; 0x438
    3c90:	ands	r4, r3
    sectorOffset = clusterOffset & m_vol->sectorMask();
    3c92:	ubfx	fp, r4, #0, #9
    if (clusterOffset == 0) {
    3c96:	cmp	r4, #0
    3c98:	bne.n	3d7c <ExFatFile::read(void*, unsigned int)+0x138>
      if (m_curPosition == 0) {
    3c9a:	orrs	r3, r2
    3c9c:	bne.n	3d80 <ExFatFile::read(void*, unsigned int)+0x13c>
            isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
    3c9e:	ldrb.w	r3, [r5, #49]	; 0x31
    3ca2:	lsls	r2, r3, #25
   *
   * \return true if busy else false.
   */
  bool isBusy() { return m_blockDev->isBusy(); }
  /** \return the root directory start cluster number. */
  uint32_t rootDirectoryCluster() const { return m_rootDirectoryCluster; }
    3ca4:	ite	mi
    3ca6:	ldrmi.w	r2, [sl, #1076]	; 0x434
    3caa:	ldrpl	r2, [r5, #28]
        m_curCluster++;
    3cac:	str	r2, [r5, #24]
  bool dataCacheSync() { return m_dataCache.sync(); }
  //----------------------------------------------------------------------------
  uint32_t clusterMask() const { return m_clusterMask; }
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    3cae:	ldrb.w	r0, [sl, #1093]	; 0x445
    3cb2:	subs	r2, #2
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
    3cb4:	ldr.w	r1, [sl, #1068]	; 0x42c
             (clusterOffset >> m_vol->bytesPerSectorShift());
    3cb8:	lsrs	r3, r4, #9
    3cba:	lsls	r2, r0
    sector = m_vol->clusterStartSector(m_curCluster) +
    3cbc:	add.w	r1, r1, r4, lsr #9
    3cc0:	add	r1, r2
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector() ||
    3cc2:	cmp.w	fp, #0
    3cc6:	bne.n	3d54 <ExFatFile::read(void*, unsigned int)+0x110>
    3cc8:	cmp.w	r6, #512	; 0x200
    3ccc:	bcc.n	3d54 <ExFatFile::read(void*, unsigned int)+0x110>
   * \param[in] option mode for cached sector.
   * \return Address of cached sector.
   */
  uint8_t* prepare(uint32_t sector, uint8_t option);
  /** \return Logical sector number for cached sector. */
  uint32_t sector() { return m_sector; }
    3cce:	ldr.w	r2, [sl, #536]	; 0x218
    3cd2:	cmp	r1, r2
    3cd4:	beq.n	3d54 <ExFatFile::read(void*, unsigned int)+0x110>
        goto fail;
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2 * m_vol->bytesPerSector()) {
    3cd6:	cmp.w	r6, #1024	; 0x400
    3cda:	bcc.n	3d8e <ExFatFile::read(void*, unsigned int)+0x14a>
  uint32_t sectorsPerCluster() const { return 1UL << m_sectorsPerClusterShift; }
    3cdc:	mov.w	fp, #1
    3ce0:	lsl.w	fp, fp, r0
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
      // Limit reads to current cluster.
      uint32_t maxNs = m_vol->sectorsPerCluster() -
                       (clusterOffset >> m_vol->bytesPerSectorShift());
    3ce4:	sub.w	fp, fp, r3
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    3ce8:	lsrs	r3, r6, #9
    3cea:	cmp	fp, r3
    3cec:	it	cs
    3cee:	movcs	fp, r3
    return sector <= m_sector && m_sector < (sector + count);
    3cf0:	cmp	r1, r2
      if (ns > maxNs) {
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
    3cf2:	mov.w	r4, fp, lsl #9
    3cf6:	bhi.n	3d0e <ExFatFile::read(void*, unsigned int)+0xca>
    3cf8:	add.w	r3, r1, fp
    3cfc:	cmp	r2, r3
    3cfe:	bcs.n	3d0e <ExFatFile::read(void*, unsigned int)+0xca>
    if (isCached(sector, count) && !sync()) {
    3d00:	add.w	r0, sl, #528	; 0x210
    3d04:	str	r1, [sp, #4]
    3d06:	bl	3154 <FsCache::sync()>
    3d0a:	ldr	r1, [sp, #4]
    3d0c:	cbz	r0, 3d3e <ExFatFile::read(void*, unsigned int)+0xfa>
    return m_blockDev->readSectors(sector, dst, count);
    3d0e:	ldr.w	r0, [sl, #532]	; 0x214
    3d12:	mov	r3, fp
    3d14:	ldr	r2, [r0, #0]
    3d16:	ldr.w	sl, [r2, #20]
    3d1a:	mov	r2, r7
    3d1c:	blx	sl
      if (!m_vol->cacheSafeRead(sector, dst, ns)) {
    3d1e:	cbz	r0, 3d3e <ExFatFile::read(void*, unsigned int)+0xfa>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
    3d20:	mov	r3, r4
    dst += n;
    3d22:	add	r7, r4
    m_curPosition += n;
    3d24:	ldrd	r1, r2, [r5]
    3d28:	adds	r3, r3, r1
    3d2a:	adc.w	r2, r2, #0
  while (toRead) {
    3d2e:	subs	r6, r6, r4
    m_curPosition += n;
    3d30:	strd	r3, r2, [r5]
  while (toRead) {
    3d34:	bne.n	3c88 <ExFatFile::read(void*, unsigned int)+0x44>
    toRead -= n;
  }
  return count - toRead;
    3d36:	mov	r0, r8

fail:
  m_error |= READ_ERROR;
  return -1;
}
    3d38:	add	sp, #12
    3d3a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  m_error |= READ_ERROR;
    3d3e:	ldrb.w	r3, [r5, #50]	; 0x32
  return -1;
    3d42:	mov.w	r0, #4294967295
  m_error |= READ_ERROR;
    3d46:	orr.w	r3, r3, #2
    3d4a:	strb.w	r3, [r5, #50]	; 0x32
}
    3d4e:	add	sp, #12
    3d50:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      n = m_vol->bytesPerSector() - sectorOffset;
    3d54:	rsb	r4, fp, #512	; 0x200
    return m_dataCache.prepare(sector, option);
    3d58:	movs	r2, #0
    3d5a:	add.w	r0, sl, #528	; 0x210
    3d5e:	cmp	r4, r6
    3d60:	it	cs
    3d62:	movcs	r4, r6
    3d64:	bl	31ac <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    3d68:	cmp	r0, #0
    3d6a:	beq.n	3d3e <ExFatFile::read(void*, unsigned int)+0xfa>
      memcpy(dst, src, n);
    3d6c:	add.w	r1, r0, fp
    3d70:	mov	r2, r4
    3d72:	mov	r0, r7
    3d74:	bl	a0a4 <memcpy>
    m_curPosition += n;
    3d78:	mov	r3, r4
    3d7a:	b.n	3d22 <ExFatFile::read(void*, unsigned int)+0xde>
        m_curCluster++;
    3d7c:	ldr	r2, [r5, #24]
    3d7e:	b.n	3cae <ExFatFile::read(void*, unsigned int)+0x6a>
      } else if (isContiguous()) {
    3d80:	ldrb.w	r3, [r5, #51]	; 0x33
    3d84:	lsls	r3, r3, #25
    3d86:	bpl.n	3da6 <ExFatFile::read(void*, unsigned int)+0x162>
        m_curCluster++;
    3d88:	ldr	r2, [r5, #24]
    3d8a:	adds	r2, #1
    3d8c:	b.n	3cac <ExFatFile::read(void*, unsigned int)+0x68>
    return m_blockDev->readSector(sector, dst);
    3d8e:	ldr.w	r0, [sl, #532]	; 0x214
    3d92:	mov	r2, r7
    3d94:	ldr	r3, [r0, #0]
    3d96:	ldr	r3, [r3, #16]
    3d98:	blx	r3
      if (!m_vol->cacheSafeRead(sector, dst)) {
    3d9a:	cmp	r0, #0
    3d9c:	beq.n	3d3e <ExFatFile::read(void*, unsigned int)+0xfa>
    3d9e:	mov.w	r3, #512	; 0x200
      n = m_vol->bytesPerSector();
    3da2:	mov	r4, r3
    3da4:	b.n	3d22 <ExFatFile::read(void*, unsigned int)+0xde>
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    3da6:	mov	r2, r9
    3da8:	mov	r0, sl
    3daa:	ldr	r1, [r5, #24]
    3dac:	bl	4660 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
        if (fg < 0) {
    3db0:	cmp	r0, #0
    3db2:	blt.n	3d3e <ExFatFile::read(void*, unsigned int)+0xfa>
        if (fg == 0) {
    3db4:	beq.n	3dd0 <ExFatFile::read(void*, unsigned int)+0x18c>
    sector = m_vol->clusterStartSector(m_curCluster) +
    3db6:	ldr.w	sl, [r5, #32]
    3dba:	ldr	r2, [r5, #24]
    3dbc:	b.n	3cae <ExFatFile::read(void*, unsigned int)+0x6a>
  if (isContiguous() || isFile()) {
    3dbe:	ldrb.w	r3, [r5, #49]	; 0x31
    3dc2:	lsls	r1, r3, #28
    3dc4:	bpl.w	3c78 <ExFatFile::read(void*, unsigned int)+0x34>
    3dc8:	b.n	3c5e <ExFatFile::read(void*, unsigned int)+0x1a>
      count = toRead = m_validLength - m_curPosition;
    3dca:	sub.w	r8, r1, r2
    3dce:	b.n	3c78 <ExFatFile::read(void*, unsigned int)+0x34>
          if (isDir()) {
    3dd0:	ldrb.w	r3, [r5, #49]	; 0x31
    3dd4:	tst.w	r3, #80	; 0x50
    3dd8:	beq.n	3d3e <ExFatFile::read(void*, unsigned int)+0xfa>
  return count - toRead;
    3dda:	sub.w	r8, r8, r6
    3dde:	mov	r0, r8
    3de0:	b.n	3d38 <ExFatFile::read(void*, unsigned int)+0xf4>
    3de2:	nop

00003de4 <ExFatFile::peek()>:
int ExFatFile::peek() {
    3de4:	push	{r4, r5, r6, r7, lr}
    3de6:	sub	sp, #12
    return read(&b, 1) == 1 ? b : -1;
    3de8:	movs	r2, #1
    3dea:	mov	r4, r0
  uint32_t saveCurCluster = m_curCluster;
    3dec:	ldr	r5, [r0, #24]
    3dee:	add.w	r1, sp, #7
  uint64_t saveCurPosition = m_curPosition;
    3df2:	ldrd	r6, r7, [r0]
    3df6:	bl	3c44 <ExFatFile::read(void*, unsigned int)>
    3dfa:	cmp	r0, #1
  m_curCluster = saveCurCluster;
    3dfc:	str	r5, [r4, #24]
    3dfe:	ite	eq
    3e00:	ldrbeq.w	r0, [sp, #7]
    3e04:	movne.w	r0, #4294967295
  m_curPosition = saveCurPosition;
    3e08:	strd	r6, r7, [r4]
}
    3e0c:	add	sp, #12
    3e0e:	pop	{r4, r5, r6, r7, pc}

00003e10 <ExFatFile::seekSet(unsigned long long)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
    3e10:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3e14:	mov	r7, r3
  bool isOpen() const { return m_attributes; }
    3e16:	ldrb.w	r3, [r0, #49]	; 0x31
    3e1a:	sub	sp, #12
    3e1c:	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    3e1e:	ldr.w	r8, [r0, #24]
  // error if file not open
  if (!isOpen()) {
    3e22:	cmp	r3, #0
    3e24:	beq.n	3eca <ExFatFile::seekSet(unsigned long long)+0xba>
    3e26:	mov	r6, r2
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    3e28:	ldrd	r1, ip, [r0]
    3e2c:	cmp	ip, r7
    3e2e:	it	eq
    3e30:	cmpeq	r1, r2
    3e32:	beq.n	3eee <ExFatFile::seekSet(unsigned long long)+0xde>
    return true;
  }
  if (pos == 0) {
    3e34:	orrs.w	r2, r6, r7
    3e38:	beq.n	3ed6 <ExFatFile::seekSet(unsigned long long)+0xc6>
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    3e3a:	lsls	r5, r3, #28
    3e3c:	bpl.n	3e48 <ExFatFile::seekSet(unsigned long long)+0x38>
    if (pos > m_validLength) {
    3e3e:	ldrd	r0, r2, [r0, #16]
    3e42:	cmp	r0, r6
    3e44:	sbcs	r2, r7
    3e46:	bcc.n	3eca <ExFatFile::seekSet(unsigned long long)+0xba>
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
  if (isContiguous()) {
    3e48:	ldrb.w	r2, [r4, #51]	; 0x33
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    3e4c:	subs	r5, r6, #1
    3e4e:	ldr.w	sl, [r4, #32]
  if (isContiguous()) {
    3e52:	str	r2, [sp, #4]
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    3e54:	adc.w	r0, r7, #4294967295
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    3e58:	ldrb.w	r2, [sl, #1093]	; 0x445
    3e5c:	adds	r2, #9
    3e5e:	uxtb	r2, r2
    3e60:	rsb	lr, r2, #32
    3e64:	lsrs	r5, r2
    3e66:	sub.w	r9, r2, #32
    3e6a:	lsl.w	fp, r0, lr
    3e6e:	lsr.w	r0, r0, r9
    3e72:	orr.w	r5, r5, fp
    3e76:	orrs	r5, r0
  if (isContiguous()) {
    3e78:	ldr	r0, [sp, #4]
    3e7a:	lsls	r0, r0, #25
    3e7c:	bmi.n	3ee6 <ExFatFile::seekSet(unsigned long long)+0xd6>
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    3e7e:	subs	r0, r1, #1
    3e80:	lsr.w	r2, r0, r2
    3e84:	adc.w	r0, ip, #4294967295
  if (nNew < nCur || m_curPosition == 0) {
    3e88:	orrs.w	ip, r1, ip
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    3e8c:	lsl.w	lr, r0, lr
    3e90:	lsr.w	r0, r0, r9
    3e94:	orr.w	r2, r2, lr
    3e98:	orr.w	r2, r2, r0
  if (nNew < nCur || m_curPosition == 0) {
    3e9c:	beq.n	3ea2 <ExFatFile::seekSet(unsigned long long)+0x92>
    3e9e:	cmp	r5, r2
    3ea0:	bcs.n	3ef6 <ExFatFile::seekSet(unsigned long long)+0xe6>
    // must follow chain from first cluster
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
    3ea2:	lsls	r3, r3, #25
  uint32_t rootDirectoryCluster() const { return m_rootDirectoryCluster; }
    3ea4:	ite	mi
    3ea6:	ldrmi.w	r3, [sl, #1076]	; 0x434
    3eaa:	ldrpl	r3, [r4, #28]
    3eac:	str	r3, [r4, #24]
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    3eae:	add.w	r9, r4, #24
    3eb2:	b.n	3ec2 <ExFatFile::seekSet(unsigned long long)+0xb2>
    3eb4:	ldr	r1, [r4, #24]
    3eb6:	subs	r5, #1
    3eb8:	ldr	r0, [r4, #32]
    3eba:	bl	4660 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    3ebe:	cmp	r0, #0
    3ec0:	ble.n	3eca <ExFatFile::seekSet(unsigned long long)+0xba>
    3ec2:	mov	r2, r9
  while (nNew--) {
    3ec4:	cmp	r5, #0
    3ec6:	bne.n	3eb4 <ExFatFile::seekSet(unsigned long long)+0xa4>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }

done:
    3ec8:	b.n	3eda <ExFatFile::seekSet(unsigned long long)+0xca>
  m_curPosition = pos;
  return true;

fail:
  m_curCluster = tmp;
  return false;
    3eca:	movs	r0, #0
  m_curCluster = tmp;
    3ecc:	str.w	r8, [r4, #24]
}
    3ed0:	add	sp, #12
    3ed2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    m_curCluster = 0;
    3ed6:	movs	r3, #0
    3ed8:	str	r3, [r0, #24]
  return true;
    3eda:	movs	r0, #1
  m_curPosition = pos;
    3edc:	strd	r6, r7, [r4]
}
    3ee0:	add	sp, #12
    3ee2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    m_curCluster = m_firstCluster + nNew;
    3ee6:	ldr	r3, [r4, #28]
    3ee8:	add	r3, r5
    3eea:	str	r3, [r4, #24]
    goto done;
    3eec:	b.n	3eda <ExFatFile::seekSet(unsigned long long)+0xca>
    return true;
    3eee:	movs	r0, #1
}
    3ef0:	add	sp, #12
    3ef2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    nNew -= nCur;
    3ef6:	subs	r5, r5, r2
    3ef8:	b.n	3eae <ExFatFile::seekSet(unsigned long long)+0x9e>
    3efa:	nop

00003efc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>:
bool ExFatFile::openPrivate(ExFatFile* dir, ExName_t* fname, oflag_t oflag) {
    3efc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3f00:	mov	r8, r2
    3f02:	ldrb.w	r2, [r0, #49]	; 0x31
    3f06:	sub	sp, #60	; 0x3c
    3f08:	mov	r5, r0
  if (isOpen() || !dir->isDir()) {
    3f0a:	cmp	r2, #0
    3f0c:	bne.w	40bc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
  bool isDir() const { return m_attributes & FILE_ATTR_DIR; }
    3f10:	mov	fp, r1
    3f12:	ldrb.w	r1, [r1, #49]	; 0x31
    3f16:	tst.w	r1, #80	; 0x50
    3f1a:	beq.w	40bc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
  switch (oflag & O_ACCMODE) {
    3f1e:	and.w	r1, r3, #3
    3f22:	mov	sl, r3
    3f24:	cmp	r1, #3
    3f26:	beq.w	40bc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
    3f2a:	adds	r1, #1
    3f2c:	and.w	r0, r3, #8
    3f30:	orr.w	r3, r1, r0
    3f34:	str	r3, [sp, #8]
  if (fname) {
    3f36:	cmp.w	r8, #0
    3f3a:	beq.w	40d0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1d4>
    freeNeed = 2 + (fname->nameLength + 14) / 15;
    3f3e:	ldr.w	r1, [r8, #12]
    3f42:	add.w	r7, r1, #14
    3f46:	ldr	r1, [pc, #756]	; (423c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x340>)
    3f48:	umull	r1, r7, r1, r7
  if (pos == m_curPosition) {
    3f4c:	ldrd	r1, r0, [fp]
    freeNeed = 2 + (fname->nameLength + 14) / 15;
    3f50:	lsrs	r7, r7, #3
  if (pos == m_curPosition) {
    3f52:	orrs	r1, r0
    freeNeed = 2 + (fname->nameLength + 14) / 15;
    3f54:	add.w	r7, r7, #2
    3f58:	uxtb	r7, r7
  if (pos == m_curPosition) {
    3f5a:	beq.n	3f68 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x6c>
  m_curPosition = pos;
    3f5c:	movs	r0, #0
    3f5e:	movs	r1, #0
    m_curCluster = 0;
    3f60:	str.w	r2, [fp, #24]
  m_curPosition = pos;
    3f64:	strd	r0, r1, [fp]
        inSet = false;
    3f68:	movs	r4, #0
        m_flags |= FILE_FLAG_CONTIGUOUS;
    3f6a:	ldr	r3, [sp, #8]
        inSet = false;
    3f6c:	mov	r6, r4
        m_flags |= FILE_FLAG_CONTIGUOUS;
    3f6e:	orr.w	r3, r3, #64	; 0x40
    3f72:	str	r3, [sp, #12]
    n = dir->read(buf, FS_DIR_SIZE);
    3f74:	movs	r2, #32
    3f76:	add	r1, sp, #24
    3f78:	mov	r0, fp
    3f7a:	bl	3c44 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    3f7e:	cbz	r0, 3fc2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xc6>
    if (n != FS_DIR_SIZE) {
    3f80:	cmp	r0, #32
    3f82:	bne.w	40bc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
    if (!(buf[0] & EXFAT_TYPE_USED)) {
    3f86:	ldrsb.w	r2, [sp, #24]
    3f8a:	ldrb.w	r3, [sp, #24]
    3f8e:	cmp	r2, #0
    3f90:	blt.w	40d4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1d8>
      if (freeCount == 0) {
    3f94:	cbnz	r4, 3fa4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xa8>
        freePos.position = dir->curPosition() - FS_DIR_SIZE;
    3f96:	ldr.w	r2, [fp]
    3f9a:	sub.w	r9, r2, #32
  uint32_t curCluster() const { return m_curCluster; }
    3f9e:	ldr.w	r2, [fp, #24]
    3fa2:	str	r2, [sp, #4]
      if (freeCount < freeNeed) {
    3fa4:	cmp	r4, r7
    3fa6:	bcs.n	3fac <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb0>
        freeCount++;
    3fa8:	adds	r4, #1
    3faa:	uxtb	r4, r4
      if (buf[0] == EXFAT_TYPE_END_DIR) {
    3fac:	cmp	r3, #0
    3fae:	beq.w	41a4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2a8>
    n = dir->read(buf, FS_DIR_SIZE);
    3fb2:	movs	r2, #32
    3fb4:	add	r1, sp, #24
    3fb6:	mov	r0, fp
      inSet = false;
    3fb8:	movs	r6, #0
    n = dir->read(buf, FS_DIR_SIZE);
    3fba:	bl	3c44 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    3fbe:	cmp	r0, #0
    3fc0:	bne.n	3f80 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x84>
  if (!(oflag & O_CREAT) || !(modeFlags & FILE_FLAG_WRITE) || !fname) {
    3fc2:	tst.w	sl, #512	; 0x200
    3fc6:	beq.n	40bc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
    3fc8:	ldr	r3, [sp, #8]
    3fca:	lsls	r3, r3, #30
    3fcc:	bpl.n	40bc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
    3fce:	cmp.w	r8, #0
    3fd2:	beq.n	40bc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
  while (freeCount < freeNeed) {
    3fd4:	cmp	r4, r7
    3fd6:	bcs.n	4008 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x10c>
    3fd8:	ldr.w	sl, [sp, #4]
    n = dir->read(buf, FS_DIR_SIZE);
    3fdc:	movs	r2, #32
    3fde:	add	r1, sp, #24
    3fe0:	mov	r0, fp
    3fe2:	bl	3c44 <ExFatFile::read(void*, unsigned int)>
    freeCount++;
    3fe6:	adds	r3, r4, #1
    if (n == 0) {
    3fe8:	cmp	r0, #0
    3fea:	beq.n	40ae <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1b2>
    if (n != FS_DIR_SIZE) {
    3fec:	cmp	r0, #32
    3fee:	bne.n	40bc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
    if (freeCount == 0) {
    3ff0:	cbnz	r4, 3ffe <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x102>
      freePos.position = dir->curPosition() - FS_DIR_SIZE;
    3ff2:	ldr.w	r2, [fp]
    3ff6:	ldr.w	sl, [fp, #24]
    3ffa:	sub.w	r9, r2, #32
    freeCount++;
    3ffe:	uxtb	r4, r3
  while (freeCount < freeNeed) {
    4000:	cmp	r7, r4
    4002:	bhi.n	3fdc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xe0>
    4004:	str.w	sl, [sp, #4]
  memset(this, 0, sizeof(ExFatFile));
    4008:	movs	r2, #56	; 0x38
    400a:	movs	r1, #0
    400c:	mov	r0, r5
  bool isContiguous() const { return m_flags & FILE_FLAG_CONTIGUOUS; }
    400e:	ldrb.w	r4, [fp, #51]	; 0x33
    4012:	bl	e044 <memset>
  bool hashName(ExName_t* fname);
  bool mkdir(ExFatFile* parent, ExName_t* fname);

  bool openPrivate(ExFatFile* dir, ExName_t* fname, oflag_t oflag);
  bool parsePathName(const char* path, ExName_t* fname, const char** ptr);
  ExFatVolume* volume() const { return m_vol; }
    4016:	ldr.w	r3, [fp, #32]
  freePos.isContiguous = dir->isContiguous();
    401a:	ubfx	r4, r4, #6, #1
  m_dirPos = freePos;
    401e:	ldr	r2, [sp, #4]
  m_vol = dir->volume();
    4020:	str	r3, [r5, #32]
  m_attributes = FILE_ATTR_FILE | FS_ATTRIB_ARCHIVE;
    4022:	movs	r3, #40	; 0x28
  m_dirPos = freePos;
    4024:	strb.w	r4, [r5, #44]	; 0x2c
  m_attributes = FILE_ATTR_FILE | FS_ATTRIB_ARCHIVE;
    4028:	strb.w	r3, [r5, #49]	; 0x31
  void reset() { next = begin; }
    402c:	ldr.w	r3, [r8]
  m_dirPos = freePos;
    4030:	strd	r2, r9, [r5, #36]	; 0x24
    4034:	str.w	r3, [r8, #4]
  for (uint8_t i = 0; i < freeNeed; i++) {
    4038:	cbz	r7, 40a4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1a8>
    403a:	movs	r4, #0
      m_setCount = freeNeed - 1;
    403c:	subs	r6, r7, #1
      if (FsDateTime::callback) {
    403e:	ldr.w	r9, [pc, #512]	; 4240 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x344>
      m_setCount = freeNeed - 1;
    4042:	uxtb	r6, r6
      if (FsDateTime::callback) {
    4044:	mov	sl, r4
    cache = dirCache(i, FsCache::CACHE_FOR_WRITE);
    4046:	movs	r2, #1
    4048:	mov	r1, sl
    404a:	mov	r0, r5
    404c:	bl	3ae4 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache || (cache[0] & 0x80)) {
    4050:	mov	fp, r0
    4052:	cbz	r0, 40bc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
    4054:	ldrsb.w	r2, [r0]
    4058:	cmp	r2, #0
    405a:	blt.n	40bc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
    memset(cache, 0, FS_DIR_SIZE);
    405c:	movs	r2, #32
    405e:	movs	r1, #0
    4060:	bl	e044 <memset>
    if (i == 0) {
    4064:	cmp	r4, #0
    4066:	beq.w	4200 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x304>
    } else if (i == 1) {
    406a:	cmp.w	sl, #1
    406e:	beq.w	4244 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x348>
      dirName->type = EXFAT_TYPE_NAME;
    4072:	movs	r3, #193	; 0xc1
    4074:	mov	r2, fp
    4076:	add.w	fp, fp, #32
    407a:	strb.w	r3, [r2], #2
  bool atEnd() { return next == end; }
    407e:	ldrd	r3, r0, [r8, #4]
        if (fname->atEnd()) {
    4082:	cmp	r0, r3
  /** \return next UTF-16 unit of LFN. */
  uint16_t get16() { return atEnd() ? 0 : *next++; }
    4084:	add.w	r3, r3, #1
    4088:	beq.n	409a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x19e>
    408a:	str.w	r3, [r8, #4]
    408e:	ldrb.w	r1, [r3, #-1]
    4092:	strh.w	r1, [r2], #2
      for (size_t k = 0; k < 15; k++) {
    4096:	cmp	fp, r2
    4098:	bne.n	4082 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x186>
  for (uint8_t i = 0; i < freeNeed; i++) {
    409a:	adds	r4, #1
    409c:	uxtb.w	sl, r4
    40a0:	cmp	r7, sl
    40a2:	bhi.n	4046 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x14a>
  return sync();
    40a4:	mov	r0, r5
    40a6:	bl	4bf8 <ExFatFile::sync()>
    40aa:	mov	r6, r0
    40ac:	b.n	40c8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1cc>
      if (!dir->addDirCluster()) {
    40ae:	mov	r0, fp
      uint32_t saveCurCluster = dir->m_curCluster;
    40b0:	ldr.w	r6, [fp, #24]
      if (!dir->addDirCluster()) {
    40b4:	bl	4c58 <ExFatFile::addDirCluster()>
    40b8:	cmp	r0, #0
    40ba:	bne.n	41ae <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2b2>
  m_attributes = FILE_ATTR_CLOSED;
    40bc:	movs	r3, #0
  return false;
    40be:	mov	r6, r3
  m_attributes = FILE_ATTR_CLOSED;
    40c0:	strb.w	r3, [r5, #49]	; 0x31
  m_flags = 0;
    40c4:	strb.w	r3, [r5, #51]	; 0x33
}
    40c8:	mov	r0, r6
    40ca:	add	sp, #60	; 0x3c
    40cc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint8_t freeNeed = 3;
    40d0:	movs	r7, #3
    40d2:	b.n	3f68 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x6c>
    } else if (!inSet) {
    40d4:	cbnz	r6, 412c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x230>
        freeCount = 0;
    40d6:	cmp	r4, r7
    40d8:	it	cc
    40da:	movcc	r4, #0
      if (buf[0] != EXFAT_TYPE_FILE) {
    40dc:	cmp	r3, #133	; 0x85
    40de:	bne.w	3f74 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x78>
      memset(this, 0, sizeof(ExFatFile));
    40e2:	mov	r1, r6
    40e4:	movs	r2, #56	; 0x38
    40e6:	mov	r0, r5
      inSet = true;
    40e8:	movs	r6, #1
      memset(this, 0, sizeof(ExFatFile));
    40ea:	bl	e044 <memset>
      m_attributes = getLe16(dirFile->attributes) & FS_ATTRIB_COPY;
    40ee:	ldrb.w	r2, [sp, #28]
      m_setCount = dirFile->setCount;
    40f2:	ldrb.w	r3, [sp, #25]
    40f6:	strb.w	r3, [r5, #48]	; 0x30
      m_attributes = getLe16(dirFile->attributes) & FS_ATTRIB_COPY;
    40fa:	and.w	r3, r2, #55	; 0x37
      if (!(m_attributes & FS_ATTRIB_DIRECTORY)) {
    40fe:	lsls	r2, r2, #27
        m_attributes |= FILE_ATTR_FILE;
    4100:	it	pl
    4102:	orrpl.w	r3, r3, #8
    4106:	strb.w	r3, [r5, #49]	; 0x31
      m_dirPos.position = dir->curPosition() - FS_DIR_SIZE;
    410a:	ldr.w	r3, [fp]
    410e:	ldr.w	r2, [fp, #32]
    4112:	subs	r3, #32
      m_vol = dir->volume();
    4114:	str	r2, [r5, #32]
      m_dirPos.cluster = dir->curCluster();
    4116:	ldr.w	r2, [fp, #24]
    411a:	strd	r2, r3, [r5, #36]	; 0x24
  bool isContiguous() const { return m_flags & FILE_FLAG_CONTIGUOUS; }
    411e:	ldrb.w	r3, [fp, #51]	; 0x33
    4122:	ubfx	r3, r3, #6, #1
      m_dirPos.isContiguous = dir->isContiguous();
    4126:	strb.w	r3, [r5, #44]	; 0x2c
    412a:	b.n	3f74 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x78>
    } else if (buf[0] == EXFAT_TYPE_STREAM) {
    412c:	cmp	r3, #192	; 0xc0
    412e:	beq.n	414e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x252>
    } else if (buf[0] == EXFAT_TYPE_NAME) {
    4130:	cmp	r3, #193	; 0xc1
    4132:	bne.w	3fb2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb6>
      if (!cmpName(dirName, fname)) {
    4136:	mov	r2, r8
    4138:	add	r1, sp, #24
    413a:	mov	r0, r5
    413c:	bl	3998 <ExFatFile::cmpName(DirName_t const*, ExName_t*)>
    4140:	cbz	r0, 414a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x24e>
      if (fname->atEnd()) {
    4142:	ldrd	r3, r2, [r8, #4]
    4146:	cmp	r2, r3
    4148:	beq.n	41b4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2b8>
        inSet = false;
    414a:	mov	r6, r0
    414c:	b.n	3f74 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x78>
      m_flags = modeFlags;
    414e:	ldr	r3, [sp, #8]
    4150:	strb.w	r3, [r5, #51]	; 0x33
      if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    4154:	ldrb.w	r3, [sp, #25]
    4158:	lsls	r3, r3, #30
    415a:	bpl.n	4162 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x266>
        m_flags |= FILE_FLAG_CONTIGUOUS;
    415c:	ldr	r3, [sp, #12]
    415e:	strb.w	r3, [r5, #51]	; 0x33
      m_firstCluster = getLe32(dirStream->firstCluster);
    4162:	ldr	r3, [sp, #44]	; 0x2c
    4164:	str	r3, [r5, #28]
      m_validLength = getLe64(dirStream->validLength);
    4166:	ldrd	r2, r3, [sp, #32]
    416a:	strd	r2, r3, [r5, #16]
      m_dataLength = getLe64(dirStream->dataLength);
    416e:	ldrd	r2, r3, [sp, #48]	; 0x30
    4172:	strd	r2, r3, [r5, #8]
      if (!fname) {
    4176:	cmp.w	r8, #0
    417a:	beq.n	41b4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2b8>
  void reset() { next = begin; }
    417c:	ldr.w	r3, [r8]
      if (fname->nameLength != dirStream->nameLength ||
    4180:	ldr.w	r2, [r8, #12]
    4184:	str.w	r3, [r8, #4]
    4188:	ldrb.w	r3, [sp, #27]
    418c:	cmp	r2, r3
    418e:	bne.w	3fb2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb6>
    4192:	ldrh.w	r6, [r8, #16]
    4196:	ldrh.w	r3, [sp, #28]
    419a:	subs	r6, r6, r3
    419c:	clz	r6, r6
    41a0:	lsrs	r6, r6, #5
    41a2:	b.n	3f74 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x78>
        if (fname) {
    41a4:	cmp.w	r8, #0
    41a8:	bne.w	3fc2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xc6>
    41ac:	b.n	40bc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
      dir->m_curCluster = saveCurCluster;
    41ae:	str.w	r6, [fp, #24]
      continue;
    41b2:	b.n	4000 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x104>
  if (oflag & O_EXCL) {
    41b4:	tst.w	sl, #2048	; 0x800
    41b8:	bne.n	40bc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
  if ((oflag & (O_TRUNC | O_AT_END)) || (m_flags & FILE_FLAG_WRITE)) {
    41ba:	tst.w	sl, #17408	; 0x4400
    41be:	bne.n	427c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x380>
    41c0:	ldrb.w	r3, [r5, #51]	; 0x33
    41c4:	lsls	r7, r3, #30
    41c6:	bmi.n	427c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x380>
  if (oflag & O_TRUNC) {
    41c8:	tst.w	sl, #1024	; 0x400
    41cc:	bne.w	40bc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    41d0:	tst.w	sl, #16384	; 0x4000
    41d4:	beq.w	40c8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1cc>
    41d8:	mov	r0, r5
    41da:	ldrd	r2, r3, [r5, #16]
    41de:	bl	3e10 <ExFatFile::seekSet(unsigned long long)>
    41e2:	cmp	r0, #0
    41e4:	beq.w	40bc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
  if (isWritable()) {
    41e8:	ldrb.w	r3, [r5, #51]	; 0x33
    41ec:	lsls	r2, r3, #30
    41ee:	bpl.w	40c8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1cc>
    m_attributes |= FS_ATTRIB_ARCHIVE;
    41f2:	ldrb.w	r3, [r5, #49]	; 0x31
    41f6:	orr.w	r3, r3, #32
    41fa:	strb.w	r3, [r5, #49]	; 0x31
    41fe:	b.n	40c8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1cc>
      dirFile->type = EXFAT_TYPE_FILE;
    4200:	movs	r3, #133	; 0x85
    4202:	strb.w	r3, [fp]
      m_setCount = freeNeed - 1;
    4206:	strb.w	r6, [r5, #48]	; 0x30
      dirFile->setCount = m_setCount;
    420a:	strb.w	r6, [fp, #1]
      if (FsDateTime::callback) {
    420e:	ldr.w	r3, [r9]
    4212:	cbz	r3, 426a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x36e>
        FsDateTime::callback(&date, &time, &ms10);
    4214:	add.w	r2, sp, #19
    4218:	add.w	r1, sp, #22
    421c:	add	r0, sp, #20
    421e:	blx	r3
  *reinterpret_cast<uint16_t*>(dst) = src;
    4220:	ldrh.w	r3, [sp, #20]
    4224:	strh.w	r3, [fp, #10]
    4228:	ldrh.w	r3, [sp, #22]
    422c:	strh.w	r3, [fp, #8]
        dirFile->createTimeMs = ms10;
    4230:	ldrb.w	r3, [sp, #19]
    4234:	strb.w	r3, [fp, #20]
    4238:	b.n	409a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x19e>
    423a:	nop
    423c:	.word	0x88888889
    4240:	.word	0x20006404
      dirStream->type = EXFAT_TYPE_STREAM;
    4244:	movs	r3, #192	; 0xc0
      dirStream->flags = EXFAT_FLAG_ALWAYS1;
    4246:	strb.w	sl, [fp, #1]
      dirStream->type = EXFAT_TYPE_STREAM;
    424a:	strb.w	r3, [fp]
      m_flags = modeFlags | FILE_FLAG_DIR_DIRTY;
    424e:	ldr	r3, [sp, #8]
    4250:	orn	r3, r3, #127	; 0x7f
    4254:	strb.w	r3, [r5, #51]	; 0x33
      dirStream->nameLength = fname->nameLength;
    4258:	ldr.w	r3, [r8, #12]
    425c:	strb.w	r3, [fp, #3]
      setLe16(dirStream->nameHash, fname->nameHash);
    4260:	ldrh.w	r3, [r8, #16]
    4264:	strh.w	r3, [fp, #4]
}
    4268:	b.n	409a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x19e>
  *reinterpret_cast<uint16_t*>(dst) = src;
    426a:	movw	r3, #22049	; 0x5621
    426e:	strh.w	r3, [fp, #10]
    4272:	strh.w	r3, [fp, #14]
    4276:	strh.w	r3, [fp, #18]
        if (FS_DEFAULT_TIME) {
    427a:	b.n	409a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x19e>
  bool isSubDir() const { return m_attributes & FILE_ATTR_SUBDIR; }
    427c:	ldrb.w	r3, [r5, #49]	; 0x31
    if (isSubDir() || isReadOnly() || EXFAT_READ_ONLY) {
    4280:	lsls	r4, r3, #27
    4282:	bmi.w	40bc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
    4286:	lsls	r0, r3, #31
    4288:	bmi.w	40bc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
  if (oflag & O_TRUNC) {
    428c:	tst.w	sl, #1024	; 0x400
    4290:	beq.n	42ba <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x3be>
    if (!(m_flags & FILE_FLAG_WRITE)) {
    4292:	ldrb.w	r3, [r5, #51]	; 0x33
    4296:	lsls	r1, r3, #30
    4298:	bpl.w	40bc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
  bool truncate(uint64_t length) { return seekSet(length) && truncate(); }
    429c:	movs	r2, #0
    429e:	movs	r3, #0
    42a0:	mov	r0, r5
    42a2:	bl	3e10 <ExFatFile::seekSet(unsigned long long)>
    42a6:	cmp	r0, #0
    42a8:	beq.w	40bc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
    42ac:	mov	r0, r5
    42ae:	bl	5058 <ExFatFile::truncate()>
    42b2:	cmp	r0, #0
    42b4:	beq.w	40bc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c0>
    42b8:	b.n	41e8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2ec>
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    42ba:	tst.w	sl, #16384	; 0x4000
    42be:	beq.n	41e8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2ec>
    42c0:	b.n	41d8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2dc>
    42c2:	nop

000042c4 <ExFatFile::open(ExFatFile*, char const*, int)>:
bool ExFatFile::open(ExFatFile* dirFile, const char* path, oflag_t oflag) {
    42c4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  ExFatFile() {}
    42c8:	movs	r5, #0
    42ca:	sub	sp, #92	; 0x5c
    42cc:	mov	r9, r3
  if (isOpen() || !dirFile->isDir()) {
    42ce:	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::open(ExFatFile* dirFile, const char* path, oflag_t oflag) {
    42d2:	str	r2, [sp, #4]
    42d4:	str	r5, [sp, #80]	; 0x50
  if (isOpen() || !dirFile->isDir()) {
    42d6:	cmp	r3, #0
    42d8:	bne.n	4358 <ExFatFile::open(ExFatFile*, char const*, int)+0x94>
    42da:	ldrb.w	r3, [r1, #49]	; 0x31
    42de:	mov	r7, r1
    42e0:	tst.w	r3, #80	; 0x50
    42e4:	beq.n	4358 <ExFatFile::open(ExFatFile*, char const*, int)+0x94>
  if (isDirSeparator(*path)) {
    42e6:	ldrb	r3, [r2, #0]
    42e8:	mov	r4, r0
    42ea:	mov	r6, r2
    42ec:	cmp	r3, #47	; 0x2f
    42ee:	beq.n	4360 <ExFatFile::open(ExFatFile*, char const*, int)+0x9c>
    if (!openPrivate(dirFile, &fname, O_RDONLY)) {
    42f0:	mov.w	r8, #0
    if (!parsePathName(path, &fname, &path)) {
    42f4:	add	r3, sp, #4
    42f6:	add	r2, sp, #12
    42f8:	mov	r1, r6
    42fa:	mov	r0, r4
    42fc:	bl	3ba4 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    4300:	cbz	r0, 4358 <ExFatFile::open(ExFatFile*, char const*, int)+0x94>
    if (*path == 0) {
    4302:	ldr	r6, [sp, #4]
    4304:	ldrb	r3, [r6, #0]
    4306:	cmp	r3, #0
    4308:	beq.n	4388 <ExFatFile::open(ExFatFile*, char const*, int)+0xc4>
    if (!openPrivate(dirFile, &fname, O_RDONLY)) {
    430a:	movs	r3, #0
    430c:	add	r2, sp, #12
    430e:	mov	r1, r7
    4310:	mov	r0, r4
    4312:	bl	3efc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    4316:	cbz	r0, 4358 <ExFatFile::open(ExFatFile*, char const*, int)+0x94>
    tmpDir = *this;
    4318:	mov	ip, r4
    431a:	add	r5, sp, #32
    431c:	add.w	r7, r4, #48	; 0x30
    4320:	ldr.w	r0, [ip]
    4324:	add.w	ip, ip, #16
    4328:	ldr.w	r1, [ip, #-12]
    432c:	mov	lr, r5
    432e:	ldr.w	r2, [ip, #-8]
    4332:	adds	r5, #16
    4334:	ldr.w	r3, [ip, #-4]
    4338:	cmp	ip, r7
    433a:	stmia.w	lr!, {r0, r1, r2, r3}
    433e:	bne.n	4320 <ExFatFile::open(ExFatFile*, char const*, int)+0x5c>
    4340:	ldr.w	r0, [ip]
    dirFile = &tmpDir;
    4344:	add	r7, sp, #32
    tmpDir = *this;
    4346:	str	r0, [r5, #0]
  bool rtn = sync();
    4348:	mov	r0, r4
    434a:	bl	4bf8 <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    434e:	strb.w	r8, [r4, #49]	; 0x31
  m_flags = 0;
    4352:	strb.w	r8, [r4, #51]	; 0x33
  return rtn;
    4356:	b.n	42f4 <ExFatFile::open(ExFatFile*, char const*, int)+0x30>
  return false;
    4358:	movs	r0, #0
}
    435a:	add	sp, #92	; 0x5c
    435c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    while (isDirSeparator(*path)) {
    4360:	ldrb.w	r1, [r6, #1]!
    4364:	cmp	r1, #47	; 0x2f
    4366:	beq.n	4360 <ExFatFile::open(ExFatFile*, char const*, int)+0x9c>
    4368:	str	r6, [sp, #4]
    if (*path == 0) {
    436a:	cbnz	r1, 439a <ExFatFile::open(ExFatFile*, char const*, int)+0xd6>
  memset(this, 0, sizeof(ExFatFile));
    436c:	movs	r2, #56	; 0x38
    436e:	mov	r0, r4
      return openRoot(dirFile->m_vol);
    4370:	ldr	r5, [r7, #32]
  memset(this, 0, sizeof(ExFatFile));
    4372:	bl	e044 <memset>
  m_flags = FILE_FLAG_READ;
    4376:	movs	r3, #1
  m_attributes = FILE_ATTR_ROOT;
    4378:	movs	r2, #64	; 0x40
  m_vol = vol;
    437a:	str	r5, [r4, #32]
      return openRoot(dirFile->m_vol);
    437c:	mov	r0, r3
  m_flags = FILE_FLAG_READ;
    437e:	strb.w	r3, [r4, #51]	; 0x33
  m_attributes = FILE_ATTR_ROOT;
    4382:	strb.w	r2, [r4, #49]	; 0x31
      return openRoot(dirFile->m_vol);
    4386:	b.n	435a <ExFatFile::open(ExFatFile*, char const*, int)+0x96>
  return openPrivate(dirFile, &fname, oflag);
    4388:	mov	r3, r9
    438a:	add	r2, sp, #12
    438c:	mov	r1, r7
    438e:	mov	r0, r4
    4390:	bl	3efc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
}
    4394:	add	sp, #92	; 0x5c
    4396:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  memset(this, 0, sizeof(ExFatFile));
    439a:	movs	r2, #56	; 0x38
    439c:	movs	r1, #0
    439e:	add	r0, sp, #32
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    43a0:	ldr	r5, [r7, #32]
  memset(this, 0, sizeof(ExFatFile));
    43a2:	bl	e044 <memset>
  m_flags = FILE_FLAG_READ;
    43a6:	movs	r3, #1
    dirFile = &tmpDir;
    43a8:	add	r7, sp, #32
  m_vol = vol;
    43aa:	str	r5, [sp, #64]	; 0x40
  m_flags = FILE_FLAG_READ;
    43ac:	strb.w	r3, [sp, #83]	; 0x53
  m_attributes = FILE_ATTR_ROOT;
    43b0:	movs	r3, #64	; 0x40
    43b2:	strb.w	r3, [sp, #81]	; 0x51
  return true;
    43b6:	b.n	42f0 <ExFatFile::open(ExFatFile*, char const*, int)+0x2c>

000043b8 <ExFatFile::open(ExFatVolume*, char const*, int)>:
  return vol && open(vol->vwd(), path, oflag);
    43b8:	cbz	r1, 43c2 <ExFatFile::open(ExFatVolume*, char const*, int)+0xa>
    43ba:	add.w	r1, r1, #1096	; 0x448
    43be:	b.w	42c4 <ExFatFile::open(ExFatFile*, char const*, int)>
}
    43c2:	mov	r0, r1
    43c4:	bx	lr
    43c6:	nop

000043c8 <ExFatFile::openNext(ExFatFile*, int)>:
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    43c8:	ldrb.w	r3, [r0, #49]	; 0x31
    43cc:	cbnz	r3, 43e8 <ExFatFile::openNext(ExFatFile*, int)+0x20>
    43ce:	ldrb.w	r3, [r1, #49]	; 0x31
    43d2:	tst.w	r3, #80	; 0x50
    43d6:	beq.n	43e8 <ExFatFile::openNext(ExFatFile*, int)+0x20>
    43d8:	ldr	r3, [r1, #0]
    43da:	ands.w	ip, r3, #31
    43de:	bne.n	43e8 <ExFatFile::openNext(ExFatFile*, int)+0x20>
  return openPrivate(dir, nullptr, oflag);
    43e0:	mov	r3, r2
    43e2:	mov	r2, ip
    43e4:	b.w	3efc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
}
    43e8:	movs	r0, #0
    43ea:	bx	lr

000043ec <ExFatPartition::bitmapFind(unsigned long, unsigned long)>:
#define DBG_FILE "ExFatPartition.cpp"
#include "../common/DebugMacros.h"
#include "ExFatLib.h"
//------------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
    43ec:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    43f0:	mov	r7, r0
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    43f2:	mov	sl, r1
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
    43f4:	mov	r9, r2
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    43f6:	cmp	r1, #0
    43f8:	beq.n	4480 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x94>
    43fa:	sub.w	r8, r1, #2
  if (start >= m_clusterCount) {
    43fe:	ldr.w	r3, [r7, #1072]	; 0x430
    4402:	cmp	r3, r8
    4404:	bls.n	448c <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xa0>
  uint32_t endAlloc = start;
  uint32_t bgnAlloc = start;
  uint16_t sectorSize = 1 << m_bytesPerSectorShift;
  size_t i = (start >> 3) & (sectorSize - 1);
  uint8_t* cache;
  uint8_t mask = 1 << (start & 7);
    4406:	and.w	r3, r8, #7
    440a:	movs	r5, #1
  size_t i = (start >> 3) & (sectorSize - 1);
    440c:	ubfx	fp, r8, #3, #9
  uint8_t mask = 1 << (start & 7);
    4410:	lsls	r5, r3
    4412:	uxtb	r5, r5
  uint32_t bgnAlloc = start;
    4414:	mov	r6, r8
  uint32_t endAlloc = start;
    4416:	mov	r4, r8
  while (true) {
    uint32_t sector =
    4418:	ldr.w	r1, [r7, #1068]	; 0x42c
    return m_bitmapCache.prepare(sector, option);
    441c:	movs	r2, #0
    441e:	mov	r0, r7
    4420:	add.w	r1, r1, r4, lsr #12
    4424:	bl	31ac <FsCache::prepare(unsigned long, unsigned char)>
        m_clusterHeapStartSector + (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCachePrepare(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
    4428:	cbz	r0, 4466 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x7a>
    442a:	add.w	fp, fp, #4294967295
    442e:	add	fp, r0
    4430:	addw	r0, r0, #511	; 0x1ff
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
    4434:	ldrb.w	r1, [fp, #1]!
    4438:	b.n	4450 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x64>
          if ((endAlloc - bgnAlloc) == count) {
    443a:	cmp	r2, r9
    443c:	beq.n	4496 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xaa>
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    443e:	cmp	r8, r4
    4440:	beq.n	4464 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x78>
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
    4442:	ldr.w	r5, [r7, #1072]	; 0x430
    4446:	cmp	r5, r4
    4448:	bls.n	4474 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x88>
      for (; mask; mask <<= 1) {
    444a:	ands.w	r5, r3, #255	; 0xff
    444e:	beq.n	446a <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x7e>
        endAlloc++;
    4450:	adds	r4, #1
        if (!(mask & cache[i])) {
    4452:	tst	r1, r5
      for (; mask; mask <<= 1) {
    4454:	mov.w	r3, r5, lsl #1
          if ((endAlloc - bgnAlloc) == count) {
    4458:	sub.w	r2, r4, r6
        if (!(mask & cache[i])) {
    445c:	beq.n	443a <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x4e>
        if (endAlloc == start) {
    445e:	cmp	r8, r4
        endAlloc++;
    4460:	mov	r6, r4
        if (endAlloc == start) {
    4462:	bne.n	4442 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x56>
          return 1;
    4464:	movs	r0, #1
      mask = 1;
    }
    i = 0;
  }
  return 0;
}
    4466:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for (; i < sectorSize; i++) {
    446a:	cmp	r0, fp
      mask = 1;
    446c:	mov.w	r5, #1
    for (; i < sectorSize; i++) {
    4470:	bne.n	4434 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x48>
    4472:	b.n	4478 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x8c>
          endAlloc = bgnAlloc = 0;
    4474:	movs	r6, #0
    4476:	mov	r4, r6
  uint32_t endAlloc = start;
    4478:	movs	r5, #1
    i = 0;
    447a:	mov.w	fp, #0
    447e:	b.n	4418 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x2c>
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    4480:	ldr.w	r8, [r0, #1056]	; 0x420
  if (start >= m_clusterCount) {
    4484:	ldr.w	r3, [r7, #1072]	; 0x430
    4488:	cmp	r3, r8
    448a:	bhi.n	4406 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x1a>
    448c:	mov.w	r8, #0
    4490:	movs	r5, #1
    start = 0;
    4492:	mov	fp, r8
    4494:	b.n	4414 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x28>
            if (cluster == 0 && count == 1) {
    4496:	cmp.w	sl, #0
    449a:	bne.n	44a6 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xba>
    449c:	cmp.w	r9, #1
              m_bitmapStart = bgnAlloc;
    44a0:	it	eq
    44a2:	streq.w	r6, [r7, #1056]	; 0x420
            return bgnAlloc + 2;
    44a6:	adds	r0, r6, #2
}
    44a8:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

000044ac <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>:
//------------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster, uint32_t count,
                                  bool value) {
    44ac:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    44b0:	mov	r8, r0
  uint32_t sector;
  uint32_t start = cluster - 2;
    44b2:	subs	r0, r1, #2
                                  bool value) {
    44b4:	mov	r5, r2
    44b6:	mov	r6, r3
  size_t i;
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    44b8:	adds	r3, r0, r2
    44ba:	ldr.w	r2, [r8, #1072]	; 0x430
    44be:	cmp	r3, r2
    44c0:	bhi.n	4532 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    44c2:	cbnz	r6, 4538 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x8c>
    if (start <= m_bitmapStart && m_bitmapStart < (start + count)) {
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    }
  } else {
    if (start < m_bitmapStart) {
    44c4:	ldr.w	r3, [r8, #1056]	; 0x420
    44c8:	cmp	r3, r0
      m_bitmapStart = start;
    44ca:	it	hi
    44cc:	strhi.w	r0, [r8, #1056]	; 0x420
    }
  }
  mask = 1 << (start & 7);
    44d0:	and.w	r3, r0, #7
    44d4:	movs	r4, #1
  sector = m_clusterHeapStartSector + (start >> (m_bytesPerSectorShift + 3));
    44d6:	ldr.w	r7, [r8, #1068]	; 0x42c
  i = (start >> 3) & m_sectorMask;
    44da:	ubfx	r9, r0, #3, #9
  mask = 1 << (start & 7);
    44de:	lsls	r4, r3
  sector = m_clusterHeapStartSector + (start >> (m_bytesPerSectorShift + 3));
    44e0:	add.w	r1, r7, r0, lsr #12
  mask = 1 << (start & 7);
    44e4:	uxtb	r4, r4
    44e6:	movs	r2, #1
    44e8:	mov	r0, r8
  while (true) {
    cache = bitmapCachePrepare(sector++, FsCache::CACHE_FOR_WRITE);
    44ea:	adds	r7, r1, r2
    44ec:	bl	31ac <FsCache::prepare(unsigned long, unsigned char)>
    if (!cache) {
    44f0:	cbz	r0, 4532 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
    44f2:	add.w	lr, r9, #4294967295
    44f6:	add	lr, r0
    44f8:	addw	r0, r0, #511	; 0x1ff
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
    44fc:	ldrb.w	ip, [lr, #1]!
    4500:	tst.w	ip, r4
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
    4504:	eor.w	ip, ip, r4
      for (; mask; mask <<= 1) {
    4508:	mov.w	r4, r4, lsl #1
        if (value == static_cast<bool>(cache[i] & mask)) {
    450c:	ite	ne
    450e:	movne	r2, #1
    4510:	moveq	r2, #0
    4512:	cmp	r2, r6
    4514:	beq.n	4532 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
        if (--count == 0) {
    4516:	subs	r5, #1
        cache[i] ^= mask;
    4518:	strb.w	ip, [lr]
        if (--count == 0) {
    451c:	beq.n	4550 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xa4>
      for (; mask; mask <<= 1) {
    451e:	ands.w	r4, r4, #255	; 0xff
    4522:	bne.n	4500 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x54>
    for (; i < m_bytesPerSector; i++) {
    4524:	cmp	r0, lr
          return true;
        }
      }
      mask = 1;
    }
    i = 0;
    4526:	mov	r9, r4
    4528:	mov.w	r4, #1
    for (; i < m_bytesPerSector; i++) {
    452c:	bne.n	44fc <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x50>
    cache = bitmapCachePrepare(sector++, FsCache::CACHE_FOR_WRITE);
    452e:	mov	r1, r7
    4530:	b.n	44e6 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x3a>
  }

fail:
  return false;
    4532:	movs	r0, #0
}
    4534:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (start <= m_bitmapStart && m_bitmapStart < (start + count)) {
    4538:	ldr.w	r1, [r8, #1056]	; 0x420
    453c:	cmp	r3, r1
    453e:	bls.n	44d0 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x24>
    4540:	cmp	r1, r0
    4542:	bcc.n	44d0 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x24>
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    4544:	cmp	r3, r2
    4546:	it	cs
    4548:	movcs	r3, #0
    454a:	str.w	r3, [r8, #1056]	; 0x420
    454e:	b.n	44d0 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x24>
          return true;
    4550:	movs	r0, #1
}
    4552:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4556:	nop

00004558 <ExFatPartition::chainSize(unsigned long)>:
//------------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
    4558:	push	{r3, r4, r5, r6, r7, lr}
int8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
  uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    455a:	ldr.w	r3, [r0, #1072]	; 0x430
    455e:	adds	r3, #1
    4560:	cmp	r3, r1
    4562:	bcs.n	4568 <ExFatPartition::chainSize(unsigned long)+0x10>
    if (status < 0) return 0;
    4564:	movs	r0, #0
}
    4566:	pop	{r3, r4, r5, r6, r7, pc}
    4568:	mov	r7, r0
    456a:	mov	r4, r1
    return m_dataCache.prepare(sector, option);
    456c:	add.w	r6, r0, #528	; 0x210
  uint32_t n = 0;
    4570:	movs	r5, #0
    4572:	b.n	4580 <ExFatPartition::chainSize(unsigned long)+0x28>
  if (cluster > (m_clusterCount + 1)) {
    4574:	ldr.w	r3, [r7, #1072]	; 0x430
    n++;
    4578:	adds	r5, #1
  if (cluster > (m_clusterCount + 1)) {
    457a:	adds	r3, #1
    457c:	cmp	r3, r4
    457e:	bcc.n	4564 <ExFatPartition::chainSize(unsigned long)+0xc>
    DBG_FAIL_MACRO;
    return -1;
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    4580:	ldr.w	r1, [r7, #1060]	; 0x424
    4584:	movs	r2, #0
    4586:	mov	r0, r6
    4588:	add.w	r1, r1, r4, lsr #7
    458c:	bl	31ac <FsCache::prepare(unsigned long, unsigned char)>

  cache = dataCachePrepare(sector, FsCache::CACHE_FOR_READ);
  if (!cache) {
    return -1;
  }
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    4590:	lsls	r4, r4, #2
  if (!cache) {
    4592:	cmp	r0, #0
    4594:	beq.n	4564 <ExFatPartition::chainSize(unsigned long)+0xc>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    4596:	ubfx	r4, r4, #0, #9
  return *reinterpret_cast<const uint32_t*>(src);
    459a:	ldr	r4, [r0, r4]
  if (next == EXFAT_EOC) {
    459c:	adds	r3, r4, #1
    459e:	bne.n	4574 <ExFatPartition::chainSize(unsigned long)+0x1c>
    n++;
    45a0:	adds	r0, r5, #1
}
    45a2:	pop	{r3, r4, r5, r6, r7, pc}

000045a4 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>:
uint8_t* ExFatPartition::dirCache(DirPos_t* pos, uint8_t options) {
    45a4:	push	{r3, r4, r5, lr}
    45a6:	mov	r4, r1
           ((cluster - 2) << m_sectorsPerClusterShift);
    45a8:	ldr	r3, [r1, #0]
    45aa:	ldrb.w	ip, [r0, #1093]	; 0x445
    return m_dataCache.prepare(sector, option);
    45ae:	add.w	r0, r0, #528	; 0x210
  sector += (m_clusterMask & pos->position) >> m_bytesPerSectorShift;
    45b2:	ldr.w	r1, [r0, #552]	; 0x228
           ((cluster - 2) << m_sectorsPerClusterShift);
    45b6:	subs	r3, #2
    45b8:	ldr	r5, [r4, #4]
    45ba:	lsl.w	r3, r3, ip
    45be:	ands	r1, r5
    45c0:	add.w	r3, r3, r1, lsr #9
    45c4:	ldr.w	r1, [r0, #540]	; 0x21c
    return m_dataCache.prepare(sector, option);
    45c8:	add	r1, r3
    45ca:	bl	31ac <FsCache::prepare(unsigned long, unsigned char)>
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
    45ce:	cbz	r0, 45d8 <ExFatPartition::dirCache(DirPos_t*, unsigned char)+0x34>
    45d0:	ldr	r3, [r4, #4]
    45d2:	ubfx	r3, r3, #0, #9
    45d6:	add	r0, r3
}
    45d8:	pop	{r3, r4, r5, pc}
    45da:	nop

000045dc <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>:
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    45dc:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    45e0:	mov	r4, r1
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    45e2:	ldr.w	r3, [r0, #1080]	; 0x438
    45e6:	ldr	r1, [r1, #4]
    45e8:	ands	r3, r1
  pos->position += offset;
    45ea:	add	r1, r2
    45ec:	str	r1, [r4, #4]
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    45ee:	add	r3, r2
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    45f0:	ldrb.w	r1, [r0, #1093]	; 0x445
    45f4:	add.w	r2, r1, #9
  tmp >>= bytesPerClusterShift();
    45f8:	uxtb	r2, r2
    45fa:	lsrs	r3, r2
  while (tmp--) {
    45fc:	cbz	r3, 464a <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x6e>
    45fe:	mov	r8, r0
    4600:	subs	r5, r3, #1
    return m_dataCache.prepare(sector, option);
    4602:	add.w	r9, r0, #528	; 0x210
    4606:	b.n	4614 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x38>
      pos->cluster++;
    4608:	ldr	r3, [r4, #0]
  while (tmp--) {
    460a:	subs	r5, #1
      pos->cluster++;
    460c:	add.w	r3, r3, #1
    4610:	str	r3, [r4, #0]
  while (tmp--) {
    4612:	bcc.n	464a <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x6e>
    if (pos->isContiguous) {
    4614:	ldrb	r6, [r4, #8]
    4616:	cmp	r6, #0
    4618:	bne.n	4608 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x2c>
  if (cluster > (m_clusterCount + 1)) {
    461a:	ldr.w	r3, [r8, #1072]	; 0x430
    461e:	mov	r2, r6
      status = fatGet(pos->cluster, &pos->cluster);
    4620:	ldr	r7, [r4, #0]
    4622:	mov	r0, r9
  if (cluster > (m_clusterCount + 1)) {
    4624:	adds	r3, #1
    4626:	cmp	r7, r3
    4628:	bhi.n	4650 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x74>
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    462a:	ldr.w	r1, [r8, #1060]	; 0x424
    462e:	add.w	r1, r1, r7, lsr #7
    4632:	bl	31ac <FsCache::prepare(unsigned long, unsigned char)>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    4636:	lsls	r7, r7, #2
  if (!cache) {
    4638:	cbz	r0, 4650 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x74>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    463a:	ubfx	r7, r7, #0, #9
    463e:	ldr	r3, [r0, r7]
  if (next == EXFAT_EOC) {
    4640:	adds	r2, r3, #1
    4642:	beq.n	4658 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x7c>
  while (tmp--) {
    4644:	subs	r5, #1
    return 0;
  }
  *value = next;
    4646:	str	r3, [r4, #0]
  while (tmp--) {
    4648:	bcs.n	4614 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x38>
  return 1;
    464a:	movs	r0, #1
}
    464c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return -1;
    4650:	mov.w	r0, #4294967295
}
    4654:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return 0;
    4658:	mov	r0, r6
}
    465a:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    465e:	nop

00004660 <ExFatPartition::fatGet(unsigned long, unsigned long*)>:
int8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    4660:	push	{r3, r4, r5, lr}
  if (cluster > (m_clusterCount + 1)) {
    4662:	ldr.w	r3, [r0, #1072]	; 0x430
    4666:	adds	r3, #1
    4668:	cmp	r3, r1
    466a:	bcs.n	4672 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x12>
    return -1;
    466c:	mov.w	r0, #4294967295
  return 1;
}
    4670:	pop	{r3, r4, r5, pc}
    4672:	mov	r4, r1
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    4674:	ldr.w	r1, [r0, #1060]	; 0x424
    4678:	mov	r5, r2
    467a:	add.w	r0, r0, #528	; 0x210
    467e:	movs	r2, #0
    4680:	add.w	r1, r1, r4, lsr #7
    4684:	bl	31ac <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    4688:	cmp	r0, #0
    468a:	beq.n	466c <ExFatPartition::fatGet(unsigned long, unsigned long*)+0xc>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    468c:	lsls	r4, r4, #2
    468e:	ubfx	r4, r4, #0, #9
    4692:	ldr	r3, [r0, r4]
  if (next == EXFAT_EOC) {
    4694:	adds	r2, r3, #1
    4696:	beq.n	469e <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x3e>
  return 1;
    4698:	movs	r0, #1
  *value = next;
    469a:	str	r3, [r5, #0]
}
    469c:	pop	{r3, r4, r5, pc}
    return 0;
    469e:	movs	r0, #0
}
    46a0:	pop	{r3, r4, r5, pc}
    46a2:	nop

000046a4 <ExFatPartition::fatPut(unsigned long, unsigned long)>:
//------------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    46a4:	cmp	r1, #1
    46a6:	bls.n	46e0 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x3c>
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
    46a8:	push	{r3, r4, r5, lr}
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    46aa:	ldr.w	r3, [r0, #1072]	; 0x430
    46ae:	mov	r4, r1
    46b0:	adds	r3, #1
    46b2:	cmp	r3, r1
    46b4:	bcs.n	46ba <ExFatPartition::fatPut(unsigned long, unsigned long)+0x16>
  }
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;

fail:
  return false;
    46b6:	movs	r0, #0
}
    46b8:	pop	{r3, r4, r5, pc}
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    46ba:	ldr.w	r1, [r0, #1060]	; 0x424
    46be:	mov	r5, r2
    46c0:	add.w	r0, r0, #528	; 0x210
    46c4:	movs	r2, #1
    46c6:	add.w	r1, r1, r4, lsr #7
    46ca:	bl	31ac <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    46ce:	mov	r3, r0
    46d0:	cmp	r0, #0
    46d2:	beq.n	46b6 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x12>
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
    46d4:	lsls	r4, r4, #2
  return true;
    46d6:	movs	r0, #1
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
    46d8:	ubfx	r4, r4, #0, #9
  *reinterpret_cast<uint32_t*>(dst) = src;
    46dc:	str	r5, [r3, r4]
}
    46de:	pop	{r3, r4, r5, pc}
  return false;
    46e0:	movs	r0, #0
}
    46e2:	bx	lr

000046e4 <ExFatPartition::freeChain(unsigned long)>:
  if (cluster > (m_clusterCount + 1)) {
    46e4:	ldr.w	r3, [r0, #1072]	; 0x430
    46e8:	adds	r3, #1
    46ea:	cmp	r1, r3
    46ec:	bls.n	46f2 <ExFatPartition::freeChain(unsigned long)+0xe>

  return true;

fail:
  return false;
}
    46ee:	movs	r0, #0
    46f0:	bx	lr
bool ExFatPartition::freeChain(uint32_t cluster) {
    46f2:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    46f6:	mov	r5, r0
    46f8:	sub	sp, #12
    46fa:	mov	r4, r1
    46fc:	add.w	r9, r0, #528	; 0x210
    4700:	mov	r7, r1
    4702:	mov.w	r8, #0
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    4706:	ldr.w	r1, [r5, #1060]	; 0x424
    470a:	movs	r2, #0
    470c:	mov	r0, r9
    470e:	mov.w	fp, r4, lsr #7
    4712:	add.w	r1, r1, r4, lsr #7
    4716:	bl	31ac <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    471a:	cbz	r0, 4742 <ExFatPartition::freeChain(unsigned long)+0x5e>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    471c:	lsls	r3, r4, #2
    471e:	ubfx	r3, r3, #0, #9
  return *reinterpret_cast<const uint32_t*>(src);
    4722:	ldr	r2, [r0, r3]
    4724:	str	r3, [sp, #4]
  if (next == EXFAT_EOC) {
    4726:	adds	r3, r2, #1
    4728:	itet	ne
    472a:	movne	r6, r2
    472c:	moveq.w	sl, #0
    4730:	movne.w	sl, #1
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    4734:	cmp	r4, #1
    4736:	bls.n	4742 <ExFatPartition::freeChain(unsigned long)+0x5e>
    4738:	ldr.w	r2, [r5, #1072]	; 0x430
    473c:	adds	r2, #1
    473e:	cmp	r4, r2
    4740:	bls.n	474a <ExFatPartition::freeChain(unsigned long)+0x66>
}
    4742:	movs	r0, #0
    4744:	add	sp, #12
    4746:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    474a:	ldr.w	r1, [r5, #1060]	; 0x424
    474e:	movs	r2, #1
    4750:	mov	r0, r9
    4752:	add	r1, fp
    4754:	bl	31ac <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    4758:	cmp	r0, #0
    475a:	beq.n	4742 <ExFatPartition::freeChain(unsigned long)+0x5e>
  *reinterpret_cast<uint32_t*>(dst) = src;
    475c:	ldr	r3, [sp, #4]
    475e:	str.w	r8, [r0, r3]
    if (status == 0 || (cluster + 1) != next) {
    4762:	cmp.w	sl, #0
    4766:	beq.n	478e <ExFatPartition::freeChain(unsigned long)+0xaa>
    4768:	adds	r4, #1
    476a:	cmp	r4, r6
    476c:	beq.n	4780 <ExFatPartition::freeChain(unsigned long)+0x9c>
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    476e:	movs	r3, #0
    4770:	subs	r2, r4, r7
    4772:	mov	r1, r7
    4774:	mov	r0, r5
    4776:	bl	44ac <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    477a:	cmp	r0, #0
    477c:	beq.n	4742 <ExFatPartition::freeChain(unsigned long)+0x5e>
    477e:	mov	r7, r6
  if (cluster > (m_clusterCount + 1)) {
    4780:	ldr.w	r3, [r5, #1072]	; 0x430
    4784:	adds	r3, #1
    4786:	cmp	r3, r6
    4788:	bcc.n	4742 <ExFatPartition::freeChain(unsigned long)+0x5e>
    478a:	mov	r4, r6
    478c:	b.n	4706 <ExFatPartition::freeChain(unsigned long)+0x22>
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    478e:	adds	r2, r4, #1
    4790:	mov	r3, sl
    4792:	mov	r1, r7
    4794:	mov	r0, r5
    4796:	subs	r2, r2, r7
}
    4798:	add	sp, #12
    479a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    479e:	b.w	44ac <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    47a2:	nop

000047a4 <ExFatPartition::freeClusterCount()>:
//------------------------------------------------------------------------------
int32_t ExFatPartition::freeClusterCount() {
    47a4:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t nc = 0;
  uint32_t sector = m_clusterHeapStartSector;
  uint32_t usedCount = 0;
    47a8:	movs	r5, #0
int32_t ExFatPartition::freeClusterCount() {
    47aa:	mov	r6, r0
  uint32_t sector = m_clusterHeapStartSector;
    47ac:	ldr.w	r1, [r0, #1068]	; 0x42c
    47b0:	add.w	r8, r0, #528	; 0x210
  uint32_t nc = 0;
    47b4:	mov	r4, r5
    47b6:	movs	r2, #0
    47b8:	mov	r0, r8
  uint8_t* cache;

  while (true) {
    cache = dataCachePrepare(sector++, FsCache::CACHE_FOR_READ);
    47ba:	adds	r7, r1, #1
    47bc:	bl	31ac <FsCache::prepare(unsigned long, unsigned char)>
    if (!cache) {
    47c0:	cbz	r0, 480e <ExFatPartition::freeClusterCount()+0x6a>
    47c2:	add.w	lr, r0, #4294967295
    47c6:	add.w	r9, r4, #4096	; 0x1000
            usedCount++;
          }
        }
      }
      nc += 8;
      if (nc >= m_clusterCount) {
    47ca:	ldr.w	r0, [r6, #1072]	; 0x430
    47ce:	b.n	47dc <ExFatPartition::freeClusterCount()+0x38>
      } else if (cache[i]) {
    47d0:	cbnz	r1, 47f2 <ExFatPartition::freeClusterCount()+0x4e>
      nc += 8;
    47d2:	adds	r4, #8
      if (nc >= m_clusterCount) {
    47d4:	cmp	r4, r0
    47d6:	bcs.n	47ec <ExFatPartition::freeClusterCount()+0x48>
    for (size_t i = 0; i < m_bytesPerSector; i++) {
    47d8:	cmp	r4, r9
    47da:	beq.n	480a <ExFatPartition::freeClusterCount()+0x66>
      if (cache[i] == 0XFF) {
    47dc:	ldrb.w	r1, [lr, #1]!
    47e0:	cmp	r1, #255	; 0xff
    47e2:	bne.n	47d0 <ExFatPartition::freeClusterCount()+0x2c>
      nc += 8;
    47e4:	adds	r4, #8
        usedCount += 8;
    47e6:	adds	r5, #8
      if (nc >= m_clusterCount) {
    47e8:	cmp	r4, r0
    47ea:	bcc.n	47d8 <ExFatPartition::freeClusterCount()+0x34>
        return m_clusterCount - usedCount;
    47ec:	subs	r0, r0, r5
      }
    }
  }
}
    47ee:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    47f2:	movs	r2, #8
        for (uint8_t mask = 1; mask; mask <<= 1) {
    47f4:	movs	r3, #1
          if ((mask & cache[i])) {
    47f6:	tst	r1, r3
        for (uint8_t mask = 1; mask; mask <<= 1) {
    47f8:	mov.w	ip, r3, lsl #1
            usedCount++;
    47fc:	it	ne
    47fe:	addne	r5, #1
        for (uint8_t mask = 1; mask; mask <<= 1) {
    4800:	subs	r2, #1
    4802:	uxtb.w	r3, ip
    4806:	bne.n	47f6 <ExFatPartition::freeClusterCount()+0x52>
    4808:	b.n	47d2 <ExFatPartition::freeClusterCount()+0x2e>
    cache = dataCachePrepare(sector++, FsCache::CACHE_FOR_READ);
    480a:	mov	r1, r7
    480c:	b.n	47b6 <ExFatPartition::freeClusterCount()+0x12>
      return -1;
    480e:	mov.w	r0, #4294967295
    4812:	b.n	47ee <ExFatPartition::freeClusterCount()+0x4a>

00004814 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)>:
//------------------------------------------------------------------------------
bool ExFatPartition::init(FsBlockDevice* dev, uint8_t part, uint32_t volStart) {
    4814:	push	{r3, r4, r5, r6, r7, lr}
  pbs_t* pbs;
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  m_fatType = 0;
    4816:	mov.w	ip, #0
  m_blockDev = dev;
  cacheInit(m_blockDev);
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    481a:	mov	r5, r2
    m_sector = 0XFFFFFFFF;
    481c:	mov.w	r2, #4294967295
bool ExFatPartition::init(FsBlockDevice* dev, uint8_t part, uint32_t volStart) {
    4820:	mov	r4, r0
  m_fatType = 0;
    4822:	strb.w	ip, [r0, #1092]	; 0x444
  m_blockDev = dev;
    4826:	str.w	r1, [r0, #1088]	; 0x440
    m_blockDev = blockDev;
    482a:	str	r1, [r0, #4]
    482c:	str.w	r1, [r0, #532]	; 0x214
    m_status = 0;
    4830:	strb.w	ip, [r0]
    4834:	strb.w	ip, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    4838:	str	r2, [r0, #8]
    483a:	str.w	r2, [r0, #536]	; 0x218
  if (part) {
    483e:	cbz	r5, 487a <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x66>
    if (part > 4) {
    4840:	cmp	r5, #4
    4842:	bls.n	4848 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x34>
  bitmapFind(0, 1);
  m_fatType = FAT_TYPE_EXFAT;
  return true;

fail:
  return false;
    4844:	movs	r0, #0
}
    4846:	pop	{r3, r4, r5, r6, r7, pc}
    4848:	add.w	r7, r0, #528	; 0x210
    484c:	mov	r2, ip
    484e:	mov	r1, ip
    4850:	mov	r0, r7
    4852:	bl	31ac <FsCache::prepare(unsigned long, unsigned char)>
    if (!mbr) {
    4856:	cmp	r0, #0
    4858:	beq.n	4844 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x30>
    MbrPart_t* mp = mbr->part + part - 1;
    485a:	mvn.w	r3, #4026531840	; 0xf0000000
    485e:	add.w	r0, r0, #446	; 0x1be
    4862:	add	r3, r5
    4864:	lsls	r1, r3, #4
    4866:	add.w	r3, r0, r3, lsl #4
    if (mp->type == 0 || (mp->boot != 0 && mp->boot != 0X80)) {
    486a:	ldrb	r2, [r3, #4]
    486c:	cmp	r2, #0
    486e:	beq.n	4844 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x30>
    4870:	ldrb	r2, [r0, r1]
    4872:	lsls	r2, r2, #25
    4874:	bne.n	4844 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x30>
  return *reinterpret_cast<const uint32_t*>(src);
    4876:	ldr	r6, [r3, #8]
    4878:	b.n	4880 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x6c>
    487a:	mov	r6, r3
    487c:	add.w	r7, r0, #528	; 0x210
    4880:	movs	r2, #0
    4882:	mov	r1, r6
    4884:	mov	r0, r7
    4886:	bl	31ac <FsCache::prepare(unsigned long, unsigned char)>
  if (!pbs) {
    488a:	mov	r5, r0
    488c:	cmp	r0, #0
    488e:	beq.n	4844 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x30>
  if (strncmp(pbs->oemName, "EXFAT", 5)) {
    4890:	movs	r2, #5
    4892:	ldr	r1, [pc, #104]	; (48fc <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0xe8>)
    4894:	adds	r0, #3
    4896:	bl	e0e8 <strncmp>
    489a:	cmp	r0, #0
    489c:	bne.n	4844 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x30>
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    489e:	ldrb.w	r3, [r5, #108]	; 0x6c
    48a2:	cmp	r3, #9
    48a4:	bne.n	4844 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x30>
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    48a6:	ldr	r3, [r5, #80]	; 0x50
  bitmapFind(0, 1);
    48a8:	mov	r1, r0
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    48aa:	add	r3, r6
    48ac:	str.w	r3, [r4, #1060]	; 0x424
    48b0:	ldr	r3, [r5, #84]	; 0x54
  m_fatLength = getLe32(bpb->fatLength);
    48b2:	str.w	r3, [r4, #1064]	; 0x428
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
    48b6:	ldr	r3, [r5, #88]	; 0x58
    48b8:	add	r3, r6
    48ba:	str.w	r3, [r4, #1068]	; 0x42c
    48be:	ldr	r3, [r5, #92]	; 0x5c
  m_clusterCount = getLe32(bpb->clusterCount);
    48c0:	str.w	r3, [r4, #1072]	; 0x430
    48c4:	ldr	r3, [r5, #96]	; 0x60
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
    48c6:	str.w	r3, [r4, #1076]	; 0x434
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    48ca:	ldrb.w	r2, [r5, #109]	; 0x6d
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    48ce:	movs	r5, #1
  m_bitmapStart = 0;
    48d0:	str.w	r0, [r4, #1056]	; 0x420
  bitmapFind(0, 1);
    48d4:	mov	r0, r4
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    48d6:	add.w	r3, r2, #9
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    48da:	strb.w	r2, [r4, #1093]	; 0x445
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    48de:	lsl.w	r3, r5, r3
  m_clusterMask = m_bytesPerCluster - 1;
    48e2:	subs	r2, r3, #1
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    48e4:	str.w	r3, [r4, #1084]	; 0x43c
  m_clusterMask = m_bytesPerCluster - 1;
    48e8:	str.w	r2, [r4, #1080]	; 0x438
  bitmapFind(0, 1);
    48ec:	mov	r2, r5
    48ee:	bl	43ec <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  m_fatType = FAT_TYPE_EXFAT;
    48f2:	movs	r3, #64	; 0x40
  return true;
    48f4:	mov	r0, r5
  m_fatType = FAT_TYPE_EXFAT;
    48f6:	strb.w	r3, [r4, #1092]	; 0x444
}
    48fa:	pop	{r3, r4, r5, r6, r7, pc}
    48fc:	.word	0x2000083c

00004900 <ExFatPartition::rootLength()>:
//------------------------------------------------------------------------------
uint32_t ExFatPartition::rootLength() {
    4900:	push	{r4, lr}
    4902:	mov	r4, r0
  uint32_t nc = chainSize(m_rootDirectoryCluster);
    4904:	ldr.w	r1, [r0, #1076]	; 0x434
    4908:	bl	4558 <ExFatPartition::chainSize(unsigned long)>
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    490c:	ldrb.w	r3, [r4, #1093]	; 0x445
    4910:	adds	r3, #9
  return nc << bytesPerClusterShift();
    4912:	uxtb	r3, r3
}
    4914:	lsls	r0, r3
    4916:	pop	{r4, pc}

00004918 <ExFatFile::addCluster()>:
  }
  return checksum;
}
//------------------------------------------------------------------------------
bool ExFatFile::addCluster() {
  uint32_t find = m_vol->bitmapFind(m_curCluster ? m_curCluster + 1 : 0, 1);
    4918:	ldr	r1, [r0, #24]
bool ExFatFile::addCluster() {
    491a:	push	{r3, r4, r5, r6, r7, lr}
    491c:	mov	r4, r0
  uint32_t find = m_vol->bitmapFind(m_curCluster ? m_curCluster + 1 : 0, 1);
    491e:	ldr	r0, [r0, #32]
    4920:	cbz	r1, 4924 <ExFatFile::addCluster()+0xc>
    4922:	adds	r1, #1
    4924:	movs	r2, #1
    4926:	bl	43ec <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  if (find < 2) {
    492a:	cmp	r0, #1
  uint32_t find = m_vol->bitmapFind(m_curCluster ? m_curCluster + 1 : 0, 1);
    492c:	mov	r5, r0
  if (find < 2) {
    492e:	bls.n	4996 <ExFatFile::addCluster()+0x7e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!m_vol->bitmapModify(find, 1, 1)) {
    4930:	movs	r3, #1
    4932:	mov	r1, r0
    4934:	ldr	r0, [r4, #32]
    4936:	mov	r2, r3
    4938:	bl	44ac <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    493c:	mov	r6, r0
    493e:	cbz	r0, 4996 <ExFatFile::addCluster()+0x7e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_curCluster == 0) {
    4940:	ldr	r3, [r4, #24]
    4942:	cbz	r3, 499c <ExFatFile::addCluster()+0x84>
  bool isContiguous() const { return m_flags & FILE_FLAG_CONTIGUOUS; }
    4944:	ldrb.w	r2, [r4, #51]	; 0x33
    m_flags |= FILE_FLAG_CONTIGUOUS;
    goto done;
  }
  if (isContiguous()) {
    4948:	lsls	r1, r2, #25
    494a:	bpl.n	4972 <ExFatFile::addCluster()+0x5a>
    if (find == (m_curCluster + 1)) {
    494c:	adds	r1, r3, #1
    494e:	cmp	r1, r5
    4950:	beq.n	4984 <ExFatFile::addCluster()+0x6c>
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    4952:	bic.w	r2, r2, #64	; 0x40

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    4956:	ldr	r1, [r4, #28]
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    4958:	strb.w	r2, [r4, #51]	; 0x33
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    495c:	b.n	496a <ExFatFile::addCluster()+0x52>
      if (!m_vol->fatPut(c, c + 1)) {
    495e:	ldr	r0, [r4, #32]
    4960:	bl	46a4 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    4964:	mov	r1, r7
      if (!m_vol->fatPut(c, c + 1)) {
    4966:	cbz	r0, 4996 <ExFatFile::addCluster()+0x7e>
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    4968:	ldr	r3, [r4, #24]
      if (!m_vol->fatPut(c, c + 1)) {
    496a:	adds	r7, r1, #1
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    496c:	cmp	r1, r3
      if (!m_vol->fatPut(c, c + 1)) {
    496e:	mov	r2, r7
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    4970:	bcc.n	495e <ExFatFile::addCluster()+0x46>
        goto fail;
      }
    }
  }
  // New cluster is EOC.
  if (!m_vol->fatPut(find, EXFAT_EOC)) {
    4972:	mov.w	r2, #4294967295
    4976:	mov	r1, r5
    4978:	ldr	r0, [r4, #32]
    497a:	bl	46a4 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    497e:	cbz	r0, 4996 <ExFatFile::addCluster()+0x7e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Connect new cluster to existing chain.
  if (m_curCluster) {
    4980:	ldr	r1, [r4, #24]
    4982:	cbnz	r1, 498a <ExFatFile::addCluster()+0x72>
  m_curCluster = find;
  return true;

fail:
  return false;
}
    4984:	mov	r0, r6
  m_curCluster = find;
    4986:	str	r5, [r4, #24]
}
    4988:	pop	{r3, r4, r5, r6, r7, pc}
    if (!m_vol->fatPut(m_curCluster, find)) {
    498a:	mov	r2, r5
    498c:	ldr	r0, [r4, #32]
    498e:	bl	46a4 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    4992:	cmp	r0, #0
    4994:	bne.n	4984 <ExFatFile::addCluster()+0x6c>
  return false;
    4996:	movs	r6, #0
}
    4998:	mov	r0, r6
    499a:	pop	{r3, r4, r5, r6, r7, pc}
    m_flags |= FILE_FLAG_CONTIGUOUS;
    499c:	ldrb.w	r3, [r4, #51]	; 0x33
    49a0:	orr.w	r3, r3, #64	; 0x40
    49a4:	strb.w	r3, [r4, #51]	; 0x33
    goto done;
    49a8:	b.n	4984 <ExFatFile::addCluster()+0x6c>
    49aa:	nop

000049ac <ExFatFile::remove()>:
  bool isWritable() const { return m_flags & FILE_FLAG_WRITE; }
    49ac:	ldrb.w	r3, [r0, #51]	; 0x33
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
  uint8_t* cache;
  if (!isWritable()) {
    49b0:	lsls	r2, r3, #30
    49b2:	bpl.n	4a22 <ExFatFile::remove()+0x76>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster) {
    49b4:	ldr	r1, [r0, #28]
bool ExFatFile::remove() {
    49b6:	push	{r4, r5, r6, lr}
    49b8:	mov	r5, r0
  if (m_firstCluster) {
    49ba:	cbnz	r1, 49e6 <ExFatFile::remove()+0x3a>
bool ExFatFile::remove() {
    49bc:	movs	r4, #0
    49be:	mov	r1, r4
    49c0:	b.n	49d2 <ExFatFile::remove()+0x26>
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Mark entry not used.
    cache[0] &= 0x7F;
    49c2:	ldrb	r3, [r0, #0]
    49c4:	and.w	r3, r3, #127	; 0x7f
    49c8:	strb	r3, [r0, #0]
  for (uint8_t is = 0; is <= m_setCount; is++) {
    49ca:	ldrb.w	r3, [r5, #48]	; 0x30
    49ce:	cmp	r3, r1
    49d0:	bcc.n	4a26 <ExFatFile::remove()+0x7a>
    49d2:	adds	r4, #1
    cache = dirCache(is, FsCache::CACHE_FOR_WRITE);
    49d4:	movs	r2, #1
    49d6:	mov	r0, r5
    49d8:	bl	3ae4 <ExFatFile::dirCache(unsigned char, unsigned char)>
  for (uint8_t is = 0; is <= m_setCount; is++) {
    49dc:	uxtb	r1, r4
    if (!cache) {
    49de:	cmp	r0, #0
    49e0:	bne.n	49c2 <ExFatFile::remove()+0x16>
  // Write entry to device.
  return m_vol->cacheSync();

fail:
  return false;
}
    49e2:	movs	r0, #0
    49e4:	pop	{r4, r5, r6, pc}
    if (isContiguous()) {
    49e6:	lsls	r3, r3, #25
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    49e8:	ldr	r0, [r0, #32]
    if (isContiguous()) {
    49ea:	bpl.n	4a56 <ExFatFile::remove()+0xaa>
    49ec:	ldrb.w	r3, [r0, #1093]	; 0x445
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    49f0:	ldrd	r2, r4, [r5, #8]
    49f4:	adds	r3, #9
    49f6:	subs	r2, #1
    49f8:	uxtb	r3, r3
    49fa:	adc.w	r4, r4, #4294967295
    49fe:	rsb	ip, r3, #32
    4a02:	lsrs	r2, r3
    4a04:	subs	r3, #32
    4a06:	lsl.w	ip, r4, ip
    4a0a:	lsr.w	r3, r4, r3
    4a0e:	orr.w	r2, r2, ip
    4a12:	orrs	r2, r3
      if (!m_vol->bitmapModify(m_firstCluster, nc, 0)) {
    4a14:	movs	r3, #0
    4a16:	adds	r2, #1
    4a18:	bl	44ac <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    4a1c:	cmp	r0, #0
    4a1e:	bne.n	49bc <ExFatFile::remove()+0x10>
    4a20:	b.n	49e2 <ExFatFile::remove()+0x36>
}
    4a22:	movs	r0, #0
    4a24:	bx	lr
  m_attributes = FILE_ATTR_CLOSED;
    4a26:	movs	r3, #0
  return m_vol->cacheSync();
    4a28:	ldr	r4, [r5, #32]
  m_attributes = FILE_ATTR_CLOSED;
    4a2a:	strb.w	r3, [r5, #49]	; 0x31
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    4a2e:	mov	r0, r4
  m_flags = 0;
    4a30:	strb.w	r3, [r5, #51]	; 0x33
    4a34:	bl	3154 <FsCache::sync()>
    4a38:	cmp	r0, #0
    4a3a:	beq.n	49e2 <ExFatFile::remove()+0x36>
    4a3c:	add.w	r0, r4, #528	; 0x210
    4a40:	bl	3154 <FsCache::sync()>
    4a44:	cmp	r0, #0
    4a46:	beq.n	49e2 <ExFatFile::remove()+0x36>
    4a48:	ldr.w	r0, [r4, #1088]	; 0x440
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() const { return m_sectorMask; }
  bool syncDevice() { return m_blockDev->syncDevice(); }
    4a4c:	ldr	r3, [r0, #0]
}
    4a4e:	ldmia.w	sp!, {r4, r5, r6, lr}
    4a52:	ldr	r3, [r3, #28]
    4a54:	bx	r3
      if (!m_vol->freeChain(m_firstCluster)) {
    4a56:	bl	46e4 <ExFatPartition::freeChain(unsigned long)>
    4a5a:	cmp	r0, #0
    4a5c:	bne.n	49bc <ExFatFile::remove()+0x10>
    4a5e:	b.n	49e2 <ExFatFile::remove()+0x36>

00004a60 <ExFatFile::rmdir()>:
//------------------------------------------------------------------------------
bool ExFatFile::rmdir() {
  int n;
  uint8_t dir[FS_DIR_SIZE];
  // must be open subdirectory
  if (!isSubDir()) {
    4a60:	ldrb.w	r3, [r0, #49]	; 0x31
    4a64:	lsls	r3, r3, #27
    4a66:	bmi.n	4a6c <ExFatFile::rmdir()+0xc>
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
  return remove();

fail:
  return false;
    4a68:	movs	r0, #0
}
    4a6a:	bx	lr
bool ExFatFile::rmdir() {
    4a6c:	push	{r4, lr}
  void rewind() { seekSet(0); }
    4a6e:	movs	r2, #0
    4a70:	sub	sp, #32
    4a72:	movs	r3, #0
    4a74:	mov	r4, r0
    4a76:	bl	3e10 <ExFatFile::seekSet(unsigned long long)>
    4a7a:	b.n	4a8e <ExFatFile::rmdir()+0x2e>
    if (n != FS_DIR_SIZE || dir[0] & 0X80) {
    4a7c:	cmp	r0, #32
    4a7e:	bne.n	4ab8 <ExFatFile::rmdir()+0x58>
    4a80:	ldrsb.w	r3, [sp]
    4a84:	ldrb.w	r2, [sp]
    4a88:	cmp	r3, #0
    4a8a:	blt.n	4ab8 <ExFatFile::rmdir()+0x58>
    if (dir[0] == 0) {
    4a8c:	cbz	r2, 4a9c <ExFatFile::rmdir()+0x3c>
    n = read(dir, FS_DIR_SIZE);
    4a8e:	movs	r2, #32
    4a90:	mov	r1, sp
    4a92:	mov	r0, r4
    4a94:	bl	3c44 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    4a98:	cmp	r0, #0
    4a9a:	bne.n	4a7c <ExFatFile::rmdir()+0x1c>
  m_flags |= FILE_FLAG_WRITE;
    4a9c:	ldrb.w	r3, [r4, #51]	; 0x33
  m_attributes = FILE_ATTR_FILE;
    4aa0:	movs	r2, #8
  return remove();
    4aa2:	mov	r0, r4
  m_flags |= FILE_FLAG_WRITE;
    4aa4:	orr.w	r3, r3, #2
  m_attributes = FILE_ATTR_FILE;
    4aa8:	strb.w	r2, [r4, #49]	; 0x31
  m_flags |= FILE_FLAG_WRITE;
    4aac:	strb.w	r3, [r4, #51]	; 0x33
  return remove();
    4ab0:	bl	49ac <ExFatFile::remove()>
}
    4ab4:	add	sp, #32
    4ab6:	pop	{r4, pc}
  return false;
    4ab8:	movs	r0, #0
}
    4aba:	add	sp, #32
    4abc:	pop	{r4, pc}
    4abe:	nop

00004ac0 <ExFatFile::syncDir()>:
fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    4ac0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4ac4:	mov.w	r8, #0
    4ac8:	sub	sp, #8
    }
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setLe16(df->attributes, m_attributes & FS_ATTRIB_COPY);
        if (FsDateTime::callback) {
    4aca:	ldr	r7, [pc, #296]	; (4bf4 <ExFatFile::syncDir()+0x134>)
bool ExFatFile::syncDir() {
    4acc:	mov	r6, r0
  uint16_t checksum = 0;
    4ace:	mov	r4, r8
    4ad0:	mov	r1, r8
    cache = dirCache(is, FsCache::CACHE_FOR_READ);
    4ad2:	movs	r2, #0
    4ad4:	mov	r0, r6
    4ad6:	bl	3ae4 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache) {
    4ada:	mov	r5, r0
    4adc:	cbz	r0, 4aec <ExFatFile::syncDir()+0x2c>
    switch (cache[0]) {
    4ade:	ldrb	r1, [r0, #0]
    4ae0:	cmp	r1, #192	; 0xc0
    4ae2:	beq.n	4bb8 <ExFatFile::syncDir()+0xf8>
    4ae4:	cmp	r1, #193	; 0xc1
    4ae6:	beq.n	4b40 <ExFatFile::syncDir()+0x80>
    4ae8:	cmp	r1, #133	; 0x85
    4aea:	beq.n	4b00 <ExFatFile::syncDir()+0x40>
    goto fail;
  }
  return true;

fail:
  m_error |= WRITE_ERROR;
    4aec:	ldrb.w	r3, [r6, #50]	; 0x32
  return false;
    4af0:	movs	r0, #0
  m_error |= WRITE_ERROR;
    4af2:	orr.w	r3, r3, #1
    4af6:	strb.w	r3, [r6, #50]	; 0x32
}
    4afa:	add	sp, #8
    4afc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        setLe16(df->attributes, m_attributes & FS_ATTRIB_COPY);
    4b00:	ldrb.w	r3, [r6, #49]	; 0x31
    4b04:	and.w	r3, r3, #55	; 0x37
    4b08:	strh	r3, [r0, #4]
        if (FsDateTime::callback) {
    4b0a:	ldr	r3, [r7, #0]
    4b0c:	cbz	r3, 4b30 <ExFatFile::syncDir()+0x70>
          FsDateTime::callback(&date, &time, &ms10);
    4b0e:	add.w	r2, sp, #3
    4b12:	add.w	r1, sp, #6
    4b16:	add	r0, sp, #4
    4b18:	blx	r3
          setLe16(df->modifyTime, time);
    4b1a:	ldrh.w	r3, [sp, #6]
  *reinterpret_cast<uint16_t*>(dst) = src;
    4b1e:	strh	r3, [r5, #12]
    4b20:	strh	r3, [r5, #16]
          setLe16(df->modifyDate, date);
    4b22:	ldrh.w	r3, [sp, #4]
    4b26:	strh	r3, [r5, #14]
    4b28:	strh	r3, [r5, #18]
          df->modifyTimeMs = ms10;
    4b2a:	ldrb.w	r3, [sp, #3]
    4b2e:	strb	r3, [r5, #21]
        m_vol->dataCacheDirty();
    4b30:	ldr	r2, [r6, #32]
  void dirty() { m_status |= CACHE_STATUS_DIRTY; }
    4b32:	ldrb.w	r3, [r2, #528]	; 0x210
    4b36:	orr.w	r3, r3, #1
    4b3a:	strb.w	r3, [r2, #528]	; 0x210
  bool skip = data[0] == EXFAT_TYPE_FILE;
    4b3e:	ldrb	r1, [r5, #0]
    4b40:	sub.w	r0, r1, #133	; 0x85
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    4b44:	movs	r2, #0
  bool skip = data[0] == EXFAT_TYPE_FILE;
    4b46:	clz	r0, r0
    4b4a:	lsrs	r0, r0, #5
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    4b4c:	b.n	4b52 <ExFatFile::syncDir()+0x92>
    4b4e:	movs	r2, #4
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    4b50:	ldrb	r1, [r5, r2]
    4b52:	lsls	r3, r4, #15
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    4b54:	cmp	r2, #1
    4b56:	add.w	r2, r2, #1
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    4b5a:	orr.w	r3, r3, r4, lsr #1
    4b5e:	uxtah	r3, r1, r3
    4b62:	uxth	r4, r3
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    4b64:	bne.n	4b6a <ExFatFile::syncDir()+0xaa>
    4b66:	cmp	r0, #0
    4b68:	bne.n	4b4e <ExFatFile::syncDir()+0x8e>
    4b6a:	cmp	r2, #31
    4b6c:	bls.n	4b50 <ExFatFile::syncDir()+0x90>
  for (uint8_t is = 0; is <= m_setCount; is++) {
    4b6e:	add.w	r8, r8, #1
    4b72:	ldrb.w	r3, [r6, #48]	; 0x30
    4b76:	uxtb.w	r1, r8
    4b7a:	cmp	r3, r1
    4b7c:	bcs.n	4ad2 <ExFatFile::syncDir()+0x12>
      m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_WRITE));
    4b7e:	movs	r2, #1
    4b80:	add.w	r1, r6, #36	; 0x24
    4b84:	ldr	r0, [r6, #32]
    4b86:	bl	45a4 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    4b8a:	cmp	r0, #0
    4b8c:	beq.n	4aec <ExFatFile::syncDir()+0x2c>
  if (!m_vol->cacheSync()) {
    4b8e:	ldr	r5, [r6, #32]
    4b90:	strh	r4, [r0, #2]
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    4b92:	mov	r0, r5
    4b94:	bl	3154 <FsCache::sync()>
    4b98:	cmp	r0, #0
    4b9a:	beq.n	4aec <ExFatFile::syncDir()+0x2c>
    4b9c:	add.w	r0, r5, #528	; 0x210
    4ba0:	bl	3154 <FsCache::sync()>
    4ba4:	cmp	r0, #0
    4ba6:	beq.n	4aec <ExFatFile::syncDir()+0x2c>
    4ba8:	ldr.w	r0, [r5, #1088]	; 0x440
  bool syncDevice() { return m_blockDev->syncDevice(); }
    4bac:	ldr	r3, [r0, #0]
    4bae:	ldr	r3, [r3, #28]
    4bb0:	blx	r3
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    4bb2:	cmp	r0, #0
    4bb4:	bne.n	4afa <ExFatFile::syncDir()+0x3a>
    4bb6:	b.n	4aec <ExFatFile::syncDir()+0x2c>
        if (isContiguous()) {
    4bb8:	ldrb.w	r3, [r6, #51]	; 0x33
    4bbc:	tst.w	r3, #64	; 0x40
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
    4bc0:	ldrb	r3, [r0, #1]
    4bc2:	ite	ne
    4bc4:	orrne.w	r3, r3, #2
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
    4bc8:	andeq.w	r3, r3, #253	; 0xfd
    4bcc:	strb	r3, [r0, #1]
        setLe64(ds->validLength, m_validLength);
    4bce:	ldrd	r0, r1, [r6, #16]
        m_vol->dataCacheDirty();
    4bd2:	ldrd	r3, r2, [r6, #28]
  *reinterpret_cast<uint64_t*>(dst) = src;
    4bd6:	strd	r0, r1, [r5, #8]
        setLe64(ds->dataLength, m_dataLength);
    4bda:	ldrd	r0, r1, [r6, #8]
  *reinterpret_cast<uint32_t*>(dst) = src;
    4bde:	str	r3, [r5, #20]
  *reinterpret_cast<uint64_t*>(dst) = src;
    4be0:	strd	r0, r1, [r5, #24]
    4be4:	ldrb.w	r3, [r2, #528]	; 0x210
    4be8:	orr.w	r3, r3, #1
    4bec:	strb.w	r3, [r2, #528]	; 0x210
  bool skip = data[0] == EXFAT_TYPE_FILE;
    4bf0:	ldrb	r1, [r5, #0]
  void dataCacheDirty() { m_dataCache.dirty(); }
    4bf2:	b.n	4b40 <ExFatFile::syncDir()+0x80>
    4bf4:	.word	0x20006404

00004bf8 <ExFatFile::sync()>:
bool ExFatFile::sync() {
    4bf8:	push	{r3, r4, r5, lr}
  if (!isOpen()) {
    4bfa:	ldrb.w	r3, [r0, #49]	; 0x31
    4bfe:	cbz	r3, 4c52 <ExFatFile::sync()+0x5a>
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    4c00:	ldrsb.w	r2, [r0, #51]	; 0x33
    4c04:	mov	r4, r0
    4c06:	ldrb.w	r3, [r0, #51]	; 0x33
    4c0a:	cmp	r2, #0
    4c0c:	blt.n	4c28 <ExFatFile::sync()+0x30>
  if (!m_vol->cacheSync()) {
    4c0e:	ldr	r5, [r0, #32]
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    4c10:	mov	r0, r5
    4c12:	bl	3154 <FsCache::sync()>
    4c16:	cbnz	r0, 4c38 <ExFatFile::sync()+0x40>
  m_error |= WRITE_ERROR;
    4c18:	ldrb.w	r3, [r4, #50]	; 0x32
  return false;
    4c1c:	movs	r0, #0
  m_error |= WRITE_ERROR;
    4c1e:	orr.w	r3, r3, #1
    4c22:	strb.w	r3, [r4, #50]	; 0x32
}
    4c26:	pop	{r3, r4, r5, pc}
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    4c28:	and.w	r3, r3, #127	; 0x7f
    4c2c:	strb.w	r3, [r0, #51]	; 0x33
}
    4c30:	ldmia.w	sp!, {r3, r4, r5, lr}
    return syncDir();
    4c34:	b.w	4ac0 <ExFatFile::syncDir()>
    4c38:	add.w	r0, r5, #528	; 0x210
    4c3c:	bl	3154 <FsCache::sync()>
    4c40:	cmp	r0, #0
    4c42:	beq.n	4c18 <ExFatFile::sync()+0x20>
    4c44:	ldr.w	r0, [r5, #1088]	; 0x440
  bool syncDevice() { return m_blockDev->syncDevice(); }
    4c48:	ldr	r3, [r0, #0]
    4c4a:	ldr	r3, [r3, #28]
    4c4c:	blx	r3
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    4c4e:	cmp	r0, #0
    4c50:	beq.n	4c18 <ExFatFile::sync()+0x20>
    return true;
    4c52:	movs	r0, #1
}
    4c54:	pop	{r3, r4, r5, pc}
    4c56:	nop

00004c58 <ExFatFile::addDirCluster()>:
bool ExFatFile::addDirCluster() {
    4c58:	push	{r4, r5, r6, lr}
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    4c5a:	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::addDirCluster() {
    4c5e:	mov	r5, r0
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    4c60:	lsls	r2, r3, #25
    4c62:	bmi.n	4cfe <ExFatFile::addDirCluster()+0xa6>
    4c64:	ldr	r0, [r0, #8]
  uint32_t bytesPerCluster() const { return m_bytesPerCluster; }
    4c66:	ldr	r3, [r5, #32]
  dl += m_vol->bytesPerCluster();
    4c68:	ldr.w	r3, [r3, #1084]	; 0x43c
    4c6c:	add	r0, r3
  if (dl >= 0X4000000) {
    4c6e:	cmp.w	r0, #67108864	; 0x4000000
    4c72:	bcc.n	4c78 <ExFatFile::addDirCluster()+0x20>
}
    4c74:	movs	r0, #0
    4c76:	pop	{r4, r5, r6, pc}
  if (!addCluster()) {
    4c78:	mov	r0, r5
    4c7a:	bl	4918 <ExFatFile::addCluster()>
    4c7e:	cmp	r0, #0
    4c80:	beq.n	4c74 <ExFatFile::addDirCluster()+0x1c>
  sector = m_vol->clusterStartSector(m_curCluster);
    4c82:	ldr	r0, [r5, #32]
  for (uint32_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    4c84:	movs	r4, #0
           ((cluster - 2) << m_sectorsPerClusterShift);
    4c86:	ldr	r6, [r5, #24]
    4c88:	ldrb.w	r3, [r0, #1093]	; 0x445
    4c8c:	subs	r6, #2
    4c8e:	lsls	r6, r3
    4c90:	ldr.w	r3, [r0, #1068]	; 0x42c
    4c94:	add	r6, r3
    return m_dataCache.prepare(sector, option);
    4c96:	adds	r1, r6, r4
    4c98:	movs	r2, #5
    4c9a:	add.w	r0, r0, #528	; 0x210
    4c9e:	adds	r4, #1
    4ca0:	bl	31ac <FsCache::prepare(unsigned long, unsigned char)>
    memset(cache, 0, m_vol->bytesPerSector());
    4ca4:	mov.w	r2, #512	; 0x200
    4ca8:	movs	r1, #0
    if (!cache) {
    4caa:	cmp	r0, #0
    4cac:	beq.n	4c74 <ExFatFile::addDirCluster()+0x1c>
    memset(cache, 0, m_vol->bytesPerSector());
    4cae:	bl	e044 <memset>
  for (uint32_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    4cb2:	ldr	r0, [r5, #32]
  uint32_t sectorsPerCluster() const { return 1UL << m_sectorsPerClusterShift; }
    4cb4:	movs	r3, #1
    4cb6:	ldrb.w	r2, [r0, #1093]	; 0x445
    4cba:	lsls	r3, r2
    4cbc:	cmp	r4, r3
    4cbe:	bcc.n	4c96 <ExFatFile::addDirCluster()+0x3e>
  if (!isRoot()) {
    4cc0:	ldrb.w	r3, [r5, #49]	; 0x31
    4cc4:	lsls	r3, r3, #25
    4cc6:	bmi.n	4cf4 <ExFatFile::addDirCluster()+0x9c>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    4cc8:	ldrb.w	r2, [r5, #51]	; 0x33
    4ccc:	orn	r2, r2, #127	; 0x7f
    m_dataLength += m_vol->bytesPerCluster();
    4cd0:	ldrd	r3, r1, [r5, #8]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    4cd4:	strb.w	r2, [r5, #51]	; 0x33
    m_dataLength += m_vol->bytesPerCluster();
    4cd8:	ldr.w	r2, [r0, #1084]	; 0x43c
    4cdc:	adds	r3, r3, r2
    4cde:	adc.w	r0, r1, #0
    4ce2:	str	r3, [r5, #8]
    m_validLength += m_vol->bytesPerCluster();
    4ce4:	ldrd	r3, r1, [r5, #16]
    m_dataLength += m_vol->bytesPerCluster();
    4ce8:	str	r0, [r5, #12]
    m_validLength += m_vol->bytesPerCluster();
    4cea:	adds	r3, r3, r2
    4cec:	adc.w	r1, r1, #0
    4cf0:	strd	r3, r1, [r5, #16]
  return sync();
    4cf4:	mov	r0, r5
}
    4cf6:	ldmia.w	sp!, {r4, r5, r6, lr}
  return sync();
    4cfa:	b.w	4bf8 <ExFatFile::sync()>
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    4cfe:	ldr	r0, [r0, #32]
    4d00:	bl	4900 <ExFatPartition::rootLength()>
    4d04:	b.n	4c66 <ExFatFile::addDirCluster()+0xe>
    4d06:	nop

00004d08 <ExFatFile::rename(ExFatFile*, char const*)>:
bool ExFatFile::rename(ExFatFile* dirFile, const char* newPath) {
    4d08:	push	{r4, r5, r6, lr}
    4d0a:	mov	r4, r0
  if (!(isFile() || isSubDir())) {
    4d0c:	ldrb.w	r0, [r0, #49]	; 0x31
bool ExFatFile::rename(ExFatFile* dirFile, const char* newPath) {
    4d10:	sub	sp, #112	; 0x70
  ExFatFile() {}
    4d12:	movs	r3, #0
  if (!(isFile() || isSubDir())) {
    4d14:	tst.w	r0, #24
    4d18:	str	r3, [sp, #48]	; 0x30
    4d1a:	str	r3, [sp, #104]	; 0x68
    4d1c:	beq.n	4d26 <ExFatFile::rename(ExFatFile*, char const*)+0x1e>
  if (m_vol != dirFile->m_vol) {
    4d1e:	ldr	r0, [r4, #32]
    4d20:	ldr	r3, [r1, #32]
    4d22:	cmp	r0, r3
    4d24:	beq.n	4d2c <ExFatFile::rename(ExFatFile*, char const*)+0x24>
  return false;
    4d26:	movs	r0, #0
}
    4d28:	add	sp, #112	; 0x70
    4d2a:	pop	{r4, r5, r6, pc}
  if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    4d2c:	movw	r3, #2561	; 0xa01
    4d30:	mov	r0, sp
    4d32:	bl	42c4 <ExFatFile::open(ExFatFile*, char const*, int)>
    4d36:	cmp	r0, #0
    4d38:	beq.n	4d26 <ExFatFile::rename(ExFatFile*, char const*)+0x1e>
  oldFile = *this;
    4d3a:	mov	ip, r4
    4d3c:	add.w	r6, r4, #48	; 0x30
    4d40:	add	r5, sp, #56	; 0x38
    4d42:	ldr.w	r0, [ip]
    4d46:	add.w	ip, ip, #16
    4d4a:	ldr.w	r1, [ip, #-12]
    4d4e:	mov	lr, r5
    4d50:	ldr.w	r2, [ip, #-8]
    4d54:	adds	r5, #16
    4d56:	ldr.w	r3, [ip, #-4]
    4d5a:	cmp	ip, r6
    4d5c:	stmia.w	lr!, {r0, r1, r2, r3}
    4d60:	bne.n	4d42 <ExFatFile::rename(ExFatFile*, char const*)+0x3a>
    4d62:	ldr.w	r0, [ip]
  m_dirPos = file.m_dirPos;
    4d66:	add	r2, sp, #36	; 0x24
    4d68:	add.w	r3, r4, #36	; 0x24
  oldFile = *this;
    4d6c:	str	r0, [r5, #0]
  m_setCount = file.m_setCount;
    4d6e:	ldrb.w	r5, [sp, #48]	; 0x30
  m_dirPos = file.m_dirPos;
    4d72:	ldmia	r2, {r0, r1, r2}
    4d74:	stmia.w	r3, {r0, r1, r2}
  m_flags |= FILE_FLAG_DIR_DIRTY;
    4d78:	ldrb.w	r3, [r4, #51]	; 0x33
  if (!sync()) {
    4d7c:	mov	r0, r4
  m_setCount = file.m_setCount;
    4d7e:	strb.w	r5, [r4, #48]	; 0x30
  m_flags |= FILE_FLAG_DIR_DIRTY;
    4d82:	orn	r3, r3, #127	; 0x7f
    4d86:	strb.w	r3, [r4, #51]	; 0x33
  if (!sync()) {
    4d8a:	bl	4bf8 <ExFatFile::sync()>
    4d8e:	cmp	r0, #0
    4d90:	beq.n	4d26 <ExFatFile::rename(ExFatFile*, char const*)+0x1e>
  oldFile.m_firstCluster = 0;
    4d92:	movs	r1, #0
  oldFile.m_flags = FILE_FLAG_WRITE;
    4d94:	movs	r2, #2
  oldFile.m_attributes = FILE_ATTR_FILE;
    4d96:	movs	r3, #8
  return oldFile.remove();
    4d98:	add	r0, sp, #56	; 0x38
  oldFile.m_firstCluster = 0;
    4d9a:	str	r1, [sp, #84]	; 0x54
  oldFile.m_flags = FILE_FLAG_WRITE;
    4d9c:	strb.w	r2, [sp, #107]	; 0x6b
  oldFile.m_attributes = FILE_ATTR_FILE;
    4da0:	strb.w	r3, [sp, #105]	; 0x69
  return oldFile.remove();
    4da4:	bl	49ac <ExFatFile::remove()>
    4da8:	b.n	4d28 <ExFatFile::rename(ExFatFile*, char const*)+0x20>
    4daa:	nop

00004dac <ExFatFile::mkdir(ExFatFile*, ExName_t*)>:
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
    4dac:	push	{r3, r4, r5, lr}
  if (!parent->isDir()) {
    4dae:	ldrb.w	r3, [r1, #49]	; 0x31
    4db2:	tst.w	r3, #80	; 0x50
    4db6:	bne.n	4dbe <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x12>
  return false;
    4db8:	movs	r5, #0
}
    4dba:	mov	r0, r5
    4dbc:	pop	{r3, r4, r5, pc}
  if (!openPrivate(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    4dbe:	movw	r3, #2562	; 0xa02
    4dc2:	mov	r4, r0
    4dc4:	bl	3efc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    4dc8:	cmp	r0, #0
    4dca:	beq.n	4db8 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xc>
  m_attributes = FILE_ATTR_SUBDIR | FS_ATTRIB_ARCHIVE;
    4dcc:	movs	r3, #48	; 0x30
  if (!addDirCluster()) {
    4dce:	mov	r0, r4
  m_attributes = FILE_ATTR_SUBDIR | FS_ATTRIB_ARCHIVE;
    4dd0:	strb.w	r3, [r4, #49]	; 0x31
  if (!addDirCluster()) {
    4dd4:	bl	4c58 <ExFatFile::addDirCluster()>
    4dd8:	mov	r5, r0
    4dda:	cmp	r0, #0
    4ddc:	beq.n	4db8 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xc>
  m_firstCluster = m_curCluster;
    4dde:	ldr	r1, [r4, #24]
  void rewind() { seekSet(0); }
    4de0:	movs	r2, #0
    4de2:	movs	r3, #0
    4de4:	mov	r0, r4
    4de6:	str	r1, [r4, #28]
    4de8:	bl	3e10 <ExFatFile::seekSet(unsigned long long)>
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    4dec:	movs	r2, #193	; 0xc1
  if (!isOpen()) {
    4dee:	ldrb.w	r3, [r4, #49]	; 0x31
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    4df2:	strb.w	r2, [r4, #51]	; 0x33
  if (!isOpen()) {
    4df6:	cmp	r3, #0
    4df8:	beq.n	4dba <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xe>
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    4dfa:	movs	r3, #65	; 0x41
    return syncDir();
    4dfc:	mov	r0, r4
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    4dfe:	strb.w	r3, [r4, #51]	; 0x33
}
    4e02:	ldmia.w	sp!, {r3, r4, r5, lr}
    return syncDir();
    4e06:	b.w	4ac0 <ExFatFile::syncDir()>
    4e0a:	nop

00004e0c <ExFatFile::mkdir(ExFatFile*, char const*, bool)>:
bool ExFatFile::mkdir(ExFatFile* parent, const char* path, bool pFlag) {
    4e0c:	push	{r4, r5, r6, r7, lr}
  ExFatFile() {}
    4e0e:	movs	r5, #0
    4e10:	sub	sp, #92	; 0x5c
    4e12:	mov	r7, r3
  if (isOpen() || !parent->isDir()) {
    4e14:	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::mkdir(ExFatFile* parent, const char* path, bool pFlag) {
    4e18:	str	r2, [sp, #4]
    4e1a:	str	r5, [sp, #80]	; 0x50
  if (isOpen() || !parent->isDir()) {
    4e1c:	cmp	r3, #0
    4e1e:	bne.n	4eae <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa2>
    4e20:	ldrb.w	r3, [r1, #49]	; 0x31
    4e24:	mov	r6, r1
    4e26:	tst.w	r3, #80	; 0x50
    4e2a:	beq.n	4eae <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa2>
  if (isDirSeparator(*path)) {
    4e2c:	ldrb	r3, [r2, #0]
    4e2e:	mov	r4, r0
    4e30:	mov	r1, r2
    4e32:	cmp	r3, #47	; 0x2f
    4e34:	beq.n	4eb4 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa8>
    if (!parsePathName(path, &fname, &path)) {
    4e36:	add	r3, sp, #4
    4e38:	add	r2, sp, #12
    4e3a:	mov	r0, r4
    4e3c:	bl	3ba4 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    4e40:	cmp	r0, #0
    4e42:	beq.n	4eae <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa2>
    if (!*path) {
    4e44:	ldr	r3, [sp, #4]
    4e46:	ldrb	r3, [r3, #0]
    4e48:	cmp	r3, #0
    4e4a:	beq.n	4ed0 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xc4>
    if (!openPrivate(parent, &fname, O_RDONLY)) {
    4e4c:	movs	r3, #0
    4e4e:	add	r2, sp, #12
    4e50:	mov	r1, r6
    4e52:	mov	r0, r4
    4e54:	bl	3efc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    4e58:	cbnz	r0, 4e68 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x5c>
      if (!pFlag || !mkdir(parent, &fname)) {
    4e5a:	cbz	r7, 4eae <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa2>
    4e5c:	add	r2, sp, #12
    4e5e:	mov	r1, r6
    4e60:	mov	r0, r4
    4e62:	bl	4dac <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
    4e66:	cbz	r0, 4eae <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa2>
    tmpDir = *this;
    4e68:	mov	ip, r4
    4e6a:	add	r5, sp, #32
    4e6c:	add.w	r6, r4, #48	; 0x30
    4e70:	ldr.w	r0, [ip]
    4e74:	add.w	ip, ip, #16
    4e78:	ldr.w	r1, [ip, #-12]
    4e7c:	mov	lr, r5
    4e7e:	ldr.w	r2, [ip, #-8]
    4e82:	adds	r5, #16
    4e84:	ldr.w	r3, [ip, #-4]
    4e88:	cmp	ip, r6
    4e8a:	stmia.w	lr!, {r0, r1, r2, r3}
    4e8e:	bne.n	4e70 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x64>
    4e90:	ldr.w	r0, [ip]
    parent = &tmpDir;
    4e94:	add	r6, sp, #32
    tmpDir = *this;
    4e96:	str	r0, [r5, #0]
    close();
    4e98:	mov	r0, r4
    4e9a:	bl	3b20 <ExFatFile::close()>
    if (!parsePathName(path, &fname, &path)) {
    4e9e:	ldr	r1, [sp, #4]
    4ea0:	add	r3, sp, #4
    4ea2:	add	r2, sp, #12
    4ea4:	mov	r0, r4
    4ea6:	bl	3ba4 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    4eaa:	cmp	r0, #0
    4eac:	bne.n	4e44 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x38>
  return false;
    4eae:	movs	r0, #0
}
    4eb0:	add	sp, #92	; 0x5c
    4eb2:	pop	{r4, r5, r6, r7, pc}
      path++;
    4eb4:	adds	r1, #1
    4eb6:	str	r1, [sp, #4]
    while (isDirSeparator(*path)) {
    4eb8:	ldrb	r3, [r1, #0]
    4eba:	cmp	r3, #47	; 0x2f
    4ebc:	beq.n	4eb4 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa8>
    if (!tmpDir.openRoot(parent->m_vol)) {
    4ebe:	ldr	r1, [r6, #32]
    4ec0:	add	r0, sp, #32
    4ec2:	bl	3b7c <ExFatFile::openRoot(ExFatVolume*)>
    4ec6:	cmp	r0, #0
    4ec8:	beq.n	4eae <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa2>
    if (!parsePathName(path, &fname, &path)) {
    4eca:	ldr	r1, [sp, #4]
    parent = &tmpDir;
    4ecc:	add	r6, sp, #32
    4ece:	b.n	4e36 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x2a>
  return mkdir(parent, &fname);
    4ed0:	add	r2, sp, #12
    4ed2:	mov	r1, r6
    4ed4:	mov	r0, r4
    4ed6:	bl	4dac <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
}
    4eda:	add	sp, #92	; 0x5c
    4edc:	pop	{r4, r5, r6, r7, pc}
    4ede:	nop

00004ee0 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>:
//------------------------------------------------------------------------------
bool ExFatFile::timestamp(uint8_t flags, uint16_t year, uint8_t month,
                          uint8_t day, uint8_t hour, uint8_t minute,
                          uint8_t second) {
    4ee0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4ee4:	mov	r6, r1
  uint16_t date;
  uint16_t time;
  uint8_t ms10;

  if (!isFile() || year < 1980 || year > 2107 || month < 1 || month > 12 ||
      day < 1 || day > 31 || hour > 23 || minute > 59 || second > 59) {
    4ee6:	ldrb.w	r1, [r0, #49]	; 0x31
                          uint8_t second) {
    4eea:	sub	sp, #12
      day < 1 || day > 31 || hour > 23 || minute > 59 || second > 59) {
    4eec:	lsls	r1, r1, #28
                          uint8_t second) {
    4eee:	ldrb.w	fp, [sp, #48]	; 0x30
    4ef2:	ldrb.w	r9, [sp, #52]	; 0x34
    4ef6:	ldrb.w	r8, [sp, #56]	; 0x38
    4efa:	ldrb.w	r7, [sp, #60]	; 0x3c
      day < 1 || day > 31 || hour > 23 || minute > 59 || second > 59) {
    4efe:	bpl.w	500c <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
  if (!isFile() || year < 1980 || year > 2107 || month < 1 || month > 12 ||
    4f02:	subw	r2, r2, #1980	; 0x7bc
    4f06:	uxth	r4, r2
    4f08:	cmp	r4, #127	; 0x7f
    4f0a:	bhi.n	500c <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
    4f0c:	subs	r2, r3, #1
    4f0e:	cmp	r2, #11
    4f10:	bhi.n	500c <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
      day < 1 || day > 31 || hour > 23 || minute > 59 || second > 59) {
    4f12:	add.w	r2, fp, #4294967295
    4f16:	cmp	r2, #30
    4f18:	bhi.n	500c <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
    4f1a:	cmp.w	r8, #59	; 0x3b
    4f1e:	it	ls
    4f20:	cmpls.w	r9, #23
    4f24:	ite	hi
    4f26:	movhi.w	sl, #1
    4f2a:	movls.w	sl, #0
    4f2e:	cmp	r7, #59	; 0x3b
    4f30:	it	hi
    4f32:	orrhi.w	sl, sl, #1
    4f36:	cmp.w	sl, #0
    4f3a:	bne.n	500c <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // update directory entry
  if (!sync()) {
    4f3c:	mov	r5, r0
    4f3e:	str	r3, [sp, #4]
    4f40:	bl	4bf8 <ExFatFile::sync()>
    4f44:	cmp	r0, #0
    4f46:	beq.n	500c <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
    4f48:	ldr	r3, [sp, #4]
    4f4a:	mov	r1, sl
    4f4c:	orr.w	fp, fp, r3, lsl #5
             : hour << 11 | minute << 5 | second >> 1;
    4f50:	lsrs	r3, r7, #1
    goto fail;
  }

  date = FS_DATE(year, month, day);
  time = FS_TIME(hour, minute, second);
  ms10 = second & 1 ? 100 : 0;
    4f52:	ands.w	r7, r7, #1
                                              : year << 9 | month << 5 | day;
    4f56:	orr.w	r4, fp, r4, lsl #9
  uint16_t checksum = 0;
    4f5a:	mov	fp, sl
             : hour << 11 | minute << 5 | second >> 1;
    4f5c:	orr.w	r8, r3, r8, lsl #5
  ms10 = second & 1 ? 100 : 0;
    4f60:	it	ne
    4f62:	movne	r7, #100	; 0x64
                                              : year << 9 | month << 5 | day;
    4f64:	uxth	r4, r4
             : hour << 11 | minute << 5 | second >> 1;
    4f66:	orr.w	r8, r8, r9, lsl #11
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setLe16(df->attributes, m_attributes & FS_ATTRIB_COPY);
        m_vol->dataCacheDirty();
        if (flags & T_ACCESS) {
    4f6a:	and.w	r9, r6, #1
    4f6e:	uxth.w	r8, r8
    cache = dirCache(is, FsCache::CACHE_FOR_READ);
    4f72:	movs	r2, #0
    4f74:	mov	r0, r5
    4f76:	bl	3ae4 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache) {
    4f7a:	cmp	r0, #0
    4f7c:	beq.n	500c <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
    switch (cache[0]) {
    4f7e:	ldrb.w	ip, [r0]
    4f82:	cmp.w	ip, #133	; 0x85
    4f86:	beq.n	5014 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x134>
    4f88:	add.w	r3, ip, #64	; 0x40
    4f8c:	uxtb	r3, r3
    4f8e:	cmp	r3, #1
    4f90:	bhi.n	500c <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
  bool skip = data[0] == EXFAT_TYPE_FILE;
    4f92:	sub.w	r1, ip, #133	; 0x85
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    4f96:	movs	r3, #0
  bool skip = data[0] == EXFAT_TYPE_FILE;
    4f98:	clz	r1, r1
    4f9c:	lsrs	r1, r1, #5
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    4f9e:	b.n	4fa6 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xc6>
    4fa0:	movs	r3, #4
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    4fa2:	ldrb.w	ip, [r0, r3]
    4fa6:	mov.w	r2, fp, lsl #15
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    4faa:	cmp	r3, #1
    4fac:	add.w	r3, r3, #1
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    4fb0:	orr.w	r2, r2, fp, lsr #1
    4fb4:	uxtah	r2, ip, r2
    4fb8:	uxth.w	fp, r2
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    4fbc:	bne.n	4fc2 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xe2>
    4fbe:	cmp	r1, #0
    4fc0:	bne.n	4fa0 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xc0>
    4fc2:	cmp	r3, #31
    4fc4:	bls.n	4fa2 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xc2>
  for (uint8_t is = 0; is <= m_setCount; is++) {
    4fc6:	add.w	sl, sl, #1
    4fca:	ldrb.w	r3, [r5, #48]	; 0x30
    4fce:	uxtb.w	r1, sl
    4fd2:	cmp	r3, r1
    4fd4:	bcs.n	4f72 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x92>
        break;
    }
    checksum = exFatDirChecksum(cache, checksum);
  }
  df = reinterpret_cast<DirFile_t*>(
      m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_WRITE));
    4fd6:	movs	r2, #1
    4fd8:	add.w	r1, r5, #36	; 0x24
    4fdc:	ldr	r0, [r5, #32]
    4fde:	bl	45a4 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    4fe2:	cbz	r0, 500c <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  setLe16(df->setChecksum, checksum);
  if (!m_vol->cacheSync()) {
    4fe4:	ldr	r4, [r5, #32]
  *reinterpret_cast<uint16_t*>(dst) = src;
    4fe6:	strh.w	fp, [r0, #2]
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    4fea:	mov	r0, r4
    4fec:	bl	3154 <FsCache::sync()>
    4ff0:	cbz	r0, 500c <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
    4ff2:	add.w	r0, r4, #528	; 0x210
    4ff6:	bl	3154 <FsCache::sync()>
    4ffa:	cbz	r0, 500c <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
    4ffc:	ldr.w	r0, [r4, #1088]	; 0x440
  bool syncDevice() { return m_blockDev->syncDevice(); }
    5000:	ldr	r3, [r0, #0]
    5002:	ldr	r3, [r3, #28]
  }
  return true;

fail:
  return false;
}
    5004:	add	sp, #12
    5006:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    500a:	bx	r3
    500c:	movs	r0, #0
    500e:	add	sp, #12
    5010:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        setLe16(df->attributes, m_attributes & FS_ATTRIB_COPY);
    5014:	ldrb.w	r3, [r5, #49]	; 0x31
        m_vol->dataCacheDirty();
    5018:	ldr	r2, [r5, #32]
        setLe16(df->attributes, m_attributes & FS_ATTRIB_COPY);
    501a:	and.w	r3, r3, #55	; 0x37
    501e:	strh	r3, [r0, #4]
    5020:	ldrb.w	r3, [r2, #528]	; 0x210
    5024:	orr.w	r3, r3, #1
    5028:	strb.w	r3, [r2, #528]	; 0x210
        if (flags & T_ACCESS) {
    502c:	cmp.w	r9, #0
    5030:	beq.n	5038 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x158>
    5032:	strh.w	r8, [r0, #16]
    5036:	strh	r4, [r0, #18]
        if (flags & T_CREATE) {
    5038:	lsls	r2, r6, #30
    503a:	bpl.n	5044 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x164>
          df->createTimeMs = ms10;
    503c:	strb	r7, [r0, #20]
    503e:	strh.w	r8, [r0, #8]
    5042:	strh	r4, [r0, #10]
        if (flags & T_WRITE) {
    5044:	lsls	r3, r6, #29
    5046:	bpl.n	5050 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x170>
          df->modifyTimeMs = ms10;
    5048:	strb	r7, [r0, #21]
    504a:	strh.w	r8, [r0, #12]
    504e:	strh	r4, [r0, #14]
  bool skip = data[0] == EXFAT_TYPE_FILE;
    5050:	ldrb.w	ip, [r0]
}
    5054:	b.n	4f92 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xb2>
    5056:	nop

00005058 <ExFatFile::truncate()>:
  bool isWritable() const { return m_flags & FILE_FLAG_WRITE; }
    5058:	ldrb.w	r3, [r0, #51]	; 0x33
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    505c:	lsls	r2, r3, #30
    505e:	bpl.n	5126 <ExFatFile::truncate()+0xce>
bool ExFatFile::truncate() {
    5060:	push	{r4, r5, r6, lr}
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    5062:	ldr	r5, [r0, #28]
bool ExFatFile::truncate() {
    5064:	sub	sp, #8
    5066:	mov	r4, r0
  if (m_firstCluster == 0) {
    5068:	cbz	r5, 50d4 <ExFatFile::truncate()+0x7c>
    return true;
  }
  if (isContiguous()) {
    506a:	ands.w	r6, r3, #64	; 0x40
    506e:	beq.n	50da <ExFatFile::truncate()+0x82>
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    5070:	ldr	r0, [r0, #32]
    5072:	ldr	r2, [r4, #8]
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    5074:	ldrb.w	ip, [r0, #1093]	; 0x445
    5078:	subs	r2, #1
    507a:	ldr	r1, [r4, #12]
    507c:	add.w	ip, ip, #9
    5080:	adc.w	r1, r1, #4294967295
    5084:	uxtb.w	ip, ip
    5088:	rsb	lr, ip, #32
    508c:	lsr.w	r2, r2, ip
    5090:	sub.w	ip, ip, #32
    5094:	lsl.w	lr, r1, lr
    5098:	lsr.w	ip, r1, ip
    if (m_curCluster) {
    509c:	ldr	r1, [r4, #24]
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    509e:	orr.w	r2, r2, lr
    50a2:	orr.w	r2, r2, ip
    50a6:	adds	r2, #1
    if (m_curCluster) {
    50a8:	cbz	r1, 50f2 <ExFatFile::truncate()+0x9a>
      toFree = m_curCluster + 1;
      nc -= 1 + m_curCluster - m_firstCluster;
    50aa:	subs	r5, #1
    50ac:	subs	r5, r5, r1
      toFree = m_curCluster + 1;
    50ae:	adds	r1, #1
      nc -= 1 + m_curCluster - m_firstCluster;
    50b0:	add	r2, r5
      toFree = m_curCluster + 1;
    50b2:	str	r1, [sp, #4]
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    50b4:	cbnz	r2, 5114 <ExFatFile::truncate()+0xbc>
      }
    }
  }
  m_dataLength = m_curPosition;
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
    50b6:	orn	r3, r3, #127	; 0x7f
  return sync();
    50ba:	mov	r0, r4
  m_dataLength = m_curPosition;
    50bc:	vldr	d7, [r4]
  m_flags |= FILE_FLAG_DIR_DIRTY;
    50c0:	strb.w	r3, [r4, #51]	; 0x33
  m_dataLength = m_curPosition;
    50c4:	vstr	d7, [r4, #8]
  m_validLength = m_curPosition;
    50c8:	vstr	d7, [r4, #16]
  return sync();
    50cc:	bl	4bf8 <ExFatFile::sync()>

fail:
  return false;
}
    50d0:	add	sp, #8
    50d2:	pop	{r4, r5, r6, pc}
    return true;
    50d4:	movs	r0, #1
}
    50d6:	add	sp, #8
    50d8:	pop	{r4, r5, r6, pc}
    if (m_curCluster) {
    50da:	ldr	r1, [r0, #24]
    50dc:	cbnz	r1, 50f8 <ExFatFile::truncate()+0xa0>
      toFree = m_firstCluster;
    50de:	str	r5, [sp, #4]
      m_firstCluster = 0;
    50e0:	str	r1, [r0, #28]
      if (!m_vol->freeChain(toFree)) {
    50e2:	mov	r1, r5
    50e4:	ldr	r0, [r4, #32]
    50e6:	bl	46e4 <ExFatPartition::freeChain(unsigned long)>
    50ea:	cbz	r0, 5120 <ExFatFile::truncate()+0xc8>
  m_flags |= FILE_FLAG_DIR_DIRTY;
    50ec:	ldrb.w	r3, [r4, #51]	; 0x33
    50f0:	b.n	50b6 <ExFatFile::truncate()+0x5e>
      toFree = m_firstCluster;
    50f2:	str	r5, [sp, #4]
      m_firstCluster = 0;
    50f4:	str	r1, [r4, #28]
    50f6:	b.n	50b4 <ExFatFile::truncate()+0x5c>
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    50f8:	add	r2, sp, #4
    50fa:	ldr	r0, [r0, #32]
      toFree = 0;
    50fc:	str	r6, [sp, #4]
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    50fe:	bl	4660 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
      if (fg < 0) {
    5102:	cmp	r0, #0
    5104:	blt.n	5120 <ExFatFile::truncate()+0xc8>
      if (fg) {
    5106:	bne.n	512a <ExFatFile::truncate()+0xd2>
    if (toFree) {
    5108:	ldr	r5, [sp, #4]
    510a:	cmp	r5, #0
    510c:	bne.n	50e2 <ExFatFile::truncate()+0x8a>
  m_flags |= FILE_FLAG_DIR_DIRTY;
    510e:	ldrb.w	r3, [r4, #51]	; 0x33
    5112:	b.n	50b6 <ExFatFile::truncate()+0x5e>
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    5114:	movs	r3, #0
    5116:	ldr	r1, [sp, #4]
    5118:	bl	44ac <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    511c:	cmp	r0, #0
    511e:	bne.n	50ec <ExFatFile::truncate()+0x94>
  return false;
    5120:	movs	r0, #0
}
    5122:	add	sp, #8
    5124:	pop	{r4, r5, r6, pc}
  return false;
    5126:	movs	r0, #0
}
    5128:	bx	lr
        if (!m_vol->fatPut(m_curCluster, EXFAT_EOC)) {
    512a:	mov.w	r2, #4294967295
    512e:	ldr	r1, [r4, #24]
    5130:	ldr	r0, [r4, #32]
    5132:	bl	46a4 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    5136:	cmp	r0, #0
    5138:	bne.n	5108 <ExFatFile::truncate()+0xb0>
    513a:	b.n	5120 <ExFatFile::truncate()+0xc8>

0000513c <ExFatFile::write(void const*, unsigned int)>:
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
    513c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5140:	ldrb.w	r3, [r0, #51]	; 0x33
    5144:	sub	sp, #12
    5146:	mov	r4, r0

  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    5148:	lsls	r5, r3, #30
    514a:	bpl.w	5290 <ExFatFile::write(void const*, unsigned int)+0x154>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    514e:	mov	r9, r2
    5150:	lsls	r2, r3, #28
    5152:	mov	r6, r1
    5154:	bmi.w	5282 <ExFatFile::write(void const*, unsigned int)+0x146>
    if (!seekSet(m_validLength)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    5158:	cmp.w	r9, #0
    515c:	beq.w	53b0 <ExFatFile::write(void const*, unsigned int)+0x274>
    if (m_curPosition > m_validLength) {
      m_flags |= FILE_FLAG_DIR_DIRTY;
      m_validLength = m_curPosition;
    }
  }
  if (m_curPosition > m_dataLength) {
    5160:	ldr	r3, [r4, #0]
    5162:	mov	r5, r9
    clusterOffset = m_curPosition & m_vol->clusterMask();
    5164:	ldr	r0, [r4, #32]
      if (m_curCluster != 0) {
    5166:	ldr	r1, [r4, #24]
    clusterOffset = m_curPosition & m_vol->clusterMask();
    5168:	ldr.w	r2, [r0, #1080]	; 0x438
    516c:	and.w	r8, r2, r3
    sectorOffset = clusterOffset & m_vol->sectorMask();
    5170:	ubfx	r7, r8, #0, #9
    if (clusterOffset == 0) {
    5174:	cmp.w	r8, #0
    5178:	bne.w	52a4 <ExFatFile::write(void const*, unsigned int)+0x168>
      if (m_curCluster != 0) {
    517c:	cmp	r1, #0
    517e:	beq.w	532a <ExFatFile::write(void const*, unsigned int)+0x1ee>
        if (isContiguous()) {
    5182:	ldrb.w	r3, [r4, #51]	; 0x33
    5186:	lsls	r3, r3, #25
    5188:	bpl.w	5364 <ExFatFile::write(void const*, unsigned int)+0x228>
    518c:	ldrb.w	ip, [r0, #1093]	; 0x445
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
    5190:	ldrd	r3, r2, [r4, #8]
    5194:	add.w	ip, ip, #9
    5198:	subs	r3, #1
    519a:	uxtb.w	ip, ip
    519e:	adc.w	r2, r2, #4294967295
    51a2:	rsb	lr, ip, #32
    51a6:	lsr.w	r3, r3, ip
    51aa:	sub.w	ip, ip, #32
    51ae:	lsl.w	lr, r2, lr
    51b2:	lsr.w	ip, r2, ip
    51b6:	ldr	r2, [r4, #28]
    51b8:	orr.w	r3, r3, lr
    51bc:	orr.w	r3, r3, ip
    51c0:	add	r3, r2
          if (m_curCluster < lc) {
    51c2:	cmp	r1, r3
    51c4:	bcs.w	5372 <ExFatFile::write(void const*, unsigned int)+0x236>
            m_curCluster++;
    51c8:	adds	r1, #1
    51ca:	str	r1, [r4, #24]
           ((cluster - 2) << m_sectorsPerClusterShift);
    51cc:	ldrb.w	r2, [r0, #1093]	; 0x445
    51d0:	subs	r1, #2
    sector = m_vol->clusterStartSector(m_curCluster) +
    51d2:	ldr.w	r3, [r0, #1068]	; 0x42c
    51d6:	lsls	r1, r2
    51d8:	add	r1, r3
    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
    51da:	cmp.w	r5, #512	; 0x200
    51de:	bcc.w	52f6 <ExFatFile::write(void const*, unsigned int)+0x1ba>
    } else if (toWrite >= 2 * m_vol->bytesPerSector()) {
    51e2:	cmp.w	r5, #1024	; 0x400
    51e6:	bcc.w	5336 <ExFatFile::write(void const*, unsigned int)+0x1fa>
  uint32_t sectorsPerCluster() const { return 1UL << m_sectorsPerClusterShift; }
    51ea:	movs	r3, #1
    51ec:	lsls	r3, r2
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
    51ee:	lsrs	r2, r5, #9
                       (clusterOffset >> m_vol->bytesPerSectorShift());
    51f0:	sub.w	r3, r3, r8
    51f4:	cmp	r3, r2
    51f6:	it	cs
    51f8:	movcs	r3, r2
    return sector <= m_sector && m_sector < (sector + count);
    51fa:	ldr.w	r2, [r0, #536]	; 0x218
    51fe:	cmp	r2, r1
      n = ns << m_vol->bytesPerSectorShift();
    5200:	mov.w	r8, r3, lsl #9
    5204:	bcc.n	521a <ExFatFile::write(void const*, unsigned int)+0xde>
    5206:	adds	r7, r3, r1
    5208:	cmp	r2, r7
    520a:	bcs.n	521a <ExFatFile::write(void const*, unsigned int)+0xde>
    m_status = 0;
    520c:	movs	r2, #0
    520e:	strb.w	r2, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    5212:	mov.w	r2, #4294967295
    5216:	str.w	r2, [r0, #536]	; 0x218
    return m_blockDev->writeSectors(sector, src, count);
    521a:	ldr.w	r0, [r0, #532]	; 0x214
    521e:	mov	r2, r6
    5220:	ldr	r7, [r0, #0]
    5222:	ldr	r7, [r7, #36]	; 0x24
    5224:	blx	r7
      if (!m_vol->cacheSafeWrite(sector, src, ns)) {
    5226:	cbz	r0, 5290 <ExFatFile::write(void const*, unsigned int)+0x154>
    m_curPosition += n;
    5228:	mov	r3, r8
    src += n;
    522a:	add	r6, r8
    toWrite -= n;
    522c:	sub.w	r5, r5, r8
    m_curPosition += n;
    5230:	ldrd	r7, r2, [r4]
    if (m_curPosition > m_validLength) {
    5234:	ldrd	r0, r1, [r4, #16]
    m_curPosition += n;
    5238:	adds	r3, r3, r7
    523a:	adc.w	r2, r2, #0
    if (m_curPosition > m_validLength) {
    523e:	cmp	r0, r3
    5240:	sbcs	r1, r2
    m_curPosition += n;
    5242:	strd	r3, r2, [r4]
    if (m_curPosition > m_validLength) {
    5246:	bcs.n	5258 <ExFatFile::write(void const*, unsigned int)+0x11c>
      m_flags |= FILE_FLAG_DIR_DIRTY;
    5248:	ldrb.w	r1, [r4, #51]	; 0x33
    524c:	orn	r1, r1, #127	; 0x7f
      m_validLength = m_curPosition;
    5250:	strd	r3, r2, [r4, #16]
      m_flags |= FILE_FLAG_DIR_DIRTY;
    5254:	strb.w	r1, [r4, #51]	; 0x33
  while (toWrite) {
    5258:	cmp	r5, #0
    525a:	bne.n	5164 <ExFatFile::write(void const*, unsigned int)+0x28>
  if (m_curPosition > m_dataLength) {
    525c:	ldrd	r0, r1, [r4, #8]
    5260:	cmp	r0, r3
    5262:	sbcs	r1, r2
    5264:	bcc.w	5394 <ExFatFile::write(void const*, unsigned int)+0x258>
    m_dataLength = m_curPosition;
    // update fileSize and insure sync will update dir entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    5268:	ldr	r3, [pc, #332]	; (53b8 <ExFatFile::write(void const*, unsigned int)+0x27c>)
    526a:	ldr	r3, [r3, #0]
    526c:	cmp	r3, #0
    526e:	beq.w	53ac <ExFatFile::write(void const*, unsigned int)+0x270>
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    5272:	ldrb.w	r3, [r4, #51]	; 0x33
    5276:	mov	r0, r9
    5278:	orn	r3, r3, #127	; 0x7f
    527c:	strb.w	r3, [r4, #51]	; 0x33
    5280:	b.n	529e <ExFatFile::write(void const*, unsigned int)+0x162>
    if (!seekSet(m_validLength)) {
    5282:	ldrd	r2, r3, [r0, #16]
    5286:	bl	3e10 <ExFatFile::seekSet(unsigned long long)>
    528a:	cmp	r0, #0
    528c:	bne.w	5158 <ExFatFile::write(void const*, unsigned int)+0x1c>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
    5290:	ldrb.w	r3, [r4, #50]	; 0x32
  return 0;
    5294:	movs	r0, #0
  m_error |= WRITE_ERROR;
    5296:	orr.w	r3, r3, #1
    529a:	strb.w	r3, [r4, #50]	; 0x32
}
    529e:	add	sp, #12
    52a0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
           ((cluster - 2) << m_sectorsPerClusterShift);
    52a4:	ldrb.w	r2, [r0, #1093]	; 0x445
    52a8:	subs	r1, #2
             (clusterOffset >> m_vol->bytesPerSectorShift());
    52aa:	mov.w	r8, r8, lsr #9
    sector = m_vol->clusterStartSector(m_curCluster) +
    52ae:	ldr.w	r3, [r0, #1068]	; 0x42c
    52b2:	lsls	r1, r2
    52b4:	add	r1, r8
    52b6:	add	r1, r3
    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
    52b8:	cmp	r7, #0
    52ba:	beq.n	51da <ExFatFile::write(void const*, unsigned int)+0x9e>
      n = m_vol->bytesPerSector() - sectorOffset;
    52bc:	rsb	r8, r7, #512	; 0x200
    return m_dataCache.prepare(sector, option);
    52c0:	movs	r2, #1
    52c2:	add.w	r0, r0, #528	; 0x210
    52c6:	cmp	r8, r5
    52c8:	it	cs
    52ca:	movcs	r8, r5
    52cc:	bl	31ac <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    52d0:	cmp	r0, #0
    52d2:	beq.n	5290 <ExFatFile::write(void const*, unsigned int)+0x154>
      memcpy(dst, src, n);
    52d4:	add	r0, r7
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    52d6:	add	r7, r8
      memcpy(dst, src, n);
    52d8:	mov	r2, r8
    52da:	mov	r1, r6
    52dc:	bl	a0a4 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    52e0:	cmp.w	r7, #512	; 0x200
    52e4:	ldr	r0, [r4, #32]
    52e6:	bne.n	5228 <ExFatFile::write(void const*, unsigned int)+0xec>
  bool dataCacheSync() { return m_dataCache.sync(); }
    52e8:	add.w	r0, r0, #528	; 0x210
    52ec:	bl	3154 <FsCache::sync()>
        if (!m_vol->dataCacheSync()) {
    52f0:	cmp	r0, #0
    52f2:	bne.n	5228 <ExFatFile::write(void const*, unsigned int)+0xec>
    52f4:	b.n	5290 <ExFatFile::write(void const*, unsigned int)+0x154>
      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
    52f6:	ldr	r2, [r4, #4]
    52f8:	ldr	r3, [r4, #20]
    52fa:	str	r2, [sp, #0]
    52fc:	str	r3, [sp, #4]
    52fe:	ldr	r2, [r4, #16]
    5300:	ldr	r3, [r4, #0]
    5302:	cmp	r3, r2
    5304:	ldrd	r2, r3, [sp]
    5308:	sbcs	r2, r3
    530a:	bcs.n	5332 <ExFatFile::write(void const*, unsigned int)+0x1f6>
        cacheOption = FsCache::CACHE_FOR_WRITE;
    530c:	movs	r2, #1
    return m_dataCache.prepare(sector, option);
    530e:	add.w	r0, r0, #528	; 0x210
    5312:	bl	31ac <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    5316:	cmp	r0, #0
    5318:	beq.n	5290 <ExFatFile::write(void const*, unsigned int)+0x154>
      memcpy(dst, src, n);
    531a:	mov	r2, r5
    531c:	mov	r1, r6
    531e:	add	r0, r7
    m_curPosition += n;
    5320:	mov	r8, r5
      memcpy(dst, src, n);
    5322:	bl	a0a4 <memcpy>
    m_curPosition += n;
    5326:	mov	r3, r5
    5328:	b.n	522a <ExFatFile::write(void const*, unsigned int)+0xee>
        if (m_firstCluster == 0) {
    532a:	ldr	r1, [r4, #28]
    532c:	cbz	r1, 5382 <ExFatFile::write(void const*, unsigned int)+0x246>
          m_curCluster = m_firstCluster;
    532e:	str	r1, [r4, #24]
    5330:	b.n	51cc <ExFatFile::write(void const*, unsigned int)+0x90>
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    5332:	movs	r2, #5
    5334:	b.n	530e <ExFatFile::write(void const*, unsigned int)+0x1d2>
    if (isCached(sector)) {
    5336:	ldr.w	r3, [r0, #536]	; 0x218
    533a:	cmp	r3, r1
    533c:	bne.n	534c <ExFatFile::write(void const*, unsigned int)+0x210>
    m_status = 0;
    533e:	movs	r3, #0
    5340:	strb.w	r3, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    5344:	mov.w	r3, #4294967295
    5348:	str.w	r3, [r0, #536]	; 0x218
    return m_blockDev->writeSector(sector, src);
    534c:	ldr.w	r0, [r0, #532]	; 0x214
    5350:	mov	r2, r6
    5352:	ldr	r3, [r0, #0]
    5354:	ldr	r3, [r3, #32]
    5356:	blx	r3
      if (!m_vol->cacheSafeWrite(sector, src)) {
    5358:	cmp	r0, #0
    535a:	beq.n	5290 <ExFatFile::write(void const*, unsigned int)+0x154>
    535c:	mov.w	r3, #512	; 0x200
      n = m_vol->bytesPerSector();
    5360:	mov	r8, r3
    5362:	b.n	522a <ExFatFile::write(void const*, unsigned int)+0xee>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    5364:	add.w	r2, r4, #24
    5368:	bl	4660 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    536c:	cmp	r0, #0
    536e:	blt.n	5290 <ExFatFile::write(void const*, unsigned int)+0x154>
        if (fg == 0) {
    5370:	bne.n	537c <ExFatFile::write(void const*, unsigned int)+0x240>
          if (!addCluster()) {
    5372:	mov	r0, r4
    5374:	bl	4918 <ExFatFile::addCluster()>
    5378:	cmp	r0, #0
    537a:	beq.n	5290 <ExFatFile::write(void const*, unsigned int)+0x154>
    sector = m_vol->clusterStartSector(m_curCluster) +
    537c:	ldr	r1, [r4, #24]
    537e:	ldr	r0, [r4, #32]
    5380:	b.n	51cc <ExFatFile::write(void const*, unsigned int)+0x90>
          if (!addCluster()) {
    5382:	mov	r0, r4
    5384:	bl	4918 <ExFatFile::addCluster()>
    5388:	cmp	r0, #0
    538a:	beq.n	5290 <ExFatFile::write(void const*, unsigned int)+0x154>
          m_firstCluster = m_curCluster;
    538c:	ldr	r1, [r4, #24]
    sector = m_vol->clusterStartSector(m_curCluster) +
    538e:	ldr	r0, [r4, #32]
          m_firstCluster = m_curCluster;
    5390:	str	r1, [r4, #28]
    5392:	b.n	51cc <ExFatFile::write(void const*, unsigned int)+0x90>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    5394:	ldrb.w	r1, [r4, #51]	; 0x33
    5398:	mov	r0, r9
    m_dataLength = m_curPosition;
    539a:	strd	r3, r2, [r4, #8]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    539e:	orn	r3, r1, #127	; 0x7f
    53a2:	strb.w	r3, [r4, #51]	; 0x33
}
    53a6:	add	sp, #12
    53a8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    53ac:	mov	r0, r9
    53ae:	b.n	529e <ExFatFile::write(void const*, unsigned int)+0x162>
  if (m_curPosition > m_dataLength) {
    53b0:	ldrd	r3, r2, [r4]
    53b4:	b.n	525c <ExFatFile::write(void const*, unsigned int)+0x120>
    53b6:	nop
    53b8:	.word	0x20006404

000053bc <FatFormatter::initFatDir(unsigned char, unsigned long)>:
    writeMsg("Format Failed\r\n");
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool FatFormatter::initFatDir(uint8_t fatType, uint32_t sectorCount) {
    53bc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    53c0:	mov	r5, r0
    53c2:	mov	r9, r1
    53c4:	mov	r7, r2
  size_t n;
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
    53c6:	movs	r1, #0
    53c8:	mov.w	r2, #512	; 0x200
    53cc:	ldr	r0, [r0, #36]	; 0x24
    53ce:	bl	e044 <memset>
  writeMsg("Writing FAT ");
    53d2:	ldr	r0, [r5, #32]
    53d4:	cmp	r0, #0
    53d6:	beq.n	547c <FatFormatter::initFatDir(unsigned char, unsigned long)+0xc0>
    53d8:	ldr	r3, [r0, #0]
    53da:	movs	r2, #12
    53dc:	ldr	r1, [pc, #164]	; (5484 <FatFormatter::initFatDir(unsigned char, unsigned long)+0xc8>)
    53de:	ldr	r3, [r3, #4]
    53e0:	blx	r3
  for (uint32_t i = 1; i < sectorCount; i++) {
    53e2:	cmp	r7, #1
    53e4:	bls.n	5428 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x6c>
    if (!m_dev->writeSector(m_fatStart + i, m_secBuf)) {
      return false;
    }
    if ((i % (sectorCount / 32)) == 0) {
    53e6:	lsrs	r6, r7, #5
    53e8:	movs	r4, #1
    53ea:	ldr.w	r8, [pc, #160]	; 548c <FatFormatter::initFatDir(unsigned char, unsigned long)+0xd0>
    53ee:	b.n	5410 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x54>
    53f0:	udiv	r3, r4, r6
    53f4:	mls	r3, r6, r3, r4
  for (uint32_t i = 1; i < sectorCount; i++) {
    53f8:	adds	r4, #1
    if ((i % (sectorCount / 32)) == 0) {
    53fa:	cbnz	r3, 540c <FatFormatter::initFatDir(unsigned char, unsigned long)+0x50>
      writeMsg(".");
    53fc:	ldr	r3, [r5, #32]
    53fe:	movs	r2, #1
    5400:	mov	r1, r8
    5402:	mov	r0, r3
    5404:	cbz	r3, 540c <FatFormatter::initFatDir(unsigned char, unsigned long)+0x50>
    5406:	ldr	r3, [r3, #0]
    5408:	ldr	r3, [r3, #4]
    540a:	blx	r3
  for (uint32_t i = 1; i < sectorCount; i++) {
    540c:	cmp	r7, r4
    540e:	bls.n	5428 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x6c>
    if (!m_dev->writeSector(m_fatStart + i, m_secBuf)) {
    5410:	ldr	r0, [r5, #28]
    5412:	ldr	r1, [r5, #12]
    5414:	ldr	r3, [r0, #0]
    5416:	ldr	r2, [r5, #36]	; 0x24
    5418:	add	r1, r4
    541a:	ldr	r3, [r3, #32]
    541c:	blx	r3
    541e:	cmp	r0, #0
    5420:	bne.n	53f0 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x34>
  for (size_t i = 1; i < n; i++) {
    m_secBuf[i] = 0XFF;
  }
  return m_dev->writeSector(m_fatStart, m_secBuf) &&
         m_dev->writeSector(m_fatStart + m_fatSize, m_secBuf);
}
    5422:	movs	r0, #0
    5424:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  writeMsg("\r\n");
    5428:	ldr	r0, [r5, #32]
    542a:	cbz	r0, 5436 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x7a>
    542c:	ldr	r3, [r0, #0]
    542e:	movs	r2, #2
    5430:	ldr	r1, [pc, #84]	; (5488 <FatFormatter::initFatDir(unsigned char, unsigned long)+0xcc>)
    5432:	ldr	r3, [r3, #4]
    5434:	blx	r3
  n = fatType == 16 ? 4 : 12;
    5436:	cmp.w	r9, #16
  m_secBuf[0] = 0XF8;
    543a:	mov.w	r1, #248	; 0xf8
    543e:	ldr	r2, [r5, #36]	; 0x24
  for (size_t i = 1; i < n; i++) {
    5440:	mov.w	r3, #1
  n = fatType == 16 ? 4 : 12;
    5444:	ite	eq
    5446:	moveq	r0, #4
    5448:	movne	r0, #12
  m_secBuf[0] = 0XF8;
    544a:	strb	r1, [r2, #0]
    m_secBuf[i] = 0XFF;
    544c:	movs	r1, #255	; 0xff
    544e:	ldr	r2, [r5, #36]	; 0x24
    5450:	strb	r1, [r2, r3]
  for (size_t i = 1; i < n; i++) {
    5452:	adds	r3, #1
    5454:	cmp	r0, r3
    5456:	bne.n	544e <FatFormatter::initFatDir(unsigned char, unsigned long)+0x92>
  return m_dev->writeSector(m_fatStart, m_secBuf) &&
    5458:	ldr	r0, [r5, #28]
    545a:	ldr	r2, [r5, #36]	; 0x24
    545c:	ldr	r3, [r0, #0]
    545e:	ldr	r1, [r5, #12]
    5460:	ldr	r3, [r3, #32]
    5462:	blx	r3
    5464:	cmp	r0, #0
    5466:	beq.n	5422 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x66>
         m_dev->writeSector(m_fatStart + m_fatSize, m_secBuf);
    5468:	ldr	r0, [r5, #28]
    546a:	ldr	r2, [r5, #36]	; 0x24
    546c:	ldrd	r3, r1, [r5, #8]
}
    5470:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
         m_dev->writeSector(m_fatStart + m_fatSize, m_secBuf);
    5474:	add	r1, r3
    5476:	ldr	r3, [r0, #0]
    5478:	ldr	r3, [r3, #32]
    547a:	bx	r3
  for (uint32_t i = 1; i < sectorCount; i++) {
    547c:	cmp	r7, #1
    547e:	bhi.n	53e6 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x2a>
    5480:	b.n	5436 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x7a>
    5482:	nop
    5484:	.word	0x200007e0
    5488:	.word	0x20000808
    548c:	.word	0x200007f0

00005490 <FatFormatter::initPbs()>:
//------------------------------------------------------------------------------
void FatFormatter::initPbs() {
    5490:	push	{r3, r4, r5, lr}
  PbsFat_t* pbs = reinterpret_cast<PbsFat_t*>(m_secBuf);
    5492:	ldr	r3, [r0, #36]	; 0x24
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
    5494:	mov.w	r5, #512	; 0x200
void FatFormatter::initPbs() {
    5498:	mov	r4, r0
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
    549a:	movs	r1, #0
    549c:	mov	r2, r5
    549e:	mov	r0, r3
    54a0:	bl	e044 <memset>
  pbs->jmpInstruction[0] = 0XEB;
  pbs->jmpInstruction[1] = 0X76;
  pbs->jmpInstruction[2] = 0X90;
  for (uint8_t i = 0; i < sizeof(pbs->oemName); i++) {
    pbs->oemName[i] = ' ';
    54a4:	mov.w	r1, #538976288	; 0x20202020
  pbs->jmpInstruction[0] = 0XEB;
    54a8:	movs	r2, #235	; 0xeb
  *reinterpret_cast<uint16_t*>(dst) = src;
    54aa:	strh.w	r5, [r0, #11]
    pbs->oemName[i] = ' ';
    54ae:	str.w	r1, [r0, #3]
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
    54b2:	mov	r3, r0
    pbs->oemName[i] = ' ';
    54b4:	str.w	r1, [r0, #7]
  pbs->jmpInstruction[2] = 0X90;
    54b8:	movs	r1, #144	; 0x90
  pbs->jmpInstruction[0] = 0XEB;
    54ba:	strb	r2, [r0, #0]
  pbs->jmpInstruction[1] = 0X76;
    54bc:	movs	r0, #118	; 0x76
  pbs->jmpInstruction[2] = 0X90;
    54be:	strb	r1, [r3, #2]
  }
  setLe16(pbs->bpb.bpb16.bytesPerSector, BYTES_PER_SECTOR);
  pbs->bpb.bpb16.sectorsPerCluster = m_sectorsPerCluster;
  setLe16(pbs->bpb.bpb16.reservedSectorCount, m_reservedSectorCount);
  pbs->bpb.bpb16.fatCount = 2;
    54c0:	movs	r2, #2
  pbs->jmpInstruction[1] = 0X76;
    54c2:	strb	r0, [r3, #1]
  pbs->bpb.bpb16.sectorsPerCluster = m_sectorsPerCluster;
    54c4:	ldrb.w	r1, [r4, #43]	; 0x2b
    54c8:	strb	r1, [r3, #13]
    54ca:	movw	r1, #43605	; 0xaa55
  setLe16(pbs->bpb.bpb16.reservedSectorCount, m_reservedSectorCount);
    54ce:	ldrh	r0, [r4, #40]	; 0x28
  pbs->bpb.bpb16.fatCount = 2;
    54d0:	strb	r2, [r3, #16]
  // skip rootDirEntryCount
  // skip totalSectors16
  pbs->bpb.bpb16.mediaType = 0XF8;
    54d2:	movs	r2, #248	; 0xf8
    54d4:	strh	r0, [r3, #14]
    54d6:	strb	r2, [r3, #21]
  // skip sectorsPerFat16
  // skip sectorsPerTrack
  // skip headCount
  setLe32(pbs->bpb.bpb16.hidddenSectors, m_relativeSectors);
    54d8:	ldr	r2, [r4, #16]
  *reinterpret_cast<uint32_t*>(dst) = src;
    54da:	str	r2, [r3, #28]
  setLe32(pbs->bpb.bpb16.totalSectors32, m_totalSectors);
    54dc:	ldr	r2, [r4, #24]
  *reinterpret_cast<uint16_t*>(dst) = src;
    54de:	strh.w	r1, [r3, #510]	; 0x1fe
  *reinterpret_cast<uint32_t*>(dst) = src;
    54e2:	str	r2, [r3, #32]
  // skip rest of bpb
  setLe16(pbs->signature, PBR_SIGNATURE);
}
    54e4:	pop	{r3, r4, r5, pc}
    54e6:	nop

000054e8 <FatFormatter::writeMbr()>:
    return false;
  }
  return initFatDir(32, 2 * m_fatSize + m_sectorsPerCluster);
}
//------------------------------------------------------------------------------
bool FatFormatter::writeMbr() {
    54e8:	push	{r4, r5, r6, lr}
    54ea:	mov	r4, r0
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
    54ec:	mov.w	r2, #512	; 0x200
    54f0:	movs	r1, #0
    54f2:	ldr	r0, [r0, #36]	; 0x24
    54f4:	bl	e044 <memset>
  MbrSector_t* mbr = reinterpret_cast<MbrSector_t*>(m_secBuf);
    54f8:	ldr	r5, [r4, #36]	; 0x24

#if USE_LBA_TO_CHS
  lbaToMbrChs(mbr->part->beginCHS, m_capacityMB, m_relativeSectors);
    54fa:	ldr	r2, [r4, #16]
    54fc:	ldr	r1, [r4, #0]
    54fe:	addw	r0, r5, #447	; 0x1bf
    5502:	bl	30b4 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)>
  lbaToMbrChs(mbr->part->endCHS, m_capacityMB,
              m_relativeSectors + m_totalSectors - 1);
    5506:	ldr	r3, [r4, #24]
    5508:	ldr	r2, [r4, #16]
  lbaToMbrChs(mbr->part->endCHS, m_capacityMB,
    550a:	addw	r0, r5, #451	; 0x1c3
    550e:	ldr	r1, [r4, #0]
              m_relativeSectors + m_totalSectors - 1);
    5510:	add	r2, r3
  lbaToMbrChs(mbr->part->endCHS, m_capacityMB,
    5512:	subs	r2, #1
    5514:	bl	30b4 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)>
  mbr->part->endCHS[0] = 0XFE;
  mbr->part->endCHS[1] = 0XFF;
  mbr->part->endCHS[2] = 0XFF;
#endif  // USE_LBA_TO_CHS

  mbr->part->type = m_partType;
    5518:	ldrb.w	r2, [r4, #42]	; 0x2a
  *reinterpret_cast<uint16_t*>(dst) = src;
    551c:	movw	r3, #43605	; 0xaa55
    5520:	strb.w	r2, [r5, #450]	; 0x1c2
  setLe32(mbr->part->relativeSectors, m_relativeSectors);
    5524:	ldr	r2, [r4, #16]
  setLe32(mbr->part->totalSectors, m_totalSectors);
  setLe16(mbr->signature, MBR_SIGNATURE);
  return m_dev->writeSector(0, m_secBuf);
    5526:	ldr	r0, [r4, #28]
  *reinterpret_cast<uint32_t*>(dst) = src;
    5528:	str.w	r2, [r5, #454]	; 0x1c6
    552c:	ldr	r2, [r4, #36]	; 0x24
  setLe32(mbr->part->totalSectors, m_totalSectors);
    552e:	ldr	r1, [r4, #24]
  *reinterpret_cast<uint16_t*>(dst) = src;
    5530:	strh.w	r3, [r5, #510]	; 0x1fe
  return m_dev->writeSector(0, m_secBuf);
    5534:	ldr	r3, [r0, #0]
  *reinterpret_cast<uint32_t*>(dst) = src;
    5536:	str.w	r1, [r5, #458]	; 0x1ca
    553a:	movs	r1, #0
    553c:	ldr	r3, [r3, #32]
}
    553e:	ldmia.w	sp!, {r4, r5, r6, lr}
  return m_dev->writeSector(0, m_secBuf);
    5542:	bx	r3

00005544 <FatFormatter::makeFat16()>:
bool FatFormatter::makeFat16() {
    5544:	push	{r4, r5, r6, lr}
    nc = (m_sectorCount - m_dataStart) / m_sectorsPerCluster;
    5546:	ldr	r6, [r0, #20]
  for (m_dataStart = 2 * BU16;; m_dataStart += BU16) {
    5548:	mov.w	r3, #256	; 0x100
    nc = (m_sectorCount - m_dataStart) / m_sectorsPerCluster;
    554c:	ldrb.w	lr, [r0, #43]	; 0x2b
bool FatFormatter::makeFat16() {
    5550:	mov	r4, r0
    nc = (m_sectorCount - m_dataStart) / m_sectorsPerCluster;
    5552:	sub.w	r2, r6, #256	; 0x100
  PbsFat_t* pbs = reinterpret_cast<PbsFat_t*>(m_secBuf);
    5556:	ldr	r5, [r0, #36]	; 0x24
  for (m_dataStart = 2 * BU16;; m_dataStart += BU16) {
    5558:	str	r3, [r0, #4]
    nc = (m_sectorCount - m_dataStart) / m_sectorsPerCluster;
    555a:	udiv	r2, r2, lr
    m_fatSize = (nc + 2 + (BYTES_PER_SECTOR / 2) - 1) / (BYTES_PER_SECTOR / 2);
    555e:	addw	ip, r2, #257	; 0x101
    5562:	mov.w	r1, ip, lsr #8
    uint32_t r = BU16 + 1 + 2 * m_fatSize + FAT16_ROOT_SECTOR_COUNT;
    5566:	mov.w	ip, r1, lsl #1
    m_fatSize = (nc + 2 + (BYTES_PER_SECTOR / 2) - 1) / (BYTES_PER_SECTOR / 2);
    556a:	str	r1, [r0, #8]
    uint32_t r = BU16 + 1 + 2 * m_fatSize + FAT16_ROOT_SECTOR_COUNT;
    556c:	add.w	r0, ip, #161	; 0xa1
    if (m_dataStart >= r) {
    5570:	cmp	r0, r3
    5572:	bls.n	5592 <FatFormatter::makeFat16()+0x4e>
  for (m_dataStart = 2 * BU16;; m_dataStart += BU16) {
    5574:	adds	r3, #128	; 0x80
    nc = (m_sectorCount - m_dataStart) / m_sectorsPerCluster;
    5576:	subs	r2, r6, r3
    5578:	udiv	r2, r2, lr
    m_fatSize = (nc + 2 + (BYTES_PER_SECTOR / 2) - 1) / (BYTES_PER_SECTOR / 2);
    557c:	addw	r1, r2, #257	; 0x101
    5580:	lsrs	r1, r1, #8
    uint32_t r = BU16 + 1 + 2 * m_fatSize + FAT16_ROOT_SECTOR_COUNT;
    5582:	mov.w	ip, r1, lsl #1
    5586:	add.w	r0, ip, #161	; 0xa1
    if (m_dataStart >= r) {
    558a:	cmp	r3, r0
    558c:	bcc.n	5574 <FatFormatter::makeFat16()+0x30>
    558e:	strd	r3, r1, [r4, #4]
      m_relativeSectors = m_dataStart - r + BU16;
    5592:	subs	r3, r3, r0
  if (nc < 4085 || nc >= 65525) {
    5594:	subw	r1, r2, #4085	; 0xff5
      m_relativeSectors = m_dataStart - r + BU16;
    5598:	add.w	r0, r3, #128	; 0x80
  if (nc < 4085 || nc >= 65525) {
    559c:	cmp.w	r1, #61440	; 0xf000
      m_relativeSectors = m_dataStart - r + BU16;
    55a0:	str	r0, [r4, #16]
  if (nc < 4085 || nc >= 65525) {
    55a2:	bcs.n	5644 <FatFormatter::makeFat16()+0x100>
      nc * m_sectorsPerCluster + 2 * m_fatSize + m_reservedSectorCount + 32;
    55a4:	add.w	ip, ip, #33	; 0x21
  m_fatStart = m_relativeSectors + m_reservedSectorCount;
    55a8:	adds	r3, #129	; 0x81
  if (!writeMbr()) {
    55aa:	mov	r0, r4
      nc * m_sectorsPerCluster + 2 * m_fatSize + m_reservedSectorCount + 32;
    55ac:	mla	r2, r2, lr, ip
  m_fatStart = m_relativeSectors + m_reservedSectorCount;
    55b0:	str	r3, [r4, #12]
    m_partType = 0X06;
    55b2:	cmp.w	r2, #65536	; 0x10000
  m_totalSectors =
    55b6:	str	r2, [r4, #24]
    m_partType = 0X06;
    55b8:	ite	cc
    55ba:	movcc	r3, #4
    55bc:	movcs	r3, #6
    55be:	strb.w	r3, [r4, #42]	; 0x2a
  m_reservedSectorCount = 1;
    55c2:	movs	r3, #1
    55c4:	strh	r3, [r4, #40]	; 0x28
  if (!writeMbr()) {
    55c6:	bl	54e8 <FatFormatter::writeMbr()>
    55ca:	cbnz	r0, 55d0 <FatFormatter::makeFat16()+0x8c>
}
    55cc:	movs	r0, #0
    55ce:	pop	{r4, r5, r6, pc}
  initPbs();
    55d0:	mov	r0, r4
    55d2:	bl	5490 <FatFormatter::initPbs()>
  pbs->bpb.bpb16.extSignature = EXTENDED_BOOT_SIGNATURE;
    55d6:	movs	r2, #41	; 0x29
  setLe16(pbs->bpb.bpb16.sectorsPerFat16, m_fatSize);
    55d8:	ldr	r1, [r4, #8]
    pbs->bpb.bpb16.volumeLabel[i] = ' ';
    55da:	mov.w	r3, #538976288	; 0x20202020
  pbs->bpb.bpb16.extSignature = EXTENDED_BOOT_SIGNATURE;
    55de:	strb.w	r2, [r5, #38]	; 0x26
  pbs->bpb.bpb16.volumeType[0] = 'F';
    55e2:	movs	r2, #70	; 0x46
    pbs->bpb.bpb16.volumeLabel[i] = ' ';
    55e4:	str.w	r3, [r5, #47]	; 0x2f
  pbs->bpb.bpb16.physicalDriveNumber = 0X80;
    55e8:	movs	r0, #128	; 0x80
  pbs->bpb.bpb16.volumeType[0] = 'F';
    55ea:	strb.w	r2, [r5, #54]	; 0x36
  pbs->bpb.bpb16.volumeType[2] = 'T';
    55ee:	movs	r2, #84	; 0x54
    pbs->bpb.bpb16.volumeLabel[i] = ' ';
    55f0:	str.w	r3, [r5, #43]	; 0x2b
    55f4:	str.w	r3, [r5, #50]	; 0x32
  pbs->bpb.bpb16.volumeType[3] = '1';
    55f8:	movs	r3, #49	; 0x31
  pbs->bpb.bpb16.volumeType[2] = 'T';
    55fa:	strb.w	r2, [r5, #56]	; 0x38
  pbs->bpb.bpb16.volumeType[4] = '6';
    55fe:	movs	r2, #54	; 0x36
  setLe16(pbs->bpb.bpb16.sectorsPerFat16, m_fatSize);
    5600:	strh	r1, [r5, #22]
  pbs->bpb.bpb16.volumeType[1] = 'A';
    5602:	movs	r1, #65	; 0x41
  pbs->bpb.bpb16.volumeType[3] = '1';
    5604:	strb.w	r3, [r5, #57]	; 0x39
  pbs->bpb.bpb16.volumeType[1] = 'A';
    5608:	strb.w	r1, [r5, #55]	; 0x37
  *reinterpret_cast<uint16_t*>(dst) = src;
    560c:	mov.w	r1, #512	; 0x200
  pbs->bpb.bpb16.physicalDriveNumber = 0X80;
    5610:	strb.w	r0, [r5, #36]	; 0x24
  pbs->bpb.bpb16.volumeType[4] = '6';
    5614:	strb.w	r2, [r5, #58]	; 0x3a
  *reinterpret_cast<uint32_t*>(dst) = src;
    5618:	ldr	r3, [pc, #60]	; (5658 <FatFormatter::makeFat16()+0x114>)
  if (!m_dev->writeSector(m_relativeSectors, m_secBuf)) {
    561a:	ldr	r0, [r4, #28]
    561c:	str.w	r3, [r5, #39]	; 0x27
    5620:	ldr	r3, [r0, #0]
  *reinterpret_cast<uint16_t*>(dst) = src;
    5622:	strh.w	r1, [r5, #17]
    5626:	ldr	r2, [r4, #36]	; 0x24
    5628:	ldr	r1, [r4, #16]
    562a:	ldr	r3, [r3, #32]
    562c:	blx	r3
    562e:	cmp	r0, #0
    5630:	beq.n	55cc <FatFormatter::makeFat16()+0x88>
  return initFatDir(16, m_dataStart - m_fatStart);
    5632:	ldr	r2, [r4, #4]
    5634:	mov	r0, r4
    5636:	ldr	r3, [r4, #12]
    5638:	movs	r1, #16
    563a:	subs	r2, r2, r3
}
    563c:	ldmia.w	sp!, {r4, r5, r6, lr}
  return initFatDir(16, m_dataStart - m_fatStart);
    5640:	b.w	53bc <FatFormatter::initFatDir(unsigned char, unsigned long)>
    writeMsg("Bad cluster count\r\n");
    5644:	ldr	r0, [r4, #32]
    5646:	cmp	r0, #0
    5648:	beq.n	55cc <FatFormatter::makeFat16()+0x88>
    564a:	ldr	r3, [r0, #0]
    564c:	movs	r2, #19
    564e:	ldr	r1, [pc, #12]	; (565c <FatFormatter::makeFat16()+0x118>)
    5650:	ldr	r3, [r3, #4]
    5652:	blx	r3
}
    5654:	movs	r0, #0
    5656:	pop	{r4, r5, r6, pc}
    5658:	.word	0x0012d687
    565c:	.word	0x200007b4

00005660 <FatFormatter::makeFat32()>:
bool FatFormatter::makeFat32() {
    5660:	push	{r3, r4, r5, r6, r7, lr}
    nc = (m_sectorCount - m_dataStart) / m_sectorsPerCluster;
    5662:	ldr	r6, [r0, #20]
  m_relativeSectors = BU32;
    5664:	mov.w	r3, #8192	; 0x2000
    nc = (m_sectorCount - m_dataStart) / m_sectorsPerCluster;
    5668:	ldrb.w	ip, [r0, #43]	; 0x2b
  for (m_dataStart = 2 * BU32;; m_dataStart += BU32) {
    566c:	mov.w	r2, #16384	; 0x4000
    nc = (m_sectorCount - m_dataStart) / m_sectorsPerCluster;
    5670:	sub.w	r1, r6, #16384	; 0x4000
  m_relativeSectors = BU32;
    5674:	str	r3, [r0, #16]
    uint32_t r = m_relativeSectors + 9 + 2 * m_fatSize;
    5676:	movw	lr, #8201	; 0x2009
bool FatFormatter::makeFat32() {
    567a:	mov	r4, r0
  PbsFat_t* pbs = reinterpret_cast<PbsFat_t*>(m_secBuf);
    567c:	ldr	r5, [r0, #36]	; 0x24
  for (m_dataStart = 2 * BU32;; m_dataStart += BU32) {
    567e:	str	r2, [r0, #4]
    nc = (m_sectorCount - m_dataStart) / m_sectorsPerCluster;
    5680:	udiv	r1, r1, ip
    m_fatSize = (nc + 2 + (BYTES_PER_SECTOR / 4) - 1) / (BYTES_PER_SECTOR / 4);
    5684:	add.w	r3, r1, #129	; 0x81
    5688:	lsrs	r3, r3, #7
    568a:	str	r3, [r0, #8]
    uint32_t r = m_relativeSectors + 9 + 2 * m_fatSize;
    568c:	add.w	r0, lr, r3, lsl #1
    if (m_dataStart >= r) {
    5690:	cmp	r0, r2
    5692:	bls.w	5802 <FatFormatter::makeFat32()+0x1a2>
  for (m_dataStart = 2 * BU32;; m_dataStart += BU32) {
    5696:	add.w	r2, r2, #8192	; 0x2000
    nc = (m_sectorCount - m_dataStart) / m_sectorsPerCluster;
    569a:	subs	r1, r6, r2
    569c:	udiv	r1, r1, ip
    m_fatSize = (nc + 2 + (BYTES_PER_SECTOR / 4) - 1) / (BYTES_PER_SECTOR / 4);
    56a0:	add.w	r3, r1, #129	; 0x81
    56a4:	lsrs	r3, r3, #7
    uint32_t r = m_relativeSectors + 9 + 2 * m_fatSize;
    56a6:	add.w	r0, lr, r3, lsl #1
    56aa:	lsls	r7, r3, #1
    if (m_dataStart >= r) {
    56ac:	cmp	r2, r0
    56ae:	bcc.n	5696 <FatFormatter::makeFat32()+0x36>
    56b0:	strd	r2, r3, [r4, #4]
  if (nc < 65525) {
    56b4:	movw	r3, #65524	; 0xfff4
    56b8:	cmp	r1, r3
    56ba:	bls.w	57ec <FatFormatter::makeFat32()+0x18c>
  m_totalSectors = nc * m_sectorsPerCluster + m_dataStart - m_relativeSectors;
    56be:	mla	ip, r1, ip, r2
  m_reservedSectorCount = m_dataStart - m_relativeSectors - 2 * m_fatSize;
    56c2:	sub.w	r2, r2, #8192	; 0x2000
  if (!writeMbr()) {
    56c6:	mov	r0, r4
  m_reservedSectorCount = m_dataStart - m_relativeSectors - 2 * m_fatSize;
    56c8:	subs	r2, r2, r7
    56ca:	uxth	r2, r2
  m_fatStart = m_relativeSectors + m_reservedSectorCount;
    56cc:	add.w	r3, r2, #8192	; 0x2000
  m_reservedSectorCount = m_dataStart - m_relativeSectors - 2 * m_fatSize;
    56d0:	strh	r2, [r4, #40]	; 0x28
  if ((m_relativeSectors + m_totalSectors) <= 16450560) {
    56d2:	ldr	r2, [pc, #308]	; (5808 <FatFormatter::makeFat32()+0x1a8>)
  m_fatStart = m_relativeSectors + m_reservedSectorCount;
    56d4:	str	r3, [r4, #12]
  m_totalSectors = nc * m_sectorsPerCluster + m_dataStart - m_relativeSectors;
    56d6:	sub.w	r3, ip, #8192	; 0x2000
    m_partType = 0X0C;
    56da:	cmp	ip, r2
    56dc:	ite	ls
    56de:	movls.w	ip, #11
    56e2:	movhi.w	ip, #12
  m_totalSectors = nc * m_sectorsPerCluster + m_dataStart - m_relativeSectors;
    56e6:	str	r3, [r4, #24]
  if ((m_relativeSectors + m_totalSectors) <= 16450560) {
    56e8:	strb.w	ip, [r4, #42]	; 0x2a
  if (!writeMbr()) {
    56ec:	bl	54e8 <FatFormatter::writeMbr()>
    56f0:	cbnz	r0, 56f6 <FatFormatter::makeFat32()+0x96>
}
    56f2:	movs	r0, #0
    56f4:	pop	{r3, r4, r5, r6, r7, pc}
  initPbs();
    56f6:	mov	r0, r4
    56f8:	bl	5490 <FatFormatter::initPbs()>
  setLe32(pbs->bpb.bpb32.sectorsPerFat32, m_fatSize);
    56fc:	ldr	r1, [r4, #8]
  pbs->bpb.bpb32.extSignature = EXTENDED_BOOT_SIGNATURE;
    56fe:	movs	r2, #41	; 0x29
    pbs->bpb.bpb32.volumeLabel[i] = ' ';
    5700:	mov.w	r3, #538976288	; 0x20202020
  pbs->bpb.bpb32.physicalDriveNumber = 0X80;
    5704:	movs	r0, #128	; 0x80
  *reinterpret_cast<uint32_t*>(dst) = src;
    5706:	str	r1, [r5, #36]	; 0x24
  pbs->bpb.bpb32.extSignature = EXTENDED_BOOT_SIGNATURE;
    5708:	strb.w	r2, [r5, #66]	; 0x42
  pbs->bpb.bpb32.volumeType[2] = 'T';
    570c:	movs	r1, #84	; 0x54
  pbs->bpb.bpb32.volumeType[0] = 'F';
    570e:	movs	r2, #70	; 0x46
    pbs->bpb.bpb32.volumeLabel[i] = ' ';
    5710:	str.w	r3, [r5, #75]	; 0x4b
  pbs->bpb.bpb32.physicalDriveNumber = 0X80;
    5714:	strb.w	r0, [r5, #64]	; 0x40
  pbs->bpb.bpb32.volumeType[1] = 'A';
    5718:	movs	r0, #65	; 0x41
    pbs->bpb.bpb32.volumeLabel[i] = ' ';
    571a:	str.w	r3, [r5, #71]	; 0x47
    571e:	str.w	r3, [r5, #78]	; 0x4e
    5722:	movs	r3, #2
  pbs->bpb.bpb32.volumeType[0] = 'F';
    5724:	strb.w	r2, [r5, #82]	; 0x52
  pbs->bpb.bpb32.volumeType[3] = '3';
    5728:	movs	r2, #51	; 0x33
  pbs->bpb.bpb32.volumeType[2] = 'T';
    572a:	strb.w	r1, [r5, #84]	; 0x54
  pbs->bpb.bpb32.volumeType[4] = '2';
    572e:	movs	r1, #50	; 0x32
  pbs->bpb.bpb32.volumeType[3] = '3';
    5730:	strb.w	r2, [r5, #85]	; 0x55
  pbs->bpb.bpb32.volumeType[1] = 'A';
    5734:	strb.w	r0, [r5, #83]	; 0x53
  pbs->bpb.bpb32.volumeType[4] = '2';
    5738:	strb.w	r1, [r5, #86]	; 0x56
    573c:	str	r3, [r5, #44]	; 0x2c
  if (!m_dev->writeSector(m_relativeSectors, m_secBuf) ||
    573e:	ldr	r0, [r4, #28]
  *reinterpret_cast<uint16_t*>(dst) = src;
    5740:	ldr	r3, [pc, #200]	; (580c <FatFormatter::makeFat32()+0x1ac>)
  *reinterpret_cast<uint32_t*>(dst) = src;
    5742:	ldr	r2, [pc, #204]	; (5810 <FatFormatter::makeFat32()+0x1b0>)
  *reinterpret_cast<uint16_t*>(dst) = src;
    5744:	str	r3, [r5, #48]	; 0x30
    5746:	ldr	r3, [r0, #0]
  *reinterpret_cast<uint32_t*>(dst) = src;
    5748:	str.w	r2, [r5, #67]	; 0x43
    574c:	ldr	r3, [r3, #32]
    574e:	ldr	r2, [r4, #36]	; 0x24
    5750:	ldr	r1, [r4, #16]
    5752:	blx	r3
    5754:	cmp	r0, #0
    5756:	beq.n	56f2 <FatFormatter::makeFat32()+0x92>
      !m_dev->writeSector(m_relativeSectors + 6, m_secBuf)) {
    5758:	ldr	r0, [r4, #28]
    575a:	ldr	r1, [r4, #16]
    575c:	ldr	r3, [r0, #0]
    575e:	adds	r1, #6
    5760:	ldr	r2, [r4, #36]	; 0x24
    5762:	ldr	r3, [r3, #32]
    5764:	blx	r3
  if (!m_dev->writeSector(m_relativeSectors, m_secBuf) ||
    5766:	cmp	r0, #0
    5768:	beq.n	56f2 <FatFormatter::makeFat32()+0x92>
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
    576a:	mov.w	r2, #512	; 0x200
    576e:	movs	r1, #0
    5770:	ldr	r0, [r4, #36]	; 0x24
    5772:	bl	e044 <memset>
  if (!m_dev->writeSector(m_relativeSectors + 2, m_secBuf) ||
    5776:	ldr	r0, [r4, #28]
    5778:	ldr	r2, [pc, #152]	; (5814 <FatFormatter::makeFat32()+0x1b4>)
    577a:	ldr	r3, [r0, #0]
    577c:	str.w	r2, [r5, #508]	; 0x1fc
    5780:	ldr	r1, [r4, #16]
    5782:	ldr	r3, [r3, #32]
    5784:	adds	r1, #2
    5786:	ldr	r2, [r4, #36]	; 0x24
    5788:	blx	r3
    578a:	cmp	r0, #0
    578c:	beq.n	56f2 <FatFormatter::makeFat32()+0x92>
      !m_dev->writeSector(m_relativeSectors + 8, m_secBuf)) {
    578e:	ldr	r0, [r4, #28]
    5790:	ldr	r1, [r4, #16]
    5792:	ldr	r3, [r0, #0]
    5794:	adds	r1, #8
    5796:	ldr	r2, [r4, #36]	; 0x24
    5798:	ldr	r3, [r3, #32]
    579a:	blx	r3
  if (!m_dev->writeSector(m_relativeSectors + 2, m_secBuf) ||
    579c:	cmp	r0, #0
    579e:	beq.n	56f2 <FatFormatter::makeFat32()+0x92>
    57a0:	mov.w	r3, #4294967295
  if (!m_dev->writeSector(m_relativeSectors + 1, m_secBuf) ||
    57a4:	ldr	r0, [r4, #28]
    57a6:	ldr	r2, [pc, #112]	; (5818 <FatFormatter::makeFat32()+0x1b8>)
    57a8:	strd	r3, r3, [r5, #488]	; 0x1e8
    57ac:	ldr	r3, [pc, #108]	; (581c <FatFormatter::makeFat32()+0x1bc>)
    57ae:	str	r2, [r5, #0]
    57b0:	str.w	r3, [r5, #484]	; 0x1e4
    57b4:	ldr	r3, [r0, #0]
    57b6:	ldr	r1, [r4, #16]
    57b8:	ldr	r2, [r4, #36]	; 0x24
    57ba:	ldr	r3, [r3, #32]
    57bc:	adds	r1, #1
    57be:	blx	r3
    57c0:	cmp	r0, #0
    57c2:	beq.n	56f2 <FatFormatter::makeFat32()+0x92>
      !m_dev->writeSector(m_relativeSectors + 7, m_secBuf)) {
    57c4:	ldr	r0, [r4, #28]
    57c6:	ldr	r1, [r4, #16]
    57c8:	ldr	r3, [r0, #0]
    57ca:	ldr	r2, [r4, #36]	; 0x24
    57cc:	adds	r1, #7
    57ce:	ldr	r3, [r3, #32]
    57d0:	blx	r3
  if (!m_dev->writeSector(m_relativeSectors + 1, m_secBuf) ||
    57d2:	cmp	r0, #0
    57d4:	beq.n	56f2 <FatFormatter::makeFat32()+0x92>
  return initFatDir(32, 2 * m_fatSize + m_sectorsPerCluster);
    57d6:	ldr	r2, [r4, #8]
    57d8:	mov	r0, r4
    57da:	ldrb.w	r3, [r4, #43]	; 0x2b
    57de:	movs	r1, #32
    57e0:	add.w	r2, r3, r2, lsl #1
}
    57e4:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return initFatDir(32, 2 * m_fatSize + m_sectorsPerCluster);
    57e8:	b.w	53bc <FatFormatter::initFatDir(unsigned char, unsigned long)>
    writeMsg("Bad cluster count\r\n");
    57ec:	ldr	r0, [r4, #32]
    57ee:	cmp	r0, #0
    57f0:	beq.w	56f2 <FatFormatter::makeFat32()+0x92>
    57f4:	ldr	r3, [r0, #0]
    57f6:	movs	r2, #19
    57f8:	ldr	r1, [pc, #36]	; (5820 <FatFormatter::makeFat32()+0x1c0>)
    57fa:	ldr	r3, [r3, #4]
    57fc:	blx	r3
}
    57fe:	movs	r0, #0
    5800:	pop	{r3, r4, r5, r6, r7, pc}
    5802:	lsls	r7, r3, #1
    5804:	b.n	56b4 <FatFormatter::makeFat32()+0x54>
    5806:	nop
    5808:	.word	0x00fb0400
    580c:	.word	0x00060001
    5810:	.word	0x0012d687
    5814:	.word	0xaa550000
    5818:	.word	0x41615252
    581c:	.word	0x61417272
    5820:	.word	0x200007b4

00005824 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)>:
bool FatFormatter::format(FsBlockDevice* dev, uint8_t* secBuf, print_t* pr) {
    5824:	push	{r3, r4, r5, lr}
    5826:	mov	r4, r0
  m_sectorCount = m_dev->sectorCount();
    5828:	ldr	r5, [r1, #0]
  m_dev = dev;
    582a:	str	r1, [r0, #28]
  m_sectorCount = m_dev->sectorCount();
    582c:	mov	r0, r1
  m_secBuf = secBuf;
    582e:	str	r2, [r4, #36]	; 0x24
  m_sectorCount = m_dev->sectorCount();
    5830:	ldr	r2, [r5, #24]
  m_pr = pr;
    5832:	str	r3, [r4, #32]
  m_sectorCount = m_dev->sectorCount();
    5834:	blx	r2
  m_capacityMB = (m_sectorCount + SECTORS_PER_MB - 1) / SECTORS_PER_MB;
    5836:	addw	r3, r0, #2047	; 0x7ff
  m_sectorCount = m_dev->sectorCount();
    583a:	str	r0, [r4, #20]
  m_capacityMB = (m_sectorCount + SECTORS_PER_MB - 1) / SECTORS_PER_MB;
    583c:	lsrs	r3, r3, #11
  if (m_capacityMB <= 6) {
    583e:	cmp	r3, #6
  m_capacityMB = (m_sectorCount + SECTORS_PER_MB - 1) / SECTORS_PER_MB;
    5840:	str	r3, [r4, #0]
  if (m_capacityMB <= 6) {
    5842:	bls.n	588e <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x6a>
  } else if (m_capacityMB <= 16) {
    5844:	cmp	r3, #16
    5846:	bhi.n	5870 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x4c>
    5848:	movs	r3, #2
  rtn = m_sectorCount < 0X400000 ? makeFat16() : makeFat32();
    584a:	cmp.w	r0, #4194304	; 0x400000
    m_sectorsPerCluster = 2;
    584e:	strb.w	r3, [r4, #43]	; 0x2b
  rtn = m_sectorCount < 0X400000 ? makeFat16() : makeFat32();
    5852:	mov	r0, r4
    5854:	bcs.n	58b4 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x90>
    5856:	bl	5544 <FatFormatter::makeFat16()>
    585a:	mov	r5, r0
    writeMsg("Format Done\r\n");
    585c:	ldr	r0, [r4, #32]
  if (rtn) {
    585e:	cbz	r5, 58a2 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x7e>
    writeMsg("Format Done\r\n");
    5860:	cbz	r0, 586c <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x48>
    5862:	ldr	r3, [r0, #0]
    5864:	movs	r2, #13
    5866:	ldr	r1, [pc, #100]	; (58cc <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xa8>)
    5868:	ldr	r3, [r3, #4]
    586a:	blx	r3
}
    586c:	mov	r0, r5
    586e:	pop	{r3, r4, r5, pc}
  } else if (m_capacityMB <= 32) {
    5870:	cmp	r3, #32
    5872:	bls.n	58bc <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x98>
  } else if (m_capacityMB <= 64) {
    5874:	cmp	r3, #64	; 0x40
    5876:	bls.n	58c0 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x9c>
  } else if (m_capacityMB <= 128) {
    5878:	cmp	r3, #128	; 0x80
    587a:	bls.n	58c4 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xa0>
  } else if (m_capacityMB <= 1024) {
    587c:	cmp.w	r3, #1024	; 0x400
    5880:	bls.n	58c8 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xa4>
  } else if (m_capacityMB <= 32768) {
    5882:	cmp.w	r3, #32768	; 0x8000
    5886:	ite	hi
    5888:	movhi	r3, #128	; 0x80
    588a:	movls	r3, #64	; 0x40
    588c:	b.n	584a <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x26>
    writeMsg("Card is too small.\r\n");
    588e:	ldr	r0, [r4, #32]
    5890:	cbz	r0, 589c <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x78>
    5892:	ldr	r3, [r0, #0]
    5894:	movs	r2, #20
    5896:	ldr	r1, [pc, #56]	; (58d0 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xac>)
    5898:	ldr	r3, [r3, #4]
    589a:	blx	r3
    return false;
    589c:	movs	r5, #0
}
    589e:	mov	r0, r5
    58a0:	pop	{r3, r4, r5, pc}
    writeMsg("Format Failed\r\n");
    58a2:	cmp	r0, #0
    58a4:	beq.n	589c <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x78>
    58a6:	ldr	r3, [r0, #0]
    58a8:	movs	r2, #15
    58aa:	ldr	r1, [pc, #40]	; (58d4 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xb0>)
    58ac:	ldr	r3, [r3, #4]
    58ae:	blx	r3
}
    58b0:	mov	r0, r5
    58b2:	pop	{r3, r4, r5, pc}
  rtn = m_sectorCount < 0X400000 ? makeFat16() : makeFat32();
    58b4:	bl	5660 <FatFormatter::makeFat32()>
    58b8:	mov	r5, r0
    58ba:	b.n	585c <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x38>
    58bc:	movs	r3, #4
    58be:	b.n	584a <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x26>
    58c0:	movs	r3, #8
    58c2:	b.n	584a <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x26>
    58c4:	movs	r3, #16
    58c6:	b.n	584a <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x26>
    58c8:	movs	r3, #32
    58ca:	b.n	584a <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x26>
    58cc:	.word	0x20000794
    58d0:	.word	0x2000077c
    58d4:	.word	0x200007a4

000058d8 <FatFile::getLfnChar(DirLfn_t*, unsigned char)>:
#include "../common/DebugMacros.h"
#include "../common/FsUtf.h"
#include "FatLib.h"
//------------------------------------------------------------------------------
uint16_t FatFile::getLfnChar(DirLfn_t* ldir, uint8_t i) {
  if (i < 5) {
    58d8:	cmp	r2, #4
    58da:	bhi.n	58e6 <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0xe>
  return *reinterpret_cast<const uint16_t*>(src);
    58dc:	add.w	r2, r1, r2, lsl #1
    58e0:	ldrh.w	r0, [r2, #1]
    return getLe16(ldir->unicode1 + 2 * i);
    58e4:	bx	lr
  } else if (i < 11) {
    58e6:	cmp	r2, #10
    58e8:	bhi.n	58f2 <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0x1a>
    58ea:	add.w	r2, r1, r2, lsl #1
    58ee:	ldrh	r0, [r2, #4]
    return getLe16(ldir->unicode2 + 2 * (i - 5));
    58f0:	bx	lr
  } else if (i < 13) {
    58f2:	cmp	r2, #12
    58f4:	bhi.n	58fe <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0x26>
    58f6:	add.w	r1, r1, r2, lsl #1
    58fa:	ldrh	r0, [r1, #6]
    return getLe16(ldir->unicode3 + 2 * (i - 11));
    58fc:	bx	lr
  }
  DBG_HALT_IF(i >= 13);
  return 0;
    58fe:	movs	r0, #0
}
    5900:	bx	lr
    5902:	nop

00005904 <FatFile::getSFN(char*, unsigned int)>:
fail:
  *name = 0;
  return 0;
}
//------------------------------------------------------------------------------
size_t FatFile::getSFN(char* name, size_t size) {
    5904:	push	{r3, r4, r5, r6, r7, lr}
  bool isOpen() const { return m_attributes; }
    5906:	ldrb	r4, [r0, #0]
    5908:	mov	r6, r1
  char c;
  uint8_t j = 0;
  uint8_t lcBit = FAT_CASE_LC_BASE;
  uint8_t* ptr;
  DirFat_t* dir;
  if (!isOpen()) {
    590a:	cbz	r4, 592c <FatFile::getSFN(char*, unsigned int)+0x28>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isRoot()) {
    590c:	ands.w	r4, r4, #192	; 0xc0
    5910:	mov	r7, r2
    5912:	beq.n	5924 <FatFile::getSFN(char*, unsigned int)+0x20>
    if (size < 2) {
    5914:	cmp	r2, #1
    5916:	bls.n	592c <FatFile::getSFN(char*, unsigned int)+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    name[0] = '/';
    5918:	movs	r2, #47	; 0x2f
    name[1] = '\0';
    591a:	movs	r3, #0
    return 1;
    591c:	movs	r0, #1
    name[0] = '/';
    591e:	strb	r2, [r1, #0]
    name[1] = '\0';
    5920:	strb	r3, [r1, #1]
  return j;

fail:
  name[0] = '\0';
  return 0;
}
    5922:	pop	{r3, r4, r5, r6, r7, pc}
  dir = cacheDirEntry(FsCache::CACHE_FOR_READ);
    5924:	mov	r1, r4
    5926:	bl	5be8 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    592a:	cbnz	r0, 5934 <FatFile::getSFN(char*, unsigned int)+0x30>
  name[0] = '\0';
    592c:	movs	r3, #0
  return 0;
    592e:	mov	r0, r3
  name[0] = '\0';
    5930:	strb	r3, [r6, #0]
}
    5932:	pop	{r3, r4, r5, r6, r7, pc}
  ptr = dir->name;
    5934:	mov	r3, r0
    5936:	mov	ip, r4
  uint8_t lcBit = FAT_CASE_LC_BASE;
    5938:	movs	r1, #8
    593a:	b.n	5960 <FatFile::getSFN(char*, unsigned int)+0x5c>
      if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
    593c:	ldrb	r2, [r0, #12]
    593e:	tst	r1, r2
    5940:	beq.n	594a <FatFile::getSFN(char*, unsigned int)+0x46>
        c += 'a' - 'A';
    5942:	add.w	lr, lr, #32
    5946:	uxtb.w	lr, lr
    if ((j + 1u) >= size) {
    594a:	adds	r5, r4, #1
    594c:	cmp	r5, r7
    594e:	bcs.n	592c <FatFile::getSFN(char*, unsigned int)+0x28>
  for (uint8_t i = 0; i < 12; i++) {
    5950:	add.w	ip, ip, #1
    name[j++] = c;
    5954:	strb.w	lr, [r6, r4]
    5958:	uxtb	r4, r5
  for (uint8_t i = 0; i < 12; i++) {
    595a:	cmp.w	ip, #12
    595e:	beq.n	5982 <FatFile::getSFN(char*, unsigned int)+0x7e>
    if (i == 8) {
    5960:	cmp.w	ip, #8
    5964:	beq.n	598a <FatFile::getSFN(char*, unsigned int)+0x86>
      c = *ptr++;
    5966:	ldrb.w	lr, [r3], #1
      if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
    596a:	sub.w	r2, lr, #65	; 0x41
    596e:	cmp	r2, #25
    5970:	bls.n	593c <FatFile::getSFN(char*, unsigned int)+0x38>
      if (c == ' ') {
    5972:	cmp.w	lr, #32
    5976:	bne.n	594a <FatFile::getSFN(char*, unsigned int)+0x46>
  for (uint8_t i = 0; i < 12; i++) {
    5978:	add.w	ip, ip, #1
    597c:	cmp.w	ip, #12
    5980:	bne.n	5960 <FatFile::getSFN(char*, unsigned int)+0x5c>
  name[j] = '\0';
    5982:	movs	r3, #0
    5984:	mov	r0, r4
    5986:	strb	r3, [r6, r4]
}
    5988:	pop	{r3, r4, r5, r6, r7, pc}
      if (*ptr == ' ') {
    598a:	ldrb	r2, [r3, #0]
    598c:	cmp	r2, #32
    598e:	beq.n	5982 <FatFile::getSFN(char*, unsigned int)+0x7e>
      lcBit = FAT_CASE_LC_EXT;
    5990:	movs	r1, #16
      c = '.';
    5992:	mov.w	lr, #46	; 0x2e
    5996:	b.n	594a <FatFile::getSFN(char*, unsigned int)+0x46>

00005998 <FatFile::getName7(char*, unsigned int)>:
size_t FatFile::getName7(char* name, size_t size) {
    5998:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  FatFile() {}
    599c:	movs	r5, #0
    599e:	sub	sp, #44	; 0x2c
  if (!isOpen()) {
    59a0:	ldrb	r3, [r0, #0]
size_t FatFile::getName7(char* name, size_t size) {
    59a2:	mov	r8, r1
    59a4:	str	r5, [sp, #4]
  if (!isOpen()) {
    59a6:	cmp	r3, #0
    59a8:	beq.n	5a4c <FatFile::getName7(char*, unsigned int)+0xb4>
  if (!isLFN()) {
    59aa:	ldrb	r3, [r0, #3]
    59ac:	mov	r6, r0
    59ae:	cmp	r3, #0
    59b0:	beq.n	5a5c <FatFile::getName7(char*, unsigned int)+0xc4>
  if (!dir.openCluster(this)) {
    59b2:	mov	r1, r0
    59b4:	add	r0, sp, #4
    59b6:	mov	r7, r2
    59b8:	bl	6014 <FatFile::openCluster(FatFile*)>
    59bc:	cmp	r0, #0
    59be:	beq.n	5a4c <FatFile::getName7(char*, unsigned int)+0xb4>
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    59c0:	ldrb	r3, [r6, #3]
    59c2:	cmp	r3, #0
    59c4:	beq.n	5a78 <FatFile::getName7(char*, unsigned int)+0xe0>
    59c6:	mov.w	r9, #1
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(m_dirIndex - order));
    59ca:	ldrh	r1, [r6, #4]
  // private functions

  bool addCluster();
  bool addDirCluster();
  DirFat_t* cacheDir(uint16_t index) {
    return seekSet(32UL * index) ? readDirCache() : nullptr;
    59cc:	add	r0, sp, #4
    59ce:	sub.w	r1, r1, r9
    59d2:	uxth	r1, r1
    59d4:	lsls	r1, r1, #5
    59d6:	bl	6534 <FatFile::seekSet(unsigned long)>
    59da:	cbz	r0, 5a4c <FatFile::getName7(char*, unsigned int)+0xb4>
    59dc:	movs	r1, #0
    59de:	add	r0, sp, #4
    59e0:	bl	6274 <FatFile::readDirCache(bool)>
    if (!ldir) {
    59e4:	cbz	r0, 5a4c <FatFile::getName7(char*, unsigned int)+0xb4>
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    59e6:	ldrb	r3, [r0, #11]
    59e8:	cmp	r3, #15
    59ea:	bne.n	5a4c <FatFile::getName7(char*, unsigned int)+0xb4>
    59ec:	ldrb	r3, [r0, #0]
    59ee:	uxtb.w	r2, r9
    59f2:	and.w	r3, r3, #31
    59f6:	cmp	r3, r2
    59f8:	bne.n	5a4c <FatFile::getName7(char*, unsigned int)+0xb4>
    59fa:	subs	r2, r5, #1
    59fc:	add.w	ip, r0, #1
    for (uint8_t i = 0; i < 13; i++) {
    5a00:	movs	r3, #0
    5a02:	add	r2, r8
  if (i < 5) {
    5a04:	cmp	r3, #4
    5a06:	bhi.n	5a6a <FatFile::getName7(char*, unsigned int)+0xd2>
    5a08:	ldrh.w	r4, [ip]
    for (uint8_t i = 0; i < 13; i++) {
    5a0c:	adds	r3, #1
    5a0e:	add.w	ip, ip, #2
      if (c == 0) {
    5a12:	cbz	r4, 5a3c <FatFile::getName7(char*, unsigned int)+0xa4>
      if ((n + 1) >= size) {
    5a14:	adds	r5, #1
    for (uint8_t i = 0; i < 13; i++) {
    5a16:	uxtb	r3, r3
      if ((n + 1) >= size) {
    5a18:	cmp	r5, r7
    5a1a:	bcs.n	5a4c <FatFile::getName7(char*, unsigned int)+0xb4>
      name[n++] = c >= 0X7F ? '?' : c;
    5a1c:	cmp	r4, #127	; 0x7f
    5a1e:	it	cs
    5a20:	movcs	r4, #63	; 0x3f
    for (uint8_t i = 0; i < 13; i++) {
    5a22:	cmp	r3, #13
      name[n++] = c >= 0X7F ? '?' : c;
    5a24:	strb.w	r4, [r2, #1]!
    for (uint8_t i = 0; i < 13; i++) {
    5a28:	bne.n	5a04 <FatFile::getName7(char*, unsigned int)+0x6c>
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    5a2a:	add.w	r9, r9, #1
    5a2e:	ldrb	r2, [r6, #3]
    5a30:	uxtb.w	r3, r9
    5a34:	uxth.w	r9, r9
    5a38:	cmp	r2, r3
    5a3a:	bcs.n	59ca <FatFile::getName7(char*, unsigned int)+0x32>
  name[n] = 0;
    5a3c:	add	r8, r5
    5a3e:	movs	r3, #0
}
    5a40:	mov	r0, r5
  name[n] = 0;
    5a42:	strb.w	r3, [r8]
}
    5a46:	add	sp, #44	; 0x2c
    5a48:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  name[0] = '\0';
    5a4c:	movs	r3, #0
  return 0;
    5a4e:	mov	r5, r3
  name[0] = '\0';
    5a50:	strb.w	r3, [r8]
}
    5a54:	mov	r0, r5
    5a56:	add	sp, #44	; 0x2c
    5a58:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return getSFN(name, size);
    5a5c:	bl	5904 <FatFile::getSFN(char*, unsigned int)>
    5a60:	mov	r5, r0
}
    5a62:	mov	r0, r5
    5a64:	add	sp, #44	; 0x2c
    5a66:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  } else if (i < 11) {
    5a6a:	cmp	r3, #10
    5a6c:	ite	ls
    5a6e:	ldrhls.w	r4, [ip, #3]
    5a72:	ldrhhi.w	r4, [ip, #5]
    return getLe16(ldir->unicode3 + 2 * (i - 11));
    5a76:	b.n	5a0c <FatFile::getName7(char*, unsigned int)+0x74>
  size_t n = 0;
    5a78:	mov	r5, r3
    5a7a:	b.n	5a3e <FatFile::getName7(char*, unsigned int)+0xa6>

00005a7c <FatFile::getName(char*, unsigned int)>:
  return getName7(name, size);
    5a7c:	b.w	5998 <FatFile::getName7(char*, unsigned int)>

00005a80 <FatFile::sync() [clone .part.0]>:
fail:
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
    5a80:	push	{r4, r5, r6, lr}
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    5a82:	ldrsb.w	r3, [r0, #2]
bool FatFile::sync() {
    5a86:	sub	sp, #8
    5a88:	mov	r4, r0
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    5a8a:	cmp	r3, #0
    5a8c:	blt.n	5aaa <FatFile::sync() [clone .part.0]+0x2a>
      setLe16(dir->modifyTime, time);
    }
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
  }
  if (m_vol->cacheSync()) {
    5a8e:	ldr	r5, [r4, #8]
  uint8_t* fatCachePrepare(uint32_t sector, uint8_t options) {
    options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return m_fatCache.prepare(sector, options);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    5a90:	add.w	r0, r5, #36	; 0x24
    5a94:	bl	3154 <FsCache::sync()>
    5a98:	cmp	r0, #0
    5a9a:	bne.n	5b1c <FatFile::sync() [clone .part.0]+0x9c>
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
    5a9c:	ldrb	r3, [r4, #1]
  return false;
    5a9e:	movs	r0, #0
  m_error |= WRITE_ERROR;
    5aa0:	orr.w	r3, r3, #1
    5aa4:	strb	r3, [r4, #1]
}
    5aa6:	add	sp, #8
    5aa8:	pop	{r4, r5, r6, pc}
    return dataCachePrepare(sector, options);
  }
  bool cacheSync() { return m_cache.sync() && syncDevice(); }
#endif  // USE_SEPARATE_FAT_CACHE
  uint8_t* dataCachePrepare(uint32_t sector, uint8_t options) {
    return m_cache.prepare(sector, options);
    5aaa:	ldr	r0, [r0, #8]
    5aac:	movs	r2, #1
    5aae:	ldr	r1, [r4, #24]
    5ab0:	adds	r0, #36	; 0x24
    5ab2:	bl	31ac <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    5ab6:	cmp	r0, #0
    5ab8:	beq.n	5a9c <FatFile::sync() [clone .part.0]+0x1c>
  return dir + (m_dirIndex & 0XF);
    5aba:	ldrh	r5, [r4, #4]
    5abc:	and.w	r5, r5, #15
    5ac0:	lsls	r3, r5, #5
    5ac2:	add.w	r5, r0, r5, lsl #5
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
    5ac6:	ldrb	r3, [r0, r3]
    5ac8:	cmp	r3, #229	; 0xe5
    5aca:	beq.n	5a9c <FatFile::sync() [clone .part.0]+0x1c>
    dir->attributes = m_attributes & FS_ATTRIB_COPY;
    5acc:	ldrb	r3, [r4, #0]
    5ace:	and.w	r3, r3, #55	; 0x37
    5ad2:	strb	r3, [r5, #11]
    if (isFile()) {
    5ad4:	ldrb	r3, [r4, #0]
    5ad6:	lsls	r3, r3, #28
    5ad8:	bpl.n	5ade <FatFile::sync() [clone .part.0]+0x5e>
      setLe32(dir->fileSize, m_fileSize);
    5ada:	ldr	r3, [r4, #28]
  *reinterpret_cast<uint32_t*>(dst) = src;
    5adc:	str	r3, [r5, #28]
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    5ade:	ldr	r3, [r4, #32]
    if (FsDateTime::callback) {
    5ae0:	ldr	r1, [pc, #84]	; (5b38 <FatFile::sync() [clone .part.0]+0xb8>)
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);
    5ae2:	lsrs	r2, r3, #16
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    5ae4:	strh	r3, [r5, #26]
    if (FsDateTime::callback) {
    5ae6:	ldr	r6, [r1, #0]
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);
    5ae8:	strh	r2, [r5, #20]
    if (FsDateTime::callback) {
    5aea:	cbz	r6, 5b06 <FatFile::sync() [clone .part.0]+0x86>
      FsDateTime::callback(&date, &time, &ms10);
    5aec:	add.w	r2, sp, #3
    5af0:	add.w	r1, sp, #6
    5af4:	add	r0, sp, #4
    5af6:	blx	r6
      setLe16(dir->modifyDate, date);
    5af8:	ldrh.w	r3, [sp, #4]
  *reinterpret_cast<uint16_t*>(dst) = src;
    5afc:	ldrh.w	r2, [sp, #6]
    5b00:	strh	r3, [r5, #24]
    5b02:	strh	r3, [r5, #18]
    5b04:	strh	r2, [r5, #22]
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    5b06:	ldrb	r3, [r4, #2]
  if (m_vol->cacheSync()) {
    5b08:	ldr	r5, [r4, #8]
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    5b0a:	and.w	r3, r3, #127	; 0x7f
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    5b0e:	add.w	r0, r5, #36	; 0x24
    5b12:	strb	r3, [r4, #2]
    5b14:	bl	3154 <FsCache::sync()>
    5b18:	cmp	r0, #0
    5b1a:	beq.n	5a9c <FatFile::sync() [clone .part.0]+0x1c>
    5b1c:	add.w	r0, r5, #564	; 0x234
    5b20:	bl	3154 <FsCache::sync()>
    5b24:	cmp	r0, #0
    5b26:	beq.n	5a9c <FatFile::sync() [clone .part.0]+0x1c>
    5b28:	ldr	r0, [r5, #0]
  bool syncDevice() { return m_blockDev->syncDevice(); }
    5b2a:	ldr	r3, [r0, #0]
    5b2c:	ldr	r3, [r3, #28]
    5b2e:	blx	r3
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    5b30:	cmp	r0, #0
    5b32:	beq.n	5a9c <FatFile::sync() [clone .part.0]+0x1c>
    5b34:	b.n	5aa6 <FatFile::sync() [clone .part.0]+0x26>
    5b36:	nop
    5b38:	.word	0x20006404

00005b3c <FatFile::addCluster()>:
  uint32_t cc = m_curCluster;
    5b3c:	mov	r2, r0
bool FatFile::addCluster() {
    5b3e:	push	{r3, r4, r5, lr}
  uint32_t cc = m_curCluster;
    5b40:	ldr.w	r5, [r2, #16]!
bool FatFile::addCluster() {
    5b44:	mov	r4, r0
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    5b46:	ldr	r0, [r0, #8]
    5b48:	mov	r1, r5
    5b4a:	bl	6bf8 <FatPartition::allocateCluster(unsigned long, unsigned long*)>
    5b4e:	cbz	r0, 5b66 <FatFile::addCluster()+0x2a>
  if (cc == 0) {
    5b50:	cbz	r5, 5b68 <FatFile::addCluster()+0x2c>
  } else if (m_curCluster != (cc + 1)) {
    5b52:	ldr	r3, [r4, #16]
    5b54:	adds	r5, #1
    5b56:	cmp	r3, r5
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    5b58:	ldrb	r3, [r4, #2]
    5b5a:	it	ne
    5b5c:	andne.w	r3, r3, #191	; 0xbf
  m_flags |= FILE_FLAG_DIR_DIRTY;
    5b60:	orn	r3, r3, #127	; 0x7f
    5b64:	strb	r3, [r4, #2]
}
    5b66:	pop	{r3, r4, r5, pc}
    m_flags |= FILE_FLAG_CONTIGUOUS;
    5b68:	ldrb	r3, [r4, #2]
    5b6a:	orr.w	r3, r3, #64	; 0x40
    5b6e:	b.n	5b60 <FatFile::addCluster()+0x24>

00005b70 <FatFile::addDirCluster()>:
bool FatFile::addDirCluster() {
    5b70:	push	{r3, r4, r5, r6, r7, lr}
  if (isRootFixed()) {
    5b72:	ldrb	r4, [r0, #0]
    5b74:	ands.w	r4, r4, #64	; 0x40
    5b78:	bne.n	5b84 <FatFile::addDirCluster()+0x14>
  if (m_curPosition >= 512UL * 4095) {
    5b7a:	ldr	r3, [pc, #104]	; (5be4 <FatFile::addDirCluster()+0x74>)
    5b7c:	mov	r5, r0
    5b7e:	ldr	r2, [r0, #20]
    5b80:	cmp	r2, r3
    5b82:	bcc.n	5b8a <FatFile::addDirCluster()+0x1a>
  return false;
    5b84:	movs	r7, #0
}
    5b86:	mov	r0, r7
    5b88:	pop	{r3, r4, r5, r6, r7, pc}
  if (!addCluster()) {
    5b8a:	bl	5b3c <FatFile::addCluster()>
    5b8e:	mov	r7, r0
    5b90:	cmp	r0, #0
    5b92:	beq.n	5b84 <FatFile::addDirCluster()+0x14>
  sector = m_vol->clusterStartSector(m_curCluster);
    5b94:	ldr	r0, [r5, #8]
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
  }
  uint32_t clusterStartSector(uint32_t cluster) const {
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    5b96:	ldr	r6, [r5, #16]
    5b98:	ldrb	r2, [r0, #6]
    5b9a:	subs	r6, #2
    5b9c:	ldr	r1, [r0, #20]
    5b9e:	lsls	r6, r2
    5ba0:	add	r6, r1
  for (uint8_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    5ba2:	ldrb	r1, [r0, #4]
    5ba4:	cbz	r1, 5bd2 <FatFile::addDirCluster()+0x62>
    5ba6:	mov	r1, r4
    5ba8:	b.n	5bb8 <FatFile::addDirCluster()+0x48>
    memset(pc, 0, m_vol->bytesPerSector());
    5baa:	bl	e044 <memset>
  for (uint8_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    5bae:	ldr	r0, [r5, #8]
    5bb0:	uxtb	r1, r4
    5bb2:	ldrb	r2, [r0, #4]
    5bb4:	cmp	r2, r1
    5bb6:	bls.n	5bd0 <FatFile::addDirCluster()+0x60>
    return m_cache.prepare(sector, options);
    5bb8:	add	r1, r6
    5bba:	movs	r2, #5
    5bbc:	adds	r0, #36	; 0x24
    5bbe:	adds	r4, #1
    5bc0:	bl	31ac <FsCache::prepare(unsigned long, unsigned char)>
    memset(pc, 0, m_vol->bytesPerSector());
    5bc4:	mov.w	r2, #512	; 0x200
    5bc8:	movs	r1, #0
    if (!pc) {
    5bca:	cmp	r0, #0
    5bcc:	bne.n	5baa <FatFile::addDirCluster()+0x3a>
    5bce:	b.n	5b84 <FatFile::addDirCluster()+0x14>
    return m_bytesPerSector << m_sectorsPerClusterShift;
    5bd0:	ldrb	r2, [r0, #6]
    5bd2:	mov.w	r3, #512	; 0x200
  m_curPosition += m_vol->bytesPerCluster();
    5bd6:	ldr	r1, [r5, #20]
}
    5bd8:	mov	r0, r7
    5bda:	lsls	r3, r2
  m_curPosition += m_vol->bytesPerCluster();
    5bdc:	uxtah	r3, r1, r3
    5be0:	str	r3, [r5, #20]
}
    5be2:	pop	{r3, r4, r5, r6, r7, pc}
    5be4:	.word	0x001ffe00

00005be8 <FatFile::cacheDirEntry(unsigned char)>:
DirFat_t* FatFile::cacheDirEntry(uint8_t action) {
    5be8:	push	{r4, lr}
    5bea:	mov	r4, r0
    return m_cache.prepare(sector, options);
    5bec:	ldr	r0, [r0, #8]
    5bee:	mov	r2, r1
    5bf0:	adds	r0, #36	; 0x24
    5bf2:	ldr	r1, [r4, #24]
    5bf4:	bl	31ac <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    5bf8:	cbz	r0, 5c04 <FatFile::cacheDirEntry(unsigned char)+0x1c>
  return dir + (m_dirIndex & 0XF);
    5bfa:	ldrh	r3, [r4, #4]
    5bfc:	and.w	r3, r3, #15
    5c00:	add.w	r0, r0, r3, lsl #5
}
    5c04:	pop	{r4, pc}
    5c06:	nop

00005c08 <FatFile::close()>:
bool FatFile::close() {
    5c08:	push	{r4, lr}
  if (!isOpen()) {
    5c0a:	ldrb	r3, [r0, #0]
bool FatFile::close() {
    5c0c:	mov	r4, r0
  if (!isOpen()) {
    5c0e:	cbz	r3, 5c1c <FatFile::close()+0x14>
    5c10:	bl	5a80 <FatFile::sync() [clone .part.0]>
  m_attributes = FILE_ATTR_CLOSED;
    5c14:	movs	r3, #0
    5c16:	strb	r3, [r4, #0]
  m_flags = 0;
    5c18:	strb	r3, [r4, #2]
}
    5c1a:	pop	{r4, pc}
  m_attributes = FILE_ATTR_CLOSED;
    5c1c:	movs	r3, #0
    return true;
    5c1e:	movs	r0, #1
  m_attributes = FILE_ATTR_CLOSED;
    5c20:	strb	r3, [r4, #0]
  m_flags = 0;
    5c22:	strb	r3, [r4, #2]
}
    5c24:	pop	{r4, pc}
    5c26:	nop

00005c28 <FatFile::dirEntry(DirFat_t*)>:
bool FatFile::dirEntry(DirFat_t* dst) {
    5c28:	push	{r3, r4, r5, lr}
  if (!isOpen()) {
    5c2a:	ldrb	r3, [r0, #0]
bool FatFile::dirEntry(DirFat_t* dst) {
    5c2c:	mov	r5, r0
    5c2e:	mov	r4, r1
  if (!isOpen()) {
    5c30:	cbz	r3, 5c38 <FatFile::dirEntry(DirFat_t*)+0x10>
    5c32:	bl	5a80 <FatFile::sync() [clone .part.0]>
  if (!sync()) {
    5c36:	cbz	r0, 5c76 <FatFile::dirEntry(DirFat_t*)+0x4e>
    5c38:	ldr	r0, [r5, #8]
    5c3a:	movs	r2, #0
    5c3c:	ldr	r1, [r5, #24]
    5c3e:	adds	r0, #36	; 0x24
    5c40:	bl	31ac <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    5c44:	cbz	r0, 5c76 <FatFile::dirEntry(DirFat_t*)+0x4e>
  return dir + (m_dirIndex & 0XF);
    5c46:	ldrh	r2, [r5, #4]
    5c48:	and.w	r2, r2, #15
    5c4c:	add.w	r3, r0, r2, lsl #5
    5c50:	lsls	r2, r2, #5
  memcpy(dst, dir, sizeof(DirFat_t));
    5c52:	ldr	r5, [r3, #4]
    5c54:	ldr	r0, [r0, r2]
    5c56:	ldr	r1, [r3, #8]
    5c58:	ldr	r2, [r3, #12]
    5c5a:	str	r0, [r4, #0]
    5c5c:	str	r5, [r4, #4]
    5c5e:	str	r1, [r4, #8]
    5c60:	str	r2, [r4, #12]
    5c62:	ldr	r0, [r3, #16]
    5c64:	ldr	r5, [r3, #20]
    5c66:	ldr	r1, [r3, #24]
    5c68:	ldr	r2, [r3, #28]
    5c6a:	str	r0, [r4, #16]
  return true;
    5c6c:	movs	r0, #1
  memcpy(dst, dir, sizeof(DirFat_t));
    5c6e:	str	r5, [r4, #20]
    5c70:	str	r1, [r4, #24]
    5c72:	str	r2, [r4, #28]
}
    5c74:	pop	{r3, r4, r5, pc}
  return false;
    5c76:	movs	r0, #0
}
    5c78:	pop	{r3, r4, r5, pc}
    5c7a:	nop

00005c7c <FatFile::getCreateDateTime(unsigned short*, unsigned short*)>:
bool FatFile::getCreateDateTime(uint16_t* pdate, uint16_t* ptime) {
    5c7c:	push	{r4, r5, lr}
    5c7e:	sub	sp, #36	; 0x24
    5c80:	mov	r5, r1
    5c82:	mov	r4, r2
  if (!dirEntry(&dir)) {
    5c84:	mov	r1, sp
    5c86:	bl	5c28 <FatFile::dirEntry(DirFat_t*)>
    5c8a:	cbz	r0, 5c98 <FatFile::getCreateDateTime(unsigned short*, unsigned short*)+0x1c>
  *pdate = getLe16(dir.createDate);
    5c8c:	ldrh.w	r2, [sp, #16]
  *ptime = getLe16(dir.createTime);
    5c90:	ldrh.w	r3, [sp, #14]
  *pdate = getLe16(dir.createDate);
    5c94:	strh	r2, [r5, #0]
  *ptime = getLe16(dir.createTime);
    5c96:	strh	r3, [r4, #0]
}
    5c98:	add	sp, #36	; 0x24
    5c9a:	pop	{r4, r5, pc}

00005c9c <FatFile::getModifyDateTime(unsigned short*, unsigned short*)>:
bool FatFile::getModifyDateTime(uint16_t* pdate, uint16_t* ptime) {
    5c9c:	push	{r4, r5, lr}
    5c9e:	sub	sp, #36	; 0x24
    5ca0:	mov	r5, r1
    5ca2:	mov	r4, r2
  if (!dirEntry(&dir)) {
    5ca4:	mov	r1, sp
    5ca6:	bl	5c28 <FatFile::dirEntry(DirFat_t*)>
    5caa:	cbz	r0, 5cb8 <FatFile::getModifyDateTime(unsigned short*, unsigned short*)+0x1c>
  *pdate = getLe16(dir.modifyDate);
    5cac:	ldrh.w	r2, [sp, #24]
  *ptime = getLe16(dir.modifyTime);
    5cb0:	ldrh.w	r3, [sp, #22]
  *pdate = getLe16(dir.modifyDate);
    5cb4:	strh	r2, [r5, #0]
  *ptime = getLe16(dir.modifyTime);
    5cb6:	strh	r3, [r4, #0]
}
    5cb8:	add	sp, #36	; 0x24
    5cba:	pop	{r4, r5, pc}

00005cbc <FatFile::mkdir(FatFile*, FatLfn_t*)>:
  if (!parent->isDir()) {
    5cbc:	ldrb	r3, [r1, #0]
    5cbe:	tst.w	r3, #208	; 0xd0
    5cc2:	bne.n	5cc8 <FatFile::mkdir(FatFile*, FatLfn_t*)+0xc>
}
    5cc4:	movs	r0, #0
    5cc6:	bx	lr
bool FatFile::mkdir(FatFile* parent, FatName_t* fname) {
    5cc8:	push	{r4, r5, r6, r7, lr}
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    5cca:	movw	r3, #2562	; 0xa02
bool FatFile::mkdir(FatFile* parent, FatName_t* fname) {
    5cce:	sub	sp, #36	; 0x24
    5cd0:	mov	r5, r1
    5cd2:	mov	r4, r0
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    5cd4:	bl	7280 <FatFile::open(FatFile*, FatLfn_t*, int)>
    5cd8:	cbz	r0, 5cea <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
  m_flags = FILE_FLAG_READ;
    5cda:	movs	r2, #1
  m_attributes = FILE_ATTR_SUBDIR;
    5cdc:	movs	r3, #16
  if (!addDirCluster()) {
    5cde:	mov	r0, r4
  m_flags = FILE_FLAG_READ;
    5ce0:	strb	r2, [r4, #2]
  m_attributes = FILE_ATTR_SUBDIR;
    5ce2:	strb	r3, [r4, #0]
  if (!addDirCluster()) {
    5ce4:	bl	5b70 <FatFile::addDirCluster()>
    5ce8:	cbnz	r0, 5cf0 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x34>
}
    5cea:	movs	r0, #0
    5cec:	add	sp, #36	; 0x24
    5cee:	pop	{r4, r5, r6, r7, pc}
  m_firstCluster = m_curCluster;
    5cf0:	ldr	r2, [r4, #16]
  if (!isOpen()) {
    5cf2:	ldrb	r3, [r4, #0]
  m_firstCluster = m_curCluster;
    5cf4:	str	r2, [r4, #32]
  if (!isOpen()) {
    5cf6:	cbz	r3, 5d14 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x58>
  if (pos == m_curPosition) {
    5cf8:	ldr	r3, [r4, #20]
    5cfa:	cbz	r3, 5d0a <FatFile::mkdir(FatFile*, FatLfn_t*)+0x4e>
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    5cfc:	ldrb	r3, [r4, #2]
    m_curCluster = 0;
    5cfe:	movs	r2, #0
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    5d00:	bic.w	r3, r3, #32
  m_curPosition = pos;
    5d04:	strd	r2, r2, [r4, #16]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    5d08:	strb	r3, [r4, #2]
  if (!isOpen()) {
    5d0a:	mov	r0, r4
    5d0c:	bl	5a80 <FatFile::sync() [clone .part.0]>
  if (!sync()) {
    5d10:	cmp	r0, #0
    5d12:	beq.n	5cea <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
    5d14:	ldr	r0, [r4, #8]
    5d16:	movs	r2, #1
    5d18:	ldr	r1, [r4, #24]
    5d1a:	adds	r0, #36	; 0x24
    5d1c:	bl	31ac <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    5d20:	cmp	r0, #0
    5d22:	beq.n	5cea <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
  return dir + (m_dirIndex & 0XF);
    5d24:	ldrh.w	ip, [r4, #4]
  dir->attributes = FS_ATTRIB_DIRECTORY;
    5d28:	movs	r2, #16
  return dir + (m_dirIndex & 0XF);
    5d2a:	and.w	ip, ip, #15
    5d2e:	mov.w	r3, ip, lsl #5
    5d32:	add.w	ip, r0, ip, lsl #5
  dir->attributes = FS_ATTRIB_DIRECTORY;
    5d36:	strb.w	r2, [ip, #11]
  memcpy(&dot, dir, sizeof(dot));
    5d3a:	ldr	r0, [r0, r3]
  sector = m_vol->clusterStartSector(m_firstCluster);
    5d3c:	ldr	r7, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    5d3e:	ldr	r3, [r4, #32]
    5d40:	ldrb.w	lr, [r7, #6]
    5d44:	subs	r6, r3, #2
  memcpy(&dot, dir, sizeof(dot));
    5d46:	ldr.w	r1, [ip, #4]
    5d4a:	ldr.w	r2, [ip, #8]
    5d4e:	ldr.w	r3, [ip, #12]
    5d52:	lsl.w	r6, r6, lr
    5d56:	mov	lr, sp
    5d58:	stmia.w	lr!, {r0, r1, r2, r3}
    5d5c:	ldr.w	r0, [ip, #16]
    5d60:	ldr.w	r1, [ip, #20]
    5d64:	ldr.w	r2, [ip, #24]
    5d68:	ldr.w	r3, [ip, #28]
    5d6c:	stmia.w	lr!, {r0, r1, r2, r3}
    return m_cache.prepare(sector, options);
    5d70:	ldr	r3, [r7, #20]
    5d72:	add.w	r0, r7, #36	; 0x24
    5d76:	movs	r2, #1
    5d78:	adds	r1, r6, r3
    dot.name[i] = ' ';
    5d7a:	mov.w	r3, #538976288	; 0x20202020
    5d7e:	str.w	r3, [sp, #1]
    5d82:	str.w	r3, [sp, #5]
    5d86:	strh.w	r3, [sp, #9]
    5d8a:	bl	31ac <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    5d8e:	mov	ip, r0
    5d90:	cmp	r0, #0
    5d92:	beq.n	5cea <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
  memcpy(&dir[0], &dot, sizeof(dot));
    5d94:	movs	r7, #46	; 0x2e
    5d96:	mov	lr, sp
    5d98:	strb.w	r7, [sp]
  memcpy(&dir[1], &dot, sizeof(dot));
    5d9c:	mov	r6, lr
  memcpy(&dir[0], &dot, sizeof(dot));
    5d9e:	ldmia.w	lr!, {r0, r1, r2, r3}
    5da2:	str.w	r0, [ip]
    5da6:	str.w	r1, [ip, #4]
    5daa:	str.w	r2, [ip, #8]
    5dae:	str.w	r3, [ip, #12]
  dot.name[1] = '.';
    5db2:	strb.w	r7, [sp, #1]
  memcpy(&dir[0], &dot, sizeof(dot));
    5db6:	ldmia.w	lr!, {r0, r1, r2, r3}
    5dba:	str.w	r0, [ip, #16]
    5dbe:	str.w	r1, [ip, #20]
    5dc2:	str.w	r2, [ip, #24]
    5dc6:	str.w	r3, [ip, #28]
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
    5dca:	ldr	r3, [r5, #32]
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
    5dcc:	lsrs	r2, r3, #16
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
    5dce:	strh.w	r3, [sp, #26]
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
    5dd2:	strh.w	r2, [sp, #20]
  memcpy(&dir[1], &dot, sizeof(dot));
    5dd6:	ldmia	r6!, {r0, r1, r2, r3}
    5dd8:	str.w	r0, [ip, #32]
    5ddc:	str.w	r1, [ip, #36]	; 0x24
    5de0:	str.w	r2, [ip, #40]	; 0x28
    5de4:	str.w	r3, [ip, #44]	; 0x2c
    5de8:	ldmia	r6!, {r0, r1, r2, r3}
    5dea:	str.w	r0, [ip, #48]	; 0x30
    5dee:	str.w	r1, [ip, #52]	; 0x34
    5df2:	str.w	r2, [ip, #56]	; 0x38
    5df6:	str.w	r3, [ip, #60]	; 0x3c
  return m_vol->cacheSync();
    5dfa:	ldr	r4, [r4, #8]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    5dfc:	add.w	r0, r4, #36	; 0x24
    5e00:	bl	3154 <FsCache::sync()>
    5e04:	cmp	r0, #0
    5e06:	beq.w	5cea <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
    5e0a:	add.w	r0, r4, #564	; 0x234
    5e0e:	bl	3154 <FsCache::sync()>
    5e12:	cmp	r0, #0
    5e14:	beq.w	5cea <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
    5e18:	ldr	r0, [r4, #0]
  bool syncDevice() { return m_blockDev->syncDevice(); }
    5e1a:	ldr	r3, [r0, #0]
    5e1c:	ldr	r3, [r3, #28]
}
    5e1e:	add	sp, #36	; 0x24
    5e20:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    5e24:	bx	r3
    5e26:	nop

00005e28 <FatFile::mkdir(FatFile*, char const*, bool)>:
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    5e28:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  FatFile() {}
    5e2c:	movs	r6, #0
    5e2e:	sub	sp, #80	; 0x50
    5e30:	mov	r8, r3
  if (isOpen() || !parent->isDir()) {
    5e32:	ldrb	r3, [r0, #0]
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    5e34:	str	r2, [sp, #4]
    5e36:	str	r6, [sp, #44]	; 0x2c
  if (isOpen() || !parent->isDir()) {
    5e38:	cmp	r3, #0
    5e3a:	bne.n	5ec0 <FatFile::mkdir(FatFile*, char const*, bool)+0x98>
    5e3c:	ldrb	r3, [r1, #0]
    5e3e:	mov	r5, r1
    5e40:	tst.w	r3, #208	; 0xd0
    5e44:	beq.n	5ec0 <FatFile::mkdir(FatFile*, char const*, bool)+0x98>
  if (isDirSeparator(*path)) {
    5e46:	ldrb	r3, [r2, #0]
    5e48:	mov	r4, r0
    5e4a:	mov	r6, r2
    5e4c:	cmp	r3, #47	; 0x2f
    5e4e:	beq.n	5ec8 <FatFile::mkdir(FatFile*, char const*, bool)+0xa0>
    if (!open(parent, &fname, O_RDONLY)) {
    5e50:	movs	r7, #0
    5e52:	b.n	5ea6 <FatFile::mkdir(FatFile*, char const*, bool)+0x7e>
    if (!*path) {
    5e54:	ldr	r6, [sp, #4]
    5e56:	ldrb	r6, [r6, #0]
    5e58:	cmp	r6, #0
    5e5a:	beq.n	5efa <FatFile::mkdir(FatFile*, char const*, bool)+0xd2>
    if (!open(parent, &fname, O_RDONLY)) {
    5e5c:	bl	7280 <FatFile::open(FatFile*, FatLfn_t*, int)>
    5e60:	mov	r3, r0
      if (!pFlag || !mkdir(parent, &fname)) {
    5e62:	add	r2, sp, #12
    5e64:	mov	r1, r5
    5e66:	mov	r0, r4
    if (!open(parent, &fname, O_RDONLY)) {
    5e68:	cbnz	r3, 5e76 <FatFile::mkdir(FatFile*, char const*, bool)+0x4e>
      if (!pFlag || !mkdir(parent, &fname)) {
    5e6a:	cmp.w	r8, #0
    5e6e:	beq.n	5ec0 <FatFile::mkdir(FatFile*, char const*, bool)+0x98>
    5e70:	bl	5cbc <FatFile::mkdir(FatFile*, FatLfn_t*)>
    5e74:	cbz	r0, 5ec0 <FatFile::mkdir(FatFile*, char const*, bool)+0x98>
    tmpDir = *this;
    5e76:	mov	lr, r4
    5e78:	add.w	ip, sp, #44	; 0x2c
    5e7c:	ldmia.w	lr!, {r0, r1, r2, r3}
    5e80:	stmia.w	ip!, {r0, r1, r2, r3}
    5e84:	ldmia.w	lr!, {r0, r1, r2, r3}
    5e88:	stmia.w	ip!, {r0, r1, r2, r3}
    5e8c:	ldr.w	r5, [lr]
    5e90:	mov	r0, r4
  if (!isOpen()) {
    5e92:	ldrb	r3, [r4, #0]
    tmpDir = *this;
    5e94:	str.w	r5, [ip]
  if (!isOpen()) {
    5e98:	cbz	r3, 5e9e <FatFile::mkdir(FatFile*, char const*, bool)+0x76>
    5e9a:	bl	5a80 <FatFile::sync() [clone .part.0]>
    if (!parsePathName(path, &fname, &path)) {
    5e9e:	ldr	r6, [sp, #4]
    parent = &tmpDir;
    5ea0:	add	r5, sp, #44	; 0x2c
  m_attributes = FILE_ATTR_CLOSED;
    5ea2:	strb	r7, [r4, #0]
  m_flags = 0;
    5ea4:	strb	r7, [r4, #2]
    if (!parsePathName(path, &fname, &path)) {
    5ea6:	mov	r1, r6
    5ea8:	add	r3, sp, #4
    5eaa:	add	r2, sp, #12
    5eac:	mov	r0, r4
    5eae:	bl	7518 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>
    5eb2:	mov	r6, r0
    if (!open(parent, &fname, O_RDONLY)) {
    5eb4:	add	r2, sp, #12
    5eb6:	mov	r1, r5
    5eb8:	movs	r3, #0
    5eba:	mov	r0, r4
    if (!parsePathName(path, &fname, &path)) {
    5ebc:	cmp	r6, #0
    5ebe:	bne.n	5e54 <FatFile::mkdir(FatFile*, char const*, bool)+0x2c>
  switch (vol->fatType()) {
    5ec0:	movs	r0, #0
}
    5ec2:	add	sp, #80	; 0x50
    5ec4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      path++;
    5ec8:	adds	r6, #1
    5eca:	str	r6, [sp, #4]
    while (isDirSeparator(*path)) {
    5ecc:	ldrb	r3, [r6, #0]
    5ece:	cmp	r3, #47	; 0x2f
    5ed0:	beq.n	5ec8 <FatFile::mkdir(FatFile*, char const*, bool)+0xa0>
    if (!tmpDir.openRoot(parent->m_vol)) {
    5ed2:	ldr	r5, [r5, #8]
  memset(this, 0, sizeof(FatFile));
    5ed4:	movs	r2, #36	; 0x24
    5ed6:	movs	r1, #0
    5ed8:	add	r0, sp, #44	; 0x2c
    5eda:	bl	e044 <memset>
  m_vol = vol;
    5ede:	str	r5, [sp, #52]	; 0x34
  uint8_t fatType() const { return m_fatType; }
    5ee0:	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
    5ee2:	cmp	r3, #16
    5ee4:	beq.n	5f06 <FatFile::mkdir(FatFile*, char const*, bool)+0xde>
    5ee6:	cmp	r3, #32
    5ee8:	bne.n	5ec0 <FatFile::mkdir(FatFile*, char const*, bool)+0x98>
    5eea:	movs	r3, #128	; 0x80
      m_attributes = FILE_ATTR_ROOT_FIXED;
    5eec:	strb.w	r3, [sp, #44]	; 0x2c
  m_flags = FILE_FLAG_READ;
    5ef0:	movs	r3, #1
    parent = &tmpDir;
    5ef2:	add	r5, sp, #44	; 0x2c
  m_flags = FILE_FLAG_READ;
    5ef4:	strb.w	r3, [sp, #46]	; 0x2e
  return true;
    5ef8:	b.n	5e50 <FatFile::mkdir(FatFile*, char const*, bool)+0x28>
  return mkdir(parent, &fname);
    5efa:	add	r2, sp, #12
    5efc:	bl	5cbc <FatFile::mkdir(FatFile*, FatLfn_t*)>
}
    5f00:	add	sp, #80	; 0x50
    5f02:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (vol->fatType()) {
    5f06:	movs	r3, #64	; 0x40
    5f08:	b.n	5eec <FatFile::mkdir(FatFile*, char const*, bool)+0xc4>
    5f0a:	nop

00005f0c <FatFile::open(FatFile*, char const*, int)>:
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    5f0c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5f10:	movs	r5, #0
    5f12:	sub	sp, #80	; 0x50
    5f14:	mov	r8, r3
  if (isOpen() || !dirFile->isDir()) {
    5f16:	ldrb	r3, [r0, #0]
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    5f18:	str	r2, [sp, #4]
    5f1a:	str	r5, [sp, #44]	; 0x2c
  if (isOpen() || !dirFile->isDir()) {
    5f1c:	cmp	r3, #0
    5f1e:	bne.n	5f90 <FatFile::open(FatFile*, char const*, int)+0x84>
    5f20:	ldrb	r3, [r1, #0]
    5f22:	mov	r6, r1
    5f24:	tst.w	r3, #208	; 0xd0
    5f28:	beq.n	5f90 <FatFile::open(FatFile*, char const*, int)+0x84>
  if (isDirSeparator(*path)) {
    5f2a:	ldrb	r3, [r2, #0]
    5f2c:	mov	r4, r0
    5f2e:	mov	r5, r2
    5f30:	cmp	r3, #47	; 0x2f
    5f32:	beq.n	5f98 <FatFile::open(FatFile*, char const*, int)+0x8c>
    if (!open(dirFile, &fname, O_RDONLY)) {
    5f34:	movs	r7, #0
    5f36:	b.n	5f76 <FatFile::open(FatFile*, char const*, int)+0x6a>
    if (*path == 0) {
    5f38:	ldr	r5, [sp, #4]
    5f3a:	ldrb	r5, [r5, #0]
    5f3c:	cmp	r5, #0
    5f3e:	beq.n	5fc6 <FatFile::open(FatFile*, char const*, int)+0xba>
    if (!open(dirFile, &fname, O_RDONLY)) {
    5f40:	bl	7280 <FatFile::open(FatFile*, FatLfn_t*, int)>
    tmpDir = *this;
    5f44:	mov	lr, r4
    5f46:	add.w	ip, sp, #44	; 0x2c
    if (!open(dirFile, &fname, O_RDONLY)) {
    5f4a:	cbz	r0, 5f90 <FatFile::open(FatFile*, char const*, int)+0x84>
    dirFile = &tmpDir;
    5f4c:	mov	r6, ip
  if (!isOpen()) {
    5f4e:	ldrb	r5, [r4, #0]
    tmpDir = *this;
    5f50:	ldmia.w	lr!, {r0, r1, r2, r3}
    5f54:	stmia.w	ip!, {r0, r1, r2, r3}
    5f58:	ldmia.w	lr!, {r0, r1, r2, r3}
    5f5c:	stmia.w	ip!, {r0, r1, r2, r3}
    5f60:	ldr.w	r3, [lr]
    5f64:	mov	r0, r4
    5f66:	str.w	r3, [ip]
  if (!isOpen()) {
    5f6a:	cbz	r5, 5f70 <FatFile::open(FatFile*, char const*, int)+0x64>
    5f6c:	bl	5a80 <FatFile::sync() [clone .part.0]>
    if (!parsePathName(path, &fname, &path)) {
    5f70:	ldr	r5, [sp, #4]
  m_attributes = FILE_ATTR_CLOSED;
    5f72:	strb	r7, [r4, #0]
  m_flags = 0;
    5f74:	strb	r7, [r4, #2]
    if (!parsePathName(path, &fname, &path)) {
    5f76:	mov	r1, r5
    5f78:	add	r3, sp, #4
    5f7a:	add	r2, sp, #12
    5f7c:	mov	r0, r4
    5f7e:	bl	7518 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>
    5f82:	mov	r5, r0
    if (!open(dirFile, &fname, O_RDONLY)) {
    5f84:	add	r2, sp, #12
    5f86:	mov	r1, r6
    5f88:	movs	r3, #0
    5f8a:	mov	r0, r4
    if (!parsePathName(path, &fname, &path)) {
    5f8c:	cmp	r5, #0
    5f8e:	bne.n	5f38 <FatFile::open(FatFile*, char const*, int)+0x2c>
  return false;
    5f90:	movs	r0, #0
}
    5f92:	add	sp, #80	; 0x50
    5f94:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      path++;
    5f98:	adds	r5, #1
    5f9a:	str	r5, [sp, #4]
    while (isDirSeparator(*path)) {
    5f9c:	ldrb	r1, [r5, #0]
    5f9e:	cmp	r1, #47	; 0x2f
    5fa0:	beq.n	5f98 <FatFile::open(FatFile*, char const*, int)+0x8c>
    if (*path == 0) {
    5fa2:	cbnz	r1, 5fd4 <FatFile::open(FatFile*, char const*, int)+0xc8>
      return openRoot(dirFile->m_vol);
    5fa4:	ldr	r5, [r6, #8]
  memset(this, 0, sizeof(FatFile));
    5fa6:	movs	r2, #36	; 0x24
    5fa8:	mov	r0, r4
    5faa:	bl	e044 <memset>
  m_vol = vol;
    5fae:	str	r5, [r4, #8]
    5fb0:	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
    5fb2:	cmp	r3, #16
    5fb4:	beq.n	6000 <FatFile::open(FatFile*, char const*, int)+0xf4>
    5fb6:	cmp	r3, #32
    5fb8:	bne.n	5f90 <FatFile::open(FatFile*, char const*, int)+0x84>
    5fba:	movs	r2, #128	; 0x80
  m_flags = FILE_FLAG_READ;
    5fbc:	movs	r3, #1
      m_attributes = FILE_ATTR_ROOT_FIXED;
    5fbe:	strb	r2, [r4, #0]
  return true;
    5fc0:	mov	r0, r3
  m_flags = FILE_FLAG_READ;
    5fc2:	strb	r3, [r4, #2]
  return true;
    5fc4:	b.n	5f92 <FatFile::open(FatFile*, char const*, int)+0x86>
  return open(dirFile, &fname, oflag);
    5fc6:	mov	r3, r8
    5fc8:	add	r2, sp, #12
    5fca:	bl	7280 <FatFile::open(FatFile*, FatLfn_t*, int)>
}
    5fce:	add	sp, #80	; 0x50
    5fd0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    5fd4:	ldr	r6, [r6, #8]
  memset(this, 0, sizeof(FatFile));
    5fd6:	movs	r2, #36	; 0x24
    5fd8:	movs	r1, #0
    5fda:	add	r0, sp, #44	; 0x2c
    5fdc:	bl	e044 <memset>
  m_vol = vol;
    5fe0:	str	r6, [sp, #52]	; 0x34
    5fe2:	ldrb	r3, [r6, #7]
  switch (vol->fatType()) {
    5fe4:	cmp	r3, #16
    5fe6:	beq.n	5ffc <FatFile::open(FatFile*, char const*, int)+0xf0>
    5fe8:	cmp	r3, #32
    5fea:	bne.n	5f90 <FatFile::open(FatFile*, char const*, int)+0x84>
    5fec:	movs	r3, #128	; 0x80
      m_attributes = FILE_ATTR_ROOT_FIXED;
    5fee:	strb.w	r3, [sp, #44]	; 0x2c
  m_flags = FILE_FLAG_READ;
    5ff2:	movs	r3, #1
    dirFile = &tmpDir;
    5ff4:	add	r6, sp, #44	; 0x2c
  m_flags = FILE_FLAG_READ;
    5ff6:	strb.w	r3, [sp, #46]	; 0x2e
  return true;
    5ffa:	b.n	5f34 <FatFile::open(FatFile*, char const*, int)+0x28>
  switch (vol->fatType()) {
    5ffc:	movs	r3, #64	; 0x40
    5ffe:	b.n	5fee <FatFile::open(FatFile*, char const*, int)+0xe2>
    6000:	movs	r2, #64	; 0x40
    6002:	b.n	5fbc <FatFile::open(FatFile*, char const*, int)+0xb0>

00006004 <FatFile::open(FatVolume*, char const*, int)>:
  return vol && open(vol->vwd(), path, oflag);
    6004:	cbz	r1, 600e <FatFile::open(FatVolume*, char const*, int)+0xa>
    6006:	addw	r1, r1, #1092	; 0x444
    600a:	b.w	5f0c <FatFile::open(FatFile*, char const*, int)>
}
    600e:	mov	r0, r1
    6010:	bx	lr
    6012:	nop

00006014 <FatFile::openCluster(FatFile*)>:
  if (file->m_dirCluster == 0) {
    6014:	ldr	r3, [r1, #12]
bool FatFile::openCluster(FatFile* file) {
    6016:	push	{r4, r5, r6, lr}
    6018:	mov	r5, r1
    601a:	mov	r4, r0
  if (file->m_dirCluster == 0) {
    601c:	cbnz	r3, 6048 <FatFile::openCluster(FatFile*)+0x34>
  if (isOpen()) {
    601e:	ldrb	r6, [r0, #0]
    6020:	cbz	r6, 6026 <FatFile::openCluster(FatFile*)+0x12>
  return false;
    6022:	mov	r0, r3
}
    6024:	pop	{r4, r5, r6, pc}
    return openRoot(file->m_vol);
    6026:	ldr	r5, [r1, #8]
  memset(this, 0, sizeof(FatFile));
    6028:	movs	r2, #36	; 0x24
    602a:	mov	r1, r6
    602c:	bl	e044 <memset>
  m_vol = vol;
    6030:	str	r5, [r4, #8]
    6032:	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
    6034:	cmp	r3, #16
    6036:	beq.n	6066 <FatFile::openCluster(FatFile*)+0x52>
    6038:	cmp	r3, #32
    603a:	bne.n	6062 <FatFile::openCluster(FatFile*)+0x4e>
    603c:	movs	r2, #128	; 0x80
  m_flags = FILE_FLAG_READ;
    603e:	movs	r3, #1
      m_attributes = FILE_ATTR_ROOT_FIXED;
    6040:	strb	r2, [r4, #0]
  return true;
    6042:	mov	r0, r3
  m_flags = FILE_FLAG_READ;
    6044:	strb	r3, [r4, #2]
}
    6046:	pop	{r4, r5, r6, pc}
  memset(this, 0, sizeof(FatFile));
    6048:	movs	r2, #36	; 0x24
    604a:	movs	r1, #0
    604c:	bl	e044 <memset>
  m_flags = FILE_FLAG_READ;
    6050:	movs	r0, #1
  m_attributes = FILE_ATTR_SUBDIR;
    6052:	movs	r3, #16
  m_flags = FILE_FLAG_READ;
    6054:	strb	r0, [r4, #2]
  m_attributes = FILE_ATTR_SUBDIR;
    6056:	strb	r3, [r4, #0]
  m_firstCluster = file->m_dirCluster;
    6058:	ldrd	r2, r3, [r5, #8]
  m_vol = file->m_vol;
    605c:	str	r2, [r4, #8]
  m_firstCluster = file->m_dirCluster;
    605e:	str	r3, [r4, #32]
}
    6060:	pop	{r4, r5, r6, pc}
  switch (vol->fatType()) {
    6062:	mov	r0, r6
}
    6064:	pop	{r4, r5, r6, pc}
  switch (vol->fatType()) {
    6066:	movs	r2, #64	; 0x40
    6068:	b.n	603e <FatFile::openCluster(FatFile*)+0x2a>
    606a:	nop

0000606c <FatFile::openRoot(FatVolume*)>:
bool FatFile::openRoot(FatVolume* vol) {
    606c:	push	{r4, r5, r6, lr}
  if (isOpen()) {
    606e:	ldrb	r5, [r0, #0]
    6070:	cbz	r5, 6076 <FatFile::openRoot(FatVolume*)+0xa>
  return false;
    6072:	movs	r0, #0
}
    6074:	pop	{r4, r5, r6, pc}
    6076:	mov	r6, r1
    6078:	mov	r4, r0
  memset(this, 0, sizeof(FatFile));
    607a:	movs	r2, #36	; 0x24
    607c:	mov	r1, r5
    607e:	bl	e044 <memset>
  m_vol = vol;
    6082:	str	r6, [r4, #8]
    6084:	ldrb	r3, [r6, #7]
  switch (vol->fatType()) {
    6086:	cmp	r3, #16
    6088:	beq.n	609e <FatFile::openRoot(FatVolume*)+0x32>
    608a:	cmp	r3, #32
    608c:	bne.n	609a <FatFile::openRoot(FatVolume*)+0x2e>
    608e:	movs	r2, #128	; 0x80
  m_flags = FILE_FLAG_READ;
    6090:	movs	r3, #1
      m_attributes = FILE_ATTR_ROOT_FIXED;
    6092:	strb	r2, [r4, #0]
  return true;
    6094:	mov	r0, r3
  m_flags = FILE_FLAG_READ;
    6096:	strb	r3, [r4, #2]
}
    6098:	pop	{r4, r5, r6, pc}
  switch (vol->fatType()) {
    609a:	mov	r0, r5
}
    609c:	pop	{r4, r5, r6, pc}
  switch (vol->fatType()) {
    609e:	movs	r2, #64	; 0x40
    60a0:	b.n	6090 <FatFile::openRoot(FatVolume*)+0x24>
    60a2:	nop

000060a4 <FatFile::read(void*, unsigned int)>:
int FatFile::read(void* buf, size_t nbyte) {
    60a4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    60a8:	vpush	{d8}
  bool isReadable() const { return m_flags & FILE_FLAG_READ; }
    60ac:	ldrb	r3, [r0, #2]
    60ae:	sub	sp, #12
    60b0:	mov	r5, r0
  if (!isReadable()) {
    60b2:	lsls	r7, r3, #31
    60b4:	bpl.w	61d0 <FatFile::read(void*, unsigned int)+0x12c>
  bool isFile() const { return m_attributes & FILE_ATTR_FILE; }
    60b8:	mov	r8, r1
    60ba:	ldrb	r1, [r0, #0]
    60bc:	mov	sl, r2
  if (isFile()) {
    60be:	lsls	r6, r1, #28
    60c0:	bmi.w	61e6 <FatFile::read(void*, unsigned int)+0x142>
  } else if (isRootFixed()) {
    60c4:	lsls	r4, r1, #25
    60c6:	bpl.n	60da <FatFile::read(void*, unsigned int)+0x36>
        FS_DIR_SIZE * m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    60c8:	ldr	r3, [r0, #8]
    60ca:	ldrh	r2, [r3, #8]
    60cc:	ldr	r3, [r0, #20]
    uint16_t tmp16 =
    60ce:	rsb	r3, r3, r2, lsl #5
    if (nbyte > tmp16) {
    60d2:	uxth	r3, r3
    60d4:	cmp	sl, r3
    60d6:	it	cs
    60d8:	movcs	sl, r3
  while (toRead) {
    60da:	cmp.w	sl, #0
    60de:	beq.w	6240 <FatFile::read(void*, unsigned int)+0x19c>
    uint32_t tmp32 = m_fileSize - m_curPosition;
    60e2:	ldr	r2, [r5, #20]
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    60e4:	add.w	r3, r5, #16
    if (isRootFixed()) {
    60e8:	lsls	r0, r1, #25
    uint32_t tmp32 = m_fileSize - m_curPosition;
    60ea:	mov	r6, sl
  uint8_t sectorOfCluster = 0;
    60ec:	mov.w	r9, #0
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    60f0:	vmov	s16, r3
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    60f4:	ldr	r7, [r5, #8]
    60f6:	ubfx	fp, r2, #0, #9
    if (isRootFixed()) {
    60fa:	bpl.n	6178 <FatFile::read(void*, unsigned int)+0xd4>
      sector = m_vol->rootDirStart() +
    60fc:	ldr	r1, [r7, #32]
    60fe:	add.w	r1, r1, r2, lsr #9
    if (offset != 0 || toRead < m_vol->bytesPerSector() ||
    6102:	cmp.w	fp, #0
    6106:	bne.n	61ac <FatFile::read(void*, unsigned int)+0x108>
    6108:	cmp.w	r6, #512	; 0x200
    610c:	bcc.n	61ac <FatFile::read(void*, unsigned int)+0x108>
  uint32_t sector() { return m_sector; }
    610e:	ldr	r2, [r7, #44]	; 0x2c
    6110:	cmp	r1, r2
    6112:	beq.n	61ac <FatFile::read(void*, unsigned int)+0x108>
    } else if (toRead >= 2 * m_vol->bytesPerSector()) {
    6114:	cmp.w	r6, #1024	; 0x400
    6118:	bcc.w	6220 <FatFile::read(void*, unsigned int)+0x17c>
      if (!isRootFixed()) {
    611c:	ldrb	r0, [r5, #0]
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    611e:	lsrs	r3, r6, #9
      if (!isRootFixed()) {
    6120:	lsls	r0, r0, #25
    6122:	bmi.n	6130 <FatFile::read(void*, unsigned int)+0x8c>
        uint32_t mb = m_vol->sectorsPerCluster() - sectorOfCluster;
    6124:	ldrb	r0, [r7, #4]
    6126:	sub.w	r0, r0, r9
    612a:	cmp	r3, r0
    612c:	it	cs
    612e:	movcs	r3, r0
    return sector <= m_sector && m_sector < (sector + count);
    6130:	cmp	r1, r2
      n = ns << m_vol->bytesPerSectorShift();
    6132:	mov.w	r4, r3, lsl #9
    6136:	bhi.n	6152 <FatFile::read(void*, unsigned int)+0xae>
    6138:	adds	r0, r1, r3
    613a:	cmp	r2, r0
    613c:	bcs.n	6152 <FatFile::read(void*, unsigned int)+0xae>
    if (isCached(sector, count) && !sync()) {
    613e:	add.w	r0, r7, #36	; 0x24
    6142:	strd	r1, r3, [sp]
    6146:	bl	3154 <FsCache::sync()>
    614a:	ldrd	r1, r3, [sp]
    614e:	cmp	r0, #0
    6150:	beq.n	61d0 <FatFile::read(void*, unsigned int)+0x12c>
    return m_blockDev->readSectors(sector, dst, count);
    6152:	ldr	r0, [r7, #40]	; 0x28
    6154:	ldr	r2, [r0, #0]
    6156:	ldr	r7, [r2, #20]
    6158:	mov	r2, r8
    615a:	blx	r7
      if (!m_vol->cacheSafeRead(sector, dst, ns)) {
    615c:	cmp	r0, #0
    615e:	beq.n	61d0 <FatFile::read(void*, unsigned int)+0x12c>
    m_curPosition += n;
    6160:	ldr	r2, [r5, #20]
  while (toRead) {
    6162:	subs	r6, r6, r4
    dst += n;
    6164:	add	r8, r4
    m_curPosition += n;
    6166:	add	r2, r4
    6168:	str	r2, [r5, #20]
  while (toRead) {
    616a:	beq.n	6240 <FatFile::read(void*, unsigned int)+0x19c>
  bool isRootFixed() const { return m_attributes & FILE_ATTR_ROOT_FIXED; }
    616c:	ldrb	r1, [r5, #0]
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    616e:	ubfx	fp, r2, #0, #9
    6172:	ldr	r7, [r5, #8]
    if (isRootFixed()) {
    6174:	lsls	r0, r1, #25
    6176:	bmi.n	60fc <FatFile::read(void*, unsigned int)+0x58>
    return (position >> 9) & m_clusterSectorMask;
    6178:	ldrb.w	r9, [r7, #5]
    617c:	and.w	r9, r9, r2, lsr #9
      if (offset == 0 && sectorOfCluster == 0) {
    6180:	cmp.w	fp, #0
    6184:	bne.n	61f4 <FatFile::read(void*, unsigned int)+0x150>
    6186:	cmp.w	r9, #0
    618a:	bne.n	61f4 <FatFile::read(void*, unsigned int)+0x150>
        if (m_curPosition == 0) {
    618c:	cmp	r2, #0
    618e:	bne.n	61f8 <FatFile::read(void*, unsigned int)+0x154>
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    6190:	lsls	r2, r1, #24
  uint32_t rootDirStart() const { return m_rootDirStart; }
    6192:	ite	mi
    6194:	ldrmi	r2, [r7, #32]
    6196:	ldrpl	r2, [r5, #32]
          m_curCluster++;
    6198:	str	r2, [r5, #16]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    619a:	subs	r2, #2
    619c:	ldrb	r0, [r7, #6]
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    619e:	ldr	r1, [r7, #20]
    61a0:	lsls	r2, r0
    61a2:	add	r1, r9
    61a4:	add	r1, r2
    if (offset != 0 || toRead < m_vol->bytesPerSector() ||
    61a6:	cmp.w	fp, #0
    61aa:	beq.n	6108 <FatFile::read(void*, unsigned int)+0x64>
      n = m_vol->bytesPerSector() - offset;
    61ac:	rsb	r4, fp, #512	; 0x200
    return m_cache.prepare(sector, options);
    61b0:	movs	r2, #0
    61b2:	add.w	r0, r7, #36	; 0x24
    61b6:	cmp	r4, r6
    61b8:	it	cs
    61ba:	movcs	r4, r6
    61bc:	bl	31ac <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    61c0:	cbz	r0, 61d0 <FatFile::read(void*, unsigned int)+0x12c>
      memcpy(dst, src, n);
    61c2:	add.w	r1, r0, fp
    61c6:	mov	r2, r4
    61c8:	mov	r0, r8
    61ca:	bl	a0a4 <memcpy>
    61ce:	b.n	6160 <FatFile::read(void*, unsigned int)+0xbc>
  m_error |= READ_ERROR;
    61d0:	ldrb	r3, [r5, #1]
  return -1;
    61d2:	mov.w	r0, #4294967295
  m_error |= READ_ERROR;
    61d6:	orr.w	r3, r3, #2
    61da:	strb	r3, [r5, #1]
}
    61dc:	add	sp, #12
    61de:	vpop	{d8}
    61e2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    uint32_t tmp32 = m_fileSize - m_curPosition;
    61e6:	ldr	r3, [r0, #28]
    61e8:	ldr	r2, [r0, #20]
    61ea:	subs	r3, r3, r2
    61ec:	cmp	sl, r3
    61ee:	it	cs
    61f0:	movcs	sl, r3
    61f2:	b.n	60da <FatFile::read(void*, unsigned int)+0x36>
          m_curCluster++;
    61f4:	ldr	r2, [r5, #16]
    61f6:	b.n	619a <FatFile::read(void*, unsigned int)+0xf6>
        } else if (isFile() && isContiguous()) {
    61f8:	lsls	r3, r1, #28
    61fa:	bpl.n	6208 <FatFile::read(void*, unsigned int)+0x164>
    61fc:	ldrb	r2, [r5, #2]
    61fe:	lsls	r4, r2, #25
    6200:	bpl.n	6208 <FatFile::read(void*, unsigned int)+0x164>
          m_curCluster++;
    6202:	ldr	r2, [r5, #16]
    6204:	adds	r2, #1
    6206:	b.n	6198 <FatFile::read(void*, unsigned int)+0xf4>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    6208:	vmov	r2, s16
    620c:	mov	r0, r7
    620e:	ldr	r1, [r5, #16]
    6210:	bl	6b6c <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    6214:	cmp	r0, #0
    6216:	blt.n	61d0 <FatFile::read(void*, unsigned int)+0x12c>
          if (fg == 0) {
    6218:	beq.n	6234 <FatFile::read(void*, unsigned int)+0x190>
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    621a:	ldr	r7, [r5, #8]
    621c:	ldr	r2, [r5, #16]
    621e:	b.n	619a <FatFile::read(void*, unsigned int)+0xf6>
    return m_blockDev->readSector(sector, dst);
    6220:	ldr	r0, [r7, #40]	; 0x28
    6222:	mov	r2, r8
    6224:	ldr	r3, [r0, #0]
    6226:	ldr	r3, [r3, #16]
    6228:	blx	r3
      if (!m_vol->cacheSafeRead(sector, dst)) {
    622a:	cmp	r0, #0
    622c:	beq.n	61d0 <FatFile::read(void*, unsigned int)+0x12c>
      n = m_vol->bytesPerSector();
    622e:	mov.w	r4, #512	; 0x200
    6232:	b.n	6160 <FatFile::read(void*, unsigned int)+0xbc>
            if (isDir()) {
    6234:	ldrb	r3, [r5, #0]
    6236:	tst.w	r3, #208	; 0xd0
    623a:	beq.n	61d0 <FatFile::read(void*, unsigned int)+0x12c>
  return nbyte - toRead;
    623c:	sub.w	sl, sl, r6
    6240:	mov	r0, sl
}
    6242:	add	sp, #12
    6244:	vpop	{d8}
    6248:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000624c <FatFile::peek()>:
int FatFile::peek() {
    624c:	push	{r4, r5, r6, lr}
    624e:	sub	sp, #8
    return read(&b, 1) == 1 ? b : -1;
    6250:	movs	r2, #1
    6252:	mov	r4, r0
    6254:	add.w	r1, sp, #7
  uint32_t saveCurCluster = m_curCluster;
    6258:	ldrd	r5, r6, [r0, #16]
    625c:	bl	60a4 <FatFile::read(void*, unsigned int)>
    6260:	cmp	r0, #1
    6262:	ite	eq
    6264:	ldrbeq.w	r0, [sp, #7]
    6268:	movne.w	r0, #4294967295
  m_curCluster = saveCurCluster;
    626c:	strd	r5, r6, [r4, #16]
}
    6270:	add	sp, #8
    6272:	pop	{r4, r5, r6, pc}

00006274 <FatFile::readDirCache(bool)>:
  uint8_t i = (m_curPosition >> 5) & 0XF;
    6274:	ldr	r3, [r0, #20]
  if (i == 0 || !skipReadOk) {
    6276:	tst.w	r3, #480	; 0x1e0
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
    627a:	push	{r4, r5, lr}
    627c:	mov	r4, r0
    627e:	sub	sp, #12
  uint8_t i = (m_curPosition >> 5) & 0XF;
    6280:	ubfx	r5, r3, #5, #4
  if (i == 0 || !skipReadOk) {
    6284:	beq.n	629a <FatFile::readDirCache(bool)+0x26>
    6286:	cmp	r1, #1
    6288:	bne.n	629a <FatFile::readDirCache(bool)+0x26>
    m_curPosition += FS_DIR_SIZE;
    628a:	adds	r3, #32
    628c:	str	r3, [r0, #20]
  uint8_t* cacheBuffer() { return m_buffer; }
    628e:	ldr	r0, [r4, #8]
    6290:	adds	r0, #52	; 0x34
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    6292:	add.w	r0, r0, r5, lsl #5
}
    6296:	add	sp, #12
    6298:	pop	{r4, r5, pc}
    int8_t n = read(&n, 1);
    629a:	movs	r2, #1
    629c:	add.w	r1, sp, #7
    62a0:	mov	r0, r4
    62a2:	bl	60a4 <FatFile::read(void*, unsigned int)>
    if (n != 1) {
    62a6:	sxtb	r0, r0
    62a8:	cmp	r0, #1
    62aa:	bne.n	62b4 <FatFile::readDirCache(bool)+0x40>
    m_curPosition += FS_DIR_SIZE - 1;
    62ac:	ldr	r3, [r4, #20]
    62ae:	adds	r3, #31
    62b0:	str	r3, [r4, #20]
    62b2:	b.n	628e <FatFile::readDirCache(bool)+0x1a>
  return nullptr;
    62b4:	movs	r0, #0
    62b6:	b.n	6296 <FatFile::readDirCache(bool)+0x22>

000062b8 <FatFile::rename(FatFile*, char const*)>:
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    62b8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!(isFile() || isSubDir())) {
    62bc:	ldrb	r3, [r0, #0]
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    62be:	sub	sp, #104	; 0x68
  FatFile() {}
    62c0:	movs	r6, #0
  if (!(isFile() || isSubDir())) {
    62c2:	tst.w	r3, #24
    62c6:	str	r6, [sp, #32]
    62c8:	str	r6, [sp, #68]	; 0x44
    62ca:	beq.n	62da <FatFile::rename(FatFile*, char const*)+0x22>
    62cc:	mov	r7, r2
  if (m_vol != dirFile->m_vol) {
    62ce:	ldr	r3, [r0, #8]
    62d0:	ldr	r2, [r1, #8]
    62d2:	mov	r4, r0
    62d4:	mov	r5, r1
    62d6:	cmp	r2, r3
    62d8:	beq.n	62e2 <FatFile::rename(FatFile*, char const*)+0x2a>
  return false;
    62da:	movs	r0, #0
}
    62dc:	add	sp, #104	; 0x68
    62de:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    62e2:	bl	5a80 <FatFile::sync() [clone .part.0]>
  oldFile = *this;
    62e6:	mov	lr, r4
    62e8:	add.w	ip, sp, #68	; 0x44
    62ec:	ldmia.w	lr!, {r0, r1, r2, r3}
    62f0:	stmia.w	ip!, {r0, r1, r2, r3}
    62f4:	ldmia.w	lr!, {r0, r1, r2, r3}
    62f8:	stmia.w	ip!, {r0, r1, r2, r3}
    62fc:	ldr.w	r3, [lr]
    6300:	mov	r2, r6
    6302:	ldr	r1, [r4, #24]
    6304:	str.w	r3, [ip]
    6308:	ldr	r3, [r4, #8]
    630a:	add.w	r0, r3, #36	; 0x24
    630e:	bl	31ac <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    6312:	cmp	r0, #0
    6314:	beq.n	62da <FatFile::rename(FatFile*, char const*)+0x22>
  return dir + (m_dirIndex & 0XF);
    6316:	ldrh	r2, [r4, #4]
  memcpy(&entry, dir, sizeof(entry));
    6318:	mov	ip, sp
  if (isFile()) {
    631a:	ldrb.w	r8, [r4]
  return dir + (m_dirIndex & 0XF);
    631e:	and.w	r2, r2, #15
  memcpy(&entry, dir, sizeof(entry));
    6322:	add.w	lr, r0, r2, lsl #5
    6326:	lsls	r2, r2, #5
    6328:	ldr.w	r1, [lr, #4]
    632c:	ldr	r0, [r0, r2]
    632e:	ldr.w	r3, [lr, #12]
    6332:	ldr.w	r2, [lr, #8]
    6336:	stmia.w	ip!, {r0, r1, r2, r3}
    633a:	ldr.w	r1, [lr, #20]
    633e:	ldr.w	r2, [lr, #24]
    6342:	ldr.w	r3, [lr, #28]
    6346:	ldr.w	r0, [lr, #16]
    634a:	stmia.w	ip!, {r0, r1, r2, r3}
  if (isFile()) {
    634e:	ands.w	r3, r8, #8
    if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    6352:	mov	r2, r7
    6354:	mov	r1, r5
  if (isFile()) {
    6356:	bne.w	6490 <FatFile::rename(FatFile*, char const*)+0x1d8>
    if (!file.mkdir(dirFile, newPath, false)) {
    635a:	add	r0, sp, #32
    635c:	bl	5e28 <FatFile::mkdir(FatFile*, char const*, bool)>
    6360:	cmp	r0, #0
    6362:	beq.n	62da <FatFile::rename(FatFile*, char const*)+0x22>
    dirCluster = file.m_firstCluster;
    6364:	ldr	r6, [sp, #64]	; 0x40
  m_dirIndex = file.m_dirIndex;
    6366:	ldrh.w	r3, [sp, #36]	; 0x24
  file.m_attributes = FILE_ATTR_CLOSED;
    636a:	movs	r5, #0
  m_dirSector = file.m_dirSector;
    636c:	ldr	r1, [sp, #56]	; 0x38
    636e:	movs	r2, #1
  m_dirIndex = file.m_dirIndex;
    6370:	strh	r3, [r4, #4]
  m_lfnOrd = file.m_lfnOrd;
    6372:	ldrb.w	r3, [sp, #35]	; 0x23
    6376:	ldr	r0, [r4, #8]
    6378:	strb	r3, [r4, #3]
  m_dirCluster = file.m_dirCluster;
    637a:	ldr	r3, [sp, #44]	; 0x2c
    637c:	adds	r0, #36	; 0x24
  m_dirSector = file.m_dirSector;
    637e:	str	r1, [r4, #24]
  m_dirCluster = file.m_dirCluster;
    6380:	str	r3, [r4, #12]
  file.m_attributes = FILE_ATTR_CLOSED;
    6382:	strb.w	r5, [sp, #32]
  file.m_flags = 0;
    6386:	strb.w	r5, [sp, #34]	; 0x22
    638a:	bl	31ac <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    638e:	cmp	r0, #0
    6390:	beq.n	62da <FatFile::rename(FatFile*, char const*)+0x22>
  return dir + (m_dirIndex & 0XF);
    6392:	ldrh	r3, [r4, #4]
    6394:	and.w	r3, r3, #15
    6398:	add.w	r0, r0, r3, lsl #5
  memcpy(&dir->createTimeMs, &entry.createTimeMs,
    639c:	ldr.w	r3, [sp, #13]
    63a0:	str.w	r3, [r0, #13]
    63a4:	ldr.w	r3, [sp, #17]
    63a8:	str.w	r3, [r0, #17]
    63ac:	ldr.w	r3, [sp, #21]
    63b0:	str.w	r3, [r0, #21]
    63b4:	ldr.w	r3, [sp, #25]
    63b8:	str.w	r3, [r0, #25]
    63bc:	ldrh.w	r3, [sp, #29]
    63c0:	strh.w	r3, [r0, #29]
    63c4:	ldrb.w	r3, [sp, #31]
    63c8:	strb	r3, [r0, #31]
  dir->attributes = entry.attributes;
    63ca:	ldrb.w	r3, [sp, #11]
    63ce:	strb	r3, [r0, #11]
  if (dirCluster) {
    63d0:	cmp	r6, #0
    63d2:	beq.n	644c <FatFile::rename(FatFile*, char const*)+0x194>
    uint32_t sector = m_vol->clusterStartSector(dirCluster);
    63d4:	ldr	r0, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    63d6:	subs	r3, r6, #2
    return m_cache.prepare(sector, options);
    63d8:	mov	r2, r5
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    63da:	ldrb	r1, [r0, #6]
    return m_cache.prepare(sector, options);
    63dc:	adds	r0, #36	; 0x24
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    63de:	lsls	r3, r1
    63e0:	ldr.w	r1, [r0, #-16]
    return m_cache.prepare(sector, options);
    63e4:	add	r1, r3
    63e6:	bl	31ac <FsCache::prepare(unsigned long, unsigned char)>
    if (!dir) {
    63ea:	mov	r5, r0
    63ec:	cmp	r0, #0
    63ee:	beq.w	62da <FatFile::rename(FatFile*, char const*)+0x22>
    memcpy(&entry, &dir[1], sizeof(entry));
    63f2:	ldr	r0, [r0, #32]
    63f4:	mov	r7, sp
    63f6:	ldr	r1, [r5, #36]	; 0x24
    63f8:	ldr	r2, [r5, #40]	; 0x28
    63fa:	ldr	r3, [r5, #44]	; 0x2c
    63fc:	stmia	r7!, {r0, r1, r2, r3}
    63fe:	ldr	r0, [r5, #48]	; 0x30
    6400:	ldr	r1, [r5, #52]	; 0x34
    6402:	ldr	r2, [r5, #56]	; 0x38
    6404:	ldr	r3, [r5, #60]	; 0x3c
    6406:	stmia	r7!, {r0, r1, r2, r3}
    if (!m_vol->freeChain(dirCluster)) {
    6408:	mov	r1, r6
    640a:	ldr	r0, [r4, #8]
    640c:	bl	6c78 <FatPartition::freeChain(unsigned long)>
    6410:	cmp	r0, #0
    6412:	beq.w	62da <FatFile::rename(FatFile*, char const*)+0x22>
    sector = m_vol->clusterStartSector(m_firstCluster);
    6416:	ldr	r0, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    6418:	ldr	r3, [r4, #32]
    641a:	ldrb	r2, [r0, #6]
    return m_cache.prepare(sector, options);
    641c:	adds	r0, #36	; 0x24
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    641e:	subs	r3, #2
    6420:	ldr.w	r1, [r0, #-16]
    6424:	lsls	r3, r2
    return m_cache.prepare(sector, options);
    6426:	movs	r2, #1
    6428:	add	r1, r3
    642a:	bl	31ac <FsCache::prepare(unsigned long, unsigned char)>
    if (!dir) {
    642e:	mov	r6, r0
    6430:	cmp	r0, #0
    6432:	beq.w	62da <FatFile::rename(FatFile*, char const*)+0x22>
    memcpy(&dir[1], &entry, sizeof(entry));
    6436:	mov	r5, sp
    6438:	ldmia	r5!, {r0, r1, r2, r3}
    643a:	str	r0, [r6, #32]
    643c:	str	r1, [r6, #36]	; 0x24
    643e:	str	r2, [r6, #40]	; 0x28
    6440:	str	r3, [r6, #44]	; 0x2c
    6442:	ldmia	r5!, {r0, r1, r2, r3}
    6444:	str	r0, [r6, #48]	; 0x30
    6446:	str	r1, [r6, #52]	; 0x34
    6448:	str	r2, [r6, #56]	; 0x38
    644a:	str	r3, [r6, #60]	; 0x3c
  oldFile.m_firstCluster = 0;
    644c:	movs	r1, #0
  oldFile.m_flags = FILE_FLAG_WRITE;
    644e:	movs	r2, #2
  oldFile.m_attributes = FILE_ATTR_FILE;
    6450:	movs	r3, #8
  if (!oldFile.remove()) {
    6452:	add	r0, sp, #68	; 0x44
  oldFile.m_firstCluster = 0;
    6454:	str	r1, [sp, #100]	; 0x64
  oldFile.m_flags = FILE_FLAG_WRITE;
    6456:	strb.w	r2, [sp, #70]	; 0x46
  oldFile.m_attributes = FILE_ATTR_FILE;
    645a:	strb.w	r3, [sp, #68]	; 0x44
  if (!oldFile.remove()) {
    645e:	bl	75c8 <FatFile::remove()>
    6462:	cmp	r0, #0
    6464:	beq.w	62da <FatFile::rename(FatFile*, char const*)+0x22>
  return m_vol->cacheSync();
    6468:	ldr	r4, [r4, #8]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    646a:	add.w	r0, r4, #36	; 0x24
    646e:	bl	3154 <FsCache::sync()>
    6472:	cmp	r0, #0
    6474:	beq.w	62da <FatFile::rename(FatFile*, char const*)+0x22>
    6478:	add.w	r0, r4, #564	; 0x234
    647c:	bl	3154 <FsCache::sync()>
    6480:	cmp	r0, #0
    6482:	beq.w	62da <FatFile::rename(FatFile*, char const*)+0x22>
    6486:	ldr	r0, [r4, #0]
  bool syncDevice() { return m_blockDev->syncDevice(); }
    6488:	ldr	r3, [r0, #0]
    648a:	ldr	r3, [r3, #28]
    648c:	blx	r3
    648e:	b.n	62dc <FatFile::rename(FatFile*, char const*)+0x24>
    if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    6490:	movw	r3, #2561	; 0xa01
    6494:	mov	r0, ip
    6496:	bl	5f0c <FatFile::open(FatFile*, char const*, int)>
    649a:	cmp	r0, #0
    649c:	bne.w	6366 <FatFile::rename(FatFile*, char const*)+0xae>
    64a0:	b.n	62da <FatFile::rename(FatFile*, char const*)+0x22>
    64a2:	nop

000064a4 <FatFile::rmdir()>:
  if (!isSubDir() || (!USE_LONG_FILE_NAMES && isLFN())) {
    64a4:	ldrb	r3, [r0, #0]
    64a6:	lsls	r2, r3, #27
    64a8:	bmi.n	64ae <FatFile::rmdir()+0xa>
}
    64aa:	movs	r0, #0
    64ac:	bx	lr
  if (pos == m_curPosition) {
    64ae:	ldr	r3, [r0, #20]
bool FatFile::rmdir() {
    64b0:	push	{r4, r5, lr}
    64b2:	mov	r4, r0
    64b4:	sub	sp, #12
  if (pos == m_curPosition) {
    64b6:	cbz	r3, 64c6 <FatFile::rmdir()+0x22>
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    64b8:	ldrb	r3, [r0, #2]
    m_curCluster = 0;
    64ba:	movs	r2, #0
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    64bc:	bic.w	r3, r3, #32
  m_curPosition = pos;
    64c0:	strd	r2, r2, [r0, #16]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    64c4:	strb	r3, [r0, #2]
bool FatFile::rmdir() {
    64c6:	movs	r3, #0
    64c8:	b.n	64ea <FatFile::rmdir()+0x46>
    m_curPosition += FS_DIR_SIZE;
    64ca:	str	r3, [r4, #20]
    64cc:	ldr	r3, [r4, #8]
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    64ce:	lsls	r2, r5, #5
    64d0:	adds	r3, #52	; 0x34
    if (dir->name[0] == FAT_NAME_FREE) {
    64d2:	ldrb	r2, [r3, r2]
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    64d4:	add.w	r3, r3, r5, lsl #5
    if (dir->name[0] == FAT_NAME_FREE) {
    64d8:	cbz	r2, 6516 <FatFile::rmdir()+0x72>
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    64da:	cmp	r2, #229	; 0xe5
    64dc:	beq.n	64e8 <FatFile::rmdir()+0x44>
    64de:	cmp	r2, #46	; 0x2e
    64e0:	beq.n	64e8 <FatFile::rmdir()+0x44>
    if (isFatFileOrSubdir(dir)) {
    64e2:	ldrb	r3, [r3, #11]
    64e4:	lsls	r3, r3, #28
    64e6:	bpl.n	652e <FatFile::rmdir()+0x8a>
  uint8_t i = (m_curPosition >> 5) & 0XF;
    64e8:	ldr	r3, [r4, #20]
  if (i == 0 || !skipReadOk) {
    64ea:	tst.w	r3, #480	; 0x1e0
  uint8_t i = (m_curPosition >> 5) & 0XF;
    64ee:	ubfx	r5, r3, #5, #4
    m_curPosition += FS_DIR_SIZE;
    64f2:	add.w	r3, r3, #32
  if (i == 0 || !skipReadOk) {
    64f6:	bne.n	64ca <FatFile::rmdir()+0x26>
    int8_t n = read(&n, 1);
    64f8:	movs	r2, #1
    64fa:	add.w	r1, sp, #7
    64fe:	mov	r0, r4
    6500:	bl	60a4 <FatFile::read(void*, unsigned int)>
    if (n != 1) {
    6504:	sxtb	r0, r0
    6506:	cmp	r0, #1
    6508:	bne.n	6512 <FatFile::rmdir()+0x6e>
    m_curPosition += FS_DIR_SIZE - 1;
    650a:	ldr	r3, [r4, #20]
    650c:	adds	r3, #31
    650e:	str	r3, [r4, #20]
    6510:	b.n	64cc <FatFile::rmdir()+0x28>
      if (!getError()) {
    6512:	ldrb	r3, [r4, #1]
    6514:	cbnz	r3, 652e <FatFile::rmdir()+0x8a>
  m_flags |= FILE_FLAG_WRITE;
    6516:	ldrb	r3, [r4, #2]
  m_attributes = FILE_ATTR_FILE;
    6518:	movs	r2, #8
  return remove();
    651a:	mov	r0, r4
  m_flags |= FILE_FLAG_WRITE;
    651c:	orr.w	r3, r3, #2
  m_attributes = FILE_ATTR_FILE;
    6520:	strb	r2, [r4, #0]
  m_flags |= FILE_FLAG_WRITE;
    6522:	strb	r3, [r4, #2]
}
    6524:	add	sp, #12
    6526:	ldmia.w	sp!, {r4, r5, lr}
  return remove();
    652a:	b.w	75c8 <FatFile::remove()>
}
    652e:	movs	r0, #0
    6530:	add	sp, #12
    6532:	pop	{r4, r5, pc}

00006534 <FatFile::seekSet(unsigned long)>:
bool FatFile::seekSet(uint32_t pos) {
    6534:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  bool isOpen() const { return m_attributes; }
    6538:	ldrb	r3, [r0, #0]
    653a:	mov	r4, r0
  uint32_t tmp = m_curCluster;
    653c:	ldr	r7, [r0, #16]
  if (!isOpen()) {
    653e:	cmp	r3, #0
    6540:	beq.n	65b6 <FatFile::seekSet(unsigned long)+0x82>
    6542:	mov	r5, r1
  if (pos == m_curPosition) {
    6544:	ldr	r1, [r0, #20]
    6546:	cmp	r1, r5
    6548:	beq.n	65d0 <FatFile::seekSet(unsigned long)+0x9c>
  if (pos == 0) {
    654a:	cmp	r5, #0
    654c:	beq.n	65be <FatFile::seekSet(unsigned long)+0x8a>
  if (isFile()) {
    654e:	lsls	r0, r3, #28
    6550:	bpl.n	65a8 <FatFile::seekSet(unsigned long)+0x74>
    if (pos > m_fileSize) {
    6552:	ldr	r2, [r4, #28]
    6554:	cmp	r2, r5
    6556:	bcc.n	65b6 <FatFile::seekSet(unsigned long)+0x82>
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    6558:	ldr.w	ip, [r4, #8]
    655c:	subs	r6, r5, #1
  bool isContiguous() const { return m_flags & FILE_FLAG_CONTIGUOUS; }
    655e:	ldrb	r2, [r4, #2]
    return m_sectorsPerClusterShift + m_bytesPerSectorShift;
    6560:	ldrb.w	r0, [ip, #6]
  if (isContiguous()) {
    6564:	tst.w	r2, #64	; 0x40
    6568:	add.w	r0, r0, #9
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    656c:	uxtb	r0, r0
    656e:	lsr.w	r6, r6, r0
  if (isContiguous()) {
    6572:	bne.n	65d6 <FatFile::seekSet(unsigned long)+0xa2>
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());
    6574:	subs	r2, r1, #1
    6576:	lsrs	r2, r0
  if (nNew < nCur || m_curPosition == 0) {
    6578:	cbz	r1, 657e <FatFile::seekSet(unsigned long)+0x4a>
    657a:	cmp	r6, r2
    657c:	bcs.n	65de <FatFile::seekSet(unsigned long)+0xaa>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    657e:	lsls	r3, r3, #24
  uint32_t rootDirStart() const { return m_rootDirStart; }
    6580:	ite	mi
    6582:	ldrmi.w	r3, [ip, #32]
    6586:	ldrpl	r3, [r4, #32]
    6588:	str	r3, [r4, #16]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    658a:	add.w	r8, r4, #16
    658e:	b.n	659e <FatFile::seekSet(unsigned long)+0x6a>
    6590:	ldr	r1, [r4, #16]
    6592:	subs	r6, #1
    6594:	ldr	r0, [r4, #8]
    6596:	bl	6b6c <FatPartition::fatGet(unsigned long, unsigned long*)>
    659a:	cmp	r0, #0
    659c:	ble.n	65b6 <FatFile::seekSet(unsigned long)+0x82>
    659e:	mov	r2, r8
  while (nNew--) {
    65a0:	cmp	r6, #0
    65a2:	bne.n	6590 <FatFile::seekSet(unsigned long)+0x5c>
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    65a4:	ldrb	r2, [r4, #2]
    65a6:	b.n	65c2 <FatFile::seekSet(unsigned long)+0x8e>
  } else if (isRootFixed()) {
    65a8:	lsls	r2, r3, #25
    65aa:	bpl.n	6558 <FatFile::seekSet(unsigned long)+0x24>
  uint16_t rootDirEntryCount() const { return m_rootDirEntryCount; }
    65ac:	ldr	r3, [r4, #8]
    if (pos <= FS_DIR_SIZE * m_vol->rootDirEntryCount()) {
    65ae:	ldrh	r3, [r3, #8]
    65b0:	cmp.w	r5, r3, lsl #5
    65b4:	bls.n	65a4 <FatFile::seekSet(unsigned long)+0x70>
  return false;
    65b6:	movs	r0, #0
  m_curCluster = tmp;
    65b8:	str	r7, [r4, #16]
}
    65ba:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    65be:	ldrb	r2, [r0, #2]
    m_curCluster = 0;
    65c0:	str	r5, [r0, #16]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    65c2:	bic.w	r2, r2, #32
  return true;
    65c6:	movs	r0, #1
  m_curPosition = pos;
    65c8:	str	r5, [r4, #20]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    65ca:	strb	r2, [r4, #2]
}
    65cc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return true;
    65d0:	movs	r0, #1
}
    65d2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_curCluster = m_firstCluster + nNew;
    65d6:	ldr	r3, [r4, #32]
    65d8:	add	r3, r6
    65da:	str	r3, [r4, #16]
    goto done;
    65dc:	b.n	65c2 <FatFile::seekSet(unsigned long)+0x8e>
    nNew -= nCur;
    65de:	subs	r6, r6, r2
    65e0:	b.n	658a <FatFile::seekSet(unsigned long)+0x56>
    65e2:	nop

000065e4 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>:
                              oflag_t oflag, uint8_t lfnOrd) {
    65e4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    65e8:	mov	r6, r1
    65ea:	mov	r5, r2
  memset(this, 0, sizeof(FatFile));
    65ec:	movs	r1, #0
    65ee:	movs	r2, #36	; 0x24
                              oflag_t oflag, uint8_t lfnOrd) {
    65f0:	mov	r4, r0
    65f2:	mov	r8, r3
    65f4:	ldrb.w	r7, [sp, #24]
  memset(this, 0, sizeof(FatFile));
    65f8:	bl	e044 <memset>
  m_vol = dirFile->m_vol;
    65fc:	ldr	r0, [r6, #8]
  m_dirCluster = dirFile->m_firstCluster;
    65fe:	ldr	r3, [r6, #32]
    6600:	add.w	r2, r0, #52	; 0x34
  m_dirIndex = dirIndex;
    6604:	strh	r5, [r4, #4]
  dir += 0XF & dirIndex;
    6606:	and.w	r5, r5, #15
    660a:	add.w	r2, r2, r5, lsl #5
  m_vol = dirFile->m_vol;
    660e:	strd	r0, r3, [r4, #8]
  return (dir->attributes & FAT_ATTRIB_LABEL) == 0;
    6612:	ldrb	r1, [r2, #11]
  if (!isFatFileOrSubdir(dir)) {
    6614:	lsls	r3, r1, #28
    6616:	bmi.n	663c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
  m_attributes = dir->attributes & FS_ATTRIB_COPY;
    6618:	and.w	r1, r1, #55	; 0x37
    661c:	strb	r1, [r4, #0]
  if (isFatFile(dir)) {
    661e:	ldrb	r3, [r2, #11]
    6620:	tst.w	r3, #24
    6624:	bne.n	662c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x48>
    m_attributes |= FILE_ATTR_FILE;
    6626:	orr.w	r1, r1, #8
    662a:	strb	r1, [r4, #0]
  switch (oflag & O_ACCMODE) {
    662c:	and.w	r3, r8, #3
  m_lfnOrd = lfnOrd;
    6630:	strb	r7, [r4, #3]
  switch (oflag & O_ACCMODE) {
    6632:	cmp	r3, #1
    6634:	beq.n	66b0 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xcc>
    6636:	cmp	r3, #2
    6638:	beq.n	6648 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x64>
    663a:	cbz	r3, 6682 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x9e>
  m_attributes = FILE_ATTR_CLOSED;
    663c:	movs	r3, #0
  return false;
    663e:	mov	r0, r3
  m_attributes = FILE_ATTR_CLOSED;
    6640:	strb	r3, [r4, #0]
  m_flags = 0;
    6642:	strb	r3, [r4, #2]
}
    6644:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (oflag & O_ACCMODE) {
    6648:	movs	r3, #3
  bool isSubDir() const { return m_attributes & FILE_ATTR_SUBDIR; }
    664a:	ldrb	r1, [r4, #0]
      m_flags = FILE_FLAG_WRITE;
    664c:	strb	r3, [r4, #2]
    if (isSubDir() || isReadOnly()) {
    664e:	lsls	r5, r1, #27
    6650:	bmi.n	663c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
    6652:	lsls	r6, r1, #31
    6654:	bmi.n	663c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
    m_attributes |= FS_ATTRIB_ARCHIVE;
    6656:	orr.w	r1, r1, #32
  if (oflag & O_TRUNC) {
    665a:	tst.w	r8, #1024	; 0x400
    m_attributes |= FS_ATTRIB_ARCHIVE;
    665e:	strb	r1, [r4, #0]
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    6660:	and.w	r1, r8, #8
    6664:	orr.w	r3, r3, r1
    6668:	strb	r3, [r4, #2]
  uint32_t sector() { return m_sector; }
    666a:	ldr	r1, [r0, #44]	; 0x2c
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16) |
    666c:	ldrh	r5, [r2, #20]
  m_dirSector = m_vol->cacheSectorNumber();
    666e:	str	r1, [r4, #24]
                 getLe16(dir->firstClusterLow);
    6670:	ldrh	r1, [r2, #26]
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16) |
    6672:	orr.w	r1, r1, r5, lsl #16
  if (oflag & O_TRUNC) {
    6676:	beq.n	669e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xba>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    6678:	cbnz	r1, 66c2 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xde>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    667a:	orn	r3, r3, #127	; 0x7f
    667e:	strb	r3, [r4, #2]
    6680:	b.n	66a4 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xc0>
      if (oflag & O_TRUNC) {
    6682:	tst.w	r8, #1024	; 0x400
    6686:	bne.n	663c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    6688:	and.w	r3, r8, #8
    668c:	orr.w	r3, r3, #1
    6690:	strb	r3, [r4, #2]
    6692:	ldr	r1, [r0, #44]	; 0x2c
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16) |
    6694:	ldrh	r3, [r2, #20]
  m_dirSector = m_vol->cacheSectorNumber();
    6696:	str	r1, [r4, #24]
                 getLe16(dir->firstClusterLow);
    6698:	ldrh	r1, [r2, #26]
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16) |
    669a:	orr.w	r1, r1, r3, lsl #16
    m_firstCluster = firstCluster;
    669e:	str	r1, [r4, #32]
  return *reinterpret_cast<const uint32_t*>(src);
    66a0:	ldr	r3, [r2, #28]
    m_fileSize = getLe32(dir->fileSize);
    66a2:	str	r3, [r4, #28]
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    66a4:	tst.w	r8, #16384	; 0x4000
    66a8:	bne.n	66b4 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xd0>
  return true;
    66aa:	movs	r0, #1
}
    66ac:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (oflag & O_ACCMODE) {
    66b0:	movs	r3, #2
    66b2:	b.n	664a <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x66>
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    66b4:	ldr	r1, [r4, #28]
    66b6:	mov	r0, r4
    66b8:	bl	6534 <FatFile::seekSet(unsigned long)>
    66bc:	cmp	r0, #0
    66be:	bne.n	66aa <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xc6>
    66c0:	b.n	663c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    66c2:	bl	6c78 <FatPartition::freeChain(unsigned long)>
    66c6:	cmp	r0, #0
    66c8:	beq.n	663c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    66ca:	ldrb	r3, [r4, #2]
    66cc:	b.n	667a <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x96>
    66ce:	nop

000066d0 <FatFile::openNext(FatFile*, int)>:
  bool isOpen() const { return m_attributes; }
    66d0:	ldrb	r3, [r0, #0]
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    66d2:	cmp	r3, #0
    66d4:	bne.n	6762 <FatFile::openNext(FatFile*, int)+0x92>
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
    66d6:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    66da:	ldrb	r3, [r1, #0]
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
    66dc:	sub	sp, #16
    66de:	mov	r4, r1
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    66e0:	tst.w	r3, #208	; 0xd0
    66e4:	beq.n	6748 <FatFile::openNext(FatFile*, int)+0x78>
  uint32_t curPosition() const { return m_curPosition; }
    66e6:	ldr	r3, [r1, #20]
    66e8:	ands.w	r5, r3, #31
    66ec:	bne.n	6748 <FatFile::openNext(FatFile*, int)+0x78>
    66ee:	mov	r6, r0
    66f0:	mov	r8, r2
    66f2:	mov	r9, r5
    int8_t n = read(&n, 1);
    66f4:	movs	r2, #1
    66f6:	add.w	r1, sp, #15
    66fa:	mov	r0, r4
  uint8_t i = (m_curPosition >> 5) & 0XF;
    66fc:	ubfx	sl, r3, #5, #4
    index = dirFile->curPosition() / FS_DIR_SIZE;
    6700:	lsrs	r7, r3, #5
    int8_t n = read(&n, 1);
    6702:	bl	60a4 <FatFile::read(void*, unsigned int)>
    if (n != 1) {
    6706:	sxtb	r0, r0
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    6708:	mov.w	r2, sl, lsl #5
    if (n != 1) {
    670c:	cmp	r0, #1
    670e:	bne.n	6748 <FatFile::openNext(FatFile*, int)+0x78>
    m_curPosition += FS_DIR_SIZE - 1;
    6710:	ldr	r3, [r4, #20]
  uint8_t* cacheBuffer() { return m_buffer; }
    6712:	ldr	r1, [r4, #8]
    6714:	adds	r3, #31
    6716:	add.w	ip, r1, #52	; 0x34
    671a:	str	r3, [r4, #20]
    if (dir->name[0] == FAT_NAME_FREE) {
    671c:	ldrb.w	r2, [ip, r2]
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    6720:	add.w	ip, ip, sl, lsl #5
    if (dir->name[0] == FAT_NAME_FREE) {
    6724:	cbz	r2, 6748 <FatFile::openNext(FatFile*, int)+0x78>
    if (dir->name[0] == '.' || dir->name[0] == FAT_NAME_DELETED) {
    6726:	cmp	r2, #46	; 0x2e
    6728:	beq.n	6750 <FatFile::openNext(FatFile*, int)+0x80>
    672a:	sub.w	r0, r2, #229	; 0xe5
    672e:	clz	r0, r0
    6732:	lsrs	r0, r0, #5
    6734:	cbnz	r0, 6750 <FatFile::openNext(FatFile*, int)+0x80>
  return (dir->attributes & FAT_ATTRIB_LABEL) == 0;
    6736:	ldrb.w	r1, [ip, #11]
    } else if (isFatFileOrSubdir(dir)) {
    673a:	ands.w	lr, r1, #8
    673e:	beq.n	6766 <FatFile::openNext(FatFile*, int)+0x96>
    } else if (isFatLongName(dir)) {
    6740:	cmp	r1, #15
    6742:	beq.n	6754 <FatFile::openNext(FatFile*, int)+0x84>
      lfnOrd = 0;
    6744:	mov	r5, r0
    6746:	b.n	66f4 <FatFile::openNext(FatFile*, int)+0x24>
  return false;
    6748:	movs	r0, #0
}
    674a:	add	sp, #16
    674c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      lfnOrd = 0;
    6750:	movs	r5, #0
    6752:	b.n	66f4 <FatFile::openNext(FatFile*, int)+0x24>
      if (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) {
    6754:	lsls	r1, r2, #25
    6756:	bpl.n	66f4 <FatFile::openNext(FatFile*, int)+0x24>
        lfnOrd = ldir->order & 0X1F;
    6758:	and.w	r5, r2, #31
        checksum = ldir->checksum;
    675c:	ldrb.w	r9, [ip, #13]
    6760:	b.n	66f4 <FatFile::openNext(FatFile*, int)+0x24>
  return false;
    6762:	movs	r0, #0
}
    6764:	bx	lr
      if (lfnOrd && checksum != lfnChecksum(dir->name)) {
    6766:	cbz	r5, 678a <FatFile::openNext(FatFile*, int)+0xba>
  bool cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  bool createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  uint16_t getLfnChar(DirLfn_t* ldir, uint8_t i);
  uint8_t lfnChecksum(const uint8_t* name) {
    uint8_t sum = 0;
    for (uint8_t i = 0; i < 11; i++) {
    6768:	add.w	r1, ip, #10
    676c:	b.n	6772 <FatFile::openNext(FatFile*, int)+0xa2>
      sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    676e:	ldrb.w	r2, [ip, #1]!
    6772:	mov.w	r3, lr, lsl #7
    for (uint8_t i = 0; i < 11; i++) {
    6776:	cmp	r1, ip
      sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    6778:	orr.w	r3, r3, lr, lsr #1
    677c:	uxtab	r3, r2, r3
    6780:	uxtb.w	lr, r3
    for (uint8_t i = 0; i < 11; i++) {
    6784:	bne.n	676e <FatFile::openNext(FatFile*, int)+0x9e>
    6786:	cmp	lr, r9
    6788:	bne.n	6748 <FatFile::openNext(FatFile*, int)+0x78>
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
    678a:	mov	r3, r8
    678c:	uxth	r2, r7
    678e:	mov	r1, r4
    6790:	mov	r0, r6
    6792:	str	r5, [sp, #0]
    6794:	bl	65e4 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    6798:	b.n	674a <FatFile::openNext(FatFile*, int)+0x7a>
    679a:	nop

0000679c <FatFile::sync()>:
  if (!isOpen()) {
    679c:	ldrb	r3, [r0, #0]
    679e:	cbz	r3, 67a4 <FatFile::sync()+0x8>
    67a0:	b.w	5a80 <FatFile::sync() [clone .part.0]>
}
    67a4:	movs	r0, #1
    67a6:	bx	lr

000067a8 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>:
//------------------------------------------------------------------------------
bool FatFile::timestamp(uint8_t flags, uint16_t year, uint8_t month,
                        uint8_t day, uint8_t hour, uint8_t minute,
                        uint8_t second) {
    67a8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    67ac:	mov	r6, r1
  uint16_t dirDate;
  uint16_t dirTime;
  DirFat_t* dir;

  if (!isFile() || year < 1980 || year > 2107 || month < 1 || month > 12 ||
      day < 1 || day > 31 || hour > 23 || minute > 59 || second > 59) {
    67ae:	ldrb	r1, [r0, #0]
                        uint8_t second) {
    67b0:	sub	sp, #8
      day < 1 || day > 31 || hour > 23 || minute > 59 || second > 59) {
    67b2:	lsls	r1, r1, #28
                        uint8_t second) {
    67b4:	ldrb.w	r7, [sp, #40]	; 0x28
    67b8:	ldrb.w	r9, [sp, #44]	; 0x2c
    67bc:	ldrb.w	sl, [sp, #48]	; 0x30
    67c0:	ldrb.w	r8, [sp, #52]	; 0x34
      day < 1 || day > 31 || hour > 23 || minute > 59 || second > 59) {
    67c4:	bpl.n	67f8 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
  if (!isFile() || year < 1980 || year > 2107 || month < 1 || month > 12 ||
    67c6:	subw	r2, r2, #1980	; 0x7bc
    67ca:	uxth	r4, r2
    67cc:	cmp	r4, #127	; 0x7f
    67ce:	bhi.n	67f8 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
    67d0:	subs	r2, r3, #1
    67d2:	str	r3, [sp, #4]
    67d4:	cmp	r2, #11
    67d6:	bhi.n	67f8 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
      day < 1 || day > 31 || hour > 23 || minute > 59 || second > 59) {
    67d8:	subs	r2, r7, #1
    67da:	cmp	r2, #30
    67dc:	bhi.n	67f8 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
    67de:	cmp.w	sl, #59	; 0x3b
    67e2:	it	ls
    67e4:	cmpls.w	r9, #23
    67e8:	bhi.n	67f8 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
    67ea:	cmp.w	r8, #59	; 0x3b
    67ee:	bhi.n	67f8 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // update directory entry
  if (!sync()) {
    67f0:	mov	r5, r0
  if (!isOpen()) {
    67f2:	bl	5a80 <FatFile::sync() [clone .part.0]>
  if (!sync()) {
    67f6:	cbnz	r0, 6800 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x58>
  }
  return m_vol->cacheSync();

fail:
  return false;
}
    67f8:	movs	r0, #0
    67fa:	add	sp, #8
    67fc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return m_cache.prepare(sector, options);
    6800:	ldr	r0, [r5, #8]
    6802:	movs	r2, #1
    6804:	ldr	r1, [r5, #24]
    6806:	adds	r0, #36	; 0x24
    6808:	bl	31ac <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    680c:	cmp	r0, #0
    680e:	beq.n	67f8 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
                                              : year << 9 | month << 5 | day;
    6810:	ldr	r3, [sp, #4]
             : hour << 11 | minute << 5 | second >> 1;
    6812:	mov.w	r2, r8, lsr #1
  return dir + (m_dirIndex & 0XF);
    6816:	ldrh	r1, [r5, #4]
                                              : year << 9 | month << 5 | day;
    6818:	orr.w	r3, r7, r3, lsl #5
  if (flags & T_ACCESS) {
    681c:	lsls	r7, r6, #31
  return dir + (m_dirIndex & 0XF);
    681e:	and.w	r1, r1, #15
             : hour << 11 | minute << 5 | second >> 1;
    6822:	orr.w	r2, r2, sl, lsl #5
                                              : year << 9 | month << 5 | day;
    6826:	orr.w	r3, r3, r4, lsl #9
    682a:	add.w	r0, r0, r1, lsl #5
    682e:	uxth	r3, r3
             : hour << 11 | minute << 5 | second >> 1;
    6830:	orr.w	r2, r2, r9, lsl #11
  *reinterpret_cast<uint16_t*>(dst) = src;
    6834:	it	mi
    6836:	strhmi	r3, [r0, #18]
  if (flags & T_CREATE) {
    6838:	lsls	r4, r6, #30
    683a:	uxth	r2, r2
    683c:	bpl.n	6850 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xa8>
    dir->createTimeMs = second & 1 ? 100 : 0;
    683e:	ands.w	r8, r8, #1
    6842:	strh	r3, [r0, #16]
    6844:	strh	r2, [r0, #14]
    6846:	it	ne
    6848:	movne.w	r8, #100	; 0x64
    684c:	strb.w	r8, [r0, #13]
  if (flags & T_WRITE) {
    6850:	lsls	r1, r6, #29
    6852:	bpl.n	6858 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xb0>
    6854:	strh	r3, [r0, #24]
    6856:	strh	r2, [r0, #22]
  return m_vol->cacheSync();
    6858:	ldr	r4, [r5, #8]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    685a:	add.w	r0, r4, #36	; 0x24
    685e:	bl	3154 <FsCache::sync()>
    6862:	cmp	r0, #0
    6864:	beq.n	67f8 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
    6866:	add.w	r0, r4, #564	; 0x234
    686a:	bl	3154 <FsCache::sync()>
    686e:	cmp	r0, #0
    6870:	beq.n	67f8 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
    6872:	ldr	r0, [r4, #0]
  bool syncDevice() { return m_blockDev->syncDevice(); }
    6874:	ldr	r3, [r0, #0]
    6876:	ldr	r3, [r3, #28]
}
    6878:	add	sp, #8
    687a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    687e:	bx	r3

00006880 <FatFile::truncate()>:
//------------------------------------------------------------------------------
bool FatFile::truncate() {
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    6880:	ldrb	r3, [r0, #2]
    6882:	lsls	r3, r3, #30
    6884:	bpl.n	68d6 <FatFile::truncate()+0x56>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    6886:	ldr	r3, [r0, #32]
bool FatFile::truncate() {
    6888:	push	{r4, lr}
    688a:	mov	r4, r0
    688c:	sub	sp, #8
  if (m_firstCluster == 0) {
    688e:	cbz	r3, 68bc <FatFile::truncate()+0x3c>
    return true;
  }
  if (m_curCluster) {
    6890:	ldr	r1, [r0, #16]
    6892:	cbnz	r1, 68da <FatFile::truncate()+0x5a>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  } else {
    toFree = m_firstCluster;
    6894:	str	r3, [sp, #4]
    m_firstCluster = 0;
    6896:	str	r1, [r0, #32]
  }
  if (toFree) {
    if (!m_vol->freeChain(toFree)) {
    6898:	mov	r1, r3
    689a:	ldr	r0, [r4, #8]
    689c:	bl	6c78 <FatPartition::freeChain(unsigned long)>
    68a0:	cbz	r0, 68d0 <FatFile::truncate()+0x50>
    }
  }
  m_fileSize = m_curPosition;

  // need to update directory entry
  m_flags |= FILE_FLAG_DIR_DIRTY;
    68a2:	ldrb	r3, [r4, #2]
  m_fileSize = m_curPosition;
    68a4:	ldr	r1, [r4, #20]
  m_flags |= FILE_FLAG_DIR_DIRTY;
    68a6:	orn	r3, r3, #127	; 0x7f
  if (!isOpen()) {
    68aa:	ldrb	r2, [r4, #0]
  m_fileSize = m_curPosition;
    68ac:	str	r1, [r4, #28]
  m_flags |= FILE_FLAG_DIR_DIRTY;
    68ae:	strb	r3, [r4, #2]
  if (!isOpen()) {
    68b0:	cbz	r2, 68bc <FatFile::truncate()+0x3c>
    68b2:	mov	r0, r4
    68b4:	bl	5a80 <FatFile::sync() [clone .part.0]>
  return sync();

fail:
  return false;
}
    68b8:	add	sp, #8
    68ba:	pop	{r4, pc}
    return true;
    68bc:	movs	r0, #1
}
    68be:	add	sp, #8
    68c0:	pop	{r4, pc}
  }
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) { return fatPut(cluster, 0x0FFFFFFF); }
    68c2:	mvn.w	r2, #4026531840	; 0xf0000000
    68c6:	ldr	r1, [r4, #16]
    68c8:	ldr	r0, [r4, #8]
    68ca:	bl	6b90 <FatPartition::fatPut(unsigned long, unsigned long)>
      if (!m_vol->fatPutEOC(m_curCluster)) {
    68ce:	cbnz	r0, 68ec <FatFile::truncate()+0x6c>
  return false;
    68d0:	movs	r0, #0
}
    68d2:	add	sp, #8
    68d4:	pop	{r4, pc}
  return false;
    68d6:	movs	r0, #0
}
    68d8:	bx	lr
    toFree = 0;
    68da:	movs	r3, #0
    int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    68dc:	add	r2, sp, #4
    68de:	ldr	r0, [r0, #8]
    toFree = 0;
    68e0:	str	r3, [sp, #4]
    int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    68e2:	bl	6b6c <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    68e6:	cmp	r0, #0
    68e8:	blt.n	68d0 <FatFile::truncate()+0x50>
    if (fg) {
    68ea:	bne.n	68c2 <FatFile::truncate()+0x42>
  if (toFree) {
    68ec:	ldr	r3, [sp, #4]
    68ee:	cmp	r3, #0
    68f0:	beq.n	68a2 <FatFile::truncate()+0x22>
    68f2:	b.n	6898 <FatFile::truncate()+0x18>

000068f4 <FatFile::write(void const*, unsigned int)>:
//------------------------------------------------------------------------------
size_t FatFile::write(const void* buf, size_t nbyte) {
    68f4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  bool isWritable() const { return m_flags & FILE_FLAG_WRITE; }
    68f8:	ldrb	r3, [r0, #2]
    68fa:	mov	r5, r0
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isWritable()) {
    68fc:	lsls	r4, r3, #30
    68fe:	bpl.n	69f0 <FatFile::write(void const*, unsigned int)+0xfc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    6900:	mov	r8, r1
    6902:	lsls	r1, r3, #28
    6904:	mov	r9, r2
    6906:	bmi.w	6a74 <FatFile::write(void const*, unsigned int)+0x180>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    690a:	ldr	r3, [r5, #20]
    690c:	adds.w	r2, r3, r9
    6910:	bcs.n	69f0 <FatFile::write(void const*, unsigned int)+0xfc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    6912:	cmp.w	r9, #0
    6916:	beq.n	699a <FatFile::write(void const*, unsigned int)+0xa6>
    6918:	mov	r7, r9
    m_status = 0;
    691a:	mov.w	sl, #0
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    691e:	ldr	r0, [r5, #8]
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    6920:	ubfx	r6, r3, #0, #9
    if (sectorOfCluster == 0 && sectorOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
    6924:	ldr	r1, [r5, #16]
    return (position >> 9) & m_clusterSectorMask;
    6926:	ldrb	r4, [r0, #5]
    if (sectorOfCluster == 0 && sectorOffset == 0) {
    6928:	ands.w	r4, r4, r3, lsr #9
    692c:	bne.n	69ae <FatFile::write(void const*, unsigned int)+0xba>
    692e:	cmp	r6, #0
    6930:	bne.n	69ae <FatFile::write(void const*, unsigned int)+0xba>
      if (m_curCluster != 0) {
    6932:	cmp	r1, #0
    6934:	beq.n	6a14 <FatFile::write(void const*, unsigned int)+0x120>
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
    6936:	ldrb	r2, [r5, #2]
    6938:	lsls	r2, r2, #25
    693a:	bpl.n	6a2a <FatFile::write(void const*, unsigned int)+0x136>
    693c:	ldr	r2, [r5, #28]
    693e:	cmp	r2, r3
    6940:	bls.n	6a2a <FatFile::write(void const*, unsigned int)+0x136>
          m_curCluster++;
    6942:	adds	r1, #1
    6944:	str	r1, [r5, #16]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    6946:	subs	r1, #2
    6948:	ldrb	r2, [r0, #6]
    694a:	ldr	r3, [r0, #20]
    694c:	lsls	r1, r2
    694e:	add	r1, r3
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    6950:	cmp.w	r7, #512	; 0x200
    6954:	bcc.n	69fe <FatFile::write(void const*, unsigned int)+0x10a>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (nToWrite >= 2 * m_vol->bytesPerSector()) {
    6956:	cmp.w	r7, #1024	; 0x400
    695a:	bcc.n	6a3e <FatFile::write(void const*, unsigned int)+0x14a>
      // use multiple sector write command
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
    695c:	ldrb	r3, [r0, #4]
      uint32_t nSector = nToWrite >> m_vol->bytesPerSectorShift();
    695e:	lsrs	r2, r7, #9
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
    6960:	subs	r3, r3, r4
    6962:	cmp	r3, r2
    6964:	it	cs
    6966:	movcs	r3, r2
    return sector <= m_sector && m_sector < (sector + count);
    6968:	ldr	r2, [r0, #44]	; 0x2c
    696a:	cmp	r2, r1
      if (nSector > maxSectors) {
        nSector = maxSectors;
      }
      n = nSector << m_vol->bytesPerSectorShift();
    696c:	mov.w	r4, r3, lsl #9
    6970:	bcc.n	6982 <FatFile::write(void const*, unsigned int)+0x8e>
    6972:	adds	r6, r3, r1
    6974:	cmp	r2, r6
    6976:	bcs.n	6982 <FatFile::write(void const*, unsigned int)+0x8e>
    m_sector = 0XFFFFFFFF;
    6978:	mov.w	r2, #4294967295
    m_status = 0;
    697c:	strb.w	sl, [r0, #36]	; 0x24
    m_sector = 0XFFFFFFFF;
    6980:	str	r2, [r0, #44]	; 0x2c
    return m_blockDev->writeSectors(sector, src, count);
    6982:	ldr	r0, [r0, #40]	; 0x28
    6984:	mov	r2, r8
    6986:	ldr	r6, [r0, #0]
    6988:	ldr	r6, [r6, #36]	; 0x24
    698a:	blx	r6
      if (!m_vol->cacheSafeWrite(sector, src, nSector)) {
    698c:	cbz	r0, 69f0 <FatFile::write(void const*, unsigned int)+0xfc>
      if (!m_vol->cacheSafeWrite(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    698e:	ldr	r3, [r5, #20]
  while (nToWrite) {
    6990:	subs	r7, r7, r4
    src += n;
    6992:	add	r8, r4
    m_curPosition += n;
    6994:	add	r3, r4
    6996:	str	r3, [r5, #20]
  while (nToWrite) {
    6998:	bne.n	691e <FatFile::write(void const*, unsigned int)+0x2a>
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    699a:	ldr	r2, [r5, #28]
    699c:	cmp	r2, r3
    699e:	bcs.n	6a8e <FatFile::write(void const*, unsigned int)+0x19a>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    m_flags |= FILE_FLAG_DIR_DIRTY;
    69a0:	ldrb	r2, [r5, #2]
    69a2:	mov	r0, r9
    m_fileSize = m_curPosition;
    69a4:	str	r3, [r5, #28]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    69a6:	orn	r3, r2, #127	; 0x7f
    69aa:	strb	r3, [r5, #2]
    69ac:	b.n	69fa <FatFile::write(void const*, unsigned int)+0x106>
    69ae:	ldrb	r2, [r0, #6]
    69b0:	subs	r1, #2
    69b2:	ldr	r3, [r0, #20]
    69b4:	lsls	r1, r2
    69b6:	add	r1, r3
    uint32_t sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    69b8:	add	r1, r4
    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    69ba:	cmp	r6, #0
    69bc:	beq.n	6950 <FatFile::write(void const*, unsigned int)+0x5c>
      n = m_vol->bytesPerSector() - sectorOffset;
    69be:	rsb	r4, r6, #512	; 0x200
        cacheOption = FsCache::CACHE_FOR_WRITE;
    69c2:	movs	r2, #1
    69c4:	cmp	r4, r7
    69c6:	it	cs
    69c8:	movcs	r4, r7
    return m_cache.prepare(sector, options);
    69ca:	adds	r0, #36	; 0x24
    69cc:	bl	31ac <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    69d0:	cbz	r0, 69f0 <FatFile::write(void const*, unsigned int)+0xfc>
      memcpy(dst, src, n);
    69d2:	add	r0, r6
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    69d4:	add	r6, r4
      memcpy(dst, src, n);
    69d6:	mov	r2, r4
    69d8:	mov	r1, r8
    69da:	bl	a0a4 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    69de:	cmp.w	r6, #512	; 0x200
    69e2:	ldr	r0, [r5, #8]
    69e4:	bne.n	698e <FatFile::write(void const*, unsigned int)+0x9a>
  bool cacheSyncData() { return m_cache.sync(); }
    69e6:	adds	r0, #36	; 0x24
    69e8:	bl	3154 <FsCache::sync()>
        if (!m_vol->cacheSyncData()) {
    69ec:	cmp	r0, #0
    69ee:	bne.n	698e <FatFile::write(void const*, unsigned int)+0x9a>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
    69f0:	ldrb	r3, [r5, #1]
  return 0;
    69f2:	movs	r0, #0
  m_error |= WRITE_ERROR;
    69f4:	orr.w	r3, r3, #1
    69f8:	strb	r3, [r5, #1]
}
    69fa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      n = m_vol->bytesPerSector() - sectorOffset;
    69fe:	rsb	r4, r6, #512	; 0x200
      if (sectorOffset == 0 &&
    6a02:	ldr	r2, [r5, #20]
    6a04:	ldr	r3, [r5, #28]
    6a06:	cmp	r4, r7
    6a08:	it	cs
    6a0a:	movcs	r4, r7
    6a0c:	cmp	r2, r3
    6a0e:	bcc.n	6a1c <FatFile::write(void const*, unsigned int)+0x128>
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    6a10:	movs	r2, #5
    6a12:	b.n	69ca <FatFile::write(void const*, unsigned int)+0xd6>
        if (m_firstCluster == 0) {
    6a14:	ldr	r1, [r5, #32]
    6a16:	cbz	r1, 6a62 <FatFile::write(void const*, unsigned int)+0x16e>
          m_curCluster = m_firstCluster;
    6a18:	str	r1, [r5, #16]
    6a1a:	b.n	6946 <FatFile::write(void const*, unsigned int)+0x52>
          (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
    6a1c:	ldrb	r3, [r5, #2]
        cacheOption = FsCache::CACHE_FOR_WRITE;
    6a1e:	tst.w	r3, #32
    6a22:	ite	ne
    6a24:	movne	r2, #5
    6a26:	moveq	r2, #1
    6a28:	b.n	69ca <FatFile::write(void const*, unsigned int)+0xd6>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    6a2a:	add.w	r2, r5, #16
    6a2e:	bl	6b6c <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    6a32:	cmp	r0, #0
    6a34:	blt.n	69f0 <FatFile::write(void const*, unsigned int)+0xfc>
        if (fg == 0) {
    6a36:	beq.n	6a82 <FatFile::write(void const*, unsigned int)+0x18e>
    uint32_t sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    6a38:	ldr	r0, [r5, #8]
    6a3a:	ldr	r1, [r5, #16]
    6a3c:	b.n	6946 <FatFile::write(void const*, unsigned int)+0x52>
    if (isCached(sector)) {
    6a3e:	ldr	r3, [r0, #44]	; 0x2c
    6a40:	cmp	r3, r1
    6a42:	bne.n	6a4e <FatFile::write(void const*, unsigned int)+0x15a>
    m_sector = 0XFFFFFFFF;
    6a44:	mov.w	r3, #4294967295
    m_status = 0;
    6a48:	strb.w	sl, [r0, #36]	; 0x24
    m_sector = 0XFFFFFFFF;
    6a4c:	str	r3, [r0, #44]	; 0x2c
    return m_blockDev->writeSector(sector, src);
    6a4e:	ldr	r0, [r0, #40]	; 0x28
    6a50:	mov	r2, r8
    6a52:	ldr	r3, [r0, #0]
    6a54:	ldr	r3, [r3, #32]
    6a56:	blx	r3
      if (!m_vol->cacheSafeWrite(sector, src)) {
    6a58:	cmp	r0, #0
    6a5a:	beq.n	69f0 <FatFile::write(void const*, unsigned int)+0xfc>
      n = m_vol->bytesPerSector();
    6a5c:	mov.w	r4, #512	; 0x200
    6a60:	b.n	698e <FatFile::write(void const*, unsigned int)+0x9a>
          if (!addCluster()) {
    6a62:	mov	r0, r5
    6a64:	bl	5b3c <FatFile::addCluster()>
    6a68:	cmp	r0, #0
    6a6a:	beq.n	69f0 <FatFile::write(void const*, unsigned int)+0xfc>
          m_firstCluster = m_curCluster;
    6a6c:	ldr	r1, [r5, #16]
    uint32_t sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    6a6e:	ldr	r0, [r5, #8]
          m_firstCluster = m_curCluster;
    6a70:	str	r1, [r5, #32]
    6a72:	b.n	6946 <FatFile::write(void const*, unsigned int)+0x52>
    if (!seekSet(m_fileSize)) {
    6a74:	ldr	r1, [r0, #28]
    6a76:	bl	6534 <FatFile::seekSet(unsigned long)>
    6a7a:	cmp	r0, #0
    6a7c:	bne.w	690a <FatFile::write(void const*, unsigned int)+0x16>
    6a80:	b.n	69f0 <FatFile::write(void const*, unsigned int)+0xfc>
          if (!addCluster()) {
    6a82:	mov	r0, r5
    6a84:	bl	5b3c <FatFile::addCluster()>
    6a88:	cmp	r0, #0
    6a8a:	bne.n	6a38 <FatFile::write(void const*, unsigned int)+0x144>
    6a8c:	b.n	69f0 <FatFile::write(void const*, unsigned int)+0xfc>
  } else if (FsDateTime::callback) {
    6a8e:	ldr	r3, [pc, #20]	; (6aa4 <FatFile::write(void const*, unsigned int)+0x1b0>)
    6a90:	ldr	r3, [r3, #0]
    6a92:	cbz	r3, 6aa0 <FatFile::write(void const*, unsigned int)+0x1ac>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    6a94:	ldrb	r3, [r5, #2]
    6a96:	mov	r0, r9
    6a98:	orn	r3, r3, #127	; 0x7f
    6a9c:	strb	r3, [r5, #2]
    6a9e:	b.n	69fa <FatFile::write(void const*, unsigned int)+0x106>
    6aa0:	mov	r0, r9
    6aa2:	b.n	69fa <FatFile::write(void const*, unsigned int)+0x106>
    6aa4:	.word	0x20006404

00006aa8 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>:
fail:
  return false;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    6aa8:	push	{r4, r5, r6, lr}
  uint8_t fatType() const { return m_fatType; }
    6aaa:	ldrb	r3, [r0, #7]
    6aac:	mov	r5, r0
    6aae:	mov	r4, r1
    6ab0:	mov	r6, r2
  if (cluster < 2 || cluster > m_lastCluster) {
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
    6ab2:	cmp	r3, #32
    6ab4:	beq.n	6aea <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0x42>
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint16_t offset = (cluster << 2) & m_sectorMask;
    next = getLe32(pc + offset);
  } else if (fatType() == 16) {
    6ab6:	cmp	r3, #16
    6ab8:	beq.n	6ac0 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0x18>
  }
  *value = next;
  return 1;

fail:
  return -1;
    6aba:	mov.w	r0, #4294967295
}
    6abe:	pop	{r4, r5, r6, pc}
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1));
    6ac0:	ldr	r3, [r0, #24]
    6ac2:	ubfx	r1, r1, #8, #8
    return m_fatCache.prepare(sector, options);
    6ac6:	add.w	r0, r0, #564	; 0x234
    6aca:	movs	r2, #2
    6acc:	add	r1, r3
    6ace:	bl	31ac <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    6ad2:	cmp	r0, #0
    6ad4:	beq.n	6aba <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0x12>
    uint16_t offset = (cluster << 1) & m_sectorMask;
    6ad6:	lsls	r1, r4, #1
  if (isEOC(next)) {
    6ad8:	ldr	r2, [r5, #28]
    next = getLe16(pc + offset);
    6ada:	and.w	r1, r1, #510	; 0x1fe
    6ade:	ldrh	r3, [r0, r1]
  if (isEOC(next)) {
    6ae0:	cmp	r2, r3
    6ae2:	bcc.n	6b0c <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0x64>
  return 1;
    6ae4:	movs	r0, #1
  *value = next;
    6ae6:	str	r3, [r6, #0]
}
    6ae8:	pop	{r4, r5, r6, pc}
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    6aea:	ldr	r1, [r0, #24]
    6aec:	movs	r2, #2
    6aee:	add.w	r0, r0, #564	; 0x234
    6af2:	add.w	r1, r1, r4, lsr #7
    6af6:	bl	31ac <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    6afa:	cmp	r0, #0
    6afc:	beq.n	6aba <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0x12>
    uint16_t offset = (cluster << 2) & m_sectorMask;
    6afe:	lsls	r1, r4, #2
  if (isEOC(next)) {
    6b00:	ldr	r2, [r5, #28]
    next = getLe32(pc + offset);
    6b02:	and.w	r1, r1, #508	; 0x1fc
  return *reinterpret_cast<const uint32_t*>(src);
    6b06:	ldr	r3, [r0, r1]
  if (isEOC(next)) {
    6b08:	cmp	r2, r3
    6b0a:	bcs.n	6ae4 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0x3c>
    return 0;
    6b0c:	movs	r0, #0
}
    6b0e:	pop	{r4, r5, r6, pc}

00006b10 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]>:
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
    6b10:	push	{r3, r4, r5, lr}
  uint8_t fatType() const { return m_fatType; }
    6b12:	ldrb	r3, [r0, #7]
    6b14:	mov	r4, r1
    6b16:	mov	r5, r2
  if (cluster < 2 || cluster > m_lastCluster) {
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
    6b18:	cmp	r3, #32
    6b1a:	beq.n	6b48 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x38>
    uint16_t offset = (cluster << 2) & m_sectorMask;
    setLe32(pc + offset, value);
    return true;
  }

  if (fatType() == 16) {
    6b1c:	cmp	r3, #16
    6b1e:	beq.n	6b24 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x14>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
    6b20:	movs	r0, #0
}
    6b22:	pop	{r3, r4, r5, pc}
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1));
    6b24:	ldr	r3, [r0, #24]
    6b26:	ubfx	r1, r1, #8, #8
    return m_fatCache.prepare(sector, options);
    6b2a:	add.w	r0, r0, #564	; 0x234
    6b2e:	movs	r2, #3
    6b30:	add	r1, r3
    6b32:	bl	31ac <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    6b36:	mov	r3, r0
    6b38:	cmp	r0, #0
    6b3a:	beq.n	6b20 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x10>
    uint16_t offset = (cluster << 1) & m_sectorMask;
    6b3c:	lsls	r1, r4, #1
    return true;
    6b3e:	movs	r0, #1
    setLe16(pc + offset, value);
    6b40:	and.w	r1, r1, #510	; 0x1fe
    6b44:	strh	r5, [r3, r1]
}
    6b46:	pop	{r3, r4, r5, pc}
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    6b48:	ldr	r1, [r0, #24]
    6b4a:	movs	r2, #3
    6b4c:	add.w	r0, r0, #564	; 0x234
    6b50:	add.w	r1, r1, r4, lsr #7
    6b54:	bl	31ac <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    6b58:	mov	r3, r0
    6b5a:	cmp	r0, #0
    6b5c:	beq.n	6b20 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x10>
    uint16_t offset = (cluster << 2) & m_sectorMask;
    6b5e:	lsls	r1, r4, #2
    return true;
    6b60:	movs	r0, #1
    setLe32(pc + offset, value);
    6b62:	and.w	r1, r1, #508	; 0x1fc
  *reinterpret_cast<uint32_t*>(dst) = src;
    6b66:	str	r5, [r3, r1]
}
    6b68:	pop	{r3, r4, r5, pc}
    6b6a:	nop

00006b6c <FatPartition::fatGet(unsigned long, unsigned long*)>:
  if (cluster < 2 || cluster > m_lastCluster) {
    6b6c:	cmp	r1, #1
    6b6e:	bls.n	6b8a <FatPartition::fatGet(unsigned long, unsigned long*)+0x1e>
int8_t FatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    6b70:	push	{r4}
  if (cluster < 2 || cluster > m_lastCluster) {
    6b72:	ldr	r4, [r0, #28]
    6b74:	cmp	r4, r1
    6b76:	bcc.n	6b80 <FatPartition::fatGet(unsigned long, unsigned long*)+0x14>
}
    6b78:	ldr.w	r4, [sp], #4
    6b7c:	b.w	6aa8 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>
    6b80:	mov.w	r0, #4294967295
    6b84:	ldr.w	r4, [sp], #4
    6b88:	bx	lr
    6b8a:	mov.w	r0, #4294967295
    6b8e:	bx	lr

00006b90 <FatPartition::fatPut(unsigned long, unsigned long)>:
  if (cluster < 2 || cluster > m_lastCluster) {
    6b90:	cmp	r1, #1
    6b92:	bls.n	6bae <FatPartition::fatPut(unsigned long, unsigned long)+0x1e>
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
    6b94:	push	{r3, r4, r5, lr}
  if (cluster < 2 || cluster > m_lastCluster) {
    6b96:	ldr	r3, [r0, #28]
    6b98:	mov	r4, r1
    6b9a:	cmp	r3, r1
    6b9c:	bcc.n	6baa <FatPartition::fatPut(unsigned long, unsigned long)+0x1a>
  uint8_t fatType() const { return m_fatType; }
    6b9e:	ldrb	r3, [r0, #7]
    6ba0:	mov	r5, r2
  if (fatType() == 32) {
    6ba2:	cmp	r3, #32
    6ba4:	beq.n	6bd6 <FatPartition::fatPut(unsigned long, unsigned long)+0x46>
  if (fatType() == 16) {
    6ba6:	cmp	r3, #16
    6ba8:	beq.n	6bb2 <FatPartition::fatPut(unsigned long, unsigned long)+0x22>
  return false;
    6baa:	movs	r0, #0
}
    6bac:	pop	{r3, r4, r5, pc}
  return false;
    6bae:	movs	r0, #0
}
    6bb0:	bx	lr
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1));
    6bb2:	ldr	r3, [r0, #24]
    6bb4:	ubfx	r1, r1, #8, #8
    return m_fatCache.prepare(sector, options);
    6bb8:	add.w	r0, r0, #564	; 0x234
    6bbc:	movs	r2, #3
    6bbe:	add	r1, r3
    6bc0:	bl	31ac <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    6bc4:	mov	r3, r0
    6bc6:	cmp	r0, #0
    6bc8:	beq.n	6baa <FatPartition::fatPut(unsigned long, unsigned long)+0x1a>
    uint16_t offset = (cluster << 1) & m_sectorMask;
    6bca:	lsls	r4, r4, #1
    return true;
    6bcc:	movs	r0, #1
    setLe16(pc + offset, value);
    6bce:	and.w	r4, r4, #510	; 0x1fe
    6bd2:	strh	r5, [r3, r4]
}
    6bd4:	pop	{r3, r4, r5, pc}
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    6bd6:	ldr	r1, [r0, #24]
    6bd8:	movs	r2, #3
    6bda:	add.w	r0, r0, #564	; 0x234
    6bde:	add.w	r1, r1, r4, lsr #7
    6be2:	bl	31ac <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    6be6:	mov	r3, r0
    6be8:	cmp	r0, #0
    6bea:	beq.n	6baa <FatPartition::fatPut(unsigned long, unsigned long)+0x1a>
    uint16_t offset = (cluster << 2) & m_sectorMask;
    6bec:	lsls	r4, r4, #2
    return true;
    6bee:	movs	r0, #1
    setLe32(pc + offset, value);
    6bf0:	and.w	r4, r4, #508	; 0x1fc
    6bf4:	str	r5, [r3, r4]
}
    6bf6:	pop	{r3, r4, r5, pc}

00006bf8 <FatPartition::allocateCluster(unsigned long, unsigned long*)>:
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    6bf8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (m_allocSearchStart < current) {
    6bfc:	ldr	r4, [r0, #12]
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    6bfe:	sub	sp, #8
    6c00:	mov	r5, r0
    6c02:	mov	r6, r1
  if (m_allocSearchStart < current) {
    6c04:	cmp	r4, r1
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    6c06:	mov	r8, r2
  if (m_allocSearchStart < current) {
    6c08:	bcc.n	6c72 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x7a>
    setStart = true;
    6c0a:	movs	r7, #1
    find++;
    6c0c:	adds	r4, #1
    if (find > m_lastCluster) {
    6c0e:	ldr	r3, [r5, #28]
    6c10:	add	r2, sp, #4
    6c12:	mov	r0, r5
    6c14:	cmp	r3, r4
    6c16:	bcs.n	6c24 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x2c>
      if (setStart) {
    6c18:	cbnz	r7, 6c68 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x70>
      find = m_allocSearchStart;
    6c1a:	ldr	r4, [r5, #12]
      setStart = true;
    6c1c:	movs	r7, #1
    find++;
    6c1e:	add	r4, r7
    if (find > m_lastCluster) {
    6c20:	cmp	r3, r4
    6c22:	bcc.n	6c68 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x70>
  if (cluster < 2 || cluster > m_lastCluster) {
    6c24:	cmp	r6, r4
    6c26:	it	ne
    6c28:	cmpne	r4, #1
    6c2a:	mov	r1, r4
    6c2c:	bls.n	6c68 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x70>
    6c2e:	bl	6aa8 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>
    if (fg < 0) {
    6c32:	cmp	r0, #0
    6c34:	blt.n	6c68 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x70>
    if (fg && f == 0) {
    6c36:	beq.n	6c0c <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x14>
    6c38:	ldr	r3, [sp, #4]
    6c3a:	cmp	r3, #0
    6c3c:	bne.n	6c0c <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x14>
  if (setStart) {
    6c3e:	cbz	r7, 6c42 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x4a>
    m_allocSearchStart = find;
    6c40:	str	r4, [r5, #12]
  bool fatPutEOC(uint32_t cluster) { return fatPut(cluster, 0x0FFFFFFF); }
    6c42:	mvn.w	r2, #4026531840	; 0xf0000000
    6c46:	mov	r1, r4
    6c48:	mov	r0, r5
    6c4a:	bl	6b90 <FatPartition::fatPut(unsigned long, unsigned long)>
  if (!fatPutEOC(find)) {
    6c4e:	mov	r7, r0
    6c50:	cbz	r0, 6c68 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x70>
  if (current) {
    6c52:	cbnz	r6, 6c5a <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x62>
  *next = find;
    6c54:	str.w	r4, [r8]
  return true;
    6c58:	b.n	6c6a <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x72>
    if (!fatPut(current, find)) {
    6c5a:	mov	r1, r6
    6c5c:	mov	r0, r5
    6c5e:	mov	r2, r4
    6c60:	bl	6b90 <FatPartition::fatPut(unsigned long, unsigned long)>
    6c64:	cmp	r0, #0
    6c66:	bne.n	6c54 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x5c>
  return false;
    6c68:	movs	r7, #0
}
    6c6a:	mov	r0, r7
    6c6c:	add	sp, #8
    6c6e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6c72:	mov	r4, r1
    setStart = false;
    6c74:	movs	r7, #0
    6c76:	b.n	6c0c <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x14>

00006c78 <FatPartition::freeChain(unsigned long)>:
//------------------------------------------------------------------------------
// free a cluster chain
bool FatPartition::freeChain(uint32_t cluster) {
    6c78:	push	{r4, r5, r6, lr}
    6c7a:	mov	r5, r0
    6c7c:	sub	sp, #8
    6c7e:	mov	r4, r1
    6c80:	b.n	6cb2 <FatPartition::freeChain(unsigned long)+0x3a>
  if (cluster < 2 || cluster > m_lastCluster) {
    6c82:	ldr	r3, [r5, #28]
    6c84:	cmp	r4, r3
    6c86:	bhi.n	6cbc <FatPartition::freeChain(unsigned long)+0x44>
    6c88:	bl	6aa8 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>
  if (cluster < 2 || cluster > m_lastCluster) {
    6c8c:	mov	r6, r0
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
    if (fg < 0) {
    6c8e:	mov	r1, r4
    6c90:	movs	r2, #0
    6c92:	cmp	r6, #0
    6c94:	mov	r0, r5
    6c96:	blt.n	6cbc <FatPartition::freeChain(unsigned long)+0x44>
  if (cluster < 2 || cluster > m_lastCluster) {
    6c98:	ldr	r3, [r5, #28]
    6c9a:	cmp	r4, r3
    6c9c:	bhi.n	6cbc <FatPartition::freeChain(unsigned long)+0x44>
    6c9e:	bl	6b10 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);
    if (cluster < m_allocSearchStart) {
      m_allocSearchStart = cluster - 1;
    6ca2:	subs	r2, r4, #1
    if (!fatPut(cluster, 0)) {
    6ca4:	cbz	r0, 6cbc <FatPartition::freeChain(unsigned long)+0x44>
    if (cluster < m_allocSearchStart) {
    6ca6:	ldr	r3, [r5, #12]
    6ca8:	cmp	r3, r4
    }
    cluster = next;
    6caa:	ldr	r4, [sp, #4]
      m_allocSearchStart = cluster - 1;
    6cac:	it	hi
    6cae:	strhi	r2, [r5, #12]
  } while (fg);
    6cb0:	cbz	r6, 6cbe <FatPartition::freeChain(unsigned long)+0x46>
  if (cluster < 2 || cluster > m_lastCluster) {
    6cb2:	cmp	r4, #1
    6cb4:	mov	r1, r4
    6cb6:	add	r2, sp, #4
    6cb8:	mov	r0, r5
    6cba:	bhi.n	6c82 <FatPartition::freeChain(unsigned long)+0xa>

  return true;

fail:
  return false;
    6cbc:	movs	r0, #0
}
    6cbe:	add	sp, #8
    6cc0:	pop	{r4, r5, r6, pc}
    6cc2:	nop

00006cc4 <FatPartition::freeClusterCount()>:
//------------------------------------------------------------------------------
int32_t FatPartition::freeClusterCount() {
    6cc4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint8_t fatType() const { return m_fatType; }
    6cc8:	ldrb	r3, [r0, #7]
    6cca:	mov	r6, r0
    return m_freeClusterCount;
  }
#endif  // MAINTAIN_FREE_CLUSTER_COUNT
  uint32_t free = 0;
  uint32_t sector;
  uint32_t todo = m_lastCluster + 1;
    6ccc:	ldr	r5, [r0, #28]
      }
      if (fg && c == 0) {
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    6cce:	cmp	r3, #32
  uint32_t todo = m_lastCluster + 1;
    6cd0:	add.w	r5, r5, #1
  } else if (fatType() == 16 || fatType() == 32) {
    6cd4:	beq.n	6cda <FatPartition::freeClusterCount()+0x16>
    6cd6:	cmp	r3, #16
    6cd8:	bne.n	6d58 <FatPartition::freeClusterCount()+0x94>
    sector = m_fatStartSector;
    6cda:	ldr.w	r8, [r6, #24]
    while (todo) {
    6cde:	cmp	r5, #0
    6ce0:	beq.n	6d60 <FatPartition::freeClusterCount()+0x9c>
    return m_fatCache.prepare(sector, options);
    6ce2:	add.w	r7, r6, #564	; 0x234
  uint32_t free = 0;
    6ce6:	movs	r4, #0
    6ce8:	mov	r1, r8
    6cea:	movs	r2, #2
    6cec:	mov	r0, r7
    6cee:	add.w	r8, r8, #1
    6cf2:	bl	31ac <FsCache::prepare(unsigned long, unsigned char)>
      uint8_t* pc = fatCachePrepare(sector++, FsCache::CACHE_FOR_READ);
      if (!pc) {
    6cf6:	cbz	r0, 6d58 <FatPartition::freeClusterCount()+0x94>
        DBG_FAIL_MACRO;
        goto fail;
      }
      n = fatType() == 16 ? m_bytesPerSector / 2 : m_bytesPerSector / 4;
    6cf8:	ldrb	r3, [r6, #7]
    6cfa:	cmp	r3, #16
    6cfc:	beq.n	6d26 <FatPartition::freeClusterCount()+0x62>
      if (todo < n) {
    6cfe:	cmp	r5, #127	; 0x7f
    6d00:	bhi.n	6d4c <FatPartition::freeClusterCount()+0x88>
        n = todo;
    6d02:	uxth	r3, r5
    6d04:	mov	r1, r5
    6d06:	subs	r2, r3, #1
    6d08:	subs	r3, r0, #4
    6d0a:	uxth	r2, r2
    6d0c:	add.w	r0, r0, r2, lsl #2
          }
        }
      } else {
        uint32_t* p32 = reinterpret_cast<uint32_t*>(pc);
        for (uint16_t i = 0; i < n; i++) {
          if (p32[i] == 0) {
    6d10:	ldr.w	r2, [r3, #4]!
    6d14:	cbnz	r2, 6d18 <FatPartition::freeClusterCount()+0x54>
            free++;
    6d16:	adds	r4, #1
        for (uint16_t i = 0; i < n; i++) {
    6d18:	cmp	r3, r0
    6d1a:	bne.n	6d10 <FatPartition::freeClusterCount()+0x4c>
    while (todo) {
    6d1c:	subs	r5, r5, r1
    6d1e:	bne.n	6ce8 <FatPartition::freeClusterCount()+0x24>
  } else {
    // invalid FAT type
    DBG_FAIL_MACRO;
    goto fail;
  }
  setFreeClusterCount(free);
    6d20:	mov	r0, r4
  return free;

fail:
  return -1;
}
    6d22:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (todo < n) {
    6d26:	cmp	r5, #255	; 0xff
    6d28:	bls.n	6d52 <FatPartition::freeClusterCount()+0x8e>
    6d2a:	mov.w	r1, #256	; 0x100
      n = fatType() == 16 ? m_bytesPerSector / 2 : m_bytesPerSector / 4;
    6d2e:	mov	r3, r1
    6d30:	subs	r2, r3, #1
    6d32:	subs	r3, r0, #2
    6d34:	uxth	r2, r2
    6d36:	add.w	r0, r0, r2, lsl #1
          if (p16[i] == 0) {
    6d3a:	ldrh.w	r2, [r3, #2]!
    6d3e:	cbnz	r2, 6d42 <FatPartition::freeClusterCount()+0x7e>
            free++;
    6d40:	adds	r4, #1
        for (uint16_t i = 0; i < n; i++) {
    6d42:	cmp	r0, r3
    6d44:	bne.n	6d3a <FatPartition::freeClusterCount()+0x76>
    while (todo) {
    6d46:	subs	r5, r5, r1
    6d48:	bne.n	6ce8 <FatPartition::freeClusterCount()+0x24>
    6d4a:	b.n	6d20 <FatPartition::freeClusterCount()+0x5c>
      if (todo < n) {
    6d4c:	movs	r1, #128	; 0x80
      n = fatType() == 16 ? m_bytesPerSector / 2 : m_bytesPerSector / 4;
    6d4e:	mov	r3, r1
    6d50:	b.n	6d06 <FatPartition::freeClusterCount()+0x42>
        n = todo;
    6d52:	uxth	r3, r5
    6d54:	mov	r1, r5
    6d56:	b.n	6d30 <FatPartition::freeClusterCount()+0x6c>
  return -1;
    6d58:	mov.w	r0, #4294967295
}
    6d5c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    while (todo) {
    6d60:	mov	r0, r5
  return free;
    6d62:	b.n	6d22 <FatPartition::freeClusterCount()+0x5e>

00006d64 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)>:
//------------------------------------------------------------------------------
bool FatPartition::init(FsBlockDevice* dev, uint8_t part, uint32_t volStart) {
    6d64:	push	{r3, r4, r5, r6, r7, lr}
    6d66:	mov	r6, r3
    m_sector = 0XFFFFFFFF;
    6d68:	mov.w	r3, #4294967295
  m_blockDev = dev;
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
    6d6c:	mov.w	ip, #0
bool FatPartition::init(FsBlockDevice* dev, uint8_t part, uint32_t volStart) {
    6d70:	mov	r4, r0
    6d72:	str	r3, [r0, #44]	; 0x2c
  m_allocSearchStart = 1;
  m_cache.init(dev);
    6d74:	add.w	r7, r0, #36	; 0x24
    6d78:	str.w	r3, [r0, #572]	; 0x23c
  m_allocSearchStart = 1;
    6d7c:	movs	r3, #1
  m_blockDev = dev;
    6d7e:	str	r1, [r0, #0]
  m_fatType = 0;
    6d80:	strb.w	ip, [r0, #7]
    m_blockDev = blockDev;
    6d84:	str	r1, [r0, #40]	; 0x28
    6d86:	str.w	r1, [r0, #568]	; 0x238
    m_status = 0;
    6d8a:	strb.w	ip, [r0, #36]	; 0x24
    6d8e:	strb.w	ip, [r0, #564]	; 0x234
  m_allocSearchStart = 1;
    6d92:	str	r3, [r0, #12]
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(dev);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    6d94:	cbz	r2, 6dcc <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x68>
    if (part > 4) {
    6d96:	cmp	r2, #4
    6d98:	mov	r5, r2
    6d9a:	bls.n	6da0 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x3c>
  m_fatCache.setMirrorOffset(m_sectorsPerFat);
#endif  // USE_SEPARATE_FAT_CACHE
  return true;

fail:
  return false;
    6d9c:	movs	r0, #0
}
    6d9e:	pop	{r3, r4, r5, r6, r7, pc}
    return m_cache.prepare(sector, options);
    6da0:	mov	r2, ip
    6da2:	mov	r1, ip
    6da4:	mov	r0, r7
    6da6:	bl	31ac <FsCache::prepare(unsigned long, unsigned char)>
    if (!mbr) {
    6daa:	cmp	r0, #0
    6dac:	beq.n	6d9c <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x38>
    MbrPart_t* mp = mbr->part + part - 1;
    6dae:	mvn.w	r3, #4026531840	; 0xf0000000
    6db2:	add.w	r0, r0, #446	; 0x1be
    6db6:	add	r3, r5
    6db8:	lsls	r1, r3, #4
    6dba:	add.w	r3, r0, r3, lsl #4
    if (mp->type == 0 || (mp->boot != 0 && mp->boot != 0X80)) {
    6dbe:	ldrb	r2, [r3, #4]
    6dc0:	cmp	r2, #0
    6dc2:	beq.n	6d9c <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x38>
    6dc4:	ldrb	r2, [r0, r1]
    6dc6:	lsls	r2, r2, #25
    6dc8:	bne.n	6d9c <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x38>
  return *reinterpret_cast<const uint32_t*>(src);
    6dca:	ldr	r6, [r3, #8]
    6dcc:	movs	r2, #0
    6dce:	mov	r1, r6
    6dd0:	mov	r0, r7
    6dd2:	bl	31ac <FsCache::prepare(unsigned long, unsigned char)>
  if (!pbs) {
    6dd6:	cmp	r0, #0
    6dd8:	beq.n	6d9c <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x38>
  if (bpb->fatCount != 2 || getLe16(bpb->bytesPerSector) != m_bytesPerSector) {
    6dda:	ldrb	r3, [r0, #16]
    6ddc:	cmp	r3, #2
    6dde:	bne.n	6d9c <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x38>
    6de0:	ldrh.w	r3, [r0, #11]
    6de4:	cmp.w	r3, #512	; 0x200
    6de8:	bne.n	6d9c <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x38>
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    6dea:	ldrb	r1, [r0, #13]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    6dec:	subs	r3, r1, #1
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    6dee:	cmp	r1, #1
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    6df0:	strb	r1, [r4, #4]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    6df2:	strb	r3, [r4, #5]
  m_sectorsPerClusterShift = 0;
    6df4:	mov.w	r3, #0
    6df8:	strb	r3, [r4, #6]
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    6dfa:	beq.n	6e80 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x11c>
    6dfc:	movs	r2, #1
    6dfe:	lsls	r2, r2, #1
    m_sectorsPerClusterShift++;
    6e00:	adds	r3, #1
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    6e02:	uxtb	r2, r2
    m_sectorsPerClusterShift++;
    6e04:	uxtb	r3, r3
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    6e06:	cmp	r1, r2
    6e08:	beq.n	6e14 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0xb0>
    if (tmp == 0) {
    6e0a:	cmp	r3, #8
    6e0c:	bne.n	6dfe <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x9a>
  return false;
    6e0e:	movs	r0, #0
    6e10:	strb	r3, [r4, #6]
}
    6e12:	pop	{r3, r4, r5, r6, r7, pc}
  countOfClusters >>= m_sectorsPerClusterShift;
    6e14:	mov	r5, r3
    6e16:	strb	r3, [r4, #6]
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
    6e18:	ldrh	r1, [r0, #22]
    6e1a:	str	r1, [r4, #16]
  if (m_sectorsPerFat == 0) {
    6e1c:	cbnz	r1, 6e22 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0xbe>
    6e1e:	ldr	r1, [r0, #36]	; 0x24
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
    6e20:	str	r1, [r4, #16]
  m_fatStartSector = volStart + getLe16(bpb->reservedSectorCount);
    6e22:	ldrh	r3, [r0, #14]
  return *reinterpret_cast<const uint16_t*>(src);
    6e24:	ldrh.w	r2, [r0, #17]
    6e28:	add	r3, r6
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);
    6e2a:	strh	r2, [r4, #8]
      ((FS_DIR_SIZE * m_rootDirEntryCount + m_bytesPerSector - 1) /
    6e2c:	lsls	r2, r2, #5
  m_fatStartSector = volStart + getLe16(bpb->reservedSectorCount);
    6e2e:	str	r3, [r4, #24]
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
    6e30:	add.w	r3, r3, r1, lsl #1
      ((FS_DIR_SIZE * m_rootDirEntryCount + m_bytesPerSector - 1) /
    6e34:	addw	r2, r2, #511	; 0x1ff
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
    6e38:	str	r3, [r4, #32]
      m_rootDirStart +
    6e3a:	add.w	r3, r3, r2, lsr #9
  totalSectors = getLe16(bpb->totalSectors16);
    6e3e:	ldrh.w	r2, [r0, #19]
  m_dataStartSector =
    6e42:	str	r3, [r4, #20]
  if (totalSectors == 0) {
    6e44:	cbnz	r2, 6e48 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0xe4>
  return *reinterpret_cast<const uint32_t*>(src);
    6e46:	ldr	r2, [r0, #32]
  countOfClusters = totalSectors - (m_dataStartSector - volStart);
    6e48:	subs	r3, r6, r3
    6e4a:	add	r3, r2
  countOfClusters >>= m_sectorsPerClusterShift;
    6e4c:	lsrs	r3, r5
  m_lastCluster = countOfClusters + 1;
    6e4e:	adds	r2, r3, #1
    6e50:	str	r2, [r4, #28]
  if (countOfClusters < 4085) {
    6e52:	movw	r2, #4084	; 0xff4
    6e56:	cmp	r3, r2
    6e58:	bls.n	6e74 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x110>
  } else if (countOfClusters < 65525) {
    6e5a:	movw	r2, #65524	; 0xfff4
    6e5e:	cmp	r3, r2
    6e60:	bls.n	6e7c <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x118>
    6e62:	ldr	r2, [r0, #44]	; 0x2c
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
    6e64:	movs	r3, #32
    6e66:	str	r2, [r4, #32]
  return true;
    6e68:	movs	r0, #1
    m_fatType = 16;
    6e6a:	strb	r3, [r4, #7]
  /** Set the offset to the second FAT for mirroring.
   * \param[in] offset Sector offset to second FAT.
   */
  void setMirrorOffset(uint32_t offset) { m_mirrorOffset = offset; }
    6e6c:	str	r1, [r4, #48]	; 0x30
    6e6e:	str.w	r1, [r4, #576]	; 0x240
}
    6e72:	pop	{r3, r4, r5, r6, r7, pc}
    m_fatType = 12;
    6e74:	movs	r3, #12
  return false;
    6e76:	movs	r0, #0
    m_fatType = 12;
    6e78:	strb	r3, [r4, #7]
}
    6e7a:	pop	{r3, r4, r5, r6, r7, pc}
    6e7c:	movs	r3, #16
    6e7e:	b.n	6e68 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0x104>
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    6e80:	mov	r5, r3
    6e82:	b.n	6e18 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)+0xb4>

00006e84 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)>:
  } else if (i < 13) {
    setLe16(ldir->unicode3 + 2 * (i - 11), c);
  }
}
//==============================================================================
bool FatFile::cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    6e84:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  FatFile dir = *this;
    6e88:	mov	lr, r0
bool FatFile::cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    6e8a:	sub	sp, #40	; 0x28
    6e8c:	mov	r5, r2
    6e8e:	ldr	r4, [r2, #0]
    6e90:	mov	r6, r0
    6e92:	mov	r8, r1
  FatFile dir = *this;
    6e94:	add.w	ip, sp, #4
  DirLfn_t* ldir;
  fname->reset();
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    6e98:	mov	r7, r3
  FatFile dir = *this;
    6e9a:	ldmia.w	lr!, {r0, r1, r2, r3}
    6e9e:	stmia.w	ip!, {r0, r1, r2, r3}
    6ea2:	ldmia.w	lr!, {r0, r1, r2, r3}
    6ea6:	stmia.w	ip!, {r0, r1, r2, r3}
    6eaa:	ldr.w	r3, [lr]
    6eae:	str	r4, [r5, #4]
    6eb0:	str.w	r3, [ip]
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    6eb4:	cmp	r7, #0
    6eb6:	beq.n	6f30 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xac>
    6eb8:	mov.w	r9, #1
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(index - order));
    6ebc:	sub.w	r1, r8, r9
    return seekSet(32UL * index) ? readDirCache() : nullptr;
    6ec0:	add	r0, sp, #4
    6ec2:	uxth	r1, r1
    6ec4:	lsls	r1, r1, #5
    6ec6:	bl	6534 <FatFile::seekSet(unsigned long)>
    6eca:	cbz	r0, 6f34 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xb0>
    6ecc:	movs	r1, #0
    6ece:	add	r0, sp, #4
    6ed0:	bl	6274 <FatFile::readDirCache(bool)>
    if (!ldir) {
    6ed4:	mov	sl, r0
    6ed6:	cbz	r0, 6f34 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xb0>
    6ed8:	movs	r4, #0
    }
    // These should be checked in caller.
    DBG_HALT_IF(ldir->attributes != FAT_ATTRIB_LONG_NAME);
    DBG_HALT_IF(order != (ldir->order & 0X1F));
    for (uint8_t i = 0; i < 13; i++) {
      uint16_t u = getLfnChar(ldir, i);
    6eda:	uxtb	r2, r4
    6edc:	mov	r1, sl
    6ede:	mov	r0, r6
    for (uint8_t i = 0; i < 13; i++) {
    6ee0:	adds	r4, #1
      uint16_t u = getLfnChar(ldir, i);
    6ee2:	bl	58d8 <FatFile::getLfnChar(DirLfn_t*, unsigned char)>
      DBG_HALT_IF(cp == 0XFFFF);
      if (toUpcase(u) != toUpcase(cp)) {
        return false;
      }
#else   // USE_UTF8_LONG_NAMES
      if (u > 0X7F || toUpper(u) != toUpper(fname->getch())) {
    6ee6:	uxtb	r3, r0
      if (fname->atEnd()) {
    6ee8:	ldrd	r1, r2, [r5, #4]
    6eec:	cmp	r2, r1
  char getch() { return atEnd() ? 0 : *next++; }
    6eee:	add.w	ip, r1, #1
    6ef2:	beq.n	6f3c <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xb8>
      if (u > 0X7F || toUpper(u) != toUpper(fname->getch())) {
    6ef4:	cmp	r0, #127	; 0x7f
inline char toUpper(char c) { return isLower(c) ? c - 'a' + 'A' : c; }
    6ef6:	sub.w	r2, r3, #97	; 0x61
    6efa:	sub.w	lr, r3, #32
      if (u > 0X7F || toUpper(u) != toUpper(fname->getch())) {
    6efe:	bhi.n	6f34 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xb0>
inline char toUpper(char c) { return isLower(c) ? c - 'a' + 'A' : c; }
    6f00:	cmp	r2, #25
    6f02:	str.w	ip, [r5, #4]
    6f06:	ldrb	r2, [r1, #0]
    6f08:	it	ls
    6f0a:	uxtbls.w	r3, lr
    6f0e:	sub.w	r1, r2, #97	; 0x61
    6f12:	sub.w	r0, r2, #32
    6f16:	cmp	r1, #25
    6f18:	it	ls
    6f1a:	uxtbls	r2, r0
      if (u > 0X7F || toUpper(u) != toUpper(fname->getch())) {
    6f1c:	cmp	r2, r3
    6f1e:	bne.n	6f34 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xb0>
    for (uint8_t i = 0; i < 13; i++) {
    6f20:	cmp	r4, #13
    6f22:	bne.n	6eda <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x56>
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    6f24:	add.w	r9, r9, #1
    6f28:	uxtb.w	r9, r9
    6f2c:	cmp	r7, r9
    6f2e:	bcs.n	6ebc <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x38>
        return false;
      }
#endif  // USE_UTF8_LONG_NAMES
    }
  }
  return true;
    6f30:	movs	r0, #1
    6f32:	b.n	6f36 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xb2>

fail:
  return false;
    6f34:	movs	r0, #0
}
    6f36:	add	sp, #40	; 0x28
    6f38:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return u == 0;
    6f3c:	clz	r0, r0
    6f40:	lsrs	r0, r0, #5
}
    6f42:	add	sp, #40	; 0x28
    6f44:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00006f48 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)>:
//------------------------------------------------------------------------------
bool FatFile::createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    6f48:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  FatFile dir = *this;
    6f4c:	mov	lr, r0
bool FatFile::createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    6f4e:	sub	sp, #40	; 0x28
    6f50:	mov	r4, r2
    6f52:	mov	r8, r1
    6f54:	mov	r6, r3
  FatFile dir = *this;
    6f56:	add.w	r9, sp, #4
    6f5a:	add.w	r7, r2, #17
    6f5e:	add.w	ip, r2, #28
    uint8_t sum = 0;
    6f62:	movs	r5, #0
    6f64:	ldmia.w	lr!, {r0, r1, r2, r3}
    6f68:	stmia.w	r9!, {r0, r1, r2, r3}
    6f6c:	ldmia.w	lr!, {r0, r1, r2, r3}
    6f70:	stmia.w	r9!, {r0, r1, r2, r3}
    6f74:	ldr.w	r3, [lr]
    6f78:	str.w	r3, [r9]
      sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    6f7c:	lsls	r3, r5, #7
    6f7e:	ldrb.w	r2, [r7, #1]!
    6f82:	orr.w	r3, r3, r5, lsr #1
    for (uint8_t i = 0; i < 11; i++) {
    6f86:	cmp	r7, ip
      sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    6f88:	uxtab	r3, r2, r3
    6f8c:	uxtb	r5, r3
    for (uint8_t i = 0; i < 11; i++) {
    6f8e:	bne.n	6f7c <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x34>
  void reset() { next = begin; }
    6f90:	ldr	r3, [r4, #0]
    6f92:	str	r3, [r4, #4]
  DirLfn_t* ldir;
  uint8_t checksum = lfnChecksum(fname->sfn);
  uint8_t fc = 0;
  fname->reset();

  for (uint8_t order = 1; order <= lfnOrd; order++) {
    6f94:	cmp	r6, #0
    6f96:	beq.n	704c <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x104>
  uint8_t fc = 0;
    6f98:	mov.w	r9, #0
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    6f9c:	mov.w	sl, #1
    return seekSet(32UL * index) ? readDirCache() : nullptr;
    6fa0:	mov	r7, r9
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(index - order));
    6fa2:	sub.w	r1, r8, sl
    6fa6:	add	r0, sp, #4
    6fa8:	uxth	r1, r1
    6faa:	lsls	r1, r1, #5
    6fac:	bl	6534 <FatFile::seekSet(unsigned long)>
    6fb0:	cmp	r0, #0
    6fb2:	beq.n	705c <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x114>
    6fb4:	movs	r1, #0
    6fb6:	add	r0, sp, #4
    6fb8:	bl	6274 <FatFile::readDirCache(bool)>
    if (!ldir) {
    6fbc:	cmp	r0, #0
    6fbe:	beq.n	705c <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x114>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dir.m_vol->cacheDirty();
    6fc0:	ldr	r2, [sp, #12]
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    6fc2:	cmp	sl, r6
  bool atEnd() { return next == end; }
    6fc4:	mov.w	ip, #1
  void dirty() { m_status |= CACHE_STATUS_DIRTY; }
    6fc8:	ldrb.w	r3, [r2, #36]	; 0x24
    6fcc:	orr.w	r3, r3, #1
    6fd0:	strb.w	r3, [r2, #36]	; 0x24
    6fd4:	ite	eq
    6fd6:	orreq.w	r2, sl, #64	; 0x40
    6fda:	movne	r2, sl
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    6fdc:	movs	r3, #15
    ldir->mustBeZero1 = 0;
    6fde:	strb	r7, [r0, #12]
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    6fe0:	strb	r2, [r0, #0]
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    6fe2:	adds	r2, r0, #1
    6fe4:	strb	r3, [r0, #11]
    6fe6:	movs	r3, #0
    ldir->checksum = checksum;
    6fe8:	strb	r5, [r0, #13]
    6fea:	ldr	r1, [r4, #8]
  *reinterpret_cast<uint16_t*>(dst) = src;
    6fec:	strh	r7, [r0, #26]
    setLe16(ldir->mustBeZero2, 0);
    for (uint8_t i = 0; i < 13; i++) {
    6fee:	b.n	6ffe <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xb6>
    6ff0:	strh	r0, [r2, #0]
    6ff2:	add.w	ip, ip, #1
    6ff6:	adds	r3, #1
    6ff8:	adds	r2, #2
    6ffa:	uxtb.w	ip, ip
    6ffe:	ldr	r0, [r4, #4]
      uint16_t cp;
      if (fname->atEnd()) {
    7000:	cmp	r0, r1
    7002:	beq.n	7022 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xda>
  uint16_t get16() { return atEnd() ? 0 : *next++; }
    7004:	add.w	lr, r0, #1
    7008:	str.w	lr, [r4, #4]
    700c:	ldrb	r0, [r0, #0]
  if (i < 5) {
    700e:	cmp	r3, #4
    7010:	uxtb.w	lr, r3
    7014:	bls.n	6ff0 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xa8>
  } else if (i < 11) {
    7016:	cmp.w	lr, #10
    701a:	bhi.n	7036 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xee>
    701c:	strh.w	r0, [r2, #3]
}
    7020:	b.n	6ff2 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xaa>
        cp = fc++ ? 0XFFFF : 0;
    7022:	cmp.w	r9, #0
    7026:	beq.n	7054 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x10c>
    7028:	add.w	r9, r9, #1
    702c:	movw	r0, #65535	; 0xffff
    7030:	uxtb.w	r9, r9
    7034:	b.n	700e <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xc6>
    for (uint8_t i = 0; i < 13; i++) {
    7036:	cmp.w	ip, #13
  *reinterpret_cast<uint16_t*>(dst) = src;
    703a:	strh.w	r0, [r2, #5]
    703e:	bne.n	6ff2 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xaa>
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    7040:	add.w	sl, sl, #1
    7044:	uxtb.w	sl, sl
    7048:	cmp	r6, sl
    704a:	bcs.n	6fa2 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x5a>
        DBG_HALT_IF(cp == 0XFFFF);
      }
      putLfnChar(ldir, i, cp);
    }
  }
  return true;
    704c:	movs	r0, #1

fail:
  return false;
}
    704e:	add	sp, #40	; 0x28
    7050:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        cp = fc++ ? 0XFFFF : 0;
    7054:	mov	r0, r9
    7056:	mov.w	r9, #1
    705a:	b.n	700e <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xc6>
  return false;
    705c:	movs	r0, #0
}
    705e:	add	sp, #40	; 0x28
    7060:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00007064 <FatFile::makeSFN(FatLfn_t*)>:
  uint8_t uc = 0;
  uint8_t i = 0;
  uint8_t in = 7;
  const char* dot;
  const char* end = fname->end;
  const char* ptr = fname->begin;
    7064:	mov	r2, r0
  // Assume blanks removed from start and end.
  DBG_HALT_IF(*ptr == ' ' || *(end - 1) == ' ' || *(end - 1) == '.');

  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
    7066:	mov.w	r1, #538976288	; 0x20202020
  const char* ptr = fname->begin;
    706a:	ldr.w	r3, [r2], #18
bool FatFile::makeSFN(FatLfn_t* fname) {
    706e:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    fname->sfn[k] = ' ';
    7072:	str.w	r1, [r0, #18]
bool FatFile::makeSFN(FatLfn_t* fname) {
    7076:	mov	lr, r0
  const char* end = fname->end;
    7078:	ldr	r4, [r0, #8]
    fname->sfn[k] = ' ';
    707a:	str	r1, [r2, #4]
    707c:	str.w	r1, [r2, #7]
  }
  // Not 8.3 if starts with dot.
  is83 = *ptr == '.' ? false : true;
    7080:	ldrb	r2, [r3, #0]
    7082:	cmp	r2, #46	; 0x2e
    7084:	ite	ne
    7086:	movne	r0, #1
    7088:	moveq	r0, #0
  // Skip leading dots.
  for (; *ptr == '.'; ptr++) {
    708a:	bne.n	7094 <FatFile::makeSFN(FatLfn_t*)+0x30>
    708c:	ldrb.w	r2, [r3, #1]!
    7090:	cmp	r2, #46	; 0x2e
    7092:	beq.n	708c <FatFile::makeSFN(FatLfn_t*)+0x28>
  }
  // Find last dot.
  for (dot = end - 1; dot > ptr && *dot != '.'; dot--) {
    7094:	subs	r1, r4, #1
    7096:	cmp	r1, r3
    7098:	bls.n	70b2 <FatFile::makeSFN(FatLfn_t*)+0x4e>
    709a:	mov	r2, r1
    709c:	b.n	70a4 <FatFile::makeSFN(FatLfn_t*)+0x40>
    709e:	cmp	r3, r2
    70a0:	mov	r1, r2
    70a2:	beq.n	70b2 <FatFile::makeSFN(FatLfn_t*)+0x4e>
    70a4:	mov	r1, r2
    70a6:	subs	r2, #1
    70a8:	ldrb.w	ip, [r1]
    70ac:	cmp.w	ip, #46	; 0x2e
    70b0:	bne.n	709e <FatFile::makeSFN(FatLfn_t*)+0x3a>
  }

  for (; ptr < end; ptr++) {
    70b2:	cmp	r4, r3
    70b4:	mov.w	r5, #0
    70b8:	bls.w	71c8 <FatFile::makeSFN(FatLfn_t*)+0x164>
    70bc:	movs	r6, #7
    70be:	movs	r7, #8
    70c0:	mov	r9, r5
    70c2:	mov	r8, r5
    70c4:	b.n	70d4 <FatFile::makeSFN(FatLfn_t*)+0x70>
    70c6:	adds	r3, #1
    c = *ptr;
    if (c == '.' && ptr == dot) {
      in = 10;                // Max index for full 8.3 name.
    70c8:	movs	r6, #10
      i = 8;                  // Place for extension.
    70ca:	mov.w	r9, #8
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    70ce:	movs	r7, #16
  for (; ptr < end; ptr++) {
    70d0:	cmp	r4, r3
    70d2:	bls.n	718c <FatFile::makeSFN(FatLfn_t*)+0x128>
    c = *ptr;
    70d4:	ldrb	r2, [r3, #0]
    if (c == '.' && ptr == dot) {
    70d6:	cmp	r2, #46	; 0x2e
    70d8:	it	eq
    70da:	cmpeq	r1, r3
    70dc:	beq.n	70c6 <FatFile::makeSFN(FatLfn_t*)+0x62>
  if (c == '"' || c == '|' || c == '[' || c == '\\' || c == ']') {
    70de:	cmp	r2, #34	; 0x22
    70e0:	beq.n	70fe <FatFile::makeSFN(FatLfn_t*)+0x9a>
    70e2:	cmp	r2, #124	; 0x7c
    70e4:	beq.n	70fe <FatFile::makeSFN(FatLfn_t*)+0x9a>
    70e6:	sub.w	ip, r2, #91	; 0x5b
    70ea:	cmp.w	ip, #2
    70ee:	bls.n	70fe <FatFile::makeSFN(FatLfn_t*)+0x9a>
  if ((0X2A <= c && c <= 0X2F && c != 0X2D) || (0X3A <= c && c <= 0X3F)) {
    70f0:	sub.w	ip, r2, #42	; 0x2a
    70f4:	cmp.w	ip, #5
    70f8:	bhi.n	713e <FatFile::makeSFN(FatLfn_t*)+0xda>
    70fa:	cmp	r2, #45	; 0x2d
    70fc:	beq.n	713e <FatFile::makeSFN(FatLfn_t*)+0xda>
    } else {
      if (sfnReservedChar(c)) {
        is83 = false;
        // Skip UTF-8 trailing characters.
        if ((c & 0XC0) == 0X80) {
    70fe:	and.w	r2, r2, #192	; 0xc0
    7102:	cmp	r2, #128	; 0x80
    7104:	beq.n	71c2 <FatFile::makeSFN(FatLfn_t*)+0x15e>
          continue;
        }
        c = '_';
      }
      if (i > in) {
    7106:	cmp	r6, r9
    7108:	bcs.n	716a <FatFile::makeSFN(FatLfn_t*)+0x106>
        is83 = false;
        if (in == 10 || ptr > dot) {
    710a:	cmp	r1, r3
    710c:	ite	cs
    710e:	movcs	r0, #0
    7110:	movcc	r0, #1
    7112:	cmp	r6, #10
    7114:	it	eq
    7116:	orreq.w	r0, r0, #1
    711a:	cmp	r0, #0
    711c:	beq.n	71ae <FatFile::makeSFN(FatLfn_t*)+0x14a>
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
    711e:	ldrb.w	r3, [lr, #18]
    7122:	cmp	r3, #32
    7124:	beq.n	71a8 <FatFile::makeSFN(FatLfn_t*)+0x144>
  }
  if (is83) {
    fname->flags = (lc & uc) ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    7126:	ldrb.w	r3, [lr, #16]
    fname->flags = FNAME_FLAG_LOST_CHARS;
    712a:	movs	r0, #1
    fname->sfn[fname->seqPos] = '~';
    712c:	movs	r1, #126	; 0x7e
    fname->sfn[fname->seqPos + 1] = '1';
    712e:	movs	r2, #49	; 0x31
    fname->sfn[fname->seqPos] = '~';
    7130:	add	r3, lr
    fname->flags = FNAME_FLAG_LOST_CHARS;
    7132:	strb.w	r0, [lr, #17]
    fname->sfn[fname->seqPos] = '~';
    7136:	strb	r1, [r3, #18]
    fname->sfn[fname->seqPos + 1] = '1';
    7138:	strb	r2, [r3, #19]
  }
  return true;

fail:
  return false;
}
    713a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    713e:	sub.w	ip, r2, #58	; 0x3a
    7142:	cmp.w	ip, #5
    7146:	bls.n	70fe <FatFile::makeSFN(FatLfn_t*)+0x9a>
      if (sfnReservedChar(c)) {
    7148:	sub.w	ip, r2, #33	; 0x21
    714c:	cmp.w	ip, #93	; 0x5d
    7150:	bhi.n	70fe <FatFile::makeSFN(FatLfn_t*)+0x9a>
      if (i > in) {
    7152:	cmp	r6, r9
    7154:	bcc.n	710a <FatFile::makeSFN(FatLfn_t*)+0xa6>
      if (isLower(c)) {
    7156:	sub.w	ip, r2, #97	; 0x61
    715a:	cmp.w	ip, #25
    715e:	bhi.n	71b2 <FatFile::makeSFN(FatLfn_t*)+0x14e>
        c += 'A' - 'a';
    7160:	subs	r2, #32
        lc |= bit;
    7162:	orrs	r5, r7
        c += 'A' - 'a';
    7164:	uxtb	r2, r2
        lc |= bit;
    7166:	uxtb	r5, r5
    7168:	b.n	716e <FatFile::makeSFN(FatLfn_t*)+0x10a>
        is83 = false;
    716a:	movs	r0, #0
        c = '_';
    716c:	movs	r2, #95	; 0x5f
      fname->sfn[i++] = c;
    716e:	add.w	ip, r9, #1
    7172:	add	r9, lr
  for (; ptr < end; ptr++) {
    7174:	adds	r3, #1
      fname->sfn[i++] = c;
    7176:	strb.w	r2, [r9, #18]
    717a:	uxtb.w	r2, ip
      if (i < 7) {
    717e:	cmp	r2, #6
        fname->seqPos = i;
    7180:	mov	r9, r2
    7182:	it	ls
    7184:	strbls.w	r2, [lr, #16]
  for (; ptr < end; ptr++) {
    7188:	cmp	r4, r3
    718a:	bhi.n	70d4 <FatFile::makeSFN(FatLfn_t*)+0x70>
  if (fname->sfn[0] == ' ') {
    718c:	ldrb.w	r3, [lr, #18]
    7190:	cmp	r3, #32
    7192:	beq.n	71a8 <FatFile::makeSFN(FatLfn_t*)+0x144>
  if (is83) {
    7194:	cmp	r0, #0
    7196:	beq.n	7126 <FatFile::makeSFN(FatLfn_t*)+0xc2>
    fname->flags = (lc & uc) ? FNAME_FLAG_MIXED_CASE : lc;
    7198:	tst.w	r8, r5
    719c:	it	ne
    719e:	movne	r5, #2
    71a0:	strb.w	r5, [lr, #17]
}
    71a4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  return false;
    71a8:	movs	r0, #0
}
    71aa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    71ae:	mov	r3, r1
    71b0:	b.n	70d0 <FatFile::makeSFN(FatLfn_t*)+0x6c>
      } else if (isUpper(c)) {
    71b2:	sub.w	ip, r2, #65	; 0x41
    71b6:	cmp.w	ip, #25
        uc |= bit;
    71ba:	it	ls
    71bc:	orrls.w	r8, r7, r8
    71c0:	b.n	716e <FatFile::makeSFN(FatLfn_t*)+0x10a>
  for (; ptr < end; ptr++) {
    71c2:	adds	r3, #1
        is83 = false;
    71c4:	movs	r0, #0
    71c6:	b.n	70d0 <FatFile::makeSFN(FatLfn_t*)+0x6c>
  for (; ptr < end; ptr++) {
    71c8:	mov	r8, r5
    71ca:	b.n	718c <FatFile::makeSFN(FatLfn_t*)+0x128>

000071cc <FatFile::makeUniqueSfn(FatLfn_t*)>:
//------------------------------------------------------------------------------
bool FatFile::makeUniqueSfn(FatLfn_t* fname) {
    71cc:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;
    71d0:	mov.w	r9, #98	; 0x62
  DirFat_t* dir;
  uint16_t hex = 0;
    71d4:	movs	r5, #0
bool FatFile::makeUniqueSfn(FatLfn_t* fname) {
    71d6:	mov	r7, r1
    71d8:	mov	r4, r0
    71da:	ldr.w	fp, [pc, #160]	; 727c <FatFile::makeUniqueSfn(FatLfn_t*)+0xb0>
    for (uint8_t i = pos + 4; i > pos; i--) {
      uint8_t h = hex & 0XF;
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
      hex >>= 4;
    }
    fname->sfn[pos] = '~';
    71de:	mov.w	sl, #126	; 0x7e
  uint8_t pos = fname->seqPos;
    71e2:	ldrb.w	r8, [r1, #16]
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFatFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    71e6:	add.w	r6, r1, #18
	return systick_millis_count;
    71ea:	cmp.w	r8, #3
    71ee:	ldr.w	r3, [fp]
    71f2:	it	cs
    71f4:	movcs.w	r8, #3
    hex += millis();
    71f8:	add	r3, r5
    71fa:	uxth	r5, r3
    for (uint8_t i = pos + 4; i > pos; i--) {
    71fc:	add.w	r3, r8, #4
    7200:	uxtb	r3, r3
      uint8_t h = hex & 0XF;
    7202:	and.w	r2, r5, #15
    for (uint8_t i = pos + 4; i > pos; i--) {
    7206:	subs	r0, r3, #1
      hex >>= 4;
    7208:	lsrs	r5, r5, #4
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    720a:	cmp	r2, #9
    720c:	add.w	r1, r2, #55	; 0x37
    7210:	it	ls
    7212:	addls.w	r1, r2, #48	; 0x30
    7216:	adds	r2, r7, r3
    for (uint8_t i = pos + 4; i > pos; i--) {
    7218:	uxtb	r3, r0
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    721a:	strb	r1, [r2, #18]
    for (uint8_t i = pos + 4; i > pos; i--) {
    721c:	cmp	r8, r3
    721e:	bne.n	7202 <FatFile::makeUniqueSfn(FatLfn_t*)+0x36>
    fname->sfn[pos] = '~';
    7220:	add.w	r3, r7, r8
  void rewind() { seekSet(0); }
    7224:	movs	r1, #0
    7226:	mov	r0, r4
    7228:	strb.w	sl, [r3, #18]
    722c:	bl	6534 <FatFile::seekSet(unsigned long)>
      dir = readDirCache(true);
    7230:	movs	r1, #1
    7232:	mov	r0, r4
    7234:	bl	6274 <FatFile::readDirCache(bool)>
    7238:	mov	r3, r0
      if (isFatFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    723a:	movs	r2, #11
    723c:	mov	r0, r6
      if (!dir) {
    723e:	cbz	r3, 7268 <FatFile::makeUniqueSfn(FatLfn_t*)+0x9c>
      if (dir->name[0] == FAT_NAME_FREE) {
    7240:	ldrb.w	ip, [r3]
      if (isFatFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    7244:	mov	r1, r3
      if (dir->name[0] == FAT_NAME_FREE) {
    7246:	cmp.w	ip, #0
    724a:	beq.n	7274 <FatFile::makeUniqueSfn(FatLfn_t*)+0xa8>
      if (isFatFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    724c:	ldrb	r3, [r3, #11]
    724e:	lsls	r3, r3, #28
    7250:	bmi.n	7230 <FatFile::makeUniqueSfn(FatLfn_t*)+0x64>
    7252:	bl	deec <memcmp>
    7256:	cmp	r0, #0
    7258:	bne.n	7230 <FatFile::makeUniqueSfn(FatLfn_t*)+0x64>
  for (uint8_t seq = FIRST_HASH_SEQ; seq < 100; seq++) {
    725a:	add.w	r9, r9, #4294967295
    725e:	ands.w	r9, r9, #255	; 0xff
    7262:	bne.n	71ea <FatFile::makeUniqueSfn(FatLfn_t*)+0x1e>
  }
  // fall inti fail - too many tries.
  DBG_FAIL_MACRO;

fail:
  return false;
    7264:	mov	r0, r9
fail:
    7266:	b.n	7270 <FatFile::makeUniqueSfn(FatLfn_t*)+0xa4>
        if (!getError()) {
    7268:	ldrb	r0, [r4, #1]
    726a:	clz	r0, r0
    726e:	lsrs	r0, r0, #5

done:
  return true;
}
    7270:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return true;
    7274:	movs	r0, #1
}
    7276:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    727a:	nop
    727c:	.word	0x200080e4

00007280 <FatFile::open(FatFile*, FatLfn_t*, int)>:
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, FatLfn_t* fname, oflag_t oflag) {
    7280:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7284:	vpush	{d8}
    7288:	sub	sp, #44	; 0x2c
    728a:	strd	r0, r3, [sp, #8]
  uint16_t curIndex;
  uint16_t date;
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  auto vol = dirFile->m_vol;
    728e:	ldr	r3, [r1, #8]
    7290:	str	r3, [sp, #28]

  if (!dirFile->isDir() || isOpen()) {
    7292:	ldrb	r3, [r1, #0]
    7294:	tst.w	r3, #208	; 0xd0
    7298:	beq.n	7342 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
  bool isOpen() const { return m_attributes; }
    729a:	ldr	r3, [sp, #8]
    729c:	ldrb	r3, [r3, #0]
    729e:	cmp	r3, #0
    72a0:	bne.n	7342 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  nameOrd = (fname->len + 12) / 13;
    72a2:	ldr	r3, [r2, #12]
    72a4:	mov	r8, r2
    72a6:	ldr	r2, [pc, #616]	; (7510 <FatFile::open(FatFile*, FatLfn_t*, int)+0x290>)
    72a8:	mov	r6, r1
    72aa:	adds	r3, #12
    72ac:	umull	r2, r3, r2, r3
    72b0:	ubfx	r2, r3, #2, #8
  freeNeed = (fname->flags & FNAME_FLAG_NEED_LFN) ? 1 + nameOrd : 1;
    72b4:	ldrb.w	r3, [r8, #17]
    72b8:	lsls	r0, r3, #30
  nameOrd = (fname->len + 12) / 13;
    72ba:	str	r2, [sp, #16]
  freeNeed = (fname->flags & FNAME_FLAG_NEED_LFN) ? 1 + nameOrd : 1;
    72bc:	beq.w	740e <FatFile::open(FatFile*, FatLfn_t*, int)+0x18e>
    72c0:	adds	r7, r2, #1
    72c2:	uxtb	r7, r7
  uint8_t checksum = 0;
    72c4:	movs	r3, #0
  void rewind() { seekSet(0); }
    72c6:	mov	r0, r6
    72c8:	mov	r1, r3
    72ca:	mov	r4, r3
    72cc:	str	r3, [sp, #24]
    72ce:	bl	6534 <FatFile::seekSet(unsigned long)>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    72d2:	add.w	r3, r8, #18
  uint8_t order = 0;
    72d6:	mov	fp, r4
  uint8_t lfnOrd = 0;
    72d8:	mov	r9, r4
  uint16_t freeIndex = 0;
    72da:	mov	sl, r4
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    72dc:	vmov	s16, r3
  bool fnameFound = false;
    72e0:	str	r4, [sp, #20]
    curIndex = dirFile->m_curPosition / FS_DIR_SIZE;
    72e2:	ldr	r5, [r6, #20]
    dir = dirFile->readDirCache();
    72e4:	movs	r1, #0
    72e6:	mov	r0, r6
    72e8:	bl	6274 <FatFile::readDirCache(bool)>
    curIndex = dirFile->m_curPosition / FS_DIR_SIZE;
    72ec:	ubfx	r5, r5, #5, #16
    if (!dir) {
    72f0:	mov	r3, r0
    72f2:	cbz	r0, 733e <FatFile::open(FatFile*, FatLfn_t*, int)+0xbe>
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
    72f4:	ldrb	r2, [r0, #0]
    72f6:	cmp	r2, #229	; 0xe5
    72f8:	beq.n	734e <FatFile::open(FatFile*, FatLfn_t*, int)+0xce>
    72fa:	cbz	r2, 734e <FatFile::open(FatFile*, FatLfn_t*, int)+0xce>
        freeFound = 0;
    72fc:	cmp	r4, r7
    72fe:	it	cc
    7300:	movcc	r4, #0
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    7302:	cmp	r2, #46	; 0x2e
    7304:	beq.n	735e <FatFile::open(FatFile*, FatLfn_t*, int)+0xde>
  return dir->attributes == FAT_ATTRIB_LONG_NAME;
    7306:	ldrb.w	ip, [r0, #11]
    } else if (isFatLongName(dir)) {
    730a:	cmp.w	ip, #15
    730e:	beq.n	73ba <FatFile::open(FatFile*, FatLfn_t*, int)+0x13a>
    } else if (isFatFileOrSubdir(dir)) {
    7310:	ands.w	ip, ip, #8
    7314:	bne.n	735e <FatFile::open(FatFile*, FatLfn_t*, int)+0xde>
      if (lfnOrd) {
    7316:	cmp.w	r9, #0
    731a:	bne.w	74c8 <FatFile::open(FatFile*, FatLfn_t*, int)+0x248>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    731e:	movs	r2, #11
    7320:	vmov	r1, s16
    7324:	bl	deec <memcmp>
    7328:	cmp	r0, #0
    732a:	bne.n	72e2 <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
    732c:	ldrb.w	r3, [r8, #17]
    7330:	ands.w	r3, r3, #1
    7334:	beq.w	7500 <FatFile::open(FatFile*, FatLfn_t*, int)+0x280>
          goto found;
        }
        fnameFound = true;
    7338:	movs	r3, #1
    733a:	str	r3, [sp, #20]
    733c:	b.n	72e2 <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
      if (dirFile->getError()) {
    733e:	ldrb	r3, [r6, #1]
    7340:	cbz	r3, 7364 <FatFile::open(FatFile*, FatLfn_t*, int)+0xe4>
    goto fail;
  }
  return true;

fail:
  return false;
    7342:	movs	r0, #0
}
    7344:	add	sp, #44	; 0x2c
    7346:	vpop	{d8}
    734a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    curIndex = dirFile->m_curPosition / FS_DIR_SIZE;
    734e:	cmp	r4, #0
    7350:	it	eq
    7352:	moveq	sl, r5
      if (freeFound < freeNeed) {
    7354:	cmp	r4, r7
    7356:	bcs.n	735c <FatFile::open(FatFile*, FatLfn_t*, int)+0xdc>
        freeFound++;
    7358:	adds	r4, #1
    735a:	uxtb	r4, r4
      if (dir->name[0] == FAT_NAME_FREE) {
    735c:	cbz	r2, 7364 <FatFile::open(FatFile*, FatLfn_t*, int)+0xe4>
      lfnOrd = 0;
    735e:	mov.w	r9, #0
    7362:	b.n	72e2 <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
    7364:	ldr	r3, [sp, #12]
    7366:	lsls	r2, r3, #22
    7368:	bpl.n	7342 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>

#define O_READ O_RDONLY
#define O_WRITE O_WRONLY

inline bool isWriteMode(oflag_t oflag) {
  oflag &= O_ACCMODE;
    736a:	and.w	r3, r3, #3
  return oflag == O_WRONLY || oflag == O_RDWR;
    736e:	subs	r3, #1
    7370:	cmp	r3, #1
    7372:	bhi.n	7342 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
  if (freeFound == 0) {
    7374:	cmp	r4, #0
    7376:	it	eq
    7378:	moveq	sl, r5
  while (freeFound < freeNeed) {
    737a:	cmp	r4, r7
    737c:	bcc.n	7386 <FatFile::open(FatFile*, FatLfn_t*, int)+0x106>
    737e:	b.n	7412 <FatFile::open(FatFile*, FatLfn_t*, int)+0x192>
    freeFound++;
    7380:	uxtb	r4, r3
  while (freeFound < freeNeed) {
    7382:	cmp	r7, r4
    7384:	beq.n	7412 <FatFile::open(FatFile*, FatLfn_t*, int)+0x192>
    dir = dirFile->readDirCache();
    7386:	movs	r1, #0
    7388:	mov	r0, r6
    738a:	bl	6274 <FatFile::readDirCache(bool)>
    freeFound++;
    738e:	adds	r3, r4, #1
    if (!dir) {
    7390:	cmp	r0, #0
    7392:	bne.n	7380 <FatFile::open(FatFile*, FatLfn_t*, int)+0x100>
      if (dirFile->getError()) {
    7394:	ldrb	r3, [r6, #1]
    7396:	cmp	r3, #0
    7398:	bne.n	7342 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
  while (freeFound < freeNeed) {
    739a:	cmp	r7, r4
    739c:	bls.n	7412 <FatFile::open(FatFile*, FatLfn_t*, int)+0x192>
    739e:	ldr	r5, [sp, #28]
    73a0:	b.n	73ae <FatFile::open(FatFile*, FatLfn_t*, int)+0x12e>
    return m_sectorsPerCluster * (m_bytesPerSector / FS_DIR_SIZE);
    73a2:	ldrb	r3, [r5, #4]
    freeFound += vol->dirEntriesPerCluster();
    73a4:	add.w	r4, r4, r3, lsl #4
    73a8:	uxtb	r4, r4
  while (freeFound < freeNeed) {
    73aa:	cmp	r7, r4
    73ac:	bls.n	7412 <FatFile::open(FatFile*, FatLfn_t*, int)+0x192>
    if (!dirFile->addDirCluster()) {
    73ae:	mov	r0, r6
    73b0:	bl	5b70 <FatFile::addDirCluster()>
    73b4:	cmp	r0, #0
    73b6:	bne.n	73a2 <FatFile::open(FatFile*, FatLfn_t*, int)+0x122>
    73b8:	b.n	7342 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
      if (!lfnOrd) {
    73ba:	cmp.w	r9, #0
    73be:	bne.n	73f4 <FatFile::open(FatFile*, FatLfn_t*, int)+0x174>
        order = ldir->order & 0X1F;
    73c0:	and.w	fp, r2, #31
        if (order != nameOrd ||
    73c4:	ldr	r1, [sp, #16]
    73c6:	cmp	r1, fp
    73c8:	bne.n	72e2 <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
    73ca:	ands.w	r9, r2, #64	; 0x40
    73ce:	beq.n	72e2 <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
        checksum = ldir->checksum;
    73d0:	ldrb	r3, [r0, #13]
    73d2:	mov	r9, r1
    73d4:	str	r3, [sp, #24]
      if (order == 1) {
    73d6:	cmp.w	fp, #1
    73da:	bne.n	72e2 <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
        if (!dirFile->cmpName(curIndex + 1, fname, lfnOrd)) {
    73dc:	adds	r1, r5, #1
    73de:	mov	r3, r9
    73e0:	mov	r2, r8
    73e2:	mov	r0, r6
    73e4:	uxth	r1, r1
    73e6:	bl	6e84 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)>
          lfnOrd = 0;
    73ea:	cmp	r0, #0
    73ec:	it	eq
    73ee:	moveq.w	r9, #0
    73f2:	b.n	72e2 <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
      } else if (ldir->order != --order || checksum != ldir->checksum) {
    73f4:	add.w	fp, fp, #4294967295
    73f8:	uxtb.w	fp, fp
    73fc:	cmp	r2, fp
    73fe:	bne.n	735e <FatFile::open(FatFile*, FatLfn_t*, int)+0xde>
    7400:	ldrb	r3, [r0, #13]
    7402:	ldr	r2, [sp, #24]
    7404:	cmp	r3, r2
    7406:	beq.n	73d6 <FatFile::open(FatFile*, FatLfn_t*, int)+0x156>
      lfnOrd = 0;
    7408:	mov.w	r9, #0
    740c:	b.n	72e2 <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
  freeNeed = (fname->flags & FNAME_FLAG_NEED_LFN) ? 1 + nameOrd : 1;
    740e:	movs	r7, #1
    7410:	b.n	72c4 <FatFile::open(FatFile*, FatLfn_t*, int)+0x44>
  if (fnameFound) {
    7412:	ldr	r3, [sp, #20]
    7414:	cbz	r3, 7422 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1a2>
    if (!dirFile->makeUniqueSfn(fname)) {
    7416:	mov	r1, r8
    7418:	mov	r0, r6
    741a:	bl	71cc <FatFile::makeUniqueSfn(FatLfn_t*)>
    741e:	cmp	r0, #0
    7420:	beq.n	7342 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
  lfnOrd = freeNeed - 1;
    7422:	subs	r7, #1
  if (!dirFile->createLFN(curIndex, fname, lfnOrd)) {
    7424:	mov	r2, r8
    7426:	mov	r0, r6
  lfnOrd = freeNeed - 1;
    7428:	uxtb	r3, r7
  curIndex = freeIndex + lfnOrd;
    742a:	add.w	r5, sl, r3
  lfnOrd = freeNeed - 1;
    742e:	mov	r7, r3
  curIndex = freeIndex + lfnOrd;
    7430:	uxth	r5, r5
  if (!dirFile->createLFN(curIndex, fname, lfnOrd)) {
    7432:	mov	r1, r5
    7434:	bl	6f48 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)>
    7438:	cmp	r0, #0
    743a:	beq.n	7342 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    return seekSet(32UL * index) ? readDirCache() : nullptr;
    743c:	lsls	r1, r5, #5
    743e:	mov	r0, r6
    7440:	bl	6534 <FatFile::seekSet(unsigned long)>
    7444:	cmp	r0, #0
    7446:	beq.w	7342 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    744a:	movs	r1, #0
    744c:	mov	r0, r6
    744e:	bl	6274 <FatFile::readDirCache(bool)>
  if (!dir) {
    7452:	mov	r4, r0
    7454:	cmp	r0, #0
    7456:	beq.w	7342 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
  memset(dir, 0, sizeof(DirFat_t));
    745a:	movs	r2, #32
    745c:	movs	r1, #0
    745e:	bl	e044 <memset>
  memcpy(dir->name, fname->sfn, 11);
    7462:	ldr.w	r2, [r8, #18]
    7466:	ldr.w	r3, [r8, #22]
    746a:	str	r2, [r4, #0]
    746c:	str	r3, [r4, #4]
    746e:	ldrb.w	r3, [r8, #28]
    7472:	ldrh.w	r2, [r8, #26]
    7476:	strb	r3, [r4, #10]
    7478:	strh	r2, [r4, #8]
  dir->caseFlags = (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;
    747a:	ldrb.w	r3, [r8, #17]
    747e:	and.w	r3, r3, #24
    7482:	strb	r3, [r4, #12]
  if (FsDateTime::callback) {
    7484:	ldr	r3, [pc, #140]	; (7514 <FatFile::open(FatFile*, FatLfn_t*, int)+0x294>)
    7486:	ldr	r3, [r3, #0]
    7488:	cmp	r3, #0
    748a:	beq.n	7504 <FatFile::open(FatFile*, FatLfn_t*, int)+0x284>
    FsDateTime::callback(&date, &time, &ms10);
    748c:	add.w	r2, sp, #35	; 0x23
    7490:	add.w	r1, sp, #38	; 0x26
    7494:	add	r0, sp, #36	; 0x24
    7496:	blx	r3
  *reinterpret_cast<uint16_t*>(dst) = src;
    7498:	ldrh.w	r3, [sp, #36]	; 0x24
    749c:	strh	r3, [r4, #16]
    749e:	ldrh.w	r3, [sp, #38]	; 0x26
    74a2:	strh	r3, [r4, #14]
    dir->createTimeMs = ms10;
    74a4:	ldrb.w	r3, [sp, #35]	; 0x23
    74a8:	strb	r3, [r4, #13]
    74aa:	ldr	r2, [sp, #28]
    74ac:	ldrb.w	r3, [r2, #36]	; 0x24
    74b0:	orr.w	r3, r3, #1
    74b4:	strb.w	r3, [r2, #36]	; 0x24
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
    74b8:	ldr	r3, [sp, #12]
    74ba:	mov	r2, r5
    74bc:	mov	r1, r6
    74be:	ldr	r0, [sp, #8]
    74c0:	str	r7, [sp, #0]
    74c2:	bl	65e4 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    74c6:	b.n	7344 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc4>
        if (1 == order && lfnChecksum(dir->name) == checksum) {
    74c8:	cmp.w	fp, #1
    74cc:	bne.w	7342 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    for (uint8_t i = 0; i < 11; i++) {
    74d0:	adds	r0, #10
    74d2:	b.n	74d8 <FatFile::open(FatFile*, FatLfn_t*, int)+0x258>
      sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    74d4:	ldrb.w	r2, [r3, #1]!
    74d8:	mov.w	r1, ip, lsl #7
    for (uint8_t i = 0; i < 11; i++) {
    74dc:	cmp	r0, r3
      sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    74de:	orr.w	r1, r1, ip, lsr #1
    74e2:	uxtab	r2, r2, r1
    74e6:	uxtb.w	ip, r2
    for (uint8_t i = 0; i < 11; i++) {
    74ea:	bne.n	74d4 <FatFile::open(FatFile*, FatLfn_t*, int)+0x254>
    74ec:	ldr	r3, [sp, #24]
    74ee:	cmp	r3, ip
    74f0:	bne.w	7342 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    74f4:	mov	r7, r9
  if (oflag & O_EXCL) {
    74f6:	ldr	r3, [sp, #12]
    74f8:	lsls	r1, r3, #20
    74fa:	bmi.w	7342 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    74fe:	b.n	74b8 <FatFile::open(FatFile*, FatLfn_t*, int)+0x238>
    7500:	mov	r7, r3
    7502:	b.n	74f6 <FatFile::open(FatFile*, FatLfn_t*, int)+0x276>
    7504:	movw	r3, #22049	; 0x5621
    7508:	strh	r3, [r4, #16]
    750a:	strh	r3, [r4, #24]
    750c:	strh	r3, [r4, #18]
    if (FS_DEFAULT_TIME) {
    750e:	b.n	74aa <FatFile::open(FatFile*, FatLfn_t*, int)+0x22a>
    7510:	.word	0x4ec4ec4f
    7514:	.word	0x20006404

00007518 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>:
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path, FatLfn_t* fname,
                            const char** ptr) {
  size_t len = 0;
  // Skip leading spaces.
  while (*path == ' ') {
    7518:	ldrb	r0, [r1, #0]
    751a:	cmp	r0, #32
                            const char** ptr) {
    751c:	push	{r4, r5}
  while (*path == ' ') {
    751e:	bne.n	7528 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x10>
    7520:	ldrb.w	r4, [r1, #1]!
    7524:	cmp	r4, #32
    7526:	beq.n	7520 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x8>
    path++;
  }
  fname->begin = path;
  fname->len = 0;
    7528:	movs	r5, #0
  fname->begin = path;
    752a:	str	r1, [r2, #0]
  fname->len = 0;
    752c:	str	r5, [r2, #12]
  while (*path && !isDirSeparator(*path)) {
    752e:	ldrb	r4, [r1, #0]
    7530:	cmp	r4, #47	; 0x2f
    7532:	beq.n	7554 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x3c>
    7534:	cbz	r4, 7554 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x3c>
    7536:	ldr	r0, [pc, #140]	; (75c4 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xac>)
      DBG_FAIL_MACRO;
      goto fail;
    }
#else   // USE_UTF8_LONG_NAMES
    uint8_t cp = *path++;
    if (cp >= 0X80 || lfnReservedChar(cp)) {
    7538:	tst.w	r4, #128	; 0x80
    uint8_t cp = *path++;
    753c:	add.w	r1, r1, #1
    if (cp >= 0X80 || lfnReservedChar(cp)) {
    7540:	bne.n	7554 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x3c>
    7542:	cmp	r4, #60	; 0x3c
    7544:	bhi.n	75a6 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x8e>
    7546:	cmp	r4, #33	; 0x21
    7548:	bhi.n	755a <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x42>
    754a:	add.w	ip, r4, #4294967295
    754e:	cmp.w	ip, #30
    7552:	bhi.n	756c <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x54>
  *ptr = path;
  return makeSFN(fname);

fail:
  return false;
}
    7554:	movs	r0, #0
    7556:	pop	{r4, r5}
    7558:	bx	lr
    755a:	sub.w	ip, r4, #34	; 0x22
    755e:	uxtb.w	ip, ip
    7562:	lsr.w	ip, r0, ip
    7566:	tst.w	ip, #1
    756a:	bne.n	7554 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x3c>
    if (cp != '.' && cp != ' ') {
    756c:	cmp	r4, #46	; 0x2e
    len++;
    756e:	add.w	r5, r5, #1
    if (cp != '.' && cp != ' ') {
    7572:	beq.n	7578 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x60>
    7574:	cmp	r4, #32
    7576:	bne.n	75b2 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x9a>
  while (*path && !isDirSeparator(*path)) {
    7578:	ldrb	r4, [r1, #0]
    757a:	cbz	r4, 7580 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x68>
    757c:	cmp	r4, #47	; 0x2f
    757e:	bne.n	7538 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x20>
  if (!fname->len || fname->len > FAT_MAX_LFN_LENGTH) {
    7580:	ldr	r0, [r2, #12]
    7582:	subs	r0, #1
    7584:	cmp	r0, #254	; 0xfe
    7586:	bhi.n	7554 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x3c>
  for (; *path == ' ' || isDirSeparator(*path); path++) {
    7588:	cmp	r4, #32
    758a:	beq.n	7590 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x78>
    758c:	cmp	r4, #47	; 0x2f
    758e:	bne.n	759c <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x84>
    7590:	ldrb.w	r0, [r1, #1]!
    7594:	cmp	r0, #32
    7596:	beq.n	7590 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x78>
    7598:	cmp	r0, #47	; 0x2f
    759a:	beq.n	7590 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x78>
  return makeSFN(fname);
    759c:	mov	r0, r2
  *ptr = path;
    759e:	str	r1, [r3, #0]
}
    75a0:	pop	{r4, r5}
  return makeSFN(fname);
    75a2:	b.w	7064 <FatFile::makeSFN(FatLfn_t*)>
    75a6:	cmp	r4, #92	; 0x5c
    75a8:	beq.n	7554 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x3c>
    75aa:	bls.n	75b8 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xa0>
    75ac:	cmp	r4, #124	; 0x7c
    75ae:	beq.n	7554 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x3c>
    len++;
    75b0:	adds	r5, #1
      fname->end = path;
    75b2:	strd	r1, r5, [r2, #8]
    75b6:	b.n	7578 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x60>
    75b8:	subs	r4, #62	; 0x3e
    75ba:	cmp	r4, #1
    75bc:	bhi.n	75b0 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x98>
}
    75be:	movs	r0, #0
    75c0:	pop	{r4, r5}
    75c2:	bx	lr
    75c4:	.word	0x05002101

000075c8 <FatFile::remove()>:
//------------------------------------------------------------------------------
bool FatFile::remove() {
    75c8:	push	{r4, r5, r6, r7, lr}
  FatFile() {}
    75ca:	movs	r3, #0
    75cc:	sub	sp, #44	; 0x2c
    75ce:	str	r3, [sp, #4]
  FatFile dirFile;
  DirFat_t* dir;
  DirLfn_t* ldir;

  // Cant' remove not open for write.
  if (!isWritable()) {
    75d0:	ldrb	r3, [r0, #2]
    75d2:	lsls	r2, r3, #30
    75d4:	bpl.n	7620 <FatFile::remove()+0x58>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
    75d6:	ldr	r1, [r0, #32]
    75d8:	mov	r5, r0
    75da:	cbz	r1, 75e4 <FatFile::remove()+0x1c>
    75dc:	ldr	r0, [r0, #8]
    75de:	bl	6c78 <FatPartition::freeChain(unsigned long)>
    75e2:	cbz	r0, 7620 <FatFile::remove()+0x58>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Cache directory entry.
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    75e4:	movs	r1, #1
    75e6:	mov	r0, r5
    75e8:	bl	5be8 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    75ec:	cbz	r0, 7620 <FatFile::remove()+0x58>
    for (uint8_t i = 0; i < 11; i++) {
    75ee:	subs	r2, r0, #1
    75f0:	add.w	ip, r0, #10
    uint8_t sum = 0;
    75f4:	movs	r4, #0
      sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    75f6:	lsls	r3, r4, #7
    75f8:	ldrb.w	r1, [r2, #1]!
    75fc:	orr.w	r3, r3, r4, lsr #1
    for (uint8_t i = 0; i < 11; i++) {
    7600:	cmp	ip, r2
      sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    7602:	uxtab	r3, r1, r3
    7606:	uxtb	r4, r3
    for (uint8_t i = 0; i < 11; i++) {
    7608:	bne.n	75f6 <FatFile::remove()+0x2e>
    goto fail;
  }
  checksum = lfnChecksum(dir->name);

  // Mark entry deleted.
  dir->name[0] = FAT_NAME_DELETED;
    760a:	movs	r6, #229	; 0xe5

  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
    760c:	movs	r3, #0
  dir->name[0] = FAT_NAME_DELETED;
    760e:	strb	r6, [r0, #0]
  m_flags = 0;

  // Write entry to device.
  if (!m_vol->cacheSync()) {
    7610:	ldr	r7, [r5, #8]
  m_attributes = FILE_ATTR_CLOSED;
    7612:	strb	r3, [r5, #0]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    7614:	add.w	r0, r7, #36	; 0x24
  m_flags = 0;
    7618:	strb	r3, [r5, #2]
    761a:	bl	3154 <FsCache::sync()>
    761e:	cbnz	r0, 7626 <FatFile::remove()+0x5e>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
    7620:	movs	r0, #0
}
    7622:	add	sp, #44	; 0x2c
    7624:	pop	{r4, r5, r6, r7, pc}
    7626:	add.w	r0, r7, #564	; 0x234
    762a:	bl	3154 <FsCache::sync()>
    762e:	cmp	r0, #0
    7630:	beq.n	7620 <FatFile::remove()+0x58>
    7632:	ldr	r0, [r7, #0]
  bool syncDevice() { return m_blockDev->syncDevice(); }
    7634:	ldr	r3, [r0, #0]
    7636:	ldr	r3, [r3, #28]
    7638:	blx	r3
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    763a:	cmp	r0, #0
    763c:	beq.n	7620 <FatFile::remove()+0x58>
  if (!isLFN()) {
    763e:	ldrb	r3, [r5, #3]
    7640:	cmp	r3, #0
    7642:	beq.n	7622 <FatFile::remove()+0x5a>
  if (!dirFile.openCluster(this)) {
    7644:	mov	r1, r5
    7646:	add	r0, sp, #4
    7648:	bl	6014 <FatFile::openCluster(FatFile*)>
    764c:	cmp	r0, #0
    764e:	beq.n	7620 <FatFile::remove()+0x58>
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    7650:	ldrb	r3, [r5, #3]
    7652:	cmp	r3, #0
    7654:	beq.n	7620 <FatFile::remove()+0x58>
    7656:	movs	r7, #1
    7658:	b.n	769e <FatFile::remove()+0xd6>
    return seekSet(32UL * index) ? readDirCache() : nullptr;
    765a:	add	r0, sp, #4
    765c:	bl	6274 <FatFile::readDirCache(bool)>
    7660:	adds	r3, r7, #1
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    7662:	uxtb	r1, r7
    if (!ldir) {
    7664:	cmp	r0, #0
    7666:	beq.n	7620 <FatFile::remove()+0x58>
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    7668:	ldrb	r2, [r0, #11]
    766a:	cmp	r2, #15
    766c:	bne.n	7620 <FatFile::remove()+0x58>
        order != (ldir->order & 0X1F) || checksum != ldir->checksum) {
    766e:	ldrb	r2, [r0, #0]
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    7670:	uxtb.w	ip, r3
    7674:	uxth	r7, r3
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    7676:	and.w	r3, r2, #31
    767a:	cmp	r3, r1
    767c:	bne.n	7620 <FatFile::remove()+0x58>
        order != (ldir->order & 0X1F) || checksum != ldir->checksum) {
    767e:	ldrb	r3, [r0, #13]
    7680:	cmp	r3, r4
    7682:	bne.n	7620 <FatFile::remove()+0x58>
    ldir->order = FAT_NAME_DELETED;
    7684:	strb	r6, [r0, #0]
    m_vol->cacheDirty();
    7686:	ldr	r1, [r5, #8]
    7688:	ldrb.w	r3, [r1, #36]	; 0x24
    768c:	orr.w	r3, r3, #1
    7690:	strb.w	r3, [r1, #36]	; 0x24
    if (last) {
    7694:	lsls	r3, r2, #25
    7696:	bmi.n	76b4 <FatFile::remove()+0xec>
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    7698:	ldrb	r3, [r5, #3]
    769a:	cmp	r3, ip
    769c:	bcc.n	7620 <FatFile::remove()+0x58>
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.cacheDir(m_dirIndex - order));
    769e:	ldrh	r1, [r5, #4]
    76a0:	add	r0, sp, #4
    76a2:	subs	r1, r1, r7
    76a4:	uxth	r1, r1
    76a6:	lsls	r1, r1, #5
    76a8:	bl	6534 <FatFile::seekSet(unsigned long)>
    76ac:	movs	r1, #0
    76ae:	cmp	r0, #0
    76b0:	bne.n	765a <FatFile::remove()+0x92>
    76b2:	b.n	7620 <FatFile::remove()+0x58>
      if (!m_vol->cacheSync()) {
    76b4:	ldr	r4, [r5, #8]
    76b6:	add.w	r0, r4, #36	; 0x24
    76ba:	bl	3154 <FsCache::sync()>
    76be:	cmp	r0, #0
    76c0:	beq.n	7620 <FatFile::remove()+0x58>
    76c2:	add.w	r0, r4, #564	; 0x234
    76c6:	bl	3154 <FsCache::sync()>
    76ca:	cmp	r0, #0
    76cc:	beq.n	7620 <FatFile::remove()+0x58>
    76ce:	ldr	r0, [r4, #0]
  bool syncDevice() { return m_blockDev->syncDevice(); }
    76d0:	ldr	r3, [r0, #0]
    76d2:	ldr	r3, [r3, #28]
    76d4:	blx	r3
    76d6:	b.n	7622 <FatFile::remove()+0x5a>

000076d8 <FsBaseFile::FsBaseFile(FsBaseFile const&)>:
FsBaseFile::FsBaseFile(const FsBaseFile& from) {
    76d8:	push	{r3, r4, r5, r6, r7, lr}
    76da:	movs	r6, #0
  if (from.m_fFile) {
    76dc:	ldr	r7, [r1, #56]	; 0x38
FsBaseFile::FsBaseFile(const FsBaseFile& from) {
    76de:	mov	r5, r1
    76e0:	mov	r4, r0
    76e2:	strd	r6, r6, [r0, #56]	; 0x38
  if (from.m_fFile) {
    76e6:	cbz	r7, 7710 <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x38>
    m_fFile = new (m_fileMem) FatFile;
    76e8:	mov	r1, r0
    76ea:	movs	r0, #36	; 0x24
    76ec:	bl	79dc <operator new(unsigned int, unsigned long*)>
  FatFile() {}
    76f0:	strh	r6, [r0, #0]
    76f2:	strb	r6, [r0, #2]
    *m_fFile = *from.m_fFile;
    76f4:	mov	ip, r0
    76f6:	ldr	r5, [r5, #56]	; 0x38
    m_fFile = new (m_fileMem) FatFile;
    76f8:	str	r0, [r4, #56]	; 0x38
    *m_fFile = *from.m_fFile;
    76fa:	ldmia	r5!, {r0, r1, r2, r3}
    76fc:	stmia.w	ip!, {r0, r1, r2, r3}
    7700:	ldmia	r5!, {r0, r1, r2, r3}
    7702:	stmia.w	ip!, {r0, r1, r2, r3}
    7706:	ldr	r3, [r5, #0]
    7708:	str.w	r3, [ip]
}
    770c:	mov	r0, r4
    770e:	pop	{r3, r4, r5, r6, r7, pc}
  } else if (from.m_xFile) {
    7710:	ldr	r3, [r1, #60]	; 0x3c
    7712:	cmp	r3, #0
    7714:	beq.n	770c <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x34>
    m_xFile = new (m_fileMem) ExFatFile;
    7716:	mov	r1, r0
    7718:	movs	r0, #56	; 0x38
    771a:	bl	79dc <operator new(unsigned int, unsigned long*)>
  ExFatFile() {}
    771e:	strb.w	r7, [r0, #49]	; 0x31
    7722:	strh	r7, [r0, #50]	; 0x32
    *m_xFile = *from.m_xFile;
    7724:	mov	r2, r0
    7726:	ldr	r3, [r5, #60]	; 0x3c
    m_xFile = new (m_fileMem) ExFatFile;
    7728:	str	r0, [r4, #60]	; 0x3c
    *m_xFile = *from.m_xFile;
    772a:	add.w	r7, r3, #48	; 0x30
    772e:	ldr	r6, [r3, #0]
    7730:	adds	r3, #16
    7732:	ldr.w	r5, [r3, #-12]
    7736:	adds	r2, #16
    7738:	ldr.w	r0, [r3, #-8]
    773c:	ldr.w	r1, [r3, #-4]
    7740:	cmp	r3, r7
    7742:	str.w	r6, [r2, #-16]
    7746:	str.w	r5, [r2, #-12]
    774a:	str.w	r0, [r2, #-8]
    774e:	str.w	r1, [r2, #-4]
    7752:	bne.n	772e <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x56>
    7754:	ldr	r3, [r3, #0]
}
    7756:	mov	r0, r4
    *m_xFile = *from.m_xFile;
    7758:	str	r3, [r2, #0]
}
    775a:	pop	{r3, r4, r5, r6, r7, pc}

0000775c <FsBaseFile::close()>:
//------------------------------------------------------------------------------
bool FsBaseFile::close() {
    775c:	push	{r4, lr}
    775e:	mov	r4, r0
  bool rtn = m_fFile ? m_fFile->close() : m_xFile ? m_xFile->close() : true;
    7760:	ldr	r0, [r0, #56]	; 0x38
    7762:	cbz	r0, 7770 <FsBaseFile::close()+0x14>
    7764:	bl	5c08 <FatFile::close()>
  m_fFile = nullptr;
    7768:	movs	r3, #0
  m_xFile = nullptr;
    776a:	strd	r3, r3, [r4, #56]	; 0x38
  return rtn;
}
    776e:	pop	{r4, pc}
  bool rtn = m_fFile ? m_fFile->close() : m_xFile ? m_xFile->close() : true;
    7770:	ldr	r0, [r4, #60]	; 0x3c
    7772:	cbz	r0, 7780 <FsBaseFile::close()+0x24>
    7774:	bl	3b20 <ExFatFile::close()>
  m_fFile = nullptr;
    7778:	movs	r3, #0
  m_xFile = nullptr;
    777a:	strd	r3, r3, [r4, #56]	; 0x38
}
    777e:	pop	{r4, pc}
  m_fFile = nullptr;
    7780:	movs	r3, #0
  bool rtn = m_fFile ? m_fFile->close() : m_xFile ? m_xFile->close() : true;
    7782:	movs	r0, #1
  m_xFile = nullptr;
    7784:	strd	r3, r3, [r4, #56]	; 0x38
}
    7788:	pop	{r4, pc}
    778a:	nop

0000778c <FsBaseFile::open(FsVolume*, char const*, int)>:
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
  if (!vol) {
    778c:	cmp	r1, #0
    778e:	beq.n	7828 <FsBaseFile::open(FsVolume*, char const*, int)+0x9c>
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
    7790:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7794:	mov	r4, r0
  bool rtn = m_fFile ? m_fFile->close() : m_xFile ? m_xFile->close() : true;
    7796:	ldr	r0, [r0, #56]	; 0x38
    7798:	mov	r5, r1
    779a:	mov	r8, r2
    779c:	mov	r7, r3
    779e:	cbz	r0, 77d6 <FsBaseFile::open(FsVolume*, char const*, int)+0x4a>
    77a0:	bl	5c08 <FatFile::close()>
  m_fFile = nullptr;
    77a4:	movs	r6, #0
    return false;
  }
  close();
  if (vol->m_fVol) {
    77a6:	ldr.w	r9, [r5, #1152]	; 0x480
  m_xFile = nullptr;
    77aa:	strd	r6, r6, [r4, #56]	; 0x38
  if (vol->m_fVol) {
    77ae:	cmp.w	r9, #0
    77b2:	beq.n	77f0 <FsBaseFile::open(FsVolume*, char const*, int)+0x64>
    m_fFile = new (m_fileMem) FatFile;
    77b4:	mov	r1, r4
    77b6:	movs	r0, #36	; 0x24
    77b8:	bl	79dc <operator new(unsigned int, unsigned long*)>
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    77bc:	mov	r3, r7
    77be:	strh	r6, [r0, #0]
    77c0:	mov	r2, r8
    77c2:	strb	r6, [r0, #2]
    m_fFile = new (m_fileMem) FatFile;
    77c4:	str	r0, [r4, #56]	; 0x38
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    77c6:	ldr.w	r1, [r5, #1152]	; 0x480
    77ca:	bl	6004 <FatFile::open(FatVolume*, char const*, int)>
    77ce:	cbnz	r0, 7822 <FsBaseFile::open(FsVolume*, char const*, int)+0x96>
      return true;
    }
    m_fFile = nullptr;
    77d0:	str	r0, [r4, #56]	; 0x38
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
    77d2:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  bool rtn = m_fFile ? m_fFile->close() : m_xFile ? m_xFile->close() : true;
    77d6:	ldr	r0, [r4, #60]	; 0x3c
    77d8:	cmp	r0, #0
    77da:	beq.n	77a4 <FsBaseFile::open(FsVolume*, char const*, int)+0x18>
    77dc:	bl	3b20 <ExFatFile::close()>
  m_fFile = nullptr;
    77e0:	movs	r6, #0
  if (vol->m_fVol) {
    77e2:	ldr.w	r9, [r5, #1152]	; 0x480
  m_xFile = nullptr;
    77e6:	strd	r6, r6, [r4, #56]	; 0x38
  if (vol->m_fVol) {
    77ea:	cmp.w	r9, #0
    77ee:	bne.n	77b4 <FsBaseFile::open(FsVolume*, char const*, int)+0x28>
  } else if (vol->m_xVol) {
    77f0:	ldr.w	r3, [r5, #1156]	; 0x484
    77f4:	cbz	r3, 781c <FsBaseFile::open(FsVolume*, char const*, int)+0x90>
    m_xFile = new (m_fileMem) ExFatFile;
    77f6:	mov	r1, r4
    77f8:	movs	r0, #56	; 0x38
    77fa:	bl	79dc <operator new(unsigned int, unsigned long*)>
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    77fe:	mov	r3, r7
    7800:	strb.w	r9, [r0, #49]	; 0x31
    7804:	mov	r2, r8
    7806:	strh.w	r9, [r0, #50]	; 0x32
    m_xFile = new (m_fileMem) ExFatFile;
    780a:	str	r0, [r4, #60]	; 0x3c
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    780c:	ldr.w	r1, [r5, #1156]	; 0x484
    7810:	bl	43b8 <ExFatFile::open(ExFatVolume*, char const*, int)>
    7814:	cbnz	r0, 7822 <FsBaseFile::open(FsVolume*, char const*, int)+0x96>
    m_xFile = nullptr;
    7816:	str	r0, [r4, #60]	; 0x3c
}
    7818:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return false;
    781c:	movs	r0, #0
}
    781e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return true;
    7822:	movs	r0, #1
}
    7824:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return false;
    7828:	movs	r0, #0
}
    782a:	bx	lr

0000782c <FsBaseFile::openNext(FsBaseFile*, int)>:
    m_xFile = nullptr;
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::openNext(FsBaseFile* dir, oflag_t oflag) {
    782c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7830:	mov	r4, r0
  bool rtn = m_fFile ? m_fFile->close() : m_xFile ? m_xFile->close() : true;
    7832:	ldr	r0, [r0, #56]	; 0x38
bool FsBaseFile::openNext(FsBaseFile* dir, oflag_t oflag) {
    7834:	mov	r5, r1
    7836:	mov	r8, r2
  bool rtn = m_fFile ? m_fFile->close() : m_xFile ? m_xFile->close() : true;
    7838:	cbz	r0, 788c <FsBaseFile::openNext(FsBaseFile*, int)+0x60>
    783a:	bl	5c08 <FatFile::close()>
  m_fFile = nullptr;
    783e:	movs	r6, #0
    7840:	str	r6, [r4, #56]	; 0x38
  close();
  if (dir->m_fFile) {
    7842:	ldr	r7, [r5, #56]	; 0x38
  m_xFile = nullptr;
    7844:	str	r6, [r4, #60]	; 0x3c
  if (dir->m_fFile) {
    7846:	cbz	r7, 7866 <FsBaseFile::openNext(FsBaseFile*, int)+0x3a>
    m_fFile = new (m_fileMem) FatFile;
    7848:	mov	r1, r4
    784a:	movs	r0, #36	; 0x24
    784c:	bl	79dc <operator new(unsigned int, unsigned long*)>
    if (m_fFile->openNext(dir->m_fFile, oflag)) {
    7850:	mov	r2, r8
    7852:	strh	r6, [r0, #0]
    7854:	strb	r6, [r0, #2]
    m_fFile = new (m_fileMem) FatFile;
    7856:	str	r0, [r4, #56]	; 0x38
    if (m_fFile->openNext(dir->m_fFile, oflag)) {
    7858:	ldr	r1, [r5, #56]	; 0x38
    785a:	bl	66d0 <FatFile::openNext(FatFile*, int)>
    785e:	cbnz	r0, 7886 <FsBaseFile::openNext(FsBaseFile*, int)+0x5a>
      return true;
    }
    m_fFile = nullptr;
    7860:	str	r0, [r4, #56]	; 0x38
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
    7862:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (dir->m_xFile) {
    7866:	ldr	r0, [r5, #60]	; 0x3c
    7868:	cmp	r0, #0
    786a:	beq.n	7862 <FsBaseFile::openNext(FsBaseFile*, int)+0x36>
    m_xFile = new (m_fileMem) ExFatFile;
    786c:	mov	r1, r4
    786e:	movs	r0, #56	; 0x38
    7870:	bl	79dc <operator new(unsigned int, unsigned long*)>
    if (m_xFile->openNext(dir->m_xFile, oflag)) {
    7874:	mov	r2, r8
    7876:	strb.w	r7, [r0, #49]	; 0x31
    787a:	strh	r7, [r0, #50]	; 0x32
    m_xFile = new (m_fileMem) ExFatFile;
    787c:	str	r0, [r4, #60]	; 0x3c
    if (m_xFile->openNext(dir->m_xFile, oflag)) {
    787e:	ldr	r1, [r5, #60]	; 0x3c
    7880:	bl	43c8 <ExFatFile::openNext(ExFatFile*, int)>
    7884:	cbz	r0, 7898 <FsBaseFile::openNext(FsBaseFile*, int)+0x6c>
      return true;
    7886:	movs	r0, #1
}
    7888:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  bool rtn = m_fFile ? m_fFile->close() : m_xFile ? m_xFile->close() : true;
    788c:	ldr	r0, [r4, #60]	; 0x3c
    788e:	cmp	r0, #0
    7890:	beq.n	783e <FsBaseFile::openNext(FsBaseFile*, int)+0x12>
    7892:	bl	3b20 <ExFatFile::close()>
    7896:	b.n	783e <FsBaseFile::openNext(FsBaseFile*, int)+0x12>
    m_xFile = nullptr;
    7898:	str	r0, [r4, #60]	; 0x3c
}
    789a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    789e:	nop

000078a0 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)>:
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part,
                     uint32_t volStart) {
    78a0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  m_fVol = nullptr;
    78a4:	movs	r5, #0
                     uint32_t volStart) {
    78a6:	mov	r6, r0
    78a8:	mov	r7, r1
  m_xVol = new (m_volMem) ExFatVolume;
    78aa:	mov	r1, r0
  m_fVol = nullptr;
    78ac:	str.w	r5, [r0, #1152]	; 0x480
  m_xVol = new (m_volMem) ExFatVolume;
    78b0:	mov.w	r0, #1152	; 0x480
                     uint32_t volStart) {
    78b4:	mov	r8, r3
    78b6:	ldr.w	sl, [sp, #32]
    78ba:	mov	r9, r2
  m_xVol = new (m_volMem) ExFatVolume;
    78bc:	bl	79dc <operator new(unsigned int, unsigned long*)>
    m_sector = 0XFFFFFFFF;
    78c0:	mov.w	r3, #4294967295
    m_blockDev = blockDev;
    78c4:	str	r5, [r0, #4]
    m_status = 0;
    78c6:	strb	r5, [r0, #0]
    if (!init(dev, part, volStart)) {
    78c8:	mov	r2, r8
    m_sector = 0XFFFFFFFF;
    78ca:	str	r3, [r0, #8]
    78cc:	mov	r1, r7
    78ce:	str.w	r3, [r0, #536]	; 0x218
    78d2:	mov	r3, sl
    m_blockDev = blockDev;
    78d4:	str.w	r5, [r0, #532]	; 0x214
    78d8:	mov	r4, r0
    m_status = 0;
    78da:	strb.w	r5, [r0, #528]	; 0x210
  ExFatPartition() = default;
    78de:	strb.w	r5, [r0, #1092]	; 0x444
    78e2:	strb.w	r5, [r0, #1145]	; 0x479
    78e6:	strh.w	r5, [r0, #1146]	; 0x47a
    78ea:	str.w	r0, [r6, #1156]	; 0x484
    78ee:	bl	4814 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)>
    78f2:	cmp	r0, #0
    78f4:	bne.n	7974 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0xd4>
  if (m_xVol && m_xVol->begin(blockDev, false, part, volStart)) {
    goto done;
  }
  m_xVol = nullptr;
    78f6:	movs	r5, #0
  m_fVol = new (m_volMem) FatVolume;
    78f8:	mov	r1, r6
    78fa:	mov.w	r0, #1128	; 0x468
  m_xVol = nullptr;
    78fe:	str.w	r5, [r6, #1156]	; 0x484
  m_fVol = new (m_volMem) FatVolume;
    7902:	bl	79dc <operator new(unsigned int, unsigned long*)>
  FatPartition() = default;
    7906:	strb	r5, [r0, #7]
    m_blockDev = blockDev;
    7908:	str	r5, [r0, #40]	; 0x28
    if (!init(dev, part, volStart)) {
    790a:	mov	r3, sl
    m_status = 0;
    790c:	strb.w	r5, [r0, #36]	; 0x24
    7910:	mov	r2, r8
    m_blockDev = blockDev;
    7912:	str.w	r5, [r0, #568]	; 0x238
    7916:	mov	r1, r7
    m_status = 0;
    7918:	strb.w	r5, [r0, #564]	; 0x234
    791c:	mov	r4, r0
    791e:	strh.w	r5, [r0, #1092]	; 0x444
    7922:	strb.w	r5, [r0, #1094]	; 0x446
    m_sector = 0XFFFFFFFF;
    7926:	mov.w	r5, #4294967295
    792a:	str	r5, [r0, #44]	; 0x2c
    792c:	str.w	r5, [r0, #572]	; 0x23c
    7930:	str.w	r0, [r6, #1152]	; 0x480
    7934:	bl	6d64 <FatPartition::init(FsBlockDeviceInterface*, unsigned char, unsigned long)>
    7938:	cbnz	r0, 7946 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0xa6>
  if (m_fVol && m_fVol->begin(blockDev, false, part, volStart)) {
    goto done;
  }
  m_fVol = nullptr;
    793a:	movs	r3, #0
  return false;
    793c:	mov	r0, r3
  m_fVol = nullptr;
    793e:	str.w	r3, [r6, #1152]	; 0x480
done:
  if (setCwv || !m_cwv) {
    m_cwv = this;
  }
  return true;
}
    7942:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    m_vwd.close();
    7946:	addw	r5, r4, #1092	; 0x444
    794a:	mov	r0, r5
    794c:	bl	5c08 <FatFile::close()>
    return m_vwd.openRoot(this);
    7950:	mov	r1, r4
    7952:	mov	r0, r5
    7954:	bl	606c <FatFile::openRoot(FatVolume*)>
    if (!chdir()) {
    7958:	cmp	r0, #0
    795a:	beq.n	793a <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0x9a>
    if (setCwv || !m_cwv) {
    795c:	ldr	r3, [pc, #72]	; (79a8 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0x108>)
    795e:	ldr	r2, [r3, #0]
    7960:	cbnz	r2, 7992 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0xf2>
      m_cwv = this;
    7962:	str	r4, [r3, #0]
  if (setCwv || !m_cwv) {
    7964:	ldr	r3, [pc, #68]	; (79ac <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0x10c>)
    7966:	cmp.w	r9, #0
    796a:	beq.n	799a <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0xfa>
  return true;
    796c:	movs	r0, #1
    m_cwv = this;
    796e:	str	r6, [r3, #0]
}
    7970:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    m_vwd.close();
    7974:	add.w	r5, r4, #1096	; 0x448
    7978:	mov	r0, r5
    797a:	bl	3b20 <ExFatFile::close()>
    return m_vwd.openRoot(this);
    797e:	mov	r1, r4
    7980:	mov	r0, r5
    7982:	bl	3b7c <ExFatFile::openRoot(ExFatVolume*)>
    if (!chdir()) {
    7986:	cmp	r0, #0
    7988:	beq.n	78f6 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0x56>
    if (setCwv || !m_cwv) {
    798a:	ldr	r3, [pc, #36]	; (79b0 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0x110>)
    798c:	ldr	r2, [r3, #0]
    798e:	cmp	r2, #0
    7990:	beq.n	7962 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0xc2>
  if (setCwv || !m_cwv) {
    7992:	ldr	r3, [pc, #24]	; (79ac <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0x10c>)
    7994:	cmp.w	r9, #0
    7998:	bne.n	796c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0xcc>
    799a:	ldr	r2, [r3, #0]
    799c:	cmp	r2, #0
    799e:	beq.n	796c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char, unsigned long)+0xcc>
  return true;
    79a0:	movs	r0, #1
}
    79a2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    79a6:	nop
    79a8:	.word	0x200065c8
    79ac:	.word	0x200065c4
    79b0:	.word	0x20006488

000079b4 <FsVolume::open(char const*, int)>:
bool FsVolume::ls(print_t* pr, const char* path, uint8_t flags) {
  FsBaseFile dir;
  return dir.open(this, path, O_RDONLY) && dir.ls(pr, flags);
}
//------------------------------------------------------------------------------
FsFile FsVolume::open(const char* path, oflag_t oflag) {
    79b4:	push	{r4, r5, r6, lr}
	constexpr Print() : write_error(0) {}
    79b6:	movs	r5, #0
    79b8:	mov.w	r6, #1000	; 0x3e8
    79bc:	mov	r4, r0
    79be:	strb	r5, [r0, #4]
    79c0:	strb	r5, [r0, #12]
    79c2:	str	r6, [r0, #8]
  FsBaseFile() = default;
    79c4:	strd	r5, r5, [r0, #72]	; 0x48
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    79c8:	ldr	r5, [pc, #12]	; (79d8 <FsVolume::open(char const*, int)+0x24>)
    79ca:	str.w	r5, [r0], #16
  FsFile tmpFile;
  tmpFile.open(this, path, oflag);
    79ce:	bl	778c <FsBaseFile::open(FsVolume*, char const*, int)>
  return tmpFile;
}
    79d2:	mov	r0, r4
    79d4:	pop	{r4, r5, r6, pc}
    79d6:	nop
    79d8:	.word	0x20000ab8

000079dc <operator new(unsigned int, unsigned long*)>:
 */
#include "FsNew.h"
void* operator new(size_t size, newalign_t* ptr) {
  (void)size;
  return ptr;
}
    79dc:	mov	r0, r1
    79de:	bx	lr

000079e0 <SdCardInterface::status()>:
   * \param[out] sds location for 64 status bytes.
   * \return true for success or false for failure.
   */
  virtual bool readSDS(sds_t* sds) = 0;
  /** \return card status. */
  virtual uint32_t status() { return 0XFFFFFFFF; }
    79e0:	mov.w	r0, #4294967295
    79e4:	bx	lr
    79e6:	nop

000079e8 <SharedSpiCard::errorCode() const>:
  uint8_t errorCode() const { return m_errorCode; }
    79e8:	ldrb	r0, [r0, #18]
    79ea:	bx	lr

000079ec <SharedSpiCard::errorData() const>:
  uint32_t errorData() const { return m_status; }
    79ec:	ldrb	r0, [r0, #21]
    79ee:	bx	lr

000079f0 <SharedSpiCard::type() const>:
  uint8_t type() const { return m_type; }
    79f0:	ldrb	r0, [r0, #22]
    79f2:	bx	lr

000079f4 <DedicatedSpiCard::hasDedicatedSpi()>:
   * \param[in] spiConfig SPI card configuration.
   * \return true for success or false for failure.
   */
  bool begin(SdSpiConfig spiConfig);
  /** \return true, can be in dedicaded state. */
  bool hasDedicatedSpi() { return true; }
    79f4:	movs	r0, #1
    79f6:	bx	lr

000079f8 <DedicatedSpiCard::isDedicatedSpi()>:
  /** \return true if in dedicated SPI state. */
  bool isDedicatedSpi() { return m_dedicatedSpi; }
    79f8:	ldrb	r0, [r0, #28]
    79fa:	bx	lr

000079fc <DedicatedSpiCard::~DedicatedSpiCard()>:
class DedicatedSpiCard : public SharedSpiCard {
    79fc:	bx	lr
    79fe:	nop

00007a00 <DedicatedSpiCard::~DedicatedSpiCard()>:
    7a00:	push	{r4, lr}
    7a02:	mov	r4, r0
    7a04:	movs	r1, #32
    7a06:	bl	d07c <operator delete(void*, unsigned int)>
    7a0a:	mov	r0, r4
    7a0c:	pop	{r4, pc}
    7a0e:	nop

00007a10 <SharedSpiCard::end()>:
void SharedSpiCard::end() {
    7a10:	push	{r3, r4, r5, lr}
  if (m_beginCalled) {
    7a12:	ldrb	r3, [r0, #16]
    7a14:	cbz	r3, 7a2c <SharedSpiCard::end()+0x1c>
    syncDevice();
    7a16:	mov	r5, r0
    7a18:	mov	r4, r0
    7a1a:	ldr.w	r3, [r5], #4
    7a1e:	ldr	r3, [r3, #28]
    7a20:	blx	r3
  void spiEnd() { m_spiDriver.end(); }
    7a22:	mov	r0, r5
    7a24:	bl	9ff0 <SdSpiArduinoDriver::end()>
    m_beginCalled = false;
    7a28:	movs	r3, #0
    7a2a:	strb	r3, [r4, #16]
}
    7a2c:	pop	{r3, r4, r5, pc}
    7a2e:	nop

00007a30 <SharedSpiCard::writeStop()>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SharedSpiCard::writeStop() {
    7a30:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7a34:	ldr	r6, [pc, #128]	; (7ab8 <SharedSpiCard::writeStop()+0x88>)
    7a36:	mov	r7, r0
    return m_spiDriver.receive();
    7a38:	add.w	r8, r0, #4
    7a3c:	ldr	r5, [r6, #0]
  void set(uint16_t ms) { m_endTime = ms + millis16(); }
    7a3e:	add.w	r5, r5, #600	; 0x258
    7a42:	uxth	r5, r5
  explicit Timeout(uint16_t ms) { set(ms); }
    7a44:	b.n	7a4e <SharedSpiCard::writeStop()+0x1e>
    7a46:	ldr	r3, [r6, #0]
  bool timedOut() { return (int16_t)(m_endTime - millis16()) < 0; }
    7a48:	subs	r3, r5, r3
    if (timeout.timedOut()) {
    7a4a:	lsls	r3, r3, #16
    7a4c:	bmi.n	7a70 <SharedSpiCard::writeStop()+0x40>
    7a4e:	mov	r0, r8
    7a50:	bl	9ff8 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    7a54:	cmp	r0, #255	; 0xff
    7a56:	mov	r4, r0
    7a58:	bne.n	7a46 <SharedSpiCard::writeStop()+0x16>
    m_spiDriver.send(data);
    7a5a:	movs	r1, #253	; 0xfd
    7a5c:	mov	r0, r8
    7a5e:	bl	a034 <SdSpiArduinoDriver::send(unsigned char)>
  if (m_spiActive) {
    7a62:	ldrb	r3, [r7, #19]
    7a64:	cbnz	r3, 7a9a <SharedSpiCard::writeStop()+0x6a>
  if (!waitReady(SD_WRITE_TIMEOUT)) {
    goto fail;
  }
  spiSend(STOP_TRAN_TOKEN);
  spiStop();
  m_state = IDLE_STATE;
    7a66:	movs	r3, #0
    7a68:	movs	r0, #1
    7a6a:	strb	r3, [r7, #20]

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
    7a6c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_errorCode = code;
    7a70:	movs	r3, #31
  if (m_spiActive) {
    7a72:	ldrb	r0, [r7, #19]
    7a74:	strb	r3, [r7, #18]
    7a76:	cmp	r0, #0
    7a78:	beq.n	7a6c <SharedSpiCard::writeStop()+0x3c>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    7a7a:	ldrb	r0, [r7, #17]
    7a7c:	movs	r1, #1
    7a7e:	bl	a0a0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    7a82:	movs	r1, #255	; 0xff
    7a84:	mov	r0, r8
    7a86:	bl	a034 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    7a8a:	mov	r0, r8
    7a8c:	bl	9fa0 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    7a90:	movs	r3, #0
  return false;
    7a92:	mov	r0, r3
    m_spiActive = false;
    7a94:	strb	r3, [r7, #19]
}
    7a96:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    7a9a:	movs	r1, #1
    7a9c:	ldrb	r0, [r7, #17]
    7a9e:	bl	a0a0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    7aa2:	mov	r1, r4
    7aa4:	mov	r0, r8
    7aa6:	bl	a034 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    7aaa:	mov	r0, r8
    7aac:	bl	9fa0 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    7ab0:	movs	r3, #0
    7ab2:	strb	r3, [r7, #19]
}
    7ab4:	b.n	7a66 <SharedSpiCard::writeStop()+0x36>
    7ab6:	nop
    7ab8:	.word	0x200080e4

00007abc <SharedSpiCard::isBusy()>:
bool SharedSpiCard::isBusy() {
    7abc:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (m_state == READ_STATE) {
    7ac0:	ldrb	r3, [r0, #20]
    7ac2:	cmp	r3, #1
    7ac4:	beq.n	7b32 <SharedSpiCard::isBusy()+0x76>
  if (!spiActive) {
    7ac6:	ldrb	r6, [r0, #19]
    7ac8:	mov	r4, r0
    7aca:	cbz	r6, 7ae0 <SharedSpiCard::isBusy()+0x24>
    return m_spiDriver.receive();
    7acc:	adds	r0, #4
    7ace:	bl	9ff8 <SdSpiArduinoDriver::receive()>
  bool rtn = 0XFF != spiReceive();
    7ad2:	subs.w	r5, r0, #255	; 0xff
    7ad6:	it	ne
    7ad8:	movne	r5, #1
}
    7ada:	mov	r0, r5
    7adc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  void spiActivate() { m_spiDriver.activate(); }
    7ae0:	adds	r7, r0, #4
    m_spiActive = true;
    7ae2:	mov.w	r8, #1
    7ae6:	mov	r0, r7
    7ae8:	bl	9f64 <SdSpiArduinoDriver::activate()>
  void spiSelect() { sdCsWrite(m_csPin, false); }
    7aec:	mov	r1, r6
    7aee:	ldrb	r0, [r4, #17]
    7af0:	strb.w	r8, [r4, #19]
    7af4:	bl	a0a0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    7af8:	movs	r1, #255	; 0xff
    7afa:	mov	r0, r7
    7afc:	bl	a034 <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
    7b00:	mov	r0, r7
    7b02:	bl	9ff8 <SdSpiArduinoDriver::receive()>
  if (m_spiActive) {
    7b06:	ldrb	r3, [r4, #19]
  bool rtn = 0XFF != spiReceive();
    7b08:	subs.w	r5, r0, #255	; 0xff
    7b0c:	it	ne
    7b0e:	movne	r5, #1
  if (m_spiActive) {
    7b10:	cmp	r3, #0
    7b12:	beq.n	7ada <SharedSpiCard::isBusy()+0x1e>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    7b14:	mov	r1, r8
    7b16:	ldrb	r0, [r4, #17]
    7b18:	bl	a0a0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    7b1c:	movs	r1, #255	; 0xff
    7b1e:	mov	r0, r7
    7b20:	bl	a034 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    7b24:	mov	r0, r7
    7b26:	bl	9fa0 <SdSpiArduinoDriver::deactivate()>
}
    7b2a:	mov	r0, r5
    m_spiActive = false;
    7b2c:	strb	r6, [r4, #19]
}
    7b2e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return false;
    7b32:	movs	r5, #0
}
    7b34:	mov	r0, r5
    7b36:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7b3a:	nop

00007b3c <SharedSpiCard::readData(unsigned char*, unsigned int)>:
bool SharedSpiCard::readData(uint8_t* dst, size_t count) {
    7b3c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7b40:	ldr	r7, [pc, #128]	; (7bc4 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x88>)
    7b42:	mov	r4, r0
    7b44:	mov	r8, r1
    7b46:	mov	r9, r2
    7b48:	ldr	r5, [r7, #0]
    return m_spiDriver.receive();
    7b4a:	adds	r6, r0, #4
  void set(uint16_t ms) { m_endTime = ms + millis16(); }
    7b4c:	add.w	r5, r5, #300	; 0x12c
    7b50:	uxth	r5, r5
  explicit Timeout(uint16_t ms) { set(ms); }
    7b52:	b.n	7b5c <SharedSpiCard::readData(unsigned char*, unsigned int)+0x20>
    7b54:	ldr	r3, [r7, #0]
  bool timedOut() { return (int16_t)(m_endTime - millis16()) < 0; }
    7b56:	subs	r3, r5, r3
    if (timeout.timedOut()) {
    7b58:	lsls	r3, r3, #16
    7b5a:	bmi.n	7b78 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x3c>
    7b5c:	mov	r0, r6
    7b5e:	bl	9ff8 <SdSpiArduinoDriver::receive()>
  while ((m_status = spiReceive()) == 0XFF) {
    7b62:	cmp	r0, #255	; 0xff
    7b64:	strb	r0, [r4, #21]
    7b66:	beq.n	7b54 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x18>
  if (m_status != DATA_START_SECTOR) {
    7b68:	cmp	r0, #254	; 0xfe
    7b6a:	beq.n	7ba2 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x66>
    7b6c:	movs	r3, #25
  if (m_spiActive) {
    7b6e:	ldrb	r0, [r4, #19]
    m_errorCode = code;
    7b70:	strb	r3, [r4, #18]
    7b72:	cbnz	r0, 7b82 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x46>
}
    7b74:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    7b78:	movs	r3, #30
  if (m_spiActive) {
    7b7a:	ldrb	r0, [r4, #19]
    7b7c:	strb	r3, [r4, #18]
    7b7e:	cmp	r0, #0
    7b80:	beq.n	7b74 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x38>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    7b82:	ldrb	r0, [r4, #17]
    7b84:	movs	r1, #1
    7b86:	bl	a0a0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    7b8a:	movs	r1, #255	; 0xff
    7b8c:	mov	r0, r6
    7b8e:	bl	a034 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    7b92:	mov	r0, r6
    7b94:	bl	9fa0 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    7b98:	movs	r3, #0
  return false;
    7b9a:	mov	r0, r3
    m_spiActive = false;
    7b9c:	strb	r3, [r4, #19]
}
    7b9e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return m_spiDriver.receive(buf, n);
    7ba2:	mov	r2, r9
    7ba4:	mov	r1, r8
    7ba6:	mov	r0, r6
    7ba8:	bl	a010 <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>
  if ((m_status = spiReceive(dst, count))) {
    7bac:	strb	r0, [r4, #21]
    7bae:	cbnz	r0, 7bc0 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x84>
    return m_spiDriver.receive();
    7bb0:	mov	r0, r6
    7bb2:	bl	9ff8 <SdSpiArduinoDriver::receive()>
    7bb6:	mov	r0, r6
    7bb8:	bl	9ff8 <SdSpiArduinoDriver::receive()>
  return true;
    7bbc:	movs	r0, #1
    7bbe:	b.n	7b74 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x38>
    7bc0:	movs	r3, #38	; 0x26
    7bc2:	b.n	7b6e <SharedSpiCard::readData(unsigned char*, unsigned int)+0x32>
    7bc4:	.word	0x200080e4

00007bc8 <SharedSpiCard::readStop()>:
bool SharedSpiCard::readStop() {
    7bc8:	push	{r4, r5, r6, r7, lr}
  m_state = IDLE_STATE;
    7bca:	movs	r7, #0
bool SharedSpiCard::readStop() {
    7bcc:	sub	sp, #12
  if (cardCommand(CMD12, 0)) {
    7bce:	movs	r1, #12
bool SharedSpiCard::readStop() {
    7bd0:	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
    7bd2:	mov	r2, r7
  m_state = IDLE_STATE;
    7bd4:	strb	r7, [r0, #20]
  if (cardCommand(CMD12, 0)) {
    7bd6:	bl	7c50 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    7bda:	cbnz	r0, 7c0a <SharedSpiCard::readStop()+0x42>
  if (m_spiActive) {
    7bdc:	ldrb	r6, [r4, #19]
    7bde:	cbnz	r6, 7be8 <SharedSpiCard::readStop()+0x20>
  return true;
    7be0:	movs	r6, #1
}
    7be2:	mov	r0, r6
    7be4:	add	sp, #12
    7be6:	pop	{r4, r5, r6, r7, pc}
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    7be8:	mov	r5, r0
    7bea:	movs	r1, #1
    7bec:	ldrb	r0, [r4, #17]
    7bee:	bl	a0a0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    7bf2:	adds	r0, r4, #4
    7bf4:	movs	r1, #255	; 0xff
    7bf6:	str	r0, [sp, #4]
    7bf8:	bl	a034 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    7bfc:	ldr	r0, [sp, #4]
    7bfe:	bl	9fa0 <SdSpiArduinoDriver::deactivate()>
    7c02:	mov	r0, r6
    m_spiActive = false;
    7c04:	strb	r5, [r4, #19]
}
    7c06:	add	sp, #12
    7c08:	pop	{r4, r5, r6, r7, pc}
    m_errorCode = code;
    7c0a:	movs	r3, #9
  if (m_spiActive) {
    7c0c:	ldrb	r6, [r4, #19]
    7c0e:	strb	r3, [r4, #18]
    7c10:	cmp	r6, #0
    7c12:	beq.n	7be2 <SharedSpiCard::readStop()+0x1a>
    m_spiDriver.send(data);
    7c14:	adds	r5, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    7c16:	ldrb	r0, [r4, #17]
    7c18:	movs	r1, #1
}
    7c1a:	mov	r6, r7
    7c1c:	bl	a0a0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    7c20:	movs	r1, #255	; 0xff
    7c22:	mov	r0, r5
    7c24:	bl	a034 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    7c28:	mov	r0, r5
    7c2a:	bl	9fa0 <SdSpiArduinoDriver::deactivate()>
}
    7c2e:	mov	r0, r6
    m_spiActive = false;
    7c30:	strb	r7, [r4, #19]
}
    7c32:	add	sp, #12
    7c34:	pop	{r4, r5, r6, r7, pc}
    7c36:	nop

00007c38 <SharedSpiCard::syncDevice()>:
  if (m_state == WRITE_STATE) {
    7c38:	ldrb	r2, [r0, #20]
    7c3a:	cmp	r2, #2
    7c3c:	beq.n	7c46 <SharedSpiCard::syncDevice()+0xe>
  if (m_state == READ_STATE) {
    7c3e:	cmp	r2, #1
    7c40:	beq.n	7c4c <SharedSpiCard::syncDevice()+0x14>
}
    7c42:	movs	r0, #1
    7c44:	bx	lr
    return writeStop();
    7c46:	ldr	r3, [r0, #0]
    7c48:	ldr	r3, [r3, #104]	; 0x68
    7c4a:	bx	r3
    return readStop();
    7c4c:	b.w	7bc8 <SharedSpiCard::readStop()>

00007c50 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>:
uint8_t SharedSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    7c50:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!syncDevice()) {
    7c54:	ldr	r3, [r0, #0]
uint8_t SharedSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    7c56:	sub	sp, #8
    7c58:	mov	r7, r1
    7c5a:	ldr	r1, [pc, #216]	; (7d34 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xe4>)
    7c5c:	str	r2, [sp, #4]
    7c5e:	mov	r6, r0
  if (!syncDevice()) {
    7c60:	ldr	r2, [r3, #28]
    7c62:	cmp	r2, r1
    7c64:	bne.n	7d22 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xd2>
  if (m_state == WRITE_STATE) {
    7c66:	ldrb	r2, [r0, #20]
    7c68:	cmp	r2, #2
    7c6a:	beq.n	7cf4 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xa4>
  if (m_state == READ_STATE) {
    7c6c:	cmp	r2, #1
    7c6e:	beq.n	7d2a <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xda>
  if (!m_spiActive) {
    7c70:	ldrb	r4, [r6, #19]
    7c72:	cmp	r4, #0
    7c74:	beq.n	7d04 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xb4>
  void spiActivate() { m_spiDriver.activate(); }
    7c76:	adds	r5, r6, #4
  if (cmd != CMD0 && cmd != CMD12 && !waitReady(SD_CMD_TIMEOUT)) {
    7c78:	cbz	r7, 7ca2 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x52>
    7c7a:	cmp	r7, #12
    7c7c:	beq.n	7ca2 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x52>
    7c7e:	ldr.w	r8, [pc, #184]	; 7d38 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xe8>
    7c82:	ldr.w	r4, [r8]
  void set(uint16_t ms) { m_endTime = ms + millis16(); }
    7c86:	add.w	r4, r4, #300	; 0x12c
    7c8a:	uxth	r4, r4
  explicit Timeout(uint16_t ms) { set(ms); }
    7c8c:	b.n	7c98 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x48>
    7c8e:	ldr.w	r3, [r8]
  bool timedOut() { return (int16_t)(m_endTime - millis16()) < 0; }
    7c92:	subs	r3, r4, r3
    if (timeout.timedOut()) {
    7c94:	lsls	r1, r3, #16
    7c96:	bmi.n	7cfc <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xac>
    return m_spiDriver.receive();
    7c98:	mov	r0, r5
    7c9a:	bl	9ff8 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    7c9e:	cmp	r0, #255	; 0xff
    7ca0:	bne.n	7c8e <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x3e>
    m_spiDriver.send(data);
    7ca2:	add.w	r8, sp, #4
    7ca6:	add	r4, sp, #8
    7ca8:	orr.w	r1, r7, #64	; 0x40
    7cac:	mov	r0, r5
    7cae:	bl	a034 <SdSpiArduinoDriver::send(unsigned char)>
    7cb2:	ldrb.w	r1, [r4, #-1]!
    7cb6:	mov	r0, r5
    7cb8:	bl	a034 <SdSpiArduinoDriver::send(unsigned char)>
  for (int8_t i = 3; i >= 0; i--) {
    7cbc:	cmp	r4, r8
    7cbe:	bne.n	7cb2 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x62>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
    7cc0:	cmp	r7, #0
    7cc2:	mov	r0, r5
    return m_spiDriver.receive();
    7cc4:	mov.w	r4, #10
    m_spiDriver.send(data);
    7cc8:	ite	eq
    7cca:	moveq	r1, #149	; 0x95
    7ccc:	movne	r1, #135	; 0x87
    7cce:	bl	a034 <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
    7cd2:	mov	r0, r5
    7cd4:	bl	9ff8 <SdSpiArduinoDriver::receive()>
    7cd8:	mov	r0, r5
    7cda:	bl	9ff8 <SdSpiArduinoDriver::receive()>
  } while (m_status & 0X80 && ++n < 10);
    7cde:	lsls	r2, r0, #24
    7ce0:	add.w	r3, r4, #4294967295
    m_status = spiReceive();
    7ce4:	strb	r0, [r6, #21]
  } while (m_status & 0X80 && ++n < 10);
    7ce6:	bpl.n	7cee <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x9e>
    7ce8:	ands.w	r4, r3, #255	; 0xff
    7cec:	bne.n	7cd8 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x88>
}
    7cee:	add	sp, #8
    7cf0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return writeStop();
    7cf4:	ldr	r3, [r3, #104]	; 0x68
    7cf6:	blx	r3
  if (!syncDevice()) {
    7cf8:	cmp	r0, #0
    7cfa:	bne.n	7c70 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x20>
    return 0XFF;
    7cfc:	movs	r0, #255	; 0xff
}
    7cfe:	add	sp, #8
    7d00:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  void spiActivate() { m_spiDriver.activate(); }
    7d04:	adds	r5, r6, #4
    7d06:	mov	r0, r5
    7d08:	bl	9f64 <SdSpiArduinoDriver::activate()>
    m_spiActive = true;
    7d0c:	movs	r3, #1
  void spiSelect() { sdCsWrite(m_csPin, false); }
    7d0e:	mov	r1, r4
    7d10:	ldrb	r0, [r6, #17]
    7d12:	strb	r3, [r6, #19]
    7d14:	bl	a0a0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    7d18:	movs	r1, #255	; 0xff
    7d1a:	mov	r0, r5
    7d1c:	bl	a034 <SdSpiArduinoDriver::send(unsigned char)>
}
    7d20:	b.n	7c78 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x28>
  if (!syncDevice()) {
    7d22:	blx	r2
    7d24:	cmp	r0, #0
    7d26:	beq.n	7cfc <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xac>
    7d28:	b.n	7c70 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x20>
    return readStop();
    7d2a:	bl	7bc8 <SharedSpiCard::readStop()>
  if (!syncDevice()) {
    7d2e:	cmp	r0, #0
    7d30:	beq.n	7cfc <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xac>
    7d32:	b.n	7c70 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x20>
    7d34:	.word	0x00007c39
    7d38:	.word	0x200080e4

00007d3c <SharedSpiCard::begin(SdSpiConfig)>:
bool SharedSpiCard::begin(SdSpiConfig spiConfig) {
    7d3c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7d40:	sub	sp, #32
    7d42:	mov	r5, r0
    7d44:	mov	sl, r2
  /** Save high speed SPISettings after SD initialization.
   *
   * \param[in] maxSck Maximum SCK frequency.
   */
  void setSckSpeed(uint32_t maxSck) {
    m_spiSettings = SPISettings(maxSck, MSBFIRST, SPI_MODE0);
    7d46:	ldr	r6, [pc, #480]	; (7f28 <SharedSpiCard::begin(SdSpiConfig)+0x1ec>)
    7d48:	add	r4, sp, #4
  void spiBegin(SdSpiConfig spiConfig) { m_spiDriver.begin(spiConfig); }
    7d4a:	adds	r7, r5, #4
    7d4c:	stmia.w	r4, {r1, r2, r3}
    m_beginCalled = false;
    7d50:	movs	r3, #0
    7d52:	ldrb.w	r0, [sp, #4]
    7d56:	strb	r3, [r5, #16]
  m_errorCode = SD_CARD_ERROR_NONE;
    7d58:	strh	r3, [r5, #18]
    m_state = IDLE_STATE;
    7d5a:	strh	r3, [r5, #20]
    m_type = 0;
    7d5c:	strb	r3, [r5, #22]
  m_csPin = spiConfig.csPin;
    7d5e:	strb	r0, [r5, #17]
  sdCsInit(m_csPin);
    7d60:	bl	a098 <sdCsInit(unsigned char)>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    7d64:	movs	r1, #1
    7d66:	ldrb	r0, [r5, #17]
    7d68:	bl	a0a0 <sdCsWrite(unsigned char, bool)>
    7d6c:	movs	r2, #7
    7d6e:	add	r3, sp, #20
    7d70:	strd	r6, r2, [r5, #8]
  spiBegin(spiConfig);
    7d74:	ldmia.w	r4, {r0, r1, r2}
    7d78:	stmia.w	r3, {r0, r1, r2}
  void spiBegin(SdSpiConfig spiConfig) { m_spiDriver.begin(spiConfig); }
    7d7c:	mov	r0, r7
  m_beginCalled = true;
    7d7e:	movs	r4, #1
    7d80:	ldmia	r3, {r1, r2, r3}
    7d82:	bl	9f78 <SdSpiArduinoDriver::begin(SdSpiConfig)>
  if (!m_spiActive) {
    7d86:	ldrb	r6, [r5, #19]
  m_beginCalled = true;
    7d88:	strb	r4, [r5, #16]
  if (!m_spiActive) {
    7d8a:	cmp	r6, #0
    7d8c:	beq.w	7eaa <SharedSpiCard::begin(SdSpiConfig)+0x16e>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    7d90:	movs	r4, #10
    7d92:	movs	r1, #1
    7d94:	ldrb	r0, [r5, #17]
    7d96:	bl	a0a0 <sdCsWrite(unsigned char, bool)>
    return m_spiDriver.receive();
    7d9a:	mov	r0, r7
    7d9c:	bl	9ff8 <SdSpiArduinoDriver::receive()>
  for (uint8_t i = 0; i < 10; i++) {
    7da0:	subs	r1, r4, #1
    7da2:	ands.w	r4, r1, #255	; 0xff
    7da6:	bne.n	7d9a <SharedSpiCard::begin(SdSpiConfig)+0x5e>
    7da8:	ldr.w	r9, [pc, #388]	; 7f30 <SharedSpiCard::begin(SdSpiConfig)+0x1f4>
  void spiSelect() { sdCsWrite(m_csPin, false); }
    7dac:	mov	r1, r4
    7dae:	ldrb	r0, [r5, #17]
    7db0:	bl	a0a0 <sdCsWrite(unsigned char, bool)>
    7db4:	ldr.w	r3, [r9]
  void set(uint16_t ms) { m_endTime = ms + millis16(); }
    7db8:	add.w	r8, r3, #2000	; 0x7d0
    7dbc:	uxth.w	r8, r8
    7dc0:	b.n	7dce <SharedSpiCard::begin(SdSpiConfig)+0x92>
    7dc2:	ldr.w	r3, [r9]
  bool timedOut() { return (int16_t)(m_endTime - millis16()) < 0; }
    7dc6:	sub.w	r3, r8, r3
    if (timeout.timedOut()) {
    7dca:	lsls	r0, r3, #16
    7dcc:	bmi.n	7e3a <SharedSpiCard::begin(SdSpiConfig)+0xfe>
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
    7dce:	movs	r2, #0
    7dd0:	mov	r0, r5
    7dd2:	mov	r1, r2
    7dd4:	bl	7c50 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    7dd8:	cmp	r0, #1
    7dda:	mov	r6, r0
    7ddc:	bne.n	7dc2 <SharedSpiCard::begin(SdSpiConfig)+0x86>
    if (cardCommand(CMD8, 0x1AA) & R1_ILLEGAL_COMMAND) {
    7dde:	movs	r1, #8
    7de0:	mov.w	r2, #426	; 0x1aa
    7de4:	mov	r0, r5
    7de6:	bl	7c50 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    7dea:	lsls	r1, r0, #29
    7dec:	bmi.n	7e4c <SharedSpiCard::begin(SdSpiConfig)+0x110>
    7dee:	movs	r4, #4
    return m_spiDriver.receive();
    7df0:	mov	r0, r7
    7df2:	bl	9ff8 <SdSpiArduinoDriver::receive()>
    for (uint8_t i = 0; i < 4; i++) {
    7df6:	subs	r3, r4, #1
      m_status = spiReceive();
    7df8:	strb	r0, [r5, #21]
    for (uint8_t i = 0; i < 4; i++) {
    7dfa:	ands.w	r4, r3, #255	; 0xff
    7dfe:	bne.n	7df0 <SharedSpiCard::begin(SdSpiConfig)+0xb4>
    if (m_status == 0XAA) {
    7e00:	cmp	r0, #170	; 0xaa
    7e02:	beq.n	7e4a <SharedSpiCard::begin(SdSpiConfig)+0x10e>
    7e04:	ldr.w	r3, [r9]
  bool timedOut() { return (int16_t)(m_endTime - millis16()) < 0; }
    7e08:	sub.w	r3, r8, r3
    if (timeout.timedOut()) {
    7e0c:	lsls	r2, r3, #16
    7e0e:	bpl.n	7dde <SharedSpiCard::begin(SdSpiConfig)+0xa2>
    7e10:	movs	r3, #6
  if (m_spiActive) {
    7e12:	ldrb	r0, [r5, #19]
    m_errorCode = code;
    7e14:	strb	r3, [r5, #18]
    7e16:	cbz	r0, 7e44 <SharedSpiCard::begin(SdSpiConfig)+0x108>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    7e18:	ldrb	r0, [r5, #17]
    7e1a:	movs	r1, #1
    7e1c:	bl	a0a0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    7e20:	movs	r1, #255	; 0xff
    7e22:	mov	r0, r7
    7e24:	bl	a034 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    7e28:	mov	r0, r7
    7e2a:	bl	9fa0 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    7e2e:	movs	r3, #0
  return false;
    7e30:	mov	r0, r3
    m_spiActive = false;
    7e32:	strb	r3, [r5, #19]
}
    7e34:	add	sp, #32
    7e36:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7e3a:	movs	r3, #1
  if (m_spiActive) {
    7e3c:	ldrb	r0, [r5, #19]
    m_errorCode = code;
    7e3e:	strb	r3, [r5, #18]
    7e40:	cmp	r0, #0
    7e42:	bne.n	7e18 <SharedSpiCard::begin(SdSpiConfig)+0xdc>
}
    7e44:	add	sp, #32
    7e46:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7e4a:	movs	r6, #2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
    7e4c:	ldr	r3, [r5, #0]
    7e4e:	ldr	r4, [pc, #220]	; (7f2c <SharedSpiCard::begin(SdSpiConfig)+0x1f0>)
  void type(uint8_t value) { m_type = value; }
    7e50:	strb	r6, [r5, #22]
    7e52:	ldr	r3, [r3, #92]	; 0x5c
    7e54:	cmp	r3, r4
    7e56:	bne.n	7ec8 <SharedSpiCard::begin(SdSpiConfig)+0x18c>
    7e58:	sub.w	r6, r6, #2
    7e5c:	clz	r6, r6
    7e60:	lsrs	r6, r6, #5
    7e62:	lsls	r6, r6, #30
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
    7e64:	b.n	7e72 <SharedSpiCard::begin(SdSpiConfig)+0x136>
    7e66:	ldr.w	r3, [r9]
  bool timedOut() { return (int16_t)(m_endTime - millis16()) < 0; }
    7e6a:	sub.w	r3, r8, r3
    if (timeout.timedOut()) {
    7e6e:	lsls	r3, r3, #16
    7e70:	bmi.n	7ec4 <SharedSpiCard::begin(SdSpiConfig)+0x188>
    cardCommand(CMD55, 0);
    7e72:	movs	r1, #55	; 0x37
    7e74:	movs	r2, #0
    7e76:	mov	r0, r5
    7e78:	bl	7c50 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    return cardCommand(cmd, arg);
    7e7c:	mov	r2, r6
    7e7e:	movs	r1, #41	; 0x29
    7e80:	mov	r0, r5
    7e82:	bl	7c50 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
    7e86:	cmp	r0, #0
    7e88:	bne.n	7e66 <SharedSpiCard::begin(SdSpiConfig)+0x12a>
  if (type() == SD_CARD_TYPE_SD2) {
    7e8a:	ldr	r3, [r5, #0]
    7e8c:	ldr	r3, [r3, #92]	; 0x5c
    7e8e:	cmp	r3, r4
    7e90:	bne.n	7f1e <SharedSpiCard::begin(SdSpiConfig)+0x1e2>
  uint8_t type() const { return m_type; }
    7e92:	ldrb	r0, [r5, #22]
    7e94:	cmp	r0, #2
    7e96:	beq.n	7eec <SharedSpiCard::begin(SdSpiConfig)+0x1b0>
  if (m_spiActive) {
    7e98:	ldrb	r3, [r5, #19]
    7e9a:	cbnz	r3, 7ed0 <SharedSpiCard::begin(SdSpiConfig)+0x194>
    7e9c:	movs	r3, #7
  return true;
    7e9e:	movs	r0, #1
    7ea0:	strd	sl, r3, [r5, #8]
}
    7ea4:	add	sp, #32
    7ea6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  void spiActivate() { m_spiDriver.activate(); }
    7eaa:	mov	r0, r7
    7eac:	bl	9f64 <SdSpiArduinoDriver::activate()>
  void spiSelect() { sdCsWrite(m_csPin, false); }
    7eb0:	mov	r1, r6
    7eb2:	ldrb	r0, [r5, #17]
    m_spiActive = true;
    7eb4:	strb	r4, [r5, #19]
    7eb6:	bl	a0a0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    7eba:	movs	r1, #255	; 0xff
    7ebc:	mov	r0, r7
    7ebe:	bl	a034 <SdSpiArduinoDriver::send(unsigned char)>
}
    7ec2:	b.n	7d90 <SharedSpiCard::begin(SdSpiConfig)+0x54>
    7ec4:	movs	r3, #23
    7ec6:	b.n	7e3c <SharedSpiCard::begin(SdSpiConfig)+0x100>
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
    7ec8:	mov	r0, r5
    7eca:	blx	r3
    7ecc:	mov	r6, r0
    7ece:	b.n	7e58 <SharedSpiCard::begin(SdSpiConfig)+0x11c>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    7ed0:	movs	r1, #1
    7ed2:	ldrb	r0, [r5, #17]
    7ed4:	bl	a0a0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    7ed8:	movs	r1, #255	; 0xff
    7eda:	mov	r0, r7
    7edc:	bl	a034 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    7ee0:	mov	r0, r7
    7ee2:	bl	9fa0 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    7ee6:	movs	r3, #0
    7ee8:	strb	r3, [r5, #19]
}
    7eea:	b.n	7e9c <SharedSpiCard::begin(SdSpiConfig)+0x160>
    if (cardCommand(CMD58, 0)) {
    7eec:	movs	r2, #0
    7eee:	movs	r1, #58	; 0x3a
    7ef0:	mov	r0, r5
    7ef2:	bl	7c50 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    7ef6:	cbnz	r0, 7f24 <SharedSpiCard::begin(SdSpiConfig)+0x1e8>
    return m_spiDriver.receive();
    7ef8:	mov	r0, r7
    7efa:	bl	9ff8 <SdSpiArduinoDriver::receive()>
    if ((spiReceive() & 0XC0) == 0XC0) {
    7efe:	and.w	r0, r0, #192	; 0xc0
    7f02:	cmp	r0, #192	; 0xc0
    7f04:	bne.n	7f0a <SharedSpiCard::begin(SdSpiConfig)+0x1ce>
  void type(uint8_t value) { m_type = value; }
    7f06:	movs	r3, #3
    7f08:	strb	r3, [r5, #22]
    return m_spiDriver.receive();
    7f0a:	mov	r0, r7
    7f0c:	bl	9ff8 <SdSpiArduinoDriver::receive()>
    7f10:	mov	r0, r7
    7f12:	bl	9ff8 <SdSpiArduinoDriver::receive()>
    7f16:	mov	r0, r7
    7f18:	bl	9ff8 <SdSpiArduinoDriver::receive()>
    for (uint8_t i = 0; i < 3; i++) {
    7f1c:	b.n	7e98 <SharedSpiCard::begin(SdSpiConfig)+0x15c>
  if (type() == SD_CARD_TYPE_SD2) {
    7f1e:	mov	r0, r5
    7f20:	blx	r3
    7f22:	b.n	7e94 <SharedSpiCard::begin(SdSpiConfig)+0x158>
    7f24:	movs	r3, #18
    7f26:	b.n	7e3c <SharedSpiCard::begin(SdSpiConfig)+0x100>
    7f28:	.word	0x00061a80
    7f2c:	.word	0x000079f1
    7f30:	.word	0x200080e4

00007f34 <SharedSpiCard::cardCMD6(unsigned long, unsigned char*)>:
bool SharedSpiCard::cardCMD6(uint32_t arg, uint8_t* status) {
    7f34:	push	{r4, r5, r6, lr}
    7f36:	mov	r4, r1
    7f38:	sub	sp, #8
    7f3a:	mov	r6, r2
  if (cardCommand(CMD6, arg)) {
    7f3c:	movs	r1, #6
    7f3e:	mov	r2, r4
bool SharedSpiCard::cardCMD6(uint32_t arg, uint8_t* status) {
    7f40:	mov	r4, r0
  if (cardCommand(CMD6, arg)) {
    7f42:	bl	7c50 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    7f46:	cbz	r0, 7f76 <SharedSpiCard::cardCMD6(unsigned long, unsigned char*)+0x42>
    m_errorCode = code;
    7f48:	movs	r3, #4
    7f4a:	strb	r3, [r4, #18]
  if (m_spiActive) {
    7f4c:	ldrb	r0, [r4, #19]
    7f4e:	cbnz	r0, 7f54 <SharedSpiCard::cardCMD6(unsigned long, unsigned char*)+0x20>
}
    7f50:	add	sp, #8
    7f52:	pop	{r4, r5, r6, pc}
    m_spiDriver.send(data);
    7f54:	adds	r5, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    7f56:	ldrb	r0, [r4, #17]
    7f58:	movs	r1, #1
    7f5a:	bl	a0a0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    7f5e:	movs	r1, #255	; 0xff
    7f60:	mov	r0, r5
    7f62:	bl	a034 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    7f66:	mov	r0, r5
    7f68:	bl	9fa0 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    7f6c:	movs	r3, #0
  return false;
    7f6e:	mov	r0, r3
    m_spiActive = false;
    7f70:	strb	r3, [r4, #19]
}
    7f72:	add	sp, #8
    7f74:	pop	{r4, r5, r6, pc}
  if (!readData(status, 64)) {
    7f76:	mov	r5, r0
    7f78:	movs	r2, #64	; 0x40
    7f7a:	mov	r1, r6
    7f7c:	mov	r0, r4
    7f7e:	bl	7b3c <SharedSpiCard::readData(unsigned char*, unsigned int)>
    7f82:	cmp	r0, #0
    7f84:	beq.n	7f4c <SharedSpiCard::cardCMD6(unsigned long, unsigned char*)+0x18>
  if (m_spiActive) {
    7f86:	ldrb	r6, [r4, #19]
    7f88:	cmp	r6, #0
    7f8a:	beq.n	7f50 <SharedSpiCard::cardCMD6(unsigned long, unsigned char*)+0x1c>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    7f8c:	ldrb	r0, [r4, #17]
    7f8e:	movs	r1, #1
    7f90:	bl	a0a0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    7f94:	adds	r0, r4, #4
    7f96:	movs	r1, #255	; 0xff
    7f98:	str	r0, [sp, #4]
    7f9a:	bl	a034 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    7f9e:	ldr	r0, [sp, #4]
    7fa0:	bl	9fa0 <SdSpiArduinoDriver::deactivate()>
}
    7fa4:	mov	r0, r6
    m_spiActive = false;
    7fa6:	strb	r5, [r4, #19]
}
    7fa8:	add	sp, #8
    7faa:	pop	{r4, r5, r6, pc}

00007fac <SharedSpiCard::readOCR(unsigned long*)>:
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    7fac:	push	{r3, r4, r5, r6, r7, lr}
  if (cardCommand(CMD58, 0)) {
    7fae:	movs	r2, #0
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    7fb0:	mov	r5, r1
  if (cardCommand(CMD58, 0)) {
    7fb2:	movs	r1, #58	; 0x3a
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    7fb4:	mov	r6, r0
  if (cardCommand(CMD58, 0)) {
    7fb6:	bl	7c50 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    7fba:	cbnz	r0, 7ff6 <SharedSpiCard::readOCR(unsigned long*)+0x4a>
    m_spiDriver.send(data);
    7fbc:	adds	r7, r6, #4
    7fbe:	adds	r4, r5, #4
    return m_spiDriver.receive();
    7fc0:	mov	r0, r7
    7fc2:	bl	9ff8 <SdSpiArduinoDriver::receive()>
    p[3 - i] = spiReceive();
    7fc6:	strb.w	r0, [r4, #-1]!
  for (uint8_t i = 0; i < 4; i++) {
    7fca:	cmp	r5, r4
    7fcc:	bne.n	7fc0 <SharedSpiCard::readOCR(unsigned long*)+0x14>
  if (m_spiActive) {
    7fce:	ldrb	r4, [r6, #19]
    7fd0:	cbnz	r4, 7fd8 <SharedSpiCard::readOCR(unsigned long*)+0x2c>
    7fd2:	movs	r4, #1
}
    7fd4:	mov	r0, r4
    7fd6:	pop	{r3, r4, r5, r6, r7, pc}
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    7fd8:	ldrb	r0, [r6, #17]
    7fda:	movs	r1, #1
    7fdc:	bl	a0a0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    7fe0:	movs	r1, #255	; 0xff
    7fe2:	mov	r0, r7
    7fe4:	bl	a034 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    7fe8:	mov	r0, r7
    7fea:	bl	9fa0 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    7fee:	movs	r3, #0
}
    7ff0:	mov	r0, r4
    m_spiActive = false;
    7ff2:	strb	r3, [r6, #19]
}
    7ff4:	pop	{r3, r4, r5, r6, r7, pc}
    m_errorCode = code;
    7ff6:	movs	r3, #18
  if (m_spiActive) {
    7ff8:	ldrb	r4, [r6, #19]
    7ffa:	strb	r3, [r6, #18]
    7ffc:	cmp	r4, #0
    7ffe:	beq.n	7fd4 <SharedSpiCard::readOCR(unsigned long*)+0x28>
    m_spiDriver.send(data);
    8000:	adds	r4, r6, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    8002:	ldrb	r0, [r6, #17]
    8004:	movs	r1, #1
    8006:	bl	a0a0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    800a:	movs	r1, #255	; 0xff
    800c:	mov	r0, r4
    800e:	bl	a034 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    8012:	mov	r0, r4
    8014:	bl	9fa0 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    8018:	movs	r3, #0
  return false;
    801a:	mov	r4, r3
    m_spiActive = false;
    801c:	strb	r3, [r6, #19]
}
    801e:	mov	r0, r4
    8020:	pop	{r3, r4, r5, r6, r7, pc}
    8022:	nop

00008024 <SharedSpiCard::readRegister(unsigned char, void*)>:
bool SharedSpiCard::readRegister(uint8_t cmd, void* buf) {
    8024:	push	{r4, r5, r6, lr}
    8026:	mov	r6, r2
    8028:	sub	sp, #8
  if (cardCommand(cmd, 0)) {
    802a:	movs	r2, #0
bool SharedSpiCard::readRegister(uint8_t cmd, void* buf) {
    802c:	mov	r4, r0
  if (cardCommand(cmd, 0)) {
    802e:	bl	7c50 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    8032:	cbz	r0, 8062 <SharedSpiCard::readRegister(unsigned char, void*)+0x3e>
    m_errorCode = code;
    8034:	movs	r3, #28
    8036:	strb	r3, [r4, #18]
  if (m_spiActive) {
    8038:	ldrb	r0, [r4, #19]
    803a:	cbnz	r0, 8040 <SharedSpiCard::readRegister(unsigned char, void*)+0x1c>
}
    803c:	add	sp, #8
    803e:	pop	{r4, r5, r6, pc}
    m_spiDriver.send(data);
    8040:	adds	r5, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    8042:	ldrb	r0, [r4, #17]
    8044:	movs	r1, #1
    8046:	bl	a0a0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    804a:	movs	r1, #255	; 0xff
    804c:	mov	r0, r5
    804e:	bl	a034 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    8052:	mov	r0, r5
    8054:	bl	9fa0 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    8058:	movs	r3, #0
  return false;
    805a:	mov	r0, r3
    m_spiActive = false;
    805c:	strb	r3, [r4, #19]
}
    805e:	add	sp, #8
    8060:	pop	{r4, r5, r6, pc}
  if (!readData(dst, 16)) {
    8062:	mov	r5, r0
    8064:	movs	r2, #16
    8066:	mov	r1, r6
    8068:	mov	r0, r4
    806a:	bl	7b3c <SharedSpiCard::readData(unsigned char*, unsigned int)>
    806e:	cmp	r0, #0
    8070:	beq.n	8038 <SharedSpiCard::readRegister(unsigned char, void*)+0x14>
  if (m_spiActive) {
    8072:	ldrb	r6, [r4, #19]
    8074:	cmp	r6, #0
    8076:	beq.n	803c <SharedSpiCard::readRegister(unsigned char, void*)+0x18>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    8078:	ldrb	r0, [r4, #17]
    807a:	movs	r1, #1
    807c:	bl	a0a0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    8080:	adds	r0, r4, #4
    8082:	movs	r1, #255	; 0xff
    8084:	str	r0, [sp, #4]
    8086:	bl	a034 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    808a:	ldr	r0, [sp, #4]
    808c:	bl	9fa0 <SdSpiArduinoDriver::deactivate()>
}
    8090:	mov	r0, r6
    m_spiActive = false;
    8092:	strb	r5, [r4, #19]
}
    8094:	add	sp, #8
    8096:	pop	{r4, r5, r6, pc}

00008098 <SharedSpiCard::sectorCount()>:
  return readCSD(&csd) ? csd.capacity() : 0;
    8098:	ldr	r3, [r0, #0]
    809a:	ldr	r2, [pc, #144]	; (812c <SharedSpiCard::sectorCount()+0x94>)
    809c:	ldr	r3, [r3, #72]	; 0x48
    809e:	cmp	r3, r2
uint32_t SharedSpiCard::sectorCount() {
    80a0:	push	{lr}
    80a2:	sub	sp, #20
    80a4:	bne.n	80c4 <SharedSpiCard::sectorCount()+0x2c>
  bool readCSD(csd_t* csd) { return readRegister(CMD9, csd); }
    80a6:	mov	r2, sp
    80a8:	movs	r1, #9
    80aa:	bl	8024 <SharedSpiCard::readRegister(unsigned char, void*)>
  return readCSD(&csd) ? csd.capacity() : 0;
    80ae:	cbz	r0, 80be <SharedSpiCard::sectorCount()+0x26>
  uint8_t csd[16];
  // Extract big endian fields.
  /** \return Capacity in sectors */
  uint32_t capacity() const {
    uint32_t c_size;
    uint8_t ver = csd[0] >> 6;
    80b0:	ldrb.w	r3, [sp]
    if (ver == 0) {
    80b4:	lsrs	r3, r3, #6
    80b6:	beq.n	80ca <SharedSpiCard::sectorCount()+0x32>
      c_size = (uint32_t)(csd[6] & 3) << 10;
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
      uint8_t c_size_mult = (csd[9] & 3) << 1 | csd[10] >> 7;
      uint8_t read_bl_len = csd[5] & 15;
      return (c_size + 1) << (c_size_mult + read_bl_len + 2 - 9);
    } else if (ver == 1) {
    80b8:	cmp	r3, #1
    80ba:	beq.n	810c <SharedSpiCard::sectorCount()+0x74>
    80bc:	movs	r0, #0
}
    80be:	add	sp, #20
    80c0:	ldr.w	pc, [sp], #4
  return readCSD(&csd) ? csd.capacity() : 0;
    80c4:	mov	r1, sp
    80c6:	blx	r3
    80c8:	b.n	80ae <SharedSpiCard::sectorCount()+0x16>
      uint8_t c_size_mult = (csd[9] & 3) << 1 | csd[10] >> 7;
    80ca:	ldrb.w	r3, [sp, #9]
      c_size = (uint32_t)(csd[6] & 3) << 10;
    80ce:	ldrb.w	r2, [sp, #6]
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
    80d2:	ldrb.w	r0, [sp, #8]
      uint8_t c_size_mult = (csd[9] & 3) << 1 | csd[10] >> 7;
    80d6:	lsls	r3, r3, #1
    80d8:	ldrb.w	r1, [sp, #10]
      c_size = (uint32_t)(csd[6] & 3) << 10;
    80dc:	lsls	r2, r2, #10
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
    80de:	ldrb.w	ip, [sp, #7]
    80e2:	lsrs	r0, r0, #6
      uint8_t c_size_mult = (csd[9] & 3) << 1 | csd[10] >> 7;
    80e4:	and.w	r3, r3, #6
      c_size = (uint32_t)(csd[6] & 3) << 10;
    80e8:	and.w	r2, r2, #3072	; 0xc00
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
    80ec:	orr.w	r0, r0, ip, lsl #2
      return (c_size + 1) << (c_size_mult + read_bl_len + 2 - 9);
    80f0:	orr.w	r3, r3, r1, lsr #7
      uint8_t read_bl_len = csd[5] & 15;
    80f4:	ldrb.w	r1, [sp, #5]
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
    80f8:	orrs	r0, r2
      return (c_size + 1) << (c_size_mult + read_bl_len + 2 - 9);
    80fa:	and.w	r2, r1, #15
    80fe:	adds	r0, #1
    8100:	add	r3, r2
    8102:	subs	r3, #7
    8104:	lsls	r0, r3
}
    8106:	add	sp, #20
    8108:	ldr.w	pc, [sp], #4
      c_size = (uint32_t)(csd[7] & 63) << 16;
    810c:	ldrb.w	r3, [sp, #7]
      c_size |= (uint32_t)csd[8] << 8;
      c_size |= csd[9];
    8110:	ldrh.w	r0, [sp, #8]
      c_size = (uint32_t)(csd[7] & 63) << 16;
    8114:	lsls	r3, r3, #16
      c_size |= csd[9];
    8116:	rev16	r0, r0
      c_size = (uint32_t)(csd[7] & 63) << 16;
    8118:	and.w	r3, r3, #4128768	; 0x3f0000
      c_size |= csd[9];
    811c:	uxth	r0, r0
    811e:	orrs	r0, r3
      return (c_size + 1) << 10;
    8120:	adds	r0, #1
    8122:	lsls	r0, r0, #10
    8124:	add	sp, #20
    8126:	ldr.w	pc, [sp], #4
    812a:	nop
    812c:	.word	0x000084fd

00008130 <SharedSpiCard::readStart(unsigned long)>:
  if (type() != SD_CARD_TYPE_SDHC) {
    8130:	ldr	r3, [r0, #0]
bool SharedSpiCard::readStart(uint32_t sector) {
    8132:	mov	r2, r1
    8134:	push	{r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    8136:	ldr	r3, [r3, #92]	; 0x5c
bool SharedSpiCard::readStart(uint32_t sector) {
    8138:	sub	sp, #12
    813a:	ldr	r5, [pc, #88]	; (8194 <SharedSpiCard::readStart(unsigned long)+0x64>)
    813c:	mov	r4, r0
  if (type() != SD_CARD_TYPE_SDHC) {
    813e:	cmp	r3, r5
    8140:	bne.n	818c <SharedSpiCard::readStart(unsigned long)+0x5c>
  uint8_t type() const { return m_type; }
    8142:	ldrb	r0, [r0, #22]
    8144:	cmp	r0, #3
  if (cardCommand(CMD18, sector)) {
    8146:	mov.w	r1, #18
    814a:	mov	r0, r4
    sector <<= 9;
    814c:	it	ne
    814e:	lslne	r2, r2, #9
  if (cardCommand(CMD18, sector)) {
    8150:	bl	7c50 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    8154:	cbnz	r0, 8160 <SharedSpiCard::readStart(unsigned long)+0x30>
  m_state = READ_STATE;
    8156:	movs	r3, #1
  return true;
    8158:	mov	r0, r3
  m_state = READ_STATE;
    815a:	strb	r3, [r4, #20]
}
    815c:	add	sp, #12
    815e:	pop	{r4, r5, pc}
    m_errorCode = code;
    8160:	movs	r3, #12
  if (m_spiActive) {
    8162:	ldrb	r0, [r4, #19]
    8164:	strb	r3, [r4, #18]
    8166:	cmp	r0, #0
    8168:	beq.n	815c <SharedSpiCard::readStart(unsigned long)+0x2c>
    m_spiDriver.send(data);
    816a:	adds	r5, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    816c:	ldrb	r0, [r4, #17]
    816e:	movs	r1, #1
    8170:	bl	a0a0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    8174:	movs	r1, #255	; 0xff
    8176:	mov	r0, r5
    8178:	bl	a034 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    817c:	mov	r0, r5
    817e:	bl	9fa0 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    8182:	movs	r3, #0
}
    8184:	mov	r0, r3
    m_spiActive = false;
    8186:	strb	r3, [r4, #19]
}
    8188:	add	sp, #12
    818a:	pop	{r4, r5, pc}
    818c:	str	r1, [sp, #4]
  if (type() != SD_CARD_TYPE_SDHC) {
    818e:	blx	r3
    8190:	ldr	r2, [sp, #4]
    8192:	b.n	8144 <SharedSpiCard::readStart(unsigned long)+0x14>
    8194:	.word	0x000079f1

00008198 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)>:
  m_dedicatedSpi = spiOptionDedicated(spiConfig.options);
  return true;
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::readSector(uint32_t sector, uint8_t* dst) {
  return readSectors(sector, dst, 1);
    8198:	ldr	r3, [r0, #0]
bool DedicatedSpiCard::readSector(uint32_t sector, uint8_t* dst) {
    819a:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return readSectors(sector, dst, 1);
    819e:	ldr	r7, [r3, #20]
    81a0:	ldr	r3, [pc, #88]	; (81fc <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x64>)
    81a2:	cmp	r7, r3
    81a4:	bne.n	81e6 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x4e>
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
  if (sdState() != READ_STATE || sector != m_curSector) {
    81a6:	ldrb	r3, [r0, #20]
    81a8:	mov	r4, r0
    81aa:	mov	r5, r1
    81ac:	mov	r6, r2
    81ae:	cmp	r3, #1
    81b0:	bne.n	81b8 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x20>
    81b2:	ldr	r3, [r0, #24]
    81b4:	cmp	r1, r3
    81b6:	beq.n	81c4 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x2c>
    if (!readStart(sector)) {
    81b8:	mov	r1, r5
    81ba:	mov	r0, r4
    81bc:	bl	8130 <SharedSpiCard::readStart(unsigned long)>
    81c0:	cbz	r0, 81e0 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x48>
      goto fail;
    }
    m_curSector = sector;
    81c2:	str	r5, [r4, #24]
bool SharedSpiCard::readData(uint8_t* dst) { return readData(dst, 512); }
    81c4:	mov.w	r2, #512	; 0x200
    81c8:	mov	r1, r6
    81ca:	mov	r0, r4
    81cc:	bl	7b3c <SharedSpiCard::readData(unsigned char*, unsigned int)>
  }
  for (size_t i = 0; i < ns; i++, dst += 512) {
    if (!readData(dst)) {
    81d0:	cbz	r0, 81e0 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x48>
      goto fail;
    }
  }
  m_curSector += ns;
    81d2:	ldr	r3, [r4, #24]
  return m_dedicatedSpi ? true : readStop();
    81d4:	ldrb	r0, [r4, #28]
  m_curSector += ns;
    81d6:	adds	r3, #1
    81d8:	str	r3, [r4, #24]
  return m_dedicatedSpi ? true : readStop();
    81da:	cbz	r0, 81f0 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x58>
}
    81dc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

fail:
  return false;
    81e0:	movs	r0, #0
}
    81e2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return readSectors(sector, dst, 1);
    81e6:	mov	ip, r7
    81e8:	movs	r3, #1
}
    81ea:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return readSectors(sector, dst, 1);
    81ee:	bx	ip
  return m_dedicatedSpi ? true : readStop();
    81f0:	mov	r0, r4
}
    81f2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return m_dedicatedSpi ? true : readStop();
    81f6:	b.w	7bc8 <SharedSpiCard::readStop()>
    81fa:	nop
    81fc:	.word	0x00008575

00008200 <SharedSpiCard::writeStart(unsigned long)>:
  if (type() != SD_CARD_TYPE_SDHC) {
    8200:	ldr	r3, [r0, #0]
bool SharedSpiCard::writeStart(uint32_t sector) {
    8202:	mov	r2, r1
    8204:	push	{r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    8206:	ldr	r3, [r3, #92]	; 0x5c
bool SharedSpiCard::writeStart(uint32_t sector) {
    8208:	sub	sp, #12
    820a:	ldr	r5, [pc, #88]	; (8264 <SharedSpiCard::writeStart(unsigned long)+0x64>)
    820c:	mov	r4, r0
  if (type() != SD_CARD_TYPE_SDHC) {
    820e:	cmp	r3, r5
    8210:	bne.n	825c <SharedSpiCard::writeStart(unsigned long)+0x5c>
  uint8_t type() const { return m_type; }
    8212:	ldrb	r0, [r0, #22]
    8214:	cmp	r0, #3
  if (cardCommand(CMD25, sector)) {
    8216:	mov.w	r1, #25
    821a:	mov	r0, r4
    sector <<= 9;
    821c:	it	ne
    821e:	lslne	r2, r2, #9
  if (cardCommand(CMD25, sector)) {
    8220:	bl	7c50 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    8224:	cbnz	r0, 8230 <SharedSpiCard::writeStart(unsigned long)+0x30>
  m_state = WRITE_STATE;
    8226:	movs	r3, #2
  return true;
    8228:	movs	r0, #1
  m_state = WRITE_STATE;
    822a:	strb	r3, [r4, #20]
}
    822c:	add	sp, #12
    822e:	pop	{r4, r5, pc}
    m_errorCode = code;
    8230:	movs	r3, #14
  if (m_spiActive) {
    8232:	ldrb	r0, [r4, #19]
    8234:	strb	r3, [r4, #18]
    8236:	cmp	r0, #0
    8238:	beq.n	822c <SharedSpiCard::writeStart(unsigned long)+0x2c>
    m_spiDriver.send(data);
    823a:	adds	r5, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    823c:	ldrb	r0, [r4, #17]
    823e:	movs	r1, #1
    8240:	bl	a0a0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    8244:	movs	r1, #255	; 0xff
    8246:	mov	r0, r5
    8248:	bl	a034 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    824c:	mov	r0, r5
    824e:	bl	9fa0 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    8252:	movs	r3, #0
}
    8254:	mov	r0, r3
    m_spiActive = false;
    8256:	strb	r3, [r4, #19]
}
    8258:	add	sp, #12
    825a:	pop	{r4, r5, pc}
    825c:	str	r1, [sp, #4]
  if (type() != SD_CARD_TYPE_SDHC) {
    825e:	blx	r3
    8260:	ldr	r2, [sp, #4]
    8262:	b.n	8214 <SharedSpiCard::writeStart(unsigned long)+0x14>
    8264:	.word	0x000079f1

00008268 <SharedSpiCard::erase(unsigned long, unsigned long)>:
  if (!readCSD(&csd)) {
    8268:	ldr	r3, [r0, #0]
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    826a:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (!readCSD(&csd)) {
    826e:	ldr	r3, [r3, #72]	; 0x48
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    8270:	mov	r7, r2
    8272:	ldr	r2, [pc, #260]	; (8378 <SharedSpiCard::erase(unsigned long, unsigned long)+0x110>)
    8274:	sub	sp, #20
    8276:	mov	r4, r0
    8278:	mov	r6, r1
    827a:	cmp	r3, r2
    827c:	bne.n	830a <SharedSpiCard::erase(unsigned long, unsigned long)+0xa2>
  bool readCSD(csd_t* csd) { return readRegister(CMD9, csd); }
    827e:	mov	r2, sp
    8280:	movs	r1, #9
    8282:	bl	8024 <SharedSpiCard::readRegister(unsigned char, void*)>
    8286:	mov	r5, r0
  if (!readCSD(&csd)) {
    8288:	cbz	r5, 82b8 <SharedSpiCard::erase(unsigned long, unsigned long)+0x50>
    } else {
      return 0;
    }
  }
  /** \return true if erase granularity is single block. */
  bool eraseSingleBlock() const { return csd[10] & 0X40; }
    828a:	ldrb.w	r3, [sp, #10]
  if (!csd.eraseSingleBlock()) {
    828e:	lsls	r2, r3, #25
    8290:	bpl.n	82c4 <SharedSpiCard::erase(unsigned long, unsigned long)+0x5c>
  if (m_type != SD_CARD_TYPE_SDHC) {
    8292:	ldrb	r3, [r4, #22]
    8294:	cmp	r3, #3
    8296:	beq.n	829c <SharedSpiCard::erase(unsigned long, unsigned long)+0x34>
    firstSector <<= 9;
    8298:	lsls	r6, r6, #9
    lastSector <<= 9;
    829a:	lsls	r7, r7, #9
  if (cardCommand(CMD32, firstSector) || cardCommand(CMD33, lastSector) ||
    829c:	mov	r2, r6
    829e:	movs	r1, #32
    82a0:	mov	r0, r4
    82a2:	bl	7c50 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    82a6:	cbnz	r0, 82b4 <SharedSpiCard::erase(unsigned long, unsigned long)+0x4c>
    82a8:	mov	r2, r7
    82aa:	movs	r1, #33	; 0x21
    82ac:	mov	r0, r4
    82ae:	bl	7c50 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    82b2:	cbz	r0, 8312 <SharedSpiCard::erase(unsigned long, unsigned long)+0xaa>
    m_errorCode = code;
    82b4:	movs	r3, #39	; 0x27
    82b6:	strb	r3, [r4, #18]
  if (m_spiActive) {
    82b8:	ldrb	r5, [r4, #19]
    82ba:	cbnz	r5, 82e4 <SharedSpiCard::erase(unsigned long, unsigned long)+0x7c>
}
    82bc:	mov	r0, r5
    82be:	add	sp, #20
    82c0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  /** \return erase size in 512 byte blocks if eraseSingleBlock is false. */
  int eraseSize() const { return ((csd[10] & 0X3F) << 1 | csd[11] >> 7) + 1; }
    82c4:	lsls	r3, r3, #1
    82c6:	ldrb.w	r2, [sp, #11]
    82ca:	and.w	r3, r3, #126	; 0x7e
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    82ce:	orr.w	r3, r3, r2, lsr #7
    82d2:	adds	r2, r7, #1
    82d4:	orrs	r2, r6
    82d6:	tst	r3, r2
    82d8:	beq.n	8292 <SharedSpiCard::erase(unsigned long, unsigned long)+0x2a>
    82da:	movs	r3, #40	; 0x28
  if (m_spiActive) {
    82dc:	ldrb	r5, [r4, #19]
    82de:	strb	r3, [r4, #18]
    82e0:	cmp	r5, #0
    82e2:	beq.n	82bc <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
    m_spiDriver.send(data);
    82e4:	adds	r5, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    82e6:	ldrb	r0, [r4, #17]
    82e8:	movs	r1, #1
    82ea:	bl	a0a0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    82ee:	movs	r1, #255	; 0xff
    82f0:	mov	r0, r5
    82f2:	bl	a034 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    82f6:	mov	r0, r5
    82f8:	bl	9fa0 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    82fc:	movs	r3, #0
  return false;
    82fe:	mov	r5, r3
    m_spiActive = false;
    8300:	strb	r3, [r4, #19]
}
    8302:	mov	r0, r5
    8304:	add	sp, #20
    8306:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (!readCSD(&csd)) {
    830a:	mov	r1, sp
    830c:	blx	r3
    830e:	mov	r5, r0
    8310:	b.n	8288 <SharedSpiCard::erase(unsigned long, unsigned long)+0x20>
      cardCommand(CMD38, 0)) {
    8312:	mov	r2, r0
    8314:	movs	r1, #38	; 0x26
    8316:	mov	r0, r4
    8318:	bl	7c50 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
  if (cardCommand(CMD32, firstSector) || cardCommand(CMD33, lastSector) ||
    831c:	cmp	r0, #0
    831e:	bne.n	82b4 <SharedSpiCard::erase(unsigned long, unsigned long)+0x4c>
    8320:	ldr.w	r8, [pc, #88]	; 837c <SharedSpiCard::erase(unsigned long, unsigned long)+0x114>
  void set(uint16_t ms) { m_endTime = ms + millis16(); }
    8324:	movw	r7, #10000	; 0x2710
    return m_spiDriver.receive();
    8328:	add.w	r9, r4, #4
    832c:	ldr.w	r3, [r8]
    8330:	add	r7, r3
    8332:	uxth	r7, r7
  explicit Timeout(uint16_t ms) { set(ms); }
    8334:	b.n	8340 <SharedSpiCard::erase(unsigned long, unsigned long)+0xd8>
    8336:	ldr.w	r3, [r8]
  bool timedOut() { return (int16_t)(m_endTime - millis16()) < 0; }
    833a:	subs	r3, r7, r3
    if (timeout.timedOut()) {
    833c:	lsls	r3, r3, #16
    833e:	bmi.n	8370 <SharedSpiCard::erase(unsigned long, unsigned long)+0x108>
    8340:	mov	r0, r9
    8342:	bl	9ff8 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    8346:	cmp	r0, #255	; 0xff
    8348:	mov	r6, r0
    834a:	bne.n	8336 <SharedSpiCard::erase(unsigned long, unsigned long)+0xce>
  if (m_spiActive) {
    834c:	ldrb	r3, [r4, #19]
    834e:	cmp	r3, #0
    8350:	beq.n	82bc <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    8352:	movs	r1, #1
    8354:	ldrb	r0, [r4, #17]
  return true;
    8356:	mov	r5, r3
    8358:	bl	a0a0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    835c:	mov	r1, r6
    835e:	mov	r0, r9
    8360:	bl	a034 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    8364:	mov	r0, r9
    8366:	bl	9fa0 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    836a:	movs	r3, #0
    836c:	strb	r3, [r4, #19]
}
    836e:	b.n	82bc <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
    m_errorCode = code;
    8370:	movs	r3, #41	; 0x29
    8372:	strb	r3, [r4, #18]
    goto fail;
    8374:	b.n	82b8 <SharedSpiCard::erase(unsigned long, unsigned long)+0x50>
    8376:	nop
    8378:	.word	0x000084fd
    837c:	.word	0x200080e4

00008380 <SharedSpiCard::readSCR(scr_t*)>:
bool SharedSpiCard::readSCR(scr_t* scr) {
    8380:	push	{r4, r5, r6, lr}
    8382:	mov	r4, r0
    8384:	sub	sp, #8
    cardCommand(CMD55, 0);
    8386:	movs	r2, #0
    8388:	mov	r6, r1
    838a:	movs	r1, #55	; 0x37
    838c:	bl	7c50 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    return cardCommand(cmd, arg);
    8390:	movs	r2, #0
    8392:	movs	r1, #51	; 0x33
    8394:	mov	r0, r4
    8396:	bl	7c50 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
  if (cardAcmd(ACMD51, 0)) {
    839a:	cbz	r0, 83ca <SharedSpiCard::readSCR(scr_t*)+0x4a>
    m_errorCode = code;
    839c:	movs	r3, #24
    839e:	strb	r3, [r4, #18]
  if (m_spiActive) {
    83a0:	ldrb	r0, [r4, #19]
    83a2:	cbnz	r0, 83a8 <SharedSpiCard::readSCR(scr_t*)+0x28>
}
    83a4:	add	sp, #8
    83a6:	pop	{r4, r5, r6, pc}
    m_spiDriver.send(data);
    83a8:	adds	r5, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    83aa:	ldrb	r0, [r4, #17]
    83ac:	movs	r1, #1
    83ae:	bl	a0a0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    83b2:	movs	r1, #255	; 0xff
    83b4:	mov	r0, r5
    83b6:	bl	a034 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    83ba:	mov	r0, r5
    83bc:	bl	9fa0 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    83c0:	movs	r3, #0
  return false;
    83c2:	mov	r0, r3
    m_spiActive = false;
    83c4:	strb	r3, [r4, #19]
}
    83c6:	add	sp, #8
    83c8:	pop	{r4, r5, r6, pc}
  if (!readData(dst, sizeof(scr_t))) {
    83ca:	mov	r5, r0
    83cc:	movs	r2, #8
    83ce:	mov	r1, r6
    83d0:	mov	r0, r4
    83d2:	bl	7b3c <SharedSpiCard::readData(unsigned char*, unsigned int)>
    83d6:	cmp	r0, #0
    83d8:	beq.n	83a0 <SharedSpiCard::readSCR(scr_t*)+0x20>
  if (m_spiActive) {
    83da:	ldrb	r6, [r4, #19]
    83dc:	cmp	r6, #0
    83de:	beq.n	83a4 <SharedSpiCard::readSCR(scr_t*)+0x24>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    83e0:	ldrb	r0, [r4, #17]
    83e2:	movs	r1, #1
    83e4:	bl	a0a0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    83e8:	adds	r0, r4, #4
    83ea:	movs	r1, #255	; 0xff
    83ec:	str	r0, [sp, #4]
    83ee:	bl	a034 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    83f2:	ldr	r0, [sp, #4]
    83f4:	bl	9fa0 <SdSpiArduinoDriver::deactivate()>
}
    83f8:	mov	r0, r6
    m_spiActive = false;
    83fa:	strb	r5, [r4, #19]
}
    83fc:	add	sp, #8
    83fe:	pop	{r4, r5, r6, pc}

00008400 <SharedSpiCard::readSDS(sds_t*)>:
bool SharedSpiCard::readSDS(sds_t* sds) {
    8400:	push	{r3, r4, r5, r6, r7, lr}
    8402:	mov	r4, r0
    cardCommand(CMD55, 0);
    8404:	movs	r2, #0
    8406:	mov	r5, r1
    8408:	movs	r1, #55	; 0x37
    840a:	bl	7c50 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    return cardCommand(cmd, arg);
    840e:	movs	r2, #0
    8410:	movs	r1, #13
    8412:	mov	r0, r4
    8414:	bl	7c50 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
  if (cardAcmd(ACMD13, 0) || spiReceive()) {
    8418:	cbz	r0, 8444 <SharedSpiCard::readSDS(sds_t*)+0x44>
    m_errorCode = code;
    841a:	movs	r3, #21
    841c:	strb	r3, [r4, #18]
  if (m_spiActive) {
    841e:	ldrb	r0, [r4, #19]
    8420:	cbnz	r0, 8424 <SharedSpiCard::readSDS(sds_t*)+0x24>
}
    8422:	pop	{r3, r4, r5, r6, r7, pc}
    m_spiDriver.send(data);
    8424:	adds	r5, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    8426:	ldrb	r0, [r4, #17]
    8428:	movs	r1, #1
    842a:	bl	a0a0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    842e:	movs	r1, #255	; 0xff
    8430:	mov	r0, r5
    8432:	bl	a034 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    8436:	mov	r0, r5
    8438:	bl	9fa0 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    843c:	movs	r3, #0
  return false;
    843e:	mov	r0, r3
    m_spiActive = false;
    8440:	strb	r3, [r4, #19]
}
    8442:	pop	{r3, r4, r5, r6, r7, pc}
    return m_spiDriver.receive();
    8444:	adds	r7, r4, #4
    8446:	mov	r0, r7
    8448:	bl	9ff8 <SdSpiArduinoDriver::receive()>
  if (cardAcmd(ACMD13, 0) || spiReceive()) {
    844c:	mov	r6, r0
    844e:	cmp	r0, #0
    8450:	bne.n	841a <SharedSpiCard::readSDS(sds_t*)+0x1a>
  if (!readData(dst, sizeof(sds_t))) {
    8452:	movs	r2, #64	; 0x40
    8454:	mov	r1, r5
    8456:	mov	r0, r4
    8458:	bl	7b3c <SharedSpiCard::readData(unsigned char*, unsigned int)>
    845c:	cmp	r0, #0
    845e:	beq.n	841e <SharedSpiCard::readSDS(sds_t*)+0x1e>
  if (m_spiActive) {
    8460:	ldrb	r5, [r4, #19]
    8462:	cmp	r5, #0
    8464:	beq.n	8422 <SharedSpiCard::readSDS(sds_t*)+0x22>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    8466:	ldrb	r0, [r4, #17]
    8468:	movs	r1, #1
    846a:	bl	a0a0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    846e:	movs	r1, #255	; 0xff
    8470:	mov	r0, r7
    8472:	bl	a034 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    8476:	mov	r0, r7
    8478:	bl	9fa0 <SdSpiArduinoDriver::deactivate()>
  return true;
    847c:	mov	r0, r5
    m_spiActive = false;
    847e:	strb	r6, [r4, #19]
}
    8480:	pop	{r3, r4, r5, r6, r7, pc}
    8482:	nop

00008484 <SharedSpiCard::readCID(cid_t*)>:
  bool readCID(cid_t* cid) { return readRegister(CMD10, cid); }
    8484:	push	{r4, r5, r6, lr}
  if (cardCommand(cmd, 0)) {
    8486:	movs	r2, #0
    8488:	sub	sp, #8
    848a:	mov	r6, r1
    848c:	movs	r1, #10
    848e:	mov	r4, r0
    8490:	bl	7c50 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    8494:	cbz	r0, 84c4 <SharedSpiCard::readCID(cid_t*)+0x40>
    m_errorCode = code;
    8496:	movs	r3, #28
    8498:	strb	r3, [r4, #18]
  if (m_spiActive) {
    849a:	ldrb	r0, [r4, #19]
    849c:	cbnz	r0, 84a2 <SharedSpiCard::readCID(cid_t*)+0x1e>
  bool readCID(cid_t* cid) { return readRegister(CMD10, cid); }
    849e:	add	sp, #8
    84a0:	pop	{r4, r5, r6, pc}
    m_spiDriver.send(data);
    84a2:	adds	r5, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    84a4:	ldrb	r0, [r4, #17]
    84a6:	movs	r1, #1
    84a8:	bl	a0a0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    84ac:	movs	r1, #255	; 0xff
    84ae:	mov	r0, r5
    84b0:	bl	a034 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    84b4:	mov	r0, r5
    84b6:	bl	9fa0 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    84ba:	movs	r3, #0
  return false;
    84bc:	mov	r0, r3
    m_spiActive = false;
    84be:	strb	r3, [r4, #19]
  bool readCID(cid_t* cid) { return readRegister(CMD10, cid); }
    84c0:	add	sp, #8
    84c2:	pop	{r4, r5, r6, pc}
  if (!readData(dst, 16)) {
    84c4:	mov	r5, r0
    84c6:	movs	r2, #16
    84c8:	mov	r1, r6
    84ca:	mov	r0, r4
    84cc:	bl	7b3c <SharedSpiCard::readData(unsigned char*, unsigned int)>
    84d0:	cmp	r0, #0
    84d2:	beq.n	849a <SharedSpiCard::readCID(cid_t*)+0x16>
  if (m_spiActive) {
    84d4:	ldrb	r6, [r4, #19]
    84d6:	cmp	r6, #0
    84d8:	beq.n	849e <SharedSpiCard::readCID(cid_t*)+0x1a>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    84da:	ldrb	r0, [r4, #17]
    84dc:	movs	r1, #1
    84de:	bl	a0a0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    84e2:	adds	r0, r4, #4
    84e4:	movs	r1, #255	; 0xff
    84e6:	str	r0, [sp, #4]
    84e8:	bl	a034 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    84ec:	ldr	r0, [sp, #4]
    84ee:	bl	9fa0 <SdSpiArduinoDriver::deactivate()>
}
    84f2:	mov	r0, r6
    m_spiActive = false;
    84f4:	strb	r5, [r4, #19]
  bool readCID(cid_t* cid) { return readRegister(CMD10, cid); }
    84f6:	add	sp, #8
    84f8:	pop	{r4, r5, r6, pc}
    84fa:	nop

000084fc <SharedSpiCard::readCSD(csd_t*)>:
  bool readCSD(csd_t* csd) { return readRegister(CMD9, csd); }
    84fc:	push	{r4, r5, r6, lr}
  if (cardCommand(cmd, 0)) {
    84fe:	movs	r2, #0
    8500:	sub	sp, #8
    8502:	mov	r6, r1
    8504:	movs	r1, #9
    8506:	mov	r4, r0
    8508:	bl	7c50 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    850c:	cbz	r0, 853c <SharedSpiCard::readCSD(csd_t*)+0x40>
    m_errorCode = code;
    850e:	movs	r3, #28
    8510:	strb	r3, [r4, #18]
  if (m_spiActive) {
    8512:	ldrb	r0, [r4, #19]
    8514:	cbnz	r0, 851a <SharedSpiCard::readCSD(csd_t*)+0x1e>
  bool readCSD(csd_t* csd) { return readRegister(CMD9, csd); }
    8516:	add	sp, #8
    8518:	pop	{r4, r5, r6, pc}
    m_spiDriver.send(data);
    851a:	adds	r5, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    851c:	ldrb	r0, [r4, #17]
    851e:	movs	r1, #1
    8520:	bl	a0a0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    8524:	movs	r1, #255	; 0xff
    8526:	mov	r0, r5
    8528:	bl	a034 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    852c:	mov	r0, r5
    852e:	bl	9fa0 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    8532:	movs	r3, #0
  return false;
    8534:	mov	r0, r3
    m_spiActive = false;
    8536:	strb	r3, [r4, #19]
  bool readCSD(csd_t* csd) { return readRegister(CMD9, csd); }
    8538:	add	sp, #8
    853a:	pop	{r4, r5, r6, pc}
  if (!readData(dst, 16)) {
    853c:	mov	r5, r0
    853e:	movs	r2, #16
    8540:	mov	r1, r6
    8542:	mov	r0, r4
    8544:	bl	7b3c <SharedSpiCard::readData(unsigned char*, unsigned int)>
    8548:	cmp	r0, #0
    854a:	beq.n	8512 <SharedSpiCard::readCSD(csd_t*)+0x16>
  if (m_spiActive) {
    854c:	ldrb	r6, [r4, #19]
    854e:	cmp	r6, #0
    8550:	beq.n	8516 <SharedSpiCard::readCSD(csd_t*)+0x1a>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    8552:	ldrb	r0, [r4, #17]
    8554:	movs	r1, #1
    8556:	bl	a0a0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    855a:	adds	r0, r4, #4
    855c:	movs	r1, #255	; 0xff
    855e:	str	r0, [sp, #4]
    8560:	bl	a034 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    8564:	ldr	r0, [sp, #4]
    8566:	bl	9fa0 <SdSpiArduinoDriver::deactivate()>
}
    856a:	mov	r0, r6
    m_spiActive = false;
    856c:	strb	r5, [r4, #19]
  bool readCSD(csd_t* csd) { return readRegister(CMD9, csd); }
    856e:	add	sp, #8
    8570:	pop	{r4, r5, r6, pc}
    8572:	nop

00008574 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
bool DedicatedSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    8574:	push	{r4, r5, r6, r7, lr}
    8576:	mov	r4, r2
  if (sdState() != READ_STATE || sector != m_curSector) {
    8578:	ldrb	r2, [r0, #20]
bool DedicatedSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    857a:	sub	sp, #12
    857c:	mov	r6, r0
  if (sdState() != READ_STATE || sector != m_curSector) {
    857e:	cmp	r2, #1
bool DedicatedSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    8580:	mov	r5, r1
    8582:	mov	r7, r3
  if (sdState() != READ_STATE || sector != m_curSector) {
    8584:	bne.n	858c <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x18>
    8586:	ldr	r3, [r0, #24]
    8588:	cmp	r3, r1
    858a:	beq.n	8598 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x24>
    if (!readStart(sector)) {
    858c:	mov	r1, r5
    858e:	mov	r0, r6
    8590:	bl	8130 <SharedSpiCard::readStart(unsigned long)>
    8594:	cbz	r0, 85b8 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x44>
    m_curSector = sector;
    8596:	str	r5, [r6, #24]
  for (size_t i = 0; i < ns; i++, dst += 512) {
    8598:	cbz	r7, 85c0 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x4c>
    if (!readStart(sector)) {
    859a:	movs	r5, #0
    859c:	b.n	85a2 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2e>
  for (size_t i = 0; i < ns; i++, dst += 512) {
    859e:	cmp	r7, r5
    85a0:	beq.n	85c0 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x4c>
bool SharedSpiCard::readData(uint8_t* dst) { return readData(dst, 512); }
    85a2:	mov	r1, r4
    85a4:	mov.w	r2, #512	; 0x200
    85a8:	mov	r0, r6
  for (size_t i = 0; i < ns; i++, dst += 512) {
    85aa:	adds	r5, #1
    85ac:	add.w	r4, r4, #512	; 0x200
bool SharedSpiCard::readData(uint8_t* dst) { return readData(dst, 512); }
    85b0:	bl	7b3c <SharedSpiCard::readData(unsigned char*, unsigned int)>
    if (!readData(dst)) {
    85b4:	cmp	r0, #0
    85b6:	bne.n	859e <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2a>
  return false;
    85b8:	movs	r4, #0
}
    85ba:	mov	r0, r4
    85bc:	add	sp, #12
    85be:	pop	{r4, r5, r6, r7, pc}
  m_curSector += ns;
    85c0:	ldr	r3, [r6, #24]
  return m_dedicatedSpi ? true : readStop();
    85c2:	ldrb	r4, [r6, #28]
  m_curSector += ns;
    85c4:	add	r3, r7
    85c6:	str	r3, [r6, #24]
  return m_dedicatedSpi ? true : readStop();
    85c8:	cbz	r4, 85d2 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x5e>
    85ca:	movs	r4, #1
}
    85cc:	mov	r0, r4
    85ce:	add	sp, #12
    85d0:	pop	{r4, r5, r6, r7, pc}
  if (cardCommand(CMD12, 0)) {
    85d2:	mov	r2, r4
    85d4:	movs	r1, #12
    85d6:	mov	r0, r6
  m_state = IDLE_STATE;
    85d8:	strb	r4, [r6, #20]
  if (cardCommand(CMD12, 0)) {
    85da:	bl	7c50 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    85de:	mov	r5, r0
    85e0:	cbnz	r0, 8604 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x90>
  if (m_spiActive) {
    85e2:	ldrb	r4, [r6, #19]
    85e4:	cmp	r4, #0
    85e6:	beq.n	85ca <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x56>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    85e8:	movs	r1, #1
    85ea:	ldrb	r0, [r6, #17]
    85ec:	bl	a0a0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    85f0:	adds	r0, r6, #4
    85f2:	movs	r1, #255	; 0xff
    85f4:	str	r0, [sp, #4]
    85f6:	bl	a034 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    85fa:	ldr	r0, [sp, #4]
    85fc:	bl	9fa0 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    8600:	strb	r5, [r6, #19]
}
    8602:	b.n	85ba <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x46>
    m_errorCode = code;
    8604:	movs	r2, #9
  if (m_spiActive) {
    8606:	ldrb	r3, [r6, #19]
    8608:	strb	r2, [r6, #18]
    860a:	cmp	r3, #0
    860c:	beq.n	85b8 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x44>
    m_spiDriver.send(data);
    860e:	adds	r5, r6, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    8610:	movs	r1, #1
    8612:	ldrb	r0, [r6, #17]
    8614:	bl	a0a0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    8618:	movs	r1, #255	; 0xff
    861a:	mov	r0, r5
    861c:	bl	a034 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    8620:	mov	r0, r5
    8622:	bl	9fa0 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    8626:	strb	r4, [r6, #19]
}
    8628:	b.n	85ba <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x46>
    862a:	nop

0000862c <DedicatedSpiCard::setDedicatedSpi(bool)>:
//------------------------------------------------------------------------------
bool DedicatedSpiCard::setDedicatedSpi(bool value) {
  if (!syncDevice()) {
    862c:	ldr	r3, [r0, #0]
bool DedicatedSpiCard::setDedicatedSpi(bool value) {
    862e:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!syncDevice()) {
    8632:	ldr	r2, [r3, #28]
bool DedicatedSpiCard::setDedicatedSpi(bool value) {
    8634:	sub	sp, #8
    8636:	ldr	r5, [pc, #144]	; (86c8 <DedicatedSpiCard::setDedicatedSpi(bool)+0x9c>)
    8638:	mov	r4, r0
    863a:	mov	r6, r1
    863c:	cmp	r2, r5
    863e:	bne.n	8664 <DedicatedSpiCard::setDedicatedSpi(bool)+0x38>
  if (m_state == WRITE_STATE) {
    8640:	ldrb	r5, [r0, #20]
    8642:	cmp	r5, #2
    8644:	beq.n	8654 <DedicatedSpiCard::setDedicatedSpi(bool)+0x28>
  if (m_state == READ_STATE) {
    8646:	cmp	r5, #1
    8648:	beq.n	8668 <DedicatedSpiCard::setDedicatedSpi(bool)+0x3c>
    return false;
  }
  m_dedicatedSpi = value;
  return true;
    864a:	movs	r0, #1
  m_dedicatedSpi = value;
    864c:	strb	r6, [r4, #28]
}
    864e:	add	sp, #8
    8650:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return writeStop();
    8654:	ldr	r3, [r3, #104]	; 0x68
    8656:	blx	r3
  if (!syncDevice()) {
    8658:	cmp	r0, #0
    865a:	bne.n	864a <DedicatedSpiCard::setDedicatedSpi(bool)+0x1e>
    return false;
    865c:	movs	r0, #0
}
    865e:	add	sp, #8
    8660:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!syncDevice()) {
    8664:	blx	r2
    8666:	b.n	8658 <DedicatedSpiCard::setDedicatedSpi(bool)+0x2c>
  m_state = IDLE_STATE;
    8668:	mov.w	r8, #0
  if (cardCommand(CMD12, 0)) {
    866c:	movs	r1, #12
    866e:	mov	r2, r8
  m_state = IDLE_STATE;
    8670:	strb.w	r8, [r0, #20]
  if (cardCommand(CMD12, 0)) {
    8674:	bl	7c50 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    8678:	mov	r7, r0
    867a:	cbnz	r0, 869e <DedicatedSpiCard::setDedicatedSpi(bool)+0x72>
  if (m_spiActive) {
    867c:	ldrb	r3, [r4, #19]
    867e:	cmp	r3, #0
    8680:	beq.n	864a <DedicatedSpiCard::setDedicatedSpi(bool)+0x1e>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    8682:	mov	r1, r5
    8684:	ldrb	r0, [r4, #17]
    8686:	bl	a0a0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    868a:	adds	r0, r4, #4
    868c:	movs	r1, #255	; 0xff
    868e:	str	r0, [sp, #4]
    8690:	bl	a034 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    8694:	ldr	r0, [sp, #4]
    8696:	bl	9fa0 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    869a:	strb	r7, [r4, #19]
    869c:	b.n	864a <DedicatedSpiCard::setDedicatedSpi(bool)+0x1e>
    m_errorCode = code;
    869e:	movs	r2, #9
  if (m_spiActive) {
    86a0:	ldrb	r3, [r4, #19]
    86a2:	strb	r2, [r4, #18]
    86a4:	cmp	r3, #0
    86a6:	beq.n	865c <DedicatedSpiCard::setDedicatedSpi(bool)+0x30>
    m_spiDriver.send(data);
    86a8:	adds	r6, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    86aa:	mov	r1, r5
    86ac:	ldrb	r0, [r4, #17]
    86ae:	bl	a0a0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    86b2:	movs	r1, #255	; 0xff
    86b4:	mov	r0, r6
    86b6:	bl	a034 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    86ba:	mov	r0, r6
    86bc:	bl	9fa0 <SdSpiArduinoDriver::deactivate()>
    return false;
    86c0:	mov	r0, r8
    m_spiActive = false;
    86c2:	strb.w	r8, [r4, #19]
    86c6:	b.n	864e <DedicatedSpiCard::setDedicatedSpi(bool)+0x22>
    86c8:	.word	0x00007c39

000086cc <SharedSpiCard::writeData(unsigned char, unsigned char const*)>:
bool SharedSpiCard::writeData(uint8_t token, const uint8_t* src) {
    86cc:	push	{r4, r5, r6, lr}
    m_spiDriver.send(data);
    86ce:	adds	r5, r0, #4
    86d0:	mov	r6, r2
    86d2:	mov	r4, r0
    86d4:	mov	r0, r5
    86d6:	bl	a034 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.send(buf, n);
    86da:	mov.w	r2, #512	; 0x200
    86de:	mov	r1, r6
    86e0:	mov	r0, r5
    86e2:	bl	a048 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>
    m_spiDriver.send(data);
    86e6:	movs	r1, #255	; 0xff
    86e8:	mov	r0, r5
    86ea:	bl	a034 <SdSpiArduinoDriver::send(unsigned char)>
    86ee:	movs	r1, #255	; 0xff
    86f0:	mov	r0, r5
    86f2:	bl	a034 <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
    86f6:	mov	r0, r5
    86f8:	bl	9ff8 <SdSpiArduinoDriver::receive()>
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    86fc:	and.w	r3, r0, #31
  m_status = spiReceive();
    8700:	strb	r0, [r4, #21]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    8702:	cmp	r3, #5
    8704:	beq.n	8710 <SharedSpiCard::writeData(unsigned char, unsigned char const*)+0x44>
    m_errorCode = code;
    8706:	movs	r3, #33	; 0x21
  if (m_spiActive) {
    8708:	ldrb	r0, [r4, #19]
    870a:	strb	r3, [r4, #18]
    870c:	cbnz	r0, 8714 <SharedSpiCard::writeData(unsigned char, unsigned char const*)+0x48>
}
    870e:	pop	{r4, r5, r6, pc}
  return true;
    8710:	movs	r0, #1
}
    8712:	pop	{r4, r5, r6, pc}
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    8714:	ldrb	r0, [r4, #17]
    8716:	movs	r1, #1
    8718:	bl	a0a0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    871c:	movs	r1, #255	; 0xff
    871e:	mov	r0, r5
    8720:	bl	a034 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    8724:	mov	r0, r5
    8726:	bl	9fa0 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    872a:	movs	r3, #0
}
    872c:	mov	r0, r3
    m_spiActive = false;
    872e:	strb	r3, [r4, #19]
}
    8730:	pop	{r4, r5, r6, pc}
    8732:	nop

00008734 <SharedSpiCard::writeData(unsigned char const*)>:
bool SharedSpiCard::writeData(const uint8_t* src) {
    8734:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8738:	ldr	r5, [pc, #92]	; (8798 <SharedSpiCard::writeData(unsigned char const*)+0x64>)
    873a:	mov	r6, r0
    873c:	mov	r7, r1
    return m_spiDriver.receive();
    873e:	add.w	r8, r0, #4
    8742:	ldr	r4, [r5, #0]
  void set(uint16_t ms) { m_endTime = ms + millis16(); }
    8744:	add.w	r4, r4, #600	; 0x258
    8748:	uxth	r4, r4
  explicit Timeout(uint16_t ms) { set(ms); }
    874a:	b.n	8754 <SharedSpiCard::writeData(unsigned char const*)+0x20>
    874c:	ldr	r3, [r5, #0]
  bool timedOut() { return (int16_t)(m_endTime - millis16()) < 0; }
    874e:	subs	r3, r4, r3
    if (timeout.timedOut()) {
    8750:	lsls	r3, r3, #16
    8752:	bmi.n	876e <SharedSpiCard::writeData(unsigned char const*)+0x3a>
    8754:	mov	r0, r8
    8756:	bl	9ff8 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    875a:	cmp	r0, #255	; 0xff
    875c:	bne.n	874c <SharedSpiCard::writeData(unsigned char const*)+0x18>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
    875e:	mov	r2, r7
    8760:	movs	r1, #252	; 0xfc
    8762:	mov	r0, r6
    8764:	bl	86cc <SharedSpiCard::writeData(unsigned char, unsigned char const*)>
    8768:	cbz	r0, 8772 <SharedSpiCard::writeData(unsigned char const*)+0x3e>
}
    876a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_errorCode = code;
    876e:	movs	r3, #37	; 0x25
    8770:	strb	r3, [r6, #18]
  if (m_spiActive) {
    8772:	ldrb	r0, [r6, #19]
    8774:	cmp	r0, #0
    8776:	beq.n	876a <SharedSpiCard::writeData(unsigned char const*)+0x36>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    8778:	ldrb	r0, [r6, #17]
    877a:	movs	r1, #1
    877c:	bl	a0a0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    8780:	movs	r1, #255	; 0xff
    8782:	mov	r0, r8
    8784:	bl	a034 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    8788:	mov	r0, r8
    878a:	bl	9fa0 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    878e:	movs	r3, #0
}
    8790:	mov	r0, r3
    m_spiActive = false;
    8792:	strb	r3, [r6, #19]
}
    8794:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8798:	.word	0x200080e4

0000879c <SharedSpiCard::writeSector(unsigned long, unsigned char const*)>:
bool SharedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    879c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    87a0:	ldr	r3, [r0, #0]
bool SharedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    87a2:	mov	r5, r2
    87a4:	ldr	r2, [pc, #212]	; (887c <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0xe0>)
    87a6:	mov	r4, r0
  if (type() != SD_CARD_TYPE_SDHC) {
    87a8:	ldr	r3, [r3, #92]	; 0x5c
bool SharedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    87aa:	mov	r6, r1
    87ac:	cmp	r3, r2
    87ae:	bne.n	886a <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0xce>
  uint8_t type() const { return m_type; }
    87b0:	ldrb	r0, [r0, #22]
  if (type() != SD_CARD_TYPE_SDHC) {
    87b2:	cmp	r0, #3
  if (cardCommand(CMD24, sector)) {
    87b4:	mov.w	r1, #24
    87b8:	mov	r0, r4
    sector <<= 9;
    87ba:	it	ne
    87bc:	lslne	r6, r6, #9
  if (cardCommand(CMD24, sector)) {
    87be:	mov	r2, r6
    87c0:	bl	7c50 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    87c4:	cbz	r0, 87da <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x3e>
    m_errorCode = code;
    87c6:	movs	r3, #13
    87c8:	strb	r3, [r4, #18]
  if (m_spiActive) {
    87ca:	ldrb.w	r9, [r4, #19]
    87ce:	cmp.w	r9, #0
    87d2:	bne.n	8846 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0xaa>
}
    87d4:	mov	r0, r9
    87d6:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (!writeData(DATA_START_SECTOR, src)) {
    87da:	mov	r2, r5
    87dc:	movs	r1, #254	; 0xfe
    87de:	mov	r0, r4
    87e0:	bl	86cc <SharedSpiCard::writeData(unsigned char, unsigned char const*)>
    87e4:	mov	r9, r0
    87e6:	cmp	r0, #0
    87e8:	beq.n	87ca <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x2e>
    87ea:	ldr	r7, [pc, #148]	; (8880 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0xe4>)
    return m_spiDriver.receive();
    87ec:	add.w	r8, r4, #4
    87f0:	ldr	r6, [r7, #0]
  void set(uint16_t ms) { m_endTime = ms + millis16(); }
    87f2:	add.w	r6, r6, #600	; 0x258
    87f6:	uxth	r6, r6
  explicit Timeout(uint16_t ms) { set(ms); }
    87f8:	b.n	8802 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x66>
    87fa:	ldr	r3, [r7, #0]
  bool timedOut() { return (int16_t)(m_endTime - millis16()) < 0; }
    87fc:	subs	r3, r6, r3
    if (timeout.timedOut()) {
    87fe:	lsls	r3, r3, #16
    8800:	bmi.n	8874 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0xd8>
    8802:	mov	r0, r8
    8804:	bl	9ff8 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    8808:	cmp	r0, #255	; 0xff
    880a:	mov	r5, r0
    880c:	bne.n	87fa <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x5e>
  if (cardCommand(CMD13, 0) || spiReceive()) {
    880e:	movs	r2, #0
    8810:	movs	r1, #13
    8812:	mov	r0, r4
    8814:	bl	7c50 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    8818:	cbnz	r0, 886e <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0xd2>
    881a:	mov	r0, r8
    881c:	bl	9ff8 <SdSpiArduinoDriver::receive()>
    8820:	mov	r6, r0
    8822:	cbnz	r0, 886e <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0xd2>
  if (m_spiActive) {
    8824:	ldrb	r3, [r4, #19]
    8826:	cmp	r3, #0
    8828:	beq.n	87d4 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x38>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    882a:	movs	r1, #1
    882c:	ldrb	r0, [r4, #17]
  return true;
    882e:	mov	r9, r3
    8830:	bl	a0a0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    8834:	mov	r1, r5
    8836:	mov	r0, r8
    8838:	bl	a034 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    883c:	mov	r0, r8
    883e:	bl	9fa0 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    8842:	strb	r6, [r4, #19]
}
    8844:	b.n	87d4 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x38>
    m_spiDriver.send(data);
    8846:	adds	r5, r4, #4
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    8848:	ldrb	r0, [r4, #17]
    884a:	movs	r1, #1
    884c:	bl	a0a0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    8850:	movs	r1, #255	; 0xff
    8852:	mov	r0, r5
    8854:	bl	a034 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    8858:	mov	r0, r5
    885a:	bl	9fa0 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    885e:	movs	r3, #0
  return false;
    8860:	mov	r9, r3
    m_spiActive = false;
    8862:	strb	r3, [r4, #19]
}
    8864:	mov	r0, r9
    8866:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (type() != SD_CARD_TYPE_SDHC) {
    886a:	blx	r3
    886c:	b.n	87b2 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x16>
    m_errorCode = code;
    886e:	movs	r3, #10
    8870:	strb	r3, [r4, #18]
    goto fail;
    8872:	b.n	87ca <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x2e>
    8874:	movs	r3, #36	; 0x24
    8876:	strb	r3, [r4, #18]
    goto fail;
    8878:	b.n	87ca <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x2e>
    887a:	nop
    887c:	.word	0x000079f1
    8880:	.word	0x200080e4

00008884 <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)>:
//------------------------------------------------------------------------------
bool DedicatedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    8884:	push	{r4}
  if (m_dedicatedSpi) {
    8886:	ldrb	r4, [r0, #28]
    8888:	cbz	r4, 8898 <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)+0x14>
    return writeSectors(sector, src, 1);
    888a:	ldr	r4, [r0, #0]
    888c:	movs	r3, #1
    888e:	ldr	r4, [r4, #36]	; 0x24
    8890:	mov	ip, r4
  }
  return SharedSpiCard::writeSector(sector, src);
}
    8892:	ldr.w	r4, [sp], #4
    return writeSectors(sector, src, 1);
    8896:	bx	ip
}
    8898:	ldr.w	r4, [sp], #4
  return SharedSpiCard::writeSector(sector, src);
    889c:	b.w	879c <SharedSpiCard::writeSector(unsigned long, unsigned char const*)>

000088a0 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
//------------------------------------------------------------------------------
bool DedicatedSpiCard::writeSectors(uint32_t sector, const uint8_t* src,
                                    size_t ns) {
    88a0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    88a4:	mov	sl, r3
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    88a6:	ldrb	r3, [r0, #20]
                                    size_t ns) {
    88a8:	sub	sp, #4
    88aa:	mov	r7, r0
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    88ac:	cmp	r3, #2
                                    size_t ns) {
    88ae:	mov	r4, r1
    88b0:	mov	r8, r2
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    88b2:	beq.n	8968 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0xc8>
    if (!writeStart(sector)) {
    88b4:	ldr	r3, [r7, #0]
    88b6:	mov	r1, r4
    88b8:	mov	r0, r7
    88ba:	ldr	r3, [r3, #100]	; 0x64
    88bc:	blx	r3
    88be:	cmp	r0, #0
    88c0:	beq.n	8932 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x92>
      goto fail;
    }
    m_curSector = sector;
    88c2:	str	r4, [r7, #24]
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    88c4:	cmp.w	sl, #0
    88c8:	beq.n	8912 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x72>
    if (!writeStart(sector)) {
    88ca:	mov.w	r9, #0
    88ce:	ldr.w	fp, [pc, #164]	; 8974 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0xd4>
    88d2:	ldr	r5, [pc, #156]	; (8970 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0xd0>)
    return m_spiDriver.receive();
    88d4:	adds	r6, r7, #4
    if (!writeData(src)) {
    88d6:	ldr	r3, [r7, #0]
    88d8:	ldr	r3, [r3, #96]	; 0x60
    88da:	cmp	r3, fp
    88dc:	bne.n	893a <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x9a>
    88de:	ldr	r4, [r5, #0]
  void set(uint16_t ms) { m_endTime = ms + millis16(); }
    88e0:	add.w	r4, r4, #600	; 0x258
    88e4:	uxth	r4, r4
  explicit Timeout(uint16_t ms) { set(ms); }
    88e6:	b.n	88f0 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x50>
    88e8:	ldr	r3, [r5, #0]
  bool timedOut() { return (int16_t)(m_endTime - millis16()) < 0; }
    88ea:	subs	r3, r4, r3
    if (timeout.timedOut()) {
    88ec:	lsls	r3, r3, #16
    88ee:	bmi.n	892a <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x8a>
    88f0:	mov	r0, r6
    88f2:	bl	9ff8 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    88f6:	cmp	r0, #255	; 0xff
    88f8:	bne.n	88e8 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x48>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
    88fa:	mov	r2, r8
    88fc:	movs	r1, #252	; 0xfc
    88fe:	mov	r0, r7
    8900:	bl	86cc <SharedSpiCard::writeData(unsigned char, unsigned char const*)>
    8904:	cbz	r0, 892e <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x8e>
  for (size_t i = 0; i < ns; i++, src += 512) {
    8906:	add.w	r9, r9, #1
    890a:	add.w	r8, r8, #512	; 0x200
    890e:	cmp	sl, r9
    8910:	bne.n	88d6 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x36>
      goto fail;
    }
  }
  m_curSector += ns;
    8912:	ldr	r3, [r7, #24]
  return m_dedicatedSpi ? true : writeStop();
    8914:	ldrb	r0, [r7, #28]
  m_curSector += ns;
    8916:	add	r3, sl
    8918:	str	r3, [r7, #24]
  return m_dedicatedSpi ? true : writeStop();
    891a:	cbnz	r0, 8934 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x94>
    891c:	ldr	r3, [r7, #0]
    891e:	mov	r0, r7
    8920:	ldr	r3, [r3, #104]	; 0x68

fail:
  return false;
}
    8922:	add	sp, #4
    8924:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  return m_dedicatedSpi ? true : writeStop();
    8928:	bx	r3
    m_errorCode = code;
    892a:	movs	r3, #37	; 0x25
    892c:	strb	r3, [r7, #18]
  if (m_spiActive) {
    892e:	ldrb	r3, [r7, #19]
    8930:	cbnz	r3, 8946 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0xa6>
  return false;
    8932:	movs	r0, #0
}
    8934:	add	sp, #4
    8936:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (!writeData(src)) {
    893a:	mov	r1, r8
    893c:	mov	r0, r7
    893e:	blx	r3
    8940:	cmp	r0, #0
    8942:	bne.n	8906 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x66>
    8944:	b.n	8932 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x92>
  void spiUnselect() { sdCsWrite(m_csPin, true); }
    8946:	ldrb	r0, [r7, #17]
    8948:	movs	r1, #1
    894a:	bl	a0a0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    894e:	movs	r1, #255	; 0xff
    8950:	mov	r0, r6
    8952:	bl	a034 <SdSpiArduinoDriver::send(unsigned char)>
  void spiDeactivate() { m_spiDriver.deactivate(); }
    8956:	mov	r0, r6
    8958:	bl	9fa0 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    895c:	movs	r3, #0
  return false;
    895e:	mov	r0, r3
    m_spiActive = false;
    8960:	strb	r3, [r7, #19]
}
    8962:	add	sp, #4
    8964:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    8968:	ldr	r3, [r0, #24]
    896a:	cmp	r3, r1
    896c:	bne.n	88b4 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x14>
    896e:	b.n	88c4 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x24>
    8970:	.word	0x200080e4
    8974:	.word	0x00008735

00008978 <DedicatedSpiCard::begin(SdSpiConfig)>:
bool DedicatedSpiCard::begin(SdSpiConfig spiConfig) {
    8978:	push	{r4, lr}
    897a:	sub	sp, #16
    897c:	mov	r4, r0
    897e:	add.w	ip, sp, #4
    8982:	stmia.w	ip, {r1, r2, r3}
  if (!SharedSpiCard::begin(spiConfig)) {
    8986:	ldmia.w	ip, {r1, r2, r3}
    898a:	bl	7d3c <SharedSpiCard::begin(SdSpiConfig)>
    898e:	cbz	r0, 899a <DedicatedSpiCard::begin(SdSpiConfig)+0x22>
const uint8_t USER_SPI_BEGIN = 2;
/**
 * \param[in] opt option field of SdSpiConfig.
 * \return true for dedicated SPI.
 */
inline bool spiOptionDedicated(uint8_t opt) { return opt & DEDICATED_SPI; }
    8990:	ldrb.w	r3, [sp, #5]
    8994:	and.w	r3, r3, #1
    8998:	strb	r3, [r4, #28]
}
    899a:	add	sp, #16
    899c:	pop	{r4, pc}
    899e:	nop

000089a0 <SdCardInterface::hasDedicatedSpi()>:
  virtual bool hasDedicatedSpi() { return false; }
    89a0:	movs	r0, #0
    89a2:	bx	lr

000089a4 <SdCardInterface::isDedicatedSpi()>:
  bool virtual isDedicatedSpi() { return false; }
    89a4:	movs	r0, #0
    89a6:	bx	lr

000089a8 <SdCardInterface::setDedicatedSpi(bool)>:
  }
    89a8:	movs	r0, #0
    89aa:	bx	lr

000089ac <SdioCard::end()>:
   */
  bool cardCMD6(uint32_t arg, uint8_t* status);
  /** Disable an SDIO card.
   * not implemented.
   */
  void end() {}
    89ac:	bx	lr
    89ae:	nop

000089b0 <sdIrs()>:
  return false;
}
//==============================================================================
// ISR
static void sdIrs() {
  SDHC_IRQSIGEN = 0;
    89b0:	ldr	r3, [pc, #32]	; (89d4 <sdIrs()+0x24>)
    89b2:	movs	r1, #0
  m_irqstat = SDHC_IRQSTAT;
    89b4:	ldr	r2, [pc, #32]	; (89d8 <sdIrs()+0x28>)
  SDHC_IRQSTAT = m_irqstat;
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
#endif
  m_dmaBusy = false;
    89b6:	ldr	r0, [pc, #36]	; (89dc <sdIrs()+0x2c>)
static void sdIrs() {
    89b8:	push	{r4}
  SDHC_IRQSIGEN = 0;
    89ba:	str	r1, [r3, #56]	; 0x38
  m_irqstat = SDHC_IRQSTAT;
    89bc:	ldr	r4, [r3, #48]	; 0x30
    89be:	str	r4, [r2, #0]
  SDHC_IRQSTAT = m_irqstat;
    89c0:	ldr	r2, [r2, #0]
}
    89c2:	ldr.w	r4, [sp], #4
  SDHC_IRQSTAT = m_irqstat;
    89c6:	str	r2, [r3, #48]	; 0x30
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
    89c8:	ldr	r2, [r3, #72]	; 0x48
    89ca:	bic.w	r2, r2, #129	; 0x81
    89ce:	str	r2, [r3, #72]	; 0x48
  m_dmaBusy = false;
    89d0:	strb	r1, [r0, #0]
}
    89d2:	bx	lr
    89d4:	.word	0x402c0000
    89d8:	.word	0x20006400
    89dc:	.word	0x20008156

000089e0 <isBusyDat()>:
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
}
//------------------------------------------------------------------------------
static bool isBusyCommandInhibit() { return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB; }
//------------------------------------------------------------------------------
static bool isBusyDat() { return SDHC_PRSSTAT & (1 << 24) ? false : true; }
    89e0:	ldr	r3, [pc, #12]	; (89f0 <isBusyDat()+0x10>)
    89e2:	ldr	r0, [r3, #36]	; 0x24
    89e4:	eor.w	r0, r0, #16777216	; 0x1000000
    89e8:	ubfx	r0, r0, #24, #1
    89ec:	bx	lr
    89ee:	nop
    89f0:	.word	0x402c0000

000089f4 <isBusyDMA()>:
//------------------------------------------------------------------------------
static bool isBusyDMA() { return m_dmaBusy; }
    89f4:	ldr	r3, [pc, #4]	; (89fc <isBusyDMA()+0x8>)
    89f6:	ldrb	r0, [r3, #0]
    89f8:	bx	lr
    89fa:	nop
    89fc:	.word	0x20008156

00008a00 <setSdclk(unsigned long)>:
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    8a00:	ldr	r2, [pc, #172]	; (8ab0 <setSdclk(unsigned long)+0xb0>)
  return (528000000U * 3) / ((CCM_ANALOG_PFD_528 & 0x3F) / 6) / divider;
    8a02:	ldr	r3, [pc, #176]	; (8ab4 <setSdclk(unsigned long)+0xb4>)
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    8a04:	ldr	r2, [r2, #36]	; 0x24
  return (528000000U * 3) / ((CCM_ANALOG_PFD_528 & 0x3F) / 6) / divider;
    8a06:	ldr.w	r3, [r3, #256]	; 0x100
    8a0a:	ldr	r1, [pc, #172]	; (8ab8 <setSdclk(unsigned long)+0xb8>)
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    8a0c:	ubfx	r2, r2, #11, #3
  return (528000000U * 3) / ((CCM_ANALOG_PFD_528 & 0x3F) / 6) / divider;
    8a10:	and.w	r3, r3, #63	; 0x3f
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    8a14:	adds	r2, #1
  }
  d[15] = 0;
  return true;
}
//------------------------------------------------------------------------------
static void setSdclk(uint32_t kHzMax) {
    8a16:	push	{r4, r5, r6, lr}
  return (528000000U * 3) / ((CCM_ANALOG_PFD_528 & 0x3F) / 6) / divider;
    8a18:	ldr	r4, [pc, #160]	; (8abc <setSdclk(unsigned long)+0xbc>)
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000 * kHzMax;
    8a1a:	mov.w	r5, #1000	; 0x3e8
  return (528000000U * 3) / ((CCM_ANALOG_PFD_528 & 0x3F) / 6) / divider;
    8a1e:	umull	r4, r3, r4, r3
  uint32_t maxSdclk = 1000 * kHzMax;
    8a22:	mul.w	r0, r5, r0
  return (528000000U * 3) / ((CCM_ANALOG_PFD_528 & 0x3F) / 6) / divider;
    8a26:	lsrs	r3, r3, #2
    8a28:	udiv	lr, r1, r3
    8a2c:	udiv	lr, lr, r2
  uint32_t base = baseClock();

  while ((base / (sdclkfs * DVS_LIMIT) > maxSdclk) &&
    8a30:	cmp.w	r0, lr, lsr #4
    8a34:	bcs.n	8aa2 <setSdclk(unsigned long)+0xa2>
  uint32_t sdclkfs = 1;
    8a36:	movs	r3, #1
         (sdclkfs < SDCLKFS_LIMIT)) {
    sdclkfs <<= 1;
    8a38:	mov	r6, r3
    8a3a:	lsls	r3, r3, #1
  while ((base / (sdclkfs * DVS_LIMIT) > maxSdclk) &&
    8a3c:	lsls	r2, r3, #4
    8a3e:	udiv	r2, lr, r2
    8a42:	cmp	r2, r0
    8a44:	bls.n	8a4a <setSdclk(unsigned long)+0x4a>
    8a46:	cmp	r3, #255	; 0xff
    8a48:	bls.n	8a38 <setSdclk(unsigned long)+0x38>
  }
  while ((base / (sdclkfs * dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    8a4a:	udiv	r2, lr, r3
  uint32_t sysctl =
      SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK | SDHC_SYSCTL_DVS_MASK |
                      SDHC_SYSCTL_SDCLKFS_MASK);

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs) |
                SDHC_SYSCTL_SDCLKFS(sdclkfs);
    8a4e:	lsls	r6, r6, #8
  while ((base / (sdclkfs * dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    8a50:	cmp	r0, r2
    8a52:	bcs.n	8aaa <setSdclk(unsigned long)+0xaa>
    8a54:	mov.w	ip, r3, lsl #1
    8a58:	movs	r2, #1
    8a5a:	b.n	8a5e <setSdclk(unsigned long)+0x5e>
    8a5c:	mov	ip, r4
    dvs++;
    8a5e:	mov	r5, r2
  while ((base / (sdclkfs * dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    8a60:	add.w	r4, r3, ip
    dvs++;
    8a64:	adds	r2, #1
  while ((base / (sdclkfs * dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    8a66:	udiv	r1, lr, ip
    8a6a:	cmp	r1, r0
    8a6c:	bls.n	8a9e <setSdclk(unsigned long)+0x9e>
    8a6e:	cmp	r2, #16
    8a70:	bne.n	8a5c <setSdclk(unsigned long)+0x5c>
    8a72:	movs	r5, #240	; 0xf0
  m_sdClkKhz = base / (1000 * sdclkfs * dvs);
    8a74:	mov.w	r3, #1000	; 0x3e8
    8a78:	ldr	r1, [pc, #68]	; (8ac0 <setSdclk(unsigned long)+0xc0>)
      SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK | SDHC_SYSCTL_DVS_MASK |
    8a7a:	ldr	r2, [pc, #72]	; (8ac4 <setSdclk(unsigned long)+0xc4>)
  m_sdClkKhz = base / (1000 * sdclkfs * dvs);
    8a7c:	mul.w	ip, r3, ip
    8a80:	udiv	r3, lr, ip
    8a84:	str	r3, [r1, #0]
                      SDHC_SYSCTL_SDCLKFS_MASK);
    8a86:	ldr	r3, [pc, #64]	; (8ac8 <setSdclk(unsigned long)+0xc8>)
      SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK | SDHC_SYSCTL_DVS_MASK |
    8a88:	ldr	r1, [r2, #44]	; 0x2c
                      SDHC_SYSCTL_SDCLKFS_MASK);
    8a8a:	ands	r3, r1
  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs) |
    8a8c:	orrs	r3, r5
    8a8e:	orrs	r3, r6
    8a90:	orr.w	r3, r3, #917504	; 0xe0000
    8a94:	str	r3, [r2, #44]	; 0x2c

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
    8a96:	ldr	r3, [r2, #36]	; 0x24
    8a98:	lsls	r3, r3, #28
    8a9a:	bpl.n	8a96 <setSdclk(unsigned long)+0x96>

#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
  // Enable the SDHC clock.
  SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
}
    8a9c:	pop	{r4, r5, r6, pc}
  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs) |
    8a9e:	lsls	r5, r5, #4
    8aa0:	b.n	8a74 <setSdclk(unsigned long)+0x74>
  while ((base / (sdclkfs * DVS_LIMIT) > maxSdclk) &&
    8aa2:	mov	r2, lr
    8aa4:	movs	r6, #0
  uint32_t sdclkfs = 1;
    8aa6:	movs	r3, #1
    8aa8:	b.n	8a50 <setSdclk(unsigned long)+0x50>
  while ((base / (sdclkfs * dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    8aaa:	mov	ip, r3
    8aac:	movs	r5, #0
    8aae:	b.n	8a74 <setSdclk(unsigned long)+0x74>
    8ab0:	.word	0x400fc000
    8ab4:	.word	0x400d8000
    8ab8:	.word	0x5e69ec00
    8abc:	.word	0xaaaaaaab
    8ac0:	.word	0x20005c84
    8ac4:	.word	0x402c0000
    8ac8:	.word	0xfff0000f

00008acc <SdioCard::errorCode() const>:
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::errorCode() const { return m_errorCode; }
    8acc:	ldr	r3, [pc, #4]	; (8ad4 <SdioCard::errorCode() const+0x8>)
    8ace:	ldrb	r0, [r3, #0]
    8ad0:	bx	lr
    8ad2:	nop
    8ad4:	.word	0x20001a4e

00008ad8 <SdioCard::errorData() const>:
//------------------------------------------------------------------------------
uint32_t SdioCard::errorData() const { return m_irqstat; }
    8ad8:	ldr	r3, [pc, #4]	; (8ae0 <SdioCard::errorData() const+0x8>)
    8ada:	ldr	r0, [r3, #0]
    8adc:	bx	lr
    8ade:	nop
    8ae0:	.word	0x20006400

00008ae4 <SdioCard::readCID(cid_t*)>:
  }
}
//------------------------------------------------------------------------------
uint32_t SdioCard::kHzSdClk() { return m_sdClkKhz; }
//------------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
    8ae4:	push	{r4}
  memcpy(cid, &m_cid, sizeof(cid_t));
    8ae6:	ldr	r4, [pc, #28]	; (8b04 <SdioCard::readCID(cid_t*)+0x20>)
bool SdioCard::readCID(cid_t* cid) {
    8ae8:	mov	ip, r1
  memcpy(cid, &m_cid, sizeof(cid_t));
    8aea:	ldmia	r4!, {r0, r1, r2, r3}
    8aec:	str.w	r0, [ip]
  return true;
}
    8af0:	movs	r0, #1
  memcpy(cid, &m_cid, sizeof(cid_t));
    8af2:	str.w	r1, [ip, #4]
    8af6:	str.w	r2, [ip, #8]
    8afa:	str.w	r3, [ip, #12]
}
    8afe:	ldr.w	r4, [sp], #4
    8b02:	bx	lr
    8b04:	.word	0x2000618c

00008b08 <SdioCard::readCSD(csd_t*)>:
//------------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
    8b08:	push	{r4}
  memcpy(csd, &m_csd, sizeof(csd_t));
    8b0a:	ldr	r4, [pc, #28]	; (8b28 <SdioCard::readCSD(csd_t*)+0x20>)
bool SdioCard::readCSD(csd_t* csd) {
    8b0c:	mov	ip, r1
  memcpy(csd, &m_csd, sizeof(csd_t));
    8b0e:	ldmia	r4!, {r0, r1, r2, r3}
    8b10:	str.w	r0, [ip]
  return true;
}
    8b14:	movs	r0, #1
  memcpy(csd, &m_csd, sizeof(csd_t));
    8b16:	str.w	r1, [ip, #4]
    8b1a:	str.w	r2, [ip, #8]
    8b1e:	str.w	r3, [ip, #12]
}
    8b22:	ldr.w	r4, [sp], #4
    8b26:	bx	lr
    8b28:	.word	0x2000619c

00008b2c <SdioCard::readOCR(unsigned long*)>:
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
    8b2c:	ldr	r3, [pc, #8]	; (8b38 <SdioCard::readOCR(unsigned long*)+0xc>)
  return true;
}
    8b2e:	movs	r0, #1
  *ocr = m_ocr;
    8b30:	ldr	r3, [r3, #0]
    8b32:	str	r3, [r1, #0]
}
    8b34:	bx	lr
    8b36:	nop
    8b38:	.word	0x200061ac

00008b3c <SdioCard::readSCR(scr_t*)>:
//------------------------------------------------------------------------------
bool SdioCard::readSCR(scr_t* scr) {
  memcpy(scr, &m_scr, sizeof(scr_t));
    8b3c:	ldr	r2, [pc, #12]	; (8b4c <SdioCard::readSCR(scr_t*)+0x10>)
bool SdioCard::readSCR(scr_t* scr) {
    8b3e:	mov	r3, r1
  memcpy(scr, &m_scr, sizeof(scr_t));
    8b40:	ldmia	r2!, {r0, r1}
    8b42:	str	r0, [r3, #0]
  return true;
}
    8b44:	movs	r0, #1
  memcpy(scr, &m_scr, sizeof(scr_t));
    8b46:	str	r1, [r3, #4]
}
    8b48:	bx	lr
    8b4a:	nop
    8b4c:	.word	0x200061b4

00008b50 <SdioCard::readSDS(sds_t*)>:
//------------------------------------------------------------------------------
bool SdioCard::readSDS(sds_t* sds) {
    8b50:	push	{r4, r5, lr}
  memcpy(sds, &m_sds, sizeof(sds_t));
    8b52:	ldr	r4, [pc, #44]	; (8b80 <SdioCard::readSDS(sds_t*)+0x30>)
    8b54:	mov	ip, r1
    8b56:	add.w	r5, r4, #64	; 0x40
    8b5a:	mov	lr, r4
    8b5c:	add.w	ip, ip, #16
    8b60:	adds	r4, #16
    8b62:	ldmia.w	lr!, {r0, r1, r2, r3}
    8b66:	cmp	lr, r5
    8b68:	str.w	r0, [ip, #-16]
    8b6c:	str.w	r1, [ip, #-12]
    8b70:	str.w	r2, [ip, #-8]
    8b74:	str.w	r3, [ip, #-4]
    8b78:	bne.n	8b5a <SdioCard::readSDS(sds_t*)+0xa>
  return true;
}
    8b7a:	movs	r0, #1
    8b7c:	pop	{r4, r5, pc}
    8b7e:	nop
    8b80:	.word	0x200061bc

00008b84 <SdioCard::~SdioCard()>:
class SdioCard : public SdCardInterface {
    8b84:	bx	lr
    8b86:	nop

00008b88 <SdioCard::~SdioCard()>:
    8b88:	push	{r4, lr}
    8b8a:	mov	r4, r0
    8b8c:	movs	r1, #12
    8b8e:	bl	d07c <operator delete(void*, unsigned int)>
    8b92:	mov	r0, r4
    8b94:	pop	{r4, pc}
    8b96:	nop

00008b98 <SdioCard::type() const>:
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::type() const {
  return m_version2 ? m_highCapacity ? SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2
    8b98:	ldr	r3, [pc, #16]	; (8bac <SdioCard::type() const+0x14>)
    8b9a:	ldrb	r3, [r3, #0]
    8b9c:	cbz	r3, 8ba8 <SdioCard::type() const+0x10>
    8b9e:	ldr	r3, [pc, #16]	; (8bb0 <SdioCard::type() const+0x18>)
    8ba0:	ldrb	r0, [r3, #0]
    8ba2:	adds	r0, #2
    8ba4:	uxtb	r0, r0
    8ba6:	bx	lr
    8ba8:	movs	r0, #1
                    : SD_CARD_TYPE_SD1;
}
    8baa:	bx	lr
    8bac:	.word	0x20008153
    8bb0:	.word	0x20008154

00008bb4 <SdioCard::sectorCount()>:
    uint8_t ver = csd[0] >> 6;
    8bb4:	ldr	r2, [pc, #88]	; (8c10 <SdioCard::sectorCount()+0x5c>)
    8bb6:	ldrb	r3, [r2, #0]
    if (ver == 0) {
    8bb8:	lsrs	r3, r3, #6
    8bba:	beq.n	8bda <SdioCard::sectorCount()+0x26>
    } else if (ver == 1) {
    8bbc:	cmp	r3, #1
    8bbe:	beq.n	8bc4 <SdioCard::sectorCount()+0x10>
      return 0;
    8bc0:	movs	r0, #0
uint32_t SdioCard::sectorCount() { return m_csd.capacity(); }
    8bc2:	bx	lr
      c_size = (uint32_t)(csd[7] & 63) << 16;
    8bc4:	ldrb	r3, [r2, #7]
      c_size |= csd[9];
    8bc6:	ldrh	r0, [r2, #8]
      c_size = (uint32_t)(csd[7] & 63) << 16;
    8bc8:	lsls	r3, r3, #16
      c_size |= csd[9];
    8bca:	rev16	r0, r0
      c_size = (uint32_t)(csd[7] & 63) << 16;
    8bcc:	and.w	r3, r3, #4128768	; 0x3f0000
      c_size |= csd[9];
    8bd0:	uxth	r0, r0
    8bd2:	orrs	r0, r3
      return (c_size + 1) << 10;
    8bd4:	adds	r0, #1
    8bd6:	lsls	r0, r0, #10
    8bd8:	bx	lr
      uint8_t c_size_mult = (csd[9] & 3) << 1 | csd[10] >> 7;
    8bda:	ldrb	r3, [r2, #9]
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
    8bdc:	ldrb	r0, [r2, #8]
    8bde:	ldrb.w	ip, [r2, #7]
      uint8_t c_size_mult = (csd[9] & 3) << 1 | csd[10] >> 7;
    8be2:	lsls	r3, r3, #1
      c_size = (uint32_t)(csd[6] & 3) << 10;
    8be4:	ldrb	r1, [r2, #6]
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
    8be6:	lsrs	r0, r0, #6
      uint8_t c_size_mult = (csd[9] & 3) << 1 | csd[10] >> 7;
    8be8:	and.w	r3, r3, #6
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
    8bec:	orr.w	r0, r0, ip, lsl #2
      uint8_t c_size_mult = (csd[9] & 3) << 1 | csd[10] >> 7;
    8bf0:	ldrb.w	ip, [r2, #10]
      c_size = (uint32_t)(csd[6] & 3) << 10;
    8bf4:	lsls	r1, r1, #10
      uint8_t read_bl_len = csd[5] & 15;
    8bf6:	ldrb	r2, [r2, #5]
      return (c_size + 1) << (c_size_mult + read_bl_len + 2 - 9);
    8bf8:	orr.w	r3, r3, ip, lsr #7
      c_size = (uint32_t)(csd[6] & 3) << 10;
    8bfc:	and.w	r1, r1, #3072	; 0xc00
      return (c_size + 1) << (c_size_mult + read_bl_len + 2 - 9);
    8c00:	and.w	r2, r2, #15
      c_size |= (uint32_t)csd[7] << 2 | csd[8] >> 6;
    8c04:	orrs	r0, r1
      return (c_size + 1) << (c_size_mult + read_bl_len + 2 - 9);
    8c06:	add	r3, r2
    8c08:	adds	r0, #1
    8c0a:	subs	r3, #7
    8c0c:	lsls	r0, r3
    8c0e:	bx	lr
    8c10:	.word	0x2000619c

00008c14 <waitDmaStatus()>:
static bool waitDmaStatus() {
    8c14:	push	{r3, r4, r5, r6, r7, lr}
  m_busyFcn = fcn;
    8c16:	ldr	r3, [pc, #76]	; (8c64 <waitDmaStatus()+0x50>)
    8c18:	ldr	r7, [pc, #76]	; (8c68 <waitDmaStatus()+0x54>)
static bool isBusyDMA() { return m_dmaBusy; }
    8c1a:	ldr	r5, [pc, #80]	; (8c6c <waitDmaStatus()+0x58>)
  m_busyFcn = fcn;
    8c1c:	str	r3, [r7, #0]
  uint32_t m = micros();
    8c1e:	bl	b84c <micros>
static bool isBusyDMA() { return m_dmaBusy; }
    8c22:	ldrb	r3, [r5, #0]
  while (fcn()) {
    8c24:	cbz	r3, 8c46 <waitDmaStatus()+0x32>
    8c26:	mov	r4, r0
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8c28:	ldr	r6, [pc, #68]	; (8c70 <waitDmaStatus()+0x5c>)
    8c2a:	b.n	8c34 <waitDmaStatus()+0x20>
    yield();
    8c2c:	bl	c0b4 <yield>
static bool isBusyDMA() { return m_dmaBusy; }
    8c30:	ldrb	r3, [r5, #0]
  while (fcn()) {
    8c32:	cbz	r3, 8c46 <waitDmaStatus()+0x32>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8c34:	bl	b84c <micros>
    8c38:	subs	r0, r0, r4
    8c3a:	cmp	r0, r6
    8c3c:	bls.n	8c2c <waitDmaStatus()+0x18>
      m_busyFcn = 0;
    8c3e:	movs	r3, #0
    return false;  // Caller will set errorCode.
    8c40:	mov	r0, r3
      m_busyFcn = 0;
    8c42:	str	r3, [r7, #0]
}
    8c44:	pop	{r3, r4, r5, r6, r7, pc}
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    8c46:	ldr	r3, [pc, #44]	; (8c74 <waitDmaStatus()+0x60>)
  m_busyFcn = 0;
    8c48:	movs	r2, #0
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    8c4a:	ldr	r0, [r3, #0]
  m_busyFcn = 0;
    8c4c:	str	r2, [r7, #0]
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    8c4e:	ands.w	r0, r0, #2
    8c52:	beq.n	8c44 <waitDmaStatus()+0x30>
    8c54:	ldr	r2, [r3, #0]
    8c56:	ldr	r3, [pc, #32]	; (8c78 <waitDmaStatus()+0x64>)
    8c58:	tst	r2, r3
    8c5a:	ite	eq
    8c5c:	moveq	r0, #1
    8c5e:	movne	r0, #0
}
    8c60:	pop	{r3, r4, r5, r6, r7, pc}
    8c62:	nop
    8c64:	.word	0x000089f5
    8c68:	.word	0x200063fc
    8c6c:	.word	0x20008156
    8c70:	.word	0x000f4240
    8c74:	.word	0x20006400
    8c78:	.word	0x117f0000

00008c7c <waitTransferComplete() [clone .part.0]>:
static bool waitTransferComplete() {
    8c7c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t m = micros();
    8c80:	bl	b84c <micros>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    8c84:	ldr	r6, [pc, #92]	; (8ce4 <waitTransferComplete() [clone .part.0]+0x68>)
    8c86:	ldr	r5, [pc, #96]	; (8ce8 <waitTransferComplete() [clone .part.0]+0x6c>)
  uint32_t m = micros();
    8c88:	mov	r7, r0
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8c8a:	ldr.w	r8, [pc, #116]	; 8d00 <waitTransferComplete() [clone .part.0]+0x84>
  while (fcn()) {
    8c8e:	b.n	8c9a <waitTransferComplete() [clone .part.0]+0x1e>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8c90:	bl	b84c <micros>
    8c94:	subs	r0, r0, r7
    8c96:	cmp	r0, r8
    8c98:	bhi.n	8cd2 <waitTransferComplete() [clone .part.0]+0x56>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    8c9a:	ldr	r4, [r6, #48]	; 0x30
  while (fcn()) {
    8c9c:	ands	r4, r5
    8c9e:	beq.n	8c90 <waitTransferComplete() [clone .part.0]+0x14>
  m_transferActive = false;
    8ca0:	ldr	r2, [pc, #72]	; (8cec <waitTransferComplete() [clone .part.0]+0x70>)
    8ca2:	movs	r1, #0
  m_irqstat = SDHC_IRQSTAT;
    8ca4:	ldr	r3, [pc, #72]	; (8cf0 <waitTransferComplete() [clone .part.0]+0x74>)
  m_transferActive = false;
    8ca6:	strb	r1, [r2, #0]
  m_irqstat = SDHC_IRQSTAT;
    8ca8:	ldr	r2, [r6, #48]	; 0x30
    8caa:	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    8cac:	ldr	r1, [r3, #0]
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    8cae:	ldr	r2, [pc, #68]	; (8cf4 <waitTransferComplete() [clone .part.0]+0x78>)
  SDHC_IRQSTAT = m_irqstat;
    8cb0:	str	r1, [r6, #48]	; 0x30
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    8cb2:	ldr	r3, [r3, #0]
    8cb4:	tst	r3, r2
    8cb6:	beq.n	8ccc <waitTransferComplete() [clone .part.0]+0x50>
  m_errorCode = code;
    8cb8:	ldr	r1, [pc, #60]	; (8cf8 <waitTransferComplete() [clone .part.0]+0x7c>)
    8cba:	movs	r4, #32
  m_errorLine = line;
    8cbc:	ldr	r3, [pc, #60]	; (8cfc <waitTransferComplete() [clone .part.0]+0x80>)
    8cbe:	movw	r2, #682	; 0x2aa
    return sdError(SD_CARD_ERROR_TRANSFER_COMPLETE);
    8cc2:	movs	r0, #0
  m_errorCode = code;
    8cc4:	strb	r4, [r1, #0]
  m_errorLine = line;
    8cc6:	str	r2, [r3, #0]
}
    8cc8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return true;
    8ccc:	movs	r0, #1
}
    8cce:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_transferActive = false;
    8cd2:	ldr	r2, [pc, #24]	; (8cec <waitTransferComplete() [clone .part.0]+0x70>)
  m_irqstat = SDHC_IRQSTAT;
    8cd4:	ldr	r3, [pc, #24]	; (8cf0 <waitTransferComplete() [clone .part.0]+0x74>)
  m_transferActive = false;
    8cd6:	strb	r4, [r2, #0]
  m_irqstat = SDHC_IRQSTAT;
    8cd8:	ldr	r2, [r6, #48]	; 0x30
    8cda:	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    8cdc:	ldr	r3, [r3, #0]
    8cde:	str	r3, [r6, #48]	; 0x30
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    8ce0:	b.n	8cb8 <waitTransferComplete() [clone .part.0]+0x3c>
    8ce2:	nop
    8ce4:	.word	0x402c0000
    8ce8:	.word	0x117f0002
    8cec:	.word	0x20008155
    8cf0:	.word	0x20006400
    8cf4:	.word	0x117f0000
    8cf8:	.word	0x20001a4e
    8cfc:	.word	0x20005c88
    8d00:	.word	0x000f4240

00008d04 <SdioCard::writeData(unsigned char const*)>:
//------------------------------------------------------------------------------
bool SdioCard::writeData(const uint8_t* src) {
    8d04:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (!m_transferActive) {
    8d08:	ldr	r4, [pc, #152]	; (8da4 <SdioCard::writeData(unsigned char const*)+0xa0>)
bool SdioCard::writeData(const uint8_t* src) {
    8d0a:	mov	r7, r1
  if (!m_transferActive) {
    8d0c:	ldrb	r3, [r4, #0]
    8d0e:	cmp	r3, #0
    8d10:	bne.n	8d84 <SdioCard::writeData(unsigned char const*)+0x80>
  DBG_IRQSTAT();
  if (!waitTransferComplete()) {
    return false;
  }
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    8d12:	ldr	r3, [pc, #148]	; (8da8 <SdioCard::writeData(unsigned char const*)+0xa4>)
    8d14:	ldr	r2, [r3, #36]	; 0x24
    8d16:	lsls	r2, r2, #23
    8d18:	bpl.n	8d72 <SdioCard::writeData(unsigned char const*)+0x6e>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    8d1a:	ldr	r5, [pc, #140]	; (8da8 <SdioCard::writeData(unsigned char const*)+0xa4>)
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8d1c:	ldr.w	r8, [pc, #148]	; 8db4 <SdioCard::writeData(unsigned char const*)+0xb0>
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    8d20:	ldr	r3, [r5, #40]	; 0x28
    8d22:	orr.w	r3, r3, #65536	; 0x10000
    8d26:	str	r3, [r5, #40]	; 0x28
  uint32_t m = micros();
    8d28:	bl	b84c <micros>
    8d2c:	mov	r6, r0
  while (fcn()) {
    8d2e:	b.n	8d3a <SdioCard::writeData(unsigned char const*)+0x36>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8d30:	bl	b84c <micros>
    8d34:	subs	r0, r0, r6
    8d36:	cmp	r0, r8
    8d38:	bhi.n	8d90 <SdioCard::writeData(unsigned char const*)+0x8c>
static bool isBusyFifoWrite() { return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN); }
    8d3a:	ldr	r3, [r5, #36]	; 0x24
  while (fcn()) {
    8d3c:	ands.w	r9, r3, #1024	; 0x400
    8d40:	beq.n	8d30 <SdioCard::writeData(unsigned char const*)+0x2c>
    8d42:	add.w	ip, r7, #60	; 0x3c
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0; iw < 512 / (4 * FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    8d46:	ldr	r0, [pc, #96]	; (8da8 <SdioCard::writeData(unsigned char const*)+0xa4>)
    8d48:	add.w	r7, r7, #572	; 0x23c
    8d4c:	ldr	r3, [r0, #36]	; 0x24
    8d4e:	lsls	r3, r3, #21
    8d50:	bpl.n	8d4c <SdioCard::writeData(unsigned char const*)+0x48>
    8d52:	sub.w	r3, ip, #64	; 0x40
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      SDHC_DATPORT = p32[i];
    8d56:	ldr.w	r2, [r3, #4]!
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    8d5a:	cmp	ip, r3
      SDHC_DATPORT = p32[i];
    8d5c:	str	r2, [r0, #32]
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    8d5e:	bne.n	8d56 <SdioCard::writeData(unsigned char const*)+0x52>
  for (uint32_t iw = 0; iw < 512 / (4 * FIFO_WML); iw++) {
    8d60:	add.w	ip, ip, #64	; 0x40
    8d64:	cmp	ip, r7
    8d66:	bne.n	8d4c <SdioCard::writeData(unsigned char const*)+0x48>
    }
    p32 += FIFO_WML;
  }
  m_transferActive = true;
    8d68:	movs	r3, #1
  return true;
    8d6a:	mov	r0, r3
  m_transferActive = true;
    8d6c:	strb	r3, [r4, #0]
}
    8d6e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    8d72:	ldr	r2, [r3, #40]	; 0x28
    8d74:	bic.w	r2, r2, #65536	; 0x10000
    8d78:	str	r2, [r3, #40]	; 0x28
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    8d7a:	ldr	r2, [r3, #40]	; 0x28
    8d7c:	orr.w	r2, r2, #131072	; 0x20000
    8d80:	str	r2, [r3, #40]	; 0x28
    8d82:	b.n	8d1a <SdioCard::writeData(unsigned char const*)+0x16>
    8d84:	bl	8c7c <waitTransferComplete() [clone .part.0]>
  if (!waitTransferComplete()) {
    8d88:	cmp	r0, #0
    8d8a:	bne.n	8d12 <SdioCard::writeData(unsigned char const*)+0xe>
}
    8d8c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  m_errorCode = code;
    8d90:	ldr	r1, [pc, #24]	; (8dac <SdioCard::writeData(unsigned char const*)+0xa8>)
    8d92:	movs	r4, #34	; 0x22
  m_errorLine = line;
    8d94:	ldr	r3, [pc, #24]	; (8db0 <SdioCard::writeData(unsigned char const*)+0xac>)
    8d96:	movw	r2, #1055	; 0x41f
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
    8d9a:	mov	r0, r9
  m_errorCode = code;
    8d9c:	strb	r4, [r1, #0]
  m_errorLine = line;
    8d9e:	str	r2, [r3, #0]
}
    8da0:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8da4:	.word	0x20008155
    8da8:	.word	0x402c0000
    8dac:	.word	0x20001a4e
    8db0:	.word	0x20005c88
    8db4:	.word	0x000f4240

00008db8 <cardCommand(unsigned long, unsigned long)>:
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    8db8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8dbc:	mov	r7, r0
    8dbe:	mov	r8, r1
static bool isBusyCommandInhibit() { return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB; }
    8dc0:	ldr	r4, [pc, #124]	; (8e40 <cardCommand(unsigned long, unsigned long)+0x88>)
  uint32_t m = micros();
    8dc2:	bl	b84c <micros>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8dc6:	ldr	r6, [pc, #124]	; (8e44 <cardCommand(unsigned long, unsigned long)+0x8c>)
  uint32_t m = micros();
    8dc8:	mov	r5, r0
  while (fcn()) {
    8dca:	b.n	8dd6 <cardCommand(unsigned long, unsigned long)+0x1e>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8dcc:	bl	b84c <micros>
    8dd0:	subs	r3, r0, r5
    8dd2:	cmp	r3, r6
    8dd4:	bhi.n	8e20 <cardCommand(unsigned long, unsigned long)+0x68>
static bool isBusyCommandInhibit() { return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB; }
    8dd6:	ldr	r3, [r4, #36]	; 0x24
  while (fcn()) {
    8dd8:	lsls	r1, r3, #31
    8dda:	bmi.n	8dcc <cardCommand(unsigned long, unsigned long)+0x14>
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
    8ddc:	lsls	r3, r7, #10
  SDHC_CMDARG = arg;
    8dde:	str.w	r8, [r4, #8]
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
    8de2:	bmi.n	8e26 <cardCommand(unsigned long, unsigned long)+0x6e>
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
    8de4:	bic.w	r3, r7, #255	; 0xff
  SDHC_XFERTYP = xfertyp;
    8de8:	ldr	r4, [pc, #84]	; (8e40 <cardCommand(unsigned long, unsigned long)+0x88>)
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
    8dea:	ldr	r6, [pc, #92]	; (8e48 <cardCommand(unsigned long, unsigned long)+0x90>)
  SDHC_XFERTYP = xfertyp;
    8dec:	str	r3, [r4, #12]
  uint32_t m = micros();
    8dee:	bl	b84c <micros>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8df2:	ldr	r7, [pc, #80]	; (8e44 <cardCommand(unsigned long, unsigned long)+0x8c>)
  uint32_t m = micros();
    8df4:	mov	r5, r0
  while (fcn()) {
    8df6:	b.n	8e02 <cardCommand(unsigned long, unsigned long)+0x4a>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8df8:	bl	b84c <micros>
    8dfc:	subs	r0, r0, r5
    8dfe:	cmp	r0, r7
    8e00:	bhi.n	8e20 <cardCommand(unsigned long, unsigned long)+0x68>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
    8e02:	ldr	r3, [r4, #48]	; 0x30
  while (fcn()) {
    8e04:	tst	r3, r6
    8e06:	beq.n	8df8 <cardCommand(unsigned long, unsigned long)+0x40>
  m_irqstat = SDHC_IRQSTAT;
    8e08:	ldr	r2, [r4, #48]	; 0x30
    8e0a:	ldr	r3, [pc, #64]	; (8e4c <cardCommand(unsigned long, unsigned long)+0x94>)
    8e0c:	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    8e0e:	ldr	r2, [r3, #0]
    8e10:	str	r2, [r4, #48]	; 0x30
  return (m_irqstat & SDHC_IRQSTAT_CC) && !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
    8e12:	ldr	r2, [r3, #0]
    8e14:	lsls	r2, r2, #31
    8e16:	bpl.n	8e20 <cardCommand(unsigned long, unsigned long)+0x68>
    8e18:	ldr	r3, [r3, #0]
    8e1a:	tst.w	r3, #983040	; 0xf0000
    8e1e:	beq.n	8e38 <cardCommand(unsigned long, unsigned long)+0x80>
    8e20:	movs	r0, #0
}
    8e22:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    8e26:	ldr	r2, [r4, #72]	; 0x48
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
    8e28:	uxtb	r3, r7
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    8e2a:	bic.w	r2, r2, #255	; 0xff
    8e2e:	str	r2, [r4, #72]	; 0x48
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
    8e30:	ldr	r2, [r4, #72]	; 0x48
    8e32:	orrs	r3, r2
    8e34:	str	r3, [r4, #72]	; 0x48
    8e36:	b.n	8de4 <cardCommand(unsigned long, unsigned long)+0x2c>
  return (m_irqstat & SDHC_IRQSTAT_CC) && !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
    8e38:	movs	r0, #1
}
    8e3a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8e3e:	nop
    8e40:	.word	0x402c0000
    8e44:	.word	0x000f4240
    8e48:	.word	0x000f0001
    8e4c:	.word	0x20006400

00008e50 <readReg16(unsigned long, void*)>:
  if (!cardCommand(xfertyp, m_rca)) {
    8e50:	ldr	r3, [pc, #84]	; (8ea8 <readReg16(unsigned long, void*)+0x58>)
static bool readReg16(uint32_t xfertyp, void* data) {
    8e52:	push	{r4, r5, lr}
    8e54:	mov	r5, r1
    8e56:	sub	sp, #20
  if (!cardCommand(xfertyp, m_rca)) {
    8e58:	ldr	r1, [r3, #0]
    8e5a:	bl	8db8 <cardCommand(unsigned long, unsigned long)>
    8e5e:	cbz	r0, 8ea4 <readReg16(unsigned long, void*)+0x54>
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
    8e60:	ldr	r3, [pc, #72]	; (8eac <readReg16(unsigned long, void*)+0x5c>)
    8e62:	add.w	r4, r5, #15
    8e66:	ldr	r2, [r3, #16]
    8e68:	str	r2, [sp, #0]
    8e6a:	ldr	r1, [r3, #20]
    8e6c:	str	r1, [sp, #4]
    8e6e:	ldr	r1, [r3, #24]
    8e70:	str	r1, [sp, #8]
    8e72:	ldr	r3, [r3, #28]
    8e74:	str	r3, [sp, #12]
  for (int i = 0; i < 15; i++) {
    8e76:	movs	r3, #0
    8e78:	b.n	8e7e <readReg16(unsigned long, void*)+0x2e>
    d[14 - i] = sr[i / 4] >> 8 * (i % 4);
    8e7a:	ldr.w	r2, [lr, #-16]
    8e7e:	and.w	ip, r3, #3
  for (int i = 0; i < 15; i++) {
    8e82:	adds	r3, #1
    d[14 - i] = sr[i / 4] >> 8 * (i % 4);
    8e84:	mov.w	ip, ip, lsl #3
    8e88:	bic.w	lr, r3, #3
  for (int i = 0; i < 15; i++) {
    8e8c:	cmp	r3, #15
    d[14 - i] = sr[i / 4] >> 8 * (i % 4);
    8e8e:	lsr.w	r2, r2, ip
    8e92:	add.w	r1, lr, #16
    8e96:	strb.w	r2, [r4, #-1]!
    8e9a:	add.w	lr, sp, r1
  for (int i = 0; i < 15; i++) {
    8e9e:	bne.n	8e7a <readReg16(unsigned long, void*)+0x2a>
  d[15] = 0;
    8ea0:	movs	r3, #0
    8ea2:	strb	r3, [r5, #15]
}
    8ea4:	add	sp, #20
    8ea6:	pop	{r4, r5, pc}
    8ea8:	.word	0x200061b0
    8eac:	.word	0x402c0000

00008eb0 <SdioCard::isBusy()>:
bool SdioCard::isBusy() {
    8eb0:	push	{r4, lr}
  bool useDma() { return m_options & DMA_SDIO; }
    8eb2:	ldrb	r3, [r0, #8]
  if (m_sdioConfig.useDma()) {
    8eb4:	lsls	r3, r3, #31
    8eb6:	bpl.n	8ec4 <SdioCard::isBusy()+0x14>
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    8eb8:	ldr	r3, [pc, #84]	; (8f10 <SdioCard::isBusy()+0x60>)
    8eba:	ldr	r3, [r3, #0]
    8ebc:	cbz	r3, 8eec <SdioCard::isBusy()+0x3c>
}
    8ebe:	ldmia.w	sp!, {r4, lr}
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    8ec2:	bx	r3
    if (m_transferActive) {
    8ec4:	ldr	r3, [pc, #76]	; (8f14 <SdioCard::isBusy()+0x64>)
    8ec6:	ldrb	r3, [r3, #0]
    8ec8:	cbnz	r3, 8eda <SdioCard::isBusy()+0x2a>
    return SDHC_PRSSTAT & (1 << 24) ? false : true;
    8eca:	ldr	r3, [pc, #76]	; (8f18 <SdioCard::isBusy()+0x68>)
    8ecc:	ldr	r4, [r3, #36]	; 0x24
    8ece:	eor.w	r4, r4, #16777216	; 0x1000000
    8ed2:	ubfx	r4, r4, #24, #1
}
    8ed6:	mov	r0, r4
    8ed8:	pop	{r4, pc}
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    8eda:	ldr	r3, [pc, #60]	; (8f18 <SdioCard::isBusy()+0x68>)
    8edc:	ldr	r4, [pc, #60]	; (8f1c <SdioCard::isBusy()+0x6c>)
    8ede:	ldr	r3, [r3, #48]	; 0x30
    8ee0:	ands	r4, r3
      if (isBusyTransferComplete()) {
    8ee2:	clz	r4, r4
    8ee6:	lsrs	r4, r4, #5
}
    8ee8:	mov	r0, r4
    8eea:	pop	{r4, pc}
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    8eec:	ldr	r3, [pc, #48]	; (8f20 <SdioCard::isBusy()+0x70>)
    8eee:	ldrb	r4, [r3, #0]
    8ef0:	cmp	r4, #0
    8ef2:	beq.n	8ed6 <SdioCard::isBusy()+0x26>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    8ef4:	ldr	r3, [pc, #44]	; (8f24 <SdioCard::isBusy()+0x74>)
    8ef6:	ldr	r0, [pc, #48]	; (8f28 <SdioCard::isBusy()+0x78>)
    8ef8:	ldr	r1, [r3, #0]
    8efa:	bl	8db8 <cardCommand(unsigned long, unsigned long)>
    8efe:	cmp	r0, #0
    8f00:	beq.n	8ed6 <SdioCard::isBusy()+0x26>
    8f02:	ldr	r3, [pc, #20]	; (8f18 <SdioCard::isBusy()+0x68>)
    8f04:	ldr	r4, [r3, #16]
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    8f06:	eor.w	r4, r4, #256	; 0x100
    8f0a:	ubfx	r4, r4, #8, #1
    8f0e:	b.n	8ed6 <SdioCard::isBusy()+0x26>
    8f10:	.word	0x200063fc
    8f14:	.word	0x20008155
    8f18:	.word	0x402c0000
    8f1c:	.word	0x117f0002
    8f20:	.word	0x20008152
    8f24:	.word	0x200061b0
    8f28:	.word	0x0d1a0000

00008f2c <SdioCard::status()>:
uint32_t SdioCard::status() { return statusCMD13(); }
    8f2c:	push	{r3, lr}
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    8f2e:	ldr	r3, [pc, #16]	; (8f40 <SdioCard::status()+0x14>)
    8f30:	ldr	r0, [pc, #16]	; (8f44 <SdioCard::status()+0x18>)
    8f32:	ldr	r1, [r3, #0]
    8f34:	bl	8db8 <cardCommand(unsigned long, unsigned long)>
    8f38:	cbz	r0, 8f3e <SdioCard::status()+0x12>
    8f3a:	ldr	r3, [pc, #12]	; (8f48 <SdioCard::status()+0x1c>)
    8f3c:	ldr	r0, [r3, #16]
uint32_t SdioCard::status() { return statusCMD13(); }
    8f3e:	pop	{r3, pc}
    8f40:	.word	0x200061b0
    8f44:	.word	0x0d1a0000
    8f48:	.word	0x402c0000

00008f4c <isBusyCMD13()>:
static bool isBusyCMD13() {
    8f4c:	push	{r3, lr}
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    8f4e:	ldr	r3, [pc, #28]	; (8f6c <isBusyCMD13()+0x20>)
    8f50:	ldr	r0, [pc, #28]	; (8f70 <isBusyCMD13()+0x24>)
    8f52:	ldr	r1, [r3, #0]
    8f54:	bl	8db8 <cardCommand(unsigned long, unsigned long)>
    8f58:	cbz	r0, 8f68 <isBusyCMD13()+0x1c>
    8f5a:	ldr	r3, [pc, #24]	; (8f74 <isBusyCMD13()+0x28>)
    8f5c:	ldr	r0, [r3, #16]
  return !(statusCMD13() & CARD_STATUS_READY_FOR_DATA);
    8f5e:	eor.w	r0, r0, #256	; 0x100
    8f62:	ubfx	r0, r0, #8, #1
}
    8f66:	pop	{r3, pc}
    8f68:	movs	r0, #1
    8f6a:	pop	{r3, pc}
    8f6c:	.word	0x200061b0
    8f70:	.word	0x0d1a0000
    8f74:	.word	0x402c0000

00008f78 <SdioCard::writeStart(unsigned long)>:
    }
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
    8f78:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  m_busyFcn = fcn;
    8f7c:	ldr	r3, [pc, #164]	; (9024 <SdioCard::writeStart(unsigned long)+0xac>)
bool SdioCard::writeStart(uint32_t sector) {
    8f7e:	mov	r9, r1
  m_busyFcn = fcn;
    8f80:	ldr.w	sl, [pc, #192]	; 9044 <SdioCard::writeStart(unsigned long)+0xcc>
    8f84:	ldr	r6, [pc, #160]	; (9028 <SdioCard::writeStart(unsigned long)+0xb0>)
    8f86:	str.w	r3, [sl]
  uint32_t m = micros();
    8f8a:	bl	b84c <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    8f8e:	ldr	r5, [pc, #156]	; (902c <SdioCard::writeStart(unsigned long)+0xb4>)
  uint32_t m = micros();
    8f90:	mov	r4, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    8f92:	ldr.w	r8, [pc, #180]	; 9048 <SdioCard::writeStart(unsigned long)+0xd0>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8f96:	ldr	r7, [pc, #152]	; (9030 <SdioCard::writeStart(unsigned long)+0xb8>)
  while (fcn()) {
    8f98:	b.n	8fa8 <SdioCard::writeStart(unsigned long)+0x30>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8f9a:	bl	b84c <micros>
    8f9e:	subs	r0, r0, r4
    8fa0:	cmp	r0, r7
    8fa2:	bhi.n	8ff8 <SdioCard::writeStart(unsigned long)+0x80>
    yield();
    8fa4:	bl	c0b4 <yield>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    8fa8:	ldr	r1, [r6, #0]
    8faa:	mov	r0, r5
    8fac:	bl	8db8 <cardCommand(unsigned long, unsigned long)>
    8fb0:	cmp	r0, #0
    8fb2:	beq.n	8f9a <SdioCard::writeStart(unsigned long)+0x22>
    8fb4:	ldr.w	r3, [r8, #16]
  while (fcn()) {
    8fb8:	lsls	r3, r3, #23
    8fba:	bpl.n	8f9a <SdioCard::writeStart(unsigned long)+0x22>
  m_busyFcn = 0;
    8fbc:	movs	r3, #0
  }
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;

#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    8fbe:	mov.w	r2, #512	; 0x200
  m_busyFcn = 0;
    8fc2:	str.w	r3, [sl]
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    8fc6:	ldr.w	r3, [r8, #40]	; 0x28
    8fca:	bic.w	r3, r3, #65536	; 0x10000
    8fce:	str.w	r3, [r8, #40]	; 0x28
#else   // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(MAX_BLKCNT) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512 * sector)) {
    8fd2:	ldr	r3, [pc, #96]	; (9034 <SdioCard::writeStart(unsigned long)+0xbc>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    8fd4:	str.w	r2, [r8, #4]
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512 * sector)) {
    8fd8:	ldrb	r3, [r3, #0]
    8fda:	cbz	r3, 9010 <SdioCard::writeStart(unsigned long)+0x98>
    8fdc:	mov	r1, r9
    8fde:	ldr	r0, [pc, #88]	; (9038 <SdioCard::writeStart(unsigned long)+0xc0>)
    8fe0:	bl	8db8 <cardCommand(unsigned long, unsigned long)>
    8fe4:	cbnz	r0, 8ff4 <SdioCard::writeStart(unsigned long)+0x7c>
  m_errorCode = code;
    8fe6:	ldr	r1, [pc, #84]	; (903c <SdioCard::writeStart(unsigned long)+0xc4>)
    8fe8:	movs	r4, #14
  m_errorLine = line;
    8fea:	ldr	r3, [pc, #84]	; (9040 <SdioCard::writeStart(unsigned long)+0xc8>)
    8fec:	movw	r2, #1150	; 0x47e
  m_errorCode = code;
    8ff0:	strb	r4, [r1, #0]
  m_errorLine = line;
    8ff2:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD25);
  }
  return true;
}
    8ff4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_errorCode = code;
    8ff8:	ldr	r2, [pc, #64]	; (903c <SdioCard::writeStart(unsigned long)+0xc4>)
    8ffa:	movs	r1, #10
      m_busyFcn = 0;
    8ffc:	movs	r0, #0
  m_errorLine = line;
    8ffe:	ldr	r3, [pc, #64]	; (9040 <SdioCard::writeStart(unsigned long)+0xc8>)
  m_errorCode = code;
    9000:	strb	r1, [r2, #0]
  m_errorLine = line;
    9002:	movw	r2, #1138	; 0x472
      m_busyFcn = 0;
    9006:	str.w	r0, [sl]
  m_errorLine = line;
    900a:	str	r2, [r3, #0]
}
    900c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512 * sector)) {
    9010:	mov.w	r9, r9, lsl #9
    9014:	ldr	r0, [pc, #32]	; (9038 <SdioCard::writeStart(unsigned long)+0xc0>)
    9016:	mov	r1, r9
    9018:	bl	8db8 <cardCommand(unsigned long, unsigned long)>
    901c:	cmp	r0, #0
    901e:	bne.n	8ff4 <SdioCard::writeStart(unsigned long)+0x7c>
    9020:	b.n	8fe6 <SdioCard::writeStart(unsigned long)+0x6e>
    9022:	nop
    9024:	.word	0x00008f4d
    9028:	.word	0x200061b0
    902c:	.word	0x0d1a0000
    9030:	.word	0x000f4240
    9034:	.word	0x20008154
    9038:	.word	0x193a0020
    903c:	.word	0x20001a4e
    9040:	.word	0x20005c88
    9044:	.word	0x200063fc
    9048:	.word	0x402c0000

0000904c <SdioCard::cardCMD6(unsigned long, unsigned char*)>:
bool SdioCard::cardCMD6(uint32_t arg, uint8_t* status) {
    904c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9050:	mov	sl, r1
    9052:	mov	r9, r2
    9054:	ldr	r6, [pc, #144]	; (90e8 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x9c>)
  uint32_t m = micros();
    9056:	bl	b84c <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    905a:	ldr	r5, [pc, #144]	; (90ec <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xa0>)
  uint32_t m = micros();
    905c:	mov	r4, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    905e:	ldr.w	r8, [pc, #176]	; 9110 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xc4>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    9062:	ldr	r7, [pc, #140]	; (90f0 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xa4>)
  while (fcn()) {
    9064:	b.n	9070 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x24>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    9066:	bl	b84c <micros>
    906a:	subs	r0, r0, r4
    906c:	cmp	r0, r7
    906e:	bhi.n	90bc <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x70>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    9070:	ldr	r1, [r6, #0]
    9072:	mov	r0, r5
    9074:	bl	8db8 <cardCommand(unsigned long, unsigned long)>
    9078:	cmp	r0, #0
    907a:	beq.n	9066 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x1a>
    907c:	ldr.w	r3, [r8, #16]
  while (fcn()) {
    9080:	lsls	r3, r3, #23
    9082:	bpl.n	9066 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x1a>
  m_dmaBusy = true;
    9084:	ldr	r3, [pc, #108]	; (90f4 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xa8>)
    9086:	movs	r2, #1
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    9088:	mov	r1, sl
    908a:	ldr	r0, [pc, #108]	; (90f8 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xac>)
  m_dmaBusy = true;
    908c:	strb	r2, [r3, #0]
  m_irqstat = 0;
    908e:	movs	r2, #0
    9090:	ldr	r3, [pc, #104]	; (90fc <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xb0>)
    9092:	str	r2, [r3, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    9094:	ldr	r2, [pc, #104]	; (9100 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xb4>)
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    9096:	ldr	r3, [pc, #108]	; (9104 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xb8>)
  SDHC_DSADDR = (uint32_t)status;
    9098:	str.w	r9, [r8]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    909c:	str.w	r2, [r8, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    90a0:	str.w	r3, [r8, #56]	; 0x38
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    90a4:	bl	8db8 <cardCommand(unsigned long, unsigned long)>
    90a8:	cbnz	r0, 90d0 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x84>
  m_errorCode = code;
    90aa:	ldr	r1, [pc, #92]	; (9108 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xbc>)
    90ac:	movs	r4, #4
  m_errorLine = line;
    90ae:	ldr	r3, [pc, #92]	; (910c <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xc0>)
    90b0:	movw	r2, #795	; 0x31b
  m_errorCode = code;
    90b4:	strb	r4, [r1, #0]
  m_errorLine = line;
    90b6:	str	r2, [r3, #0]
}
    90b8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_errorCode = code;
    90bc:	ldr	r1, [pc, #72]	; (9108 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xbc>)
    90be:	movs	r4, #10
  m_errorLine = line;
    90c0:	ldr	r3, [pc, #72]	; (910c <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xc0>)
    90c2:	mov.w	r2, #788	; 0x314
    return sdError(SD_CARD_ERROR_CMD13);
    90c6:	movs	r0, #0
  m_errorCode = code;
    90c8:	strb	r4, [r1, #0]
  m_errorLine = line;
    90ca:	str	r2, [r3, #0]
}
    90cc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (!waitDmaStatus()) {
    90d0:	bl	8c14 <waitDmaStatus()>
    90d4:	cmp	r0, #0
    90d6:	bne.n	90cc <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x80>
  m_errorCode = code;
    90d8:	ldr	r1, [pc, #44]	; (9108 <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xbc>)
    90da:	movs	r4, #38	; 0x26
  m_errorLine = line;
    90dc:	ldr	r3, [pc, #44]	; (910c <SdioCard::cardCMD6(unsigned long, unsigned char*)+0xc0>)
    90de:	movw	r2, #798	; 0x31e
  m_errorCode = code;
    90e2:	strb	r4, [r1, #0]
  m_errorLine = line;
    90e4:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_DMA);
    90e6:	b.n	90cc <SdioCard::cardCMD6(unsigned long, unsigned char*)+0x80>
    90e8:	.word	0x200061b0
    90ec:	.word	0x0d1a0000
    90f0:	.word	0x000f4240
    90f4:	.word	0x20008156
    90f8:	.word	0x063a0011
    90fc:	.word	0x20006400
    9100:	.word	0x00010040
    9104:	.word	0x117f0002
    9108:	.word	0x20001a4e
    910c:	.word	0x20005c88
    9110:	.word	0x402c0000

00009114 <SdioCard::readStop()>:
bool SdioCard::readStop() { return transferStop(); }
    9114:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    9118:	ldr	r4, [pc, #148]	; (91b0 <SdioCard::readStop()+0x9c>)
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    911a:	movs	r1, #0
    911c:	ldr	r0, [pc, #148]	; (91b4 <SdioCard::readStop()+0xa0>)
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    911e:	ldr	r3, [r4, #40]	; 0x28
    9120:	bic.w	r3, r3, #65536	; 0x10000
    9124:	str	r3, [r4, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    9126:	bl	8db8 <cardCommand(unsigned long, unsigned long)>
    912a:	mov	r5, r0
    912c:	cbnz	r0, 9142 <SdioCard::readStop()+0x2e>
  m_errorCode = code;
    912e:	ldr	r1, [pc, #136]	; (91b8 <SdioCard::readStop()+0xa4>)
    9130:	movs	r0, #9
  m_errorLine = line;
    9132:	ldr	r3, [pc, #136]	; (91bc <SdioCard::readStop()+0xa8>)
    9134:	movw	r2, #621	; 0x26d
  m_errorCode = code;
    9138:	strb	r0, [r1, #0]
  m_errorLine = line;
    913a:	str	r2, [r3, #0]
bool SdioCard::readStop() { return transferStop(); }
    913c:	mov	r0, r5
    913e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_busyFcn = fcn;
    9142:	ldr	r3, [pc, #124]	; (91c0 <SdioCard::readStop()+0xac>)
    9144:	ldr.w	r8, [pc, #128]	; 91c8 <SdioCard::readStop()+0xb4>
    9148:	str.w	r3, [r8]
  uint32_t m = micros();
    914c:	bl	b84c <micros>
static bool isBusyDat() { return SDHC_PRSSTAT & (1 << 24) ? false : true; }
    9150:	ldr	r3, [r4, #36]	; 0x24
  uint32_t m = micros();
    9152:	mov	r6, r0
  while (fcn()) {
    9154:	lsls	r0, r3, #7
    9156:	bmi.n	918a <SdioCard::readStop()+0x76>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    9158:	ldr	r7, [pc, #104]	; (91c4 <SdioCard::readStop()+0xb0>)
    915a:	b.n	9166 <SdioCard::readStop()+0x52>
    yield();
    915c:	bl	c0b4 <yield>
static bool isBusyDat() { return SDHC_PRSSTAT & (1 << 24) ? false : true; }
    9160:	ldr	r3, [r4, #36]	; 0x24
  while (fcn()) {
    9162:	lsls	r1, r3, #7
    9164:	bmi.n	918a <SdioCard::readStop()+0x76>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    9166:	bl	b84c <micros>
    916a:	subs	r3, r0, r6
    916c:	cmp	r3, r7
    916e:	bls.n	915c <SdioCard::readStop()+0x48>
  m_errorCode = code;
    9170:	ldr	r2, [pc, #68]	; (91b8 <SdioCard::readStop()+0xa4>)
    9172:	movs	r1, #10
      m_busyFcn = 0;
    9174:	movs	r5, #0
  m_errorLine = line;
    9176:	ldr	r3, [pc, #68]	; (91bc <SdioCard::readStop()+0xa8>)
  m_errorCode = code;
    9178:	strb	r1, [r2, #0]
  m_errorLine = line;
    917a:	mov.w	r2, #624	; 0x270
bool SdioCard::readStop() { return transferStop(); }
    917e:	mov	r0, r5
      m_busyFcn = 0;
    9180:	str.w	r5, [r8]
  m_errorLine = line;
    9184:	str	r2, [r3, #0]
bool SdioCard::readStop() { return transferStop(); }
    9186:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_busyFcn = 0;
    918a:	movs	r2, #0
  if (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB) {
    918c:	ldr	r3, [pc, #32]	; (91b0 <SdioCard::readStop()+0x9c>)
  m_busyFcn = 0;
    918e:	str.w	r2, [r8]
  if (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB) {
    9192:	ldr	r2, [r3, #36]	; 0x24
    9194:	lsls	r2, r2, #30
    9196:	bpl.n	913c <SdioCard::readStop()+0x28>
    uint32_t irqsststen = SDHC_IRQSTATEN;
    9198:	ldr	r0, [r3, #52]	; 0x34
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    919a:	ldr	r2, [r3, #40]	; 0x28
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    919c:	ldr	r1, [r3, #44]	; 0x2c
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    919e:	bic.w	r2, r2, #65536	; 0x10000
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    91a2:	orr.w	r1, r1, #67108864	; 0x4000000
    91a6:	str	r1, [r3, #44]	; 0x2c
    SDHC_IRQSTATEN = irqsststen;
    91a8:	str	r0, [r3, #52]	; 0x34
    SDHC_PROCTL = proctl;
    91aa:	str	r2, [r3, #40]	; 0x28
    91ac:	b.n	913c <SdioCard::readStop()+0x28>
    91ae:	nop
    91b0:	.word	0x402c0000
    91b4:	.word	0x0cdb0000
    91b8:	.word	0x20001a4e
    91bc:	.word	0x20005c88
    91c0:	.word	0x000089e1
    91c4:	.word	0x000f4240
    91c8:	.word	0x200063fc

000091cc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>:
                        size_t n) {
    91cc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    91d0:	mov	r4, r2
  if ((3 & (uint32_t)buf) || n == 0) {
    91d2:	ands.w	r2, r2, #3
                        size_t n) {
    91d6:	sub	sp, #12
  if ((3 & (uint32_t)buf) || n == 0) {
    91d8:	it	ne
    91da:	movne	r2, #1
    91dc:	str	r3, [sp, #4]
    91de:	cmp	r3, #0
    91e0:	it	eq
    91e2:	orreq.w	r2, r2, #1
    91e6:	cbz	r2, 91fe <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x32>
  m_errorCode = code;
    91e8:	ldr	r1, [pc, #184]	; (92a4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xd8>)
    91ea:	movs	r0, #38	; 0x26
  m_errorLine = line;
    91ec:	ldr	r3, [pc, #184]	; (92a8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xdc>)
    91ee:	movw	r2, #547	; 0x223
  m_errorCode = code;
    91f2:	strb	r0, [r1, #0]
  m_errorLine = line;
    91f4:	str	r2, [r3, #0]
}
    91f6:	movs	r0, #0
    91f8:	add	sp, #12
    91fa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  m_busyFcn = fcn;
    91fe:	ldr	r3, [pc, #172]	; (92ac <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xe0>)
    9200:	mov	r6, r0
    9202:	ldr	r2, [pc, #172]	; (92b0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xe4>)
    9204:	mov	r5, r1
    9206:	ldr.w	r9, [pc, #192]	; 92c8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xfc>
    920a:	str	r3, [r2, #0]
  uint32_t m = micros();
    920c:	bl	b84c <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    9210:	ldr.w	r8, [pc, #184]	; 92cc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x100>
  uint32_t m = micros();
    9214:	mov	r7, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    9216:	ldr.w	fp, [pc, #184]	; 92d0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x104>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    921a:	ldr.w	sl, [pc, #184]	; 92d4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x108>
  while (fcn()) {
    921e:	b.n	922e <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x62>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    9220:	bl	b84c <micros>
    9224:	subs	r0, r0, r7
    9226:	cmp	r0, sl
    9228:	bhi.n	928a <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xbe>
    yield();
    922a:	bl	c0b4 <yield>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    922e:	ldr.w	r1, [r9]
    9232:	mov	r0, r8
    9234:	bl	8db8 <cardCommand(unsigned long, unsigned long)>
    9238:	cmp	r0, #0
    923a:	beq.n	9220 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x54>
    923c:	ldr.w	r3, [fp, #16]
  while (fcn()) {
    9240:	lsls	r3, r3, #23
    9242:	bpl.n	9220 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x54>
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    9244:	ldr	r2, [sp, #4]
  m_dmaBusy = true;
    9246:	movs	r0, #1
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    9248:	ldr	r3, [pc, #104]	; (92b4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xe8>)
  m_busyFcn = 0;
    924a:	ldr	r1, [pc, #100]	; (92b0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xe4>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    924c:	and.w	r3, r3, r2, lsl #16
  m_busyFcn = 0;
    9250:	movs	r2, #0
    9252:	str	r2, [r1, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    9254:	orr.w	r3, r3, #512	; 0x200
  m_dmaBusy = true;
    9258:	ldr	r1, [pc, #92]	; (92b8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xec>)
    925a:	strb	r0, [r1, #0]
  m_irqstat = 0;
    925c:	ldr	r1, [pc, #92]	; (92bc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xf0>)
    925e:	str	r2, [r1, #0]
  SDHC_DSADDR = (uint32_t)buf;
    9260:	str.w	r4, [fp]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    9264:	str.w	r3, [fp, #4]
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512 * sector)) {
    9268:	ldr	r3, [pc, #84]	; (92c0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xf4>)
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    926a:	ldr	r2, [pc, #88]	; (92c4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xf8>)
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512 * sector)) {
    926c:	ldrb	r3, [r3, #0]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    926e:	str.w	r2, [fp, #56]	; 0x38
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512 * sector)) {
    9272:	cbz	r3, 92a0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xd4>
    9274:	mov	r1, r5
    9276:	mov	r0, r6
    9278:	bl	8db8 <cardCommand(unsigned long, unsigned long)>
    927c:	cmp	r0, #0
    927e:	beq.n	91f6 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2a>
}
    9280:	add	sp, #12
    9282:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  return waitDmaStatus();
    9286:	b.w	8c14 <waitDmaStatus()>
  m_errorCode = code;
    928a:	ldr	r2, [pc, #24]	; (92a4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xd8>)
    928c:	movs	r1, #10
      m_busyFcn = 0;
    928e:	movs	r0, #0
  m_errorLine = line;
    9290:	ldr	r3, [pc, #20]	; (92a8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xdc>)
      m_busyFcn = 0;
    9292:	ldr	r4, [pc, #28]	; (92b0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xe4>)
  m_errorCode = code;
    9294:	strb	r1, [r2, #0]
  m_errorLine = line;
    9296:	movw	r2, #550	; 0x226
      m_busyFcn = 0;
    929a:	str	r0, [r4, #0]
  m_errorLine = line;
    929c:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD13);
    929e:	b.n	91f6 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2a>
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512 * sector)) {
    92a0:	lsls	r5, r5, #9
    92a2:	b.n	9274 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xa8>
    92a4:	.word	0x20001a4e
    92a8:	.word	0x20005c88
    92ac:	.word	0x00008f4d
    92b0:	.word	0x200063fc
    92b4:	.word	0x1fff0000
    92b8:	.word	0x20008156
    92bc:	.word	0x20006400
    92c0:	.word	0x20008154
    92c4:	.word	0x117f0002
    92c8:	.word	0x200061b0
    92cc:	.word	0x0d1a0000
    92d0:	.word	0x402c0000
    92d4:	.word	0x000f4240

000092d8 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    92d8:	push	{r3, r4, r5, r6, r7, lr}
    92da:	mov	r6, r0
    92dc:	ldrb	r0, [r0, #8]
    92de:	mov	r4, r1
    92e0:	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    92e2:	lsls	r0, r0, #31
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    92e4:	mov	r7, r3
  if (m_sdioConfig.useDma()) {
    92e6:	bmi.n	9310 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x38>
    for (size_t i = 0; i < n; i++) {
    92e8:	cbz	r3, 930c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    92ea:	add	r7, r1
    92ec:	b.n	92f2 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x1a>
    92ee:	cmp	r4, r7
    92f0:	beq.n	930c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
      if (!readSector(sector + i, dst + i * 512UL)) {
    92f2:	ldr	r3, [r6, #0]
    92f4:	mov	r2, r5
    92f6:	mov	r1, r4
    92f8:	mov	r0, r6
    92fa:	ldr	r3, [r3, #16]
    for (size_t i = 0; i < n; i++) {
    92fc:	adds	r4, #1
    92fe:	add.w	r5, r5, #512	; 0x200
      if (!readSector(sector + i, dst + i * 512UL)) {
    9302:	blx	r3
    9304:	cmp	r0, #0
    9306:	bne.n	92ee <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x16>
          return false;  // readSector will set errorCode.
    9308:	movs	r0, #0
}
    930a:	pop	{r3, r4, r5, r6, r7, pc}
  return true;
    930c:	movs	r0, #1
}
    930e:	pop	{r3, r4, r5, r6, r7, pc}
    if ((uint32_t)dst & 3) {
    9310:	lsls	r0, r2, #30
    9312:	beq.n	933a <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x62>
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    9314:	cmp	r3, #0
    9316:	beq.n	930c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    9318:	add	r7, r1
    931a:	b.n	9320 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x48>
    931c:	cmp	r4, r7
    931e:	beq.n	930c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
        if (!readSector(sector, dst)) {
    9320:	ldr	r3, [r6, #0]
    9322:	mov	r2, r5
    9324:	mov	r1, r4
    9326:	mov	r0, r6
    9328:	ldr	r3, [r3, #16]
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    932a:	adds	r4, #1
    932c:	add.w	r5, r5, #512	; 0x200
        if (!readSector(sector, dst)) {
    9330:	blx	r3
    9332:	cmp	r0, #0
    9334:	bne.n	931c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x44>
          return false;  // readSector will set errorCode.
    9336:	movs	r0, #0
    9338:	b.n	930a <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x32>
    if (!rdWrSectors(CMD18_DMA_XFERTYP, sector, dst, n)) {
    933a:	ldr	r0, [pc, #24]	; (9354 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x7c>)
    933c:	bl	91cc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    9340:	cmp	r0, #0
    9342:	bne.n	930c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
  m_errorCode = code;
    9344:	ldr	r1, [pc, #16]	; (9358 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x80>)
    9346:	movs	r4, #12
  m_errorLine = line;
    9348:	ldr	r3, [pc, #16]	; (935c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x84>)
    934a:	movw	r2, #974	; 0x3ce
  m_errorCode = code;
    934e:	strb	r4, [r1, #0]
  m_errorLine = line;
    9350:	str	r2, [r3, #0]
}
    9352:	pop	{r3, r4, r5, r6, r7, pc}
    9354:	.word	0x123a0037
    9358:	.word	0x20001a4e
    935c:	.word	0x20005c88

00009360 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    9360:	push	{r3, r4, r5, r6, r7, lr}
    9362:	mov	r6, r0
    9364:	ldrb	r0, [r0, #8]
    9366:	mov	r4, r1
    9368:	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    936a:	lsls	r0, r0, #31
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    936c:	mov	r7, r3
  if (m_sdioConfig.useDma()) {
    936e:	bmi.n	9398 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x38>
    for (size_t i = 0; i < n; i++) {
    9370:	cbz	r3, 9394 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    9372:	add	r7, r1
    9374:	b.n	937a <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x1a>
    9376:	cmp	r4, r7
    9378:	beq.n	9394 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
      if (!writeSector(sector + i, src + i * 512UL)) {
    937a:	ldr	r3, [r6, #0]
    937c:	mov	r2, r5
    937e:	mov	r1, r4
    9380:	mov	r0, r6
    9382:	ldr	r3, [r3, #32]
    for (size_t i = 0; i < n; i++) {
    9384:	adds	r4, #1
    9386:	add.w	r5, r5, #512	; 0x200
      if (!writeSector(sector + i, src + i * 512UL)) {
    938a:	blx	r3
    938c:	cmp	r0, #0
    938e:	bne.n	9376 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x16>
          return false;  // writeSector will set errorCode.
    9390:	movs	r0, #0
}
    9392:	pop	{r3, r4, r5, r6, r7, pc}
  return true;
    9394:	movs	r0, #1
}
    9396:	pop	{r3, r4, r5, r6, r7, pc}
    if (3 & (uint32_t)ptr) {
    9398:	lsls	r0, r2, #30
    939a:	beq.n	93c2 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x62>
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    939c:	cmp	r3, #0
    939e:	beq.n	9394 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    93a0:	add	r7, r1
    93a2:	b.n	93a8 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x48>
    93a4:	cmp	r4, r7
    93a6:	beq.n	9394 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
        if (!writeSector(sector, ptr)) {
    93a8:	ldr	r3, [r6, #0]
    93aa:	mov	r2, r5
    93ac:	mov	r1, r4
    93ae:	mov	r0, r6
    93b0:	ldr	r3, [r3, #32]
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    93b2:	adds	r4, #1
    93b4:	add.w	r5, r5, #512	; 0x200
        if (!writeSector(sector, ptr)) {
    93b8:	blx	r3
    93ba:	cmp	r0, #0
    93bc:	bne.n	93a4 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x44>
          return false;  // writeSector will set errorCode.
    93be:	movs	r0, #0
    93c0:	b.n	9392 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x32>
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
    93c2:	ldr	r0, [pc, #24]	; (93dc <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x7c>)
    93c4:	bl	91cc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    93c8:	cmp	r0, #0
    93ca:	bne.n	9394 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
  m_errorCode = code;
    93cc:	ldr	r1, [pc, #16]	; (93e0 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x80>)
    93ce:	movs	r4, #14
  m_errorLine = line;
    93d0:	ldr	r3, [pc, #16]	; (93e4 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x84>)
    93d2:	movw	r2, #1124	; 0x464
  m_errorCode = code;
    93d6:	strb	r4, [r1, #0]
  m_errorLine = line;
    93d8:	str	r2, [r3, #0]
}
    93da:	pop	{r3, r4, r5, r6, r7, pc}
    93dc:	.word	0x193a0027
    93e0:	.word	0x20001a4e
    93e4:	.word	0x20005c88

000093e8 <SdioCard::begin(SdioConfig)>:
  m_curState = IDLE_STATE;
    93e8:	movs	r2, #0
  m_initDone = false;
    93ea:	ldr	r3, [pc, #708]	; (96b0 <SdioCard::begin(SdioConfig)+0x2c8>)
bool SdioCard::begin(SdioConfig sdioConfig) {
    93ec:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  m_initDone = false;
    93f0:	strb	r2, [r3, #0]
bool SdioCard::begin(SdioConfig sdioConfig) {
    93f2:	mov	r6, r0
  CCM_ANALOG_PFD_528 |= (1 << 7);
    93f4:	ldr	r3, [pc, #700]	; (96b4 <SdioCard::begin(SdioConfig)+0x2cc>)
bool SdioCard::begin(SdioConfig sdioConfig) {
    93f6:	sub	sp, #76	; 0x4c
  m_errorCode = SD_CARD_ERROR_NONE;
    93f8:	ldr	r4, [pc, #700]	; (96b8 <SdioCard::begin(SdioConfig)+0x2d0>)
  m_highCapacity = false;
    93fa:	ldr.w	sl, [pc, #788]	; 9710 <SdioCard::begin(SdioConfig)+0x328>
  m_version2 = false;
    93fe:	ldr	r7, [pc, #700]	; (96bc <SdioCard::begin(SdioConfig)+0x2d4>)
  m_errorCode = SD_CARD_ERROR_NONE;
    9400:	strb	r2, [r4, #0]
  m_curState = IDLE_STATE;
    9402:	strb	r2, [r0, #9]
  m_highCapacity = false;
    9404:	strb.w	r2, [sl]
  m_version2 = false;
    9408:	strb	r2, [r7, #0]
  CCM_ANALOG_PFD_528 |= (1 << 7);
    940a:	ldr.w	r2, [r3, #256]	; 0x100
  m_sdioConfig = sdioConfig;
    940e:	strb	r1, [r0, #8]
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    9410:	movs	r1, #5
  CCM_ANALOG_PFD_528 |= (1 << 7);
    9412:	orr.w	r2, r2, #128	; 0x80
  SDHC_MIX_CTRL |= 0x80000000;
    9416:	ldr.w	r8, [pc, #704]	; 96d8 <SdioCard::begin(SdioConfig)+0x2f0>
  CCM_ANALOG_PFD_528 |= (1 << 7);
    941a:	str.w	r2, [r3, #256]	; 0x100
  CCM_ANALOG_PFD_528 &= ~(0x3F << 0);
    941e:	ldr.w	r2, [r3, #256]	; 0x100
    9422:	bic.w	r2, r2, #63	; 0x3f
    9426:	str.w	r2, [r3, #256]	; 0x100
  CCM_ANALOG_PFD_528 |= ((24) & 0x3F << 0);  // 12 - 35
    942a:	ldr.w	r2, [r3, #256]	; 0x100
    942e:	orr.w	r2, r2, #24
    9432:	str.w	r2, [r3, #256]	; 0x100
  CCM_ANALOG_PFD_528 &= ~(1 << 7);
    9436:	ldr.w	r2, [r3, #256]	; 0x100
    943a:	bic.w	r2, r2, #128	; 0x80
    943e:	str.w	r2, [r3, #256]	; 0x100
  CCM_CCGR6 |= CCM_CCGR6_USDHC1(CCM_CCGR_ON);
    9442:	add.w	r3, r3, #147456	; 0x24000
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    9446:	ldr	r2, [pc, #632]	; (96c0 <SdioCard::begin(SdioConfig)+0x2d8>)
  CCM_CCGR6 |= CCM_CCGR6_USDHC1(CCM_CCGR_ON);
    9448:	ldr.w	r0, [r3, #128]	; 0x80
    944c:	orr.w	r0, r0, #12
    9450:	str.w	r0, [r3, #128]	; 0x80
  CCM_CSCDR1 &= ~(CCM_CSCDR1_USDHC1_CLK_PODF_MASK);
    9454:	ldr	r0, [r3, #36]	; 0x24
    9456:	bic.w	r0, r0, #14336	; 0x3800
    945a:	str	r0, [r3, #36]	; 0x24
  CCM_CSCMR1 |= CCM_CSCMR1_USDHC1_CLK_SEL;  // PLL2PFD0
    945c:	ldr	r0, [r3, #28]
    945e:	orr.w	r0, r0, #65536	; 0x10000
    9462:	str	r0, [r3, #28]
  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((1));
    9464:	ldr	r0, [r3, #36]	; 0x24
    9466:	orr.w	r0, r0, #2048	; 0x800
    946a:	str	r0, [r3, #36]	; 0x24
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    946c:	str.w	r1, [r2, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    9470:	str.w	r1, [r2, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    9474:	str.w	r1, [r2, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    9478:	str.w	r1, [r2, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    947c:	str.w	r1, [r2, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    9480:	str.w	r1, [r2, #456]	; 0x1c8
  SDHC_MIX_CTRL |= 0x80000000;
    9484:	ldr.w	r2, [r8, #72]	; 0x48
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    9488:	ldr	r3, [pc, #568]	; (96c4 <SdioCard::begin(SdioConfig)+0x2dc>)
  SDHC_MIX_CTRL |= 0x80000000;
    948a:	orr.w	r2, r2, #2147483648	; 0x80000000
    948e:	str.w	r2, [r8, #72]	; 0x48
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    9492:	ldr.w	r2, [r8, #44]	; 0x2c
    9496:	orrs	r3, r2
    9498:	str.w	r3, [r8, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) {
    949c:	ldr.w	r5, [r8, #44]	; 0x2c
    94a0:	ands.w	r5, r5, #16777216	; 0x1000000
    94a4:	bne.n	949c <SdioCard::begin(SdioConfig)+0xb4>
  setSdclk(SD_MAX_INIT_RATE_KHZ);
    94a6:	mov.w	r0, #400	; 0x190
    94aa:	bl	8a00 <setSdclk(unsigned long)>
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    94ae:	ldr	r3, [pc, #528]	; (96c0 <SdioCard::begin(SdioConfig)+0x2d8>)
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    94b0:	movw	r2, #28856	; 0x70b8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    94b4:	movw	r1, #4280	; 0x10b8
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    94b8:	str.w	r5, [r3, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    94bc:	str.w	r5, [r3, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    94c0:	str.w	r5, [r3, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    94c4:	str.w	r5, [r3, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    94c8:	str.w	r5, [r3, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    94cc:	str.w	r5, [r3, #456]	; 0x1c8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    94d0:	str.w	r2, [r3, #956]	; 0x3bc
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;   // DAT3
    94d4:	str.w	r2, [r3, #960]	; 0x3c0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;   // CMD
    94d8:	str.w	r2, [r3, #940]	; 0x3ac
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    94dc:	str.w	r1, [r3, #944]	; 0x3b0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02 = DATA_MASK;   // DAT0
    94e0:	str.w	r2, [r3, #948]	; 0x3b4
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;   // DAT1
    94e4:	str.w	r2, [r3, #952]	; 0x3b8
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    94e8:	ldr	r3, [pc, #476]	; (96c8 <SdioCard::begin(SdioConfig)+0x2e0>)
    94ea:	ldr	r2, [pc, #480]	; (96cc <SdioCard::begin(SdioConfig)+0x2e4>)
    94ec:	str.w	r3, [r8, #52]	; 0x34
    94f0:	ldr	r3, [pc, #476]	; (96d0 <SdioCard::begin(SdioConfig)+0x2e8>)
    94f2:	str.w	r2, [r3, #504]	; 0x1f8
  NVIC_SET_PRIORITY(IRQ_SDHC, 6 * 16);
    94f6:	ldr	r3, [pc, #476]	; (96d4 <SdioCard::begin(SdioConfig)+0x2ec>)
    94f8:	movs	r2, #96	; 0x60
    94fa:	strb.w	r2, [r3, #110]	; 0x6e
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    94fe:	mov.w	r3, #3758153728	; 0xe000e000
    9502:	mov.w	r2, #16384	; 0x4000
    9506:	str.w	r2, [r3, #268]	; 0x10c
  SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    950a:	ldr.w	r3, [r8, #44]	; 0x2c
    950e:	orr.w	r3, r3, #134217728	; 0x8000000
    9512:	str.w	r3, [r8, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
    9516:	ldr	r3, [pc, #448]	; (96d8 <SdioCard::begin(SdioConfig)+0x2f0>)
    9518:	ldr	r1, [r3, #44]	; 0x2c
    951a:	ands.w	r1, r1, #134217728	; 0x8000000
    951e:	bne.n	9518 <SdioCard::begin(SdioConfig)+0x130>
  if (!cardCommand(CMD0_XFERTYP, 0)) {
    9520:	mov	r0, r1
    9522:	bl	8db8 <cardCommand(unsigned long, unsigned long)>
    9526:	mov	fp, r0
    9528:	cbnz	r0, 953e <SdioCard::begin(SdioConfig)+0x156>
  m_errorCode = code;
    952a:	movs	r1, #1
  m_errorLine = line;
    952c:	ldr	r3, [pc, #428]	; (96dc <SdioCard::begin(SdioConfig)+0x2f4>)
    952e:	movw	r2, #702	; 0x2be
  m_errorCode = code;
    9532:	strb	r1, [r4, #0]
  m_errorLine = line;
    9534:	str	r2, [r3, #0]
}
    9536:	mov	r0, fp
    9538:	add	sp, #76	; 0x4c
    953a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    953e:	mov.w	r8, #3
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
    9542:	ldr.w	r9, [pc, #464]	; 9714 <SdioCard::begin(SdioConfig)+0x32c>
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTA;
    9546:	ldr	r5, [pc, #400]	; (96d8 <SdioCard::begin(SdioConfig)+0x2f0>)
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
    9548:	mov.w	r1, #426	; 0x1aa
    954c:	mov	r0, r9
    954e:	bl	8db8 <cardCommand(unsigned long, unsigned long)>
    9552:	cmp	r0, #0
    9554:	bne.n	95f4 <SdioCard::begin(SdioConfig)+0x20c>
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTA;
    9556:	ldr	r3, [r5, #44]	; 0x2c
    9558:	orr.w	r3, r3, #16777216	; 0x1000000
    955c:	str	r3, [r5, #44]	; 0x2c
    while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) {
    955e:	ldr	r3, [r5, #44]	; 0x2c
    9560:	lsls	r3, r3, #7
    9562:	bmi.n	955e <SdioCard::begin(SdioConfig)+0x176>
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    9564:	subs.w	r8, r8, #1
    9568:	bne.n	9548 <SdioCard::begin(SdioConfig)+0x160>
  arg = m_version2 ? 0X40300000 : 0x00300000;
    956a:	ldrb	r3, [r7, #0]
    956c:	cmp	r3, #0
    956e:	ldr	r3, [pc, #368]	; (96e0 <SdioCard::begin(SdioConfig)+0x2f8>)
    9570:	ite	eq
    9572:	moveq.w	r9, #3145728	; 0x300000
    9576:	movne	r9, r3
  int m = micros();
    9578:	bl	b84c <micros>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    957c:	ldr	r7, [pc, #356]	; (96e4 <SdioCard::begin(SdioConfig)+0x2fc>)
  int m = micros();
    957e:	mov	r5, r0
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    9580:	ldr.w	fp, [pc, #404]	; 9718 <SdioCard::begin(SdioConfig)+0x330>
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    9584:	ldr.w	r8, [pc, #404]	; 971c <SdioCard::begin(SdioConfig)+0x334>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    9588:	movs	r1, #0
    958a:	mov	r0, r7
    958c:	bl	8db8 <cardCommand(unsigned long, unsigned long)>
    9590:	cbnz	r0, 95aa <SdioCard::begin(SdioConfig)+0x1c2>
      return sdError(SD_CARD_ERROR_ACMD41);
    9592:	mov.w	fp, #0
  m_errorCode = code;
    9596:	movs	r1, #23
  m_errorLine = line;
    9598:	ldr	r3, [pc, #320]	; (96dc <SdioCard::begin(SdioConfig)+0x2f4>)
    959a:	movw	r2, #723	; 0x2d3
}
    959e:	mov	r0, fp
  m_errorCode = code;
    95a0:	strb	r1, [r4, #0]
  m_errorLine = line;
    95a2:	str	r2, [r3, #0]
}
    95a4:	add	sp, #76	; 0x4c
    95a6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    95aa:	mov	r1, r9
    95ac:	mov	r0, fp
    95ae:	bl	8db8 <cardCommand(unsigned long, unsigned long)>
    95b2:	cmp	r0, #0
    95b4:	beq.n	9592 <SdioCard::begin(SdioConfig)+0x1aa>
        ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
    95b6:	bl	b84c <micros>
    95ba:	subs	r0, r0, r5
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    95bc:	ldr	r3, [pc, #280]	; (96d8 <SdioCard::begin(SdioConfig)+0x2f0>)
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    95be:	cmp	r0, r8
    95c0:	bhi.n	9592 <SdioCard::begin(SdioConfig)+0x1aa>
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    95c2:	ldr	r2, [r3, #16]
    95c4:	cmp	r2, #0
    95c6:	bge.n	9588 <SdioCard::begin(SdioConfig)+0x1a0>
  m_ocr = SDHC_CMDRSP0;
    95c8:	ldr	r1, [r3, #16]
    95ca:	ldr	r2, [pc, #284]	; (96e8 <SdioCard::begin(SdioConfig)+0x300>)
    95cc:	str	r1, [r2, #0]
  if (SDHC_CMDRSP0 & 0x40000000) {
    95ce:	ldr	r3, [r3, #16]
    95d0:	lsls	r5, r3, #1
    95d2:	bpl.n	95da <SdioCard::begin(SdioConfig)+0x1f2>
    m_highCapacity = true;
    95d4:	movs	r3, #1
    95d6:	strb.w	r3, [sl]
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    95da:	movs	r1, #0
    95dc:	ldr	r0, [pc, #268]	; (96ec <SdioCard::begin(SdioConfig)+0x304>)
    95de:	bl	8db8 <cardCommand(unsigned long, unsigned long)>
    95e2:	mov	fp, r0
    95e4:	cbnz	r0, 961a <SdioCard::begin(SdioConfig)+0x232>
  m_errorCode = code;
    95e6:	movs	r1, #2
  m_errorLine = line;
    95e8:	ldr	r3, [pc, #240]	; (96dc <SdioCard::begin(SdioConfig)+0x2f4>)
    95ea:	mov.w	r2, #732	; 0x2dc
  m_errorCode = code;
    95ee:	strb	r1, [r4, #0]
  m_errorLine = line;
    95f0:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD2);
    95f2:	b.n	9536 <SdioCard::begin(SdioConfig)+0x14e>
      if (SDHC_CMDRSP0 != 0X1AA) {
    95f4:	ldr	r3, [pc, #224]	; (96d8 <SdioCard::begin(SdioConfig)+0x2f0>)
    95f6:	ldr	r3, [r3, #16]
    95f8:	cmp.w	r3, #426	; 0x1aa
    95fc:	beq.n	9610 <SdioCard::begin(SdioConfig)+0x228>
  m_errorCode = code;
    95fe:	movs	r1, #6
  m_errorLine = line;
    9600:	ldr	r3, [pc, #216]	; (96dc <SdioCard::begin(SdioConfig)+0x2f4>)
    9602:	mov.w	r2, #708	; 0x2c4
        return sdError(SD_CARD_ERROR_CMD8);
    9606:	mov.w	fp, #0
  m_errorCode = code;
    960a:	strb	r1, [r4, #0]
  m_errorLine = line;
    960c:	str	r2, [r3, #0]
        return sdError(SD_CARD_ERROR_CMD8);
    960e:	b.n	9536 <SdioCard::begin(SdioConfig)+0x14e>
      m_version2 = true;
    9610:	movs	r3, #1
  arg = m_version2 ? 0X40300000 : 0x00300000;
    9612:	ldr.w	r9, [pc, #204]	; 96e0 <SdioCard::begin(SdioConfig)+0x2f8>
      m_version2 = true;
    9616:	strb	r3, [r7, #0]
  arg = m_version2 ? 0X40300000 : 0x00300000;
    9618:	b.n	9578 <SdioCard::begin(SdioConfig)+0x190>
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    961a:	movs	r1, #0
    961c:	ldr	r0, [pc, #208]	; (96f0 <SdioCard::begin(SdioConfig)+0x308>)
    961e:	bl	8db8 <cardCommand(unsigned long, unsigned long)>
    9622:	mov	fp, r0
    9624:	cbnz	r0, 9634 <SdioCard::begin(SdioConfig)+0x24c>
  m_errorCode = code;
    9626:	movs	r1, #3
  m_errorLine = line;
    9628:	ldr	r3, [pc, #176]	; (96dc <SdioCard::begin(SdioConfig)+0x2f4>)
    962a:	movw	r2, #735	; 0x2df
  m_errorCode = code;
    962e:	strb	r1, [r4, #0]
  m_errorLine = line;
    9630:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD3);
    9632:	b.n	9536 <SdioCard::begin(SdioConfig)+0x14e>
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    9634:	ldr.w	sl, [pc, #160]	; 96d8 <SdioCard::begin(SdioConfig)+0x2f0>
    9638:	ldr	r3, [pc, #184]	; (96f4 <SdioCard::begin(SdioConfig)+0x30c>)
    963a:	ldr.w	r2, [sl, #16]
    963e:	ldr	r5, [pc, #184]	; (96f8 <SdioCard::begin(SdioConfig)+0x310>)
    9640:	ands	r3, r2
  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    9642:	ldr	r1, [pc, #184]	; (96fc <SdioCard::begin(SdioConfig)+0x314>)
    9644:	ldr	r0, [pc, #184]	; (9700 <SdioCard::begin(SdioConfig)+0x318>)
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    9646:	str	r3, [r5, #0]
  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    9648:	bl	8e50 <readReg16(unsigned long, void*)>
    964c:	mov	fp, r0
    964e:	cbnz	r0, 965e <SdioCard::begin(SdioConfig)+0x276>
  m_errorCode = code;
    9650:	movs	r1, #7
  m_errorLine = line;
    9652:	ldr	r3, [pc, #136]	; (96dc <SdioCard::begin(SdioConfig)+0x2f4>)
    9654:	mov.w	r2, #740	; 0x2e4
  m_errorCode = code;
    9658:	strb	r1, [r4, #0]
  m_errorLine = line;
    965a:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD9);
    965c:	b.n	9536 <SdioCard::begin(SdioConfig)+0x14e>
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    965e:	ldr	r1, [pc, #164]	; (9704 <SdioCard::begin(SdioConfig)+0x31c>)
    9660:	ldr	r0, [pc, #164]	; (9708 <SdioCard::begin(SdioConfig)+0x320>)
    9662:	bl	8e50 <readReg16(unsigned long, void*)>
    9666:	mov	fp, r0
    9668:	cbnz	r0, 9678 <SdioCard::begin(SdioConfig)+0x290>
  m_errorCode = code;
    966a:	movs	r1, #8
  m_errorLine = line;
    966c:	ldr	r3, [pc, #108]	; (96dc <SdioCard::begin(SdioConfig)+0x2f4>)
    966e:	movw	r2, #743	; 0x2e7
  m_errorCode = code;
    9672:	strb	r1, [r4, #0]
  m_errorLine = line;
    9674:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD10);
    9676:	b.n	9536 <SdioCard::begin(SdioConfig)+0x14e>
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    9678:	ldr	r1, [r5, #0]
    967a:	ldr	r0, [pc, #144]	; (970c <SdioCard::begin(SdioConfig)+0x324>)
    967c:	bl	8db8 <cardCommand(unsigned long, unsigned long)>
    9680:	mov	fp, r0
    9682:	cbnz	r0, 9692 <SdioCard::begin(SdioConfig)+0x2aa>
  m_errorCode = code;
    9684:	movs	r1, #5
  m_errorLine = line;
    9686:	ldr	r3, [pc, #84]	; (96dc <SdioCard::begin(SdioConfig)+0x2f4>)
    9688:	movw	r2, #746	; 0x2ea
  m_errorCode = code;
    968c:	strb	r1, [r4, #0]
  m_errorLine = line;
    968e:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD7);
    9690:	b.n	9536 <SdioCard::begin(SdioConfig)+0x14e>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    9692:	ldr	r1, [r5, #0]
    9694:	ldr	r0, [pc, #76]	; (96e4 <SdioCard::begin(SdioConfig)+0x2fc>)
    9696:	bl	8db8 <cardCommand(unsigned long, unsigned long)>
    969a:	cmp	r0, #0
    969c:	bne.n	9720 <SdioCard::begin(SdioConfig)+0x338>
  m_errorCode = code;
    969e:	movs	r1, #20
  m_errorLine = line;
    96a0:	ldr	r3, [pc, #56]	; (96dc <SdioCard::begin(SdioConfig)+0x2f4>)
    96a2:	movw	r2, #750	; 0x2ee
    return sdError(SD_CARD_ERROR_ACMD6);
    96a6:	mov.w	fp, #0
  m_errorCode = code;
    96aa:	strb	r1, [r4, #0]
  m_errorLine = line;
    96ac:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_ACMD6);
    96ae:	b.n	9536 <SdioCard::begin(SdioConfig)+0x14e>
    96b0:	.word	0x20008152
    96b4:	.word	0x400d8000
    96b8:	.word	0x20001a4e
    96bc:	.word	0x20008153
    96c0:	.word	0x401f8000
    96c4:	.word	0x01008000
    96c8:	.word	0x117f000b
    96cc:	.word	0x000089b1
    96d0:	.word	0x20001c00
    96d4:	.word	0xe000e400
    96d8:	.word	0x402c0000
    96dc:	.word	0x20005c88
    96e0:	.word	0x40300000
    96e4:	.word	0x371a0000
    96e8:	.word	0x200061ac
    96ec:	.word	0x02090000
    96f0:	.word	0x031a0000
    96f4:	.word	0xffff0000
    96f8:	.word	0x200061b0
    96fc:	.word	0x2000619c
    9700:	.word	0x09090000
    9704:	.word	0x2000618c
    9708:	.word	0x0a090000
    970c:	.word	0x071b0000
    9710:	.word	0x20008154
    9714:	.word	0x081a0000
    9718:	.word	0x29020000
    971c:	.word	0x000f4240
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    9720:	movs	r1, #2
    9722:	ldr	r0, [pc, #536]	; (993c <SdioCard::begin(SdioConfig)+0x554>)
    9724:	bl	8db8 <cardCommand(unsigned long, unsigned long)>
    9728:	cmp	r0, #0
    972a:	beq.n	969e <SdioCard::begin(SdioConfig)+0x2b6>
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    972c:	ldr.w	r3, [sl, #40]	; 0x28
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    9730:	ldr.w	r9, [pc, #576]	; 9974 <SdioCard::begin(SdioConfig)+0x58c>
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    9734:	bic.w	r3, r3, #6
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    9738:	ldr.w	r8, [pc, #540]	; 9958 <SdioCard::begin(SdioConfig)+0x570>
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    973c:	str.w	r3, [sl, #40]	; 0x28
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);
    9740:	ldr.w	r3, [sl, #40]	; 0x28
    9744:	orr.w	r3, r3, #2
    9748:	str.w	r3, [sl, #40]	; 0x28
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
    974c:	mov.w	r3, #1048592	; 0x100010
    9750:	str.w	r3, [sl, #68]	; 0x44
  uint32_t m = micros();
    9754:	bl	b84c <micros>
    9758:	mov	r7, r0
  while (fcn()) {
    975a:	b.n	9766 <SdioCard::begin(SdioConfig)+0x37e>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    975c:	bl	b84c <micros>
    9760:	subs	r0, r0, r7
    9762:	cmp	r0, r8
    9764:	bhi.n	97be <SdioCard::begin(SdioConfig)+0x3d6>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    9766:	ldr	r1, [r5, #0]
    9768:	mov	r0, r9
    976a:	bl	8db8 <cardCommand(unsigned long, unsigned long)>
    976e:	cmp	r0, #0
    9770:	beq.n	975c <SdioCard::begin(SdioConfig)+0x374>
    9772:	ldr.w	r3, [sl, #16]
  while (fcn()) {
    9776:	lsls	r0, r3, #23
    9778:	bpl.n	975c <SdioCard::begin(SdioConfig)+0x374>
  m_dmaBusy = true;
    977a:	movs	r3, #1
    977c:	ldr.w	r8, [pc, #504]	; 9978 <SdioCard::begin(SdioConfig)+0x590>
  m_irqstat = 0;
    9780:	ldr	r7, [pc, #444]	; (9940 <SdioCard::begin(SdioConfig)+0x558>)
    9782:	mov.w	fp, #0
  m_dmaBusy = true;
    9786:	strb.w	r3, [r8]
  SDHC_DSADDR = (uint32_t)scr;
    978a:	ldr.w	r9, [pc, #496]	; 997c <SdioCard::begin(SdioConfig)+0x594>
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(8);
    978e:	ldr	r3, [pc, #436]	; (9944 <SdioCard::begin(SdioConfig)+0x55c>)
  m_irqstat = 0;
    9790:	str.w	fp, [r7]
  SDHC_DSADDR = (uint32_t)scr;
    9794:	str.w	r9, [sl]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(8);
    9798:	str.w	r3, [sl, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    979c:	ldr	r3, [pc, #424]	; (9948 <SdioCard::begin(SdioConfig)+0x560>)
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    979e:	ldr	r0, [pc, #428]	; (994c <SdioCard::begin(SdioConfig)+0x564>)
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    97a0:	str.w	r3, [sl, #56]	; 0x38
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    97a4:	ldr	r1, [r5, #0]
    97a6:	bl	8db8 <cardCommand(unsigned long, unsigned long)>
    97aa:	cbnz	r0, 97d0 <SdioCard::begin(SdioConfig)+0x3e8>
  m_errorCode = code;
    97ac:	movs	r1, #24
  m_errorLine = line;
    97ae:	ldr	r3, [pc, #416]	; (9950 <SdioCard::begin(SdioConfig)+0x568>)
    97b0:	movw	r2, #471	; 0x1d7
    return false;
    97b4:	mov.w	fp, #0
  m_errorCode = code;
    97b8:	strb	r1, [r4, #0]
  m_errorLine = line;
    97ba:	str	r2, [r3, #0]
  return false;
    97bc:	b.n	9536 <SdioCard::begin(SdioConfig)+0x14e>
  m_errorCode = code;
    97be:	movs	r1, #10
  m_errorLine = line;
    97c0:	ldr	r3, [pc, #396]	; (9950 <SdioCard::begin(SdioConfig)+0x568>)
    97c2:	mov.w	r2, #464	; 0x1d0
    return false;
    97c6:	mov.w	fp, #0
  m_errorCode = code;
    97ca:	strb	r1, [r4, #0]
  m_errorLine = line;
    97cc:	str	r2, [r3, #0]
  return false;
    97ce:	b.n	9536 <SdioCard::begin(SdioConfig)+0x14e>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    97d0:	mov	r1, fp
    97d2:	ldr	r0, [pc, #384]	; (9954 <SdioCard::begin(SdioConfig)+0x56c>)
    97d4:	bl	8db8 <cardCommand(unsigned long, unsigned long)>
    97d8:	cmp	r0, #0
    97da:	beq.n	97ac <SdioCard::begin(SdioConfig)+0x3c4>
  if (!waitDmaStatus()) {
    97dc:	bl	8c14 <waitDmaStatus()>
    97e0:	mov	fp, r0
    97e2:	cbnz	r0, 97f2 <SdioCard::begin(SdioConfig)+0x40a>
  m_errorCode = code;
    97e4:	movs	r1, #38	; 0x26
  m_errorLine = line;
    97e6:	ldr	r3, [pc, #360]	; (9950 <SdioCard::begin(SdioConfig)+0x568>)
    97e8:	mov.w	r2, #474	; 0x1da
  m_errorCode = code;
    97ec:	strb	r1, [r4, #0]
  m_errorLine = line;
    97ee:	str	r2, [r3, #0]
  return false;
    97f0:	b.n	9536 <SdioCard::begin(SdioConfig)+0x14e>
  uint32_t m = micros();
    97f2:	bl	b84c <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    97f6:	ldr.w	sl, [pc, #380]	; 9974 <SdioCard::begin(SdioConfig)+0x58c>
    97fa:	ldr.w	fp, [pc, #388]	; 9980 <SdioCard::begin(SdioConfig)+0x598>
  uint32_t m = micros();
    97fe:	str	r0, [sp, #4]
  while (fcn()) {
    9800:	b.n	9810 <SdioCard::begin(SdioConfig)+0x428>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    9802:	bl	b84c <micros>
    9806:	ldr	r3, [sp, #4]
    9808:	subs	r0, r0, r3
    980a:	ldr	r3, [pc, #332]	; (9958 <SdioCard::begin(SdioConfig)+0x570>)
    980c:	cmp	r0, r3
    980e:	bhi.n	9860 <SdioCard::begin(SdioConfig)+0x478>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    9810:	ldr	r1, [r5, #0]
    9812:	mov	r0, sl
    9814:	bl	8db8 <cardCommand(unsigned long, unsigned long)>
    9818:	cmp	r0, #0
    981a:	beq.n	9802 <SdioCard::begin(SdioConfig)+0x41a>
    981c:	ldr.w	r3, [fp, #16]
  while (fcn()) {
    9820:	lsls	r1, r3, #23
    9822:	bpl.n	9802 <SdioCard::begin(SdioConfig)+0x41a>
  m_dmaBusy = true;
    9824:	movs	r2, #1
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    9826:	ldr	r0, [pc, #292]	; (994c <SdioCard::begin(SdioConfig)+0x564>)
  m_dmaBusy = true;
    9828:	strb.w	r2, [r8]
  m_irqstat = 0;
    982c:	mov.w	r8, #0
  SDHC_DSADDR = (uint32_t)scr;
    9830:	ldr	r2, [pc, #296]	; (995c <SdioCard::begin(SdioConfig)+0x574>)
  m_irqstat = 0;
    9832:	str.w	r8, [r7]
  SDHC_DSADDR = (uint32_t)scr;
    9836:	str.w	r2, [fp]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    983a:	ldr	r2, [pc, #292]	; (9960 <SdioCard::begin(SdioConfig)+0x578>)
    983c:	str.w	r2, [fp, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    9840:	ldr	r2, [pc, #260]	; (9948 <SdioCard::begin(SdioConfig)+0x560>)
    9842:	str.w	r2, [fp, #56]	; 0x38
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    9846:	ldr	r1, [r5, #0]
    9848:	bl	8db8 <cardCommand(unsigned long, unsigned long)>
    984c:	cbnz	r0, 9872 <SdioCard::begin(SdioConfig)+0x48a>
  m_errorCode = code;
    984e:	movs	r1, #21
  m_errorLine = line;
    9850:	ldr	r3, [pc, #252]	; (9950 <SdioCard::begin(SdioConfig)+0x568>)
    9852:	movw	r2, #453	; 0x1c5
    return false;
    9856:	mov.w	fp, #0
  m_errorCode = code;
    985a:	strb	r1, [r4, #0]
  m_errorLine = line;
    985c:	str	r2, [r3, #0]
  return false;
    985e:	b.n	9536 <SdioCard::begin(SdioConfig)+0x14e>
  m_errorCode = code;
    9860:	movs	r1, #10
  m_errorLine = line;
    9862:	ldr	r3, [pc, #236]	; (9950 <SdioCard::begin(SdioConfig)+0x568>)
    9864:	mov.w	r2, #446	; 0x1be
    return false;
    9868:	mov.w	fp, #0
  m_errorCode = code;
    986c:	strb	r1, [r4, #0]
  m_errorLine = line;
    986e:	str	r2, [r3, #0]
  return false;
    9870:	b.n	9536 <SdioCard::begin(SdioConfig)+0x14e>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand(xfertyp, arg);
    9872:	mov	r1, r8
    9874:	ldr	r0, [pc, #236]	; (9964 <SdioCard::begin(SdioConfig)+0x57c>)
    9876:	bl	8db8 <cardCommand(unsigned long, unsigned long)>
    987a:	cmp	r0, #0
    987c:	beq.n	984e <SdioCard::begin(SdioConfig)+0x466>
  if (!waitDmaStatus()) {
    987e:	bl	8c14 <waitDmaStatus()>
    9882:	mov	fp, r0
    9884:	cbnz	r0, 9894 <SdioCard::begin(SdioConfig)+0x4ac>
  m_errorCode = code;
    9886:	movs	r1, #38	; 0x26
  m_errorLine = line;
    9888:	ldr	r3, [pc, #196]	; (9950 <SdioCard::begin(SdioConfig)+0x568>)
    988a:	mov.w	r2, #456	; 0x1c8
  m_errorCode = code;
    988e:	strb	r1, [r4, #0]
  m_errorLine = line;
    9890:	str	r2, [r3, #0]
  return false;
    9892:	b.n	9536 <SdioCard::begin(SdioConfig)+0x14e>
  /** Bytes 0-3 SD Association, bytes 4-7 reserved for manufacturer. */
  uint8_t scr[8];
  /** \return SCR_STRUCTURE field  - must be zero.*/
  uint8_t srcStructure() const { return scr[0] >> 4; }
  /** \return SD_SPEC field 0 - v1.0 or V1.01, 1 - 1.10, 2 - V2.00 or greater */
  uint8_t sdSpec() const { return scr[0] & 0XF; }
    9894:	ldrb.w	r3, [r9]
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    9898:	lsls	r2, r3, #28
    989a:	beq.n	98ce <SdioCard::begin(SdioConfig)+0x4e6>
  if (m_scr.sdSpec() > 0 && cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    989c:	ldr	r3, [r6, #0]
    989e:	add	r2, sp, #8
    98a0:	mvn.w	r1, #4278190080	; 0xff000000
    98a4:	mov	r0, r6
    98a6:	ldr	r3, [r3, #40]	; 0x28
    98a8:	blx	r3
    98aa:	cbz	r0, 98ce <SdioCard::begin(SdioConfig)+0x4e6>
    98ac:	ldrb.w	r3, [sp, #21]
    98b0:	lsls	r3, r3, #30
    98b2:	bpl.n	98ce <SdioCard::begin(SdioConfig)+0x4e6>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    98b4:	ldr	r3, [r6, #0]
    98b6:	add	r2, sp, #8
    98b8:	mov	r0, r6
    98ba:	ldr	r1, [pc, #172]	; (9968 <SdioCard::begin(SdioConfig)+0x580>)
    98bc:	ldr	r3, [r3, #40]	; 0x28
    98be:	blx	r3
  if (m_scr.sdSpec() > 0 && cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    98c0:	cbz	r0, 98ce <SdioCard::begin(SdioConfig)+0x4e6>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    98c2:	ldrb.w	r3, [sp, #24]
    98c6:	and.w	r3, r3, #15
    98ca:	cmp	r3, #1
    98cc:	beq.n	9934 <SdioCard::begin(SdioConfig)+0x54c>
    kHzSdClk = 25000;
    98ce:	movw	r0, #25000	; 0x61a8
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    98d2:	ldr	r4, [pc, #152]	; (996c <SdioCard::begin(SdioConfig)+0x584>)
    98d4:	movs	r3, #5
    98d6:	str.w	r3, [r4, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    98da:	str.w	r3, [r4, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    98de:	str.w	r3, [r4, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    98e2:	str.w	r3, [r4, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    98e6:	str.w	r3, [r4, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    98ea:	str.w	r3, [r4, #456]	; 0x1c8
  setSdclk(kHzSdClk);
    98ee:	bl	8a00 <setSdclk(unsigned long)>
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    98f2:	movs	r3, #0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    98f4:	movw	r2, #28856	; 0x70b8
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    98f8:	str.w	r3, [r4, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    98fc:	str.w	r3, [r4, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    9900:	str.w	r3, [r4, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    9904:	str.w	r3, [r4, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    9908:	str.w	r3, [r4, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    990c:	str.w	r3, [r4, #456]	; 0x1c8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    9910:	movw	r3, #4280	; 0x10b8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    9914:	str.w	r2, [r4, #956]	; 0x3bc
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;   // DAT3
    9918:	str.w	r2, [r4, #960]	; 0x3c0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;   // CMD
    991c:	str.w	r2, [r4, #940]	; 0x3ac
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    9920:	str.w	r3, [r4, #944]	; 0x3b0
  m_initDone = true;
    9924:	movs	r3, #1
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02 = DATA_MASK;   // DAT0
    9926:	str.w	r2, [r4, #948]	; 0x3b4
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;   // DAT1
    992a:	str.w	r2, [r4, #952]	; 0x3b8
  m_initDone = true;
    992e:	ldr	r2, [pc, #64]	; (9970 <SdioCard::begin(SdioConfig)+0x588>)
    9930:	strb	r3, [r2, #0]
  return true;
    9932:	b.n	9536 <SdioCard::begin(SdioConfig)+0x14e>
    kHzSdClk = 50000;
    9934:	movw	r0, #50000	; 0xc350
    9938:	b.n	98d2 <SdioCard::begin(SdioConfig)+0x4ea>
    993a:	nop
    993c:	.word	0x061a0000
    9940:	.word	0x20006400
    9944:	.word	0x00010008
    9948:	.word	0x117f0002
    994c:	.word	0x371a0000
    9950:	.word	0x20005c88
    9954:	.word	0x333a0011
    9958:	.word	0x000f4240
    995c:	.word	0x200061bc
    9960:	.word	0x00010040
    9964:	.word	0x0d3a0011
    9968:	.word	0x80fffff1
    996c:	.word	0x401f8000
    9970:	.word	0x20008152
    9974:	.word	0x0d1a0000
    9978:	.word	0x20008156
    997c:	.word	0x200061b4
    9980:	.word	0x402c0000

00009984 <SdioCard::readData(unsigned char*)>:
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    9984:	ldr	r3, [pc, #220]	; (9a64 <SdioCard::readData(unsigned char*)+0xe0>)
    9986:	ldr	r2, [r3, #36]	; 0x24
    9988:	lsls	r2, r2, #22
bool SdioCard::readData(uint8_t* dst) {
    998a:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    998e:	mov	r7, r1
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    9990:	bmi.n	99ae <SdioCard::readData(unsigned char*)+0x2a>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    9992:	ldr	r2, [r3, #40]	; 0x28
    9994:	bic.w	r2, r2, #65536	; 0x10000
    9998:	str	r2, [r3, #40]	; 0x28
    noInterrupts();
    999a:	cpsid	i
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    999c:	ldr	r2, [r3, #40]	; 0x28
    999e:	orr.w	r2, r2, #131072	; 0x20000
    99a2:	str	r2, [r3, #40]	; 0x28
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    99a4:	ldr	r2, [r3, #40]	; 0x28
    99a6:	orr.w	r2, r2, #65536	; 0x10000
    99aa:	str	r2, [r3, #40]	; 0x28
    interrupts();
    99ac:	cpsie	i
  uint32_t m = micros();
    99ae:	bl	b84c <micros>
static bool isBusyFifoRead() { return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN); }
    99b2:	ldr	r6, [pc, #176]	; (9a64 <SdioCard::readData(unsigned char*)+0xe0>)
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    99b4:	ldr.w	r8, [pc, #196]	; 9a7c <SdioCard::readData(unsigned char*)+0xf8>
  uint32_t m = micros();
    99b8:	mov	r5, r0
  while (fcn()) {
    99ba:	b.n	99c6 <SdioCard::readData(unsigned char*)+0x42>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    99bc:	bl	b84c <micros>
    99c0:	subs	r3, r0, r5
    99c2:	cmp	r3, r8
    99c4:	bhi.n	9a36 <SdioCard::readData(unsigned char*)+0xb2>
static bool isBusyFifoRead() { return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN); }
    99c6:	ldr	r4, [r6, #36]	; 0x24
  while (fcn()) {
    99c8:	ands.w	r4, r4, #2048	; 0x800
    99cc:	beq.n	99bc <SdioCard::readData(unsigned char*)+0x38>
    99ce:	add.w	ip, r7, #60	; 0x3c
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    99d2:	ldr	r0, [pc, #144]	; (9a64 <SdioCard::readData(unsigned char*)+0xe0>)
    99d4:	add.w	r7, r7, #572	; 0x23c
    99d8:	ldr	r3, [r0, #36]	; 0x24
    99da:	lsls	r3, r3, #20
    99dc:	bpl.n	99d8 <SdioCard::readData(unsigned char*)+0x54>
    99de:	sub.w	r3, ip, #64	; 0x40
      p32[i] = SDHC_DATPORT;
    99e2:	ldr	r2, [r0, #32]
    99e4:	str.w	r2, [r3, #4]!
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    99e8:	cmp	ip, r3
    99ea:	bne.n	99e2 <SdioCard::readData(unsigned char*)+0x5e>
  for (uint32_t iw = 0; iw < 512 / (4 * FIFO_WML); iw++) {
    99ec:	add.w	ip, ip, #64	; 0x40
    99f0:	cmp	r7, ip
    99f2:	bne.n	99d8 <SdioCard::readData(unsigned char*)+0x54>
  uint32_t m = micros();
    99f4:	bl	b84c <micros>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    99f8:	ldr	r7, [pc, #104]	; (9a64 <SdioCard::readData(unsigned char*)+0xe0>)
    99fa:	ldr	r5, [pc, #108]	; (9a68 <SdioCard::readData(unsigned char*)+0xe4>)
  uint32_t m = micros();
    99fc:	mov	r6, r0
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    99fe:	ldr.w	r8, [pc, #124]	; 9a7c <SdioCard::readData(unsigned char*)+0xf8>
  while (fcn()) {
    9a02:	b.n	9a0e <SdioCard::readData(unsigned char*)+0x8a>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    9a04:	bl	b84c <micros>
    9a08:	subs	r3, r0, r6
    9a0a:	cmp	r3, r8
    9a0c:	bhi.n	9a4a <SdioCard::readData(unsigned char*)+0xc6>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    9a0e:	ldr	r4, [r7, #48]	; 0x30
  while (fcn()) {
    9a10:	ands	r4, r5
    9a12:	beq.n	9a04 <SdioCard::readData(unsigned char*)+0x80>
  m_irqstat = SDHC_IRQSTAT;
    9a14:	ldr	r3, [r7, #48]	; 0x30
    9a16:	ldr	r2, [pc, #84]	; (9a6c <SdioCard::readData(unsigned char*)+0xe8>)
    9a18:	str	r3, [r2, #0]
  SDHC_IRQSTAT = m_irqstat;
    9a1a:	ldr	r3, [r2, #0]
    9a1c:	str	r3, [r7, #48]	; 0x30
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    9a1e:	ldr	r3, [r2, #0]
    9a20:	ands.w	r3, r3, #2
    9a24:	beq.n	9a5e <SdioCard::readData(unsigned char*)+0xda>
    9a26:	ldr	r2, [r2, #0]
    9a28:	ldr	r3, [pc, #68]	; (9a70 <SdioCard::readData(unsigned char*)+0xec>)
    9a2a:	tst	r2, r3
    9a2c:	ite	eq
    9a2e:	moveq	r0, #1
    9a30:	movne	r0, #0
}
    9a32:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_errorCode = code;
    9a36:	ldr	r1, [pc, #60]	; (9a74 <SdioCard::readData(unsigned char*)+0xf0>)
    9a38:	movs	r5, #27
  m_errorLine = line;
    9a3a:	ldr	r3, [pc, #60]	; (9a78 <SdioCard::readData(unsigned char*)+0xf4>)
    9a3c:	movw	r2, #889	; 0x379
    return sdError(SD_CARD_ERROR_READ_FIFO);
    9a40:	mov	r0, r4
  m_errorCode = code;
    9a42:	strb	r5, [r1, #0]
  m_errorLine = line;
    9a44:	str	r2, [r3, #0]
}
    9a46:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_errorCode = code;
    9a4a:	ldr	r1, [pc, #40]	; (9a74 <SdioCard::readData(unsigned char*)+0xf0>)
    9a4c:	movs	r5, #30
  m_errorLine = line;
    9a4e:	ldr	r3, [pc, #40]	; (9a78 <SdioCard::readData(unsigned char*)+0xf4>)
    9a50:	mov.w	r2, #900	; 0x384
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
    9a54:	mov	r0, r4
  m_errorCode = code;
    9a56:	strb	r5, [r1, #0]
  m_errorLine = line;
    9a58:	str	r2, [r3, #0]
}
    9a5a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    9a5e:	mov	r0, r3
}
    9a60:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9a64:	.word	0x402c0000
    9a68:	.word	0x117f0002
    9a6c:	.word	0x20006400
    9a70:	.word	0x117f0000
    9a74:	.word	0x20001a4e
    9a78:	.word	0x20005c88
    9a7c:	.word	0x000f4240

00009a80 <SdioCard::readStart(unsigned long)>:
bool SdioCard::readStart(uint32_t sector) {
    9a80:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  m_busyFcn = fcn;
    9a84:	ldr	r3, [pc, #164]	; (9b2c <SdioCard::readStart(unsigned long)+0xac>)
bool SdioCard::readStart(uint32_t sector) {
    9a86:	mov	r9, r1
  m_busyFcn = fcn;
    9a88:	ldr.w	sl, [pc, #192]	; 9b4c <SdioCard::readStart(unsigned long)+0xcc>
    9a8c:	ldr	r6, [pc, #160]	; (9b30 <SdioCard::readStart(unsigned long)+0xb0>)
    9a8e:	str.w	r3, [sl]
  uint32_t m = micros();
    9a92:	bl	b84c <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    9a96:	ldr	r5, [pc, #156]	; (9b34 <SdioCard::readStart(unsigned long)+0xb4>)
  uint32_t m = micros();
    9a98:	mov	r4, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    9a9a:	ldr.w	r8, [pc, #180]	; 9b50 <SdioCard::readStart(unsigned long)+0xd0>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    9a9e:	ldr	r7, [pc, #152]	; (9b38 <SdioCard::readStart(unsigned long)+0xb8>)
  while (fcn()) {
    9aa0:	b.n	9ab0 <SdioCard::readStart(unsigned long)+0x30>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    9aa2:	bl	b84c <micros>
    9aa6:	subs	r0, r0, r4
    9aa8:	cmp	r0, r7
    9aaa:	bhi.n	9b00 <SdioCard::readStart(unsigned long)+0x80>
    yield();
    9aac:	bl	c0b4 <yield>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    9ab0:	ldr	r1, [r6, #0]
    9ab2:	mov	r0, r5
    9ab4:	bl	8db8 <cardCommand(unsigned long, unsigned long)>
    9ab8:	cmp	r0, #0
    9aba:	beq.n	9aa2 <SdioCard::readStart(unsigned long)+0x22>
    9abc:	ldr.w	r3, [r8, #16]
  while (fcn()) {
    9ac0:	lsls	r3, r3, #23
    9ac2:	bpl.n	9aa2 <SdioCard::readStart(unsigned long)+0x22>
  m_busyFcn = 0;
    9ac4:	movs	r3, #0
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    9ac6:	mov.w	r2, #512	; 0x200
  m_busyFcn = 0;
    9aca:	str.w	r3, [sl]
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    9ace:	ldr.w	r3, [r8, #40]	; 0x28
    9ad2:	orr.w	r3, r3, #65536	; 0x10000
    9ad6:	str.w	r3, [r8, #40]	; 0x28
  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512 * sector)) {
    9ada:	ldr	r3, [pc, #96]	; (9b3c <SdioCard::readStart(unsigned long)+0xbc>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    9adc:	str.w	r2, [r8, #4]
  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512 * sector)) {
    9ae0:	ldrb	r3, [r3, #0]
    9ae2:	cbz	r3, 9b18 <SdioCard::readStart(unsigned long)+0x98>
    9ae4:	mov	r1, r9
    9ae6:	ldr	r0, [pc, #88]	; (9b40 <SdioCard::readStart(unsigned long)+0xc0>)
    9ae8:	bl	8db8 <cardCommand(unsigned long, unsigned long)>
    9aec:	cbnz	r0, 9afc <SdioCard::readStart(unsigned long)+0x7c>
  m_errorCode = code;
    9aee:	ldr	r1, [pc, #84]	; (9b44 <SdioCard::readStart(unsigned long)+0xc4>)
    9af0:	movs	r4, #12
  m_errorLine = line;
    9af2:	ldr	r3, [pc, #84]	; (9b48 <SdioCard::readStart(unsigned long)+0xc8>)
    9af4:	movw	r2, #1002	; 0x3ea
  m_errorCode = code;
    9af8:	strb	r4, [r1, #0]
  m_errorLine = line;
    9afa:	str	r2, [r3, #0]
}
    9afc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_errorCode = code;
    9b00:	ldr	r2, [pc, #64]	; (9b44 <SdioCard::readStart(unsigned long)+0xc4>)
    9b02:	movs	r1, #10
      m_busyFcn = 0;
    9b04:	movs	r0, #0
  m_errorLine = line;
    9b06:	ldr	r3, [pc, #64]	; (9b48 <SdioCard::readStart(unsigned long)+0xc8>)
  m_errorCode = code;
    9b08:	strb	r1, [r2, #0]
  m_errorLine = line;
    9b0a:	movw	r2, #990	; 0x3de
      m_busyFcn = 0;
    9b0e:	str.w	r0, [sl]
  m_errorLine = line;
    9b12:	str	r2, [r3, #0]
}
    9b14:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512 * sector)) {
    9b18:	mov.w	r9, r9, lsl #9
    9b1c:	ldr	r0, [pc, #32]	; (9b40 <SdioCard::readStart(unsigned long)+0xc0>)
    9b1e:	mov	r1, r9
    9b20:	bl	8db8 <cardCommand(unsigned long, unsigned long)>
    9b24:	cmp	r0, #0
    9b26:	bne.n	9afc <SdioCard::readStart(unsigned long)+0x7c>
    9b28:	b.n	9aee <SdioCard::readStart(unsigned long)+0x6e>
    9b2a:	nop
    9b2c:	.word	0x00008f4d
    9b30:	.word	0x200061b0
    9b34:	.word	0x0d1a0000
    9b38:	.word	0x000f4240
    9b3c:	.word	0x20008154
    9b40:	.word	0x123a0030
    9b44:	.word	0x20001a4e
    9b48:	.word	0x20005c88
    9b4c:	.word	0x200063fc
    9b50:	.word	0x402c0000

00009b54 <SdioCard::stopTransmission(bool)>:
bool SdioCard::stopTransmission(bool blocking) {
    9b54:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_curState = IDLE_STATE;
    9b58:	movs	r2, #0
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    9b5a:	ldr	r4, [pc, #116]	; (9bd0 <SdioCard::stopTransmission(bool)+0x7c>)
bool SdioCard::stopTransmission(bool blocking) {
    9b5c:	mov	r5, r1
  m_curState = IDLE_STATE;
    9b5e:	strb	r2, [r0, #9]
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    9b60:	mov	r1, r2
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    9b62:	ldr	r3, [r4, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    9b64:	ldr	r0, [pc, #108]	; (9bd4 <SdioCard::stopTransmission(bool)+0x80>)
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    9b66:	bic.w	r3, r3, #65536	; 0x10000
    9b6a:	str	r3, [r4, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    9b6c:	bl	8db8 <cardCommand(unsigned long, unsigned long)>
    9b70:	cbnz	r0, 9b84 <SdioCard::stopTransmission(bool)+0x30>
  m_errorCode = code;
    9b72:	ldr	r1, [pc, #100]	; (9bd8 <SdioCard::stopTransmission(bool)+0x84>)
    9b74:	movs	r4, #9
  m_errorLine = line;
    9b76:	ldr	r3, [pc, #100]	; (9bdc <SdioCard::stopTransmission(bool)+0x88>)
    9b78:	movw	r2, #1018	; 0x3fa
  m_errorCode = code;
    9b7c:	strb	r4, [r1, #0]
  m_errorLine = line;
    9b7e:	str	r2, [r3, #0]
}
    9b80:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (blocking) {
    9b84:	cmp	r5, #0
    9b86:	beq.n	9b80 <SdioCard::stopTransmission(bool)+0x2c>
  m_busyFcn = fcn;
    9b88:	ldr	r3, [pc, #84]	; (9be0 <SdioCard::stopTransmission(bool)+0x8c>)
    9b8a:	ldr	r6, [pc, #88]	; (9be4 <SdioCard::stopTransmission(bool)+0x90>)
    9b8c:	str	r3, [r6, #0]
  uint32_t m = micros();
    9b8e:	bl	b84c <micros>
static bool isBusyDat() { return SDHC_PRSSTAT & (1 << 24) ? false : true; }
    9b92:	ldr	r3, [r4, #36]	; 0x24
  uint32_t m = micros();
    9b94:	mov	r7, r0
  while (fcn()) {
    9b96:	lsls	r2, r3, #7
    9b98:	bmi.n	9bc8 <SdioCard::stopTransmission(bool)+0x74>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    9b9a:	ldr.w	r8, [pc, #76]	; 9be8 <SdioCard::stopTransmission(bool)+0x94>
    9b9e:	b.n	9baa <SdioCard::stopTransmission(bool)+0x56>
    yield();
    9ba0:	bl	c0b4 <yield>
static bool isBusyDat() { return SDHC_PRSSTAT & (1 << 24) ? false : true; }
    9ba4:	ldr	r3, [r4, #36]	; 0x24
  while (fcn()) {
    9ba6:	lsls	r3, r3, #7
    9ba8:	bmi.n	9bc8 <SdioCard::stopTransmission(bool)+0x74>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    9baa:	bl	b84c <micros>
    9bae:	subs	r0, r0, r7
    9bb0:	cmp	r0, r8
    9bb2:	bls.n	9ba0 <SdioCard::stopTransmission(bool)+0x4c>
  m_errorCode = code;
    9bb4:	ldr	r2, [pc, #32]	; (9bd8 <SdioCard::stopTransmission(bool)+0x84>)
    9bb6:	movs	r1, #10
      m_busyFcn = 0;
    9bb8:	movs	r0, #0
  m_errorLine = line;
    9bba:	ldr	r3, [pc, #32]	; (9bdc <SdioCard::stopTransmission(bool)+0x88>)
  m_errorCode = code;
    9bbc:	strb	r1, [r2, #0]
  m_errorLine = line;
    9bbe:	movw	r2, #1022	; 0x3fe
      m_busyFcn = 0;
    9bc2:	str	r0, [r6, #0]
  m_errorLine = line;
    9bc4:	str	r2, [r3, #0]
      return sdError(SD_CARD_ERROR_CMD13);
    9bc6:	b.n	9b80 <SdioCard::stopTransmission(bool)+0x2c>
  m_busyFcn = 0;
    9bc8:	movs	r3, #0
  return true;
    9bca:	mov	r0, r5
  m_busyFcn = 0;
    9bcc:	str	r3, [r6, #0]
  return false;  // Caller will set errorCode.
    9bce:	b.n	9b80 <SdioCard::stopTransmission(bool)+0x2c>
    9bd0:	.word	0x402c0000
    9bd4:	.word	0x0cdb0000
    9bd8:	.word	0x20001a4e
    9bdc:	.word	0x20005c88
    9be0:	.word	0x000089e1
    9be4:	.word	0x200063fc
    9be8:	.word	0x000f4240

00009bec <SdioCard::syncDevice()>:
  if (!m_transferActive) {
    9bec:	ldr	r3, [pc, #40]	; (9c18 <SdioCard::syncDevice()+0x2c>)
    9bee:	ldrb	r3, [r3, #0]
bool SdioCard::syncDevice() {
    9bf0:	push	{r4, lr}
    9bf2:	mov	r4, r0
  if (!m_transferActive) {
    9bf4:	cbnz	r3, 9bfe <SdioCard::syncDevice()+0x12>
  if (m_curState != IDLE_STATE) {
    9bf6:	ldrb	r3, [r4, #9]
    9bf8:	cbnz	r3, 9c0c <SdioCard::syncDevice()+0x20>
  return true;
    9bfa:	movs	r0, #1
}
    9bfc:	pop	{r4, pc}
    9bfe:	bl	8c7c <waitTransferComplete() [clone .part.0]>
  if (!waitTransferComplete()) {
    9c02:	cmp	r0, #0
    9c04:	beq.n	9bfc <SdioCard::syncDevice()+0x10>
  if (m_curState != IDLE_STATE) {
    9c06:	ldrb	r3, [r4, #9]
    9c08:	cmp	r3, #0
    9c0a:	beq.n	9bfa <SdioCard::syncDevice()+0xe>
    return stopTransmission(true);
    9c0c:	mov	r0, r4
    9c0e:	movs	r1, #1
}
    9c10:	ldmia.w	sp!, {r4, lr}
    return stopTransmission(true);
    9c14:	b.w	9b54 <SdioCard::stopTransmission(bool)>
    9c18:	.word	0x20008155

00009c1c <SdioCard::erase(unsigned long, unsigned long)>:
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    9c1c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (m_curState != IDLE_STATE && !syncDevice()) {
    9c20:	ldrb	r3, [r0, #9]
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    9c22:	mov	r5, r1
    9c24:	mov	r6, r2
  if (m_curState != IDLE_STATE && !syncDevice()) {
    9c26:	cbz	r3, 9c58 <SdioCard::erase(unsigned long, unsigned long)+0x3c>
    9c28:	ldr	r3, [r0, #0]
    9c2a:	mov	r4, r0
    9c2c:	ldr	r2, [pc, #252]	; (9d2c <SdioCard::erase(unsigned long, unsigned long)+0x110>)
    9c2e:	ldr	r3, [r3, #28]
    9c30:	cmp	r3, r2
    9c32:	bne.n	9cca <SdioCard::erase(unsigned long, unsigned long)+0xae>
  if (!m_transferActive) {
    9c34:	ldr	r3, [pc, #248]	; (9d30 <SdioCard::erase(unsigned long, unsigned long)+0x114>)
    9c36:	ldrb	r3, [r3, #0]
    9c38:	cbnz	r3, 9c4a <SdioCard::erase(unsigned long, unsigned long)+0x2e>
    return stopTransmission(true);
    9c3a:	movs	r1, #1
    9c3c:	mov	r0, r4
    9c3e:	bl	9b54 <SdioCard::stopTransmission(bool)>
  if (m_curState != IDLE_STATE && !syncDevice()) {
    9c42:	cbnz	r0, 9c58 <SdioCard::erase(unsigned long, unsigned long)+0x3c>
    return false;
    9c44:	movs	r0, #0
}
    9c46:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9c4a:	bl	8c7c <waitTransferComplete() [clone .part.0]>
  if (!waitTransferComplete()) {
    9c4e:	cmp	r0, #0
    9c50:	beq.n	9c44 <SdioCard::erase(unsigned long, unsigned long)+0x28>
  if (m_curState != IDLE_STATE) {
    9c52:	ldrb	r3, [r4, #9]
    9c54:	cmp	r3, #0
    9c56:	bne.n	9c3a <SdioCard::erase(unsigned long, unsigned long)+0x1e>
  bool eraseSingleBlock() const { return csd[10] & 0X40; }
    9c58:	ldr	r4, [pc, #216]	; (9d34 <SdioCard::erase(unsigned long, unsigned long)+0x118>)
    9c5a:	ldrb	r3, [r4, #10]
  if (!m_csd.eraseSingleBlock()) {
    9c5c:	ands.w	r0, r3, #64	; 0x40
    9c60:	bne.n	9c88 <SdioCard::erase(unsigned long, unsigned long)+0x6c>
  int eraseSize() const { return ((csd[10] & 0X3F) << 1 | csd[11] >> 7) + 1; }
    9c62:	lsls	r3, r3, #1
    9c64:	ldrb	r2, [r4, #11]
    9c66:	and.w	r3, r3, #126	; 0x7e
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    9c6a:	orr.w	r3, r3, r2, lsr #7
    9c6e:	adds	r2, r6, #1
    9c70:	orrs	r2, r5
    9c72:	tst	r3, r2
    9c74:	beq.n	9c88 <SdioCard::erase(unsigned long, unsigned long)+0x6c>
  m_errorCode = code;
    9c76:	ldr	r1, [pc, #192]	; (9d38 <SdioCard::erase(unsigned long, unsigned long)+0x11c>)
    9c78:	movs	r4, #40	; 0x28
  m_errorLine = line;
    9c7a:	ldr	r3, [pc, #192]	; (9d3c <SdioCard::erase(unsigned long, unsigned long)+0x120>)
    9c7c:	movw	r2, #813	; 0x32d
  m_errorCode = code;
    9c80:	strb	r4, [r1, #0]
  m_errorLine = line;
    9c82:	str	r2, [r3, #0]
}
    9c84:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!m_highCapacity) {
    9c88:	ldr	r3, [pc, #180]	; (9d40 <SdioCard::erase(unsigned long, unsigned long)+0x124>)
    9c8a:	ldrb	r3, [r3, #0]
    9c8c:	cbnz	r3, 9c92 <SdioCard::erase(unsigned long, unsigned long)+0x76>
    firstSector <<= 9;
    9c8e:	lsls	r5, r5, #9
    lastSector <<= 9;
    9c90:	lsls	r6, r6, #9
  if (!cardCommand(CMD32_XFERTYP, firstSector)) {
    9c92:	mov	r1, r5
    9c94:	ldr	r0, [pc, #172]	; (9d44 <SdioCard::erase(unsigned long, unsigned long)+0x128>)
    9c96:	bl	8db8 <cardCommand(unsigned long, unsigned long)>
    9c9a:	cbnz	r0, 9cae <SdioCard::erase(unsigned long, unsigned long)+0x92>
  m_errorCode = code;
    9c9c:	ldr	r1, [pc, #152]	; (9d38 <SdioCard::erase(unsigned long, unsigned long)+0x11c>)
    9c9e:	movs	r4, #15
  m_errorLine = line;
    9ca0:	ldr	r3, [pc, #152]	; (9d3c <SdioCard::erase(unsigned long, unsigned long)+0x120>)
    9ca2:	movw	r2, #821	; 0x335
  m_errorCode = code;
    9ca6:	strb	r4, [r1, #0]
  m_errorLine = line;
    9ca8:	str	r2, [r3, #0]
}
    9caa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!cardCommand(CMD33_XFERTYP, lastSector)) {
    9cae:	mov	r1, r6
    9cb0:	ldr	r0, [pc, #148]	; (9d48 <SdioCard::erase(unsigned long, unsigned long)+0x12c>)
    9cb2:	bl	8db8 <cardCommand(unsigned long, unsigned long)>
    9cb6:	cbnz	r0, 9cd2 <SdioCard::erase(unsigned long, unsigned long)+0xb6>
  m_errorCode = code;
    9cb8:	ldr	r1, [pc, #124]	; (9d38 <SdioCard::erase(unsigned long, unsigned long)+0x11c>)
    9cba:	movs	r4, #16
  m_errorLine = line;
    9cbc:	ldr	r3, [pc, #124]	; (9d3c <SdioCard::erase(unsigned long, unsigned long)+0x120>)
    9cbe:	mov.w	r2, #824	; 0x338
  m_errorCode = code;
    9cc2:	strb	r4, [r1, #0]
  m_errorLine = line;
    9cc4:	str	r2, [r3, #0]
}
    9cc6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (m_curState != IDLE_STATE && !syncDevice()) {
    9cca:	blx	r3
    9ccc:	cmp	r0, #0
    9cce:	beq.n	9c44 <SdioCard::erase(unsigned long, unsigned long)+0x28>
    9cd0:	b.n	9c58 <SdioCard::erase(unsigned long, unsigned long)+0x3c>
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    9cd2:	movs	r1, #0
    9cd4:	ldr	r0, [pc, #116]	; (9d4c <SdioCard::erase(unsigned long, unsigned long)+0x130>)
    9cd6:	bl	8db8 <cardCommand(unsigned long, unsigned long)>
    9cda:	cbnz	r0, 9cec <SdioCard::erase(unsigned long, unsigned long)+0xd0>
  m_errorCode = code;
    9cdc:	ldr	r1, [pc, #88]	; (9d38 <SdioCard::erase(unsigned long, unsigned long)+0x11c>)
    9cde:	movs	r4, #17
  m_errorLine = line;
    9ce0:	ldr	r3, [pc, #88]	; (9d3c <SdioCard::erase(unsigned long, unsigned long)+0x120>)
    9ce2:	movw	r2, #827	; 0x33b
  m_errorCode = code;
    9ce6:	strb	r4, [r1, #0]
  m_errorLine = line;
    9ce8:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD38);
    9cea:	b.n	9c84 <SdioCard::erase(unsigned long, unsigned long)+0x68>
  uint32_t m = micros();
    9cec:	bl	b84c <micros>
    9cf0:	ldr	r6, [pc, #92]	; (9d50 <SdioCard::erase(unsigned long, unsigned long)+0x134>)
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    9cf2:	ldr	r5, [pc, #96]	; (9d54 <SdioCard::erase(unsigned long, unsigned long)+0x138>)
  uint32_t m = micros();
    9cf4:	mov	r4, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    9cf6:	ldr.w	r8, [pc, #100]	; 9d5c <SdioCard::erase(unsigned long, unsigned long)+0x140>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    9cfa:	ldr	r7, [pc, #92]	; (9d58 <SdioCard::erase(unsigned long, unsigned long)+0x13c>)
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    9cfc:	ldr	r1, [r6, #0]
    9cfe:	mov	r0, r5
    9d00:	bl	8db8 <cardCommand(unsigned long, unsigned long)>
    9d04:	cbz	r0, 9d0e <SdioCard::erase(unsigned long, unsigned long)+0xf2>
    9d06:	ldr.w	r3, [r8, #16]
  while (fcn()) {
    9d0a:	lsls	r3, r3, #23
    9d0c:	bmi.n	9c84 <SdioCard::erase(unsigned long, unsigned long)+0x68>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    9d0e:	bl	b84c <micros>
    9d12:	subs	r0, r0, r4
    9d14:	cmp	r0, r7
    9d16:	bls.n	9cfc <SdioCard::erase(unsigned long, unsigned long)+0xe0>
  m_errorCode = code;
    9d18:	ldr	r1, [pc, #28]	; (9d38 <SdioCard::erase(unsigned long, unsigned long)+0x11c>)
    9d1a:	movs	r4, #41	; 0x29
  m_errorLine = line;
    9d1c:	ldr	r3, [pc, #28]	; (9d3c <SdioCard::erase(unsigned long, unsigned long)+0x120>)
    9d1e:	movw	r2, #830	; 0x33e
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
    9d22:	movs	r0, #0
  m_errorCode = code;
    9d24:	strb	r4, [r1, #0]
  m_errorLine = line;
    9d26:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
    9d28:	b.n	9c84 <SdioCard::erase(unsigned long, unsigned long)+0x68>
    9d2a:	nop
    9d2c:	.word	0x00009bed
    9d30:	.word	0x20008155
    9d34:	.word	0x2000619c
    9d38:	.word	0x20001a4e
    9d3c:	.word	0x20005c88
    9d40:	.word	0x20008154
    9d44:	.word	0x201a0000
    9d48:	.word	0x211a0000
    9d4c:	.word	0x261b0000
    9d50:	.word	0x200061b0
    9d54:	.word	0x0d1a0000
    9d58:	.word	0x000f4240
    9d5c:	.word	0x402c0000

00009d60 <SdioCard::readSector(unsigned long, unsigned char*)>:
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    9d60:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9d64:	mov	r4, r0
    9d66:	ldrb	r0, [r0, #8]
    9d68:	sub.w	sp, sp, #512	; 0x200
    9d6c:	mov	r6, r2
  if (m_sdioConfig.useDma()) {
    9d6e:	ands.w	r5, r0, #1
    9d72:	beq.n	9d9c <SdioCard::readSector(unsigned long, unsigned char*)+0x3c>
    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;
    9d74:	lsls	r3, r2, #30
    9d76:	beq.n	9df2 <SdioCard::readSector(unsigned long, unsigned char*)+0x92>
    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    9d78:	movs	r3, #1
    9d7a:	ldr	r0, [pc, #224]	; (9e5c <SdioCard::readSector(unsigned long, unsigned char*)+0xfc>)
    9d7c:	mov	r2, sp
    9d7e:	bl	91cc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    9d82:	cmp	r0, #0
    9d84:	beq.n	9dfc <SdioCard::readSector(unsigned long, unsigned char*)+0x9c>
      memcpy(dst, aligned, 512);
    9d86:	mov.w	r2, #512	; 0x200
    9d8a:	mov	r1, sp
    9d8c:	mov	r0, r6
    9d8e:	bl	a0a4 <memcpy>
}
    9d92:	mov	r0, r5
    9d94:	add.w	sp, sp, #512	; 0x200
    9d98:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!m_transferActive) {
    9d9c:	ldr.w	r8, [pc, #204]	; 9e6c <SdioCard::readSector(unsigned long, unsigned char*)+0x10c>
    9da0:	mov	r7, r1
    9da2:	ldrb.w	r3, [r8]
    9da6:	cmp	r3, #0
    9da8:	bne.n	9e16 <SdioCard::readSector(unsigned long, unsigned char*)+0xb6>
    if (m_curState != READ_STATE || sector != m_curSector) {
    9daa:	ldrb	r3, [r4, #9]
    9dac:	cmp	r3, #1
    9dae:	beq.n	9e24 <SdioCard::readSector(unsigned long, unsigned char*)+0xc4>
      if (!syncDevice()) {
    9db0:	ldr	r2, [r4, #0]
    9db2:	ldr	r1, [pc, #172]	; (9e60 <SdioCard::readSector(unsigned long, unsigned char*)+0x100>)
    9db4:	ldr	r2, [r2, #28]
    9db6:	cmp	r2, r1
    9db8:	bne.n	9e50 <SdioCard::readSector(unsigned long, unsigned char*)+0xf0>
  if (!m_transferActive) {
    9dba:	ldrb.w	r2, [r8]
    9dbe:	cmp	r2, #0
    9dc0:	bne.n	9e2c <SdioCard::readSector(unsigned long, unsigned char*)+0xcc>
  if (m_curState != IDLE_STATE) {
    9dc2:	cmp	r3, #0
    9dc4:	bne.n	9e3a <SdioCard::readSector(unsigned long, unsigned char*)+0xda>
      if (!readStart(sector)) {
    9dc6:	mov	r1, r7
    9dc8:	mov	r0, r4
    9dca:	bl	9a80 <SdioCard::readStart(unsigned long)>
    9dce:	cbz	r0, 9e0c <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
      m_curState = READ_STATE;
    9dd0:	movs	r3, #1
      m_curSector = sector;
    9dd2:	str	r7, [r4, #4]
      m_curState = READ_STATE;
    9dd4:	strb	r3, [r4, #9]
    if (!readData(dst)) {
    9dd6:	mov	r1, r6
    9dd8:	mov	r0, r4
    9dda:	bl	9984 <SdioCard::readData(unsigned char*)>
    9dde:	cbz	r0, 9e0c <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
    m_curSector++;
    9de0:	ldr	r3, [r4, #4]
  return true;
    9de2:	mov	r5, r0
    m_curSector++;
    9de4:	adds	r3, #1
}
    9de6:	mov	r0, r5
    m_curSector++;
    9de8:	str	r3, [r4, #4]
}
    9dea:	add.w	sp, sp, #512	; 0x200
    9dee:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    9df2:	movs	r3, #1
    9df4:	ldr	r0, [pc, #100]	; (9e5c <SdioCard::readSector(unsigned long, unsigned char*)+0xfc>)
    9df6:	bl	91cc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    9dfa:	cbnz	r0, 9e0c <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
  m_errorCode = code;
    9dfc:	ldr	r1, [pc, #100]	; (9e64 <SdioCard::readSector(unsigned long, unsigned char*)+0x104>)
    9dfe:	movs	r0, #11
  m_errorLine = line;
    9e00:	ldr	r3, [pc, #100]	; (9e68 <SdioCard::readSector(unsigned long, unsigned char*)+0x108>)
    9e02:	movw	r2, #929	; 0x3a1
      return sdError(SD_CARD_ERROR_CMD17);
    9e06:	movs	r5, #0
  m_errorCode = code;
    9e08:	strb	r0, [r1, #0]
  m_errorLine = line;
    9e0a:	str	r2, [r3, #0]
}
    9e0c:	mov	r0, r5
    9e0e:	add.w	sp, sp, #512	; 0x200
    9e12:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9e16:	bl	8c7c <waitTransferComplete() [clone .part.0]>
    if (!waitTransferComplete()) {
    9e1a:	cmp	r0, #0
    9e1c:	beq.n	9e0c <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
    if (m_curState != READ_STATE || sector != m_curSector) {
    9e1e:	ldrb	r3, [r4, #9]
    9e20:	cmp	r3, #1
    9e22:	bne.n	9db0 <SdioCard::readSector(unsigned long, unsigned char*)+0x50>
    9e24:	ldr	r2, [r4, #4]
    9e26:	cmp	r2, r7
    9e28:	bne.n	9db0 <SdioCard::readSector(unsigned long, unsigned char*)+0x50>
    9e2a:	b.n	9dd6 <SdioCard::readSector(unsigned long, unsigned char*)+0x76>
    9e2c:	bl	8c7c <waitTransferComplete() [clone .part.0]>
  if (!waitTransferComplete()) {
    9e30:	cmp	r0, #0
    9e32:	beq.n	9e0c <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
  if (m_curState != IDLE_STATE) {
    9e34:	ldrb	r3, [r4, #9]
    9e36:	cmp	r3, #0
    9e38:	beq.n	9dc6 <SdioCard::readSector(unsigned long, unsigned char*)+0x66>
    return stopTransmission(true);
    9e3a:	movs	r1, #1
    9e3c:	mov	r0, r4
    9e3e:	bl	9b54 <SdioCard::stopTransmission(bool)>
      if (!syncDevice()) {
    9e42:	cmp	r0, #0
    9e44:	bne.n	9dc6 <SdioCard::readSector(unsigned long, unsigned char*)+0x66>
}
    9e46:	mov	r0, r5
    9e48:	add.w	sp, sp, #512	; 0x200
    9e4c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (!syncDevice()) {
    9e50:	mov	r0, r4
    9e52:	blx	r2
    9e54:	cmp	r0, #0
    9e56:	beq.n	9e46 <SdioCard::readSector(unsigned long, unsigned char*)+0xe6>
    9e58:	b.n	9dc6 <SdioCard::readSector(unsigned long, unsigned char*)+0x66>
    9e5a:	nop
    9e5c:	.word	0x113a0011
    9e60:	.word	0x00009bed
    9e64:	.word	0x20001a4e
    9e68:	.word	0x20005c88
    9e6c:	.word	0x20008155

00009e70 <SdioCard::writeSector(unsigned long, unsigned char const*)>:
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    9e70:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9e74:	ldrb	r4, [r0, #8]
    9e76:	sub.w	sp, sp, #512	; 0x200
    9e7a:	mov	r7, r1
    9e7c:	mov	r8, r2
  if (m_sdioConfig.useDma()) {
    9e7e:	ands.w	r4, r4, #1
    9e82:	beq.n	9ec0 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x50>
    if (3 & (uint32_t)src) {
    9e84:	tst.w	r2, #3
    9e88:	beq.n	9e98 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x28>
      memcpy(aligned, src, 512);
    9e8a:	mov	r0, sp
    9e8c:	mov	r1, r2
    9e8e:	mov.w	r2, #512	; 0x200
      ptr = aligned;
    9e92:	mov	r8, r0
      memcpy(aligned, src, 512);
    9e94:	bl	a0a4 <memcpy>
    if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
    9e98:	movs	r3, #1
    9e9a:	mov	r2, r8
    9e9c:	mov	r1, r7
    9e9e:	ldr	r0, [pc, #176]	; (9f50 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xe0>)
    9ea0:	bl	91cc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    9ea4:	mov	r4, r0
    9ea6:	cbnz	r0, 9eb6 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
  m_errorCode = code;
    9ea8:	ldr	r1, [pc, #168]	; (9f54 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xe4>)
    9eaa:	movs	r0, #13
  m_errorLine = line;
    9eac:	ldr	r3, [pc, #168]	; (9f58 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xe8>)
    9eae:	mov.w	r2, #1080	; 0x438
  m_errorCode = code;
    9eb2:	strb	r0, [r1, #0]
  m_errorLine = line;
    9eb4:	str	r2, [r3, #0]
}
    9eb6:	mov	r0, r4
    9eb8:	add.w	sp, sp, #512	; 0x200
    9ebc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!m_transferActive) {
    9ec0:	ldr	r5, [pc, #152]	; (9f5c <SdioCard::writeSector(unsigned long, unsigned char const*)+0xec>)
    9ec2:	mov	r6, r0
    9ec4:	ldrb	r3, [r5, #0]
    9ec6:	cbnz	r3, 9f14 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xa4>
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    9ec8:	ldrb	r3, [r6, #9]
    9eca:	cmp	r3, #2
    9ecc:	beq.n	9f22 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xb2>
      if (!syncDevice()) {
    9ece:	ldr	r2, [r6, #0]
    9ed0:	ldr	r1, [pc, #140]	; (9f60 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xf0>)
    9ed2:	ldr	r2, [r2, #28]
    9ed4:	cmp	r2, r1
    9ed6:	bne.n	9f46 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xd6>
  if (!m_transferActive) {
    9ed8:	ldrb	r2, [r5, #0]
    9eda:	cbnz	r2, 9f2a <SdioCard::writeSector(unsigned long, unsigned char const*)+0xba>
  if (m_curState != IDLE_STATE) {
    9edc:	cmp	r3, #0
    9ede:	bne.n	9f38 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xc8>
      if (!writeStart(sector)) {
    9ee0:	ldr	r3, [r6, #0]
    9ee2:	mov	r1, r7
    9ee4:	mov	r0, r6
    9ee6:	ldr	r3, [r3, #100]	; 0x64
    9ee8:	blx	r3
    9eea:	cmp	r0, #0
    9eec:	beq.n	9eb6 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
      m_curState = WRITE_STATE;
    9eee:	movs	r3, #2
      m_curSector = sector;
    9ef0:	str	r7, [r6, #4]
      m_curState = WRITE_STATE;
    9ef2:	strb	r3, [r6, #9]
    if (!writeData(src)) {
    9ef4:	ldr	r3, [r6, #0]
    9ef6:	mov	r1, r8
    9ef8:	mov	r0, r6
    9efa:	ldr	r3, [r3, #96]	; 0x60
    9efc:	blx	r3
    9efe:	cmp	r0, #0
    9f00:	beq.n	9eb6 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
    m_curSector++;
    9f02:	ldr	r3, [r6, #4]
  return true;
    9f04:	mov	r4, r0
    m_curSector++;
    9f06:	adds	r3, #1
}
    9f08:	mov	r0, r4
    m_curSector++;
    9f0a:	str	r3, [r6, #4]
}
    9f0c:	add.w	sp, sp, #512	; 0x200
    9f10:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9f14:	bl	8c7c <waitTransferComplete() [clone .part.0]>
    if (!waitTransferComplete()) {
    9f18:	cmp	r0, #0
    9f1a:	beq.n	9eb6 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    9f1c:	ldrb	r3, [r6, #9]
    9f1e:	cmp	r3, #2
    9f20:	bne.n	9ece <SdioCard::writeSector(unsigned long, unsigned char const*)+0x5e>
    9f22:	ldr	r2, [r6, #4]
    9f24:	cmp	r2, r7
    9f26:	bne.n	9ece <SdioCard::writeSector(unsigned long, unsigned char const*)+0x5e>
    9f28:	b.n	9ef4 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x84>
    9f2a:	bl	8c7c <waitTransferComplete() [clone .part.0]>
  if (!waitTransferComplete()) {
    9f2e:	cmp	r0, #0
    9f30:	beq.n	9eb6 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
  if (m_curState != IDLE_STATE) {
    9f32:	ldrb	r3, [r6, #9]
    9f34:	cmp	r3, #0
    9f36:	beq.n	9ee0 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x70>
    return stopTransmission(true);
    9f38:	movs	r1, #1
    9f3a:	mov	r0, r6
    9f3c:	bl	9b54 <SdioCard::stopTransmission(bool)>
      if (!syncDevice()) {
    9f40:	cmp	r0, #0
    9f42:	beq.n	9eb6 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
    9f44:	b.n	9ee0 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x70>
    9f46:	mov	r0, r6
    9f48:	blx	r2
    9f4a:	cmp	r0, #0
    9f4c:	beq.n	9eb6 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
    9f4e:	b.n	9ee0 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x70>
    9f50:	.word	0x183a0001
    9f54:	.word	0x20001a4e
    9f58:	.word	0x20005c88
    9f5c:	.word	0x20008155
    9f60:	.word	0x00009bed

00009f64 <SdSpiArduinoDriver::activate()>:
 */
#include "SdSpiDriver.h"
#if defined(SD_USE_CUSTOM_SPI) && defined(__arm__) && defined(CORE_TEENSY)
#define USE_BLOCK_TRANSFER 1
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::activate() { m_spi->beginTransaction(m_spiSettings); }
    9f64:	push	{r3, lr}
    9f66:	mov	r3, r0
    9f68:	ldr.w	r0, [r3], #4
    9f6c:	ldmia.w	r3, {r1, r2}
    9f70:	bl	1d40 <SPIClass::beginTransaction(SPISettings)>
    9f74:	pop	{r3, pc}
    9f76:	nop

00009f78 <SdSpiArduinoDriver::begin(SdSpiConfig)>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::begin(SdSpiConfig spiConfig) {
    9f78:	sub	sp, #16
    9f7a:	add.w	ip, sp, #16
    9f7e:	stmdb	ip, {r1, r2, r3}
    9f82:	mov	r2, r0
  if (spiConfig.spiPort) {
    9f84:	cbz	r3, 9f90 <SdSpiArduinoDriver::begin(SdSpiConfig)+0x18>
    m_spi->setSCK(SDCARD_SCK_PIN);
#endif  // defined(SDCARD_SPI) && defined(SDCARD_SS_PIN)
  } else {
    m_spi = &SPI;
  }
  m_spi->begin();
    9f86:	mov	r0, r3
    9f88:	str	r3, [r2, #0]
}
    9f8a:	add	sp, #16
  m_spi->begin();
    9f8c:	b.w	2690 <SPIClass::begin()>
    m_spi = &SPI;
    9f90:	ldr	r3, [pc, #8]	; (9f9c <SdSpiArduinoDriver::begin(SdSpiConfig)+0x24>)
  m_spi->begin();
    9f92:	mov	r0, r3
    9f94:	str	r3, [r2, #0]
}
    9f96:	add	sp, #16
  m_spi->begin();
    9f98:	b.w	2690 <SPIClass::begin()>
    9f9c:	.word	0x200057d0

00009fa0 <SdSpiArduinoDriver::deactivate()>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::deactivate() { m_spi->endTransaction(); }
    9fa0:	ldr	r2, [r0, #0]
		if (interruptMasksUsed) {
    9fa2:	ldrb	r3, [r2, #19]
    9fa4:	cbz	r3, 9fec <SdSpiArduinoDriver::deactivate()+0x4c>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    9fa6:	lsls	r0, r3, #31
    9fa8:	bpl.n	9fb4 <SdSpiArduinoDriver::deactivate()+0x14>
    9faa:	ldr	r0, [r2, #40]	; 0x28
    9fac:	mov.w	r1, #3758153728	; 0xe000e000
    9fb0:	str.w	r0, [r1, #256]	; 0x100
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    9fb4:	lsls	r1, r3, #30
    9fb6:	bpl.n	9fc2 <SdSpiArduinoDriver::deactivate()+0x22>
    9fb8:	ldr	r0, [r2, #44]	; 0x2c
    9fba:	mov.w	r1, #3758153728	; 0xe000e000
    9fbe:	str.w	r0, [r1, #260]	; 0x104
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    9fc2:	lsls	r0, r3, #29
    9fc4:	bpl.n	9fd0 <SdSpiArduinoDriver::deactivate()+0x30>
    9fc6:	ldr	r0, [r2, #48]	; 0x30
    9fc8:	mov.w	r1, #3758153728	; 0xe000e000
    9fcc:	str.w	r0, [r1, #264]	; 0x108
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    9fd0:	lsls	r1, r3, #28
    9fd2:	bpl.n	9fde <SdSpiArduinoDriver::deactivate()+0x3e>
    9fd4:	ldr	r0, [r2, #52]	; 0x34
    9fd6:	mov.w	r1, #3758153728	; 0xe000e000
    9fda:	str.w	r0, [r1, #268]	; 0x10c
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    9fde:	lsls	r3, r3, #27
    9fe0:	bpl.n	9fec <SdSpiArduinoDriver::deactivate()+0x4c>
    9fe2:	ldr	r2, [r2, #56]	; 0x38
    9fe4:	mov.w	r3, #3758153728	; 0xe000e000
    9fe8:	str.w	r2, [r3, #272]	; 0x110
    9fec:	bx	lr
    9fee:	nop

00009ff0 <SdSpiArduinoDriver::end()>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::end() { m_spi->end(); }
    9ff0:	ldr	r0, [r0, #0]
    9ff2:	b.w	28cc <SPIClass::end()>
    9ff6:	nop

00009ff8 <SdSpiArduinoDriver::receive()>:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    9ff8:	ldr	r2, [r0, #0]
		port().TDR = data;
    9ffa:	movs	r3, #255	; 0xff
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    9ffc:	ldr	r2, [r2, #0]
		port().TDR = data;
    9ffe:	str	r3, [r2, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    a000:	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    a002:	tst.w	r3, #2031616	; 0x1f0000
    a006:	beq.n	a000 <SdSpiArduinoDriver::receive()+0x8>
    a008:	ldr	r0, [r2, #116]	; 0x74
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive() { return m_spi->transfer(0XFF); }
    a00a:	uxtb	r0, r0
    a00c:	bx	lr
    a00e:	nop

0000a010 <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>:
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
    a010:	push	{r4, r5, lr}
    a012:	mov	r4, r1
    a014:	sub	sp, #12
    a016:	mov	r5, r0
#if USE_BLOCK_TRANSFER
  memset(buf, 0XFF, count);
    a018:	movs	r1, #255	; 0xff
    a01a:	mov	r0, r4
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
    a01c:	str	r2, [sp, #4]
  memset(buf, 0XFF, count);
    a01e:	bl	e044 <memset>
		transfer(buf, buf, count);
    a022:	ldr	r0, [r5, #0]
    a024:	ldr	r3, [sp, #4]
    a026:	mov	r2, r4
    a028:	mov	r1, r4
    a02a:	bl	28c4 <SPIClass::transfer(void const*, void*, unsigned int)>
  for (size_t i = 0; i < count; i++) {
    buf[i] = m_spi->transfer(0XFF);
  }
#endif  // USE_BLOCK_TRANSFER
  return 0;
}
    a02e:	movs	r0, #0
    a030:	add	sp, #12
    a032:	pop	{r4, r5, pc}

0000a034 <SdSpiArduinoDriver::send(unsigned char)>:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    a034:	ldr	r3, [r0, #0]
    a036:	ldr	r2, [r3, #0]
		port().TDR = data;
    a038:	str	r1, [r2, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    a03a:	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    a03c:	tst.w	r3, #2031616	; 0x1f0000
    a040:	beq.n	a03a <SdSpiArduinoDriver::send(unsigned char)+0x6>
    a042:	ldr	r3, [r2, #116]	; 0x74
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(uint8_t data) { m_spi->transfer(data); }
    a044:	bx	lr
    a046:	nop

0000a048 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf, size_t count) {
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    a048:	subs	r3, r2, #1
    a04a:	cmp.w	r3, #512	; 0x200
void SdSpiArduinoDriver::send(const uint8_t* buf, size_t count) {
    a04e:	push	{r4, r5, lr}
    a050:	mov	r4, r2
    a052:	sub.w	sp, sp, #516	; 0x204
    a056:	mov	r5, r0
  if (0 < count && count <= 512) {
    a058:	bcc.n	a07e <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x36>
    memcpy(tmp, buf, count);
    m_spi->transfer(tmp, count);
    return;
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    a05a:	cbz	r2, a078 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x30>
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    a05c:	ldr	r3, [r0, #0]
    a05e:	subs	r0, r1, #1
    a060:	ldr	r1, [r3, #0]
    a062:	adds	r2, r0, r2
		port().TDR = data;
    a064:	ldrb.w	r3, [r0, #1]!
    a068:	str	r3, [r1, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    a06a:	ldr	r3, [r1, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    a06c:	tst.w	r3, #2031616	; 0x1f0000
    a070:	beq.n	a06a <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x22>
    a072:	cmp	r0, r2
    a074:	ldr	r3, [r1, #116]	; 0x74
    a076:	bne.n	a064 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x1c>
    m_spi->transfer(buf[i]);
  }
}
    a078:	add.w	sp, sp, #516	; 0x204
    a07c:	pop	{r4, r5, pc}
    memcpy(tmp, buf, count);
    a07e:	mov	r0, sp
    a080:	bl	a0a4 <memcpy>
		transfer(buf, buf, count);
    a084:	mov	r2, sp
    a086:	mov	r3, r4
    a088:	ldr	r0, [r5, #0]
    a08a:	mov	r1, r2
    a08c:	bl	28c4 <SPIClass::transfer(void const*, void*, unsigned int)>
}
    a090:	add.w	sp, sp, #516	; 0x204
    a094:	pop	{r4, r5, pc}
    a096:	nop

0000a098 <sdCsInit(unsigned char)>:
 */
#include "SdSpiDriver.h"
#if ENABLE_ARDUINO_FEATURES
#if SD_CHIP_SELECT_MODE == 0
//------------------------------------------------------------------------------
void sdCsInit(SdCsPin_t pin) { pinMode(pin, OUTPUT); }
    a098:	movs	r1, #1
    a09a:	b.w	bc50 <pinMode>
    a09e:	nop

0000a0a0 <sdCsWrite(unsigned char, bool)>:
//------------------------------------------------------------------------------
void sdCsWrite(SdCsPin_t pin, bool level) { digitalWrite(pin, level); }
    a0a0:	b.w	bbd8 <digitalWrite>

0000a0a4 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    a0a4:	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    a0a6:	orr.w	r3, r1, r0
	ands	r3, r3, #3
    a0aa:	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    a0ae:	bne.n	a18c <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    a0b0:	subs	r2, #64	; 0x40
	blo	.Lmid_block
    a0b2:	bcc.n	a138 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    a0b4:	ldr.w	r3, [r1], #4
    a0b8:	str.w	r3, [r0], #4
    a0bc:	ldr.w	r3, [r1], #4
    a0c0:	str.w	r3, [r0], #4
    a0c4:	ldr.w	r3, [r1], #4
    a0c8:	str.w	r3, [r0], #4
    a0cc:	ldr.w	r3, [r1], #4
    a0d0:	str.w	r3, [r0], #4
    a0d4:	ldr.w	r3, [r1], #4
    a0d8:	str.w	r3, [r0], #4
    a0dc:	ldr.w	r3, [r1], #4
    a0e0:	str.w	r3, [r0], #4
    a0e4:	ldr.w	r3, [r1], #4
    a0e8:	str.w	r3, [r0], #4
    a0ec:	ldr.w	r3, [r1], #4
    a0f0:	str.w	r3, [r0], #4
    a0f4:	ldr.w	r3, [r1], #4
    a0f8:	str.w	r3, [r0], #4
    a0fc:	ldr.w	r3, [r1], #4
    a100:	str.w	r3, [r0], #4
    a104:	ldr.w	r3, [r1], #4
    a108:	str.w	r3, [r0], #4
    a10c:	ldr.w	r3, [r1], #4
    a110:	str.w	r3, [r0], #4
    a114:	ldr.w	r3, [r1], #4
    a118:	str.w	r3, [r0], #4
    a11c:	ldr.w	r3, [r1], #4
    a120:	str.w	r3, [r0], #4
    a124:	ldr.w	r3, [r1], #4
    a128:	str.w	r3, [r0], #4
    a12c:	ldr.w	r3, [r1], #4
    a130:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    a134:	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    a136:	bcs.n	a0b4 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    a138:	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    a13a:	bcc.n	a160 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    a13c:	ldr.w	r3, [r1], #4
    a140:	str.w	r3, [r0], #4
    a144:	ldr.w	r3, [r1], #4
    a148:	str.w	r3, [r0], #4
    a14c:	ldr.w	r3, [r1], #4
    a150:	str.w	r3, [r0], #4
    a154:	ldr.w	r3, [r1], #4
    a158:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    a15c:	subs	r2, #16
	bhs	.Lmid_block_loop
    a15e:	bcs.n	a13c <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    a160:	adds	r2, #12
	blo	.Lcopy_less_than_4
    a162:	bcc.n	a170 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    a164:	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    a168:	str.w	r3, [r0], #4
	subs	r2, #4
    a16c:	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    a16e:	bcs.n	a164 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    a170:	adds	r2, #4
	beq	.Ldone
    a172:	beq.n	a186 <memcpy+0xe2>

	lsls	r2, r2, #31
    a174:	lsls	r2, r2, #31
	itt ne
    a176:	itt	ne
	ldrbne  r3, [r1], #1
    a178:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    a17c:	strbne.w	r3, [r0], #1

	bcc	.Ldone
    a180:	bcc.n	a186 <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    a182:	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    a184:	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    a186:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    a188:	bx	lr
    a18a:	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    a18c:	cmp	r2, #8
	blo	.Lbyte_copy
    a18e:	bcc.n	a1b8 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    a190:	lsls	r3, r1, #30
	beq	.Ldst_aligned
    a192:	beq.n	a0b0 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    a194:	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    a198:	beq.n	a0b0 <memcpy+0xc>

	rsb	r3, #4
    a19a:	rsb	r3, r3, #4
	subs	r2, r3
    a19e:	subs	r2, r2, r3

	lsls    r3, r3, #31
    a1a0:	lsls	r3, r3, #31
	itt ne
    a1a2:	itt	ne
	ldrbne  r3, [r1], #1
    a1a4:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    a1a8:	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    a1ac:	bcc.n	a0b0 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    a1ae:	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    a1b2:	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    a1b6:	b.n	a0b0 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    a1b8:	subs	r2, #4
	blo	.Lcopy_less_than_4
    a1ba:	bcc.n	a170 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    a1bc:	subs	r2, #1
	ldrb    r3, [r1], #1
    a1be:	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    a1c2:	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    a1c6:	bcs.n	a1bc <memcpy+0x118>

	ldrb	r3, [r1]
    a1c8:	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    a1ca:	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    a1cc:	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    a1ce:	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    a1d0:	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    a1d2:	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    a1d4:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    a1d6:	bx	lr

0000a1d8 <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    a1d8:	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    a1da:	ldr	r4, [pc, #80]	; (a22c <rx_queue_transfer+0x54>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    a1dc:	mov.w	r5, #3758153728	; 0xe000e000
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    a1e0:	ldr	r6, [pc, #76]	; (a230 <rx_queue_transfer+0x58>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    a1e2:	mov.w	r2, #131072	; 0x20000
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    a1e6:	add.w	r4, r4, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    a1ea:	ldr	r7, [pc, #72]	; (a234 <rx_queue_transfer+0x5c>)
    a1ec:	add.w	r6, r6, r0, lsl #5
{
    a1f0:	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
    a1f2:	str.w	r2, [r5, #396]	; 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    a1f6:	mov	r1, r4
    a1f8:	ldrh	r2, [r7, #0]
    a1fa:	mov	r0, r6
    a1fc:	bl	b72c <usb_prepare_transfer>
	arm_dcache_delete(buffer, rx_packet_size);
    a200:	ldrh	r3, [r7, #0]
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    a202:	add	r3, r4
	asm volatile("": : :"memory");
	asm("dsb");
    a204:	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
    a208:	str.w	r4, [r5, #3932]	; 0xf5c
		location += 32;
    a20c:	adds	r4, #32
	} while (location < end_addr);
    a20e:	cmp	r3, r4
    a210:	bhi.n	a208 <rx_queue_transfer+0x30>
	asm("dsb");
    a212:	dsb	sy
	asm("isb");
    a216:	isb	sy
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    a21a:	movs	r0, #3
    a21c:	mov	r1, r6
    a21e:	bl	b784 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    a222:	mov.w	r3, #131072	; 0x20000
    a226:	str.w	r3, [r5, #268]	; 0x10c
}
    a22a:	pop	{r3, r4, r5, r6, r7, pc}
    a22c:	.word	0x20001f20
    a230:	.word	0x20002f20
    a234:	.word	0x20008146

0000a238 <rx_event>:

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    a238:	ldr	r3, [pc, #144]	; (a2cc <rx_event+0x94>)
{
    a23a:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    a23e:	ldrh	r4, [r3, #0]
    a240:	ldr	r3, [r0, #4]
	int i = t->callback_param;
    a242:	ldr	r5, [r0, #28]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    a244:	ubfx	r3, r3, #16, #15
    a248:	subs	r4, r4, r3
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    a24a:	cmp	r4, #0
    a24c:	ble.n	a298 <rx_event+0x60>
		// received a packet with data
		uint32_t head = rx_head;
    a24e:	ldr	r1, [pc, #128]	; (a2d0 <rx_event+0x98>)
		if (head != rx_tail) {
    a250:	ldr	r0, [pc, #128]	; (a2d4 <rx_event+0x9c>)
		uint32_t head = rx_head;
    a252:	ldrb	r2, [r1, #0]
		if (head != rx_tail) {
    a254:	ldrb	r0, [r0, #0]
		uint32_t head = rx_head;
    a256:	uxtb	r3, r2
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
    a258:	ldr	r6, [pc, #124]	; (a2d8 <rx_event+0xa0>)
		if (head != rx_tail) {
    a25a:	cmp	r2, r0
			uint32_t ii = rx_list[head];
    a25c:	ldr	r0, [pc, #124]	; (a2dc <rx_event+0xa4>)
		if (head != rx_tail) {
    a25e:	beq.n	a270 <rx_event+0x38>
			uint32_t ii = rx_list[head];
    a260:	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
    a264:	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    a268:	rsb	r2, r7, #512	; 0x200
    a26c:	cmp	r4, r2
    a26e:	bls.n	a2a2 <rx_event+0x6a>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    a270:	adds	r3, #1
		rx_index[i] = 0;
    a272:	movs	r2, #0
		rx_count[i] = len;
    a274:	strh.w	r4, [r6, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
    a278:	cmp	r3, #8
		rx_index[i] = 0;
    a27a:	ldr	r6, [pc, #100]	; (a2e0 <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
    a27c:	it	hi
    a27e:	movhi	r3, r2
		rx_index[i] = 0;
    a280:	strh.w	r2, [r6, r5, lsl #1]
		rx_list[head] = i;
		rx_head = head;
    a284:	it	ls
    a286:	uxtbls	r2, r3
		rx_list[head] = i;
    a288:	strb	r5, [r0, r3]
		rx_available += len;
    a28a:	ldr	r3, [pc, #88]	; (a2e4 <rx_event+0xac>)
		rx_head = head;
    a28c:	strb	r2, [r1, #0]
		rx_available += len;
    a28e:	ldr	r2, [r3, #0]
    a290:	add	r4, r2
    a292:	str	r4, [r3, #0]
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
    a294:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rx_queue_transfer(i);
    a298:	mov	r0, r5
}
    a29a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_queue_transfer(i);
    a29e:	b.w	a1d8 <rx_queue_transfer>
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    a2a2:	add.w	r0, r7, r8, lsl #9
    a2a6:	ldr	r1, [pc, #64]	; (a2e8 <rx_event+0xb0>)
    a2a8:	mov	r2, r4
				rx_count[ii] = count + len;
    a2aa:	add	r7, r4
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    a2ac:	add	r0, r1
    a2ae:	add.w	r1, r1, r5, lsl #9
    a2b2:	bl	a0a4 <memcpy>
				rx_available += len;
    a2b6:	ldr	r2, [pc, #44]	; (a2e4 <rx_event+0xac>)
				rx_queue_transfer(i);
    a2b8:	mov	r0, r5
				rx_count[ii] = count + len;
    a2ba:	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
    a2be:	ldr	r3, [r2, #0]
    a2c0:	add	r3, r4
}
    a2c2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				rx_available += len;
    a2c6:	str	r3, [r2, #0]
				rx_queue_transfer(i);
    a2c8:	b.w	a1d8 <rx_queue_transfer>
    a2cc:	.word	0x20008146
    a2d0:	.word	0x20008161
    a2d4:	.word	0x20008163
    a2d8:	.word	0x20008080
    a2dc:	.word	0x200080b8
    a2e0:	.word	0x2000809c
    a2e4:	.word	0x20008078
    a2e8:	.word	0x20001f20

0000a2ec <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    a2ec:	ldr	r3, [pc, #116]	; (a364 <usb_serial_flush_callback+0x78>)
    a2ee:	ldrb	r2, [r3, #0]
    a2f0:	cmp	r2, #0
    a2f2:	bne.n	a362 <usb_serial_flush_callback+0x76>
	if (!usb_configuration) return;
    a2f4:	and.w	r3, r2, #255	; 0xff
    a2f8:	ldr	r2, [pc, #108]	; (a368 <usb_serial_flush_callback+0x7c>)
    a2fa:	ldrb	r2, [r2, #0]
    a2fc:	cbz	r2, a362 <usb_serial_flush_callback+0x76>
{
    a2fe:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_available == 0) return;
    a302:	ldr	r5, [pc, #104]	; (a36c <usb_serial_flush_callback+0x80>)
    a304:	ldrh	r2, [r5, #0]
    a306:	cbz	r2, a35e <usb_serial_flush_callback+0x72>
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    a308:	ldr	r6, [pc, #100]	; (a370 <usb_serial_flush_callback+0x84>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    a30a:	rsb	r8, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    a30e:	ldr	r7, [pc, #100]	; (a374 <usb_serial_flush_callback+0x88>)
    a310:	ldrb	r2, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    a312:	ldr	r4, [pc, #100]	; (a378 <usb_serial_flush_callback+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    a314:	add.w	r7, r7, r2, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    a318:	add.w	r4, r4, r2, lsl #11
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    a31c:	mov	r2, r8
    a31e:	mov	r0, r7
    a320:	mov	r1, r4
    a322:	bl	b72c <usb_prepare_transfer>
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    a326:	add.w	r2, r4, r8
	asm volatile("": : :"memory");
	asm("dsb");
    a32a:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    a32e:	mov.w	r3, #3758153728	; 0xe000e000
    a332:	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    a336:	adds	r4, #32
	} while (location < end_addr);
    a338:	cmp	r2, r4
    a33a:	bhi.n	a332 <usb_serial_flush_callback+0x46>
	asm("dsb");
    a33c:	dsb	sy
	asm("isb");
    a340:	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    a344:	movs	r0, #3
    a346:	mov	r1, r7
    a348:	bl	b75c <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    a34c:	ldrb	r3, [r6, #0]
    a34e:	adds	r3, #1
    a350:	uxtb	r3, r3
    a352:	cmp	r3, #3
    a354:	it	hi
    a356:	movhi	r3, #0
    a358:	strb	r3, [r6, #0]
	tx_available = 0;
    a35a:	movs	r3, #0
    a35c:	strh	r3, [r5, #0]
}
    a35e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a362:	bx	lr
    a364:	.word	0x2000816a
    a368:	.word	0x20008171
    a36c:	.word	0x2000814a
    a370:	.word	0x20008168
    a374:	.word	0x20003120
    a378:	.word	0x20003240

0000a37c <usb_serial_write.part.0>:
int usb_serial_write(const void *buffer, uint32_t size)
    a37c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a380:	sub	sp, #20
	while (size > 0) {
    a382:	strd	r1, r0, [sp, #4]
    a386:	cmp	r1, #0
    a388:	beq.w	a50a <usb_serial_write.part.0+0x18e>
	uint32_t sent=0;
    a38c:	movs	r3, #0
    a38e:	ldr	r4, [pc, #384]	; (a510 <usb_serial_write.part.0+0x194>)
    a390:	ldr.w	r8, [pc, #408]	; a52c <usb_serial_write.part.0+0x1b0>
    a394:	ldr.w	sl, [pc, #408]	; a530 <usb_serial_write.part.0+0x1b4>
				wait_begin_at = systick_millis_count;
    a398:	ldr	r7, [pc, #376]	; (a514 <usb_serial_write.part.0+0x198>)
	uint32_t sent=0;
    a39a:	str	r3, [sp, #0]
		tx_noautoflush = 1;
    a39c:	movs	r3, #1
		transfer_t *xfer = tx_transfer + tx_head;
    a39e:	ldr	r2, [pc, #376]	; (a518 <usb_serial_write.part.0+0x19c>)
		tx_noautoflush = 1;
    a3a0:	strb	r3, [r4, #0]
		transfer_t *xfer = tx_transfer + tx_head;
    a3a2:	ldr	r3, [pc, #376]	; (a51c <usb_serial_write.part.0+0x1a0>)
    a3a4:	ldrb	r1, [r3, #0]
		while (!tx_available) {
    a3a6:	ldrh.w	r3, [r8]
		transfer_t *xfer = tx_transfer + tx_head;
    a3aa:	add.w	r9, r2, r1, lsl #5
		while (!tx_available) {
    a3ae:	cmp	r3, #0
    a3b0:	bne.w	a502 <usb_serial_write.part.0+0x186>
		uint32_t wait_begin_at=0;
    a3b4:	mov	r6, r3
		int waiting=0;
    a3b6:	mov	r5, r3
			tx_noautoflush = 0;
    a3b8:	mov	fp, r3
			uint32_t status = usb_transfer_status(xfer);
    a3ba:	mov	r0, r9
    a3bc:	bl	b7a0 <usb_transfer_status>
			if (!(status & 0x80)) {
    a3c0:	ands.w	r0, r0, #128	; 0x80
    a3c4:	beq.w	a4e0 <usb_serial_write.part.0+0x164>
			asm("dsb" ::: "memory");
    a3c8:	dsb	sy
			if (transmit_previous_timeout) return sent;
    a3cc:	ldrb.w	r3, [sl]
			tx_noautoflush = 0;
    a3d0:	strb.w	fp, [r4]
			if (!waiting) {
    a3d4:	cbnz	r5, a3d8 <usb_serial_write.part.0+0x5c>
				wait_begin_at = systick_millis_count;
    a3d6:	ldr	r6, [r7, #0]
			if (transmit_previous_timeout) return sent;
    a3d8:	cmp	r3, #0
    a3da:	bne.n	a4d8 <usb_serial_write.part.0+0x15c>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    a3dc:	ldr	r3, [r7, #0]
    a3de:	subs	r3, r3, r6
    a3e0:	cmp	r3, #120	; 0x78
    a3e2:	bhi.w	a4f4 <usb_serial_write.part.0+0x178>
			if (!usb_configuration) return sent;
    a3e6:	ldr	r3, [pc, #312]	; (a520 <usb_serial_write.part.0+0x1a4>)
    a3e8:	ldrb	r3, [r3, #0]
    a3ea:	cmp	r3, #0
    a3ec:	beq.n	a4d8 <usb_serial_write.part.0+0x15c>
			yield();
    a3ee:	bl	c0b4 <yield>
			tx_noautoflush = 1;
    a3f2:	movs	r2, #1
		while (!tx_available) {
    a3f4:	ldrh.w	r3, [r8]
    a3f8:	mov	r5, r2
			tx_noautoflush = 1;
    a3fa:	strb	r2, [r4, #0]
		while (!tx_available) {
    a3fc:	cmp	r3, #0
    a3fe:	beq.n	a3ba <usb_serial_write.part.0+0x3e>
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    a400:	ldr	r2, [pc, #280]	; (a51c <usb_serial_write.part.0+0x1a0>)
    a402:	rsb	r0, r3, #2048	; 0x800
    a406:	ldrb	r1, [r2, #0]
    a408:	mov	r2, r3
    a40a:	add.w	r0, r0, r1, lsl #11
    a40e:	ldr	r5, [pc, #276]	; (a524 <usb_serial_write.part.0+0x1a8>)
    a410:	lsls	r1, r1, #11
    a412:	add	r0, r5
		if (size >= tx_available) {
    a414:	ldr	r5, [sp, #4]
    a416:	cmp	r5, r2
    a418:	bcs.n	a44a <usb_serial_write.part.0+0xce>
			memcpy(txdata, data, size);
    a41a:	str	r3, [sp, #12]
    a41c:	ldrd	r5, r1, [sp, #4]
    a420:	mov	r2, r5
    a422:	bl	a0a4 <memcpy>
			tx_available -= size;
    a426:	ldr	r3, [sp, #12]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    a428:	mov.w	r2, #3221225472	; 0xc0000000
			tx_available -= size;
    a42c:	subs	r3, r3, r5
    a42e:	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    a432:	ldr	r3, [pc, #244]	; (a528 <usb_serial_write.part.0+0x1ac>)
    a434:	str.w	r2, [r3, #132]	; 0x84
		asm("dsb" ::: "memory");
    a438:	dsb	sy
			sent += size;
    a43c:	ldr	r0, [sp, #0]
		tx_noautoflush = 0;
    a43e:	movs	r3, #0
			sent += size;
    a440:	add	r0, r5
		tx_noautoflush = 0;
    a442:	strb	r3, [r4, #0]
}
    a444:	add	sp, #20
    a446:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    a44a:	ldr	r3, [pc, #216]	; (a524 <usb_serial_write.part.0+0x1a8>)
    a44c:	adds	r5, r1, r3
			memcpy(txdata, data, tx_available);
    a44e:	ldr	r1, [sp, #8]
    a450:	bl	a0a4 <memcpy>
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    a454:	movs	r3, #0
    a456:	mov.w	r2, #2048	; 0x800
    a45a:	mov	r1, r5
    a45c:	mov	r0, r9
    a45e:	bl	b72c <usb_prepare_transfer>
	asm("dsb");
    a462:	dsb	sy
    a466:	add.w	r2, r5, #32
	uint32_t end_addr = (uint32_t)addr + size;
    a46a:	add.w	r3, r5, #2048	; 0x800
    a46e:	cmp	r3, r2
    a470:	ite	cc
    a472:	movcc	r3, #1
    a474:	movcs	r3, #64	; 0x40
		SCB_CACHE_DCCIMVAC = location;
    a476:	mov.w	r2, #3758153728	; 0xe000e000
    a47a:	add.w	r3, r5, r3, lsl #5
    a47e:	str.w	r5, [r2, #3952]	; 0xf70
		location += 32;
    a482:	adds	r5, #32
	} while (location < end_addr);
    a484:	cmp	r3, r5
    a486:	bne.n	a47e <usb_serial_write.part.0+0x102>
	asm("dsb");
    a488:	dsb	sy
	asm("isb");
    a48c:	isb	sy
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    a490:	movs	r0, #3
    a492:	mov	r1, r9
    a494:	bl	b75c <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    a498:	ldr	r2, [pc, #128]	; (a51c <usb_serial_write.part.0+0x1a0>)
    a49a:	ldrb	r3, [r2, #0]
    a49c:	adds	r3, #1
    a49e:	uxtb	r3, r3
    a4a0:	cmp	r3, #3
    a4a2:	itt	hi
    a4a4:	movhi	r3, #0
    a4a6:	ldrhi	r2, [pc, #116]	; (a51c <usb_serial_write.part.0+0x1a0>)
    a4a8:	strb	r3, [r2, #0]
			size -= tx_available;
    a4aa:	ldrh.w	r3, [r8]
    a4ae:	ldr	r2, [sp, #4]
    a4b0:	subs	r1, r2, r3
			sent += tx_available;
    a4b2:	ldr	r2, [sp, #0]
    a4b4:	add	r2, r3
			size -= tx_available;
    a4b6:	str	r1, [sp, #4]
			sent += tx_available;
    a4b8:	str	r2, [sp, #0]
			data += tx_available;
    a4ba:	ldr	r2, [sp, #8]
    a4bc:	add	r2, r3
			tx_available = 0;
    a4be:	movs	r3, #0
			data += tx_available;
    a4c0:	str	r2, [sp, #8]
	USB1_GPTIMER0CTRL = 0;
    a4c2:	ldr	r2, [pc, #100]	; (a528 <usb_serial_write.part.0+0x1ac>)
			tx_available = 0;
    a4c4:	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = 0;
    a4c8:	str.w	r3, [r2, #132]	; 0x84
		asm("dsb" ::: "memory");
    a4cc:	dsb	sy
		tx_noautoflush = 0;
    a4d0:	strb	r3, [r4, #0]
	while (size > 0) {
    a4d2:	cmp	r1, #0
    a4d4:	bne.w	a39c <usb_serial_write.part.0+0x20>
	return sent;
    a4d8:	ldr	r0, [sp, #0]
}
    a4da:	add	sp, #20
    a4dc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				tx_available = TX_SIZE;
    a4e0:	mov.w	r2, #2048	; 0x800
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    a4e4:	ldr	r3, [pc, #52]	; (a51c <usb_serial_write.part.0+0x1a0>)
				transmit_previous_timeout = 0;
    a4e6:	strb.w	r0, [sl]
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    a4ea:	ldrb	r1, [r3, #0]
				break;
    a4ec:	mov	r3, r2
				tx_available = TX_SIZE;
    a4ee:	strh.w	r2, [r8]
				break;
    a4f2:	b.n	a40a <usb_serial_write.part.0+0x8e>
				transmit_previous_timeout = 1;
    a4f4:	movs	r3, #1
				return sent;
    a4f6:	ldr	r0, [sp, #0]
				transmit_previous_timeout = 1;
    a4f8:	strb.w	r3, [sl]
}
    a4fc:	add	sp, #20
    a4fe:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    a502:	mov	r2, r3
    a504:	rsb	r0, r3, #2048	; 0x800
    a508:	b.n	a40a <usb_serial_write.part.0+0x8e>
	while (size > 0) {
    a50a:	ldr	r0, [sp, #4]
	return sent;
    a50c:	b.n	a4da <usb_serial_write.part.0+0x15e>
    a50e:	nop
    a510:	.word	0x2000816a
    a514:	.word	0x200080e4
    a518:	.word	0x20003120
    a51c:	.word	0x20008168
    a520:	.word	0x20008171
    a524:	.word	0x20003240
    a528:	.word	0x402e0000
    a52c:	.word	0x2000814a
    a530:	.word	0x20008166

0000a534 <usb_serial_reset>:
}
    a534:	bx	lr
    a536:	nop

0000a538 <usb_serial_configure>:
	if (usb_high_speed) {
    a538:	ldr	r3, [pc, #168]	; (a5e4 <usb_serial_configure+0xac>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
    a53a:	movs	r1, #0
    a53c:	movs	r2, #128	; 0x80
    a53e:	ldr	r0, [pc, #168]	; (a5e8 <usb_serial_configure+0xb0>)
{
    a540:	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
    a542:	ldrb	r3, [r3, #0]
	tx_head = 0;
    a544:	movs	r4, #0
		tx_packet_size = CDC_TX_SIZE_480;
    a546:	ldr	r5, [pc, #164]	; (a5ec <usb_serial_configure+0xb4>)
	if (usb_high_speed) {
    a548:	cmp	r3, r1
		rx_packet_size = CDC_RX_SIZE_480;
    a54a:	ldr	r6, [pc, #164]	; (a5f0 <usb_serial_configure+0xb8>)
	if (usb_high_speed) {
    a54c:	ite	eq
    a54e:	moveq	r3, #64	; 0x40
    a550:	movne.w	r3, #512	; 0x200
		tx_packet_size = CDC_TX_SIZE_480;
    a554:	strh	r3, [r5, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    a556:	strh	r3, [r6, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    a558:	bl	e044 <memset>
	tx_head = 0;
    a55c:	ldr	r2, [pc, #148]	; (a5f4 <usb_serial_configure+0xbc>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    a55e:	mov	r1, r4
	tx_available = 0;
    a560:	ldr	r3, [pc, #148]	; (a5f8 <usb_serial_configure+0xc0>)
	tx_head = 0;
    a562:	strb	r4, [r2, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    a564:	mov.w	r2, #256	; 0x100
    a568:	ldr	r0, [pc, #144]	; (a5fc <usb_serial_configure+0xc4>)
	tx_available = 0;
    a56a:	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    a56c:	bl	e044 <memset>
	memset(rx_count, 0, sizeof(rx_count));
    a570:	ldr	r2, [pc, #140]	; (a600 <usb_serial_configure+0xc8>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    a572:	movs	r1, #16
	memset(rx_index, 0, sizeof(rx_index));
    a574:	ldr	r3, [pc, #140]	; (a604 <usb_serial_configure+0xcc>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    a576:	movs	r0, #2
	memset(rx_count, 0, sizeof(rx_count));
    a578:	strd	r4, r4, [r2]
    a57c:	strd	r4, r4, [r2, #8]
	rx_head = 0;
    a580:	ldr	r2, [pc, #132]	; (a608 <usb_serial_configure+0xd0>)
	memset(rx_index, 0, sizeof(rx_index));
    a582:	strd	r4, r4, [r3]
	rx_head = 0;
    a586:	strb	r4, [r2, #0]
	rx_available = 0;
    a588:	ldr	r2, [pc, #128]	; (a60c <usb_serial_configure+0xd4>)
	memset(rx_index, 0, sizeof(rx_index));
    a58a:	strd	r4, r4, [r3, #8]
	rx_tail = 0;
    a58e:	ldr	r3, [pc, #128]	; (a610 <usb_serial_configure+0xd8>)
    a590:	strb	r4, [r3, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    a592:	mov	r3, r4
	rx_available = 0;
    a594:	str	r4, [r2, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    a596:	mov	r2, r4
    a598:	bl	b5f8 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    a59c:	mov	r2, r4
    a59e:	ldrh	r1, [r6, #0]
    a5a0:	movs	r0, #3
    a5a2:	ldr	r3, [pc, #112]	; (a614 <usb_serial_configure+0xdc>)
    a5a4:	bl	b594 <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    a5a8:	mov	r3, r4
    a5aa:	movs	r2, #1
    a5ac:	ldrh	r1, [r5, #0]
    a5ae:	movs	r0, #3
    a5b0:	bl	b5f8 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    a5b4:	mov	r0, r4
    a5b6:	adds	r4, #1
    a5b8:	bl	a1d8 <rx_queue_transfer>
    a5bc:	cmp	r4, #8
    a5be:	bne.n	a5b4 <usb_serial_configure+0x7c>
	USB1_GPTIMER0CTRL = 0;
    a5c0:	ldr	r3, [pc, #84]	; (a618 <usb_serial_configure+0xe0>)
	USB1_GPTIMER0LD = microseconds - 1;
    a5c2:	movs	r2, #74	; 0x4a
	usb_timer0_callback = callback;
    a5c4:	ldr	r0, [pc, #84]	; (a61c <usb_serial_configure+0xe4>)
	USB1_GPTIMER0CTRL = 0;
    a5c6:	movs	r1, #0
	usb_timer0_callback = callback;
    a5c8:	ldr	r4, [pc, #84]	; (a620 <usb_serial_configure+0xe8>)
    a5ca:	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
    a5cc:	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    a5d0:	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    a5d4:	ldr.w	r2, [r3, #328]	; 0x148
    a5d8:	orr.w	r2, r2, #16777216	; 0x1000000
    a5dc:	str.w	r2, [r3, #328]	; 0x148
}
    a5e0:	pop	{r4, r5, r6, pc}
    a5e2:	nop
    a5e4:	.word	0x20008172
    a5e8:	.word	0x20003120
    a5ec:	.word	0x2000814e
    a5f0:	.word	0x20008146
    a5f4:	.word	0x20008168
    a5f8:	.word	0x2000814a
    a5fc:	.word	0x20002f20
    a600:	.word	0x20008080
    a604:	.word	0x2000809c
    a608:	.word	0x20008161
    a60c:	.word	0x20008078
    a610:	.word	0x20008163
    a614:	.word	0x0000a239
    a618:	.word	0x402e0000
    a61c:	.word	0x20008128
    a620:	.word	0x0000a2ed

0000a624 <usb_serial_read>:
{
    a624:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
    a628:	mov.w	r3, #3758153728	; 0xe000e000
    a62c:	mov.w	r2, #131072	; 0x20000
	uint32_t tail = rx_tail;
    a630:	ldr.w	sl, [pc, #200]	; a6fc <usb_serial_read+0xd8>
{
    a634:	sub	sp, #12
	NVIC_DISABLE_IRQ(IRQ_USB1);
    a636:	str.w	r2, [r3, #396]	; 0x18c
	while (count < size && tail != rx_head) {
    a63a:	mov	fp, r1
	uint32_t tail = rx_tail;
    a63c:	ldrb.w	r4, [sl]
	while (count < size && tail != rx_head) {
    a640:	cmp	r1, #0
    a642:	beq.n	a6e4 <usb_serial_read+0xc0>
    a644:	mov	r8, r0
    a646:	uxtb	r4, r4
	uint32_t count=0;
    a648:	movs	r7, #0
		uint32_t avail = rx_count[i] - rx_index[i];
    a64a:	ldr.w	r9, [pc, #180]	; a700 <usb_serial_read+0xdc>
	while (count < size && tail != rx_head) {
    a64e:	ldr	r3, [pc, #152]	; (a6e8 <usb_serial_read+0xc4>)
		uint32_t len = size - count;
    a650:	sub.w	r2, fp, r7
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    a654:	ldr	r1, [pc, #148]	; (a6ec <usb_serial_read+0xc8>)
	while (count < size && tail != rx_head) {
    a656:	ldrb	r3, [r3, #0]
    a658:	cmp	r3, r4
		if (++tail > RX_NUM) tail = 0;
    a65a:	add.w	r4, r4, #1
	while (count < size && tail != rx_head) {
    a65e:	beq.n	a6e0 <usb_serial_read+0xbc>
		if (++tail > RX_NUM) tail = 0;
    a660:	cmp	r4, #9
		uint32_t i = rx_list[tail];
    a662:	ldr	r3, [pc, #140]	; (a6f0 <usb_serial_read+0xcc>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    a664:	mov	r0, r8
		if (++tail > RX_NUM) tail = 0;
    a666:	it	cs
    a668:	movcs	r4, #0
		uint32_t i = rx_list[tail];
    a66a:	ldrb	r6, [r3, r4]
		uint32_t avail = rx_count[i] - rx_index[i];
    a66c:	ldrh.w	ip, [r9, r6, lsl #1]
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    a670:	add.w	r3, ip, r6, lsl #9
    a674:	add	r1, r3
		uint32_t avail = rx_count[i] - rx_index[i];
    a676:	ldr	r3, [pc, #124]	; (a6f4 <usb_serial_read+0xd0>)
    a678:	ldrh.w	r5, [r3, r6, lsl #1]
    a67c:	sub.w	r5, r5, ip
		if (avail > len) {
    a680:	cmp	r2, r5
    a682:	bcs.n	a6be <usb_serial_read+0x9a>
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    a684:	add.w	ip, ip, r6, lsl #9
    a688:	ldr	r1, [pc, #96]	; (a6ec <usb_serial_read+0xc8>)
			rx_available -= len;
    a68a:	ldr	r4, [pc, #108]	; (a6f8 <usb_serial_read+0xd4>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    a68c:	add	r1, ip
    a68e:	str	r2, [sp, #4]
    a690:	bl	a0a4 <memcpy>
			rx_available -= len;
    a694:	ldr	r1, [r4, #0]
			rx_index[i] += len;
    a696:	ldrh.w	r5, [r9, r6, lsl #1]
	return count;
    a69a:	mov	r0, fp
			rx_index[i] += len;
    a69c:	ldr	r2, [sp, #4]
			rx_available -= len;
    a69e:	sub.w	r1, r1, fp
			rx_index[i] += len;
    a6a2:	add	r2, r5
			rx_available -= len;
    a6a4:	add	r1, r7
			rx_index[i] += len;
    a6a6:	strh.w	r2, [r9, r6, lsl #1]
			rx_available -= len;
    a6aa:	str	r1, [r4, #0]
	NVIC_ENABLE_IRQ(IRQ_USB1);
    a6ac:	mov.w	r3, #3758153728	; 0xe000e000
    a6b0:	mov.w	r2, #131072	; 0x20000
    a6b4:	str.w	r2, [r3, #268]	; 0x10c
}
    a6b8:	add	sp, #12
    a6ba:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    a6be:	mov	r2, r5
			count += avail;
    a6c0:	add	r7, r5
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    a6c2:	bl	a0a4 <memcpy>
			rx_available -= avail;
    a6c6:	ldr	r1, [pc, #48]	; (a6f8 <usb_serial_read+0xd4>)
			rx_tail = tail;
    a6c8:	uxtb	r3, r4
			rx_queue_transfer(i);
    a6ca:	mov	r0, r6
			rx_available -= avail;
    a6cc:	ldr	r2, [r1, #0]
			p += avail;
    a6ce:	add	r8, r5
			rx_available -= avail;
    a6d0:	subs	r2, r2, r5
    a6d2:	str	r2, [r1, #0]
			rx_tail = tail;
    a6d4:	strb.w	r3, [sl]
			rx_queue_transfer(i);
    a6d8:	bl	a1d8 <rx_queue_transfer>
	while (count < size && tail != rx_head) {
    a6dc:	cmp	fp, r7
    a6de:	bhi.n	a64e <usb_serial_read+0x2a>
	return count;
    a6e0:	mov	r0, r7
    a6e2:	b.n	a6ac <usb_serial_read+0x88>
	while (count < size && tail != rx_head) {
    a6e4:	mov	r0, r1
    a6e6:	b.n	a6ac <usb_serial_read+0x88>
    a6e8:	.word	0x20008161
    a6ec:	.word	0x20001f20
    a6f0:	.word	0x200080b8
    a6f4:	.word	0x20008080
    a6f8:	.word	0x20008078
    a6fc:	.word	0x20008163
    a700:	.word	0x2000809c

0000a704 <usb_serial_peekchar>:
	if (tail == rx_head) return -1;
    a704:	ldr	r3, [pc, #44]	; (a734 <usb_serial_peekchar+0x30>)
	uint32_t tail = rx_tail;
    a706:	ldr	r2, [pc, #48]	; (a738 <usb_serial_peekchar+0x34>)
    a708:	ldrb	r2, [r2, #0]
	if (tail == rx_head) return -1;
    a70a:	ldrb	r1, [r3, #0]
	uint32_t tail = rx_tail;
    a70c:	uxtb	r3, r2
	if (tail == rx_head) return -1;
    a70e:	cmp	r2, r1
    a710:	beq.n	a72e <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
    a712:	adds	r3, #1
	uint32_t i = rx_list[tail];
    a714:	ldr	r0, [pc, #36]	; (a73c <usb_serial_peekchar+0x38>)
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    a716:	ldr	r2, [pc, #40]	; (a740 <usb_serial_peekchar+0x3c>)
	if (++tail > RX_NUM) tail = 0;
    a718:	cmp	r3, #9
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    a71a:	ldr	r1, [pc, #40]	; (a744 <usb_serial_peekchar+0x40>)
	if (++tail > RX_NUM) tail = 0;
    a71c:	it	cs
    a71e:	movcs	r3, #0
	uint32_t i = rx_list[tail];
    a720:	ldrb	r3, [r0, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    a722:	ldrh.w	r1, [r1, r3, lsl #1]
    a726:	add.w	r3, r2, r3, lsl #9
    a72a:	ldrb	r0, [r3, r1]
    a72c:	bx	lr
	if (tail == rx_head) return -1;
    a72e:	mov.w	r0, #4294967295
}
    a732:	bx	lr
    a734:	.word	0x20008161
    a738:	.word	0x20008163
    a73c:	.word	0x200080b8
    a740:	.word	0x20001f20
    a744:	.word	0x2000809c

0000a748 <usb_serial_available>:
	uint32_t n = rx_available;
    a748:	ldr	r3, [pc, #16]	; (a75c <usb_serial_available+0x14>)
{
    a74a:	push	{r4, lr}
	uint32_t n = rx_available;
    a74c:	ldr	r4, [r3, #0]
	if (n == 0) yield();
    a74e:	cbz	r4, a754 <usb_serial_available+0xc>
}
    a750:	mov	r0, r4
    a752:	pop	{r4, pc}
	if (n == 0) yield();
    a754:	bl	c0b4 <yield>
}
    a758:	mov	r0, r4
    a75a:	pop	{r4, pc}
    a75c:	.word	0x20008078

0000a760 <usb_serial_flush_input>:
{
    a760:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tail = rx_tail;
    a764:	ldr	r6, [pc, #80]	; (a7b8 <usb_serial_flush_input+0x58>)
	while (tail != rx_head) {
    a766:	ldr	r5, [pc, #84]	; (a7bc <usb_serial_flush_input+0x5c>)
	uint32_t tail = rx_tail;
    a768:	ldrb	r3, [r6, #0]
	while (tail != rx_head) {
    a76a:	ldrb	r2, [r5, #0]
    a76c:	cmp	r3, r2
    a76e:	beq.n	a7b4 <usb_serial_flush_input+0x54>
    a770:	uxtb	r4, r3
    a772:	ldr.w	r9, [pc, #80]	; a7c4 <usb_serial_flush_input+0x64>
    a776:	ldr.w	fp, [pc, #80]	; a7c8 <usb_serial_flush_input+0x68>
    a77a:	ldr.w	r8, [pc, #80]	; a7cc <usb_serial_flush_input+0x6c>
    a77e:	ldr	r7, [pc, #64]	; (a7c0 <usb_serial_flush_input+0x60>)
		if (++tail > RX_NUM) tail = 0;
    a780:	adds	r4, #1
    a782:	cmp	r4, #8
		rx_tail = tail;
    a784:	uxtb.w	sl, r4
		if (++tail > RX_NUM) tail = 0;
    a788:	bls.n	a78e <usb_serial_flush_input+0x2e>
    a78a:	movs	r4, #0
    a78c:	mov	sl, r4
		uint32_t i = rx_list[tail];
    a78e:	ldrb.w	r0, [r9, r4]
		rx_available -= rx_count[i] - rx_index[i];
    a792:	ldr.w	r3, [fp]
    a796:	ldrh.w	r2, [r8, r0, lsl #1]
    a79a:	ldrh.w	r1, [r7, r0, lsl #1]
    a79e:	subs	r2, r2, r1
    a7a0:	subs	r3, r3, r2
    a7a2:	str.w	r3, [fp]
		rx_queue_transfer(i);
    a7a6:	bl	a1d8 <rx_queue_transfer>
		rx_tail = tail;
    a7aa:	strb.w	sl, [r6]
	while (tail != rx_head) {
    a7ae:	ldrb	r3, [r5, #0]
    a7b0:	cmp	r3, r4
    a7b2:	bne.n	a780 <usb_serial_flush_input+0x20>
}
    a7b4:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a7b8:	.word	0x20008163
    a7bc:	.word	0x20008161
    a7c0:	.word	0x2000809c
    a7c4:	.word	0x200080b8
    a7c8:	.word	0x20008078
    a7cc:	.word	0x20008080

0000a7d0 <usb_serial_getchar>:
{
    a7d0:	push	{lr}
    a7d2:	sub	sp, #12
	if (usb_serial_read(&c, 1)) return c;
    a7d4:	movs	r1, #1
    a7d6:	add.w	r0, sp, #7
    a7da:	bl	a624 <usb_serial_read>
    a7de:	cbz	r0, a7ea <usb_serial_getchar+0x1a>
    a7e0:	ldrb.w	r0, [sp, #7]
}
    a7e4:	add	sp, #12
    a7e6:	ldr.w	pc, [sp], #4
	return -1;
    a7ea:	mov.w	r0, #4294967295
    a7ee:	b.n	a7e4 <usb_serial_getchar+0x14>

0000a7f0 <usb_serial_putchar>:
	if (!usb_configuration) return 0;
    a7f0:	ldr	r3, [pc, #36]	; (a818 <usb_serial_putchar+0x28>)
{
    a7f2:	push	{lr}
    a7f4:	sub	sp, #12
	if (!usb_configuration) return 0;
    a7f6:	ldrb	r3, [r3, #0]
{
    a7f8:	strb.w	r0, [sp, #7]
	if (!usb_configuration) return 0;
    a7fc:	cbz	r3, a80e <usb_serial_putchar+0x1e>
    a7fe:	movs	r1, #1
    a800:	add.w	r0, sp, #7
    a804:	bl	a37c <usb_serial_write.part.0>
}
    a808:	add	sp, #12
    a80a:	ldr.w	pc, [sp], #4
    a80e:	and.w	r0, r3, #255	; 0xff
    a812:	add	sp, #12
    a814:	ldr.w	pc, [sp], #4
    a818:	.word	0x20008171

0000a81c <usb_serial_write>:
	if (!usb_configuration) return 0;
    a81c:	ldr	r3, [pc, #16]	; (a830 <usb_serial_write+0x14>)
    a81e:	ldrb	r3, [r3, #0]
    a820:	and.w	r2, r3, #255	; 0xff
    a824:	cbz	r3, a82a <usb_serial_write+0xe>
    a826:	b.w	a37c <usb_serial_write.part.0>
}
    a82a:	mov	r0, r2
    a82c:	bx	lr
    a82e:	nop
    a830:	.word	0x20008171

0000a834 <usb_serial_write_buffer_free>:
{
    a834:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (uint32_t i=0; i < TX_NUM; i++) {
    a838:	movs	r4, #0
	tx_noautoflush = 1;
    a83a:	ldr.w	r8, [pc, #68]	; a880 <usb_serial_write_buffer_free+0x4c>
    a83e:	movs	r3, #1
    a840:	ldr	r5, [pc, #52]	; (a878 <usb_serial_write_buffer_free+0x44>)
	uint32_t sum = 0;
    a842:	mov	r7, r4
    a844:	ldr	r6, [pc, #52]	; (a87c <usb_serial_write_buffer_free+0x48>)
	tx_noautoflush = 1;
    a846:	strb.w	r3, [r8]
		if (i == tx_head) continue;
    a84a:	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    a84c:	mov	r0, r5
	for (uint32_t i=0; i < TX_NUM; i++) {
    a84e:	adds	r5, #32
		if (i == tx_head) continue;
    a850:	cmp	r3, r4
	for (uint32_t i=0; i < TX_NUM; i++) {
    a852:	add.w	r4, r4, #1
		if (i == tx_head) continue;
    a856:	beq.n	a864 <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    a858:	bl	b7a0 <usb_transfer_status>
    a85c:	lsls	r3, r0, #24
    a85e:	it	pl
    a860:	addpl.w	r7, r7, #2048	; 0x800
	for (uint32_t i=0; i < TX_NUM; i++) {
    a864:	cmp	r4, #4
    a866:	bne.n	a84a <usb_serial_write_buffer_free+0x16>
	asm("dsb" ::: "memory");
    a868:	dsb	sy
	tx_noautoflush = 0;
    a86c:	movs	r3, #0
}
    a86e:	mov	r0, r7
	tx_noautoflush = 0;
    a870:	strb.w	r3, [r8]
}
    a874:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a878:	.word	0x20003120
    a87c:	.word	0x20008168
    a880:	.word	0x2000816a

0000a884 <usb_serial_flush_output>:
{
    a884:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!usb_configuration) return;
    a888:	ldr	r3, [pc, #116]	; (a900 <usb_serial_flush_output+0x7c>)
    a88a:	ldrb	r3, [r3, #0]
    a88c:	cbz	r3, a894 <usb_serial_flush_output+0x10>
	if (tx_available == 0) return;
    a88e:	ldr	r5, [pc, #116]	; (a904 <usb_serial_flush_output+0x80>)
    a890:	ldrh	r2, [r5, #0]
    a892:	cbnz	r2, a898 <usb_serial_flush_output+0x14>
}
    a894:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	transfer_t *xfer = tx_transfer + tx_head;
    a898:	ldr	r6, [pc, #108]	; (a908 <usb_serial_flush_output+0x84>)
	uint32_t txnum = TX_SIZE - tx_available;
    a89a:	rsb	r9, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    a89e:	ldr	r1, [pc, #108]	; (a90c <usb_serial_flush_output+0x88>)
    a8a0:	ldrb	r3, [r6, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    a8a2:	mov	r2, r9
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    a8a4:	ldr	r4, [pc, #104]	; (a910 <usb_serial_flush_output+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    a8a6:	add.w	r8, r1, r3, lsl #5
	tx_noautoflush = 1;
    a8aa:	ldr	r7, [pc, #104]	; (a914 <usb_serial_flush_output+0x90>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    a8ac:	add.w	r4, r4, r3, lsl #11
	tx_noautoflush = 1;
    a8b0:	movs	r3, #1
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    a8b2:	mov	r0, r8
	tx_noautoflush = 1;
    a8b4:	strb	r3, [r7, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    a8b6:	mov	r1, r4
    a8b8:	movs	r3, #0
    a8ba:	bl	b72c <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    a8be:	add.w	r2, r4, r9
	asm("dsb");
    a8c2:	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    a8c6:	mov.w	r3, #3758153728	; 0xe000e000
    a8ca:	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    a8ce:	adds	r4, #32
	} while (location < end_addr);
    a8d0:	cmp	r2, r4
    a8d2:	bhi.n	a8ca <usb_serial_flush_output+0x46>
	asm("dsb");
    a8d4:	dsb	sy
	asm("isb");
    a8d8:	isb	sy
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    a8dc:	movs	r0, #3
    a8de:	mov	r1, r8
    a8e0:	bl	b75c <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    a8e4:	ldrb	r3, [r6, #0]
    a8e6:	adds	r3, #1
    a8e8:	uxtb	r3, r3
    a8ea:	cmp	r3, #3
    a8ec:	it	hi
    a8ee:	movhi	r3, #0
    a8f0:	strb	r3, [r6, #0]
	tx_available = 0;
    a8f2:	movs	r3, #0
    a8f4:	strh	r3, [r5, #0]
	asm("dsb" ::: "memory");
    a8f6:	dsb	sy
	tx_noautoflush = 0;
    a8fa:	strb	r3, [r7, #0]
}
    a8fc:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    a900:	.word	0x20008171
    a904:	.word	0x2000814a
    a908:	.word	0x20008168
    a90c:	.word	0x20003120
    a910:	.word	0x20003240
    a914:	.word	0x2000816a

0000a918 <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    a918:	ldr	r1, [pc, #648]	; (aba4 <set_arm_clock+0x28c>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    a91a:	ldr	r3, [pc, #652]	; (aba8 <set_arm_clock+0x290>)
	if (frequency > 528000000) {
    a91c:	cmp	r0, r1
{
    a91e:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t dcdc = DCDC_REG3;
    a922:	ldr	r4, [pc, #648]	; (abac <set_arm_clock+0x294>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    a924:	ldr	r6, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    a926:	ldr	r2, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    a928:	ldr.w	r8, [r4, #12]
	if (frequency > 528000000) {
    a92c:	bls.n	a966 <set_arm_clock+0x4e>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    a92e:	ldr	r3, [pc, #640]	; (abb0 <set_arm_clock+0x298>)
    a930:	cmp	r0, r3
    a932:	bls.w	ab3a <set_arm_clock+0x222>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    a936:	subs	r3, r0, r3
    a938:	ldr	r1, [pc, #632]	; (abb4 <set_arm_clock+0x29c>)
    a93a:	lsrs	r3, r3, #8
    a93c:	umull	r1, r3, r1, r3
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    a940:	movw	r1, #1575	; 0x627
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    a944:	lsrs	r3, r3, #7
    a946:	add.w	r3, r3, r3, lsl #2
    a94a:	add.w	r3, r3, r3, lsl #2
    a94e:	addw	r3, r3, #1250	; 0x4e2
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    a952:	cmp	r3, r1
    a954:	it	cs
    a956:	movcs	r3, r1
    a958:	sub.w	r7, r3, #800	; 0x320
    a95c:	ldr	r3, [pc, #600]	; (abb8 <set_arm_clock+0x2a0>)
    a95e:	umull	r3, r7, r3, r7
    a962:	lsrs	r7, r7, #3
    a964:	b.n	a970 <set_arm_clock+0x58>
	} else if (frequency <= 24000000) {
    a966:	ldr	r7, [pc, #596]	; (abbc <set_arm_clock+0x2a4>)
    a968:	cmp	r0, r7
    a96a:	ite	hi
    a96c:	movhi	r7, #14
    a96e:	movls	r7, #6
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    a970:	ldr	r1, [pc, #564]	; (aba8 <set_arm_clock+0x290>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    a972:	and.w	r9, r8, #31
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    a976:	ldr.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    a97a:	cmp	r9, r7
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    a97c:	orr.w	r3, r3, #192	; 0xc0
    a980:	str.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    a984:	bcs.n	a9a0 <set_arm_clock+0x88>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    a986:	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    a98a:	sub.w	r1, r1, #507904	; 0x7c000
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    a98e:	orr.w	r8, r8, r7
		DCDC_REG3 = dcdc;
    a992:	str.w	r8, [r1, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    a996:	ldr	r3, [r1, #0]
    a998:	cmp	r3, #0
    a99a:	bge.n	a996 <set_arm_clock+0x7e>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    a99c:	and.w	r9, r8, #31
	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    a9a0:	ands.w	r3, r6, #33554432	; 0x2000000
    a9a4:	bne.n	a9f0 <set_arm_clock+0xd8>
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    a9a6:	ldr	r1, [pc, #536]	; (abc0 <set_arm_clock+0x2a8>)
    a9a8:	ldr	r4, [r1, #16]
    a9aa:	ldr	r1, [pc, #536]	; (abc4 <set_arm_clock+0x2ac>)
    a9ac:	bics	r1, r4
    a9ae:	beq.w	ab86 <set_arm_clock+0x26e>
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    a9b2:	eor.w	r1, r2, #4096	; 0x1000
    a9b6:	mov	r4, r6
    a9b8:	mov.w	r5, #4096	; 0x1000
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    a9bc:	tst.w	r4, #939524096	; 0x38000000
    a9c0:	beq.n	a9cc <set_arm_clock+0xb4>
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    a9c2:	bic.w	r6, r6, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    a9c6:	orrs	r6, r3
			CCM_CBCDR = cbcdr;
    a9c8:	ldr	r3, [pc, #476]	; (aba8 <set_arm_clock+0x290>)
    a9ca:	str	r6, [r3, #20]
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    a9cc:	tst.w	r1, #12288	; 0x3000
    a9d0:	beq.n	a9e2 <set_arm_clock+0xca>
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    a9d2:	bic.w	r2, r2, #12288	; 0x3000
			CCM_CBCMR = cbcmr;
    a9d6:	ldr	r1, [pc, #464]	; (aba8 <set_arm_clock+0x290>)
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    a9d8:	orrs	r2, r5
			CCM_CBCMR = cbcmr;
    a9da:	str	r2, [r1, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    a9dc:	ldr	r3, [r1, #72]	; 0x48
    a9de:	lsls	r2, r3, #28
    a9e0:	bmi.n	a9dc <set_arm_clock+0xc4>
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    a9e2:	orr.w	r6, r6, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    a9e6:	ldr	r2, [pc, #448]	; (aba8 <set_arm_clock+0x290>)
    a9e8:	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    a9ea:	ldr	r3, [r2, #72]	; 0x48
    a9ec:	lsls	r3, r3, #26
    a9ee:	bmi.n	a9ea <set_arm_clock+0xd2>
	while (frequency * div_arm * div_ahb < 648000000) {
    a9f0:	ldr	r4, [pc, #468]	; (abc8 <set_arm_clock+0x2b0>)
    a9f2:	cmp	r0, r4
    a9f4:	bhi.w	ab94 <set_arm_clock+0x27c>
	uint32_t div_ahb = 1;
    a9f8:	mov.w	ip, #1
    a9fc:	mov	r1, r0
	uint32_t div_arm = 1;
    a9fe:	mov	r3, ip
	while (frequency * div_arm * div_ahb < 648000000) {
    aa00:	mla	r2, r3, r1, r1
			div_arm = div_arm + 1;
    aa04:	add.w	lr, r3, #1
				div_ahb = div_ahb + 1;
    aa08:	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    aa0c:	cmp	r2, r4
    aa0e:	bhi.n	aa42 <set_arm_clock+0x12a>
		if (div_arm < 8) {
    aa10:	cmp.w	lr, #8
				div_arm = 1;
    aa14:	mov.w	r3, #1
		if (div_arm < 8) {
    aa18:	bne.w	ab36 <set_arm_clock+0x21e>
			if (div_ahb < 5) {
    aa1c:	cmp.w	ip, #4
    aa20:	bhi.w	ab46 <set_arm_clock+0x22e>
	while (frequency * div_arm * div_ahb < 648000000) {
    aa24:	adds	r2, r1, r0
    aa26:	cmp	r2, r4
    aa28:	bhi.w	ab74 <set_arm_clock+0x25c>
    aa2c:	mul.w	r1, r5, r0
				div_ahb = div_ahb + 1;
    aa30:	mov	ip, r5
			div_arm = div_arm + 1;
    aa32:	add.w	lr, r3, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    aa36:	mla	r2, r3, r1, r1
				div_ahb = div_ahb + 1;
    aa3a:	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    aa3e:	cmp	r2, r4
    aa40:	bls.n	aa10 <set_arm_clock+0xf8>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    aa42:	add.w	r1, ip, #4294967295
    aa46:	lsls	r4, r1, #10
    aa48:	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    aa4c:	ldr	r0, [pc, #380]	; (abcc <set_arm_clock+0x2b4>)
    aa4e:	add	r0, r2
	if (mult > 108) mult = 108;
    aa50:	ldr	r2, [pc, #380]	; (abd0 <set_arm_clock+0x2b8>)
    aa52:	cmp	r0, r2
    aa54:	bls.n	ab56 <set_arm_clock+0x23e>
    aa56:	ldr.w	sl, [pc, #420]	; abfc <set_arm_clock+0x2e4>
    aa5a:	movs	r2, #108	; 0x6c
    aa5c:	ldr	r0, [pc, #372]	; (abd4 <set_arm_clock+0x2bc>)
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    aa5e:	ldr	r5, [pc, #352]	; (abc0 <set_arm_clock+0x2a8>)
	frequency = mult * 12000000 / div_arm / div_ahb;
    aa60:	udiv	r0, r0, lr
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    aa64:	ldr.w	lr, [r5]
	frequency = mult * 12000000 / div_arm / div_ahb;
    aa68:	udiv	r0, r0, ip
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    aa6c:	ldr.w	ip, [pc, #400]	; ac00 <set_arm_clock+0x2e8>
    aa70:	and.w	ip, lr, ip
    aa74:	cmp	ip, sl
    aa76:	beq.n	aa8c <set_arm_clock+0x174>
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    aa78:	orr.w	r2, r2, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    aa7c:	mov.w	ip, #4096	; 0x1000
    aa80:	str.w	ip, [r5]
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    aa84:	str	r2, [r5, #0]
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    aa86:	ldr	r2, [r5, #0]
    aa88:	cmp	r2, #0
    aa8a:	bge.n	aa86 <set_arm_clock+0x16e>
	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    aa8c:	ldr	r2, [pc, #280]	; (aba8 <set_arm_clock+0x290>)
    aa8e:	ldr	r5, [r2, #16]
    aa90:	and.w	r5, r5, #7
    aa94:	cmp	r5, r3
    aa96:	beq.n	aaa0 <set_arm_clock+0x188>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    aa98:	str	r3, [r2, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    aa9a:	ldr	r3, [r2, #72]	; 0x48
    aa9c:	lsls	r5, r3, #15
    aa9e:	bmi.n	aa9a <set_arm_clock+0x182>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    aaa0:	tst.w	r1, #7168	; 0x1c00
    aaa4:	beq.n	aaba <set_arm_clock+0x1a2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    aaa6:	bic.w	r6, r6, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    aaaa:	and.w	r4, r4, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
    aaae:	ldr	r2, [pc, #248]	; (aba8 <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    aab0:	orrs	r6, r4
		CCM_CBCDR = cbcdr;
    aab2:	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    aab4:	ldr	r3, [r2, #72]	; 0x48
    aab6:	lsls	r1, r3, #30
    aab8:	bmi.n	aab4 <set_arm_clock+0x19c>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    aaba:	ldr	r1, [pc, #284]	; (abd8 <set_arm_clock+0x2c0>)
	if (div_ipg > 4) div_ipg = 4;
    aabc:	ldr	r2, [pc, #284]	; (abdc <set_arm_clock+0x2c4>)
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    aabe:	add	r1, r0
	if (div_ipg > 4) div_ipg = 4;
    aac0:	cmp	r1, r2
    aac2:	bhi.n	ab3e <set_arm_clock+0x226>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    aac4:	ldr	r3, [pc, #280]	; (abe0 <set_arm_clock+0x2c8>)
    aac6:	lsrs	r1, r1, #7
    aac8:	umull	r3, r1, r3, r1
    aacc:	lsrs	r1, r1, #12
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    aace:	subs	r3, r1, #1
    aad0:	lsls	r3, r3, #8
    aad2:	eor.w	r2, r6, r3
    aad6:	tst.w	r2, #768	; 0x300
    aada:	beq.n	aaea <set_arm_clock+0x1d2>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    aadc:	bic.w	r6, r6, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    aae0:	and.w	r3, r3, #768	; 0x300
		CCM_CBCDR = cbcdr;
    aae4:	ldr	r2, [pc, #192]	; (aba8 <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    aae6:	orrs	r3, r6
		CCM_CBCDR = cbcdr;
    aae8:	str	r3, [r2, #20]
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    aaea:	ldr	r2, [pc, #188]	; (aba8 <set_arm_clock+0x290>)
    aaec:	ldr	r3, [r2, #20]
    aaee:	bic.w	r3, r3, #33554432	; 0x2000000
    aaf2:	str	r3, [r2, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    aaf4:	ldr	r3, [r2, #72]	; 0x48
    aaf6:	lsls	r3, r3, #26
    aaf8:	bmi.n	aaf4 <set_arm_clock+0x1dc>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    aafa:	ldr	r3, [pc, #232]	; (abe4 <set_arm_clock+0x2cc>)
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    aafc:	cmp	r7, r9
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    aafe:	umull	r2, r3, r3, r0
    ab02:	mov.w	r2, #4294967295
    ab06:	mov.w	r3, r3, lsr #18
	F_BUS_ACTUAL = frequency / div_ipg;
    ab0a:	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    ab0e:	udiv	r3, r2, r3
	F_CPU_ACTUAL = frequency;
    ab12:	ldr	r2, [pc, #212]	; (abe8 <set_arm_clock+0x2d0>)
    ab14:	str	r0, [r2, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
    ab16:	ldr	r2, [pc, #212]	; (abec <set_arm_clock+0x2d4>)
    ab18:	str	r1, [r2, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    ab1a:	ldr	r2, [pc, #212]	; (abf0 <set_arm_clock+0x2d8>)
    ab1c:	str	r3, [r2, #0]
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    ab1e:	bcs.n	ab32 <set_arm_clock+0x21a>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    ab20:	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    ab24:	ldr	r2, [pc, #132]	; (abac <set_arm_clock+0x294>)
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    ab26:	orr.w	r7, r8, r7
		DCDC_REG3 = dcdc;
    ab2a:	str	r7, [r2, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    ab2c:	ldr	r3, [r2, #0]
    ab2e:	cmp	r3, #0
    ab30:	bge.n	ab2c <set_arm_clock+0x214>
	}

	return frequency;
}
    ab32:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ab36:	mov	r3, lr
    ab38:	b.n	aa00 <set_arm_clock+0xe8>
    ab3a:	movs	r7, #18
    ab3c:	b.n	a970 <set_arm_clock+0x58>
    ab3e:	mov.w	r3, #768	; 0x300
	if (div_ipg > 4) div_ipg = 4;
    ab42:	movs	r1, #4
    ab44:	b.n	aad2 <set_arm_clock+0x1ba>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    ab46:	add.w	r1, ip, #4294967295
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    ab4a:	ldr	r0, [pc, #128]	; (abcc <set_arm_clock+0x2b4>)
    ab4c:	movs	r3, #7
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    ab4e:	lsls	r4, r1, #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    ab50:	add	r0, r2
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    ab52:	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    ab56:	ldr	r2, [pc, #156]	; (abf4 <set_arm_clock+0x2dc>)
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    ab58:	ldr.w	sl, [pc, #168]	; ac04 <set_arm_clock+0x2ec>
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    ab5c:	umull	r2, r0, r2, r0
    ab60:	lsrs	r2, r0, #20
	frequency = mult * 12000000 / div_arm / div_ahb;
    ab62:	ldr	r0, [pc, #148]	; (abf8 <set_arm_clock+0x2e0>)
    ab64:	cmp	r2, #54	; 0x36
    ab66:	it	cc
    ab68:	movcc	r2, #54	; 0x36
    ab6a:	mul.w	r0, r2, r0
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    ab6e:	orr.w	sl, r2, sl
    ab72:	b.n	aa5e <set_arm_clock+0x146>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    ab74:	mov.w	r4, ip, lsl #10
    ab78:	movs	r3, #0
    ab7a:	eor.w	r1, r6, ip, lsl #10
				div_arm = 1;
    ab7e:	mov.w	lr, #1
				div_ahb = div_ahb + 1;
    ab82:	mov	ip, r5
    ab84:	b.n	aa4c <set_arm_clock+0x134>
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    ab86:	mov	r5, r3
    ab88:	eor.w	r4, r6, #402653184	; 0x18000000
    ab8c:	mov	r1, r2
    ab8e:	mov.w	r3, #402653184	; 0x18000000
    ab92:	b.n	a9bc <set_arm_clock+0xa4>
	while (frequency * div_arm * div_ahb < 648000000) {
    ab94:	movs	r4, #0
	uint32_t div_ahb = 1;
    ab96:	mov.w	ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    ab9a:	mov	r2, r0
    ab9c:	mov	r1, r6
    ab9e:	mov	r3, r4
	uint32_t div_arm = 1;
    aba0:	mov	lr, ip
    aba2:	b.n	aa4c <set_arm_clock+0x134>
    aba4:	.word	0x1f78a400
    aba8:	.word	0x400fc000
    abac:	.word	0x40080000
    abb0:	.word	0x23c34600
    abb4:	.word	0x004cb223
    abb8:	.word	0x51eb851f
    abbc:	.word	0x016e3600
    abc0:	.word	0x400d8000
    abc4:	.word	0x80003040
    abc8:	.word	0x269fb1ff
    abcc:	.word	0x005b8d80
    abd0:	.word	0x4df67eff
    abd4:	.word	0x4d3f6400
    abd8:	.word	0x08f0d17f
    abdc:	.word	0x2cb4177f
    abe0:	.word	0x00e5109f
    abe4:	.word	0x431bde83
    abe8:	.word	0x20001458
    abec:	.word	0x20001454
    abf0:	.word	0x200080dc
    abf4:	.word	0x165e9f81
    abf8:	.word	0x00b71b00
    abfc:	.word	0x8000206c
    ac00:	.word	0x8001307f
    ac04:	.word	0x80002000

0000ac08 <endpoint0_receive>:
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
	while (USB1_ENDPTPRIME) ;
}

static void endpoint0_receive(void *data, uint32_t len, int notify)
{
    ac08:	push	{r4, r5}
	//printf("rx %lu\n", len);
	if (len > 0) {
    ac0a:	cmp	r1, #0
    ac0c:	bne.n	ac72 <endpoint0_receive+0x6a>
    ac0e:	ldr	r4, [pc, #172]	; (acbc <endpoint0_receive+0xb4>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    ac10:	ldr	r3, [pc, #172]	; (acc0 <endpoint0_receive+0xb8>)
    ac12:	movs	r1, #1
    ac14:	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    ac16:	cbz	r2, ac50 <endpoint0_receive+0x48>
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    ac18:	ldr	r1, [pc, #168]	; (acc4 <endpoint0_receive+0xbc>)
	endpoint0_transfer_ack.pointer0 = 0;
    ac1a:	movs	r2, #0
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    ac1c:	movw	r5, #32896	; 0x8080
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    ac20:	mov.w	r0, #65537	; 0x10001
	endpoint0_transfer_ack.pointer0 = 0;
    ac24:	str	r2, [r3, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    ac26:	str	r5, [r3, #4]
	endpoint_queue_head[1].status = 0;
    ac28:	strd	r3, r2, [r4, #72]	; 0x48
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    ac2c:	str.w	r0, [r1, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    ac30:	mov.w	r2, #65536	; 0x10000
	USB1_ENDPTPRIME |= (1<<16);
    ac34:	ldr.w	r3, [r1, #432]	; 0x1b0
    ac38:	orrs	r3, r2
    ac3a:	str.w	r3, [r1, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    ac3e:	ldr	r3, [pc, #136]	; (acc8 <endpoint0_receive+0xc0>)
	while (USB1_ENDPTPRIME) ;
    ac40:	ldr	r1, [pc, #128]	; (acc4 <endpoint0_receive+0xbc>)
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    ac42:	str	r2, [r3, #0]
	while (USB1_ENDPTPRIME) ;
    ac44:	ldr.w	r3, [r1, #432]	; 0x1b0
    ac48:	cmp	r3, #0
    ac4a:	bne.n	ac44 <endpoint0_receive+0x3c>
}
    ac4c:	pop	{r4, r5}
    ac4e:	bx	lr
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    ac50:	ldr	r1, [pc, #112]	; (acc4 <endpoint0_receive+0xbc>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    ac52:	movs	r5, #128	; 0x80
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    ac54:	mov.w	r0, #65537	; 0x10001
	endpoint0_transfer_ack.pointer0 = 0;
    ac58:	str	r2, [r3, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    ac5a:	str	r5, [r3, #4]
	endpoint_queue_head[1].status = 0;
    ac5c:	strd	r3, r2, [r4, #72]	; 0x48
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    ac60:	str.w	r0, [r1, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    ac64:	ldr.w	r3, [r1, #432]	; 0x1b0
    ac68:	orr.w	r3, r3, #65536	; 0x10000
    ac6c:	str.w	r3, [r1, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    ac70:	b.n	ac3e <endpoint0_receive+0x36>
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    ac72:	lsls	r1, r1, #16
		endpoint0_transfer_data.next = 1;
    ac74:	ldr	r3, [pc, #84]	; (accc <endpoint0_receive+0xc4>)
    ac76:	movs	r4, #1
		endpoint_queue_head[0].status = 0;
    ac78:	movs	r5, #0
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    ac7a:	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    ac7e:	str	r0, [r3, #8]
		endpoint0_transfer_data.next = 1;
    ac80:	str	r4, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    ac82:	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    ac84:	add.w	r1, r0, #4096	; 0x1000
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    ac88:	ldr	r4, [pc, #48]	; (acbc <endpoint0_receive+0xb4>)
		endpoint0_transfer_data.pointer1 = addr + 4096;
    ac8a:	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    ac8c:	add.w	r1, r0, #8192	; 0x2000
		endpoint_queue_head[0].status = 0;
    ac90:	str	r5, [r4, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    ac92:	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    ac94:	add.w	r1, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    ac98:	add.w	r0, r0, #16384	; 0x4000
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    ac9c:	str	r3, [r4, #8]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    ac9e:	str	r1, [r3, #20]
		USB1_ENDPTPRIME |= (1<<0);
    aca0:	ldr	r1, [pc, #32]	; (acc4 <endpoint0_receive+0xbc>)
		endpoint0_transfer_data.pointer4 = addr + 16384;
    aca2:	str	r0, [r3, #24]
		USB1_ENDPTPRIME |= (1<<0);
    aca4:	ldr.w	r3, [r1, #432]	; 0x1b0
    aca8:	orr.w	r3, r3, #1
    acac:	str.w	r3, [r1, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    acb0:	ldr.w	r3, [r1, #432]	; 0x1b0
    acb4:	cmp	r3, #0
    acb6:	bne.n	acb0 <endpoint0_receive+0xa8>
    acb8:	b.n	ac10 <endpoint0_receive+0x8>
    acba:	nop
    acbc:	.word	0x20000000
    acc0:	.word	0x20001ee0
    acc4:	.word	0x402e0000
    acc8:	.word	0x2000798c
    accc:	.word	0x20001f00

0000acd0 <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    acd0:	ldr	r3, [r0, #56]	; 0x38
{
    acd2:	push	{r4, r5, r6, r7}
	if (endpoint->callback_function) {
    acd4:	cbz	r3, acde <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    acd6:	ldr	r3, [r2, #4]
    acd8:	orr.w	r3, r3, #32768	; 0x8000
    acdc:	str	r3, [r2, #4]
	}
	__disable_irq();
    acde:	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    ace0:	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    ace2:	cbz	r4, ad34 <schedule_transfer+0x64>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    ace4:	ldr	r3, [pc, #104]	; (ad50 <schedule_transfer+0x80>)
		last->next = (uint32_t)transfer;
    ace6:	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    ace8:	ldr.w	r4, [r3, #432]	; 0x1b0
    acec:	tst	r4, r1
    acee:	bne.n	ad2c <schedule_transfer+0x5c>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    acf0:	ldr	r6, [pc, #96]	; (ad54 <schedule_transfer+0x84>)
    acf2:	ldr	r7, [r6, #4]
    acf4:	b.n	ad00 <schedule_transfer+0x30>
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    acf6:	ldr	r4, [r6, #4]
    acf8:	subs	r4, r4, r7
    acfa:	cmp.w	r4, #2400	; 0x960
    acfe:	bcs.n	ad18 <schedule_transfer+0x48>
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    ad00:	ldr.w	r4, [r3, #320]	; 0x140
    ad04:	orr.w	r4, r4, #16384	; 0x4000
    ad08:	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    ad0c:	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    ad10:	ldr.w	r4, [r3, #320]	; 0x140
    ad14:	lsls	r4, r4, #17
    ad16:	bpl.n	acf6 <schedule_transfer+0x26>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    ad18:	ands	r5, r1
    ad1a:	bne.n	ad2c <schedule_transfer+0x5c>
		//ret |= 0x02;
		endpoint->next = (uint32_t)transfer;
		endpoint->status = 0;
		USB1_ENDPTPRIME |= epmask;
    ad1c:	ldr	r4, [pc, #48]	; (ad50 <schedule_transfer+0x80>)
		endpoint->status = 0;
    ad1e:	strd	r2, r5, [r0, #8]
		USB1_ENDPTPRIME |= epmask;
    ad22:	ldr.w	r3, [r4, #432]	; 0x1b0
    ad26:	orrs	r3, r1
    ad28:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
	USB1_ENDPTPRIME |= epmask;
	endpoint->first_transfer = transfer;
end:
	endpoint->last_transfer = transfer;
    ad2c:	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    ad2e:	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    ad30:	pop	{r4, r5, r6, r7}
    ad32:	bx	lr
	USB1_ENDPTPRIME |= epmask;
    ad34:	ldr	r5, [pc, #24]	; (ad50 <schedule_transfer+0x80>)
	endpoint->status = 0;
    ad36:	strd	r2, r4, [r0, #8]
	USB1_ENDPTPRIME |= epmask;
    ad3a:	ldr.w	r3, [r5, #432]	; 0x1b0
    ad3e:	orrs	r3, r1
    ad40:	str.w	r3, [r5, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    ad44:	str	r2, [r0, #48]	; 0x30
	endpoint->last_transfer = transfer;
    ad46:	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    ad48:	cpsie	i
}
    ad4a:	pop	{r4, r5, r6, r7}
    ad4c:	bx	lr
    ad4e:	nop
    ad50:	.word	0x402e0000
    ad54:	.word	0xe0001000

0000ad58 <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    ad58:	push	{r4, r5, r6, lr}
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    ad5a:	ldr	r5, [r0, #48]	; 0x30
	if (first == NULL) return;
    ad5c:	cbz	r5, ad86 <run_callbacks+0x2e>
    ad5e:	mov	r6, r0
    ad60:	mov	r2, r5

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
    ad62:	movs	r4, #0
    ad64:	b.n	ad6e <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
    ad66:	ldr	r2, [r2, #0]
		count++;
    ad68:	adds	r4, #1
		if ((uint32_t)t == 1) {
    ad6a:	cmp	r2, #1
    ad6c:	beq.n	ad88 <run_callbacks+0x30>
		if (t->status & (1<<7)) {
    ad6e:	ldr	r3, [r2, #4]
    ad70:	ands.w	r3, r3, #128	; 0x80
    ad74:	beq.n	ad66 <run_callbacks+0xe>
			ep->first_transfer = t;
    ad76:	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    ad78:	cbz	r4, ad86 <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
    ad7a:	mov	r0, r5
		ep->callback_function(first);
    ad7c:	ldr	r3, [r6, #56]	; 0x38
		transfer_t *next = (transfer_t *)first->next;
    ad7e:	ldr	r5, [r5, #0]
		ep->callback_function(first);
    ad80:	blx	r3
	while (count) {
    ad82:	subs	r4, #1
    ad84:	bne.n	ad7a <run_callbacks+0x22>
		first = next;
		count--;
	}
}
    ad86:	pop	{r4, r5, r6, pc}
			ep->last_transfer = NULL;
    ad88:	strd	r3, r3, [r6, #48]	; 0x30
			break;
    ad8c:	b.n	ad78 <run_callbacks+0x20>
    ad8e:	nop

0000ad90 <endpoint0_transmit.constprop.0>:
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    ad90:	push	{r4, r5}
	if (len > 0) {
    ad92:	cbnz	r1, adcc <endpoint0_transmit.constprop.0+0x3c>
    ad94:	ldr	r4, [pc, #124]	; (ae14 <endpoint0_transmit.constprop.0+0x84>)
	endpoint0_transfer_ack.next = 1;
    ad96:	ldr	r3, [pc, #128]	; (ae18 <endpoint0_transmit.constprop.0+0x88>)
	endpoint0_transfer_ack.pointer0 = 0;
    ad98:	movs	r1, #0
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    ad9a:	ldr	r2, [pc, #128]	; (ae1c <endpoint0_transmit.constprop.0+0x8c>)
	endpoint0_transfer_ack.next = 1;
    ad9c:	movs	r5, #1
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    ad9e:	mov.w	r0, #65537	; 0x10001
	endpoint0_transfer_ack.pointer0 = 0;
    ada2:	str	r1, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    ada4:	str	r5, [r3, #0]
	endpoint_queue_head[0].status = 0;
    ada6:	strd	r3, r1, [r4, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    adaa:	movs	r4, #128	; 0x80
    adac:	str	r4, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    adae:	str.w	r0, [r2, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    adb2:	ldr.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    adb6:	ldr	r0, [pc, #104]	; (ae20 <endpoint0_transmit.constprop.0+0x90>)
	USB1_ENDPTPRIME |= (1<<0);
    adb8:	orrs	r3, r5
    adba:	str.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    adbe:	str	r1, [r0, #0]
	while (USB1_ENDPTPRIME) ;
    adc0:	ldr.w	r3, [r2, #432]	; 0x1b0
    adc4:	cmp	r3, #0
    adc6:	bne.n	adc0 <endpoint0_transmit.constprop.0+0x30>
}
    adc8:	pop	{r4, r5}
    adca:	bx	lr
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    adcc:	lsls	r1, r1, #16
		endpoint0_transfer_data.next = 1;
    adce:	ldr	r3, [pc, #84]	; (ae24 <endpoint0_transmit.constprop.0+0x94>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    add0:	ldr	r4, [pc, #64]	; (ae14 <endpoint0_transmit.constprop.0+0x84>)
		endpoint0_transfer_data.next = 1;
    add2:	movs	r5, #1
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    add4:	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    add8:	str	r0, [r3, #8]
		USB1_ENDPTPRIME |= (1<<16);
    adda:	ldr	r2, [pc, #64]	; (ae1c <endpoint0_transmit.constprop.0+0x8c>)
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    addc:	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    adde:	add.w	r1, r0, #4096	; 0x1000
		endpoint0_transfer_data.next = 1;
    ade2:	str	r5, [r3, #0]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    ade4:	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    ade6:	add.w	r1, r0, #8192	; 0x2000
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    adea:	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.pointer2 = addr + 8192;
    adec:	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    adee:	add.w	r1, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    adf2:	add.w	r0, r0, #16384	; 0x4000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    adf6:	str	r1, [r3, #20]
		endpoint_queue_head[1].status = 0;
    adf8:	movs	r1, #0
		endpoint0_transfer_data.pointer4 = addr + 16384;
    adfa:	str	r0, [r3, #24]
		endpoint_queue_head[1].status = 0;
    adfc:	str	r1, [r4, #76]	; 0x4c
		USB1_ENDPTPRIME |= (1<<16);
    adfe:	ldr.w	r3, [r2, #432]	; 0x1b0
    ae02:	orr.w	r3, r3, #65536	; 0x10000
    ae06:	str.w	r3, [r2, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    ae0a:	ldr.w	r3, [r2, #432]	; 0x1b0
    ae0e:	cmp	r3, #0
    ae10:	bne.n	ae0a <endpoint0_transmit.constprop.0+0x7a>
    ae12:	b.n	ad96 <endpoint0_transmit.constprop.0+0x6>
    ae14:	.word	0x20000000
    ae18:	.word	0x20001ee0
    ae1c:	.word	0x402e0000
    ae20:	.word	0x2000798c
    ae24:	.word	0x20001f00

0000ae28 <usb_stop_sof_interrupts>:
	sof_usage &= ~(1 << interface);
    ae28:	ldr	r1, [pc, #32]	; (ae4c <usb_stop_sof_interrupts+0x24>)
    ae2a:	movs	r2, #1
    ae2c:	ldrb	r3, [r1, #0]
    ae2e:	lsl.w	r0, r2, r0
    ae32:	bic.w	r0, r3, r0
    ae36:	strb	r0, [r1, #0]
	if (sof_usage == 0) {
    ae38:	cbnz	r0, ae48 <usb_stop_sof_interrupts+0x20>
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    ae3a:	ldr	r2, [pc, #20]	; (ae50 <usb_stop_sof_interrupts+0x28>)
    ae3c:	ldr.w	r3, [r2, #328]	; 0x148
    ae40:	bic.w	r3, r3, #128	; 0x80
    ae44:	str.w	r3, [r2, #328]	; 0x148
}
    ae48:	bx	lr
    ae4a:	nop
    ae4c:	.word	0x20008165
    ae50:	.word	0x402e0000

0000ae54 <usb_isr>:
{
    ae54:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t status = USB1_USBSTS;
    ae58:	ldr	r4, [pc, #672]	; (b0fc <usb_isr+0x2a8>)
{
    ae5a:	sub	sp, #28
	uint32_t status = USB1_USBSTS;
    ae5c:	ldr.w	r6, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    ae60:	lsls	r1, r6, #31
	USB1_USBSTS = status;
    ae62:	str.w	r6, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    ae66:	bpl.w	afa2 <usb_isr+0x14e>
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    ae6a:	ldr.w	r3, [r4, #428]	; 0x1ac
		while (setupstatus) {
    ae6e:	cmp	r3, #0
    ae70:	beq.n	af3a <usb_isr+0xe6>
    ae72:	ldr	r5, [pc, #652]	; (b100 <usb_isr+0x2ac>)
    ae74:	ldr.w	r9, [pc, #656]	; b108 <usb_isr+0x2b4>
		usb_configuration = setup.wValue;
    ae78:	ldr.w	fp, [pc, #684]	; b128 <usb_isr+0x2d4>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    ae7c:	ldr.w	r8, [pc, #684]	; b12c <usb_isr+0x2d8>
			USB1_ENDPTSETUPSTAT = setupstatus;
    ae80:	str.w	r3, [r4, #428]	; 0x1ac
				s.word2 = endpoint_queue_head[0].setup1;
    ae84:	ldrd	r7, r0, [r5, #40]	; 0x28
				USB1_USBCMD |= USB_USBCMD_SUTW;
    ae88:	ldr.w	r3, [r4, #320]	; 0x140
    ae8c:	orr.w	r3, r3, #8192	; 0x2000
    ae90:	str.w	r3, [r4, #320]	; 0x140
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    ae94:	ldr.w	r3, [r4, #320]	; 0x140
    ae98:	lsls	r3, r3, #18
    ae9a:	bpl.n	ae88 <usb_isr+0x34>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    ae9c:	ldr.w	r3, [r4, #320]	; 0x140
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    aea0:	mov.w	r2, #65537	; 0x10001
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    aea4:	bic.w	r3, r3, #8192	; 0x2000
    aea8:	str.w	r3, [r4, #320]	; 0x140
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    aeac:	str.w	r2, [r4, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    aeb0:	ldr.w	r3, [r4, #436]	; 0x1b4
    aeb4:	ands.w	r3, r3, #65537	; 0x10001
    aeb8:	bne.n	aeb0 <usb_isr+0x5c>
			endpoint0_notify_mask = 0;
    aeba:	uxth	r2, r7
    aebc:	str.w	r3, [r9]
	switch (setup.wRequestAndType) {
    aec0:	cmp.w	r2, #2304	; 0x900
	setup.bothwords = setupdata;
    aec4:	strd	r7, r0, [sp, #16]
	switch (setup.wRequestAndType) {
    aec8:	beq.w	b230 <usb_isr+0x3dc>
    aecc:	bhi.w	b056 <usb_isr+0x202>
    aed0:	movw	r1, #770	; 0x302
    aed4:	cmp	r2, r1
    aed6:	beq.w	b326 <usb_isr+0x4d2>
    aeda:	bls.w	b098 <usb_isr+0x244>
    aede:	movw	r1, #1665	; 0x681
    aee2:	cmp	r2, r1
    aee4:	bhi.w	b040 <usb_isr+0x1ec>
    aee8:	cmp.w	r2, #1664	; 0x680
    aeec:	bcs.w	b29a <usb_isr+0x446>
    aef0:	cmp.w	r2, #1280	; 0x500
    aef4:	bne.w	b034 <usb_isr+0x1e0>
	endpoint0_transfer_ack.next = 1;
    aef8:	ldr	r2, [pc, #520]	; (b104 <usb_isr+0x2b0>)
	endpoint_queue_head[1].status = 0;
    aefa:	str	r3, [r5, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    aefc:	str	r3, [r2, #8]
	endpoint0_transfer_ack.next = 1;
    aefe:	movs	r3, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    af00:	str	r2, [r5, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    af02:	str	r3, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    af04:	movs	r3, #128	; 0x80
    af06:	str	r3, [r2, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    af08:	mov.w	r3, #65537	; 0x10001
    af0c:	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    af10:	ldr.w	r3, [r4, #432]	; 0x1b0
    af14:	orr.w	r3, r3, #65536	; 0x10000
    af18:	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    af1c:	ldr.w	r3, [r4, #432]	; 0x1b0
    af20:	cmp	r3, #0
    af22:	bne.n	af1c <usb_isr+0xc8>
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    af24:	ldrh.w	r3, [sp, #18]
    af28:	lsls	r3, r3, #25
    af2a:	orr.w	r3, r3, #16777216	; 0x1000000
    af2e:	str.w	r3, [r4, #340]	; 0x154
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    af32:	ldr.w	r3, [r4, #428]	; 0x1ac
		while (setupstatus) {
    af36:	cmp	r3, #0
    af38:	bne.n	ae80 <usb_isr+0x2c>
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    af3a:	ldr	r3, [pc, #448]	; (b0fc <usb_isr+0x2a8>)
    af3c:	ldr.w	r4, [r3, #444]	; 0x1bc
		if (completestatus) {
    af40:	cbz	r4, afa2 <usb_isr+0x14e>
			if (completestatus & endpoint0_notify_mask) {
    af42:	ldr	r2, [pc, #452]	; (b108 <usb_isr+0x2b4>)
			USB1_ENDPTCOMPLETE = completestatus;
    af44:	str.w	r4, [r3, #444]	; 0x1bc
			if (completestatus & endpoint0_notify_mask) {
    af48:	ldr	r1, [r2, #0]
    af4a:	tst	r4, r1
    af4c:	bne.w	b460 <usb_isr+0x60c>
			completestatus &= endpointN_notify_mask;
    af50:	ldr	r3, [pc, #440]	; (b10c <usb_isr+0x2b8>)
    af52:	ldr	r3, [r3, #0]
			if (completestatus) {
    af54:	ands	r4, r3
    af56:	beq.n	afa2 <usb_isr+0x14e>
				while (tx) {
    af58:	movs.w	r8, r4, lsr #16
    af5c:	beq.n	af80 <usb_isr+0x12c>
    af5e:	ldr	r5, [pc, #416]	; (b100 <usb_isr+0x2ac>)
					tx &= ~(1<<p);
    af60:	mov.w	r9, #1
					int p=__builtin_ctz(tx);
    af64:	rbit	r7, r8
    af68:	clz	r7, r7
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    af6c:	add.w	r0, r5, r7, lsl #7
					tx &= ~(1<<p);
    af70:	lsl.w	r7, r9, r7
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    af74:	adds	r0, #64	; 0x40
    af76:	bl	ad58 <run_callbacks>
				while (tx) {
    af7a:	bics.w	r8, r8, r7
    af7e:	bne.n	af64 <usb_isr+0x110>
				uint32_t rx = completestatus & 0xffff;
    af80:	uxth	r4, r4
				while(rx) {
    af82:	cbz	r4, afa2 <usb_isr+0x14e>
    af84:	ldr	r5, [pc, #376]	; (b100 <usb_isr+0x2ac>)
					rx &= ~(1<<p);
    af86:	mov.w	r8, #1
					int p=__builtin_ctz(rx);
    af8a:	rbit	r7, r4
    af8e:	clz	r7, r7
					run_callbacks(endpoint_queue_head + p * 2);
    af92:	add.w	r0, r5, r7, lsl #7
					rx &= ~(1<<p);
    af96:	lsl.w	r7, r8, r7
					run_callbacks(endpoint_queue_head + p * 2);
    af9a:	bl	ad58 <run_callbacks>
				while(rx) {
    af9e:	bics	r4, r7
    afa0:	bne.n	af8a <usb_isr+0x136>
	if (status & USB_USBSTS_URI) { // page 3164
    afa2:	lsls	r2, r6, #25
    afa4:	bpl.n	afd4 <usb_isr+0x180>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    afa6:	ldr	r3, [pc, #340]	; (b0fc <usb_isr+0x2a8>)
    afa8:	ldr.w	r2, [r3, #428]	; 0x1ac
    afac:	str.w	r2, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    afb0:	ldr.w	r2, [r3, #444]	; 0x1bc
    afb4:	str.w	r2, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    afb8:	ldr.w	r4, [r3, #432]	; 0x1b0
    afbc:	cmp	r4, #0
    afbe:	bne.n	afb8 <usb_isr+0x164>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    afc0:	mov.w	r2, #4294967295
    afc4:	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    afc8:	ldr.w	r3, [r3, #388]	; 0x184
		usb_serial_reset();
    afcc:	bl	a534 <usb_serial_reset>
		endpointN_notify_mask = 0;
    afd0:	ldr	r3, [pc, #312]	; (b10c <usb_isr+0x2b8>)
    afd2:	str	r4, [r3, #0]
	if (status & USB_USBSTS_TI0) {
    afd4:	lsls	r4, r6, #7
    afd6:	bpl.n	afe0 <usb_isr+0x18c>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    afd8:	ldr	r3, [pc, #308]	; (b110 <usb_isr+0x2bc>)
    afda:	ldr	r3, [r3, #0]
    afdc:	cbz	r3, afe0 <usb_isr+0x18c>
    afde:	blx	r3
	if (status & USB_USBSTS_TI1) {
    afe0:	lsls	r0, r6, #6
    afe2:	bpl.n	afec <usb_isr+0x198>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    afe4:	ldr	r3, [pc, #300]	; (b114 <usb_isr+0x2c0>)
    afe6:	ldr	r3, [r3, #0]
    afe8:	cbz	r3, afec <usb_isr+0x198>
    afea:	blx	r3
	if (status & USB_USBSTS_PCI) {
    afec:	lsls	r1, r6, #29
    afee:	bpl.n	b004 <usb_isr+0x1b0>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    aff0:	ldr	r3, [pc, #264]	; (b0fc <usb_isr+0x2a8>)
    aff2:	ldr.w	r3, [r3, #388]	; 0x184
    aff6:	ands.w	r3, r3, #512	; 0x200
    affa:	beq.w	b21e <usb_isr+0x3ca>
			usb_high_speed = 1;
    affe:	ldr	r3, [pc, #280]	; (b118 <usb_isr+0x2c4>)
    b000:	movs	r2, #1
    b002:	strb	r2, [r3, #0]
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    b004:	ldr	r3, [pc, #244]	; (b0fc <usb_isr+0x2a8>)
    b006:	ldr.w	r3, [r3, #328]	; 0x148
    b00a:	lsls	r2, r3, #24
    b00c:	bpl.n	b02e <usb_isr+0x1da>
    b00e:	lsls	r3, r6, #24
    b010:	bpl.n	b02e <usb_isr+0x1da>
		if (usb_reboot_timer) {
    b012:	ldr	r2, [pc, #264]	; (b11c <usb_isr+0x2c8>)
    b014:	ldrb	r3, [r2, #0]
    b016:	cbz	r3, b024 <usb_isr+0x1d0>
			if (--usb_reboot_timer == 0) {
    b018:	subs	r3, #1
    b01a:	uxtb	r3, r3
    b01c:	strb	r3, [r2, #0]
    b01e:	cmp	r3, #0
    b020:	beq.w	b556 <usb_isr+0x702>
}
    b024:	add	sp, #28
    b026:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		usb_midi_flush_output();
    b02a:	b.w	bfb8 <usb_midi_flush_output>
}
    b02e:	add	sp, #28
    b030:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (setup.wRequestAndType) {
    b034:	bls.n	b130 <usb_isr+0x2dc>
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    b036:	mov.w	r3, #65537	; 0x10001
    b03a:	str.w	r3, [r4, #448]	; 0x1c0
    b03e:	b.n	af32 <usb_isr+0xde>
	switch (setup.wRequestAndType) {
    b040:	cmp.w	r2, #2176	; 0x880
    b044:	bne.n	b036 <usb_isr+0x1e2>
		reply_buffer[0] = usb_configuration;
    b046:	ldr	r0, [pc, #216]	; (b120 <usb_isr+0x2cc>)
		endpoint0_transmit(reply_buffer, 1, 0);
    b048:	movs	r1, #1
		reply_buffer[0] = usb_configuration;
    b04a:	ldrb.w	r3, [fp]
    b04e:	strb	r3, [r0, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    b050:	bl	ad90 <endpoint0_transmit.constprop.0>
		return;
    b054:	b.n	af32 <usb_isr+0xde>
	switch (setup.wRequestAndType) {
    b056:	movw	r1, #8737	; 0x2221
    b05a:	cmp	r2, r1
    b05c:	beq.w	b406 <usb_isr+0x5b2>
    b060:	bls.w	b196 <usb_isr+0x342>
    b064:	movw	r1, #33186	; 0x81a2
    b068:	cmp	r2, r1
    b06a:	beq.w	b3ec <usb_isr+0x598>
    b06e:	bls.n	b15e <usb_isr+0x30a>
    b070:	movw	r3, #33953	; 0x84a1
    b074:	cmp	r2, r3
    b076:	bne.w	b1e6 <usb_isr+0x392>
		if (setup.wLength <= sizeof(endpoint0_buffer)) {
    b07a:	cmp.w	r0, #589824	; 0x90000
    b07e:	bcs.n	b036 <usb_isr+0x1e2>
			if (usb_audio_get_feature(&setup, endpoint0_buffer, &len)) {
    b080:	add	r2, sp, #12
    b082:	ldr	r1, [pc, #160]	; (b124 <usb_isr+0x2d0>)
    b084:	add	r0, sp, #16
    b086:	bl	cf3c <usb_audio_get_feature>
    b08a:	cmp	r0, #0
    b08c:	beq.n	b036 <usb_isr+0x1e2>
				endpoint0_transmit(endpoint0_buffer, len, 0);
    b08e:	ldr	r1, [sp, #12]
    b090:	ldr	r0, [pc, #144]	; (b124 <usb_isr+0x2d0>)
    b092:	bl	ad90 <endpoint0_transmit.constprop.0>
				return;
    b096:	b.n	af32 <usb_isr+0xde>
	switch (setup.wRequestAndType) {
    b098:	cmp	r2, #130	; 0x82
    b09a:	beq.w	b3c0 <usb_isr+0x56c>
    b09e:	bls.w	b20c <usb_isr+0x3b8>
    b0a2:	cmp.w	r2, #258	; 0x102
    b0a6:	bne.w	b1f6 <usb_isr+0x3a2>
		if (endpoint > 7) break;
    b0aa:	tst.w	r0, #120	; 0x78
    b0ae:	uxth	r3, r0
    b0b0:	bne.n	b036 <usb_isr+0x1e2>
		endpoint = setup.wIndex & 0x7F;
    b0b2:	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    b0b6:	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    b0ba:	ldr.w	r3, [r8, r2, lsl #2]
    b0be:	ite	ne
    b0c0:	bicne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    b0c4:	biceq.w	r3, r3, #1
    b0c8:	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    b0cc:	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    b0ce:	ldr	r3, [pc, #52]	; (b104 <usb_isr+0x2b0>)
	endpoint_queue_head[1].status = 0;
    b0d0:	str	r2, [r5, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    b0d2:	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    b0d4:	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    b0d6:	str	r3, [r5, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    b0d8:	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    b0da:	movs	r2, #128	; 0x80
    b0dc:	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    b0de:	mov.w	r3, #65537	; 0x10001
    b0e2:	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    b0e6:	ldr.w	r3, [r4, #432]	; 0x1b0
    b0ea:	orr.w	r3, r3, #65536	; 0x10000
    b0ee:	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    b0f2:	ldr.w	r3, [r4, #432]	; 0x1b0
    b0f6:	cmp	r3, #0
    b0f8:	bne.n	b0f2 <usb_isr+0x29e>
    b0fa:	b.n	af32 <usb_isr+0xde>
    b0fc:	.word	0x402e0000
    b100:	.word	0x20000000
    b104:	.word	0x20001ee0
    b108:	.word	0x2000798c
    b10c:	.word	0x20007990
    b110:	.word	0x20008128
    b114:	.word	0x2000812c
    b118:	.word	0x20008172
    b11c:	.word	0x20008173
    b120:	.word	0x20008070
    b124:	.word	0x20007984
    b128:	.word	0x20008171
    b12c:	.word	0x402e01c0
	switch (setup.wRequestAndType) {
    b130:	movw	r3, #801	; 0x321
    b134:	cmp	r2, r3
    b136:	beq.n	b142 <usb_isr+0x2ee>
    b138:	movw	r3, #1057	; 0x421
    b13c:	cmp	r2, r3
    b13e:	bne.w	b036 <usb_isr+0x1e2>
		if (setup.wLength <= sizeof(endpoint0_buffer)) {
    b142:	cmp.w	r0, #589824	; 0x90000
    b146:	mov.w	r1, r0, lsr #16
    b14a:	bcs.w	b036 <usb_isr+0x1e2>
			endpoint0_setupdata.bothwords = setupdata;
    b14e:	ldr	r3, [pc, #724]	; (b424 <usb_isr+0x5d0>)
			endpoint0_receive(endpoint0_buffer, setup.wLength, 1);
    b150:	movs	r2, #1
			endpoint0_setupdata.bothwords = setupdata;
    b152:	strd	r7, r0, [r3]
			endpoint0_receive(endpoint0_buffer, setup.wLength, 1);
    b156:	ldr	r0, [pc, #720]	; (b428 <usb_isr+0x5d4>)
    b158:	bl	ac08 <endpoint0_receive>
			return; // handle these after ACK
    b15c:	b.n	af32 <usb_isr+0xde>
	switch (setup.wRequestAndType) {
    b15e:	movw	r3, #8993	; 0x2321
    b162:	cmp	r2, r3
    b164:	bne.n	b1b2 <usb_isr+0x35e>
	endpoint0_transfer_ack.next = 1;
    b166:	ldr	r3, [pc, #708]	; (b42c <usb_isr+0x5d8>)
	endpoint0_transfer_ack.pointer0 = 0;
    b168:	movs	r2, #0
    b16a:	str	r2, [r3, #8]
	endpoint_queue_head[1].status = 0;
    b16c:	str	r2, [r5, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
    b16e:	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    b170:	str	r3, [r5, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    b172:	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    b174:	movs	r2, #128	; 0x80
    b176:	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    b178:	mov.w	r3, #65537	; 0x10001
    b17c:	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    b180:	ldr.w	r3, [r4, #432]	; 0x1b0
    b184:	orr.w	r3, r3, #65536	; 0x10000
    b188:	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    b18c:	ldr.w	r3, [r4, #432]	; 0x1b0
    b190:	cmp	r3, #0
    b192:	bne.n	b18c <usb_isr+0x338>
    b194:	b.n	af32 <usb_isr+0xde>
	switch (setup.wRequestAndType) {
    b196:	movw	r1, #2817	; 0xb01
    b19a:	cmp	r2, r1
    b19c:	beq.w	b37a <usb_isr+0x526>
    b1a0:	movw	r3, #8225	; 0x2021
    b1a4:	cmp	r2, r3
    b1a6:	bne.n	b1be <usb_isr+0x36a>
		if (setup.wLength != 7) break;
    b1a8:	lsrs	r1, r0, #16
    b1aa:	cmp	r1, #7
    b1ac:	bne.w	b036 <usb_isr+0x1e2>
    b1b0:	b.n	b14e <usb_isr+0x2fa>
	switch (setup.wRequestAndType) {
    b1b2:	movw	r3, #33185	; 0x81a1
    b1b6:	cmp	r2, r3
    b1b8:	beq.w	b07a <usb_isr+0x226>
    b1bc:	b.n	b036 <usb_isr+0x1e2>
    b1be:	movw	r3, #2689	; 0xa81
    b1c2:	cmp	r2, r3
    b1c4:	bne.w	b036 <usb_isr+0x1e2>
		if (setup.wIndex == AUDIO_INTERFACE+1) {
    b1c8:	uxth	r0, r0
    b1ca:	cmp	r0, #4
    b1cc:	beq.w	b544 <usb_isr+0x6f0>
		} else if (setup.wIndex == AUDIO_INTERFACE+2) {
    b1d0:	cmp	r0, #5
    b1d2:	bne.w	b036 <usb_isr+0x1e2>
			endpoint0_buffer[0] = usb_audio_receive_setting;
    b1d6:	ldr	r3, [pc, #600]	; (b430 <usb_isr+0x5dc>)
    b1d8:	ldrb	r3, [r3, #0]
			endpoint0_transmit(endpoint0_buffer, 1, 0);
    b1da:	movs	r1, #1
			endpoint0_buffer[0] = usb_audio_receive_setting;
    b1dc:	ldr	r0, [pc, #584]	; (b428 <usb_isr+0x5d4>)
    b1de:	strb	r3, [r0, #0]
			endpoint0_transmit(endpoint0_buffer, 1, 0);
    b1e0:	bl	ad90 <endpoint0_transmit.constprop.0>
			return;
    b1e4:	b.n	af32 <usb_isr+0xde>
	switch (setup.wRequestAndType) {
    b1e6:	bic.w	r2, r2, #256	; 0x100
    b1ea:	movw	r3, #33441	; 0x82a1
    b1ee:	cmp	r2, r3
    b1f0:	beq.w	b07a <usb_isr+0x226>
    b1f4:	b.n	b036 <usb_isr+0x1e2>
    b1f6:	bcc.w	b036 <usb_isr+0x1e2>
    b1fa:	movw	r3, #289	; 0x121
    b1fe:	cmp	r2, r3
    b200:	beq.n	b142 <usb_isr+0x2ee>
    b202:	movw	r3, #545	; 0x221
    b206:	cmp	r2, r3
    b208:	beq.n	b142 <usb_isr+0x2ee>
    b20a:	b.n	b036 <usb_isr+0x1e2>
    b20c:	cmp	r2, #128	; 0x80
    b20e:	bne.w	b036 <usb_isr+0x1e2>
		reply_buffer[0] = 0;
    b212:	ldr	r0, [pc, #544]	; (b434 <usb_isr+0x5e0>)
		endpoint0_transmit(reply_buffer, 2, 0);
    b214:	movs	r1, #2
		reply_buffer[0] = 0;
    b216:	strh	r3, [r0, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    b218:	bl	ad90 <endpoint0_transmit.constprop.0>
		return;
    b21c:	b.n	af32 <usb_isr+0xde>
			usb_high_speed = 0;
    b21e:	ldr	r2, [pc, #536]	; (b438 <usb_isr+0x5e4>)
    b220:	strb	r3, [r2, #0]
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    b222:	ldr	r3, [pc, #536]	; (b43c <usb_isr+0x5e8>)
    b224:	ldr.w	r3, [r3, #328]	; 0x148
    b228:	lsls	r2, r3, #24
    b22a:	bpl.w	b02e <usb_isr+0x1da>
    b22e:	b.n	b00e <usb_isr+0x1ba>
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    b230:	ldr	r1, [pc, #524]	; (b440 <usb_isr+0x5ec>)
		usb_configuration = setup.wValue;
    b232:	ubfx	ip, r7, #16, #8
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    b236:	mov.w	r2, #13107400	; 0xc800c8
    b23a:	str	r3, [sp, #4]
		usb_configuration = setup.wValue;
    b23c:	strb.w	ip, [fp]
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    b240:	str.w	r1, [r4, #456]	; 0x1c8
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    b244:	str.w	r2, [r4, #460]	; 0x1cc
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    b248:	str.w	r2, [r4, #464]	; 0x1d0
		USB1_ENDPTCTRL5 = ENDPOINT5_CONFIG;
    b24c:	mov.w	r2, #12845252	; 0xc400c4
    b250:	str.w	r2, [r4, #468]	; 0x1d4
		USB1_ENDPTCTRL6 = ENDPOINT6_CONFIG;
    b254:	subs	r2, #194	; 0xc2
    b256:	str.w	r2, [r4, #472]	; 0x1d8
		usb_serial_configure();
    b25a:	bl	a538 <usb_serial_configure>
		usb_midi_configure();
    b25e:	bl	bef4 <usb_midi_configure>
		usb_audio_configure();
    b262:	bl	ce54 <usb_audio_configure>
	endpoint0_transfer_ack.next = 1;
    b266:	ldr	r2, [pc, #452]	; (b42c <usb_isr+0x5d8>)
    b268:	movs	r1, #1
	endpoint_queue_head[1].status = 0;
    b26a:	ldr	r3, [sp, #4]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    b26c:	str	r2, [r5, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    b26e:	str	r1, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    b270:	movs	r1, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
    b272:	str	r3, [r2, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    b274:	str	r1, [r2, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    b276:	mov.w	r2, #65537	; 0x10001
	endpoint_queue_head[1].status = 0;
    b27a:	str	r3, [r5, #76]	; 0x4c
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    b27c:	str.w	r2, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    b280:	ldr.w	r2, [r4, #432]	; 0x1b0
    b284:	orr.w	r2, r2, #65536	; 0x10000
    b288:	str.w	r2, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    b28c:	str.w	r3, [r9]
	while (USB1_ENDPTPRIME) ;
    b290:	ldr.w	r3, [r4, #432]	; 0x1b0
    b294:	cmp	r3, #0
    b296:	bne.n	b290 <usb_isr+0x43c>
    b298:	b.n	af32 <usb_isr+0xde>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    b29a:	ldr	r3, [pc, #424]	; (b444 <usb_isr+0x5f0>)
    b29c:	ldr	r1, [r3, #4]
    b29e:	cmp	r1, #0
    b2a0:	beq.w	b036 <usb_isr+0x1e2>
    b2a4:	mov.w	ip, r7, lsr #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    b2a8:	uxth.w	lr, r0
    b2ac:	b.n	b2b8 <usb_isr+0x464>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    b2ae:	ldr	r1, [r3, #16]
    b2b0:	adds	r3, #12
    b2b2:	cmp	r1, #0
    b2b4:	beq.w	b036 <usb_isr+0x1e2>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    b2b8:	ldrh	r2, [r3, #0]
    b2ba:	cmp	r2, ip
    b2bc:	bne.n	b2ae <usb_isr+0x45a>
    b2be:	ldrh	r2, [r3, #2]
    b2c0:	cmp	r2, lr
    b2c2:	bne.n	b2ae <usb_isr+0x45a>
				if ((setup.wValue >> 8) == 3) {
    b2c4:	mov.w	r2, ip, lsr #8
    b2c8:	cmp	r2, #3
    b2ca:	beq.w	b492 <usb_isr+0x63e>
					datalen = list->length;
    b2ce:	ldrh	r2, [r3, #8]
				if (datalen > setup.wLength) datalen = setup.wLength;
    b2d0:	lsrs	r0, r0, #16
    b2d2:	cmp	r2, r0
    b2d4:	it	cs
    b2d6:	movcs	r2, r0
				if (setup.wValue == 0x200) {
    b2d8:	cmp.w	ip, #512	; 0x200
    b2dc:	mov	r7, r2
    b2de:	bne.w	b49e <usb_isr+0x64a>
					if (usb_high_speed) src = usb_config_descriptor_480;
    b2e2:	ldr	r3, [pc, #340]	; (b438 <usb_isr+0x5e4>)
    b2e4:	ldr	r1, [pc, #352]	; (b448 <usb_isr+0x5f4>)
    b2e6:	ldrb	r0, [r3, #0]
    b2e8:	ldr	r3, [pc, #352]	; (b44c <usb_isr+0x5f8>)
					memcpy(usb_descriptor_buffer, src, datalen);
    b2ea:	ldr.w	sl, [pc, #356]	; b450 <usb_isr+0x5fc>
    b2ee:	cmp	r0, #0
    b2f0:	it	ne
    b2f2:	movne	r1, r3
    b2f4:	ldr	r0, [pc, #344]	; (b450 <usb_isr+0x5fc>)
    b2f6:	bl	a0a4 <memcpy>
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    b2fa:	bic.w	r3, sl, #31
	uint32_t end_addr = (uint32_t)addr + size;
    b2fe:	add.w	r1, sl, r7
	asm("dsb");
    b302:	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    b306:	mov.w	r0, #3758153728	; 0xe000e000
    b30a:	str.w	r3, [r0, #3952]	; 0xf70
		location += 32;
    b30e:	adds	r3, #32
	} while (location < end_addr);
    b310:	cmp	r1, r3
    b312:	bhi.n	b30a <usb_isr+0x4b6>
	asm("dsb");
    b314:	dsb	sy
	asm("isb");
    b318:	isb	sy
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    b31c:	ldr	r0, [pc, #304]	; (b450 <usb_isr+0x5fc>)
    b31e:	mov	r1, r7
    b320:	bl	ad90 <endpoint0_transmit.constprop.0>
				return;
    b324:	b.n	af32 <usb_isr+0xde>
		if (endpoint > 7) break;
    b326:	tst.w	r0, #120	; 0x78
    b32a:	uxth	r3, r0
    b32c:	bne.w	b036 <usb_isr+0x1e2>
		endpoint = setup.wIndex & 0x7F;
    b330:	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    b334:	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    b338:	ldr.w	r3, [r8, r2, lsl #2]
    b33c:	ite	ne
    b33e:	orrne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    b342:	orreq.w	r3, r3, #1
    b346:	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    b34a:	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    b34c:	ldr	r3, [pc, #220]	; (b42c <usb_isr+0x5d8>)
	endpoint_queue_head[1].status = 0;
    b34e:	str	r2, [r5, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    b350:	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    b352:	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    b354:	str	r3, [r5, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    b356:	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    b358:	movs	r2, #128	; 0x80
    b35a:	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    b35c:	mov.w	r3, #65537	; 0x10001
    b360:	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    b364:	ldr.w	r3, [r4, #432]	; 0x1b0
    b368:	orr.w	r3, r3, #65536	; 0x10000
    b36c:	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    b370:	ldr.w	r3, [r4, #432]	; 0x1b0
    b374:	cmp	r3, #0
    b376:	bne.n	b370 <usb_isr+0x51c>
    b378:	b.n	af32 <usb_isr+0xde>
		if (setup.wIndex == AUDIO_INTERFACE+1) {
    b37a:	uxth	r0, r0
    b37c:	cmp	r0, #4
    b37e:	beq.w	b50c <usb_isr+0x6b8>
		} else if (setup.wIndex == AUDIO_INTERFACE+2) {
    b382:	cmp	r0, #5
    b384:	bne.w	b036 <usb_isr+0x1e2>
	endpoint0_transfer_ack.next = 1;
    b388:	ldr	r2, [pc, #160]	; (b42c <usb_isr+0x5d8>)
			usb_audio_receive_setting = setup.wValue;
    b38a:	ubfx	ip, r7, #16, #16
	endpoint_queue_head[1].status = 0;
    b38e:	str	r3, [r5, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    b390:	str	r3, [r2, #8]
			usb_audio_receive_setting = setup.wValue;
    b392:	ldr	r3, [pc, #156]	; (b430 <usb_isr+0x5dc>)
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    b394:	str	r2, [r5, #72]	; 0x48
			usb_audio_receive_setting = setup.wValue;
    b396:	strb.w	ip, [r3]
	endpoint0_transfer_ack.next = 1;
    b39a:	movs	r3, #1
    b39c:	str	r3, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    b39e:	movs	r3, #128	; 0x80
    b3a0:	str	r3, [r2, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    b3a2:	mov.w	r3, #65537	; 0x10001
    b3a6:	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    b3aa:	ldr.w	r3, [r4, #432]	; 0x1b0
    b3ae:	orr.w	r3, r3, #65536	; 0x10000
    b3b2:	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    b3b6:	ldr.w	r3, [r4, #432]	; 0x1b0
    b3ba:	cmp	r3, #0
    b3bc:	bne.n	b3b6 <usb_isr+0x562>
    b3be:	b.n	af32 <usb_isr+0xde>
		endpoint = setup.wIndex & 0x7F;
    b3c0:	uxth	r3, r0
		if (endpoint > 7) break;
    b3c2:	ands.w	r0, r0, #120	; 0x78
    b3c6:	bne.w	b036 <usb_isr+0x1e2>
		endpoint = setup.wIndex & 0x7F;
    b3ca:	and.w	r2, r3, #127	; 0x7f
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    b3ce:	ldr.w	r1, [r8, r2, lsl #2]
		reply_buffer[0] = 0;
    b3d2:	ldr	r2, [pc, #96]	; (b434 <usb_isr+0x5e0>)
    b3d4:	strh	r0, [r2, #0]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    b3d6:	lsls	r0, r3, #24
    b3d8:	bmi.n	b48c <usb_isr+0x638>
    b3da:	lsls	r7, r1, #31
    b3dc:	bpl.n	b3e2 <usb_isr+0x58e>
			reply_buffer[0] = 1;
    b3de:	movs	r3, #1
    b3e0:	strb	r3, [r2, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    b3e2:	movs	r1, #2
    b3e4:	ldr	r0, [pc, #76]	; (b434 <usb_isr+0x5e0>)
    b3e6:	bl	ad90 <endpoint0_transmit.constprop.0>
		return;
    b3ea:	b.n	af32 <usb_isr+0xde>
		if (setup.wLength >= 3) {
    b3ec:	cmp.w	r0, #196608	; 0x30000
    b3f0:	bcc.w	b036 <usb_isr+0x1e2>
			endpoint0_buffer[0] = 44100 & 255;
    b3f4:	ldr	r0, [pc, #48]	; (b428 <usb_isr+0x5d4>)
			endpoint0_transmit(endpoint0_buffer, 3, 0);
    b3f6:	movs	r1, #3
			endpoint0_buffer[2] = 0;
    b3f8:	strb	r3, [r0, #2]
			endpoint0_buffer[0] = 44100 & 255;
    b3fa:	movw	r3, #44100	; 0xac44
    b3fe:	strh	r3, [r0, #0]
			endpoint0_transmit(endpoint0_buffer, 3, 0);
    b400:	bl	ad90 <endpoint0_transmit.constprop.0>
			return;
    b404:	b.n	af32 <usb_isr+0xde>
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
    b406:	uxth	r0, r0
    b408:	cmp	r0, #0
    b40a:	bne.w	b166 <usb_isr+0x312>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    b40e:	ldr	r3, [pc, #68]	; (b454 <usb_isr+0x600>)
			usb_cdc_line_rtsdtr = setup.wValue;
    b410:	ubfx	ip, r7, #16, #8
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    b414:	ldr	r2, [r3, #0]
    b416:	ldr	r3, [pc, #64]	; (b458 <usb_isr+0x604>)
    b418:	str	r2, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    b41a:	ldr	r3, [pc, #64]	; (b45c <usb_isr+0x608>)
    b41c:	strb.w	ip, [r3]
    b420:	b.n	b166 <usb_isr+0x312>
    b422:	nop
    b424:	.word	0x200052f8
    b428:	.word	0x20007984
    b42c:	.word	0x20001ee0
    b430:	.word	0x2000816c
    b434:	.word	0x20008070
    b438:	.word	0x20008172
    b43c:	.word	0x402e0000
    b440:	.word	0x00cc0002
    b444:	.word	0x200012a0
    b448:	.word	0x600020bc
    b44c:	.word	0x60002214
    b450:	.word	0x20205100
    b454:	.word	0x200080e4
    b458:	.word	0x20008124
    b45c:	.word	0x20008170
				endpoint0_notify_mask = 0;
    b460:	movs	r1, #0
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    b462:	movw	r0, #8225	; 0x2021
				endpoint0_notify_mask = 0;
    b466:	str	r1, [r2, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
    b468:	ldr	r1, [pc, #244]	; (b560 <usb_isr+0x70c>)
    b46a:	ldrd	r2, r1, [r1]
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    b46e:	uxth	r5, r2
    b470:	cmp	r5, r0
    b472:	beq.n	b4c6 <usb_isr+0x672>
	if (setup.word1 == 0x02010121 || setup.word1 == 0x01000121 /* TODO: check setup.word2 */) {
    b474:	ldr	r3, [pc, #236]	; (b564 <usb_isr+0x710>)
    b476:	cmp	r2, r3
    b478:	beq.n	b482 <usb_isr+0x62e>
    b47a:	ldr	r3, [pc, #236]	; (b568 <usb_isr+0x714>)
    b47c:	cmp	r2, r3
    b47e:	bne.w	af50 <usb_isr+0xfc>
		usb_audio_set_feature(&endpoint0_setupdata, endpoint0_buffer);
    b482:	ldr	r1, [pc, #232]	; (b56c <usb_isr+0x718>)
    b484:	ldr	r0, [pc, #216]	; (b560 <usb_isr+0x70c>)
    b486:	bl	cfa0 <usb_audio_set_feature>
    b48a:	b.n	af50 <usb_isr+0xfc>
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    b48c:	lsls	r3, r1, #15
    b48e:	bmi.n	b3de <usb_isr+0x58a>
    b490:	b.n	b3e2 <usb_isr+0x58e>
					datalen = *(list->addr);
    b492:	ldrb	r2, [r1, #0]
				if (datalen > setup.wLength) datalen = setup.wLength;
    b494:	lsrs	r0, r0, #16
    b496:	cmp	r2, r0
    b498:	it	cs
    b49a:	movcs	r2, r0
    b49c:	mov	r7, r2
				} else if (setup.wValue == 0x700) {
    b49e:	cmp.w	ip, #1792	; 0x700
    b4a2:	bne.n	b548 <usb_isr+0x6f4>
					if (usb_high_speed) src = usb_config_descriptor_12;
    b4a4:	ldr	r3, [pc, #200]	; (b570 <usb_isr+0x71c>)
					memcpy(usb_descriptor_buffer, src, datalen);
    b4a6:	mov	r2, r7
    b4a8:	ldr.w	sl, [pc, #228]	; b590 <usb_isr+0x73c>
					if (usb_high_speed) src = usb_config_descriptor_12;
    b4ac:	ldrb	r0, [r3, #0]
    b4ae:	ldr	r1, [pc, #196]	; (b574 <usb_isr+0x720>)
    b4b0:	ldr	r3, [pc, #196]	; (b578 <usb_isr+0x724>)
					memcpy(usb_descriptor_buffer, src, datalen);
    b4b2:	cmp	r0, #0
    b4b4:	it	ne
    b4b6:	movne	r1, r3
    b4b8:	mov	r0, sl
    b4ba:	bl	a0a4 <memcpy>
					usb_descriptor_buffer[1] = 7;
    b4be:	movs	r3, #7
    b4c0:	strb.w	r3, [sl, #1]
    b4c4:	b.n	b2fa <usb_isr+0x4a6>
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    b4c6:	uxth	r1, r1
    b4c8:	cmp	r1, #0
    b4ca:	bne.n	b474 <usb_isr+0x620>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    b4cc:	ldr	r1, [pc, #156]	; (b56c <usb_isr+0x718>)
    b4ce:	ldr	r5, [pc, #172]	; (b57c <usb_isr+0x728>)
    b4d0:	ldmia	r1, {r0, r1}
    b4d2:	strh	r1, [r5, #4]
		if (usb_cdc_line_coding[0] == 134) {
    b4d4:	cmp	r0, #134	; 0x86
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    b4d6:	mov.w	r1, r1, lsr #16
    b4da:	str	r0, [r5, #0]
    b4dc:	strb	r1, [r5, #6]
		if (usb_cdc_line_coding[0] == 134) {
    b4de:	bne.n	b474 <usb_isr+0x620>
	__disable_irq();
    b4e0:	cpsid	i
	sof_usage |= (1 << interface);
    b4e2:	ldr	r0, [pc, #156]	; (b580 <usb_isr+0x72c>)
    b4e4:	ldrb	r1, [r0, #0]
    b4e6:	orr.w	r1, r1, #64	; 0x40
    b4ea:	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
    b4ec:	ldr.w	r1, [r3, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    b4f0:	lsls	r5, r1, #24
    b4f2:	bmi.n	b502 <usb_isr+0x6ae>
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    b4f4:	orr.w	r1, r1, #128	; 0x80
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    b4f8:	movs	r0, #128	; 0x80
    b4fa:	str.w	r0, [r3, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    b4fe:	str.w	r1, [r3, #328]	; 0x148
	__enable_irq();
    b502:	cpsie	i
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    b504:	ldr	r3, [pc, #124]	; (b584 <usb_isr+0x730>)
    b506:	movs	r1, #80	; 0x50
    b508:	strb	r1, [r3, #0]
    b50a:	b.n	b474 <usb_isr+0x620>
	endpoint0_transfer_ack.next = 1;
    b50c:	ldr	r2, [pc, #120]	; (b588 <usb_isr+0x734>)
			usb_audio_transmit_setting = setup.wValue;
    b50e:	ubfx	ip, r7, #16, #16
	endpoint_queue_head[1].status = 0;
    b512:	str	r3, [r5, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    b514:	str	r3, [r2, #8]
			usb_audio_transmit_setting = setup.wValue;
    b516:	ldr	r3, [pc, #116]	; (b58c <usb_isr+0x738>)
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    b518:	str	r2, [r5, #72]	; 0x48
			usb_audio_transmit_setting = setup.wValue;
    b51a:	strb.w	ip, [r3]
	endpoint0_transfer_ack.next = 1;
    b51e:	movs	r3, #1
    b520:	str	r3, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    b522:	movs	r3, #128	; 0x80
    b524:	str	r3, [r2, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    b526:	mov.w	r3, #65537	; 0x10001
    b52a:	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    b52e:	ldr.w	r3, [r4, #432]	; 0x1b0
    b532:	orr.w	r3, r3, #65536	; 0x10000
    b536:	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    b53a:	ldr.w	r3, [r4, #432]	; 0x1b0
    b53e:	cmp	r3, #0
    b540:	bne.n	b53a <usb_isr+0x6e6>
    b542:	b.n	af32 <usb_isr+0xde>
			endpoint0_buffer[0] = usb_audio_transmit_setting;
    b544:	ldr	r3, [pc, #68]	; (b58c <usb_isr+0x738>)
    b546:	b.n	b1d8 <usb_isr+0x384>
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    b548:	ldr.w	sl, [pc, #68]	; b590 <usb_isr+0x73c>
    b54c:	mov	r2, r7
    b54e:	mov	r0, sl
    b550:	bl	a0a4 <memcpy>
    b554:	b.n	b2fa <usb_isr+0x4a6>
				usb_stop_sof_interrupts(NUM_INTERFACE);
    b556:	movs	r0, #6
    b558:	bl	ae28 <usb_stop_sof_interrupts>
				_reboot_Teensyduino_();
    b55c:	bl	13668 <___reboot_Teensyduino__veneer>
    b560:	.word	0x200052f8
    b564:	.word	0x02010121
    b568:	.word	0x01000121
    b56c:	.word	0x20007984
    b570:	.word	0x20008172
    b574:	.word	0x60002214
    b578:	.word	0x600020bc
    b57c:	.word	0x2000811c
    b580:	.word	0x20008165
    b584:	.word	0x20008173
    b588:	.word	0x20001ee0
    b58c:	.word	0x2000816f
    b590:	.word	0x20205100

0000b594 <usb_config_rx>:
{
    b594:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b598:	mov	r7, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    b59a:	subs	r3, r0, #2
    b59c:	cmp	r3, #4
    b59e:	bls.n	b5a4 <usb_config_rx+0x10>
}
    b5a0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    b5a4:	ldr.w	r9, [pc, #76]	; b5f4 <usb_config_rx+0x60>
    b5a8:	mov	r5, r2
    b5aa:	mov	r4, r1
	memset(qh, 0, sizeof(endpoint_t));
    b5ac:	movs	r2, #60	; 0x3c
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    b5ae:	add.w	r8, r9, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    b5b2:	mov	r6, r0
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    b5b4:	mov.w	sl, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    b5b8:	movs	r1, #0
    b5ba:	add.w	r0, r8, #4
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    b5be:	lsls	r4, r4, #16
	memset(qh, 0, sizeof(endpoint_t));
    b5c0:	bl	e044 <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    b5c4:	clz	r2, r5
	qh->next = 1; // Terminate bit = 1
    b5c8:	movs	r3, #1
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    b5ca:	lsrs	r2, r2, #5
    b5cc:	orr.w	r4, r4, r2, lsl #29
	qh->config = config;
    b5d0:	str.w	r4, [r9, sl]
	qh->callback_function = callback;
    b5d4:	str.w	r7, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    b5d8:	str.w	r3, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << ep);
    b5dc:	cmp	r7, #0
    b5de:	beq.n	b5a0 <usb_config_rx+0xc>
    b5e0:	ldr	r2, [pc, #12]	; (b5f0 <usb_config_rx+0x5c>)
    b5e2:	lsls	r3, r6
    b5e4:	ldr	r1, [r2, #0]
    b5e6:	orrs	r3, r1
    b5e8:	str	r3, [r2, #0]
}
    b5ea:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b5ee:	nop
    b5f0:	.word	0x20007990
    b5f4:	.word	0x20000000

0000b5f8 <usb_config_tx>:
{
    b5f8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b5fc:	mov	r5, r1
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    b5fe:	subs	r1, r0, #2
    b600:	cmp	r1, #4
    b602:	bls.n	b608 <usb_config_tx+0x10>
}
    b604:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    b608:	lsls	r7, r0, #7
    b60a:	ldr.w	r9, [pc, #76]	; b658 <usb_config_tx+0x60>
    b60e:	mov	sl, r2
    b610:	mov	r4, r0
    b612:	adds	r7, #64	; 0x40
	memset(qh, 0, sizeof(endpoint_t));
    b614:	movs	r2, #60	; 0x3c
    b616:	movs	r1, #0
    b618:	mov	r6, r3
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    b61a:	add.w	r8, r9, r7
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    b61e:	lsls	r5, r5, #16
	memset(qh, 0, sizeof(endpoint_t));
    b620:	add.w	r0, r8, #4
    b624:	bl	e044 <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    b628:	clz	r2, sl
    b62c:	lsrs	r2, r2, #5
    b62e:	orr.w	r2, r5, r2, lsl #29
	qh->config = config;
    b632:	str.w	r2, [r9, r7]
	qh->next = 1; // Terminate bit = 1
    b636:	movs	r2, #1
	qh->callback_function = callback;
    b638:	str.w	r6, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    b63c:	str.w	r2, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    b640:	cmp	r6, #0
    b642:	beq.n	b604 <usb_config_tx+0xc>
    b644:	ldr	r3, [pc, #12]	; (b654 <usb_config_tx+0x5c>)
    b646:	adds	r4, #16
    b648:	ldr	r1, [r3, #0]
    b64a:	lsls	r2, r4
    b64c:	orrs	r2, r1
    b64e:	str	r2, [r3, #0]
}
    b650:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b654:	.word	0x20007990
    b658:	.word	0x20000000

0000b65c <usb_config_rx_iso>:
{
    b65c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b660:	mov	r4, r2
	if (mult < 1 || mult > 3) return;
    b662:	subs	r2, #1
    b664:	cmp	r2, #2
    b666:	bhi.n	b672 <usb_config_rx_iso+0x16>
    b668:	mov	r5, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    b66a:	subs	r3, r0, #2
    b66c:	mov	r7, r0
    b66e:	cmp	r3, #4
    b670:	bls.n	b676 <usb_config_rx_iso+0x1a>
}
    b672:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    b676:	ldr.w	r9, [pc, #68]	; b6bc <usb_config_rx_iso+0x60>
    b67a:	mov	r6, r1
	uint32_t config = (packet_size << 16) | (mult << 30);
    b67c:	lsls	r4, r4, #30
	memset(qh, 0, sizeof(endpoint_t));
    b67e:	movs	r2, #60	; 0x3c
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    b680:	add.w	r8, r9, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    b684:	movs	r1, #0
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    b686:	mov.w	sl, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    b68a:	add.w	r0, r8, #4
	uint32_t config = (packet_size << 16) | (mult << 30);
    b68e:	orr.w	r4, r4, r6, lsl #16
	memset(qh, 0, sizeof(endpoint_t));
    b692:	bl	e044 <memset>
	qh->next = 1; // Terminate bit = 1
    b696:	movs	r3, #1
	qh->config = config;
    b698:	str.w	r4, [r9, sl]
	qh->callback_function = callback;
    b69c:	str.w	r5, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    b6a0:	str.w	r3, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << ep);
    b6a4:	cmp	r5, #0
    b6a6:	beq.n	b672 <usb_config_rx_iso+0x16>
    b6a8:	ldr	r2, [pc, #12]	; (b6b8 <usb_config_rx_iso+0x5c>)
    b6aa:	lsls	r3, r7
    b6ac:	ldr	r1, [r2, #0]
    b6ae:	orrs	r3, r1
    b6b0:	str	r3, [r2, #0]
}
    b6b2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b6b6:	nop
    b6b8:	.word	0x20007990
    b6bc:	.word	0x20000000

0000b6c0 <usb_config_tx_iso>:
{
    b6c0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b6c4:	mov	r4, r2
	if (mult < 1 || mult > 3) return;
    b6c6:	subs	r2, #1
    b6c8:	cmp	r2, #2
    b6ca:	bhi.n	b6d6 <usb_config_tx_iso+0x16>
    b6cc:	mov	r5, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    b6ce:	subs	r3, r0, #2
    b6d0:	mov	r7, r0
    b6d2:	cmp	r3, #4
    b6d4:	bls.n	b6da <usb_config_tx_iso+0x1a>
}
    b6d6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    b6da:	mov.w	r8, r0, lsl #7
    b6de:	ldr.w	sl, [pc, #72]	; b728 <usb_config_tx_iso+0x68>
    b6e2:	mov	r6, r1
	uint32_t config = (packet_size << 16) | (mult << 30);
    b6e4:	lsls	r4, r4, #30
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    b6e6:	add.w	r8, r8, #64	; 0x40
	memset(qh, 0, sizeof(endpoint_t));
    b6ea:	movs	r2, #60	; 0x3c
    b6ec:	movs	r1, #0
	uint32_t config = (packet_size << 16) | (mult << 30);
    b6ee:	orr.w	r4, r4, r6, lsl #16
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    b6f2:	add.w	r9, sl, r8
	memset(qh, 0, sizeof(endpoint_t));
    b6f6:	add.w	r0, r9, #4
    b6fa:	bl	e044 <memset>
	qh->next = 1; // Terminate bit = 1
    b6fe:	movs	r3, #1
	qh->config = config;
    b700:	str.w	r4, [sl, r8]
	qh->callback_function = callback;
    b704:	str.w	r5, [r9, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    b708:	str.w	r3, [r9, #8]
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    b70c:	cmp	r5, #0
    b70e:	beq.n	b6d6 <usb_config_tx_iso+0x16>
    b710:	ldr	r2, [pc, #16]	; (b724 <usb_config_tx_iso+0x64>)
    b712:	add.w	r0, r7, #16
    b716:	ldr	r1, [r2, #0]
    b718:	lsls	r3, r0
    b71a:	orrs	r3, r1
    b71c:	str	r3, [r2, #0]
}
    b71e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b722:	nop
    b724:	.word	0x20007990
    b728:	.word	0x20000000

0000b72c <usb_prepare_transfer>:
	transfer->status = (len << 16) | (1<<7);
    b72c:	lsls	r2, r2, #16
	transfer->pointer0 = addr;
    b72e:	str	r1, [r0, #8]
	transfer->callback_param = param;
    b730:	str	r3, [r0, #28]
	transfer->pointer3 = addr + 12288;
    b732:	add.w	r3, r1, #12288	; 0x3000
	transfer->status = (len << 16) | (1<<7);
    b736:	orr.w	r2, r2, #128	; 0x80
{
    b73a:	push	{r4}
	transfer->next = 1;
    b73c:	movs	r4, #1
	transfer->status = (len << 16) | (1<<7);
    b73e:	str	r2, [r0, #4]
	transfer->pointer2 = addr + 8192;
    b740:	add.w	r2, r1, #8192	; 0x2000
	transfer->next = 1;
    b744:	str	r4, [r0, #0]
	transfer->pointer1 = addr + 4096;
    b746:	add.w	r4, r1, #4096	; 0x1000
	transfer->pointer4 = addr + 16384;
    b74a:	add.w	r1, r1, #16384	; 0x4000
	transfer->pointer1 = addr + 4096;
    b74e:	str	r4, [r0, #12]
	transfer->pointer4 = addr + 16384;
    b750:	str	r1, [r0, #24]
}
    b752:	ldr.w	r4, [sp], #4
	transfer->pointer3 = addr + 12288;
    b756:	strd	r2, r3, [r0, #16]
}
    b75a:	bx	lr

0000b75c <usb_transmit>:

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    b75c:	subs	r3, r0, #2
{
    b75e:	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    b760:	cmp	r3, #4
    b762:	bls.n	b766 <usb_transmit+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}
    b764:	bx	lr
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    b766:	ldr	r3, [pc, #24]	; (b780 <usb_transmit+0x24>)
	uint32_t mask = 1 << (endpoint_number + 16);
    b768:	add.w	r1, r0, #16
    b76c:	mov.w	ip, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    b770:	add.w	r0, r3, r0, lsl #7
	schedule_transfer(endpoint, mask, transfer);
    b774:	lsl.w	r1, ip, r1
    b778:	adds	r0, #64	; 0x40
    b77a:	b.w	acd0 <schedule_transfer>
    b77e:	nop
    b780:	.word	0x20000000

0000b784 <usb_receive>:

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    b784:	subs	r3, r0, #2
{
    b786:	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    b788:	cmp	r3, #4
    b78a:	bls.n	b78e <usb_receive+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
}
    b78c:	bx	lr
	uint32_t mask = 1 << endpoint_number;
    b78e:	movs	r1, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
    b790:	ldr	r3, [pc, #8]	; (b79c <usb_receive+0x18>)
	schedule_transfer(endpoint, mask, transfer);
    b792:	lsls	r1, r0
    b794:	add.w	r0, r3, r0, lsl #7
    b798:	b.w	acd0 <schedule_transfer>
    b79c:	.word	0x20000000

0000b7a0 <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
    b7a0:	ldr	r0, [r0, #4]
#endif
}
    b7a2:	bx	lr

0000b7a4 <delay>:
// or delayNanoseconds().
void delay(uint32_t msec)
{
	uint32_t start;

	if (msec == 0) return;
    b7a4:	cbnz	r0, b7a8 <delay+0x4>
    b7a6:	bx	lr
{
    b7a8:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    b7ac:	movs	r1, #1
    b7ae:	mov	r9, r0
    b7b0:	ldr	r4, [pc, #132]	; (b838 <delay+0x94>)
    b7b2:	ldr	r5, [pc, #136]	; (b83c <delay+0x98>)
    b7b4:	ldr	r6, [pc, #136]	; (b840 <delay+0x9c>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    b7b6:	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    b7ba:	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    b7bc:	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    b7be:	strex	r3, r1, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    b7c2:	cmp	r3, #0
    b7c4:	bne.n	b7b6 <delay+0x12>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    b7c6:	ldr	r1, [pc, #124]	; (b844 <delay+0xa0>)
    b7c8:	ldr	r3, [r1, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    b7ca:	mov.w	fp, #1000	; 0x3e8
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    b7ce:	ldr.w	sl, [pc, #120]	; b848 <delay+0xa4>
	uint32_t ccdelta = cyccnt - scc;
    b7d2:	subs	r3, r3, r0
    b7d4:	movs	r7, #1
	uint32_t usec = 1000*smc + frac;
    b7d6:	mul.w	r8, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    b7da:	ldr.w	r2, [sl]
    b7de:	umull	r3, r2, r3, r2
	uint32_t usec = 1000*smc + frac;
    b7e2:	cmp	r2, fp
    b7e4:	ite	ls
    b7e6:	addls	r8, r2
    b7e8:	addhi	r8, fp
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    b7ea:	ldrex	r3, [r4]
		smc = systick_millis_count;
    b7ee:	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    b7f0:	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    b7f2:	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    b7f6:	cmp	r3, #0
    b7f8:	bne.n	b7ea <delay+0x46>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    b7fa:	ldr	r3, [r1, #4]
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    b7fc:	ldr.w	ip, [sl]
	uint32_t ccdelta = cyccnt - scc;
    b800:	subs	r3, r3, r0
	uint32_t usec = 1000*smc + frac;
    b802:	mul.w	r2, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    b806:	umull	r3, ip, r3, ip
	uint32_t usec = 1000*smc + frac;
    b80a:	cmp.w	ip, #1000	; 0x3e8
    b80e:	ite	ls
    b810:	addls	r2, ip
    b812:	addhi.w	r2, r2, #1000	; 0x3e8
		while ((micros() - start) >= 1000) {
    b816:	sub.w	r2, r2, r8
    b81a:	cmp.w	r2, #1000	; 0x3e8
    b81e:	bcc.n	b82e <delay+0x8a>
			if (--msec == 0) return;
    b820:	subs.w	r9, r9, #1
			start += 1000;
    b824:	add.w	r8, r8, #1000	; 0x3e8
			if (--msec == 0) return;
    b828:	bne.n	b7ea <delay+0x46>
}
    b82a:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		yield();
    b82e:	bl	c0b4 <yield>
		while ((micros() - start) >= 1000) {
    b832:	ldr	r1, [pc, #16]	; (b844 <delay+0xa0>)
    b834:	b.n	b7ea <delay+0x46>
    b836:	nop
    b838:	.word	0x200080e8
    b83c:	.word	0x200080e4
    b840:	.word	0x200080e0
    b844:	.word	0xe0001000
    b848:	.word	0x200080dc

0000b84c <micros>:
{
    b84c:	push	{r4, r5}
    b84e:	ldr	r3, [pc, #60]	; (b88c <micros+0x40>)
    b850:	mov.w	ip, #1
    b854:	ldr	r5, [pc, #56]	; (b890 <micros+0x44>)
    b856:	ldr	r4, [pc, #60]	; (b894 <micros+0x48>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    b858:	ldrex	r2, [r3]
		smc = systick_millis_count;
    b85c:	ldr	r0, [r5, #0]
		scc = systick_cycle_count;
    b85e:	ldr	r1, [r4, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    b860:	strex	r2, ip, [r3]
	} while ( __STREXW(1, &systick_safe_read));
    b864:	cmp	r2, #0
    b866:	bne.n	b858 <micros+0xc>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    b868:	ldr	r3, [pc, #44]	; (b898 <micros+0x4c>)
    b86a:	ldr	r3, [r3, #4]
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    b86c:	ldr	r2, [pc, #44]	; (b89c <micros+0x50>)
	uint32_t ccdelta = cyccnt - scc;
    b86e:	subs	r3, r3, r1
	uint32_t usec = 1000*smc + frac;
    b870:	mov.w	r1, #1000	; 0x3e8
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    b874:	ldr	r2, [r2, #0]
	uint32_t usec = 1000*smc + frac;
    b876:	mul.w	r0, r1, r0
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    b87a:	umull	r3, r2, r3, r2
	return usec;
}
    b87e:	pop	{r4, r5}
    b880:	cmp	r2, r1
    b882:	ite	ls
    b884:	addls	r0, r0, r2
    b886:	addhi	r0, r0, r1
    b888:	bx	lr
    b88a:	nop
    b88c:	.word	0x200080e8
    b890:	.word	0x200080e4
    b894:	.word	0x200080e0
    b898:	.word	0xe0001000
    b89c:	.word	0x200080dc

0000b8a0 <unused_interrupt_vector>:
	__disable_irq();
    b8a0:	cpsid	i
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
    b8a2:	mrs	r3, IPSR
	info->ipsr = ipsr;
    b8a6:	ldr	r4, [pc, #316]	; (b9e4 <unused_interrupt_vector+0x144>)
    b8a8:	str.w	r3, [r4, #132]	; 0x84
	asm volatile("mrs %0, msp\n" : "=r" (stack) :: "memory");
    b8ac:	mrs	r2, MSP
	info->cfsr = SCB_CFSR;
    b8b0:	mov.w	r3, #3758153728	; 0xe000e000
	p = (uint32_t *)info;
    b8b4:	ldr	r6, [pc, #304]	; (b9e8 <unused_interrupt_vector+0x148>)
	while (p < end) {
    b8b6:	ldr	r5, [pc, #308]	; (b9ec <unused_interrupt_vector+0x14c>)
	info->cfsr = SCB_CFSR;
    b8b8:	ldr.w	r0, [r3, #3368]	; 0xd28
	info->hfsr = SCB_HFSR;
    b8bc:	ldr.w	r1, [r3, #3372]	; 0xd2c
    b8c0:	strd	r0, r1, [r4, #136]	; 0x88
	info->mmfar = SCB_MMFAR;
    b8c4:	ldr.w	r1, [r3, #3380]	; 0xd34
	info->bfar = SCB_BFAR;
    b8c8:	ldr.w	r3, [r3, #3384]	; 0xd38
    b8cc:	strd	r1, r3, [r4, #144]	; 0x90
	info->ret = stack[6];
    b8d0:	ldr	r3, [r2, #24]
    b8d2:	str.w	r3, [r4, #152]	; 0x98
	info->xpsr = stack[7];
    b8d6:	ldr	r3, [r2, #28]
    b8d8:	str.w	r3, [r4, #156]	; 0x9c
	info->temp = tempmonGetTemp();
    b8dc:	bl	bb78 <tempmonGetTemp>
    b8e0:	vstr	s0, [r4, #160]	; 0xa0
	info->time = rtc_get();
    b8e4:	bl	ba80 <rtc_get>
	info->len = sizeof(*info) / 4;
    b8e8:	movs	r1, #11
	crc = 0xFFFFFFFF;
    b8ea:	mov.w	r2, #4294967295
	info->time = rtc_get();
    b8ee:	str.w	r0, [r4, #164]	; 0xa4
	info->len = sizeof(*info) / 4;
    b8f2:	mov	r3, r1
    b8f4:	str.w	r1, [r4, #128]	; 0x80
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    b8f8:	ldr	r1, [pc, #244]	; (b9f0 <unused_interrupt_vector+0x150>)
		crc ^= *p++;
    b8fa:	adds	r0, r6, #4
    b8fc:	eors	r2, r3
    b8fe:	movs	r4, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    b900:	and.w	r3, r2, #1
    b904:	subs	r4, #1
    b906:	mul.w	r3, r1, r3
    b90a:	eor.w	r2, r3, r2, lsr #1
    b90e:	bne.n	b900 <unused_interrupt_vector+0x60>
	while (p < end) {
    b910:	cmp	r0, r5
    b912:	beq.n	b91a <unused_interrupt_vector+0x7a>
		crc ^= *p++;
    b914:	ldr	r3, [r6, #4]
    b916:	mov	r6, r0
    b918:	b.n	b8fa <unused_interrupt_vector+0x5a>
	info->crc = crc;
    b91a:	ldr	r3, [pc, #200]	; (b9e4 <unused_interrupt_vector+0x144>)
    b91c:	str.w	r2, [r3, #168]	; 0xa8
	asm("dsb");
    b920:	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    b924:	mov.w	r3, #3758153728	; 0xe000e000
    b928:	ldr	r1, [pc, #188]	; (b9e8 <unused_interrupt_vector+0x148>)
    b92a:	ldr	r2, [pc, #200]	; (b9f4 <unused_interrupt_vector+0x154>)
    b92c:	str.w	r1, [r3, #3952]	; 0xf70
    b930:	str.w	r2, [r3, #3952]	; 0xf70
	asm("dsb");
    b934:	dsb	sy
	asm("isb");
    b938:	isb	sy
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    b93c:	ldr	r2, [pc, #184]	; (b9f8 <unused_interrupt_vector+0x158>)
	PIT_MCR = PIT_MCR_MDIS;
    b93e:	movs	r5, #2
    b940:	ldr	r0, [pc, #184]	; (b9fc <unused_interrupt_vector+0x15c>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    b942:	ldr	r3, [r2, #108]	; 0x6c
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    b944:	ldr	r1, [pc, #184]	; (ba00 <unused_interrupt_vector+0x160>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    b946:	orr.w	r3, r3, #12288	; 0x3000
    b94a:	str	r3, [r2, #108]	; 0x6c
	PIT_MCR = PIT_MCR_MDIS;
    b94c:	str	r5, [r0, #0]
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    b94e:	ldr	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    b950:	ldr	r0, [pc, #176]	; (ba04 <unused_interrupt_vector+0x164>)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    b952:	bic.w	r3, r3, #127	; 0x7f
    b956:	orr.w	r3, r3, #64	; 0x40
    b95a:	str	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    b95c:	ldr	r3, [r1, #0]
    b95e:	cmp	r3, r0
    b960:	bhi.n	b9de <unused_interrupt_vector+0x13e>
	PIT_MCR = 0;
    b962:	ldr	r5, [pc, #152]	; (b9fc <unused_interrupt_vector+0x15c>)
    b964:	movs	r1, #0
	NVIC_ICER0 = 0xFFFFFFFF;
    b966:	mov.w	r3, #3758153728	; 0xe000e000
    b96a:	mov.w	r2, #4294967295
	PIT_MCR = 0;
    b96e:	str	r1, [r5, #0]
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    b970:	movs	r6, #1
	PIT_TCTRL0 = 0;
    b972:	str.w	r1, [r5, #264]	; 0x108
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
    b976:	ldr	r1, [pc, #144]	; (ba08 <unused_interrupt_vector+0x168>)
    b978:	str.w	r1, [r5, #256]	; 0x100
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    b97c:	str.w	r6, [r5, #264]	; 0x108
	NVIC_ICER0 = 0xFFFFFFFF;
    b980:	str.w	r2, [r3, #384]	; 0x180
	NVIC_ICER1 = 0xFFFFFFFF;
    b984:	str.w	r2, [r3, #388]	; 0x184
	NVIC_ICER2 = 0xFFFFFFFF;
    b988:	str.w	r2, [r3, #392]	; 0x188
	NVIC_ICER3 = 0xFFFFFFFF;
    b98c:	str.w	r2, [r3, #396]	; 0x18c
	NVIC_ICER4 = 0xFFFFFFFF;
    b990:	str.w	r2, [r3, #400]	; 0x190
	count = 0;
    b994:	b.n	b99a <unused_interrupt_vector+0xfa>
		usb_isr();
    b996:	bl	ae54 <usb_isr>
		if (PIT_TFLG0) {
    b99a:	ldr.w	r3, [r5, #268]	; 0x10c
    b99e:	cmp	r3, #0
    b9a0:	beq.n	b996 <unused_interrupt_vector+0xf6>
			if (++count >= 80) break;  // reboot after 8 seconds
    b9a2:	adds	r4, #1
			PIT_TFLG0 = 1;
    b9a4:	str.w	r6, [r5, #268]	; 0x10c
			if (++count >= 80) break;  // reboot after 8 seconds
    b9a8:	cmp	r4, #79	; 0x4f
    b9aa:	bls.n	b996 <unused_interrupt_vector+0xf6>
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    b9ac:	ldr	r3, [pc, #92]	; (ba0c <unused_interrupt_vector+0x16c>)
	USB1_USBCMD = USB_USBCMD_RST;
    b9ae:	movs	r0, #2
    b9b0:	ldr	r1, [pc, #92]	; (ba10 <unused_interrupt_vector+0x170>)
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    b9b2:	mov.w	r2, #2147483648	; 0x80000000
	USB1_USBCMD = USB_USBCMD_RST;
    b9b6:	str.w	r0, [r1, #320]	; 0x140
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    b9ba:	str	r2, [r3, #52]	; 0x34
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    b9bc:	ldr.w	r3, [r5, #268]	; 0x10c
    b9c0:	cbnz	r3, b9d2 <unused_interrupt_vector+0x132>
	SRC_GPR5 = 0x0BAD00F1;
    b9c2:	ldr	r0, [pc, #80]	; (ba14 <unused_interrupt_vector+0x174>)
    b9c4:	ldr	r1, [pc, #80]	; (ba18 <unused_interrupt_vector+0x178>)
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    b9c6:	ldr	r2, [pc, #52]	; (b9fc <unused_interrupt_vector+0x15c>)
	SRC_GPR5 = 0x0BAD00F1;
    b9c8:	str	r1, [r0, #48]	; 0x30
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    b9ca:	ldr.w	r3, [r2, #268]	; 0x10c
    b9ce:	cmp	r3, #0
    b9d0:	beq.n	b9c8 <unused_interrupt_vector+0x128>
	SCB_AIRCR = 0x05FA0004;
    b9d2:	mov.w	r3, #3758153728	; 0xe000e000
    b9d6:	ldr	r2, [pc, #68]	; (ba1c <unused_interrupt_vector+0x17c>)
    b9d8:	str.w	r2, [r3, #3340]	; 0xd0c
	while (1) ;
    b9dc:	b.n	b9dc <unused_interrupt_vector+0x13c>
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    b9de:	bl	a918 <set_arm_clock>
    b9e2:	b.n	b962 <unused_interrupt_vector+0xc2>
    b9e4:	.word	0x2027ff00
    b9e8:	.word	0x2027ff80
    b9ec:	.word	0x2027ffa8
    b9f0:	.word	0xedb88320
    b9f4:	.word	0x2027ffa0
    b9f8:	.word	0x400fc000
    b9fc:	.word	0x40084000
    ba00:	.word	0x20001458
    ba04:	.word	0x0bcd3d80
    ba08:	.word	0x00249f00
    ba0c:	.word	0x400d9000
    ba10:	.word	0x402e0000
    ba14:	.word	0x400f8000
    ba18:	.word	0x0bad00f1
    ba1c:	.word	0x05fa0004

0000ba20 <_sbrk>:

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
        char *prev = __brkval;
    ba20:	ldr	r1, [pc, #40]	; (ba4c <_sbrk+0x2c>)
    ba22:	ldr	r2, [r1, #0]
        if (incr != 0) {
    ba24:	cbz	r0, ba36 <_sbrk+0x16>
{
    ba26:	push	{r3, lr}
                if (prev + incr > (char *)&_heap_end) {
    ba28:	adds	r3, r2, r0
    ba2a:	ldr	r0, [pc, #36]	; (ba50 <_sbrk+0x30>)
    ba2c:	cmp	r3, r0
    ba2e:	bhi.n	ba3a <_sbrk+0x1a>
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
    ba30:	mov	r0, r2
                __brkval = prev + incr;
    ba32:	str	r3, [r1, #0]
}
    ba34:	pop	{r3, pc}
    ba36:	mov	r0, r2
    ba38:	bx	lr
                        errno = ENOMEM;
    ba3a:	bl	e2b0 <__errno>
    ba3e:	movs	r3, #12
                        return (void *)-1;
    ba40:	mov.w	r2, #4294967295
                        errno = ENOMEM;
    ba44:	str	r3, [r0, #0]
}
    ba46:	mov	r0, r2
    ba48:	pop	{r3, pc}
    ba4a:	nop
    ba4c:	.word	0x2000148c
    ba50:	.word	0x20280000

0000ba54 <_read>:

__attribute__((weak))
int _read(int file, char *ptr, int len)
{
	return 0;
}
    ba54:	movs	r0, #0
    ba56:	bx	lr

0000ba58 <_close>:

__attribute__((weak))
int _close(int fd)
{
	return -1;
}
    ba58:	mov.w	r0, #4294967295
    ba5c:	bx	lr
    ba5e:	nop

0000ba60 <_fstat>:
#include <sys/stat.h>

__attribute__((weak))
int _fstat(int fd, struct stat *st)
{
	st->st_mode = S_IFCHR;
    ba60:	mov.w	r3, #8192	; 0x2000
	return 0;
}
    ba64:	movs	r0, #0
	st->st_mode = S_IFCHR;
    ba66:	str	r3, [r1, #4]
}
    ba68:	bx	lr
    ba6a:	nop

0000ba6c <_isatty>:

__attribute__((weak))
int _isatty(int fd)
{
	return 1;
}
    ba6c:	movs	r0, #1
    ba6e:	bx	lr

0000ba70 <_lseek>:

__attribute__((weak))
int _lseek(int fd, long long offset, int whence)
{
	return -1;
}
    ba70:	mov.w	r0, #4294967295
    ba74:	bx	lr
    ba76:	nop

0000ba78 <__cxa_pure_virtual>:
}

__attribute__((weak))
void __cxa_pure_virtual()
{
	while (1) asm ("WFI");
    ba78:	wfi
    ba7a:	b.n	ba78 <__cxa_pure_virtual>

0000ba7c <abort>:
}

__attribute__((weak))
void abort(void)
{
	while (1) asm ("WFI");
    ba7c:	wfi
    ba7e:	b.n	ba7c <abort>

0000ba80 <rtc_get>:
	uint32_t hi1 = SNVS_HPRTCMR;
    ba80:	ldr	r2, [pc, #28]	; (baa0 <rtc_get+0x20>)
    ba82:	ldr	r0, [r2, #36]	; 0x24
	uint32_t lo1 = SNVS_HPRTCLR;
    ba84:	ldr	r3, [r2, #40]	; 0x28
		uint32_t hi2 = SNVS_HPRTCMR;
    ba86:	mov	r1, r3
    ba88:	mov	ip, r0
    ba8a:	ldr	r0, [r2, #36]	; 0x24
		uint32_t lo2 = SNVS_HPRTCLR;
    ba8c:	ldr	r3, [r2, #40]	; 0x28
		if (lo1 == lo2 && hi1 == hi2) {
    ba8e:	cmp	r1, r3
    ba90:	bne.n	ba86 <rtc_get+0x6>
    ba92:	cmp	ip, r0
    ba94:	bne.n	ba86 <rtc_get+0x6>
			return (hi2 << 17) | (lo2 >> 15);
    ba96:	lsrs	r3, r3, #15
}
    ba98:	orr.w	r0, r3, r0, lsl #17
    ba9c:	bx	lr
    ba9e:	nop
    baa0:	.word	0x400d4000

0000baa4 <sm_align_pool>:
	if (spool->pool_size % HEADER_SZ) return 0;
	return 1;
}

int sm_align_pool(struct smalloc_pool *spool)
{
    baa4:	push	{r3, lr}
	size_t x;

	if (smalloc_verify_pool(spool)) return 1;

	x = spool->pool_size % HEADER_SZ;
    baa6:	ldrd	r3, r2, [r0]
	if (!spool->pool || !spool->pool_size) return 0;
    baaa:	cbz	r3, bac4 <sm_align_pool+0x20>
    baac:	cbz	r2, bade <sm_align_pool+0x3a>
	if (spool->pool_size % HEADER_SZ) return 0;
    baae:	ldr	r3, [pc, #60]	; (baec <sm_align_pool+0x48>)
    bab0:	umull	r1, r3, r3, r2
    bab4:	lsrs	r3, r3, #3
    bab6:	add.w	r3, r3, r3, lsl #1
    baba:	subs.w	r3, r2, r3, lsl #2
    babe:	bne.n	bad6 <sm_align_pool+0x32>
	if (smalloc_verify_pool(spool)) return 1;
    bac0:	movs	r0, #1
		errno = ENOSPC;
		return 0;
	}

	return 1;
}
    bac2:	pop	{r3, pc}
	x = spool->pool_size % HEADER_SZ;
    bac4:	ldr	r3, [pc, #36]	; (baec <sm_align_pool+0x48>)
    bac6:	umull	r1, r3, r3, r2
    baca:	lsrs	r3, r3, #3
    bacc:	add.w	r3, r3, r3, lsl #1
	if (x) spool->pool_size -= x;
    bad0:	subs.w	r3, r2, r3, lsl #2
    bad4:	beq.n	bada <sm_align_pool+0x36>
    bad6:	subs	r2, r2, r3
    bad8:	str	r2, [r0, #4]
	if (spool->pool_size <= MIN_POOL_SZ) {
    bada:	cmp	r2, #240	; 0xf0
    badc:	bhi.n	bac0 <sm_align_pool+0x1c>
		errno = ENOSPC;
    bade:	bl	e2b0 <__errno>
    bae2:	movs	r2, #28
    bae4:	mov	r3, r0
    bae6:	movs	r0, #0
    bae8:	str	r2, [r3, #0]
}
    baea:	pop	{r3, pc}
    baec:	.word	0xaaaaaaab

0000baf0 <sm_set_pool>:

int sm_set_pool(struct smalloc_pool *spool, void *new_pool, size_t new_pool_size, int do_zero, smalloc_oom_handler oom_handler)
{
    baf0:	push	{r4, r5, r6, lr}
	if (!spool) {
    baf2:	mov	r4, r0
    baf4:	cbz	r0, bb46 <sm_set_pool+0x56>
		errno = EINVAL;
		return 0;
	}

	if (!new_pool || !new_pool_size) {
    baf6:	cbz	r1, bb00 <sm_set_pool+0x10>
    baf8:	clz	r6, r2
    bafc:	lsrs	r6, r6, #5
    bafe:	cbnz	r2, bb2a <sm_set_pool+0x3a>
	if (!spool->pool || !spool->pool_size) return 0;
    bb00:	ldr	r0, [r4, #0]
    bb02:	cbz	r0, bb46 <sm_set_pool+0x56>
    bb04:	ldr	r2, [r4, #4]
    bb06:	cbz	r2, bb46 <sm_set_pool+0x56>
	if (spool->pool_size % HEADER_SZ) return 0;
    bb08:	ldr	r3, [pc, #96]	; (bb6c <sm_set_pool+0x7c>)
    bb0a:	ldr	r1, [pc, #100]	; (bb70 <sm_set_pool+0x80>)
    bb0c:	mul.w	r3, r2, r3
    bb10:	cmp.w	r1, r3, ror #2
    bb14:	bcc.n	bb46 <sm_set_pool+0x56>
		if (smalloc_verify_pool(spool)) {
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    bb16:	ldr	r3, [r4, #8]
    bb18:	cbnz	r3, bb54 <sm_set_pool+0x64>
			memset(spool, 0, sizeof(struct smalloc_pool));
    bb1a:	movs	r2, #0
			return 1;
    bb1c:	movs	r3, #1
			memset(spool, 0, sizeof(struct smalloc_pool));
    bb1e:	str	r2, [r4, #0]
    bb20:	str	r2, [r4, #4]
    bb22:	str	r2, [r4, #8]
    bb24:	str	r2, [r4, #12]
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
}
    bb26:	mov	r0, r3
    bb28:	pop	{r4, r5, r6, pc}
	spool->pool = new_pool;
    bb2a:	mov	r5, r3
	spool->oomfn = oom_handler;
    bb2c:	ldr	r3, [sp, #16]
	spool->pool_size = new_pool_size;
    bb2e:	strd	r1, r2, [r0]
	spool->oomfn = oom_handler;
    bb32:	str	r3, [r0, #12]
	if (!sm_align_pool(spool)) return 0;
    bb34:	bl	baa4 <sm_align_pool>
    bb38:	mov	r3, r0
    bb3a:	cmp	r0, #0
    bb3c:	beq.n	bb26 <sm_set_pool+0x36>
	if (do_zero) {
    bb3e:	cbnz	r5, bb5c <sm_set_pool+0x6c>
	return 1;
    bb40:	movs	r3, #1
}
    bb42:	mov	r0, r3
    bb44:	pop	{r4, r5, r6, pc}
		errno = EINVAL;
    bb46:	bl	e2b0 <__errno>
    bb4a:	movs	r2, #22
		return 0;
    bb4c:	movs	r3, #0
		errno = EINVAL;
    bb4e:	str	r2, [r0, #0]
}
    bb50:	mov	r0, r3
    bb52:	pop	{r4, r5, r6, pc}
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    bb54:	movs	r1, #0
    bb56:	bl	e044 <memset>
    bb5a:	b.n	bb1a <sm_set_pool+0x2a>
		memset(spool->pool, 0, spool->pool_size);
    bb5c:	ldr	r2, [r4, #4]
    bb5e:	mov	r1, r6
    bb60:	ldr	r0, [r4, #0]
		spool->do_zero = do_zero;
    bb62:	str	r5, [r4, #8]
		memset(spool->pool, 0, spool->pool_size);
    bb64:	bl	e044 <memset>
	return 1;
    bb68:	movs	r3, #1
    bb6a:	b.n	bb26 <sm_set_pool+0x36>
    bb6c:	.word	0xaaaaaaab
    bb70:	.word	0x15555555

0000bb74 <Panic_Temp_isr>:
  unused_interrupt_vector();
    bb74:	b.w	b8a0 <unused_interrupt_vector>

0000bb78 <tempmonGetTemp>:
float tempmonGetTemp(void)
{
    uint32_t nmeas;
    float tmeas;

    while (!(TEMPMON_TEMPSENSE0 & 0x4U))
    bb78:	ldr	r2, [pc, #72]	; (bbc4 <tempmonGetTemp+0x4c>)
    bb7a:	ldr.w	r3, [r2, #128]	; 0x80
    bb7e:	lsls	r3, r3, #29
    bb80:	bpl.n	bb7a <tempmonGetTemp+0x2>
    {
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    bb82:	ldr.w	r3, [r2, #128]	; 0x80
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    bb86:	ldr	r0, [pc, #64]	; (bbc8 <tempmonGetTemp+0x50>)
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    bb88:	ubfx	r3, r3, #8, #12
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    bb8c:	ldr	r1, [pc, #60]	; (bbcc <tempmonGetTemp+0x54>)
    bb8e:	vldr	s14, [r0]
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    bb92:	vmov	s15, r3
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    bb96:	vldr	s12, [r1]
    bb9a:	vcvt.f32.u32	s14, s14
    bb9e:	ldr	r2, [pc, #48]	; (bbd0 <tempmonGetTemp+0x58>)
    bba0:	vcvt.f32.s32	s15, s15
    bba4:	ldr	r3, [pc, #44]	; (bbd4 <tempmonGetTemp+0x5c>)
    bba6:	vldr	s13, [r2]
    bbaa:	vsub.f32	s15, s15, s14
    bbae:	vldr	s14, [r3]
    bbb2:	vcvt.f32.u32	s14, s14
    bbb6:	vmul.f32	s15, s15, s12
    bbba:	vdiv.f32	s0, s15, s13

    return tmeas;
}
    bbbe:	vsub.f32	s0, s14, s0
    bbc2:	bx	lr
    bbc4:	.word	0x400d8100
    bbc8:	.word	0x200080cc
    bbcc:	.word	0x200080d4
    bbd0:	.word	0x200080d8
    bbd4:	.word	0x200080d0

0000bbd8 <digitalWrite>:
void digitalWrite(uint8_t pin, uint8_t val)
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
    bbd8:	cmp	r0, #54	; 0x36
    bbda:	bhi.n	bc0a <digitalWrite+0x32>
	p = digital_pin_to_info_PGM + pin;
    bbdc:	lsls	r2, r0, #4
    bbde:	ldr	r3, [pc, #64]	; (bc20 <digitalWrite+0x48>)
    bbe0:	add.w	r0, r3, r0, lsl #4
	pinmode = *(p->reg + 1);
    bbe4:	ldr	r3, [r3, r2]
{
    bbe6:	push	{r4}
	mask = p->mask;
    bbe8:	ldr	r2, [r0, #12]
	pinmode = *(p->reg + 1);
    bbea:	ldr	r4, [r3, #4]
	if (pinmode & mask) {
    bbec:	tst	r4, r2
    bbee:	beq.n	bbfc <digitalWrite+0x24>
		// pin is configured for output mode
		if (val) {
    bbf0:	cbnz	r1, bc0c <digitalWrite+0x34>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
    bbf2:	ldr.w	r4, [sp], #4
			*(p->reg + 0x22) = mask; // clear register
    bbf6:	str.w	r2, [r3, #136]	; 0x88
}
    bbfa:	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    bbfc:	ldr	r3, [r0, #8]
		if (val) {
    bbfe:	cbz	r1, bc16 <digitalWrite+0x3e>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    bc00:	ldr	r2, [pc, #32]	; (bc24 <digitalWrite+0x4c>)
}
    bc02:	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    bc06:	str	r2, [r3, #0]
}
    bc08:	bx	lr
    bc0a:	bx	lr
    bc0c:	ldr.w	r4, [sp], #4
			*(p->reg + 0x21) = mask; // set register
    bc10:	str.w	r2, [r3, #132]	; 0x84
}
    bc14:	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    bc16:	ldr	r2, [pc, #16]	; (bc28 <digitalWrite+0x50>)
}
    bc18:	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    bc1c:	str	r2, [r3, #0]
}
    bc1e:	bx	lr
    bc20:	.word	0x20000ebc
    bc24:	.word	0x0001f038
    bc28:	.word	0x00013038

0000bc2c <digitalRead>:

uint8_t digitalRead(uint8_t pin)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return 0;
    bc2c:	cmp	r0, #54	; 0x36
    bc2e:	bhi.n	bc48 <digitalRead+0x1c>
	p = digital_pin_to_info_PGM + pin;
    bc30:	ldr	r3, [pc, #24]	; (bc4c <digitalRead+0x20>)
    bc32:	lsls	r2, r0, #4
    bc34:	add.w	r0, r3, r0, lsl #4
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
    bc38:	ldr	r2, [r3, r2]
    bc3a:	ldr	r3, [r0, #12]
    bc3c:	ldr	r2, [r2, #8]
    bc3e:	tst	r2, r3
    bc40:	ite	ne
    bc42:	movne	r0, #1
    bc44:	moveq	r0, #0
    bc46:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return 0;
    bc48:	movs	r0, #0
}
    bc4a:	bx	lr
    bc4c:	.word	0x20000ebc

0000bc50 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    bc50:	cmp	r0, #54	; 0x36
    bc52:	bhi.n	bca8 <pinMode+0x58>
	p = digital_pin_to_info_PGM + pin;
    bc54:	ldr	r3, [pc, #88]	; (bcb0 <pinMode+0x60>)
    bc56:	lsls	r2, r0, #4
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    bc58:	cmp	r1, #1
	p = digital_pin_to_info_PGM + pin;
    bc5a:	add.w	r0, r3, r0, lsl #4
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    bc5e:	ldr	r2, [r3, r2]
{
    bc60:	push	{r4}
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    bc62:	ldr	r3, [r2, #4]
    bc64:	ldr	r4, [r0, #12]
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    bc66:	beq.n	bc86 <pinMode+0x36>
    bc68:	cmp	r1, #4
    bc6a:	beq.n	bc86 <pinMode+0x36>
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    bc6c:	bic.w	r3, r3, r4
    bc70:	str	r3, [r2, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    bc72:	ldr	r3, [r0, #8]
		if (mode == INPUT) {
    bc74:	cbz	r1, bca2 <pinMode+0x52>
		} else if (mode == INPUT_PULLUP) {
    bc76:	cmp	r1, #2
    bc78:	beq.n	bcaa <pinMode+0x5a>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
    bc7a:	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    bc7c:	ite	eq
    bc7e:	ldreq	r2, [pc, #52]	; (bcb4 <pinMode+0x64>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    bc80:	ldrne	r2, [pc, #52]	; (bcb8 <pinMode+0x68>)
    bc82:	str	r2, [r3, #0]
    bc84:	b.n	bc96 <pinMode+0x46>
		*(p->reg + 1) |= p->mask; // TODO: atomic
    bc86:	orrs	r3, r4
		if (mode == OUTPUT) {
    bc88:	cmp	r1, #1
		*(p->reg + 1) |= p->mask; // TODO: atomic
    bc8a:	str	r3, [r2, #4]
			*(p->pad) = IOMUXC_PAD_DSE(7);
    bc8c:	ldr	r3, [r0, #8]
		if (mode == OUTPUT) {
    bc8e:	beq.n	bca2 <pinMode+0x52>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    bc90:	movw	r2, #2104	; 0x838
    bc94:	str	r2, [r3, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    bc96:	ldr	r3, [r0, #4]
    bc98:	movs	r2, #21
}
    bc9a:	ldr.w	r4, [sp], #4
	*(p->mux) = 5 | 0x10;
    bc9e:	str	r2, [r3, #0]
}
    bca0:	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7);
    bca2:	movs	r2, #56	; 0x38
    bca4:	str	r2, [r3, #0]
    bca6:	b.n	bc96 <pinMode+0x46>
    bca8:	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    bcaa:	ldr	r2, [pc, #16]	; (bcbc <pinMode+0x6c>)
    bcac:	str	r2, [r3, #0]
    bcae:	b.n	bc96 <pinMode+0x46>
    bcb0:	.word	0x20000ebc
    bcb4:	.word	0x00013038
    bcb8:	.word	0x00010038
    bcbc:	.word	0x0001f038

0000bcc0 <flexpwm_init>:
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    bcc0:	movs	r3, #0
	p->FSTS0 = 0x000F; // clear fault status
    bcc2:	movs	r2, #15
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    bcc4:	movw	ip, #33464	; 0x82b8
	for (i=0; i < 4; i++) {
    bcc8:	mov	r1, r3
{
    bcca:	push	{r4, lr}
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    bccc:	mov.w	r4, #61440	; 0xf000
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    bcd0:	mov.w	lr, #1024	; 0x400
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    bcd4:	strh.w	r4, [r0, #396]	; 0x18c
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    bcd8:	mov.w	r4, #57344	; 0xe000
	p->FSTS0 = 0x000F; // clear fault status
    bcdc:	strh.w	r2, [r0, #398]	; 0x18e
		p->SM[i].OCTRL = 0;
    bce0:	mov	r2, r1
	p->FFILT0 = 0;
    bce2:	strh.w	r3, [r0, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    bce6:	ldrh.w	r3, [r0, #392]	; 0x188
    bcea:	uxth	r3, r3
    bcec:	orr.w	r3, r3, #240	; 0xf0
    bcf0:	strh.w	r3, [r0, #392]	; 0x188
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    bcf4:	add.w	r3, r1, r1, lsl #1
	for (i=0; i < 4; i++) {
    bcf8:	adds	r1, #1
    bcfa:	add.w	r3, r0, r3, lsl #5
    bcfe:	cmp	r1, #4
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    bd00:	strh	r4, [r3, #4]
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    bd02:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    bd06:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    bd08:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    bd0a:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    bd0c:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    bd0e:	strh.w	ip, [r3, #14]
		p->SM[i].VAL2 = 0;
    bd12:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    bd14:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    bd16:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    bd18:	strh	r2, [r3, #30]
	for (i=0; i < 4; i++) {
    bd1a:	bne.n	bcf4 <flexpwm_init+0x34>
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    bd1c:	ldrh.w	r3, [r0, #392]	; 0x188
    bd20:	uxth	r3, r3
    bd22:	orr.w	r3, r3, #15
    bd26:	strh.w	r3, [r0, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    bd2a:	ldrh.w	r3, [r0, #392]	; 0x188
    bd2e:	uxth	r3, r3
    bd30:	orr.w	r3, r3, #3840	; 0xf00
    bd34:	strh.w	r3, [r0, #392]	; 0x188
}
    bd38:	pop	{r4, pc}
    bd3a:	nop

0000bd3c <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    bd3c:	ldr	r3, [pc, #220]	; (be1c <pwm_init+0xe0>)
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    bd3e:	ldr	r2, [pc, #224]	; (be20 <pwm_init+0xe4>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    bd40:	ldr	r1, [r3, #120]	; 0x78
		CCM_CCGR6_QTIMER3(CCM_CCGR_ON) | CCM_CCGR6_QTIMER4(CCM_CCGR_ON);
	flexpwm_init(&IMXRT_FLEXPWM1);
    bd42:	ldr	r0, [pc, #224]	; (be24 <pwm_init+0xe8>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    bd44:	orr.w	r1, r1, #16711680	; 0xff0000
{
    bd48:	push	{r4, r5, r6, lr}
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    bd4a:	str	r1, [r3, #120]	; 0x78
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    bd4c:	movw	r6, #4097	; 0x1001
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    bd50:	ldr.w	r1, [r3, #128]	; 0x80
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    bd54:	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    bd58:	movw	r4, #12326	; 0x3026
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    bd5c:	orrs	r2, r1
    bd5e:	str.w	r2, [r3, #128]	; 0x80
	flexpwm_init(&IMXRT_FLEXPWM1);
    bd62:	bl	bcc0 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM2);
    bd66:	add.w	r0, r0, #16384	; 0x4000
    bd6a:	bl	bcc0 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM3);
    bd6e:	add.w	r0, r0, #16384	; 0x4000
    bd72:	bl	bcc0 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM4);
    bd76:	add.w	r0, r0, #16384	; 0x4000
    bd7a:	bl	bcc0 <flexpwm_init>
	for (i=0; i < 4; i++) {
    bd7e:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    bd80:	sub.w	r0, r0, #2146304	; 0x20c000
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    bd84:	mov.w	lr, #15
		p->CH[i].CTRL = 0; // stop timer
    bd88:	mov	r1, r2
    bd8a:	add.w	r3, r0, r2, lsl #5
    bd8e:	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    bd92:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    bd94:	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    bd96:	cmp	r2, #4
		p->CH[i].CNTR = 0;
    bd98:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    bd9a:	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    bd9e:	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    bda0:	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    bda2:	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    bda6:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    bda8:	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    bdaa:	bne.n	bd8a <pwm_init+0x4e>
    bdac:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    bdae:	ldr	r0, [pc, #120]	; (be28 <pwm_init+0xec>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    bdb0:	mov.w	lr, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    bdb4:	movw	r6, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    bdb8:	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    bdba:	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    bdbe:	movw	r4, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    bdc2:	add.w	r3, r0, r2, lsl #5
    bdc6:	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    bdca:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    bdcc:	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    bdce:	cmp	r2, #4
		p->CH[i].CNTR = 0;
    bdd0:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    bdd2:	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    bdd6:	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    bdd8:	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    bdda:	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    bdde:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    bde0:	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    bde2:	bne.n	bdc2 <pwm_init+0x86>
    bde4:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    bde6:	ldr	r0, [pc, #68]	; (be2c <pwm_init+0xf0>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    bde8:	movs	r6, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    bdea:	movw	r5, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    bdee:	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    bdf0:	movw	r4, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    bdf4:	movw	lr, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    bdf8:	add.w	r3, r0, r2, lsl #5
    bdfc:	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    be00:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    be02:	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    be04:	cmp	r2, #4
		p->CH[i].CNTR = 0;
    be06:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    be08:	strh	r6, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    be0a:	strh	r5, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    be0c:	strh	r4, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    be0e:	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    be12:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    be14:	strh.w	lr, [r3, #12]
	for (i=0; i < 4; i++) {
    be18:	bne.n	bdf8 <pwm_init+0xbc>
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    be1a:	pop	{r4, r5, r6, pc}
    be1c:	.word	0x400fc000
    be20:	.word	0xfc030000
    be24:	.word	0x403dc000
    be28:	.word	0x401e0000
    be2c:	.word	0x401e4000

0000be30 <rx_queue_transfer>:
{
    be30:	push	{r3, r4, r5, r6, r7, lr}
	void *buffer = rx_buffer + i * MIDI_RX_SIZE_480;
    be32:	ldr	r4, [pc, #80]	; (be84 <rx_queue_transfer+0x54>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    be34:	mov.w	r5, #3758153728	; 0xe000e000
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    be38:	ldr	r6, [pc, #76]	; (be88 <rx_queue_transfer+0x58>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    be3a:	mov.w	r2, #131072	; 0x20000
	void *buffer = rx_buffer + i * MIDI_RX_SIZE_480;
    be3e:	add.w	r4, r4, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    be42:	ldr	r7, [pc, #72]	; (be8c <rx_queue_transfer+0x5c>)
    be44:	add.w	r6, r6, r0, lsl #5
{
    be48:	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
    be4a:	str.w	r2, [r5, #396]	; 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    be4e:	mov	r1, r4
    be50:	ldrh	r2, [r7, #0]
    be52:	mov	r0, r6
    be54:	bl	b72c <usb_prepare_transfer>
	arm_dcache_delete(buffer, rx_packet_size);
    be58:	ldrh	r3, [r7, #0]
	uint32_t end_addr = (uint32_t)addr + size;
    be5a:	add	r3, r4
	asm("dsb");
    be5c:	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    be60:	str.w	r4, [r5, #3932]	; 0xf5c
		location += 32;
    be64:	adds	r4, #32
	} while (location < end_addr);
    be66:	cmp	r3, r4
    be68:	bhi.n	be60 <rx_queue_transfer+0x30>
	asm("dsb");
    be6a:	dsb	sy
	asm("isb");
    be6e:	isb	sy
	usb_receive(MIDI_RX_ENDPOINT, rx_transfer + i);
    be72:	movs	r0, #4
    be74:	mov	r1, r6
    be76:	bl	b784 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    be7a:	mov.w	r3, #131072	; 0x20000
    be7e:	str.w	r3, [r5, #268]	; 0x10c
}
    be82:	pop	{r3, r4, r5, r6, r7, pc}
    be84:	.word	0x20203d00
    be88:	.word	0x20003020
    be8c:	.word	0x20008148

0000be90 <rx_event>:
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    be90:	ldr	r2, [r0, #4]
	len &= 0xFFFC; // MIDI packets must be multiple of 4 bytes
    be92:	movw	r1, #65532	; 0xfffc
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    be96:	ldr	r3, [pc, #68]	; (bedc <rx_event+0x4c>)
    be98:	ubfx	r2, r2, #16, #15
	int i = t->callback_param;
    be9c:	ldr	r0, [r0, #28]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    be9e:	ldrh	r3, [r3, #0]
    bea0:	subs	r3, r3, r2
	if (len > 0) {
    bea2:	ands	r3, r1
    bea4:	beq.n	bed6 <rx_event+0x46>
		rx_count[i] = len;
    bea6:	ldr	r1, [pc, #56]	; (bee0 <rx_event+0x50>)
{
    bea8:	push	{r4, r5}
		uint32_t head = rx_head;
    beaa:	ldr	r4, [pc, #56]	; (bee4 <rx_event+0x54>)
		rx_index[i] = 0;
    beac:	ldr	r5, [pc, #56]	; (bee8 <rx_event+0x58>)
		uint32_t head = rx_head;
    beae:	ldrb	r2, [r4, #0]
		rx_count[i] = len;
    beb0:	strh.w	r3, [r1, r0, lsl #1]
		rx_index[i] = 0;
    beb4:	movs	r1, #0
		if (++head > RX_NUM) head = 0;
    beb6:	adds	r2, #1
		rx_index[i] = 0;
    beb8:	strh.w	r1, [r5, r0, lsl #1]
		if (++head > RX_NUM) head = 0;
    bebc:	cmp	r2, #6
		rx_head = head;
    bebe:	ite	ls
    bec0:	uxtbls	r1, r2
		if (++head > RX_NUM) head = 0;
    bec2:	movhi	r2, r1
		rx_head = head;
    bec4:	strb	r1, [r4, #0]
		rx_available += len;
    bec6:	ldr	r1, [pc, #36]	; (beec <rx_event+0x5c>)
    bec8:	ldr	r4, [r1, #0]
    beca:	add	r3, r4
    becc:	str	r3, [r1, #0]
		rx_list[head] = i;
    bece:	ldr	r3, [pc, #32]	; (bef0 <rx_event+0x60>)
    bed0:	strb	r0, [r3, r2]
}
    bed2:	pop	{r4, r5}
    bed4:	bx	lr
		rx_queue_transfer(i);
    bed6:	b.w	be30 <rx_queue_transfer>
    beda:	nop
    bedc:	.word	0x20008148
    bee0:	.word	0x20008090
    bee4:	.word	0x20008162
    bee8:	.word	0x200080ac
    beec:	.word	0x2000807c
    bef0:	.word	0x200080c4

0000bef4 <usb_midi_configure>:
	if (usb_high_speed) {
    bef4:	ldr	r3, [pc, #132]	; (bf7c <usb_midi_configure+0x88>)
{
    bef6:	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
    bef8:	ldrb	r3, [r3, #0]
    befa:	cmp	r3, #0
    befc:	beq.n	bf76 <usb_midi_configure+0x82>
    befe:	mov.w	r3, #512	; 0x200
    bf02:	mov	r6, r3
		rx_packet_size = MIDI_RX_SIZE_480;
    bf04:	ldr	r1, [pc, #120]	; (bf80 <usb_midi_configure+0x8c>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
    bf06:	movs	r2, #128	; 0x80
		tx_packet_size = MIDI_TX_SIZE_480;
    bf08:	ldr	r5, [pc, #120]	; (bf84 <usb_midi_configure+0x90>)
	tx_head = 0;
    bf0a:	movs	r4, #0
		rx_packet_size = MIDI_RX_SIZE_480;
    bf0c:	strh	r3, [r1, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    bf0e:	movs	r1, #0
    bf10:	ldr	r0, [pc, #116]	; (bf88 <usb_midi_configure+0x94>)
		tx_packet_size = MIDI_TX_SIZE_480;
    bf12:	strh	r3, [r5, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    bf14:	bl	e044 <memset>
	tx_head = 0;
    bf18:	ldr	r2, [pc, #112]	; (bf8c <usb_midi_configure+0x98>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    bf1a:	mov	r1, r4
	tx_available = 0;
    bf1c:	ldr	r3, [pc, #112]	; (bf90 <usb_midi_configure+0x9c>)
	tx_head = 0;
    bf1e:	strb	r4, [r2, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    bf20:	movs	r2, #192	; 0xc0
    bf22:	ldr	r0, [pc, #112]	; (bf94 <usb_midi_configure+0xa0>)
	tx_available = 0;
    bf24:	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    bf26:	bl	e044 <memset>
	memset(rx_count, 0, sizeof(rx_count));
    bf2a:	ldr	r2, [pc, #108]	; (bf98 <usb_midi_configure+0xa4>)
	usb_config_rx(MIDI_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    bf2c:	mov	r1, r6
	memset(rx_index, 0, sizeof(rx_index));
    bf2e:	ldr	r3, [pc, #108]	; (bf9c <usb_midi_configure+0xa8>)
	usb_config_rx(MIDI_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    bf30:	movs	r0, #4
	memset(rx_count, 0, sizeof(rx_count));
    bf32:	str	r4, [r2, #8]
	memset(rx_index, 0, sizeof(rx_index));
    bf34:	str	r4, [r3, #8]
	memset(rx_count, 0, sizeof(rx_count));
    bf36:	strd	r4, r4, [r2]
	rx_head = 0;
    bf3a:	ldr	r2, [pc, #100]	; (bfa0 <usb_midi_configure+0xac>)
	memset(rx_index, 0, sizeof(rx_index));
    bf3c:	strd	r4, r4, [r3]
	rx_head = 0;
    bf40:	strb	r4, [r2, #0]
	rx_tail = 0;
    bf42:	ldr	r3, [pc, #96]	; (bfa4 <usb_midi_configure+0xb0>)
	rx_available = 0;
    bf44:	ldr	r2, [pc, #96]	; (bfa8 <usb_midi_configure+0xb4>)
	rx_tail = 0;
    bf46:	strb	r4, [r3, #0]
	usb_config_rx(MIDI_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    bf48:	ldr	r3, [pc, #96]	; (bfac <usb_midi_configure+0xb8>)
	rx_available = 0;
    bf4a:	str	r4, [r2, #0]
	usb_config_rx(MIDI_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    bf4c:	mov	r2, r4
    bf4e:	bl	b594 <usb_config_rx>
	usb_config_tx(MIDI_TX_ENDPOINT, tx_packet_size, 0, NULL); // TODO: is ZLP needed?
    bf52:	mov	r3, r4
    bf54:	mov	r2, r4
    bf56:	ldrh	r1, [r5, #0]
    bf58:	movs	r0, #4
    bf5a:	bl	b5f8 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    bf5e:	mov	r0, r4
    bf60:	adds	r4, #1
    bf62:	bl	be30 <rx_queue_transfer>
    bf66:	cmp	r4, #6
    bf68:	bne.n	bf5e <usb_midi_configure+0x6a>
	transmit_previous_timeout = 0;
    bf6a:	movs	r3, #0
    bf6c:	ldr	r1, [pc, #64]	; (bfb0 <usb_midi_configure+0xbc>)
	tx_noautoflush = 0;
    bf6e:	ldr	r2, [pc, #68]	; (bfb4 <usb_midi_configure+0xc0>)
	transmit_previous_timeout = 0;
    bf70:	strb	r3, [r1, #0]
	tx_noautoflush = 0;
    bf72:	strb	r3, [r2, #0]
}
    bf74:	pop	{r4, r5, r6, pc}
    bf76:	movs	r3, #64	; 0x40
    bf78:	mov	r6, r3
    bf7a:	b.n	bf04 <usb_midi_configure+0x10>
    bf7c:	.word	0x20008172
    bf80:	.word	0x20008148
    bf84:	.word	0x20008150
    bf88:	.word	0x200031a0
    bf8c:	.word	0x20008169
    bf90:	.word	0x2000814c
    bf94:	.word	0x20003020
    bf98:	.word	0x20008090
    bf9c:	.word	0x200080ac
    bfa0:	.word	0x20008162
    bfa4:	.word	0x20008164
    bfa8:	.word	0x2000807c
    bfac:	.word	0x0000be91
    bfb0:	.word	0x20008167
    bfb4:	.word	0x2000816b

0000bfb8 <usb_midi_flush_output>:
{
    bfb8:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (tx_noautoflush == 0 && tx_available > 0) {
    bfbc:	ldr	r3, [pc, #132]	; (c044 <usb_midi_flush_output+0x8c>)
    bfbe:	ldrb	r5, [r3, #0]
    bfc0:	cbnz	r5, bfc8 <usb_midi_flush_output+0x10>
    bfc2:	ldr	r6, [pc, #132]	; (c048 <usb_midi_flush_output+0x90>)
    bfc4:	ldrh	r3, [r6, #0]
    bfc6:	cbnz	r3, bfcc <usb_midi_flush_output+0x14>
}
    bfc8:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		uint32_t head = tx_head;
    bfcc:	ldr.w	r8, [pc, #136]	; c058 <usb_midi_flush_output+0xa0>
		transfer_t *xfer = tx_transfer + head;
    bfd0:	ldr	r2, [pc, #120]	; (c04c <usb_midi_flush_output+0x94>)
		uint32_t head = tx_head;
    bfd2:	ldrb.w	r7, [r8]
		uint8_t *txbuf = txbuffer + (head * TX_SIZE);
    bfd6:	ldr	r4, [pc, #120]	; (c050 <usb_midi_flush_output+0x98>)
		transfer_t *xfer = tx_transfer + head;
    bfd8:	add.w	r9, r2, r7, lsl #5
		uint32_t len = tx_packet_size - tx_available;
    bfdc:	ldr	r2, [pc, #116]	; (c054 <usb_midi_flush_output+0x9c>)
		uint8_t *txbuf = txbuffer + (head * TX_SIZE);
    bfde:	add.w	r4, r4, r7, lsl #9
		uint32_t len = tx_packet_size - tx_available;
    bfe2:	ldrh	r2, [r2, #0]
		usb_prepare_transfer(xfer, txbuf, len, 0);
    bfe4:	mov	r0, r9
    bfe6:	mov	r1, r4
    bfe8:	subs	r2, r2, r3
    bfea:	mov	r3, r5
    bfec:	bl	b72c <usb_prepare_transfer>
	asm("dsb");
    bff0:	dsb	sy
    bff4:	add.w	r2, r4, #32
	uint32_t end_addr = (uint32_t)addr + size;
    bff8:	add.w	r3, r4, #512	; 0x200
    bffc:	cmp	r3, r2
    bffe:	ite	cc
    c000:	movcc	r3, #1
    c002:	movcs	r3, #16
		SCB_CACHE_DCCIMVAC = location;
    c004:	mov.w	r2, #3758153728	; 0xe000e000
    c008:	add.w	r3, r4, r3, lsl #5
    c00c:	str.w	r4, [r2, #3952]	; 0xf70
		location += 32;
    c010:	adds	r4, #32
	} while (location < end_addr);
    c012:	cmp	r4, r3
    c014:	bne.n	c00c <usb_midi_flush_output+0x54>
	asm("dsb");
    c016:	dsb	sy
	asm("isb");
    c01a:	isb	sy
		if (++head >= TX_NUM) head = 0;
    c01e:	adds	r7, #1
		usb_transmit(MIDI_TX_ENDPOINT, xfer);
    c020:	mov	r1, r9
    c022:	movs	r0, #4
    c024:	bl	b75c <usb_transmit>
		if (++head >= TX_NUM) head = 0;
    c028:	cmp	r7, #3
		tx_available = 0;
    c02a:	mov.w	r3, #0
		usb_stop_sof_interrupts(MIDI_INTERFACE);
    c02e:	mov.w	r0, #2
		tx_head = head;
    c032:	it	ls
    c034:	uxtbls	r5, r7
		tx_available = 0;
    c036:	strh	r3, [r6, #0]
		tx_head = head;
    c038:	strb.w	r5, [r8]
}
    c03c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		usb_stop_sof_interrupts(MIDI_INTERFACE);
    c040:	b.w	ae28 <usb_stop_sof_interrupts>
    c044:	.word	0x2000816b
    c048:	.word	0x2000814c
    c04c:	.word	0x200031a0
    c050:	.word	0x20204900
    c054:	.word	0x20008150
    c058:	.word	0x20008169

0000c05c <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    c05c:	ldr	r2, [pc, #72]	; (c0a8 <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    c05e:	ldr	r3, [pc, #76]	; (c0ac <usb_init_serialnumber+0x50>)
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    c060:	ldr.w	r0, [r2, #544]	; 0x220
    c064:	bic.w	r0, r0, #4278190080	; 0xff000000
	if (num < 10000000) num = num * 10;
    c068:	cmp	r0, r3
{
    c06a:	push	{r4, lr}
    c06c:	sub	sp, #16
	if (num < 10000000) num = num * 10;
    c06e:	bcs.n	c076 <usb_init_serialnumber+0x1a>
    c070:	add.w	r0, r0, r0, lsl #2
    c074:	lsls	r0, r0, #1
	ultoa(num, buf, 10);
    c076:	ldr	r4, [pc, #56]	; (c0b0 <usb_init_serialnumber+0x54>)
    c078:	add	r1, sp, #4
    c07a:	movs	r2, #10
    c07c:	bl	d080 <ultoa>
	for (i=0; i<10; i++) {
    c080:	add	r1, sp, #4
    c082:	movs	r3, #0
    c084:	mov	r0, r4
		char c = buf[i];
    c086:	ldrb.w	r2, [r1], #1
	for (i=0; i<10; i++) {
    c08a:	adds	r3, #1
		if (!c) break;
    c08c:	cbz	r2, c09e <usb_init_serialnumber+0x42>
	for (i=0; i<10; i++) {
    c08e:	cmp	r3, #10
		usb_string_serial_number_default.wString[i] = c;
    c090:	strh.w	r2, [r0, #2]!
	for (i=0; i<10; i++) {
    c094:	bne.n	c086 <usb_init_serialnumber+0x2a>
    c096:	movs	r3, #22
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    c098:	strb	r3, [r4, #0]
}
    c09a:	add	sp, #16
    c09c:	pop	{r4, pc}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    c09e:	lsls	r3, r3, #1
    c0a0:	uxtb	r3, r3
    c0a2:	strb	r3, [r4, #0]
}
    c0a4:	add	sp, #16
    c0a6:	pop	{r4, pc}
    c0a8:	.word	0x401f4400
    c0ac:	.word	0x00989680
    c0b0:	.word	0x20001a38

0000c0b4 <yield>:

extern const uint8_t _serialEvent_default;	

void yield(void) __attribute__ ((weak));
void yield(void)
{
    c0b4:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
    c0b8:	ldr	r6, [pc, #200]	; (c184 <yield+0xd0>)
    c0ba:	ldrb	r3, [r6, #0]
    c0bc:	cbz	r3, c0d8 <yield+0x24>
	if (running) return; // TODO: does this need to be atomic?
    c0be:	ldr	r7, [pc, #200]	; (c188 <yield+0xd4>)
    c0c0:	ldrb	r2, [r7, #0]
    c0c2:	cbnz	r2, c0d8 <yield+0x24>
	running = 1;
    c0c4:	movs	r2, #1


	// USB Serial - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    c0c6:	lsls	r1, r3, #31
	running = 1;
    c0c8:	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    c0ca:	bmi.n	c156 <yield+0xa2>
		if (_serialEventUSB2_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIALUSB2;
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) HardwareSerial::processSerialEventsList();
    c0cc:	lsls	r2, r3, #30
    c0ce:	bmi.n	c11e <yield+0x6a>

	running = 0;
    c0d0:	movs	r2, #0
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    c0d2:	lsls	r3, r3, #29
	running = 0;
    c0d4:	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    c0d6:	bmi.n	c0dc <yield+0x28>
	
};
    c0d8:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	// Wait for event(s) to occur.  These are most likely to be useful when
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);
	static void runFromYield() {
		if (!firstYield) return;  
    c0dc:	ldr	r3, [pc, #172]	; (c18c <yield+0xd8>)
    c0de:	ldr	r2, [r3, #0]
    c0e0:	cmp	r2, #0
    c0e2:	beq.n	c0d8 <yield+0x24>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    c0e4:	mrs	r2, IPSR
		if (ipsr != 0) return;
    c0e8:	cmp	r2, #0
    c0ea:	bne.n	c0d8 <yield+0x24>
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    c0ec:	mrs	r5, PRIMASK
		__disable_irq();
    c0f0:	cpsid	i
		EventResponder *first = firstYield;
    c0f2:	ldr	r0, [r3, #0]
		if (first == nullptr) {
    c0f4:	cmp	r0, #0
    c0f6:	beq.n	c170 <yield+0xbc>
		if (runningFromYield) {
    c0f8:	ldr	r4, [pc, #148]	; (c190 <yield+0xdc>)
    c0fa:	ldrb	r1, [r4, #0]
    c0fc:	cmp	r1, #0
    c0fe:	bne.n	c170 <yield+0xbc>
		runningFromYield = true;
    c100:	movs	r2, #1
    c102:	strb	r2, [r4, #0]
		firstYield = first->_next;
    c104:	ldr	r2, [r0, #20]
    c106:	str	r2, [r3, #0]
		if (firstYield) {
    c108:	cmp	r2, #0
    c10a:	beq.n	c17e <yield+0xca>
			firstYield->_prev = nullptr;
    c10c:	str	r1, [r2, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    c10e:	cbnz	r5, c112 <yield+0x5e>
    c110:	cpsie	i
		first->_triggered = false;
    c112:	movs	r5, #0
		(*(first->_function))(*first);
    c114:	ldr	r3, [r0, #8]
		first->_triggered = false;
    c116:	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    c118:	blx	r3
		runningFromYield = false;
    c11a:	strb	r5, [r4, #0]
    c11c:	b.n	c0d8 <yield+0x24>
	*/

	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    c11e:	ldr.w	r8, [pc, #124]	; c19c <yield+0xe8>
    c122:	ldrb.w	r2, [r8]
    c126:	cmp	r2, #0
    c128:	beq.n	c0d0 <yield+0x1c>
    c12a:	movs	r5, #0
    c12c:	ldr.w	r9, [pc, #112]	; c1a0 <yield+0xec>
    c130:	mov	r3, r5
			s_serials_with_serial_events[i]->doYieldCode();
    c132:	ldr.w	r4, [r9, r3, lsl #2]
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    c136:	adds	r5, #1
	static HardwareSerial 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
    c138:	ldr	r3, [r4, #0]
    c13a:	mov	r0, r4
    c13c:	ldr	r3, [r3, #16]
    c13e:	blx	r3
    c140:	cbz	r0, c148 <yield+0x94>
    c142:	ldr	r3, [r4, #20]
    c144:	ldr	r3, [r3, #8]
    c146:	blx	r3
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    c148:	ldrb.w	r2, [r8]
    c14c:	uxtb	r3, r5
    c14e:	cmp	r2, r3
    c150:	bhi.n	c132 <yield+0x7e>
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    c152:	ldrb	r3, [r6, #0]
    c154:	b.n	c0d0 <yield+0x1c>
    c156:	bl	a748 <usb_serial_available>
		if (Serial.available()) serialEvent();
    c15a:	cbnz	r0, c178 <yield+0xc4>
		if (_serialEvent_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIAL;
    c15c:	ldr	r3, [pc, #52]	; (c194 <yield+0xe0>)
    c15e:	ldrb	r3, [r3, #0]
    c160:	cbnz	r3, c166 <yield+0xb2>
    c162:	ldrb	r3, [r6, #0]
    c164:	b.n	c0cc <yield+0x18>
    c166:	ldrb	r3, [r6, #0]
    c168:	and.w	r3, r3, #254	; 0xfe
    c16c:	strb	r3, [r6, #0]
    c16e:	b.n	c0cc <yield+0x18>
		if (doit) __enable_irq();
    c170:	cmp	r5, #0
    c172:	bne.n	c0d8 <yield+0x24>
    c174:	cpsie	i
    c176:	b.n	c0d8 <yield+0x24>
		if (Serial.available()) serialEvent();
    c178:	bl	d074 <serialEvent()>
    c17c:	b.n	c15c <yield+0xa8>
			lastYield = nullptr;
    c17e:	ldr	r3, [pc, #24]	; (c198 <yield+0xe4>)
    c180:	str	r2, [r3, #0]
    c182:	b.n	c10e <yield+0x5a>
    c184:	.word	0x20001a4f
    c188:	.word	0x2000815d
    c18c:	.word	0x20006504
    c190:	.word	0x2000815a
    c194:	.word	0x60002376
    c198:	.word	0x20006510
    c19c:	.word	0x2000815b
    c1a0:	.word	0x20006514

0000c1a4 <EventResponder::triggerEventNotImmediate()>:
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    c1a4:	mrs	r2, PRIMASK
		__disable_irq();
    c1a8:	cpsid	i
	if (_triggered == false) {
    c1aa:	ldrb	r3, [r0, #29]
    c1ac:	cbnz	r3, c1c6 <EventResponder::triggerEventNotImmediate()+0x22>
		if (_type == EventTypeYield) {
    c1ae:	ldrb	r1, [r0, #28]
    c1b0:	cmp	r1, #1
{
    c1b2:	push	{r4, r5}
		if (_type == EventTypeYield) {
    c1b4:	beq.n	c1ce <EventResponder::triggerEventNotImmediate()+0x2a>
		} else if (_type == EventTypeInterrupt) {
    c1b6:	cmp	r1, #3
    c1b8:	beq.n	c1e2 <EventResponder::triggerEventNotImmediate()+0x3e>
		_triggered = true;
    c1ba:	movs	r3, #1
    c1bc:	strb	r3, [r0, #29]
		if (doit) __enable_irq();
    c1be:	cbnz	r2, c1c2 <EventResponder::triggerEventNotImmediate()+0x1e>
    c1c0:	cpsie	i
}
    c1c2:	pop	{r4, r5}
    c1c4:	bx	lr
    c1c6:	cbnz	r2, c1cc <EventResponder::triggerEventNotImmediate()+0x28>
    c1c8:	cpsie	i
    c1ca:	bx	lr
    c1cc:	bx	lr
			if (firstYield == nullptr) {
    c1ce:	ldr	r4, [pc, #72]	; (c218 <EventResponder::triggerEventNotImmediate()+0x74>)
    c1d0:	ldr	r1, [r4, #0]
    c1d2:	cbz	r1, c202 <EventResponder::triggerEventNotImmediate()+0x5e>
				_prev = lastYield;
    c1d4:	ldr	r1, [pc, #68]	; (c21c <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
    c1d6:	str	r3, [r0, #20]
				_prev = lastYield;
    c1d8:	ldr	r3, [r1, #0]
				lastYield = this;
    c1da:	str	r0, [r1, #0]
				_prev = lastYield;
    c1dc:	str	r3, [r0, #24]
				_prev->_next = this;
    c1de:	str	r0, [r3, #20]
				lastYield = this;
    c1e0:	b.n	c1ba <EventResponder::triggerEventNotImmediate()+0x16>
			if (firstInterrupt == nullptr) {
    c1e2:	ldr	r5, [pc, #60]	; (c220 <EventResponder::triggerEventNotImmediate()+0x7c>)
    c1e4:	ldr	r1, [pc, #60]	; (c224 <EventResponder::triggerEventNotImmediate()+0x80>)
    c1e6:	ldr	r4, [r5, #0]
    c1e8:	cbz	r4, c20e <EventResponder::triggerEventNotImmediate()+0x6a>
				_next = nullptr;
    c1ea:	str	r3, [r0, #20]
				_prev = lastInterrupt;
    c1ec:	ldr	r3, [r1, #0]
    c1ee:	str	r3, [r0, #24]
				_prev->_next = this;
    c1f0:	str	r0, [r3, #20]
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    c1f2:	mov.w	r3, #3758153728	; 0xe000e000
    c1f6:	mov.w	r4, #268435456	; 0x10000000
				lastInterrupt = this;
    c1fa:	str	r0, [r1, #0]
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    c1fc:	str.w	r4, [r3, #3332]	; 0xd04
    c200:	b.n	c1ba <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
    c202:	ldr	r3, [pc, #24]	; (c21c <EventResponder::triggerEventNotImmediate()+0x78>)
				firstYield = this;
    c204:	str	r0, [r4, #0]
				lastYield = this;
    c206:	str	r0, [r3, #0]
				_prev = nullptr;
    c208:	strd	r1, r1, [r0, #20]
				lastYield = this;
    c20c:	b.n	c1ba <EventResponder::triggerEventNotImmediate()+0x16>
				_prev = nullptr;
    c20e:	strd	r4, r4, [r0, #20]
				firstInterrupt = this;
    c212:	str	r0, [r5, #0]
				lastInterrupt = this;
    c214:	b.n	c1f2 <EventResponder::triggerEventNotImmediate()+0x4e>
    c216:	nop
    c218:	.word	0x20006504
    c21c:	.word	0x20006510
    c220:	.word	0x2000650c
    c224:	.word	0x20006508

0000c228 <EventResponder::runFromInterrupt()>:
{
    c228:	push	{r4, r5, r6, lr}
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    c22a:	mrs	r2, PRIMASK
		__disable_irq();
    c22e:	cpsid	i
		EventResponder *first = firstInterrupt;
    c230:	ldr	r4, [pc, #48]	; (c264 <EventResponder::runFromInterrupt()+0x3c>)
    c232:	ldr	r0, [r4, #0]
		if (first) {
    c234:	cbz	r0, c258 <EventResponder::runFromInterrupt()+0x30>
				lastInterrupt = nullptr;
    c236:	ldr	r6, [pc, #48]	; (c268 <EventResponder::runFromInterrupt()+0x40>)
				firstInterrupt->_prev = nullptr;
    c238:	movs	r5, #0
			firstInterrupt = first->_next;
    c23a:	ldr	r3, [r0, #20]
    c23c:	str	r3, [r4, #0]
			if (firstInterrupt) {
    c23e:	cbz	r3, c25e <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    c240:	str	r5, [r3, #24]
		if (doit) __enable_irq();
    c242:	cbnz	r2, c246 <EventResponder::runFromInterrupt()+0x1e>
    c244:	cpsie	i
			(*(first->_function))(*first);
    c246:	ldr	r3, [r0, #8]
			first->_triggered = false;
    c248:	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    c24a:	blx	r3
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    c24c:	mrs	r2, PRIMASK
		__disable_irq();
    c250:	cpsid	i
		EventResponder *first = firstInterrupt;
    c252:	ldr	r0, [r4, #0]
		if (first) {
    c254:	cmp	r0, #0
    c256:	bne.n	c23a <EventResponder::runFromInterrupt()+0x12>
		if (doit) __enable_irq();
    c258:	cbnz	r2, c25c <EventResponder::runFromInterrupt()+0x34>
    c25a:	cpsie	i
}
    c25c:	pop	{r4, r5, r6, pc}
				lastInterrupt = nullptr;
    c25e:	str	r3, [r6, #0]
    c260:	b.n	c242 <EventResponder::runFromInterrupt()+0x1a>
    c262:	nop
    c264:	.word	0x2000650c
    c268:	.word	0x20006508

0000c26c <pendablesrvreq_isr>:
	EventResponder::runFromInterrupt();
    c26c:	b.w	c228 <EventResponder::runFromInterrupt()>

0000c270 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    c270:	ldr	r1, [pc, #16]	; (c284 <systick_isr+0x14>)
	systick_millis_count++;
    c272:	ldr	r2, [pc, #20]	; (c288 <systick_isr+0x18>)
	systick_cycle_count = ARM_DWT_CYCCNT;
    c274:	ldr	r1, [r1, #4]
    c276:	ldr	r3, [pc, #20]	; (c28c <systick_isr+0x1c>)
    c278:	str	r1, [r3, #0]
	systick_millis_count++;
    c27a:	ldr	r3, [r2, #0]
    c27c:	adds	r3, #1
    c27e:	str	r3, [r2, #0]
}
    c280:	bx	lr
    c282:	nop
    c284:	.word	0xe0001000
    c288:	.word	0x200080e4
    c28c:	.word	0x200080e0

0000c290 <DMAChannel::begin(bool)>:
#warning "CR is defined as something?"
#endif


void DMAChannel::begin(bool force_initialization)
{
    c290:	push	{r4, r5}
	uint32_t ch = 0;

	__disable_irq();
    c292:	cpsid	i
	if (!force_initialization && TCD && channel < DMA_MAX_CHANNELS
    c294:	cbnz	r1, c2a0 <DMAChannel::begin(bool)+0x10>
    c296:	ldr	r3, [r0, #0]
    c298:	cbz	r3, c2a0 <DMAChannel::begin(bool)+0x10>
    c29a:	ldrb	r2, [r0, #4]
    c29c:	cmp	r2, #15
    c29e:	bls.n	c318 <DMAChannel::begin(bool)+0x88>
	  && (dma_channel_allocated_mask & (1 << channel))
    c2a0:	ldr	r4, [pc, #144]	; (c334 <DMAChannel::begin(bool)+0xa4>)
    c2a2:	ldrh	r1, [r4, #0]
{
    c2a4:	movs	r3, #0
		// DMA channel already allocated
		__enable_irq();
		return;
	}
	while (1) {
		if (!(dma_channel_allocated_mask & (1 << ch))) {
    c2a6:	asr.w	r2, r1, r3
    c2aa:	ands.w	r2, r2, #1
    c2ae:	beq.n	c2c2 <DMAChannel::begin(bool)+0x32>
			dma_channel_allocated_mask |= (1 << ch);
			__enable_irq();
			break;
		}
		if (++ch >= DMA_MAX_CHANNELS) {
    c2b0:	adds	r3, #1
    c2b2:	cmp	r3, #16
    c2b4:	bne.n	c2a6 <DMAChannel::begin(bool)+0x16>
			__enable_irq();
    c2b6:	cpsie	i
			TCD = (TCD_t *)0;
    c2b8:	movs	r2, #0
			channel = DMA_MAX_CHANNELS;
    c2ba:	strb	r3, [r0, #4]
			TCD = (TCD_t *)0;
    c2bc:	str	r2, [r0, #0]
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
}
    c2be:	pop	{r4, r5}
    c2c0:	bx	lr
			dma_channel_allocated_mask |= (1 << ch);
    c2c2:	mov.w	ip, #1
    c2c6:	lsl.w	ip, ip, r3
    c2ca:	orr.w	r1, r1, ip
    c2ce:	strh	r1, [r4, #0]
			__enable_irq();
    c2d0:	cpsie	i
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    c2d2:	ldr	r1, [pc, #100]	; (c338 <DMAChannel::begin(bool)+0xa8>)
	channel = ch;
    c2d4:	uxtb.w	ip, r3
	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    c2d8:	ldr	r4, [pc, #96]	; (c33c <DMAChannel::begin(bool)+0xac>)
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    c2da:	add	r1, r3
	channel = ch;
    c2dc:	strb.w	ip, [r0, #4]
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    c2e0:	lsls	r3, r1, #5
	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    c2e2:	ldr	r1, [r4, #124]	; 0x7c
    c2e4:	orr.w	r1, r1, #192	; 0xc0
    c2e8:	str	r1, [r4, #124]	; 0x7c
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
    c2ea:	movw	r4, #1154	; 0x482
    c2ee:	ldr	r1, [pc, #80]	; (c340 <DMAChannel::begin(bool)+0xb0>)
    c2f0:	str	r4, [r1, #0]
	DMA_CERQ = ch;
    c2f2:	strb.w	ip, [r1, #26]
	DMA_CERR = ch;
    c2f6:	strb.w	ip, [r1, #30]
	DMA_CEEI = ch;
    c2fa:	strb.w	ip, [r1, #24]
	DMA_CINT = ch;
    c2fe:	strb.w	ip, [r1, #31]
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    c302:	str	r3, [r0, #0]
}
    c304:	pop	{r4, r5}
	*p++ = 0;
    c306:	strd	r2, r2, [r3]
	*p++ = 0;
    c30a:	strd	r2, r2, [r3, #8]
	*p++ = 0;
    c30e:	strd	r2, r2, [r3, #16]
	*p++ = 0;
    c312:	strd	r2, r2, [r3, #24]
}
    c316:	bx	lr
	  && (dma_channel_allocated_mask & (1 << channel))
    c318:	ldr	r4, [pc, #24]	; (c334 <DMAChannel::begin(bool)+0xa4>)
    c31a:	ldrh	r1, [r4, #0]
    c31c:	asr.w	r5, r1, r2
    c320:	lsls	r5, r5, #31
    c322:	bpl.n	c2a4 <DMAChannel::begin(bool)+0x14>
	  && (uint32_t)TCD == (uint32_t)(0x400E9000 + channel * 32)) {
    c324:	ldr	r5, [pc, #16]	; (c338 <DMAChannel::begin(bool)+0xa8>)
    c326:	add	r5, r2
    c328:	cmp.w	r3, r5, lsl #5
    c32c:	bne.n	c2a4 <DMAChannel::begin(bool)+0x14>
		__enable_irq();
    c32e:	cpsie	i
		return;
    c330:	b.n	c2be <DMAChannel::begin(bool)+0x2e>
    c332:	nop
    c334:	.word	0x20008142
    c338:	.word	0x02007480
    c33c:	.word	0x400fc000
    c340:	.word	0x400e8000

0000c344 <DMAChannel::release()>:

void DMAChannel::release(void)
{
	if (channel >= DMA_MAX_CHANNELS) return;
    c344:	ldrb	r3, [r0, #4]
    c346:	cmp	r3, #15
    c348:	bhi.n	c36e <DMAChannel::release()+0x2a>
	DMA_CERQ = channel;
    c34a:	ldr	r2, [pc, #36]	; (c370 <DMAChannel::release()+0x2c>)
    c34c:	strb	r3, [r2, #26]
	__disable_irq();
    c34e:	cpsid	i
	dma_channel_allocated_mask &= ~(1 << channel);
    c350:	ldr	r1, [pc, #32]	; (c374 <DMAChannel::release()+0x30>)
    c352:	movs	r2, #1
    c354:	ldrb.w	ip, [r0, #4]
    c358:	ldrh	r3, [r1, #0]
    c35a:	lsl.w	r2, r2, ip
    c35e:	bic.w	r3, r3, r2
    c362:	strh	r3, [r1, #0]
	__enable_irq();
    c364:	cpsie	i
	channel = DMA_MAX_CHANNELS;
    c366:	movs	r2, #16
	TCD = (TCD_t *)0;
    c368:	movs	r3, #0
	channel = DMA_MAX_CHANNELS;
    c36a:	strb	r2, [r0, #4]
	TCD = (TCD_t *)0;
    c36c:	str	r3, [r0, #0]
}
    c36e:	bx	lr
    c370:	.word	0x400e8000
    c374:	.word	0x20008142

0000c378 <usb_serial_class::clear()>:
        virtual void clear(void) { usb_serial_flush_input(); }
    c378:	b.w	a760 <usb_serial_flush_input>

0000c37c <usb_serial_class::peek()>:
        virtual int peek() { return usb_serial_peekchar(); }
    c37c:	b.w	a704 <usb_serial_peekchar>

0000c380 <usb_serial_class::read()>:
        virtual int read() { return usb_serial_getchar(); }
    c380:	b.w	a7d0 <usb_serial_getchar>

0000c384 <usb_serial_class::available()>:
        virtual int available() { return usb_serial_available(); }
    c384:	b.w	a748 <usb_serial_available>

0000c388 <usb_serial_class::flush()>:
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    c388:	b.w	a884 <usb_serial_flush_output>

0000c38c <usb_serial_class::availableForWrite()>:
	size_t write(int n) { return write((uint8_t)n); }
	// Returns the number of bytes which may be transmitted by write() or print()
	// without waiting.  Typically programs which must maintain rapid checking
	// and response to sensors use availableForWrite() to decide whether to
	// transmit.
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    c38c:	b.w	a834 <usb_serial_write_buffer_free>

0000c390 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    c390:	mov	r0, r1
    c392:	mov	r1, r2
    c394:	b.w	a81c <usb_serial_write>

0000c398 <usb_serial_class::write(unsigned char)>:
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    c398:	mov	r0, r1
    c39a:	b.w	a7f0 <usb_serial_putchar>
    c39e:	nop

0000c3a0 <breakTime(unsigned long, DateTimeFields&)>:
  tm.sec = time % 60;
    c3a0:	ldr	r2, [pc, #308]	; (c4d8 <breakTime(unsigned long, DateTimeFields&)+0x138>)
{
    c3a2:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  tm.sec = time % 60;
    c3a6:	umull	r4, r3, r2, r0
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    c3aa:	movw	sl, #365	; 0x16d
    c3ae:	ldr	r7, [pc, #300]	; (c4dc <breakTime(unsigned long, DateTimeFields&)+0x13c>)
  tm.sec = time % 60;
    c3b0:	lsrs	r3, r3, #5
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    c3b2:	ldr.w	r8, [pc, #312]	; c4ec <breakTime(unsigned long, DateTimeFields&)+0x14c>
    c3b6:	ldr.w	r9, [pc, #312]	; c4f0 <breakTime(unsigned long, DateTimeFields&)+0x150>
  tm.min = time % 60;
    c3ba:	umull	r4, r2, r2, r3
  tm.sec = time % 60;
    c3be:	rsb	r4, r3, r3, lsl #4
  tm.min = time % 60;
    c3c2:	lsrs	r2, r2, #5
  tm.sec = time % 60;
    c3c4:	sub.w	r0, r0, r4, lsl #2
  tm.hour = time % 24;
    c3c8:	ldr	r4, [pc, #276]	; (c4e0 <breakTime(unsigned long, DateTimeFields&)+0x140>)
  tm.min = time % 60;
    c3ca:	rsb	r5, r2, r2, lsl #4
  tm.sec = time % 60;
    c3ce:	strb	r0, [r1, #0]
  tm.min = time % 60;
    c3d0:	sub.w	r3, r3, r5, lsl #2
  tm.hour = time % 24;
    c3d4:	umull	r5, r4, r4, r2
    c3d8:	lsrs	r4, r4, #4
  tm.min = time % 60;
    c3da:	strb	r3, [r1, #1]
  tm.wday = ((time + 4) % 7);  // Sunday is day 0
    c3dc:	ldr	r3, [pc, #260]	; (c4e4 <breakTime(unsigned long, DateTimeFields&)+0x144>)
    c3de:	adds	r5, r4, #4
  tm.hour = time % 24;
    c3e0:	add.w	r0, r4, r4, lsl #1
    c3e4:	sub.w	r2, r2, r0, lsl #3
  tm.wday = ((time + 4) % 7);  // Sunday is day 0
    c3e8:	umull	r0, r3, r3, r5
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    c3ec:	movs	r0, #0
  tm.hour = time % 24;
    c3ee:	strb	r2, [r1, #2]
  tm.wday = ((time + 4) % 7);  // Sunday is day 0
    c3f0:	subs	r2, r5, r3
    c3f2:	add.w	r3, r3, r2, lsr #1
  days = 0;
    c3f6:	mov	r2, r0
  tm.wday = ((time + 4) % 7);  // Sunday is day 0
    c3f8:	lsrs	r3, r3, #2
    c3fa:	rsb	r3, r3, r3, lsl #3
    c3fe:	subs	r5, r5, r3
    c400:	strb	r5, [r1, #3]
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    c402:	uxtb.w	lr, r0
    c406:	movw	ip, #365	; 0x16d
    c40a:	addw	r3, lr, #1970	; 0x7b2
    c40e:	ands.w	r5, r3, #3
    c412:	mul.w	r6, r7, r3
    c416:	bne.n	c42a <breakTime(unsigned long, DateTimeFields&)+0x8a>
    c418:	cmp.w	r8, r6, ror #2
    c41c:	mov.w	ip, #366	; 0x16e
    c420:	bcc.n	c42a <breakTime(unsigned long, DateTimeFields&)+0x8a>
    c422:	cmp.w	r9, r6, ror #4
    c426:	it	cc
    c428:	movcc	ip, sl
    c42a:	add	r2, ip
    c42c:	adds	r0, #1
    c42e:	cmp	r4, r2
    c430:	bcs.n	c402 <breakTime(unsigned long, DateTimeFields&)+0x62>
  tm.year = year + 70; // year is offset from 1970
    c432:	add.w	lr, lr, #70	; 0x46
  days -= LEAP_YEAR(year) ? 366 : 365;
    c436:	ldr	r6, [pc, #176]	; (c4e8 <breakTime(unsigned long, DateTimeFields&)+0x148>)
  tm.year = year + 70; // year is offset from 1970
    c438:	strb.w	lr, [r1, #6]
  days -= LEAP_YEAR(year) ? 366 : 365;
    c43c:	umull	r0, r6, r6, r3
    c440:	cbz	r5, c4a4 <breakTime(unsigned long, DateTimeFields&)+0x104>
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    c442:	lsrs	r7, r6, #5
    c444:	mov.w	ip, #100	; 0x64
    c448:	mov.w	r0, #400	; 0x190
    c44c:	lsrs	r6, r6, #7
    c44e:	mls	r7, ip, r7, r3
    c452:	mls	r6, r0, r6, r3
  days -= LEAP_YEAR(year) ? 366 : 365;
    c456:	movw	r0, #365	; 0x16d
  time  -= days; // now it is days in this year, starting at 0
    c45a:	subs	r4, r4, r2
    c45c:	movs	r3, #0
    c45e:	movs	r2, #1
      monthLength = monthDays[month];
    c460:	ldr.w	lr, [pc, #144]	; c4f4 <breakTime(unsigned long, DateTimeFields&)+0x154>
  time  -= days; // now it is days in this year, starting at 0
    c464:	add	r0, r4
  for (month=0; month<12; month++) {
    c466:	b.n	c47e <breakTime(unsigned long, DateTimeFields&)+0xde>
    if (time >= monthLength) {
    c468:	ldrb.w	r4, [r3, lr]
    c46c:	cmp	r4, r0
    c46e:	bhi.n	c48e <breakTime(unsigned long, DateTimeFields&)+0xee>
  for (month=0; month<12; month++) {
    c470:	cmp	r2, #12
      time -= monthLength;
    c472:	sub.w	r0, r0, r4
  for (month=0; month<12; month++) {
    c476:	beq.n	c490 <breakTime(unsigned long, DateTimeFields&)+0xf0>
    c478:	adds	r2, #1
    c47a:	adds	r3, #1
    c47c:	uxtb	r2, r2
    if (month==1) { // february
    c47e:	cmp	r3, #1
    c480:	uxtb.w	ip, r3
    c484:	bne.n	c468 <breakTime(unsigned long, DateTimeFields&)+0xc8>
      if (LEAP_YEAR(year)) {
    c486:	cbnz	r5, c49a <breakTime(unsigned long, DateTimeFields&)+0xfa>
    c488:	cbz	r7, c4be <breakTime(unsigned long, DateTimeFields&)+0x11e>
    c48a:	movs	r4, #29
    c48c:	b.n	c49c <breakTime(unsigned long, DateTimeFields&)+0xfc>
    c48e:	mov	r2, ip
  tm.mday = time + 1;     // day of month
    c490:	adds	r0, #1
  tm.mon = month;  // jan is month 0
    c492:	strb	r2, [r1, #5]
  tm.mday = time + 1;     // day of month
    c494:	strb	r0, [r1, #4]
}
    c496:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c49a:	movs	r4, #28
    if (time >= monthLength) {
    c49c:	cmp	r0, r4
    c49e:	bcc.n	c4d2 <breakTime(unsigned long, DateTimeFields&)+0x132>
      time -= monthLength;
    c4a0:	subs	r0, r0, r4
  for (month=0; month<12; month++) {
    c4a2:	b.n	c478 <breakTime(unsigned long, DateTimeFields&)+0xd8>
  days -= LEAP_YEAR(year) ? 366 : 365;
    c4a4:	movs	r0, #100	; 0x64
    c4a6:	lsrs	r7, r6, #5
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    c4a8:	lsrs	r6, r6, #7
  days -= LEAP_YEAR(year) ? 366 : 365;
    c4aa:	mls	r7, r0, r7, r3
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    c4ae:	mov.w	r0, #400	; 0x190
    c4b2:	mls	r6, r0, r6, r3
  days -= LEAP_YEAR(year) ? 366 : 365;
    c4b6:	cbz	r7, c4c8 <breakTime(unsigned long, DateTimeFields&)+0x128>
    c4b8:	mov.w	r0, #366	; 0x16e
    c4bc:	b.n	c45a <breakTime(unsigned long, DateTimeFields&)+0xba>
      if (LEAP_YEAR(year)) {
    c4be:	cmp	r6, #0
    c4c0:	ite	ne
    c4c2:	movne	r4, #28
    c4c4:	moveq	r4, #29
    c4c6:	b.n	c49c <breakTime(unsigned long, DateTimeFields&)+0xfc>
  days -= LEAP_YEAR(year) ? 366 : 365;
    c4c8:	cmp	r6, #0
    c4ca:	bne.n	c456 <breakTime(unsigned long, DateTimeFields&)+0xb6>
    c4cc:	mov.w	r0, #366	; 0x16e
    c4d0:	b.n	c45a <breakTime(unsigned long, DateTimeFields&)+0xba>
    if (time >= monthLength) {
    c4d2:	movs	r2, #1
    c4d4:	b.n	c490 <breakTime(unsigned long, DateTimeFields&)+0xf0>
    c4d6:	nop
    c4d8:	.word	0x88888889
    c4dc:	.word	0xc28f5c29
    c4e0:	.word	0xaaaaaaab
    c4e4:	.word	0x24924925
    c4e8:	.word	0x51eb851f
    c4ec:	.word	0x028f5c28
    c4f0:	.word	0x00a3d70a
    c4f4:	.word	0x20000770

0000c4f8 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    c4f8:	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    c4fa:	bl	1858 <setup>
	while (1) {
		loop();
    c4fe:	bl	18a0 <loop>
		yield();
    c502:	bl	c0b4 <yield>
	while (1) {
    c506:	b.n	c4fe <main+0x6>

0000c508 <AudioStream::update_all()>:
	void transmit(audio_block_t *block, unsigned char index = 0);
	audio_block_t * receiveReadOnly(unsigned int index = 0);
	audio_block_t * receiveWritable(unsigned int index = 0);
	static bool update_setup(void);
	static void update_stop(void);
	static void update_all(void) { NVIC_SET_PENDING(IRQ_SOFTWARE); }
    c508:	mov.w	r3, #3758153728	; 0xe000e000
    c50c:	movs	r2, #64	; 0x40
    c50e:	str.w	r2, [r3, #520]	; 0x208
    c512:	bx	lr

0000c514 <software_isr()>:
}

AudioStream * AudioStream::first_update = NULL;

void software_isr(void) // AudioStream::update_all()
{
    c514:	push	{r3, r4, r5, r6, r7, lr}
	AudioStream *p;

	uint32_t totalcycles = ARM_DWT_CYCCNT;
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
    c516:	ldr	r3, [pc, #80]	; (c568 <software_isr()+0x54>)
	uint32_t totalcycles = ARM_DWT_CYCCNT;
    c518:	ldr	r5, [pc, #80]	; (c56c <software_isr()+0x58>)
	for (p = AudioStream::first_update; p; p = p->next_update) {
    c51a:	ldr	r4, [r3, #0]
	uint32_t totalcycles = ARM_DWT_CYCCNT;
    c51c:	ldr	r6, [r5, #4]
	for (p = AudioStream::first_update; p; p = p->next_update) {
    c51e:	cbz	r4, c548 <software_isr()+0x34>
		if (p->active) {
    c520:	ldrb	r3, [r4, #8]
			uint32_t cycles = ARM_DWT_CYCCNT;
			p->update();
    c522:	mov	r0, r4
		if (p->active) {
    c524:	cbz	r3, c542 <software_isr()+0x2e>
			p->update();
    c526:	ldr	r3, [r4, #0]
			uint32_t cycles = ARM_DWT_CYCCNT;
    c528:	ldr	r7, [r5, #4]
			p->update();
    c52a:	ldr	r3, [r3, #0]
    c52c:	blx	r3
			// TODO: traverse inputQueueArray and release
			// any input blocks that weren't consumed?
			cycles = (ARM_DWT_CYCCNT - cycles) >> 6;
    c52e:	ldr	r3, [r5, #4]
			p->cpu_cycles = cycles;
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
    c530:	ldrh	r1, [r4, #6]
			cycles = (ARM_DWT_CYCCNT - cycles) >> 6;
    c532:	subs	r3, r3, r7
			p->cpu_cycles = cycles;
    c534:	ubfx	r2, r3, #6, #16
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
    c538:	cmp.w	r1, r3, lsr #6
			p->cpu_cycles = cycles;
    c53c:	strh	r2, [r4, #4]
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
    c53e:	it	cc
    c540:	strhcc	r2, [r4, #6]
	for (p = AudioStream::first_update; p; p = p->next_update) {
    c542:	ldr	r4, [r4, #20]
    c544:	cmp	r4, #0
    c546:	bne.n	c520 <software_isr()+0xc>
		}
	}
	//digitalWriteFast(2, LOW);
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 6;
    c548:	ldr	r3, [pc, #32]	; (c56c <software_isr()+0x58>)
	AudioStream::cpu_cycles_total = totalcycles;
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    c54a:	ldr	r2, [pc, #36]	; (c570 <software_isr()+0x5c>)
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 6;
    c54c:	ldr	r3, [r3, #4]
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    c54e:	ldrh	r0, [r2, #0]
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 6;
    c550:	subs	r3, r3, r6
	AudioStream::cpu_cycles_total = totalcycles;
    c552:	ldr	r4, [pc, #32]	; (c574 <software_isr()+0x60>)
    c554:	ubfx	r1, r3, #6, #16
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    c558:	cmp.w	r0, r3, lsr #6
	AudioStream::cpu_cycles_total = totalcycles;
    c55c:	strh	r1, [r4, #0]
		AudioStream::cpu_cycles_total_max = totalcycles;
    c55e:	it	cc
    c560:	strhcc	r1, [r2, #0]

	asm("DSB");
    c562:	dsb	sy
}
    c566:	pop	{r3, r4, r5, r6, r7, pc}
    c568:	.word	0x20006410
    c56c:	.word	0xe0001000
    c570:	.word	0x20008136
    c574:	.word	0x20008134

0000c578 <AudioStream::allocate()>:
{
    c578:	push	{r4, r5}
	__disable_irq();
    c57a:	cpsid	i
	index = memory_pool_first_mask;
    c57c:	ldr	r5, [pc, #144]	; (c610 <AudioStream::allocate()+0x98>)
	p += index;
    c57e:	ldr	r4, [pc, #148]	; (c614 <AudioStream::allocate()+0x9c>)
	index = memory_pool_first_mask;
    c580:	ldrh	r2, [r5, #0]
		if (p >= end) {
    c582:	add.w	r1, r4, #112	; 0x70
	p += index;
    c586:	add.w	r3, r4, r2, lsl #2
		if (p >= end) {
    c58a:	cmp	r3, r1
    c58c:	bcs.n	c608 <AudioStream::allocate()+0x90>
    c58e:	add.w	r1, r4, #111	; 0x6f
    c592:	adds	r0, r2, #1
    c594:	subs	r1, r1, r3
    c596:	add.w	r0, r0, r1, lsr #2
    c59a:	b.n	c5a2 <AudioStream::allocate()+0x2a>
		index++;
    c59c:	adds	r2, #1
		if (p >= end) {
    c59e:	cmp	r2, r0
    c5a0:	beq.n	c608 <AudioStream::allocate()+0x90>
		index++;
    c5a2:	mov	ip, r3
		avail = *p;
    c5a4:	ldr.w	r1, [r3], #4
		if (avail) break;
    c5a8:	cmp	r1, #0
    c5aa:	beq.n	c59c <AudioStream::allocate()+0x24>
	n = __builtin_clz(avail);
    c5ac:	clz	r0, r1
	avail &= ~(0x80000000 >> n);
    c5b0:	mov.w	r3, #2147483648	; 0x80000000
    c5b4:	lsrs	r3, r0
    c5b6:	bic.w	r1, r1, r3
	*p = avail;
    c5ba:	str.w	r1, [ip]
	if (!avail) index++;
    c5be:	cbnz	r1, c5c2 <AudioStream::allocate()+0x4a>
    c5c0:	adds	r2, #1
	used = memory_used + 1;
    c5c2:	ldr	r3, [pc, #84]	; (c618 <AudioStream::allocate()+0xa0>)
	memory_pool_first_mask = index;
    c5c4:	strh	r2, [r5, #0]
	used = memory_used + 1;
    c5c6:	ldrh	r2, [r3, #0]
	memory_used = used;
    c5c8:	adds	r2, #1
    c5ca:	uxth	r1, r2
    c5cc:	strh	r1, [r3, #0]
	__enable_irq();
    c5ce:	cpsie	i
	index = p - memory_pool_available_mask;
    c5d0:	sub.w	ip, ip, r4
	block = memory_pool + ((index << 5) + (31 - n));
    c5d4:	movw	r3, #8060	; 0x1f7c
    c5d8:	rsb	r4, r0, r0, lsl #24
	index = p - memory_pool_available_mask;
    c5dc:	mov.w	ip, ip, asr #2
	block = memory_pool + ((index << 5) + (31 - n));
    c5e0:	rsb	r0, r0, r4, lsl #6
	block->ref_count = 1;
    c5e4:	movs	r4, #1
	block = memory_pool + ((index << 5) + (31 - n));
    c5e6:	add.w	ip, ip, ip, lsl #6
    c5ea:	add.w	r3, r3, ip, lsl #7
    c5ee:	add.w	r3, r3, r0, lsl #2
    c5f2:	ldr	r0, [pc, #40]	; (c61c <AudioStream::allocate()+0xa4>)
    c5f4:	ldr	r0, [r0, #0]
	block->ref_count = 1;
    c5f6:	strb	r4, [r0, r3]
	block = memory_pool + ((index << 5) + (31 - n));
    c5f8:	add	r0, r3
	if (used > memory_used_max) memory_used_max = used;
    c5fa:	ldr	r3, [pc, #36]	; (c620 <AudioStream::allocate()+0xa8>)
    c5fc:	ldrh	r4, [r3, #0]
    c5fe:	cmp	r4, r2
}
    c600:	pop	{r4, r5}
	if (used > memory_used_max) memory_used_max = used;
    c602:	it	cc
    c604:	strhcc	r1, [r3, #0]
}
    c606:	bx	lr
			__enable_irq();
    c608:	cpsie	i
			return NULL;
    c60a:	movs	r0, #0
}
    c60c:	pop	{r4, r5}
    c60e:	bx	lr
    c610:	.word	0x20008138
    c614:	.word	0x20006414
    c618:	.word	0x20008130
    c61c:	.word	0x2000640c
    c620:	.word	0x20008132

0000c624 <AudioStream::release(audio_block_struct*)>:
	uint32_t mask = (0x80000000 >> (31 - (block->memory_pool_index & 0x1F)));
    c624:	ldrh	r2, [r0, #2]
	__disable_irq();
    c626:	cpsid	i
	if (block->ref_count > 1) {
    c628:	ldrb	r3, [r0, #0]
    c62a:	cmp	r3, #1
    c62c:	bls.n	c636 <AudioStream::release(audio_block_struct*)+0x12>
		block->ref_count--;
    c62e:	subs	r3, #1
    c630:	strb	r3, [r0, #0]
	__enable_irq();
    c632:	cpsie	i
}
    c634:	bx	lr
	uint32_t mask = (0x80000000 >> (31 - (block->memory_pool_index & 0x1F)));
    c636:	mvns	r1, r2
	uint32_t index = block->memory_pool_index >> 5;
    c638:	lsrs	r3, r2, #5
		memory_pool_available_mask[index] |= mask;
    c63a:	ldr	r0, [pc, #44]	; (c668 <AudioStream::release(audio_block_struct*)+0x44>)
	uint32_t mask = (0x80000000 >> (31 - (block->memory_pool_index & 0x1F)));
    c63c:	mov.w	r2, #2147483648	; 0x80000000
    c640:	and.w	r1, r1, #31
    c644:	lsrs	r2, r1
		memory_pool_available_mask[index] |= mask;
    c646:	ldr.w	r1, [r0, r3, lsl #2]
    c64a:	orrs	r2, r1
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
    c64c:	ldr	r1, [pc, #28]	; (c66c <AudioStream::release(audio_block_struct*)+0x48>)
    c64e:	ldrh.w	ip, [r1]
		memory_pool_available_mask[index] |= mask;
    c652:	str.w	r2, [r0, r3, lsl #2]
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
    c656:	cmp	ip, r3
		memory_used--;
    c658:	ldr	r2, [pc, #20]	; (c670 <AudioStream::release(audio_block_struct*)+0x4c>)
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
    c65a:	it	hi
    c65c:	strhhi	r3, [r1, #0]
		memory_used--;
    c65e:	ldrh	r3, [r2, #0]
    c660:	subs	r3, #1
    c662:	strh	r3, [r2, #0]
	__enable_irq();
    c664:	cpsie	i
}
    c666:	bx	lr
    c668:	.word	0x20006414
    c66c:	.word	0x20008138
    c670:	.word	0x20008130

0000c674 <AudioStream::transmit(audio_block_struct*, unsigned char)>:
	for (AudioConnection *c = destination_list; c != NULL; c = c->next_dest) {
    c674:	ldr	r3, [r0, #12]
    c676:	cbnz	r3, c67e <AudioStream::transmit(audio_block_struct*, unsigned char)+0xa>
    c678:	b.n	c6b6 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x42>
    c67a:	ldr	r3, [r3, #12]
    c67c:	cbz	r3, c6b8 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x44>
		if (c->src_index == index) {
    c67e:	ldrb	r0, [r3, #8]
    c680:	cmp	r0, r2
    c682:	bne.n	c67a <AudioStream::transmit(audio_block_struct*, unsigned char)+0x6>
{
    c684:	push	{r4}
			if (c->dst->inputQueue[c->dest_index] == NULL) {
    c686:	ldr	r0, [r3, #4]
    c688:	ldrb.w	ip, [r3, #9]
    c68c:	ldr	r0, [r0, #16]
    c68e:	ldr.w	r4, [r0, ip, lsl #2]
    c692:	cbz	r4, c6aa <AudioStream::transmit(audio_block_struct*, unsigned char)+0x36>
	for (AudioConnection *c = destination_list; c != NULL; c = c->next_dest) {
    c694:	ldr	r3, [r3, #12]
    c696:	cbz	r3, c6a4 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x30>
		if (c->src_index == index) {
    c698:	ldrb	r0, [r3, #8]
    c69a:	cmp	r0, r2
    c69c:	beq.n	c686 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x12>
	for (AudioConnection *c = destination_list; c != NULL; c = c->next_dest) {
    c69e:	ldr	r3, [r3, #12]
    c6a0:	cmp	r3, #0
    c6a2:	bne.n	c698 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x24>
}
    c6a4:	ldr.w	r4, [sp], #4
    c6a8:	bx	lr
				c->dst->inputQueue[c->dest_index] = block;
    c6aa:	str.w	r1, [r0, ip, lsl #2]
				block->ref_count++;
    c6ae:	ldrb	r0, [r1, #0]
    c6b0:	adds	r0, #1
    c6b2:	strb	r0, [r1, #0]
    c6b4:	b.n	c694 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x20>
    c6b6:	bx	lr
    c6b8:	bx	lr
    c6ba:	nop

0000c6bc <AudioStream::receiveReadOnly(unsigned int)>:
	if (index >= num_inputs) return NULL;
    c6bc:	ldrb	r3, [r0, #9]
    c6be:	cmp	r3, r1
    c6c0:	bls.n	c6d0 <AudioStream::receiveReadOnly(unsigned int)+0x14>
	in = inputQueue[index];
    c6c2:	ldr	r3, [r0, #16]
	inputQueue[index] = NULL;
    c6c4:	movs	r2, #0
	in = inputQueue[index];
    c6c6:	ldr.w	r0, [r3, r1, lsl #2]
	inputQueue[index] = NULL;
    c6ca:	str.w	r2, [r3, r1, lsl #2]
	return in;
    c6ce:	bx	lr
	if (index >= num_inputs) return NULL;
    c6d0:	movs	r0, #0
}
    c6d2:	bx	lr

0000c6d4 <AudioStream::receiveWritable(unsigned int)>:
{
    c6d4:	push	{r3, r4, r5, lr}
	if (index >= num_inputs) return NULL;
    c6d6:	ldrb	r3, [r0, #9]
    c6d8:	cmp	r3, r1
    c6da:	bls.n	c714 <AudioStream::receiveWritable(unsigned int)+0x40>
	in = inputQueue[index];
    c6dc:	ldr	r3, [r0, #16]
	inputQueue[index] = NULL;
    c6de:	movs	r2, #0
	in = inputQueue[index];
    c6e0:	ldr.w	r4, [r3, r1, lsl #2]
	inputQueue[index] = NULL;
    c6e4:	str.w	r2, [r3, r1, lsl #2]
	if (in && in->ref_count > 1) {
    c6e8:	cbz	r4, c714 <AudioStream::receiveWritable(unsigned int)+0x40>
    c6ea:	ldrb	r3, [r4, #0]
    c6ec:	cmp	r3, #1
    c6ee:	bhi.n	c6f4 <AudioStream::receiveWritable(unsigned int)+0x20>
}
    c6f0:	mov	r0, r4
    c6f2:	pop	{r3, r4, r5, pc}
		p = allocate();
    c6f4:	bl	c578 <AudioStream::allocate()>
		if (p) memcpy(p->data, in->data, sizeof(p->data));
    c6f8:	mov	r5, r0
    c6fa:	cbz	r0, c708 <AudioStream::receiveWritable(unsigned int)+0x34>
    c6fc:	mov.w	r2, #256	; 0x100
    c700:	adds	r1, r4, #4
    c702:	adds	r0, #4
    c704:	bl	a0a4 <memcpy>
		in->ref_count--;
    c708:	ldrb	r3, [r4, #0]
    c70a:	subs	r3, #1
    c70c:	strb	r3, [r4, #0]
		p = allocate();
    c70e:	mov	r4, r5
}
    c710:	mov	r0, r4
    c712:	pop	{r3, r4, r5, pc}
	if (index >= num_inputs) return NULL;
    c714:	movs	r4, #0
}
    c716:	mov	r0, r4
    c718:	pop	{r3, r4, r5, pc}
    c71a:	nop

0000c71c <AudioConnection::connect()>:
		if (isConnected) // already connected
    c71c:	ldrb	r3, [r0, #16]
    c71e:	cbnz	r3, c760 <AudioConnection::connect()+0x44>
		if (!src || !dst) // NULL src or dst - [old] Stream object destroyed
    c720:	ldr	r3, [r0, #0]
    c722:	mov	r1, r0
    c724:	cbz	r3, c766 <AudioConnection::connect()+0x4a>
    c726:	ldr	r3, [r0, #4]
    c728:	cbz	r3, c766 <AudioConnection::connect()+0x4a>
		if (dest_index >= dst->num_inputs) // input number too high
    c72a:	ldrb	r2, [r0, #9]
    c72c:	ldrb	r3, [r3, #9]
    c72e:	cmp	r2, r3
    c730:	bcs.n	c76c <AudioConnection::connect()+0x50>
{
    c732:	push	{r4, r5}
		__disable_irq();
    c734:	cpsid	i
		s = AudioStream::first_update; // first AudioStream in the stream list
    c736:	ldr	r3, [pc, #172]	; (c7e4 <AudioConnection::connect()+0xc8>)
    c738:	ldr	r4, [r3, #0]
		while (s) // go through all AudioStream objects
    c73a:	cbz	r4, c778 <AudioConnection::connect()+0x5c>
			p = s->destination_list;	// first patchCord in this stream's list
    c73c:	ldr	r3, [r4, #12]
			while (p)
    c73e:	cbz	r3, c772 <AudioConnection::connect()+0x56>
				if (p->dst == dst && p->dest_index == dest_index) // same destination - it's in use!
    c740:	ldr	r0, [r1, #4]
    c742:	b.n	c748 <AudioConnection::connect()+0x2c>
				p = p->next_dest;
    c744:	ldr	r3, [r3, #12]
			while (p)
    c746:	cbz	r3, c772 <AudioConnection::connect()+0x56>
				if (p->dst == dst && p->dest_index == dest_index) // same destination - it's in use!
    c748:	ldr	r2, [r3, #4]
    c74a:	cmp	r2, r0
    c74c:	bne.n	c744 <AudioConnection::connect()+0x28>
    c74e:	ldrb.w	ip, [r3, #9]
    c752:	ldrb	r2, [r1, #9]
    c754:	cmp	ip, r2
    c756:	bne.n	c744 <AudioConnection::connect()+0x28>
					__enable_irq();
    c758:	cpsie	i
					return 4;
    c75a:	movs	r0, #4
}
    c75c:	pop	{r4, r5}
    c75e:	bx	lr
	int result = 1;
    c760:	movs	r0, #1
	__enable_irq();
    c762:	cpsie	i
}
    c764:	bx	lr
			result = 3;
    c766:	movs	r0, #3
	__enable_irq();
    c768:	cpsie	i
}
    c76a:	bx	lr
			result = 2;
    c76c:	movs	r0, #2
	__enable_irq();
    c76e:	cpsie	i
}
    c770:	bx	lr
			s = s->next_update;
    c772:	ldr	r4, [r4, #20]
		while (s) // go through all AudioStream objects
    c774:	cmp	r4, #0
    c776:	bne.n	c73c <AudioConnection::connect()+0x20>
		pp = &AudioStream::unused;
    c778:	ldr	r4, [pc, #108]	; (c7e8 <AudioConnection::connect()+0xcc>)
    c77a:	ldr	r3, [r4, #0]
		while (*pp && *pp != this)
    c77c:	cbz	r3, c790 <AudioConnection::connect()+0x74>
    c77e:	cmp	r1, r3
    c780:	bne.n	c788 <AudioConnection::connect()+0x6c>
    c782:	b.n	c79c <AudioConnection::connect()+0x80>
    c784:	cmp	r1, r3
    c786:	beq.n	c798 <AudioConnection::connect()+0x7c>
			pp = &((*pp)->next_dest);
    c788:	mov	r2, r3
    c78a:	ldr	r3, [r3, #12]
		while (*pp && *pp != this)
    c78c:	cmp	r3, #0
    c78e:	bne.n	c784 <AudioConnection::connect()+0x68>
			result = 5;
    c790:	movs	r0, #5
	__enable_irq();
    c792:	cpsie	i
}
    c794:	pop	{r4, r5}
    c796:	bx	lr
			pp = &((*pp)->next_dest);
    c798:	add.w	r4, r2, #12
		p = src->destination_list; // first AudioConnection
    c79c:	ldr	r5, [r1, #0]
    c79e:	ldr	r0, [r5, #12]
		if (p == NULL) 
    c7a0:	cbz	r0, c7de <AudioConnection::connect()+0xc2>
			while (p->next_dest)  // scan source Stream's connection list for duplicates
    c7a2:	ldr	r3, [r0, #12]
    c7a4:	cbnz	r3, c7ae <AudioConnection::connect()+0x92>
    c7a6:	b.n	c7ba <AudioConnection::connect()+0x9e>
    c7a8:	ldr	r2, [r3, #12]
    c7aa:	cbz	r2, c7bc <AudioConnection::connect()+0xa0>
    c7ac:	mov	r3, r2
				if (&p->src == &this->src && &p->dst == &this->dst
    c7ae:	cmp	r1, r0
    c7b0:	mov	r0, r3
    c7b2:	bne.n	c7a8 <AudioConnection::connect()+0x8c>
					__enable_irq();
    c7b4:	cpsie	i
					return 6;
    c7b6:	movs	r0, #6
    c7b8:	b.n	c75c <AudioConnection::connect()+0x40>
			while (p->next_dest)  // scan source Stream's connection list for duplicates
    c7ba:	mov	r3, r0
			p->next_dest = this; // end of list, can link ourselves in
    c7bc:	str	r1, [r3, #12]
		*pp = next_dest;  // remove ourselves from the unused list
    c7be:	ldr	r3, [r1, #12]
		next_dest = NULL; // we're last in the source's destination list
    c7c0:	movs	r0, #0
		*pp = next_dest;  // remove ourselves from the unused list
    c7c2:	str	r3, [r4, #0]
		src->active = true;
    c7c4:	movs	r3, #1
		next_dest = NULL; // we're last in the source's destination list
    c7c6:	str	r0, [r1, #12]
		src->numConnections++;
    c7c8:	ldrb	r2, [r5, #10]
		src->active = true;
    c7ca:	strb	r3, [r5, #8]
		src->numConnections++;
    c7cc:	add	r2, r3
    c7ce:	strb	r2, [r5, #10]
		dst->numConnections++;
    c7d0:	ldr	r2, [r1, #4]
    c7d2:	ldrb	r4, [r2, #10]
		dst->active = true;
    c7d4:	strb	r3, [r2, #8]
		dst->numConnections++;
    c7d6:	add	r4, r3
    c7d8:	strb	r4, [r2, #10]
		isConnected = true;
    c7da:	strb	r3, [r1, #16]
		result = 0;
    c7dc:	b.n	c792 <AudioConnection::connect()+0x76>
			src->destination_list = this;
    c7de:	str	r1, [r5, #12]
    c7e0:	b.n	c7be <AudioConnection::connect()+0xa2>
    c7e2:	nop
    c7e4:	.word	0x20006410
    c7e8:	.word	0x20006484

0000c7ec <AudioConnection::AudioConnection(AudioStream&, unsigned char, AudioStream&, unsigned char)>:
AudioConnection::AudioConnection(AudioStream &source, unsigned char sourceOutput,
    c7ec:	push	{r4, lr}
		dst = &destination;
    c7ee:	strd	r1, r3, [r0]
	next_dest = AudioStream::unused;
    c7f2:	ldr	r3, [pc, #28]	; (c810 <AudioConnection::AudioConnection(AudioStream&, unsigned char, AudioStream&, unsigned char)+0x24>)
	isConnected = false;	  
    c7f4:	movs	r1, #0
		src_index = sourceOutput;
    c7f6:	strb	r2, [r0, #8]
AudioConnection::AudioConnection(AudioStream &source, unsigned char sourceOutput,
    c7f8:	mov	r4, r0
	next_dest = AudioStream::unused;
    c7fa:	ldr	r2, [r3, #0]
	AudioStream::unused = this;
    c7fc:	str	r0, [r3, #0]
AudioConnection::AudioConnection(AudioStream &source, unsigned char sourceOutput,
    c7fe:	ldrb.w	r3, [sp, #8]
	isConnected = false;	  
    c802:	strb	r1, [r0, #16]
	next_dest = AudioStream::unused;
    c804:	str	r2, [r0, #12]
		dest_index = destinationInput;
    c806:	strb	r3, [r0, #9]
		result = connect();
    c808:	bl	c71c <AudioConnection::connect()>
}
    c80c:	mov	r0, r4
    c80e:	pop	{r4, pc}
    c810:	.word	0x20006484

0000c814 <AudioConnection::disconnect()>:
{
    c814:	push	{r3, r4, r5, lr}
	if (!isConnected) return 1;
    c816:	ldrb	r3, [r0, #16]
    c818:	cmp	r3, #0
    c81a:	beq.n	c88a <AudioConnection::disconnect()+0x76>
	if (dest_index >= dst->num_inputs) return 2; // should never happen!
    c81c:	ldr	r3, [r0, #4]
    c81e:	mov	r4, r0
    c820:	ldrb	r2, [r0, #9]
    c822:	ldrb	r3, [r3, #9]
    c824:	cmp	r2, r3
    c826:	bcs.n	c89a <AudioConnection::disconnect()+0x86>
	__disable_irq();
    c828:	cpsid	i
	p = src->destination_list;
    c82a:	ldr	r1, [r0, #0]
    c82c:	ldr	r3, [r1, #12]
	if (p == NULL) {
    c82e:	cmp	r3, #0
    c830:	beq.n	c88e <AudioConnection::disconnect()+0x7a>
	} else if (p == this) {
    c832:	cmp	r0, r3
    c834:	beq.n	c89e <AudioConnection::disconnect()+0x8a>
			if (p->next_dest == this) // found the parent of the disconnecting object
    c836:	mov	r2, r3
    c838:	ldr	r3, [r3, #12]
    c83a:	cmp	r4, r3
    c83c:	beq.n	c894 <AudioConnection::disconnect()+0x80>
		while (p)
    c83e:	cmp	r3, #0
    c840:	bne.n	c836 <AudioConnection::disconnect()+0x22>
	if(dst->inputQueue[dest_index] != NULL) {
    c842:	ldr	r2, [r4, #4]
    c844:	ldrb	r0, [r4, #9]
    c846:	ldr	r3, [r2, #16]
    c848:	ldr.w	r0, [r3, r0, lsl #2]
    c84c:	cbz	r0, c862 <AudioConnection::disconnect()+0x4e>
		AudioStream::release(dst->inputQueue[dest_index]);
    c84e:	bl	c624 <AudioStream::release(audio_block_struct*)>
		__disable_irq();
    c852:	cpsid	i
		dst->inputQueue[dest_index] = NULL;
    c854:	ldr	r2, [r4, #4]
    c856:	movs	r5, #0
    c858:	ldrb	r0, [r4, #9]
    c85a:	ldr	r3, [r2, #16]
	src->numConnections--;
    c85c:	ldr	r1, [r4, #0]
		dst->inputQueue[dest_index] = NULL;
    c85e:	str.w	r5, [r3, r0, lsl #2]
	src->numConnections--;
    c862:	ldrb	r3, [r1, #10]
    c864:	subs	r3, #1
    c866:	uxtb	r3, r3
    c868:	strb	r3, [r1, #10]
	if (src->numConnections == 0) {
    c86a:	cbnz	r3, c86e <AudioConnection::disconnect()+0x5a>
		src->active = false;
    c86c:	strb	r3, [r1, #8]
	dst->numConnections--;
    c86e:	ldrb	r3, [r2, #10]
    c870:	subs	r3, #1
    c872:	uxtb	r3, r3
    c874:	strb	r3, [r2, #10]
	if (dst->numConnections == 0) {
    c876:	cbnz	r3, c87a <AudioConnection::disconnect()+0x66>
		dst->active = false;
    c878:	strb	r3, [r2, #8]
	next_dest = dst->unused;
    c87a:	ldr	r3, [pc, #40]	; (c8a4 <AudioConnection::disconnect()+0x90>)
	isConnected = false;
    c87c:	movs	r0, #0
	next_dest = dst->unused;
    c87e:	ldr	r2, [r3, #0]
	isConnected = false;
    c880:	strb	r0, [r4, #16]
	dst->unused = this;
    c882:	str	r4, [r3, #0]
	next_dest = dst->unused;
    c884:	str	r2, [r4, #12]
	__enable_irq();
    c886:	cpsie	i
}
    c888:	pop	{r3, r4, r5, pc}
	if (!isConnected) return 1;
    c88a:	movs	r0, #1
}
    c88c:	pop	{r3, r4, r5, pc}
		__enable_irq();
    c88e:	cpsie	i
		return 3;
    c890:	movs	r0, #3
}
    c892:	pop	{r3, r4, r5, pc}
				p-> next_dest = this->next_dest; // skip parent's link past us
    c894:	ldr	r3, [r4, #12]
    c896:	str	r3, [r2, #12]
				break;
    c898:	b.n	c842 <AudioConnection::disconnect()+0x2e>
	if (dest_index >= dst->num_inputs) return 2; // should never happen!
    c89a:	movs	r0, #2
}
    c89c:	pop	{r3, r4, r5, pc}
		if (p->next_dest) {
    c89e:	ldr	r3, [r0, #12]
			src->destination_list = NULL;
    c8a0:	str	r3, [r1, #12]
    c8a2:	b.n	c842 <AudioConnection::disconnect()+0x2e>
    c8a4:	.word	0x20006484

0000c8a8 <AudioConnection::~AudioConnection()>:
AudioConnection::~AudioConnection()
    c8a8:	push	{r4, lr}
    c8aa:	mov	r4, r0
	disconnect(); // disconnect ourselves: puts us on the unused list
    c8ac:	bl	c814 <AudioConnection::disconnect()>
	pp = &AudioStream::unused;
    c8b0:	ldr	r2, [pc, #36]	; (c8d8 <AudioConnection::~AudioConnection()+0x30>)
    c8b2:	ldr	r3, [r2, #0]
	while (*pp && *pp != this)
    c8b4:	cbz	r3, c8c8 <AudioConnection::~AudioConnection()+0x20>
    c8b6:	cmp	r4, r3
    c8b8:	bne.n	c8c0 <AudioConnection::~AudioConnection()+0x18>
    c8ba:	b.n	c8ce <AudioConnection::~AudioConnection()+0x26>
    c8bc:	cmp	r4, r3
    c8be:	beq.n	c8cc <AudioConnection::~AudioConnection()+0x24>
		pp = &((*pp)->next_dest);
    c8c0:	mov	r2, r3
    c8c2:	ldr	r3, [r3, #12]
	while (*pp && *pp != this)
    c8c4:	cmp	r3, #0
    c8c6:	bne.n	c8bc <AudioConnection::~AudioConnection()+0x14>
}
    c8c8:	mov	r0, r4
    c8ca:	pop	{r4, pc}
		pp = &((*pp)->next_dest);
    c8cc:	adds	r2, #12
		*pp = next_dest; // remove ourselves from the unused list
    c8ce:	ldr	r3, [r4, #12]
}
    c8d0:	mov	r0, r4
		*pp = next_dest; // remove ourselves from the unused list
    c8d2:	str	r3, [r2, #0]
}
    c8d4:	pop	{r4, pc}
    c8d6:	nop
    c8d8:	.word	0x20006484

0000c8dc <AudioStream::update_setup()>:
	if (update_scheduled) return false;
    c8dc:	ldr	r3, [pc, #48]	; (c910 <AudioStream::update_setup()+0x34>)
    c8de:	ldrb	r2, [r3, #0]
    c8e0:	cbnz	r2, c90a <AudioStream::update_setup()+0x2e>
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
    c8e2:	ldr	r2, [pc, #48]	; (c914 <AudioStream::update_setup()+0x38>)
    c8e4:	ldr	r1, [pc, #48]	; (c918 <AudioStream::update_setup()+0x3c>)
{
    c8e6:	push	{r4}
    c8e8:	str.w	r1, [r2, #344]	; 0x158
	NVIC_SET_PRIORITY(IRQ_SOFTWARE, 208); // 255 = lowest priority
    c8ec:	ldr	r0, [pc, #44]	; (c91c <AudioStream::update_setup()+0x40>)
    c8ee:	movs	r4, #208	; 0xd0
	update_scheduled = true;
    c8f0:	movs	r2, #1
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
    c8f2:	mov.w	r1, #3758153728	; 0xe000e000
	NVIC_SET_PRIORITY(IRQ_SOFTWARE, 208); // 255 = lowest priority
    c8f6:	strb.w	r4, [r0, #70]	; 0x46
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
    c8fa:	movs	r4, #64	; 0x40
	update_scheduled = true;
    c8fc:	mov	r0, r2
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
    c8fe:	str.w	r4, [r1, #264]	; 0x108
}
    c902:	ldr.w	r4, [sp], #4
	update_scheduled = true;
    c906:	strb	r2, [r3, #0]
}
    c908:	bx	lr
	if (update_scheduled) return false;
    c90a:	movs	r0, #0
}
    c90c:	bx	lr
    c90e:	nop
    c910:	.word	0x20008157
    c914:	.word	0x20001c00
    c918:	.word	0x0000c515
    c91c:	.word	0xe000e400

0000c920 <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)>:
	update_responsibility = false;
}

static void copy_to_buffers(const uint32_t *src, int16_t *left, int16_t *right, unsigned int len)
{
	uint32_t *target = (uint32_t*) src + len; 
    c920:	add.w	r3, r0, r3, lsl #2
	while ((src < target) && (((uintptr_t) left & 0x02) != 0)) {
    c924:	cmp	r0, r3
{
    c926:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	while ((src < target) && (((uintptr_t) left & 0x02) != 0)) {
    c92a:	bcc.n	c940 <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)+0x20>
    c92c:	b.n	c944 <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)+0x24>
		uint32_t n = *src++;
    c92e:	ldr.w	r4, [r0], #4
		*left++ = n & 0xFFFF;
		*right++ = n >> 16;
    c932:	lsrs	r5, r4, #16
	while ((src < target) && (((uintptr_t) left & 0x02) != 0)) {
    c934:	cmp	r3, r0
		*left++ = n & 0xFFFF;
    c936:	strh.w	r4, [r1], #2
		*right++ = n >> 16;
    c93a:	strh.w	r5, [r2], #2
	while ((src < target) && (((uintptr_t) left & 0x02) != 0)) {
    c93e:	bls.n	c944 <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)+0x24>
    c940:	lsls	r4, r1, #30
    c942:	bmi.n	c92e <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)+0xe>
	}

	while ((src < target - 2)) {
    c944:	sub.w	r4, r3, #8
    c948:	cmp	r0, r4
    c94a:	bcs.n	c9ae <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)+0x8e>
    c94c:	sub.w	r8, r3, #9
    c950:	add.w	ip, r0, #8
    c954:	mov	lr, r2
		uint32_t n1 = *src++;
		uint32_t n = *src++;
		*(uint32_t *)left = (n1 & 0xFFFF) | ((n & 0xFFFF) << 16);
		left+=2;
		*(uint32_t *)right = (n1 >> 16) | ((n & 0xFFFF0000)) ;
    c956:	ldr	r7, [pc, #92]	; (c9b4 <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)+0x94>)
    c958:	sub.w	r8, r8, r0
    c95c:	mov.w	r8, r8, lsr #3
    c960:	add.w	r8, r8, #1
    c964:	mov.w	r9, r8, lsl #2
    c968:	add.w	r6, r1, r8, lsl #2
		uint32_t n = *src++;
    c96c:	ldrd	sl, r4, [ip, #-8]
	while ((src < target - 2)) {
    c970:	add.w	ip, ip, #8
		*(uint32_t *)left = (n1 & 0xFFFF) | ((n & 0xFFFF) << 16);
    c974:	uxth.w	r5, sl
    c978:	orr.w	r5, r5, r4, lsl #16
		*(uint32_t *)right = (n1 >> 16) | ((n & 0xFFFF0000)) ;
    c97c:	ands	r4, r7
		*(uint32_t *)left = (n1 & 0xFFFF) | ((n & 0xFFFF) << 16);
    c97e:	str.w	r5, [r1], #4
		*(uint32_t *)right = (n1 >> 16) | ((n & 0xFFFF0000)) ;
    c982:	orr.w	r4, r4, sl, lsr #16
	while ((src < target - 2)) {
    c986:	cmp	r1, r6
		*(uint32_t *)right = (n1 >> 16) | ((n & 0xFFFF0000)) ;
    c988:	str.w	r4, [lr], #4
	while ((src < target - 2)) {
    c98c:	bne.n	c96c <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)+0x4c>
		uint32_t n = *src++;
    c98e:	add.w	r0, r0, r8, lsl #3
		right+=2;
    c992:	add	r2, r9
	}

	while ((src < target)) {
    c994:	cmp	r3, r0
    c996:	bls.n	c9aa <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)+0x8a>
		uint32_t n = *src++;
    c998:	ldr.w	r1, [r0], #4
		*left++ = n & 0xFFFF;
		*right++ = n >> 16;
    c99c:	lsrs	r4, r1, #16
	while ((src < target)) {
    c99e:	cmp	r3, r0
		*left++ = n & 0xFFFF;
    c9a0:	strh.w	r1, [r6], #2
		*right++ = n >> 16;
    c9a4:	strh.w	r4, [r2], #2
	while ((src < target)) {
    c9a8:	bhi.n	c998 <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)+0x78>
	}
}
    c9aa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	while ((src < target - 2)) {
    c9ae:	mov	r6, r1
	while ((src < target)) {
    c9b0:	b.n	c994 <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)+0x74>
    c9b2:	nop
    c9b4:	.word	0xffff0000

0000c9b8 <sync_event(transfer_struct*)>:
{
    c9b8:	push	{r3, r4, r5, lr}
	usb_audio_sync_feedback = feedback_accumulator >> usb_audio_sync_rshift;
    c9ba:	ldr	r2, [pc, #68]	; (ca00 <sync_event(transfer_struct*)+0x48>)
    c9bc:	ldr	r3, [pc, #68]	; (ca04 <sync_event(transfer_struct*)+0x4c>)
    c9be:	ldrb	r1, [r2, #0]
    c9c0:	ldr	r2, [r3, #0]
	usb_prepare_transfer(&sync_transfer, &usb_audio_sync_feedback, usb_audio_sync_nbytes, 0);
    c9c2:	movs	r3, #0
	usb_audio_sync_feedback = feedback_accumulator >> usb_audio_sync_rshift;
    c9c4:	ldr	r4, [pc, #64]	; (ca08 <sync_event(transfer_struct*)+0x50>)
	usb_prepare_transfer(&sync_transfer, &usb_audio_sync_feedback, usb_audio_sync_nbytes, 0);
    c9c6:	ldr	r5, [pc, #68]	; (ca0c <sync_event(transfer_struct*)+0x54>)
	usb_audio_sync_feedback = feedback_accumulator >> usb_audio_sync_rshift;
    c9c8:	lsrs	r2, r1
	usb_prepare_transfer(&sync_transfer, &usb_audio_sync_feedback, usb_audio_sync_nbytes, 0);
    c9ca:	ldr	r0, [pc, #68]	; (ca10 <sync_event(transfer_struct*)+0x58>)
    c9cc:	mov	r1, r4
	usb_audio_sync_feedback = feedback_accumulator >> usb_audio_sync_rshift;
    c9ce:	str	r2, [r4, #0]
	usb_prepare_transfer(&sync_transfer, &usb_audio_sync_feedback, usb_audio_sync_nbytes, 0);
    c9d0:	ldrb	r2, [r5, #0]
    c9d2:	bl	b72c <usb_prepare_transfer>
	arm_dcache_flush(&usb_audio_sync_feedback, usb_audio_sync_nbytes);
    c9d6:	ldrb	r3, [r5, #0]
	uint32_t end_addr = (uint32_t)addr + size;
    c9d8:	add	r3, r4
	asm("dsb");
    c9da:	dsb	sy
		SCB_CACHE_DCCMVAC = location;
    c9de:	mov.w	r2, #3758153728	; 0xe000e000
    c9e2:	str.w	r4, [r2, #3944]	; 0xf68
		location += 32;
    c9e6:	adds	r4, #32
	} while (location < end_addr);
    c9e8:	cmp	r3, r4
    c9ea:	bhi.n	c9e2 <sync_event(transfer_struct*)+0x2a>
	asm("dsb");
    c9ec:	dsb	sy
	asm("isb");
    c9f0:	isb	sy
	usb_transmit(AUDIO_SYNC_ENDPOINT, &sync_transfer);
    c9f4:	ldr	r1, [pc, #24]	; (ca10 <sync_event(transfer_struct*)+0x58>)
    c9f6:	movs	r0, #6
}
    c9f8:	ldmia.w	sp!, {r3, r4, r5, lr}
	usb_transmit(AUDIO_SYNC_ENDPOINT, &sync_transfer);
    c9fc:	b.w	b75c <usb_transmit>
    ca00:	.word	0x2000816e
    ca04:	.word	0x200079a8
    ca08:	.word	0x20205260
    ca0c:	.word	0x2000816d
    ca10:	.word	0x20003100

0000ca14 <AudioOutputUSB::update()>:
		len--;
	}
}

void AudioOutputUSB::update(void)
{
    ca14:	push	{r3, r4, r5, lr}
    ca16:	mov	r5, r0
	audio_block_t *left, *right;

	// TODO: we shouldn't be writing to these......
	//left = receiveReadOnly(0); // input 0 = left channel
	//right = receiveReadOnly(1); // input 1 = right channel
	left = receiveWritable(0); // input 0 = left channel
    ca18:	movs	r1, #0
    ca1a:	bl	c6d4 <AudioStream::receiveWritable(unsigned int)>
	right = receiveWritable(1); // input 1 = right channel
    ca1e:	movs	r1, #1
	left = receiveWritable(0); // input 0 = left channel
    ca20:	mov	r4, r0
	right = receiveWritable(1); // input 1 = right channel
    ca22:	mov	r0, r5
    ca24:	bl	c6d4 <AudioStream::receiveWritable(unsigned int)>
	if (usb_audio_transmit_setting == 0) {
    ca28:	ldr	r3, [pc, #236]	; (cb18 <AudioOutputUSB::update()+0x104>)
	right = receiveWritable(1); // input 1 = right channel
    ca2a:	mov	r5, r0
	if (usb_audio_transmit_setting == 0) {
    ca2c:	ldrb	r3, [r3, #0]
    ca2e:	cbz	r3, ca6e <AudioOutputUSB::update()+0x5a>
		if (right_1st) { release(right_1st); right_1st = NULL; }
		if (right_2nd) { release(right_2nd); right_2nd = NULL; }
		offset_1st = 0;
		return;
	}
	if (left == NULL) {
    ca30:	cmp	r4, #0
    ca32:	beq.n	caca <AudioOutputUSB::update()+0xb6>
			if (right) release(right);
			return;
		}
		memset(left->data, 0, sizeof(left->data));
	}
	if (right == NULL) {
    ca34:	cmp	r5, #0
    ca36:	beq.n	cae2 <AudioOutputUSB::update()+0xce>
			release(left);
			return;
		}
		memset(right->data, 0, sizeof(right->data));
	}
	__disable_irq();
    ca38:	cpsid	i
	if (left_1st == NULL) {
    ca3a:	ldr	r3, [pc, #224]	; (cb1c <AudioOutputUSB::update()+0x108>)
    ca3c:	ldr	r0, [r3, #0]
    ca3e:	cmp	r0, #0
    ca40:	beq.n	cabe <AudioOutputUSB::update()+0xaa>
		left_1st = left;
		right_1st = right;
		offset_1st = 0;
	} else if (left_2nd == NULL) {
    ca42:	ldr	r2, [pc, #220]	; (cb20 <AudioOutputUSB::update()+0x10c>)
    ca44:	ldr	r1, [r2, #0]
    ca46:	cmp	r1, #0
    ca48:	beq.n	caf8 <AudioOutputUSB::update()+0xe4>
		left_2nd = left;
		right_2nd = right;
	} else {
		// buffer overrun - PC is consuming too slowly
		audio_block_t *discard1 = left_1st;
		left_1st = left_2nd;
    ca4a:	str	r1, [r3, #0]
		left_2nd = left;
		audio_block_t *discard2 = right_1st;
		right_1st = right_2nd;
    ca4c:	ldr	r1, [pc, #212]	; (cb24 <AudioOutputUSB::update()+0x110>)
		audio_block_t *discard2 = right_1st;
    ca4e:	ldr	r3, [pc, #216]	; (cb28 <AudioOutputUSB::update()+0x114>)
		left_2nd = left;
    ca50:	str	r4, [r2, #0]
		right_2nd = right;
		offset_1st = 0; // TODO: discard part of this data?
    ca52:	movs	r4, #0
		right_1st = right_2nd;
    ca54:	ldr	r2, [r1, #0]
		right_2nd = right;
    ca56:	str	r5, [r1, #0]
		offset_1st = 0; // TODO: discard part of this data?
    ca58:	ldr	r1, [pc, #208]	; (cb2c <AudioOutputUSB::update()+0x118>)
    ca5a:	strh	r4, [r1, #0]
		audio_block_t *discard2 = right_1st;
    ca5c:	ldr	r4, [r3, #0]
		right_1st = right_2nd;
    ca5e:	str	r2, [r3, #0]
		//serial_print("*");
		release(discard1);
    ca60:	bl	c624 <AudioStream::release(audio_block_struct*)>
		release(discard2);
    ca64:	mov	r0, r4
    ca66:	bl	c624 <AudioStream::release(audio_block_struct*)>
	}
	__enable_irq();
    ca6a:	cpsie	i
}
    ca6c:	pop	{r3, r4, r5, pc}
		if (left) release(left);
    ca6e:	cbz	r4, ca76 <AudioOutputUSB::update()+0x62>
    ca70:	mov	r0, r4
    ca72:	bl	c624 <AudioStream::release(audio_block_struct*)>
		if (right) release(right);
    ca76:	cbz	r5, ca7e <AudioOutputUSB::update()+0x6a>
    ca78:	mov	r0, r5
    ca7a:	bl	c624 <AudioStream::release(audio_block_struct*)>
		if (left_1st) { release(left_1st); left_1st = NULL; }
    ca7e:	ldr	r4, [pc, #156]	; (cb1c <AudioOutputUSB::update()+0x108>)
    ca80:	ldr	r0, [r4, #0]
    ca82:	cbz	r0, ca8c <AudioOutputUSB::update()+0x78>
    ca84:	bl	c624 <AudioStream::release(audio_block_struct*)>
    ca88:	movs	r3, #0
    ca8a:	str	r3, [r4, #0]
		if (left_2nd) { release(left_2nd); left_2nd = NULL; }
    ca8c:	ldr	r4, [pc, #144]	; (cb20 <AudioOutputUSB::update()+0x10c>)
    ca8e:	ldr	r0, [r4, #0]
    ca90:	cbz	r0, ca9a <AudioOutputUSB::update()+0x86>
    ca92:	bl	c624 <AudioStream::release(audio_block_struct*)>
    ca96:	movs	r3, #0
    ca98:	str	r3, [r4, #0]
		if (right_1st) { release(right_1st); right_1st = NULL; }
    ca9a:	ldr	r4, [pc, #140]	; (cb28 <AudioOutputUSB::update()+0x114>)
    ca9c:	ldr	r0, [r4, #0]
    ca9e:	cbz	r0, caa8 <AudioOutputUSB::update()+0x94>
    caa0:	bl	c624 <AudioStream::release(audio_block_struct*)>
    caa4:	movs	r3, #0
    caa6:	str	r3, [r4, #0]
		if (right_2nd) { release(right_2nd); right_2nd = NULL; }
    caa8:	ldr	r4, [pc, #120]	; (cb24 <AudioOutputUSB::update()+0x110>)
    caaa:	ldr	r0, [r4, #0]
    caac:	cbz	r0, cab6 <AudioOutputUSB::update()+0xa2>
    caae:	bl	c624 <AudioStream::release(audio_block_struct*)>
    cab2:	movs	r3, #0
    cab4:	str	r3, [r4, #0]
		offset_1st = 0;
    cab6:	ldr	r3, [pc, #116]	; (cb2c <AudioOutputUSB::update()+0x118>)
    cab8:	movs	r2, #0
    caba:	strh	r2, [r3, #0]
}
    cabc:	pop	{r3, r4, r5, pc}
		left_1st = left;
    cabe:	str	r4, [r3, #0]
		right_1st = right;
    cac0:	ldr	r2, [pc, #100]	; (cb28 <AudioOutputUSB::update()+0x114>)
		offset_1st = 0;
    cac2:	ldr	r3, [pc, #104]	; (cb2c <AudioOutputUSB::update()+0x118>)
		right_1st = right;
    cac4:	str	r5, [r2, #0]
		offset_1st = 0;
    cac6:	strh	r0, [r3, #0]
    cac8:	b.n	ca6a <AudioOutputUSB::update()+0x56>
		left = allocate();
    caca:	bl	c578 <AudioStream::allocate()>
		if (left == NULL) {
    cace:	mov	r4, r0
    cad0:	cbz	r0, cb00 <AudioOutputUSB::update()+0xec>
		memset(left->data, 0, sizeof(left->data));
    cad2:	mov.w	r2, #256	; 0x100
    cad6:	movs	r1, #0
    cad8:	adds	r0, #4
    cada:	bl	e044 <memset>
	if (right == NULL) {
    cade:	cmp	r5, #0
    cae0:	bne.n	ca38 <AudioOutputUSB::update()+0x24>
		right = allocate();
    cae2:	bl	c578 <AudioStream::allocate()>
		if (right == NULL) {
    cae6:	mov	r5, r0
    cae8:	cbz	r0, cb0e <AudioOutputUSB::update()+0xfa>
		memset(right->data, 0, sizeof(right->data));
    caea:	mov.w	r2, #256	; 0x100
    caee:	movs	r1, #0
    caf0:	adds	r0, #4
    caf2:	bl	e044 <memset>
    caf6:	b.n	ca38 <AudioOutputUSB::update()+0x24>
		right_2nd = right;
    caf8:	ldr	r3, [pc, #40]	; (cb24 <AudioOutputUSB::update()+0x110>)
		left_2nd = left;
    cafa:	str	r4, [r2, #0]
		right_2nd = right;
    cafc:	str	r5, [r3, #0]
    cafe:	b.n	ca6a <AudioOutputUSB::update()+0x56>
			if (right) release(right);
    cb00:	cmp	r5, #0
    cb02:	beq.n	ca6c <AudioOutputUSB::update()+0x58>
    cb04:	mov	r0, r5
}
    cb06:	ldmia.w	sp!, {r3, r4, r5, lr}
			if (right) release(right);
    cb0a:	b.w	c624 <AudioStream::release(audio_block_struct*)>
			release(left);
    cb0e:	mov	r0, r4
}
    cb10:	ldmia.w	sp!, {r3, r4, r5, lr}
			release(left);
    cb14:	b.w	c624 <AudioStream::release(audio_block_struct*)>
    cb18:	.word	0x2000816f
    cb1c:	.word	0x200064f4
    cb20:	.word	0x200064f8
    cb24:	.word	0x20006500
    cb28:	.word	0x200064fc
    cb2c:	.word	0x2000813c

0000cb30 <usb_audio_receive_callback>:
{
    cb30:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	AudioInputUSB::receive_flag = 1;
    cb34:	movs	r2, #1
    cb36:	ldr	r3, [pc, #296]	; (cc60 <usb_audio_receive_callback+0x130>)
	left = AudioInputUSB::incoming_left;
    cb38:	ldr.w	sl, [pc, #312]	; cc74 <usb_audio_receive_callback+0x144>
	len >>= 2; // 1 sample = 4 bytes: 2 left, 2 right
    cb3c:	lsrs	r6, r0, #2
	AudioInputUSB::receive_flag = 1;
    cb3e:	strb	r2, [r3, #0]
	count = AudioInputUSB::incoming_count;
    cb40:	ldr	r3, [pc, #288]	; (cc64 <usb_audio_receive_callback+0x134>)
	left = AudioInputUSB::incoming_left;
    cb42:	ldr.w	r4, [sl]
	count = AudioInputUSB::incoming_count;
    cb46:	ldrh	r7, [r3, #0]
	right = AudioInputUSB::incoming_right;
    cb48:	ldr	r3, [pc, #284]	; (cc68 <usb_audio_receive_callback+0x138>)
	count = AudioInputUSB::incoming_count;
    cb4a:	mov	r9, r7
	right = AudioInputUSB::incoming_right;
    cb4c:	ldr	r5, [r3, #0]
	if (left == NULL) {
    cb4e:	cmp	r4, #0
    cb50:	beq.n	cbe8 <usb_audio_receive_callback+0xb8>
	if (right == NULL) {
    cb52:	cmp	r5, #0
    cb54:	beq.n	cbfa <usb_audio_receive_callback+0xca>
	while (len > 0) {
    cb56:	cmp	r6, #0
    cb58:	beq.n	cc0c <usb_audio_receive_callback+0xdc>
		avail = AUDIO_BLOCK_SAMPLES - count;
    cb5a:	rsb	r3, r7, #128	; 0x80
		if (len < avail) {
    cb5e:	cmp	r6, r3
    cb60:	bcc.n	cc58 <usb_audio_receive_callback+0x128>
    cb62:	ldr.w	fp, [pc, #276]	; cc78 <usb_audio_receive_callback+0x148>
    cb66:	ldr	r7, [pc, #260]	; (cc6c <usb_audio_receive_callback+0x13c>)
			if (AudioInputUSB::ready_left || AudioInputUSB::ready_right) return;
    cb68:	ldr.w	r8, [pc, #272]	; cc7c <usb_audio_receive_callback+0x14c>
		} else if (avail > 0) {
    cb6c:	cbnz	r3, cbae <usb_audio_receive_callback+0x7e>
			if (AudioInputUSB::ready_left || AudioInputUSB::ready_right) return;
    cb6e:	ldr	r3, [r7, #0]
    cb70:	cmp	r3, #0
    cb72:	bne.n	cbe4 <usb_audio_receive_callback+0xb4>
    cb74:	ldr.w	r3, [r8]
    cb78:	cmp	r3, #0
    cb7a:	bne.n	cbe4 <usb_audio_receive_callback+0xb4>
			AudioInputUSB::ready_left = left;
    cb7c:	str	r4, [r7, #0]
			AudioInputUSB::ready_right = right;
    cb7e:	str.w	r5, [r8]
			left = AudioStream::allocate();
    cb82:	bl	c578 <AudioStream::allocate()>
			if (left == NULL) {
    cb86:	mov	r4, r0
    cb88:	cmp	r0, #0
    cb8a:	beq.n	cc14 <usb_audio_receive_callback+0xe4>
			right = AudioStream::allocate();
    cb8c:	bl	c578 <AudioStream::allocate()>
			if (right == NULL) {
    cb90:	mov	r5, r0
    cb92:	cmp	r0, #0
    cb94:	beq.n	cc24 <usb_audio_receive_callback+0xf4>
			AudioInputUSB::incoming_right = right;
    cb96:	ldr	r3, [pc, #208]	; (cc68 <usb_audio_receive_callback+0x138>)
			AudioInputUSB::incoming_left = left;
    cb98:	str.w	r4, [sl]
			AudioInputUSB::incoming_right = right;
    cb9c:	str	r0, [r3, #0]
	while (len > 0) {
    cb9e:	cmp	r6, #0
    cba0:	beq.n	cc0a <usb_audio_receive_callback+0xda>
		if (len < avail) {
    cba2:	cmp	r6, #127	; 0x7f
			count = 0;
    cba4:	mov.w	r9, #0
		avail = AUDIO_BLOCK_SAMPLES - count;
    cba8:	mov.w	r3, #128	; 0x80
		if (len < avail) {
    cbac:	bls.n	cc3a <usb_audio_receive_callback+0x10a>
			copy_to_buffers(data, left->data + count, right->data + count, avail);
    cbae:	adds	r2, r5, #4
    cbb0:	adds	r1, r4, #4
    cbb2:	mov	r0, fp
    cbb4:	add	r6, r9
    cbb6:	add.w	r2, r2, r9, lsl #1
    cbba:	add.w	r1, r1, r9, lsl #1
			len -= avail;
    cbbe:	subs	r6, #128	; 0x80
			data += avail;
    cbc0:	add.w	fp, fp, r3, lsl #2
			copy_to_buffers(data, left->data + count, right->data + count, avail);
    cbc4:	bl	c920 <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)>
			if (AudioInputUSB::ready_left || AudioInputUSB::ready_right) {
    cbc8:	ldr	r3, [r7, #0]
    cbca:	cbnz	r3, cbd4 <usb_audio_receive_callback+0xa4>
    cbcc:	ldr.w	r3, [r8]
    cbd0:	cmp	r3, #0
    cbd2:	beq.n	cb7c <usb_audio_receive_callback+0x4c>
				AudioInputUSB::incoming_count = count + avail;
    cbd4:	movs	r3, #128	; 0x80
    cbd6:	ldr	r2, [pc, #140]	; (cc64 <usb_audio_receive_callback+0x134>)
    cbd8:	strh	r3, [r2, #0]
				if (len > 0) {
    cbda:	cbz	r6, cbe4 <usb_audio_receive_callback+0xb4>
					usb_audio_overrun_count++;
    cbdc:	ldr	r2, [pc, #144]	; (cc70 <usb_audio_receive_callback+0x140>)
    cbde:	ldr	r3, [r2, #0]
    cbe0:	adds	r3, #1
    cbe2:	str	r3, [r2, #0]
}
    cbe4:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		left = AudioStream::allocate();
    cbe8:	bl	c578 <AudioStream::allocate()>
		if (left == NULL) return;
    cbec:	mov	r4, r0
    cbee:	cmp	r0, #0
    cbf0:	beq.n	cbe4 <usb_audio_receive_callback+0xb4>
		AudioInputUSB::incoming_left = left;
    cbf2:	str.w	r0, [sl]
	if (right == NULL) {
    cbf6:	cmp	r5, #0
    cbf8:	bne.n	cb56 <usb_audio_receive_callback+0x26>
		right = AudioStream::allocate();
    cbfa:	bl	c578 <AudioStream::allocate()>
		if (right == NULL) return;
    cbfe:	mov	r5, r0
    cc00:	cmp	r0, #0
    cc02:	beq.n	cbe4 <usb_audio_receive_callback+0xb4>
		AudioInputUSB::incoming_right = right;
    cc04:	ldr	r3, [pc, #96]	; (cc68 <usb_audio_receive_callback+0x138>)
    cc06:	str	r0, [r3, #0]
    cc08:	b.n	cb56 <usb_audio_receive_callback+0x26>
    cc0a:	mov	r7, r6
	AudioInputUSB::incoming_count = count;
    cc0c:	ldr	r3, [pc, #84]	; (cc64 <usb_audio_receive_callback+0x134>)
    cc0e:	strh	r7, [r3, #0]
}
    cc10:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				AudioInputUSB::incoming_right = NULL;
    cc14:	ldr	r3, [pc, #80]	; (cc68 <usb_audio_receive_callback+0x138>)
				AudioInputUSB::incoming_left = NULL;
    cc16:	str.w	r0, [sl]
				AudioInputUSB::incoming_right = NULL;
    cc1a:	str	r0, [r3, #0]
				AudioInputUSB::incoming_count = 0;
    cc1c:	ldr	r3, [pc, #68]	; (cc64 <usb_audio_receive_callback+0x134>)
    cc1e:	strh	r0, [r3, #0]
}
    cc20:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				AudioStream::release(left);
    cc24:	mov	r0, r4
    cc26:	bl	c624 <AudioStream::release(audio_block_struct*)>
				AudioInputUSB::incoming_right = NULL;
    cc2a:	ldr	r3, [pc, #60]	; (cc68 <usb_audio_receive_callback+0x138>)
				AudioInputUSB::incoming_left = NULL;
    cc2c:	str.w	r5, [sl]
				AudioInputUSB::incoming_right = NULL;
    cc30:	str	r5, [r3, #0]
				AudioInputUSB::incoming_count = 0;
    cc32:	ldr	r3, [pc, #48]	; (cc64 <usb_audio_receive_callback+0x134>)
    cc34:	strh	r5, [r3, #0]
}
    cc36:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cc3a:	mov	r7, r9
    cc3c:	mov	r3, r9
			copy_to_buffers(data, left->data + count, right->data + count, len);
    cc3e:	adds	r2, r5, #4
    cc40:	adds	r1, r4, #4
    cc42:	mov	r0, fp
			AudioInputUSB::incoming_count = count + len;
    cc44:	add	r7, r6
			copy_to_buffers(data, left->data + count, right->data + count, len);
    cc46:	add	r2, r3
    cc48:	add	r1, r3
    cc4a:	mov	r3, r6
    cc4c:	bl	c920 <copy_to_buffers(unsigned long const*, short*, short*, unsigned int)>
			AudioInputUSB::incoming_count = count + len;
    cc50:	ldr	r3, [pc, #16]	; (cc64 <usb_audio_receive_callback+0x134>)
    cc52:	strh	r7, [r3, #0]
}
    cc54:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			copy_to_buffers(data, left->data + count, right->data + count, len);
    cc58:	lsls	r3, r7, #1
    cc5a:	ldr.w	fp, [pc, #28]	; cc78 <usb_audio_receive_callback+0x148>
    cc5e:	b.n	cc3e <usb_audio_receive_callback+0x10e>
    cc60:	.word	0x20008158
    cc64:	.word	0x2000813a
    cc68:	.word	0x200064b0
    cc6c:	.word	0x200064a4
    cc70:	.word	0x20008114
    cc74:	.word	0x200064ac
    cc78:	.word	0x20205280
    cc7c:	.word	0x200064a8

0000cc80 <rx_event(transfer_struct*)>:
{
    cc80:	push	{r3, lr}
	if (t) {
    cc82:	cbz	r0, cc94 <rx_event(transfer_struct*)+0x14>
		int len = AUDIO_RX_SIZE - ((rx_transfer.status >> 16) & 0x7FFF);
    cc84:	ldr	r3, [pc, #68]	; (cccc <rx_event(transfer_struct*)+0x4c>)
    cc86:	ldr	r0, [r3, #4]
    cc88:	ubfx	r0, r0, #16, #15
		usb_audio_receive_callback(len);
    cc8c:	rsb	r0, r0, #180	; 0xb4
    cc90:	bl	cb30 <usb_audio_receive_callback>
	usb_prepare_transfer(&rx_transfer, rx_buffer, AUDIO_RX_SIZE, 0);
    cc94:	movs	r3, #0
    cc96:	movs	r2, #180	; 0xb4
    cc98:	ldr	r1, [pc, #52]	; (ccd0 <rx_event(transfer_struct*)+0x50>)
    cc9a:	ldr	r0, [pc, #48]	; (cccc <rx_event(transfer_struct*)+0x4c>)
    cc9c:	bl	b72c <usb_prepare_transfer>
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    cca0:	ldr	r3, [pc, #44]	; (ccd0 <rx_event(transfer_struct*)+0x50>)
	uint32_t end_addr = (uint32_t)addr + size;
    cca2:	add.w	r1, r3, #180	; 0xb4
	asm("dsb");
    cca6:	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    ccaa:	mov.w	r2, #3758153728	; 0xe000e000
    ccae:	str.w	r3, [r2, #3932]	; 0xf5c
		location += 32;
    ccb2:	adds	r3, #32
	} while (location < end_addr);
    ccb4:	cmp	r1, r3
    ccb6:	bhi.n	ccae <rx_event(transfer_struct*)+0x2e>
	asm("dsb");
    ccb8:	dsb	sy
	asm("isb");
    ccbc:	isb	sy
	usb_receive(AUDIO_RX_ENDPOINT, &rx_transfer);
    ccc0:	ldr	r1, [pc, #8]	; (cccc <rx_event(transfer_struct*)+0x4c>)
    ccc2:	movs	r0, #5
}
    ccc4:	ldmia.w	sp!, {r3, lr}
	usb_receive(AUDIO_RX_ENDPOINT, &rx_transfer);
    ccc8:	b.w	b784 <usb_receive>
    cccc:	.word	0x200030e0
    ccd0:	.word	0x20205280

0000ccd4 <AudioOutputUSB::begin()>:
	update_responsibility = false;
    ccd4:	movs	r3, #0
    ccd6:	ldr	r0, [pc, #12]	; (cce4 <AudioOutputUSB::begin()+0x10>)
	left_1st = NULL;
    ccd8:	ldr	r1, [pc, #12]	; (cce8 <AudioOutputUSB::begin()+0x14>)
	right_1st = NULL;
    ccda:	ldr	r2, [pc, #16]	; (ccec <AudioOutputUSB::begin()+0x18>)
	update_responsibility = false;
    ccdc:	strb	r3, [r0, #0]
	left_1st = NULL;
    ccde:	str	r3, [r1, #0]
	right_1st = NULL;
    cce0:	str	r3, [r2, #0]
}
    cce2:	bx	lr
    cce4:	.word	0x20008159
    cce8:	.word	0x200064f4
    ccec:	.word	0x200064fc

0000ccf0 <usb_audio_transmit_callback>:
{
	static uint32_t count=5;
	uint32_t avail, num, target, offset, len=0;
	audio_block_t *left, *right;

	if (++count < 10) {   // TODO: dynamic adjust to match USB rate
    ccf0:	ldr	r2, [pc, #228]	; (cdd8 <usb_audio_transmit_callback+0xe8>)
{
    ccf2:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (++count < 10) {   // TODO: dynamic adjust to match USB rate
    ccf6:	ldr	r3, [r2, #0]
    ccf8:	adds	r3, #1
    ccfa:	cmp	r3, #9
{
    ccfc:	vpush	{d8}
	if (++count < 10) {   // TODO: dynamic adjust to match USB rate
    cd00:	bls.n	cdae <usb_audio_transmit_callback+0xbe>
		target = 44;
	} else {
		count = 0;
    cd02:	movs	r1, #180	; 0xb4
    cd04:	movs	r3, #0
		target = 45;
    cd06:	mov.w	r9, #45	; 0x2d
		count = 0;
    cd0a:	vmov	s16, r1
    cd0e:	str	r3, [r2, #0]
{
    cd10:	movs	r7, #0
    cd12:	ldr.w	fp, [pc, #216]	; cdec <usb_audio_transmit_callback+0xfc>
			memset(usb_audio_transmit_buffer + len, 0, num * 4);
			//serial_print("%");
			break;
		}
		right = AudioOutputUSB::right_1st;
		offset = AudioOutputUSB::offset_1st;
    cd16:	ldr.w	sl, [pc, #216]	; cdf0 <usb_audio_transmit_callback+0x100>
		left = AudioOutputUSB::left_1st;
    cd1a:	ldr.w	r0, [fp]
		num = target - len;
    cd1e:	sub.w	r2, r9, r7
		if (left == NULL) {
    cd22:	cmp	r0, #0
    cd24:	beq.n	cdbc <usb_audio_transmit_callback+0xcc>
		offset = AudioOutputUSB::offset_1st;
    cd26:	ldrh.w	ip, [sl]

		avail = AUDIO_BLOCK_SAMPLES - offset;
		if (num > avail) num = avail;

		copy_from_buffers((uint32_t *)usb_audio_transmit_buffer + len,
			left->data + offset, right->data + offset, num);
    cd2a:	adds	r5, r0, #4
		right = AudioOutputUSB::right_1st;
    cd2c:	ldr	r3, [pc, #172]	; (cddc <usb_audio_transmit_callback+0xec>)
		copy_from_buffers((uint32_t *)usb_audio_transmit_buffer + len,
    cd2e:	add.w	r5, r5, ip, lsl #1
		right = AudioOutputUSB::right_1st;
    cd32:	ldr.w	r8, [r3]
		avail = AUDIO_BLOCK_SAMPLES - offset;
    cd36:	rsb	r3, ip, #128	; 0x80
    cd3a:	cmp	r2, r3
			left->data + offset, right->data + offset, num);
    cd3c:	add.w	r4, r8, #4
    cd40:	it	cs
    cd42:	movcs	r2, r3
		copy_from_buffers((uint32_t *)usb_audio_transmit_buffer + len,
    cd44:	ldr	r3, [pc, #152]	; (cde0 <usb_audio_transmit_callback+0xf0>)
    cd46:	add.w	r4, r4, ip, lsl #1
    cd4a:	add.w	r6, r3, r7, lsl #2
	while (len > 0) {
    cd4e:	cbz	r2, cd68 <usb_audio_transmit_callback+0x78>
    cd50:	mov	r1, r2
		*dst++ = (*right++ << 16) | (*left++ & 0xFFFF);
    cd52:	ldrsh.w	r3, [r5], #2
	while (len > 0) {
    cd56:	subs	r1, #1
		*dst++ = (*right++ << 16) | (*left++ & 0xFFFF);
    cd58:	ldrsh.w	lr, [r4], #2
    cd5c:	uxth	r3, r3
    cd5e:	orr.w	r3, r3, lr, lsl #16
    cd62:	str.w	r3, [r6], #4
	while (len > 0) {
    cd66:	bne.n	cd52 <usb_audio_transmit_callback+0x62>
		len += num;
		offset += num;
    cd68:	add	ip, r2
		len += num;
    cd6a:	add	r7, r2
		if (offset >= AUDIO_BLOCK_SAMPLES) {
    cd6c:	cmp.w	ip, #127	; 0x7f
    cd70:	bhi.n	cd8a <usb_audio_transmit_callback+0x9a>
			AudioOutputUSB::left_2nd = NULL;
			AudioOutputUSB::right_1st = AudioOutputUSB::right_2nd;
			AudioOutputUSB::right_2nd = NULL;
			AudioOutputUSB::offset_1st = 0;
		} else {
			AudioOutputUSB::offset_1st = offset;
    cd72:	uxth.w	ip, ip
	while (len < target) {
    cd76:	cmp	r7, r9
			AudioOutputUSB::offset_1st = offset;
    cd78:	strh.w	ip, [sl]
	while (len < target) {
    cd7c:	bcc.n	cd1a <usb_audio_transmit_callback+0x2a>
		}
	}
	return target * 4;
}
    cd7e:	vmov	r0, s16
    cd82:	vpop	{d8}
    cd86:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			AudioStream::release(left);
    cd8a:	bl	c624 <AudioStream::release(audio_block_struct*)>
			AudioStream::release(right);
    cd8e:	mov	r0, r8
    cd90:	bl	c624 <AudioStream::release(audio_block_struct*)>
			AudioOutputUSB::left_1st = AudioOutputUSB::left_2nd;
    cd94:	ldr	r0, [pc, #76]	; (cde4 <usb_audio_transmit_callback+0xf4>)
			AudioOutputUSB::right_1st = AudioOutputUSB::right_2nd;
    cd96:	ldr	r3, [pc, #80]	; (cde8 <usb_audio_transmit_callback+0xf8>)
			AudioOutputUSB::left_2nd = NULL;
    cd98:	movs	r2, #0
			AudioOutputUSB::left_1st = AudioOutputUSB::left_2nd;
    cd9a:	ldr	r1, [r0, #0]
    cd9c:	mov	ip, r2
			AudioOutputUSB::left_2nd = NULL;
    cd9e:	str	r2, [r0, #0]
			AudioOutputUSB::left_1st = AudioOutputUSB::left_2nd;
    cda0:	str.w	r1, [fp]
			AudioOutputUSB::right_1st = AudioOutputUSB::right_2nd;
    cda4:	ldr	r1, [r3, #0]
			AudioOutputUSB::right_2nd = NULL;
    cda6:	str	r2, [r3, #0]
			AudioOutputUSB::right_1st = AudioOutputUSB::right_2nd;
    cda8:	ldr	r3, [pc, #48]	; (cddc <usb_audio_transmit_callback+0xec>)
    cdaa:	str	r1, [r3, #0]
			AudioOutputUSB::offset_1st = 0;
    cdac:	b.n	cd76 <usb_audio_transmit_callback+0x86>
	if (++count < 10) {   // TODO: dynamic adjust to match USB rate
    cdae:	movs	r1, #176	; 0xb0
		target = 44;
    cdb0:	mov.w	r9, #44	; 0x2c
	if (++count < 10) {   // TODO: dynamic adjust to match USB rate
    cdb4:	str	r3, [r2, #0]
    cdb6:	vmov	s16, r1
    cdba:	b.n	cd10 <usb_audio_transmit_callback+0x20>
			memset(usb_audio_transmit_buffer + len, 0, num * 4);
    cdbc:	ldr	r3, [pc, #32]	; (cde0 <usb_audio_transmit_callback+0xf0>)
    cdbe:	mov	r1, r0
    cdc0:	lsls	r2, r2, #2
    cdc2:	add.w	r0, r3, r7, lsl #1
    cdc6:	bl	e044 <memset>
}
    cdca:	vmov	r0, s16
    cdce:	vpop	{d8}
    cdd2:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cdd6:	nop
    cdd8:	.word	0x20001484
    cddc:	.word	0x200064fc
    cde0:	.word	0x20005240
    cde4:	.word	0x200064f8
    cde8:	.word	0x20006500
    cdec:	.word	0x200064f4
    cdf0:	.word	0x2000813c

0000cdf4 <tx_event(transfer_struct*)>:
{
    cdf4:	push	{r3, r4, r5, lr}
	int len = usb_audio_transmit_callback();
    cdf6:	bl	ccf0 <usb_audio_transmit_callback>
	usb_audio_sync_feedback = feedback_accumulator >> usb_audio_sync_rshift;
    cdfa:	ldr	r2, [pc, #68]	; (ce40 <tx_event(transfer_struct*)+0x4c>)
    cdfc:	ldr	r3, [pc, #68]	; (ce44 <tx_event(transfer_struct*)+0x50>)
	int len = usb_audio_transmit_callback();
    cdfe:	mov	r5, r0
	usb_audio_sync_feedback = feedback_accumulator >> usb_audio_sync_rshift;
    ce00:	ldr	r2, [r2, #0]
    ce02:	ldrb	r3, [r3, #0]
	usb_prepare_transfer(&tx_transfer, usb_audio_transmit_buffer, len, 0);
    ce04:	ldr	r4, [pc, #64]	; (ce48 <tx_event(transfer_struct*)+0x54>)
	usb_audio_sync_feedback = feedback_accumulator >> usb_audio_sync_rshift;
    ce06:	lsrs	r2, r3
    ce08:	ldr	r1, [pc, #64]	; (ce4c <tx_event(transfer_struct*)+0x58>)
	usb_prepare_transfer(&tx_transfer, usb_audio_transmit_buffer, len, 0);
    ce0a:	movs	r3, #0
	usb_audio_sync_feedback = feedback_accumulator >> usb_audio_sync_rshift;
    ce0c:	str	r2, [r1, #0]
	usb_prepare_transfer(&tx_transfer, usb_audio_transmit_buffer, len, 0);
    ce0e:	mov	r2, r0
    ce10:	mov	r1, r4
    ce12:	ldr	r0, [pc, #60]	; (ce50 <tx_event(transfer_struct*)+0x5c>)
    ce14:	bl	b72c <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    ce18:	adds	r0, r4, r5
	asm("dsb");
    ce1a:	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    ce1e:	mov.w	r3, #3758153728	; 0xe000e000
    ce22:	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    ce26:	adds	r4, #32
	} while (location < end_addr);
    ce28:	cmp	r0, r4
    ce2a:	bhi.n	ce22 <tx_event(transfer_struct*)+0x2e>
	asm("dsb");
    ce2c:	dsb	sy
	asm("isb");
    ce30:	isb	sy
	usb_transmit(AUDIO_TX_ENDPOINT, &tx_transfer);
    ce34:	ldr	r1, [pc, #24]	; (ce50 <tx_event(transfer_struct*)+0x5c>)
    ce36:	movs	r0, #5
}
    ce38:	ldmia.w	sp!, {r3, r4, r5, lr}
	usb_transmit(AUDIO_TX_ENDPOINT, &tx_transfer);
    ce3c:	b.w	b75c <usb_transmit>
    ce40:	.word	0x200079a8
    ce44:	.word	0x2000816e
    ce48:	.word	0x20005240
    ce4c:	.word	0x20205260
    ce50:	.word	0x20003220

0000ce54 <usb_audio_configure>:
{
    ce54:	push	{r3, r4, r5, lr}
	usb_audio_overrun_count = 0;
    ce56:	ldr	r1, [pc, #172]	; (cf04 <usb_audio_configure+0xb0>)
	usb_audio_underrun_count = 0;
    ce58:	movs	r4, #0
    ce5a:	ldr	r3, [pc, #172]	; (cf08 <usb_audio_configure+0xb4>)
	if (usb_high_speed) {
    ce5c:	ldr	r2, [pc, #172]	; (cf0c <usb_audio_configure+0xb8>)
	usb_audio_underrun_count = 0;
    ce5e:	str	r4, [r3, #0]
	usb_audio_overrun_count = 0;
    ce60:	str	r4, [r1, #0]
	if (usb_high_speed) {
    ce62:	ldrb	r1, [r2, #0]
	feedback_accumulator = 739875226; // 44.1 * 2^24
    ce64:	ldr	r3, [pc, #168]	; (cf10 <usb_audio_configure+0xbc>)
	if (usb_high_speed) {
    ce66:	cmp	r1, r4
	feedback_accumulator = 739875226; // 44.1 * 2^24
    ce68:	ldr	r2, [pc, #168]	; (cf14 <usb_audio_configure+0xc0>)
		usb_audio_sync_nbytes = 4;
    ce6a:	ldr	r5, [pc, #172]	; (cf18 <usb_audio_configure+0xc4>)
	memset(&rx_transfer, 0, sizeof(rx_transfer));
    ce6c:	mov	r1, r4
	feedback_accumulator = 739875226; // 44.1 * 2^24
    ce6e:	str	r2, [r3, #0]
	if (usb_high_speed) {
    ce70:	itete	eq
    ce72:	moveq	r3, #3
    ce74:	movne	r3, #4
    ce76:	moveq	r0, #10
    ce78:	movne	r0, #8
	memset(&rx_transfer, 0, sizeof(rx_transfer));
    ce7a:	movs	r2, #32
		usb_audio_sync_nbytes = 4;
    ce7c:	strb	r3, [r5, #0]
		usb_audio_sync_rshift = 8;
    ce7e:	ldr	r3, [pc, #156]	; (cf1c <usb_audio_configure+0xc8>)
    ce80:	strb	r0, [r3, #0]
	memset(&rx_transfer, 0, sizeof(rx_transfer));
    ce82:	ldr	r0, [pc, #156]	; (cf20 <usb_audio_configure+0xcc>)
    ce84:	bl	e044 <memset>
	usb_config_rx_iso(AUDIO_RX_ENDPOINT, AUDIO_RX_SIZE, 1, rx_event);
    ce88:	movs	r2, #1
    ce8a:	movs	r1, #180	; 0xb4
    ce8c:	movs	r0, #5
    ce8e:	ldr	r3, [pc, #148]	; (cf24 <usb_audio_configure+0xd0>)
    ce90:	bl	b65c <usb_config_rx_iso>
	usb_prepare_transfer(&rx_transfer, rx_buffer, AUDIO_RX_SIZE, 0);
    ce94:	mov	r3, r4
    ce96:	movs	r2, #180	; 0xb4
    ce98:	ldr	r1, [pc, #140]	; (cf28 <usb_audio_configure+0xd4>)
    ce9a:	ldr	r0, [pc, #132]	; (cf20 <usb_audio_configure+0xcc>)
    ce9c:	bl	b72c <usb_prepare_transfer>
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    cea0:	ldr	r3, [pc, #132]	; (cf28 <usb_audio_configure+0xd4>)
	uint32_t end_addr = (uint32_t)addr + size;
    cea2:	add.w	r1, r3, #180	; 0xb4
	asm("dsb");
    cea6:	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    ceaa:	mov.w	r2, #3758153728	; 0xe000e000
    ceae:	str.w	r3, [r2, #3932]	; 0xf5c
		location += 32;
    ceb2:	adds	r3, #32
	} while (location < end_addr);
    ceb4:	cmp	r1, r3
    ceb6:	bhi.n	ceae <usb_audio_configure+0x5a>
	asm("dsb");
    ceb8:	dsb	sy
	asm("isb");
    cebc:	isb	sy
	usb_receive(AUDIO_RX_ENDPOINT, &rx_transfer);
    cec0:	ldr	r1, [pc, #92]	; (cf20 <usb_audio_configure+0xcc>)
    cec2:	movs	r0, #5
    cec4:	bl	b784 <usb_receive>
	memset(&sync_transfer, 0, sizeof(sync_transfer));
    cec8:	movs	r2, #32
    ceca:	movs	r1, #0
    cecc:	ldr	r0, [pc, #92]	; (cf2c <usb_audio_configure+0xd8>)
    cece:	bl	e044 <memset>
	usb_config_tx_iso(AUDIO_SYNC_ENDPOINT, usb_audio_sync_nbytes, 1, sync_event);
    ced2:	ldr	r3, [pc, #92]	; (cf30 <usb_audio_configure+0xdc>)
    ced4:	ldrb	r1, [r5, #0]
    ced6:	movs	r2, #1
    ced8:	movs	r0, #6
    ceda:	bl	b6c0 <usb_config_tx_iso>
	sync_event(NULL);
    cede:	movs	r0, #0
    cee0:	bl	c9b8 <sync_event(transfer_struct*)>
	memset(&tx_transfer, 0, sizeof(tx_transfer));
    cee4:	movs	r2, #32
    cee6:	movs	r1, #0
    cee8:	ldr	r0, [pc, #72]	; (cf34 <usb_audio_configure+0xe0>)
    ceea:	bl	e044 <memset>
	usb_config_tx_iso(AUDIO_TX_ENDPOINT, AUDIO_TX_SIZE, 1, tx_event);
    ceee:	movs	r0, #5
    cef0:	ldr	r3, [pc, #68]	; (cf38 <usb_audio_configure+0xe4>)
    cef2:	movs	r2, #1
    cef4:	movs	r1, #180	; 0xb4
    cef6:	bl	b6c0 <usb_config_tx_iso>
	tx_event(NULL);
    cefa:	movs	r0, #0
}
    cefc:	ldmia.w	sp!, {r3, r4, r5, lr}
	tx_event(NULL);
    cf00:	b.w	cdf4 <tx_event(transfer_struct*)>
    cf04:	.word	0x20008114
    cf08:	.word	0x20008118
    cf0c:	.word	0x20008172
    cf10:	.word	0x200079a8
    cf14:	.word	0x2c19999a
    cf18:	.word	0x2000816d
    cf1c:	.word	0x2000816e
    cf20:	.word	0x200030e0
    cf24:	.word	0x0000cc81
    cf28:	.word	0x20205280
    cf2c:	.word	0x20003100
    cf30:	.word	0x0000c9b9
    cf34:	.word	0x20003220
    cf38:	.word	0x0000cdf5

0000cf3c <usb_audio_get_feature>:
};

int usb_audio_get_feature(void *stp, uint8_t *data, uint32_t *datalen)
{
	struct setup_struct setup = *((struct setup_struct *)stp);
	if (setup.bmRequestType==0xA1) { // should check bRequest, bChannel, and UnitID
    cf3c:	ldrb	r3, [r0, #0]
    cf3e:	cmp	r3, #161	; 0xa1
    cf40:	beq.n	cf46 <usb_audio_get_feature+0xa>
			if (setup.bCS==0x01) { // mute
				data[0] = AudioInputUSB::features.mute;  // 1=mute, 0=unmute
				*datalen = 1;
				return 1;
			}
			else if (setup.bCS==0x02) { // volume
    cf42:	movs	r0, #0
				*datalen = 2;
				return 1;
			}
	}
	return 0;
}
    cf44:	bx	lr
	struct setup_struct setup = *((struct setup_struct *)stp);
    cf46:	ldrb	r3, [r0, #3]
    cf48:	ldrb	r0, [r0, #1]
			if (setup.bCS==0x01) { // mute
    cf4a:	cmp	r3, #1
    cf4c:	beq.n	cf60 <usb_audio_get_feature+0x24>
			else if (setup.bCS==0x02) { // volume
    cf4e:	cmp	r3, #2
    cf50:	bne.n	cf42 <usb_audio_get_feature+0x6>
				if (setup.bRequest==0x81) { // GET_CURR
    cf52:	subs	r0, #129	; 0x81
    cf54:	cmp	r0, #3
    cf56:	bhi.n	cf42 <usb_audio_get_feature+0x6>
    cf58:	tbb	[pc, r0]
    cf5c:	.word	0x0b13171b
{
    cf60:	push	{r4}
				data[0] = AudioInputUSB::features.mute;  // 1=mute, 0=unmute
    cf62:	ldr	r4, [pc, #56]	; (cf9c <usb_audio_get_feature+0x60>)
				return 1;
    cf64:	mov	r0, r3
				data[0] = AudioInputUSB::features.mute;  // 1=mute, 0=unmute
    cf66:	ldr	r4, [r4, #4]
    cf68:	strb	r4, [r1, #0]
}
    cf6a:	ldr.w	r4, [sp], #4
				*datalen = 1;
    cf6e:	str	r3, [r2, #0]
}
    cf70:	bx	lr
					data[0] = 1; // increment vol by by 1
    cf72:	movs	r3, #1
    cf74:	movs	r0, #0
    cf76:	strb	r3, [r1, #0]
				*datalen = 2;
    cf78:	movs	r3, #2
					data[1] = (AudioInputUSB::features.volume>>8) & 0xFF;
    cf7a:	strb	r0, [r1, #1]
				return 1;
    cf7c:	movs	r0, #1
				*datalen = 2;
    cf7e:	str	r3, [r2, #0]
				return 1;
    cf80:	bx	lr
					data[0] = FEATURE_MAX_VOLUME;  // max level, for range of 0 to MAX
    cf82:	movs	r3, #255	; 0xff
    cf84:	movs	r0, #0
    cf86:	strb	r3, [r1, #0]
					data[1] = 0;
    cf88:	b.n	cf78 <usb_audio_get_feature+0x3c>
					data[0] = 0;     // min level is 0
    cf8a:	movs	r3, #0
    cf8c:	mov	r0, r3
    cf8e:	strb	r3, [r1, #0]
					data[1] = 0;
    cf90:	b.n	cf78 <usb_audio_get_feature+0x3c>
					data[0] = AudioInputUSB::features.volume & 0xFF;
    cf92:	ldr	r3, [pc, #8]	; (cf9c <usb_audio_get_feature+0x60>)
    cf94:	ldr	r0, [r3, #8]
    cf96:	strb	r0, [r1, #0]
					data[1] = (AudioInputUSB::features.volume>>8) & 0xFF;
    cf98:	ldrb	r0, [r3, #9]
    cf9a:	b.n	cf78 <usb_audio_get_feature+0x3c>
    cf9c:	.word	0x20001470

0000cfa0 <usb_audio_set_feature>:

int usb_audio_set_feature(void *stp, uint8_t *buf) 
{
	struct setup_struct setup = *((struct setup_struct *)stp);
	if (setup.bmRequestType==0x21) { // should check bRequest, bChannel and UnitID
    cfa0:	ldrb	r3, [r0, #0]
    cfa2:	cmp	r3, #33	; 0x21
    cfa4:	beq.n	cfaa <usb_audio_set_feature+0xa>
					AudioInputUSB::features.change = 1;
					return 1;
				}
			}
	}
	return 0;
    cfa6:	movs	r0, #0
}
    cfa8:	bx	lr
	struct setup_struct setup = *((struct setup_struct *)stp);
    cfaa:	ldrb	r3, [r0, #3]
    cfac:	ldrb	r2, [r0, #1]
			if (setup.bCS==0x01) { // mute
    cfae:	cmp	r3, #1
    cfb0:	beq.n	cfc6 <usb_audio_set_feature+0x26>
				if (setup.bRequest==0x01) { // SET_CUR
    cfb2:	cmp	r3, #2
    cfb4:	bne.n	cfa6 <usb_audio_set_feature+0x6>
    cfb6:	cmp	r2, #1
    cfb8:	bne.n	cfa6 <usb_audio_set_feature+0x6>
					AudioInputUSB::features.volume = buf[0];
    cfba:	ldr	r3, [pc, #28]	; (cfd8 <usb_audio_set_feature+0x38>)
					return 1;
    cfbc:	mov	r0, r2
					AudioInputUSB::features.volume = buf[0];
    cfbe:	ldrb	r1, [r1, #0]
					AudioInputUSB::features.change = 1;
    cfc0:	str	r2, [r3, #0]
					AudioInputUSB::features.volume = buf[0];
    cfc2:	str	r1, [r3, #8]
					return 1;
    cfc4:	bx	lr
				if (setup.bRequest==0x01) { // SET_CUR
    cfc6:	cmp	r2, #1
    cfc8:	bne.n	cfa6 <usb_audio_set_feature+0x6>
					AudioInputUSB::features.mute = buf[0]; // 1=mute,0=unmute
    cfca:	ldr	r3, [pc, #12]	; (cfd8 <usb_audio_set_feature+0x38>)
					return 1;
    cfcc:	mov	r0, r2
					AudioInputUSB::features.mute = buf[0]; // 1=mute,0=unmute
    cfce:	ldrb	r1, [r1, #0]
					AudioInputUSB::features.change = 1;
    cfd0:	strd	r2, r1, [r3]
					return 1;
    cfd4:	bx	lr
    cfd6:	nop
    cfd8:	.word	0x20001470

0000cfdc <Print::write(unsigned char const*, unsigned int)>:

#include "debug/printf.h"
#undef printf

size_t Print::write(const uint8_t *buffer, size_t size)
{
    cfdc:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (buffer == nullptr) return 0;
    cfe0:	mov	r4, r1
    cfe2:	cbz	r1, d01a <Print::write(unsigned char const*, unsigned int)+0x3e>
	size_t count = 0;
	while (size--) count += write(*buffer++);
    cfe4:	cbz	r2, d022 <Print::write(unsigned char const*, unsigned int)+0x46>
    cfe6:	mov	r8, r0
    cfe8:	adds	r6, r1, r2
	size_t count = 0;
    cfea:	movs	r5, #0
    cfec:	ldr	r7, [pc, #56]	; (d028 <Print::write(unsigned char const*, unsigned int)+0x4c>)
    cfee:	b.n	cffa <Print::write(unsigned char const*, unsigned int)+0x1e>
    cff0:	bl	a7f0 <usb_serial_putchar>
	while (size--) count += write(*buffer++);
    cff4:	cmp	r4, r6
    cff6:	add	r5, r0
    cff8:	beq.n	d014 <Print::write(unsigned char const*, unsigned int)+0x38>
    cffa:	ldr.w	r3, [r8]
    cffe:	ldrb.w	r0, [r4], #1
    d002:	ldr	r3, [r3, #0]
    d004:	cmp	r3, r7
    d006:	beq.n	cff0 <Print::write(unsigned char const*, unsigned int)+0x14>
    d008:	mov	r1, r0
    d00a:	mov	r0, r8
    d00c:	blx	r3
    d00e:	cmp	r4, r6
    d010:	add	r5, r0
    d012:	bne.n	cffa <Print::write(unsigned char const*, unsigned int)+0x1e>
	return count;
}
    d014:	mov	r0, r5
    d016:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (buffer == nullptr) return 0;
    d01a:	mov	r5, r1
}
    d01c:	mov	r0, r5
    d01e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (buffer == nullptr) return 0;
    d022:	mov	r5, r2
    d024:	b.n	d014 <Print::write(unsigned char const*, unsigned int)+0x38>
    d026:	nop
    d028:	.word	0x0000c399

0000d02c <Print::println()>:
	if (n < 0) return printNumber64(-n, 10, 1);
	return printNumber64(n, 10, 0);
}

size_t Print::println(void)
{
    d02c:	push	{lr}
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    d02e:	ldr	r3, [r0, #0]
{
    d030:	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
    d032:	movw	ip, #2573	; 0xa0d
	return write(buf, 2);
    d036:	movs	r2, #2
    d038:	add	r1, sp, #4
    d03a:	ldr	r3, [r3, #4]
	uint8_t buf[2]={'\r', '\n'};
    d03c:	strh.w	ip, [sp, #4]
	return write(buf, 2);
    d040:	blx	r3
}
    d042:	add	sp, #12
    d044:	ldr.w	pc, [sp], #4

0000d048 <_write>:

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
	((class Print *)file)->write((uint8_t *)ptr, len);
    d048:	ldr	r3, [r0, #0]
{
    d04a:	push	{r4, lr}
    d04c:	mov	r4, r2
	((class Print *)file)->write((uint8_t *)ptr, len);
    d04e:	ldr	r3, [r3, #4]
    d050:	blx	r3
	return len;
}
    d052:	mov	r0, r4
    d054:	pop	{r4, pc}
    d056:	nop

0000d058 <Print::printf(char const*, ...)>:
}

int Print::printf(const char *format, ...)
{
    d058:	push	{r1, r2, r3}
    d05a:	push	{lr}
    d05c:	sub	sp, #8
    d05e:	add	r2, sp, #12
    d060:	ldr.w	r1, [r2], #4
	va_list ap;
	va_start(ap, format);
    d064:	str	r2, [sp, #4]
#ifdef __STRICT_ANSI__
	va_end(ap);
	return 0;  // TODO: make this work with -std=c++0x
#else
	int retval = vdprintf((int)this, format, ap);
    d066:	bl	de6c <vdprintf>
	va_end(ap);
	return retval;
#endif
}
    d06a:	add	sp, #8
    d06c:	ldr.w	lr, [sp], #4
    d070:	add	sp, #12
    d072:	bx	lr

0000d074 <serialEvent()>:

#include <Arduino.h>
void serialEvent() __attribute__((weak));
void serialEvent() {
}
    d074:	bx	lr
    d076:	nop

0000d078 <operator new(unsigned int)>:

#include <stdlib.h>

void * operator new(size_t size)
{
	return malloc(size);
    d078:	b.w	d210 <malloc>

0000d07c <operator delete(void*, unsigned int)>:
	free(ptr);
}

void operator delete(void * ptr, size_t size)
{
	free(ptr);
    d07c:	b.w	d220 <free>

0000d080 <ultoa>:
	int i=0, j;
    d080:	add.w	ip, r1, #4294967295
{
    d084:	push	{r4, r5, r6, lr}
		digit = val % radix;
    d086:	mov	r6, ip
	int i=0, j;
    d088:	movs	r4, #0
    d08a:	b.n	d08e <ultoa+0xe>
		i++;
    d08c:	adds	r4, #1
		digit = val % radix;
    d08e:	udiv	r5, r0, r2
    d092:	mls	r3, r2, r5, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    d096:	cmp	r3, #9
    d098:	add.w	lr, r3, #55	; 0x37
    d09c:	add.w	r3, r3, #48	; 0x30
    d0a0:	uxtb.w	lr, lr
    d0a4:	it	ls
    d0a6:	uxtbls.w	lr, r3
		if (val == 0) break;
    d0aa:	cmp	r0, r2
		val /= radix;
    d0ac:	mov	r0, r5
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    d0ae:	strb.w	lr, [r6, #1]!
		if (val == 0) break;
    d0b2:	bcs.n	d08c <ultoa+0xc>
	buf[i + 1] = 0;
    d0b4:	adds	r3, r4, #1
    d0b6:	movs	r2, #0
    d0b8:	adds	r0, r1, r3
    d0ba:	strb	r2, [r1, r3]
	for (j=0; j < i; j++, i--) {
    d0bc:	cbz	r4, d0de <ultoa+0x5e>
		t = buf[j];
    d0be:	mov	r2, ip
    d0c0:	ldrb.w	r5, [ip, #1]!
		buf[j] = buf[i];
    d0c4:	ldrb.w	r6, [r0, #-1]!
	for (j=0; j < i; j++, i--) {
    d0c8:	sub.w	r3, r1, ip
    d0cc:	adds	r2, #2
		buf[j] = buf[i];
    d0ce:	strb.w	r6, [ip]
	for (j=0; j < i; j++, i--) {
    d0d2:	subs	r3, #1
    d0d4:	subs	r2, r2, r1
		buf[i] = t;
    d0d6:	strb	r5, [r0, #0]
	for (j=0; j < i; j++, i--) {
    d0d8:	add	r3, r4
    d0da:	cmp	r2, r3
    d0dc:	blt.n	d0be <ultoa+0x3e>
}
    d0de:	mov	r0, r1
    d0e0:	pop	{r4, r5, r6, pc}
    d0e2:	nop

0000d0e4 <pit_isr()>:

//FASTRUN
static void pit_isr()
{
    d0e4:	push	{r4, lr}

		}
	}
#else
	IMXRT_PIT_CHANNEL_t *channel= IMXRT_PIT_CHANNELS;
	if (funct_table[0] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[0]();}
    d0e6:	ldr	r4, [pc, #76]	; (d134 <pit_isr()+0x50>)
    d0e8:	ldr	r3, [r4, #0]
    d0ea:	cbz	r3, d0f2 <pit_isr()+0xe>
    d0ec:	ldr	r2, [pc, #72]	; (d138 <pit_isr()+0x54>)
    d0ee:	ldr	r1, [r2, #12]
    d0f0:	cbnz	r1, d12c <pit_isr()+0x48>
	channel++;
	if (funct_table[1] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[1]();}
    d0f2:	ldr	r3, [r4, #4]
    d0f4:	cbz	r3, d0fc <pit_isr()+0x18>
    d0f6:	ldr	r2, [pc, #64]	; (d138 <pit_isr()+0x54>)
    d0f8:	ldr	r1, [r2, #28]
    d0fa:	cbnz	r1, d124 <pit_isr()+0x40>
	channel++;
	if (funct_table[2] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[2]();}
    d0fc:	ldr	r3, [r4, #8]
    d0fe:	cbz	r3, d106 <pit_isr()+0x22>
    d100:	ldr	r2, [pc, #52]	; (d138 <pit_isr()+0x54>)
    d102:	ldr	r1, [r2, #44]	; 0x2c
    d104:	cbnz	r1, d11c <pit_isr()+0x38>
	channel++;
	if (funct_table[3] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[3]();}
    d106:	ldr	r3, [r4, #12]
    d108:	cbz	r3, d11a <pit_isr()+0x36>
    d10a:	ldr	r2, [pc, #44]	; (d138 <pit_isr()+0x54>)
    d10c:	ldr	r1, [r2, #60]	; 0x3c
    d10e:	cbz	r1, d11a <pit_isr()+0x36>
    d110:	movs	r1, #1
#endif
}
    d112:	ldmia.w	sp!, {r4, lr}
	if (funct_table[3] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[3]();}
    d116:	str	r1, [r2, #60]	; 0x3c
    d118:	bx	r3
}
    d11a:	pop	{r4, pc}
	if (funct_table[2] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[2]();}
    d11c:	movs	r1, #1
    d11e:	str	r1, [r2, #44]	; 0x2c
    d120:	blx	r3
    d122:	b.n	d106 <pit_isr()+0x22>
	if (funct_table[1] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[1]();}
    d124:	movs	r1, #1
    d126:	str	r1, [r2, #28]
    d128:	blx	r3
    d12a:	b.n	d0fc <pit_isr()+0x18>
	if (funct_table[0] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[0]();}
    d12c:	movs	r1, #1
    d12e:	str	r1, [r2, #12]
    d130:	blx	r3
    d132:	b.n	d0f2 <pit_isr()+0xe>
    d134:	.word	0x20001ec0
    d138:	.word	0x40084100

0000d13c <IntervalTimer::beginCycles(void (*)(), unsigned long)>:
	if (channel) {
    d13c:	ldr	r3, [r0, #0]
{
    d13e:	mov	ip, r0
    d140:	push	{r4}
	if (channel) {
    d142:	cbz	r3, d1a2 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0x66>
		channel->TCTRL = 0;
    d144:	movs	r0, #0
    d146:	str	r0, [r3, #8]
		channel->TFLG = 1;
    d148:	movs	r0, #1
    d14a:	str	r0, [r3, #12]
	channel->LDVAL = cycles;
    d14c:	str	r2, [r3, #0]
	int index = channel - IMXRT_PIT_CHANNELS;
    d14e:	ldr	r2, [pc, #140]	; (d1dc <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xa0>)
	funct_table[index] = funct;
    d150:	ldr	r0, [pc, #140]	; (d1e0 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xa4>)
	int index = channel - IMXRT_PIT_CHANNELS;
    d152:	add	r2, r3
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
    d154:	ldr	r4, [pc, #140]	; (d1e4 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xa8>)
    d156:	asrs	r2, r2, #4
	funct_table[index] = funct;
    d158:	str.w	r1, [r0, r2, lsl #2]
	channel->TCTRL = 3;
    d15c:	movs	r0, #3
	nvic_priorites[index] = nvic_priority;
    d15e:	ldr	r1, [pc, #136]	; (d1e8 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xac>)
	channel->TCTRL = 3;
    d160:	str	r0, [r3, #8]
	nvic_priorites[index] = nvic_priority;
    d162:	ldrb.w	r3, [ip, #4]
    d166:	ldr	r0, [pc, #132]	; (d1ec <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xb0>)
    d168:	strb	r3, [r1, r2]
		if (top_priority > nvic_priorites[i]) top_priority = nvic_priorites[i];
    d16a:	ldrb	r3, [r1, #0]
    d16c:	ldrb	r2, [r1, #1]
    d16e:	str.w	r4, [r0, #552]	; 0x228
    d172:	cmp	r3, r2
    d174:	ldrb	r0, [r1, #2]
    d176:	it	cs
    d178:	movcs	r3, r2
    d17a:	ldrb	r2, [r1, #3]
    d17c:	cmp	r3, r0
    d17e:	it	cs
    d180:	movcs	r3, r0
    d182:	cmp	r3, r2
    d184:	it	cs
    d186:	movcs	r3, r2
	NVIC_SET_PRIORITY(IRQ_PIT, top_priority);
    d188:	ldr	r4, [pc, #100]	; (d1f0 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xb4>)
	NVIC_ENABLE_IRQ(IRQ_PIT);
    d18a:	mov.w	r2, #3758153728	; 0xe000e000
    d18e:	mov.w	r1, #67108864	; 0x4000000
	return true;
    d192:	movs	r0, #1
	NVIC_SET_PRIORITY(IRQ_PIT, top_priority);
    d194:	strb.w	r3, [r4, #122]	; 0x7a
}
    d198:	ldr.w	r4, [sp], #4
	NVIC_ENABLE_IRQ(IRQ_PIT);
    d19c:	str.w	r1, [r2, #268]	; 0x10c
}
    d1a0:	bx	lr
		CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    d1a2:	ldr	r0, [pc, #80]	; (d1f4 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xb8>)
			if (++channel >= IMXRT_PIT_CHANNELS + NUM_CHANNELS) {
    d1a4:	ldr	r4, [pc, #80]	; (d1f8 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xbc>)
		CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    d1a6:	ldr	r3, [r0, #108]	; 0x6c
    d1a8:	orr.w	r3, r3, #12288	; 0x3000
    d1ac:	str	r3, [r0, #108]	; 0x6c
		PIT_MCR = 1;
    d1ae:	movs	r0, #1
    d1b0:	ldr	r3, [pc, #72]	; (d1fc <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xc0>)
    d1b2:	str	r0, [r3, #0]
		channel = IMXRT_PIT_CHANNELS;
    d1b4:	ldr	r0, [pc, #72]	; (d200 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xc4>)
    d1b6:	mov	r3, r0
    d1b8:	str.w	r0, [ip]
			if (channel->TCTRL == 0) break;
    d1bc:	ldr	r0, [r3, #8]
    d1be:	cmp	r0, #0
    d1c0:	beq.n	d14c <IntervalTimer::beginCycles(void (*)(), unsigned long)+0x10>
			if (++channel >= IMXRT_PIT_CHANNELS + NUM_CHANNELS) {
    d1c2:	adds	r3, #16
    d1c4:	cmp	r3, r4
    d1c6:	str.w	r3, [ip]
    d1ca:	bne.n	d1bc <IntervalTimer::beginCycles(void (*)(), unsigned long)+0x80>
				channel = NULL;
    d1cc:	movs	r3, #0
}
    d1ce:	ldr.w	r4, [sp], #4
				return false;
    d1d2:	mov	r0, r3
				channel = NULL;
    d1d4:	str.w	r3, [ip]
}
    d1d8:	bx	lr
    d1da:	nop
    d1dc:	.word	0xbff7bf00
    d1e0:	.word	0x20001ec0
    d1e4:	.word	0x0000d0e5
    d1e8:	.word	0x2000147c
    d1ec:	.word	0x20001c00
    d1f0:	.word	0xe000e400
    d1f4:	.word	0x400fc000
    d1f8:	.word	0x40084140
    d1fc:	.word	0x40084000
    d200:	.word	0x40084100

0000d204 <__aeabi_atexit>:
    d204:	mov	r3, r0
    d206:	mov	r0, r1
    d208:	mov	r1, r3
    d20a:	b.w	db80 <__cxa_atexit>
    d20e:	nop

0000d210 <malloc>:
    d210:	ldr	r3, [pc, #8]	; (d21c <malloc+0xc>)
    d212:	mov	r1, r0
    d214:	ldr	r0, [r3, #0]
    d216:	b.w	d230 <_malloc_r>
    d21a:	nop
    d21c:	.word	0x20001a1c

0000d220 <free>:
    d220:	ldr	r3, [pc, #8]	; (d22c <free+0xc>)
    d222:	mov	r1, r0
    d224:	ldr	r0, [r3, #0]
    d226:	b.w	e5c4 <_free_r>
    d22a:	nop
    d22c:	.word	0x20001a1c

0000d230 <_malloc_r>:
    d230:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d234:	add.w	r6, r1, #11
    d238:	cmp	r6, #22
    d23a:	sub	sp, #12
    d23c:	mov	r4, r0
    d23e:	bhi.n	d28a <_malloc_r+0x5a>
    d240:	cmp	r1, #16
    d242:	bhi.w	d3ba <_malloc_r+0x18a>
    d246:	bl	d790 <__malloc_lock>
    d24a:	movs	r6, #16
    d24c:	movs	r2, #24
    d24e:	movs	r0, #2
    d250:	ldr	r7, [pc, #724]	; (d528 <_malloc_r+0x2f8>)
    d252:	add	r2, r7
    d254:	sub.w	r1, r2, #8
    d258:	ldr	r3, [r2, #4]
    d25a:	cmp	r3, r1
    d25c:	beq.w	d3d4 <_malloc_r+0x1a4>
    d260:	ldr	r2, [r3, #4]
    d262:	ldr	r1, [r3, #12]
    d264:	bic.w	r2, r2, #3
    d268:	add	r2, r3
    d26a:	ldr	r5, [r3, #8]
    d26c:	str	r1, [r5, #12]
    d26e:	str	r5, [r1, #8]
    d270:	ldr	r1, [r2, #4]
    d272:	orr.w	r1, r1, #1
    d276:	mov	r0, r4
    d278:	str	r1, [r2, #4]
    d27a:	add.w	r5, r3, #8
    d27e:	bl	d79c <__malloc_unlock>
    d282:	mov	r0, r5
    d284:	add	sp, #12
    d286:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d28a:	bics.w	r6, r6, #7
    d28e:	bmi.w	d3ba <_malloc_r+0x18a>
    d292:	cmp	r1, r6
    d294:	bhi.w	d3ba <_malloc_r+0x18a>
    d298:	bl	d790 <__malloc_lock>
    d29c:	cmp.w	r6, #504	; 0x1f8
    d2a0:	bcc.w	d5d8 <_malloc_r+0x3a8>
    d2a4:	lsrs	r3, r6, #9
    d2a6:	beq.w	d3c8 <_malloc_r+0x198>
    d2aa:	cmp	r3, #4
    d2ac:	bhi.w	d58e <_malloc_r+0x35e>
    d2b0:	lsrs	r3, r6, #6
    d2b2:	add.w	r0, r3, #57	; 0x39
    d2b6:	add.w	ip, r3, #56	; 0x38
    d2ba:	lsls	r3, r0, #3
    d2bc:	ldr	r7, [pc, #616]	; (d528 <_malloc_r+0x2f8>)
    d2be:	add	r3, r7
    d2c0:	sub.w	r5, r3, #8
    d2c4:	ldr	r3, [r3, #4]
    d2c6:	cmp	r5, r3
    d2c8:	bne.n	d2d8 <_malloc_r+0xa8>
    d2ca:	b.n	d2e6 <_malloc_r+0xb6>
    d2cc:	cmp	r1, #0
    d2ce:	bge.w	d520 <_malloc_r+0x2f0>
    d2d2:	ldr	r3, [r3, #12]
    d2d4:	cmp	r5, r3
    d2d6:	beq.n	d2e6 <_malloc_r+0xb6>
    d2d8:	ldr	r2, [r3, #4]
    d2da:	bic.w	r2, r2, #3
    d2de:	subs	r1, r2, r6
    d2e0:	cmp	r1, #15
    d2e2:	ble.n	d2cc <_malloc_r+0x9c>
    d2e4:	mov	r0, ip
    d2e6:	ldr	r5, [r7, #16]
    d2e8:	ldr.w	ip, [pc, #592]	; d53c <_malloc_r+0x30c>
    d2ec:	cmp	r5, ip
    d2ee:	beq.n	d3ea <_malloc_r+0x1ba>
    d2f0:	ldr	r2, [r5, #4]
    d2f2:	bic.w	r2, r2, #3
    d2f6:	subs	r3, r2, r6
    d2f8:	cmp	r3, #15
    d2fa:	bgt.w	d5f4 <_malloc_r+0x3c4>
    d2fe:	cmp	r3, #0
    d300:	strd	ip, ip, [r7, #16]
    d304:	bge.w	d5e0 <_malloc_r+0x3b0>
    d308:	cmp.w	r2, #512	; 0x200
    d30c:	bcs.w	d544 <_malloc_r+0x314>
    d310:	lsrs	r3, r2, #3
    d312:	ldr	r1, [r7, #4]
    d314:	adds	r3, #1
    d316:	mov.w	lr, r2, lsr #5
    d31a:	movs	r2, #1
    d31c:	lsl.w	r2, r2, lr
    d320:	orrs	r2, r1
    d322:	ldr.w	lr, [r7, r3, lsl #3]
    d326:	str.w	lr, [r5, #8]
    d32a:	add.w	r1, r7, r3, lsl #3
    d32e:	subs	r1, #8
    d330:	str	r1, [r5, #12]
    d332:	str	r2, [r7, #4]
    d334:	str.w	r5, [r7, r3, lsl #3]
    d338:	str.w	r5, [lr, #12]
    d33c:	asrs	r3, r0, #2
    d33e:	movs	r1, #1
    d340:	lsls	r1, r3
    d342:	cmp	r1, r2
    d344:	bhi.n	d3f6 <_malloc_r+0x1c6>
    d346:	tst	r1, r2
    d348:	bne.n	d358 <_malloc_r+0x128>
    d34a:	bic.w	r0, r0, #3
    d34e:	lsls	r1, r1, #1
    d350:	tst	r1, r2
    d352:	add.w	r0, r0, #4
    d356:	beq.n	d34e <_malloc_r+0x11e>
    d358:	add.w	r9, r7, r0, lsl #3
    d35c:	mov	r5, r9
    d35e:	mov	lr, r0
    d360:	ldr.w	r8, [r5, #12]
    d364:	cmp	r5, r8
    d366:	bne.n	d37a <_malloc_r+0x14a>
    d368:	b.n	d5a6 <_malloc_r+0x376>
    d36a:	cmp	r3, #0
    d36c:	bge.w	d5b8 <_malloc_r+0x388>
    d370:	ldr.w	r8, [r8, #12]
    d374:	cmp	r5, r8
    d376:	beq.w	d5a6 <_malloc_r+0x376>
    d37a:	ldr.w	r2, [r8, #4]
    d37e:	bic.w	r2, r2, #3
    d382:	subs	r3, r2, r6
    d384:	cmp	r3, #15
    d386:	ble.n	d36a <_malloc_r+0x13a>
    d388:	mov	r0, r4
    d38a:	ldrd	r5, r4, [r8, #8]
    d38e:	add.w	r1, r8, r6
    d392:	orr.w	r6, r6, #1
    d396:	str.w	r6, [r8, #4]
    d39a:	str	r4, [r5, #12]
    d39c:	str	r5, [r4, #8]
    d39e:	orr.w	r4, r3, #1
    d3a2:	strd	r1, r1, [r7, #16]
    d3a6:	strd	ip, ip, [r1, #8]
    d3aa:	str	r4, [r1, #4]
    d3ac:	str.w	r3, [r8, r2]
    d3b0:	bl	d79c <__malloc_unlock>
    d3b4:	add.w	r5, r8, #8
    d3b8:	b.n	d3c0 <_malloc_r+0x190>
    d3ba:	movs	r3, #12
    d3bc:	str	r3, [r4, #0]
    d3be:	movs	r5, #0
    d3c0:	mov	r0, r5
    d3c2:	add	sp, #12
    d3c4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d3c8:	mov.w	r3, #512	; 0x200
    d3cc:	movs	r0, #64	; 0x40
    d3ce:	mov.w	ip, #63	; 0x3f
    d3d2:	b.n	d2bc <_malloc_r+0x8c>
    d3d4:	ldr	r3, [r2, #12]
    d3d6:	cmp	r2, r3
    d3d8:	it	eq
    d3da:	addeq	r0, #2
    d3dc:	bne.w	d260 <_malloc_r+0x30>
    d3e0:	ldr	r5, [r7, #16]
    d3e2:	ldr.w	ip, [pc, #344]	; d53c <_malloc_r+0x30c>
    d3e6:	cmp	r5, ip
    d3e8:	bne.n	d2f0 <_malloc_r+0xc0>
    d3ea:	ldr	r2, [r7, #4]
    d3ec:	asrs	r3, r0, #2
    d3ee:	movs	r1, #1
    d3f0:	lsls	r1, r3
    d3f2:	cmp	r1, r2
    d3f4:	bls.n	d346 <_malloc_r+0x116>
    d3f6:	ldr	r5, [r7, #8]
    d3f8:	ldr	r3, [r5, #4]
    d3fa:	bic.w	r9, r3, #3
    d3fe:	cmp	r6, r9
    d400:	bhi.n	d40a <_malloc_r+0x1da>
    d402:	sub.w	r3, r9, r6
    d406:	cmp	r3, #15
    d408:	bgt.n	d500 <_malloc_r+0x2d0>
    d40a:	ldr.w	fp, [pc, #308]	; d540 <_malloc_r+0x310>
    d40e:	ldr	r3, [pc, #284]	; (d52c <_malloc_r+0x2fc>)
    d410:	ldr.w	r2, [fp]
    d414:	ldr	r3, [r3, #0]
    d416:	adds	r2, #1
    d418:	add	r3, r6
    d41a:	add.w	sl, r5, r9
    d41e:	beq.w	d688 <_malloc_r+0x458>
    d422:	add.w	r3, r3, #4096	; 0x1000
    d426:	adds	r3, #15
    d428:	bic.w	r8, r3, #4080	; 0xff0
    d42c:	bic.w	r8, r8, #15
    d430:	mov	r1, r8
    d432:	mov	r0, r4
    d434:	bl	e260 <_sbrk_r>
    d438:	adds	r1, r0, #1
    d43a:	mov	r2, r0
    d43c:	beq.w	d626 <_malloc_r+0x3f6>
    d440:	cmp	sl, r0
    d442:	bhi.w	d622 <_malloc_r+0x3f2>
    d446:	ldr	r3, [pc, #232]	; (d530 <_malloc_r+0x300>)
    d448:	ldr	r1, [r3, #0]
    d44a:	add	r1, r8
    d44c:	str	r1, [r3, #0]
    d44e:	mov	r0, r1
    d450:	beq.w	d6f0 <_malloc_r+0x4c0>
    d454:	ldr.w	r1, [fp]
    d458:	str	r3, [sp, #4]
    d45a:	adds	r1, #1
    d45c:	ittet	ne
    d45e:	subne.w	r1, r2, sl
    d462:	addne	r1, r1, r0
    d464:	streq.w	r2, [fp]
    d468:	strne	r1, [r3, #0]
    d46a:	ands.w	fp, r2, #7
    d46e:	beq.w	d6a0 <_malloc_r+0x470>
    d472:	rsb	r1, fp, #8
    d476:	add	r2, r1
    d478:	rsb	r1, fp, #4096	; 0x1000
    d47c:	add	r8, r2
    d47e:	adds	r1, #8
    d480:	sub.w	r1, r1, r8
    d484:	ubfx	sl, r1, #0, #12
    d488:	mov	r1, sl
    d48a:	mov	r0, r4
    d48c:	str	r2, [sp, #0]
    d48e:	bl	e260 <_sbrk_r>
    d492:	adds	r2, r0, #1
    d494:	ldrd	r2, r3, [sp]
    d498:	beq.w	d73a <_malloc_r+0x50a>
    d49c:	subs	r0, r0, r2
    d49e:	add.w	r8, r0, sl
    d4a2:	ldr	r1, [r3, #0]
    d4a4:	str	r2, [r7, #8]
    d4a6:	orr.w	r0, r8, #1
    d4aa:	add	r1, sl
    d4ac:	cmp	r5, r7
    d4ae:	str	r0, [r2, #4]
    d4b0:	str	r1, [r3, #0]
    d4b2:	beq.w	d708 <_malloc_r+0x4d8>
    d4b6:	cmp.w	r9, #15
    d4ba:	bls.w	d70c <_malloc_r+0x4dc>
    d4be:	ldr	r0, [r5, #4]
    d4c0:	sub.w	ip, r9, #12
    d4c4:	bic.w	ip, ip, #7
    d4c8:	and.w	r0, r0, #1
    d4cc:	orr.w	r0, r0, ip
    d4d0:	str	r0, [r5, #4]
    d4d2:	mov.w	lr, #5
    d4d6:	add.w	r0, r5, ip
    d4da:	cmp.w	ip, #15
    d4de:	strd	lr, lr, [r0, #4]
    d4e2:	bhi.w	d74a <_malloc_r+0x51a>
    d4e6:	ldr	r0, [r2, #4]
    d4e8:	mov	r5, r2
    d4ea:	ldr	r3, [pc, #72]	; (d534 <_malloc_r+0x304>)
    d4ec:	ldr	r2, [r3, #0]
    d4ee:	cmp	r2, r1
    d4f0:	it	cc
    d4f2:	strcc	r1, [r3, #0]
    d4f4:	ldr	r3, [pc, #64]	; (d538 <_malloc_r+0x308>)
    d4f6:	ldr	r2, [r3, #0]
    d4f8:	cmp	r2, r1
    d4fa:	it	cc
    d4fc:	strcc	r1, [r3, #0]
    d4fe:	b.n	d62a <_malloc_r+0x3fa>
    d500:	adds	r2, r5, r6
    d502:	orr.w	r3, r3, #1
    d506:	orr.w	r6, r6, #1
    d50a:	str	r6, [r5, #4]
    d50c:	mov	r0, r4
    d50e:	str	r2, [r7, #8]
    d510:	str	r3, [r2, #4]
    d512:	bl	d79c <__malloc_unlock>
    d516:	adds	r5, #8
    d518:	mov	r0, r5
    d51a:	add	sp, #12
    d51c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d520:	ldr	r1, [r3, #12]
    d522:	add	r2, r3
    d524:	b.n	d26a <_malloc_r+0x3a>
    d526:	nop
    d528:	.word	0x20001600
    d52c:	.word	0x200067a8
    d530:	.word	0x20006778
    d534:	.word	0x200067a0
    d538:	.word	0x200067a4
    d53c:	.word	0x20001608
    d540:	.word	0x20001a08
    d544:	cmp.w	r2, #2560	; 0xa00
    d548:	mov.w	r3, r2, lsr #9
    d54c:	bcc.n	d616 <_malloc_r+0x3e6>
    d54e:	cmp	r3, #20
    d550:	bhi.w	d6c2 <_malloc_r+0x492>
    d554:	add.w	r1, r3, #92	; 0x5c
    d558:	lsls	r1, r1, #3
    d55a:	adds	r3, #91	; 0x5b
    d55c:	add.w	lr, r7, r1
    d560:	ldr	r1, [r7, r1]
    d562:	sub.w	lr, lr, #8
    d566:	cmp	lr, r1
    d568:	beq.w	d68e <_malloc_r+0x45e>
    d56c:	ldr	r3, [r1, #4]
    d56e:	bic.w	r3, r3, #3
    d572:	cmp	r3, r2
    d574:	bls.n	d57c <_malloc_r+0x34c>
    d576:	ldr	r1, [r1, #8]
    d578:	cmp	lr, r1
    d57a:	bne.n	d56c <_malloc_r+0x33c>
    d57c:	ldr.w	lr, [r1, #12]
    d580:	ldr	r2, [r7, #4]
    d582:	strd	r1, lr, [r5, #8]
    d586:	str.w	r5, [lr, #8]
    d58a:	str	r5, [r1, #12]
    d58c:	b.n	d33c <_malloc_r+0x10c>
    d58e:	cmp	r3, #20
    d590:	bls.n	d646 <_malloc_r+0x416>
    d592:	cmp	r3, #84	; 0x54
    d594:	bhi.w	d6d2 <_malloc_r+0x4a2>
    d598:	lsrs	r3, r6, #12
    d59a:	add.w	r0, r3, #111	; 0x6f
    d59e:	add.w	ip, r3, #110	; 0x6e
    d5a2:	lsls	r3, r0, #3
    d5a4:	b.n	d2bc <_malloc_r+0x8c>
    d5a6:	add.w	lr, lr, #1
    d5aa:	tst.w	lr, #3
    d5ae:	add.w	r5, r5, #8
    d5b2:	bne.w	d360 <_malloc_r+0x130>
    d5b6:	b.n	d65c <_malloc_r+0x42c>
    d5b8:	add	r2, r8
    d5ba:	mov	r5, r8
    d5bc:	ldr	r3, [r2, #4]
    d5be:	ldr.w	r1, [r8, #12]
    d5c2:	orr.w	r3, r3, #1
    d5c6:	str	r3, [r2, #4]
    d5c8:	ldr.w	r3, [r5, #8]!
    d5cc:	mov	r0, r4
    d5ce:	str	r1, [r3, #12]
    d5d0:	str	r3, [r1, #8]
    d5d2:	bl	d79c <__malloc_unlock>
    d5d6:	b.n	d3c0 <_malloc_r+0x190>
    d5d8:	lsrs	r0, r6, #3
    d5da:	add.w	r2, r6, #8
    d5de:	b.n	d250 <_malloc_r+0x20>
    d5e0:	add	r2, r5
    d5e2:	mov	r0, r4
    d5e4:	ldr	r3, [r2, #4]
    d5e6:	orr.w	r3, r3, #1
    d5ea:	str	r3, [r2, #4]
    d5ec:	adds	r5, #8
    d5ee:	bl	d79c <__malloc_unlock>
    d5f2:	b.n	d3c0 <_malloc_r+0x190>
    d5f4:	adds	r1, r5, r6
    d5f6:	mov	r0, r4
    d5f8:	orr.w	r6, r6, #1
    d5fc:	orr.w	r4, r3, #1
    d600:	str	r6, [r5, #4]
    d602:	strd	r1, r1, [r7, #16]
    d606:	strd	ip, ip, [r1, #8]
    d60a:	str	r4, [r1, #4]
    d60c:	str	r3, [r5, r2]
    d60e:	bl	d79c <__malloc_unlock>
    d612:	adds	r5, #8
    d614:	b.n	d3c0 <_malloc_r+0x190>
    d616:	lsrs	r3, r2, #6
    d618:	add.w	r1, r3, #57	; 0x39
    d61c:	lsls	r1, r1, #3
    d61e:	adds	r3, #56	; 0x38
    d620:	b.n	d55c <_malloc_r+0x32c>
    d622:	cmp	r5, r7
    d624:	beq.n	d6e6 <_malloc_r+0x4b6>
    d626:	ldr	r5, [r7, #8]
    d628:	ldr	r0, [r5, #4]
    d62a:	bic.w	r8, r0, #3
    d62e:	cmp	r6, r8
    d630:	sub.w	r3, r8, r6
    d634:	bhi.n	d63c <_malloc_r+0x40c>
    d636:	cmp	r3, #15
    d638:	bgt.w	d500 <_malloc_r+0x2d0>
    d63c:	mov	r0, r4
    d63e:	bl	d79c <__malloc_unlock>
    d642:	movs	r5, #0
    d644:	b.n	d3c0 <_malloc_r+0x190>
    d646:	add.w	r0, r3, #92	; 0x5c
    d64a:	add.w	ip, r3, #91	; 0x5b
    d64e:	lsls	r3, r0, #3
    d650:	b.n	d2bc <_malloc_r+0x8c>
    d652:	ldr.w	r3, [r9], #-8
    d656:	cmp	r3, r9
    d658:	bne.w	d788 <_malloc_r+0x558>
    d65c:	tst.w	r0, #3
    d660:	add.w	r0, r0, #4294967295
    d664:	bne.n	d652 <_malloc_r+0x422>
    d666:	ldr	r3, [r7, #4]
    d668:	bic.w	r3, r3, r1
    d66c:	str	r3, [r7, #4]
    d66e:	lsls	r1, r1, #1
    d670:	cmp	r1, r3
    d672:	bhi.w	d3f6 <_malloc_r+0x1c6>
    d676:	cbnz	r1, d680 <_malloc_r+0x450>
    d678:	b.n	d3f6 <_malloc_r+0x1c6>
    d67a:	lsls	r1, r1, #1
    d67c:	add.w	lr, lr, #4
    d680:	tst	r1, r3
    d682:	beq.n	d67a <_malloc_r+0x44a>
    d684:	mov	r0, lr
    d686:	b.n	d358 <_malloc_r+0x128>
    d688:	add.w	r8, r3, #16
    d68c:	b.n	d430 <_malloc_r+0x200>
    d68e:	asrs	r2, r3, #2
    d690:	mov.w	r8, #1
    d694:	ldr	r3, [r7, #4]
    d696:	lsl.w	r2, r8, r2
    d69a:	orrs	r2, r3
    d69c:	str	r2, [r7, #4]
    d69e:	b.n	d582 <_malloc_r+0x352>
    d6a0:	add.w	r1, r2, r8
    d6a4:	negs	r1, r1
    d6a6:	ubfx	sl, r1, #0, #12
    d6aa:	mov	r1, sl
    d6ac:	mov	r0, r4
    d6ae:	str	r2, [sp, #0]
    d6b0:	bl	e260 <_sbrk_r>
    d6b4:	adds	r3, r0, #1
    d6b6:	ldrd	r2, r3, [sp]
    d6ba:	bne.w	d49c <_malloc_r+0x26c>
    d6be:	mov	sl, fp
    d6c0:	b.n	d4a2 <_malloc_r+0x272>
    d6c2:	cmp	r3, #84	; 0x54
    d6c4:	bhi.n	d712 <_malloc_r+0x4e2>
    d6c6:	lsrs	r3, r2, #12
    d6c8:	add.w	r1, r3, #111	; 0x6f
    d6cc:	lsls	r1, r1, #3
    d6ce:	adds	r3, #110	; 0x6e
    d6d0:	b.n	d55c <_malloc_r+0x32c>
    d6d2:	cmp.w	r3, #340	; 0x154
    d6d6:	bhi.n	d724 <_malloc_r+0x4f4>
    d6d8:	lsrs	r3, r6, #15
    d6da:	add.w	r0, r3, #120	; 0x78
    d6de:	add.w	ip, r3, #119	; 0x77
    d6e2:	lsls	r3, r0, #3
    d6e4:	b.n	d2bc <_malloc_r+0x8c>
    d6e6:	ldr	r3, [pc, #164]	; (d78c <_malloc_r+0x55c>)
    d6e8:	ldr	r0, [r3, #0]
    d6ea:	add	r0, r8
    d6ec:	str	r0, [r3, #0]
    d6ee:	b.n	d454 <_malloc_r+0x224>
    d6f0:	ubfx	ip, sl, #0, #12
    d6f4:	cmp.w	ip, #0
    d6f8:	bne.w	d454 <_malloc_r+0x224>
    d6fc:	ldr	r5, [r7, #8]
    d6fe:	add	r8, r9
    d700:	orr.w	r0, r8, #1
    d704:	str	r0, [r5, #4]
    d706:	b.n	d4ea <_malloc_r+0x2ba>
    d708:	mov	r5, r2
    d70a:	b.n	d4ea <_malloc_r+0x2ba>
    d70c:	movs	r3, #1
    d70e:	str	r3, [r2, #4]
    d710:	b.n	d63c <_malloc_r+0x40c>
    d712:	cmp.w	r3, #340	; 0x154
    d716:	bhi.n	d760 <_malloc_r+0x530>
    d718:	lsrs	r3, r2, #15
    d71a:	add.w	r1, r3, #120	; 0x78
    d71e:	lsls	r1, r1, #3
    d720:	adds	r3, #119	; 0x77
    d722:	b.n	d55c <_malloc_r+0x32c>
    d724:	movw	r2, #1364	; 0x554
    d728:	cmp	r3, r2
    d72a:	bhi.n	d774 <_malloc_r+0x544>
    d72c:	lsrs	r3, r6, #18
    d72e:	add.w	r0, r3, #125	; 0x7d
    d732:	add.w	ip, r3, #124	; 0x7c
    d736:	lsls	r3, r0, #3
    d738:	b.n	d2bc <_malloc_r+0x8c>
    d73a:	sub.w	fp, fp, #8
    d73e:	add	r8, fp
    d740:	sub.w	r8, r8, r2
    d744:	mov.w	sl, #0
    d748:	b.n	d4a2 <_malloc_r+0x272>
    d74a:	add.w	r1, r5, #8
    d74e:	mov	r0, r4
    d750:	str	r3, [sp, #0]
    d752:	bl	e5c4 <_free_r>
    d756:	ldr	r5, [r7, #8]
    d758:	ldr	r3, [sp, #0]
    d75a:	ldr	r0, [r5, #4]
    d75c:	ldr	r1, [r3, #0]
    d75e:	b.n	d4ea <_malloc_r+0x2ba>
    d760:	movw	r1, #1364	; 0x554
    d764:	cmp	r3, r1
    d766:	bhi.n	d780 <_malloc_r+0x550>
    d768:	lsrs	r3, r2, #18
    d76a:	add.w	r1, r3, #125	; 0x7d
    d76e:	lsls	r1, r1, #3
    d770:	adds	r3, #124	; 0x7c
    d772:	b.n	d55c <_malloc_r+0x32c>
    d774:	mov.w	r3, #1016	; 0x3f8
    d778:	movs	r0, #127	; 0x7f
    d77a:	mov.w	ip, #126	; 0x7e
    d77e:	b.n	d2bc <_malloc_r+0x8c>
    d780:	mov.w	r1, #1016	; 0x3f8
    d784:	movs	r3, #126	; 0x7e
    d786:	b.n	d55c <_malloc_r+0x32c>
    d788:	ldr	r3, [r7, #4]
    d78a:	b.n	d66e <_malloc_r+0x43e>
    d78c:	.word	0x20006778

0000d790 <__malloc_lock>:
    d790:	ldr	r0, [pc, #4]	; (d798 <__malloc_lock+0x8>)
    d792:	b.w	e30c <__retarget_lock_acquire_recursive>
    d796:	nop
    d798:	.word	0x20006770

0000d79c <__malloc_unlock>:
    d79c:	ldr	r0, [pc, #4]	; (d7a4 <__malloc_unlock+0x8>)
    d79e:	b.w	e310 <__retarget_lock_release_recursive>
    d7a2:	nop
    d7a4:	.word	0x20006770

0000d7a8 <_realloc_r>:
    d7a8:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d7ac:	mov	r7, r2
    d7ae:	cmp	r1, #0
    d7b0:	beq.w	d8e4 <_realloc_r+0x13c>
    d7b4:	mov	r4, r1
    d7b6:	add.w	r5, r7, #11
    d7ba:	mov	r8, r0
    d7bc:	bl	d790 <__malloc_lock>
    d7c0:	cmp	r5, #22
    d7c2:	ldr.w	r1, [r4, #-4]
    d7c6:	bhi.n	d880 <_realloc_r+0xd8>
    d7c8:	movs	r5, #16
    d7ca:	mov	r2, r5
    d7cc:	cmp	r7, r5
    d7ce:	bhi.n	d88a <_realloc_r+0xe2>
    d7d0:	bic.w	r6, r1, #3
    d7d4:	cmp	r6, r2
    d7d6:	sub.w	r9, r4, #8
    d7da:	bge.n	d8a2 <_realloc_r+0xfa>
    d7dc:	ldr	r3, [pc, #752]	; (dad0 <_realloc_r+0x328>)
    d7de:	ldr.w	ip, [r3, #8]
    d7e2:	add.w	r0, r9, r6
    d7e6:	cmp	ip, r0
    d7e8:	beq.w	d91a <_realloc_r+0x172>
    d7ec:	ldr.w	ip, [r0, #4]
    d7f0:	bic.w	r3, ip, #1
    d7f4:	add	r3, r0
    d7f6:	ldr	r3, [r3, #4]
    d7f8:	lsls	r3, r3, #31
    d7fa:	bmi.n	d8ce <_realloc_r+0x126>
    d7fc:	bic.w	ip, ip, #3
    d800:	add.w	r3, r6, ip
    d804:	cmp	r3, r2
    d806:	bge.n	d898 <_realloc_r+0xf0>
    d808:	lsls	r3, r1, #31
    d80a:	bmi.n	d82e <_realloc_r+0x86>
    d80c:	ldr.w	r3, [r4, #-8]
    d810:	sub.w	sl, r9, r3
    d814:	ldr.w	r3, [sl, #4]
    d818:	bic.w	r1, r3, #3
    d81c:	add	ip, r1
    d81e:	add	ip, r6
    d820:	cmp	ip, r2
    d822:	bge.w	da48 <_realloc_r+0x2a0>
    d826:	adds	r3, r6, r1
    d828:	cmp	r3, r2
    d82a:	bge.w	d9fe <_realloc_r+0x256>
    d82e:	mov	r1, r7
    d830:	mov	r0, r8
    d832:	bl	d230 <_malloc_r>
    d836:	mov	r7, r0
    d838:	cbz	r0, d874 <_realloc_r+0xcc>
    d83a:	ldr.w	r3, [r4, #-4]
    d83e:	bic.w	r3, r3, #1
    d842:	add	r3, r9
    d844:	sub.w	r2, r0, #8
    d848:	cmp	r3, r2
    d84a:	beq.w	d9f2 <_realloc_r+0x24a>
    d84e:	subs	r2, r6, #4
    d850:	cmp	r2, #36	; 0x24
    d852:	bhi.w	da40 <_realloc_r+0x298>
    d856:	cmp	r2, #19
    d858:	bhi.w	d9b4 <_realloc_r+0x20c>
    d85c:	mov	r3, r0
    d85e:	mov	r2, r4
    d860:	ldr	r1, [r2, #0]
    d862:	str	r1, [r3, #0]
    d864:	ldr	r1, [r2, #4]
    d866:	str	r1, [r3, #4]
    d868:	ldr	r2, [r2, #8]
    d86a:	str	r2, [r3, #8]
    d86c:	mov	r1, r4
    d86e:	mov	r0, r8
    d870:	bl	e5c4 <_free_r>
    d874:	mov	r0, r8
    d876:	bl	d79c <__malloc_unlock>
    d87a:	mov	r0, r7
    d87c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d880:	bic.w	r5, r5, #7
    d884:	cmp	r5, #0
    d886:	mov	r2, r5
    d888:	bge.n	d7cc <_realloc_r+0x24>
    d88a:	movs	r3, #12
    d88c:	str.w	r3, [r8]
    d890:	movs	r7, #0
    d892:	mov	r0, r7
    d894:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d898:	mov	r6, r3
    d89a:	ldrd	r2, r3, [r0, #8]
    d89e:	str	r3, [r2, #12]
    d8a0:	str	r2, [r3, #8]
    d8a2:	subs	r3, r6, r5
    d8a4:	cmp	r3, #15
    d8a6:	bhi.n	d8ee <_realloc_r+0x146>
    d8a8:	ldr.w	r3, [r9, #4]
    d8ac:	and.w	r3, r3, #1
    d8b0:	orrs	r3, r6
    d8b2:	add	r6, r9
    d8b4:	str.w	r3, [r9, #4]
    d8b8:	ldr	r3, [r6, #4]
    d8ba:	orr.w	r3, r3, #1
    d8be:	str	r3, [r6, #4]
    d8c0:	mov	r0, r8
    d8c2:	mov	r7, r4
    d8c4:	bl	d79c <__malloc_unlock>
    d8c8:	mov	r0, r7
    d8ca:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d8ce:	lsls	r1, r1, #31
    d8d0:	bmi.n	d82e <_realloc_r+0x86>
    d8d2:	ldr.w	r3, [r4, #-8]
    d8d6:	sub.w	sl, r9, r3
    d8da:	ldr.w	r1, [sl, #4]
    d8de:	bic.w	r1, r1, #3
    d8e2:	b.n	d826 <_realloc_r+0x7e>
    d8e4:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d8e8:	mov	r1, r2
    d8ea:	b.w	d230 <_malloc_r>
    d8ee:	ldr.w	r2, [r9, #4]
    d8f2:	add.w	r1, r9, r5
    d8f6:	and.w	r2, r2, #1
    d8fa:	add	r6, r9
    d8fc:	orr.w	r3, r3, #1
    d900:	orrs	r2, r5
    d902:	str.w	r2, [r9, #4]
    d906:	str	r3, [r1, #4]
    d908:	ldr	r3, [r6, #4]
    d90a:	orr.w	r3, r3, #1
    d90e:	adds	r1, #8
    d910:	str	r3, [r6, #4]
    d912:	mov	r0, r8
    d914:	bl	e5c4 <_free_r>
    d918:	b.n	d8c0 <_realloc_r+0x118>
    d91a:	ldr.w	r0, [ip, #4]
    d91e:	bic.w	fp, r0, #3
    d922:	add.w	ip, r6, fp
    d926:	add.w	r0, r5, #16
    d92a:	cmp	ip, r0
    d92c:	bge.n	d9ca <_realloc_r+0x222>
    d92e:	lsls	r1, r1, #31
    d930:	bmi.w	d82e <_realloc_r+0x86>
    d934:	ldr.w	r1, [r4, #-8]
    d938:	sub.w	sl, r9, r1
    d93c:	ldr.w	r1, [sl, #4]
    d940:	bic.w	r1, r1, #3
    d944:	add	fp, r1
    d946:	add	fp, r6
    d948:	cmp	r0, fp
    d94a:	bgt.w	d826 <_realloc_r+0x7e>
    d94e:	mov	r7, sl
    d950:	ldr.w	r1, [sl, #12]
    d954:	ldr.w	r0, [r7, #8]!
    d958:	subs	r2, r6, #4
    d95a:	cmp	r2, #36	; 0x24
    d95c:	str	r1, [r0, #12]
    d95e:	str	r0, [r1, #8]
    d960:	bhi.w	db1a <_realloc_r+0x372>
    d964:	cmp	r2, #19
    d966:	bls.w	db16 <_realloc_r+0x36e>
    d96a:	ldr	r1, [r4, #0]
    d96c:	str.w	r1, [sl, #8]
    d970:	ldr	r1, [r4, #4]
    d972:	str.w	r1, [sl, #12]
    d976:	cmp	r2, #27
    d978:	bhi.w	db3a <_realloc_r+0x392>
    d97c:	adds	r4, #8
    d97e:	add.w	r2, sl, #16
    d982:	ldr	r1, [r4, #0]
    d984:	str	r1, [r2, #0]
    d986:	ldr	r1, [r4, #4]
    d988:	str	r1, [r2, #4]
    d98a:	ldr	r1, [r4, #8]
    d98c:	str	r1, [r2, #8]
    d98e:	add.w	r1, sl, r5
    d992:	sub.w	r2, fp, r5
    d996:	orr.w	r2, r2, #1
    d99a:	str	r1, [r3, #8]
    d99c:	str	r2, [r1, #4]
    d99e:	ldr.w	r3, [sl, #4]
    d9a2:	and.w	r3, r3, #1
    d9a6:	orrs	r3, r5
    d9a8:	mov	r0, r8
    d9aa:	str.w	r3, [sl, #4]
    d9ae:	bl	d79c <__malloc_unlock>
    d9b2:	b.n	d892 <_realloc_r+0xea>
    d9b4:	ldr	r3, [r4, #0]
    d9b6:	str	r3, [r0, #0]
    d9b8:	ldr	r3, [r4, #4]
    d9ba:	str	r3, [r0, #4]
    d9bc:	cmp	r2, #27
    d9be:	bhi.n	da92 <_realloc_r+0x2ea>
    d9c0:	add.w	r2, r4, #8
    d9c4:	add.w	r3, r0, #8
    d9c8:	b.n	d860 <_realloc_r+0xb8>
    d9ca:	add.w	r2, r9, r5
    d9ce:	str	r2, [r3, #8]
    d9d0:	sub.w	r3, ip, r5
    d9d4:	orr.w	r3, r3, #1
    d9d8:	str	r3, [r2, #4]
    d9da:	ldr.w	r3, [r4, #-4]
    d9de:	and.w	r3, r3, #1
    d9e2:	orrs	r3, r5
    d9e4:	mov	r0, r8
    d9e6:	str.w	r3, [r4, #-4]
    d9ea:	bl	d79c <__malloc_unlock>
    d9ee:	mov	r7, r4
    d9f0:	b.n	d892 <_realloc_r+0xea>
    d9f2:	ldr.w	r3, [r0, #-4]
    d9f6:	bic.w	r3, r3, #3
    d9fa:	add	r6, r3
    d9fc:	b.n	d8a2 <_realloc_r+0xfa>
    d9fe:	mov	r7, sl
    da00:	ldr.w	r1, [sl, #12]
    da04:	ldr.w	r0, [r7, #8]!
    da08:	subs	r2, r6, #4
    da0a:	cmp	r2, #36	; 0x24
    da0c:	str	r1, [r0, #12]
    da0e:	str	r0, [r1, #8]
    da10:	bhi.n	daac <_realloc_r+0x304>
    da12:	cmp	r2, #19
    da14:	bls.n	daa8 <_realloc_r+0x300>
    da16:	ldr	r1, [r4, #0]
    da18:	str.w	r1, [sl, #8]
    da1c:	ldr	r1, [r4, #4]
    da1e:	str.w	r1, [sl, #12]
    da22:	cmp	r2, #27
    da24:	bhi.n	dad4 <_realloc_r+0x32c>
    da26:	adds	r4, #8
    da28:	add.w	r2, sl, #16
    da2c:	mov	r6, r3
    da2e:	ldr	r3, [r4, #0]
    da30:	str	r3, [r2, #0]
    da32:	ldr	r3, [r4, #4]
    da34:	str	r3, [r2, #4]
    da36:	ldr	r3, [r4, #8]
    da38:	str	r3, [r2, #8]
    da3a:	mov	r9, sl
    da3c:	mov	r4, r7
    da3e:	b.n	d8a2 <_realloc_r+0xfa>
    da40:	mov	r1, r4
    da42:	bl	df4c <memmove>
    da46:	b.n	d86c <_realloc_r+0xc4>
    da48:	ldrd	r1, r3, [r0, #8]
    da4c:	mov	r7, sl
    da4e:	str	r3, [r1, #12]
    da50:	str	r1, [r3, #8]
    da52:	ldr.w	r1, [r7, #8]!
    da56:	ldr.w	r3, [sl, #12]
    da5a:	str	r3, [r1, #12]
    da5c:	subs	r2, r6, #4
    da5e:	cmp	r2, #36	; 0x24
    da60:	str	r1, [r3, #8]
    da62:	bhi.n	dac0 <_realloc_r+0x318>
    da64:	cmp	r2, #19
    da66:	bls.n	dabc <_realloc_r+0x314>
    da68:	ldr	r3, [r4, #0]
    da6a:	str.w	r3, [sl, #8]
    da6e:	ldr	r3, [r4, #4]
    da70:	str.w	r3, [sl, #12]
    da74:	cmp	r2, #27
    da76:	bhi.n	dafe <_realloc_r+0x356>
    da78:	adds	r4, #8
    da7a:	add.w	r3, sl, #16
    da7e:	ldr	r2, [r4, #0]
    da80:	str	r2, [r3, #0]
    da82:	ldr	r2, [r4, #4]
    da84:	str	r2, [r3, #4]
    da86:	ldr	r2, [r4, #8]
    da88:	str	r2, [r3, #8]
    da8a:	mov	r6, ip
    da8c:	mov	r9, sl
    da8e:	mov	r4, r7
    da90:	b.n	d8a2 <_realloc_r+0xfa>
    da92:	ldr	r3, [r4, #8]
    da94:	str	r3, [r0, #8]
    da96:	ldr	r3, [r4, #12]
    da98:	str	r3, [r0, #12]
    da9a:	cmp	r2, #36	; 0x24
    da9c:	beq.n	daec <_realloc_r+0x344>
    da9e:	add.w	r2, r4, #16
    daa2:	add.w	r3, r0, #16
    daa6:	b.n	d860 <_realloc_r+0xb8>
    daa8:	mov	r2, r7
    daaa:	b.n	da2c <_realloc_r+0x284>
    daac:	mov	r1, r4
    daae:	mov	r0, r7
    dab0:	mov	r6, r3
    dab2:	mov	r9, sl
    dab4:	bl	df4c <memmove>
    dab8:	mov	r4, r7
    daba:	b.n	d8a2 <_realloc_r+0xfa>
    dabc:	mov	r3, r7
    dabe:	b.n	da7e <_realloc_r+0x2d6>
    dac0:	mov	r1, r4
    dac2:	mov	r0, r7
    dac4:	mov	r6, ip
    dac6:	mov	r9, sl
    dac8:	bl	df4c <memmove>
    dacc:	mov	r4, r7
    dace:	b.n	d8a2 <_realloc_r+0xfa>
    dad0:	.word	0x20001600
    dad4:	ldr	r1, [r4, #8]
    dad6:	str.w	r1, [sl, #16]
    dada:	ldr	r1, [r4, #12]
    dadc:	str.w	r1, [sl, #20]
    dae0:	cmp	r2, #36	; 0x24
    dae2:	beq.n	db26 <_realloc_r+0x37e>
    dae4:	adds	r4, #16
    dae6:	add.w	r2, sl, #24
    daea:	b.n	da2c <_realloc_r+0x284>
    daec:	ldr	r3, [r4, #16]
    daee:	str	r3, [r0, #16]
    daf0:	ldr	r1, [r4, #20]
    daf2:	str	r1, [r0, #20]
    daf4:	add.w	r2, r4, #24
    daf8:	add.w	r3, r0, #24
    dafc:	b.n	d860 <_realloc_r+0xb8>
    dafe:	ldr	r3, [r4, #8]
    db00:	str.w	r3, [sl, #16]
    db04:	ldr	r3, [r4, #12]
    db06:	str.w	r3, [sl, #20]
    db0a:	cmp	r2, #36	; 0x24
    db0c:	beq.n	db52 <_realloc_r+0x3aa>
    db0e:	adds	r4, #16
    db10:	add.w	r3, sl, #24
    db14:	b.n	da7e <_realloc_r+0x2d6>
    db16:	mov	r2, r7
    db18:	b.n	d982 <_realloc_r+0x1da>
    db1a:	mov	r1, r4
    db1c:	mov	r0, r7
    db1e:	bl	df4c <memmove>
    db22:	ldr	r3, [pc, #88]	; (db7c <_realloc_r+0x3d4>)
    db24:	b.n	d98e <_realloc_r+0x1e6>
    db26:	ldr	r2, [r4, #16]
    db28:	str.w	r2, [sl, #24]
    db2c:	ldr	r2, [r4, #20]
    db2e:	str.w	r2, [sl, #28]
    db32:	adds	r4, #24
    db34:	add.w	r2, sl, #32
    db38:	b.n	da2c <_realloc_r+0x284>
    db3a:	ldr	r1, [r4, #8]
    db3c:	str.w	r1, [sl, #16]
    db40:	ldr	r1, [r4, #12]
    db42:	str.w	r1, [sl, #20]
    db46:	cmp	r2, #36	; 0x24
    db48:	beq.n	db66 <_realloc_r+0x3be>
    db4a:	adds	r4, #16
    db4c:	add.w	r2, sl, #24
    db50:	b.n	d982 <_realloc_r+0x1da>
    db52:	ldr	r3, [r4, #16]
    db54:	str.w	r3, [sl, #24]
    db58:	ldr	r3, [r4, #20]
    db5a:	str.w	r3, [sl, #28]
    db5e:	adds	r4, #24
    db60:	add.w	r3, sl, #32
    db64:	b.n	da7e <_realloc_r+0x2d6>
    db66:	ldr	r2, [r4, #16]
    db68:	str.w	r2, [sl, #24]
    db6c:	ldr	r2, [r4, #20]
    db6e:	str.w	r2, [sl, #28]
    db72:	adds	r4, #24
    db74:	add.w	r2, sl, #32
    db78:	b.n	d982 <_realloc_r+0x1da>
    db7a:	nop
    db7c:	.word	0x20001600

0000db80 <__cxa_atexit>:
    db80:	mov	r3, r2
    db82:	mov	r2, r1
    db84:	mov	r1, r0
    db86:	movs	r0, #2
    db88:	b.w	e49c <__register_exitproc>

0000db8c <stdio_exit_handler>:
    db8c:	ldr	r2, [pc, #8]	; (db98 <stdio_exit_handler+0xc>)
    db8e:	ldr	r1, [pc, #12]	; (db9c <stdio_exit_handler+0x10>)
    db90:	ldr	r0, [pc, #12]	; (dba0 <stdio_exit_handler+0x14>)
    db92:	b.w	dd0c <_fwalk_sglue>
    db96:	nop
    db98:	.word	0x20001a10
    db9c:	.word	0x00010ad5
    dba0:	.word	0x20001330

0000dba4 <cleanup_stdio>:
    dba4:	ldr	r3, [pc, #48]	; (dbd8 <cleanup_stdio+0x34>)
    dba6:	ldr	r1, [r0, #4]
    dba8:	cmp	r1, r3
    dbaa:	push	{r4, lr}
    dbac:	mov	r4, r0
    dbae:	beq.n	dbb4 <cleanup_stdio+0x10>
    dbb0:	bl	10ad4 <_fclose_r>
    dbb4:	ldr	r1, [r4, #8]
    dbb6:	ldr	r3, [pc, #36]	; (dbdc <cleanup_stdio+0x38>)
    dbb8:	cmp	r1, r3
    dbba:	beq.n	dbc2 <cleanup_stdio+0x1e>
    dbbc:	mov	r0, r4
    dbbe:	bl	10ad4 <_fclose_r>
    dbc2:	ldr	r1, [r4, #12]
    dbc4:	ldr	r3, [pc, #24]	; (dbe0 <cleanup_stdio+0x3c>)
    dbc6:	cmp	r1, r3
    dbc8:	beq.n	dbd4 <cleanup_stdio+0x30>
    dbca:	mov	r0, r4
    dbcc:	ldmia.w	sp!, {r4, lr}
    dbd0:	b.w	10ad4 <_fclose_r>
    dbd4:	pop	{r4, pc}
    dbd6:	nop
    dbd8:	.word	0x200067ac
    dbdc:	.word	0x20006814
    dbe0:	.word	0x2000687c

0000dbe4 <global_stdio_init.part.0>:
    dbe4:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    dbe8:	ldr	r4, [pc, #168]	; (dc94 <global_stdio_init.part.0+0xb0>)
    dbea:	ldr	r3, [pc, #172]	; (dc98 <global_stdio_init.part.0+0xb4>)
    dbec:	ldr	r0, [pc, #172]	; (dc9c <global_stdio_init.part.0+0xb8>)
    dbee:	ldr.w	r9, [pc, #192]	; dcb0 <global_stdio_init.part.0+0xcc>
    dbf2:	ldr.w	r8, [pc, #192]	; dcb4 <global_stdio_init.part.0+0xd0>
    dbf6:	ldr	r7, [pc, #168]	; (dca0 <global_stdio_init.part.0+0xbc>)
    dbf8:	str	r0, [r3, #0]
    dbfa:	movs	r5, #0
    dbfc:	movs	r3, #4
    dbfe:	movs	r2, #8
    dc00:	mov	r1, r5
    dc02:	add.w	r0, r4, #92	; 0x5c
    dc06:	ldr	r6, [pc, #156]	; (dca4 <global_stdio_init.part.0+0xc0>)
    dc08:	str	r5, [r4, #100]	; 0x64
    dc0a:	strd	r5, r3, [r4, #8]
    dc0e:	strd	r5, r5, [r4]
    dc12:	strd	r5, r5, [r4, #16]
    dc16:	str	r5, [r4, #24]
    dc18:	bl	e044 <memset>
    dc1c:	ldr	r3, [pc, #136]	; (dca8 <global_stdio_init.part.0+0xc4>)
    dc1e:	str	r3, [r4, #116]	; 0x74
    dc20:	movs	r2, #8
    dc22:	mov	r1, r5
    dc24:	add.w	r0, r4, #196	; 0xc4
    dc28:	strd	r4, r9, [r4, #28]
    dc2c:	strd	r8, r7, [r4, #36]	; 0x24
    dc30:	strd	r5, r5, [r4, #104]	; 0x68
    dc34:	strd	r5, r5, [r4, #120]	; 0x78
    dc38:	str.w	r5, [r4, #204]	; 0xcc
    dc3c:	str	r5, [r4, #112]	; 0x70
    dc3e:	str.w	r5, [r4, #128]	; 0x80
    dc42:	str	r6, [r4, #44]	; 0x2c
    dc44:	bl	e044 <memset>
    dc48:	ldr	r3, [pc, #96]	; (dcac <global_stdio_init.part.0+0xc8>)
    dc4a:	str.w	r3, [r4, #220]	; 0xdc
    dc4e:	mov	r1, r5
    dc50:	add.w	r3, r4, #104	; 0x68
    dc54:	movs	r2, #8
    dc56:	add.w	r0, r4, #300	; 0x12c
    dc5a:	str.w	r3, [r4, #132]	; 0x84
    dc5e:	strd	r9, r8, [r4, #136]	; 0x88
    dc62:	strd	r7, r6, [r4, #144]	; 0x90
    dc66:	strd	r5, r5, [r4, #208]	; 0xd0
    dc6a:	strd	r5, r5, [r4, #224]	; 0xe0
    dc6e:	str.w	r5, [r4, #308]	; 0x134
    dc72:	str.w	r5, [r4, #216]	; 0xd8
    dc76:	str.w	r5, [r4, #232]	; 0xe8
    dc7a:	bl	e044 <memset>
    dc7e:	add.w	r3, r4, #208	; 0xd0
    dc82:	strd	r9, r8, [r4, #240]	; 0xf0
    dc86:	strd	r7, r6, [r4, #248]	; 0xf8
    dc8a:	str.w	r3, [r4, #236]	; 0xec
    dc8e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    dc92:	nop
    dc94:	.word	0x200067ac
    dc98:	.word	0x200068e4
    dc9c:	.word	0x0000db8d
    dca0:	.word	0x0000ddf9
    dca4:	.word	0x0000de19
    dca8:	.word	0x00010009
    dcac:	.word	0x00020012
    dcb0:	.word	0x0000dd95
    dcb4:	.word	0x0000ddb9

0000dcb8 <__sinit>:
    dcb8:	push	{r4, lr}
    dcba:	mov	r4, r0
    dcbc:	ldr	r0, [pc, #40]	; (dce8 <__sinit+0x30>)
    dcbe:	bl	e30c <__retarget_lock_acquire_recursive>
    dcc2:	ldr	r3, [r4, #52]	; 0x34
    dcc4:	cbnz	r3, dcd0 <__sinit+0x18>
    dcc6:	ldr	r3, [pc, #36]	; (dcec <__sinit+0x34>)
    dcc8:	ldr	r2, [pc, #36]	; (dcf0 <__sinit+0x38>)
    dcca:	ldr	r3, [r3, #0]
    dccc:	str	r2, [r4, #52]	; 0x34
    dcce:	cbz	r3, dcda <__sinit+0x22>
    dcd0:	ldmia.w	sp!, {r4, lr}
    dcd4:	ldr	r0, [pc, #16]	; (dce8 <__sinit+0x30>)
    dcd6:	b.w	e310 <__retarget_lock_release_recursive>
    dcda:	bl	dbe4 <global_stdio_init.part.0>
    dcde:	ldmia.w	sp!, {r4, lr}
    dce2:	ldr	r0, [pc, #4]	; (dce8 <__sinit+0x30>)
    dce4:	b.w	e310 <__retarget_lock_release_recursive>
    dce8:	.word	0x20006774
    dcec:	.word	0x200068e4
    dcf0:	.word	0x0000dba5

0000dcf4 <__sfp_lock_acquire>:
    dcf4:	ldr	r0, [pc, #4]	; (dcfc <__sfp_lock_acquire+0x8>)
    dcf6:	b.w	e30c <__retarget_lock_acquire_recursive>
    dcfa:	nop
    dcfc:	.word	0x20006774

0000dd00 <__sfp_lock_release>:
    dd00:	ldr	r0, [pc, #4]	; (dd08 <__sfp_lock_release+0x8>)
    dd02:	b.w	e310 <__retarget_lock_release_recursive>
    dd06:	nop
    dd08:	.word	0x20006774

0000dd0c <_fwalk_sglue>:
    dd0c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    dd10:	mov	r8, r0
    dd12:	mov	r7, r1
    dd14:	mov	r6, r2
    dd16:	mov.w	r9, #0
    dd1a:	ldrd	r5, r4, [r6, #4]
    dd1e:	subs	r5, #1
    dd20:	bmi.n	dd46 <_fwalk_sglue+0x3a>
    dd22:	ldrh	r3, [r4, #12]
    dd24:	cmp	r3, #1
    dd26:	add.w	r5, r5, #4294967295
    dd2a:	bls.n	dd3e <_fwalk_sglue+0x32>
    dd2c:	ldrsh.w	r3, [r4, #14]
    dd30:	adds	r3, #1
    dd32:	mov	r1, r4
    dd34:	beq.n	dd3e <_fwalk_sglue+0x32>
    dd36:	mov	r0, r8
    dd38:	blx	r7
    dd3a:	orr.w	r9, r9, r0
    dd3e:	adds	r3, r5, #1
    dd40:	add.w	r4, r4, #104	; 0x68
    dd44:	bne.n	dd22 <_fwalk_sglue+0x16>
    dd46:	ldr	r6, [r6, #0]
    dd48:	cmp	r6, #0
    dd4a:	bne.n	dd1a <_fwalk_sglue+0xe>
    dd4c:	mov	r0, r9
    dd4e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    dd52:	nop

0000dd54 <sprintf>:
    dd54:	push	{r1, r2, r3}
    dd56:	push	{r4, lr}
    dd58:	sub	sp, #116	; 0x74
    dd5a:	mvn.w	r1, #2147483648	; 0x80000000
    dd5e:	add	r3, sp, #124	; 0x7c
    dd60:	strd	r0, r1, [sp, #24]
    dd64:	str	r1, [sp, #16]
    dd66:	ldr	r1, [pc, #36]	; (dd8c <sprintf+0x38>)
    dd68:	ldr.w	r2, [r3], #4
    dd6c:	str	r0, [sp, #8]
    dd6e:	ldr	r4, [pc, #32]	; (dd90 <sprintf+0x3c>)
    dd70:	ldr	r0, [r1, #0]
    dd72:	str	r3, [sp, #4]
    dd74:	add	r1, sp, #8
    dd76:	str	r4, [sp, #20]
    dd78:	bl	ef90 <_svfprintf_r>
    dd7c:	ldr	r3, [sp, #8]
    dd7e:	movs	r2, #0
    dd80:	strb	r2, [r3, #0]
    dd82:	add	sp, #116	; 0x74
    dd84:	ldmia.w	sp!, {r4, lr}
    dd88:	add	sp, #12
    dd8a:	bx	lr
    dd8c:	.word	0x20001a1c
    dd90:	.word	0xffff0208

0000dd94 <__sread>:
    dd94:	push	{r4, lr}
    dd96:	mov	r4, r1
    dd98:	ldrsh.w	r1, [r1, #14]
    dd9c:	bl	e234 <_read_r>
    dda0:	cmp	r0, #0
    dda2:	blt.n	ddac <__sread+0x18>
    dda4:	ldr	r3, [r4, #80]	; 0x50
    dda6:	add	r3, r0
    dda8:	str	r3, [r4, #80]	; 0x50
    ddaa:	pop	{r4, pc}
    ddac:	ldrh	r3, [r4, #12]
    ddae:	bic.w	r3, r3, #4096	; 0x1000
    ddb2:	strh	r3, [r4, #12]
    ddb4:	pop	{r4, pc}
    ddb6:	nop

0000ddb8 <__swrite>:
    ddb8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ddbc:	mov	r4, r1
    ddbe:	ldrsh.w	r1, [r1, #12]
    ddc2:	mov	r7, r3
    ddc4:	lsls	r3, r1, #23
    ddc6:	mov	r5, r0
    ddc8:	mov	r6, r2
    ddca:	bmi.n	dde4 <__swrite+0x2c>
    ddcc:	bic.w	r1, r1, #4096	; 0x1000
    ddd0:	strh	r1, [r4, #12]
    ddd2:	mov	r3, r7
    ddd4:	ldrsh.w	r1, [r4, #14]
    ddd8:	mov	r2, r6
    ddda:	mov	r0, r5
    dddc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    dde0:	b.w	e284 <_write_r>
    dde4:	ldrsh.w	r1, [r4, #14]
    dde8:	movs	r3, #2
    ddea:	movs	r2, #0
    ddec:	bl	e208 <_lseek_r>
    ddf0:	ldrsh.w	r1, [r4, #12]
    ddf4:	b.n	ddcc <__swrite+0x14>
    ddf6:	nop

0000ddf8 <__sseek>:
    ddf8:	push	{r4, lr}
    ddfa:	mov	r4, r1
    ddfc:	ldrsh.w	r1, [r1, #14]
    de00:	bl	e208 <_lseek_r>
    de04:	ldrh	r3, [r4, #12]
    de06:	adds	r2, r0, #1
    de08:	itee	eq
    de0a:	biceq.w	r3, r3, #4096	; 0x1000
    de0e:	orrne.w	r3, r3, #4096	; 0x1000
    de12:	strne	r0, [r4, #80]	; 0x50
    de14:	strh	r3, [r4, #12]
    de16:	pop	{r4, pc}

0000de18 <__sclose>:
    de18:	ldrsh.w	r1, [r1, #14]
    de1c:	b.w	e1e4 <_close_r>

0000de20 <_vdprintf_r>:
    de20:	push	{r4, r5, r6, r7, lr}
    de22:	sub.w	sp, sp, #532	; 0x214
    de26:	add	r7, sp, #16
    de28:	str	r3, [sp, #0]
    de2a:	mov	r3, r2
    de2c:	mov.w	r2, #512	; 0x200
    de30:	mov	r6, r1
    de32:	str	r2, [sp, #12]
    de34:	mov	r1, r7
    de36:	add	r2, sp, #12
    de38:	mov	r5, r0
    de3a:	bl	de88 <_vasnprintf_r>
    de3e:	cbz	r0, de64 <_vdprintf_r+0x44>
    de40:	mov	r4, r0
    de42:	mov	r2, r0
    de44:	ldr	r3, [sp, #12]
    de46:	mov	r1, r6
    de48:	mov	r0, r5
    de4a:	bl	e284 <_write_r>
    de4e:	cmp	r4, r7
    de50:	str	r0, [sp, #12]
    de52:	beq.n	de5e <_vdprintf_r+0x3e>
    de54:	mov	r0, r5
    de56:	mov	r1, r4
    de58:	bl	e5c4 <_free_r>
    de5c:	ldr	r0, [sp, #12]
    de5e:	add.w	sp, sp, #532	; 0x214
    de62:	pop	{r4, r5, r6, r7, pc}
    de64:	mov.w	r0, #4294967295
    de68:	b.n	de5e <_vdprintf_r+0x3e>
    de6a:	nop

0000de6c <vdprintf>:
    de6c:	push	{r4}
    de6e:	ldr	r4, [pc, #20]	; (de84 <vdprintf+0x18>)
    de70:	mov	ip, r0
    de72:	mov	r3, r2
    de74:	ldr	r0, [r4, #0]
    de76:	ldr.w	r4, [sp], #4
    de7a:	mov	r2, r1
    de7c:	mov	r1, ip
    de7e:	b.w	de20 <_vdprintf_r>
    de82:	nop
    de84:	.word	0x20001a1c

0000de88 <_vasnprintf_r>:
    de88:	push	{r4, r5, lr}
    de8a:	ldr	r4, [r2, #0]
    de8c:	mov	r5, r2
    de8e:	sub	sp, #108	; 0x6c
    de90:	mov	r2, r3
    de92:	cbz	r1, de98 <_vasnprintf_r+0x10>
    de94:	cmp	r4, #0
    de96:	bne.n	decc <_vasnprintf_r+0x44>
    de98:	movs	r1, #0
    de9a:	mov.w	r3, #648	; 0x288
    de9e:	strh.w	r3, [sp, #12]
    dea2:	str	r1, [sp, #0]
    dea4:	str	r1, [sp, #16]
    dea6:	movw	r3, #65535	; 0xffff
    deaa:	str	r1, [sp, #8]
    deac:	str	r1, [sp, #20]
    deae:	strh.w	r3, [sp, #14]
    deb2:	mov	r1, sp
    deb4:	ldr	r3, [sp, #120]	; 0x78
    deb6:	bl	ef90 <_svfprintf_r>
    deba:	cmp	r0, #0
    debc:	blt.n	dee6 <_vasnprintf_r+0x5e>
    debe:	ldr	r3, [sp, #0]
    dec0:	str	r0, [r5, #0]
    dec2:	movs	r2, #0
    dec4:	strb	r2, [r3, #0]
    dec6:	ldr	r0, [sp, #16]
    dec8:	add	sp, #108	; 0x6c
    deca:	pop	{r4, r5, pc}
    decc:	mov.w	r3, #1544	; 0x608
    ded0:	str	r1, [sp, #0]
    ded2:	str	r1, [sp, #16]
    ded4:	strh.w	r3, [sp, #12]
    ded8:	mov	r1, r4
    deda:	bge.n	dea6 <_vasnprintf_r+0x1e>
    dedc:	movs	r3, #139	; 0x8b
    dede:	str	r3, [r0, #0]
    dee0:	movs	r0, #0
    dee2:	add	sp, #108	; 0x6c
    dee4:	pop	{r4, r5, pc}
    dee6:	movs	r0, #0
    dee8:	b.n	dec8 <_vasnprintf_r+0x40>
    deea:	nop

0000deec <memcmp>:
    deec:	cmp	r2, #3
    deee:	push	{r4, r5, r6, lr}
    def0:	bls.n	df1c <memcmp+0x30>
    def2:	orr.w	r3, r0, r1
    def6:	lsls	r3, r3, #30
    def8:	bne.n	df40 <memcmp+0x54>
    defa:	mov	r4, r0
    defc:	mov	r3, r1
    defe:	mov	r1, r3
    df00:	mov	r0, r4
    df02:	ldr	r6, [r1, #0]
    df04:	ldr	r5, [r0, #0]
    df06:	cmp	r5, r6
    df08:	add.w	r4, r4, #4
    df0c:	add.w	r3, r3, #4
    df10:	bne.n	df40 <memcmp+0x54>
    df12:	subs	r2, #4
    df14:	cmp	r2, #3
    df16:	mov	r0, r4
    df18:	mov	r1, r3
    df1a:	bhi.n	defe <memcmp+0x12>
    df1c:	subs	r4, r2, #1
    df1e:	cbz	r2, df48 <memcmp+0x5c>
    df20:	subs	r2, r0, #1
    df22:	subs	r1, #1
    df24:	b.n	df2a <memcmp+0x3e>
    df26:	adds	r3, r0, r3
    df28:	beq.n	df44 <memcmp+0x58>
    df2a:	ldrb.w	lr, [r2, #1]!
    df2e:	ldrb.w	ip, [r1, #1]!
    df32:	cmp	lr, ip
    df34:	sub.w	r3, r4, r2
    df38:	beq.n	df26 <memcmp+0x3a>
    df3a:	sub.w	r0, lr, ip
    df3e:	pop	{r4, r5, r6, pc}
    df40:	subs	r4, r2, #1
    df42:	b.n	df20 <memcmp+0x34>
    df44:	mov	r0, r3
    df46:	pop	{r4, r5, r6, pc}
    df48:	mov	r0, r2
    df4a:	pop	{r4, r5, r6, pc}

0000df4c <memmove>:
    df4c:	cmp	r0, r1
    df4e:	bls.n	df6c <memmove+0x20>
    df50:	adds	r3, r1, r2
    df52:	cmp	r3, r0
    df54:	bls.n	df6c <memmove+0x20>
    df56:	add.w	ip, r0, r2
    df5a:	cbz	r2, df8c <memmove+0x40>
    df5c:	mov	r2, ip
    df5e:	ldrb.w	ip, [r3, #-1]!
    df62:	strb.w	ip, [r2, #-1]!
    df66:	cmp	r1, r3
    df68:	bne.n	df5e <memmove+0x12>
    df6a:	bx	lr
    df6c:	cmp	r2, #15
    df6e:	bhi.n	df8e <memmove+0x42>
    df70:	mov	r3, r0
    df72:	add.w	ip, r2, #4294967295
    df76:	cbz	r2, df8c <memmove+0x40>
    df78:	add.w	ip, ip, #1
    df7c:	subs	r3, #1
    df7e:	add	ip, r1
    df80:	ldrb.w	r2, [r1], #1
    df84:	strb.w	r2, [r3, #1]!
    df88:	cmp	r1, ip
    df8a:	bne.n	df80 <memmove+0x34>
    df8c:	bx	lr
    df8e:	orr.w	r3, r0, r1
    df92:	lsls	r3, r3, #30
    df94:	bne.n	e038 <memmove+0xec>
    df96:	sub.w	r3, r2, #16
    df9a:	push	{r4, r5, r6, lr}
    df9c:	add.w	ip, r1, #32
    dfa0:	bic.w	r5, r3, #15
    dfa4:	add.w	lr, r1, #16
    dfa8:	add.w	r4, r0, #16
    dfac:	add	ip, r5
    dfae:	lsrs	r3, r3, #4
    dfb0:	ldr.w	r5, [lr, #-16]
    dfb4:	str.w	r5, [r4, #-16]
    dfb8:	ldr.w	r5, [lr, #-12]
    dfbc:	str.w	r5, [r4, #-12]
    dfc0:	ldr.w	r5, [lr, #-8]
    dfc4:	str.w	r5, [r4, #-8]
    dfc8:	ldr.w	r5, [lr, #-4]
    dfcc:	str.w	r5, [r4, #-4]
    dfd0:	add.w	lr, lr, #16
    dfd4:	cmp	lr, ip
    dfd6:	add.w	r4, r4, #16
    dfda:	bne.n	dfb0 <memmove+0x64>
    dfdc:	adds	r3, #1
    dfde:	tst.w	r2, #12
    dfe2:	add.w	r1, r1, r3, lsl #4
    dfe6:	and.w	r4, r2, #15
    dfea:	add.w	r3, r0, r3, lsl #4
    dfee:	beq.n	e040 <memmove+0xf4>
    dff0:	subs	r4, #4
    dff2:	bic.w	r6, r4, #3
    dff6:	mov.w	ip, r4, lsr #2
    dffa:	add	r6, r3
    dffc:	subs	r4, r3, #4
    dffe:	mov	lr, r1
    e000:	ldr.w	r5, [lr], #4
    e004:	str.w	r5, [r4, #4]!
    e008:	cmp	r4, r6
    e00a:	bne.n	e000 <memmove+0xb4>
    e00c:	add.w	r4, ip, #1
    e010:	and.w	r2, r2, #3
    e014:	add.w	r3, r3, r4, lsl #2
    e018:	add.w	r1, r1, r4, lsl #2
    e01c:	add.w	ip, r2, #4294967295
    e020:	cbz	r2, e036 <memmove+0xea>
    e022:	add.w	ip, ip, #1
    e026:	subs	r3, #1
    e028:	add	ip, r1
    e02a:	ldrb.w	r2, [r1], #1
    e02e:	strb.w	r2, [r3, #1]!
    e032:	cmp	r1, ip
    e034:	bne.n	e02a <memmove+0xde>
    e036:	pop	{r4, r5, r6, pc}
    e038:	add.w	ip, r2, #4294967295
    e03c:	mov	r3, r0
    e03e:	b.n	df78 <memmove+0x2c>
    e040:	mov	r2, r4
    e042:	b.n	e01c <memmove+0xd0>

0000e044 <memset>:
    e044:	lsls	r3, r0, #30
    e046:	push	{r4, r5, lr}
    e048:	beq.n	e0dc <memset+0x98>
    e04a:	subs	r4, r2, #1
    e04c:	cmp	r2, #0
    e04e:	beq.n	e0d0 <memset+0x8c>
    e050:	uxtb	r2, r1
    e052:	mov	r3, r0
    e054:	b.n	e05a <memset+0x16>
    e056:	subs	r4, #1
    e058:	bcc.n	e0d0 <memset+0x8c>
    e05a:	strb.w	r2, [r3], #1
    e05e:	lsls	r5, r3, #30
    e060:	bne.n	e056 <memset+0x12>
    e062:	cmp	r4, #3
    e064:	bls.n	e0c2 <memset+0x7e>
    e066:	uxtb	r5, r1
    e068:	orr.w	r5, r5, r5, lsl #8
    e06c:	cmp	r4, #15
    e06e:	orr.w	r5, r5, r5, lsl #16
    e072:	bls.n	e0e2 <memset+0x9e>
    e074:	sub.w	r2, r4, #16
    e078:	bic.w	ip, r2, #15
    e07c:	add.w	lr, r3, #32
    e080:	add	lr, ip
    e082:	mov.w	ip, r2, lsr #4
    e086:	add.w	r2, r3, #16
    e08a:	strd	r5, r5, [r2, #-16]
    e08e:	strd	r5, r5, [r2, #-8]
    e092:	adds	r2, #16
    e094:	cmp	r2, lr
    e096:	bne.n	e08a <memset+0x46>
    e098:	add.w	r2, ip, #1
    e09c:	tst.w	r4, #12
    e0a0:	add.w	r2, r3, r2, lsl #4
    e0a4:	and.w	ip, r4, #15
    e0a8:	beq.n	e0d2 <memset+0x8e>
    e0aa:	sub.w	r3, ip, #4
    e0ae:	bic.w	r3, r3, #3
    e0b2:	adds	r3, #4
    e0b4:	add	r3, r2
    e0b6:	str.w	r5, [r2], #4
    e0ba:	cmp	r3, r2
    e0bc:	bne.n	e0b6 <memset+0x72>
    e0be:	and.w	r4, ip, #3
    e0c2:	cbz	r4, e0d0 <memset+0x8c>
    e0c4:	uxtb	r1, r1
    e0c6:	add	r4, r3
    e0c8:	strb.w	r1, [r3], #1
    e0cc:	cmp	r4, r3
    e0ce:	bne.n	e0c8 <memset+0x84>
    e0d0:	pop	{r4, r5, pc}
    e0d2:	mov	r4, ip
    e0d4:	mov	r3, r2
    e0d6:	cmp	r4, #0
    e0d8:	bne.n	e0c4 <memset+0x80>
    e0da:	b.n	e0d0 <memset+0x8c>
    e0dc:	mov	r3, r0
    e0de:	mov	r4, r2
    e0e0:	b.n	e062 <memset+0x1e>
    e0e2:	mov	r2, r3
    e0e4:	mov	ip, r4
    e0e6:	b.n	e0aa <memset+0x66>

0000e0e8 <strncmp>:
    e0e8:	cmp	r2, #0
    e0ea:	beq.n	e16a <strncmp+0x82>
    e0ec:	orr.w	r3, r0, r1
    e0f0:	lsls	r3, r3, #30
    e0f2:	push	{r4, r5, lr}
    e0f4:	mov	ip, r0
    e0f6:	bne.n	e158 <strncmp+0x70>
    e0f8:	cmp	r2, #3
    e0fa:	bls.n	e158 <strncmp+0x70>
    e0fc:	mov	r3, r1
    e0fe:	b.n	e112 <strncmp+0x2a>
    e100:	subs	r2, #4
    e102:	mov	ip, r0
    e104:	mov	r1, r3
    e106:	beq.n	e154 <strncmp+0x6c>
    e108:	tst.w	lr, #2155905152	; 0x80808080
    e10c:	bne.n	e154 <strncmp+0x6c>
    e10e:	cmp	r2, #3
    e110:	bls.n	e158 <strncmp+0x70>
    e112:	ldr	r4, [r0, #0]
    e114:	mov	r1, r3
    e116:	ldr.w	r5, [r3], #4
    e11a:	sub.w	lr, r4, #16843009	; 0x1010101
    e11e:	cmp	r4, r5
    e120:	mov	ip, r0
    e122:	bic.w	lr, lr, r4
    e126:	add.w	r0, r0, #4
    e12a:	beq.n	e100 <strncmp+0x18>
    e12c:	ldrb.w	r0, [ip]
    e130:	ldrb	r4, [r1, #0]
    e132:	cmp	r0, r4
    e134:	bne.n	e16e <strncmp+0x86>
    e136:	mov	lr, ip
    e138:	cbz	r0, e156 <strncmp+0x6e>
    e13a:	ldrb.w	r0, [lr, #1]!
    e13e:	ldrb.w	r4, [r1, #1]!
    e142:	sub.w	r3, r2, lr
    e146:	cmp	r0, r4
    e148:	add.w	r3, r3, #4294967295
    e14c:	bne.n	e16e <strncmp+0x86>
    e14e:	adds.w	r3, ip, r3
    e152:	bne.n	e138 <strncmp+0x50>
    e154:	movs	r0, #0
    e156:	pop	{r4, r5, pc}
    e158:	ldrb.w	r0, [ip]
    e15c:	ldrb	r4, [r1, #0]
    e15e:	cmp	r4, r0
    e160:	bne.n	e16e <strncmp+0x86>
    e162:	cmp	r2, #1
    e164:	beq.n	e154 <strncmp+0x6c>
    e166:	mov	lr, ip
    e168:	b.n	e138 <strncmp+0x50>
    e16a:	mov	r0, r2
    e16c:	bx	lr
    e16e:	subs	r0, r0, r4
    e170:	pop	{r4, r5, pc}
    e172:	nop

0000e174 <strncpy>:
    e174:	orr.w	r3, r0, r1
    e178:	lsls	r3, r3, #30
    e17a:	push	{r4, r5, lr}
    e17c:	bne.n	e182 <strncpy+0xe>
    e17e:	cmp	r2, #3
    e180:	bhi.n	e1a2 <strncpy+0x2e>
    e182:	mov	ip, r0
    e184:	add.w	lr, r1, #4294967295
    e188:	b.n	e19a <strncpy+0x26>
    e18a:	ldrb.w	r1, [lr, #1]!
    e18e:	strb.w	r1, [r3], #1
    e192:	subs	r4, r2, #1
    e194:	cbz	r1, e1c8 <strncpy+0x54>
    e196:	mov	ip, r3
    e198:	mov	r2, r4
    e19a:	mov	r3, ip
    e19c:	cmp	r2, #0
    e19e:	bne.n	e18a <strncpy+0x16>
    e1a0:	pop	{r4, r5, pc}
    e1a2:	mov	r3, r1
    e1a4:	mov	ip, r0
    e1a6:	mov	r1, r3
    e1a8:	ldr.w	r5, [r3], #4
    e1ac:	sub.w	r4, r5, #16843009	; 0x1010101
    e1b0:	bic.w	r4, r4, r5
    e1b4:	tst.w	r4, #2155905152	; 0x80808080
    e1b8:	bne.n	e184 <strncpy+0x10>
    e1ba:	subs	r2, #4
    e1bc:	cmp	r2, #3
    e1be:	str.w	r5, [ip], #4
    e1c2:	mov	r1, r3
    e1c4:	bhi.n	e1a6 <strncpy+0x32>
    e1c6:	b.n	e184 <strncpy+0x10>
    e1c8:	add	ip, r2
    e1ca:	cmp	r4, #0
    e1cc:	beq.n	e1a0 <strncpy+0x2c>
    e1ce:	strb.w	r1, [r3], #1
    e1d2:	cmp	r3, ip
    e1d4:	bne.n	e1ce <strncpy+0x5a>
    e1d6:	pop	{r4, r5, pc}

0000e1d8 <__locale_mb_cur_max>:
    e1d8:	ldr	r3, [pc, #4]	; (e1e0 <__locale_mb_cur_max+0x8>)
    e1da:	ldrb.w	r0, [r3, #296]	; 0x128
    e1de:	bx	lr
    e1e0:	.word	0x20001494

0000e1e4 <_close_r>:
    e1e4:	push	{r3, r4, r5, lr}
    e1e6:	ldr	r5, [pc, #28]	; (e204 <_close_r+0x20>)
    e1e8:	movs	r2, #0
    e1ea:	mov	r4, r0
    e1ec:	mov	r0, r1
    e1ee:	str	r2, [r5, #0]
    e1f0:	bl	ba58 <_close>
    e1f4:	adds	r3, r0, #1
    e1f6:	beq.n	e1fa <_close_r+0x16>
    e1f8:	pop	{r3, r4, r5, pc}
    e1fa:	ldr	r3, [r5, #0]
    e1fc:	cmp	r3, #0
    e1fe:	beq.n	e1f8 <_close_r+0x14>
    e200:	str	r3, [r4, #0]
    e202:	pop	{r3, r4, r5, pc}
    e204:	.word	0x20007994

0000e208 <_lseek_r>:
    e208:	push	{r3, r4, r5, lr}
    e20a:	mov	r4, r1
    e20c:	ldr	r5, [pc, #32]	; (e230 <_lseek_r+0x28>)
    e20e:	mov	ip, r0
    e210:	mov	r1, r2
    e212:	mov	r0, r4
    e214:	mov	r2, r3
    e216:	movs	r3, #0
    e218:	str	r3, [r5, #0]
    e21a:	mov	r4, ip
    e21c:	bl	ba70 <_lseek>
    e220:	adds	r3, r0, #1
    e222:	beq.n	e226 <_lseek_r+0x1e>
    e224:	pop	{r3, r4, r5, pc}
    e226:	ldr	r3, [r5, #0]
    e228:	cmp	r3, #0
    e22a:	beq.n	e224 <_lseek_r+0x1c>
    e22c:	str	r3, [r4, #0]
    e22e:	pop	{r3, r4, r5, pc}
    e230:	.word	0x20007994

0000e234 <_read_r>:
    e234:	push	{r3, r4, r5, lr}
    e236:	mov	r4, r1
    e238:	ldr	r5, [pc, #32]	; (e25c <_read_r+0x28>)
    e23a:	mov	ip, r0
    e23c:	mov	r1, r2
    e23e:	mov	r0, r4
    e240:	mov	r2, r3
    e242:	movs	r3, #0
    e244:	str	r3, [r5, #0]
    e246:	mov	r4, ip
    e248:	bl	ba54 <_read>
    e24c:	adds	r3, r0, #1
    e24e:	beq.n	e252 <_read_r+0x1e>
    e250:	pop	{r3, r4, r5, pc}
    e252:	ldr	r3, [r5, #0]
    e254:	cmp	r3, #0
    e256:	beq.n	e250 <_read_r+0x1c>
    e258:	str	r3, [r4, #0]
    e25a:	pop	{r3, r4, r5, pc}
    e25c:	.word	0x20007994

0000e260 <_sbrk_r>:
    e260:	push	{r3, r4, r5, lr}
    e262:	ldr	r5, [pc, #28]	; (e280 <_sbrk_r+0x20>)
    e264:	movs	r2, #0
    e266:	mov	r4, r0
    e268:	mov	r0, r1
    e26a:	str	r2, [r5, #0]
    e26c:	bl	ba20 <_sbrk>
    e270:	adds	r3, r0, #1
    e272:	beq.n	e276 <_sbrk_r+0x16>
    e274:	pop	{r3, r4, r5, pc}
    e276:	ldr	r3, [r5, #0]
    e278:	cmp	r3, #0
    e27a:	beq.n	e274 <_sbrk_r+0x14>
    e27c:	str	r3, [r4, #0]
    e27e:	pop	{r3, r4, r5, pc}
    e280:	.word	0x20007994

0000e284 <_write_r>:
    e284:	push	{r3, r4, r5, lr}
    e286:	mov	r4, r1
    e288:	ldr	r5, [pc, #32]	; (e2ac <_write_r+0x28>)
    e28a:	mov	ip, r0
    e28c:	mov	r1, r2
    e28e:	mov	r0, r4
    e290:	mov	r2, r3
    e292:	movs	r3, #0
    e294:	str	r3, [r5, #0]
    e296:	mov	r4, ip
    e298:	bl	d048 <_write>
    e29c:	adds	r3, r0, #1
    e29e:	beq.n	e2a2 <_write_r+0x1e>
    e2a0:	pop	{r3, r4, r5, pc}
    e2a2:	ldr	r3, [r5, #0]
    e2a4:	cmp	r3, #0
    e2a6:	beq.n	e2a0 <_write_r+0x1c>
    e2a8:	str	r3, [r4, #0]
    e2aa:	pop	{r3, r4, r5, pc}
    e2ac:	.word	0x20007994

0000e2b0 <__errno>:
    e2b0:	ldr	r3, [pc, #4]	; (e2b8 <__errno+0x8>)
    e2b2:	ldr	r0, [r3, #0]
    e2b4:	bx	lr
    e2b6:	nop
    e2b8:	.word	0x20001a1c

0000e2bc <__libc_init_array>:
    e2bc:	push	{r4, r5, r6, lr}
    e2be:	ldr	r6, [pc, #52]	; (e2f4 <__libc_init_array+0x38>)
    e2c0:	ldr	r5, [pc, #52]	; (e2f8 <__libc_init_array+0x3c>)
    e2c2:	subs	r6, r6, r5
    e2c4:	asrs	r6, r6, #2
    e2c6:	beq.n	e2d6 <__libc_init_array+0x1a>
    e2c8:	movs	r4, #0
    e2ca:	ldr.w	r3, [r5], #4
    e2ce:	adds	r4, #1
    e2d0:	blx	r3
    e2d2:	cmp	r6, r4
    e2d4:	bne.n	e2ca <__libc_init_array+0xe>
    e2d6:	ldr	r6, [pc, #36]	; (e2fc <__libc_init_array+0x40>)
    e2d8:	ldr	r5, [pc, #36]	; (e300 <__libc_init_array+0x44>)
    e2da:	subs	r6, r6, r5
    e2dc:	bl	13658 <___init_veneer>
    e2e0:	asrs	r6, r6, #2
    e2e2:	beq.n	e2f2 <__libc_init_array+0x36>
    e2e4:	movs	r4, #0
    e2e6:	ldr.w	r3, [r5], #4
    e2ea:	adds	r4, #1
    e2ec:	blx	r3
    e2ee:	cmp	r6, r4
    e2f0:	bne.n	e2e6 <__libc_init_array+0x2a>
    e2f2:	pop	{r4, r5, r6, pc}
    e2f4:	.word	0x60001f10
    e2f8:	.word	0x60001f10
    e2fc:	.word	0x60001f8c
    e300:	.word	0x60001f10

0000e304 <__retarget_lock_init_recursive>:
    e304:	bx	lr
    e306:	nop

0000e308 <__retarget_lock_close_recursive>:
    e308:	bx	lr
    e30a:	nop

0000e30c <__retarget_lock_acquire_recursive>:
    e30c:	bx	lr
    e30e:	nop

0000e310 <__retarget_lock_release_recursive>:
    e310:	bx	lr
    e312:	nop
	...

0000e320 <memchr>:
    e320:	and.w	r1, r1, #255	; 0xff
    e324:	cmp	r2, #16
    e326:	blt.n	e380 <memchr+0x60>
    e328:	tst.w	r0, #7
    e32c:	beq.n	e340 <memchr+0x20>
    e32e:	ldrb.w	r3, [r0], #1
    e332:	subs	r2, #1
    e334:	cmp	r3, r1
    e336:	beq.n	e394 <memchr+0x74>
    e338:	tst.w	r0, #7
    e33c:	cbz	r2, e390 <memchr+0x70>
    e33e:	bne.n	e32e <memchr+0xe>
    e340:	push	{r4, r5, r6, r7}
    e342:	orr.w	r1, r1, r1, lsl #8
    e346:	orr.w	r1, r1, r1, lsl #16
    e34a:	bic.w	r4, r2, #7
    e34e:	mvns.w	r7, #0
    e352:	movs	r3, #0
    e354:	ldrd	r5, r6, [r0], #8
    e358:	subs	r4, #8
    e35a:	eor.w	r5, r5, r1
    e35e:	eor.w	r6, r6, r1
    e362:	uadd8	r5, r5, r7
    e366:	sel	r5, r3, r7
    e36a:	uadd8	r6, r6, r7
    e36e:	sel	r6, r5, r7
    e372:	cbnz	r6, e398 <memchr+0x78>
    e374:	bne.n	e354 <memchr+0x34>
    e376:	pop	{r4, r5, r6, r7}
    e378:	and.w	r1, r1, #255	; 0xff
    e37c:	and.w	r2, r2, #7
    e380:	cbz	r2, e390 <memchr+0x70>
    e382:	ldrb.w	r3, [r0], #1
    e386:	subs	r2, #1
    e388:	eor.w	r3, r3, r1
    e38c:	cbz	r3, e394 <memchr+0x74>
    e38e:	bne.n	e382 <memchr+0x62>
    e390:	movs	r0, #0
    e392:	bx	lr
    e394:	subs	r0, #1
    e396:	bx	lr
    e398:	cmp	r5, #0
    e39a:	itte	eq
    e39c:	moveq	r5, r6
    e39e:	subeq	r0, #3
    e3a0:	subne	r0, #7
    e3a2:	tst.w	r5, #1
    e3a6:	bne.n	e3b8 <memchr+0x98>
    e3a8:	adds	r0, #1
    e3aa:	tst.w	r5, #256	; 0x100
    e3ae:	ittt	eq
    e3b0:	addeq	r0, #1
    e3b2:	tsteq.w	r5, #98304	; 0x18000
    e3b6:	addeq	r0, #1
    e3b8:	pop	{r4, r5, r6, r7}
    e3ba:	subs	r0, #1
    e3bc:	bx	lr
    e3be:	nop

0000e3c0 <strlen>:
    e3c0:	pld	[r0]
    e3c4:	strd	r4, r5, [sp, #-8]!
    e3c8:	bic.w	r1, r0, #7
    e3cc:	mvn.w	ip, #0
    e3d0:	ands.w	r4, r0, #7
    e3d4:	pld	[r1, #32]
    e3d8:	bne.w	e46e <strlen+0xae>
    e3dc:	mov.w	r4, #0
    e3e0:	mvn.w	r0, #7
    e3e4:	ldrd	r2, r3, [r1]
    e3e8:	pld	[r1, #64]	; 0x40
    e3ec:	add.w	r0, r0, #8
    e3f0:	uadd8	r2, r2, ip
    e3f4:	sel	r2, r4, ip
    e3f8:	uadd8	r3, r3, ip
    e3fc:	sel	r3, r2, ip
    e400:	cbnz	r3, e456 <strlen+0x96>
    e402:	ldrd	r2, r3, [r1, #8]
    e406:	uadd8	r2, r2, ip
    e40a:	add.w	r0, r0, #8
    e40e:	sel	r2, r4, ip
    e412:	uadd8	r3, r3, ip
    e416:	sel	r3, r2, ip
    e41a:	cbnz	r3, e456 <strlen+0x96>
    e41c:	ldrd	r2, r3, [r1, #16]
    e420:	uadd8	r2, r2, ip
    e424:	add.w	r0, r0, #8
    e428:	sel	r2, r4, ip
    e42c:	uadd8	r3, r3, ip
    e430:	sel	r3, r2, ip
    e434:	cbnz	r3, e456 <strlen+0x96>
    e436:	ldrd	r2, r3, [r1, #24]
    e43a:	add.w	r1, r1, #32
    e43e:	uadd8	r2, r2, ip
    e442:	add.w	r0, r0, #8
    e446:	sel	r2, r4, ip
    e44a:	uadd8	r3, r3, ip
    e44e:	sel	r3, r2, ip
    e452:	cmp	r3, #0
    e454:	beq.n	e3e4 <strlen+0x24>
    e456:	cmp	r2, #0
    e458:	itt	eq
    e45a:	addeq	r0, #4
    e45c:	moveq	r2, r3
    e45e:	rev	r2, r2
    e460:	clz	r2, r2
    e464:	ldrd	r4, r5, [sp], #8
    e468:	add.w	r0, r0, r2, lsr #3
    e46c:	bx	lr
    e46e:	ldrd	r2, r3, [r1]
    e472:	and.w	r5, r4, #3
    e476:	rsb	r0, r4, #0
    e47a:	mov.w	r5, r5, lsl #3
    e47e:	tst.w	r4, #4
    e482:	pld	[r1, #64]	; 0x40
    e486:	lsl.w	r5, ip, r5
    e48a:	orn	r2, r2, r5
    e48e:	itt	ne
    e490:	ornne	r3, r3, r5
    e494:	movne	r2, ip
    e496:	mov.w	r4, #0
    e49a:	b.n	e3f0 <strlen+0x30>

0000e49c <__register_exitproc>:
    e49c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e4a0:	ldr.w	sl, [pc, #124]	; e520 <__register_exitproc+0x84>
    e4a4:	mov	r6, r0
    e4a6:	ldr.w	r0, [sl]
    e4aa:	mov	r8, r3
    e4ac:	mov	r7, r1
    e4ae:	mov	r9, r2
    e4b0:	bl	e30c <__retarget_lock_acquire_recursive>
    e4b4:	ldr	r3, [pc, #96]	; (e518 <__register_exitproc+0x7c>)
    e4b6:	ldr	r4, [r3, #0]
    e4b8:	cbz	r4, e504 <__register_exitproc+0x68>
    e4ba:	ldr	r5, [r4, #4]
    e4bc:	cmp	r5, #31
    e4be:	bgt.n	e50a <__register_exitproc+0x6e>
    e4c0:	cbnz	r6, e4da <__register_exitproc+0x3e>
    e4c2:	adds	r3, r5, #1
    e4c4:	adds	r5, #2
    e4c6:	ldr.w	r0, [sl]
    e4ca:	str	r3, [r4, #4]
    e4cc:	str.w	r7, [r4, r5, lsl #2]
    e4d0:	bl	e310 <__retarget_lock_release_recursive>
    e4d4:	movs	r0, #0
    e4d6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e4da:	add.w	r1, r4, r5, lsl #2
    e4de:	movs	r3, #1
    e4e0:	str.w	r9, [r1, #136]	; 0x88
    e4e4:	ldr.w	r2, [r4, #392]	; 0x188
    e4e8:	lsls	r3, r5
    e4ea:	orrs	r2, r3
    e4ec:	cmp	r6, #2
    e4ee:	str.w	r2, [r4, #392]	; 0x188
    e4f2:	str.w	r8, [r1, #264]	; 0x108
    e4f6:	bne.n	e4c2 <__register_exitproc+0x26>
    e4f8:	ldr.w	r2, [r4, #396]	; 0x18c
    e4fc:	orrs	r2, r3
    e4fe:	str.w	r2, [r4, #396]	; 0x18c
    e502:	b.n	e4c2 <__register_exitproc+0x26>
    e504:	ldr	r4, [pc, #20]	; (e51c <__register_exitproc+0x80>)
    e506:	str	r4, [r3, #0]
    e508:	b.n	e4ba <__register_exitproc+0x1e>
    e50a:	ldr.w	r0, [sl]
    e50e:	bl	e310 <__retarget_lock_release_recursive>
    e512:	mov.w	r0, #4294967295
    e516:	b.n	e4d6 <__register_exitproc+0x3a>
    e518:	.word	0x200065d8
    e51c:	.word	0x200065dc
    e520:	.word	0x20001488

0000e524 <_malloc_trim_r>:
    e524:	push	{r3, r4, r5, r6, r7, lr}
    e526:	ldr	r7, [pc, #144]	; (e5b8 <_malloc_trim_r+0x94>)
    e528:	mov	r4, r1
    e52a:	mov	r6, r0
    e52c:	bl	d790 <__malloc_lock>
    e530:	ldr	r3, [r7, #8]
    e532:	ldr	r5, [r3, #4]
    e534:	rsb	r1, r4, #4064	; 0xfe0
    e538:	adds	r1, #15
    e53a:	bic.w	r5, r5, #3
    e53e:	adds	r3, r1, r5
    e540:	bic.w	r3, r3, #4080	; 0xff0
    e544:	bic.w	r3, r3, #15
    e548:	sub.w	r4, r3, #4096	; 0x1000
    e54c:	cmp.w	r4, #4096	; 0x1000
    e550:	blt.n	e562 <_malloc_trim_r+0x3e>
    e552:	movs	r1, #0
    e554:	mov	r0, r6
    e556:	bl	e260 <_sbrk_r>
    e55a:	ldr	r3, [r7, #8]
    e55c:	add	r3, r5
    e55e:	cmp	r0, r3
    e560:	beq.n	e56c <_malloc_trim_r+0x48>
    e562:	mov	r0, r6
    e564:	bl	d79c <__malloc_unlock>
    e568:	movs	r0, #0
    e56a:	pop	{r3, r4, r5, r6, r7, pc}
    e56c:	negs	r1, r4
    e56e:	mov	r0, r6
    e570:	bl	e260 <_sbrk_r>
    e574:	adds	r0, #1
    e576:	beq.n	e594 <_malloc_trim_r+0x70>
    e578:	ldr	r2, [pc, #64]	; (e5bc <_malloc_trim_r+0x98>)
    e57a:	ldr	r3, [r7, #8]
    e57c:	subs	r5, r5, r4
    e57e:	orr.w	r5, r5, #1
    e582:	str	r5, [r3, #4]
    e584:	ldr	r3, [r2, #0]
    e586:	mov	r0, r6
    e588:	subs	r3, r3, r4
    e58a:	str	r3, [r2, #0]
    e58c:	bl	d79c <__malloc_unlock>
    e590:	movs	r0, #1
    e592:	pop	{r3, r4, r5, r6, r7, pc}
    e594:	movs	r1, #0
    e596:	mov	r0, r6
    e598:	bl	e260 <_sbrk_r>
    e59c:	ldr	r2, [r7, #8]
    e59e:	subs	r3, r0, r2
    e5a0:	cmp	r3, #15
    e5a2:	ble.n	e562 <_malloc_trim_r+0x3e>
    e5a4:	orr.w	r3, r3, #1
    e5a8:	str	r3, [r2, #4]
    e5aa:	ldr	r3, [pc, #20]	; (e5c0 <_malloc_trim_r+0x9c>)
    e5ac:	ldr	r1, [pc, #12]	; (e5bc <_malloc_trim_r+0x98>)
    e5ae:	ldr	r3, [r3, #0]
    e5b0:	subs	r0, r0, r3
    e5b2:	str	r0, [r1, #0]
    e5b4:	b.n	e562 <_malloc_trim_r+0x3e>
    e5b6:	nop
    e5b8:	.word	0x20001600
    e5bc:	.word	0x20006778
    e5c0:	.word	0x20001a08

0000e5c4 <_free_r>:
    e5c4:	cmp	r1, #0
    e5c6:	beq.n	e68c <_free_r+0xc8>
    e5c8:	push	{r3, r4, r5, r6, r7, lr}
    e5ca:	mov	r4, r1
    e5cc:	mov	r6, r0
    e5ce:	bl	d790 <__malloc_lock>
    e5d2:	ldr.w	r2, [r4, #-4]
    e5d6:	ldr	r7, [pc, #492]	; (e7c4 <_free_r+0x200>)
    e5d8:	sub.w	r5, r4, #8
    e5dc:	bic.w	r1, r2, #1
    e5e0:	add.w	ip, r5, r1
    e5e4:	ldr	r0, [r7, #8]
    e5e6:	ldr.w	r3, [ip, #4]
    e5ea:	cmp	r0, ip
    e5ec:	bic.w	r3, r3, #3
    e5f0:	beq.w	e70a <_free_r+0x146>
    e5f4:	lsls	r2, r2, #31
    e5f6:	str.w	r3, [ip, #4]
    e5fa:	bmi.n	e662 <_free_r+0x9e>
    e5fc:	ldr.w	r2, [r4, #-8]
    e600:	subs	r5, r5, r2
    e602:	add	r1, r2
    e604:	ldr	r2, [r5, #8]
    e606:	add.w	r0, r7, #8
    e60a:	cmp	r2, r0
    e60c:	beq.n	e6e4 <_free_r+0x120>
    e60e:	add.w	r4, ip, r3
    e612:	ldr.w	lr, [r4, #4]
    e616:	ldr	r4, [r5, #12]
    e618:	str	r4, [r2, #12]
    e61a:	tst.w	lr, #1
    e61e:	str	r2, [r4, #8]
    e620:	beq.w	e752 <_free_r+0x18e>
    e624:	orr.w	r3, r1, #1
    e628:	str	r3, [r5, #4]
    e62a:	str.w	r1, [ip]
    e62e:	cmp.w	r1, #512	; 0x200
    e632:	bcs.n	e6a0 <_free_r+0xdc>
    e634:	ldr	r0, [r7, #4]
    e636:	lsrs	r3, r1, #3
    e638:	movs	r2, #1
    e63a:	lsrs	r1, r1, #5
    e63c:	adds	r3, #1
    e63e:	lsls	r2, r1
    e640:	orrs	r2, r0
    e642:	ldr.w	r1, [r7, r3, lsl #3]
    e646:	str	r2, [r7, #4]
    e648:	add.w	r2, r7, r3, lsl #3
    e64c:	subs	r2, #8
    e64e:	strd	r1, r2, [r5, #8]
    e652:	str.w	r5, [r7, r3, lsl #3]
    e656:	str	r5, [r1, #12]
    e658:	mov	r0, r6
    e65a:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    e65e:	b.w	d79c <__malloc_unlock>
    e662:	add.w	r2, ip, r3
    e666:	ldr	r2, [r2, #4]
    e668:	lsls	r0, r2, #31
    e66a:	bmi.n	e68e <_free_r+0xca>
    e66c:	add	r1, r3
    e66e:	add.w	r0, r7, #8
    e672:	ldr.w	r3, [ip, #8]
    e676:	cmp	r3, r0
    e678:	beq.n	e762 <_free_r+0x19e>
    e67a:	ldr.w	r2, [ip, #12]
    e67e:	str	r2, [r3, #12]
    e680:	str	r3, [r2, #8]
    e682:	orr.w	r3, r1, #1
    e686:	str	r3, [r5, #4]
    e688:	str	r1, [r5, r1]
    e68a:	b.n	e62e <_free_r+0x6a>
    e68c:	bx	lr
    e68e:	orr.w	r3, r1, #1
    e692:	cmp.w	r1, #512	; 0x200
    e696:	str.w	r3, [r4, #-4]
    e69a:	str.w	r1, [ip]
    e69e:	bcc.n	e634 <_free_r+0x70>
    e6a0:	cmp.w	r1, #2560	; 0xa00
    e6a4:	mov.w	r3, r1, lsr #9
    e6a8:	bcs.n	e73c <_free_r+0x178>
    e6aa:	lsrs	r3, r1, #6
    e6ac:	add.w	r0, r3, #57	; 0x39
    e6b0:	add.w	r2, r3, #56	; 0x38
    e6b4:	lsls	r3, r0, #3
    e6b6:	adds	r0, r7, r3
    e6b8:	ldr	r3, [r7, r3]
    e6ba:	subs	r0, #8
    e6bc:	cmp	r0, r3
    e6be:	beq.n	e774 <_free_r+0x1b0>
    e6c0:	ldr	r2, [r3, #4]
    e6c2:	bic.w	r2, r2, #3
    e6c6:	cmp	r2, r1
    e6c8:	bls.n	e6d0 <_free_r+0x10c>
    e6ca:	ldr	r3, [r3, #8]
    e6cc:	cmp	r0, r3
    e6ce:	bne.n	e6c0 <_free_r+0xfc>
    e6d0:	ldr	r0, [r3, #12]
    e6d2:	strd	r3, r0, [r5, #8]
    e6d6:	str	r5, [r0, #8]
    e6d8:	str	r5, [r3, #12]
    e6da:	mov	r0, r6
    e6dc:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    e6e0:	b.w	d79c <__malloc_unlock>
    e6e4:	add.w	r2, ip, r3
    e6e8:	ldr	r2, [r2, #4]
    e6ea:	lsls	r2, r2, #31
    e6ec:	bmi.n	e7b6 <_free_r+0x1f2>
    e6ee:	add	r3, r1
    e6f0:	ldrd	r1, r2, [ip, #8]
    e6f4:	str	r2, [r1, #12]
    e6f6:	str	r1, [r2, #8]
    e6f8:	orr.w	r2, r3, #1
    e6fc:	str	r2, [r5, #4]
    e6fe:	mov	r0, r6
    e700:	str	r3, [r5, r3]
    e702:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    e706:	b.w	d79c <__malloc_unlock>
    e70a:	add	r3, r1
    e70c:	lsls	r1, r2, #31
    e70e:	bmi.n	e720 <_free_r+0x15c>
    e710:	ldr.w	r2, [r4, #-8]
    e714:	subs	r5, r5, r2
    e716:	add	r3, r2
    e718:	ldrd	r1, r2, [r5, #8]
    e71c:	str	r2, [r1, #12]
    e71e:	str	r1, [r2, #8]
    e720:	orr.w	r2, r3, #1
    e724:	str	r2, [r5, #4]
    e726:	ldr	r2, [pc, #160]	; (e7c8 <_free_r+0x204>)
    e728:	str	r5, [r7, #8]
    e72a:	ldr	r2, [r2, #0]
    e72c:	cmp	r2, r3
    e72e:	bhi.n	e658 <_free_r+0x94>
    e730:	ldr	r3, [pc, #152]	; (e7cc <_free_r+0x208>)
    e732:	mov	r0, r6
    e734:	ldr	r1, [r3, #0]
    e736:	bl	e524 <_malloc_trim_r>
    e73a:	b.n	e658 <_free_r+0x94>
    e73c:	cmp	r3, #20
    e73e:	bls.n	e756 <_free_r+0x192>
    e740:	cmp	r3, #84	; 0x54
    e742:	bhi.n	e784 <_free_r+0x1c0>
    e744:	lsrs	r3, r1, #12
    e746:	add.w	r0, r3, #111	; 0x6f
    e74a:	add.w	r2, r3, #110	; 0x6e
    e74e:	lsls	r3, r0, #3
    e750:	b.n	e6b6 <_free_r+0xf2>
    e752:	add	r1, r3
    e754:	b.n	e672 <_free_r+0xae>
    e756:	add.w	r0, r3, #92	; 0x5c
    e75a:	add.w	r2, r3, #91	; 0x5b
    e75e:	lsls	r3, r0, #3
    e760:	b.n	e6b6 <_free_r+0xf2>
    e762:	orr.w	r3, r1, #1
    e766:	strd	r5, r5, [r7, #16]
    e76a:	strd	r0, r0, [r5, #8]
    e76e:	str	r3, [r5, #4]
    e770:	str	r1, [r5, r1]
    e772:	b.n	e658 <_free_r+0x94>
    e774:	ldr	r1, [r7, #4]
    e776:	asrs	r2, r2, #2
    e778:	movs	r4, #1
    e77a:	lsl.w	r2, r4, r2
    e77e:	orrs	r2, r1
    e780:	str	r2, [r7, #4]
    e782:	b.n	e6d2 <_free_r+0x10e>
    e784:	cmp.w	r3, #340	; 0x154
    e788:	bhi.n	e798 <_free_r+0x1d4>
    e78a:	lsrs	r3, r1, #15
    e78c:	add.w	r0, r3, #120	; 0x78
    e790:	add.w	r2, r3, #119	; 0x77
    e794:	lsls	r3, r0, #3
    e796:	b.n	e6b6 <_free_r+0xf2>
    e798:	movw	r2, #1364	; 0x554
    e79c:	cmp	r3, r2
    e79e:	bhi.n	e7ae <_free_r+0x1ea>
    e7a0:	lsrs	r3, r1, #18
    e7a2:	add.w	r0, r3, #125	; 0x7d
    e7a6:	add.w	r2, r3, #124	; 0x7c
    e7aa:	lsls	r3, r0, #3
    e7ac:	b.n	e6b6 <_free_r+0xf2>
    e7ae:	mov.w	r3, #1016	; 0x3f8
    e7b2:	movs	r2, #126	; 0x7e
    e7b4:	b.n	e6b6 <_free_r+0xf2>
    e7b6:	orr.w	r3, r1, #1
    e7ba:	str	r3, [r5, #4]
    e7bc:	str.w	r1, [ip]
    e7c0:	b.n	e658 <_free_r+0x94>
    e7c2:	nop
    e7c4:	.word	0x20001600
    e7c8:	.word	0x20001a0c
    e7cc:	.word	0x200067a8

0000e7d0 <__ascii_mbtowc>:
    e7d0:	sub	sp, #8
    e7d2:	cbz	r1, e7e8 <__ascii_mbtowc+0x18>
    e7d4:	cbz	r2, e7ee <__ascii_mbtowc+0x1e>
    e7d6:	cbz	r3, e7f4 <__ascii_mbtowc+0x24>
    e7d8:	ldrb	r3, [r2, #0]
    e7da:	str	r3, [r1, #0]
    e7dc:	ldrb	r2, [r2, #0]
    e7de:	subs	r0, r2, #0
    e7e0:	it	ne
    e7e2:	movne	r0, #1
    e7e4:	add	sp, #8
    e7e6:	bx	lr
    e7e8:	add	r1, sp, #4
    e7ea:	cmp	r2, #0
    e7ec:	bne.n	e7d6 <__ascii_mbtowc+0x6>
    e7ee:	mov	r0, r2
    e7f0:	add	sp, #8
    e7f2:	bx	lr
    e7f4:	mvn.w	r0, #1
    e7f8:	b.n	e7e4 <__ascii_mbtowc+0x14>
    e7fa:	nop

0000e7fc <_Balloc>:
    e7fc:	ldr	r3, [r0, #68]	; 0x44
    e7fe:	push	{r4, r5, r6, lr}
    e800:	mov	r5, r0
    e802:	mov	r4, r1
    e804:	cbz	r3, e81a <_Balloc+0x1e>
    e806:	ldr.w	r0, [r3, r4, lsl #2]
    e80a:	cbz	r0, e82e <_Balloc+0x32>
    e80c:	ldr	r2, [r0, #0]
    e80e:	str.w	r2, [r3, r4, lsl #2]
    e812:	movs	r3, #0
    e814:	strd	r3, r3, [r0, #12]
    e818:	pop	{r4, r5, r6, pc}
    e81a:	movs	r2, #33	; 0x21
    e81c:	movs	r1, #4
    e81e:	bl	10de0 <_calloc_r>
    e822:	mov	r3, r0
    e824:	str	r0, [r5, #68]	; 0x44
    e826:	cmp	r0, #0
    e828:	bne.n	e806 <_Balloc+0xa>
    e82a:	movs	r0, #0
    e82c:	pop	{r4, r5, r6, pc}
    e82e:	movs	r1, #1
    e830:	lsl.w	r6, r1, r4
    e834:	adds	r2, r6, #5
    e836:	lsls	r2, r2, #2
    e838:	mov	r0, r5
    e83a:	bl	10de0 <_calloc_r>
    e83e:	cmp	r0, #0
    e840:	beq.n	e82a <_Balloc+0x2e>
    e842:	strd	r4, r6, [r0, #4]
    e846:	b.n	e812 <_Balloc+0x16>

0000e848 <_Bfree>:
    e848:	cbz	r1, e858 <_Bfree+0x10>
    e84a:	ldr	r3, [r0, #68]	; 0x44
    e84c:	ldr	r2, [r1, #4]
    e84e:	ldr.w	r0, [r3, r2, lsl #2]
    e852:	str	r0, [r1, #0]
    e854:	str.w	r1, [r3, r2, lsl #2]
    e858:	bx	lr
    e85a:	nop

0000e85c <__multadd>:
    e85c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e860:	ldr	r6, [r1, #16]
    e862:	mov	r8, r0
    e864:	mov	r7, r1
    e866:	mov	r5, r3
    e868:	add.w	lr, r1, #20
    e86c:	movs	r0, #0
    e86e:	ldr.w	r1, [lr]
    e872:	uxth	r4, r1
    e874:	mla	r3, r2, r4, r5
    e878:	lsrs	r1, r1, #16
    e87a:	mov.w	ip, r3, lsr #16
    e87e:	mla	ip, r2, r1, ip
    e882:	adds	r0, #1
    e884:	uxth	r4, r3
    e886:	add.w	r4, r4, ip, lsl #16
    e88a:	cmp	r6, r0
    e88c:	str.w	r4, [lr], #4
    e890:	mov.w	r5, ip, lsr #16
    e894:	bgt.n	e86e <__multadd+0x12>
    e896:	cbz	r5, e8a8 <__multadd+0x4c>
    e898:	ldr	r3, [r7, #8]
    e89a:	cmp	r3, r6
    e89c:	ble.n	e8ae <__multadd+0x52>
    e89e:	add.w	r3, r7, r6, lsl #2
    e8a2:	adds	r6, #1
    e8a4:	str	r5, [r3, #20]
    e8a6:	str	r6, [r7, #16]
    e8a8:	mov	r0, r7
    e8aa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e8ae:	ldr	r1, [r7, #4]
    e8b0:	mov	r0, r8
    e8b2:	adds	r1, #1
    e8b4:	bl	e7fc <_Balloc>
    e8b8:	mov	r4, r0
    e8ba:	cbz	r0, e8ea <__multadd+0x8e>
    e8bc:	ldr	r2, [r7, #16]
    e8be:	adds	r2, #2
    e8c0:	add.w	r1, r7, #12
    e8c4:	lsls	r2, r2, #2
    e8c6:	adds	r0, #12
    e8c8:	bl	a0a4 <memcpy>
    e8cc:	ldr.w	r3, [r8, #68]	; 0x44
    e8d0:	ldr	r2, [r7, #4]
    e8d2:	ldr.w	r1, [r3, r2, lsl #2]
    e8d6:	str	r1, [r7, #0]
    e8d8:	str.w	r7, [r3, r2, lsl #2]
    e8dc:	mov	r7, r4
    e8de:	add.w	r3, r7, r6, lsl #2
    e8e2:	adds	r6, #1
    e8e4:	str	r5, [r3, #20]
    e8e6:	str	r6, [r7, #16]
    e8e8:	b.n	e8a8 <__multadd+0x4c>
    e8ea:	ldr	r3, [pc, #12]	; (e8f8 <__multadd+0x9c>)
    e8ec:	ldr	r0, [pc, #12]	; (e8fc <__multadd+0xa0>)
    e8ee:	mov	r2, r4
    e8f0:	movs	r1, #186	; 0xba
    e8f2:	bl	10da0 <__assert_func>
    e8f6:	nop
    e8f8:	.word	0x20000c78
    e8fc:	.word	0x20000c8c

0000e900 <__hi0bits>:
    e900:	lsrs	r3, r0, #16
    e902:	lsls	r3, r3, #16
    e904:	cbnz	r3, e93c <__hi0bits+0x3c>
    e906:	lsls	r0, r0, #16
    e908:	movs	r3, #16
    e90a:	tst.w	r0, #4278190080	; 0xff000000
    e90e:	itt	eq
    e910:	lsleq	r0, r0, #8
    e912:	addeq	r3, #8
    e914:	tst.w	r0, #4026531840	; 0xf0000000
    e918:	itt	eq
    e91a:	lsleq	r0, r0, #4
    e91c:	addeq	r3, #4
    e91e:	tst.w	r0, #3221225472	; 0xc0000000
    e922:	itt	eq
    e924:	lsleq	r0, r0, #2
    e926:	addeq	r3, #2
    e928:	cmp	r0, #0
    e92a:	blt.n	e938 <__hi0bits+0x38>
    e92c:	tst.w	r0, #1073741824	; 0x40000000
    e930:	add.w	r3, r3, #1
    e934:	it	eq
    e936:	moveq	r3, #32
    e938:	mov	r0, r3
    e93a:	bx	lr
    e93c:	movs	r3, #0
    e93e:	b.n	e90a <__hi0bits+0xa>

0000e940 <__lo0bits>:
    e940:	ldr	r3, [r0, #0]
    e942:	ands.w	r2, r3, #7
    e946:	beq.n	e95a <__lo0bits+0x1a>
    e948:	lsls	r1, r3, #31
    e94a:	bmi.n	e98c <__lo0bits+0x4c>
    e94c:	lsls	r2, r3, #30
    e94e:	bpl.n	e996 <__lo0bits+0x56>
    e950:	lsrs	r3, r3, #1
    e952:	str	r3, [r0, #0]
    e954:	movs	r2, #1
    e956:	mov	r0, r2
    e958:	bx	lr
    e95a:	uxth	r1, r3
    e95c:	cbnz	r1, e962 <__lo0bits+0x22>
    e95e:	lsrs	r3, r3, #16
    e960:	movs	r2, #16
    e962:	uxtb	r1, r3
    e964:	cbnz	r1, e96a <__lo0bits+0x2a>
    e966:	adds	r2, #8
    e968:	lsrs	r3, r3, #8
    e96a:	lsls	r1, r3, #28
    e96c:	itt	eq
    e96e:	lsreq	r3, r3, #4
    e970:	addeq	r2, #4
    e972:	lsls	r1, r3, #30
    e974:	itt	eq
    e976:	lsreq	r3, r3, #2
    e978:	addeq	r2, #2
    e97a:	lsls	r1, r3, #31
    e97c:	bmi.n	e986 <__lo0bits+0x46>
    e97e:	lsrs	r3, r3, #1
    e980:	add.w	r2, r2, #1
    e984:	beq.n	e992 <__lo0bits+0x52>
    e986:	str	r3, [r0, #0]
    e988:	mov	r0, r2
    e98a:	bx	lr
    e98c:	movs	r2, #0
    e98e:	mov	r0, r2
    e990:	bx	lr
    e992:	movs	r2, #32
    e994:	b.n	e956 <__lo0bits+0x16>
    e996:	lsrs	r3, r3, #2
    e998:	movs	r2, #2
    e99a:	str	r3, [r0, #0]
    e99c:	mov	r0, r2
    e99e:	bx	lr

0000e9a0 <__i2b>:
    e9a0:	push	{r3, r4, r5, lr}
    e9a2:	ldr	r3, [r0, #68]	; 0x44
    e9a4:	mov	r4, r0
    e9a6:	mov	r5, r1
    e9a8:	cbz	r3, e9be <__i2b+0x1e>
    e9aa:	ldr	r0, [r3, #4]
    e9ac:	cbz	r0, e9dc <__i2b+0x3c>
    e9ae:	ldr	r2, [r0, #0]
    e9b0:	str	r2, [r3, #4]
    e9b2:	movs	r2, #0
    e9b4:	movs	r3, #1
    e9b6:	strd	r3, r5, [r0, #16]
    e9ba:	str	r2, [r0, #12]
    e9bc:	pop	{r3, r4, r5, pc}
    e9be:	movs	r2, #33	; 0x21
    e9c0:	movs	r1, #4
    e9c2:	bl	10de0 <_calloc_r>
    e9c6:	mov	r3, r0
    e9c8:	str	r0, [r4, #68]	; 0x44
    e9ca:	cmp	r0, #0
    e9cc:	bne.n	e9aa <__i2b+0xa>
    e9ce:	ldr	r3, [pc, #36]	; (e9f4 <__i2b+0x54>)
    e9d0:	ldr	r0, [pc, #36]	; (e9f8 <__i2b+0x58>)
    e9d2:	movs	r2, #0
    e9d4:	movw	r1, #325	; 0x145
    e9d8:	bl	10da0 <__assert_func>
    e9dc:	movs	r2, #28
    e9de:	movs	r1, #1
    e9e0:	mov	r0, r4
    e9e2:	bl	10de0 <_calloc_r>
    e9e6:	cmp	r0, #0
    e9e8:	beq.n	e9ce <__i2b+0x2e>
    e9ea:	movs	r2, #1
    e9ec:	movs	r3, #2
    e9ee:	strd	r2, r3, [r0, #4]
    e9f2:	b.n	e9b2 <__i2b+0x12>
    e9f4:	.word	0x20000c78
    e9f8:	.word	0x20000c8c

0000e9fc <__multiply>:
    e9fc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ea00:	ldr	r6, [r1, #16]
    ea02:	ldr	r5, [r2, #16]
    ea04:	cmp	r6, r5
    ea06:	sub	sp, #20
    ea08:	mov	r8, r1
    ea0a:	mov	r4, r2
    ea0c:	blt.n	ea1a <__multiply+0x1e>
    ea0e:	mov	r2, r5
    ea10:	mov	r3, r4
    ea12:	mov	r5, r6
    ea14:	mov	r4, r1
    ea16:	mov	r6, r2
    ea18:	mov	r8, r3
    ea1a:	ldr	r3, [r4, #8]
    ea1c:	ldr	r1, [r4, #4]
    ea1e:	adds	r7, r5, r6
    ea20:	cmp	r3, r7
    ea22:	it	lt
    ea24:	addlt	r1, #1
    ea26:	bl	e7fc <_Balloc>
    ea2a:	str	r0, [sp, #4]
    ea2c:	cmp	r0, #0
    ea2e:	beq.w	eb40 <__multiply+0x144>
    ea32:	ldr	r3, [sp, #4]
    ea34:	add.w	r9, r3, #20
    ea38:	add.w	sl, r9, r7, lsl #2
    ea3c:	cmp	r9, sl
    ea3e:	bcs.n	ea4c <__multiply+0x50>
    ea40:	mov	r3, r9
    ea42:	movs	r2, #0
    ea44:	str.w	r2, [r3], #4
    ea48:	cmp	sl, r3
    ea4a:	bhi.n	ea44 <__multiply+0x48>
    ea4c:	add.w	r8, r8, #20
    ea50:	add.w	fp, r8, r6, lsl #2
    ea54:	add.w	r3, r4, #20
    ea58:	cmp	r8, fp
    ea5a:	mov	r2, r3
    ea5c:	add.w	r5, r3, r5, lsl #2
    ea60:	bcs.n	eb22 <__multiply+0x126>
    ea62:	subs	r3, r5, r4
    ea64:	subs	r3, #21
    ea66:	bic.w	r3, r3, #3
    ea6a:	adds	r3, #4
    ea6c:	adds	r4, #21
    ea6e:	cmp	r5, r4
    ea70:	it	cc
    ea72:	movcc	r3, #4
    ea74:	strd	sl, r7, [sp, #8]
    ea78:	mov	ip, r5
    ea7a:	mov	r7, r3
    ea7c:	mov	sl, r2
    ea7e:	b.n	ea8c <__multiply+0x90>
    ea80:	lsrs	r1, r1, #16
    ea82:	bne.n	ead8 <__multiply+0xdc>
    ea84:	cmp	fp, r8
    ea86:	add.w	r9, r9, #4
    ea8a:	bls.n	eb1e <__multiply+0x122>
    ea8c:	ldr.w	r1, [r8], #4
    ea90:	uxth	r5, r1
    ea92:	cmp	r5, #0
    ea94:	beq.n	ea80 <__multiply+0x84>
    ea96:	mov	r6, sl
    ea98:	mov	r4, r9
    ea9a:	movs	r3, #0
    ea9c:	ldr.w	r1, [r6], #4
    eaa0:	ldr	r2, [r4, #0]
    eaa2:	uxth.w	lr, r1
    eaa6:	uxth	r0, r2
    eaa8:	lsrs	r1, r1, #16
    eaaa:	mla	r0, r5, lr, r0
    eaae:	lsrs	r2, r2, #16
    eab0:	add	r3, r0
    eab2:	mla	r2, r5, r1, r2
    eab6:	add.w	r2, r2, r3, lsr #16
    eaba:	uxth	r3, r3
    eabc:	orr.w	r3, r3, r2, lsl #16
    eac0:	cmp	ip, r6
    eac2:	str.w	r3, [r4], #4
    eac6:	mov.w	r3, r2, lsr #16
    eaca:	bhi.n	ea9c <__multiply+0xa0>
    eacc:	str.w	r3, [r9, r7]
    ead0:	ldr.w	r1, [r8, #-4]
    ead4:	lsrs	r1, r1, #16
    ead6:	beq.n	ea84 <__multiply+0x88>
    ead8:	ldr.w	r3, [r9]
    eadc:	mov	r0, sl
    eade:	mov	r2, r3
    eae0:	mov	r4, r9
    eae2:	movs	r6, #0
    eae4:	ldrh	r5, [r0, #0]
    eae6:	lsrs	r2, r2, #16
    eae8:	mla	r2, r1, r5, r2
    eaec:	add	r6, r2
    eaee:	uxth	r3, r3
    eaf0:	orr.w	r3, r3, r6, lsl #16
    eaf4:	str.w	r3, [r4], #4
    eaf8:	ldr.w	r5, [r0], #4
    eafc:	ldr	r2, [r4, #0]
    eafe:	lsrs	r5, r5, #16
    eb00:	uxth	r3, r2
    eb02:	mla	r3, r1, r5, r3
    eb06:	add.w	r3, r3, r6, lsr #16
    eb0a:	cmp	ip, r0
    eb0c:	mov.w	r6, r3, lsr #16
    eb10:	bhi.n	eae4 <__multiply+0xe8>
    eb12:	cmp	fp, r8
    eb14:	str.w	r3, [r9, r7]
    eb18:	add.w	r9, r9, #4
    eb1c:	bhi.n	ea8c <__multiply+0x90>
    eb1e:	ldrd	sl, r7, [sp, #8]
    eb22:	cmp	r7, #0
    eb24:	bgt.n	eb2c <__multiply+0x130>
    eb26:	b.n	eb34 <__multiply+0x138>
    eb28:	subs	r7, #1
    eb2a:	beq.n	eb34 <__multiply+0x138>
    eb2c:	ldr.w	r3, [sl, #-4]!
    eb30:	cmp	r3, #0
    eb32:	beq.n	eb28 <__multiply+0x12c>
    eb34:	ldr	r3, [sp, #4]
    eb36:	mov	r0, r3
    eb38:	str	r7, [r3, #16]
    eb3a:	add	sp, #20
    eb3c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    eb40:	ldr	r3, [pc, #12]	; (eb50 <__multiply+0x154>)
    eb42:	ldr	r0, [pc, #16]	; (eb54 <__multiply+0x158>)
    eb44:	ldr	r2, [sp, #4]
    eb46:	mov.w	r1, #354	; 0x162
    eb4a:	bl	10da0 <__assert_func>
    eb4e:	nop
    eb50:	.word	0x20000c78
    eb54:	.word	0x20000c8c

0000eb58 <__pow5mult>:
    eb58:	ands.w	r3, r2, #3
    eb5c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    eb60:	mov	r4, r2
    eb62:	mov	r6, r0
    eb64:	bne.n	ebcc <__pow5mult+0x74>
    eb66:	mov	r5, r1
    eb68:	asrs	r4, r4, #2
    eb6a:	beq.n	ebae <__pow5mult+0x56>
    eb6c:	ldr.w	r8, [r6, #64]	; 0x40
    eb70:	cmp.w	r8, #0
    eb74:	beq.n	ebde <__pow5mult+0x86>
    eb76:	lsls	r3, r4, #31
    eb78:	mov.w	r7, #0
    eb7c:	bmi.n	eb8e <__pow5mult+0x36>
    eb7e:	asrs	r4, r4, #1
    eb80:	beq.n	ebae <__pow5mult+0x56>
    eb82:	ldr.w	r0, [r8]
    eb86:	cbz	r0, ebb4 <__pow5mult+0x5c>
    eb88:	mov	r8, r0
    eb8a:	lsls	r3, r4, #31
    eb8c:	bpl.n	eb7e <__pow5mult+0x26>
    eb8e:	mov	r2, r8
    eb90:	mov	r1, r5
    eb92:	mov	r0, r6
    eb94:	bl	e9fc <__multiply>
    eb98:	cbz	r5, ebc8 <__pow5mult+0x70>
    eb9a:	ldr	r1, [r5, #4]
    eb9c:	ldr	r3, [r6, #68]	; 0x44
    eb9e:	asrs	r4, r4, #1
    eba0:	ldr.w	r2, [r3, r1, lsl #2]
    eba4:	str	r2, [r5, #0]
    eba6:	str.w	r5, [r3, r1, lsl #2]
    ebaa:	mov	r5, r0
    ebac:	bne.n	eb82 <__pow5mult+0x2a>
    ebae:	mov	r0, r5
    ebb0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ebb4:	mov	r2, r8
    ebb6:	mov	r1, r8
    ebb8:	mov	r0, r6
    ebba:	bl	e9fc <__multiply>
    ebbe:	str.w	r0, [r8]
    ebc2:	str	r7, [r0, #0]
    ebc4:	mov	r8, r0
    ebc6:	b.n	eb8a <__pow5mult+0x32>
    ebc8:	mov	r5, r0
    ebca:	b.n	eb7e <__pow5mult+0x26>
    ebcc:	subs	r3, #1
    ebce:	ldr	r2, [pc, #60]	; (ec0c <__pow5mult+0xb4>)
    ebd0:	ldr.w	r2, [r2, r3, lsl #2]
    ebd4:	movs	r3, #0
    ebd6:	bl	e85c <__multadd>
    ebda:	mov	r5, r0
    ebdc:	b.n	eb68 <__pow5mult+0x10>
    ebde:	movs	r1, #1
    ebe0:	mov	r0, r6
    ebe2:	bl	e7fc <_Balloc>
    ebe6:	mov	r8, r0
    ebe8:	cbz	r0, ebfc <__pow5mult+0xa4>
    ebea:	movs	r3, #1
    ebec:	movw	r2, #625	; 0x271
    ebf0:	strd	r3, r2, [r0, #16]
    ebf4:	movs	r3, #0
    ebf6:	str	r0, [r6, #64]	; 0x40
    ebf8:	str	r3, [r0, #0]
    ebfa:	b.n	eb76 <__pow5mult+0x1e>
    ebfc:	ldr	r3, [pc, #16]	; (ec10 <__pow5mult+0xb8>)
    ebfe:	ldr	r0, [pc, #20]	; (ec14 <__pow5mult+0xbc>)
    ec00:	mov	r2, r8
    ec02:	movw	r1, #325	; 0x145
    ec06:	bl	10da0 <__assert_func>
    ec0a:	nop
    ec0c:	.word	0x20001248
    ec10:	.word	0x20000c78
    ec14:	.word	0x20000c8c

0000ec18 <__lshift>:
    ec18:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ec1c:	mov	r5, r1
    ec1e:	mov	r4, r2
    ec20:	ldr	r7, [r5, #16]
    ec22:	ldr	r3, [r5, #8]
    ec24:	ldr	r1, [r1, #4]
    ec26:	add.w	r7, r7, r2, asr #5
    ec2a:	adds	r6, r7, #1
    ec2c:	cmp	r6, r3
    ec2e:	mov	r8, r0
    ec30:	mov.w	r9, r2, asr #5
    ec34:	ble.n	ec40 <__lshift+0x28>
    ec36:	lsls	r3, r3, #1
    ec38:	cmp	r6, r3
    ec3a:	add.w	r1, r1, #1
    ec3e:	bgt.n	ec36 <__lshift+0x1e>
    ec40:	mov	r0, r8
    ec42:	bl	e7fc <_Balloc>
    ec46:	mov	ip, r0
    ec48:	cmp	r0, #0
    ec4a:	beq.n	ecf2 <__lshift+0xda>
    ec4c:	cmp.w	r9, #0
    ec50:	add.w	r2, r0, #20
    ec54:	ble.n	ec74 <__lshift+0x5c>
    ec56:	add.w	r1, r9, #5
    ec5a:	mov.w	lr, r1, lsl #2
    ec5e:	mov	r3, r2
    ec60:	add.w	r1, r0, r1, lsl #2
    ec64:	movs	r0, #0
    ec66:	str.w	r0, [r3], #4
    ec6a:	cmp	r3, r1
    ec6c:	bne.n	ec66 <__lshift+0x4e>
    ec6e:	sub.w	r3, lr, #20
    ec72:	add	r2, r3
    ec74:	ldr	r1, [r5, #16]
    ec76:	add.w	r3, r5, #20
    ec7a:	ands.w	lr, r4, #31
    ec7e:	add.w	r1, r3, r1, lsl #2
    ec82:	beq.n	ece2 <__lshift+0xca>
    ec84:	rsb	r9, lr, #32
    ec88:	mov	r0, r2
    ec8a:	mov.w	sl, #0
    ec8e:	ldr	r4, [r3, #0]
    ec90:	lsl.w	r4, r4, lr
    ec94:	orr.w	r4, r4, sl
    ec98:	str.w	r4, [r0], #4
    ec9c:	ldr.w	r4, [r3], #4
    eca0:	cmp	r1, r3
    eca2:	lsr.w	sl, r4, r9
    eca6:	bhi.n	ec8e <__lshift+0x76>
    eca8:	subs	r3, r1, r5
    ecaa:	subs	r3, #21
    ecac:	bic.w	r3, r3, #3
    ecb0:	adds	r3, #4
    ecb2:	add.w	r0, r5, #21
    ecb6:	cmp	r1, r0
    ecb8:	it	cc
    ecba:	movcc	r3, #4
    ecbc:	cmp.w	sl, #0
    ecc0:	it	ne
    ecc2:	movne	r7, r6
    ecc4:	str.w	sl, [r2, r3]
    ecc8:	ldr.w	r3, [r8, #68]	; 0x44
    eccc:	ldr	r2, [r5, #4]
    ecce:	str.w	r7, [ip, #16]
    ecd2:	ldr.w	r1, [r3, r2, lsl #2]
    ecd6:	str	r1, [r5, #0]
    ecd8:	mov	r0, ip
    ecda:	str.w	r5, [r3, r2, lsl #2]
    ecde:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ece2:	subs	r2, #4
    ece4:	ldr.w	r0, [r3], #4
    ece8:	str.w	r0, [r2, #4]!
    ecec:	cmp	r1, r3
    ecee:	bhi.n	ece4 <__lshift+0xcc>
    ecf0:	b.n	ecc8 <__lshift+0xb0>
    ecf2:	ldr	r3, [pc, #12]	; (ed00 <__lshift+0xe8>)
    ecf4:	ldr	r0, [pc, #12]	; (ed04 <__lshift+0xec>)
    ecf6:	mov	r2, ip
    ecf8:	mov.w	r1, #478	; 0x1de
    ecfc:	bl	10da0 <__assert_func>
    ed00:	.word	0x20000c78
    ed04:	.word	0x20000c8c

0000ed08 <__mcmp>:
    ed08:	ldr	r3, [r1, #16]
    ed0a:	mov	ip, r0
    ed0c:	ldr	r0, [r0, #16]
    ed0e:	subs	r0, r0, r3
    ed10:	bne.n	ed40 <__mcmp+0x38>
    ed12:	add.w	ip, ip, #20
    ed16:	adds	r1, #20
    ed18:	add.w	r2, ip, r3, lsl #2
    ed1c:	push	{r4}
    ed1e:	add.w	r3, r1, r3, lsl #2
    ed22:	b.n	ed28 <__mcmp+0x20>
    ed24:	cmp	ip, r2
    ed26:	bcs.n	ed3a <__mcmp+0x32>
    ed28:	ldr.w	r4, [r2, #-4]!
    ed2c:	ldr.w	r1, [r3, #-4]!
    ed30:	cmp	r4, r1
    ed32:	beq.n	ed24 <__mcmp+0x1c>
    ed34:	bcs.n	ed42 <__mcmp+0x3a>
    ed36:	mov.w	r0, #4294967295
    ed3a:	ldr.w	r4, [sp], #4
    ed3e:	bx	lr
    ed40:	bx	lr
    ed42:	movs	r0, #1
    ed44:	ldr.w	r4, [sp], #4
    ed48:	bx	lr
    ed4a:	nop

0000ed4c <__mdiff>:
    ed4c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ed50:	ldr	r7, [r1, #16]
    ed52:	ldr	r3, [r2, #16]
    ed54:	subs	r7, r7, r3
    ed56:	cmp	r7, #0
    ed58:	mov	r6, r1
    ed5a:	mov	r8, r2
    ed5c:	bne.n	ee5e <__mdiff+0x112>
    ed5e:	add.w	r5, r1, #20
    ed62:	adds	r2, #20
    ed64:	add.w	r2, r2, r3, lsl #2
    ed68:	add.w	r3, r5, r3, lsl #2
    ed6c:	b.n	ed72 <__mdiff+0x26>
    ed6e:	cmp	r5, r3
    ed70:	bcs.n	ee64 <__mdiff+0x118>
    ed72:	ldr.w	r1, [r3, #-4]!
    ed76:	ldr.w	r4, [r2, #-4]!
    ed7a:	cmp	r1, r4
    ed7c:	beq.n	ed6e <__mdiff+0x22>
    ed7e:	bcc.n	ee54 <__mdiff+0x108>
    ed80:	ldr	r1, [r6, #4]
    ed82:	bl	e7fc <_Balloc>
    ed86:	mov	r9, r0
    ed88:	cmp	r0, #0
    ed8a:	beq.n	ee7c <__mdiff+0x130>
    ed8c:	ldr	r5, [r6, #16]
    ed8e:	ldr.w	r2, [r8, #16]
    ed92:	str	r7, [r0, #12]
    ed94:	add.w	lr, r8, #20
    ed98:	add.w	r0, r6, #20
    ed9c:	add.w	sl, r9, #20
    eda0:	add.w	r1, r6, #16
    eda4:	add.w	r2, lr, r2, lsl #2
    eda8:	add.w	r7, r0, r5, lsl #2
    edac:	mov	r6, sl
    edae:	mov.w	ip, #0
    edb2:	ldr.w	r4, [lr], #4
    edb6:	ldr.w	fp, [r1, #4]!
    edba:	uxth	r3, r4
    edbc:	uxtah	ip, ip, fp
    edc0:	sub.w	r3, ip, r3
    edc4:	mov.w	ip, r4, lsr #16
    edc8:	rsb	ip, ip, fp, lsr #16
    edcc:	add.w	ip, ip, r3, asr #16
    edd0:	uxth	r3, r3
    edd2:	orr.w	r3, r3, ip, lsl #16
    edd6:	cmp	r2, lr
    edd8:	str.w	r3, [r6], #4
    eddc:	mov.w	ip, ip, asr #16
    ede0:	bhi.n	edb2 <__mdiff+0x66>
    ede2:	sub.w	r1, r2, r8
    ede6:	subs	r1, #21
    ede8:	add.w	r8, r8, #21
    edec:	cmp	r2, r8
    edee:	bic.w	r4, r1, #3
    edf2:	add.w	r4, r4, #4
    edf6:	it	cc
    edf8:	movcc	r4, #4
    edfa:	add	r0, r4
    edfc:	bic.w	r2, r1, #3
    ee00:	it	cc
    ee02:	movcc	r2, #0
    ee04:	cmp	r7, r0
    ee06:	add	r2, sl
    ee08:	add	r4, sl
    ee0a:	bls.n	ee3e <__mdiff+0xf2>
    ee0c:	mov	r6, r4
    ee0e:	mov	r1, r0
    ee10:	ldr.w	r3, [r1], #4
    ee14:	uxtah	ip, ip, r3
    ee18:	mov.w	r2, ip, asr #16
    ee1c:	add.w	r2, r2, r3, lsr #16
    ee20:	uxth.w	ip, ip
    ee24:	orr.w	r3, ip, r2, lsl #16
    ee28:	cmp	r7, r1
    ee2a:	str.w	r3, [r6], #4
    ee2e:	mov.w	ip, r2, asr #16
    ee32:	bhi.n	ee10 <__mdiff+0xc4>
    ee34:	subs	r7, #1
    ee36:	subs	r7, r7, r0
    ee38:	bic.w	r7, r7, #3
    ee3c:	adds	r2, r4, r7
    ee3e:	cbnz	r3, ee4a <__mdiff+0xfe>
    ee40:	ldr.w	r3, [r2, #-4]!
    ee44:	subs	r5, #1
    ee46:	cmp	r3, #0
    ee48:	beq.n	ee40 <__mdiff+0xf4>
    ee4a:	str.w	r5, [r9, #16]
    ee4e:	mov	r0, r9
    ee50:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ee54:	mov	r3, r6
    ee56:	movs	r7, #1
    ee58:	mov	r6, r8
    ee5a:	mov	r8, r3
    ee5c:	b.n	ed80 <__mdiff+0x34>
    ee5e:	blt.n	ee54 <__mdiff+0x108>
    ee60:	movs	r7, #0
    ee62:	b.n	ed80 <__mdiff+0x34>
    ee64:	movs	r1, #0
    ee66:	bl	e7fc <_Balloc>
    ee6a:	mov	r9, r0
    ee6c:	cbz	r0, ee8a <__mdiff+0x13e>
    ee6e:	movs	r2, #1
    ee70:	movs	r3, #0
    ee72:	strd	r2, r3, [r9, #16]
    ee76:	mov	r0, r9
    ee78:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ee7c:	ldr	r3, [pc, #24]	; (ee98 <__mdiff+0x14c>)
    ee7e:	ldr	r0, [pc, #28]	; (ee9c <__mdiff+0x150>)
    ee80:	mov	r2, r9
    ee82:	movw	r1, #581	; 0x245
    ee86:	bl	10da0 <__assert_func>
    ee8a:	ldr	r3, [pc, #12]	; (ee98 <__mdiff+0x14c>)
    ee8c:	ldr	r0, [pc, #12]	; (ee9c <__mdiff+0x150>)
    ee8e:	mov	r2, r9
    ee90:	movw	r1, #567	; 0x237
    ee94:	bl	10da0 <__assert_func>
    ee98:	.word	0x20000c78
    ee9c:	.word	0x20000c8c

0000eea0 <__d2b>:
    eea0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    eea4:	mov	r8, r1
    eea6:	sub	sp, #12
    eea8:	movs	r1, #1
    eeaa:	vmov	r6, r7, d0
    eeae:	mov	r5, r2
    eeb0:	bl	e7fc <_Balloc>
    eeb4:	mov	r4, r0
    eeb6:	cmp	r0, #0
    eeb8:	beq.n	ef5e <__d2b+0xbe>
    eeba:	ubfx	r9, r7, #20, #11
    eebe:	ubfx	r3, r7, #0, #20
    eec2:	cmp.w	r9, #0
    eec6:	beq.n	eecc <__d2b+0x2c>
    eec8:	orr.w	r3, r3, #1048576	; 0x100000
    eecc:	cmp	r6, #0
    eece:	str	r3, [sp, #4]
    eed0:	bne.n	ef04 <__d2b+0x64>
    eed2:	add	r0, sp, #4
    eed4:	bl	e940 <__lo0bits>
    eed8:	ldr	r2, [sp, #4]
    eeda:	str	r2, [r4, #20]
    eedc:	movs	r2, #1
    eede:	add.w	r3, r0, #32
    eee2:	str	r2, [r4, #16]
    eee4:	cmp.w	r9, #0
    eee8:	beq.n	ef36 <__d2b+0x96>
    eeea:	subw	r9, r9, #1075	; 0x433
    eeee:	add.w	r2, r9, r3
    eef2:	mov	r0, r4
    eef4:	rsb	r3, r3, #53	; 0x35
    eef8:	str.w	r2, [r8]
    eefc:	str	r3, [r5, #0]
    eefe:	add	sp, #12
    ef00:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    ef04:	mov	r0, sp
    ef06:	str	r6, [sp, #0]
    ef08:	bl	e940 <__lo0bits>
    ef0c:	mov	r3, r0
    ef0e:	cbz	r0, ef56 <__d2b+0xb6>
    ef10:	ldrd	r0, r2, [sp]
    ef14:	rsb	r1, r3, #32
    ef18:	lsl.w	r1, r2, r1
    ef1c:	orrs	r1, r0
    ef1e:	lsrs	r2, r3
    ef20:	str	r1, [r4, #20]
    ef22:	str	r2, [sp, #4]
    ef24:	cmp	r2, #0
    ef26:	str	r2, [r4, #24]
    ef28:	ite	ne
    ef2a:	movne	r2, #2
    ef2c:	moveq	r2, #1
    ef2e:	str	r2, [r4, #16]
    ef30:	cmp.w	r9, #0
    ef34:	bne.n	eeea <__d2b+0x4a>
    ef36:	subw	r3, r3, #1074	; 0x432
    ef3a:	str.w	r3, [r8]
    ef3e:	add.w	r3, r4, r2, lsl #2
    ef42:	ldr	r0, [r3, #16]
    ef44:	bl	e900 <__hi0bits>
    ef48:	rsb	r3, r0, r2, lsl #5
    ef4c:	mov	r0, r4
    ef4e:	str	r3, [r5, #0]
    ef50:	add	sp, #12
    ef52:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    ef56:	ldr	r2, [sp, #0]
    ef58:	str	r2, [r4, #20]
    ef5a:	ldr	r2, [sp, #4]
    ef5c:	b.n	ef24 <__d2b+0x84>
    ef5e:	ldr	r3, [pc, #12]	; (ef6c <__d2b+0xcc>)
    ef60:	ldr	r0, [pc, #12]	; (ef70 <__d2b+0xd0>)
    ef62:	mov	r2, r4
    ef64:	movw	r1, #783	; 0x30f
    ef68:	bl	10da0 <__assert_func>
    ef6c:	.word	0x20000c78
    ef70:	.word	0x20000c8c

0000ef74 <__ascii_wctomb>:
    ef74:	cbz	r1, ef8a <__ascii_wctomb+0x16>
    ef76:	cmp	r2, #255	; 0xff
    ef78:	bhi.n	ef80 <__ascii_wctomb+0xc>
    ef7a:	strb	r2, [r1, #0]
    ef7c:	movs	r0, #1
    ef7e:	bx	lr
    ef80:	movs	r3, #138	; 0x8a
    ef82:	str	r3, [r0, #0]
    ef84:	mov.w	r0, #4294967295
    ef88:	bx	lr
    ef8a:	mov	r0, r1
    ef8c:	bx	lr
    ef8e:	nop

0000ef90 <_svfprintf_r>:
    ef90:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ef94:	vpush	{d8-d11}
    ef98:	sub	sp, #324	; 0x144
    ef9a:	mov	r4, r1
    ef9c:	vmov	s22, r1
    efa0:	mov	r8, r2
    efa2:	str	r3, [sp, #32]
    efa4:	mov	fp, r0
    efa6:	bl	10d20 <_localeconv_r>
    efaa:	ldr	r3, [r0, #0]
    efac:	str	r3, [sp, #72]	; 0x48
    efae:	mov	r0, r3
    efb0:	bl	e3c0 <strlen>
    efb4:	add	r7, sp, #128	; 0x80
    efb6:	str	r0, [sp, #64]	; 0x40
    efb8:	movs	r2, #8
    efba:	movs	r1, #0
    efbc:	mov	r0, r7
    efbe:	bl	e044 <memset>
    efc2:	ldrh	r3, [r4, #12]
    efc4:	lsls	r3, r3, #24
    efc6:	bpl.n	efd0 <_svfprintf_r+0x40>
    efc8:	ldr	r3, [r4, #16]
    efca:	cmp	r3, #0
    efcc:	beq.w	fe7a <_svfprintf_r+0xeea>
    efd0:	movs	r3, #0
    efd2:	vldr	d8, [pc, #524]	; f1e0 <_svfprintf_r+0x250>
    efd6:	vldr	d9, [pc, #528]	; f1e8 <_svfprintf_r+0x258>
    efda:	strd	r3, r3, [sp, #148]	; 0x94
    efde:	strd	r3, r3, [sp, #76]	; 0x4c
    efe2:	strd	r3, r3, [sp, #84]	; 0x54
    efe6:	add	r2, sp, #156	; 0x9c
    efe8:	str	r3, [sp, #56]	; 0x38
    efea:	str	r2, [sp, #144]	; 0x90
    efec:	mov	sl, r2
    efee:	str	r3, [sp, #68]	; 0x44
    eff0:	str	r3, [sp, #16]
    eff2:	mov	r4, r8
    eff4:	mov	r9, r4
    eff6:	ldr	r3, [pc, #504]	; (f1f0 <_svfprintf_r+0x260>)
    eff8:	ldr.w	r5, [r3, #228]	; 0xe4
    effc:	bl	e1d8 <__locale_mb_cur_max>
    f000:	mov	r2, r9
    f002:	mov	r3, r0
    f004:	add	r1, sp, #112	; 0x70
    f006:	str	r7, [sp, #0]
    f008:	mov	r0, fp
    f00a:	blx	r5
    f00c:	cmp	r0, #0
    f00e:	beq.w	f172 <_svfprintf_r+0x1e2>
    f012:	blt.w	f162 <_svfprintf_r+0x1d2>
    f016:	ldr	r2, [sp, #112]	; 0x70
    f018:	cmp	r2, #37	; 0x25
    f01a:	mov	r3, r0
    f01c:	beq.n	f022 <_svfprintf_r+0x92>
    f01e:	add	r9, r3
    f020:	b.n	eff6 <_svfprintf_r+0x66>
    f022:	subs.w	r5, r9, r4
    f026:	mov	r6, r0
    f028:	bne.w	f17a <_svfprintf_r+0x1ea>
    f02c:	movs	r3, #0
    f02e:	mov.w	r2, #4294967295
    f032:	strb.w	r3, [sp, #103]	; 0x67
    f036:	mov	r8, r3
    f038:	str	r3, [sp, #24]
    f03a:	add.w	r9, r9, #1
    f03e:	ldrb.w	r3, [r9]
    f042:	str	r2, [sp, #12]
    f044:	movs	r5, #43	; 0x2b
    f046:	movs	r6, #32
    f048:	add.w	r9, r9, #1
    f04c:	sub.w	r2, r3, #32
    f050:	cmp	r2, #90	; 0x5a
    f052:	bhi.w	f1f4 <_svfprintf_r+0x264>
    f056:	tbh	[pc, r2, lsl #1]
    f05a:	.short	0x02e8
    f05c:	.word	0x00cd00cd
    f060:	.word	0x00cd02e3
    f064:	.word	0x00cd00cd
    f068:	.word	0x00cd006a
    f06c:	.word	0x020500cd
    f070:	.word	0x00cd0284
    f074:	.word	0x02c90210
    f078:	.word	0x02bd00cd
    f07c:	.word	0x005b005b
    f080:	.word	0x005b005b
    f084:	.word	0x005b005b
    f088:	.word	0x005b005b
    f08c:	.word	0x00cd005b
    f090:	.word	0x00cd00cd
    f094:	.word	0x00cd00cd
    f098:	.word	0x00cd00cd
    f09c:	.word	0x00cd0153
    f0a0:	.word	0x021a0183
    f0a4:	.word	0x01530153
    f0a8:	.word	0x00cd0153
    f0ac:	.word	0x00cd00cd
    f0b0:	.word	0x021500cd
    f0b4:	.word	0x00cd00cd
    f0b8:	.word	0x00cd0296
    f0bc:	.word	0x00cd00cd
    f0c0:	.word	0x00cd01ab
    f0c4:	.word	0x00cd02aa
    f0c8:	.word	0x06e300cd
    f0cc:	.word	0x00cd00cd
    f0d0:	.word	0x00cd00cd
    f0d4:	.word	0x00cd00cd
    f0d8:	.word	0x00cd00cd
    f0dc:	.word	0x00cd0153
    f0e0:	.word	0x01de0183
    f0e4:	.word	0x01530153
    f0e8:	.word	0x02770153
    f0ec:	.word	0x007f01de
    f0f0:	.word	0x028900cd
    f0f4:	.word	0x025f00cd
    f0f8:	.word	0x022f06e0
    f0fc:	.word	0x00cd007f
    f100:	.word	0x007c01ab
    f104:	.word	0x00cd06b8
    f108:	.word	0x06bd00cd
    f10c:	.word	0x007c00cd
    f110:	sub.w	r2, r3, #48	; 0x30
    f114:	movs	r1, #0
    f116:	ldrb.w	r3, [r9], #1
    f11a:	add.w	r1, r1, r1, lsl #2
    f11e:	add.w	r1, r2, r1, lsl #1
    f122:	sub.w	r2, r3, #48	; 0x30
    f126:	cmp	r2, #9
    f128:	bls.n	f116 <_svfprintf_r+0x186>
    f12a:	str	r1, [sp, #24]
    f12c:	b.n	f04c <_svfprintf_r+0xbc>
    f12e:	mov	r0, fp
    f130:	bl	10d20 <_localeconv_r>
    f134:	ldr	r3, [r0, #4]
    f136:	str	r3, [sp, #84]	; 0x54
    f138:	mov	r0, r3
    f13a:	bl	e3c0 <strlen>
    f13e:	str	r0, [sp, #88]	; 0x58
    f140:	mov	r0, fp
    f142:	bl	10d20 <_localeconv_r>
    f146:	ldr	r3, [r0, #8]
    f148:	str	r3, [sp, #76]	; 0x4c
    f14a:	ldr	r3, [sp, #88]	; 0x58
    f14c:	cmp	r3, #0
    f14e:	bne.w	fdac <_svfprintf_r+0xe1c>
    f152:	ldrb.w	r3, [r9]
    f156:	b.n	f048 <_svfprintf_r+0xb8>
    f158:	ldrb.w	r3, [r9]
    f15c:	orr.w	r8, r8, #32
    f160:	b.n	f048 <_svfprintf_r+0xb8>
    f162:	movs	r2, #8
    f164:	movs	r1, #0
    f166:	mov	r0, r7
    f168:	bl	e044 <memset>
    f16c:	movs	r3, #1
    f16e:	add	r9, r3
    f170:	b.n	eff6 <_svfprintf_r+0x66>
    f172:	subs.w	r5, r9, r4
    f176:	mov	r6, r0
    f178:	beq.n	f19e <_svfprintf_r+0x20e>
    f17a:	ldr	r3, [sp, #152]	; 0x98
    f17c:	add	r3, r5
    f17e:	str	r3, [sp, #152]	; 0x98
    f180:	ldr	r3, [sp, #148]	; 0x94
    f182:	adds	r3, #1
    f184:	cmp	r3, #7
    f186:	strd	r4, r5, [sl]
    f18a:	str	r3, [sp, #148]	; 0x94
    f18c:	bgt.n	f1c8 <_svfprintf_r+0x238>
    f18e:	add.w	sl, sl, #8
    f192:	ldr	r3, [sp, #16]
    f194:	add	r3, r5
    f196:	str	r3, [sp, #16]
    f198:	cmp	r6, #0
    f19a:	bne.w	f02c <_svfprintf_r+0x9c>
    f19e:	ldr	r3, [sp, #152]	; 0x98
    f1a0:	cmp	r3, #0
    f1a2:	bne.w	105bc <_svfprintf_r+0x162c>
    f1a6:	vmov	r3, s22
    f1aa:	ldrsh.w	r3, [r3, #12]
    f1ae:	tst.w	r3, #64	; 0x40
    f1b2:	ldr	r3, [sp, #16]
    f1b4:	it	ne
    f1b6:	movne.w	r3, #4294967295
    f1ba:	str	r3, [sp, #16]
    f1bc:	ldr	r0, [sp, #16]
    f1be:	add	sp, #324	; 0x144
    f1c0:	vpop	{d8-d11}
    f1c4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f1c8:	vmov	r1, s22
    f1cc:	add	r2, sp, #144	; 0x90
    f1ce:	mov	r0, fp
    f1d0:	bl	11cf8 <__ssprint_r>
    f1d4:	cmp	r0, #0
    f1d6:	bne.n	f1a6 <_svfprintf_r+0x216>
    f1d8:	add.w	sl, sp, #156	; 0x9c
    f1dc:	b.n	f192 <_svfprintf_r+0x202>
    f1de:	nop
	...
    f1e8:	.word	0xffffffff
    f1ec:	.word	0x7fefffff
    f1f0:	.word	0x20001494
    f1f4:	str	r3, [sp, #44]	; 0x2c
    f1f6:	cmp	r3, #0
    f1f8:	beq.n	f19e <_svfprintf_r+0x20e>
    f1fa:	movs	r1, #0
    f1fc:	strd	r1, r1, [sp, #48]	; 0x30
    f200:	strb.w	r3, [sp, #220]	; 0xdc
    f204:	movs	r3, #1
    f206:	strb.w	r1, [sp, #103]	; 0x67
    f20a:	str	r3, [sp, #8]
    f20c:	str	r1, [sp, #28]
    f20e:	str	r3, [sp, #20]
    f210:	str	r1, [sp, #12]
    f212:	str	r1, [sp, #60]	; 0x3c
    f214:	add	r4, sp, #220	; 0xdc
    f216:	ands.w	r3, r8, #2
    f21a:	str	r3, [sp, #36]	; 0x24
    f21c:	beq.n	f224 <_svfprintf_r+0x294>
    f21e:	ldr	r3, [sp, #8]
    f220:	adds	r3, #2
    f222:	str	r3, [sp, #8]
    f224:	ands.w	r3, r8, #132	; 0x84
    f228:	str	r3, [sp, #40]	; 0x28
    f22a:	bne.n	f238 <_svfprintf_r+0x2a8>
    f22c:	ldr	r3, [sp, #24]
    f22e:	ldr	r2, [sp, #8]
    f230:	subs	r5, r3, r2
    f232:	cmp	r5, #0
    f234:	bgt.w	f90a <_svfprintf_r+0x97a>
    f238:	ldr	r2, [sp, #152]	; 0x98
    f23a:	cbz	r1, f260 <_svfprintf_r+0x2d0>
    f23c:	ldr	r1, [sp, #148]	; 0x94
    f23e:	add.w	r0, sp, #103	; 0x67
    f242:	adds	r1, #1
    f244:	adds	r2, #1
    f246:	str.w	r0, [sl]
    f24a:	cmp	r1, #7
    f24c:	mov.w	r0, #1
    f250:	str	r2, [sp, #152]	; 0x98
    f252:	str	r1, [sp, #148]	; 0x94
    f254:	str.w	r0, [sl, #4]
    f258:	bgt.w	f9a0 <_svfprintf_r+0xa10>
    f25c:	add.w	sl, sl, #8
    f260:	ldr	r3, [sp, #36]	; 0x24
    f262:	cbz	r3, f286 <_svfprintf_r+0x2f6>
    f264:	ldr	r3, [sp, #148]	; 0x94
    f266:	add	r1, sp, #104	; 0x68
    f268:	adds	r3, #1
    f26a:	adds	r2, #2
    f26c:	str.w	r1, [sl]
    f270:	cmp	r3, #7
    f272:	mov.w	r1, #2
    f276:	str	r2, [sp, #152]	; 0x98
    f278:	str	r3, [sp, #148]	; 0x94
    f27a:	str.w	r1, [sl, #4]
    f27e:	bgt.w	f9c8 <_svfprintf_r+0xa38>
    f282:	add.w	sl, sl, #8
    f286:	ldr	r3, [sp, #40]	; 0x28
    f288:	cmp	r3, #128	; 0x80
    f28a:	beq.w	f766 <_svfprintf_r+0x7d6>
    f28e:	ldr	r3, [sp, #12]
    f290:	ldr	r1, [sp, #20]
    f292:	subs	r5, r3, r1
    f294:	cmp	r5, #0
    f296:	bgt.w	f7e4 <_svfprintf_r+0x854>
    f29a:	tst.w	r8, #256	; 0x100
    f29e:	bne.w	f6bc <_svfprintf_r+0x72c>
    f2a2:	ldr	r3, [sp, #20]
    f2a4:	str.w	r3, [sl, #4]
    f2a8:	add	r2, r3
    f2aa:	ldr	r3, [sp, #148]	; 0x94
    f2ac:	str.w	r4, [sl]
    f2b0:	adds	r3, #1
    f2b2:	cmp	r3, #7
    f2b4:	str	r2, [sp, #152]	; 0x98
    f2b6:	str	r3, [sp, #148]	; 0x94
    f2b8:	bgt.w	f8f2 <_svfprintf_r+0x962>
    f2bc:	add.w	sl, sl, #8
    f2c0:	tst.w	r8, #4
    f2c4:	beq.n	f2d2 <_svfprintf_r+0x342>
    f2c6:	ldr	r3, [sp, #24]
    f2c8:	ldr	r1, [sp, #8]
    f2ca:	subs	r4, r3, r1
    f2cc:	cmp	r4, #0
    f2ce:	bgt.w	f9e2 <_svfprintf_r+0xa52>
    f2d2:	ldr	r3, [sp, #16]
    f2d4:	ldr	r1, [sp, #24]
    f2d6:	ldr	r0, [sp, #8]
    f2d8:	cmp	r1, r0
    f2da:	ite	ge
    f2dc:	addge	r3, r3, r1
    f2de:	addlt	r3, r3, r0
    f2e0:	str	r3, [sp, #16]
    f2e2:	cmp	r2, #0
    f2e4:	bne.w	f848 <_svfprintf_r+0x8b8>
    f2e8:	movs	r3, #0
    f2ea:	str	r3, [sp, #148]	; 0x94
    f2ec:	ldr	r3, [sp, #28]
    f2ee:	cbz	r3, f2f8 <_svfprintf_r+0x368>
    f2f0:	ldr	r1, [sp, #28]
    f2f2:	mov	r0, fp
    f2f4:	bl	e5c4 <_free_r>
    f2f8:	add.w	sl, sp, #156	; 0x9c
    f2fc:	mov	r4, r9
    f2fe:	b.n	eff4 <_svfprintf_r+0x64>
    f300:	str	r3, [sp, #44]	; 0x2c
    f302:	ldr	r3, [sp, #32]
    f304:	adds	r3, #7
    f306:	bic.w	r3, r3, #7
    f30a:	vldmia	r3!, {d8}
    f30e:	vabs.f64	d7, d8
    f312:	vcmp.f64	d7, d9
    f316:	vmrs	APSR_nzcv, fpscr
    f31a:	str	r3, [sp, #32]
    f31c:	ble.w	fcf2 <_svfprintf_r+0xd62>
    f320:	vcmpe.f64	d8, #0.0
    f324:	vmrs	APSR_nzcv, fpscr
    f328:	bmi.w	103de <_svfprintf_r+0x144e>
    f32c:	ldrb.w	r1, [sp, #103]	; 0x67
    f330:	ldr	r4, [pc, #684]	; (f5e0 <_svfprintf_r+0x650>)
    f332:	ldr	r3, [pc, #688]	; (f5e4 <_svfprintf_r+0x654>)
    f334:	bic.w	r8, r8, #128	; 0x80
    f338:	ldr	r2, [sp, #44]	; 0x2c
    f33a:	cmp	r2, #71	; 0x47
    f33c:	it	gt
    f33e:	movgt	r4, r3
    f340:	movs	r3, #0
    f342:	strd	r3, r3, [sp, #48]	; 0x30
    f346:	movs	r2, #3
    f348:	str	r3, [sp, #28]
    f34a:	str	r2, [sp, #8]
    f34c:	str	r2, [sp, #20]
    f34e:	str	r3, [sp, #12]
    f350:	str	r3, [sp, #60]	; 0x3c
    f352:	cmp	r1, #0
    f354:	beq.w	f216 <_svfprintf_r+0x286>
    f358:	ldr	r3, [sp, #8]
    f35a:	adds	r3, #1
    f35c:	str	r3, [sp, #8]
    f35e:	b.n	f216 <_svfprintf_r+0x286>
    f360:	cmp	r3, #67	; 0x43
    f362:	str	r3, [sp, #44]	; 0x2c
    f364:	beq.n	f36e <_svfprintf_r+0x3de>
    f366:	tst.w	r8, #16
    f36a:	beq.w	fe28 <_svfprintf_r+0xe98>
    f36e:	ldr	r5, [sp, #32]
    f370:	movs	r2, #8
    f372:	movs	r1, #0
    f374:	add	r0, sp, #136	; 0x88
    f376:	add	r4, sp, #220	; 0xdc
    f378:	bl	e044 <memset>
    f37c:	add	r3, sp, #136	; 0x88
    f37e:	ldr.w	r2, [r5], #4
    f382:	mov	r1, r4
    f384:	mov	r0, fp
    f386:	bl	11c6c <_wcrtomb_r>
    f38a:	mov	r3, r0
    f38c:	adds	r3, #1
    f38e:	str	r0, [sp, #20]
    f390:	beq.w	10970 <_svfprintf_r+0x19e0>
    f394:	ldr	r3, [sp, #20]
    f396:	str	r5, [sp, #32]
    f398:	bic.w	r3, r3, r3, asr #31
    f39c:	str	r3, [sp, #8]
    f39e:	movs	r1, #0
    f3a0:	strd	r1, r1, [sp, #48]	; 0x30
    f3a4:	strb.w	r1, [sp, #103]	; 0x67
    f3a8:	str	r1, [sp, #28]
    f3aa:	str	r1, [sp, #12]
    f3ac:	str	r1, [sp, #60]	; 0x3c
    f3ae:	b.n	f216 <_svfprintf_r+0x286>
    f3b0:	str	r3, [sp, #44]	; 0x2c
    f3b2:	ldr	r3, [sp, #32]
    f3b4:	mov	r2, r3
    f3b6:	movs	r3, #0
    f3b8:	strb.w	r3, [sp, #103]	; 0x67
    f3bc:	mov	r3, r2
    f3be:	ldr.w	r4, [r3], #4
    f3c2:	str	r3, [sp, #32]
    f3c4:	cmp	r4, #0
    f3c6:	beq.w	fe5a <_svfprintf_r+0xeca>
    f3ca:	ldr	r3, [sp, #44]	; 0x2c
    f3cc:	cmp	r3, #83	; 0x53
    f3ce:	beq.w	101aa <_svfprintf_r+0x121a>
    f3d2:	ands.w	r3, r8, #16
    f3d6:	str	r3, [sp, #48]	; 0x30
    f3d8:	bne.w	101aa <_svfprintf_r+0x121a>
    f3dc:	ldr	r3, [sp, #12]
    f3de:	adds	r5, r3, #1
    f3e0:	beq.w	105ae <_svfprintf_r+0x161e>
    f3e4:	ldr	r1, [sp, #48]	; 0x30
    f3e6:	mov	r2, r3
    f3e8:	mov	r0, r4
    f3ea:	bl	e320 <memchr>
    f3ee:	str	r0, [sp, #28]
    f3f0:	cmp	r0, #0
    f3f2:	beq.w	10a46 <_svfprintf_r+0x1ab6>
    f3f6:	ldr	r3, [sp, #28]
    f3f8:	subs	r2, r3, r4
    f3fa:	str	r2, [sp, #20]
    f3fc:	ldr	r3, [sp, #48]	; 0x30
    f3fe:	str	r3, [sp, #12]
    f400:	bic.w	r2, r2, r2, asr #31
    f404:	str	r3, [sp, #60]	; 0x3c
    f406:	str	r3, [sp, #52]	; 0x34
    f408:	str	r3, [sp, #28]
    f40a:	movs	r3, #115	; 0x73
    f40c:	ldrb.w	r1, [sp, #103]	; 0x67
    f410:	str	r2, [sp, #8]
    f412:	str	r3, [sp, #44]	; 0x2c
    f414:	b.n	f352 <_svfprintf_r+0x3c2>
    f416:	tst.w	r8, #32
    f41a:	str	r3, [sp, #44]	; 0x2c
    f41c:	ldr	r3, [sp, #32]
    f41e:	beq.n	f49c <_svfprintf_r+0x50c>
    f420:	adds	r3, #7
    f422:	bic.w	r3, r3, #7
    f426:	mov	r2, r3
    f428:	mov	r1, r2
    f42a:	ldr	r3, [r3, #4]
    f42c:	ldr.w	r2, [r1], #8
    f430:	str	r1, [sp, #32]
    f432:	mov	r1, r3
    f434:	cmp	r3, #0
    f436:	blt.w	fc52 <_svfprintf_r+0xcc2>
    f43a:	ldr	r3, [sp, #12]
    f43c:	adds	r3, #1
    f43e:	beq.w	f97e <_svfprintf_r+0x9ee>
    f442:	bic.w	r0, r8, #128	; 0x80
    f446:	orrs.w	r3, r2, r1
    f44a:	str	r0, [sp, #8]
    f44c:	bne.w	f982 <_svfprintf_r+0x9f2>
    f450:	ldr	r3, [sp, #12]
    f452:	cmp	r3, #0
    f454:	bne.w	f98c <_svfprintf_r+0x9fc>
    f458:	mov	r8, r0
    f45a:	movs	r3, #0
    f45c:	str	r3, [sp, #12]
    f45e:	str	r3, [sp, #20]
    f460:	add	r4, sp, #320	; 0x140
    f462:	b.n	f672 <_svfprintf_r+0x6e2>
    f464:	ldr	r3, [sp, #32]
    f466:	ldr.w	r2, [r3], #4
    f46a:	str	r2, [sp, #24]
    f46c:	cmp	r2, #0
    f46e:	bge.w	fca4 <_svfprintf_r+0xd14>
    f472:	ldr	r2, [sp, #24]
    f474:	str	r3, [sp, #32]
    f476:	negs	r2, r2
    f478:	str	r2, [sp, #24]
    f47a:	ldrb.w	r3, [r9]
    f47e:	orr.w	r8, r8, #4
    f482:	b.n	f048 <_svfprintf_r+0xb8>
    f484:	ldrb.w	r3, [r9]
    f488:	orr.w	r8, r8, #8
    f48c:	b.n	f048 <_svfprintf_r+0xb8>
    f48e:	orr.w	r8, r8, #16
    f492:	tst.w	r8, #32
    f496:	str	r3, [sp, #44]	; 0x2c
    f498:	ldr	r3, [sp, #32]
    f49a:	bne.n	f420 <_svfprintf_r+0x490>
    f49c:	tst.w	r8, #16
    f4a0:	bne.w	fcba <_svfprintf_r+0xd2a>
    f4a4:	tst.w	r8, #64	; 0x40
    f4a8:	beq.w	fcb2 <_svfprintf_r+0xd22>
    f4ac:	ldrsh.w	r2, [r3], #4
    f4b0:	str	r3, [sp, #32]
    f4b2:	asrs	r1, r2, #31
    f4b4:	mov	r3, r1
    f4b6:	b.n	f434 <_svfprintf_r+0x4a4>
    f4b8:	ldr	r3, [sp, #32]
    f4ba:	orr.w	r2, r8, #2
    f4be:	str	r2, [sp, #8]
    f4c0:	ldr.w	r2, [r3], #4
    f4c4:	str	r3, [sp, #32]
    f4c6:	movw	r3, #30768	; 0x7830
    f4ca:	strh.w	r3, [sp, #104]	; 0x68
    f4ce:	movs	r0, #120	; 0x78
    f4d0:	ldr	r3, [pc, #276]	; (f5e8 <_svfprintf_r+0x658>)
    f4d2:	str	r3, [sp, #68]	; 0x44
    f4d4:	movs	r1, #0
    f4d6:	movs	r3, #2
    f4d8:	str	r0, [sp, #44]	; 0x2c
    f4da:	movs	r0, #0
    f4dc:	ldr	r4, [sp, #12]
    f4de:	strb.w	r0, [sp, #103]	; 0x67
    f4e2:	adds	r0, r4, #1
    f4e4:	beq.w	f642 <_svfprintf_r+0x6b2>
    f4e8:	ldr	r0, [sp, #8]
    f4ea:	bic.w	r8, r0, #128	; 0x80
    f4ee:	orrs.w	r0, r2, r1
    f4f2:	bne.w	f63e <_svfprintf_r+0x6ae>
    f4f6:	cmp	r4, #0
    f4f8:	bne.w	10258 <_svfprintf_r+0x12c8>
    f4fc:	cmp	r3, #0
    f4fe:	bne.n	f45a <_svfprintf_r+0x4ca>
    f500:	ldr	r3, [sp, #8]
    f502:	ands.w	r3, r3, #1
    f506:	str	r3, [sp, #20]
    f508:	beq.w	fcae <_svfprintf_r+0xd1e>
    f50c:	movs	r3, #48	; 0x30
    f50e:	strb.w	r3, [sp, #319]	; 0x13f
    f512:	addw	r4, sp, #319	; 0x13f
    f516:	b.n	f672 <_svfprintf_r+0x6e2>
    f518:	tst.w	r8, #32
    f51c:	bne.w	fcc8 <_svfprintf_r+0xd38>
    f520:	tst.w	r8, #16
    f524:	bne.w	10266 <_svfprintf_r+0x12d6>
    f528:	tst.w	r8, #64	; 0x40
    f52c:	bne.w	1045e <_svfprintf_r+0x14ce>
    f530:	tst.w	r8, #512	; 0x200
    f534:	beq.w	10266 <_svfprintf_r+0x12d6>
    f538:	ldr	r3, [sp, #32]
    f53a:	ldr	r1, [sp, #16]
    f53c:	ldr.w	r2, [r3], #4
    f540:	str	r3, [sp, #32]
    f542:	strb	r1, [r2, #0]
    f544:	mov	r4, r9
    f546:	b.n	eff4 <_svfprintf_r+0x64>
    f548:	ldrb.w	r3, [r9]
    f54c:	cmp	r3, #104	; 0x68
    f54e:	ittte	eq
    f550:	ldrbeq.w	r3, [r9, #1]
    f554:	orreq.w	r8, r8, #512	; 0x200
    f558:	addeq.w	r9, r9, #1
    f55c:	orrne.w	r8, r8, #64	; 0x40
    f560:	b.n	f048 <_svfprintf_r+0xb8>
    f562:	ldrb.w	r3, [r9]
    f566:	strb.w	r5, [sp, #103]	; 0x67
    f56a:	b.n	f048 <_svfprintf_r+0xb8>
    f56c:	ldrb.w	r3, [r9]
    f570:	cmp	r3, #108	; 0x6c
    f572:	ittte	eq
    f574:	ldrbeq.w	r3, [r9, #1]
    f578:	orreq.w	r8, r8, #32
    f57c:	addeq.w	r9, r9, #1
    f580:	orrne.w	r8, r8, #16
    f584:	b.n	f048 <_svfprintf_r+0xb8>
    f586:	str	r3, [sp, #44]	; 0x2c
    f588:	orr.w	r8, r8, #16
    f58c:	ands.w	r1, r8, #32
    f590:	beq.w	fc36 <_svfprintf_r+0xca6>
    f594:	ldr	r3, [sp, #32]
    f596:	adds	r3, #7
    f598:	bic.w	r3, r3, #7
    f59c:	ldr	r1, [r3, #4]
    f59e:	ldr.w	r2, [r3], #8
    f5a2:	str	r3, [sp, #32]
    f5a4:	bic.w	r3, r8, #1024	; 0x400
    f5a8:	str	r3, [sp, #8]
    f5aa:	movs	r3, #0
    f5ac:	b.n	f4da <_svfprintf_r+0x54a>
    f5ae:	str	r3, [sp, #44]	; 0x2c
    f5b0:	orr.w	r3, r8, #16
    f5b4:	str	r3, [sp, #8]
    f5b6:	ldr	r3, [sp, #8]
    f5b8:	ands.w	r1, r3, #32
    f5bc:	beq.w	fc12 <_svfprintf_r+0xc82>
    f5c0:	ldr	r3, [sp, #32]
    f5c2:	adds	r3, #7
    f5c4:	bic.w	r3, r3, #7
    f5c8:	ldr	r1, [r3, #4]
    f5ca:	ldr.w	r2, [r3], #8
    f5ce:	str	r3, [sp, #32]
    f5d0:	movs	r3, #1
    f5d2:	b.n	f4da <_svfprintf_r+0x54a>
    f5d4:	ldrb.w	r3, [r9]
    f5d8:	orr.w	r8, r8, #128	; 0x80
    f5dc:	b.n	f048 <_svfprintf_r+0xb8>
    f5de:	nop
    f5e0:	.word	0x20000e58
    f5e4:	.word	0x20000e5c
    f5e8:	.word	0x20000e68
    f5ec:	mov	r1, r9
    f5ee:	ldrb.w	r3, [r1], #1
    f5f2:	cmp	r3, #42	; 0x2a
    f5f4:	beq.w	10a8a <_svfprintf_r+0x1afa>
    f5f8:	sub.w	r2, r3, #48	; 0x30
    f5fc:	cmp	r2, #9
    f5fe:	mov	r9, r1
    f600:	it	ls
    f602:	movls	r1, #0
    f604:	bhi.w	10890 <_svfprintf_r+0x1900>
    f608:	ldrb.w	r3, [r9], #1
    f60c:	add.w	r1, r1, r1, lsl #2
    f610:	add.w	r1, r2, r1, lsl #1
    f614:	sub.w	r2, r3, #48	; 0x30
    f618:	cmp	r2, #9
    f61a:	bls.n	f608 <_svfprintf_r+0x678>
    f61c:	str	r1, [sp, #12]
    f61e:	b.n	f04c <_svfprintf_r+0xbc>
    f620:	ldrb.w	r3, [r9]
    f624:	orr.w	r8, r8, #1
    f628:	b.n	f048 <_svfprintf_r+0xb8>
    f62a:	ldrb.w	r3, [sp, #103]	; 0x67
    f62e:	cmp	r3, #0
    f630:	bne.w	f152 <_svfprintf_r+0x1c2>
    f634:	ldrb.w	r3, [r9]
    f638:	strb.w	r6, [sp, #103]	; 0x67
    f63c:	b.n	f048 <_svfprintf_r+0xb8>
    f63e:	str.w	r8, [sp, #8]
    f642:	cmp	r3, #1
    f644:	beq.w	f982 <_svfprintf_r+0x9f2>
    f648:	cmp	r3, #2
    f64a:	add	r4, sp, #320	; 0x140
    f64c:	bne.n	f690 <_svfprintf_r+0x700>
    f64e:	ldr	r0, [sp, #68]	; 0x44
    f650:	and.w	r3, r2, #15
    f654:	lsrs	r2, r2, #4
    f656:	ldrb	r3, [r0, r3]
    f658:	strb.w	r3, [r4, #-1]!
    f65c:	orr.w	r2, r2, r1, lsl #28
    f660:	lsrs	r1, r1, #4
    f662:	orrs.w	r3, r2, r1
    f666:	bne.n	f650 <_svfprintf_r+0x6c0>
    f668:	add	r3, sp, #320	; 0x140
    f66a:	subs	r3, r3, r4
    f66c:	ldr.w	r8, [sp, #8]
    f670:	str	r3, [sp, #20]
    f672:	ldr	r2, [sp, #20]
    f674:	ldr	r0, [sp, #12]
    f676:	ldrb.w	r1, [sp, #103]	; 0x67
    f67a:	cmp	r2, r0
    f67c:	mov.w	r3, #0
    f680:	it	lt
    f682:	movlt	r2, r0
    f684:	strd	r3, r3, [sp, #48]	; 0x30
    f688:	str	r3, [sp, #28]
    f68a:	str	r2, [sp, #8]
    f68c:	str	r3, [sp, #60]	; 0x3c
    f68e:	b.n	f352 <_svfprintf_r+0x3c2>
    f690:	and.w	r3, r2, #7
    f694:	lsrs	r2, r2, #3
    f696:	orr.w	r2, r2, r1, lsl #29
    f69a:	lsrs	r1, r1, #3
    f69c:	adds	r3, #48	; 0x30
    f69e:	orrs.w	r5, r2, r1
    f6a2:	mov	r0, r4
    f6a4:	strb.w	r3, [r4, #-1]!
    f6a8:	bne.n	f690 <_svfprintf_r+0x700>
    f6aa:	ldr	r2, [sp, #8]
    f6ac:	lsls	r1, r2, #31
    f6ae:	bmi.w	fb4c <_svfprintf_r+0xbbc>
    f6b2:	add	r3, sp, #320	; 0x140
    f6b4:	subs	r3, r3, r4
    f6b6:	mov	r8, r2
    f6b8:	str	r3, [sp, #20]
    f6ba:	b.n	f672 <_svfprintf_r+0x6e2>
    f6bc:	ldr	r3, [sp, #44]	; 0x2c
    f6be:	cmp	r3, #101	; 0x65
    f6c0:	ble.w	f86c <_svfprintf_r+0x8dc>
    f6c4:	vcmp.f64	d8, #0.0
    f6c8:	vmrs	APSR_nzcv, fpscr
    f6cc:	bne.w	fa52 <_svfprintf_r+0xac2>
    f6d0:	ldr	r3, [sp, #148]	; 0x94
    f6d2:	ldr	r1, [pc, #744]	; (f9bc <_svfprintf_r+0xa2c>)
    f6d4:	str.w	r1, [sl]
    f6d8:	adds	r3, #1
    f6da:	adds	r2, #1
    f6dc:	movs	r1, #1
    f6de:	cmp	r3, #7
    f6e0:	str	r2, [sp, #152]	; 0x98
    f6e2:	str	r3, [sp, #148]	; 0x94
    f6e4:	str.w	r1, [sl, #4]
    f6e8:	bgt.w	1018e <_svfprintf_r+0x11fe>
    f6ec:	add.w	sl, sl, #8
    f6f0:	ldr	r3, [sp, #108]	; 0x6c
    f6f2:	ldr	r1, [sp, #56]	; 0x38
    f6f4:	cmp	r3, r1
    f6f6:	bge.w	fc9a <_svfprintf_r+0xd0a>
    f6fa:	ldr	r3, [sp, #64]	; 0x40
    f6fc:	ldr	r1, [sp, #72]	; 0x48
    f6fe:	add	r2, r3
    f700:	strd	r1, r3, [sl]
    f704:	ldr	r3, [sp, #148]	; 0x94
    f706:	str	r2, [sp, #152]	; 0x98
    f708:	adds	r3, #1
    f70a:	cmp	r3, #7
    f70c:	str	r3, [sp, #148]	; 0x94
    f70e:	bgt.w	fe40 <_svfprintf_r+0xeb0>
    f712:	add.w	sl, sl, #8
    f716:	ldr	r3, [sp, #56]	; 0x38
    f718:	subs	r4, r3, #1
    f71a:	cmp	r4, #0
    f71c:	ble.w	f2c0 <_svfprintf_r+0x330>
    f720:	cmp	r4, #16
    f722:	ldr	r3, [sp, #148]	; 0x94
    f724:	ble.w	10204 <_svfprintf_r+0x1274>
    f728:	vmov	r6, s22
    f72c:	movs	r5, #16
    f72e:	b.n	f73c <_svfprintf_r+0x7ac>
    f730:	add.w	sl, sl, #8
    f734:	subs	r4, #16
    f736:	cmp	r4, #16
    f738:	ble.w	10204 <_svfprintf_r+0x1274>
    f73c:	adds	r3, #1
    f73e:	ldr	r1, [pc, #640]	; (f9c0 <_svfprintf_r+0xa30>)
    f740:	adds	r2, #16
    f742:	cmp	r3, #7
    f744:	strd	r1, r5, [sl]
    f748:	strd	r3, r2, [sp, #148]	; 0x94
    f74c:	ble.n	f730 <_svfprintf_r+0x7a0>
    f74e:	add	r2, sp, #144	; 0x90
    f750:	mov	r1, r6
    f752:	mov	r0, fp
    f754:	bl	11cf8 <__ssprint_r>
    f758:	cmp	r0, #0
    f75a:	bne.n	f85a <_svfprintf_r+0x8ca>
    f75c:	ldrd	r3, r2, [sp, #148]	; 0x94
    f760:	add.w	sl, sp, #156	; 0x9c
    f764:	b.n	f734 <_svfprintf_r+0x7a4>
    f766:	ldr	r3, [sp, #24]
    f768:	ldr	r1, [sp, #8]
    f76a:	subs	r5, r3, r1
    f76c:	cmp	r5, #0
    f76e:	ble.w	f28e <_svfprintf_r+0x2fe>
    f772:	cmp	r5, #16
    f774:	ldr	r3, [sp, #148]	; 0x94
    f776:	ble.n	f7bc <_svfprintf_r+0x82c>
    f778:	str	r4, [sp, #36]	; 0x24
    f77a:	movs	r6, #16
    f77c:	vmov	r4, s22
    f780:	b.n	f78c <_svfprintf_r+0x7fc>
    f782:	subs	r5, #16
    f784:	cmp	r5, #16
    f786:	add.w	sl, sl, #8
    f78a:	ble.n	f7ba <_svfprintf_r+0x82a>
    f78c:	adds	r3, #1
    f78e:	ldr	r1, [pc, #560]	; (f9c0 <_svfprintf_r+0xa30>)
    f790:	adds	r2, #16
    f792:	cmp	r3, #7
    f794:	strd	r1, r6, [sl]
    f798:	strd	r3, r2, [sp, #148]	; 0x94
    f79c:	ble.n	f782 <_svfprintf_r+0x7f2>
    f79e:	add	r2, sp, #144	; 0x90
    f7a0:	mov	r1, r4
    f7a2:	mov	r0, fp
    f7a4:	add.w	sl, sp, #156	; 0x9c
    f7a8:	bl	11cf8 <__ssprint_r>
    f7ac:	cmp	r0, #0
    f7ae:	bne.n	f85a <_svfprintf_r+0x8ca>
    f7b0:	subs	r5, #16
    f7b2:	cmp	r5, #16
    f7b4:	ldrd	r3, r2, [sp, #148]	; 0x94
    f7b8:	bgt.n	f78c <_svfprintf_r+0x7fc>
    f7ba:	ldr	r4, [sp, #36]	; 0x24
    f7bc:	ldr	r1, [pc, #512]	; (f9c0 <_svfprintf_r+0xa30>)
    f7be:	str.w	r5, [sl, #4]
    f7c2:	adds	r3, #1
    f7c4:	add	r2, r5
    f7c6:	cmp	r3, #7
    f7c8:	strd	r3, r2, [sp, #148]	; 0x94
    f7cc:	str.w	r1, [sl]
    f7d0:	bgt.w	10220 <_svfprintf_r+0x1290>
    f7d4:	ldr	r3, [sp, #12]
    f7d6:	ldr	r1, [sp, #20]
    f7d8:	subs	r5, r3, r1
    f7da:	cmp	r5, #0
    f7dc:	add.w	sl, sl, #8
    f7e0:	ble.w	f29a <_svfprintf_r+0x30a>
    f7e4:	cmp	r5, #16
    f7e6:	ldr	r3, [sp, #148]	; 0x94
    f7e8:	ble.n	f82a <_svfprintf_r+0x89a>
    f7ea:	mov	r1, sl
    f7ec:	movs	r6, #16
    f7ee:	vmov	sl, s22
    f7f2:	b.n	f7fe <_svfprintf_r+0x86e>
    f7f4:	subs	r5, #16
    f7f6:	cmp	r5, #16
    f7f8:	add.w	r1, r1, #8
    f7fc:	ble.n	f828 <_svfprintf_r+0x898>
    f7fe:	adds	r3, #1
    f800:	ldr	r0, [pc, #444]	; (f9c0 <_svfprintf_r+0xa30>)
    f802:	adds	r2, #16
    f804:	cmp	r3, #7
    f806:	strd	r0, r6, [r1]
    f80a:	strd	r3, r2, [sp, #148]	; 0x94
    f80e:	ble.n	f7f4 <_svfprintf_r+0x864>
    f810:	add	r2, sp, #144	; 0x90
    f812:	mov	r1, sl
    f814:	mov	r0, fp
    f816:	bl	11cf8 <__ssprint_r>
    f81a:	cbnz	r0, f85a <_svfprintf_r+0x8ca>
    f81c:	subs	r5, #16
    f81e:	cmp	r5, #16
    f820:	ldrd	r3, r2, [sp, #148]	; 0x94
    f824:	add	r1, sp, #156	; 0x9c
    f826:	bgt.n	f7fe <_svfprintf_r+0x86e>
    f828:	mov	sl, r1
    f82a:	adds	r3, #1
    f82c:	ldr	r1, [pc, #400]	; (f9c0 <_svfprintf_r+0xa30>)
    f82e:	str.w	r5, [sl, #4]
    f832:	add	r2, r5
    f834:	cmp	r3, #7
    f836:	strd	r3, r2, [sp, #148]	; 0x94
    f83a:	str.w	r1, [sl]
    f83e:	bgt.w	fbf6 <_svfprintf_r+0xc66>
    f842:	add.w	sl, sl, #8
    f846:	b.n	f29a <_svfprintf_r+0x30a>
    f848:	vmov	r1, s22
    f84c:	add	r2, sp, #144	; 0x90
    f84e:	mov	r0, fp
    f850:	bl	11cf8 <__ssprint_r>
    f854:	cmp	r0, #0
    f856:	beq.w	f2e8 <_svfprintf_r+0x358>
    f85a:	ldr	r3, [sp, #28]
    f85c:	cmp	r3, #0
    f85e:	beq.w	f1a6 <_svfprintf_r+0x216>
    f862:	ldr	r1, [sp, #28]
    f864:	mov	r0, fp
    f866:	bl	e5c4 <_free_r>
    f86a:	b.n	f1a6 <_svfprintf_r+0x216>
    f86c:	ldr	r3, [sp, #56]	; 0x38
    f86e:	cmp	r3, #1
    f870:	ble.w	fb68 <_svfprintf_r+0xbd8>
    f874:	ldr	r3, [sp, #148]	; 0x94
    f876:	str.w	r4, [sl]
    f87a:	adds	r3, #1
    f87c:	adds	r2, #1
    f87e:	movs	r1, #1
    f880:	cmp	r3, #7
    f882:	str	r2, [sp, #152]	; 0x98
    f884:	str	r3, [sp, #148]	; 0x94
    f886:	str.w	r1, [sl, #4]
    f88a:	bgt.w	fc7e <_svfprintf_r+0xcee>
    f88e:	add.w	sl, sl, #8
    f892:	ldr	r1, [sp, #64]	; 0x40
    f894:	ldr	r0, [sp, #72]	; 0x48
    f896:	adds	r3, #1
    f898:	add	r2, r1
    f89a:	cmp	r3, #7
    f89c:	strd	r0, r1, [sl]
    f8a0:	strd	r3, r2, [sp, #148]	; 0x94
    f8a4:	bgt.w	fc62 <_svfprintf_r+0xcd2>
    f8a8:	add.w	sl, sl, #8
    f8ac:	vcmp.f64	d8, #0.0
    f8b0:	vmrs	APSR_nzcv, fpscr
    f8b4:	beq.w	fba6 <_svfprintf_r+0xc16>
    f8b8:	ldr	r1, [sp, #56]	; 0x38
    f8ba:	adds	r3, #1
    f8bc:	subs	r1, #1
    f8be:	adds	r4, #1
    f8c0:	add	r2, r1
    f8c2:	cmp	r3, #7
    f8c4:	str.w	r4, [sl]
    f8c8:	str	r3, [sp, #148]	; 0x94
    f8ca:	str.w	r1, [sl, #4]
    f8ce:	str	r2, [sp, #152]	; 0x98
    f8d0:	bgt.w	fb8a <_svfprintf_r+0xbfa>
    f8d4:	add.w	sl, sl, #8
    f8d8:	ldr	r1, [sp, #80]	; 0x50
    f8da:	str.w	r1, [sl, #4]
    f8de:	adds	r3, #1
    f8e0:	add	r2, r1
    f8e2:	cmp	r3, #7
    f8e4:	add	r1, sp, #120	; 0x78
    f8e6:	strd	r3, r2, [sp, #148]	; 0x94
    f8ea:	str.w	r1, [sl]
    f8ee:	ble.w	f2bc <_svfprintf_r+0x32c>
    f8f2:	vmov	r1, s22
    f8f6:	add	r2, sp, #144	; 0x90
    f8f8:	mov	r0, fp
    f8fa:	bl	11cf8 <__ssprint_r>
    f8fe:	cmp	r0, #0
    f900:	bne.n	f85a <_svfprintf_r+0x8ca>
    f902:	ldr	r2, [sp, #152]	; 0x98
    f904:	add.w	sl, sp, #156	; 0x9c
    f908:	b.n	f2c0 <_svfprintf_r+0x330>
    f90a:	cmp	r5, #16
    f90c:	ldrd	r1, r2, [sp, #148]	; 0x94
    f910:	ldr	r6, [pc, #176]	; (f9c4 <_svfprintf_r+0xa34>)
    f912:	ble.n	f95e <_svfprintf_r+0x9ce>
    f914:	str	r4, [sp, #92]	; 0x5c
    f916:	movs	r3, #16
    f918:	vmov	r4, s22
    f91c:	mov	r0, r1
    f91e:	b.n	f92a <_svfprintf_r+0x99a>
    f920:	subs	r5, #16
    f922:	cmp	r5, #16
    f924:	add.w	sl, sl, #8
    f928:	ble.n	f95a <_svfprintf_r+0x9ca>
    f92a:	adds	r0, #1
    f92c:	adds	r2, #16
    f92e:	cmp	r0, #7
    f930:	strd	r6, r3, [sl]
    f934:	strd	r0, r2, [sp, #148]	; 0x94
    f938:	ble.n	f920 <_svfprintf_r+0x990>
    f93a:	add	r2, sp, #144	; 0x90
    f93c:	mov	r1, r4
    f93e:	mov	r0, fp
    f940:	add.w	sl, sp, #156	; 0x9c
    f944:	bl	11cf8 <__ssprint_r>
    f948:	cmp	r0, #0
    f94a:	bne.n	f85a <_svfprintf_r+0x8ca>
    f94c:	subs	r5, #16
    f94e:	cmp	r5, #16
    f950:	ldrd	r0, r2, [sp, #148]	; 0x94
    f954:	mov.w	r3, #16
    f958:	bgt.n	f92a <_svfprintf_r+0x99a>
    f95a:	ldr	r4, [sp, #92]	; 0x5c
    f95c:	mov	r1, r0
    f95e:	adds	r1, #1
    f960:	add	r2, r5
    f962:	cmp	r1, #7
    f964:	strd	r1, r2, [sp, #148]	; 0x94
    f968:	str.w	r6, [sl]
    f96c:	str.w	r5, [sl, #4]
    f970:	bgt.w	100ee <_svfprintf_r+0x115e>
    f974:	ldrb.w	r1, [sp, #103]	; 0x67
    f978:	add.w	sl, sl, #8
    f97c:	b.n	f23a <_svfprintf_r+0x2aa>
    f97e:	str.w	r8, [sp, #8]
    f982:	cmp	r2, #10
    f984:	sbcs.w	r3, r1, #0
    f988:	bcs.w	10016 <_svfprintf_r+0x1086>
    f98c:	adds	r2, #48	; 0x30
    f98e:	movs	r3, #1
    f990:	ldr.w	r8, [sp, #8]
    f994:	strb.w	r2, [sp, #319]	; 0x13f
    f998:	str	r3, [sp, #20]
    f99a:	addw	r4, sp, #319	; 0x13f
    f99e:	b.n	f672 <_svfprintf_r+0x6e2>
    f9a0:	vmov	r1, s22
    f9a4:	add	r2, sp, #144	; 0x90
    f9a6:	mov	r0, fp
    f9a8:	bl	11cf8 <__ssprint_r>
    f9ac:	cmp	r0, #0
    f9ae:	bne.w	f85a <_svfprintf_r+0x8ca>
    f9b2:	ldr	r2, [sp, #152]	; 0x98
    f9b4:	add.w	sl, sp, #156	; 0x9c
    f9b8:	b.n	f260 <_svfprintf_r+0x2d0>
    f9ba:	nop
    f9bc:	.word	0x20000e98
    f9c0:	.word	0x2000130c
    f9c4:	.word	0x20000e9c
    f9c8:	vmov	r1, s22
    f9cc:	add	r2, sp, #144	; 0x90
    f9ce:	mov	r0, fp
    f9d0:	bl	11cf8 <__ssprint_r>
    f9d4:	cmp	r0, #0
    f9d6:	bne.w	f85a <_svfprintf_r+0x8ca>
    f9da:	ldr	r2, [sp, #152]	; 0x98
    f9dc:	add.w	sl, sp, #156	; 0x9c
    f9e0:	b.n	f286 <_svfprintf_r+0x2f6>
    f9e2:	cmp	r4, #16
    f9e4:	ldr	r3, [sp, #148]	; 0x94
    f9e6:	ldr	r6, [pc, #760]	; (fce0 <_svfprintf_r+0xd50>)
    f9e8:	ble.n	fa2a <_svfprintf_r+0xa9a>
    f9ea:	vmov	r8, s22
    f9ee:	movs	r5, #16
    f9f0:	b.n	f9fc <_svfprintf_r+0xa6c>
    f9f2:	subs	r4, #16
    f9f4:	cmp	r4, #16
    f9f6:	add.w	sl, sl, #8
    f9fa:	ble.n	fa2a <_svfprintf_r+0xa9a>
    f9fc:	adds	r3, #1
    f9fe:	adds	r2, #16
    fa00:	cmp	r3, #7
    fa02:	strd	r6, r5, [sl]
    fa06:	strd	r3, r2, [sp, #148]	; 0x94
    fa0a:	ble.n	f9f2 <_svfprintf_r+0xa62>
    fa0c:	add	r2, sp, #144	; 0x90
    fa0e:	mov	r1, r8
    fa10:	mov	r0, fp
    fa12:	add.w	sl, sp, #156	; 0x9c
    fa16:	bl	11cf8 <__ssprint_r>
    fa1a:	cmp	r0, #0
    fa1c:	bne.w	f85a <_svfprintf_r+0x8ca>
    fa20:	subs	r4, #16
    fa22:	cmp	r4, #16
    fa24:	ldrd	r3, r2, [sp, #148]	; 0x94
    fa28:	bgt.n	f9fc <_svfprintf_r+0xa6c>
    fa2a:	adds	r3, #1
    fa2c:	add	r2, r4
    fa2e:	cmp	r3, #7
    fa30:	strd	r6, r4, [sl]
    fa34:	strd	r3, r2, [sp, #148]	; 0x94
    fa38:	ble.w	f2d2 <_svfprintf_r+0x342>
    fa3c:	vmov	r1, s22
    fa40:	add	r2, sp, #144	; 0x90
    fa42:	mov	r0, fp
    fa44:	bl	11cf8 <__ssprint_r>
    fa48:	cmp	r0, #0
    fa4a:	bne.w	f85a <_svfprintf_r+0x8ca>
    fa4e:	ldr	r2, [sp, #152]	; 0x98
    fa50:	b.n	f2d2 <_svfprintf_r+0x342>
    fa52:	ldr	r1, [sp, #108]	; 0x6c
    fa54:	cmp	r1, #0
    fa56:	ble.w	1010e <_svfprintf_r+0x117e>
    fa5a:	ldr	r6, [sp, #48]	; 0x30
    fa5c:	ldr	r3, [sp, #56]	; 0x38
    fa5e:	cmp	r6, r3
    fa60:	it	ge
    fa62:	movge	r6, r3
    fa64:	cmp	r6, #0
    fa66:	ble.n	fa80 <_svfprintf_r+0xaf0>
    fa68:	ldr	r3, [sp, #148]	; 0x94
    fa6a:	adds	r3, #1
    fa6c:	add	r2, r6
    fa6e:	cmp	r3, #7
    fa70:	strd	r4, r6, [sl]
    fa74:	str	r2, [sp, #152]	; 0x98
    fa76:	str	r3, [sp, #148]	; 0x94
    fa78:	bgt.w	1078e <_svfprintf_r+0x17fe>
    fa7c:	add.w	sl, sl, #8
    fa80:	ldr	r5, [sp, #48]	; 0x30
    fa82:	cmp	r6, #0
    fa84:	it	ge
    fa86:	subge	r5, r5, r6
    fa88:	cmp	r5, #0
    fa8a:	bgt.w	fe94 <_svfprintf_r+0xf04>
    fa8e:	ldr	r3, [sp, #48]	; 0x30
    fa90:	tst.w	r8, #1024	; 0x400
    fa94:	add	r3, r4
    fa96:	str	r3, [sp, #20]
    fa98:	bne.w	feda <_svfprintf_r+0xf4a>
    fa9c:	ldr	r3, [sp, #108]	; 0x6c
    fa9e:	ldr	r1, [sp, #56]	; 0x38
    faa0:	cmp	r3, r1
    faa2:	blt.n	faac <_svfprintf_r+0xb1c>
    faa4:	tst.w	r8, #1
    faa8:	beq.w	1044a <_svfprintf_r+0x14ba>
    faac:	ldr	r1, [sp, #64]	; 0x40
    faae:	ldr	r0, [sp, #72]	; 0x48
    fab0:	add	r2, r1
    fab2:	strd	r0, r1, [sl]
    fab6:	ldr	r1, [sp, #148]	; 0x94
    fab8:	str	r2, [sp, #152]	; 0x98
    faba:	adds	r1, #1
    fabc:	cmp	r1, #7
    fabe:	str	r1, [sp, #148]	; 0x94
    fac0:	bgt.w	1080e <_svfprintf_r+0x187e>
    fac4:	add.w	sl, sl, #8
    fac8:	ldr	r1, [sp, #56]	; 0x38
    faca:	adds	r5, r4, r1
    facc:	subs	r4, r1, r3
    face:	ldr	r3, [sp, #20]
    fad0:	subs	r5, r5, r3
    fad2:	cmp	r5, r4
    fad4:	it	ge
    fad6:	movge	r5, r4
    fad8:	cmp	r5, #0
    fada:	ble.n	faf8 <_svfprintf_r+0xb68>
    fadc:	str.w	r3, [sl]
    fae0:	ldr	r3, [sp, #148]	; 0x94
    fae2:	str.w	r5, [sl, #4]
    fae6:	adds	r3, #1
    fae8:	add	r2, r5
    faea:	cmp	r3, #7
    faec:	str	r2, [sp, #152]	; 0x98
    faee:	str	r3, [sp, #148]	; 0x94
    faf0:	bgt.w	1086a <_svfprintf_r+0x18da>
    faf4:	add.w	sl, sl, #8
    faf8:	cmp	r5, #0
    fafa:	it	ge
    fafc:	subge	r4, r4, r5
    fafe:	cmp	r4, #0
    fb00:	ble.w	f2c0 <_svfprintf_r+0x330>
    fb04:	cmp	r4, #16
    fb06:	ldr	r3, [sp, #148]	; 0x94
    fb08:	ble.w	10204 <_svfprintf_r+0x1274>
    fb0c:	vmov	r6, s22
    fb10:	movs	r5, #16
    fb12:	b.n	fb20 <_svfprintf_r+0xb90>
    fb14:	add.w	sl, sl, #8
    fb18:	subs	r4, #16
    fb1a:	cmp	r4, #16
    fb1c:	ble.w	10204 <_svfprintf_r+0x1274>
    fb20:	adds	r3, #1
    fb22:	ldr	r1, [pc, #448]	; (fce4 <_svfprintf_r+0xd54>)
    fb24:	adds	r2, #16
    fb26:	cmp	r3, #7
    fb28:	strd	r1, r5, [sl]
    fb2c:	strd	r3, r2, [sp, #148]	; 0x94
    fb30:	ble.n	fb14 <_svfprintf_r+0xb84>
    fb32:	add	r2, sp, #144	; 0x90
    fb34:	mov	r1, r6
    fb36:	mov	r0, fp
    fb38:	bl	11cf8 <__ssprint_r>
    fb3c:	cmp	r0, #0
    fb3e:	bne.w	f85a <_svfprintf_r+0x8ca>
    fb42:	ldrd	r3, r2, [sp, #148]	; 0x94
    fb46:	add.w	sl, sp, #156	; 0x9c
    fb4a:	b.n	fb18 <_svfprintf_r+0xb88>
    fb4c:	cmp	r3, #48	; 0x30
    fb4e:	beq.w	f668 <_svfprintf_r+0x6d8>
    fb52:	movs	r3, #48	; 0x30
    fb54:	subs	r0, #2
    fb56:	strb.w	r3, [r4, #-1]
    fb5a:	add	r3, sp, #320	; 0x140
    fb5c:	subs	r3, r3, r0
    fb5e:	ldr.w	r8, [sp, #8]
    fb62:	str	r3, [sp, #20]
    fb64:	mov	r4, r0
    fb66:	b.n	f672 <_svfprintf_r+0x6e2>
    fb68:	tst.w	r8, #1
    fb6c:	bne.w	f874 <_svfprintf_r+0x8e4>
    fb70:	ldr	r3, [sp, #148]	; 0x94
    fb72:	str.w	r4, [sl]
    fb76:	adds	r3, #1
    fb78:	adds	r2, #1
    fb7a:	movs	r1, #1
    fb7c:	cmp	r3, #7
    fb7e:	str	r2, [sp, #152]	; 0x98
    fb80:	str	r3, [sp, #148]	; 0x94
    fb82:	str.w	r1, [sl, #4]
    fb86:	ble.w	f8d4 <_svfprintf_r+0x944>
    fb8a:	vmov	r1, s22
    fb8e:	add	r2, sp, #144	; 0x90
    fb90:	mov	r0, fp
    fb92:	bl	11cf8 <__ssprint_r>
    fb96:	cmp	r0, #0
    fb98:	bne.w	f85a <_svfprintf_r+0x8ca>
    fb9c:	ldrd	r3, r2, [sp, #148]	; 0x94
    fba0:	add.w	sl, sp, #156	; 0x9c
    fba4:	b.n	f8d8 <_svfprintf_r+0x948>
    fba6:	ldr	r1, [sp, #56]	; 0x38
    fba8:	subs	r4, r1, #1
    fbaa:	cmp	r4, #0
    fbac:	ble.w	f8d8 <_svfprintf_r+0x948>
    fbb0:	cmp	r4, #16
    fbb2:	ble.w	10278 <_svfprintf_r+0x12e8>
    fbb6:	vmov	r6, s22
    fbba:	movs	r5, #16
    fbbc:	b.n	fbca <_svfprintf_r+0xc3a>
    fbbe:	add.w	sl, sl, #8
    fbc2:	subs	r4, #16
    fbc4:	cmp	r4, #16
    fbc6:	ble.w	10278 <_svfprintf_r+0x12e8>
    fbca:	adds	r3, #1
    fbcc:	ldr	r1, [pc, #276]	; (fce4 <_svfprintf_r+0xd54>)
    fbce:	adds	r2, #16
    fbd0:	cmp	r3, #7
    fbd2:	strd	r1, r5, [sl]
    fbd6:	strd	r3, r2, [sp, #148]	; 0x94
    fbda:	ble.n	fbbe <_svfprintf_r+0xc2e>
    fbdc:	add	r2, sp, #144	; 0x90
    fbde:	mov	r1, r6
    fbe0:	mov	r0, fp
    fbe2:	bl	11cf8 <__ssprint_r>
    fbe6:	cmp	r0, #0
    fbe8:	bne.w	f85a <_svfprintf_r+0x8ca>
    fbec:	ldrd	r3, r2, [sp, #148]	; 0x94
    fbf0:	add.w	sl, sp, #156	; 0x9c
    fbf4:	b.n	fbc2 <_svfprintf_r+0xc32>
    fbf6:	vmov	r1, s22
    fbfa:	add	r2, sp, #144	; 0x90
    fbfc:	mov	r0, fp
    fbfe:	bl	11cf8 <__ssprint_r>
    fc02:	cmp	r0, #0
    fc04:	bne.w	f85a <_svfprintf_r+0x8ca>
    fc08:	ldr	r2, [sp, #152]	; 0x98
    fc0a:	add.w	sl, sp, #156	; 0x9c
    fc0e:	b.w	f29a <_svfprintf_r+0x30a>
    fc12:	ldr	r3, [sp, #8]
    fc14:	ands.w	r3, r3, #16
    fc18:	bne.w	fd9e <_svfprintf_r+0xe0e>
    fc1c:	ldr	r2, [sp, #8]
    fc1e:	ands.w	r2, r2, #64	; 0x40
    fc22:	beq.w	1031a <_svfprintf_r+0x138a>
    fc26:	ldr	r0, [sp, #32]
    fc28:	ldr.w	r2, [r0], #4
    fc2c:	str	r0, [sp, #32]
    fc2e:	mov	r1, r3
    fc30:	uxth	r2, r2
    fc32:	movs	r3, #1
    fc34:	b.n	f4da <_svfprintf_r+0x54a>
    fc36:	ands.w	r3, r8, #16
    fc3a:	bne.n	fce8 <_svfprintf_r+0xd58>
    fc3c:	ands.w	r2, r8, #64	; 0x40
    fc40:	beq.w	102fe <_svfprintf_r+0x136e>
    fc44:	ldr	r0, [sp, #32]
    fc46:	ldr.w	r2, [r0], #4
    fc4a:	str	r0, [sp, #32]
    fc4c:	mov	r1, r3
    fc4e:	uxth	r2, r2
    fc50:	b.n	f5a4 <_svfprintf_r+0x614>
    fc52:	negs	r2, r2
    fc54:	sbc.w	r1, r1, r1, lsl #1
    fc58:	str.w	r8, [sp, #8]
    fc5c:	movs	r0, #45	; 0x2d
    fc5e:	movs	r3, #1
    fc60:	b.n	f4dc <_svfprintf_r+0x54c>
    fc62:	vmov	r1, s22
    fc66:	add	r2, sp, #144	; 0x90
    fc68:	mov	r0, fp
    fc6a:	bl	11cf8 <__ssprint_r>
    fc6e:	cmp	r0, #0
    fc70:	bne.w	f85a <_svfprintf_r+0x8ca>
    fc74:	ldrd	r3, r2, [sp, #148]	; 0x94
    fc78:	add.w	sl, sp, #156	; 0x9c
    fc7c:	b.n	f8ac <_svfprintf_r+0x91c>
    fc7e:	vmov	r1, s22
    fc82:	add	r2, sp, #144	; 0x90
    fc84:	mov	r0, fp
    fc86:	bl	11cf8 <__ssprint_r>
    fc8a:	cmp	r0, #0
    fc8c:	bne.w	f85a <_svfprintf_r+0x8ca>
    fc90:	ldrd	r3, r2, [sp, #148]	; 0x94
    fc94:	add.w	sl, sp, #156	; 0x9c
    fc98:	b.n	f892 <_svfprintf_r+0x902>
    fc9a:	tst.w	r8, #1
    fc9e:	beq.w	f2c0 <_svfprintf_r+0x330>
    fca2:	b.n	f6fa <_svfprintf_r+0x76a>
    fca4:	str	r3, [sp, #32]
    fca6:	ldrb.w	r3, [r9]
    fcaa:	b.w	f048 <_svfprintf_r+0xb8>
    fcae:	add	r4, sp, #320	; 0x140
    fcb0:	b.n	f672 <_svfprintf_r+0x6e2>
    fcb2:	tst.w	r8, #512	; 0x200
    fcb6:	bne.w	10470 <_svfprintf_r+0x14e0>
    fcba:	ldr.w	r2, [r3], #4
    fcbe:	str	r3, [sp, #32]
    fcc0:	asrs	r1, r2, #31
    fcc2:	mov	r3, r1
    fcc4:	b.w	f434 <_svfprintf_r+0x4a4>
    fcc8:	ldr	r3, [sp, #32]
    fcca:	ldr	r0, [sp, #16]
    fccc:	ldr.w	r1, [r3], #4
    fcd0:	str	r3, [sp, #32]
    fcd2:	asrs	r2, r0, #31
    fcd4:	strd	r0, r2, [r1]
    fcd8:	mov	r4, r9
    fcda:	b.w	eff4 <_svfprintf_r+0x64>
    fcde:	nop
    fce0:	.word	0x20000e9c
    fce4:	.word	0x2000130c
    fce8:	ldr	r3, [sp, #32]
    fcea:	ldr.w	r2, [r3], #4
    fcee:	str	r3, [sp, #32]
    fcf0:	b.n	f5a4 <_svfprintf_r+0x614>
    fcf2:	vcmp.f64	d8, d8
    fcf6:	vmrs	APSR_nzcv, fpscr
    fcfa:	bvs.w	10a26 <_svfprintf_r+0x1a96>
    fcfe:	ldr	r3, [sp, #44]	; 0x2c
    fd00:	cmp	r3, #97	; 0x61
    fd02:	beq.w	107aa <_svfprintf_r+0x181a>
    fd06:	cmp	r3, #65	; 0x41
    fd08:	beq.w	1088c <_svfprintf_r+0x18fc>
    fd0c:	ldr	r3, [sp, #12]
    fd0e:	adds	r3, #1
    fd10:	ldr	r3, [sp, #44]	; 0x2c
    fd12:	bic.w	r5, r3, #32
    fd16:	beq.w	1061a <_svfprintf_r+0x168a>
    fd1a:	cmp	r5, #71	; 0x47
    fd1c:	bne.n	fd28 <_svfprintf_r+0xd98>
    fd1e:	ldr	r3, [sp, #12]
    fd20:	cmp	r3, #0
    fd22:	it	eq
    fd24:	moveq	r3, #1
    fd26:	str	r3, [sp, #12]
    fd28:	vmov	r3, s17
    fd2c:	cmp	r3, #0
    fd2e:	orr.w	r2, r8, #256	; 0x100
    fd32:	mov	r6, r8
    fd34:	blt.w	10968 <_svfprintf_r+0x19d8>
    fd38:	vmov.f64	d10, d8
    fd3c:	movs	r3, #0
    fd3e:	mov	r8, r2
    fd40:	str	r3, [sp, #36]	; 0x24
    fd42:	str	r3, [sp, #28]
    fd44:	ldr	r3, [sp, #44]	; 0x2c
    fd46:	subs	r3, #65	; 0x41
    fd48:	cmp	r3, #37	; 0x25
    fd4a:	bhi.w	1047e <_svfprintf_r+0x14ee>
    fd4e:	tbh	[pc, r3, lsl #1]
    fd52:	.short	0x046f
    fd54:	.word	0x03960396
    fd58:	.word	0x04680396
    fd5c:	.word	0x0396046c
    fd60:	.word	0x03960396
    fd64:	.word	0x03960396
    fd68:	.word	0x03960396
    fd6c:	.word	0x03960396
    fd70:	.word	0x03960396
    fd74:	.word	0x03960396
    fd78:	.word	0x03960396
    fd7c:	.word	0x03960396
    fd80:	.word	0x03960396
    fd84:	.word	0x03960396
    fd88:	.word	0x03960396
    fd8c:	.word	0x03960396
    fd90:	.word	0x03960396
    fd94:	.word	0x03960396
    fd98:	.word	0x04680396
    fd9c:	.short	0x046c
    fd9e:	ldr	r3, [sp, #32]
    fda0:	ldr.w	r2, [r3], #4
    fda4:	str	r3, [sp, #32]
    fda6:	movs	r3, #1
    fda8:	b.w	f4da <_svfprintf_r+0x54a>
    fdac:	ldr	r3, [sp, #76]	; 0x4c
    fdae:	cmp	r3, #0
    fdb0:	beq.w	f152 <_svfprintf_r+0x1c2>
    fdb4:	ldr	r3, [sp, #76]	; 0x4c
    fdb6:	ldrb	r3, [r3, #0]
    fdb8:	cmp	r3, #0
    fdba:	beq.w	f152 <_svfprintf_r+0x1c2>
    fdbe:	ldrb.w	r3, [r9]
    fdc2:	orr.w	r8, r8, #1024	; 0x400
    fdc6:	b.w	f048 <_svfprintf_r+0xb8>
    fdca:	str	r3, [sp, #44]	; 0x2c
    fdcc:	str.w	r8, [sp, #8]
    fdd0:	b.w	f5b6 <_svfprintf_r+0x626>
    fdd4:	str	r3, [sp, #44]	; 0x2c
    fdd6:	ldr	r3, [pc, #616]	; (10040 <_svfprintf_r+0x10b0>)
    fdd8:	str	r3, [sp, #68]	; 0x44
    fdda:	ands.w	r1, r8, #32
    fdde:	beq.w	ffec <_svfprintf_r+0x105c>
    fde2:	ldr	r3, [sp, #32]
    fde4:	adds	r3, #7
    fde6:	bic.w	r3, r3, #7
    fdea:	ldr	r1, [r3, #4]
    fdec:	ldr.w	r2, [r3], #8
    fdf0:	str	r3, [sp, #32]
    fdf2:	tst.w	r8, #1
    fdf6:	beq.n	fe0e <_svfprintf_r+0xe7e>
    fdf8:	orrs.w	r3, r2, r1
    fdfc:	beq.n	fe0e <_svfprintf_r+0xe7e>
    fdfe:	ldr	r3, [sp, #44]	; 0x2c
    fe00:	strb.w	r3, [sp, #105]	; 0x69
    fe04:	movs	r3, #48	; 0x30
    fe06:	orr.w	r8, r8, #2
    fe0a:	strb.w	r3, [sp, #104]	; 0x68
    fe0e:	bic.w	r3, r8, #1024	; 0x400
    fe12:	str	r3, [sp, #8]
    fe14:	movs	r3, #2
    fe16:	b.w	f4da <_svfprintf_r+0x54a>
    fe1a:	str	r3, [sp, #44]	; 0x2c
    fe1c:	b.w	f58c <_svfprintf_r+0x5fc>
    fe20:	str	r3, [sp, #44]	; 0x2c
    fe22:	ldr	r3, [pc, #544]	; (10044 <_svfprintf_r+0x10b4>)
    fe24:	str	r3, [sp, #68]	; 0x44
    fe26:	b.n	fdda <_svfprintf_r+0xe4a>
    fe28:	ldr	r3, [sp, #32]
    fe2a:	movs	r1, #1
    fe2c:	ldr.w	r2, [r3], #4
    fe30:	str	r1, [sp, #8]
    fe32:	strb.w	r2, [sp, #220]	; 0xdc
    fe36:	str	r3, [sp, #32]
    fe38:	str	r1, [sp, #20]
    fe3a:	add	r4, sp, #220	; 0xdc
    fe3c:	b.w	f39e <_svfprintf_r+0x40e>
    fe40:	vmov	r1, s22
    fe44:	add	r2, sp, #144	; 0x90
    fe46:	mov	r0, fp
    fe48:	bl	11cf8 <__ssprint_r>
    fe4c:	cmp	r0, #0
    fe4e:	bne.w	f85a <_svfprintf_r+0x8ca>
    fe52:	ldr	r2, [sp, #152]	; 0x98
    fe54:	add.w	sl, sp, #156	; 0x9c
    fe58:	b.n	f716 <_svfprintf_r+0x786>
    fe5a:	ldr	r3, [sp, #12]
    fe5c:	str	r4, [sp, #28]
    fe5e:	cmp	r3, #6
    fe60:	mov	r2, r4
    fe62:	it	cs
    fe64:	movcs	r3, #6
    fe66:	str	r4, [sp, #12]
    fe68:	mov	r1, r4
    fe6a:	strd	r2, r2, [sp, #48]	; 0x30
    fe6e:	ldr	r4, [pc, #472]	; (10048 <_svfprintf_r+0x10b8>)
    fe70:	str	r3, [sp, #8]
    fe72:	str	r3, [sp, #20]
    fe74:	str	r2, [sp, #60]	; 0x3c
    fe76:	b.w	f352 <_svfprintf_r+0x3c2>
    fe7a:	movs	r1, #64	; 0x40
    fe7c:	mov	r0, fp
    fe7e:	bl	d230 <_malloc_r>
    fe82:	str	r0, [r4, #0]
    fe84:	str	r0, [r4, #16]
    fe86:	cmp	r0, #0
    fe88:	beq.w	10aaa <_svfprintf_r+0x1b1a>
    fe8c:	movs	r3, #64	; 0x40
    fe8e:	str	r3, [r4, #20]
    fe90:	b.w	efd0 <_svfprintf_r+0x40>
    fe94:	cmp	r5, #16
    fe96:	ldr	r3, [sp, #148]	; 0x94
    fe98:	ble.w	10356 <_svfprintf_r+0x13c6>
    fe9c:	mov	r1, sl
    fe9e:	movs	r6, #16
    fea0:	vmov	sl, s22
    fea4:	b.n	feb0 <_svfprintf_r+0xf20>
    fea6:	adds	r1, #8
    fea8:	subs	r5, #16
    feaa:	cmp	r5, #16
    feac:	ble.w	10354 <_svfprintf_r+0x13c4>
    feb0:	adds	r3, #1
    feb2:	ldr	r0, [pc, #408]	; (1004c <_svfprintf_r+0x10bc>)
    feb4:	adds	r2, #16
    feb6:	cmp	r3, #7
    feb8:	strd	r0, r6, [r1]
    febc:	strd	r3, r2, [sp, #148]	; 0x94
    fec0:	ble.n	fea6 <_svfprintf_r+0xf16>
    fec2:	add	r2, sp, #144	; 0x90
    fec4:	mov	r1, sl
    fec6:	mov	r0, fp
    fec8:	bl	11cf8 <__ssprint_r>
    fecc:	cmp	r0, #0
    fece:	bne.w	f85a <_svfprintf_r+0x8ca>
    fed2:	ldrd	r3, r2, [sp, #148]	; 0x94
    fed6:	add	r1, sp, #156	; 0x9c
    fed8:	b.n	fea8 <_svfprintf_r+0xf18>
    feda:	ldr	r3, [sp, #56]	; 0x38
    fedc:	str.w	r9, [sp, #36]	; 0x24
    fee0:	adds	r3, r4, r3
    fee2:	str	r3, [sp, #12]
    fee4:	ldr	r3, [sp, #52]	; 0x34
    fee6:	str.w	r8, [sp, #40]	; 0x28
    feea:	ldr	r6, [sp, #76]	; 0x4c
    feec:	ldr	r5, [sp, #20]
    feee:	ldr.w	r9, [sp, #88]	; 0x58
    fef2:	ldr.w	r8, [sp, #60]	; 0x3c
    fef6:	str	r4, [sp, #44]	; 0x2c
    fef8:	vmov	r1, s22
    fefc:	mov	r0, sl
    fefe:	cmp	r3, #0
    ff00:	beq.n	ff6c <_svfprintf_r+0xfdc>
    ff02:	cmp.w	r8, #0
    ff06:	bne.n	ff74 <_svfprintf_r+0xfe4>
    ff08:	ldr	r3, [sp, #52]	; 0x34
    ff0a:	subs	r3, #1
    ff0c:	subs	r6, #1
    ff0e:	str	r3, [sp, #52]	; 0x34
    ff10:	ldr	r3, [sp, #84]	; 0x54
    ff12:	strd	r3, r9, [r0]
    ff16:	ldr	r3, [sp, #148]	; 0x94
    ff18:	adds	r3, #1
    ff1a:	add	r2, r9
    ff1c:	cmp	r3, #7
    ff1e:	str	r2, [sp, #152]	; 0x98
    ff20:	str	r3, [sp, #148]	; 0x94
    ff22:	bgt.n	fffe <_svfprintf_r+0x106e>
    ff24:	adds	r0, #8
    ff26:	ldr	r3, [sp, #12]
    ff28:	ldrb.w	ip, [r6]
    ff2c:	subs	r3, r3, r5
    ff2e:	cmp	r3, ip
    ff30:	it	ge
    ff32:	movge	r3, ip
    ff34:	cmp	r3, #0
    ff36:	mov	sl, r3
    ff38:	ble.n	ff54 <_svfprintf_r+0xfc4>
    ff3a:	ldr	r4, [sp, #148]	; 0x94
    ff3c:	adds	r4, #1
    ff3e:	add	r2, r3
    ff40:	cmp	r4, #7
    ff42:	strd	r5, r3, [r0]
    ff46:	str	r2, [sp, #152]	; 0x98
    ff48:	str	r4, [sp, #148]	; 0x94
    ff4a:	bgt.w	1023c <_svfprintf_r+0x12ac>
    ff4e:	ldrb.w	ip, [r6]
    ff52:	adds	r0, #8
    ff54:	cmp.w	sl, #0
    ff58:	ite	ge
    ff5a:	subge.w	r4, ip, sl
    ff5e:	movlt	r4, ip
    ff60:	cmp	r4, #0
    ff62:	bgt.n	ff7a <_svfprintf_r+0xfea>
    ff64:	add	r5, ip
    ff66:	ldr	r3, [sp, #52]	; 0x34
    ff68:	cmp	r3, #0
    ff6a:	bne.n	ff02 <_svfprintf_r+0xf72>
    ff6c:	cmp.w	r8, #0
    ff70:	beq.w	106cc <_svfprintf_r+0x173c>
    ff74:	add.w	r8, r8, #4294967295
    ff78:	b.n	ff10 <_svfprintf_r+0xf80>
    ff7a:	cmp	r4, #16
    ff7c:	ldr.w	ip, [sp, #148]	; 0x94
    ff80:	ble.n	ffcc <_svfprintf_r+0x103c>
    ff82:	str	r5, [sp, #20]
    ff84:	mov.w	sl, #16
    ff88:	mov	r3, ip
    ff8a:	mov	r5, r1
    ff8c:	b.n	ff98 <_svfprintf_r+0x1008>
    ff8e:	subs	r4, #16
    ff90:	cmp	r4, #16
    ff92:	add.w	r0, r0, #8
    ff96:	ble.n	ffc6 <_svfprintf_r+0x1036>
    ff98:	adds	r3, #1
    ff9a:	ldr	r1, [pc, #176]	; (1004c <_svfprintf_r+0x10bc>)
    ff9c:	adds	r2, #16
    ff9e:	cmp	r3, #7
    ffa0:	strd	r1, sl, [r0]
    ffa4:	strd	r3, r2, [sp, #148]	; 0x94
    ffa8:	ble.n	ff8e <_svfprintf_r+0xffe>
    ffaa:	add	r2, sp, #144	; 0x90
    ffac:	mov	r1, r5
    ffae:	mov	r0, fp
    ffb0:	bl	11cf8 <__ssprint_r>
    ffb4:	cmp	r0, #0
    ffb6:	bne.w	f85a <_svfprintf_r+0x8ca>
    ffba:	subs	r4, #16
    ffbc:	cmp	r4, #16
    ffbe:	ldrd	r3, r2, [sp, #148]	; 0x94
    ffc2:	add	r0, sp, #156	; 0x9c
    ffc4:	bgt.n	ff98 <_svfprintf_r+0x1008>
    ffc6:	mov	r1, r5
    ffc8:	ldr	r5, [sp, #20]
    ffca:	mov	ip, r3
    ffcc:	add.w	r3, ip, #1
    ffd0:	add	r2, r4
    ffd2:	str	r4, [r0, #4]
    ffd4:	cmp	r3, #7
    ffd6:	ldr	r4, [pc, #116]	; (1004c <_svfprintf_r+0x10bc>)
    ffd8:	str	r4, [r0, #0]
    ffda:	strd	r3, r2, [sp, #148]	; 0x94
    ffde:	bgt.w	1076e <_svfprintf_r+0x17de>
    ffe2:	ldrb.w	ip, [r6]
    ffe6:	adds	r0, #8
    ffe8:	add	r5, ip
    ffea:	b.n	ff66 <_svfprintf_r+0xfd6>
    ffec:	ands.w	r3, r8, #16
    fff0:	beq.w	10178 <_svfprintf_r+0x11e8>
    fff4:	ldr	r3, [sp, #32]
    fff6:	ldr.w	r2, [r3], #4
    fffa:	str	r3, [sp, #32]
    fffc:	b.n	fdf2 <_svfprintf_r+0xe62>
    fffe:	add	r2, sp, #144	; 0x90
   10000:	mov	r0, fp
   10002:	str	r1, [sp, #20]
   10004:	bl	11cf8 <__ssprint_r>
   10008:	cmp	r0, #0
   1000a:	bne.w	f85a <_svfprintf_r+0x8ca>
   1000e:	ldr	r2, [sp, #152]	; 0x98
   10010:	ldr	r1, [sp, #20]
   10012:	add	r0, sp, #156	; 0x9c
   10014:	b.n	ff26 <_svfprintf_r+0xf96>
   10016:	ldr	r0, [sp, #8]
   10018:	str.w	sl, [sp, #28]
   1001c:	add	r4, sp, #320	; 0x140
   1001e:	and.w	r0, r0, #1024	; 0x400
   10022:	movs	r5, #0
   10024:	vmov	s20, fp
   10028:	ldr	r3, [pc, #36]	; (10050 <_svfprintf_r+0x10c0>)
   1002a:	ldr.w	sl, [sp, #76]	; 0x4c
   1002e:	str.w	r9, [sp, #20]
   10032:	mov	fp, r4
   10034:	mov.w	r8, #5
   10038:	mov	ip, r5
   1003a:	mov	r4, r0
   1003c:	b.n	10060 <_svfprintf_r+0x10d0>
   1003e:	nop
   10040:	.word	0x20000e68
   10044:	.word	0x20000e7c
   10048:	.word	0x20000e90
   1004c:	.word	0x2000130c
   10050:	.word	0xcccccccd
   10054:	cmp	r2, #10
   10056:	sbcs.w	r1, r1, #0
   1005a:	bcc.n	100ca <_svfprintf_r+0x113a>
   1005c:	mov	r2, r9
   1005e:	mov	r1, r6
   10060:	adds	r0, r2, r1
   10062:	adc.w	r0, r0, #0
   10066:	umull	r5, r6, r3, r0
   1006a:	bic.w	r5, r6, #3
   1006e:	add.w	r5, r5, r6, lsr #2
   10072:	subs	r0, r0, r5
   10074:	subs	r5, r2, r0
   10076:	mov.w	r6, #3435973836	; 0xcccccccc
   1007a:	sbc.w	lr, r1, #0
   1007e:	mul.w	r6, r6, r5
   10082:	umull	r9, r5, r5, r3
   10086:	mla	r6, r3, lr, r6
   1008a:	and.w	lr, r9, #1
   1008e:	add	r6, r5
   10090:	umull	r5, lr, lr, r8
   10094:	adds	r5, r5, r0
   10096:	mov.w	r9, r9, lsr #1
   1009a:	adds	r5, #48	; 0x30
   1009c:	strb.w	r5, [fp, #-1]
   100a0:	orr.w	r9, r9, r6, lsl #31
   100a4:	add.w	ip, ip, #1
   100a8:	add.w	fp, fp, #4294967295
   100ac:	lsrs	r6, r6, #1
   100ae:	cmp	r4, #0
   100b0:	beq.n	10054 <_svfprintf_r+0x10c4>
   100b2:	ldrb.w	r0, [sl]
   100b6:	cmp	ip, r0
   100b8:	bne.n	10054 <_svfprintf_r+0x10c4>
   100ba:	cmp.w	ip, #255	; 0xff
   100be:	beq.n	10054 <_svfprintf_r+0x10c4>
   100c0:	cmp	r2, #10
   100c2:	sbcs.w	r1, r1, #0
   100c6:	bcs.w	103e8 <_svfprintf_r+0x1458>
   100ca:	mov	r4, fp
   100cc:	add	r3, sp, #320	; 0x140
   100ce:	subs	r3, r3, r4
   100d0:	ldr.w	r9, [sp, #20]
   100d4:	str.w	sl, [sp, #76]	; 0x4c
   100d8:	vmov	fp, s20
   100dc:	ldr.w	sl, [sp, #28]
   100e0:	ldr.w	r8, [sp, #8]
   100e4:	str.w	ip, [sp, #56]	; 0x38
   100e8:	str	r3, [sp, #20]
   100ea:	b.w	f672 <_svfprintf_r+0x6e2>
   100ee:	vmov	r1, s22
   100f2:	add	r2, sp, #144	; 0x90
   100f4:	mov	r0, fp
   100f6:	bl	11cf8 <__ssprint_r>
   100fa:	cmp	r0, #0
   100fc:	bne.w	f85a <_svfprintf_r+0x8ca>
   10100:	ldrb.w	r1, [sp, #103]	; 0x67
   10104:	ldr	r2, [sp, #152]	; 0x98
   10106:	add.w	sl, sp, #156	; 0x9c
   1010a:	b.w	f23a <_svfprintf_r+0x2aa>
   1010e:	ldr	r3, [sp, #148]	; 0x94
   10110:	ldr	r0, [pc, #760]	; (1040c <_svfprintf_r+0x147c>)
   10112:	str.w	r0, [sl]
   10116:	adds	r3, #1
   10118:	adds	r2, #1
   1011a:	movs	r0, #1
   1011c:	cmp	r3, #7
   1011e:	str	r2, [sp, #152]	; 0x98
   10120:	str	r3, [sp, #148]	; 0x94
   10122:	str.w	r0, [sl, #4]
   10126:	bgt.w	10418 <_svfprintf_r+0x1488>
   1012a:	add.w	sl, sl, #8
   1012e:	cmp	r1, #0
   10130:	bne.w	10292 <_svfprintf_r+0x1302>
   10134:	ldr	r1, [sp, #56]	; 0x38
   10136:	and.w	r3, r8, #1
   1013a:	orrs	r3, r1
   1013c:	beq.w	f2c0 <_svfprintf_r+0x330>
   10140:	ldr	r3, [sp, #64]	; 0x40
   10142:	ldr	r1, [sp, #72]	; 0x48
   10144:	add	r2, r3
   10146:	strd	r1, r3, [sl]
   1014a:	ldr	r3, [sp, #148]	; 0x94
   1014c:	str	r2, [sp, #152]	; 0x98
   1014e:	adds	r3, #1
   10150:	cmp	r3, #7
   10152:	str	r3, [sp, #148]	; 0x94
   10154:	bgt.w	105fc <_svfprintf_r+0x166c>
   10158:	add.w	sl, sl, #8
   1015c:	ldr	r1, [sp, #56]	; 0x38
   1015e:	str.w	r4, [sl]
   10162:	adds	r3, #1
   10164:	add	r2, r1
   10166:	cmp	r3, #7
   10168:	strd	r3, r2, [sp, #148]	; 0x94
   1016c:	str.w	r1, [sl, #4]
   10170:	ble.w	f2bc <_svfprintf_r+0x32c>
   10174:	b.w	f8f2 <_svfprintf_r+0x962>
   10178:	ands.w	r2, r8, #64	; 0x40
   1017c:	beq.w	1033a <_svfprintf_r+0x13aa>
   10180:	ldr	r0, [sp, #32]
   10182:	ldr.w	r2, [r0], #4
   10186:	str	r0, [sp, #32]
   10188:	mov	r1, r3
   1018a:	uxth	r2, r2
   1018c:	b.n	fdf2 <_svfprintf_r+0xe62>
   1018e:	vmov	r1, s22
   10192:	add	r2, sp, #144	; 0x90
   10194:	mov	r0, fp
   10196:	bl	11cf8 <__ssprint_r>
   1019a:	cmp	r0, #0
   1019c:	bne.w	f85a <_svfprintf_r+0x8ca>
   101a0:	ldr	r2, [sp, #152]	; 0x98
   101a2:	add.w	sl, sp, #156	; 0x9c
   101a6:	b.w	f6f0 <_svfprintf_r+0x760>
   101aa:	add	r6, sp, #136	; 0x88
   101ac:	movs	r2, #8
   101ae:	movs	r1, #0
   101b0:	mov	r0, r6
   101b2:	str	r4, [sp, #116]	; 0x74
   101b4:	bl	e044 <memset>
   101b8:	ldr	r3, [sp, #12]
   101ba:	adds	r2, r3, #1
   101bc:	beq.w	10376 <_svfprintf_r+0x13e6>
   101c0:	movs	r5, #0
   101c2:	str.w	r9, [sp, #8]
   101c6:	str.w	r8, [sp, #28]
   101ca:	mov	r9, r3
   101cc:	mov	r8, r5
   101ce:	b.n	101ea <_svfprintf_r+0x125a>
   101d0:	add	r1, sp, #220	; 0xdc
   101d2:	mov	r0, fp
   101d4:	bl	11c6c <_wcrtomb_r>
   101d8:	adds	r3, r0, #1
   101da:	add	r0, r8
   101dc:	beq.w	10970 <_svfprintf_r+0x19e0>
   101e0:	cmp	r0, r9
   101e2:	bgt.n	101f6 <_svfprintf_r+0x1266>
   101e4:	beq.w	10a18 <_svfprintf_r+0x1a88>
   101e8:	mov	r8, r0
   101ea:	ldr	r2, [sp, #116]	; 0x74
   101ec:	ldr	r2, [r2, r5]
   101ee:	mov	r3, r6
   101f0:	adds	r5, #4
   101f2:	cmp	r2, #0
   101f4:	bne.n	101d0 <_svfprintf_r+0x1240>
   101f6:	str.w	r8, [sp, #20]
   101fa:	ldr.w	r9, [sp, #8]
   101fe:	ldr.w	r8, [sp, #28]
   10202:	b.n	10390 <_svfprintf_r+0x1400>
   10204:	adds	r3, #1
   10206:	ldr	r1, [pc, #520]	; (10410 <_svfprintf_r+0x1480>)
   10208:	str.w	r4, [sl, #4]
   1020c:	add	r2, r4
   1020e:	cmp	r3, #7
   10210:	str.w	r1, [sl]
   10214:	strd	r3, r2, [sp, #148]	; 0x94
   10218:	ble.w	f2bc <_svfprintf_r+0x32c>
   1021c:	b.w	f8f2 <_svfprintf_r+0x962>
   10220:	vmov	r1, s22
   10224:	add	r2, sp, #144	; 0x90
   10226:	mov	r0, fp
   10228:	bl	11cf8 <__ssprint_r>
   1022c:	cmp	r0, #0
   1022e:	bne.w	f85a <_svfprintf_r+0x8ca>
   10232:	ldr	r2, [sp, #152]	; 0x98
   10234:	add.w	sl, sp, #156	; 0x9c
   10238:	b.w	f28e <_svfprintf_r+0x2fe>
   1023c:	add	r2, sp, #144	; 0x90
   1023e:	mov	r0, fp
   10240:	str	r1, [sp, #20]
   10242:	bl	11cf8 <__ssprint_r>
   10246:	cmp	r0, #0
   10248:	bne.w	f85a <_svfprintf_r+0x8ca>
   1024c:	ldrb.w	ip, [r6]
   10250:	ldr	r2, [sp, #152]	; 0x98
   10252:	ldr	r1, [sp, #20]
   10254:	add	r0, sp, #156	; 0x9c
   10256:	b.n	ff54 <_svfprintf_r+0xfc4>
   10258:	cmp	r3, #1
   1025a:	str.w	r8, [sp, #8]
   1025e:	bne.w	f648 <_svfprintf_r+0x6b8>
   10262:	b.w	f98c <_svfprintf_r+0x9fc>
   10266:	ldr	r3, [sp, #32]
   10268:	ldr	r1, [sp, #16]
   1026a:	ldr.w	r2, [r3], #4
   1026e:	mov	r4, r9
   10270:	str	r1, [r2, #0]
   10272:	str	r3, [sp, #32]
   10274:	b.w	eff4 <_svfprintf_r+0x64>
   10278:	adds	r3, #1
   1027a:	ldr	r1, [pc, #404]	; (10410 <_svfprintf_r+0x1480>)
   1027c:	str.w	r4, [sl, #4]
   10280:	add	r2, r4
   10282:	cmp	r3, #7
   10284:	strd	r3, r2, [sp, #148]	; 0x94
   10288:	str.w	r1, [sl]
   1028c:	ble.w	f8d4 <_svfprintf_r+0x944>
   10290:	b.n	fb8a <_svfprintf_r+0xbfa>
   10292:	ldr	r3, [sp, #64]	; 0x40
   10294:	ldr	r0, [sp, #72]	; 0x48
   10296:	add	r2, r3
   10298:	strd	r0, r3, [sl]
   1029c:	ldr	r3, [sp, #148]	; 0x94
   1029e:	str	r2, [sp, #152]	; 0x98
   102a0:	adds	r3, #1
   102a2:	cmp	r3, #7
   102a4:	str	r3, [sp, #148]	; 0x94
   102a6:	bgt.w	105fc <_svfprintf_r+0x166c>
   102aa:	add.w	sl, sl, #8
   102ae:	cmp	r1, #0
   102b0:	bge.w	1015c <_svfprintf_r+0x11cc>
   102b4:	negs	r5, r1
   102b6:	adds	r1, #16
   102b8:	bge.w	108da <_svfprintf_r+0x194a>
   102bc:	vmov	r1, s22
   102c0:	movs	r6, #16
   102c2:	b.n	102d0 <_svfprintf_r+0x1340>
   102c4:	add.w	sl, sl, #8
   102c8:	subs	r5, #16
   102ca:	cmp	r5, #16
   102cc:	ble.w	108da <_svfprintf_r+0x194a>
   102d0:	adds	r3, #1
   102d2:	ldr	r0, [pc, #316]	; (10410 <_svfprintf_r+0x1480>)
   102d4:	adds	r2, #16
   102d6:	cmp	r3, #7
   102d8:	strd	r0, r6, [sl]
   102dc:	strd	r3, r2, [sp, #148]	; 0x94
   102e0:	ble.n	102c4 <_svfprintf_r+0x1334>
   102e2:	add	r2, sp, #144	; 0x90
   102e4:	mov	r0, fp
   102e6:	str	r1, [sp, #12]
   102e8:	bl	11cf8 <__ssprint_r>
   102ec:	cmp	r0, #0
   102ee:	bne.w	f85a <_svfprintf_r+0x8ca>
   102f2:	ldrd	r3, r2, [sp, #148]	; 0x94
   102f6:	ldr	r1, [sp, #12]
   102f8:	add.w	sl, sp, #156	; 0x9c
   102fc:	b.n	102c8 <_svfprintf_r+0x1338>
   102fe:	ldr	r3, [sp, #32]
   10300:	ands.w	r1, r8, #512	; 0x200
   10304:	itte	ne
   10306:	movne	r1, r2
   10308:	ldrne.w	r2, [r3], #4
   1030c:	ldreq.w	r2, [r3], #4
   10310:	str	r3, [sp, #32]
   10312:	it	ne
   10314:	uxtbne	r2, r2
   10316:	b.w	f5a4 <_svfprintf_r+0x614>
   1031a:	ldr	r3, [sp, #8]
   1031c:	ands.w	r1, r3, #512	; 0x200
   10320:	ldr	r3, [sp, #32]
   10322:	itte	ne
   10324:	movne	r1, r2
   10326:	ldrne.w	r2, [r3], #4
   1032a:	ldreq.w	r2, [r3], #4
   1032e:	str	r3, [sp, #32]
   10330:	it	ne
   10332:	uxtbne	r2, r2
   10334:	movs	r3, #1
   10336:	b.w	f4da <_svfprintf_r+0x54a>
   1033a:	ldr	r3, [sp, #32]
   1033c:	ands.w	r1, r8, #512	; 0x200
   10340:	itte	ne
   10342:	movne	r1, r2
   10344:	ldrne.w	r2, [r3], #4
   10348:	ldreq.w	r2, [r3], #4
   1034c:	str	r3, [sp, #32]
   1034e:	it	ne
   10350:	uxtbne	r2, r2
   10352:	b.n	fdf2 <_svfprintf_r+0xe62>
   10354:	mov	sl, r1
   10356:	adds	r3, #1
   10358:	ldr	r1, [pc, #180]	; (10410 <_svfprintf_r+0x1480>)
   1035a:	str.w	r5, [sl, #4]
   1035e:	add	r2, r5
   10360:	cmp	r3, #7
   10362:	strd	r3, r2, [sp, #148]	; 0x94
   10366:	str.w	r1, [sl]
   1036a:	bgt.w	105e0 <_svfprintf_r+0x1650>
   1036e:	add.w	sl, sl, #8
   10372:	b.w	fa8e <_svfprintf_r+0xafe>
   10376:	movs	r3, #0
   10378:	mov	r1, r3
   1037a:	str	r6, [sp, #0]
   1037c:	add	r2, sp, #116	; 0x74
   1037e:	mov	r0, fp
   10380:	bl	11cb8 <_wcsrtombs_r>
   10384:	mov	r3, r0
   10386:	adds	r3, #1
   10388:	str	r0, [sp, #20]
   1038a:	beq.w	10970 <_svfprintf_r+0x19e0>
   1038e:	str	r4, [sp, #116]	; 0x74
   10390:	ldr	r3, [sp, #20]
   10392:	cmp	r3, #0
   10394:	beq.n	10434 <_svfprintf_r+0x14a4>
   10396:	cmp	r3, #99	; 0x63
   10398:	bgt.w	105cc <_svfprintf_r+0x163c>
   1039c:	movs	r3, #0
   1039e:	str	r3, [sp, #28]
   103a0:	add	r4, sp, #220	; 0xdc
   103a2:	movs	r2, #8
   103a4:	movs	r1, #0
   103a6:	mov	r0, r6
   103a8:	bl	e044 <memset>
   103ac:	ldr	r5, [sp, #20]
   103ae:	str	r6, [sp, #0]
   103b0:	mov	r3, r5
   103b2:	add	r2, sp, #116	; 0x74
   103b4:	mov	r1, r4
   103b6:	mov	r0, fp
   103b8:	bl	11cb8 <_wcsrtombs_r>
   103bc:	cmp	r5, r0
   103be:	bne.w	10aba <_svfprintf_r+0x1b2a>
   103c2:	ldr	r2, [sp, #20]
   103c4:	movs	r3, #0
   103c6:	strb	r3, [r4, r2]
   103c8:	bic.w	r2, r2, r2, asr #31
   103cc:	strd	r3, r3, [sp, #48]	; 0x30
   103d0:	ldrb.w	r1, [sp, #103]	; 0x67
   103d4:	str	r3, [sp, #12]
   103d6:	str	r2, [sp, #8]
   103d8:	str	r3, [sp, #60]	; 0x3c
   103da:	b.w	f352 <_svfprintf_r+0x3c2>
   103de:	movs	r1, #45	; 0x2d
   103e0:	strb.w	r1, [sp, #103]	; 0x67
   103e4:	b.w	f330 <_svfprintf_r+0x3a0>
   103e8:	ldr	r3, [sp, #88]	; 0x58
   103ea:	ldr	r1, [sp, #84]	; 0x54
   103ec:	sub.w	fp, fp, r3
   103f0:	mov	r2, r3
   103f2:	mov	r0, fp
   103f4:	bl	e174 <strncpy>
   103f8:	ldrb.w	r2, [sl, #1]
   103fc:	ldr	r3, [pc, #20]	; (10414 <_svfprintf_r+0x1484>)
   103fe:	cbz	r2, 10404 <_svfprintf_r+0x1474>
   10400:	add.w	sl, sl, #1
   10404:	mov.w	ip, #0
   10408:	b.n	1005c <_svfprintf_r+0x10cc>
   1040a:	nop
   1040c:	.word	0x20000e98
   10410:	.word	0x2000130c
   10414:	.word	0xcccccccd
   10418:	vmov	r1, s22
   1041c:	add	r2, sp, #144	; 0x90
   1041e:	mov	r0, fp
   10420:	bl	11cf8 <__ssprint_r>
   10424:	cmp	r0, #0
   10426:	bne.w	f85a <_svfprintf_r+0x8ca>
   1042a:	ldr	r1, [sp, #108]	; 0x6c
   1042c:	ldr	r2, [sp, #152]	; 0x98
   1042e:	add.w	sl, sp, #156	; 0x9c
   10432:	b.n	1012e <_svfprintf_r+0x119e>
   10434:	ldr	r3, [sp, #20]
   10436:	ldrb.w	r1, [sp, #103]	; 0x67
   1043a:	str	r3, [sp, #60]	; 0x3c
   1043c:	strd	r3, r3, [sp, #8]
   10440:	strd	r3, r3, [sp, #48]	; 0x30
   10444:	str	r3, [sp, #28]
   10446:	b.w	f352 <_svfprintf_r+0x3c2>
   1044a:	ldr	r1, [sp, #56]	; 0x38
   1044c:	ldr	r0, [sp, #20]
   1044e:	adds	r5, r4, r1
   10450:	subs	r5, r5, r0
   10452:	subs	r4, r1, r3
   10454:	cmp	r5, r4
   10456:	it	ge
   10458:	movge	r5, r4
   1045a:	b.w	faf8 <_svfprintf_r+0xb68>
   1045e:	ldr	r3, [sp, #32]
   10460:	ldr	r1, [sp, #16]
   10462:	ldr.w	r2, [r3], #4
   10466:	str	r3, [sp, #32]
   10468:	strh	r1, [r2, #0]
   1046a:	mov	r4, r9
   1046c:	b.w	eff4 <_svfprintf_r+0x64>
   10470:	ldrsb.w	r2, [r3], #4
   10474:	str	r3, [sp, #32]
   10476:	asrs	r1, r2, #31
   10478:	mov	r3, r1
   1047a:	b.w	f434 <_svfprintf_r+0x4a4>
   1047e:	ldr	r2, [sp, #12]
   10480:	movs	r1, #2
   10482:	add	r3, sp, #136	; 0x88
   10484:	str	r3, [sp, #4]
   10486:	add	r3, sp, #116	; 0x74
   10488:	str	r3, [sp, #0]
   1048a:	mov	r0, fp
   1048c:	add	r3, sp, #108	; 0x6c
   1048e:	vmov.f64	d0, d10
   10492:	str	r2, [sp, #8]
   10494:	bl	10f80 <_dtoa_r>
   10498:	cmp	r5, #71	; 0x47
   1049a:	ldr	r2, [sp, #8]
   1049c:	mov	r4, r0
   1049e:	beq.w	10764 <_svfprintf_r+0x17d4>
   104a2:	cmp	r5, #70	; 0x46
   104a4:	add	r0, r2
   104a6:	bne.n	104b4 <_svfprintf_r+0x1524>
   104a8:	ldrb	r3, [r4, #0]
   104aa:	cmp	r3, #48	; 0x30
   104ac:	beq.w	1098e <_svfprintf_r+0x19fe>
   104b0:	ldr	r2, [sp, #108]	; 0x6c
   104b2:	add	r0, r2
   104b4:	vcmp.f64	d10, #0.0
   104b8:	vmrs	APSR_nzcv, fpscr
   104bc:	bne.w	1074c <_svfprintf_r+0x17bc>
   104c0:	mov	r3, r0
   104c2:	subs	r3, r3, r4
   104c4:	str	r3, [sp, #56]	; 0x38
   104c6:	cmp	r5, #71	; 0x47
   104c8:	beq.w	106ec <_svfprintf_r+0x175c>
   104cc:	cmp	r5, #70	; 0x46
   104ce:	beq.w	1083c <_svfprintf_r+0x18ac>
   104d2:	ldr	r3, [sp, #108]	; 0x6c
   104d4:	str	r3, [sp, #48]	; 0x30
   104d6:	ldr	r3, [sp, #48]	; 0x30
   104d8:	cmp	r5, #65	; 0x41
   104da:	add.w	r3, r3, #4294967295
   104de:	str	r3, [sp, #108]	; 0x6c
   104e0:	beq.w	108ae <_svfprintf_r+0x191e>
   104e4:	ldrb.w	r2, [sp, #44]	; 0x2c
   104e8:	movs	r1, #0
   104ea:	cmp	r3, #0
   104ec:	it	lt
   104ee:	ldrlt	r3, [sp, #48]	; 0x30
   104f0:	strb.w	r2, [sp, #120]	; 0x78
   104f4:	itte	lt
   104f6:	rsblt	r3, r3, #1
   104fa:	movlt	r2, #45	; 0x2d
   104fc:	movge	r2, #43	; 0x2b
   104fe:	cmp	r3, #9
   10500:	strb.w	r2, [sp, #121]	; 0x79
   10504:	ble.w	108bc <_svfprintf_r+0x192c>
   10508:	add.w	r5, sp, #143	; 0x8f
   1050c:	ldr.w	ip, [pc, #1052]	; 1092c <_svfprintf_r+0x199c>
   10510:	mov	r2, r5
   10512:	mov	r0, r2
   10514:	smull	r2, r1, ip, r3
   10518:	asrs	r2, r3, #31
   1051a:	rsb	r2, r2, r1, asr #2
   1051e:	add.w	r1, r2, r2, lsl #2
   10522:	sub.w	r1, r3, r1, lsl #1
   10526:	adds	r1, #48	; 0x30
   10528:	strb.w	r1, [r0, #-1]
   1052c:	mov	r1, r3
   1052e:	cmp	r1, #99	; 0x63
   10530:	mov	r3, r2
   10532:	add.w	r2, r0, #4294967295
   10536:	bgt.n	10512 <_svfprintf_r+0x1582>
   10538:	adds	r3, #48	; 0x30
   1053a:	uxtb	r1, r3
   1053c:	subs	r3, r0, #2
   1053e:	cmp	r5, r3
   10540:	strb.w	r1, [r2, #-1]
   10544:	bls.w	10a5e <_svfprintf_r+0x1ace>
   10548:	mov	r3, r2
   1054a:	add.w	r2, sp, #122	; 0x7a
   1054e:	b.n	10554 <_svfprintf_r+0x15c4>
   10550:	ldrb.w	r1, [r3], #1
   10554:	strb.w	r1, [r2], #1
   10558:	cmp	r5, r3
   1055a:	bne.n	10550 <_svfprintf_r+0x15c0>
   1055c:	add.w	r3, sp, #145	; 0x91
   10560:	add.w	r2, sp, #122	; 0x7a
   10564:	subs	r3, r3, r0
   10566:	add	r3, r2
   10568:	add	r2, sp, #120	; 0x78
   1056a:	subs	r3, r3, r2
   1056c:	str	r3, [sp, #80]	; 0x50
   1056e:	ldr	r3, [sp, #56]	; 0x38
   10570:	ldr	r2, [sp, #80]	; 0x50
   10572:	cmp	r3, #1
   10574:	add	r2, r3
   10576:	str	r2, [sp, #20]
   10578:	ble.w	10982 <_svfprintf_r+0x19f2>
   1057c:	ldr	r3, [sp, #20]
   1057e:	ldr	r2, [sp, #64]	; 0x40
   10580:	add	r3, r2
   10582:	str	r3, [sp, #20]
   10584:	bic.w	r3, r6, #1024	; 0x400
   10588:	ldr	r2, [sp, #20]
   1058a:	orr.w	r8, r3, #256	; 0x100
   1058e:	movs	r3, #0
   10590:	strd	r3, r3, [sp, #48]	; 0x30
   10594:	bic.w	r2, r2, r2, asr #31
   10598:	str	r3, [sp, #60]	; 0x3c
   1059a:	str	r2, [sp, #8]
   1059c:	ldr	r3, [sp, #36]	; 0x24
   1059e:	cmp	r3, #0
   105a0:	bne.w	10706 <_svfprintf_r+0x1776>
   105a4:	ldrb.w	r1, [sp, #103]	; 0x67
   105a8:	str	r3, [sp, #12]
   105aa:	b.w	f352 <_svfprintf_r+0x3c2>
   105ae:	mov	r0, r4
   105b0:	bl	e3c0 <strlen>
   105b4:	mov	r2, r0
   105b6:	str	r0, [sp, #20]
   105b8:	b.w	f3fc <_svfprintf_r+0x46c>
   105bc:	vmov	r1, s22
   105c0:	add	r2, sp, #144	; 0x90
   105c2:	mov	r0, fp
   105c4:	bl	11cf8 <__ssprint_r>
   105c8:	b.w	f1a6 <_svfprintf_r+0x216>
   105cc:	adds	r1, r3, #1
   105ce:	mov	r0, fp
   105d0:	bl	d230 <_malloc_r>
   105d4:	mov	r4, r0
   105d6:	cmp	r0, #0
   105d8:	beq.w	10970 <_svfprintf_r+0x19e0>
   105dc:	str	r0, [sp, #28]
   105de:	b.n	103a2 <_svfprintf_r+0x1412>
   105e0:	vmov	r1, s22
   105e4:	add	r2, sp, #144	; 0x90
   105e6:	mov	r0, fp
   105e8:	bl	11cf8 <__ssprint_r>
   105ec:	cmp	r0, #0
   105ee:	bne.w	f85a <_svfprintf_r+0x8ca>
   105f2:	ldr	r2, [sp, #152]	; 0x98
   105f4:	add.w	sl, sp, #156	; 0x9c
   105f8:	b.w	fa8e <_svfprintf_r+0xafe>
   105fc:	vmov	r1, s22
   10600:	add	r2, sp, #144	; 0x90
   10602:	mov	r0, fp
   10604:	bl	11cf8 <__ssprint_r>
   10608:	cmp	r0, #0
   1060a:	bne.w	f85a <_svfprintf_r+0x8ca>
   1060e:	ldrd	r3, r2, [sp, #148]	; 0x94
   10612:	ldr	r1, [sp, #108]	; 0x6c
   10614:	add.w	sl, sp, #156	; 0x9c
   10618:	b.n	102ae <_svfprintf_r+0x131e>
   1061a:	movs	r3, #6
   1061c:	str	r3, [sp, #12]
   1061e:	b.w	fd28 <_svfprintf_r+0xd98>
   10622:	ldr	r3, [sp, #12]
   10624:	movs	r1, #2
   10626:	adds	r2, r3, #1
   10628:	b.n	10482 <_svfprintf_r+0x14f2>
   1062a:	ldr	r2, [sp, #12]
   1062c:	movs	r1, #3
   1062e:	b.n	10482 <_svfprintf_r+0x14f2>
   10630:	add	r0, sp, #108	; 0x6c
   10632:	vmov.f64	d0, d10
   10636:	bl	10d28 <frexp>
   1063a:	vmov.f64	d7, #64	; 0x3e000000  0.125
   1063e:	vmul.f64	d0, d0, d7
   10642:	vcmp.f64	d0, #0.0
   10646:	vmrs	APSR_nzcv, fpscr
   1064a:	bne.n	10650 <_svfprintf_r+0x16c0>
   1064c:	movs	r3, #1
   1064e:	str	r3, [sp, #108]	; 0x6c
   10650:	ldr	r0, [pc, #716]	; (10920 <_svfprintf_r+0x1990>)
   10652:	ldr	r3, [sp, #12]
   10654:	vmov.f64	d5, #48	; 0x41800000  16.0
   10658:	subs	r3, #1
   1065a:	mov	r2, r4
   1065c:	b.n	10668 <_svfprintf_r+0x16d8>
   1065e:	vcmp.f64	d0, #0.0
   10662:	vmrs	APSR_nzcv, fpscr
   10666:	beq.n	10690 <_svfprintf_r+0x1700>
   10668:	vmul.f64	d0, d0, d5
   1066c:	vcvt.s32.f64	s15, d0
   10670:	cmp.w	r3, #4294967295
   10674:	vmov	r1, s15
   10678:	ldrb	r1, [r0, r1]
   1067a:	vcvt.f64.s32	d6, s15
   1067e:	mov	ip, r2
   10680:	vsub.f64	d0, d0, d6
   10684:	strb.w	r1, [r2], #1
   10688:	mov	r1, r3
   1068a:	add.w	r3, r3, #4294967295
   1068e:	bne.n	1065e <_svfprintf_r+0x16ce>
   10690:	vmov.f64	d6, #96	; 0x3f000000  0.5
   10694:	vcmpe.f64	d0, d6
   10698:	vmrs	APSR_nzcv, fpscr
   1069c:	bgt.w	10930 <_svfprintf_r+0x19a0>
   106a0:	vcmp.f64	d0, d6
   106a4:	vmrs	APSR_nzcv, fpscr
   106a8:	bne.n	106b4 <_svfprintf_r+0x1724>
   106aa:	vmov	r3, s15
   106ae:	lsls	r3, r3, #31
   106b0:	bmi.w	10930 <_svfprintf_r+0x19a0>
   106b4:	cmp	r1, #0
   106b6:	blt.n	106c6 <_svfprintf_r+0x1736>
   106b8:	adds	r3, r1, #1
   106ba:	add	r3, r2
   106bc:	movs	r1, #48	; 0x30
   106be:	strb.w	r1, [r2], #1
   106c2:	cmp	r3, r2
   106c4:	bne.n	106be <_svfprintf_r+0x172e>
   106c6:	subs	r3, r2, r4
   106c8:	str	r3, [sp, #56]	; 0x38
   106ca:	b.n	104c6 <_svfprintf_r+0x1536>
   106cc:	ldr	r4, [sp, #44]	; 0x2c
   106ce:	ldr	r3, [sp, #56]	; 0x38
   106d0:	ldr.w	r9, [sp, #36]	; 0x24
   106d4:	ldr.w	r8, [sp, #40]	; 0x28
   106d8:	str	r6, [sp, #76]	; 0x4c
   106da:	adds	r3, r4, r3
   106dc:	cmp	r5, r3
   106de:	mov	r1, r5
   106e0:	it	cs
   106e2:	movcs	r1, r3
   106e4:	mov	sl, r0
   106e6:	str	r1, [sp, #20]
   106e8:	b.w	fa9c <_svfprintf_r+0xb0c>
   106ec:	ldr	r3, [sp, #108]	; 0x6c
   106ee:	str	r3, [sp, #48]	; 0x30
   106f0:	adds	r2, r3, #3
   106f2:	blt.n	106fa <_svfprintf_r+0x176a>
   106f4:	ldr	r2, [sp, #12]
   106f6:	cmp	r3, r2
   106f8:	ble.n	10714 <_svfprintf_r+0x1784>
   106fa:	ldr	r3, [sp, #44]	; 0x2c
   106fc:	subs	r3, #2
   106fe:	str	r3, [sp, #44]	; 0x2c
   10700:	bic.w	r5, r3, #32
   10704:	b.n	104d6 <_svfprintf_r+0x1546>
   10706:	movs	r1, #45	; 0x2d
   10708:	movs	r3, #0
   1070a:	strb.w	r1, [sp, #103]	; 0x67
   1070e:	str	r3, [sp, #12]
   10710:	b.w	f358 <_svfprintf_r+0x3c8>
   10714:	ldr	r3, [sp, #48]	; 0x30
   10716:	ldr	r2, [sp, #56]	; 0x38
   10718:	cmp	r3, r2
   1071a:	blt.w	10898 <_svfprintf_r+0x1908>
   1071e:	lsls	r0, r6, #31
   10720:	ldr	r3, [sp, #48]	; 0x30
   10722:	bpl.w	1098a <_svfprintf_r+0x19fa>
   10726:	ldr	r2, [sp, #64]	; 0x40
   10728:	add	r3, r2
   1072a:	str	r3, [sp, #20]
   1072c:	lsls	r1, r6, #21
   1072e:	bpl.n	10738 <_svfprintf_r+0x17a8>
   10730:	ldr	r3, [sp, #48]	; 0x30
   10732:	cmp	r3, #0
   10734:	bgt.w	109a2 <_svfprintf_r+0x1a12>
   10738:	ldr	r3, [sp, #20]
   1073a:	bic.w	r3, r3, r3, asr #31
   1073e:	str	r3, [sp, #8]
   10740:	movs	r3, #103	; 0x67
   10742:	str	r3, [sp, #44]	; 0x2c
   10744:	movs	r3, #0
   10746:	str	r3, [sp, #60]	; 0x3c
   10748:	str	r3, [sp, #52]	; 0x34
   1074a:	b.n	1059c <_svfprintf_r+0x160c>
   1074c:	ldr	r3, [sp, #136]	; 0x88
   1074e:	cmp	r3, r0
   10750:	bcs.w	104c2 <_svfprintf_r+0x1532>
   10754:	movs	r1, #48	; 0x30
   10756:	adds	r2, r3, #1
   10758:	str	r2, [sp, #136]	; 0x88
   1075a:	strb	r1, [r3, #0]
   1075c:	ldr	r3, [sp, #136]	; 0x88
   1075e:	cmp	r0, r3
   10760:	bhi.n	10756 <_svfprintf_r+0x17c6>
   10762:	b.n	104c2 <_svfprintf_r+0x1532>
   10764:	lsls	r3, r6, #31
   10766:	bmi.w	108b8 <_svfprintf_r+0x1928>
   1076a:	ldr	r3, [sp, #136]	; 0x88
   1076c:	b.n	104c2 <_svfprintf_r+0x1532>
   1076e:	add	r2, sp, #144	; 0x90
   10770:	mov	r0, fp
   10772:	str	r1, [sp, #20]
   10774:	bl	11cf8 <__ssprint_r>
   10778:	cmp	r0, #0
   1077a:	bne.w	f85a <_svfprintf_r+0x8ca>
   1077e:	ldrb.w	ip, [r6]
   10782:	ldr	r2, [sp, #152]	; 0x98
   10784:	ldr	r1, [sp, #20]
   10786:	add	r0, sp, #156	; 0x9c
   10788:	add	r5, ip
   1078a:	b.w	ff66 <_svfprintf_r+0xfd6>
   1078e:	vmov	r1, s22
   10792:	add	r2, sp, #144	; 0x90
   10794:	mov	r0, fp
   10796:	bl	11cf8 <__ssprint_r>
   1079a:	cmp	r0, #0
   1079c:	bne.w	f85a <_svfprintf_r+0x8ca>
   107a0:	ldr	r2, [sp, #152]	; 0x98
   107a2:	add.w	sl, sp, #156	; 0x9c
   107a6:	b.w	fa80 <_svfprintf_r+0xaf0>
   107aa:	movs	r3, #120	; 0x78
   107ac:	strb.w	r3, [sp, #105]	; 0x69
   107b0:	movs	r3, #48	; 0x30
   107b2:	strb.w	r3, [sp, #104]	; 0x68
   107b6:	ldr	r3, [sp, #12]
   107b8:	cmp	r3, #99	; 0x63
   107ba:	orr.w	r6, r8, #2
   107be:	bgt.w	1090e <_svfprintf_r+0x197e>
   107c2:	movs	r3, #0
   107c4:	str	r3, [sp, #28]
   107c6:	add	r4, sp, #220	; 0xdc
   107c8:	vmov	r3, s17
   107cc:	cmp	r3, #0
   107ce:	orr.w	r8, r8, #258	; 0x102
   107d2:	blt.n	1082c <_svfprintf_r+0x189c>
   107d4:	vmov.f64	d10, d8
   107d8:	ldr	r3, [sp, #44]	; 0x2c
   107da:	bic.w	r5, r3, #32
   107de:	movs	r3, #0
   107e0:	str	r3, [sp, #36]	; 0x24
   107e2:	ldr	r3, [sp, #44]	; 0x2c
   107e4:	cmp	r3, #97	; 0x61
   107e6:	bne.w	fd44 <_svfprintf_r+0xdb4>
   107ea:	vmov.f64	d0, d10
   107ee:	add	r0, sp, #108	; 0x6c
   107f0:	bl	10d28 <frexp>
   107f4:	vmov.f64	d7, #64	; 0x3e000000  0.125
   107f8:	vmul.f64	d0, d0, d7
   107fc:	vcmp.f64	d0, #0.0
   10800:	vmrs	APSR_nzcv, fpscr
   10804:	bne.n	1080a <_svfprintf_r+0x187a>
   10806:	movs	r3, #1
   10808:	str	r3, [sp, #108]	; 0x6c
   1080a:	ldr	r0, [pc, #280]	; (10924 <_svfprintf_r+0x1994>)
   1080c:	b.n	10652 <_svfprintf_r+0x16c2>
   1080e:	vmov	r1, s22
   10812:	add	r2, sp, #144	; 0x90
   10814:	mov	r0, fp
   10816:	bl	11cf8 <__ssprint_r>
   1081a:	cmp	r0, #0
   1081c:	bne.w	f85a <_svfprintf_r+0x8ca>
   10820:	ldr	r3, [sp, #108]	; 0x6c
   10822:	ldr	r2, [sp, #152]	; 0x98
   10824:	add.w	sl, sp, #156	; 0x9c
   10828:	b.w	fac8 <_svfprintf_r+0xb38>
   1082c:	ldr	r3, [sp, #44]	; 0x2c
   1082e:	bic.w	r5, r3, #32
   10832:	movs	r3, #45	; 0x2d
   10834:	str	r3, [sp, #36]	; 0x24
   10836:	vneg.f64	d10, d8
   1083a:	b.n	107e2 <_svfprintf_r+0x1852>
   1083c:	ldr	r2, [sp, #108]	; 0x6c
   1083e:	str	r2, [sp, #48]	; 0x30
   10840:	cmp	r2, #0
   10842:	and.w	r3, r6, #1
   10846:	ble.w	10a64 <_svfprintf_r+0x1ad4>
   1084a:	ldr	r1, [sp, #12]
   1084c:	orrs	r3, r1
   1084e:	bne.w	109f0 <_svfprintf_r+0x1a60>
   10852:	ldr	r3, [sp, #48]	; 0x30
   10854:	str	r3, [sp, #20]
   10856:	movs	r3, #102	; 0x66
   10858:	str	r3, [sp, #44]	; 0x2c
   1085a:	lsls	r2, r6, #21
   1085c:	bmi.w	109a6 <_svfprintf_r+0x1a16>
   10860:	ldr	r3, [sp, #20]
   10862:	bic.w	r3, r3, r3, asr #31
   10866:	str	r3, [sp, #8]
   10868:	b.n	10744 <_svfprintf_r+0x17b4>
   1086a:	vmov	r1, s22
   1086e:	add	r2, sp, #144	; 0x90
   10870:	mov	r0, fp
   10872:	bl	11cf8 <__ssprint_r>
   10876:	cmp	r0, #0
   10878:	bne.w	f85a <_svfprintf_r+0x8ca>
   1087c:	ldr	r4, [sp, #108]	; 0x6c
   1087e:	ldr	r3, [sp, #56]	; 0x38
   10880:	ldr	r2, [sp, #152]	; 0x98
   10882:	subs	r4, r3, r4
   10884:	add.w	sl, sp, #156	; 0x9c
   10888:	b.w	faf8 <_svfprintf_r+0xb68>
   1088c:	movs	r3, #88	; 0x58
   1088e:	b.n	107ac <_svfprintf_r+0x181c>
   10890:	movs	r2, #0
   10892:	str	r2, [sp, #12]
   10894:	b.w	f04c <_svfprintf_r+0xbc>
   10898:	ldr	r3, [sp, #56]	; 0x38
   1089a:	ldr	r2, [sp, #64]	; 0x40
   1089c:	adds	r2, r3, r2
   1089e:	ldr	r3, [sp, #48]	; 0x30
   108a0:	str	r2, [sp, #20]
   108a2:	cmp	r3, #0
   108a4:	ble.w	109fe <_svfprintf_r+0x1a6e>
   108a8:	movs	r3, #103	; 0x67
   108aa:	str	r3, [sp, #44]	; 0x2c
   108ac:	b.n	1085a <_svfprintf_r+0x18ca>
   108ae:	ldr	r2, [sp, #44]	; 0x2c
   108b0:	adds	r2, #15
   108b2:	uxtb	r2, r2
   108b4:	movs	r1, #1
   108b6:	b.n	104ea <_svfprintf_r+0x155a>
   108b8:	adds	r0, r4, r2
   108ba:	b.n	104b4 <_svfprintf_r+0x1524>
   108bc:	cmp	r1, #0
   108be:	bne.w	10a12 <_svfprintf_r+0x1a82>
   108c2:	movs	r2, #48	; 0x30
   108c4:	strb.w	r2, [sp, #122]	; 0x7a
   108c8:	add.w	r2, sp, #123	; 0x7b
   108cc:	adds	r3, #48	; 0x30
   108ce:	strb.w	r3, [r2], #1
   108d2:	add	r3, sp, #120	; 0x78
   108d4:	subs	r3, r2, r3
   108d6:	str	r3, [sp, #80]	; 0x50
   108d8:	b.n	1056e <_svfprintf_r+0x15de>
   108da:	adds	r3, #1
   108dc:	ldr	r1, [pc, #72]	; (10928 <_svfprintf_r+0x1998>)
   108de:	str.w	r5, [sl, #4]
   108e2:	add	r2, r5
   108e4:	cmp	r3, #7
   108e6:	strd	r3, r2, [sp, #148]	; 0x94
   108ea:	str.w	r1, [sl]
   108ee:	ble.w	10158 <_svfprintf_r+0x11c8>
   108f2:	vmov	r1, s22
   108f6:	add	r2, sp, #144	; 0x90
   108f8:	mov	r0, fp
   108fa:	bl	11cf8 <__ssprint_r>
   108fe:	cmp	r0, #0
   10900:	bne.w	f85a <_svfprintf_r+0x8ca>
   10904:	ldrd	r3, r2, [sp, #148]	; 0x94
   10908:	add.w	sl, sp, #156	; 0x9c
   1090c:	b.n	1015c <_svfprintf_r+0x11cc>
   1090e:	adds	r1, r3, #1
   10910:	mov	r0, fp
   10912:	bl	d230 <_malloc_r>
   10916:	mov	r4, r0
   10918:	cbz	r0, 10970 <_svfprintf_r+0x19e0>
   1091a:	str	r0, [sp, #28]
   1091c:	b.n	107c8 <_svfprintf_r+0x1838>
   1091e:	nop
   10920:	.word	0x20000e7c
   10924:	.word	0x20000e68
   10928:	.word	0x2000130c
   1092c:	.word	0x66666667
   10930:	str.w	ip, [sp, #136]	; 0x88
   10934:	ldrb.w	r1, [r2, #-1]
   10938:	ldrb.w	ip, [r0, #15]
   1093c:	cmp	r1, ip
   1093e:	mov	r3, r2
   10940:	bne.n	10958 <_svfprintf_r+0x19c8>
   10942:	mov.w	lr, #48	; 0x30
   10946:	strb.w	lr, [r3, #-1]
   1094a:	ldr	r3, [sp, #136]	; 0x88
   1094c:	subs	r1, r3, #1
   1094e:	str	r1, [sp, #136]	; 0x88
   10950:	ldrb.w	r1, [r3, #-1]
   10954:	cmp	ip, r1
   10956:	beq.n	10946 <_svfprintf_r+0x19b6>
   10958:	cmp	r1, #57	; 0x39
   1095a:	itet	ne
   1095c:	addne	r1, #1
   1095e:	ldrbeq	r1, [r0, #10]
   10960:	uxtbne	r1, r1
   10962:	strb.w	r1, [r3, #-1]
   10966:	b.n	106c6 <_svfprintf_r+0x1736>
   10968:	movs	r3, #0
   1096a:	mov	r8, r2
   1096c:	str	r3, [sp, #28]
   1096e:	b.n	10832 <_svfprintf_r+0x18a2>
   10970:	vmov	r2, s22
   10974:	ldrsh.w	r3, [r2, #12]
   10978:	orr.w	r3, r3, #64	; 0x40
   1097c:	strh	r3, [r2, #12]
   1097e:	b.w	f1ae <_svfprintf_r+0x21e>
   10982:	lsls	r5, r6, #31
   10984:	bpl.w	10584 <_svfprintf_r+0x15f4>
   10988:	b.n	1057c <_svfprintf_r+0x15ec>
   1098a:	str	r3, [sp, #20]
   1098c:	b.n	1072c <_svfprintf_r+0x179c>
   1098e:	vcmp.f64	d10, #0.0
   10992:	vmrs	APSR_nzcv, fpscr
   10996:	beq.w	104b0 <_svfprintf_r+0x1520>
   1099a:	rsb	r2, r2, #1
   1099e:	str	r2, [sp, #108]	; 0x6c
   109a0:	b.n	104b2 <_svfprintf_r+0x1522>
   109a2:	movs	r3, #103	; 0x67
   109a4:	str	r3, [sp, #44]	; 0x2c
   109a6:	ldr	r1, [sp, #76]	; 0x4c
   109a8:	ldrb	r3, [r1, #0]
   109aa:	cmp	r3, #255	; 0xff
   109ac:	beq.n	10aa2 <_svfprintf_r+0x1b12>
   109ae:	movs	r5, #0
   109b0:	ldr	r2, [sp, #48]	; 0x30
   109b2:	mov	r0, r5
   109b4:	b.n	109be <_svfprintf_r+0x1a2e>
   109b6:	adds	r0, #1
   109b8:	adds	r1, #1
   109ba:	cmp	r3, #255	; 0xff
   109bc:	beq.n	109d0 <_svfprintf_r+0x1a40>
   109be:	cmp	r3, r2
   109c0:	bge.n	109d0 <_svfprintf_r+0x1a40>
   109c2:	subs	r2, r2, r3
   109c4:	ldrb	r3, [r1, #1]
   109c6:	cmp	r3, #0
   109c8:	bne.n	109b6 <_svfprintf_r+0x1a26>
   109ca:	ldrb	r3, [r1, #0]
   109cc:	adds	r5, #1
   109ce:	b.n	109ba <_svfprintf_r+0x1a2a>
   109d0:	str	r2, [sp, #48]	; 0x30
   109d2:	str	r1, [sp, #76]	; 0x4c
   109d4:	str	r0, [sp, #52]	; 0x34
   109d6:	str	r5, [sp, #60]	; 0x3c
   109d8:	ldr	r2, [sp, #60]	; 0x3c
   109da:	ldr	r3, [sp, #52]	; 0x34
   109dc:	ldr	r1, [sp, #88]	; 0x58
   109de:	add	r3, r2
   109e0:	ldr	r2, [sp, #20]
   109e2:	mla	r3, r1, r3, r2
   109e6:	str	r3, [sp, #20]
   109e8:	bic.w	r3, r3, r3, asr #31
   109ec:	str	r3, [sp, #8]
   109ee:	b.n	1059c <_svfprintf_r+0x160c>
   109f0:	ldr	r3, [sp, #64]	; 0x40
   109f2:	adds	r3, r2, r3
   109f4:	add	r1, r3
   109f6:	movs	r3, #102	; 0x66
   109f8:	str	r1, [sp, #20]
   109fa:	str	r3, [sp, #44]	; 0x2c
   109fc:	b.n	1085a <_svfprintf_r+0x18ca>
   109fe:	rsb	r3, r3, #1
   10a02:	add	r2, r3
   10a04:	bic.w	r3, r2, r2, asr #31
   10a08:	str	r3, [sp, #8]
   10a0a:	movs	r3, #103	; 0x67
   10a0c:	str	r2, [sp, #20]
   10a0e:	str	r3, [sp, #44]	; 0x2c
   10a10:	b.n	10744 <_svfprintf_r+0x17b4>
   10a12:	add.w	r2, sp, #122	; 0x7a
   10a16:	b.n	108cc <_svfprintf_r+0x193c>
   10a18:	ldr	r3, [sp, #12]
   10a1a:	ldr.w	r9, [sp, #8]
   10a1e:	ldr.w	r8, [sp, #28]
   10a22:	str	r3, [sp, #20]
   10a24:	b.n	10390 <_svfprintf_r+0x1400>
   10a26:	vmov	r3, s17
   10a2a:	cmp	r3, #0
   10a2c:	ite	lt
   10a2e:	movlt	r1, #45	; 0x2d
   10a30:	ldrbge.w	r1, [sp, #103]	; 0x67
   10a34:	ldr	r4, [pc, #148]	; (10acc <_svfprintf_r+0x1b3c>)
   10a36:	ldr	r3, [pc, #152]	; (10ad0 <_svfprintf_r+0x1b40>)
   10a38:	it	lt
   10a3a:	strblt.w	r1, [sp, #103]	; 0x67
   10a3e:	bic.w	r8, r8, #128	; 0x80
   10a42:	b.w	f338 <_svfprintf_r+0x3a8>
   10a46:	ldr	r3, [sp, #12]
   10a48:	str	r3, [sp, #8]
   10a4a:	str	r3, [sp, #20]
   10a4c:	movs	r3, #115	; 0x73
   10a4e:	ldrb.w	r1, [sp, #103]	; 0x67
   10a52:	str	r0, [sp, #12]
   10a54:	str	r0, [sp, #60]	; 0x3c
   10a56:	str	r0, [sp, #52]	; 0x34
   10a58:	str	r3, [sp, #44]	; 0x2c
   10a5a:	b.w	f352 <_svfprintf_r+0x3c2>
   10a5e:	movs	r3, #2
   10a60:	str	r3, [sp, #80]	; 0x50
   10a62:	b.n	1056e <_svfprintf_r+0x15de>
   10a64:	ldr	r2, [sp, #12]
   10a66:	orrs	r3, r2
   10a68:	bne.n	10a76 <_svfprintf_r+0x1ae6>
   10a6a:	movs	r3, #1
   10a6c:	movs	r2, #102	; 0x66
   10a6e:	str	r3, [sp, #8]
   10a70:	str	r2, [sp, #44]	; 0x2c
   10a72:	str	r3, [sp, #20]
   10a74:	b.n	10744 <_svfprintf_r+0x17b4>
   10a76:	ldr	r3, [sp, #64]	; 0x40
   10a78:	adds	r3, #1
   10a7a:	add	r2, r3
   10a7c:	bic.w	r3, r2, r2, asr #31
   10a80:	str	r3, [sp, #8]
   10a82:	movs	r3, #102	; 0x66
   10a84:	str	r2, [sp, #20]
   10a86:	str	r3, [sp, #44]	; 0x2c
   10a88:	b.n	10744 <_svfprintf_r+0x17b4>
   10a8a:	ldr	r2, [sp, #32]
   10a8c:	ldrb.w	r3, [r9, #1]
   10a90:	mov	r9, r1
   10a92:	ldr.w	r1, [r2], #4
   10a96:	str	r2, [sp, #32]
   10a98:	orr.w	r1, r1, r1, asr #31
   10a9c:	str	r1, [sp, #12]
   10a9e:	b.w	f048 <_svfprintf_r+0xb8>
   10aa2:	movs	r3, #0
   10aa4:	str	r3, [sp, #60]	; 0x3c
   10aa6:	str	r3, [sp, #52]	; 0x34
   10aa8:	b.n	109d8 <_svfprintf_r+0x1a48>
   10aaa:	movs	r3, #12
   10aac:	str.w	r3, [fp]
   10ab0:	mov.w	r3, #4294967295
   10ab4:	str	r3, [sp, #16]
   10ab6:	b.w	f1bc <_svfprintf_r+0x22c>
   10aba:	vmov	r2, s22
   10abe:	ldrh	r3, [r2, #12]
   10ac0:	orr.w	r3, r3, #64	; 0x40
   10ac4:	strh	r3, [r2, #12]
   10ac6:	b.w	f85a <_svfprintf_r+0x8ca>
   10aca:	nop
   10acc:	.word	0x20000e60
   10ad0:	.word	0x20000e64

00010ad4 <_fclose_r>:
   10ad4:	push	{r4, r5, r6, lr}
   10ad6:	cmp	r1, #0
   10ad8:	beq.n	10b72 <_fclose_r+0x9e>
   10ada:	mov	r6, r0
   10adc:	mov	r4, r1
   10ade:	cbz	r0, 10ae6 <_fclose_r+0x12>
   10ae0:	ldr	r3, [r0, #52]	; 0x34
   10ae2:	cmp	r3, #0
   10ae4:	beq.n	10b78 <_fclose_r+0xa4>
   10ae6:	ldr	r3, [r4, #100]	; 0x64
   10ae8:	lsls	r0, r3, #31
   10aea:	bpl.n	10b56 <_fclose_r+0x82>
   10aec:	ldrsh.w	r3, [r4, #12]
   10af0:	cmp	r3, #0
   10af2:	beq.n	10b72 <_fclose_r+0x9e>
   10af4:	mov	r1, r4
   10af6:	mov	r0, r6
   10af8:	bl	10b9c <__sflush_r>
   10afc:	ldr	r3, [r4, #44]	; 0x2c
   10afe:	mov	r5, r0
   10b00:	cbz	r3, 10b10 <_fclose_r+0x3c>
   10b02:	ldr	r1, [r4, #28]
   10b04:	mov	r0, r6
   10b06:	blx	r3
   10b08:	cmp	r0, #0
   10b0a:	it	lt
   10b0c:	movlt.w	r5, #4294967295
   10b10:	ldrh	r3, [r4, #12]
   10b12:	lsls	r2, r3, #24
   10b14:	bmi.n	10b90 <_fclose_r+0xbc>
   10b16:	ldr	r1, [r4, #48]	; 0x30
   10b18:	cbz	r1, 10b2c <_fclose_r+0x58>
   10b1a:	add.w	r3, r4, #64	; 0x40
   10b1e:	cmp	r1, r3
   10b20:	beq.n	10b28 <_fclose_r+0x54>
   10b22:	mov	r0, r6
   10b24:	bl	e5c4 <_free_r>
   10b28:	movs	r3, #0
   10b2a:	str	r3, [r4, #48]	; 0x30
   10b2c:	ldr	r1, [r4, #68]	; 0x44
   10b2e:	cbz	r1, 10b3a <_fclose_r+0x66>
   10b30:	mov	r0, r6
   10b32:	bl	e5c4 <_free_r>
   10b36:	movs	r3, #0
   10b38:	str	r3, [r4, #68]	; 0x44
   10b3a:	bl	dcf4 <__sfp_lock_acquire>
   10b3e:	ldr	r3, [r4, #100]	; 0x64
   10b40:	movs	r2, #0
   10b42:	lsls	r3, r3, #31
   10b44:	strh	r2, [r4, #12]
   10b46:	bpl.n	10b88 <_fclose_r+0xb4>
   10b48:	ldr	r0, [r4, #88]	; 0x58
   10b4a:	bl	e308 <__retarget_lock_close_recursive>
   10b4e:	bl	dd00 <__sfp_lock_release>
   10b52:	mov	r0, r5
   10b54:	pop	{r4, r5, r6, pc}
   10b56:	ldrh	r3, [r4, #12]
   10b58:	lsls	r1, r3, #22
   10b5a:	bmi.n	10af4 <_fclose_r+0x20>
   10b5c:	ldr	r0, [r4, #88]	; 0x58
   10b5e:	bl	e30c <__retarget_lock_acquire_recursive>
   10b62:	ldrsh.w	r3, [r4, #12]
   10b66:	cmp	r3, #0
   10b68:	bne.n	10af4 <_fclose_r+0x20>
   10b6a:	ldr	r5, [r4, #100]	; 0x64
   10b6c:	ands.w	r5, r5, #1
   10b70:	beq.n	10b7e <_fclose_r+0xaa>
   10b72:	movs	r5, #0
   10b74:	mov	r0, r5
   10b76:	pop	{r4, r5, r6, pc}
   10b78:	bl	dcb8 <__sinit>
   10b7c:	b.n	10ae6 <_fclose_r+0x12>
   10b7e:	ldr	r0, [r4, #88]	; 0x58
   10b80:	bl	e310 <__retarget_lock_release_recursive>
   10b84:	mov	r0, r5
   10b86:	pop	{r4, r5, r6, pc}
   10b88:	ldr	r0, [r4, #88]	; 0x58
   10b8a:	bl	e310 <__retarget_lock_release_recursive>
   10b8e:	b.n	10b48 <_fclose_r+0x74>
   10b90:	ldr	r1, [r4, #16]
   10b92:	mov	r0, r6
   10b94:	bl	e5c4 <_free_r>
   10b98:	b.n	10b16 <_fclose_r+0x42>
   10b9a:	nop

00010b9c <__sflush_r>:
   10b9c:	ldrsh.w	r2, [r1, #12]
   10ba0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10ba4:	mov	r4, r1
   10ba6:	lsls	r1, r2, #28
   10ba8:	mov	r8, r0
   10baa:	bmi.n	10c3c <__sflush_r+0xa0>
   10bac:	ldr	r3, [r4, #4]
   10bae:	orr.w	r2, r2, #2048	; 0x800
   10bb2:	cmp	r3, #0
   10bb4:	strh	r2, [r4, #12]
   10bb6:	ble.n	10c76 <__sflush_r+0xda>
   10bb8:	ldr	r5, [r4, #40]	; 0x28
   10bba:	cmp	r5, #0
   10bbc:	beq.n	10c70 <__sflush_r+0xd4>
   10bbe:	movs	r3, #0
   10bc0:	ldr.w	r6, [r8]
   10bc4:	str.w	r3, [r8]
   10bc8:	uxth	r3, r2
   10bca:	ands.w	r2, r2, #4096	; 0x1000
   10bce:	bne.n	10c7e <__sflush_r+0xe2>
   10bd0:	movs	r3, #1
   10bd2:	ldr	r1, [r4, #28]
   10bd4:	mov	r0, r8
   10bd6:	blx	r5
   10bd8:	adds	r3, r0, #1
   10bda:	beq.n	10cac <__sflush_r+0x110>
   10bdc:	ldrh	r3, [r4, #12]
   10bde:	ldr	r5, [r4, #40]	; 0x28
   10be0:	lsls	r7, r3, #29
   10be2:	bpl.n	10bf0 <__sflush_r+0x54>
   10be4:	ldr	r3, [r4, #4]
   10be6:	subs	r0, r0, r3
   10be8:	ldr	r3, [r4, #48]	; 0x30
   10bea:	cbz	r3, 10bf0 <__sflush_r+0x54>
   10bec:	ldr	r3, [r4, #60]	; 0x3c
   10bee:	subs	r0, r0, r3
   10bf0:	ldr	r1, [r4, #28]
   10bf2:	mov	r2, r0
   10bf4:	movs	r3, #0
   10bf6:	mov	r0, r8
   10bf8:	blx	r5
   10bfa:	adds	r1, r0, #1
   10bfc:	bne.n	10c82 <__sflush_r+0xe6>
   10bfe:	ldr.w	r3, [r8]
   10c02:	cmp	r3, #0
   10c04:	beq.n	10c82 <__sflush_r+0xe6>
   10c06:	cmp	r3, #29
   10c08:	beq.n	10c0e <__sflush_r+0x72>
   10c0a:	cmp	r3, #22
   10c0c:	bne.n	10cbc <__sflush_r+0x120>
   10c0e:	ldrh	r3, [r4, #12]
   10c10:	ldr	r2, [r4, #16]
   10c12:	str	r2, [r4, #0]
   10c14:	bic.w	r3, r3, #2048	; 0x800
   10c18:	movs	r1, #0
   10c1a:	str	r1, [r4, #4]
   10c1c:	strh	r3, [r4, #12]
   10c1e:	ldr	r1, [r4, #48]	; 0x30
   10c20:	str.w	r6, [r8]
   10c24:	cbz	r1, 10c70 <__sflush_r+0xd4>
   10c26:	add.w	r3, r4, #64	; 0x40
   10c2a:	cmp	r1, r3
   10c2c:	beq.n	10c34 <__sflush_r+0x98>
   10c2e:	mov	r0, r8
   10c30:	bl	e5c4 <_free_r>
   10c34:	movs	r0, #0
   10c36:	str	r0, [r4, #48]	; 0x30
   10c38:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10c3c:	ldr	r6, [r4, #16]
   10c3e:	cbz	r6, 10c70 <__sflush_r+0xd4>
   10c40:	uxth	r3, r2
   10c42:	ldr	r5, [r4, #0]
   10c44:	str	r6, [r4, #0]
   10c46:	lsls	r2, r3, #30
   10c48:	ite	eq
   10c4a:	ldreq	r3, [r4, #20]
   10c4c:	movne	r3, #0
   10c4e:	subs	r5, r5, r6
   10c50:	str	r3, [r4, #8]
   10c52:	b.n	10c6c <__sflush_r+0xd0>
   10c54:	mov	r3, r5
   10c56:	mov	r2, r6
   10c58:	ldr	r1, [r4, #28]
   10c5a:	ldr	r7, [r4, #36]	; 0x24
   10c5c:	mov	r0, r8
   10c5e:	blx	r7
   10c60:	subs.w	ip, r0, #0
   10c64:	sub.w	r5, r5, ip
   10c68:	add	r6, ip
   10c6a:	ble.n	10c9c <__sflush_r+0x100>
   10c6c:	cmp	r5, #0
   10c6e:	bgt.n	10c54 <__sflush_r+0xb8>
   10c70:	movs	r0, #0
   10c72:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10c76:	ldr	r3, [r4, #60]	; 0x3c
   10c78:	cmp	r3, #0
   10c7a:	bgt.n	10bb8 <__sflush_r+0x1c>
   10c7c:	b.n	10c70 <__sflush_r+0xd4>
   10c7e:	ldr	r0, [r4, #80]	; 0x50
   10c80:	b.n	10be0 <__sflush_r+0x44>
   10c82:	ldrsh.w	r3, [r4, #12]
   10c86:	ldr	r2, [r4, #16]
   10c88:	str	r2, [r4, #0]
   10c8a:	bic.w	r3, r3, #2048	; 0x800
   10c8e:	strh	r3, [r4, #12]
   10c90:	movs	r2, #0
   10c92:	lsls	r3, r3, #19
   10c94:	str	r2, [r4, #4]
   10c96:	bpl.n	10c1e <__sflush_r+0x82>
   10c98:	str	r0, [r4, #80]	; 0x50
   10c9a:	b.n	10c1e <__sflush_r+0x82>
   10c9c:	ldrh	r3, [r4, #12]
   10c9e:	orr.w	r3, r3, #64	; 0x40
   10ca2:	mov.w	r0, #4294967295
   10ca6:	strh	r3, [r4, #12]
   10ca8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10cac:	ldr.w	r3, [r8]
   10cb0:	cmp	r3, #0
   10cb2:	beq.n	10bdc <__sflush_r+0x40>
   10cb4:	cmp	r3, #29
   10cb6:	beq.n	10cc6 <__sflush_r+0x12a>
   10cb8:	cmp	r3, #22
   10cba:	beq.n	10cc6 <__sflush_r+0x12a>
   10cbc:	ldrh	r3, [r4, #12]
   10cbe:	orr.w	r3, r3, #64	; 0x40
   10cc2:	strh	r3, [r4, #12]
   10cc4:	b.n	10c72 <__sflush_r+0xd6>
   10cc6:	str.w	r6, [r8]
   10cca:	b.n	10c70 <__sflush_r+0xd4>

00010ccc <_fflush_r>:
   10ccc:	push	{r3, r4, r5, lr}
   10cce:	mov	r4, r1
   10cd0:	mov	r5, r0
   10cd2:	cbz	r0, 10cd8 <_fflush_r+0xc>
   10cd4:	ldr	r3, [r0, #52]	; 0x34
   10cd6:	cbz	r3, 10d1a <_fflush_r+0x4e>
   10cd8:	ldrsh.w	r0, [r4, #12]
   10cdc:	cbz	r0, 10d02 <_fflush_r+0x36>
   10cde:	ldr	r3, [r4, #100]	; 0x64
   10ce0:	lsls	r3, r3, #31
   10ce2:	bmi.n	10ce8 <_fflush_r+0x1c>
   10ce4:	lsls	r1, r0, #22
   10ce6:	bpl.n	10d08 <_fflush_r+0x3c>
   10ce8:	mov	r0, r5
   10cea:	mov	r1, r4
   10cec:	bl	10b9c <__sflush_r>
   10cf0:	ldr	r3, [r4, #100]	; 0x64
   10cf2:	lsls	r2, r3, #31
   10cf4:	mov	r5, r0
   10cf6:	bmi.n	10cfe <_fflush_r+0x32>
   10cf8:	ldrh	r3, [r4, #12]
   10cfa:	lsls	r3, r3, #22
   10cfc:	bpl.n	10d10 <_fflush_r+0x44>
   10cfe:	mov	r0, r5
   10d00:	pop	{r3, r4, r5, pc}
   10d02:	mov	r5, r0
   10d04:	mov	r0, r5
   10d06:	pop	{r3, r4, r5, pc}
   10d08:	ldr	r0, [r4, #88]	; 0x58
   10d0a:	bl	e30c <__retarget_lock_acquire_recursive>
   10d0e:	b.n	10ce8 <_fflush_r+0x1c>
   10d10:	ldr	r0, [r4, #88]	; 0x58
   10d12:	bl	e310 <__retarget_lock_release_recursive>
   10d16:	mov	r0, r5
   10d18:	pop	{r3, r4, r5, pc}
   10d1a:	bl	dcb8 <__sinit>
   10d1e:	b.n	10cd8 <_fflush_r+0xc>

00010d20 <_localeconv_r>:
   10d20:	ldr	r0, [pc, #0]	; (10d24 <_localeconv_r+0x4>)
   10d22:	bx	lr
   10d24:	.word	0x20001584

00010d28 <frexp>:
   10d28:	push	{r4, r5}
   10d2a:	sub	sp, #8
   10d2c:	vstr	d0, [sp]
   10d30:	ldr	r2, [sp, #4]
   10d32:	ldr	r4, [pc, #100]	; (10d98 <frexp+0x70>)
   10d34:	bic.w	r3, r2, #2147483648	; 0x80000000
   10d38:	movs	r1, #0
   10d3a:	cmp	r3, r4
   10d3c:	str	r1, [r0, #0]
   10d3e:	bgt.n	10d84 <frexp+0x5c>
   10d40:	ldr	r4, [sp, #0]
   10d42:	orrs	r4, r3
   10d44:	beq.n	10d84 <frexp+0x5c>
   10d46:	ldr	r4, [pc, #84]	; (10d9c <frexp+0x74>)
   10d48:	ands	r4, r2
   10d4a:	cbnz	r4, 10d62 <frexp+0x3a>
   10d4c:	vldr	d7, [pc, #64]	; 10d90 <frexp+0x68>
   10d50:	vmul.f64	d7, d0, d7
   10d54:	vstr	d7, [sp]
   10d58:	ldr	r2, [sp, #4]
   10d5a:	mvn.w	r1, #53	; 0x35
   10d5e:	bic.w	r3, r2, #2147483648	; 0x80000000
   10d62:	bic.w	r2, r2, #2139095040	; 0x7f800000
   10d66:	ldrd	r4, r5, [sp]
   10d6a:	bic.w	r2, r2, #7340032	; 0x700000
   10d6e:	orr.w	r5, r2, #1069547520	; 0x3fc00000
   10d72:	asrs	r3, r3, #20
   10d74:	orr.w	r5, r5, #2097152	; 0x200000
   10d78:	subw	r3, r3, #1022	; 0x3fe
   10d7c:	strd	r4, r5, [sp]
   10d80:	add	r3, r1
   10d82:	str	r3, [r0, #0]
   10d84:	vldr	d0, [sp]
   10d88:	add	sp, #8
   10d8a:	pop	{r4, r5}
   10d8c:	bx	lr
   10d8e:	nop
   10d90:	.word	0x00000000
   10d94:	.word	0x43500000
   10d98:	.word	0x7fefffff
   10d9c:	.word	0x7ff00000

00010da0 <__assert_func>:
   10da0:	push	{lr}
   10da2:	ldr	r4, [pc, #44]	; (10dd0 <__assert_func+0x30>)
   10da4:	ldr	r5, [r4, #0]
   10da6:	mov	r4, r2
   10da8:	ldr	r6, [r5, #12]
   10daa:	mov	r2, r3
   10dac:	sub	sp, #20
   10dae:	mov	r3, r0
   10db0:	mov	r5, r1
   10db2:	cbz	r4, 10dc8 <__assert_func+0x28>
   10db4:	ldr	r1, [pc, #28]	; (10dd4 <__assert_func+0x34>)
   10db6:	str	r5, [sp, #0]
   10db8:	strd	r1, r4, [sp, #4]
   10dbc:	mov	r0, r6
   10dbe:	ldr	r1, [pc, #24]	; (10dd8 <__assert_func+0x38>)
   10dc0:	bl	11cd0 <fiprintf>
   10dc4:	bl	ba7c <abort>
   10dc8:	ldr	r1, [pc, #16]	; (10ddc <__assert_func+0x3c>)
   10dca:	mov	r4, r1
   10dcc:	b.n	10db6 <__assert_func+0x16>
   10dce:	nop
   10dd0:	.word	0x20001a1c
   10dd4:	.word	0x20000c38
   10dd8:	.word	0x20000c48
   10ddc:	.word	0x20000790

00010de0 <_calloc_r>:
   10de0:	push	{r3, r4, r5, lr}
   10de2:	umull	r1, r4, r1, r2
   10de6:	cbnz	r4, 10e4c <_calloc_r+0x6c>
   10de8:	bl	d230 <_malloc_r>
   10dec:	mov	r5, r0
   10dee:	cbz	r0, 10e2a <_calloc_r+0x4a>
   10df0:	ldr.w	r2, [r0, #-4]
   10df4:	bic.w	r2, r2, #3
   10df8:	subs	r2, #4
   10dfa:	cmp	r2, #36	; 0x24
   10dfc:	bhi.n	10e2e <_calloc_r+0x4e>
   10dfe:	cmp	r2, #19
   10e00:	bls.n	10e38 <_calloc_r+0x58>
   10e02:	cmp	r2, #27
   10e04:	strd	r4, r4, [r0]
   10e08:	bls.n	10e46 <_calloc_r+0x66>
   10e0a:	cmp	r2, #36	; 0x24
   10e0c:	ite	ne
   10e0e:	addne.w	r2, r0, #16
   10e12:	addeq.w	r2, r0, #24
   10e16:	mov.w	r3, #0
   10e1a:	strd	r4, r4, [r0, #8]
   10e1e:	itt	eq
   10e20:	streq	r4, [r0, #16]
   10e22:	streq	r4, [r0, #20]
   10e24:	strd	r3, r3, [r2]
   10e28:	str	r3, [r2, #8]
   10e2a:	mov	r0, r5
   10e2c:	pop	{r3, r4, r5, pc}
   10e2e:	mov	r1, r4
   10e30:	bl	e044 <memset>
   10e34:	mov	r0, r5
   10e36:	pop	{r3, r4, r5, pc}
   10e38:	mov	r2, r0
   10e3a:	movs	r3, #0
   10e3c:	strd	r3, r3, [r2]
   10e40:	str	r3, [r2, #8]
   10e42:	mov	r0, r5
   10e44:	pop	{r3, r4, r5, pc}
   10e46:	add.w	r2, r0, #8
   10e4a:	b.n	10e3a <_calloc_r+0x5a>
   10e4c:	bl	e2b0 <__errno>
   10e50:	movs	r3, #12
   10e52:	movs	r5, #0
   10e54:	str	r3, [r0, #0]
   10e56:	b.n	10e2a <_calloc_r+0x4a>

00010e58 <quorem>:
   10e58:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10e5c:	ldr	r3, [r0, #16]
   10e5e:	ldr	r4, [r1, #16]
   10e60:	cmp	r3, r4
   10e62:	sub	sp, #12
   10e64:	blt.w	10f76 <quorem+0x11e>
   10e68:	subs	r4, #1
   10e6a:	add.w	r5, r1, #20
   10e6e:	lsls	r3, r4, #2
   10e70:	add.w	r8, r0, #20
   10e74:	str	r3, [sp, #0]
   10e76:	ldr.w	r3, [r5, r4, lsl #2]
   10e7a:	ldr.w	r2, [r8, r4, lsl #2]
   10e7e:	adds	r3, #1
   10e80:	mov	r9, r0
   10e82:	cmp	r2, r3
   10e84:	add.w	r0, r8, r4, lsl #2
   10e88:	add.w	r7, r5, r4, lsl #2
   10e8c:	str	r0, [sp, #4]
   10e8e:	udiv	r6, r2, r3
   10e92:	bcc.n	10f0c <quorem+0xb4>
   10e94:	mov.w	ip, #0
   10e98:	mov	lr, r5
   10e9a:	mov	r0, r8
   10e9c:	mov	sl, ip
   10e9e:	mov	r3, ip
   10ea0:	ldr.w	fp, [lr], #4
   10ea4:	ldr	r2, [r0, #0]
   10ea6:	uxth.w	ip, fp
   10eaa:	mla	r3, r6, ip, r3
   10eae:	mov.w	ip, r3, lsr #16
   10eb2:	mov.w	fp, fp, lsr #16
   10eb6:	mla	ip, r6, fp, ip
   10eba:	uxth	r3, r3
   10ebc:	sub.w	r3, sl, r3
   10ec0:	uxth.w	sl, ip
   10ec4:	uxtah	r3, r3, r2
   10ec8:	rsb	r2, sl, r2, lsr #16
   10ecc:	add.w	r2, r2, r3, asr #16
   10ed0:	uxth	r3, r3
   10ed2:	orr.w	r3, r3, r2, lsl #16
   10ed6:	cmp	r7, lr
   10ed8:	str.w	r3, [r0], #4
   10edc:	mov.w	sl, r2, asr #16
   10ee0:	mov.w	r3, ip, lsr #16
   10ee4:	bcs.n	10ea0 <quorem+0x48>
   10ee6:	ldr	r3, [sp, #0]
   10ee8:	ldr.w	r3, [r8, r3]
   10eec:	cbnz	r3, 10f0c <quorem+0xb4>
   10eee:	ldr	r3, [sp, #4]
   10ef0:	subs	r3, #4
   10ef2:	cmp	r8, r3
   10ef4:	bcc.n	10f00 <quorem+0xa8>
   10ef6:	b.n	10f08 <quorem+0xb0>
   10ef8:	cmp	r8, r3
   10efa:	add.w	r4, r4, #4294967295
   10efe:	bcs.n	10f08 <quorem+0xb0>
   10f00:	ldr.w	r2, [r3], #-4
   10f04:	cmp	r2, #0
   10f06:	beq.n	10ef8 <quorem+0xa0>
   10f08:	str.w	r4, [r9, #16]
   10f0c:	mov	r0, r9
   10f0e:	bl	ed08 <__mcmp>
   10f12:	cmp	r0, #0
   10f14:	blt.n	10f6e <quorem+0x116>
   10f16:	adds	r6, #1
   10f18:	mov	r1, r8
   10f1a:	movs	r3, #0
   10f1c:	ldr.w	r0, [r5], #4
   10f20:	ldr.w	ip, [r1]
   10f24:	uxth	r2, r0
   10f26:	subs	r2, r3, r2
   10f28:	lsrs	r3, r0, #16
   10f2a:	uxtah	r2, r2, ip
   10f2e:	rsb	r3, r3, ip, lsr #16
   10f32:	add.w	r3, r3, r2, asr #16
   10f36:	uxth	r2, r2
   10f38:	orr.w	r2, r2, r3, lsl #16
   10f3c:	cmp	r7, r5
   10f3e:	str.w	r2, [r1], #4
   10f42:	mov.w	r3, r3, asr #16
   10f46:	bcs.n	10f1c <quorem+0xc4>
   10f48:	ldr.w	r2, [r8, r4, lsl #2]
   10f4c:	add.w	r3, r8, r4, lsl #2
   10f50:	cbnz	r2, 10f6e <quorem+0x116>
   10f52:	subs	r3, #4
   10f54:	cmp	r8, r3
   10f56:	bcc.n	10f62 <quorem+0x10a>
   10f58:	b.n	10f6a <quorem+0x112>
   10f5a:	cmp	r8, r3
   10f5c:	add.w	r4, r4, #4294967295
   10f60:	bcs.n	10f6a <quorem+0x112>
   10f62:	ldr.w	r2, [r3], #-4
   10f66:	cmp	r2, #0
   10f68:	beq.n	10f5a <quorem+0x102>
   10f6a:	str.w	r4, [r9, #16]
   10f6e:	mov	r0, r6
   10f70:	add	sp, #12
   10f72:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10f76:	movs	r0, #0
   10f78:	add	sp, #12
   10f7a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10f7e:	nop

00010f80 <_dtoa_r>:
   10f80:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10f84:	vpush	{d8}
   10f88:	sub	sp, #60	; 0x3c
   10f8a:	vstr	d0, [sp, #8]
   10f8e:	str	r1, [sp, #4]
   10f90:	ldr	r1, [r0, #56]	; 0x38
   10f92:	ldr	r5, [sp, #104]	; 0x68
   10f94:	str	r3, [sp, #20]
   10f96:	vmov	r6, r7, d0
   10f9a:	mov	r4, r0
   10f9c:	mov	fp, r2
   10f9e:	cbz	r1, 10fb2 <_dtoa_r+0x32>
   10fa0:	ldr	r2, [r0, #60]	; 0x3c
   10fa2:	str	r2, [r1, #4]
   10fa4:	movs	r3, #1
   10fa6:	lsls	r3, r2
   10fa8:	str	r3, [r1, #8]
   10faa:	bl	e848 <_Bfree>
   10fae:	movs	r3, #0
   10fb0:	str	r3, [r4, #56]	; 0x38
   10fb2:	subs.w	r8, r7, #0
   10fb6:	ite	lt
   10fb8:	movlt	r3, #1
   10fba:	movge	r3, #0
   10fbc:	str	r3, [r5, #0]
   10fbe:	ldr	r3, [pc, #760]	; (112b8 <_dtoa_r+0x338>)
   10fc0:	itt	lt
   10fc2:	biclt.w	r8, r8, #2147483648	; 0x80000000
   10fc6:	strlt.w	r8, [sp, #12]
   10fca:	bics.w	r3, r3, r8
   10fce:	beq.w	11110 <_dtoa_r+0x190>
   10fd2:	vldr	d8, [sp, #8]
   10fd6:	vcmp.f64	d8, #0.0
   10fda:	vmrs	APSR_nzcv, fpscr
   10fde:	bne.n	11004 <_dtoa_r+0x84>
   10fe0:	ldr	r2, [sp, #20]
   10fe2:	movs	r3, #1
   10fe4:	str	r3, [r2, #0]
   10fe6:	ldr	r3, [sp, #108]	; 0x6c
   10fe8:	cmp	r3, #0
   10fea:	beq.w	1146c <_dtoa_r+0x4ec>
   10fee:	ldr	r3, [pc, #716]	; (112bc <_dtoa_r+0x33c>)
   10ff0:	ldr	r2, [sp, #108]	; 0x6c
   10ff2:	str	r3, [r2, #0]
   10ff4:	subs	r3, #1
   10ff6:	str	r3, [sp, #0]
   10ff8:	ldr	r0, [sp, #0]
   10ffa:	add	sp, #60	; 0x3c
   10ffc:	vpop	{d8}
   11000:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11004:	add	r2, sp, #48	; 0x30
   11006:	add	r1, sp, #52	; 0x34
   11008:	mov	r0, r4
   1100a:	vmov.f64	d0, d8
   1100e:	bl	eea0 <__d2b>
   11012:	movs.w	r3, r8, lsr #20
   11016:	mov	r5, r0
   11018:	bne.w	11140 <_dtoa_r+0x1c0>
   1101c:	ldrd	r1, r3, [sp, #48]	; 0x30
   11020:	add	r3, r1
   11022:	addw	r2, r3, #1074	; 0x432
   11026:	cmp	r2, #32
   11028:	ble.w	11620 <_dtoa_r+0x6a0>
   1102c:	rsb	r2, r2, #64	; 0x40
   11030:	lsl.w	r8, r8, r2
   11034:	addw	r2, r3, #1042	; 0x412
   11038:	lsrs	r6, r2
   1103a:	orr.w	r2, r8, r6
   1103e:	vmov	s14, r2
   11042:	vcvt.f64.u32	d7, s14
   11046:	subs	r0, r3, #1
   11048:	vmov	r6, s15
   1104c:	vmov	r2, r3, d7
   11050:	mov.w	sl, #1
   11054:	sub.w	r3, r6, #32505856	; 0x1f00000
   11058:	vldr	d3, [pc, #580]	; 112a0 <_dtoa_r+0x320>
   1105c:	vldr	d7, [pc, #584]	; 112a8 <_dtoa_r+0x328>
   11060:	vldr	d5, [pc, #588]	; 112b0 <_dtoa_r+0x330>
   11064:	vmov	s13, r0
   11068:	vmov	d2, r2, r3
   1106c:	vcvt.f64.s32	d4, s13
   11070:	vmov.f64	d6, #120	; 0x3fc00000  1.5
   11074:	vsub.f64	d6, d2, d6
   11078:	vfma.f64	d7, d6, d3
   1107c:	vfma.f64	d7, d4, d5
   11080:	vcvt.s32.f64	s13, d7
   11084:	vcmpe.f64	d7, #0.0
   11088:	vmrs	APSR_nzcv, fpscr
   1108c:	vmov	r7, s13
   11090:	bpl.n	110a4 <_dtoa_r+0x124>
   11092:	vcvt.f64.s32	d6, s13
   11096:	vcmp.f64	d6, d7
   1109a:	vmrs	APSR_nzcv, fpscr
   1109e:	it	ne
   110a0:	addne.w	r7, r7, #4294967295
   110a4:	cmp	r7, #22
   110a6:	bhi.w	11334 <_dtoa_r+0x3b4>
   110aa:	ldr	r3, [pc, #532]	; (112c0 <_dtoa_r+0x340>)
   110ac:	add.w	r3, r3, r7, lsl #3
   110b0:	vldr	d7, [r3]
   110b4:	vcmpe.f64	d8, d7
   110b8:	vmrs	APSR_nzcv, fpscr
   110bc:	bpl.n	1116e <_dtoa_r+0x1ee>
   110be:	subs	r1, r1, r0
   110c0:	movs	r3, #0
   110c2:	subs.w	r8, r1, #1
   110c6:	add.w	r7, r7, #4294967295
   110ca:	str	r3, [sp, #40]	; 0x28
   110cc:	bmi.w	11342 <_dtoa_r+0x3c2>
   110d0:	movs	r3, #0
   110d2:	str	r3, [sp, #24]
   110d4:	cmp	r7, #0
   110d6:	bge.n	1117e <_dtoa_r+0x1fe>
   110d8:	ldr	r3, [sp, #24]
   110da:	str	r7, [sp, #16]
   110dc:	subs	r3, r3, r7
   110de:	str	r3, [sp, #24]
   110e0:	negs	r3, r7
   110e2:	str	r3, [sp, #32]
   110e4:	ldr	r3, [sp, #4]
   110e6:	cmp	r3, #9
   110e8:	mov.w	r7, #0
   110ec:	bhi.n	1118c <_dtoa_r+0x20c>
   110ee:	cmp	r3, #5
   110f0:	ble.w	1162e <_dtoa_r+0x6ae>
   110f4:	subs	r3, #4
   110f6:	str	r3, [sp, #4]
   110f8:	movs	r6, #0
   110fa:	ldr	r3, [sp, #4]
   110fc:	subs	r2, r3, #2
   110fe:	cmp	r2, #3
   11100:	bhi.w	1134e <_dtoa_r+0x3ce>
   11104:	tbh	[pc, r2, lsl #1]
   11108:	.word	0x03a703aa
   1110c:	.word	0x037e039d
   11110:	ldr	r2, [sp, #20]
   11112:	ubfx	r8, r8, #0, #20
   11116:	movw	r3, #9999	; 0x270f
   1111a:	orrs.w	r8, r8, r6
   1111e:	str	r3, [r2, #0]
   11120:	bne.n	11160 <_dtoa_r+0x1e0>
   11122:	ldr	r3, [sp, #108]	; 0x6c
   11124:	cmp	r3, #0
   11126:	beq.w	11c4c <_dtoa_r+0xccc>
   1112a:	ldr	r3, [pc, #408]	; (112c4 <_dtoa_r+0x344>)
   1112c:	str	r3, [sp, #0]
   1112e:	adds	r3, #8
   11130:	ldr	r2, [sp, #108]	; 0x6c
   11132:	ldr	r0, [sp, #0]
   11134:	str	r3, [r2, #0]
   11136:	add	sp, #60	; 0x3c
   11138:	vpop	{d8}
   1113c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11140:	vmov	r6, s17
   11144:	ubfx	r6, r6, #0, #20
   11148:	subw	r0, r3, #1023	; 0x3ff
   1114c:	vmov	r2, r3, d8
   11150:	orr.w	r3, r6, #1069547520	; 0x3fc00000
   11154:	ldr	r1, [sp, #48]	; 0x30
   11156:	mov.w	sl, #0
   1115a:	orr.w	r3, r3, #3145728	; 0x300000
   1115e:	b.n	11058 <_dtoa_r+0xd8>
   11160:	ldr	r3, [sp, #108]	; 0x6c
   11162:	cmp	r3, #0
   11164:	bne.w	117de <_dtoa_r+0x85e>
   11168:	ldr	r3, [pc, #348]	; (112c8 <_dtoa_r+0x348>)
   1116a:	str	r3, [sp, #0]
   1116c:	b.n	10ff8 <_dtoa_r+0x78>
   1116e:	subs	r1, r1, r0
   11170:	movs	r3, #0
   11172:	subs.w	r8, r1, #1
   11176:	str	r3, [sp, #40]	; 0x28
   11178:	bmi.w	11342 <_dtoa_r+0x3c2>
   1117c:	str	r3, [sp, #24]
   1117e:	movs	r3, #0
   11180:	str	r3, [sp, #32]
   11182:	ldr	r3, [sp, #4]
   11184:	str	r7, [sp, #16]
   11186:	cmp	r3, #9
   11188:	add	r8, r7
   1118a:	bls.n	110ee <_dtoa_r+0x16e>
   1118c:	movs	r3, #0
   1118e:	movs	r6, #1
   11190:	str	r3, [sp, #4]
   11192:	str	r6, [sp, #28]
   11194:	mov.w	r9, #4294967295
   11198:	mov	fp, r3
   1119a:	movs	r1, #0
   1119c:	str	r1, [r4, #60]	; 0x3c
   1119e:	str.w	r9, [sp, #44]	; 0x2c
   111a2:	mov	r0, r4
   111a4:	bl	e7fc <_Balloc>
   111a8:	str	r0, [sp, #0]
   111aa:	cmp	r0, #0
   111ac:	beq.w	11c30 <_dtoa_r+0xcb0>
   111b0:	ldr	r3, [sp, #0]
   111b2:	str	r3, [r4, #56]	; 0x38
   111b4:	cmp.w	r9, #14
   111b8:	bhi.w	11374 <_dtoa_r+0x3f4>
   111bc:	cmp	r6, #0
   111be:	beq.w	11374 <_dtoa_r+0x3f4>
   111c2:	ldr	r3, [sp, #16]
   111c4:	cmp	r3, #0
   111c6:	ble.w	11986 <_dtoa_r+0xa06>
   111ca:	ldr	r2, [pc, #244]	; (112c0 <_dtoa_r+0x340>)
   111cc:	and.w	r1, r3, #15
   111d0:	add.w	r2, r2, r1, lsl #3
   111d4:	vldr	d7, [r2]
   111d8:	asrs	r2, r3, #4
   111da:	lsls	r3, r3, #23
   111dc:	bpl.w	118e4 <_dtoa_r+0x964>
   111e0:	ldr	r1, [pc, #232]	; (112cc <_dtoa_r+0x34c>)
   111e2:	vldr	d6, [r1, #32]
   111e6:	and.w	r2, r2, #15
   111ea:	movs	r0, #3
   111ec:	vdiv.f64	d5, d8, d6
   111f0:	cbz	r2, 1120a <_dtoa_r+0x28a>
   111f2:	ldr	r1, [pc, #216]	; (112cc <_dtoa_r+0x34c>)
   111f4:	lsls	r6, r2, #31
   111f6:	bpl.n	11202 <_dtoa_r+0x282>
   111f8:	vldr	d6, [r1]
   111fc:	adds	r0, #1
   111fe:	vmul.f64	d7, d7, d6
   11202:	asrs	r2, r2, #1
   11204:	add.w	r1, r1, #8
   11208:	bne.n	111f4 <_dtoa_r+0x274>
   1120a:	vdiv.f64	d6, d5, d7
   1120e:	ldr	r3, [sp, #40]	; 0x28
   11210:	cbz	r3, 11222 <_dtoa_r+0x2a2>
   11212:	vmov.f64	d7, #112	; 0x3f800000  1.0
   11216:	vcmpe.f64	d6, d7
   1121a:	vmrs	APSR_nzcv, fpscr
   1121e:	bmi.w	11b7e <_dtoa_r+0xbfe>
   11222:	vmov	s15, r0
   11226:	vcvt.f64.s32	d5, s15
   1122a:	vmov.f64	d7, #28	; 0x40e00000  7.0
   1122e:	vfma.f64	d7, d5, d6
   11232:	vmov	r2, s15
   11236:	vmov	r0, r1, d7
   1123a:	sub.w	r1, r2, #54525952	; 0x3400000
   1123e:	cmp.w	r9, #0
   11242:	beq.w	11956 <_dtoa_r+0x9d6>
   11246:	ldr	r6, [sp, #16]
   11248:	mov	r2, r9
   1124a:	ldr	r3, [sp, #28]
   1124c:	cmp	r3, #0
   1124e:	beq.w	11ae0 <_dtoa_r+0xb60>
   11252:	vmov.f64	d3, #96	; 0x3f000000  0.5
   11256:	ldr	r3, [pc, #104]	; (112c0 <_dtoa_r+0x340>)
   11258:	vcvt.s32.f64	s9, d6
   1125c:	add.w	ip, r3, r2, lsl #3
   11260:	vcvt.f64.s32	d7, s9
   11264:	vsub.f64	d7, d6, d7
   11268:	vldr	d6, [ip, #-8]
   1126c:	vdiv.f64	d5, d3, d6
   11270:	vmov	d6, r0, r1
   11274:	vmov	r0, s9
   11278:	vsub.f64	d5, d5, d6
   1127c:	ldr	r1, [sp, #0]
   1127e:	vcmpe.f64	d5, d7
   11282:	adds	r0, #48	; 0x30
   11284:	vmrs	APSR_nzcv, fpscr
   11288:	strb.w	r0, [r1], #1
   1128c:	bgt.w	11be8 <_dtoa_r+0xc68>
   11290:	vmov.f64	d2, #112	; 0x3f800000  1.0
   11294:	vmov.f64	d4, #36	; 0x41200000  10.0
   11298:	mov.w	ip, #0
   1129c:	b.n	11302 <_dtoa_r+0x382>
   1129e:	nop
   112a0:	.word	0x636f4361
   112a4:	.word	0x3fd287a7
   112a8:	.word	0x8b60c8b3
   112ac:	.word	0x3fc68a28
   112b0:	.word	0x509f79fb
   112b4:	.word	0x3fd34413
   112b8:	.word	0x7ff00000
   112bc:	.word	0x20000e99
   112c0:	.word	0x200003a8
   112c4:	.word	0x20000dec
   112c8:	.word	0x20000df8
   112cc:	.word	0x20000380
   112d0:	add.w	ip, ip, #1
   112d4:	cmp	ip, r2
   112d6:	bge.n	11374 <_dtoa_r+0x3f4>
   112d8:	vmul.f64	d7, d7, d4
   112dc:	vmul.f64	d5, d5, d4
   112e0:	vcvt.s32.f64	s13, d7
   112e4:	vmov	r3, s13
   112e8:	vcvt.f64.s32	d3, s13
   112ec:	adds	r3, #48	; 0x30
   112ee:	vsub.f64	d7, d7, d3
   112f2:	vcmpe.f64	d7, d5
   112f6:	vmrs	APSR_nzcv, fpscr
   112fa:	strb.w	r3, [r1], #1
   112fe:	bmi.w	11be8 <_dtoa_r+0xc68>
   11302:	vsub.f64	d6, d2, d7
   11306:	vcmpe.f64	d6, d5
   1130a:	vmrs	APSR_nzcv, fpscr
   1130e:	bpl.n	112d0 <_dtoa_r+0x350>
   11310:	ldr	r2, [sp, #0]
   11312:	str	r6, [sp, #16]
   11314:	b.n	1131c <_dtoa_r+0x39c>
   11316:	cmp	r2, r1
   11318:	beq.w	11bbc <_dtoa_r+0xc3c>
   1131c:	mov	r9, r1
   1131e:	ldrb.w	r3, [r1, #-1]!
   11322:	cmp	r3, #57	; 0x39
   11324:	beq.n	11316 <_dtoa_r+0x396>
   11326:	adds	r3, #1
   11328:	uxtb	r3, r3
   1132a:	strb	r3, [r1, #0]
   1132c:	ldr	r3, [sp, #16]
   1132e:	adds	r3, #1
   11330:	str	r3, [sp, #16]
   11332:	b.n	115e0 <_dtoa_r+0x660>
   11334:	subs	r1, r1, r0
   11336:	movs	r3, #1
   11338:	subs.w	r8, r1, #1
   1133c:	str	r3, [sp, #40]	; 0x28
   1133e:	bpl.w	110d0 <_dtoa_r+0x150>
   11342:	rsb	r3, r1, #1
   11346:	str	r3, [sp, #24]
   11348:	mov.w	r8, #0
   1134c:	b.n	110d4 <_dtoa_r+0x154>
   1134e:	movs	r6, #0
   11350:	str	r6, [r4, #60]	; 0x3c
   11352:	mov	r1, r6
   11354:	mov	r0, r4
   11356:	bl	e7fc <_Balloc>
   1135a:	str	r0, [sp, #0]
   1135c:	cmp	r0, #0
   1135e:	beq.w	11c30 <_dtoa_r+0xcb0>
   11362:	ldr	r3, [sp, #0]
   11364:	str	r3, [r4, #56]	; 0x38
   11366:	mov.w	r3, #4294967295
   1136a:	str	r3, [sp, #44]	; 0x2c
   1136c:	mov	r9, r3
   1136e:	movs	r3, #1
   11370:	mov	fp, r6
   11372:	str	r3, [sp, #28]
   11374:	ldr	r2, [sp, #52]	; 0x34
   11376:	cmp	r2, #0
   11378:	blt.n	11426 <_dtoa_r+0x4a6>
   1137a:	ldr	r1, [sp, #16]
   1137c:	cmp	r1, #14
   1137e:	bgt.n	11426 <_dtoa_r+0x4a6>
   11380:	ldr	r3, [pc, #732]	; (11660 <_dtoa_r+0x6e0>)
   11382:	cmp.w	fp, #0
   11386:	add.w	r3, r3, r1, lsl #3
   1138a:	vldr	d6, [r3]
   1138e:	bge.n	113bc <_dtoa_r+0x43c>
   11390:	cmp.w	r9, #0
   11394:	bgt.n	113bc <_dtoa_r+0x43c>
   11396:	bne.w	1197e <_dtoa_r+0x9fe>
   1139a:	vmov.f64	d7, #20	; 0x40a00000  5.0
   1139e:	vmul.f64	d7, d6, d7
   113a2:	vcmpe.f64	d8, d7
   113a6:	vmrs	APSR_nzcv, fpscr
   113aa:	mov	sl, r9
   113ac:	mov	r6, r9
   113ae:	bhi.w	1188c <_dtoa_r+0x90c>
   113b2:	ldr.w	r8, [sp]
   113b6:	mvn.w	fp, fp
   113ba:	b.n	1189e <_dtoa_r+0x91e>
   113bc:	vdiv.f64	d7, d8, d6
   113c0:	vcvt.s32.f64	s14, d7
   113c4:	ldr	r1, [sp, #0]
   113c6:	vmov	r3, s14
   113ca:	cmp.w	r9, #1
   113ce:	add.w	r3, r3, #48	; 0x30
   113d2:	vcvt.f64.s32	d5, s14
   113d6:	strb.w	r3, [r1], #1
   113da:	vfms.f64	d8, d5, d6
   113de:	beq.w	11a4a <_dtoa_r+0xaca>
   113e2:	vmov.f64	d4, #36	; 0x41200000  10.0
   113e6:	movs	r3, #1
   113e8:	b.n	1140e <_dtoa_r+0x48e>
   113ea:	vdiv.f64	d7, d8, d6
   113ee:	vcvt.s32.f64	s14, d7
   113f2:	adds	r3, #1
   113f4:	vmov	r2, s14
   113f8:	cmp	r3, r9
   113fa:	add.w	r2, r2, #48	; 0x30
   113fe:	vcvt.f64.s32	d5, s14
   11402:	strb.w	r2, [r1], #1
   11406:	vfms.f64	d8, d5, d6
   1140a:	beq.w	11a4a <_dtoa_r+0xaca>
   1140e:	vmul.f64	d8, d8, d4
   11412:	vcmp.f64	d8, #0.0
   11416:	vmrs	APSR_nzcv, fpscr
   1141a:	bne.n	113ea <_dtoa_r+0x46a>
   1141c:	ldr	r3, [sp, #16]
   1141e:	adds	r3, #1
   11420:	str	r3, [sp, #16]
   11422:	mov	r9, r1
   11424:	b.n	115e0 <_dtoa_r+0x660>
   11426:	ldr	r3, [sp, #28]
   11428:	cbz	r3, 1147c <_dtoa_r+0x4fc>
   1142a:	ldr	r3, [sp, #4]
   1142c:	cmp	r3, #1
   1142e:	ble.w	1191e <_dtoa_r+0x99e>
   11432:	ldr	r3, [sp, #32]
   11434:	add.w	sl, r9, #4294967295
   11438:	cmp	r3, sl
   1143a:	bge.w	118bc <_dtoa_r+0x93c>
   1143e:	ldr	r3, [sp, #32]
   11440:	str.w	sl, [sp, #32]
   11444:	sub.w	r2, sl, r3
   11448:	add	r7, r2
   1144a:	mov.w	sl, #0
   1144e:	cmp.w	r9, #0
   11452:	blt.w	11aa0 <_dtoa_r+0xb20>
   11456:	ldr	r3, [sp, #24]
   11458:	str	r3, [sp, #36]	; 0x24
   1145a:	add	r3, r9
   1145c:	add	r8, r9
   1145e:	str	r3, [sp, #24]
   11460:	movs	r1, #1
   11462:	mov	r0, r4
   11464:	bl	e9a0 <__i2b>
   11468:	mov	r6, r0
   1146a:	b.n	11486 <_dtoa_r+0x506>
   1146c:	ldr	r3, [pc, #500]	; (11664 <_dtoa_r+0x6e4>)
   1146e:	str	r3, [sp, #0]
   11470:	ldr	r0, [sp, #0]
   11472:	add	sp, #60	; 0x3c
   11474:	vpop	{d8}
   11478:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1147c:	ldr	r3, [sp, #24]
   1147e:	ldr.w	sl, [sp, #32]
   11482:	ldr	r6, [sp, #28]
   11484:	str	r3, [sp, #36]	; 0x24
   11486:	ldr	r3, [sp, #36]	; 0x24
   11488:	cbz	r3, 114a6 <_dtoa_r+0x526>
   1148a:	cmp.w	r8, #0
   1148e:	ble.n	114a6 <_dtoa_r+0x526>
   11490:	cmp	r3, r8
   11492:	ldr	r1, [sp, #24]
   11494:	mov	r2, r3
   11496:	it	ge
   11498:	movge	r2, r8
   1149a:	subs	r1, r1, r2
   1149c:	subs	r3, r3, r2
   1149e:	str	r1, [sp, #24]
   114a0:	str	r3, [sp, #36]	; 0x24
   114a2:	sub.w	r8, r8, r2
   114a6:	ldr	r3, [sp, #32]
   114a8:	cbz	r3, 114c4 <_dtoa_r+0x544>
   114aa:	ldr	r3, [sp, #28]
   114ac:	cmp	r3, #0
   114ae:	beq.w	11a00 <_dtoa_r+0xa80>
   114b2:	cmp.w	sl, #0
   114b6:	bgt.w	118c2 <_dtoa_r+0x942>
   114ba:	ldr	r3, [sp, #32]
   114bc:	subs.w	r2, r3, sl
   114c0:	bne.w	11ac2 <_dtoa_r+0xb42>
   114c4:	movs	r1, #1
   114c6:	mov	r0, r4
   114c8:	bl	e9a0 <__i2b>
   114cc:	cmp	r7, #0
   114ce:	mov	sl, r0
   114d0:	bgt.w	11632 <_dtoa_r+0x6b2>
   114d4:	ldr	r3, [sp, #4]
   114d6:	cmp	r3, #1
   114d8:	ble.w	117ea <_dtoa_r+0x86a>
   114dc:	movs	r3, #0
   114de:	str	r3, [sp, #32]
   114e0:	movs	r0, #1
   114e2:	cmp	r7, #0
   114e4:	bne.w	1164a <_dtoa_r+0x6ca>
   114e8:	add	r0, r8
   114ea:	ands.w	r0, r0, #31
   114ee:	beq.w	117e6 <_dtoa_r+0x866>
   114f2:	rsb	r2, r0, #32
   114f6:	cmp	r2, #4
   114f8:	bgt.w	1160c <_dtoa_r+0x68c>
   114fc:	bne.w	118ec <_dtoa_r+0x96c>
   11500:	ldr	r3, [sp, #24]
   11502:	cmp	r3, #0
   11504:	ble.n	11512 <_dtoa_r+0x592>
   11506:	mov	r1, r5
   11508:	mov	r2, r3
   1150a:	mov	r0, r4
   1150c:	bl	ec18 <__lshift>
   11510:	mov	r5, r0
   11512:	cmp.w	r8, #0
   11516:	ble.n	11524 <_dtoa_r+0x5a4>
   11518:	mov	r1, sl
   1151a:	mov	r2, r8
   1151c:	mov	r0, r4
   1151e:	bl	ec18 <__lshift>
   11522:	mov	sl, r0
   11524:	ldr	r3, [sp, #40]	; 0x28
   11526:	cmp	r3, #0
   11528:	bne.w	117aa <_dtoa_r+0x82a>
   1152c:	cmp.w	r9, #0
   11530:	ble.w	1177e <_dtoa_r+0x7fe>
   11534:	ldr	r3, [sp, #28]
   11536:	cmp	r3, #0
   11538:	bne.w	11682 <_dtoa_r+0x702>
   1153c:	ldr	r3, [sp, #16]
   1153e:	adds	r3, #1
   11540:	str	r3, [sp, #16]
   11542:	ldr.w	r8, [sp]
   11546:	movs	r7, #1
   11548:	b.n	1155a <_dtoa_r+0x5da>
   1154a:	mov	r1, r5
   1154c:	movs	r3, #0
   1154e:	movs	r2, #10
   11550:	mov	r0, r4
   11552:	bl	e85c <__multadd>
   11556:	adds	r7, #1
   11558:	mov	r5, r0
   1155a:	mov	r1, sl
   1155c:	mov	r0, r5
   1155e:	bl	10e58 <quorem>
   11562:	cmp	r9, r7
   11564:	add.w	r0, r0, #48	; 0x30
   11568:	strb.w	r0, [r8], #1
   1156c:	bgt.n	1154a <_dtoa_r+0x5ca>
   1156e:	cmp.w	r9, #0
   11572:	ldr	r2, [sp, #0]
   11574:	ite	gt
   11576:	movgt	fp, r9
   11578:	movle.w	fp, #1
   1157c:	mov	r3, r0
   1157e:	add	fp, r2
   11580:	movs	r7, #0
   11582:	mov	r1, r5
   11584:	movs	r2, #1
   11586:	mov	r0, r4
   11588:	str	r3, [sp, #4]
   1158a:	bl	ec18 <__lshift>
   1158e:	mov	r1, sl
   11590:	mov	r5, r0
   11592:	bl	ed08 <__mcmp>
   11596:	cmp	r0, #0
   11598:	ble.w	118fa <_dtoa_r+0x97a>
   1159c:	ldrb.w	r3, [fp, #-1]
   115a0:	ldr	r2, [sp, #0]
   115a2:	add.w	fp, fp, #4294967295
   115a6:	b.n	115b2 <_dtoa_r+0x632>
   115a8:	cmp	r2, fp
   115aa:	beq.w	11910 <_dtoa_r+0x990>
   115ae:	ldrb.w	r3, [fp, #-1]!
   115b2:	cmp	r3, #57	; 0x39
   115b4:	add.w	r9, fp, #1
   115b8:	beq.n	115a8 <_dtoa_r+0x628>
   115ba:	adds	r3, #1
   115bc:	strb.w	r3, [fp]
   115c0:	mov	r1, sl
   115c2:	mov	r0, r4
   115c4:	bl	e848 <_Bfree>
   115c8:	cbz	r6, 115e0 <_dtoa_r+0x660>
   115ca:	cbz	r7, 115d8 <_dtoa_r+0x658>
   115cc:	cmp	r7, r6
   115ce:	beq.n	115d8 <_dtoa_r+0x658>
   115d0:	mov	r1, r7
   115d2:	mov	r0, r4
   115d4:	bl	e848 <_Bfree>
   115d8:	mov	r1, r6
   115da:	mov	r0, r4
   115dc:	bl	e848 <_Bfree>
   115e0:	mov	r1, r5
   115e2:	mov	r0, r4
   115e4:	bl	e848 <_Bfree>
   115e8:	movs	r3, #0
   115ea:	strb.w	r3, [r9]
   115ee:	ldrd	r2, r3, [sp, #16]
   115f2:	str	r2, [r3, #0]
   115f4:	ldr	r3, [sp, #108]	; 0x6c
   115f6:	cmp	r3, #0
   115f8:	beq.w	10ff8 <_dtoa_r+0x78>
   115fc:	ldr	r0, [sp, #0]
   115fe:	str.w	r9, [r3]
   11602:	add	sp, #60	; 0x3c
   11604:	vpop	{d8}
   11608:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1160c:	rsb	r0, r0, #28
   11610:	ldr	r3, [sp, #24]
   11612:	add	r3, r0
   11614:	str	r3, [sp, #24]
   11616:	ldr	r3, [sp, #36]	; 0x24
   11618:	add	r3, r0
   1161a:	str	r3, [sp, #36]	; 0x24
   1161c:	add	r8, r0
   1161e:	b.n	11500 <_dtoa_r+0x580>
   11620:	rsb	r2, r2, #32
   11624:	lsl.w	r2, r6, r2
   11628:	vmov	s14, r2
   1162c:	b.n	11042 <_dtoa_r+0xc2>
   1162e:	movs	r6, #1
   11630:	b.n	110fa <_dtoa_r+0x17a>
   11632:	mov	r1, r0
   11634:	mov	r2, r7
   11636:	mov	r0, r4
   11638:	bl	eb58 <__pow5mult>
   1163c:	ldr	r3, [sp, #4]
   1163e:	cmp	r3, #1
   11640:	mov	sl, r0
   11642:	ble.w	119d0 <_dtoa_r+0xa50>
   11646:	movs	r3, #0
   11648:	str	r3, [sp, #32]
   1164a:	ldr.w	r2, [sl, #16]
   1164e:	add.w	r2, sl, r2, lsl #2
   11652:	ldr	r0, [r2, #16]
   11654:	bl	e900 <__hi0bits>
   11658:	rsb	r0, r0, #32
   1165c:	b.n	114e8 <_dtoa_r+0x568>
   1165e:	nop
   11660:	.word	0x200003a8
   11664:	.word	0x20000e98
   11668:	mov	r1, r6
   1166a:	movs	r3, #0
   1166c:	movs	r2, #10
   1166e:	mov	r0, r4
   11670:	bl	e85c <__multadd>
   11674:	ldr	r3, [sp, #44]	; 0x2c
   11676:	cmp	r3, #0
   11678:	mov	r6, r0
   1167a:	ble.w	11c1a <_dtoa_r+0xc9a>
   1167e:	str	r7, [sp, #16]
   11680:	mov	r9, r3
   11682:	ldr	r3, [sp, #36]	; 0x24
   11684:	cmp	r3, #0
   11686:	ble.n	11694 <_dtoa_r+0x714>
   11688:	mov	r1, r6
   1168a:	mov	r2, r3
   1168c:	mov	r0, r4
   1168e:	bl	ec18 <__lshift>
   11692:	mov	r6, r0
   11694:	ldr	r3, [sp, #32]
   11696:	cmp	r3, #0
   11698:	bne.w	11a72 <_dtoa_r+0xaf2>
   1169c:	mov	r8, r6
   1169e:	ldr	r3, [sp, #8]
   116a0:	ldr	r7, [sp, #0]
   116a2:	and.w	r2, r3, #1
   116a6:	subs	r3, r7, #1
   116a8:	add	r3, r9
   116aa:	str	r3, [sp, #32]
   116ac:	ldr	r3, [sp, #4]
   116ae:	str	r2, [sp, #40]	; 0x28
   116b0:	orrs	r3, r2
   116b2:	str	r3, [sp, #36]	; 0x24
   116b4:	mov	r1, sl
   116b6:	mov	r0, r5
   116b8:	bl	10e58 <quorem>
   116bc:	mov	r1, r6
   116be:	mov	fp, r0
   116c0:	mov	r0, r5
   116c2:	bl	ed08 <__mcmp>
   116c6:	mov	r2, r8
   116c8:	mov	r1, sl
   116ca:	mov	r9, r0
   116cc:	mov	r0, r4
   116ce:	bl	ed4c <__mdiff>
   116d2:	ldr	r2, [r0, #12]
   116d4:	mov	r1, r0
   116d6:	add.w	r3, fp, #48	; 0x30
   116da:	cmp	r2, #0
   116dc:	bne.n	11764 <_dtoa_r+0x7e4>
   116de:	strd	r0, r3, [sp, #24]
   116e2:	mov	r0, r5
   116e4:	bl	ed08 <__mcmp>
   116e8:	ldr	r1, [sp, #24]
   116ea:	str	r0, [sp, #8]
   116ec:	mov	r0, r4
   116ee:	bl	e848 <_Bfree>
   116f2:	ldr	r2, [sp, #8]
   116f4:	ldr	r3, [sp, #28]
   116f6:	cbnz	r2, 11700 <_dtoa_r+0x780>
   116f8:	ldr	r1, [sp, #36]	; 0x24
   116fa:	cmp	r1, #0
   116fc:	beq.w	11bfc <_dtoa_r+0xc7c>
   11700:	cmp.w	r9, #0
   11704:	blt.w	11a0e <_dtoa_r+0xa8e>
   11708:	ldr	r1, [sp, #4]
   1170a:	orr.w	r9, r9, r1
   1170e:	ldr	r1, [sp, #40]	; 0x28
   11710:	orrs.w	r9, r1, r9
   11714:	beq.w	11a0e <_dtoa_r+0xa8e>
   11718:	cmp	r2, #0
   1171a:	bgt.w	11aaa <_dtoa_r+0xb2a>
   1171e:	ldr	r2, [sp, #32]
   11720:	strb	r3, [r7, #0]
   11722:	add.w	r9, r7, #1
   11726:	cmp	r7, r2
   11728:	mov	fp, r9
   1172a:	beq.w	11ab6 <_dtoa_r+0xb36>
   1172e:	mov	r1, r5
   11730:	movs	r3, #0
   11732:	movs	r2, #10
   11734:	mov	r0, r4
   11736:	bl	e85c <__multadd>
   1173a:	cmp	r6, r8
   1173c:	mov	r5, r0
   1173e:	mov	r1, r6
   11740:	mov.w	r3, #0
   11744:	mov.w	r2, #10
   11748:	mov	r0, r4
   1174a:	beq.n	11772 <_dtoa_r+0x7f2>
   1174c:	bl	e85c <__multadd>
   11750:	mov	r1, r8
   11752:	mov	r6, r0
   11754:	movs	r3, #0
   11756:	movs	r2, #10
   11758:	mov	r0, r4
   1175a:	bl	e85c <__multadd>
   1175e:	mov	r7, r9
   11760:	mov	r8, r0
   11762:	b.n	116b4 <_dtoa_r+0x734>
   11764:	mov	r0, r4
   11766:	str	r3, [sp, #8]
   11768:	bl	e848 <_Bfree>
   1176c:	ldr	r3, [sp, #8]
   1176e:	movs	r2, #1
   11770:	b.n	11700 <_dtoa_r+0x780>
   11772:	bl	e85c <__multadd>
   11776:	mov	r7, r9
   11778:	mov	r6, r0
   1177a:	mov	r8, r0
   1177c:	b.n	116b4 <_dtoa_r+0x734>
   1177e:	ldr	r3, [sp, #4]
   11780:	cmp	r3, #2
   11782:	bgt.n	11868 <_dtoa_r+0x8e8>
   11784:	ldr	r3, [sp, #28]
   11786:	cmp	r3, #0
   11788:	bne.w	11682 <_dtoa_r+0x702>
   1178c:	ldr	r3, [sp, #16]
   1178e:	mov	r1, sl
   11790:	adds	r3, #1
   11792:	mov	r0, r5
   11794:	str	r3, [sp, #16]
   11796:	bl	10e58 <quorem>
   1179a:	ldr.w	fp, [sp]
   1179e:	add.w	r3, r0, #48	; 0x30
   117a2:	strb.w	r3, [fp], #1
   117a6:	movs	r7, #0
   117a8:	b.n	11582 <_dtoa_r+0x602>
   117aa:	mov	r1, sl
   117ac:	mov	r0, r5
   117ae:	bl	ed08 <__mcmp>
   117b2:	cmp	r0, #0
   117b4:	bge.w	1152c <_dtoa_r+0x5ac>
   117b8:	mov	r1, r5
   117ba:	movs	r3, #0
   117bc:	movs	r2, #10
   117be:	mov	r0, r4
   117c0:	bl	e85c <__multadd>
   117c4:	ldr	r3, [sp, #16]
   117c6:	subs	r7, r3, #1
   117c8:	ldr	r3, [sp, #28]
   117ca:	mov	r5, r0
   117cc:	cmp	r3, #0
   117ce:	bne.w	11668 <_dtoa_r+0x6e8>
   117d2:	ldr	r3, [sp, #44]	; 0x2c
   117d4:	cmp	r3, #0
   117d6:	ble.w	11c0a <_dtoa_r+0xc8a>
   117da:	mov	r9, r3
   117dc:	b.n	11542 <_dtoa_r+0x5c2>
   117de:	ldr	r3, [pc, #752]	; (11ad0 <_dtoa_r+0xb50>)
   117e0:	str	r3, [sp, #0]
   117e2:	adds	r3, #3
   117e4:	b.n	11130 <_dtoa_r+0x1b0>
   117e6:	movs	r0, #28
   117e8:	b.n	11610 <_dtoa_r+0x690>
   117ea:	ldrd	r0, r1, [sp, #8]
   117ee:	cmp	r0, #0
   117f0:	bne.w	114dc <_dtoa_r+0x55c>
   117f4:	ubfx	r2, r1, #0, #20
   117f8:	cmp	r2, #0
   117fa:	beq.w	119e6 <_dtoa_r+0xa66>
   117fe:	ldr	r3, [sp, #8]
   11800:	str	r3, [sp, #32]
   11802:	b.n	114e0 <_dtoa_r+0x560>
   11804:	movs	r3, #1
   11806:	str	r3, [sp, #28]
   11808:	ldr	r3, [sp, #16]
   1180a:	add	r3, fp
   1180c:	add.w	r9, r3, #1
   11810:	cmp.w	r9, #1
   11814:	mov	ip, r9
   11816:	str	r3, [sp, #44]	; 0x2c
   11818:	it	lt
   1181a:	movlt.w	ip, #1
   1181e:	movs	r1, #0
   11820:	cmp.w	ip, #23
   11824:	str	r1, [r4, #60]	; 0x3c
   11826:	ble.w	111a2 <_dtoa_r+0x222>
   1182a:	movs	r0, #1
   1182c:	movs	r2, #4
   1182e:	lsls	r2, r2, #1
   11830:	add.w	r3, r2, #20
   11834:	cmp	r3, ip
   11836:	mov	r1, r0
   11838:	add.w	r0, r0, #1
   1183c:	bls.n	1182e <_dtoa_r+0x8ae>
   1183e:	str	r1, [r4, #60]	; 0x3c
   11840:	b.n	111a2 <_dtoa_r+0x222>
   11842:	movs	r3, #1
   11844:	str	r3, [sp, #28]
   11846:	cmp.w	fp, #0
   1184a:	ble.n	118f2 <_dtoa_r+0x972>
   1184c:	str.w	fp, [sp, #44]	; 0x2c
   11850:	mov	r9, fp
   11852:	mov	ip, fp
   11854:	b.n	1181e <_dtoa_r+0x89e>
   11856:	movs	r3, #0
   11858:	str	r3, [sp, #28]
   1185a:	b.n	11808 <_dtoa_r+0x888>
   1185c:	movs	r3, #0
   1185e:	str	r3, [sp, #28]
   11860:	b.n	11846 <_dtoa_r+0x8c6>
   11862:	ldr.w	r9, [sp, #44]	; 0x2c
   11866:	str	r7, [sp, #16]
   11868:	cmp.w	r9, #0
   1186c:	bne.w	113b2 <_dtoa_r+0x432>
   11870:	mov	r1, sl
   11872:	mov	r3, r9
   11874:	movs	r2, #5
   11876:	mov	r0, r4
   11878:	bl	e85c <__multadd>
   1187c:	mov	r1, r0
   1187e:	mov	sl, r0
   11880:	mov	r0, r5
   11882:	bl	ed08 <__mcmp>
   11886:	cmp	r0, #0
   11888:	ble.w	113b2 <_dtoa_r+0x432>
   1188c:	ldr	r3, [sp, #16]
   1188e:	add.w	fp, r3, #1
   11892:	ldr	r3, [sp, #0]
   11894:	movs	r2, #49	; 0x31
   11896:	mov	r8, r3
   11898:	strb.w	r2, [r3], #1
   1189c:	str	r3, [sp, #0]
   1189e:	mov	r1, sl
   118a0:	mov	r0, r4
   118a2:	bl	e848 <_Bfree>
   118a6:	add.w	r3, fp, #1
   118aa:	ldr.w	r9, [sp]
   118ae:	str	r3, [sp, #16]
   118b0:	str.w	r8, [sp]
   118b4:	cmp	r6, #0
   118b6:	bne.w	115d8 <_dtoa_r+0x658>
   118ba:	b.n	115e0 <_dtoa_r+0x660>
   118bc:	sub.w	sl, r3, sl
   118c0:	b.n	1144e <_dtoa_r+0x4ce>
   118c2:	mov	r1, r6
   118c4:	mov	r2, sl
   118c6:	mov	r0, r4
   118c8:	bl	eb58 <__pow5mult>
   118cc:	mov	r2, r5
   118ce:	mov	r1, r0
   118d0:	mov	r6, r0
   118d2:	mov	r0, r4
   118d4:	bl	e9fc <__multiply>
   118d8:	mov	r1, r5
   118da:	mov	r5, r0
   118dc:	mov	r0, r4
   118de:	bl	e848 <_Bfree>
   118e2:	b.n	114ba <_dtoa_r+0x53a>
   118e4:	movs	r0, #2
   118e6:	vmov.f64	d5, d8
   118ea:	b.n	111f0 <_dtoa_r+0x270>
   118ec:	rsb	r0, r0, #60	; 0x3c
   118f0:	b.n	11610 <_dtoa_r+0x690>
   118f2:	mov.w	fp, #1
   118f6:	mov	r9, fp
   118f8:	b.n	1119a <_dtoa_r+0x21a>
   118fa:	bne.n	11904 <_dtoa_r+0x984>
   118fc:	ldr	r3, [sp, #4]
   118fe:	lsls	r3, r3, #31
   11900:	bmi.w	1159c <_dtoa_r+0x61c>
   11904:	mov	r9, fp
   11906:	ldrb.w	r3, [fp, #-1]!
   1190a:	cmp	r3, #48	; 0x30
   1190c:	beq.n	11904 <_dtoa_r+0x984>
   1190e:	b.n	115c0 <_dtoa_r+0x640>
   11910:	ldr	r3, [sp, #16]
   11912:	ldr	r2, [sp, #0]
   11914:	adds	r3, #1
   11916:	str	r3, [sp, #16]
   11918:	movs	r3, #49	; 0x31
   1191a:	strb	r3, [r2, #0]
   1191c:	b.n	115c0 <_dtoa_r+0x640>
   1191e:	cmp.w	sl, #0
   11922:	beq.w	11b6c <_dtoa_r+0xbec>
   11926:	addw	r2, r2, #1075	; 0x433
   1192a:	ldr	r3, [sp, #24]
   1192c:	str	r3, [sp, #36]	; 0x24
   1192e:	add	r3, r2
   11930:	ldr.w	sl, [sp, #32]
   11934:	str	r3, [sp, #24]
   11936:	add	r8, r2
   11938:	b.n	11460 <_dtoa_r+0x4e0>
   1193a:	vmov	s15, r0
   1193e:	vmov.f64	d5, #28	; 0x40e00000  7.0
   11942:	vcvt.f64.s32	d7, s15
   11946:	vfma.f64	d5, d6, d7
   1194a:	vmov	r2, s11
   1194e:	vmov	r0, r1, d5
   11952:	sub.w	r1, r2, #54525952	; 0x3400000
   11956:	vmov	d5, r0, r1
   1195a:	vmov.f64	d7, #20	; 0x40a00000  5.0
   1195e:	vsub.f64	d7, d6, d7
   11962:	vcmpe.f64	d7, d5
   11966:	vmrs	APSR_nzcv, fpscr
   1196a:	bgt.w	11bdc <_dtoa_r+0xc5c>
   1196e:	vneg.f64	d5, d5
   11972:	vcmpe.f64	d7, d5
   11976:	vmrs	APSR_nzcv, fpscr
   1197a:	bpl.w	11374 <_dtoa_r+0x3f4>
   1197e:	mov.w	sl, #0
   11982:	mov	r6, sl
   11984:	b.n	113b2 <_dtoa_r+0x432>
   11986:	beq.w	11b74 <_dtoa_r+0xbf4>
   1198a:	ldr	r3, [sp, #16]
   1198c:	ldr	r1, [pc, #324]	; (11ad4 <_dtoa_r+0xb54>)
   1198e:	negs	r2, r3
   11990:	and.w	r0, r2, #15
   11994:	add.w	r1, r1, r0, lsl #3
   11998:	vldr	d6, [r1]
   1199c:	asrs	r2, r2, #4
   1199e:	vmul.f64	d6, d8, d6
   119a2:	beq.w	11c2a <_dtoa_r+0xcaa>
   119a6:	vmov.f64	d7, d6
   119aa:	ldr	r1, [pc, #300]	; (11ad8 <_dtoa_r+0xb58>)
   119ac:	movs	r6, #0
   119ae:	movs	r0, #2
   119b0:	lsls	r3, r2, #31
   119b2:	bpl.n	119c0 <_dtoa_r+0xa40>
   119b4:	vldr	d5, [r1]
   119b8:	adds	r0, #1
   119ba:	movs	r6, #1
   119bc:	vmul.f64	d7, d7, d5
   119c0:	asrs	r2, r2, #1
   119c2:	add.w	r1, r1, #8
   119c6:	bne.n	119b0 <_dtoa_r+0xa30>
   119c8:	cmp	r6, #0
   119ca:	vseleq.f64	d6, d6, d7
   119ce:	b.n	1120e <_dtoa_r+0x28e>
   119d0:	ldr	r3, [sp, #8]
   119d2:	cmp	r3, #0
   119d4:	bne.w	11646 <_dtoa_r+0x6c6>
   119d8:	ldrd	r0, r1, [sp, #8]
   119dc:	ubfx	r2, r1, #0, #20
   119e0:	cmp	r2, #0
   119e2:	bne.w	11c54 <_dtoa_r+0xcd4>
   119e6:	ldr	r2, [pc, #244]	; (11adc <_dtoa_r+0xb5c>)
   119e8:	ands	r2, r1
   119ea:	cmp	r2, #0
   119ec:	beq.w	11be4 <_dtoa_r+0xc64>
   119f0:	ldr	r3, [sp, #24]
   119f2:	adds	r3, #1
   119f4:	str	r3, [sp, #24]
   119f6:	movs	r3, #1
   119f8:	add.w	r8, r8, #1
   119fc:	str	r3, [sp, #32]
   119fe:	b.n	114e0 <_dtoa_r+0x560>
   11a00:	mov	r1, r5
   11a02:	ldr	r2, [sp, #32]
   11a04:	mov	r0, r4
   11a06:	bl	eb58 <__pow5mult>
   11a0a:	mov	r5, r0
   11a0c:	b.n	114c4 <_dtoa_r+0x544>
   11a0e:	cmp	r2, #0
   11a10:	ble.n	11a38 <_dtoa_r+0xab8>
   11a12:	mov	r1, r5
   11a14:	movs	r2, #1
   11a16:	mov	r0, r4
   11a18:	str	r3, [sp, #4]
   11a1a:	bl	ec18 <__lshift>
   11a1e:	mov	r1, sl
   11a20:	mov	r5, r0
   11a22:	bl	ed08 <__mcmp>
   11a26:	cmp	r0, #0
   11a28:	ldr	r3, [sp, #4]
   11a2a:	ble.w	11bf0 <_dtoa_r+0xc70>
   11a2e:	cmp	r3, #57	; 0x39
   11a30:	beq.w	11bc8 <_dtoa_r+0xc48>
   11a34:	add.w	r3, fp, #49	; 0x31
   11a38:	mov	r9, r7
   11a3a:	strb.w	r3, [r9], #1
   11a3e:	ldr	r3, [sp, #16]
   11a40:	adds	r3, #1
   11a42:	mov	r7, r6
   11a44:	str	r3, [sp, #16]
   11a46:	mov	r6, r8
   11a48:	b.n	115c0 <_dtoa_r+0x640>
   11a4a:	vadd.f64	d8, d8, d8
   11a4e:	vcmpe.f64	d8, d6
   11a52:	vmrs	APSR_nzcv, fpscr
   11a56:	bgt.n	11a6e <_dtoa_r+0xaee>
   11a58:	vcmp.f64	d8, d6
   11a5c:	vmrs	APSR_nzcv, fpscr
   11a60:	bne.w	1141c <_dtoa_r+0x49c>
   11a64:	vmov	r3, s14
   11a68:	lsls	r0, r3, #31
   11a6a:	bpl.w	1141c <_dtoa_r+0x49c>
   11a6e:	ldr	r2, [sp, #0]
   11a70:	b.n	1131c <_dtoa_r+0x39c>
   11a72:	ldr	r1, [r6, #4]
   11a74:	mov	r0, r4
   11a76:	bl	e7fc <_Balloc>
   11a7a:	mov	r7, r0
   11a7c:	cmp	r0, #0
   11a7e:	beq.w	11c3e <_dtoa_r+0xcbe>
   11a82:	ldr	r3, [r6, #16]
   11a84:	adds	r3, #2
   11a86:	lsls	r2, r3, #2
   11a88:	add.w	r1, r6, #12
   11a8c:	adds	r0, #12
   11a8e:	bl	a0a4 <memcpy>
   11a92:	mov	r1, r7
   11a94:	movs	r2, #1
   11a96:	mov	r0, r4
   11a98:	bl	ec18 <__lshift>
   11a9c:	mov	r8, r0
   11a9e:	b.n	1169e <_dtoa_r+0x71e>
   11aa0:	ldr	r3, [sp, #24]
   11aa2:	sub.w	r3, r3, r9
   11aa6:	str	r3, [sp, #36]	; 0x24
   11aa8:	b.n	11460 <_dtoa_r+0x4e0>
   11aaa:	cmp	r3, #57	; 0x39
   11aac:	beq.w	11bc8 <_dtoa_r+0xc48>
   11ab0:	mov	r9, r7
   11ab2:	adds	r3, #1
   11ab4:	b.n	11a3a <_dtoa_r+0xaba>
   11ab6:	ldr	r2, [sp, #16]
   11ab8:	adds	r2, #1
   11aba:	mov	r7, r6
   11abc:	str	r2, [sp, #16]
   11abe:	mov	r6, r8
   11ac0:	b.n	11582 <_dtoa_r+0x602>
   11ac2:	mov	r1, r5
   11ac4:	mov	r0, r4
   11ac6:	bl	eb58 <__pow5mult>
   11aca:	mov	r5, r0
   11acc:	b.n	114c4 <_dtoa_r+0x544>
   11ace:	nop
   11ad0:	.word	0x20000df8
   11ad4:	.word	0x200003a8
   11ad8:	.word	0x20000380
   11adc:	.word	0x7ff00000
   11ae0:	ldr	r3, [pc, #376]	; (11c5c <_dtoa_r+0xcdc>)
   11ae2:	vcvt.s32.f64	s11, d6
   11ae6:	add.w	ip, r3, r2, lsl #3
   11aea:	vldr	d3, [ip, #-8]
   11aee:	vcvt.f64.s32	d7, s11
   11af2:	vsub.f64	d7, d6, d7
   11af6:	vmov	d6, r0, r1
   11afa:	vmov	r1, s11
   11afe:	vmul.f64	d3, d3, d6
   11b02:	ldr	r0, [sp, #0]
   11b04:	adds	r1, #48	; 0x30
   11b06:	cmp	r2, #1
   11b08:	strb.w	r1, [r0], #1
   11b0c:	beq.w	11c16 <_dtoa_r+0xc96>
   11b10:	vmov.f64	d4, #36	; 0x41200000  10.0
   11b14:	ldr	r3, [sp, #0]
   11b16:	adds	r1, r3, r2
   11b18:	vmul.f64	d7, d7, d4
   11b1c:	vcvt.s32.f64	s13, d7
   11b20:	vmov	r3, s13
   11b24:	adds	r3, #48	; 0x30
   11b26:	strb.w	r3, [r0], #1
   11b2a:	cmp	r1, r0
   11b2c:	vcvt.f64.s32	d5, s13
   11b30:	vsub.f64	d7, d7, d5
   11b34:	bne.n	11b18 <_dtoa_r+0xb98>
   11b36:	vmov.f64	d6, #96	; 0x3f000000  0.5
   11b3a:	vadd.f64	d5, d3, d6
   11b3e:	vcmpe.f64	d5, d7
   11b42:	vmrs	APSR_nzcv, fpscr
   11b46:	bmi.w	11310 <_dtoa_r+0x390>
   11b4a:	vsub.f64	d6, d6, d3
   11b4e:	vcmpe.f64	d6, d7
   11b52:	vmrs	APSR_nzcv, fpscr
   11b56:	ble.w	11374 <_dtoa_r+0x3f4>
   11b5a:	mov	r9, r1
   11b5c:	subs	r1, #1
   11b5e:	ldrb.w	r3, [r9, #-1]
   11b62:	cmp	r3, #48	; 0x30
   11b64:	beq.n	11b5a <_dtoa_r+0xbda>
   11b66:	adds	r3, r6, #1
   11b68:	str	r3, [sp, #16]
   11b6a:	b.n	115e0 <_dtoa_r+0x660>
   11b6c:	ldr	r2, [sp, #48]	; 0x30
   11b6e:	rsb	r2, r2, #54	; 0x36
   11b72:	b.n	1192a <_dtoa_r+0x9aa>
   11b74:	movs	r0, #2
   11b76:	vmov.f64	d6, d8
   11b7a:	b.w	1120e <_dtoa_r+0x28e>
   11b7e:	cmp.w	r9, #0
   11b82:	beq.w	1193a <_dtoa_r+0x9ba>
   11b86:	ldr	r2, [sp, #44]	; 0x2c
   11b88:	cmp	r2, #0
   11b8a:	ble.w	11374 <_dtoa_r+0x3f4>
   11b8e:	vmov.f64	d4, #36	; 0x41200000  10.0
   11b92:	vmul.f64	d6, d6, d4
   11b96:	adds	r0, #1
   11b98:	vmov	s15, r0
   11b9c:	ldr	r3, [sp, #16]
   11b9e:	vcvt.f64.s32	d5, s15
   11ba2:	vmov.f64	d7, #28	; 0x40e00000  7.0
   11ba6:	vfma.f64	d7, d6, d5
   11baa:	vmov	ip, s15
   11bae:	vmov	r0, r1, d7
   11bb2:	subs	r6, r3, #1
   11bb4:	sub.w	r1, ip, #54525952	; 0x3400000
   11bb8:	b.w	1124a <_dtoa_r+0x2ca>
   11bbc:	ldr	r3, [sp, #16]
   11bbe:	adds	r3, #1
   11bc0:	str	r3, [sp, #16]
   11bc2:	movs	r3, #49	; 0x31
   11bc4:	b.w	1132a <_dtoa_r+0x3aa>
   11bc8:	ldr	r3, [sp, #16]
   11bca:	mov	fp, r7
   11bcc:	adds	r3, #1
   11bce:	str	r3, [sp, #16]
   11bd0:	movs	r3, #57	; 0x39
   11bd2:	mov	r7, r6
   11bd4:	strb.w	r3, [fp], #1
   11bd8:	mov	r6, r8
   11bda:	b.n	115a0 <_dtoa_r+0x620>
   11bdc:	mov.w	sl, #0
   11be0:	mov	r6, sl
   11be2:	b.n	1188c <_dtoa_r+0x90c>
   11be4:	str	r2, [sp, #32]
   11be6:	b.n	114e0 <_dtoa_r+0x560>
   11be8:	adds	r3, r6, #1
   11bea:	str	r3, [sp, #16]
   11bec:	mov	r9, r1
   11bee:	b.n	115e0 <_dtoa_r+0x660>
   11bf0:	bne.w	11a38 <_dtoa_r+0xab8>
   11bf4:	lsls	r2, r3, #31
   11bf6:	bpl.w	11a38 <_dtoa_r+0xab8>
   11bfa:	b.n	11a2e <_dtoa_r+0xaae>
   11bfc:	cmp	r3, #57	; 0x39
   11bfe:	beq.n	11bc8 <_dtoa_r+0xc48>
   11c00:	cmp.w	r9, #0
   11c04:	bgt.w	11a34 <_dtoa_r+0xab4>
   11c08:	b.n	11a38 <_dtoa_r+0xab8>
   11c0a:	ldr	r3, [sp, #4]
   11c0c:	cmp	r3, #2
   11c0e:	bgt.w	11862 <_dtoa_r+0x8e2>
   11c12:	str	r7, [sp, #16]
   11c14:	b.n	1178c <_dtoa_r+0x80c>
   11c16:	mov	r1, r0
   11c18:	b.n	11b36 <_dtoa_r+0xbb6>
   11c1a:	ldr	r3, [sp, #4]
   11c1c:	cmp	r3, #2
   11c1e:	bgt.w	11862 <_dtoa_r+0x8e2>
   11c22:	ldr.w	r9, [sp, #44]	; 0x2c
   11c26:	str	r7, [sp, #16]
   11c28:	b.n	11682 <_dtoa_r+0x702>
   11c2a:	movs	r0, #2
   11c2c:	b.w	1120e <_dtoa_r+0x28e>
   11c30:	ldr	r3, [pc, #44]	; (11c60 <_dtoa_r+0xce0>)
   11c32:	ldr	r0, [pc, #48]	; (11c64 <_dtoa_r+0xce4>)
   11c34:	movs	r2, #0
   11c36:	movw	r1, #431	; 0x1af
   11c3a:	bl	10da0 <__assert_func>
   11c3e:	ldr	r3, [pc, #32]	; (11c60 <_dtoa_r+0xce0>)
   11c40:	ldr	r0, [pc, #32]	; (11c64 <_dtoa_r+0xce4>)
   11c42:	mov	r2, r7
   11c44:	movw	r1, #751	; 0x2ef
   11c48:	bl	10da0 <__assert_func>
   11c4c:	ldr	r3, [pc, #24]	; (11c68 <_dtoa_r+0xce8>)
   11c4e:	str	r3, [sp, #0]
   11c50:	b.w	10ff8 <_dtoa_r+0x78>
   11c54:	ldr	r3, [sp, #8]
   11c56:	str	r3, [sp, #32]
   11c58:	b.n	1164a <_dtoa_r+0x6ca>
   11c5a:	nop
   11c5c:	.word	0x200003a8
   11c60:	.word	0x20000c78
   11c64:	.word	0x20000dfc
   11c68:	.word	0x20000dec

00011c6c <_wcrtomb_r>:
   11c6c:	push	{r4, r5, r6, lr}
   11c6e:	mov	r5, r0
   11c70:	sub	sp, #16
   11c72:	cbz	r3, 11c8c <_wcrtomb_r+0x20>
   11c74:	mov	r4, r3
   11c76:	cbz	r1, 11c94 <_wcrtomb_r+0x28>
   11c78:	ldr	r3, [pc, #56]	; (11cb4 <_wcrtomb_r+0x48>)
   11c7a:	mov	r0, r5
   11c7c:	ldr.w	r6, [r3, #224]	; 0xe0
   11c80:	mov	r3, r4
   11c82:	blx	r6
   11c84:	adds	r3, r0, #1
   11c86:	beq.n	11ca8 <_wcrtomb_r+0x3c>
   11c88:	add	sp, #16
   11c8a:	pop	{r4, r5, r6, pc}
   11c8c:	add.w	r4, r0, #260	; 0x104
   11c90:	cmp	r1, #0
   11c92:	bne.n	11c78 <_wcrtomb_r+0xc>
   11c94:	ldr	r2, [pc, #28]	; (11cb4 <_wcrtomb_r+0x48>)
   11c96:	mov	r3, r4
   11c98:	ldr.w	r6, [r2, #224]	; 0xe0
   11c9c:	mov	r0, r5
   11c9e:	mov	r2, r1
   11ca0:	add	r1, sp, #4
   11ca2:	blx	r6
   11ca4:	adds	r3, r0, #1
   11ca6:	bne.n	11c88 <_wcrtomb_r+0x1c>
   11ca8:	movs	r2, #0
   11caa:	movs	r3, #138	; 0x8a
   11cac:	str	r2, [r4, #0]
   11cae:	str	r3, [r5, #0]
   11cb0:	add	sp, #16
   11cb2:	pop	{r4, r5, r6, pc}
   11cb4:	.word	0x20001494

00011cb8 <_wcsrtombs_r>:
   11cb8:	push	{r4, lr}
   11cba:	sub	sp, #8
   11cbc:	ldr	r4, [sp, #16]
   11cbe:	strd	r3, r4, [sp]
   11cc2:	mov.w	r3, #4294967295
   11cc6:	bl	13458 <_wcsnrtombs_r>
   11cca:	add	sp, #8
   11ccc:	pop	{r4, pc}
   11cce:	nop

00011cd0 <fiprintf>:
   11cd0:	push	{r1, r2, r3}
   11cd2:	push	{r4, lr}
   11cd4:	sub	sp, #12
   11cd6:	add	r3, sp, #20
   11cd8:	ldr	r4, [pc, #24]	; (11cf4 <fiprintf+0x24>)
   11cda:	ldr.w	r2, [r3], #4
   11cde:	str	r3, [sp, #4]
   11ce0:	mov	r1, r0
   11ce2:	ldr	r0, [r4, #0]
   11ce4:	bl	11e70 <_vfiprintf_r>
   11ce8:	add	sp, #12
   11cea:	ldmia.w	sp!, {r4, lr}
   11cee:	add	sp, #12
   11cf0:	bx	lr
   11cf2:	nop
   11cf4:	.word	0x20001a1c

00011cf8 <__ssprint_r>:
   11cf8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11cfc:	ldr	r3, [r2, #8]
   11cfe:	ldr	r7, [r2, #0]
   11d00:	sub	sp, #12
   11d02:	mov	sl, r2
   11d04:	cmp	r3, #0
   11d06:	beq.n	11dea <__ssprint_r+0xf2>
   11d08:	mov	r9, r0
   11d0a:	ldr	r2, [r1, #8]
   11d0c:	ldr	r0, [r1, #0]
   11d0e:	mov	r4, r1
   11d10:	adds	r7, #8
   11d12:	b.n	11d9c <__ssprint_r+0xa4>
   11d14:	ldrh	r3, [r4, #12]
   11d16:	tst.w	r3, #1152	; 0x480
   11d1a:	beq.n	11d7a <__ssprint_r+0x82>
   11d1c:	ldrd	r1, r6, [r4, #16]
   11d20:	sub.w	r8, r0, r1
   11d24:	add.w	r6, r6, r6, lsl #1
   11d28:	add.w	r6, r6, r6, lsr #31
   11d2c:	add.w	r0, r8, #1
   11d30:	asrs	r6, r6, #1
   11d32:	add	r0, r5
   11d34:	cmp	r0, r6
   11d36:	mov	r2, r6
   11d38:	itt	hi
   11d3a:	movhi	r6, r0
   11d3c:	movhi	r2, r6
   11d3e:	lsls	r3, r3, #21
   11d40:	bpl.n	11db2 <__ssprint_r+0xba>
   11d42:	mov	r1, r2
   11d44:	mov	r0, r9
   11d46:	bl	d230 <_malloc_r>
   11d4a:	str	r0, [sp, #4]
   11d4c:	cmp	r0, #0
   11d4e:	beq.n	11dc6 <__ssprint_r+0xce>
   11d50:	mov	r2, r8
   11d52:	ldr	r1, [r4, #16]
   11d54:	bl	a0a4 <memcpy>
   11d58:	ldrh	r2, [r4, #12]
   11d5a:	ldr	r3, [sp, #4]
   11d5c:	bic.w	r2, r2, #1152	; 0x480
   11d60:	orr.w	r2, r2, #128	; 0x80
   11d64:	strh	r2, [r4, #12]
   11d66:	sub.w	r2, r6, r8
   11d6a:	add.w	r0, r3, r8
   11d6e:	str	r6, [r4, #20]
   11d70:	str	r2, [r4, #8]
   11d72:	str	r3, [r4, #16]
   11d74:	str	r0, [r4, #0]
   11d76:	mov	r6, r5
   11d78:	mov	r8, r5
   11d7a:	mov	r2, r8
   11d7c:	mov	r1, fp
   11d7e:	bl	df4c <memmove>
   11d82:	ldr.w	r3, [sl, #8]
   11d86:	ldr	r2, [r4, #8]
   11d88:	ldr	r0, [r4, #0]
   11d8a:	subs	r2, r2, r6
   11d8c:	add	r0, r8
   11d8e:	subs	r3, r3, r5
   11d90:	str	r2, [r4, #8]
   11d92:	str	r0, [r4, #0]
   11d94:	str.w	r3, [sl, #8]
   11d98:	cbz	r3, 11dea <__ssprint_r+0xf2>
   11d9a:	adds	r7, #8
   11d9c:	ldrd	fp, r5, [r7, #-8]
   11da0:	cmp	r5, #0
   11da2:	beq.n	11d9a <__ssprint_r+0xa2>
   11da4:	cmp	r2, r5
   11da6:	mov	r6, r2
   11da8:	mov	r8, r2
   11daa:	bls.n	11d14 <__ssprint_r+0x1c>
   11dac:	mov	r6, r5
   11dae:	mov	r8, r5
   11db0:	b.n	11d7a <__ssprint_r+0x82>
   11db2:	mov	r0, r9
   11db4:	bl	d7a8 <_realloc_r>
   11db8:	mov	r3, r0
   11dba:	cmp	r0, #0
   11dbc:	bne.n	11d66 <__ssprint_r+0x6e>
   11dbe:	ldr	r1, [r4, #16]
   11dc0:	mov	r0, r9
   11dc2:	bl	e5c4 <_free_r>
   11dc6:	ldrh	r3, [r4, #12]
   11dc8:	movs	r2, #12
   11dca:	orr.w	r3, r3, #64	; 0x40
   11dce:	str.w	r2, [r9]
   11dd2:	mov.w	r0, #4294967295
   11dd6:	strh	r3, [r4, #12]
   11dd8:	movs	r2, #0
   11dda:	movs	r3, #0
   11ddc:	str.w	r2, [sl, #8]
   11de0:	str.w	r3, [sl, #4]
   11de4:	add	sp, #12
   11de6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11dea:	movs	r0, #0
   11dec:	movs	r3, #0
   11dee:	str.w	r3, [sl, #4]
   11df2:	add	sp, #12
   11df4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00011df8 <__sprint_r.part.0>:
   11df8:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11dfc:	ldr	r3, [r1, #100]	; 0x64
   11dfe:	lsls	r4, r3, #18
   11e00:	mov	r8, r2
   11e02:	bpl.n	11e60 <__sprint_r.part.0+0x68>
   11e04:	ldr	r3, [r2, #8]
   11e06:	ldr	r2, [r2, #0]
   11e08:	cbz	r3, 11e5c <__sprint_r.part.0+0x64>
   11e0a:	mov	fp, r1
   11e0c:	mov	r6, r0
   11e0e:	add.w	r9, r2, #8
   11e12:	ldrd	r5, sl, [r9, #-8]
   11e16:	movs.w	r7, sl, lsr #2
   11e1a:	beq.n	11e48 <__sprint_r.part.0+0x50>
   11e1c:	subs	r5, #4
   11e1e:	movs	r4, #0
   11e20:	b.n	11e26 <__sprint_r.part.0+0x2e>
   11e22:	cmp	r7, r4
   11e24:	beq.n	11e44 <__sprint_r.part.0+0x4c>
   11e26:	ldr.w	r1, [r5, #4]!
   11e2a:	mov	r2, fp
   11e2c:	mov	r0, r6
   11e2e:	bl	132e8 <_fputwc_r>
   11e32:	adds	r3, r0, #1
   11e34:	add.w	r4, r4, #1
   11e38:	bne.n	11e22 <__sprint_r.part.0+0x2a>
   11e3a:	movs	r3, #0
   11e3c:	strd	r3, r3, [r8, #4]
   11e40:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11e44:	ldr.w	r3, [r8, #8]
   11e48:	bic.w	sl, sl, #3
   11e4c:	sub.w	r3, r3, sl
   11e50:	str.w	r3, [r8, #8]
   11e54:	add.w	r9, r9, #8
   11e58:	cmp	r3, #0
   11e5a:	bne.n	11e12 <__sprint_r.part.0+0x1a>
   11e5c:	movs	r0, #0
   11e5e:	b.n	11e3a <__sprint_r.part.0+0x42>
   11e60:	bl	12e7c <__sfvwrite_r>
   11e64:	movs	r3, #0
   11e66:	strd	r3, r3, [r8, #4]
   11e6a:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11e6e:	nop

00011e70 <_vfiprintf_r>:
   11e70:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11e74:	vpush	{d8}
   11e78:	sub	sp, #276	; 0x114
   11e7a:	add.w	sl, sp, #80	; 0x50
   11e7e:	mov	fp, r0
   11e80:	vmov	s16, r1
   11e84:	mov	r6, r2
   11e86:	movs	r1, #0
   11e88:	movs	r2, #8
   11e8a:	mov	r0, sl
   11e8c:	mov	r4, r3
   11e8e:	str	r3, [sp, #28]
   11e90:	bl	e044 <memset>
   11e94:	cmp.w	fp, #0
   11e98:	beq.n	11ea4 <_vfiprintf_r+0x34>
   11e9a:	ldr.w	r3, [fp, #52]	; 0x34
   11e9e:	cmp	r3, #0
   11ea0:	beq.w	12be4 <_vfiprintf_r+0xd74>
   11ea4:	vmov	r2, s16
   11ea8:	ldr	r3, [r2, #100]	; 0x64
   11eaa:	lsls	r3, r3, #31
   11eac:	bpl.w	128d6 <_vfiprintf_r+0xa66>
   11eb0:	ldrsh.w	r1, [r2, #12]
   11eb4:	uxth	r2, r1
   11eb6:	lsls	r5, r2, #18
   11eb8:	bmi.n	11ed2 <_vfiprintf_r+0x62>
   11eba:	vmov	r3, s16
   11ebe:	orr.w	r1, r1, #8192	; 0x2000
   11ec2:	strh	r1, [r3, #12]
   11ec4:	ldr	r3, [r3, #100]	; 0x64
   11ec6:	uxth	r2, r1
   11ec8:	vmov	r1, s16
   11ecc:	bic.w	r3, r3, #8192	; 0x2000
   11ed0:	str	r3, [r1, #100]	; 0x64
   11ed2:	lsls	r0, r2, #28
   11ed4:	bpl.w	120e2 <_vfiprintf_r+0x272>
   11ed8:	vmov	r3, s16
   11edc:	ldr	r3, [r3, #16]
   11ede:	cmp	r3, #0
   11ee0:	beq.w	120e2 <_vfiprintf_r+0x272>
   11ee4:	and.w	r3, r2, #26
   11ee8:	cmp	r3, #10
   11eea:	beq.w	12102 <_vfiprintf_r+0x292>
   11eee:	movs	r3, #0
   11ef0:	strd	r3, r3, [sp, #100]	; 0x64
   11ef4:	strd	r3, r3, [sp, #52]	; 0x34
   11ef8:	add	r2, sp, #108	; 0x6c
   11efa:	str	r3, [sp, #48]	; 0x30
   11efc:	str	r2, [sp, #96]	; 0x60
   11efe:	mov	r9, r2
   11f00:	str	r3, [sp, #44]	; 0x2c
   11f02:	str	r3, [sp, #20]
   11f04:	mov	r8, r6
   11f06:	mov	r4, r8
   11f08:	ldr	r3, [pc, #672]	; (121ac <_vfiprintf_r+0x33c>)
   11f0a:	ldr.w	r5, [r3, #228]	; 0xe4
   11f0e:	bl	e1d8 <__locale_mb_cur_max>
   11f12:	mov	r2, r4
   11f14:	mov	r3, r0
   11f16:	add	r1, sp, #72	; 0x48
   11f18:	str.w	sl, [sp]
   11f1c:	mov	r0, fp
   11f1e:	blx	r5
   11f20:	cmp	r0, #0
   11f22:	beq.w	121b0 <_vfiprintf_r+0x340>
   11f26:	blt.w	1219c <_vfiprintf_r+0x32c>
   11f2a:	ldr	r2, [sp, #72]	; 0x48
   11f2c:	cmp	r2, #37	; 0x25
   11f2e:	mov	r3, r0
   11f30:	beq.n	11f36 <_vfiprintf_r+0xc6>
   11f32:	add	r4, r3
   11f34:	b.n	11f08 <_vfiprintf_r+0x98>
   11f36:	subs.w	r6, r4, r8
   11f3a:	mov	r5, r0
   11f3c:	bne.w	121b8 <_vfiprintf_r+0x348>
   11f40:	movs	r3, #0
   11f42:	ldrb	r1, [r4, #1]
   11f44:	strb.w	r3, [sp, #67]	; 0x43
   11f48:	add.w	r8, r4, #1
   11f4c:	str	r3, [sp, #24]
   11f4e:	mov.w	r7, #4294967295
   11f52:	mov	r6, r3
   11f54:	movs	r4, #43	; 0x2b
   11f56:	add.w	r8, r8, #1
   11f5a:	sub.w	r3, r1, #32
   11f5e:	cmp	r3, #90	; 0x5a
   11f60:	bhi.w	12254 <_vfiprintf_r+0x3e4>
   11f64:	tbh	[pc, r3, lsl #1]
   11f68:	.word	0x017602b5
   11f6c:	.word	0x02b00176
   11f70:	.word	0x01760176
   11f74:	.word	0x006a0176
   11f78:	.word	0x01760176
   11f7c:	.word	0x028d027d
   11f80:	.word	0x02880176
   11f84:	.word	0x01760297
   11f88:	.word	0x005b0292
   11f8c:	.word	0x005b005b
   11f90:	.word	0x005b005b
   11f94:	.word	0x005b005b
   11f98:	.word	0x005b005b
   11f9c:	.word	0x01760176
   11fa0:	.word	0x01760176
   11fa4:	.word	0x01760176
   11fa8:	.word	0x01760176
   11fac:	.word	0x025c0176
   11fb0:	.word	0x01760084
   11fb4:	.word	0x01760176
   11fb8:	.word	0x01760176
   11fbc:	.word	0x01760176
   11fc0:	.word	0x01760176
   11fc4:	.word	0x00e80176
   11fc8:	.word	0x01760176
   11fcc:	.word	0x02330176
   11fd0:	.word	0x02da0176
   11fd4:	.word	0x01760176
   11fd8:	.word	0x0176058b
   11fdc:	.word	0x01760176
   11fe0:	.word	0x01760176
   11fe4:	.word	0x01760176
   11fe8:	.word	0x01760176
   11fec:	.word	0x025c0176
   11ff0:	.word	0x01760086
   11ff4:	.word	0x01760176
   11ff8:	.word	0x008602cd
   11ffc:	.word	0x0176007f
   12000:	.word	0x017602c0
   12004:	.word	0x00ea02fd
   12008:	.word	0x007f02ed
   1200c:	.word	0x02330176
   12010:	.word	0x0569007c
   12014:	.word	0x01760176
   12018:	.word	0x0176056b
   1201c:	.short	0x007c
   1201e:	sub.w	r3, r1, #48	; 0x30
   12022:	movs	r2, #0
   12024:	ldrb.w	r1, [r8], #1
   12028:	add.w	r2, r2, r2, lsl #2
   1202c:	add.w	r2, r3, r2, lsl #1
   12030:	sub.w	r3, r1, #48	; 0x30
   12034:	cmp	r3, #9
   12036:	bls.n	12024 <_vfiprintf_r+0x1b4>
   12038:	str	r2, [sp, #24]
   1203a:	b.n	11f5a <_vfiprintf_r+0xea>
   1203c:	mov	r0, fp
   1203e:	bl	10d20 <_localeconv_r>
   12042:	ldr	r3, [r0, #4]
   12044:	str	r3, [sp, #52]	; 0x34
   12046:	mov	r0, r3
   12048:	bl	e3c0 <strlen>
   1204c:	str	r0, [sp, #56]	; 0x38
   1204e:	mov	r5, r0
   12050:	mov	r0, fp
   12052:	bl	10d20 <_localeconv_r>
   12056:	ldr	r3, [r0, #8]
   12058:	str	r3, [sp, #44]	; 0x2c
   1205a:	cmp	r5, #0
   1205c:	bne.w	12a0c <_vfiprintf_r+0xb9c>
   12060:	ldrb.w	r1, [r8]
   12064:	b.n	11f56 <_vfiprintf_r+0xe6>
   12066:	ldrb.w	r1, [r8]
   1206a:	orr.w	r6, r6, #32
   1206e:	b.n	11f56 <_vfiprintf_r+0xe6>
   12070:	orr.w	r6, r6, #16
   12074:	lsls	r4, r6, #26
   12076:	bpl.w	12396 <_vfiprintf_r+0x526>
   1207a:	ldr	r3, [sp, #28]
   1207c:	adds	r3, #7
   1207e:	bic.w	r3, r3, #7
   12082:	mov	r2, r3
   12084:	ldr	r1, [r3, #4]
   12086:	ldr.w	r3, [r2], #8
   1208a:	str	r2, [sp, #28]
   1208c:	mov	r2, r1
   1208e:	cmp	r1, #0
   12090:	blt.w	12974 <_vfiprintf_r+0xb04>
   12094:	adds	r1, r7, #1
   12096:	beq.w	12bde <_vfiprintf_r+0xd6e>
   1209a:	bic.w	r1, r6, #128	; 0x80
   1209e:	str	r1, [sp, #12]
   120a0:	orrs.w	r1, r3, r2
   120a4:	beq.w	12926 <_vfiprintf_r+0xab6>
   120a8:	cmp	r3, #10
   120aa:	sbcs.w	r1, r2, #0
   120ae:	bcs.w	12b34 <_vfiprintf_r+0xcc4>
   120b2:	adds	r3, #48	; 0x30
   120b4:	strb.w	r3, [sp, #271]	; 0x10f
   120b8:	ldr	r6, [sp, #12]
   120ba:	movs	r3, #1
   120bc:	str	r3, [sp, #16]
   120be:	addw	r4, sp, #271	; 0x10f
   120c2:	ldr	r3, [sp, #16]
   120c4:	cmp	r3, r7
   120c6:	it	lt
   120c8:	movlt	r3, r7
   120ca:	str	r3, [sp, #12]
   120cc:	movs	r3, #0
   120ce:	str	r3, [sp, #32]
   120d0:	ldrb.w	r3, [sp, #67]	; 0x43
   120d4:	cmp	r3, #0
   120d6:	beq.w	12270 <_vfiprintf_r+0x400>
   120da:	ldr	r3, [sp, #12]
   120dc:	adds	r3, #1
   120de:	str	r3, [sp, #12]
   120e0:	b.n	12270 <_vfiprintf_r+0x400>
   120e2:	vmov	r1, s16
   120e6:	mov	r0, fp
   120e8:	vmov	r5, s16
   120ec:	bl	13170 <__swsetup_r>
   120f0:	cmp	r0, #0
   120f2:	bne.w	12d9a <_vfiprintf_r+0xf2a>
   120f6:	ldrh	r2, [r5, #12]
   120f8:	and.w	r3, r2, #26
   120fc:	cmp	r3, #10
   120fe:	bne.w	11eee <_vfiprintf_r+0x7e>
   12102:	vmov	r1, s16
   12106:	ldrsh.w	r3, [r1, #14]
   1210a:	cmp	r3, #0
   1210c:	blt.w	11eee <_vfiprintf_r+0x7e>
   12110:	ldr	r3, [r1, #100]	; 0x64
   12112:	lsls	r3, r3, #31
   12114:	bmi.n	1211c <_vfiprintf_r+0x2ac>
   12116:	lsls	r7, r2, #22
   12118:	bpl.w	12d40 <_vfiprintf_r+0xed0>
   1211c:	vmov	r1, s16
   12120:	mov	r3, r4
   12122:	mov	r2, r6
   12124:	mov	r0, fp
   12126:	bl	12dfc <__sbprintf>
   1212a:	str	r0, [sp, #20]
   1212c:	ldr	r0, [sp, #20]
   1212e:	add	sp, #276	; 0x114
   12130:	vpop	{d8}
   12134:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12138:	orr.w	r6, r6, #16
   1213c:	ands.w	r2, r6, #32
   12140:	beq.w	123b0 <_vfiprintf_r+0x540>
   12144:	ldr	r3, [sp, #28]
   12146:	adds	r3, #7
   12148:	bic.w	r3, r3, #7
   1214c:	mov	r1, r3
   1214e:	ldr	r2, [r3, #4]
   12150:	ldr.w	r3, [r1], #8
   12154:	str	r1, [sp, #28]
   12156:	bic.w	r1, r6, #1024	; 0x400
   1215a:	str	r1, [sp, #12]
   1215c:	movs	r1, #0
   1215e:	movs	r0, #0
   12160:	strb.w	r0, [sp, #67]	; 0x43
   12164:	adds	r0, r7, #1
   12166:	beq.w	1258a <_vfiprintf_r+0x71a>
   1216a:	ldr	r0, [sp, #12]
   1216c:	bic.w	r6, r0, #128	; 0x80
   12170:	orrs.w	r0, r3, r2
   12174:	bne.w	12588 <_vfiprintf_r+0x718>
   12178:	cmp	r7, #0
   1217a:	bne.w	12bee <_vfiprintf_r+0xd7e>
   1217e:	cmp	r1, #0
   12180:	bne.w	1292e <_vfiprintf_r+0xabe>
   12184:	ldr	r3, [sp, #12]
   12186:	ands.w	r3, r3, #1
   1218a:	str	r3, [sp, #16]
   1218c:	beq.w	129b2 <_vfiprintf_r+0xb42>
   12190:	movs	r3, #48	; 0x30
   12192:	strb.w	r3, [sp, #271]	; 0x10f
   12196:	addw	r4, sp, #271	; 0x10f
   1219a:	b.n	120c2 <_vfiprintf_r+0x252>
   1219c:	movs	r2, #8
   1219e:	movs	r1, #0
   121a0:	mov	r0, sl
   121a2:	bl	e044 <memset>
   121a6:	movs	r3, #1
   121a8:	add	r4, r3
   121aa:	b.n	11f08 <_vfiprintf_r+0x98>
   121ac:	.word	0x20001494
   121b0:	subs.w	r6, r4, r8
   121b4:	mov	r5, r0
   121b6:	beq.n	121f0 <_vfiprintf_r+0x380>
   121b8:	ldr	r3, [sp, #100]	; 0x64
   121ba:	ldr	r2, [sp, #104]	; 0x68
   121bc:	adds	r3, #1
   121be:	add	r2, r6
   121c0:	cmp	r3, #7
   121c2:	strd	r8, r6, [r9]
   121c6:	str	r2, [sp, #104]	; 0x68
   121c8:	str	r3, [sp, #100]	; 0x64
   121ca:	ble.n	12206 <_vfiprintf_r+0x396>
   121cc:	cmp	r2, #0
   121ce:	beq.w	1291e <_vfiprintf_r+0xaae>
   121d2:	vmov	r1, s16
   121d6:	add	r2, sp, #96	; 0x60
   121d8:	mov	r0, fp
   121da:	bl	11df8 <__sprint_r.part.0>
   121de:	cbnz	r0, 1222a <_vfiprintf_r+0x3ba>
   121e0:	add.w	r9, sp, #108	; 0x6c
   121e4:	ldr	r3, [sp, #20]
   121e6:	add	r3, r6
   121e8:	str	r3, [sp, #20]
   121ea:	cmp	r5, #0
   121ec:	bne.w	11f40 <_vfiprintf_r+0xd0>
   121f0:	ldr	r3, [sp, #104]	; 0x68
   121f2:	cmp	r3, #0
   121f4:	bne.w	12d7a <_vfiprintf_r+0xf0a>
   121f8:	vmov	r3, s16
   121fc:	movs	r2, #0
   121fe:	ldrsh.w	r3, [r3, #12]
   12202:	str	r2, [sp, #100]	; 0x64
   12204:	b.n	12232 <_vfiprintf_r+0x3c2>
   12206:	add.w	r9, r9, #8
   1220a:	b.n	121e4 <_vfiprintf_r+0x374>
   1220c:	vmov	r1, s16
   12210:	add	r2, sp, #96	; 0x60
   12212:	mov	r0, fp
   12214:	bl	11df8 <__sprint_r.part.0>
   12218:	cmp	r0, #0
   1221a:	beq.w	1236a <_vfiprintf_r+0x4fa>
   1221e:	ldr	r3, [sp, #32]
   12220:	cbz	r3, 1222a <_vfiprintf_r+0x3ba>
   12222:	ldr	r1, [sp, #32]
   12224:	mov	r0, fp
   12226:	bl	e5c4 <_free_r>
   1222a:	vmov	r3, s16
   1222e:	ldrsh.w	r3, [r3, #12]
   12232:	vmov	r2, s16
   12236:	ldr	r2, [r2, #100]	; 0x64
   12238:	tst.w	r2, #1
   1223c:	uxth	r2, r3
   1223e:	beq.w	12382 <_vfiprintf_r+0x512>
   12242:	lsls	r0, r2, #25
   12244:	bmi.w	12dac <_vfiprintf_r+0xf3c>
   12248:	ldr	r0, [sp, #20]
   1224a:	add	sp, #276	; 0x114
   1224c:	vpop	{d8}
   12250:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12254:	cmp	r1, #0
   12256:	beq.n	121f0 <_vfiprintf_r+0x380>
   12258:	movs	r3, #0
   1225a:	strb.w	r3, [sp, #67]	; 0x43
   1225e:	movs	r3, #1
   12260:	strd	r3, r3, [sp, #12]
   12264:	strb.w	r1, [sp, #172]	; 0xac
   12268:	add	r4, sp, #172	; 0xac
   1226a:	movs	r3, #0
   1226c:	str	r3, [sp, #32]
   1226e:	mov	r7, r3
   12270:	ands.w	r3, r6, #2
   12274:	str	r3, [sp, #36]	; 0x24
   12276:	beq.n	1227e <_vfiprintf_r+0x40e>
   12278:	ldr	r3, [sp, #12]
   1227a:	adds	r3, #2
   1227c:	str	r3, [sp, #12]
   1227e:	ands.w	r3, r6, #132	; 0x84
   12282:	str	r3, [sp, #40]	; 0x28
   12284:	bne.n	12292 <_vfiprintf_r+0x422>
   12286:	ldr	r3, [sp, #24]
   12288:	ldr	r2, [sp, #12]
   1228a:	subs	r5, r3, r2
   1228c:	cmp	r5, #0
   1228e:	bgt.w	12788 <_vfiprintf_r+0x918>
   12292:	ldrd	r0, r3, [sp, #100]	; 0x64
   12296:	adds	r1, r0, #1
   12298:	ldrb.w	r2, [sp, #67]	; 0x43
   1229c:	cbz	r2, 122c0 <_vfiprintf_r+0x450>
   1229e:	movs	r2, #1
   122a0:	adds	r3, #1
   122a2:	str.w	r2, [r9, #4]
   122a6:	cmp	r1, #7
   122a8:	add.w	r2, sp, #67	; 0x43
   122ac:	strd	r1, r3, [sp, #100]	; 0x64
   122b0:	str.w	r2, [r9]
   122b4:	bgt.w	1274c <_vfiprintf_r+0x8dc>
   122b8:	mov	r0, r1
   122ba:	add.w	r9, r9, #8
   122be:	adds	r1, #1
   122c0:	ldr	r2, [sp, #36]	; 0x24
   122c2:	cbz	r2, 122fe <_vfiprintf_r+0x48e>
   122c4:	add	r2, sp, #68	; 0x44
   122c6:	adds	r3, #2
   122c8:	str.w	r2, [r9]
   122cc:	cmp	r1, #7
   122ce:	mov.w	r2, #2
   122d2:	strd	r1, r3, [sp, #100]	; 0x64
   122d6:	str.w	r2, [r9, #4]
   122da:	ble.w	1277e <_vfiprintf_r+0x90e>
   122de:	cmp	r3, #0
   122e0:	beq.w	1296a <_vfiprintf_r+0xafa>
   122e4:	vmov	r1, s16
   122e8:	add	r2, sp, #96	; 0x60
   122ea:	mov	r0, fp
   122ec:	bl	11df8 <__sprint_r.part.0>
   122f0:	cmp	r0, #0
   122f2:	bne.n	1221e <_vfiprintf_r+0x3ae>
   122f4:	ldrd	r0, r3, [sp, #100]	; 0x64
   122f8:	add.w	r9, sp, #108	; 0x6c
   122fc:	adds	r1, r0, #1
   122fe:	ldr	r2, [sp, #40]	; 0x28
   12300:	cmp	r2, #128	; 0x80
   12302:	beq.w	1260e <_vfiprintf_r+0x79e>
   12306:	ldr	r2, [sp, #16]
   12308:	subs	r5, r7, r2
   1230a:	cmp	r5, #0
   1230c:	bgt.w	126be <_vfiprintf_r+0x84e>
   12310:	ldr	r2, [sp, #16]
   12312:	str.w	r4, [r9]
   12316:	add	r3, r2
   12318:	cmp	r1, #7
   1231a:	strd	r1, r3, [sp, #100]	; 0x64
   1231e:	str.w	r2, [r9, #4]
   12322:	ble.w	12602 <_vfiprintf_r+0x792>
   12326:	cmp	r3, #0
   12328:	beq.w	12816 <_vfiprintf_r+0x9a6>
   1232c:	vmov	r1, s16
   12330:	add	r2, sp, #96	; 0x60
   12332:	mov	r0, fp
   12334:	bl	11df8 <__sprint_r.part.0>
   12338:	cmp	r0, #0
   1233a:	bne.w	1221e <_vfiprintf_r+0x3ae>
   1233e:	ldr	r3, [sp, #104]	; 0x68
   12340:	add.w	r9, sp, #108	; 0x6c
   12344:	lsls	r5, r6, #29
   12346:	bpl.n	12354 <_vfiprintf_r+0x4e4>
   12348:	ldr	r2, [sp, #24]
   1234a:	ldr	r1, [sp, #12]
   1234c:	subs	r4, r2, r1
   1234e:	cmp	r4, #0
   12350:	bgt.w	1282a <_vfiprintf_r+0x9ba>
   12354:	ldrd	r2, r1, [sp, #20]
   12358:	ldr	r0, [sp, #12]
   1235a:	cmp	r1, r0
   1235c:	ite	ge
   1235e:	addge	r2, r2, r1
   12360:	addlt	r2, r2, r0
   12362:	str	r2, [sp, #20]
   12364:	cmp	r3, #0
   12366:	bne.w	1220c <_vfiprintf_r+0x39c>
   1236a:	ldr	r1, [sp, #32]
   1236c:	movs	r3, #0
   1236e:	str	r3, [sp, #100]	; 0x64
   12370:	cmp	r1, #0
   12372:	beq.w	12608 <_vfiprintf_r+0x798>
   12376:	mov	r0, fp
   12378:	bl	e5c4 <_free_r>
   1237c:	add.w	r9, sp, #108	; 0x6c
   12380:	b.n	11f06 <_vfiprintf_r+0x96>
   12382:	lsls	r4, r3, #22
   12384:	bmi.w	12242 <_vfiprintf_r+0x3d2>
   12388:	vmov	r4, s16
   1238c:	ldr	r0, [r4, #88]	; 0x58
   1238e:	bl	e310 <__retarget_lock_release_recursive>
   12392:	ldrh	r2, [r4, #12]
   12394:	b.n	12242 <_vfiprintf_r+0x3d2>
   12396:	lsls	r0, r6, #27
   12398:	ldr	r2, [sp, #28]
   1239a:	bmi.w	129dc <_vfiprintf_r+0xb6c>
   1239e:	lsls	r1, r6, #25
   123a0:	bpl.w	129d6 <_vfiprintf_r+0xb66>
   123a4:	ldrsh.w	r3, [r2], #4
   123a8:	str	r2, [sp, #28]
   123aa:	asrs	r2, r3, #31
   123ac:	mov	r1, r2
   123ae:	b.n	1208e <_vfiprintf_r+0x21e>
   123b0:	ands.w	r3, r6, #16
   123b4:	ldr	r1, [sp, #28]
   123b6:	bne.w	129cc <_vfiprintf_r+0xb5c>
   123ba:	ands.w	r0, r6, #64	; 0x40
   123be:	beq.w	129c4 <_vfiprintf_r+0xb54>
   123c2:	mov	r2, r3
   123c4:	ldr.w	r3, [r1], #4
   123c8:	str	r1, [sp, #28]
   123ca:	uxth	r3, r3
   123cc:	b.n	12156 <_vfiprintf_r+0x2e6>
   123ce:	ldr	r3, [sp, #28]
   123d0:	mov	r2, r3
   123d2:	movs	r3, #0
   123d4:	strb.w	r3, [sp, #67]	; 0x43
   123d8:	mov	r3, r2
   123da:	ldr.w	r4, [r3], #4
   123de:	str	r3, [sp, #12]
   123e0:	cmp	r4, #0
   123e2:	beq.w	12c0a <_vfiprintf_r+0xd9a>
   123e6:	cmp	r1, #83	; 0x53
   123e8:	beq.w	12ab6 <_vfiprintf_r+0xc46>
   123ec:	ands.w	r5, r6, #16
   123f0:	bne.w	12ab6 <_vfiprintf_r+0xc46>
   123f4:	adds	r3, r7, #1
   123f6:	beq.w	12d60 <_vfiprintf_r+0xef0>
   123fa:	mov	r2, r7
   123fc:	mov	r1, r5
   123fe:	mov	r0, r4
   12400:	bl	e320 <memchr>
   12404:	str	r0, [sp, #32]
   12406:	cmp	r0, #0
   12408:	beq.w	12d4a <_vfiprintf_r+0xeda>
   1240c:	subs	r3, r0, r4
   1240e:	ldr	r2, [sp, #12]
   12410:	str	r3, [sp, #16]
   12412:	bic.w	r3, r3, r3, asr #31
   12416:	mov	r7, r5
   12418:	str	r2, [sp, #28]
   1241a:	str	r3, [sp, #12]
   1241c:	str	r5, [sp, #32]
   1241e:	b.n	120d0 <_vfiprintf_r+0x260>
   12420:	cmp	r1, #67	; 0x43
   12422:	beq.n	1242a <_vfiprintf_r+0x5ba>
   12424:	lsls	r5, r6, #27
   12426:	bpl.w	12a84 <_vfiprintf_r+0xc14>
   1242a:	ldr	r5, [sp, #28]
   1242c:	movs	r2, #8
   1242e:	movs	r1, #0
   12430:	add	r0, sp, #88	; 0x58
   12432:	add	r4, sp, #172	; 0xac
   12434:	bl	e044 <memset>
   12438:	add	r3, sp, #88	; 0x58
   1243a:	ldr.w	r2, [r5], #4
   1243e:	mov	r1, r4
   12440:	mov	r0, fp
   12442:	bl	11c6c <_wcrtomb_r>
   12446:	mov	r3, r0
   12448:	adds	r3, #1
   1244a:	str	r0, [sp, #16]
   1244c:	beq.w	12db6 <_vfiprintf_r+0xf46>
   12450:	ldr	r3, [sp, #16]
   12452:	str	r5, [sp, #28]
   12454:	bic.w	r3, r3, r3, asr #31
   12458:	str	r3, [sp, #12]
   1245a:	movs	r3, #0
   1245c:	strb.w	r3, [sp, #67]	; 0x43
   12460:	b.n	1226a <_vfiprintf_r+0x3fa>
   12462:	ldr	r3, [sp, #28]
   12464:	ldr.w	r2, [r3], #4
   12468:	str	r2, [sp, #24]
   1246a:	cmp	r2, #0
   1246c:	bge.w	129a8 <_vfiprintf_r+0xb38>
   12470:	ldr	r2, [sp, #24]
   12472:	negs	r2, r2
   12474:	strd	r2, r3, [sp, #24]
   12478:	ldrb.w	r1, [r8]
   1247c:	orr.w	r6, r6, #4
   12480:	b.n	11f56 <_vfiprintf_r+0xe6>
   12482:	ldrb.w	r1, [r8]
   12486:	strb.w	r4, [sp, #67]	; 0x43
   1248a:	b.n	11f56 <_vfiprintf_r+0xe6>
   1248c:	ldrb.w	r1, [r8]
   12490:	orr.w	r6, r6, #128	; 0x80
   12494:	b.n	11f56 <_vfiprintf_r+0xe6>
   12496:	mov	r2, r8
   12498:	ldrb.w	r1, [r2], #1
   1249c:	cmp	r1, #42	; 0x2a
   1249e:	beq.w	12dce <_vfiprintf_r+0xf5e>
   124a2:	sub.w	r3, r1, #48	; 0x30
   124a6:	cmp	r3, #9
   124a8:	mov	r8, r2
   124aa:	mov.w	r7, #0
   124ae:	bhi.w	11f5a <_vfiprintf_r+0xea>
   124b2:	ldrb.w	r1, [r8], #1
   124b6:	add.w	r7, r7, r7, lsl #2
   124ba:	add.w	r7, r3, r7, lsl #1
   124be:	sub.w	r3, r1, #48	; 0x30
   124c2:	cmp	r3, #9
   124c4:	bls.n	124b2 <_vfiprintf_r+0x642>
   124c6:	b.n	11f5a <_vfiprintf_r+0xea>
   124c8:	ldrb.w	r1, [r8]
   124cc:	orr.w	r6, r6, #1
   124d0:	b.n	11f56 <_vfiprintf_r+0xe6>
   124d2:	ldrb.w	r3, [sp, #67]	; 0x43
   124d6:	cmp	r3, #0
   124d8:	bne.w	12060 <_vfiprintf_r+0x1f0>
   124dc:	movs	r3, #32
   124de:	ldrb.w	r1, [r8]
   124e2:	strb.w	r3, [sp, #67]	; 0x43
   124e6:	b.n	11f56 <_vfiprintf_r+0xe6>
   124e8:	ldrb.w	r1, [r8]
   124ec:	cmp	r1, #108	; 0x6c
   124ee:	ittte	eq
   124f0:	ldrbeq.w	r1, [r8, #1]
   124f4:	orreq.w	r6, r6, #32
   124f8:	addeq.w	r8, r8, #1
   124fc:	orrne.w	r6, r6, #16
   12500:	b.n	11f56 <_vfiprintf_r+0xe6>
   12502:	ldrb.w	r1, [r8]
   12506:	cmp	r1, #104	; 0x68
   12508:	ittte	eq
   1250a:	ldrbeq.w	r1, [r8, #1]
   1250e:	orreq.w	r6, r6, #512	; 0x200
   12512:	addeq.w	r8, r8, #1
   12516:	orrne.w	r6, r6, #64	; 0x40
   1251a:	b.n	11f56 <_vfiprintf_r+0xe6>
   1251c:	orr.w	r3, r6, #16
   12520:	str	r3, [sp, #12]
   12522:	ldr	r3, [sp, #12]
   12524:	ands.w	r2, r3, #32
   12528:	beq.w	12938 <_vfiprintf_r+0xac8>
   1252c:	ldr	r3, [sp, #28]
   1252e:	adds	r3, #7
   12530:	bic.w	r3, r3, #7
   12534:	mov	r1, r3
   12536:	ldr	r2, [r3, #4]
   12538:	ldr.w	r3, [r1], #8
   1253c:	str	r1, [sp, #28]
   1253e:	movs	r1, #1
   12540:	b.n	1215e <_vfiprintf_r+0x2ee>
   12542:	ldr	r2, [sp, #28]
   12544:	orr.w	r3, r6, #2
   12548:	str	r3, [sp, #12]
   1254a:	ldr.w	r3, [r2], #4
   1254e:	str	r2, [sp, #28]
   12550:	movw	r2, #30768	; 0x7830
   12554:	strh.w	r2, [sp, #68]	; 0x44
   12558:	ldr	r2, [pc, #736]	; (1283c <_vfiprintf_r+0x9cc>)
   1255a:	str	r2, [sp, #48]	; 0x30
   1255c:	movs	r1, #2
   1255e:	movs	r2, #0
   12560:	b.n	1215e <_vfiprintf_r+0x2ee>
   12562:	lsls	r7, r6, #26
   12564:	bmi.w	129f8 <_vfiprintf_r+0xb88>
   12568:	lsls	r5, r6, #27
   1256a:	bmi.w	12bfa <_vfiprintf_r+0xd8a>
   1256e:	lsls	r4, r6, #25
   12570:	bmi.w	12d1e <_vfiprintf_r+0xeae>
   12574:	lsls	r0, r6, #22
   12576:	bpl.w	12bfa <_vfiprintf_r+0xd8a>
   1257a:	ldr	r3, [sp, #28]
   1257c:	ldr	r1, [sp, #20]
   1257e:	ldr.w	r2, [r3], #4
   12582:	str	r3, [sp, #28]
   12584:	strb	r1, [r2, #0]
   12586:	b.n	11f06 <_vfiprintf_r+0x96>
   12588:	str	r6, [sp, #12]
   1258a:	cmp	r1, #1
   1258c:	beq.w	120a8 <_vfiprintf_r+0x238>
   12590:	cmp	r1, #2
   12592:	add	r4, sp, #272	; 0x110
   12594:	bne.n	125ba <_vfiprintf_r+0x74a>
   12596:	ldr	r0, [sp, #48]	; 0x30
   12598:	and.w	r1, r3, #15
   1259c:	lsrs	r3, r3, #4
   1259e:	ldrb	r1, [r0, r1]
   125a0:	strb.w	r1, [r4, #-1]!
   125a4:	orr.w	r3, r3, r2, lsl #28
   125a8:	lsrs	r2, r2, #4
   125aa:	orrs.w	r1, r3, r2
   125ae:	bne.n	12598 <_vfiprintf_r+0x728>
   125b0:	ldr	r6, [sp, #12]
   125b2:	add	r3, sp, #272	; 0x110
   125b4:	subs	r3, r3, r4
   125b6:	str	r3, [sp, #16]
   125b8:	b.n	120c2 <_vfiprintf_r+0x252>
   125ba:	and.w	r1, r3, #7
   125be:	lsrs	r3, r3, #3
   125c0:	orr.w	r3, r3, r2, lsl #29
   125c4:	lsrs	r2, r2, #3
   125c6:	adds	r1, #48	; 0x30
   125c8:	orrs.w	r5, r3, r2
   125cc:	mov	r0, r4
   125ce:	strb.w	r1, [r4, #-1]!
   125d2:	bne.n	125ba <_vfiprintf_r+0x74a>
   125d4:	ldr	r6, [sp, #12]
   125d6:	lsls	r3, r6, #31
   125d8:	bpl.n	125b2 <_vfiprintf_r+0x742>
   125da:	cmp	r1, #48	; 0x30
   125dc:	beq.n	125b0 <_vfiprintf_r+0x740>
   125de:	movs	r3, #48	; 0x30
   125e0:	subs	r0, #2
   125e2:	strb.w	r3, [r4, #-1]
   125e6:	add	r3, sp, #272	; 0x110
   125e8:	subs	r3, r3, r0
   125ea:	ldr	r6, [sp, #12]
   125ec:	str	r3, [sp, #16]
   125ee:	mov	r4, r0
   125f0:	b.n	120c2 <_vfiprintf_r+0x252>
   125f2:	ldr	r3, [sp, #16]
   125f4:	str	r4, [sp, #108]	; 0x6c
   125f6:	movs	r2, #1
   125f8:	str	r3, [sp, #112]	; 0x70
   125fa:	str	r3, [sp, #104]	; 0x68
   125fc:	str	r2, [sp, #100]	; 0x64
   125fe:	add.w	r9, sp, #108	; 0x6c
   12602:	add.w	r9, r9, #8
   12606:	b.n	12344 <_vfiprintf_r+0x4d4>
   12608:	add.w	r9, sp, #108	; 0x6c
   1260c:	b.n	11f06 <_vfiprintf_r+0x96>
   1260e:	ldr	r2, [sp, #24]
   12610:	ldr	r5, [sp, #12]
   12612:	subs	r5, r2, r5
   12614:	cmp	r5, #0
   12616:	ble.w	12306 <_vfiprintf_r+0x496>
   1261a:	cmp	r5, #16
   1261c:	ble.w	12d96 <_vfiprintf_r+0xf26>
   12620:	str	r4, [sp, #36]	; 0x24
   12622:	vmov	r4, s16
   12626:	b.n	12638 <_vfiprintf_r+0x7c8>
   12628:	add.w	ip, r0, #2
   1262c:	add.w	r9, r9, #8
   12630:	mov	r0, r2
   12632:	subs	r5, #16
   12634:	cmp	r5, #16
   12636:	ble.n	12676 <_vfiprintf_r+0x806>
   12638:	ldr	r1, [pc, #516]	; (12840 <_vfiprintf_r+0x9d0>)
   1263a:	str.w	r1, [r9]
   1263e:	adds	r2, r0, #1
   12640:	adds	r3, #16
   12642:	movs	r1, #16
   12644:	cmp	r2, #7
   12646:	strd	r2, r3, [sp, #100]	; 0x64
   1264a:	str.w	r1, [r9, #4]
   1264e:	ble.n	12628 <_vfiprintf_r+0x7b8>
   12650:	add	r2, sp, #96	; 0x60
   12652:	cmp	r3, #0
   12654:	beq.n	12740 <_vfiprintf_r+0x8d0>
   12656:	mov	r1, r4
   12658:	mov	r0, fp
   1265a:	add.w	r9, sp, #108	; 0x6c
   1265e:	bl	11df8 <__sprint_r.part.0>
   12662:	cmp	r0, #0
   12664:	bne.w	1221e <_vfiprintf_r+0x3ae>
   12668:	ldrd	r0, r3, [sp, #100]	; 0x64
   1266c:	subs	r5, #16
   1266e:	cmp	r5, #16
   12670:	add.w	ip, r0, #1
   12674:	bgt.n	12638 <_vfiprintf_r+0x7c8>
   12676:	ldr	r4, [sp, #36]	; 0x24
   12678:	ldr	r2, [pc, #452]	; (12840 <_vfiprintf_r+0x9d0>)
   1267a:	str.w	r5, [r9, #4]
   1267e:	add	r3, r5
   12680:	cmp.w	ip, #7
   12684:	strd	ip, r3, [sp, #100]	; 0x64
   12688:	str.w	r2, [r9]
   1268c:	ble.w	129b8 <_vfiprintf_r+0xb48>
   12690:	cmp	r3, #0
   12692:	beq.w	12cd4 <_vfiprintf_r+0xe64>
   12696:	vmov	r1, s16
   1269a:	add	r2, sp, #96	; 0x60
   1269c:	mov	r0, fp
   1269e:	bl	11df8 <__sprint_r.part.0>
   126a2:	cmp	r0, #0
   126a4:	bne.w	1221e <_vfiprintf_r+0x3ae>
   126a8:	ldr	r2, [sp, #16]
   126aa:	ldrd	r0, r3, [sp, #100]	; 0x64
   126ae:	subs	r5, r7, r2
   126b0:	cmp	r5, #0
   126b2:	add.w	r1, r0, #1
   126b6:	add.w	r9, sp, #108	; 0x6c
   126ba:	ble.w	12310 <_vfiprintf_r+0x4a0>
   126be:	cmp	r5, #16
   126c0:	ble.n	12716 <_vfiprintf_r+0x8a6>
   126c2:	str	r4, [sp, #36]	; 0x24
   126c4:	movs	r7, #16
   126c6:	vmov	r4, s16
   126ca:	b.n	126dc <_vfiprintf_r+0x86c>
   126cc:	add.w	ip, r0, #2
   126d0:	add.w	r9, r9, #8
   126d4:	mov	r0, r2
   126d6:	subs	r5, #16
   126d8:	cmp	r5, #16
   126da:	ble.n	12712 <_vfiprintf_r+0x8a2>
   126dc:	adds	r2, r0, #1
   126de:	ldr	r1, [pc, #352]	; (12840 <_vfiprintf_r+0x9d0>)
   126e0:	adds	r3, #16
   126e2:	cmp	r2, #7
   126e4:	strd	r1, r7, [r9]
   126e8:	strd	r2, r3, [sp, #100]	; 0x64
   126ec:	ble.n	126cc <_vfiprintf_r+0x85c>
   126ee:	add	r2, sp, #96	; 0x60
   126f0:	cbz	r3, 12734 <_vfiprintf_r+0x8c4>
   126f2:	mov	r1, r4
   126f4:	mov	r0, fp
   126f6:	add.w	r9, sp, #108	; 0x6c
   126fa:	bl	11df8 <__sprint_r.part.0>
   126fe:	cmp	r0, #0
   12700:	bne.w	1221e <_vfiprintf_r+0x3ae>
   12704:	ldrd	r0, r3, [sp, #100]	; 0x64
   12708:	subs	r5, #16
   1270a:	cmp	r5, #16
   1270c:	add.w	ip, r0, #1
   12710:	bgt.n	126dc <_vfiprintf_r+0x86c>
   12712:	ldr	r4, [sp, #36]	; 0x24
   12714:	mov	r1, ip
   12716:	ldr	r2, [pc, #296]	; (12840 <_vfiprintf_r+0x9d0>)
   12718:	str.w	r5, [r9, #4]
   1271c:	add	r3, r5
   1271e:	cmp	r1, #7
   12720:	strd	r1, r3, [sp, #100]	; 0x64
   12724:	str.w	r2, [r9]
   12728:	bgt.w	128fa <_vfiprintf_r+0xa8a>
   1272c:	add.w	r9, r9, #8
   12730:	adds	r1, #1
   12732:	b.n	12310 <_vfiprintf_r+0x4a0>
   12734:	mov.w	ip, #1
   12738:	mov	r0, r3
   1273a:	add.w	r9, sp, #108	; 0x6c
   1273e:	b.n	126d6 <_vfiprintf_r+0x866>
   12740:	mov.w	ip, #1
   12744:	mov	r0, r3
   12746:	add.w	r9, sp, #108	; 0x6c
   1274a:	b.n	12632 <_vfiprintf_r+0x7c2>
   1274c:	cmp	r3, #0
   1274e:	beq.w	1295a <_vfiprintf_r+0xaea>
   12752:	vmov	r1, s16
   12756:	add	r2, sp, #96	; 0x60
   12758:	mov	r0, fp
   1275a:	bl	11df8 <__sprint_r.part.0>
   1275e:	cmp	r0, #0
   12760:	bne.w	1221e <_vfiprintf_r+0x3ae>
   12764:	ldrd	r0, r3, [sp, #100]	; 0x64
   12768:	add.w	r9, sp, #108	; 0x6c
   1276c:	adds	r1, r0, #1
   1276e:	b.n	122c0 <_vfiprintf_r+0x450>
   12770:	movs	r3, #2
   12772:	add	r2, sp, #68	; 0x44
   12774:	str	r3, [sp, #112]	; 0x70
   12776:	str	r2, [sp, #108]	; 0x6c
   12778:	movs	r1, #1
   1277a:	add.w	r9, sp, #108	; 0x6c
   1277e:	mov	r0, r1
   12780:	add.w	r9, r9, #8
   12784:	adds	r1, r0, #1
   12786:	b.n	122fe <_vfiprintf_r+0x48e>
   12788:	cmp	r5, #16
   1278a:	ble.w	12d58 <_vfiprintf_r+0xee8>
   1278e:	ldrd	r1, r3, [sp, #100]	; 0x64
   12792:	str	r4, [sp, #60]	; 0x3c
   12794:	mov	r0, r1
   12796:	vmov	r4, s16
   1279a:	b.n	127ac <_vfiprintf_r+0x93c>
   1279c:	add.w	ip, r0, #2
   127a0:	add.w	r9, r9, #8
   127a4:	mov	r0, r2
   127a6:	subs	r5, #16
   127a8:	cmp	r5, #16
   127aa:	ble.n	127e8 <_vfiprintf_r+0x978>
   127ac:	ldr	r1, [pc, #148]	; (12844 <_vfiprintf_r+0x9d4>)
   127ae:	str.w	r1, [r9]
   127b2:	adds	r2, r0, #1
   127b4:	adds	r3, #16
   127b6:	movs	r1, #16
   127b8:	cmp	r2, #7
   127ba:	strd	r2, r3, [sp, #100]	; 0x64
   127be:	str.w	r1, [r9, #4]
   127c2:	ble.n	1279c <_vfiprintf_r+0x92c>
   127c4:	add	r2, sp, #96	; 0x60
   127c6:	cbz	r3, 1280a <_vfiprintf_r+0x99a>
   127c8:	mov	r1, r4
   127ca:	mov	r0, fp
   127cc:	add.w	r9, sp, #108	; 0x6c
   127d0:	bl	11df8 <__sprint_r.part.0>
   127d4:	cmp	r0, #0
   127d6:	bne.w	1221e <_vfiprintf_r+0x3ae>
   127da:	ldrd	r0, r3, [sp, #100]	; 0x64
   127de:	subs	r5, #16
   127e0:	cmp	r5, #16
   127e2:	add.w	ip, r0, #1
   127e6:	bgt.n	127ac <_vfiprintf_r+0x93c>
   127e8:	ldr	r4, [sp, #60]	; 0x3c
   127ea:	mov	r0, ip
   127ec:	ldr	r2, [pc, #84]	; (12844 <_vfiprintf_r+0x9d4>)
   127ee:	str.w	r5, [r9, #4]
   127f2:	add	r3, r5
   127f4:	cmp	r0, #7
   127f6:	strd	r0, r3, [sp, #100]	; 0x64
   127fa:	str.w	r2, [r9]
   127fe:	bgt.w	12984 <_vfiprintf_r+0xb14>
   12802:	add.w	r9, r9, #8
   12806:	adds	r1, r0, #1
   12808:	b.n	12298 <_vfiprintf_r+0x428>
   1280a:	mov	r0, r3
   1280c:	mov.w	ip, #1
   12810:	add.w	r9, sp, #108	; 0x6c
   12814:	b.n	127a6 <_vfiprintf_r+0x936>
   12816:	lsls	r6, r6, #29
   12818:	str	r3, [sp, #100]	; 0x64
   1281a:	bpl.n	128c4 <_vfiprintf_r+0xa54>
   1281c:	ldr	r2, [sp, #24]
   1281e:	ldr	r1, [sp, #12]
   12820:	subs	r4, r2, r1
   12822:	cmp	r4, #0
   12824:	ble.n	128c4 <_vfiprintf_r+0xa54>
   12826:	add.w	r9, sp, #108	; 0x6c
   1282a:	cmp	r4, #16
   1282c:	ble.w	12d90 <_vfiprintf_r+0xf20>
   12830:	ldr	r1, [sp, #100]	; 0x64
   12832:	vmov	r6, s16
   12836:	movs	r5, #16
   12838:	b.n	12856 <_vfiprintf_r+0x9e6>
   1283a:	nop
   1283c:	.word	0x20000e68
   12840:	.word	0x2000131c
   12844:	.word	0x20000eac
   12848:	adds	r0, r1, #2
   1284a:	add.w	r9, r9, #8
   1284e:	mov	r1, r2
   12850:	subs	r4, #16
   12852:	cmp	r4, #16
   12854:	ble.n	1288c <_vfiprintf_r+0xa1c>
   12856:	adds	r2, r1, #1
   12858:	ldr	r0, [pc, #716]	; (12b28 <_vfiprintf_r+0xcb8>)
   1285a:	adds	r3, #16
   1285c:	cmp	r2, #7
   1285e:	strd	r0, r5, [r9]
   12862:	strd	r2, r3, [sp, #100]	; 0x64
   12866:	ble.n	12848 <_vfiprintf_r+0x9d8>
   12868:	add	r2, sp, #96	; 0x60
   1286a:	cbz	r3, 128ba <_vfiprintf_r+0xa4a>
   1286c:	mov	r1, r6
   1286e:	mov	r0, fp
   12870:	bl	11df8 <__sprint_r.part.0>
   12874:	cmp	r0, #0
   12876:	bne.w	1221e <_vfiprintf_r+0x3ae>
   1287a:	ldrd	r1, r3, [sp, #100]	; 0x64
   1287e:	subs	r4, #16
   12880:	cmp	r4, #16
   12882:	add.w	r0, r1, #1
   12886:	add.w	r9, sp, #108	; 0x6c
   1288a:	bgt.n	12856 <_vfiprintf_r+0x9e6>
   1288c:	ldr	r2, [pc, #664]	; (12b28 <_vfiprintf_r+0xcb8>)
   1288e:	str.w	r4, [r9, #4]
   12892:	add	r3, r4
   12894:	cmp	r0, #7
   12896:	strd	r0, r3, [sp, #100]	; 0x64
   1289a:	str.w	r2, [r9]
   1289e:	ble.w	12354 <_vfiprintf_r+0x4e4>
   128a2:	cbz	r3, 128c4 <_vfiprintf_r+0xa54>
   128a4:	vmov	r1, s16
   128a8:	add	r2, sp, #96	; 0x60
   128aa:	mov	r0, fp
   128ac:	bl	11df8 <__sprint_r.part.0>
   128b0:	cmp	r0, #0
   128b2:	bne.w	1221e <_vfiprintf_r+0x3ae>
   128b6:	ldr	r3, [sp, #104]	; 0x68
   128b8:	b.n	12354 <_vfiprintf_r+0x4e4>
   128ba:	movs	r0, #1
   128bc:	mov	r1, r3
   128be:	add.w	r9, sp, #108	; 0x6c
   128c2:	b.n	12850 <_vfiprintf_r+0x9e0>
   128c4:	ldrd	r3, r2, [sp, #20]
   128c8:	ldr	r1, [sp, #12]
   128ca:	cmp	r2, r1
   128cc:	ite	ge
   128ce:	addge	r3, r3, r2
   128d0:	addlt	r3, r3, r1
   128d2:	str	r3, [sp, #20]
   128d4:	b.n	1236a <_vfiprintf_r+0x4fa>
   128d6:	ldrsh.w	r1, [r2, #12]
   128da:	lsls	r7, r1, #22
   128dc:	vmov	r3, s16
   128e0:	uxth	r2, r1
   128e2:	bmi.w	11eb6 <_vfiprintf_r+0x46>
   128e6:	vmov	r5, s16
   128ea:	ldr	r0, [r3, #88]	; 0x58
   128ec:	bl	e30c <__retarget_lock_acquire_recursive>
   128f0:	ldrsh.w	r1, [r5, #12]
   128f4:	uxth	r2, r1
   128f6:	b.w	11eb6 <_vfiprintf_r+0x46>
   128fa:	cmp	r3, #0
   128fc:	beq.w	125f2 <_vfiprintf_r+0x782>
   12900:	vmov	r1, s16
   12904:	add	r2, sp, #96	; 0x60
   12906:	mov	r0, fp
   12908:	bl	11df8 <__sprint_r.part.0>
   1290c:	cmp	r0, #0
   1290e:	bne.w	1221e <_vfiprintf_r+0x3ae>
   12912:	ldr	r1, [sp, #100]	; 0x64
   12914:	ldr	r3, [sp, #104]	; 0x68
   12916:	adds	r1, #1
   12918:	add.w	r9, sp, #108	; 0x6c
   1291c:	b.n	12310 <_vfiprintf_r+0x4a0>
   1291e:	str	r2, [sp, #100]	; 0x64
   12920:	add.w	r9, sp, #108	; 0x6c
   12924:	b.n	121e4 <_vfiprintf_r+0x374>
   12926:	cmp	r7, #0
   12928:	bne.w	120b2 <_vfiprintf_r+0x242>
   1292c:	ldr	r6, [sp, #12]
   1292e:	movs	r7, #0
   12930:	str	r7, [sp, #16]
   12932:	add	r4, sp, #272	; 0x110
   12934:	b.w	120c2 <_vfiprintf_r+0x252>
   12938:	ldr	r3, [sp, #12]
   1293a:	ands.w	r3, r3, #16
   1293e:	bne.n	129ea <_vfiprintf_r+0xb7a>
   12940:	ldr	r2, [sp, #12]
   12942:	ands.w	r0, r2, #64	; 0x40
   12946:	beq.w	12c20 <_vfiprintf_r+0xdb0>
   1294a:	ldr	r1, [sp, #28]
   1294c:	mov	r2, r3
   1294e:	ldr.w	r3, [r1], #4
   12952:	str	r1, [sp, #28]
   12954:	uxth	r3, r3
   12956:	movs	r1, #1
   12958:	b.n	1215e <_vfiprintf_r+0x2ee>
   1295a:	ldr	r2, [sp, #36]	; 0x24
   1295c:	cmp	r2, #0
   1295e:	bne.n	12a2a <_vfiprintf_r+0xbba>
   12960:	mov	r0, r3
   12962:	movs	r1, #1
   12964:	add.w	r9, sp, #108	; 0x6c
   12968:	b.n	122fe <_vfiprintf_r+0x48e>
   1296a:	movs	r1, #1
   1296c:	mov	r0, r3
   1296e:	add.w	r9, sp, #108	; 0x6c
   12972:	b.n	122fe <_vfiprintf_r+0x48e>
   12974:	negs	r3, r3
   12976:	sbc.w	r2, r2, r2, lsl #1
   1297a:	str	r6, [sp, #12]
   1297c:	movs	r0, #45	; 0x2d
   1297e:	movs	r1, #1
   12980:	b.w	12160 <_vfiprintf_r+0x2f0>
   12984:	cmp	r3, #0
   12986:	beq.w	12a9a <_vfiprintf_r+0xc2a>
   1298a:	vmov	r1, s16
   1298e:	add	r2, sp, #96	; 0x60
   12990:	mov	r0, fp
   12992:	bl	11df8 <__sprint_r.part.0>
   12996:	cmp	r0, #0
   12998:	bne.w	1221e <_vfiprintf_r+0x3ae>
   1299c:	ldrd	r0, r3, [sp, #100]	; 0x64
   129a0:	add.w	r9, sp, #108	; 0x6c
   129a4:	adds	r1, r0, #1
   129a6:	b.n	12298 <_vfiprintf_r+0x428>
   129a8:	ldrb.w	r1, [r8]
   129ac:	str	r3, [sp, #28]
   129ae:	b.w	11f56 <_vfiprintf_r+0xe6>
   129b2:	add	r4, sp, #272	; 0x110
   129b4:	b.w	120c2 <_vfiprintf_r+0x252>
   129b8:	add.w	r9, r9, #8
   129bc:	add.w	r1, ip, #1
   129c0:	mov	r0, ip
   129c2:	b.n	12306 <_vfiprintf_r+0x496>
   129c4:	ands.w	r2, r6, #512	; 0x200
   129c8:	bne.w	12cfa <_vfiprintf_r+0xe8a>
   129cc:	ldr.w	r3, [r1], #4
   129d0:	str	r1, [sp, #28]
   129d2:	b.w	12156 <_vfiprintf_r+0x2e6>
   129d6:	lsls	r3, r6, #22
   129d8:	bmi.w	12cec <_vfiprintf_r+0xe7c>
   129dc:	ldr.w	r3, [r2], #4
   129e0:	str	r2, [sp, #28]
   129e2:	asrs	r2, r3, #31
   129e4:	mov	r1, r2
   129e6:	b.w	1208e <_vfiprintf_r+0x21e>
   129ea:	ldr	r1, [sp, #28]
   129ec:	ldr.w	r3, [r1], #4
   129f0:	str	r1, [sp, #28]
   129f2:	movs	r1, #1
   129f4:	b.w	1215e <_vfiprintf_r+0x2ee>
   129f8:	ldr	r3, [sp, #28]
   129fa:	ldr	r0, [sp, #20]
   129fc:	ldr.w	r1, [r3], #4
   12a00:	str	r3, [sp, #28]
   12a02:	asrs	r2, r0, #31
   12a04:	strd	r0, r2, [r1]
   12a08:	b.w	11f06 <_vfiprintf_r+0x96>
   12a0c:	ldr	r3, [sp, #44]	; 0x2c
   12a0e:	cmp	r3, #0
   12a10:	beq.w	12060 <_vfiprintf_r+0x1f0>
   12a14:	ldr	r3, [sp, #44]	; 0x2c
   12a16:	ldrb	r3, [r3, #0]
   12a18:	cmp	r3, #0
   12a1a:	beq.w	12060 <_vfiprintf_r+0x1f0>
   12a1e:	ldrb.w	r1, [r8]
   12a22:	orr.w	r6, r6, #1024	; 0x400
   12a26:	b.w	11f56 <_vfiprintf_r+0xe6>
   12a2a:	movs	r3, #2
   12a2c:	add	r2, sp, #68	; 0x44
   12a2e:	str	r3, [sp, #112]	; 0x70
   12a30:	str	r2, [sp, #108]	; 0x6c
   12a32:	movs	r0, #1
   12a34:	add.w	r9, sp, #108	; 0x6c
   12a38:	b.n	12780 <_vfiprintf_r+0x910>
   12a3a:	str	r6, [sp, #12]
   12a3c:	b.n	12522 <_vfiprintf_r+0x6b2>
   12a3e:	ldr	r3, [pc, #236]	; (12b2c <_vfiprintf_r+0xcbc>)
   12a40:	str	r3, [sp, #48]	; 0x30
   12a42:	ands.w	r2, r6, #32
   12a46:	beq.n	12afc <_vfiprintf_r+0xc8c>
   12a48:	ldr	r3, [sp, #28]
   12a4a:	adds	r3, #7
   12a4c:	bic.w	r3, r3, #7
   12a50:	mov	r0, r3
   12a52:	ldr	r2, [r3, #4]
   12a54:	ldr.w	r3, [r0], #8
   12a58:	str	r0, [sp, #28]
   12a5a:	lsls	r4, r6, #31
   12a5c:	bpl.n	12a72 <_vfiprintf_r+0xc02>
   12a5e:	orrs.w	r0, r3, r2
   12a62:	beq.n	12a72 <_vfiprintf_r+0xc02>
   12a64:	strb.w	r1, [sp, #69]	; 0x45
   12a68:	movs	r1, #48	; 0x30
   12a6a:	orr.w	r6, r6, #2
   12a6e:	strb.w	r1, [sp, #68]	; 0x44
   12a72:	bic.w	r1, r6, #1024	; 0x400
   12a76:	str	r1, [sp, #12]
   12a78:	movs	r1, #2
   12a7a:	b.w	1215e <_vfiprintf_r+0x2ee>
   12a7e:	ldr	r3, [pc, #176]	; (12b30 <_vfiprintf_r+0xcc0>)
   12a80:	str	r3, [sp, #48]	; 0x30
   12a82:	b.n	12a42 <_vfiprintf_r+0xbd2>
   12a84:	ldr	r3, [sp, #28]
   12a86:	movs	r1, #1
   12a88:	ldr.w	r2, [r3], #4
   12a8c:	str	r1, [sp, #12]
   12a8e:	strb.w	r2, [sp, #172]	; 0xac
   12a92:	str	r3, [sp, #28]
   12a94:	str	r1, [sp, #16]
   12a96:	add	r4, sp, #172	; 0xac
   12a98:	b.n	1245a <_vfiprintf_r+0x5ea>
   12a9a:	ldrb.w	r2, [sp, #67]	; 0x43
   12a9e:	cmp	r2, #0
   12aa0:	bne.w	12d08 <_vfiprintf_r+0xe98>
   12aa4:	ldr	r2, [sp, #36]	; 0x24
   12aa6:	cmp	r2, #0
   12aa8:	bne.w	12770 <_vfiprintf_r+0x900>
   12aac:	mov	r0, r3
   12aae:	movs	r1, #1
   12ab0:	add.w	r9, sp, #108	; 0x6c
   12ab4:	b.n	12306 <_vfiprintf_r+0x496>
   12ab6:	movs	r1, #0
   12ab8:	movs	r2, #8
   12aba:	add	r0, sp, #88	; 0x58
   12abc:	str	r4, [sp, #76]	; 0x4c
   12abe:	bl	e044 <memset>
   12ac2:	adds	r1, r7, #1
   12ac4:	beq.w	12c40 <_vfiprintf_r+0xdd0>
   12ac8:	movs	r5, #0
   12aca:	str	r4, [sp, #28]
   12acc:	mov	r4, r5
   12ace:	b.n	12aea <_vfiprintf_r+0xc7a>
   12ad0:	add	r1, sp, #172	; 0xac
   12ad2:	mov	r0, fp
   12ad4:	bl	11c6c <_wcrtomb_r>
   12ad8:	adds	r2, r0, #1
   12ada:	add	r0, r4
   12adc:	beq.w	12db6 <_vfiprintf_r+0xf46>
   12ae0:	cmp	r0, r7
   12ae2:	bgt.n	12af6 <_vfiprintf_r+0xc86>
   12ae4:	beq.w	12dc8 <_vfiprintf_r+0xf58>
   12ae8:	mov	r4, r0
   12aea:	ldr	r2, [sp, #76]	; 0x4c
   12aec:	ldr	r2, [r2, r5]
   12aee:	add	r3, sp, #88	; 0x58
   12af0:	adds	r5, #4
   12af2:	cmp	r2, #0
   12af4:	bne.n	12ad0 <_vfiprintf_r+0xc60>
   12af6:	str	r4, [sp, #16]
   12af8:	ldr	r4, [sp, #28]
   12afa:	b.n	12c5c <_vfiprintf_r+0xdec>
   12afc:	ands.w	r3, r6, #16
   12b00:	ldr	r0, [sp, #28]
   12b02:	bne.n	12b1e <_vfiprintf_r+0xcae>
   12b04:	ands.w	r4, r6, #64	; 0x40
   12b08:	beq.n	12b16 <_vfiprintf_r+0xca6>
   12b0a:	mov	r2, r3
   12b0c:	ldr.w	r3, [r0], #4
   12b10:	str	r0, [sp, #28]
   12b12:	uxth	r3, r3
   12b14:	b.n	12a5a <_vfiprintf_r+0xbea>
   12b16:	ands.w	r2, r6, #512	; 0x200
   12b1a:	bne.w	12ce0 <_vfiprintf_r+0xe70>
   12b1e:	ldr.w	r3, [r0], #4
   12b22:	str	r0, [sp, #28]
   12b24:	b.n	12a5a <_vfiprintf_r+0xbea>
   12b26:	nop
   12b28:	.word	0x20000eac
   12b2c:	.word	0x20000e68
   12b30:	.word	0x20000e7c
   12b34:	ldr	r1, [sp, #12]
   12b36:	str	r7, [sp, #16]
   12b38:	add	r4, sp, #272	; 0x110
   12b3a:	mov	lr, r3
   12b3c:	vmov	s17, fp
   12b40:	and.w	r6, r1, #1024	; 0x400
   12b44:	mov.w	ip, #0
   12b48:	mov	r3, r4
   12b4a:	b.n	12b5a <_vfiprintf_r+0xcea>
   12b4c:	cmp.w	lr, #10
   12b50:	sbcs.w	r2, r2, #0
   12b54:	bcc.n	12bca <_vfiprintf_r+0xd5a>
   12b56:	mov	lr, r4
   12b58:	mov	r2, r5
   12b5a:	ldr	r1, [pc, #664]	; (12df4 <_vfiprintf_r+0xf84>)
   12b5c:	adds.w	r0, lr, r2
   12b60:	adc.w	r0, r0, #0
   12b64:	mov	r7, r1
   12b66:	umull	r1, r4, r1, r0
   12b6a:	bic.w	r1, r4, #3
   12b6e:	add.w	r1, r1, r4, lsr #2
   12b72:	subs	r0, r0, r1
   12b74:	subs.w	r1, lr, r0
   12b78:	mov.w	r5, #3435973836	; 0xcccccccc
   12b7c:	sbc.w	r4, r2, #0
   12b80:	mul.w	r5, r5, r1
   12b84:	mla	r5, r7, r4, r5
   12b88:	umull	r4, r1, r1, r7
   12b8c:	add	r5, r1
   12b8e:	movs	r7, #5
   12b90:	and.w	r1, r4, #1
   12b94:	umull	r1, fp, r1, r7
   12b98:	adds	r1, r1, r0
   12b9a:	lsrs	r4, r4, #1
   12b9c:	adds	r1, #48	; 0x30
   12b9e:	strb.w	r1, [r3, #-1]
   12ba2:	orr.w	r4, r4, r5, lsl #31
   12ba6:	add.w	ip, ip, #1
   12baa:	subs	r3, #1
   12bac:	lsrs	r5, r5, #1
   12bae:	cmp	r6, #0
   12bb0:	beq.n	12b4c <_vfiprintf_r+0xcdc>
   12bb2:	ldr	r1, [sp, #44]	; 0x2c
   12bb4:	ldrb	r1, [r1, #0]
   12bb6:	cmp	r1, ip
   12bb8:	bne.n	12b4c <_vfiprintf_r+0xcdc>
   12bba:	cmp.w	ip, #255	; 0xff
   12bbe:	beq.n	12b4c <_vfiprintf_r+0xcdc>
   12bc0:	cmp.w	lr, #10
   12bc4:	sbcs.w	r2, r2, #0
   12bc8:	bcs.n	12ca4 <_vfiprintf_r+0xe34>
   12bca:	mov	r4, r3
   12bcc:	add	r3, sp, #272	; 0x110
   12bce:	subs	r3, r3, r4
   12bd0:	ldr	r7, [sp, #16]
   12bd2:	ldr	r6, [sp, #12]
   12bd4:	str	r3, [sp, #16]
   12bd6:	vmov	fp, s17
   12bda:	b.w	120c2 <_vfiprintf_r+0x252>
   12bde:	str	r6, [sp, #12]
   12be0:	b.w	120a8 <_vfiprintf_r+0x238>
   12be4:	mov	r0, fp
   12be6:	bl	dcb8 <__sinit>
   12bea:	b.w	11ea4 <_vfiprintf_r+0x34>
   12bee:	cmp	r1, #1
   12bf0:	str	r6, [sp, #12]
   12bf2:	bne.w	12590 <_vfiprintf_r+0x720>
   12bf6:	b.w	120b2 <_vfiprintf_r+0x242>
   12bfa:	ldr	r3, [sp, #28]
   12bfc:	ldr	r1, [sp, #20]
   12bfe:	ldr.w	r2, [r3], #4
   12c02:	str	r1, [r2, #0]
   12c04:	str	r3, [sp, #28]
   12c06:	b.w	11f06 <_vfiprintf_r+0x96>
   12c0a:	cmp	r7, #6
   12c0c:	mov	r3, r7
   12c0e:	ldr	r2, [sp, #12]
   12c10:	ldr	r4, [pc, #484]	; (12df8 <_vfiprintf_r+0xf88>)
   12c12:	str	r2, [sp, #28]
   12c14:	it	cs
   12c16:	movcs	r3, #6
   12c18:	str	r3, [sp, #16]
   12c1a:	str	r3, [sp, #12]
   12c1c:	b.w	1226a <_vfiprintf_r+0x3fa>
   12c20:	ldr	r3, [sp, #12]
   12c22:	ldr	r1, [sp, #28]
   12c24:	ands.w	r2, r3, #512	; 0x200
   12c28:	ite	ne
   12c2a:	ldrne.w	r3, [r1], #4
   12c2e:	ldreq.w	r3, [r1], #4
   12c32:	str	r1, [sp, #28]
   12c34:	itt	ne
   12c36:	movne	r2, r0
   12c38:	uxtbne	r3, r3
   12c3a:	movs	r1, #1
   12c3c:	b.w	1215e <_vfiprintf_r+0x2ee>
   12c40:	add	r3, sp, #88	; 0x58
   12c42:	str	r3, [sp, #0]
   12c44:	movs	r3, #0
   12c46:	mov	r1, r3
   12c48:	add	r2, sp, #76	; 0x4c
   12c4a:	mov	r0, fp
   12c4c:	bl	11cb8 <_wcsrtombs_r>
   12c50:	mov	r3, r0
   12c52:	adds	r3, #1
   12c54:	str	r0, [sp, #16]
   12c56:	beq.w	12db6 <_vfiprintf_r+0xf46>
   12c5a:	str	r4, [sp, #76]	; 0x4c
   12c5c:	ldr	r3, [sp, #16]
   12c5e:	cmp	r3, #0
   12c60:	beq.n	12cc4 <_vfiprintf_r+0xe54>
   12c62:	cmp	r3, #99	; 0x63
   12c64:	bgt.n	12d2e <_vfiprintf_r+0xebe>
   12c66:	movs	r3, #0
   12c68:	str	r3, [sp, #32]
   12c6a:	add	r4, sp, #172	; 0xac
   12c6c:	movs	r2, #8
   12c6e:	movs	r1, #0
   12c70:	add	r0, sp, #88	; 0x58
   12c72:	bl	e044 <memset>
   12c76:	ldr	r5, [sp, #16]
   12c78:	add	r3, sp, #88	; 0x58
   12c7a:	str	r3, [sp, #0]
   12c7c:	add	r2, sp, #76	; 0x4c
   12c7e:	mov	r3, r5
   12c80:	mov	r1, r4
   12c82:	mov	r0, fp
   12c84:	bl	11cb8 <_wcsrtombs_r>
   12c88:	cmp	r5, r0
   12c8a:	bne.w	12de4 <_vfiprintf_r+0xf74>
   12c8e:	ldr	r3, [sp, #12]
   12c90:	ldr	r2, [sp, #16]
   12c92:	str	r3, [sp, #28]
   12c94:	movs	r3, #0
   12c96:	strb	r3, [r4, r2]
   12c98:	mov	r7, r3
   12c9a:	bic.w	r3, r2, r2, asr #31
   12c9e:	str	r3, [sp, #12]
   12ca0:	b.w	120d0 <_vfiprintf_r+0x260>
   12ca4:	ldr	r2, [sp, #56]	; 0x38
   12ca6:	ldr	r1, [sp, #52]	; 0x34
   12ca8:	subs	r3, r3, r2
   12caa:	mov	r0, r3
   12cac:	str	r3, [sp, #32]
   12cae:	bl	e174 <strncpy>
   12cb2:	ldr	r1, [sp, #44]	; 0x2c
   12cb4:	ldr	r3, [sp, #32]
   12cb6:	ldrb	r2, [r1, #1]
   12cb8:	cbz	r2, 12cbe <_vfiprintf_r+0xe4e>
   12cba:	adds	r1, #1
   12cbc:	str	r1, [sp, #44]	; 0x2c
   12cbe:	mov.w	ip, #0
   12cc2:	b.n	12b56 <_vfiprintf_r+0xce6>
   12cc4:	ldr	r3, [sp, #12]
   12cc6:	str	r3, [sp, #28]
   12cc8:	ldr	r3, [sp, #16]
   12cca:	str	r3, [sp, #12]
   12ccc:	mov	r7, r3
   12cce:	str	r3, [sp, #32]
   12cd0:	b.w	120d0 <_vfiprintf_r+0x260>
   12cd4:	movs	r1, #1
   12cd6:	mov	r0, r3
   12cd8:	add.w	r9, sp, #108	; 0x6c
   12cdc:	b.w	12306 <_vfiprintf_r+0x496>
   12ce0:	ldr.w	r3, [r0], #4
   12ce4:	str	r0, [sp, #28]
   12ce6:	mov	r2, r4
   12ce8:	uxtb	r3, r3
   12cea:	b.n	12a5a <_vfiprintf_r+0xbea>
   12cec:	ldrsb.w	r3, [r2], #4
   12cf0:	str	r2, [sp, #28]
   12cf2:	asrs	r2, r3, #31
   12cf4:	mov	r1, r2
   12cf6:	b.w	1208e <_vfiprintf_r+0x21e>
   12cfa:	ldr.w	r3, [r1], #4
   12cfe:	str	r1, [sp, #28]
   12d00:	mov	r2, r0
   12d02:	uxtb	r3, r3
   12d04:	b.w	12156 <_vfiprintf_r+0x2e6>
   12d08:	movs	r3, #1
   12d0a:	str	r3, [sp, #112]	; 0x70
   12d0c:	movs	r1, #1
   12d0e:	add.w	r3, sp, #67	; 0x43
   12d12:	str	r3, [sp, #108]	; 0x6c
   12d14:	add.w	r9, sp, #108	; 0x6c
   12d18:	mov	r3, r1
   12d1a:	b.w	122b8 <_vfiprintf_r+0x448>
   12d1e:	ldr	r3, [sp, #28]
   12d20:	ldr	r1, [sp, #20]
   12d22:	ldr.w	r2, [r3], #4
   12d26:	str	r3, [sp, #28]
   12d28:	strh	r1, [r2, #0]
   12d2a:	b.w	11f06 <_vfiprintf_r+0x96>
   12d2e:	adds	r1, r3, #1
   12d30:	mov	r0, fp
   12d32:	bl	d230 <_malloc_r>
   12d36:	mov	r4, r0
   12d38:	cmp	r0, #0
   12d3a:	beq.n	12db6 <_vfiprintf_r+0xf46>
   12d3c:	str	r0, [sp, #32]
   12d3e:	b.n	12c6c <_vfiprintf_r+0xdfc>
   12d40:	ldr	r0, [r1, #88]	; 0x58
   12d42:	bl	e310 <__retarget_lock_release_recursive>
   12d46:	b.w	1211c <_vfiprintf_r+0x2ac>
   12d4a:	ldr	r3, [sp, #12]
   12d4c:	str	r3, [sp, #28]
   12d4e:	strd	r7, r7, [sp, #12]
   12d52:	ldr	r7, [sp, #32]
   12d54:	b.w	120d0 <_vfiprintf_r+0x260>
   12d58:	ldr	r0, [sp, #100]	; 0x64
   12d5a:	ldr	r3, [sp, #104]	; 0x68
   12d5c:	adds	r0, #1
   12d5e:	b.n	127ec <_vfiprintf_r+0x97c>
   12d60:	ldr	r3, [sp, #12]
   12d62:	str	r3, [sp, #28]
   12d64:	mov	r0, r4
   12d66:	bl	e3c0 <strlen>
   12d6a:	bic.w	r3, r0, r0, asr #31
   12d6e:	mov	r7, r5
   12d70:	str	r0, [sp, #16]
   12d72:	str	r3, [sp, #12]
   12d74:	str	r5, [sp, #32]
   12d76:	b.w	120d0 <_vfiprintf_r+0x260>
   12d7a:	vmov	r1, s16
   12d7e:	add	r2, sp, #96	; 0x60
   12d80:	mov	r0, fp
   12d82:	bl	11df8 <__sprint_r.part.0>
   12d86:	cmp	r0, #0
   12d88:	beq.w	121f8 <_vfiprintf_r+0x388>
   12d8c:	b.w	1222a <_vfiprintf_r+0x3ba>
   12d90:	ldr	r0, [sp, #100]	; 0x64
   12d92:	adds	r0, #1
   12d94:	b.n	1288c <_vfiprintf_r+0xa1c>
   12d96:	mov	ip, r1
   12d98:	b.n	12678 <_vfiprintf_r+0x808>
   12d9a:	ldr	r3, [r5, #100]	; 0x64
   12d9c:	lsls	r1, r3, #31
   12d9e:	bmi.n	12dac <_vfiprintf_r+0xf3c>
   12da0:	ldrh	r3, [r5, #12]
   12da2:	lsls	r2, r3, #22
   12da4:	bmi.n	12dac <_vfiprintf_r+0xf3c>
   12da6:	ldr	r0, [r5, #88]	; 0x58
   12da8:	bl	e310 <__retarget_lock_release_recursive>
   12dac:	mov.w	r3, #4294967295
   12db0:	str	r3, [sp, #20]
   12db2:	b.w	12248 <_vfiprintf_r+0x3d8>
   12db6:	vmov	r2, s16
   12dba:	ldrsh.w	r3, [r2, #12]
   12dbe:	orr.w	r3, r3, #64	; 0x40
   12dc2:	strh	r3, [r2, #12]
   12dc4:	b.w	12232 <_vfiprintf_r+0x3c2>
   12dc8:	ldr	r4, [sp, #28]
   12dca:	str	r7, [sp, #16]
   12dcc:	b.n	12c5c <_vfiprintf_r+0xdec>
   12dce:	ldr	r3, [sp, #28]
   12dd0:	ldrb.w	r1, [r8, #1]
   12dd4:	ldr.w	r7, [r3], #4
   12dd8:	str	r3, [sp, #28]
   12dda:	mov	r8, r2
   12ddc:	orr.w	r7, r7, r7, asr #31
   12de0:	b.w	11f56 <_vfiprintf_r+0xe6>
   12de4:	vmov	r2, s16
   12de8:	ldrh	r3, [r2, #12]
   12dea:	orr.w	r3, r3, #64	; 0x40
   12dee:	strh	r3, [r2, #12]
   12df0:	b.w	1221e <_vfiprintf_r+0x3ae>
   12df4:	.word	0xcccccccd
   12df8:	.word	0x20000e90

00012dfc <__sbprintf>:
   12dfc:	push	{r4, r5, r6, lr}
   12dfe:	mov	r4, r1
   12e00:	ldrh	r1, [r1, #12]
   12e02:	sub.w	sp, sp, #1136	; 0x470
   12e06:	bic.w	r1, r1, #2
   12e0a:	strh.w	r1, [sp, #20]
   12e0e:	ldr	r1, [r4, #100]	; 0x64
   12e10:	str	r1, [sp, #108]	; 0x6c
   12e12:	ldrh	r1, [r4, #14]
   12e14:	strh.w	r1, [sp, #22]
   12e18:	ldr	r1, [r4, #28]
   12e1a:	str	r1, [sp, #36]	; 0x24
   12e1c:	ldr	r1, [r4, #36]	; 0x24
   12e1e:	str	r1, [sp, #44]	; 0x2c
   12e20:	add	r1, sp, #112	; 0x70
   12e22:	str	r1, [sp, #8]
   12e24:	str	r1, [sp, #24]
   12e26:	mov.w	r1, #1024	; 0x400
   12e2a:	mov	r6, r0
   12e2c:	str	r1, [sp, #16]
   12e2e:	str	r1, [sp, #28]
   12e30:	add	r0, sp, #96	; 0x60
   12e32:	movs	r1, #0
   12e34:	strd	r3, r2, [sp]
   12e38:	str	r1, [sp, #32]
   12e3a:	bl	e304 <__retarget_lock_init_recursive>
   12e3e:	ldrd	r3, r2, [sp]
   12e42:	add	r1, sp, #8
   12e44:	mov	r0, r6
   12e46:	bl	11e70 <_vfiprintf_r>
   12e4a:	subs	r5, r0, #0
   12e4c:	blt.n	12e5e <__sbprintf+0x62>
   12e4e:	add	r1, sp, #8
   12e50:	mov	r0, r6
   12e52:	bl	10ccc <_fflush_r>
   12e56:	cmp	r0, #0
   12e58:	it	ne
   12e5a:	movne.w	r5, #4294967295
   12e5e:	ldrh.w	r3, [sp, #20]
   12e62:	lsls	r3, r3, #25
   12e64:	bpl.n	12e6e <__sbprintf+0x72>
   12e66:	ldrh	r3, [r4, #12]
   12e68:	orr.w	r3, r3, #64	; 0x40
   12e6c:	strh	r3, [r4, #12]
   12e6e:	ldr	r0, [sp, #96]	; 0x60
   12e70:	bl	e308 <__retarget_lock_close_recursive>
   12e74:	mov	r0, r5
   12e76:	add.w	sp, sp, #1136	; 0x470
   12e7a:	pop	{r4, r5, r6, pc}

00012e7c <__sfvwrite_r>:
   12e7c:	ldr	r3, [r2, #8]
   12e7e:	cmp	r3, #0
   12e80:	beq.w	12f8e <__sfvwrite_r+0x112>
   12e84:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12e88:	ldrsh.w	r3, [r1, #12]
   12e8c:	mov	r4, r1
   12e8e:	lsls	r1, r3, #28
   12e90:	mov	r8, r0
   12e92:	sub	sp, #12
   12e94:	mov	r7, r2
   12e96:	uxth	r0, r3
   12e98:	bpl.n	12ee6 <__sfvwrite_r+0x6a>
   12e9a:	ldr	r3, [r4, #16]
   12e9c:	cbz	r3, 12ee6 <__sfvwrite_r+0x6a>
   12e9e:	ands.w	r3, r0, #2
   12ea2:	ldr	r5, [r7, #0]
   12ea4:	beq.n	12f02 <__sfvwrite_r+0x86>
   12ea6:	mov.w	sl, #0
   12eaa:	ldr.w	fp, [pc, #704]	; 1316c <__sfvwrite_r+0x2f0>
   12eae:	mov	r6, sl
   12eb0:	mov	r9, r7
   12eb2:	cmp	r6, fp
   12eb4:	mov	r3, r6
   12eb6:	mov	r2, sl
   12eb8:	it	cs
   12eba:	movcs	r3, fp
   12ebc:	mov	r0, r8
   12ebe:	cmp	r6, #0
   12ec0:	beq.n	12f68 <__sfvwrite_r+0xec>
   12ec2:	ldr	r1, [r4, #28]
   12ec4:	ldr	r7, [r4, #36]	; 0x24
   12ec6:	blx	r7
   12ec8:	cmp	r0, #0
   12eca:	ble.n	12f7a <__sfvwrite_r+0xfe>
   12ecc:	ldr.w	r3, [r9, #8]
   12ed0:	subs	r3, r3, r0
   12ed2:	add	sl, r0
   12ed4:	subs	r6, r6, r0
   12ed6:	str.w	r3, [r9, #8]
   12eda:	cmp	r3, #0
   12edc:	bne.n	12eb2 <__sfvwrite_r+0x36>
   12ede:	movs	r0, #0
   12ee0:	add	sp, #12
   12ee2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12ee6:	mov	r1, r4
   12ee8:	mov	r0, r8
   12eea:	bl	13170 <__swsetup_r>
   12eee:	cmp	r0, #0
   12ef0:	bne.w	13164 <__sfvwrite_r+0x2e8>
   12ef4:	ldrsh.w	r3, [r4, #12]
   12ef8:	ldr	r5, [r7, #0]
   12efa:	uxth	r0, r3
   12efc:	ands.w	r3, r0, #2
   12f00:	bne.n	12ea6 <__sfvwrite_r+0x2a>
   12f02:	ands.w	r9, r0, #1
   12f06:	bne.n	12f92 <__sfvwrite_r+0x116>
   12f08:	mov	r6, r9
   12f0a:	str	r7, [sp, #0]
   12f0c:	cbz	r6, 12f60 <__sfvwrite_r+0xe4>
   12f0e:	lsls	r2, r0, #22
   12f10:	ldr.w	fp, [r4, #8]
   12f14:	bpl.w	13022 <__sfvwrite_r+0x1a6>
   12f18:	cmp	fp, r6
   12f1a:	mov	r2, fp
   12f1c:	bhi.w	13088 <__sfvwrite_r+0x20c>
   12f20:	tst.w	r0, #1152	; 0x480
   12f24:	bne.w	130aa <__sfvwrite_r+0x22e>
   12f28:	ldr	r0, [r4, #0]
   12f2a:	str	r2, [sp, #4]
   12f2c:	mov	r1, r9
   12f2e:	bl	df4c <memmove>
   12f32:	ldr	r3, [r4, #8]
   12f34:	ldr	r2, [sp, #4]
   12f36:	sub.w	r1, r3, fp
   12f3a:	ldr	r3, [r4, #0]
   12f3c:	str	r1, [r4, #8]
   12f3e:	add	r3, r2
   12f40:	mov	sl, r6
   12f42:	str	r3, [r4, #0]
   12f44:	movs	r6, #0
   12f46:	ldr	r2, [sp, #0]
   12f48:	ldr	r3, [r2, #8]
   12f4a:	sub.w	r3, r3, sl
   12f4e:	add	r9, sl
   12f50:	str	r3, [r2, #8]
   12f52:	cmp	r3, #0
   12f54:	beq.n	12ede <__sfvwrite_r+0x62>
   12f56:	ldrsh.w	r0, [r4, #12]
   12f5a:	uxth	r0, r0
   12f5c:	cmp	r6, #0
   12f5e:	bne.n	12f0e <__sfvwrite_r+0x92>
   12f60:	ldrd	r9, r6, [r5]
   12f64:	adds	r5, #8
   12f66:	b.n	12f0c <__sfvwrite_r+0x90>
   12f68:	ldrd	sl, r6, [r5]
   12f6c:	adds	r5, #8
   12f6e:	b.n	12eb2 <__sfvwrite_r+0x36>
   12f70:	mov	r1, r4
   12f72:	mov	r0, r8
   12f74:	bl	10ccc <_fflush_r>
   12f78:	cbz	r0, 12fde <__sfvwrite_r+0x162>
   12f7a:	ldrsh.w	r3, [r4, #12]
   12f7e:	orr.w	r3, r3, #64	; 0x40
   12f82:	mov.w	r0, #4294967295
   12f86:	strh	r3, [r4, #12]
   12f88:	add	sp, #12
   12f8a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12f8e:	movs	r0, #0
   12f90:	bx	lr
   12f92:	mov	r6, r3
   12f94:	mov	sl, r7
   12f96:	mov	r9, r3
   12f98:	mov	r0, r3
   12f9a:	str	r5, [sp, #0]
   12f9c:	mov	r7, r3
   12f9e:	cbz	r6, 12ffa <__sfvwrite_r+0x17e>
   12fa0:	cmp	r0, #0
   12fa2:	beq.n	1300a <__sfvwrite_r+0x18e>
   12fa4:	mov	r2, r9
   12fa6:	ldrd	r1, r3, [r4, #16]
   12faa:	ldr	r0, [r4, #0]
   12fac:	ldr	r5, [r4, #8]
   12fae:	cmp	r2, r6
   12fb0:	it	cs
   12fb2:	movcs	r2, r6
   12fb4:	cmp	r0, r1
   12fb6:	bls.n	12fc2 <__sfvwrite_r+0x146>
   12fb8:	add.w	fp, r5, r3
   12fbc:	cmp	r2, fp
   12fbe:	bgt.w	13110 <__sfvwrite_r+0x294>
   12fc2:	cmp	r3, r2
   12fc4:	bgt.n	13090 <__sfvwrite_r+0x214>
   12fc6:	ldr	r1, [r4, #28]
   12fc8:	ldr	r5, [r4, #36]	; 0x24
   12fca:	mov	r2, r7
   12fcc:	mov	r0, r8
   12fce:	blx	r5
   12fd0:	subs.w	fp, r0, #0
   12fd4:	ble.n	12f7a <__sfvwrite_r+0xfe>
   12fd6:	subs.w	r9, r9, fp
   12fda:	beq.n	12f70 <__sfvwrite_r+0xf4>
   12fdc:	movs	r0, #1
   12fde:	ldr.w	r3, [sl, #8]
   12fe2:	sub.w	r3, r3, fp
   12fe6:	add	r7, fp
   12fe8:	sub.w	r6, r6, fp
   12fec:	str.w	r3, [sl, #8]
   12ff0:	cmp	r3, #0
   12ff2:	beq.w	12ede <__sfvwrite_r+0x62>
   12ff6:	cmp	r6, #0
   12ff8:	bne.n	12fa0 <__sfvwrite_r+0x124>
   12ffa:	ldr	r2, [sp, #0]
   12ffc:	ldr	r6, [r2, #4]
   12ffe:	mov	r3, r2
   13000:	adds	r2, #8
   13002:	str	r2, [sp, #0]
   13004:	cmp	r6, #0
   13006:	beq.n	12ffa <__sfvwrite_r+0x17e>
   13008:	ldr	r7, [r3, #0]
   1300a:	mov	r2, r6
   1300c:	movs	r1, #10
   1300e:	mov	r0, r7
   13010:	bl	e320 <memchr>
   13014:	cmp	r0, #0
   13016:	beq.w	13152 <__sfvwrite_r+0x2d6>
   1301a:	adds	r0, #1
   1301c:	sub.w	r9, r0, r7
   13020:	b.n	12fa4 <__sfvwrite_r+0x128>
   13022:	ldr	r0, [r4, #0]
   13024:	ldr	r3, [r4, #16]
   13026:	cmp	r0, r3
   13028:	bhi.n	13058 <__sfvwrite_r+0x1dc>
   1302a:	ldr	r2, [r4, #20]
   1302c:	cmp	r2, r6
   1302e:	bhi.n	13058 <__sfvwrite_r+0x1dc>
   13030:	mvn.w	r3, #2147483648	; 0x80000000
   13034:	cmp	r3, r6
   13036:	it	cs
   13038:	movcs	r3, r6
   1303a:	ldr	r1, [r4, #28]
   1303c:	sdiv	r3, r3, r2
   13040:	ldr	r7, [r4, #36]	; 0x24
   13042:	mul.w	r3, r2, r3
   13046:	mov	r0, r8
   13048:	mov	r2, r9
   1304a:	blx	r7
   1304c:	subs.w	sl, r0, #0
   13050:	ble.n	12f7a <__sfvwrite_r+0xfe>
   13052:	sub.w	r6, r6, sl
   13056:	b.n	12f46 <__sfvwrite_r+0xca>
   13058:	cmp	fp, r6
   1305a:	mov	sl, fp
   1305c:	it	cs
   1305e:	movcs	sl, r6
   13060:	mov	r2, sl
   13062:	mov	r1, r9
   13064:	bl	df4c <memmove>
   13068:	ldr	r3, [r4, #8]
   1306a:	ldr	r2, [r4, #0]
   1306c:	sub.w	r3, r3, sl
   13070:	add	r2, sl
   13072:	str	r3, [r4, #8]
   13074:	str	r2, [r4, #0]
   13076:	cmp	r3, #0
   13078:	bne.n	13052 <__sfvwrite_r+0x1d6>
   1307a:	mov	r1, r4
   1307c:	mov	r0, r8
   1307e:	bl	10ccc <_fflush_r>
   13082:	cmp	r0, #0
   13084:	beq.n	13052 <__sfvwrite_r+0x1d6>
   13086:	b.n	12f7a <__sfvwrite_r+0xfe>
   13088:	ldr	r0, [r4, #0]
   1308a:	mov	fp, r6
   1308c:	mov	r2, r6
   1308e:	b.n	12f2a <__sfvwrite_r+0xae>
   13090:	mov	r1, r7
   13092:	str	r2, [sp, #4]
   13094:	bl	df4c <memmove>
   13098:	ldr	r2, [sp, #4]
   1309a:	ldr	r3, [r4, #8]
   1309c:	subs	r3, r3, r2
   1309e:	str	r3, [r4, #8]
   130a0:	ldr	r3, [r4, #0]
   130a2:	add	r3, r2
   130a4:	str	r3, [r4, #0]
   130a6:	mov	fp, r2
   130a8:	b.n	12fd6 <__sfvwrite_r+0x15a>
   130aa:	ldr	r3, [r4, #0]
   130ac:	ldr	r1, [r4, #16]
   130ae:	sub.w	fp, r3, r1
   130b2:	ldr	r3, [r4, #20]
   130b4:	add.w	sl, r3, r3, lsl #1
   130b8:	add.w	sl, sl, sl, lsr #31
   130bc:	add.w	r3, fp, #1
   130c0:	mov.w	sl, sl, asr #1
   130c4:	add	r3, r6
   130c6:	cmp	r3, sl
   130c8:	mov	r2, sl
   130ca:	itt	hi
   130cc:	movhi	sl, r3
   130ce:	movhi	r2, sl
   130d0:	lsls	r3, r0, #21
   130d2:	bpl.n	1312e <__sfvwrite_r+0x2b2>
   130d4:	mov	r1, r2
   130d6:	mov	r0, r8
   130d8:	bl	d230 <_malloc_r>
   130dc:	cmp	r0, #0
   130de:	beq.n	13158 <__sfvwrite_r+0x2dc>
   130e0:	mov	r2, fp
   130e2:	ldr	r1, [r4, #16]
   130e4:	str	r0, [sp, #4]
   130e6:	bl	a0a4 <memcpy>
   130ea:	ldrh	r2, [r4, #12]
   130ec:	ldr	r3, [sp, #4]
   130ee:	bic.w	r2, r2, #1152	; 0x480
   130f2:	orr.w	r2, r2, #128	; 0x80
   130f6:	strh	r2, [r4, #12]
   130f8:	add.w	r0, r3, fp
   130fc:	str	r3, [r4, #16]
   130fe:	sub.w	r3, sl, fp
   13102:	str.w	sl, [r4, #20]
   13106:	str	r3, [r4, #8]
   13108:	str	r0, [r4, #0]
   1310a:	mov	fp, r6
   1310c:	mov	r2, r6
   1310e:	b.n	12f2a <__sfvwrite_r+0xae>
   13110:	mov	r1, r7
   13112:	mov	r2, fp
   13114:	bl	df4c <memmove>
   13118:	ldr	r3, [r4, #0]
   1311a:	add	r3, fp
   1311c:	str	r3, [r4, #0]
   1311e:	mov	r1, r4
   13120:	mov	r0, r8
   13122:	bl	10ccc <_fflush_r>
   13126:	cmp	r0, #0
   13128:	beq.w	12fd6 <__sfvwrite_r+0x15a>
   1312c:	b.n	12f7a <__sfvwrite_r+0xfe>
   1312e:	mov	r0, r8
   13130:	bl	d7a8 <_realloc_r>
   13134:	mov	r3, r0
   13136:	cmp	r0, #0
   13138:	bne.n	130f8 <__sfvwrite_r+0x27c>
   1313a:	ldr	r1, [r4, #16]
   1313c:	mov	r0, r8
   1313e:	bl	e5c4 <_free_r>
   13142:	ldrsh.w	r3, [r4, #12]
   13146:	movs	r2, #12
   13148:	bic.w	r3, r3, #128	; 0x80
   1314c:	str.w	r2, [r8]
   13150:	b.n	12f7e <__sfvwrite_r+0x102>
   13152:	adds	r2, r6, #1
   13154:	mov	r9, r2
   13156:	b.n	12fa6 <__sfvwrite_r+0x12a>
   13158:	movs	r2, #12
   1315a:	ldrsh.w	r3, [r4, #12]
   1315e:	str.w	r2, [r8]
   13162:	b.n	12f7e <__sfvwrite_r+0x102>
   13164:	mov.w	r0, #4294967295
   13168:	b.n	12ee0 <__sfvwrite_r+0x64>
   1316a:	nop
   1316c:	.word	0x7ffffc00

00013170 <__swsetup_r>:
   13170:	push	{r3, r4, r5, lr}
   13172:	ldr	r3, [pc, #196]	; (13238 <__swsetup_r+0xc8>)
   13174:	ldr	r3, [r3, #0]
   13176:	mov	r5, r0
   13178:	mov	r4, r1
   1317a:	cbz	r3, 13182 <__swsetup_r+0x12>
   1317c:	ldr	r2, [r3, #52]	; 0x34
   1317e:	cmp	r2, #0
   13180:	beq.n	13220 <__swsetup_r+0xb0>
   13182:	ldrsh.w	r3, [r4, #12]
   13186:	lsls	r0, r3, #28
   13188:	uxth	r2, r3
   1318a:	bpl.n	131c6 <__swsetup_r+0x56>
   1318c:	ldr	r1, [r4, #16]
   1318e:	cbz	r1, 131dc <__swsetup_r+0x6c>
   13190:	ands.w	r0, r2, #1
   13194:	beq.n	131a6 <__swsetup_r+0x36>
   13196:	movs	r0, #0
   13198:	str	r0, [r4, #8]
   1319a:	ldr	r0, [r4, #20]
   1319c:	negs	r0, r0
   1319e:	str	r0, [r4, #24]
   131a0:	cbz	r1, 131b2 <__swsetup_r+0x42>
   131a2:	movs	r0, #0
   131a4:	pop	{r3, r4, r5, pc}
   131a6:	lsls	r5, r2, #30
   131a8:	it	pl
   131aa:	ldrpl	r0, [r4, #20]
   131ac:	str	r0, [r4, #8]
   131ae:	cmp	r1, #0
   131b0:	bne.n	131a2 <__swsetup_r+0x32>
   131b2:	lsls	r2, r2, #24
   131b4:	it	pl
   131b6:	movpl	r0, r1
   131b8:	bpl.n	131a4 <__swsetup_r+0x34>
   131ba:	orr.w	r3, r3, #64	; 0x40
   131be:	strh	r3, [r4, #12]
   131c0:	mov.w	r0, #4294967295
   131c4:	pop	{r3, r4, r5, pc}
   131c6:	lsls	r1, r2, #27
   131c8:	bpl.n	13228 <__swsetup_r+0xb8>
   131ca:	lsls	r2, r2, #29
   131cc:	bmi.n	131f8 <__swsetup_r+0x88>
   131ce:	ldr	r1, [r4, #16]
   131d0:	orr.w	r3, r3, #8
   131d4:	strh	r3, [r4, #12]
   131d6:	uxth	r2, r3
   131d8:	cmp	r1, #0
   131da:	bne.n	13190 <__swsetup_r+0x20>
   131dc:	and.w	r0, r2, #640	; 0x280
   131e0:	cmp.w	r0, #512	; 0x200
   131e4:	beq.n	13190 <__swsetup_r+0x20>
   131e6:	mov	r1, r4
   131e8:	mov	r0, r5
   131ea:	bl	1347c <__smakebuf_r>
   131ee:	ldrsh.w	r3, [r4, #12]
   131f2:	ldr	r1, [r4, #16]
   131f4:	uxth	r2, r3
   131f6:	b.n	13190 <__swsetup_r+0x20>
   131f8:	ldr	r1, [r4, #48]	; 0x30
   131fa:	cbz	r1, 13212 <__swsetup_r+0xa2>
   131fc:	add.w	r2, r4, #64	; 0x40
   13200:	cmp	r1, r2
   13202:	beq.n	1320e <__swsetup_r+0x9e>
   13204:	mov	r0, r5
   13206:	bl	e5c4 <_free_r>
   1320a:	ldrsh.w	r3, [r4, #12]
   1320e:	movs	r2, #0
   13210:	str	r2, [r4, #48]	; 0x30
   13212:	ldr	r1, [r4, #16]
   13214:	movs	r2, #0
   13216:	strd	r1, r2, [r4]
   1321a:	bic.w	r3, r3, #36	; 0x24
   1321e:	b.n	131d0 <__swsetup_r+0x60>
   13220:	mov	r0, r3
   13222:	bl	dcb8 <__sinit>
   13226:	b.n	13182 <__swsetup_r+0x12>
   13228:	movs	r2, #9
   1322a:	orr.w	r3, r3, #64	; 0x40
   1322e:	str	r2, [r5, #0]
   13230:	mov.w	r0, #4294967295
   13234:	strh	r3, [r4, #12]
   13236:	pop	{r3, r4, r5, pc}
   13238:	.word	0x20001a1c

0001323c <__fputwc>:
   1323c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13240:	sub	sp, #8
   13242:	mov	sl, r0
   13244:	mov	r8, r1
   13246:	mov	r4, r2
   13248:	bl	e1d8 <__locale_mb_cur_max>
   1324c:	cmp	r0, #1
   1324e:	bne.n	13258 <__fputwc+0x1c>
   13250:	add.w	r3, r8, #4294967295
   13254:	cmp	r3, #254	; 0xfe
   13256:	bls.n	132c6 <__fputwc+0x8a>
   13258:	add.w	r9, sp, #4
   1325c:	mov	r2, r8
   1325e:	add.w	r3, r4, #92	; 0x5c
   13262:	mov	r1, r9
   13264:	mov	r0, sl
   13266:	bl	11c6c <_wcrtomb_r>
   1326a:	adds	r2, r0, #1
   1326c:	mov	r6, r0
   1326e:	beq.n	132d6 <__fputwc+0x9a>
   13270:	cbz	r0, 132bc <__fputwc+0x80>
   13272:	ldrb.w	ip, [sp, #4]
   13276:	movs	r5, #0
   13278:	b.n	1328e <__fputwc+0x52>
   1327a:	ldr	r3, [r4, #0]
   1327c:	adds	r2, r3, #1
   1327e:	str	r2, [r4, #0]
   13280:	strb.w	ip, [r3]
   13284:	adds	r5, #1
   13286:	cmp	r5, r6
   13288:	bcs.n	132bc <__fputwc+0x80>
   1328a:	ldrb.w	ip, [r9, #1]!
   1328e:	ldr	r3, [r4, #8]
   13290:	subs	r3, #1
   13292:	cmp	r3, #0
   13294:	str	r3, [r4, #8]
   13296:	bge.n	1327a <__fputwc+0x3e>
   13298:	ldr	r7, [r4, #24]
   1329a:	cmp	r3, r7
   1329c:	mov	r1, ip
   1329e:	mov	r2, r4
   132a0:	mov	r0, sl
   132a2:	blt.n	132aa <__fputwc+0x6e>
   132a4:	cmp.w	ip, #10
   132a8:	bne.n	1327a <__fputwc+0x3e>
   132aa:	bl	13554 <__swbuf_r>
   132ae:	adds	r3, r0, #1
   132b0:	bne.n	13284 <__fputwc+0x48>
   132b2:	mov	r6, r0
   132b4:	mov	r0, r6
   132b6:	add	sp, #8
   132b8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   132bc:	mov	r6, r8
   132be:	mov	r0, r6
   132c0:	add	sp, #8
   132c2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   132c6:	uxtb.w	ip, r8
   132ca:	strb.w	ip, [sp, #4]
   132ce:	mov	r6, r0
   132d0:	add.w	r9, sp, #4
   132d4:	b.n	13276 <__fputwc+0x3a>
   132d6:	ldrh	r3, [r4, #12]
   132d8:	mov	r0, r6
   132da:	orr.w	r3, r3, #64	; 0x40
   132de:	strh	r3, [r4, #12]
   132e0:	add	sp, #8
   132e2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   132e6:	nop

000132e8 <_fputwc_r>:
   132e8:	push	{r4, r5, lr}
   132ea:	ldr	r3, [r2, #100]	; 0x64
   132ec:	tst.w	r3, #1
   132f0:	ldrsh.w	r3, [r2, #12]
   132f4:	mov	r4, r2
   132f6:	sub	sp, #12
   132f8:	mov	r5, r0
   132fa:	uxth	r2, r3
   132fc:	bne.n	13302 <_fputwc_r+0x1a>
   132fe:	lsls	r0, r3, #22
   13300:	bpl.n	1333c <_fputwc_r+0x54>
   13302:	lsls	r0, r2, #18
   13304:	bmi.n	13314 <_fputwc_r+0x2c>
   13306:	ldr	r2, [r4, #100]	; 0x64
   13308:	orr.w	r3, r3, #8192	; 0x2000
   1330c:	orr.w	r2, r2, #8192	; 0x2000
   13310:	strh	r3, [r4, #12]
   13312:	str	r2, [r4, #100]	; 0x64
   13314:	mov	r2, r4
   13316:	mov	r0, r5
   13318:	bl	1323c <__fputwc>
   1331c:	ldr	r3, [r4, #100]	; 0x64
   1331e:	lsls	r2, r3, #31
   13320:	mov	r5, r0
   13322:	bmi.n	1332a <_fputwc_r+0x42>
   13324:	ldrh	r3, [r4, #12]
   13326:	lsls	r3, r3, #22
   13328:	bpl.n	13330 <_fputwc_r+0x48>
   1332a:	mov	r0, r5
   1332c:	add	sp, #12
   1332e:	pop	{r4, r5, pc}
   13330:	ldr	r0, [r4, #88]	; 0x58
   13332:	bl	e310 <__retarget_lock_release_recursive>
   13336:	mov	r0, r5
   13338:	add	sp, #12
   1333a:	pop	{r4, r5, pc}
   1333c:	ldr	r0, [r4, #88]	; 0x58
   1333e:	str	r1, [sp, #4]
   13340:	bl	e30c <__retarget_lock_acquire_recursive>
   13344:	ldrsh.w	r3, [r4, #12]
   13348:	ldr	r1, [sp, #4]
   1334a:	uxth	r2, r3
   1334c:	b.n	13302 <_fputwc_r+0x1a>
   1334e:	nop

00013350 <_wcsnrtombs_l>:
   13350:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13354:	sub	sp, #44	; 0x2c
   13356:	ldrd	r8, sl, [sp, #84]	; 0x54
   1335a:	ldr	r7, [sp, #80]	; 0x50
   1335c:	str	r1, [sp, #12]
   1335e:	mov	r9, r0
   13360:	str	r2, [sp, #20]
   13362:	mov	r6, r3
   13364:	cmp.w	r8, #0
   13368:	beq.n	13424 <_wcsnrtombs_l+0xd4>
   1336a:	ldr	r3, [sp, #12]
   1336c:	cmp	r3, #0
   1336e:	beq.n	1342e <_wcsnrtombs_l+0xde>
   13370:	ldr	r3, [sp, #20]
   13372:	ldr	r5, [r3, #0]
   13374:	cmp	r7, #0
   13376:	beq.n	1344e <_wcsnrtombs_l+0xfe>
   13378:	subs	r4, r6, #1
   1337a:	cbz	r6, 133d0 <_wcsnrtombs_l+0x80>
   1337c:	ldr	r3, [sp, #12]
   1337e:	str	r3, [sp, #16]
   13380:	subs	r5, #4
   13382:	movs	r6, #0
   13384:	str	r5, [sp, #4]
   13386:	b.n	133a0 <_wcsnrtombs_l+0x50>
   13388:	ldr	r3, [sp, #12]
   1338a:	cbnz	r3, 133d8 <_wcsnrtombs_l+0x88>
   1338c:	ldr	r3, [sp, #4]
   1338e:	ldr	r2, [r3, #0]
   13390:	cmp	r2, #0
   13392:	beq.n	1340a <_wcsnrtombs_l+0xba>
   13394:	cmp	ip, r7
   13396:	bcs.n	13452 <_wcsnrtombs_l+0x102>
   13398:	subs	r4, #1
   1339a:	adds	r3, r4, #1
   1339c:	mov	r6, ip
   1339e:	beq.n	133d0 <_wcsnrtombs_l+0x80>
   133a0:	ldr.w	r3, [r8]
   133a4:	str	r3, [sp, #8]
   133a6:	ldr	r3, [sp, #4]
   133a8:	ldr.w	r5, [sl, #224]	; 0xe0
   133ac:	ldr.w	r2, [r3, #4]!
   133b0:	str	r3, [sp, #4]
   133b2:	add	r1, sp, #28
   133b4:	mov	r3, r8
   133b6:	mov	r0, r9
   133b8:	ldr.w	fp, [r8, #4]
   133bc:	blx	r5
   133be:	adds	r2, r0, #1
   133c0:	beq.n	13438 <_wcsnrtombs_l+0xe8>
   133c2:	add.w	ip, r0, r6
   133c6:	cmp	ip, r7
   133c8:	bls.n	13388 <_wcsnrtombs_l+0x38>
   133ca:	ldr	r3, [sp, #8]
   133cc:	strd	r3, fp, [r8]
   133d0:	mov	r0, r6
   133d2:	add	sp, #44	; 0x2c
   133d4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   133d8:	cmp	r0, #0
   133da:	ble.n	133fa <_wcsnrtombs_l+0xaa>
   133dc:	ldr	r3, [sp, #16]
   133de:	ldr	r5, [sp, #4]
   133e0:	add	r0, r3
   133e2:	subs	r2, r3, #1
   133e4:	add	r1, sp, #28
   133e6:	add.w	lr, r0, #4294967295
   133ea:	ldrb.w	r3, [r1], #1
   133ee:	strb.w	r3, [r2, #1]!
   133f2:	cmp	r2, lr
   133f4:	bne.n	133ea <_wcsnrtombs_l+0x9a>
   133f6:	str	r5, [sp, #4]
   133f8:	str	r0, [sp, #16]
   133fa:	ldr	r3, [sp, #20]
   133fc:	ldr	r2, [r3, #0]
   133fe:	adds	r2, #4
   13400:	str	r2, [r3, #0]
   13402:	ldr	r3, [sp, #4]
   13404:	ldr	r2, [r3, #0]
   13406:	cmp	r2, #0
   13408:	bne.n	13394 <_wcsnrtombs_l+0x44>
   1340a:	ldr	r3, [sp, #12]
   1340c:	cbz	r3, 13412 <_wcsnrtombs_l+0xc2>
   1340e:	ldr	r3, [sp, #20]
   13410:	str	r2, [r3, #0]
   13412:	add.w	r6, ip, #4294967295
   13416:	movs	r2, #0
   13418:	mov	r0, r6
   1341a:	str.w	r2, [r8]
   1341e:	add	sp, #44	; 0x2c
   13420:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13424:	ldr	r3, [sp, #12]
   13426:	add.w	r8, r0, #268	; 0x10c
   1342a:	cmp	r3, #0
   1342c:	bne.n	13370 <_wcsnrtombs_l+0x20>
   1342e:	ldr	r3, [sp, #20]
   13430:	mov.w	r7, #4294967295
   13434:	ldr	r5, [r3, #0]
   13436:	b.n	13378 <_wcsnrtombs_l+0x28>
   13438:	mov	r6, r0
   1343a:	movs	r1, #138	; 0x8a
   1343c:	movs	r2, #0
   1343e:	mov	r0, r6
   13440:	str.w	r1, [r9]
   13444:	str.w	r2, [r8]
   13448:	add	sp, #44	; 0x2c
   1344a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1344e:	mov	r6, r7
   13450:	b.n	133d0 <_wcsnrtombs_l+0x80>
   13452:	mov	r6, ip
   13454:	b.n	133d0 <_wcsnrtombs_l+0x80>
   13456:	nop

00013458 <_wcsnrtombs_r>:
   13458:	push	{r4, lr}
   1345a:	sub	sp, #16
   1345c:	ldr	r4, [pc, #20]	; (13474 <_wcsnrtombs_r+0x1c>)
   1345e:	ldr	r0, [sp, #24]
   13460:	str	r0, [sp, #0]
   13462:	ldr	r0, [sp, #28]
   13464:	str	r0, [sp, #4]
   13466:	ldr	r0, [pc, #16]	; (13478 <_wcsnrtombs_r+0x20>)
   13468:	ldr	r0, [r0, #0]
   1346a:	str	r4, [sp, #8]
   1346c:	bl	13350 <_wcsnrtombs_l>
   13470:	add	sp, #16
   13472:	pop	{r4, pc}
   13474:	.word	0x20001494
   13478:	.word	0x20001a1c

0001347c <__smakebuf_r>:
   1347c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13480:	ldrh	r3, [r1, #12]
   13482:	mov	r4, r1
   13484:	lsls	r1, r3, #30
   13486:	sub	sp, #88	; 0x58
   13488:	bpl.n	1349c <__smakebuf_r+0x20>
   1348a:	add.w	r3, r4, #67	; 0x43
   1348e:	movs	r2, #1
   13490:	strd	r3, r2, [r4, #16]
   13494:	str	r3, [r4, #0]
   13496:	add	sp, #88	; 0x58
   13498:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1349c:	ldrsh.w	r1, [r4, #14]
   134a0:	cmp	r1, #0
   134a2:	mov	r6, r0
   134a4:	blt.n	134f2 <__smakebuf_r+0x76>
   134a6:	mov	r2, sp
   134a8:	bl	13604 <_fstat_r>
   134ac:	cmp	r0, #0
   134ae:	blt.n	134f0 <__smakebuf_r+0x74>
   134b0:	ldr	r5, [sp, #4]
   134b2:	and.w	r5, r5, #61440	; 0xf000
   134b6:	sub.w	r5, r5, #8192	; 0x2000
   134ba:	clz	r5, r5
   134be:	mov.w	r8, #1024	; 0x400
   134c2:	lsrs	r5, r5, #5
   134c4:	mov.w	r7, #2048	; 0x800
   134c8:	mov	r1, r8
   134ca:	mov	r0, r6
   134cc:	bl	d230 <_malloc_r>
   134d0:	cbz	r0, 1350c <__smakebuf_r+0x90>
   134d2:	ldrsh.w	r3, [r4, #12]
   134d6:	str.w	r8, [r4, #20]
   134da:	orr.w	r3, r3, #128	; 0x80
   134de:	str	r0, [r4, #0]
   134e0:	str	r0, [r4, #16]
   134e2:	strh	r3, [r4, #12]
   134e4:	cbnz	r5, 13534 <__smakebuf_r+0xb8>
   134e6:	orrs	r3, r7
   134e8:	strh	r3, [r4, #12]
   134ea:	add	sp, #88	; 0x58
   134ec:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   134f0:	ldrh	r3, [r4, #12]
   134f2:	ands.w	r5, r3, #128	; 0x80
   134f6:	beq.n	1352c <__smakebuf_r+0xb0>
   134f8:	mov.w	r8, #64	; 0x40
   134fc:	movs	r5, #0
   134fe:	mov	r1, r8
   13500:	mov	r0, r6
   13502:	mov	r7, r5
   13504:	bl	d230 <_malloc_r>
   13508:	cmp	r0, #0
   1350a:	bne.n	134d2 <__smakebuf_r+0x56>
   1350c:	ldrsh.w	r3, [r4, #12]
   13510:	lsls	r2, r3, #22
   13512:	bmi.n	13496 <__smakebuf_r+0x1a>
   13514:	bic.w	r3, r3, #3
   13518:	add.w	r2, r4, #67	; 0x43
   1351c:	orr.w	r3, r3, #2
   13520:	movs	r1, #1
   13522:	strd	r2, r1, [r4, #16]
   13526:	strh	r3, [r4, #12]
   13528:	str	r2, [r4, #0]
   1352a:	b.n	13496 <__smakebuf_r+0x1a>
   1352c:	mov.w	r8, #1024	; 0x400
   13530:	mov	r7, r5
   13532:	b.n	134c8 <__smakebuf_r+0x4c>
   13534:	ldrsh.w	r1, [r4, #14]
   13538:	mov	r0, r6
   1353a:	bl	13630 <_isatty_r>
   1353e:	cbnz	r0, 13546 <__smakebuf_r+0xca>
   13540:	ldrsh.w	r3, [r4, #12]
   13544:	b.n	134e6 <__smakebuf_r+0x6a>
   13546:	ldrh	r3, [r4, #12]
   13548:	bic.w	r3, r3, #3
   1354c:	orr.w	r3, r3, #1
   13550:	sxth	r3, r3
   13552:	b.n	134e6 <__smakebuf_r+0x6a>

00013554 <__swbuf_r>:
   13554:	push	{r3, r4, r5, r6, r7, lr}
   13556:	mov	r5, r1
   13558:	mov	r4, r2
   1355a:	mov	r6, r0
   1355c:	cbz	r0, 13564 <__swbuf_r+0x10>
   1355e:	ldr	r3, [r0, #52]	; 0x34
   13560:	cmp	r3, #0
   13562:	beq.n	135fe <__swbuf_r+0xaa>
   13564:	ldrsh.w	r2, [r4, #12]
   13568:	ldr	r3, [r4, #24]
   1356a:	str	r3, [r4, #8]
   1356c:	lsls	r7, r2, #28
   1356e:	uxth	r0, r2
   13570:	bpl.n	135aa <__swbuf_r+0x56>
   13572:	ldr	r3, [r4, #16]
   13574:	cbz	r3, 135aa <__swbuf_r+0x56>
   13576:	uxtb	r5, r5
   13578:	lsls	r1, r0, #18
   1357a:	mov	r7, r5
   1357c:	bpl.n	135c4 <__swbuf_r+0x70>
   1357e:	ldr	r2, [r4, #0]
   13580:	ldr	r1, [r4, #20]
   13582:	subs	r3, r2, r3
   13584:	cmp	r1, r3
   13586:	ble.n	135dc <__swbuf_r+0x88>
   13588:	adds	r3, #1
   1358a:	ldr	r1, [r4, #8]
   1358c:	subs	r1, #1
   1358e:	str	r1, [r4, #8]
   13590:	adds	r1, r2, #1
   13592:	str	r1, [r4, #0]
   13594:	strb	r5, [r2, #0]
   13596:	ldr	r2, [r4, #20]
   13598:	cmp	r2, r3
   1359a:	beq.n	135ec <__swbuf_r+0x98>
   1359c:	ldrh	r3, [r4, #12]
   1359e:	lsls	r3, r3, #31
   135a0:	bpl.n	135a6 <__swbuf_r+0x52>
   135a2:	cmp	r5, #10
   135a4:	beq.n	135ec <__swbuf_r+0x98>
   135a6:	mov	r0, r7
   135a8:	pop	{r3, r4, r5, r6, r7, pc}
   135aa:	mov	r1, r4
   135ac:	mov	r0, r6
   135ae:	bl	13170 <__swsetup_r>
   135b2:	cbnz	r0, 135f8 <__swbuf_r+0xa4>
   135b4:	ldrsh.w	r2, [r4, #12]
   135b8:	ldr	r3, [r4, #16]
   135ba:	uxth	r0, r2
   135bc:	uxtb	r5, r5
   135be:	lsls	r1, r0, #18
   135c0:	mov	r7, r5
   135c2:	bmi.n	1357e <__swbuf_r+0x2a>
   135c4:	orr.w	r2, r2, #8192	; 0x2000
   135c8:	strh	r2, [r4, #12]
   135ca:	ldr	r2, [r4, #100]	; 0x64
   135cc:	ldr	r1, [r4, #20]
   135ce:	bic.w	r2, r2, #8192	; 0x2000
   135d2:	str	r2, [r4, #100]	; 0x64
   135d4:	ldr	r2, [r4, #0]
   135d6:	subs	r3, r2, r3
   135d8:	cmp	r1, r3
   135da:	bgt.n	13588 <__swbuf_r+0x34>
   135dc:	mov	r1, r4
   135de:	mov	r0, r6
   135e0:	bl	10ccc <_fflush_r>
   135e4:	cbnz	r0, 135f8 <__swbuf_r+0xa4>
   135e6:	ldr	r2, [r4, #0]
   135e8:	movs	r3, #1
   135ea:	b.n	1358a <__swbuf_r+0x36>
   135ec:	mov	r1, r4
   135ee:	mov	r0, r6
   135f0:	bl	10ccc <_fflush_r>
   135f4:	cmp	r0, #0
   135f6:	beq.n	135a6 <__swbuf_r+0x52>
   135f8:	mov.w	r7, #4294967295
   135fc:	b.n	135a6 <__swbuf_r+0x52>
   135fe:	bl	dcb8 <__sinit>
   13602:	b.n	13564 <__swbuf_r+0x10>

00013604 <_fstat_r>:
   13604:	push	{r4, r5, r6, lr}
   13606:	mov	r4, r1
   13608:	ldr	r5, [pc, #32]	; (1362c <_fstat_r+0x28>)
   1360a:	mov	r3, r0
   1360c:	movs	r6, #0
   1360e:	mov	r0, r4
   13610:	mov	r1, r2
   13612:	mov	r4, r3
   13614:	str	r6, [r5, #0]
   13616:	bl	ba60 <_fstat>
   1361a:	adds	r3, r0, #1
   1361c:	beq.n	13620 <_fstat_r+0x1c>
   1361e:	pop	{r4, r5, r6, pc}
   13620:	ldr	r3, [r5, #0]
   13622:	cmp	r3, #0
   13624:	beq.n	1361e <_fstat_r+0x1a>
   13626:	str	r3, [r4, #0]
   13628:	pop	{r4, r5, r6, pc}
   1362a:	nop
   1362c:	.word	0x20007994

00013630 <_isatty_r>:
   13630:	push	{r3, r4, r5, lr}
   13632:	ldr	r5, [pc, #28]	; (13650 <_isatty_r+0x20>)
   13634:	movs	r2, #0
   13636:	mov	r4, r0
   13638:	mov	r0, r1
   1363a:	str	r2, [r5, #0]
   1363c:	bl	ba6c <_isatty>
   13640:	adds	r3, r0, #1
   13642:	beq.n	13646 <_isatty_r+0x16>
   13644:	pop	{r3, r4, r5, pc}
   13646:	ldr	r3, [r5, #0]
   13648:	cmp	r3, #0
   1364a:	beq.n	13644 <_isatty_r+0x14>
   1364c:	str	r3, [r4, #0]
   1364e:	pop	{r3, r4, r5, pc}
   13650:	.word	0x20007994
   13654:	.word	0x00000000

00013658 <___init_veneer>:
   13658:	ldr.w	pc, [pc]	; 1365c <___init_veneer+0x4>
   1365c:	.word	0x60001eb5

00013660 <___ZN11AudioStream17initialize_memoryEP18audio_block_structj_veneer>:
   13660:	ldr.w	pc, [pc]	; 13664 <___ZN11AudioStream17initialize_memoryEP18audio_block_structj_veneer+0x4>
   13664:	.word	0x60001d99

00013668 <___reboot_Teensyduino__veneer>:
   13668:	ldr.w	pc, [pc]	; 1366c <___reboot_Teensyduino__veneer+0x4>
   1366c:	.word	0x60001731

Disassembly of section .fini:

00013670 <_fini>:
   13670:	push	{r3, r4, r5, r6, r7, lr}
   13672:	nop

// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ---------- //
// pio_tdm_in //
// ---------- //

#define pio_tdm_in_wrap_target 0
#define pio_tdm_in_wrap 11

static const uint16_t pio_tdm_in_program_instructions[] = {
            //     .wrap_target
    0xf840, //  0: set    y, 0            side 3     
    0x5001, //  1: in     pins, 1         side 2     
    0xf83d, //  2: set    x, 29           side 3     
    0x4001, //  3: in     pins, 1         side 0     
    0x0843, //  4: jmp    x--, 3          side 1     
    0x4001, //  5: in     pins, 1         side 0     
    0xe83d, //  6: set    x, 29           side 1     
    0x4001, //  7: in     pins, 1         side 0     
    0x0847, //  8: jmp    x--, 7          side 1     
    0x4001, //  9: in     pins, 1         side 0     
    0x0885, // 10: jmp    y--, 5          side 1     
    0x5001, // 11: in     pins, 1         side 2     
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program pio_tdm_in_program = {
    .instructions = pio_tdm_in_program_instructions,
    .length = 12,
    .origin = -1,
};

static inline pio_sm_config pio_tdm_in_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + pio_tdm_in_wrap_target, offset + pio_tdm_in_wrap);
    sm_config_set_sideset(&c, 2, false, false);
    return c;
}

static inline void pio_tdm_in_program_init(PIO pio, uint sm, uint offset, uint data_pin, uint clock_pin_base, uint bits) 
{
    pio_gpio_init(pio, data_pin);
    pio_gpio_init(pio, clock_pin_base);
    pio_gpio_init(pio, clock_pin_base + 1);
    //
    pio_sm_config sm_config = pio_tdm_in_program_get_default_config(offset);
    //
    sm_config_set_in_pins(&sm_config, data_pin);
    sm_config_set_sideset_pins(&sm_config, clock_pin_base);
    sm_config_set_in_shift(&sm_config, false, true,  bits);
    sm_config_set_fifo_join(&sm_config, PIO_FIFO_JOIN_RX);
    //
    pio_sm_init(pio, sm, offset, &sm_config);
    //
    uint pin_mask = 3u << clock_pin_base;
    pio_sm_set_pindirs_with_mask(pio, sm, pin_mask, pin_mask);
    pio_sm_set_pins(pio, sm, 0); // clear pins
    //
    //pio_sm_exec(pio, sm, pio_encode_set(pio_y, bits - 2));
}

#endif

